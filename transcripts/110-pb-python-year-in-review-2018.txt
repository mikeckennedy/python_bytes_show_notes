00:00:00 Hey folks, Michael here. Brian and I put together a special podcast episode for the top Python

00:00:05 stories of 2018. We originally recorded this as a talk Python to me episode. That's my other

00:00:10 podcast. Since it's a perfect match for what we do every week here on this show, Brian and I decided

00:00:16 to share it with all of you for our end of year countdown on Python bytes. We hope you enjoy the

00:00:21 episode and thank you for making this show so successful in 2018. We promise we'll keep it

00:00:26 going strong into 2019. Brian, Dan, both of you, welcome back to talk Python. Thank you. Hey,

00:00:33 thanks. Great to be back again. Yeah, it's great to have you back as always. It's going to be so much

00:00:36 fun and it is time to look back on 2018. Can you believe it's the end of 2018? I just remembered

00:00:43 how to write 2018 and not 2017 on all the stuff I have to sign. Yeah, it's, it's, it's gone by fast.

00:00:49 It definitely has. It definitely has. So it's good to have you back. We're going to go through

00:00:56 what the three of us have decided are some of the top stories in the Python space for 2018. And I just

00:01:03 want to quickly throw out there for folks listening. This mostly does not include data science stories.

00:01:08 There's a little bit here and there, but it's, it's mostly pure Python. And the reason is I'm also doing

00:01:14 a show on data science year in review. So save those big stories for that one. Don't want to overlap.

00:01:19 All right. Well, we're, we're going to start and do a top 10 countdown and we're going to go from

00:01:26 really interesting to the absolute big news at the end. And you can see what story we have picked to be

00:01:33 the number one story of 2018 for the Python space. Let's do a little warmup here and Dan,

00:01:39 I'll let you kick this off. What was our number 10 item?

00:01:42 Sounds good. So our number 10 is the Python 3.7 release and more specifically the performance

00:01:48 optimizations in there. And I know you had a really good show on the podcast here with Anthony Shaw,

00:01:55 where you guys talked about, you know, some of the changes in 3.7. And I just thought that 3.7

00:02:01 should be on this list because it was a really, really good release. You know, there's a lot of like

00:02:05 free performance improvements. It's always nice to see that. And it's just been awesome to see Python 3

00:02:10 and see Python 3 specifically gets so much love and that it's under active development and it's

00:02:15 making this forward progress. And I think it's also the release, or I think it was either 3.6 or 3.7

00:02:22 where Python 3 is now faster in all of the benchmarks than legacy Python, except for startup time. So I

00:02:29 thought, you know, that's kind of a nice milestone for Python 3.

00:02:33 I think that's a huge milestone for Python 3. I mean, this is sort of the year that the tide has turned

00:02:38 for Python 3 in a big way. I think it was starting to turn before, but really this year, I think that's,

00:02:44 that's one of the themes. And this is a major aspect of it, right? That Python 3 is now faster.

00:02:50 There were always these couple of reasons people say, I'm holding out to Python 2. You guys with your fancy

00:02:55 Python 3 and your new keywords can just go play because I, my code is faster and faster beats everything,

00:03:02 right? Well, maybe not. Yeah. Well, I mean, faster never really beats everything. It's,

00:03:07 it's faster development time too. And when you have a better data structures, you can sometimes develop

00:03:12 faster. However, you're right that a lot of people were holding out because of the, some of the speed

00:03:18 and, you know, and for certain, some applications that makes sense. But yeah, I think 3.7 is definitely

00:03:24 faster. And, and the other thing is a lot of people had already, some people for some of their projects

00:03:30 had already switched to Python 3.6. And that was probably from 2.7 to 3.6 was not an easy switch.

00:03:37 Having a switch from 3.6 to 3.7 be like, oh, I don't have to do anything. It's just better now.

00:03:44 That was a nice thing to have. Yeah. That's super nice. And I think that's a really great point you

00:03:48 raised, Brian, that, you know, careful what you're optimizing for, right? Like if it was really all

00:03:54 about speed, wouldn't we just be writing assembly code still, you know? Yeah. I bet somebody good

00:04:01 at writing assembly could crush the performance of Python or a lot of C++, but you know, they would

00:04:08 release an app, a small app every 10 years and it would be buggy, right? Like there's just,

00:04:14 it's not the most important thing. That's, that's for sure. One of my, my favorite examples there is,

00:04:19 what's this, it's, what's this game called? It's Rollercoaster Tycoon, which was written by one person

00:04:24 in Win32 x86 assembly. It's like a hundred percent assembly code. And it's actually an amazing,

00:04:33 amazing game. And it's, it's just, it just blows my mind. Like everything was written in assembly

00:04:38 language. Wow. And it probably runs like totally smooth on like a 286 or something, right?

00:04:44 Yeah. No, I think you needed a Pentium or something, but, you know, now somebody's

00:04:49 working on like a Python, going to need a, I don't know, multi-core CPUs and whatnot to run

00:04:57 at the same performance. Yeah. Who knows? But you know, another, another interesting thing that's

00:05:02 coming out is more and more talk about actually compiling Python, which I think, you know,

00:05:07 didn't make the list, but it's definitely something that, that came up like my PyC for example,

00:05:11 and Cython and whatnot. Yeah. Yeah. So if we're going to release a new library or an

00:05:17 awesome game, like Rollercoaster Tycoon or something like that, and we were going to do it in open source,

00:05:24 probably the main full release after it's like totally stable and spent out for a year,

00:05:29 it'd be like 0.01 or, or 0.3, maybe an 0.3, like a 0.12, I don't know, something really,

00:05:37 really small, right? Like that. Right. And that's been a theme that's gone through a lot of,

00:05:43 a lot of open source. So I think I'd like to highlight a little bit of shift in just the

00:05:48 versioning that seems to be happening around projects. I want to kick off this part of the

00:05:53 conversation with talking about Mahmoud Hashemi's project called Zerover. Brian, do you remember

00:05:59 covering that on Python Bytes? Yeah. He released it like as an April Fool's thing, but it actually

00:06:04 highlighted a lot of, a lot of things about different projects that were zero over after like,

00:06:10 you know, years. Yeah. So the idea is kind of like I was describing at the beginning, like

00:06:14 so many projects just never even reach version 1.0. And in some sense, it doesn't matter, right? Is the

00:06:22 version number smaller or bigger? That tells you whether you have an older or new one, right? So

00:06:26 that's fine. But there's a lot of people, especially coming from the enterprise space

00:06:31 or from the commercial software space that sees things like 0.20 and go, oh, that thing's like a

00:06:37 super alpha. We're going to stay away from that until that reaches 1.0. And I think it has a tangible

00:06:43 effect on turning off a certain category of folks, especially people who are maybe unfamiliar with

00:06:48 open source and things like that. Yeah, I think definitely. We, I mean, a lot of people do commercial

00:06:54 software development and like I do and, the zero, zero versions always, or almost always

00:07:03 mean the API is in flux. You can't trust it. You shouldn't program against it because it can, the

00:07:09 developers can change their mind at any time. And it isn't until the 1.0 version where we have a,

00:07:14 a stable, a stable API that people can count on. Yeah. And so I think a lot of people perceive it that

00:07:20 way, right? Yeah. It's interesting to consider the, the version number as part of the user

00:07:26 interface, you know, for, for an open source project, which makes absolute sense because of

00:07:31 those, those effects where people are like, yeah, you know, is this, is this really ready to go here?

00:07:35 Is this a, an early release or whatever? I mean, I'm wondering if it's really going to have a big

00:07:39 impact, you know, if people are moving to something like, like dating their releases,

00:07:43 like just calling them 2018 dot something, something, and you sort of get the November

00:07:47 release, but it's, it's an interesting experiment for sure. I mean, it definitely looks a little bit

00:07:52 nicer than, you know, having, I don't know, like somebody put pandas, pandas here, which had like

00:07:56 83 releases and it's been running or it's been active for eight years and it's sitting at 0.24

00:08:01 .0.dev.

00:08:04 .dev.

00:08:05 .dev.

00:08:05 .dev.

00:08:05 .dev.

00:08:05 Nothing wrong with that, but I can see how it turns some people off. Yeah.

00:08:11 I don't know how dev zero means production, but you know, to me that just says like, dude,

00:08:16 stay away from this. Don't ship this.

00:08:18 That's scary.

00:08:19 Yeah. I think the, you know, maybe the grandfather of zero for might be putty, you know,

00:08:25 that little, SSH tool you get for windows cause it doesn't come built in.

00:08:29 that'll trade app. it's 20 years old and it's 0.7.

00:08:33 One concern that I have with moving to the date based or like year based version numbers is how,

00:08:39 like if you have the semantic versions, you can do things like, okay, I want,

00:08:43 give me all the minor patches for this package and all the security updates, but I don't

00:08:48 want to jump to the next major version, which maybe has a breaking changes in it. And I know

00:08:53 that's not a perfect system. Generally you want to pin your packages, but it's kind of nice to have

00:08:56 the ability to do that. And with, you know, who knows what's going to happen in like July,

00:09:01 2018 or something 19.

00:09:02 Yeah, absolutely. So if you look at some of the tools that I know you use and I use, for example,

00:09:07 I use pyup.io and use something slightly different, but they let you go to your requirements file or

00:09:13 your pip file and say, I want you to keep this on the latest pin version possible with this

00:09:18 constraint where you could say like 0.1.star or something like that. Right.

00:09:23 Right. Yeah. But like, how would that work with, you know, date based formats?

00:09:28 Exactly. So let's dig into that a little bit. So what are the two options? I guess the two options

00:09:32 are just like to start shipping like full versions, like Django is now Django two and the Django two,

00:09:38 the main change from one to two is we're dropping Python to support, which is kind of ironic. Maybe it

00:09:44 should be Django three, but whatever. You know, it indicates a major change, like you were saying there,

00:09:49 right? So one of the projects that's switching to calendar based version is Sanic, right? The async web

00:09:57 framework. And what they're doing is they're trying to ship a version, a major release every quarter. So they

00:10:04 might be, you know, 2018.07.0, then .1.2 to for like incremental changes. But they're also doing LTS releases

00:10:14 around their calendar version. So every December is an LTS version. So 2018.12.0 and so on would be

00:10:24 supported for a year and would be the LTS equivalent, the long-term support equivalent. If you don't want

00:10:29 to switch to something beyond that, that's how that group is handling it. Interesting.

00:10:34 Yeah. I kind of like that. Then you can glance at a version and I mean, if everybody sort of supports

00:10:39 something like that, you can glance at all of your versions and go, Oh, everything's within a

00:10:43 year or so. So it's, it's probably fine. Exactly. Like Brian, you know a lot about testing. If I told

00:10:49 you I'm using web test.2.0.32, is that new? Is it super old? Is that a beta version? Like what is it?

00:10:56 Like, what is that? Right. You don't know. Yeah. But if I told you I was using web test 2019.1.0,

00:11:02 like, Oh, you must be like testing the new one that's coming or, you know, something I, it's just

00:11:06 communicates it. So Sanic is doing this. pip is doing this. and then you threw some others

00:11:11 in there, Brian, what are these? I'm not familiar with them. There's some descriptions of calendar

00:11:15 version and semantic version, calver.org and semver.org. I love that those are domains.

00:11:20 I think Mahmoud did at least one of them, maybe both. He has this knack for creating these little

00:11:27 sites and these little projects that just pop out of nowhere. But the, the, the, one of the things I want to

00:11:32 point out is I was talking with somebody about calendar versioning and that versus semantic

00:11:38 versioning. And one of the things is that the major number, whether it's two or three or it's a date

00:11:44 based often means, you're not going to, you're not going to remove features. So you promise not to

00:11:51 break customer code within a major version. The date base kind of says we're at least going to stay.

00:11:57 it's safe for a year. Yeah. Whereas a semantic versioning, you know, a development team can go

00:12:03 through major versions as fast as they want to, if they feel like breaking things fast. That's true.

00:12:07 That's true. It's just when you get the feeling to switch the major version from two to three or three

00:12:12 to four, you just do it, right? Yeah. But it has impact. So, yeah, I think there's some interest

00:12:17 there. So I think another thing that was really interesting about the calendar versioning that I learned

00:12:22 talking to Adam Hopkins from the Sanic project was that there's this sense of you need to keep

00:12:29 shipping, right? Like if you have a calendar version and it's from last year and that's the latest

00:12:34 version that sends a message in and of itself that this project is, is not getting a lot of activity.

00:12:40 Whereas without it, you know, you kind of got to be more deeply familiar to the project to understand

00:12:45 its rate of improvement. Yeah. I think even it'd be cool to have people,

00:12:49 even if there's not really any changes needed just to release it and say, Hey, we tested it. It's,

00:12:54 this has all been tested on the new versions and you're good to go. We updated like the readme file

00:12:59 or something. Right. Well, there's almost always like some minor little thing that can be,

00:13:05 can be improved and shipped. Right. Yeah. Another story of 2018 and maybe slightly before,

00:13:11 but really it was coming in strong in 2018 is Python's kind of popular.

00:13:15 Yeah. So, Python's very popular. It's taking over the world. There was a neat economist article

00:13:23 that came out and that, I guess that's just sort of related to the, they're highlighting a trend.

00:13:29 And the article was, Python has brought computer programming to a vast new audience.

00:13:35 But some of the things they point out within there is that, right now, according to a stack

00:13:41 overflow survey, 40% of professional developers use Python and another 25% wish they did, which is

00:13:49 interesting. It just, just go do it, man. Also the, they interviewed, code Academy,

00:13:54 which is an online training site and their biggest increase in demand, for 2018 is with Python.

00:14:01 Yeah. That doesn't surprise me. I mean, you think about a very fast growing technology that also has

00:14:07 a lot of career possibilities. Definitely people are going to be wanting to learn that, right? So if

00:14:12 you go to somewhere like code Academy or any other online trading place, like there's going to be,

00:14:16 unless they're doing something wrong, there should be a lot of demand for Python.

00:14:20 They noted that since 2014, at least in us from a survey in 2014, Python was the most popular

00:14:26 language, intro language at American universities, but that was amongst, people, studying

00:14:32 sciences or computer science or something engineering. But what we're seeing now in 2018 is the growing

00:14:38 movement of people that are not traditionally think of themselves as programmers, primarily learning

00:14:44 Python. And, we'll see that in data sciences, embedded development is now moving

00:14:50 towards Python and in a lot of maker senses. And then also the article also pointed out that more

00:14:57 and more people are just sort of worried that all jobs will be taken over by automation. So they want

00:15:02 to be part of that. So in order to, to learn some automation on your own, Python is a good way

00:15:07 to, to be part of that.

00:15:08 You either control the robots or you get replaced by the robots. Take your pick, right?

00:15:11 Yeah.

00:15:14 Yeah. Also to throw in there, I saw this on, Nina Sakarenko's Twitter feed recently. so Python

00:15:20 is becoming, or has been nominated as the official programming language for education in France. So I

00:15:25 think it's going to be part of the high school curriculum there, which is, that's super cool.

00:15:31 I think it's, we're seeing the snowball effect, you know, where, where people, it's really becoming the

00:15:34 dominating language for beginners and educational language. And I think that's super cool.

00:15:38 That is so cool. And when I saw that on Nina's post as well, I'm like, Oh, that is amazing. And you

00:15:45 know, I've been thinking a lot about this. Like why is, is Python both popular as a teaching language

00:15:49 and popular as a professional programming language? Like C++ is popular as a program, professional

00:15:55 programming language, but they don't suggest that kids start with it. Right. Things like this. I think

00:16:01 there's this special balance that when the language was created, it has this way to get started

00:16:06 easily and to pull in just the aspects that you want. Right. So you can start out with not even

00:16:12 functions and then like, okay, I need some structure. I'm going to put some functions in here. Oh, let's

00:16:17 start working with classes and things like generators, but none of that you don't have to understand or use

00:16:23 or care about that until you're ready. So like Python has a special ability to start easy and small,

00:16:28 but expand into professional type of apps. Whereas a lot of them are either you're always a beginner

00:16:33 type of language or you're always like, yeah, that's a void star star kids. Let's talk about

00:16:38 that. Totally. Yeah. And actually, Mike, I think you, you called it a full spectrum language way back

00:16:45 when, when we did an interview on my, my blog with you. And that just really stuck with me because I

00:16:51 think that's, that's so true. You know, it's, it's not just, it's not like you're learning, you know,

00:16:55 like the little like turtle, like logo or something like that, where it's like you learn the basics of

00:16:59 programming. Then you're sort of stuck and you have to move on and learn something else, but no,

00:17:02 you can, you know, all the skills you learn working with Python, they kind of scale and,

00:17:06 and grow with you. And that's, that's just a beautiful thing. It's special. There's not many

00:17:10 other languages like that. What a time to be alive. It really is an amazing time to be alive.

00:17:14 Before we get on the next one, let me just tell you all about digital ocean. They're doing all sorts of

00:17:22 cool stuff. Our infrastructure runs on it really, really nice and reliable. One of the things I want to

00:17:27 highlight this time is their work with Kubernetes, Docker and coordinating Docker, orchestrating

00:17:32 Docker stuff with Kubernetes is a big deal these days. And so they're launching a new Kubernetes

00:17:38 cluster over at digital ocean. So a really nice way to manage and deploy your container workloads in the

00:17:44 cloud. And if you go to pythonbytes.fm/digital ocean, and you're a new user, you get a hundred

00:17:49 dollars credit to Kubernetes all the way. If you want, you can run a lot of Kubernetes for a hundred bucks

00:17:55 in the cloud. So that's, that's pretty awesome. That's yeah. Very cool. Yeah. So check them out.

00:17:59 Pythonbytes.fm slash digital ocean. They're big supporters of the show and they keep us going strong

00:18:04 each week, don't they? Yeah. I'm very grateful for them. Yep.

00:18:07 Brian, you, you touched on that. A lot of the growth of Python was centered around people who

00:18:13 are using Python as a tool, maybe not as their identity, right? Like Python developers are like,

00:18:19 I'm a Python developer, but other people are just using Python, maybe for data science or things like

00:18:24 that. And so number, number seven in our list is that I'm going to declare 2018 as the year that

00:18:32 the number of data scientists have come to equal the number of web developers in Python for professional

00:18:39 Python developers or users, let's say. Okay. You're going to have to back that up a little bit.

00:18:44 All right. So, so there was a really cool survey done by the PSF in conjunction with JetBrains.

00:18:50 So JetBrains did the infrastructure for sort of analyzing it and hosting it and so on, but it was

00:18:57 promoted just through the PSF and other public sources. So it's not like tied to JetBrains,

00:19:03 but they did this really great survey and it's called the Python developer survey 2017, which might sound

00:19:08 like I'm wrong in my year and sort of, I am, but this is at the very end. This is like November,

00:19:13 December or something like that of 2017. So it's pretty much there. And they did a bunch of interesting,

00:19:19 they asked a bunch of interesting questions and they found out a lot of things like, for example,

00:19:24 four out of five Python developers use Python as their main language. So when you see people are using

00:19:30 Python, mostly they're using that as their main language. It's not like, well, I write and see,

00:19:35 but I also have this script that like compiles it in Python or some weird thing like that. Right.

00:19:39 So the majority of people using Python use it as their main language. And that's, that's pretty

00:19:44 interesting. But the thing that I want to point out is they said for, you know, what do you use Python

00:19:51 for? And if you pick where Python is main versus where Python is secondary, you get slightly different

00:19:57 answers. But generally it says for data analysis and data science, 50% of the people use it for

00:20:04 that. And 49% of the people use it for web development. And then there's a whole bunch

00:20:09 of other areas that like, you know, it's a multiple answer type of thing. So they've also checked those

00:20:14 off. But in this survey, basically they said 50% of the people said data analysis, 49 web development.

00:20:21 Does that surprise you guys?

00:20:22 No, not really.

00:20:23 I think it surprised me. I know there's a lot of data scientists.

00:20:28 I feel like on a web development team, there's more participants than on a data analysis team.

00:20:36 I feel like a data analysis is often done by a smaller group of people than like the 30 people

00:20:40 that maintain the website or, you know, whatever. Right. Like that was my conception. I don't know

00:20:44 if that's accurate, but apparently no. Either there's even more data scientists than I guess,

00:20:50 or the there's larger teams of data scientists and smaller teams of web developers.

00:20:55 So this is all interesting. Another thing that I thought was pretty interesting around this is

00:21:00 they asked people to guess that ratio in this survey. And they gave them like a five choices, four choices, something like that.

00:21:09 And they said, what do you think the ratio is five times the number of web developers to every data

00:21:13 scientist? One to one, you know, maybe worse. I can't like 10 to one. I can't remember. But

00:21:19 when they asked that question to the group, half of whom were data scientists and half of whom were web

00:21:25 developers based on the original question, the responses they got with only one, only 10% of the

00:21:30 people got it right. 20%. And, most thought that it was five to one, five times web developers

00:21:39 to one data scientist. So I think the general perception is there's more stuff happening on

00:21:44 the web around Python than there are data scientists. But I think also what the most surprising thing to

00:21:50 me when I saw that result was half of the people that answered that question were data scientists,

00:21:55 you know? And so to me, my interpretation is that means that a lot of the data scientists feel

00:22:01 like they're not as big of a representative group of the community as they are. They feel like,

00:22:07 oh, we're like 20% of the community. But in fact, they're like half. And I don't know why that is,

00:22:11 but I think it's interesting. It is interesting. Well, there's definitely like a, if you look at the

00:22:16 hype around different packages, for instance, there's more packages that are web related than there are

00:22:24 data science related. Mostly I think because a lot of the data science tools have been

00:22:28 bundled into these large groups of tools, even though they're like a common set of things that

00:22:36 they were like data scientists like to all use sort of this, you know, a handful of different tool

00:22:41 chains, whereas web developers like to go off and create their own asynchronous library.

00:22:46 Yeah. Everyone's got their own library to match their new JavaScript library. Yeah. I wonder if the

00:22:51 anaconda distribution and things like that also play into that feeling, right? You just install it and

00:22:56 you just have the tools, right? You don't necessarily go and hunt for every little library as much.

00:23:01 This sort of reminds me of who coined that term? Scott Hanselman, I think the concept of the dark

00:23:06 matter developer.

00:23:07 Yes. I was thinking that too.

00:23:08 Yeah. Yeah. I think, I think you actually told me about it. So I guess the idea is that there's a large

00:23:14 segment of the programming population or, you know, people who program for,

00:23:18 even for a living sometimes that are just not visible in the community. They, you know, get their

00:23:24 work done and it's just not, maybe they don't identify as a programmer or it's not just something,

00:23:29 it's just not something that they do publicly or have like side projects and stuff like that.

00:23:34 It's a job.

00:23:34 Nothing wrong with that.

00:23:35 Yeah. And most people, like they don't go to conferences or go on social media and go crazy

00:23:40 about their job. Like, like if I was a barista, nothing wrong with that, but like, I probably

00:23:44 wouldn't go to barista conferences and go to barista meetups and like, you know, talk about

00:23:49 being a barista on social media very much, right? Like it just, it just, it just, yeah,

00:23:53 you actually have some awesome stories if you did that.

00:23:56 Make coffee for me.

00:23:57 Hey, anyone out there listening, go for it. That's all you.

00:24:02 I'm going to get that.

00:24:03 I would listen to that. I think there's a lot of, a huge number of companies that have

00:24:08 one data scientist or data analyst in their company. And so they feel outnumbered because

00:24:14 they're the only one in their company or there's like the, the ratio is very much skewed within

00:24:20 their company, but they're kind of all over the place.

00:24:22 Yeah. Yeah. I totally agree. And I do think there's a little bit of this dark matter

00:24:25 stuff possibly happening here. Maybe you're not allowed to talk about your analysis that you're

00:24:30 doing. So you just don't, maybe you've backed into becoming this data scientist business sort of

00:24:36 analyst type person. You started out as like a trader and then you, you kind of were the person

00:24:41 that had enough code to like figure out how to do the overall reporting and analysis and whatnot.

00:24:45 And you still don't think of yourself as a developer, but you effectively are. Right. So

00:24:50 I don't know. I think there's a lot of interesting angles here.

00:24:52 Yeah. Yeah. Also, I was just thinking like, you know, a lot more secrecy maybe in the, in those

00:24:56 areas. Like if you're working on some state of the art, like machine learning thing, I don't know,

00:25:01 self-driving cars or whatever, maybe you don't necessarily want to go out there and share with

00:25:05 the world what you just did. Whereas in the web development work, I feel like we're sort of,

00:25:10 you know, we figured most of it out. And so people are more willing, I think, to,

00:25:14 to share what they're working on. At least that's the impression I got.

00:25:18 And often it's, yeah, I agree. And it's on the web already.

00:25:20 Yeah.

00:25:20 Whereas if you're working on the Apple self-driving car, like you can't even acknowledge its existence,

00:25:25 right? You're like working for the CIA. Yeah. I work for the state department. Okay.

00:25:30 So anyway, if you want to dig into more of this, I had Eva Jelowalska and Dmitry Filipov on,

00:25:37 they're the two folks who did the, this and they printed it in a Python. So on Talk Python 176.

00:25:43 All right. Item number six, Brian, what do we got?

00:25:47 We have a darkening of the community. This is a very dark topic.

00:25:50 It is a little dark, but kind of in a good way.

00:25:53 Black is taking over. Black is, there's, not in a bad way. So the project black,

00:26:00 black is a code formatter that just sort of formats all your code for you. And, and,

00:26:04 and it like Pep8 and some of those flight gate and stuff tools were to tell you where places where

00:26:11 you might want to look at your code and change it. Whereas black is, yeah, I'm not, I can tell you

00:26:16 if you want me to tell you, but I'll just go ahead and change it.

00:26:19 That's awesome.

00:26:20 Sort of taking, there's a lot of projects around the web or around Python that are picking it up and,

00:26:26 and using it as their standard. And I think it's, it's been definitely very interesting in 2018 watching this happen.

00:26:33 I love that tool. So it's so good. Like, especially if you, if it's a community project,

00:26:38 you're working on a project with several developers and it's just so easy to standardize everything and

00:26:43 you don't have to have the back and forth conversations of defining your own code style.

00:26:47 And I mean, assuming you like the output that black produces, which I personally really like,

00:26:52 and it's, it's been super helpful for real Python. We have like an materials repository,

00:26:57 some sample projects. So like every single folder in there was created by a different person,

00:27:02 my different author. And so I went down that, that route of like, okay, we're going to define

00:27:06 like a beautiful code style and then tell people how to format everything and make sure it's,

00:27:09 it's sort of adhere to. And that's really, really hard to do. And so I just ran black on the whole

00:27:14 thing, set it up on CI. So we'll check, it'll check the formatting problem solved. And it took

00:27:19 15, 20 minutes to do that. So yeah. But what a lifesaver, such a great tool.

00:27:24 So a couple of things about it. It's taken, it's one of the things that takes things like style and

00:27:29 format and stuff like that, and takes those out of code reviews. And so code reviews can just be

00:27:34 focused on algorithm and design and not on whether you use single quotes or versus double quotes or

00:27:40 something. The other thing is a black shows an example. It has part of it is a pre-commit hook

00:27:46 so that you can add a black pre-commit hook to your code. So everybody just as they're,

00:27:52 as they're checking it in, we'll have black run on their code. And that highlighted the pre-commit tool

00:27:58 for me. And I think pre-commit is being used more and more because of black using it.

00:28:03 Yeah. I've heard that more than once. That's pretty awesome. You're like, wait,

00:28:06 what's a pre-commit hook? That thing exists in Git?

00:28:08 Yeah, definitely.

00:28:10 Nice. I like it. The slogan, like you can have it in any color you like,

00:28:15 as long as you went in black.

00:28:16 Yeah. I didn't know that that was from Henry Ford until somebody told me about Henry Ford saying

00:28:20 that about the Model T.

00:28:21 Does it have like a theme song or what's going on here?

00:28:23 Oh, well, every time I use black, I hear Black Hole Sun from Soundgarden. So I went ahead and

00:28:29 just mentioned that in the hard notes.

00:28:31 Black Hole Sun is, Soundgarden was such a good band. They really came from like a special era of music.

00:28:36 We had them, Pearl Jam, Alice in Chains, Dinosaur Jr. Like there's a lot of good stuff back there,

00:28:42 but this is the only one that seems to be making it to a Python package. So way to go.

00:28:46 All right. Dan, for item number five, I feel like for a really long time, it was like, well,

00:28:55 pypi.python.org slash pypi is a little bit out of date and a little bit crummy, but we're working

00:29:02 on it. And it just, it seemed to be in this like stasis of like half improved forever, but not

00:29:08 anymore, right?

00:29:09 Yeah. The new pypi, new Python packaging index went live this year and what an amazing improvement.

00:29:15 I mean, like, you know, throughout the whole project and I know you had a really, really great show

00:29:19 where you interviewed, you know, a bunch of people working on that transition and launching the new

00:29:23 and improved pypi. And it's just crazy, you know, like throughout the whole thing, it's,

00:29:27 it's been like rewritten from the ground up the way I understand it. It's new hosting infrastructure

00:29:31 and it's much more friendly now for new contributors. Like beforehand, I think it was sort of like a home

00:29:38 grown web framework because, well, it was that pypi, old pypi was created before web frameworks

00:29:44 really were a thing in Python.

00:29:45 Here's the socket. Let's start with that. Like, wait, wait, wait, wait, what?

00:29:48 Yeah. And so, yeah, I just love it. You know, like every time I'm searching for a package now,

00:29:53 it just, it just looks so much better. And it looks like, it looks good. You know, it's like,

00:29:57 it's when you compare it with JavaScript, like the Node.js world and NPM, I felt like, yeah,

00:30:04 that was sort of the gold standard for a while for what a online package repository should look like

00:30:09 and the features it should have. And I feel like PyPI is now playing in that league and it's super

00:30:15 nice. I think it is super nice as well. And it's silly to say that it matters that it looks good

00:30:20 because it's just pip install a thing. But I think it really communicates a message

00:30:24 to people who come into Python or who are using Python, but especially people who are new and

00:30:30 they don't, they're like, oh, what is this stuff? Oh, there's a package injection. You're like,

00:30:32 whoa, that thing is like from the nineties. What is that? Right? Like that, I mean,

00:30:36 that communicates something about how much the community cares for her for that kind of stuff.

00:30:41 Right. Yeah. They also rolled that over with like everybody in the world using it and very little

00:30:48 hiccups. Yeah, it definitely is really impressed. It's super impressive. So a couple of interesting

00:30:52 notes here when they rolled it out first, it was pypi.io. And I thought, oh, they're just being

00:30:58 part of this hip new.io. You know, it's like, it's like the .ly of yesteryear, you know, it's

00:31:05 like Libya all of a sudden became a super awesome place to have like your domain name because it had

00:31:11 ly in the end. And so io, right, it's super popular now, but now it's pypi.org. And the story is

00:31:17 the pypi.org was owned by somebody else and it took a long time for the PSF to get it from them.

00:31:23 Whereas they could go and buy pypi.io. So that was like an intermediate step in the whole rollout.

00:31:30 Yeah. Some of the nasty details of web development.

00:31:33 Exactly. And then the other one is, this is a pretty interesting example of a popular Pyramid

00:31:39 web app, right? They started out in Flask and actually said, no, we'd rather go with Pyramid,

00:31:43 which I thought was a pretty interesting choice being a fan of Pyramid myself. And then Brian,

00:31:48 finally Markdown, right?

00:31:50 Yeah. So the old pypi did not support readme.md. It only was readme. What is that? RSL or something?

00:31:58 Yeah. RST. Yeah. So I try to avoid restructured text as much as I can. No offense to everybody that

00:32:07 loves it.

00:32:07 Yeah.

00:32:08 I hear you. It's like Markdown, but it's broken. The stuff you put in there doesn't quite work.

00:32:13 Just kidding.

00:32:14 No comment.

00:32:15 Just kidding. Just kidding. I'm just saying the Markdown stuff doesn't always work in there.

00:32:20 All right. Item number four, Brian, what we got? You touched on this a little bit before.

00:32:25 Yeah. I think it's been fun to watch. It was unexpected, the rise of Python in the embedded

00:32:30 world. We actually did a segment on this on Python Bytes, but there's so many, partly from the maker

00:32:39 movement and a lot of people trying to get into controlling their, not just their computers,

00:32:43 but their world with the internet of things and also just playing with, you know, adding lights to

00:32:49 your bicycle and things like that with microcontrollers and hardware hacking.

00:32:52 Adafruit's been a big part of that, of pushing it. But there's a lot of projects around Python

00:32:58 and embedded. MicroPython is one of those. And MicroPython is being used by both hobbyists and

00:33:05 serious developers. Hobbyists are serious developers too, but I think some companies are using MicroPython

00:33:12 as well. Adafruit has its own version of this called CircuitPython. Actually, I don't know if it's

00:33:18 related to MicroPython or not, but Adafruit has CircuitPython. And then MicroBit is code Python

00:33:26 base for the MicroBit processor. And then we even have Mew, which is a editor that directly interacts

00:33:34 with microcontrollers running Python. It's been pretty fun to watch this year.

00:33:38 I really think the rights of IoT and Python is just taking root now. And MicroPython is so

00:33:45 interesting to me. I mean, the fact that I can take a Lambda expression and tie it to a hardware

00:33:49 interrupt just like never ceases to amaze me, you know?

00:33:53 Yeah, that's really cool. And so, and a lot of this is because somebody wants to learn electronics

00:33:58 or something, but they also want to make it do things. So you have to learn a programming language.

00:34:02 And it used to be we taught people C and like the barrier to entry for C is huge. Having Python be able

00:34:11 to do that is wonderful. Yeah, it is. So you talk of the IoT stuff. I learned something from Matt

00:34:16 McKay recently on an episode, and I want to share this with you and just see what you think. So you

00:34:21 guys click on this link here. So here's an IoT device using Python. And the idea is the title of the

00:34:29 article. This is on the Twilio blog. It's how I potty trained my kids using Twilio and an AWS IoT

00:34:35 button. So it's a little button like those Amazon dash buttons. And he put it near his son's bed.

00:34:43 And apparently there are kids sharing the room and wanting to make sure he didn't wake up and make a

00:34:47 lot of noise and wake up with the other kids. So he put this button that basically has like a poop

00:34:51 emoji and you click it and it says, I got to go. And the parents would come in and like help out the

00:34:56 kid while he was learning. And this is written using like the Python API on like AWS Lambda and

00:35:02 stuff like that. So yeah, the rise of Python and IoT. So Q4 10 years and his kids are like, dad,

00:35:08 did you have to put that on the internet? This is awesome. Exactly. Yeah, this is great. Isn't this

00:35:15 funny? So yeah, I mean, funny and like an amusing, but also like, actually, that's kind of helpful.

00:35:21 Like I can see how that would be helpful as a parent. Because you definitely don't want your kids

00:35:25 waking up. And you have to be up for a few hours in the middle of the night. So if an IoT button can

00:35:29 help that, then get the IoT button. All right, item number three. And it's packed full of goodness

00:35:36 here, you guys. So legacy Python's days are fading. What do you think?

00:35:40 Well, I haven't used it for ages. So yeah, I haven't either. Dan, is real Python running on like what,

00:35:49 two, six? Yeah, not a lot of legacy Python for me anymore. Thankfully. That's awesome. And

00:35:54 yeah, it's I mean, it's kind of crazy that it's, you know, it's a sort of crap on us,

00:35:58 the Python 2 end of life. And now we're not that far away anymore from it. So yeah,

00:36:03 we're actually super close. And the official item that I'm linking to as this piece of news is Guido

00:36:10 Von Rossum's official statement. So I don't know, four years ago or something, it said, yeah, Python 2,

00:36:16 it'll be done in 2020. Whatever, right? Like that's like a broad range for a period where things stops

00:36:24 a whole year. So we needed a more clear date. People are speculating maybe the date of PyCon

00:36:29 might be a cool one, maybe the end, maybe the beginning. So he came out and said, let's not play

00:36:34 games with semantics. The way I see it for the situation for Python 2.7 is that end of life is

00:36:39 January 1st, 2020. And there will be no updates, not even source only security patches after that date,

00:36:45 period. That sounds like the end. Yeah, it's a good end, though, because the,

00:36:48 and some people might complain about the whole security patches, but this is volunteer driven.

00:36:53 So it's volunteers time. And I think that to let them work on new things is good.

00:36:58 Yeah, absolutely. And it's not like people are surprised, right? It's not like, wait, last month,

00:37:05 they didn't, nobody told us there's going to be a new Python. Like it's been going on for 10 years.

00:37:10 This will make it 12. It's time.

00:37:12 Yeah. And there's a couple of loudmouths that two podcasts that have been talking about it for a

00:37:16 couple of years. So yeah, I think we're actually making a dent with this referring to Python 2 as

00:37:22 the legacy Python. I think it's making a difference. And not everybody loves it. But I know some people

00:37:26 it's been working for. Do you guys know, you know, with the no more official security patches

00:37:31 after the end of life date? I mean, obviously, this is a big business opportunity for other companies to

00:37:38 come in and offer, you know, long term Python 2 updates and stuff. Does anybody know who's doing

00:37:43 that right now? Like some Linux distributions, I would guess, but I don't really know what's going on in

00:37:48 that space. Yeah, possibly. The big news that I just heard. So, you know,

00:37:52 there's Red Hat Enterprise Linux, right? And they do a lot of that kind of stuff. And the versions

00:37:58 that they have live on for a long period of time, but they just announced that they're dropping Python

00:38:02 2 support from Red Hat Enterprise Linux, which to me sounds like, okay, even the laggards are stepping

00:38:08 forward. So I think that that's pretty big. But I suspect that there's still a lot of support on the

00:38:13 backend. There's been a few people who've like talked about forking Python 2 and just supporting it

00:38:19 themselves as a single individual. But it seems, I'm sure there's going to be some of that. But like,

00:38:24 as a company, like, let's say, I don't know, your Bank of America, you're like, dude, we don't need

00:38:29 to upgrade. There's this guy. He forked it. We're good. You know what I mean? Like that just doesn't

00:38:33 seem realistic. It's also not just the C run, the CPython runtime anymore. It's like so much more than

00:38:41 that. So Django no longer supports Python 2, like the scientific stack, like NumPy and stuff are

00:38:47 dropping support for Python 2. So even if you still have the older stuff, you know, you're like, well,

00:38:53 we just keep running. It's not just about what's running your code. It's also what you can use in

00:38:56 your code. And you know, that's going to start looking like it's just zooming off into the distance.

00:39:01 So not good.

00:39:02 Well, I mean, I think Python 2 will actually live on forever in some situations where,

00:39:07 for instance, you got something that doesn't need a security patch because it doesn't touch the

00:39:12 internet at all. And as long as it will run on whatever CPU you're sticking it on for some people

00:39:18 will have like a huge program that they never touch because the requirements never change. And

00:39:24 they use it every day, but it doesn't need to be flexible. It doesn't need to be worked on that much.

00:39:30 they'll probably upgrade when they have to change the program. So yeah, I'm wondering if that also

00:39:35 means that Apple is finally moving to Python 3 and making that the default for macOS because the

00:39:42 latest release, it still ships with 2.7.10, I think. Yeah, that would actually be really, really nice.

00:39:49 You know, it's starting to shift in Ubuntu and just different Linux distributions, but also on macOS.

00:39:55 Yeah, that would be super cool. Brian, you're talking about things that don't require

00:40:00 security patches. I just saw a video from NASA talking about their trip to the moon and setting

00:40:05 up a base there, which is just awesome. So they had like all this sort of quick, different scenes

00:40:12 of people doing stuff. And one of the scenes was them working, they had Sublime open, like editing a

00:40:17 bunch of Python code controlling like something about the moon mission, which was pretty cool. But I

00:40:22 didn't catch whether it was two or three. I couldn't tell.

00:40:26 That's pretty cool. Yeah. Someone else on Reddit did catch that the Sublime was unregistered, by the way.

00:40:32 I guess a final thought here is, we've also talked about this on Python Bytes, is that there's the

00:40:42 PythonClock.org, the Python 2 death clock. And it has been updated for this new end of life statement.

00:40:48 And it reads one year, one month, two days. So if people are out there and they got to start upgrading,

00:40:53 like the death clock is ticking. Yeah.

00:40:55 All right. I also got item number two, and that I would categorize as the end of the innocence for

00:41:01 PyPI and pip. So we've heard about a couple of issues, one like right before 2018, like late 2017.

00:41:09 And then another one again this year about people posting or taking over control and posting some form

00:41:19 of evil PyPI package. And primarily they look like they're kind of either a research project,

00:41:25 a prank, or some kind of like Bitcoin theft. So one of them installed like a clipboard monitor

00:41:33 that would watch for Bitcoin addresses. And as soon as it saw one, it would like ship that off to

00:41:39 like the mothership or something to that effect. But I don't know of anything super bad that's happened,

00:41:45 but it, I guess until, you know, 2016, 2017, PyPI as a place was just, it's incredible to me. It's a place

00:41:54 on the internet that was entirely unprotected and yet safe. I can imagine that.

00:41:59 Yeah.

00:42:00 If you had like a open FTP server and you just put it on the internet, like all sorts of badness would

00:42:05 happen to that thing in a day. It would be full of all sorts of things you don't want it to be full of.

00:42:10 And here PyPI was going along and it was just, you know, the community sort of policed itself and

00:42:15 took care of itself.

00:42:16 Plus it used to be really hard to become a person that could push things to PyPI.

00:42:20 Yeah. Maybe it correlates to the shipping of pypi.org.

00:42:23 Yeah. There seemed to be a lot of, like, not a lot, like I'm trying to be more specific, but

00:42:28 I think NPM, again, in the JavaScript, like Node.js world, they had a big, they actually was,

00:42:33 it was something similar. I think it started with a typo squatting attack,

00:42:36 but then it was actually a worm that would then go. So if you got the malicious package,

00:42:41 nothing would really happen except that package as it was installing was looking for your load.

00:42:47 Like if you were registered with the NPM package repository and it would go in and patch the

00:42:53 packages that you owned to spread that worm further.

00:42:55 I don't know if it was some payload, but it was, you know, really exploding quickly.

00:42:59 And I guess the same thing could happen with PyPI. Like I don't, I don't see why not.

00:43:04 Yeah, it definitely could, but it hasn't. And let's, let's not give any people ideas.

00:43:09 Sounds cute. We're going to cut that out.

00:43:12 Yeah, exactly. Don't say that.

00:43:15 Security by obscurity. Come on.

00:43:18 Exactly. Right. Security by lack of creativity. Okay. So the two main problems were basically,

00:43:25 like you pointed out, Dan type of squatting, which is like, we're going to upload a package that

00:43:32 takes a copy of Django and then slightly modifies it set up.py and publish it under Django or Django or

00:43:43 whatever, like how you pronounce it without the J. Right. So if people pip install and they miss a

00:43:47 spell, they get your bad thing. Right. So that's one. And the other was to take advantage of folks who

00:43:53 didn't understand why something wasn't available to them. So like, if you tried to use regular

00:43:59 expressions and you say re dot, and there's like, it says, well, re is not defined. You're like, well,

00:44:04 maybe I need to pip install re. No, you just need to import it. Right. It's built in. So they were

00:44:08 targeting the built-in libraries and I believe all the built-ins are not patched. And Brian, didn't we

00:44:12 cover something on Python bytes that would help guard against typo squatting? It would like try to grab

00:44:18 packages that also had misspellings around your package name. I think there was something like

00:44:22 that. Yeah, I think so. I don't remember what it was called, but I think that exists and people could

00:44:27 find it. Oh yeah. Yeah. I remember listening to that episode and you guys were talking, I forgot what

00:44:31 it's called too, but like it generates different variations of your own package names. Yeah. And

00:44:34 try and like register all of those. Yeah, exactly. It's very work intensive. Yeah. So it's interesting on

00:44:40 what is the fix? And I don't know what the fix is. The PSF is trying to get more resources to support

00:44:45 PyPI and the Python packaging infrastructure in general, but like largely that's been improve

00:44:51 it. Do things like you talked about previously, Dan, on just shipping pypi.org. Right. But this

00:44:56 validation, if you have so many releases of so many packages, how do you even verify it? I don't know.

00:45:01 It's tricky. It's not necessarily something that could be, that can be solved with a straightforward

00:45:05 technology fix, right? Like essentially you're, it's a problem that all of these, let's call them

00:45:11 online marketplaces for code repositories or whatever you want to call them. You know, if you look at the

00:45:15 Android app store, Apple app store, I mean the Apple app store, they have these, these like crazy

00:45:20 intensive review processes, you know, considering that there are millions of apps in this app store and

00:45:26 they're reviewing every single one. And I think there's even some manual steps involved there. And even

00:45:30 there we've had malicious apps that were trying to steal people's, you know, private information

00:45:35 and it's a really locked down platform. So I think it's really, it's a challenge that,

00:45:39 that we're facing now because we're all connected over the internet and, you know, people are really

00:45:43 relying on these, on these package platforms. So, it seems like it's something we'll, we'll have to

00:45:49 try out a bunch of solutions and see what will work there.

00:45:51 I think we should get some of the, all of these new machine learning Python people to get involved in,

00:45:57 and take a look at it because conceptually the normal updates for a package are little tweaks on,

00:46:03 what it's doing. And if suddenly it starts, connecting to different servers all over the

00:46:09 world, or even just one where it used to not connect to anything, that would be a change. It would be a

00:46:15 different behavior than it was ever doing before that, that should be something that a machine could

00:46:20 catch. Yeah, actually, I think you're right. I mean, there's almost no scenario where pip install a

00:46:25 thing should create outbound connections besides to download the package. Or, you know, even a package

00:46:30 that doesn't normally use any connections or use requests suddenly adds, you know, socket

00:46:37 connecting or something. that's something to take a, you know, at least we can filter it down to

00:46:42 things people could take a look at and say, is something weird going on here?

00:46:45 Well, it would actually be sweet to have like a CPython interpreter that is fully sandboxed that,

00:46:51 you know, can't like, you could just run code that people send you and you can run it safely and it

00:46:56 wouldn't be able to write to any folder on your disk or open sockets and whatnot. That would actually be

00:47:01 kind of sweet. I mean, it's all interpreted. So it's seems like that should be possible. I mean,

00:47:06 it's going to take a lot of work, I guess, but I think it's possible as well. You know, Dan,

00:47:09 you mentioned the online app store as maybe something. I wonder if there's something like

00:47:14 that in terms of packaging that we could add. And what I'm thinking is like, if I go build an iOS app,

00:47:20 I have to declare the things it's going to ask for, like it has to ask for access to contacts.

00:47:26 It has to ask for access to GPS. So, you know, you declare it needs the GPS feature. It needs these

00:47:33 other features, right? So what about a package that declares, like I don't declare any network

00:47:37 capabilities. So I don't talk on the network and things like, you know, I can depend upon packages

00:47:43 that do, for example.

00:47:44 On the flip side, none of these have caused a huge amount of damage. And I don't want to go to the

00:47:49 point of overreacting so that everybody has to take off their shoes to travel.

00:47:53 Yes, I know.

00:47:53 Things like that.

00:47:54 I know. We don't want feel good security that doesn't actually make any difference,

00:47:58 but makes life hard for everybody.

00:47:59 Yeah.

00:48:00 Yeah, I agree.

00:48:00 That's a good point.

00:48:01 I don't know what the answer is. I don't know what the fix is or if there is a fix,

00:48:04 but I would definitely declare the end of innocence for PyPI. That's my declaration as item two for 2018.

00:48:10 Dan, you have the honor of kicking off what is the number one story in the Python space for 2018.

00:48:16 What happened?

00:48:17 Oh, man. What a sad honor, though.

00:48:19 Well, yeah, I know. It's not about the messenger, right?

00:48:24 Well, yeah. I mean, Guido van Rossum stepped down as the BDFL, which is both sad and ironic,

00:48:31 because I guess BDFL stands for Benevolent Dictator for Life, which I think he still is now technically,

00:48:38 but he's just going to be less involved with the stewardship and leadership of CPython.

00:48:44 Yeah. He's a little more like the queen of England now, in a sense, right?

00:48:48 Like, he's still representing Python. He's still very active in the community, but he just said,

00:48:56 I'm going to let other people deal with the decisions around it.

00:49:01 And basically, went so far as saying, like, I'm not going to decide for you how you decide.

00:49:05 Like, it was even a meta non-decision. So he said, all right, you all have to figure out how to govern yourselves.

00:49:11 And it looks like he's coming back in a little bit more in terms of participating.

00:49:16 Well, right. I mean, I think that's one of the reasons is because his involvement with Python was just the stuff that wasn't fun.

00:49:25 And now he gets to be involved with some of the things that are fun, like speaking and mentoring and things like that.

00:49:32 You know, I think that's a really interesting point. I'm not sure I would want his job the way it kind of looked a year ago, right?

00:49:41 Just, you know, arguing over peps and stuff like that.

00:49:44 And you know that if you do stuff on the internet, that it's, there's definitely a very small minority of people that are, you know, abrasive, unfriendly.

00:49:55 It just sucks. But even just a few people like that will suck your energy for sure.

00:49:59 Yeah. And we still don't know what's going to happen. So we'll, maybe that'll be the story for 2019 is what happens now.

00:50:07 I think you're right. I think 2018 is the year Keto stepped back.

00:50:10 2019 will be the year that whatever, whatever takes place going forward is going to be that year.

00:50:17 So regarding the new governance structure for CPython, which obviously, you know, for any Python developer,

00:50:23 that should be really dear to our heart because it's going to have such a big impact on the future of Python and the CPython project.

00:50:30 And so the last update that I saw, basically we have PEP 8000 now, which is a PEP that discusses the various new proposals that have been forward,

00:50:43 that have been put forward regarding the Python language governance.

00:50:46 And I just recently saw, it was like two or three days ago, Victor Stinner's post on discuss.python.org, where he's comparing the seven Python governance PEPs.

00:50:59 So I guess like actually like the different proposals are separate PEPs, but they're also listed under PEP 8000.

00:51:04 So there's different models that have been put forward, like, for example, leading the project with a trio of three co-leaders.

00:51:11 There could also be a community governance model where there's no central authority, sort of like a total 1080 from, you know, a dictatorship to no central authority.

00:51:19 I don't know how that would look like, you know, in concrete terms, but there's like different models that are being discussed right now.

00:51:25 And I think it's going to be very interesting to see what the CPython team ends up with there.

00:51:31 I agree.

00:51:31 And it's pretty important, like, even simple stuff like Lucas Lenga, also creator of Black, what we spoke about earlier, he's doing the release management for CPython for the next couple releases.

00:51:43 And he was thinking like, hey, it would be great to release this yearly, but we can't even discuss having it released yearly instead of every 18 months.

00:51:51 Because we don't even know how to decide whether we, how would we, who decides, how do we vote?

00:51:57 We don't know.

00:51:57 So, so many things like that are just like on hold until this gets figured out.

00:52:02 So there's a lot of pressure to make it happen.

00:52:03 Definitely.

00:52:04 Yeah.

00:52:04 It's like, it's a total bottleneck, I guess, for, yeah, like you were saying, you know, just to put out a new release, you would have to, they would have to figure that out first.

00:52:11 And so I'm pretty sure that also means it's going to be a decision that's going to be made relatively quickly there.

00:52:16 So we can all move on.

00:52:18 Yeah, absolutely.

00:52:19 One thing you did note, though, is that Guido is starting to come back and be more active in the community again, just not in this BDFL decision maker way, right?

00:52:28 Yeah, I thought that was kind of cool.

00:52:29 You know, I don't know, it might be coincidence, but I don't think it was.

00:52:34 So as I was putting together, you know, the recent PyCoders Weekly issue, I saw that there were a couple of interviews with Guido out there, articles that, you know, had like little sound bites from him.

00:52:45 So he did a really long like video based interview on the MIT AI podcast.

00:52:50 So it's actually on YouTube.

00:52:51 It's more like a video based show, but I think it's also podcast that I thought was really interesting.

00:52:57 And he also started blogging again.

00:52:59 So he has this personal blog at I think it's neopythonic.blogspot.com or something like that.

00:53:05 And he put out a new post there.

00:53:06 And I think it was kind of nice to see some activity there again, because I'm sure it's also a sign that, you know, now he maybe feels like he has more time to do that or feels inspired to do things like that again.

00:53:18 And I think that's a really, really positive sign.

00:53:20 And just for his personal well-being, I think.

00:53:22 I think it's a positive sign as well.

00:53:24 And just like Brian and I were talking about earlier, a lot of his energy had previously gone into like debating PEP 572 and just dealing with all the decision making.

00:53:36 And now he can focus back on, you know, what most people would want to focus on coding, software, cool stuff like that.

00:53:43 And it sounds like he's getting back into it.

00:53:44 So that's awesome.

00:53:45 Yeah. And I mean, you know, what a crazy responsibility to be at the center, like at the focus of it all, you know, and to be the one person that needs to make all of these decisions.

00:53:56 And sure, you know, like he was delegating a lot of these decisions and everything.

00:54:00 But the way the CPython governance was set up before, it was like all focused on one person.

00:54:07 And yeah, I mean, it's tough to do that for several decades, right?

00:54:11 Yeah. Honestly, I was surprised that he had kept going in that role for that long.

00:54:15 I mean, it's sad to see him step down.

00:54:18 But at the same time, that was 25 years.

00:54:20 Like how many other people have a job that goes 25 years?

00:54:23 That's high pressure, right?

00:54:24 Yeah, it's incredible.

00:54:25 I mean, thank you so much, Guido.

00:54:27 Yeah, absolutely.

00:54:28 Python's a special place and it has a lot to do with him.

00:54:32 All right, guys, that's it.

00:54:34 Those are our top 10 for 2018.

00:54:36 It's been a fun year, hasn't it?

00:54:37 Absolutely.

00:54:37 Yeah.

00:54:38 Yeah, I think 2018 just has more good stuff to come.

00:54:42 So it doesn't seem like anything is slowing down then.

00:54:45 And that's pretty awesome.

00:54:46 Now, before we round out the show, you have to answer the two questions, both of you.

00:54:51 So, Brian, let's start with you.

00:54:53 If you're going to write some Python code, maybe test a little something or other, what editor would you use?

00:54:58 PyCharm.

00:54:58 Right on.

00:54:59 And Stan.

00:55:00 Yeah, good one.

00:55:01 Dan?

00:55:01 I'm still a sublime guy, although I have been experimenting with Visual Studio Code.

00:55:05 And it's pretty sweet, actually.

00:55:07 Yeah, I would say, like, the sublime Visual Studio Code, there's probably a lot of bleed over between those.

00:55:12 And with all the activity around Visual Studio Code, it's got to be eating into the sublime world.

00:55:17 Yeah, definitely.

00:55:18 Probably.

00:55:18 I like what VS Code is.

00:55:20 I like watching what VS Code is doing.

00:55:22 They're just not quite there with the testing yet.

00:55:25 And I'll take a look again when they get that up to speed.

00:55:28 Yeah, I agree.

00:55:28 I think they're doing really sweet stuff.

00:55:30 Okay.

00:55:30 Brian, notable PyPI package?

00:55:33 One, preferably, that doesn't have any badness in it?

00:55:35 pytest.

00:55:36 pytest.

00:55:36 Right on.

00:55:37 Dan?

00:55:37 Sweet.

00:55:38 So I was going to say black again, but we talked about this at length.

00:55:41 So I'm going to say pytest-ICDIF.

00:55:46 So it's a pytest plugin that gives you better error messages for your pytest assertions in some cases.

00:55:53 So it'll basically do, like, a more extensive, like, diff on, let's say, when it's comparing two dictionaries.

00:55:59 And it'll tell, you know, those keys were added, those keys were removed, and it has, like, color highlighting.

00:56:03 And I just found that this is, like, a really, really sweet little tool.

00:56:07 And I started installing it in all of my projects that have tests.

00:56:10 And I highly recommend it.

00:56:12 Yeah, that sounds great.

00:56:13 I may have to go check this out.

00:56:14 Cool.

00:56:14 All right.

00:56:15 So a straight sweep for pytest there.

00:56:17 That's great.

00:56:18 All right, guys.

00:56:19 Thanks so much for being on the show and being part of this.

00:56:21 It's so many cool things to talk about, and I really appreciate it.

00:56:24 Yeah, thanks for having us.

00:56:25 Thanks.

00:56:25 Yep.

00:56:26 Bye.

00:56:26 Bye-bye.

00:56:27 Thank you for listening to Python Bytes.

00:56:29 Follow the show on Twitter via at Python Bytes.

00:56:32 That's Python Bytes as in B-Y-T-E-S.

00:56:35 And get the full show notes at pythonbytes.fm.

00:56:38 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:56:42 We're always on the lookout for sharing something cool.

00:56:45 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:56:48 Thank you for listening and sharing this podcast with your friends and colleagues.

00:56:52 Thanks.

