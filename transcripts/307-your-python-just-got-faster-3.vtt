
00:00:00.000 --> 00:00:05.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.200 --> 00:00:10.900
This is episode 307, recorded October 26, and I am Brian Okken.


00:00:10.900 --> 00:00:12.900
And I'm Michael Kennedy.


00:00:12.900 --> 00:00:17.000
Yay! Well, it's pretty exciting here in Python world this week.


00:00:17.000 --> 00:00:20.400
Oh, it's a big deal this week, absolutely.


00:00:20.400 --> 00:00:23.700
It's a big deal. So tell us why it's a big deal.


00:00:23.700 --> 00:00:26.900
We've talked about Python being faster,


00:00:26.900 --> 00:00:29.780
and new features coming along.


00:00:29.780 --> 00:00:34.700
But primarily, at the most, I would say there's like two ends of the spectrum


00:00:34.700 --> 00:00:36.860
that people have been really looking forward to.


00:00:36.860 --> 00:00:39.100
One is, wouldn't it be great if


00:00:39.100 --> 00:00:42.140
you did nothing and your code ran 50% faster?


00:00:42.140 --> 00:00:45.260
Brian, you and I are of similar age, and I remember


00:00:45.260 --> 00:00:48.660
it was just like, well, wait till next year till I get a new computer.


00:00:48.660 --> 00:00:51.140
And that program that's a little sluggish is going to be


00:00:51.140 --> 00:00:52.940
zooming along, right?


00:00:52.940 --> 00:00:55.940
And just like computers would just double in speed all the time.


00:00:55.940 --> 00:00:57.580
And we don't get so much that anymore.


00:00:57.580 --> 00:01:00.340
But with Python, we kind of do this this time around.


00:01:00.340 --> 00:01:03.580
Yeah, I remember like also like adding more memory


00:01:03.580 --> 00:01:07.420
and trying to detect whether I could tell the difference for the $100 I spent.


00:01:07.420 --> 00:01:09.820
Yes, exactly. Exactly.


00:01:09.820 --> 00:01:12.620
Or optimizing your low man versus high man.


00:01:12.620 --> 00:01:15.180
I mean, that's going back always.


00:01:15.180 --> 00:01:18.680
But the big news is Python 311 is out.


00:01:18.740 --> 00:01:19.740
Woo.


00:01:19.740 --> 00:01:20.860
Yay.


00:01:20.860 --> 00:01:21.860
Yeah, that's it.


00:01:21.860 --> 00:01:23.540
We should have had like champagne or something.


00:01:23.540 --> 00:01:24.540
Yeah.


00:01:24.540 --> 00:01:26.860
Yeah, pop some corks.


00:01:26.860 --> 00:01:28.260
So very big news.


00:01:28.260 --> 00:01:29.500
I'm super excited about it.


00:01:29.500 --> 00:01:31.140
I told you there's this end of the spectrum.


00:01:31.140 --> 00:01:34.420
The other end of things that people seem to be psyched about


00:01:34.420 --> 00:01:37.100
across the board is better error messages.


00:01:37.100 --> 00:01:37.740
Yeah.


00:01:37.740 --> 00:01:40.460
I mean, it's very important for debugging


00:01:40.460 --> 00:01:42.900
and also for teaching people and learning Python.


00:01:42.900 --> 00:01:44.660
So yeah, absolutely.


00:01:44.660 --> 00:01:45.420
Absolutely.


00:01:45.420 --> 00:01:47.820
I got to pull this one off just for nostalgia sake.


00:01:47.820 --> 00:01:51.060
Dave in the audience says back when we had turbo buttons,


00:01:51.060 --> 00:01:53.780
our computers, they literally had a button that said turbo.


00:01:53.780 --> 00:01:55.380
I remember when I got my Pentium 90,


00:01:55.380 --> 00:01:56.380
it had a turbo button.


00:01:56.380 --> 00:01:57.820
And I'm like, yes.


00:01:57.820 --> 00:01:59.480
What it really meant is if it was off,


00:01:59.480 --> 00:02:01.860
it would run in like some weird retro slow mode.


00:02:01.860 --> 00:02:03.260
So I would like play mech warrior


00:02:03.260 --> 00:02:06.360
and stuff would like zoom around insanely fast.


00:02:06.360 --> 00:02:07.520
But if you took off turbo,


00:02:07.520 --> 00:02:09.420
you could play some of the older games


00:02:09.420 --> 00:02:10.660
because they weren't based on time.


00:02:10.660 --> 00:02:12.980
They were based on frame rate.


00:02:12.980 --> 00:02:15.980
Anyway, crazy, crazy memories.


00:02:15.980 --> 00:02:18.700
So we're kind of getting that cool like doubling a speed thing here.


00:02:18.700 --> 00:02:21.780
So there's a ton of stuff to talk about in terms of what's available here.


00:02:21.780 --> 00:02:25.740
Before I get into the details, I want to point out on YouTube, which I'm linking


00:02:25.740 --> 00:02:32.100
to Python discord lemon over there, hosted a live stream of the release.


00:02:32.100 --> 00:02:38.020
So this is not a party celebrating the release, but this is live broadcasting


00:02:38.020 --> 00:02:43.100
of the actions and the steps as it's being released, like, okay, the final one is


00:02:43.100 --> 00:02:46.940
built. Okay, we pushed it to the Microsoft Store for Windows,


00:02:46.940 --> 00:02:51.920
Windows Store install. Now we pushed it to, you know, Python


00:02:51.920 --> 00:02:55.860
dot org. Now it's over here and like, right, like the actual


00:02:55.860 --> 00:02:59.260
pushing of the deployment. And there's a bunch of interesting


00:02:59.260 --> 00:03:01.940
things that happen there. And along the way, they talk about


00:03:01.940 --> 00:03:04.300
some of the features, we're gonna have a subset of the


00:03:04.300 --> 00:03:09.140
people that were there in apparently 46 hours on Friday on


00:03:09.140 --> 00:03:11.820
talk Python to make an episode out of it there as well.


00:03:11.980 --> 00:03:14.180
That's pretty cool. It's neat that they do that.


00:03:14.180 --> 00:03:16.780
So people can just watch the process.


00:03:16.780 --> 00:03:18.780
Yeah, it is cool that they do that.


00:03:18.780 --> 00:03:21.980
And I saw a pop up and like, "These guys are going live."


00:03:21.980 --> 00:03:25.280
I'm like, "Oh, that's playing in the background while I'm working today."


00:03:25.280 --> 00:03:28.980
You know, I'm going to be apparently at 80% capacity of like getting stuff done,


00:03:28.980 --> 00:03:30.180
but I'm going to enjoy it a lot.


00:03:30.180 --> 00:03:32.180
Also, we have a logo,


00:03:32.180 --> 00:03:35.980
which is not the official Python logo,


00:03:35.980 --> 00:03:38.580
but a Python 3.11 logo.


00:03:38.580 --> 00:03:42.380
And it has like little, it's like two snakes,


00:03:42.380 --> 00:03:46.380
but they're not the Python, you know, cartoon, dramatic,


00:03:46.380 --> 00:03:49.540
like sort of stylized snakes, they just look like snakes.


00:03:49.540 --> 00:03:52.500
And it says faster Python exception groups


00:03:52.500 --> 00:03:54.760
and accept star typing improvements.


00:03:54.760 --> 00:03:58.020
And I literally love the logo basically as the release notes,


00:03:58.020 --> 00:04:00.140
but, and it has a lightning bolt in the middle.


00:04:00.140 --> 00:04:01.180
I guess that means fast.


00:04:01.180 --> 00:04:02.020
- I think so.


00:04:02.020 --> 00:04:02.860
- I think so.


00:04:02.860 --> 00:04:05.860
All right, so let's see, major new changes.


00:04:05.860 --> 00:04:09.860
we've got fine-grained error locations and tracebacks.


00:04:09.860 --> 00:04:13.360
Let me see if I can get it to show us some interesting example here.


00:04:13.360 --> 00:04:15.360
Yeah, this is super cool.


00:04:15.360 --> 00:04:19.360
So check, there's a line if you just follow the PEP there.


00:04:19.360 --> 00:04:20.860
There's an example of,


00:04:20.860 --> 00:04:23.860
suppose you're calling like a complicated JSON API


00:04:23.860 --> 00:04:26.860
and you get this data back and you store it in a variable x.


00:04:26.860 --> 00:04:29.860
You've got to go to some field in the JSON document


00:04:29.860 --> 00:04:31.860
and then further down and further down and further down


00:04:31.860 --> 00:04:33.860
and like either get or set a value.


00:04:33.860 --> 00:04:39.300
So here it has X bracket of A, bracket of B, bracket of C, bracket of D.


00:04:39.300 --> 00:04:43.580
So you're like diving from like level A, B, C, D in the JSON document.


00:04:43.580 --> 00:04:48.860
If you get the error, none type is, or object is not subscriptable.


00:04:48.860 --> 00:04:51.500
You know something there was none.


00:04:51.500 --> 00:04:53.940
>> Yeah, but you're four levels deep. Which one was it?


00:04:53.940 --> 00:04:55.980
>> Right. It could have been B wasn't subscriptable,


00:04:55.980 --> 00:04:56.940
or it could have been C,


00:04:56.940 --> 00:04:58.780
or it could have been like, you don't know where.


00:04:58.780 --> 00:05:00.900
And so what a hassle, right?


00:05:00.900 --> 00:05:02.900
and you do print statements,


00:05:02.900 --> 00:05:04.900
that's when you do debugging statements,


00:05:04.900 --> 00:05:06.900
that's when you maybe make that four different lines,


00:05:06.900 --> 00:05:08.900
so you see which line crashes.


00:05:08.900 --> 00:05:10.900
On 3.11 now it just says,


00:05:10.900 --> 00:05:12.900
tilde tilde tilde,


00:05:12.900 --> 00:05:14.900
look, it's, you had


00:05:14.900 --> 00:05:16.900
x of a of b of c,


00:05:16.900 --> 00:05:18.900
it's c that was the none


00:05:18.900 --> 00:05:20.900
thing, that's where the problem was.


00:05:20.900 --> 00:05:22.900
Actually I suspect that,


00:05:22.900 --> 00:05:24.900
I guess it's probably c,


00:05:24.900 --> 00:05:26.900
we tried to get d out of none,


00:05:26.900 --> 00:05:28.900
and c was none, is probably where the error was.


00:05:28.900 --> 00:05:33.140
Yeah. But it points like right where these problems is, problems are


00:05:33.140 --> 00:05:33.740
throughout there.


00:05:33.740 --> 00:05:34.520
Yeah.


00:05:34.520 --> 00:05:35.460
Really neat.


00:05:35.460 --> 00:05:36.260
Um,


00:05:36.260 --> 00:05:37.780
that's a whole bunch of others.


00:05:37.780 --> 00:05:37.940
Yeah.


00:05:37.940 --> 00:05:41.140
There's a bunch of other ways that they're highlighting where the problem is.


00:05:41.140 --> 00:05:41.860
Yeah.


00:05:41.860 --> 00:05:46.140
If you go through, there's a bunch of cool examples here, but basically you end up


00:05:46.140 --> 00:05:51.660
with, within complex expressions, you know, multiple things happening on one


00:05:51.660 --> 00:05:53.700
line and so on, you get a nice details.


00:05:53.700 --> 00:05:55.620
They're, pretty cool.


00:05:55.620 --> 00:05:58.280
So that's just one of them, but I would say


00:05:58.280 --> 00:06:01.280
if you don't care about performance, that's probably


00:06:01.280 --> 00:06:03.280
what you might consider the highlight.


00:06:03.280 --> 00:06:06.720
If you're an asyncio, async and await type person,


00:06:06.720 --> 00:06:10.220
async exception groups, PEP564


00:06:10.220 --> 00:06:12.720
and except star are pretty interesting.


00:06:12.720 --> 00:06:16.520
Because if I start three tasks and I wait on them


00:06:16.520 --> 00:06:18.280
and two of them have errors,


00:06:18.280 --> 00:06:19.920
well, which exception do I get?


00:06:19.920 --> 00:06:23.580
Do I get the one from the first one or do I get the one from the second one?


00:06:23.580 --> 00:06:26.260
So it would be great to be able to say,


00:06:26.260 --> 00:06:27.780
two of the three things failed,


00:06:27.780 --> 00:06:28.940
here are their problems.


00:06:28.940 --> 00:06:31.580
You can get a holistic view of what's happening.


00:06:31.580 --> 00:06:32.780
That's great.


00:06:32.780 --> 00:06:37.460
>> Yeah. I still haven't got my head around this completely,


00:06:37.460 --> 00:06:43.400
but I'm curious to see how this will change Python style,


00:06:43.400 --> 00:06:46.820
because this changes how you can write exception handling.


00:06:46.820 --> 00:06:52.380
>> Indeed. Some of the higher level async frameworks


00:06:52.380 --> 00:07:01.780
like Trio and Any.io have this concept of starting and managing a series of tasks together as a group.


00:07:01.780 --> 00:07:09.060
So if I'm going to save an entry to the database, I'm going to call an API, and I'm going to create a file,


00:07:09.060 --> 00:07:14.860
and those are all the all results of like, I want to create a new user, I want to do whatever, right?


00:07:14.860 --> 00:07:18.980
You might want to be able to say, I want to start all those and wait for them to finish.


00:07:18.980 --> 00:07:22.300
or if I start a couple of them to decide I want to bail out,


00:07:22.300 --> 00:07:25.180
cancel all of them or if one fails and so on.


00:07:25.180 --> 00:07:29.220
We've got this concept of a task group in


00:07:29.220 --> 00:07:33.620
AsyncIO and changes to the task cancellation semantics.


00:07:33.620 --> 00:07:40.940
It's interesting, we've got PEP 657 was the traceback enhancements,


00:07:40.940 --> 00:07:43.780
654 was the exception groups,


00:07:43.780 --> 00:07:48.100
but the task groups is GH 90908.


00:07:48.100 --> 00:07:49.380
- Interesting. - Do you know what GH stands for?


00:07:49.380 --> 00:07:49.880
GitHub.


00:07:49.880 --> 00:07:50.380
- Okay.


00:07:50.380 --> 00:07:51.380
Weird. - So,


00:07:51.380 --> 00:07:54.480
it's news to me that this,


00:07:54.480 --> 00:07:57.180
these features get added through


00:07:57.180 --> 00:07:59.880
just a GitHub issue rather than a proper,


00:07:59.880 --> 00:08:01.480
you know, PEP.


00:08:01.480 --> 00:08:03.480
But, anyway.


00:08:03.480 --> 00:08:04.680
Yeah.


00:08:04.680 --> 00:08:05.480
Pretty neat.


00:08:05.480 --> 00:08:08.180
- Maybe you're pronouncing GH as "puh"


00:08:08.180 --> 00:08:09.480
- Yeah. - like a...


00:08:09.480 --> 00:08:11.480
(laughing)


00:08:11.480 --> 00:08:12.680
- Exactly.


00:08:12.680 --> 00:08:13.780
Let's see.


00:08:13.780 --> 00:08:16.680
Henry has some cool comments falling up out there.


00:08:16.680 --> 00:08:19.340
Henry Schreiner thinks, "Caters is already using


00:08:19.340 --> 00:08:21.860
exception groups via Backport exception group.


00:08:21.860 --> 00:08:25.700
It is fantastic and really does change Python exceptions."


00:08:25.700 --> 00:08:26.900
>> Cool.


00:08:26.900 --> 00:08:29.940
>> Cool extra information there. All right, let's keep going.


00:08:29.940 --> 00:08:32.540
You've already talked about Tomlib being built-in.


00:08:32.540 --> 00:08:34.580
Now that we have pyproject.toml,


00:08:34.580 --> 00:08:37.400
we really have external libraries in order to understand them.


00:08:37.400 --> 00:08:41.540
>> Yeah, now we get to do the if block.


00:08:41.540 --> 00:08:47.420
if import Tomolib or the try except around it.


00:08:47.420 --> 00:08:48.940
>> Exactly.


00:08:48.940 --> 00:08:50.220
>> How fun.


00:08:50.220 --> 00:08:51.460
>> Yeah.


00:08:51.460 --> 00:08:54.500
>> It is a good thing though. I'm glad for that.


00:08:54.500 --> 00:08:57.140
>> Yeah. There's changes to regular expressions.


00:08:57.140 --> 00:08:58.940
If you care, you know.


00:08:58.940 --> 00:09:03.620
Then we've got basically a general statement saying,


00:09:03.620 --> 00:09:08.460
the faster CPython project is already yielding some exciting results.


00:09:08.460 --> 00:09:13.840
That is Mark Shannon, Gideon Van Rossum, and a bunch of other folks,


00:09:13.840 --> 00:09:18.080
Grant and others, all working on this.


00:09:18.080 --> 00:09:20.080
And this is already yielding exciting results.


00:09:20.080 --> 00:09:25.120
Python 3.11 is up 10 to 60% faster than just 3.10.


00:09:25.120 --> 00:09:27.920
That is just from last year, right?


00:09:27.920 --> 00:09:29.920
Hence the turbo button.


00:09:29.920 --> 00:09:36.120
On average, we measured a 1.22 or otherwise known as 22%


00:09:36.120 --> 00:09:41.480
speed up on the benchmarks for Python tests.


00:09:41.480 --> 00:09:43.160
So our Python benchmarks.


00:09:43.160 --> 00:09:46.360
You see, see faster Python for details, right?


00:09:46.360 --> 00:09:48.560
There's already some of those we're making the 310,


00:09:48.560 --> 00:09:50.960
311 is getting more, 312 is getting more.


00:09:50.960 --> 00:09:54.960
And it's, yeah, it's just a first down payment, I guess.


00:09:54.960 --> 00:09:56.520
But it's really great to see that happening.


00:09:56.520 --> 00:09:57.720
>> Yeah, pretty exciting.


00:09:57.720 --> 00:09:59.520
>> Yeah, a bunch of stuff around typing.


00:09:59.520 --> 00:10:01.720
Those are a lot of other highlights there.


00:10:01.720 --> 00:10:04.280
Two things that are worth calling out here, I would say.


00:10:04.280 --> 00:10:06.280
One is self.


00:10:06.280 --> 00:10:08.280
It's good to be self-aware, right, Brian?


00:10:08.280 --> 00:10:10.280
Yeah.


00:10:10.280 --> 00:10:11.700
It is.


00:10:11.700 --> 00:10:14.080
And so Python classes can now


00:10:14.080 --> 00:10:16.580
understand that they too have a self.


00:10:16.580 --> 00:10:18.580
Even though they say self all over the place.


00:10:18.580 --> 00:10:20.580
Like, you know their language, right?


00:10:20.580 --> 00:10:24.180
Like this in C++ and C# is a thing you can, but not must use.


00:10:24.180 --> 00:10:25.380
Or you've got to say self.


00:10:25.380 --> 00:10:28.980
So ironically, the typing system now also understands self.


00:10:28.980 --> 00:10:29.980
And you can say,


00:10:29.980 --> 00:10:32.980
what the problem was before, if I'm in a class and I have a


00:10:32.980 --> 00:10:36.540
method of that class that returns an instance of that class.


00:10:36.540 --> 00:10:40.860
The class is not yet defined as far as Python's concerned until you're to the end.


00:10:40.860 --> 00:10:44.980
So I can't say the return type is the name of the class


00:10:44.980 --> 00:10:48.180
because until you're done the class is not defined, right?


00:10:48.180 --> 00:10:50.980
It's like this weird error. So what you can say is it returns self.


00:10:50.980 --> 00:10:53.700
And whatever self is, that's what it returns.


00:10:53.700 --> 00:10:59.060
And one of the changes and difficulties was to make this work with inheritance.


00:10:59.060 --> 00:11:01.980
>> Yeah. I mean, in C++,


00:11:01.980 --> 00:11:04.980
you have to pre-declare the type ahead of time.


00:11:04.980 --> 00:11:08.060
But then, yeah, anyway,


00:11:08.060 --> 00:11:10.300
we don't have declarations in Python.


00:11:10.300 --> 00:11:14.240
>> We don't. I wonder why we don't have a two-pass compiler


00:11:14.240 --> 00:11:17.540
that scans for types and then expands out the details.


00:11:17.540 --> 00:11:20.940
>> Do you know what variadic generics are?


00:11:20.940 --> 00:11:23.340
Putting you on the spot, sorry.


00:11:23.340 --> 00:11:27.460
>> You are putting me on the spot. Let's see.


00:11:27.460 --> 00:11:29.380
>> I just want to use that word more often.


00:11:29.380 --> 00:11:31.260
>> I know, it sounds like,


00:11:31.260 --> 00:11:34.500
because I do have a PhD in computer science.


00:11:34.500 --> 00:11:36.500
It enables the creation of


00:11:36.500 --> 00:11:41.740
generics parameterized with a single type.


00:11:41.740 --> 00:11:45.300
This is something I don't do much of in Python types.


00:11:45.300 --> 00:11:48.300
You can create a type variable that then defines


00:11:48.300 --> 00:11:51.020
the type of a thing and then use that variable.


00:11:51.020 --> 00:11:53.140
It's like templates a little bit.


00:11:53.140 --> 00:11:55.140
This has to do with that.


00:11:55.140 --> 00:11:57.620
>> Okay. I don't think I'm smart enough to use this.


00:11:57.620 --> 00:12:01.740
>> You look at the example, you say I created an axis one is like a type,


00:12:01.740 --> 00:12:08.340
and then I can say I have an array which is of generic of axis one.


00:12:08.340 --> 00:12:15.020
I left that stuff behind in C++ like the multiple template.


00:12:15.020 --> 00:12:16.580
>> Somebody is helping us out.


00:12:16.580 --> 00:12:18.660
Dean is saying,


00:12:18.660 --> 00:12:20.460
"When I learned about Rayleigh generics,


00:12:20.460 --> 00:12:24.060
I thought maybe we've gone too far with typing."


00:12:24.060 --> 00:12:26.060
Thanks, Dean.


00:12:26.060 --> 00:12:30.300
You don't, one thing that's nice about Python is often you don't have to


00:12:30.300 --> 00:12:33.540
know or care or consume certain parts.


00:12:33.540 --> 00:12:35.340
You're like, you know what, that doesn't apply to me yet.


00:12:35.340 --> 00:12:36.940
Maybe someday, not right now.


00:12:36.940 --> 00:12:40.780
There's other stuff of course, the last one I think is noteworthy


00:12:40.780 --> 00:12:43.500
has to do with limiting


00:12:43.500 --> 00:12:47.420
the spread of little Bobby tables, let's say.


00:12:47.420 --> 00:12:50.580
And these are arbitrary literal string types.


00:12:50.580 --> 00:12:54.380
So the idea is, if you've got, say, like, a SQL query,


00:12:54.380 --> 00:12:58.880
it would be great to somehow define,


00:12:58.880 --> 00:13:01.880
here's a string that I want to put into code,


00:13:01.880 --> 00:13:05.880
but I don't want it, it's kind of like a static string,


00:13:05.880 --> 00:13:11.580
in a sense, like it can't be modified or added against non-literal strings.


00:13:11.580 --> 00:13:16.880
So the example says, look, I've got slick* from data where user_id equals fstring curly user_id.


00:13:16.880 --> 00:13:19.480
And if you say user123, good.


00:13:19.480 --> 00:13:24.480
but you also might say user123; drop table data;


00:13:24.480 --> 00:13:27.040
or you could do, you want to get all the records,


00:13:27.040 --> 00:13:29.840
you say user123 or 1=1.


00:13:29.840 --> 00:13:31.680
Right? Like these are bad.


00:13:31.680 --> 00:13:38.360
So what you can do with these now is you can come up with literal strings,


00:13:38.360 --> 00:13:40.160
and in order to make the query work,


00:13:40.160 --> 00:13:42.560
you have to use database parameters.


00:13:42.560 --> 00:13:45.680
You just put like a placeholder in the string that never changes,


00:13:45.680 --> 00:13:50.180
And that way, basically, your string, in a sense, is safe from injection.


00:13:50.180 --> 00:13:50.920
Okay.


00:13:50.920 --> 00:13:51.420
Yeah.


00:13:51.420 --> 00:13:55.520
But you can still, you still can pass parameters in, but you just have to do it a different way.


00:13:55.520 --> 00:14:01.860
Right. So in this example, they have select user.name, user.age from data, where user ID is question mark.


00:14:01.860 --> 00:14:04.740
That's the indicator of a SQL parameter.


00:14:04.740 --> 00:14:09.300
And then you say connection execute given that string, and then you pass the parameter,


00:14:09.300 --> 00:14:10.840
which has the value of the user ID.


00:14:10.840 --> 00:14:15.840
and then the database engine knows like that can't truncate a statement, right?


00:14:15.840 --> 00:14:18.840
It can't sort of modify the command you send.


00:14:18.840 --> 00:14:22.080
What's notable though is you can also add on things,


00:14:22.080 --> 00:14:26.000
you can change it and combine it with other literal strings,


00:14:26.000 --> 00:14:28.480
but not with non-literal strings.


00:14:28.480 --> 00:14:30.280
>> Okay, interesting.


00:14:30.280 --> 00:14:37.000
>> Yeah. That's what this literal string type is here.


00:14:37.840 --> 00:14:40.960
- And yeah, anyway, so people can check that out.


00:14:40.960 --> 00:14:43.160
I think that's, you know, that's gonna be useful


00:14:43.160 --> 00:14:46.180
in a lot of situations where you're trying to be safe


00:14:46.180 --> 00:14:48.220
with a user input basically.


00:14:48.220 --> 00:14:49.060
- Yeah.


00:14:49.060 --> 00:14:50.720
- All right, is that it?


00:14:50.720 --> 00:14:52.780
I think that might be all the highlights.


00:14:52.780 --> 00:14:55.720
Yeah, there's a, go get your version.


00:14:55.720 --> 00:14:59.600
I've already brew installed my 3.11, which is cool.


00:14:59.600 --> 00:15:01.200
- Oh, you brew installed, okay.


00:15:01.200 --> 00:15:03.640
- I did.


00:15:03.640 --> 00:15:05.920
Now, if you just say brew install Python 3,


00:15:05.920 --> 00:15:09.520
you'll get three, you'll get three, 10, seven, I think,


00:15:09.520 --> 00:15:11.600
or eight, you won't get 311,


00:15:11.600 --> 00:15:14.400
but you can root install Python,


00:15:14.400 --> 00:15:17.400
I think it's at 311 or at 3.11,


00:15:17.400 --> 00:15:20.480
you'll have to look, I don't remember the exact command,


00:15:20.480 --> 00:15:21.300
but there's a way to say,


00:15:21.300 --> 00:15:23.920
no, I want the cutting edge version.


00:15:23.920 --> 00:15:26.120
And I was already, final thought on this, we'll move on.


00:15:26.120 --> 00:15:29.120
I was already given a small cut by it.


00:15:29.120 --> 00:15:29.960
- You were.


00:15:29.960 --> 00:15:34.960
- I was, so the Python Bytes website is based on Beanie,


00:15:35.480 --> 00:15:37.280
the MongoDB,


00:15:37.280 --> 00:15:40.240
pedantic combo of glory,


00:15:40.240 --> 00:15:41.200
because it's all async,


00:15:41.200 --> 00:15:42.360
it's based on motor,


00:15:42.360 --> 00:15:47.240
the async driver for Python and MongoDB


00:15:47.240 --> 00:15:49.020
from the MongoDB folks.


00:15:49.020 --> 00:15:50.960
They built that thing in the super early days


00:15:50.960 --> 00:15:53.920
before async and await was a thing based on Tornado.


00:15:53.920 --> 00:15:57.280
So they don't use async def for their async functions.


00:15:57.280 --> 00:16:01.440
They put @asyncio.coroutine as a decorator


00:16:01.440 --> 00:16:03.760
onto all their async functions.


00:16:03.760 --> 00:16:04.600
Well, that was awesome


00:16:04.600 --> 00:16:08.100
until 3.11 where that was removed from the runtime.


00:16:08.100 --> 00:16:11.340
So that doesn't work anymore


00:16:11.340 --> 00:16:13.280
and it doesn't run so well either.


00:16:13.280 --> 00:16:17.320
So the motor people had to rush out 3.11 yesterday


00:16:17.320 --> 00:16:20.040
after much conversation of like,


00:16:20.040 --> 00:16:23.960
you guys realize you should have tested on 3.11 beta


00:16:23.960 --> 00:16:27.920
or RC1 or RC2 or any other release at some point


00:16:27.920 --> 00:16:30.320
'cause clearly this code was never gonna run


00:16:30.320 --> 00:16:31.680
and you should have known straight away,


00:16:31.680 --> 00:16:33.840
but at least they fixed it quickly.


00:16:33.840 --> 00:16:37.300
>> Okay. So Henry wants to know, how did you find it?


00:16:37.300 --> 00:16:40.220
Apparently, it's on MergedPR.


00:16:40.220 --> 00:16:43.220
>> Perhaps. I just did brew update,


00:16:43.220 --> 00:16:49.300
brew outdated, and it said new recipe or new whatever it calls those things.


00:16:49.300 --> 00:16:51.260
The new recipe Python 3.11.


00:16:51.260 --> 00:16:53.020
I said, "Oh, cool. Then I'll install Python 3.11."


00:16:53.020 --> 00:16:53.700
>> Okay.


00:16:53.700 --> 00:16:54.980
>> That's how I know.


00:16:54.980 --> 00:16:59.140
>> So I want to stick with this install thing a little bit.


00:16:59.140 --> 00:17:02.860
Because I would think that you're probably a power user.


00:17:02.860 --> 00:17:07.740
I mean, you know Python pretty much and you're trying to be cutting edge and everything.


00:17:07.740 --> 00:17:16.700
I think that a lot of Python bloggers and social media people that are famous in Python


00:17:16.700 --> 00:17:19.140
are probably the power user kind of people.


00:17:19.140 --> 00:17:22.060
And they tell people weird things, I think.


00:17:22.060 --> 00:17:23.060
>> Like brew install Python.


00:17:23.060 --> 00:17:24.060
>> Just brew install.


00:17:24.060 --> 00:17:26.180
And I don't think it's a good idea.


00:17:26.180 --> 00:17:31.480
So I'm going to get on the soapbox a little bit and say, I wrote an article on how to


00:17:31.480 --> 00:17:39.000
install Python and it's installing Python 311 on Mac or Windows and we'll get to Linux in a bit.


00:17:39.000 --> 00:17:46.920
But so the gist is you go to python.org, you hover over downloads and you click download


00:17:46.920 --> 00:17:51.400
and then the thing that gets installed, you install it. Now you're done.


00:17:51.400 --> 00:17:58.200
Oh, so okay, so why did this deserve an entire article? Well, because I think a lot of people


00:17:58.200 --> 00:18:07.720
are teaching people to do like saying just brew install it or do a do pie in and and


00:18:07.720 --> 00:18:13.420
pie in I anyway we'll get to there but so I just want to tell people how long does it


00:18:13.420 --> 00:18:19.640
take it takes about a minute I took I did it I timed it on both my Mac and did it on


00:18:19.640 --> 00:18:26.780
a Windows machine and just installing everything takes yeah it took about a minute a little


00:18:26.780 --> 00:18:29.540
a minute and 13 seconds on my Mac.


00:18:29.540 --> 00:18:32.020
And this is including me having to hit stuff.


00:18:32.020 --> 00:18:33.660
So it's also my delay.


00:18:33.660 --> 00:18:38.260
And then also did it on Windows, it took like twice as long,


00:18:38.260 --> 00:18:42.620
but I was tunneled through a VPN and firewalls and stuff.


00:18:42.620 --> 00:18:45.380
So it probably, it's probably all that.


00:18:45.380 --> 00:18:46.780
It's pretty fast.


00:18:46.780 --> 00:18:49.400
You can have, and it doesn't uninstall anything.


00:18:49.400 --> 00:18:51.540
So you can have multiple versions.


00:18:51.540 --> 00:18:55.160
So it will, like if you use that sort of download link


00:18:55.160 --> 00:18:57.720
for like the latest, like 310.8,


00:18:57.720 --> 00:19:00.960
it'll go over the top of 310.7, I think.


00:19:00.960 --> 00:19:03.060
At least on Mac it does that.


00:19:03.060 --> 00:19:05.120
But that's okay, it's kind of what I want.


00:19:05.120 --> 00:19:07.360
I've got 310, you can have multiple.


00:19:07.360 --> 00:19:11.020
I got 310, 310, 311 all on my machine,


00:19:11.020 --> 00:19:12.600
just with those links.


00:19:12.600 --> 00:19:15.200
And the 311 just is the default.


00:19:15.200 --> 00:19:19.680
I think it's the newest one and the oldest.


00:19:19.680 --> 00:19:24.000
Anyway, it modifies the Z profile, your .Z profile,


00:19:24.000 --> 00:19:26.420
and it shows up as the latest one.


00:19:26.420 --> 00:19:28.240
Now if I had 3.10 before,


00:19:28.240 --> 00:19:31.800
what if I go back and install the update my 3.10,


00:19:31.800 --> 00:19:34.440
will it make 3.10 the default?


00:19:34.440 --> 00:19:35.280
No, it doesn't.


00:19:35.280 --> 00:19:37.760
It leaves it alone because it was already in there.


00:19:37.760 --> 00:19:38.800
It leaves it be.


00:19:38.800 --> 00:19:40.880
But you should check anyway if you're gonna go back


00:19:40.880 --> 00:19:42.500
and install old versions.


00:19:42.500 --> 00:19:44.600
And Tox works just great with it.


00:19:44.600 --> 00:19:47.380
So why am I kind of ranting on this


00:19:47.380 --> 00:19:50.560
is because a lot of people try to say Homebrew.


00:19:50.560 --> 00:19:52.640
And if you're a Homebrew user,


00:19:52.640 --> 00:19:54.680
You're not gonna look for this blog anyway.


00:19:54.680 --> 00:19:56.720
You're just gonna try to do it with homebrew.


00:19:56.720 --> 00:19:59.240
Great, go for it, perfect.


00:19:59.240 --> 00:20:02.160
And pyenv, I think there's some places for it,


00:20:02.160 --> 00:20:04.540
but pyenv is about managing different versions


00:20:04.540 --> 00:20:06.600
and having multiple live at the same time


00:20:06.600 --> 00:20:08.880
and different projects use different ones.


00:20:08.880 --> 00:20:11.720
It's not just an easy installer.


00:20:11.720 --> 00:20:14.360
And since it does all that other stuff,


00:20:14.360 --> 00:20:16.920
I don't think people should recommend it for newbies.


00:20:16.920 --> 00:20:20.860
It's not the right tool for somebody new to Python.


00:20:20.860 --> 00:20:23.980
I think it's just gonna confuse the heck out of people.


00:20:23.980 --> 00:20:27.780
So that said, I walked through the whole thing


00:20:27.780 --> 00:20:32.780
in this article, but I also admit that it's Mac focused.


00:20:32.780 --> 00:20:34.700
But on the Windows, you just,


00:20:34.700 --> 00:20:37.560
I did a little blurb on Windows too.


00:20:37.560 --> 00:20:40.120
The thing I wanna tell people that I sometimes forget


00:20:40.120 --> 00:20:42.660
on the Windows install is go slow


00:20:42.660 --> 00:20:44.000
when you're clicking through everything


00:20:44.000 --> 00:20:46.600
so that you can select the advanced features.


00:20:46.600 --> 00:20:50.880
and you probably want add Python to environmental variables.


00:20:50.880 --> 00:20:53.200
That makes it so that it just shows up in your path


00:20:53.200 --> 00:20:56.200
because you can add it to your path manually


00:20:56.200 --> 00:20:57.760
or you can let the installer do it


00:20:57.760 --> 00:20:59.600
and I like to have the installer do it.


00:20:59.600 --> 00:21:01.640
So that's my rant.


00:21:01.640 --> 00:21:04.600
I think that for most people,


00:21:04.600 --> 00:21:06.500
just use the default installer.


00:21:06.500 --> 00:21:09.800
- Yeah, I think that's totally good advice.


00:21:09.800 --> 00:21:11.760
Let's see here, really quick.


00:21:11.760 --> 00:21:15.000
I also did that the other day before it came out in brew.


00:21:15.000 --> 00:21:16.680
I'm like, "Oh, let me just put it over here and see.


00:21:16.680 --> 00:21:18.040
I wanted to test some things."


00:21:18.040 --> 00:21:20.280
I had 3.11 and they were


00:21:20.280 --> 00:21:23.320
both totally content next to each other from those installers.


00:21:23.320 --> 00:21:27.720
I just decided to take 3.9 out because I didn't really need that.


00:21:27.720 --> 00:21:30.600
I've got it from Homebrew as well already.


00:21:30.600 --> 00:21:35.040
But they do coexist just fine.


00:21:35.040 --> 00:21:37.760
Here's what the brew statement is.


00:21:37.760 --> 00:21:43.080
It's new formula and it's Python at 3.11.


00:21:43.080 --> 00:21:46.680
- Okay, nice. - Yeah.


00:21:46.680 --> 00:21:51.480
And as for Linux people, I think it's sort of funny that people try to tell,


00:21:51.480 --> 00:21:55.280
if how to install Python articles, talk about Linux stuff.


00:21:55.280 --> 00:21:58.680
Linux people already know how to install their stuff, don't they? I mean...


00:21:58.680 --> 00:22:03.880
Yes, but although it's more complicated because Python's broken into a bunch of pieces.


00:22:03.880 --> 00:22:06.280
You want Python, or do you want the Python dev,


00:22:06.280 --> 00:22:09.880
or do you need the build essentials, or like, there's a lot of like,


00:22:09.880 --> 00:22:14.160
Do you need Python 3-VE and V?


00:22:14.160 --> 00:22:16.840
Because you want to create a virtual environments don't


00:22:16.840 --> 00:22:19.440
come with Python when you apt install it, which is like, what?


00:22:19.440 --> 00:22:21.680
>> But they do on Mac and Windows.


00:22:21.680 --> 00:22:24.320
>> Yes, exactly. At least the error message is,


00:22:24.320 --> 00:22:29.160
you don't have this, should you apt install Python 3-V and V?


00:22:29.160 --> 00:22:31.280
Yes, I should. Let me copy and paste. Hold on.


00:22:31.280 --> 00:22:32.320
>> Okay.


00:22:32.320 --> 00:22:35.880
>> All right. See Roman out in the audience there.


00:22:35.880 --> 00:22:38.600
Roman, I've got some shout outs for you in a little bit,


00:22:38.600 --> 00:22:40.660
and in the past if you weren't here.


00:22:40.660 --> 00:22:41.700
But before we get to those,


00:22:41.700 --> 00:22:44.860
I wanna tell you about this week's sponsor,


00:22:44.860 --> 00:22:47.100
Microsoft Founders Hub,


00:22:47.100 --> 00:22:49.340
Microsoft for Startups Founders Hub.


00:22:49.340 --> 00:22:51.140
As they have been recently,


00:22:51.140 --> 00:22:52.300
big supporters of the show,


00:22:52.300 --> 00:22:53.900
we really appreciate it.


00:22:53.900 --> 00:22:56.580
And if you're out there either starting a business


00:22:56.580 --> 00:22:58.060
or want to start a business,


00:22:58.060 --> 00:23:00.300
gotta know that it's not easy.


00:23:00.300 --> 00:23:02.260
Within the first year,


00:23:02.260 --> 00:23:04.100
90% of startups go out of business.


00:23:04.100 --> 00:23:06.080
That's not amazing.


00:23:06.080 --> 00:23:08.060
So the folks over at Microsoft for Startups


00:23:08.060 --> 00:23:13.220
set out to understand what are the problems that people are running into, and how could


00:23:13.220 --> 00:23:19.020
they help. So they came up with Microsoft for Startups Founders Hub. And the idea is


00:23:19.020 --> 00:23:26.140
that you get at any stage of your startup free resources to grow and thrive. So you


00:23:26.140 --> 00:23:31.740
get thousands of dollars of cloud credits for things like Azure and GitHub, and deep


00:23:31.740 --> 00:23:34.620
Keep mine, don't look.


00:23:34.620 --> 00:23:40.000
Open AI, sorry, for those types of things


00:23:40.000 --> 00:23:42.560
and as your startup grows and progresses,


00:23:42.560 --> 00:23:45.260
you get many, many more of those.


00:23:45.260 --> 00:23:48.200
But you also get support in the form


00:23:48.200 --> 00:23:50.640
of mentorship and connections.


00:23:50.640 --> 00:23:53.680
Brian, you're not in Silicon Valley, are you?


00:23:53.680 --> 00:23:54.520
- No.


00:23:54.520 --> 00:23:57.040
- Neither am I, by choice by the way.


00:23:57.040 --> 00:23:59.640
And most people out there listening are not either,


00:23:59.640 --> 00:24:02.080
but having the connections of like,


00:24:02.080 --> 00:24:05.240
hey, let's meet up with so-and-so for coffee


00:24:05.240 --> 00:24:06.680
and talk about this new project


00:24:06.680 --> 00:24:08.640
and see if there's a connection there, right?


00:24:08.640 --> 00:24:11.800
Like those kinds of things are incredibly powerful


00:24:11.800 --> 00:24:15.000
and they've given people in locations like that


00:24:15.000 --> 00:24:15.880
huge advantages.


00:24:15.880 --> 00:24:17.560
So the other thing you get with this


00:24:17.560 --> 00:24:20.280
is access to a mentorship network,


00:24:20.280 --> 00:24:23.320
the ability to book one-on-ones with meetings,


00:24:23.320 --> 00:24:24.680
one-on-one meetings with mentors,


00:24:24.680 --> 00:24:26.960
many of whom are founders themselves.


00:24:26.960 --> 00:24:29.720
We can talk about things like marketing or fundraising


00:24:29.720 --> 00:24:30.560
or whatever you need.


00:24:30.560 --> 00:24:32.660
So if you wanna get started,


00:24:32.660 --> 00:24:35.860
make your dream, your company a reality today


00:24:35.860 --> 00:24:37.520
with the critical support you get


00:24:37.520 --> 00:24:39.860
from Microsoft for Startups Founders Hub.


00:24:39.860 --> 00:24:42.480
You don't have to be third-party validated.


00:24:42.480 --> 00:24:44.160
You don't have to be venture backed


00:24:44.160 --> 00:24:45.740
or part of some kind of accelerator.


00:24:45.740 --> 00:24:47.240
Just go and apply for free.


00:24:47.240 --> 00:24:50.820
Pythonbites.fm/foundershub2022.


00:24:50.820 --> 00:24:52.360
Link is in your show notes.


00:24:52.360 --> 00:24:53.440
Check them out.


00:24:53.440 --> 00:24:55.080
Very cool program.


00:24:55.080 --> 00:24:56.240
- Very cool.


00:24:56.240 --> 00:24:57.880
- Indeed.


00:24:57.880 --> 00:25:00.940
All right, you ready for some awards?


00:25:00.940 --> 00:25:04.480
Got the red carpet out, the champagne, more champagne.


00:25:04.480 --> 00:25:05.880
Some kind of theme with that here.


00:25:05.880 --> 00:25:06.840
- Celebration.


00:25:06.840 --> 00:25:09.180
- Yes, let's talk about the Bossy's.


00:25:09.180 --> 00:25:14.180
So the Bossy's, this is InfoWorld's 2022 Bossy Awards,


00:25:14.180 --> 00:25:17.460
celebrate the most important and innovative solution


00:25:17.460 --> 00:25:20.200
for application developments, DevOps, analytics,


00:25:20.200 --> 00:25:21.960
and what not of the year.


00:25:21.960 --> 00:25:24.560
So let's go, these are open source.


00:25:24.560 --> 00:25:26.280
- Best open source software.


00:25:26.280 --> 00:25:28.200
I was like, where does boss come from?


00:25:28.200 --> 00:25:29.040
Okay.


00:25:29.040 --> 00:25:30.400
- Exactly.


00:25:30.400 --> 00:25:31.960
There's a bunch that are interesting,


00:25:31.960 --> 00:25:34.480
but we'll go through, you can't go through very fast.


00:25:34.480 --> 00:25:36.560
There's like a delay, I guess,


00:25:36.560 --> 00:25:39.240
so you pay attention and you actually take it in.


00:25:39.240 --> 00:25:42.160
So maybe really quick, just 'cause it's the first one,


00:25:42.160 --> 00:25:45.080
is there's Alma Linux, which is a free Linux OS


00:25:45.080 --> 00:25:46.520
for the community by the community


00:25:46.520 --> 00:25:50.240
that is like an enterprise Linux distribution


00:25:50.240 --> 00:25:51.220
focused on stability.


00:25:51.220 --> 00:25:53.160
So that might be cool checking out.


00:25:53.160 --> 00:25:55.800
I know a lot of people do things there.


00:25:55.800 --> 00:25:58.600
You have to bear with me as I make my way through this thing


00:25:58.600 --> 00:26:00.400
as it won't let me go any faster.


00:26:00.400 --> 00:26:03.840
Well, let's do the first one.


00:26:03.840 --> 00:26:05.340
There's a lot of Java in here actually,


00:26:05.340 --> 00:26:07.160
which we'll get back to in a joke later.


00:26:07.160 --> 00:26:08.040
That'll be fun.


00:26:08.040 --> 00:26:12.020
Like Jhipster, I mean, greetings Java hipster.


00:26:12.020 --> 00:26:14.780
That's a pretty awesome project.


00:26:14.780 --> 00:26:15.620
But--


00:26:15.620 --> 00:26:19.840
- Java hipster, that seems sort of anachronistic.


00:26:19.840 --> 00:26:22.240
- You know, you gotta, this is part of that


00:26:22.240 --> 00:26:25.480
self-talk thing where you like try to talk yourself up a little.


00:26:25.480 --> 00:26:28.580
All right, maybe number one that I want to give a shout out to


00:26:28.580 --> 00:26:31.240
at number one as in number 10 in the list is


00:26:31.240 --> 00:26:32.500
Wasm time.


00:26:32.500 --> 00:26:35.920
A fast and secure runtime for WebAssembly


00:26:35.920 --> 00:26:39.220
outside of the browser. So if you think about what Node.js did for


00:26:39.220 --> 00:26:43.020
JavaScript, like JavaScript used to be this thing you did on web frontends


00:26:43.020 --> 00:26:45.480
and then somebody said, if we rip that engine out,


00:26:45.480 --> 00:26:46.480
it could be


00:26:46.480 --> 00:26:51.680
a server side technology or a client side technology that is not in a browser at all, but just


00:26:51.680 --> 00:26:53.240
it becomes a programming language


00:26:53.240 --> 00:26:56.640
as long as we have a runtime that everyone likes and works with.


00:26:56.640 --> 00:26:59.840
Well, this is like that but for WebAssembly, right?


00:26:59.840 --> 00:27:04.440
And so what's interesting is if you want to


00:27:04.440 --> 00:27:07.940
go and run a Python code


00:27:07.940 --> 00:27:09.840
and you don't want to worry about making sure


00:27:09.840 --> 00:27:11.480
Python is set up and all those things,


00:27:11.480 --> 00:27:13.000
you could just get, say,


00:27:13.000 --> 00:27:15.200
something like PyScript


00:27:15.200 --> 00:27:18.340
and ship it to run on top of WasmTime


00:27:18.340 --> 00:27:19.540
and there you go.


00:27:19.540 --> 00:27:25.780
So you just say wasm time and then some wasm output, which could be, you know, your code.


00:27:25.780 --> 00:27:33.460
And let's see if they have over here on pipe. Yeah, we have wasm time 2.0, which is the Python embedding of wasm time.


00:27:33.460 --> 00:27:37.060
So there you go. Take your Python code and off it goes.


00:27:37.060 --> 00:27:41.060
That's pretty cool. So Michael, what time is it? It's wasm time.


00:27:41.060 --> 00:27:44.500
It's wasm time.


00:27:44.500 --> 00:27:46.300
(laughs)


00:27:46.300 --> 00:27:48.040
It is, awesome.


00:27:48.040 --> 00:27:50.120
Yeah, so you just write your code in Python


00:27:50.120 --> 00:27:52.620
and then you could go and run it,


00:27:52.620 --> 00:27:54.440
which would be pretty excellent.


00:27:54.440 --> 00:27:56.940
Also, something that's interesting about Wasm


00:27:56.940 --> 00:27:58.640
is it allows for interoperability.


00:27:58.640 --> 00:28:03.640
So if I wanted to do C, .NET, Python, and Rust,


00:28:03.640 --> 00:28:06.760
have those all talk together,


00:28:06.760 --> 00:28:08.820
'cause I don't know, I couldn't decide,


00:28:08.820 --> 00:28:10.900
or I don't know, whatever reason, right?


00:28:10.900 --> 00:28:12.960
You could have them all converted to Wasm


00:28:12.960 --> 00:28:14.120
and then integrate there as well.


00:28:14.120 --> 00:28:16.720
So there's some pretty interesting runtime


00:28:16.720 --> 00:28:18.360
and deployment things here.


00:28:18.360 --> 00:28:20.440
Anyway, so that was one of the winners.


00:28:20.440 --> 00:28:23.720
Right behind it, one of the biggest winners in our world


00:28:23.720 --> 00:28:25.600
has gotta be PyScript, right?


00:28:25.600 --> 00:28:27.000
- Yeah.


00:28:27.000 --> 00:28:28.520
It's got to be on the list.


00:28:28.520 --> 00:28:29.340
- Yeah, it is.


00:28:29.340 --> 00:28:30.740
There's a bunch of stuff here that I don't care about.


00:28:30.740 --> 00:28:33.480
But number 14, Sentry.


00:28:33.480 --> 00:28:35.300
- Nice. - Error monitoring.


00:28:35.300 --> 00:28:38.360
I was just using this to track down some errors


00:28:39.420 --> 00:28:44.420
that I introduced with trying to run Python 3.11


00:28:44.420 --> 00:28:46.740
and Beanie before it was time.


00:28:46.740 --> 00:28:48.180
But it told me exactly what was going on


00:28:48.180 --> 00:28:49.800
and I figured, okay, that's a motor problem.


00:28:49.800 --> 00:28:52.980
I was able to track that down, which is pretty excellent.


00:28:52.980 --> 00:28:57.000
Let's see a few more here that are fun, almost.


00:28:57.000 --> 00:28:59.720
In Bdev, if you're doing notebook stuff


00:28:59.720 --> 00:29:03.320
and you want to be able to test your notebooks


00:29:03.320 --> 00:29:06.200
or clean them up before you check them in,


00:29:06.200 --> 00:29:10.160
or you wanna turn notebooks into a Python package


00:29:10.160 --> 00:29:13.180
where certain actions in a cell become functions


00:29:13.180 --> 00:29:16.140
in your Python package and deploy it to PyBI,


00:29:16.140 --> 00:29:18.180
all those crazy things, nvdev.


00:29:18.180 --> 00:29:20.380
So those are pretty interesting.


00:29:20.380 --> 00:29:23.020
Accelerate, I think this is from Hugging Face,


00:29:23.020 --> 00:29:24.580
but I can't quite tell.


00:29:24.580 --> 00:29:28.300
Yeah, it is Hugging Face, that's what it is.


00:29:28.300 --> 00:29:32.420
It's a way to build, train, and deploy


00:29:32.420 --> 00:29:36.060
state of the art models powered by open source.


00:29:36.060 --> 00:29:39.880
Yeah. So anyway, it looks interesting if you're into that.


00:29:39.880 --> 00:29:41.800
Stable diffusion, do you need to


00:29:41.800 --> 00:29:44.460
have a bear that has just landed on the moon?


00:29:44.460 --> 00:29:45.780
Well, go in there,


00:29:45.780 --> 00:29:51.020
you can create those funky AI art things.


00:29:51.020 --> 00:29:53.300
Anyway, there's a bunch of fun projects in


00:29:53.300 --> 00:29:56.260
this 2022 Bossy's award list.


00:29:56.260 --> 00:29:57.380
>> That's pretty great.


00:29:57.380 --> 00:29:58.620
>> Yeah.


00:29:58.620 --> 00:30:00.020
>> All right.


00:30:00.020 --> 00:30:03.700
Yeah. Well, Scott, it's wasm time.


00:30:03.700 --> 00:30:06.460
>> It's wasm time. Yeah.


00:30:06.460 --> 00:30:11.420
We talk about Will McGugan a lot and textual and stuff.


00:30:11.420 --> 00:30:13.420
Will's in the audience. Hey, Will.


00:30:13.420 --> 00:30:15.780
One of the things that if you follow Will on Twitter,


00:30:15.780 --> 00:30:18.900
he shows a whole bunch of cool examples of stuff he's working on,


00:30:18.900 --> 00:30:24.740
but you haven't been able to play with it because he's been sneaky about it.


00:30:24.740 --> 00:30:27.540
Well, it's not sneaky, but it's been on a CSS branch,


00:30:27.540 --> 00:30:33.780
a different branch of their code base on textualize or textual.


00:30:33.780 --> 00:30:39.820
So now we can play with it because as of what, October 22nd,


00:30:39.820 --> 00:30:43.420
textual 0.2.0.


00:30:43.420 --> 00:30:45.700
Wow, big jump in numbers there, guys.


00:30:45.700 --> 00:30:51.340
But it released and it has all of the CSS branch stuff merged in.


00:30:51.340 --> 00:30:55.500
So all the really cool fun things that you can do that look like web development,


00:30:55.500 --> 00:30:58.500
but they're in a CLI.


00:30:58.500 --> 00:31:01.500
Now I can start playing with them because they've emerged in.


00:31:01.500 --> 00:31:05.500
One of the things that I'm glad that they waited a little while for


00:31:05.500 --> 00:31:09.500
because they were looking for API stability,


00:31:09.500 --> 00:31:13.500
but also they wanted to finalize the documentation


00:31:13.500 --> 00:31:17.500
at the same time before they released it to everybody officially.


00:31:17.500 --> 00:31:21.500
So they've got a tutorial written, which is really kind of nice.


00:31:21.500 --> 00:31:24.500
It's a little stopwatch application that kind of walks through,


00:31:24.500 --> 00:31:32.340
of walks through and it walks through all the different pieces of how you use Textualize


00:31:32.340 --> 00:31:33.340
with their CSS.


00:31:33.340 --> 00:31:41.500
And it's got going through writing through the CSS, the dynamicness of it, reactive attributes.


00:31:41.500 --> 00:31:42.500
This really looks great.


00:31:42.500 --> 00:31:44.980
I haven't gone through it yet, but it looks awesome.


00:31:44.980 --> 00:31:52.260
And then they went through and updated the Textualize guide, which goes through all the


00:31:52.260 --> 00:31:53.260
different examples.


00:31:53.260 --> 00:31:57.100
I've got my screen shrink up too far so it doesn't show everything.


00:31:57.100 --> 00:32:03.520
But anyway, really great stuff in this manual. Good job guys.


00:32:03.520 --> 00:32:04.960
>> Yeah, that was awesome.


00:32:04.960 --> 00:32:07.240
>> I can't wait to play with it.


00:32:07.240 --> 00:32:11.400
>> Who knew that we could treat terminals as


00:32:11.400 --> 00:32:15.280
high refresh rate general rendering engines.


00:32:15.280 --> 00:32:19.640
I feel like the stuff that Will and crew are


00:32:19.640 --> 00:32:23.240
highlighting here is a little bit like what you could do with JavaScript canvases.


00:32:23.240 --> 00:32:25.960
You're like, "Oh, guess what you could actually do?"


00:32:25.960 --> 00:32:27.920
Which is like our software here,


00:32:27.920 --> 00:32:30.080
StreamEar that we're using to live stream this.


00:32:30.080 --> 00:32:32.680
It's like, "Who would have ever thought you could have done this


00:32:32.680 --> 00:32:34.720
with just a web browser without plugins?"


00:32:34.720 --> 00:32:36.320
Here we are.


00:32:36.320 --> 00:32:42.360
>> I also just heard Will talking about this on ChangeLog just recently.


00:32:42.360 --> 00:32:44.120
One of the more recent ChangeLogs


00:32:44.120 --> 00:32:46.720
was talking about this release, which is pretty cool.


00:32:46.720 --> 00:32:49.920
Although, Will, I got to say I'm a little disappointed


00:32:49.920 --> 00:32:55.920
because they asked how you became rich and textual,


00:32:55.920 --> 00:32:59.380
have gained so much popularity so quickly,


00:32:59.380 --> 00:33:01.120
and you didn't even mention us.


00:33:01.120 --> 00:33:02.640
Just come on. Anyway.


00:33:02.640 --> 00:33:10.440
[LAUGHTER]


00:33:10.440 --> 00:33:13.680
Anyway, that's it for our items.


00:33:13.680 --> 00:33:15.880
Since I've been under the weather,


00:33:15.880 --> 00:33:17.080
I don't have any extras.


00:33:17.080 --> 00:33:18.680
Do you have any extras for us?


00:33:18.680 --> 00:33:22.120
Ah, you know that I do. I've got a bunch of things. I'll go quick through them.


00:33:22.120 --> 00:33:25.000
I recently did a fun video.


00:33:25.000 --> 00:33:26.000
I know that guy.


00:33:26.000 --> 00:33:32.200
Yeah, I did a video where I added, I did the live coding on TalkBython training,


00:33:32.200 --> 00:33:36.920
actually adding the feature for the search over here.


00:33:36.920 --> 00:33:40.280
I rewrote the search. You pointed out that pytest


00:33:40.280 --> 00:33:44.560
is a fun thing to type in there, right? pytest is good.


00:33:44.560 --> 00:33:48.640
You might search for Postman in Grok,


00:33:48.640 --> 00:33:51.180
and you get your search results there.


00:33:51.180 --> 00:33:52.840
But it's cool hierarchy thing.


00:33:52.840 --> 00:33:54.000
But when I first wrote that,


00:33:54.000 --> 00:33:55.960
it was super slow.


00:33:55.960 --> 00:33:58.600
The techniques that I used to debug that,


00:33:58.600 --> 00:34:00.360
figure out what's going on, make it faster.


00:34:00.360 --> 00:34:01.800
The video says 17,


00:34:01.800 --> 00:34:03.000
but in an extreme case,


00:34:03.000 --> 00:34:04.800
it was actually 80 times faster.


00:34:04.800 --> 00:34:06.320
There's just some really cool techniques


00:34:06.320 --> 00:34:07.240
of walking through like, "Oh,


00:34:07.240 --> 00:34:08.880
how could you use logging in


00:34:08.880 --> 00:34:10.920
the database to figure out what's happening?


00:34:10.920 --> 00:34:12.280
How can you use the profiling?


00:34:12.280 --> 00:34:14.160
How can we use dictionaries so that we


00:34:14.160 --> 00:34:16.580
and convert like 100 database calls into one,


00:34:16.580 --> 00:34:18.120
even though there's like a,


00:34:18.120 --> 00:34:20.560
not a natural join story going on.


00:34:20.560 --> 00:34:23.160
So if people wanna follow, go check out that video,


00:34:23.160 --> 00:34:25.260
that's lots of fun in the show notes.


00:34:25.260 --> 00:34:28.800
From, let me get the name right here,


00:34:28.800 --> 00:34:30.800
also from Ryan Sheftel.


00:34:30.800 --> 00:34:36.960
If you're into stock markets and go on,


00:34:36.960 --> 00:34:38.800
and you want to use Pandas,


00:34:38.800 --> 00:34:42.200
here's a project called Pandas Market Calendars.


00:34:42.200 --> 00:34:45.640
It's the market counters to use with pandas for trading applications.


00:34:45.640 --> 00:34:49.600
So it has things like, when are the markets opening and closing?


00:34:49.600 --> 00:34:50.840
Is there a holiday?


00:34:50.840 --> 00:34:54.320
Is there some other weird event that's changing the start to close time?


00:34:54.320 --> 00:34:55.040
Right.


00:34:55.040 --> 00:34:58.240
So just a cool little library to bring that into your pandas code.


00:34:58.240 --> 00:35:02.040
And I believe pandas came out of New York and, the whole


00:35:02.040 --> 00:35:03.400
trading industry over there.


00:35:03.400 --> 00:35:04.400
So that's good.


00:35:04.400 --> 00:35:08.080
Shout out for, Roman Wright, who is out in the audience.


00:35:08.080 --> 00:35:08.680
Hey, Roman.


00:35:09.240 --> 00:35:11.860
We recently, so when Beanie came out,


00:35:11.860 --> 00:35:15.280
Beanie is fantastic, MongoDB library,


00:35:15.280 --> 00:35:17.540
what FastAPI did for APIs,


00:35:17.540 --> 00:35:19.040
Beanie does for MongoDB, right?


00:35:19.040 --> 00:35:22.320
It takes Pydantic and turns it into a really cool API


00:35:22.320 --> 00:35:26.160
that then use instead of creating just classes or whatever, right?


00:35:26.160 --> 00:35:29.800
So all the benefits of having Pydantic plus MongoDB.


00:35:29.800 --> 00:35:31.880
And when it came out, it was only async,


00:35:31.880 --> 00:35:34.420
which is awesome when you're doing async stuff, right?


00:35:34.420 --> 00:35:37.140
Without it, you can't do all the really high scale,


00:35:37.140 --> 00:35:38.520
high concurrency things.


00:35:38.520 --> 00:35:40.740
But there's plenty of times where you're like,


00:35:40.740 --> 00:35:43.620
"I don't want that, I just want to call this function,


00:35:43.620 --> 00:35:47.100
and I'm in the middle of a script that has no business being async,


00:35:47.100 --> 00:35:49.080
but you gave me an async only function,


00:35:49.080 --> 00:35:52.260
so now I got to figure out how to spin up a loop and run this thing,


00:35:52.260 --> 00:35:55.360
and wait for it when I just want to call the function."


00:35:55.360 --> 00:35:59.060
So in addition to the standard async model,


00:35:59.060 --> 00:36:05.160
Roman added a beanie.sync sub-module where you can get async document,


00:36:05.160 --> 00:36:09.540
and you can initialize a synchronous database connection


00:36:09.540 --> 00:36:11.820
and then all of your queries and everything


00:36:11.820 --> 00:36:15.340
become just straight up synchronous calls


00:36:15.340 --> 00:36:18.060
like on more traditional database engines


00:36:18.060 --> 00:36:20.020
or database ORMs, ODMs.


00:36:20.020 --> 00:36:20.860
- Okay.


00:36:20.860 --> 00:36:23.420
- Yeah, so excellent work out there.


00:36:23.420 --> 00:36:25.660
- It's a good job keeping up on that.


00:36:25.660 --> 00:36:27.220
It's a cool product or project.


00:36:27.220 --> 00:36:29.260
- Yeah, it's super cool, yeah, I love it.


00:36:29.260 --> 00:36:33.260
DuckDuckGo has released a web browser.


00:36:33.260 --> 00:36:35.700
Just when you thought Chrome has taken over everything,


00:36:35.700 --> 00:36:39.260
DuckDuckGo says, "No," or they quacked, "No,"


00:36:39.260 --> 00:36:42.420
or whatever DuckDuck does when they communicate.


00:36:42.420 --> 00:36:43.820
And right now it's Mac only,


00:36:43.820 --> 00:36:47.060
but it's coming out for Windows pretty soon as well.


00:36:47.060 --> 00:36:50.100
And it's a privacy-focused database.


00:36:50.100 --> 00:36:52.700
- Web browser, yeah.


00:36:52.700 --> 00:36:55.180
- Yes, I just did database, yeah, web browser.


00:36:55.180 --> 00:36:59.180
But let me show you, I can even just show you real quick.


00:36:59.180 --> 00:37:00.020
Here it is.


00:37:00.020 --> 00:37:01.260
- But did you install it?


00:37:01.260 --> 00:37:02.420
Oh, of course I did.


00:37:02.420 --> 00:37:03.620
Why wouldn't I do that?


00:37:03.620 --> 00:37:05.420
Here it is.


00:37:05.420 --> 00:37:09.980
So we go over here, we can go to pythonbytes.fm.


00:37:09.980 --> 00:37:11.360
And if you pull this up,


00:37:11.360 --> 00:37:13.100
why not?


00:37:13.100 --> 00:37:14.380
Didn't add to stream, there we go.


00:37:14.380 --> 00:37:16.180
But come over here to Python bytes


00:37:16.180 --> 00:37:17.220
and you can click on this,


00:37:17.220 --> 00:37:18.780
it'll show you where all the tracking is.


00:37:18.780 --> 00:37:22.300
Like notice, no Google Analytics, no other tracking,


00:37:22.300 --> 00:37:25.140
but where shall we go?


00:37:25.140 --> 00:37:26.500
Look somewhere super egregious.


00:37:26.500 --> 00:37:28.380
We could go to cnn.com.


00:37:28.380 --> 00:37:33.180
Remember, this is using already Next DNS and other blocking.


00:37:33.180 --> 00:37:35.700
So a lot of the blocking happens before it gets here.


00:37:35.700 --> 00:37:37.540
But if you pull it up, it'll still say,


00:37:37.540 --> 00:37:39.860
look at all these different things we blocked.


00:37:39.860 --> 00:37:43.620
And here's the tracking, here's the advertising.


00:37:43.620 --> 00:37:46.700
Again, many of these are already blocked


00:37:46.700 --> 00:37:48.300
before it gets to the network.


00:37:48.300 --> 00:37:52.780
So it'd be 30 or 40, easy.


00:37:52.780 --> 00:37:54.700
So that's pretty cool.


00:37:54.700 --> 00:37:59.700
But I don't know, I'm not switching over to it yet.


00:37:59.700 --> 00:38:01.220
Hopefully they can do better.


00:38:01.220 --> 00:38:04.140
You can't do things like set your DNS servers


00:38:04.140 --> 00:38:05.940
for say DNS over HTTPS,


00:38:05.940 --> 00:38:08.660
so you can like have more control over that.


00:38:08.660 --> 00:38:10.700
There's a lot of things that are not there.


00:38:10.700 --> 00:38:12.660
It has a really cool way to play YouTube videos


00:38:12.660 --> 00:38:14.100
in like a private window.


00:38:14.100 --> 00:38:15.980
So if you go over to YouTube and you hit play,


00:38:15.980 --> 00:38:18.860
it'll, would you like to play this in a non-tracking,


00:38:18.860 --> 00:38:22.060
non-algorithmic feeding sort of way, which is great.


00:38:22.060 --> 00:38:24.140
But you know what you have over on YouTube?


00:38:24.140 --> 00:38:28.740
hotkeys, I can type F for full screen or T to like go wide theater mode or I for


00:38:28.740 --> 00:38:29.340
many player.


00:38:29.340 --> 00:38:31.540
It doesn't have any of those types of things.


00:38:31.540 --> 00:38:31.740
Right.


00:38:31.740 --> 00:38:36.300
And so it's like super, super early, but in that regard, I'm, I'm not really


00:38:36.300 --> 00:38:39.720
liked or recommending it, but it's awesome that they're trying.


00:38:39.720 --> 00:38:42.460
I liked duck that go, I'd like to see them make progress here and they have the


00:38:42.460 --> 00:38:43.860
fire button, which you can just.


00:38:43.860 --> 00:38:47.420
Um, clear all the stuff up and get a cool animation.


00:38:47.420 --> 00:38:49.460
What does that do?


00:38:49.460 --> 00:38:54.120
Just it erases, erases like all history and closes all tabs and, and everything.


00:38:54.120 --> 00:38:57.520
- Oh cool. - Yeah, anyway, there you go.


00:38:57.520 --> 00:38:59.920
I think I've got one more thing to share,


00:38:59.920 --> 00:39:02.000
but I've got to share my screen back


00:39:02.000 --> 00:39:05.040
because that nabbed it.


00:39:05.040 --> 00:39:08.880
Yeah, last one here before we get to a joke.


00:39:08.880 --> 00:39:11.160
So I want to give credit here,


00:39:11.160 --> 00:39:13.440
this one comes from Will Shanks.


00:39:13.440 --> 00:39:15.800
Apparently, remember when we talked about int,


00:39:15.800 --> 00:39:18.320
like I-N-T, parentheses, some string,


00:39:18.320 --> 00:39:21.240
like quote, one, two, three, close quote.


00:39:21.240 --> 00:39:24.960
that had a security patch in Python 3.10.7


00:39:24.960 --> 00:39:28.560
because if you send it the right malicious


00:39:28.560 --> 00:39:31.480
huge number string, it can get into like


00:39:31.480 --> 00:39:33.400
some denial of service where it like works


00:39:33.400 --> 00:39:35.440
for an insane amount of time trying to figure out


00:39:35.440 --> 00:39:37.040
what that number is by parsing it.


00:39:37.040 --> 00:39:39.240
Not just a big number but like a specifically


00:39:39.240 --> 00:39:41.560
bad big number I think was the problem.


00:39:41.560 --> 00:39:42.380
- Okay.


00:39:42.380 --> 00:39:44.480
- So in 3.10.7 they said, you know what,


00:39:44.480 --> 00:39:47.180
we're gonna limit the size of int to,


00:39:47.180 --> 00:39:51.640
I don't know, like 994 with 100 zeros


00:39:51.640 --> 00:39:53.200
or something after, right?


00:39:53.200 --> 00:39:54.480
At the time, you and I spoke about,


00:39:54.480 --> 00:39:57.780
remember when we did C and C++ and C#


00:39:57.780 --> 00:40:00.360
and we had to think about shorts


00:40:00.360 --> 00:40:04.560
and 32 bit integers and 64 bit integers


00:40:04.560 --> 00:40:07.520
and would it be bigger or smaller than 32,000?


00:40:07.520 --> 00:40:09.060
Do we need to worry?


00:40:09.060 --> 00:40:10.540
And like that number is so huge,


00:40:10.540 --> 00:40:11.960
like we probably don't think about it.


00:40:11.960 --> 00:40:15.560
Some people do, in particular, the scientific folks.


00:40:15.560 --> 00:40:18.240
So over on conda forage, there's a big conversation


00:40:18.240 --> 00:40:19.640
about what to do here.


00:40:19.640 --> 00:40:21.640
Like, should we adopt this?


00:40:21.640 --> 00:40:24.000
Should we say this is like too much of a problem?


00:40:24.000 --> 00:40:25.860
I don't really know how they're gonna avoid


00:40:25.860 --> 00:40:27.520
eventually adopting it.


00:40:27.520 --> 00:40:28.360
- Yeah.


00:40:28.360 --> 00:40:31.240
- Because like every version of Python going forward


00:40:31.240 --> 00:40:32.720
is gonna have this in it, right?


00:40:32.720 --> 00:40:36.120
They don't wanna eventually like permanently be held back.


00:40:36.120 --> 00:40:40.040
But on the other side, the, what's it Ubuntu?


00:40:40.040 --> 00:40:41.040
Let me look.


00:40:41.040 --> 00:40:44.560
Yeah, Ubuntu has decided to patch out that int limit.


00:40:44.560 --> 00:40:49.000
So basically unravel that security fix and preserve the behavior,


00:40:49.000 --> 00:40:54.360
previous behavior, thinking that the risk is low of getting an integer like that,


00:40:54.360 --> 00:40:56.360
and it's not worth breaking compatibility for.


00:40:56.360 --> 00:40:56.960
>> Okay.


00:40:56.960 --> 00:40:59.600
>> So apparently, int open parentheses,


00:40:59.600 --> 00:41:03.080
string close parentheses is still controversial.


00:41:03.080 --> 00:41:04.520
Who knew? Not me.


00:41:04.520 --> 00:41:04.880
>> Yeah.


00:41:04.880 --> 00:41:07.960
>> Not me. Yeah. All right.


00:41:07.960 --> 00:41:13.360
Let's see. Robert Robertson asks,


00:41:13.360 --> 00:41:18.560
In Python Bytes episode 311, is that going to be a special episode covering Python 311?


00:41:18.560 --> 00:41:22.360
I don't know, but we got five weeks to figure it out and it's a great idea, Robert.


00:41:22.360 --> 00:41:23.360
Thank you.


00:41:23.360 --> 00:41:24.360
Sure.


00:41:24.360 --> 00:41:25.360
Good idea.


00:41:25.360 --> 00:41:26.360
I didn't see that coming.


00:41:26.360 --> 00:41:27.360
Yeah, we should have coordinated with the Python folks.


00:41:27.360 --> 00:41:31.360
We could have just released like five really short episodes like, "Still waiting.


00:41:31.360 --> 00:41:34.360
Nope, can skip to the next one."


00:41:34.360 --> 00:41:35.360
All right, well, that's all I got.


00:41:35.360 --> 00:41:36.360
That's all I got for extras.


00:41:36.360 --> 00:41:37.360
Okay.


00:41:37.360 --> 00:41:40.860
- Well, one of the things I want to extra from the audience,


00:41:40.860 --> 00:41:46.520
Dean Langsom, Piedata TLV.


00:41:46.520 --> 00:41:47.360
- Tel Aviv.


00:41:47.360 --> 00:41:49.480
- Tel Aviv, is on December 13th,


00:41:49.480 --> 00:41:52.640
and they have tickets up for sale, and there's a code.


00:41:52.640 --> 00:41:57.000
So if you use discount code, B-Y-T-E-S,


00:41:57.000 --> 00:41:59.120
you get a discount, I guess.


00:41:59.120 --> 00:42:00.440
So that's nice.


00:42:00.440 --> 00:42:01.640
- Awesome.


00:42:01.640 --> 00:42:03.320
Yeah, good luck with the conference there, Dean.


00:42:03.320 --> 00:42:06.200
And lovely city to visit if you get a chance to.


00:42:06.200 --> 00:42:07.280
- Okay, cool.


00:42:07.280 --> 00:42:09.920
How about something funny?


00:42:09.920 --> 00:42:11.120
- Yes.


00:42:11.120 --> 00:42:11.960
All right.


00:42:11.960 --> 00:42:14.160
- Besides my voice.


00:42:14.160 --> 00:42:16.800
- Here we go.


00:42:16.800 --> 00:42:18.120
See if I can open the image.


00:42:18.120 --> 00:42:19.600
It's glorious.


00:42:19.600 --> 00:42:21.420
So Brian, I was thinking about getting a new monitor.


00:42:21.420 --> 00:42:22.260
I have a fine monitor.


00:42:22.260 --> 00:42:24.640
It's like a 32 inch 4K monitor,


00:42:24.640 --> 00:42:26.680
but I want something kind of widescreen.


00:42:26.680 --> 00:42:30.920
There is this cool, like horizontal resolution equivalent


00:42:30.920 --> 00:42:34.600
in 4K, but it was either 40 or 49 inches wide.


00:42:34.600 --> 00:42:35.440
It was epic.


00:42:35.440 --> 00:42:36.500
I didn't get it.


00:42:36.500 --> 00:42:41.500
So, I didn't get it 'cause I thought the curved monitor


00:42:41.500 --> 00:42:44.020
might be like parabolic echoes


00:42:44.020 --> 00:42:46.200
for all the work that we do here.


00:42:46.200 --> 00:42:48.540
And I also didn't get it because, well, it's expensive


00:42:48.540 --> 00:42:50.420
and I don't know if I can get it into the resolutions


00:42:50.420 --> 00:42:52.340
I want for recordings and things like that.


00:42:52.340 --> 00:42:56.820
But here's somebody who posted a picture.


00:42:56.820 --> 00:42:58.640
It says, "Develop in Java be like,"


00:42:58.640 --> 00:43:01.340
and it's got, I think that's a 49 inch


00:43:01.340 --> 00:43:04.420
curved widescreen monitor, small font.


00:43:05.260 --> 00:43:07.780
It's edge to edge code.


00:43:07.780 --> 00:43:09.740
There's no PEP 8 ideas on this, right?


00:43:09.740 --> 00:43:10.500
Look at that.


00:43:10.500 --> 00:43:10.940
>> Yeah.


00:43:10.940 --> 00:43:11.980
>> Is that nuts?


00:43:11.980 --> 00:43:13.820
>> That is nuts. Yeah.


00:43:13.820 --> 00:43:16.260
>> Yeah. The subtitles be like,


00:43:16.260 --> 00:43:18.380
I heard you like gooders,


00:43:18.380 --> 00:43:21.740
which apparently no properties and all that.


00:43:21.740 --> 00:43:22.260
>> Yeah.


00:43:22.260 --> 00:43:24.940
>> But anyway, I just thought you all might enjoy


00:43:24.940 --> 00:43:28.420
just checking out this picture of an insane bit of code.


00:43:28.420 --> 00:43:30.220
Something's gone wrong.


00:43:30.220 --> 00:43:34.420
When you actually need the full width of a 49-inch monitor.


00:43:34.420 --> 00:43:36.700
I was thinking of putting a couple of windows side by side.


00:43:36.700 --> 00:43:37.820
I don't know.


00:43:37.820 --> 00:43:38.740
Call me crazy.


00:43:38.740 --> 00:43:40.380
I didn't have measured mine.


00:43:40.380 --> 00:43:43.180
I think mine's like, I'll have to measure it.


00:43:43.180 --> 00:43:45.140
I think it's like 30 something.


00:43:45.140 --> 00:43:45.860
I don't know.


00:43:45.860 --> 00:43:52.020
Um, but I, it's got a bit of a curve, but the, I have to, I, it's painful to watch


00:43:52.020 --> 00:43:56.660
that and I'm not going to throw rocks at this glass house because, I'm a C


00:43:56.660 --> 00:44:01.700
plus plus developer and we've got a few pieces of gnarly code that have a big,


00:44:01.700 --> 00:44:02.580
long lines.


00:44:03.260 --> 00:44:08.660
>> Yeah, for the multiple inheritance, multiple template.


00:44:08.660 --> 00:44:13.980
>> Yeah, and also just bad naming sometimes.


00:44:13.980 --> 00:44:17.460
And that happens in Java too, you get big long names.


00:44:17.460 --> 00:44:20.180
>> Well, the problem is you got to get a name something and


00:44:20.180 --> 00:44:22.740
then you got to have a factory something.


00:44:22.740 --> 00:44:25.540
And you got to have an iFactory interface of that something.


00:44:25.540 --> 00:44:27.580
And you got to mock it out.


00:44:27.580 --> 00:44:30.380
Anyway, it gets complicated and the names get long, I understand.


00:44:30.380 --> 00:44:34.580
>> You have to get a mock factory and a name factory and a factory factory.


00:44:34.580 --> 00:44:37.060
>> That's right. If there's not,


00:44:37.060 --> 00:44:39.860
the audience has identified


00:44:39.860 --> 00:44:44.940
the coding style here as a PEP infinity instead of PEP 8.


00:44:44.940 --> 00:44:46.380
That's PEP infinity code.


00:44:46.380 --> 00:44:47.940
>> Pep infinity, yeah.


00:44:47.940 --> 00:44:49.420
>> Well, this was infinitely fun.


00:44:49.420 --> 00:44:51.700
Thank you, Brian, and thanks everyone for being here.


00:44:51.700 --> 00:44:54.660
>> Thank you. I'll talk to you later. Bye.

