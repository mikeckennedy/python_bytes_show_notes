
00:00:00.000 --> 00:00:06.020
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds


00:00:06.020 --> 00:00:09.200
This is Python Bytes episode 43


00:00:09.200 --> 00:00:11.720
recorded on September 13th


00:00:11.720 --> 00:00:18.280
2017 and I'm Michael Kennedy and I'm Brian Okken. Hey, it's great to be with you guys good to be with you Brian


00:00:18.280 --> 00:00:21.320
We have a bunch of really cool stuff lined up


00:00:21.320 --> 00:00:26.160
Like there's a few things that really surprised me and maybe even inspired me to go create this project


00:00:26.160 --> 00:00:28.000
that we were just chatting about before we hit record.


00:00:28.000 --> 00:00:30.240
So very, very cool stuff.


00:00:30.240 --> 00:00:33.160
But before we get to it, let's just say thank you to Rollbar.


00:00:33.160 --> 00:00:34.640
Those guys are sponsoring the show.


00:00:34.640 --> 00:00:37.760
You check out their offers at pythonbytes.fm/rollbar,


00:00:37.760 --> 00:00:39.400
and we'll get to them later.


00:00:39.400 --> 00:00:41.240
I want to talk about taking the future


00:00:41.240 --> 00:00:44.800
and sending it into the past, like Marty McFly style.


00:00:44.800 --> 00:00:45.640
What do you think?


00:00:45.640 --> 00:00:47.040
- Yeah.


00:00:47.040 --> 00:00:51.600
Yeah, this popped up recently, just this last week.


00:00:51.600 --> 00:00:53.400
And I'm not sure what the impetus was,


00:00:53.400 --> 00:00:56.400
but it is future f-strings.


00:00:56.400 --> 00:00:58.120
It's a project.


00:00:58.120 --> 00:01:01.360
You could just do pip install future-fstrings.


00:01:01.360 --> 00:01:05.160
And then you've got a little bit of a--


00:01:05.160 --> 00:01:08.320
it isn't a library that you include.


00:01:08.320 --> 00:01:09.520
It changes the encoding.


00:01:09.520 --> 00:01:11.840
So I'll just jump to the chase.


00:01:11.840 --> 00:01:16.320
It's a backport of f-strings to even down to Python 2.7.


00:01:16.320 --> 00:01:18.560
And I've tried it in 2.7.


00:01:18.560 --> 00:01:20.440
I haven't tried it in anything else.


00:01:20.440 --> 00:01:24.080
but it is kind of fun to be able to play with f-strings everywhere.


00:01:24.080 --> 00:01:28.800
So I had very mixed thoughts about this when you told me about this project.


00:01:28.800 --> 00:01:35.080
On one hand, I look at it like, you know, you're taking one of the really amazing and smooth features


00:01:35.080 --> 00:01:39.160
of Python 3.6 and making it available in legacy Python,


00:01:39.160 --> 00:01:43.600
which is kind of like, do we really want to like encourage that sort of thing?


00:01:43.600 --> 00:01:49.360
But at the same time, I feel like this also lets you, as you're migrating your code,


00:01:49.360 --> 00:01:53.380
move to the latest greatest syntax in Python 2.


00:01:53.380 --> 00:01:56.520
But then when you actually make the switch, you're not going to have to go like, well,


00:01:56.520 --> 00:02:00.120
we used format because that was the only that was the best option in Python 2.


00:02:00.120 --> 00:02:02.480
But now we've got f-strings.


00:02:02.480 --> 00:02:04.320
And so I feel like that that's really cool.


00:02:04.320 --> 00:02:07.680
The other area where I think it's great is Python 3.


00:02:07.680 --> 00:02:10.240
There's plenty of people running Python 3.5.


00:02:10.240 --> 00:02:14.600
That's the default on Ubuntu right now and things like that, that don't have f-strings.


00:02:14.600 --> 00:02:18.760
I've decided after further contemplation that this is a really cool project and I want to


00:02:18.760 --> 00:02:22.960
check it out. So tell people what f-strings are, right? I mean most people


00:02:22.960 --> 00:02:29.560
maybe know but what is what's this thing this f-string thing? Well it's um so if


00:02:29.560 --> 00:02:34.280
you're familiar with the format like the format part that you could be I don't


00:02:34.280 --> 00:02:37.720
know how long ago you start using that I think that's available in 2.7. Yeah I


00:02:37.720 --> 00:02:40.680
think so too. In the string that you're printing you can like leave little


00:02:40.680 --> 00:02:45.020
brackets to to show where you're gonna insert something and then you say like


00:02:45.020 --> 00:02:48.820
dot format and then all the things that you're going to put into the string.


00:02:48.820 --> 00:02:54.220
In f-strings, you just put an F before the string and then within your brackets,


00:02:54.220 --> 00:02:56.700
you just put the variable name for whatever you're going to put in there


00:02:56.700 --> 00:02:59.020
or any expression can go in there.


00:02:59.020 --> 00:02:59.340
Right.


00:02:59.340 --> 00:03:04.380
So you could say like F quote, hello, curly thing dot upper and like uppercase


00:03:04.380 --> 00:03:07.020
the thing just in that expression or something like that, right?


00:03:07.020 --> 00:03:07.340
Yeah.


00:03:07.340 --> 00:03:07.940
Yeah.


00:03:07.940 --> 00:03:08.660
That's really cool.


00:03:08.660 --> 00:03:09.300
Yeah.


00:03:09.300 --> 00:03:12.860
At first I was like, I don't know if I like it, but once you start using F


00:03:12.860 --> 00:03:14.460
strings, you can't go back.


00:03:14.460 --> 00:03:16.660
That's really one of the reasons why I like this project is


00:03:16.660 --> 00:03:20.260
because I usually use Python 3.6,


00:03:20.260 --> 00:03:25.060
but there are times where I have to write some stuff in 3.5


00:03:25.060 --> 00:03:27.820
or 2.7 or something, and I don't want to go back.


00:03:27.820 --> 00:03:28.380
Yeah, I know.


00:03:28.380 --> 00:03:28.900
I hear you.


00:03:28.900 --> 00:03:29.620
That's great.


00:03:29.620 --> 00:03:31.360
I'm going to put a lot of tests around it,


00:03:31.360 --> 00:03:33.180
so I'm not going to rely on this yet,


00:03:33.180 --> 00:03:36.460
because I don't know if it's really ready for primetime


00:03:36.460 --> 00:03:37.180
for everywhere.


00:03:37.180 --> 00:03:38.900
So I would say use caution.


00:03:38.900 --> 00:03:41.580
Dip into this slowly if you're going to use it.


00:03:41.580 --> 00:03:43.380
But it's a fun thing.


00:03:43.380 --> 00:03:46.420
I'm not sure I like how it's doing it, though.


00:03:46.420 --> 00:03:50.180
It's doing it in an interesting and odd way, yeah.


00:03:50.180 --> 00:03:51.780
I don't know how else it would do it.


00:03:51.780 --> 00:03:54.340
But it's interrupting the encoding.


00:03:54.340 --> 00:03:56.900
Yeah, it installs a separate encoder.


00:03:56.900 --> 00:04:01.220
So it extends the UTF-8, I think, the UTF-8 encoding


00:04:01.220 --> 00:04:02.820
to also do this.


00:04:02.820 --> 00:04:05.620
So if you're not using UTF-8, I don't know.


00:04:05.620 --> 00:04:08.420
Maybe you could hack it to do something like you're using.


00:04:08.420 --> 00:04:09.660
Yeah, yeah, it's pretty cool.


00:04:09.660 --> 00:04:14.520
You put a little encoding flag at the top and you install a special encoder and off


00:04:14.520 --> 00:04:15.520
it goes.


00:04:15.520 --> 00:04:16.520
Pretty interesting.


00:04:16.520 --> 00:04:17.520
All right.


00:04:17.520 --> 00:04:21.920
I want to stick with this Python 3.6 feature angle, even though that's bringing that stuff


00:04:21.920 --> 00:04:23.600
to other versions of Python.


00:04:23.600 --> 00:04:27.440
I want to talk about the fun of reinvention.


00:04:27.440 --> 00:04:32.380
This was a really amazing presentation done by David Beasley.


00:04:32.380 --> 00:04:37.260
It's done in the style of some of his other presentations, and in my mind, the way technical


00:04:37.260 --> 00:04:38.840
presentations should be done.


00:04:38.840 --> 00:04:43.440
You should be up there writing code, showing how things work, not just slides and pictures


00:04:43.440 --> 00:04:47.300
and stuff, but showing things.


00:04:47.300 --> 00:04:50.720
What he shows though is insane and incredible.


00:04:50.720 --> 00:04:52.520
Your mind will probably explode if you see this.


00:04:52.520 --> 00:04:57.480
You'll definitely come away with a greater appreciation for Python 3.6.


00:04:57.480 --> 00:05:04.280
What he does is he goes and builds upon some of the new 3.6 features that are below the


00:05:04.280 --> 00:05:07.840
surface that a lot of people wouldn't even know about, like hooking into when a class


00:05:07.840 --> 00:05:14.080
gets defined. So you can basically redefine what that means and things like that. So for example,


00:05:14.080 --> 00:05:17.760
he says, Well, let's talk about type ends. These type ends are cool, but they don't do anything,


00:05:17.760 --> 00:05:23.040
we can add these constraints and assertions inside of our code. And that does something,


00:05:23.040 --> 00:05:29.120
but we can't really check that in the tooling. So what if we could rewrite, create this little


00:05:29.120 --> 00:05:35.120
framework using inheritance and all sorts of other stuff that lets us add these constraints as type


00:05:35.120 --> 00:05:39.280
hints and then they're enforced at runtime automatically. It's pretty amazing.


00:05:39.280 --> 00:05:43.080
That's incredible. Yeah. Yeah. So whether you think it's a good idea or a bad idea


00:05:43.080 --> 00:05:46.720
to do that, the fact that you can do that is really really cool. So you can


00:05:46.720 --> 00:05:51.280
basically set up a function and as like a type hint constraint you can say and


00:05:51.280 --> 00:05:58.560
this is a positive integer between 0 and 200 and it will actually check that. It's


00:05:58.560 --> 00:06:02.840
really something. But mostly it's an amazing look inside. Yeah. It's an amazing


00:06:02.840 --> 00:06:07.680
look inside of Python 3.6 and down to the low level stuff.


00:06:07.680 --> 00:06:12.680
So Brian, knock knock, who's there?


00:06:12.680 --> 00:06:13.640
Yeah, I am.


00:06:13.640 --> 00:06:15.360
Sound recognition is there.


00:06:15.360 --> 00:06:16.720
Yeah, sound recognition.


00:06:16.720 --> 00:06:20.120
So there's an interesting article called Sound Pattern


00:06:20.120 --> 00:06:21.920
Recognition with Python.


00:06:21.920 --> 00:06:24.920
And I really liked just the--


00:06:24.920 --> 00:06:26.720
I didn't know you could do this with SciPy.


00:06:26.720 --> 00:06:29.880
So there's apparently part of SciPy.


00:06:29.880 --> 00:06:32.680
There's scipy.io.wav file.


00:06:32.680 --> 00:06:36.800
and I'm not sure if there's other types you can do, use.


00:06:36.800 --> 00:06:41.200
But this article uses SciPy to read a wave file


00:06:41.200 --> 00:06:46.200
and then just has it as data, like an array of numbers,


00:06:46.200 --> 00:06:47.720
and then does some math on it.


00:06:47.720 --> 00:06:50.160
And it does, this particular one is assuming


00:06:50.160 --> 00:06:53.140
that you've got some wave files that have NOX in them


00:06:53.140 --> 00:06:56.000
and trying to detect where the NOX are


00:06:56.000 --> 00:06:57.400
and how far away they are.


00:06:57.400 --> 00:07:01.000
And just some basic little logic to try to figure out,


00:07:01.000 --> 00:07:02.960
Yeah, like I said, where the peaks are.


00:07:02.960 --> 00:07:04.520
I think the author noticed that you


00:07:04.520 --> 00:07:07.560
need to have some minimum values for how you tell where


00:07:07.560 --> 00:07:10.040
the peaks are, and then some distance between them


00:07:10.040 --> 00:07:13.120
so you don't have like ringing within one peak.


00:07:13.120 --> 00:07:14.440
I like it because it's kind of a--


00:07:14.440 --> 00:07:17.320
I think it would extend easily to do--


00:07:17.320 --> 00:07:18.780
I'd like to take it and run with it


00:07:18.780 --> 00:07:21.960
and try to do some basic oscilloscope measurements


00:07:21.960 --> 00:07:23.720
with this kind of a thing.


00:07:23.720 --> 00:07:24.360
That'd be fun.


00:07:24.360 --> 00:07:25.480
Yeah, it'd be super fun.


00:07:25.480 --> 00:07:26.760
It's really accessible.


00:07:26.760 --> 00:07:29.240
Like the actual code to figure out the NOX


00:07:29.240 --> 00:07:31.160
to process the WAV file.


00:07:31.160 --> 00:07:33.500
It's really small and approachable.


00:07:33.500 --> 00:07:37.160
And to me, what I thought of when I heard this was, "Oh, you could build something that


00:07:37.160 --> 00:07:38.560
is actually kind of smart."


00:07:38.560 --> 00:07:42.320
So it shows you how to identify knocks, right?


00:07:42.320 --> 00:07:46.960
And you should be able to identify a door jiggling, a key noise.


00:07:46.960 --> 00:07:51.140
You should be able to identify a few of these really distinct patterns.


00:07:51.140 --> 00:07:56.480
And if you could say, identify what does a door jiggle sound like, what does a knock,


00:07:56.480 --> 00:07:57.700
What is a doorbell?


00:07:57.700 --> 00:07:59.220
What does a key sound like?


00:07:59.220 --> 00:08:03.260
You could put a little raspberry pie just by your front door that says, "Someone's home.


00:08:03.260 --> 00:08:04.460
Someone unlocked the door.


00:08:04.460 --> 00:08:05.460
Someone's knocking."


00:08:05.460 --> 00:08:07.100
You know, just cool stuff.


00:08:07.100 --> 00:08:08.100
Wouldn't that be...


00:08:08.100 --> 00:08:10.300
I mean, it seems like that's a weekend project with this.


00:08:10.300 --> 00:08:11.300
It doesn't seem major.


00:08:11.300 --> 00:08:12.620
Yeah, that would be fun.


00:08:12.620 --> 00:08:16.860
You could hook it up with Twilio and get texts when somebody's knocking at your door.


00:08:16.860 --> 00:08:20.140
Right, hook it up with a camera to take a picture of whoever's out there, see what they're


00:08:20.140 --> 00:08:21.140
doing, right?


00:08:21.140 --> 00:08:22.140
Yeah.


00:08:22.140 --> 00:08:23.140
Yeah.


00:08:23.140 --> 00:08:24.140
Send yourself a note, "Hey, kids came home, right?


00:08:24.140 --> 00:08:26.140
They unlocked the door at three o'clock when school's out," or whatever.


00:08:26.140 --> 00:08:27.140
That'd be fun.


00:08:27.140 --> 00:08:28.140
It sure would.


00:08:28.140 --> 00:08:29.140
All right.


00:08:29.140 --> 00:08:31.420
So I think people should take this idea and run with it.


00:08:31.420 --> 00:08:36.980
And if they do, they should send us a message or even better, go to pythonbytes.fm/43 and


00:08:36.980 --> 00:08:39.580
leave a comment at the bottom about what they created.


00:08:39.580 --> 00:08:40.580
Yeah, definitely.


00:08:40.580 --> 00:08:41.580
Definitely.


00:08:41.580 --> 00:08:45.100
Or even better, they could write a blog post and then email that to us and we'll highlight


00:08:45.100 --> 00:08:46.100
it on the show.


00:08:46.100 --> 00:08:47.100
Yeah, maybe we'll even cover it.


00:08:47.100 --> 00:08:48.100
That'd be awesome.


00:08:48.100 --> 00:08:49.100
Yeah.


00:08:49.100 --> 00:08:50.100
Yeah.


00:08:50.100 --> 00:08:51.100
Cool.


00:08:51.100 --> 00:08:52.980
So before we get to the next item, which is sort of mind blowing, I want to talk about


00:08:52.980 --> 00:08:53.980
roll bar.


00:08:53.980 --> 00:08:57.060
We talk about roll bar a lot probably, but that's because they're great.


00:08:57.060 --> 00:09:02.020
Basically, if you run any sort of web app, you should have real-time error monitoring


00:09:02.020 --> 00:09:03.020
and reporting.


00:09:03.020 --> 00:09:07.700
If something goes wrong with the website, for example, Python bytes.fm, we'll get a


00:09:07.700 --> 00:09:08.700
notification.


00:09:08.700 --> 00:09:10.500
It could be in Slack, it could be on our phone.


00:09:10.500 --> 00:09:12.480
It'll have all the details.


00:09:12.480 --> 00:09:15.180
This person went to this URL in this situation.


00:09:15.180 --> 00:09:19.880
Here's the variables they passed to the function that caused a crash, things like that.


00:09:19.880 --> 00:09:25.620
If you want to get this for your site or application, just go to pythonbytes.fm/rollbar and check


00:09:25.620 --> 00:09:27.500
it out.


00:09:27.500 --> 00:09:33.840
We've talked a lot about async stuff, async both on the server and on the client.


00:09:33.840 --> 00:09:39.880
It's pretty mind-blowing stuff, but it turns out that all changes to software, there's


00:09:39.880 --> 00:09:45.160
cascading consequences of adopting a new model or trying something new.


00:09:45.160 --> 00:09:52.360
One of the cascading changes is in many of the high-performance async processing loops,


00:09:52.360 --> 00:09:57.360
I'm thinking async I/O, but also UV loop, which is a really super fast, powerful one.


00:09:57.360 --> 00:10:02.700
Things like Sanic, I think Sanic is based upon it, the web framework and so on.


00:10:02.700 --> 00:10:10.640
Those things are ultra fast because they rely on async I/O, but async I/O doesn't use threads.


00:10:10.640 --> 00:10:15.000
That means thread local storage doesn't have any meaning anymore when all of these concurrent


00:10:15.000 --> 00:10:16.880
operations are running on the same thread.


00:10:16.880 --> 00:10:17.880
Okay.


00:10:17.880 --> 00:10:18.880
All right.


00:10:18.880 --> 00:10:22.600
So like if I was running a website, I might store into thread local storage like the cookies


00:10:22.600 --> 00:10:24.280
or the authentication.


00:10:24.280 --> 00:10:26.360
And then later I might ask for it back.


00:10:26.360 --> 00:10:30.440
But that could be changed because you have a blocking IO that released the thread that


00:10:30.440 --> 00:10:32.680
somebody else then wrote their cookie to, right?


00:10:32.680 --> 00:10:33.680
So it's kind of like crazy.


00:10:33.680 --> 00:10:37.400
And there's also another really interesting places like Decimals.


00:10:37.400 --> 00:10:42.560
Working with Decimals does this NumPy error state, warnings.catchWarnings, profiling,


00:10:42.560 --> 00:10:46.160
tracing, all these things use this kind of stuff, right?


00:10:46.160 --> 00:10:49.460
But it doesn't work in this async/await world.


00:10:49.460 --> 00:10:54.760
So we have a new PEP, PEP 550, that defines a new execution context.


00:10:54.760 --> 00:10:58.160
And this is from the guys at magic.io who created UV loops.


00:10:58.160 --> 00:11:03.240
So like their motivation is really obvious, like they want UV loop to work.


00:11:03.240 --> 00:11:04.980
And this is kind of something in a way.


00:11:04.980 --> 00:11:12.980
So the PEP adds a new generic mechanism for ensuring consistent access to non-local state


00:11:12.980 --> 00:11:16.580
in the context of out-of-order execution such as generators and coroutines.


00:11:16.580 --> 00:11:17.580
Wow.


00:11:17.580 --> 00:11:18.580
It's pretty fascinating, right?


00:11:18.580 --> 00:11:19.900
Yeah, it's very fascinating.


00:11:19.900 --> 00:11:21.180
I hadn't even realized that.


00:11:21.180 --> 00:11:24.300
I mean, you think it through, obviously, it's a problem, but I hadn't realized like, oh


00:11:24.300 --> 00:11:27.500
my gosh, like some of these like low-level things are just going to be broken.


00:11:27.500 --> 00:11:30.700
Like how, for example, state is processed in a web request.


00:11:30.700 --> 00:11:33.860
I'll be very interested to watch this and see where it goes.


00:11:33.860 --> 00:11:37.420
- Yeah, so maybe it makes it into Python 3.7, maybe not,


00:11:37.420 --> 00:11:39.180
but it's kind of cool that this is not just like,


00:11:39.180 --> 00:11:40.900
oh, we made UV work properly,


00:11:40.900 --> 00:11:43.940
but we're going to make all of Python work properly.


00:11:43.940 --> 00:11:46.140
So they've got some really nice examples


00:11:46.140 --> 00:11:47.940
on the article we're linking to.


00:11:47.940 --> 00:11:49.420
- That's really cool that they did it


00:11:49.420 --> 00:11:51.340
instead of just trying to hack their own way.


00:11:51.340 --> 00:11:52.500
- Yeah, for sure.


00:11:52.500 --> 00:11:55.340
Speaking of threads and processing and all that.


00:11:55.340 --> 00:11:57.560
- I often work in single threaded


00:11:57.560 --> 00:12:00.260
or single process sort of tasks.


00:12:00.260 --> 00:12:02.140
I really liked this article called


00:12:02.140 --> 00:12:08.220
intro to threads and processes in Python. It's a very accessible beginner's guide to parallel


00:12:08.220 --> 00:12:12.300
programming and really kind of what's the difference? Where would you use threads? Where


00:12:12.300 --> 00:12:19.260
would you use processes? And it's even got pictures with a little some algorithms to see to show how


00:12:19.260 --> 00:12:23.260
like if you're certain kind of a job. I can't remember what the job is that he's doing.


00:12:23.260 --> 00:12:29.820
He's doing some data science project for based on Amazon and trying to analyze a bunch of different


00:12:29.820 --> 00:12:34.260
stuff from space and so he's got to run tons of algorithms and tweak them with


00:12:34.260 --> 00:12:39.060
different parameters and stuff like that. It shows like basically if you use a one


00:12:39.060 --> 00:12:43.340
thread, two threads, or four threads and then the same with processes how it's


00:12:43.340 --> 00:12:48.460
affected with running times and you can watch to see that things are running in


00:12:48.460 --> 00:12:52.260
parallel. A good use of a little simple diagrams too that's cool. Yeah the


00:12:52.260 --> 00:12:56.500
pictures are great. The rundown is, conclusion at the end is if you're


00:12:56.500 --> 00:13:01.820
waiting on I/O for something, threads are just fine. And if you are CPU heavy, then


00:13:01.820 --> 00:13:04.000
you want to go with multi-processing.


00:13:04.000 --> 00:13:08.500
Yep, until the Gillectomy happens, which who knows if that will, but until then, this is


00:13:08.500 --> 00:13:09.900
definitely a good introduction to it.


00:13:09.900 --> 00:13:13.340
Yeah, and I'm actually, I'm one of the, I don't know, I think there's probably a lot


00:13:13.340 --> 00:13:19.260
of people, but having the Gill doesn't really bother me. It does simplify how you program.


00:13:19.260 --> 00:13:20.900
I don't think it's that terrible.


00:13:20.900 --> 00:13:25.340
Yeah, it's, you know, it's in the extreme cases. I think the main group of people who


00:13:25.340 --> 00:13:29.980
suffer under the gill are those doing computational CPU computational work.


00:13:29.980 --> 00:13:33.340
Outside of that you're mostly okay.


00:13:33.340 --> 00:13:36.780
Okay. Yeah. So in that like async and await and stuff like that I'm going to


00:13:36.780 --> 00:13:42.780
expose my knowledge of this stuff. So async and await is that dealt with


00:13:42.780 --> 00:13:49.340
with multiple threads then? No it's all one thread but it has a mechanism to say


00:13:49.340 --> 00:14:01.340
"Anytime you hit blocking I/O, go put this part of the code to sleep and allow it to run another task, another thing, until it hits blocking I/O."


00:14:01.340 --> 00:14:06.340
The idea is most of the time you're waiting on databases or networks or something like that.


00:14:06.340 --> 00:14:12.340
Then you wake up for a second, you do a little processing, and then you go back to wait on another network or database or web service.


00:14:12.340 --> 00:14:17.340
As long as that's the kind of stuff you're waiting on, the gill is not a problem because it gets released.


00:14:17.340 --> 00:14:21.720
but if you're like trying to compute Pi with a, you know, power series or something,


00:14:21.720 --> 00:14:25.920
something like that, then it would just, it would stop and the async wouldn't help you with that.


00:14:25.920 --> 00:14:32.820
Yeah, I just wanted to, so the async and awaiter is going to use, it's going to be in the same sort of family


00:14:32.820 --> 00:14:34.660
as when threads would be good for you.


00:14:34.660 --> 00:14:38.820
Yes, yeah, it's in exactly this similar spot, yeah, but just more efficiently.


00:14:38.820 --> 00:14:45.020
So let's talk about another low-level thing and I found this, I think it maybe even was recommended by a listener,


00:14:45.020 --> 00:14:49.300
some low-level part of it, and then I found the whole thing.


00:14:49.300 --> 00:14:52.660
One of the problems that we can have when we're doing unit testing


00:14:52.660 --> 00:14:55.140
is working with files, right? That can be a serious pain.


00:14:55.140 --> 00:14:55.640
Yeah.


00:14:55.640 --> 00:15:00.740
Yeah, and if you want to save your files to, like, say, user storage,


00:15:00.740 --> 00:15:05.780
or you want to process different types of files, like zip files, regular files,


00:15:05.780 --> 00:15:08.280
these are all sorts of pains that you have to deal with.


00:15:08.280 --> 00:15:12.920
But there's this really cool project called Alternative File Systems for Python


00:15:12.920 --> 00:15:16.480
that makes this all seamless.


00:15:16.480 --> 00:15:23.280
The idea is you can work with files and directories in zip archives, in memory, on the cloud,


00:15:23.280 --> 00:15:25.160
or just as easy as if they're on your hard drive.


00:15:25.160 --> 00:15:31.360
They give some examples in this project saying you could write your code now just with open,


00:15:31.360 --> 00:15:34.720
you know, such and such as fin and start working with it.


00:15:34.720 --> 00:15:36.780
Then you decide what that open means.


00:15:36.780 --> 00:15:38.640
Does that open mean normal files?


00:15:38.640 --> 00:15:41.200
Does that open mean something on S3?


00:15:41.200 --> 00:15:42.480
Things like that.


00:15:42.480 --> 00:15:47.260
You can unit test your code, you can have in-memory files, but open reads and writes


00:15:47.260 --> 00:15:48.960
to those in-memory files.


00:15:48.960 --> 00:15:55.520
You can upload your files to like S3 or OneDrive or something like that by just writing to


00:15:55.520 --> 00:15:59.440
that folder, you know, in that file system and all sorts of stuff like that.


00:15:59.440 --> 00:16:03.960
Yeah, so the memory file system or the temporary file system that they have would be great


00:16:03.960 --> 00:16:06.960
for like parallelizing tests and things like that.


00:16:06.960 --> 00:16:08.840
Right, keeps it all separate and isolated.


00:16:08.840 --> 00:16:12.560
So some of the back ends they have is they have application data.


00:16:12.560 --> 00:16:16.780
This is like the special user data locations in various operating systems.


00:16:16.780 --> 00:16:19.300
They have Amazon S3 file systems.


00:16:19.300 --> 00:16:21.980
They have FTP memory.


00:16:21.980 --> 00:16:23.700
Let's see what else that's pretty cool.


00:16:23.700 --> 00:16:27.300
They've got zip for reading and writing zip files.


00:16:27.300 --> 00:16:32.420
And they also have like SSH file systems for writing to remote servers, all kinds of stuff.


00:16:32.420 --> 00:16:35.340
And even tar files, good old tar files.


00:16:35.340 --> 00:16:36.340
Good old tar files.


00:16:36.340 --> 00:16:38.180
Yeah, you can just width open on those babies.


00:16:38.180 --> 00:16:43.180
Yeah, so this is really pretty interesting and I haven't tried it yet, but it looks quite


00:16:43.180 --> 00:16:46.900
promising and it's extensible so you can add more of these backends if that makes sense


00:16:46.900 --> 00:16:47.900
for you.


00:16:47.900 --> 00:16:48.900
That's awesome.


00:16:48.900 --> 00:16:49.900
I actually think this is pretty fun.


00:16:49.900 --> 00:16:50.900
I got to play with this.


00:16:50.900 --> 00:16:52.100
Yeah, yeah, me too.


00:16:52.100 --> 00:16:53.980
So definitely check that out.


00:16:53.980 --> 00:16:56.700
And Brian, that's it for our six items for the week.


00:16:56.700 --> 00:16:59.540
That's incredible that we've already done.


00:16:59.540 --> 00:17:01.020
I know.


00:17:01.020 --> 00:17:02.940
They're all fun and all interesting.


00:17:02.940 --> 00:17:05.480
I really enjoyed researching them this week.


00:17:05.480 --> 00:17:06.860
So what else are you up to?


00:17:06.860 --> 00:17:12.860
I got an interesting email this morning saying that they've taken off the beta off of the


00:17:12.860 --> 00:17:19.500
Python testing with pytest on the Pragmatic website and you can order the book now and


00:17:19.500 --> 00:17:21.660
it's supposed to ship next Monday.


00:17:21.660 --> 00:17:22.660
That is awesome.


00:17:22.660 --> 00:17:23.660
Congratulations.


00:17:23.660 --> 00:17:24.980
Yeah, thanks.


00:17:24.980 --> 00:17:27.100
So that is what I've been thinking about.


00:17:27.100 --> 00:17:28.100
I bet.


00:17:28.100 --> 00:17:29.100
Nice.


00:17:29.100 --> 00:17:30.100
I've been thinking about Switch.


00:17:30.100 --> 00:17:33.780
Well, I have been too as of this afternoon.


00:17:33.780 --> 00:17:38.860
I'm working on a project that would add the switch statement to the Python language without


00:17:38.860 --> 00:17:43.380
extending it, just like a class that you can basically use, but it's a pretty clever use


00:17:43.380 --> 00:17:45.700
of defining blocks and stuff.


00:17:45.700 --> 00:17:47.060
I think it might be interesting.


00:17:47.060 --> 00:17:50.900
I'll put a link to a gist or a GitHub repo or something for you at the end of the show


00:17:50.900 --> 00:17:52.380
notes and you guys let us know.


00:17:52.380 --> 00:17:56.460
I really do want feedback on that because I want to try to nail this and I think if


00:17:56.460 --> 00:18:01.540
we could get it into something we could stick on PyPI or have you do the work actually.


00:18:01.540 --> 00:18:02.540
Pip install switch.


00:18:02.540 --> 00:18:03.540
There you go.


00:18:03.540 --> 00:18:05.020
That might be a thing, don't do that.


00:18:05.020 --> 00:18:06.020
>> Yeah, don't do that.


00:18:06.020 --> 00:18:07.020
>> Switching, who knows.


00:18:07.020 --> 00:18:12.060
But yeah, I think it would be a really cool feature if we could make it work for the language


00:18:12.060 --> 00:18:15.260
without actually changing the language because it's already flexible enough.


00:18:15.260 --> 00:18:16.260
>> Yeah.


00:18:16.260 --> 00:18:17.260
Cool.


00:18:17.260 --> 00:18:18.260
>> Cool.


00:18:18.260 --> 00:18:19.260
All right.


00:18:19.260 --> 00:18:23.020
Well, thanks for everything, Brian, and good to chat with everyone.


00:18:23.020 --> 00:18:24.860
Thank you for listening to Python Bytes.


00:18:24.860 --> 00:18:27.380
Follow the show on Twitter via @PythonBytes.


00:18:27.380 --> 00:18:30.500
That's Python Bytes as in B-Y-T-E-S.


00:18:30.500 --> 00:18:33.800
get the full show notes at PythonBytes.fm.


00:18:33.800 --> 00:18:37.480
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:18:37.480 --> 00:18:38.480
way.


00:18:38.480 --> 00:18:41.000
We're always on the lookout for sharing something cool.


00:18:41.000 --> 00:18:44.440
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:18:44.440 --> 00:18:47.480
Thank you for listening and sharing this podcast with your friends and colleagues.

