
00:00:00.000 --> 00:00:04.080
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:04.080 --> 00:00:12.160
to your earbuds. This is episode 171, recorded February 26th, 2020. I'm Michael Kennedy.


00:00:12.160 --> 00:00:13.200
And I'm Brian Okken.


00:00:13.200 --> 00:00:14.320
And Brian, we have a special guest.


00:00:14.320 --> 00:00:14.820
Yeah.


00:00:14.820 --> 00:00:17.840
Hey, David Amos. How are you doing? Welcome to the show.


00:00:17.840 --> 00:00:19.040
Doing good. Thanks for having me.


00:00:19.040 --> 00:00:23.280
Yeah, it's great to have you here. Always nice to have a different, fresh voice to


00:00:23.280 --> 00:00:26.960
come join me and Brian, or sometimes to replace us, depending on what we're up to.


00:00:26.960 --> 00:00:28.960
Yeah, so great to have you here.


00:00:28.960 --> 00:00:30.960
Also, the show is sponsored by Datadog.


00:00:30.960 --> 00:00:33.960
Check them out at pythonbytes.fm/datadog.


00:00:33.960 --> 00:00:35.960
I'll tell you more about that later.


00:00:35.960 --> 00:00:37.960
David, let's start off with you.


00:00:37.960 --> 00:00:39.960
Let's talk about decorators.


00:00:39.960 --> 00:00:44.960
Do you feel like decorators are one of the more mysterious things that people work with in Python?


00:00:44.960 --> 00:00:45.960
I think so.


00:00:45.960 --> 00:00:47.960
You know, it's something that I think a lot of people


00:00:47.960 --> 00:00:49.960
either don't brush up against too much


00:00:49.960 --> 00:00:52.960
or they just sort of mysteriously appear in a framework they're using.


00:00:52.960 --> 00:00:54.960
Right, I type app.route and it works, so I'm going to type that.


00:00:54.960 --> 00:01:00.500
type that. I don't know. Right. Exactly. Okay. Did you know that there's actually a grammar


00:01:00.500 --> 00:01:05.440
restriction on what you can actually put in it in the decorator? How you can actually


00:01:05.440 --> 00:01:10.820
call it. So you is basically by I remember it's like dotted. I can have names that are


00:01:10.820 --> 00:01:16.320
dotted so like flask.app.route or something like that. Not quite right. But you know that


00:01:16.320 --> 00:01:21.560
syntax and then parentheses. I can put stuff in there or not. Correct. Yeah. I didn't know


00:01:21.560 --> 00:01:26.760
that there was actually so much of a restriction on this. So right now it requires that a decorator


00:01:26.760 --> 00:01:32.040
consist of a dotted name, optionally, followed by a single like function call and method call,


00:01:32.040 --> 00:01:36.840
right. And there's a new pep out that proposes relaxing these grammar restrictions a little bit.


00:01:36.840 --> 00:01:43.880
It's pep 614. It's still in draft, it was submitted, I think, February 11. So it's pretty,


00:01:43.880 --> 00:01:47.960
pretty recent. Yeah, that's like 14 days old. There's something like that is brand new.


00:01:47.960 --> 00:01:54.360
And so the issue goes back way back to 2004, where I guess Guido proposed these limitations.


00:01:54.360 --> 00:02:01.900
And the use case highlighted by the pep that they think we should change this is actually comes from the PyQt 5 library,


00:02:01.900 --> 00:02:06.800
where say you've got a list of buttons, a list button 0, button 1, etc.


00:02:06.800 --> 00:02:13.560
And they've got a decorator that's called as a method on a class attribute on those buttons.


00:02:13.560 --> 00:02:15.740
Right now what you can't do is say,


00:02:15.740 --> 00:02:18.480
the decorator is called button.click.connect.


00:02:18.480 --> 00:02:19.760
What you can't do is say,


00:02:19.760 --> 00:02:24.600
I want to do button subscript 0.click.click.connect.


00:02:24.600 --> 00:02:27.440
What you have to do is first extract one of


00:02:27.440 --> 00:02:29.160
the list items into a variable name and then


00:02:29.160 --> 00:02:31.920
access the method that way.


00:02:31.920 --> 00:02:34.760
What I thought was actually a strong argument for


00:02:34.760 --> 00:02:36.840
changing this was that the author points out


00:02:36.840 --> 00:02:39.680
that there's a hacky way you can get around this by you can


00:02:39.680 --> 00:02:44.880
define a function that takes a single parameter and then just returns that


00:02:44.880 --> 00:02:50.280
that parameter and then you can wrap your object that has the decorator in it


00:02:50.280 --> 00:02:54.560
with that function to access it however you want. I see so basically you make


00:02:54.560 --> 00:02:59.640
like a decorator decorator that returns the decorator you hoped you could write


00:02:59.640 --> 00:03:03.840
directly but here we go right? Exactly and so you start getting into things


00:03:03.840 --> 00:03:08.280
that are you know way less readable than if you could just subscript that to get


00:03:08.280 --> 00:03:09.820
what you want out of that.


00:03:09.820 --> 00:03:11.740
So the pet proposes relaxing the grammar


00:03:11.740 --> 00:03:14.040
to any valid expression.


00:03:14.040 --> 00:03:15.640
That's kind of in quotation marks


00:03:15.640 --> 00:03:17.640
because it's really anything that you could use,


00:03:17.640 --> 00:03:21.320
say, as a test in like an if, lf, or while block,


00:03:21.320 --> 00:03:22.600
as opposed to say something,


00:03:22.600 --> 00:03:25.320
like any valid input to like the eval function.


00:03:25.320 --> 00:03:26.160
- Right, right.


00:03:26.160 --> 00:03:28.240
You can't put a program in there.


00:03:28.240 --> 00:03:30.000
- Yeah, so not everything would be allowed.


00:03:30.000 --> 00:03:31.240
Like if you have a tuple,


00:03:31.240 --> 00:03:34.280
you couldn't with two objects, x and y in it,


00:03:34.280 --> 00:03:36.580
you couldn't do like at x comma y,


00:03:36.580 --> 00:03:39.140
Although I'm not really sure why you would be using a tuple


00:03:39.140 --> 00:03:41.860
as a decorator in the first place.


00:03:41.860 --> 00:03:43.380
But anyways, the author went ahead


00:03:43.380 --> 00:03:46.340
and did like an implementation draft on CPython.


00:03:46.340 --> 00:03:47.180
He's got a fork of CPython,


00:03:47.180 --> 00:03:49.020
where you can actually pull this down and check it out


00:03:49.020 --> 00:03:50.100
and see how it works.


00:03:50.100 --> 00:03:51.140
- It makes sense to me.


00:03:51.140 --> 00:03:53.100
You know, it's moving the complexity around.


00:03:53.100 --> 00:03:54.380
It does make it more complex,


00:03:54.380 --> 00:03:57.900
but you know, these decorators that take function


00:03:57.900 --> 00:04:00.340
or take parameters that then generate other decorators


00:04:00.340 --> 00:04:01.540
that then wrap the real thing,


00:04:01.540 --> 00:04:03.420
those are also not super simple or obvious.


00:04:03.420 --> 00:04:05.620
So yeah, it seems reasonable to me.


00:04:05.620 --> 00:04:06.460
Brian, what do you think?


00:04:06.460 --> 00:04:08.460
Sure, why not? Let's throw some more stuff in the syntax.


00:04:08.460 --> 00:04:10.460
Yeah, maybe we could use a walrus operator on it.


00:04:10.460 --> 00:04:12.460
Yeah.


00:04:12.460 --> 00:04:16.460
Actually, I had a funny run-in with the walrus operator.


00:04:16.460 --> 00:04:19.460
I was so excited I started using it. I'm like, "Oh, this is the perfect case for it."


00:04:19.460 --> 00:04:22.460
And I put it all together and then I rolled it out onto the server and I'm like,


00:04:22.460 --> 00:04:29.460
"Oh, the server, the website won't start anymore because, well, it's on Ubuntu LTS,


00:04:29.460 --> 00:04:32.460
which is running Python 3.6.9 or something like that.


00:04:32.460 --> 00:04:35.460
I guess I can't use the walrus operator after all."


00:04:35.460 --> 00:04:37.040
- Oh no.


00:04:37.040 --> 00:04:39.200
- Not without changing more than I really cared.


00:04:39.200 --> 00:04:40.480
It was like three lines of code.


00:04:40.480 --> 00:04:41.960
I was fine, I'll put them back.


00:04:41.960 --> 00:04:42.920
But I was so happy.


00:04:42.920 --> 00:04:45.360
Anyway, yes, let's not put those in decorators.


00:04:45.360 --> 00:04:46.820
- Yeah.


00:04:46.820 --> 00:04:49.260
- All right, well, the next thing that I found


00:04:49.260 --> 00:04:50.480
that I thought was pretty interesting,


00:04:50.480 --> 00:04:52.960
this is an article from six months ago


00:04:52.960 --> 00:04:53.800
or something like that.


00:04:53.800 --> 00:04:55.460
It's not super brand new and fresh,


00:04:55.460 --> 00:04:57.400
but I know that we haven't talked about it


00:04:57.400 --> 00:05:00.600
and it seems really, really useful to me.


00:05:00.600 --> 00:05:02.800
So let's start by just talking real quick


00:05:02.800 --> 00:05:04.880
about the Mac menu bar.


00:05:04.880 --> 00:05:08.360
that thing across the top, I know it's sort of loved and hated.


00:05:08.360 --> 00:05:12.280
It's very different than some other operating systems, like in windows,


00:05:12.280 --> 00:05:14.040
your menus are stuck to your window.


00:05:14.040 --> 00:05:18.200
Whereas in Mac, there's just stuck to the top for whatever active app you have.


00:05:18.200 --> 00:05:19.520
That used to bug me.


00:05:19.520 --> 00:05:23.240
Now I really love it actually, but I have all these little widgets in my menu bar.


00:05:23.240 --> 00:05:25.360
I mean, I have a ridiculous number of widgets.


00:05:25.360 --> 00:05:30.120
It probably spans the entire screen on a like 1600 resolution monitor.


00:05:30.120 --> 00:05:34.560
So I had to get this app called bartender for the menu bar.


00:05:34.560 --> 00:05:37.300
bartender, which I can hide away most of them


00:05:37.300 --> 00:05:39.240
that I don't care to see unless I want to access them.


00:05:39.240 --> 00:05:42.420
But I've got stuff that shows like current bandwidth usage,


00:05:42.420 --> 00:05:45.640
total usage, VPN, resolution control,


00:05:45.640 --> 00:05:47.140
like all these cool things, right?


00:05:47.140 --> 00:05:50.140
So at least for me, this is like an exciting part of the OS


00:05:50.140 --> 00:05:53.780
and it seems like to add an app there is not too hard.


00:05:53.780 --> 00:05:55.620
But it would be nice if we could do this


00:05:55.620 --> 00:05:56.620
with Python, right guys?


00:05:56.620 --> 00:05:57.600
- Yeah. - It would, yeah.


00:05:57.600 --> 00:06:02.600
- Yeah, so there's a guy named Camillo Bissini,


00:06:02.600 --> 00:06:05.360
Hopefully I got that close enough there.


00:06:05.360 --> 00:06:06.600
I wrote an article called


00:06:06.600 --> 00:06:10.760
Create a macOS Menu Bar App with Python.


00:06:10.760 --> 00:06:13.080
And the biggest takeaway I would say from this is,


00:06:13.080 --> 00:06:15.440
wow, it is not a lot of work.


00:06:15.440 --> 00:06:16.800
And this is not just like,


00:06:16.800 --> 00:06:18.740
hey, you can get something to appear in the menu bar,


00:06:18.740 --> 00:06:22.040
but here's something that controls the icons


00:06:22.040 --> 00:06:26.040
that are up there as it is enabled or disabled.


00:06:26.040 --> 00:06:28.720
It actually compiles to a .app file


00:06:28.720 --> 00:06:32.080
that you can ship and run using Py2App and stuff.


00:06:32.080 --> 00:06:33.720
So anyway, it's a really cool little app.


00:06:33.720 --> 00:06:35.840
It uses some stuff that we've talked about before.


00:06:35.840 --> 00:06:37.240
It uses Rumps.


00:06:37.240 --> 00:06:39.560
Rumps is a funny project name.


00:06:39.560 --> 00:06:44.140
Ridiculously uncomplicated macOS Python status bar apps.


00:06:44.140 --> 00:06:45.200
That's Rumps.


00:06:45.200 --> 00:06:46.040
So--


00:06:46.040 --> 00:06:47.240
- That is a complicated name.


00:06:47.240 --> 00:06:48.440
(laughing)


00:06:48.440 --> 00:06:50.800
- Yeah, but if you look at what it does,


00:06:50.800 --> 00:06:53.120
it is uncomplicated except for its name.


00:06:53.120 --> 00:06:55.600
And then Py2App obviously takes a Python app.


00:06:55.600 --> 00:06:57.980
You tell it the source code and the packages you need,


00:06:57.980 --> 00:06:59.800
and you basically create a custom setup file


00:06:59.800 --> 00:07:01.800
and a custom setup action.


00:07:01.800 --> 00:07:04.700
So you just say Python setup pydo app and boom,


00:07:04.700 --> 00:07:06.640
you have a thing you can just distribute around.


00:07:06.640 --> 00:07:07.480
- Yeah. - Very cool.


00:07:07.480 --> 00:07:10.280
- And both of those dependencies are pip installable too,


00:07:10.280 --> 00:07:11.720
which is good. - Yes, exactly.


00:07:11.720 --> 00:07:13.100
Yeah, yeah, it's really good.


00:07:13.100 --> 00:07:15.600
So basically in order to get something to show up


00:07:15.600 --> 00:07:17.840
on the menu bar with Rumps,


00:07:17.840 --> 00:07:19.640
you have to say create an instance of an app.


00:07:19.640 --> 00:07:21.920
So like rumps.app, give it a name.


00:07:21.920 --> 00:07:25.120
The example that they used was a Pomodoro timer.


00:07:25.120 --> 00:07:27.440
So you say the name of the app Pomodoro,


00:07:27.440 --> 00:07:29.240
and then you can even use an emoji


00:07:29.240 --> 00:07:31.080
as the icon that'll show up there.


00:07:31.080 --> 00:07:34.200
So they put a tomato, a little tomato emoji,


00:07:34.200 --> 00:07:35.260
and then you call app.run,


00:07:35.260 --> 00:07:37.360
and then you have your thing running up there.


00:07:37.360 --> 00:07:39.240
Right, obviously you gotta add some functionality


00:07:39.240 --> 00:07:41.520
and whatnot, but it's really quite simple,


00:07:41.520 --> 00:07:42.480
and I'm starting to think,


00:07:42.480 --> 00:07:44.280
like, all right, what could I put up there


00:07:44.280 --> 00:07:45.160
that would be really fun?


00:07:45.160 --> 00:07:46.360
- You could do the Pomodoro.


00:07:46.360 --> 00:07:47.800
- Yeah, I already have a Pomodoro app,


00:07:47.800 --> 00:07:49.960
and it like syncs stuff and has a history,


00:07:49.960 --> 00:07:52.440
and you know, I could definitely do a Pomodoro app,


00:07:52.440 --> 00:07:53.400
that would be fun.


00:07:53.400 --> 00:07:55.720
What I've been thinking about, actually,


00:07:55.720 --> 00:07:59.400
is something that Brian and David,


00:07:59.400 --> 00:08:02.940
David and I were actually talking about at PyCascades


00:08:02.940 --> 00:08:04.740
was continuous deployment.


00:08:04.740 --> 00:08:05.580
Remember that, David?


00:08:05.580 --> 00:08:06.400
- Yeah.


00:08:06.400 --> 00:08:09.020
- Yeah, so I have, for the servers and stuff,


00:08:09.020 --> 00:08:10.780
it's like almost continuous deployment.


00:08:10.780 --> 00:08:13.020
Gotta log in, run a command,


00:08:13.020 --> 00:08:15.260
and then it kicks off like a whole process


00:08:15.260 --> 00:08:16.980
of a bunch of stuff that's happening.


00:08:16.980 --> 00:08:18.420
So I finally broke down after that


00:08:18.420 --> 00:08:21.060
and wrote the last mile or whatever.


00:08:21.060 --> 00:08:23.540
He wrote to like, so now if I just,


00:08:23.540 --> 00:08:24.860
when I'm working in PyCharm


00:08:24.860 --> 00:08:26.380
and I'm ready to put something in production,


00:08:26.380 --> 00:08:28.420
I just go to the terminal, like in PyCharm,


00:08:28.420 --> 00:08:29.240
so I'm in the right place,


00:08:29.240 --> 00:08:34.040
type prod hit enter and then you know 36 and 60 seconds later a whole bunch of


00:08:34.040 --> 00:08:37.720
stuff happened on the server and the new versions working which is awesome but it


00:08:37.720 --> 00:08:41.960
would be kind of cool to see like a status of that stuff like a little


00:08:41.960 --> 00:08:45.760
server thing and show me the status in the last deploys and you know force


00:08:45.760 --> 00:08:50.360
deploys of like all the different apps it'd be fun yeah that's what I'm


00:08:50.360 --> 00:08:53.840
thinking you have a rollback for your production script as well yeah okay yeah


00:08:53.840 --> 00:08:57.920
yeah well the rollback is so the way it works is you just commit to a certain


00:08:57.920 --> 00:09:01.760
branch and the rollback has just changed what's on that branch.


00:09:01.760 --> 00:09:02.120
>> Okay.


00:09:02.120 --> 00:09:05.160
>> Right. So somehow I were to do something,


00:09:05.160 --> 00:09:07.600
then I go, "Oh, crap."


00:09:07.600 --> 00:09:10.080
Somehow you'll undo that commit


00:09:10.080 --> 00:09:12.080
and then just trigger it again or something like that.


00:09:12.080 --> 00:09:16.120
So it's all based on GitHub webhooks and push actions and whatnot.


00:09:16.120 --> 00:09:18.980
Anyway, that's what I'm thinking about building like this.


00:09:18.980 --> 00:09:21.280
What I would love to see is to see people build


00:09:21.280 --> 00:09:26.080
interesting things with Python and with rumps and this example here,


00:09:26.080 --> 00:09:28.880
and see if somebody can get it into the Mac App Store.


00:09:28.880 --> 00:09:29.580
Oh, yeah.


00:09:29.580 --> 00:09:32.580
I've gone on a rant before. I hate the App Store so much.


00:09:32.580 --> 00:09:35.280
I used to love them, but now I'm really mad at them because


00:09:35.280 --> 00:09:40.080
I've taken a lot of abuse and I still am and I don't want to go too far down it because it'll make me upset.


00:09:40.080 --> 00:09:44.580
But I would love to see someone else try to get it to the Mac App Store.


00:09:44.580 --> 00:09:47.980
Anyway, what do you guys think? This is fun, right?


00:09:47.980 --> 00:09:48.580
Yeah.


00:09:48.580 --> 00:09:49.580
Looks very fun, yeah.


00:09:49.580 --> 00:09:50.580
Yeah, cool.


00:09:50.580 --> 00:09:55.880
So, Brian, this next one that you have is a pretty cool one about testing and code coverage.


00:09:55.880 --> 00:09:56.880
I really like it.


00:09:56.880 --> 00:09:57.880
Yeah.


00:09:57.880 --> 00:10:00.240
So it just came out like, I don't know, last week.


00:10:00.240 --> 00:10:02.280
I saw a blurb about this.


00:10:02.280 --> 00:10:08.280
I think it was, I'm going to hopefully say this name right, Nikita Subboli.


00:10:08.280 --> 00:10:10.200
He's the CTO of WeMakeServices.


00:10:10.200 --> 00:10:15.800
And we've heard of WeMakeServices before because they do the, what was it, the design?


00:10:15.800 --> 00:10:16.800
The linter.


00:10:16.800 --> 00:10:18.800
Python code style guide.


00:10:18.800 --> 00:10:19.800
Yes, exactly.


00:10:19.800 --> 00:10:21.720
Which is pretty cool.


00:10:21.720 --> 00:10:51.240
I think they from I think one of their sponsored Twitter threads that announced it to us and let us know. So thank you. But it's kind of exciting. So the idea is with code coverage, there are times where you have to kind of have if statements around certain blocks of code that only run like let's say, I mean, for we used to have a lot of two versus three stuff. So Python two versus three, some people might still have those things they need to deal with.


00:10:51.240 --> 00:10:53.000
I don't know why, isn't it 2020?


00:10:53.000 --> 00:10:54.280
- Yeah, exactly.


00:10:54.280 --> 00:10:55.440
But still, there might be,


00:10:55.440 --> 00:10:57.960
like maybe you want to use the Walrus operator on something,


00:10:57.960 --> 00:11:01.320
you need like the 3.6 versus 3.8.


00:11:01.320 --> 00:11:03.580
But then also maybe you've got direct calls


00:11:03.580 --> 00:11:06.160
that you need different things on different operating system


00:11:06.160 --> 00:11:09.900
like Mac versus Windows versus Linux or something,


00:11:09.900 --> 00:11:13.120
or different versions of third-party packages.


00:11:13.120 --> 00:11:14.960
It just happens sometimes.


00:11:14.960 --> 00:11:16.900
But it's usually sort of isolated,


00:11:16.900 --> 00:11:19.600
but it is a thing that makes it so that


00:11:19.600 --> 00:11:22.020
when you do a test run with test coverage,


00:11:22.020 --> 00:11:23.780
those things aren't getting counted


00:11:23.780 --> 00:11:26.020
and they count against your coverage numbers.


00:11:26.020 --> 00:11:27.820
- Right, so a lot of times it's trying to like


00:11:27.820 --> 00:11:29.940
import something and you're not sure


00:11:29.940 --> 00:11:31.260
if it's there or not, right?


00:11:31.260 --> 00:11:33.740
- Yeah, so you might say try import


00:11:33.740 --> 00:11:35.300
and if it works, great, if it doesn't,


00:11:35.300 --> 00:11:37.020
then you import a different thing.


00:11:37.020 --> 00:11:39.540
Like the only thing I can think of right now


00:11:39.540 --> 00:11:42.420
is that mock used to be, is part of unit test,


00:11:42.420 --> 00:11:45.180
but it didn't used to be or something like that.


00:11:45.180 --> 00:11:48.900
But one of the ways that we dealt with this in the past


00:11:48.900 --> 00:11:51.380
was to have your coverage numbers,


00:11:51.380 --> 00:11:53.600
you do the testing on all the different platforms


00:11:53.600 --> 00:11:56.580
you need to, or the testing on all the different versions


00:11:56.580 --> 00:11:58.380
of Python you need to or whatever,


00:11:58.380 --> 00:11:59.860
and then collect all that coverage


00:11:59.860 --> 00:12:01.060
and then just report on that,


00:12:01.060 --> 00:12:03.380
because coverage has a combined way


00:12:03.380 --> 00:12:04.980
that you can combine reports.


00:12:04.980 --> 00:12:07.100
There are downsides to that though,


00:12:07.100 --> 00:12:09.920
because like for instance, just during development,


00:12:09.920 --> 00:12:12.180
you have to run all the tests multiple times,


00:12:12.180 --> 00:12:14.940
or you might not have access to the other operating systems.


00:12:14.940 --> 00:12:17.540
So this new plugin for coverage allows you


00:12:17.540 --> 00:12:22.220
to write rules, some pretty cool rules and pragmas


00:12:22.220 --> 00:12:26.200
to skip different versions or different parts of your code


00:12:26.200 --> 00:12:29.900
for excluded from coverage based on different,


00:12:29.900 --> 00:12:31.740
you know, just a little bit of code.


00:12:31.740 --> 00:12:33.100
And it's really pretty cool.


00:12:33.100 --> 00:12:33.940
- Yeah, I love it.


00:12:33.940 --> 00:12:36.340
You just put a comment around that area


00:12:36.340 --> 00:12:39.820
and say #pragma and you put a little conditional, right?


00:12:39.820 --> 00:12:41.900
Like you could define the rules for code coverage.


00:12:41.900 --> 00:12:44.260
You can say this rule means this thing


00:12:44.260 --> 00:12:46.500
and it'll know whether or not it should check that, right?


00:12:46.500 --> 00:12:51.540
It has a way to, within your coverage setup or wherever you're putting that setup, to


00:12:51.540 --> 00:12:55.420
put rules in place and have those rules there.


00:12:55.420 --> 00:13:01.080
And then those rules specify different pragmas and then the pragmas show up in your code.


00:13:01.080 --> 00:13:04.380
But it's really pretty clean and I can't think of a cleaner way to do this.


00:13:04.380 --> 00:13:05.380
That's pretty cool.


00:13:05.380 --> 00:13:06.380
I like it.


00:13:06.380 --> 00:13:07.380
Yeah.


00:13:07.380 --> 00:13:08.380
Yeah, it looks nice.


00:13:08.380 --> 00:13:09.380
Yeah, for sure.


00:13:09.380 --> 00:13:14.140
I mean, maybe you could put some like plug-in extension stuff into some sort of like into


00:13:14.140 --> 00:13:19.340
coverage itself or something that's running coverage and say if you see this pattern,


00:13:19.340 --> 00:13:25.180
ignore this or somehow report on it differently. But yeah, barring something like that, this is


00:13:25.180 --> 00:13:29.980
great. I do want to add a couple notes on this. I think it's, I'm a complete coverage,


00:13:29.980 --> 00:13:35.420
complete testing sort of person. So this will sort of hide parts of your code that


00:13:35.420 --> 00:13:39.900
you don't know are being tested. It could potentially hide some bugs. So make sure


00:13:39.900 --> 00:13:42.660
that you are really testing everything.


00:13:42.660 --> 00:13:46.260
If you have this sort of stuff in place, really test everything, probably on your CI.


00:13:46.260 --> 00:13:49.820
>> Well, what if you find a part of your code that's hard to test and you don't want the


00:13:49.820 --> 00:13:51.380
code coverage to bug you about it?


00:13:51.380 --> 00:13:52.380
So you just cover that up.


00:13:52.380 --> 00:13:53.380
>> That's a great idea.


00:13:53.380 --> 00:13:57.980
>> I mean, it's just going to solve, like, it's, dude, 100% code coverage.


00:13:57.980 --> 00:13:58.980
This is good.


00:13:58.980 --> 00:13:59.980
>> Yeah.


00:13:59.980 --> 00:14:00.980
>> We're good.


00:14:00.980 --> 00:14:01.980
>> I think maybe you should think about it a little bit more.


00:14:01.980 --> 00:14:02.980
>> No, this is the opposite of what you're thinking.


00:14:02.980 --> 00:14:03.980
>> I agree.


00:14:03.980 --> 00:14:04.980
I agree.


00:14:04.980 --> 00:14:06.780
>> Yeah, that's not the intent.


00:14:06.780 --> 00:14:10.700
So if that's what you're evaluated on at work, this may be effective.


00:14:10.700 --> 00:14:12.700
You never know.


00:14:12.700 --> 00:14:15.500
100% code coverage, boss.


00:14:15.500 --> 00:14:16.500
That's right.


00:14:16.500 --> 00:14:19.140
I don't know where this bug came from.


00:14:19.140 --> 00:14:22.900
Speaking of good stuff as well, really quickly, I want to tell you all about Datadog.


00:14:22.900 --> 00:14:26.700
They're sponsored this episode as they have so many, so be sure to support them because


00:14:26.700 --> 00:14:28.100
they support us.


00:14:28.100 --> 00:14:34.260
So they're a cloud scale monitoring platform that unifies metrics, logs, and traces across


00:14:34.260 --> 00:14:35.900
all the different service boundaries.


00:14:35.900 --> 00:14:38.380
You get to monitor your Python apps in real time,


00:14:38.380 --> 00:14:40.900
find bottlenecks with detailed flame graphs,


00:14:40.900 --> 00:14:43.540
and trace requests as they cross service boundaries.


00:14:43.540 --> 00:14:46.460
Plus, they're tracing client auto instruments,


00:14:46.460 --> 00:14:47.780
many of the frameworks that you care about,


00:14:47.780 --> 00:14:50.340
like Django, AsyncIO, and Flask,


00:14:50.340 --> 00:14:51.700
so you can quickly get started


00:14:51.700 --> 00:14:54.700
monitoring the performance of your Python apps.


00:14:54.700 --> 00:14:58.640
Check them out, get started with a 14-day free trial,


00:14:58.640 --> 00:15:00.440
and they'll send you a cute little T-shirt.


00:15:00.440 --> 00:15:03.800
So check them out at pythonbytes.fm/datadog.


00:15:03.800 --> 00:15:05.860
David, I've been thinking about Excel a lot lately,


00:15:05.860 --> 00:15:08.500
and how people are moving from Excel


00:15:08.500 --> 00:15:11.660
to some of the data science libraries.


00:15:11.660 --> 00:15:12.720
But that can be really tricky


00:15:12.720 --> 00:15:14.900
if they've written a bunch of formulas


00:15:14.900 --> 00:15:16.980
and a lot of work, right?


00:15:16.980 --> 00:15:17.820
- Yeah, it can.


00:15:17.820 --> 00:15:19.300
- A lot of logic in their Excel file.


00:15:19.300 --> 00:15:20.500
- Yeah, definitely.


00:15:20.500 --> 00:15:22.700
I found this library called PyCell,


00:15:22.700 --> 00:15:25.460
described as a library for compiling Excel spreadsheets


00:15:25.460 --> 00:15:28.380
to Python code and visualizing them as a graph.


00:15:28.380 --> 00:15:31.020
So I thought this was a really interesting library


00:15:31.020 --> 00:15:32.780
that this guy had open sourced.


00:15:32.780 --> 00:15:35.320
It comes from a problem, actually,


00:15:35.320 --> 00:15:37.800
I guess this guy had back in 2011,


00:15:37.800 --> 00:15:39.680
he wrote a blog post about it,


00:15:39.680 --> 00:15:41.880
describing the motivation for this.


00:15:41.880 --> 00:15:42.920
But what this does is,


00:15:42.920 --> 00:15:44.920
if you have an Excel file that has


00:15:44.920 --> 00:15:46.200
a whole bunch of formulas in it,


00:15:46.200 --> 00:15:47.400
so you're using it to,


00:15:47.400 --> 00:15:49.320
or this guy was using it was to design


00:15:49.320 --> 00:15:52.040
civilian airplanes for like search and rescue missions,


00:15:52.040 --> 00:15:53.560
new airplane designs.


00:15:53.560 --> 00:15:54.780
You've got a whole bunch of formulas,


00:15:54.780 --> 00:15:56.400
they all kind of interact with each other


00:15:56.400 --> 00:15:58.560
and it's just lots of complicated logic.


00:15:58.560 --> 00:16:00.340
One of the big issues they had was,


00:16:00.340 --> 00:16:02.640
the Excel file was getting really slow.


00:16:02.640 --> 00:16:04.680
And so, he decided to investigate


00:16:04.680 --> 00:16:09.160
what it would take to do something in Python,


00:16:09.160 --> 00:16:12.760
but he didn't want to have to rewrite all of those formulas


00:16:12.760 --> 00:16:14.000
and go through all that logic again.


00:16:14.000 --> 00:16:17.440
So this will actually parse out an Excel file with it.


00:16:17.440 --> 00:16:20.440
It'll compile it to executable Python code.


00:16:20.440 --> 00:16:24.040
And then you can actually set like cell values


00:16:24.040 --> 00:16:26.780
and see what the output in other values will be.


00:16:26.780 --> 00:16:29.080
So you can kind of do this all on the fly


00:16:29.080 --> 00:16:30.720
and it's all happening within Python.


00:16:30.720 --> 00:16:32.520
It's not touching Excel anymore.


00:16:32.520 --> 00:16:36.120
It's not like one of those automation libraries or something like that, right?


00:16:36.120 --> 00:16:39.800
It's converted it to Python and then it runs that.


00:16:39.800 --> 00:16:40.800
Exactly.


00:16:40.800 --> 00:16:41.800
Yeah.


00:16:41.800 --> 00:16:44.760
There's some parser built into it that'll take all the formulas and actually write Python


00:16:44.760 --> 00:16:48.480
functions that replace those formulas and can execute it.


00:16:48.480 --> 00:16:53.200
It's using NumPy and SciPy and a whole bunch of the data science and scientific stack there


00:16:53.200 --> 00:16:54.200
to do that.


00:16:54.200 --> 00:16:58.440
But one of the things that I thought was really cool about it was he went a step further and


00:16:58.440 --> 00:17:03.240
Once you've got all the formulas compiled, there was this big optimization problem they had to do.


00:17:03.240 --> 00:17:07.160
Okay, we've got all of our formulas in here, we've got some base parameters we've set,


00:17:07.160 --> 00:17:12.200
but we want to know, we want the airplane to actually fly. So how do we optimize


00:17:12.200 --> 00:17:17.240
the output to get what we need to design the aircraft properly? So there's a big optimization


00:17:17.240 --> 00:17:21.720
process. And he was actually able to write that in Python and have it take care of that for them


00:17:21.720 --> 00:17:26.360
and reduce the number of cases, sorry, increase the number of cases that they could actually


00:17:26.360 --> 00:17:32.680
optimize from about 65 percent of all cases to about 98 percent and reduce the computation


00:17:32.680 --> 00:17:37.960
time down from about 10 minutes to 30 seconds to a minute with it, which was, I thought,


00:17:37.960 --> 00:17:39.360
really, really cool.


00:17:39.360 --> 00:17:44.500
And then you can generate these graphs of all the formulas and how they interact with


00:17:44.500 --> 00:17:50.060
each other and kind of explore that visually to see how one change in a variable is going


00:17:50.060 --> 00:17:52.820
to propagate through the rest of the system and everything.


00:17:52.820 --> 00:17:58.000
So I just thought it was a really interesting example of taking Excel and doing something


00:17:58.000 --> 00:17:59.000
with Python with it.


00:17:59.000 --> 00:18:03.460
>> Yeah, we've covered a lot of stuff about here's a cool library to, from the outside


00:18:03.460 --> 00:18:09.900
with Python, like sort of marionette, pull the strings of Excel and make it do stuff.


00:18:09.900 --> 00:18:16.460
But this is like, how do I hit escape velocity and get past Excel without starting from scratch?


00:18:16.460 --> 00:18:17.460
Yeah, it's really cool.


00:18:17.460 --> 00:18:18.460
Brian, what do you think?


00:18:18.460 --> 00:18:19.460
>> This is cool.


00:18:19.460 --> 00:18:21.400
I try to avoid Excel as much as I can,


00:18:21.400 --> 00:18:23.860
but if you can't, this is good.


00:18:23.860 --> 00:18:24.940
- Well, if someone gives you Excel,


00:18:24.940 --> 00:18:25.780
you just hit it with this,


00:18:25.780 --> 00:18:27.740
and you're like, "All right, we're done with Excel."


00:18:27.740 --> 00:18:28.780
- That's right, yeah.


00:18:28.780 --> 00:18:31.700
- Now, I think this is actually super, super cool.


00:18:31.700 --> 00:18:33.340
So I saw this come by as well.


00:18:33.340 --> 00:18:34.300
I'm glad you picked it, David,


00:18:34.300 --> 00:18:37.360
'cause it seems like for the right group of people,


00:18:37.360 --> 00:18:38.700
this is gonna be very helpful.


00:18:38.700 --> 00:18:40.900
- Yeah, I think it could also serve as an example


00:18:40.900 --> 00:18:43.100
for other use cases as well,


00:18:43.100 --> 00:18:44.780
to kind of see how they did this


00:18:44.780 --> 00:18:47.040
and how you might be able to apply that same methodology


00:18:47.040 --> 00:18:49.100
to a problem specific to your domain.


00:18:49.100 --> 00:18:50.900
- There's gotta be stuff that's not Excel


00:18:50.900 --> 00:18:53.700
that has like a similar type of issue, right?


00:18:53.700 --> 00:18:55.380
- Yeah. - Yeah, cool.


00:18:55.380 --> 00:18:58.460
Speaking of taking and applying something to your own,


00:18:58.460 --> 00:18:59.780
solving your own problems,


00:18:59.780 --> 00:19:02.680
this next one that I want to talk about


00:19:02.680 --> 00:19:05.280
is something that I actually recently released,


00:19:05.280 --> 00:19:07.700
but I think a lot of people will find helpful.


00:19:07.700 --> 00:19:09.620
So let me just tell you all the problem


00:19:09.620 --> 00:19:10.740
and then you can give me your thoughts


00:19:10.740 --> 00:19:12.780
and I'll tell you what I tried to do to fix it.


00:19:12.780 --> 00:19:14.940
So I feel like a lot of times


00:19:14.940 --> 00:19:17.160
when you're thinking about the websites you're building


00:19:17.160 --> 00:19:18.500
or how you're gonna maintain them


00:19:18.500 --> 00:19:20.760
or have other people working on them,


00:19:20.760 --> 00:19:22.980
it's almost like this either or story.


00:19:22.980 --> 00:19:25.020
Either we're gonna build an app


00:19:25.020 --> 00:19:26.980
that's like powered by the database


00:19:26.980 --> 00:19:29.620
where it has like structured routes,


00:19:29.620 --> 00:19:33.980
say like a bookstore has a catalog which has categories


00:19:33.980 --> 00:19:35.620
and then in those categories there's books.


00:19:35.620 --> 00:19:37.480
So you have pages that represent those things


00:19:37.480 --> 00:19:38.980
by putting in details about books


00:19:38.980 --> 00:19:41.260
and tagging them with categories and whatnot.


00:19:41.260 --> 00:19:43.500
So that's sort of like the data driven side


00:19:43.500 --> 00:19:45.100
or you can be more free form.


00:19:45.100 --> 00:19:46.500
I just wanna create landing pages


00:19:46.500 --> 00:19:53.460
arbitrary like content that I write and whatnot and just structure stuff more arbitrarily,


00:19:53.460 --> 00:19:57.580
in which case maybe you need a CMS like WordPress or you want to stay in Python, you might use


00:19:57.580 --> 00:20:00.300
Wagtail, which is built on Django, right?


00:20:00.300 --> 00:20:04.500
You can do one or the other, but there's not a lot of conversation about like, I'm going


00:20:04.500 --> 00:20:06.980
to build that cool data driven Flask app.


00:20:06.980 --> 00:20:11.280
And this part is going to be like WordPress, and I can just write in it.


00:20:11.280 --> 00:20:15.340
And the challenge is, you know, a lot of times the HTML of those, the way you structure those


00:20:15.340 --> 00:20:21.740
pages a lot is with Jinja 2 or Chameleon or Django templates or something like that, right?


00:20:21.740 --> 00:20:22.740
So you don't want to write that.


00:20:22.740 --> 00:20:26.020
And a lot of times you got to restart the app to make those sort of pick up.


00:20:26.020 --> 00:20:31.540
So what I decided was I'm going to build a sub template because it's not like it's not


00:20:31.540 --> 00:20:36.700
standalone it requires when something like Jinja to sort of orchestrate it but something


00:20:36.700 --> 00:20:42.300
that lets me write markdown for part of the website so it can act like a CMS and leave


00:20:42.300 --> 00:20:45.660
the other part in place so it acts like that data-driven app that I described.


00:20:45.660 --> 00:20:46.300
What do you guys think?


00:20:46.300 --> 00:20:47.100
Oh yeah.


00:20:47.100 --> 00:20:52.620
Common problem, right? Like it's rarely all one or all the other and yet how do you,


00:20:52.620 --> 00:20:57.900
you know, how do you deal with that? Do you write like custom HTML in the app and just restart the


00:20:57.900 --> 00:21:03.100
app? That's not great because well now you're writing like way more just HTML and you just


00:21:03.100 --> 00:21:07.420
want to write content. So what I did is I came up with this thing I named Markdown Subtemplate


00:21:07.420 --> 00:21:11.000
and it's like a templating engine for Markdown.


00:21:11.000 --> 00:21:14.220
And what it lets you do is that you write Markdown files,


00:21:14.220 --> 00:21:17.280
and importantly, you can take other Markdown files


00:21:17.280 --> 00:21:18.120
and import them.


00:21:18.120 --> 00:21:21.360
So for example, if I had a contact us section,


00:21:21.360 --> 00:21:23.480
I always wanted to say, here's our Twitter,


00:21:23.480 --> 00:21:25.360
here's our GitHub, here's our whatever,


00:21:25.360 --> 00:21:27.060
here's how you can find us.


00:21:27.060 --> 00:21:28.420
Like in different Markdown files,


00:21:28.420 --> 00:21:32.080
I just say import contact us, and then it just drops in.


00:21:32.080 --> 00:21:35.020
So there's like one place you maintain that segment


00:21:35.020 --> 00:21:39.420
of your content and it drops in and builds up like a tree,


00:21:39.420 --> 00:21:42.460
object graph of Markdown files.


00:21:42.460 --> 00:21:44.780
And it also does variable replacement


00:21:44.780 --> 00:21:48.420
and it lets you put arbitrary HTML for little bits of like,


00:21:48.420 --> 00:21:51.800
I need this thing to have this CSS class on it


00:21:51.800 --> 00:21:53.840
or it's just not gonna work and Markdown's not enough.


00:21:53.840 --> 00:21:55.840
So, you know, a div with a class


00:21:55.840 --> 00:21:57.180
and then just go back to Markdown


00:21:57.180 --> 00:22:01.260
or something to that effect, like very, very limited HTML.


00:22:01.260 --> 00:22:03.340
So, I built this.


00:22:03.340 --> 00:22:06.860
>> Yeah, I'm interested in this and I'm curious to play with it a bit.


00:22:06.860 --> 00:22:11.020
It is not something I can use standalone or can I run it standalone?


00:22:11.020 --> 00:22:13.660
>> You could use it standalone, but you couldn't, I don't know that you would


00:22:13.660 --> 00:22:18.100
necessarily be able to build the website that you dreamed of standalone.


00:22:18.100 --> 00:22:19.100
>> Yeah, right. >> The reason is,


00:22:19.100 --> 00:22:22.620
it doesn't do, you can't really do a nav bar.


00:22:22.620 --> 00:22:25.300
And you sort of could, right?


00:22:25.300 --> 00:22:28.420
You could sort of get, but it would be just pure markdown.


00:22:28.420 --> 00:22:30.620
And that's not usually enough, right?


00:22:30.620 --> 00:22:34.700
There's usually like I want to have these CSS files included and I want to have this stuff included


00:22:34.700 --> 00:22:37.100
But then the core of the page


00:22:37.100 --> 00:22:39.260
I just want to write markdown files and


00:22:39.260 --> 00:22:41.800
Drop them in there and have that be the content


00:22:41.800 --> 00:22:46.140
But I want to be able to show whether the users logged in or not. So yeah, you technically could but


00:22:46.140 --> 00:22:52.060
It's not intended for that. I'm thinking of a non web-based stuff sure for non web-based stuff


00:22:52.060 --> 00:22:54.860
Yeah, you could definitely take a whole bunch of markdown and convert it to


00:22:55.620 --> 00:22:58.380
HTML with like reused elements and whatnot.


00:22:58.380 --> 00:22:59.180
No problem.


00:22:59.180 --> 00:23:00.020
>> All right. Cool.


00:23:00.020 --> 00:23:03.740
>> This interacts with like the data-driven part of a website.


00:23:03.740 --> 00:23:04.820
Say like if you had.


00:23:04.820 --> 00:23:07.420
>> So imagine you've got like a whole bunch of different pages,


00:23:07.420 --> 00:23:10.140
you want to be like landing pages or articles or something like that.


00:23:10.140 --> 00:23:11.940
You want to let people just write the markdown,


00:23:11.940 --> 00:23:13.900
but then you want to be able to have them import


00:23:13.900 --> 00:23:16.320
the other markdown and do variable replacement stuff.


00:23:16.320 --> 00:23:18.780
They do all of that, but then in the data-driven part,


00:23:18.780 --> 00:23:21.780
you would just say the contents of this page are,


00:23:21.780 --> 00:23:23.980
boom, the output of this template.


00:23:23.980 --> 00:23:30.620
You say like, get HTML and just plunk it in between like your head with all the CSS and


00:23:30.620 --> 00:23:33.780
the maybe the bottom with the JavaScript and the footer, right?


00:23:33.780 --> 00:23:36.980
But then everything else just comes from is driven from this.


00:23:36.980 --> 00:23:39.220
It has a logging to tell you what's happening.


00:23:39.220 --> 00:23:42.100
It has caching and those things are extensible.


00:23:42.100 --> 00:23:47.780
So for example, it has an in-memory cache, but it also has a MongoDB backed cache that


00:23:47.780 --> 00:23:51.700
you can set up because parsing markdown turns out to be a little bit slow.


00:23:51.700 --> 00:23:57.660
So you can take things from like 200 milliseconds or so for a decent-sized page down to like


00:23:57.660 --> 00:23:59.740
one millisecond automatically.


00:23:59.740 --> 00:24:00.900
Like it automatically supports that.


00:24:00.900 --> 00:24:01.900
You don't have to do anything.


00:24:01.900 --> 00:24:03.060
And then also working on storage.


00:24:03.060 --> 00:24:06.220
So if you don't want to use files but you want to store it in the database, you'll be


00:24:06.220 --> 00:24:08.180
able to like change the storage engine and stuff.


00:24:08.180 --> 00:24:09.700
So anyway, people like this.


00:24:09.700 --> 00:24:10.980
They can play with it.


00:24:10.980 --> 00:24:13.860
It's really early, but PRs and contributions are welcome.


00:24:13.860 --> 00:24:14.860
>> Yeah, very cool.


00:24:14.860 --> 00:24:15.860
>> Cool, thanks.


00:24:15.860 --> 00:24:16.860
All right.


00:24:16.860 --> 00:24:22.340
I think this is like a dystopian continuation of your last one.


00:24:22.340 --> 00:24:23.340
What is this?


00:24:23.340 --> 00:24:24.340
Definitely.


00:24:24.340 --> 00:24:25.340
It's a continuation.


00:24:25.340 --> 00:24:28.100
So I was actually when I was researching the previous thing.


00:24:28.100 --> 00:24:29.380
So what was the previous thing?


00:24:29.380 --> 00:24:33.780
The conditional coverage article and conditional coverage plugin.


00:24:33.780 --> 00:24:39.420
I was remembering that we make services does the we make Python style guide, which is not


00:24:39.420 --> 00:24:42.860
just a style guide, but kind of some cool tools around it.


00:24:42.860 --> 00:24:46.180
It said, "We recommend using Flake Hell."


00:24:46.180 --> 00:24:48.100
And I'm like, "What's Flake Hell?"


00:24:48.100 --> 00:24:50.260
Were you like, "What the hell?"


00:24:50.260 --> 00:24:51.660
Yeah, exactly.


00:24:51.660 --> 00:24:53.300
So I wanted to check this out.


00:24:53.300 --> 00:24:58.740
And luckily, oddly enough, on the Flake Hell main readme, it doesn't highlight some of


00:24:58.740 --> 00:25:04.820
the main benefits, but there's a little blurb page that I'm going to link to on from the


00:25:04.820 --> 00:25:09.500
WeMakeServices site that why they use it is for legacy first.


00:25:09.500 --> 00:25:15.560
So Flake Hell is a thing that wraps around Flake 8, but Flake 8 also has lots of plugins


00:25:15.560 --> 00:25:16.560
and stuff.


00:25:16.560 --> 00:25:22.100
So what Flake Hell will do is it helps you specify which plugins are configured and which


00:25:22.100 --> 00:25:23.900
plugins will run.


00:25:23.900 --> 00:25:30.500
Normally Flake 8 will just run any plugin that's installed, so you can control that


00:25:30.500 --> 00:25:31.560
a little bit.


00:25:31.560 --> 00:25:36.740
So there's that, but then there's also, they've made improvements on how you specify configuring


00:25:36.740 --> 00:25:42.420
it so you can configure it now within your pyproject.toml file and then there's


00:25:42.420 --> 00:25:47.420
a you know shortcuts like wildcards and such that make it a lot easier to


00:25:47.420 --> 00:25:52.060
specify which which rules you want to follow and which rules you don't and


00:25:52.060 --> 00:25:56.020
that makes it a little bit cleaner but the part that I'm really excited about


00:25:56.020 --> 00:26:02.900
is they have a thing called flake-held baseline and so the idea is let's say


00:26:02.900 --> 00:26:06.740
you've got you've decided as a team you're gonna or on a project you're


00:26:06.740 --> 00:26:12.380
gonna start using some linting tools from now on yes you'll have to go back


00:26:12.380 --> 00:26:15.340
and change some stuff but you don't really need to do want to do that right


00:26:15.340 --> 00:26:19.460
now you want to make sure that the style guide applies to new code and gradually


00:26:19.460 --> 00:26:23.780
as you got time go back and fix the old stuff well the baseline will allow you


00:26:23.780 --> 00:26:29.540
to save a baseline file and then specify that in your toml file and then now you


00:26:29.540 --> 00:26:37.620
when you run FlakeHelLint, it runs all of your Flake 8 tools and doesn't show you any of the old stuff.


00:26:37.620 --> 00:26:42.660
So if you haven't changed your code, running it right after you've done a baseline will not show


00:26:42.660 --> 00:26:47.940
you anything. But as you start writing new code, it'll lint to the new stuff. It lints the old


00:26:47.940 --> 00:26:52.900
stuff too, it just doesn't catch the same errors again. I'm sure there's a way you can go back and


00:26:52.900 --> 00:26:58.900
like take out your baseline to try to fix up some old stuff, but this is a way to move forward on a


00:26:58.900 --> 00:27:05.060
a project with linting styles without having to kind of take a break and fix everything first.


00:27:05.060 --> 00:27:09.340
That's really cool. I mean on a large code base with lots of history and everything,


00:27:09.340 --> 00:27:12.980
I mean that can be super annoying. You introduce this new tool and oh man,


00:27:12.980 --> 00:27:18.060
we've got thousands of errors flagged that we've got to fix before we can even move on with life.


00:27:18.060 --> 00:27:20.300
So I think that's fantastic.


00:27:20.300 --> 00:27:23.260
Yeah and often it doesn't mean we're going to fix it. It's like yeah,


00:27:23.260 --> 00:27:26.580
we're not going to use this because this is going to take us four weeks, all of us,


00:27:26.580 --> 00:27:28.580
and we're not doing that.


00:27:28.580 --> 00:27:30.580
So forget that.


00:27:30.580 --> 00:27:32.580
I do think the name is a little bit off though.


00:27:32.580 --> 00:27:34.580
It should be like Flake Utopia


00:27:34.580 --> 00:27:36.580
or something because it's meant to make it better.


00:27:36.580 --> 00:27:38.580
Yeah, it's like you're in


00:27:38.580 --> 00:27:40.580
Flake Hill. It's Flake Heaven.


00:27:40.580 --> 00:27:42.580
Yes, how do we get you out of Flake Hill?


00:27:42.580 --> 00:27:44.580
Yeah, yeah. I don't know. Anyway.


00:27:44.580 --> 00:27:46.580
I like that they've got a little snowflake inside of the


00:27:46.580 --> 00:27:48.580
flame on their logo


00:27:48.580 --> 00:27:50.580
there too.


00:27:50.580 --> 00:27:52.580
[laughter]


00:27:52.580 --> 00:27:54.580
Yeah, I actually didn't catch that.


00:27:54.580 --> 00:27:58.700
it's yeah, it's very contradictory.


00:27:58.700 --> 00:27:59.540
You don't really know.


00:27:59.540 --> 00:28:01.300
But I do think Brian that this legacy thing


00:28:01.300 --> 00:28:02.340
is super important.


00:28:02.340 --> 00:28:06.540
It does let you say, we're gonna start using Flake 8 now,


00:28:06.540 --> 00:28:09.820
and we're not going to go and stop the assembly line


00:28:09.820 --> 00:28:12.660
and stop working on everything and wreck that.


00:28:12.660 --> 00:28:15.540
It just lets us from now on,


00:28:15.540 --> 00:28:17.820
you know, you kind of get a path on what you did before.


00:28:17.820 --> 00:28:20.460
Now on, we're gonna work with things the right way.


00:28:20.460 --> 00:28:21.280
I like that.


00:28:21.280 --> 00:28:22.120
That's cool.


00:28:22.120 --> 00:28:23.860
Well guys, I guess that wraps it up


00:28:23.860 --> 00:28:26.580
for our main topics this week.


00:28:26.580 --> 00:28:28.740
Either of you got stuff you'd like to throw out there?


00:28:28.740 --> 00:28:29.580
Quick extra thing?


00:28:29.580 --> 00:28:32.940
- Yeah, Pi Texas 2020 is coming up.


00:28:32.940 --> 00:28:35.960
The registration opens sometime,


00:28:35.960 --> 00:28:37.540
well, I guess maybe next week,


00:28:37.540 --> 00:28:39.220
it'll be the time that the listeners


00:28:39.220 --> 00:28:40.260
are actually hearing this.


00:28:40.260 --> 00:28:41.420
It's gonna be--


00:28:41.420 --> 00:28:43.220
- Time travels, it'll be about the time


00:28:43.220 --> 00:28:44.180
this show comes out, yeah.


00:28:44.180 --> 00:28:45.620
- About the time, yeah.


00:28:45.620 --> 00:28:47.940
So you can just go to pitexas.org


00:28:47.940 --> 00:28:49.500
if you live in the Texas area


00:28:49.500 --> 00:28:51.460
and are interested in attending that conference.


00:28:51.460 --> 00:28:53.220
It's a lot of fun.


00:28:53.220 --> 00:28:57.060
It's going to be May 16th and 17th in Austin, the actual conference stays there.


00:28:57.060 --> 00:29:00.940
But yeah, so register when you hear this if you're interested.


00:29:00.940 --> 00:29:02.540
Yeah, yeah, super cool.


00:29:02.540 --> 00:29:03.340
Brian, you got anything?


00:29:03.340 --> 00:29:04.180
I do not.


00:29:04.180 --> 00:29:05.140
All right.


00:29:05.140 --> 00:29:08.900
Well, I have just two quick things for you to throw out there.


00:29:08.900 --> 00:29:12.700
One, you know, thanks to our listeners as always.


00:29:12.700 --> 00:29:16.060
I went on a rant about licensing, didn't I, Brian, about the GUI framework?


00:29:16.060 --> 00:29:16.740
Yes.


00:29:16.740 --> 00:29:18.940
And I think it is well-deserved.


00:29:18.940 --> 00:29:23.340
However, some folks did point out my interpretation


00:29:23.340 --> 00:29:27.460
of the dual license mode of Qt wasn't quite right.


00:29:27.460 --> 00:29:32.140
So let me see, maybe I'll get it right this time, maybe.


00:29:32.140 --> 00:29:36.260
And it drives me crazy because I'm not 100% sure.


00:29:36.260 --> 00:29:38.940
I know where I can go and point to where this is the case.


00:29:38.940 --> 00:29:41.380
There's like all these little different paragraphs


00:29:41.380 --> 00:29:43.300
and random pages that talk about it.


00:29:43.300 --> 00:29:48.300
So Qt is licensed under a dual license, an LGPL license,


00:29:48.620 --> 00:29:50.300
and a commercial license.


00:29:50.300 --> 00:29:52.660
And my reading of their website was,


00:29:52.660 --> 00:29:54.060
if you're doing commercial stuff,


00:29:54.060 --> 00:29:55.460
you have to have the commercial license.


00:29:55.460 --> 00:29:56.720
And if you're doing open source stuff,


00:29:56.720 --> 00:29:58.840
you have to have the LGPL license.


00:29:58.840 --> 00:30:01.880
What folks are saying, I think it's probably true,


00:30:01.880 --> 00:30:05.940
is you can decide which license you decide to take it under.


00:30:05.940 --> 00:30:07.620
You can have the LGPL,


00:30:07.620 --> 00:30:10.720
or you can have the commercial if you pay for it.


00:30:10.720 --> 00:30:12.940
And then you just have to follow the rules of those.


00:30:12.940 --> 00:30:16.340
And if that's the right reading, which probably it is,


00:30:16.340 --> 00:30:20.800
then you can ship stuff commercially under LGPL.


00:30:20.800 --> 00:30:22.860
Anyway, that's not my final verdict.


00:30:22.860 --> 00:30:26.680
People can continue to look and get maybe an official word.


00:30:26.680 --> 00:30:29.120
What would be nice if people are listening


00:30:29.120 --> 00:30:30.000
and they're like frustrated,


00:30:30.000 --> 00:30:32.520
like, well, why doesn't this guy get my licensing?


00:30:32.520 --> 00:30:34.720
What if they had a page that said,


00:30:34.720 --> 00:30:36.400
here's a comparison side by side,


00:30:36.400 --> 00:30:38.280
like a lot of SaaS apps do,


00:30:38.280 --> 00:30:40.160
like if I get this plan, can I do X,


00:30:40.160 --> 00:30:41.720
can I do Y, can I do Z?


00:30:41.720 --> 00:30:42.800
Little check box, right?


00:30:42.800 --> 00:30:44.160
You know, there's none of that.


00:30:44.160 --> 00:30:45.120
So it's really vague,


00:30:45.120 --> 00:30:49.780
There's a lot of frustration with users around licensing from their blog posts and whatnot.


00:30:49.780 --> 00:30:54.860
That said, I think you probably can use LGPL commercially, but don't hold me to it.


00:30:54.860 --> 00:30:59.060
I still have questions about, let's say I work for a big company.


00:30:59.060 --> 00:31:04.300
Can I use Qt to write a tool that I'm not selling, that is just using internally?


00:31:04.300 --> 00:31:05.300
I believe so.


00:31:05.300 --> 00:31:08.740
Yeah, I believe already they called it out that you can distribute it internally.


00:31:08.740 --> 00:31:10.980
You just can't distribute it externally.


00:31:10.980 --> 00:31:13.960
But there's weird rules, like if I'm a developer,


00:31:13.960 --> 00:31:16.500
and I work on a commercial project,


00:31:16.500 --> 00:31:19.380
someone else is using the LGPL license,


00:31:19.380 --> 00:31:22.520
like they can't even look at or interact with the code


00:31:22.520 --> 00:31:24.100
that has to do with the commercial license.


00:31:24.100 --> 00:31:26.140
It's like, there's a lot of weird knock-on effects


00:31:26.140 --> 00:31:27.960
that go farther than I would think they should.


00:31:27.960 --> 00:31:30.140
Anyway, this is way more than a quick follow-up,


00:31:30.140 --> 00:31:31.940
but since it's a bit of a correction,


00:31:31.940 --> 00:31:33.420
I wanted to throw it out there.


00:31:33.420 --> 00:31:34.900
The other one, this will be quick,


00:31:34.900 --> 00:31:39.020
is I just interviewed Richard Campbell on Talk Python


00:31:39.020 --> 00:31:41.740
on something that many, many people would be interested in


00:31:41.740 --> 00:31:44.700
that has not that much to do with programming actually,


00:31:44.700 --> 00:31:47.340
on what we're calling a Moonbase Geek Out.


00:31:47.340 --> 00:31:50.700
So Richard Campbell does all these like super deep dives


00:31:50.700 --> 00:31:53.020
like into popular science stuff.


00:31:53.020 --> 00:31:54.660
He's also a developer and a podcaster,


00:31:54.660 --> 00:31:57.700
but at various times he'll go into these dives


00:31:57.700 --> 00:32:00.660
and various just science, popular science projects.


00:32:00.660 --> 00:32:04.540
And this is just like a take on modern space travel,


00:32:04.540 --> 00:32:07.100
where we are and the whole Moonbase story and stuff.


00:32:07.100 --> 00:32:09.240
So if that sounds interesting to people, check it out.


00:32:09.240 --> 00:32:11.360
Very little programming skill required


00:32:11.360 --> 00:32:12.420
to know all about it.


00:32:12.420 --> 00:32:14.560
- I guess I did have one extra thing


00:32:14.560 --> 00:32:15.640
I was gonna tell people about.


00:32:15.640 --> 00:32:16.480
- Yeah, throw it out there.


00:32:16.480 --> 00:32:19.960
- So over the holidays, over December and January,


00:32:19.960 --> 00:32:24.700
I did slow down testing code down to a pretty slow dribble,


00:32:24.700 --> 00:32:26.880
but I'm back up to weekly episodes,


00:32:26.880 --> 00:32:29.120
so if you haven't checked out testing code lately,


00:32:29.120 --> 00:32:30.080
be sure to check it out.


00:32:30.080 --> 00:32:31.580
- Yeah, I've seen you releasing a bunch of stuff.


00:32:31.580 --> 00:32:32.540
That's great.


00:32:32.540 --> 00:32:33.960
You said Anthony Shaw in there, right?


00:32:33.960 --> 00:32:35.360
About his plugin.


00:32:35.360 --> 00:32:37.600
- Yeah, and also just app security,


00:32:37.600 --> 00:32:39.360
and we're trying to release weekly,


00:32:39.360 --> 00:32:41.120
so lots of good stuff coming up.


00:32:41.120 --> 00:32:42.240
- Very, very good.


00:32:42.240 --> 00:32:44.160
All right, you ready for a joke?


00:32:44.160 --> 00:32:46.320
- Yeah, I've got actually one other one too


00:32:46.320 --> 00:32:47.280
after you're done with this one.


00:32:47.280 --> 00:32:48.360
- All right, super.


00:32:48.360 --> 00:32:51.720
So this one is visual, but it doesn't need very much,


00:32:51.720 --> 00:32:53.940
and I think a lot of people can appreciate this,


00:32:53.940 --> 00:32:55.840
so you guys just open up that link real quick,


00:32:55.840 --> 00:32:57.640
and I'll tell the joke.


00:32:57.640 --> 00:33:02.240
So there's this programmer guy looking at his screen


00:33:02.240 --> 00:33:05.240
with his furrowed brow, clearly frustrated,


00:33:05.240 --> 00:33:07.360
just thinking, why, right?


00:33:07.360 --> 00:33:10.080
It says, it doesn't work, why?


00:33:10.080 --> 00:33:13.340
And then there's another picture, somewhere else in time,


00:33:13.340 --> 00:33:16.120
exactly the same expression and pose,


00:33:16.120 --> 00:33:17.600
saying, it works, why?


00:33:17.600 --> 00:33:18.440
(laughing)


00:33:18.440 --> 00:33:20.080
I don't know, how often do you all have that feeling?


00:33:20.080 --> 00:33:22.120
You're like, why does this work?


00:33:22.120 --> 00:33:23.520
I just don't understand why this works.


00:33:23.520 --> 00:33:26.240
And then you're like, why will this not work, right?


00:33:26.240 --> 00:33:27.080
It's so funny.


00:33:27.080 --> 00:33:27.920
- Yeah.


00:33:27.920 --> 00:33:30.320
- But I think it's just, it's a little too true.


00:33:30.320 --> 00:33:32.240
- So a question about this.


00:33:32.240 --> 00:33:35.120
Is he leaning on his elbows or is that a mustache?


00:33:35.120 --> 00:33:37.640
He's leaning on his mustache.


00:33:37.640 --> 00:33:38.880
- Yes.


00:33:38.880 --> 00:33:40.920
Yeah, they're connected, obviously.


00:33:40.920 --> 00:33:42.480
- Yeah, obviously.


00:33:42.480 --> 00:33:43.640
Why?


00:33:43.640 --> 00:33:45.040
- Okay.


00:33:45.040 --> 00:33:45.880
- What's your joke, Brian?


00:33:45.880 --> 00:33:49.560
- Okay, so this is not a nerd joke, just a dad joke.


00:33:49.560 --> 00:33:51.540
So I went to the doctor after ingesting


00:33:51.540 --> 00:33:53.180
too much food coloring.


00:33:53.180 --> 00:33:55.240
The doctor said I'll be okay,


00:33:55.240 --> 00:33:57.320
but I feel like I died a little inside.


00:33:57.320 --> 00:33:58.680
(laughing)


00:33:58.680 --> 00:33:59.840
- Very good, I love it.


00:33:59.840 --> 00:34:00.680
- Nice.


00:34:00.680 --> 00:34:01.520
- Anyway.


00:34:01.520 --> 00:34:02.340
- Nice.


00:34:02.340 --> 00:34:03.180
All right, well, thanks for the jokes


00:34:03.180 --> 00:34:07.340
the feedback and everything. Brian, as always, and David, thanks for being here.


00:34:07.340 --> 00:34:08.380
>> Thanks. >> Yeah, thanks for having me.


00:34:08.380 --> 00:34:09.660
>> Bye. >> Yeah, bye. Bye, everyone.


00:34:09.660 --> 00:34:09.900
>> Bye.


00:34:09.900 --> 00:34:14.380
>> Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes,


00:34:14.380 --> 00:34:20.620
that's Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm.


00:34:20.620 --> 00:34:24.700
If you have a news item you want featured, just visit PythonBytes.fm and send it our way.


00:34:24.700 --> 00:34:29.420
We're always on the lookout for sharing something cool. On behalf of myself and Brian Aukin,


00:34:29.420 --> 00:34:33.980
This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

