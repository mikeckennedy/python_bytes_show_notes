WEBVTT

00:00:00.001 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.880 --> 00:00:10.620
This is episode 171, recorded February 26, 2020.

00:00:10.620 --> 00:00:12.120
I'm Michael Kennedy.

00:00:12.120 --> 00:00:13.180
And I'm Brian Okken.

00:00:13.180 --> 00:00:14.380
And Brian, we have a special guest.

00:00:14.380 --> 00:00:14.880
Yeah.

00:00:14.880 --> 00:00:17.840
Hey, David. How are you doing? Welcome to the show.

00:00:17.840 --> 00:00:19.000
Doing good. Thanks for having me.

00:00:19.000 --> 00:00:20.220
Yeah, it's great to have you here.

00:00:20.220 --> 00:00:24.440
Always nice to have a different, fresh voice to come join me and Brian,

00:00:24.440 --> 00:00:26.600
or sometimes to replace us, depending on what we're up to.

00:00:26.600 --> 00:00:28.400
Yeah, so great to have you here.

00:00:28.800 --> 00:00:31.220
Also, the show is sponsored by Datadog.

00:00:31.220 --> 00:00:34.000
Check them out at pythonbytes.fm/datadog.

00:00:34.000 --> 00:00:36.200
Tell you more about that later.

00:00:36.200 --> 00:00:38.260
David, let's start off with you.

00:00:38.260 --> 00:00:40.080
Let's talk about decorators.

00:00:40.080 --> 00:00:44.840
Do you feel like decorators are one of the more mysterious things that people work with in Python?

00:00:44.840 --> 00:00:45.820
I think so.

00:00:45.820 --> 00:00:49.700
You know, it's something that I think a lot of people either don't brush up against too much,

00:00:49.700 --> 00:00:52.640
or they just sort of mysteriously appear in a framework they're using.

00:00:52.640 --> 00:00:55.400
Right. I type app.route and it works, so I'm going to type that.

00:00:55.400 --> 00:00:56.060
I don't know.

00:00:56.060 --> 00:00:57.580
Exactly.

00:00:57.600 --> 00:01:04.360
But did you know that there's actually a grammar restriction on what you can actually put in it in a decorator,

00:01:04.360 --> 00:01:05.780
how you can actually call it?

00:01:05.840 --> 00:01:09.540
So it's basically, I remember, it's like dotted.

00:01:09.540 --> 00:01:14.840
I can have names that are dotted, so like flask.app.route or something like that.

00:01:14.840 --> 00:01:16.720
Not quite right, but you know, that syntax.

00:01:16.720 --> 00:01:20.340
And then parenthesis, I can put stuff in there or not.

00:01:20.340 --> 00:01:20.920
Correct. Yeah.

00:01:20.980 --> 00:01:24.060
I didn't know that there was actually so much of a restriction on this.

00:01:24.060 --> 00:01:28.160
So right now it requires that a decorator consists of a dotted name,

00:01:28.160 --> 00:01:32.060
optionally followed by a single function call and method call.

00:01:32.060 --> 00:01:32.340
Right.

00:01:32.480 --> 00:01:36.820
And there's a new PEP out that proposes relaxing these grammar restrictions a little bit.

00:01:36.820 --> 00:01:38.280
It's PEP 614.

00:01:38.280 --> 00:01:40.060
It's still in draft.

00:01:40.060 --> 00:01:42.960
It was submitted, I think, February 11th.

00:01:42.960 --> 00:01:44.500
So it's pretty recent.

00:01:44.500 --> 00:01:46.140
Yeah, that's like 14 days old.

00:01:46.140 --> 00:01:46.780
Yeah.

00:01:46.780 --> 00:01:47.860
Something like that is brand new.

00:01:47.860 --> 00:01:53.720
And so the issue goes back way back to 2004, where I guess Guido proposed these limitations.

00:01:54.540 --> 00:02:01.460
And the use case highlighted by the PEP that they think we should change this is actually comes from the PyCube 5 library,

00:02:01.460 --> 00:02:06.300
where say you've got a list of buttons, list button 0, button 1, etc.

00:02:06.300 --> 00:02:13.140
And you want to, they've got a decorator that's called as a method on a class attribute on those buttons.

00:02:13.140 --> 00:02:18.360
Right now what you can't do is say, so the decorator is called button.click.connect.

00:02:18.360 --> 00:02:24.140
What you can't do is say, I want to do button subscript 0.click.connect.

00:02:24.680 --> 00:02:31.400
So what you have to do is first extract one of the list items into a variable name and then access the method that way.

00:02:31.400 --> 00:02:39.180
And what I thought was actually a strong argument for changing this was that the author points out that there's kind of a hacky way you can get around this

00:02:39.180 --> 00:02:45.800
by you can define a function that takes a single parameter and then just returns that parameter.

00:02:45.800 --> 00:02:53.160
And then you can wrap your object that has the decorator in it with that function to access it however you want.

00:02:53.360 --> 00:03:01.520
I see. So basically you make like a decorator decorator that returns the decorator you hoped you could write directly, but here we go, right?

00:03:01.740 --> 00:03:09.460
Exactly. And so you start getting into things that are way less readable than if you could just subscript that to get what you want out of that.

00:03:09.460 --> 00:03:13.540
So the pet proposes relaxing the grammar to any valid expression.

00:03:13.900 --> 00:03:24.720
That's kind of in quotation marks because it's really anything that you could use say as a test in like an if, lf, or while block as opposed to say something like any valid input to like the eval function.

00:03:24.720 --> 00:03:25.740
Right, right.

00:03:25.740 --> 00:03:27.080
You can't put a program there.

00:03:28.160 --> 00:03:29.880
Yeah, so not everything would be allowed.

00:03:29.880 --> 00:03:36.160
Like if you have a tuple, you couldn't with two objects x and y in it, you couldn't do like at x comma y.

00:03:36.580 --> 00:03:41.420
Although I'm not really sure why you would be using a tuple as a decorator in the first place.

00:03:41.420 --> 00:03:46.300
But anyways, the author went ahead and did like an implementation draft on CPython.

00:03:46.300 --> 00:03:50.020
He's got a fork of CPython where you can actually pull this down and check it out and see how it works.

00:03:50.020 --> 00:03:50.840
It makes sense to me.

00:03:51.160 --> 00:03:53.020
You know, it's moving the complexity around.

00:03:53.020 --> 00:04:01.480
It does make it more complex, but you know, these decorators that take function or take parameters that then generate other decorators that then wrap the real thing.

00:04:01.480 --> 00:04:03.320
Those are also not super simple or obvious.

00:04:03.320 --> 00:04:05.540
So yeah, it seems reasonable to me.

00:04:05.540 --> 00:04:06.220
Brian, what do you think?

00:04:06.220 --> 00:04:06.820
Sure, why not?

00:04:06.820 --> 00:04:08.420
Let's throw some more stuff in the syntax.

00:04:08.420 --> 00:04:10.240
Yeah, maybe we could use a walrus operator on it.

00:04:10.240 --> 00:04:10.500
Yeah.

00:04:10.500 --> 00:04:16.240
Actually, I had a funny run in with the walrus operator.

00:04:16.240 --> 00:04:17.060
I was so excited.

00:04:17.060 --> 00:04:17.780
I started using it.

00:04:17.780 --> 00:04:19.460
I'm like, oh, this is the perfect case for it.

00:04:19.480 --> 00:04:32.740
And I put it all together and then I rolled it out onto the server and I'm like, oh, the server, the website won't start anymore because, well, it's on Ubuntu LTS, which is running Python 369 or something like that.

00:04:32.740 --> 00:04:35.540
And I guess I can't use the walrus operator after all.

00:04:35.540 --> 00:04:36.700
Oh, no.

00:04:36.700 --> 00:04:39.100
Not without, you know, changing more than I really cared.

00:04:39.100 --> 00:04:40.440
It was like three lines of code.

00:04:40.440 --> 00:04:40.900
I was fine.

00:04:40.900 --> 00:04:41.520
I'll put them back.

00:04:41.520 --> 00:04:42.880
You know, but I was like so happy.

00:04:42.880 --> 00:04:45.200
Anyway, yes, let's not put those in decorators.

00:04:45.200 --> 00:04:45.540
Yeah.

00:04:45.540 --> 00:04:47.180
All right.

00:04:47.220 --> 00:04:53.660
Well, the next thing that I found that I thought was pretty interesting, this is an article from, you know, six months ago or something like that.

00:04:53.660 --> 00:05:00.520
It's not super brand new and fresh, but I don't, I know that we haven't talked about it and it seems really, really useful to me.

00:05:00.520 --> 00:05:05.920
So let's start by just talking real quick about the Mac menu bar, that thing across the top.

00:05:05.920 --> 00:05:08.180
I know it's sort of loved and hated.

00:05:08.180 --> 00:05:11.100
It's very different than some other operating systems.

00:05:11.100 --> 00:05:18.140
Like in Windows, your menus are stuck to your window, whereas in Mac, they're just stuck to the top for whatever active app you have.

00:05:18.140 --> 00:05:19.500
That used to bug me.

00:05:19.500 --> 00:05:20.540
Now I really love it, actually.

00:05:20.540 --> 00:05:23.200
But I have all these little widgets in my menu bar.

00:05:23.200 --> 00:05:25.260
I mean, I have a ridiculous number of widgets.

00:05:25.260 --> 00:05:29.960
It probably spans the entire screen on a like 1600 resolution monitor.

00:05:29.960 --> 00:05:34.500
So I had to get this app called Bartender for the menu bar.

00:05:34.500 --> 00:05:39.220
Bartender, which I can hide away most of them that I don't care to see unless I want to access them.

00:05:39.220 --> 00:05:46.540
But I've got stuff that shows like current bandwidth usage, total usage, VPN, resolution control, like all these cool things.

00:05:46.600 --> 00:05:50.020
Right. So at least for me, this is like an exciting part of the OS.

00:05:50.020 --> 00:05:56.060
And it seems like to add an app there is not too hard, but it would be nice if we could do this with Python.

00:05:56.060 --> 00:05:56.540
Right, guys?

00:05:56.540 --> 00:05:57.440
Yeah, it would. Yeah.

00:05:57.440 --> 00:06:02.360
Yeah. So there's a guy named Camino Bassini.

00:06:02.360 --> 00:06:04.820
Hopefully I got that close, close enough there.

00:06:04.820 --> 00:06:09.960
I wrote an article called create a macOS menu bar app with Python.

00:06:10.500 --> 00:06:14.740
And the biggest takeaway I would say from this is, wow, it is not a lot of work.

00:06:14.740 --> 00:06:18.660
And this is not just like, hey, you can get something to appear in the menu bar.

00:06:18.660 --> 00:06:25.360
But here's something that, you know, controls the icons that are up there as it, you know, is like enabled or disabled.

00:06:25.360 --> 00:06:31.700
It actually compiles to a .app file that you can ship and run using Py2App and stuff.

00:06:31.700 --> 00:06:33.700
So anyway, it's a really cool little app.

00:06:33.700 --> 00:06:35.780
It uses some stuff that we've talked about before.

00:06:35.780 --> 00:06:36.620
It uses Rumps.

00:06:37.240 --> 00:06:39.500
Rumps is a funny project name.

00:06:39.500 --> 00:06:43.820
Ridiculously uncomplicated macOS Python status bar apps.

00:06:43.820 --> 00:06:44.740
That's Rumps.

00:06:44.740 --> 00:06:47.020
That is a complicated name.

00:06:47.020 --> 00:06:52.900
Yeah, but if you look at what it does, it is uncomplicated except for its name.

00:06:52.900 --> 00:06:55.580
And then Py2App obviously takes the Python app.

00:06:55.580 --> 00:06:57.900
You tell it the source code and the packages you need.

00:06:57.900 --> 00:07:01.640
And you basically create a custom setup file and a custom setup action.

00:07:01.640 --> 00:07:06.460
So you just say Python setup Py2App and boom, you have a thing you can just distribute around.

00:07:06.740 --> 00:07:06.920
Yeah.

00:07:06.920 --> 00:07:07.220
Cool.

00:07:07.220 --> 00:07:10.740
And both of those dependencies are pip installable too, which is cool.

00:07:10.740 --> 00:07:11.480
Yes, exactly.

00:07:11.480 --> 00:07:12.200
Yeah, yeah.

00:07:12.200 --> 00:07:12.740
It's really good.

00:07:12.740 --> 00:07:19.600
So basically, in order to get something to show up on the menu bar with Rumps, you have to say, create an instance of an app.

00:07:19.600 --> 00:07:21.840
So like Rumps.app, give it a name.

00:07:21.840 --> 00:07:24.500
The example that they used was a Pomodoro timer.

00:07:24.500 --> 00:07:27.320
So you say the name of the app, Pomodoro.

00:07:27.320 --> 00:07:30.700
And then you can even use an emoji as the icon that'll show up there.

00:07:30.700 --> 00:07:33.520
So they put a tomato, a little tomato emoji.

00:07:33.520 --> 00:07:37.160
And then you call app.run and then you have your thing running up there.

00:07:37.160 --> 00:07:37.520
Right?

00:07:37.600 --> 00:07:39.500
Obviously, you've got to add some functionality and whatnot.

00:07:39.500 --> 00:07:41.360
But it's really quite simple.

00:07:41.360 --> 00:07:45.040
And I'm starting to think like, all right, what could I put up there that would be really fun?

00:07:45.040 --> 00:07:46.200
You could do the Pomodoro.

00:07:46.200 --> 00:07:46.580
Yeah.

00:07:46.580 --> 00:07:47.740
I already have a Pomodoro app.

00:07:47.740 --> 00:07:49.800
And it like syncs stuff and has a history.

00:07:49.800 --> 00:07:52.380
And I could definitely do a Pomodoro app.

00:07:52.380 --> 00:07:53.000
That would be fun.

00:07:53.160 --> 00:08:04.580
What I've been thinking about, actually, is something that Brian and David, David and I were actually talking about at PyCascades was continuous deployment.

00:08:04.580 --> 00:08:05.400
Remember that, David?

00:08:05.400 --> 00:08:05.740
Yeah.

00:08:05.740 --> 00:08:06.160
Yeah.

00:08:06.160 --> 00:08:10.640
So I have, for the servers and stuff, it's like almost continuous deployment.

00:08:10.640 --> 00:08:16.380
I've got to log in, run a command, and then it kicks off like a whole process of a bunch of stuff that's happening.

00:08:16.380 --> 00:08:20.900
So I finally broke down after that and wrote the last mile or whatever.

00:08:21.120 --> 00:08:29.100
He will to like, so now if I just, when I'm working in PyCharm and I'm ready to put something in production, I just go to the terminal in PyCharm so I'm in the right place.

00:08:29.100 --> 00:08:30.540
And I just type prod, hit enter.

00:08:30.540 --> 00:08:36.900
And then, you know, 36 and 60 seconds later, a whole bunch of stuff happened on the server and the new version's working, which is awesome.

00:08:36.900 --> 00:08:48.300
But it would be kind of cool to see like a status of that stuff, like a little server thing and show me the status and the last deploys and, you know, forced deploys of like all the different apps.

00:08:48.300 --> 00:08:48.720
That'd be fun.

00:08:48.720 --> 00:08:49.040
Yeah.

00:08:49.040 --> 00:08:49.560
That would be cool.

00:08:49.560 --> 00:08:49.780
Yeah.

00:08:49.780 --> 00:08:50.520
That's what I'm thinking.

00:08:50.680 --> 00:08:52.920
Do you have a rollback for your production script as well?

00:08:52.920 --> 00:08:53.220
Yeah.

00:08:53.220 --> 00:08:53.560
Okay.

00:08:53.560 --> 00:08:54.020
Yeah, yeah.

00:08:54.020 --> 00:09:01.700
Well, the rollback is, so the way it works is you just commit to a certain branch and the rollback is just change what's on that branch.

00:09:01.700 --> 00:09:02.100
Oh, okay.

00:09:02.100 --> 00:09:02.420
Right?

00:09:02.420 --> 00:09:12.000
So, so somehow I, I were to do something, then I go, oh crap, roll that, you know, somehow roll, you undo that commit and then just trigger it again or something like that.

00:09:12.000 --> 00:09:15.720
So it's all based on like GitHub web hooks and push actions and whatnot.

00:09:15.720 --> 00:09:18.840
Anyway, that's what I'm thinking about building like this.

00:09:18.960 --> 00:09:28.780
What I would love to see is to see people build interesting things with Python and with rumps and this example here and see if somebody can get it into the Mac app store.

00:09:28.780 --> 00:09:29.440
Oh, yeah.

00:09:29.600 --> 00:09:30.580
I've gone on a rant before.

00:09:30.580 --> 00:09:31.080
I hate them.

00:09:31.080 --> 00:09:32.480
I hate the app store so much.

00:09:32.480 --> 00:09:39.860
I used to love them, but now I'm really mad at them because they've, I've taken a lot of abuse and I still am and I don't want to go too far down it because it'll make me upset.

00:09:39.860 --> 00:09:44.240
But I would love to see someone else try to get into the Mac app store.

00:09:46.140 --> 00:09:47.180
Anyway, what do you guys think?

00:09:47.180 --> 00:09:47.900
This is fun, right?

00:09:47.900 --> 00:09:48.240
Yeah.

00:09:48.240 --> 00:09:48.520
Yeah.

00:09:48.520 --> 00:09:49.360
Looks very fun.

00:09:49.360 --> 00:09:49.540
Yeah.

00:09:49.540 --> 00:09:49.860
Yeah.

00:09:49.860 --> 00:09:50.120
Cool.

00:09:50.120 --> 00:09:55.760
So, Brian, this next one that you have, this is a pretty cool one about testing and code coverage.

00:09:55.760 --> 00:09:56.700
I really like it.

00:09:56.700 --> 00:09:57.220
Yeah.

00:09:57.220 --> 00:10:01.760
So, it just came out like, I don't know, last week, I saw a blurb about this.

00:10:01.760 --> 00:10:07.360
I think it was, I'm going to hopefully say this name right, Nikita Suboli.

00:10:07.360 --> 00:10:09.900
He's the CTO of WeMake Services.

00:10:09.900 --> 00:10:14.840
And we've heard of WeMake Services before because they do the, oh, what was it?

00:10:14.840 --> 00:10:15.640
The design.

00:10:15.640 --> 00:10:16.080
The linter.

00:10:16.080 --> 00:10:18.840
The Python code style guide.

00:10:18.840 --> 00:10:19.820
Yes, exactly.

00:10:20.500 --> 00:10:21.080
It's pretty cool.

00:10:21.080 --> 00:10:26.880
I think they, from, I think one of their sponsored Twitter threads that announced it to us and

00:10:26.880 --> 00:10:27.640
let us know.

00:10:27.640 --> 00:10:28.300
So, thank you.

00:10:28.300 --> 00:10:30.660
But it's kind of exciting.

00:10:30.660 --> 00:10:38.380
So, the idea is with code coverage, there are times where you have to kind of have if statements

00:10:38.380 --> 00:10:44.860
around certain blocks of code that only run, like let's say, I mean, we used to have a lot

00:10:44.860 --> 00:10:46.400
of two versus three stuff.

00:10:46.400 --> 00:10:48.100
So, Python two versus three.

00:10:48.280 --> 00:10:51.240
Some people might still have those things they need to deal with.

00:10:51.240 --> 00:10:51.960
I don't know why.

00:10:51.960 --> 00:10:52.780
Isn't it 2020?

00:10:52.780 --> 00:10:53.820
Yeah, exactly.

00:10:53.820 --> 00:10:57.900
But still, there might be, like, maybe you want to use the Walrus operator on something.

00:10:57.900 --> 00:11:00.560
You need, like, the three six versus three eight.

00:11:00.560 --> 00:11:01.000
Yeah.

00:11:01.000 --> 00:11:01.320
Yeah.

00:11:01.320 --> 00:11:05.360
But then, also, maybe you've got direct calls that you need different things on different

00:11:05.360 --> 00:11:11.020
operating system, like Mac versus Windows versus Linux or something, or different versions

00:11:11.020 --> 00:11:12.460
of third-party packages.

00:11:12.460 --> 00:11:14.540
It just happens sometimes.

00:11:14.900 --> 00:11:20.100
But it's usually sort of isolated, but it is a thing that makes it so that when you do

00:11:20.100 --> 00:11:24.960
a test run with test coverage, those things aren't getting counted, and they count against

00:11:24.960 --> 00:11:25.940
your coverage numbers.

00:11:25.940 --> 00:11:26.240
Right.

00:11:26.240 --> 00:11:30.260
So, a lot of times, it's trying to, like, import something, and you're not sure if it's

00:11:30.260 --> 00:11:31.140
there or not, right?

00:11:31.140 --> 00:11:31.520
Yeah.

00:11:31.520 --> 00:11:34.680
So, you might say, try import, and if it works, great.

00:11:34.680 --> 00:11:37.020
If it doesn't, then you import a different thing.

00:11:37.020 --> 00:11:42.120
Like, the only thing I can think of right now is that mock used to be, is part of unit

00:11:42.120 --> 00:11:44.740
test, but it didn't used to be, or something like that.

00:11:44.740 --> 00:11:51.240
But one of the ways that we dealt with this in the past was to have your coverage numbers,

00:11:51.240 --> 00:11:56.160
you do the testing on all the different platforms you need to, or the testing on all the different

00:11:56.160 --> 00:12:00.120
versions of Python you need to, or whatever, and then collect all that coverage, and then

00:12:00.120 --> 00:12:01.040
just report on that.

00:12:01.080 --> 00:12:04.620
Because coverage has a combined way you can combine reports.

00:12:04.620 --> 00:12:09.360
There are downsides to that, though, because, like, for instance, just during development,

00:12:09.360 --> 00:12:14.400
you have to run all the tests multiple times, or you might not have access to the other operating

00:12:14.400 --> 00:12:14.800
systems.

00:12:14.800 --> 00:12:21.620
So, this new plugin for coverage allows you to write rules, some pretty cool rules and pragmas

00:12:21.620 --> 00:12:28.040
to skip different versions or different parts of your code for excluded from coverage based

00:12:28.040 --> 00:12:31.540
on different, you know, just a little bit of code.

00:12:31.540 --> 00:12:32.960
And it's really pretty cool.

00:12:32.960 --> 00:12:33.820
Yeah, I love it.

00:12:33.820 --> 00:12:39.180
You just put a comment around that area and say hash pragma, and you put a little conditional,

00:12:39.180 --> 00:12:39.740
right?

00:12:39.740 --> 00:12:44.480
Like, you could define the rules for code coverage, and you say, this rule means this thing, and

00:12:44.480 --> 00:12:46.220
it'll know whether or not it should check that, right?

00:12:46.220 --> 00:12:51.800
It has a way to, within your coverage setup, or wherever you're putting that setup, to put

00:12:51.800 --> 00:12:54.680
rules in place and have those rules there.

00:12:55.020 --> 00:13:00.420
And then those rules specify a different pragmas, and then the pragmas show up in your code.

00:13:00.420 --> 00:13:04.100
But it's really pretty clean, and I can't think of a cleaner way to do this.

00:13:04.100 --> 00:13:05.640
So, that's pretty cool.

00:13:05.640 --> 00:13:06.780
I like it.

00:13:06.780 --> 00:13:06.980
Yeah.

00:13:06.980 --> 00:13:07.840
Yeah, it looks nice.

00:13:07.840 --> 00:13:08.320
Yeah.

00:13:08.320 --> 00:13:08.920
Yeah, for sure.

00:13:08.920 --> 00:13:14.200
I mean, maybe you could put some, like, plugin extension stuff into some sort of, like, into

00:13:14.200 --> 00:13:19.400
coverage itself or something that's running coverage and say, if you see this pattern,

00:13:20.400 --> 00:13:23.180
ignore this or somehow report on it differently.

00:13:23.180 --> 00:13:25.480
But yeah, barring something like that, this is great.

00:13:25.480 --> 00:13:27.500
I do want to add a couple notes on this.

00:13:27.500 --> 00:13:31.460
I think it's, I'm a complete coverage or complete testing sort of person.

00:13:31.460 --> 00:13:36.780
So, this will sort of hide parts of your code that you don't know are being tested.

00:13:36.780 --> 00:13:39.060
It could potentially hide some bugs.

00:13:39.220 --> 00:13:42.120
So, make sure that you are really testing everything.

00:13:42.120 --> 00:13:46.180
If you have this sort of stuff in place, really test everything, probably on your CI.

00:13:46.180 --> 00:13:49.960
Well, what if you find a part of your code that's hard to test, and you don't want the

00:13:49.960 --> 00:13:51.360
code coverage to bug you about it?

00:13:51.360 --> 00:13:52.160
So, you just cover that up.

00:13:52.160 --> 00:13:53.120
Second.

00:13:53.120 --> 00:13:54.180
Great idea.

00:13:54.180 --> 00:13:57.840
I mean, it's just going to solve, like, it's, dude, 100% code coverage.

00:13:57.840 --> 00:13:58.540
This is good.

00:13:58.540 --> 00:13:58.800
Yeah.

00:13:58.800 --> 00:13:59.300
We're good.

00:13:59.780 --> 00:14:01.960
I think maybe you should think about it a little bit more.

00:14:01.960 --> 00:14:04.080
I agree.

00:14:04.080 --> 00:14:04.520
I agree.

00:14:04.520 --> 00:14:06.520
Yeah, that's not the intent.

00:14:06.520 --> 00:14:10.300
Although, if that's what you're evaluated on at work, this may be effective.

00:14:10.300 --> 00:14:11.120
You never know.

00:14:11.120 --> 00:14:15.360
100% code coverage, boss.

00:14:15.360 --> 00:14:17.020
That's right.

00:14:17.020 --> 00:14:18.620
I don't know where this bug came from.

00:14:18.620 --> 00:14:22.740
Speaking of good stuff as well, really quickly, I want to tell you all about Datadog.

00:14:22.740 --> 00:14:24.680
They're sponsoring this episode, as they have so many.

00:14:24.680 --> 00:14:27.420
So, be sure to support them, because they support us.

00:14:28.040 --> 00:14:34.000
So, they're a cloud-scale monitoring platform that unifies metrics, logs, and traces across

00:14:34.000 --> 00:14:35.580
all the different service boundaries.

00:14:35.580 --> 00:14:40.160
You get to monitor your Python apps in real time, find bottlenecks with detailed flame graphs,

00:14:40.160 --> 00:14:43.320
and trace requests as they cross service boundaries.

00:14:43.320 --> 00:14:47.680
Plus, they're tracing client auto-instruments, many of the frameworks that you care about,

00:14:47.680 --> 00:14:50.120
like Django, AsyncIO, and Flask.

00:14:50.120 --> 00:14:54.320
So, you can quickly get started monitoring the performance of your Python apps.

00:14:54.320 --> 00:14:55.320
Check them out.

00:14:55.520 --> 00:15:00.300
Get started with a 14-day free trial, and they'll send you a cute little t-shirt.

00:15:00.300 --> 00:15:03.060
So, check them out at pythonbytes.fm/datadog.

00:15:03.060 --> 00:15:09.240
David, I've been thinking about Excel a lot lately and how people are moving from Excel to some of the

00:15:09.240 --> 00:15:10.820
data science libraries.

00:15:10.820 --> 00:15:16.220
But that can be really tricky if they've written a bunch of, like, formulas and a lot of work, right?

00:15:16.220 --> 00:15:17.560
Yeah, it can.

00:15:17.560 --> 00:15:19.200
A lot of logic in their Excel file.

00:15:19.340 --> 00:15:20.140
Yeah, definitely.

00:15:20.140 --> 00:15:27.780
I found this library called PyCell, described as a library for compiling Excel spreadsheets to Python code and visualizing them as a graph.

00:15:27.780 --> 00:15:32.700
So, I thought this was a really interesting library that this guy had open sourced.

00:15:32.700 --> 00:15:37.060
It comes from a problem, actually, I guess this guy had back in 2011.

00:15:37.660 --> 00:15:41.440
He wrote a blog post about it, describing the motivation for this.

00:15:41.440 --> 00:15:53.040
But what this does is, if you have an Excel file that has a whole bunch of formulas in it, so you're using it to, well, this guy was using it to design civilian airplanes for, like, search and rescue missions, new airplane designs.

00:15:53.520 --> 00:15:58.040
You've got a whole bunch of formulas, they all kind of interact with each other, and it's just lots of complicated logic.

00:15:58.040 --> 00:16:02.180
One of the big issues they had was the Excel file was getting really slow.

00:16:02.180 --> 00:16:13.900
And so, he decided to investigate what it would take to do something in Python, but he didn't want to have to rewrite all of those formulas and go through all that logic again.

00:16:13.900 --> 00:16:17.400
So, this will actually parse out an Excel file with it.

00:16:17.400 --> 00:16:26.680
It'll compile it to executable Python code, and then you can actually set, like, cell values and see what the output and other values will be.

00:16:26.680 --> 00:16:30.560
So, you can kind of do this all on the fly, and it's all happening within Python.

00:16:30.560 --> 00:16:32.260
It's not touching Excel anymore.

00:16:32.260 --> 00:16:35.880
It's not like one of those automation libraries or something like that, right?

00:16:35.880 --> 00:16:36.620
No.

00:16:36.620 --> 00:16:39.580
It's converted it to Python, and then it runs that.

00:16:39.580 --> 00:16:40.100
Exactly.

00:16:40.100 --> 00:16:47.820
Yeah, there's some parser built into it that'll take all the formulas and actually write Python functions that replace those formulas and can execute it.

00:16:47.820 --> 00:16:53.800
It's using NumPy and SciPy and a whole bunch of the data science and scientific stack there to do that.

00:16:53.800 --> 00:17:03.180
But one of the things that I thought was really cool about it was you went a step further, and once you've got all the formulas compiled, there was this big optimization problem they had to do.

00:17:03.180 --> 00:17:05.260
He said, okay, we've got all of our formulas in here.

00:17:05.260 --> 00:17:10.480
We've got some base parameters we've set, but we want to know, we want the airplane to actually fly.

00:17:10.480 --> 00:17:15.720
So, how do we optimize the output to get what we need to design the aircraft properly?

00:17:15.720 --> 00:17:24.020
So, there's a big optimization process, and he was actually able to write that in Python and have it take care of that for them and reduce the number of cases,

00:17:24.020 --> 00:17:38.920
sorry, increase the number of cases that they could actually optimize from about 65% of all cases to about 98% and reduce the computation time down from about 10 minutes to 30 seconds to a minute with it, which was, I thought, really, really cool.

00:17:38.920 --> 00:17:52.580
And then you can generate these graphs of, like, all the formulas and how they interact with each other and kind of explore that visually to see how one change in a variable is going to propagate through the rest of the system and everything.

00:17:52.580 --> 00:17:59.060
So, I just thought it was a really interesting example of taking Excel and doing something with Python with it.

00:17:59.180 --> 00:18:09.720
So, we've covered a lot of stuff about, here's a cool library to, from the outside with Python, like, sort of marionette, pull the strings of Excel and make it do stuff.

00:18:09.720 --> 00:18:16.340
But this is, like, how do I hit escape velocity and get past Excel without starting from scratch?

00:18:16.340 --> 00:18:17.260
Yeah, it's really cool.

00:18:17.260 --> 00:18:18.340
Brian, what do you think?

00:18:18.340 --> 00:18:19.340
This is cool.

00:18:19.340 --> 00:18:23.780
I try to avoid Excel as much as I can, but, you know, if you can't, this is good.

00:18:23.780 --> 00:18:26.860
Well, if someone gives you Excel, you just hit it with this, and you're like, all right, we're done with Excel.

00:18:26.860 --> 00:18:28.580
That's right, Kif.

00:18:28.580 --> 00:18:31.600
No, I think this is actually super, super cool.

00:18:31.600 --> 00:18:33.280
So, I saw this come by as well.

00:18:33.280 --> 00:18:38.520
I'm glad you picked it, David, because it seems like for the right group of people, this is going to be very helpful.

00:18:38.520 --> 00:18:48.560
Yeah, I think it could also serve as an example, you know, for other use cases as well to kind of see how they did this and how you might be able to apply that same methodology to a problem specific.

00:18:48.560 --> 00:18:53.580
Right, there's got to be stuff that's not Excel that has, like, a similar type of issue, right?

00:18:53.580 --> 00:18:53.860
Yeah.

00:18:53.860 --> 00:18:54.420
Yeah, cool.

00:18:55.220 --> 00:19:07.180
Speaking of taking and applying something to your own, solving your own problems, this next one that I want to talk about is something that I actually recently released, but I think a lot of people will find helpful.

00:19:07.640 --> 00:19:12.700
So, let me just tell you all the problem, and then you can give me your thoughts, and I'll tell you what I tried to do to fix it.

00:19:12.780 --> 00:19:22.740
So, I feel like a lot of times when you're thinking about the websites you're building or how you're going to maintain them or have other people work on them, it's almost like this either-or story.

00:19:22.740 --> 00:19:29.480
Either we're going to build an app that's, like, powered by the database where it has, like, structured routes.

00:19:29.480 --> 00:19:35.480
Say, like, a bookstore has a catalog which has categories, and then in those categories there's books.

00:19:35.480 --> 00:19:40.520
So, you have pages that represent those things by putting in details about books and tagging them with categories and whatnot.

00:19:40.520 --> 00:19:43.080
So, that's sort of, like, the data-driven side.

00:19:43.080 --> 00:19:45.000
Or you can be more freeform.

00:19:45.000 --> 00:19:52.840
I just want to create landing pages and arbitrary, like, content that I write and whatnot and just structure stuff more arbitrarily.

00:19:53.120 --> 00:19:59.860
In which case, maybe you need a CMS, like, WordPress, or you want to stay in Python, you might use Wagtail, which is built on Django, right?

00:19:59.860 --> 00:20:01.840
You can do one or the other.

00:20:01.840 --> 00:20:10.500
But there's not a lot of conversation about, like, I'm going to build that cool data-driven Flask app, and this part is going to be, like, WordPress, and I can just write in it.

00:20:10.500 --> 00:20:21.700
And the challenge is, you know, a lot of times the HTML of those, the way you structure those pages, a lot is with Jinja 2 or Chameleon or Django templates or something like that, right?

00:20:21.700 --> 00:20:25.900
So, you don't want to write that, and a lot of times you've got to restart the app to make those sort of pick up.

00:20:25.900 --> 00:20:32.160
So, what I decided was I'm going to build a sub-template because it's not, like, it's not standalone.

00:20:32.160 --> 00:20:45.620
It requires something like Jinja to sort of orchestrate it, but something that lets me write markdown for part of the website so it can act like a CMS and leave the other part in place so it acts like that data-driven app that I described.

00:20:45.620 --> 00:20:46.340
What do you guys think?

00:20:46.340 --> 00:20:46.800
Oh, yeah.

00:20:46.800 --> 00:20:48.080
Common problem, right?

00:20:48.080 --> 00:20:54.400
Like, it's rarely all one or all the other, and yet how do you, you know, how do you deal with that?

00:20:54.400 --> 00:20:58.140
Do you write, like, custom HTML in the app and just restart the app?

00:20:58.140 --> 00:21:03.840
That's not great because, well, now you're writing, like, way more just HTML and you just want to write content.

00:21:04.320 --> 00:21:10.300
So, what I did is I came up with this thing I named markdown sub-template, and it's like a templating engine for markdown.

00:21:10.300 --> 00:21:17.980
And what it lets you do is you write markdown files, and importantly, you can take other markdown files and import them.

00:21:18.100 --> 00:21:26.540
So, for example, if I had a contact us section, I always wanted to say, here's our Twitter, here's our GitHub, here's our whatever, here's how you can find us.

00:21:26.540 --> 00:21:31.740
Like, in different markdown files, I just say, import, contact us, and then it just drops in.

00:21:32.080 --> 00:21:41.780
So, there's, like, one place you maintain that segment of your content, and it drops in and builds up, like, a tree, an object graph of markdown files.

00:21:41.780 --> 00:21:52.840
And it also does variable replacement, and it lets you put arbitrary HTML for little bits of, like, I need this thing to have this CSS class on it, or it's just not going to work.

00:21:52.840 --> 00:21:53.840
And markdown's not enough.

00:21:53.960 --> 00:21:58.920
So, you know, a div with a class, and then just go back to markdown, or something to that effect.

00:21:58.920 --> 00:22:00.660
Like, very, very limited HTML.

00:22:00.660 --> 00:22:03.180
So, I built this.

00:22:03.180 --> 00:22:06.680
Yeah, I'm interested in this, and I'm curious to play with it a bit.

00:22:06.680 --> 00:22:08.880
It is not something I can use standalone?

00:22:08.880 --> 00:22:10.680
Or can I run it standalone?

00:22:10.680 --> 00:22:17.820
Oh, you could use it standalone, but you couldn't, I don't know that you would necessarily be able to build the website that you dreamed of standalone.

00:22:17.820 --> 00:22:18.420
Oh, right.

00:22:18.420 --> 00:22:25.260
The reason is, it doesn't do, like, you can't really do, like, a nav bar, and, like, you sort of could, right?

00:22:25.260 --> 00:22:30.560
You could sort of get, but it would be just pure markdown, and that's not usually enough, right?

00:22:30.560 --> 00:22:41.720
There's usually, like, I want to have these CSS files included, and I want to have this stuff included, but then the core of the page, I just want to write markdown files and drop them in there and have that be the content.

00:22:41.720 --> 00:22:44.160
But I want to be able to show whether the user's logged in or not.

00:22:44.160 --> 00:22:48.560
So, yeah, you technically could, but it's not intended for that.

00:22:48.560 --> 00:22:50.740
I'm thinking of non-web-based stuff.

00:22:50.740 --> 00:22:58.140
Sure, for non-web-based stuff, yeah, you could definitely take a whole bunch of markdown and convert it to HTML with, like, reused elements and whatnot.

00:22:58.140 --> 00:22:58.800
No problem.

00:22:58.800 --> 00:22:59.380
Yeah.

00:22:59.380 --> 00:22:59.880
All right, cool.

00:22:59.880 --> 00:23:03.880
And this interacts with, like, the data-driven part of a website, say?

00:23:03.880 --> 00:23:04.800
Like, if you had...

00:23:04.800 --> 00:23:07.340
So, imagine you've got, like, a whole bunch of different pages.

00:23:07.340 --> 00:23:10.080
You want to be, like, landing pages or articles or something like that.

00:23:10.080 --> 00:23:16.060
You want to let people just write the markdown, but then you want to be able to have them import the other markdown and do variable replacement and stuff.

00:23:16.060 --> 00:23:23.480
They do all of that, but then in the data-driven part, you would just say, the contents of this page are, boom, the output of this template.

00:23:24.020 --> 00:23:33.620
You just say, like, get HTML and just plunk it in between, like, your head with all the CSS and maybe the bottom with the JavaScript and the footer, right?

00:23:33.620 --> 00:23:36.280
But then everything else just comes from... is driven from this.

00:23:36.280 --> 00:23:39.020
It has logging to tell you what's happening.

00:23:39.020 --> 00:23:41.840
It has caching, and those things are extensible.

00:23:41.840 --> 00:23:51.240
So, for example, it has an in-memory cache, but it also has a MongoDB-backed cache that you can set up because parsing markdown turns out to be a little bit slow.

00:23:51.840 --> 00:23:59.500
So, you can take things from, like, 200 milliseconds or so for a decent-sized page down to, like, one millisecond automatically.

00:23:59.500 --> 00:24:00.840
Like, it automatically supports that.

00:24:00.840 --> 00:24:01.500
You don't have to do anything.

00:24:01.500 --> 00:24:03.180
And then also working on storage.

00:24:03.180 --> 00:24:08.040
So, if you don't want to use files but you want to store it in the database, you'll be able to, like, change the storage engine and stuff.

00:24:08.040 --> 00:24:09.540
So, anyway, people like this.

00:24:09.540 --> 00:24:10.400
They can play with it.

00:24:10.400 --> 00:24:13.560
It's really early, but PRs and contributions are welcome.

00:24:13.560 --> 00:24:14.460
Yeah, very cool.

00:24:14.460 --> 00:24:14.720
Cool.

00:24:14.720 --> 00:24:15.020
Thanks.

00:24:15.020 --> 00:24:16.560
All right, Brian.

00:24:17.440 --> 00:24:22.240
I think this is like a dystopian continuation of your last one.

00:24:22.240 --> 00:24:22.740
What is this?

00:24:22.740 --> 00:24:23.180
Definitely.

00:24:23.180 --> 00:24:24.600
It's a continuation.

00:24:24.600 --> 00:24:28.980
So, I was actually, when I was researching the previous thing, so what was the previous thing?

00:24:29.280 --> 00:24:33.340
The conditional coverage article and conditional coverage plug-in.

00:24:33.340 --> 00:24:42.180
I was remembering that the WeMakeServices does the WeMakePython style guide, which is not just a style guide, but kind of some cool tools around it.

00:24:42.180 --> 00:24:45.540
It said, we recommend using FlakeHell.

00:24:46.060 --> 00:24:47.960
And I'm like, what's FlakeHell?

00:24:47.960 --> 00:24:49.640
Were you like, what the hell?

00:24:49.640 --> 00:24:51.400
Yeah, exactly.

00:24:51.400 --> 00:24:53.040
So, I wanted to check this out.

00:24:53.040 --> 00:25:08.960
And luckily, oddly enough, on the FlakeHell main readme doesn't highlight some of the main benefits, but there's a little blur page that I'm going to link to on from the WeMakeServices site that why they use it is for legacy first.

00:25:09.480 --> 00:25:16.020
So, FlakeHell is a thing that wraps around FlakeHell, but FlakeHell also has lots of plug-ins and stuff.

00:25:16.020 --> 00:25:23.040
So, what FlakeHell will do is it helps you specify which plug-ins are configured and which plug-ins will run.

00:25:23.040 --> 00:25:28.420
Normally, FlakeHell will just run any plug-in that's installed, any FlakeHell plug-in that's installed.

00:25:28.420 --> 00:25:31.120
So, you can control that a little bit.

00:25:31.120 --> 00:25:32.140
So, there's that.

00:25:32.140 --> 00:25:36.960
But then there's also, they've made improvements on how you specify configuring it.

00:25:36.960 --> 00:25:41.160
So, you can configure it now within your PyProject.toml file.

00:25:41.160 --> 00:25:51.960
And then there's shortcuts like wildcards and such that make it a lot easier to specify which rules you want to follow and which rules you don't.

00:25:51.960 --> 00:25:53.820
And that makes it a little bit cleaner.

00:25:53.820 --> 00:26:00.180
But the part that I'm really excited about is they have a thing called FlakeHell Baseline.

00:26:00.440 --> 00:26:10.880
And so, the idea is, let's say you've decided as a team or on a project you're going to start using some linting tools from now on.

00:26:10.880 --> 00:26:15.540
Yes, you'll have to go back and change some stuff, but you don't really want to do that right now.

00:26:15.540 --> 00:26:18.220
You want to make sure that the style guide applies to new code.

00:26:18.780 --> 00:26:21.800
And gradually, as you've got time, go back and fix the old stuff.

00:26:21.800 --> 00:26:28.060
Well, the baseline will allow you to save a baseline file and then specify that in your Toml file.

00:26:28.060 --> 00:26:37.680
And then now, when you run FlakeHell lint, it runs all of your FlakeHell tools and doesn't show you any of the old stuff.

00:26:37.780 --> 00:26:43.300
So, if you haven't changed your code, running it right after you've done a baseline will not show you anything.

00:26:43.300 --> 00:26:46.740
But as you start writing new code, it'll lint to the new stuff.

00:26:46.740 --> 00:26:48.540
It lints the old stuff, too.

00:26:48.540 --> 00:26:50.940
It just doesn't catch the same errors again.

00:26:50.940 --> 00:26:56.760
I'm sure there's a way you can go back and, like, take out your baseline to try to fix up some old stuff.

00:26:56.760 --> 00:27:05.220
But this is a way to move forward on a project with linting styles without having to kind of take a break and fix everything first.

00:27:05.220 --> 00:27:06.100
That's really cool.

00:27:06.100 --> 00:27:11.200
I mean, on a large code base with lots of history and everything, I mean, that can be super annoying.

00:27:11.200 --> 00:27:18.160
You introduce this new tool and, oh, man, we've got thousands of errors flagged that we've got to fix before we can even move on with life.

00:27:18.160 --> 00:27:20.180
So, I think that's fantastic.

00:27:20.180 --> 00:27:22.720
Yeah, and often it doesn't mean we're going to fix it.

00:27:22.720 --> 00:27:28.640
It's like, yeah, we're not going to use this because this is going to take us four weeks, all of us, and we're not doing that.

00:27:28.640 --> 00:27:30.180
So, forget that.

00:27:30.180 --> 00:27:32.640
I do think the name is a little bit off, though.

00:27:32.900 --> 00:27:36.520
It should be like Flake Utopia or something because it's meant to make it better.

00:27:36.520 --> 00:27:36.880
Yeah.

00:27:36.880 --> 00:27:39.220
It's like you're in Flake Hell.

00:27:39.220 --> 00:27:40.200
It's Flake Heaven.

00:27:40.200 --> 00:27:40.600
Yes.

00:27:40.600 --> 00:27:42.240
How do we get you out of Flake Hell?

00:27:42.240 --> 00:27:42.860
Yeah.

00:27:42.860 --> 00:27:43.680
I don't know.

00:27:43.680 --> 00:27:43.940
Anyway.

00:27:44.120 --> 00:27:49.160
I like that they've got a little snowflake inside of the flame on their logo there, too.

00:27:49.160 --> 00:27:50.180
Is that...

00:27:50.180 --> 00:27:54.120
Yeah, I actually didn't catch that.

00:27:54.120 --> 00:27:55.280
Yes, it's...

00:27:55.280 --> 00:27:55.560
Yeah.

00:27:55.560 --> 00:27:58.380
It's very contradictory.

00:27:58.380 --> 00:27:59.400
You don't really know.

00:27:59.400 --> 00:28:02.060
But I do think, Brian, that this legacy thing is super important.

00:28:02.060 --> 00:28:12.560
It does let you say, we're going to start using Flake 8 now, and we're not going to go and stop the assembly line and stop working on everything and wreck that.

00:28:12.560 --> 00:28:17.360
It just lets us, from now on, you know, you kind of get a path on what you did before.

00:28:17.360 --> 00:28:20.400
Now on, we're going to work with things the right way.

00:28:20.400 --> 00:28:21.060
I like that.

00:28:21.060 --> 00:28:21.500
That's cool.

00:28:21.500 --> 00:28:21.800
Yeah.

00:28:21.800 --> 00:28:25.800
Well, guys, I guess that wraps it up for our main topics this week.

00:28:25.800 --> 00:28:28.380
Either of you got stuff you'd like to throw out there?

00:28:28.380 --> 00:28:29.360
Quick extra thing?

00:28:29.360 --> 00:28:29.680
Yeah.

00:28:29.680 --> 00:28:32.360
Pi Texas 2020 is coming up.

00:28:32.360 --> 00:28:36.000
The registration opens sometime...

00:28:36.000 --> 00:28:40.200
Well, I guess next week, it'll be the time that the listeners are actually hearing this.

00:28:40.200 --> 00:28:40.800
It's going to be...

00:28:40.800 --> 00:28:42.180
Time travel and all.

00:28:42.180 --> 00:28:44.000
It'll be about the time this show comes out, yeah?

00:28:44.000 --> 00:28:45.060
About the time, yeah.

00:28:45.060 --> 00:28:47.400
So you can just go to pitexas.org.

00:28:47.400 --> 00:28:52.760
If you live in the Texas area and are interested in attending that conference, it's a lot of fun.

00:28:52.760 --> 00:28:56.980
It's going to be May 16th and 17th in Austin, the actual conference days there.

00:28:56.980 --> 00:29:00.780
But yeah, so register when you hear this, if you're interested.

00:29:00.960 --> 00:29:01.560
Yeah, yeah.

00:29:01.560 --> 00:29:02.080
Super cool.

00:29:02.080 --> 00:29:03.140
Brian, you got anything?

00:29:03.140 --> 00:29:04.000
I do not.

00:29:04.000 --> 00:29:04.520
All right.

00:29:04.520 --> 00:29:08.620
Well, I have just two quick things for you to throw out there.

00:29:08.620 --> 00:29:12.240
One, you know, thanks to our listeners, as always.

00:29:12.240 --> 00:29:14.800
I went on a rant about licensing, didn't I, Brian?

00:29:14.800 --> 00:29:15.960
About GUI framework?

00:29:15.960 --> 00:29:16.420
Yes.

00:29:16.420 --> 00:29:18.040
And I think it is well-deserved.

00:29:18.040 --> 00:29:27.060
However, some folks did point out my interpretation of the dual license mode of Qt wasn't quite right.

00:29:27.440 --> 00:29:31.760
So let me see, maybe I'll get it right this time, maybe.

00:29:31.760 --> 00:29:35.700
And it drives me crazy because I'm not 100% sure.

00:29:35.700 --> 00:29:38.620
There's nowhere I can go and point to where this is the case.

00:29:38.620 --> 00:29:42.920
There's like all these little different paragraphs and random pages that talk about it.

00:29:42.920 --> 00:29:49.700
So Qt is licensed under a dual license, an LGPL license and a commercial license.

00:29:50.000 --> 00:29:55.340
And my reading of their website was, if you're doing commercial stuff, you have to have the commercial license.

00:29:55.340 --> 00:29:58.220
And if you're doing open source stuff, you have to have the LGPL license.

00:29:58.220 --> 00:30:05.180
What folks are saying, I think it's probably true, is you can decide which license you decide to take it under.

00:30:05.720 --> 00:30:09.740
You can have the LGPL or you can have the commercial if you pay for it.

00:30:09.740 --> 00:30:12.580
And then you just have to follow the rules of those.

00:30:12.580 --> 00:30:20.400
And if that's the right reading, which probably it is, then you can ship stuff commercially under LGPL.

00:30:20.400 --> 00:30:22.720
Anyway, that's not my final verdict.

00:30:22.720 --> 00:30:26.080
People can continue to look and get maybe an official word.

00:30:26.080 --> 00:30:31.800
What would be nice if people are listening and they're like frustrated, like, well, why doesn't this guy get my licensing?

00:30:32.300 --> 00:30:38.200
What if they had a page that said, here's a comparison side by side, like a lot of SaaS apps do.

00:30:38.200 --> 00:30:40.080
Like, if I get this plan, can I do X?

00:30:40.080 --> 00:30:40.660
Can I do Y?

00:30:40.660 --> 00:30:41.280
Can I do Z?

00:30:41.280 --> 00:30:42.680
Little checkbox, right?

00:30:42.680 --> 00:30:44.040
You know, there's none of that.

00:30:44.040 --> 00:30:45.020
So it's really vague.

00:30:45.020 --> 00:30:48.920
And there's a lot of like frustration with users around licensing from their blog posts and whatnot.

00:30:48.920 --> 00:30:54.840
That said, I think you probably can use the LGPL commercially, but don't hold me to it.

00:30:54.840 --> 00:30:57.900
I still have questions about like, let's say I work for a big company.

00:30:58.660 --> 00:31:04.200
Can I use Qt to write a tool that I'm not selling that it was just using internally?

00:31:04.200 --> 00:31:04.980
I believe so.

00:31:04.980 --> 00:31:05.360
Yeah.

00:31:05.360 --> 00:31:08.420
I believe already they, they call that out that you can distribute it internally.

00:31:08.420 --> 00:31:10.420
You just can't distribute it externally.

00:31:10.420 --> 00:31:11.780
But there's weird rules.

00:31:11.780 --> 00:31:18.500
Like if I'm a developer and I work on a commercial project, someone else is using the LGPL license.

00:31:18.500 --> 00:31:23.940
Like they can't even look at or interact with the code that has to do with the commercial license.

00:31:23.940 --> 00:31:27.860
It's like, there's a lot of weird knock on effects that go farther than I would think they should.

00:31:27.860 --> 00:31:32.880
Anyway, this is way more than a quick follow up, but since it's a bit of a correction, I wanted to throw it out there.

00:31:32.880 --> 00:31:41.480
The other one, this will be quick is I just interviewed Richard Campbell on Talk Python on something that many, many people would be interested in.

00:31:41.480 --> 00:31:47.200
And that has not that much to do with programming actually on what we're calling a moon base geek out.

00:31:47.400 --> 00:31:52.940
So Richard Campbell does all these like super deep dives, like into popular science stuff.

00:31:52.940 --> 00:32:00.420
He's also a developer and a podcaster, but at various times, he'll go onto these dives and various just science, popular science projects.

00:32:00.420 --> 00:32:07.040
And this is just a, like a take on modern space travel where we are and a whole moon base story and stuff.

00:32:07.040 --> 00:32:08.720
So if that sounds interesting to people, check it out.

00:32:08.720 --> 00:32:12.360
Very little like programming skill required to know all about it.

00:32:12.360 --> 00:32:15.520
I guess I did have one extra thing I was going to tell people about.

00:32:15.520 --> 00:32:15.740
Yeah.

00:32:15.740 --> 00:32:16.240
Throw it out there.

00:32:16.360 --> 00:32:26.740
So over the holidays, over December and January, I did slow down testing code down to a pretty slow dribble, but I'm back up to weekly episodes.

00:32:26.740 --> 00:32:29.960
So if you haven't checked out testing code lately, be sure to check it out.

00:32:29.960 --> 00:32:30.200
Yeah.

00:32:30.200 --> 00:32:31.500
I've seen you releasing a bunch of stuff.

00:32:31.500 --> 00:32:31.940
That's great.

00:32:31.940 --> 00:32:33.880
You said Anthony Shaw on there, right?

00:32:33.880 --> 00:32:35.040
About his plugin.

00:32:35.040 --> 00:32:35.620
Yeah.

00:32:35.620 --> 00:32:39.220
And also just app security and we're trying to release weekly.

00:32:39.220 --> 00:32:41.020
So lots of good stuff coming up.

00:32:41.020 --> 00:32:41.620
Very, very good.

00:32:41.620 --> 00:32:42.440
All right.

00:32:42.440 --> 00:32:43.940
You ready for a joke?

00:32:43.940 --> 00:32:44.400
Yeah.

00:32:44.580 --> 00:32:47.140
I've got actually one other one too after you're done with this one.

00:32:47.140 --> 00:32:47.620
All right.

00:32:47.620 --> 00:32:48.220
Super.

00:32:48.220 --> 00:32:51.660
So this one is visual, but it doesn't need very much.

00:32:51.660 --> 00:32:53.880
And I think a lot of people can appreciate this.

00:32:53.880 --> 00:32:57.320
So you guys just open up that link real quick and I'll tell the joke.

00:32:57.320 --> 00:33:06.200
So there's this programmer guy looking at his screen with his furrowed brow, clearly frustrated, just thinking, why?

00:33:06.200 --> 00:33:06.680
Right?

00:33:06.680 --> 00:33:08.580
It says, it doesn't work.

00:33:08.580 --> 00:33:09.260
Why?

00:33:09.260 --> 00:33:13.180
And then there's another picture somewhere else in time.

00:33:13.580 --> 00:33:16.920
Exactly the same expression and pose saying, it works.

00:33:16.920 --> 00:33:17.480
Why?

00:33:17.480 --> 00:33:18.480
Yeah.

00:33:18.480 --> 00:33:18.720
I don't know.

00:33:18.720 --> 00:33:19.980
How often do you all have that feeling?

00:33:19.980 --> 00:33:21.480
You're like, why does this work?

00:33:21.480 --> 00:33:23.420
I just don't understand why this works.

00:33:23.420 --> 00:33:25.820
And then you're like, why will this not work?

00:33:25.820 --> 00:33:26.180
Right?

00:33:26.180 --> 00:33:27.020
It's so funny.

00:33:27.020 --> 00:33:30.140
But I think it's just, it's, it's a little too true.

00:33:30.140 --> 00:33:31.640
So a question about this.

00:33:31.640 --> 00:33:34.840
Is he leaning on his elbows or is that a mustache?

00:33:34.840 --> 00:33:37.160
He's leaning on his mustache.

00:33:37.160 --> 00:33:38.120
Yes.

00:33:38.620 --> 00:33:39.020
Yeah.

00:33:39.020 --> 00:33:39.620
They're connected.

00:33:39.620 --> 00:33:40.500
Obviously.

00:33:40.500 --> 00:33:41.140
Yeah.

00:33:41.140 --> 00:33:41.800
Obviously.

00:33:41.800 --> 00:33:42.760
Why?

00:33:42.760 --> 00:33:43.880
Okay.

00:33:43.880 --> 00:33:45.020
Okay.

00:33:45.020 --> 00:33:45.680
What's your joke, Brian?

00:33:45.680 --> 00:33:46.080
Okay.

00:33:46.080 --> 00:33:49.180
So this is not a nerd joke, just a dad joke.

00:33:49.180 --> 00:33:52.520
So I went to the doctor after ingesting too much food coloring.

00:33:52.520 --> 00:33:57.060
The doctor said I'll be okay, but I feel like I died a little inside.

00:33:57.060 --> 00:33:59.280
Oh, very good.

00:33:59.280 --> 00:33:59.760
I love it.

00:33:59.760 --> 00:34:00.140
Nice.

00:34:00.140 --> 00:34:00.560
Anyway.

00:34:00.560 --> 00:34:01.020
Nice.

00:34:01.320 --> 00:34:01.600
All right.

00:34:01.600 --> 00:34:04.520
Well, thanks for the jokes and the feedback and everything.

00:34:04.520 --> 00:34:05.840
Brian, as always.

00:34:05.840 --> 00:34:07.480
And David, thanks for being here.

00:34:07.480 --> 00:34:07.840
Thanks.

00:34:07.840 --> 00:34:07.900
Yeah.

00:34:07.900 --> 00:34:08.540
Thanks for having me.

00:34:08.540 --> 00:34:08.800
Bye.

00:34:08.800 --> 00:34:09.100
Yeah.

00:34:09.100 --> 00:34:09.240
Bye.

00:34:09.240 --> 00:34:09.780
Bye everyone.

00:34:09.780 --> 00:34:10.040
Bye.

00:34:10.040 --> 00:34:11.860
Thank you for listening to Python Bytes.

00:34:11.860 --> 00:34:14.400
Follow the show on Twitter via at Python Bytes.

00:34:14.400 --> 00:34:17.240
That's Python Bytes as in B-Y-T-E-S.

00:34:17.240 --> 00:34:20.480
And get the full show notes at Pythonbytes.fm.

00:34:20.480 --> 00:34:24.700
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:34:24.700 --> 00:34:27.400
We're always on the lookout for sharing something cool.

00:34:27.400 --> 00:34:30.500
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:34:30.820 --> 00:34:33.940
Thank you for listening and sharing this podcast with your friends and colleagues.

