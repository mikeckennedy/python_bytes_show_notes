WEBVTT

00:00:00.001 --> 00:00:05.160
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.160 --> 00:00:12.540
This is episode 44, recorded on September 19th, 2017. I'm Michael Kennedy.

00:00:12.540 --> 00:00:13.400
And I'm Brian Okken.

00:00:13.400 --> 00:00:16.680
And it's been a big news for a big week news, hasn't it been, Brian?

00:00:16.680 --> 00:00:17.660
Yeah, very big.

00:00:17.660 --> 00:00:24.200
Yeah, we've got, I would say, the most listener feedback and requests to cover a particular topic,

00:00:24.200 --> 00:00:28.900
which we're going to jump right into as the first thing. But before we do, let's just say

00:00:28.900 --> 00:00:33.180
thanks to Datadog. They are sponsoring this episode, as they have some others, and they've

00:00:33.180 --> 00:00:37.920
got some great tools and even a way to get a free t-shirt at pythonbytes.fm/datadog.

00:00:37.920 --> 00:00:41.820
So we'll talk more about them later. Why don't you tell everyone what the big news is?

00:00:41.820 --> 00:00:45.040
Apparently, there's malicious libraries found on PyPI.

00:00:45.040 --> 00:00:50.260
Right, so pip install virus, not so joyful as the pip install anti-gravity would make it, right?

00:00:50.260 --> 00:00:55.440
It actually, I think, scared people more than the real threat, but let's talk about it.

00:00:55.480 --> 00:01:01.660
Yeah, you know what? I didn't see what the actual code vulnerabilities, what the thing was,

00:01:01.660 --> 00:01:07.680
other than sort of a proof of concept stuff. So I don't know how big of a deal this is in terms of

00:01:07.680 --> 00:01:14.740
actual viruses and malicious code, but it certainly shows the door is open for somebody to sling in

00:01:14.740 --> 00:01:22.280
some very bad things. So the story is that there were a number of malicious libraries found on PyPI.

00:01:22.700 --> 00:01:30.300
So these are basically packages that you would pip install, but they either did some sort of typo

00:01:30.300 --> 00:01:36.320
squatting, or they grabbed the name of something that was already in the standard library. So for

00:01:36.320 --> 00:01:42.360
example, people might try to use URL lib and didn't import it, right? And so they get an error,

00:01:42.360 --> 00:01:48.540
cannot find library URL lib. And so then they go type pip install URL lib. Well, guess what?

00:01:49.540 --> 00:01:54.620
That actually goes out to PyPI and grabs a thing. And I think there's a misspelling like URL lib with

00:01:54.620 --> 00:01:59.740
one L, not two, but they would grab those things and they would put those packages up there. And to be

00:01:59.740 --> 00:02:05.680
even more devious, what they did is they actually took the implementation and put it into those libraries.

00:02:05.680 --> 00:02:09.120
So that it would actually work like it should, but it was...

00:02:09.120 --> 00:02:28.460
So you might not notice, right? You pip install the thing, you import the thing, it works. But the problem is that the setup PY, the actual setup code that installs or executes during setup, like when this is installing, that was where the viruses or the malicious code lived. And so that's bad.

00:02:28.460 --> 00:02:45.240
I look into it. The code that they were putting in there, it was this little, it said proof of concept, no harm, no foul or something, but it was collecting what username and your host IP address and sending that to some server in China.

00:02:45.240 --> 00:03:04.020
Absolutely. So I think what the best write up on this was done by Dan Goodwin, I think, on Ars Technica. So that's the primary link here to that article and the conversation. I find Ars Technica to be the best place for the comments to actually be really meaningful. So there's a great bunch of things in there.

00:03:04.240 --> 00:03:19.480
But let's cover a little bit more of the details. There's a Slovak security authority that actually discovered these packages. They discovered these packages and then sent a message to the Python package authority and they took those down right away.

00:03:19.480 --> 00:03:29.180
All right. So those are supposed to be gone, but that doesn't obviously get them off of your servers, get them off of your developer workstation if you pip installed something bad.

00:03:29.180 --> 00:03:43.180
All right. And there's actually a message from the PSF. They did an official response to this. And, you know, we talked several times about the fragility of PyPI and just how we're depending upon this thing that there's really not a lot of resources put into.

00:03:43.180 --> 00:03:56.440
All right. We talked about Donald stuff and I've had him on talk Python and things like that. And so the PSF said, this is just a part of what they said is unlike some language packaging management systems, PyPI does not have any full time staff devoted to it.

00:03:56.440 --> 00:04:09.320
It's a volunteer run project with only two active admins. As such, it doesn't currently have the resources for some of the proposed solutions, such as actively monitoring new projects like inspecting code as it gets uploaded.

00:04:09.320 --> 00:04:16.920
Historically and by necessity, we've relied on a reactive system to take down potentially malicious projects as we've become aware of them.

00:04:16.920 --> 00:04:18.760
Does that make you feel better, Brian?

00:04:18.760 --> 00:04:19.980
Not really. No.

00:04:19.980 --> 00:04:25.480
No, it doesn't make me feel very good either. It's like, well, if someone notices the virus, of course, we'll take that down.

00:04:25.480 --> 00:04:28.740
But other than that, like, good luck is basically what they're saying.

00:04:28.740 --> 00:04:33.560
So there's some interesting comments, like I said, on that, that Ars Technica article.

00:04:33.560 --> 00:04:38.200
I've linked to four of them. One of them, this is actually, I've been thinking about how you deal with this.

00:04:38.200 --> 00:04:42.000
Like, do you digitally sign these things? And then like, everyone's going to get a key.

00:04:42.000 --> 00:04:45.740
And then how do you know what a bad actor's key gets used? They'll just regenerate it.

00:04:46.040 --> 00:04:50.320
There's a lot of issues with getting like trusted keys, right? Sort of SSL style.

00:04:51.280 --> 00:04:58.300
But this guy, girl goes by Hugh, Hugh, Hugh says, what if pip gets more paranoid?

00:04:58.300 --> 00:05:07.860
So if you say pip install a thing, and there's a very slight misspelling or slight change to that, that is more, much more popular.

00:05:08.080 --> 00:05:16.160
It'll actually, instead of just install it, give you a list of things and say, it looks like you might be trying to install this other thing that's way more popular than this thing.

00:05:16.160 --> 00:05:17.520
And that might be really interesting.

00:05:17.520 --> 00:05:24.940
Like, if the thing you're installing has two downloads and the thing you were trying to get had half a million downloads, you know, maybe it will just say like error.

00:05:24.940 --> 00:05:28.380
You need to say like, you know, force it or something to that effect.

00:05:28.460 --> 00:05:30.200
So what do you think about that?

00:05:30.200 --> 00:05:31.920
I'm a little uneasy with that.

00:05:31.920 --> 00:05:35.200
Giving preference to popular projects just because they're popular.

00:05:35.200 --> 00:05:38.060
I don't know if that's the, maybe we're swinging too far.

00:05:38.060 --> 00:05:38.860
Yeah, possibly.

00:05:38.860 --> 00:05:42.240
There's actually some stats on all the downloads of the bad packages.

00:05:42.240 --> 00:05:43.640
They were not really bad.

00:05:43.640 --> 00:05:46.000
They were like really quite small numbers.

00:05:46.000 --> 00:05:47.120
There's some graphs and stuff.

00:05:47.120 --> 00:05:51.980
There's a person on the comment section that said their name was Stastag.

00:05:51.980 --> 00:05:57.260
And he said, I'm sitting on a lot of the misspellings of common package names.

00:05:57.620 --> 00:05:58.620
So that's pretty cool.

00:05:58.620 --> 00:06:03.140
They apparently have created packages that do nothing that are like typos.

00:06:03.140 --> 00:06:05.900
So typo squatters can't actually do various stuff with it.

00:06:05.900 --> 00:06:12.220
There's an undergrad, I think in Germany, who studied this capability and like said, actually, there's this problem.

00:06:12.220 --> 00:06:13.920
You know, it was like a year ago.

00:06:13.920 --> 00:06:16.620
They had sort of said, look, this can be a real problem.

00:06:16.620 --> 00:06:22.080
But, you know, we could, I guess, feel a little bit better in that he also did the same thing to Ruby.

00:06:22.080 --> 00:06:25.160
And he also did the same thing to NPM for Node.js.

00:06:25.780 --> 00:06:32.800
So it's kind of a common theme that there's this challenge across all the official package repositories.

00:06:32.800 --> 00:06:33.220
Yeah.

00:06:33.220 --> 00:06:40.780
And one of the notes also was that people like trying to pip install something that's part of the standard library.

00:06:40.780 --> 00:06:42.140
It shouldn't come from PyPI.

00:06:42.140 --> 00:06:42.720
Absolutely.

00:06:42.720 --> 00:06:54.620
So there has been a change to the warehouse to not allow new or have new packages that have the same name as standard library packages have to go through approval process for that.

00:06:54.720 --> 00:06:54.840
Yeah.

00:06:54.840 --> 00:07:01.280
And you link to a PR pull request to 4.0.9 on PyPI.a slash warehouse.

00:07:02.080 --> 00:07:04.780
And that's pretty interesting, that conversation.

00:07:04.780 --> 00:07:12.280
So I see how people are talking about solving the problem, which ones are there, how to deal with ones that are already there, but those are actual backports.

00:07:12.540 --> 00:07:23.280
So like somebody wants to bring async I.o to Python 2 or to like a lower version of Python 3, then maybe they put that package up there and it would look like one of these bad named things.

00:07:23.280 --> 00:07:32.040
But they said the solution that they're considering is basically you can't create new ones without some sort of admin being involved to say, yeah, I see what you're doing and it's okay.

00:07:32.400 --> 00:07:34.720
But the ones that exist, they won't like kill them off or anything.

00:07:34.720 --> 00:07:35.100
Yeah.

00:07:35.100 --> 00:07:44.620
And one of the big example of that is, for instance, a mock is in the standard library as of Python 3, but in Python 2, it was separate.

00:07:44.620 --> 00:07:48.040
So I guess mock is really part of the unit test library.

00:07:48.040 --> 00:07:48.460
Right.

00:07:48.460 --> 00:07:52.600
But it has a legitimate place both in the standard library for Python 3 and on PyPI.

00:07:52.600 --> 00:07:52.980
Yeah.

00:07:52.980 --> 00:07:56.020
There are some legitimate backports that show up.

00:07:56.020 --> 00:07:58.660
So there's legitimate reasons to have the same name.

00:07:58.660 --> 00:08:07.860
So that's a pretty nice segue to this news that Jonas Newbert sent us about the new version of PyPI, which is called Warehouse.

00:08:07.860 --> 00:08:10.380
And it might be finally moving.

00:08:10.380 --> 00:08:11.280
Yeah.

00:08:11.280 --> 00:08:13.320
And actually, so this was great.

00:08:13.320 --> 00:08:19.360
Jonas sent us an email and essentially he did almost all of my research for me, which I love that.

00:08:19.360 --> 00:08:19.860
Thank you, Jonas.

00:08:19.860 --> 00:08:20.580
Feel free to do that.

00:08:20.580 --> 00:08:20.960
Anybody.

00:08:20.960 --> 00:08:23.800
So he was writing an article.

00:08:23.800 --> 00:08:34.100
He was talking about the research he did for a topic when he wrote a blog post, which we have a link to called Publishing Your First PyPI Package by and for the Absolute Beginner.

00:08:34.100 --> 00:08:37.820
And it's a pretty nice, quick article.

00:08:37.820 --> 00:08:43.240
It talks about, well, anyway, one of the things he talked about when he emailed us is things have changed.

00:08:43.240 --> 00:08:46.960
And so a lot of the tutorials that are out there aren't valid anymore.

00:08:47.180 --> 00:08:54.120
For instance, let's see, the pypi.org is no longer, it used to be read-only when we were just playing with it.

00:08:54.120 --> 00:08:58.280
But now it's really where you go through to publish packages.

00:08:58.280 --> 00:08:59.760
You write to there.

00:08:59.760 --> 00:09:06.000
The old APIs at pypi.python.org slash pypi are disabled.

00:09:06.000 --> 00:09:07.800
So you have to use the new one.

00:09:07.800 --> 00:09:18.220
Right, and if you have one of those hidden .pypirc files that you can configure, like your package, username, password, URL, and so on, you have to change that URL, right?

00:09:18.220 --> 00:09:23.180
If you're already done packages and pushed them up before, some of this will make sense and some of it won't.

00:09:23.180 --> 00:09:26.460
But if you read Jonas's article, all of it will make sense.

00:09:26.460 --> 00:09:27.120
Yeah, absolutely.

00:09:27.120 --> 00:09:33.220
And I also had some good news, like things like Markdown Support is coming for the readme.mdfiles.

00:09:33.220 --> 00:09:34.020
Yeah, yeah.

00:09:34.020 --> 00:09:35.000
That would be great.

00:09:35.000 --> 00:09:40.180
Yeah, I'm looking forward to, I refuse to write restructured text.

00:09:40.180 --> 00:09:42.580
So when I need it, I convert it from Markdown.

00:09:42.580 --> 00:09:43.120
There you go.

00:09:43.120 --> 00:09:44.780
Yeah, yeah, that's great.

00:09:44.780 --> 00:09:46.120
So this is good news.

00:09:46.120 --> 00:09:57.840
A couple of things, one of the other things that I thought was interesting is that apparently, I didn't know this, but you could change some aspects on the old pypi, some aspects of your project, like the description or something.

00:09:57.840 --> 00:10:04.320
There was a way to change that through the web interface or through the API without changing your package itself.

00:10:04.860 --> 00:10:06.580
And a lot of those have been closed down.

00:10:06.580 --> 00:10:11.680
And you really have to just re-upload your stuff if you want to make quite a few changes.

00:10:11.680 --> 00:10:14.660
And I actually think that's the way you should do it anyway.

00:10:14.660 --> 00:10:16.320
So that's all right.

00:10:16.320 --> 00:10:17.580
Yeah, that sounds good to me.

00:10:18.300 --> 00:10:22.580
I've been long waiting for pypi.org to be the thing.

00:10:22.580 --> 00:10:24.920
And it's just a nicer interface.

00:10:24.920 --> 00:10:26.520
It's built in Pyramid, which is kind of cool.

00:10:26.760 --> 00:10:31.660
And I know that it's like a huge revision of a very, very old and sort of kludgy code.

00:10:31.660 --> 00:10:38.120
So it will also open up PyPI for more contributions and collaboration with other people.

00:10:38.120 --> 00:10:38.520
Yeah.

00:10:38.520 --> 00:10:41.620
And I'd really like for them to, I think it's totally usable now.

00:10:41.620 --> 00:10:45.900
I'd really like to have them take down the red notification at the top.

00:10:45.900 --> 00:10:46.340
Exactly.

00:10:46.600 --> 00:10:47.460
It looked like a warning.

00:10:47.460 --> 00:10:49.840
And I don't think we need that anymore.

00:10:49.840 --> 00:10:50.120
Yeah.

00:10:50.120 --> 00:10:52.100
It feels like it's going to go pretty soon.

00:10:52.100 --> 00:10:54.380
But yeah, definitely that should move to the old one.

00:10:54.380 --> 00:10:55.460
And it should just stay.

00:10:55.460 --> 00:10:57.580
It should be gone from the new one, right?

00:10:57.580 --> 00:10:58.920
I'm ready for the switch to happen.

00:10:59.120 --> 00:11:05.360
I understand that pip actually references pypi.org and such for its URLs internally on something.

00:11:05.360 --> 00:11:08.680
So it's kind of there anyway, but it's not.

00:11:08.680 --> 00:11:09.200
I don't know.

00:11:09.200 --> 00:11:10.900
It feels a little gradual.

00:11:10.900 --> 00:11:19.500
And apparently the one holdout is you have to, right, currently still you have to create your user account on the old website.

00:11:19.500 --> 00:11:21.520
Ah, maybe that's why that red bar is still there.

00:11:21.520 --> 00:11:21.820
Maybe.

00:11:21.820 --> 00:11:22.160
Maybe.

00:11:22.160 --> 00:11:22.520
All right.

00:11:22.520 --> 00:11:28.120
So last week we had a lot of fun talking about David Beasley's fun of reinvention, right?

00:11:28.120 --> 00:11:29.060
Yeah, I love that.

00:11:29.300 --> 00:11:30.300
Yeah, I love to talk too.

00:11:30.300 --> 00:11:32.640
If anybody hasn't watched that, go back and watch that.

00:11:32.640 --> 00:11:34.860
Yeah, well, basically, Link, you do it again because it was awesome.

00:11:34.860 --> 00:11:40.360
One of the things he did really well was he had these really cool live, he was live coding during the presentation.

00:11:40.360 --> 00:11:44.040
And he had some cool backgrounds and stuff.

00:11:44.040 --> 00:11:47.440
And we have no idea how to do what David did.

00:11:47.440 --> 00:11:49.380
We asked him and he won't share it yet.

00:11:49.380 --> 00:11:56.620
Yeah, and if anyone knows, go to pythonbytes.fm/44 and add a comment at the bottom so we can all figure out how that cool trick was done.

00:11:56.620 --> 00:11:57.400
Yeah, definitely.

00:11:57.400 --> 00:11:59.940
But for now, you can do live coding.

00:11:59.940 --> 00:12:04.280
I like live coding in a presentation, but it can go wrong if things go wrong.

00:12:04.280 --> 00:12:05.340
So I went out.

00:12:05.340 --> 00:12:09.780
I have a presentation that's coming up and I was thinking about whether I wanted to do this.

00:12:10.420 --> 00:12:13.960
And so I found a few links talking about it, about advice.

00:12:13.960 --> 00:12:17.260
One of them is basically advice for live coding.

00:12:17.260 --> 00:12:21.840
And it's basically practice a lot and have a backup plan.

00:12:21.840 --> 00:12:24.640
I guess that's the real meat of it.

00:12:24.800 --> 00:12:31.680
And then also one thing is while you're coding a lot, it might be fun for you just to code, but you have to talk at the same time.

00:12:31.680 --> 00:12:34.500
So if you can't talk and code at the same time, maybe it's not for you.

00:12:34.920 --> 00:12:37.720
So if you want to have the same effect but not live code.

00:12:37.720 --> 00:12:42.900
So there's a couple other articles called not quite live coding and avoiding live coding.

00:12:43.300 --> 00:12:44.620
They're kind of cool.

00:12:44.620 --> 00:12:53.320
They're talks about basically how you can do like GitHub labels or get labels to pull in new parts of your code if you want to watch it.

00:12:53.320 --> 00:12:54.280
And my favorite.

00:12:54.520 --> 00:12:54.720
Right.

00:12:54.720 --> 00:13:00.940
You can basically go from like tag to tag to tag and then talk about the new code that's appeared without actually typing it.

00:13:00.940 --> 00:13:03.260
Although I'm with you, I'm for the live coding.

00:13:03.260 --> 00:13:04.800
That is the most legit.

00:13:04.800 --> 00:13:07.400
But like these are fallbacks and I think that's not bad.

00:13:07.400 --> 00:13:10.160
The last one is supposedly a bit of work.

00:13:10.160 --> 00:13:13.100
I'm going to have to try this out is doing a fade in.

00:13:13.100 --> 00:13:16.040
So you've got like all your code showing up on a slide.

00:13:16.040 --> 00:13:21.560
But instead of showing like a huge eye diagram of a whole bunch of like code and nobody knows really.

00:13:21.560 --> 00:13:23.760
Are they supposed to just read all the code at once?

00:13:24.280 --> 00:13:27.600
Is to fade in the code a snippet at a time.

00:13:27.600 --> 00:13:30.140
Highlight the piece that you're talking about.

00:13:30.140 --> 00:13:34.340
And then for the next slide or the next fade in, fade in the new piece of code.

00:13:34.340 --> 00:13:38.160
And I hadn't actually seen how to do that before.

00:13:38.160 --> 00:13:43.160
But there's it talks about using that using reveal JS and some other tricks to do that.

00:13:43.160 --> 00:13:44.380
Yeah, that's a really nice effect.

00:13:44.380 --> 00:13:49.060
If you're going to have code up there or like even lots of text in any sort of presentation.

00:13:49.060 --> 00:13:51.520
Definitely don't like just blast it all up there.

00:13:51.520 --> 00:13:56.620
Or like let it come in piece by piece or somehow indicate the little sections you're talking about.

00:13:56.620 --> 00:14:01.160
And that definitely makes it more engaging for sure.

00:14:01.160 --> 00:14:05.080
I brought this up also today because I was curious about your choice.

00:14:05.080 --> 00:14:06.860
It sounds like you like live coding as well.

00:14:06.860 --> 00:14:07.780
Watching that at least.

00:14:07.900 --> 00:14:09.580
Yeah, I'm definitely for the live coding.

00:14:09.580 --> 00:14:13.800
Like if people do it well, like when it goes bad, it kind of makes me squirm and be uncomfortable.

00:14:13.800 --> 00:14:23.800
But done well, I think like if you you as an audience member, if you see something being presented and then you actually saw every step of it.

00:14:23.800 --> 00:14:25.500
And then in the end, you see the outcome.

00:14:25.500 --> 00:14:26.900
You're like, well, I saw every bit of it.

00:14:26.900 --> 00:14:28.360
There was nothing that was crazy there.

00:14:28.360 --> 00:14:30.440
And now now it's doing this.

00:14:30.440 --> 00:14:32.280
Like I feel like I could totally do that.

00:14:32.320 --> 00:14:37.360
There's nothing, you know, sort of scary about it anymore once you see it done live.

00:14:37.500 --> 00:14:42.140
And I think a lot of times you can skip over that and just sort of like fling pieces of code together.

00:14:42.140 --> 00:14:44.800
And then you're like, well, yeah, but those are slides.

00:14:44.800 --> 00:14:46.940
Maybe this is a way harder than it sounds.

00:14:46.940 --> 00:14:49.400
You know, if you see it done live, you kind of know how hard it is.

00:14:49.400 --> 00:14:50.500
Yeah, I agree.

00:14:50.500 --> 00:14:54.520
I think I'm going to opt for something almost there first.

00:14:54.520 --> 00:14:55.780
Yeah, of course.

00:14:56.300 --> 00:15:07.580
And I'd also like to hear from listeners to see, I'd like to hear like some live coding horror stories and also some tips for how to do some Python live coding.

00:15:07.580 --> 00:15:10.280
If anybody has any cool tools to share, that'd be great.

00:15:10.280 --> 00:15:11.100
Yeah, sounds awesome.

00:15:11.100 --> 00:15:15.480
All right, before we get to our next topic, let's talk about Datadog.

00:15:15.480 --> 00:15:18.480
So they're sponsoring the show and they're doing really cool stuff.

00:15:18.480 --> 00:15:26.280
So a few performance or bottlenecks in your application that may be in your code, but it might be just somewhere in the whole stack that you're using.

00:15:26.280 --> 00:15:35.200
So like, let's say you have a Python web framework, web app running Flask, and it's built upon Mongo and it's scaled out on Ubuntu running Nginx and MicroWSGI.

00:15:35.200 --> 00:15:39.840
With Datadog, you can actually monitor all of those pieces as a whole.

00:15:39.840 --> 00:15:46.140
So that's super powerful if you want to understand like really why your app's slow and not just why your Python code is slow.

00:15:46.140 --> 00:15:50.900
So they have a great getting started tutorial and you can check that out, get a free Datadog t-shirt.

00:15:50.900 --> 00:15:55.120
So just visit pythonbytes.fm/Datadog and see what they've got to offer.

00:15:55.120 --> 00:15:55.640
It's pretty cool.

00:15:55.640 --> 00:15:56.200
That's cool.

00:15:56.300 --> 00:15:56.440
Yeah.

00:15:56.440 --> 00:15:58.600
And thank you Datadog for keeping the show rolling.

00:15:58.600 --> 00:15:59.700
All right.

00:15:59.700 --> 00:16:02.760
Let's talk, speaking of web, let's talk a little bit about REST.

00:16:02.760 --> 00:16:03.300
Okay.

00:16:03.300 --> 00:16:03.700
All right.

00:16:03.700 --> 00:16:04.680
So I mentioned Flask.

00:16:04.680 --> 00:16:05.680
I mentioned Pyramid.

00:16:05.680 --> 00:16:06.940
There's Django, of course.

00:16:06.940 --> 00:16:10.040
Those are the three sort of high level web frameworks.

00:16:10.040 --> 00:16:12.400
And they're great.

00:16:12.400 --> 00:16:14.680
They're good for building web applications.

00:16:14.680 --> 00:16:19.200
There's extensions or even they themselves are good for building RESTful services.

00:16:19.640 --> 00:16:26.380
But there's two really interesting web API frameworks in Python that a listener suggested we talk about.

00:16:26.380 --> 00:16:28.240
And I'm excited to talk about them.

00:16:28.240 --> 00:16:32.200
So there's these two called one is Falcon and one is Hug.

00:16:32.520 --> 00:16:34.460
First of all, those are pretty good names for frameworks, right?

00:16:34.460 --> 00:16:35.300
Yeah, they're pretty good.

00:16:35.300 --> 00:16:37.300
I've heard of Hug, but I've never heard of Falcon.

00:16:37.300 --> 00:16:37.600
Yeah.

00:16:37.680 --> 00:16:42.820
So I just had the Falcon guys on Talk Python To Me last week on episode 129.

00:16:42.820 --> 00:16:49.240
And that is a super low level, really high performance, RESTful framework.

00:16:49.240 --> 00:16:55.840
So they call it a bare metal Python web API for building very fast backends and microservices.

00:16:55.840 --> 00:17:00.600
And they don't see it as competing with the frameworks I mentioned, but they see it as more complimentary.

00:17:00.600 --> 00:17:02.000
Like you write your app in that.

00:17:02.080 --> 00:17:05.100
And if you need like that super fast little service, you use this.

00:17:05.100 --> 00:17:09.640
And it even works on PyPy for extra speed boost.

00:17:09.640 --> 00:17:10.960
So that's cool.

00:17:10.960 --> 00:17:12.860
And you can use Falcon and it's really, really low level.

00:17:12.860 --> 00:17:20.300
And then there's Hug, which is actually a web service RESTful API built upon Falcon.

00:17:20.300 --> 00:17:29.940
So Hug is using Falcon for its low level capabilities, but then Hug is like a simplification on top of these APIs.

00:17:30.120 --> 00:17:33.180
So you can do really interesting stuff with Hug.

00:17:33.180 --> 00:17:40.220
Like you just put a decorator onto a function and all of a sudden it becomes an API that you can work with.

00:17:40.220 --> 00:17:45.020
It might be a method on a class, but you can work with that really simply.

00:17:45.020 --> 00:17:50.400
And one of the unique things about it is it comes with built-in self-documented APIs.

00:17:50.400 --> 00:17:51.160
Right?

00:17:51.160 --> 00:17:54.660
So it will like tell, you can ask it what your functions are and it'll give you a description.

00:17:55.340 --> 00:17:59.380
And they're exposed over, you can expose them in different ways.

00:17:59.380 --> 00:18:10.920
So maybe I have an API that I can access over HTTP, but I could also make that a Python package where it exposes that API and make it like a command line thing where it exposes that as a command line thing.

00:18:10.920 --> 00:18:13.720
And those are all the same bits of code, just exposed differently with Hug.

00:18:13.720 --> 00:18:14.320
Oh, that's cool.

00:18:14.320 --> 00:18:14.600
Yeah.

00:18:14.600 --> 00:18:15.460
That's pretty neat, right?

00:18:15.460 --> 00:18:15.820
Yeah.

00:18:15.820 --> 00:18:16.580
I got to try that out.

00:18:16.640 --> 00:18:21.900
So if you're building restful services, give these two things a look depending on which level you want to work at.

00:18:21.900 --> 00:18:22.600
They're kind of neat.

00:18:22.600 --> 00:18:23.480
All right.

00:18:23.480 --> 00:18:25.040
But you might want to test those, right?

00:18:25.040 --> 00:18:25.960
You should test them.

00:18:25.960 --> 00:18:31.080
So if you are testing them, you might want to test them in multiple environments.

00:18:31.080 --> 00:18:33.240
And so Tox would be a good thing.

00:18:33.240 --> 00:18:33.440
Yeah.

00:18:33.440 --> 00:18:36.460
We got a conversation, had a nice conversation with some listeners on Twitter.

00:18:36.460 --> 00:18:37.480
Like, hey, what is Tox?

00:18:37.480 --> 00:18:38.540
Will you tell us what Tox is?

00:18:38.540 --> 00:18:39.940
So Brian, tell me what Tox is.

00:18:40.020 --> 00:18:47.080
Well, yeah, first off, we're going to give a little sneak peek on what Tox is, but I think it does quite a bit.

00:18:47.080 --> 00:18:56.680
So I reached out to one of the Tox developers, Oliver Bestweller, and he has agreed to come on Testing Code to have a longer conversation.

00:18:56.680 --> 00:18:59.800
We haven't scheduled that yet, but we'll let you know when it's up.

00:18:59.800 --> 00:19:03.240
But for now, Tox, and this is a quote from Oliver,

00:19:03.240 --> 00:19:09.960
the name of the Tox automation project derives from testing out of the box.

00:19:09.960 --> 00:19:11.800
I didn't know that before I read this.

00:19:11.800 --> 00:19:16.320
But it aims to automate and standardize testing in Python.

00:19:16.320 --> 00:19:23.180
It's conceptually above pytest or whatever else you use and serves as a command line front end.

00:19:23.180 --> 00:19:29.580
I think of it similar to something like a Travis CI or something that you could do on the command line.

00:19:29.580 --> 00:19:29.860
Right.

00:19:29.860 --> 00:19:31.940
It lets you pick different versions of Python.

00:19:31.940 --> 00:19:35.720
So you could say Python 2.7 and Python 3.5.

00:19:36.400 --> 00:19:40.440
And it basically depends upon pytest or something like that, right?

00:19:40.440 --> 00:19:44.760
It'll orchestrate running your tests on pytest in those environments, for example.

00:19:44.760 --> 00:19:45.160
Yeah.

00:19:45.160 --> 00:19:49.320
And one of the things that I really like about it is when you are distributing something,

00:19:49.320 --> 00:19:52.540
it's not just your code that you need to test.

00:19:52.540 --> 00:19:55.640
It's also the packaging and installation process and all of that.

00:19:55.640 --> 00:19:57.100
You want to make sure that all that works.

00:19:57.640 --> 00:20:04.740
And so essentially what it does in this normal, this is the normal use model, is to list a handful of Python versions.

00:20:04.740 --> 00:20:19.020
And then what Tox will do is use your setup.py file to create a source distribution and then create a virtual environment and then install dependencies and then install your package and then run the tests.

00:20:19.280 --> 00:20:22.200
And then do all of that for each of the different Pythons.

00:20:22.200 --> 00:20:27.160
So using different versions of Python to run the setup all the way through running the tests.

00:20:27.160 --> 00:20:27.980
Yeah, that's really cool.

00:20:27.980 --> 00:20:31.920
And that's really, if you let it all do all that, you have to wait for it.

00:20:31.920 --> 00:20:37.040
It's slower because you're creating that distribution every time and other things.

00:20:37.520 --> 00:20:47.600
But there are, I left a, there's a couple of links in the show notes on how to, on some tips and patterns and that are, you can speed things up if you need to.

00:20:47.600 --> 00:20:52.820
But just having this ability just at your desktop in the command line is really great for testing your stuff.

00:20:52.820 --> 00:20:53.680
Yeah, that's really cool.

00:20:53.680 --> 00:21:02.940
And I believe there was something to do with Python 2 and that original vulnerability stuff that people discovered on PyPI, right?

00:21:02.940 --> 00:21:06.320
Like the vulnerable code only ran on Python 2 or something, right?

00:21:06.320 --> 00:21:07.300
And that's how they discovered it?

00:21:07.360 --> 00:21:08.420
I think that's the case.

00:21:08.420 --> 00:21:09.840
That's, I don't have it.

00:21:09.840 --> 00:21:11.260
I don't have it pulled up either, but yeah.

00:21:11.260 --> 00:21:13.780
A source to verify that.

00:21:13.780 --> 00:21:20.320
But I, like on Twitter, somebody said, oh yeah, and we found this because of talks and testing this stuff on Python 3.

00:21:20.320 --> 00:21:21.060
Yeah, that's beautiful.

00:21:21.060 --> 00:21:22.680
All right, awesome.

00:21:22.680 --> 00:21:26.380
So last one, I want to talk about legacy Python a little bit as well.

00:21:26.380 --> 00:21:28.960
So there's Flake 8, right?

00:21:28.960 --> 00:21:33.080
Which is a linter and talks about your code and tells you what you're doing right and wrong, things like that.

00:21:33.080 --> 00:21:37.080
There's a, I think it's a plugin called Flake 8 Tidy Imports.

00:21:37.200 --> 00:21:41.820
And so one of our listeners said, hey, I added this cool feature to Tidy Imports.

00:21:41.820 --> 00:21:44.560
And I thought it was pretty cool, so I thought I'd highlight it here.

00:21:44.560 --> 00:21:48.800
People who are moving to Python 3, you might want to check this out.

00:21:49.060 --> 00:21:55.800
So you can declare Python 2 to 3 as a banned module import in Flake 8.

00:21:55.800 --> 00:22:03.340
And then it'll go through and actually find any of the modules that would have worked in Python 2, but not in Python 3.

00:22:03.340 --> 00:22:05.580
For example, mock, right?

00:22:05.840 --> 00:22:11.540
So you used to say import mock, but now you would just use import unit test.mock as mock or something like this.

00:22:11.540 --> 00:22:12.160
Right?

00:22:12.160 --> 00:22:13.320
So it would actually give you that warning.

00:22:13.320 --> 00:22:15.460
Like in Python 3, you don't use mock anymore.

00:22:15.460 --> 00:22:16.640
You use unit test.mock.

00:22:16.640 --> 00:22:19.040
And it gives you like a nice, useful message.

00:22:19.040 --> 00:22:24.300
Not just this was not, you shouldn't use this anymore, but here's the thing to use instead as you do this upgrade.

00:22:24.460 --> 00:22:27.660
So it kind of shames people a little bit for using the old stuff, which is good.

00:22:27.660 --> 00:22:28.820
Yeah, I really like it.

00:22:28.820 --> 00:22:29.940
Actually, I use that as well.

00:22:29.940 --> 00:22:30.380
That's great.

00:22:30.380 --> 00:22:31.400
Very nice.

00:22:31.400 --> 00:22:33.280
And I have a bonus one for us, actually.

00:22:33.280 --> 00:22:34.220
I want to throw it in really quick.

00:22:34.220 --> 00:22:34.500
Okay.

00:22:34.500 --> 00:22:39.480
So Jesse Davis from MongoDB did a PyMongo driver, stuff like that.

00:22:39.480 --> 00:22:43.520
He actually is the organizer for PyGotham.

00:22:43.520 --> 00:22:46.240
So that is the PyCon for New York City.

00:22:46.240 --> 00:22:50.980
And he's really into helping and mentoring people, especially people who are new speakers.

00:22:51.100 --> 00:23:02.080
So he's running this project where he's trying to raise money to hire a speaking coach to work with and mentor first-time speakers who he's getting to come speak at PyGotham.

00:23:02.080 --> 00:23:03.760
And he's trying to raise $1,200.

00:23:03.760 --> 00:23:09.340
And it turns out just like today, yeah, as of today, he's raised his goal.

00:23:09.340 --> 00:23:11.920
But I'm sure that he can do more if he had some more money.

00:23:11.920 --> 00:23:18.220
So I'm linking to his article called Help Me Offer Coaching to First-Time PyGotham Speakers, which I thought was a cool project.

00:23:18.580 --> 00:23:24.000
And I'm happy to spread the word for Jesse because, you know, it's great to have more people coming in to the community.

00:23:24.000 --> 00:23:26.800
Yeah, I think that things like this are awesome.

00:23:26.800 --> 00:23:28.760
And I like covering it anyway.

00:23:28.760 --> 00:23:32.640
And I asked him to maybe write up something after the conference.

00:23:32.640 --> 00:23:34.800
But I'd like to hear how that goes.

00:23:34.800 --> 00:23:40.300
I'd like to hear from the people that got coached and how the process went, if it helped things.

00:23:40.300 --> 00:23:41.380
Yeah, that'd be really cool.

00:23:41.380 --> 00:23:44.040
Sort of retrospective, like, was this actually useful?

00:23:44.040 --> 00:23:45.100
Like, what did you learn?

00:23:45.200 --> 00:23:45.340
Right.

00:23:45.340 --> 00:23:47.860
Like, to see if it's something we should be doing as a community.

00:23:47.860 --> 00:23:48.220
Yeah.

00:23:48.220 --> 00:23:57.820
And then other conferences, and I don't have any links right now, but some conferences do, like, mentors for submitting your proposal.

00:23:57.820 --> 00:23:59.180
So a talk proposal.

00:23:59.180 --> 00:24:05.060
They'll have a mentor program so you can work with somebody to build up your proposal in the first place.

00:24:05.060 --> 00:24:05.420
Yeah.

00:24:05.540 --> 00:24:07.940
That's kind of the first step to be in a first-time speaker.

00:24:07.940 --> 00:24:08.580
Okay, cool.

00:24:08.580 --> 00:24:09.000
Awesome.

00:24:09.000 --> 00:24:10.000
Well, good job, Jesse.

00:24:10.000 --> 00:24:11.080
How about you?

00:24:11.080 --> 00:24:12.180
What other news you got?

00:24:12.180 --> 00:24:15.800
Have you forgotten about your book and you're just, like, relaxing, living life again?

00:24:15.800 --> 00:24:16.760
It's printing.

00:24:16.760 --> 00:24:17.760
No, I haven't forgotten.

00:24:17.760 --> 00:24:20.760
But I am relaxing a lot more.

00:24:20.760 --> 00:24:22.660
And there's sunshine outside.

00:24:22.660 --> 00:24:24.420
I'm going outside more, which is good.

00:24:24.420 --> 00:24:25.540
Not sunshine today.

00:24:25.540 --> 00:24:26.520
You actually see the outside.

00:24:26.520 --> 00:24:28.440
Yeah, but I'm seeing the outside.

00:24:28.440 --> 00:24:29.520
Yeah, that's awesome.

00:24:29.520 --> 00:24:31.760
But the physical, you can order them now.

00:24:31.760 --> 00:24:34.040
Apparently, they're printing and shipping.

00:24:34.380 --> 00:24:35.160
So that's awesome.

00:24:35.160 --> 00:24:36.080
Yeah, very good.

00:24:36.080 --> 00:24:36.440
Very good.

00:24:36.440 --> 00:24:37.460
That's great to hear.

00:24:37.460 --> 00:24:42.620
So I remember last week I talked about adding Switch to Python and I said I'll put it up on GitHub.

00:24:42.620 --> 00:24:43.520
Yeah, and you did.

00:24:43.520 --> 00:24:44.100
I did.

00:24:44.100 --> 00:24:47.900
And I would say about 75% of the people said it was awesome.

00:24:47.900 --> 00:24:49.080
So cool.

00:24:49.080 --> 00:24:52.020
And 25% of the people said, please, no, don't do this.

00:24:52.020 --> 00:24:55.400
But, you know, you can't please everyone and it's not changing the language.

00:24:55.400 --> 00:24:58.260
It's just a package on GitHub.

00:24:58.260 --> 00:24:59.440
You can do whatever you want with it.

00:25:00.020 --> 00:25:06.360
So anyway, it was actually in the top Python trending packages on GitHub out of all Python packages.

00:25:06.360 --> 00:25:07.540
Sorry, repos.

00:25:07.540 --> 00:25:08.160
Wow, really?

00:25:08.160 --> 00:25:08.660
Yeah, yeah.

00:25:08.660 --> 00:25:09.540
Last week it was pretty awesome.

00:25:09.540 --> 00:25:10.060
That's great.

00:25:10.180 --> 00:25:15.020
And it was on, it had like 175 comments on Reddit or something.

00:25:15.020 --> 00:25:18.920
So it's an interesting set of conversations that comes up around it.

00:25:19.120 --> 00:25:23.240
So that was a follow-up to last week where, yeah, where I talked about that.

00:25:23.240 --> 00:25:29.680
And then also I'm writing a free MongoDB course that's going to complement my paid MongoDB course, right?

00:25:29.680 --> 00:25:31.860
Like a short one that's an intro sort of thing.

00:25:31.860 --> 00:25:34.580
So people can, there's a link at the bottom of the show notes.

00:25:34.580 --> 00:25:35.900
People can sign up to get notified.

00:25:35.900 --> 00:25:37.040
That'll probably be out.

00:25:37.040 --> 00:25:39.360
I finished writing that this week, like this morning.

00:25:39.360 --> 00:25:41.640
And I'll probably have that out in a few weeks.

00:25:41.640 --> 00:25:42.240
That's great.

00:25:42.240 --> 00:25:43.180
Yeah, should be fun.

00:25:43.180 --> 00:25:44.140
All right.

00:25:44.140 --> 00:25:48.380
Well, Brian, thanks for doing all the research or having our listeners do some research for you.

00:25:48.380 --> 00:25:50.320
It was really fun to talk about this.

00:25:50.320 --> 00:25:58.700
And if you guys have thoughts, especially on the PyPI security thing, go to pythonbytes.fm/44 and add your thoughts at the bottom.

00:25:58.700 --> 00:26:00.700
This is kind of a big deal.

00:26:00.700 --> 00:26:04.780
Yeah, and thanks to everybody for helping come up with ideas for the show.

00:26:04.780 --> 00:26:06.020
We always appreciate it.

00:26:06.020 --> 00:26:06.240
Yep.

00:26:06.240 --> 00:26:06.760
Keep it coming.

00:26:06.760 --> 00:26:07.560
Very much appreciated.

00:26:07.560 --> 00:26:08.080
All right.

00:26:08.080 --> 00:26:08.680
Bye, Brian.

00:26:08.680 --> 00:26:09.020
Bye, everyone.

00:26:09.020 --> 00:26:12.640
Thank you for listening to Python Bytes.

00:26:12.640 --> 00:26:15.180
Follow the show on Twitter via at Python Bytes.

00:26:15.180 --> 00:26:18.080
That's Python Bytes as in B-Y-T-E-S.

00:26:18.080 --> 00:26:21.520
And get the full show notes at pythonbytes.fm.

00:26:21.520 --> 00:26:25.840
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:25.840 --> 00:26:28.540
We're always on the lookout for sharing something cool.

00:26:28.540 --> 00:26:31.940
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:31.940 --> 00:26:35.560
Thank you for listening and sharing this podcast with your friends and colleagues.

