WEBVTT

00:00:00.001 --> 00:00:06.600
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.600 --> 00:00:10.880
It's April 18th, 2017. I'm Michael Kennedy.

00:00:10.880 --> 00:00:11.800
And I'm Brian Okken.

00:00:11.800 --> 00:00:16.020
And we have a bunch of cool stuff to share with you. But before we do, Brian, we have to say thank you to Advanced Digital.

00:00:16.020 --> 00:00:18.080
Oh, yeah. Thank you, Advanced Digital.

00:00:18.080 --> 00:00:24.280
They're a brand new sponsor of the show, and they have some really cool Python job opportunities. We'll talk about that later.

00:00:24.280 --> 00:00:26.140
Let's talk about the Python path now.

00:00:26.140 --> 00:00:32.140
I liked this. Somebody came out with a... I should write names down. Let me look it up just a second.

00:00:32.140 --> 00:00:37.640
Okay. Moshe Zedka came out with an article called Python Path Considered Harmful.

00:00:37.640 --> 00:00:52.040
And this is a good article. It's very short. And I guess I had forgotten about the Python path because fairly early in my Python career, realized it's not useful. It's only bad. Ignore that it's there.

00:00:52.280 --> 00:01:06.460
So what the Python path is, it's an environmental variable that you can put directories in so that you add to the places where Python will look for import modules or modules or packages to import.

00:01:06.900 --> 00:01:12.280
Every time I've ever thought maybe I had a good use for it, I've regretted it later.

00:01:12.280 --> 00:01:25.000
So, and one of the classic examples is that if you had a package, you would, I guess, maybe want to add the top directory for a local package to the path.

00:01:25.240 --> 00:01:32.140
But there's a whole bunch of stuff in the top directory that's not appropriate to be imported, like the setup.py and so forth.

00:01:32.140 --> 00:01:39.640
But anyway, just, I guess, a public service announcement. Don't use Python path. Is there a good use for it?

00:01:39.640 --> 00:01:43.700
Yeah, I don't know. I mean, we have virtual directories. Those work pretty well.

00:01:43.700 --> 00:01:50.460
You can Python and, you know, set up py, develop if you want to kind of inject something into the path.

00:01:50.460 --> 00:01:52.760
Like there's a lot of options that don't involve that necessarily.

00:01:52.760 --> 00:02:03.120
Yeah. And also, if you're like, one of the reasons might be if you're developing a local package and you want to be able to import from it, like from your test directory.

00:02:03.120 --> 00:02:13.880
But that's still the best, the best recommendation is to do a pip install dash e to as install editable is the best way to do that.

00:02:13.880 --> 00:02:19.760
Yep, exactly. Exactly. So the one that the first one I want to talk about are actually algorithms.

00:02:19.760 --> 00:02:25.920
There was a really interesting article about how I think we talked about this one.

00:02:25.920 --> 00:02:36.760
And I'm not sure if I'm blending in my mind with another article I read, but basically that we can use languages like C and stuff to try to make our code faster by trying to get closer to the metal.

00:02:36.760 --> 00:02:43.800
But a lot of times a way to make your code faster is actually to have better understanding and visibility of the algorithms.

00:02:43.800 --> 00:02:51.260
Right. So you could try to make the bubble sort really, really fast and see or you could just use quicksort in pretty much any language.

00:02:51.260 --> 00:03:00.140
Right. And it's way, way faster. So I ran across this GitHub repo that is just a bunch of minimal examples of data structures and algorithms in Python.

00:03:00.140 --> 00:03:05.680
And it's key on your GitHub dot com slash key on K E O N slash algorithms.

00:03:05.680 --> 00:03:12.780
And there's just tons of really cool examples. So there's there are different topics like arrays and graphs and trees.

00:03:12.780 --> 00:03:23.520
So like in arrays, there might be like the ability to flatten an array or to merge intervals on arrays or in graphs, you can clone it or traverse it or find paths through it.

00:03:23.520 --> 00:03:27.440
All those types of algorithms that are like, wow, that actually solves exactly what I need.

00:03:27.440 --> 00:03:30.120
And here's a little example. I thought it was really cool.

00:03:30.120 --> 00:03:32.860
And I think it helps professional programmers.

00:03:32.860 --> 00:03:39.380
But if you're looking for a job, there's a lot of a lot of sort of interview type questions around algorithms and data structures.

00:03:39.380 --> 00:03:40.920
So it might also be worth studying there.

00:03:40.920 --> 00:03:42.820
Oh, that'd be a good place. Yeah.

00:03:42.820 --> 00:03:47.800
Yeah. So I don't I'm not sure how many there are, maybe 50 data structures and algorithms, but pretty cool.

00:03:47.800 --> 00:03:48.600
That's neat. Cool.

00:03:48.600 --> 00:03:52.120
Yeah. So if you want to brush up on your algorithms, then there's a place to do it.

00:03:52.160 --> 00:03:59.660
Well, speaking of data structures, in episode 11, we talked about a package called adders, A-T-T-R-S.

00:03:59.660 --> 00:04:01.860
Adders has a lot of fans. People love that library.

00:04:01.860 --> 00:04:06.880
Yeah. It's a cool package to be able to make classes easily.

00:04:06.880 --> 00:04:10.660
And just the attributes of classes are easy to define.

00:04:10.660 --> 00:04:12.660
Right. Kind of make them complete as well. Right.

00:04:12.660 --> 00:04:16.960
Give them the equivalency tests and all the various things, not just here are the fields. Right.

00:04:17.120 --> 00:04:21.920
Right. And this I ran this is an older article from from last year.

00:04:21.920 --> 00:04:24.740
I guess it's not that old. It's from Glyph.

00:04:24.740 --> 00:04:31.300
And it's just a really good article about the article is titled The One Python Library Everyone Needs.

00:04:31.300 --> 00:04:44.440
And he talks about the annoying bit of having to create your own classes and make sure that the copies and less than all work and the sorting and just letting that actors work for you.

00:04:44.520 --> 00:04:48.880
He also discusses briefly some problems with named tuple.

00:04:48.880 --> 00:04:51.800
But I'm a huge fan of named tuple still.

00:04:51.800 --> 00:04:57.260
And I don't know if I buy his slamming on it too much, but it's been all good for me, I think.

00:04:57.260 --> 00:04:59.560
But now this is really cool.

00:04:59.560 --> 00:05:02.220
And I need to be trying out adders.

00:05:02.220 --> 00:05:05.840
I haven't done it yet, but it seems like, you know, it really does add a lot.

00:05:05.840 --> 00:05:07.300
I should just make it a habit.

00:05:07.300 --> 00:05:08.420
Anyway, it's a good article.

00:05:08.420 --> 00:05:10.220
You know where I would like to try out some new stuff?

00:05:10.220 --> 00:05:10.580
Where?

00:05:10.580 --> 00:05:11.360
At a new job.

00:05:11.360 --> 00:05:12.980
Building cool stuff with Python.

00:05:12.980 --> 00:05:13.900
I would love that.

00:05:13.900 --> 00:05:14.180
Yeah.

00:05:14.180 --> 00:05:20.840
So our sponsor, Advanced Digital, they sponsored this episode of the podcast because they're looking to work with you.

00:05:20.840 --> 00:05:24.200
Everyone out there who knows Python and wants to build cool stuff with Python.

00:05:24.200 --> 00:05:32.840
So Advanced Digital, they, I've never heard of them, but they actually run one of the 10 largest news sites in the U.S. by traffic.

00:05:32.980 --> 00:05:33.980
So they're really high scale.

00:05:33.980 --> 00:05:41.480
So they're located in Jersey City, just across the river from, from Manhattan.

00:05:41.800 --> 00:05:46.120
So, you know, beautiful view, see the Manhattan at night and take the path over there.

00:05:46.120 --> 00:05:48.620
They fund employee development and conferences.

00:05:48.620 --> 00:05:50.680
So you go to PyCon, things like that.

00:05:50.680 --> 00:05:53.620
And they do mostly Python, but they also run other things.

00:05:53.780 --> 00:06:02.360
So if you want to work in an environment like that and do Python for your job, check out python.advance.net and those guys will hook you up.

00:06:02.360 --> 00:06:02.860
That's great.

00:06:02.860 --> 00:06:03.100
Yeah.

00:06:03.100 --> 00:06:03.680
Sounds fun, right?

00:06:03.680 --> 00:06:04.100
Cool.

00:06:04.380 --> 00:06:09.940
So one of the things that makes high traffic websites run well is concurrency, right?

00:06:09.940 --> 00:06:15.040
And we, we kind of beat this drum often, but because it's an awesome drum.

00:06:15.040 --> 00:06:22.400
And last week I had David Beasley on Talk Python To Me to talk about a project he created called Curio.

00:06:22.400 --> 00:06:23.840
Have you heard of Curio?

00:06:23.840 --> 00:06:24.420
I have.

00:06:24.420 --> 00:06:25.580
I haven't played with it though.

00:06:25.580 --> 00:06:31.440
So Curio is, it's an interesting project in that it's kind of like halfway between a framework that you can just grab and use

00:06:31.440 --> 00:06:35.660
and half like really low level building blocks.

00:06:35.660 --> 00:06:46.700
But the idea is we have asyncio in Python since 3.4 and it's got this event loop and allows a sort of asynchronous programming through callbacks.

00:06:46.700 --> 00:06:53.680
But David said, well, what if we actually started from scratch and we had async and await available?

00:06:53.680 --> 00:07:00.380
We had these asynchronous coroutines as the primary concept in an async library for Python.

00:07:00.380 --> 00:07:01.200
What would that look like?

00:07:01.200 --> 00:07:02.080
Well, that's Curio.

00:07:02.080 --> 00:07:11.440
So it's a library for performing concurrent IO operations and system programming tasks like launching subprocesses or threads or whatever.

00:07:11.440 --> 00:07:15.700
And it's solely concerned with the execution of async coroutines.

00:07:15.700 --> 00:07:16.860
It's cool, right?

00:07:16.860 --> 00:07:17.540
Yeah, very.

00:07:17.540 --> 00:07:20.180
And it's got all these really neat data structures.

00:07:20.180 --> 00:07:22.380
So it has this thing called a universal queue.

00:07:22.380 --> 00:07:27.040
And queues are one of the primary ways to communicate between threads without locking.

00:07:27.040 --> 00:07:29.440
So you don't have, you're not sharing the data.

00:07:29.440 --> 00:07:30.800
You make a copy, put it on the queue.

00:07:30.800 --> 00:07:33.860
So you're not worried about race conditions and things like that.

00:07:33.860 --> 00:07:42.960
But one of the problems is the threading model that works for, say, queues between threads is not the same that goes between asyncio execution.

00:07:43.220 --> 00:07:45.340
And that's also not the same that goes between curio.

00:07:45.340 --> 00:07:52.120
So he added this thing called a universal queue that spans all three of those worlds and lets them intercommunicate with each other.

00:07:52.500 --> 00:08:03.380
He has async threads for sort of managing computational execution and threads as if they were asynchronous coroutines and all sorts of stuff like that.

00:08:03.380 --> 00:08:05.860
And you really learn a lot about async if you dig into this thing.

00:08:05.860 --> 00:08:06.180
Okay.

00:08:06.180 --> 00:08:12.140
And you said it is a sort of halfway between something low level and high level.

00:08:12.140 --> 00:08:12.460
Yeah.

00:08:12.460 --> 00:08:13.140
Yeah, exactly.

00:08:13.140 --> 00:08:24.600
So if you want to make, say, like a TCP IP game server with TCP or UDP or something, like it's actually got constructs to say launch TCP server that's async and plug in the callbacks and things like that.

00:08:24.600 --> 00:08:25.240
Oh, wow.

00:08:25.240 --> 00:08:28.420
Yeah, but there's no HTTP layer, right?

00:08:28.420 --> 00:08:29.880
So it's not like a web framework.

00:08:29.880 --> 00:08:32.880
It's not like Sanic or Jepronto or one of those things.

00:08:32.880 --> 00:08:35.380
But it's not super, super low level.

00:08:35.380 --> 00:08:36.660
It has all these building blocks.

00:08:36.660 --> 00:08:51.460
So it's like if I was going to build a framework thing of some sort that did a bunch of asynchronous and I wanted it asynchronous at its core, maybe using Curio as the core of your project to build that framework on top of might be perfect.

00:08:51.460 --> 00:08:53.600
But it's not itself a framework, really.

00:08:53.600 --> 00:08:54.380
Not yet, anyway.

00:08:54.380 --> 00:08:54.940
Okay.

00:08:54.940 --> 00:08:55.680
Interesting.

00:08:55.680 --> 00:08:56.840
I'll have to keep an eye on it.

00:08:56.840 --> 00:08:57.040
Yeah.

00:08:57.040 --> 00:09:01.640
The built-in concepts for tasks and threads and queues and whatnot.

00:09:01.640 --> 00:09:02.360
It's very, very neat.

00:09:02.360 --> 00:09:02.860
Neat.

00:09:02.860 --> 00:09:03.120
Yep.

00:09:03.120 --> 00:09:04.060
All right.

00:09:04.060 --> 00:09:05.760
You have some package sorcery.

00:09:05.760 --> 00:09:18.100
Yeah, I was playing with the SRC and trying to figure out if this section should be package sorcery or use the source, Luke, or to source or not to source.

00:09:18.100 --> 00:09:18.440
Anyway.

00:09:18.440 --> 00:09:19.520
These are all great questions.

00:09:19.520 --> 00:09:26.480
Well, speaking of great questions, in episode 15, we talked about Python packaging.

00:09:26.880 --> 00:09:31.780
And one of the listeners, Christoph, had a question last week.

00:09:31.780 --> 00:09:46.420
And the question really was that he was reading some other articles that were in conflict and actually starting with the pytest documentation and pointing to an article by Yonel.

00:09:46.420 --> 00:09:47.480
I think it's Yonel.

00:09:47.900 --> 00:09:49.740
It's called packaging and Python library.

00:09:49.740 --> 00:10:08.100
And the conflict really is whether or not a distribution package for, like, if you're going to push it up onto PyPI, should it have all of the module or the source packages, should they be top-level directories or should they be under a SRC directory?

00:10:08.960 --> 00:10:16.040
And the recommendation, some people recommend, and pytest did as well, of using this SRC directory instead.

00:10:16.040 --> 00:10:21.920
And the argument that Yonel puts forth is referenced in lots of places.

00:10:21.920 --> 00:10:24.540
And it actually all sounds good.

00:10:25.100 --> 00:10:37.560
Some of the problems are based on using talks and other testing tools to be able to install things a lot and uninstall easily and not muck with the namespace too much.

00:10:37.560 --> 00:10:41.500
So I went out and tried to find some examples that used this.

00:10:41.500 --> 00:10:44.680
And there's actually had difficulty finding some.

00:10:44.680 --> 00:10:54.760
If this is such a good idea, I guess my question is, why isn't this not promoted more by the Python package authority and their documentation?

00:10:54.760 --> 00:11:00.940
And pytest itself, even though it recommends this, that package doesn't use it.

00:11:00.940 --> 00:11:07.980
So I guess that's my question to the Python community is, should we be using a SRC directory or not?

00:11:07.980 --> 00:11:08.340
Okay.

00:11:08.340 --> 00:11:08.760
Yeah.

00:11:08.760 --> 00:11:15.640
Well, this is a good place to point out at the bottom of every episode, we have a discuss section.

00:11:15.640 --> 00:11:20.120
And people come in and they ask questions and give us feedback on the various episodes.

00:11:20.120 --> 00:11:22.300
And this one came out of one of those, right?

00:11:22.300 --> 00:11:22.600
Yes.

00:11:22.600 --> 00:11:23.380
Yeah, this conversation.

00:11:23.380 --> 00:11:28.060
So if you want to comment on one of these shows, like this is episode 22, pythonbytes.fm/22.

00:11:28.060 --> 00:11:28.620
Boom.

00:11:28.620 --> 00:11:30.880
Go to the bottom and pick it up, right?

00:11:30.880 --> 00:11:32.880
So feel free to jump in.

00:11:32.880 --> 00:11:35.780
And that's probably on episode 21 where this conversation was happening.

00:11:35.780 --> 00:11:36.260
Yeah.

00:11:36.260 --> 00:11:43.420
And I get why a lot of existing projects like requests don't have this in it because they didn't before.

00:11:43.420 --> 00:11:52.040
But if there's a lot of people like Christoph out there that are trying to come up with some new code to share with people and they want to do it the right way.

00:11:52.040 --> 00:11:54.800
And it's a legitimate question is, what is the right way?

00:11:54.800 --> 00:11:55.440
Yeah, absolutely.

00:11:55.440 --> 00:11:55.980
Yeah.

00:11:55.980 --> 00:11:56.160
Yeah.

00:11:56.160 --> 00:11:56.460
Great.

00:11:56.460 --> 00:11:57.660
Great topic.

00:11:57.860 --> 00:12:05.780
Now, this last one I have is a bit of a downer, but I just want to, I wanted to cover it because I think it's an important topic and we've talked about it a few times.

00:12:05.780 --> 00:12:07.260
And I'm going to say two companies' names.

00:12:07.260 --> 00:12:13.920
But before you think anything negative about these companies, these are the two companies that were funding a thing that nobody else was funding.

00:12:13.920 --> 00:12:16.480
So thank you to them for doing it.

00:12:16.480 --> 00:12:26.460
But it turns out that Intel is pulling funding from its OpenStack effort, like a sort of an initiative that it started with Rackspace.

00:12:26.460 --> 00:12:30.840
So Intel and Rackspace were collaborating on a project called OpenStack Innovation Center.

00:12:30.840 --> 00:12:33.020
And that started back in 2015.

00:12:33.880 --> 00:12:38.580
And it was supposed to be funded through 2018, but actually it got pulled out early.

00:12:38.580 --> 00:12:39.820
Right.

00:12:39.820 --> 00:12:42.140
There was a lot of good things that got done there.

00:12:42.140 --> 00:12:49.300
They said the objective was to create the world's largest OpenStack developer cloud and developer enterprise capabilities with OpenStack.

00:12:49.300 --> 00:12:53.480
And it quickly accomplished the first goal and made a great progress towards the second.

00:12:53.480 --> 00:12:56.820
So that's all good that that was done.

00:12:57.160 --> 00:13:04.620
But it turns out there's 30 Rackspace employees who have been working on this now have two weeks to find another job within the company.

00:13:04.620 --> 00:13:13.160
And so I guess the story here is just, you know, we all need to be vigilant and careful about how we fund our open source work.

00:13:13.160 --> 00:13:20.260
Maybe a little bit of diversification, not in terms of what people are doing, but in terms of the companies that we have supporting us.

00:13:20.260 --> 00:13:28.160
So the more companies contributing smaller amounts, I feel is probably a safer place to be than a few companies contributing huge amounts.

00:13:28.160 --> 00:13:29.740
Like we have the same problem with PyPA.

00:13:29.740 --> 00:13:30.480
Yeah, definitely.

00:13:30.480 --> 00:13:33.560
Or PyPI and the packaging authority and all those guys, right?

00:13:33.560 --> 00:13:35.360
Like that whole set of projects.

00:13:35.360 --> 00:13:35.800
Yes.

00:13:35.800 --> 00:13:37.000
So I don't know.

00:13:37.000 --> 00:13:40.360
I'm going to try to talk about this a little bit at PyCon this year.

00:13:40.360 --> 00:13:43.540
I'll try to do an open session or something if I can pull it together.

00:13:43.540 --> 00:13:48.080
There's not really a good time of the year to try to find another job in two weeks.

00:13:48.080 --> 00:13:49.160
No.

00:13:50.040 --> 00:13:51.080
Anyway, sorry for you guys.

00:13:51.080 --> 00:13:51.580
Definitely not.

00:13:51.580 --> 00:13:53.180
Yeah, that's a real bummer.

00:13:53.180 --> 00:13:54.320
And OpenStack is awesome.

00:13:54.320 --> 00:13:57.040
And oh, this is not, they're pulling their support from OpenStack.

00:13:57.040 --> 00:13:59.380
This is this initiative that was on top of it, but still.

00:13:59.380 --> 00:14:01.020
Okay, so it's not all of OpenStack.

00:14:01.020 --> 00:14:02.260
It's just one part of it?

00:14:02.260 --> 00:14:10.440
No, this was an initiative specifically that they were doing, trying to bring people together around OpenStack and some other stuff.

00:14:10.440 --> 00:14:10.800
Okay.

00:14:10.800 --> 00:14:11.020
Yeah.

00:14:11.020 --> 00:14:11.880
All right.

00:14:11.880 --> 00:14:13.660
Well, that's our news for the week, Brian.

00:14:13.660 --> 00:14:14.640
You got anything in particular?

00:14:14.640 --> 00:14:15.600
No, I don't.

00:14:15.600 --> 00:14:16.280
Yeah, no worries.

00:14:16.280 --> 00:14:18.920
We're still awaiting that book release.

00:14:18.920 --> 00:14:19.820
That's going to be a good day.

00:14:19.820 --> 00:14:22.920
Well, I'm frantically in the middle of edits.

00:14:22.920 --> 00:14:27.480
And there's some incredible, I'm finally working through a lot of the feedback I got from people.

00:14:27.480 --> 00:14:33.160
And I'm just still very humbled by the help I've received by the community.

00:14:33.160 --> 00:14:33.760
It's great.

00:14:33.760 --> 00:14:34.060
Yeah.

00:14:34.180 --> 00:14:34.780
Yeah, that's awesome.

00:14:34.780 --> 00:14:37.380
So I have a quick piece of news for everyone.

00:14:37.780 --> 00:14:44.940
If you are in Europe or you would like to spend a little time in Europe, Europython at Europython.eu.

00:14:45.420 --> 00:14:53.040
Be sure to check that out and get your tickets because they've already sold out the early bird tickets and the main tickets are on sale.

00:14:53.480 --> 00:14:54.100
I've already heard from some people.

00:14:54.100 --> 00:14:57.940
I've heard from some people who were hoping to go to PyCon this year in the U.S.

00:14:57.940 --> 00:14:58.900
Not going.

00:14:58.900 --> 00:14:59.900
Tickets are sold out.

00:14:59.900 --> 00:15:03.120
So if you're in Europe and you want to go, don't wait.

00:15:03.120 --> 00:15:04.680
These things sell out and then you'll be sad.

00:15:04.680 --> 00:15:05.680
Are you going to go, Michael?

00:15:05.680 --> 00:15:06.620
No, not this year.

00:15:06.620 --> 00:15:08.140
I was supposed to go last year.

00:15:08.140 --> 00:15:12.300
I really wanted to, but we were moving back to the U.S. within like a few days of it running.

00:15:12.300 --> 00:15:13.660
So it just didn't work out.

00:15:13.660 --> 00:15:14.080
Yeah.

00:15:14.200 --> 00:15:14.800
Maybe next time.

00:15:14.800 --> 00:15:15.380
Maybe next time.

00:15:15.380 --> 00:15:15.760
Yeah.

00:15:15.760 --> 00:15:16.760
Maybe we can both go.

00:15:16.760 --> 00:15:17.400
That would be awesome.

00:15:17.400 --> 00:15:18.460
All right.

00:15:18.460 --> 00:15:22.720
Well, Brian, thank you for sharing everything with us.

00:15:22.720 --> 00:15:23.340
Thank you.

00:15:23.340 --> 00:15:23.620
Yeah.

00:15:23.620 --> 00:15:24.080
It was fun.

00:15:24.080 --> 00:15:24.760
See you all later.

00:15:24.760 --> 00:15:27.200
Thank you for listening to Python Bytes.

00:15:27.200 --> 00:15:29.760
Follow the show on Twitter via at Python Bytes.

00:15:29.760 --> 00:15:32.640
That's Python Bytes as in B-Y-T-E-S.

00:15:32.640 --> 00:15:36.060
And get the full show notes at pythonbytes.fm.

00:15:36.060 --> 00:15:40.420
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:15:40.420 --> 00:15:43.120
We're always on the lookout for sharing something cool.

00:15:43.600 --> 00:15:46.520
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:15:46.520 --> 00:15:50.120
Thank you for listening and sharing this podcast with your friends and colleagues.

