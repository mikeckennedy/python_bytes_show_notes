
00:00:00.000 --> 00:00:07.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:07.000 --> 00:00:11.000
It's April 18th, 2017. I'm Michael Kennedy.


00:00:11.000 --> 00:00:12.000
And I'm Brian Okken.


00:00:12.000 --> 00:00:16.000
And we have a bunch of cool stuff to share with you. But before we do, Brian, we have to say thank you to Advanced Digital.


00:00:16.000 --> 00:00:18.000
Oh, yeah. Thank you to Advanced Digital.


00:00:18.000 --> 00:00:24.000
They're a brand new sponsor of the show, and they have some really cool Python job opportunities. We'll talk about that later.


00:00:24.000 --> 00:00:26.000
Let's talk about the Python path now.


00:00:26.000 --> 00:00:32.440
I like this. Somebody came out with a, I should write names down. Let me look it up just a


00:00:32.440 --> 00:00:38.640
second. Okay. Moshe Zedka came out with an article called Python Path Considered Harmful.


00:00:38.640 --> 00:00:43.680
And this is a good article. It's very short. And I guess I had forgotten about the Python


00:00:43.680 --> 00:00:51.320
path because fairly early in my Python career, realized it's not useful. It's only bad. Ignore


00:00:51.320 --> 00:00:52.560
that it's there.


00:00:52.560 --> 00:00:55.240
So what the Python path is, it's an environmental variable


00:00:55.240 --> 00:01:01.520
that you can put directories in so that you add to the places


00:01:01.520 --> 00:01:05.320
where Python will look for import modules, or modules


00:01:05.320 --> 00:01:06.960
or packages to import.


00:01:06.960 --> 00:01:10.880
Every time I've ever thought maybe I had a good use for it,


00:01:10.880 --> 00:01:13.320
I've regretted it later.


00:01:13.320 --> 00:01:18.680
And one of the classic examples is that if you had a package,


00:01:18.680 --> 00:01:22.160
you would, I guess, maybe want to add that top directory


00:01:22.160 --> 00:01:25.080
for a local package to the path.


00:01:25.080 --> 00:01:27.320
But there's a whole bunch of stuff in the top directory


00:01:27.320 --> 00:01:29.200
that's not appropriate to be imported,


00:01:29.200 --> 00:01:32.200
like the setup.py and so forth.


00:01:32.200 --> 00:01:37.200
But anyway, just, I guess, a public service announcement.


00:01:37.200 --> 00:01:38.560
Don't use Python path.


00:01:38.560 --> 00:01:39.760
Is there a good use for it?


00:01:39.760 --> 00:01:40.720
Yeah, I don't know.


00:01:40.720 --> 00:01:42.840
I mean, we have virtual directories.


00:01:42.840 --> 00:01:43.880
Those work pretty well.


00:01:43.880 --> 00:01:47.880
You can Python and set up py, develop


00:01:47.880 --> 00:01:50.520
if you want to kind of inject something into the path.


00:01:50.520 --> 00:01:51.480
Like there's a lot of options


00:01:51.480 --> 00:01:52.920
that don't involve that necessarily.


00:01:52.920 --> 00:01:55.320
- Yeah, and also if you're like,


00:01:55.320 --> 00:01:57.400
one of the reasons might be


00:01:57.400 --> 00:01:59.960
if you're developing a local package


00:01:59.960 --> 00:02:01.880
and you want to be able to import from it,


00:02:01.880 --> 00:02:03.260
like from your test directory,


00:02:03.260 --> 00:02:06.080
but that's still the best recommendation


00:02:06.080 --> 00:02:10.240
is to do a pip install -e


00:02:10.240 --> 00:02:13.960
to as install editable is the best way to do that.


00:02:13.960 --> 00:02:15.800
- Yep, exactly, exactly.


00:02:15.800 --> 00:02:21.120
So the one that the first one I want to talk about are actually algorithms.


00:02:21.120 --> 00:02:26.360
There's a really interesting article about how I think we talked about this one and I'm


00:02:26.360 --> 00:02:31.380
not sure if I'm blending in my mind with another article I read, but basically that we can


00:02:31.380 --> 00:02:36.400
use languages like C and stuff to try to make our code faster by trying to get closer to


00:02:36.400 --> 00:02:37.400
the metal.


00:02:37.400 --> 00:02:42.460
But a lot of times, a way to make your code faster is actually to have better understanding


00:02:42.460 --> 00:02:44.360
and visibility the algorithms.


00:02:44.360 --> 00:02:45.360
Right.


00:02:45.360 --> 00:02:49.120
You could try to make the bubble sort really, really fast and see, or you could just use


00:02:49.120 --> 00:02:51.360
quicksort in pretty much any language, right?


00:02:51.360 --> 00:02:52.940
And it's a way, way faster.


00:02:52.940 --> 00:02:58.660
So I ran across this GitHub repo that is just a bunch of minimal examples of data structures


00:02:58.660 --> 00:03:00.960
and algorithms in Python.


00:03:00.960 --> 00:03:06.540
And it's keon, you know, github.com/keon, K E O N slash algorithms.


00:03:06.540 --> 00:03:09.160
And there's just tons of really cool examples.


00:03:09.160 --> 00:03:12.920
So there's there are different topics like arrays and graphs and trees.


00:03:12.920 --> 00:03:17.580
So like in the arrays, there might be like the ability to flatten an array or to merge


00:03:17.580 --> 00:03:23.440
intervals on arrays or in graphs, you can clone it or traverse it or find paths through


00:03:23.440 --> 00:03:24.440
it.


00:03:24.440 --> 00:03:27.160
All those types of algorithms that are like, "Wow, that actually solves exactly what I


00:03:27.160 --> 00:03:29.000
need and here's a little example.


00:03:29.000 --> 00:03:31.380
I thought it was really cool."


00:03:31.380 --> 00:03:34.400
I think it helps professional programmers, but if you're looking for a job, there's a


00:03:34.400 --> 00:03:39.520
lot of interview type questions around algorithms and data structure.


00:03:39.520 --> 00:03:41.000
So it might also be worth studying there.


00:03:41.000 --> 00:03:42.600
Oh, that'd be a good place.


00:03:42.600 --> 00:03:43.100
Yeah.


00:03:43.100 --> 00:03:46.020
So I'm not sure how many there are, maybe 50 data


00:03:46.020 --> 00:03:47.860
structures and algorithms, but pretty cool.


00:03:47.860 --> 00:03:48.380
That's neat.


00:03:48.380 --> 00:03:48.820
Cool.


00:03:48.820 --> 00:03:50.820
Yeah, so if you want to brush up on your algorithms,


00:03:50.820 --> 00:03:52.100
then there's a place to do it.


00:03:52.100 --> 00:03:55.580
Well, speaking of data structures, in episode 11,


00:03:55.580 --> 00:03:59.740
we talked about a package called Atters, A-T-T-R-S.


00:03:59.740 --> 00:04:00.860
Atters has a lot of fans.


00:04:00.860 --> 00:04:01.980
People love that library.


00:04:01.980 --> 00:04:07.060
Yeah, it's a cool package to be able to make classes easily,


00:04:07.060 --> 00:04:10.740
and just the attributes of classes are easy to define.


00:04:10.740 --> 00:04:12.700
Right, kind of make them complete as well, right?


00:04:12.700 --> 00:04:15.340
Give them the equivalency tests and all the various things,


00:04:15.340 --> 00:04:17.100
not just, oh, here are the fields, right?


00:04:17.100 --> 00:04:17.620
Right.


00:04:17.620 --> 00:04:22.100
And this is an older article from last year.


00:04:22.100 --> 00:04:23.780
I guess it's not that old.


00:04:23.780 --> 00:04:25.020
It's from Glyph.


00:04:25.020 --> 00:04:28.820
And it's just a really good article about-- the article


00:04:28.820 --> 00:04:31.860
is titled "The One Python Library Everyone Needs."


00:04:31.860 --> 00:04:34.620
And he talks about the annoying bit


00:04:34.620 --> 00:04:36.460
of having to create your own classes


00:04:36.460 --> 00:04:39.980
and make sure that the copies and less than all work.


00:04:39.980 --> 00:04:44.520
and the sorting and just letting that actors work for you.


00:04:44.520 --> 00:04:49.520
He also discusses briefly some problems with named tuple,


00:04:49.520 --> 00:04:51.940
but I'm a huge fan of named tuple still.


00:04:51.940 --> 00:04:55.940
And I don't know if I buy his slamming on it too much, but.


00:04:55.940 --> 00:04:58.360
- It's been all good for me, I think.


00:04:58.360 --> 00:04:59.640
But now this is really cool.


00:04:59.640 --> 00:05:02.320
And I need to be trying out adders.


00:05:02.320 --> 00:05:04.540
I haven't done it yet, but it seems like,


00:05:04.540 --> 00:05:06.380
you know, it really does add a lot.


00:05:06.380 --> 00:05:07.580
I should just make it a habit.


00:05:07.580 --> 00:05:08.620
- Anyway, it's good article.


00:05:08.620 --> 00:05:10.500
You know where I would like to try out some new stuff?


00:05:10.500 --> 00:05:11.500
Where?


00:05:11.500 --> 00:05:13.220
At a new job, building cool stuff with Python.


00:05:13.220 --> 00:05:14.220
I would love that.


00:05:14.220 --> 00:05:18.980
Yeah, so our sponsor, Advanced Digital, they sponsored this episode of the podcast because


00:05:18.980 --> 00:05:21.440
they're looking to work with you.


00:05:21.440 --> 00:05:24.820
Everyone out there who knows Python and wants to build cool stuff with Python.


00:05:24.820 --> 00:05:31.140
So Advanced Digital, I'd never heard of them, but they actually run one of the 10 largest


00:05:31.140 --> 00:05:33.020
news sites in the US by traffic.


00:05:33.020 --> 00:05:36.900
So they're really high scale Python shop.


00:05:36.900 --> 00:05:41.760
They're located in Jersey City just across the river from from Manhattan.


00:05:41.760 --> 00:05:46.600
So you know, beautiful view, see the Manhattan at night and take the path over there.


00:05:46.600 --> 00:05:50.860
They fund employee development and conferences, you go to PyCon, things like that.


00:05:50.860 --> 00:05:53.780
And they do mostly Python, but they also run other things.


00:05:53.780 --> 00:05:58.900
So if you want to work in an environment like that, and do Python for your job, check out


00:05:58.900 --> 00:06:02.540
And those guys will hook you up.


00:06:02.540 --> 00:06:03.540
That's great.


00:06:03.540 --> 00:06:04.540
Yeah, sounds fun, right?


00:06:04.540 --> 00:06:05.540
Cool.


00:06:05.540 --> 00:06:11.500
So one of the things that makes high traffic websites run well is concurrency, right?


00:06:11.500 --> 00:06:16.100
And we kind of beat this drum often, but because it's an awesome drum.


00:06:16.100 --> 00:06:21.480
And last week I had David Beasley on Talk Python to Me to talk about a project he created


00:06:21.480 --> 00:06:22.480
called Curio.


00:06:22.480 --> 00:06:23.480
You heard of Curio?


00:06:23.480 --> 00:06:24.480
I have.


00:06:24.480 --> 00:06:25.760
I haven't played with it though.


00:06:25.760 --> 00:06:30.060
So Curio is it's an interesting project in that it's kind of like halfway between a framework


00:06:30.060 --> 00:06:35.840
that you can just grab and use and half like really low level building blocks.


00:06:35.840 --> 00:06:42.380
But the idea is, we have asyncio in Python sense three, four, and it's got this event


00:06:42.380 --> 00:06:47.620
loop and allows a sort of asynchronous programming through callbacks.


00:06:47.620 --> 00:06:52.880
But David said, Well, what if we actually started from scratch, and we had async in


00:06:52.880 --> 00:06:53.880
a way and available.


00:06:53.880 --> 00:07:00.560
We had these asynchronous coroutines as the primary concept and an async library for Python.


00:07:00.560 --> 00:07:01.560
What would that look like?


00:07:01.560 --> 00:07:03.000
Well, that's Curio.


00:07:03.000 --> 00:07:08.640
So it's a library for performing concurrent IO operations and system programming tasks


00:07:08.640 --> 00:07:12.300
like launching subprocesses or threads or whatever.


00:07:12.300 --> 00:07:15.520
And it's solely concerned with the execution of async coroutines.


00:07:15.520 --> 00:07:16.520
It's cool, right?


00:07:16.520 --> 00:07:17.520
Yeah, very.


00:07:17.520 --> 00:07:20.320
And it's got all these really neat data structures.


00:07:20.320 --> 00:07:23.200
So it has this thing called a universal queue.


00:07:23.200 --> 00:07:27.680
And cues are one of the primary ways to communicate between threads without locking.


00:07:27.680 --> 00:07:31.400
So you don't have you're not sharing the data, you make a copy, put on the queue.


00:07:31.400 --> 00:07:33.960
So you're not worried about race conditions and things like that.


00:07:33.960 --> 00:07:39.480
But one of the problems is the threading model that works for say, cues between threads is


00:07:39.480 --> 00:07:43.240
not the same that goes between asyncio execution.


00:07:43.240 --> 00:07:45.860
And that's also not the same that goes between curio.


00:07:45.860 --> 00:07:49.800
So he added this thing called a universal universal queue that spans all three of those


00:07:49.800 --> 00:07:52.880
worlds and lets them inter communicate with each other.


00:07:52.880 --> 00:08:01.140
has async threads for sort of managing computational execution and threads as if they were asynchronous


00:08:01.140 --> 00:08:03.380
coroutines and all sorts of stuff like that.


00:08:03.380 --> 00:08:06.020
And you really learn a lot about async if you dig into this thing.


00:08:06.020 --> 00:08:07.020
Okay.


00:08:07.020 --> 00:08:12.460
And you said it is a sort of halfway between something low level and high level?


00:08:12.460 --> 00:08:13.460
Yeah, yeah, exactly.


00:08:13.460 --> 00:08:19.260
So if you want to make say like a TCP/IP game server with TCP or UDP or something like it's


00:08:19.260 --> 00:08:23.920
It's actually got constructs to say launch TCP server that's async and plug in the callbacks


00:08:23.920 --> 00:08:24.920
and things like that.


00:08:24.920 --> 00:08:25.920
Wow.


00:08:25.920 --> 00:08:28.560
Yeah, but there's no there's no HTTP layer, right?


00:08:28.560 --> 00:08:30.120
So it's not like a web framework.


00:08:30.120 --> 00:08:33.840
It's not like Sanic or Gepronto or one of those things.


00:08:33.840 --> 00:08:35.620
But it's not super, super low level.


00:08:35.620 --> 00:08:36.760
It has all these building blocks.


00:08:36.760 --> 00:08:42.700
So it's like, if I was going to build a framework thing of some sort that did a bunch of asynchronous


00:08:42.700 --> 00:08:49.000
and I wanted it asynchronous at its core, maybe using Curio as the core of your project


00:08:49.000 --> 00:08:51.540
to build that framework on top of might be perfect,


00:08:51.540 --> 00:08:54.680
but it's not itself a framework really, not yet anyway.


00:08:54.680 --> 00:08:56.880
- Okay, interesting, I'll have to keep an eye on it.


00:08:56.880 --> 00:09:00.680
- Yeah, it's the built-in concepts for tasks and threads


00:09:00.680 --> 00:09:02.600
and queues and whatnot, very, very neat.


00:09:02.600 --> 00:09:03.740
- Neat. - Yep.


00:09:03.740 --> 00:09:05.900
All right, you have some package sorcery.


00:09:05.900 --> 00:09:10.680
- Yeah, I was playing with the SRC


00:09:10.680 --> 00:09:12.600
and trying to figure out if this section


00:09:12.600 --> 00:09:16.080
should be package sorcery or use the source loop


00:09:16.080 --> 00:09:18.600
or to source or not to source, anyway.


00:09:18.600 --> 00:09:20.960
These are all great questions.


00:09:20.960 --> 00:09:24.520
Well, speaking of great questions, in episode 15,


00:09:24.520 --> 00:09:27.120
we talked about Python packaging.


00:09:27.120 --> 00:09:30.120
And one of the listeners, Christoph,


00:09:30.120 --> 00:09:32.340
had a question last week.


00:09:32.340 --> 00:09:35.160
And the question really was that he


00:09:35.160 --> 00:09:38.840
was reading some other articles that were in conflict


00:09:38.840 --> 00:09:42.920
and actually starting with the pytest documentation


00:09:42.920 --> 00:09:46.800
and pointing to an article by Yono--


00:09:46.800 --> 00:09:49.920
I think it's Yonal, called Packaging in Python Library.


00:09:49.920 --> 00:09:53.080
And the conflict really is whether or not


00:09:53.080 --> 00:09:55.240
a distribution package for, like,


00:09:55.240 --> 00:09:58.480
if you're going to push it up onto PyPI,


00:09:58.480 --> 00:10:03.680
should it have all of the module or the source packages,


00:10:03.680 --> 00:10:05.520
should they be top-level directories,


00:10:05.520 --> 00:10:08.960
or should they be under a SRC directory?


00:10:08.960 --> 00:10:12.240
And the recommendation-- some people recommend,


00:10:12.240 --> 00:10:16.720
and pytest did as well, of using this SRC directory instead.


00:10:16.720 --> 00:10:19.760
And the argument that Yonel puts forth


00:10:19.760 --> 00:10:22.160
is referenced in lots of places.


00:10:22.160 --> 00:10:25.160
And it actually all sounds good.


00:10:25.160 --> 00:10:27.920
Some of the problems are based on using


00:10:27.920 --> 00:10:32.960
TOX and other testing tools to be able to install things a lot


00:10:32.960 --> 00:10:37.080
and uninstall easily and not muck with the namespace


00:10:37.080 --> 00:10:38.040
too much.


00:10:38.040 --> 00:10:41.560
So I went out and tried to find some examples that used this.


00:10:41.560 --> 00:10:45.520
And there's-- actually had difficulty finding some.


00:10:45.520 --> 00:10:48.600
If this is such a good idea, I guess my question is,


00:10:48.600 --> 00:10:52.600
why isn't this not promoted more by the Python Package


00:10:52.600 --> 00:10:55.520
Authority and their documentation?


00:10:55.520 --> 00:10:59.480
And pytest itself, even though it recommends this,


00:10:59.480 --> 00:11:01.000
that package doesn't use it.


00:11:01.000 --> 00:11:05.320
So I guess that's my question to the Python community is,


00:11:05.320 --> 00:11:08.040
should we be using a SRC directory or not?


00:11:08.040 --> 00:11:09.120
OK, yeah.


00:11:09.120 --> 00:11:11.960
Well, this is a good place to point out


00:11:11.960 --> 00:11:15.840
At the bottom of every episode, we have a discuss section


00:11:15.840 --> 00:11:17.960
and people come in and they ask questions


00:11:17.960 --> 00:11:20.200
and give us feedback on the various episodes.


00:11:20.200 --> 00:11:22.400
And this one came out of one of those, right?


00:11:22.400 --> 00:11:23.520
- Yes. - Yeah, this conversation.


00:11:23.520 --> 00:11:25.160
So if you want to comment on one of these shows,


00:11:25.160 --> 00:11:28.440
like this is episode 22, pythonbytes.fm/22,


00:11:28.440 --> 00:11:30.920
boom, go to the bottom and pick it up, right?


00:11:30.920 --> 00:11:32.920
So feel free to jump in.


00:11:32.920 --> 00:11:34.640
And that's probably on episode 21


00:11:34.640 --> 00:11:36.120
where this conversation was happening.


00:11:36.120 --> 00:11:39.460
- Yeah, and I get why a lot of existing projects


00:11:39.460 --> 00:11:41.800
like requests don't have this in it


00:11:41.800 --> 00:11:43.960
because they didn't before.


00:11:43.960 --> 00:11:47.600
But if there's a lot of people like Christoph out there


00:11:47.600 --> 00:11:49.640
that are trying to come up with some new code


00:11:49.640 --> 00:11:50.840
to share with people,


00:11:50.840 --> 00:11:52.080
and they want to do it the right way.


00:11:52.080 --> 00:11:54.880
And it's a legitimate question is what is the right way?


00:11:54.880 --> 00:11:55.840
- Yeah, absolutely.


00:11:55.840 --> 00:11:57.900
Yeah, yeah, great, great topic.


00:11:57.900 --> 00:12:00.800
Now, this last one I have is a bit of a downer,


00:12:00.800 --> 00:12:01.620
but I just want to,


00:12:01.620 --> 00:12:04.400
I wanted to cover it because I think it's an important topic


00:12:04.400 --> 00:12:05.860
and we've talked about it a few times.


00:12:05.860 --> 00:12:07.840
And I'm going to say two companies names.


00:12:07.840 --> 00:12:10.920
But before you think anything negative about these companies,


00:12:10.920 --> 00:12:12.840
These are the two companies that were funding a thing


00:12:12.840 --> 00:12:14.080
that nobody else was funding.


00:12:14.080 --> 00:12:16.520
So thank you to them for doing it.


00:12:16.520 --> 00:12:20.200
But it turns out that Intel is pulling funding


00:12:20.200 --> 00:12:22.600
from its OpenStack effort,


00:12:22.600 --> 00:12:26.680
like a sort of an initiative that it started with Rackspace.


00:12:26.680 --> 00:12:28.560
So Intel and Rackspace were collaborating


00:12:28.560 --> 00:12:31.320
on a project called OpenStack Innovation Center,


00:12:31.320 --> 00:12:34.000
and that started back in 2015.


00:12:34.000 --> 00:12:36.120
And it was supposed to be funded through 2018,


00:12:36.120 --> 00:12:40.560
but actually it got pulled out early, right?


00:12:40.560 --> 00:12:53.560
There was a lot of good things that got done there. They said the objective was to create the world's largest open stack developer cloud and developer enterprise capabilities with open stack and it quickly accomplished the first goal and made a great progress towards the second.


00:12:53.560 --> 00:13:04.560
So that's all good that that was done. But it turns out there's 30 Rackspace employees who have been working on this now have two weeks to find another job within the company.


00:13:04.560 --> 00:13:10.800
And so I guess the story here is just, you know, we all need to be vigilant and careful


00:13:10.800 --> 00:13:13.860
about how we fund our open source work.


00:13:13.860 --> 00:13:17.440
Maybe a little bit of diversification, not in terms of what people are doing, but in


00:13:17.440 --> 00:13:20.400
terms of the companies that we have supporting us.


00:13:20.400 --> 00:13:25.720
So the more companies contributing smaller amounts, I feel is probably a safer place


00:13:25.720 --> 00:13:28.260
to be than a few companies contributing huge amounts.


00:13:28.260 --> 00:13:29.760
Like we have the same problem with PyPA.


00:13:29.760 --> 00:13:30.760
Yeah, definitely.


00:13:30.760 --> 00:13:33.640
and the packaging authority and all those guys, right?


00:13:33.640 --> 00:13:35.560
Like that whole set of projects.


00:13:35.560 --> 00:13:36.400
- Yes.


00:13:36.400 --> 00:13:38.680
- So I don't know, I'm gonna try to talk about this


00:13:38.680 --> 00:13:40.480
a little bit at PyCon this year.


00:13:40.480 --> 00:13:42.240
I'll try to do an open session or something


00:13:42.240 --> 00:13:43.800
if I can pull it together.


00:13:43.800 --> 00:13:45.400
- There's not really a good time of the year


00:13:45.400 --> 00:13:48.980
to try to find another job in two weeks.


00:13:48.980 --> 00:13:50.120
- No.


00:13:50.120 --> 00:13:51.080
- Anyway, sorry for you guys.


00:13:51.080 --> 00:13:51.980
- Definitely not.


00:13:51.980 --> 00:13:54.720
Yeah, that's a real bummer and OpenStack is awesome.


00:13:54.720 --> 00:13:57.120
This is not, they're pulling their support from OpenStack.


00:13:57.120 --> 00:13:59.480
This is this initiative that was on top of it, but still.


00:13:59.480 --> 00:14:01.120
- Okay, so it's not all of OpenStack,


00:14:01.120 --> 00:14:02.320
it's just one part of it?


00:14:02.320 --> 00:14:05.680
- No, this was an initiative specifically


00:14:05.680 --> 00:14:08.880
that they were doing, trying to bring people together


00:14:08.880 --> 00:14:10.640
around OpenStack and some other stuff.


00:14:10.640 --> 00:14:11.720
- Okay. - Yeah.


00:14:11.720 --> 00:14:13.800
All right, well, that's our news for the week, Brian.


00:14:13.800 --> 00:14:15.040
You got anything in particular?


00:14:15.040 --> 00:14:15.860
- No, I don't.


00:14:15.860 --> 00:14:16.700
- Yeah, no worries.


00:14:16.700 --> 00:14:19.040
We're still awaiting that book release.


00:14:19.040 --> 00:14:19.940
That's gonna be a good day.


00:14:19.940 --> 00:14:23.080
- Well, I'm frantically in the middle of edits


00:14:23.080 --> 00:14:24.820
and there's some incredible,


00:14:24.820 --> 00:14:26.760
I'm finally working through a lot of the feedback


00:14:26.760 --> 00:14:27.640
I got from people


00:14:27.640 --> 00:14:32.320
And I'm just still very humbled by the help I've received


00:14:32.320 --> 00:14:33.480
by the community.


00:14:33.480 --> 00:14:34.320
It's great.


00:14:34.320 --> 00:14:35.920
- Yeah, that's awesome.


00:14:35.920 --> 00:14:37.960
So I have a quick piece of news for everyone.


00:14:37.960 --> 00:14:40.240
If you are in Europe or you would like to spend


00:14:40.240 --> 00:14:41.960
a little time in Europe,


00:14:41.960 --> 00:14:45.680
europython@europython.eu,


00:14:45.680 --> 00:14:47.940
be sure to check that out and get your tickets


00:14:47.940 --> 00:14:50.480
because they've already sold out the early bird tickets


00:14:50.480 --> 00:14:53.660
and the main tickets are on sale.


00:14:53.660 --> 00:14:55.360
I've already heard from some people


00:14:55.360 --> 00:14:58.460
who were hoping to go to PyCon this year in the US,


00:14:58.460 --> 00:15:00.020
not going, tickets are sold out.


00:15:00.020 --> 00:15:02.700
So if you're in Europe and you wanna go,


00:15:02.700 --> 00:15:04.940
don't wait, these things sell out and then you'll be sad.


00:15:04.940 --> 00:15:05.860
- Are you gonna go, Michael?


00:15:05.860 --> 00:15:06.700
- No, not this year.


00:15:06.700 --> 00:15:08.980
I was supposed to go last year, I really wanted to,


00:15:08.980 --> 00:15:10.700
but we were moving back to the US


00:15:10.700 --> 00:15:12.420
within like a few days of it running,


00:15:12.420 --> 00:15:14.220
so just didn't work out.


00:15:14.220 --> 00:15:15.540
Maybe next time, maybe next time.


00:15:15.540 --> 00:15:16.900
- Yeah, maybe we could both go.


00:15:16.900 --> 00:15:18.200
- That would be awesome.


00:15:18.200 --> 00:15:20.220
All right, well, Brian, thank you


00:15:20.220 --> 00:15:22.980
for sharing everything with us.


00:15:22.980 --> 00:15:23.820
- Thank you.


00:15:23.820 --> 00:15:24.640
- Yep, it was fun.


00:15:24.640 --> 00:15:30.000
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's


00:15:30.000 --> 00:15:37.040
Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news


00:15:37.040 --> 00:15:41.520
item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout


00:15:41.520 --> 00:15:47.200
for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank


00:15:47.200 --> 00:15:50.160
you for listening and sharing this podcast with your friends and colleagues.

