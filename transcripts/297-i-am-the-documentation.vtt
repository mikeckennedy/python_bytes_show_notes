
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:11.360
This is episode 297 recorded August 16, 2022 and I am Brian Okken.


00:00:11.360 --> 00:00:12.320
I'm Michael Kennedy.


00:00:12.320 --> 00:00:16.000
It's good to be back and be with you, Michael.


00:00:16.000 --> 00:00:17.200
Yeah, it's great to be back.


00:00:17.200 --> 00:00:19.840
Not in the usual location today.


00:00:19.840 --> 00:00:21.680
You may hear some nature sounds from my end.


00:00:21.680 --> 00:00:26.480
I apologize if animals go crazy, but there's construction which is guaranteed to be a problem


00:00:26.480 --> 00:00:27.040
in my office.


00:00:27.040 --> 00:00:28.240
So I'm sitting in the backyard.


00:00:28.240 --> 00:00:29.200
We'll see how that goes.


00:00:29.200 --> 00:00:32.960
>> Yeah, for people that are listening at the podcast,


00:00:32.960 --> 00:00:36.840
the live stream people get to see his lovely view from his backyard,


00:00:36.840 --> 00:00:37.880
some nice trees.


00:00:37.880 --> 00:00:39.160
>> Yeah. Big trees.


00:00:39.160 --> 00:00:41.080
It's all Oregon backyard here.


00:00:41.080 --> 00:00:42.240
>> Nice.


00:00:42.240 --> 00:00:49.080
>> But I also want to say this episode is brought to you by IRL Podcast from Mozilla.


00:00:49.080 --> 00:00:50.200
We'll tell you more about that later,


00:00:50.200 --> 00:00:53.240
but thanks to Mozilla and the IRL Podcast for supporting the show.


00:00:53.240 --> 00:00:53.920
>> Thank you.


00:00:53.920 --> 00:00:58.360
>> Let's talk about writing code by not writing code.


00:00:58.360 --> 00:00:59.960
Does that sound like a good idea?


00:00:59.960 --> 00:01:02.180
- Well, okay.


00:01:02.180 --> 00:01:04.200
- Not in the low code, no code sense.


00:01:04.200 --> 00:01:06.300
There's actually some pretty cool tools in that space,


00:01:06.300 --> 00:01:07.640
but that's not what I'm talking about.


00:01:07.640 --> 00:01:10.360
Imagine, Brian, somebody says,


00:01:10.360 --> 00:01:13.480
"We used to be a .NET shop,


00:01:13.480 --> 00:01:15.800
"and we have this huge database,


00:01:15.800 --> 00:01:18.080
"and all of our code to talk to it


00:01:18.080 --> 00:01:19.100
"is in some other language,


00:01:19.100 --> 00:01:20.800
"or it's Ruby, or it's Java, or whatever.


00:01:20.800 --> 00:01:21.760
"It's not Python."


00:01:21.760 --> 00:01:24.080
And you decide the best way to talk to this database


00:01:24.080 --> 00:01:26.920
is with some flavor of SQLAlchemy.


00:01:26.920 --> 00:01:29.920
SQLAlchemy straight, or if you prefer,


00:01:29.920 --> 00:01:31.280
you could have it with data classes,


00:01:31.280 --> 00:01:35.040
or you could even mix in a little sprinkling of SQL model


00:01:35.040 --> 00:01:38.600
if you're doing async and FastAPI and pydantic.


00:01:38.600 --> 00:01:41.720
Whatever choice you wanna make from that perspective.


00:01:41.720 --> 00:01:44.600
If you're looking at a database with 150 tables


00:01:44.600 --> 00:01:47.120
and all sorts of gnarly relationships,


00:01:47.120 --> 00:01:49.000
you might say, well, I'm gonna have to spend


00:01:49.000 --> 00:01:51.720
the next week planning out how to model those out


00:01:51.720 --> 00:01:54.200
so I get them to exactly match the database.


00:01:54.200 --> 00:01:55.320
Is it a VAR char?


00:01:55.320 --> 00:01:59.200
Is that a Varchar with a limit like Varchar 10 or, you know, what?


00:01:59.200 --> 00:02:00.260
That doesn't sound fun.


00:02:00.260 --> 00:02:00.540
Does it?


00:02:00.540 --> 00:02:04.680
No, no, not, not, I mean, at least for me, maybe some people that's


00:02:04.680 --> 00:02:05.960
a special kind of fun for them.


00:02:05.960 --> 00:02:13.400
But Josh Thurston sent over this project called SQL A or SQLAlchemy code gen.


00:02:13.400 --> 00:02:14.560
So I'm taking that.


00:02:14.560 --> 00:02:15.840
He doesn't think it sounds like fun.


00:02:15.840 --> 00:02:18.000
I certainly don't think that it does either.


00:02:18.000 --> 00:02:19.800
So people should check this out.


00:02:19.800 --> 00:02:21.360
It's it's looks really cool.


00:02:21.700 --> 00:02:27.060
And what you do is it's an automatic model generator for SQLAlchemy.


00:02:27.060 --> 00:02:29.300
>> What does it generate it from?


00:02:29.300 --> 00:02:33.780
>> So what you do is you go through and you point it at some database.


00:02:33.780 --> 00:02:34.420
>> Okay.


00:02:34.420 --> 00:02:38.140
>> Just say SQL A CodeGen and you give it your connection string.


00:02:38.140 --> 00:02:43.380
For example, Postgres SQL colon triple slash some database connection string.


00:02:43.380 --> 00:02:46.540
And then magic happens and you have a whole bunch of


00:02:46.540 --> 00:02:49.860
Python classes that are attempted to look handwritten.


00:02:49.860 --> 00:02:50.340
>> Yeah.


00:02:50.340 --> 00:02:54.020
So instead of taking all your time, like a week,


00:02:54.020 --> 00:02:56.560
to model out the database and the relationships


00:02:56.560 --> 00:02:58.100
and all that stuff in Python,


00:02:58.100 --> 00:03:00.820
you run this one command line thing,


00:03:00.820 --> 00:03:02.260
and then you have all the classes,


00:03:02.260 --> 00:03:05.020
and then you can tweak them a tiny bit if you see fit.


00:03:05.020 --> 00:03:07.460
- Okay, so this is, okay, you probably said this


00:03:07.460 --> 00:03:10.420
and I missed it, but so you already have data in a database


00:03:10.420 --> 00:03:13.060
and you're trying to hook up an application to it or something.


00:03:13.060 --> 00:03:16.220
- Yeah, yeah, which is why one of my theoretical example.


00:03:16.220 --> 00:03:18.060
I have a database, I have code that talks to it,


00:03:18.060 --> 00:03:20.140
but it's not Python, and so there's not


00:03:20.140 --> 00:03:21.460
really something to work from,


00:03:21.460 --> 00:03:23.260
but I've got a really complicated database


00:03:23.260 --> 00:03:24.480
that's been around for a while.


00:03:24.480 --> 00:03:25.800
It doesn't have to be complicated,


00:03:25.800 --> 00:03:27.720
but the more gnarly the database,


00:03:27.720 --> 00:03:31.080
the more you will appreciate this tool doing it for you.


00:03:31.080 --> 00:03:33.320
>> I think I have this situation.


00:03:33.320 --> 00:03:35.040
I only want to use this.


00:03:35.040 --> 00:03:39.820
>> Yeah. It does a bunch of neat things.


00:03:39.820 --> 00:03:42.020
It's written to read the structure of


00:03:42.020 --> 00:03:43.520
an existing database and generate


00:03:43.520 --> 00:03:45.640
the appropriate SQLAlchemy model code


00:03:45.640 --> 00:03:48.200
using the declarative style if possible.


00:03:48.200 --> 00:03:50.880
derived from SQLAlchemy declarative base.


00:03:50.880 --> 00:03:54.120
It's also there was some other tool called SQL AutoCode,


00:03:54.120 --> 00:03:56.420
which apparently has some limitations,


00:03:56.420 --> 00:03:57.840
such as, for example,


00:03:57.840 --> 00:04:01.140
it doesn't support Python 3 or recent versions of SQLAlchemy.


00:04:01.140 --> 00:04:04.480
That seems like a pretty large limitation, but whatever.


00:04:04.480 --> 00:04:07.360
This supports the newest version.


00:04:07.360 --> 00:04:09.660
It produces PEP8 compliant code,


00:04:09.660 --> 00:04:13.120
tries to make it look like you're writing code by hand,


00:04:13.120 --> 00:04:14.960
so it doesn't look auto-generated.


00:04:14.960 --> 00:04:20.400
it automatically detects join table inheritance and all kinds of things.


00:04:20.400 --> 00:04:22.120
So if I scroll down here,


00:04:22.120 --> 00:04:23.560
it's got these different generators.


00:04:23.560 --> 00:04:27.440
So you can generate table objects for people who don't want to use the ORM,


00:04:27.440 --> 00:04:29.120
because SQLAlchemy has these two flavors,


00:04:29.120 --> 00:04:32.200
like a low level slightly above just raw SQL,


00:04:32.200 --> 00:04:34.600
and then the ORM, which is the one that I use all the time.


00:04:34.600 --> 00:04:36.440
By default, it uses the ORM one,


00:04:36.440 --> 00:04:37.960
but you can also use, like I said,


00:04:37.960 --> 00:04:40.160
data classes, which is pretty excellent.


00:04:40.160 --> 00:04:40.440
>> Yeah.


00:04:40.440 --> 00:04:43.680
>> Instead of, in case that's what you want your code to look like,


00:04:43.680 --> 00:04:48.620
Or even better than that, you can use SQL model models for using SQL model,


00:04:48.620 --> 00:04:53.960
which is the project, I'm sure we've discussed it before, by Sebastian.


00:04:53.960 --> 00:04:58.280
It's based on Pydantic and Async, but


00:04:58.280 --> 00:05:01.240
then it's built really on top of SQLAlchemy.


00:05:01.240 --> 00:05:05.360
So if you're looking to do the newer version of that, you'll get this.


00:05:05.360 --> 00:05:07.080
By the way, just thinking about it while I'm looking at this,


00:05:07.080 --> 00:05:11.120
maybe I have actually a SQLAlchemy generated database.


00:05:11.120 --> 00:05:15.160
but it's written in the older style of SQLAlchemy.


00:05:15.160 --> 00:05:18.620
It's not using SQL model and I want to just upgrade to SQL model.


00:05:18.620 --> 00:05:20.160
You might be able to use the database.


00:05:20.160 --> 00:05:21.520
Just go rewrite it for me again,


00:05:21.520 --> 00:05:25.840
but in this flavor or use it to generate the data class version.


00:05:25.840 --> 00:05:27.020
That actually looks pretty cool.


00:05:27.020 --> 00:05:29.240
>> Or do all of them and look at it and see


00:05:29.240 --> 00:05:31.760
which one looks like it's more fun to maintain.


00:05:31.760 --> 00:05:33.040
>> Yeah, exactly.


00:05:33.040 --> 00:05:35.760
There's a whole bunch of options and stuff that you can use,


00:05:35.760 --> 00:05:38.380
but you can basically pass a bunch of


00:05:38.380 --> 00:05:40.720
command line arguments and stuff to change how it works.


00:05:40.720 --> 00:05:41.080
>> Cool.


00:05:41.080 --> 00:05:43.720
>> Like change how it names objects,


00:05:43.720 --> 00:05:46.600
change how it names fields, etc.


00:05:46.600 --> 00:05:48.760
People, they really want to look into it and use it.


00:05:48.760 --> 00:05:51.120
I think they all got the idea from this.


00:05:51.120 --> 00:05:52.160
>> Okay. Cool.


00:05:52.160 --> 00:05:52.960
>> What do you think? Sound cool?


00:05:52.960 --> 00:05:54.520
>> Yeah. Looks really cool.


00:05:54.520 --> 00:05:56.320
>> Yeah. Anytime you've got a database,


00:05:56.320 --> 00:05:58.560
they're so hard to model because you've got to get


00:05:58.560 --> 00:06:01.760
the SQLAlchemy code to match it just right or it won't work at all.


00:06:01.760 --> 00:06:05.020
Yet, do you really want to do that by hand?


00:06:05.020 --> 00:06:09.720
No, I don't. So SQL A Code Gen. Thanks, Josh.


00:06:09.720 --> 00:06:14.520
Well, I'm going to talk about package. I've been my head spaces in packaging lately because I'm


00:06:14.520 --> 00:06:20.920
I'm preparing a talk for next month and it's going to have some packaging stuff in it. So


00:06:20.920 --> 00:06:27.480
this is really exciting with I heard from Juan Luis Cano Rodriguez Rodriguez, sorry,


00:06:27.480 --> 00:06:38.280
setup tools 664.00 is out and it ships with PEP 660 editable installs. So this the big headline


00:06:38.280 --> 00:06:40.920
is not that, although that's really cool.


00:06:40.920 --> 00:06:46.640
It's that most projects don't need a setup.py or a setup.cfg anymore.


00:06:46.640 --> 00:06:49.000
Those can be gone.


00:06:49.000 --> 00:06:51.360
Not that setup.py was evil,


00:06:51.360 --> 00:06:54.180
but it was evil because what it does is it


00:06:54.180 --> 00:06:57.360
runs Python while you install something.


00:06:57.360 --> 00:07:00.280
>> When used normally, it's fine.


00:07:00.280 --> 00:07:03.120
But it has this tremendous gaping hole


00:07:03.120 --> 00:07:06.080
for abusing things at different levels.


00:07:06.080 --> 00:07:20.360
Yeah, and the the OK, so the caveat on this is the reason why it has that is sometimes it goes out and compile stuff if it's not just pure Python stuff, but you don't need that for that you.


00:07:20.360 --> 00:07:32.200
A lot of pride. Most projects don't need that anymore because they're not really compiling stuff there on during pip install their their compiling stuff ahead of time and they have their separate wheels for different architectures.


00:07:32.200 --> 00:07:34.440
I like that model better.


00:07:34.440 --> 00:07:38.840
Anyway, I'm pretty excited about this.


00:07:38.840 --> 00:07:42.280
Congrats to the PyPA for getting that done.


00:07:42.280 --> 00:07:47.280
We've got, there's an article called Development Mode Editable Installs.


00:07:47.280 --> 00:07:52.600
Here you've got pip install editable that works with setup tools.


00:07:52.600 --> 00:07:56.960
Without a setup.py, used to have a shim.


00:07:56.960 --> 00:08:00.440
Everything can be in pyproject.toml now.


00:08:00.760 --> 00:08:03.040
And so one of the cool things,


00:08:03.040 --> 00:08:06.360
and I actually discovered this also at the same time


00:08:06.360 --> 00:08:08.680
I was researching packaging stuff,


00:08:08.680 --> 00:08:10.920
the PyPA has this really cool guide


00:08:10.920 --> 00:08:12.640
packaging Python projects.


00:08:12.640 --> 00:08:16.560
And what's neat is they keep it up to date fairly well.


00:08:16.560 --> 00:08:19.720
And this whole tutorial, it's a simple,


00:08:19.720 --> 00:08:21.360
so you got a simple Python project


00:08:21.360 --> 00:08:23.840
and you wanna try to learn how to package.


00:08:23.840 --> 00:08:25.880
They have this page here.


00:08:25.880 --> 00:08:26.720
It's nice.


00:08:26.720 --> 00:08:29.560
There's no mention of setup.py or setup.cfg.


00:08:29.560 --> 00:08:31.200
It's all pyproject.toml.


00:08:31.200 --> 00:08:33.440
- Oh wow, that's awesome.


00:08:33.440 --> 00:08:34.960
Here's how you do it, and you don't even talk


00:08:34.960 --> 00:08:38.400
about the older, more troublesome way.


00:08:38.400 --> 00:08:40.620
- Yeah, and since setup tools and pip


00:08:40.620 --> 00:08:44.920
are not part of Python proper, they're separate things.


00:08:44.920 --> 00:08:48.240
Well, I mean, you get pip when you download Python,


00:08:48.240 --> 00:08:51.800
but you get a version, and you usually upgrade anyway.


00:08:51.800 --> 00:08:54.520
But setup tools is separate, so they can move


00:08:54.520 --> 00:08:57.280
at a faster pace than Python itself.


00:08:57.280 --> 00:08:59.080
- Oh, right, okay, excellent.


00:08:59.080 --> 00:09:01.320
- Well, this is great news.


00:09:01.320 --> 00:09:05.840
Anything that makes the supply chain side of Python stronger


00:09:05.840 --> 00:09:06.680
is good.


00:09:06.680 --> 00:09:08.440
- Yep. - Indeed.


00:09:08.440 --> 00:09:11.080
Well, before we move on to the next thing, Brian,


00:09:11.080 --> 00:09:13.120
let me tell you about our sponsor.


00:09:13.120 --> 00:09:13.960
- All right.


00:09:13.960 --> 00:09:15.640
- So this episode of Python Bytes is brought to you


00:09:15.640 --> 00:09:19.560
by the IRL podcast, an original podcast from Mozilla.


00:09:19.560 --> 00:09:21.080
If you're like me and Brian,


00:09:21.080 --> 00:09:23.560
we care about ideas behind technology,


00:09:23.560 --> 00:09:25.560
not just the tech itself.


00:09:25.560 --> 00:09:28.220
So we know that tech has an enormous influence on society.


00:09:28.220 --> 00:09:30.660
Many of these effects are hugely beneficial.


00:09:30.660 --> 00:09:33.500
Just think about carrying all of the world's information


00:09:33.500 --> 00:09:35.100
in our pockets sort of thing.


00:09:35.100 --> 00:09:38.100
But other tech influences can have negative effects.


00:09:38.100 --> 00:09:39.780
And I really appreciate that Mozilla's always


00:09:39.780 --> 00:09:42.340
on the lookout for and working to mitigate


00:09:42.340 --> 00:09:45.060
negative influences of tech on all of us.


00:09:45.060 --> 00:09:47.100
All the tracking stuff they're doing,


00:09:47.100 --> 00:09:49.260
but a bunch of awareness things as well.


00:09:49.260 --> 00:09:50.900
And so if these ideas resonate with you,


00:09:50.900 --> 00:09:52.660
you should definitely check out the IRL podcast.


00:09:52.660 --> 00:09:54.140
It's hosted by Bridget Todd,


00:09:54.140 --> 00:09:58.220
And this season is very much in the focus of Python.


00:09:58.220 --> 00:10:00.460
It's AI in real life.


00:10:00.460 --> 00:10:03.320
So who can AI help?


00:10:03.320 --> 00:10:04.500
Who can it harm?


00:10:04.500 --> 00:10:06.380
The show features fascinating conversations


00:10:06.380 --> 00:10:07.620
with people who are working


00:10:07.620 --> 00:10:08.900
and building more trustworthy AI.


00:10:08.900 --> 00:10:10.700
For example, there's an episode


00:10:10.700 --> 00:10:13.100
about how our world is mapped with AI.


00:10:13.100 --> 00:10:15.140
And it's the data that's missing from those maps


00:10:15.140 --> 00:10:17.660
that tells as much of the story as the maps themselves.


00:10:17.660 --> 00:10:19.280
Another one's about gig workers


00:10:19.280 --> 00:10:21.400
and how they're pushing back on algorithms


00:10:21.400 --> 00:10:22.560
to create better working style.


00:10:22.560 --> 00:10:24.100
And for political junkies,


00:10:24.100 --> 00:10:26.380
there's an episode about how that,


00:10:26.380 --> 00:10:28.980
the role of AI plays when it comes to spreading


00:10:28.980 --> 00:10:30.760
disinformation about elections.


00:10:30.760 --> 00:10:35.020
Obviously, huge concern as just across the world


00:10:35.020 --> 00:10:36.260
for all the democracies.


00:10:36.260 --> 00:10:38.700
I also just listened to the tech we won't build,


00:10:38.700 --> 00:10:41.900
which explores when developers and data scientists


00:10:41.900 --> 00:10:43.900
should consider pushing back on projects


00:10:43.900 --> 00:10:45.500
that can be harmful to society,


00:10:45.500 --> 00:10:47.860
even though the machine learning


00:10:47.860 --> 00:10:49.220
can easily be turned on them.


00:10:49.220 --> 00:10:51.340
If this sounds interesting, try an episode for yourself.


00:10:51.340 --> 00:10:53.980
Just check out, just search for RL on your podcast player


00:10:53.980 --> 00:10:56.800
or visit pythonbytes.fm/irl.


00:10:56.800 --> 00:10:58.540
The link is in your podcast player show notes.


00:10:58.540 --> 00:11:01.240
Thank you so much to IRL and Mozilla for supporting the show.


00:11:01.240 --> 00:11:02.080
- I've been listening to it.


00:11:02.080 --> 00:11:03.680
It's really great show too.


00:11:03.680 --> 00:11:05.560
- Yeah, yeah, I enjoy it as well.


00:11:05.560 --> 00:11:08.400
It's not super, super technical


00:11:08.400 --> 00:11:09.840
where it's all about APIs and stuff.


00:11:09.840 --> 00:11:11.800
You can kind of just kick back and enjoy it.


00:11:11.800 --> 00:11:15.320
- Not like this podcast where we're super technical.


00:11:15.320 --> 00:11:16.960
- Exactly.


00:11:16.960 --> 00:11:18.520
Yeah, we talk about a bunch of technical things,


00:11:18.520 --> 00:11:20.160
sometimes not too deeply, huh?


00:11:20.160 --> 00:11:22.320
- Oh, I like our level.


00:11:22.320 --> 00:11:23.880
- Yeah, I do too, I do too.


00:11:23.880 --> 00:11:25.600
Before we get on to the next topic,


00:11:25.600 --> 00:11:29.680
I just want to do a quick audience comment from Anna here.


00:11:29.680 --> 00:11:30.920
It says, "Hello from London, UK.


00:11:30.920 --> 00:11:33.780
"SQL Code Gen sounds like it could save a lot of headaches."


00:11:33.780 --> 00:11:36.120
Yeah, I think it's gonna be great.


00:11:36.120 --> 00:11:39.480
And feedback for the tutorial that you highlighted,


00:11:39.480 --> 00:11:41.840
Brian, on python.org.


00:11:41.840 --> 00:11:43.840
Henry Schreiner says, "It took around six months


00:11:43.840 --> 00:11:45.720
"for my rewrite of that page to get accepted."


00:11:45.720 --> 00:11:47.440
Well, thank you for all the hard work, Henry.


00:11:47.440 --> 00:11:48.440
That's awesome.


00:11:48.440 --> 00:11:49.280
- Great job.


00:11:49.280 --> 00:11:50.520
It looks great.


00:11:50.520 --> 00:11:52.080
- Yeah, very, very cool.


00:11:52.080 --> 00:11:55.520
Previously, I had talked about async cache.


00:11:55.520 --> 00:11:56.520
Remember that?


00:11:56.520 --> 00:11:59.740
Where it's like the FuncTools LRU cache,


00:11:59.740 --> 00:12:01.200
but a little bit more.


00:12:01.200 --> 00:12:03.320
However, you can apply it to async methods.


00:12:03.320 --> 00:12:05.680
Owen Lamont said, "You may also be interested


00:12:05.680 --> 00:12:07.580
"in a IO cache."


00:12:07.580 --> 00:12:09.880
What this one does is this lets you use


00:12:09.880 --> 00:12:12.800
proper distributed backends for caching.


00:12:12.800 --> 00:12:14.980
So, for example, if you're on a web app,


00:12:14.980 --> 00:12:19.020
you might have five, six, 10, maybe many more


00:12:19.020 --> 00:12:21.380
worker processes, either on one machine


00:12:21.380 --> 00:12:24.700
using the supervisor mode of like G-Unicorn,


00:12:24.700 --> 00:12:26.880
or it could be even across different computers.


00:12:26.880 --> 00:12:29.620
If you're using that in-memory version of cache,


00:12:29.620 --> 00:12:32.280
every time the request goes to a different part of your site


00:12:32.280 --> 00:12:35.980
or different runtime, different process running your site,


00:12:35.980 --> 00:12:37.760
you've got to recompute it, right?


00:12:37.760 --> 00:12:40.800
Well, this one also supports Redis and Memcached.


00:12:40.800 --> 00:12:42.380
- Oh, sweet. - Or Memcached.


00:12:42.380 --> 00:12:44.940
And it has a common API across all of them,


00:12:44.940 --> 00:12:46.140
which is pretty fantastic.


00:12:46.140 --> 00:12:48.600
And they're all async and awaitable, which is cool.


00:12:48.600 --> 00:12:50.420
So it aims for simplicity


00:12:50.420 --> 00:12:53.300
rather than trying to highlight all the nuances


00:12:53.300 --> 00:12:56.140
of that particular site to Redis versus the others.


00:12:56.140 --> 00:12:59.580
So it has an add, a get, a set, a multi-get,


00:12:59.580 --> 00:13:01.860
if you need to say, give me the values corresponding


00:13:01.860 --> 00:13:05.480
to these four IDs, or does this thing exist or not,


00:13:05.480 --> 00:13:07.500
delete, clear, even increment a value,


00:13:07.500 --> 00:13:09.300
like how many people viewed this page,


00:13:09.300 --> 00:13:11.900
increment that in the cache, and it's shared across,


00:13:11.900 --> 00:13:15.580
like I said, 10 worker processes across machines instantly.


00:13:15.580 --> 00:13:16.640
How cool is that? - That's pretty cool.


00:13:16.640 --> 00:13:18.740
- Yeah, so super easy to work with.


00:13:18.740 --> 00:13:21.820
You can install it, but then you should also reference


00:13:21.820 --> 00:13:24.660
probably the specialization that you're using


00:13:24.660 --> 00:13:26.580
or the backend that you're using.


00:13:26.580 --> 00:13:29.140
So for example, you can say pip install aio-cache,


00:13:29.140 --> 00:13:31.500
but if you wanna use Redis, it's bracket Redis.


00:13:31.500 --> 00:13:33.540
If you wanna use Redis and memcached,


00:13:33.540 --> 00:13:36.100
you might say bracket Redis memcached.


00:13:36.100 --> 00:13:38.480
They have message pack and different formatting.


00:13:38.480 --> 00:13:39.900
So depending on how you're using it,


00:13:39.900 --> 00:13:42.540
you might have to install some dependencies, okay?


00:13:42.540 --> 00:13:45.020
- The optional install mechanism of pip


00:13:45.020 --> 00:13:46.540
is pretty cool though, I like that.


00:13:46.540 --> 00:13:48.260
- It is, it is pretty cool.


00:13:48.260 --> 00:13:51.020
So you just import async I/O, easy.


00:13:51.020 --> 00:13:56.220
And then you import I/O cache, and you kind of just basically run your loop


00:13:56.220 --> 00:13:59.740
somewhere, or if you're using something like FastAPI, just that thing's


00:13:59.740 --> 00:14:03.140
generating or managing the loop for you, so you don't have to worry about it.


00:14:03.140 --> 00:14:08.420
So you can just say await cache.set, key, comma, value, await cache.getKey.


00:14:08.420 --> 00:14:10.380
Sounds pretty straightforward, right?


00:14:10.380 --> 00:14:12.220
You can even use it as a decorator.


00:14:12.220 --> 00:14:17.300
So if you put @cache on a function, you can give it time to live, the target,


00:14:17.300 --> 00:14:21.820
which is Redis, the key to use for that particular thing and so on.


00:14:21.820 --> 00:14:23.860
Then off it goes to Serializer,


00:14:23.860 --> 00:14:26.580
you have Pickles or you have MessagePack or JSON,


00:14:26.580 --> 00:14:29.100
and then there you go. Pretty cool.


00:14:29.100 --> 00:14:30.960
>> Okay. For a function,


00:14:30.960 --> 00:14:34.060
does it cache the input and output of that function then?


00:14:34.060 --> 00:14:36.260
>> I think it caches the output.


00:14:36.260 --> 00:14:37.260
>> Okay.


00:14:37.260 --> 00:14:43.380
>> But it doesn't look like it varies by argument.


00:14:43.380 --> 00:14:45.300
>> At least in this example, it's not very high.


00:14:45.300 --> 00:14:47.080
>> Yeah, and I don't see how you would,


00:14:47.080 --> 00:14:49.300
like this key is the lookup value, right?


00:14:49.300 --> 00:14:53.060
So you might call that cache call key result or something.


00:14:53.060 --> 00:14:56.140
I don't see how you dynamically do that.


00:14:56.140 --> 00:14:57.380
It's got to be like a void.


00:14:57.380 --> 00:14:58.740
But a lot of times that's,


00:14:58.740 --> 00:15:02.100
you just like show me all the products in this database or whatever.


00:15:02.100 --> 00:15:02.180
>> Right.


00:15:02.180 --> 00:15:03.220
>> Yeah.


00:15:03.220 --> 00:15:03.740
>> Cool.


00:15:03.740 --> 00:15:05.460
>> Cool. Yeah, pretty neat.


00:15:05.460 --> 00:15:06.540
>> Very neat.


00:15:06.540 --> 00:15:08.060
>> Yeah. Then you have


00:15:08.060 --> 00:15:11.060
different three basic ideas to think about you have these backends.


00:15:11.060 --> 00:15:13.900
So you have Redis backed by AI or Redis.


00:15:13.900 --> 00:15:16.700
You have memcache backed by AIO memcache.


00:15:16.700 --> 00:15:19.700
Then serializers, like you can serialize just string,


00:15:19.700 --> 00:15:22.100
pickle, JSON, message pack,


00:15:22.100 --> 00:15:24.920
but you can also build your own and you can also plug in.


00:15:24.920 --> 00:15:28.140
There's a bunch of examples and documentation people can check out.


00:15:28.140 --> 00:15:29.380
This looks really neat to me.


00:15:29.380 --> 00:15:30.460
>> Yeah. Nice.


00:15:30.460 --> 00:15:32.740
>> It's not quite something that I need,


00:15:32.740 --> 00:15:34.100
but if I did need it,


00:15:34.100 --> 00:15:37.380
I would definitely go and I'd be all over it.


00:15:37.380 --> 00:15:42.260
>> Yeah. Regarding the level of detail we have in our podcast,


00:15:42.260 --> 00:15:46.260
As Steve says, I only listen to podcasts about APIs.


00:15:46.260 --> 00:15:48.260
>> Nice.


00:15:48.260 --> 00:15:50.260
Nice, nice.


00:15:50.260 --> 00:15:51.460
What's your last one, Brian?


00:15:51.460 --> 00:15:56.260
>> My last one is, well, the Python packaging project.


00:15:56.260 --> 00:15:58.260
Packaging Python project, same thing.


00:15:58.260 --> 00:16:00.960
No, I have a new one, but I got it from this.


00:16:00.960 --> 00:16:04.760
So when I was reading this article, or this tutorial again,


00:16:04.760 --> 00:16:06.760
I came across something I wasn't familiar with,


00:16:06.760 --> 00:16:07.960
so I had to go check it out.


00:16:07.960 --> 00:16:11.460
So down with creating a pyproject.toml,


00:16:11.460 --> 00:16:14.220
One of the options is hatchling.


00:16:14.220 --> 00:16:16.020
Have you heard of that?


00:16:16.020 --> 00:16:17.580
>> Hatchling? I've heard of hatch.


00:16:17.580 --> 00:16:19.420
Is this somehow related to hatch?


00:16:19.420 --> 00:16:22.580
>> Yeah, it is hatch. Have we already covered hatch?


00:16:22.580 --> 00:16:23.900
>> No, I don't think we have here,


00:16:23.900 --> 00:16:25.300
but I love the idea of it.


00:16:25.300 --> 00:16:30.940
>> Okay. Hatch is a modern extensible Python project manager


00:16:30.940 --> 00:16:32.740
with a whole bunch of cool features like


00:16:32.740 --> 00:16:37.380
a standardized build system and reproducible builds by default,


00:16:37.380 --> 00:16:40.300
and environment management.


00:16:40.300 --> 00:16:45.340
Okay, so I'm not sure if this is similar to Poetry's environment manager or not.


00:16:45.340 --> 00:16:46.700
I haven't played with it much.


00:16:46.700 --> 00:16:50.100
But you don't actually have to care, which is nice.


00:16:50.100 --> 00:16:52.100
Because Poetry, you have to care about it.


00:16:52.100 --> 00:16:53.900
Because that's part of the whole thing.


00:16:53.900 --> 00:16:58.500
Anyway, publishing is easy to PyPI and other sources.


00:16:58.500 --> 00:17:02.800
Version management, project generation with sane defaults,


00:17:02.800 --> 00:17:04.800
which I haven't tried that, so I want to try that.


00:17:04.800 --> 00:17:09.000
And supposedly a responsive CLI that's two to three times faster


00:17:09.000 --> 00:17:10.080
than equivalent tools.


00:17:10.080 --> 00:17:12.080
So this I definitely need to try.


00:17:12.080 --> 00:17:13.400
So this is--


00:17:13.400 --> 00:17:18.160
I would think it's similar on the line of Flit, I think,


00:17:18.160 --> 00:17:20.600
but with some extra things thrown in.


00:17:20.600 --> 00:17:22.640
And one of the reasons why I love Flit now


00:17:22.640 --> 00:17:25.760
is because even though Setup Tools does now


00:17:25.760 --> 00:17:28.640
support PyProject, Tomo properly, completely,


00:17:28.640 --> 00:17:32.320
Flit's like twice as fast for building stuff.


00:17:32.320 --> 00:17:34.980
But so I definitely want to try out Hatch and try this.


00:17:34.980 --> 00:17:36.720
I did try one little small project,


00:17:36.720 --> 00:17:38.800
just converting a Flit project to Hatch.


00:17:38.800 --> 00:17:41.240
and it took me like five minutes just using.


00:17:41.240 --> 00:17:43.240
The documentation here is great.


00:17:43.240 --> 00:17:45.400
So the excellent documentation


00:17:45.400 --> 00:17:48.160
here about how to use the different pieces of it.


00:17:48.160 --> 00:17:49.720
It's pretty neat. Have you tried it?


00:17:49.720 --> 00:17:53.360
>> I have not tried it. I've looked at it and it looks neat to me.


00:17:53.360 --> 00:17:55.360
I don't make many packages.


00:17:55.360 --> 00:17:58.200
I more build applications and web apps and stuff.


00:17:58.200 --> 00:17:58.600
>> Oh, yeah.


00:17:58.600 --> 00:18:00.560
>> So I'm less in the,


00:18:00.560 --> 00:18:03.960
what's the right tool to build packages properly?


00:18:03.960 --> 00:18:06.080
I know you're doing that a little bit more.


00:18:06.080 --> 00:18:07.000
>> Yeah.


00:18:07.000 --> 00:18:08.160
>> I'm just learning from you.


00:18:08.160 --> 00:18:11.060
I guess good mix, I do more packages and less applications,


00:18:11.060 --> 00:18:12.860
and you do more applications.


00:18:12.860 --> 00:18:16.000
>> Yeah. Some live feedback.


00:18:16.000 --> 00:18:20.220
Henry Schreiner says, "You can use any PEP 621 back-end,


00:18:20.220 --> 00:18:25.380
Hatchling, PDM, Flickr, and so on with Hatch or with PDM2,


00:18:25.380 --> 00:18:28.100
one of the fantastic results of standardization."


00:18:28.100 --> 00:18:30.180
That Hatchling does a much better job


00:18:30.180 --> 00:18:32.180
of getting source files right than Flickr.


00:18:32.180 --> 00:18:33.460
>> Okay. Interesting.


00:18:33.460 --> 00:18:33.940
>> Yeah.


00:18:33.940 --> 00:18:37.060
>> Yeah. There was a lot of cool options with


00:18:37.060 --> 00:18:42.180
the hatch that you could specify exactly which modules and packages to pick up if you need to.


00:18:42.180 --> 00:18:45.940
That's one of the things that's a little bit mysterious with Flit, how to figure it out,


00:18:45.940 --> 00:18:54.020
because it just sort of knows somehow. I think it's the stuff that's in Git, but it's interesting.


00:18:54.020 --> 00:18:59.860
The main thing is I really like, with the standardization, that hatch is possible,


00:18:59.860 --> 00:19:02.420
the flits possible, that PDM is possible,


00:19:02.420 --> 00:19:04.980
that we can do new things,


00:19:04.980 --> 00:19:07.780
and they're not that different.


00:19:07.780 --> 00:19:10.580
It's the back end of packaging,


00:19:10.580 --> 00:19:13.060
the front end is the pyproject.toml.


00:19:13.060 --> 00:19:15.420
That's the better world to be in.


00:19:15.420 --> 00:19:19.600
>> Yeah, that separation lets there be a lot more exploration,


00:19:19.600 --> 00:19:20.780
a lot more variation.


00:19:20.780 --> 00:19:23.260
All right. Well, that's it for our items, isn't it?


00:19:23.260 --> 00:19:24.980
>> I think so, yeah.


00:19:24.980 --> 00:19:27.460
>> You got any extras?


00:19:27.620 --> 00:19:30.780
>> No, but hopefully I will soon.


00:19:30.780 --> 00:19:31.980
I've got something I'm working on.


00:19:31.980 --> 00:19:32.600
>> Right on.


00:19:32.600 --> 00:19:32.940
>> Yeah.


00:19:32.940 --> 00:19:35.540
>> Yes, I think I know what you're alluding to,


00:19:35.540 --> 00:19:37.660
very exciting stuff coming quite soon.


00:19:37.660 --> 00:19:38.900
>> Yeah. How about you?


00:19:38.900 --> 00:19:41.380
>> I have one extra. This one's quick, but quite cool.


00:19:41.380 --> 00:19:45.860
I'm sitting here on my MacBook Pro with the M1,


00:19:45.860 --> 00:19:48.460
MacBook Pro with the M1 Max.


00:19:48.460 --> 00:19:51.860
Until recently, I wasn't able to use PyPy.


00:19:51.860 --> 00:19:55.500
Now, PyPy is the JIT compiled,


00:19:55.500 --> 00:19:57.900
often faster version of Python.


00:19:57.900 --> 00:20:02.780
Sometimes you'll hear people say PyPy when they are referring to PyPI,


00:20:02.780 --> 00:20:05.940
but all the people who work on PyPI pronounce it that way.


00:20:05.940 --> 00:20:08.780
And it leaves space for PyPy to be pronounced like it should.


00:20:08.780 --> 00:20:14.300
So PyPy is the fast JIT compiled version of Python.


00:20:14.300 --> 00:20:16.220
And the big news is a couple of weeks ago,


00:20:16.220 --> 00:20:19.900
they announced support for M1, which is pretty cool.


00:20:19.900 --> 00:20:22.420
So if you're on Apple Silicon, you can now use PyPy.


00:20:22.420 --> 00:20:23.700
>> That's very cool. >> Natively.


00:20:23.700 --> 00:20:27.020
>> Yeah. It was done by Fajal


00:20:27.020 --> 00:20:31.460
and supported by contributions from the Open Collective,


00:20:31.460 --> 00:20:34.740
which is pretty cool, and it's based on support for


00:20:34.740 --> 00:20:40.500
Aarch64 which is ARM64 and Linux with some variations on how this works.


00:20:40.500 --> 00:20:43.980
They've got 38 and 39 working on macOS,


00:20:43.980 --> 00:20:46.540
ARM64 platform which is pretty cool.


00:20:46.540 --> 00:20:48.300
If you're using that and you've been waiting for this,


00:20:48.300 --> 00:20:49.780
it should make your code run faster,


00:20:49.780 --> 00:20:51.460
maybe use less memory, that kind of thing.


00:20:51.460 --> 00:20:55.180
>> Very cool. If people are interested in PyPy,


00:20:55.180 --> 00:20:57.980
testing code on episode 190,


00:20:57.980 --> 00:21:02.500
I interviewed Carl Frederick Bowles about testing PyPy.


00:21:02.500 --> 00:21:05.380
>> Oh, cool. Yeah, there's a lot of testing.


00:21:05.380 --> 00:21:08.220
I mean, it's the entire Python runtime basically.


00:21:08.220 --> 00:21:11.180
It's like in much of the standard library. That's a lot of work.


00:21:11.180 --> 00:21:13.900
>> Yeah. It's an interesting story.


00:21:13.900 --> 00:21:17.780
>> Would you say that testing and documentation are often


00:21:17.780 --> 00:21:21.780
really good things to add to your project that go along together in some ways.


00:21:21.780 --> 00:21:24.680
>> Well, hopefully you're doing it at the same time, but yes.


00:21:24.680 --> 00:21:29.140
>> Yes. We've all worked with different types of team dynamics,


00:21:29.140 --> 00:21:31.100
the flat hierarchy,


00:21:31.100 --> 00:21:32.940
people would just take over the projects,


00:21:32.940 --> 00:21:35.380
the parts of the projects that they seem best suited for,


00:21:35.380 --> 00:21:39.540
and there might be more hierarchical version.


00:21:39.540 --> 00:21:46.820
So our joke this week is about a somewhat dominating senior developer here,


00:21:46.820 --> 00:21:51.060
And there's a junior developer just hired onto the same team that, you know, this is a picture.


00:21:51.060 --> 00:21:54.340
People can check it out. Just follow the link in the show notes. The junior asked,


00:21:54.340 --> 00:22:00.100
where's the documentation in a very stern face? The team is, I am the documentation.


00:22:00.100 --> 00:22:02.280
Yes.


00:22:02.280 --> 00:22:06.740
Hopefully you're not currently working in this situation, but it's pretty funny.


00:22:06.740 --> 00:22:12.420
You know, there's always bits. There's always pieces of the system that like,


00:22:12.420 --> 00:22:14.260
>> Well, how does this work?


00:22:14.260 --> 00:22:15.980
You've got to ask that guy.


00:22:15.980 --> 00:22:18.060
He's not even on our team anymore.


00:22:18.060 --> 00:22:19.780
Yeah, but he's the one that wrote it,


00:22:19.780 --> 00:22:22.380
and luckily, he's still with the company. Go talk to him.


00:22:22.380 --> 00:22:24.720
>> Exactly. No one understands that we don't touch it anymore.


00:22:24.720 --> 00:22:25.700
It seems to still work.


00:22:25.700 --> 00:22:26.260
>> Yeah.


00:22:26.260 --> 00:22:27.780
>> Exactly. All right.


00:22:27.780 --> 00:22:30.140
Well, what seems to still be working is our podcast, Brian.


00:22:30.140 --> 00:22:30.980
>> It does.


00:22:30.980 --> 00:22:31.260
>> Thanks for being here.


00:22:31.260 --> 00:22:32.620
>> Yeah. Thank you.


00:22:32.620 --> 00:22:35.780
>> Yeah. Thanks for everyone to listen. See you all later.

