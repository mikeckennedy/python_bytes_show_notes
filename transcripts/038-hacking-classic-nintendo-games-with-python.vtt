
00:00:00.000 --> 00:00:04.720
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:04.720 --> 00:00:11.760
to your earbuds. This is episode 38, recorded August 7th, 2017. I'm Brian Okken, and we


00:00:11.760 --> 00:00:15.800
have guest hosts filling in for Michael while he's on vacation. This week, we have Matt


00:00:15.800 --> 00:00:17.600
McKay from Fullstack Python.


00:00:17.600 --> 00:00:18.600
Hey, Brian.


00:00:18.600 --> 00:00:22.880
Hey. Now, you also worked with Michael on the Python Entrepreneur Course, right?


00:00:22.880 --> 00:00:27.680
Yeah, exactly. And I've been on Michael's podcast a couple of times. So he's always


00:00:27.680 --> 00:00:28.680
a great interviewer.


00:00:28.680 --> 00:00:36.320
Yeah, it was hard having trouble not grinning and laughing during that because it's you I'm usually waiting for Michael to get done with the intro


00:00:36.320 --> 00:00:40.980
So hey, thanks a lot for stepping up and helping us with this show this week


00:00:40.980 --> 00:00:47.060
Yeah, I'm happy to help while Michael's taking a nice little vacation so you can come back all rested and ready to go and first off


00:00:47.060 --> 00:00:52.320
I've got you starting because why not this is from a talk at PyCon. Is that right?


00:00:52.320 --> 00:00:56.040
Yeah, so I was at PyCon this year. I try never to miss it


00:00:56.040 --> 00:01:00.440
I unfortunately missed PyCon last year and I vowed never again because it's just my favorite


00:01:00.440 --> 00:01:05.960
event every single year. So I caught this talk. This is actually my colleague Sam Agnew's talk,


00:01:05.960 --> 00:01:11.240
which was called Hacking Classic Nintendo Games with Python. And the gist here was he was using


00:01:11.240 --> 00:01:18.040
a Nintendo emulator named FCEUX. I actually don't know if that has a better pronunciation or whether


00:01:18.040 --> 00:01:24.840
people say it by the letters all the time. But he used that in order to change old school Nintendo


00:01:24.840 --> 00:01:29.000
games he was playing and interact with the audience during that PyCon talk. It was pretty


00:01:29.000 --> 00:01:30.000
awesome.


00:01:30.000 --> 00:01:33.920
I missed it. So tell us a little bit more about this hacking Nintendo games.


00:01:33.920 --> 00:01:39.960
Yeah, sure. So Sam was inspired by the Pi NES project and he basically saw that you


00:01:39.960 --> 00:01:46.320
could use Python to interact with Nintendo games. And since he grew up on playing the


00:01:46.320 --> 00:01:51.880
old school NES Nintendo system, he wanted to use some of the old games that he had and


00:01:51.880 --> 00:01:54.480
basically emulate the games themselves,


00:01:54.480 --> 00:01:57.480
but also the way that the old Game Genie system worked,


00:01:57.480 --> 00:02:01.200
which was by hex editing the memory of the game itself.


00:02:01.200 --> 00:02:03.640
And so what Sam did in this talk was


00:02:03.640 --> 00:02:06.240
he created a little Lua script,


00:02:06.240 --> 00:02:09.560
which would change the hex values in memory of a game.


00:02:09.560 --> 00:02:11.580
And then he created a Python application


00:02:11.580 --> 00:02:15.400
that attendees at the talk could text in different hex codes.


00:02:15.400 --> 00:02:16.800
And he was playing the game


00:02:16.800 --> 00:02:19.480
while attendees were changing the game on him.


00:02:19.480 --> 00:02:22.060
So it was kind of like adding cheat codes to the game


00:02:22.060 --> 00:02:22.940
while he was playing.


00:02:22.940 --> 00:02:26.340
So it was really cool to see sort of how he was able


00:02:26.340 --> 00:02:29.260
to interact with the audience, but also play some games


00:02:29.260 --> 00:02:31.700
that kind of brought out a little bit of the nostalgia factor.


00:02:31.700 --> 00:02:33.140
- Oh, that's cool.


00:02:33.140 --> 00:02:34.460
Yeah, I'll have to check that out.


00:02:34.460 --> 00:02:36.900
- And the one other thing I really liked about it was


00:02:36.900 --> 00:02:39.580
he made certain topics that sound pretty intimidating,


00:02:39.580 --> 00:02:43.060
like hex editing memory values into what I think is like


00:02:43.060 --> 00:02:46.180
a relatively beginner friendly way to introduce it.


00:02:46.180 --> 00:02:48.380
It basically takes the hex memory values,


00:02:48.380 --> 00:02:50.700
shows you, explains what they do,


00:02:50.700 --> 00:02:53.500
and then you can see the results when you edit the values.


00:02:53.500 --> 00:02:56.620
So definitely a topic or a talk worth checking out.


00:02:56.620 --> 00:02:59.380
And he also wrote a companion blog post


00:02:59.380 --> 00:03:01.500
that explains everything about


00:03:01.500 --> 00:03:02.820
what he did throughout the talk.


00:03:02.820 --> 00:03:05.520
- Okay, I admit this morning I watched


00:03:05.520 --> 00:03:07.460
like just a small portion of it,


00:03:07.460 --> 00:03:11.580
and I just got to the point where he like changed the time,


00:03:11.580 --> 00:03:13.620
like there was a game running


00:03:13.620 --> 00:03:16.820
and we were watching the time left, he paused the game.


00:03:16.820 --> 00:03:18.900
Super Mario Brothers, the first one.


00:03:18.900 --> 00:03:20.180
- Yeah, Super Mario Brothers.


00:03:20.180 --> 00:03:23.940
And then he changed the time back down to like zero


00:03:23.940 --> 00:03:26.820
and suddenly his character died and he said,


00:03:26.820 --> 00:03:30.180
"Okay, so that's how you hack it, the talk's over."


00:03:30.180 --> 00:03:32.340
- Exactly, and he did that just through editing


00:03:32.340 --> 00:03:34.580
hex memory values directly to change the time,


00:03:34.580 --> 00:03:36.180
which was pretty nuts.


00:03:36.180 --> 00:03:38.620
- So there was Lua involved also.


00:03:38.620 --> 00:03:42.000
I haven't watched the whole thing,


00:03:42.000 --> 00:03:46.140
but is the editing of the game in Lua


00:03:46.140 --> 00:03:48.820
And the Python was for the flask app or?


00:03:48.820 --> 00:03:51.020
- Yeah, so the emulator itself,


00:03:51.020 --> 00:03:52.860
there's multiple emulators you can use


00:03:52.860 --> 00:03:54.620
in order to run NES games,


00:03:54.620 --> 00:03:56.540
but the one that he was most comfortable with


00:03:56.540 --> 00:03:59.200
actually had embedded Lua in order to script


00:03:59.200 --> 00:04:00.900
editing the hex memory values.


00:04:00.900 --> 00:04:04.940
So really Lua was only being used to input the hex values


00:04:04.940 --> 00:04:07.460
into the memory and then read from a file


00:04:07.460 --> 00:04:08.900
that Python was writing to.


00:04:08.900 --> 00:04:11.580
So you can think of, like there was a file on the system


00:04:11.580 --> 00:04:15.020
where his Python application was inputting into that file


00:04:15.020 --> 00:04:18.620
and then Lua was reading from it and just shoving it into memory to change the game.


00:04:18.620 --> 00:04:22.620
So it was basically a file was being used as a bridge between Python and Lua.


00:04:22.620 --> 00:04:23.620
Okay, great.


00:04:23.620 --> 00:04:24.620
Cool.


00:04:24.620 --> 00:04:33.180
I love that the PyCon talks are recorded and to be honest, when I was there, I didn't go


00:04:33.180 --> 00:04:38.420
to very many talks, but I just spend the year between PyCons just watching all of the old


00:04:38.420 --> 00:04:39.420
ones.


00:04:39.420 --> 00:04:40.420
Yeah.


00:04:40.420 --> 00:04:41.420
Yeah.


00:04:41.420 --> 00:04:42.420
So, Nick.


00:04:42.420 --> 00:04:43.420
That's awesome.


00:04:43.420 --> 00:04:48.780
to bring up an article that Eric Holscher put out just recently and


00:04:48.780 --> 00:04:53.340
apparently he brings it up at the beginning of his talks a lot and it's he


00:04:53.340 --> 00:04:58.260
calls it the Pac-Man rule at conferences and it's just a short little article but


00:04:58.260 --> 00:05:03.180
I really it's really I like the the visual of the the Pac-Man little Pac-Man


00:05:03.180 --> 00:05:07.940
with a little gap so the idea and I'm just going to quote exactly what he says


00:05:07.940 --> 00:05:11.860
is when you're when you've got a bunch of people in a group like when you're


00:05:11.860 --> 00:05:15.460
meeting new people at conferences or something to make sure that there's a


00:05:15.460 --> 00:05:19.180
gap. So when standing in a group of people always leave room for one


00:05:19.180 --> 00:05:23.460
person to join your group. Leaving room for new people when standing in a group


00:05:23.460 --> 00:05:29.220
is a physical way to show an inclusive and welcoming environment. And just the


00:05:29.220 --> 00:05:34.020
whole idea, I know that I'm kind of, I started out totally as an introvert in


00:05:34.020 --> 00:05:38.220
because I got into programming, not because I really enjoy hanging out with


00:05:38.220 --> 00:05:43.900
people. So it is a stretch for a lot of people, including myself, to try to go up to new groups


00:05:43.900 --> 00:05:49.740
of people and join conversations. And I thought this was a great tip to, when you're having a


00:05:49.740 --> 00:05:54.380
conversation in a group, to make sure that you're physically showing and visually showing that


00:05:54.380 --> 00:05:58.860
you're welcoming new members. That's great. - Yeah, I agree. It's almost like pattern


00:05:58.860 --> 00:06:04.620
matching for developers. When there's room for one more person, you feel much more comfortable


00:06:04.620 --> 00:06:08.540
with just sort of approaching the group and asking people what they're talking about. So


00:06:08.540 --> 00:06:12.300
I think it's really good advice, both on the side where you're in a group already,


00:06:12.300 --> 00:06:16.540
but also when you're not in a group that, hey, there's some people that may want to talk to you


00:06:16.540 --> 00:06:21.820
and they've left you a spot at the table or where they're standing. So Eric did a great job on this.


00:06:21.820 --> 00:06:27.340
- Yeah, I think it's great. That was just a short one. And you're going to talk about something that


00:06:27.340 --> 00:06:31.980
I really haven't had a chance to play with yet. And that's except for I've had a chance to


00:06:31.980 --> 00:06:34.360
to mispronounce it on this podcast.


00:06:34.360 --> 00:06:36.400
And it's Bokeh?


00:06:36.400 --> 00:06:37.780
- Yes. - Is that how you pronounce it?


00:06:37.780 --> 00:06:40.060
- So if you take a look at the website,


00:06:40.060 --> 00:06:42.220
it actually can be pronounced two different ways,


00:06:42.220 --> 00:06:43.780
Bokeh and Boka.


00:06:43.780 --> 00:06:46.460
So chances are you pronounced it correctly.


00:06:46.460 --> 00:06:50.700
You just thought we were incorrect in your pronunciation.


00:06:50.700 --> 00:06:53.100
But Bokeh, I usually just say Bokeh,


00:06:53.100 --> 00:06:55.540
is a Python data visualization library.


00:06:55.540 --> 00:06:58.740
And the output is designed for presentations


00:06:58.740 --> 00:07:00.420
in web browsers.


00:07:00.420 --> 00:07:03.060
So you don't have to write any JavaScript.


00:07:03.060 --> 00:07:06.200
So if you've ever used D3JS,


00:07:06.200 --> 00:07:09.100
which is a fantastic data visualization tool,


00:07:09.100 --> 00:07:11.480
it's got a really steep learning curve.


00:07:11.480 --> 00:07:13.740
So if you really have just spent a lot of time


00:07:13.740 --> 00:07:16.640
in Python land, you can use Bokeh to generate


00:07:16.640 --> 00:07:18.340
these amazing data visualizations


00:07:18.340 --> 00:07:20.340
that are rendered in the browser,


00:07:20.340 --> 00:07:22.160
and you don't have to write any JavaScript yourself.


00:07:22.160 --> 00:07:25.860
So that's one thing that I love about this library.


00:07:25.860 --> 00:07:28.300
And so I highly recommend you check it out


00:07:28.300 --> 00:07:35.180
it just had a new release, which was v0.12.6, just back in June.


00:07:35.180 --> 00:07:37.140
And it had a whole bunch of improvements.


00:07:37.140 --> 00:07:39.900
And this development team is doing an amazing job.


00:07:39.900 --> 00:07:42.100
And they're gearing up for a 1.0 release, which I think


00:07:42.100 --> 00:07:43.460
is just going to make it--


00:07:43.460 --> 00:07:45.940
I think it's going to make this library very, very popular very


00:07:45.940 --> 00:07:46.500
soon.


00:07:46.500 --> 00:07:50.380
For creating visuals in Python, the one thing I have used


00:07:50.380 --> 00:07:52.780
is matplotlib.


00:07:52.780 --> 00:07:55.980
So is there a rule of thumb of when


00:07:55.980 --> 00:08:00.860
to use generating plots on the client side versus the server side?


00:08:00.860 --> 00:08:03.700
Yeah, I think that's a good question.


00:08:03.700 --> 00:08:06.660
I haven't used Matplotlib as much as Bokeh.


00:08:06.660 --> 00:08:09.580
I've only used it a bit in Jupyter Notebooks.


00:08:09.580 --> 00:08:15.260
My rough rule of thumb, but I could be totally wrong, so I'd love to get emails if it's different.


00:08:15.260 --> 00:08:20.100
My general rule of thumb is Bokeh is really fantastic for creating interactive visualizations


00:08:20.100 --> 00:08:21.960
in web applications.


00:08:21.960 --> 00:08:25.860
You can certainly use it in Jupyter Notebooks as well,


00:08:25.860 --> 00:08:28.980
but I see Matplotlib as being sort of the quick


00:08:28.980 --> 00:08:31.300
and dirty solution to visualizing data


00:08:31.300 --> 00:08:33.680
in Jupyter Notebook scripts.


00:08:33.680 --> 00:08:35.460
So I would typically use Matplotlib


00:08:35.460 --> 00:08:37.860
if I'm doing something that's like super early,


00:08:37.860 --> 00:08:39.900
I'm doing exploratory data analysis,


00:08:39.900 --> 00:08:43.180
whereas Bokeh is sort of the building a beautiful dashboard


00:08:43.180 --> 00:08:44.180
and you want bar charts,


00:08:44.180 --> 00:08:46.860
so you want some sort of interactive visualization


00:08:46.860 --> 00:08:51.100
that you can then have end users be working with.


00:08:51.100 --> 00:08:53.500
- Okay, I think that's a great explanation.


00:08:53.500 --> 00:08:55.660
So I'll have to check this out.


00:08:55.660 --> 00:08:57.300
- Yeah, so, and that's Bokeh.


00:08:57.300 --> 00:08:59.580
And I actually, what's funny is we,


00:08:59.580 --> 00:09:00.980
it always goes back to PyCon.


00:09:00.980 --> 00:09:04.260
I found out about this library at PyCon in 2015.


00:09:04.260 --> 00:09:06.520
Sarah Bird, who works on the core library,


00:09:06.520 --> 00:09:09.140
gave a fantastic talk where she essentially built


00:09:09.140 --> 00:09:11.500
an entire data visualization map,


00:09:11.500 --> 00:09:14.640
geo mapping data visualization, like during her talk.


00:09:14.640 --> 00:09:16.380
And I was like, this is incredible.


00:09:16.380 --> 00:09:18.620
So then I got a chance to use it a little bit.


00:09:18.620 --> 00:09:21.700
I wrote a Flask tutorial on full stack Python


00:09:21.700 --> 00:09:22.700
that uses Bokeh.


00:09:22.700 --> 00:09:24.900
And that's why I've been sort of,


00:09:24.900 --> 00:09:25.980
I don't wanna say evangelizing,


00:09:25.980 --> 00:09:28.260
but I've been telling people how enjoyable it is


00:09:28.260 --> 00:09:29.580
to use this library.


00:09:29.580 --> 00:09:30.780
- That's great, cool.


00:09:30.780 --> 00:09:33.580
I'll have to check it out more, definitely.


00:09:33.580 --> 00:09:36.700
Well, next I've got another tool


00:09:36.700 --> 00:09:38.340
that I actually haven't used yet,


00:09:38.340 --> 00:09:40.740
but I just heard about it recently.


00:09:40.740 --> 00:09:45.740
And it's a tool called Mosh, which is a mobile shell.


00:09:45.820 --> 00:09:50.460
And the idea around it, it's kind of replacing SSH.


00:09:50.460 --> 00:09:53.620
So if you have to have a connection to another instrument


00:09:53.620 --> 00:09:57.420
to run command line commands, and now we


00:09:57.420 --> 00:10:00.780
live in a time where we often work on laptops,


00:10:00.780 --> 00:10:03.740
and then you close your laptop and go home or go somewhere


00:10:03.740 --> 00:10:07.180
else and open it up again, that connection's gone,


00:10:07.180 --> 00:10:09.700
and you've got to reestablish your SSH.


00:10:09.700 --> 00:10:13.820
And there's also other problems with SSH,


00:10:13.820 --> 00:10:18.540
with a keystroke when you're displaying the interactiveness.


00:10:18.540 --> 00:10:21.780
And MOSH is an attempt to basically go down


00:10:21.780 --> 00:10:23.460
all the way to the protocol layer


00:10:23.460 --> 00:10:26.660
and redefine what gets transferred back and forth.


00:10:26.660 --> 00:10:28.260
There's a YouTube video that we're


00:10:28.260 --> 00:10:32.140
going to link to that-- it's actually-- it's back from 2012.


00:10:32.140 --> 00:10:34.340
And it's very convincing as to why


00:10:34.340 --> 00:10:38.060
we would want to do mobile applications differently


00:10:38.060 --> 00:10:41.020
than we've done them in the past at just the byte level.


00:10:41.020 --> 00:10:44.620
I'm just kind of wondering if people are using it.


00:10:44.620 --> 00:10:48.260
And that's just why I brought it up is it looks cool.


00:10:48.260 --> 00:10:49.100
I want to try it.


00:10:49.100 --> 00:10:51.100
I wonder if anybody else has used it.


00:10:51.100 --> 00:10:52.540
- I haven't used Mosh myself,


00:10:52.540 --> 00:10:55.140
but it seems like SSH is a protocol


00:10:55.140 --> 00:10:58.740
that was designed to disconnect every single time


00:10:58.740 --> 00:11:01.180
I'm trying to write some code in front of an audience.


00:11:01.180 --> 00:11:04.940
So I will definitely have to check this one out,


00:11:04.940 --> 00:11:06.880
especially when I'm doing live code demos,


00:11:06.880 --> 00:11:09.820
because when your SSH connection drops


00:11:09.820 --> 00:11:12.420
in front of an audience and you've got to reconnect,


00:11:12.420 --> 00:11:14.420
it can be a real pain.


00:11:14.420 --> 00:11:15.460
So this is pretty awesome.


00:11:15.460 --> 00:11:19.220
- And the video actually is of a, he's doing a,


00:11:19.220 --> 00:11:20.860
I don't know who's in the presentation,


00:11:20.860 --> 00:11:22.940
but there's a person presenting


00:11:22.940 --> 00:11:26.540
and they're connected to another system.


00:11:26.540 --> 00:11:29.900
And right in the middle of typing a command,


00:11:29.900 --> 00:11:33.380
he changes his Wi-Fi connection to a different connection


00:11:33.380 --> 00:11:35.140
and it just works.


00:11:35.140 --> 00:11:36.660
It like fixes itself.


00:11:36.660 --> 00:11:38.340
So it's great.


00:11:38.340 --> 00:11:45.340
This is great having you on because you're talking about just about a bunch of things I've never used, but definitely heard about.


00:11:45.340 --> 00:11:49.340
Well, hopefully I get you excited enough to use them because they're some of my favorite tools.


00:11:49.340 --> 00:11:55.340
And the next up is Pelican. Is Fullstack on use doing... Do you use Pelican for Fullstack?


00:11:55.340 --> 00:12:03.340
I do, yeah. So, Fullstack Python, people luckily notice that it's pretty snappy and that's because it has no database backend.


00:12:03.340 --> 00:12:07.660
just a bunch of flat files that are served up by a content delivery network.


00:12:07.660 --> 00:12:09.240
And that's all generated.


00:12:09.240 --> 00:12:12.360
I don't handwrite HTML, at least not for fun.


00:12:12.360 --> 00:12:16.960
I generate that with Pelican, which is a static website generator.


00:12:16.960 --> 00:12:20.520
So the way that I think about it is like static website generators basically


00:12:20.520 --> 00:12:22.960
have, I would say like three parts.


00:12:22.960 --> 00:12:26.620
You have your content, which might be written in restructured text or


00:12:26.620 --> 00:12:28.660
markdown, some sort of markup format.


00:12:28.660 --> 00:12:31.300
The second part would be a template engine.


00:12:31.360 --> 00:12:36.160
So most likely Jinja, a lot of people who use Django are used to the Django template engine,


00:12:36.160 --> 00:12:39.200
but Pelican's kind of built out of the box with Jinja.


00:12:39.200 --> 00:12:45.600
And then you have some Python code that puts the two together and then outputs typically HTML.


00:12:45.600 --> 00:12:48.800
It can also be other formats like XML or JSON,


00:12:48.800 --> 00:12:53.760
really any sort of output that you want that is a file format, but I output HTML.


00:12:53.760 --> 00:12:57.760
And then you can take those HTML files and you can host them anywhere.


00:12:57.760 --> 00:13:01.760
So the power is you have these markup, you have all your content in the markup format.


00:13:01.760 --> 00:13:05.040
So it's not like you're again, modifying HTML directly.


00:13:05.040 --> 00:13:10.720
The static site generator does all the work for you with its, well, what are called generators.


00:13:10.720 --> 00:13:15.200
The Python code creates, takes in the input and then outputs those, those file formats.


00:13:15.200 --> 00:13:17.120
And then you can just, you can host them anywhere.


00:13:17.120 --> 00:13:20.720
So the way that I think about it is that it's a, it's kind of like a throwback to the early


00:13:20.720 --> 00:13:23.200
days of the web when everything was like really snappy.


00:13:23.200 --> 00:13:28.200
It was because you weren't connecting to databases via web application.


00:13:28.200 --> 00:13:35.200
It was just because you were being served up a single file or multiple files that are basically just flat files.


00:13:35.200 --> 00:13:38.200
Yeah, there may be some Perl on the back end.


00:13:38.200 --> 00:13:45.200
One of the things that's great about Pelican is it's in under active development.


00:13:45.200 --> 00:13:49.200
The latest release is version 3.7.1.


00:13:49.200 --> 00:13:56.000
3.7.0 was released at the end of 2016 and that was like a major bump with a lot of good


00:13:56.000 --> 00:13:57.000
Python 3 compatibility.


00:13:57.000 --> 00:14:00.960
In fact, I only use Python 3.6 with Pelican now.


00:14:00.960 --> 00:14:02.200
It works fantastic.


00:14:02.200 --> 00:14:07.840
So it's ready to go, Python 3 out of the box, and it's had a bunch of major work done to


00:14:07.840 --> 00:14:10.120
it, a lot of bug fixes recently.


00:14:10.120 --> 00:14:13.720
So under active development, that's one of the things, there's so many static site generators


00:14:13.720 --> 00:14:14.960
that are out there.


00:14:14.960 --> 00:14:18.320
It's relatively easy to create one as sort of a side project,


00:14:18.320 --> 00:14:20.240
but this one has been around for a long time.


00:14:20.240 --> 00:14:23.560
So I started using Pelican probably six, seven years ago


00:14:23.560 --> 00:14:25.800
now, and I still highly recommend it,


00:14:25.800 --> 00:14:27.920
which is if you're a developer and you've been using a tool


00:14:27.920 --> 00:14:30.080
for that long, I feel like that's a pretty good sign


00:14:30.080 --> 00:14:31.920
that it's a stable foundation.


00:14:31.920 --> 00:14:33.360
- Yeah, definitely.


00:14:33.360 --> 00:14:35.080
I don't know if you remember what it was like


00:14:35.080 --> 00:14:37.320
when you first started using it though.


00:14:37.320 --> 00:14:39.800
So if I wanted to pick it up and maybe say,


00:14:39.800 --> 00:14:41.240
like, let's say I've got like some,


00:14:41.240 --> 00:14:43.680
I wanted to create internal to a company.


00:14:43.680 --> 00:14:46.280
I wanted to create a little site to, I don't know,


00:14:46.280 --> 00:14:48.280
document some process or something.


00:14:48.280 --> 00:14:53.280
And wanted to spin up a Pelican site


00:14:53.280 --> 00:14:55.960
with a bunch of documents, I guess, in it.


00:14:55.960 --> 00:14:57.720
Is that something that's gonna take a long time


00:14:57.720 --> 00:15:00.400
to learn how to use, or is it pretty quick to pick up?


00:15:00.400 --> 00:15:01.420
- No, it should be pretty quick.


00:15:01.420 --> 00:15:03.920
I mean, a lot of people think that static site generators


00:15:03.920 --> 00:15:05.360
are just kind of for blogs,


00:15:05.360 --> 00:15:06.960
which is sort of the original purpose


00:15:06.960 --> 00:15:08.120
of a static site generator.


00:15:08.120 --> 00:15:10.860
When some of the first ones came out,


00:15:10.860 --> 00:15:13.440
they were mostly used with like a blog format.


00:15:13.440 --> 00:15:15.200
But you can create any type of website


00:15:15.200 --> 00:15:16.920
with a static site generator.


00:15:16.920 --> 00:15:19.580
And you can even create like single page applications


00:15:19.580 --> 00:15:22.280
if you combine it with some sort of JavaScript framework


00:15:22.280 --> 00:15:23.480
on the front end.


00:15:23.480 --> 00:15:25.400
So yeah, so there's, I would say it's actually


00:15:25.400 --> 00:15:26.560
relatively easy to get started.


00:15:26.560 --> 00:15:27.840
I wrote a tutorial on this,


00:15:27.840 --> 00:15:29.640
how to create your first static site


00:15:29.640 --> 00:15:31.200
with Pelican and Jinja.


00:15:31.200 --> 00:15:33.880
And that would actually get you up and running


00:15:33.880 --> 00:15:36.440
probably within, I don't know, 20, 30 minutes.


00:15:36.440 --> 00:15:37.880
Do pip install Pelican.


00:15:37.880 --> 00:15:38.720
- Wow, okay.


00:15:38.720 --> 00:15:41.180
- And then Pelican will actually generate


00:15:41.180 --> 00:15:42.600
the boilerplate that you need


00:15:42.600 --> 00:15:44.520
with the Pelican Quick Start program.


00:15:44.520 --> 00:15:46.440
And then you have your first static site.


00:15:46.440 --> 00:15:48.460
Actually, you could probably have your first static site


00:15:48.460 --> 00:15:49.880
within five minutes,


00:15:49.880 --> 00:15:51.520
and then you can start customizing it


00:15:51.520 --> 00:15:53.760
and have something that you could deploy


00:15:53.760 --> 00:15:55.000
very quickly after that.


00:15:55.000 --> 00:15:56.320
- Well, that's definitely fast enough.


00:15:56.320 --> 00:16:00.280
And is the tutorial have talk about,


00:16:00.280 --> 00:16:01.440
I guess it probably doesn't matter


00:16:01.440 --> 00:16:02.680
which Markdown you use,


00:16:02.680 --> 00:16:04.360
if you use Markdown or Restructured.


00:16:04.360 --> 00:16:06.920
- Yeah, I actually, I use Markdown on full stack Python,


00:16:06.920 --> 00:16:09.240
but on my personal site, mattmckay.com,


00:16:09.240 --> 00:16:10.540
I use Restructured Text.


00:16:10.540 --> 00:16:14.260
So I kind of use each one interchangeably.


00:16:14.260 --> 00:16:15.780
In fact, you can use them interchangeably


00:16:15.780 --> 00:16:18.040
on the same, in the same site.


00:16:18.040 --> 00:16:20.420
So Pelican doesn't, yeah, Pelican doesn't really care.


00:16:20.420 --> 00:16:22.980
It'll just say, oh, you've got five markdown files,


00:16:22.980 --> 00:16:23.960
five restructure text.


00:16:23.960 --> 00:16:26.420
I think the ASCII doc is another format.


00:16:26.420 --> 00:16:27.940
You can kind of just take anything as input


00:16:27.940 --> 00:16:29.020
and it'll use that.


00:16:29.020 --> 00:16:31.580
It doesn't have to be segmented by projects.


00:16:31.580 --> 00:16:34.500
- Does it tell by the file extension or something?


00:16:34.500 --> 00:16:35.340
Or do you know?


00:16:35.340 --> 00:16:37.340
- Yeah, you can, well, in the configuration settings,


00:16:37.340 --> 00:16:40.900
you can tell Pelican which file formats you want


00:16:40.900 --> 00:16:42.460
and also which extensions.


00:16:42.460 --> 00:16:44.980
So if you don't wanna pick up your restructured text files,


00:16:44.980 --> 00:16:46.800
you can just have it pick up the markdown ones,


00:16:46.800 --> 00:16:48.680
but you can configure all that stuff


00:16:48.680 --> 00:16:50.040
in the configuration files.


00:16:50.040 --> 00:16:51.640
It's pretty extensible.


00:16:51.640 --> 00:16:53.180
- Nice, okay.


00:16:53.180 --> 00:16:54.880
The last topic I wanna talk about


00:16:54.880 --> 00:16:57.000
was something that just helped me just now.


00:16:57.000 --> 00:16:58.960
So in the last episode,


00:16:58.960 --> 00:17:01.720
I announced that I'm no longer writing the book,


00:17:01.720 --> 00:17:04.240
the book being Python Testing with pytest.


00:17:04.240 --> 00:17:06.640
It's what I've been working on for like a year,


00:17:06.640 --> 00:17:14.640
But I was wrong because right after we recorded that and I handed in all my documents to my editor,


00:17:14.640 --> 00:17:19.640
the pytest team came out with another version, the pytest 3.2.0.


00:17:19.640 --> 00:17:28.640
And I had just, the week before, retested all of my examples in 3.1.3.


00:17:28.640 --> 00:17:30.640
So what do I do?


00:17:30.640 --> 00:17:34.640
And what I'm doing is just making sure they all work.


00:17:34.640 --> 00:17:38.160
So right now I'm going through all of the book again.


00:17:38.160 --> 00:17:40.800
And instead of having to do this every time,


00:17:40.800 --> 00:17:44.040
I've decided I'm going to build a test framework to--


00:17:44.040 --> 00:17:47.080
not a framework, but I'm going to build a set of tests that


00:17:47.080 --> 00:17:49.440
check all of the examples and make sure


00:17:49.440 --> 00:17:53.320
that the output is similar enough to the output


00:17:53.320 --> 00:17:56.200
I describe in the book so that it doesn't confuse somebody


00:17:56.200 --> 00:17:57.640
when they have a new version.


00:17:57.640 --> 00:18:02.120
And one of the things I'm using is a tool called pytest Watch.


00:18:02.120 --> 00:18:04.000
It's a pytest plugin.


00:18:04.000 --> 00:18:09.820
It's great because I've just got two windows open in two terminal windows while I'm editing


00:18:09.820 --> 00:18:11.140
these tests.


00:18:11.140 --> 00:18:17.380
One of the terminals is running pytest 3.1.3 and one of them is running pytest 3.2 in two


00:18:17.380 --> 00:18:18.980
different virtual environments.


00:18:18.980 --> 00:18:23.300
And I've got pytest Watch just looking at the directory and every time I hit save on


00:18:23.300 --> 00:18:26.620
the tests, both of them go off and run.


00:18:26.620 --> 00:18:30.580
And eventually, when I get all done with this, I'll probably convert it to talks or something


00:18:30.580 --> 00:18:33.460
so that I can run them all the time.


00:18:33.460 --> 00:18:36.820
for now, interactively, pytestWatch is pretty cool.


00:18:36.820 --> 00:18:38.140
- Wow, that's amazing.


00:18:38.140 --> 00:18:39.880
How much code did you have to write


00:18:39.880 --> 00:18:42.300
in order to get that to be working with both versions?


00:18:42.300 --> 00:18:43.780
- I'm actually using the,


00:18:43.780 --> 00:18:48.420
there's a part of pytest that I do cover briefly in the book


00:18:48.420 --> 00:18:51.160
that's called the pytester.


00:18:51.160 --> 00:18:54.420
And it's a plugin that is used for


00:18:54.420 --> 00:18:58.360
the intended uses for testing plugins,


00:18:58.360 --> 00:19:02.000
but it's also used by the test code for pytest itself.


00:19:02.000 --> 00:19:08.240
and it allows you to run a pytest session and capture the output and ask things about it,


00:19:08.240 --> 00:19:14.560
like was this string in there and how many passes, fails, skips, things like that are in there.


00:19:14.560 --> 00:19:20.080
And so I'm writing the test just as if I was writing like a plugin or something.


00:19:20.080 --> 00:19:26.400
And it's taking me, it's about, it's not quick, but the format of each is pretty similar and it


00:19:26.400 --> 00:19:31.640
It takes me about a minute or so per example to get a test in place.


00:19:31.640 --> 00:19:37.560
But there's like 170 examples, so 170 minutes.


00:19:37.560 --> 00:19:39.840
Any way to speed that up?


00:19:39.840 --> 00:19:42.240
You're happy with it right now?


00:19:42.240 --> 00:19:43.640
There probably is.


00:19:43.640 --> 00:19:47.120
The slow part really is just the me looking at it.


00:19:47.120 --> 00:19:52.520
I could probably automate the whole thing and get it done faster, but I also want to


00:19:52.520 --> 00:19:58.000
be reading the book and while I'm putting these together to make sure that...


00:19:58.000 --> 00:20:03.120
Because there's sometimes there'll be you know something minor like I guess


00:20:03.120 --> 00:20:07.160
not really minor differences but I don't really want to just say I want the exact


00:20:07.160 --> 00:20:11.960
same output because if they added you know a period here or there that's not


00:20:11.960 --> 00:20:15.800
that big of a deal. But I want the the gist of it to be correct.


00:20:15.800 --> 00:20:17.640
- Wow, nicely done.


00:20:17.640 --> 00:20:19.840
- Anyway, so that's that.


00:20:19.840 --> 00:20:21.400
And we're done.


00:20:21.400 --> 00:20:22.240
Thanks a lot.


00:20:22.240 --> 00:20:23.080
- Yeah.


00:20:23.080 --> 00:20:24.420
- I wanna, usually at the end,


00:20:24.420 --> 00:20:27.720
we touch bases with each other to say what's going on.


00:20:27.720 --> 00:20:30.240
So I just learned today that Matt,


00:20:30.240 --> 00:20:31.560
that you worked at Twilio.


00:20:31.560 --> 00:20:32.440
- Yeah, I do.


00:20:32.440 --> 00:20:35.480
So Twilio for folks who don't know,


00:20:35.480 --> 00:20:39.800
it makes it easy for developers to add communications,


00:20:39.800 --> 00:20:41.000
like phone calling, messaging,


00:20:41.000 --> 00:20:43.240
and video to their applications.


00:20:43.240 --> 00:20:44.200
So if you've ever wondered,


00:20:44.200 --> 00:20:50.120
You're working on a feature and you're in the middle of a sprint and your user story


00:20:50.120 --> 00:20:52.560
says, "Okay, send a text message to somebody."


00:20:52.560 --> 00:20:54.040
You're like, "Well, how do I do that?


00:20:54.040 --> 00:20:58.000
How do I interact with this global telecom network?"


00:20:58.000 --> 00:21:01.280
Well, you could do that really easy with Twilio's API.


00:21:01.280 --> 00:21:02.800
So yeah, that's my day job.


00:21:02.800 --> 00:21:07.080
So in addition to working on full stack Python, I work at Twilio, which has been really great.


00:21:07.080 --> 00:21:08.880
I've been there for almost four years now.


00:21:08.880 --> 00:21:09.880
That's great.


00:21:09.880 --> 00:21:13.800
And you're also working on a project called Twilio Voices?


00:21:13.800 --> 00:21:18.440
Yeah, so Twilio Voices is something, a new project I've been working on, and it's probably


00:21:18.440 --> 00:21:25.080
of interest to listeners because we pay developers $500 for each published technical blog post


00:21:25.080 --> 00:21:27.800
that they have on the Twilio blog.


00:21:27.800 --> 00:21:34.280
So if anyone's listening and you want to try pytest Watch, and you want to learn a new


00:21:34.280 --> 00:21:38.040
open source project or something like that, if you just write some code and then you want


00:21:38.040 --> 00:21:42.720
to write a blog post about it, you can do that through Twilio Voices and get paid $500.


00:21:42.720 --> 00:21:46.500
The way that I see it is like the 500 bucks is a good way to get past the,


00:21:46.500 --> 00:21:49.120
the procrastination stage of writing a blog post.


00:21:49.120 --> 00:21:53.640
And then we promote that blog post to everyone in our different channels.


00:21:53.640 --> 00:21:57.240
So a lot of times these blog posts can be read by tens of thousands of people.


00:21:57.240 --> 00:22:01.540
For example, there was one called a wedding at scale, how I automated my,


00:22:01.540 --> 00:22:05.040
with Python and Twilio and Google.


00:22:05.040 --> 00:22:08.640
I mean, basically it was a developer who was talking about how he automated


00:22:08.640 --> 00:22:12.240
all the text messaging and communication for his wedding through a Python


00:22:12.240 --> 00:22:14.920
that he wrote, which is a really cool story.


00:22:14.920 --> 00:22:17.500
So the whole idea behind Twilio Voices is


00:22:17.500 --> 00:22:19.440
people have all these awesome hacks


00:22:19.440 --> 00:22:21.140
and applications that they've built.


00:22:21.140 --> 00:22:23.660
Tell us a story about it and show readers


00:22:23.660 --> 00:22:25.600
how to build what you built.


00:22:25.600 --> 00:22:26.900
Doesn't have to use Twilio,


00:22:26.900 --> 00:22:29.220
can be basically just any code that you've created


00:22:29.220 --> 00:22:32.240
as long as it's a cool story or a good tutorial.


00:22:32.240 --> 00:22:35.140
- So it doesn't have to be pushing Twilio,


00:22:35.140 --> 00:22:36.760
it can be just about anything?


00:22:36.760 --> 00:22:39.060
- No, 'cause we're a company for developers,


00:22:39.060 --> 00:22:40.900
by developers for developers,


00:22:40.900 --> 00:22:42.080
and we've always been that way.


00:22:42.080 --> 00:22:46.080
So whether you're using Twilio or not, we want to see the code that people have


00:22:46.080 --> 00:22:50.160
written and, one thing that's really great about this is every post goes


00:22:50.160 --> 00:22:54.240
through a rigorous review process, like an outline review, voice review, tech


00:22:54.240 --> 00:22:55.800
review, to make sure all the code works.


00:22:55.800 --> 00:23:00.940
So that like people who write these blog posts, make sure that their output is


00:23:00.940 --> 00:23:04.160
like the best that they've ever created, which has been really cool to see people


00:23:04.160 --> 00:23:07.120
say like, I never could have written a blog post that was like this polished.


00:23:07.120 --> 00:23:10.060
So we, we kind of put it through the, through the ringer to make sure that


00:23:10.060 --> 00:23:12.140
It's the highest quality post.


00:23:12.140 --> 00:23:13.300
- That's pretty cool.


00:23:13.300 --> 00:23:16.060
I mean, you usually have to pay money


00:23:16.060 --> 00:23:19.900
to interact with an editor, so that's nice.


00:23:19.900 --> 00:23:20.740
- Cool.


00:23:20.740 --> 00:23:22.220
- Yeah, you should write something on testing.


00:23:22.220 --> 00:23:24.260
- Maybe I should write a blog post, yeah.


00:23:24.260 --> 00:23:25.420
- We would love to have it.


00:23:25.420 --> 00:23:26.940
So what have you been up to, Brian?


00:23:26.940 --> 00:23:29.700
- Well, I'm not actually writing the book anymore,


00:23:29.700 --> 00:23:31.420
which is good, but I'm still working.


00:23:31.420 --> 00:23:32.260
- Congratulations.


00:23:32.260 --> 00:23:33.080
- Thanks.


00:23:33.080 --> 00:23:36.020
But I am working on book-related activities


00:23:36.020 --> 00:23:39.780
for this month, because it still is going through,


00:23:39.780 --> 00:23:46.660
It has to go through copy editing and figuring out marketing plans and all that good stuff.


00:23:46.660 --> 00:23:50.060
So I've got a couple of podcasts for testing code.


00:23:50.060 --> 00:23:54.860
One came out last week and I'll probably get, I'll do weekly ones, get them out.


00:23:54.860 --> 00:23:58.780
But it's still, that's still slow while I'm spending most of my free time on the book


00:23:58.780 --> 00:23:59.780
still.


00:23:59.780 --> 00:24:04.540
So other than that and my full time job, yeah, that's what I'm up to.


00:24:04.540 --> 00:24:05.540
So.


00:24:05.540 --> 00:24:07.540
Hopefully you get some time to sleep then.


00:24:07.540 --> 00:24:08.540
Yeah.


00:24:08.540 --> 00:24:13.660
So I've been fascinated hearing about Matt, and I've convinced him that I'm going to put


00:24:13.660 --> 00:24:17.580
him on the spot on the air and tell him that he's got to get on the testing code and talk


00:24:17.580 --> 00:24:19.820
about full stack sometime.


00:24:19.820 --> 00:24:20.820
So sure.


00:24:20.820 --> 00:24:22.540
Happy to do it.


00:24:22.540 --> 00:24:24.660
Thank you for listening to Python Bytes.


00:24:24.660 --> 00:24:27.780
Follow the show on Twitter via @pythonbytes.


00:24:27.780 --> 00:24:31.420
That's Python Bytes as in B-Y-T-E-S.


00:24:31.420 --> 00:24:37.160
And get the full show notes and links to things we talked about on the show at pythonbytes.fm.


00:24:37.160 --> 00:24:43.620
If you have a new story you'd like featured, just visit pythonbytes.fm and send it our


00:24:43.620 --> 00:24:44.620
way.


00:24:44.620 --> 00:24:48.020
We're always on the lookout for sharing something cool.


00:24:48.020 --> 00:24:49.300
This is Brian Aukin.


00:24:49.300 --> 00:24:53.740
On behalf of myself, Michael Kennedy, and Matt Mackay, thank you for listening and sharing


00:24:53.740 --> 00:24:55.980
this podcast with your friends and colleagues.


00:24:55.980 --> 00:25:05.980
[BLANK_AUDIO]

