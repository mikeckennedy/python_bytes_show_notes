
00:00:00.000 --> 00:00:05.400
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.400 --> 00:00:09.800
This is episode 287, recorded June 7th, and I am Brian Okken.


00:00:09.800 --> 00:00:11.000
I'm Michael Kennedy.


00:00:11.000 --> 00:00:12.400
It's good to talk to you, Michael.


00:00:12.400 --> 00:00:13.800
Yeah, good to see you again, Brian.


00:00:13.800 --> 00:00:14.300
Yeah.


00:00:14.300 --> 00:00:19.100
Again, we've got our wardrobe matching our background here, which is fantastic.


00:00:19.100 --> 00:00:19.600
Yeah.


00:00:19.600 --> 00:00:22.600
We like, you know, texted each other in the morning to make sure.


00:00:22.600 --> 00:00:24.000
[laughter]


00:00:24.000 --> 00:00:25.400
I'm feeling purple. I'm going to get a new shirt.


00:00:25.400 --> 00:00:25.900
[laughter]


00:00:25.900 --> 00:00:26.900
No, it's great.


00:00:26.900 --> 00:00:28.000
Good to see you as always.


00:00:28.000 --> 00:00:30.400
Lots of fun Python things to talk about here.


00:00:30.400 --> 00:00:32.900
>> Yeah. Well, let's jump into the first one.


00:00:32.900 --> 00:00:35.400
>> The first thing that I want to talk about here


00:00:35.400 --> 00:00:39.040
is distributing Python applications.


00:00:39.040 --> 00:00:43.540
Now, this is a little bit in the Python GUIs side of thing.


00:00:43.540 --> 00:00:46.400
Something you just can't get enough of in terms of like,


00:00:46.400 --> 00:00:49.680
"Hey, could we have more ways to do this that are awesome?"


00:00:49.680 --> 00:00:52.280
How about if we had ways that were automatic?


00:00:52.280 --> 00:00:52.880
>> Yeah.


00:00:52.880 --> 00:00:55.560
>> So I want to talk about this thing by


00:00:55.560 --> 00:01:00.720
Brent Bolle-Bregret called autopy2exe.


00:01:00.720 --> 00:01:03.980
It basically does what it says right in the name there,


00:01:03.980 --> 00:01:10.660
converts a .py file to a .exe using a simple graphical interface.


00:01:10.660 --> 00:01:13.440
Now, this GitHub description is a bit of


00:01:13.440 --> 00:01:18.320
a Windows bias because it'll also create it to Mac apps as well,


00:01:18.320 --> 00:01:21.380
to .app files, so it's not just a Windows thing.


00:01:21.380 --> 00:01:21.860
>> Cool.


00:01:21.860 --> 00:01:25.240
>> It's pretty popular. It has 2,000 stars, 400 forks.


00:01:25.240 --> 00:01:31.480
And what it is is a UI on top of things like Py2App or PyInstaller,


00:01:31.480 --> 00:01:33.000
specifically PyInstaller.


00:01:33.000 --> 00:01:38.080
So what you do is you fire this thing up and out pops this user interface


00:01:38.080 --> 00:01:41.480
that if you're watching the YouTube stream, you can see there's a user


00:01:41.480 --> 00:01:45.840
interface here and it just says, pick the starting Python file for


00:01:45.840 --> 00:01:46.920
your application.


00:01:46.920 --> 00:01:49.440
And you can say, what do you want the output to be?


00:01:49.440 --> 00:01:51.800
One file or one directory?


00:01:51.800 --> 00:01:53.680
>> Okay. >> I think we all want it to be one


00:01:53.680 --> 00:01:56.840
probably generally, but maybe a directory, I don't know.


00:01:56.840 --> 00:01:57.680
What else you're gonna,


00:01:57.680 --> 00:01:59.320
maybe you wanna do some other things there.


00:01:59.320 --> 00:02:04.320
But what I did is I tried this against my


00:02:04.320 --> 00:02:08.320
URLify little appy thing, which, let me pull that up.


00:02:08.320 --> 00:02:12.520
This is something I built a while ago with Rumps,


00:02:12.520 --> 00:02:13.360
which is fantastic,


00:02:13.360 --> 00:02:16.400
ridiculously uncomplicated menu bar apps


00:02:16.400 --> 00:02:19.240
or something like that for Mac.


00:02:19.240 --> 00:02:21.840
And all it is is a little thing that goes up in your Mac bar


00:02:21.840 --> 00:02:25.720
and it has like, you know, Slugify text or Trimit


00:02:25.720 --> 00:02:30.480
or lower cases, just, I'm constantly taking names


00:02:30.480 --> 00:02:32.720
of like file names and turning them into something


00:02:32.720 --> 00:02:37.520
I could put as a URL or like a title of a video


00:02:37.520 --> 00:02:38.720
or something and turning it into something


00:02:38.720 --> 00:02:40.040
that would be a good URL.


00:02:40.040 --> 00:02:41.400
So that's what this little app is for.


00:02:41.400 --> 00:02:42.960
But here's the thing is it's a Python app


00:02:42.960 --> 00:02:47.160
that runs in the menu bar on my Mac with no terminal view.


00:02:47.160 --> 00:02:49.540
And I wanted to be able to distribute it to people.


00:02:49.540 --> 00:02:53.680
And so the way you get it is you just download a zip file, which is just the


00:02:53.680 --> 00:02:56.980
zip up dot app executable, right?


00:02:56.980 --> 00:03:00.520
So I had done a bunch of stuff with the setup and all those kinds of things


00:03:00.520 --> 00:03:02.500
with PI installer to build this.


00:03:02.500 --> 00:03:08.100
So my test case was, well, let me take this auto high to EXE thing and just


00:03:08.100 --> 00:03:10.500
point it at that and see what happens.


00:03:10.500 --> 00:03:12.400
And what happened was good things.


00:03:12.400 --> 00:03:13.320
It was really interesting.


00:03:13.320 --> 00:03:18.820
There's the, an app dot PI, but there's dependent Python files that it uses.


00:03:19.100 --> 00:03:23.100
I mean, I'm not a beast. I don't write my entire application in one file.


00:03:23.100 --> 00:03:26.620
Like there's other things broken apart in there and that gets bundled up.


00:03:26.620 --> 00:03:29.900
And it somehow discovered that, pulled those all in.


00:03:29.900 --> 00:03:34.020
So I just picked the top level file and it found the dependencies,


00:03:34.020 --> 00:03:38.020
you know, the requirements.txt type dependencies and so on.


00:03:38.020 --> 00:03:42.300
And it created a .app file that, as far as I could tell, ran just fine.


00:03:42.300 --> 00:03:43.180
>> That's cool.


00:03:43.180 --> 00:03:43.700
>> Isn't that cool?


00:03:43.700 --> 00:03:44.700
>> Yeah, I like it.


00:03:44.700 --> 00:03:47.900
>> You can decide if it's a window-based application,


00:03:47.900 --> 00:03:50.180
so hide the console, which is what I said,


00:03:50.180 --> 00:03:51.860
because I want it to run in the menu bar.


00:03:51.860 --> 00:03:53.300
But if it was a console-based app,


00:03:53.300 --> 00:03:55.060
but you just wanted to distribute it


00:03:55.060 --> 00:03:56.900
as a single thing with no Python,


00:03:56.900 --> 00:03:58.660
well, no Python requirements,


00:03:58.660 --> 00:04:00.260
you could create a console-based app.


00:04:00.260 --> 00:04:03.740
You set the icon, you can add in additional files.


00:04:03.740 --> 00:04:07.780
So if there's like, you know, JSON configuration files


00:04:07.780 --> 00:04:10.860
or YAML files or images or something like that


00:04:10.860 --> 00:04:12.860
you need to take along, you can configure that there.


00:04:12.860 --> 00:04:14.140
And then there's an advanced section


00:04:14.140 --> 00:04:16.140
that expands out to be like pages of stuff


00:04:16.140 --> 00:04:18.020
that I don't remember, same thing for settings.


00:04:18.020 --> 00:04:20.740
Then you just click the big convert to py to


00:04:20.740 --> 00:04:24.720
exe button and you get ironically not an exe but a .app file.


00:04:24.720 --> 00:04:25.600
There you go.


00:04:25.600 --> 00:04:26.380
>> That's cool.


00:04:26.380 --> 00:04:26.980
>> Isn't that cool?


00:04:26.980 --> 00:04:27.180
>> Yeah.


00:04:27.180 --> 00:04:28.660
>> For people who are playing around with this,


00:04:28.660 --> 00:04:30.700
I think they even have,


00:04:30.700 --> 00:04:32.740
they must be listening to us here,


00:04:32.740 --> 00:04:35.340
they even have a little animated gif of how this all


00:04:35.340 --> 00:04:38.300
works right on the GitHub.


00:04:38.300 --> 00:04:39.020
>> That's pretty cool.


00:04:39.020 --> 00:04:40.220
>> If you want to see how it works,


00:04:40.220 --> 00:04:41.700
I guess there's not a whole lot,


00:04:41.700 --> 00:04:42.900
but you browse for the icon,


00:04:42.900 --> 00:04:44.680
you go in there and you check out some things,


00:04:44.680 --> 00:04:48.120
And then you just hit build and it takes a little while, but you know, that's


00:04:48.120 --> 00:04:51.960
pi2exe. That's how it goes. And it just sits there and it cranks away for a while,


00:04:51.960 --> 00:04:57.880
bundles it all up and yeah, got a little executable. So if this is something you want


00:04:57.880 --> 00:05:02.120
to play with, but you're like, ah, it's kind of a real pain to go and figure out, you know,


00:05:02.120 --> 00:05:08.520
all the setup pi commands in order to get it to do the pi installer commands and whatnot,


00:05:08.520 --> 00:05:12.760
then you know, you can definitely give this a shot. I think it's pretty neat.


00:05:12.760 --> 00:05:15.440
I think with mine, I didn't use py2 installer.


00:05:15.440 --> 00:05:16.960
I think I used py2app.


00:05:16.960 --> 00:05:18.000
Yeah, that's what I used.


00:05:18.000 --> 00:05:19.200
So pretty neat.


00:05:19.200 --> 00:05:20.600
Yeah, check that out.


00:05:20.600 --> 00:05:22.240
I think people will find it helpful


00:05:22.240 --> 00:05:24.400
for ways to distribute Python apps.


00:05:24.400 --> 00:05:27.640
- Yeah, and I like that it looks pretty professional looking


00:05:27.640 --> 00:05:30.040
and then also, especially, I mean,


00:05:30.040 --> 00:05:32.520
especially with internal, like internal company stuff,


00:05:32.520 --> 00:05:36.040
that happens a lot where you wanna share something around.


00:05:36.040 --> 00:05:37.760
- Yeah, yeah, like just download this and run it.


00:05:37.760 --> 00:05:39.520
Please don't ask me how to set up a path


00:05:39.520 --> 00:05:43.320
so that your Python that's not Python 3.3,


00:05:43.320 --> 00:05:45.440
or whatever, is the one that runs it.


00:05:45.440 --> 00:05:47.640
>> Nobody needs to know that it's Python underneath.


00:05:47.640 --> 00:05:49.640
>> Yeah, exactly.


00:05:49.640 --> 00:05:51.480
>> Cool. I like it.


00:05:51.480 --> 00:05:53.120
>> One other thing, by the way,


00:05:53.120 --> 00:05:54.960
it's a GUI application.


00:05:54.960 --> 00:05:56.280
It's self-written in Python.


00:05:56.280 --> 00:05:59.280
So you may wonder, what is it doing?


00:05:59.280 --> 00:06:01.220
Maybe it's bundled itself.


00:06:01.220 --> 00:06:02.840
Obviously, that'd be very meta.


00:06:02.840 --> 00:06:06.680
If autopy2xe could deliver an autopy2xe itself,


00:06:06.680 --> 00:06:08.360
that's obviously lovely.


00:06:08.360 --> 00:06:13.100
It reminded me that I have Chrome installed when I ran it.


00:06:13.100 --> 00:06:15.860
What it does is it runs something in the background,


00:06:15.860 --> 00:06:17.320
then it fires up Chrome,


00:06:17.320 --> 00:06:23.800
which becomes the UI in this Windows looking Chrome window.


00:06:23.800 --> 00:06:26.020
It's not quite an Electron app,


00:06:26.020 --> 00:06:28.800
but it's Electron in a style.


00:06:28.800 --> 00:06:32.160
Anyway, it's an interesting little UI app itself.


00:06:32.160 --> 00:06:34.700
I'm not sure what it's doing, but it works.


00:06:34.700 --> 00:06:36.120
>> Nice. All right.


00:06:36.120 --> 00:06:38.920
Well, I'd like to talk about Jupyter.


00:06:38.920 --> 00:06:40.320
So Jupyter notebooks.


00:06:40.320 --> 00:06:40.800
Oh yeah.


00:06:40.800 --> 00:06:41.160
Yeah.


00:06:41.160 --> 00:06:42.440
So this is how do you use it?


00:06:42.440 --> 00:06:43.600
How do you use it?


00:06:43.600 --> 00:06:49.120
So like, I was just fascinated by the click baitiness of this, but it's okay.


00:06:49.120 --> 00:06:53.720
Eight surprising ways to eight, eight surprising ways how to use Jupyter


00:06:53.720 --> 00:06:57.400
notebooks, and I gotta say, I didn't know you could do some of this stuff with


00:06:57.400 --> 00:06:58.640
Jupyter, so it's pretty cool.


00:06:58.640 --> 00:07:03.440
So, the first one package development, why would you, I don't know why, but


00:07:03.560 --> 00:07:06.280
you know, some people that are more comfortable in Jupyter


00:07:06.280 --> 00:07:09.520
than they are in IDE or something, maybe it's good.


00:07:09.520 --> 00:07:13.420
So there's a package called mbdev that you can use to,


00:07:13.420 --> 00:07:17.520
and it's by a company called FastAI,


00:07:17.520 --> 00:07:22.520
that you can use to help with package development,


00:07:22.520 --> 00:07:25.760
including, you know, trying to get your CI working


00:07:25.760 --> 00:07:28.760
and your tests all in one place


00:07:28.760 --> 00:07:30.480
and demos and documentation and stuff.


00:07:30.480 --> 00:07:32.240
So that's kind of neat.


00:07:32.240 --> 00:07:33.120
Like that idea.


00:07:33.120 --> 00:07:36.440
I definitely should try to play with that to see how that works.


00:07:36.440 --> 00:07:39.300
Apparently, there's a video.


00:07:39.300 --> 00:07:41.360
Somebody gave a talk around it.


00:07:41.360 --> 00:07:42.680
>> Lovely.


00:07:42.680 --> 00:07:44.480
>> Yeah. Build a web app.


00:07:44.480 --> 00:07:47.360
Building a web app with Jupyter,


00:07:47.360 --> 00:07:49.600
I think that's actually a pretty cool idea.


00:07:49.600 --> 00:07:52.120
There's several suggestions using Voila.


00:07:52.120 --> 00:07:53.640
I think we covered that.


00:07:53.640 --> 00:07:55.480
>> Yeah, we've covered that before,


00:07:55.480 --> 00:07:56.760
but the other one I don't think we have.


00:07:56.760 --> 00:08:00.840
>> IPyWidgets, I'm not sure what that one is.


00:08:00.840 --> 00:08:03.440
So I haven't looked at the widgets thing,


00:08:03.440 --> 00:08:07.060
but more widgets within your window, sure, why not?


00:08:07.060 --> 00:08:08.800
Why are there no, it's a widgets thing.


00:08:08.800 --> 00:08:13.100
You'd think there'd be images on the readme, but anyway.


00:08:13.100 --> 00:08:15.080
And then a framework called Mercury,


00:08:15.080 --> 00:08:17.320
and this shows up several times in this.


00:08:17.320 --> 00:08:22.320
So Mercury does a lot of stuff around Jupyter Notebooks


00:08:22.320 --> 00:08:25.500
and doing extra things.


00:08:25.500 --> 00:08:28.940
So this shows up several times in this list.


00:08:28.940 --> 00:08:33.220
So for one, for creating a web app,


00:08:33.220 --> 00:08:35.620
which is kind of neat, especially if you're sharing data


00:08:35.620 --> 00:08:36.740
and have interactive stuff,


00:08:36.740 --> 00:08:41.660
you might have doing stuff with a web application, be cool.


00:08:41.660 --> 00:08:44.300
Slide deck, gotta love it.


00:08:44.300 --> 00:08:47.020
I definitely wanna try this out


00:08:47.020 --> 00:08:50.660
because using NB convert or Mercury,


00:08:50.660 --> 00:08:53.140
apparently Mercury does that too,


00:08:53.140 --> 00:08:54.460
uses reveal.js.


00:08:54.460 --> 00:08:57.140
I think a lot of people have tried reveal.js before


00:08:57.140 --> 00:09:00.400
for slides, but having, building it within notebooks,


00:09:00.400 --> 00:09:02.280
building your slide decks within notebooks,


00:09:02.280 --> 00:09:06.880
and then having that just run, that's cool.


00:09:06.880 --> 00:09:07.720
Building a book.


00:09:07.720 --> 00:09:09.600
This is something else that sounds pretty interesting.


00:09:09.600 --> 00:09:13.800
I'd like to try doing some code, a notebook,


00:09:13.800 --> 00:09:15.000
a book-like thing.


00:09:15.000 --> 00:09:17.640
Now I don't have, I'm curious about this.


00:09:17.640 --> 00:09:21.120
So the book, you build a website that looks like a book,


00:09:21.120 --> 00:09:22.480
but that's not a book.


00:09:22.480 --> 00:09:26.680
So it says it can be exported to a PDF file,


00:09:26.680 --> 00:09:31.680
but I don't see anywhere you're exporting to an EPUB or Mobi.


00:09:31.680 --> 00:09:36.480
So, you know, I call BS on whether that this is a book.


00:09:36.480 --> 00:09:38.320
This is a website that holds book contents


00:09:38.320 --> 00:09:39.900
as far as I can tell.


00:09:39.900 --> 00:09:41.080
Still cool though.


00:09:41.080 --> 00:09:42.000
Running a blog.


00:09:42.000 --> 00:09:44.840
This is something I had no idea Nikola could do.


00:09:44.840 --> 00:09:48.380
So Nikola, Nikola, I don't know how to pronounce that.


00:09:48.380 --> 00:09:50.720
I've ran across it before.


00:09:50.720 --> 00:09:52.840
I'm not sure what we, if we've covered it,


00:09:52.840 --> 00:09:56.240
but it's a static site generator.


00:09:56.240 --> 00:10:00.120
and it apparently can take notebooks files


00:10:00.120 --> 00:10:02.920
and just run notebooks as a blog.


00:10:02.920 --> 00:10:04.360
So that's pretty cool.


00:10:04.360 --> 00:10:07.200
- Like notebooks as a blog, oh, that's interesting.


00:10:07.200 --> 00:10:08.360
- Well, yeah, especially if you're gonna write


00:10:08.360 --> 00:10:10.160
about like some Python technique or something,


00:10:10.160 --> 00:10:11.720
you just do a little demo of it


00:10:11.720 --> 00:10:14.520
and then publish that as a text thing,


00:10:14.520 --> 00:10:16.320
or I don't know if it outputs,


00:10:16.320 --> 00:10:18.240
I didn't read it close enough,


00:10:18.240 --> 00:10:21.500
outputs the exports every notebook to an HTML file


00:10:21.500 --> 00:10:23.760
and then publish all the files on a static website.


00:10:23.760 --> 00:10:24.680
That's pretty neat.


00:10:26.200 --> 00:10:28.340
Doing reports and dashboards,


00:10:28.340 --> 00:10:30.920
that's kind of like Jupyter would rock at that.


00:10:30.920 --> 00:10:33.180
And I think we've covered stuff like this before.


00:10:33.180 --> 00:10:35.600
But one of the things in the dashboard section


00:10:35.600 --> 00:10:38.140
that I thought was neat was this Mercury tool


00:10:38.140 --> 00:10:39.680
has a schedule option.


00:10:39.680 --> 00:10:41.240
So once you set up the report,


00:10:41.240 --> 00:10:43.700
you can schedule it to execute,


00:10:43.700 --> 00:10:46.240
you know, like once a day or every hour


00:10:46.240 --> 00:10:47.140
or something like that.


00:10:47.140 --> 00:10:50.360
And that's pretty neat to not have it do constantly,


00:10:50.360 --> 00:10:54.480
but update your dashboard at a time.


00:10:54.480 --> 00:10:55.460
- I do like that.


00:10:55.460 --> 00:10:57.860
- That's really cool, so you could have some kind of dashboard


00:10:57.860 --> 00:11:00.540
instead of creating it in the full web app.


00:11:00.540 --> 00:11:01.700
You just publish this,


00:11:01.700 --> 00:11:03.780
but obviously you want it to refresh, right?


00:11:03.780 --> 00:11:04.820
- Yeah, yep.


00:11:04.820 --> 00:11:09.020
Anyway, oh, last one, REST API.


00:11:09.020 --> 00:11:12.380
This is interesting.


00:11:12.380 --> 00:11:15.780
I wouldn't have thought to build a REST API with Jupyter.


00:11:15.780 --> 00:11:18.460
So I guess you can do all this stuff.


00:11:18.460 --> 00:11:20.940
Whether or not you should, I guess it's up to you.


00:11:20.940 --> 00:11:23.300
Anyway. - Yeah, for sure.


00:11:23.300 --> 00:11:24.620
Anthony on the audience says,


00:11:24.620 --> 00:11:27.980
"Nicola works well as a static blog generator,


00:11:27.980 --> 00:11:29.380
preferred over Pelican."


00:11:29.380 --> 00:11:32.420
- Well, that's saying something, nice.


00:11:32.420 --> 00:11:33.700
- That is.


00:11:33.700 --> 00:11:35.100
- Yeah.


00:11:35.100 --> 00:11:36.380
- Brian, wouldn't it be good to know


00:11:36.380 --> 00:11:37.980
which ones are more popular,


00:11:37.980 --> 00:11:39.820
which ones maybe you should depend upon?


00:11:39.820 --> 00:11:40.660
- Yeah.


00:11:40.660 --> 00:11:41.700
- All right, well Al.


00:11:41.700 --> 00:11:42.540
- I took it over.


00:11:42.540 --> 00:11:44.380
- Let's, that's all right.


00:11:44.380 --> 00:11:48.060
So this one is from, let me get it right here.


00:11:48.060 --> 00:11:51.060
This is from Tancala Ashok,


00:11:51.060 --> 00:11:55.100
And they built this thing called Pip Trends.


00:11:55.100 --> 00:11:58.620
It's modeled a little bit after NPM Trends.


00:11:58.620 --> 00:12:02.620
And it just lets you compare the popularity of packages


00:12:02.620 --> 00:12:04.620
based on their GitHub statistics.


00:12:04.620 --> 00:12:07.940
So GitHub statistics, that's one metric of popularity,


00:12:07.940 --> 00:12:10.260
but let's give it a bit of a run.


00:12:10.260 --> 00:12:12.660
So what about if we type Flask?


00:12:12.660 --> 00:12:15.860
It says, it immediately pulls up a nice little autocomplete


00:12:15.860 --> 00:12:17.800
that says Flask, a simple web framework


00:12:17.800 --> 00:12:20.100
for building complex web applications.


00:12:20.100 --> 00:12:23.260
But then all the other ones like Flask to Postman and so on.


00:12:23.260 --> 00:12:24.100
It's kind of interesting.


00:12:24.100 --> 00:12:26.660
I didn't really know about Flask to Postman.


00:12:26.660 --> 00:12:28.020
Maybe we'll talk about that next time.


00:12:28.020 --> 00:12:28.940
But let's pick Flask.


00:12:28.940 --> 00:12:31.580
And then it immediately says,


00:12:31.580 --> 00:12:34.140
well, what else might you consider along with this?


00:12:34.140 --> 00:12:37.700
Like, well, how about FastAPI and Django?


00:12:37.700 --> 00:12:39.260
And what do we have?


00:12:39.260 --> 00:12:41.500
It also suggested Bottle for a little while.


00:12:41.500 --> 00:12:42.860
So we'll throw Bottle in there maybe.


00:12:42.860 --> 00:12:44.180
And let's do a search.


00:12:44.180 --> 00:12:45.300
And it comes up with a graph


00:12:45.300 --> 00:12:48.180
that honestly surprised me a fair amount.


00:12:48.180 --> 00:12:50.660
There's different levels of popularity,


00:12:50.660 --> 00:12:53.300
but that's not the first thing that surprised me.


00:12:53.300 --> 00:12:57.100
The first thing that surprised me is the regular cycles


00:12:57.100 --> 00:12:59.380
that all of these packages seem to go through.


00:12:59.380 --> 00:13:00.620
Does that seem strange to you?


00:13:00.620 --> 00:13:02.820
- Well, I've noticed it before,


00:13:02.820 --> 00:13:04.500
and I don't really know what's going on.


00:13:04.500 --> 00:13:05.660
Is it the weekends?


00:13:05.660 --> 00:13:06.980
- Yes, very good.


00:13:06.980 --> 00:13:09.060
So four or five was the weekend,


00:13:09.060 --> 00:13:11.760
six, four, six, five, and that's where the dip is.


00:13:11.760 --> 00:13:13.900
So people download stuff less on the weekends


00:13:13.900 --> 00:13:15.180
because there's less.


00:13:15.180 --> 00:13:17.160
Create me a new environment, create me a new project,


00:13:17.160 --> 00:13:19.600
check it out, set it up, all that kind of stuff.


00:13:19.600 --> 00:13:21.400
Which is healthy, but there's still a decent number


00:13:21.400 --> 00:13:23.120
of downloads going on the weekend there.


00:13:23.120 --> 00:13:25.200
- Yeah, I kind of wish that I'd like to see


00:13:25.200 --> 00:13:29.880
like a seven day moving window, moving average for API.


00:13:29.880 --> 00:13:31.880
- Yeah, yeah, like a different window


00:13:31.880 --> 00:13:34.440
averaging or projecting function.


00:13:34.440 --> 00:13:37.560
Anyway, what we get here is we see that Flask,


00:13:37.560 --> 00:13:41.240
sorry, FastAPI and Django are super similar,


00:13:41.240 --> 00:13:44.820
like almost tied according to GitHub statistics.


00:13:44.820 --> 00:13:45.660
And these are downloads.


00:13:45.660 --> 00:13:47.580
I don't think you get downloads from GitHub.


00:13:47.580 --> 00:13:49.100
I think this is probably from


00:13:49.100 --> 00:13:51.060
PyPI or BigQuery or something.


00:13:51.060 --> 00:13:52.740
I'm not sure where those numbers are coming from


00:13:52.740 --> 00:13:55.460
because I don't know where those are on


00:13:55.460 --> 00:13:59.060
these time series download numbers are on GitHub.


00:13:59.060 --> 00:14:01.100
They're probably coming from somewhere else.


00:14:01.100 --> 00:14:03.860
But yeah, you can throw different projects in here and say,


00:14:03.860 --> 00:14:08.440
"Oh, this one's relatively popular compared to that or whatever." What do you think?


00:14:08.440 --> 00:14:10.820
>> I think it's neat, especially with comparing.


00:14:10.820 --> 00:14:13.100
I mean, there's other ways to get the stats,


00:14:13.100 --> 00:14:16.520
but being able to grab a few related ones.


00:14:16.520 --> 00:14:18.780
Having suggestions is neat too.


00:14:18.780 --> 00:14:19.760
>> Yeah.


00:14:19.760 --> 00:14:20.360
>> So it looks-


00:14:20.360 --> 00:14:22.240
>> It also has some more information about the package.


00:14:22.240 --> 00:14:23.660
Like if you go to Flask,


00:14:23.660 --> 00:14:24.680
it's 12 years old,


00:14:24.680 --> 00:14:26.920
it has 45 versions.


00:14:26.920 --> 00:14:29.420
Its last release was one month ago.


00:14:29.420 --> 00:14:31.120
Its dev status is stable.


00:14:31.120 --> 00:14:32.640
It requires Python 3.7,


00:14:32.640 --> 00:14:35.000
gives the license and who it's intended for.


00:14:35.000 --> 00:14:38.000
You can see similarly for FastAPI,


00:14:38.000 --> 00:14:40.640
for Django, and Bottle, and so on.


00:14:40.640 --> 00:14:41.320
>> Cool.


00:14:41.320 --> 00:14:43.920
Also down here in the GitHub stats, you can see


00:14:43.920 --> 00:14:47.520
like Flask, there's 59,000 stars.


00:14:47.520 --> 00:14:49.960
For Django, there's 64,000 stars.


00:14:49.960 --> 00:14:51.520
Number of open PRs.


00:14:51.520 --> 00:14:54.200
Wow, FastAPI has a lot of open PRs and issues.


00:14:54.200 --> 00:14:56.000
That's crazy.


00:14:56.000 --> 00:14:57.560
When was the last update and so on.


00:14:57.560 --> 00:15:00.400
So yeah, and it also gives you more comparisons down here like,


00:15:00.400 --> 00:15:01.680
well, that was fun.


00:15:01.680 --> 00:15:05.240
What about Flask versus Django versus FastAPI, which is what we did.


00:15:05.240 --> 00:15:07.400
But or NumPy versus Pandas, for example,


00:15:07.400 --> 00:15:08.840
you can see them and so on.


00:15:08.840 --> 00:15:10.360
>> That's pretty neat. I like it.


00:15:10.360 --> 00:15:13.880
Yeah, yeah. So, piptrends.com, you can check it out.


00:15:13.880 --> 00:15:17.780
So, I want to talk about, what do I want to talk about?


00:15:17.780 --> 00:15:19.280
Class, being classy.


00:15:19.280 --> 00:15:22.280
Actually, being callable.


00:15:22.280 --> 00:15:25.280
So, Trey Hunter put this blog post out called,


00:15:25.280 --> 00:15:29.160
"Is it a class or a function? It's a callable."


00:15:29.160 --> 00:15:32.760
And this is actually something that I guess I realized,


00:15:32.760 --> 00:15:34.920
I just sort of got used to with Python.


00:15:34.920 --> 00:15:38.520
It's a lot more, if you call something,


00:15:38.520 --> 00:15:43.120
Like as if you would call a function, it might not be a function.


00:15:43.120 --> 00:15:47.720
It might be a class, it might be an object that's callable, it might be a class object.


00:15:47.720 --> 00:15:50.120
All sorts of stuff you could do.


00:15:50.120 --> 00:15:54.020
Like for instance, just to be clear, we were talking about,


00:15:54.020 --> 00:15:57.220
or he talks about classes or callables.


00:15:57.220 --> 00:16:03.620
So in like some, in like JavaScript or C++, you'd have to say new something.


00:16:03.620 --> 00:16:07.020
So you'd have to say like a new data object or something.


00:16:07.020 --> 00:16:10.140
But in Python, you just call date time with some parameters


00:16:10.140 --> 00:16:12.340
and you get back a date time object.


00:16:12.340 --> 00:16:14.340
That's neat.


00:16:14.340 --> 00:16:17.540
But so it's just, I guess,


00:16:17.540 --> 00:16:22.340
this is a good article to go through just to realize that you don't really have to care.


00:16:22.340 --> 00:16:25.620
There's a whole bunch of stuff that act like functions


00:16:25.620 --> 00:16:27.620
and it's okay if they're not functions.


00:16:27.620 --> 00:16:29.620
You just have to know if it's callable.


00:16:29.620 --> 00:16:32.620
And he talks a little bit about


00:16:32.620 --> 00:16:38.080
using a dunder init to make something callable that works.


00:16:38.080 --> 00:16:44.480
Properties are like decorators or a thing that are a callable item.


00:16:44.480 --> 00:16:50.640
It's just a good discussion about all of this.


00:16:50.640 --> 00:16:53.480
I thought this was a fascinating article and I'm not


00:16:53.480 --> 00:16:56.800
sure I ever really thought about partials before.


00:16:56.800 --> 00:17:00.300
Like a partial function is like a function that


00:17:00.300 --> 00:17:04.760
creates an object and then you call it with some more stuff,


00:17:04.760 --> 00:17:07.920
and then it creates the rest of it or creates in anyway.


00:17:07.920 --> 00:17:08.720
Maybe I got that wrong.


00:17:08.720 --> 00:17:10.700
>> Interesting. Yeah, from Functools.


00:17:10.700 --> 00:17:12.240
I'd never used partial before.


00:17:12.240 --> 00:17:12.780
>> Okay.


00:17:12.780 --> 00:17:16.240
>> Yeah. Then there's a call


00:17:16.240 --> 00:17:19.120
decorator or a call dunder method that you can


00:17:19.120 --> 00:17:23.840
use that helps out with making partials.


00:17:23.840 --> 00:17:30.200
Talks about iterators and decorators and all sorts of stuff


00:17:30.200 --> 00:17:32.740
like that that actually act like callables, but they're not,


00:17:32.740 --> 00:17:36.620
they're like objects. The thing that I don't know where this is,


00:17:36.620 --> 00:17:40.140
but the thing there's a statement in here that I thought


00:17:40.140 --> 00:17:44.180
was amazing. So there's a, there's a page on the PyPI


00:17:44.180 --> 00:17:48.380
documentation of the built in functions within Python. And,


00:17:48.380 --> 00:17:53.540
and Trey points out that of the 69, there's 69 listed built in


00:17:53.540 --> 00:17:58.640
functions within Python, only 42 are actually implemented as


00:17:58.660 --> 00:18:06.180
functions. 26 of them are classes and one is an instance of a callable class.


00:18:06.180 --> 00:18:15.300
And some of them in Python 2, there were more and some of them got converted. Like map and


00:18:15.300 --> 00:18:20.980
filter and range and zip used to be functions and now they're objects or classes or something.


00:18:20.980 --> 00:18:27.220
The len function, I use that all the time, right? It's not a function. It's a callable class.


00:18:27.220 --> 00:18:34.260
- Okay. - And zip, the like reversed enumerate range filter, use those all the time.


00:18:34.260 --> 00:18:36.500
They're not functions, but they're callable.


00:18:36.500 --> 00:18:42.500
So anyway, I just thought that was an interesting take on Python is different than other languages.


00:18:42.500 --> 00:18:44.020
- It's different.


00:18:44.020 --> 00:18:44.260
Yeah.


00:18:44.260 --> 00:18:48.100
A lot of languages, you would never have that ambiguity, right?


00:18:48.100 --> 00:18:51.860
But it's the kind of ambiguity that you don't need to know or be aware of.


00:18:51.860 --> 00:18:54.580
So, I'll get all this. - Yeah, so maybe ignore this article.


00:18:54.580 --> 00:19:05.580
No, no, no. I mean, it's interesting to know. I'm just saying like, it's not necessarily a problem that it's not super clear whether it's a class or function because you call it and it does the thing you want it to do. So you're good to go.


00:19:05.580 --> 00:19:16.580
Yeah, like Sam Morley pointed out here, partial is useful. I think it can be pickled unlike typical closures that can't. Might be wrong.


00:19:16.580 --> 00:19:19.580
But it just made me think about we, in other languages,


00:19:19.580 --> 00:19:23.060
they really do talk about closures a lot and things like that.


00:19:23.060 --> 00:19:25.120
We just don't have to care. It just works.


00:19:25.120 --> 00:19:26.580
I don't know. It just works.


00:19:26.580 --> 00:19:29.100
>> Yeah. Very nice.


00:19:29.100 --> 00:19:30.220
>> Well, we're at the-


00:19:30.220 --> 00:19:32.100
>> Brian, we flew through those.


00:19:32.100 --> 00:19:33.820
>> We did fly through them.


00:19:33.820 --> 00:19:36.540
We forgot to plug our stuff.


00:19:36.540 --> 00:19:37.500
>> We did.


00:19:37.500 --> 00:19:39.220
>> Instead of a sponsor today,


00:19:39.220 --> 00:19:41.380
we've got work sponsored by us.


00:19:41.380 --> 00:19:43.820
I want to make sure that everybody that is


00:19:43.820 --> 00:19:46.380
thinking about trying to learn something new in Python,


00:19:46.380 --> 00:19:52.420
First, check out Talk Python Training because Michael has a whole bunch of awesome courses.


00:19:52.420 --> 00:19:56.780
And I'm sure you can learn something for just a few bucks.


00:19:56.780 --> 00:19:58.780
Good prices.


00:19:58.780 --> 00:20:01.380
And a new book, version 2, edition 2.


00:20:01.380 --> 00:20:03.660
Yeah, I've had a lot of good feedback.


00:20:03.660 --> 00:20:05.900
One of the things I love is getting pictures.


00:20:05.900 --> 00:20:10.100
I don't know why, but having somebody take a picture either of themselves


00:20:10.100 --> 00:20:13.380
holding the Python testing with PyTest second edition,


00:20:13.380 --> 00:20:16.100
heck, you can do the first edition too if that's what you got.


00:20:16.100 --> 00:20:22.340
But either holding it somewhere unique like out in a park or near a monument or something.


00:20:22.340 --> 00:20:24.940
That would be so cool. I love it when people send me pictures.


00:20:24.940 --> 00:20:26.580
>> Yeah, that's awesome.


00:20:26.580 --> 00:20:27.780
>> Got any extras for us?


00:20:27.780 --> 00:20:30.100
>> I have some extras. Yes, you know that I do.


00:20:30.100 --> 00:20:30.260
>> Okay.


00:20:30.260 --> 00:20:33.460
>> All right. So this first one here, let's check this out.


00:20:33.460 --> 00:20:35.420
So this is interesting.


00:20:35.420 --> 00:20:37.580
This comes by way of Dan Bader,


00:20:37.580 --> 00:20:40.620
and it's the Orion Browser.


00:20:40.620 --> 00:20:43.540
Just when you thought there was no more room for new browsers,


00:20:43.540 --> 00:20:44.680
here's a new browser.


00:20:44.680 --> 00:20:48.680
This one is different. So you see I'm running Vivaldi these days. I love that.


00:20:48.680 --> 00:20:51.680
Other people are using Brave, right?


00:20:51.680 --> 00:20:55.680
And so all of those browsers take the Chromium engine,


00:20:55.680 --> 00:20:59.680
strip off the Google stuff, and then put their own shell,


00:20:59.680 --> 00:21:05.680
many times more privacy-protecting and so on, around them, right?


00:21:05.680 --> 00:21:08.680
And we've got Firefox, which is awesome.


00:21:08.680 --> 00:21:10.680
It's got its own engine. It doesn't do that.


00:21:10.680 --> 00:21:15.640
But almost every other browser is, let's take Chrome and Chromium and wrap it up in our


00:21:15.640 --> 00:21:19.900
own flavor of our thing with our own philosophy on how the web should be.


00:21:19.900 --> 00:21:23.480
So this Orion browser is that, but for Safari.


00:21:23.480 --> 00:21:24.480
Okay.


00:21:24.480 --> 00:21:25.480
Interesting.


00:21:25.480 --> 00:21:29.720
So if you're into Safari, you know, it has things like on your Mac, it has better battery


00:21:29.720 --> 00:21:31.200
life and so on.


00:21:31.200 --> 00:21:35.120
But think of it as like, I think Brave is probably the closest analogy.


00:21:35.120 --> 00:21:40.480
It's like Brave for Safari without the crypto, but it's, you know, got built in ad blocking


00:21:40.480 --> 00:21:43.920
that's got built-in tracker block blocking and all that.


00:21:43.920 --> 00:21:48.160
One of the big drawbacks of Safari is you don't get access


00:21:48.160 --> 00:21:52.360
to the Firefox or the Chrome extensions, right?


00:21:52.360 --> 00:21:54.000
You just get the Safari ones.


00:21:54.000 --> 00:21:58.240
But this one has compatibility both for Firefox


00:21:58.240 --> 00:22:00.840
and Chrome extensions in there.


00:22:00.840 --> 00:22:02.160
So isn't that cool?


00:22:02.160 --> 00:22:05.200
So you can run this privacy protecting


00:22:05.200 --> 00:22:09.320
anti-tracker Safari with Chrome extensions.


00:22:09.320 --> 00:22:11.840
So it's just out in beta, I believe.


00:22:11.840 --> 00:22:13.360
It's out in beta right now.


00:22:13.360 --> 00:22:16.700
So I'm not sure where it is or where it's going to go,


00:22:16.700 --> 00:22:18.920
but it's a pretty interesting take, isn't it?


00:22:18.920 --> 00:22:21.080
>> Yeah. It's certified snappy.


00:22:21.080 --> 00:22:22.840
>> Certified snappy.


00:22:22.840 --> 00:22:23.760
>> I like it.


00:22:23.760 --> 00:22:28.680
>> Indeed. I really like its privacy aspect.


00:22:28.680 --> 00:22:31.200
>> I think the privacy space,


00:22:31.200 --> 00:22:32.160
and you brought this up,


00:22:32.160 --> 00:22:36.500
the privacy space is there's convenience and there's speed,


00:22:36.500 --> 00:22:39.980
but I think that's a place where people can,


00:22:39.980 --> 00:22:42.880
we can open up the browser wars again.


00:22:42.880 --> 00:22:44.980
- Yes, for sure. - Because in a good way


00:22:44.980 --> 00:22:49.160
to try to limit some of the privacy concerns


00:22:49.160 --> 00:22:51.000
or minimize them.


00:22:51.000 --> 00:22:54.880
- Yeah, nobody at Mozilla asked me, but I'll give it.


00:22:54.880 --> 00:22:57.460
You know, Firefox is having trouble


00:22:57.460 --> 00:22:58.940
sort of keeping its market share.


00:22:58.940 --> 00:23:02.700
I think if it could triple down as the browser


00:23:02.700 --> 00:23:04.340
that you cannot be tracked with,


00:23:04.340 --> 00:23:07.640
the browser that will absolutely preserve your privacy


00:23:07.640 --> 00:23:09.420
and then add services around that.


00:23:09.420 --> 00:23:10.700
I think that would be great.


00:23:10.700 --> 00:23:12.700
The big challenges, well, I guess, you know,


00:23:12.700 --> 00:23:16.220
they're 99, 90% funded by Google,


00:23:16.220 --> 00:23:18.340
an ad company who doesn't want that.


00:23:18.340 --> 00:23:20.840
So there's this, this interesting tension,


00:23:20.840 --> 00:23:22.300
but I think, you know, that's a path


00:23:22.300 --> 00:23:24.820
that I think Firefox should be taking as well, but.


00:23:24.820 --> 00:23:26.340
- I guess I forgot about that,


00:23:26.340 --> 00:23:31.140
that Google was so, such a big stake in Firefox.


00:23:31.140 --> 00:23:33.300
- Right, I think that limits their playbook.


00:23:33.300 --> 00:23:35.520
I think they can't do things like we're going to make it.


00:23:35.520 --> 00:23:40.140
So we're invisible if you use Firefox basically, because their biggest


00:23:40.140 --> 00:23:42.900
supporter would not totally love that.


00:23:42.900 --> 00:23:43.160
Would they?


00:23:43.160 --> 00:23:48.600
So anyway, this is a zero telemetry, a telemetry browser and whatnot.


00:23:48.600 --> 00:23:49.980
And you can go and download it.


00:23:49.980 --> 00:23:56.200
Apparently it works on, Apple Silicon and Intel, but obviously being a Safari


00:23:56.200 --> 00:23:58.600
wrapper, I believe it only works on.


00:23:58.600 --> 00:24:02.280
I, I think, Mac and iOS things.


00:24:02.420 --> 00:24:07.420
I think iOS, iPad and Mac OS, but if you're on those, it's a pretty interesting take.


00:24:07.420 --> 00:24:10.940
And just from the browser wars in general, I think it's pretty interesting to track.


00:24:10.940 --> 00:24:12.140
Yeah, definitely.


00:24:12.140 --> 00:24:12.780
It's cool.


00:24:12.780 --> 00:24:13.300
All right.


00:24:13.300 --> 00:24:15.340
One more quick extra and then off to you.


00:24:15.340 --> 00:24:23.460
So last year we all did the PSF plus JetBrains developer survey, which is supported by and


00:24:23.460 --> 00:24:26.820
analyzed by JetBrains, but is really a PSF survey.


00:24:27.100 --> 00:24:32.260
and we had 23,000 Python developers and enthusiasts participate.


00:24:32.260 --> 00:24:35.300
Well, the results are out, so people can go check those out.


00:24:35.300 --> 00:24:40.300
Now, I've got a whole lot more analysis that I'd like to do before I talk about it.


00:24:40.300 --> 00:24:44.300
But they're already out, so people can start looking on there,


00:24:44.300 --> 00:24:46.300
and I'll give you more details next week.


00:24:46.300 --> 00:24:49.300
Yeah, cool. We should definitely cover it next week. That'd be fun.


00:24:49.300 --> 00:24:51.300
Absolutely. All right, how about you?


00:24:51.300 --> 00:24:59.300
I've got a small thing. I'm not sure, really needed an entire section, but Ned Batchelder


00:24:59.300 --> 00:25:07.860
did what's in which Python. So it's a page that has basically everything from, what did he have,


00:25:07.860 --> 00:25:15.540
from 2.1 to 3.11, just a hand, not like everything that's in every version, but some of the big


00:25:15.540 --> 00:25:22.100
hitters that you might, you know, you might know. So like 310 has union types and structural


00:25:22.100 --> 00:25:28.260
pattern matching. And what, what do you get with 311? Well, we know it's faster, but do we get


00:25:28.260 --> 00:25:35.460
like how much, and it's 10 to 60% faster than 310. That's amazing. And then exactly.


00:25:35.460 --> 00:25:39.460
That's really amazing that after 30 years, they're like, oh, you know, this year we're


00:25:39.460 --> 00:25:43.300
going to make it 50% faster. Like that's, that's incredible. I'm glad that's happening.


00:25:43.300 --> 00:25:47.420
>> Yeah, and then the new module Tomlib is coming,


00:25:47.420 --> 00:25:51.220
which is interesting that we've got pyproject.toml,


00:25:51.220 --> 00:25:55.100
and it wasn't part of the standard library yet.


00:25:55.100 --> 00:25:57.340
But a whole bunch of things,


00:25:57.340 --> 00:25:59.300
like if you can't remember,


00:25:59.300 --> 00:26:02.700
if for some reason you forgot F strings came in,


00:26:02.700 --> 00:26:03.780
then what was it?


00:26:03.780 --> 00:26:05.500
3.6, apparently I forgot.


00:26:05.500 --> 00:26:07.860
They came in 3.6 because it's on the list,


00:26:07.860 --> 00:26:11.180
unless Ned got it wrong, which probably didn't.


00:26:11.180 --> 00:26:15.120
>> No, I think 3.6, I think that's the biggest mover for 3.6 there.


00:26:15.120 --> 00:26:19.060
>> Yeah. Data classes in 3.7.


00:26:19.060 --> 00:26:21.080
Yeah. Lots of cool stuff.


00:26:21.080 --> 00:26:23.840
>> Fantastic. Henry Schreiner out in the audience says it's


00:26:23.840 --> 00:26:28.120
the top features from each of the versions since 3.0.


00:26:28.120 --> 00:26:30.440
So not everything, not extensive,


00:26:30.440 --> 00:26:31.800
but the big hitters.


00:26:31.800 --> 00:26:34.520
>> Yeah. I wasn't going to say top because there's


00:26:34.520 --> 00:26:35.920
a lot of people that worked on a whole bunch of


00:26:35.920 --> 00:26:39.080
other stuff that are on the list and I appreciate them as well.


00:26:39.080 --> 00:26:43.960
>> Yeah, absolutely. Some of it's just setting the groundwork for the next amazing thing.


00:26:43.960 --> 00:26:47.800
>> Yeah. Well, let's wrap up the show with something funny.


00:26:47.800 --> 00:26:49.600
>> All right. Ready for a joke?


00:26:49.600 --> 00:26:52.560
All right. This is a joke by Jen Gentleman,


00:26:52.560 --> 00:26:55.720
but called to our attention by Luke Morley.


00:26:55.720 --> 00:26:58.560
Jen says, "A programmer had a problem.


00:26:58.560 --> 00:27:00.840
He thought, I know, I'll solve it with async.


00:27:00.840 --> 00:27:03.600
Has problems now, period, to he."


00:27:03.600 --> 00:27:06.480
Because of race conditions, of course.


00:27:06.480 --> 00:27:08.720
>> Yeah, I like it.


00:27:08.720 --> 00:27:10.720
>> I like it too. Quick and simple,


00:27:10.720 --> 00:27:14.600
but there's a lot of variations on that joke and they're all good.


00:27:14.600 --> 00:27:15.080
>> Yeah.


00:27:15.080 --> 00:27:16.200
>> Most of them are good, I guess.


00:27:16.200 --> 00:27:17.760
>> Anyway, well, thanks again,


00:27:17.760 --> 00:27:20.680
Michael, for joining me today and it's a great episode.


00:27:20.680 --> 00:27:22.760
>> Yeah, as always.

