
00:00:00.000 --> 00:00:04.720
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.720 --> 00:00:12.480
This is episode 262 recorded December 8th, 2021. Oh my gosh, it's almost winter. I'm Michael Kennedy.


00:00:12.480 --> 00:00:13.760
And I'm Brian Okken.


00:00:13.760 --> 00:00:14.640
And I'm Leah Cole.


00:00:14.640 --> 00:00:15.700
Yay.


00:00:15.700 --> 00:00:19.360
Yay. So great to have you here. Thanks for being here on the show.


00:00:19.360 --> 00:00:20.880
Yeah. Happy to be here.


00:00:20.880 --> 00:00:26.880
You and I got a chance to discuss Airflow over on Talk Python a couple months ago, something like that.


00:00:26.880 --> 00:00:27.680
Yeah.


00:00:27.680 --> 00:00:30.920
- Yeah, but now we'll probably do a little more Airflow


00:00:30.920 --> 00:00:32.440
over here for people who are unfamiliar with that,


00:00:32.440 --> 00:00:34.340
but also just whatever you're interested in.


00:00:34.340 --> 00:00:36.060
So great to have you here.


00:00:36.060 --> 00:00:38.180
Why don't you tell people a quick bit about yourself


00:00:38.180 --> 00:00:39.480
before we jump into the topics?


00:00:39.480 --> 00:00:40.960
- Sure, so I'm Leah,


00:00:40.960 --> 00:00:45.680
and I am a developer relations engineer in Google Cloud.


00:00:45.680 --> 00:00:49.660
And specifically, I work on Cloud Composer,


00:00:49.660 --> 00:00:52.520
which is our hosted managed product


00:00:52.520 --> 00:00:55.320
of the popular Apache Airflow project,


00:00:55.320 --> 00:00:57.400
which we'll talk about a little bit later.


00:00:57.400 --> 00:01:00.400
And in addition to writing samples and content for that,


00:01:00.400 --> 00:01:03.520
I also work with a group of fellow engineers


00:01:03.520 --> 00:01:07.920
and we maintain all Python samples for Google Cloud


00:01:07.920 --> 00:01:10.920
and make sure that they stay tested, up to date,


00:01:10.920 --> 00:01:14.200
and are healthy and are getting reviewed for new samples.


00:01:14.200 --> 00:01:15.160
And that's a lot of fun.


00:01:15.160 --> 00:01:17.920
That kind of fell into my lap and has been a good time.


00:01:17.920 --> 00:01:18.760
- That's fantastic.


00:01:18.760 --> 00:01:21.200
I remember Python being one of the original


00:01:21.200 --> 00:01:23.800
two supported languages on Google Cloud, right?


00:01:23.800 --> 00:01:25.200
It had sort of a special place.


00:01:25.200 --> 00:01:28.260
- Yeah, now it's one of seven, I think.


00:01:28.260 --> 00:01:29.100
- Yeah, cool.


00:01:29.100 --> 00:01:30.320
Well, that sounds like such a fun job.


00:01:30.320 --> 00:01:33.200
I've always imagined dev relations type of jobs


00:01:33.200 --> 00:01:36.000
to be super fun, maybe slightly less fun in COVID


00:01:36.000 --> 00:01:37.880
'cause the travel and the conferences


00:01:37.880 --> 00:01:40.440
and all those kinds of things are a part of it,


00:01:40.440 --> 00:01:41.840
but still a fun job, right?


00:01:41.840 --> 00:01:42.840
- Still a good time.


00:01:42.840 --> 00:01:44.120
Every day is a little bit different.


00:01:44.120 --> 00:01:45.760
You kind of never know what's gonna happen


00:01:45.760 --> 00:01:47.760
and that's part of what I like about it.


00:01:47.760 --> 00:01:48.800
- Yeah, awesome.


00:01:48.800 --> 00:01:49.800
Oh, cool.


00:01:49.800 --> 00:01:51.120
Brian, I don't even know what you're gonna cover,


00:01:51.120 --> 00:01:52.040
so I don't know what's gonna happen.


00:01:52.040 --> 00:01:53.360
Why don't you let us know?


00:01:53.360 --> 00:01:55.000
- You don't know what I'm gonna cover?


00:01:55.000 --> 00:01:56.640
- I, well, I'm not looking at my docs yet.


00:01:56.640 --> 00:01:57.480
- Oh, okay.


00:01:57.480 --> 00:01:59.240
(laughing)


00:01:59.240 --> 00:02:01.200
Sorry, fighting a cold.


00:02:01.200 --> 00:02:02.440
I am super excited,


00:02:02.440 --> 00:02:05.720
PyTest 7, release candidate one, is out.


00:02:05.720 --> 00:02:06.880
So--


00:02:06.880 --> 00:02:07.720
- Oh, that's excellent.


00:02:07.720 --> 00:02:08.540
That's big news.


00:02:08.540 --> 00:02:09.380
- It is.


00:02:09.380 --> 00:02:12.360
The last release for PyTest was, or six,


00:02:12.360 --> 00:02:14.240
they've done other dot releases,


00:02:14.240 --> 00:02:17.080
but the six two, or six zero came out,


00:02:17.080 --> 00:02:19.400
or six two, I don't know, I lost track.


00:02:19.400 --> 00:02:22.680
- We use six two four for our GCP samples, so.


00:02:22.680 --> 00:02:23.520
- Oh, you do?


00:02:23.520 --> 00:02:24.360
- We do.


00:02:24.360 --> 00:02:27.440
- So the, this, I think it was, I wrote this down.


00:02:27.440 --> 00:02:30.520
The 6.2.0 was released on December, 2020.


00:02:30.520 --> 00:02:33.280
So it's been, we're ready for a new one.


00:02:33.280 --> 00:02:36.680
So 7.0 is out, the release candidate at least.


00:02:36.680 --> 00:02:40.040
And so, because it's a release candidate to install it,


00:02:40.040 --> 00:02:43.080
you have to do a pip install pytest,


00:02:43.080 --> 00:02:46.400
double equal 7.0.0 rc1.


00:02:46.400 --> 00:02:48.040
We've got that in the show notes.


00:02:48.040 --> 00:02:53.040
It's also on the release announcement page for pytest.


00:02:53.200 --> 00:02:56.720
but I wanted to go through some of the cool features


00:02:56.720 --> 00:02:57.760
that I'm really excited about.


00:02:57.760 --> 00:02:59.720
There's a lot of great things in there.


00:02:59.720 --> 00:03:05.500
There's some little improvements with the approx thing.


00:03:05.500 --> 00:03:08.080
So one of the things that PyTest has is an approx.


00:03:08.080 --> 00:03:09.880
So you can say floating point numbers,


00:03:09.880 --> 00:03:12.580
if you're comparing them, you should never do equal,


00:03:12.580 --> 00:03:14.840
but you can do equal approx with PyTest


00:03:14.840 --> 00:03:16.440
and it's really pretty cool.


00:03:16.440 --> 00:03:17.400
- That's cool, I didn't know that


00:03:17.400 --> 00:03:20.560
because any science you're doing is so,


00:03:20.560 --> 00:03:22.560
like double equals is the kiss of death


00:03:22.560 --> 00:03:24.640
for floating point math comparison.


00:03:24.640 --> 00:03:27.960
- Yeah, well, the PyTest of Procs


00:03:27.960 --> 00:03:32.960
does now the docs reference the NumPy comparisons,


00:03:32.960 --> 00:03:34.360
which is nice because NumPy


00:03:34.360 --> 00:03:36.600
has some really cool features around that.


00:03:36.600 --> 00:03:38.560
But PyTest out of the box does.


00:03:38.560 --> 00:03:43.560
And now also with mappings and dicts and other sets,


00:03:43.560 --> 00:03:47.880
it handles decimal types, which is nice.


00:03:47.880 --> 00:03:49.720
Decimal types, of course, are very useful


00:03:49.720 --> 00:03:52.360
when working with money and other things


00:03:52.360 --> 00:03:54.500
that need to be exact decimals.


00:03:54.500 --> 00:03:56.120
One of the things that's really cool


00:03:56.120 --> 00:03:59.420
is the sequences are compared better.


00:03:59.420 --> 00:04:01.960
So if you have like a list of numbers


00:04:01.960 --> 00:04:04.720
and you compare against an approximate list


00:04:04.720 --> 00:04:07.480
of another numbers, I didn't know you could do this,


00:04:07.480 --> 00:04:11.600
it will tell you which index was wrong


00:04:11.600 --> 00:04:13.200
and by how much. - Oh, nice.


00:04:13.200 --> 00:04:14.640
- And actually not by how much,


00:04:14.640 --> 00:04:17.880
but what the expected was, and that's pretty neat.


00:04:17.880 --> 00:04:20.080
So those are the little minor features.


00:04:20.080 --> 00:04:21.860
Most of these are kind of minor,


00:04:21.860 --> 00:04:24.520
but it made your first somebody, right?


00:04:24.520 --> 00:04:26.820
So one of the things I like is


00:04:26.820 --> 00:04:28.620
some people have mentioned fixtures


00:04:28.620 --> 00:04:30.560
or sometimes when people use a lot of fixtures,


00:04:30.560 --> 00:04:32.000
they don't know where the fixtures are.


00:04:32.000 --> 00:04:33.160
Well, there's a couple of flags,


00:04:33.160 --> 00:04:35.940
fixtures per test and dash dash fixtures.


00:04:35.940 --> 00:04:38.680
There's, both those flags are helpful to find out


00:04:38.680 --> 00:04:40.960
what fixtures you have available.


00:04:40.960 --> 00:04:44.880
And now by default, they print the location of the path


00:04:44.880 --> 00:04:47.180
in with the fixture name.


00:04:47.180 --> 00:04:48.880
And you can also do a verbose option


00:04:48.880 --> 00:04:50.480
that prints out the full doc string,


00:04:50.480 --> 00:04:52.960
which is pretty handy.


00:04:52.960 --> 00:04:55.520
The couple of things that I'm really excited about


00:04:55.520 --> 00:04:58.120
are Python path that's been added.


00:04:58.120 --> 00:05:00.600
And that was a feature I added to the project,


00:05:00.600 --> 00:05:01.920
which is fun.


00:05:01.920 --> 00:05:02.760
- Nice.


00:05:02.760 --> 00:05:04.260
It's cool to see the contributions you're making


00:05:04.260 --> 00:05:05.280
coming back out.


00:05:05.280 --> 00:05:06.120
- Yeah, it's cool.


00:05:06.120 --> 00:05:08.280
And then there's a bunch of other features


00:05:08.280 --> 00:05:10.640
that I contributed to by just saying,


00:05:10.640 --> 00:05:11.720
"This is a little weird.


00:05:11.720 --> 00:05:12.560
"Can we fix this?"


00:05:12.560 --> 00:05:14.160
And somebody else volunteered to fix it.


00:05:14.160 --> 00:05:15.680
So it's nice.


00:05:15.680 --> 00:05:17.360
- That's the best kind of contribution.


00:05:17.360 --> 00:05:18.520
(laughing)


00:05:18.520 --> 00:05:19.720
- Yeah.


00:05:19.720 --> 00:05:21.780
One of the improvements in the docs,


00:05:21.780 --> 00:05:26.260
which is kind of fun, is there's an auto-generated list of,


00:05:26.260 --> 00:05:28.900
so I've got the changelog going on here.


00:05:28.900 --> 00:05:30.900
And I gotta come back to this.


00:05:30.900 --> 00:05:32.900
There's an auto-generated list of plugins


00:05:32.900 --> 00:05:35.220
and there's 963 right now.


00:05:35.220 --> 00:05:36.060
We'll refresh it.


00:05:36.060 --> 00:05:37.580
Nope, still 963.


00:05:37.580 --> 00:05:38.420
But that's a lot.


00:05:38.420 --> 00:05:42.660
When I first started writing the beta


00:05:42.660 --> 00:05:45.700
or the second edition of the PyTest book,


00:05:45.700 --> 00:05:47.860
I noticed this and I wrote it down,


00:05:47.860 --> 00:05:49.020
but the number keeps changing.


00:05:49.020 --> 00:05:50.060
So I took out the number.


00:05:50.060 --> 00:05:52.000
I'm like, it's a lot.


00:05:52.000 --> 00:05:54.180
There's a lot of cool plugins.


00:05:54.180 --> 00:05:55.980
One of the things that if you'll notice


00:05:55.980 --> 00:05:57.420
when you go to the change log,


00:05:57.420 --> 00:06:01.280
it starts with breaking changes and then deprecations.


00:06:01.280 --> 00:06:03.280
And I know, I think this is around


00:06:03.280 --> 00:06:04.580
because people, when they upgrade,


00:06:04.580 --> 00:06:06.580
they wanna know if it's gonna break their code or not.


00:06:06.580 --> 00:06:09.700
I have tested a bunch of stuff and upgraded from six to seven


00:06:09.700 --> 00:06:11.680
and I haven't noticed a lot.


00:06:11.680 --> 00:06:15.700
There was like a six one to six two.


00:06:15.700 --> 00:06:17.180
I can't remember what the,


00:06:17.180 --> 00:06:20.020
There was one break a while ago in the 6X


00:06:20.020 --> 00:06:22.700
that messed some plugin authors,


00:06:22.700 --> 00:06:23.900
but I haven't noticed any problems.


00:06:23.900 --> 00:06:25.380
So please try these out.


00:06:25.380 --> 00:06:27.220
I wish they would do the features first


00:06:27.220 --> 00:06:29.500
and then not the breaking changes,


00:06:29.500 --> 00:06:31.580
'cause that's-- - I suspect it's the


00:06:31.580 --> 00:06:33.340
people working deep in the guts,


00:06:33.340 --> 00:06:36.220
like the plugin authors, that hit these deprecations


00:06:36.220 --> 00:06:38.860
and not just people doing assert this equals that


00:06:38.860 --> 00:06:41.180
type of work. - Yeah, yep, right.


00:06:41.180 --> 00:06:43.020
One of the things that I didn't list,


00:06:43.020 --> 00:06:45.120
but I think a lot of people are excited about,


00:06:45.120 --> 00:06:47.400
There's more, the objects within PyTest


00:06:47.400 --> 00:06:51.280
that people are using, more of them are type hinted now


00:06:51.280 --> 00:06:54.000
so that you can do type hints with objects.


00:06:54.000 --> 00:06:54.840
- Oh, that's nice.


00:06:54.840 --> 00:06:56.520
- Yeah. - Yeah, that's really nice.


00:06:56.520 --> 00:06:57.560
- So, fun.


00:06:57.560 --> 00:06:59.420
- Leah, do you use PyTest?


00:06:59.420 --> 00:07:00.680
Some of these changes exciting?


00:07:00.680 --> 00:07:04.140
- We do, we use PyTest on our Python samples.


00:07:04.140 --> 00:07:06.880
And so I, actually the one that was most exciting to me


00:07:06.880 --> 00:07:09.320
was the fixtures, figuring out where fixtures are


00:07:09.320 --> 00:07:13.720
is definitely something that comes into play for me,


00:07:13.720 --> 00:07:15.360
especially when we're maintaining something


00:07:15.360 --> 00:07:17.000
that was written a while ago by someone


00:07:17.000 --> 00:07:20.000
who might not be working on that code anymore.


00:07:20.000 --> 00:07:21.240
- Yeah. - Yeah.


00:07:21.240 --> 00:07:22.080
- Nice. - Yeah.


00:07:22.080 --> 00:07:22.920
- That's cool. - This is great.


00:07:22.920 --> 00:07:25.840
I love the pip installable RC1, that's great.


00:07:25.840 --> 00:07:28.280
And before we move on, let's take a step back.


00:07:28.280 --> 00:07:29.560
Roman Wright, author of Beanie.


00:07:29.560 --> 00:07:30.800
Hey, Roman, out there in the audience says,


00:07:30.800 --> 00:07:32.760
"Hey, I'm a big fan of Google Cloud."


00:07:32.760 --> 00:07:34.640
- Oh, thank you. - For sure.


00:07:34.640 --> 00:07:37.800
Well, I've got some fun stuff to talk about next here.


00:07:37.800 --> 00:07:40.600
I want to talk about this thing that David Smith,


00:07:40.600 --> 00:07:45.600
former guest co-host here on Python Bytes sent over and said,


00:07:45.600 --> 00:07:46.440
"This looks cool."


00:07:46.440 --> 00:07:50.520
Sam Lowe and Philip Guell released this thing


00:07:50.520 --> 00:07:52.400
called Pandas Tutor.


00:07:52.400 --> 00:07:53.240
- This is cool.


00:07:53.240 --> 00:07:56.600
- Yeah, previously, Philip had built Python Tutor


00:07:56.600 --> 00:07:58.140
at pythontutor.com.


00:07:58.140 --> 00:08:00.680
Now there's pandastutor.com.


00:08:00.680 --> 00:08:04.200
And it's all about just helping you understand


00:08:04.200 --> 00:08:05.940
what the code does.


00:08:05.940 --> 00:08:09.460
So it basically says, look, there's this code here.


00:08:09.460 --> 00:08:11.260
Like imagine you've got a list of dogs


00:08:11.260 --> 00:08:13.260
that have a breed, a type, a longevity,


00:08:13.260 --> 00:08:16.060
a type is like a herding dog or a toy dog,


00:08:16.060 --> 00:08:17.460
it goes in a purse.


00:08:17.460 --> 00:08:19.620
Longevity, size, weight, and so on.


00:08:19.620 --> 00:08:21.020
And you've got that as a data frame.


00:08:21.020 --> 00:08:25.780
If you wrote dogs with a size equal equal medium,


00:08:25.780 --> 00:08:28.220
then sort values on type, then group by by type,


00:08:28.220 --> 00:08:29.500
and then show the median,


00:08:29.500 --> 00:08:30.900
well, what is that actually doing?


00:08:30.900 --> 00:08:32.560
Like, how do I understand that, right?


00:08:32.560 --> 00:08:34.660
As somebody learning pandas,


00:08:34.660 --> 00:08:36.820
imagine I don't really have a database background,


00:08:36.820 --> 00:08:39.180
and so I'm not sort of trying to map that over


00:08:39.180 --> 00:08:40.580
to like, okay, there's the where clause,


00:08:40.580 --> 00:08:41.620
there's the order by clause,


00:08:41.620 --> 00:08:43.420
and you know, like that kind of business, right?


00:08:43.420 --> 00:08:46.660
So what is happening when I write that code,


00:08:46.660 --> 00:08:49.620
either because I'm coming across it for the first time,


00:08:49.620 --> 00:08:51.820
or, which happens to me a lot,


00:08:51.820 --> 00:08:54.140
I wrote it two years ago and understood it perfectly then.


00:08:54.140 --> 00:08:55.660
I have no idea what it does now, right?


00:08:55.660 --> 00:08:56.940
You wanna know what it does. - Oh, same.


00:08:56.940 --> 00:08:59.300
- Yeah, that happens way too often, right?


00:08:59.300 --> 00:09:02.740
So what you do is you can go and run this code


00:09:02.740 --> 00:09:06.220
over in Pandas Tutor, and you say visualize,


00:09:06.220 --> 00:09:08.220
and it says running a code, please wait.


00:09:08.220 --> 00:09:10.980
And so what they do is they put a CSV bit of text in here,


00:09:10.980 --> 00:09:12.180
it's like a triple string,


00:09:12.180 --> 00:09:14.660
and then use pandas read and then just do that one line.


00:09:14.660 --> 00:09:16.660
So that's a nice way to kind of get data in there.


00:09:16.660 --> 00:09:19.060
And the way to think about this is steps.


00:09:19.060 --> 00:09:20.340
It shows you what is the first step


00:09:20.340 --> 00:09:21.980
and what is the second step and so on.


00:09:21.980 --> 00:09:23.460
So when you go there,


00:09:23.460 --> 00:09:26.400
you'll see that it has the code that we were talking about,


00:09:26.400 --> 00:09:28.900
but then right now the effective where clause,


00:09:28.900 --> 00:09:32.260
the filter is regular font and the rest is gray.


00:09:32.260 --> 00:09:33.860
It's like fade into the background.


00:09:33.860 --> 00:09:37.760
And so you can actually see what the starting data frame was


00:09:37.760 --> 00:09:40.320
and the ending data frame, and then how it got in there.


00:09:40.320 --> 00:09:42.540
And you can use the mouse over like,


00:09:42.540 --> 00:09:44.160
so what they're saying is the type is medium.


00:09:44.160 --> 00:09:46.760
So if you hover over like a large or a small dog,


00:09:46.760 --> 00:09:47.760
there's just no arrow.


00:09:47.760 --> 00:09:48.920
But if you hover over medium,


00:09:48.920 --> 00:09:52.920
it shows you where in the result that that thing landed.


00:09:52.920 --> 00:09:53.760
Isn't that cool?


00:09:53.760 --> 00:09:55.080
- That's wild.


00:09:55.080 --> 00:09:55.920
- Isn't that wild?


00:09:55.920 --> 00:09:58.960
And so then you can see size has all the values on the left


00:09:58.960 --> 00:10:00.640
and then the size is grouped on the right


00:10:00.640 --> 00:10:02.120
and it shows medium, medium, medium, medium,


00:10:02.120 --> 00:10:03.640
because that's all that's in there.


00:10:03.640 --> 00:10:05.280
Now, when I first looked at this, I'm like,


00:10:05.280 --> 00:10:07.480
there's a bunch of stuff on the screen, what's going on?


00:10:07.480 --> 00:10:12.120
I noticed the arrows, but then what it took me a minute to realize is there's multiple steps.


00:10:12.120 --> 00:10:15.520
So the next thing if you scroll down, shows the same code at the top,


00:10:15.520 --> 00:10:18.580
but now the sort values type is highlighted.


00:10:18.580 --> 00:10:21.780
That's the next part of what looks like one expression in Pandas.


00:10:21.780 --> 00:10:24.920
And so now it highlights the column that it's sorting on,


00:10:24.920 --> 00:10:29.320
and you can actually see the arrows pointing to how they were reordered in the result,


00:10:29.320 --> 00:10:33.120
because you're sorting by type, so it's non-sporting, non-sporting, non-sporting, non-sporting,


00:10:33.120 --> 00:10:35.720
and then sporting, sporting, and working, working, and so on.


00:10:35.720 --> 00:10:37.080
So that was step two.


00:10:37.080 --> 00:10:39.680
And we have a group by this one's interesting.


00:10:39.680 --> 00:10:41.480
It said have arrows as colors.


00:10:41.480 --> 00:10:45.360
So the group by type again, non-sporting, sporting, so on.


00:10:45.360 --> 00:10:48.000
You end up with these groups, like here's a blue,


00:10:48.000 --> 00:10:49.880
a blue box of all the non-sporting dogs,


00:10:49.880 --> 00:10:53.880
the bulldog, the poodle, the French bulldog is so cute.


00:10:53.880 --> 00:10:55.040
Then you've got the golden retriever


00:10:55.040 --> 00:10:56.120
and the Labrador and the boxer, right?


00:10:56.120 --> 00:10:58.400
So these are grouped into the colors.


00:10:58.400 --> 00:10:59.880
And then finally you do the median


00:10:59.880 --> 00:11:03.720
and it shows how those groups reduce down to statistics,


00:11:03.720 --> 00:11:07.400
Like the longevity of a non-sporting dog is less than a sporting dog, apparently,


00:11:07.400 --> 00:11:08.600
but they're also lighter.


00:11:08.600 --> 00:11:10.360
So anyway, what do you all think?


00:11:10.360 --> 00:11:11.560
Oh my gosh.


00:11:11.560 --> 00:11:12.480
I love this.


00:11:12.480 --> 00:11:13.600
This is nice, right?


00:11:13.600 --> 00:11:17.320
I'm a very visual learner, so I really appreciate this.


00:11:17.320 --> 00:11:21.360
And especially if you're working with data that you kind of aren't sure what it


00:11:21.360 --> 00:11:24.600
does and or the code, like that's pretty incredible.


00:11:24.600 --> 00:11:25.680
I'm filing this away.


00:11:25.680 --> 00:11:28.400
It's going to go to my team's group chat pretty much as soon as we're done


00:11:28.400 --> 00:11:28.920
recording.


00:11:28.920 --> 00:11:30.720
In fact, yeah, that's awesome.


00:11:30.720 --> 00:11:32.200
I think it's really good.


00:11:32.200 --> 00:11:34.760
There's so many people who are presented a notebook


00:11:34.760 --> 00:11:36.480
or presented some kind of result,


00:11:36.480 --> 00:11:38.360
and they're like, I need to understand what that means


00:11:38.360 --> 00:11:39.880
so I can keep following it.


00:11:39.880 --> 00:11:41.240
And I think, throw it into here,


00:11:41.240 --> 00:11:43.080
something like this would be really helpful.


00:11:43.080 --> 00:11:45.200
- Well, and a lot of people that have spent a lot of time


00:11:45.200 --> 00:11:49.320
with databases, it might be obvious what these things do.


00:11:49.320 --> 00:11:53.200
But for people that don't spend a lot of time with SQL,


00:11:53.200 --> 00:11:54.560
it's not obvious.


00:11:54.560 --> 00:11:57.120
And so this is really nice.


00:11:57.120 --> 00:11:58.040
- Yeah, definitely.


00:11:58.040 --> 00:12:00.080
Or if you're like trying to take some example


00:12:00.080 --> 00:12:02.200
that you have with their example data


00:12:02.200 --> 00:12:04.720
and trying to translate it to your own data.


00:12:04.720 --> 00:12:08.000
That's something that customers do all the time for us.


00:12:08.000 --> 00:12:10.120
It's something I do a lot too.


00:12:10.120 --> 00:12:12.680
Just seeing how it behaves with your stuff.


00:12:12.680 --> 00:12:13.760
Oh man.


00:12:13.760 --> 00:12:15.440
- You didn't write it, but you wanna use it.


00:12:15.440 --> 00:12:16.400
So how much applies.


00:12:16.400 --> 00:12:17.640
- Exactly.


00:12:17.640 --> 00:12:20.000
- Yeah, so this is quite cool.


00:12:20.000 --> 00:12:21.440
Dean out in the live stream.


00:12:21.440 --> 00:12:25.220
Hey Dean, says Panda's tutor looks awesome.


00:12:25.220 --> 00:12:27.880
And Robert Robertson also loving it.


00:12:27.880 --> 00:12:28.720
It's nice.


00:12:28.720 --> 00:12:29.560
So very cool.


00:12:29.560 --> 00:12:31.560
Indeed. All right. Over to you, Leah.


00:12:31.560 --> 00:12:35.160
All right. So yeah, my first thing today is Apache Airflow.


00:12:35.160 --> 00:12:39.660
So Airflow is a project that is part of the Apache Software Foundation.


00:12:39.660 --> 00:12:43.660
It's a workflow orchestration tool that originated at Airbnb,


00:12:43.660 --> 00:12:46.160
I want to say in like 2014,


00:12:46.160 --> 00:12:50.560
and then pretty shortly after became part of the ASF


00:12:50.560 --> 00:12:53.960
and it became a top level Apache project


00:12:53.960 --> 00:12:56.060
in, I want to say early 2019.


00:12:56.060 --> 00:12:58.960
It's been a little while now, which is very exciting.


00:12:58.960 --> 00:13:01.720
So you can use it to author these workflows


00:13:01.720 --> 00:13:05.600
as directed acyclic graphs or DAGs of tasks,


00:13:05.600 --> 00:13:06.800
which is pretty cool.


00:13:06.800 --> 00:13:09.240
And it's most commonly used with workflows


00:13:09.240 --> 00:13:11.280
that are like pretty static,


00:13:11.280 --> 00:13:14.500
not super frequently changing or slowly changing,


00:13:14.500 --> 00:13:17.920
just so that you can see how the workflow goes over time


00:13:17.920 --> 00:13:20.520
and not allows you for some clarity


00:13:20.520 --> 00:13:22.760
and continuity in your workflows.


00:13:22.760 --> 00:13:24.080
- I've always sort of wondered


00:13:24.080 --> 00:13:27.800
what the role of these workflow type systems were


00:13:27.800 --> 00:13:30.960
And until I realized, you know, if you're going to build a full end to end


00:13:30.960 --> 00:13:34.240
type of workflow without a framework, there's a lot of coordination.


00:13:34.240 --> 00:13:35.160
And what if this fails?


00:13:35.160 --> 00:13:36.280
Where do you restart?


00:13:36.280 --> 00:13:36.760
What do you do?


00:13:36.760 --> 00:13:41.680
And then the analogy for me is kind of like flask or some web, like all I got


00:13:41.680 --> 00:13:44.460
to do is write this little thing and everything else will come together to


00:13:44.460 --> 00:13:48.140
make sure these four lines of my Python code run, they run reliably.


00:13:48.140 --> 00:13:50.200
If they fail, it gets dealt with, right.


00:13:50.200 --> 00:13:53.800
It allows people to not have to understand the whole system and just go, I need you


00:13:53.800 --> 00:13:56.320
to load up this file and put it into that database.


00:13:56.320 --> 00:13:57.380
Can you write that code?


00:13:57.380 --> 00:14:00.300
And that's all you got to know to be part of some complex thing, right?


00:14:00.300 --> 00:14:06.460
Yeah, it's, I mean, it's not the most glamorous thing, but it is extremely useful.


00:14:06.460 --> 00:14:15.100
I mean, I did a summer internship when I was doing my bachelor's, where I wrote a cron job that ingested some data every night.


00:14:15.100 --> 00:14:22.260
And the only way I knew if it failed was if I looked in the target folder where it's supposed to end up and if the data wasn't there.


00:14:22.260 --> 00:14:24.260
No files, whoops.


00:14:24.260 --> 00:14:27.360
That sucked. I'm sure a lot of people have dealt with that.


00:14:27.360 --> 00:14:30.660
And this is actually a really common Airflow workflow,


00:14:30.660 --> 00:14:35.060
which is the extract, transform, and load, the ETL workflow,


00:14:35.060 --> 00:14:38.000
which is where you have data somewhere that you want to get,


00:14:38.000 --> 00:14:40.540
you want to do something to it, or maybe not,


00:14:40.540 --> 00:14:42.140
maybe you just want to extract and load it,


00:14:42.140 --> 00:14:44.640
and you want to put that result somewhere else,


00:14:44.640 --> 00:14:48.180
either locally or in the cloud for all of that.


00:14:48.180 --> 00:14:50.220
And Airflow lets you do all of that.


00:14:50.220 --> 00:14:52.980
And you can see the history of these jobs.


00:14:52.980 --> 00:14:55.940
There's a UI where you can see, did it fail?


00:14:55.940 --> 00:14:58.220
It has a full error message if it failed.


00:14:58.220 --> 00:15:00.620
It's not just, oh gosh, the data is not there.


00:15:00.620 --> 00:15:01.380
What do I do?


00:15:01.380 --> 00:15:03.500
>> Yeah. You got a really cool UI where it shows


00:15:03.500 --> 00:15:05.700
all the parts of the workflow running and


00:15:05.700 --> 00:15:08.020
whether or not they finished successfully and stuff, right?


00:15:08.020 --> 00:15:10.860
>> Yeah. It got a makeover fairly recently.


00:15:10.860 --> 00:15:13.180
So it's a lot of improvements.


00:15:13.180 --> 00:15:15.380
>> Yeah, that's super cool. Another thing maybe you


00:15:15.380 --> 00:15:18.220
could talk about really quick is the connectors.


00:15:18.220 --> 00:15:20.100
I don't remember exactly the right terminology.


00:15:20.100 --> 00:15:21.940
There's a name for them.


00:15:21.940 --> 00:15:24.260
tell us, tell people about that. That's also good to know.


00:15:24.260 --> 00:15:26.260
So these connectors that you're thinking of,


00:15:26.260 --> 00:15:28.900
I mean, we can use the word connector to describe what it does.


00:15:28.900 --> 00:15:31.740
So there are these things called operators in Airflow,


00:15:31.740 --> 00:15:34.740
and an operator executes a single task.


00:15:34.740 --> 00:15:37.240
And so that might be executing a Bash script


00:15:37.240 --> 00:15:39.580
or executing a Python script.


00:15:39.580 --> 00:15:43.700
But we also have these connectors that are grouped by providers,


00:15:43.700 --> 00:15:46.900
which might be your cloud provider or other software


00:15:46.900 --> 00:15:49.980
providers that allow you to execute code there.


00:15:49.980 --> 00:15:53.820
So for example, we have a ton of GCP operators.


00:15:53.820 --> 00:15:58.380
One example might allow you to create a Dataproc cluster


00:15:58.380 --> 00:16:01.020
or then like run a job on that Dataproc cluster


00:16:01.020 --> 00:16:03.180
and maybe tear it down when you're done.


00:16:03.180 --> 00:16:06.900
And there are providers that have operators


00:16:06.900 --> 00:16:10.100
for all the major clouds and more.


00:16:10.100 --> 00:16:13.380
You can do, there's one that like sends a Slack message when it's done.


00:16:13.380 --> 00:16:15.780
So it's, if you can dream it,


00:16:15.780 --> 00:16:19.140
it might be there and if not, you can make it there.


00:16:19.140 --> 00:16:21.460
That's awesome. What's GCP?


00:16:21.460 --> 00:16:23.620
GCP is Google Cloud Platform.


00:16:23.620 --> 00:16:24.820
Or Google Cloud.


00:16:24.820 --> 00:16:27.620
GCP might be a dated acronym. Sorry.


00:16:27.620 --> 00:16:28.900
Don't know.


00:16:28.900 --> 00:16:29.620
Yeah.


00:16:29.620 --> 00:16:32.660
Yeah. So one of the advantages I think of that,


00:16:32.660 --> 00:16:35.420
that's really cool is you don't necessarily have to know all those APIs.


00:16:35.420 --> 00:16:38.420
Like if I was going to connect Slack to GCP,


00:16:38.420 --> 00:16:40.020
to like Azure Blob Storage,


00:16:40.020 --> 00:16:41.820
to like some hosted database,


00:16:41.820 --> 00:16:43.380
I don't have to learn all those things.


00:16:43.380 --> 00:16:44.780
I can just sort of click it together.


00:16:44.780 --> 00:16:46.300
Yeah. You just have to,


00:16:46.300 --> 00:16:48.740
there's a small amount of setup you have to do


00:16:48.740 --> 00:16:53.380
for auth, which is understandable. You can't just like publicly go to your Azure blob thing


00:16:53.380 --> 00:16:58.780
to grab your data. But once you set up that connection, then your operators can talk to


00:16:58.780 --> 00:17:03.780
those things. And if you use so you can run or host Airflow yourself. And there are a


00:17:03.780 --> 00:17:11.140
few different ways to do that. And then Amazon and Google both have managed hosted providers.


00:17:11.140 --> 00:17:15.500
And there's a company Astronomer that also does manage hosted ones. And so if you're


00:17:15.500 --> 00:17:21.500
in an Amazon or a Google, the advantage there is that the connections with those operators


00:17:21.500 --> 00:17:25.980
might be a little bit simpler from the auth and networking perspective. But other than that,


00:17:25.980 --> 00:17:32.460
if you're running in Cloud Composer, which is Google's Airflow, you can still be using the


00:17:32.460 --> 00:17:38.460
Amazon or the Microsoft operators to pull data from over there. That's really common. And you


00:17:38.460 --> 00:17:42.540
see it all the time and bring it, do some stuff in Google Cloud and either put it back in the


00:17:42.540 --> 00:17:44.820
in the other cloud or leave it in Google Cloud.


00:17:44.820 --> 00:17:47.860
That's totally normal and people are doing that all the time.


00:17:47.860 --> 00:17:48.980
- Right on. - Yeah.


00:17:48.980 --> 00:17:49.860
- Cool, cool.


00:17:49.860 --> 00:17:52.700
I think this is neat and people for whom that would


00:17:52.700 --> 00:17:54.500
make sense, you're like trying to do these


00:17:54.500 --> 00:17:56.100
sort of running in the background,


00:17:56.100 --> 00:17:57.060
- Yeah. - schedule jobs,


00:17:57.060 --> 00:17:58.140
or there's triggers as well.


00:17:58.140 --> 00:18:00.420
Like a file has been uploaded or landed here.


00:18:00.420 --> 00:18:02.180
- Yeah, let's talk about that.


00:18:02.180 --> 00:18:04.780
So that's actually, I had written down this one example,


00:18:04.780 --> 00:18:07.580
but I'll adapt it slightly since you mentioned triggers.


00:18:07.580 --> 00:18:09.840
So that's another common type of operator,


00:18:09.840 --> 00:18:12.420
these sensors where you wait for a certain condition


00:18:12.420 --> 00:18:15.700
to be true, and they're used in data analytics workflows


00:18:15.700 --> 00:18:16.540
all the time.


00:18:16.540 --> 00:18:19.540
So one example workflow might be waiting


00:18:19.540 --> 00:18:23.620
for a particular file to appear in a cloud storage or an S3


00:18:23.620 --> 00:18:24.860
bucket.


00:18:24.860 --> 00:18:26.580
So you'd use one of those sensors


00:18:26.580 --> 00:18:28.140
to wait for that to happen.


00:18:28.140 --> 00:18:30.460
And then you want to do something to that data.


00:18:30.460 --> 00:18:34.420
So let's say you then create a data prod cluster that


00:18:34.420 --> 00:18:38.460
is going to run a PySpark job on that cluster.


00:18:38.460 --> 00:18:41.660
And then you can store the results in BigQuery at the end


00:18:41.660 --> 00:18:44.540
and then delete the cluster and like send a Slack message


00:18:44.540 --> 00:18:46.300
when the job is done.


00:18:46.300 --> 00:18:50.820
That's a very common ETL thing, including that sensor.


00:18:50.820 --> 00:18:52.300
- Yeah, that sounds pretty nice.


00:18:52.300 --> 00:18:54.740
Definitely seems interesting and quite useful.


00:18:54.740 --> 00:18:55.740
- Yeah, it's a lot of fun.


00:18:55.740 --> 00:18:58.180
- Brian, thoughts before we move on?


00:18:58.180 --> 00:18:59.340
- I have a question.


00:18:59.340 --> 00:19:02.300
If you wanted to get started with something like this,


00:19:02.300 --> 00:19:03.740
I was trying to look for tutorials


00:19:03.740 --> 00:19:05.980
and getting started and stuff like that.


00:19:05.980 --> 00:19:08.620
Is it, does it make sense or is it too confusing


00:19:08.620 --> 00:19:10.880
if somebody, you said you could run it on your own machine.


00:19:10.880 --> 00:19:13.720
Does that make sense to try it that way


00:19:13.720 --> 00:19:16.380
or should you try it with a, okay.


00:19:16.380 --> 00:19:19.600
- You totally can do it on your own machine


00:19:19.600 --> 00:19:22.240
and there's this really wonderful environment


00:19:22.240 --> 00:19:25.240
that can be found in the Airflow repository


00:19:25.240 --> 00:19:29.280
that's called Breeze and it's a Dockerized version of it.


00:19:29.280 --> 00:19:31.080
It shouldn't be run in production


00:19:31.080 --> 00:19:33.320
but if you're looking to try it out


00:19:33.320 --> 00:19:35.600
or if you're looking to contribute to Airflow,


00:19:35.600 --> 00:19:37.580
we highly recommend that everyone check out


00:19:37.580 --> 00:19:39.320
the Breeze environment.


00:19:39.320 --> 00:19:41.920
- Right now I have the community page pulled up


00:19:41.920 --> 00:19:44.480
where you can join the dev list in the Slack


00:19:44.480 --> 00:19:45.500
if you have questions,


00:19:45.500 --> 00:19:47.560
but if you were to go to the GitHub repo,


00:19:47.560 --> 00:19:50.520
you would see Breeze right on that first page.


00:19:50.520 --> 00:19:51.680
- Okay, cool, thanks.


00:19:51.680 --> 00:19:53.360
- Yeah, great question, thank you.


00:19:53.360 --> 00:19:54.560
- Yeah, very good one.


00:19:54.560 --> 00:19:55.520
All right, Brian.


00:19:55.520 --> 00:19:57.280
Are you gonna give us a tutorial on Airflow


00:19:57.280 --> 00:19:58.280
or what we got going next?


00:19:58.280 --> 00:20:00.600
- Yeah, so I was looking through the tutorials in Airflow


00:20:00.600 --> 00:20:03.000
and I noticed that right away


00:20:03.000 --> 00:20:05.680
one of the examples used ddent.


00:20:05.680 --> 00:20:07.200
So that was a nice--


00:20:07.200 --> 00:20:08.520
- How about that for a connection?


00:20:08.520 --> 00:20:09.520
- Nice connection.


00:20:09.520 --> 00:20:11.480
- Totally well planned, very cool.


00:20:11.480 --> 00:20:15.920
- D-dent was suggested, it's a text wrap tool,


00:20:15.920 --> 00:20:18.460
it's suggested by Michael Rogers-Fallet.


00:20:18.460 --> 00:20:22.280
It's a small utility, but it's super useful.


00:20:22.280 --> 00:20:24.160
And I kind of forget that it's, I mean,


00:20:24.160 --> 00:20:26.120
I use it all the time, but I forget to mention it


00:20:26.120 --> 00:20:29.760
to people, but it comes up a lot.


00:20:29.760 --> 00:20:34.120
And the idea around D-dent is you've got something,


00:20:34.120 --> 00:20:37.000
oh, I think I lost my D-dent thing.


00:20:37.000 --> 00:20:40.460
Let's see if I can find it. There it is.


00:20:40.460 --> 00:20:42.460
The idea is you've got a multi-line string,


00:20:42.460 --> 00:20:44.200
like here we've got "Hello World."


00:20:44.200 --> 00:20:46.660
And some multiple lines, and there's different spacing.


00:20:46.660 --> 00:20:50.160
But as you notice, I want to define it within a test,


00:20:50.160 --> 00:20:53.700
within a test function or within some other function.


00:20:53.700 --> 00:20:58.160
And so there's this extra, like, space at the beginning.


00:20:58.160 --> 00:20:59.800
That's in the string.


00:20:59.800 --> 00:21:02.300
It's in the multi-line string, and we don't want that.


00:21:02.300 --> 00:21:09.800
We don't, we want it to be just, just no, like nothing at the beginning or the same amount chopped off.


00:21:09.800 --> 00:21:16.000
So one of the options that people have used before is to just define a very multi-line string out of the function.


00:21:16.000 --> 00:21:23.400
You just do it out of the function, then it's against, then it's just against the left side of your editor or whatever on column zero,


00:21:23.400 --> 00:21:24.800
and you don't have to worry about it.


00:21:24.800 --> 00:21:31.700
But it does bother some people that you've got this, this variable defined outside of your function when you're just using it within one function.


00:21:31.700 --> 00:21:33.640
So dedent is the answer.


00:21:33.640 --> 00:21:36.760
So what dedent does is it just takes a multi-line string


00:21:36.760 --> 00:21:39.440
and strips off all the common white space at the beginning.


00:21:39.440 --> 00:21:40.560
That's it.


00:21:40.560 --> 00:21:43.360
But it's super useful.


00:21:43.360 --> 00:21:45.520
They've got a little example that we're showing here,


00:21:45.520 --> 00:21:49.120
but I think this is not a great example.


00:21:49.120 --> 00:21:50.720
So I wrote a new example.


00:21:50.720 --> 00:21:51.840
Oops, fell asleep.


00:21:51.840 --> 00:21:55.780
And so the idea really is I've got a function


00:21:55.780 --> 00:21:59.280
that either print stuff or has some output,


00:21:59.280 --> 00:22:01.520
and I wanna be able to compare that string,


00:22:01.520 --> 00:22:04.520
and I want my comparison to be in the function.


00:22:04.520 --> 00:22:09.060
So I use ddent to just write it right in my function


00:22:09.060 --> 00:22:10.640
and then I don't have the spaces.


00:22:10.640 --> 00:22:11.840
And then, yeah, anyway.


00:22:11.840 --> 00:22:14.260
So this is a PyTest example


00:22:14.260 --> 00:22:16.580
of how you could test a output string.


00:22:16.580 --> 00:22:17.600
So anyway.


00:22:17.600 --> 00:22:20.000
- This really sounds like a classic example


00:22:20.000 --> 00:22:22.260
of there's a problem, like the open source,


00:22:22.260 --> 00:22:23.400
this really bothered me.


00:22:23.400 --> 00:22:25.040
And so I wrote something to fix it.


00:22:25.040 --> 00:22:26.420
And it's wonderful.


00:22:26.420 --> 00:22:30.480
Like the time honored open source reason to make something.


00:22:30.480 --> 00:22:34.560
But I also want to remind people that D-Dent is not the only thing in TextWrap.


00:22:34.560 --> 00:22:36.720
And TextWrap has a whole bunch of other cool tools.


00:22:36.720 --> 00:22:42.200
So it's not huge, it's just a five-minute read to peruse what's in TextWrap


00:22:42.200 --> 00:22:46.120
so that next time you need to manipulate some text, it's useful.


00:22:46.120 --> 00:22:48.120
Nice. Maybe wrapping.


00:22:48.120 --> 00:22:49.400
Yeah, like wrapping.


00:22:49.400 --> 00:22:53.360
It does things like if you've got a huge string and you want to be able to...


00:22:53.360 --> 00:22:55.520
Like one of the things is to shorten it.


00:22:55.520 --> 00:22:57.560
So if you've got a huge string,


00:22:57.560 --> 00:23:00.040
but you really only have like eight characters to show something.


00:23:00.040 --> 00:23:01.440
- Like ellipsize it.


00:23:01.440 --> 00:23:03.040
- Yeah, it does that for you.


00:23:03.040 --> 00:23:05.400
So that's there too.


00:23:05.400 --> 00:23:06.680
- That's good 'cause I've written that code.


00:23:06.680 --> 00:23:07.520
It wasn't fun.


00:23:07.520 --> 00:23:08.340
(laughing)


00:23:08.340 --> 00:23:09.180
It didn't feel useful either.


00:23:09.180 --> 00:23:10.200
I'm like, okay, great, it works.


00:23:10.200 --> 00:23:11.880
But here we go.


00:23:11.880 --> 00:23:14.240
Some audience feedback, Anthony out there.


00:23:14.240 --> 00:23:16.000
Hey, Anthony says, "It's really useful.


00:23:16.000 --> 00:23:18.120
"Used it many times."


00:23:18.120 --> 00:23:19.120
- Nice. - Quite cool.


00:23:19.120 --> 00:23:23.320
All right, this next one comes to us from Dan Bader.


00:23:23.320 --> 00:23:26.160
You might know him from RealPython and other things.


00:23:26.160 --> 00:23:27.720
He and I were chatting and he said,


00:23:27.720 --> 00:23:30.880
"Hey, have you heard about PIP audit from Trail of Bits?"


00:23:30.880 --> 00:23:32.800
And I was sure that I had,


00:23:32.800 --> 00:23:34.240
and I thought we had talked about it,


00:23:34.240 --> 00:23:36.640
but then I realized, "No, I don't believe we have."


00:23:36.640 --> 00:23:38.720
So I must've just heard about it somewhere else,


00:23:38.720 --> 00:23:39.920
and we haven't covered it before.


00:23:39.920 --> 00:23:44.280
So the idea is we've heard about a lot of issues


00:23:44.280 --> 00:23:46.640
with supply chain vulnerabilities,


00:23:46.640 --> 00:23:47.720
things getting into PIP,


00:23:47.720 --> 00:23:50.860
but also RubyGems and NPM and so on.


00:23:50.860 --> 00:23:52.680
Sometimes that's somebody trying to be evil


00:23:52.680 --> 00:23:54.940
and putting in some typo squatting thing,


00:23:54.940 --> 00:23:57.120
or worse than that would be


00:23:57.120 --> 00:24:00.960
if the GitHub account of a maintainer got hacked


00:24:00.960 --> 00:24:03.040
and somebody published a package


00:24:03.040 --> 00:24:06.000
with like to the real package, right?


00:24:06.000 --> 00:24:08.560
So however things might get into your dependencies,


00:24:08.560 --> 00:24:10.520
if something is going on bad there,


00:24:10.520 --> 00:24:12.360
it's better to know than to not know.


00:24:12.360 --> 00:24:14.160
So this pip audit is all about that.


00:24:14.160 --> 00:24:17.220
It audits Python environments as in virtual environments


00:24:17.220 --> 00:24:20.080
and dependency trees for known vulnerabilities.


00:24:20.080 --> 00:24:22.840
So that's one of the things that's interesting


00:24:22.840 --> 00:24:25.260
is when you pip install things,


00:24:25.260 --> 00:24:27.300
you might be very good about saying,


00:24:27.300 --> 00:24:30.340
"Oh, I pip installed Flask and I pip installed Pandas.


00:24:30.340 --> 00:24:32.300
So those are going into my requirements file


00:24:32.300 --> 00:24:33.860
or my pyproject.toml,


00:24:33.860 --> 00:24:36.620
but did you remember to pin their versions?"


00:24:36.620 --> 00:24:38.220
So that things like GitHub will say,


00:24:38.220 --> 00:24:39.580
"Your version is wrong."


00:24:39.580 --> 00:24:40.860
'Cause if it just sees Flask


00:24:40.860 --> 00:24:42.820
and the recent version doesn't have a problem,


00:24:42.820 --> 00:24:43.660
it's not gonna tell you,


00:24:43.660 --> 00:24:45.380
"But the one you have installed may."


00:24:45.380 --> 00:24:49.140
Also the transitive closure of the dependencies.


00:24:49.140 --> 00:24:51.300
So Flask depends on it's dangerous,


00:24:51.300 --> 00:24:53.140
which depends on, I don't know.


00:24:53.140 --> 00:24:54.780
But if there's something down that chain


00:24:54.780 --> 00:24:57.140
that has a problem, you may have not put that


00:24:57.140 --> 00:24:59.800
in your requirements file and you may not be tracking it.


00:24:59.800 --> 00:25:02.500
Like I might be paying careful attention to Flask,


00:25:02.500 --> 00:25:04.660
I might not care anything about it's dangerous,


00:25:04.660 --> 00:25:06.320
but that's where the problem is, right?


00:25:06.320 --> 00:25:07.160
- Yeah.


00:25:07.160 --> 00:25:08.420
- So this tool from Trail of Bits,


00:25:08.420 --> 00:25:11.420
which is a security company, basically solves that problem.


00:25:11.420 --> 00:25:15.380
And it lets you just type pip-audit.


00:25:15.380 --> 00:25:19.720
And for me, it's a -r requirements.txt or whatever.


00:25:19.720 --> 00:25:22.460
And from what I can tell, what it does is it will go


00:25:22.460 --> 00:25:24.740
create its own virtual environment


00:25:24.740 --> 00:25:28.100
where it one by one installs each package,


00:25:28.100 --> 00:25:31.260
looks at the things that come out of that process


00:25:31.260 --> 00:25:32.900
and then scans those.


00:25:32.900 --> 00:25:33.980
So it's not just looking at,


00:25:33.980 --> 00:25:36.460
oh, you say you have Flask and that's 201,


00:25:36.460 --> 00:25:38.700
great, you're good to go.


00:25:38.700 --> 00:25:39.820
It actually installs it


00:25:39.820 --> 00:25:42.820
because who knows what the setup.py process is doing


00:25:42.820 --> 00:25:43.860
and all those kinds of things.


00:25:43.860 --> 00:25:46.620
And then it scans that and it gives you a report.


00:25:46.620 --> 00:25:49.340
So for like Talk Python Training site,


00:25:49.340 --> 00:25:52.340
we have, I don't know, 30 dependencies or something.


00:25:52.340 --> 00:25:54.780
and it sat there and it took, I don't know,


00:25:54.780 --> 00:25:55.980
probably took two minutes to go through


00:25:55.980 --> 00:25:57.960
and it said, "Everything's good to go."


00:25:57.960 --> 00:26:00.180
So that was good to hear, but it's pretty neat.


00:26:00.180 --> 00:26:01.500
Really easy to use.


00:26:01.500 --> 00:26:04.180
It's like an external tool, like Black or something.


00:26:04.180 --> 00:26:06.700
So it's a very good candidate for PIPX,


00:26:06.700 --> 00:26:08.120
and then it's just globally available


00:26:08.120 --> 00:26:09.940
to point at any environment.


00:26:09.940 --> 00:26:10.780
What do you all think?


00:26:10.780 --> 00:26:12.060
- Oh, this is so cool.


00:26:12.060 --> 00:26:13.880
I heard about it 'cause one of my colleagues,


00:26:13.880 --> 00:26:16.220
Dustin Ingram, I think has been involved with it,


00:26:16.220 --> 00:26:18.380
or either it's his Twitter that I found out about it from,


00:26:18.380 --> 00:26:21.380
but he also has a really good talk from PyCon


00:26:21.380 --> 00:26:25.380
this past year about the supply chain vulnerabilities


00:26:25.380 --> 00:26:28.780
that's worth checking out if you're wanting to get an idea


00:26:28.780 --> 00:26:31.220
of why this is important.


00:26:31.220 --> 00:26:33.740
- Yeah, yeah, we've highlighted a few examples


00:26:33.740 --> 00:26:37.100
over the years, but it's definitely something


00:26:37.100 --> 00:26:37.940
you wanna pay attention to.


00:26:37.940 --> 00:26:39.540
And that's cool that Dustin was talking about it.


00:26:39.540 --> 00:26:41.700
He works, I think he's still working with the PyPA


00:26:41.700 --> 00:26:46.700
and works on the pypi.org and all those kinds of things.


00:26:46.700 --> 00:26:49.160
So very cool warehouse.


00:26:49.160 --> 00:26:50.580
Brian, what do you think?


00:26:50.580 --> 00:26:52.900
- I think this is cool, I'm gonna start using it right away.


00:26:52.900 --> 00:26:53.740
This is nice.


00:26:53.740 --> 00:26:55.540
- Yeah, I already used it once as well


00:26:55.540 --> 00:26:56.580
and everything seems good.


00:26:56.580 --> 00:26:58.560
So here, look, I even called a flask as an example.


00:26:58.560 --> 00:27:00.300
Say here on this particular version,


00:27:00.300 --> 00:27:05.300
there was this security vulnerability from 2019


00:27:05.300 --> 00:27:07.820
and same with, I guess, Ginger and all those were good.


00:27:07.820 --> 00:27:09.740
But yeah, it gives you a nice description


00:27:09.740 --> 00:27:12.620
of what went wrong and like in this case,


00:27:12.620 --> 00:27:15.700
it's a denial of service attack and whatnot.


00:27:15.700 --> 00:27:18.420
- So I definitely recommend people pin versions,


00:27:18.420 --> 00:27:20.460
definitely in your requirements.


00:27:20.460 --> 00:27:24.500
But what do you all think of including hashes?


00:27:24.500 --> 00:27:26.900
- I think that's something Dustin talked about in his talk.


00:27:26.900 --> 00:27:28.100
And at the time I was like,


00:27:28.100 --> 00:27:30.260
oh, that sounds like a good idea.


00:27:30.260 --> 00:27:32.620
And it's not something I've started doing yet.


00:27:32.620 --> 00:27:33.460
- Yeah.


00:27:33.460 --> 00:27:35.020
- Exactly, that's exactly what I think.


00:27:35.020 --> 00:27:37.260
It sounds like a good idea and I'm not doing it yet.


00:27:37.260 --> 00:27:38.420
So anyway.


00:27:38.420 --> 00:27:41.140
- But that sounds like it's a me problem.


00:27:41.140 --> 00:27:43.140
More than anything else.


00:27:43.140 --> 00:27:45.060
- I also, it seems like a good idea.


00:27:45.060 --> 00:27:47.860
You know, I might be missing a step.


00:27:47.860 --> 00:27:52.740
It feels like the, the challenge you're going to run into there, where what you're preventing


00:27:52.740 --> 00:27:58.980
against as a man in the middle attack, somebody can intercept what's happening with IPI.org


00:27:58.980 --> 00:28:03.560
and sneak in some kind of broken hacked version.


00:28:03.560 --> 00:28:04.560
I don't know.


00:28:04.560 --> 00:28:08.900
I don't necessarily trust what goes into pipe.org, but I trust pipe.org.


00:28:08.900 --> 00:28:12.600
So I'm not super, it's not my biggest worry.


00:28:12.600 --> 00:28:16.740
There's like 10 other worries that make me have a hard time sleeping at night about running


00:28:16.740 --> 00:28:19.300
stuff on the internet that precedes that.


00:28:19.300 --> 00:28:22.140
So I haven't worried about it, but maybe I should.


00:28:22.140 --> 00:28:24.500
- It's in the queue of things to worry about.


00:28:24.500 --> 00:28:26.060
- Well, for instance, with this audit,


00:28:26.060 --> 00:28:29.720
you can pin your stuff and then have it be,


00:28:29.720 --> 00:28:33.260
check it every once in a while,


00:28:33.260 --> 00:28:35.060
install everything and check things.


00:28:35.060 --> 00:28:37.500
- I don't see why it couldn't be a CI step.


00:28:37.500 --> 00:28:39.940
- I was actually just gonna say that PIP audit,


00:28:39.940 --> 00:28:42.700
I need to bring it to my samples maintaining group


00:28:42.700 --> 00:28:44.900
to talk about who wants to implement it


00:28:44.900 --> 00:28:46.900
and how soon we're gonna do it.


00:28:46.900 --> 00:28:49.140
- And whose pager rings when it finds a problem.


00:28:49.140 --> 00:28:49.980
- Yes.


00:28:49.980 --> 00:28:51.440
- Yeah, I'm listening to that,


00:28:51.440 --> 00:28:52.620
pagers from back in the day.


00:28:52.620 --> 00:28:55.220
All right, well, that's all I got for that one.


00:28:55.220 --> 00:28:58.020
We're off to Leah.


00:28:58.020 --> 00:28:59.900
- I'm so glad you mentioned pitting requirements


00:28:59.900 --> 00:29:01.020
because that is actually,


00:29:01.020 --> 00:29:04.660
that's a great segue for managing samples for GCP.


00:29:04.660 --> 00:29:07.220
So what I have open right now for Google Cloud


00:29:07.220 --> 00:29:09.420
is an example documentation page.


00:29:09.420 --> 00:29:12.420
I picked Cloud Composer because it's what I work on.


00:29:12.420 --> 00:29:14.540
And I wanna give an example


00:29:14.540 --> 00:29:17.140
of where this code lives that I'm talking about


00:29:17.140 --> 00:29:19.840
that I work with this group to maintain.


00:29:19.840 --> 00:29:22.160
So this is a page that's about using


00:29:22.160 --> 00:29:24.760
a particular Airflow operator.


00:29:24.760 --> 00:29:27.120
And if you were to scroll on it,


00:29:27.120 --> 00:29:28.920
you will see these code samples


00:29:28.920 --> 00:29:31.360
and they are all stored in GitHub


00:29:31.360 --> 00:29:34.200
and then embedded in our docs.


00:29:34.200 --> 00:29:36.680
So you can click view on GitHub on any one of them


00:29:36.680 --> 00:29:39.400
and it will take you to the linked repository.


00:29:39.400 --> 00:29:40.600
You can look at the history,


00:29:40.600 --> 00:29:43.160
look at everything in context.


00:29:43.160 --> 00:29:47.840
So we have thousands of samples for all of the Google Cloud


00:29:47.840 --> 00:29:50.060
products, just for Python.


00:29:50.060 --> 00:29:52.040
But we have them in other languages, too.


00:29:52.040 --> 00:29:54.880
And they're located across hundreds of repos.


00:29:54.880 --> 00:29:57.160
This happens to be one repo that has


00:29:57.160 --> 00:29:59.420
samples for multiple products.


00:29:59.420 --> 00:30:03.280
But we have other repos where things are stored, too.


00:30:03.280 --> 00:30:06.240
So to ensure that there's consistency


00:30:06.240 --> 00:30:09.920
and that my group of engineers, my colleagues, and I actually


00:30:09.920 --> 00:30:17.000
have time to do our work and function as humans outside of work too, we use a lot of automation.


00:30:17.000 --> 00:30:21.040
So we use a lot of bots to do things like keep our dependencies up to date, check for


00:30:21.040 --> 00:30:29.040
license headers, auto assign PRs for reviewing, syncing repositories with centralized configurations,


00:30:29.040 --> 00:30:33.880
and even more, which is pretty great. And this is actually where the pinning requirements


00:30:33.880 --> 00:30:39.120
comes in. We very strongly believe in pinning requirements because it makes the samples


00:30:39.120 --> 00:30:41.520
easier to maintain and test against.


00:30:41.520 --> 00:30:44.080
And it's easier to go back to the product and say,


00:30:44.080 --> 00:30:47.800
"Hey, you just pushed a release candidate for your product


00:30:47.800 --> 00:30:49.800
and it broke your samples."


00:30:49.800 --> 00:30:52.560
It wasn't supposed to. What gives?


00:30:52.560 --> 00:30:57.280
Rather than finding out mysteriously when getting a customer issue.


00:30:57.280 --> 00:30:59.840
So then to keep it up to date, we use


00:30:59.840 --> 00:31:04.680
a bot and these are some pull requests recently opened by the bot of some


00:31:04.680 --> 00:31:08.160
dependencies. They get double checked to make sure everything looks good


00:31:08.160 --> 00:31:10.160
by human and merged.


00:31:10.160 --> 00:31:12.880
It's pretty great. And then we actually have a team


00:31:12.880 --> 00:31:14.880
of engineers in DevRel


00:31:14.880 --> 00:31:17.880
that works on making GitHub bots


00:31:17.880 --> 00:31:20.380
that we use, and that is totally open source.


00:31:20.380 --> 00:31:22.380
You can see some of the ones that we use.


00:31:22.380 --> 00:31:24.800
We have our license header one.


00:31:24.800 --> 00:31:26.800
The sync repo settings


00:31:26.800 --> 00:31:28.800
allows us to have a single source of truth


00:31:28.800 --> 00:31:31.960
for our configuration for all of our Python repos.


00:31:31.960 --> 00:31:35.920
And then it makes sure it gets synced across all of them.


00:31:35.920 --> 00:31:40.960
It's pretty great. I really don't know how I would function without all of my bot friends.


00:31:40.960 --> 00:31:46.400
This is super cool. I can just imagine how much work it is to keep all of those different things


00:31:46.400 --> 00:31:52.480
in sync. And I have worked recently on projects where I'm like, okay, I got to integrate this


00:31:52.480 --> 00:31:57.680
library, I'm going to go to the documentation, and I try to use the one or two functions that


00:31:57.680 --> 00:32:01.760
the whole thing does. And it's like, nope, that parameter doesn't exist, or you're missing some


00:32:01.760 --> 00:32:05.120
you're like, come on, at least just keep the signature, right?


00:32:05.120 --> 00:32:09.320
You know, it's, and of course it's something like star org, star star KW orgs.


00:32:09.320 --> 00:32:12.840
It's not like, oh, I can just look in my ID and see, oh yeah, it says it takes like,


00:32:12.840 --> 00:32:15.120
use security, use SSL, yes or no.


00:32:15.120 --> 00:32:18.560
Like, no, it's unknown without the documentation, basically.


00:32:18.560 --> 00:32:19.080
Yeah.


00:32:19.080 --> 00:32:20.080
This is awesome.


00:32:20.080 --> 00:32:20.680
Thank you.


00:32:20.680 --> 00:32:21.640
I think so too.


00:32:21.640 --> 00:32:22.840
I'm very grateful to it.


00:32:22.840 --> 00:32:26.360
And yeah, for our dependency bot, we do use an external one.


00:32:26.360 --> 00:32:28.760
I know, I think GitHub is the one that does depend a bot.


00:32:28.760 --> 00:32:31.840
We in particular use White Source Renovate Bot.


00:32:31.840 --> 00:32:33.920
It's what we were using when I started


00:32:33.920 --> 00:32:35.520
and that works very well too


00:32:35.520 --> 00:32:38.280
and they're very nice and responsive to issues.


00:32:38.280 --> 00:32:39.560
- Oh, that's fantastic.


00:32:39.560 --> 00:32:41.600
Yeah, Dependabot was fairly new


00:32:41.600 --> 00:32:43.960
and then it was bought quite recently by GitHub


00:32:43.960 --> 00:32:47.400
so I can imagine you were all doing something before then.


00:32:47.400 --> 00:32:50.080
- Probably, but I know I have friends who use that too


00:32:50.080 --> 00:32:50.920
and they're great.


00:32:50.920 --> 00:32:52.760
Using a dependency bot, I would say,


00:32:52.760 --> 00:32:55.120
if you need a starter bot for any of them,


00:32:55.120 --> 00:32:58.200
the dependency bot is a great place to start.


00:32:58.200 --> 00:32:59.200
- Yeah, that's fantastic.


00:32:59.200 --> 00:33:01.920
I recently switched to PipTools and PipCompile


00:33:01.920 --> 00:33:04.960
to generate my requirements with pinned versions and stuff.


00:33:04.960 --> 00:33:05.800
- Nice.


00:33:05.800 --> 00:33:07.820
- But before that, I was all about the pinned bot


00:33:07.820 --> 00:33:11.320
telling me if something new was out and seeking that.


00:33:11.320 --> 00:33:12.160
- Nice.


00:33:12.160 --> 00:33:13.000
- Yeah.


00:33:13.000 --> 00:33:14.680
- PipTools rocks, I love PipTools.


00:33:14.680 --> 00:33:15.980
- Yeah, it definitely does.


00:33:15.980 --> 00:33:17.320
Brian, there's a lot of cool automation here.


00:33:17.320 --> 00:33:18.200
What do you think?


00:33:18.200 --> 00:33:20.280
- I'm excited about looking through all these.


00:33:20.280 --> 00:33:24.480
I love looking at bots, 'cause the whole idea about a bot


00:33:24.480 --> 00:33:26.680
is to do, is like the Unix philosophy


00:33:26.680 --> 00:33:28.720
of do one thing and do it well.


00:33:28.720 --> 00:33:30.640
- Yes. - And I love that.


00:33:30.640 --> 00:33:32.640
- And have something else do it and not you do it.


00:33:32.640 --> 00:33:35.960
- Oh yeah, all of our bots are based on like,


00:33:35.960 --> 00:33:38.680
oh gosh, we're doing this one thing over and over


00:33:38.680 --> 00:33:42.200
and we're not doing it well because we're doing it manually.


00:33:42.200 --> 00:33:44.480
So how can we like use automation


00:33:44.480 --> 00:33:46.120
to make sure we're doing it consistently


00:33:46.120 --> 00:33:48.000
and just save a lot of time.


00:33:48.000 --> 00:33:49.520
- Like one of the things you've got in here


00:33:49.520 --> 00:33:51.680
that's shown right now is label sync.


00:33:51.680 --> 00:33:53.320
So one of the nice things about,


00:33:53.320 --> 00:33:54.680
one of the interesting things


00:33:54.680 --> 00:33:58.520
about different groups workflows is to have different labels


00:33:58.520 --> 00:33:59.900
that mean different things.


00:33:59.900 --> 00:34:01.840
But when you open a new repo,


00:34:01.840 --> 00:34:03.220
it doesn't have all those labels.


00:34:03.220 --> 00:34:06.840
So being able to sync those labels across an organization.


00:34:06.840 --> 00:34:11.280
- Like needs triage, good first contribution,


00:34:11.280 --> 00:34:12.360
all those kinds of things, right?


00:34:12.360 --> 00:34:15.280
- Yeah, as I said, we have hundreds of repos


00:34:15.280 --> 00:34:18.800
just for Python and we use things like we have labels


00:34:18.800 --> 00:34:23.020
that say what API something belongs to.


00:34:23.020 --> 00:34:26.120
And that helps with the auto assign bot


00:34:26.120 --> 00:34:27.700
to make sure that issues and PRs


00:34:27.700 --> 00:34:29.460
get routed to the right team.


00:34:29.460 --> 00:34:31.900
Otherwise you're having a human do all that triage,


00:34:31.900 --> 00:34:36.300
which is fine, but doesn't scale super well in our use case.


00:34:36.300 --> 00:34:37.120
- Yeah.


00:34:37.120 --> 00:34:38.860
- And adding a label is really easy


00:34:38.860 --> 00:34:41.900
to an issue or something.


00:34:41.900 --> 00:34:44.420
So having a bot that looks at label changes


00:34:44.420 --> 00:34:46.540
and just does an action based on that


00:34:46.540 --> 00:34:48.460
is a brilliant use of time.


00:34:48.460 --> 00:34:49.340
- Yep.


00:34:49.340 --> 00:34:50.380
Highly recommend.


00:34:50.380 --> 00:34:51.260
- Yeah, fantastic.


00:34:51.260 --> 00:34:52.100
This is great.


00:34:52.100 --> 00:34:54.380
- And you have an install link next to all of them.


00:34:54.380 --> 00:34:55.420
That mean I just click that


00:34:55.420 --> 00:34:57.540
and install it into one of my repos?


00:34:57.540 --> 00:34:59.380
- I believe that is the intent.


00:34:59.380 --> 00:35:00.220
And if it doesn't work,


00:35:00.220 --> 00:35:01.660
you should open an issue on this repo


00:35:01.660 --> 00:35:04.100
because my colleagues are very responsive.


00:35:04.100 --> 00:35:04.940
- Fantastic.


00:35:04.940 --> 00:35:05.860
- Yeah. - And we just need bots


00:35:05.860 --> 00:35:07.420
to generate bots.


00:35:07.420 --> 00:35:09.660
- Honestly, if my colleagues told me


00:35:09.660 --> 00:35:11.040
they were working on that in this repo,


00:35:11.040 --> 00:35:12.860
I wouldn't be surprised, but I don't know.


00:35:12.860 --> 00:35:14.300
(laughing)


00:35:14.300 --> 00:35:15.140
- The meta bot.


00:35:15.140 --> 00:35:15.980
- Yeah.


00:35:15.980 --> 00:35:16.820
- Fantastic.


00:35:16.820 --> 00:35:20.460
All right, well, how about some extras?


00:35:20.460 --> 00:35:21.300
Brian, you got anything extra


00:35:21.300 --> 00:35:24.140
you want to share while we're here before we call it a show?


00:35:24.140 --> 00:35:26.140
- No, just I'm fighting a cold


00:35:26.140 --> 00:35:27.820
and hopefully that'll all be over.


00:35:27.820 --> 00:35:29.100
- Feel better soon.


00:35:29.100 --> 00:35:30.580
- Yeah, maybe some sort of audit thing.


00:35:30.580 --> 00:35:31.980
We'll check your health status.


00:35:31.980 --> 00:35:33.260
We can run that against you.


00:35:33.260 --> 00:35:35.900
Leah, anything else you want to share with us?


00:35:35.900 --> 00:35:37.660
- Oh, I mean, on Twitter earlier,


00:35:37.660 --> 00:35:39.780
we were talking about HTTP status codes


00:35:39.780 --> 00:35:42.260
and it reminded me of still my forever reference


00:35:42.260 --> 00:35:46.220
for HTTP status codes is http.cat.


00:35:46.220 --> 00:35:48.620
- Yes, http.cat is fantastic.


00:35:48.620 --> 00:35:50.180
- It's so good.


00:35:50.180 --> 00:35:51.000
- It is so good.


00:35:51.000 --> 00:35:53.040
- Let's share a few non-funny things


00:35:53.040 --> 00:35:54.760
and then we'll mix that in with our joke.


00:35:54.760 --> 00:35:56.040
- Please do.


00:35:56.040 --> 00:35:57.160
- Fantastic, all right.


00:35:57.160 --> 00:36:00.880
The first one has to do with, speaking of GitHub,


00:36:00.880 --> 00:36:02.640
another cool GitHub thing.


00:36:02.640 --> 00:36:04.200
You know you could press a dot


00:36:04.200 --> 00:36:05.600
and that would do certain things.


00:36:05.600 --> 00:36:07.520
This only works if you're signed in.


00:36:07.520 --> 00:36:10.200
But now there's a command palette.


00:36:10.200 --> 00:36:12.960
This idea of command palettes are becoming popular in UIs.


00:36:12.960 --> 00:36:14.320
We've got it in VS Code.


00:36:14.320 --> 00:36:17.680
We've got it in like Superhuman, the email.


00:36:17.680 --> 00:36:20.080
And often you get them by pressing Command + K


00:36:20.080 --> 00:36:22.520
or Control + K, and now you have that for GitHub.


00:36:22.520 --> 00:36:25.640
So if I were on a repo where I could do stuff to it,


00:36:25.640 --> 00:36:28.360
I could hit Command + K, and then it will say,


00:36:28.360 --> 00:36:29.200
what do you wanna do?


00:36:29.200 --> 00:36:33.200
Search or jump to, I could go to pages, issues,


00:36:33.200 --> 00:36:36.840
I could look for, let's see, look for the app.


00:36:36.840 --> 00:36:38.720
If I just type app, it'll search for those.


00:36:38.720 --> 00:36:41.460
I could search for all sorts of things here and boom,


00:36:41.460 --> 00:36:43.360
it takes me and shows me all the apps.


00:36:43.360 --> 00:36:44.200
Isn't that cool?


00:36:44.200 --> 00:36:45.280
- That's so cool.


00:36:45.280 --> 00:36:47.840
- Command palette, yeah, that's now a thing.


00:36:47.840 --> 00:36:49.120
- That's beautiful.


00:36:49.120 --> 00:36:50.980
- And you could just, I mean, no mouse.


00:36:50.980 --> 00:36:53.280
I'm here, I'm in this repo, the top level,


00:36:53.280 --> 00:36:55.680
command K, down arrow, two times to enter,


00:36:55.680 --> 00:36:56.520
I'm on the issues.


00:36:56.520 --> 00:36:58.800
- Oh my gosh, love to see it.


00:36:58.800 --> 00:36:59.880
- Yeah, so that's a good one.


00:36:59.880 --> 00:37:02.360
The other one, the other extra,


00:37:02.360 --> 00:37:06.560
is Python 3.10.1 is out, released December 6th,


00:37:06.560 --> 00:37:08.080
so as in two days ago.


00:37:08.080 --> 00:37:09.000
- Wow.


00:37:09.000 --> 00:37:11.680
- It's got a fun little snake with a hat on.


00:37:11.680 --> 00:37:12.520
- Love it.


00:37:12.520 --> 00:37:13.620
- That's really about 3.10.


00:37:13.620 --> 00:37:16.540
So let me describe, I can cover the entire release for you.


00:37:16.540 --> 00:37:19.180
So Python 3.10.1 is the newest major release


00:37:19.180 --> 00:37:20.820
of the Python programming languages.


00:37:20.820 --> 00:37:23.420
It contains many features and optimizations.


00:37:23.420 --> 00:37:25.120
So now you all know what's in it.


00:37:25.120 --> 00:37:26.180
(laughing)


00:37:26.180 --> 00:37:27.020
It's very vague.


00:37:27.020 --> 00:37:27.860
- It's really vague.


00:37:27.860 --> 00:37:28.680
- It's very vague.


00:37:28.680 --> 00:37:29.520
(laughing)


00:37:29.520 --> 00:37:32.380
Apparently it has 300 commits of changes and fixes.


00:37:32.380 --> 00:37:34.700
One thing I would, I wanted to know,


00:37:34.700 --> 00:37:36.260
are there security updates?


00:37:36.260 --> 00:37:37.100
Yes or no?


00:37:37.100 --> 00:37:40.220
Like, should I, like, should I install this if I'm curious


00:37:40.220 --> 00:37:42.620
or should I install this now before tomorrow?


00:37:42.620 --> 00:37:45.560
because someone's gonna start poking around.


00:37:45.560 --> 00:37:47.120
I would love if it would say that.


00:37:47.120 --> 00:37:48.880
There's a great thing about the major features,


00:37:48.880 --> 00:37:51.320
but that's just 3.10, not the point release.


00:37:51.320 --> 00:37:54.080
So anyway, still good.


00:37:54.080 --> 00:37:57.120
- Yeah, we've been having fun making all of our GCP samples,


00:37:57.120 --> 00:37:59.120
making sure they're 3.10 compatible,


00:37:59.120 --> 00:38:01.360
which we're getting there.


00:38:01.360 --> 00:38:04.560
It's all waiting for certain dependencies to be ready.


00:38:04.560 --> 00:38:06.720
But a lot of fun, very exciting to see.


00:38:06.720 --> 00:38:07.600
- Yeah, that's awesome.


00:38:07.600 --> 00:38:09.120
- Well, you can look at the change log.


00:38:09.120 --> 00:38:10.440
So if you look at the 3.10,


00:38:10.440 --> 00:38:13.280
the change log, you can see 310 one and stuff.


00:38:13.280 --> 00:38:14.120
- I can.


00:38:14.120 --> 00:38:15.440
- Okay, go up a little bit.


00:38:15.440 --> 00:38:16.720
- Full change log there maybe?


00:38:16.720 --> 00:38:17.560
- Yeah.


00:38:17.560 --> 00:38:18.380
- Yeah, that's true.


00:38:18.380 --> 00:38:20.600
I can go to the change log there and check that out.


00:38:20.600 --> 00:38:23.000
- But having a security thing would be a good idea.


00:38:23.000 --> 00:38:23.840
- Yeah, just like--


00:38:23.840 --> 00:38:24.960
- A TLDR.


00:38:24.960 --> 00:38:26.760
- Yeah, exactly, exactly, cool.


00:38:26.760 --> 00:38:29.440
- Well, and also a lot of people didn't wanna try 310


00:38:29.440 --> 00:38:31.520
until we got one patch release.


00:38:31.520 --> 00:38:33.640
So now we have one patch release, so there's no excuse.


00:38:33.640 --> 00:38:35.280
- So now it's quote safe.


00:38:35.280 --> 00:38:37.400
I have been running it for a day in production


00:38:37.400 --> 00:38:38.720
and it seems okay.


00:38:38.720 --> 00:38:41.280
put it on one site to see if it would hang in there.


00:38:41.280 --> 00:38:42.120
It seems fine.


00:38:42.120 --> 00:38:42.940
So we're all good.


00:38:42.940 --> 00:38:43.780
- Yeah.


00:38:43.780 --> 00:38:45.400
All right, the samples that are using it are doing fine.


00:38:45.400 --> 00:38:47.480
They've had passing periodic builds for a while.


00:38:47.480 --> 00:38:48.520
- Yeah, fantastic.


00:38:48.520 --> 00:38:49.640
All right, are you ready for some--


00:38:49.640 --> 00:38:50.480
- No, I'm ready. - Chat jokes later?


00:38:50.480 --> 00:38:51.400
- Sorry.


00:38:51.400 --> 00:38:54.320
- Yes, I mean, we started our conversation off today


00:38:54.320 --> 00:38:55.640
talking about cats.


00:38:55.640 --> 00:38:56.960
- It's true.


00:38:56.960 --> 00:38:57.840
- Before we hit record.


00:38:57.840 --> 00:38:59.800
So I feel like we should round that out, yeah?


00:38:59.800 --> 00:39:00.760
- Definitely.


00:39:00.760 --> 00:39:03.840
- So first of all, httpstatuses.com


00:39:03.840 --> 00:39:07.080
is a fantastic place to go learn about the real meaning


00:39:07.080 --> 00:39:09.760
or the official meaning, let's say, of status code.


00:39:09.760 --> 00:39:11.880
So for example, there's 100 continue,


00:39:11.880 --> 00:39:13.240
and if you want details, you click on that,


00:39:13.240 --> 00:39:14.520
and it actually pulls this all up.


00:39:14.520 --> 00:39:17.960
Even shows you like the enum in Python,


00:39:17.960 --> 00:39:19.760
if you wanna use that. - Oh my gosh, I love that.


00:39:19.760 --> 00:39:20.880
- Isn't that cool? - Yeah.


00:39:20.880 --> 00:39:22.880
- It gives you the meaning like 100 continue,


00:39:22.880 --> 00:39:25.040
the initial part of a request has been received


00:39:25.040 --> 00:39:28.200
and has not yet been rejected by the server.


00:39:28.200 --> 00:39:31.640
The server intends to send a final response eventually.


00:39:31.640 --> 00:39:35.320
And so there's other ones like 200 okay, 201 created.


00:39:35.320 --> 00:39:36.720
Let's see, what else should I point out?


00:39:36.720 --> 00:39:41.240
304, cache not modified, 400, bad request.


00:39:41.240 --> 00:39:42.080
- Bad request.


00:39:42.080 --> 00:39:44.760
- 404, not found, 403, forbidden,


00:39:44.760 --> 00:39:47.680
500, internal server error.


00:39:47.680 --> 00:39:49.840
Yeah, 418, I'm a tbot.


00:39:49.840 --> 00:39:51.080
And 502, bad gateway.


00:39:51.080 --> 00:39:53.760
Okay, so let's do yours firstly.


00:39:53.760 --> 00:39:54.600
- Please.


00:39:54.600 --> 00:39:56.440
- I'd put out this joke and you said,


00:39:56.440 --> 00:39:59.440
"This is good, but oh my goodness, cats."


00:39:59.440 --> 00:40:03.600
- Yeah, so when I was doing my computer science degree,


00:40:03.600 --> 00:40:06.700
a friend shared with me HTTP.cat


00:40:06.700 --> 00:40:09.200
when we were learning about HTTP status codes.


00:40:09.200 --> 00:40:11.200
And if you go there, you will find


00:40:11.200 --> 00:40:14.300
one cat per HTTP status code


00:40:14.300 --> 00:40:16.600
representing what is going on.


00:40:16.600 --> 00:40:18.000
And I'm not going to lie to you,


00:40:18.000 --> 00:40:19.200
in my professional career,


00:40:19.200 --> 00:40:21.000
I still use it as a reference


00:40:21.000 --> 00:40:22.700
because it's my favorite one.


00:40:22.700 --> 00:40:24.000
And you can even,


00:40:24.000 --> 00:40:27.500
if you go to like HTTP.cat/200,


00:40:27.500 --> 00:40:29.900
it returns a JPEG of a cat that's like, okay.


00:40:29.900 --> 00:40:30.800
Yeah, exactly.


00:40:30.800 --> 00:40:32.800
And you can do that for all of the status codes.


00:40:32.800 --> 00:40:37.000
- 201, the cat has walked through some wet cement


00:40:37.000 --> 00:40:40.660
and that's too uncreated for footprints.


00:40:40.660 --> 00:40:42.060
Let's see what else we got in here.


00:40:42.060 --> 00:40:43.060
Some good ones.


00:40:43.060 --> 00:40:46.640
404, not modify, 304, sorry.


00:40:46.640 --> 00:40:50.680
The 404, the cat is hiding under some wrapping, not found.


00:40:50.680 --> 00:40:51.520
Fantastic.


00:40:51.520 --> 00:40:52.340
Yeah, I love this.


00:40:52.340 --> 00:40:54.600
I had not heard about this and it's glorious.


00:40:54.600 --> 00:40:57.020
- Well, wait, is there a 418?


00:40:57.020 --> 00:40:58.340
- There is. - Of course there is.


00:40:58.340 --> 00:40:59.800
- I mean, teapot.


00:40:59.800 --> 00:41:01.000
- A kitten in a teapot.


00:41:01.000 --> 00:41:02.640
- Literally inside of a teapot.


00:41:02.640 --> 00:41:07.640
All right, so I saw this joke by Breen, who is John Breen,


00:41:07.640 --> 00:41:10.700
and thought, that's really funny.


00:41:10.700 --> 00:41:14.300
What he did is he put his own personal take


00:41:14.300 --> 00:41:15.620
on what status code means,


00:41:15.620 --> 00:41:16.820
and I thought they were hilarious,


00:41:16.820 --> 00:41:19.140
but I thought, you know, let me take a shot at this as well,


00:41:19.140 --> 00:41:20.880
a little more Python focused.


00:41:20.880 --> 00:41:22.740
So I, I'll link to my tweet,


00:41:22.740 --> 00:41:25.840
I put this set of colloquial meanings


00:41:25.840 --> 00:41:27.540
of the HTV status codes.


00:41:27.540 --> 00:41:28.780
All right, you all ready for this?


00:41:28.780 --> 00:41:29.620
- Yeah.


00:41:29.620 --> 00:41:30.440
- Do it.


00:41:30.440 --> 00:41:32.260
- So, 200 is, what's up?


00:41:32.260 --> 00:41:34.260
All right. All good.


00:41:34.260 --> 00:41:36.260
201, hello creator.


00:41:36.260 --> 00:41:39.260
304, not modified or cached.


00:41:39.260 --> 00:41:41.260
Same old, same old.


00:41:41.260 --> 00:41:42.760
403, permission denied.


00:41:42.760 --> 00:41:44.260
Get off my lawn, kids.


00:41:44.260 --> 00:41:46.260
- That was my favorite.


00:41:46.260 --> 00:41:49.260
- 404 is just, there's no message.


00:41:49.260 --> 00:41:50.260
It's just not there.


00:41:50.260 --> 00:41:52.760
Not that that's the message, but it's just blank.


00:41:52.760 --> 00:41:54.760
500 is, we're bad at APIs.


00:41:54.760 --> 00:41:55.760
- A little bit. - Server error.


00:41:55.760 --> 00:41:57.760
400 is, you're bad at APIs.


00:41:57.760 --> 00:41:58.260
- Yes.


00:41:58.260 --> 00:42:01.260
- The real cardinal sin of APIs is


00:42:01.260 --> 00:42:06.060
200 but in the body there's a JSON that says error and a reason.


00:42:06.060 --> 00:42:07.060
- Oof.


00:42:07.060 --> 00:42:09.060
- 200 but with error text.


00:42:09.060 --> 00:42:10.060
We're really bad at APIs.


00:42:10.060 --> 00:42:11.060
- Yeah.


00:42:11.060 --> 00:42:16.020
- 502, we're bad at deployment or DevOps because part of the infrastructure can't get to the


00:42:16.020 --> 00:42:17.020
other part.


00:42:17.020 --> 00:42:18.620
And Brian's favorite, 418.


00:42:18.620 --> 00:42:20.220
Is it already April again?


00:42:20.220 --> 00:42:21.220
- Yeah.


00:42:21.220 --> 00:42:26.300
- Because the reason is that was actually put into the spec as an April Fool's joke and


00:42:26.300 --> 00:42:27.300
they left it.


00:42:27.300 --> 00:42:28.300
I'm a teapot.


00:42:28.300 --> 00:42:29.300
- I love that they left it.


00:42:29.300 --> 00:42:30.300
- I do too.


00:42:30.300 --> 00:42:31.640
- I do too.


00:42:31.640 --> 00:42:33.860
- It's like import this,


00:42:33.860 --> 00:42:37.060
just stuff that's fun that should just always be there.


00:42:37.060 --> 00:42:37.900
- Yeah. - Yeah.


00:42:37.900 --> 00:42:39.060
- What's the harm?


00:42:39.060 --> 00:42:39.880
What's the harm?


00:42:39.880 --> 00:42:41.520
Just leave it there.


00:42:41.520 --> 00:42:44.820
Anthony in the live stream has some feedback for you, Leah.


00:42:44.820 --> 00:42:46.620
"HTTP status codes using cats."


00:42:46.620 --> 00:42:48.280
Well, I never.


00:42:48.280 --> 00:42:51.320
- I mean, where there's internet, there is cats, no?


00:42:51.320 --> 00:42:52.340
- Oh, of course.


00:42:52.340 --> 00:42:54.580
- Why we created the internet in the first place


00:42:54.580 --> 00:42:55.880
is for cats.


00:42:55.880 --> 00:42:56.840
- Exactly.


00:42:56.840 --> 00:42:59.320
All right, well, I think that's it for our show.


00:42:59.320 --> 00:43:01.200
Brian, thanks for being here as always.


00:43:01.200 --> 00:43:02.040
Leah, thanks for joining us.


00:43:02.040 --> 00:43:02.960
- Thank you for having me.


00:43:02.960 --> 00:43:04.120
Thanks for listening, everyone.


00:43:04.120 --> 00:43:05.240
- Yeah, you bet.


00:43:05.240 --> 00:43:06.440
See y'all later. - Bye.

