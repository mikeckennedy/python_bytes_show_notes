
00:00:00.000 --> 00:00:06.340
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:06.340 --> 00:00:13.040
102 recorded October 30th 2018. I'm Michael Kennedy, and I'm Brian Okken. Hey Brian, how you doing?


00:00:13.040 --> 00:00:17.160
I'm doing great. Are you frightened to be recording this on the day before Halloween? Or is it all okay?


00:00:17.160 --> 00:00:19.520
Yeah


00:00:19.520 --> 00:00:24.440
It might release on Halloween, but I think it's still gonna be okay. Yeah, that'd be neat actually would be cool


00:00:24.440 --> 00:00:29.700
You know, what is neat is that Digital Ocean is sponsoring the show like they are all of our shows


00:00:29.700 --> 00:00:31.700
for the rest of the year, so check them out


00:00:31.700 --> 00:00:33.700
at pythonbytes.fm/digitalocean.


00:00:33.700 --> 00:00:35.700
You'll get $100 credit if you're a new user there.


00:00:35.700 --> 00:00:37.700
We'll come back and tell you more about that later,


00:00:37.700 --> 00:00:39.700
some cool stuff they've got going on.


00:00:39.700 --> 00:00:41.700
Brian, what's the first cool thing that you found?


00:00:41.700 --> 00:00:43.700
Quanticon, or Quant-e-con,


00:00:43.700 --> 00:00:45.700
however you say that.


00:00:45.700 --> 00:00:47.700
Didn't we cover, like, economics?


00:00:47.700 --> 00:00:49.700
Somebody getting a Nobel Prize in economics.


00:00:49.700 --> 00:00:51.700
Was that last episode?


00:00:51.700 --> 00:00:53.700
That was last episode, yeah.


00:00:53.700 --> 00:00:55.700
The guy who won the Nobel Prize,


00:00:55.700 --> 00:00:57.700
one of the guys who won the Nobel Prize in economics,


00:00:57.700 --> 00:01:00.360
about Jupyter as very much an advocate for it.


00:01:00.360 --> 00:01:02.420
- Yeah, and we did a shout out then saying,


00:01:02.420 --> 00:01:05.040
hey, if anybody knows other economic stuff,


00:01:05.040 --> 00:01:06.380
we'd like to hear about it.


00:01:06.380 --> 00:01:09.920
And somebody did, somebody let us know,


00:01:09.920 --> 00:01:11.500
I really should have wrote their name down,


00:01:11.500 --> 00:01:14.860
but thank you, gave us a pointer to this site


00:01:14.860 --> 00:01:19.060
called Quanticon, and it's quanticon.org.


00:01:19.060 --> 00:01:22.060
It says, "Open source code for economic modeling.


00:01:22.060 --> 00:01:25.320
"Quanticon is a NUM-focused, fiscally-sponsored project


00:01:25.320 --> 00:01:30.320
dedicated to developing documentation for modern open source computational tools for


00:01:30.320 --> 00:01:36.920
economics, econometrics, econometrics? I don't know. And decision making. Anyway, it's an


00:01:36.920 --> 00:01:42.240
educational resource for people wanting to do economics and stuff like that with Python


00:01:42.240 --> 00:01:47.000
and other programs. I guess it does Julia also. But it's got a bunch of lectures and


00:01:47.000 --> 00:01:51.880
a bunch of workshops and seminars that are taped and upcoming ones. And then some Jupyter


00:01:51.880 --> 00:01:54.140
notebooks and some cheat sheets.


00:01:54.140 --> 00:01:56.140
This is really cool what you found here.


00:01:56.140 --> 00:01:59.460
If I cared about economics, this would be a massively cool resource.


00:01:59.460 --> 00:02:04.540
Yeah, you could just sit here all weekend and learn all sorts of stuff on this.


00:02:04.540 --> 00:02:05.540
It's pretty great.


00:02:05.540 --> 00:02:09.220
Yeah, it says fiscally responsible.


00:02:09.220 --> 00:02:14.040
Looking at the bottom, it's even got Sloan Foundation support.


00:02:14.040 --> 00:02:15.040
That's pretty cool.


00:02:15.040 --> 00:02:16.820
There's a whole bunch of stuff here.


00:02:16.820 --> 00:02:17.820
Yeah, it's great.


00:02:17.820 --> 00:02:20.660
It's all part of the NumFocus thing, which is really cool.


00:02:20.660 --> 00:02:25.060
This is sort of the umbrella that sponsors things like NumPy and stuff.


00:02:25.060 --> 00:02:30.060
And this is one of the areas of open source where like legitimate money is going to these


00:02:30.060 --> 00:02:31.060
projects.


00:02:31.060 --> 00:02:36.780
Remember we covered a while back like multi-million, like $3 million going to the SciPy, NumPy


00:02:36.780 --> 00:02:39.020
world.


00:02:39.020 --> 00:02:40.700
That's really, really great.


00:02:40.700 --> 00:02:44.140
It'd be cool to see that in some other areas of Python as well, but it's great to see it


00:02:44.140 --> 00:02:45.140
here.


00:02:45.140 --> 00:02:46.140
Yeah, it's neat.


00:02:46.140 --> 00:02:47.820
And yeah, maybe I'll check it out also.


00:02:47.820 --> 00:02:52.520
Yeah, it says there's a, it's basically a high performance library.


00:02:52.520 --> 00:02:55.480
Comes in the form of Jupyter Notebooks if you want it, and


00:02:55.480 --> 00:02:57.680
it has a whole series of lectures.


00:02:57.680 --> 00:03:01.080
And what's cool is you can pick the Python version, the Julia version, and


00:03:01.080 --> 00:03:03.640
you just get started watching the lectures.


00:03:03.640 --> 00:03:04.520
It's pretty great.


00:03:04.520 --> 00:03:08.320
>> And it has an area for if you want to contribute to it,


00:03:08.320 --> 00:03:10.760
where they'd like some help, and yeah, it's good.


00:03:10.760 --> 00:03:11.880
>> Yeah, so that's a good find.


00:03:11.880 --> 00:03:12.560
I like it.


00:03:12.560 --> 00:03:14.240
I'm sure people will enjoy having it.


00:03:14.240 --> 00:03:19.680
So I think we've talked about how you structure packages in Python a lot.


00:03:19.680 --> 00:03:22.080
It's kind of one of our themes, right?


00:03:22.080 --> 00:03:23.080
Yeah.


00:03:23.080 --> 00:03:28.280
So this next one that I want to cover is about structuring Flask projects and also treating


00:03:28.280 --> 00:03:31.900
them as packages as well, which is kind of interesting.


00:03:31.900 --> 00:03:37.180
So I think Flask is one of those things where it's, it falls over itself to show you how


00:03:37.180 --> 00:03:38.720
simple it is.


00:03:38.720 --> 00:03:44.080
then it doesn't have much opinionated ways of sort of telling you now do this


00:03:44.080 --> 00:03:47.600
and that right so you're kind of left to your own devices to figure out how to


00:03:47.600 --> 00:03:52.080
structure your flask program so there's a cool article called structure a flask


00:03:52.080 --> 00:03:56.720
project and it says you know look it seems really easy to get started but


00:03:56.720 --> 00:04:00.440
when you're new like as your app grows you're gonna find you start running the


00:04:00.440 --> 00:04:05.600
challenges with circular references and other things like that so he actually


00:04:05.600 --> 00:04:10.320
the person who wrote this has a couple of different structures and you can take the


00:04:10.320 --> 00:04:13.560
ones that feel best to you and run with it.


00:04:13.560 --> 00:04:19.160
So one of it is to have like your project and then have a models folder sub package


00:04:19.160 --> 00:04:23.280
are they call them routes I think it's probably called the views or controllers or something


00:04:23.280 --> 00:04:27.100
but routes templates services, things like that.


00:04:27.100 --> 00:04:31.160
So like if you're going to have some code that sends mail for you put that in a separate


00:04:31.160 --> 00:04:35.520
thing in a services folder, don't cram that all into just one giant file which kind of


00:04:35.520 --> 00:04:39.520
flask encourages. So I really, really love it. And I think it's nice. What do you think?


00:04:39.520 --> 00:04:43.520
I do. I like it. And actually, when you structure things in packages,


00:04:43.520 --> 00:04:47.520
then you have the dot notation to separate in your code.


00:04:47.520 --> 00:04:51.520
It separates the different parts of your system a little bit better.


00:04:51.520 --> 00:04:55.520
Yeah, absolutely. The one thing I would add here is some kind of concept


00:04:55.520 --> 00:04:59.520
of a view model, which is a class whose job it is


00:04:59.520 --> 00:05:03.520
to exchange the data between the HTML template and the


00:05:03.520 --> 00:05:06.520
the viewer controller method and just do all that validation


00:05:06.520 --> 00:05:09.600
instead of trying to cram that into your view.


00:05:09.600 --> 00:05:11.400
Usually the validation is more code


00:05:11.400 --> 00:05:13.680
than the operation you're trying to do with the data anyway.


00:05:13.680 --> 00:05:16.320
So I'll throw that one in there.


00:05:16.320 --> 00:05:17.480
And those are easier to test, right?


00:05:17.480 --> 00:05:19.360
You test your validation separate.


00:05:19.360 --> 00:05:21.160
Yeah, so I threw this little question for you.


00:05:21.160 --> 00:05:23.280
I see you already caught it quickly.


00:05:23.280 --> 00:05:24.880
What's missing from this structure?


00:05:24.880 --> 00:05:25.720
- Tests.


00:05:25.720 --> 00:05:27.480
- Yeah, there's no tests in this layout.


00:05:27.480 --> 00:05:29.260
I mean, there is a dot, dot, dot somewhere.


00:05:29.260 --> 00:05:31.040
So maybe in the dot, dot, dot, there's some tests,


00:05:31.040 --> 00:05:32.160
but probably not.


00:05:32.160 --> 00:05:34.680
- Also, this is sort of a zoom in on the project.


00:05:34.680 --> 00:05:37.200
And in a lot of projects that I've seen


00:05:37.200 --> 00:05:39.360
that are Flask applications,


00:05:39.360 --> 00:05:42.120
there's a test directory like at the top level.


00:05:42.120 --> 00:05:45.160
So it might be parallel to this top level project.


00:05:45.160 --> 00:05:47.640
- Right, right, right, cool.


00:05:47.640 --> 00:05:50.280
Yeah, there's another structure that they propose


00:05:50.280 --> 00:05:54.040
as an alternative called the app-based structure.


00:05:54.040 --> 00:05:57.200
And it takes all the models, the view methods,


00:05:57.200 --> 00:05:58.280
the templates and everything


00:05:58.280 --> 00:05:59.960
and puts it under the different categories.


00:05:59.960 --> 00:06:02.140
So maybe you've got a blog sub part of your app,


00:06:02.140 --> 00:06:04.920
you've got authentication, you've got a store,


00:06:04.920 --> 00:06:07.160
and it sort of replicates this structure


00:06:07.160 --> 00:06:08.240
underneath all of those.


00:06:08.240 --> 00:06:09.640
I don't know how I feel about that.


00:06:09.640 --> 00:06:11.200
I kind of like the first one better personally,


00:06:11.200 --> 00:06:13.360
but it's more Django-like.


00:06:13.360 --> 00:06:15.000
There's a couple of options here,


00:06:15.000 --> 00:06:16.640
which I thought was a nice trade off


00:06:16.640 --> 00:06:18.880
to show how different people were doing it.


00:06:18.880 --> 00:06:20.960
And then also I would like to just give a shout out


00:06:20.960 --> 00:06:23.680
to Flask Blueprints, which is part of Flask.


00:06:23.680 --> 00:06:25.960
This is nothing like extra, it's just built in.


00:06:25.960 --> 00:06:29.120
But it's kind of challenging the way Flask works


00:06:29.120 --> 00:06:34.120
to easily and clearly share or spread your view code


00:06:34.120 --> 00:06:38.520
across different files so it's not into one giant file.


00:06:38.520 --> 00:06:41.480
And Flask Blueprints is really a great way to break


00:06:41.480 --> 00:06:43.460
like one big file with all your view methods up


00:06:43.460 --> 00:06:45.720
into a whole bunch of little ones that are grouped


00:06:45.720 --> 00:06:48.440
by what they do, they're easier to test


00:06:48.440 --> 00:06:49.880
'cause they're more focused, things like that.


00:06:49.880 --> 00:06:52.720
- And is this, the Blueprints something you could use


00:06:52.720 --> 00:06:55.480
with either any of these project structures?


00:06:55.480 --> 00:06:56.320
- Yeah, I think so.


00:06:56.320 --> 00:06:57.140
- Okay.


00:06:57.140 --> 00:06:58.160
- It just lets you take one big file.


00:06:58.160 --> 00:06:59.600
Instead of trying to figure out how to,


00:06:59.600 --> 00:07:02.680
you know, in Flask you create the app


00:07:02.680 --> 00:07:05.800
dynamically at run time, then you say app.route.


00:07:05.800 --> 00:07:08.000
That makes it tricky to share that thing


00:07:08.000 --> 00:07:10.400
without being circular or things like that.


00:07:10.400 --> 00:07:12.440
So this lets you do the reverse.


00:07:12.440 --> 00:07:15.760
You create a blueprint for each of your separate files


00:07:15.760 --> 00:07:17.520
and you say blueprint.route,


00:07:17.520 --> 00:07:19.880
and then you just register the blueprints with the app


00:07:19.880 --> 00:07:21.200
at the main startup and you're all good.


00:07:21.200 --> 00:07:22.040
- Oh, nice.


00:07:22.040 --> 00:07:22.860
- It's a really nice thing.


00:07:22.860 --> 00:07:24.880
I haven't seen it used a lot, but it's great.


00:07:24.880 --> 00:07:26.480
I learned it from the court guys.


00:07:26.480 --> 00:07:27.960
All right, so anyway,


00:07:27.960 --> 00:07:31.120
I think that puts a nice structure on the Flask world,


00:07:31.120 --> 00:07:33.040
and people should check that out if they're doing Flask.


00:07:33.040 --> 00:07:34.120
What you got next for us?


00:07:34.120 --> 00:07:37.360
- I've got an article from Trey Hunter


00:07:37.360 --> 00:07:40.860
that's overusing lambda expressions in Python.


00:07:40.860 --> 00:07:44.040
And I actually kind of love lambda expressions,


00:07:44.040 --> 00:07:47.480
however, I've, so where I often use them


00:07:47.480 --> 00:07:51.020
is in like ID functions for test cases.


00:07:51.020 --> 00:07:52.960
So if I've got a test parameterization,


00:07:52.960 --> 00:07:55.480
you can rewrite the ID function


00:07:55.480 --> 00:07:57.680
to take all the parameter data


00:07:57.680 --> 00:08:02.560
and spit out an easier to read string.


00:08:02.560 --> 00:08:07.160
And this is something where lambda expressions


00:08:07.160 --> 00:08:09.840
are often used, however, I do have some of them


00:08:09.840 --> 00:08:12.080
that are kind of getting big and they're hard to read.


00:08:12.080 --> 00:08:16.480
So this is a good time to read Trey's article.


00:08:16.480 --> 00:08:19.380
So it starts out talking about some of the differences


00:08:19.380 --> 00:08:23.280
between lambda expressions and just defined functions.


00:08:23.280 --> 00:08:25.640
And some of the things, I guess I didn't realize,


00:08:25.640 --> 00:08:27.240
I mean, it's obvious if you think about it,


00:08:27.240 --> 00:08:28.620
but I didn't really think about it,


00:08:28.620 --> 00:08:31.240
is that one of the things is there's no docstring.


00:08:31.240 --> 00:08:33.780
You can't have a docstring for a Lambda expression.


00:08:33.780 --> 00:08:37.520
And the representation also is a little weird.


00:08:37.520 --> 00:08:38.780
So if you're stepping around,


00:08:38.780 --> 00:08:42.200
or if you assign a Lambda expression to a variable,


00:08:42.200 --> 00:08:44.200
or if it gets passed in somewhere,


00:08:44.200 --> 00:08:47.160
the value of it is going to be something ugly


00:08:47.160 --> 00:08:51.060
that if you're debugging, it's going to look bad.


00:08:51.060 --> 00:08:53.160
And you might have trouble figuring out


00:08:53.160 --> 00:08:54.240
where that came from.


00:08:54.240 --> 00:08:55.720
Whereas if you just define a function,


00:08:55.720 --> 00:08:57.560
it's easier to figure out.


00:08:57.560 --> 00:08:59.720
So basically this is an argument on


00:08:59.720 --> 00:09:03.760
that it doesn't really save you a lot in a lot of places


00:09:03.760 --> 00:09:08.000
and perhaps even just use normal functions.


00:09:08.000 --> 00:09:12.520
Then the other thing is he talks about some misuses


00:09:12.520 --> 00:09:15.000
and some of them are, I've seen this before,


00:09:15.000 --> 00:09:17.400
is having a lambda expression


00:09:17.400 --> 00:09:19.920
calling a single function with a single argument.


00:09:19.920 --> 00:09:22.400
Well, that function that you're calling,


00:09:22.400 --> 00:09:25.600
you could just pass that instead of the lambda expression


00:09:25.600 --> 00:09:26.600
that you're passing.


00:09:26.600 --> 00:09:27.600
Right.


00:09:27.600 --> 00:09:32.760
Like so, for example, if you have a sort function and you'd like to take the number and sort


00:09:32.760 --> 00:09:36.920
by the absolute value of it, you could have a lambda that takes the n and it says returns


00:09:36.920 --> 00:09:41.280
a b a b s of n, or you could just pass a b s.


00:09:41.280 --> 00:09:42.280
Right?


00:09:42.280 --> 00:09:43.280
And this is basically the same thing.


00:09:43.280 --> 00:09:46.940
You just put a layer of function calls in between them, make them slower.


00:09:46.940 --> 00:09:52.120
And then actually, I didn't know about this module before, so I'm glad I read this.


00:09:52.120 --> 00:09:57.800
little custom lambda expressions for operators that happen to exist in the operator module.


00:09:57.800 --> 00:10:03.000
There's an operator module that comes with Python and it has a whole bunch of things


00:10:03.000 --> 00:10:08.520
that you might have wanted to create a lambda expression for.


00:10:08.520 --> 00:10:12.520
Yeah, this is interesting. I didn't know about this either, but you can say like operator.add,


00:10:12.520 --> 00:10:17.160
operator.truth, and so on. Yeah, these are supposed to be high performance,


00:10:17.160 --> 00:10:18.920
little efficient functions. Quite cool.


00:10:18.920 --> 00:10:24.920
The last thing is, I've seen this before also, is used to be using lambda expressions for map and filter,


00:10:24.920 --> 00:10:29.920
but just use list comprehensions instead, nor other kinds of comprehensions.


00:10:29.920 --> 00:10:34.920
Yeah, that's a good one. Certainly the comprehensions, set comprehension, dictionary comprehensions,


00:10:34.920 --> 00:10:39.920
all that kind of stuff, is better than a lambda function, generally, right?


00:10:39.920 --> 00:10:40.920
Yeah, it's more readable.


00:10:40.920 --> 00:10:44.920
I think they might even be more efficient in terms of performance. I'm not 100% sure, but I think so.


00:10:44.920 --> 00:10:47.920
But anyway, these are all good things.


00:10:47.920 --> 00:10:50.920
Yeah, and I think there's a lot of good guidance here.


00:10:50.920 --> 00:10:53.920
You know, for example, it says you can't have a docstring.


00:10:53.920 --> 00:10:58.920
Well, if your lambda expression requires a docstring, you're probably doing it wrong, right?


00:10:58.920 --> 00:10:59.920
It's probably too complicated.


00:10:59.920 --> 00:11:04.920
The value of the lambda is I'm going to take such ridiculously simple code


00:11:04.920 --> 00:11:08.920
instead of moving it way far somewhere else into a function that then I have to document


00:11:08.920 --> 00:11:09.920
so I know what the heck it does.


00:11:09.920 --> 00:11:11.920
I could just put it right here, right?


00:11:11.920 --> 00:11:14.920
Like, you know, ABS of a number type of thing.


00:11:14.920 --> 00:11:18.420
I do think, I personally love lambda expressions.


00:11:18.420 --> 00:11:21.020
I feel like Trey's a little harsh on them.


00:11:21.020 --> 00:11:25.420
I find that I more often see code that should be using a lambda,


00:11:25.420 --> 00:11:27.920
than that is overusing lambdas.


00:11:27.920 --> 00:11:30.920
So, grain of salt there, but I think there's a lot of good advice too.


00:11:30.920 --> 00:11:35.220
Yeah, I guess there's sometimes where you see a little tiny function


00:11:35.220 --> 00:11:38.320
that is only used once, and it's small,


00:11:38.320 --> 00:11:40.820
and maybe it could have just been a lambda.


00:11:40.820 --> 00:11:43.420
Right, it's probably badly named and not documented either, so.


00:11:43.420 --> 00:11:48.020
Yeah, docstring, what docstring?


00:11:48.020 --> 00:11:50.020
Exactly, exactly.


00:11:50.020 --> 00:11:52.020
So anyway, yeah, people check it out.


00:11:52.020 --> 00:11:54.620
It's a good article. It's kind of a long one. It really is in-depth.


00:11:54.620 --> 00:11:57.220
We've got a couple of good solid long articles


00:11:57.220 --> 00:11:58.220
covered this week.


00:11:58.220 --> 00:12:02.620
Now before we get on to another one that I think is really interesting because


00:12:02.620 --> 00:12:05.020
it introduces a lot of


00:12:05.020 --> 00:12:07.620
structure around features introduced two


00:12:07.620 --> 00:12:09.620
versions ago, two dot versions.


00:12:09.620 --> 00:12:12.020
So we'll get to that, but before we do,


00:12:12.020 --> 00:12:14.220
I just want to tell everyone about DigitalOcean.


00:12:14.220 --> 00:12:15.300
If you're not familiar with them,


00:12:15.300 --> 00:12:18.100
check them out at pythonbysetfm/digitalocean.


00:12:18.100 --> 00:12:20.220
They've got all sorts of cool stuff going on.


00:12:20.220 --> 00:12:22.020
One of the things that I want to highlight this time


00:12:22.020 --> 00:12:23.700
that's cool, I've talked about a few times before,


00:12:23.700 --> 00:12:25.980
is the ability to bring your own custom images.


00:12:25.980 --> 00:12:27.620
So you can go to DigitalOcean and create a droplet,


00:12:27.620 --> 00:12:29.540
that's what they call their virtual machines,


00:12:29.540 --> 00:12:34.540
and say I want Ubuntu 18 or CoreOS or whatever,


00:12:34.540 --> 00:12:36.140
and you get those stock images.


00:12:36.140 --> 00:12:38.060
They even have little app, pre-built apps,


00:12:38.060 --> 00:12:39.340
like give me a MongoDB server


00:12:39.340 --> 00:12:42.180
or give me a ghost server, things like that.


00:12:42.180 --> 00:12:44.440
But if you want exactly the machine


00:12:44.440 --> 00:12:45.440
that you'd like to run there,


00:12:45.440 --> 00:12:46.580
and you wanna create that locally,


00:12:46.580 --> 00:12:49.020
you can upload your own images, right?


00:12:49.020 --> 00:12:50.260
And that's super easy.


00:12:50.260 --> 00:12:51.940
Once you've registered them and uploaded them,


00:12:51.940 --> 00:12:55.140
you can just click start my own image and off it goes.


00:12:55.140 --> 00:12:55.980
It's really cool.


00:12:55.980 --> 00:12:58.520
So check them out.


00:12:58.520 --> 00:12:59.940
They're doing us well,


00:12:59.940 --> 00:13:02.460
and I'm sure they'll do you well as well.


00:13:02.460 --> 00:13:05.100
So if you wrote some code, Brian,


00:13:05.100 --> 00:13:09.300
and it used the word async, all lowercase,


00:13:09.300 --> 00:13:13.300
and that was working just fine in Python 3.4


00:13:13.300 --> 00:13:15.540
and then Python 3.5 comes along


00:13:15.540 --> 00:13:19.780
and it introduces two new keywords, async and await.


00:13:19.780 --> 00:13:20.980
Do you think there's gonna be some problem


00:13:20.980 --> 00:13:22.780
with your 3.5 code?


00:13:22.780 --> 00:13:24.080
- Yeah, probably.


00:13:24.080 --> 00:13:25.820
- Well, there should be, right?


00:13:25.820 --> 00:13:27.620
Like there's a new keyword


00:13:27.620 --> 00:13:30.100
and you can't use the word class.


00:13:30.100 --> 00:13:33.420
You can't use other core keywords, right?


00:13:33.420 --> 00:13:36.560
You can't use def as like a variable name,


00:13:36.560 --> 00:13:38.340
but it turns out for whatever reason,


00:13:38.340 --> 00:13:40.080
I don't know really why they chose this,


00:13:40.080 --> 00:13:42.260
but async and await were valid,


00:13:42.260 --> 00:13:47.660
like parameter names and stuff in Python 3.5 and 3.6,


00:13:47.660 --> 00:13:49.620
but they're not in Python 3.7.


00:13:49.620 --> 00:13:50.460
- Oh, okay.


00:13:50.460 --> 00:13:53.860
- So if you've got some sort of package


00:13:53.860 --> 00:13:57.460
and it uses the word async for a variable


00:13:57.460 --> 00:14:00.380
or a parameter or something like that,


00:14:00.380 --> 00:14:02.460
you're all of a sudden going to have your package


00:14:02.460 --> 00:14:05.460
or the one you're using no longer running.


00:14:05.460 --> 00:14:06.300
That's big, right?


00:14:06.300 --> 00:14:08.140
- Yeah, that's not good.


00:14:08.140 --> 00:14:10.820
So there's actually, I saw this article,


00:14:10.820 --> 00:14:14.340
this is from Chris Medina called AsyncIO in Python 3.7,


00:14:14.340 --> 00:14:15.500
and I thought, oh, okay, well,


00:14:15.500 --> 00:14:17.380
it's gonna talk about this keyword thing,


00:14:17.380 --> 00:14:19.500
maybe a little bit something else.


00:14:19.500 --> 00:14:21.740
Oh no, this is like a series,


00:14:21.740 --> 00:14:24.740
there are so many changes to AsyncIO


00:14:24.740 --> 00:14:27.180
and Async and Await in Python 3.7,


00:14:27.180 --> 00:14:29.780
like pages and pages of changes.


00:14:29.780 --> 00:14:32.460
So there's really quite a bit of new stuff,


00:14:32.460 --> 00:14:35.020
and if you cared all about this, you should go check it out.


00:14:35.020 --> 00:14:37.300
And you might not care at all about it,


00:14:37.300 --> 00:14:44.300
but you still maybe should check it out at least for the fact that like parameters called async and parameters called await no longer work.


00:14:44.300 --> 00:14:46.300
And if you have a library like that, it won't run on 3.7.


00:14:46.300 --> 00:14:49.300
That's, yeah, it's definitely concerning.


00:14:49.300 --> 00:14:54.300
Yeah. So I kind of feel like this maybe should have been the way it was done when 3.5,


00:14:54.300 --> 00:14:58.300
like soon as those keywords appear in the language, they should be officially keywords.


00:14:58.300 --> 00:15:01.300
But anyway, here we are three years later.


00:15:01.300 --> 00:15:05.300
Now, async and await are enforced as keywords, the reserved words.


00:15:05.300 --> 00:15:10.980
Okay, so I definitely want to, we definitely want to heavily test your applications as


00:15:10.980 --> 00:15:11.980
you shift to 3.7.


00:15:11.980 --> 00:15:15.180
Yeah, maybe using something like Doxer or something like that, right?


00:15:15.180 --> 00:15:16.180
Test across the different versions.


00:15:16.180 --> 00:15:18.940
Yeah, that's a great idea.


00:15:18.940 --> 00:15:21.820
So there's a couple of other things I'll go through really quick here.


00:15:21.820 --> 00:15:24.100
Like I said, check out the article, there's tons there.


00:15:24.100 --> 00:15:31.660
One of the challenges with async IO is it's like simulates parallelism by slicing up all


00:15:31.660 --> 00:15:35.840
these different methods and running them, running the other ones while one of


00:15:35.840 --> 00:15:40.420
them is waiting. But what's interesting is you can no longer have thread local


00:15:40.420 --> 00:15:43.500
variables because even though it feels like you're doing concurrency, it's


00:15:43.500 --> 00:15:47.740
actually all the same thread. So there's no mechanism to distinguish across


00:15:47.740 --> 00:15:51.340
threads, right? That's sort of how Flask works, for example. They've got


00:15:51.340 --> 00:15:57.380
the request as a thread local variable, but it doesn't work in async I/O. So


00:15:57.380 --> 00:16:00.420
So there's this new concept called context variables


00:16:00.420 --> 00:16:03.860
that are like thread local variables, but for coroutines.


00:16:03.860 --> 00:16:06.460
So they can have different values on the same thread,


00:16:06.460 --> 00:16:08.020
which is kind of crazy.


00:16:08.020 --> 00:16:10.180
There's a bunch of stuff around how that works.


00:16:10.180 --> 00:16:12.420
There's a new asyncio.run function.


00:16:12.420 --> 00:16:14.860
You just have to get a hold of the loop and call that.


00:16:14.860 --> 00:16:19.500
Simpler task management, simpler event loop management.


00:16:19.500 --> 00:16:22.700
You can call asyncio.getrunningloop


00:16:22.700 --> 00:16:25.020
from within the library to see if you're already


00:16:25.020 --> 00:16:27.360
being run asynchronously or if you have to kick that stuff


00:16:27.360 --> 00:16:33.780
So you can start off a cool decorator to turn async functions into async context


00:16:33.780 --> 00:16:34.440
managers.


00:16:34.440 --> 00:16:38.220
Remember, context managers are things you can put in a with statement, right?


00:16:38.220 --> 00:16:41.340
Like with open file name as fin, right?


00:16:41.340 --> 00:16:46.860
There's a new part of the language that'll let you say async with, so it


00:16:46.860 --> 00:16:52.460
will like allow concurrency and you sort of do waiting type of work on those


00:16:52.460 --> 00:16:54.060
context manager enters.


00:16:54.060 --> 00:16:55.900
Now there's a really cool decorator.


00:16:55.900 --> 00:16:59.580
to your function and it automatically implements this


00:16:59.580 --> 00:17:03.300
asyncable, async enabled context manager,


00:17:03.300 --> 00:17:04.220
which is pretty awesome


00:17:04.220 --> 00:17:06.220
'cause that sounds complicated, doesn't it?


00:17:06.220 --> 00:17:07.060
(laughing)


00:17:07.060 --> 00:17:07.880
- Yeah.


00:17:07.880 --> 00:17:10.420
- And then there's a bunch of performance improvements.


00:17:10.420 --> 00:17:13.620
Async.io get event loop is 15 times faster.


00:17:13.620 --> 00:17:14.860
That's good.


00:17:14.860 --> 00:17:17.540
Gathers 15%, sleep is twice as fast


00:17:17.540 --> 00:17:19.180
for not really sleeping.


00:17:19.180 --> 00:17:21.300
Future is faster, all sorts of good stuff.


00:17:21.300 --> 00:17:22.260
There's tons and tons here.


00:17:22.260 --> 00:17:23.860
So go check out Chris's article.


00:17:24.780 --> 00:17:28.980
I'm just blown away at how much new stuff async.io got in 3.7, actually,


00:17:28.980 --> 00:17:30.620
when you see it all put together like that.


00:17:30.620 --> 00:17:31.260
Yeah.


00:17:31.260 --> 00:17:31.540
Wow.


00:17:31.540 --> 00:17:32.620
That's, that's great.


00:17:32.620 --> 00:17:34.580
I like, I like seeing it all together like that.


00:17:34.580 --> 00:17:34.820
Yeah.


00:17:34.820 --> 00:17:36.900
It's like, wow, there's still a lot of stuff happening here.


00:17:36.900 --> 00:17:37.660
That's, that's good.


00:17:37.660 --> 00:17:41.860
I feel like we should say, you know, thanks to all the people that work on it.


00:17:41.860 --> 00:17:42.740
That'd be awesome.


00:17:42.740 --> 00:17:43.660
Yeah.


00:17:43.660 --> 00:17:44.700
Uh, I think we should.


00:17:44.700 --> 00:17:46.700
Would like with an email or how do you propose this?


00:17:46.700 --> 00:17:49.980
Uh, well, there's a, there's a proposal in pip.


00:17:50.100 --> 00:17:55.100
So this is a proposal from, oh, Brian Skin.


00:17:55.100 --> 00:17:58.140
- Brian Skin, yep.


00:17:58.140 --> 00:18:02.220
- Yep, and he sent us a heads up on this,


00:18:02.220 --> 00:18:04.400
that he submitted it just this morning.


00:18:04.400 --> 00:18:09.060
And it's a proposal to add a subcommand thank to pip.


00:18:09.060 --> 00:18:09.900
So that--


00:18:09.900 --> 00:18:12.740
- So you got pip install, you got pip uninstall.


00:18:12.740 --> 00:18:16.020
And so another one would be like pip thank requests,


00:18:16.020 --> 00:18:17.940
or pip thank SQLAlchemy, something like that?


00:18:17.940 --> 00:18:23.940
Yeah, this other proposal is to add that and then also to change install.


00:18:23.940 --> 00:18:30.440
So the install, if you install a bunch of stuff at the end after everything's installed,


00:18:30.440 --> 00:18:35.440
if there's the right metadata in the modules that you've installed,


00:18:35.440 --> 00:18:39.440
add a little information that says, "Hey, if you'd like to thank the contributors,


00:18:39.440 --> 00:18:46.440
run pip thank on pip thank requests or pip thank something."


00:18:46.440 --> 00:18:51.580
The idea is to look in the metadata for the project for URLs,


00:18:51.580 --> 00:18:58.740
specific like thanks tag in the metadata or donate possibly.


00:18:58.740 --> 00:19:03.140
There's a little bit in flux as to what would be in there.


00:19:03.140 --> 00:19:05.140
But there's already some information apparently,


00:19:05.140 --> 00:19:06.940
it's all the info is there,


00:19:06.940 --> 00:19:10.780
a lot of it is, and there's a way to possibly just print that out and say,


00:19:10.780 --> 00:19:11.860
"Hey, if you want to say thanks,


00:19:11.860 --> 00:19:13.100
this is how you can do it."


00:19:13.100 --> 00:19:14.520
I think it's a simple thing.


00:19:14.520 --> 00:19:16.320
It's not going to be very intrusive.


00:19:16.320 --> 00:19:17.640
And I think it's cool.


00:19:17.640 --> 00:19:18.480
- I think it's cool.


00:19:18.480 --> 00:19:19.800
There's a lot of conversation happening


00:19:19.800 --> 00:19:20.760
on GitHub around this.


00:19:20.760 --> 00:19:21.600
I like it.


00:19:21.600 --> 00:19:23.760
Well done, Brian, for coming up with,


00:19:23.760 --> 00:19:25.640
Brian Skinn, for coming up with this idea


00:19:25.640 --> 00:19:27.800
and actually putting it out there as a proposal.


00:19:27.800 --> 00:19:28.640
- Yeah.


00:19:28.640 --> 00:19:30.720
And I don't know if it'll happen, but why not?


00:19:30.720 --> 00:19:32.280
There's so much negativity in the world.


00:19:32.280 --> 00:19:34.760
A little bit of positivity is a good thing.


00:19:34.760 --> 00:19:35.600
- Yeah, I agree.


00:19:35.600 --> 00:19:36.420
Yeah, quite cool.


00:19:36.420 --> 00:19:40.760
So I feel like I kind of snuck this last item from you,


00:19:40.760 --> 00:19:44.060
'cause this one belongs in your realm, but I grabbed it.


00:19:44.060 --> 00:19:46.940
So this one is an article, a booklet,


00:19:46.940 --> 00:19:47.980
should I call it a booklet?


00:19:47.980 --> 00:19:49.580
I don't know, I'll tell you why in a second,


00:19:49.580 --> 00:19:52.460
on real Python called Getting Started with Testing


00:19:52.460 --> 00:19:55.640
in Python by Anthony Shaw, friend of the show.


00:19:55.640 --> 00:20:00.060
So this is not just a little quick tutorial


00:20:00.060 --> 00:20:01.260
on getting started with testing.


00:20:01.260 --> 00:20:04.500
This is like a little bit of a mini book type of thing.


00:20:04.500 --> 00:20:06.220
I threw it into Instapaper and Pocket


00:20:06.220 --> 00:20:08.360
and they both said it's a 33 minute read.


00:20:08.360 --> 00:20:10.540
So that's a serious little write up.


00:20:10.540 --> 00:20:13.780
- Yeah, yeah, it's an interesting read.


00:20:13.780 --> 00:20:16.400
I heard about this before it went through.


00:20:16.400 --> 00:20:18.340
And it's sort of, one of the things that highlights


00:20:18.340 --> 00:20:23.340
is the, some of the process around real Python articles.


00:20:23.340 --> 00:20:25.180
They treat it like a magazine


00:20:25.180 --> 00:20:27.260
and there's a review process and stuff.


00:20:27.260 --> 00:20:28.700
So that's pretty cool.


00:20:28.700 --> 00:20:30.380
>>Yeah, Dan Bader and crew over there


00:20:30.380 --> 00:20:32.980
definitely creating some serious articles


00:20:32.980 --> 00:20:35.220
and things over at real Python.


00:20:35.220 --> 00:20:36.660
And so this is Anthony Shaw's.


00:20:36.660 --> 00:20:38.580
I'm just going to touch on some of the topics


00:20:38.580 --> 00:20:39.940
covered in there because like I said,


00:20:39.940 --> 00:20:42.740
33 minutes, it's like, I can't really go into


00:20:42.740 --> 00:20:46.020
too much detail, but it covers things like automated versus manual testing.


00:20:46.020 --> 00:20:50.740
It's really for people getting started, I think, but it's pretty interesting for everyone.


00:20:50.740 --> 00:20:52.460
Unit test versus integration tests.


00:20:52.460 --> 00:20:58.420
It does a comparison of unit tests, nose and nose two, why there's actually two noses,


00:20:58.420 --> 00:21:00.140
and pytest and which one you should use.


00:21:00.140 --> 00:21:01.260
Do you have an opinion on that, Brian?


00:21:01.260 --> 00:21:03.100
You care about which one you use?


00:21:03.100 --> 00:21:05.800
Yeah, use pytest.


00:21:05.800 --> 00:21:10.780
It also talks about things like writing your first test, where to write it, how to structure


00:21:10.780 --> 00:21:14.040
how to write assertions, the dangers of side effects,


00:21:14.040 --> 00:21:15.900
testing in PyCharm and VS Code.


00:21:15.900 --> 00:21:17.060
PyCharm is pretty straightforward.


00:21:17.060 --> 00:21:19.660
VS Code has that command palette thing,


00:21:19.660 --> 00:21:21.360
which is cool, but you gotta figure out how to do it,


00:21:21.360 --> 00:21:22.220
so that's kinda nice.


00:21:22.220 --> 00:21:25.020
It also talks about testing web frameworks


00:21:25.020 --> 00:21:27.620
like Django and Flask, advanced testing scenarios,


00:21:27.620 --> 00:21:29.860
and even testing for security flaws in your app.


00:21:29.860 --> 00:21:31.340
So there's a bunch of cool stuff here.


00:21:31.340 --> 00:21:34.620
Like the testing security flaws, that's new to me.


00:21:34.620 --> 00:21:36.900
So yeah, I don't think it's really that much


00:21:36.900 --> 00:21:37.780
of a beginner article.


00:21:37.780 --> 00:21:38.980
It just starts at the beginning.


00:21:38.980 --> 00:21:42.700
- Well, okay, yeah, but it's a lot of these,


00:21:42.700 --> 00:21:44.880
I like that he touches on a lot of this stuff,


00:21:44.880 --> 00:21:48.380
but a lot of these things are touches on them.


00:21:48.380 --> 00:21:51.320
There's not, like testing some of the web applications,


00:21:51.320 --> 00:21:54.580
it's kind of a pointer to, yes, you can do it in here,


00:21:54.580 --> 00:21:56.500
go read about it in other places.


00:21:56.500 --> 00:21:57.820
But I do like it.


00:21:57.820 --> 00:22:00.140
And like you said, the security flaws,


00:22:00.140 --> 00:22:01.700
that needs highlighted more,


00:22:01.700 --> 00:22:03.100
and I think that's a great thing


00:22:03.100 --> 00:22:05.420
to add to people's tool belt.


00:22:05.420 --> 00:22:07.260
- Yeah, just to know that this is the way


00:22:07.260 --> 00:22:08.100
you can test for it, right?


00:22:08.100 --> 00:22:09.860
there's even tools and whatnot.


00:22:09.860 --> 00:22:12.180
So are you telling me that this could be a book?


00:22:12.180 --> 00:22:15.300
- Yeah, I think it could,


00:22:15.300 --> 00:22:17.540
but I think it would be a lot bigger book.


00:22:17.540 --> 00:22:18.380
Yeah, somebody should write it.


00:22:18.380 --> 00:22:19.200
- No, I'm just kidding.


00:22:19.200 --> 00:22:20.220
People should check out your book


00:22:20.220 --> 00:22:22.540
if they want more than 33 minutes worth.


00:22:22.540 --> 00:22:23.940
- I'd also like to add,


00:22:23.940 --> 00:22:26.340
so it does talk about PyCharm and VS Code,


00:22:26.340 --> 00:22:28.020
and it's a little bit,


00:22:28.020 --> 00:22:29.480
I don't see a lot of opinion,


00:22:29.480 --> 00:22:33.140
but the testing story in PyCharm right now


00:22:33.140 --> 00:22:34.080
is a lot stronger,


00:22:34.080 --> 00:22:37.780
and I'm not just saying that because I like PyCharm.


00:22:37.780 --> 00:22:38.620
It's just true.


00:22:38.620 --> 00:22:41.900
The VS Code team has something on there.


00:22:41.900 --> 00:22:43.580
I think they're going to address


00:22:43.580 --> 00:22:46.600
some of the testing shortfalls in the upcoming years,


00:22:46.600 --> 00:22:48.040
and I hope they do.


00:22:48.040 --> 00:22:51.520
But for right now, if you want to test within an IDE,


00:22:51.520 --> 00:22:52.360
do it in PyCharm.


00:22:52.360 --> 00:22:54.740
- Yeah, it's definitely nice in PyCharm.


00:22:54.740 --> 00:22:57.020
Awesome, all right, so those are our main items.


00:22:57.020 --> 00:22:58.560
I have a few other things I want to throw in here,


00:22:58.560 --> 00:23:01.520
'cause I don't feel like they really


00:23:01.520 --> 00:23:03.880
warrant a whole thing to be covered, but they're fun.


00:23:03.880 --> 00:23:05.280
Anything you want to cover first, Brian?


00:23:05.280 --> 00:23:07.540
- I will just say that, speaking of testing,


00:23:07.540 --> 00:23:11.340
I'm ramping up testing code episodes


00:23:11.340 --> 00:23:15.020
and doing them actually more frequent than one a week,


00:23:15.020 --> 00:23:16.260
not up to two a week,


00:23:16.260 --> 00:23:18.820
but I'm gonna get a lot of episodes out.


00:23:18.820 --> 00:23:23.820
And there's a couple recent ones on flaky tests.


00:23:23.820 --> 00:23:25.460
- Yeah, speaking of Anthony Shaw.


00:23:25.460 --> 00:23:26.860
(laughing)


00:23:26.860 --> 00:23:31.260
- Yeah, Anthony Shaw's there talking to me with flaky tests.


00:23:31.260 --> 00:23:34.620
And then I talked with the Automation Panda


00:23:34.620 --> 00:23:36.580
about feature tests.


00:23:36.580 --> 00:23:37.580
- Yeah, that's really cool.


00:23:37.580 --> 00:23:39.220
Great to hear you doing more.


00:23:39.220 --> 00:23:40.220
I've seen those coming out.


00:23:40.220 --> 00:23:42.660
All right, I have a few that I would like to throw out here,


00:23:42.660 --> 00:23:43.740
a few quick, simple ones.


00:23:43.740 --> 00:23:48.100
First is just this fun project from Vicky Boykus.


00:23:48.100 --> 00:23:49.660
See where it says hack your name in our notes, Brian?


00:23:49.660 --> 00:23:50.660
Click that.


00:23:50.660 --> 00:23:54.380
So the idea here is that you've got a startup,


00:23:54.380 --> 00:23:56.660
you're trying to come up with a name,


00:23:56.660 --> 00:23:58.980
and it seems like there's all these silly names


00:23:58.980 --> 00:24:01.180
that are often talked about on Hacker News,


00:24:01.180 --> 00:24:02.260
which is from Y Combinator.


00:24:02.260 --> 00:24:06.180
So why not just take the words from Hacker News,


00:24:06.180 --> 00:24:09.100
break them into syllables and generate new words,


00:24:09.100 --> 00:24:12.260
which can be the name of your new cool startup.


00:24:12.260 --> 00:24:15.260
And so you go to this URL, hackyourname.com,


00:24:15.260 --> 00:24:19.220
and it has just one big button,


00:24:19.220 --> 00:24:21.020
and it says, "Pivot me, bro."


00:24:21.020 --> 00:24:24.980
So I get guised back.


00:24:24.980 --> 00:24:26.340
Let's see, if you click it a few times,


00:24:26.340 --> 00:24:28.140
you'll get some pretty good ones.


00:24:28.140 --> 00:24:29.060
- I got your chair.


00:24:29.060 --> 00:24:31.020
- Yeah, I had Shy Fox the other day.


00:24:31.020 --> 00:24:32.700
I'm pretty happy with Shy Fox.


00:24:32.700 --> 00:24:33.980
So why is this interesting?


00:24:33.980 --> 00:24:35.220
I mean, it's funny, obviously,


00:24:35.220 --> 00:24:38.240
but it also is a open source project


00:24:38.240 --> 00:24:41.600
that is written in Python that does all the download


00:24:41.600 --> 00:24:44.960
from Hacker News and does all the work in words and stuff.


00:24:44.960 --> 00:24:46.320
So it's kind of cool, you can check it out.


00:24:46.320 --> 00:24:47.920
I'll link to the GitHub repo as well.


00:24:47.920 --> 00:24:49.520
- Oh, so it's a good example project.


00:24:49.520 --> 00:24:50.880
- Yeah, exactly, it's a pretty simple one,


00:24:50.880 --> 00:24:52.260
but it's pretty fun.


00:24:52.260 --> 00:24:54.000
So if you are doing a startup,


00:24:54.000 --> 00:24:56.200
like seriously, click that thing like 20 times,


00:24:56.200 --> 00:24:58.540
you'll probably find your name right there.


00:24:58.540 --> 00:25:01.060
All right, the other one, just some quick news,


00:25:01.060 --> 00:25:03.880
Python 3.7.1 and 3.6.7,


00:25:03.880 --> 00:25:07.880
So Modern Python, last two versions, got a new release.


00:25:07.880 --> 00:25:10.120
And there's actually a decent amount of little bug fixes


00:25:10.120 --> 00:25:12.640
and stuff, at least in 3.7, 3.7.1.


00:25:12.640 --> 00:25:13.640
So check that out.


00:25:13.640 --> 00:25:14.520
Yeah, neat.


00:25:14.520 --> 00:25:15.760
Yeah, link's there for that.


00:25:15.760 --> 00:25:17.360
Not a lot to say more about that one.


00:25:17.360 --> 00:25:21.080
And then the last one is we were talking with Tom Baker


00:25:21.080 --> 00:25:26.360
on Twitter about a project that's a command line interface


00:25:26.360 --> 00:25:29.520
app that he's converted over to Python.


00:25:29.520 --> 00:25:30.880
And he used click.


00:25:30.880 --> 00:25:33.480
And he wanted to propose a new acronym.


00:25:33.480 --> 00:25:36.480
We've got TDD, right, test-driven development.


00:25:36.480 --> 00:25:39.720
We've got BDD for behavior-driven development.


00:25:39.720 --> 00:25:43.240
He wanted to propose CDD for click-driven development.


00:25:43.240 --> 00:25:44.720
So you use the Python click package


00:25:44.720 --> 00:25:46.280
to mock up your suite of commands.


00:25:46.280 --> 00:25:48.240
You put little print functions in there


00:25:48.240 --> 00:25:50.080
to show what's supposed to be happening.


00:25:50.080 --> 00:25:52.280
And then you just start filling out the placeholders,


00:25:52.280 --> 00:25:53.640
take away the print functions,


00:25:53.640 --> 00:25:54.580
and make it start working then.


00:25:54.580 --> 00:25:56.360
So there you have CDD.


00:25:56.360 --> 00:25:58.640
(laughing)


00:25:58.640 --> 00:25:59.680
- Sure, yeah.


00:25:59.680 --> 00:26:00.880
- Why not, right?


00:26:00.880 --> 00:26:01.720
- Yeah.


00:26:01.720 --> 00:26:04.400
We always have a shortage of acronyms


00:26:04.400 --> 00:26:06.080
in the programming world, so why not?


00:26:06.080 --> 00:26:08.680
- Yeah, I think CDE may have been taken already,


00:26:08.680 --> 00:26:10.480
but I don't remember what it was for.


00:26:10.480 --> 00:26:12.360
- Yeah, well, I'm not sure how well


00:26:12.360 --> 00:26:14.960
it's gonna actually take off, but there it is.


00:26:14.960 --> 00:26:16.800
CLDD, I don't know.


00:26:16.800 --> 00:26:18.040
- I don't know, I do love Click.


00:26:18.040 --> 00:26:18.880
Click is cool.


00:26:18.880 --> 00:26:19.700
- Yeah, it's pretty cool.


00:26:19.700 --> 00:26:22.760
All right, well, that's all of our news for this week.


00:26:22.760 --> 00:26:24.640
Brian, thanks for being here and sharing with everyone.


00:26:24.640 --> 00:26:25.480
- Yeah, thank you.


00:26:25.480 --> 00:26:26.320
- Yep, bye. - Bye.


00:26:26.320 --> 00:26:29.080
- Thank you for listening to Python Bytes.


00:26:29.080 --> 00:26:31.600
Follow the show on Twitter via @PythonBytes.


00:26:31.600 --> 00:26:38.200
that's Python bytes as in B Y T E S and get the full show notes at Python bytes dot fm.


00:26:38.200 --> 00:26:41.640
If you have a news item you want featured, just visit Python bytes dot fm and send it


00:26:41.640 --> 00:26:46.640
our way. We're always on the lookout for sharing something cool on behalf of myself and Brian


00:26:46.640 --> 00:26:50.760
Okken. This is Michael Kennedy. Thank you for listening and sharing this podcast with


00:26:50.760 --> 00:26:51.920
your friends and colleagues.

