WEBVTT

00:00:00.001 --> 00:00:05.540
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.540 --> 00:00:11.440
This is episode 102, recorded October 30th, 2018. I'm Michael Kennedy.

00:00:11.440 --> 00:00:12.340
And I'm Brian Okken.

00:00:12.340 --> 00:00:13.060
Hey, Brian. How are you doing?

00:00:13.060 --> 00:00:13.800
I'm doing great.

00:00:13.800 --> 00:00:17.200
Are you frightened to be recording this on the day before Halloween? Or is it all okay?

00:00:17.200 --> 00:00:18.980
Yeah, it's okay.

00:00:18.980 --> 00:00:22.260
It might release on Halloween, but I think it's still going to be okay.

00:00:22.260 --> 00:00:23.200
Yeah, that'd be neat.

00:00:23.200 --> 00:00:24.500
Actually, it would be cool.

00:00:24.800 --> 00:00:30.900
You know what is neat is that DigitalOcean is sponsoring the show like they are all of our shows for the rest of the year.

00:00:30.900 --> 00:00:33.580
So check them out at pythonbytes.fm/DigitalOcean.

00:00:33.580 --> 00:00:36.240
You'll get $100 credit if you're a new user there.

00:00:36.240 --> 00:00:39.820
We'll come back, tell you more about that later, some cool stuff they got going on.

00:00:39.820 --> 00:00:41.660
Brian, what's the first cool thing that you found?

00:00:41.660 --> 00:00:45.760
Quanticon, or Quanticon, however you say that.

00:00:45.760 --> 00:00:50.080
Didn't we cover like economics, somebody getting a Nobel Prize in economics.

00:00:50.080 --> 00:00:51.020
Was that last episode?

00:00:51.020 --> 00:00:52.520
That was last episode, yeah.

00:00:52.520 --> 00:00:58.180
The guy who won the Nobel Prize, one of the guys who won the Nobel Prize in economics is all about Jupyter.

00:00:58.180 --> 00:01:00.220
And I was very much an advocate for it.

00:01:00.220 --> 00:01:06.000
Yeah, and we did a shout out then saying, hey, if anybody knows other economic stuff, we'd like to hear about it.

00:01:06.000 --> 00:01:07.980
And somebody did.

00:01:07.980 --> 00:01:09.320
Somebody let us know.

00:01:09.320 --> 00:01:12.040
I really should have wrote their name down, but thank you.

00:01:12.040 --> 00:01:15.520
Gave us a pointer to this site called Quanticon.

00:01:16.020 --> 00:01:18.440
And it's quanticon.org.

00:01:18.440 --> 00:01:21.440
It says open source code for economic modeling.

00:01:21.440 --> 00:01:33.480
Quanticon is a num-focused, fiscally sponsored project dedicated to developing documentation for modern open source computational tools for economics, econometrics, econometrics?

00:01:33.480 --> 00:01:33.960
I don't know.

00:01:33.960 --> 00:01:35.220
And decision making.

00:01:35.560 --> 00:01:43.200
Anyway, it's an educational resource for people wanting to do economics and stuff like that with Python and other programs.

00:01:43.200 --> 00:01:44.860
I guess it does Julia also.

00:01:44.860 --> 00:01:50.500
But it's got a bunch of lectures and a bunch of workshops and seminars that are taped and upcoming ones.

00:01:50.500 --> 00:01:53.680
And then some Jupyter notebooks and some cheat sheets.

00:01:54.020 --> 00:01:55.580
This is really cool what you found here.

00:01:55.580 --> 00:01:59.380
Like, if I cared about economics, this would be a massively cool resource.

00:01:59.380 --> 00:02:04.300
Yeah, you could just sit here all weekend and learn all sorts of stuff on this.

00:02:04.300 --> 00:02:05.060
It's pretty great.

00:02:05.060 --> 00:02:07.740
And yeah, it says fiscally responsible.

00:02:07.740 --> 00:02:13.080
And looking at the bottom, it's even got Sloan Foundation support.

00:02:13.080 --> 00:02:14.920
So that's pretty cool.

00:02:14.920 --> 00:02:16.680
There's a whole bunch of stuff here.

00:02:16.680 --> 00:02:17.340
Yeah, it's great.

00:02:17.340 --> 00:02:19.980
It's all part of the NumFocus thing, which is really cool.

00:02:19.980 --> 00:02:24.920
So, like, NumFocus is sort of the umbrella that sponsors things like NumPy and stuff.

00:02:24.920 --> 00:02:30.080
And this is one of the areas of open source where, like, legitimate money is going to these projects.

00:02:30.080 --> 00:02:38.400
Remember we covered a while back, like, multi-million, like, $3 million going to the SciPy, NumPy world?

00:02:38.400 --> 00:02:40.180
That's really, really great.

00:02:40.180 --> 00:02:42.560
It'd be cool to see that in some other areas of Python as well.

00:02:42.560 --> 00:02:43.780
But it's great to see it here.

00:02:43.780 --> 00:02:44.680
Yeah, it's neat.

00:02:44.680 --> 00:02:47.560
And yeah, maybe I'll check it out also.

00:02:47.560 --> 00:02:52.140
Yeah, it says there's a â€“ it's basically a high-performance library.

00:02:52.140 --> 00:02:55.220
It comes in the form of Jupyter Notebooks if you want it.

00:02:55.220 --> 00:02:57.140
And it has a whole series of lectures.

00:02:57.140 --> 00:03:03.500
And what's cool is, you know, you can pick the Python version, the Julia version, and you just, you know, get started watching the lectures.

00:03:03.500 --> 00:03:04.280
It's pretty great.

00:03:04.280 --> 00:03:09.200
And it has an area for if you want to contribute to it where they'd like some help.

00:03:09.200 --> 00:03:10.620
And yeah, it's good.

00:03:10.620 --> 00:03:11.680
Yeah, so that's a good find.

00:03:11.680 --> 00:03:12.160
I like it.

00:03:12.160 --> 00:03:13.780
I'm sure people will enjoy having it.

00:03:13.780 --> 00:03:19.560
So I think we've talked about how you structure packages in Python a lot.

00:03:19.560 --> 00:03:20.840
It's kind of one of our themes, right?

00:03:20.840 --> 00:03:21.860
Yeah.

00:03:22.360 --> 00:03:30.940
So this next one that I want to cover is about structuring Flask projects and also treating them as packages as well, which is kind of interesting.

00:03:30.940 --> 00:03:38.040
So I think Flask is one of those things where it falls over itself to show you how simple it is.

00:03:38.300 --> 00:03:45.560
And then it doesn't have much opinionated ways of sort of telling you now do this and that, right?

00:03:45.560 --> 00:03:49.000
So you're kind of left to your own devices to figure out how to structure your Flask program.

00:03:49.000 --> 00:03:52.620
So there's a cool article called Structure a Flask Project.

00:03:52.620 --> 00:03:56.480
And it says, you know, look, it seems really easy to get started.

00:03:56.660 --> 00:04:03.820
But when you're new, like as your app grows, you're going to find you start running the challenges with circular references and other things like that.

00:04:03.820 --> 00:04:09.440
So he actually, the person who wrote this, has a couple of different structures.

00:04:09.440 --> 00:04:12.680
And you can take the ones that feel best to you and run with it.

00:04:13.360 --> 00:04:18.720
So one of it is to have like your project and then have a models folder sub package.

00:04:18.720 --> 00:04:20.720
They call them routes.

00:04:20.720 --> 00:04:23.280
I think it should probably be called views or controllers or something.

00:04:23.280 --> 00:04:26.980
But routes, templates, services, things like that.

00:04:26.980 --> 00:04:32.360
So like if you're going to have some code that sends mail for you, put that in a separate thing in a services folder.

00:04:32.360 --> 00:04:36.360
Don't cram that all into just one giant file, which kind of Flask encourages.

00:04:36.360 --> 00:04:37.440
So I really, really love it.

00:04:37.440 --> 00:04:39.220
And I think it's nice.

00:04:39.220 --> 00:04:39.580
What do you think?

00:04:39.580 --> 00:04:40.620
I like it.

00:04:40.820 --> 00:04:47.200
And actually, when you structure things in packages, then you have the dot notation in your code.

00:04:47.200 --> 00:04:50.840
It separates the different parts of your system a little bit better.

00:04:50.840 --> 00:04:51.600
Yeah, absolutely.

00:04:51.600 --> 00:05:04.680
The one thing I would add here is some kind of concept of a view model, which is a class whose job it is to exchange the data between the HTML template and the view or controller method.

00:05:04.680 --> 00:05:09.100
And just do all that validation instead of trying to cram that into your view.

00:05:09.460 --> 00:05:13.580
Usually, the validation is more code than the operation you're trying to do with the data anyway.

00:05:13.580 --> 00:05:16.320
So I'll throw that one in there.

00:05:16.320 --> 00:05:17.420
And those are easier to test, right?

00:05:17.420 --> 00:05:18.500
You test your validation separate.

00:05:18.500 --> 00:05:19.500
Yeah.

00:05:19.500 --> 00:05:21.140
So I threw this little question for you.

00:05:21.140 --> 00:05:22.780
I see you already caught it quickly.

00:05:22.780 --> 00:05:24.660
What's missing from this structure?

00:05:24.660 --> 00:05:25.240
Tests.

00:05:25.240 --> 00:05:25.640
Yeah.

00:05:25.640 --> 00:05:27.400
There's no tests in this layout.

00:05:27.400 --> 00:05:28.820
I mean, there is a dot, dot, dot somewhere.

00:05:28.820 --> 00:05:32.020
So maybe in the dot, dot, dot there's some tests, but probably not.

00:05:32.120 --> 00:05:34.480
Also, this is sort of a zoom in on the project.

00:05:34.480 --> 00:05:41.500
And in a lot of projects that I've seen that are Flask applications, there's a test directory like at the top level.

00:05:41.500 --> 00:05:45.860
So it might be parallel to this top level project directory.

00:05:45.860 --> 00:05:46.280
Right, right, right.

00:05:46.280 --> 00:05:46.860
Cool.

00:05:46.860 --> 00:05:52.960
Yeah, there's another structure that they propose as an alternative called the app-based structure.

00:05:53.680 --> 00:05:59.840
And it takes all the models, the view methods, the templates and everything, and puts it under the different categories.

00:05:59.840 --> 00:06:02.060
So maybe you've got a blog subpart of your app.

00:06:02.060 --> 00:06:02.920
You've got authentication.

00:06:02.920 --> 00:06:04.420
You've got a store.

00:06:04.420 --> 00:06:08.080
And it sort of replicates this structure underneath all of those.

00:06:08.080 --> 00:06:09.320
I don't know how I feel about that.

00:06:09.320 --> 00:06:11.080
I kind of like the first one better personally.

00:06:11.080 --> 00:06:12.520
But it's more Django-like.

00:06:12.520 --> 00:06:13.020
Yeah.

00:06:13.020 --> 00:06:18.540
There's a couple of options here, which I thought was a nice tradeoff to show how different people were doing it.

00:06:18.540 --> 00:06:23.540
And then also, I would like to just give a shout-out to Flask Blueprints, which is part of Flask.

00:06:23.540 --> 00:06:24.560
This is nothing like extra.

00:06:24.560 --> 00:06:25.380
It's just built in.

00:06:25.380 --> 00:06:38.120
But it's kind of challenging the way Flask works to easily and clearly share or spread your view code across different files so it's not into one giant file.

00:06:38.120 --> 00:06:46.820
And Flask Blueprints is really a great way to break one big file with all your view methods up into a whole bunch of little ones that are grouped by what they do.

00:06:47.220 --> 00:06:49.140
They're easier to test because they're more focused.

00:06:49.140 --> 00:06:49.700
Things like that.

00:06:49.700 --> 00:06:55.240
And is this, the Blueprint, something you could use with either, any of these project structures?

00:06:55.240 --> 00:06:56.100
Yeah, I think so.

00:06:56.100 --> 00:06:56.400
Okay.

00:06:56.400 --> 00:06:58.040
It just lets you take one big file.

00:06:58.040 --> 00:07:03.600
Instead of trying to figure out how to, you know, in Flask, you create the app dynamically at runtime.

00:07:03.600 --> 00:07:04.620
Then you say app.route.

00:07:05.720 --> 00:07:10.100
That makes it tricky to share that thing without being circular or things like that.

00:07:10.100 --> 00:07:12.320
So, this lets you do the reverse.

00:07:12.320 --> 00:07:15.560
You create a Blueprint for each of your separate files.

00:07:15.560 --> 00:07:17.360
And you say blueprint.route.

00:07:17.360 --> 00:07:20.480
And then you just register the Blueprints with the app at the main startup.

00:07:20.480 --> 00:07:20.980
And you're all good.

00:07:20.980 --> 00:07:21.480
Oh, nice.

00:07:21.480 --> 00:07:22.380
It's really a nice thing.

00:07:22.380 --> 00:07:24.000
I haven't seen it used a lot, but it's great.

00:07:24.000 --> 00:07:26.020
I learned it from the court guys.

00:07:26.020 --> 00:07:26.700
All right.

00:07:26.780 --> 00:07:31.040
So, anyway, I think that puts a nice structure on the Flask world.

00:07:31.040 --> 00:07:32.640
And people should check that out if they're doing Flask.

00:07:32.640 --> 00:07:33.900
What you got next for us?

00:07:33.900 --> 00:07:40.180
I've got an article from Trey Hunter that's overusing Lambda expressions in Python.

00:07:40.180 --> 00:07:43.900
And I actually kind of love Lambda expressions.

00:07:43.900 --> 00:07:50.860
However, I've, so where I often use them is in like ID functions for test cases.

00:07:51.060 --> 00:08:01.980
So, if I've got a test parameterization, you can rewrite the ID function to take all the parameter data and spit out an easier to read string.

00:08:01.980 --> 00:08:07.780
And this is something that where Lambda expressions are often used.

00:08:07.780 --> 00:08:11.640
However, I do have some of them that are kind of getting big and they're hard to read.

00:08:11.640 --> 00:08:16.080
So, this is a good time to read Trey's article.

00:08:16.560 --> 00:08:22.620
So, it starts out talking about some of the differences between Lambda expressions and just defined functions.

00:08:22.620 --> 00:08:28.480
And some of the things I guess I didn't realize, I mean, it's obvious if you think about it, but I didn't really think about it,

00:08:28.480 --> 00:08:31.140
is that one of the things is there's no doc string.

00:08:31.140 --> 00:08:33.120
You can't have a doc string for a Lambda expression.

00:08:33.120 --> 00:08:37.360
And the representation also is a little weird.

00:08:37.360 --> 00:08:43.320
So, if you're stepping around or if you assign a Lambda expression to a variable, if it gets passed in somewhere,

00:08:43.320 --> 00:08:50.560
the value of it is going to be something ugly that you can't, if you're debugging, it's going to look bad.

00:08:50.560 --> 00:08:53.920
And you might have trouble figuring out where that came from.

00:08:53.920 --> 00:08:57.480
Whereas, if you just define a function, it's easier to figure out.

00:08:57.480 --> 00:09:07.400
So, basically, this is an argument on that it doesn't really save you a lot in a lot of places and perhaps even just use normal functions.

00:09:07.400 --> 00:09:11.720
Then, the other thing is he talks about some misuses.

00:09:11.720 --> 00:09:19.360
And some of them are, I've seen this before, is having a Lambda expression calling a single function with a single argument.

00:09:19.680 --> 00:09:26.060
Well, that function that you're calling, you could just pass that instead of the Lambda expression that you're passing.

00:09:26.060 --> 00:09:34.020
Right. Like, so, for example, if you have a sort function and you'd like to take the number and sort by the absolute value of it,

00:09:34.020 --> 00:09:40.280
you could have a Lambda that takes the N and it says returns ABS of N, or you could just pass ABS.

00:09:40.280 --> 00:09:42.980
Right? And this is basically the same thing.

00:09:42.980 --> 00:09:46.660
You're just putting a layer of function calls in between them, make them slower.

00:09:46.660 --> 00:09:51.040
And then, actually, I didn't know about this module before, so I'm glad I read this.

00:09:51.040 --> 00:09:57.860
Defining little custom Lambda expressions for operators that happen to exist in the operator module.

00:09:57.860 --> 00:10:08.500
There's an operator module that comes with Python and it has a whole bunch of things that you might have wanted to create a Lambda expression for.

00:10:08.500 --> 00:10:10.560
Yeah, this is interesting. I didn't know about this either.

00:10:10.560 --> 00:10:15.140
But you can say, like, operator.add, operator.truth, and so on.

00:10:15.140 --> 00:10:18.740
Yeah, these are supposed to be high-performance, little efficient functions. Quite cool.

00:10:18.740 --> 00:10:29.640
The last thing is, I've seen this before also, is used to be using Lambda expressions for map and filter, but just useless comprehensions instead, nor other kinds of comprehensions.

00:10:29.640 --> 00:10:40.100
Yeah, that's a good one. Certainly, the comprehensions, set comprehension, dictionary comprehensions, all that kind of stuff, is better than a Lambda function, generally, right?

00:10:40.140 --> 00:10:40.880
Yeah, it's more readable.

00:10:40.880 --> 00:10:44.880
I think they might even be more efficient in terms of performance. I'm not 100% sure, but I think so.

00:10:44.880 --> 00:10:48.040
But anyway, these are all good things.

00:10:48.040 --> 00:10:50.920
Yeah, and I think there's a lot of good guidance here.

00:10:50.920 --> 00:10:54.240
You know, for example, it says you can't have a doc string.

00:10:54.640 --> 00:10:59.160
Well, if your Lambda expression requires a doc string, you're probably doing it wrong, right?

00:10:59.160 --> 00:11:00.920
It's probably too complicated, right?

00:11:00.920 --> 00:11:10.540
The value of the Lambda is, I'm going to take such ridiculously simple code instead of moving it way far somewhere else into a function that then I have to document so I know what the heck it does.

00:11:10.540 --> 00:11:12.040
I could just put it right here, right?

00:11:12.040 --> 00:11:14.620
Like, you know, ABS of a number type of thing.

00:11:15.260 --> 00:11:18.300
I do think, I personally love Lambda expressions.

00:11:18.300 --> 00:11:20.720
I feel like Trey's a little harsh on them.

00:11:20.720 --> 00:11:27.580
I find that I more often see code that should be using the Lambda than is overusing Lambdas.

00:11:27.580 --> 00:11:29.180
So, grain of salt there.

00:11:29.180 --> 00:11:30.800
But I think there's a lot of good advice, too.

00:11:30.800 --> 00:11:40.540
Yeah, I guess there's some times where you see a little tiny function that is only used once, and it's small, and maybe it could have just been a Lambda.

00:11:40.540 --> 00:11:43.260
Right, it's probably badly named and not documented either, so.

00:11:45.160 --> 00:11:47.220
Yeah, doc string.

00:11:47.220 --> 00:11:47.880
What doc string?

00:11:47.880 --> 00:11:49.840
Exactly, exactly.

00:11:49.840 --> 00:11:51.600
So, anyway, yeah, people check it out.

00:11:51.600 --> 00:11:52.600
It's a good article.

00:11:52.600 --> 00:11:53.340
It's kind of a long one.

00:11:53.340 --> 00:11:54.500
It really is in-depth.

00:11:54.500 --> 00:11:58.020
We've got a couple of good, solid, long articles I covered this week.

00:11:58.020 --> 00:12:09.520
Now, before we get on to another one that I think is really interesting because it introduces a lot of structure around features introduced two versions ago, two dot versions.

00:12:09.520 --> 00:12:11.180
So, we'll get to that.

00:12:11.180 --> 00:12:14.080
But before we do, I just want to tell everyone about DigitalOcean.

00:12:14.240 --> 00:12:17.940
If you're not familiar with them, check them out at pythonbytes.fm/DigitalOcean.

00:12:17.940 --> 00:12:19.760
They've got all sorts of cool stuff going on.

00:12:19.760 --> 00:12:25.800
One of the things that I want to highlight this time that's cool, I've talked about a few times before, is the ability to bring your own custom images.

00:12:25.800 --> 00:12:27.520
So, you can go to DigitalOcean and create a droplet.

00:12:27.520 --> 00:12:28.840
That's what they call their virtual machines.

00:12:28.840 --> 00:12:34.020
And say, I want Ubuntu 18 or, you know, CoreOS or whatever.

00:12:34.020 --> 00:12:36.020
And you get those stock images.

00:12:36.020 --> 00:12:41.500
They even have little app, pre-built apps like give me a MongoDB server or give me a ghost server, things like that.

00:12:42.040 --> 00:12:48.240
But if you want exactly the machine that you'd like to run there and you want to create that locally, you can upload your own images.

00:12:48.240 --> 00:12:49.000
All right.

00:12:49.000 --> 00:12:50.180
And that's super easy.

00:12:50.180 --> 00:12:55.100
Once you've registered them and uploaded them, you can just click start my own image and off it goes.

00:12:55.100 --> 00:12:55.540
It's really cool.

00:12:56.000 --> 00:12:57.720
So, check them out.

00:12:57.720 --> 00:13:01.800
They're doing us well and I'm sure they'll do you well as well.

00:13:01.800 --> 00:13:12.640
So, if you wrote some code, Brian, and it used the word async, all lowercase, and that was working just fine in Python 3.4.

00:13:12.640 --> 00:13:19.120
And then Python 3.5 comes along and it introduces two new keywords, async and await.

00:13:19.120 --> 00:13:22.020
Do you think there's going to be some problem with your 3.5 code?

00:13:22.020 --> 00:13:23.220
Yeah, probably.

00:13:23.220 --> 00:13:25.700
Well, there should be, right?

00:13:25.700 --> 00:13:29.360
Like, there's a new keyword and you can't use the word class.

00:13:29.360 --> 00:13:33.080
You can't use other core keywords, right?

00:13:33.080 --> 00:13:35.920
You can't use def as like a variable name.

00:13:35.920 --> 00:13:47.020
But it turns out, for whatever reason, I don't know really why they chose this, but async and await were valid, like parameter names and stuff in Python 3.5 and 3.6.

00:13:47.020 --> 00:13:49.280
But they're not in Python 3.7.

00:13:49.280 --> 00:13:49.940
Okay.

00:13:49.940 --> 00:14:04.360
So, if you've got some sort of package and it uses the word async for a variable or a parameter or something like that, you're all of a sudden going to have your package or the one you're using no longer running.

00:14:04.360 --> 00:14:06.040
That's big, right?

00:14:06.240 --> 00:14:06.560
Yeah.

00:14:06.560 --> 00:14:06.600
Yeah.

00:14:06.600 --> 00:14:07.520
That's not good.

00:14:07.520 --> 00:14:07.640
Yeah.

00:14:07.640 --> 00:14:10.700
So, there's actually, I saw this article.

00:14:10.700 --> 00:14:13.560
This is from Chris Medina called AsyncIO and Python 3.7.

00:14:14.300 --> 00:14:18.880
And I thought, oh, okay, well, it's going to talk about this keyword thing, maybe a little bit, something else.

00:14:18.880 --> 00:14:19.800
Oh, no.

00:14:19.800 --> 00:14:21.560
This is like a series.

00:14:21.560 --> 00:14:26.960
There are so many changes to asyncIO and async and await in Python 3.7.

00:14:26.960 --> 00:14:29.480
Like, pages and pages of changes.

00:14:29.740 --> 00:14:32.360
So, there's really quite a bit of new stuff.

00:14:32.360 --> 00:14:34.520
And if you cared all about this, you should go check it out.

00:14:34.520 --> 00:14:44.600
And you might not care at all about it, but you still maybe should check it out, at least for the fact that, like, parameters called async and parameters called await no longer work.

00:14:44.600 --> 00:14:46.840
And if you have a library like that, it won't run on 3.7.

00:14:46.840 --> 00:14:48.900
That's, yeah, it's definitely concerning.

00:14:48.900 --> 00:14:49.680
Yeah.

00:14:50.360 --> 00:14:58.700
So, I kind of feel like this maybe should have been the way it was done when 3.5, like, soon as those keywords appear in the language, they should be officially keywords.

00:14:58.700 --> 00:15:01.700
But, anyway, here we are, three years later.

00:15:01.700 --> 00:15:05.660
Now, async and await are enforced as keywords, the reserved words.

00:15:05.660 --> 00:15:06.140
Okay.

00:15:06.140 --> 00:15:12.020
So, we definitely want to heavily test your applications as you shift to 3.7.

00:15:12.020 --> 00:15:12.360
Yeah.

00:15:12.360 --> 00:15:14.780
Maybe using something like Docs or something like that, right?

00:15:14.780 --> 00:15:16.060
Test across the different versions.

00:15:16.060 --> 00:15:17.280
Yeah.

00:15:17.280 --> 00:15:17.740
Oh, yeah.

00:15:17.740 --> 00:15:18.400
That's a great idea.

00:15:18.580 --> 00:15:21.640
So, there's a couple of other things I'll go through really quick here.

00:15:21.640 --> 00:15:22.740
Like I said, check out the article.

00:15:22.740 --> 00:15:23.460
There's tons there.

00:15:23.460 --> 00:15:36.400
One of the challenges with async.io is it, like, simulates parallelism by slicing up all these different methods and running them, running the other ones while one of them is waiting.

00:15:36.400 --> 00:15:44.800
But what's interesting is you can no longer have thread local variables because even though it feels like you're doing concurrency, it's actually all the same thread.

00:15:44.800 --> 00:15:48.580
So, there's no mechanism to distinguish across threads, right?

00:15:48.580 --> 00:15:50.980
That's sort of how Flask works, for example.

00:15:50.980 --> 00:15:54.700
They've got the request as a thread local variable.

00:15:54.700 --> 00:15:56.760
But it doesn't work in async.io.

00:15:57.000 --> 00:16:03.460
So, there's this new concept called context variables that are like thread local variables but for coroutines.

00:16:03.460 --> 00:16:07.300
So, they can have different values on the same thread, which is kind of crazy.

00:16:07.300 --> 00:16:09.500
There's a bunch of stuff around how that works.

00:16:09.500 --> 00:16:12.240
There's a new async.io.run function.

00:16:12.240 --> 00:16:14.300
You still have to get a hold of the loop and call that.

00:16:14.700 --> 00:16:18.900
Simpler task management, simpler event loop management.

00:16:18.900 --> 00:16:27.580
You can call async.io.getrunningloop from within a library to see if you're already being run asynchronously or if you have to kick that stuff off.

00:16:27.580 --> 00:16:33.600
A cool decorator to turn async functions into async context managers.

00:16:33.600 --> 00:16:37.520
Remember, context managers are things you can put in a with statement, right?

00:16:37.560 --> 00:16:40.520
Like with open file name as fin, right?

00:16:40.520 --> 00:16:45.400
There's a new part of the language that will let you say async with.

00:16:45.400 --> 00:16:53.260
So, it will like allow concurrency and you sort of do waiting type of work on those context manager enters.

00:16:53.260 --> 00:17:05.700
Now, there's a really cool decorator you just add to your function and it automatically implements this async-able, async-enabled context manager, which is pretty awesome because that sounds complicated, doesn't it?

00:17:05.700 --> 00:17:07.160
Yeah.

00:17:07.160 --> 00:17:09.760
And then there's a bunch of performance improvements.

00:17:09.760 --> 00:17:13.460
Async.io.get event loop is 15 times faster.

00:17:13.460 --> 00:17:14.440
That's good.

00:17:14.440 --> 00:17:16.220
Gathers 15%.

00:17:16.220 --> 00:17:18.580
Sleep is twice as fast for not really sleeping.

00:17:18.580 --> 00:17:20.120
Future is faster.

00:17:20.120 --> 00:17:21.260
All sorts of good stuff.

00:17:21.260 --> 00:17:22.220
There's tons and tons here.

00:17:22.220 --> 00:17:23.540
So, go check out Chris's article.

00:17:23.540 --> 00:17:30.620
I'm just blown away at how much new stuff Async.io got in 3.7, actually, when you see it all put together like that.

00:17:30.620 --> 00:17:31.180
Yeah.

00:17:31.180 --> 00:17:31.500
Wow.

00:17:31.500 --> 00:17:32.580
That's great.

00:17:32.580 --> 00:17:34.600
I like seeing it all together like that.

00:17:34.600 --> 00:17:34.800
Yeah.

00:17:34.800 --> 00:17:36.880
It's like, wow, there's still a lot of stuff happening here.

00:17:36.960 --> 00:17:37.620
That's good.

00:17:37.620 --> 00:17:41.860
I feel like we should say, you know, thanks to all the people that work on it.

00:17:41.860 --> 00:17:42.700
That'd be awesome.

00:17:42.700 --> 00:17:43.520
Yeah.

00:17:43.520 --> 00:17:44.640
I think we should.

00:17:44.640 --> 00:17:46.660
Like with an email or how do you propose this?

00:17:46.660 --> 00:17:49.900
Well, there's a proposal in pip.

00:17:49.900 --> 00:17:56.200
So, this is a proposal from, oh, Bskin, Brian Skin.

00:17:56.200 --> 00:17:57.120
Brian Skin.

00:17:57.120 --> 00:17:57.460
Yep.

00:17:57.460 --> 00:17:58.360
Yep.

00:17:58.640 --> 00:17:59.880
And he sent us a heads up on this.

00:17:59.880 --> 00:18:03.700
And he sent us a heads up on this that he submitted it just this morning.

00:18:04.380 --> 00:18:08.760
And it's a proposal to add a sub-command thank to pip.

00:18:08.760 --> 00:18:10.900
So, you got pip install.

00:18:10.900 --> 00:18:12.340
You got pip uninstall.

00:18:12.340 --> 00:18:17.820
And so, another one would be like pip thank requests or pip thank seek welcoming, something like that?

00:18:17.920 --> 00:18:18.160
Yeah.

00:18:18.580 --> 00:18:18.660
Yeah.

00:18:18.660 --> 00:18:23.280
This other proposal is to add that and then also to change install.

00:18:23.280 --> 00:18:33.920
So, the install, if you install a bunch of stuff at the end after everything's installed, if there's the right metadata in the modules that you've installed,

00:18:33.920 --> 00:18:45.020
add a little information that says, hey, if you'd like to thank the contributors, run pip thank on pip thank requests or pip thank something.

00:18:45.020 --> 00:18:58.440
And the idea is to look in the metadata for the project for URLs, specific like thanks tag in the metadata or donate, possibly.

00:18:58.440 --> 00:19:02.840
It's still kind of a little bit in flux as to what would be in there.

00:19:03.420 --> 00:19:04.660
But there's already some information.

00:19:04.660 --> 00:19:06.780
Apparently, it's all the info's there.

00:19:06.780 --> 00:19:07.620
A lot of it is.

00:19:07.620 --> 00:19:12.760
And there's a way to possibly just print that out and say, hey, if you want to say thanks, this is how you can do it.

00:19:12.760 --> 00:19:14.480
I think it's a simple thing.

00:19:14.480 --> 00:19:15.920
It's not going to be very intrusive.

00:19:15.920 --> 00:19:17.460
And I think it's cool.

00:19:17.460 --> 00:19:18.100
I think it's cool.

00:19:18.100 --> 00:19:20.680
There's a lot of conversation happening on GitHub around this.

00:19:20.680 --> 00:19:21.320
I like it.

00:19:21.320 --> 00:19:27.500
Well, well done, Brian, for coming up with Brian Skin for coming up with this idea and, you know, actually putting it out there as a proposal.

00:19:27.500 --> 00:19:28.000
Yeah.

00:19:28.000 --> 00:19:30.620
And I don't know if it'll happen, but why not?

00:19:30.620 --> 00:19:33.220
There's so much negativity in the world, a little bit of positivity.

00:19:33.220 --> 00:19:34.240
It's a good thing.

00:19:34.240 --> 00:19:35.200
Yeah, I agree.

00:19:35.200 --> 00:19:35.940
Yeah, quite cool.

00:19:35.940 --> 00:19:43.320
So I feel like I kind of snuck this last item from you because this one belongs in your realm, but I grabbed it.

00:19:43.960 --> 00:19:46.760
So this one is an article, a booklet.

00:19:46.760 --> 00:19:47.820
Should I call it a booklet?

00:19:47.820 --> 00:19:48.280
I don't know.

00:19:48.280 --> 00:19:49.040
I'll tell you why in a second.

00:19:49.040 --> 00:19:54.760
On RealPython called Getting Started with Testing in Python by Anthony Shaw, friend of the show.

00:19:55.640 --> 00:20:00.960
So this is not just a little quick tutorial on getting started testing.

00:20:00.960 --> 00:20:04.420
This is like a little bit of a mini book type of thing.

00:20:04.420 --> 00:20:08.240
I threw it into Instapaper and Pocket, and they both said it's a 33-minute read.

00:20:08.340 --> 00:20:10.380
So that's a serious little write-up.

00:20:10.380 --> 00:20:10.840
Yeah.

00:20:10.840 --> 00:20:11.680
Yeah.

00:20:11.760 --> 00:20:13.280
It's an interesting read.

00:20:13.280 --> 00:20:15.800
I heard about this before it went through.

00:20:16.480 --> 00:20:23.700
And one of the things that highlights is some of the process around RealPython articles.

00:20:23.700 --> 00:20:27.140
They treat it like a magazine, and there's a review process and stuff.

00:20:27.140 --> 00:20:28.600
So that's pretty cool.

00:20:28.700 --> 00:20:28.900
Yeah.

00:20:28.900 --> 00:20:34.920
Dan Bader and crew over there definitely creating some serious articles and things over at RealPython.

00:20:34.920 --> 00:20:36.580
And so this is Anthony Shaw's.

00:20:36.580 --> 00:20:40.540
I'm just going to touch on some of the topics covered in there because, like I said, 33 minutes.

00:20:40.540 --> 00:20:45.720
It's like I can't really go into too much detail, but it covers things like automated versus manual testing.

00:20:45.720 --> 00:20:49.540
It's really for people getting started, I think, but it's pretty interesting for everyone.

00:20:49.540 --> 00:20:52.140
Unit tests versus integration tests.

00:20:52.140 --> 00:21:00.200
It does a comparison of unit tests, nose and nose two, why there's actually two noses, and pytest and which one you should use.

00:21:00.200 --> 00:21:01.160
Do you have an opinion on that, Brian?

00:21:01.160 --> 00:21:02.700
Do you care about which one you use?

00:21:02.700 --> 00:21:03.060
Yeah.

00:21:03.060 --> 00:21:04.060
Use pytest.

00:21:04.060 --> 00:21:15.680
It also talks about things like writing your first test, where to write it, how to structure tests, how to write assertions, the dangers, the side effects, testing in PyCharm and VS Code.

00:21:15.680 --> 00:21:16.900
PyCharm is pretty straightforward.

00:21:16.900 --> 00:21:21.300
VS Code has that command palette thing, which is cool, but you've got to figure out how to do it.

00:21:21.380 --> 00:21:22.100
So that's kind of nice.

00:21:22.100 --> 00:21:29.780
It also talks about testing web frameworks like Django and Flask, advanced testing scenarios, and even testing for security flaws in your app.

00:21:29.780 --> 00:21:31.300
So there's a bunch of cool stuff here.

00:21:31.300 --> 00:21:34.560
Like the testing security flaws, like that's new to me.

00:21:34.560 --> 00:21:37.640
So yeah, I don't think it's really that much of a beginner article.

00:21:37.640 --> 00:21:38.760
It just starts at the beginning.

00:21:38.760 --> 00:21:39.780
Well, okay.

00:21:39.780 --> 00:21:40.240
Yeah.

00:21:40.240 --> 00:21:48.260
But it's a lot of these, I like that he touches on a lot of this stuff, but a lot of these things are touches on them.

00:21:48.500 --> 00:21:51.080
There's not, like testing some of the web applications.

00:21:51.080 --> 00:21:54.280
It's a kind of a pointer to, yes, you can do it in here.

00:21:54.280 --> 00:21:56.320
Go read about it in other places.

00:21:56.320 --> 00:21:56.460
Right.

00:21:56.460 --> 00:21:57.780
But I do like it.

00:21:57.780 --> 00:22:01.400
And that, like you said, the security flaws, that needs highlighted more.

00:22:01.760 --> 00:22:05.240
And I think that's a great thing to add to people's tool belt.

00:22:05.240 --> 00:22:05.520
Yeah.

00:22:05.520 --> 00:22:08.000
Just to know that this is the way you can test for it, right?

00:22:08.000 --> 00:22:09.340
There's even tools and whatnot.

00:22:09.340 --> 00:22:11.360
So are you telling me that this could be a book?

00:22:14.320 --> 00:22:17.120
Yeah, I think it could, but I think it would be a lot bigger book.

00:22:17.120 --> 00:22:18.440
Yeah, somebody should write it.

00:22:18.440 --> 00:22:19.040
I'm just kidding.

00:22:19.040 --> 00:22:22.420
People should check out your book if they want more than 33 minutes worth.

00:22:22.480 --> 00:22:29.320
I'd also like to add, so it does talk about PyCharm and VS Code, and it's a little bit that I don't see a lot of opinion.

00:22:29.320 --> 00:22:33.920
But the testing story in PyCharm right now is a lot stronger.

00:22:33.920 --> 00:22:36.980
And I'm not just saying that because I like PyCharm.

00:22:36.980 --> 00:22:38.380
It's just true.

00:22:38.380 --> 00:22:41.660
The VS Code team has something on there.

00:22:41.860 --> 00:22:47.580
I think they're going to address some of the testing shortfalls in the upcoming years, and I hope they do.

00:22:47.580 --> 00:22:52.160
But for right now, if you want to test within an IDE, do it in PyCharm.

00:22:52.160 --> 00:22:53.860
Yeah, it's definitely nice in PyCharm.

00:22:53.860 --> 00:22:54.920
Awesome.

00:22:54.920 --> 00:22:56.500
All right, so those are our main items.

00:22:56.500 --> 00:23:03.680
I have a few other things I want to throw in here because I don't feel like they really warrant a whole thing to be covered, but they're fun.

00:23:03.680 --> 00:23:05.040
Anything you want to cover first, Brian?

00:23:05.040 --> 00:23:10.640
I will just say that speaking of testing, I'm ramping up testing code episodes.

00:23:11.600 --> 00:23:18.660
And doing them actually more frequent than one a week, not up to two a week, but I'm going to get a lot of episodes out.

00:23:18.660 --> 00:23:23.460
And there's a couple recent ones on flaky tests.

00:23:23.460 --> 00:23:25.060
Yeah, speaking of Anthony Shaw.

00:23:25.060 --> 00:23:31.160
Yeah, Anthony Shaw is there talking to me with flaky tests.

00:23:31.160 --> 00:23:36.360
And then I talked with the Automation Panda about feature tests.

00:23:36.360 --> 00:23:37.200
Yeah, that's really cool.

00:23:37.200 --> 00:23:38.700
Great to hear you doing more.

00:23:38.700 --> 00:23:39.960
I've seen those coming out.

00:23:39.960 --> 00:23:43.620
I have a few that I would like to throw out here, a few quick, simple ones.

00:23:43.620 --> 00:23:47.240
First is just this fun project from Vicky Boykus.

00:23:47.240 --> 00:23:49.540
See where it says hack your name in our notes, Brian?

00:23:49.540 --> 00:23:50.020
Click that.

00:23:50.020 --> 00:23:53.960
So the idea here is that you've got a startup.

00:23:53.960 --> 00:23:55.660
You're trying to come up with a name.

00:23:56.620 --> 00:24:02.080
And it seems like there's all these silly names are often talked about on Hacker News, which is from Y Combinator.

00:24:02.080 --> 00:24:12.040
So why not just take the words from Hacker News, break them into syllables, and generate new words, which can be the name of your new cool startup.

00:24:12.280 --> 00:24:16.820
And so you go to this URL, hack your name, urname.com.

00:24:17.060 --> 00:24:18.460
And it has just one big button.

00:24:18.460 --> 00:24:20.340
And it says pivot me, bro.

00:24:20.340 --> 00:24:23.900
So I get guys to back.

00:24:24.860 --> 00:24:25.360
Let's see.

00:24:25.360 --> 00:24:27.900
If you click it a few times, you'll get some pretty good ones.

00:24:27.900 --> 00:24:28.900
I got your chair.

00:24:28.900 --> 00:24:29.200
Yeah.

00:24:29.200 --> 00:24:30.980
I had Shy Fox the other day.

00:24:30.980 --> 00:24:32.260
I'm pretty happy with Shy Fox.

00:24:32.260 --> 00:24:33.780
So why is this interesting?

00:24:33.780 --> 00:24:35.100
I mean, it's funny, obviously.

00:24:35.100 --> 00:24:44.740
But it also is an open source project that is written in Python that does all the download from Hacker News and does all the work in words and stuff.

00:24:44.740 --> 00:24:45.780
So it's kind of cool.

00:24:45.780 --> 00:24:46.300
You can check it out.

00:24:46.300 --> 00:24:47.800
I'll link to the GitHub repo as well.

00:24:47.900 --> 00:24:49.400
Oh, so it's a good example project.

00:24:49.400 --> 00:24:49.860
Yeah, exactly.

00:24:49.860 --> 00:24:51.720
It's a pretty simple one, but it's pretty fun.

00:24:51.720 --> 00:24:56.160
So if you are doing a startup, like seriously, click that thing like 20 times.

00:24:56.160 --> 00:24:57.440
You'll probably find your name right there.

00:24:57.440 --> 00:24:58.760
All right.

00:24:58.760 --> 00:25:03.660
The other one, just some quick news, Python 371 and 367.

00:25:03.660 --> 00:25:07.780
So modern Python, last two versions, got a new release.

00:25:07.780 --> 00:25:11.780
And there's actually a decent amount of little bug fixes and stuff, at least in 371.

00:25:11.780 --> 00:25:13.580
So check that out.

00:25:13.580 --> 00:25:13.860
Yeah.

00:25:13.860 --> 00:25:14.460
Neat.

00:25:14.460 --> 00:25:14.700
Yeah.

00:25:14.700 --> 00:25:15.460
Links there for that.

00:25:15.460 --> 00:25:17.160
Not a lot to say more about that one.

00:25:17.340 --> 00:25:29.020
And then the last one is we were talking with Tom Baker on Twitter about a project that's a command line interface app that he's converted over to Python.

00:25:29.020 --> 00:25:30.320
And he used click.

00:25:30.320 --> 00:25:32.660
And he wanted to propose a new acronym.

00:25:32.660 --> 00:25:35.580
We've got TDD, right?

00:25:35.580 --> 00:25:36.400
Test-driven development.

00:25:36.400 --> 00:25:39.580
We've got BDD for behavior-driven development.

00:25:39.580 --> 00:25:42.640
He wanted to propose CDD for click-driven development.

00:25:42.640 --> 00:25:46.060
So you use the Python click package to mock up your suite of commands.

00:25:46.380 --> 00:25:49.620
You put little print functions in there to show what's supposed to be happening.

00:25:49.620 --> 00:25:52.020
And then you just start filling out the placeholders.

00:25:52.020 --> 00:25:54.360
Take away the print functions and make it start working.

00:25:54.360 --> 00:25:56.100
And so there you have CDD.

00:25:56.100 --> 00:25:58.880
Sure.

00:25:58.880 --> 00:25:59.340
Yeah.

00:25:59.540 --> 00:26:00.320
Why not, right?

00:26:00.320 --> 00:26:01.060
Yeah.

00:26:01.060 --> 00:26:05.160
We always have a shortage of acronyms in the programming world.

00:26:05.160 --> 00:26:05.820
So why not?

00:26:05.820 --> 00:26:06.240
Yeah.

00:26:06.240 --> 00:26:10.000
I think CDD may have been taken already, but I don't remember what it was for.

00:26:10.000 --> 00:26:10.700
Yeah.

00:26:10.700 --> 00:26:13.960
Well, I'm not sure how well it's going to actually take off, but there it is.

00:26:13.960 --> 00:26:15.520
CLDD?

00:26:15.520 --> 00:26:16.100
I don't know.

00:26:16.100 --> 00:26:17.000
I don't know.

00:26:17.000 --> 00:26:17.800
I do love click.

00:26:17.800 --> 00:26:18.580
Click is cool.

00:26:18.580 --> 00:26:19.180
Yeah, it's pretty cool.

00:26:19.180 --> 00:26:19.500
All right.

00:26:19.920 --> 00:26:22.580
Well, that's all of our news for this week.

00:26:22.580 --> 00:26:24.400
Brian, thanks for being here and sharing with everyone.

00:26:24.400 --> 00:26:25.200
Yeah, thank you.

00:26:25.200 --> 00:26:25.500
Yep.

00:26:25.500 --> 00:26:25.840
Bye.

00:26:25.840 --> 00:26:26.080
Bye.

00:26:27.080 --> 00:26:28.880
Thank you for listening to Python Bytes.

00:26:28.880 --> 00:26:31.440
Follow the show on Twitter via at Python Bytes.

00:26:31.440 --> 00:26:34.320
That's Python Bytes as in B-Y-T-E-S.

00:26:34.320 --> 00:26:37.760
And get the full show notes at pythonbytes.fm.

00:26:37.760 --> 00:26:42.100
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:42.100 --> 00:26:44.800
We're always on the lookout for sharing something cool.

00:26:44.800 --> 00:26:48.180
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:48.180 --> 00:26:51.800
Thank you for listening and sharing this podcast with your friends and colleagues.

