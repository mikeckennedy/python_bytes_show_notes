
00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:13.040
This is episode 168 recorded February 5th 2020. I'm Brian Okken. I'm Michael Kennedy. And I'm Kojo


00:00:13.040 --> 00:00:17.600
Idrisa. Yay we have Kojo here as a special guest. Hey Kojo welcome to the show happy you're here.


00:00:17.600 --> 00:00:22.640
Hello thank you thank you. This episode is brought to you by DigitalOcean. Thank you DigitalOcean.


00:00:22.640 --> 00:00:27.200
Michael I'm actually confused about this. It's a little bit of a funny name right so let me tell


00:00:27.200 --> 00:00:29.360
tell you about Donkey Car.


00:00:29.360 --> 00:00:31.680
Have either of you participated in,


00:00:31.680 --> 00:00:36.320
or at least watched a proper RC remote control car race?


00:00:36.320 --> 00:00:38.600
- Not really, just the sort of the random ones,


00:00:38.600 --> 00:00:40.780
like random people have random remote control cars


00:00:40.780 --> 00:00:42.040
and running them around the neighborhood,


00:00:42.040 --> 00:00:44.600
but not an actual official proper one, no I have not.


00:00:44.600 --> 00:00:45.440
- Brian?


00:00:45.440 --> 00:00:47.200
- Yeah, I just watched a little video that you sent me


00:00:47.200 --> 00:00:50.120
and it was quite exciting.


00:00:50.120 --> 00:00:52.580
- These are really weird things.


00:00:52.580 --> 00:00:53.640
If you've never seen one of these,


00:00:53.640 --> 00:00:56.360
I put a link to like a three minute video from GoPro,


00:00:56.360 --> 00:00:58.860
where they put a GoPro on one of these little RC race cars.


00:00:58.860 --> 00:01:00.880
I used to have one of these when I was a kid,


00:01:00.880 --> 00:01:03.380
like high school, maybe late middle school,


00:01:03.380 --> 00:01:04.220
and they were insane.


00:01:04.220 --> 00:01:05.720
They're these little cars and you remote control


00:01:05.720 --> 00:01:07.360
and they go like 35 miles an hour.


00:01:07.360 --> 00:01:10.600
They're super quick and responsive, really interesting.


00:01:10.600 --> 00:01:13.900
But what would be even cooler is if I could use Python


00:01:13.900 --> 00:01:16.520
to like win an RC car race, don't you think?


00:01:16.520 --> 00:01:18.280
- Ah, yeah, that would be cool.


00:01:18.280 --> 00:01:19.320
You're right.


00:01:19.320 --> 00:01:21.320
- Yeah, I mean, you've already got the GoPro on there.


00:01:21.320 --> 00:01:24.380
It's already got a camera that's high quality.


00:01:24.380 --> 00:01:29.140
So the thing that I want to talk about is this thing called Donkey Car.


00:01:29.140 --> 00:01:35.420
And it's a minimalist, modular, self-driving library, self-driving car library for Python.


00:01:35.420 --> 00:01:39.840
So people are always looking for ways to get kids into programming or themselves to get


00:01:39.840 --> 00:01:44.060
into programming if they don't have some formal project.


00:01:44.060 --> 00:01:47.760
Like I want to build this website or I've got this data science thing I want to do.


00:01:47.760 --> 00:01:50.300
Something like a self-driving car I think could be really interesting.


00:01:50.300 --> 00:01:56.740
They have some much tamer vehicles that they have pictures of on the Donkey Car repo where


00:01:56.740 --> 00:01:59.140
it's more like little Lego cars and stuff.


00:01:59.140 --> 00:02:03.980
But you basically have these little tiny cars and you can put cameras on them and you put


00:02:03.980 --> 00:02:06.660
a Raspberry Pi and then you teach it how to drive.


00:02:06.660 --> 00:02:08.020
I think that's pretty awesome.


00:02:08.020 --> 00:02:10.100
Yeah, that looks fun.


00:02:10.100 --> 00:02:11.100
Doesn't it?


00:02:11.100 --> 00:02:12.100
Yeah.


00:02:12.100 --> 00:02:15.940
So it says you can use Donkey Car if you want to make an RC car drive itself and win an


00:02:15.940 --> 00:02:16.940
RC car race.


00:02:16.940 --> 00:02:17.940
That would be awesome.


00:02:17.940 --> 00:02:21.940
If you want to compete in self-driving races like DIY robo cars,


00:02:21.940 --> 00:02:26.940
or you know, the great robot race from DARPA way back in the day.


00:02:26.940 --> 00:02:30.940
I guess that's probably a little bit quiet enough, but still quite cool.


00:02:30.940 --> 00:02:33.940
If you want to experiment with like autopilot or mapping computer vision


00:02:33.940 --> 00:02:38.940
and neural networks, if you want to log sensor data while you're driving around.


00:02:38.940 --> 00:02:44.940
If you want to drive a car via an Xbox game controller, that's pretty cool.


00:02:44.940 --> 00:02:48.360
'Cause you can then communicate with the controller


00:02:48.360 --> 00:02:50.760
over to the Raspberry Pi and then just tell it to drive


00:02:50.760 --> 00:02:52.380
however it tells it.


00:02:52.380 --> 00:02:54.160
Yeah, a lot of cool stuff.


00:02:54.160 --> 00:02:57.480
And yeah, I think if you have anything to do


00:02:57.480 --> 00:02:59.840
with like you're playing with AI and computer vision,


00:02:59.840 --> 00:03:03.480
this seems like a really fun way to make it interactive


00:03:03.480 --> 00:03:06.560
or kind of exciting without a lot of code.


00:03:06.560 --> 00:03:07.520
It's pretty simple actually.


00:03:07.520 --> 00:03:10.600
- Do you know if any of these robo cars are going,


00:03:10.600 --> 00:03:14.860
are the self-driving or going like 35 miles an hour?


00:03:14.860 --> 00:03:16.560
- I don't see, well, when I watched the video


00:03:16.560 --> 00:03:18.140
that I included, like on one hand,


00:03:18.140 --> 00:03:19.500
like I don't see why it would be hard


00:03:19.500 --> 00:03:20.660
'cause they have these little rails


00:03:20.660 --> 00:03:22.660
and it's kind of clear where the edge of the track is.


00:03:22.660 --> 00:03:24.660
You could even put up markers,


00:03:24.660 --> 00:03:27.140
like little things that you could like shine,


00:03:27.140 --> 00:03:30.740
you know, have detected with the computer vision.


00:03:30.740 --> 00:03:34.260
But they're so bouncy, they're incredibly jiggly


00:03:34.260 --> 00:03:35.180
and it's really hard.


00:03:35.180 --> 00:03:36.540
Like I think it would be a little bit hard,


00:03:36.540 --> 00:03:38.380
so maybe slow, but I don't know.


00:03:38.380 --> 00:03:39.740
My joke about winning the race,


00:03:39.740 --> 00:03:40.940
it seems a little far-fetched.


00:03:40.940 --> 00:03:42.380
You'd have to have a really stable camera,


00:03:42.380 --> 00:03:43.820
which I guess you could get.


00:03:43.820 --> 00:03:45.460
But anyway, I think this is a fun one.


00:03:45.460 --> 00:03:47.840
So if people are out there looking to play


00:03:47.840 --> 00:03:50.600
with a little AI computer vision, this seems cool.


00:03:50.600 --> 00:03:51.440
Check it out.


00:03:51.440 --> 00:03:52.260
- It's very interesting.


00:03:52.260 --> 00:03:53.100
- Yeah, for sure.


00:03:53.100 --> 00:03:55.180
Brian, there's a bit of a sad one coming up, right?


00:03:55.180 --> 00:03:56.020
What's going on here?


00:03:56.020 --> 00:03:57.700
- Yeah, rest in peace.


00:03:57.700 --> 00:04:01.860
I ran across an interesting article by Nick Timkovic,


00:04:01.860 --> 00:04:06.620
I think, called "RIP Pipenv, Tried Too Hard,


00:04:06.620 --> 00:04:08.900
"Do What You Need With pip Tools."


00:04:08.900 --> 00:04:13.900
So I didn't realize that PIPENV was kind of stagnating.


00:04:13.900 --> 00:04:16.420
There's not been a release in 2019.


00:04:16.420 --> 00:04:18.700
I didn't check to see if maybe they slipped one in


00:04:18.700 --> 00:04:22.960
in 2020 yet, but apparently there's some problems


00:04:22.960 --> 00:04:27.380
with the sub-dependencies and complicated release process


00:04:27.380 --> 00:04:28.460
or something, but--


00:04:28.460 --> 00:04:30.820
- Well, I wanna add one really bit of,


00:04:30.820 --> 00:04:31.980
a small bit of detail here,


00:04:31.980 --> 00:04:34.240
because I think it's interesting.


00:04:34.240 --> 00:04:38.140
There's not been a release of PIPENV in 2019,


00:04:38.140 --> 00:04:40.580
And that makes it sound like all people have walked away, haven't done anything.


00:04:40.580 --> 00:04:45.260
There are 650 commits to that project and there's still not a release in the year, which


00:04:45.260 --> 00:04:46.500
is kind of rough, right?


00:04:46.500 --> 00:04:49.860
Like the people who worked on it, if that stuff's not getting released, that can't be


00:04:49.860 --> 00:04:50.860
great.


00:04:50.860 --> 00:04:52.260
Yeah, so I'm not sure what's going on.


00:04:52.260 --> 00:04:55.860
But the main emphasis of the article really isn't that.


00:04:55.860 --> 00:05:00.940
I mean, whether or not Pipenv survives or it's really dead, I don't think it's dead.


00:05:00.940 --> 00:05:02.860
I don't know what the state of it is.


00:05:02.860 --> 00:05:09.940
But one of the benefits that we saw with pipenv was this idea of pinning everything and using


00:05:09.940 --> 00:05:15.940
like having a pip file and a pip lock file or a lock file that says these are the packages


00:05:15.940 --> 00:05:17.560
that I really depend on.


00:05:17.560 --> 00:05:23.220
And then all of those plus all of the sub packages, I put those in another file, a lock


00:05:23.220 --> 00:05:29.360
file with their hashes so that I can know that I can reproduce that environment.


00:05:29.360 --> 00:05:30.860
And that's a really cool idea.


00:05:30.860 --> 00:05:32.660
I like the concept.


00:05:32.660 --> 00:05:35.900
of the bulk of the article is just basically saying you can do that


00:05:35.900 --> 00:05:40.940
yourself without pipenv. You can use pipcompile that comes from piptools and


00:05:40.940 --> 00:05:45.500
there's a generate hashes function but basically you do that yourself. You just


00:05:45.500 --> 00:05:49.260
have a smaller requirements file that just has what you really need, your


00:05:49.260 --> 00:05:54.980
direct dependencies, and then you can generate a hash file that is directly


00:05:54.980 --> 00:06:00.020
readable by pip. You can pip install from this this other generated hash


00:06:00.020 --> 00:06:04.620
requirements file. The other part of PIPenv that people are using is virtual


00:06:04.620 --> 00:06:08.780
environment support, but I guess I'm on board with Nick to say I don't


00:06:08.780 --> 00:06:13.620
understand why these were bundled into one tool and I'm using virtual VENV


00:06:13.620 --> 00:06:18.860
that built in just fine. I don't really need PIPenv for that. So I think I'm


00:06:18.860 --> 00:06:23.660
gonna try to incorporate this possibly in my workflow, at least on one project


00:06:23.660 --> 00:06:26.700
to see how it goes. Yeah that's pretty cool. I didn't realize you could output


00:06:26.700 --> 00:06:31.400
the requirements.txt with the hashes using pip compile either.


00:06:31.400 --> 00:06:34.300
That definitely was one of the selling points of pipenv was like


00:06:34.300 --> 00:06:38.800
everything is locked, not just by pinning the version, but by the hash as well


00:06:38.800 --> 00:06:40.800
to make sure that it couldn't get messed up.


00:06:40.800 --> 00:06:43.000
Pipenv uses pip compile anyway, so...


00:06:43.000 --> 00:06:47.400
I see. And it uses pip file and pip file.lock.


00:06:47.400 --> 00:06:49.000
You know more about this than I do, Brian.


00:06:49.000 --> 00:06:53.500
Isn't pyproject.toml the new hotness instead of pip file?


00:06:53.500 --> 00:06:58.140
The pyproject.toml doesn't have, I don't think that it supports doing hashes and stuff like that.


00:06:58.140 --> 00:07:06.620
So they still kind of support different ideas. I think the pyproject.toml is, I'm not sure where


00:07:06.620 --> 00:07:12.860
they cross over, but there still is this difference between a library that you can use for


00:07:12.860 --> 00:07:18.700
lots of stuff with lots of different versions of things in an application. With an application,


00:07:18.700 --> 00:07:22.620
you definitely want to lock things down to know what you're doing.


00:07:22.620 --> 00:07:23.900
- For sure.


00:07:23.900 --> 00:07:27.120
Kujo, did you use pipenv any?


00:07:27.120 --> 00:07:28.980
What's your virtual environment preference?


00:07:28.980 --> 00:07:30.940
- So I used it a small amount.


00:07:30.940 --> 00:07:32.920
I never used it a huge amount.


00:07:32.920 --> 00:07:35.300
I think my virtual environment preference has been,


00:07:35.300 --> 00:07:36.980
well, I had been virtual env wrapper,


00:07:36.980 --> 00:07:40.040
but I've recently started using pyenv.


00:07:40.040 --> 00:07:42.540
Well, actually, I started using pyenv,


00:07:42.540 --> 00:07:46.400
but that's more for managing different versions of Python.


00:07:46.400 --> 00:07:47.240
- Right, right.


00:07:47.240 --> 00:07:49.080
I want this virtual environment to be Python 3.7


00:07:49.080 --> 00:07:52.180
and that one to 3.8 and Gasp, that one too.


00:07:52.180 --> 00:07:55.420
Yeah. And so, so I've been using PyEnv to manage different versions of Python,


00:07:55.420 --> 00:07:59.340
but then there's a PyEnv-VirtualEnv module.


00:07:59.340 --> 00:08:03.160
And so that lets, that makes it a little easier to create virtual environments,


00:08:03.160 --> 00:08:07.540
you know, as you switch between Python versions. But for me, so, pipenv,


00:08:07.540 --> 00:08:09.660
again, I'd never really gotten into using it,


00:08:09.660 --> 00:08:12.740
but having looked at it a little bit and I saw some of the early talks about it,


00:08:12.740 --> 00:08:15.060
you know, it introduced me to that idea of a lock file.


00:08:15.060 --> 00:08:19.460
And then my personal blog is Jekyll, which is in Ruby and Ruby uses that,


00:08:19.460 --> 00:08:21.820
a similar thing, that sort of gem lock file.


00:08:21.820 --> 00:08:28.060
And so just the familiarity with it there from pip and was helpful to me as far as having to try to sort out stuff with


00:08:28.060 --> 00:08:29.180
Jekyll because I don't.


00:08:29.180 --> 00:08:31.820
Jekyll is the only thing, the only Ruby project I use.


00:08:31.820 --> 00:08:33.540
It's the only time I ever really use Ruby.


00:08:33.540 --> 00:08:37.460
So it was helpful at least to be familiar with that concept there.


00:08:37.460 --> 00:08:38.820
Yeah, yeah, cool.


00:08:38.820 --> 00:08:44.820
And Brian, I'm very excited about Python 3.9 having the dash dash prompt dot.


00:08:44.820 --> 00:08:50.780
So you get the folder name without the extra bits that you have to put in there to make that happen in the shell.


00:08:50.780 --> 00:08:51.620
Yeah, that's gonna be cool.


00:08:51.660 --> 00:08:54.540
I love using prompt. Yeah, for sure. Gojo, what you got next?


00:08:54.540 --> 00:08:59.580
You're talking about string, string method called case fold. And this is something that's


00:08:59.580 --> 00:09:03.820
interesting. It actually just came up this morning, I was working on something this morning.


00:09:03.820 --> 00:09:11.260
And you can use case fold in places where you're trying to do comparisons without having


00:09:11.260 --> 00:09:15.500
to look at the case of a string. And so they call it caseless matching. And so the standard


00:09:15.500 --> 00:09:19.300
thing in Python, or the more common thing that you would do in Python is maybe you use


00:09:19.300 --> 00:09:21.700
is like the string method, like string.lower.


00:09:21.700 --> 00:09:23.500
And so you're not worried about whether someone


00:09:23.500 --> 00:09:25.980
types something in with uppercase or lowercase.


00:09:25.980 --> 00:09:26.980
And that works in a lot of situations.


00:09:26.980 --> 00:09:27.820
- Wait a minute, wait a minute.


00:09:27.820 --> 00:09:29.540
You're telling me that I've been doing it wrong


00:09:29.540 --> 00:09:30.900
for all these years?


00:09:30.900 --> 00:09:32.260
Completely wrong? - Shame on you.


00:09:32.260 --> 00:09:34.020
- Yes, I didn't.


00:09:34.020 --> 00:09:35.940
I knew the function case fold was here,


00:09:35.940 --> 00:09:37.500
but until you brought it up, I'm like,


00:09:37.500 --> 00:09:39.140
oh, whatever, like lowers.


00:09:39.140 --> 00:09:41.020
I've been doing it wrong.


00:09:41.020 --> 00:09:41.940
Carry on, this is awesome.


00:09:41.940 --> 00:09:42.780
I'm ready to hear about it.


00:09:42.780 --> 00:09:44.420
- Well, and so the interesting thing about this


00:09:44.420 --> 00:09:47.140
is that lower works in a lot of,


00:09:47.140 --> 00:09:49.420
It covers a lot of use cases,


00:09:49.420 --> 00:09:53.780
especially if you're using English or a similar language.


00:09:53.780 --> 00:09:55.820
It's interesting in the docs that case folding


00:09:55.820 --> 00:09:58.060
is similar to lower casing, but more aggressive,


00:09:58.060 --> 00:09:59.540
which is just a little funny to hear


00:09:59.540 --> 00:10:01.420
when my coworker's got a kick out of that.


00:10:01.420 --> 00:10:05.540
And I think where case fold becomes especially useful


00:10:05.540 --> 00:10:07.340
is if you're using a lot of Unicode characters.


00:10:07.340 --> 00:10:09.180
And I think, Michael, you had an example here,


00:10:09.180 --> 00:10:11.740
but so it stood out to me partially


00:10:11.740 --> 00:10:12.900
because I was working on a thing


00:10:12.900 --> 00:10:14.860
where I wanted to make sure cases,


00:10:14.860 --> 00:10:15.740
things were being compared


00:10:15.740 --> 00:10:16.900
and I didn't have to worry about the case


00:10:16.900 --> 00:10:18.500
what was entered versus what was expected.


00:10:18.500 --> 00:10:20.540
>> Right. Until today,


00:10:20.540 --> 00:10:21.900
I would have written dot lower dot


00:10:21.900 --> 00:10:23.020
strip and been happy with that.


00:10:23.020 --> 00:10:26.620
>> Exactly. I started looking for some other ways.


00:10:26.620 --> 00:10:28.060
I, in addition to other things,


00:10:28.060 --> 00:10:29.420
I lived in China for two and a half years,


00:10:29.420 --> 00:10:31.180
so I can read and write Mandarin,


00:10:31.180 --> 00:10:34.140
a functional ability to read and write Japanese.


00:10:34.140 --> 00:10:36.460
I taught myself to read and write Hangul.


00:10:36.460 --> 00:10:39.900
I tend to use Unicode characters


00:10:39.900 --> 00:10:43.220
maybe a little more frequently than the average American.


00:10:43.220 --> 00:10:46.320
For me, if I'm trying to build something and I'm


00:10:46.320 --> 00:10:49.740
concerned about handling text or case matching, I'm always


00:10:49.740 --> 00:10:52.680
interested in things that will support Unicode because the


00:10:52.680 --> 00:10:55.280
Unicode characters because, you know, of course, like emoji,


00:10:55.280 --> 00:10:58.240
probably the most popular Unicode characters among English


00:10:58.240 --> 00:11:01.480
speakers, but you also have a number of other languages where


00:11:01.480 --> 00:11:03.840
the entire language is represented in Unicode


00:11:03.840 --> 00:11:06.920
characters. So something like this, that will work in these


00:11:06.920 --> 00:11:09.600
in these situations, where you get Unicode characters is


00:11:09.600 --> 00:11:11.920
important. So like I said, I just discovered that this


00:11:11.920 --> 00:11:14.280
morning and ended up using it in a test I was writing and I'm


00:11:14.280 --> 00:11:17.180
I'm like, okay, I can see how I can use this going forward.


00:11:17.180 --> 00:11:18.760
And I think, Michael, I think you've got


00:11:18.760 --> 00:11:20.920
like a slightly more fleshed out example.


00:11:20.920 --> 00:11:23.040
- Yeah, yeah, so let me just give people an example


00:11:23.040 --> 00:11:25.460
because aggressively lowercasing,


00:11:25.460 --> 00:11:26.560
that doesn't mean anything to me.


00:11:26.560 --> 00:11:28.000
When I read this, I'm like, I still have no,


00:11:28.000 --> 00:11:30.400
I read what the docs said about it.


00:11:30.400 --> 00:11:32.160
I'm like, I still have no idea what this means.


00:11:32.160 --> 00:11:35.360
Like if I had like Michael dash Kennedy


00:11:35.360 --> 00:11:37.360
with the dash be down, like underscore now,


00:11:37.360 --> 00:11:39.720
like, I mean, I just, I don't even know, right?


00:11:39.720 --> 00:11:43.160
And so I found this example and it has two strings,


00:11:43.160 --> 00:11:45.080
Der Fluss, the river in German.


00:11:45.080 --> 00:11:48.160
And there's sort of the formal German way to spell it,


00:11:48.160 --> 00:11:50.240
where you have what's called an S-set.


00:11:50.240 --> 00:11:52.080
It's like, looks like a beta symbol,


00:11:52.080 --> 00:11:54.160
which is like two sharp, two S's together,


00:11:54.160 --> 00:11:56.060
like a super S.


00:11:56.060 --> 00:11:58.080
And then you could just, if you are on like an American


00:11:58.080 --> 00:11:58.920
or English keyboard, you're like,


00:11:58.920 --> 00:11:59.880
"I can't find that character."


00:11:59.880 --> 00:12:03.100
I'm just gonna type two S's as common in German.


00:12:03.100 --> 00:12:05.280
And if you case fold those,


00:12:05.280 --> 00:12:07.680
it will actually convert Der Fluss with the S-set,


00:12:07.680 --> 00:12:12.000
the like the beta thing, down to lowercase F-L-U-S-S


00:12:12.000 --> 00:12:13.720
and compare it, which I had no idea.


00:12:13.720 --> 00:12:14.560
That's pretty cool.


00:12:14.560 --> 00:12:17.240
So it'll take these letters that are,


00:12:17.240 --> 00:12:20.160
I guess, considered uppercase, but not quite the same,


00:12:20.160 --> 00:12:23.040
and it'll sort of normalize the string more than just lower,


00:12:23.040 --> 00:12:23.880
is the way I see it.


00:12:23.880 --> 00:12:26.160
It's like the canonical lowercase version of it.


00:12:26.160 --> 00:12:30.240
- Yeah, and I've seen the example like that,


00:12:30.240 --> 00:12:32.880
and I have no knowledge of German at all,


00:12:32.880 --> 00:12:35.960
but it was useful to see that example.


00:12:35.960 --> 00:12:39.040
It's like, okay, here's another concrete reason


00:12:39.040 --> 00:12:40.520
why you might wanna use this.


00:12:40.520 --> 00:12:45.160
But I think also with a lot of applications, be they web applications or standalone apps,


00:12:45.160 --> 00:12:49.240
when people are dealing with internationalization and localization, that kind of thing,


00:12:49.240 --> 00:12:56.120
having some sort of a method for caseless matching that you know will work across Unicode characters,


00:12:56.120 --> 00:13:00.040
then you know, it's not going to break once you get outside of, you know, the 26 letters of the,


00:13:00.040 --> 00:13:02.440
you know, the English alphabet is helpful. So.


00:13:02.440 --> 00:13:04.120
Yeah. Brian, did you know about this?


00:13:04.120 --> 00:13:09.560
I'm like blown away. I've always been doing lowercase. And so I'm going to change right away.


00:13:09.560 --> 00:13:10.280
You've been doing it wrong.


00:13:10.280 --> 00:13:14.520
I think it's pretty new from like, I think it's got added in Python 3.3.


00:13:14.520 --> 00:13:17.920
So it's not, you know, it's not like, you know, it's not like a thing that you haven't


00:13:17.920 --> 00:13:20.200
been using for a very long time because it hasn't been around that long.


00:13:20.200 --> 00:13:25.840
But is I think what another thing that drew me to it was that the idea that in Python


00:13:25.840 --> 00:13:29.960
3 going forward, everything is, you know, everything is Unicode, the default sort of


00:13:29.960 --> 00:13:31.800
text handling, what is Unicode.


00:13:31.800 --> 00:13:34.920
And so it's not brand new, but it's also not like super old.


00:13:34.920 --> 00:13:37.680
So if you haven't been using it, you haven't been, you know, missing out in.


00:13:37.680 --> 00:13:40.360
And again, string.lower still works


00:13:40.360 --> 00:13:41.960
unless you run into a situation


00:13:41.960 --> 00:13:43.760
where you were actively having to deal


00:13:43.760 --> 00:13:46.160
with Unicode characters, which a lot of us,


00:13:46.160 --> 00:13:48.280
honestly, a lot of folks here in the US don't.


00:13:48.280 --> 00:13:49.580
- Yeah, yeah, pretty interesting.


00:13:49.580 --> 00:13:50.620
Thank you, that's awesome.


00:13:50.620 --> 00:13:52.100
- This episode of Byte on Bytes


00:13:52.100 --> 00:13:54.220
is sponsored by DigitalOcean.


00:13:54.220 --> 00:13:56.920
They have awesome infrastructure and awesome product,


00:13:56.920 --> 00:13:58.780
and we use them in our services.


00:13:58.780 --> 00:14:01.780
Do you have a memory-intensive workload?


00:14:01.780 --> 00:14:03.860
Maybe something like a high-performance SQL


00:14:03.860 --> 00:14:06.560
or NoSQL database or an in-memory cache,


00:14:06.560 --> 00:14:11.680
like maybe Redis or some indexes or some kind of large data analysis runtime.


00:14:11.680 --> 00:14:15.440
Well, check out digital oceans, new memory optimized droplets.


00:14:15.440 --> 00:14:19.440
They're optimized, especially for these high memory workloads.


00:14:19.440 --> 00:14:25.000
So check them out at python bites.fm/digitalocean and you can get a hundred dollar credit.


00:14:25.000 --> 00:14:25.320
Awesome.


00:14:25.320 --> 00:14:25.560
Yeah.


00:14:25.560 --> 00:14:28.080
Thanks to digital ocean for sponsoring the show, Brian.


00:14:28.080 --> 00:14:31.440
I feel like we're kind of in the same groove this week.


00:14:31.480 --> 00:14:36.180
You pick this rest in peace PIP-ENF, which to be clear, the PIP-ENF people


00:14:36.180 --> 00:14:37.800
didn't say rest in peace our project.


00:14:37.800 --> 00:14:40.680
Someone from the outside looked at it and made this declaration, but it's


00:14:40.680 --> 00:14:42.120
still an interesting article, right?


00:14:42.120 --> 00:14:42.440
Yes.


00:14:42.440 --> 00:14:47.120
Something that I have often wondered about is like, you see a lot of times


00:14:47.120 --> 00:14:48.920
people talking about virtual ENF.


00:14:48.920 --> 00:14:53.800
And this was like the way to create virtual environments prior to VE and


00:14:53.800 --> 00:14:55.300
V being built in Python, right?


00:14:55.300 --> 00:14:55.560
Yeah.


00:14:55.560 --> 00:14:55.880
Yeah.


00:14:55.880 --> 00:14:57.120
There's a new release of it.


00:14:57.120 --> 00:14:59.280
And my first thought was why?


00:14:59.280 --> 00:15:00.760
Why is there a new release of it?


00:15:01.040 --> 00:15:05.580
Because Python 3-M VMV, whatever I'm going to type after that,


00:15:05.580 --> 00:15:07.380
seems like it's solving my problem for me.


00:15:07.380 --> 00:15:09.220
And so why would you continue to work on this?


00:15:09.220 --> 00:15:13.920
You know, like it's, we're technically in the post Python 2 era,


00:15:13.920 --> 00:15:15.920
officially, right? I mean, not in practice.


00:15:15.920 --> 00:15:17.920
There's a lot of Python 2 still out there, but


00:15:17.920 --> 00:15:21.620
it is now no longer supported being past January 1st, 2020.


00:15:21.620 --> 00:15:23.620
So why work on this thing, right?


00:15:23.620 --> 00:15:25.620
Well, Brian Skin said in this,


00:15:25.620 --> 00:15:27.280
and I'm like, alright, I'll take a look.


00:15:27.280 --> 00:15:29.280
Brian usually recommends good stuff.


00:15:29.280 --> 00:15:32.820
And it's this announcement by Bernat Gabor,


00:15:32.820 --> 00:15:34.280
who is working on the project and say,


00:15:34.280 --> 00:15:37.760
"Hey, we just did a major release of virtual imp."


00:15:37.760 --> 00:15:39.760
I'm like, "Okay, I gotta figure out


00:15:39.760 --> 00:15:41.420
"why this is still a thing."


00:15:41.420 --> 00:15:43.480
And he said, "Look, there's a couple of pain points


00:15:43.480 --> 00:15:47.240
"that exist with current, you know, the dash MV and V style,


00:15:47.240 --> 00:15:48.960
"that creating a virtual environment is slow.


00:15:48.960 --> 00:15:52.080
"It takes around three seconds, even in offline mode,


00:15:52.080 --> 00:15:54.200
"unless you're on Windows, then it takes longer."


00:15:54.200 --> 00:15:55.100
I don't know how much longer,


00:15:55.100 --> 00:15:57.700
but it seems to be that it copies more


00:15:57.700 --> 00:16:00.380
into the virtual environment rather than sim-linking it on Windows,


00:16:00.380 --> 00:16:02.140
so it seems like it's a little slower.


00:16:02.140 --> 00:16:04.140
The other thing is that the API


00:16:04.140 --> 00:16:08.820
used around PEP 405 is great if you just want to create virtual environments,


00:16:08.820 --> 00:16:11.540
but it doesn't allow you to target


00:16:11.540 --> 00:16:13.860
very much around that or


00:16:13.860 --> 00:16:17.700
describe the target environment without actually creating the environment.


00:16:17.700 --> 00:16:18.980
And then


00:16:18.980 --> 00:16:22.060
the duality of virtualenv versus venv.


00:16:22.060 --> 00:16:24.060
So Python 3.4 has


00:16:24.060 --> 00:16:27.420
venv added as I said, so in theory you could just switch away,


00:16:27.420 --> 00:16:30.220
But there's some other benefits that he talks about as well.


00:16:30.220 --> 00:16:32.780
So over specifically over VMV,


00:16:32.780 --> 00:16:36.700
which is the ability to discover and use alternate pythons.


00:16:36.700 --> 00:16:40.700
Right, I can say -p2 to create a virtual python2 virtual environment or


00:16:40.700 --> 00:16:45.980
kind of like you were saying, Kojo, I could say -p3.8 or 3.7


00:16:45.980 --> 00:16:50.620
or even -ppy3 and get one of those environments created.


00:16:50.620 --> 00:16:53.660
So I can select from the different installed pythons


00:16:53.660 --> 00:16:55.420
as I create these, which is pretty cool.


00:16:55.420 --> 00:17:00.940
It also packages out of the box out of the box it packages the wheel package as part of the seed


00:17:00.940 --> 00:17:06.380
pack or caches part of the seed, the wheels as part of the seed packages, which after it's been


00:17:06.380 --> 00:17:11.500
created and cached, and speeds up the install time, especially for things like micro whiskey,


00:17:11.500 --> 00:17:17.340
or whatever, like that thing takes 15 seconds to pip install, at least. So making that faster


00:17:17.340 --> 00:17:23.420
seems awesome. And it's also guaranteed to work in places where V and V is not included with Python


00:17:23.420 --> 00:17:29.180
by default. For example, if you get the Debian or certain versions of Ubuntu, and you say


00:17:29.180 --> 00:17:36.220
Python 3-mvenv, it'll say venv is not installed on this computer and you've got to apt install it,


00:17:36.220 --> 00:17:42.860
right, which is kind of funky. And then around that as well, you can also, because it's pip


00:17:42.860 --> 00:17:48.700
installed, not apt installed, it will, you know, you can upgrade it right away with pip whenever


00:17:48.700 --> 00:17:54.140
there's new changes and version it separately than what the OS is versioning VNV. So I don't know,


00:17:54.140 --> 00:17:57.180
what do you guys think? Does that, that sounds like a pretty good reason for it to be around


00:17:57.180 --> 00:18:03.900
actually. All those reasons. Yeah. The downside of it's confusing to have two. It is confusing


00:18:03.900 --> 00:18:07.340
to have two. Well, and I was confused about as well, and I'm not saying I'm switching to it


00:18:07.340 --> 00:18:12.140
necessarily, but I can see why that it's pretty interesting. I guess I'm sort of between the two


00:18:12.140 --> 00:18:17.180
of you from the standpoint of, I like that there is a lot of activity in this space as far as


00:18:17.180 --> 00:18:23.660
Both, like we just talked about Pipend with virtual environments and with installing and


00:18:23.660 --> 00:18:25.620
package management, that sort of thing.


00:18:25.620 --> 00:18:27.260
It's sort of a tricky issue.


00:18:27.260 --> 00:18:31.380
And so the fact that people are trying to improve, people are looking at pain points


00:18:31.380 --> 00:18:34.060
and trying to build tools to improve on those is fantastic.


00:18:34.060 --> 00:18:38.600
I think sort of the confusing part is, and again, as someone who just started a new job


00:18:38.600 --> 00:18:41.220
and I've just been going through the process of setting up a new machine.


00:18:41.220 --> 00:18:43.220
You've been installing all the things, right?


00:18:43.220 --> 00:18:46.180
Well, either installing all the things or unfortunately,


00:18:46.180 --> 00:18:48.900
you run into a namespace collusion thing


00:18:48.900 --> 00:18:51.540
where almost everything is called like


00:18:51.540 --> 00:18:56.820
pyenv something or pipvenv.


00:18:56.820 --> 00:18:59.020
A lot of the names are very similar.


00:18:59.020 --> 00:19:01.900
It's one of those things where it's


00:19:01.900 --> 00:19:04.340
the good side and the bad side of the coin.


00:19:04.340 --> 00:19:07.140
Again, it's great that these things are being worked on


00:19:07.140 --> 00:19:08.780
because especially with Python,


00:19:08.780 --> 00:19:11.540
you want to have some separation,


00:19:11.540 --> 00:19:13.620
some sort of a dependency management.


00:19:13.620 --> 00:19:15.460
And so wanting to make sure that you're developing


00:19:15.460 --> 00:19:16.660
the right version of Python


00:19:16.660 --> 00:19:19.540
and that you're not overriding things or creating conflicts.


00:19:19.540 --> 00:19:21.860
But I guess it's a situation where


00:19:21.860 --> 00:19:24.820
one or two dominant solutions show up,


00:19:24.820 --> 00:19:25.980
we'll sort of standardize on those.


00:19:25.980 --> 00:19:27.980
But now there's a little bit of confusion


00:19:27.980 --> 00:19:29.300
as we get to that point.


00:19:29.300 --> 00:19:31.380
- Yeah, yeah, it's good to see a thousand flowers blooming,


00:19:31.380 --> 00:19:36.380
but it is tricky to know which one's gonna be around, right?


00:19:36.380 --> 00:19:37.740
- Which flower do you pick?


00:19:37.740 --> 00:19:40.420
You know, there are literally a thousand of them blooming.


00:19:40.420 --> 00:19:41.860
- Exactly, exactly.


00:19:41.860 --> 00:19:42.900
Brian, what you got next for us?


00:19:42.900 --> 00:19:44.640
- Well, a little bit of testing.


00:19:44.640 --> 00:19:46.860
I don't know if we've talked much about hypothesis,


00:19:46.860 --> 00:19:49.320
but people probably know about hypothesis,


00:19:49.320 --> 00:19:50.340
property-based testing.


00:19:50.340 --> 00:19:52.340
- Hypothesis is kind of mind-blowing a little bit,


00:19:52.340 --> 00:19:53.180
to be honest.


00:19:53.180 --> 00:19:55.740
- It isn't a silver bullet, but it's kind of a cool thing.


00:19:55.740 --> 00:19:59.980
So I am highlighting a project which is relatively new


00:19:59.980 --> 00:20:02.940
by Zach Hatfield Dodds and Paul Gansel,


00:20:02.940 --> 00:20:05.300
or two people working on it so far.


00:20:05.300 --> 00:20:08.180
This is the idea of adding property-based tests


00:20:08.180 --> 00:20:11.220
for the Python standard library and for the built-ins.


00:20:11.220 --> 00:20:14.420
And their comments are that the CPython's


00:20:14.420 --> 00:20:17.400
existing test suite is actually very good,


00:20:17.400 --> 00:20:20.140
but bugs do still slip through occasionally,


00:20:20.140 --> 00:20:23.020
and maybe throwing some property-based testing tools


00:20:23.020 --> 00:20:25.540
at some parts of it could help.


00:20:25.540 --> 00:20:27.180
It's not a magic bullet,


00:20:27.180 --> 00:20:29.220
but computer-assisted testing techniques


00:20:29.220 --> 00:20:31.900
routinely try inputs that humans wouldn't,


00:20:31.900 --> 00:20:35.180
and hypothesis is what we got for Python, so why not?


00:20:35.180 --> 00:20:38.260
There's not very much covered yet in this project.


00:20:38.260 --> 00:20:40.180
So I'm highlighting it to try to get other people


00:20:40.180 --> 00:20:41.960
that are interested on board,


00:20:41.960 --> 00:20:44.540
but they want to try to have a compelling proof of concept


00:20:44.540 --> 00:20:48.420
by PyCon US this year to be running as a,


00:20:48.420 --> 00:20:51.260
and to see if it'd be worthwhile to have it running


00:20:51.260 --> 00:20:54.860
as part of the Python continuous integration suite


00:20:54.860 --> 00:20:56.460
to see how that goes.


00:20:56.460 --> 00:20:59.580
I think it's really my view on the hypothesis really


00:20:59.580 --> 00:21:02.580
is that it's especially geared towards


00:21:02.580 --> 00:21:05.140
helpful for algorithmic pure functions.


00:21:05.140 --> 00:21:08.580
And in a lot of cases where you have like two functions


00:21:08.580 --> 00:21:11.480
that work kind of in opposite directions,


00:21:11.480 --> 00:21:12.700
so you can do round trip,


00:21:12.700 --> 00:21:16.380
it's easier to set up a test for hypothesis to see,


00:21:16.380 --> 00:21:18.380
like for instance, encode or decode,


00:21:18.380 --> 00:21:21.460
you can take some sort of string or something and encode it


00:21:21.460 --> 00:21:23.820
and then use the decode to make sure that you've got


00:21:23.820 --> 00:21:26.220
the final output is the same as your input.


00:21:26.220 --> 00:21:27.860
These are easier tests.


00:21:27.860 --> 00:21:30.100
Functions that have, that are not pure,


00:21:30.100 --> 00:21:32.320
that have state, that depend on state,


00:21:32.320 --> 00:21:35.120
those are harder things to test with hypothesis.


00:21:35.120 --> 00:21:38.080
So I think there's actually quite in that kind of


00:21:38.080 --> 00:21:40.440
applies to a whole bunch of the standard library.


00:21:40.440 --> 00:21:42.720
So I think there's a whole bunch of stuff that could be


00:21:42.720 --> 00:21:45.200
tested more thoroughly with hypothesis.


00:21:45.200 --> 00:21:46.120
So this is pretty cool.


00:21:46.120 --> 00:21:48.120
- Yeah, it's a really interesting way of testing


00:21:48.120 --> 00:21:49.360
and I'm glad to see the project.


00:21:49.360 --> 00:21:50.200
It looks cool.


00:21:50.200 --> 00:21:52.080
- One of the things I like about it is these are some people


00:21:52.080 --> 00:21:57.080
that I respect and having some people do these focused


00:21:57.080 --> 00:22:00.480
examples of how to use hypothesis in this way,


00:22:00.480 --> 00:22:02.740
I think will actually help as a teaching tool


00:22:02.740 --> 00:22:04.840
to help other people learn how to use it.


00:22:04.840 --> 00:22:08.360
- Yeah, I would love to see a big set


00:22:08.360 --> 00:22:12.360
of the standard unit tests for CPython


00:22:12.360 --> 00:22:14.560
moved over and maybe condensed


00:22:14.560 --> 00:22:17.080
and brought down into this hypothesis style


00:22:17.080 --> 00:22:19.800
to see what the two sets of test suites look like.


00:22:19.800 --> 00:22:20.880
That would be interesting.


00:22:20.880 --> 00:22:22.760
Feels like a lot of work, that would be interesting.


00:22:22.760 --> 00:22:26.040
- Oh, but even a specific case of taking one,


00:22:26.040 --> 00:22:28.040
what are the functional tests


00:22:28.040 --> 00:22:30.660
that exist in CPython already.


00:22:30.660 --> 00:22:34.040
What do those look like compared to the property-based test?


00:22:34.040 --> 00:22:35.240
They're testing different things.


00:22:35.240 --> 00:22:37.720
So I think it'd be cool to see them side by side too.


00:22:37.720 --> 00:22:38.560
That's neat.


00:22:38.560 --> 00:22:41.280
- Yes, and so property-based testing is a thing that,


00:22:41.280 --> 00:22:43.860
I saw you in my prior job, I did most of the QA.


00:22:43.860 --> 00:22:45.820
And so I started to look into property-based testing.


00:22:45.820 --> 00:22:48.080
It's one of those things that it sounds very interesting


00:22:48.080 --> 00:22:50.080
and that something that I'd like to know more about


00:22:50.080 --> 00:22:51.820
and just have another time to dig into,


00:22:51.820 --> 00:22:54.280
but this project looks interesting.


00:22:54.280 --> 00:22:57.660
And it also kind of flows right into my topic.


00:22:57.660 --> 00:22:59.540
So the people that you were just talking about,


00:22:59.540 --> 00:23:01.940
Zach Haskell-Dowds and Paul,


00:23:01.940 --> 00:23:05.060
they are doing a tutorial on property-based testing.


00:23:05.060 --> 00:23:07.580
And so what I wanted to talk about was just,


00:23:07.580 --> 00:23:08.740
what time is it now?


00:23:08.740 --> 00:23:09.580
Three in my time.


00:23:09.580 --> 00:23:12.020
So about two hours ago, I got an email from PyCon


00:23:12.020 --> 00:23:13.820
saying that the PyCon tutorials,


00:23:13.820 --> 00:23:15.580
the schedule for the PyCon US tutorials,


00:23:15.580 --> 00:23:18.540
PyCon US 2020, the schedule for those tutorials


00:23:18.540 --> 00:23:21.340
is up and available and you can register for them now.


00:23:21.340 --> 00:23:25.300
And so if you are thinking about going to PyCon,


00:23:25.300 --> 00:23:27.180
depending on what you do,


00:23:27.180 --> 00:23:31.020
different people, you know, some people work in places where their companies would just


00:23:31.020 --> 00:23:32.660
send them PyCon and it's not a big deal.


00:23:32.660 --> 00:23:35.800
Other people have to make a business case to try to sort of convince their organizations


00:23:35.800 --> 00:23:37.020
to let them go.


00:23:37.020 --> 00:23:41.480
If you are in a situation where you need to make a business case, the tutorials are often


00:23:41.480 --> 00:23:46.700
an excellent tool for that because you can get a lot of high quality training from people


00:23:46.700 --> 00:23:49.500
who are very knowledgeable in their field.


00:23:49.500 --> 00:23:55.940
So one of the tutorials is actually an introduction to property-based testing by the same people


00:23:55.940 --> 00:23:57.540
that Brian was just talking about.


00:23:57.540 --> 00:24:00.620
So there's a link here to PyCon.org.


00:24:00.620 --> 00:24:02.820
So there's a full schedule of the different tutorials


00:24:02.820 --> 00:24:05.620
that are available, and you can register for them now


00:24:05.620 --> 00:24:06.820
if you'd like.


00:24:06.820 --> 00:24:08.420
They do tend to sell out pretty quickly though.


00:24:08.420 --> 00:24:10.860
The PyCon tutorials tend to be pretty popular.


00:24:10.860 --> 00:24:12.180
They tend to sell out pretty quickly.


00:24:12.180 --> 00:24:15.780
The good news is that the videos of the tutorials


00:24:15.780 --> 00:24:16.620
are all available.


00:24:16.620 --> 00:24:20.540
So even if you weren't able to make it to a prior PyCon,


00:24:20.540 --> 00:24:22.660
the videos for those tutorials are available.


00:24:22.660 --> 00:24:24.700
And so you can look at past tutorials.


00:24:24.700 --> 00:24:27.340
the big advantage of actually going to PyCon


00:24:27.340 --> 00:24:29.040
and going to a tutorial is again,


00:24:29.040 --> 00:24:30.860
just the fact that you have a chance to interact


00:24:30.860 --> 00:24:32.440
with the people who are giving the tutorial


00:24:32.440 --> 00:24:34.700
and to be able to ask specific questions


00:24:34.700 --> 00:24:36.220
that meet your specific use case.


00:24:36.220 --> 00:24:37.740
- Yeah, and make connections, right?


00:24:37.740 --> 00:24:38.580
- Yeah, exactly.


00:24:38.580 --> 00:24:40.060
I mean, it makes connections with people.


00:24:40.060 --> 00:24:42.700
Again, like if you are trying to say, for instance,


00:24:42.700 --> 00:24:45.820
you know, just to say with the properties-based testing,


00:24:45.820 --> 00:24:48.180
if you're trying to implement that where you are,


00:24:48.180 --> 00:24:50.220
not only now is there this effort


00:24:50.220 --> 00:24:53.220
to bring some property-based testing into CPython,


00:24:53.220 --> 00:24:55.080
but you take your tutorial,


00:24:55.080 --> 00:24:56.400
you can actually interact with the people


00:24:56.400 --> 00:24:58.020
who are sort of leading this effort.


00:24:58.020 --> 00:25:00.320
And then if you have specific questions,


00:25:00.320 --> 00:25:02.280
you've made a connection where you can reach out


00:25:02.280 --> 00:25:04.160
to those folks and try to get some help


00:25:04.160 --> 00:25:06.560
as far as implementing, trying to figure out


00:25:06.560 --> 00:25:08.280
what to do to implement that kind of thing


00:25:08.280 --> 00:25:09.920
where you are to get a better understanding


00:25:09.920 --> 00:25:11.620
of the use cases, that sort of thing.


00:25:11.620 --> 00:25:14.120
So I went through, like I said,


00:25:14.120 --> 00:25:16.460
I think the schedule just went up an hour or so ago.


00:25:16.460 --> 00:25:17.760
So I went through and sort of looked


00:25:17.760 --> 00:25:19.680
at ones that were interesting to me.


00:25:19.680 --> 00:25:21.040
A couple of standouts to me were one,


00:25:21.040 --> 00:25:24.080
There's a tutorial on migration from Python 2 to Python 3.


00:25:24.080 --> 00:25:26.840
And as Michael was just talking about,


00:25:26.840 --> 00:25:28.120
Python 2 is now end of life.


00:25:28.120 --> 00:25:30.880
And so if you have not moved to Python 3,


00:25:30.880 --> 00:25:33.000
now is the time.


00:25:33.000 --> 00:25:33.920
- Gotta get busy.


00:25:33.920 --> 00:25:36.360
- Earlier was really a better time,


00:25:36.360 --> 00:25:38.360
but there's no time better than now


00:25:38.360 --> 00:25:39.600
if you haven't done it before.


00:25:39.600 --> 00:25:41.820
So a tutorial on that, that'll be really helpful.


00:25:41.820 --> 00:25:45.320
Another one called Welcome to CircuitPython by Katni Remboer.


00:25:45.320 --> 00:25:47.400
We were talking before with Michael's point


00:25:47.400 --> 00:25:49.080
about the remote control cars.


00:25:49.080 --> 00:25:51.000
If you're looking at ways to get started with programming


00:25:51.000 --> 00:25:52.480
to get other people into programming.


00:25:52.480 --> 00:25:55.960
Actually programming hardware is a good way to do that.


00:25:55.960 --> 00:25:58.920
You know, few things get people's attention, like writing some code and


00:25:58.920 --> 00:26:01.560
making it, making the light turn on and making the light change color and


00:26:01.560 --> 00:26:02.840
making it flash in a certain pattern.


00:26:02.840 --> 00:26:07.680
And so the circuit Python, I remember, I think at PyCon last year, everybody


00:26:07.680 --> 00:26:11.920
got a circuit Python playground board, like a small little mini circular board


00:26:11.920 --> 00:26:13.640
that had lights and various sensors on it.


00:26:13.640 --> 00:26:19.400
And so I've been to one of Katniss tutorials, like a PI Ohio in 2018, maybe.


00:26:19.800 --> 00:26:23.200
And so it's the circuit Python boards are really interesting.


00:26:23.200 --> 00:26:25.600
You've got lights and sensors and you can, you know,


00:26:25.600 --> 00:26:27.280
you can build all sorts of things with them.


00:26:27.280 --> 00:26:28.800
And it's a great gateway into programming.


00:26:28.800 --> 00:26:30.340
Great, great way to get started.


00:26:30.340 --> 00:26:31.580
Or if you're an experienced developer,


00:26:31.580 --> 00:26:32.540
a great way to start getting started


00:26:32.540 --> 00:26:33.980
with hardware programming.


00:26:33.980 --> 00:26:36.140
But then the intro to property-based testing.


00:26:36.140 --> 00:26:37.400
And then there's another tutorial called


00:26:37.400 --> 00:26:38.900
minimum viable documentation


00:26:38.900 --> 00:26:40.140
by a woman named Heidi Waterhouse.


00:26:40.140 --> 00:26:41.280
And I've met Heidi.


00:26:41.280 --> 00:26:42.500
We spoke at PyCaribbean together,


00:26:42.500 --> 00:26:44.040
I think a couple of years ago.


00:26:44.040 --> 00:26:48.440
But it's this idea about how do you set up


00:26:48.440 --> 00:26:51.780
a proper technical, you know, a proper documentation structure for your projects


00:26:51.780 --> 00:26:53.880
and focusing on the technical writing aspect.


00:26:53.880 --> 00:26:57.540
I think it's one of those things, especially as a project gets a larger,


00:26:57.540 --> 00:27:00.040
but even in a smaller project that gets overlooked sometimes there's so much


00:27:00.040 --> 00:27:02.480
focus on let's write code that does this thing.


00:27:02.480 --> 00:27:03.500
And that's fantastic.


00:27:03.500 --> 00:27:07.080
But what if you want to add a second person, add a third person to that project


00:27:07.080 --> 00:27:12.500
and your options then become either the first person sits down and just spends


00:27:12.500 --> 00:27:17.180
four hours talking to the new person, you know, or if you have good documentation,


00:27:17.180 --> 00:27:20.220
a good documentation structure,


00:27:20.220 --> 00:27:21.920
you can just point them to the documentation


00:27:21.920 --> 00:27:23.840
and let them get up to speed on their own.


00:27:23.840 --> 00:27:25.720
I mean, there are multiple other tutorials,


00:27:25.720 --> 00:27:27.640
but those are the ones that just sort of stood out to me.


00:27:27.640 --> 00:27:30.380
But if you haven't been to a PyCon US,


00:27:30.380 --> 00:27:31.840
the tutorials are, I think,


00:27:31.840 --> 00:27:34.140
one of the strong reasons to want to go.


00:27:34.140 --> 00:27:35.180
Among other things, you know,


00:27:35.180 --> 00:27:36.480
meeting people and making connections


00:27:36.480 --> 00:27:37.320
and that sort of stuff,


00:27:37.320 --> 00:27:40.040
and the open spaces and the hallway track.


00:27:40.040 --> 00:27:42.880
But the tutorials, especially also if you're in a situation


00:27:42.880 --> 00:27:45.240
where you need to make a business case to your company


00:27:45.240 --> 00:27:47.280
to get support to go.


00:27:47.280 --> 00:27:49.760
The tutorials are a really good option for that.


00:27:49.760 --> 00:27:50.720
- I love that angle.


00:27:50.720 --> 00:27:52.720
And I also approached it the same way that you did.


00:27:52.720 --> 00:27:53.560
It's like, oh, these are out.


00:27:53.560 --> 00:27:55.600
Let me see which are interesting to me.


00:27:55.600 --> 00:27:57.600
So I came up with three as well.


00:27:57.600 --> 00:27:59.200
Maps and machine learning,


00:27:59.200 --> 00:28:01.560
spatial analysis with TensorFlow,


00:28:01.560 --> 00:28:02.880
Scikit-learn, and PyTorch.


00:28:02.880 --> 00:28:03.760
And I think it's really cool,


00:28:03.760 --> 00:28:05.040
kind of like you were talking about the hardware.


00:28:05.040 --> 00:28:09.080
It's like you take geospatial data and real-world things


00:28:09.080 --> 00:28:11.480
and do awesome stuff with it with Python.


00:28:11.480 --> 00:28:12.800
So here's kind of the map version of that.


00:28:12.800 --> 00:28:14.960
I think that one's a fun one.


00:28:14.960 --> 00:28:19.960
And then hands-on web app test automation by Andrew Knight.


00:28:19.960 --> 00:28:24.080
Brian, that'd be a good one for you as well, right?


00:28:24.080 --> 00:28:25.440
Like that sounds pretty interesting.


00:28:25.440 --> 00:28:26.680
- Yeah, it does look good.


00:28:26.680 --> 00:28:28.840
- Yeah, and then finally, bigger, better, faster,


00:28:28.840 --> 00:28:30.840
more building applications in Python.


00:28:30.840 --> 00:28:32.900
That also looks pretty cool to me.


00:28:32.900 --> 00:28:34.080
So there's a bunch of other great,


00:28:34.080 --> 00:28:36.600
and this is not like the best of list or whatever.


00:28:36.600 --> 00:28:38.000
This is just like stuff that stood out to me,


00:28:38.000 --> 00:28:39.780
like oh, I'd go to these.


00:28:39.780 --> 00:28:40.620
Sounds pretty cool.


00:28:40.620 --> 00:28:42.520
- And these tutorials are priced way lower


00:28:42.520 --> 00:28:44.000
than any sort of corporate training


00:28:44.000 --> 00:28:45.340
is gonna be priced.


00:28:45.340 --> 00:28:46.340
- Yeah, yeah.


00:28:46.340 --> 00:28:47.340
Very cool.


00:28:47.340 --> 00:28:48.860
You guys are both gonna be at PyCon, right?


00:28:48.860 --> 00:28:50.380
Brian, you're speaking, is that true?


00:28:50.380 --> 00:28:52.100
- I am speaking, yes.


00:28:52.100 --> 00:28:53.420
- On what topic do you speak?


00:28:53.420 --> 00:28:55.380
- I am talking about parameterized testing.


00:28:55.380 --> 00:28:57.820
- Awesome, and Kojo, I'm guessing that you're gonna be there


00:28:57.820 --> 00:28:58.940
at a lot of the conferences.


00:28:58.940 --> 00:29:00.940
- Yeah, and actually, so this year,


00:29:00.940 --> 00:29:02.500
I just started a new job,


00:29:02.500 --> 00:29:04.100
I'm working with a company called RevSys now.


00:29:04.100 --> 00:29:06.420
They're sponsoring, and so I will be there.


00:29:06.420 --> 00:29:07.940
But yeah, Ian, I would have been there either way,


00:29:07.940 --> 00:29:09.060
probably so.


00:29:09.060 --> 00:29:11.700
- Yeah, awesome, I'm glad you're gonna be there as well.


00:29:11.700 --> 00:29:14.060
- All right, Brian, I guess that's it for our main items, huh?


00:29:14.060 --> 00:29:14.900
- Yeah, it is.


00:29:14.900 --> 00:29:15.980
- You got anything to share with folks?


00:29:15.980 --> 00:29:18.260
- I was gonna share with folks that I'm speaking of PyCon,


00:29:18.260 --> 00:29:20.260
but we already covered that, so.


00:29:20.260 --> 00:29:22.300
- We snuck it in the previous one.


00:29:22.300 --> 00:29:23.180
How about you, Kojo?


00:29:23.180 --> 00:29:25.140
Anything extra you wanna throw out there for the world?


00:29:25.140 --> 00:29:26.900
- No, I don't think I have any new,


00:29:26.900 --> 00:29:28.380
exciting Python-related stuff.


00:29:28.380 --> 00:29:30.500
- Cool, well, I've got a couple to share.


00:29:30.500 --> 00:29:33.940
One, Eric Cho just released the third edition


00:29:33.940 --> 00:29:35.900
of his Mastering Python Networking,


00:29:35.900 --> 00:29:38.160
which is a cool little use Python


00:29:38.160 --> 00:29:39.440
to control all the network things


00:29:39.440 --> 00:29:41.620
and set up network topologies and whatnot book.


00:29:41.620 --> 00:29:46.100
is quite interesting. And I got a chance to write the foreword for that. So thank you,


00:29:46.100 --> 00:29:52.060
Eric, and I'll link to the book. Also, speaking of network things, both pyramid through the


00:29:52.060 --> 00:29:59.900
waitress web server thing, and Django have issued like vulnerability CVEs. So yeah, if


00:29:59.900 --> 00:30:04.280
you have either those in production, and they're on the internet, or even not, you might want


00:30:04.280 --> 00:30:09.060
to do a little upgrade, a pip install upgrade all the things on it. Because yeah, there's


00:30:09.060 --> 00:30:14.060
There's like a SQL injection vulnerability, like a little Bobby Tables vulnerability in Django,


00:30:14.060 --> 00:30:19.060
and some other similar type of thing for Waitress, and those are not good to have.


00:30:19.060 --> 00:30:23.060
Why is Pyramid and Waitress together? Is Waitress bundled with Pyramid?


00:30:23.060 --> 00:30:28.060
It comes with Pyramid, and I think the guys who work on Pyramid may also work on Waitress.


00:30:28.060 --> 00:30:30.060
I'm not sure. I could be wrong about that.


00:30:30.060 --> 00:30:32.060
I'm sorry if people who work on Waitress, if I got that wrong.


00:30:32.060 --> 00:30:37.060
But certainly when you install Pyramid, you get Waitress, and you want that to be up to date.


00:30:37.060 --> 00:30:39.340
address, server, things like that.


00:30:39.340 --> 00:30:40.740
Okay, and then the last thing,


00:30:40.740 --> 00:30:44.100
kind of like your item here, Kojo,


00:30:44.100 --> 00:30:47.140
even shorter time, like 45 minutes ago,


00:30:47.140 --> 00:30:50.480
the Stack Overflow 2020 survey is open.


00:30:50.480 --> 00:30:52.320
So everyone should go fill that out.


00:30:52.320 --> 00:30:53.840
There's a ton of information about


00:30:53.840 --> 00:30:57.180
where the broader ecosystem is at here.


00:30:57.180 --> 00:30:59.220
So it takes about 10 minutes.


00:30:59.220 --> 00:31:01.380
It's a little bit long, but it's totally worth it, I think.


00:31:01.380 --> 00:31:02.980
- Yeah, and if there's anywhere in there


00:31:02.980 --> 00:31:05.620
where you can plug our podcasts, go for it.


00:31:05.620 --> 00:31:07.300
- I don't know if there is. - There totally should be.


00:31:07.300 --> 00:31:09.020
- Like where do you get your news or something like that.


00:31:09.020 --> 00:31:11.260
- Yes, exactly, other.


00:31:11.260 --> 00:31:14.400
All right, Brian, I picked a joke for us that's graphical,


00:31:14.400 --> 00:31:16.300
so we have to do a little work describing it,


00:31:16.300 --> 00:31:19.100
but I think it's gonna come out pretty well


00:31:19.100 --> 00:31:22.700
because I think it's right up your alley actually here.


00:31:22.700 --> 00:31:25.140
So this is a comic which is


00:31:25.140 --> 00:31:27.860
Richard's Guide to Software Development.


00:31:27.860 --> 00:31:30.540
And I'll kick it off, there's like a cat


00:31:30.540 --> 00:31:33.340
with little like super bionic legs,


00:31:33.340 --> 00:31:36.980
And underneath the caption is, "How the software is designed."


00:31:36.980 --> 00:31:38.220
You want to take it from here?


00:31:38.220 --> 00:31:40.220
Okay, well then the next one is,


00:31:40.220 --> 00:31:44.220
"How much time has to be spent on each part?"


00:31:44.220 --> 00:31:49.500
And there's like 4% for the head, and then 2% for the middle of it,


00:31:49.500 --> 00:31:52.140
80% for the tail. Oh yeah, that's totally true.


00:31:52.140 --> 00:31:54.940
Nice. The next one is,


00:31:54.940 --> 00:31:57.060
"How the software looks before the beta test."


00:31:57.060 --> 00:32:00.100
It's a cat, but it has no back legs at all,


00:32:00.100 --> 00:32:01.780
but it's still suspended somehow.


00:32:01.780 --> 00:32:04.780
- Yeah, and then how the software looks after the beta test,


00:32:04.780 --> 00:32:06.940
there's no front legs, but there are back legs.


00:32:06.940 --> 00:32:08.220
- I'm just trying to imagine what happens here.


00:32:08.220 --> 00:32:11.020
Like, no, no, we wanted legs on the back of the cat.


00:32:11.020 --> 00:32:12.180
Like, oh, you want the legs on the back?


00:32:12.180 --> 00:32:13.100
Sure, we'll put them on the back.


00:32:13.100 --> 00:32:14.980
- Okay, we'll just move them, yeah.


00:32:14.980 --> 00:32:17.500
- And then how the software's advertised


00:32:17.500 --> 00:32:21.260
is like a tiger springing out of a picture with action.


00:32:21.260 --> 00:32:23.100
- Yeah, what the customer really wanted


00:32:23.100 --> 00:32:26.140
was just a question mark, 'cause nobody asked.


00:32:26.140 --> 00:32:28.380
- Exactly, and then how the software looks


00:32:28.380 --> 00:32:31.460
two versions later, it has a nose like an anteater


00:32:31.460 --> 00:32:33.420
or an elephant.


00:32:33.420 --> 00:32:36.700
It's just a random human arm coming out the back of it.


00:32:36.700 --> 00:32:38.220
- That's, oh man.


00:32:38.220 --> 00:32:41.620
And the last scene has like a dude petting this cat


00:32:41.620 --> 00:32:43.980
that has the arm sticking out with the elephant


00:32:43.980 --> 00:32:47.180
and Noah's saying, "I still like you anyway."


00:32:47.180 --> 00:32:48.220
- The cat says toots.


00:32:48.220 --> 00:32:49.460
Yeah.


00:32:49.460 --> 00:32:51.100
Anyway, there's a nice little testing one.


00:32:51.100 --> 00:32:52.660
Actually for you as well, Kojo, right?


00:32:52.660 --> 00:32:53.900
You were in QA.


00:32:53.900 --> 00:32:54.740
- Yeah, it used to be.


00:32:54.740 --> 00:32:57.980
Yeah, the developers love their software, so.


00:32:57.980 --> 00:32:59.220
- That's great.


00:32:59.220 --> 00:33:01.860
All right, well, this is a lot of fun.


00:33:01.860 --> 00:33:02.900
So Joe, thanks for being here.


00:33:02.900 --> 00:33:04.060
And Brian, thanks as always.


00:33:04.060 --> 00:33:05.180
Glad to have you back this week.


00:33:05.180 --> 00:33:06.420
- Yeah, yeah, thanks.


00:33:06.420 --> 00:33:07.600
- And thanks for having me, you guys.


00:33:07.600 --> 00:33:08.660
- Yep.


00:33:08.660 --> 00:33:09.700
Bye, everyone. - Bye.


00:33:09.700 --> 00:33:11.420
- Thank you for listening to Python Bytes.


00:33:11.420 --> 00:33:13.900
Follow the show on Twitter @pythonbytes.


00:33:13.900 --> 00:33:16.980
That's Python Bytes as in B-Y-T-E-S.


00:33:16.980 --> 00:33:19.860
And get the full show notes at pythonbytes.fm.


00:33:19.860 --> 00:33:22.100
If you have a news item you want featured,


00:33:22.100 --> 00:33:24.840
just visit pythonbytes.fm and send it our way.


00:33:24.840 --> 00:33:26.960
We're always on the lookout for sharing something cool.


00:33:26.960 --> 00:33:30.960
This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening


00:33:30.960 --> 00:33:33.360
and sharing this podcast with your friends and colleagues.

