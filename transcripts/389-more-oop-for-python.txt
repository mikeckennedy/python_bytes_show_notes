00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 389, recorded June 24th. I'm Brian Okken.

00:00:09 And I'm Michael Kennedy.

00:00:11 This episode is brought to you by Scout APM.

00:00:13 Listen to their spot later in the show and check them out by going to the show notes and clicking it.

00:00:19 You can connect with us on Mastodon. We love hearing from you.

00:00:23 And if you're listening to this later, join us live every once in a while if you want.

00:00:30 Go to pythonbytes.fm/live to be part of the audience and it'll tell you when the next episode is.

00:00:36 And I'd like to say thank you to everybody that signed up for the mailing list to get our show notes.

00:00:42 It's nice to see that little creeping up in listeners.

00:00:47 And I actually find it quite handy to find those notes later on.

00:00:52 Absolutely. Brian, I would like to add, we're coming up on a milestone number there.

00:00:56 And I feel like we should probably do some kind of giveaway or some kind of contest.

00:01:01 And they'll probably happen in about the next month to six weeks.

00:01:04 So you got to be on the list to win the prize that we invent for the thing that we'll talk about later.

00:01:09 So sign up.

00:01:10 Yeah.

00:01:11 Go on by side of him.

00:01:12 Click on newsletter.

00:01:13 Put your info in.

00:01:14 All right.

00:01:14 Well, why don't you kick us off with it's a nice sunny day.

00:01:18 Maybe some sort of solar topic.

00:01:20 Yes, let's do it.

00:01:22 Let's do it.

00:01:22 How about this, Brian?

00:01:24 Let's talk about Solera.

00:01:26 And this one comes to us as a recommendation from a listener.

00:01:29 So thank you to Florian for sending this in.

00:01:32 Solera is a...

00:01:34 Solera?

00:01:34 Solera?

00:01:35 I don't know.

00:01:35 Tomato or tomato?

00:01:36 Solera is a pure Python framework, but in React style.

00:01:41 So it is a sort of rapid application development, somewhat data science-y focused front-end framework

00:01:48 or framework for building front-end UIs that's like React that allows you to write better Jupyter

00:01:55 and web apps.

00:01:57 So it does this by basically integrating IPy widgets and other types of React-based APIs,

00:02:04 programmable, like code, not APIs you call, on top of IPython widgets.

00:02:09 So that's super cool.

00:02:11 It can either be stuff that runs inside notebooks that makes them better interactive things,

00:02:15 or it can just be standalone web apps, like FastAPI or stuff like that.

00:02:21 Yeah?

00:02:21 Pretty neat, huh?

00:02:22 Yeah.

00:02:23 So we always need more UI frameworks than Python, I believe.

00:02:28 I would put this if I was considering Streamlit or Dash or something along those lines.

00:02:34 It's kind of in that realm, okay?

00:02:35 So let's see.

00:02:37 It talks about the benefits of putting things together.

00:02:39 But the most important thing I would recommend to you is probably check out their examples to start.

00:02:45 So let's check out their examples.

00:02:48 So in this area, we've got a whole bunch of different examples that don't want to scroll.

00:02:53 Why won't you scroll?

00:02:54 Hold on.

00:02:55 There we go.

00:02:55 Now it's scrolls.

00:02:56 Yay, browser.

00:02:57 So let's pick one of these.

00:02:59 Let's go to the full screen ones.

00:03:00 These are fun.

00:03:01 Jesus, really doesn't like to scroll, does it?

00:03:04 Full screen.

00:03:05 Okay, so we've got different ones here.

00:03:07 You can just pull these up.

00:03:07 And let's just say the scatter one's kind of interesting.

00:03:11 Check this out, Brad.

00:03:12 This is how this works.

00:03:13 So you take your iPython widgets, your notebook-like stuff.

00:03:18 And look what you would see on the screen if you load this up.

00:03:21 It's like a full UI.

00:03:23 It fills the screen here, right?

00:03:26 And you can either upload a data set and figure out, I don't know how to figure out what the

00:03:29 data set's supposed to be, but probably a CSV or something.

00:03:32 And then you can also just click, show me the sample data.

00:03:34 And check it out.

00:03:35 You get this cool interactive, probably plotly.

00:03:38 Yes, plotly.

00:03:40 UI here.

00:03:41 And I can change the size of all these things that it works on.

00:03:45 I can say, I would like to see, this talks about like GDP, life expectancy by country.

00:03:50 So I can say, I want to see the life expectancy by country.

00:03:53 And pull that up.

00:03:55 Continent, rather, I think is how they have data.

00:03:58 Where is this?

00:03:59 It was working just a minute ago.

00:04:00 Why is this not running for me?

00:04:02 Maybe I made the size too weird for it.

00:04:03 Don't know.

00:04:04 Let's go.

00:04:06 Country.

00:04:07 Nah, I guess I'm picking the wrong thing.

00:04:10 That's just the live demo curse.

00:04:11 It just won't work.

00:04:12 It totally is.

00:04:13 I don't know why it's not working.

00:04:14 Anyway, there we go.

00:04:15 I just have to reverse it.

00:04:16 There we are.

00:04:17 This is looking good.

00:04:17 So you can say, show me the life expectancy by country.

00:04:23 And then you get all these really interesting interactive bits.

00:04:26 You can resize it.

00:04:27 So this is all a super easy UI to build, Brian, with this UI framework.

00:04:32 That's pretty cool.

00:04:33 And if you go back and look at the example, they'll show you like one of the cells in a

00:04:38 Jupyter notebook can just be this graph here.

00:04:41 And it has a full screen option or it can just be like the output of a cell.

00:04:45 It's one of these interactive apps.

00:04:47 Oh, neat.

00:04:47 How wild is that, huh?

00:04:48 Isn't that crazy?

00:04:49 Yeah.

00:04:50 And then you can also go and see, you know, what does a tutorial look like?

00:04:54 Somewhere.

00:04:56 I gotta go to get started.

00:04:58 Quick start.

00:04:59 So if you go to the quick start, it'll show you basically how to program this stuff.

00:05:04 And it's super easy.

00:05:05 You just put a decorator, say this is a component, and it shows up in your page.

00:05:10 It's really focused on building these little reasonable and composable components.

00:05:14 So it's a little bit like shiny, actually, I think, actually.

00:05:17 So anyway, super cool way to build these interactive dashboards and stuff that's more than just a picture,

00:05:23 but a thing you can actually play with and publish to the web.

00:05:27 Yeah, especially, I love stuff like this, like, especially if you don't really know how you want to look at the data yet.

00:05:32 So you can give people lots of options.

00:05:35 Absolutely.

00:05:36 And I don't see a price.

00:05:39 All I see is Staris on GitHub.

00:05:41 So I think it's just an open source project that you can use for your stuff, not a commercial thing, from what I can tell.

00:05:47 So one of the things, I was looking at this the other day, and I don't know if you came across an answer to this question,

00:05:53 but it said a pure Python React-style framework for scaling Jupyter and web apps.

00:06:00 The and is, like, I was a little bit confused.

00:06:04 Do I have to be a Jupyter-type programmer to do this, or do you know if I can?

00:06:09 No.

00:06:09 If you want to use FastAPI, it can.

00:06:12 And there's a thing called, what do they call it?

00:06:15 A Solaris server or something like that.

00:06:19 So you can run that, and it says, look, it'll run with FastAPI, Starlet, Flask, and so on.

00:06:23 Okay.

00:06:24 And I imagine you just create, just basically serve up some common template that, like, starts it all, you know, those kind of things.

00:06:31 The other thing that's worth pointing out in this whole discussion is, it says built on top of React-ton.

00:06:36 And React-ton is this interesting project here.

00:06:40 It says it's like React.

00:06:42 Yeah, it is.

00:06:44 It's a really good logo.

00:06:46 It's a Python logo as the nucleus of an atom, and then a bunch of little small Python logos circling it like electrons.

00:06:54 That's good.

00:06:55 So this basically lets you create code for IPython widgets that is in the style of React.

00:07:01 So if you go down here, you can create, for example, a component, which is a clickable button.

00:07:08 And you basically initialize the state, and then you write the handler.

00:07:13 And just like the handful of lines of code.

00:07:15 Yeah.

00:07:16 Yeah.

00:07:16 Yeah, it's pretty neat.

00:07:17 And so that's what this thing is all about, is creating these little widget-type things or components, and then building up your UI out of it.

00:07:23 So I say, certainly worth checking out.

00:07:26 I kind of want to just do one of those, like, just a button that just tells you how many times you've clicked it.

00:07:31 Exactly.

00:07:34 I'm not going to do anything.

00:07:36 After it gets past 100, it'll be like, what are you doing in your life?

00:07:41 Leave and go do something else.

00:07:42 Stop clicking me.

00:07:43 Yeah.

00:07:44 All right.

00:07:45 Yeah, people check that out.

00:07:46 Thanks, Florian.

00:07:46 Next up, I wanted to talk about coverage a little bit.

00:07:51 I think?

00:07:52 No, I'm on the wrong page.

00:07:54 I do want to talk about coverage.

00:07:55 So Ned Batchelder wrote an article called Coverage at a Crossroads.

00:08:01 And so there's a couple things I wanted to point out about this.

00:08:07 So the gist of it is, Ned wants to make coverage.py faster.

00:08:18 And one of the issues is with the way coverage is written right now and the way it's composed.

00:08:23 So he starts the conversation discussing really how coverage works.

00:08:28 And that's the part where I really like, even if you don't care whether coverage is fast or not, this is a nice, fun article to realize how coverage works.

00:08:37 And so coverage uses a thing called a trace function.

00:08:40 So it takes your code and adds these trace functions to every line so that coverage can know when any line gets hit.

00:08:47 And then coverage also does branch coverage.

00:08:49 So coverage does branch coverage with allowing a thing called the arcs.

00:08:54 So it generates these four lines that look like branches, these arcs of like, it could go like your line, you could go from line one to line two or line two to line three, things like that.

00:09:06 And so it keeps track of all that.

00:09:08 And the reason why things could be faster is because like, let's say you hit line two already.

00:09:15 You don't have to, and there's no branches in there or anything.

00:09:18 It's just a line of code.

00:09:19 You wouldn't need to actually hit the trace function every time you hit that, but there's no way to take it out.

00:09:27 So there's some ideas around making it faster.

00:09:31 And SlipCover, for instance, has a bunch of ways.

00:09:34 So he uses a bytecode thing that there's a discussion around SlipCover as a different coverage tool.

00:09:41 There's also discussion around SysDop monitoring that came in in Python 3.12.

00:09:46 And with SysDop monitoring, you can do something like a trace function, but it's something that you can take away later.

00:09:53 So the idea, like for line coverage, this would work just great.

00:09:57 So you could just say with SysDop monitoring every time, if I hit this line, great, now I can take that out so I don't have to worry about that line ever again.

00:10:07 But there's some discussion that Ned has around how do you deal with branching for that.

00:10:16 And it's an interesting take on kind of an interesting idea.

00:10:21 There's an interesting problem set for how to deal with it, kind of like maybe ARCs aren't the right way to do it.

00:10:28 Maybe there's some other way to deal with branch coverage.

00:10:32 And it's not trivial because there's an example of a try finally block with a return statement happening in the try.

00:10:41 So you don't necessarily hit – you always will hit the finally even with the return, but you don't know if you'll hit the line after.

00:10:51 You know, you'd have to look at the code.

00:10:53 But really fun discussion.

00:10:56 There's a call out of where if you want to get involved, you'd like to offer some solutions or just help with the discussion.

00:11:02 There's that too.

00:11:03 But even if you're not going to help, I think it's a cool discussion of how coverage works.

00:11:10 And I just wanted to thank Ned for putting time and effort into making sure coverage is an awesome tool.

00:11:16 So thanks, Ned.

00:11:17 Yeah, that's pretty excellent.

00:11:18 And of course, there's going to be functions and branches of execution that are in some kind of tight loop and run a million times.

00:11:26 But after the third time, you've already realized it's 100% covered.

00:11:31 So if you could just – because running with coverage and stuff like that, all this profiling and code coverage stuff puts a serious hurting on the performance.

00:11:39 So if you could say, all right, that part's done 100%, stop slowing it down, that'd be cool.

00:11:44 Yeah, I did like this cool idea of – with the other ones of creating like adding no-op statements in just so that for branches,

00:11:54 so that you just like check to see, you know, if I hit that, then that branch was taken.

00:12:00 That's kind of a neat idea.

00:12:01 You could, you know, add these extra little hooks.

00:12:03 But anyway, cool.

00:12:05 Awesome, awesome.

00:12:07 Up next, thank you to Scout APM.

00:12:11 Let me tell you real quick about Scout APM.

00:12:15 They're big supporters of Python Bytes, so we appreciate that very much.

00:12:19 So if you are tired of spending hours trying to find the root cause of issues impacting your performance,

00:12:25 then you owe it to yourself to check out Scout APM.

00:12:28 They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:12:37 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs,

00:12:42 and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:12:48 And then you say, oh, no, why is it so slow?

00:12:50 Why are you doing 200 database queries for what should be one?

00:12:53 So you can find out things like that.

00:12:54 And it links it back directly to source code so you can spend less time in the debugger and healing logs and just finding the problems and moving on.

00:13:02 And you'll love it because it's built for developers by developers.

00:13:04 It makes it easy to get set up.

00:13:06 Seriously, you can do it in less than four minutes.

00:13:09 So that's awesome.

00:13:09 And the best part is the pricing is straightforward.

00:13:12 You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:13:19 And I just learned this, Brian.

00:13:20 They also have they provide the pro version for free to all open source projects.

00:13:26 So if you're an open source maintainer and you want to have Scout APM for that project, just shoot them a message or something on their pricing page about that.

00:13:33 So you can start your free trial and get instant insights today.

00:13:37 Visit by thembytes.fm slash Scout.

00:13:40 The link is in your podcast player show notes as well.

00:13:42 And please use that link.

00:13:43 Don't just search for them because otherwise they don't think you came from us.

00:13:47 And then they'd stop supporting the show.

00:13:49 So please use our link by thembytes.fm slash Scout.

00:13:51 Check them out.

00:13:52 It really supports the show.

00:13:54 This one, Brian, comes to us from another Brian.

00:13:58 Okay.

00:13:58 Way in the past, though.

00:13:59 This is Brian Skin that back in January said, hey, guess what?

00:14:04 Pep 698 has been accepted.

00:14:07 How awesome is that?

00:14:08 And I haven't, it hasn't bubbled to the top of my list until now.

00:14:12 But I think it's, we're talking about this is in Python 312.

00:14:16 And yeah, let's, let's check it out.

00:14:19 So if we go over to the pep, it is an override decorator for static typing.

00:14:24 So, you know, some languages, C Sharp, I think C++, but it's been a while since I messed with it.

00:14:30 You know, have explicit override keywords and virtual methods.

00:14:34 I know C++ has virtual methods.

00:14:36 I just don't know if you indicate that you're overriding it.

00:14:38 Tell me, Brian, do you use the override keyword?

00:14:40 Or do you just, do you just write the function?

00:14:42 You just, just write it.

00:14:44 Yeah, that's what I thought.

00:14:45 Yeah.

00:14:45 Yeah.

00:14:46 And in C Sharp, you actually say there's a virtual function in the base class, which is intended to have a potential people overriding.

00:14:52 And then in the, the derived classes, you say override instead of virtual to indicate that you have to say that right to say that you're, you're replacing this behavior.

00:15:01 And you might need to call the base class version and all that kind of stuff.

00:15:04 Well, basically Python gets that if you want it as a lot of things with typing, it's multiple, it's optional and multiple ways.

00:15:12 So let's jump over.

00:15:14 If you scroll down, it's kind of weird to me.

00:15:16 The PEP says this PEP is here for historical reasons.

00:15:19 It's now part of Python.

00:15:21 So please see override.

00:15:24 When you click it though, it doesn't take you to the Python documentation.

00:15:26 It takes you a separate typing documentation for Python, but is also in the Python documentation.

00:15:32 Interesting.

00:15:33 Which one wins?

00:15:34 I don't know, but whatever.

00:15:35 The example here in the link from the PEP is super clear.

00:15:38 So you had a parent class and you don't say virtual because we don't have that, but you can say at override.

00:15:45 So the parent class, the base class has a foo function that takes no parameters and returns an integer.

00:15:52 I'd hear you in the child class, you say override and then as a decorator and then foo, same signature.

00:15:58 And if you were to say override something that didn't exist, type checking will say there's no signature.

00:16:04 Your intention is to override this thing, but it doesn't exist.

00:16:08 Maybe, maybe you meant to type.

00:16:10 I don't like these examples, but this is what's written here.

00:16:13 So here we go.

00:16:13 You overrode foo because that existed, but you tried to override baz, but it's bar and you misspelled it or something like that.

00:16:23 Now, I don't know what happens if you mismatch the parameters, but you get the name right.

00:16:28 You know what I mean?

00:16:28 Like I'm overriding.

00:16:29 It takes two parameters.

00:16:30 Like, no, it takes one.

00:16:31 I don't know.

00:16:32 I have to test that out.

00:16:33 But anyway, if you want to have a little bit more validation in your Python typing for your classes and your inheritance, check this out.

00:16:44 It's part of Python.

00:16:45 It's nothing special that you add.

00:16:47 It only executes at definition time for the class.

00:16:51 So it's not like a runtime type thing.

00:16:53 So it should be low overhead.

00:16:55 Yeah.

00:16:55 Pretty neat.

00:16:56 Why not use it, right?

00:16:56 Yeah.

00:16:57 Low overhead.

00:16:59 High override.

00:17:00 High override.

00:17:01 Low overhead.

00:17:02 That's right.

00:17:02 There you go.

00:17:03 All right.

00:17:03 Well, thanks, Brian Skin, for sending this in.

00:17:05 And yeah, interesting.

00:17:07 Cool.

00:17:08 One of the other things that's neat is speeding up Python bits.

00:17:16 And so there's kind of a neat article called from Gage.

00:17:22 Oh, that must be the group that makes this stuff.

00:17:25 Anyway, called Parsing Python ASTs 20 Times Faster with Rust.

00:17:30 So this article is talking about speeding up a tool called TAC.

00:17:36 Now, TAC is a CLI.

00:17:39 It says it's a CLI tool that lets you define and enforce import boundaries between Python modules in your project.

00:17:45 Yeah.

00:17:45 Remember, I talked about that a few weeks ago.

00:17:47 Yep.

00:17:47 Actually, right?

00:17:48 Yeah.

00:17:48 Episode 384, you talked about it.

00:17:50 So yeah, that was just May 21st, just a couple of months ago, or last month.

00:17:56 Nice.

00:17:57 Nice.

00:17:57 Anyway, at first, I'm like, okay, you sped up with Rust.

00:18:02 We're kind of hearing that.

00:18:04 Why I'm calling this out, though, is not just that TAC seems cool, is that I really liked the methodology that they're talking through here.

00:18:14 So they talk about not just how they made it faster, but the process they went through to figure out which parts.

00:18:20 So they used profiling, but in specific, I think they used a tool called PySpy and SpeedScope to visualize and get flame graphs for performance.

00:18:35 Interesting.

00:18:36 I've not heard of either of those.

00:18:37 I have not, or maybe I have, but we cover a lot of tools, man.

00:18:42 Anyway, these look slick, but the output of it showed that there was roughly 90% of the total time was taken by a function called get project imports.

00:18:55 And in that, it spent about two-thirds of the time parsing the ASTs and the remaining one-third traversing them.

00:19:02 So some great information and some great examples of instead of trying to just throw Rust at it to speed things up or even just using Python to optimizing your own Python,

00:19:15 taking a look at exactly what you're doing and only speeding up the little bits that are slow, which is a – I love that aspect of this.

00:19:25 So, okay, so they took those bits.

00:19:28 Also, went by and there's a discussion of why the AST parsing was slow anyway because that should have been some C code as well.

00:19:40 But they – there's a little bit of a deep dive into there, but then they jumped into just rewriting it in Rust.

00:19:50 And then this – we've covered these tools before using PyO3 and Maturin to help get – quickly develop some Rust for a couple functions.

00:20:03 And, yeah, so that was it.

00:20:06 And it, like, went from – the example they had was a code base – it was a common code base.

00:20:12 So, which was it – the Sentry code base, about 3,000 lines of Python files that took, like, 10 seconds to test.

00:20:21 And with this speed up, it dropped it down to one second.

00:20:25 So, yeah, 20 – that seems like a pretty fast speed up.

00:20:29 So, nice.

00:20:30 Yeah.

00:20:30 Yeah, it's real nice.

00:20:32 Also, just kind of a great user example and a short write-up on using these – using profiling to really look at where your bottlenecks are and then maybe throwing Rust at it there.

00:20:44 Yeah, and it looks like they just basically re-implemented that one function in Rust and then just used it as a dependency, right, with their PyO3 extension.

00:20:54 Yeah, so I totally want to try that.

00:20:56 Like, just – that would be a great way to get into Rust a little bit is to just not try to make a Rust application but just replacing, like, one function or something.

00:21:06 This one algorithm is called a ton of times.

00:21:09 It's super slow, relatively.

00:21:10 It's where we spend all our time.

00:21:12 But it's not that big, right?

00:21:13 Like, we could write it, probably figure it out in a day or two in Rust, and then off you go.

00:21:17 Yeah, I don't need to learn all the Rust.

00:21:19 I just need to make this thing faster.

00:21:21 Tell me how to do a for loop in Rust.

00:21:23 Tell me.

00:21:23 Okay.

00:21:23 Well, tell me, Brian, do you got extras?

00:21:27 Do I have extras?

00:21:29 Let me check.

00:21:30 Yeah, I do.

00:21:31 Last – when was it?

00:21:33 Let's go ahead.

00:21:35 Episode 388.

00:21:37 That was just last week, wasn't it?

00:21:38 It was last week where we talked about not deleting all the repos.

00:21:42 Yeah.

00:21:43 Well, one of the things I talked about was – what did I talk about?

00:21:47 I talked about import by string with packageutil.resolve name.

00:21:53 Bad on me for not doing my homework a little bit.

00:21:56 Brett Cannon notes that discussions around this are maybe not really great things because packageutil is deprecated or it's going to be or something.

00:22:09 So, Brett's recommending not using packageutil.

00:22:12 Just FYI.

00:22:13 If it doesn't give you a deprecation warning now, it will someday.

00:22:17 Don't go that way.

00:22:19 Okay.

00:22:19 Next up, really quickly, kind of a fun thing.

00:22:23 At the Python Language Summit, there was a discussion, should Python adopt calendar versioning?

00:22:32 And this kind of fun discussion.

00:22:35 So, we have like Python 3.12 right now.

00:22:39 Should somehow it be like Cal versioning?

00:22:43 And if we went to Cal versioning, what would it be?

00:22:45 And a fun – I think it was Carol Willing.

00:22:50 Yeah, Carol Willing brought up that we want to at least keep our current versioning through 3.14 because then it would be the Pi version and we can't –

00:23:00 Yes.

00:23:00 We've got to do 3.14 now.

00:23:02 Yeah.

00:23:03 So, a lot of this boils into a PEP 2026, which is also nice numbering because the shout-out of 2026 is when we would switch.

00:23:16 So, the idea would be what we've got – oh, there's a table here.

00:23:22 3.14, no change.

00:23:25 That comes out in 2025 if we go to this.

00:23:28 And instead of 3.15, we just make the 2026 version 3.26.

00:23:33 No.

00:23:34 Which would – We're going to end up with a year 3K problem.

00:23:40 That's – okay.

00:23:41 But how – that's like 75 years in the future that we have to care about that.

00:23:46 I guess they could put a 1.26.

00:23:48 Then it'll be 1,000 years.

00:23:50 It probably doesn't matter at that point.

00:23:51 Oh, yeah.

00:23:52 We can add it.

00:23:54 Yeah.

00:23:54 So, I think we're okay.

00:23:57 Well, actually, I'm not sure.

00:23:58 That would be weird, wouldn't it?

00:24:00 I don't know.

00:24:01 You could have 126.

00:24:02 I think you can get to year 2,999 without going too bizarrely out of secrets.

00:24:08 Yeah.

00:24:08 Maybe we're ready for Python 4 by then.

00:24:11 No.

00:24:12 We're not ready.

00:24:14 Too soon.

00:24:15 Too soon.

00:24:16 So, what do you think of this?

00:24:18 Should we recover?

00:24:19 It's a little weird to me.

00:24:21 Why not just 3.2026, 3.2027?

00:24:25 Because to me, this doesn't communicate calendar versioning.

00:24:30 We already have calendar versioning if you don't care about what the number is because it's yearly release cycles.

00:24:35 Right?

00:24:35 3.12 means 2024.

00:24:38 3.13 means 2025.

00:24:41 And so, if you're not using the calendar numbers, I know 26 is closer to 2026 than 15, but there's still, to me, it's like, well, 16, 27.

00:24:51 I don't know.

00:24:51 It's just, like, here's the next year's version.

00:24:53 Yeah.

00:24:55 Okay.

00:24:55 I'm all for it.

00:24:56 I think we should switch because I think that since we've gone to a one-year release cycle anyway, why not somehow encode that in the number?

00:25:06 I totally agree with that.

00:25:07 I agree with that.

00:25:08 I just, my vote's for 3.2026, like most calendar versioning things.

00:25:14 Oh, yeah.

00:25:14 Just do four digits?

00:25:15 Yeah, exactly.

00:25:16 That's all I'm saying.

00:25:17 It's just put four digits so it really is the year on the end.

00:25:19 And it's really clear that it means the year.

00:25:21 You don't have to know the code.

00:25:22 That's all I'm saying.

00:25:24 But I'm also with Carol on leaving 3.14.

00:25:29 Yeah.

00:25:30 I mean, there's nothing saying, since it's bigger, there's nothing saying we could go to two digits and then at some point go, you know, let's just throw four digits in there.

00:25:38 Yeah.

00:25:38 Anyway.

00:25:39 Okay.

00:25:40 Last thing I want to, last extra is Brett Cannon wrote an article called Saying Thanks to Open Source Maintainers.

00:25:49 I just want to shout out, this is a really good idea.

00:25:51 Quickly, what are your ideas?

00:25:54 First of all, just be nice to the maintainers.

00:25:57 This is great advice.

00:25:59 If you disagree with something, be polite, be nice.

00:26:05 It's good.

00:26:05 Great advice.

00:26:06 Start with be nice.

00:26:07 Be an advocate.

00:26:08 You don't have to actually thank him directly, but you could advocate for the thing.

00:26:12 So Brett's involvement with Bioproject.toml, he sees other people promoting it, makes him feel good.

00:26:17 It's a good thing.

00:26:19 Produce your own open source code because maybe some of the maintainer might use your stuff now.

00:26:25 And then actually say thanks.

00:26:26 Nothing wrong with saying thanks to people.

00:26:29 And then there's financial support, which is good for some projects that have open source.

00:26:35 You know, ways to help fund the maintainers.

00:26:37 Those are good, too.

00:26:38 But you don't have to fund them.

00:26:39 You can just be nice to them.

00:26:41 Say thanks.

00:26:41 Advocate their thing.

00:26:42 That's good.

00:26:44 So in that end, I kind of always forget that Brett was involved with PyProject.toml.

00:26:51 And we might not be using it as we are today without Brett.

00:26:54 So thank you, Brett.

00:26:55 I love PyProject.toml.

00:26:56 I promote it and encourage everybody to use it.

00:27:00 Awesome.

00:27:01 Yeah.

00:27:01 Thanks, Brett.

00:27:02 Thanks, everyone.

00:27:02 There's a lot of people I have to thank in this community for this kind of stuff.

00:27:05 Yeah.

00:27:06 Do you have any extras?

00:27:07 I do.

00:27:08 Let us check them out.

00:27:11 I think only one extra.

00:27:12 Extra.

00:27:13 And that is last week I talked about the Shiny for Python Reactive Web Dashboard with Shiny,

00:27:18 that course over at Talk Python.

00:27:21 I said it was going to be available soon.

00:27:23 It is now available 100%.

00:27:25 You can go sign up for it and take that course.

00:27:27 The course is completely free.

00:27:29 No strings attached.

00:27:31 So just click the link and take the course if you want to learn about building interactive dashboards.

00:27:36 A little bit actually like the Solara stuff, but more full-featured, I suppose.

00:27:40 And a little more packaged, a little more like Streamlit in that sense.

00:27:44 And then also I talked about working with PyCharm to get people six months of PyCharm Pro for free,

00:27:51 as long as you don't already have an account that would have to renew.

00:27:55 With this course, you could just go to your account page after signing up for this and get that as well.

00:28:00 So two extras on one tab.

00:28:03 How about that?

00:28:03 Nice.

00:28:04 Yeah.

00:28:04 All right.

00:28:05 Brian.

00:28:06 I need you to put yourself in like a calm and centered place for what is coming next.

00:28:11 Okay?

00:28:11 Are you ready?

00:28:12 This has been recommended to us.

00:28:15 Oh, my gosh.

00:28:16 Who sent it in?

00:28:17 I'm so sorry if I don't have the name here.

00:28:18 I don't.

00:28:19 Cohen, I believe it was.

00:28:21 If I got it wrong, I'll correct it next time.

00:28:23 This is the Tao of Programming.

00:28:26 This is a big, big book.

00:28:27 This is a big, long book here that covers many things.

00:28:31 But I will, because we may come back to this, right?

00:28:34 Okay.

00:28:34 But I want to start with book one, The Silent Void, and just read you a few bits of it.

00:28:39 And if you visit this webpage, folks, this is best viewed in Netscape Navigator 4.0 or older.

00:28:47 Because it's got like the digital noise background and all sorts of like, whoever thought like this arts and craft paper was the proper background for reading.

00:28:57 But here we are.

00:28:59 Oh, and it also has a frame.

00:29:00 There's a frame inside of it.

00:29:01 So it's just missing the blink tag.

00:29:03 Nonetheless, here we go.

00:29:04 Here is the introduction for the chapter.

00:29:06 Thus spake the master programmer.

00:29:09 When you have learned to snatch the error code from the trap frame, it will be your time.

00:29:13 It will be time for you to leave.

00:29:15 So let me just read you a couple little sections from this.

00:29:18 1.1.

00:29:19 Something mysterious is formed.

00:29:21 Born in the silent void.

00:29:22 Waiting alone and unmoving, it is at once still and yet in constant motion.

00:29:28 It is the source of all programs.

00:29:29 I do not know its name.

00:29:31 So I will call it the Tau of programming.

00:29:33 If the Tau is great, the operating system is great.

00:29:36 If the operating system is great, the compiler is great.

00:29:39 If the compiler is great, then the application is great.

00:29:42 The user is pleased and there is harmony in the world.

00:29:45 The Tau of programming flows far and returns on the wind of morning.

00:29:49 Oh dear.

00:29:50 I think it's a little easy.

00:29:53 This one's good, Ali.

00:29:55 This is one too.

00:29:56 This is the last one.

00:29:57 The Tau gave birth to machine language.

00:29:59 Machine language gave birth to the assembler.

00:30:02 The assembler gave birth to the compiler.

00:30:04 Now there are 10,000 languages.

00:30:05 Each language has its purpose, however humble.

00:30:08 Each language expresses the yin and the yang of software.

00:30:11 Each language has its place within the Tau.

00:30:14 But do not program in Cobalt if you can avoid it.

00:30:16 And Fortran and Burl.

00:30:20 Exactly.

00:30:20 Anyway, this goes on and on.

00:30:22 There's books of this stuff.

00:30:24 People check it out.

00:30:25 It's fun.

00:30:25 Nine books.

00:30:27 Exactly.

00:30:27 Dear.

00:30:29 Well, that's the joke for today.

00:30:33 If you will.

00:30:34 It's the entertainment segment, Liz.

00:30:36 I'm not sure it's a joke.

00:30:36 Yeah.

00:30:37 No, it's good.

00:30:39 I like it.

00:30:39 It's the meditation section, Brian.

00:30:42 All right.

00:30:44 So with that, I'd like to encourage everyone out there to send us good programming jokes because we're running dry.

00:30:51 No, that was good.

00:30:54 But also, yeah, I always love good programming jokes and dad jokes all together.

00:30:59 So keep them coming.

00:31:00 Yeah, they're always good.

00:31:01 As always, really enjoyed talking with you.

00:31:05 Enjoy talking with everybody in the community.

00:31:08 And yeah, keep on going and having fun.

