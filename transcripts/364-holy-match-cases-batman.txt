00:00:00 - Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 364, recorded December 12th, 2021.

00:00:10 I'm Michael Kennedy.

00:00:11 - 2023, but I'm Brian Okken.

00:00:15 - 2023.

00:00:16 (laughing)

00:00:17 And you are Brian Okken.

00:00:19 And this episode is brought to you by all the things that we're doing that many of you support, and we really appreciate that.

00:00:24 Courses over at Talk Python, mine, Brian's, other folks, the complete pytest course over at Brian's site, Patreon supporters, connect with us on Fosted On, we're all over there, including the podcasts, and many of you who are listening at this very moment, no, but many who are listening later may not, if you hear us say, "Hey, so-and-so said this "in the audience." If you would like to be in the audience, check out pythonbytes.fm/live, usually Tuesdays at 11 a.m. Pacific time, just as it is now.

00:00:55 We typically link from each show notes on the website, not as easily in the podcast player show notes, but on the website, you can get to the video version if you ever want to.

00:01:06 Although, certainly not intended to be required.

00:01:08 Brian, let's kick it off.

00:01:10 - Yeah, let's talk about, one of the things that is often around is, this was gonna be one of my extras, but I'll just bring it up anyway, is the advent of code.

00:01:22 So this, we've covered this in years past, but at adventofcode.com, there are a bunch of things you can do to a programming exercise, and you can pick any language you want, and a lot of people do this, and it's so much fun.

00:01:39 But there's other ways to do advent of code, and I really liked, I saw James Bennett is doing a Python Django advent calendar, and this is super cool.

00:01:50 He's just decided to do a short blog post, possibly short, some not so short, blog post about Python or Django every day during the 2023 advent.

00:02:02 And it's pretty nice.

00:02:04 The first one is talking about enums, and just a little, I mean, it's a good reminder that Python has enums, but also you can make them nicer by making sure that you assign values, and it's easier, even instead of just using enum to derive a class from enum enum, and so that they're printable and stuff like that easier.

00:02:27 The values are good.

00:02:29 So that's good.

00:02:31 I really loved seeing a couple of his posts were around testing, so there is, this is pretty great.

00:02:37 This is Don't Mock Python's HTTPX, and I have plans to use HTTPX on a project, but I'm not using it right now, but I really thought this was a pretty cool little write-up.

00:02:50 The, there is a discussion really about different ways you might be able to mock, mock using your HTTPX part, but there's, the obvious ways are probably not really the best.

00:03:04 His recommendation is to, is a couple of things, refactoring your code a little bit so that you can pass in a HTTPX client, but then also using HTTPX's built-in mock transport.

00:03:17 - I didn't know HTTPX had a mock transport in there.

00:03:21 You're grinning.

00:03:22 Did you already know this, or do you have an opinion about this?

00:03:23 - I did not.

00:03:24 I'm just thinking that Kim in the audience has identified the fact that HTTPX is very sensitive and we should not mock or tease it.

00:03:31 (laughing)

00:03:32 - Yeah.

00:03:33 - That's why I'm laughing.

00:03:34 - Okay, okay.

00:03:35 - Thank you, Kim, for the joke.

00:03:36 - So--

00:03:37 - And that concludes the joke segment of the podcast.

00:03:39 No, I didn't know this, actually.

00:03:40 This is really cool.

00:03:41 I'm all about HTTPX.

00:03:43 It is my default go-to HTTP client these days.

00:03:46 When you do it request-like, it's like requests, but it also has async, and it's very fine.

00:03:51 - And yeah, this mock transport is pretty neat.

00:03:54 Anyway, it's a little over my head right now 'cause I don't do this yet, but I think it's a cool thing to point out.

00:04:01 And also, I think it's a good idea, a cool idea.

00:04:04 I mean, a lot of people do like writing a novel in November, but writing a little blog post during Advent, that's a pretty neat idea also, so good job.

00:04:13 - Yeah, that's a very interesting idea.

00:04:15 I also think it's an interesting idea that library creators may decide to provide their own mock stub API rather than just forcing you to guess what the internals might need.

00:04:26 - That's true, yeah.

00:04:27 - Right, 'cause as a provider of the library, you're like, well, really, this is the thing you need, and really, there's these three things you should change, but if you call this function, we'll do that, whatever, right?

00:04:35 They just know the internals better, and let them do it.

00:04:37 - Yeah, and there's an example of using, of having a mock transport that just returns a not found, and being able to do that without going outside of the library, I think that's a really cool idea.

00:04:51 I mean, and we are seeing that more, more frameworks deciding, well, people are gonna have to test this, how do they do that?

00:04:57 And I think it's a good trend, too.

00:04:59 - Nice, Tony Sherman points out, saw a similar thing in Bota 3 for AWS, so very cool.

00:05:05 - Right, okay.

00:05:06 There's the other one that I thought is a short one is test your documentation, talking about doc test, and I love throwing stuff like this in.

00:05:18 You have a little doc string in your code to show how it's used.

00:05:26 Why not test those?

00:05:27 So you can use either doc test, or pytest can run your doc test tests as well, so.

00:05:32 - Because of course it can.

00:05:33 - Yeah.

00:05:34 - It does all the things, awesome.

00:05:35 - All right, what you got?

00:05:37 - I'm gonna drop into this next one here.

00:05:39 This next one is DropBase.

00:05:41 Now this, from what I can tell, right at the top, it has a pricing.

00:05:47 So it's not a free type of thing for you.

00:05:51 However, I think it's interesting enough to talk about it anyway.

00:05:53 Not a sponsorship, just something Michael thinks cool.

00:05:56 So it says, build internal tools with just Python.

00:06:00 So you can build, it says full stack.

00:06:03 Let's call them forms over data web apps for your internal teams, import existing Python scripts, and quickly build layered UIs with granular permissions.

00:06:11 So when you look at the thing itself, you're like, huh, I don't really know what this means, or if this is interesting.

00:06:17 Like they don't have a bunch of great screenshots or whatever on their homepage.

00:06:21 So what you'll see is like, you can go write a query.

00:06:25 It's all sort of starts from a database, which is why I'm calling it forms over data, okay?

00:06:30 And that is like a user interface that lets you basically access the database with a little bit of rules and such.

00:06:36 So the idea, if I recall correctly, I looked at this last week is what you do is you write a SQL query against a database like Postgres or something, okay?

00:06:45 And that will give you a result that looks kind of like, kind of like Excel-ish, static, doesn't do anything, but then you can click and say, make this a smart table type thing, okay?

00:06:56 So then it becomes sortable, editable, and so on, right?

00:07:00 So all the results, you can just turn that into a grid that people can edit and it goes back to the database.

00:07:05 You can create a so-called master detail type of view.

00:07:09 So in the example on the homepage, they have a workspaces and then each user belongs to a particular, there's a bunch of users that belong to each workspace.

00:07:17 So you can do a relationship where you say, I'm gonna, if you click on one part of the screen, fill the other part of the screen with, say the users of that workspace.

00:07:27 So you like select the workspace in the top grid, it'll like fill it out all the users at the bottom.

00:07:33 You turn that into a smart thing that you can edit it and you can do things like click a button to whatever.

00:07:38 In their example, it says, if you assign somebody to a workspace or change their role, you can click a button to send them an email, like their new status in that workspace.

00:07:47 That code is written in Python, right?

00:07:50 And you can plug in functions behind all this stuff and all that code there is written in Python.

00:07:55 So you want kind of a real quick way to, if you've got a little SQL skill, a little Python skill, build this cascading UI type thing.

00:08:04 There you go, it's pretty cool.

00:08:05 - That's pretty neat.

00:08:06 - Yeah, pretty neat.

00:08:07 And they also have some widgets and stuff, I believe, like sidebars, search bars, et cetera.

00:08:15 Yeah, then you write a bunch of that in Python and it's super cool.

00:08:19 So I think that could be quite useful for folks if they wanna go and check that out.

00:08:24 And you're not trying to build some new super fancy looking app.

00:08:28 You just like, I just need to provide kind of this relationship stuff and a little bit of Python to do a little bit of work on my UI so people can check that out.

00:08:37 I think there's a free tier, let me look.

00:08:40 Yeah, there's a free tier that has up to three users.

00:08:43 And then for teams, like if you want teams, you can pay more.

00:08:46 So again, not an advertisement, but UIs built with Python, even though we go on and on about them, they're often a rarity.

00:08:53 So when we get a chance to talk about them, it's kind of cool.

00:08:55 - Yeah, that's neat.

00:08:56 - Yeah, and semi-related, sort of, I'm going to have Samuel, remember last week we talked about fast UI?

00:09:03 - Yeah.

00:09:04 - Samuel Coleman from Pydantic reached out and said, "Hey, we should talk more about this.

00:09:09 "It's a brand new thing "we're trying to do interesting things with." So I'm gonna have him on Talk Python technically next week, but it's gonna be recorded next week and then released later.

00:09:19 So anyway. - Like in April or something like that. - Yeah, something like that.

00:09:22 Right, something, probably January.

00:09:24 - Okay.

00:09:25 - Anyway, well, more on that over there, but drop base people and check that out.

00:09:29 - And if people do, it'd be cool if they could shoot us a note and see if it turns out to be cool or not.

00:09:35 - Yeah, I would love to hear back.

00:09:37 Yeah, so maybe Kim could save some time because Kim says, "The description of this tool "pretty much describes my job." But. - Yep, very cool.

00:09:47 - Anyway, I'd like to talk about the structural pattern matching a little bit.

00:09:55 So we have covered structural pattern matching and talked about it before this came out, when in, I can't remember which, 3.10 brought us structural pattern matching, way back in 3.10.

00:10:05 - How young were we then, Brian?

00:10:08 So young. - It's a different world.

00:10:10 Anyway, the tutorial's pretty good.

00:10:15 So this is from Ned Batchelder, real-world match case.

00:10:18 So he comments that the tutorial's pretty good, and it is.

00:10:22 However, the example is a little bit of a toy example and it's nice to see this really in action.

00:10:32 So here's a real-world use case.

00:10:35 Ned's got a GitHub bot installed as a webhook, and it returns back, so every time something happens on a repo, it sends back a payload of JSON data to the bot.

00:10:46 And the bot's gotta figure out what to do with it.

00:10:48 And so it turns that JSON into a nested set of dictionaries.

00:10:53 And anybody that's dealt with JSON return data, that's what you get.

00:10:59 You get a bunch of nested dictionaries.

00:11:02 So how do you deal with that?

00:11:03 Well, this example shows that the match case, or the structural pattern matching match case works really great to match this.

00:11:14 So this example looks for events that happen, and for each event, they matches it just to look to see if there's an issue and a comment and so one of the cases is looking at the content of that.

00:11:28 So you've got these nested dictionaries, and you can dig deep into the nested.

00:11:32 Here it's just one layer down, a couple layers of nested dictionaries, but still, you could go deeper if you wanted to, to match that.

00:11:39 And then not only matching the dictionary and pulling out bits of the data, like he's looking at closed at and created at and comparing those, but using a comparison.

00:11:49 So you grab the stuff and then say if some, like if two things are equal, and in another example of if the who, if the login is the bot name, that's different.

00:12:02 I don't wanna do events that are based on my own actions.

00:12:06 Do something else, but then proceed with it.

00:12:10 So kind of a couple of cases where he doesn't wanna do anything, but other cases where some action is required.

00:12:16 So these are, is a pretty cool use case of, I just wanted to highlight that.

00:12:22 It's a really cool use case of using structural pattern matching to make some code that might be complicated other ways, a little simpler.

00:12:30 So this isn't too bad to read.

00:12:31 - So much more interesting than the normal switch type statements I write with match these days.

00:12:37 - Yeah.

00:12:38 - It's like, we're looking for multiple things within the document and then applying a conditional on part of the match to things and it's pretty wild.

00:12:48 - Yeah, I'm actually thinking about this in a, I've got sets of data where for each element, I'm look, yeah, it's a bunch of nested if clauses to say if this is true, if that's true and something like this might work really pretty good.

00:13:04 - Indeed, I'm gonna try to make that, the conditions here, like the chapter art for this chapter.

00:13:11 Remember we have chapter items for all our topics, right?

00:13:13 People can use that throughout the show.

00:13:14 So, very neat.

00:13:16 - Look nice.

00:13:17 - So look down at your podcast player before now.

00:13:20 I love that we don't mention that a lot but a lot of people do appreciate the chapters.

00:13:25 So we jump around, we do multiple topics and you can use the chapters to get to them.

00:13:29 - Really?

00:13:31 Or use them as reference.

00:13:32 All right, speaking of reference, Brian, I have extra, extra, extra, extra, extra times 10.

00:13:37 - Okay.

00:13:38 - I know you've got a lot of things as well.

00:13:39 So I have so many extras that my next topic is the extra, extra, extra rather than having some follow up stuff.

00:13:45 Ready for it?

00:13:46 - Yeah.

00:13:46 - All right, follow up number one.

00:13:48 We talked about switching DNS and how much of a pain that was last time and all the hassles that we could run into.

00:13:56 And it occurred to me, and there's some people out there like Michael, obviously we do this all the time.

00:14:02 I suspect many people don't though.

00:14:03 It occurred to me that there is your domain registrar like GoDaddy, Hover, whatever, name cheap.

00:14:12 And they often have all the DNS settings for you.

00:14:14 But you can create, you can use, there are services that are way better.

00:14:18 It turns out that host your actual DNS settings that have nothing to do with your register.

00:14:23 What you gotta do is just go to your register and say, use this.

00:14:26 So I use bunny.net for delivering the podcasts or the courses, all sorts of things.

00:14:32 And they have a DNS section that is super cool.

00:14:34 So check this out, Brian.

00:14:35 We've done in the last week, I set this up.

00:14:38 We've done over half a million DNS queries, not requests to the page, but like, hey, tell me who this is.

00:14:43 And we'll remember that for a while for your ISP.

00:14:46 That's a lot of DNS queries.

00:14:47 A lot of people wanna know what pythonbytes.fm is.

00:14:50 That's exciting.

00:14:51 But why is this so, why am I so excited?

00:14:53 Like, look how nice and readable this is for people who are watching.

00:14:57 If you're not, it's like, it'll create, if you have a TXT record, it'll like create nested sections, go all of these records apply to this domain or that domain and so on.

00:15:07 And then look over here at, you can edit all these here, but check this out.

00:15:11 If I wanna say like this, the CDN setting, maybe I'm working on it.

00:15:14 And you know what's a super hassle with DNS?

00:15:16 Like I make a change, please wait a couple hours and you can try it.

00:15:20 If it doesn't work, it will be broken for a few hours and then you can fix it, right?

00:15:24 What a hassle.

00:15:25 'Cause I migrated 25 domains.

00:15:27 I know I messed some of them up, not badly, but a little.

00:15:30 So check this out.

00:15:31 If you click here, you've got your one day, one hour typical time to live.

00:15:36 It goes down to every 15 seconds.

00:15:38 So if you're like working on something and you want to be able to like try, oh no, go ahead to quick switch it back.

00:15:44 Just set it to that for a while.

00:15:46 Isn't that awesome?

00:15:46 - Yeah.

00:15:47 - The other thing you can do with this is you can write, unfortunately JavaScript, but you can write JavaScript that runs on every DNS request.

00:15:53 So you can say things like, I know you asked what this is, but you're in Asia.

00:15:57 So we're gonna tell you that it's this server rather than that server.

00:16:00 So you get a faster local machine and all sorts of interesting stuff here.

00:16:04 This is free.

00:16:06 - What?

00:16:07 - This is free for the first 20 million DNS lookups.

00:16:11 And then it's like 10 cents per million.

00:16:13 So for us, right, we're gonna do, it looks like 2 million free, right?

00:16:17 We can get be 10 times more popular before we pay a few cents.

00:16:20 So the reason this is cool is you can set this up and then switch your domain.

00:16:25 And then as soon as you just change the name, you can get it all dialed in.

00:16:28 You don't have to have this kind of like awkward downtime in the middle.

00:16:31 So people can check this out.

00:16:32 There's other ones.

00:16:33 CloudFlare has something similar.

00:16:35 DigitalOcean has something similar, but this one is super, super neat.

00:16:38 - That's pretty cool.

00:16:39 - Yeah, and Tony says similar what you can do in CloudFlare.

00:16:41 Yeah, they're both CDN providers.

00:16:42 They both have like similar stories.

00:16:44 Okay, I'm gonna go faster now 'cause I have more.

00:16:47 I wrote a cool, say blog post type thing that shows you how to use a warp to hide all your terminal secrets.

00:16:57 Look at this Brian.

00:16:58 So here, welcome to Ubuntu.

00:16:59 I'm not gonna say what version and here's your IP addresses.

00:17:02 We're not gonna say what those are, but so if you're doing presentations that somehow involve working with terminal stuff that might accidentally reveal something like what is an IP address that you shouldn't have or what is an API key or something, if you use warp, all you gotta do is check a box and say obscure all my secrets and now your presentations are safer.

00:17:21 Isn't that cool?

00:17:21 - Yeah, that's pretty neat.

00:17:22 - Yeah, so talked about warp before, but that is new.

00:17:26 I think it's a new feature, but anyways, cool.

00:17:28 We also have a supporting developer in residence.

00:17:31 Lukas Langa says, "Welcome." We have Peter Victorin now as a supporting developer in residence working with Lukas.

00:17:39 So we now have two times the help over there 'cause Lukas has been so successful keeping Python moving forward.

00:17:47 They're now getting more folks.

00:17:48 So that's pretty awesome, right?

00:17:49 - Yeah, this is totally cloned him.

00:17:52 - Yeah, they did.

00:17:52 He's now an AI.

00:17:53 No, just kidding.

00:17:55 Also that was sponsored by Bloomberg.

00:17:57 So shout out to Bloomberg for being excellent.

00:18:00 Joe sent us two things that are pretty funny.

00:18:04 They're almost worthy of like a joke type of thing, but I thought I would just share them.

00:18:07 So he decided to embody various songs through Python.

00:18:12 So we have the "Bohemian Rhapsody" and we have "Money for Nothing" by Dire Straits.

00:18:18 So remember it's like, I just want my MTV, right?

00:18:21 ♪ Da da da da ♪ ♪ Money for nothing ♪ All that.

00:18:24 So they've got the class MTV.

00:18:25 I'm linking to the show notes.

00:18:26 Of course you can pull up, you know, starts out with self.want equals nothing, print money for nothing.

00:18:32 (both laughing)

00:18:33 Look at what.

00:18:34 And then it goes, "All I want is my MTV." And it sort of cycles through that.

00:18:39 You know, look at those yo-yos.

00:18:41 That ain't working.

00:18:42 Maybe get a blister on your little finger, right?

00:18:44 It's got like working false, do true, money cost zero.

00:18:49 It's pretty awesome.

00:18:50 Guy's dumb, little blister, you know, guy's dumb as false, right?

00:18:54 So if you kind of want to enjoy this musical melody here.

00:18:58 - Does it run?

00:18:59 I'll have to try it out.

00:19:00 - I'm sure that it does run, yeah.

00:19:02 - Interesting.

00:19:03 - So well, OS.system.

00:19:05 Install microwave dash ovens.

00:19:07 - Oh.

00:19:08 - Echo.

00:19:09 I mean, you know, custom kitchen deliveries, refrigerators, moving color TVs.

00:19:14 I don't know if I'd run it actually, but there's a similar one for Bohemian Rhapsody.

00:19:19 It's pretty funny.

00:19:20 So people can check that out.

00:19:21 - Don't you regularly just download random code and run it?

00:19:24 - Well, when I see OS move, maybe not.

00:19:26 (both laughing)

00:19:28 Buy Cascades is coming to Seattle in 2024.

00:19:31 Their call for proposals is out.

00:19:33 So people can check that out.

00:19:34 It's a fun conference.

00:19:35 If you're in the Pacific Northwest or want to go to the Pacific Northwest, you can see the little banner wrapper thing.

00:19:40 CFP is open.

00:19:42 Okay.

00:19:43 So some interesting nomenclature coming for us in the world is free threaded Python.

00:19:48 Have you heard this?

00:19:48 Free threaded Python?

00:19:50 - I didn't know we were charging for threads.

00:19:52 - I know.

00:19:53 This one is like, it's a total freemium model.

00:19:55 So with the Nogil work, with the sub-interpreter work, all these different ways in which Python runs more concurrently, especially the Nogil stuff, there's a plan to basically call it free threaded Python, not Nogil, because Nogil is how it's free threaded, but free threaded is the point.

00:20:13 You know, it's like, I have a gas exploding mobile.

00:20:18 Like I have a thing that drives.

00:20:20 I don't care about the driving, not the gas exploding, right?

00:20:22 It's a similar type thing here.

00:20:23 So Seth Michael Larson points out that this has been blocked on PyPI.

00:20:29 To make way for, this is interesting, redistributions of the Python runtime compiled with the free threaded mode, i.e. Nogil.

00:20:38 So one, we're calling it free threaded Python.

00:20:40 Two, you might be able to pip install Python.

00:20:43 I don't know.

00:20:44 Okay, so that's that one.

00:20:46 Next, there's a very interesting letter, open letter to the Python South for Foundation from Python Africa.

00:20:55 And apparently there's been a lot of, I don't know what the right way to point it, but it is basically not that great a support for Python in Africa.

00:21:05 I just wanna sort of put this out there.

00:21:07 They wrote it.

00:21:08 People can check it out and read it, but just would like to see better support for reaching out to folks in Africa and have the PSF maybe be a little bit better supporter for it.

00:21:19 There's been a lot of contention around it.

00:21:20 So check that out, people.

00:21:21 It's worth knowing.

00:21:23 Okay, and then we have, oh yeah.

00:21:26 It's not super congruent with the mission of the PSF on a couple of levels.

00:21:31 One, like PSF is there to promote the Python language.

00:21:35 And this is a lot of like, we need you to make this social change or you're not going to have a conference in Africa.

00:21:41 Seems a little incongruent with the mission about supporting Python.

00:21:45 I don't know.

00:21:47 Python, moving on.

00:21:48 Python 3.12.1, the first major update of 3.12 is out.

00:21:53 So people can check that out.

00:21:55 It contains many new features and optimizations with over more than 400 bug fixes.

00:22:02 So we don't like bugs in our code and 400 of them, we definitely don't want that many.

00:22:06 Along with that came the 3.11.7 release.

00:22:10 Okay.

00:22:11 - All right, update your Pythons.

00:22:13 - Update your Pythons.

00:22:14 Everybody gets their new Pythons.

00:22:15 Final one, and this one could be a joke, but it's just too visual.

00:22:20 It's really awesome.

00:22:21 Let me make sure I credit this one correctly.

00:22:25 So Johannes Lipman, when he heard you talk about the Obfuscated Python Code Contest, this is the first international one, by the way.

00:22:33 - Okay.

00:22:35 The Obfuscated Python Code Contest, he's like, I gotta be part of this.

00:22:39 So not only was he part of it, but he won.

00:22:41 He won the most introspective of them all.

00:22:45 - It's beautiful too.

00:22:46 - Check this out.

00:22:47 So if we go here, it's literally the letters P-Y and a bunch of insane symbols in the most wild, wild way possible.

00:22:57 Like this, if you open it up, it's just like ASCII art P-Y.

00:23:02 What this does when you run it is it, oops, go back.

00:23:06 When it annotates, there's always, like so you don't have to run it, you can just click the image, is it basically annotates and colorizes the XenoPython.

00:23:14 - Oh, that's so cool.

00:23:15 - Yeah, and so you can check out other ones too, right?

00:23:17 I haven't even looked at the most roundabout one.

00:23:21 - He's also highlighting which portions of the XenoPython his code is completely ignoring.

00:23:28 - Yes, exactly, yeah.

00:23:29 So these are fun and people can check them out.

00:23:31 You've got the image.

00:23:32 Well, this one has a movie even, so instead of just a picture, the first, the winner, I guess it's not the number one winner.

00:23:37 There's just different categories.

00:23:38 The most puzzling is by Moshe.

00:23:40 - Oh, wow.

00:23:41 - And it's like a maze, which is insane.

00:23:44 - That's amazing.

00:23:45 - That is amazing.

00:23:46 Oh, that was well done, very well done.

00:23:48 Okay, so that's it for all of my extras.

00:23:51 - Okay. - Over to you.

00:23:52 That's my extra, extra, extra segment, which was very extra.

00:23:55 - I just have a couple extras.

00:23:57 We've covered this before.

00:23:59 Microsoft Python for VS Code has a December 23 release.

00:24:04 Actually, we haven't covered that, but looking in the, that came out on the 7th, and within this December release has an announcement that, oh, there's a, oh, yeah, I had it already highlighted.

00:24:20 The Python Test Adapter Rewrite Experiment.

00:24:24 If you don't remember this, it was back in, it started in June.

00:24:31 They did a change where they were working on, you had to opt in to the change of how VS Code's test, how test discovery was working.

00:24:43 Anyway, I reckon, I always, we covered it because I recommended everybody turn it on.

00:24:48 You, now that is being rolled out to 100% of the users, so now you have to opt out of it if you want to, if you don't want it, but don't opt out of it.

00:24:57 The test discovery, just update your VS Code and you'll have better test discovery now.

00:25:01 Super cool.

00:25:02 The test discovery is so much better now than it was before.

00:25:05 Thank you, everybody that worked on Python for VS Code or worked on this part of it, so that's pretty cool.

00:25:10 The other extra I wanted to mention was Daniel Roy Greenfield wrote a little tip and I kept meaning to do this and I've always forgotten, so now this, I'm gonna do it this time, is set in my shell script RC files, set pip require virtualenv to true, and that will make it so that if you try to pip install something and you're not in a virtual environment, it will not do it and it will just complain.

00:25:42 So I never mean to pip install anything unless I'm in a virtual environment, so this is good, I like this.

00:25:49 - Yeah, that's cool.

00:25:50 There's a lot of these sort of environmental settings that can control things that are not entirely obvious, right?

00:25:55 - Yeah, be a good blog post is to write up some of the ones you should really know about.

00:26:00 - Absolutely, well, there you go, fire up your Hugo, let's go, I'm leaving it.

00:26:05 - Yeah, so those are my extras.

00:26:08 Would you say you gotta do a lot of research to maybe find all those particular environment variables?

00:26:12 Stuff might really be overwhelming, so here, check out this joke, Brian.

00:26:15 - Okay.

00:26:16 - This comes to us from Ray on Mastodon.

00:26:18 It's a sticker and I kinda want this sticker, it's got a bunch of tabs at the top.

00:26:22 It says, "My brain has too many tabs open, "four of them are frozen, "and I have no idea where the music is coming from." - Oh my gosh.

00:26:29 - It's amazing, isn't it?

00:26:30 - Yeah.

00:26:31 - I have no idea where the music is coming from.

00:26:34 - That happens to me so often, I guess it must have happened to everybody so often, is like, there's music playing and I have no idea which tab is playing music.

00:26:42 I know it has a little speaker icon that you can see if it's going, but.

00:26:48 - Yeah, I feel like this little sticker describes both my Monday mornings and my Friday evenings, or afternoons.

00:26:54 It's like, oh, I can't deal, it's like, what is going on here?

00:26:57 Too much in life.

00:26:58 - Yeah, that's funny.

00:27:00 I need this sticker.

00:27:01 - I do too.

00:27:02 I do too.

00:27:03 All right, well, thank you for the episode as always, and thank you everyone for listening.

