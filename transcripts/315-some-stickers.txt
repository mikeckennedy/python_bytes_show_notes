00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 315. Recorded December 2020 22, almost the end of the year. I am Brian Aachen, Michael Kennedy. It is almost the end of the year. You guys, you ready for Christmas and everything?

00:00:17 Yeah, starting to think about Christmas, maybe tried to do some skiing, you know, it's snowing in the mountains around here. So getting there.

00:00:24 Why don't you kick us off with our first story.

00:00:26 Let's go. Let's talk some Jupiter server. So this is an announcement by Zack Saylor. And it says Jupiter server 2.0 is released. And we know what Jupiter is, you know what Jupiter Notebooks are. And we know what Jupiter lab is, well, Jupiter server is the core web server that powers those things, right? So when you pull up Jupiter lab or Jupyter Notebook, you're talking to a server, oftentimes, that's a localhost little thing running. But other times it's a centralized server that's set up for like students who are our research group, or it's set up on a supercomputer and near a bunch of data that you log into it. It runs locally on that, right, so the core of Jupiter and a lot of ways. So 2.0, that's a big deal, right?

00:01:06 I think so means new features, right?

00:01:09 Open Source, when something goes from one major version to another, that's usually a pretty big deal. So let's hit some of the highlights. So one of them is a new Identity API, one of the farther looking out features of Jupiter server that they're hoping to bring is like a Google Docs like experience. So real time collaboration experiences are some making them better. And around this, having multiple people working on a single notebook, you need to have a good way to work with identity. So there's a new Identity API in Jupiter server that makes it possible it is configurable luggable. You can even swap out your own identity provider to authenticate users with any provider. So within your organization, you could do single sign on all those types of fun thing. Yeah, related to that you have authorization. So once you know who you are, what can you do. Enabling collaboration on a notebook shouldn't just mean you have access to everything on the server or nothing on the server, but you maybe have access to these notebooks, but not those notebooks. Or maybe you can read that notebook and not write to it. So there's this new authorization API that allows you to share certain notebooks with certain people, even if they have access to the server. So that's pretty cool. Again, with the collaboration stuff, there's a new event system API coming along, and they created this package called Jupiter events that allows for JSON based event driven system over here. So a lot of cool things should be coming. So it's like a foundational piece so that they can add more more events, more interactivity, and so on. There's a new kernel web socket API, it ships with its own kernel manager. I suspect most people are not messing with that. But it's down in the guts in Jupiter lab, you can open up a terminal. Now this Terminal Service is a server extension. And that can be optionally disabled, because it's an extension, which is cool. And Brian, the last one for you. They say as we work to increase our test coverage to 80% Major thank you to Steve Sylvester, we built a handy set of pi test fixtures that can benefit Jupiter developers and extension authors as Branca. Lee, yeah, we released pi test Jupiter, a bunch of fixtures and other PI tests goodies for Jupiter core libraries and extensions.

00:03:26 That's nice. I'm actually going to check this out. And I think it'd be cool to get one of those folks on to testing code to talk about it. So I'll reach out to them.

00:03:35 Yeah, but I think that'd be great to that. Well, there you have it. The core of Jupiter got a little bit better.

00:03:40 Nice. Well, what do we have next? So I guess you got next, what do I got? I I actually so last week, we were it was just last week, actually, time flies, we were talking about automatically converting stuff like having having other programs, convert your Python code, change, modify your code, and all the different ways you can do that. And one of the things I said was, it'd be cool if we had some some some ways to convert from setup.pi to setup dot CFG are setting from setup systems to pipe Project automall. And so of course, lots of people reached out to me and said, there's already some ways that you should take a look at so thank you, Christian, Klaus and Brian skin and others for reaching out and letting me know. First one, actually, the main thing I wanted to talk about was a thing called ENI to tumble. So this is a project that takes converts, it attempts to convert any files or CFG files to tahmo. They say it's experimental. So what is I thought I was looking at setup. Py files. Well actually, a lot of like large projects are not just set up that py. They've moved a lot of the settings from setup py to set up a cfg. So this is still helpful this This isn't going to, I don't think I can grab your setup that py file if that's the only thing you're using. But if you're using setup dot cfg, maybe this will help convert to a Tamil file, and it says X experimental, but that's alright. So it's kind of fun. There's like a couple versions of it. One of the, one of the versions, it's light, and it's got late Li, te and full, and the light version has less calories. Now, the light version said the gray to Tamil file, but the full version will try to get your comments over to so convert your comments into tamo compliant comments. That's pretty neat. So I definitely try that. What did I didn't, I don't think I tried this, I didn't try this. But it looks pretty fun. So a way to automatically change that. So be fun to grab that. And I've heard from people that, that they have used this to convert their project, at least the the initial batch, but at least Christian mentioned that they needed to clean it up a bit afterwards. So one of the one of the tools they used was a thing called pipe project dash format. And what this does is and I did try this, it's pretty neat, it it takes like your if you got any Tom pipe project that Tom will file, and it converts it to a known and unknown way to set it up. So

00:06:27 I think like black for project files,

00:06:29 kinda Yeah, but one of the things with like, the, the tamo syntax is you can have, like, you know, like in any file, you can have things in any order you want. And it's still valid, but are you going to be able to find it there. I mean, if you're working with lots of projects would be really nice if like the the author's was in a similar place. And the dependencies were in a similar place, because they could be like all over the place. And it's easier to find them if they're in the right place and formatted the same. And, and I mean, who really cares how its format as long as it looks good. In its proper. So I think this is a neat idea. I tried it on a couple of my projects, and it worked. Okay, so, and I, and I want to like put that in Asterix, so you do want to check what you get afterwards, because one of the things it did, which I didn't expect it to was it, it replaced, it took the name of my project and replaced dashes with underscores. And, and I know that like a library, you can't, you can't have a dash in the thing you're importing. But the name of the project that is where it shows up on on pi pi and everywhere else, it can have a dash in it. And traditionally and I was using a PI test plug in traditionally we do have dashes we say pi test dash something so it needs to stay a dash doesn't don't translate it. So that was going to be pi test underscore check. Net. Now I don't want it to be that. So I did submitted an issue. I'm sure it's a minor thing, but at least you know, at least I know it's there. So to check it out. So a neat tool to for auto format and a couple other tools that were kind of neat. Pipe, validate pipe project. Oh, just a moment. Can you still see me? Okay, yeah, so everything's fine. Something Something happened on my computer anyway. The It's, uh, it just validates to make sure everything's fine. And I ran out a couple of projects and nothing happened. I'm like, oh, must be good. So I inserted some errors, just to see what would happen. And it's pretty terse, it pretty much just says like, there's an error on this line that this column or something, and so I it'll still helpful, you can go count and figure out where the project might be, but kind of a neat validator but for validation. And I'm not sure what I was checking, but it says it's JSON schema definition defined, driven. So you could probably check it out

00:08:52 anyway, and probably convert it to JSON and then read through JSON schema or something like, Oh, you think so? Maybe? Yeah, probably

00:08:59 might. The one of the things that did, I wanted to bring up when validating tamo files and projects is don't forget talks. So using talks to go ahead and in what what the default of talks you can do use it for lots of stuff. But the default works great for me for this, which is say to take your project, build it, put it put it in a virtual environment and install it there. And you'll catch things like you forgot to specify a dependency or, you know, missing dependencies or or you forgot some code or something like that. You'll catch it if you test it. So test your projects.

00:09:37 Absolutely. Yeah, those are a bunch of great little tools. I didn't know about hardly any of them. Do more than my project that tunnel. It's nice. And it's hatch and hatch lean and pipe project that Tomlin Oh

00:09:47 yeah, go hatches fun. So hatching hatchling.

00:09:51 It sure is. All right. Well, quick word from our sponsor before we move on, do you think yeah, that

00:09:58 sounds great. So this episode of pie Come Bites is brought to you by Microsoft for startups starting a business is hard. By some estimates, over 90% of startups will go out of business within the first year. With this in mind Microsoft for startups set out to understand what startups need to be successful and create a digital platform to help overcome those challenges. And it's Microsoft for startups founders hub founders hub provides all founders at any stage with free resources to help solve startup challenges. The platform provides technology benefits, access to expert guidance, and skilling resources, mentorship and networking connections and so much more. Unlike others in the industry, Microsoft for startup founders hub doesn't require startups to be investor backed or third party validated to participate founders hub is truly open to all so what do you get? You get to speed up development with free access to GitHub and Microsoft Cloud with the ability to unlock credits over time and to help your startup innovate founders hub is partnering with innovative companies like open AI a global leader in AI research and deployment to provide exclusive benefits and discounts through Microsoft for startup founders hub, becoming a founder is no longer about who you know, you'll have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines, across areas like idea validation, fundraising, management, coaching, sales, marketing, as well as specific technical stress points, you'll be able to book on one on one meeting with the mentors, many of whom are former founders themselves. Make your ideas a reality today with the critical support you'll get from Microsoft for startup founders hub to join the program, visit Python bytes.fm/founders, hub 2022. Or of course, go to a your show notes for this episode and clink, click the link there.

00:11:47 Indeed, thanks to Microsoft for supporting our show Vehicle program. All right, let's talk about the cloud. We're going to brown this whole episode out with a little bit of talk about the cloud as well. Specifically, though, serverless, and functions, Brian, have you done anything with functions like AWS lambda, or digital ocean, or any of those Azure functions?

00:12:09 Now for a while I played with it when I learned about him, but I haven't done anything lately.

00:12:14 Yeah, they're neat, I've been thinking about this project, I'm not even close to committing to it. And I'm not gonna give away too many details until I more willing to put time and energy into it. But something that requires interaction from many, many different geographical locations. And one thing that's really cool about lambda and serverless these functions is you only pay while they're running. And so if you want to say I want to have 20 different locations in which I can like geo locations throughout the world, I could do certain things, but I'm not going to do them very often, well, having a bunch of functions, many of them on these different parts of the cloud would be really awesome. And if you're working with AWS lambda, there's certain API's for doing this, obviously, that AWS puts out. But what if you were a Python developer, and you want to use Python. So I present to you AWS, lambda power tools, Python suite of utilities, for AWS, lambda functions, that makes distributed tracing, structured logging, custom metrics, and unimportant to many leading Best Practices easier. And it is all based on Python. So you can just write your Python code and start working with this API. This one came to us from let me make sure I got this right via Mark Pender. So thanks Mark for sending this in. It also happens to be available in Java, TypeScript, and dotnet. But you come down and look at the features. There's all sorts of different bits of Python code and classes or modules that you can use that do things like distributed tracing, right, because if you're on a serverless thing, and something you want to, you know, keep track of some sort of logging or performance, you know, those things are super transient, they don't have a hard drive where you append to the log or anything like that, right. So having that kind of setup would be great. uses Pydantic for data parsing. But there's just a bunch of built in parts of this library that you can use within your functions, your serverless functions that make it better. So it's got tracing, which includes decorators and utilities to trace lambda functions, both synchronous and asynchronous. There you go, structured logging, metrics that asynchronously go up to CloudWatch. Remember, this is AWS event handlers for putting stuff over into Graph QL. You can build your own middleware, like something that runs before and after the request that's really, really handy. Like only certain types of clients should be able to call this over the web, batch processing, typing validation and bunch of other stuff parsing streaming. So you can actually set it up to sort of loading some massive dataset into your function. You can just stream that data in and process as it goes. So there's tutorials and there's some example applications there's a server the shopping cart serverless airline, that's a pretty big one serverless e commerce platform and some graph serverless just let me just say this, and it's not a joke and Siri serverless Graph QL nanny booking API? Sure. Anyway, people are doing serverless, especially if they're doing AWS lambda, this might be cool. John Shin audience points out that Zappa works great for quickly deploying flask apps as Yeah. So if you look at AWS Xapo, lambda flask is probably a sufficient search. Right? That's a pretty cool project. I believe we covered that way, way back in the day. So basically, it turns your flask routes into serverless function calls as well. So anyway, here's some some nice tools. I suspect you could probably put those together as well. Right. Like your, your tracing and logging, you could probably still put inside of Zappo. But I haven't tried that companies.

00:15:56 Cool. Neat. Well, I I'm looking forward to whatever secret project,

00:16:00 there's like a 17 and a half percent chance that that actually comes to fruition, because it's it's got a lot of operational overhead. I'm not sure I want to like, put myself on pager duty. Yeah, I do want to hear what you got next. Well, I wanted to stop is on the screen. So yeah,

00:16:15 so I wanted to talk about Bob elder boss. And actually, his his GitHub profile that several people have done things like that. So we're looking at Bob's GitHub profile. And one of the things you see that's different than the default is, you see, you see some stuff at the top like the latest pi bytes articles, and latest Python tips and even latest fostered on toots. So that's kind of neat. But how did he do this? Well, like Luckily, he's got a link at the bottom that says how to create a self updating GitHub readme. And we did. We did talk about this way back in 2020, we Simon Willison had a blog post about that. And so we'll link to the episode. And Simon's also, in Bob actually says he was inspired by both Simon and I think, Brett cannon as well as a updated readme. But I really liked this article. So it's just a little short thing as saying, Hey, I started doing updating my profile GitHub profile with with some tools, and he just published all the tools. So this, that's pretty awesome. First of all, he's got a script. So the script that runs, of course, he has it up on GitHub as well. And it's it just goes through and collects all of this data for him. And in the scripts, pretty easy to read, you know, not terrible, go through, and it has links to where he's getting the information. And then then all of it is used to fill out all that data is used to fill out a template, which he also published the template. It's a markdown file, that, yeah, he uses for that. And then all of its pulled together with a GitHub actually, let

00:17:56 me go back for just a second there. It looks like it's a markdown file that has Jinja template language in it. So okay, hit it, hit it with Jinja. And it it generates the final markdown? I

00:18:07 think. So. Yeah. How's it? Well, to look, I didn't look exactly where the templates being used in the code. But yeah,

00:18:14 I don't see either. But it's, you know, you can put you don't have to have well formed HTML for Jinja. To run, you can just jam it against anything. For example, the RSS feed for Python bytes is generated using just like, an XML template with markup language and like this.

00:18:31 Yeah, but it does look like he's using Ginger Ginger template itself, out of the Jinja. Two project to render it. So yeah, cool, nice. And then the whole thing is run by a GitHub action, and it auto commits. So using another project that Git, GitHub auto commit, but the whole things I pulled together and runs whenever so once a day. And when does it run? Well, it's a cron job. So I had to use my handy decoder, because I can never remember that stuff. crontab dot guru, it's 845 in the morning, it goes off and, and runs this. So kind of neat. I wanted to try this. So I highlighted it again, because it's been on my To Do lists. It's 2020. I haven't done it yet. One of the things that I'm hoping it will do is it'll highlight that I haven't posted any articles recently, and it'll get me off my ramp and write some more because I want to write

00:19:26 Yeah, yeah, you'll have to take on the philosophy that I did as well. Like, you know, what, two paragraphs that's a perfectly fine blog posts. Yeah,

00:19:34 definitely. I learned something, learn something. And also the Today I learned sort of thing as well. So yeah,

00:19:41 that was very popular. Well, that's, that's quite a nice one.

00:19:45 That's all of our normal items.

00:19:47 Now is this You got any Well, let me let me go to my extras first, since I got a follow up for this one. I kind of I know that we both you. So you talked about crontab dot guru, right if people haven't seen this before, I just learned about this that there's, there's this funky syntax for cron jobs. But there's this site crontab dot guru that lets you put in like, well, I want a five there says every minute past hour five, if you just say Star, Five Star Star Star, for example. Or if you put with it's like store over 20, every 20 minutes, you know, pass every minute past the 20th hour or like there's, there's a weird syntax here. But there's this cool little site that you referenced. Shower.

00:20:32 Yeah, yeah. I was curious if you could do like, just day of the week and not like no sun, Saturday and Sunday. How you do that?

00:20:39 Yeah. Probably. Yeah, there's plenty star now. Anyway, there's, there's a whole bunch of different things and a little bit of a description on how this works. But yeah, we need more interested in the 90. Let me let me tell you about a few things real quick. I recently I've been playing with Canary mail. Canary mail is like a mail client, like spike or Outlook or whatever, you know, one of the like Thunderbird on the client side rich email clients. Okay, but this thing just added an AI capability called inbox copilot, which is a lot like GitHub copilot, ah, and so you just go to it, you just say, hey, their email, write me a message that says this. So for example, you could just see, like, if you got a message asking if you're gonna be able to make the same meaning, you could just say, you type CCC, anywhere in your message, it pulls up this little separate window that you talk to the AI and just say, tell them you know, apologize. I'll be late by 2030 minutes traffic. And that's all you say. And it writes like a really nice formal, like, well written, friendly, not terse message back. So I'm going to try to start playing with this a little bit more, we'll see how it goes. I already had the app, it just it, they just came with this copilot thing like, Okay, that's pretty interesting. So people can check that out, and don't even know what it costs to be clear, not an ad this. This episode is sponsored by Microsoft. But yeah, it's like $20 a year, you know, not not a terribly expensive thing to play with. Alright, next one is, this is a tweet from the Python package index itself. And the status is Python, or the the message is Python 311 delivers. Check this out, Brian. So they show some kind of analytics, real time performance graph of the G unicorn. So Python worker processes that power pi pi before on Python 310. And when they upgraded to 311. It's pretty striking, huh?

00:22:33 Yeah, totally. That just went down. And in load drive you look

00:22:37 at I mean, it dropped at least 50% of usage there. And then if you this is a pretty zoomed in vector, someone else, Dustin Ingram, it was tweeted, well, you should see it over time, more like, bam, there's this huge jump in the middle. This is when they restarted it. You know, whenever you restart the app, it doesn't have like all of its caches, and all that stuff warmed up. And potentially they even maybe had to throw away like Redis cache data, if they were pickling it because 310 and 311 didn't, you know, they might not be compatible in a binary way. So anyway, there's like this kind of like, ouch, you restarted us, nerds type of thing. But then after that, it really, really drops. I mean, at least at least 50% or 2x, more for 310, then 311. So that's, that's really massive. That's pretty cool. Anyway, so 311 delivers people can check that out. And this is there's a lot of traffic on pi pi.org. Right, because it's not just the the human browser traffic. It's every time you pip install something every time you do a Docker build, and it runs pip install some, like all the robots of the world are just hammering this thing, you know? Yeah, yep. Yep. All right. So that's a good one. I was just in Las Vegas this weekend. That was fun.

00:23:49 Thanks for having it in.

00:23:51 Real time when we just see the Blue Man Group and we went to see Cirque du Soleil we had breakfast at like, beautiful brunch. They even had a You know how some places have like a little omelet factory where you can have some eggs, whatever you tell them. They had a doughnut one of those as well. So we'll make custom doughnuts for you on the spot. It was outrageous. Why do I bring this up not to rub in whether or not I was in Vegas, but it was my first chance to test out my iPad as my only dev device traveling experience. Okay, that's true. But since since I tried all those tools and it worked pretty fabulously actually just took my iPad and my ergonomic keyboard so I don't give myself carpal tunnel again, and it works great. So all those tools we talked about people maybe I'll find a way if people want to know find a way to link back to the episode

00:24:37 able to monitor the Michael Kennedy empire from remote indeed, yeah,

00:24:41 even I busted in and installed some Linux security updates real quick and then dropped back out. It was all good tailed some logs. Yeah, it was fine. Most email. No, that's that's what my fire is about us right email. All right. Here's another good one. Linux, Amazon meta, and Microsoft went to break the Google Maps monopoly So apparently, Google Maps owns a significant portion of the mapping data on the Street View Data and so on. But all those groups I've mentioned, are working on create the scene called overture maps Foundation. And they're going to create an open source open to everyone set of maps by pulling in some of existing open map data, but also really doubling down on trying to add more information. That's pretty cool. Right? So if you want to do anything with mapping that might be getting a lot better. Yeah, I

00:25:27 haven't. I haven't seen the word TomTom in a long time.

00:25:31 No, I actually had my hands on a tomtom device this summer. It was insane. All right, last last one. Before we get to our joke, I decided my laptop that had zero stickers on it was boring. So I went completely bonkers. Got a completely. I went to red bubble ordered insane number of stickers and put on my laptop. What do you think the thing Brian, I'll put the link in the picture in the show notes.

00:25:53 I like the laptop opening and closing tags.

00:25:57 It's got a bracket laptop at the top of the laptop and it's got a bracket slash laptop at the bottom.

00:26:02 I can get Python bytes. There's nice testing code sis sticker.

00:26:07 Get in there, we'll find a spot I replaced the Mac icon with a terminal icon. So I was pretty good. Anyway, that was a lot of fun. Okay, but that's that's it for my extra is how about you?

00:26:17 I had a few extra. So I want to I just don't have a lot to add to these. But I've noticed it's kind of kind of interesting. So GitHub, I think this was on December 15 announced that they they're able to check for security leaks. And I it's there's I'm linking to an article that they can check check your GitHub repos for security leaks like secrets, and stuff. And apparently, that's how a lot of secrets get leaked as people like, you know, actually merge request a bunch of secrets or something. But the so it's kind of cool is there I went, there's some it says you have to turn it on, I went to check one of my repos. And it looked like it was already on so as well check it anyway. So I wanted to shout out to Julia Evans, to get that right, Julie Evans. She's written a whole bunch of great stuff to help programmers but she just released a pocket guide to debugging. And I was pretty intrigued by this. One of the one of the things that highlighted was asking for help, and writing a tiny program that reproduce the problem, those are two things that I really encourage people to do before they waste too much time. So I might throw some money away, because those are really great free tips. There's a a I found this what Python easter eggs repository? Not all of these work anymore. So I tried the first one the import Hello on Python 311. Doesn't seem to work. But a bunch of these others are really pretty fun. import this, of course, is there one of the things that I think I knew about at one point, but I forgot about was the from future import, bury as Fluffle. So this was a joke from 2009 That's still in Python 311 that it's very worst it's like a joke from Barry Warsaw and Brett cannon. And if you do that, it completely removes the not equal like the power of like the the bang equal sign with less than greater than for not equal. So the joke being Barry was the dictator for life, he would change it anyway, to kind of funny

00:28:26 falafel stands for friendly language, uncle for

00:28:29 life, and there's even a PEP for it. So you can you can read about the B PEP 401 with this.

00:28:36 Anyway, just sort of been our joke. I could have been a joke section.

00:28:41 I could have been our joke section. But we have another joke. We do. So I told

00:28:45 you, we'd wrap this up with some stuff about the cloud. So here's a nice little conversation a father and a daughter are having they're out walking in a park and looking up at the sky and they see a cloud in the mostly employee sky, empty sky. And the kid says, Dad, what are clouds made of? The dad looks down and clearly says Linux servers mostly.

00:29:06 That's good, right? Yeah, this good even when

00:29:09 they're serverless. They're probably still Linux things running in Docker running on a Kubernetes cluster running on Linux.

00:29:15 Serverless is a hilarious word. It just means you don't know where the server is. Yeah, it's like

00:29:19 servers not my problem. Yeah.

00:29:22 It's the

00:29:23 well, this show is not a problem. It was a lot of fun.

00:29:26 There was a lot of fun. Thanks so much for for joining us and showing up again. And thanks everybody in the audience.

00:29:32 Yeah, absolutely. A before we I have one quick more announcement really, really quickly. Next week for those of you who are kind enough to drop in and join us live. We're not doing a live show. We're going to do a crossover episode with talk Python and vice versa. bites on dogfight on and Brian We're gonna be on vacation.

00:29:49 So I'll see you in January. All right. Talk to everybody in January.

00:29:53 Yeah. So Happy New Year, everyone. See you later. Bye.

