
00:00:00.000 --> 00:00:04.500
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.500 --> 00:00:09.160
This is episode 131, recorded May 15th, 2019. I'm Michael Kennedy.


00:00:09.160 --> 00:00:10.000
And I'm Brian Atkin.


00:00:10.000 --> 00:00:10.900
Hey Brian, how are you doing?


00:00:10.900 --> 00:00:12.600
I am good. How are you?


00:00:12.600 --> 00:00:15.800
I still have a little bit of conference hangover.


00:00:15.800 --> 00:00:18.640
Two conferences in a row and then some parties.


00:00:18.640 --> 00:00:20.440
Like, definitely took it out of me. How about you?


00:00:20.440 --> 00:00:22.440
Oh yeah, you went to Build afterwards. How was that?


00:00:22.440 --> 00:00:25.160
It was good. I did a bunch of podcasting, met some other folks.


00:00:25.160 --> 00:00:29.440
I got to see what a different type of conference than PyCon looked like.


00:00:29.440 --> 00:00:31.000
And yeah, it's pretty different.


00:00:31.000 --> 00:00:33.160
- Okay, so anybody out there from Build listening,


00:00:33.160 --> 00:00:35.400
you can invite me next year, that'd be just fine.


00:00:35.400 --> 00:00:36.360
(laughing)


00:00:36.360 --> 00:00:38.240
- Yeah, absolutely, absolutely.


00:00:38.240 --> 00:00:40.740
So yeah, it was fun to be there,


00:00:40.740 --> 00:00:42.880
but it's good to be back home from all the conferencing.


00:00:42.880 --> 00:00:44.320
- Yeah, it is.


00:00:44.320 --> 00:00:45.560
So let's get back into Python.


00:00:45.560 --> 00:00:46.380
- Let's get into it.


00:00:46.380 --> 00:00:47.920
So before we do, though, I wanted to say thank you


00:00:47.920 --> 00:00:51.480
to DigitalOcean, check them out at pythonbytes.fm/digitalocean.


00:00:51.480 --> 00:00:52.880
More about that later.


00:00:52.880 --> 00:00:56.360
I feel like we kind of have a little bit of a pep roundup


00:00:56.360 --> 00:00:57.480
for this episode, Brian.


00:00:57.480 --> 00:00:58.720
We got at least three peps. - Are we?


00:00:58.720 --> 00:01:01.680
Yeah, we got at least three peps making an appearance, maybe four.


00:01:01.680 --> 00:01:07.600
Okay, well, the ball is rolling now with the new steering council in place,


00:01:07.600 --> 00:01:12.960
and they're kicking butt and taking names. And it's great. So we'll start off with,


00:01:12.960 --> 00:01:20.640
I just saw this today, pep 581 is accepted. And that is the GitHub issues for CPython. So


00:01:20.640 --> 00:01:27.440
CPython has traditionally had its own, I think it was its own custom made defect tracking system or


00:01:27.440 --> 00:01:33.840
something it hasn't switched yet but it will be switching to GitHub issues. We'll link to the PEP


00:01:33.840 --> 00:01:40.640
and also it has discussion of pros and cons but it has been accepted. But the follow-on PEP is 588


00:01:40.640 --> 00:01:46.400
and I'll quote Barry Warsaw here, "The migration will be a large effort with much planning,


00:01:46.400 --> 00:01:50.960
development, and testing and we welcome volunteers who wish to help make it a reality.


00:01:50.960 --> 00:01:56.800
I look forward to your contributions on PEP 588 and the actual work of migrating issues to GitHub."


00:01:56.800 --> 00:02:01.000
So 588 is, okay, now that we've decided to do it, how are we going to do it?


00:02:01.000 --> 00:02:02.200
How are we going to do the migration?


00:02:02.200 --> 00:02:05.840
Man, once they figure that out, they'll probably need some help to do it.


00:02:05.840 --> 00:02:06.720
So that's cool.


00:02:06.720 --> 00:02:10.560
And you know, you spoke to Barry on our episode, our live episode at PyCon,


00:02:10.560 --> 00:02:14.860
yeah, PyCon about becoming a core developer and ways you can help.


00:02:14.860 --> 00:02:19.400
And here, it sounds like another way you can contribute to CPython without


00:02:19.400 --> 00:02:21.280
actually writing C code potentially.


00:02:21.280 --> 00:02:21.560
Yeah.


00:02:21.560 --> 00:02:24.960
I'm not afraid of C code, but I know, I mean, especially in the Python community,


00:02:24.960 --> 00:02:27.860
There's some people that don't aren't involved with C code.


00:02:27.860 --> 00:02:29.620
So there's other places, ways to help.


00:02:29.620 --> 00:02:30.560
And this is one.


00:02:30.560 --> 00:02:30.760
Yeah.


00:02:30.760 --> 00:02:31.080
Yeah.


00:02:31.080 --> 00:02:32.840
And it's, it's one thing to write C code.


00:02:32.840 --> 00:02:36.260
It's another to write on the core of CPython itself.


00:02:36.260 --> 00:02:36.480
Right.


00:02:36.480 --> 00:02:41.920
I mean, that's like, it's a super highly polished piece of software and any change


00:02:41.920 --> 00:02:44.120
you make is like massive ramification.


00:02:44.120 --> 00:02:44.960
So, right.


00:02:44.960 --> 00:02:46.840
I can see how the world depends on it.


00:02:46.840 --> 00:02:47.480
No pressure.


00:02:47.480 --> 00:02:51.880
You're going to take down the Instagram influencers if you mess this up.


00:02:51.880 --> 00:02:52.520
So don't.


00:02:52.520 --> 00:02:53.240
Yeah.


00:02:54.520 --> 00:02:57.960
Maybe some science and other important things as well.


00:02:57.960 --> 00:02:58.800
I think this is good.


00:02:58.800 --> 00:03:01.840
You know, Brett Kana was key in getting CPython,


00:03:01.840 --> 00:03:04.240
the source code over to GitHub originally.


00:03:04.240 --> 00:03:06.660
And I feel like this is well overdue, right?


00:03:06.660 --> 00:03:10.340
Like, having the issues there means you can reference them


00:03:10.340 --> 00:03:13.120
in check-ins, it means that you get that integration


00:03:13.120 --> 00:03:15.480
for pull requests and all sorts of stuff.


00:03:15.480 --> 00:03:17.080
It just makes a lot of sense to do this.


00:03:17.080 --> 00:03:20.040
- Yeah, and I have no idea what the migration path


00:03:20.040 --> 00:03:20.880
looks like, but--


00:03:20.880 --> 00:03:22.880
- Yeah, I was wondering, like, are they gonna copy


00:03:22.880 --> 00:03:28.280
every single issue across or is it this a chance to kind of like clean house?


00:03:28.280 --> 00:03:32.520
I go, well, if this bug comes back, it's important enough to worry about.


00:03:32.520 --> 00:03:33.760
If it doesn't, maybe it's not.


00:03:33.760 --> 00:03:37.640
I've been on projects like that, that have, we've gotten to a different bug


00:03:37.640 --> 00:03:41.540
tracking system where we just said, well, we'll just leave the other one around.


00:03:41.540 --> 00:03:46.240
And if anybody really cares about moving them over, we will, but those


00:03:46.240 --> 00:03:48.480
are sometimes cleaning up as a good thing.


00:03:48.480 --> 00:03:49.520
Yeah, I totally agree.


00:03:49.520 --> 00:03:51.440
So how about cleaning up some code?


00:03:51.720 --> 00:03:52.880
Yes, let's clean up code.


00:03:52.880 --> 00:03:56.980
So I'm a big fan of design patterns in general, the solid principles, all these


00:03:56.980 --> 00:04:00.280
things I really enjoy, like thinking about how that influences code.


00:04:00.280 --> 00:04:05.780
And one of the things that makes me crazy when I read code is like ultra


00:04:05.780 --> 00:04:08.960
nested indented conditional stuff.


00:04:08.960 --> 00:04:12.940
And when I see it, I feel like people write code like that because.


00:04:12.940 --> 00:04:15.540
They don't believe there's another way.


00:04:15.540 --> 00:04:17.360
It's just like, well, this code is complicated.


00:04:17.360 --> 00:04:22.600
So it's like indented, you know, 16 spaces or whatever it happens to be


00:04:22.600 --> 00:04:26.820
indented as right, like it doesn't have to be this way most of the time.


00:04:26.820 --> 00:04:31.400
So I just wanted to like call out a super easy to implement design pattern


00:04:31.400 --> 00:04:33.280
called guard clauses or guarding clauses.


00:04:33.280 --> 00:04:33.880
Okay.


00:04:33.880 --> 00:04:38.900
So this is if you have like a nested stuff, I have two little examples, like


00:04:38.900 --> 00:04:43.880
a bad one and a good one here in our show notes and people can check that out.


00:04:43.880 --> 00:04:44.380
And.


00:04:44.380 --> 00:04:46.220
It's like a little checkout for a user.


00:04:46.280 --> 00:04:48.720
So a user, they've got a shopping cart,


00:04:48.720 --> 00:04:49.980
they've got some items in there.


00:04:49.980 --> 00:04:51.680
Some of them are available, some of them aren't.


00:04:51.680 --> 00:04:54.280
Some of them are selected to be express shipped,


00:04:54.280 --> 00:04:56.520
some of them are not, and things like that.


00:04:56.520 --> 00:05:00.200
And so it's got like, if user is not none,


00:05:00.200 --> 00:05:01.280
go through their carts.


00:05:01.280 --> 00:05:03.160
If the item is available, add it.


00:05:03.160 --> 00:05:06.040
In addition to that, if the item is selected


00:05:06.040 --> 00:05:07.600
to be express shipped, add it.


00:05:07.600 --> 00:05:10.560
And that's like just, what is that, a 30,


00:05:10.560 --> 00:05:13.880
30 degrees down, 45 degrees down line of code, right?


00:05:13.880 --> 00:05:15.440
It's not vertical, it's like, you know,


00:05:15.440 --> 00:05:17.160
on an angle, probably 45, right?


00:05:17.160 --> 00:05:20.280
And every one of these is asserting a positive thing.


00:05:20.280 --> 00:05:22.400
The thing I want, if the user is good,


00:05:22.400 --> 00:05:23.480
I want to go through them.


00:05:23.480 --> 00:05:25.600
If the thing is available, I want to do this,


00:05:25.600 --> 00:05:26.880
and so on and so on.


00:05:26.880 --> 00:05:29.040
Guarding clauses basically check for the negative


00:05:29.040 --> 00:05:30.480
and bail out as soon as possible.


00:05:30.480 --> 00:05:32.640
So you could rewrite that and go, if the user is none,


00:05:32.640 --> 00:05:34.580
return empty stuff for their stuff.


00:05:34.580 --> 00:05:36.480
If it's not available, just skip through the loop


00:05:36.480 --> 00:05:38.760
with a continue and so on, and it's much simpler.


00:05:38.760 --> 00:05:41.520
And it's not just about visual code.


00:05:41.520 --> 00:05:43.380
It's not just like easier to read,


00:05:43.380 --> 00:05:45.300
but it's easier to reason about.


00:05:45.300 --> 00:05:46.540
Like if you get into one of these


00:05:46.540 --> 00:05:48.920
super nested conditional structures,


00:05:48.920 --> 00:05:51.160
then it's really hard to think about like,


00:05:51.160 --> 00:05:53.220
okay, I want this case and that case,


00:05:53.220 --> 00:05:54.580
like where does that go?


00:05:54.580 --> 00:05:57.220
Do I need another branch in this if and so on?


00:05:57.220 --> 00:05:58.820
I feel like it's much easier to maintain


00:05:58.820 --> 00:06:00.980
and add to with these guarding clauses.


00:06:00.980 --> 00:06:02.660
- And in the example you're showing


00:06:02.660 --> 00:06:04.340
and we're gonna have in the show notes,


00:06:04.340 --> 00:06:08.020
the better one actually ends up being more lines of code.


00:06:08.020 --> 00:06:11.380
However, you're visually gonna skip over the top part


00:06:11.380 --> 00:06:13.180
'cause you're like, oh, I'm just making sure


00:06:13.180 --> 00:06:14.880
the things are the right.


00:06:14.880 --> 00:06:17.240
And then in the middle, I've got highlighted


00:06:17.240 --> 00:06:20.440
just like three lines of code where the actual work is.


00:06:20.440 --> 00:06:22.280
And highlighting where the real work is


00:06:22.280 --> 00:06:24.600
instead of dispersing the real work


00:06:24.600 --> 00:06:26.920
across lots of if clauses.


00:06:26.920 --> 00:06:27.960
I think that's a great idea.


00:06:27.960 --> 00:06:28.780
- Yeah, thanks.


00:06:28.780 --> 00:06:29.620
I super love it.


00:06:29.620 --> 00:06:31.400
I'm linking to Martin Fowler's original little article


00:06:31.400 --> 00:06:33.920
on it, which is like C or JavaScript or something.


00:06:33.920 --> 00:06:35.680
But it's, you know, it's if statements.


00:06:35.680 --> 00:06:37.280
It's basically the same idea.


00:06:37.280 --> 00:06:41.460
As well as to one on from a Go, a Medium article


00:06:41.460 --> 00:06:43.300
about line of sight programming,


00:06:43.300 --> 00:06:44.580
talking about like you can just,


00:06:44.580 --> 00:06:45.900
you know, see right down the line.


00:06:45.900 --> 00:06:48.060
Anyway, it's all pretty cool.


00:06:48.060 --> 00:06:51.180
Definitely, definitely think how those can be used.


00:06:51.180 --> 00:06:53.060
I find it to make it a lot nicer,


00:06:53.060 --> 00:06:54.420
a lot easier to maintain this code.


00:06:54.420 --> 00:06:57.460
- It'll also reduce the cyclomatic complexity of your code.


00:06:57.460 --> 00:06:58.820
- Yes, yes it will.


00:06:58.820 --> 00:07:01.060
And that also probably, you know, that's cool


00:07:01.060 --> 00:07:04.180
because it'll make Anthony Shaw happy in his Wiley,


00:07:04.180 --> 00:07:06.580
but it'll, (laughs)


00:07:06.580 --> 00:07:10.060
but it also means like it's less cognitive overhead


00:07:10.060 --> 00:07:10.980
to maintain, right?


00:07:10.980 --> 00:07:12.920
You can say, okay, I cleared out the stuff that's not good.


00:07:12.920 --> 00:07:13.820
Now we're in the good spot.


00:07:13.820 --> 00:07:14.860
It's not indented.


00:07:14.860 --> 00:07:15.940
It's not a lot going on.


00:07:15.940 --> 00:07:16.780
You're right.


00:07:16.780 --> 00:07:19.140
It's so simple that I don't, you know,


00:07:19.140 --> 00:07:20.700
if you're not using it, just check it out.


00:07:20.700 --> 00:07:21.540
It's great.


00:07:21.540 --> 00:07:22.360
- Good reminder.


00:07:22.360 --> 00:07:23.300
- Speaking of if you're not using it.


00:07:23.300 --> 00:07:26.300
- Yeah, so Python 3 is a thing.


00:07:26.300 --> 00:07:29.000
We've talked about it a few times in the past.


00:07:29.000 --> 00:07:31.020
There's probably a lot more people.


00:07:31.020 --> 00:07:31.860
Well, I don't know.


00:07:31.860 --> 00:07:33.060
There's probably more people,


00:07:33.060 --> 00:07:36.020
some people now still converting to Python 3


00:07:36.020 --> 00:07:37.620
or starting to get used to it.


00:07:37.620 --> 00:07:44.620
The easy hurdles are just to start not using the stuff you can't anymore, and some of the string changes and whatever.


00:07:44.620 --> 00:07:50.920
But here's an article we ran across called "Things You're Probably Not Using in Python 3, But Should."


00:07:50.920 --> 00:07:56.420
So there's a lot of new items in Python 3, but this article goes through a handful.


00:07:56.420 --> 00:08:03.720
So there's some obvious, I think obvious, of course items, like fstrings, pathlib, and maybe data classes.


00:08:03.720 --> 00:08:07.840
I'm using them a lot, but maybe fstrings and pathlib, definitely,


00:08:07.840 --> 00:08:09.080
everybody should be using those.


00:08:09.080 --> 00:08:10.160
Those are awesome.


00:08:10.160 --> 00:08:12.720
I'm warming to type hinting a little bit more.


00:08:12.720 --> 00:08:15.520
I think it's feeling more natural.


00:08:15.520 --> 00:08:17.240
I'm not really a zealot about it.


00:08:17.240 --> 00:08:22.800
But when I start trying to see myself start typing a comment to say what kind


00:08:22.800 --> 00:08:26.720
of stuff should go into a function or what should be in a variable, I'm like,


00:08:26.720 --> 00:08:28.920
oh, I could just put a type hint on there.


00:08:28.920 --> 00:08:30.600
Exactly.


00:08:30.600 --> 00:08:32.440
Yeah, comments are deodorant, right?


00:08:32.440 --> 00:08:34.680
They go on to bad code to make it smell better.


00:08:34.680 --> 00:08:37.200
But maybe you should just make it better by putting some type hint.


00:08:37.200 --> 00:08:38.440
>> Maybe type hint, yeah.


00:08:38.440 --> 00:08:43.120
So especially when I'm only intending it for the reader.


00:08:43.120 --> 00:08:45.920
I'm not using some testing tools around that.


00:08:45.920 --> 00:08:49.560
But there's some stuff that I knew about that I just forgot.


00:08:49.560 --> 00:08:53.640
So I'm glad that I'm going to list three that he listed.


00:08:53.640 --> 00:08:59.960
Enumerations with the new enum package and enum and auto methods and classes.


00:08:59.960 --> 00:09:01.920
>> Yeah, I love enums. They're really great.


00:09:01.920 --> 00:09:04.160
I don't use them enough, but yeah, they're super.


00:09:04.160 --> 00:09:06.360
- Enough, I wanna use them a little bit more


00:09:06.360 --> 00:09:08.200
after this reminder.


00:09:08.200 --> 00:09:10.880
Also, LRU-Cache is built in.


00:09:10.880 --> 00:09:13.440
It's a decorator in FuncTools


00:09:13.440 --> 00:09:16.480
that you can use really easy memoization.


00:09:16.480 --> 00:09:20.960
So if anybody's not familiar with LRU-Cache or memoization,


00:09:20.960 --> 00:09:23.240
the gist of it is you just throw this decorator


00:09:23.240 --> 00:09:24.280
on a function.


00:09:24.280 --> 00:09:26.480
If it's really functional programming type stuff


00:09:26.480 --> 00:09:30.080
where you pass in some value and you get at,


00:09:30.080 --> 00:09:32.540
and that has no behavioral side effects


00:09:32.540 --> 00:09:35.100
and it just returns some other, some value


00:09:35.100 --> 00:09:39.360
that's a one-to-one correlation between input and output.


00:09:39.360 --> 00:09:41.040
And it's called a lot.


00:09:41.040 --> 00:09:44.180
You can use memoization with LRU cache to speed it up.


00:09:44.180 --> 00:09:46.460
And it just remembers the old stuff.


00:09:46.460 --> 00:09:49.420
- Yeah, it just says, if I see this argument come in,


00:09:49.420 --> 00:09:51.060
say you have a number in your example,


00:09:51.060 --> 00:09:54.940
if the number 72 comes in and the answer was 7,000,


00:09:54.940 --> 00:09:56.740
the next time it's called it just goes,


00:09:56.740 --> 00:09:59.380
that argument's 72, we know, it's not changed,


00:09:59.380 --> 00:10:01.140
the answer is going to be 7,000.


00:10:01.140 --> 00:10:05.080
Anytime you have a function that basically is deterministic,


00:10:05.080 --> 00:10:07.040
you give it the same input, it gives you the same output,


00:10:07.040 --> 00:10:08.700
this is a super good option.


00:10:08.700 --> 00:10:09.780
- Yeah, especially if it's something


00:10:09.780 --> 00:10:11.260
that's time consuming,


00:10:11.260 --> 00:10:13.420
it has to do some data crunching or something.


00:10:13.420 --> 00:10:15.140
The last one I'm going to highlight


00:10:15.140 --> 00:10:19.720
that I totally forgot about is extended iterable unpacking.


00:10:19.720 --> 00:10:22.460
And this one you kind of have to see to get it,


00:10:22.460 --> 00:10:24.820
but basically you can, when you,


00:10:24.820 --> 00:10:26.860
like for instance, if you're unpacking a list


00:10:26.860 --> 00:10:28.380
with a three element list,


00:10:28.380 --> 00:10:30.360
You can assign it to three variables.


00:10:30.360 --> 00:10:31.380
We know that.


00:10:31.380 --> 00:10:34.060
But if you have more than three,


00:10:34.060 --> 00:10:36.160
you can put a star on one of those things


00:10:36.160 --> 00:10:38.420
and it'll catch all of the rest.


00:10:38.420 --> 00:10:40.220
And that's cool.


00:10:40.220 --> 00:10:41.860
There's lots of places that I could use that


00:10:41.860 --> 00:10:43.040
that I forgot about.


00:10:43.040 --> 00:10:45.340
- You know, you can even do the star in the middle, right?


00:10:45.340 --> 00:10:48.660
You've got like head, star, body, and tail for five things.


00:10:48.660 --> 00:10:50.260
And the body is three things.


00:10:50.260 --> 00:10:51.100
Pretty awesome.


00:10:51.100 --> 00:10:51.920
- Yeah.


00:10:51.920 --> 00:10:53.140
- When I look at this and I think about it,


00:10:53.140 --> 00:10:54.820
you know, obviously there's a lot of people


00:10:54.820 --> 00:10:56.600
moving to modern Python


00:10:56.600 --> 00:10:59.600
using it in their code, right?


00:10:59.600 --> 00:11:02.600
But just like you could come from C


00:11:02.600 --> 00:11:04.600
and write non-pythonic Python,


00:11:04.600 --> 00:11:08.600
you could move to Python 3 and write non-Python 3-ic?


00:11:08.600 --> 00:11:09.600
I don't know.


00:11:09.600 --> 00:11:12.600
Like, you could write code that's not idiomatic to Python 3, right?


00:11:12.600 --> 00:11:14.600
You still do everything the Python 2 style,


00:11:14.600 --> 00:11:17.600
not taking advantage of any of these things, right?


00:11:17.600 --> 00:11:20.600
Like, f-strings, pathlibs, type hinting,


00:11:20.600 --> 00:11:23.600
async and await, you know, like you said, enums.


00:11:23.600 --> 00:11:26.880
You could like do none of that and still be quote using Python 3.


00:11:26.880 --> 00:11:32.880
So I think it's cool a cool reminder an example of things you could do to be more idiomatically Python 3.


00:11:32.880 --> 00:11:39.560
Yeah, actually when I was thinking about that the author of this even says some of his old articles are written essentially for Python 2.


00:11:39.560 --> 00:11:46.160
And I think that's a great place for people if they were if they're new to they want to start doing technical blogging and they


00:11:46.160 --> 00:11:50.800
They don't really have some ideas on what to do. You go look at some common and popular


00:11:51.520 --> 00:11:54.480
articles that are written in Python 2 style


00:11:54.480 --> 00:11:57.920
and kind of make them your own and do a similar article.


00:11:57.920 --> 00:12:00.240
Don't copy it, but do a similar article


00:12:00.240 --> 00:12:03.800
with Python 3 syntax and you'll probably get some hits.


00:12:03.800 --> 00:12:04.640
- Yeah, yeah, for sure.


00:12:04.640 --> 00:12:07.160
Or even if you really love that resource you're reading,


00:12:07.160 --> 00:12:08.320
you could send them a note like,


00:12:08.320 --> 00:12:10.280
hey, I'd love to upgrade these three articles


00:12:10.280 --> 00:12:11.680
to Python 3, could I help you?


00:12:11.680 --> 00:12:13.480
- Oh yeah, that would be much nicer, do that.


00:12:13.480 --> 00:12:14.300
- Yeah.


00:12:14.300 --> 00:12:16.240
(laughing)


00:12:16.240 --> 00:12:18.000
They, well, they both have their own merits, right?


00:12:18.000 --> 00:12:18.840
- Yeah.


00:12:18.840 --> 00:12:20.120
- Speaking of merits, let me tell you about Digitalition.


00:12:20.120 --> 00:12:22.080
DigitalOcean is powering all of our things,


00:12:22.080 --> 00:12:23.020
which is awesome.


00:12:23.020 --> 00:12:25.400
And we talked about GitHub at the beginning.


00:12:25.400 --> 00:12:28.580
One of the big things GitHub is doing is GitHub Actions.


00:12:28.580 --> 00:12:33.160
So kind of automated workflow for things that happen,


00:12:33.160 --> 00:12:35.640
you know, check-ins and other stuff on GitHub.


00:12:35.640 --> 00:12:40.240
And DigitalOcean has a GitHub Actions for DigitalOceans


00:12:40.240 --> 00:12:42.360
that you can install and plug in there.


00:12:42.360 --> 00:12:45.800
So you can take your workflow that's happening on GitHub


00:12:45.800 --> 00:12:48.840
and automatically use that to do things like


00:12:48.840 --> 00:12:52.000
create a new virtual machine or push a new version


00:12:52.000 --> 00:12:55.080
to a Kubernetes, managed Kubernetes cluster


00:12:55.080 --> 00:12:58.280
based on a push or something like that, right?


00:12:58.280 --> 00:13:01.280
Or maybe snapshot it when an issue is filed, who knows?


00:13:01.280 --> 00:13:02.660
But all sorts of cool stuff you can do


00:13:02.660 --> 00:13:04.740
with GitHub Actions and DigitalOcean


00:13:04.740 --> 00:13:05.680
mixed together with that.


00:13:05.680 --> 00:13:10.000
So check that out at pythonbytes.fm/digitalocean.


00:13:10.000 --> 00:13:12.420
Get $100 free credit for new users.


00:13:12.420 --> 00:13:13.760
Definitely can recommend them.


00:13:13.760 --> 00:13:15.200
They're doing good stuff.


00:13:15.200 --> 00:13:16.840
So how about some fun, Brian?


00:13:16.840 --> 00:13:18.360
- Yeah, we got a couple fun ones.


00:13:18.360 --> 00:13:20.960
- Yeah, yeah, let's play a few games here.


00:13:20.960 --> 00:13:23.120
It's awesome that these came up just right by each other.


00:13:23.120 --> 00:13:25.280
So I want to talk about this thing


00:13:25.280 --> 00:13:29.080
called the Python Arcade Library,


00:13:29.080 --> 00:13:31.920
which is at arcade.academy,


00:13:31.920 --> 00:13:35.000
which I didn't even know .academy was a top-level domain,


00:13:35.000 --> 00:13:37.520
but apparently, apparently it is.


00:13:37.520 --> 00:13:38.480
That's pretty awesome.


00:13:38.480 --> 00:13:43.480
So this is a library for easily building 2D games in Python


00:13:43.480 --> 00:13:48.000
that run at like 60 frames a second on OpenGL.


00:13:48.000 --> 00:13:49.420
- That's pretty cool, right?


00:13:49.420 --> 00:13:52.500
So it's really about, like this is by a guy,


00:13:52.500 --> 00:13:56.020
his name is Paul, Paul, hopefully I'm getting that right.


00:13:56.020 --> 00:13:59.460
He built this to help teach, he teaches at a college,


00:13:59.460 --> 00:14:01.380
and it helps teach his students


00:14:01.380 --> 00:14:03.140
a more visual way to learn programming.


00:14:03.140 --> 00:14:04.760
So it's not to teach game development,


00:14:04.760 --> 00:14:05.900
it's to teach programming,


00:14:05.900 --> 00:14:07.900
but because it's got a visual aspect


00:14:07.900 --> 00:14:11.100
and not just like a terminal version,


00:14:11.100 --> 00:14:13.380
you can see what you're creating more easily


00:14:13.380 --> 00:14:14.380
and see it working.


00:14:14.380 --> 00:14:15.460
So that's pretty cool, you can create


00:14:15.460 --> 00:14:17.660
like Minesweeper games, Hangman games,


00:14:17.660 --> 00:14:20.500
and in particular, platformer games.


00:14:20.500 --> 00:14:22.460
So if you wanted to recreate Lemmings,


00:14:22.460 --> 00:14:25.140
or he wanted to do like Joust or whatever,


00:14:25.140 --> 00:14:26.420
you could totally use this for that.


00:14:26.420 --> 00:14:27.260
- Ooh, neat.


00:14:27.260 --> 00:14:30.740
- Yeah, and you can check out the sample games made with it.


00:14:30.740 --> 00:14:33.560
So there's like a tower defense game.


00:14:33.560 --> 00:14:35.460
I'm a sucker for tower defense.


00:14:35.460 --> 00:14:37.180
There's like a little Angry Bird thing made.


00:14:37.180 --> 00:14:38.340
There's all sorts of fun stuff.


00:14:38.340 --> 00:14:39.760
There's tons of examples here.


00:14:39.760 --> 00:14:42.700
I think mostly because these are students


00:14:42.700 --> 00:14:43.860
who are taking the class,


00:14:43.860 --> 00:14:45.500
but then submitting their projects.


00:14:45.500 --> 00:14:46.420
- Oh, that's a great idea.


00:14:46.420 --> 00:14:48.000
- Yeah, nice, right?


00:14:48.000 --> 00:14:51.540
- Yeah, and I like these 2D games.


00:14:51.540 --> 00:14:52.600
- I do too.


00:14:52.600 --> 00:14:54.440
Yeah, and it also includes things like physics,


00:14:54.440 --> 00:14:56.460
which is nice, 'cause it's one thing


00:14:56.460 --> 00:14:57.840
to get the graphics on the screen,


00:14:57.840 --> 00:15:00.160
but hit detection, physics, sound,


00:15:00.160 --> 00:15:01.880
all these other things are super hard,


00:15:01.880 --> 00:15:03.720
and I believe sound is still like a little bit


00:15:03.720 --> 00:15:04.940
of a iffy feature here.


00:15:04.940 --> 00:15:07.280
I hear that that's tough in Python,


00:15:07.280 --> 00:15:09.400
so maybe that's like a cool C extension


00:15:09.400 --> 00:15:10.500
somebody should write, I don't know.


00:15:10.500 --> 00:15:12.920
But anyway, it's all based on OpenGL,


00:15:12.920 --> 00:15:14.500
and it looks pretty cool,


00:15:14.500 --> 00:15:17.780
So definitely want to recommend that people check that out.


00:15:17.780 --> 00:15:19.820
Yeah, and you guys, similar one.


00:15:19.820 --> 00:15:20.660
How about that?


00:15:20.660 --> 00:15:23.180
- Yeah, so I wanted to highlight a article called


00:15:23.180 --> 00:15:26.000
Teaching a Kid to Code with Pygame Zero,


00:15:26.000 --> 00:15:27.580
written by Matt Lehman.


00:15:27.580 --> 00:15:30.700
So this is just this guy with his kids,


00:15:30.700 --> 00:15:32.820
he likes to play video games with his kid,


00:15:32.820 --> 00:15:36.020
and thought, you know, I should try to teach him how to code.


00:15:36.020 --> 00:15:40.880
And they tried, his son did like a version of Scratch,


00:15:40.880 --> 00:15:43.860
but the worry is that Scratch is really far removed


00:15:43.860 --> 00:15:47.300
from actual coding and the skills you build


00:15:47.300 --> 00:15:50.080
might not be transferable really easily.


00:15:50.080 --> 00:15:54.020
So I went ahead and decided to try Pygame Zero


00:15:54.020 --> 00:15:55.640
using the Mew editor.


00:15:55.640 --> 00:16:00.640
And I guess Pygame Zero is already pre-installed


00:16:00.640 --> 00:16:04.440
in Mew as is Python interpreter.


00:16:04.440 --> 00:16:05.280
I didn't know that.


00:16:05.280 --> 00:16:06.100
That's cool. - Oh, that's cool.


00:16:06.100 --> 00:16:06.940
Yeah, that's great.


00:16:06.940 --> 00:16:09.400
- And so a quote from somewhere.


00:16:09.400 --> 00:16:10.240
(laughs)


00:16:10.240 --> 00:16:12.500
"Pygame Zero is intended for use in education


00:16:12.500 --> 00:16:15.240
so that teachers can teach basic programming


00:16:15.240 --> 00:16:18.100
without needing to explain the Pygame API


00:16:18.100 --> 00:16:19.840
or write an event loop.


00:16:19.840 --> 00:16:24.140
He worked with his son and they came up with a 29 line


00:16:24.140 --> 00:16:27.380
of code, including blank spaces, little game,


00:16:27.380 --> 00:16:30.120
doesn't really do much, but it teaches a lot.


00:16:30.120 --> 00:16:33.280
So he said that his son learned about naming things


00:16:33.280 --> 00:16:36.680
and variables and mutability and fiddling with constants


00:16:36.680 --> 00:16:39.220
to see how those affect the screen size


00:16:39.220 --> 00:16:40.280
and stuff like that.


00:16:40.280 --> 00:16:42.500
writing functions that have side effects


00:16:42.500 --> 00:16:44.880
and interacting with mouse events.


00:16:44.880 --> 00:16:48.300
So you learn quite a bit with just this little bit of code


00:16:48.300 --> 00:16:49.560
and it's actually Python.


00:16:49.560 --> 00:16:50.940
So that's kind of neat.


00:16:50.940 --> 00:16:52.660
And then one of the things that I really like,


00:16:52.660 --> 00:16:53.980
'cause I do want to start,


00:16:53.980 --> 00:16:56.620
I haven't worked with my kids with coding yet,


00:16:56.620 --> 00:16:58.700
but the article also includes some tips


00:16:58.700 --> 00:17:00.800
on how to behave as the adult


00:17:00.800 --> 00:17:02.380
when you're working with kids with coding.


00:17:02.380 --> 00:17:03.420
So this is good.


00:17:03.420 --> 00:17:07.420
- Yeah, it's truly tricky to set up the right balance of,


00:17:07.420 --> 00:17:10.840
It's interesting, but quickly becomes too hard,


00:17:10.840 --> 00:17:13.260
or it's easy enough to get kids started,


00:17:13.260 --> 00:17:16.140
but they have expectations of something


00:17:16.140 --> 00:17:18.180
they can do with their iPhone as a game.


00:17:18.180 --> 00:17:21.860
What you build does not necessarily match, right?


00:17:21.860 --> 00:17:24.060
- Yeah, and I like the tips at the end


00:17:24.060 --> 00:17:25.660
because I'm one of those kind of people


00:17:25.660 --> 00:17:28.180
that would just say, "Okay, you just sit at the side


00:17:28.180 --> 00:17:29.500
"and I'll do it, and you watch."


00:17:29.500 --> 00:17:30.700
It's not really teaching.


00:17:30.700 --> 00:17:32.860
- Yeah, true, true, true.


00:17:32.860 --> 00:17:34.140
It's cool, though, I think these are both


00:17:34.140 --> 00:17:38.300
really fun options for teaching kids programming


00:17:38.300 --> 00:17:39.540
and building a little game.


00:17:39.540 --> 00:17:41.860
'Cause not everybody cares about building games,


00:17:41.860 --> 00:17:43.180
but a lot of people who do,


00:17:43.180 --> 00:17:46.020
like a lot of people's introduction to programming was


00:17:46.020 --> 00:17:47.560
they wanted to build a game,


00:17:47.560 --> 00:17:49.300
programming was just what was required


00:17:49.300 --> 00:17:50.140
to make that happen, right?


00:17:50.140 --> 00:17:51.780
- And you can go do something else,


00:17:51.780 --> 00:17:54.800
like a useful utility that somebody might need.


00:17:54.800 --> 00:17:57.320
But I mean, how many six-year-olds really need


00:17:57.320 --> 00:17:59.380
a useful utility written in Python?


00:17:59.380 --> 00:18:00.660
- Yeah, true, true, true.


00:18:00.660 --> 00:18:01.500
- Anyway.


00:18:01.500 --> 00:18:02.340
(laughs)


00:18:02.340 --> 00:18:03.420
- While we're talking about games,


00:18:03.420 --> 00:18:06.260
Like if kids are not quite ready for a game,


00:18:06.260 --> 00:18:10.540
but they're ready to do adventurous stuff, I guess,


00:18:10.540 --> 00:18:13.260
I wanna throw a shout out to CodeCombat.com.


00:18:13.260 --> 00:18:15.420
That's a super cool place.


00:18:15.420 --> 00:18:17.420
It has a free version where you basically


00:18:17.420 --> 00:18:19.620
go into these dungeons and you solve the dungeon


00:18:19.620 --> 00:18:21.220
by writing Python programs.


00:18:21.220 --> 00:18:22.060
- Oh, neat.


00:18:22.060 --> 00:18:24.020
- And the editor has like auto-complete


00:18:24.020 --> 00:18:25.300
like nobody's business.


00:18:25.300 --> 00:18:26.660
It's super, super nice.


00:18:26.660 --> 00:18:28.380
So you have to like have your hero move around.


00:18:28.380 --> 00:18:31.220
You say like hero.attack and select like an enemy.


00:18:31.220 --> 00:18:34.380
If you type the letter A, it'll auto-complete hero.attack.


00:18:34.380 --> 00:18:37.260
I mean, it's like really, really beginner-friendly.


00:18:37.260 --> 00:18:40.180
So definitely, that's maybe a first step.


00:18:40.180 --> 00:18:42.220
And then one of these two that we just spoke about


00:18:42.220 --> 00:18:43.300
would be really good as well.


00:18:43.300 --> 00:18:44.420
- Oh, I'll try that.


00:18:44.420 --> 00:18:45.780
- Yeah, I was doing that one with my daughter


00:18:45.780 --> 00:18:46.820
and she was super into it.


00:18:46.820 --> 00:18:49.080
She got like 50 levels in or something.


00:18:49.080 --> 00:18:50.060
50 little dungeons.


00:18:50.060 --> 00:18:51.820
Cool, so all right, so last one,


00:18:51.820 --> 00:18:54.300
let's round it up with something a little more serious.


00:18:54.300 --> 00:18:57.860
So we talked before about whether or not


00:18:57.860 --> 00:19:03.260
the GIL will become obsolete with the introduction of PEP 554.


00:19:03.260 --> 00:19:06.560
And this was on episode 128, which is cool.


00:19:06.560 --> 00:19:11.760
So Anthony Shaw wrote a cool article called "Has the Python GIL been slain?"


00:19:11.760 --> 00:19:16.120
That really digs deeply into that idea that we were touching on back then.


00:19:16.120 --> 00:19:23.000
So the answer is kind of, maybe, I don't know, probably, but for a limited case.


00:19:23.000 --> 00:19:27.460
So we've got a multithreading in Python, which is pretty easy, but it's not actually concurrent


00:19:27.460 --> 00:19:29.460
because of the GIL, we have multi-processing,


00:19:29.460 --> 00:19:33.460
which is harder to exchange data and stuff.


00:19:33.460 --> 00:19:35.460
It carries a lot of overhead, but does escape the GIL,


00:19:35.460 --> 00:19:37.460
because it's all these separate processes.


00:19:37.460 --> 00:19:42.460
So PEP 554 introduces this idea of sub-interpreters.


00:19:42.460 --> 00:19:44.460
Remember that from back then, Brian?


00:19:44.460 --> 00:19:45.460
Yeah.


00:19:45.460 --> 00:19:48.460
And we speculated that maybe the ability to have


00:19:48.460 --> 00:19:51.460
multiple sub-interpreters would remove the problem of the GIL,


00:19:51.460 --> 00:19:53.460
because the GIL is not a process thing.


00:19:53.460 --> 00:19:55.460
It's an interpreter thing.


00:19:55.460 --> 00:19:56.900
is the global interpreter lock.


00:19:56.900 --> 00:19:59.540
So if we just take and run our threads


00:19:59.540 --> 00:20:02.580
on multiple sub-interpreters, there would be no gill.


00:20:02.580 --> 00:20:04.220
Things would go potentially faster,


00:20:04.220 --> 00:20:06.300
at least some of the time, right?


00:20:06.300 --> 00:20:09.460
The problem is, if you actually try to share data


00:20:09.460 --> 00:20:12.120
across those sub-interpreters, things get pretty tricky.


00:20:12.120 --> 00:20:15.740
So Anthony's article really digs into that


00:20:15.740 --> 00:20:20.220
and talks about how you might use shared memory and IPC,


00:20:20.220 --> 00:20:22.700
which is also another feature coming to multiprocessing,


00:20:22.700 --> 00:20:26.320
but that's also kind of slow and challenging.


00:20:26.320 --> 00:20:30.100
So he highlights another PEP, so here's our fourth PEP,


00:20:30.100 --> 00:20:34.100
PEP 574, which proposes a new PQL protocol.


00:20:34.100 --> 00:20:35.020
Is that surprising?


00:20:35.020 --> 00:20:36.000
(laughing)


00:20:36.000 --> 00:20:36.840
- Yeah, a little bit.


00:20:36.840 --> 00:20:38.620
- A little bit, 'cause like people say, don't use PQL,


00:20:38.620 --> 00:20:40.000
it has all these vulnerabilities


00:20:40.000 --> 00:20:41.860
and versioning issues and whatnot,


00:20:41.860 --> 00:20:44.160
except for it's a nice binary format.


00:20:44.160 --> 00:20:46.840
And if your goal is to just literally exchange data


00:20:46.840 --> 00:20:51.040
from subinterpreter to subinterpreter through shared memory,


00:20:51.040 --> 00:20:52.920
well, then that's fine.


00:20:52.920 --> 00:20:55.160
That's within the runtime of a process.


00:20:55.160 --> 00:20:56.680
It should be OK.


00:20:56.680 --> 00:20:58.120
You're not going to hack yourself.


00:20:58.120 --> 00:20:59.400
And if you do, you deserve it.


00:20:59.400 --> 00:21:02.180
So this is a special protocol, version 5,


00:21:02.180 --> 00:21:04.940
that has support for allowing memory buffers to be handled


00:21:04.940 --> 00:21:07.840
separately from the rest of the pickle stream, basically.


00:21:07.840 --> 00:21:10.280
So all these things could be combined together


00:21:10.280 --> 00:21:14.640
to get us a cool, faster, more concurrent Python.


00:21:14.640 --> 00:21:16.320
And the answer is the question, when?


00:21:16.320 --> 00:21:17.860
When will maybe these things be here?


00:21:17.860 --> 00:21:19.960
So pickle version 5 and shared memory


00:21:19.960 --> 00:21:25.360
will probably make it to Python 3.8, which will be October of this year, 2019.


00:21:25.360 --> 00:21:32.360
And subinterpreters may make that, but they might take another version, 3.9, which I believe


00:21:32.360 --> 00:21:34.960
at the time that's going to be 18 months later.


00:21:34.960 --> 00:21:38.440
I think we're still on the 18-month release cycle here.


00:21:38.440 --> 00:21:39.440
Yeah.


00:21:39.440 --> 00:21:42.560
What I really appreciate about this article isn't that there's suddenly stuff that I can


00:21:42.560 --> 00:21:43.800
use now.


00:21:43.800 --> 00:21:49.560
It's that we have been talking about the subinterpreters, and I haven't really got my head around really


00:21:49.560 --> 00:21:54.840
how that affects us and I think this is a good jump in, a good discussion about it.


00:21:54.840 --> 00:21:59.400
So that if you're curious about this, he talks about all the kind of the backstory and


00:21:59.400 --> 00:22:04.280
in kind of where we're going from here. The where we're going from here I think is still


00:22:04.280 --> 00:22:09.400
kind of up in the air. I would like to see something more around like a shared memory.


00:22:09.400 --> 00:22:16.360
One of the discussions is having shared memory objects that are owned by one sub-interpreter at


00:22:16.360 --> 00:22:21.480
of time. So you could say, well, I'm creating this data to have another interpreter take it over.


00:22:21.480 --> 00:22:23.880
Right. I'm handing it off to you. You can have it now.


00:22:23.880 --> 00:22:27.480
Yeah. And it would be nice if I didn't have to pickle that. If I could just, the data I'm


00:22:27.480 --> 00:22:32.920
creating is just normal data, but it happens to live in an area that I can hand over to a


00:22:32.920 --> 00:22:35.960
different process or something. Oh, that's interesting. Like,


00:22:35.960 --> 00:22:42.200
basically dereference it in the current garbage collector system and re-reference that information


00:22:42.200 --> 00:22:44.280
in the other one. Yeah, somehow, something like that.


00:22:44.280 --> 00:22:45.840
- Yeah, okay, cool.


00:22:45.840 --> 00:22:47.680
- There's, I'm sure, lots of smart people


00:22:47.680 --> 00:22:49.000
working on the problem.


00:22:49.000 --> 00:22:51.440
But it is neat, it's neat to see it going forward.


00:22:51.440 --> 00:22:52.280
- Absolutely.


00:22:52.280 --> 00:22:55.480
- Plus there's a really amusing video of a breakdancer


00:22:55.480 --> 00:22:58.400
where like six guys come out,


00:22:58.400 --> 00:22:59.560
none of them are doing anything


00:22:59.560 --> 00:23:01.200
except for one who's spitting on his head.


00:23:01.200 --> 00:23:02.400
(laughing)


00:23:02.400 --> 00:23:05.520
- Yeah, it's a very, I don't know even how to describe it.


00:23:05.520 --> 00:23:07.080
It's a very different interpretation


00:23:07.080 --> 00:23:10.240
of how the global interpreter lock kills concurrency


00:23:10.240 --> 00:23:11.720
through breakdancing.


00:23:11.720 --> 00:23:13.720
- Yeah, through breakdancing.


00:23:13.720 --> 00:23:15.360
- I knew it all along, man.


00:23:15.360 --> 00:23:16.280
The rap beat was off.


00:23:16.280 --> 00:23:18.320
That's why we can't get this thing to run in parallel.


00:23:18.320 --> 00:23:19.160
- Yeah.


00:23:19.160 --> 00:23:20.000
(laughing)


00:23:20.000 --> 00:23:20.840
- All right, cool.


00:23:20.840 --> 00:23:23.040
Well, that's it for our main topics today.


00:23:23.040 --> 00:23:25.080
What else you got that you just wanna quickly chat about?


00:23:25.080 --> 00:23:25.920
- A couple things.


00:23:25.920 --> 00:23:28.040
PyCon seems like it just got over,


00:23:28.040 --> 00:23:30.600
but the videos are already all available,


00:23:30.600 --> 00:23:32.480
and I've already started watching them,


00:23:32.480 --> 00:23:36.600
including Ant's complexity with Wiley talk.


00:23:36.600 --> 00:23:39.720
And the other thing I wanted to bring up is,


00:23:39.720 --> 00:23:41.660
I'm reviewing, I'm not reviewing it,


00:23:41.660 --> 00:23:44.480
but I bought the new Pragmatic Programmer book,


00:23:44.480 --> 00:23:47.500
the 20th anniversary edition.


00:23:47.500 --> 00:23:50.280
They rewrote it, and I'm reading the testing chapter,


00:23:50.280 --> 00:23:52.560
starting there, and they bring up pytest,


00:23:52.560 --> 00:23:55.040
and they're using pytest and Hypothesis,


00:23:55.040 --> 00:23:55.880
and that's pretty cool.


00:23:55.880 --> 00:23:57.720
- Oh yeah, that's super cool, and Hypothesis,


00:23:57.720 --> 00:23:59.320
that's pretty interesting, that one.


00:23:59.320 --> 00:24:00.160
- Yeah.


00:24:00.160 --> 00:24:01.780
- All right, well, I have a couple quick announcements


00:24:01.780 --> 00:24:02.620
for you all.


00:24:02.620 --> 00:24:03.920
So first of all, quick and easy one,


00:24:03.920 --> 00:24:06.120
I've been creating a bunch of different things lately.


00:24:06.120 --> 00:24:09.040
The iOS and Android apps are both out


00:24:09.040 --> 00:24:11.200
for the Talk Python Training stuff,


00:24:11.200 --> 00:24:13.080
But I just released new versions


00:24:13.080 --> 00:24:15.040
that have a couple of cool new features.


00:24:15.040 --> 00:24:17.280
So if you have it installed, make sure you update it.


00:24:17.280 --> 00:24:18.880
If you don't have it installed,


00:24:18.880 --> 00:24:21.840
well, check it out at training.tacmathon.fm.


00:24:21.840 --> 00:24:22.680
That's cool.


00:24:22.680 --> 00:24:26.160
So Brian, I've joined you in the journey


00:24:26.160 --> 00:24:27.200
that is writing a book.


00:24:27.200 --> 00:24:28.600
- Yes, you're an author now.


00:24:28.600 --> 00:24:30.140
- Yeah, apparently.


00:24:30.140 --> 00:24:33.220
Somehow, I don't feel like I've gotten


00:24:33.220 --> 00:24:36.360
any official stamp or any letter


00:24:36.360 --> 00:24:39.500
or no little pamphlet that makes me officially an author.


00:24:39.500 --> 00:24:42.420
But yeah, so we have a book called "Effective PyCharm"


00:24:42.420 --> 00:24:44.660
that's out and it has a digital version,


00:24:44.660 --> 00:24:47.460
has a print version, it has sort of bundled stuff


00:24:47.460 --> 00:24:48.340
with some of the courses.


00:24:48.340 --> 00:24:50.360
So I'll link to that in the show notes.


00:24:50.360 --> 00:24:53.320
People can check that out at effectivepycharm.com.


00:24:53.320 --> 00:24:54.420
So that's pretty cool.


00:24:54.420 --> 00:24:56.520
And then also we just released a new course,


00:24:56.520 --> 00:24:57.940
"100 Days of Web."


00:24:57.940 --> 00:24:59.700
- It's pretty neat, I've started watching it.


00:24:59.700 --> 00:25:00.540
I like it.


00:25:00.540 --> 00:25:01.980
- Yeah, thanks for checking it out.


00:25:01.980 --> 00:25:02.820
That's awesome.


00:25:02.820 --> 00:25:03.720
So it's kind of intense.


00:25:03.720 --> 00:25:06.820
It's like 28 little different web projects.


00:25:06.820 --> 00:25:08.860
So one time you build an API in Flask


00:25:08.860 --> 00:25:11.300
And one time we build like logins with Django


00:25:11.300 --> 00:25:13.540
and migrations with SQLAlchemy.


00:25:13.540 --> 00:25:16.140
So all these different things you might want to do


00:25:16.140 --> 00:25:18.020
all over, it's kind of like a super sampling


00:25:18.020 --> 00:25:19.020
of all the web stuff.


00:25:19.020 --> 00:25:20.580
So check that out.


00:25:20.580 --> 00:25:21.660
You know, the links in the show notes


00:25:21.660 --> 00:25:24.300
that talk about on training as well.


00:25:24.300 --> 00:25:26.860
All right, well, that's all I got for now.


00:25:26.860 --> 00:25:27.780
Do you got a joke for us?


00:25:27.780 --> 00:25:29.820
- I don't, but I wanted to bring up


00:25:29.820 --> 00:25:31.260
something about your course.


00:25:31.260 --> 00:25:32.080
- Oh, thank you.


00:25:32.080 --> 00:25:35.500
- My first concern was that like 100 different web projects


00:25:35.500 --> 00:25:37.900
might seem overwhelming, but it isn't that.


00:25:37.900 --> 00:25:40.700
Like you said, it's 28 projects, is that right, 28?


00:25:40.700 --> 00:25:42.700
- Yeah, and there's four of them that are super short,


00:25:42.700 --> 00:25:43.820
so it's kind of 24.


00:25:43.820 --> 00:25:48.100
- Yeah, you get more into it than just some quick thing


00:25:48.100 --> 00:25:49.700
that you can do in one day.


00:25:49.700 --> 00:25:51.580
I appreciate that pacing.


00:25:51.580 --> 00:25:52.580
- Yeah, thanks a bunch.


00:25:52.580 --> 00:25:53.980
Yeah, we were trying to find a balance there,


00:25:53.980 --> 00:25:56.900
'cause 100 separate projects is too small.


00:25:56.900 --> 00:26:00.100
One huge project, you don't get enough variety


00:26:00.100 --> 00:26:04.100
of other things, so 24, that was the slicing we came up with.


00:26:04.100 --> 00:26:05.220
All right, how about this?


00:26:05.220 --> 00:26:09.120
- So there's a programmer going to a coffee shop


00:26:09.120 --> 00:26:11.500
looking to get out of the cube, right?


00:26:11.500 --> 00:26:13.140
Can't stand being in the cube more.


00:26:13.140 --> 00:26:16.060
So they get out and there's a waiter that comes over


00:26:16.060 --> 00:26:18.260
and says, "Hey, welcome to the restaurant.


00:26:18.260 --> 00:26:20.500
"Would you like coffee or tea?"


00:26:20.500 --> 00:26:21.580
(laughing)


00:26:21.580 --> 00:26:23.320
The programmer says, "Yes."


00:26:23.320 --> 00:26:24.480
- Yes, of course.


00:26:24.480 --> 00:26:27.100
(laughing)


00:26:27.100 --> 00:26:28.160
Have you done this?


00:26:28.160 --> 00:26:31.860
- No, but it sounds like it might be sort of fun.


00:26:31.860 --> 00:26:33.740
- Yeah, I mean, I haven't done it with coffee or tea,


00:26:33.740 --> 00:26:37.940
but I definitely think that sometimes if somebody gives me an or question,


00:26:37.940 --> 00:26:39.940
I'll answer with yes.


00:26:39.940 --> 00:26:40.940
Yes.


00:26:40.940 --> 00:26:44.940
Yeah, they mean exclusive or don't they?


00:26:44.940 --> 00:26:46.140
Yeah, pretty awesome.


00:26:46.140 --> 00:26:46.740
All right, well.


00:26:46.740 --> 00:26:47.340
Thanks a lot.


00:26:47.340 --> 00:26:48.140
You bet.


00:26:48.140 --> 00:26:50.140
Good to chat with you and I'll catch you next time around.


00:26:50.140 --> 00:26:50.940
Okay. Bye.


00:26:50.940 --> 00:26:51.540
Bye.


00:26:51.540 --> 00:26:53.140
Thank you for listening to Python Bytes.


00:26:53.140 --> 00:26:55.740
Follow the show on Twitter via @PythonBytes.


00:26:55.740 --> 00:26:58.740
That's Python Bytes as in B-Y-T-E-S.


00:26:58.740 --> 00:27:01.940
And get the full show notes at pythonbytes.fm.


00:27:01.940 --> 00:27:06.020
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.


00:27:06.020 --> 00:27:08.820
We're always on the lookout for sharing something cool.


00:27:08.820 --> 00:27:12.020
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:27:12.020 --> 00:27:15.380
Thank you for listening and sharing this podcast with your friends and colleagues.

