
00:00:00.000 --> 00:00:04.160
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:04.160 --> 00:00:10.400
to your earbuds. This is episode 142, recorded July 31st. I'm Michael Kennedy.


00:00:10.400 --> 00:00:11.280
And I'm Brian Akin.


00:00:11.280 --> 00:00:12.240
And I'm Brett Thomas.


00:00:12.240 --> 00:00:16.560
And yes, we have a special guest this time, third co-host, Brett Thomas. Brett,


00:00:16.560 --> 00:00:17.200
welcome to the show.


00:00:17.200 --> 00:00:18.000
Thank you very much.


00:00:18.000 --> 00:00:22.320
Yeah, it's great to have you here. I also want to say thank you to Datadog for sponsoring the show.


00:00:22.320 --> 00:00:27.120
Check them out at pythonbytes.fm/datadog. More on that later. Brett, do you want to just quickly


00:00:27.120 --> 00:00:29.680
tell everyone a little bit about yourself before we get into the topics?


00:00:29.680 --> 00:00:34.160
Yeah, sure. I'm the chief technology officer of a company called FasterThanLight.dev,


00:00:34.160 --> 00:00:39.200
and we do static code analysis tooling for the SaaS model to help you analyze your code.


00:00:39.200 --> 00:00:40.560
And I'll talk a little bit about that later.


00:00:40.560 --> 00:00:42.640
All right. Awesome. Sounds good. Well, happy to have you here.


00:00:42.640 --> 00:00:44.560
Brian, you want to kick us off?


00:00:44.560 --> 00:00:44.880
Sure.


00:00:44.880 --> 00:00:48.720
It's great to have sustainability and it's almost like Earth Day for code.


00:00:48.720 --> 00:00:51.520
And you always want to just have that in mind, right?


00:00:51.520 --> 00:00:52.720
Earth Day for code?


00:00:52.720 --> 00:00:55.760
Sustainability. Come on. You got a role in the air.


00:00:55.760 --> 00:00:58.480
Yeah, I'm really worried about what climate change is going to do to my code, but...


00:00:58.480 --> 00:01:06.000
I ran across this article called writing sustainable Python scripts by Vincent Burnett and most


00:01:06.000 --> 00:01:10.240
of my time I'm not right I mean I don't really think about it too much for little scripts


00:01:10.240 --> 00:01:15.320
but or little helper utilities we've got lots of them around work but there is an issue


00:01:15.320 --> 00:01:19.760
that I think this is a reasonable thing to talk about is if it's only going to be a short-lived


00:01:19.760 --> 00:01:23.520
script yeah we don't really care about it too much but if it's going to be around for


00:01:23.520 --> 00:01:28.040
a while or it's running from a cron job or something it is there's a few things you can


00:01:28.040 --> 00:01:31.440
do to make it a little bit more maintainable.


00:01:31.440 --> 00:01:33.800
And I like the things he put down.


00:01:33.800 --> 00:01:36.520
The most obvious ones, which some people forget,


00:01:36.520 --> 00:01:39.840
is throwing a doc string at the top of the file


00:01:39.840 --> 00:01:42.440
to let people in the future know what problem you're


00:01:42.440 --> 00:01:45.400
trying to solve and kind of describe what it is.


00:01:45.400 --> 00:01:47.360
Instead of doing hard-coded stuff,


00:01:47.360 --> 00:01:51.520
you can easily add some command line arguments.


00:01:51.520 --> 00:01:54.280
The defaults can be sort of hard-coded defaults,


00:01:54.280 --> 00:01:58.120
but having some way to make the script useful.


00:01:58.120 --> 00:02:01.120
And then he goes into adding logging.


00:02:01.120 --> 00:02:02.760
And I think it's kind of neat.


00:02:02.760 --> 00:02:05.640
He includes how to do debug logging


00:02:05.640 --> 00:02:08.740
and hook that into the command line argument system, which


00:02:08.740 --> 00:02:10.200
is kind of a cool trick.


00:02:10.200 --> 00:02:12.680
And then also for unattended scripts,


00:02:12.680 --> 00:02:15.640
being able to log to system logging.


00:02:15.640 --> 00:02:18.200
And then finally, finishing it off


00:02:18.200 --> 00:02:21.560
with adding some simple tests to make sure that your code does


00:02:21.560 --> 00:02:22.560
what you think it does.


00:02:22.560 --> 00:02:23.760
It's just a nice little article.


00:02:23.760 --> 00:02:25.380
- Yeah, it's easy to forget about maintaining


00:02:25.380 --> 00:02:28.540
these little scripts because they're kind of throwaway,


00:02:28.540 --> 00:02:31.980
but actually, then they're throwaway till they're not.


00:02:31.980 --> 00:02:32.820
Go ahead, Brad.


00:02:32.820 --> 00:02:34.180
- And the more throwaway you think it's gonna be,


00:02:34.180 --> 00:02:36.020
the more it's gonna be the longest lived part


00:02:36.020 --> 00:02:37.840
of your system, of course.


00:02:37.840 --> 00:02:38.680
- Of course.


00:02:38.680 --> 00:02:39.520
- Yeah.


00:02:39.520 --> 00:02:40.340
- Yeah, I have a bunch of these,


00:02:40.340 --> 00:02:43.660
and I find that I even forget that they exist.


00:02:43.660 --> 00:02:45.900
Like, I'll be doing something super painful,


00:02:45.900 --> 00:02:47.660
and I'm like, wow, this is really not fun.


00:02:47.660 --> 00:02:49.780
Like, I've gotta rename all these files


00:02:49.780 --> 00:02:52.540
based on certain stuff out of the database or something.


00:02:52.540 --> 00:02:53.700
Man, I should automate this.


00:02:53.700 --> 00:02:55.540
Like, wait a minute, I think I did automate this.


00:02:55.540 --> 00:02:56.900
And I'll go back and look, and I'm like,


00:02:56.900 --> 00:02:59.300
yeah, I can just run this thing, the command line,


00:02:59.300 --> 00:03:01.380
and like 100 files are properly renamed.


00:03:01.380 --> 00:03:03.700
Why did I spend the last five minutes?


00:03:03.700 --> 00:03:04.940
Why do my hands hurt now?


00:03:04.940 --> 00:03:09.380
And so the way I got around solving that problem,


00:03:09.380 --> 00:03:12.060
often that involves like setting up a virtual environment,


00:03:12.060 --> 00:03:13.620
activating it, then running that script


00:03:13.620 --> 00:03:14.900
'cause it has dependencies,


00:03:14.900 --> 00:03:16.860
like I mentioned the database or whatever,


00:03:16.860 --> 00:03:18.100
all the models and so on.


00:03:18.100 --> 00:03:21.060
So what I'll do is I'll create an alias in my shell,


00:03:21.060 --> 00:03:22.900
And then I just run the alias.


00:03:22.900 --> 00:03:24.620
And so if I go and just, like, if I forget,


00:03:24.620 --> 00:03:25.820
I'll go look at my aliases.


00:03:25.820 --> 00:03:26.900
I only got like 50 or something.


00:03:26.900 --> 00:03:29.300
Like, it's gotta be one of these, which, there it is.


00:03:29.300 --> 00:03:30.140
And then I run it again.


00:03:30.140 --> 00:03:32.420
And that's like, that's my system


00:03:32.420 --> 00:03:34.380
until my computer gets formatted,


00:03:34.380 --> 00:03:35.540
then I have to start from scratch.


00:03:35.540 --> 00:03:36.380
- That's the great thing.


00:03:36.380 --> 00:03:38.980
I was actually went through and audited my like dot profile,


00:03:38.980 --> 00:03:39.820
I know six months ago.


00:03:39.820 --> 00:03:41.540
And I swear I've been, I've called around


00:03:41.540 --> 00:03:44.020
the same dot profile for I think two decades, right?


00:03:44.020 --> 00:03:46.640
You know, it's like, there's aliases to do things


00:03:46.640 --> 00:03:49.380
on the systems that I haven't had access to for 20 years.


00:03:49.380 --> 00:03:51.380
I'm like, okay, maybe it's time to clean that up.


00:03:51.380 --> 00:03:52.580
- A little pruning.


00:03:52.580 --> 00:03:54.700
Yeah, but no, it's a great article, Brian,


00:03:54.700 --> 00:03:58.220
to remind people just to do these little simple things.


00:03:58.220 --> 00:03:59.660
I don't know, maybe there's some threshold, right?


00:03:59.660 --> 00:04:01.660
You just play around, you do it once,


00:04:01.660 --> 00:04:03.000
but if you use it a third time,


00:04:03.000 --> 00:04:05.060
then you should go back and refactor


00:04:05.060 --> 00:04:06.180
and clean up a little, I don't know.


00:04:06.180 --> 00:04:07.980
- Sometimes logging doesn't really make sense,


00:04:07.980 --> 00:04:11.260
and you can just, and sometimes testing,


00:04:11.260 --> 00:04:14.000
I mean, I'm shocked that I'm the person to say this,


00:04:14.000 --> 00:04:17.340
but sometimes manually testing stuff is fine.


00:04:17.340 --> 00:04:19.140
If you're gonna notice when it breaks,


00:04:19.140 --> 00:04:19.980
- It works.


00:04:19.980 --> 00:04:20.800
- Yeah, it definitely depends.


00:04:20.800 --> 00:04:21.640
- What do we have next?


00:04:21.640 --> 00:04:23.500
- Well, so the first thing I would like to talk about


00:04:23.500 --> 00:04:27.020
is a static code analysis using Bandit.


00:04:27.020 --> 00:04:28.820
And for anyone who's not aware


00:04:28.820 --> 00:04:30.420
of what static code analysis is,


00:04:30.420 --> 00:04:33.620
static code analysis is basically running a computer program


00:04:33.620 --> 00:04:36.340
on your computer program, right?


00:04:36.340 --> 00:04:38.660
I've actually recently heard somebody analogize it


00:04:38.660 --> 00:04:41.180
as like spell check for a computer program.


00:04:41.180 --> 00:04:43.100
The reason it's called static code analysis,


00:04:43.100 --> 00:04:45.580
it's that separate from what we usually do in testing,


00:04:45.580 --> 00:04:46.580
which is dynamic, right?


00:04:46.580 --> 00:04:48.760
We run the program, we give it various inputs,


00:04:48.760 --> 00:04:51.000
we see if it does what we think it should.


00:04:51.000 --> 00:04:53.400
But static code analysis is about the idea


00:04:53.400 --> 00:04:57.080
of examining either the source code or the object code


00:04:57.080 --> 00:04:59.280
and saying, okay, we're gonna look for patterns


00:04:59.280 --> 00:05:00.960
that look troublesome, right?


00:05:00.960 --> 00:05:03.680
And so for example, one thing static code analysis


00:05:03.680 --> 00:05:07.080
might help you look for might be SQL injection attacks,


00:05:07.080 --> 00:05:09.440
right, where you've got unbound SQL variables,


00:05:09.440 --> 00:05:12.160
which is just an absolutely perennial security problem


00:05:12.160 --> 00:05:14.360
that's always in the OWASP top three.


00:05:14.360 --> 00:05:17.320
- Select star from quote plus input name.


00:05:17.320 --> 00:05:18.560
- Exactly, right?


00:05:18.560 --> 00:05:20.640
I mean, and there's actually all kinds of great database


00:05:20.640 --> 00:05:23.160
performance reasons you want to bind your variables anyhow.


00:05:23.160 --> 00:05:24.920
But if you don't know,


00:05:24.920 --> 00:05:26.920
definitely when you're doing SQL statements,


00:05:26.920 --> 00:05:29.240
you should be using placeholder variables


00:05:29.240 --> 00:05:31.720
and binding them instead of actually interpolating strings,


00:05:31.720 --> 00:05:33.400
especially if those strings come from


00:05:33.400 --> 00:05:35.080
some random person on the internet,


00:05:35.080 --> 00:05:39.080
as in the famous XKCD, Little Bobby Tables cartoon.


00:05:39.080 --> 00:05:41.720
And so anyway, so Bandit is an open source tool


00:05:41.720 --> 00:05:43.200
that you can just grab.


00:05:43.200 --> 00:05:45.200
And in fact, I believe you can just pip install it


00:05:45.200 --> 00:05:47.480
and it will, you run it on your code


00:05:47.480 --> 00:05:49.360
it tells you things that are problematic.


00:05:49.360 --> 00:05:51.540
Now, of course, it doesn't know what your code's doing.


00:05:51.540 --> 00:05:55.660
Sometimes, one of the rubs on static code analysis tools


00:05:55.660 --> 00:05:57.240
is that they tend to false positive a lot


00:05:57.240 --> 00:05:59.300
because they don't understand the context.


00:05:59.300 --> 00:06:03.100
They say, "Okay, well, this pattern tends to be dangerous,"


00:06:03.100 --> 00:06:04.240
but they don't know that the way that


00:06:04.240 --> 00:06:06.240
you're using it is absolutely fine.


00:06:06.240 --> 00:06:11.440
Another just hard example that I got out of at one time is Flask.


00:06:11.440 --> 00:06:13.700
If you're making a Flask app and you turn


00:06:13.700 --> 00:06:16.040
debugging on when you create the Flask object,


00:06:16.040 --> 00:06:18.080
which seems like a reasonable thing to do.


00:06:18.080 --> 00:06:20.960
It actually enables a debug console,


00:06:20.960 --> 00:06:23.760
if you know the right place to go to on your web app,


00:06:23.760 --> 00:06:24.880
that allows you to execute


00:06:24.880 --> 00:06:27.560
arbitrary Python code unauthenticated.


00:06:27.560 --> 00:06:29.760
You probably don't want to do that on the internet.


00:06:29.760 --> 00:06:30.860
- That is super bad.


00:06:30.860 --> 00:06:32.260
And Django has the same problem.


00:06:32.260 --> 00:06:34.560
And like there's tools that search for that.


00:06:34.560 --> 00:06:35.400
It's a big deal.


00:06:35.400 --> 00:06:36.220
You don't want to publish it.


00:06:36.220 --> 00:06:37.060
- Yeah, exactly.


00:06:37.060 --> 00:06:38.880
I mean, and that's just one of literally


00:06:38.880 --> 00:06:42.120
dozens or scores of things that Bandit can help you find,


00:06:42.120 --> 00:06:43.360
you know, those kinds of errors in your code.


00:06:43.360 --> 00:06:45.440
- Does Bandit do like Pythonic code?


00:06:45.440 --> 00:06:49.920
- Well, let's say this numeric four should be just


00:06:49.920 --> 00:06:52.920
like an enumerate loop or something like that.


00:06:52.920 --> 00:06:54.720
- Yeah, there's a number of different things


00:06:54.720 --> 00:06:57.080
that you can do that kind of like range from,


00:06:57.080 --> 00:06:58.780
oh, hey, this is not a best practice,


00:06:58.780 --> 00:07:02.240
or this doesn't go with the correct coding style,


00:07:02.240 --> 00:07:03.200
for example.


00:07:03.200 --> 00:07:05.920
And certainly if you are super into that,


00:07:05.920 --> 00:07:08.640
I think that can be a great resource for you.


00:07:08.640 --> 00:07:10.000
My personal focus on it, I think,


00:07:10.000 --> 00:07:12.320
tends to be more from the security side of things.


00:07:12.320 --> 00:07:14.560
Somebody who has been running sensitive web apps


00:07:14.560 --> 00:07:16.400
on the internet now for 20 years.


00:07:16.400 --> 00:07:19.400
That really is just in my DNA.


00:07:19.400 --> 00:07:21.680
My prior position, actually, I was responsible


00:07:21.680 --> 00:07:24.640
for keeping several hundred million credit cards safe


00:07:24.640 --> 00:07:27.800
at a PCI DSS level one service provider called Vendicia.


00:07:27.800 --> 00:07:30.520
- That will make you a little bit paranoid.


00:07:30.520 --> 00:07:31.800
- Yeah, I mean, I don't know if you see


00:07:31.800 --> 00:07:35.000
the gray hairs there, but yeah, I sleep a lot better


00:07:35.000 --> 00:07:37.200
now that I don't have that weight on my shoulders,


00:07:37.200 --> 00:07:38.540
I have to admit, so.


00:07:38.540 --> 00:07:39.920
(laughing)


00:07:39.920 --> 00:07:40.760
- I can imagine.


00:07:40.760 --> 00:07:42.960
One of the most stressful bit of codes I wrote


00:07:42.960 --> 00:07:45.920
was the credit card processing system for this company


00:07:45.920 --> 00:07:48.880
where the individual purchases would be like three or $4,000.


00:07:48.880 --> 00:07:50.720
And I'm like, yeah, better not mess it up.


00:07:50.720 --> 00:07:53.040
That's what you're talking about is a whole nother level.


00:07:53.040 --> 00:07:55.320
So static code analysis and Bandit


00:07:55.320 --> 00:07:57.880
can help find those types of problems as well there, huh?


00:07:57.880 --> 00:07:58.440
Absolutely.


00:07:58.440 --> 00:08:00.000
I'm a fan of these things.


00:08:00.000 --> 00:08:02.160
The problem is you kind of got to--


00:08:02.160 --> 00:08:03.800
sometimes, at least on large projects,


00:08:03.800 --> 00:08:05.680
you've got to start using them early enough.


00:08:05.680 --> 00:08:06.240
Yeah.


00:08:06.240 --> 00:08:08.000
Because otherwise, they'll just kill you.


00:08:08.000 --> 00:08:08.520
Absolutely.


00:08:08.520 --> 00:08:10.560
You've just got a huge thing to go through.


00:08:10.560 --> 00:08:12.360
And actually, I gotta admit, my company,


00:08:12.360 --> 00:08:15.040
what we're doing is, my new company, Faster Than Light,


00:08:15.040 --> 00:08:17.200
we're working on packaging this stuff up


00:08:17.200 --> 00:08:18.720
as software as a service,


00:08:18.720 --> 00:08:21.440
and definitely helping you manage that,


00:08:21.440 --> 00:08:23.640
like, oh, hey, I've already looked at this,


00:08:23.640 --> 00:08:25.960
and it's not a problem kind of thing for large projects


00:08:25.960 --> 00:08:27.360
is one of the things that we're really trying


00:08:27.360 --> 00:08:28.840
to work on fixing for people.


00:08:28.840 --> 00:08:30.440
- Right, if you can put the little code comment


00:08:30.440 --> 00:08:33.040
or whatever that says, please suppress this warning here,


00:08:33.040 --> 00:08:34.580
because we reviewed it.


00:08:34.580 --> 00:08:36.560
- Actually, a customer I was talking to,


00:08:36.560 --> 00:08:39.000
it's like they've got an Android app they're shipping.


00:08:39.000 --> 00:08:41.760
well, the Android scanner, and this is obviously not Python,


00:08:41.760 --> 00:08:42.800
but the Android scanner is like,


00:08:42.800 --> 00:08:46.160
whoa, you've got an API key in your code, ah, right?


00:08:46.160 --> 00:08:47.840
You know, and it's like, well, yeah,


00:08:47.840 --> 00:08:50.760
but it's an API key that has been carefully restricted


00:08:50.760 --> 00:08:53.080
so that it can only make one read-only call.


00:08:53.080 --> 00:08:55.280
And so like, it's okay, right?


00:08:55.280 --> 00:08:57.560
You know, and it's kind of like having,


00:08:57.560 --> 00:08:59.840
you know, kind of like that extra nervous person


00:08:59.840 --> 00:09:01.560
who occasionally freaks out and you're like,


00:09:01.560 --> 00:09:03.080
no, no, no, no, really, it's okay.


00:09:03.080 --> 00:09:05.120
It's not, this isn't a problem, so.


00:09:05.120 --> 00:09:05.960
- Cool, yeah.


00:09:05.960 --> 00:09:07.160
All right, so Bandit, pretty awesome.


00:09:07.160 --> 00:09:08.680
I know it does a lot of good stuff for Python.


00:09:08.680 --> 00:09:09.900
- And they actually list out all the stuff


00:09:09.900 --> 00:09:11.200
they check on their site, right?


00:09:11.200 --> 00:09:13.000
- Yeah, there's definitely a big document


00:09:13.000 --> 00:09:14.440
you can get with all their tests.


00:09:14.440 --> 00:09:15.280
- Super.


00:09:15.280 --> 00:09:18.400
All right, so the next one I wanna talk about is Black.


00:09:18.400 --> 00:09:20.080
And Brian, you're a fan of Black, right?


00:09:20.080 --> 00:09:20.920
- Yep.


00:09:20.920 --> 00:09:21.740
- Brett, do you use Black?


00:09:21.740 --> 00:09:22.580
Do you know this code formatter?


00:09:22.580 --> 00:09:23.420
- No, I'm not familiar with it myself.


00:09:23.420 --> 00:09:24.240
I'd love to hear.


00:09:24.240 --> 00:09:26.880
- It basically takes what Flake 8 does


00:09:26.880 --> 00:09:29.440
and some of these other linting tools,


00:09:29.440 --> 00:09:30.640
a little bit like you were talking about.


00:09:30.640 --> 00:09:33.240
Instead of saying, this file's too long,


00:09:33.240 --> 00:09:34.240
you should change it.


00:09:34.240 --> 00:09:36.400
This variable name is unused,


00:09:36.400 --> 00:09:38.400
or this indentation is not right,


00:09:38.400 --> 00:09:40.960
or whatever, instead of just giving you a bunch of warnings,


00:09:40.960 --> 00:09:44.480
it just rewrites your code to conform to its standard.


00:09:44.480 --> 00:09:47.880
And long as you are willing to live with a standard,


00:09:47.880 --> 00:09:50.960
a lot of people put it as like a GitHub pre-commit hook


00:09:50.960 --> 00:09:53.000
or something like that, and then just the whole team


00:09:53.000 --> 00:09:55.320
is just straight up on this type.


00:09:55.320 --> 00:09:57.560
So it's really, really popular these days


00:09:57.560 --> 00:09:59.240
over the last year or so.


00:09:59.240 --> 00:10:01.880
However, one of the things that's super annoying is


00:10:01.880 --> 00:10:04.280
there's a lot of places where you write code


00:10:04.280 --> 00:10:06.400
where you cannot apply these kind of tooling,


00:10:06.400 --> 00:10:09.920
and a lot of it is in places like Jupyter Notebooks


00:10:09.920 --> 00:10:11.880
or online editors, and you're like,


00:10:11.880 --> 00:10:13.080
well, you can type your code in here,


00:10:13.080 --> 00:10:16.440
but it's like, well, but I can't format my code in here,


00:10:16.440 --> 00:10:18.560
and I'm doing space a lot to line up stuff,


00:10:18.560 --> 00:10:21.080
and it's making me crazy, like that kind of stuff, right?


00:10:21.080 --> 00:10:23.800
So if you use Jupyter, there's a thing that came out


00:10:23.800 --> 00:10:26.840
called Jupyter-Black, Jupyter Black,


00:10:26.840 --> 00:10:30.100
and it's a super simple Jupyter Notebook plugin


00:10:30.100 --> 00:10:33.360
that gives you a hotkey to apply black formatting


00:10:33.360 --> 00:10:35.120
to your Jupyter Notebooks online.


00:10:35.120 --> 00:10:37.400
Does that work with the Flask debug console?


00:10:37.400 --> 00:10:38.920
- No, I don't think so.


00:10:38.920 --> 00:10:39.760
I don't think so.


00:10:39.760 --> 00:10:42.200
But yeah, so I think this is super helpful


00:10:42.200 --> 00:10:45.400
for the data scientists who are out there writing code


00:10:45.400 --> 00:10:46.840
or maybe even if you're a teacher


00:10:46.840 --> 00:10:48.240
and you're getting other people's code,


00:10:48.240 --> 00:10:49.640
you know, like, I can't look at this.


00:10:49.640 --> 00:10:50.480
What is this?


00:10:50.480 --> 00:10:51.300
Like these freshmen.


00:10:51.300 --> 00:10:52.600
(laughing)


00:10:52.600 --> 00:10:55.840
You know, control B, okay, freshmanitis is gone.


00:10:55.840 --> 00:10:56.660
I can read this.


00:10:56.660 --> 00:10:58.660
It's properly formatted like a professional.


00:10:58.660 --> 00:10:59.560
Now let's review it.


00:10:59.560 --> 00:11:00.400
Things like that.


00:11:00.400 --> 00:11:03.760
I just think it really brings a cool tool to a new place


00:11:03.760 --> 00:11:05.040
and I'm sure it'd be really welcome.


00:11:05.040 --> 00:11:07.120
You answered my question that I had right away,


00:11:07.120 --> 00:11:10.880
is does it format just the current cell or the whole thing?


00:11:10.880 --> 00:11:13.600
And yeah, there's two different keyboard options,


00:11:13.600 --> 00:11:17.320
Control + B and Control + Shift + B, that do both of those.


00:11:17.320 --> 00:11:19.560
- Yeah, Control + Shift + B is probably the one you want.


00:11:19.560 --> 00:11:21.000
But there's also a little toolbar button


00:11:21.000 --> 00:11:23.040
if you are not a hotkey person.


00:11:23.040 --> 00:11:24.320
So yeah, it's super simple.


00:11:24.320 --> 00:11:28.080
It just plugs in like a standard Jupyter Notebook extension,


00:11:28.080 --> 00:11:29.560
which I don't really do a ton with,


00:11:29.560 --> 00:11:31.600
but it sounds really easy to install it.


00:11:31.600 --> 00:11:33.520
And then the only other requirement


00:11:33.520 --> 00:11:35.880
is that you have black installed on the system


00:11:35.880 --> 00:11:37.200
or the virtual environment,


00:11:37.200 --> 00:11:39.600
'cause it has to like basically shell out to black


00:11:39.600 --> 00:11:41.320
and figure out what's happening, all right?


00:11:41.320 --> 00:11:43.840
Before we get onto the next topic though,


00:11:43.840 --> 00:11:45.840
let me just quickly tell you about Datadog.


00:11:45.840 --> 00:11:48.280
So this episode, like many of ours,


00:11:48.280 --> 00:11:50.240
is sponsored by Datadog.


00:11:50.240 --> 00:11:52.080
They're a cloud monitoring platform


00:11:52.080 --> 00:11:56.320
built by engineers for engineers like all of us, right?


00:11:56.320 --> 00:11:59.040
And so what it does is it auto instruments


00:11:59.040 --> 00:12:03.580
Django, Flask, Postgres, MongoDB, AsyncIO,


00:12:03.580 --> 00:12:04.820
all these different things,


00:12:04.820 --> 00:12:07.500
and will allow you to trace your requests


00:12:07.500 --> 00:12:10.340
across servers, across processes,


00:12:10.340 --> 00:12:13.020
and bring you basically a holistic view


00:12:13.020 --> 00:12:14.620
of what is the request doing?


00:12:14.620 --> 00:12:16.620
'Cause it's great to profile your Python code,


00:12:16.620 --> 00:12:18.900
but there's a whole lot of other stuff happening


00:12:18.900 --> 00:12:21.100
that's maybe where most of the stuff is happening, right?


00:12:21.100 --> 00:12:23.340
In the database or in the framework or whatever.


00:12:23.340 --> 00:12:24.420
And so this brings it all together


00:12:24.420 --> 00:12:28.020
and it integrates with over 350 technologies,


00:12:28.020 --> 00:12:29.180
Hadoop, Redis, all the good stuff.


00:12:29.180 --> 00:12:31.300
So check them out.


00:12:31.300 --> 00:12:34.300
They got a free trial, pythonbites.fm/datadog,


00:12:34.300 --> 00:12:36.260
and you also get a sweet Datadog t-shirt.


00:12:36.260 --> 00:12:38.740
So that alone makes it worth it, I think.


00:12:38.740 --> 00:12:40.500
All right, Brian, what's this next one you got here?


00:12:40.500 --> 00:12:42.580
- Well, I'm glad that we checked ahead of time


00:12:42.580 --> 00:12:44.860
and make sure that we've had two Jupyter articles.


00:12:44.860 --> 00:12:46.740
- Yeah, right next to each other, that's perfect.


00:12:46.740 --> 00:12:49.380
- Yeah, this is involving Paper Mill,


00:12:49.380 --> 00:12:51.060
and I think I'm pretty sure we've talked


00:12:51.060 --> 00:12:53.060
about Paper Mill before, at least briefly.


00:12:53.060 --> 00:12:55.380
- We covered Paper Mill live at PyCon.


00:12:55.380 --> 00:12:56.340
- Oh yeah, right.


00:12:56.340 --> 00:12:59.380
So I included this because it's a two-part article series


00:12:59.380 --> 00:13:01.340
that talks about the entire workflow,


00:13:01.340 --> 00:13:03.140
which that's where it seemed,


00:13:03.140 --> 00:13:04.940
it looked pretty interesting to me.


00:13:04.940 --> 00:13:07.900
So this, Chris Moffett wrote part one and part two


00:13:07.900 --> 00:13:10.980
of automated report generation with Paper Mill.


00:13:10.980 --> 00:13:12.580
So it's taken Jupyter Notebooks


00:13:12.580 --> 00:13:16.380
that use Pandas and Matplotlib to create a report,


00:13:16.380 --> 00:13:20.140
and then using NBConvert to take that


00:13:20.140 --> 00:13:22.500
and create an HTML report,


00:13:22.500 --> 00:13:25.180
and then go through and use Paper Mill


00:13:25.180 --> 00:13:28.780
to parameterize the input of this entire process


00:13:28.780 --> 00:13:31.620
and to set up execute blocks.


00:13:31.620 --> 00:13:33.120
And then he completed the process,


00:13:33.120 --> 00:13:34.900
talked about the rest of the workflow,


00:13:34.900 --> 00:13:37.360
about using a new tool that I've never heard of before,


00:13:37.360 --> 00:13:39.080
which is called rclone,


00:13:39.080 --> 00:13:41.920
to clone different cloud directory services


00:13:41.920 --> 00:13:43.300
and keep the same directory


00:13:43.300 --> 00:13:45.900
on lots of different cloud services.


00:13:45.900 --> 00:13:48.680
And then how to, if you're in a Linux box,


00:13:48.680 --> 00:13:53.680
using Cron to set up a regular process for this whole thing.


00:13:54.300 --> 00:13:58.680
I mean, the example is a simple thing, like a monthly sales report that you want to have


00:13:58.680 --> 00:14:00.240
just go out.


00:14:00.240 --> 00:14:05.120
Somebody can pop in the data in a spreadsheet or something like that, but then all the reporting


00:14:05.120 --> 00:14:08.340
and the data analysis and everything can happen afterwards.


00:14:08.340 --> 00:14:12.400
And just going through from the top to the bottom, the whole workflow, I thought was


00:14:12.400 --> 00:14:13.680
a real nice touch.


00:14:13.680 --> 00:14:19.200
I love this because it takes the boring stuff that you don't want to do, and it just hands


00:14:19.200 --> 00:14:21.920
it over to the computers in a beautiful way.


00:14:21.920 --> 00:14:27.520
some of the really new and nice tools, Paper Mill, Jupyter, and so on, and it just automates


00:14:27.520 --> 00:14:28.520
it all.


00:14:28.520 --> 00:14:32.700
So instead of like every Friday, you're like, "Oh, there's that two hours of copying data


00:14:32.700 --> 00:14:37.160
from system to system for the report," it's like, "It just shows up in the email.


00:14:37.160 --> 00:14:39.560
It's just on the internet," or whatever, right?


00:14:39.560 --> 00:14:40.560
This is really cool.


00:14:40.560 --> 00:14:45.480
And just to summarize Paper Mill, basically it turns Jupyter Notebooks into functions


00:14:45.480 --> 00:14:48.600
or command line style applications, it can be called.


00:14:48.600 --> 00:14:51.240
you provide data to it, inputs, it runs,


00:14:51.240 --> 00:14:52.200
and then output comes out.


00:14:52.200 --> 00:14:55.040
So you have the general analysis report.


00:14:55.040 --> 00:14:59.120
You feed like, hey, it's from July 1st to July 31st,


00:14:59.120 --> 00:15:00.680
drop the files here, go.


00:15:00.680 --> 00:15:01.600
- Yep, it's nice.


00:15:01.600 --> 00:15:02.440
- Yeah, very cool.


00:15:02.440 --> 00:15:03.440
Brett, you got any things like this


00:15:03.440 --> 00:15:04.920
that you guys gotta do at Faster Than Light?


00:15:04.920 --> 00:15:06.540
- We are still new enough.


00:15:06.540 --> 00:15:08.560
I've gotta admit, I literally was just thinking


00:15:08.560 --> 00:15:10.360
to myself this morning about how I really need


00:15:10.360 --> 00:15:12.000
to start writing some nightly reports


00:15:12.000 --> 00:15:13.760
that tell me what all everybody was doing


00:15:13.760 --> 00:15:15.020
in the system yesterday.


00:15:15.020 --> 00:15:18.360
So we actually still haven't completely fully launched.


00:15:18.360 --> 00:15:20.320
So thankfully there isn't too much yet


00:15:20.320 --> 00:15:22.560
that I need to know about that's, you know,


00:15:22.560 --> 00:15:25.160
it's like, oh yeah, how many tests did I run yesterday?


00:15:25.160 --> 00:15:28.000
You know, it was kind of what I would be getting here.


00:15:28.000 --> 00:15:29.720
But yeah, that's definitely something


00:15:29.720 --> 00:15:34.040
that I'll be looking at as we start to do our release.


00:15:34.040 --> 00:15:35.400
- Yeah, you're in that beautiful place


00:15:35.400 --> 00:15:38.000
where the molasses of real life


00:15:38.000 --> 00:15:40.120
day-to-day business operations hasn't hit you yet.


00:15:40.120 --> 00:15:41.800
You can go quick and build things.


00:15:41.800 --> 00:15:42.700
- Absolutely, and I gotta say,


00:15:42.700 --> 00:15:46.760
it is so strange having run four nines plus environment


00:15:46.760 --> 00:15:50.560
for a decade and a half to all of a sudden be like,


00:15:50.560 --> 00:15:54.040
oh yeah, production's down, nobody noticed, right?


00:15:54.040 --> 00:15:55.760
'Cause you haven't actually done anything yet, so.


00:15:55.760 --> 00:15:57.760
- It's a different world, it's a different world.


00:15:57.760 --> 00:15:59.240
Cool, all right, well you got the next item.


00:15:59.240 --> 00:16:00.060
Tell us about it.


00:16:00.060 --> 00:16:01.960
- Actually, it's a little bit of a rant for me


00:16:01.960 --> 00:16:04.040
because it was something that was just kind of surprising


00:16:04.040 --> 00:16:08.160
to me given how much is in the Python standard library


00:16:08.160 --> 00:16:10.280
and how much just, there's one of the things


00:16:10.280 --> 00:16:11.960
that's really great about Python is this,


00:16:11.960 --> 00:16:13.760
hey, how do I do this thing?


00:16:13.760 --> 00:16:15.920
And it's like, oh wow, it's in the standard library


00:16:15.920 --> 00:16:18.480
and you just call a function and it works.


00:16:18.480 --> 00:16:20.220
And that is that quite a while ago,


00:16:20.220 --> 00:16:23.000
I ported a database from an application


00:16:23.000 --> 00:16:25.480
from a Postgres database to an Oracle database,


00:16:25.480 --> 00:16:27.520
which I know is a ridiculously stupid thing to do,


00:16:27.520 --> 00:16:29.880
but a customer was paying us a lot of money to do it.


00:16:29.880 --> 00:16:34.080
And I discovered that Postgres is interval types,


00:16:34.080 --> 00:16:36.880
which is just when you're doing a timestamp and you go,


00:16:36.880 --> 00:16:40.000
okay, I wanna add a week to this or a day or whatever.


00:16:40.000 --> 00:16:42.280
There's an SQL type that's called an interval


00:16:42.280 --> 00:16:44.640
where you can just have arbitrary amounts of time


00:16:44.640 --> 00:16:45.920
you can add to a timestamp.


00:16:45.920 --> 00:16:48.160
Well, so Postgres lets you do anything completely arbitrary.


00:16:48.160 --> 00:16:50.000
What turned out, Oracle didn't.


00:16:50.000 --> 00:16:52.040
And it took me a little while to kind of understand why.


00:16:52.040 --> 00:16:53.160
And I actually ended up having to write


00:16:53.160 --> 00:16:54.440
my own interval parser.


00:16:54.440 --> 00:16:57.200
So I really had to like understand how all this stuff works.


00:16:57.200 --> 00:16:59.760
And it turns out that all date intervals


00:16:59.760 --> 00:17:00.800
really at the end of the day,


00:17:00.800 --> 00:17:04.520
boil down to a number of seconds or a number of months.


00:17:04.520 --> 00:17:06.160
It's one of those two things.


00:17:06.160 --> 00:17:07.720
Because if you think about it,


00:17:07.720 --> 00:17:11.280
a week is a number of days and a day is a number of hours


00:17:11.280 --> 00:17:12.840
and an hour is a number of minutes


00:17:12.840 --> 00:17:14.240
and a minute is a number of seconds.


00:17:14.240 --> 00:17:16.660
And if you've been a developer for any length of time,


00:17:16.660 --> 00:17:18.640
you probably know off the top of your head


00:17:18.640 --> 00:17:21.620
that there are 86,400 seconds in a day


00:17:21.620 --> 00:17:24.680
because it just comes up all the time and you remember it.


00:17:24.680 --> 00:17:27.460
But the other two is months and years,


00:17:27.460 --> 00:17:29.920
and a month is not a constant number of seconds.


00:17:29.920 --> 00:17:32.400
It's anywhere from 28 to 31 days.


00:17:32.400 --> 00:17:34.640
And depending upon how many that is,


00:17:34.640 --> 00:17:36.500
that actually varies by what year it is.


00:17:36.500 --> 00:17:38.320
And it's actually really kind of difficult


00:17:38.320 --> 00:17:39.760
to tease all that apart.


00:17:39.760 --> 00:17:41.440
And so it actually turns out if you use


00:17:41.440 --> 00:17:43.960
the date time library that comes with Python


00:17:43.960 --> 00:17:47.320
and you use the time delta object that comes with it,


00:17:47.320 --> 00:17:50.160
and you try to set an offset of months or years,


00:17:50.160 --> 00:17:52.440
it just says, "Sorry, can't do that."


00:17:52.440 --> 00:17:55.960
I can't tell you what a month from now is.


00:17:55.960 --> 00:17:59.760
That was just really surprising to me and really frustrating.


00:17:59.760 --> 00:18:02.120
Because actually, the reason why I needed this is actually I


00:18:02.120 --> 00:18:04.120
was setting up our subscriptions service,


00:18:04.120 --> 00:18:05.300
although I will say, of course,


00:18:05.300 --> 00:18:07.320
I'm not actually hanging onto the credit cards now.


00:18:07.320 --> 00:18:09.480
But I wanted to be able to test it.


00:18:09.480 --> 00:18:13.120
I want to say, "Okay, we'll start your subscription.


00:18:13.120 --> 00:18:17.040
let's go a month and a day out and see if your subscription is still active because it shouldn't be.


00:18:17.040 --> 00:18:22.640
And said, oh wow, okay, you can't do that. So there is another package out there that you can just get off of pip.


00:18:22.640 --> 00:18:28.040
It's the dateutil package and it has a time delta replacement called relative delta


00:18:28.040 --> 00:18:32.360
that just supports months and years and works very similar to the time delta thing.


00:18:32.360 --> 00:18:38.820
So if you've got the problem of, oh, hey, I want to know what it is a month from now or ten years from now,


00:18:39.080 --> 00:18:41.040
that'll let you calculate those timestamps.


00:18:41.040 --> 00:18:43.520
'Cause of course the problem is that parsing that stuff,


00:18:43.520 --> 00:18:45.240
like when you write the library,


00:18:45.240 --> 00:18:46.280
when you're advancing months,


00:18:46.280 --> 00:18:47.960
I mean, it's gotta be text-based, right?


00:18:47.960 --> 00:18:50.380
You gotta go, okay, I'm gonna turn this thing


00:18:50.380 --> 00:18:52.340
into a date string,


00:18:52.340 --> 00:18:54.200
and then I'm gonna increase the number of months


00:18:54.200 --> 00:18:56.200
and see if I've overflowed the number of years,


00:18:56.200 --> 00:18:57.860
increase the number of years,


00:18:57.860 --> 00:18:59.760
and then turn it back into a timestamp.


00:18:59.760 --> 00:19:01.820
So it's a much slower process


00:19:01.820 --> 00:19:03.960
from a calculation perspective.


00:19:03.960 --> 00:19:06.200
And I suspect that's probably why the original


00:19:06.200 --> 00:19:08.160
Python library doesn't just support it out of the box.


00:19:08.160 --> 00:19:09.600
- Yeah, but that is frustrating, right?


00:19:09.600 --> 00:19:11.140
'Cause that totally reasonable thing


00:19:11.140 --> 00:19:13.640
and actually the hardest of all things to compute


00:19:13.640 --> 00:19:15.460
is how many months from now is it?


00:19:15.460 --> 00:19:16.760
Close to that is how many years, right?


00:19:16.760 --> 00:19:17.980
- Yeah, it can be just,


00:19:17.980 --> 00:19:19.200
and of course, actually we're running up,


00:19:19.200 --> 00:19:22.980
we're gonna run up against the Unix 2037 thing right now,


00:19:22.980 --> 00:19:24.340
which by the way, I saw someone point out,


00:19:24.340 --> 00:19:25.800
I hadn't actually thought about this.


00:19:25.800 --> 00:19:28.020
There are places, businesses that are trying to do things


00:19:28.020 --> 00:19:30.560
like generate a certificate that expires in 20 years.


00:19:30.560 --> 00:19:34.120
Like you can actually run into that problem in your code now


00:19:34.120 --> 00:19:35.320
if you're still running on,


00:19:35.320 --> 00:19:37.560
if you're not running on 64 bit native code,


00:19:37.560 --> 00:19:39.200
which is actually, as I understand,


00:19:39.200 --> 00:19:40.840
a bit of a problem still in Linux.


00:19:40.840 --> 00:19:43.040
The Linux kernel is not doing a good job


00:19:43.040 --> 00:19:43.880
of handling all of that.


00:19:43.880 --> 00:19:45.880
That's gonna be an increasing problem


00:19:45.880 --> 00:19:47.680
as we get closer to that barrier.


00:19:47.680 --> 00:19:49.920
- Sounds like a great opportunity for consultants.


00:19:49.920 --> 00:19:50.920
- Oh yeah, I'm sure.


00:19:50.920 --> 00:19:53.000
I mean, it would not surprise me if I,


00:19:53.000 --> 00:19:56.160
in my career as a year 2037 consultant, right,


00:19:56.160 --> 00:19:58.800
as one of the last people who still knows


00:19:58.800 --> 00:20:00.440
how to program those old systems.


00:20:00.440 --> 00:20:01.800
- Yeah, this is a good recommendation.


00:20:01.800 --> 00:20:03.680
I like the DateUtil library.


00:20:03.680 --> 00:20:07.400
I love the parsing for it, right?


00:20:07.400 --> 00:20:10.800
- Parsing date times, it's annoying in Python.


00:20:10.800 --> 00:20:13.680
Parse, ST, I can't remember even,


00:20:13.680 --> 00:20:14.520
'cause I stopped using it,


00:20:14.520 --> 00:20:16.920
'cause I just import parse from dateUtil,


00:20:16.920 --> 00:20:18.000
and I'm good, right?


00:20:18.000 --> 00:20:18.840
- Yes.


00:20:18.840 --> 00:20:20.560
- It seems to be able to guess the format


00:20:20.560 --> 00:20:22.880
that you're going for really, really well.


00:20:22.880 --> 00:20:25.400
- I was doing a bunch of coding recently with DynamoDB,


00:20:25.400 --> 00:20:27.520
and it was just like the timestamps you get back


00:20:27.520 --> 00:20:31.880
out of the Bodo3 library is just like one character off


00:20:31.880 --> 00:20:33.960
of what you can natively parse.


00:20:33.960 --> 00:20:37.280
It was just like, why does this have to be so painful?


00:20:37.280 --> 00:20:38.120
- The date you tilted?


00:20:38.120 --> 00:20:39.840
- Yeah, you know, the date I was getting out of Boto3,


00:20:39.840 --> 00:20:40.920
I don't remember the exact details,


00:20:40.920 --> 00:20:43.520
but the date I was getting out of Boto3 had like one,


00:20:43.520 --> 00:20:44.360
it was like, it was like,


00:20:44.360 --> 00:20:46.120
so I literally am doing like a, you know,


00:20:46.120 --> 00:20:48.640
a text substitution on a particular character


00:20:48.640 --> 00:20:51.160
to turn it into something else so that it'll then parse it.


00:20:51.160 --> 00:20:52.200
- Cool, I do that on XML


00:20:52.200 --> 00:20:54.160
to get rid of the namespaces all the time.


00:20:54.160 --> 00:20:58.240
All right, so Brian, before we've spoken


00:20:58.240 --> 00:21:00.020
about understanding the language


00:21:00.020 --> 00:21:01.520
and some of the core language features,


00:21:01.520 --> 00:21:04.760
and I just want to come back to this topic a little bit


00:21:04.760 --> 00:21:07.160
and focus on Python generators.


00:21:07.160 --> 00:21:09.600
So there was a cool article recommended to us


00:21:09.600 --> 00:21:11.200
by one of the listeners.


00:21:11.200 --> 00:21:13.260
It's not super new, but we haven't covered it,


00:21:13.260 --> 00:21:14.640
so I think it's totally relevant.


00:21:14.640 --> 00:21:17.120
It's an article by Radu Racia,


00:21:17.120 --> 00:21:18.440
hopefully I'm getting that roughly right,


00:21:18.440 --> 00:21:22.020
and it's called How and Why You Should Use Python Generators.


00:21:22.020 --> 00:21:26.280
So basically it talks about what are generators,


00:21:26.280 --> 00:21:28.400
how you should use them, and I wanted to cover this


00:21:28.400 --> 00:21:29.780
'cause I feel like there's a lot of people


00:21:29.780 --> 00:21:31.440
that come from other languages,


00:21:31.440 --> 00:21:34.900
and it's both a blessing and a curse of Python


00:21:34.900 --> 00:21:39.180
that people can come from C or Java or JavaScript


00:21:39.180 --> 00:21:41.420
or other languages and just go, ah, this is simple.


00:21:41.420 --> 00:21:42.780
I learned it in a weekend.


00:21:42.780 --> 00:21:44.300
Let me write my code now.


00:21:44.300 --> 00:21:46.300
And they're doing numerical for loops.


00:21:46.300 --> 00:21:49.900
And they're doing tons of stuff that is not really Pythonic.


00:21:49.900 --> 00:21:53.340
And they've got 27 Stack Overflow tabs open for,


00:21:53.340 --> 00:21:55.220
oh, how do I open a file again?


00:21:55.220 --> 00:21:56.300
Yes, exactly.


00:21:56.300 --> 00:21:59.940
And so a lot of languages don't have this idea of generators


00:21:59.940 --> 00:22:02.500
or coroutines, which are just amazing.


00:22:02.500 --> 00:22:03.900
You've got a function.


00:22:03.900 --> 00:22:05.580
it's gonna process some huge amount of data.


00:22:05.580 --> 00:22:07.820
Maybe it needs to read a 10 gigabyte file


00:22:07.820 --> 00:22:09.660
and parse it line by line.


00:22:09.660 --> 00:22:12.100
Well, if you write that as a generator,


00:22:12.100 --> 00:22:15.180
if you only pull 10 lines from it, it only reads 10 lines.


00:22:15.180 --> 00:22:16.580
Or even if you gotta go through all of it,


00:22:16.580 --> 00:22:19.420
it only loads one line into memory at a time.


00:22:19.420 --> 00:22:21.260
And often the implementation of the generator


00:22:21.260 --> 00:22:23.940
using the yield keyword is actually simpler,


00:22:23.940 --> 00:22:26.340
shorter, cleaner than if you were to try to build it up


00:22:26.340 --> 00:22:28.020
into a list and then return that list


00:22:28.020 --> 00:22:28.860
and all those kinds of things.


00:22:28.860 --> 00:22:31.740
- And code that doesn't exist doesn't have bugs in it.


00:22:31.740 --> 00:22:32.660
- That's a good point, yes.


00:22:32.660 --> 00:22:35.300
code that doesn't exist does definitely not have bugs in it.


00:22:35.300 --> 00:22:39.260
So this article is good if these generator ideas are new to you.


00:22:39.260 --> 00:22:41.420
It talks about the lazy evaluation, which


00:22:41.420 --> 00:22:43.300
is really important to understand,


00:22:43.300 --> 00:22:45.420
and gives you a couple of simple examples.


00:22:45.420 --> 00:22:47.900
It's not super deep, so if you're new, read through it.


00:22:47.900 --> 00:22:49.720
If you really know it pretty well,


00:22:49.720 --> 00:22:51.180
you probably won't gain a whole lot about it.


00:22:51.180 --> 00:22:52.900
But it's something you could shoot over to your coworkers.


00:22:52.900 --> 00:22:54.600
You're like, why did you write this code?


00:22:54.600 --> 00:22:55.720
Please don't do that again.


00:22:55.720 --> 00:22:56.500
Use this.


00:22:56.500 --> 00:22:57.500
Yeah, this is good.


00:22:57.500 --> 00:23:00.020
Even myself, an experienced Python person,


00:23:00.020 --> 00:23:02.180
there's certain times where I'm like,


00:23:02.180 --> 00:23:04.420
Why didn't I think of using a generator earlier?


00:23:04.420 --> 00:23:05.260
- Yeah, absolutely.


00:23:05.260 --> 00:23:08.640
I mean, you don't always know


00:23:08.640 --> 00:23:09.900
that that's really the best path.


00:23:09.900 --> 00:23:10.940
You just start writing the code.


00:23:10.940 --> 00:23:11.780
You're like, "Ah, I'm gonna have a list.


00:23:11.780 --> 00:23:12.720
"I'm gonna put stuff in the list.


00:23:12.720 --> 00:23:13.560
"I'm gonna do this.


00:23:13.560 --> 00:23:14.380
"I'll get a dictionary, whatever."


00:23:14.380 --> 00:23:15.220
Like, wait a minute.


00:23:15.220 --> 00:23:16.220
Actually, I didn't need any of that.


00:23:16.220 --> 00:23:17.500
I could do it way better, right?


00:23:17.500 --> 00:23:18.700
So you kind of gotta have it in mind.


00:23:18.700 --> 00:23:21.540
I would love it if tools like PyCharm and VS Code


00:23:21.540 --> 00:23:24.700
had a button to refactor to generator, right?


00:23:24.700 --> 00:23:27.980
Convert this list and return the list into a generator.


00:23:27.980 --> 00:23:30.540
It probably doesn't exist because


00:23:30.540 --> 00:23:33.940
way you process the results has some kind of effect, right?


00:23:33.940 --> 00:23:36.180
You can't go through a generator twice,


00:23:36.180 --> 00:23:38.640
but you can go through a list twice, or things like that.


00:23:38.640 --> 00:23:41.460
But it still would be really cool if you could automate that


00:23:41.460 --> 00:23:41.980
a little bit.


00:23:41.980 --> 00:23:43.680
Yeah, I was thinking more along the lines


00:23:43.680 --> 00:23:46.940
of when I have my custom data structure that is essentially


00:23:46.940 --> 00:23:48.580
a container structure, and I forget


00:23:48.580 --> 00:23:53.620
to add it or next to it so that generators can be used with it.


00:23:53.620 --> 00:23:54.200
Yeah, exactly.


00:23:54.200 --> 00:23:56.020
You can fit it into that whole pipeline.


00:23:56.020 --> 00:23:56.520
Cool.


00:23:56.520 --> 00:23:58.900
Well, that's it for our main items this week.


00:23:58.900 --> 00:24:01.220
You got anything else you want to quickly give a shout out


00:24:01.220 --> 00:24:01.720
to, Brian?


00:24:01.720 --> 00:24:06.260
-Well, I just saw that we've got a link to PyPI now supporting


00:24:06.260 --> 00:24:07.900
API tokens.


00:24:07.900 --> 00:24:12.340
There's been a lot of recent changes to the PyPI interface


00:24:12.340 --> 00:24:14.060
to make it more secure.


00:24:14.060 --> 00:24:16.500
And this is just one of the latest.


00:24:16.500 --> 00:24:18.700
And I think it's a good way.


00:24:18.700 --> 00:24:20.380
They're doing well about making sure


00:24:20.380 --> 00:24:23.320
that these changes are supported on the test server


00:24:23.320 --> 00:24:26.380
as well, so that you can test out the changes first.


00:24:26.380 --> 00:24:28.060
-Yeah, that's pretty good.


00:24:28.060 --> 00:24:32.400
So you don't have to just do it on the immutable right only or right once.


00:24:32.400 --> 00:24:33.680
Real version.


00:24:33.680 --> 00:24:34.720
Yeah.


00:24:34.720 --> 00:24:34.840
Yeah.


00:24:34.840 --> 00:24:35.320
Super cool.


00:24:35.320 --> 00:24:39.000
So I think this is like evidence, you know, there was a big push and that


00:24:39.000 --> 00:24:43.520
funding that grant from Mozilla to basically modernize PyPI, right.


00:24:43.520 --> 00:24:46.760
And the work that the PIPA did to, to move that along.


00:24:46.760 --> 00:24:49.520
It's like, now you can start seeing these new features coming in because


00:24:49.520 --> 00:24:52.080
previously it was like, no one wants to touch that.


00:24:52.080 --> 00:24:53.960
There's no way we're adding new features.


00:24:53.960 --> 00:24:55.640
Like we're just trying to keep it from breaking.


00:24:55.640 --> 00:24:56.560
Now it can grow.


00:24:56.560 --> 00:24:56.880
It's cool.


00:24:56.880 --> 00:24:57.080
Yeah.


00:24:57.080 --> 00:24:57.480
It's nice.


00:24:57.520 --> 00:24:59.320
I got a couple I want to give a quick shout out to.


00:24:59.320 --> 00:25:03.040
Last week, we covered possibility of this exploration


00:25:03.040 --> 00:25:05.480
of moving to PEG parsers, as opposed


00:25:05.480 --> 00:25:11.240
to the original sort of one-off version of the parser


00:25:11.240 --> 00:25:15.080
that Guido van Rossum had written for Python 30 years ago.


00:25:15.080 --> 00:25:17.480
And so now he's written another article


00:25:17.480 --> 00:25:19.200
talking about building a PEG parser


00:25:19.200 --> 00:25:20.720
and moving towards it and so on.


00:25:20.720 --> 00:25:22.160
So if that was interesting to you,


00:25:22.160 --> 00:25:24.440
you can check out that follow-up that he wrote.


00:25:24.440 --> 00:25:26.840
And then finally, we've talked a lot about Homebrew.


00:25:26.840 --> 00:25:28.720
and obviously people know about Apt


00:25:28.720 --> 00:25:31.960
and other package managers on Linux,


00:25:31.960 --> 00:25:33.520
but I don't think we've really talked


00:25:33.520 --> 00:25:35.360
that much about Windows, right?


00:25:35.360 --> 00:25:36.760
You don't have Homebrew on Windows


00:25:36.760 --> 00:25:38.480
or many other things like that.


00:25:38.480 --> 00:25:41.840
So, Preston Daniel sent us over a quick message,


00:25:41.840 --> 00:25:44.040
said, "Hey, if you guys get a chance,


00:25:44.040 --> 00:25:45.040
"you should give a shout out


00:25:45.040 --> 00:25:47.920
"to the Chocolaty package manager on Windows."


00:25:47.920 --> 00:25:48.920
You familiar with this, Brian?


00:25:48.920 --> 00:25:49.920
- No, I've never used it.


00:25:49.920 --> 00:25:50.760
- No, I've never used it.


00:25:50.760 --> 00:25:52.760
Actually, I do all of my Python,


00:25:52.760 --> 00:25:55.880
or a lot of my Python development actually under Windows,


00:25:55.880 --> 00:25:57.520
but I'm using WSL,


00:25:57.520 --> 00:25:59.840
so I don't actually do anything natively in Windows.


00:25:59.840 --> 00:26:02.540
- Yeah, yeah, so in a sense, you have the Windows UI,


00:26:02.540 --> 00:26:04.960
but it's kind of Linux-y in some of the tooling.


00:26:04.960 --> 00:26:06.580
- WSL was just kind of magic.


00:26:06.580 --> 00:26:09.200
I mean, it definitely is in that,


00:26:09.200 --> 00:26:10.940
the thing that's amazing here is not how well


00:26:10.940 --> 00:26:13.080
the bear dances, but that it dances at all.


00:26:13.080 --> 00:26:16.640
But yeah, I have a Windows gaming laptop I bought years ago,


00:26:16.640 --> 00:26:18.080
and now that I'm in a startup, of course,


00:26:18.080 --> 00:26:20.040
I'm using whatever hardware I had laying around


00:26:20.040 --> 00:26:21.620
in order to not spend any money, right?


00:26:21.620 --> 00:26:24.160
And so, yeah, that's my development laptop


00:26:24.160 --> 00:26:25.360
is my old gaming laptop.


00:26:25.360 --> 00:26:32.080
So yeah, it's all WSL and like I'm like simulating AWS services on it so that I can develop offline and stuff


00:26:32.080 --> 00:26:38.000
It's just I'm just it boggles me that you can actually do all of this stuff at all. Yeah, that's super cool. That's super cool


00:26:38.000 --> 00:26:46.260
Yeah, so chocolatey is like homebrew basically but for Windows so you can say Choco install such-and-such and I link to Python


00:26:46.260 --> 00:26:48.160
Right. So actually on


00:26:48.160 --> 00:26:50.160
Chocolatey you can now install Python


00:26:50.160 --> 00:26:54.120
374 which is kind of impressive right that came out like a couple weeks ago


00:26:54.480 --> 00:26:56.600
But if you actually look at the versions,


00:26:56.600 --> 00:26:59.240
you can install Python 3.8 Beta 3,


00:26:59.240 --> 00:27:00.880
which came out yesterday, right?


00:27:00.880 --> 00:27:02.400
Like it's right on top.


00:27:02.400 --> 00:27:04.820
And they even do like limited virus scanning


00:27:04.820 --> 00:27:06.220
and like validation a little bit.


00:27:06.220 --> 00:27:09.120
So yeah, it's a pretty cool little system.


00:27:09.120 --> 00:27:10.460
And people should definitely check it out


00:27:10.460 --> 00:27:12.400
if they're doing work natively on Windows.


00:27:12.400 --> 00:27:13.240
- Yeah, nice.


00:27:13.240 --> 00:27:14.320
- Brett, anything else you wanna throw out there


00:27:14.320 --> 00:27:15.160
while you're here?


00:27:15.160 --> 00:27:17.560
- That's probably all the great Python ideas


00:27:17.560 --> 00:27:19.560
that I have at the moment, so.


00:27:19.560 --> 00:27:20.400
- All right, super.


00:27:20.400 --> 00:27:21.220
- How about a joke?


00:27:21.220 --> 00:27:22.060
- Yeah, how about a joke?


00:27:22.060 --> 00:27:23.320
I actually have a couple of jokes for you.


00:27:23.320 --> 00:27:26.040
a programming joke and then just an adulting joke


00:27:26.040 --> 00:27:27.080
following up on that.


00:27:27.080 --> 00:27:30.240
So it's more of, I guess, more of an assessment.


00:27:30.240 --> 00:27:33.180
A good programmer is someone who always looks both ways


00:27:33.180 --> 00:27:35.040
before crossing a one-way street.


00:27:35.040 --> 00:27:37.160
(laughing)


00:27:37.160 --> 00:27:38.920
Does that connect with you, Brian, as a tester?


00:27:38.920 --> 00:27:39.760
- Yes, definitely.


00:27:39.760 --> 00:27:42.360
Having just gotten back from wandering around in London


00:27:42.360 --> 00:27:43.800
and always looking the wrong way


00:27:43.800 --> 00:27:47.160
when crossing a one-way street, that resonates with me.


00:27:47.160 --> 00:27:48.720
- That's awesome, yeah, I'm always paranoid


00:27:48.720 --> 00:27:50.240
when I'm in London or in Australia.


00:27:50.240 --> 00:27:52.720
Like, I'm like double checking both directions.


00:27:52.720 --> 00:27:54.140
They're like, "You just gotta look that way."


00:27:54.140 --> 00:27:56.060
I'm like, "No, if that's what you say now,


00:27:56.060 --> 00:27:57.800
"then there's gonna be the time I look the wrong way


00:27:57.800 --> 00:27:59.980
"and one of those big red buses is gonna crush me."


00:27:59.980 --> 00:28:03.740
And I'm just, you know, so I'm just like a paranoid squirrel


00:28:03.740 --> 00:28:06.300
trying to cross the street in the UK, it's great.


00:28:06.300 --> 00:28:09.480
Yeah, so then related to that, not quite programming,


00:28:09.480 --> 00:28:11.800
but adulthood is like looking both ways


00:28:11.800 --> 00:28:12.960
before crossing the street


00:28:12.960 --> 00:28:14.500
and then getting hit by an airplane.


00:28:14.500 --> 00:28:15.740
(laughing)


00:28:15.740 --> 00:28:17.380
All right, I wanna throw one more in there, though.


00:28:17.380 --> 00:28:18.220
Oh, go ahead, Brian.


00:28:18.220 --> 00:28:20.020
- No, I think that's good, that's funny.


00:28:20.020 --> 00:28:21.500
- It's a little too real to be funny, though.


00:28:21.500 --> 00:28:25.040
Like we aren't laughing like, yeah, that hurt.


00:28:25.040 --> 00:28:27.420
All right, so Brett, you started this one.


00:28:27.420 --> 00:28:30.280
So I'm going to throw it out here for everyone.


00:28:30.280 --> 00:28:31.280
Little Bobby Tables.


00:28:31.280 --> 00:28:33.140
Brian, do you know about Little Bobby Tables?


00:28:33.140 --> 00:28:35.480
Well, I remember it, but I probably couldn't explain it.


00:28:35.480 --> 00:28:37.120
Yeah, so it's XKCD.


00:28:37.120 --> 00:28:38.600
And I'll just read it.


00:28:38.600 --> 00:28:40.640
We'll just leave it out there for folks.


00:28:40.640 --> 00:28:42.800
It's a mom answering the phone and says,


00:28:42.800 --> 00:28:44.200
hi, this is your son's school.


00:28:44.200 --> 00:28:46.800
We're having some computer trouble.


00:28:46.800 --> 00:28:48.320
Oh dear, did he break something?


00:28:48.320 --> 00:28:49.720
In a way.


00:28:49.720 --> 00:28:51.920
Did you really name your son Robert quote,


00:28:51.920 --> 00:28:53.960
parenthesis, semicolon, drop table students,


00:28:53.960 --> 00:28:56.760
quote, semicolon, dash dash?


00:28:56.760 --> 00:28:58.800
Oh yes, little Bobby Tables we call him.


00:28:58.800 --> 00:29:01.000
Well, we've lost years of student records.


00:29:01.000 --> 00:29:02.000
I hope you're happy.


00:29:02.000 --> 00:29:04.800
And I hope you've learned to sanitize your database in foot.


00:29:04.800 --> 00:29:06.360
(both laughing)


00:29:06.360 --> 00:29:08.680
- The thing I really love about this idea


00:29:08.680 --> 00:29:10.720
is that she has saddled this child


00:29:10.720 --> 00:29:14.160
with this terrible name for this one opportunity, right?


00:29:14.160 --> 00:29:16.080
I mean, you know, when he gets to be 24,


00:29:16.080 --> 00:29:18.560
it's never gonna work again, right?


00:29:18.560 --> 00:29:20.120
I mean, I guess unless he goes on to be a teacher,


00:29:20.120 --> 00:29:22.160
then he can just cause havoc wherever he goes


00:29:22.160 --> 00:29:23.000
for the rest of his life.


00:29:23.000 --> 00:29:25.280
- It sounds crazy, but there's this pen tester,


00:29:25.280 --> 00:29:27.660
penetration tester, who has a Tesla.


00:29:27.660 --> 00:29:31.000
And in the app, you can change the name of your Tesla.


00:29:31.000 --> 00:29:35.960
He changed it to a JavaScript injection string,


00:29:35.960 --> 00:29:38.920
and it went off when his car had to go get some service.


00:29:38.920 --> 00:29:40.200
- Yep, I believe it.


00:29:40.200 --> 00:29:42.680
I just have to say, as a general aside about anything,


00:29:42.680 --> 00:29:45.400
as somebody who ran a PCI DSS compliant thing


00:29:45.400 --> 00:29:47.800
for a long time, get pen tested.


00:29:47.800 --> 00:29:49.520
Like every time I got pen tested,


00:29:49.520 --> 00:29:51.120
those people came up with something creative


00:29:51.120 --> 00:29:52.560
and I learned something, you know?


00:29:52.560 --> 00:29:55.440
Like that's, like take the first dollar that you have


00:29:55.440 --> 00:29:57.560
to spend on security and hire a pen tester.


00:29:57.560 --> 00:29:59.400
- Yeah, that sounds like good advice for sure.


00:29:59.400 --> 00:30:00.600
All right, well, that looks like it.


00:30:00.600 --> 00:30:02.040
That's it for us, you guys.


00:30:02.040 --> 00:30:03.320
Brian, thanks as always.


00:30:03.320 --> 00:30:04.880
And Brad, thank you for coming this time.


00:30:04.880 --> 00:30:05.720
- My pleasure.


00:30:05.720 --> 00:30:06.540
- Yeah, thank you.


00:30:06.540 --> 00:30:07.380
- Yep, bye everyone. - Bye bye.


00:30:07.380 --> 00:30:09.080
- Thank you for listening to Python Bytes.


00:30:09.080 --> 00:30:11.520
Follow the show on Twitter via @PythonBytes.


00:30:11.520 --> 00:30:14.580
That's Python Bytes as in B-Y-T-E-S.


00:30:14.580 --> 00:30:17.760
And get the full show notes at pythonbytes.fm.


00:30:17.760 --> 00:30:21.540
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:30:21.540 --> 00:30:22.540
way.


00:30:22.540 --> 00:30:24.780
We're always on the lookout for sharing something cool.


00:30:24.780 --> 00:30:27.860
On behalf of myself and Brian Auken, this is Michael Kennedy.


00:30:27.860 --> 00:30:31.100
Thank you for listening and sharing this podcast with your friends and colleagues.

