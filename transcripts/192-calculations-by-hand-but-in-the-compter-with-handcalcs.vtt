
00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:14.560
This is episode 192 recorded July 22nd, 2020. Had to look that one up. I am Brian Okken.


00:00:14.560 --> 00:00:15.600
And I'm Michael Kennedy.


00:00:15.600 --> 00:00:18.800
And I can't believe we're heading close to 200. This is crazy.


00:00:18.800 --> 00:00:22.080
Oh yeah. Been at this for a while. That's going to be like four years almost.


00:00:22.080 --> 00:00:26.480
Yeah. Again, this episode is sponsored by us and we'll tell you a little bit more about


00:00:26.480 --> 00:00:29.520
other things that we're doing a little later in the show.


00:00:29.520 --> 00:00:34.800
But first, some of the ways that people tell each other what they're up to is


00:00:34.800 --> 00:00:38.720
their personal GitHub read me on their GitHub profile.


00:00:38.720 --> 00:00:39.320
>> That's right.


00:00:39.320 --> 00:00:42.760
>> So I was impressed by something that I saw recently.


00:00:42.760 --> 00:00:46.160
Simon Willison, he's the co-creator of Django.


00:00:46.160 --> 00:00:50.720
He posted something called a blog post saying how to do a,


00:00:50.720 --> 00:00:54.280
building a self-updating profile read me for GitHub.


00:00:54.280 --> 00:00:57.600
So at the top of it, I'm going to quote this, it says,


00:00:57.600 --> 00:01:01.680
"GitHub quietly released a new feature at some point in the past few days,


00:01:01.680 --> 00:01:02.920
profile readmes."


00:01:02.920 --> 00:01:03.960
>> This is news to me.


00:01:03.960 --> 00:01:08.040
>> Yeah. So if you create a repository with the same name as your GitHub account.


00:01:08.040 --> 00:01:10.040
So in Simon's case,


00:01:10.040 --> 00:01:15.120
it was Simon W, so github.com/simonw/simonw.


00:01:15.120 --> 00:01:17.400
So you go too deep.


00:01:17.400 --> 00:01:21.820
Then add a readme.md or readme markdown file to it.


00:01:21.820 --> 00:01:25.980
GitHub will render the contents at the top of your personal profile page.


00:01:25.980 --> 00:01:29.500
So that's neat. In that case, it's just one up.


00:01:29.500 --> 00:01:34.260
So if you go to get hub.com/simon w you see his, but his looks really awesome.


00:01:34.260 --> 00:01:38.480
It's got a whole bunch of cool stuff in it because he took it one step further.


00:01:38.480 --> 00:01:42.920
It's not a static markdown file. He's got another article that talks about it,


00:01:42.920 --> 00:01:46.500
but this article here walks through exactly what he does.


00:01:46.500 --> 00:01:49.700
And also it's all open source. So you can see his code.


00:01:50.340 --> 00:01:53.020
He uses GitHub Actions.


00:01:53.020 --> 00:01:55.480
There's both a button that he can push to make it happen,


00:01:55.480 --> 00:02:00.480
but there's also any post to his own Simon W. repo


00:02:00.480 --> 00:02:04.300
will cause this to happen, but the GitHub Actions run,


00:02:04.300 --> 00:02:06.960
he contributes to a lot of open source projects.


00:02:06.960 --> 00:02:10.660
So he takes a certain set of repos that he has


00:02:10.660 --> 00:02:12.460
and pulls the latest releases


00:02:12.460 --> 00:02:14.340
and have like latest release notes


00:02:14.340 --> 00:02:17.420
using the GitHub GraphQL API.


00:02:17.420 --> 00:02:19.580
So there's an example of that.


00:02:19.580 --> 00:02:21.380
There's an example of using feed parser


00:02:21.380 --> 00:02:23.860
to pull blog entries off of his blog,


00:02:23.860 --> 00:02:27.500
and an example of using a SQL query to grab,


00:02:27.500 --> 00:02:30.820
I guess he's got a site called TAIL for Today I Learned,


00:02:30.820 --> 00:02:32.680
grabs a few links off of that.


00:02:32.680 --> 00:02:35.560
So he's got a three column setup for a readme


00:02:35.560 --> 00:02:39.140
that is kept up to date using GitHub Actions.


00:02:39.140 --> 00:02:40.420
How cool is that?


00:02:40.420 --> 00:02:42.020
- That is awesome.


00:02:42.020 --> 00:02:43.740
Yeah, so normally you go to your GitHub repo


00:02:43.740 --> 00:02:45.220
and you have your picture


00:02:45.220 --> 00:02:47.500
on how many followers you have and whatnot.


00:02:47.500 --> 00:02:49.420
Some other cool stuff we'll talk about later.


00:02:49.420 --> 00:02:56.140
but then has your pinned repositories and that greenish heat map of how frequently you contribute to


00:02:56.140 --> 00:02:59.300
various projects or just to GitHub in general.


00:02:59.300 --> 00:03:03.500
But now you can have right at the top, you know, whatever you want to write, which


00:03:03.500 --> 00:03:05.940
that's pretty awesome. I think I might have to do this.


00:03:05.940 --> 00:03:11.180
Yeah. I mean, you still get all that other stuff, but it's just that other stuff is below this readme


00:03:11.180 --> 00:03:13.020
info. That's pretty neat.


00:03:13.020 --> 00:03:15.180
Yeah, very cool. And it's super simple, right?


00:03:15.180 --> 00:03:17.700
Anyone can write a readme.md file.


00:03:17.700 --> 00:03:25.700
Yeah, and one of the reasons why I brought this up is I think there's a lot of people trying to utilize, I mean, this day of COVID and quarantine and stuff.


00:03:25.700 --> 00:03:27.700
I'm glad I'm not looking for a job.


00:03:27.700 --> 00:03:35.700
And I think that if you are looking for a job, making your GitHub profile look professional and show the content that you want to show off.


00:03:35.700 --> 00:03:40.700
And having things like, you know, blog posts on your GitHub profile, that's pretty cool.


00:03:40.700 --> 00:03:45.700
It is really cool. And just, you know, you know that people, employers say they check people's GitHub profile accounts.


00:03:45.700 --> 00:03:46.700
Yeah.


00:03:46.700 --> 00:03:51.700
So how many people are going to have these unique special ones that show they care?


00:03:51.700 --> 00:03:52.700
Right? Not too many.


00:03:52.700 --> 00:03:54.700
Well, the people that listen to our podcast.


00:03:54.700 --> 00:03:55.700
Exactly.


00:03:55.700 --> 00:03:56.700
Yeah.


00:03:56.700 --> 00:03:57.700
All the awesome people.


00:03:57.700 --> 00:03:58.700
Okay.


00:03:58.700 --> 00:03:59.700
So that's really cool.


00:03:59.700 --> 00:04:00.700
I definitely didn't know about that.


00:04:00.700 --> 00:04:01.700
Thanks for sharing that.


00:04:01.700 --> 00:04:02.700
It looks neat.


00:04:02.700 --> 00:04:08.700
So we got this next one from Connor Furster, and he works in engineering but also does


00:04:08.700 --> 00:04:10.700
data science-y things.


00:04:10.700 --> 00:04:15.700
And he sent over this project that he works on that is incredibly cool.


00:04:15.700 --> 00:04:20.860
So a lot of times what people want to do is they want to take symbolic math or math that


00:04:20.860 --> 00:04:26.500
you might write out by hand, turn it into Python code through Pandas and NumPy and whatnot,


00:04:26.500 --> 00:04:31.860
Scikit-learn or Scikit in general, and then run it through Jupyter and get an answer.


00:04:31.860 --> 00:04:36.660
But he says he works in design engineering and you have to do a lot of calculations and


00:04:36.660 --> 00:04:43.700
those have to be kept as part of legal records to show the project design history.


00:04:43.700 --> 00:04:46.780
One thing you can do is do them by hand.


00:04:46.780 --> 00:04:48.020
That's kind of crazy.


00:04:48.020 --> 00:04:49.340
A lot of people use Excel.


00:04:49.340 --> 00:04:50.380
That's a nightmare.


00:04:50.380 --> 00:04:53.860
Like Excel is like unbounded go-tos you can't see,


00:04:53.860 --> 00:04:55.600
which is always tricky.


00:04:55.600 --> 00:04:56.940
So you could do it with Jupyter,


00:04:56.940 --> 00:04:58.540
but then you just got this pile of code


00:04:58.540 --> 00:05:00.880
and here's the answer and so on, right?


00:05:00.880 --> 00:05:03.200
So you want to like the theoretical view


00:05:03.200 --> 00:05:05.700
to verify the formula you're using, right?


00:05:05.700 --> 00:05:08.540
So he created this thing called HandCalcs,


00:05:08.540 --> 00:05:13.340
Hand C-A-L-C-S, like calculus or calculations.


00:05:13.340 --> 00:05:15.000
Anyway, HandCalcs.


00:05:15.000 --> 00:05:17.660
And the idea is you type in Python code


00:05:17.660 --> 00:05:19.400
into a Jupyter cell,


00:05:19.400 --> 00:05:22.220
and then you can do a percent percent render


00:05:22.220 --> 00:05:24.440
from the HandCalcs project,


00:05:24.440 --> 00:05:27.320
and it will turn it into symbolic math.


00:05:27.320 --> 00:05:28.160
- This is beautiful.


00:05:28.160 --> 00:05:29.800
- Yeah, as if you had written it out by hand.


00:05:29.800 --> 00:05:31.640
- Yeah, with like, as an example,


00:05:31.640 --> 00:05:33.400
in the little video demo,


00:05:33.400 --> 00:05:34.920
we've said before we like those,


00:05:34.920 --> 00:05:36.840
and everybody does.


00:05:36.840 --> 00:05:39.720
But it has like square root symbols


00:05:39.720 --> 00:05:41.160
with a bunch of symbols underneath it,


00:05:41.160 --> 00:05:43.400
and all sorts of symbols that--


00:05:43.400 --> 00:05:44.240
- Yeah. - Yeah, looks like--


00:05:44.240 --> 00:05:45.920
- Like what you would have had to show


00:05:45.920 --> 00:05:47.640
if you were in math class, right?


00:05:47.640 --> 00:05:48.480
- Yep, exactly.


00:05:48.480 --> 00:05:50.640
- And it will show steps, like symbolic steps


00:05:50.640 --> 00:05:52.760
from step A, step B, step C,


00:05:52.760 --> 00:05:55.520
and you can say show it shorthand or expand it out longhand


00:05:55.520 --> 00:05:58.600
and show me all the steps you use to solve these problems


00:05:58.600 --> 00:05:59.880
and all kinds of cool stuff.


00:05:59.880 --> 00:06:00.720
- Wow. - Yeah.


00:06:00.720 --> 00:06:04.240
The reason it looks so good is it basically converts


00:06:04.240 --> 00:06:08.160
symbolic Python math over to LaTeX,


00:06:08.160 --> 00:06:13.500
And LaTeX is like the de facto math representation language for academic papers.


00:06:13.500 --> 00:06:17.040
So, you know, you want to have like integral signs, you want to have infinite


00:06:17.040 --> 00:06:18.360
summations, all that kind of stuff.


00:06:18.360 --> 00:06:18.940
No problem.


00:06:18.940 --> 00:06:20.060
Oh, this is really cool.


00:06:20.060 --> 00:06:20.700
Ain't it cool?


00:06:20.700 --> 00:06:26.340
And then you can also use the symbolic tag to get it to do other, like show more


00:06:26.340 --> 00:06:29.860
symbolic stuff you can do longhand, shorthand, you can have it do units.


00:06:29.860 --> 00:06:34.500
They'll put units like millimeters cubed or whatever, and it'll carry the units


00:06:34.500 --> 00:06:36.640
through the calculation in symbolically.


00:06:36.700 --> 00:06:39.100
- Yeah, but looking at all these formulas,


00:06:39.100 --> 00:06:40.620
it's giving me nightmares.


00:06:40.620 --> 00:06:41.580
- Don't look anymore.


00:06:41.580 --> 00:06:42.780
- Okay.


00:06:42.780 --> 00:06:46.020
- Well, I guess the thing you would want to think about


00:06:46.020 --> 00:06:48.220
the trade-off is, would you rather look at them


00:06:48.220 --> 00:06:49.960
in their proper mathematical form


00:06:49.960 --> 00:06:54.020
or in like programming meaning,


00:06:54.020 --> 00:06:57.380
like where you turn it into like star star,


00:06:57.380 --> 00:07:01.180
pow, instead of proper exponents and stuff?


00:07:01.180 --> 00:07:02.380
- No, no, I was just kidding.


00:07:02.380 --> 00:07:05.380
This is beautiful stuff, but when we got into integrals,


00:07:05.380 --> 00:07:08.060
that's where basically that's where my brain left


00:07:08.060 --> 00:07:09.580
and I never really caught it.


00:07:09.580 --> 00:07:10.620
(laughing)


00:07:10.620 --> 00:07:11.900
- Yeah, yeah, cool.


00:07:11.900 --> 00:07:16.300
All right, so if people have to take programming math


00:07:16.300 --> 00:07:19.060
but they want to represent it more nicely,


00:07:19.060 --> 00:07:20.260
check out Hancocks, looks awesome.


00:07:20.260 --> 00:07:21.780
- Yeah, nice.


00:07:21.780 --> 00:07:22.980
Oh, I'm next.


00:07:22.980 --> 00:07:24.260
(laughing)


00:07:24.260 --> 00:07:26.180
Actually, I'm not.


00:07:26.180 --> 00:07:29.380
I'd like to talk to all of us about our sponsor


00:07:29.380 --> 00:07:32.520
and our sponsor is Talk Python Training


00:07:32.520 --> 00:07:34.940
and Testing Code today.


00:07:34.940 --> 00:07:36.740
Tell me about talkPython training.


00:07:36.740 --> 00:07:37.820
- I'll tell you about what I'm working on.


00:07:37.820 --> 00:07:39.560
This week I started writing a new course.


00:07:39.560 --> 00:07:41.200
We have a couple of new courses that are fun


00:07:41.200 --> 00:07:43.660
that are coming, and the one that I started working on


00:07:43.660 --> 00:07:47.100
is called Python Memory Management and Tips.


00:07:47.100 --> 00:07:47.940
- Tell me more.


00:07:47.940 --> 00:07:49.860
- Yeah, so if you ever wondered what happens,


00:07:49.860 --> 00:07:51.440
like how does it free up memory,


00:07:51.440 --> 00:07:54.700
what algorithms work better with Python memory,


00:07:54.700 --> 00:07:57.740
and what algorithms can make it more expensive or slow,


00:07:57.740 --> 00:07:59.660
what are some of the tips and tricks you can do


00:07:59.660 --> 00:08:02.880
to dramatically decrease the memory consumption


00:08:02.880 --> 00:08:06.940
like two or three times with almost exactly the same code


00:08:06.940 --> 00:08:07.940
type of thing.


00:08:07.940 --> 00:08:09.180
Well, I'm writing a course on that.


00:08:09.180 --> 00:08:10.020
- Oh, that's neat.


00:08:10.020 --> 00:08:11.100
- Yeah, thanks.


00:08:11.100 --> 00:08:14.180
- Especially for people like talking about doing some more,


00:08:14.180 --> 00:08:18.140
we can get Python on smaller operating system architectures


00:08:18.140 --> 00:08:20.740
like CircuitPython and stuff, that's important.


00:08:20.740 --> 00:08:22.140
- Yeah, that's a really good point


00:08:22.140 --> 00:08:24.260
that on the small memory constraint pieces,


00:08:24.260 --> 00:08:26.020
you might care a lot for sure.


00:08:26.020 --> 00:08:26.980
How about testing code?


00:08:26.980 --> 00:08:29.500
- Well, I was interviewing somebody recently,


00:08:29.500 --> 00:08:32.860
David Lord, his actual interview will come out


00:08:32.860 --> 00:08:34.760
sometime in August.


00:08:34.760 --> 00:08:36.940
But he said, "I was looking at testing code


00:08:36.940 --> 00:08:38.920
"and a lot of the recent episodes


00:08:38.920 --> 00:08:40.640
"really haven't been about testing.


00:08:40.640 --> 00:08:41.800
"What's up with that?"


00:08:41.800 --> 00:08:45.080
And I said, "Yeah, it's and code, test and code."


00:08:45.080 --> 00:08:48.560
But yes, so there is a lot of testing focus


00:08:48.560 --> 00:08:52.720
because primarily because I think that software engineering


00:08:52.720 --> 00:08:54.720
doesn't talk about testing enough.


00:08:54.720 --> 00:08:56.640
But I do cover a lot of stuff.


00:08:56.640 --> 00:08:59.120
I'm gonna highlight a few of the last episodes.


00:08:59.920 --> 00:09:02.960
I talked to Sebastian Ramirez on episode 120


00:09:02.960 --> 00:09:05.240
about Fest API and Typer.


00:09:05.240 --> 00:09:08.040
Talked with Brett Cannon on episode 119


00:09:08.040 --> 00:09:10.400
about packaging and pyproject.toml


00:09:10.400 --> 00:09:11.940
and what's going on there.


00:09:11.940 --> 00:09:13.600
121's a diversion.


00:09:13.600 --> 00:09:15.920
It's a completely different sort of talk.


00:09:15.920 --> 00:09:19.000
We talked to, I talked to somebody about 3D printing


00:09:19.000 --> 00:09:21.000
and finite state machines and stuff.


00:09:21.000 --> 00:09:24.400
And it's just sort of a fun people doing Python


00:09:24.400 --> 00:09:25.320
and cool things.


00:09:25.320 --> 00:09:26.160
- Very cool.


00:09:26.160 --> 00:09:28.640
- And then again, talking, thinking about people


00:09:28.640 --> 00:09:30.400
possibly looking for jobs.


00:09:30.400 --> 00:09:33.680
In episode 122, we talk about better resumes


00:09:33.680 --> 00:09:35.360
for software engineers.


00:09:35.360 --> 00:09:37.520
So there's a lot of stuff for everybody,


00:09:37.520 --> 00:09:39.800
even if you cringe when you think about testing,


00:09:39.800 --> 00:09:41.880
please check out Testing Code.


00:09:41.880 --> 00:09:43.760
We are still putting out episodes.


00:09:43.760 --> 00:09:44.960
If you wanna hear more,


00:09:44.960 --> 00:09:46.560
I'd love to hear what people wanna hear about.


00:09:46.560 --> 00:09:48.400
- Yeah, it makes our job so much easier


00:09:48.400 --> 00:09:49.440
when we get suggestions.


00:09:49.440 --> 00:09:50.840
- Yeah, suggestions and questions


00:09:50.840 --> 00:09:53.320
and things that can flow into things.


00:09:53.320 --> 00:09:56.280
- Yeah, like a suggestion to return the print statement


00:09:56.280 --> 00:09:57.640
so you don't have to put the parentheses.


00:09:57.640 --> 00:09:59.140
- Yeah, so this is crazy,


00:09:59.140 --> 00:10:01.300
and I don't really have much of a comment here,


00:10:01.300 --> 00:10:03.900
but I saw the thing by Guido,


00:10:03.900 --> 00:10:08.900
and then I saw this article by Jake Edge on lwn.net.


00:10:08.900 --> 00:10:12.380
Don't know what lwn stands for, but it doesn't matter.


00:10:12.380 --> 00:10:14.880
Anyway, the non-return of the Python print statement.


00:10:14.880 --> 00:10:18.220
So this is odd, I thought.


00:10:18.220 --> 00:10:21.540
We have talked about the new peg parser in Python


00:10:21.540 --> 00:10:23.740
that's going on, but one of the things


00:10:23.740 --> 00:10:26.440
that happened with that is, I guess,


00:10:26.440 --> 00:10:28.560
one of the reasons why Python 2 to 3,


00:10:28.560 --> 00:10:31.940
they went from a print statement to a print function,


00:10:31.940 --> 00:10:33.800
was it made the parsing easier.


00:10:33.800 --> 00:10:35.480
But with the PEG parser,


00:10:35.480 --> 00:10:37.280
you can do all sorts of crazy things


00:10:37.280 --> 00:10:39.480
and you can have functions


00:10:39.480 --> 00:10:41.800
that syntactically look like statements


00:10:41.800 --> 00:10:45.040
and have it work just work, sort of.


00:10:45.040 --> 00:10:49.000
So as an example, we could use a print statement instead,


00:10:49.000 --> 00:10:53.040
instead of having to be, put the parentheses in,


00:10:53.040 --> 00:10:55.420
you could avoid the parentheses.


00:10:55.420 --> 00:10:58.220
Anyway, he just put it out there as an idea


00:10:58.220 --> 00:11:01.300
and essentially people said, no, yuck.


00:11:01.300 --> 00:11:02.220
What do you think about this?


00:11:02.220 --> 00:11:03.340
- It's interesting.


00:11:03.340 --> 00:11:06.140
It would be one fewer things that has to happen


00:11:06.140 --> 00:11:09.860
to move to the next stage from a two to three conversion.


00:11:09.860 --> 00:11:11.320
But on the other hand, this looks like


00:11:11.320 --> 00:11:13.800
one of the easiest conversions for that step.


00:11:13.800 --> 00:11:16.860
To me, I'm not a fan of having statements


00:11:16.860 --> 00:11:18.500
and functions in the language


00:11:18.500 --> 00:11:21.180
because it looks to me like functions basically


00:11:21.180 --> 00:11:24.740
solve the same problem with a little more clarity,


00:11:24.740 --> 00:11:25.820
you know, they're a little more functional.


00:11:25.820 --> 00:11:27.020
You can span the multi-line


00:11:27.020 --> 00:11:30.460
if the arguments are super long, you need to.


00:11:30.460 --> 00:11:31.820
Like with the print statement,


00:11:31.820 --> 00:11:33.980
you'd have to use like a continuation backslash


00:11:33.980 --> 00:11:35.060
and other weirdness like that.


00:11:35.060 --> 00:11:38.780
So, you know, just 'cause you can doesn't mean you should.


00:11:38.780 --> 00:11:40.220
I guess that's probably how I feel about it,


00:11:40.220 --> 00:11:42.900
but I wouldn't use it if it were in the language.


00:11:42.900 --> 00:11:44.140
Let me put it that way.


00:11:44.140 --> 00:11:46.780
- Yeah, I'm for the no yuck camp.


00:11:46.780 --> 00:11:49.220
I think it's, I think that print statement


00:11:49.220 --> 00:11:50.860
shouldn't have been a statement in the first place.


00:11:50.860 --> 00:11:53.020
And then I think Python 3 fixed it.


00:11:53.020 --> 00:11:55.380
and having it be a function is the right thing to do.


00:11:55.380 --> 00:11:56.740
I wish there were more statements


00:11:56.740 --> 00:11:58.380
that were functions instead.


00:11:58.380 --> 00:12:01.060
Also, I think, I wish assert was a state,


00:12:01.060 --> 00:12:02.820
a function instead of a statement.


00:12:02.820 --> 00:12:05.500
Because people doing, thinking that it's a function


00:12:05.500 --> 00:12:09.020
and putting a parentheses around assert causes problems.


00:12:09.020 --> 00:12:11.140
But that's not what this is about.


00:12:11.140 --> 00:12:12.380
It's interesting I brought it up


00:12:12.380 --> 00:12:16.540
because people should know about this weird, wacky discussion.


00:12:16.540 --> 00:12:17.360
- Yeah, that's funny.


00:12:17.360 --> 00:12:19.500
- I'm glad that it got thumbed down,


00:12:19.500 --> 00:12:20.540
and I don't think it's gonna happen.


00:12:20.540 --> 00:12:22.540
- You're willing to make a statement about it?


00:12:22.540 --> 00:12:23.380
- Yes.


00:12:23.380 --> 00:12:24.460
(laughing)


00:12:24.460 --> 00:12:27.580
- All right, well, I'm gonna make a statement about Flask.


00:12:27.580 --> 00:12:30.180
I think Flask, you just had David Lord on the show, right?


00:12:30.180 --> 00:12:32.500
That's not out yet, but pretty cool, yeah?


00:12:32.500 --> 00:12:35.540
And he's lead maintainer of Flask these days.


00:12:35.540 --> 00:12:38.300
So Flask is, at least at the API level,


00:12:38.300 --> 00:12:41.940
got to be the most popular web framework there is,


00:12:41.940 --> 00:12:44.940
because it's slightly more popular than Django,


00:12:44.940 --> 00:12:47.140
if you look at some of the recent surveys,


00:12:47.140 --> 00:12:49.060
but if you look at the other frameworks,


00:12:49.060 --> 00:12:53.140
many of them are Flask-esque, if you will, right?


00:12:53.140 --> 00:12:57.060
Things that are like Responder or Scenic or whatever.


00:12:57.060 --> 00:13:00.060
They have this idea of like sort of the same style, right?


00:13:00.060 --> 00:13:03.740
So there's an article called "FastAPI for Flask Users."


00:13:03.740 --> 00:13:06.740
And I'm actually a big fan of FastAPI.


00:13:06.740 --> 00:13:10.260
I'm hoping to have some opportunity to use it soon.


00:13:10.260 --> 00:13:12.400
Like the APIs that I've worked on,


00:13:12.400 --> 00:13:13.340
they've been around for a while.


00:13:13.340 --> 00:13:15.800
They predate FastAPI and I don't really want to go


00:13:15.800 --> 00:13:17.540
create a whole new site just so I could use


00:13:17.540 --> 00:13:18.420
a different framework.


00:13:18.420 --> 00:13:20.240
That sounds like maintenance to me.


00:13:20.240 --> 00:13:24.380
So I haven't got a chance to use it in production yet,


00:13:24.380 --> 00:13:26.480
but FastAPI looks awesome.


00:13:26.480 --> 00:13:29.800
So there's an article called FastAPI for Flask users,


00:13:29.800 --> 00:13:32.460
and it says, look, you probably know the Flask API.


00:13:32.460 --> 00:13:36.100
Here is the equivalent for FastAPI.


00:13:36.100 --> 00:13:36.940
- Okay.


00:13:36.940 --> 00:13:39.460
- Yeah, and so there's talk about some of the advantages,


00:13:39.460 --> 00:13:41.780
and they're pretty awesome.


00:13:41.780 --> 00:13:45.260
So automatic data validation in FastAPI


00:13:45.260 --> 00:13:47.940
doesn't exist in Flask, generally speaking.


00:13:47.940 --> 00:13:50.980
automatic documentation generation,


00:13:50.980 --> 00:13:54.300
built-in best practices like type annotations


00:13:54.300 --> 00:13:57.540
and pydantic schemas and whatnot.


00:13:57.540 --> 00:14:00.660
It comes shipped or recommend,


00:14:00.660 --> 00:14:03.580
I guess that's in terms of like a requirement.


00:14:03.580 --> 00:14:05.980
You have to have a ASGI server.


00:14:05.980 --> 00:14:07.540
So it comes with uveicorn,


00:14:07.540 --> 00:14:09.180
which is one of the,


00:14:09.180 --> 00:14:12.420
it's like g.uicorn plus uvloop for async stuff.


00:14:12.420 --> 00:14:14.160
And in a lot of ways, it's super similar.


00:14:14.160 --> 00:14:16.180
So if you want to create a view method,


00:14:16.180 --> 00:14:17.520
instead of app.route,


00:14:17.520 --> 00:14:19.560
you would say app.get.


00:14:19.560 --> 00:14:23.060
And so FastAPI, would you imagine the name indicates


00:14:23.060 --> 00:14:25.320
it's mostly for building APIs?


00:14:25.320 --> 00:14:26.160
- Yes.


00:14:26.160 --> 00:14:28.840
- All right, so when you talk about functions


00:14:28.840 --> 00:14:32.040
and what they're gonna do, you say not just here's a URL,


00:14:32.040 --> 00:14:34.600
but here's a URL and an HTTP verb.


00:14:34.600 --> 00:14:39.600
So app.get/ or app.put/account or something like that.


00:14:39.600 --> 00:14:41.760
Which is pretty cool.


00:14:41.760 --> 00:14:43.400
In the route, you can specify variables.


00:14:43.400 --> 00:14:46.640
So in Flask, you could have a user ID


00:14:46.640 --> 00:14:50.920
And in the string route, you would say int colon user ID


00:14:50.920 --> 00:14:53.740
if you want Flask to convert that to an integer, right?


00:14:53.740 --> 00:14:57.240
It's fine, it works okay, but the rest of the tooling


00:14:57.240 --> 00:14:58.960
doesn't help you know it's an integer,


00:14:58.960 --> 00:15:02.360
just 'cause Flask knows it's gonna be an integer, right?


00:15:02.360 --> 00:15:05.640
So in FastAPI, you put the variable up there as well.


00:15:05.640 --> 00:15:07.800
But then in the function,


00:15:07.800 --> 00:15:10.520
you put the variable name as a type,


00:15:10.520 --> 00:15:12.600
and then it will actually convert that to an integer


00:15:12.600 --> 00:15:16.520
using the Python language tools or specification


00:15:16.520 --> 00:15:20.400
rather than the string API thing.


00:15:20.400 --> 00:15:21.680
That's handy.


00:15:21.680 --> 00:15:23.300
If you want a query string in Flask,


00:15:23.300 --> 00:15:26.120
you just have a URL, you can go to request.args,


00:15:26.120 --> 00:15:28.720
and you can get the value out of the query string.


00:15:28.720 --> 00:15:32.040
In FastAPI, you just put the query string values,


00:15:32.040 --> 00:15:34.280
or sorry, the keys, as arguments,


00:15:34.280 --> 00:15:35.760
and they just get passed in.


00:15:35.760 --> 00:15:36.680
That's pretty cool.


00:15:36.680 --> 00:15:40.640
If you have a API that takes a JSON post,


00:15:40.640 --> 00:15:43.360
like it's accepting a JSON document,


00:15:43.360 --> 00:15:45.160
you can just say it takes a dictionary,


00:15:45.160 --> 00:15:46.180
and that gets posted in.


00:15:46.180 --> 00:15:48.600
but you can go way, way further, which is awesome.


00:15:48.600 --> 00:15:50.560
You can define a Pydantic model,


00:15:50.560 --> 00:15:53.080
which is a class that has types


00:15:53.080 --> 00:15:55.160
and validation on the class, right?


00:15:55.160 --> 00:15:59.040
And then you can say my view method or my API method takes,


00:15:59.040 --> 00:16:00.800
like in the example they have is a sentence


00:16:00.800 --> 00:16:02.980
that has got like various components,


00:16:02.980 --> 00:16:04.540
nouns, verbs, and whatever.


00:16:04.540 --> 00:16:06.580
You can say, here's a function


00:16:06.580 --> 00:16:08.440
and it has an argument called sentence


00:16:08.440 --> 00:16:10.760
and it'll take that JSON document,


00:16:10.760 --> 00:16:12.960
parse it into the Pydantic model


00:16:12.960 --> 00:16:15.040
and pass it to you pre-validated.


00:16:15.040 --> 00:16:18.120
- That's definitely one of the benefits of FastAPI


00:16:18.120 --> 00:16:19.600
is this data validation.


00:16:19.600 --> 00:16:22.200
- Yeah, this is like built-in data validation.


00:16:22.200 --> 00:16:25.520
'Cause how many times do you spend effort,


00:16:25.520 --> 00:16:28.520
oh, I got a string, but I got to convert it to an integer.


00:16:28.520 --> 00:16:30.320
I got to make sure that this value is here.


00:16:30.320 --> 00:16:32.120
I got to make sure that this one is, you know,


00:16:32.120 --> 00:16:36.260
like whatever, like it matches some set of substrings


00:16:36.260 --> 00:16:37.200
or whatever.


00:16:37.200 --> 00:16:38.640
Just let the framework handle it.


00:16:38.640 --> 00:16:40.400
It also has the equivalent of blueprints,


00:16:40.400 --> 00:16:41.800
which it calls routers,


00:16:41.800 --> 00:16:43.800
and this automatic validation I talked about.


00:16:43.800 --> 00:16:46.480
So anyway, there's a nice article that says,


00:16:46.480 --> 00:16:50.980
you know Flask, let's teach you FastAPIs real quick


00:16:50.980 --> 00:16:53.040
by just doing a this equals that.


00:16:53.040 --> 00:16:55.240
- Yeah, I love this because there's a lot of people


00:16:55.240 --> 00:16:59.020
that have been writing APIs in Flask for a long time.


00:16:59.020 --> 00:17:02.120
And so it's just second nature to them


00:17:02.120 --> 00:17:05.040
and having something to say, hey, I want to try FastAPI,


00:17:05.040 --> 00:17:07.400
but is the learning curves going to be a problem?


00:17:07.400 --> 00:17:09.760
Well, with something like this, it's decoder ring


00:17:09.760 --> 00:17:12.480
and it is set up for, you can just sort of skim through


00:17:12.480 --> 00:17:15.200
and go, well, how do I do URLs?


00:17:15.200 --> 00:17:16.600
Oh, this is how you do it.


00:17:16.600 --> 00:17:19.520
And URL variables and different things.


00:17:19.520 --> 00:17:20.680
It's set up really nice.


00:17:20.680 --> 00:17:23.280
- Yeah, yep, definitely fun, definitely useful.


00:17:23.280 --> 00:17:24.520
- So do you use Twitter?


00:17:24.520 --> 00:17:27.480
- I do use Twitter, sometimes happily,


00:17:27.480 --> 00:17:30.080
sometimes I get dragged into stuff.


00:17:30.080 --> 00:17:32.040
Sometimes I use it in write-only mode


00:17:32.040 --> 00:17:33.140
where I wanna make a statement,


00:17:33.140 --> 00:17:34.920
but I don't really wanna go read it.


00:17:34.920 --> 00:17:35.800
But yeah, definitely.


00:17:35.800 --> 00:17:38.560
- Yeah, well, I have a, this is probably common,


00:17:38.560 --> 00:17:41.280
sort of a love-hate relationship with Twitter.


00:17:41.280 --> 00:17:44.700
I use it a lot and like keeping track of other people,


00:17:44.700 --> 00:17:48.180
but sometimes I don't really like that it's a pain


00:17:48.180 --> 00:17:49.640
to delete old stuff,


00:17:49.640 --> 00:17:52.840
'cause I think of it as a current conversation.


00:17:52.840 --> 00:17:56.620
I don't really look at what somebody wrote a year ago,


00:17:56.620 --> 00:17:59.240
and I don't really care what I wrote a year ago.


00:17:59.240 --> 00:18:04.120
So I have used Twitter deletion tools before.


00:18:04.120 --> 00:18:06.080
They seem kind of weird that I have to go out


00:18:06.080 --> 00:18:09.360
and give my credentials to some other website


00:18:09.360 --> 00:18:10.880
or something though, but I know how to do it.


00:18:10.880 --> 00:18:13.380
I'm sure that'll be fine. It'll be fine. Don't worry about it.


00:18:13.380 --> 00:18:18.980
Yeah, anyway, but there's APIs, so you could use the Twitter API, but how?


00:18:18.980 --> 00:18:24.980
And so I thought it was really cool that Chris Alban is somebody that tweets about data science a lot.


00:18:24.980 --> 00:18:33.480
And he posted a little snippet that he said he uses, at least he did it first at one point.


00:18:33.480 --> 00:18:40.180
But it's a cool little example of using a library called Tweepy to interact with Twitter


00:18:40.180 --> 00:18:44.780
and to delete old tweets for your account.


00:18:44.780 --> 00:18:48.320
So it's just this really short little Python script,


00:18:48.320 --> 00:18:49.700
but it deletes tweets.


00:18:49.700 --> 00:18:52.000
There has defaults, but you can change those.


00:18:52.000 --> 00:18:54.080
Obviously, it's just a Python script,


00:18:54.080 --> 00:18:55.700
so you can change whatever you want.


00:18:55.700 --> 00:18:57.820
But it's set up to delete tweets


00:18:57.820 --> 00:19:00.200
that are older than 62 days


00:19:00.200 --> 00:19:03.340
and that have likes less than 100 people


00:19:03.340 --> 00:19:06.540
and that you haven't liked yourself.


00:19:06.540 --> 00:19:08.480
So the idea being,


00:19:08.480 --> 00:19:11.920
If you go through some of your old tweets and the ones that you, you're like, oh yeah,


00:19:11.920 --> 00:19:12.920
that was cool.


00:19:12.920 --> 00:19:13.980
I want to keep that around.


00:19:13.980 --> 00:19:18.680
Just like it, like your own tweets and then run this script and it'll delete some old


00:19:18.680 --> 00:19:19.680
stuff.


00:19:19.680 --> 00:19:23.760
I would definitely have to change that hundred count to something else because I don't think


00:19:23.760 --> 00:19:26.240
I've ever had a tweet liked by a hundred people.


00:19:26.240 --> 00:19:27.240
That's a big number.


00:19:27.240 --> 00:19:32.120
You know, Twitter used to show how many tweets you actually had and I don't think it shows


00:19:32.120 --> 00:19:33.120
it anymore.


00:19:33.120 --> 00:19:37.680
On my profile, at least, I don't see it immediately how many tweets I had.


00:19:37.680 --> 00:19:40.880
followers and following and likes and stuff like that.


00:19:40.880 --> 00:19:43.760
But yeah, pretty cool.


00:19:43.760 --> 00:19:46.480
It's like keep the highlights, right?


00:19:46.480 --> 00:19:47.540
Just keep my highlights.


00:19:47.540 --> 00:19:49.320
I don't need every random thing of,


00:19:49.320 --> 00:19:52.120
oh, I went out and had a hamburger today.


00:19:52.120 --> 00:19:54.720
People don't need that as a piece of history.


00:19:54.720 --> 00:19:57.160
- Yeah, and you don't know what's gonna stick


00:19:57.160 --> 00:19:58.000
and what's gonna not.


00:19:58.000 --> 00:20:00.320
And I was actually reading an article recently


00:20:00.320 --> 00:20:04.280
about Twitter, about what that says to you


00:20:04.280 --> 00:20:07.080
if somebody, like for instance, you're trying to get a job.


00:20:07.080 --> 00:20:09.200
and somebody looks at your Twitter account,


00:20:09.200 --> 00:20:14.200
having the junk in there that nobody really related to,


00:20:14.200 --> 00:20:16.340
having that automatically called out


00:20:16.340 --> 00:20:18.440
and just having the highlight reel,


00:20:18.440 --> 00:20:21.240
that's not a bad idea for some of the old stuff.


00:20:21.240 --> 00:20:22.320
- Yeah, and you could turn it way down.


00:20:22.320 --> 00:20:24.760
You could say, look, if there's no likes


00:20:24.760 --> 00:20:26.560
or no retweets, just drop it.


00:20:26.560 --> 00:20:29.400
- Yeah, yeah, it might even be good for me


00:20:29.400 --> 00:20:31.440
just to go back a couple days.


00:20:31.440 --> 00:20:33.240
But if nobody's liked it in a couple days,


00:20:33.240 --> 00:20:34.960
maybe just take it away.


00:20:34.960 --> 00:20:36.120
- That didn't happen, right?


00:20:36.120 --> 00:20:38.680
- Yeah, that didn't happen. (laughs)


00:20:38.680 --> 00:20:41.800
- So people could end up clinging to their old tweets,


00:20:41.800 --> 00:20:42.720
but they probably shouldn't.


00:20:42.720 --> 00:20:43.600
- Right. - Yeah.


00:20:43.600 --> 00:20:45.200
So I wanna talk about an article


00:20:45.200 --> 00:20:48.280
by Itamar Turner-Trowering.


00:20:48.280 --> 00:20:51.620
Now, we spoke about him, sort of,


00:20:51.620 --> 00:20:53.120
not by name, I don't think,


00:20:53.120 --> 00:20:54.400
but we talked about Phil,


00:20:54.400 --> 00:20:57.160
the data science memory profiler a little while ago.


00:20:57.160 --> 00:20:58.000
- Okay, right.


00:20:58.000 --> 00:20:59.000
- So he's the guy who wrote that.


00:20:59.000 --> 00:21:02.640
I actually had him on Talk Python on episode 274


00:21:02.640 --> 00:21:03.880
as well, talking about that.


00:21:03.880 --> 00:21:04.800
So that was pretty cool.


00:21:04.800 --> 00:21:09.500
But he, independent of that, he wrote this article that I came across that I liked


00:21:09.500 --> 00:21:14.800
called "Clinging to Memory, How Python Function Calls Can Increase Your Memory Usage."


00:21:14.800 --> 00:21:18.640
And this is part of my research for working on that course that I was talking about, that


00:21:18.640 --> 00:21:21.520
memory, Python memory management stuff.


00:21:21.520 --> 00:21:25.840
So he talks about, like, hey, we're going to have this thing, it's going to load up


00:21:25.840 --> 00:21:30.280
some NumPy data, and then it's going to pass it to a function, the function is going to


00:21:30.280 --> 00:21:34.720
make some changes, take the return value of that, pass it to another function, it's going


00:21:34.720 --> 00:21:39.360
to make some more changes. So basically three steps and said, look, we'd expect that we've


00:21:39.360 --> 00:21:43.940
loaded two gigs of memory. And yet when you run fill against it, you end up with three


00:21:43.940 --> 00:21:49.560
gigs of maximum memory usage, which is a little bit weird. And the reason is those initial


00:21:49.560 --> 00:21:55.800
like intermediate values that you're working with on step one and step two, the way Python


00:21:55.800 --> 00:22:01.520
decides a variable goes out of scope is in this case, the function returns not like it's


00:22:01.520 --> 00:22:07.220
never used again, but it's just the function returns, in which case it's going to hang


00:22:07.220 --> 00:22:10.260
on to all the intermediate copies all the way to the end.


00:22:10.260 --> 00:22:11.260
Interesting.


00:22:11.260 --> 00:22:12.260
Right?


00:22:12.260 --> 00:22:15.700
Like some languages, they determine that and they get rid of it.


00:22:15.700 --> 00:22:21.580
Like in C#, the JIT compiler will notice like, okay, a variable is not used after half the


00:22:21.580 --> 00:22:26.140
way, so we're going to make it eligible for GC, basically, unless it's in debug mode,


00:22:26.140 --> 00:22:28.620
then keep it around in case somebody sets a breakpoint and they want to see it.


00:22:28.620 --> 00:22:30.740
So there's a lot of the tricks that things can do.


00:22:30.740 --> 00:22:32.060
Python doesn't do them.


00:22:32.060 --> 00:22:35.500
So it's gonna stick around for this length of the function.


00:22:35.500 --> 00:22:39.360
So what can you do to make it not stick around as long?


00:22:39.360 --> 00:22:40.700
'Cause maybe you only have two gigs


00:22:40.700 --> 00:22:42.740
and you don't wanna use three gigs or whatever.


00:22:42.740 --> 00:22:45.100
Right, so he talks about three different solutions.


00:22:45.100 --> 00:22:48.060
One is to don't hold onto the intermediate variables


00:22:48.060 --> 00:22:50.260
and just chain into one massive function call


00:22:50.260 --> 00:22:53.460
like pass the results of one to two to step two,


00:22:53.460 --> 00:22:56.020
pass the results of step two to three,


00:22:56.020 --> 00:22:58.600
and there's no variables holding on, so they'll be gone.


00:22:58.600 --> 00:22:59.900
Right, that's an option.


00:22:59.900 --> 00:23:03.900
Another one is to iteratively change the variable,


00:23:03.900 --> 00:23:07.320
say like data equals load data from first step.


00:23:07.320 --> 00:23:10.860
Data equals step two of processing of data.


00:23:10.860 --> 00:23:13.020
Data equals step three of processing of data.


00:23:13.020 --> 00:23:16.740
And that way you're dropping the reference count


00:23:16.740 --> 00:23:20.300
to the first, to the intermediate steps along the way.


00:23:20.300 --> 00:23:21.460
Right, so that's an option.


00:23:21.460 --> 00:23:23.580
And then there's a third one that's more complicated


00:23:23.580 --> 00:23:26.340
about creating like a sort of a ownership management


00:23:26.340 --> 00:23:28.940
type of thing that people can check out as well.


00:23:28.940 --> 00:23:31.740
But I just thought it was interesting to think about,


00:23:31.740 --> 00:23:33.520
how long do these things stick around


00:23:33.520 --> 00:23:35.060
and what techniques might you use


00:23:35.060 --> 00:23:36.840
that are incredibly simple,


00:23:36.840 --> 00:23:40.220
like just reuse the variable name, problem solved,


00:23:40.220 --> 00:23:42.020
in terms of having too much memory usage.


00:23:42.020 --> 00:23:43.040
- Interesting. - Yeah?


00:23:43.040 --> 00:23:45.420
- When I look at these, they all look kind of like the same,


00:23:45.420 --> 00:23:48.920
but having the answer be that they use


00:23:48.920 --> 00:23:50.940
different amounts of memory is not obvious.


00:23:50.940 --> 00:23:52.740
- Right, it's not obvious at all.


00:23:52.740 --> 00:23:54.820
But you could easily look at this one


00:23:54.820 --> 00:23:56.980
where you're iteratively changing the variable and say,


00:23:56.980 --> 00:23:59.100
oh, you shouldn't do that, you should name it more clearly


00:23:59.100 --> 00:24:01.540
'cause maybe the type is changing along the way


00:24:01.540 --> 00:24:02.940
and it would be weird.


00:24:02.940 --> 00:24:06.260
But you could say, yeah, but this one works


00:24:06.260 --> 00:24:08.940
'cause it will fit into RAM and the other one won't.


00:24:08.940 --> 00:24:13.940
So we're willing to accept this like slightly imperfect code


00:24:13.940 --> 00:24:15.300
because it works better.


00:24:15.300 --> 00:24:17.100
Anyway, there's a lot of interesting trade-offs


00:24:17.100 --> 00:24:19.060
you can make here, but I just,


00:24:19.060 --> 00:24:20.300
it's only the tip of the iceberg


00:24:20.300 --> 00:24:22.100
for things like this you could do, I think.


00:24:22.100 --> 00:24:24.980
But it's interesting to just put it on your radar.


00:24:24.980 --> 00:24:27.440
Yeah, that is interesting.


00:24:27.440 --> 00:24:30.300
Yeah, actually, like we said, I think that more and more


00:24:30.300 --> 00:24:33.980
as we start using Python for other applications


00:24:33.980 --> 00:24:36.460
or non-desktop kind of things,


00:24:36.460 --> 00:24:38.220
like when we're in non-server things,


00:24:38.220 --> 00:24:40.960
if we're using it for, there's a couple ends of it.


00:24:40.960 --> 00:24:43.220
If you're using small devices,


00:24:43.220 --> 00:24:45.540
like in CircuitPython or something,


00:24:45.540 --> 00:24:47.180
you're gonna care about this stuff.


00:24:47.180 --> 00:24:50.220
But also if you're using very large datasets,


00:24:50.220 --> 00:24:51.780
then we care about it again.


00:24:51.780 --> 00:24:54.140
And it doesn't matter how much memory


00:24:54.140 --> 00:25:00.140
your computer has, having multiple copies of gigabytes of data when you don't have to will slow things down.


00:25:00.140 --> 00:25:06.140
Yeah, for sure. Or even if it's like an API and you just happen to be doing, it's not that extreme,


00:25:06.140 --> 00:25:10.140
but you happen to be doing a thousand of them at a time. Same story.


00:25:10.140 --> 00:25:16.140
Yeah, exactly. And as we use Python more and more in more applications, we're going to start caring about that again.


00:25:16.140 --> 00:25:17.140
Yeah, absolutely.


00:25:17.140 --> 00:25:19.140
That's the end of our six.


00:25:19.140 --> 00:25:21.980
I actually have been just so swamped with stuff,


00:25:21.980 --> 00:25:24.660
I don't have anything extra to talk about.


00:25:24.660 --> 00:25:25.900
Do you have any extra items?


00:25:25.900 --> 00:25:28.180
- I do, and this is just a follow-up email


00:25:28.180 --> 00:25:30.380
we got from a listener named Adam.


00:25:30.380 --> 00:25:31.380
Thank you, Adam.


00:25:31.380 --> 00:25:34.120
And you had talked about pickling things.


00:25:34.120 --> 00:25:36.200
Apparently you're a fan of dill pickles,


00:25:36.200 --> 00:25:38.780
and, no wait, pickled strings,


00:25:38.780 --> 00:25:41.020
pickled lists, pickled dictionaries.


00:25:41.020 --> 00:25:43.100
No, we were talking about pickling


00:25:43.100 --> 00:25:44.820
and how it didn't make sense most of the time,


00:25:44.820 --> 00:25:46.540
but there might be some use cases,


00:25:46.540 --> 00:25:48.500
and you're like, what might be a use case


00:25:48.500 --> 00:25:49.980
that we really need, right?


00:25:49.980 --> 00:25:53.660
So Adam said, hey, I got a use case that worked for us.


00:25:53.660 --> 00:25:56.380
I worked on an API that spoke to a third party service


00:25:56.380 --> 00:26:00.620
that was wonky and it was over raw sockets.


00:26:00.620 --> 00:26:02.940
So you'd have to create these byte arrays


00:26:02.940 --> 00:26:04.300
and send them along.


00:26:04.300 --> 00:26:07.900
And the thing was also not available 24/7.


00:26:07.900 --> 00:26:09.900
It would sometimes crash, things like that.


00:26:09.900 --> 00:26:12.440
So what they would do is they could set a flag in their app


00:26:12.440 --> 00:26:14.200
and it would pickle all the messages


00:26:14.200 --> 00:26:17.020
that it would have sent.


00:26:17.020 --> 00:26:18.380
And if the site comes back,


00:26:18.380 --> 00:26:20.800
it can like rehydrate those things


00:26:20.800 --> 00:26:21.980
and then ship them along,


00:26:21.980 --> 00:26:24.100
or you could pull them up for debugging


00:26:24.100 --> 00:26:25.680
and look at their details and whatnot.


00:26:25.680 --> 00:26:28.480
So it was like, oh, we got to save this


00:26:28.480 --> 00:26:30.300
exactly as we would have sent it.


00:26:30.300 --> 00:26:31.140
Let's just pickle it.


00:26:31.140 --> 00:26:31.960
- That's pretty cool.


00:26:31.960 --> 00:26:33.300
- Yeah, it seems like a pretty good one.


00:26:33.300 --> 00:26:35.280
And there was a feature flag they could turn on and off,


00:26:35.280 --> 00:26:36.440
which was kind of cool.


00:26:36.440 --> 00:26:37.940
Yeah, they could also do that for the messages


00:26:37.940 --> 00:26:39.080
they got from the service.


00:26:39.080 --> 00:26:39.920
Pretty cool.


00:26:39.920 --> 00:26:42.260
Real quick, Python 384 is out.


00:26:42.260 --> 00:26:45.460
I've already brew upgraded mine, so that's all good.


00:26:45.460 --> 00:26:47.500
And big news, big news.


00:26:47.500 --> 00:26:49.500
I can't believe it, I've been selected.


00:26:49.500 --> 00:26:52.420
I, if I go to my GitHub repo,


00:26:52.420 --> 00:26:53.700
I don't have the cool read me thing


00:26:53.700 --> 00:26:54.620
that you're talking about,


00:26:54.620 --> 00:26:57.980
but under my picture, it says I have a pro account


00:26:57.980 --> 00:26:59.400
'cause I had to pay for some stuff,


00:26:59.400 --> 00:27:03.900
but I noticed that I am an Arctic Code Vault contributor.


00:27:03.900 --> 00:27:06.420
So remember we spoke about the Arctic Code Vault


00:27:06.420 --> 00:27:09.700
where GitHub is taking a bunch of the popular projects


00:27:09.700 --> 00:27:14.700
and then sticking them over in some vault in Norway


00:27:14.700 --> 00:27:18.980
or somewhere like that, Greenland, to preserve it.


00:27:18.980 --> 00:27:21.980
And if the code that you've contributed to GitHub


00:27:21.980 --> 00:27:24.660
was selected, then now you get this cool little highlight


00:27:24.660 --> 00:27:26.020
that's like a snowflake that says


00:27:26.020 --> 00:27:27.240
Arctic Code Vault Contributor,


00:27:27.240 --> 00:27:29.460
and you can hover over it and it'll say why.


00:27:29.460 --> 00:27:32.620
So yeah, I've contributed apparently to a couple of things,


00:27:32.620 --> 00:27:33.780
and you might be as well.


00:27:33.780 --> 00:27:35.860
- Well, yeah, you the listener might,


00:27:35.860 --> 00:27:38.300
but I just checked mine and I am too, so that's neat.


00:27:38.300 --> 00:27:39.140
- Yeah, awesome.


00:27:39.140 --> 00:27:40.440
- Neato.


00:27:40.440 --> 00:27:41.800
- Yeah, so.


00:27:41.800 --> 00:27:43.400
- I think we covered that once.


00:27:43.400 --> 00:27:44.620
The code vault thing.


00:27:44.620 --> 00:27:46.220
- Yeah, we definitely covered the code vault,


00:27:46.220 --> 00:27:48.700
but yeah, I think this you are a contributor thing,


00:27:48.700 --> 00:27:50.260
little badge is new, and I don't know,


00:27:50.260 --> 00:27:52.420
it makes me happier than it probably should.


00:27:52.420 --> 00:27:54.820
(laughing)


00:27:54.820 --> 00:27:56.180
Yes, it's so cool.


00:27:56.180 --> 00:27:59.780
- It's neat. - You know what else is cool?


00:27:59.780 --> 00:28:00.620
Yeah. - Star thing.


00:28:00.620 --> 00:28:02.020
- Yeah, it's super neat.


00:28:02.020 --> 00:28:02.940
Testing is cool.


00:28:02.940 --> 00:28:03.780
- I love testing.


00:28:03.780 --> 00:28:05.900
- And having good code coverage is cool.


00:28:05.900 --> 00:28:07.940
So I've got a joke for you.


00:28:07.940 --> 00:28:09.060
A cartoon, if you will.


00:28:09.060 --> 00:28:11.420
from this place called Geek and Poke.


00:28:11.420 --> 00:28:13.140
They have all sorts of good stuff there.


00:28:13.140 --> 00:28:15.500
And you can click on the picture


00:28:15.500 --> 00:28:18.060
and it'll take you to the actual comic.


00:28:18.060 --> 00:28:19.540
So there's two people,


00:28:19.540 --> 00:28:21.980
a woman developer and a man developer,


00:28:21.980 --> 00:28:23.180
staring at each other.


00:28:23.180 --> 00:28:25.980
And the woman is the more senior one.


00:28:25.980 --> 00:28:27.020
They're looking at each other and it says,


00:28:27.020 --> 00:28:29.220
QA best practices.


00:28:29.220 --> 00:28:31.540
She's looking at the guy and says,


00:28:31.540 --> 00:28:34.220
"Never just remove a failing test."


00:28:34.220 --> 00:28:36.500
The guy stares back blankly for a second.


00:28:36.500 --> 00:28:39.020
Says, "Only remove the assert statements?"


00:28:39.020 --> 00:28:39.860
- Yup.


00:28:39.860 --> 00:28:41.820
(laughing)


00:28:41.820 --> 00:28:45.060
So how does this stay in a decent code coverage?


00:28:45.060 --> 00:28:46.820
- Yeah, you can fix a test.


00:28:46.820 --> 00:28:48.420
You can make a test not fail.


00:28:48.420 --> 00:28:49.740
Remove those hurt statements.


00:28:49.740 --> 00:28:50.580
It's good.


00:28:50.580 --> 00:28:51.400
- Yeah, that's funny.


00:28:51.400 --> 00:28:53.180
You said you actually like test for failure though,


00:28:53.180 --> 00:28:55.380
on yours, that they potentially could fail.


00:28:55.380 --> 00:28:57.980
- Yeah, well, I think that's one of the reasons


00:28:57.980 --> 00:29:00.380
why we do code coverage on all, or not code coverage.


00:29:00.380 --> 00:29:02.300
We do code coverage, but we also do--


00:29:02.300 --> 00:29:03.140
- Code review.


00:29:03.140 --> 00:29:03.960
- What's that word again?


00:29:03.960 --> 00:29:04.800
- Review?


00:29:04.800 --> 00:29:05.620
- Yes, code reviews.


00:29:05.620 --> 00:29:07.000
Yes, we do code reviews on tests


00:29:07.000 --> 00:29:12.000
because we have had tests show up before that exercise.


00:29:12.000 --> 00:29:14.040
We, you know, with test equipment,


00:29:14.040 --> 00:29:15.920
we do a lot of complicated things.


00:29:15.920 --> 00:29:18.200
You set up everything, run some stuff,


00:29:18.200 --> 00:29:20.920
and then we often have people forget


00:29:20.920 --> 00:29:22.680
to check anything at the end.


00:29:22.680 --> 00:29:27.040
And so it is important to look at the end to see,


00:29:27.040 --> 00:29:29.280
is there any way this can actually fail?


00:29:29.280 --> 00:29:31.760
Is it, or is it just exercising things?


00:29:31.760 --> 00:29:35.040
I mean, actually exercising things isn't a bad thing


00:29:35.040 --> 00:29:38.600
because you can get asserts in your code or accept--


00:29:38.600 --> 00:29:40.600
- Or an exception, yeah.


00:29:40.600 --> 00:29:43.200
You still test something, but you're not testing very much.


00:29:43.200 --> 00:29:46.120
- Yeah. (laughs)


00:29:46.120 --> 00:29:48.200
- You're testing it runs, basically.


00:29:48.200 --> 00:29:49.280
- Yeah, so.


00:29:49.280 --> 00:29:51.560
- Awesome, well, yeah, just never remove


00:29:51.560 --> 00:29:53.440
a failing test, only the search statements.


00:29:53.440 --> 00:29:54.440
(Michael laughs)


00:29:54.440 --> 00:29:55.400
- It's terrible.


00:29:55.400 --> 00:29:57.000
We should not give that idea to people.


00:29:57.000 --> 00:29:58.880
- No, we should totally delete this joke.


00:29:58.880 --> 00:30:00.200
It didn't happen, it wasn't funny.


00:30:00.200 --> 00:30:01.760
- Yeah, it wasn't funny.


00:30:01.760 --> 00:30:03.240
Thanks a lot, Michael.


00:30:03.240 --> 00:30:04.880
- Yeah, you bet, great to see you, as always.


00:30:04.880 --> 00:30:06.640
Thank you for listening to Python Bytes.


00:30:06.640 --> 00:30:09.080
Follow the show on Twitter @PythonBytes.


00:30:09.080 --> 00:30:12.160
That's Python Bytes as in B-Y-T-E-S.


00:30:12.160 --> 00:30:15.060
And get the full show notes at pythonbytes.fm.


00:30:15.060 --> 00:30:17.280
If you have a news item you want featured,


00:30:17.280 --> 00:30:20.040
just visit pythonbytes.fm and send it our way.


00:30:20.040 --> 00:30:22.160
We're always on the lookout for sharing something cool.


00:30:22.160 --> 00:30:23.240
This is Brian Okken,


00:30:23.240 --> 00:30:25.320
and on behalf of myself and Michael Kennedy,


00:30:25.320 --> 00:30:27.400
thank you for listening and sharing this podcast


00:30:27.400 --> 00:30:29.040
with your friends and colleagues.

