
00:00:00.000 --> 00:00:05.280
Hey folks, Michael here. Brian and I put together a special podcast episode for the top Python


00:00:05.280 --> 00:00:11.600
stories of 2018. We originally recorded this as a talk Python me episode. That's my other podcast.


00:00:11.600 --> 00:00:16.160
Since it's a perfect match for what we do every week here on this show, Brian and I decided to


00:00:16.160 --> 00:00:21.360
share it with all of you for our end of year countdown on Python bites. We hope you enjoy


00:00:21.360 --> 00:00:26.640
the episode and thank you for making this show so successful in 2018. We promise we'll keep it


00:00:26.640 --> 00:00:29.560
Keep it going strong into 2019.


00:00:29.560 --> 00:00:32.520
Brian, Dan, both of you, welcome back to Talk Python.


00:00:32.520 --> 00:00:33.360
- Thank you.


00:00:33.360 --> 00:00:34.680
- Hey, thanks, great to be back again.


00:00:34.680 --> 00:00:36.160
- Yeah, it's great to have you back as always.


00:00:36.160 --> 00:00:37.740
It's gonna be so much fun.


00:00:37.740 --> 00:00:40.560
And it is time to look back on 2018.


00:00:40.560 --> 00:00:42.840
Can you believe it's the end of 2018?


00:00:42.840 --> 00:00:45.800
I just remembered how to write 2018 and not 2017


00:00:45.800 --> 00:00:47.560
on all the stuff I have to sign.


00:00:47.560 --> 00:00:49.720
- Yeah, it's gone by fast.


00:00:49.720 --> 00:00:53.320
- It definitely has, it definitely has.


00:00:53.320 --> 00:00:54.640
So it's good to have you back.


00:00:54.640 --> 00:00:57.760
we're going to go through what the three of us


00:00:57.760 --> 00:01:01.440
have decided are some of the top stories


00:01:01.440 --> 00:01:03.600
in the Python space for 2018.


00:01:03.600 --> 00:01:05.240
And I just wanna quickly throw out there


00:01:05.240 --> 00:01:06.400
for folks listening,


00:01:06.400 --> 00:01:09.040
this mostly does not include data science stories.


00:01:09.040 --> 00:01:10.160
There's a little bit here and there,


00:01:10.160 --> 00:01:12.320
but it's mostly pure Python.


00:01:12.320 --> 00:01:14.440
And the reason is I'm also doing a show


00:01:14.440 --> 00:01:16.060
on data science year in review.


00:01:16.060 --> 00:01:18.080
So save those big stories for that one.


00:01:18.080 --> 00:01:20.000
Don't wanna overlap.


00:01:20.000 --> 00:01:22.120
All right, well, we're gonna start


00:01:22.120 --> 00:01:24.960
and do a top 10 countdown.


00:01:24.960 --> 00:01:28.760
And we're gonna go from really interesting


00:01:28.760 --> 00:01:31.680
to the absolute big news at the end.


00:01:31.680 --> 00:01:33.600
And you can see what story we have picked


00:01:33.600 --> 00:01:37.640
to be the number one story of 2018 for the Python space.


00:01:37.640 --> 00:01:39.160
Let's do a little warmup here,


00:01:39.160 --> 00:01:40.640
and Dan, I'll let you kick this off.


00:01:40.640 --> 00:01:42.680
What was our number 10 item?


00:01:42.680 --> 00:01:47.000
- Sounds good, so our number 10 is the Python 3.7 release,


00:01:47.000 --> 00:01:48.020
and more specifically,


00:01:48.020 --> 00:01:50.120
the performance optimizations in there.


00:01:50.120 --> 00:01:53.880
And I know you had a really good show on the podcast here


00:01:53.880 --> 00:01:56.840
with Anthony Shaw, where you guys talked about


00:01:56.840 --> 00:01:58.980
some of the changes in 3.7.


00:01:58.980 --> 00:02:02.200
And I just thought that 3.7 should be on this list


00:02:02.200 --> 00:02:04.160
because it was a really, really good release.


00:02:04.160 --> 00:02:06.520
You know, there's a lot of like free performance improvements.


00:02:06.520 --> 00:02:07.920
It's always nice to see that.


00:02:07.920 --> 00:02:11.120
And it's just been awesome to see Python 3


00:02:11.120 --> 00:02:13.640
and see Python 3 specifically get so much love


00:02:13.640 --> 00:02:15.200
and that it's under active development


00:02:15.200 --> 00:02:17.040
and it's making this forward progress.


00:02:17.040 --> 00:02:20.140
And I think it's also the release,


00:02:20.140 --> 00:02:22.660
or I think it was either 3.6 or 3.7,


00:02:22.660 --> 00:02:26.780
where Python 3 is now faster in all of the benchmarks


00:02:26.780 --> 00:02:29.540
than legacy Python, except for startup time.


00:02:29.540 --> 00:02:32.460
So I thought, you know, that's kind of a nice milestone


00:02:32.460 --> 00:02:33.440
for Python 3.


00:02:33.440 --> 00:02:35.500
- I think that's a huge milestone for Python 3.


00:02:35.500 --> 00:02:38.800
I mean, this is sort of the year that the tide has turned


00:02:38.800 --> 00:02:41.020
for Python 3 in a big way.


00:02:41.020 --> 00:02:42.540
I think it was starting to turn before,


00:02:42.540 --> 00:02:46.340
but really this year, I think that's one of the themes.


00:02:46.340 --> 00:02:49.140
And this is a major aspect of it, right?


00:02:49.140 --> 00:02:51.100
That Python 3 is now faster.


00:02:51.100 --> 00:02:53.340
There were always these couple of reasons people say,


00:02:53.340 --> 00:02:54.740
I'm holding out to Python 2.


00:02:54.740 --> 00:02:57.020
You guys with your fancy Python 3


00:02:57.020 --> 00:02:59.660
and your new keywords can just go play


00:02:59.660 --> 00:03:04.080
because my code is faster and faster beats everything, right?


00:03:04.080 --> 00:03:05.020
Well, maybe not.


00:03:05.020 --> 00:03:07.720
- Yeah, well, I mean, faster never really beats everything.


00:03:07.720 --> 00:03:09.660
It's faster development time too.


00:03:09.660 --> 00:03:11.560
And when you have better data structures,


00:03:11.560 --> 00:03:13.300
you can sometimes develop faster.


00:03:13.300 --> 00:03:15.220
However, you're right that a lot of people


00:03:15.220 --> 00:03:18.540
were holding out because of some of the speed.


00:03:18.540 --> 00:03:22.220
And for some applications, that makes sense.


00:03:22.220 --> 00:03:25.460
But yeah, I think 3.7 is definitely faster.


00:03:25.460 --> 00:03:29.020
And the other thing is a lot of people had already,


00:03:29.020 --> 00:03:30.380
some people for some of their projects


00:03:30.380 --> 00:03:33.180
had already switched to Python 3.6.


00:03:33.180 --> 00:03:36.460
And that was probably from 2.7 to 3.6


00:03:36.460 --> 00:03:38.460
was not an easy switch.


00:03:38.460 --> 00:03:41.700
Having a switch from 3.6 to 3.7 be like,


00:03:41.700 --> 00:03:42.820
oh, I don't have to do anything.


00:03:42.820 --> 00:03:44.660
It's just better now.


00:03:44.660 --> 00:03:46.200
That was a nice thing to have.


00:03:46.200 --> 00:03:47.040
- Yeah, that's super nice.


00:03:47.040 --> 00:03:49.080
And I think that's a really great point you raised, Brian,


00:03:49.080 --> 00:03:52.720
that careful what you're optimizing for, right?


00:03:52.720 --> 00:03:54.960
Like if it was really all about speed,


00:03:54.960 --> 00:03:57.880
wouldn't we just be writing assembly code still?


00:03:57.880 --> 00:03:58.720
You know? - Yeah.


00:03:58.720 --> 00:04:02.080
- I bet somebody good at writing assembly


00:04:02.080 --> 00:04:07.040
could crush the performance of Python or a lot of C++,


00:04:07.040 --> 00:04:11.280
but they would release an app, a small app, every 10 years,


00:04:11.280 --> 00:04:12.440
and it would be buggy, right?


00:04:12.440 --> 00:04:16.280
Like there's just, it's not the most important thing.


00:04:16.280 --> 00:04:17.120
That's for sure.


00:04:17.120 --> 00:04:19.360
- One of my favorite examples there is,


00:04:19.360 --> 00:04:21.160
what's this game called?


00:04:21.160 --> 00:04:25.080
It's Rollercoaster Tycoon, which was written by one person


00:04:25.080 --> 00:04:28.580
in Win32x86 assembly.


00:04:28.580 --> 00:04:31.680
It's like 100% assembly code.


00:04:31.680 --> 00:04:35.360
And it's actually an amazing, amazing game.


00:04:35.360 --> 00:04:37.360
And it just blows my mind.


00:04:37.360 --> 00:04:39.920
Like everything was written in assembly language.


00:04:39.920 --> 00:04:41.080
- Wow.


00:04:41.080 --> 00:04:45.200
It probably runs totally smooth on a 286 or something, right?


00:04:45.200 --> 00:04:48.400
Yeah, I think you needed a Pentium or something.


00:04:48.400 --> 00:04:49.320
Pentium.


00:04:49.320 --> 00:04:54.040
Now somebody's working on Python,


00:04:54.040 --> 00:04:57.480
going to need multi-core CPUs and whatnot


00:04:57.480 --> 00:04:59.720
to run at the same performance.


00:04:59.720 --> 00:05:00.380
Yeah, who knows.


00:05:00.380 --> 00:05:03.160
But another interesting thing that's coming out


00:05:03.160 --> 00:05:05.960
is more and more talk about actually compiling Python,


00:05:05.960 --> 00:05:08.000
which I think didn't make the list,


00:05:08.000 --> 00:05:10.000
but it's definitely something that came up.


00:05:10.000 --> 00:05:13.200
Like mypyC, for example, and Cython and whatnot.


00:05:13.200 --> 00:05:14.040
- Yeah, yeah.


00:05:14.040 --> 00:05:16.660
- So if we're gonna release a new library


00:05:16.660 --> 00:05:21.240
or an awesome game like RollerCoaster Tycoon


00:05:21.240 --> 00:05:22.200
or something like that,


00:05:22.200 --> 00:05:25.080
and we were gonna do it in open source,


00:05:25.080 --> 00:05:26.840
probably the main full release


00:05:26.840 --> 00:05:29.160
after it's like totally stable and spent out for a year


00:05:29.160 --> 00:05:33.640
would be like 0.01 or 03,


00:05:33.640 --> 00:05:36.900
maybe an 03, like a 0.12, I don't know,


00:05:36.900 --> 00:05:39.280
something really, really small like that, right?


00:05:39.280 --> 00:05:43.080
And that's been a theme that's gone through


00:05:43.080 --> 00:05:45.300
a lot of open source.


00:05:45.300 --> 00:05:48.160
So I think I'd like to highlight a little bit of shift


00:05:48.160 --> 00:05:50.340
in just the versioning that seems to be happening


00:05:50.340 --> 00:05:52.080
around projects.


00:05:52.080 --> 00:05:54.360
I wanna kick off this part of the conversation


00:05:54.360 --> 00:05:57.480
with talking about Mahmoud Hashemi's project


00:05:57.480 --> 00:05:58.760
called ZeroVer.


00:05:58.760 --> 00:06:00.600
Brian, do you remember covering that on Python Bytes?


00:06:00.600 --> 00:06:03.280
- Yeah, he released it like as an April Fool's thing,


00:06:03.280 --> 00:06:07.000
but it actually highlighted a lot of things


00:06:07.000 --> 00:06:11.800
about different projects that were zero after years.


00:06:11.800 --> 00:06:14.280
- Yeah, so the idea is kind of like I was describing


00:06:14.280 --> 00:06:16.520
at the beginning, like so many projects


00:06:16.520 --> 00:06:19.880
just never even reach version 1.0.


00:06:19.880 --> 00:06:21.880
And in some sense, it doesn't matter.


00:06:21.880 --> 00:06:23.720
Is the version number smaller or bigger?


00:06:23.720 --> 00:06:26.240
That tells you whether you have an older or new one, right?


00:06:26.240 --> 00:06:28.800
So that's fine, but there's a lot of people,


00:06:28.800 --> 00:06:31.640
especially coming from the enterprise space


00:06:31.640 --> 00:06:33.760
or from the commercial software space


00:06:33.760 --> 00:06:36.280
that sees things like 0.20 and go,


00:06:36.280 --> 00:06:38.640
"Oh, that thing's like a super alpha.


00:06:38.640 --> 00:06:41.760
We're gonna stay away from that until it reaches 1.0."


00:06:41.760 --> 00:06:43.720
And I think it has a tangible effect


00:06:43.720 --> 00:06:46.200
on turning off a certain category of folks,


00:06:46.200 --> 00:06:48.720
especially people who are maybe unfamiliar


00:06:48.720 --> 00:06:51.200
with open source and things like that.


00:06:51.200 --> 00:06:53.080
- Yeah, I think definitely.


00:06:53.080 --> 00:06:56.760
I mean, a lot of people do commercial software development


00:06:56.760 --> 00:07:01.480
and like I do, and the zero versions


00:07:01.480 --> 00:07:05.880
are almost always mean the API is in flux.


00:07:05.880 --> 00:07:08.680
you can't trust it, you shouldn't program against it, because


00:07:08.680 --> 00:07:11.880
the developers can change their mind at any time.


00:07:11.880 --> 00:07:15.880
And it isn't until the 1.0 version where we have a stable


00:07:15.880 --> 00:07:18.680
API that people can count on.


00:07:18.680 --> 00:07:21.380
Yeah, and so I think a lot of people perceive it that way, right?


00:07:21.380 --> 00:07:21.880
Yeah.


00:07:21.880 --> 00:07:27.180
It's interesting to consider the version number as part of the user interface


00:07:27.180 --> 00:07:30.980
for an open source project, which makes absolute sense


00:07:30.980 --> 00:07:34.280
because of those effects where people are like, "Yeah, is this really


00:07:34.280 --> 00:07:37.280
ready to go here? Is this an early release or whatever?


00:07:37.280 --> 00:07:40.280
I mean, I'm wondering if it's really going to have a big impact, you know, if people are


00:07:40.280 --> 00:07:43.280
moving to something like dating their releases,


00:07:43.280 --> 00:07:46.280
like just calling them 2018 dot something something


00:07:46.280 --> 00:07:49.280
and you sort of get the November release. But it's


00:07:49.280 --> 00:07:52.280
an interesting experiment for sure. I mean, it definitely looks a little bit nicer


00:07:52.280 --> 00:07:55.280
than, you know, having, I don't know, like somebody put


00:07:55.280 --> 00:07:58.280
Pandas here, which had like 83 releases and


00:07:58.280 --> 00:08:01.280
it's been running, or it's been active for eight years and it's sitting at 0.24


00:08:01.280 --> 00:08:06.280
- .0.dev0. - .dev0.


00:08:06.280 --> 00:08:08.280
(laughing)


00:08:08.280 --> 00:08:11.280
- Nothing wrong with that, but I could see how it turned some people off.


00:08:11.280 --> 00:08:16.280
- I don't know how dev0 means production, but to me that just says,


00:08:16.280 --> 00:08:18.280
"Dude, stay away from this. Don't ship this."


00:08:18.280 --> 00:08:20.280
- That's scary.


00:08:20.280 --> 00:08:24.280
- Yeah, I think maybe the grandfather of 0Ver might be PuTTY,


00:08:24.280 --> 00:08:29.280
that little SSH tool you get for Windows because it doesn't come built in.


00:08:29.280 --> 00:08:34.280
that'll trade app.


00:08:34.280 --> 00:08:36.140
It's 20 years old and it's 0.7.


00:08:36.140 --> 00:08:38.560
One concern that I have with moving to the date-based


00:08:38.560 --> 00:08:41.860
or year-based version numbers is how,


00:08:41.860 --> 00:08:45.320
if you have the semantic versions,


00:08:45.320 --> 00:08:47.220
you can do things like, "Okay, I want,


00:08:47.220 --> 00:08:49.380
give me all the minor patches for this package


00:08:49.380 --> 00:08:51.840
and all the security updates,


00:08:51.840 --> 00:08:52.680
but I don't want to jump to the next major version,


00:08:52.680 --> 00:08:55.300
which maybe has breaking changes in it."


00:08:55.300 --> 00:08:57.820
And I know that's not a perfect system generally,


00:08:54.480 --> 00:08:55.440
want to pin your packages.


00:08:55.440 --> 00:08:57.840
But it's kind of nice to have the ability to do that.


00:08:57.840 --> 00:09:02.440
And who knows what's going to happen in July 2018 or something?


00:09:02.440 --> 00:09:02.960
19.


00:09:02.960 --> 00:09:03.620
Yeah, absolutely.


00:09:03.620 --> 00:09:07.600
So if you look at some of the tools that I know you use and I use,


00:09:07.600 --> 00:09:09.560
for example, I use pyup.io.


00:09:09.560 --> 00:09:11.320
And you use something slightly different.


00:09:11.320 --> 00:09:13.960
But they let you go to your requirements file or your pip file


00:09:13.960 --> 00:09:18.520
and say, I want you to keep this on the latest pin version possible


00:09:18.520 --> 00:09:23.160
with this constraint, where you could say 0.1.star or something like that.


00:09:23.160 --> 00:09:23.640
Right?


00:09:23.640 --> 00:09:25.600
- Right, yeah, but how would that work


00:09:25.600 --> 00:09:28.360
with date-based formats?


00:09:28.360 --> 00:09:30.680
- Exactly, so let's dig into that a little bit.


00:09:30.680 --> 00:09:32.080
So what are the two options?


00:09:32.080 --> 00:09:34.720
I guess the two options are just to start shipping


00:09:34.720 --> 00:09:38.080
full versions, like Django is now Django 2.


00:09:38.080 --> 00:09:41.040
And in Django 2, the main change from 1 to 2


00:09:41.040 --> 00:09:43.360
is we're dropping Python 2 support,


00:09:43.360 --> 00:09:44.400
which is kind of ironic.


00:09:44.400 --> 00:09:46.760
Maybe it should be Django 3, but whatever.


00:09:46.760 --> 00:09:48.520
You know, it indicates a major change


00:09:48.520 --> 00:09:50.640
like you were saying there, right?


00:09:50.640 --> 00:09:52.620
So one of the projects that's switching


00:09:52.620 --> 00:09:56.940
to calendar-based version is Sanic, right?


00:09:56.940 --> 00:09:58.740
The Async Web Framework.


00:09:58.740 --> 00:10:01.840
And what they're doing is they're trying to ship a version,


00:10:01.840 --> 00:10:03.500
a major release every quarter.


00:10:03.500 --> 00:10:08.500
So they might be, you know, 2018.07.0,


00:10:08.500 --> 00:10:12.100
then .1, .2 for like incremental changes.


00:10:12.100 --> 00:10:15.060
But they're also doing LTS releases


00:10:15.060 --> 00:10:17.020
around their calendar version.


00:10:17.020 --> 00:10:19.980
So every December is an LTS version.


00:10:19.980 --> 00:10:24.980
So 2018.12.0 and so on would be supported for a year


00:10:24.980 --> 00:10:27.660
and would be the LTS equivalent,


00:10:27.660 --> 00:10:29.020
the long-term support equivalent,


00:10:29.020 --> 00:10:31.460
if you don't wanna switch to something beyond that.


00:10:31.460 --> 00:10:33.340
That's how that group is handling it.


00:10:33.340 --> 00:10:34.480
- Interesting.


00:10:34.480 --> 00:10:35.320
- Yeah.


00:10:35.320 --> 00:10:36.140
- I kinda like that.


00:10:36.140 --> 00:10:38.420
Then you can glance at a version and,


00:10:38.420 --> 00:10:40.820
I mean, if everybody sort of supports something like that,


00:10:40.820 --> 00:10:42.820
you can glance at all of your versions and go,


00:10:42.820 --> 00:10:45.140
oh, everything's within a year or so,


00:10:45.140 --> 00:10:46.580
so it's probably fine.


00:10:46.580 --> 00:10:48.700
- Exactly, like, Brian, you know a lot about testing.


00:10:48.700 --> 00:10:53.340
If I told you I'm using webtest.2.0.32, is that new?


00:10:53.340 --> 00:10:54.660
Is it super old?


00:10:54.660 --> 00:10:56.340
Is that a beta version?


00:10:56.340 --> 00:10:57.740
Like, what is that, right?


00:10:57.740 --> 00:10:58.700
You don't know.


00:10:58.700 --> 00:11:02.900
But if I told you I was using webtest2019.1.0,


00:11:02.900 --> 00:11:05.980
like, oh, you must be testing the new one that's coming out.


00:11:05.980 --> 00:11:06.580
Or something.


00:11:06.580 --> 00:11:07.900
It just communicates it.


00:11:07.900 --> 00:11:09.100
So Sanic is doing this.


00:11:09.100 --> 00:11:10.300
Pip is doing this.


00:11:10.300 --> 00:11:12.260
And then you threw some others in there, Brian.


00:11:12.260 --> 00:11:12.820
What are these?


00:11:12.820 --> 00:11:13.700
I'm not familiar with them.


00:11:13.700 --> 00:11:15.740
- There's some descriptions of calendar version


00:11:15.740 --> 00:11:17.020
and semantic versioning.


00:11:17.020 --> 00:11:19.100
calvert.org and semvert.org.


00:11:19.100 --> 00:11:20.700
- I love that those are domains.


00:11:20.700 --> 00:11:22.780
(laughing)


00:11:22.780 --> 00:11:25.660
- I think Mahmoud did at least one of them, maybe both.


00:11:25.660 --> 00:11:28.260
- He has his knack for creating these little sites


00:11:28.260 --> 00:11:30.860
and these little projects that just pop out of nowhere.


00:11:30.860 --> 00:11:32.980
- But one of the things I want to point out


00:11:32.980 --> 00:11:36.580
is I was talking with somebody about calendar versioning


00:11:36.580 --> 00:11:39.060
and that versus semantic versioning.


00:11:39.060 --> 00:11:41.900
And one of the things is that the major number,


00:11:41.900 --> 00:11:45.380
whether it's two or three or it's date-based,


00:11:45.380 --> 00:11:49.820
often means you're not going to remove features.


00:11:49.820 --> 00:11:54.180
So you promise not to break customer code within a major version.


00:11:54.180 --> 00:11:58.660
The database says we're at least going to say it's safe for a year.


00:11:58.660 --> 00:11:59.340
>> Yeah.


00:11:59.340 --> 00:12:01.660
>> Whereas semantic versioning,


00:12:01.660 --> 00:12:03.460
a development team can go through


00:12:03.460 --> 00:12:05.220
major versions as fast as they want to,


00:12:05.220 --> 00:12:06.900
if they feel like breaking things fast.


00:12:06.900 --> 00:12:10.340
>> That's true. When you get the feeling to switch


00:12:10.340 --> 00:12:13.620
the major version from two to three or three to four, you just do it, right?


00:12:13.620 --> 00:12:15.180
Yeah, but it has impact.


00:12:15.180 --> 00:12:18.200
So, yeah, I think there's some interest there.


00:12:18.200 --> 00:12:21.300
So I think another thing that was really interesting about the calendar


00:12:21.300 --> 00:12:25.580
versioning that I learned talking to Adam Hopkins from the Sanic project was


00:12:25.580 --> 00:12:30.720
that there's this sense of you need to keep shipping, right?


00:12:30.720 --> 00:12:34.640
Like if you have a calendar version and it's from last year and that's the latest


00:12:34.640 --> 00:12:38.680
version that sends a message in and of itself that this project is, is not


00:12:38.680 --> 00:12:40.320
getting a lot of activity.


00:12:41.040 --> 00:12:47.960
Whereas without it, you know, you kind of got to be more deeply familiar with the project to understand its rate of improvement.


00:12:47.960 --> 00:12:54.080
Yeah, I think even it'd be cool to have people, even if there's not really any changes needed, just to release it and say, hey, we tested it.


00:12:54.080 --> 00:12:58.120
It's this is all been tested on the new versions and you're good to go.


00:12:58.120 --> 00:13:00.480
We updated like the readme file or something.


00:13:00.480 --> 00:13:06.280
Right. Well, there's almost always like some minor little thing that can be can be improved and shipped.


00:13:06.280 --> 00:13:09.880
Right. Another story of 2018.


00:13:09.880 --> 00:13:15.560
and maybe slightly before, but really was coming in strong in 2018 is Python's kind of popular.


00:13:15.560 --> 00:13:23.720
Yeah, so Python's very popular. It's taking over the world. There was a neat Economist article


00:13:23.720 --> 00:13:30.040
that came out, and I guess that's just sort of related to the highlighting a trend. And the


00:13:30.040 --> 00:13:37.080
article was Python has brought computer programming to a vast new audience. But some of the things


00:13:37.080 --> 00:13:43.080
One of the things they point out within there is that right now, according to a Stack Overflow survey,


00:13:43.080 --> 00:13:50.080
40% of professional developers use Python and another 25% wish they did, which is interesting.


00:13:50.080 --> 00:13:52.080
Just go do it, man.


00:13:52.080 --> 00:13:57.080
Also, they interviewed Codecademy, which is an online training site,


00:13:57.080 --> 00:14:01.080
and their biggest increase in demand for 2018 is with Python.


00:14:01.080 --> 00:14:03.080
Yeah, that doesn't surprise me.


00:14:03.080 --> 00:14:06.680
I mean, you think about a very fast-growing technology


00:14:06.680 --> 00:14:09.840
that also has a lot of career possibilities,


00:14:09.840 --> 00:14:12.300
definitely people are gonna be wanting to learn that, right?


00:14:12.300 --> 00:14:14.080
So if you go to somewhere like Code Academy


00:14:14.080 --> 00:14:15.640
or any other online training place,


00:14:15.640 --> 00:14:18.760
like, there's gonna be, unless they're doing something wrong


00:14:18.760 --> 00:14:20.480
there should be a lot of demand for Python.


00:14:20.480 --> 00:14:25.280
- They noted that since 2014, at least from a survey in 2014,


00:14:25.280 --> 00:14:28.320
Python was the most popular intro language


00:14:28.320 --> 00:14:31.480
at American universities, but that was amongst


00:14:31.480 --> 00:14:35.480
people studying sciences or computer science or something, engineering.


00:14:35.480 --> 00:14:41.960
But what we're seeing now in 2018 is the growing movement of people that are not traditionally


00:14:41.960 --> 00:14:46.040
think of themselves as programmers primarily learning Python.


00:14:46.040 --> 00:14:51.880
And we'll see that in data sciences, embedded development is now moving towards Python in


00:14:51.880 --> 00:14:54.120
a lot of maker senses.


00:14:54.120 --> 00:14:58.600
And then also, the article also pointed out that more and more people are just sort of


00:14:58.600 --> 00:15:02.120
worried that all jobs will be taken over by automation.


00:15:02.120 --> 00:15:03.460
So they want to be part of that.


00:15:03.460 --> 00:15:06.400
So in order to learn some automation on your own,


00:15:06.400 --> 00:15:08.400
Python is a good way to be part of that.


00:15:08.400 --> 00:15:11.240
You either control the robots or you get replaced by the robots,


00:15:11.240 --> 00:15:12.760
take your pick, right?


00:15:12.760 --> 00:15:14.920
Yes, exactly.


00:15:14.920 --> 00:15:18.920
Yeah, also to throw in there, I saw this on Nina Sakarenko's


00:15:18.920 --> 00:15:20.120
Twitter feed recently.


00:15:20.120 --> 00:15:22.840
So Python is becoming or has been nominated


00:15:22.840 --> 00:15:25.080
as the official programming language for education


00:15:25.080 --> 00:15:25.640
in France.


00:15:25.640 --> 00:15:28.960
So I think it's going to be part of the high school curriculum


00:15:28.960 --> 00:15:30.320
there, which is--


00:15:30.320 --> 00:15:31.120
that's super cool.


00:15:31.120 --> 00:15:33.040
I think we're seeing the snowball effect,


00:15:33.040 --> 00:15:34.840
where people-- it's really becoming


00:15:34.840 --> 00:15:36.800
the dominating language for beginners


00:15:36.800 --> 00:15:37.880
and educational language.


00:15:37.880 --> 00:15:39.120
And I think that's super cool.


00:15:39.120 --> 00:15:39.880
That is so cool.


00:15:39.880 --> 00:15:42.480
And when I saw that on Nina's post as well, I'm like,


00:15:42.480 --> 00:15:44.560
oh, that is amazing.


00:15:44.560 --> 00:15:46.600
And you know, I've been thinking a lot about this.


00:15:46.600 --> 00:15:50.080
Why is Python both popular as a teaching language


00:15:50.080 --> 00:15:53.040
and popular as a professional programming language?


00:15:53.040 --> 00:15:56.660
like C++ is popular as a professional programming language,


00:15:56.660 --> 00:15:59.880
but they don't suggest that kids start with it, right?


00:15:59.880 --> 00:16:01.000
Things like this.


00:16:01.000 --> 00:16:03.140
I think there's this special balance


00:16:03.140 --> 00:16:05.040
that when the language was created,


00:16:05.040 --> 00:16:07.320
it has this way to get started easily


00:16:07.320 --> 00:16:11.280
and to pull in just the aspects that you want, right?


00:16:11.280 --> 00:16:13.600
So you can start out with not even functions,


00:16:13.600 --> 00:16:14.920
and then like, okay, I need some structure,


00:16:14.920 --> 00:16:16.800
I'm gonna put some functions in here.


00:16:16.800 --> 00:16:18.960
Oh, let's start working with classes


00:16:18.960 --> 00:16:21.800
and things like generators,


00:16:21.800 --> 00:16:23.840
But none of that-- you don't have to understand or use


00:16:23.840 --> 00:16:25.440
or care about that until you're ready.


00:16:25.440 --> 00:16:28.240
So Python has a special ability to start easy and small,


00:16:28.240 --> 00:16:31.200
but expand into professional type of apps.


00:16:31.200 --> 00:16:33.260
Whereas a lot of them are either you're always


00:16:33.260 --> 00:16:36.320
a beginner type of language, or you're always like, yeah,


00:16:36.320 --> 00:16:38.280
that's a void star star, kids.


00:16:38.280 --> 00:16:39.240
Let's talk about that.


00:16:39.240 --> 00:16:41.080
Totally.


00:16:41.080 --> 00:16:44.000
Actually, Mike, I think you called it a full spectrum


00:16:44.000 --> 00:16:49.280
language way back when we did an interview on my blog with you.


00:16:49.280 --> 00:16:51.240
And that just really stuck with me,


00:16:51.240 --> 00:16:53.680
because I think that's so true.


00:16:53.680 --> 00:16:57.360
It's not like you're learning the little turtle logo


00:16:57.360 --> 00:16:59.280
or something like that, where it's like you learn the basics


00:16:59.280 --> 00:17:00.640
of programming, then you're sort of stuck


00:17:00.640 --> 00:17:02.680
and you have to move on and learn something else.


00:17:02.680 --> 00:17:05.440
But no, all the skills you learn working with Python,


00:17:05.440 --> 00:17:07.400
they kind of scale and grow with you.


00:17:07.400 --> 00:17:08.960
And that's just a beautiful thing.


00:17:08.960 --> 00:17:09.560
- It's special.


00:17:09.560 --> 00:17:11.040
There's not many other languages like that.


00:17:11.040 --> 00:17:12.640
- What a time to be alive.


00:17:12.640 --> 00:17:14.520
- It really is an amazing time to be alive.


00:17:14.520 --> 00:17:19.800
Before we go to the next one, let me just tell you all


00:17:19.800 --> 00:17:21.240
about DigitalOcean.


00:17:21.240 --> 00:17:22.560
They're doing all sorts of cool stuff.


00:17:22.560 --> 00:17:24.240
Our infrastructure runs on it.


00:17:24.240 --> 00:17:26.360
Really, really nice and reliable.


00:17:26.360 --> 00:17:28.120
One of the things I want to highlight this time


00:17:28.120 --> 00:17:30.440
is their work with Kubernetes, Docker,


00:17:30.440 --> 00:17:33.320
and coordinating Docker, orchestrating Docker stuff


00:17:33.320 --> 00:17:35.640
with Kubernetes is a big deal these days.


00:17:35.640 --> 00:17:40.000
And so they're launching a new Kubernetes cluster


00:17:40.000 --> 00:17:41.720
over at DigitalOcean.


00:17:41.720 --> 00:17:43.680
So a really nice way to manage and deploy


00:17:43.680 --> 00:17:45.200
your container workloads in the cloud.


00:17:45.200 --> 00:17:48.320
And if you go to pythonbytes.fm/digitalocean


00:17:48.320 --> 00:17:50.440
and you're a new user, you get $100 credit


00:17:50.440 --> 00:17:54.280
to Kubernetes all the way, if you want.


00:17:54.280 --> 00:17:56.560
You can run a lot of Kubernetes for 100 bucks in the cloud.


00:17:56.560 --> 00:17:57.720
So that's pretty awesome.


00:17:57.720 --> 00:17:59.080
- That's, yeah, very cool.


00:17:59.080 --> 00:18:01.880
- Yeah, so check them out, pythonbytes.fm/digitalocean.


00:18:01.880 --> 00:18:03.040
They're big supporters of the show,


00:18:03.040 --> 00:18:05.400
and they keep us going strong each week, don't they?


00:18:05.400 --> 00:18:06.920
- Yeah, I'm very grateful for them.


00:18:06.920 --> 00:18:07.760
- Yep.


00:18:07.760 --> 00:18:12.120
Brian, you touched on that a lot of the growth of Python


00:18:12.120 --> 00:18:16.440
was centered around people who are using Python as a tool,


00:18:16.440 --> 00:18:18.000
maybe not as their identity, right?


00:18:18.000 --> 00:18:20.480
like Python developers, like, "Oh, I'm a Python developer,"


00:18:20.480 --> 00:18:22.520
but other people are just using Python,


00:18:22.520 --> 00:18:25.560
maybe for data science or things like that.


00:18:25.560 --> 00:18:29.920
And so number seven in our list is that,


00:18:29.920 --> 00:18:32.340
I'm gonna declare 2018 as the year


00:18:32.340 --> 00:18:35.280
that the number of data scientists


00:18:35.280 --> 00:18:39.040
have come to equal the number of web developers in Python,


00:18:39.040 --> 00:18:42.440
for professional Python developers, or users, let's say.


00:18:42.440 --> 00:18:44.720
- Okay, you're gonna have to back that up a little bit.


00:18:44.720 --> 00:18:47.880
- All right, so there was a really cool survey


00:18:47.880 --> 00:18:51.040
done by the PSF in conjunction with JetBrains.


00:18:51.040 --> 00:18:54.080
So JetBrains did the infrastructure


00:18:54.080 --> 00:18:57.040
for sort of analyzing it and hosting it and so on,


00:18:57.040 --> 00:18:59.780
but it was promoted just through the PSF


00:18:59.780 --> 00:19:01.240
and other public sources.


00:19:01.240 --> 00:19:03.120
So it's not like tied to JetBrains,


00:19:03.120 --> 00:19:04.960
but they did this really great survey


00:19:04.960 --> 00:19:07.480
and it's called the Python Developer Survey 2017,


00:19:07.480 --> 00:19:10.120
which might sound like I'm wrong in my year


00:19:10.120 --> 00:19:11.880
and sort of I am, but this is at the very end.


00:19:11.880 --> 00:19:14.200
This is like November, December,


00:19:14.200 --> 00:19:16.360
or something like that of 2017.


00:19:16.360 --> 00:19:18.400
And so it's pretty much there.


00:19:18.400 --> 00:19:21.880
And they did a bunch of interesting, they asked a bunch of interesting questions and


00:19:21.880 --> 00:19:23.240
they found out a lot of things.


00:19:23.240 --> 00:19:28.940
Like for example, four out of five Python developers use Python as their main language.


00:19:28.940 --> 00:19:33.660
So when you see people are using Python, mostly they're using that as their main language.


00:19:33.660 --> 00:19:38.060
It's not like, well, I write in C, but I also have this script that like compiles it in


00:19:38.060 --> 00:19:39.640
Python or some weird thing like that.


00:19:39.640 --> 00:19:40.640
Right?


00:19:40.640 --> 00:19:43.780
So the majority of people using Python use it as their main language.


00:19:43.780 --> 00:19:45.660
And that's, that's pretty interesting.


00:19:45.660 --> 00:19:50.660
But the thing that I want to point out is they said, for, you know, what do you use


00:19:50.660 --> 00:19:52.380
Python for?


00:19:52.380 --> 00:19:57.200
And if you pick where Python is main versus where Python is secondary, you get slightly


00:19:57.200 --> 00:19:58.340
different answers.


00:19:58.340 --> 00:20:05.060
But generally it says for data analysis and data science, 50% of the people use it for


00:20:05.060 --> 00:20:08.300
that and 49% of the people use it for web development.


00:20:08.300 --> 00:20:12.540
And then there's a whole bunch of other areas that like, you know, it's a multiple answer


00:20:12.540 --> 00:20:13.540
type of thing.


00:20:13.540 --> 00:20:15.260
So they've also checked those off.


00:20:15.260 --> 00:20:21.580
But in this survey, basically they said 50% of the people said data analysis 49, web development.


00:20:21.580 --> 00:20:22.980
Does that surprise you guys?


00:20:22.980 --> 00:20:23.980
>> No, not really.


00:20:23.980 --> 00:20:26.660
>> [LAUGH] >> I think it surprised me.


00:20:26.660 --> 00:20:28.740
I know there's a lot of data scientists.


00:20:28.740 --> 00:20:35.660
I feel like on a web development team, there's more participants than on a data analysis


00:20:35.660 --> 00:20:36.660
team.


00:20:36.660 --> 00:20:40.620
I feel like data analysis is often done by a smaller group of people than like the 30


00:20:40.620 --> 00:20:42.820
people that maintain the website or whatever, right?


00:20:42.820 --> 00:20:43.820
That was my conception.


00:20:43.820 --> 00:20:48.020
I don't know if that's accurate, but apparently no.


00:20:48.020 --> 00:20:53.940
Either there's even more data scientists than I guess, or there's larger teams of data scientists


00:20:53.940 --> 00:20:55.960
and smaller teams of web developers.


00:20:55.960 --> 00:20:57.160
So this is all interesting.


00:20:57.160 --> 00:21:02.180
Another thing that I thought was pretty interesting around this is they asked people to guess


00:21:02.180 --> 00:21:05.820
that ratio in this survey.


00:21:05.820 --> 00:21:09.500
And they gave them like five choices, four choices, something like that.


00:21:09.500 --> 00:21:11.780
And they said, "What do you think the ratio is?


00:21:11.780 --> 00:21:13.380
times the number of web developers


00:21:13.380 --> 00:21:17.380
to every data scientist, one to one, maybe worse,


00:21:17.380 --> 00:21:19.100
like 10 to one, I can't remember.


00:21:19.100 --> 00:21:22.140
But when they asked that question to the group, half


00:21:22.140 --> 00:21:24.580
of whom were data scientists and half of whom


00:21:24.580 --> 00:21:27.100
were web developers based on the original question,


00:21:27.100 --> 00:21:30.540
the responses they got was only 10% of the people


00:21:30.540 --> 00:21:33.340
got it right, 20%.


00:21:33.340 --> 00:21:37.980
And most thought that it was five to one,


00:21:37.980 --> 00:21:41.580
five times web developers to one data scientist.


00:21:41.580 --> 00:21:45.140
So I think the general perception is there's more stuff happening on the web


00:21:45.140 --> 00:21:47.180
around Python than there are data scientists.


00:21:47.180 --> 00:21:52.460
But I think also what the most surprising thing to me when I saw that result was


00:21:52.460 --> 00:21:56.420
half of the people that answered that question were data scientists, you know?


00:21:56.420 --> 00:22:00.780
And so to me, my interpretation is that means that a lot of the data scientists


00:22:00.780 --> 00:22:06.180
feel like they're not as big of a representative group of the community as


00:22:06.180 --> 00:22:06.580
they are.


00:22:06.580 --> 00:22:10.340
They feel like, oh, we're like 20% of the community, but in fact, they're like half.


00:22:10.900 --> 00:22:12.900
And I don't know why that is, but I think it's interesting.


00:22:12.900 --> 00:22:13.900
It is interesting.


00:22:13.900 --> 00:22:18.740
Well, there's definitely like a, if you look at the hype around different packages, for


00:22:18.740 --> 00:22:25.860
instance, there's more packages that are web related than there are data science related.


00:22:25.860 --> 00:22:30.900
Mostly I think because a lot of the data science tools have been bundled into these large groups


00:22:30.900 --> 00:22:31.900
of tools, even though...


00:22:31.900 --> 00:22:32.900
Right, like Scikit.


00:22:32.900 --> 00:22:33.900
Yeah.


00:22:33.900 --> 00:22:34.900
Yeah.


00:22:34.900 --> 00:22:37.060
So they have like a common set of things that they work.


00:22:37.060 --> 00:22:42.060
Data scientists like to all use a handful of different tool chains,


00:22:42.060 --> 00:22:46.060
whereas web developers like to go off and create their own asynchronous library.


00:22:46.060 --> 00:22:50.060
Yeah, everyone's got their own library to match their new JavaScript library.


00:22:50.060 --> 00:22:55.060
I wonder if the Anaconda distribution and things like that also play into that feeling.


00:22:55.060 --> 00:22:57.060
You just install it and you just have the tools.


00:22:57.060 --> 00:23:01.060
You don't necessarily go and hunt for every little library as much.


00:23:01.060 --> 00:23:05.060
This sort of reminds me of, who coined that term, Scott Hanselman, I think?


00:23:05.060 --> 00:23:05.560
I think?


00:23:05.560 --> 00:23:07.680
The concept of the dark matter developer?


00:23:07.680 --> 00:23:09.100
Yes, I was thinking that too.


00:23:09.100 --> 00:23:09.700
Yeah, yeah.


00:23:09.700 --> 00:23:11.320
I think you actually told me about it.


00:23:11.320 --> 00:23:13.180
So I guess the idea is that there's


00:23:13.180 --> 00:23:16.920
a large segment of the programming population,


00:23:16.920 --> 00:23:20.500
or people who program for-- even for a living sometimes--


00:23:20.500 --> 00:23:23.660
that are just not visible in the community.


00:23:23.660 --> 00:23:26.820
They get their work done, and it's just not-- maybe


00:23:26.820 --> 00:23:28.340
they don't identify as a programmer,


00:23:28.340 --> 00:23:30.500
or it's not just something-- it's just not something


00:23:30.500 --> 00:23:33.380
that they do publicly, or have like side projects,


00:23:33.380 --> 00:23:34.220
and stuff like that.


00:23:34.220 --> 00:23:35.180
- What's wrong with that?


00:23:35.180 --> 00:23:38.780
- Yeah, and most people, they don't go to conferences


00:23:38.780 --> 00:23:41.100
or go on social media and go crazy about their job.


00:23:41.100 --> 00:23:44.160
Like if I was a barista, nothing wrong with that,


00:23:44.160 --> 00:23:46.360
but I probably wouldn't go to barista conferences


00:23:46.360 --> 00:23:50.300
and go to barista meetups and talk about being a barista


00:23:50.300 --> 00:23:51.640
on social media very much, right?


00:23:51.640 --> 00:23:52.480
Like it just--


00:23:52.480 --> 00:23:53.580
- Start a podcast about barista things.


00:23:53.580 --> 00:23:55.620
- Yeah, you actually write some awesome stories


00:23:55.620 --> 00:23:56.580
if you did that.


00:23:56.580 --> 00:23:57.900
- Make coffee for me.


00:23:57.900 --> 00:24:00.660
(laughing)


00:24:00.660 --> 00:24:02.220
- Hey, anyone out there listening, go for it.


00:24:02.220 --> 00:24:03.300
That's all you.


00:24:03.300 --> 00:24:04.960
- I'm gonna get that though. - I would listen to that.


00:24:04.960 --> 00:24:07.800
I think there's a lot, a huge number of companies


00:24:07.800 --> 00:24:11.240
that have one data scientist or data analyst


00:24:11.240 --> 00:24:14.440
in their company, and so they feel outnumbered


00:24:14.440 --> 00:24:16.640
because they're the only one in their company.


00:24:16.640 --> 00:24:19.900
Or there's like, the ratio is very much skewed


00:24:19.900 --> 00:24:22.280
within their company, but they're kind of all over the place.


00:24:22.280 --> 00:24:23.520
- Yeah, yeah, I totally agree.


00:24:23.520 --> 00:24:26.160
And I do think there's a little bit of this dark matter


00:24:26.160 --> 00:24:27.840
stuff possibly happening here.


00:24:27.840 --> 00:24:29.840
Maybe you're not allowed to talk about your analysis


00:24:29.840 --> 00:24:31.720
that you're doing, so you just don't.


00:24:31.720 --> 00:24:34.560
Maybe you've backed into becoming this data scientist,


00:24:34.560 --> 00:24:37.640
business sort of analyst type person.


00:24:37.640 --> 00:24:39.440
You started out as like a trader,


00:24:39.440 --> 00:24:42.280
and then you kind of were the person that had enough code


00:24:42.280 --> 00:24:44.880
to figure out how to do the overall reporting


00:24:44.880 --> 00:24:46.160
and analysis and whatnot.


00:24:46.160 --> 00:24:49.260
And you still don't think of yourself as a developer,


00:24:49.260 --> 00:24:50.480
but you effectively are, right?


00:24:50.480 --> 00:24:51.320
So I don't know.


00:24:51.320 --> 00:24:53.360
I think there's a lot of interesting angles here.


00:24:53.360 --> 00:24:54.680
- Yeah, also I was just thinking,


00:24:54.680 --> 00:24:58.080
a lot more secrecy maybe in those areas.


00:24:58.080 --> 00:25:00.200
If you're working on some state of the art


00:25:00.200 --> 00:25:02.520
machine learning thing, I don't know, self-driving cars


00:25:02.520 --> 00:25:04.280
or whatever, maybe you don't necessarily


00:25:04.280 --> 00:25:07.040
want to go out there and share with the world what you just


00:25:07.040 --> 00:25:07.520
did.


00:25:07.520 --> 00:25:09.040
Whereas in the web development work,


00:25:09.040 --> 00:25:10.520
I feel like we're sort of--


00:25:10.520 --> 00:25:12.320
we figured most of it out.


00:25:12.320 --> 00:25:14.200
And so people are more willing, I think,


00:25:14.200 --> 00:25:16.880
to share what they're working on.


00:25:16.880 --> 00:25:18.480
At least that's the impression I got.


00:25:18.480 --> 00:25:19.360
And often it's-- yeah, I agree.


00:25:19.360 --> 00:25:21.160
And it's on the web already.


00:25:21.160 --> 00:25:23.920
Whereas if you're working on the Apple self-driving car,


00:25:23.920 --> 00:25:25.880
you can't even acknowledge its existence.


00:25:25.880 --> 00:25:27.960
You're like working for the CIA.


00:25:27.960 --> 00:25:29.560
Yeah, I work for the State Department.


00:25:29.560 --> 00:25:43.560
So anyway, if you want to dig into more of this, I had Eva Jelowowska and Dmitry Filipov on, they're the two folks who did this and they printed it in a PyCon, so on Talk Python 176.


00:25:43.560 --> 00:25:46.560
Item number six, Brian, what do we got?


00:25:46.560 --> 00:25:50.560
We have a darkening of the community. This is a very dark topic.


00:25:50.560 --> 00:25:53.560
It is a little dark, but kind of in a good way.


00:25:53.560 --> 00:26:19.560
Black is taking over. Black is, there's, and not in a bad way. So the project Black is a code formatter that just sort of formats all your code for you. And, and it like Pepe and some of those Flake 8 and stuff tools were to tell you where places where you might want to look at your code and change it. Whereas Black is, yeah, I'm not, I can tell you if you want me to tell you, but I'll just go ahead and change it.


00:26:19.560 --> 00:26:20.560
That's awesome.


00:26:20.560 --> 00:26:23.560
sort of taking, there's a lot of projects around the web


00:26:23.560 --> 00:26:28.560
or around Python that are picking it up and using it as their standard.


00:26:28.560 --> 00:26:33.560
And I think it's been definitely very interesting in 2018 watching this happen.


00:26:33.560 --> 00:26:34.560
I love that tool.


00:26:34.560 --> 00:26:36.560
So it's so good, like especially if you,


00:26:36.560 --> 00:26:40.560
if it's a community project, you're working on a project with several developers,


00:26:40.560 --> 00:26:43.560
and it's just so easy to standardize everything,


00:26:43.560 --> 00:26:47.560
and you don't have to have the back and forth conversations of defining your own code style.


00:26:47.560 --> 00:26:52.220
And I mean, assuming you like the output that Black produces, which I personally


00:26:52.220 --> 00:26:55.480
really like, and it's, it's been super helpful for real Python.


00:26:55.480 --> 00:26:58.960
We have like an materials repository with some sample projects.


00:26:58.960 --> 00:27:02.080
So like every single folder in there was created by a different


00:27:02.080 --> 00:27:03.020
person, by different author.


00:27:03.020 --> 00:27:06.240
And so I went down that, that route of like, okay, we're going to define


00:27:06.240 --> 00:27:09.200
like a beautiful code style and then tell people how to format everything


00:27:09.200 --> 00:27:10.760
and make sure it's sort of adhere to.


00:27:10.760 --> 00:27:12.580
And that's really, really hard to do.


00:27:12.580 --> 00:27:15.740
And so I just ran black on the whole thing, set it up on CI.


00:27:15.740 --> 00:27:17.980
So it'll check the formatting.


00:27:17.980 --> 00:27:18.880
Problem solved.


00:27:18.880 --> 00:27:21.320
And it took 15, 20 minutes to do that.


00:27:21.320 --> 00:27:22.480
So, yeah.


00:27:22.480 --> 00:27:24.320
But what a lifesaver. Such a great tool.


00:27:24.320 --> 00:27:25.620
So a couple of things about it.


00:27:25.620 --> 00:27:30.380
It's taken, it's one of the things that takes things like style and format


00:27:30.380 --> 00:27:32.580
and stuff like that and takes those out of code reviews.


00:27:32.580 --> 00:27:36.920
And so code reviews can just be focused on algorithm and design


00:27:36.920 --> 00:27:41.140
and not on whether you use single quotes or double quotes or something.


00:27:41.140 --> 00:27:44.240
The other thing is Black shows an example.


00:27:44.240 --> 00:27:50.960
it has part of it is a pre-commit hook so that you can add a black pre-commit hook to your code.


00:27:50.960 --> 00:27:56.160
So everybody just as they're checking it in will have black run on their code.


00:27:56.160 --> 00:27:59.520
And that highlighted the pre-commit tool for me.


00:27:59.520 --> 00:28:02.960
And I think pre-commit is being used more and more because of black using it.


00:28:02.960 --> 00:28:05.360
Yeah, I've heard that more than once. That's pretty awesome.


00:28:05.360 --> 00:28:08.640
You're like, wait, what's a pre-commit hook? That thing exists in Git?


00:28:08.640 --> 00:28:10.320
Yeah, definitely.


00:28:10.320 --> 00:28:11.240
Nice.


00:28:11.240 --> 00:28:15.120
I like the slogan, you can have it in any color you like,


00:28:15.120 --> 00:28:16.400
as long as you want it in black.


00:28:16.400 --> 00:28:18.120
Yeah, I didn't know that that was from Henry Ford


00:28:18.120 --> 00:28:20.560
until somebody told me about Henry Ford saying that


00:28:20.560 --> 00:28:21.480
about the Model T.


00:28:21.480 --> 00:28:23.560
Does it have a theme song, or what's going on here?


00:28:23.560 --> 00:28:25.300
Oh, well, every time I use black,


00:28:25.300 --> 00:28:28.040
I hear Black Hole Sun from Soundgarden.


00:28:28.040 --> 00:28:31.520
So I went ahead and just mentioned that in the R notes.


00:28:31.520 --> 00:28:32.560
Black Hole Sun is--


00:28:32.560 --> 00:28:34.520
Soundgarden was such a good band.


00:28:34.520 --> 00:28:36.800
They really came from a special era of music.


00:28:36.800 --> 00:28:40.600
Like we had them, Pearl Jam, Alice in Chains,


00:28:40.600 --> 00:28:42.620
Dinosaur Jr., like there's a lot of good stuff back there.


00:28:42.620 --> 00:28:44.380
But this is the only one that seems to be making it


00:28:44.380 --> 00:28:46.160
to a Python package, so way to go.


00:28:46.160 --> 00:28:48.580
(Dan laughs)


00:28:48.580 --> 00:28:52.080
All right, Dan, for item number five,


00:28:52.080 --> 00:28:54.720
I feel like for a really long time it was like,


00:28:54.720 --> 00:28:59.720
well, pypi.python.org/pypi is a little bit out of date


00:28:59.720 --> 00:29:02.500
and a little bit crummy, but we're working on it


00:29:02.500 --> 00:29:05.120
and it just, it seemed to be in this like stasis


00:29:05.120 --> 00:29:08.960
of like half improved forever, but not anymore, right?


00:29:08.960 --> 00:29:12.200
- Yeah, the new PyPI, new Python packaging index


00:29:12.200 --> 00:29:15.720
went live this year and what an amazing improvement.


00:29:15.720 --> 00:29:17.840
I mean, like, you know, throughout the whole project


00:29:17.840 --> 00:29:20.080
and I know you had a really, really great show


00:29:20.080 --> 00:29:21.560
where you interviewed, you know, a bunch of people


00:29:21.560 --> 00:29:23.800
working on that transition and launching the new


00:29:23.800 --> 00:29:26.080
and improved PyPI and it's just crazy, you know,


00:29:26.080 --> 00:29:28.980
like throughout the whole thing, it's been like rewritten


00:29:28.980 --> 00:29:30.760
from the ground up the way I understand it.


00:29:30.760 --> 00:29:32.400
It's new hosting infrastructure


00:29:32.400 --> 00:29:35.520
And it's much more friendly now for new contributors.


00:29:35.520 --> 00:29:39.800
Beforehand, I think it was sort of like a home-grown web


00:29:39.800 --> 00:29:43.240
framework, because, well, it was that old IPO


00:29:43.240 --> 00:29:44.920
was created before web frameworks really


00:29:44.920 --> 00:29:45.880
were a thing in Python.


00:29:45.880 --> 00:29:46.780
Here's the socket.


00:29:46.780 --> 00:29:47.720
Let's start with that.


00:29:47.720 --> 00:29:48.920
Like, wait, wait, wait, wait.


00:29:48.920 --> 00:29:50.000
What?


00:29:50.000 --> 00:29:52.360
And so, yeah, I just love it.


00:29:52.360 --> 00:29:54.240
Every time I'm searching for a package now,


00:29:54.240 --> 00:29:55.760
it just looks so much better.


00:29:55.760 --> 00:29:58.480
It looks good.


00:29:58.480 --> 00:30:00.600
when you compare it with JavaScript,


00:30:00.600 --> 00:30:04.280
like the Node.js world and NPM, I felt like, yeah,


00:30:04.280 --> 00:30:06.320
that was the gold standard for a while


00:30:06.320 --> 00:30:09.440
for what an online package repository should look like


00:30:09.440 --> 00:30:10.920
and the features it should have.


00:30:10.920 --> 00:30:13.640
And I feel like PyPI is now playing in that league.


00:30:13.640 --> 00:30:15.520
And it's super nice.


00:30:15.520 --> 00:30:16.960
- I think it is super nice as well.


00:30:16.960 --> 00:30:20.600
And it's silly to say that it matters that it looks good


00:30:20.600 --> 00:30:22.280
because it's just pip install a thing.


00:30:22.280 --> 00:30:25.360
But I think it really communicates a message


00:30:25.360 --> 00:30:27.960
to people who come into Python


00:30:27.960 --> 00:30:29.940
or are using Python, but especially people who are new


00:30:29.940 --> 00:30:31.580
and they're like, oh, what is this stuff?


00:30:31.580 --> 00:30:32.700
Oh, there's a package injection.


00:30:32.700 --> 00:30:34.740
Like, whoa, that thing is like from the 90s.


00:30:34.740 --> 00:30:35.640
What is that, right?


00:30:35.640 --> 00:30:38.060
Like that, I mean, that communicates something


00:30:38.060 --> 00:30:41.000
about how much the community cares for,


00:30:41.000 --> 00:30:42.200
for that kind of stuff, right?


00:30:42.200 --> 00:30:43.900
- Yeah, they also rolled that over


00:30:43.900 --> 00:30:46.740
with like everybody in the world using it


00:30:46.740 --> 00:30:48.660
and very little hiccups.


00:30:48.660 --> 00:30:50.140
- Yeah, it definitely is.


00:30:50.140 --> 00:30:50.980
- Really impressive.


00:30:50.980 --> 00:30:51.800
- Yeah, it's super impressive.


00:30:51.800 --> 00:30:53.980
So a couple of interesting notes here.


00:30:53.980 --> 00:30:57.140
When they rolled it out first, it was pypi.io.


00:30:57.140 --> 00:31:00.580
And I thought, oh, they're just being part of this hip new .io.


00:31:00.580 --> 00:31:05.420
You know, it's like the .ly of yesteryear, you know?


00:31:05.420 --> 00:31:09.740
It's like Libya all of a sudden became a super awesome place


00:31:09.740 --> 00:31:12.340
to have your domain name because it had ly in the end.


00:31:12.340 --> 00:31:14.500
And so io, right, is super popular now.


00:31:14.500 --> 00:31:16.700
But now it's pypi.org.


00:31:16.700 --> 00:31:21.300
And the story is the pypi.org was owned by somebody else.


00:31:21.300 --> 00:31:24.580
And it took a long time for the PSF to get it from them.


00:31:24.580 --> 00:31:27.340
whereas they could go and buy pypi.io.


00:31:27.340 --> 00:31:30.620
So that was like an intermediate step in the whole rollout.


00:31:30.620 --> 00:31:34.060
- Yeah, some of the nasty details of web development.


00:31:34.060 --> 00:31:35.140
- Exactly.


00:31:35.140 --> 00:31:36.260
And then the other one is,


00:31:36.260 --> 00:31:37.940
this is a pretty interesting example


00:31:37.940 --> 00:31:40.540
of a popular Pyramid web app, right?


00:31:40.540 --> 00:31:42.740
They started out in Flask and actually said,


00:31:42.740 --> 00:31:43.820
no, we'd rather go with Pyramid,


00:31:43.820 --> 00:31:46.740
which I thought was a pretty interesting choice,


00:31:46.740 --> 00:31:48.460
being a fan of Pyramid myself.


00:31:48.460 --> 00:31:50.340
And then Brian, finally Markdown, right?


00:31:50.340 --> 00:31:53.980
- Yeah, so the old PyPI did not support Readme,


00:31:53.980 --> 00:31:58.980
It would only was readme.rsl or something.


00:31:58.980 --> 00:32:00.980
Yeah, rst.


00:32:00.980 --> 00:32:02.980
Yeah, rst.


00:32:02.980 --> 00:32:05.980
So I try to avoid restructured text as much as I can.


00:32:05.980 --> 00:32:07.980
No offense to everybody that loves it.


00:32:07.980 --> 00:32:08.980
I do.


00:32:08.980 --> 00:32:10.980
It's like Markdown, but it's broken.


00:32:10.980 --> 00:32:13.980
The stuff you put in there doesn't quite work.


00:32:13.980 --> 00:32:14.980
Just kidding.


00:32:14.980 --> 00:32:15.980
Don't comment.


00:32:15.980 --> 00:32:16.980
Just kidding.


00:32:16.980 --> 00:32:20.980
I'm just saying that Markdown stuff doesn't always work in there.


00:32:20.980 --> 00:32:23.740
All right, number four, item number four, Brian, what we got?


00:32:23.740 --> 00:32:25.740
You touched on this a little bit before.


00:32:25.740 --> 00:32:27.860
Yeah, I think it's been fun to watch.


00:32:27.860 --> 00:32:31.220
It was unexpected, the rise of Python in the embedded world.


00:32:31.220 --> 00:32:35.380
We actually did a segment on this in on Python bytes,


00:32:35.380 --> 00:32:39.580
but there's so many in partly from the maker movement


00:32:39.580 --> 00:32:43.900
and and a lot of people trying to get into controlling their not just their computers,


00:32:43.900 --> 00:32:48.060
but their world with the Internet of Things and also just playing with,


00:32:48.060 --> 00:32:52.560
you know, adding lights to your bicycle and things like that with microcontrollers and hardware hacking.


00:32:52.560 --> 00:32:59.560
Adafruit's been a big part of that, of pushing it, but there's a lot of projects around Python and embedded.


00:32:59.560 --> 00:33:08.060
MicroPython is one of those, and MicroPython's being used by both hobbyists and serious developers.


00:33:08.060 --> 00:33:13.360
Hobbyists are serious developers too, but I think some companies are using MicroPython as well.


00:33:13.360 --> 00:33:16.960
Adafruit has its own version of this called CircuitPython.


00:33:16.960 --> 00:33:20.300
Actually, I don't know if it's related to MicroPython or not,


00:33:20.300 --> 00:33:22.340
but it is for the CircuitPython.


00:33:22.340 --> 00:33:28.840
And then MicroBit is a Python base for the MicroBit processor.


00:33:28.840 --> 00:33:34.360
And then we even have Mew, which is an editor that directly interacts


00:33:34.360 --> 00:33:36.560
with microcontrollers running Python.


00:33:36.560 --> 00:33:38.860
It's been pretty fun to watch this year.


00:33:38.860 --> 00:33:43.340
I really think the rights of IoT and Python is just taking root now.


00:33:43.340 --> 00:33:46.500
And MicroPython is so interesting to me.


00:33:46.500 --> 00:33:48.940
I mean, the fact that I can take a Lambda expression


00:33:48.940 --> 00:33:50.460
and tie it to a hardware interrupt


00:33:50.460 --> 00:33:53.780
just like never ceases to amaze me, you know?


00:33:53.780 --> 00:33:55.220
- Yeah, that's really cool.


00:33:55.220 --> 00:33:57.020
And so, and a lot of this is because


00:33:57.020 --> 00:33:59.100
somebody wants to learn electronics or something,


00:33:59.100 --> 00:34:01.060
but they also wanna make it do things.


00:34:01.060 --> 00:34:02.940
So you have to learn a programming language.


00:34:02.940 --> 00:34:06.220
And it used to be we taught people C.


00:34:06.220 --> 00:34:09.780
And like the barrier to entry for C is huge.


00:34:09.780 --> 00:34:12.620
Having Python be able to do that is wonderful.


00:34:12.620 --> 00:34:13.500
- Yeah, it is.


00:34:13.500 --> 00:34:15.100
So you talk of the IoT stuff.


00:34:15.100 --> 00:34:18.700
I learned of something from Matt McKay recently on an episode.


00:34:18.700 --> 00:34:21.180
And I want to share this with you and just see what you think.


00:34:21.180 --> 00:34:23.260
So you guys, click on this link here.


00:34:23.260 --> 00:34:27.540
So here's an IoT device using Python.


00:34:27.540 --> 00:34:30.300
And the idea is-- the title of the article,


00:34:30.300 --> 00:34:33.140
this is on the Twilio blog, it's how I potty train my kids using


00:34:33.140 --> 00:34:37.700
Twilio in an AWS IoT button.


00:34:37.700 --> 00:34:40.780
So it's a little button like those Amazon Dash buttons.


00:34:40.780 --> 00:34:43.060
And he put it near his son's bed.


00:34:43.060 --> 00:34:44.980
And apparently there are kids sharing the room.


00:34:44.980 --> 00:34:48.100
I wanted to make sure he didn't wake up and make a lot of noise


00:34:48.100 --> 00:34:48.940
and wake up the other kids.


00:34:48.940 --> 00:34:51.540
So he put this button that basically has a poop emoji.


00:34:51.540 --> 00:34:54.020
And you click it, and it says, I gotta go.


00:34:54.020 --> 00:34:56.780
And the parents would come in and help out the kid


00:34:56.780 --> 00:34:57.820
while he was learning.


00:34:57.820 --> 00:35:01.980
And this is written using the Python API on AWS Lambda


00:35:01.980 --> 00:35:02.780
and stuff like that.


00:35:02.780 --> 00:35:04.980
So yeah, the rise of Python in IoT.


00:35:04.980 --> 00:35:08.700
So Q4, 10 years, and his kids are like, dad,


00:35:08.700 --> 00:35:11.580
did you have to put that on the internet?


00:35:11.580 --> 00:35:12.420
This is awesome.


00:35:12.420 --> 00:35:12.920
I love it.


00:35:12.920 --> 00:35:14.340
Exactly.


00:35:14.340 --> 00:35:15.620
- Yeah. - This is great.


00:35:15.620 --> 00:35:16.820
- Isn't this funny?


00:35:16.820 --> 00:35:18.980
So yeah, I mean funny and like and amusing,


00:35:18.980 --> 00:35:21.700
but also like actually that's kind of helpful.


00:35:21.700 --> 00:35:24.320
Like I can see how that would be helpful as a parent.


00:35:24.320 --> 00:35:26.580
'Cause you definitely don't want your kids waking up


00:35:26.580 --> 00:35:28.540
and you have to be up for a few hours in the middle of the night.


00:35:28.540 --> 00:35:32.800
So if an IoT button can help that, then get the IoT button.


00:35:32.800 --> 00:35:34.420
All right, item number three.


00:35:34.420 --> 00:35:37.100
And it's packed full of goodness here, you guys.


00:35:37.100 --> 00:35:40.200
So legacy Python's days are fading.


00:35:40.200 --> 00:35:41.040
What do you think?


00:35:41.040 --> 00:35:42.420
(laughing)


00:35:42.420 --> 00:35:43.980
- Well, I haven't used it for ages.


00:35:43.980 --> 00:35:45.780
So--


00:35:45.780 --> 00:35:46.900
- Yeah, I haven't either.


00:35:46.900 --> 00:35:50.020
Dan, is real Python running on like what, 2.6?


00:35:50.020 --> 00:35:53.260
- Yeah, not a lot of legacy Python for me anymore,


00:35:53.260 --> 00:35:54.100
thankfully.


00:35:54.100 --> 00:35:55.300
- That's awesome.


00:35:55.300 --> 00:35:57.180
- Yeah, I mean, it's kind of crazy that it's, you know,


00:35:57.180 --> 00:36:00.860
it's sort of crap on us, the Python 2 end of life,


00:36:00.860 --> 00:36:03.620
and now we're not that far away anymore from it, so.


00:36:03.620 --> 00:36:05.780
- Yeah, we're actually super close.


00:36:05.780 --> 00:36:08.860
And the official item that I'm linking to


00:36:08.860 --> 00:36:11.540
as this piece of news is Guido van Rossum's


00:36:11.540 --> 00:36:12.580
official statement.


00:36:12.580 --> 00:36:15.500
So I don't know, four years ago or something.


00:36:15.500 --> 00:36:20.500
I said, yeah, Python 2, it'll be done in 2020.


00:36:20.500 --> 00:36:21.540
Whatever, right?


00:36:21.540 --> 00:36:23.360
Like that's like a broad range for a period


00:36:23.360 --> 00:36:25.900
where things stops a whole year.


00:36:25.900 --> 00:36:27.540
So we needed a more clear date.


00:36:27.540 --> 00:36:30.100
People were speculating maybe the date of PyCon


00:36:30.100 --> 00:36:32.460
might be a cool one, maybe the end, maybe the beginning.


00:36:32.460 --> 00:36:33.740
So he came out and said,


00:36:33.740 --> 00:36:35.640
let's not play games with semantics.


00:36:35.640 --> 00:36:38.400
The way I see it for the situation for Python 2.7


00:36:38.400 --> 00:36:41.060
is that end of life is January 1st, 2020.


00:36:41.060 --> 00:36:46.140
there will be no updates, not even source only security patches after that date, period.


00:36:46.140 --> 00:36:47.140
That sounds like the end.


00:36:47.140 --> 00:36:50.980
Yeah, it's a good end though, because the, and some people might complain about the whole


00:36:50.980 --> 00:36:53.900
security patches, but this is volunteer driven.


00:36:53.900 --> 00:36:55.500
So it's volunteers time.


00:36:55.500 --> 00:36:58.260
And I think that to let them work on new things is good.


00:36:58.260 --> 00:36:59.260
Yeah, absolutely.


00:36:59.260 --> 00:37:02.740
And it's not like people are surprised, right?


00:37:02.740 --> 00:37:07.900
It's not like, wait, last month, they didn't nobody told us there's going to be a new Python


00:37:07.900 --> 00:37:10.840
like it's been going on for 10 years.


00:37:10.840 --> 00:37:12.680
to make it 12. It's time.


00:37:12.680 --> 00:37:14.560
Yeah. And there's a couple of loudmouths


00:37:14.560 --> 00:37:16.400
that two podcasts that have been talking


00:37:16.400 --> 00:37:17.480
about it for a couple of years.


00:37:17.480 --> 00:37:19.680
So yeah, I think we're actually making


00:37:19.680 --> 00:37:21.600
a dent with this referring to Python


00:37:21.600 --> 00:37:23.600
2 as legacy Python. I think it's


00:37:23.600 --> 00:37:25.600
making a difference. Not everybody loves it,


00:37:25.600 --> 00:37:27.720
but I know some people it's


00:37:27.720 --> 00:37:30.000
been working for. Do you guys know, you know, with the


00:37:30.000 --> 00:37:32.080
no more official security patches


00:37:32.080 --> 00:37:34.200
after the end of life date?


00:37:34.200 --> 00:37:36.980
I mean, obviously that this is a big business opportunity


00:37:36.980 --> 00:37:39.240
for other companies to come in and offer


00:37:39.240 --> 00:37:41.400
you know, long term Python 2 updates and stuff.


00:37:41.400 --> 00:37:44.320
Does anybody know who's doing that right now?


00:37:44.320 --> 00:37:46.640
Like some Linux distributions, I would guess,


00:37:46.640 --> 00:37:48.720
but I don't really know what's going on in that space.


00:37:48.720 --> 00:37:49.840
Yeah, possibly.


00:37:49.840 --> 00:37:51.480
The big news that I just heard,


00:37:51.480 --> 00:37:55.160
so, you know, there's Red Hat Enterprise Linux, right?


00:37:55.160 --> 00:37:57.760
And they do a lot of that kind of stuff.


00:37:57.760 --> 00:37:59.840
And the versions that they have live on


00:37:59.840 --> 00:38:00.960
for a long period of time,


00:38:00.960 --> 00:38:02.600
but they just announced that they're dropping


00:38:02.600 --> 00:38:04.920
Python 2 support from Red Hat Enterprise Linux,


00:38:04.920 --> 00:38:06.760
which to me sounds like,


00:38:06.760 --> 00:38:07.200
Okay.


00:38:07.200 --> 00:38:09.040
Even the laggards are stepping forward.


00:38:09.040 --> 00:38:12.740
So I think that that's pretty big, but I suspect that there's still


00:38:12.740 --> 00:38:13.940
a lot of support on the backend.


00:38:13.940 --> 00:38:18.960
There's been a few people who've like talked about forking Python two and just


00:38:18.960 --> 00:38:23.180
supporting it themselves as a single individual, but it seems, I'm sure


00:38:23.180 --> 00:38:26.320
there's going to be some of that, but like as a company, like, let's say,


00:38:26.320 --> 00:38:28.200
I don't know your bank of America.


00:38:28.200 --> 00:38:29.940
You're like, dude, we don't need to upgrade.


00:38:29.940 --> 00:38:30.820
There's this guy.


00:38:30.820 --> 00:38:31.960
He's worked it.


00:38:31.960 --> 00:38:32.460
We're good.


00:38:32.460 --> 00:38:32.960
You know what I mean?


00:38:32.960 --> 00:38:34.780
Like that just doesn't seem realistic.


00:38:35.600 --> 00:38:40.200
It's also not just the C run, the C Python runtime anymore.


00:38:40.200 --> 00:38:42.000
It's like so much more than that.


00:38:42.000 --> 00:38:47.040
So Django no longer supports Python two, like the scientific stack, like


00:38:47.040 --> 00:38:49.260
NumPy and stuff are dropping support for Python two.


00:38:49.260 --> 00:38:53.620
So even if you still have the older stuff, you know, you're like, well, we just keep


00:38:53.620 --> 00:38:56.720
running, it's not just about what's running your code, it's also what you can use in


00:38:56.720 --> 00:38:57.200
your code.


00:38:57.200 --> 00:39:00.920
And you know, that's going to start looking like it's just zooming off into the


00:39:00.920 --> 00:39:01.400
distance.


00:39:01.400 --> 00:39:01.800
So.


00:39:01.800 --> 00:39:02.600
Not good.


00:39:02.640 --> 00:39:07.760
Well, I mean, I think Python 2 will actually live on forever in some situations where,


00:39:07.760 --> 00:39:13.240
for instance, you got something that doesn't need a security patch because it doesn't touch the Internet at all.


00:39:13.240 --> 00:39:18.040
And as long as it will run on whatever CPU you're sticking it on,


00:39:18.040 --> 00:39:24.040
some people have a huge program that they never touch because the requirements never change.


00:39:24.040 --> 00:39:28.240
And they use it every day, but it doesn't need to be flexible.


00:39:28.240 --> 00:39:30.160
It doesn't need to be worked on that much.


00:39:30.160 --> 00:39:34.040
they'll probably upgrade when they have to change the program.


00:39:34.040 --> 00:39:34.720
So, yeah.


00:39:34.720 --> 00:39:39.240
I'm wondering if that also means that Apple is finally moving to Python 3


00:39:39.240 --> 00:39:41.680
and making that the default for macOS,


00:39:41.680 --> 00:39:47.040
because the latest release, it still ships with 2.7.10, I think.


00:39:47.040 --> 00:39:50.280
Yeah, that would actually be really, really nice.


00:39:50.280 --> 00:39:54.960
You know, it's starting to shift in Ubuntu and just different Linux distributions,


00:39:54.960 --> 00:39:58.160
but also on macOS. Yeah, that would be super cool.


00:39:58.160 --> 00:40:01.080
Brian, you're talking about things that don't require security patches.


00:40:01.080 --> 00:40:06.000
I just saw a video from NASA talking about their trip to the moon and setting


00:40:06.000 --> 00:40:08.840
up a base there, which is just awesome.


00:40:08.840 --> 00:40:11.040
So they had like all this sort of quick.


00:40:11.040 --> 00:40:12.960
Different scenes of people doing stuff.


00:40:12.960 --> 00:40:14.960
And one of the scenes was them working.


00:40:14.960 --> 00:40:19.020
Uh, they had sublime open, like editing a bunch of Python code, controlling


00:40:19.020 --> 00:40:22.320
like something about the, the moon mission, which was pretty cool.


00:40:22.320 --> 00:40:23.680
But I didn't catch whether it was two or three.


00:40:23.680 --> 00:40:24.320
I couldn't tell.


00:40:24.320 --> 00:40:26.920
That's pretty cool.


00:40:26.920 --> 00:40:27.280
Yeah.


00:40:27.680 --> 00:40:31.420
Someone else on Reddit did catch that the sublime was unregistered by the way.


00:40:31.420 --> 00:40:31.880
Okay.


00:40:31.880 --> 00:40:39.320
I guess a final thought here is.


00:40:39.320 --> 00:40:43.160
We've also talked about this on Python bites is that there's the python


00:40:43.160 --> 00:40:45.620
clock.org, the Python two death clock.


00:40:45.620 --> 00:40:48.380
And it has been updated for this, this new end of life statement.


00:40:48.380 --> 00:40:51.320
And it reads one year, one month, two days.


00:40:51.320 --> 00:40:53.820
So if people are out there and they got to start upgrading, like


00:40:53.820 --> 00:40:55.580
the death clock is ticking.


00:40:55.580 --> 00:40:56.120
All right.


00:40:56.120 --> 00:41:02.640
I also got item number two, and that I would categorize as the end of innocence for PyPI


00:41:02.640 --> 00:41:03.640
and PIP.


00:41:03.640 --> 00:41:09.820
So we've heard about a couple of issues, one like right before 2018, like late 2017, and


00:41:09.820 --> 00:41:18.280
then another one again this year, about people posting or taking over control and posting


00:41:18.280 --> 00:41:21.960
some form of evil PyPI package.


00:41:21.960 --> 00:41:28.760
primarily they look like they're kind of either a research project, a prank, or some kind of like


00:41:28.760 --> 00:41:36.440
Bitcoin theft. So one of them installed like a clipboard monitor that would watch for Bitcoin


00:41:36.440 --> 00:41:40.840
addresses and soon as it saw one it would like ship that off to like the mothership or something


00:41:40.840 --> 00:41:47.160
to that effect. But I don't know if anything super bad that's happened but it I guess until


00:41:47.160 --> 00:41:54.760
you know, 2016, 2017, PyPI as a place was just, it's incredible to me. It's a place on the internet


00:41:54.760 --> 00:42:02.920
that was entirely unprotected and yet safe. I can imagine that. If you had like an open FTP server


00:42:02.920 --> 00:42:05.880
and you just put it on the internet, like all sorts of badness would happen to that thing


00:42:05.880 --> 00:42:10.120
in a day. It would be full of all sorts of things you don't want it to be full of.


00:42:10.120 --> 00:42:15.480
And here PyPI was going along and it was just, you know, the community sort of policed itself


00:42:15.480 --> 00:42:16.480
and took care of itself.


00:42:16.480 --> 00:42:20.480
Plus it used to be really hard to become a person that could push things to PyPI.


00:42:20.480 --> 00:42:23.480
Yeah, maybe it correlates to the shipping of PyPI.org.


00:42:23.480 --> 00:42:28.480
Yeah, there seemed to be a lot of, well, not a lot, I'm trying to be more specific,


00:42:28.480 --> 00:42:32.480
but I think NPM, again in the JavaScript, like Node.js world, they had a big,


00:42:32.480 --> 00:42:36.480
it was something similar. I think it started with a typo squatting attack,


00:42:36.480 --> 00:42:39.480
but then it was actually a worm that would then go.


00:42:39.480 --> 00:42:42.480
So if you got the malicious package, nothing would really happen,


00:42:42.480 --> 00:42:45.360
would really happen except that package as it was installing


00:42:45.360 --> 00:42:47.840
was looking for your--


00:42:47.840 --> 00:42:51.160
like if you were registered with the npm package repository,


00:42:51.160 --> 00:42:54.280
and it would go in and patch the packages that you owned


00:42:54.280 --> 00:42:55.920
to spread that worm further.


00:42:55.920 --> 00:42:57.580
I don't know if there was some payload,


00:42:57.580 --> 00:43:00.280
but it was really exploding quickly.


00:43:00.280 --> 00:43:02.680
And I guess the same thing could happen with PyPI.


00:43:02.680 --> 00:43:04.040
Like, I don't see why not.


00:43:04.040 --> 00:43:05.640
Yeah, it definitely could.


00:43:05.640 --> 00:43:06.840
But it hasn't.


00:43:06.840 --> 00:43:09.360
And let's not give any people ideas.


00:43:09.360 --> 00:43:09.860
[LAUGHTER]


00:43:09.860 --> 00:43:10.860
- Sounds good.


00:43:10.860 --> 00:43:11.860
We're gonna cut that out.


00:43:11.860 --> 00:43:12.860
- Yeah, exactly.


00:43:12.860 --> 00:43:13.860
Don't say that.


00:43:13.860 --> 00:43:14.860
- Security by obscurity, come on.


00:43:14.860 --> 00:43:15.860
- Exactly, right?


00:43:15.860 --> 00:43:16.860
Security by lack of creativity.


00:43:16.860 --> 00:43:17.860
Okay, so the two main problems were basically,


00:43:17.860 --> 00:43:18.860
like you pointed out, Dan, type of squatting,


00:43:18.860 --> 00:43:19.860
which is like we're going to upload a package


00:43:19.860 --> 00:43:20.860
that takes a copy of Django


00:43:20.860 --> 00:43:21.860
and then slightly modifies it, set up.py,


00:43:21.860 --> 00:43:22.860
and publish it as a package.


00:43:22.860 --> 00:43:23.860
And then we're gonna have to do a lot of


00:43:23.860 --> 00:43:24.860
coding and stuff to make it work.


00:43:24.860 --> 00:43:25.860
And so we're gonna have to do a lot of


00:43:25.860 --> 00:43:26.860
coding and stuff to make it work.


00:43:26.860 --> 00:43:27.860
And so we're gonna have to do a lot of


00:43:27.860 --> 00:43:28.860
coding and stuff to make it work.


00:43:28.860 --> 00:43:29.860
And so we're gonna have to do a lot of


00:43:29.860 --> 00:43:30.860
coding and stuff to make it work.


00:43:30.860 --> 00:43:35.740
to upload a package that takes a copy of Django


00:43:35.740 --> 00:43:39.300
and then slightly modifies it, setup.py,


00:43:39.300 --> 00:43:43.340
and publish it under Django or Django or whatever,


00:43:43.340 --> 00:43:45.860
like how you pronounce it without the J, right?


00:43:45.860 --> 00:43:48.420
So if people pip install and they misspell,


00:43:48.420 --> 00:43:50.020
they get your bad thing, right?


00:43:50.020 --> 00:43:50.840
So that's one.


00:43:50.840 --> 00:43:52.820
And the other was to take advantage of folks


00:43:52.820 --> 00:43:57.260
who didn't understand why something wasn't available to them.


00:43:57.260 --> 00:43:59.820
So like if you tried to use regular expressions


00:43:59.820 --> 00:44:04.060
and you say re. and it says, well, re is not defined.


00:44:04.060 --> 00:44:05.660
You're like, well, maybe I need to pip install re.


00:44:05.660 --> 00:44:06.820
No, you just need to import it, right?


00:44:06.820 --> 00:44:07.700
It's built in.


00:44:07.700 --> 00:44:09.600
So they were targeting the built-in libraries.


00:44:09.600 --> 00:44:12.220
And I believe all the built-ins are now patched.


00:44:12.220 --> 00:44:14.300
And Brian, didn't we cover something on Python bytes


00:44:14.300 --> 00:44:17.140
that would help guard against typo squatting?


00:44:17.140 --> 00:44:19.400
It would like try to grab packages


00:44:19.400 --> 00:44:22.060
that also had misspellings around your package name?


00:44:22.060 --> 00:44:23.340
I think there was something like that.


00:44:23.340 --> 00:44:24.780
- Yeah, I think so.


00:44:24.780 --> 00:44:25.700
- I don't remember what it was called,


00:44:25.700 --> 00:44:27.340
but I think that exists and people could find it.


00:44:27.340 --> 00:44:29.740
- Oh yeah, yeah, I remember listening to that episode


00:44:29.740 --> 00:44:30.700
And you guys were talking--


00:44:30.700 --> 00:44:31.540
I forgot what it's called, too.


00:44:31.540 --> 00:44:33.120
But it generates different variations


00:44:33.120 --> 00:44:34.200
of your own package names.


00:44:34.200 --> 00:44:36.700
You can try and register all of those.


00:44:36.700 --> 00:44:38.940
It's very work intensive.


00:44:38.940 --> 00:44:41.100
- Yeah, so it's interesting on what is the fix.


00:44:41.100 --> 00:44:42.460
And I don't know what the fix is.


00:44:42.460 --> 00:44:46.820
The PSF is trying to get more resources to support PyPI


00:44:46.820 --> 00:44:49.440
and the Python packaging infrastructure in general.


00:44:49.440 --> 00:44:51.320
But largely that's been improve it,


00:44:51.320 --> 00:44:53.420
do things like you talked about previously, Dan,


00:44:53.420 --> 00:44:55.900
on just shipping pypi.org.


00:44:55.900 --> 00:44:58.700
But this validation, if you have so many releases


00:44:58.700 --> 00:45:01.140
of so many packages, how do you even verify it?


00:45:01.140 --> 00:45:02.140
I don't know, it's tricky.


00:45:02.140 --> 00:45:04.020
- It's not necessarily something that could be,


00:45:04.020 --> 00:45:07.260
that can be solved with a straightforward technology fix.


00:45:07.260 --> 00:45:11.020
Like essentially, it's a problem that all of these,


00:45:11.020 --> 00:45:13.020
let's call them online marketplaces,


00:45:13.020 --> 00:45:15.260
code repositories or whatever you wanna call them.


00:45:15.260 --> 00:45:18.460
If you look at the Android App Store, Apple App Store,


00:45:18.460 --> 00:45:19.380
I mean, the Apple App Store,


00:45:19.380 --> 00:45:22.900
they have these like crazy intensive review processes,


00:45:22.900 --> 00:45:25.540
considering that there are millions of apps


00:45:25.540 --> 00:45:27.940
in this app store and they're reviewing every single one.


00:45:27.940 --> 00:45:30.540
And I think there's even some manual steps involved there.


00:45:30.540 --> 00:45:32.700
And even there, we've had malicious apps


00:45:32.700 --> 00:45:35.740
that were trying to steal people's private information.


00:45:35.740 --> 00:45:37.180
And it's a really locked down platform.


00:45:37.180 --> 00:45:40.460
So I think it's a challenge that we're facing now,


00:45:40.460 --> 00:45:42.380
because we're all connected over the internet,


00:45:42.380 --> 00:45:46.180
and people are really relying on these package platforms.


00:45:46.180 --> 00:45:48.700
So it seems like it's something we'll


00:45:48.700 --> 00:45:50.520
have to try out a bunch of solutions


00:45:50.520 --> 00:45:52.100
and see what will work there.


00:45:52.100 --> 00:45:55.180
I think we should get all of these new machine learning


00:45:55.180 --> 00:45:58.460
Python people to get involved and take a look at it.


00:45:58.460 --> 00:46:01.980
Because conceptually, the normal updates for a package


00:46:01.980 --> 00:46:04.900
are little tweaks on what it's doing.


00:46:04.900 --> 00:46:09.420
And if suddenly it starts connecting to different servers


00:46:09.420 --> 00:46:12.180
all over the world, or even just one where it used


00:46:12.180 --> 00:46:14.820
to not connect to anything, that would be a change.


00:46:14.820 --> 00:46:16.460
It would be a different behavior


00:46:16.460 --> 00:46:18.340
than it was ever doing before.


00:46:18.340 --> 00:46:20.620
That should be something that a machine could catch.


00:46:20.620 --> 00:46:21.980
- Yeah, actually, I think you're right.


00:46:21.980 --> 00:46:25.020
I mean, there's almost no scenario where PIP


00:46:25.020 --> 00:46:29.340
install a thing should create outbound connections besides to download the package.


00:46:29.340 --> 00:46:35.220
Or, you know, even a package that doesn't normally use any connections or use requests


00:46:35.220 --> 00:46:39.640
suddenly adds, you know, socket connecting or something.


00:46:39.640 --> 00:46:43.000
That's something to take a, you know, at least we can filter it down to things people could


00:46:43.000 --> 00:46:45.680
take a look at and say, "Is something weird going on here?"


00:46:45.680 --> 00:46:50.480
Well, it would actually be sweet to have, like, a CPython interpreter that is fully


00:46:50.480 --> 00:46:52.960
sandboxed that can't--


00:46:52.960 --> 00:46:55.560
you could just run code that people send you,


00:46:55.560 --> 00:46:56.920
and you can run it safely, and it


00:46:56.920 --> 00:46:59.160
wouldn't be able to write to any folder on your disk


00:46:59.160 --> 00:47:01.120
or open sockets and whatnot.


00:47:01.120 --> 00:47:02.720
That would actually be kind of sweet.


00:47:02.720 --> 00:47:04.400
It's all interpreted, so it seems


00:47:04.400 --> 00:47:05.800
like that should be possible.


00:47:05.800 --> 00:47:07.440
I mean, it's going to take a lot of work, I guess.


00:47:07.440 --> 00:47:07.600
But--


00:47:07.600 --> 00:47:09.080
I think it's possible as well.


00:47:09.080 --> 00:47:11.680
You know, Dan, you mentioned the online app store


00:47:11.680 --> 00:47:12.800
as maybe something--


00:47:12.800 --> 00:47:15.880
I wonder if there's something like that in terms of packaging


00:47:15.880 --> 00:47:17.640
that we could add.


00:47:17.640 --> 00:47:20.200
And what I'm thinking is, if I go build an iOS app,


00:47:20.200 --> 00:47:24.400
I have to declare the things it's going to ask for.


00:47:24.400 --> 00:47:26.780
Like it has to ask for access to contacts.


00:47:26.780 --> 00:47:30.960
It has to ask for access to GPS.


00:47:30.960 --> 00:47:33.420
So you declare it needs the GPS feature,


00:47:33.420 --> 00:47:34.520
it needs these other features, right?


00:47:34.520 --> 00:47:36.120
So what about a package that declares,


00:47:36.120 --> 00:47:39.160
like I don't declare any network capabilities,


00:47:39.160 --> 00:47:41.360
so I don't talk on the network and things like,


00:47:41.360 --> 00:47:44.720
you know, I can't depend upon packages that do, for example.


00:47:44.720 --> 00:47:45.560
- On the flip side,


00:47:45.560 --> 00:47:48.080
none of these have caused a huge amount of damage,


00:47:48.080 --> 00:47:53.240
And I don't want to go to the point of overreacting so that everybody has to take off their shoes to travel.


00:47:53.240 --> 00:47:54.240
Yes, I know.


00:47:54.240 --> 00:47:55.240
Things like that.


00:47:55.240 --> 00:47:56.240
I know.


00:47:56.240 --> 00:47:59.760
We don't want feel-good security that doesn't actually make any difference but makes life hard for everybody.


00:47:59.760 --> 00:48:00.760
Yeah.


00:48:00.760 --> 00:48:01.760
Yeah, I agree.


00:48:01.760 --> 00:48:02.760
I don't know what the answer is.


00:48:02.760 --> 00:48:05.440
I don't know what the fix is or if there is a fix, but I would definitely declare the


00:48:05.440 --> 00:48:08.040
end of Innocence for PyPI.


00:48:08.040 --> 00:48:11.200
That's my declaration as item two for 2018.


00:48:11.200 --> 00:48:16.280
Dan, you have the honor of kicking off what is the number one story in the Python space


00:48:16.280 --> 00:48:17.280
for 2018.


00:48:17.280 --> 00:48:18.280
What happened?


00:48:18.280 --> 00:48:20.280
>>ANDREW: Oh man, what a sad honor though.


00:48:20.280 --> 00:48:22.920
>>COREY: Yeah, I know.


00:48:22.920 --> 00:48:23.920
It's not about the messenger, right?


00:48:23.920 --> 00:48:30.600
>>ANDREW: Well, yeah, I mean, Guido van Rossum stepped down as the BDFL, which is both sad


00:48:30.600 --> 00:48:36.440
and ironic because I guess BDFL stands for Benevolent Dictator for Life, which I think


00:48:36.440 --> 00:48:42.480
he still is now technically, but he's just going to be less involved with the stewardship


00:48:42.480 --> 00:48:44.280
and leadership of Sea Python.


00:48:44.280 --> 00:48:47.640
- Yeah, he's a little more like the queen of England now.


00:48:47.640 --> 00:48:48.480
(laughing)


00:48:48.480 --> 00:48:49.320
In a sense, right?


00:48:49.320 --> 00:48:52.320
Like he's still representing Python.


00:48:52.320 --> 00:48:55.280
He's still very active in the community,


00:48:55.280 --> 00:48:58.640
but he just said, "I'm gonna let other people


00:48:58.640 --> 00:49:01.000
"deal with the decisions around it."


00:49:01.000 --> 00:49:03.120
And basically, went so far as saying,


00:49:03.120 --> 00:49:05.540
"I'm not going to decide for you how you decide."


00:49:05.540 --> 00:49:07.680
Like it was even a meta non-decision.


00:49:07.680 --> 00:49:09.280
So he said, "All right, you all have to figure out


00:49:09.280 --> 00:49:11.240
"how to govern yourselves."


00:49:11.240 --> 00:49:15.520
and it looks like he's coming back in a little bit more


00:49:15.520 --> 00:49:17.120
in terms of participating.


00:49:17.120 --> 00:49:20.240
- Well, right, I mean, I think that's one of the reasons


00:49:20.240 --> 00:49:24.000
is because he was, his involvement with Python


00:49:24.000 --> 00:49:26.440
was just the stuff that wasn't fun.


00:49:26.440 --> 00:49:29.080
And now he gets to be involved with some of the things


00:49:29.080 --> 00:49:31.560
that are fun, like speaking and mentoring


00:49:31.560 --> 00:49:32.960
and things like that.


00:49:32.960 --> 00:49:34.680
- You know, I think that's a really interesting point.


00:49:34.680 --> 00:49:37.600
I'm not sure I would want his job


00:49:37.600 --> 00:49:41.160
the way it kind of looked a year ago, right?


00:49:41.160 --> 00:49:43.880
just arguing over peps and stuff like that.


00:49:43.880 --> 00:49:47.080
And you know that if you do stuff on the internet


00:49:47.080 --> 00:49:52.080
that it's, there's definitely a very small minority


00:49:52.080 --> 00:49:55.840
of people that are abrasive, unfriendly,


00:49:55.840 --> 00:49:58.440
it just sucks your, but even just a few people like that


00:49:58.440 --> 00:49:59.880
will suck your energy for sure.


00:49:59.880 --> 00:50:02.120
- Yeah, and we still don't know what's gonna happen.


00:50:02.120 --> 00:50:05.520
So we'll, maybe that'll be the story for 2019


00:50:05.520 --> 00:50:07.200
is what happens now.


00:50:07.200 --> 00:50:08.040
- I think you're right.


00:50:08.040 --> 00:50:10.280
I think 2018 is the year keto stepped back.


00:50:10.280 --> 00:50:13.840
2019 will be the year that whatever,


00:50:13.840 --> 00:50:15.880
whatever takes place going forward


00:50:15.880 --> 00:50:17.440
is going to be that year.


00:50:17.440 --> 00:50:20.280
- So regarding the new governance structure for CPython,


00:50:20.280 --> 00:50:23.540
which obviously, you know, for any Python developer,


00:50:23.540 --> 00:50:24.940
that should be really dear to our heart


00:50:24.940 --> 00:50:27.560
because it's gonna have such a big impact on the future


00:50:27.560 --> 00:50:31.200
of Python and the CPython project.


00:50:31.200 --> 00:50:34.120
And so the last update that I saw,


00:50:34.120 --> 00:50:36.820
basically we have a PEP 8000 now,


00:50:36.820 --> 00:50:41.820
which is a PEP that discusses the various new proposals


00:50:41.820 --> 00:50:44.580
that have been put forward


00:50:44.580 --> 00:50:46.580
regarding the Python language governance.


00:50:46.580 --> 00:50:51.200
And I just recently saw, it was like two or three days ago,


00:50:51.200 --> 00:50:55.140
Victor Stinner's post on discuss.python.org


00:50:55.140 --> 00:50:59.100
where he's comparing the seven Python governance PEPs.


00:50:59.100 --> 00:51:01.100
So I guess like actually the different proposals


00:51:01.100 --> 00:51:01.980
they're separate PEPs,


00:51:01.980 --> 00:51:04.060
but they're also listed under PEP 8000.


00:51:04.060 --> 00:51:06.120
So there's different models that have been put forward.


00:51:06.120 --> 00:51:10.360
like, for example, leading the project with a trio of three


00:51:10.360 --> 00:51:11.500
co-leaders.


00:51:11.500 --> 00:51:13.500
There could also be a community governance model


00:51:13.500 --> 00:51:14.960
where there's no central authority,


00:51:14.960 --> 00:51:17.680
so like a total 1080 from a dictatorship


00:51:17.680 --> 00:51:20.040
to no central authority.


00:51:20.040 --> 00:51:22.800
I don't know how that would look like in concrete terms,


00:51:22.800 --> 00:51:25.280
but there's different models that are being discussed right


00:51:25.280 --> 00:51:25.780
now.


00:51:25.780 --> 00:51:28.640
And I think it's going to be very interesting to see what


00:51:28.640 --> 00:51:31.080
the CPython team ends up with there.


00:51:31.080 --> 00:51:31.580
I agree.


00:51:31.580 --> 00:51:34.640
And it's pretty important.


00:51:34.640 --> 00:51:36.860
Even simple stuff like Lucas Lenga,


00:51:36.860 --> 00:51:39.200
also creator of Black, what we spoke about earlier,


00:51:39.200 --> 00:51:42.040
he's doing the release management for CPython


00:51:42.040 --> 00:51:43.700
for the next couple releases.


00:51:43.700 --> 00:51:44.840
And he was thinking like, hey,


00:51:44.840 --> 00:51:47.540
it would be great to release this yearly,


00:51:47.540 --> 00:51:49.980
but we can't even discuss having it released yearly


00:51:49.980 --> 00:51:51.880
instead of every 18 months


00:51:51.880 --> 00:51:53.820
because we don't even know how to decide


00:51:53.820 --> 00:51:57.240
how would we, who decides, how do we vote?


00:51:57.240 --> 00:51:58.080
We don't know.


00:51:58.080 --> 00:52:01.200
So, so many things like that are just like on hold


00:52:01.200 --> 00:52:02.200
until this gets figured out.


00:52:02.200 --> 00:52:04.080
So, there's a lot of pressure to make it happen.


00:52:04.080 --> 00:52:07.160
- Definitely, yeah, it's a total bottleneck, I guess,


00:52:07.160 --> 00:52:08.400
for, yeah, like you were saying,


00:52:08.400 --> 00:52:09.560
just to put out a new release,


00:52:09.560 --> 00:52:12.320
you would have to, they would have to figure that out first.


00:52:12.320 --> 00:52:15.040
And so I'm pretty sure that also means it's gonna be,


00:52:15.040 --> 00:52:17.360
a decision's gonna be made relatively quickly there,


00:52:17.360 --> 00:52:18.840
so we can all move on.


00:52:18.840 --> 00:52:20.040
- Yeah, absolutely.


00:52:20.040 --> 00:52:21.240
One thing you did note, though,


00:52:21.240 --> 00:52:22.600
is that Gito's starting to come back


00:52:22.600 --> 00:52:24.840
and be more active in the community again,


00:52:24.840 --> 00:52:28.160
just not in this BDFL decision-maker way, right?


00:52:28.160 --> 00:52:30.040
- Yeah, I thought that was kinda cool.


00:52:30.040 --> 00:52:32.800
You know, I don't know, it might be coincidence,


00:52:32.800 --> 00:52:34.080
But I don't think it was.


00:52:34.080 --> 00:52:38.760
So as I was putting together a recent PyCoders Weekly issue,


00:52:38.760 --> 00:52:42.240
I saw that there were a couple of interviews with Guido


00:52:42.240 --> 00:52:45.640
out there, or articles that had little sound bites from him.


00:52:45.640 --> 00:52:48.520
So he did a really long video-based interview


00:52:48.520 --> 00:52:50.800
on the MIT AI podcast.


00:52:50.800 --> 00:52:52.000
So it's actually on YouTube.


00:52:52.000 --> 00:52:53.420
It's more like a video-based show,


00:52:53.420 --> 00:52:55.580
but I think it's also a podcast that I thought


00:52:55.580 --> 00:52:56.840
was really interesting.


00:52:56.840 --> 00:52:59.180
And he also started blogging again.


00:52:59.180 --> 00:53:01.480
So he has this personal blog at--


00:53:01.480 --> 00:53:04.440
I think it's neopythonic.blogspot.com


00:53:04.440 --> 00:53:05.480
or something like that.


00:53:05.480 --> 00:53:06.960
And he put out a new post there.


00:53:06.960 --> 00:53:10.440
And I think it was kind of nice to see some activity there,


00:53:10.440 --> 00:53:14.760
again, because I'm sure it's also a sign that now he maybe


00:53:14.760 --> 00:53:16.520
feels like he has more time to do that


00:53:16.520 --> 00:53:18.440
or feels inspired to do things like that again.


00:53:18.440 --> 00:53:20.840
And I think that's a really, really positive sign just


00:53:20.840 --> 00:53:22.800
for his personal well-being, I think.


00:53:22.800 --> 00:53:24.360
I think it's a positive sign as well.


00:53:24.360 --> 00:53:26.960
And just like Brian and I were talking about earlier,


00:53:26.960 --> 00:53:28.720
a lot of his energy had previously


00:53:28.720 --> 00:53:33.080
gone into debating PEP 572 and just dealing


00:53:33.080 --> 00:53:36.240
with all the decision making.


00:53:36.240 --> 00:53:39.400
And now he can focus back on what most people would


00:53:39.400 --> 00:53:40.640
want to focus on--


00:53:40.640 --> 00:53:42.880
coding, software, cool stuff like that.


00:53:42.880 --> 00:53:44.760
And it sounds like he's getting back into it.


00:53:44.760 --> 00:53:45.560
So that's awesome.


00:53:45.560 --> 00:53:46.060
Yeah.


00:53:46.060 --> 00:53:49.240
And I mean, what a crazy responsibility


00:53:49.240 --> 00:53:53.200
to be at the center, at the focus of it all,


00:53:53.200 --> 00:53:55.680
and to be the one person that needs


00:53:55.680 --> 00:53:56.960
to make all of these decisions.


00:53:56.960 --> 00:54:00.020
And sure, he was delegating a lot of these decisions


00:54:00.020 --> 00:54:03.560
and everything, but the way the CPython governance


00:54:03.560 --> 00:54:07.420
was set up before, it was all focused on one person.


00:54:07.420 --> 00:54:09.920
And yeah, I mean, it's tough to do that


00:54:09.920 --> 00:54:11.360
for several decades, right?


00:54:11.360 --> 00:54:14.680
- Yeah, honestly, I was surprised that he had kept going


00:54:14.680 --> 00:54:16.360
in that role for that long.


00:54:16.360 --> 00:54:18.540
I mean, it's sad to see him step down,


00:54:18.540 --> 00:54:20.720
but at the same time, that was 25 years.


00:54:20.720 --> 00:54:23.920
Like how many other people have a job that goes 25 years


00:54:23.920 --> 00:54:25.080
that's high pressure, right?


00:54:25.080 --> 00:54:26.160
- Yeah, it's incredible.


00:54:26.160 --> 00:54:28.000
I mean, thank you so much, Guido.


00:54:28.000 --> 00:54:28.840
- Yeah, absolutely.


00:54:28.840 --> 00:54:31.320
It's, Python's a special place


00:54:31.320 --> 00:54:32.880
and it has a lot to do with him.


00:54:32.880 --> 00:54:34.400
All right, guys, that's it.


00:54:34.400 --> 00:54:36.360
Those are our top 10 for 2018.


00:54:36.360 --> 00:54:37.600
It's been a fun year, hasn't it?


00:54:37.600 --> 00:54:38.920
- Absolutely. - It really is.


00:54:38.920 --> 00:54:42.640
- Yeah, I think 2018 just has more good stuff to come.


00:54:42.640 --> 00:54:45.280
So it doesn't seem like anything is slowing down


00:54:45.280 --> 00:54:47.320
and that's pretty awesome.


00:54:47.320 --> 00:54:49.400
Now, before we round out the show,


00:54:49.400 --> 00:54:51.800
you have to answer the two questions, both of you.


00:54:51.800 --> 00:54:53.320
So, Brian, let's start with you.


00:54:53.320 --> 00:54:55.000
If you're gonna write some Python code,


00:54:55.000 --> 00:54:57.000
maybe test a little something or other,


00:54:57.000 --> 00:54:58.400
what editor would you use?


00:54:58.400 --> 00:54:59.880
- PyCharm. - Right on.


00:54:59.880 --> 00:55:01.640
- And Stan. - Yeah, good one.


00:55:01.640 --> 00:55:02.460
Dan?


00:55:02.460 --> 00:55:03.300
- I'm still a Sublime guy,


00:55:03.300 --> 00:55:06.040
although I have been experimenting with Visual Studio Code,


00:55:06.040 --> 00:55:07.480
and it's pretty sweet, actually.


00:55:07.480 --> 00:55:10.920
- Yeah, I would say the Sublime, Visual Studio Code,


00:55:10.920 --> 00:55:12.720
there's probably a lot of bleed over between those,


00:55:12.720 --> 00:55:15.040
and with all the activity around Visual Studio Code,


00:55:15.040 --> 00:55:17.800
it's gotta be eating into the Sublime world.


00:55:17.800 --> 00:55:19.880
- Yeah, definitely, probably.


00:55:19.880 --> 00:55:20.960
I like what VS Code,


00:55:20.960 --> 00:55:23.240
I like watching what VS Code's doing.


00:55:23.240 --> 00:55:25.360
They're just not quite there with the testing yet.


00:55:25.360 --> 00:55:28.240
And I'll take a look again when they get that up to speed.


00:55:28.240 --> 00:55:29.040
Yeah, I agree.


00:55:29.040 --> 00:55:30.740
I think they're doing really sweet stuff.


00:55:30.740 --> 00:55:33.720
OK, Brian, notable PyPI package?


00:55:33.720 --> 00:55:35.880
One preferably that doesn't have any badness in it?


00:55:35.880 --> 00:55:36.480
PyTest.


00:55:36.480 --> 00:55:37.320
PyTest, right on.


00:55:37.320 --> 00:55:37.800
Dan?


00:55:37.800 --> 00:55:38.440
Sweet.


00:55:38.440 --> 00:55:40.280
So I was going to say black again,


00:55:40.280 --> 00:55:41.960
but we talked about this at length.


00:55:41.960 --> 00:55:46.680
So I'm going to say PyTest-ICDiff.


00:55:46.680 --> 00:55:49.920
So it's a PyTest plugin that gives you better error


00:55:49.920 --> 00:55:53.160
messages for your PyTest assertions in some cases.


00:55:53.160 --> 00:55:57.800
So it'll basically do a more extensive diff on,


00:55:57.800 --> 00:55:59.760
let's say, when it's comparing two dictionaries.


00:55:59.760 --> 00:56:01.760
And it'll tell you, those keys were added,


00:56:01.760 --> 00:56:04.320
those keys were removed, and it has color highlighting.


00:56:04.320 --> 00:56:07.680
And I just found that this is a really, really sweet little


00:56:07.680 --> 00:56:10.080
tool, and I started installing it in all of my projects


00:56:10.080 --> 00:56:11.240
that have tests.


00:56:11.240 --> 00:56:12.800
And I highly recommend it.


00:56:12.800 --> 00:56:13.600
That sounds great.


00:56:13.600 --> 00:56:14.640
I may have to go check this out.


00:56:14.640 --> 00:56:15.140
Cool.


00:56:15.140 --> 00:56:17.400
All right, so a straight sweep for PyTest there.


00:56:17.400 --> 00:56:18.440
That's great.


00:56:18.440 --> 00:56:19.160
All right, guys.


00:56:19.160 --> 00:56:21.640
Thanks so much for being on the show and being part of this.


00:56:21.640 --> 00:56:24.840
That's so many cool things to talk about and I really appreciate it.


00:56:24.840 --> 00:56:25.840
Thanks for having us.


00:56:25.840 --> 00:56:26.840
Thanks.


00:56:26.840 --> 00:56:27.840
Yep.


00:56:27.840 --> 00:56:28.840
Bye.


00:56:28.840 --> 00:56:29.840
Bye bye.


00:56:29.840 --> 00:56:30.840
Thank you for listening to Python Bytes.


00:56:30.840 --> 00:56:32.560
Follow the show on Twitter via @PythonBytes.


00:56:32.560 --> 00:56:35.680
That's Python Bytes as in B-Y-T-E-S.


00:56:35.680 --> 00:56:39.000
And get the full show notes at PythonBytes.fm.


00:56:39.000 --> 00:56:42.720
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:56:42.720 --> 00:56:43.720
way.


00:56:43.720 --> 00:56:46.200
We're always on the lookout for sharing something cool.


00:56:46.200 --> 00:56:49.660
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:56:49.660 --> 00:56:52.740
Thank you for listening and sharing this podcast with your friends and colleagues.

