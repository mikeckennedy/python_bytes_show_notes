00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 152, recorded October 9th, 2019. I'm Michael Kennedy.

00:00:09 And I'm Brian Okken.

00:00:10 And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean.

00:00:16 Get $50 credit for new users.

00:00:18 Now, we may have touched on this concept of legacy Python before, Brian. Have we covered it?

00:00:23 Yeah, I think we have.

00:00:24 We definitely have.

00:00:25 So we know that there are companies out there that say it's really tricky for us to upgrade to Python 3 because.

00:00:32 And sometimes that's because, I don't know, just they don't put the resources into it, right?

00:00:36 Like they would rather work on features rather than going back and rewriting old code to do the same thing.

00:00:42 But so it's not so old. Things like that.

00:00:44 Other times, it's because they have a ton of Python code.

00:00:48 And we're hearing more and more stories of these companies that have been like head in the sand, waiting until the very, very last minute to make those migrations.

00:00:57 And they're just like, all right, finally, somebody has raised it to the level that like it has to be dealt with, right?

00:01:03 Yeah.

00:01:03 Well, it turns out that banks use a lot of Python code, as we know.

00:01:07 And I've heard of Bank of America using a ton of code and having a lot of people working on some Python projects.

00:01:13 But JPMorgan, JPMorgan Chase, they use maybe even more.

00:01:18 They use a ton of Python.

00:01:19 So there's an article that's based on this presentation by Misha Selman, who is the executive director at JPMorgan Chase about this.

00:01:28 It was given at PyData 2017.

00:01:30 So they've been working on it.

00:01:31 But the problem is they have 35 million lines of Python 2 code.

00:01:35 Oh, that's a lot.

00:01:36 In terms of Python code, that's kind of ridiculous, right?

00:01:40 That's an insane amount.

00:01:41 And so they've got a lot of Python code that has to be converted to Python 3.

00:01:45 And this is from their Athena trading platform, which is at the core of their business operations, right?

00:01:51 So they got a late start to migrating Python 3.

00:01:54 And people are pointing out this could be a security risk for them, right?

00:01:57 Like we saw what happened with Equifax and some outdated things there.

00:02:02 Like who knows what the risks are?

00:02:04 I think it's probably less than something like the web frameworks that were out of date at other places.

00:02:09 But yeah, they have a lot of stuff that has to be migrated.

00:02:13 And internally, they use Python for pricing, trading, risk management, analytics, and even machine learning.

00:02:19 So just to look at some stats from this project, the feature set utilizes 150,000 Python modules, over 500 open source packages, 35 million lines of Python code contributed by 1,500 developers.

00:02:35 Okay.

00:02:36 So they got a big team.

00:02:37 That's a huge scale.

00:02:38 And by the way, I wonder how much JPMorgan Chase is contributing back to those 500 open source projects.

00:02:44 Hopefully some.

00:02:45 All right.

00:02:45 Now, it says they're going to miss the deadline, right?

00:02:48 That most of the strategic elements are going to be in place by Q1 2020.

00:02:53 But they can't do it all.

00:02:55 And I know it's probably like a good roadmap for folks, right?

00:02:58 They don't have to upgrade it all and then release that new thing, right?

00:03:02 They can upgrade elements at a time.

00:03:03 Yeah.

00:03:04 And there's a lot of great stories on how folks have done that.

00:03:06 I think probably the Instagram project was the most awesome one I've seen where they didn't even branch, right?

00:03:13 They just found a way to seamlessly move from Python 2 to 3 while still running on 2 and then finally flipping the switch.

00:03:18 Here's another one I thought you would find interesting, though.

00:03:21 They have some other stats.

00:03:23 You know, on your projects, how often do you commit code?

00:03:26 It's like once a week, once a day, once an hour.

00:03:29 Yeah, several times a day.

00:03:30 Yeah.

00:03:30 I'm kind of the same.

00:03:31 I do that.

00:03:32 And you guys don't really release stuff.

00:03:34 But like say the Python Bytes website or the Talk Python training site, you know, those probably do some form of website release every other day.

00:03:44 Some sort of deploy, restart, like run through the whole deployment process.

00:03:48 So JP Morgan Chase uses continuous delivery with continuous integration, continuous delivery with 10,000 to 15,000 production changes a week.

00:03:57 That's amazing.

00:03:59 It's like mind blowing, isn't it?

00:04:00 Yeah.

00:04:01 Yeah.

00:04:01 So they're on it, I guess.

00:04:03 But it's just such a project of massive scale that it's hard to get your mind around and hard to find analogies.

00:04:10 So I'm sure there's a few other projects like this in the world, but it can't be many.

00:04:13 No.

00:04:14 Well, that's like one a second or faster.

00:04:17 It's constantly deployed.

00:04:20 It's got to be microservices and other stuff, right?

00:04:22 Otherwise, just like how would you go to the website?

00:04:24 How would you use the services?

00:04:24 Anyway, quite incredible.

00:04:27 All right.

00:04:27 Well, what you got for our next one?

00:04:28 This is just kind of a cool little tool called Organize.

00:04:31 And it was suggested from Ariel Barkin on Twitter.

00:04:35 And I took a look at this and I'm going to start using it right away.

00:04:39 So it's a Python-based file management automation tool.

00:04:43 And the idea is people are lazy with how they save files and download files and whatever.

00:04:50 And on my Mac, for example, all the screenshots just show up on the desktop.

00:04:54 And then, you know, occasionally I'll just take everything and lump them into a clutter folder or something.

00:05:00 But this is a tool where you can give it rules.

00:05:02 It's an EAML file.

00:05:04 And say, have it do things like move all your screenshots from the desktop into a screenshots folder.

00:05:10 Or look through all your downloads to look at the incomplete downloads that you canceled or something.

00:05:16 They're still sitting there.

00:05:17 And just trash those if they're older than, you know, a few days old or something.

00:05:21 Like doing things like removing empty files from certain folders like your download or desktop or other places.

00:05:28 One of the examples is to organize your receipts and invoices into date-based folders.

00:05:33 Which is pretty cool because there's macros involved that you can look at the file touch time and figure out what date and extrapolate the dates and stuff.

00:05:42 And yeah, I always, when I'm paying bills or something, I save the receipt to just wherever in the downloads folder or something.

00:05:49 And having this, just running this every once in a while could clean it up and put everything in its place.

00:05:56 It's pretty cool.

00:05:56 It's super cool.

00:05:57 You could just put it on like a cron job that runs every five minutes or every minute or something, right?

00:06:01 It just goes, boop.

00:06:02 It's got to be super quick.

00:06:03 Just looks at the files and a few folders and then does some text matching.

00:06:08 It's one of those like, you know, automate the boring stuff sort of things that somebody thought, you know, everybody has this problem.

00:06:13 So, yeah, it's nice.

00:06:14 Yeah, I like it.

00:06:15 I have the same problem with receipts and stuff.

00:06:17 I'll get them an email or as a PDF attachment or actually it's just an email that I'll print it to PDF so that I can save it for taxes.

00:06:25 And they just like clutter up.

00:06:27 Yeah, it's, I could totally see just using that.

00:06:30 The rules seem like they're rich enough to do that.

00:06:32 So, yeah, it looks really good.

00:06:33 Yeah.

00:06:33 Super cool.

00:06:33 All right.

00:06:34 Speaking of cool, let me just tell you about DigitalOcean.

00:06:37 So all of our services run on DigitalOcean.

00:06:39 Audio you're listening to now somehow flowed through the DigitalOcean servers to get to you.

00:06:44 And they've got all sorts of great options out there.

00:06:47 They're simple but powerful.

00:06:49 There's not knobs to run absolutely every little edge case, right?

00:06:54 You set up the main server that you want to work with.

00:06:57 You have spaces.

00:06:58 You have hosted databases in MySQL and Postgres.

00:07:01 And you even have caching like Redis and things like that.

00:07:05 So super nice.

00:07:06 Check them out at pythonbytes.fm/digitalocean and get $50 credit for new users.

00:07:12 Highly recommended.

00:07:13 Now, this next one is a fun one.

00:07:16 And it took me a minute to realize what this was about, Brian.

00:07:19 So I realized there's this new PEP, PEP 589.

00:07:24 And it allows you to define typed dictionaries.

00:07:28 Like define a type that represents a dictionary.

00:07:30 Well, it turns out there was already a way to do that, which is why I was confused.

00:07:35 Because there's PEP 484, which has been around for a while, which lets you create a dict of K, V.

00:07:41 Which is like, here's a dictionary of arbitrary keys.

00:07:44 And it has maybe integers.

00:07:46 Or it has user objects.

00:07:47 Or whatever, right?

00:07:48 So you can define these uniform dictionaries, which is kind of interesting.

00:07:54 But this new PEP, it lets you go much farther.

00:07:59 It's proposed by Juka Letozalo.

00:08:02 And it's actually sponsored by Guido Van Rossum.

00:08:06 So remember recently we spoke about Guido.

00:08:08 And we had this philosophical debate of like, well, he's all about typing these days.

00:08:13 But originally typing was like explicitly left out of the language.

00:08:16 What's the story?

00:08:18 So here's another typing thing that he's participating in, which I think is interesting.

00:08:21 So this is accepted.

00:08:22 It's scheduled for 3-8.

00:08:24 So all sorts of interesting stuff.

00:08:26 And it's coming down the line, right?

00:08:28 Soon, actually.

00:08:29 So what it lets you do is imagine you have an arbitrary JSON document or an arbitrary Python

00:08:34 dictionary, really.

00:08:35 But it's super easy to think of like, well, somebody sends me a JSON request and I want

00:08:39 to treat it as if I know what's happening here.

00:08:42 It lets you actually specify the shape of those things, both the keys as well as the values and

00:08:51 potentially nested documents, right?

00:08:53 So you might have a JSON object that's got like some values.

00:08:56 One of those values might be a list of other JSON documents.

00:08:58 You can describe that with this type dict thing.

00:09:01 So the way it works kind of caught me off guard at first, but I think I like it.

00:09:05 So what you do instead of just saying, you know, there's a dictionary of like string comma

00:09:10 user, you actually create a class which derives from typed dict, okay?

00:09:15 Okay.

00:09:16 And then it has fields.

00:09:17 It looks a lot like data classes a little bit.

00:09:19 So you might have like a name colon stir and a year colon int in this thing that is not

00:09:25 actually the dictionary, but it is the type that validates the dictionary.

00:09:29 All right.

00:09:30 Oh, okay.

00:09:31 And then you can say it is one of those, right?

00:09:33 So I say the example they give is there's a movie.

00:09:35 So you say movie colon capital M movie is the name of the class.

00:09:38 And then it's just a dictionary, but the dictionary has the name, which is a string value and a

00:09:43 year, which is an integer value and so on.

00:09:45 And then you can actually validate it.

00:09:47 And the valid, the, the like static type checker, like my pie and so on.

00:09:51 Well, if you say movie of director, it'll say, no, no, no, you can't set this value into this

00:09:58 dictionary because it doesn't have a key called director.

00:10:00 Or if you try to set the year to the string 1982 when quotes, it'll say, no, no, then this

00:10:06 is a string at expected an integer.

00:10:08 But the errors come at the type checking time, right?

00:10:10 This is a type checking time.

00:10:12 Although, you know, it's totally reasonable that things like PyCharm and VS Code would add

00:10:17 edit time checking for this as well.

00:10:19 Cause they do for all the other type stuff.

00:10:20 Yeah, but it's not a runtime.

00:10:21 It's not a runtime thing.

00:10:22 Yeah.

00:10:23 All the typing stuff.

00:10:24 Okay.

00:10:24 And this is definitely that way.

00:10:26 So you're not like re-implementing the dictionary.

00:10:28 You're not creating a dictionary type that is like different.

00:10:32 You create a type, which then talks about just a plain dictionary.

00:10:37 So quite interesting actually.

00:10:39 Yeah.

00:10:40 It does take a little while to look at it and go, does this make sense?

00:10:42 But yeah, it does.

00:10:43 Right.

00:10:43 Imagine you're getting, you're writing an API and somebody's submitting like a JSON post to

00:10:48 you and you want to know, is it valid?

00:10:50 Right.

00:10:51 You could use this basically to validate your schema or at least describe the schema you

00:10:54 expect.

00:10:55 Yeah.

00:10:55 Neat.

00:10:56 It is neat.

00:10:56 Speaking of APIs and new web things, your next one is one of those, right?

00:11:00 I got carried down that rabbit hole.

00:11:03 No, that's cool.

00:11:04 The next one, I was just enticed by the name.

00:11:07 So there's a package called gazpacho.

00:11:09 It's just great.

00:11:11 It's fun to say.

00:11:12 It's fun to eat.

00:11:13 But anyway, gazpacho is a web scraping library.

00:11:17 And the goal of it is to replace requests and beautiful soup for most web scraping projects.

00:11:25 And I got to tell you, I was going to do, I have some web scraping projects that I wanted

00:11:29 to do.

00:11:29 And I know that requests and beautiful soup are easy to use and are super powerful.

00:11:33 But that one use case where you're just grabbing, like you're just doing a get, then you parse

00:11:41 it and then you find some stuff in it and separate it out.

00:11:44 That's so common that this is basically it's optimizing for that.

00:11:49 There's an example article that I'll link to also that uses gazpacho to scrape hockey data

00:11:54 for the use of fantasy sport use.

00:11:57 But it's just a really simple interface.

00:11:59 You import from gazpacho, you import get and soup as a class.

00:12:04 And you can use those to grab some HTML and parse it, find some stuff in there.

00:12:10 It's just a handful of lines of code and you've got a web scraper on your hands.

00:12:15 So I like it.

00:12:16 I think I'll give it a shot.

00:12:18 But I tried it out and I wanted to bring this up because I tried it out and I ran into a

00:12:22 problem that I was getting these certificate errors.

00:12:26 Have you ever gotten certificate errors when you're trying to parse things or pull things

00:12:29 down?

00:12:30 Yeah, just once or twice.

00:12:31 And it's the kind of thing where you bounce off the walls of Stack Overflow until you get

00:12:36 it fixed and you forget how to fix them.

00:12:38 But yeah, so what did you do?

00:12:40 I did the same thing, went to Stack Overflow.

00:12:42 And apparently in within the, and I don't know if this is just a Mac thing or not,

00:12:48 but on Macs at least, when you install Python, you also, in the install directory in applications,

00:12:53 Python 3, whatever, there's a file called installcertificates.command.

00:12:58 And you just have to run that.

00:13:01 And then it has the list of certificates or something.

00:13:04 I don't know how certificates work, but it makes it so that you can access SSL stuff from

00:13:10 Python.

00:13:11 So yeah.

00:13:12 Ran into that today.

00:13:12 That's right.

00:13:13 I'm glad you're linking to it.

00:13:14 So now we'll have it for forever.

00:13:16 Yeah.

00:13:17 Yeah.

00:13:17 That's cool.

00:13:18 It's nice.

00:13:19 Spacho is like two to three times faster than Beautiful Soup, which is pretty sweet.

00:13:24 I like that.

00:13:25 It also does a lot less.

00:13:26 So that makes sense.

00:13:27 Yeah, for sure.

00:13:28 It's a more focused thing.

00:13:29 Yeah.

00:13:30 That's like the 80% case though, right?

00:13:31 You just need to go do simple things.

00:13:33 That's what I'm going to use it for.

00:13:34 So the last thing I want to cover for our main items is pip.

00:13:38 So remember, actually, we spoke about PyDist, P-Y-D-I-S-T?

00:13:42 Yeah.

00:13:42 Yeah.

00:13:42 This is like a private PyPI as a service, I guess.

00:13:46 It's kind of the way I would describe it.

00:13:49 So right now, I think they, before we had talked about this and we're like, well, it just

00:13:56 in beta doesn't seem to have any pricing or anything like that.

00:13:59 So they have pricing and a little bit more details.

00:14:02 They've more or less launched at this point.

00:14:04 And so this article is not about this, but it was written by the folks who run that.

00:14:09 Just that's the connection back to the previous thing.

00:14:11 And it talks about how pip install works.

00:14:15 So for this section, I just want to talk to you real quick about when you say pip install

00:14:21 certify, like it did in that previous article you just mentioned to fix your certificates.

00:14:25 What do you do?

00:14:26 How does it work?

00:14:26 All right.

00:14:27 So it walks you through all the steps and all the decisions and whatnot that pip has to make

00:14:32 when you say pip install some package.

00:14:34 So the first thing it has to decide, well, first, I guess it does the package exist, right?

00:14:39 And then it needs to figure out which distribution of the package to install.

00:14:44 Because we have eggs, we have wheels, we have source.

00:14:49 We have all these different types of distributions.

00:14:52 There are seven different kinds of distributions.

00:14:54 But the most commons are either source distributions or binary wheels.

00:15:00 So focus on those, right?

00:15:01 So source distribution is just, here's your Python code and maybe the C code that comes with it.

00:15:07 And as part of the setup, we're going to run a compiler against the C code to make sure that

00:15:11 that's compiled in your machine, right?

00:15:13 Super easy to write, not so easy to make sure it works everywhere, not just works on my machine,

00:15:19 right?

00:15:19 Because you've got to have compilers and all the platforms.

00:15:22 And oh, yeah, what about that old version of Windows that was a minimal install and doesn't

00:15:26 have GCC or Visual Studio or whatever?

00:15:29 So wheels are a little bit more safe and also faster.

00:15:33 But that means they have compiled C code, which has to be, you have to have multiple ones for

00:15:39 different platforms, right?

00:15:40 So Windows versus macOS or something.

00:15:43 Yeah.

00:15:43 The benefit is stuff installs fast, right?

00:15:45 So like NumPy takes about four minutes to compile from source.

00:15:50 So if you did a source dist of NumPy, pip install might be slower than you would otherwise

00:15:55 expect, right?

00:15:56 So anyway.

00:15:57 Yeah.

00:15:59 The four minute pip install, yes.

00:16:00 Yeah, that's before you even hit the dependencies, right?

00:16:03 That's just the primary thing.

00:16:05 Yeah.

00:16:05 Okay.

00:16:05 So it has to figure out which one of those are.

00:16:07 And there's actually a known URL.

00:16:10 So like pipi.org slash simple slash package name is where you would go.

00:16:15 So you could go to that slash request, for example.

00:16:19 And there is a huge just flat, it's like an, it's a weird API.

00:16:24 It's like HTML list of like a bunch of wheels with platform names and tarballs and all

00:16:30 sorts of stuff.

00:16:31 So it starts out my going there to figure out what is here.

00:16:34 What can I find?

00:16:36 So first it determines what system you're on and what's compatible with things.

00:16:43 So like if you have a binary wheel, there's actually a PEP that talks about how you figure

00:16:47 out which one that is.

00:16:48 And then if it's a source gist, like, well, you just assume it works.

00:16:52 So once it has that, then it'll try to get the best and it prefers wheels.

00:16:56 And then it has to figure out the dependencies.

00:16:58 So for binary wheels, there's a file called metadata that has a list of those.

00:17:02 So that's cool.

00:17:03 You can just look at that.

00:17:04 If it's a source distribution, it figures it out by running the setup.py.

00:17:09 So that's interesting.

00:17:11 So to run setup.py to actually figure out what dependencies it has to install, you know,

00:17:15 go do that.

00:17:15 And then you might have two dependencies.

00:17:18 You might have a thing and you might depend on, let's say, BeautifulSoup.

00:17:22 But you also have some other library that also depends on BeautifulSoup if you follow the

00:17:26 dependency tree.

00:17:27 And they might even specify versions.

00:17:29 So you might wonder, well, what happens if one depends on one version and the other depends

00:17:33 on the other?

00:17:34 Turns out it just installs it anyway.

00:17:36 Let's take the latest.

00:17:37 That's going to be fine, right?

00:17:38 It's different than like a requirements file that has like different dependency, like pinned

00:17:43 versions.

00:17:44 Like there's a slight difference there.

00:17:45 So finally gets it, builds it, installs it.

00:17:49 And then it has to figure out where's the path?

00:17:51 Am I going to install it to a virtual environment?

00:17:53 Am I going to install it into the system or the user path?

00:17:57 Things like that.

00:17:58 So you can look at sys.prefix to figure out which one of those are.

00:18:02 And there's some environment variables.

00:18:03 And finally, it copies it over in the right place.

00:18:07 And your package installed.

00:18:08 Oh, before it considers your package installed.

00:18:09 Also converts the source files into PYC bytecode files.

00:18:13 So they don't have to get parsed again.

00:18:15 Then your package is installed.

00:18:16 Okay.

00:18:17 Yeah.

00:18:18 So anyway.

00:18:18 Simple.

00:18:19 Yeah.

00:18:19 So if you're wondering like what happens as part of the pip install stuff, there's a

00:18:22 lot of details.

00:18:23 And I didn't cover all of it.

00:18:24 But like, you know, as much as I thought made sense.

00:18:27 I was just curious.

00:18:28 I was going to try to find one of those complicated packages.

00:18:31 Yeah.

00:18:32 That I knew had to be compiled.

00:18:33 Because I went to a couple of mine.

00:18:35 And they're just Python codes.

00:18:37 So there's just one per version.

00:18:39 One wheel.

00:18:40 But like NumPy, for instance.

00:18:43 I know it's got some compiled code in it.

00:18:45 It's got like, I lost count.

00:18:47 It's like 15, 16, 17 different wheels for each version.

00:18:51 Yeah.

00:18:51 Requests has got a ton as well.

00:18:53 Yeah.

00:18:53 It's interesting.

00:18:54 It is interesting how that works.

00:18:55 I'm glad it all works.

00:18:56 I don't have to think about it too much.

00:18:58 I don't have to think about it either.

00:18:58 But it turns out there's like a lot of conversation in there about some stuff that is not totally

00:19:04 solved even today.

00:19:05 Right.

00:19:06 about trying to resolve the dependencies in a totally predictable way before you start

00:19:11 installing anything and stuff like that.

00:19:13 So it's worth checking out.

00:19:14 It's a hard problem.

00:19:15 Yep.

00:19:15 For sure.

00:19:16 But want to finish up with a cool trick?

00:19:17 Like a zoo trick?

00:19:18 A zoo animal trick?

00:19:19 Oh, yeah.

00:19:20 I'm just zoning today.

00:19:22 So Kevin Markham, he runs, what's the thing he runs?

00:19:26 Data School.

00:19:26 Data School.

00:19:27 Data School.

00:19:28 Plus a super nice guy.

00:19:30 Well, he's doing something neat that's called Daily Pandas Tricks or Tricks and Tips or

00:19:35 something like that.

00:19:36 But anyway, we've got a link to it.

00:19:38 He's sending out a little tip or trick about pandas every day on Twitter.

00:19:44 And the page we're linking to has a whole bunch of them already built in.

00:19:48 And I like the notion of just trying to fit something.

00:19:52 Often they're little screenshots, but they're still pretty small.

00:19:55 A little lesson of how to do something cool.

00:19:58 I just picked out one, which is like, let's say you wanted to rename all of the columns

00:20:03 in a data frame the same way, like to replace all the spaces with underscores or something.

00:20:08 And he just shows you how to do that in a little thing.

00:20:11 I think that's neat, especially for something, for a package like pandas, there's a whole bunch

00:20:16 of stuff you can do with it to have a way to just see a little extra new thing every

00:20:22 day to say, that's something I might use.

00:20:24 I'll keep looking at that later or something.

00:20:26 So I don't think we've talked about it before, and I think it's a cool thing he's doing.

00:20:30 So I wanted to highlight it.

00:20:31 Yeah, it's definitely a cool thing he's doing.

00:20:33 And pandas is one of those things where it's not always obvious.

00:20:37 All the little magic that you can do, right?

00:20:39 Like if you want to go to the columns and do string operations, just dataframe.columns.str.apply

00:20:47 your operation, right?

00:20:48 Like that's, after you use it for a while, it's obvious, but maybe not, not right away.

00:20:52 It definitely isn't to me.

00:20:53 Pandas feels a little like magic to me.

00:20:55 I'm looking at this going, I would not have guessed that.

00:20:57 Exactly.

00:20:57 It's not obvious.

00:20:59 But once you know it, it's like, well, of course that's better than like, there's this saying

00:21:03 that if you find yourself looping over things in like NumPy or pandas, you're probably doing

00:21:08 it wrong.

00:21:08 One of the nice fun things I think is if you get really good at something, you'll start

00:21:14 learning the things that you shouldn't do, but that are fun.

00:21:16 And some of Kevin's tips are, you can do this.

00:21:21 It's sort of fun, but don't because it's confusing to other people.

00:21:25 But anyway, here's the trick.

00:21:26 Nice.

00:21:27 It's neat that he's including those.

00:21:29 It's clever, but too clever sometimes.

00:21:30 Cool.

00:21:31 All right.

00:21:31 So do you have any extras to share?

00:21:33 Oh, not only that we just got finished with our first Python West meetup.

00:21:38 And last night, and it was both exhausting and really fun.

00:21:42 So thanks for helping out with that.

00:21:44 Yeah, you bet.

00:21:45 Good job putting it together.

00:21:46 It came out really well.

00:21:47 Everyone seemed to have a great time.

00:21:49 There was a totally good turnout.

00:21:51 I was blown away that it was actually, you know, basically sold out, not sold out, but booked

00:21:55 out on its very first run, which is crazy.

00:21:58 And people out there listening, if you want to come and give a talk at the meetup and you're

00:22:04 willing to find your way to Portland, shoot a message to Brian or me.

00:22:08 Yeah.

00:22:08 Let us know.

00:22:09 That'd be cool.

00:22:09 Yeah.

00:22:09 Would be cool.

00:22:10 And then before anybody asks, it was not recorded.

00:22:12 So yeah, you have to be here.

00:22:15 Yeah.

00:22:15 How about you?

00:22:16 You got some news to share?

00:22:17 I got all sorts of stuff.

00:22:18 A few really quick things.

00:22:20 One, I upgraded to macOS Catalina yesterday.

00:22:23 And so far, so good.

00:22:25 No major problems.

00:22:26 All the Python things seem to be working.

00:22:28 So if you're wondering, I did hear that someone out there was having trouble with Miniconda.

00:22:32 I don't use Miniconda.

00:22:34 So I have no idea about that.

00:22:35 Maybe do a Google search if that matters to you.

00:22:37 Also, Brian, I switched to working with Adobe Audition.

00:22:40 I've been using Audacity and GarageBand.

00:22:44 Finally broke down and paid the $30 a month for Adobe Audition.

00:22:48 And wow, is it worth it.

00:22:50 It is so good.

00:22:51 What has been wrong with me to not do that?

00:22:53 I just didn't want to learn new software.

00:22:54 It's not so much about the money.

00:22:55 It's just like, I don't want to learn new hotkeys.

00:22:57 I already know the hotkeys.

00:22:59 But it's so super good.

00:23:00 The reason I bring it up on the show instead of after is if you hear like weird artifacts

00:23:04 or something odd in the audio, call our attention to it.

00:23:08 Because there's all these dials and knobs that can like do things like chop off the S's

00:23:11 at the end of words if you turn them too far and stuff like that.

00:23:14 So hopefully things sound better.

00:23:16 If they don't, let us know.

00:23:18 And then the two Python related things.

00:23:20 Really quick, Azure Databricks also is dropping support for Python 2.

00:23:25 So just one more brick to fall for Legacy Python.

00:23:28 A Python death clock continues to toll for those who hang on to their Python 2.

00:23:34 And the folks over on the VS Code team, Rong Liu in particular, just announced that at PyCon

00:23:43 China, they just revealed a cool new Jupyter UI variable explorer and Telesense stuff for basically

00:23:50 running Jupyter's inside of VS Code.

00:23:54 So if you're a VS Code user and you care about Jupyter, check that out.

00:23:57 Very cool.

00:23:57 Yeah, absolutely.

00:23:58 Absolutely.

00:23:58 Well, that's it for the stuff.

00:24:00 I got a story for you, a joke maybe.

00:24:02 Yes, please.

00:24:03 This one comes to us from maybe an unexpected space.

00:24:06 It comes to a person on Twitter, goes by the sarcastic pharmacist, sent us this actually

00:24:10 really good joke and a nice comment.

00:24:12 And the theme is that it's hard to distinguish between what is like super easy in programming

00:24:19 and what is like nearly impossible for people who are not doing the programming themselves.

00:24:25 So this is actually an XKCD article 145.

00:24:28 It's got a programmer, a woman sitting there working at her desk and there's like a manager

00:24:34 type who comes up and is issuing feature requests.

00:24:37 Okay.

00:24:37 Okay.

00:24:38 The manager, I'm going to think of one of the people from office space maybe.

00:24:41 And it comes over and says, when a user takes a photo with the app, it should check whether

00:24:47 they're in a national park.

00:24:48 And the woman says, sure, easy.

00:24:50 Easy GIS, look up, give me a few hours.

00:24:52 Oh yeah.

00:24:52 And it should also check whether the photo is a bird.

00:24:54 She says, I'll need a research team in five years.

00:24:58 The subtitle is, in CS it can be hard to explain the difference between the easy and the virtually

00:25:03 impossible.

00:25:03 Yeah.

00:25:04 So there you go.

00:25:07 Yeah.

00:25:08 I don't know.

00:25:08 That resonates a lot with me at least.

00:25:10 Yeah.

00:25:10 We'll probably get a bunch of the image people telling us that it's like five minutes now with

00:25:15 all the new image libraries to do a bird.

00:25:17 Yeah.

00:25:17 But that's now, right?

00:25:19 Like we probably should, I should see if there's a date for this just to be fair.

00:25:23 They don't have dates on these.

00:25:24 That's kind of funky.

00:25:25 All right.

00:25:26 Anyway.

00:25:26 Well, there's probably some algorithm that figures out the number of the XKCD and maps

00:25:30 it back to a date.

00:25:30 But yeah.

00:25:31 Yeah.

00:25:32 But that's funny.

00:25:32 Cool.

00:25:33 All right.

00:25:33 Well, great to chat with you as always.

00:25:35 Thank you.

00:25:36 Yep.

00:25:36 Bye.

00:25:36 Bye.

00:25:37 Thank you for listening to Python Bytes.

00:25:39 Follow the show on Twitter via at Python Bytes.

00:25:41 That's Python Bytes as in B-Y-T-E-S.

00:25:44 And get the full show notes at Pythonbytes.fm.

00:25:47 If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:25:51 We're always on the lookout for sharing something cool.

00:25:54 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:25:57 Thank you for listening and sharing this podcast with your friends and colleagues.

