WEBVTT

00:00:00.000 --> 00:00:01.800
- Hello and welcome to Python Bytes,


00:00:01.800 --> 00:00:03.520
where we deliver Python news and headlines


00:00:03.520 --> 00:00:05.080
directly to your earbuds.


00:00:05.080 --> 00:00:10.080
This is episode 356, recorded October 10th, 2023.


00:00:10.080 --> 00:00:11.120
I'm Michael Kennedy.


00:00:11.120 --> 00:00:12.160
- And I'm Brian Okken.


00:00:12.160 --> 00:00:14.720
- And this episode is brought to you by us.


00:00:14.720 --> 00:00:16.360
Courses over at DocPython Training,


00:00:16.360 --> 00:00:18.320
the complete pytest course from Brian,


00:00:18.320 --> 00:00:21.120
Patreon supporters, and find us over on Fosstodon.


00:00:21.120 --> 00:00:23.800
That's probably the best way to chat with us these days.


00:00:23.800 --> 00:00:26.120
And also be part of the live show,


00:00:26.120 --> 00:00:29.960
pythonbytes.fm/live, usually Tuesdays at 11 Pacific time.


00:00:29.960 --> 00:00:32.560
And you can also see all the old versions there as well.


00:00:32.560 --> 00:00:35.400
So Brian, what are you going to start us with today?


00:00:35.400 --> 00:00:38.000
>> Well, I thought I would start with a,


00:00:38.000 --> 00:00:43.400
it's going to have a theme of getting information from Fosstodon,


00:00:43.400 --> 00:00:44.440
people letting us know.


00:00:44.440 --> 00:00:50.720
So I saw today a post by the PsychoPG group,


00:00:50.720 --> 00:00:53.720
so Psycho Postgres,


00:00:53.720 --> 00:00:54.920
and the post says,


00:00:54.920 --> 00:00:58.080
"It feels weird, but it's time to start considering


00:00:58.080 --> 00:01:02.480
"PsychoPG 2, the present, and PsychoPG 3, the future.


00:01:02.480 --> 00:01:06.280
We've entered the time where PsychoPG 3 is the present


00:01:06.280 --> 00:01:08.580
and 2 is the respectable past.


00:01:08.580 --> 00:01:11.680
Updated the feature page and a few other resources


00:01:11.680 --> 00:01:13.580
on the website to reflect this."


00:01:13.580 --> 00:01:15.480
So I thought I would check it out.


00:01:15.480 --> 00:01:17.080
- Awesome. That's big news.


00:01:17.080 --> 00:01:20.580
You know, Postgres is clearly the biggest database


00:01:20.580 --> 00:01:22.080
that people use in the Python space,


00:01:22.080 --> 00:01:23.880
according to the survey we talked about recently.


00:01:23.880 --> 00:01:25.580
So yeah, this is relevant, right?


00:01:25.580 --> 00:01:27.580
- Yeah, and this is a great library.


00:01:27.580 --> 00:01:29.980
I've been using the version two for a long time,


00:01:29.980 --> 00:01:32.860
and I guess kind of like haven't been paying attention


00:01:32.860 --> 00:01:34.680
to the three, but it's been out for a while.


00:01:34.680 --> 00:01:39.220
So the three page talks about,


00:01:39.220 --> 00:01:40.300
basically talks about the,


00:01:40.300 --> 00:01:42.740
it's a new implementation of the most used,


00:01:42.740 --> 00:01:47.340
reliable and feature rich Postgres adapter for Python.


00:01:47.340 --> 00:01:49.080
And there is some differences though.


00:01:49.080 --> 00:01:53.620
So the, apparently most of the two was written in C,


00:01:53.620 --> 00:01:57.480
but three is written in a combination.


00:01:57.480 --> 00:02:01.400
So a lot of it's in Python and some of the speed ups are in C.


00:02:01.400 --> 00:02:06.000
And so the big announcement really is that there are no,


00:02:06.000 --> 00:02:08.740
so we're gonna link to both the three page


00:02:08.740 --> 00:02:09.960
and the features page.


00:02:09.960 --> 00:02:11.760
And the features page has a nice comparison


00:02:11.760 --> 00:02:14.040
of two versus three.


00:02:14.040 --> 00:02:17.220
So really the recommendation is


00:02:17.220 --> 00:02:19.920
they're still going to maintain two,


00:02:19.920 --> 00:02:22.200
but you should maybe think about,


00:02:22.200 --> 00:02:24.160
mostly think about three for new projects.


00:02:24.160 --> 00:02:26.160
So if you already have an existing project


00:02:26.160 --> 00:02:29.220
that's running two, go ahead and leave it running with that.


00:02:29.220 --> 00:02:31.700
I couldn't find where they're doing it,


00:02:31.700 --> 00:02:35.020
when or if or where they're doing announced an end of life.


00:02:35.020 --> 00:02:37.980
So I don't think that's even planned at this point


00:02:37.980 --> 00:02:40.300
for end of life for two, eventually probably.


00:02:40.300 --> 00:02:43.620
But so two has been around since 2006,


00:02:43.620 --> 00:02:47.060
three started in first release in 2021,


00:02:47.060 --> 00:02:49.340
but they've got a whole bunch of cool things in here.


00:02:49.340 --> 00:02:52.140
So some of the things I thought were pretty cool


00:02:52.140 --> 00:02:56.740
was we've got native asyncio support.


00:02:56.740 --> 00:02:58.340
That looks pretty nice.


00:02:58.340 --> 00:03:00.200
Native support for more Python types,


00:03:00.200 --> 00:03:03.440
such as enums and Postgres types.


00:03:03.440 --> 00:03:07.000
So Postgres, one of the cool Postgres types was a multi-range


00:03:07.000 --> 00:03:08.340
so that's supported now.


00:03:08.340 --> 00:03:09.420
That's pretty nice.


00:03:09.420 --> 00:03:13.540
And then I don't know what parameter bindings are actually,


00:03:13.540 --> 00:03:17.340
but apparently two has a client-side parameter bindings


00:03:17.340 --> 00:03:20.940
and three defaults to server-side parameter bindings,


00:03:20.940 --> 00:03:24.580
but you can still do client-side if you want to.


00:03:24.580 --> 00:03:27.340
So lots of fun stuff in here.


00:03:27.340 --> 00:03:32.660
Advanced connection pool, static typing support.


00:03:32.660 --> 00:03:35.680
Yeah, so I say why not try three


00:03:35.680 --> 00:03:39.980
and only go back to two if you really need to.


00:03:39.980 --> 00:03:41.260
- Yeah, this is super exciting.


00:03:41.260 --> 00:03:42.620
Those are a lot of great features.


00:03:42.620 --> 00:03:45.660
I think the async support was previously done


00:03:45.660 --> 00:03:48.000
through a separate library,


00:03:48.000 --> 00:03:49.460
and now it's just part of it.


00:03:49.460 --> 00:03:50.620
That's pretty cool.


00:03:50.620 --> 00:03:51.120
>> Yeah.


00:03:51.120 --> 00:03:52.680
>> The what is the present,


00:03:52.680 --> 00:03:54.380
what is the past, what is the future?


00:03:54.380 --> 00:03:56.180
We'll come back to that in our extras.


00:03:56.180 --> 00:03:57.220
We'll have some fun there.


00:03:57.220 --> 00:03:57.580
>> Okay.


00:03:57.580 --> 00:04:01.520
>> Then also, our audience is awesome.


00:04:01.520 --> 00:04:03.020
My feed letter says, "Hey,


00:04:03.020 --> 00:04:07.820
I migrated PyPI from PsychoPG 2 to 3 in June.


00:04:07.820 --> 00:04:08.900
It was not too hard,


00:04:08.900 --> 00:04:10.220
but took some time to do safely."


00:04:10.220 --> 00:04:12.780
So, hey, when you pip install things or


00:04:12.780 --> 00:04:15.980
PyPI lookup things, it's already using this.


00:04:15.980 --> 00:04:16.420
Awesome.


00:04:16.420 --> 00:04:16.900
>> Yeah.


00:04:16.900 --> 00:04:17.260
>> Yes.


00:04:17.260 --> 00:04:18.620
>> That's cool. Nice.


00:04:18.620 --> 00:04:20.020
>> Indeed, indeed.


00:04:20.020 --> 00:04:22.020
All right, shall we convert some data?


00:04:22.020 --> 00:04:23.020
That's what I got next.


00:04:23.020 --> 00:04:24.020
Sure.


00:04:24.020 --> 00:04:25.020
Let's talk about it.


00:04:25.020 --> 00:04:27.020
So we all know about Pydantic, right?


00:04:27.020 --> 00:04:28.020
And Pydantic is cool.


00:04:28.020 --> 00:04:35.020
So Pydantic lets us create classes that derive from some Pydantic base type, base model.


00:04:35.020 --> 00:04:39.020
And it will do conversions and parsing of JSON and so on.


00:04:39.020 --> 00:04:42.020
But maybe, maybe you know about data classes, right?


00:04:42.020 --> 00:04:43.020
These are built in.


00:04:43.020 --> 00:04:45.020
They're not anything separate.


00:04:45.020 --> 00:04:46.020
They're part of Python itself.


00:04:46.020 --> 00:04:49.020
And so being able to use them is pretty cool.


00:04:49.020 --> 00:04:55.740
and Raymond Peck commented on one of our YouTube videos and said, "Hey, I use this thing called


00:04:55.740 --> 00:05:01.660
Dacite." Hopefully that's the right pronunciation, Dacite. And the idea is it allows you to create


00:05:01.660 --> 00:05:07.660
Python data classes in a similar way. So simple creation of data classes from dictionaries,


00:05:07.660 --> 00:05:13.100
APIs and other things. And you just create a data classes as you normally would, data


00:05:13.100 --> 00:05:21.340
just sort of classes with, you know, global or static level field type, right?


00:05:21.340 --> 00:05:24.980
Like class user name colon string age colon int and so on. They just put the


00:05:24.980 --> 00:05:28.700
data class wrapper on it, right? And it gives it a bunch of nice things like


00:05:28.700 --> 00:05:34.100
hashability, comparability, etc. Right? Constructors. But if you've got a


00:05:34.100 --> 00:05:40.220
dictionary that has sub objects that themselves should be data classes and


00:05:40.220 --> 00:05:41.580
maybe a list of other things,


00:05:41.580 --> 00:05:42.540
there should be data classes,


00:05:42.540 --> 00:05:46.660
actually turning that JSON into one of these


00:05:46.660 --> 00:05:49.440
more complicated versions is a hassle, right?


00:05:49.440 --> 00:05:52.620
You also might need to do data conversion as well,


00:05:52.620 --> 00:05:54.580
right, to make sure that the types match.


00:05:54.580 --> 00:05:56.180
So that's what you can use this for,


00:05:56.180 --> 00:05:57.180
and it's pretty neat.


00:05:57.180 --> 00:05:59.020
You can just say from dict,


00:05:59.020 --> 00:06:00.340
say site.fromdict,


00:06:00.340 --> 00:06:02.780
and you say what data class it's going to go to


00:06:02.780 --> 00:06:04.060
and what the dictionary is,


00:06:04.060 --> 00:06:05.620
and like a little factory method,


00:06:05.620 --> 00:06:07.720
out pops one of these objects.


00:06:07.720 --> 00:06:08.560
Cool, right?


00:06:08.560 --> 00:06:09.660
- Yeah, that's pretty cool.


00:06:09.660 --> 00:06:13.900
- Yeah, and let's see, features include nested structures


00:06:13.900 --> 00:06:17.740
like I described, basic type checking, optional fields,


00:06:17.740 --> 00:06:20.020
union, so if you say it can be an int or a string,


00:06:20.020 --> 00:06:21.780
it'll check that it's one of those two,


00:06:21.780 --> 00:06:24.460
but not a float or something, forward references,


00:06:24.460 --> 00:06:27.620
collections, and interestingly, custom type hooks.


00:06:27.620 --> 00:06:30.180
So for example, you can say anytime that you're gonna take


00:06:30.180 --> 00:06:34.740
a string, actually call string.lower.strip on it


00:06:34.740 --> 00:06:36.700
if it's not null, right, if it's not none,


00:06:36.700 --> 00:06:37.540
things like that, right?


00:06:37.540 --> 00:06:41.340
you can actually get into the parsing side a little bit if you need to.


00:06:41.340 --> 00:06:42.700
So that's pretty neat.


00:06:42.700 --> 00:06:44.220
What else have we got here?


00:06:44.220 --> 00:06:45.380
Let me scroll down.


00:06:45.380 --> 00:06:48.620
Docs, of course, about all the things I said.


00:06:48.620 --> 00:06:50.260
I think that's probably it.


00:06:50.260 --> 00:06:52.660
I guess one thing it's worth pointing out,


00:06:52.660 --> 00:06:54.140
it says right in the docs,


00:06:54.140 --> 00:06:58.300
they say, "It's important to mention that it's not a data validation library."


00:06:58.300 --> 00:07:00.020
Now, when I first read that, I'm like,


00:07:00.020 --> 00:07:01.940
"But there's all these types."


00:07:01.940 --> 00:07:04.660
Is it supposed to find out when I say,


00:07:04.660 --> 00:07:08.100
the thing takes a string and an int and a bool for its three fields,


00:07:08.100 --> 00:07:09.380
like it will actually do that.


00:07:09.380 --> 00:07:14.380
It does that, but you can't say like the string must be this regular expression


00:07:14.380 --> 00:07:17.140
and this many characters and the int has to be positive


00:07:17.140 --> 00:07:19.500
and like those types of things it doesn't do, right?


00:07:19.500 --> 00:07:24.580
So it's just dictionary to object, possibly complex data class object,


00:07:24.580 --> 00:07:27.180
but with type validation and that's about it.


00:07:27.180 --> 00:07:29.980
But still, I think that's super, super useful.


00:07:29.980 --> 00:07:32.420
>> So kind of partway validator things.


00:07:32.420 --> 00:07:37.120
>> Yeah. More like a proper parser without the validation itself.


00:07:37.120 --> 00:07:37.520
>> Yeah.


00:07:37.520 --> 00:07:39.320
>> Yeah. Indeed. So anyway,


00:07:39.320 --> 00:07:40.620
that's what I got for people.


00:07:40.620 --> 00:07:42.460
It was news to me, so check it out.


00:07:42.460 --> 00:07:44.500
>> I think that's pretty neat.


00:07:44.500 --> 00:07:50.140
So I am going to continue on with a topic of,


00:07:50.140 --> 00:07:55.980
I guess, the ever rustification of Python projects.


00:07:55.980 --> 00:07:59.240
This one is one that we use every day, PIP.


00:07:59.240 --> 00:08:05.240
So this was this came to us from Owen, Owen Lamont, I think, Owen Lamont.


00:08:05.240 --> 00:08:06.080
Thanks, Owen.


00:08:06.080 --> 00:08:08.940
So I said, hey, you guys might be interested in this.


00:08:08.940 --> 00:08:12.540
It's a under the project group.


00:08:12.540 --> 00:08:17.380
Prefix dev is rip rip for for a rust


00:08:17.380 --> 00:08:20.000
pip written in rust.


00:08:20.000 --> 00:08:22.440
And I was ready to go try it.


00:08:22.440 --> 00:08:24.680
It's not ready to try yet, but it's still pretty exciting.


00:08:24.980 --> 00:08:30.900
So the kind of the headline fast bare bones pip implementation in Rust.


00:08:30.900 --> 00:08:36.900
And it's not just an installer, though. So it has, it's got, what does it have so far?


00:08:36.900 --> 00:08:44.580
It's got, you can download and aggressively cache PyPI metadata, resolve PyPI packages using a


00:08:44.580 --> 00:08:51.620
project called Resolvo, which is a kind of a Rust thing. And then still on the planned list


00:08:51.620 --> 00:08:53.780
is actually installing the files.


00:08:53.780 --> 00:08:55.860
(laughs)


00:08:55.860 --> 00:09:00.660
I'm just chuckling because, yeah, I just jumped the gun.


00:09:00.660 --> 00:09:04.380
But this is new, so it's fine that it's published early.


00:09:04.380 --> 00:09:07.580
So first commits look like about two weeks ago.


00:09:07.580 --> 00:09:10.260
So I'm pretty excited about this.


00:09:10.260 --> 00:09:13.260
I think it'd be fun to try it out


00:09:13.260 --> 00:09:16.340
and look at possibly different resolvers


00:09:16.340 --> 00:09:19.780
and how they handled it versus normal pip.


00:09:19.780 --> 00:09:20.840
So kind of neat.


00:09:20.840 --> 00:09:24.060
- Yeah, when I saw this too, I was pretty excited.


00:09:24.060 --> 00:09:25.660
So thanks, Owen, for sending this in.


00:09:25.660 --> 00:09:26.860
Yeah, it's cool.


00:09:26.860 --> 00:09:28.940
And Mike says, "Let her rip."


00:09:28.940 --> 00:09:29.780
I love it.


00:09:29.780 --> 00:09:33.920
- Yeah, so it looks like maybe we should've


00:09:33.920 --> 00:09:37.460
swapped these last two topics, but I don't know.


00:09:37.460 --> 00:09:39.700
Let's go with your next topic.


00:09:39.700 --> 00:09:41.860
- Well, I do think that this one


00:09:41.860 --> 00:09:43.200
would've been pretty good for you to cover,


00:09:43.200 --> 00:09:46.340
but too bad, I'm already on it, so here we go.


00:09:46.340 --> 00:09:48.180
I guess the only stronger tie-in to me


00:09:48.180 --> 00:09:50.320
is it's in response to a Talk Python episode.


00:09:50.320 --> 00:09:53.000
So this one comes to us from Marwin,


00:09:53.000 --> 00:09:54.720
and thank you Marwin for sending it in


00:09:54.720 --> 00:09:56.480
and writing this article called,


00:09:56.480 --> 00:09:59.280
"How Not to Footgun Yourself When Writing Tests,


00:09:59.280 --> 00:10:01.120
"A Showcase of Flaky Tests."


00:10:01.120 --> 00:10:03.280
And it says, "I was writing this article


00:10:03.280 --> 00:10:05.500
"after listening to talk Python


00:10:05.500 --> 00:10:08.720
"with Gregory Kampfhammer and Owen Perry


00:10:08.720 --> 00:10:10.120
"talking about flaky tests."


00:10:10.120 --> 00:10:11.760
So that was the subject of that.


00:10:11.760 --> 00:10:14.820
Basically talked about all of their experience here,


00:10:14.820 --> 00:10:17.460
which is cool, like a definition,


00:10:17.460 --> 00:10:20.040
and really a lot of examples of flaky tests.


00:10:20.040 --> 00:10:22.540
I mean, you know, Brian, did you get to check any of these out?


00:10:22.540 --> 00:10:23.820
I haven't looked at this yet.


00:10:23.820 --> 00:10:24.120
No.


00:10:24.120 --> 00:10:26.000
Well, we'll do it live.


00:10:26.000 --> 00:10:26.240
Okay.


00:10:26.240 --> 00:10:26.560
Okay.


00:10:26.560 --> 00:10:32.220
So the first one is, really about concurrency and said, well, look, I've


00:10:32.220 --> 00:10:35.620
got a bunch of tests, maybe I could speed them up by using threading and run a bunch


00:10:35.620 --> 00:10:35.880
of them.


00:10:35.880 --> 00:10:36.520
Oh yeah.


00:10:36.520 --> 00:10:37.160
That'd be fun.


00:10:37.160 --> 00:10:43.060
However, there's a real simple example of like, Hey, I've got an account and I can


00:10:43.060 --> 00:10:44.960
transfer money from one account to the other.


00:10:44.960 --> 00:10:49.100
So first account that withdraw this amount and then second account deposit that


00:10:49.260 --> 00:10:49.980
Um, out, right.


00:10:49.980 --> 00:10:51.020
And how could that go wrong?


00:10:51.020 --> 00:10:54.500
So do a bunch of those and a, Hey, if we want to make those faster, let's


00:10:54.500 --> 00:10:57.000
run them in some threads, right.


00:10:57.000 --> 00:10:59.780
Rather than using, say, one of the PI test plugins, like more properly, right.


00:10:59.780 --> 00:11:02.300
This is more to highlight, like what might go wrong, you know?


00:11:02.300 --> 00:11:07.940
Um, and it turns out that we have the GIL and I think, I think Marlon's right.


00:11:07.940 --> 00:11:11.100
I think people do think that, the GIL will just kind of


00:11:11.100 --> 00:11:12.980
save you from concurrency.


00:11:12.980 --> 00:11:13.480
Right.


00:11:13.480 --> 00:11:15.300
Because only one thing can run at a time.


00:11:15.300 --> 00:11:16.640
So how are you going to have a problem?


00:11:16.640 --> 00:11:18.220
Well, well, it's one thing.


00:11:18.340 --> 00:11:21.980
It's one kind of bytecode at a time.


00:11:21.980 --> 00:11:23.960
- Exactly, one Python bytecode.


00:11:23.960 --> 00:11:24.800
But here's the thing,


00:11:24.800 --> 00:11:26.900
if your program ever enters


00:11:26.900 --> 00:11:30.220
into a temporarily invalid state, ever,


00:11:30.220 --> 00:11:35.220
you may need some kind of concurrency locks or something.


00:11:35.220 --> 00:11:38.180
And I think, my reading of Python stuff,


00:11:38.180 --> 00:11:39.660
I don't see this very often.


00:11:39.660 --> 00:11:41.520
And I think actually a lot of people


00:11:41.520 --> 00:11:44.060
should be doing more locks, honestly.


00:11:44.060 --> 00:11:46.380
So even in this example, I withdraw some money.


00:11:46.380 --> 00:11:47.620
And now for just a moment,


00:11:47.620 --> 00:11:51.940
program is in a temporarily, temporarily invalid state until it's deposited


00:11:51.940 --> 00:11:53.200
into the other account, right?


00:11:53.200 --> 00:11:53.380
Yeah.


00:11:53.380 --> 00:11:54.880
So that's this moment.


00:11:54.880 --> 00:11:58.520
Like if the Gill says, okay, you ran enough, we're going to switch to the


00:11:58.520 --> 00:12:02.440
other one, then somebody tries to, the other one reads that state.


00:12:02.440 --> 00:12:03.740
That's going to be trouble.


00:12:03.740 --> 00:12:04.160
Right?


00:12:04.160 --> 00:12:07.020
So they were talking about, well, how do you actually, you


00:12:07.020 --> 00:12:08.700
know, how do you actually check this?


00:12:08.700 --> 00:12:10.920
And here's something I actually didn't even know.


00:12:10.920 --> 00:12:15.980
There's look, you can actually make that switching back and forth more aggressive.


00:12:16.180 --> 00:12:20.860
You can control that switching that the, the GIL does on the, how much I thought


00:12:20.860 --> 00:12:25.660
on one thread it'll do before it switches to another by getting the switch interval.


00:12:25.660 --> 00:12:28.460
And here they set it to one 10th of a millisecond.


00:12:28.460 --> 00:12:29.180
Oh wow.


00:12:29.180 --> 00:12:31.680
And then they do a bunch of work and then they put it back.


00:12:31.680 --> 00:12:32.960
And that's pretty interesting.


00:12:32.960 --> 00:12:33.900
Did you know you could do that?


00:12:33.900 --> 00:12:35.740
I didn't, this is pretty cool.


00:12:35.740 --> 00:12:39.060
To, I know this, this might be worth covering the article right here.


00:12:39.060 --> 00:12:40.060
Just that, you know?


00:12:40.060 --> 00:12:40.640
Yeah.


00:12:40.640 --> 00:12:41.660
Good for, yeah.


00:12:41.660 --> 00:12:43.780
For testing these race conditions.


00:12:43.780 --> 00:12:44.760
Yes, exactly.


00:12:44.760 --> 00:12:45.920
Like make it, make it worse.


00:12:46.140 --> 00:12:48.480
And also running on more cores, potentially.


00:12:48.480 --> 00:12:50.320
I don't know, probably that doesn't too much matter.


00:12:50.320 --> 00:12:52.360
Okay, so to avoid boilerplate,


00:12:52.360 --> 00:12:54.760
you can reach out to the pytest Repeat plugin.


00:12:54.760 --> 00:12:56.520
Weren't you just talking about this?


00:12:56.520 --> 00:12:57.520
I know you're doing some stuff with it.


00:12:57.520 --> 00:12:59.960
- Yeah, I'm one of the maintainers on it now.


00:12:59.960 --> 00:13:00.840
There's my picture.


00:13:00.840 --> 00:13:02.200
- Yeah, I feel like you, yeah,


00:13:02.200 --> 00:13:05.280
I feel like you had actually just mentioned it.


00:13:05.280 --> 00:13:07.720
Maybe it was the Git article or something,


00:13:07.720 --> 00:13:09.400
but anyway, recently I thought you were just talking about this.


00:13:09.400 --> 00:13:10.640
- Yeah, last week, so.


00:13:10.640 --> 00:13:11.600
- Yeah, exactly.


00:13:11.600 --> 00:13:13.520
Also worth pointing out,


00:13:13.520 --> 00:13:15.360
a similar and more straightforward plugin,


00:13:15.360 --> 00:13:18.720
possibly for this job is pytest Flake Finder,


00:13:18.720 --> 00:13:20.600
which is meant to find flaky tests.


00:13:20.600 --> 00:13:25.260
>> Oh, yeah. Let's just hang out for here.


00:13:25.260 --> 00:13:28.160
One of the differences they're saying is that you can


00:13:28.160 --> 00:13:30.000
repeat your test multiple times with


00:13:30.000 --> 00:13:31.820
repeat or Flake Finder,


00:13:31.820 --> 00:13:33.460
you can repeat your whole suite.


00:13:33.460 --> 00:13:36.440
That's one of the things I need to change for repeat,


00:13:36.440 --> 00:13:38.360
because you can do the same thing with repeat.


00:13:38.360 --> 00:13:39.960
You can run the whole suite.


00:13:39.960 --> 00:13:43.280
It's just hidden in two lines of the readme,


00:13:43.280 --> 00:13:45.000
and it needs to be more bolded that you


00:13:45.000 --> 00:13:47.720
you can change the scope and repeat the whole thing.


00:13:47.720 --> 00:13:51.760
>> Nice. Randomness, for example,


00:13:51.760 --> 00:13:53.760
algorithms that are non-deterministic,


00:13:53.760 --> 00:13:57.120
like heuristic ones, so that's pretty interesting.


00:13:57.120 --> 00:13:58.840
So they do, what is this,


00:13:58.840 --> 00:14:02.000
like a distance algorithm or something that's heuristic.


00:14:02.000 --> 00:14:04.720
So they say like NP-close,


00:14:04.720 --> 00:14:07.040
which they're testing on NP-close,


00:14:07.040 --> 00:14:11.280
whereas NumPy, like are these vectors close?


00:14:11.280 --> 00:14:17.200
says basically fix this by actually, you know, computing the tolerance and they use a little statistics like


00:14:17.200 --> 00:14:23.800
probably more statistics than I know, but let's say three standard deviations away, something like that.


00:14:23.800 --> 00:14:29.200
It's interesting. Obviously floating point arithmetic is always trouble, loss of precision is always trouble.


00:14:29.200 --> 00:14:37.200
But one they talk about here that's interesting is using integers, like integers in Python


00:14:37.200 --> 00:14:42.480
are arbitrarily large, which I think probably complicates C interoperability


00:14:42.480 --> 00:14:47.680
every now and then, but otherwise it's like a good thing generally. However, if you're doing NumPy,


00:14:47.680 --> 00:14:57.360
NumPy has C backing for a lot of its types, right? Like int32 and so on. So you could end up with,


00:14:57.360 --> 00:15:03.520
if you specify a particular data type in there, when you create your array, right? Data type is


00:15:03.520 --> 00:15:10.200
is NP and 32, then you do have to care about the 2.14 billion limit, right?


00:15:10.200 --> 00:15:11.200
Yeah.


00:15:11.200 --> 00:15:13.960
I mean, you probably know that all the time from C, right?


00:15:13.960 --> 00:15:19.080
You got to worry about variable sizes and signed, unsigned shorts and whatever.


00:15:19.080 --> 00:15:20.080
Yeah.


00:15:20.080 --> 00:15:21.080
And be careful about the order of operations.


00:15:21.080 --> 00:15:24.600
So you don't overflow in the middle of an operator, a set of operations.


00:15:24.600 --> 00:15:25.600
Yeah.


00:15:25.600 --> 00:15:26.600
Let's see.


00:15:26.600 --> 00:15:30.320
There's some interesting things about buzzing your data, like sending a bunch of crazy data


00:15:30.320 --> 00:15:34.080
or even using hypothesis to try to find edge cases,


00:15:34.080 --> 00:15:36.080
timeouts for external systems,


00:15:36.080 --> 00:15:37.880
be like super explicit about those.


00:15:37.880 --> 00:15:40.080
So there's just a bunch of cool examples.


00:15:40.080 --> 00:15:43.920
And you're like, this is a really properly long article here.


00:15:43.920 --> 00:15:46.680
So I think it really highlights a lot of good examples.


00:15:46.680 --> 00:15:48.240
Follow up to that podcast episode,


00:15:48.240 --> 00:15:49.840
but just good for testing as well.


00:15:49.840 --> 00:15:51.880
- Yeah, I can't wait to read that more closely


00:15:51.880 --> 00:15:53.400
and listen to that episode.


00:15:53.400 --> 00:15:55.600
I have to admit, I haven't listened to it yet.


00:15:55.600 --> 00:15:56.800
- Yeah, it's a good one.


00:15:56.800 --> 00:15:59.360
Blaze out in the audience wonders


00:15:59.360 --> 00:16:01.880
if we have to reinvent these corner cases for Rust?


00:16:01.880 --> 00:16:04.120
I imagine we probably do, Blaise. Good point.


00:16:04.120 --> 00:16:05.400
Yeah, possibly.


00:16:05.400 --> 00:16:07.400
How extra are you feeling, Brian?


00:16:07.400 --> 00:16:09.000
I'm feeling pretty extra.


00:16:09.000 --> 00:16:11.320
Actually, myself, not too much.


00:16:11.320 --> 00:16:13.320
I've just, I've been


00:16:13.320 --> 00:16:15.880
I've been actually doing a lot of personal projects.


00:16:15.880 --> 00:16:17.880
So I haven't been doing a lot of


00:16:17.880 --> 00:16:19.760
work projects to announce.


00:16:19.760 --> 00:16:21.480
However, those are wrapping up.


00:16:21.480 --> 00:16:23.000
The personal stuff's wrapping up. So


00:16:23.000 --> 00:16:26.720
I hope to get more Python people and Python test episodes out soon


00:16:26.720 --> 00:16:28.840
and more course chapters coming.


00:16:28.840 --> 00:16:30.400
So everything in due time.


00:16:30.400 --> 00:16:30.940
Nice.


00:16:30.940 --> 00:16:31.620
How about you?


00:16:31.620 --> 00:16:33.840
Uh, I have some extras as well.


00:16:33.840 --> 00:16:36.820
First, I just got back from Pi Bay last night.


00:16:36.820 --> 00:16:38.420
So that was a lot of fun.


00:16:38.420 --> 00:16:40.560
Pi Bay is always a good time.


00:16:40.560 --> 00:16:42.320
If I can zoom out and get the video to play even.


00:16:42.320 --> 00:16:45.780
So really cool environment and saw, you know, nice to


00:16:45.780 --> 00:16:46.540
meet a lot of people there.


00:16:46.540 --> 00:16:49.120
So for those of you I met, great to meet you.


00:16:49.120 --> 00:16:52.720
Also, I just want to give a shout out to Sparkmail.


00:16:52.720 --> 00:16:55.580
I just started using Sparkmail to try to kind of unify some stuff.


00:16:55.580 --> 00:16:59.980
What a cool, what a cool app for MacOS email.


00:16:59.980 --> 00:17:03.860
So people, if they're, if you're like fed up, was using different


00:17:03.860 --> 00:17:05.660
web front ends for different things.


00:17:05.660 --> 00:17:07.540
And it was like, ah, they're all a little bit different.


00:17:07.540 --> 00:17:09.380
One has E for archive.


00:17:09.380 --> 00:17:12.980
One has A for archive, but like Proton Mail, like the A for


00:17:12.980 --> 00:17:14.940
archive only periodically works.


00:17:14.940 --> 00:17:17.660
Sometimes it works and then you're like, why is it so frustrating?


00:17:17.660 --> 00:17:21.380
Like maybe I could just use one thing and all in that was really fun.


00:17:21.380 --> 00:17:24.860
So also I think a big part of the development team is in Ukraine.


00:17:24.860 --> 00:17:28.100
And so happy to be supporting those folks as well.


00:17:28.100 --> 00:17:28.660
Nice.


00:17:28.660 --> 00:17:33.620
So somewhere it says like made, from, you know, made, made from like


00:17:33.620 --> 00:17:36.140
hello from Ukraine or something like that, which is cool.


00:17:36.140 --> 00:17:39.940
However, one of the challenges is one of my personal email domains


00:17:39.940 --> 00:17:41.700
is actually backed by Proton Mail.


00:17:41.700 --> 00:17:46.100
I think I talked about that before, but Proton Mail has end to end encryption.


00:17:46.100 --> 00:17:49.420
And so you can't talk to it with a third party email client, right?


00:17:49.420 --> 00:17:49.900
Okay.


00:17:49.900 --> 00:17:51.700
Because it can't decrypt it.


00:17:51.700 --> 00:17:54.380
It doesn't use IMAP, at least not directly.


00:17:54.540 --> 00:17:58.340
So if you use ProtonMail and you want to have something


00:17:58.340 --> 00:18:00.220
that is not, you know, there's a proper,


00:18:00.220 --> 00:18:01.780
like a standard email client,


00:18:01.780 --> 00:18:04.700
you can install this thing called Proton,


00:18:04.700 --> 00:18:05.540
what's it called?


00:18:05.540 --> 00:18:06.380
Bridge?


00:18:06.380 --> 00:18:07.820
ProtonMailBridge is its name.


00:18:07.820 --> 00:18:10.420
And what it is it runs locally on your computer.


00:18:10.420 --> 00:18:12.260
It does all the end-to-end encryption


00:18:12.260 --> 00:18:16.180
and then puts it like, it has a password protected


00:18:16.180 --> 00:18:18.620
but not end-to-end encrypted IMAP thing


00:18:18.620 --> 00:18:20.140
that just runs on localhost.


00:18:20.140 --> 00:18:22.540
So you just attach to localhost for your IMAP


00:18:22.540 --> 00:18:25.180
and you have ProtonMail plugged into, you know,


00:18:25.180 --> 00:18:26.820
their example is our Outlook,


00:18:26.820 --> 00:18:29.660
which just made me get a little wheezy just thinking about it.


00:18:29.660 --> 00:18:31.660
But you know, it also works on SparkMail


00:18:31.660 --> 00:18:33.180
and other nice things.


00:18:33.180 --> 00:18:36.260
So I had been using SuperHuman, which was really nice,


00:18:36.260 --> 00:18:39.140
but that's only Gmail, which is such a hassle.


00:18:39.140 --> 00:18:42.140
So this works for anything, which makes me super happy.


00:18:42.140 --> 00:18:42.980
- Yeah, I don't think I'm using--


00:18:42.980 --> 00:18:43.820
- What do you do for email?


00:18:43.820 --> 00:18:45.540
- I just use the web clients,


00:18:45.540 --> 00:18:48.500
but mostly it's FastMail for email.


00:18:48.500 --> 00:18:49.700
- Yeah, nice.


00:18:49.700 --> 00:18:51.460
That's what I had been doing for 10 years,


00:18:51.460 --> 00:18:53.240
but I just kind of like, there were just too many


00:18:53.240 --> 00:18:54.680
and they were, I don't know, weird.


00:18:54.680 --> 00:18:55.520
And I'm like, let me try this.


00:18:55.520 --> 00:18:56.340
I really like it.


00:18:56.340 --> 00:18:58.000
- I think I will check it out.


00:18:58.000 --> 00:18:59.840
One of the things you brought up Outlook,


00:18:59.840 --> 00:19:03.240
I thought it was, I have to use Outlook for work


00:19:03.240 --> 00:19:07.040
and it still drives me crazy that Control + F


00:19:07.040 --> 00:19:09.520
is not find, it's forward.


00:19:09.520 --> 00:19:11.760
- Oh my gosh, yes.


00:19:11.760 --> 00:19:12.640
- It's terrible.


00:19:12.640 --> 00:19:13.560
- Yeah, this thing is nice.


00:19:13.560 --> 00:19:16.000
Like it has sort of digital wellbeing stuff


00:19:16.000 --> 00:19:18.600
where it will only show you, you can have it time out.


00:19:18.600 --> 00:19:19.800
So it brings you to this thing like,


00:19:19.800 --> 00:19:22.920
"Hey, check your email just like two or three times a day.


00:19:22.920 --> 00:19:25.240
Show me on this little list here that'll just show,


00:19:25.240 --> 00:19:26.760
like say, people that are important to me,


00:19:26.760 --> 00:19:27.600
but nobody else."


00:19:27.600 --> 00:19:29.440
You can block senders.


00:19:29.440 --> 00:19:30.600
It's pretty sweet.


00:19:30.600 --> 00:19:31.640
- Nice, cool.


00:19:31.640 --> 00:19:32.720
- Yeah, yeah, yeah.


00:19:32.720 --> 00:19:36.640
Okay, next, where I hinted at before,


00:19:36.640 --> 00:19:41.320
is I ran across this YouTube channel called Dust.


00:19:41.320 --> 00:19:44.500
Man, are they making amazing science fiction.


00:19:44.500 --> 00:19:45.580
Have you seen this?


00:19:45.580 --> 00:19:47.240
- Just, you shared it with me last week.


00:19:47.240 --> 00:19:48.160
It was pretty cool.


00:19:48.160 --> 00:19:50.900
Yeah, it's just this independent channel


00:19:50.900 --> 00:19:55.120
and they are posting like new, if you like short sci-fi,


00:19:55.120 --> 00:19:58.080
like 10, 20 minutes sci-fi stories,


00:19:58.080 --> 00:20:00.600
the production quality is just off the charts.


00:20:00.600 --> 00:20:03.360
So I recommend to people actually interested in this,


00:20:03.360 --> 00:20:04.640
FTL, Faster Than Light,


00:20:04.640 --> 00:20:06.520
which is about faster than light travel.


00:20:06.520 --> 00:20:11.000
And it's pretty neat, like the graphics and stuff is,


00:20:11.000 --> 00:20:13.240
it's surprisingly good for what it is.


00:20:13.240 --> 00:20:14.340
So people can check that out.


00:20:14.340 --> 00:20:21.420
And also one called, called Oceanus, which is like about this, sort of underwater


00:20:21.420 --> 00:20:24.220
world and yeah, it's like this one's 30 minutes.


00:20:24.220 --> 00:20:25.220
It's long.


00:20:25.220 --> 00:20:30.140
But anyway, if people want, you know, short form science fiction, this is pretty awesome.


00:20:30.140 --> 00:20:31.140
I'll link to it in the show notes.


00:20:31.140 --> 00:20:32.140
Oh, that's pretty cool.


00:20:32.140 --> 00:20:33.140
Yeah.


00:20:33.140 --> 00:20:35.220
Blaze out there says FTL is a great short.


00:20:35.220 --> 00:20:36.220
I totally agree.


00:20:36.220 --> 00:20:37.740
It's a very, very well done.


00:20:37.740 --> 00:20:38.740
Yeah.


00:20:38.740 --> 00:20:43.020
And it's not always the Hollywood, like, of course the good person has to, you know, the


00:20:43.020 --> 00:20:44.780
has to triumph at the end of course,


00:20:44.780 --> 00:20:46.220
it's just a matter of how.


00:20:46.220 --> 00:20:47.060
Yeah, you never know.


00:20:47.060 --> 00:20:48.780
Some of these are pretty open-ended,


00:20:48.780 --> 00:20:51.140
as you might expect a 10-minute show to be.


00:20:51.140 --> 00:20:54.580
- Well, you know, I think there's some half-hour shows


00:20:54.580 --> 00:20:56.900
on TV that really are only like 15 minutes


00:20:56.900 --> 00:20:57.860
if you take the commercials out.


00:20:57.860 --> 00:20:58.700
- I know.


00:20:58.700 --> 00:20:59.940
A lot of the comments on,


00:20:59.940 --> 00:21:02.140
if you look at like the FTL one, for example,


00:21:02.140 --> 00:21:02.980
the comments are like,


00:21:02.980 --> 00:21:06.220
"This is a better show than Hollywood studios make


00:21:06.220 --> 00:21:08.340
"with millions of dollars and large teams.


00:21:08.340 --> 00:21:09.340
"Like, how are you all doing this?"


00:21:09.340 --> 00:21:11.820
So, anyway, I thought people might appreciate this


00:21:11.820 --> 00:21:14.280
us given our audiences probably a little bit techie.


00:21:14.280 --> 00:21:14.720
Yeah.


00:21:14.720 --> 00:21:15.180
Cool.


00:21:15.180 --> 00:21:15.580
Right.


00:21:15.580 --> 00:21:19.240
If you, everyone did this, like rewrite your, your software, like some


00:21:19.240 --> 00:21:22.900
old junkie thing, wrote it in some old code, you're going to rewrite the new


00:21:22.900 --> 00:21:25.560
awesomeness, frequently.


00:21:25.560 --> 00:21:25.900
Yes.


00:21:25.900 --> 00:21:29.000
There is an amazing, so this is the joke.


00:21:29.000 --> 00:21:34.680
So there's an amazing video, music video, which is a parody on American pie.


00:21:34.680 --> 00:21:37.180
And for those of you who are not familiar with American pie, it's


00:21:37.180 --> 00:21:38.240
one, it's a really great song.


00:21:38.240 --> 00:21:39.540
Oh, you see what it's eight.


00:21:39.540 --> 00:21:40.340
No, I'm not seeing it.


00:21:40.340 --> 00:21:42.220
(laughing)


00:21:42.220 --> 00:21:44.380
It's eight and a half minutes long.


00:21:44.380 --> 00:21:48.620
And so this guy, Dylan Beatty, he's really talented.


00:21:48.620 --> 00:21:52.380
And he redid one that basically is like a journey


00:21:52.380 --> 00:21:55.500
through all the follies of his different perspectives


00:21:55.500 --> 00:21:57.020
through his programming career.


00:21:57.020 --> 00:21:59.580
And it starts out in like assembly,


00:21:59.580 --> 00:22:01.720
and then it goes, I don't know what it's the next one.


00:22:01.720 --> 00:22:03.300
Is it VB6 or something?


00:22:03.300 --> 00:22:06.580
And then, oh, it's just, it's an amazing, amazing thing.


00:22:06.580 --> 00:22:08.140
But eight and a half minutes, I'm not gonna play it.


00:22:08.140 --> 00:22:10.540
So I'm just going to say, go watch the video.


00:22:10.540 --> 00:22:11.380
- Yeah.


00:22:11.380 --> 00:22:12.620
- I'm sure it will connect with you.


00:22:12.620 --> 00:22:13.460
What do you think, Brian?


00:22:13.460 --> 00:22:14.280
- It's very good.


00:22:14.280 --> 00:22:15.660
And then check out his channel


00:22:15.660 --> 00:22:18.700
'cause there's a bunch of great nerdy videos on his channel.


00:22:18.700 --> 00:22:19.580
So it's good.


00:22:19.580 --> 00:22:20.540
- Yeah, if we scroll down here,


00:22:20.540 --> 00:22:22.780
what will we find in the recommended?


00:22:22.780 --> 00:22:24.500
You give Rest a bad name.


00:22:24.500 --> 00:22:25.340
- That's funny.


00:22:25.340 --> 00:22:26.660
That was a good one, yeah.


00:22:26.660 --> 00:22:27.780
- The bug in the JavaScript,


00:22:27.780 --> 00:22:29.180
I think we featured before,


00:22:29.180 --> 00:22:33.540
but it's like starting to think I might need a drink


00:22:33.540 --> 00:22:36.260
because the bug is in the JavaScript.


00:22:36.260 --> 00:22:37.660
- That's pretty good, yeah.


00:22:37.660 --> 00:22:38.660
>>Fun.


00:22:38.660 --> 00:22:39.660
>>Yeah, fun.


00:22:39.660 --> 00:22:46.300
Anyway, so this is an entry point into quite a bit of time of programmer fun ideas.


00:22:46.300 --> 00:22:48.780
>>Okay, so that's a programmer one.


00:22:48.780 --> 00:22:53.900
I've got like a dad joke, science joke that I wanted to share because I just ran across


00:22:53.900 --> 00:22:57.940
it recently and I just thought it was so funny.


00:22:57.940 --> 00:22:59.740
So it's just a comment.


00:22:59.740 --> 00:23:04.300
There are more hydrogen atoms in a single molecule of water than there are stars in


00:23:04.300 --> 00:23:06.420
the entire solar system.


00:23:06.420 --> 00:23:10.260
And I talked to several people about it and they just looked at me blankly and said, "That


00:23:10.260 --> 00:23:11.260
can't be true."


00:23:11.260 --> 00:23:17.460
I'm like, "Sure, there's two hydrogen atoms in a molecule of water and there's one star


00:23:17.460 --> 00:23:18.460
in our solar system."


00:23:18.460 --> 00:23:22.140
>> That's awesome.


00:23:22.140 --> 00:23:23.700
And those two hydrogen atoms.


00:23:23.700 --> 00:23:25.780
Did the hydrogen atoms come from stars?


00:23:25.780 --> 00:23:27.780
I don't know, were they just the stars?


00:23:27.780 --> 00:23:29.500
Anything larger than that should have come from stars.


00:23:29.500 --> 00:23:30.500
Yeah, that's awesome.


00:23:30.500 --> 00:23:31.500
I love it.


00:23:31.500 --> 00:23:36.140
It does make you think, because like if you think galaxy, universe, whatever, right?


00:23:36.140 --> 00:23:36.980
- Yeah.


00:23:36.980 --> 00:23:39.700
- But solar system, I mean, solar, singular.


00:23:39.700 --> 00:23:42.100
- Yeah, and I had, it was funny, some of the comments


00:23:42.100 --> 00:23:46.540
were like trying to calculate the volume of the water


00:23:46.540 --> 00:23:48.700
and how many atoms might be there.


00:23:48.700 --> 00:23:52.180
No, it's not atoms, it's a single molecule of water,


00:23:52.180 --> 00:23:55.380
not a glass of it, so pretty funny.


00:23:55.380 --> 00:23:56.380
- Yeah, that's how I first started, like,


00:23:56.380 --> 00:23:57.860
well, how large is the glass?


00:23:57.860 --> 00:23:59.300
How many, okay, how many molars is that,


00:23:59.300 --> 00:24:01.940
and how many, oh wait, that's not what it says at all,


00:24:01.940 --> 00:24:02.980
that's irrelevant.


00:24:02.980 --> 00:24:03.820
- Yeah.


00:24:03.820 --> 00:24:04.640
- I love it.


00:24:04.640 --> 00:24:05.480
- Anyway.


00:24:05.480 --> 00:24:05.980
Cool.


00:24:05.980 --> 00:24:06.480
Wow.


00:24:06.480 --> 00:24:08.400
Once again, great chatting with you weekly.


00:24:08.400 --> 00:24:09.180
Yep.


00:24:09.180 --> 00:24:09.920
You as well.


00:24:09.920 --> 00:24:11.840
And thanks to everyone for listening.


00:24:11.840 --> 00:24:12.580
See y'all later.

