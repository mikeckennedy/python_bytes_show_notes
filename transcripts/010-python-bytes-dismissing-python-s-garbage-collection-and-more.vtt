
00:00:00.000 --> 00:00:05.000
This is Python Bytes, Python headlines and news delivered directly to your earbuds.


00:00:05.000 --> 00:00:10.000
It's episode 10, recorded Monday, January 23rd, 2016.


00:00:10.000 --> 00:00:12.000
This is Michael Kennedy. I'm here with Brian Aukin.


00:00:12.000 --> 00:00:15.000
Hey, Brian. You ready to talk about Python for the week?


00:00:15.000 --> 00:00:16.000
I'm very ready, yes.


00:00:16.000 --> 00:00:21.000
Yeah, we got some really cool stuff, and we have a pretty interesting data story to wrap things up


00:00:21.000 --> 00:00:25.000
where people are out rescuing data with Python, I'm pretty sure.


00:00:25.000 --> 00:00:29.000
So, let's save that for the end and let's get started with time.


00:00:29.000 --> 00:00:35.800
We had mentioned in episode 7 that Matplotlib 2.0 was coming out, and it is.


00:00:35.800 --> 00:00:38.100
It's official now as of January 17th.


00:00:38.100 --> 00:00:42.100
And there's an article from a website called BlackArbs


00:00:42.100 --> 00:00:46.600
called "Advanced Time Series Plots in Python."


00:00:46.600 --> 00:00:50.800
And I thought it was a nice focused tutorial.


00:00:50.800 --> 00:00:56.000
Matplotlib does a whole bunch of stuff, and it's a little bit overwhelming if you only use it once in a while.


00:00:56.000 --> 00:00:58.920
So this is a focused tutorial.


00:00:58.920 --> 00:00:59.440
It's good.


00:00:59.440 --> 00:01:03.240
It uses Pandas, NumPy, Matplotlib, of course,


00:01:03.240 --> 00:01:06.760
and a library called Seaborn that I had never heard of before.


00:01:06.760 --> 00:01:10.800
It's a statistical data visualization add-on, I think,


00:01:10.800 --> 00:01:12.000
for Matplotlib.


00:01:12.000 --> 00:01:12.760
Looks good.


00:01:12.760 --> 00:01:14.840
But the article goes on with--


00:01:14.840 --> 00:01:19.120
starts with an empty XY chart and gets some financial data


00:01:19.120 --> 00:01:22.000
from Yahoo and does some manipulation of it


00:01:22.000 --> 00:01:23.200
to plot it out.


00:01:23.200 --> 00:01:26.840
But then, now the defaults aren't ever exactly what you want.


00:01:26.840 --> 00:01:32.920
So this tutorial goes through how to add like shaded areas for,


00:01:32.920 --> 00:01:39.340
in this example it was for times where there were recessions.


00:01:39.340 --> 00:01:42.240
If there's something special about part of your data you want to highlight,


00:01:42.240 --> 00:01:44.040
there's a way to do that.


00:01:44.040 --> 00:01:48.400
Adding chart titles and axis labels and styling the legend.


00:01:48.400 --> 00:01:51.080
I never knew you could do this, the different formatting for


00:01:51.080 --> 00:01:56.360
the XY tick labels and if like this chart had both positive and negative


00:01:56.360 --> 00:02:03.040
numbers and if you want to draw a zero line or a line anywhere that's a


00:02:03.040 --> 00:02:07.040
horizontal line shows how to do that. Turning on data points and one of the


00:02:07.040 --> 00:02:10.560
things I didn't even know you could do a couple things were to put chart


00:02:10.560 --> 00:02:16.640
annotations for to describe specific plot points and then put arrows pointing


00:02:16.640 --> 00:02:20.320
to that piece of the data.


00:02:20.320 --> 00:02:23.880
And then adding logos and watermarks over the top.


00:02:23.880 --> 00:02:26.800
And it's a nice, short, concise tutorial.


00:02:26.800 --> 00:02:27.640
I like it.


00:02:27.640 --> 00:02:28.460
- Yeah, it's really nice.


00:02:28.460 --> 00:02:30.320
And it's super approachable.


00:02:30.320 --> 00:02:32.280
It just shows you, like, here's the code steps


00:02:32.280 --> 00:02:33.240
from here to there.


00:02:33.240 --> 00:02:36.240
Get some financial data from Yahoo and do some graphs.


00:02:36.240 --> 00:02:39.120
And yeah, if you need to graph stuff, right,


00:02:39.120 --> 00:02:40.600
Python is getting better and better.


00:02:40.600 --> 00:02:42.600
So very, very nice.


00:02:42.600 --> 00:02:45.920
Speaking of pictures, Instagram has a lot of pictures.


00:02:45.920 --> 00:02:53.700
Yeah, yeah, and they actually run a significant amount of traffic through Django and through


00:02:53.700 --> 00:02:54.700
Python.


00:02:54.700 --> 00:02:59.380
They use a pretty interesting way of configuring their servers.


00:02:59.380 --> 00:03:03.800
It's not at all unlike the way I do for my talk Python websites as well in fact, Python


00:03:03.800 --> 00:03:05.080
bytes as well.


00:03:05.080 --> 00:03:10.380
And so let me just quote from their little article here and says how we run our web server.


00:03:10.380 --> 00:03:15.000
Instagram's web servers run Django in a multi process mode with a master that process that


00:03:15.000 --> 00:03:19.880
forks itself a dozens of times to create worker process that actually handle the requests.


00:03:19.880 --> 00:03:24.400
And they're doing that with micro WSGI in a pre fork mode so they can leverage shared


00:03:24.400 --> 00:03:31.800
memory across the master and the 2050 whatever worker processes that it controls because


00:03:31.800 --> 00:03:33.800
they're all kind of running the same code for the most part.


00:03:33.800 --> 00:03:38.160
So why do you need, you know, 20 copies of Python loaded into memory and things like


00:03:38.160 --> 00:03:39.160
that.


00:03:39.160 --> 00:03:40.160
Right.


00:03:40.160 --> 00:03:42.760
So they're thinking about how can they get their code to run faster?


00:03:42.760 --> 00:03:50.380
How can they run more of these forked processes and basically add more concurrency per server?


00:03:50.380 --> 00:03:52.800
And so they came up with a pretty radical idea.


00:03:52.800 --> 00:03:57.780
They said, "What if we just turn off garbage collection in Python?"


00:03:57.780 --> 00:03:58.780
That seems bad, right?


00:03:58.780 --> 00:04:00.940
It does seem bad, yeah.


00:04:00.940 --> 00:04:05.440
So they wrote an article called "Dismissing Python Garbage Collection" at Instagram.


00:04:05.440 --> 00:04:09.120
What they did is they had a thing where they would monitor the memory of the worker processes


00:04:09.120 --> 00:04:12.920
I believe restart them if the memory got too out of control.


00:04:12.920 --> 00:04:15.800
I don't know why they're doing that, but for whatever reason they did.


00:04:15.800 --> 00:04:21.240
And I think that they found that the shared memory was much, much less shared than they


00:04:21.240 --> 00:04:22.240
expected.


00:04:22.240 --> 00:04:27.200
So, they said that each worker process was like 225 megs of memory usage, and they're


00:04:27.200 --> 00:04:31.280
only sharing like 140 megs, even though they're basically all doing the same thing.


00:04:31.280 --> 00:04:35.880
So they went to look and sort of do some profiling, and they thought that there was some Linux


00:04:35.880 --> 00:04:39.960
copy on write behaviors happening due to reference counting. So they said, all right, let's turn


00:04:39.960 --> 00:04:44.440
off reference counting. That seems like really bad. Because for those of you guys who don't


00:04:44.440 --> 00:04:50.840
know, Python's GC or sort of memory management works in two modes. There's a direct reference


00:04:50.840 --> 00:04:55.800
counting deterministic thing that when the last reference to an object goes away, it's


00:04:55.800 --> 00:05:01.680
typically deleted instantly. But the problem with reference counting for garbage collection


00:05:01.680 --> 00:05:03.880
and memory management is you can get cycles.


00:05:03.880 --> 00:05:06.200
So there's a GC that manages cycles.


00:05:06.200 --> 00:05:07.040
- Okay.


00:05:07.040 --> 00:05:08.600
- And so what happened is they tried


00:05:08.600 --> 00:05:10.320
to turn off reference counting, that didn't help.


00:05:10.320 --> 00:05:12.280
They said, all right, well, let's turn off GC.


00:05:12.280 --> 00:05:14.480
And they said, when they turned off garbage collection,


00:05:14.480 --> 00:05:16.760
they were still able to run about the same,


00:05:16.760 --> 00:05:19.640
only like accepting sort of memory leaks from cycles,


00:05:19.640 --> 00:05:21.680
I guess, and they said they successfully raised


00:05:21.680 --> 00:05:25.040
the shared memory from 140 megs to 225.


00:05:25.040 --> 00:05:27.240
I guess that was, I was quoting a little bit


00:05:27.240 --> 00:05:29.800
the wrong number, but they dramatically increased


00:05:29.800 --> 00:05:36.120
the shared memory, and they were able to drop the memory usage per server by eight gigs.


00:05:36.120 --> 00:05:39.640
And they saved 25% RAM on their entire Jenga fleet.


00:05:39.640 --> 00:05:46.420
In fact, they actually got it to run 10% faster due to the way the rearrange memory done by


00:05:46.420 --> 00:05:50.520
garbage collection actually lines up with CPU caches and things.


00:05:50.520 --> 00:05:55.280
So they go they wrote this really detailed article with like lots of stats and the command


00:05:55.280 --> 00:05:56.560
you can run to do these things.


00:05:56.560 --> 00:05:59.200
And they said, actually, for us,


00:05:59.200 --> 00:06:01.840
for our weird, ultra high performance,


00:06:01.840 --> 00:06:03.320
ultra heavy load servers,


00:06:03.320 --> 00:06:06.600
it makes sense to turn off Python's garbage collection


00:06:06.600 --> 00:06:10.080
and basically set up a custom shutdown thing


00:06:10.080 --> 00:06:11.640
that doesn't collect too much memory


00:06:11.640 --> 00:06:12.880
on the way out the door.


00:06:12.880 --> 00:06:14.000
Isn't that interesting?


00:06:14.000 --> 00:06:15.200
- It's very interesting.


00:06:15.200 --> 00:06:16.800
I didn't even know you could turn off


00:06:16.800 --> 00:06:18.480
the garbage collection.


00:06:18.480 --> 00:06:22.200
- There's apparently a way that you can do it,


00:06:22.200 --> 00:06:23.800
but it's not simple, yeah.


00:06:23.800 --> 00:06:25.080
And they ran into problems,


00:06:25.080 --> 00:06:27.860
Like they turned it off and other libraries would ensure


00:06:27.860 --> 00:06:29.740
that it was on and turn it back on and things like that.


00:06:29.740 --> 00:06:30.720
They're like, no, I want it off.


00:06:30.720 --> 00:06:32.320
And so they had, I think they had to like


00:06:32.320 --> 00:06:36.340
recompile some things, you know, it's not like a flag,


00:06:36.340 --> 00:06:38.140
but anyway, it's pretty interesting.


00:06:38.140 --> 00:06:39.420
- Interesting story.


00:06:39.420 --> 00:06:43.380
- Yeah, it's a thing that questions some assumptions


00:06:43.380 --> 00:06:46.540
about how things work and it's sometimes,


00:06:46.540 --> 00:06:49.660
I definitely does not sound pretty, but you know,


00:06:49.660 --> 00:06:54.300
maybe you're optimizing that last 10, 20%.


00:06:54.300 --> 00:06:56.980
It's not gonna be pretty, but this is a pretty interesting


00:06:56.980 --> 00:06:58.180
look at what Instagram's doing.


00:06:58.180 --> 00:07:00.780
I just like to look at these large scale deployments


00:07:00.780 --> 00:07:03.460
and people have handling tons of requests,


00:07:03.460 --> 00:07:05.380
what they're doing, it's always interesting.


00:07:05.380 --> 00:07:08.420
- Yeah, and also somebody else out there might be thinking,


00:07:08.420 --> 00:07:10.060
hey, maybe we could turn it off


00:07:10.060 --> 00:07:12.420
and try to learn from Instagram.


00:07:12.420 --> 00:07:14.220
- Yeah, absolutely, they detailed it out there.


00:07:14.220 --> 00:07:15.500
They have a nice engineering blog.


00:07:15.500 --> 00:07:17.540
They put interesting stuff up there frequently.


00:07:17.540 --> 00:07:21.340
- But Brett Cannon, no, I forget where Brett Cannon works.


00:07:21.340 --> 00:07:25.500
Brett Cannon works with Dino Veland over at Microsoft.


00:07:25.500 --> 00:07:28.300
I think the Azure Data Science team


00:07:28.300 --> 00:07:32.380
and their Brett Cannon is a Python core developer.


00:07:32.380 --> 00:07:35.780
- Yeah, we've learned a lot of interesting things


00:07:35.780 --> 00:07:40.300
from Brett, but he's got a blog called snarky.ca


00:07:40.300 --> 00:07:44.260
and he put up my experience with type hints in mypy.


00:07:44.260 --> 00:07:45.660
I was attracted to this article


00:07:45.660 --> 00:07:50.660
because I've sort of been watching this type hint thing


00:07:50.900 --> 00:07:52.460
with a little skepticism.


00:07:52.460 --> 00:07:54.820
So I'm not really sure if it's going to help,


00:07:54.820 --> 00:07:56.100
how it can help me.


00:07:56.100 --> 00:07:58.420
So I was interested in reading this.


00:07:58.420 --> 00:08:03.420
He took a project that he supports,


00:08:03.420 --> 00:08:08.220
and then used both mypy and TypeHince


00:08:08.220 --> 00:08:12.720
to try to, who he's hoping to improve the quality of it.


00:08:12.720 --> 00:08:15.300
And it's kind of an interesting project.


00:08:15.300 --> 00:08:16.780
I didn't even know what CLA was.


00:08:16.780 --> 00:08:18.780
So it's a CLA enforcement bot


00:08:18.780 --> 00:08:21.020
for the Python Software Foundation.


00:08:21.020 --> 00:08:24.140
And that's the contributor license agreement.


00:08:24.140 --> 00:08:30.140
So the idea is if somebody pushes or submits a pull


00:08:30.140 --> 00:08:33.060
request into one of the Python projects,


00:08:33.060 --> 00:08:35.660
this robot goes out and makes sure


00:08:35.660 --> 00:08:40.020
that the person that is requesting the pull request


00:08:40.020 --> 00:08:41.460
has assigned CLA.


00:08:41.460 --> 00:08:43.940
Sounds like it's obvious why this is needed.


00:08:43.940 --> 00:08:48.420
But it's a small enough project to run this experiment on


00:08:48.420 --> 00:08:55.220
adding type hints. And he, it's not a very long article, but he talked, points to


00:08:55.220 --> 00:09:00.060
his pull request for this, the changes he made, and the lessons


00:09:00.060 --> 00:09:04.580
learned. I didn't know what mypy was before, so mypy is a static analysis


00:09:04.580 --> 00:09:08.460
tool that makes sure you're, I think it make, just make sure your type hints are


00:09:08.460 --> 00:09:15.300
correct or uses the type hints for linting. Yeah, I think so. And you know the


00:09:15.300 --> 00:09:19.980
the PEP that you talked about originally, I think there was all Python three stuff,


00:09:19.980 --> 00:09:23.820
I'm pretty sure that that all works on Python two.


00:09:23.820 --> 00:09:27.940
Now at least with some of the tooling that the type in ideas are being backported with


00:09:27.940 --> 00:09:33.780
the idea being that if we can take a lot of this legacy Python code, give it some static


00:09:33.780 --> 00:09:39.980
type definitions, and then use tooling more intelligently with more information to check


00:09:39.980 --> 00:09:42.140
the upgrade to Python three.


00:09:42.140 --> 00:09:47.740
So actually it can provide some structure to the older code actually.


00:09:47.740 --> 00:09:51.940
So it's, you know, I always thought of typefaces being this thing that only Python 3 gets and


00:09:51.940 --> 00:09:57.980
it's kind of this new deal, but you know, it may turn out to be most important in crossing


00:09:57.980 --> 00:10:01.140
that Python 2 to Python 3 chasm, which is pretty interesting.


00:10:01.140 --> 00:10:02.620
It'd be interesting benefit.


00:10:02.620 --> 00:10:04.260
You know what else is interesting?


00:10:04.260 --> 00:10:10.660
The second largest, the second most active contributor to this mypy project, Guido van


00:10:10.660 --> 00:10:11.660
Rossum.


00:10:11.660 --> 00:10:15.220
Yeah, he's really doing a lot with this.


00:10:15.220 --> 00:10:18.140
There was a couple hiccups that he ran into.


00:10:18.140 --> 00:10:23.740
Apparently there's some of the 3.6 isn't fully supported, but I'm sure that'll get supported


00:10:23.740 --> 00:10:26.360
fairly quickly.


00:10:26.360 --> 00:10:31.220
What I really wanted to highlight was, I'm going to quote from his conclusion.


00:10:31.220 --> 00:10:37.100
After this experiment, he asked himself, would he bother using typing and static typing in


00:10:37.100 --> 00:10:38.940
new Python 3 code?


00:10:38.940 --> 00:10:45.940
And essentially he said yes, once it supports f strings, apparently at the time it doesn't,


00:10:45.940 --> 00:10:46.940
I don't know if it's fixed yet.


00:10:46.940 --> 00:10:52.020
Yeah, I think it only supported Python 3.5 and f strings, of course, 3.6, which is shiny


00:10:52.020 --> 00:10:53.020
new.


00:10:53.020 --> 00:10:59.340
But he says, "When I design an API, I already have to think about what type of objects would


00:10:59.340 --> 00:11:00.460
be acceptable.


00:11:00.460 --> 00:11:03.520
So quickly writing down my assumptions doesn't hurt anything.


00:11:03.520 --> 00:11:08.060
It's relatively quick and it benefits anyone having to work with my code.


00:11:08.060 --> 00:11:14.460
also wouldn't contort my code to fit within the confines of type hints. For example, if type hints


00:11:14.460 --> 00:11:19.740
force me to write cleaner code, then that's great, but if something is so dynamic that it can't have


00:11:19.740 --> 00:11:27.980
type hints, then that's fine, and I'll happily use typing.any as an escape hatch. In the end,


00:11:27.980 --> 00:11:34.700
I view type hints as enhanced documentation that has tooling to help verify that the documentation


00:11:34.700 --> 00:11:39.600
about types is accurate. And for that use case, I see type hints worth doing and not


00:11:39.600 --> 00:11:44.980
at all a burden. And he also mentions that it didn't make his code less readable, it


00:11:44.980 --> 00:11:51.040
only enhanced the readability. And since I'm all for making your code more readable, this


00:11:51.040 --> 00:11:55.040
article actually gives me a more positive light on using types.


00:11:55.040 --> 00:12:00.600
Yeah, that's cool. I do periodically put type hints in my Python three code. And I find


00:12:00.600 --> 00:12:04.080
that I usually do it when I'm looking at a function. I'm like, you know, I don't really


00:12:04.080 --> 00:12:09.400
remember the context in which this is called and what what is being passed in here. So


00:12:09.400 --> 00:12:14.220
let me make it really explicit at the function signature level. And then the tooling can


00:12:14.220 --> 00:12:18.780
of course tell me if we're doing it wrong somewhere else. But it's kind of a reminder


00:12:18.780 --> 00:12:23.940
to me if it's not obvious what's going on, but I don't do it like universally. It's more


00:12:23.940 --> 00:12:27.020
like in those places where I'm knowing the types going to really help.


00:12:27.020 --> 00:12:33.940
Yeah, and I'm still spending, I guess, too much time straddling the legacy Python, Python


00:12:33.940 --> 00:12:37.580
3 world that I'm still having trouble with that chasm.


00:12:37.580 --> 00:12:38.580
Yeah, sure.


00:12:38.580 --> 00:12:42.540
Well, the mypy works on Python 2, so there you go.


00:12:42.540 --> 00:12:45.780
You know what else is quite pervasive throughout Python?


00:12:45.780 --> 00:12:46.780
Underscores.


00:12:46.780 --> 00:12:48.460
The underscore is special in Python.


00:12:48.460 --> 00:12:49.460
Is it special?


00:12:49.460 --> 00:12:50.460
It is special.


00:12:50.460 --> 00:12:55.300
You know, there's a lot of things that are special or, you know, maybe a more common


00:12:55.300 --> 00:12:59.420
way to say it would be idiomatic, right, or Pythonic. I think the use of the


00:12:59.420 --> 00:13:03.820
underscore is one of these symbols that shows up a lot and they actually have


00:13:03.820 --> 00:13:08.860
meaning but people coming from other languages don't necessarily know all the


00:13:08.860 --> 00:13:14.020
nuanced behavior of the underscore or not behavior meaning of the underscore.


00:13:14.020 --> 00:13:19.420
And so there's this article called "Understanding the underscore of Python"


00:13:19.420 --> 00:13:23.860
which is kind of a cool title. It gives you some examples. It says if you write


00:13:23.860 --> 00:13:28.740
If you come across some Python code, you might see something like for underscore in range 10 or


00:13:28.740 --> 00:13:32.700
Dunder in itself things like that. You see it all the time


00:13:32.700 --> 00:13:37.460
But these underscores have meanings and they said look there's basically five cases


00:13:37.460 --> 00:13:43.020
With some sub cases thrown in about when you might have special meaning with this underscore


00:13:43.020 --> 00:13:47.140
The first one is if you're in the REPL if you're in just the you know, type Python


00:13:47.140 --> 00:13:52.340
Going to the REPL whatever you type the last value is always underscore


00:13:53.380 --> 00:13:57.940
Right, so if you call a function and you forget to store its value, you can just say underscore


00:13:57.940 --> 00:14:00.700
and that's whatever that function returned.


00:14:00.700 --> 00:14:03.300
For example, I didn't know that before reading this article.


00:14:03.300 --> 00:14:04.300
That's pretty cool.


00:14:04.300 --> 00:14:06.020
Yeah, it's really handy.


00:14:06.020 --> 00:14:09.860
If you did something that took like 20 seconds, you forgot to put that in a variable, you


00:14:09.860 --> 00:14:10.900
can just do still have it.


00:14:10.900 --> 00:14:12.100
It's called underscore.


00:14:12.100 --> 00:14:13.100
That's cool.


00:14:13.100 --> 00:14:14.100
But that's not really in code, right?


00:14:14.100 --> 00:14:18.900
The first example I gave you for underscore in range of 10.


00:14:18.900 --> 00:14:20.420
That's kind of the I don't care.


00:14:20.420 --> 00:14:24.920
I have to put something here, but I want to explicitly make the point that I don't care


00:14:24.920 --> 00:14:26.780
about this variable.


00:14:26.780 --> 00:14:30.660
So there's there's interesting places where that might come up.


00:14:30.660 --> 00:14:31.660
Right?


00:14:31.660 --> 00:14:34.860
This four underscore is an example, maybe I just want to do a loop 10 times, I don't


00:14:34.860 --> 00:14:37.580
actually care about the number, I want to do it 10 times.


00:14:37.580 --> 00:14:42.580
So that's, that's one way to do it if you have a, so that's just that's just a convention,


00:14:42.580 --> 00:14:43.580
right?


00:14:43.580 --> 00:14:47.420
So what we're, what's happening there is the underscore is just a character, which is a


00:14:47.420 --> 00:14:49.420
valid variable name.


00:14:49.420 --> 00:14:50.600
- Yes, exactly.


00:14:50.600 --> 00:14:54.700
Except for the linters, the linting tools know about it.


00:14:54.700 --> 00:14:55.600
- Oh, okay.


00:14:55.600 --> 00:14:58.500
- So for example, in PyCharm,


00:14:58.500 --> 00:15:01.320
if you have a function that takes a parameter


00:15:01.320 --> 00:15:03.280
and you're not using that parameter,


00:15:03.280 --> 00:15:05.860
then it'll make it gray and give it a little squiggly


00:15:05.860 --> 00:15:07.780
saying here's an unused argument.


00:15:07.780 --> 00:15:12.040
Examples come to mind in the Dunder init in Pyramid,


00:15:12.040 --> 00:15:13.640
there's a startup thing


00:15:13.640 --> 00:15:15.940
that passes a configuration settings thing.


00:15:15.940 --> 00:15:16.780
And if you don't care about


00:15:16.780 --> 00:15:17.920
the configuration settings thing,


00:15:17.920 --> 00:15:20.800
Well, what are you going to do?


00:15:20.800 --> 00:15:25.540
Well, you can just put an underscore and then you don't get warnings that that variable


00:15:25.540 --> 00:15:26.540
is unused.


00:15:26.540 --> 00:15:31.000
Now, let's see, if you're doing tuple unpacking and you've got a tuple of five things, you


00:15:31.000 --> 00:15:34.880
want the first and the fourth or whatever, you can put some underscores in there to make


00:15:34.880 --> 00:15:39.240
it unpack correctly all over the place so that you have this I don't care variable and


00:15:39.240 --> 00:15:42.600
the linters actually will not warn you that underscore is not used.


00:15:42.600 --> 00:15:43.600
Okay, cool.


00:15:43.600 --> 00:15:44.600
That's cool.


00:15:44.600 --> 00:15:47.040
Then you have, like, giving meaning to variables.


00:15:47.040 --> 00:15:51.000
Underscore variable is like a, some people say private.


00:15:51.000 --> 00:15:53.560
I think of it more as a protected variable.


00:15:53.560 --> 00:15:58.360
So if I've got a class that has a field or attribute, like, underscore name or whatever,


00:15:58.360 --> 00:16:02.760
right, it hints to consumers of that class they should leave it alone, but technically


00:16:02.760 --> 00:16:03.760
it's still accessible.


00:16:03.760 --> 00:16:05.320
I think of that more as protected, right?


00:16:05.320 --> 00:16:09.080
It still leaves it accessible to derived classes, but it does tell people stay away.


00:16:09.080 --> 00:16:13.600
Yeah, I also think of that as, like, I don't make any promises that I might not change


00:16:13.600 --> 00:16:18.440
this behavior. Yes. Yeah. Yeah. Yeah, exactly. All right. And you can have double underscore


00:16:18.440 --> 00:16:22.600
in a class which will actually rename it so it is much harder to get a hold of like name


00:16:22.600 --> 00:16:28.720
mangling so that's like real private. And if you have a conflicting thing you can have


00:16:28.720 --> 00:16:32.280
like if you have a variable you want to call it in well there's a keyword called in like


00:16:32.280 --> 00:16:38.120
key in dictionary, you can just say in underscore sequel alchemy has like and underscore or


00:16:38.120 --> 00:16:42.920
underscore in underscore so it can have things that look very similar to


00:16:42.920 --> 00:16:46.660
restricted keywords but you know avoids them and then you have the whole Python


00:16:46.660 --> 00:16:52.940
data data model with like dunder init, dunder new, dunder representation, string


00:16:52.940 --> 00:16:56.700
so on like all the magic methods and then there's a few that I didn't really


00:16:56.700 --> 00:17:00.900
know about well one I guess in the internationalization of strings there's


00:17:00.900 --> 00:17:03.940
some special meaning there it's kind of complex I'm not going to go into it and


00:17:03.940 --> 00:17:07.660
then in Python 3.6 you can use it as like where you would have commas for


00:17:07.660 --> 00:17:12.280
separating for digit grouping you can have underscore so like one underscore


00:17:12.280 --> 00:17:16.480
zero zero zero underscore zero zero zero is a million in Python 3.6. Yeah and it's


00:17:16.480 --> 00:17:20.240
it's this is good also just for reading other people's code to understand how


00:17:20.240 --> 00:17:23.080
they're using it. Yeah because you might just think oh that's a weird naming


00:17:23.080 --> 00:17:26.800
convention that that person used here but like they're trying to communicate


00:17:26.800 --> 00:17:30.040
something very specific by using underscore and all these circumstances


00:17:30.040 --> 00:17:33.400
so I think it's good to like bring it up people maybe come from other languages.


00:17:33.400 --> 00:17:38.900
Yeah, especially people that come from Perl because Perl has a very special meaning for underscore.


00:17:38.900 --> 00:17:40.900
So it's good to know that it isn't that.


00:17:40.900 --> 00:17:46.900
Yeah, you know one thing that I think is frustrating is if there's like a super old PyPI package.


00:17:46.900 --> 00:17:49.900
It hasn't been updated in five years, but it's got like that perfect name.


00:17:49.900 --> 00:17:53.400
There should be some active project that could sort of inherit its name.


00:17:53.400 --> 00:17:57.400
There was a PEP that came out on the 12th by Donald stuffed.


00:17:57.400 --> 00:18:04.280
and it's in draft status currently but I'm sure that with probably a few tweaks by people that


00:18:04.280 --> 00:18:09.440
are really in the Python core people it'll probably go through but it's called package


00:18:09.440 --> 00:18:17.880
it's PEP 541 package index name retention and it's basically just like what you said is given


00:18:17.880 --> 00:18:24.520
that a package name in the index is it's a flat namespace the unique names are a finite resource


00:18:24.520 --> 00:18:31.520
So as the package index is growing and growing older, we need to have a way to deal with things like


00:18:31.520 --> 00:18:38.520
old packages that aren't updated anymore, somebody that just like squatted on it but hasn't done anything with it,


00:18:38.520 --> 00:18:45.520
or, you know, there's other various things or conflict of two people that legitimately want to use it.


00:18:45.520 --> 00:18:48.520
How do we resolve those conflicts?


00:18:48.520 --> 00:18:54.280
Yeah, like an example comes to mind for me is there's a cool package for kind of a crummy


00:18:54.280 --> 00:19:01.400
problem called suds. So consuming soap web services in Python is not pretty because they


00:19:01.400 --> 00:19:06.040
have all their namespaces. It's just like soap is like a big gnarly XML format for web services


00:19:06.040 --> 00:19:14.200
that's like preceded or was sometimes more popular within enterprises than JSON HTTP services. So


00:19:14.200 --> 00:19:19.040
So there's a cool package called suds that has like a really great API for consuming those on the client side


00:19:19.040 --> 00:19:23.200
But it's kind of old and outdated it only supports Python 2


00:19:23.200 --> 00:19:27.540
So a guy whose username is Jerko


00:19:27.540 --> 00:19:29.900
created


00:19:29.900 --> 00:19:31.900
No, no reflection on him personally


00:19:31.900 --> 00:19:35.340
Created a project called suds - Jerko


00:19:35.340 --> 00:19:39.380
So if you wanted to have in the package name and code is just suds


00:19:39.380 --> 00:19:42.880
but it's like basically that thing upgraded for Python 3.


00:19:42.880 --> 00:19:46.880
And he couldn't use suds because even though it was not being maintained,


00:19:46.880 --> 00:19:50.380
it still owned it on PyPI.


00:19:50.380 --> 00:19:51.880
Yeah, that's a tough one though.


00:19:51.880 --> 00:19:56.380
And even if something's not updated, it's hard to know if people are using it or not.


00:19:56.380 --> 00:20:00.380
Some of the stuff that was addressed in this proposal


00:20:00.380 --> 00:20:04.880
is things like checking out other uses of the word


00:20:04.880 --> 00:20:10.880
like on CPAN or NPM or GitHub.


00:20:10.880 --> 00:20:15.880
So if it's a very popular GitHub repository,


00:20:15.880 --> 00:20:17.880
maybe we should let it go through or something.


00:20:17.880 --> 00:20:23.880
I actually wanted to put in a package name to expect in.


00:20:23.880 --> 00:20:25.880
It was already used by somebody else,


00:20:25.880 --> 00:20:27.880
but then I went out and looked and it was legitimate.


00:20:27.880 --> 00:20:31.880
There's a lot of other tools that were more like that tool


00:20:31.880 --> 00:20:33.880
than what I wanted to use.


00:20:33.880 --> 00:20:38.280
something like, it would have been bad for me to try to throw a hissy fit and grab that.


00:20:38.280 --> 00:20:43.780
Yeah, it's interesting. It's cool that they're proposing a way to look at prior art and existing things.


00:20:43.780 --> 00:20:47.780
I'm actually a little surprised it didn't already exist, but I'm glad it's happening.


00:20:47.780 --> 00:20:52.780
Yep, it's definitely a good thing. I mean, we're about to come up on 100,000 PyPI packages.


00:20:52.780 --> 00:20:56.780
Like, the naming is starting to become something scarish, right?


00:20:56.780 --> 00:21:03.300
All right, so did you ever read William Gibson books like Neuromancer and some of these crazy


00:21:03.300 --> 00:21:05.860
futuristic cyberpunk type books?


00:21:05.860 --> 00:21:06.860
No.


00:21:06.860 --> 00:21:13.540
I kind of feel like we're living in this sort of sci-fi future in a weird way.


00:21:13.540 --> 00:21:18.180
There was the craziest article that I saw I've seen in a while come out and I'll just


00:21:18.180 --> 00:21:19.700
read you the title.


00:21:19.700 --> 00:21:25.400
Hackers downloaded US government climate data and stored it on European servers as Trump


00:21:25.400 --> 00:21:27.520
was being inaugurated.


00:21:27.520 --> 00:21:28.520
So here's the deal.


00:21:28.520 --> 00:21:33.240
There's, you know, I'm going to try to make this as politically neutral as possible.


00:21:33.240 --> 00:21:38.320
I just, I just want to talk about the data side of this in a pretty interesting way.


00:21:38.320 --> 00:21:41.920
Like who owns and controls data, right?


00:21:41.920 --> 00:21:46.160
Does the president, does the country, does the world own this data?


00:21:46.160 --> 00:21:51.800
Like the US has an incredible amount of data about the world at the Environmental Protection


00:21:51.800 --> 00:21:57.600
Agency at NASA, Department of Energy, and so on. And there had been some rumors that


00:21:57.600 --> 00:22:05.340
when Trump took office, he was going to reduce, cut back, or even fire some people that worked


00:22:05.340 --> 00:22:11.580
on climate change. People knew this a few months before, maybe a month before, there


00:22:11.580 --> 00:22:16.520
were people looking around saying, you know, these websites, like the EPA, for example,


00:22:16.520 --> 00:22:18.880
has a bunch of data on it.


00:22:18.880 --> 00:22:21.400
And they're like, what if that gets deleted?


00:22:21.400 --> 00:22:25.720
There was actually a meeting of 60 programmers


00:22:25.720 --> 00:22:29.040
and scientists at the Department of Information Studies,


00:22:29.040 --> 00:22:34.040
UCLA, and their goal was to find as many of these websites


00:22:34.040 --> 00:22:38.320
with government data on it, and start to scrape it


00:22:38.320 --> 00:22:41.460
and download it and exfiltrate it from the country.


00:22:41.460 --> 00:22:43.700
Isn't that crazy?


00:22:43.700 --> 00:22:46.360
So what they did is they all got together


00:22:46.360 --> 00:22:49.000
And they were working like 22 hours a day


00:22:49.000 --> 00:22:50.360
for like the four or five days


00:22:50.360 --> 00:22:52.120
leading up to the inauguration.


00:22:52.120 --> 00:22:53.360
And they were just downloading,


00:22:53.360 --> 00:22:56.200
they had like a huge spreadsheet of hundreds of sites


00:22:56.200 --> 00:22:58.160
where they'd go in and they'd try to get the data


00:22:58.160 --> 00:22:59.440
and they would pull it off.


00:22:59.440 --> 00:23:02.720
So examples include like a webpages


00:23:02.720 --> 00:23:05.640
dedicated to Department of Energy solar project initiatives


00:23:05.640 --> 00:23:08.600
or the Energy Information Administration


00:23:08.600 --> 00:23:11.440
stuff about fossil fuels compared to renewable energy


00:23:11.440 --> 00:23:14.240
and fuel cell research and those kinds of things.


00:23:14.240 --> 00:23:16.040
And it turns out there's actually these sort of,


00:23:16.040 --> 00:23:20.360
what they called volunteer data rescue events in Toronto and Philly and Chicago


00:23:20.360 --> 00:23:25.360
and Indianapolis and Michigan over the last weeks trying to scrape hundreds of


00:23:25.360 --> 00:23:29.560
thousands of pages off the internet. So you might say people are being crazy


00:23:29.560 --> 00:23:35.520
come on. It turned out exactly at noon as Trump was sworn in and UCLA was


00:23:35.520 --> 00:23:39.920
actively working that that group was working all the climate change related


00:23:39.920 --> 00:23:45.080
data on whitehouse.gov disappeared but they had gotten a lot of it. Okay. And so


00:23:45.080 --> 00:23:48.380
So there's this company called Page Freezer,


00:23:48.380 --> 00:23:50.220
and I think they're a Canadian company,


00:23:50.220 --> 00:23:52.940
and they basically create snapshots of web pages,


00:23:52.940 --> 00:23:54.580
a little bit like an internet archive


00:23:54.580 --> 00:23:56.260
or the Wayback Machine,


00:23:56.260 --> 00:23:57.980
and it's actually a commercial service.


00:23:57.980 --> 00:24:00.340
So these guys start to participate


00:24:00.340 --> 00:24:03.740
and they're storing all of this data somewhere in Europe.


00:24:03.740 --> 00:24:05.740
- The reason for storing it in Europe


00:24:05.740 --> 00:24:08.880
because there's no, like, there'd be not a way


00:24:08.880 --> 00:24:12.560
for the government to force it to shut down or something?


00:24:12.560 --> 00:24:14.140
- Yeah, exactly, exactly.


00:24:15.020 --> 00:24:16.780
So I just, I thought that was like,


00:24:16.780 --> 00:24:19.720
that's the craziest headline around programming


00:24:19.720 --> 00:24:21.020
I've seen this week. - Yeah.


00:24:21.020 --> 00:24:22.420
- And I wanted to include that.


00:24:22.420 --> 00:24:23.340
- Definitely.


00:24:23.340 --> 00:24:26.120
Now, I do know that there's,


00:24:26.120 --> 00:24:29.420
so again, to try to not be too political on this,


00:24:29.420 --> 00:24:31.960
but aren't there legacy versions


00:24:31.960 --> 00:24:35.060
of the old versions of the White House website?


00:24:35.060 --> 00:24:38.700
- There, I mean, probably on the Wayback Machine and stuff,


00:24:38.700 --> 00:24:43.060
but it could be that it doesn't necessarily store the data


00:24:43.060 --> 00:24:44.340
length in it, you know what I mean?


00:24:44.340 --> 00:24:48.620
like the 100 meg CSV file or whatever.


00:24:48.620 --> 00:24:49.880
And that was the kind of stuff


00:24:49.880 --> 00:24:51.680
they were actually going after.


00:24:51.680 --> 00:24:53.860
- Well, it's good to have it saved.


00:24:53.860 --> 00:24:58.220
- It's good to have it saved, so we'll see where it goes.


00:24:58.220 --> 00:25:00.180
But I just thought this was a really interesting,


00:25:00.180 --> 00:25:02.580
and I'm sure Python played a pretty key role


00:25:02.580 --> 00:25:04.700
in a lot of screen scraping initiatives


00:25:04.700 --> 00:25:08.060
with Beautiful Soup and Scrapy and things like that.


00:25:08.060 --> 00:25:08.900
- Yeah.


00:25:08.900 --> 00:25:10.620
- All right, so I think we're gonna leave it there


00:25:10.620 --> 00:25:11.440
for this week.


00:25:11.440 --> 00:25:13.940
That's a lot of cool news for everyone, Brian.


00:25:13.940 --> 00:25:14.940
Definitely cool.


00:25:14.940 --> 00:25:16.740
All right, well thanks for talking to me this week.


00:25:16.740 --> 00:25:17.740
You bet.


00:25:17.740 --> 00:25:20.740
Thanks for sharing the stories and I'll catch you next time.


00:25:20.740 --> 00:25:22.300
Thank you for listening to Python Bytes.


00:25:22.300 --> 00:25:28.220
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:25:28.220 --> 00:25:31.540
And get the full show notes at pythonbytes.fm.


00:25:31.540 --> 00:25:35.220
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:25:35.220 --> 00:25:36.220
way.


00:25:36.220 --> 00:25:38.740
We're always on the lookout for sharing something cool.


00:25:38.740 --> 00:25:42.200
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:25:42.200 --> 00:25:45.280
Thank you for listening and sharing this podcast with your friends and colleagues.

