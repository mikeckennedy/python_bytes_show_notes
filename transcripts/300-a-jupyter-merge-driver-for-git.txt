00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is the big episode 300, recorded September 6 2020, to Michael Kennedy.

00:00:12 And I'm Brian nock. And I'm Seth Larson. And this episode

00:00:15 is brought to you by Microsoft for startups founders hub more about them later. Seth, welcome to the show.

00:00:21 Thanks for having me. That's so exciting. I didn't realize it was gonna be a 300. Yeah,

00:00:25 well, you hit the jackpot. This is the big one, a big one for at least two more years, I would say. And Brian, how about that? 300 episodes?

00:00:34 That's amazing. When did we start this? We should look must have been a while

00:00:37 ago. I don't know. I mean, that's 5.7692307 years, like that's almost six years.

00:00:45 It's amazing. Actually,

00:00:47 a reason that I'm so focused on floating point numbers and large numbers. We're gonna get to that at the end of the show.

00:00:53 2016. We started in November 2016. Absolutely. Anyway,

00:00:57 yeah. Very cool. Indeed. David says congrats on 300. Thank you, David. Thank you for being here. Indeed.

00:01:04 Awesome. All right. Well, I, I've been thinking about wheels and packages lately.

00:01:09 So you were thinking about the phrase rolling, rolling, we'll gathers no moss or something like this out, but how it goes in programming.

00:01:17 I wasn't thinking about that at all. What were

00:01:20 you thinking about? Tell us about it. Okay, so

00:01:22 I was thinking about actually using different packaging tools because pipe Project dot Tom was supported, like buy tons of stuff. Now well buy tons of stuff. I mean, like three that I know of. So we've got we've got flit Well, poetry also don't want to use poetry. Anyway, I've been using flit and hatch and set up tools, which are all really easy to use with my project at Timon lately, and I've been using, like the flit method of building wheels and hatch and set it in Python, the build package also Python, or the just pip install, build, you can do Python dash m, build the build stuff, which is fun. But since I've been building all these, I've been using a lot of tools to try to, like check these wheels to make sure that they're, the packages and wheels are, are, what I expect is inside. So there's this, there's a few tools I'm using. One is we'll inspect. And this one, actually, it's kind of cool. You can use it programmatically if you want. I'm not I'm using the it comes with this thing called wheel to JSON. And it, if you run that on a wheel, and you give it a wheel name, it just pops out all like dumps the JSON information about the wheel. And, and I've been using this to just I'll like use different ways to build things and then dump this into a file and do a diff to just sort of see what's going on to make sure that, like, make sure I got like the description correct or everything's right. And just because I'm curious if all of these tools are building this kind of the same thing, and they kind of are, there's slight differences. But it's neat that there's so many options now. So we'll inspect is really cool for four wheels. I'm also using a thing called Check wheel contents. And this is kind of like a linter for wheels. So if you throw this at, because it's possible to make valid wheels that don't have really anything in them, or they don't have the thing that you thought was in there. So there's, there's, this is a linter that goes through and gives you all bunch of warnings and stuff, if you you can kind of look through like we w 001 Wheel contains PCYC and py o files, like somehow you've configured it wrong to grab that. And I don't know how you would do that for the lot of stuff. But with flit if you possibly, if you accidentally threw those in your Git, because flit just grabs anything that's checked in, I think, or committed duplicate files a check for that. So checks for a whole bunch of stuff. So this is handy just to check as well. But the powerhouse that I'm using, of course, is just talks, I kind of wanted to cover the other ones because they're fun. But I wanted to remind people that one of the great things about talks is it builds things on your own on its own. So when you when you run talks on a package, it will build the package, then install it into an environment. And then then you run your tests, we think of it as more of a test runner, but it does that whole packaging loop also the end then the fourth way, I don't have like a slide for this. But the fourth way that I've been doing is you can just push them into a Git repo. And then you can do the pip install git plus and then the repo name thing. And PIP will use your packaging tools to create the wheel before it installs it. So that's another way to check your packaging. So doing a lot of packaging. So

00:04:54 anyway, I'm always super paranoid whenever I can figure something to do with packages. So my My method tends to be just unzip the wheel as a as a zip file and see what's in there. See what landed?

00:05:05 I didn't try that. So what does that do?

00:05:07 You just don't see number five, Brian. Yeah. So just

00:05:11 just zip unpacks it in place, then

00:05:14 yeah, wheels are technically zip files. So you can unzip them and just inspect what made it in there.

00:05:19 Okay, yeah, put a dot zip extension on it. And then you can just put zip tools on it, and off it goes.

00:05:25 So it must store the metadata somewhere then also, though, but yeah, there's

00:05:29 a top level, like metadata file that has all the things that it's about.

00:05:33 Ah, I love the pine in the chat. We got from piling. We'll get stuff Brian.

00:05:42 Brian, that was well, good stuff. Thanks. Thanks for bringing it.

00:05:48 Yeah. So on to the next one for minor. Yeah, let's go we before we jump onto it, you see, I have my race jersey on because the Portland Grand Prix IndyCar race was here this weekend. So people listening. And we'll close by they missed it. But next September, go be sure to go it was really really fun. Three days of racing. Right? Nice. Well, they were there fast cars. They were I was Indy cars, they were like, they were very fast. But they, they had no AI. Okay, no artificial intelligence yet from what I understand. But if you look over on fast.ai, there's something that anybody who does proper data science is going to be pretty jazzed about. So Jupyter Notebooks are notoriously bad citizens of source control and, and get and tools like that. The reasons are, basically, whenever you have a notebook file, if you've ever run it, the output and the order in which the cells were run, and the number of times the cells was run, is stored in there. That's not great. If someone gets the file and runs it, someone else gets it and runs it. And then you try to put it into source control. That's a problem, right? I mean, when you and I work on our code, we have Python files, the output goes somewhere we check it in the source code goes in. But with Jupiter, the outputs go in not just the outputs, but the memory address of some of the objects used in the address. So even if it's you running it twice, you get merge conflicts, which is not the coolest thing ever. I suspect that this goes by the name the Jupiter plus get problem. Really, it should be the Jupiter Plus version control system VCs, because it doesn't matter what you're using anything that just diffs files is going to hate this. Right? Anyway, the article. And the feature really that I want to talk about is the Jupiter get problem is now solved from Jeremy Howard over@fast.ai. The solution may surprise you. So talks a little bit about the challenges here. And it says it's interesting. It speaks in terms like that are not really developer oriented. It speaks more in terms of like end user. So like the way that maybe a first year science student might experience what the problem is not the way a seasoned data scientist would like for example, here's the problem. The problem is when you're collaborating with others over a GET YOUR you literally can't load your notebook if you both try to check it in because it's broken. Well, what is broken mean? Broken means it has merged conflicts written into it. That's really the problem is you can easily solve this problem if you accept their changes or accept your changes. But then you're losing data, right? So anyway, that's it. Okay, let's, let's look inside. Well, there's JSON, and then there's like the head and then the the Shah, like diff error. So I kind of already described this, but they do go into examples of like, when you're talking about matplotlib, or something like that, you'll have things like matplotlib dot axes, dot sub plot dot axes sub plot at some memory address, right, which is someone actually say, yeah, that's to that, that there's a lot of axes That's right, than non determining the outputs and so on. It says, Okay, we identified two categories of problems here. And I would, I would like to say this is only accurate if you have zero based indexes when you start counting. So we've identified in Michaels term three problems here, one Jupyter Notebook formats are fundamentally incompatible with version control problems, zero. Problem one, Git conflicts lead to broken notebooks. There we go. And many of these, almost all of these conflicts are unnecessary because metadata, like the environment, the machine name and stuff that it was run on, as well as the memory address of the objects is stored inside the file. What do you do? Well, there was this thing called env dev that would allow you to clean the file, I think it was in the dev that will let you clean it. There's other ways to clean it within Jupiter as well. You can say, I'm only going to commit to version control the empty version, or you can say clear all cells and then commit that then that would be fine because you're wiping all that data out. However, sometimes that data is incredibly hard to compute, right, I have a picture, the picture comes from an hour of doing machine training machine models, and then processing a gig of data. And then looking at this picture, if I don't clear it, and I check it in the pictures right there, you know what I mean? Or, or some of the outputs are right there. So there's a huge reason to not clear it, because it might be incredibly hard to regenerate it, maybe on the system you're on, you can't even run the code necessary, right? You don't have access to the database, or whatever. So here's what they did. There's a new indie dev, named NB dev two, as part of the name not a version, but the name. And this comes from the folks at fast AI. And here's how it works. It has a new merge driver for get K, instead of like a processing the files, it says, what we're going to do is we're going to set up hooks in Git. So when there is a merge, our special Python code that understands notebooks will present a different view for you.

00:11:01 I know. And there's a new save hook for Jupiter that automatically removes the unnecessary metadata and non deterministic cell output. So what you'll get is when you open up this conflicting notebook, and in Jupiter, you actually have the diff shown instead of having a corrupted notebook. Additionally, it drops out the metadata, so you get these unnecessary ones are just kind of gone. So it talks about some interesting things that you can do there. Or you've got to run in the dev install hooks to get it set up. Some other others various things. There's also a lot of history on what has been done before, what are some of the other alternatives, but the big takeaway is, the folks over at fast aI have been using this internally for several months, and they say it has transformed their workflow. It's totally solved this problem. And the reason they care so much is almost all of their work, their unit tests, their documentation, their actual code, everything is in notebooks they're like, all in a notebooks. So having git be a first class citizen is obviously important. So I recommend people check this out. postscript, side bonus here is there's another thing called review in B review, and B is about reviewing, say, a GitHub pull request. So somebody fixes a bug in a notebook and they do a PR and say, Oh, you were generating this, this graph wrong, you should have passed this parameter, which means a totally different thing. Wouldn't it be nice to have a picture of the before graph and the after graph with this review, and B, that's exactly what you get. So you get your code diff, but then you also get the output diff, which might be a matplotlib. Picture. Isn't that cool? That's really cool.

00:12:36 I'd be surprised if GitHub doesn't have this eventually. Okay. Yeah. Well, this seems like a logical next step. Yeah, sure. That's

00:12:43 right. No, books are so important.

00:12:45 Right. But it's not just GitHub, though. So some people are using Git just straight. So

00:12:49 exact. Right. Right. Or, or git lab or whatever. Yeah.

00:12:53 This is pretty neat. And this, I'm, yeah, I'm one of the things I really liked about this is the all the, like the, all the other solutions that we've tried and everything. I mean, data science, people are really good about, like, covering that sort of stuff where a lot of other people are like, Hey, I came up with a problem. I solved it. Maybe some other people have solved it also. Yeah, whatever.

00:13:16 Exactly. I will say this, this set of tools like exactly solves a problem I had not that long ago. So okay, so this really resonates with you. Hmm, this resonates with me. Yeah, using notebooks for documentation. And as part of like an integration test suite. Like this is great.

00:13:33 Yeah, very cool. piling on the audience's OS. So it looks like you can actually resolve merge conflicts inside the notebooks rather than traditionally ignore conflicts, I believe. So as well, I think there's like a merge merge inside of Jupiter type of thing you can do. Yeah, that's it. I haven't haven't totallys. Anyway, you're into data science or data set if you do Jupiter, and you care about source control, the sexually helpful,

00:13:57 which you should care about source control. Yes,

00:14:00 exactly. Yeah. So if you use Jupiter, both stop, go, go. Awesome. All right. Seth, over to you. Before we jump into the first type topic you want to talk about, though, just real quick. I, we were so excited about episode 300. I didn't give you a chance to introduce yourself properly. So give us a quick background on you. And then tell us about your item.

00:14:20 Yeah, so I currently an engineer at elastic, working on the language clients team. Previously, I was the maintainer of the well known within the Python community, the Elastic Search client. Now I'm doing tech leadership for that same team. And then in terms of open source work, I am a maintainer of many different Python packages, most notably your lib three, which is most downloaded Python package, and it's one of the dependencies of requests and Boto and a whole bunch of other really foundational packages.

00:14:53 That's incredible. Does it make you nervous to make changes to it?

00:14:57 Oh, yeah, I saw the very first time that I became lead maintainer. had to make a release. It was I actually spent multiple hours just kind of looking through the wheels and the source distributions and making sure that everything was right. It was it was a tough day, honestly.

00:15:11 Yeah. So that was that, Brian open with you've, you've been there as well. All right. All right. Well, what's your first item for us?

00:15:18 Yeah. So my first item is about trust stores. So this is about like certificates that you use to verify HTTPS connections. And so this is a library that me and David Blick have worked together to, to implement. And it's essentially trying to solve the problem of certify with Python, and how it interacts with certificates that aren't necessarily trusted by the greater world. So, for example, if you have like a corporate proxy, if your company is installing a certificate on your behalf, unable to do proxying of some sort, certified just doesn't work with that. And you get these errors that are kind of insurmountable, you get errors that require really low level debugging knowledge to figure out. And so we went and

00:16:06 anything that has to do with certificates, if you're just like, well, that's never going to work. I guess we're done here. It's just stand, right.

00:16:14 I'm on a campaign to make it so no one on the world needs to type verify equals false ever again. That's my mission. So

00:16:22 also, you spoke about certify, like, tell us what give us the background? I'm not sure we all know what certified as

00:16:27 Sure. Yes, certify is essentially, every web browser, like Chrome and Firefox and all that they have a bundle, a group of certificates that they are marking as these are trusted. And they kind of bundled those along with every single web browser, right. And so Mozilla, because it's open source, it open sources, it's trust store. And so what certify is, is it's a small, really thin wrapper, Python package around that bundle. And it allows Python to make HTTPS connections to websites, essentially, without having to, like rely on a certificate trust are being configured manually by the user. So a lot of times, because Python is installed on Windows or Mac OS, but is relying on open SSL for a lot of its TLS. It really requires a file to be there, like open SSL doesn't know anything about the system, certificate trust, or any of that it's very, it requires a file to be there, and so certify as solving that problem.

00:17:31 I see. So if I went and installed if I was on Windows and installed it into the trusted root store or something like that, it wouldn't, that wouldn't count. That wouldn't be enough.

00:17:40 There wouldn't be enough. Yeah, you would, there is a whole bunch of other things that you get. Also, by using these native operating system API's for certificates, like auto updates, it can be centrally managed. So you know, your IT department can click a button and update everyone's system trust or, though yeah, there's a lot of really good benefits to using the system truster instead of this Python Managed File. And this, this article kind of goes into the nitty gritty of that. The big announcement for this project was that PIP actually, with the version 22.2 release, added support experimental support for using this library instead of certify to verify HTTPS. And so what this will allow people to do is try out trust or, optionally, right, instead of switching it to a default, and if they're experiencing this class of errors with, you know, installing Python packages, or upgrading Python packages, they can use one flag, it's I believe it's listed. Either way, it would be listed here. So you do dash dash use dash feature equals truststore. And that will, you'll recognize that use feature flag for the 2020 resolver. That's another feature flag that they use. So this trustar feature flag is the same thing. It will if truststore is installed on your system, it will use that instead of certify, and it allows you to get around the errors that you can see when you have a corporate network involved. So yeah, that this is kind of the big thing that I'm really excited about. And we're really hoping that in the future, we can add this to Python, maybe make this a default for requests. Like there's there's a whole bunch of different really interesting things that we can go forward with if we can prove that, hey, this is useful to these users, right? Yeah,

00:19:29 yeah, fantastic. does. So if I say dash x use feature equals trust, or do I have to previously a pip installed trust store or something like that,

00:19:37 you do have to have previously installed trustor. So the package is relatively new, it's less than a year old. And so to ensure that we're able to keep things moving because it's experimental. We didn't want to bundle with PIP their release cycle is a lot longer. I collaborated with SUPing for a good long while on this and Making sure that everything was all good to go for PIP since shipping with PIP is a big deal. So, yeah, it's been a long a long road. So yeah, this

00:20:09 looks super useful. Kim out in the audience says I'd love to never need verify false again on my internal network. Seth mission is fantastic. Yeah,

00:20:18 yeah, I'm very grateful that this work is going on. I hope that that's true, because that drives me nuts.

00:20:24 Is it something you have to deal with internally as well? Brian? Yeah, cuz

00:20:27 we've got we've, you know, internal network, corporate firewall, we've got the trust stores and on Windows systems, and it's, it is an issue and we don't. So a lot of mean, one of the ways we get around it is to have an internal peipsi. We get a mirror inside. Yeah. But sometimes I want to try out stuff that's not there. So having having something like this work will be good. But it's not just by API. It's other places, too.

00:20:58 So yeah, the entire tire outside internet is usually impacted when you when you have that sort of situation of a corporate proxy. So

00:21:06 yeah, I'd like to be able to in that. So I'm guessing that this trust store, I mean, using it within PyPI would be great for a lot of people to try it, but trying out this trust store for applications that depend on trusted sites, that would be helpful as well. Right? Yeah.

00:21:22 So actually, the documentation if you're trying to use it manually with other things, we support your lib, three aIIow HTTP requests. And I'm sure it'll work with other libraries as well. Like HTTP X. Yeah, it should work with any, anything that uses the standard SSL context, like API, as long as it can use that API. It should work with it.

00:21:45 This is great. Awesome, very cool.

00:21:48 Nice work. Thanks for coming on. And sharing it late makes corporate Python a little better. You know, there's, this was long ago, when I first started the podcasts, this one and talk Python, there was a lot of debate or discussion, I guess, whether Python was an appropriate enterprise software type of language. You know, I think that debate is largely over. And I think the reason it's over is because the data scientist said, it's, this is not a debate, do you want us to do the job or not do the job? Do the job? That's right. Okay. Well, so let's use Python. And then it kind of spread from there internally as it through acceptance. That said, like now that it does live in these environments that Brian described much more frequently, it's really important to have the support. Yeah,

00:22:32 it's actually really funny, because so to put this in perspective, for Java, folks, this is like Java trust stores is like certify where you have this manual thing that shipped with Java, as opposed to just using the system. And I got that comment on lobsters or something. And I was talking about this article, and they're just like, wow, this is like getting rid of Java trusters. This is great. I didn't even know that existed.

00:22:56 That's fine. We really hate it over there. And

00:22:59 we hate this. So this is great. I was like, okay,

00:23:04 cool. All right. Well, before we get to the next topic, Ryan, let's talk about our sponsor for this week, and many weeks this year, Microsoft for startups founders hub, if you're starting a business, doing a start up your little ways going or you're just thinking about it, you should really check this out. Because Microsoft first startups set out to understand the challenges that they'll have creating startups in this digital cloud age. And they created Microsoft for startups, founders hub, help solve many of them. So that includes getting cloud resources, GitHub credits, other credits, like aI credits, for example, from open AI that you can run your code on. But maybe even more important than that. It has support for connecting you with mentors and experts to make sure that you go in the right direction when you're young and getting started. So so often, you see the successful startups being in places where there are a lot of mentors, where there's these networks, and people have connections to get funding, the marketing side of things, the product market fit, all of those things are super hard. So if you are part of Microsoft, for startups, founders hub, you will have access to their mentorship network, which gives you access to hundreds of mentors across a range of disciplines like the ones I just named, and more, as well as up to a little bit over $100,000 worth of credits in Azure and GitHub and open AI and other places as you go through certain checkpoints as you like, sort of grow with this program. So really tons of super support that you get for your startup. It doesn't have to be investor backed. It doesn't have to be third party verified, and participate. All you have to do is go to Python bisetta FM slash founders hub 2020 to apply and if you're accepted, you'll get all of this support from them. So make your idea a real already with Microsoft first startup founders hub, like today for free, get in, you'll get tons of support. So very nice. Also nice Brian bots, helps about

00:25:09 slots, bots in command lines. So I like command line stuff. And actually with the thanks of willing Bakugan, we've got a lot of people excited about CLS. But apparently, Bob is also Bob builder us from the Hivites. Duo. So he I Liked this article as actually kind of skim the article. Sorry, Bob. But making plots with your terminal with plot, plot text plot,

00:25:38 it's if you install this pilot, robots txt, like if I see the type of squatting,

00:25:45 yeah, so if you pip install it, there's one T in the middle. So it's PL o t, e x t. So, so he was doing a tweeted, had some code where he was looking at the plotting the frequency of their blog articles on the terminal, just so he's using some of their own data to plot stuff. And he came up with like, it's kind of cool walking through how he grabbed the data, and everything. But I was looking at this plot going, Oh, it's a pretty nice looking plot. I mean, it's totally blocky, of course, but but it's a bar chart. So it's supposed to be lucky. So that's okay. And so then I went over and looked at this, this package this plot text. And it's cool, you get all these awesome plots, I was looking at some of the various things you can do. It's got basic plots for, you know, just like sine waves and things like that. But you can also do fill in plots. And then multicolor, this is kind of a lot you can kind of cool stuff you can do on the command line. And then even data streams, which I was looking at that it's a data stream going on in a plot in your terminal. It's pretty great. Images even so there's a cat image

00:27:02 you guys can do Lolcats all day long. Yeah.

00:27:05 That put together those examples knew what the internet wants to do cat pictures.

00:27:10 Yeah. So and then even subplots. So the first example we saw, it has a it has kind of all this, this, it's not actually that bad of the interface looks pretty, you know, it's tedious to put together plots anyway, but this isn't too bad. But that cover image that we saw is a is not a combination of images. That's one plot that with subplots in it. So

00:27:35 I see. That's cool. So within one terminal window, you can do almost like a dashboard view with different plots and they can probably can be updating live and

00:27:43 yeah, yeah, so this is pretty exciting. Like so anyway, that was just I just wanted to say, Hey, if you want to plot on the command line, you can use this so

00:27:54 loving this terminal. Renaissance is so fun.

00:27:59 Yeah, make me make us feel like hackers again. You know?

00:28:03 So does absolutely make you feel like a happy hacker. I love it. That's so good. So, alright, on the next slide. Yeah. Just hadn't really planned to talk about this. But I just yesterday did an episode with Wilma Gergen seven lessons from building a modern UI framework. Brian, you cover that article last week on this show. So I reached out the will and said, Hey, we should absolutely cover this stuff. And like a deep dive. So oh, I can't wait to listen to this. Yeah, people go check that out as well. All right. But let's talk about one of my very favorite things, each T MX. People are not familiar with HC Max, you really owe it to yourself to check this out. It's what the web should have been forever, but wasn't for some reason. It's like it stalled in the late mid 90s. I don't know. And, you know, hyperlinks and forums are the only things that can make requests, you can only click on them to make it happen and so on. Why should the entire screen have to be replaced every interaction and all those things. So H HC Max is awesome. Just put in little fragments, that declarative code, and it does all the cool work, even have a class on it. People want to check that out. But that's not the topic of today. The topic is template fragments. So Carson gross over there wrote this article, this essay called template fragments, he said one way you might consider doing this is in HTML, see very frequently have to first show the page. And then as little sections of an update, he goes back to the server and says I just need to code the HTML block that goes into this fragment here because somebody moused over something else. So refresh it related item or whatever. He's a big fan of this thing called locality of behavior design principle where instead of having a bunch of pieces that link together, and reassemble themselves, like if it could just all be right there, wouldn't that be great. So he says, normally, the way that you would have to do this is you would have to have your full HTML and then a little subsection and then that subsection has the optional element. But some frameworks, some template libraries allow you to define a fragment. And then when the code is requested on the server, it can either show the whole thing or just peel that fragment out of the HTML. But you don't have to parse it into a bunch of small files. Guava is really useful if there's no reuse, like if the only reason you would make that little fragment is so that you could return it separately. This is great. Because basically, it means you can just write the page once. And it's it can interact with different data, different elements. If for some reason that fragment was being used in multiple places, all of a sudden, it's like code duplication. And that's not ideal. But so it talks about this, and hey, there's some known implementations of this. Apparently, Django has the render block extension. I created the Jinja partials and chameleon partials, which I'm not really sure I'm thinking I might actually take them out now that there's something for Jinja better, which I'm about to talk about. But nonetheless, those are kind of sort of allow this but more more in the second descriptive way where you have like a fragment that's separate, but included, but I was talking with Sergey pixies says between he said between Jinja two fragments, and Michael's my ginger partials. HTML x plus flask is so awesome. So he created this library called Jinja, two fragments, which does exactly what I described. So in Jinja, you have blocks, like you might have your main HTML, and you say, here's a block of main content with his library, what you can do, as you can say, either just render the template or you can now render block and named as part of your Jinja template and that part comes back with the data you supply to it. That's pretty awesome, right? Like this is one paragraph is the whole response from the server, if you call render block instead of render template.

00:31:48 This is yeah, this is super great. Honestly, I on Twitter, I every time I see HTML, I'm just like I am so like, prepared to write a website. Because I've not had the use case for a while but I'm very excited for the next time I will

00:32:01 I have exactly the same I've worked on projects that have been around for six or seven years. I'm like, five rewrite this thing. It's getting htm x all over it. But I just can't bring myself quite quite to do it. But yeah, it's it's so good.

00:32:15 One calm a couple of comments from the chat Vincent from calm coats as htm x is the bee's knees and grit calm code uses a whole bunch. I am not surprised and static. That's awesome.

00:32:27 Yeah, yeah, if I any website I create after knowing about AC T max is likely going to be using a C max. If you thought the answer was Vue js, or react or something like that, you may really, really, really want to check this out first.

00:32:41 Well, especially if you're somebody like me that I'm like, Yeah, I want to I want to put this interactive stuff in here. I don't, I don't really feel I'm not an expert in JavaScript, though. So I'm not sure and so but I but I do know somebody that knows a lot about HTML. So you might you

00:32:58 might know someone, you've been trained very close to getting me off onto like a very long rant about AC Max. But it's so good. Because even if you know JavaScript, it wouldn't it be better to not have to think about now I'm running client code. Now I'm writing server code. Now I'm running the API is to connect the client code to the server code. And this one's in this language that knows this. That one's in that language. And this location, it knows that like in HC Max, you just write it all in one place in one language with the same context and security model and everything access to the database, for example, and then you just do what you need to do. It's, it's perfect. Well, in

00:33:30 that it's not really just about thinking about two languages, either. It's, it's somebody, there's a lot of people like me, that already have to think in two languages. I'm thinking in C++ and Python. So thinking about it in a third language or fourth language, that's it's like, you know, come on to having a place to stop plus, yeah,

00:33:50 yeah. final final comment I'll make on this is even people are using no JS, like htm X. Where's the same language? It's like, it's also just about the context and location switch.

00:34:00 Oh, yeah. That's, I didn't hear I hadn't heard that. That's pretty cool. Yeah, that that

00:34:05 sounds like you were gonna say something. Maybe I'll let you have the last word here.

00:34:08 Oh, no, I was honestly just gonna say that. Like, the more we can stay in HTML, the better because you have to know HTML. So you might as well stay in it. Right? Yeah, absolutely.

00:34:16 Absolutely. So well, then Sergei, check out his Jinja two fragments. Homework. It's, it is super new, like, I don't know when it got released. But a couple of days. These are like two and three days on all the commits here. Very, very new days. Yeah. Well done. Well done. All right. Seth, over to you for the final line

00:34:39 or thing. Yeah, this this article was announcing something that's been getting worked on for a while which is generic generators for salsa three. So what you're seeing there SL S L S A that stands or if I can remember it is supply chain levels for artifacts. levels for software artifacts. So SLS A and you pronounce it salsa and chords essentially great,

00:35:07 great way to say that acronym.

00:35:09 Yeah, right? makes you hungry every time, which is the best part. But yeah, it's it's basically a set of tools and standards to a test and verify the provenance of artifacts. So essentially, where did this thing come from this file this wheel, this jar, depending on what, like ecosystem, independent, whatever thing, whatever artifact you're building, where did it come from? How was it built. And so it uses a whole bunch of different like cryptic graphical primitives and open IDC, i, which is basically magic, but it basically allows you to prove, in effect, okay, this was built from this specific GitHub repository, this commit this tag, and someone can then later take this file, this artifacts that got built and then verify that that was the case. And so this is kind of like in the future, hopefully be used as like a defense against maybe like stolen credentials on the Python package index, or that would never happen out that that would never happen. ever happened. And that would that has never happened other than at the time of the recording never has happened, I would say. So yeah, it gives a good defense against this, right? Because if you, let's say you have a package and Python package index knows that this package came from, you know, github.com/seth, M, Larson slash whatever, right. And then, in the future, it receives something that doesn't come from that GitHub repository, it can flag that and say, Hey, this isn't right. Like this didn't come from the place that it came from before or wherever it's supposed to come from. And the fact that this is generic is the big deal. The part that ties us back to Python is that you can use it for wheel files and source distributions, you can sign like anything. And so for example, one of the Python projects that is featured in here is your lips three, I've been trying to get into this and it's been really successful. And but your lip three now does this. And you can actually verify that it came from a specific repo and that the wheel was came from a specific tag. And yeah, it's it's really interesting. And this ecosystem is like just getting started. And so if you're like, interested in anything about like, supply chain security, and all of that, this is like a great place to start doing some learning about what the future might look like. Yeah,

00:37:26 this is great. I, when I first saw this, I thought, Okay, this is cool. But how does that really help protect against somebody sabotaging a package? But then again, if you think I realized, if you think back to what happened was most other packages, somebody got a hold of the the pi pi account, not the GitHub account? So this is like publish a new version directly? Not through the CI, right,

00:37:49 right. Yeah. So this is making, it just makes the amount of things that need to get compromised, even larger, right? Like, right, it closed, no longer do you need to only compromise the email account on peipsi, you have to also compromise GitHub. And then if you have GitHub or environments configured, you need to compromise a second account to like review the deployment. And so it just makes it even harder to actually get that attack off, essentially.

00:38:17 Yeah, if you had to publish the actual vulnerability to a popular GitHub repository to trigger it, it would be discovered sooner, right? Because people are like, Oh, what's Oh, that's, that's unusual that who has made this that they've made this commit? And now it's doing this URL thing over to hacks or.com and right like that's, that's just another out in public thing. Whereas if the direct account gets attacked, somebody can just use twine or something directly to push it a bad wheel up. Yeah,

00:38:47 exactly. Yeah. No more pushing bad wheels. You have to go through so many different hoops just to do something.

00:38:53 You need to flatten those bad wheels.

00:38:56 Gotta inspect them to

00:38:58 backway Alright, awesome. This is this is good stuff. Well, Brian, that's no. Do you have any more? No, that's all of them. Do you have any extras for us?

00:39:07 I do, although I'm gonna try to make it quick, because now I'm hungry for some salsa. So I wanted to I'm like, super excited for this upcoming weekend. I can't believe it. So on Saturday, on Saturday, September 10, I will be in September 10. I will be in San Francisco. And I've got two events going on at pi Bay. So pi Bay awesome conference. I haven't been there before. But you've been there last year or something like that. Yeah. Last

00:39:35 year, and I absolutely loved it. I would go this year if I wasn't on single parent duty and had kids that had to go to school.

00:39:42 So I'm giving two events. So one of them's a sharing is caring pi test fixture edition. I'm going to talk about building actually I'm just going to talk about packaging but it's not really about packet it's about sharing fixtures with other people. And because I think That's a bigger need and then people realize so anyway, love fixtures. We're gonna talk about that. And then and then I get asked to be on this experts panel there's no with we got Zack Hatfield DODDS me Andy Knight, which is he's got a good automation and automation pin to That's right. Joshua grant and the shot con. So it should be a fun panel. And it's it's seven o'clock at night. Wow, I think it really needs to change my flight because I was planning on flying out at 8am The next day, and that's gonna be tough. So. So that's going on next weekend. I'm pretty excited.

00:40:40 Yeah. My link says Good luck on the top. Right.

00:40:43 Thanks. So how about you? Do you have any extras?

00:40:46 I do I do a bunch of I'll make them pretty quick. So Heroku platform is a service place they for 13 years or something? I've had a free plan where people can go and create what are they called dinos or something I don't use dinos, I don't use Heroku. So I'm, I don't know the the terminology and the whole, the plans break down. But for a long time, they've had free plans. But now they are canceling them. And you will either have to pay or delete your projects. So that's gonna affect a lot of people, they have something like 13 million was right number here claims Yeah, that it's been used by 13 to develop 13 million apps. So I bet many of those are free, and are going to be suffering this. There's an interesting discussion on Y Combinator. And so you can check that out. I'm sure it's very civil over there in the comments as it always would be. Yes, yeah. But basically, you know, Heroku was purchased by Salesforce for they claim. And it may be true, I'm sure that it is somewhat true. They want to cancel this because of fraud and abuse, it may be more that they have to spend so much money to fight the fraud and abuse that it's just not worth it to them. I don't know what it is. But however you land on that it's a good idea, bad idea. It's going to cost money if you want to use this. And it's pretty pricey, by the way, like, this change will roughly double the cost of a basic planet uses Redis. And from like up to $50 a month, if you start bringing in your Redis cash and your Postgres host scene and your dinos and they all add up and then you got a scale this one or that one, right? One of the reasons I'm not using it, but not the only reason I want a little more control as well. But anyway, so if you have a free thing running on Heroku, or you're thinking about it, you have to think again, find something else. There's actually at the bottom, there's a bunch of platform as a service, things that I've never heard of there's Porter, railway, Render, fly IO and clever cloud, all of these things vying for this business. They all kind of interesting. I know nothing. You can check. I've seen

00:42:50 fly IO all over the place and Python, Twitter, at least. Yeah. Okay. So that's, if I were personally picking one, I would check that one out first, but I don't know anything about any of them, to be honest with you. Last time I used Heroku was a long time ago. So I'd like to

00:43:06 see some, some some real comparisons. Among some of these. If somebody's just saying like, there is there's still a place for hobby projects, you know, just I want to try something out. Or, you know, do something live even as like a high school app or something like that. I know. Oh, good. You're gonna show Python anyway.

00:43:29 I think it I gotta find the right link. Here we go.

00:43:32 So I think they still have a free tier. I don't know. advertise it much. But

00:43:36 there's free. Yeah. The

00:43:38 part that bothers me really isn't that it's I don't I, there's, there's a comment about coming to the chat about, it's hard to hard to, it's hard to complain about people. It's a free service. So they can do whatever they want. Right, right, essentially. Yeah. Oh, there's that right. That's the right one. Yeah. However, the jump between free and $50 a month is a big jump. And that's that's my gripe about it. So.

00:44:08 Yep. And that I agree for and listen to a recommendation. But yeah, that I feel like a lot of the cloud services have really pushed how easy it is to deploy because I remember what I initially started with Heroku the ease of deployment was the big win for a lot of people. And so yeah, a lot of cloud services where, you know, you're you pay for everything you use, but what you use ends up being a few cents a month, which is a lot more surmountable than $50 a month so yeah, there's definitely a gap there but there's not as much of a gap there as there was before Oh,

00:44:40 yeah, for sure. Brian out there audience says I'm gonna last company we had to disable our free tier due to crypto miners and of course, I'm sure Kim also as something as stealing the computation there but Alright, anyway. Okay, not I didn't want to go too far down that one, but for sure check, check out some of the options below. up DigitalOcean and Linode are also really, really good options. This one, I'm full of rants today or potential rants. This one comes to us from extreme tech Whitehouse, as in the US bands paywalls. On taxpayer funded research, it is always felt super creepy and wrong, that we have the NSF, which pays billions of dollars a year, millions for individual research projects to come up with scientific research that all three of us and many people listening actually pay for. I'm glad to pay it. I think this is really important. It's important for the country is important for the world. And yet, those results get locked up behind really expensive for pay scientific journals, right? Like, you've got to pay $5,000 a year to subscribe to this journal so that you can read the article that wait, we paid to create that and we can't even get access to it. So this this article here is the White House has updated federal rules to close a loophole that enabled journalists to keep taxpayer funded research behind a paywall, which I think is great. So if you're starting in the data science side, I think this this might be relevant to you.

00:46:09 Yeah, I'm curious how that's gonna get implemented. Yeah.

00:46:14 Meet you. Alright. Anyway, there's that. And then Seth, back to some of the stuff you're talking about. I mean, it would never happen that someone would try to fish we did last week, somebody tried to fish IPI, maybe was a week before when it started, but not too long ago. To over on dark reading.com. There's an article says threat actor phishing peipsi users has been identified. Juice ledger has escalated a campaign to distribute its information stealer by now going after developers who publish code widely used on the Python code repository, do want to go too much into it. But there's a group who had originally tried to do typo squatting, if I'm correct. They wrote some things as steal some malware written in dotnet, by the way, which will was joking about it only running on Windows. Hey, if these dotnet core, they could expand out the open source version anyway. I don't want to give them ideas. But they were distributing this malware through these malicious packages. And then they said, Well, what if we get really popular ones, hack their accounts and then upload bad wheels? So anyway, there's a bunch of background on the actual people behind this. So it's pretty interesting, you can check out that article, a few. And there's also an RS technical article, but it doesn't have as much depth as the dark green one. Nice. All right. Last one. After this, I think this is the last one Brian skin, former co host on the show who always contributes many interesting things is one bite, we'll definitely want to check this out. This is a tweet by Steve dower that says we have published the details of a critical security problem for Python, it is very rare that we have direct vulnerabilities and Python, like it was all fun to have the laws about Gini jindee and log for J. But this is not exactly that. But it's a denial of service at that kind of scale. So if you've ever thought I have a string, and it needs to be an integer, and that string came from user input, that's a really bad it turns out because there's a denial of service thing that you can do by passing very, very long strings to that integer parsing. Seth, you're shaking your head like Oh, boy. Yes.

00:48:25 Yeah, if you're, if you've been waiting to upgrade to python two, now, now's the time to upgrade python three, I would say exactly security support. And

00:48:34 say, I just got one of the older ones, like, you need to get the 310. Seven, ASP, I suspect they'll roll this back to some of the supported ones as well. So the prior back ported to three, nine and three, eight. But if you're on say, three, six, that's a problem. That's a big, big problem. Yeah. So expect releases for 3.7. Plus, in the next week. This came out a few days ago, this has now been done. But this Twitter thread thread is super interesting. And that's what I'm linking to. So you all can check that out. There was also some feedback like, what are you doing? What? How dare you fix this? The way they fix this is they said, if you're doing base 10 parsing, you can only use 4300 digits, not the number to 4000. But places in the number 4000 places that's a really large number. If it's bigger than that, basically Python won't be able to parse it before. Brian, you you do C++ all the time, you have to think about is this over 32,000 Is it signed or unsigned? Okay, it's unsigned or we can get to 64,000. This is not that level of thinking, but you kind of do have to think about what the heck's going on here.

00:49:42 I think it's a fair fix. That 92 Freaking out for no reason.

00:49:46 And this one was really, this one's wild too, because if you just pass along number, like it's not something sophisticated or anything this is it also feels almost not log for J But kind of log for j a little bit where you can just do denial of service evidenced by doing something very trivial.

00:50:03 Exactly. Yeah. You just, you just tried to set your username to J and di colon slash slash hacker.com. This is like, well, the number is a 1722117. Yeah. And then boom, now it has the website, right? This is just vs remote code execution, which is clearly better, but it's

00:50:20 not. Yeah, it's hold down the zero key for a little longer, exactly.

00:50:25 Where if you're writing Python code, you can just do times 10,000, Carrot 10,000, you know, power to 10,000 or something and send that

00:50:31 string extension really coming in handy here are pad

00:50:35 exactly, or Z fill. Piling wants to senpai across, you know, that's gonna upset it. Anyway, I upgraded my servers to 310. Seven. They were not available from Ubuntu directly. It was still the old 310 Six, which is unnerving. But because I build my from source, I just changed the number 310. Seven, rebuild and redeploy Python, I'm good to go.

00:51:00 I imagine everybody listening to this podcast is on three, seven or above, if they at any chance can be I mean, that if they're if they're below, it's not because they haven't tried.

00:51:13 Yeah, but let me point this out. I would say actually, I want to follow up a couple things. Because this is maybe this should have been the main main item. But whatever. One, we've talked about the reason you should upgrade to python three for a long time. And Brian, you and I had lots of fun calling it legacy Python, although we've had people go into iTunes and like post negative reviews of the podcast because I had said disparaging things to python two, but that's okay. I'm willing to stick by them. Oh, my

00:51:41 goodness, that is those more reviews, awesome. If you

00:51:46 have good things to say also consider posting and review not just if you're angry that I call it legacy Python. But if you're on old legacy code, which is even three, five, but is very seriously python two, because the gap to upgrade is really hard. These are the types of things that we warned about. That could be a problem. Yeah. And there will be no fix. Right? You better just say, well, we're gonna make sure the strings that are really destined to be integers are really, really checked. And you know, I mean, it's, it's not good. It's not good. So just one more reason to be on a shipping version of Python, even if it's just three, seven. Yeah. All right. Yeah, that's That's it. Let's see. Yeah, the change log. One other really quick. Yeah. So you can see it's like actually described quite well here, patched by Gregory P. Smith, and Christian Himes feedback by a bunch of great folks. Sebastian Ramirez said, I sent a tweet out when this got fixing. Please be kind to your open source. contributors. They just wrote 800 lines of code in a PR so that you can parse no strings to integers. Fairly wasn't easy to fix. But yeah, I agree. Cool. Ready for a joke? Or actually, Seth, you got anything extra you wanna throw out first?

00:52:59 Yeah, I had a real, hopefully quick one. I saw I follow a whole bunch of game art accounts on Twitter, because I just, I just love it. Seeing what people create. And one came by was using hashtag pixel py XL did a little digging. I'm like, wait a second. That's Python. And then I just went back in this developers, Twitter, a few, a few tweets back. And they just released wasum support for this Python, like game framework. And I'm like, this is incredible. So yeah, it was quite the it was a very fast journey of WoW, wasum was everywhere. At this point. That's kind of kind of wild that it's popping up so fast. So yeah, version 180 of this retro game engine for Python, which they had a whole bunch of really beautiful, like examples. I think y'all have covered this framework before,

00:53:49 but I'm not. Yeah, this is really cool.

00:53:52 So apparently, they have a whole bunch of demos that you can just play in the browser. And I was really blown away that I didn't even know this existed. And suddenly, there's wasm support for it. So

00:54:02 awesome. I love it. Okay, that's a great one. Yeah. All right. How about we close it out with a bit of a joke? Have you ever felt like you've had a hard day at work? There's one of these problems like parsing integers you like how could possibly this go wrong? I just don't understand what is happening. Well, here we have a joke of a guy at a nighttime soccer game. Apparently, it's a little cool. But it's been running really hard. So it's a picture of a guy whose head is literally steamy, like not a little bit a lot. A lot

00:54:33 think visualization of like integer being parsed into a string right there. Exactly before.

00:54:38 I'll read what the tweet really says. And then maybe we can play with it says the tweet says just a JavaScript developer after work. You know, like, What do you mean I have to do a new framework. I just did a new framework last month. I feel like this could be Christian Himes after going why do you why do you mean parsing integers? I did file services. I just can't

00:55:00 But in so wrong, the insert cursed. Exactly.

00:55:04 Anyway, I just I'll just leave this here for people to appreciate and we can call it a show 300

00:55:09 Yeah. Nice. Thanks.

00:55:12 Yeah, thank you, Brian. Seth, thanks so much for being here and sharing the work you've been doing. Yeah.

00:55:17 Thanks so much for having me. Yeah, it's been great. Byron

