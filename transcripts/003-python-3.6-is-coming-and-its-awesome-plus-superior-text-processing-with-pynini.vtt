
00:00:00.000 --> 00:00:02.680
This is Python Bytes, Python headlines and news


00:00:02.680 --> 00:00:04.240
delivered directly to your earbuds.


00:00:04.240 --> 00:00:08.920
Episode number three, recorded November 21st, 2016.


00:00:08.920 --> 00:00:10.520
Hey Brian, hello everyone.


00:00:10.520 --> 00:00:10.960
>> Hey.


00:00:10.960 --> 00:00:11.400
>> Hey.


00:00:11.400 --> 00:00:12.080
>> What's up?


00:00:12.080 --> 00:00:13.760
>> Hey man, great to chat with you.


00:00:13.760 --> 00:00:15.760
I'm really loving this show we're putting on.


00:00:15.760 --> 00:00:17.000
This is so much fun.


00:00:17.000 --> 00:00:18.400
But before I get to the headlines,


00:00:18.400 --> 00:00:19.880
actually I have some good news about the show.


00:00:19.880 --> 00:00:20.840
>> What's that Michael?


00:00:20.840 --> 00:00:23.840
>> Python Bytes is now brought to you by Rollbar.


00:00:23.840 --> 00:00:27.120
They take the pain out of errors and we'll hear from them later.


00:00:27.120 --> 00:00:28.800
But thank you Rollbar for sponsoring the show.


00:00:28.800 --> 00:00:29.800
That's really awesome. We appreciate it.


00:00:29.800 --> 00:00:31.800
That's really awesome. Thank you, Robar.


00:00:31.800 --> 00:00:33.800
Yeah, definitely. All right, let's get to the headlines.


00:00:33.800 --> 00:00:37.800
Every week there's so much cool stuff happening, right?


00:00:37.800 --> 00:00:42.800
Well, yeah, and this last week I just made a huge list of articles I read,


00:00:42.800 --> 00:00:44.800
Python-related, and I really enjoyed.


00:00:44.800 --> 00:00:47.800
It was a hard time picking out which one to talk about.


00:00:47.800 --> 00:00:48.800
Yeah, it really was.


00:00:48.800 --> 00:00:49.800
Yeah.


00:00:49.800 --> 00:00:50.800
All right, well, but you had to pick, right?


00:00:50.800 --> 00:00:52.800
Because we're only doing three each.


00:00:52.800 --> 00:00:54.800
We're trying to keep this short and on topic.


00:00:54.800 --> 00:00:57.800
Yeah, and I thought maybe we'd pick the same three, but we didn't.


00:00:57.800 --> 00:01:04.520
First up, I've got an article titled, "How to Get Superior Text Processing in Python with PyNini."


00:01:04.520 --> 00:01:05.880
I think I'm pronouncing that right.


00:01:05.880 --> 00:01:06.760
PyNini.


00:01:06.760 --> 00:01:08.600
Or maybe it's "Nee-Nee." I'm not sure.


00:01:08.600 --> 00:01:09.320
PyNini?


00:01:09.320 --> 00:01:13.320
Like the Knights of Nee from Monty Python.


00:01:13.320 --> 00:01:14.680
Yeah, you're probably right about that.


00:01:14.680 --> 00:01:21.400
This is from the O'Reilly blog, and it was written by Kyle Gorman and Richard Sprott, I think.


00:01:21.400 --> 00:01:25.800
Yeah, both who are PhDs in linguistics of some variety or other, right?


00:01:25.800 --> 00:01:30.800
Yeah, and actually because of that


00:01:30.800 --> 00:01:33.800
and also because of the title,


00:01:33.800 --> 00:01:35.800
I was afraid this was going to be


00:01:35.800 --> 00:01:37.800
sort of a hard thing to get into.


00:01:37.800 --> 00:01:39.800
But it's a really easy article.


00:01:39.800 --> 00:01:41.800
And my interest in it is mostly because


00:01:41.800 --> 00:01:44.800
when I read the Pragmatic Programmer a long time ago,


00:01:44.800 --> 00:01:47.800
it introduced me to the concept of mini-languages


00:01:47.800 --> 00:01:50.800
to solve simple problems with,


00:01:50.800 --> 00:01:52.800
"This is the data I have,


00:01:52.800 --> 00:01:54.800
and how to change it into the data I need."


00:01:51.800 --> 00:01:57.800
And often I used regular expressions for things like that, but sometimes that's not enough.


00:01:57.800 --> 00:02:02.800
And the next step always seemed to be to build up a parser or an abstract syntax tree.


00:02:02.800 --> 00:02:05.800
And that's way too far that I want to go.


00:02:05.800 --> 00:02:14.800
I think this article produces a nice halfway ground talking about what they call finite state transducers,


00:02:14.800 --> 00:02:17.800
which sounds like something in a Back to the Future movie.


00:02:17.800 --> 00:02:21.440
movie. But it's a... Quick Marty, connect to Finite State


00:02:21.440 --> 00:02:26.880
Introducer. Yeah, exactly. But I like working with finite state


00:02:26.880 --> 00:02:30.840
machines and apparently this is a finite state machine turned


00:02:30.840 --> 00:02:34.000
into something else. But the article starts with a small


00:02:34.000 --> 00:02:36.720
introduction to what finite state machines are and they're


00:02:36.720 --> 00:02:40.180
really easy to get the grasp of. If you look at the article,


00:02:40.180 --> 00:02:43.680
there's some nice pictures. And then they talk about how that


00:02:43.680 --> 00:02:50.720
applies to text processing and then introduces a concept of a finite state acceptor, which


00:02:50.720 --> 00:02:54.640
I think just accepts things, and then transducer spits things out.


00:02:54.640 --> 00:02:56.480
I believe I'm getting this right.


00:02:56.480 --> 00:03:01.360
How this applies to how to translate your thinking from regular expressions to these.


00:03:01.360 --> 00:03:05.600
And anyway, it goes through some of this, gives an example using cheese names, which


00:03:05.600 --> 00:03:11.600
I love the Python tradition of using cheese names and examples, and then introduces a


00:03:11.600 --> 00:03:18.000
a library called PyNini from Google to help build these things up.


00:03:18.000 --> 00:03:22.480
At the end, I kind of got a little bit lost, but I wasn't working through the examples


00:03:22.480 --> 00:03:23.480
myself.


00:03:23.480 --> 00:03:26.720
It is something that I think I might spend an afternoon poking through.


00:03:26.720 --> 00:03:29.600
Yeah, it is quite interesting, right?


00:03:29.600 --> 00:03:32.800
One of the things that makes me really happy about looking at this is, one, it's not too


00:03:32.800 --> 00:03:38.240
complicated and two, it gets you away from regular expressions, which anything that gets


00:03:38.240 --> 00:03:40.880
me away from regular expressions puts a smile on my face.


00:03:40.880 --> 00:03:45.880
Well, I actually really like regular expressions,


00:03:45.880 --> 00:03:48.880
although it is true that there's oftentimes


00:03:48.880 --> 00:03:51.880
with text processing where it doesn't work


00:03:51.880 --> 00:03:55.880
when you can't do it line by line.


00:03:55.880 --> 00:03:57.880
I'm probably not going to use this right away,


00:03:57.880 --> 00:03:59.880
but I appreciate this tool introduction


00:03:59.880 --> 00:04:01.880
so I can put it in my tool chest


00:04:01.880 --> 00:04:03.880
and next time I have a problem like this,


00:04:03.880 --> 00:04:05.880
I might look this thing up.


00:04:05.880 --> 00:04:07.880
Right, you guys will be looking at something,


00:04:07.880 --> 00:04:09.880
some data, and you're like,


00:04:05.880 --> 00:04:06.720
"Oh, you know what we need?


00:04:06.720 --> 00:04:07.960
"A finite state transducer.


00:04:07.960 --> 00:04:10.640
"We're gonna solve this."


00:04:10.640 --> 00:04:12.680
- And I totally wanna do that in a meeting.


00:04:12.680 --> 00:04:16.600
I think we should put a finite state transducer in here.


00:04:16.600 --> 00:04:17.760
- Fantastic.


00:04:17.760 --> 00:04:21.280
Now, it does things like pluralized stuff.


00:04:21.280 --> 00:04:22.800
You can teach it, like for example,


00:04:22.800 --> 00:04:24.360
you taught it what all the cheeses were,


00:04:24.360 --> 00:04:27.240
and then it could locate sentences


00:04:27.240 --> 00:04:28.800
that were talking about cheese,


00:04:28.800 --> 00:04:31.960
and do lots of interesting processing,


00:04:31.960 --> 00:04:32.920
not just pattern matching.


00:04:32.920 --> 00:04:33.800
It's cool.


00:04:33.800 --> 00:04:35.280
- It isn't, but it does start out


00:04:35.280 --> 00:04:40.280
with a simple example of if I tell it all the cheeses,


00:04:40.280 --> 00:04:43.640
to look through some code and find the cheeses


00:04:43.640 --> 00:04:46.360
and add a cheese tag around it or something.


00:04:46.360 --> 00:04:50.000
There are simple solutions,


00:04:50.000 --> 00:04:51.400
simple problems that it can solve as well.


00:04:51.400 --> 00:04:53.360
- Yeah, it's great to have it in your toolbox.


00:04:53.360 --> 00:04:55.880
Well, you know where I would like to run it, though?


00:04:55.880 --> 00:04:58.200
I don't really want to run it on Python 3.5


00:04:58.200 --> 00:05:00.120
or definitely not on 2.7 anymore.


00:05:00.120 --> 00:05:02.160
- Oh, yeah, nice transition there.


00:05:02.160 --> 00:05:04.400
- Thank you, yeah, I want to run that on Python 3.6.


00:05:02.160 --> 00:05:07.000
And you guys, there is amazing stuff coming in Python 3.6.


00:05:07.000 --> 00:05:09.240
And they just released beta 4.


00:05:09.240 --> 00:05:10.560
- Beta 4, wow.


00:05:10.560 --> 00:05:12.800
- So yeah, I don't know what the exact release schedule


00:05:12.800 --> 00:05:14.140
of the final release is,


00:05:14.140 --> 00:05:15.840
but I think it's coming up pretty quickly.


00:05:15.840 --> 00:05:17.920
These things are looking pretty solid.


00:05:17.920 --> 00:05:20.240
Let me just give you a sense of some of the peps,


00:05:20.240 --> 00:05:22.760
Python enhancement proposals that are coming.


00:05:22.760 --> 00:05:26.400
First up, it seems like no programming language


00:05:26.400 --> 00:05:29.160
of these days is content with their string formatting.


00:05:29.160 --> 00:05:30.660
In Python, it's like, look,


00:05:30.660 --> 00:05:33.020
we only have like eight ways to format strings,


00:05:33.020 --> 00:05:34.540
we need another.


00:05:34.540 --> 00:05:35.980
But this new way is actually pretty good.


00:05:35.980 --> 00:05:37.900
There's a pep498.


00:05:37.900 --> 00:05:41.620
And what is about is formatting string literals.


00:05:41.620 --> 00:05:44.500
So imagine you've got a string and normally you'd like,


00:05:44.500 --> 00:05:45.820
there's a variety of ways to do it.


00:05:45.820 --> 00:05:48.980
Maybe the newer way would to be to do something like say,


00:05:48.980 --> 00:05:50.160
I wanna say, "Hi, my name is,"


00:05:50.160 --> 00:05:52.100
and you have a variable called name, right?


00:05:52.100 --> 00:05:53.860
So you might say, quote,


00:05:53.860 --> 00:05:58.580
"Hi, my name is curly bracket zero, quote, dot format name."


00:05:58.580 --> 00:05:59.500
Yeah?


00:05:59.500 --> 00:06:03.500
Well, it kind of takes this idea and just says, well, why do you have to do the dot


00:06:03.500 --> 00:06:06.300
format and use arguments and orders and the number of them?


00:06:06.300 --> 00:06:09.100
Why don't you just put the name of the variable in the string?


00:06:09.100 --> 00:06:12.140
So now you could say, hello, my name is curly name.


00:06:12.140 --> 00:06:15.740
And now whatever the value of name is, if there's a variable that will be put into the


00:06:15.740 --> 00:06:17.900
string as if you did the first thing I said.


00:06:17.900 --> 00:06:18.900
But that's really cool.


00:06:18.900 --> 00:06:19.980
Yeah, it's pretty cool.


00:06:19.980 --> 00:06:25.100
The only bummer is you have to indicate that it's this new format string.


00:06:25.100 --> 00:06:28.300
I think it's an F prefix on the string.


00:06:28.300 --> 00:06:32.020
But you know, because otherwise you'd have like dictionary stuff mixing in.


00:06:32.020 --> 00:06:35.860
Just for compatibility. It's got to have a little identifier. But other than


00:06:35.860 --> 00:06:39.980
that, yeah, it's a really cool way to format stuff. Alright, so we also have


00:06:39.980 --> 00:06:45.980
another easy to understand but really nice one, PEP 515, which will let you put


00:06:45.980 --> 00:06:55.300
underscores in numerical literals. So if you have a number like 1 0 0 0 0 0 and


00:06:55.300 --> 00:06:56.960
and you look at it, is that a million?


00:06:56.960 --> 00:06:57.800
Is that 100,000?


00:06:57.800 --> 00:06:59.360
Is it 10 million?


00:06:59.360 --> 00:07:01.240
It's hard to know what the separators are.


00:07:01.240 --> 00:07:02.920
So now you can put underscores.


00:07:02.920 --> 00:07:06.080
So you could have like one underscore zero, zero, zero,


00:07:06.080 --> 00:07:07.800
underscore zero, zero, zero.


00:07:07.800 --> 00:07:11.080
And that would, it basically just ignores the underscores,


00:07:11.080 --> 00:07:12.480
but it allows you to visually see,


00:07:12.480 --> 00:07:14.600
oh, that's a million, not 100,000, something like that.


00:07:14.600 --> 00:07:15.440
- Oh, that's pretty cool.


00:07:15.440 --> 00:07:16.260
- Yeah, that's pretty cool.


00:07:16.260 --> 00:07:18.000
No, it's not gonna be world changing.


00:07:18.000 --> 00:07:21.340
One thing that is more significant, I guess,


00:07:21.340 --> 00:07:25.280
is in Python 3.5, we have type annotations, right?


00:07:25.280 --> 00:07:27.920
So I could have a function, I could have function,


00:07:27.920 --> 00:07:32.920
I could say it takes a, let's say it says create,


00:07:32.920 --> 00:07:35.920
function's name's create, and it has a thing called entity.


00:07:35.920 --> 00:07:37.880
Well, if you were given that function,


00:07:37.880 --> 00:07:39.520
you could be like, I have no idea what this does.


00:07:39.520 --> 00:07:42.200
Like entity, maybe that has to do with databases.


00:07:42.200 --> 00:07:45.240
But in Python 3.5, you could say colon customer,


00:07:45.240 --> 00:07:47.040
where customer's like a class or something.


00:07:47.040 --> 00:07:50.520
And then the tooling and whatnot would know


00:07:50.520 --> 00:07:52.280
to give you the right auto-completion


00:07:52.280 --> 00:07:55.880
and various type checking and whatnot for that type, right?


00:07:55.880 --> 00:07:57.600
But that only applied to functions.


00:07:57.600 --> 00:07:59.240
You couldn't put it on like variables


00:07:59.240 --> 00:08:01.720
and other types of class fields


00:08:01.720 --> 00:08:04.440
and other things that are outside of functions.


00:08:04.440 --> 00:08:08.600
So this PEP 526 brings that to functions.


00:08:08.600 --> 00:08:09.800
- That seems like obvious.


00:08:09.800 --> 00:08:12.220
I don't know why they didn't have that at the start.


00:08:12.220 --> 00:08:13.500
- Yeah, it definitely seems obvious.


00:08:13.500 --> 00:08:15.400
So, you know, maybe you don't care too much,


00:08:15.400 --> 00:08:18.240
but tooling will care, linters might care.


00:08:18.240 --> 00:08:20.560
So like the tools you use could possibly get better


00:08:20.560 --> 00:08:21.480
because of this.


00:08:21.480 --> 00:08:24.600
All right, so we have 525 asynchronous generators.


00:08:24.600 --> 00:08:25.980
Async and away is awesome.


00:08:25.980 --> 00:08:27.880
Yield, yield from are awesome,


00:08:27.880 --> 00:08:30.480
but they were not friends previously.


00:08:30.480 --> 00:08:31.560
Now, you couldn't use them together.


00:08:31.560 --> 00:08:33.960
So you could either have a async coroutine


00:08:33.960 --> 00:08:35.860
or you could have a generator, but you couldn't have both.


00:08:35.860 --> 00:08:37.360
Now you can have both.


00:08:37.360 --> 00:08:40.880
And similarly, we have asynchronous comprehensions.


00:08:40.880 --> 00:08:43.340
And you know, actually one of the biggest things


00:08:43.340 --> 00:08:47.320
is the change to dictionaries coming in Python 3.6.


00:08:47.320 --> 00:08:48.160
- What?


00:08:48.160 --> 00:08:49.000
- Yeah, so you might think,


00:08:49.000 --> 00:08:50.020
- Yeah, right.


00:08:50.020 --> 00:08:52.660
- Python has had dictionaries since,


00:08:52.660 --> 00:08:53.980
from the very beginning.


00:08:53.980 --> 00:08:56.660
When you add fields or attributes to a class,


00:08:56.660 --> 00:08:58.340
it's actually stored in dunder dict.


00:08:58.340 --> 00:09:00.900
I mean, dictionaries are, it's keyword values,


00:09:00.900 --> 00:09:02.700
like all over the place,


00:09:02.700 --> 00:09:04.920
dictionaries play a super important role.


00:09:04.920 --> 00:09:08.420
Well, in this release from 3.5 to 3.6,


00:09:08.420 --> 00:09:13.420
dictionaries are now 20 to 25% more memory efficient.


00:09:13.420 --> 00:09:16.060
They should be a little faster.


00:09:16.060 --> 00:09:17.880
They are ordered.


00:09:17.880 --> 00:09:21.520
So the order that you put things in, they remember that, right?


00:09:21.520 --> 00:09:24.840
Like if when you first started working with dictionaries, you're like,


00:09:24.840 --> 00:09:28.600
multiple dictionaries can have the fields show up at different times


00:09:28.600 --> 00:09:29.480
and different orders.


00:09:29.480 --> 00:09:30.160
It's bizarre, right?


00:09:30.160 --> 00:09:31.440
You can keep switching.


00:09:31.440 --> 00:09:32.560
Now, it's always consistent.


00:09:32.560 --> 00:09:36.520
- The order dict part and making them fast is good.


00:09:36.520 --> 00:09:37.680
So it's all good stuff.


00:09:37.680 --> 00:09:38.560
- Yeah, it's all good stuff.


00:09:38.560 --> 00:09:40.360
We've got a new secrets module coming.


00:09:40.360 --> 00:09:44.160
So you have cryptographically strong random number generators.


00:09:44.160 --> 00:09:47.720
Windows, they've now marked the Python executable


00:09:47.720 --> 00:09:49.840
as long path aware.


00:09:49.840 --> 00:09:51.280
So I don't know if you guys are aware,


00:09:51.280 --> 00:09:54.960
but Windows typically has like crummy 260 character path


00:09:54.960 --> 00:09:56.120
limits for a long time.


00:09:56.120 --> 00:09:58.240
There's a lot of legacy stuff that applies that


00:09:58.240 --> 00:09:59.280
to like newer code.


00:09:59.280 --> 00:10:02.360
So now long path limitations are gone in Windows,


00:10:02.360 --> 00:10:04.840
which if you write code that has to run on Windows,


00:10:04.840 --> 00:10:05.760
you'll care a lot about that.


00:10:05.760 --> 00:10:07.760
- Well, yeah, actually I try to write code


00:10:07.760 --> 00:10:10.120
that I don't have to care about Windows, but.


00:10:10.120 --> 00:10:11.960
- Yes, exactly.


00:10:11.960 --> 00:10:16.320
So if you go look through the link, the release notes,


00:10:16.320 --> 00:10:18.840
the documentation there, there's a lot more stuff.


00:10:18.840 --> 00:10:21.080
I'm scratching the surface on all the cool stuff


00:10:21.080 --> 00:10:22.200
coming in 3.6.


00:10:22.200 --> 00:10:24.840
So if people need one more reason to upgrade


00:10:24.840 --> 00:10:28.520
from two to three, well, here's like 20 or 30 more reasons.


00:10:28.520 --> 00:10:30.520
- Yeah, and I like the peps that you talked about.


00:10:30.520 --> 00:10:33.560
You left the links to those particular peps


00:10:33.560 --> 00:10:35.600
in the show notes, so that's great.


00:10:35.600 --> 00:10:36.760
- Yeah, yeah, definitely check them out.


00:10:36.760 --> 00:10:37.920
- Okay.


00:10:37.920 --> 00:10:38.840
- Hey, Brian.


00:10:38.840 --> 00:10:39.680
- Hey.


00:10:39.680 --> 00:10:40.720
- Before we get to the next headline,


00:10:40.720 --> 00:10:41.760
let me tell you about Rollbar.


00:10:41.760 --> 00:10:42.760
Well tell me about Rollbar.


00:10:42.760 --> 00:10:45.440
- Alright man, so Rollbar's sponsoring Python Bytes


00:10:45.440 --> 00:10:46.600
and we're really excited about it.


00:10:46.600 --> 00:10:48.240
I use Rollbar for my website.


00:10:48.240 --> 00:10:51.120
Rollbar is a package you install in your Python web app,


00:10:51.120 --> 00:10:52.560
Pyramid, Flash, Django, whatever,


00:10:52.560 --> 00:10:53.580
and any time there's an error,


00:10:53.580 --> 00:10:56.360
you get an immediate notification and detailed error reports.


00:10:56.360 --> 00:10:58.820
So, you know, even though the Talk Python websites


00:10:58.820 --> 00:11:02.000
handle almost two million dynamic HTTP requests per month


00:11:02.000 --> 00:11:04.160
and they transfer like four to five terabytes of data,


00:11:04.160 --> 00:11:05.080
I'm not worried about 'em.


00:11:05.080 --> 00:11:05.920
- Really?


00:11:05.920 --> 00:11:07.320
- No, not really, 'cause if something goes wrong,


00:11:07.320 --> 00:11:09.580
my Slack, my email, my phone,


00:11:09.580 --> 00:11:11.340
everything will be blown up with notifications


00:11:11.340 --> 00:11:15.500
and you know I don't get many but when they come in like all the info is there


00:11:15.500 --> 00:11:18.220
so I often don't even to debug it I just go and fix the problem


00:11:18.220 --> 00:11:21.540
it's pretty awesome right that's very awesome yeah I love her bar so and the


00:11:21.540 --> 00:11:24.700
Python bytes listeners all you guys out there you can have the same peace of


00:11:24.700 --> 00:11:28.620
mind just visit roll bar calm slash Python bytes and sign up for the free


00:11:28.620 --> 00:11:32.260
tier you get like 300,000 free errors tracked although I really hope you don't


00:11:32.260 --> 00:11:33.060
have that many


00:11:33.060 --> 00:11:36.780
yeah definitely you should do more testing if you do you definitely should


00:11:38.500 --> 00:11:43.500
Well, next up for me, I am a sucker for,


00:11:43.500 --> 00:11:47.180
I really like efficiency, developer efficiency.


00:11:47.180 --> 00:11:50.500
It's always kind of been important to me.


00:11:50.500 --> 00:11:52.300
And part of that is being able to set up


00:11:52.300 --> 00:11:54.700
your personal development environment to help you succeed.


00:11:54.700 --> 00:11:58.060
And I know it's different from everybody,


00:11:58.060 --> 00:12:00.500
and I'm always tweaking mine.


00:12:00.500 --> 00:12:02.420
I like articles when people write about them.


00:12:02.420 --> 00:12:04.660
So there's an article by Dougal, I think, Dougal Matthews,


00:12:03.580 --> 00:12:08.580
called "Create an Excellent Python Dev Environment."


00:12:08.580 --> 00:12:12.580
And he goes through installing Python,


00:12:12.580 --> 00:12:15.580
but everybody knows how to do that.


00:12:15.580 --> 00:12:17.580
But he's got some goals of,


00:12:17.580 --> 00:12:18.580
don't muck with the system Python,


00:12:18.580 --> 00:12:20.580
and set up virtual environments easy.


00:12:20.580 --> 00:12:23.580
And it's interesting,


00:12:23.580 --> 00:12:25.580
one of the things I think is interesting


00:12:25.580 --> 00:12:26.580
about this article is to start off the bat


00:12:26.580 --> 00:12:28.580
saying why he has particular goals


00:12:28.580 --> 00:12:30.580
for why he's chosen things.


00:12:30.580 --> 00:12:32.580
And that's kind of neat.


00:12:28.580 --> 00:12:31.080
- Yeah, that's cool, because you might look at it and go,


00:12:31.080 --> 00:12:33.100
I would never do that, but maybe your goals


00:12:33.100 --> 00:12:34.980
are different than his, and you can really understand


00:12:34.980 --> 00:12:36.980
where he's coming from because of that, that's cool.


00:12:36.980 --> 00:12:39.340
- Yeah, actually the first part confused me


00:12:39.340 --> 00:12:41.860
because he was covering a project that I'd never heard of


00:12:41.860 --> 00:12:45.900
called Pyenv, or P-Y-E-N-V.


00:12:45.900 --> 00:12:50.900
I'm more used to V-E-N-V, which just comes in 3.6


00:12:50.900 --> 00:12:54.780
or virtual environment, so this is something different,


00:12:54.780 --> 00:12:56.780
and I just will have to check it out,


00:12:56.780 --> 00:13:00.020
But it's something like virtual environments,


00:13:00.020 --> 00:13:01.580
but it's independent of Python,


00:13:01.580 --> 00:13:03.540
sets them up separate, I guess.


00:13:03.540 --> 00:13:04.380
I don't know.


00:13:04.380 --> 00:13:05.860
- Yeah, I haven't used it much either,


00:13:05.860 --> 00:13:06.860
so I might be a little off here,


00:13:06.860 --> 00:13:08.340
but I think it's kind of like for managing


00:13:08.340 --> 00:13:11.740
and creating and activating different virtual environments.


00:13:11.740 --> 00:13:14.340
It's like your virtual environment manager.


00:13:14.340 --> 00:13:15.180
- Okay.


00:13:15.180 --> 00:13:16.000
- I think.


00:13:16.000 --> 00:13:19.380
- Yeah, next is a PyEnv virtualenv,


00:13:19.380 --> 00:13:23.740
which is apparently similar to virtualenv-wrapper,


00:13:23.740 --> 00:13:25.020
which a lot of people use.


00:13:25.020 --> 00:13:30.020
I don't use either of those,


00:13:30.020 --> 00:13:31.780
but I still don't get what they're for.


00:13:31.780 --> 00:13:34.820
Straight virtual environments work fine.


00:13:34.820 --> 00:13:36.900
I don't understand what I need more for.


00:13:36.900 --> 00:13:39.940
You have different goals.


00:13:39.940 --> 00:13:41.100
Yeah, that's probably it.


00:13:41.100 --> 00:13:42.380
The next thing he talks about is a thing called PIPC,


00:13:42.380 --> 00:13:44.860
which I hadn't heard of, and I just used it today.


00:13:44.860 --> 00:13:48.060
It's a tool to let you install Python-based


00:13:48.060 --> 00:13:50.340
command line utilities in their own virtual environments


00:13:50.340 --> 00:13:54.180
so that you can just set your path to them


00:13:52.420 --> 00:13:57.420
so you can use them on the command line from anywhere.


00:13:57.420 --> 00:13:59.860
That's really cool, just to have


00:13:59.860 --> 00:14:01.260
these little virtual environments


00:14:01.260 --> 00:14:02.700
just for a command line utility.


00:14:02.700 --> 00:14:05.140
That's really cool.


00:14:05.140 --> 00:14:05.740
I'd never really thought of doing it that way.


00:14:05.740 --> 00:14:07.740
That's great.


00:14:07.740 --> 00:14:08.540
When I was talking in one of the interviews I've done,


00:14:08.540 --> 00:14:11.660
I heard about more people using Atom than before.


00:14:11.660 --> 00:14:15.580
And I tried to set up Atom,


00:14:15.580 --> 00:14:17.260
and I needed to give it a path to Flake 8.


00:14:17.260 --> 00:14:20.740
And I'm like, "Oh, I'll use Pipsi to set up this


00:14:18.460 --> 00:14:23.460
so that he can see Flake 8.


00:14:23.460 --> 00:14:25.460
I've done that.


00:14:25.460 --> 00:14:25.460
No, nice.


00:14:25.460 --> 00:14:26.460
But he does talk about, with Pipsi,


00:14:26.460 --> 00:14:28.460
he usually includes talks for testing multiple environments,


00:14:28.460 --> 00:14:34.460
which I highly recommend.


00:14:34.460 --> 00:14:35.460
Make docs, which is a, I think it's a static site generator


00:14:35.460 --> 00:14:39.460
documentation thingy.


00:14:39.460 --> 00:14:41.460
I've never used it.


00:14:41.460 --> 00:14:42.460
Git review, which I would totally use.


00:14:42.460 --> 00:14:44.460
It's a Gerrit integration for Git,


00:14:44.460 --> 00:14:46.460
but I don't use Git right now, but at work.


00:14:44.460 --> 00:14:49.460
and my personal, I actually do code reviews


00:14:49.460 --> 00:14:52.460
on my own code in my free time.


00:14:52.460 --> 00:14:55.460
And then Flake 8, of course, which is my favorite,


00:14:55.460 --> 00:14:57.460
recommended way to static and analyze stuff.


00:14:57.460 --> 00:15:00.460
And then as a side note,


00:15:00.460 --> 00:15:02.460
one of the things he was talking about


00:15:02.460 --> 00:15:04.460
for this PyANV is because it's compatible with Phish,


00:15:04.460 --> 00:15:10.460
which is a different shell that I've never heard of.


00:15:09.460 --> 00:15:13.060
I use Bash, I tried Zshell for a while.


00:15:13.060 --> 00:15:16.420
I'm always used, I think it's fun to try new shells,


00:15:16.420 --> 00:15:18.020
so maybe I'll give it a shot.


00:15:18.020 --> 00:15:19.500
- Yeah, definitely I wanna check out Phish,


00:15:19.500 --> 00:15:20.340
that sounds cool.


00:15:20.340 --> 00:15:24.500
I use Zshell as well, I just actually formatted my computer


00:15:24.500 --> 00:15:25.940
and I'm like, you know, I might try a different shell


00:15:25.940 --> 00:15:28.220
this time when I set everything up, so that's cool.


00:15:28.220 --> 00:15:29.540
I'll check out Phish.


00:15:29.540 --> 00:15:31.900
I do love to see the way people put these environments


00:15:31.900 --> 00:15:35.420
together and I think it really can help people who are new,


00:15:35.420 --> 00:15:37.220
it can help you discover things that you don't know about,


00:15:37.220 --> 00:15:39.380
like Pipsi, that's really great.


00:15:39.380 --> 00:15:44.640
I was just stuck in traffic today this morning and was thinking for some reason about this


00:15:44.640 --> 00:15:45.640
stuff.


00:15:45.640 --> 00:15:48.220
You know, other people, I don't know what they do, they do him about, but this is what


00:15:48.220 --> 00:15:49.220
I was daydreaming about.


00:15:49.220 --> 00:15:55.940
I was thinking, you know, I might try switching to conda instead of pip and try using conda


00:15:55.940 --> 00:15:57.840
for managing all these environments.


00:15:57.840 --> 00:16:02.980
I really like the way that conda like vets the packages and pre compiles them for you.


00:16:02.980 --> 00:16:03.980
I was reading about something.


00:16:03.980 --> 00:16:09.260
It was like, well, as long as you have this compiler set up, it'll probably be fine, but


00:16:09.260 --> 00:16:12.380
it might not work so well. I'm like, you know what, maybe I should just use


00:16:12.380 --> 00:16:17.260
conda and like all those problems are solved by the continuum guys. And so I'm


00:16:17.260 --> 00:16:22.580
also doing a lot of virtual environments with Python 3 v and v. And the one thing


00:16:22.580 --> 00:16:26.740
that I like that I've stopped using the the main Python rebel and I'm using PT


00:16:26.740 --> 00:16:28.380
Python. Do you know PT Python?


00:16:28.380 --> 00:16:31.020
PT Python? No, I don't.


00:16:31.020 --> 00:16:37.300
PT Python is, it's basically the the regular rebel, but it has a lot better


00:16:37.340 --> 00:16:42.300
editing and history and auto completion and all sorts of stuff for what you can


00:16:42.300 --> 00:16:45.940
do. So like, for example, if you type in a function in the regular REPL, you know,


00:16:45.940 --> 00:16:49.300
it's like three lines with indentation or whatever. If you want to edit it,


00:16:49.300 --> 00:16:53.060
you got to remember to like always replay them in the right order, you know,


00:16:53.060 --> 00:16:56.940
up arrow four times, enter up arrow three times, make the change, you know,


00:16:56.940 --> 00:17:00.420
that kind of stuff. This will like, if you hit up arrow for code suites,


00:17:00.420 --> 00:17:02.860
it'll bring the whole thing back and you can edit it, stuff like that.


00:17:02.860 --> 00:17:05.620
Oh, okay. Do you work in the REPL very much?


00:17:05.660 --> 00:17:07.820
Not too much. Usually I'm in some kind of editor.


00:17:07.820 --> 00:17:10.400
But when I am there, I've been moving to PT Python.


00:17:10.400 --> 00:17:11.000
That's pretty cool.


00:17:11.000 --> 00:17:12.160
I think I'll check it out.


00:17:12.160 --> 00:17:13.460
Yeah, yeah, check it out.


00:17:13.460 --> 00:17:14.360
So what do you got next?


00:17:14.360 --> 00:17:16.700
Well, a lot of people have been checking out Python lately.


00:17:16.700 --> 00:17:19.700
And there was an interesting article.


00:17:19.700 --> 00:17:20.400
Is it an article?


00:17:20.400 --> 00:17:23.660
It was an article that's posted as a GitHub repository,


00:17:23.660 --> 00:17:25.860
which is accompanied by a Go program


00:17:25.860 --> 00:17:28.800
that's generated a bunch of statistics and graphs.


00:17:28.800 --> 00:17:32.400
And the thing I'm actually linking to is a Reddit article


00:17:32.400 --> 00:17:37.400
with like 350 upvotes and tons of comments.


00:17:37.400 --> 00:17:40.720
You can check out the conversation.


00:17:40.720 --> 00:17:43.120
But the headline is awesome.


00:17:43.120 --> 00:17:45.440
GitHub language statistics.


00:17:45.440 --> 00:17:47.280
Python is the second most popular language on GitHub


00:17:47.280 --> 00:17:50.280
for active repositories.


00:17:50.280 --> 00:17:52.040
- That's awesome.


00:17:52.040 --> 00:17:52.840
- Yeah.


00:17:52.840 --> 00:17:53.800
I mean, Python's growth is just continuing and expanding


00:17:53.800 --> 00:17:57.880
and it's such a cool time to be involved in the language.


00:17:57.880 --> 00:18:01.080
And here's just one more stat to back that up.


00:17:58.400 --> 00:18:02.640
>> Yeah, looks like the graphs you have to click through from the Reddit to the GitHub


00:18:02.640 --> 00:18:03.640
page.


00:18:03.640 --> 00:18:04.640
>> Yeah, yeah.


00:18:04.640 --> 00:18:06.000
So I'm linking to both.


00:18:06.000 --> 00:18:10.800
So they say we're going to study active repositories because it doesn't make any sense to think


00:18:10.800 --> 00:18:15.960
about GitHub statistics if something was put there five years ago and hasn't been touched.


00:18:15.960 --> 00:18:19.200
All right, so they said let's consider the set of active repositories.


00:18:19.200 --> 00:18:25.360
Those are created or updated during the period and the period is like a bunch of dates like


00:18:25.360 --> 00:18:29.360
throughout the last three years, you'll see when you get there. And it has to


00:18:29.360 --> 00:18:32.880
have at least one star so people have to... somebody has to care about it.


00:18:32.880 --> 00:18:37.600
Somebody has to care enough about it to have forked it. And it must be more than


00:18:37.600 --> 00:18:43.680
10k, right? So it can't just be like, "Well, I put up this one file and somebody


00:18:43.680 --> 00:18:45.960
forked it." Or you know something silly like that. It's got to be like a real


00:18:45.960 --> 00:18:50.920
project. So if you take all of those together, JavaScript turns out to be the


00:18:50.920 --> 00:18:56.400
most popular. But JavaScript, I'm sure, is highly over-counted. I'm pretty sure


00:18:56.400 --> 00:19:01.320
that's generally true on GitHub statistics because almost every one of


00:19:01.320 --> 00:19:05.360
my Python projects has some JavaScript. You know what I mean? Yeah, I mean, since


00:19:05.360 --> 00:19:10.280
it's the front end, it's almost every project has it. Right, almost any web


00:19:10.280 --> 00:19:15.040
project in any language is going to be counted as JavaScript to some degree in


00:19:15.040 --> 00:19:19.840
the language category. And so I feel like JavaScript, while it is extremely popular,


00:19:19.840 --> 00:19:25.380
I think it's massively overcounted in these types of stats and it seems to appear that way in the graph


00:19:25.380 --> 00:19:30.820
But so Python displaced Java which we can all cheer for that, right? That's awesome


00:19:30.820 --> 00:19:34.780
Yeah, but let me give you some stats that are pretty interesting that will I think it's might blow your mind


00:19:34.780 --> 00:19:38.360
So back in November 2014, there were one thousand seven hundred ninety


00:19:38.360 --> 00:19:44.000
Active repositories by the four criteria above you know that were Python. This is just Python


00:19:44.000 --> 00:19:46.960
November 2015 there was


00:19:47.460 --> 00:19:55.500
And if you look throughout the year of 2015 and early 2016, it would vary, but it's like


00:19:55.500 --> 00:19:59.140
2000 to 2500, 2600.


00:19:59.140 --> 00:20:05.300
By November 2016, there's 10,944 active repositories.


00:20:05.300 --> 00:20:07.140
It's just like, it's growing like crazy.


00:20:07.140 --> 00:20:08.140
Yeah.


00:20:08.140 --> 00:20:09.140
I love seeing that.


00:20:09.140 --> 00:20:15.180
And I think one of the things I like, I think has changed in that timeframe is the, I don't


00:20:15.180 --> 00:20:20.180
I don't know if it can be attributed to this,


00:20:20.180 --> 00:20:22.180
but the Cookie Cutter project has made it a lot easier


00:20:22.180 --> 00:20:24.940
for people to set up something to share on GitHub.


00:20:24.940 --> 00:20:29.140
Yeah, Cookie Cutter is really awesome.


00:20:29.140 --> 00:20:31.140
If you guys don't know about Cookie Cutter,


00:20:31.140 --> 00:20:32.320
check it out, it's a cool project.


00:20:32.320 --> 00:20:34.320
I'm sure it's not hurting.


00:20:34.320 --> 00:20:35.400
Yeah, anyway, that's good.


00:20:35.400 --> 00:20:37.120
Also, it makes me think that I spent the right time


00:20:37.120 --> 00:20:40.000
learning a new language.


00:20:40.000 --> 00:20:41.680
I started from C++.


00:20:41.680 --> 00:20:43.760
Yeah, absolutely.


00:20:43.760 --> 00:20:45.140
It's good to be in a place that's growing.


00:20:41.840 --> 00:20:43.680
I mean, obviously take these stats.


00:20:43.680 --> 00:20:45.120
They're at the grain of salt.


00:20:45.120 --> 00:20:48.360
They're sliced in all these various criteria and so on.


00:20:48.360 --> 00:20:53.720
So they might not be perfect, but they give a glimpse into a world that is doing very


00:20:53.720 --> 00:20:56.120
well and is very fun to be part of.


00:20:56.120 --> 00:20:57.400
So I'm happy to see it.


00:20:57.400 --> 00:21:04.440
Okay, we're up to my number three pick, which is handling Unicode strings in Python.


00:21:04.440 --> 00:21:09.560
It is from, I know I'm going to get this name wrong, Wan-Li Song, I think, but we'll link


00:21:09.560 --> 00:21:11.480
it of course in the show notes.


00:21:11.480 --> 00:21:16.480
I like it because it's a nice article


00:21:16.480 --> 00:21:19.360
to introduce people about the concepts


00:21:19.360 --> 00:21:21.360
of text representation in Python.


00:21:21.360 --> 00:21:24.160
And this comes up, at least, it hurts my head sometimes


00:21:24.160 --> 00:21:27.520
because I came up with the 2.7 Python world


00:21:27.520 --> 00:21:31.120
and I think anybody that learned with 2.7


00:21:31.120 --> 00:21:33.760
and had to switch to a more recent 3X version,


00:21:33.760 --> 00:21:37.720
sometimes it's hard to understand how the switch happens.


00:21:37.720 --> 00:21:40.920
And there's a nice table


00:21:37.280 --> 00:21:42.280
for some of the things that are different.


00:21:42.280 --> 00:21:45.280
And then it goes through specifics of dealing with Unicode


00:21:45.280 --> 00:21:51.200
in things like I/O boundaries to databases or services.


00:21:51.200 --> 00:21:55.720
And then also a few other examples are dealing with it,


00:21:55.720 --> 00:21:58.500
with logging, with JSON encoding, and with Redis even.


00:21:58.500 --> 00:22:02.960
A nice pointer to a 2012 article from Nat Batchelder


00:22:02.960 --> 00:22:06.640
called "Pragmatic Unicode," which I hadn't read before.


00:22:04.520 --> 00:22:07.560
So I learned a lot about Unicode in this last week.


00:22:07.560 --> 00:22:08.800
- Oh yeah, that's great.


00:22:08.800 --> 00:22:11.200
If you have to juggle that stuff, it can be tricky.


00:22:11.200 --> 00:22:15.720
I remember talking to some of the web foundation guys,


00:22:15.720 --> 00:22:19.200
think it was Kenneth Wrights and requests,


00:22:19.200 --> 00:22:22.720
but it could have been Armin Roediger and Flask.


00:22:22.720 --> 00:22:24.480
I'm not sure, I think it was Kenneth.


00:22:24.480 --> 00:22:27.920
Anyway, seeing that one of the most challenging things


00:22:27.920 --> 00:22:30.880
of upgrading their projects from two to three


00:22:30.880 --> 00:22:32.320
or supporting three, let's say,


00:22:32.320 --> 00:22:36.820
is the dramatically different way that bytes go to strings


00:22:36.820 --> 00:22:39.160
and all of this kind of stuff.


00:22:39.160 --> 00:22:41.920
So yeah, if you've got to upgrade something


00:22:41.920 --> 00:22:44.240
that's two to support three,


00:22:44.240 --> 00:22:45.600
be really careful with the strings.


00:22:45.600 --> 00:22:48.040
- Yeah, and this is another one of those,


00:22:48.040 --> 00:22:49.440
I'm gonna bookmark it,


00:22:49.440 --> 00:22:52.680
and if the next time I come up with an issue,


00:22:52.680 --> 00:22:54.120
I'll look through this,


00:22:54.120 --> 00:22:56.480
see if I can help me figure out how to fix it.


00:22:56.480 --> 00:22:57.520
- Yeah, awesome.


00:22:57.520 --> 00:22:59.720
- All right, what do you got as your last one, Michael?


00:22:59.720 --> 00:23:02.880
My last one, I think this one might be a little surprising for you.


00:23:02.880 --> 00:23:03.880
Let's see.


00:23:03.880 --> 00:23:08.640
So I've asked many people what their favorite editor is over at Talk Python.


00:23:08.640 --> 00:23:11.220
I've heard many answers.


00:23:11.220 --> 00:23:15.600
It would be fun to go back and actually do some data analysis and graphs or whatever,


00:23:15.600 --> 00:23:16.600
right?


00:23:16.600 --> 00:23:19.560
But I would say Sublime Text, extremely popular.


00:23:19.560 --> 00:23:22.240
Emacs, very popular.


00:23:22.240 --> 00:23:26.120
Vim, I think Vim might be slightly beating Emacs.


00:23:26.120 --> 00:23:27.600
PyCharm is pretty popular.


00:23:27.600 --> 00:23:29.200
People hear me go on and on about PyCharm.


00:23:29.200 --> 00:23:30.360
I love PyCharm.


00:23:30.360 --> 00:23:30.860
Really?


00:23:30.860 --> 00:23:31.600
I didn't know that.


00:23:31.600 --> 00:23:32.100
Yeah.


00:23:32.100 --> 00:23:32.960
Yeah.


00:23:32.960 --> 00:23:36.200
Most people don't know this about me, but I actually do use it now.


00:23:36.200 --> 00:23:37.400
I do love it a lot.


00:23:37.400 --> 00:23:43.080
But one thing I came across with was I was fooling around with Visual Studio


00:23:43.080 --> 00:23:43.580
Code.


00:23:43.580 --> 00:23:47.960
And this is not like Visual Studio from Windows, the big .NET thing.


00:23:47.960 --> 00:23:50.560
This is like a lightweight editor.


00:23:50.560 --> 00:23:54.120
It's based on, I think, the same underlying stuff as Atom.


00:23:54.120 --> 00:23:58.280
It's using the Chrome as its underlying engine,


00:23:58.280 --> 00:24:01.560
and it's based on some client-side HTML stuff.


00:24:01.560 --> 00:24:04.280
Anyway, it's a free editor that's pretty cool


00:24:04.280 --> 00:24:07.600
and it's growing quite a bit in terms of its extensions


00:24:07.600 --> 00:24:08.440
you can get for it.


00:24:08.440 --> 00:24:10.160
It's got like cool Git integration


00:24:10.160 --> 00:24:13.200
and now it's getting better Python integration.


00:24:13.200 --> 00:24:17.440
So my pick is this thing called the Python extension


00:24:17.440 --> 00:24:19.520
for Visual Studio Code and it runs on Mac


00:24:19.520 --> 00:24:22.320
and Windows and Linux and so on.


00:24:22.320 --> 00:24:24.200
And I have a link to the one there.


00:24:24.200 --> 00:24:26.880
And what's really interesting is,


00:24:26.880 --> 00:24:30.840
Well, the bunch of features, which I'll tell you, but if I had to ask you,


00:24:30.840 --> 00:24:34.280
Brian, how many times do you think this thing has been downloaded?


00:24:34.280 --> 00:24:37.660
Uh, 23, 23 is good.


00:24:37.660 --> 00:24:43.100
Well, I would guess thousands, maybe 20, 30,000 times, something like this, right?


00:24:43.100 --> 00:24:43.920
Like, okay.


00:24:43.920 --> 00:24:46.560
How many people are installing full Python support?


00:24:46.560 --> 00:24:50.560
This is like, not just standard completion, but it like reads.


00:24:50.560 --> 00:24:54.400
If you were writing a package that like understands your package and will tell


00:24:54.400 --> 00:24:59.600
you exactly what all the names of all the elements symbolically in your package,


00:24:59.600 --> 00:25:04.800
it'll do like AST based refactoring, like really cool stuff, right? Anyway,


00:25:04.800 --> 00:25:10.480
850,000 installs. That's actually incredible. Now I want to go try it.


00:25:10.480 --> 00:25:14.800
Yeah. I mean, when you think of thinking Python editors, eight, almost a million


00:25:14.800 --> 00:25:18.600
people installed this Python support for their editor. Now, of course, not every


00:25:18.600 --> 00:25:23.720
one of them is doing Python all the time. And there's not a one to one mapping


00:25:23.720 --> 00:25:28.260
between developers and editors, but this is like way more popular than I realized.


00:25:28.260 --> 00:25:29.560
And so I thought, well, why don't I play with it?


00:25:29.560 --> 00:25:32.880
So I played with it this week and I'm pretty impressed for like lightweight stuff.


00:25:32.880 --> 00:25:34.480
I think this is my new editor.


00:25:34.480 --> 00:25:35.480
Oh, okay.


00:25:35.480 --> 00:25:36.920
I was just actually picking it.


00:25:36.920 --> 00:25:39.040
I installed Adam this morning.


00:25:39.040 --> 00:25:40.480
Maybe I'll try this one out as well.


00:25:40.480 --> 00:25:42.280
Yeah, it's really similar to Adam actually.


00:25:42.280 --> 00:25:43.820
So it's worth giving it a try.


00:25:43.820 --> 00:25:49.060
So it has linting, including a bunch of linters you can configure, including Flake 8.


00:25:49.060 --> 00:25:53.560
It has full on auto completion as well as support for PEP 484.


00:25:53.560 --> 00:25:55.960
I think that's the type hints.


00:25:55.960 --> 00:25:59.760
It has Jupyter support, indenting, code formatting,


00:25:59.760 --> 00:26:04.560
refactoring, like I said, code navigation, debugging.


00:26:04.560 --> 00:26:09.240
You can remotely debug over SSH to like a flask app.


00:26:09.240 --> 00:26:11.740
I mean, that's pretty serious for this little plugin, right?


00:26:11.740 --> 00:26:12.580
That's awesome.


00:26:12.580 --> 00:26:15.280
Unit tests, all the various tests you're talking about,


00:26:15.280 --> 00:26:16.160
lots of good stuff.


00:26:16.160 --> 00:26:19.120
So anyway, I thought this is kind of one


00:26:19.120 --> 00:26:21.840
of the unsung heroes of the editors.


00:26:21.840 --> 00:26:23.200
So I thought I'd highlight it.


00:26:23.200 --> 00:26:28.200
- Yeah, cool. And maybe the next time you ask somebody, they'll say, "I use code."


00:26:28.200 --> 00:26:32.200
- Oh, yeah, I use Visual Studio Code all the time. Anyway, yeah, it's pretty cool.


00:26:32.200 --> 00:26:34.200
So I'm excited to try it out, at least.


00:26:34.200 --> 00:26:36.200
- Okay, well, I think I'll try it out, too.


00:26:36.200 --> 00:26:41.200
And that brings us to the end, but we do like to catch up with what both of us are up to.


00:26:41.200 --> 00:26:44.200
So, Michael, what are you up to lately?


00:26:44.200 --> 00:26:48.200
- Well, I've been continuing to crank out the Talk Python to Me episodes.


00:26:48.200 --> 00:26:52.200
So the last one I just released was "Parsing Horrible Things with Python,"


00:26:52.200 --> 00:26:56.340
I wanted to make sure I pointed out here because I think that's a really interesting tie into your first


00:26:56.340 --> 00:26:58.960
pick of the week because


00:26:58.960 --> 00:27:04.820
It's another way to parse horrible things that I think is really actually quite powerful and interesting


00:27:04.820 --> 00:27:10.280
So anyway, I released that with Eric Rose and that was cool. That was a really interesting episode


00:27:10.280 --> 00:27:16.320
I really enjoyed it. Eric is obviously a brilliant guy. So that was good. Yeah. Thanks a lot


00:27:16.320 --> 00:27:19.080
Yeah, he was he's a great guest and definitely enjoyed talking to him


00:27:19.320 --> 00:27:25.280
You last week had asked me if awesome Python the GitHub thing was the same as the awesome Python newsletter


00:27:25.280 --> 00:27:27.280
And I said I think so


00:27:27.280 --> 00:27:29.520
And now I think now I think I might be wrong


00:27:29.520 --> 00:27:34.840
No fact that the awesome Python newsletter comes from Python dot lib hunt calm


00:27:34.840 --> 00:27:40.640
Which is a really cool place for Python news and I think one or two of the news items throughout the podcast


00:27:40.640 --> 00:27:46.960
I've not this one, but over all of them. I've gotten from that place. Okay, so yeah, that's my picks. What's up with me?


00:27:46.960 --> 00:27:47.920
Python is so awesome


00:27:47.920 --> 00:27:52.920
It's awesome, we like to slap it on everything.


00:27:52.920 --> 00:27:56.200
It's awesome, yeah.


00:27:56.200 --> 00:27:57.560
How about you, what are you up to?


00:27:57.560 --> 00:27:58.560
Man, I've been doing a lot of writing.


00:27:58.560 --> 00:27:59.920
I've got an editor deadline in about a week,


00:27:59.920 --> 00:28:03.360
actually, exactly a week from today,


00:28:03.360 --> 00:28:05.600
because I'm trying to put on full steam,


00:28:05.600 --> 00:28:08.080
and it's the PyTest book, and I'm trying to get it ready


00:28:08.080 --> 00:28:11.520
so that it can be printable, and I can take a stack of copies


00:28:11.520 --> 00:28:15.480
with me to PyCon in 2017 in May.


00:28:14.320 --> 00:28:15.880
So that's what I've been working on.


00:28:15.880 --> 00:28:21.380
The last episode of Test and Code is recorded and partly edited.


00:28:21.380 --> 00:28:25.520
This was number 25 with Dave Hunt about selenium.


00:28:25.520 --> 00:28:29.600
And there's some really good content mixed in with some really stupid questions that


00:28:29.600 --> 00:28:30.600
I've asked.


00:28:30.600 --> 00:28:35.100
So I need to go and cut out the stupid questions and then it'll be good to go.


00:28:35.100 --> 00:28:37.460
Hopefully we'll get that out in the next couple of days.


00:28:37.460 --> 00:28:42.620
And then I'm really excited about an interview tomorrow scheduled.


00:28:42.620 --> 00:28:47.620
it goes through with a person called David Hussman.


00:28:47.620 --> 00:28:51.620
He runs a place called Dev Jam Studios,


00:28:51.620 --> 00:28:54.620
and he talks about Agile and goes around and speaks to people.


00:28:54.620 --> 00:28:59.620
He's a really good speaker, so looking forward to talking to him.


00:28:59.620 --> 00:29:02.620
Yeah, that'd be awesome.


00:29:02.620 --> 00:29:03.620
Kind of a slightly above the code talk


00:29:03.620 --> 00:29:05.620
about all the testing and whatnot, right?


00:29:05.620 --> 00:29:07.620
Yeah, and I don't even know if he'll get into testing.


00:29:07.620 --> 00:29:10.620
One of the things he likes to talk about lately is story mapping,


00:29:09.620 --> 00:29:15.780
which is sort of a high-level planning for an entire project above the writing


00:29:15.780 --> 00:29:20.380
stories level and that's pretty neat. Yeah that's cool, definitely precedes


00:29:20.380 --> 00:29:26.980
code. Yeah, well anyway I really enjoyed talking with you this week and look


00:29:26.980 --> 00:29:31.260
forward to seeing what cool stuff people put out in the upcoming week. Yeah,


00:29:31.260 --> 00:29:34.460
thanks Brian, I enjoyed it as well and like always I learned about some cool


00:29:34.460 --> 00:29:38.300
new things. I'm definitely checking out Pipsy and thank you everyone for


00:29:38.300 --> 00:29:42.860
listening and we will see you next week. Bye-bye.

