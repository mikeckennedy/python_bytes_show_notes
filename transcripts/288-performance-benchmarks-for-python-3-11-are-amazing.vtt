
00:00:00.000 --> 00:00:02.440
>> Hello and welcome to Python Bytes where we deliver


00:00:02.440 --> 00:00:05.160
Python news and headlines directly to your earbuds.


00:00:05.160 --> 00:00:07.720
This is episode 288,


00:00:07.720 --> 00:00:11.640
recorded June 14th, 2022. I'm Michael Kennedy.


00:00:11.640 --> 00:00:12.840
>> I am Brian Okken.


00:00:12.840 --> 00:00:14.000
>> Brian, how are you doing?


00:00:14.000 --> 00:00:15.420
>> I'm excellent today.


00:00:15.420 --> 00:00:17.040
>> I hear you're a little busy.


00:00:17.040 --> 00:00:19.600
>> But it's just being a parent


00:00:19.600 --> 00:00:21.840
and having side jobs and stuff like that.


00:00:21.840 --> 00:00:24.260
>> Of course. Well, it's better than the alternative.


00:00:24.260 --> 00:00:27.240
>> Definitely. I was talking to somebody this weekend about


00:00:27.240 --> 00:00:30.240
their one job and trying to balance job and life.


00:00:30.240 --> 00:00:32.320
And I'm like, I don't even remember what that's like


00:00:32.320 --> 00:00:33.900
with just one job.


00:00:33.900 --> 00:00:36.040
- I know, or you have a job where you go to work


00:00:36.040 --> 00:00:37.680
and you do the work, and then when you go home,


00:00:37.680 --> 00:00:39.980
there's no real reason to do the job anymore,


00:00:39.980 --> 00:00:41.460
so you can just step away from it.


00:00:41.460 --> 00:00:43.000
Guns, glories.


00:00:43.000 --> 00:00:45.160
And yet, I continue to choose the opposite,


00:00:45.160 --> 00:00:46.000
which I also love.


00:00:46.000 --> 00:00:48.700
All right, well, speaking of stuff people might love,


00:00:48.700 --> 00:00:50.720
you wanna kick us off with your first item?


00:00:50.720 --> 00:00:52.460
- Yeah, we're gonna talk about polar bears.


00:00:52.460 --> 00:00:54.360
No, not polar bears.


00:00:54.360 --> 00:00:56.240
A project called Polars.


00:00:56.240 --> 00:00:59.560
Actually, it's super fun and cool.


00:00:59.560 --> 00:01:02.960
Polars was suggested to us by actually several listeners.


00:01:02.960 --> 00:01:05.480
We got several people sent in.


00:01:05.480 --> 00:01:06.840
I'm sorry I don't have their names,


00:01:06.840 --> 00:01:09.880
but thank you, always send great stuff our way.


00:01:09.880 --> 00:01:13.840
We love it. But Polars is billed as


00:01:13.840 --> 00:01:18.360
a lightning fast DataFrame library for Rust and Python.


00:01:18.360 --> 00:01:23.560
It is written in Rust,


00:01:23.560 --> 00:01:28.520
But they have like a, they have a full,


00:01:28.520 --> 00:01:31.800
the full API is present in Python


00:01:31.800 --> 00:01:34.240
and it's just, it's kind of neat actually


00:01:34.240 --> 00:01:35.060
how they've done it.


00:01:35.060 --> 00:01:36.880
But so we've got up on the screen,


00:01:36.880 --> 00:01:40.020
the splash screen for the Polars project.


00:01:40.020 --> 00:01:43.200
There's a user guide and API reference, of course,


00:01:43.200 --> 00:01:45.160
but one of the things I wanted to talk about


00:01:45.160 --> 00:01:48.920
is there some of their, why you would consider it.


00:01:48.920 --> 00:01:52.520
So Polars is lightning fast data frame library.


00:01:52.520 --> 00:01:54.440
It uses an in-memory query engine,


00:01:54.440 --> 00:01:59.440
and it says it's embarrassingly parallel in execution.


00:01:59.440 --> 00:02:04.880
And it has a cache efficient algorithms and expressive API.


00:02:04.880 --> 00:02:06.720
And they say it makes it perfect


00:02:06.720 --> 00:02:08.840
for efficient data wrangling, data pipelines,


00:02:08.840 --> 00:02:11.000
snappy APIs, and so much more.


00:02:11.000 --> 00:02:13.880
But I just, also it's fun.


00:02:13.880 --> 00:02:16.320
I played with it a little bit.


00:02:16.320 --> 00:02:17.800
It's zippy and fun.


00:02:17.800 --> 00:02:22.800
They have both the ability to do lazy execution


00:02:22.800 --> 00:02:27.480
and eager execution, whichever you prefer for your use.


00:02:27.480 --> 00:02:32.480
It's multi-threaded, has a notion of single instruction,


00:02:32.480 --> 00:02:36.000
multiple data, not exactly sure what that means,


00:02:36.000 --> 00:02:38.320
but makes it faster apparently.


00:02:38.320 --> 00:02:43.320
And I was looking through the whole,


00:02:43.320 --> 00:02:46.800
the introduction to the user's guide is actually written


00:02:46.800 --> 00:02:48.360
like a very well-written book.


00:02:48.360 --> 00:02:50.760
It looks like the whole guide as far as I can tell


00:02:50.760 --> 00:02:54.280
is written for the Python API.


00:02:54.280 --> 00:02:58.660
I think that was part of the intent all along is to write it quickly in Rust,


00:02:58.660 --> 00:03:00.780
expose it to Rust users also,


00:03:00.780 --> 00:03:04.120
but also run it with Python.


00:03:04.120 --> 00:03:08.060
It's just really pretty clean and super fast.


00:03:08.060 --> 00:03:11.480
One of these benchmark results performance things was,


00:03:11.480 --> 00:03:13.960
it's like Spark was taken


00:03:13.960 --> 00:03:17.040
332 seconds and they took 43 seconds.


00:03:17.040 --> 00:03:18.080
>> Wow.


00:03:18.080 --> 00:03:19.360
>> I know.


00:03:19.360 --> 00:03:21.920
>> It's a 100 million rows.


00:03:21.920 --> 00:03:22.600
>> Yeah.


00:03:22.600 --> 00:03:24.400
>> And seven columns. That's not just like


00:03:24.400 --> 00:03:27.320
let's load up a couple of pieces of data or something.


00:03:27.320 --> 00:03:31.280
>> Right. There's a lot of focus on this,


00:03:31.280 --> 00:03:33.120
making sure that it's fast,


00:03:33.120 --> 00:03:35.640
especially when you don't need everything,


00:03:35.640 --> 00:03:38.040
like doing lazy evaluation


00:03:38.040 --> 00:03:41.640
or making sure you do multiprocessing.


00:03:41.640 --> 00:03:43.880
One of the things I thought was really cool


00:03:43.880 --> 00:03:46.080
about it, I was looking through the documentation,


00:03:46.080 --> 00:03:49.540
is there's a section on, that says,


00:03:49.540 --> 00:03:54.020
it was a section that was talking about parallelization.


00:03:54.020 --> 00:03:56.920
It says do not kill the parallelization


00:03:56.920 --> 00:04:00.360
because with Python, we know we, there is,


00:04:00.360 --> 00:04:02.400
basically there's ways to use polars


00:04:02.400 --> 00:04:07.400
that can kill parallel processing because of the gill.


00:04:07.400 --> 00:04:10.600
If you're using, if you don't do it


00:04:10.600 --> 00:04:13.520
the way they've set it up, you can use it


00:04:13.520 --> 00:04:15.240
in a way that makes it a little slower,


00:04:15.240 --> 00:04:16.560
I guess is what I'm saying.


00:04:16.560 --> 00:04:18.600
But so there's a section on this talking about


00:04:18.600 --> 00:04:22.920
the Polar's expressions.


00:04:22.920 --> 00:04:25.080
And these are all set up so that you can pass


00:04:25.080 --> 00:04:28.760
these expressive queries into Polars


00:04:28.760 --> 00:04:30.760
and have it run in the background


00:04:30.760 --> 00:04:34.000
and just make things really fast


00:04:34.000 --> 00:04:37.620
with and sort of skirt around the gill


00:04:37.620 --> 00:04:38.980
because you're doing all the work


00:04:38.980 --> 00:04:41.720
in the rust part of the world.


00:04:41.720 --> 00:04:44.720
and then collecting the data later.


00:04:44.720 --> 00:04:48.080
So there's like a set up the query and then collect the query.


00:04:48.080 --> 00:04:50.640
It's kind of cool. So anyway,


00:04:50.640 --> 00:04:52.760
I just thought this is a really looks fun.


00:04:52.760 --> 00:04:55.480
It's just there's nothing to,


00:04:55.480 --> 00:04:57.740
you don't have to know that it's in Rust.


00:04:57.740 --> 00:05:00.960
You just say pip install pollers and it works.


00:05:00.960 --> 00:05:03.240
>> Yeah, that's great. Out in the audience,


00:05:03.240 --> 00:05:06.440
Dharab asks, why Rust and not C?


00:05:06.440 --> 00:05:10.580
Maybe an example there is Pandas versus this.


00:05:10.580 --> 00:05:13.100
Also, probably the person who wrote it just really likes Rust.


00:05:13.100 --> 00:05:16.180
And I think Rust has a little bit more thread safety


00:05:16.180 --> 00:05:18.680
than straight C does. I'm not 100% sure.


00:05:18.680 --> 00:05:22.180
But this uses threads, as you point out, whereas the other one,


00:05:22.180 --> 00:05:24.180
pandas and others in C don't.


00:05:24.180 --> 00:05:27.580
I also think that we're going to see a lot more things like this.


00:05:27.580 --> 00:05:31.980
Like, because I think some of the early


00:05:31.980 --> 00:05:34.680
faster packages for Python were written in C


00:05:34.680 --> 00:05:37.580
because Rust wasn't around or it wasn't mature enough.


00:05:37.580 --> 00:05:40.080
But I think we're going to see more people saying,


00:05:40.080 --> 00:05:44.080
well, I want it to be closer to the processor


00:05:44.080 --> 00:05:45.800
for some of the stuff.


00:05:45.800 --> 00:05:46.720
Why not Rust?


00:05:46.720 --> 00:05:49.880
'Cause I think Rust is a cleaner development environment


00:05:49.880 --> 00:05:51.680
than C right now, so.


00:05:51.680 --> 00:05:53.600
- Yeah, I agree, absolutely.


00:05:53.600 --> 00:05:55.640
It's just a more modern language, right?


00:05:55.640 --> 00:05:57.720
- You know, C's keeping up.


00:05:57.720 --> 00:06:01.960
C is never gonna be old, I don't think, but yeah.


00:06:01.960 --> 00:06:05.640
- Yeah, yeah, I don't mean to say that C is not modern


00:06:05.640 --> 00:06:06.920
in the sense that people are not using it,


00:06:06.920 --> 00:06:09.960
but it doesn't embrace, in its sort of natural form,


00:06:09.960 --> 00:06:12.640
the most smart pointers and things like that.


00:06:12.640 --> 00:06:13.120
>> Yeah.


00:06:13.120 --> 00:06:15.040
>> C++ maybe, but not C.


00:06:15.040 --> 00:06:18.140
>> There's safety features built into Rust to make sure you


00:06:18.140 --> 00:06:21.920
don't just make it easier to not do dumb things.


00:06:21.920 --> 00:06:24.120
I guess, let's put it that way.


00:06:24.120 --> 00:06:27.800
>> Indeed. All right. Well, let's jump on to my first item,


00:06:27.800 --> 00:06:29.600
which is a follow-up from last week,


00:06:29.600 --> 00:06:32.180
Python Developer Survey 2021.


00:06:32.180 --> 00:06:34.100
Yes, you heard that right. I know it's 2022.


00:06:34.100 --> 00:06:35.360
These are the results from the survey


00:06:35.360 --> 00:06:37.360
that was at the end of last year.


00:06:37.520 --> 00:06:42.680
Let's, I'm going to kind of skim through this and just hit on some of the main ideas here.


00:06:42.680 --> 00:06:46.440
There's a ton of information and I encourage people to go over and scroll through it.


00:06:46.440 --> 00:06:51.560
This is done in conjunction with the folks over at JetBrains, the PyCharm team and all that.


00:06:51.560 --> 00:06:58.320
So it was collected and analyzed by the JetBrains folks, but put together independently by the PSF, right?


00:06:58.320 --> 00:07:01.520
So it's not intended to not be skewed in any way towards them.


00:07:01.520 --> 00:07:02.040
All right.


00:07:02.040 --> 00:07:06.760
So first thing is if you're using Python, is it your main language or your secondary language?


00:07:07.040 --> 00:07:09.560
84% of the people say it's their main language,


00:07:09.560 --> 00:07:12.600
with 16% picking up the balance of not so much.


00:07:12.600 --> 00:07:14.400
It's been pretty stable over the last four years.


00:07:14.400 --> 00:07:15.640
What do you think of this, Brian?


00:07:15.640 --> 00:07:18.000
(Brian laughs)


00:07:18.000 --> 00:07:20.400
- I think that there's a lot of people like me,


00:07:20.400 --> 00:07:23.560
I think, that it started out as my secondary language


00:07:23.560 --> 00:07:25.720
and now it's my main language.


00:07:25.720 --> 00:07:27.280
- Yeah, interesting, yeah.


00:07:27.280 --> 00:07:28.120
Kind of got sucked in.


00:07:28.120 --> 00:07:29.880
Like, "Ah, maybe I'll use it to test my C stuff."


00:07:29.880 --> 00:07:31.000
Wait, actually, this is kind of nice.


00:07:31.000 --> 00:07:31.840
Maybe I'll do more of this.


00:07:31.840 --> 00:07:32.760
- Yeah. (laughs)


00:07:32.760 --> 00:07:34.640
- There's always the next question,


00:07:34.640 --> 00:07:39.640
analysis is always fraught with weird overlaps.


00:07:39.640 --> 00:07:42.140
But I like the way they ask this a little bit better


00:07:42.140 --> 00:07:43.600
than a lot of times it says,


00:07:43.600 --> 00:07:45.220
Python usage with other languages,


00:07:45.220 --> 00:07:47.560
what other languages do you use Python with?


00:07:47.560 --> 00:07:50.380
Rather than maybe a more general one where they ask,


00:07:50.380 --> 00:07:51.980
well what is the most popular language?


00:07:51.980 --> 00:07:53.340
And you'll see weird stuff like,


00:07:53.340 --> 00:07:54.980
well most people code in CSS.


00:07:54.980 --> 00:07:57.460
Like I'm a full stack CSS developer.


00:07:57.460 --> 00:07:59.260
Like no you're not, just everyone has to use it.


00:07:59.260 --> 00:08:00.100
Like what is this?


00:08:00.100 --> 00:08:01.060
It's a horrible question.


00:08:01.060 --> 00:08:01.900
- Yeah.


00:08:01.900 --> 00:08:03.380
- Right, so this is like if you're doing Python,


00:08:03.380 --> 00:08:05.540
what other languages do you bring into the mix?


00:08:05.540 --> 00:08:07.540
And I guess maybe just hit the top five,


00:08:07.540 --> 00:08:10.140
JavaScript, because you might be doing frontend and backend,


00:08:10.140 --> 00:08:12.060
HTML, CSS, same reason,


00:08:12.060 --> 00:08:14.680
Bash shell, 'cause you're doing automation build, so on,


00:08:14.680 --> 00:08:16.260
SQL, that's SQL.


00:08:16.260 --> 00:08:18.460
I'm surprised there's that much direct SQL,


00:08:18.460 --> 00:08:19.540
but there it is.


00:08:19.540 --> 00:08:22.020
And then C and C++, speaking of that language.


00:08:22.020 --> 00:08:22.860
- Yeah.


00:08:22.860 --> 00:08:24.660
- Also to sort of address the thing


00:08:24.660 --> 00:08:25.780
that I brought up before,


00:08:25.780 --> 00:08:29.260
Rust is at 6%, last year it was at 5%.


00:08:29.260 --> 00:08:31.780
So it's compared to C at 30, and 29,


00:08:31.780 --> 00:08:33.660
So they both grew by 1% this year.


00:08:33.660 --> 00:08:34.500
- Okay.


00:08:34.500 --> 00:08:35.320
- Yeah.


00:08:35.320 --> 00:08:37.340
- I think they both grew, that's interesting.


00:08:37.340 --> 00:08:38.460
- Yeah, exactly.


00:08:38.460 --> 00:08:41.880
Another thing that people might want to pay attention to


00:08:41.880 --> 00:08:44.460
is you'll see year over year stuff all over the place


00:08:44.460 --> 00:08:46.660
in these reports because they've been doing this for a while.


00:08:46.660 --> 00:08:50.940
So like the top bar that's darker, or sorry, brighter,


00:08:50.940 --> 00:08:54.180
is this year, but they always also put last year.


00:08:54.180 --> 00:08:57.020
So for example, people are doing less bash.


00:08:57.020 --> 00:08:59.180
You can see like it's lower bar is higher


00:08:59.180 --> 00:09:00.820
and they're doing less PHP.


00:09:00.820 --> 00:09:03.620
probably means they love themselves a little bit more.


00:09:03.620 --> 00:09:04.460
(laughs)


00:09:04.460 --> 00:09:06.360
Don't go home crying, okay.


00:09:06.360 --> 00:09:10.340
Let's see, languages for web and data science.


00:09:10.340 --> 00:09:12.680
This is kind of like if you're doing these things,


00:09:12.680 --> 00:09:13.520
what do you use more?


00:09:13.520 --> 00:09:15.380
So if you're doing data science, you do more,


00:09:15.380 --> 00:09:17.700
SQL is your most common thing.


00:09:17.700 --> 00:09:19.500
If you're doing web, surprise,


00:09:19.500 --> 00:09:22.740
JavaScript and HTML is the most common other thing.


00:09:22.740 --> 00:09:25.740
Let's see, what do you use Python for?


00:09:25.740 --> 00:09:27.500
Work and personal is 50%,


00:09:27.500 --> 00:09:31.080
Personal is 29 and work 20%.


00:09:31.080 --> 00:09:33.300
Kind of interesting that more people use it


00:09:33.300 --> 00:09:36.180
for side projects if they use it for just one


00:09:36.180 --> 00:09:37.860
or the other of work or personal.


00:09:37.860 --> 00:09:39.580
I guess people who know Python at work,


00:09:39.580 --> 00:09:40.420
they wanna go home, they're like,


00:09:40.420 --> 00:09:42.060
you know what, I could automate my house with this too.


00:09:42.060 --> 00:09:42.900
Let's do that.


00:09:42.900 --> 00:09:45.460
- I think that, yeah, I would take it like that.


00:09:45.460 --> 00:09:47.300
I think more people, it isn't just even


00:09:47.300 --> 00:09:48.980
automating your house, it's just playing around


00:09:48.980 --> 00:09:51.180
with it at home, like, yeah, I heard about


00:09:51.180 --> 00:09:54.620
this new web framework, FastAPI, I wanna try it out,


00:09:54.620 --> 00:09:55.820
things like that, so.


00:09:55.820 --> 00:09:56.660
- Yeah, absolutely.


00:09:56.660 --> 00:09:59.860
I'm gonna skip down here through a bunch of stuff.


00:09:59.860 --> 00:10:02.000
Where do you use Python for the most?


00:10:02.000 --> 00:10:04.620
Web development, but that fell year over year.


00:10:04.620 --> 00:10:06.940
Data analysis stayed the same year over year.


00:10:06.940 --> 00:10:09.180
Machine learning fell year over year.


00:10:09.180 --> 00:10:10.020
And a bunch of stuff.


00:10:10.020 --> 00:10:12.540
But so, sort of the growth areas year over year


00:10:12.540 --> 00:10:15.380
are education and desktop development,


00:10:15.380 --> 00:10:17.980
and then other, I think it's pretty,


00:10:17.980 --> 00:10:19.780
also game development doubled.


00:10:19.780 --> 00:10:21.300
- Doubled from one to 2%.


00:10:21.300 --> 00:10:23.360
- I mean, from one to two is probably like,


00:10:23.360 --> 00:10:25.420
there was, you know, that might be within the margin


00:10:25.420 --> 00:10:27.860
of error type of thing, but still it doubled.


00:10:27.860 --> 00:10:30.460
But I think just the other, no other didn't grow.


00:10:30.460 --> 00:10:31.860
There's just, I think it's just more spread out.


00:10:31.860 --> 00:10:32.700
I don't know.


00:10:32.700 --> 00:10:33.780
'Cause there's still, I think same number


00:10:33.780 --> 00:10:34.700
of people using Python.


00:10:34.700 --> 00:10:36.860
All right, are you a data scientist?


00:10:36.860 --> 00:10:38.860
One third yes, two thirds no.


00:10:38.860 --> 00:10:42.260
That's that fits with my mental model of the Python space.


00:10:42.260 --> 00:10:44.820
One third data science, one third web and API


00:10:44.820 --> 00:10:47.860
and one third massively diverse other.


00:10:47.860 --> 00:10:49.500
The way I see the ecosystem.


00:10:49.500 --> 00:10:53.380
Python three versus two, I think we're asymptotically


00:10:53.380 --> 00:10:56.020
as a limit approaching Python 3 only,


00:10:56.020 --> 00:10:59.860
but year over year it goes 25% from 2017,


00:10:59.860 --> 00:11:03.680
then 16% Python 2, then 10%, then six, then five,


00:11:03.680 --> 00:11:05.780
and then there's just huge code bases


00:11:05.780 --> 00:11:07.460
that are stuck on Python 2.


00:11:07.460 --> 00:11:10.900
Some of the big banks have 5,000 Python developers


00:11:10.900 --> 00:11:12.580
working on Python 2 code bases


00:11:12.580 --> 00:11:14.700
that are so specialized and tweaked


00:11:14.700 --> 00:11:17.020
that they can't just swap out stuff.


00:11:17.020 --> 00:11:19.860
That might represent 5% bank usage, I don't know.


00:11:19.860 --> 00:11:22.100
(laughing)


00:11:22.100 --> 00:11:24.420
I just, I feel bad for you.


00:11:24.420 --> 00:11:25.580
We're rooting for you.


00:11:25.580 --> 00:11:28.020
Everybody out there using Python 2.


00:11:28.020 --> 00:11:28.860
Stick in there.


00:11:28.860 --> 00:11:29.680
- Let's approach that limit.


00:11:29.680 --> 00:11:31.940
Yeah, yeah, let's divide by n factorial,


00:11:31.940 --> 00:11:32.980
not n for your limit there.


00:11:32.980 --> 00:11:34.180
Let's go, get in there.


00:11:34.180 --> 00:11:38.460
All right, Python 3.9 is the most common version.


00:11:38.460 --> 00:11:43.020
3.10 being 16% and 3.8 being 27% versus 35.


00:11:43.020 --> 00:11:44.780
So that's pretty interesting.


00:11:44.780 --> 00:11:48.220
I feel like this is, hey, this is what comes with my Linux.


00:11:48.220 --> 00:11:50.620
And this is what comes with my Docker, so I'm using that.


00:11:50.620 --> 00:11:52.200
but maybe it's more--


00:11:52.200 --> 00:11:53.780
- Yeah, it's interesting 'cause you and I


00:11:53.780 --> 00:11:55.700
are in an interesting space,


00:11:55.700 --> 00:11:57.300
'cause we're always looking at the new stuff.


00:11:57.300 --> 00:12:01.060
So I'm at 3.10 and I can't wait to jump to 3.11.


00:12:01.060 --> 00:12:05.340
And actually I've switched to 3.11 for some projects.


00:12:05.340 --> 00:12:08.300
But there's a lot of people that's like,


00:12:08.300 --> 00:12:09.620
"Man, Python's pretty good,


00:12:09.620 --> 00:12:11.160
"and it's been good for a while,


00:12:11.160 --> 00:12:14.540
"so I don't need a lot of the new features."


00:12:14.540 --> 00:12:15.860
- Yeah, for sure.


00:12:15.860 --> 00:12:18.820
I'm going to later talk about something


00:12:18.820 --> 00:12:22.140
it might shift that to the right.


00:12:22.140 --> 00:12:23.380
I've actually been thinking like,


00:12:23.380 --> 00:12:25.540
should I maybe install 3.11 beta?


00:12:25.540 --> 00:12:27.540
See how stable that is on the servers.


00:12:27.540 --> 00:12:30.180
We'll see, that might be a bad choice.


00:12:30.180 --> 00:12:31.980
Might be a good choice, as we'll see.


00:12:31.980 --> 00:12:34.540
Okay, where do you install Python from?


00:12:34.540 --> 00:12:37.360
38%, just download the thing from python.org


00:12:37.360 --> 00:12:38.720
and run with that.


00:12:38.720 --> 00:12:42.220
The next most common option is to install it


00:12:42.220 --> 00:12:47.220
via your OS package manager, apt, homebrew, whatever.


00:12:47.500 --> 00:12:49.940
And Alvaro has a great little recommendation out there


00:12:49.940 --> 00:12:52.140
for people who are stuck on Python 2.


00:12:52.140 --> 00:12:55.020
There probably is a support group for Python 2 users.


00:12:55.020 --> 00:12:57.460
- Hi, my name's Brian and I use Python 2.


00:12:57.460 --> 00:12:59.060
(laughing)


00:12:59.060 --> 00:13:00.200
- Hi, Brian.


00:13:00.200 --> 00:13:02.900
All right.


00:13:02.900 --> 00:13:05.740
Another one I thought was pretty interesting


00:13:05.740 --> 00:13:09.140
is the packaging stuff, the isolation stuff.


00:13:09.140 --> 00:13:10.140
Before we get there really quick,


00:13:10.140 --> 00:13:13.540
Web Frameworks, FastAPI continues to grow.


00:13:13.540 --> 00:13:14.360
- Yeah.


00:13:14.360 --> 00:13:15.300
- Pretty strong here.


00:13:15.300 --> 00:13:19.620
We've got Flask is now maybe within the margin error,


00:13:19.620 --> 00:13:21.460
but just edged ahead of Django.


00:13:21.460 --> 00:13:25.580
But FastAPI almost doubled in usage over the last year.


00:13:25.580 --> 00:13:26.740
It grew nine percentage points,


00:13:26.740 --> 00:13:28.360
but it was at 12% last year,


00:13:28.360 --> 00:13:29.540
and so now it's at 21%,


00:13:29.540 --> 00:13:31.060
which is, that's a pretty big chunk


00:13:31.060 --> 00:13:32.980
to take out of established frameworks.


00:13:32.980 --> 00:13:36.300
- Yeah, well, and it looks like the third is none.


00:13:36.300 --> 00:13:38.340
I haven't tried that yet.


00:13:38.340 --> 00:13:40.180
- Yeah, it gets a lot of attribute errors,


00:13:40.180 --> 00:13:42.860
but it's really efficient because it doesn't do much work.


00:13:42.860 --> 00:13:44.300
- Yeah. (laughs)


00:13:44.300 --> 00:13:46.280
- Yeah, people who maybe don't know,


00:13:46.280 --> 00:13:47.760
FastAPI, the name would indicate


00:13:47.760 --> 00:13:49.560
it's only for building APIs,


00:13:49.560 --> 00:13:51.520
but you can build web apps with it as well,


00:13:51.520 --> 00:13:52.720
and it's pretty good at that.


00:13:52.720 --> 00:13:55.240
- Especially if you check out Michael's--


00:13:55.240 --> 00:13:57.000
Yeah, especially if you check out Michael's courses.


00:13:57.000 --> 00:13:59.320
He's got like two courses on building web apps


00:13:59.320 --> 00:14:00.480
with FastAPI.


00:14:00.480 --> 00:14:03.920
- I do, and I also have some sort of template extensions


00:14:03.920 --> 00:14:04.880
for it that make it easier.


00:14:04.880 --> 00:14:07.380
All right, data science libraries.


00:14:07.380 --> 00:14:08.440
I don't know how I feel about this one.


00:14:08.440 --> 00:14:09.260
Do you use NumPy?


00:14:09.260 --> 00:14:11.160
Well, yes, but if you use other libraries,


00:14:11.160 --> 00:14:12.880
then you also use NumPy, so--


00:14:12.880 --> 00:14:16.080
- Yeah, it's like all of these are using NumPy, so.


00:14:16.080 --> 00:14:17.920
- Exactly, exactly.


00:14:17.920 --> 00:14:18.760
- Yeah.


00:14:18.760 --> 00:14:19.880
- A bunch of other stuff.


00:14:19.880 --> 00:14:21.280
Look at that, for unit testing.


00:14:21.280 --> 00:14:23.200
Would it surprise you that pytest is winning?


00:14:23.200 --> 00:14:24.480
- No.


00:14:24.480 --> 00:14:26.440
- It just overtook none this year, didn't it?


00:14:26.440 --> 00:14:28.680
(laughing)


00:14:28.680 --> 00:14:32.320
- Yeah, so.


00:14:32.320 --> 00:14:35.520
- All right, ORMs, SQLAlchemy is ahead,


00:14:35.520 --> 00:14:38.200
and then there's Django ORM.


00:14:38.200 --> 00:14:40.480
Django is tied to Django, SQLAlchemy is broad,


00:14:40.480 --> 00:14:41.560
so there's that.


00:14:41.560 --> 00:14:44.620
and then kind of the none of the ORM world


00:14:44.620 --> 00:14:47.080
is raw SQL at 16%, that's pretty interesting.


00:14:47.080 --> 00:14:51.500
Postgres is the most common database by far at 43%.


00:14:51.500 --> 00:14:54.160
Then you have SQLite, which is a little bit of a side case.


00:14:54.160 --> 00:14:56.340
You can use it directly, but it's also used for development.


00:14:56.340 --> 00:14:58.920
And then MySQL, the MongoDB, and then Redis,


00:14:58.920 --> 00:15:00.620
and Microsoft SQL Server.


00:15:00.620 --> 00:15:01.680
- Yeah, huh.


00:15:01.680 --> 00:15:03.640
Actually, SQL Server and Oracle are higher


00:15:03.640 --> 00:15:05.400
than I would have expected, even though, you know,


00:15:05.400 --> 00:15:06.580
but that's okay.


00:15:06.580 --> 00:15:08.000
- Well, I think what you're gonna find


00:15:08.000 --> 00:15:10.180
is that there's like certain places,


00:15:10.180 --> 00:15:12.320
especially in the enterprise,


00:15:12.320 --> 00:15:14.420
where it's like we're a SQL Server shop


00:15:14.420 --> 00:15:15.380
or we're an Oracle shop


00:15:15.380 --> 00:15:17.100
and our DBAs manage our databases.


00:15:17.100 --> 00:15:20.140
So here you put in a, you file a ticket


00:15:20.140 --> 00:15:21.380
and they'll create a database for you.


00:15:21.380 --> 00:15:23.900
- Yeah, or there's already an existing database


00:15:23.900 --> 00:15:25.740
and you're connecting to it or something.


00:15:25.740 --> 00:15:27.700
- Yep, yep, exactly.


00:15:27.700 --> 00:15:29.060
All right, let's keep going.


00:15:29.060 --> 00:15:31.960
Cloud platforms, AWS is at the top.


00:15:31.960 --> 00:15:33.900
Then you got Google Cloud at 50%,


00:15:33.900 --> 00:15:36.220
then GCP, Google Cloud Platform,


00:15:36.220 --> 00:15:38.260
then Azure, then Heroku, DigitalOcean.


00:15:38.260 --> 00:15:39.900
Linode has made it on the list here.


00:15:39.900 --> 00:15:44.700
So, you know, former or sometimes sponsor of the show.


00:15:44.700 --> 00:15:45.620
It's good for them.


00:15:45.620 --> 00:15:48.580
And let's see, how do you run stuff in the cloud?


00:15:48.580 --> 00:15:49.420
Let's skip over this.


00:15:49.420 --> 00:15:50.540
I think a bunch of interesting,


00:15:50.540 --> 00:15:52.740
a few more interesting things and we'll call it.


00:15:52.740 --> 00:15:56.140
Compared to 2020, Linux and macOS popularity


00:15:56.140 --> 00:16:00.760
decreased by 5% while Windows usage has risen by 10%.


00:16:00.760 --> 00:16:01.600
- Wow.


00:16:01.600 --> 00:16:03.400
- Yeah, where the Windows people now double,


00:16:03.400 --> 00:16:05.060
more than double the macOS people


00:16:05.060 --> 00:16:07.140
and are almost rivaling the Linux people.


00:16:07.140 --> 00:16:11.300
- That's, I think that's just towards the growth of Python.


00:16:11.300 --> 00:16:14.460
I think Python's just making it more into


00:16:14.460 --> 00:16:16.300
everybody's using it sort of thing.


00:16:16.300 --> 00:16:19.460
- Yeah, and there's also Windows subsystem for Linux.


00:16:19.460 --> 00:16:20.700
It's been coming along pretty strong,


00:16:20.700 --> 00:16:23.220
which makes Windows a more viable,


00:16:23.220 --> 00:16:26.940
more on, have more parity with your cloud targets, right?


00:16:26.940 --> 00:16:27.780
- Yeah.


00:16:27.780 --> 00:16:28.940
- And Felix out in the audience says,


00:16:28.940 --> 00:16:29.820
because of WSL?


00:16:29.820 --> 00:16:30.660
Yeah, maybe.


00:16:30.660 --> 00:16:31.480
- Yeah.


00:16:31.480 --> 00:16:33.380
- Okay, let's see, a few more things.


00:16:33.380 --> 00:16:35.100
Documentation, it's cool they're asking about


00:16:35.100 --> 00:16:36.780
what documentation frameworks you use.


00:16:36.780 --> 00:16:38.140
This one's interesting to me.


00:16:38.140 --> 00:16:41.380
What's your main editor, VS Code or PyCharm?


00:16:41.380 --> 00:16:43.180
I ask this question a lot at the end of Talk Python


00:16:43.180 --> 00:16:45.340
and it feels like VS Code, VS Code, VS Code, VS Code


00:16:45.340 --> 00:16:46.620
is what people are saying all the time,


00:16:46.620 --> 00:16:49.540
but it's 35% VS Code, 31% PyCharm.


00:16:49.540 --> 00:16:51.860
And Brian, right there for you, 7% Vim.


00:16:51.860 --> 00:16:53.140
But. (laughs)


00:16:53.140 --> 00:16:55.140
- Okay, yeah.


00:16:55.140 --> 00:16:55.980
- I just teased you.


00:16:55.980 --> 00:16:56.800
- Yeah.


00:16:56.800 --> 00:17:00.660
To be fair, it's both VS Code, it's all three,


00:17:00.660 --> 00:17:03.900
or top four for me, but yeah.


00:17:03.900 --> 00:17:04.740
- Yeah, exactly.


00:17:04.740 --> 00:17:06.820
- Well, often you probably just use Vim bindings


00:17:06.820 --> 00:17:07.900
within the other two, right?


00:17:07.900 --> 00:17:09.200
- Yep. - Yeah.


00:17:09.200 --> 00:17:11.280
Let's see, I think also,


00:17:11.280 --> 00:17:13.180
maybe another interesting breakdown


00:17:13.180 --> 00:17:17.260
is that if you look at the usage scenarios


00:17:17.260 --> 00:17:20.940
or the type of development done with the editors,


00:17:20.940 --> 00:17:21.780
you get different answers.


00:17:21.780 --> 00:17:26.780
So like for data science, you've got more PyCharm,


00:17:26.780 --> 00:17:28.780
and for web development, I think,


00:17:28.780 --> 00:17:29.820
hold on, did I have that right?


00:17:29.820 --> 00:17:30.900
- Oh, interesting. - No.


00:17:30.900 --> 00:17:32.540
For data science, you have a lot more VS Code.


00:17:32.540 --> 00:17:34.620
For web development, you have more PyCharm.


00:17:34.620 --> 00:17:38.020
You have a lot less other in data science, AKA Jupyter.


00:17:38.020 --> 00:17:40.020
Yeah.


00:17:40.020 --> 00:17:40.660
Okay.


00:17:40.660 --> 00:17:42.380
How did you learn about your editor?


00:17:42.380 --> 00:17:45.420
I fall or first one here is from a friend.


00:17:45.420 --> 00:17:49.360
So basically friends like push editors, like drug dealers, like you gotta get out.


00:17:49.360 --> 00:17:49.780
What are you doing?


00:17:49.780 --> 00:17:50.540
I think getting here.


00:17:50.540 --> 00:17:55.300
And I think it's like, if I'm, if I'm watching somebody do something cool, I


00:17:55.300 --> 00:17:57.780
want to do it also because it looks, yeah, exactly.


00:17:57.780 --> 00:17:58.780
You sit down next to your friend.


00:17:58.780 --> 00:17:59.820
You're like, how did you do that?


00:17:59.820 --> 00:18:00.480
That's awesome.


00:18:00.480 --> 00:18:01.260
I want that feature.


00:18:01.260 --> 00:18:01.500
Right.


00:18:01.500 --> 00:18:02.500
I think you're probably right.


00:18:02.500 --> 00:18:03.140
Okay.


00:18:03.140 --> 00:18:05.900
Let's just bust down a few things better.


00:18:05.900 --> 00:18:08.020
One, do you know, or what do you think


00:18:08.020 --> 00:18:09.740
about the new developer in residence role?


00:18:09.740 --> 00:18:12.820
This is Luca Schlinga that's going on right now.


00:18:12.820 --> 00:18:14.740
77% are like, the what?


00:18:14.740 --> 00:18:17.420
Never heard of it.


00:18:17.420 --> 00:18:22.140
So maybe we got a little more advocacy job to do here,


00:18:22.140 --> 00:18:25.220
but he's been doing a great job really speeding things up


00:18:25.220 --> 00:18:26.980
and sort of greasing the wheels


00:18:26.980 --> 00:18:30.060
of open source contributions and whatnot.


00:18:30.060 --> 00:18:32.660
- Yeah, but I'm gonna take it like design


00:18:32.660 --> 00:18:35.820
because if design's done well, nobody knows it's there.


00:18:35.820 --> 00:18:37.500
And I think the same thing.


00:18:37.500 --> 00:18:39.820
I think if he's doing his job really, really well,


00:18:39.820 --> 00:18:40.860
most people won't notice.


00:18:40.860 --> 00:18:41.860
Things will just work.


00:18:41.860 --> 00:18:42.700
- Yep.


00:18:42.700 --> 00:18:44.900
Quick real-time follow-up.


00:18:44.900 --> 00:18:45.740
Felix out in the audience says,


00:18:45.740 --> 00:18:47.180
"I use PyCharm because of Michael."


00:18:47.180 --> 00:18:48.020
Ah, that's nice.


00:18:48.020 --> 00:18:51.820
- So, I think it should have been one of the options


00:18:51.820 --> 00:18:53.940
in the survey, because of Michael.


00:18:53.940 --> 00:18:55.740
- Oh, come on, that's awesome.


00:18:55.740 --> 00:18:57.460
But no, let's see.


00:18:57.460 --> 00:18:58.620
There's a bunch of questions about that.


00:18:58.620 --> 00:19:01.780
And the final thing I want to touch on is Python packaging.


00:19:01.780 --> 00:19:05.760
Let's see here, which tools related to Python packaging


00:19:05.760 --> 00:19:07.020
do you use directly?


00:19:07.020 --> 00:19:11.520
And we've talked about Poetry, we've talked about Flit,


00:19:11.520 --> 00:19:16.140
Pipenv and so on, and 81% of the people are like,


00:19:16.140 --> 00:19:18.680
I use pip for packaging.


00:19:18.680 --> 00:19:21.020
(laughing)


00:19:21.020 --> 00:19:22.260
As opposed to Flit or something.


00:19:22.260 --> 00:19:26.180
And then sort of parallel to that is for virtual environment


00:19:26.180 --> 00:19:27.540
do you use the, what do you use


00:19:27.540 --> 00:19:28.940
for virtual environments basically?


00:19:28.940 --> 00:19:29.780
- Yeah.


00:19:29.780 --> 00:19:33.960
percent is like, I just use the built in one or I use the virtual


00:19:33.960 --> 00:19:39.380
EMV wrapper and then it's like poetry, pip, EMV, talks and so on.


00:19:39.380 --> 00:19:40.880
There's a few, I don't know what this is.


00:19:40.880 --> 00:19:42.880
Yeah.


00:19:42.880 --> 00:19:46.680
Well, I'm, I'm glad they included that because the, the, one of the original


00:19:46.680 --> 00:19:51.540
questions didn't include like the built in V and V and that's, I think


00:19:51.540 --> 00:19:52.680
that's what most people use.


00:19:52.680 --> 00:19:54.000
So, and it is right.


00:19:54.000 --> 00:19:55.360
Yeah, absolutely.


00:19:55.360 --> 00:19:55.920
All right.


00:19:55.920 --> 00:19:58.560
Well, I think there's, there's more in my progress bar here.


00:19:58.560 --> 00:20:00.740
This is a super detailed report.


00:20:00.740 --> 00:20:02.020
Link into it in the show notes.


00:20:02.020 --> 00:20:03.300
So just go over there and check it out


00:20:03.300 --> 00:20:04.540
if you want to see all the cool graphs


00:20:04.540 --> 00:20:06.540
and play with the interactive aspects.


00:20:06.540 --> 00:20:08.820
But thanks again to the PSF and JetBranch


00:20:08.820 --> 00:20:09.660
for putting this together.


00:20:09.660 --> 00:20:11.460
It's really good to have this insight


00:20:11.460 --> 00:20:14.180
and these projections of where things are going.


00:20:14.180 --> 00:20:15.100
- Yeah.


00:20:15.100 --> 00:20:17.700
Hey, I'm gonna grab the next one.


00:20:17.700 --> 00:20:19.620
Ooh, we did this smoothly this time.


00:20:19.620 --> 00:20:20.440
Nice.


00:20:20.440 --> 00:20:21.540
So,


00:20:21.540 --> 00:20:22.580
GinConfig


00:20:22.580 --> 00:20:23.420
is


00:20:23.420 --> 00:20:26.580
just gin actually,


00:20:26.580 --> 00:20:29.540
but the project's called GenConfig.


00:20:29.540 --> 00:20:32.580
And it's kind of a neat little thing.


00:20:32.580 --> 00:20:35.580
It's a different way to think about configuration files.


00:20:35.580 --> 00:20:39.540
So like you have your PyProject,


00:20:39.540 --> 00:20:43.220
or you have .toml files, you could have .ini files.


00:20:43.220 --> 00:20:45.780
There's a lot of ways to have configuration files,


00:20:45.780 --> 00:20:49.820
but Gen takes the perspective of,


00:20:49.820 --> 00:20:53.060
oh, well, what if you just,


00:20:53.060 --> 00:20:55.240
what if you're not really into all of that stuff


00:20:55.240 --> 00:20:56.460
and you're a machine learning person


00:20:56.460 --> 00:20:58.580
and you just have a whole bunch of stuff to configure


00:20:58.580 --> 00:21:00.340
and you're changing stuff a lot.


00:21:00.340 --> 00:21:02.260
Maybe let's make it easier.


00:21:02.260 --> 00:21:10.580
I actually came across this because of Vincent Warmerdam.


00:21:10.580 --> 00:21:15.660
He's got an excellent intro to Gin on his CalmCode site.


00:21:15.660 --> 00:21:22.000
The idea is you just have for a function that you want to,


00:21:22.000 --> 00:21:23.900
in your code, you got some code and you


00:21:23.900 --> 00:21:26.420
have part of it that you want configurable,


00:21:26.420 --> 00:21:31.020
you just slap a gen configurable decorator onto it,


00:21:31.020 --> 00:21:33.160
and then all of the parameters to


00:21:33.160 --> 00:21:36.780
that function are now something that can show up in a config file.


00:21:36.780 --> 00:21:38.260
It's not in any file.


00:21:38.260 --> 00:21:40.120
I actually don't know the exact syntax,


00:21:40.120 --> 00:21:41.840
but it just looks like Python.


00:21:41.840 --> 00:21:46.220
You just have names.


00:21:46.220 --> 00:21:48.400
Like in this example that I'm showing,


00:21:48.400 --> 00:21:50.720
there's a file called simulate,


00:21:50.720 --> 00:21:53.420
and there's actually a function called simulate,


00:21:53.420 --> 00:21:56.100
and a parameter called in samples.


00:21:56.100 --> 00:21:57.560
In your config file,


00:21:57.560 --> 00:22:00.180
you can just say simulate.in_samples


00:22:00.180 --> 00:22:02.620
equals 100 or something like that.


00:22:02.620 --> 00:22:05.620
>> Oh, wow. This is like it basically


00:22:05.620 --> 00:22:07.560
sets the default parameters


00:22:07.560 --> 00:22:09.160
for all your functions you're calling.


00:22:09.160 --> 00:22:10.720
>> Yeah. The ones that you want to be


00:22:10.720 --> 00:22:13.440
configurable and you just do that.


00:22:13.440 --> 00:22:16.420
Now, you can still set defaults within


00:22:16.420 --> 00:22:20.860
your code just like you normally would.


00:22:20.860 --> 00:22:22.800
Then you can configure


00:22:22.800 --> 00:22:24.840
the ones that you want to be different than the defaults.


00:22:24.840 --> 00:22:26.960
So that's a possibility.


00:22:26.960 --> 00:22:28.460
There's a whole bunch of,


00:22:28.460 --> 00:22:30.360
I'm going to expand this a little bit.


00:22:30.360 --> 00:22:33.160
There's a whole bunch of different things


00:22:33.160 --> 00:22:36.340
that Vincent goes through like required settings.


00:22:36.340 --> 00:22:40.860
You can specify like a dot, what is it?


00:22:40.860 --> 00:22:46.220
Gin.required as a function and it makes it as your parameter,


00:22:46.220 --> 00:22:47.560
and then it makes it so that


00:22:47.560 --> 00:22:50.940
your user has to put it in their config file.


00:22:50.940 --> 00:22:54.000
That's cool. Then you can also,


00:22:54.000 --> 00:22:56.980
if you don't want somebody to configure something,


00:22:56.980 --> 00:22:59.500
you can mark it as,


00:22:59.500 --> 00:23:03.420
he's got blacklist the in-samples.


00:23:03.420 --> 00:23:05.020
If you want, like in this example,


00:23:05.020 --> 00:23:07.140
he's got a simulate function with two parameters,


00:23:07.140 --> 00:23:08.800
random func and in-samples.


00:23:08.800 --> 00:23:10.860
You want people to configure the random func,


00:23:10.860 --> 00:23:13.300
but you don't want them to touch the in-samples,


00:23:13.300 --> 00:23:16.220
you can say don't do that.


00:23:16.220 --> 00:23:19.460
It's neat. There's a whole bunch of cool features around it,


00:23:19.460 --> 00:23:23.100
like being able to specify different functions.


00:23:23.100 --> 00:23:25.700
So you can name things and do it around,


00:23:25.700 --> 00:23:28.420
like to say, like in his example,


00:23:28.420 --> 00:23:29.940
he's got random functions.


00:23:29.940 --> 00:23:32.820
And if you can specify, you know,


00:23:32.820 --> 00:23:36.580
one of the other, like a random triangle function,


00:23:36.580 --> 00:23:39.500
you can specify a function and assign it to that.


00:23:39.500 --> 00:23:41.920
He's got named things.


00:23:41.920 --> 00:23:45.620
It's a really, it's a interesting way


00:23:45.620 --> 00:23:47.380
to think about configuration.


00:23:47.380 --> 00:23:51.920
And the motivation section of the documentation for Gen


00:23:51.920 --> 00:23:56.140
says that often modern machine learning experiments


00:23:56.140 --> 00:24:00.400
require just configuring a whole bunch of parameters


00:24:00.400 --> 00:24:02.780
and then you're tweaking them and stuff.


00:24:02.780 --> 00:24:06.260
And to have that be as easy as possible


00:24:06.260 --> 00:24:07.980
and as simple as possible,


00:24:07.980 --> 00:24:11.300
because, and you're gonna add some and take some away


00:24:11.300 --> 00:24:12.120
and things like that,


00:24:12.120 --> 00:24:13.680
because some things you want configured


00:24:13.680 --> 00:24:15.280
and then you decide not to,


00:24:15.280 --> 00:24:19.280
not having to go through a config parser system


00:24:19.280 --> 00:24:22.600
and just making it as trivial as possible to add parameters.


00:24:22.600 --> 00:24:24.480
I think it's a really cool idea.


00:24:24.480 --> 00:24:25.320
- It is a cool idea.


00:24:25.320 --> 00:24:28.560
It reminds me of like dependency injection a little bit.


00:24:28.560 --> 00:24:29.480
- Yeah.


00:24:29.480 --> 00:24:31.640
- You know, where you would like configure,


00:24:31.640 --> 00:24:34.240
say like if somebody asked for a function


00:24:34.240 --> 00:24:36.680
that implements this or that goes here,


00:24:36.680 --> 00:24:38.600
like this is the data access layer to use,


00:24:38.600 --> 00:24:41.360
or here's the ORM I want you to pick this time.


00:24:41.360 --> 00:24:43.160
It's not super common in Python,


00:24:43.160 --> 00:24:45.360
but it's pretty common in a lot of languages


00:24:45.360 --> 00:24:47.120
and it feels a little bit like that.


00:24:47.120 --> 00:24:50.460
Can we configure stuff so we have these parameters


00:24:50.460 --> 00:24:52.400
that we might use for testing or something,


00:24:52.400 --> 00:24:55.240
but they get filled in automatically.


00:24:55.240 --> 00:24:57.160
Even FastAPI has that, for example.


00:24:57.160 --> 00:24:59.240
Pretty cool.


00:24:59.240 --> 00:25:00.080
- Somebody in the audience says,


00:25:00.080 --> 00:25:04.200
isn't Gin used with Go?


00:25:04.200 --> 00:25:05.600
And I'm not sure about that,


00:25:05.600 --> 00:25:10.120
but Gin is not an officially supported Google product,


00:25:10.120 --> 00:25:14.580
but it's under the Google like GitHub repo group.


00:25:14.580 --> 00:25:16.000
So maybe, I don't know.


00:25:16.000 --> 00:25:17.080
- Yeah, maybe.


00:25:17.080 --> 00:25:18.780
It does look very Python like though


00:25:18.780 --> 00:25:20.300
for the config files and that's cool.


00:25:20.300 --> 00:25:21.140
- Yeah.


00:25:21.140 --> 00:25:21.960
- Good one.


00:25:21.960 --> 00:25:24.080
All right, let me switch back before I swap over.


00:25:24.080 --> 00:25:25.000
Okay, here we go.


00:25:25.000 --> 00:25:29.080
Now, this next one, I think universally


00:25:29.080 --> 00:25:30.560
will be well accepted.


00:25:30.560 --> 00:25:31.920
Although the comment section about it


00:25:31.920 --> 00:25:33.920
was a little bit rough and tumble.


00:25:33.920 --> 00:25:36.240
Nonetheless, I think it should be universally


00:25:36.240 --> 00:25:37.240
exciting to everyone.


00:25:37.240 --> 00:25:40.040
And this comes to us from Eduardo Orochina,


00:25:40.040 --> 00:25:44.120
who sent over this article that said the,


00:25:44.120 --> 00:25:44.940
what's it called?


00:25:44.940 --> 00:25:47.280
The Python 3.11 performance benchmarks


00:25:47.280 --> 00:25:49.000
are looking fantastic.


00:25:49.000 --> 00:25:50.440
And oh boy, are they.


00:25:50.440 --> 00:25:54.280
So we're talking beta code six months out, right?


00:25:54.280 --> 00:25:56.760
And still, still we've got some pretty neat stuff.


00:25:56.760 --> 00:25:59.480
So this links over to an article


00:25:59.480 --> 00:26:02.480
with that same title by Michael Larabelle.


00:26:02.480 --> 00:26:04.640
Basically says, look, we took a whole bunch


00:26:04.640 --> 00:26:07.440
of different performance benchmarks for Python


00:26:07.440 --> 00:26:10.320
and ran them on Python 3.11 beta,


00:26:10.320 --> 00:26:12.440
which this is the thing I was hinting at,


00:26:12.440 --> 00:26:15.400
like you might really want to consider this


00:26:15.400 --> 00:26:18.200
for if you're thinking, should we upgrade from nine to 10?


00:26:18.200 --> 00:26:20.760
Maybe you wanna just go straight to 11, right?


00:26:20.760 --> 00:26:23.400
I mean, and you know, sort of a side thought, Brian,


00:26:23.400 --> 00:26:25.780
isn't it awesome that the one that goes like


00:26:25.780 --> 00:26:28.760
crazy performance, this one goes to 11?


00:26:28.760 --> 00:26:31.420
(both laughing)


00:26:31.420 --> 00:26:35.440
All right, so they show all the stuff


00:26:35.440 --> 00:26:40.600
they're testing on like AMD Ryzen 16 core 32 with hyper-threading the


00:26:40.600 --> 00:26:43.900
motherboard, I mean like down to the motherboard and the chip set and the


00:26:43.900 --> 00:26:44.820
memory and all that.


00:26:44.820 --> 00:26:46.900
So a pretty decent stuff.


00:26:46.900 --> 00:26:50.460
And then also the build commands and all sorts of things here.


00:26:50.460 --> 00:26:55.380
So pretty repeatable, I think rather than just like, Hey, I ran it and here's a


00:26:55.380 --> 00:27:00.400
graph without, without axes or something like that.


00:27:00.400 --> 00:27:03.020
So you can kind of click through here and you see some pictures and it says,


00:27:03.020 --> 00:27:06.500
all right, well, there's the PI bench, which I think is like the standard,


00:27:06.500 --> 00:27:12.320
simple one, it says, look at this, the Python 311 beta is faster than 310,


00:27:12.320 --> 00:27:15.740
which by the way, was slightly slower than the previous ones, but you know,


00:27:15.740 --> 00:27:17.780
what is that 10% or something?


00:27:17.780 --> 00:27:20.820
So already actually 16% better.


00:27:20.820 --> 00:27:24.080
So that's already pretty awesome, but there's a whole bunch of other ones.


00:27:24.080 --> 00:27:25.620
They did one called go.


00:27:25.620 --> 00:27:27.600
I don't know what these benchmarks are.


00:27:27.600 --> 00:27:30.020
This is, I don't think this has anything to do with the language go.


00:27:30.020 --> 00:27:31.700
Just the name of the benchmark.


00:27:31.700 --> 00:27:33.820
And then there's two to three and chaos.


00:27:33.820 --> 00:27:37.060
That one sounds like the funnest, but if you look at this go one, this one


00:27:37.060 --> 00:27:41.420
is like almost 50% faster, 50% faster.


00:27:41.420 --> 00:27:42.260
That's insane.


00:27:42.260 --> 00:27:42.540
Right?


00:27:42.540 --> 00:27:43.060
Yeah.


00:27:43.060 --> 00:27:43.540
Wow.


00:27:43.540 --> 00:27:49.380
And you come down to the two to three is, these are all estimates 25, 20%


00:27:49.380 --> 00:27:55.620
faster, say 40% faster with the chaos one, come down to the float operations


00:27:55.620 --> 00:27:59.140
and Python three 10 was already better than the others, but this is again,


00:27:59.140 --> 00:28:04.100
and maybe 30% faster and let's roll into the next page.


00:28:04.100 --> 00:28:06.460
You just kind of see this across the board, better, better.


00:28:06.460 --> 00:28:07.940
Some of them are super better.


00:28:07.940 --> 00:28:10.060
Some are like a little bit better, like path labs better,


00:28:10.060 --> 00:28:11.260
but not crazy.


00:28:11.260 --> 00:28:15.160
Ray tracing is like, again, 40% better here.


00:28:15.160 --> 00:28:16.580
And you keep going.


00:28:16.580 --> 00:28:20.220
There's another one with this huge crypto IAES,


00:28:20.220 --> 00:28:21.540
some sort of encryption thing.


00:28:21.540 --> 00:28:24.100
So there's just a bunch of, a couple of these are,


00:28:24.100 --> 00:28:25.420
there's like this one at the end, you're like,


00:28:25.420 --> 00:28:26.740
oh wait, this one got way worse.


00:28:26.740 --> 00:28:30.620
Be careful 'cause it says more is better on this composition.


00:28:30.620 --> 00:28:31.900
I guess it's the results here,


00:28:31.900 --> 00:28:34.780
like how much more computing power do you get


00:28:34.780 --> 00:28:37.100
per CPU cycle or whatever?


00:28:37.100 --> 00:28:37.940
What is that?


00:28:37.940 --> 00:28:38.900
That's a massive jump.


00:28:38.900 --> 00:28:40.740
You saw a little bit better improvements


00:28:40.740 --> 00:28:43.660
from 3.8 to 3.9, 3.9 to 3.10,


00:28:43.660 --> 00:28:46.420
but 3.10 to 11 is like a 40%,


00:28:46.420 --> 00:28:50.540
yeah, 41% better on the beta before it's even final.


00:28:50.540 --> 00:28:51.380
- Wow.


00:28:51.380 --> 00:28:52.200
- That's pretty exciting, right?


00:28:52.200 --> 00:28:53.780
- That's very exciting.


00:28:53.780 --> 00:28:58.580
>> Actually, I'm curious what some of these negative comments are.


00:28:58.580 --> 00:29:00.960
But the interesting thing is they run lots of


00:29:00.960 --> 00:29:05.260
different metrics and lots of different benchmarks.


00:29:05.260 --> 00:29:07.980
Having them all be, it's faster,


00:29:07.980 --> 00:29:09.500
kind of means that, I mean,


00:29:09.500 --> 00:29:12.860
I take it as your mileage may vary,


00:29:12.860 --> 00:29:16.860
but it's going to be better for whatever you're doing probably.


00:29:16.860 --> 00:29:18.820
>> Yeah. It feels like this is


00:29:18.820 --> 00:29:20.980
a thing you could just install and things get better.


00:29:20.980 --> 00:29:22.980
The negative comments are mostly like,


00:29:22.980 --> 00:29:26.820
Well, if Python was so slow, it could be made this faster than Python's a crappy language.


00:29:26.820 --> 00:29:29.620
It's pretty much I've summed up like 65 comments right there.


00:29:29.620 --> 00:29:39.540
By the way, so I interviewed Guido van Rassum and Mark Shannon a little while ago about this


00:29:39.540 --> 00:29:44.980
whole project about making Python five times not 40% but five times faster. And the goal is to make


00:29:44.980 --> 00:29:49.780
it a little bit faster like this each release for five releases in a row. And because of compounding,


00:29:49.780 --> 00:29:51.280
that'll get you to like 5%.


00:29:51.280 --> 00:29:53.580
So it looks like they're delivering, which is awesome.


00:29:53.580 --> 00:29:54.880
>> Yeah, this is good.


00:29:54.880 --> 00:29:55.380
>> Yeah.


00:29:55.380 --> 00:29:55.980
>> Cool.


00:29:55.980 --> 00:30:00.040
>> All right. Yeah, I think that's it for all of our items.


00:30:00.040 --> 00:30:00.540
>> Yeah.


00:30:00.540 --> 00:30:01.880
>> Got any extras?


00:30:01.880 --> 00:30:04.180
>> No, I was going to pull up the,


00:30:04.180 --> 00:30:06.780
so yeah, this one goes to 11.


00:30:06.780 --> 00:30:10.020
If people don't know that, that's a Spinal Tap reference.


00:30:10.020 --> 00:30:13.620
>> Yeah, exactly. All right.


00:30:13.620 --> 00:30:15.100
I got a few extras to throw out real quick.


00:30:15.100 --> 00:30:19.380
Python 3.10.5 is out with a bunch of bug fixes,


00:30:19.380 --> 00:30:21.540
like what happens if you create an F string


00:30:21.540 --> 00:30:23.460
that doesn't have a closing curly


00:30:23.460 --> 00:30:25.500
and just a bunch of crashes and bug fixes.


00:30:25.500 --> 00:30:27.140
So if you've been running into issues,


00:30:27.140 --> 00:30:29.080
you know, maybe there's a decent amount of stuff


00:30:29.080 --> 00:30:30.200
in the changelog here.


00:30:30.200 --> 00:30:31.040
- Nice.


00:30:31.040 --> 00:30:31.860
- People can check that out.


00:30:31.860 --> 00:30:34.460
Also real quick, people might, if they're on a Mac,


00:30:34.460 --> 00:30:36.180
they might check out Raycast,


00:30:36.180 --> 00:30:39.260
which is a replacement for the command space spotlight thing


00:30:39.260 --> 00:30:41.220
that has like all these developer plugins.


00:30:41.220 --> 00:30:44.660
So you can do like interact with your GitHub repo


00:30:44.660 --> 00:30:46.460
through command space and stuff.


00:30:46.460 --> 00:30:48.260
You can create little macros


00:30:48.260 --> 00:30:50.140
and there's a bunch of extensions,


00:30:50.140 --> 00:30:53.100
like this thing's free, at least for not for team,


00:30:53.100 --> 00:30:54.260
if you're not on a team,


00:30:54.260 --> 00:30:57.040
but there's a bunch of different things you can get


00:30:57.040 --> 00:31:01.420
that are cool, like managing processes, doing searches,


00:31:01.420 --> 00:31:05.200
VS Code project management from command space and whatnot.


00:31:05.200 --> 00:31:07.700
The one that I set up is I can now do command space


00:31:07.700 --> 00:31:08.900
and then just type PyPI


00:31:08.900 --> 00:31:11.260
and then it'll just search PyPI for whatever I type.


00:31:11.260 --> 00:31:13.580
Here's an example, typing PyPI, then FastAPI,


00:31:13.580 --> 00:31:15.940
and it'll like pull up all the FastAPI packages.


00:31:15.940 --> 00:31:18.180
So anyway, people might find that fun to check out.


00:31:18.180 --> 00:31:19.580
- Yeah, that's cool.


00:31:19.580 --> 00:31:20.540
- Yeah, it's pretty neat.


00:31:20.540 --> 00:31:23.580
All right, well, I think I'll not talk about my other one.


00:31:23.580 --> 00:31:26.240
And then joke, shall we close it out with a joke?


00:31:26.240 --> 00:31:27.480
- Yeah, let's do a joke.


00:31:27.480 --> 00:31:31.020
- So I think this ties really well back to the PSF survey.


00:31:31.020 --> 00:31:33.140
We talked about, well, what framework do you use?


00:31:33.140 --> 00:31:34.700
What data science framework do you use?


00:31:34.700 --> 00:31:36.700
Or what web framework do you wanna use?


00:31:36.700 --> 00:31:39.980
Django or Flask or FastAPI or what?


00:31:39.980 --> 00:31:43.020
So here's one that is a pretty interesting analysis.


00:31:43.020 --> 00:31:43.980
And the title is,


00:31:43.980 --> 00:31:46.720
why wouldn't you choose Parrot for your next application?


00:31:46.720 --> 00:31:49.240
Not a framework, but literally a parrot.


00:31:49.240 --> 00:31:52.400
And this is compared to machine learning.


00:31:52.400 --> 00:31:54.800
So it has like this breakdown of features,


00:31:54.800 --> 00:31:57.640
like a feature table, and it has a parrot,


00:31:57.640 --> 00:31:58.960
which literally just has a picture of a parrot.


00:31:58.960 --> 00:32:00.480
And this is machine learning algorithms


00:32:00.480 --> 00:32:01.560
with a neural network.


00:32:01.560 --> 00:32:03.200
And then it lists off the features.


00:32:03.200 --> 00:32:05.920
Learns random phrases, check, check.


00:32:05.920 --> 00:32:09.200
Doesn't understand anything about what it learns,


00:32:09.200 --> 00:32:10.760
check, check.


00:32:10.760 --> 00:32:13.280
Occasionally speaks nonsense, check, check.


00:32:13.280 --> 00:32:15.880
Is a cute birdie parrot, check, fail.


00:32:15.880 --> 00:32:18.280
(laughing)


00:32:18.280 --> 00:32:20.720
- Why wouldn't you choose this, Brian?


00:32:20.720 --> 00:32:22.580
- This is funny.


00:32:22.580 --> 00:32:24.120
I love it.


00:32:24.120 --> 00:32:26.140
- Yeah, it's pretty good, pretty good stuff.


00:32:26.140 --> 00:32:27.720
- It actually reminds me of,


00:32:27.720 --> 00:32:28.920
I have to pull up this article.


00:32:28.920 --> 00:32:31.760
So I was reading about some machine learning stuff


00:32:31.760 --> 00:32:35.280
to try to get models even closer and closer to reality.


00:32:35.280 --> 00:32:37.440
There's a whole bunch of tricks people do,


00:32:37.440 --> 00:32:40.080
and then there's some analysis of,


00:32:40.080 --> 00:32:43.080
sometimes it's actually not doing anything


00:32:43.080 --> 00:32:45.280
more than just a linear regression.


00:32:45.280 --> 00:32:48.240
So, yeah, I simple for an if statement.


00:32:48.240 --> 00:32:48.560
Yeah.


00:32:48.560 --> 00:32:50.160
Yeah, yeah, yeah, yeah, for sure.


00:32:50.160 --> 00:32:54.000
So they're using artificial intelligence to make the computer decide.


00:32:54.000 --> 00:32:54.840
No, it's an if statement.


00:32:54.840 --> 00:32:58.600
Like it's just computers deciding things the old fashioned way.


00:32:58.600 --> 00:32:58.960
Yeah.


00:32:58.960 --> 00:32:59.520
Yeah.


00:32:59.520 --> 00:33:00.520
Awesome.


00:33:00.520 --> 00:33:00.780
All right.


00:33:00.780 --> 00:33:01.960
Well, thanks for being here.


00:33:01.960 --> 00:33:03.120
Thank you everyone for listening.


00:33:03.120 --> 00:33:03.560
Bye.

