
00:00:00.000 --> 00:00:02.000
- Hello and welcome to Python Bytes,


00:00:02.000 --> 00:00:03.780
where we deliver Python news and headlines


00:00:03.780 --> 00:00:04.920
directly to your earbuds.


00:00:04.920 --> 00:00:09.480
This is episode 244, recorded July 30th, 2021.


00:00:09.480 --> 00:00:10.560
I'm Michael Kennedy.


00:00:10.560 --> 00:00:11.640
- And I'm Brian Okken.


00:00:11.640 --> 00:00:12.800
- And I'm Brandon Brainer.


00:00:12.800 --> 00:00:14.400
- Hey, Brandon, welcome to the podcast.


00:00:14.400 --> 00:00:15.680
Thanks for being here.


00:00:15.680 --> 00:00:16.760
- Yeah, thank you for having me.


00:00:16.760 --> 00:00:18.680
- It's really good to have you here.


00:00:18.680 --> 00:00:22.360
You're one of the first volunteers, I'll put it as,


00:00:22.360 --> 00:00:24.160
when I said, "Hey, we're looking for some folks


00:00:24.160 --> 00:00:26.240
"to come be with Brian and me on the show,"


00:00:26.240 --> 00:00:29.240
and throw your name in the hat, and here you are.


00:00:29.240 --> 00:00:30.360
- Happy to have you. - Yeah.


00:00:30.360 --> 00:00:31.280
It's very exciting.


00:00:31.280 --> 00:00:32.260
Very, very exciting.


00:00:32.260 --> 00:00:33.180
- Yeah, absolutely.


00:00:33.180 --> 00:00:35.520
So before we jump into the topics,


00:00:35.520 --> 00:00:37.680
just tell us a quick bit about yourself.


00:00:37.680 --> 00:00:42.080
- Yeah, so I've been in software development for 10 years.


00:00:42.080 --> 00:00:43.160
Half of it in management,


00:00:43.160 --> 00:00:45.200
and half of it as an individual contributor.


00:00:45.200 --> 00:00:47.360
About seven years of it with Python.


00:00:47.360 --> 00:00:48.760
You know, it's funny, when I first started programming,


00:00:48.760 --> 00:00:50.080
I lived at a Raspberry Pi.


00:00:50.080 --> 00:00:51.920
I thought Python is so confusing


00:00:51.920 --> 00:00:53.840
with not having brackets and all these spaces,


00:00:53.840 --> 00:00:55.400
and I don't understand it.


00:00:55.400 --> 00:00:56.800
And now I can't go back.


00:00:56.800 --> 00:00:57.960
It's so much easier.


00:00:57.960 --> 00:01:03.240
>> Yeah, I had a similar experience coming from C# and C++ and stuff,


00:01:03.240 --> 00:01:04.520
with all the symbols.


00:01:04.520 --> 00:01:08.200
And I thought, in my mind, I thought those are necessary for programming.


00:01:08.200 --> 00:01:10.000
Like you have to have the semicolons,


00:01:10.000 --> 00:01:12.720
you have to have the curly braces and the extra parentheses.


00:01:12.720 --> 00:01:14.400
Because how else would the parser and everything,


00:01:14.400 --> 00:01:16.680
like that's how you express stuff in programming.


00:01:16.680 --> 00:01:20.000
And then when I got into Python, I felt a little bit weird with it missing.


00:01:20.000 --> 00:01:21.880
But then when I went back, I felt even weirder,


00:01:21.880 --> 00:01:23.560
like why are all these symbols here?


00:01:23.560 --> 00:01:25.560
>> Yeah. >> I just learned that they're not necessary.


00:01:25.560 --> 00:01:27.600
Why have I been doing this the last ten years of my life?


00:01:27.600 --> 00:01:28.600
What is wrong with me?


00:01:28.600 --> 00:01:29.680
Exactly.


00:01:29.680 --> 00:01:31.120
It was a real interesting experience.


00:01:31.120 --> 00:01:31.560
Yeah.


00:01:31.560 --> 00:01:35.560
Speaking of interesting, Brian, all the stuff on pip quite interesting.


00:01:35.560 --> 00:01:37.160
Yeah.


00:01:37.160 --> 00:01:42.080
Um, so I, I, I don't know, we were doing this on Friday because, because I was,


00:01:42.080 --> 00:01:43.400
well, I wasn't here on Wednesday.


00:01:43.400 --> 00:01:44.600
I was, in Florida.


00:01:44.600 --> 00:01:50.600
Um, and so you're a jet setter, basically you just, yeah, no, I've traveled in like


00:01:50.600 --> 00:01:52.600
two years, for business.


00:01:52.600 --> 00:01:53.120
Was it weird?


00:01:53.120 --> 00:01:53.480
Yeah.


00:01:53.480 --> 00:01:53.960
Was it weird?


00:01:53.960 --> 00:01:57.080
Uh, no, it was like wearing a mask all the way there.


00:01:57.080 --> 00:01:59.300
I got used to no masks here in Oregon,


00:01:59.300 --> 00:02:01.700
but then now I guess they're changing all that again,


00:02:01.700 --> 00:02:04.800
we're bringing them back, but what's old is new again.


00:02:04.800 --> 00:02:08.400
But one of the things I tried to do is I tried to work on the plane.


00:02:08.400 --> 00:02:10.360
In Python, of course,


00:02:10.360 --> 00:02:15.280
the problem with snakes on a plane is there's no Internet.


00:02:15.280 --> 00:02:17.800
I had this issue,


00:02:17.800 --> 00:02:22.360
and I've already put it up on the screen, the solution.


00:02:22.360 --> 00:02:27.160
My issue was I had a project I wanted to work on.


00:02:27.160 --> 00:02:29.280
It's got talks set up.


00:02:29.280 --> 00:02:30.960
When you run talks,


00:02:30.960 --> 00:02:34.800
talks creates virtual environments and then


00:02:34.800 --> 00:02:38.360
fills those up with all your dependencies and your code using PIP.


00:02:38.360 --> 00:02:40.840
PIP goes out to PyPI to get that stuff.


00:02:40.840 --> 00:02:44.280
I mean, you can cache it and that does help and you do that locally on


00:02:44.280 --> 00:02:46.720
your machine but it still looks out at the Internet,


00:02:46.720 --> 00:02:49.400
and this won't work on a plane.


00:02:49.400 --> 00:02:53.340
I reached out to the Twitterverse,


00:02:53.340 --> 00:02:55.740
and I thought I found a solution,


00:02:55.740 --> 00:02:58.520
but I'm not even going to say the wrong solution.


00:02:58.520 --> 00:03:00.620
Paul Gansel pointed me in the direction


00:03:00.620 --> 00:03:03.060
of environmental variables in PIP.


00:03:03.060 --> 00:03:05.660
You can just set find links to a local directory,


00:03:05.660 --> 00:03:08.660
and then set with pip find links,


00:03:08.660 --> 00:03:10.260
and then pip noindex,


00:03:10.260 --> 00:03:13.340
so that the pip doesn't even look out there,


00:03:13.340 --> 00:03:15.300
it looks at a local directory.


00:03:15.300 --> 00:03:18.880
So what I did is I'm gonna, and I'm gonna,


00:03:18.880 --> 00:03:19.720
guess we'll look at, I was surprised--


00:03:19.720 --> 00:03:20.840
- Hey, wait, wait, go back.


00:03:20.840 --> 00:03:22.480
I got a quick question before we go on.


00:03:22.480 --> 00:03:23.320
- Okay.


00:03:23.320 --> 00:03:25.000
- So it'll look in that local directory


00:03:25.000 --> 00:03:27.280
for the packages, the wheels and whatnot.


00:03:27.280 --> 00:03:28.120
- Yeah.


00:03:28.120 --> 00:03:29.360
- How do you get them there in the first place?


00:03:29.360 --> 00:03:31.400
- Okay, so I got some pre-work that I did.


00:03:31.400 --> 00:03:33.560
So I'm like, okay, how do I get those?


00:03:33.560 --> 00:03:36.000
And normally when I wanna put something


00:03:36.000 --> 00:03:37.160
in a local directory or something,


00:03:37.160 --> 00:03:40.480
I'll just use, what is it, pip download?


00:03:40.480 --> 00:03:42.760
You can do that, but that's a lot of work


00:03:42.760 --> 00:03:44.240
to try to figure out what you did.


00:03:44.240 --> 00:03:46.680
So what I did is I just, before I got on the plane,


00:03:46.680 --> 00:03:50.040
I'm using the airport internet.


00:03:50.040 --> 00:03:53.380
I, which everybody can harass me later


00:03:53.380 --> 00:03:55.960
about how that's not secure, it's fine.


00:03:55.960 --> 00:03:59.200
But I ran talks, you do it at home then if you want,


00:03:59.200 --> 00:04:01.280
run talks with an internet connection.


00:04:01.280 --> 00:04:02.940
And what it's gonna do is you're gonna have


00:04:02.940 --> 00:04:05.200
a whole bunch of your environments within talks.


00:04:05.200 --> 00:04:08.340
You're gonna have all your, all Python 7, Python 8,


00:04:08.340 --> 00:04:12.160
whatever you got in there, or not 8, 3.8, 3.7, 3.10,


00:04:12.160 --> 00:04:13.000
whatever.


00:04:13.000 --> 00:04:13.840
- You're living in the future.


00:04:13.840 --> 00:04:15.280
>> Just go through all of them.


00:04:15.280 --> 00:04:17.800
Just do a search and grab all of the,


00:04:17.800 --> 00:04:20.540
what do we got, the site packages directories.


00:04:20.540 --> 00:04:23.320
Grab everything out of all of those and copy


00:04:23.320 --> 00:04:26.480
them to a local wheels directory or something.


00:04:26.480 --> 00:04:29.440
Something outside of your work environment.


00:04:29.440 --> 00:04:30.880
I just stuck it at the top level,


00:04:30.880 --> 00:04:33.440
you like users or something, I stuck it up there.


00:04:33.440 --> 00:04:37.440
Then that's everything because you know you ran it.


00:04:37.440 --> 00:04:40.360
Then go ahead and set up these environmental variables.


00:04:40.360 --> 00:04:42.480
I actually just stuck the environmental variables


00:04:42.480 --> 00:04:47.480
in my, just in a little script to set them


00:04:47.480 --> 00:04:49.100
while I'm developing.


00:04:49.100 --> 00:04:51.960
- Yeah, you know what I learned that was pretty interesting


00:04:51.960 --> 00:04:55.660
that the activate script for a virtual environment,


00:04:55.660 --> 00:04:57.560
you can put environment variables in there.


00:04:57.560 --> 00:05:00.440
So you could have like a offline virtual environment


00:05:00.440 --> 00:05:01.800
and an online virtual environment


00:05:01.800 --> 00:05:03.560
and those could toggle different environment


00:05:03.560 --> 00:05:05.840
and just which one you activate will just make this happen.


00:05:05.840 --> 00:05:06.680
That'd be awesome.


00:05:06.680 --> 00:05:09.120
- Yeah, so this, and that's one of those,


00:05:09.120 --> 00:05:12.080
it's all virtual environments all the way down.


00:05:12.080 --> 00:05:16.260
These environmental variables have to be set in


00:05:16.260 --> 00:05:18.700
the environment that you're running it in.


00:05:18.700 --> 00:05:21.380
They can be set in the virtual environment that you


00:05:21.380 --> 00:05:24.740
were using to run talks even though talks will generate others.


00:05:24.740 --> 00:05:26.100
It works right.


00:05:26.100 --> 00:05:27.820
I don't know how it works, but it works.


00:05:27.820 --> 00:05:30.620
Anyway, this super helped me out.


00:05:30.620 --> 00:05:32.960
Yeah, so then grab all those,


00:05:32.960 --> 00:05:35.000
throw them in there, and then use the find links and


00:05:35.000 --> 00:05:37.860
noindex and it'll just work great.


00:05:37.860 --> 00:05:41.740
The reason why I think I didn't find it at first is


00:05:41.740 --> 00:05:45.420
the note within the pip documentation just says,


00:05:45.420 --> 00:05:51.180
everything that's a flag within pip is also an environmental variable.


00:05:51.180 --> 00:05:53.180
If you search for it,


00:05:53.180 --> 00:05:54.340
you probably won't find it.


00:05:54.340 --> 00:05:55.940
It just has this comment that says,


00:05:55.940 --> 00:06:00.260
all command line options can be set as environmental variables using


00:06:00.260 --> 00:06:05.860
all uppercase and then underscores instead of dashes.


00:06:05.860 --> 00:06:07.700
>> That's a cool tip. Yeah.


00:06:07.700 --> 00:06:09.180
Yeah. Brandon, what do you think?


00:06:09.180 --> 00:06:11.540
>> Yeah. At first, I was confused a little bit about


00:06:11.540 --> 00:06:13.640
why you wouldn't just pip install before you got on the plane,


00:06:13.640 --> 00:06:17.140
but I've never actually used TOX to do any testing.


00:06:17.140 --> 00:06:19.440
It sounds like that installs in a different directory.


00:06:19.440 --> 00:06:23.720
When you do your TOX runs that it needs to reinstall them.


00:06:23.720 --> 00:06:25.680
>> Yeah, it creates a new virtual environment.


00:06:25.680 --> 00:06:29.720
You can run it ahead of time and you can tell it to not install those,


00:06:29.720 --> 00:06:32.200
but I was messing with my environments,


00:06:32.200 --> 00:06:36.000
so I really wanted to make sure I could clean them out.


00:06:36.000 --> 00:06:40.320
There's probably other cool solutions, but that's what I used.


00:06:40.320 --> 00:06:41.240
>> That's interesting though.


00:06:41.240 --> 00:06:43.020
>> It creates all the virtual environments.


00:06:43.020 --> 00:06:46.060
Each different like 3.7, 3.8, 3.9, 3.10,


00:06:46.060 --> 00:06:47.960
they'll all be different virtual environments


00:06:47.960 --> 00:06:49.760
that it runs your tests in.


00:06:49.760 --> 00:06:52.180
>> It's always one of those things that we depend so much on


00:06:52.180 --> 00:06:54.500
the Internet that you do our job that when you don't have it,


00:06:54.500 --> 00:06:56.500
what do I do? That's interesting.


00:06:56.500 --> 00:07:00.860
>> Yeah. That's like 20 hours of work I would have lost.


00:07:00.860 --> 00:07:03.340
Anyway.


00:07:03.340 --> 00:07:04.940
>> Yeah. This is very cool.


00:07:04.940 --> 00:07:08.260
Nice tip, especially in the environment variables just for PIP,


00:07:08.260 --> 00:07:11.260
like you can change the verbosity or the mirrors


00:07:11.260 --> 00:07:12.600
or all sorts of stuff, right?


00:07:12.600 --> 00:07:13.440
- Yeah.


00:07:13.440 --> 00:07:16.380
- All right, so this time I have an extra, extra,


00:07:16.380 --> 00:07:18.180
how many extras, let's see, I have eight extras.


00:07:18.180 --> 00:07:21.020
Extra, extra, six times extra here all about it.


00:07:21.020 --> 00:07:23.500
I'll be kind of quick, but they're all kind of interesting.


00:07:23.500 --> 00:07:27.620
I just want to give a quick shout out to V Brown Bag.


00:07:27.620 --> 00:07:29.820
I did a talk over there on Pydantic,


00:07:29.820 --> 00:07:32.860
so a 45 minute presentation on Pydantic


00:07:32.860 --> 00:07:34.720
and how you can do all sorts of cool stuff with that.


00:07:34.720 --> 00:07:36.980
We've already talked about why Pydantic is excellent.


00:07:36.980 --> 00:07:39.580
So very, very neat, check that out.


00:07:39.580 --> 00:07:41.820
And also wanna give a shout out to an episode that I did,


00:07:41.820 --> 00:07:43.100
I think is on Talk Python,


00:07:43.100 --> 00:07:45.340
that I think is gonna be really useful for people.


00:07:45.340 --> 00:07:47.260
It's about building little automation tools,


00:07:47.260 --> 00:07:48.980
like instead of trying to build big apps,


00:07:48.980 --> 00:07:52.580
like maybe a little app with rumps that runs up in your menu


00:07:52.580 --> 00:07:56.180
or a little app that you can do a bunch of stuff


00:07:56.180 --> 00:07:59.300
and it'll generate like a query for some other platform


00:07:59.300 --> 00:08:00.740
that's not like SQL, but you know,


00:08:00.740 --> 00:08:03.220
sort of think SQL like type of things and so on.


00:08:03.220 --> 00:08:04.260
So I had a bunch of cool guests,


00:08:04.260 --> 00:08:06.860
I had Rusty Gregory, Kim VanWijk, KJ Miller,


00:08:06.860 --> 00:08:09.660
and actually Rivers Cuomo from Weezer on the show.


00:08:09.660 --> 00:08:10.600
He's doing amazing stuff.


00:08:10.600 --> 00:08:11.940
So people should check that out


00:08:11.940 --> 00:08:14.180
if that sounds interesting and inspiring.


00:08:14.180 --> 00:08:15.260
- That sounds so cool.


00:08:15.260 --> 00:08:16.380
I can't wait to watch this.


00:08:16.380 --> 00:08:18.180
- Yeah, this is gonna be one of my favorite


00:08:18.180 --> 00:08:20.620
Talk Byline episodes in the near term, I'm pretty sure.


00:08:20.620 --> 00:08:22.020
Okay, enough of my stuff.


00:08:22.020 --> 00:08:25.180
On to the six other things that we haven't done.


00:08:25.180 --> 00:08:29.060
Remember we had Sherry Eskenes on the show a while back?


00:08:29.060 --> 00:08:29.900
- Yeah.


00:08:29.900 --> 00:08:30.720
- That was really fun.


00:08:30.720 --> 00:08:31.860
She talked about a bunch of great things,


00:08:31.860 --> 00:08:34.220
but she also did a day in the code,


00:08:34.220 --> 00:08:36.620
I thought, like storybook for kids.


00:08:36.620 --> 00:08:40.180
So her storybook for kids, which I know you and I both got a copy, right, Brian?


00:08:40.180 --> 00:08:40.900
Yeah.


00:08:40.900 --> 00:08:42.500
And I'm, it's actually pretty cool.


00:08:42.500 --> 00:08:42.920
Yeah.


00:08:42.920 --> 00:08:43.360
Like it.


00:08:43.360 --> 00:08:44.380
Yeah, it's cool.


00:08:44.380 --> 00:08:48.140
So think like a big, large picture book that tells a story, but about programming


00:08:48.140 --> 00:08:51.140
for kids rather than, I don't know, like a day in the park or whatever.


00:08:51.140 --> 00:08:52.540
So that book's actually out.


00:08:52.540 --> 00:08:54.380
I just want to, that'll be a link in the show notes.


00:08:54.380 --> 00:08:56.300
If you've heard that episode, you want to check it out.


00:08:56.300 --> 00:08:57.540
You don't could actually get the book now.


00:08:57.540 --> 00:09:02.220
We talked about GitHub, Copilot and some other things like that.


00:09:02.380 --> 00:09:07.660
I want to give a shout out to another tool that's kind of like this, but way more tamed


00:09:07.660 --> 00:09:12.420
down and it plugs into all sorts of different IDEs called tab nine.


00:09:12.420 --> 00:09:13.580
We talked about tab nine.


00:09:13.580 --> 00:09:18.500
I don't think I, I don't think I have either, but it's actually really well developed.


00:09:18.500 --> 00:09:21.260
It's got a ton of different platforms.


00:09:21.260 --> 00:09:24.380
For example, if you go over here and check it out, it's like, well, what do you want?


00:09:24.380 --> 00:09:25.380
VS Code?


00:09:25.380 --> 00:09:26.380
You want PyCharm?


00:09:26.380 --> 00:09:27.380
You want WebStorm?


00:09:27.380 --> 00:09:28.380
You want Adam?


00:09:28.380 --> 00:09:29.380
You want Emacs?


00:09:29.380 --> 00:09:30.380
You want Ruby mind?


00:09:30.380 --> 00:09:31.380
You want straight?


00:09:31.380 --> 00:09:33.180
- Yeah, straight Vim, yeah.


00:09:33.180 --> 00:09:37.660
And so this is a tool that you plug into your editor.


00:09:37.660 --> 00:09:39.860
Well, Python, that's offensive to have JavaScript in it.


00:09:39.860 --> 00:09:40.700
Excuse me.


00:09:40.700 --> 00:09:41.540
(laughing)


00:09:41.540 --> 00:09:44.820
So you can come down here and it will help basically


00:09:44.820 --> 00:09:47.260
look at your code, look at the keyword arguments,


00:09:47.260 --> 00:09:49.020
and instead of just giving you auto-complete


00:09:49.020 --> 00:09:52.100
for the symbols, like functions and fields and stuff,


00:09:52.100 --> 00:09:54.220
it tries to kind of bring it together.


00:09:54.220 --> 00:09:56.820
It's not GitHub Copilot in the sense that it's trying


00:09:56.820 --> 00:09:59.460
to pull other people's code and inject LAR.


00:09:59.460 --> 00:10:02.880
It's not like stack overflow copy and paste with a tab type of thing.


00:10:02.880 --> 00:10:07.320
It's looking at what's on your screen and trying to pull it together to complete a little bit more.


00:10:07.320 --> 00:10:11.620
So if you have like a username equals quote Brian and then you call a function that takes a username,


00:10:11.620 --> 00:10:14.560
it'll suggest you pass in that variable value.


00:10:14.560 --> 00:10:15.520
Go on. What do you think?


00:10:15.520 --> 00:10:17.420
Actually, I definitely want to try this.


00:10:17.420 --> 00:10:20.520
I think this having a smarter code complete,


00:10:20.520 --> 00:10:24.820
that sounds just like about the right level that I want to try first.


00:10:24.820 --> 00:10:25.820
Yeah. Brandon?


00:10:25.820 --> 00:10:29.740
Yeah, yeah, I actually had this Anna GitHub code pilot on at the same time.


00:10:29.740 --> 00:10:32.540
Oh my gosh, what happened is a disaster.


00:10:32.540 --> 00:10:39.420
But yeah, I like this because as much as I like VS Code of I'm a huge JetBrains fan and


00:10:39.420 --> 00:10:43.500
the fact that you can't use it in no PyCharm or anything else like that is very disappointing.


00:10:43.500 --> 00:10:45.180
So yeah, I agree with that. Yeah,


00:10:45.180 --> 00:10:50.220
well, I think I want to get like five AI coding systems together and they can just mob program


00:10:50.220 --> 00:10:50.940
by themselves.


00:10:53.420 --> 00:10:54.260
- Exactly.


00:10:54.260 --> 00:10:56.260
So when I look at this stuff,


00:10:56.260 --> 00:10:57.560
one of the first things I think,


00:10:57.560 --> 00:11:00.300
okay, it's using AI, it's taking,


00:11:00.300 --> 00:11:03.060
it's like I said, it's taking the stuff out of my code


00:11:03.060 --> 00:11:05.220
and then applying the AI to that.


00:11:05.220 --> 00:11:07.620
Does that mean my code is being passed to somewhere


00:11:07.620 --> 00:11:09.200
that I don't want my code to be?


00:11:09.200 --> 00:11:11.860
And so somewhere, yeah, here you go.


00:11:11.860 --> 00:11:13.560
It says your code is yours and yours alone.


00:11:13.560 --> 00:11:16.580
It runs locally without sending any source code anywhere.


00:11:16.580 --> 00:11:18.580
You can even work on a plane, Brian.


00:11:18.580 --> 00:11:20.780
Anyway, I ran across this.


00:11:20.780 --> 00:11:22.020
I was talking to the folks from there


00:11:22.020 --> 00:11:23.340
and I thought this is pretty cool.


00:11:23.340 --> 00:11:24.520
I'll give a quick shout out to that


00:11:24.520 --> 00:11:28.400
'cause the AI coding assistants are all the rage right now.


00:11:28.400 --> 00:11:29.960
- Is this a paid thing or a free thing?


00:11:29.960 --> 00:11:32.600
- Yeah, it costs money, but there is a free version.


00:11:32.600 --> 00:11:35.120
So you get like what they call basic completion.


00:11:35.120 --> 00:11:37.080
- Bad suggestions for free.


00:11:37.080 --> 00:11:38.500
- Yeah, exactly.


00:11:38.500 --> 00:11:39.620
Like every 10th is a bug,


00:11:39.620 --> 00:11:40.980
but the other nine are really good.


00:11:40.980 --> 00:11:42.880
No, I'm just joking about that, I don't know.


00:11:42.880 --> 00:11:43.960
But yeah, there's a free one


00:11:43.960 --> 00:11:45.920
and then you can pay for more.


00:11:45.920 --> 00:11:47.480
Brandon, did you do the paid one?


00:11:47.480 --> 00:11:48.800
Do you know the difference?


00:11:48.800 --> 00:11:50.040
- I just used the free one.


00:11:50.040 --> 00:11:52.120
I assumed that there's probably, like I said,


00:11:52.120 --> 00:11:55.800
better models and I think there's like a limit to the amount you can do with the free one.


00:11:55.800 --> 00:11:58.160
So it just stops working the extra to do the work yourself.


00:11:58.160 --> 00:11:58.640
>> Yeah.


00:11:58.640 --> 00:12:00.960
>> To be fair, it doesn't look expensive.


00:12:00.960 --> 00:12:02.720
>> No, it's reasonably priced.


00:12:02.720 --> 00:12:05.280
>> Yeah. It's 12 bucks a month for the paid version.


00:12:05.280 --> 00:12:07.160
I always feel like when people are like, "Oh,


00:12:07.160 --> 00:12:10.220
well I'm not going to pay $10 for this thing."


00:12:10.220 --> 00:12:12.120
It's like, "This is your job all day.


00:12:12.120 --> 00:12:15.240
How much can you actually make from this job?


00:12:15.240 --> 00:12:18.160
If this could save you an hour, surely."


00:12:18.160 --> 00:12:19.920
Anyway, that's a different discussion.


00:12:19.920 --> 00:12:23.320
Speaking of discussions, following up on one of our episodes


00:12:23.320 --> 00:12:26.640
with Simon Willison, who talked about Apple Photos


00:12:26.640 --> 00:12:31.120
and SQLite and using DogSheep and Datasette to analyze it,


00:12:31.120 --> 00:12:33.960
Rhett Turnbull pointed out a project that he created


00:12:33.960 --> 00:12:37.960
that will, it says, macOS photo,


00:12:37.960 --> 00:12:42.120
oh, the OSX photos Python package exposes all of your data


00:12:42.120 --> 00:12:44.360
to your Python apps, and the next release will provide


00:12:44.360 --> 00:12:48.000
the OCR stuff out of Apple's Vision Framework.


00:12:48.000 --> 00:12:49.600
So people have been tracking that.


00:12:49.600 --> 00:12:53.260
There's some really exciting stuff coming to the Apple photo,


00:12:53.260 --> 00:12:55.240
iOS, etc.


00:12:55.240 --> 00:12:56.760
Where if you take a picture of something,


00:12:56.760 --> 00:12:59.280
then it'll automatically do OCR and you can actually


00:12:59.280 --> 00:13:03.840
select and copy the text out of say a sign in a picture and paste that somewhere.


00:13:03.840 --> 00:13:05.640
That'll be stored in the database and apparently


00:13:05.640 --> 00:13:07.480
this thing will give you access to that text.


00:13:07.480 --> 00:13:09.800
>> That'd be cool. Can I get that in my car so


00:13:09.800 --> 00:13:12.200
that I can just have somebody else reading signs for me?


00:13:12.200 --> 00:13:12.560
>> Exactly.


00:13:12.560 --> 00:13:13.400
>> That'd be sweet.


00:13:13.400 --> 00:13:15.080
>> Someday perhaps. All right.


00:13:15.080 --> 00:13:16.800
Rhett, thank you for that.


00:13:16.800 --> 00:13:19.360
Okay, last three things.


00:13:19.360 --> 00:13:24.000
Really quick, I released three packages to PyPI last week.


00:13:24.000 --> 00:13:24.960
Two of them are related.


00:13:24.960 --> 00:13:28.080
They're around taking HTML and templates,


00:13:28.080 --> 00:13:29.720
either Jinja or Chameleon,


00:13:29.720 --> 00:13:31.320
two in one package for each language,


00:13:31.320 --> 00:13:34.240
and trying to reuse them in really clean, simple ways.


00:13:34.240 --> 00:13:35.920
So if you've got some fragment,


00:13:35.920 --> 00:13:38.800
say, like an example I have on the site is a video app,


00:13:38.800 --> 00:13:41.360
and it's got a thumbnail of a YouTube video,


00:13:41.360 --> 00:13:43.720
then the title of the author, and then the number of views.


00:13:43.720 --> 00:13:45.680
And if you wanna show that all over the place,


00:13:45.680 --> 00:13:47.800
you could either copy that code and replicate it,


00:13:47.800 --> 00:13:49.400
or with this inside your template,


00:13:49.400 --> 00:13:52.000
you just say render template or render partial,


00:13:52.000 --> 00:13:54.280
and you point at some HTML fragment bit,


00:13:54.280 --> 00:13:56.520
and it'll apply your model to that sub thing.


00:13:56.520 --> 00:13:58.640
It allows you to basically create functions


00:13:58.640 --> 00:14:01.360
that return HTML inside of your templates.


00:14:01.360 --> 00:14:02.320
- That's neat.


00:14:02.320 --> 00:14:03.840
- Yeah, so it's super, super simple.


00:14:03.840 --> 00:14:04.920
So like for the videos,


00:14:04.920 --> 00:14:07.320
you have like literally this little render partial,


00:14:07.320 --> 00:14:09.280
you know, quote shared video square,


00:14:09.280 --> 00:14:10.760
and you pass the video over.


00:14:10.760 --> 00:14:11.600
Really, really nice.


00:14:11.600 --> 00:14:14.680
So there's a Jinja partials for Flask people,


00:14:14.680 --> 00:14:16.380
and there's a chameleon partials


00:14:16.380 --> 00:14:18.480
that does exactly the same thing for Pyramid.


00:14:18.480 --> 00:14:21.040
And then last thing, adding the chameleon template language


00:14:21.040 --> 00:14:23.120
to FastAPI so you can build proper web apps.


00:14:23.120 --> 00:14:24.660
I published that, it's been around for a little while,


00:14:24.660 --> 00:14:26.960
but I finally published it to PyPI.


00:14:26.960 --> 00:14:30.340
So you just put a little decorator onto a FastAPI function


00:14:30.340 --> 00:14:34.280
and it becomes a HTML endpoint rather than a API endpoint.


00:14:34.280 --> 00:14:36.440
- Have you just, have you been using chameleon longer?


00:14:36.440 --> 00:14:37.920
Is that why you're more comfortable with it?


00:14:37.920 --> 00:14:42.040
- I, no, I probably have been doing more chameleon


00:14:42.040 --> 00:14:43.720
than Jinja, but I do a lot.


00:14:43.720 --> 00:14:46.680
But the thing that I really, really like about Chameleon,


00:14:46.680 --> 00:14:49.000
let's see if I can find an example,


00:14:49.000 --> 00:14:49.960
it'll probably be good enough.


00:14:49.960 --> 00:14:51.920
But what I really like about Chameleon


00:14:51.920 --> 00:14:55.080
is that it is valid HTML as it is.


00:14:55.080 --> 00:14:57.960
Whereas with Jinja and the Django framework


00:14:57.960 --> 00:14:59.120
and a bunch of other frameworks,


00:14:59.120 --> 00:15:03.480
Mako and you go into other areas like Razor and ASP.NET,


00:15:03.480 --> 00:15:05.360
all of these are nice,


00:15:05.360 --> 00:15:07.940
but they all have HTML, HTML, blocks of code,


00:15:07.940 --> 00:15:10.720
blocks of code, HTML, block of code, HTML, right?


00:15:10.720 --> 00:15:12.880
This is all driven through attributes,


00:15:12.880 --> 00:15:16.120
So like here, if I want something that's a loop,


00:15:16.120 --> 00:15:18.680
I can just say, "Talcolon repeat" as an attribute.


00:15:18.680 --> 00:15:20.800
Or if I want, yeah, things like that, right?


00:15:20.800 --> 00:15:22.760
Or you do condition, you say, "Talcolon conditional"


00:15:22.760 --> 00:15:23.580
and you put it in there.


00:15:23.580 --> 00:15:26.080
So this is actually 100% still validates HTML,


00:15:26.080 --> 00:15:27.480
with just attributes that don't make sense.


00:15:27.480 --> 00:15:29.000
So to me, it just feels cleaner.


00:15:29.000 --> 00:15:30.080
That's why I like it better.


00:15:30.080 --> 00:15:30.920
- Yeah, okay.


00:15:30.920 --> 00:15:33.200
- Yeah, I kind of tore through all those


00:15:33.200 --> 00:15:35.200
without giving you a lot of chance to talk about them.


00:15:35.200 --> 00:15:37.680
But anyway, that's my extra A type.


00:15:37.680 --> 00:15:38.520
- Yeah, I like it.


00:15:38.520 --> 00:15:39.340
- Thanks, cool.


00:15:39.340 --> 00:15:40.560
All right, Brandon, you're up next.


00:15:40.560 --> 00:15:43.120
- Yeah, so this is something I came across on Twitter


00:15:43.120 --> 00:15:45.480
and I signed up to do it.


00:15:45.480 --> 00:15:48.680
So it's Kaggle's 30 days of machine learning.


00:15:48.680 --> 00:15:49.520
Basically what it is,


00:15:49.520 --> 00:15:51.760
I guess if you don't know what Kaggle is,


00:15:51.760 --> 00:15:53.540
it's a place for data scientists


00:15:53.540 --> 00:15:55.860
to find and publish data sets.


00:15:55.860 --> 00:15:57.520
They have online Jupyter notebooks


00:15:57.520 --> 00:16:00.480
that allow you access to free GPUs and things like that


00:16:00.480 --> 00:16:02.880
to run your machine learning models on.


00:16:02.880 --> 00:16:04.400
You can collaborate with other data scientists


00:16:04.400 --> 00:16:05.320
and things like that.


00:16:05.320 --> 00:16:07.000
And machine learning is one of those things


00:16:07.000 --> 00:16:08.080
I've always kind of wanted to get into,


00:16:08.080 --> 00:16:09.320
but I've always been a little scared.


00:16:09.320 --> 00:16:11.560
and not sure the 100% of the resources to go to.


00:16:11.560 --> 00:16:13.860
So I saw this 30 days of machine learning


00:16:13.860 --> 00:16:16.300
and what's nice is they give you an introduction


00:16:16.300 --> 00:16:18.580
into Python, the things you need to learn from Python


00:16:18.580 --> 00:16:21.200
to know how to do machine learning.


00:16:21.200 --> 00:16:23.200
They show you how to build models


00:16:23.200 --> 00:16:25.800
in their Jupyter notebooks.


00:16:25.800 --> 00:16:26.920
And yeah, so you go through that,


00:16:26.920 --> 00:16:29.300
you learn some basic and intermediate


00:16:29.300 --> 00:16:31.360
machine learning concepts.


00:16:31.360 --> 00:16:33.400
You get some certificates, so if you want to post those


00:16:33.400 --> 00:16:35.000
like you knew off your resume or something like that,


00:16:35.000 --> 00:16:37.480
you can say, hey, I did some learning with Kaggle.


00:16:37.480 --> 00:16:38.320
And the cool--


00:16:38.320 --> 00:16:40.680
- I'm not denying this, but I suspect that if you


00:16:40.680 --> 00:16:42.880
ranked pretty highly on Kaggle and then you put that


00:16:42.880 --> 00:16:45.760
on your LinkedIn profile, or you're trying to get a job,


00:16:45.760 --> 00:16:47.360
I mean, that speaks pretty well.


00:16:47.360 --> 00:16:48.840
- Yeah, yeah, I would think so.


00:16:48.840 --> 00:16:50.560
And I think the cool thing is, like, at the end of it,


00:16:50.560 --> 00:16:52.920
there's a competition that they have with,


00:16:52.920 --> 00:16:54.440
I think it's like teams up to three,


00:16:54.440 --> 00:16:57.720
and it's only people that ran through the course,


00:16:57.720 --> 00:16:58.880
so you're not competing against people


00:16:58.880 --> 00:17:00.980
who have been doing machine learning for years,


00:17:00.980 --> 00:17:02.600
and it kind of gives you a little bit of that taste


00:17:02.600 --> 00:17:04.520
into what machine learning competitions are like.


00:17:04.520 --> 00:17:06.480
So I think it'll be interesting, it'll be fun.


00:17:06.480 --> 00:17:07.320
- Are you gonna do it?


00:17:07.320 --> 00:17:08.220
- Yeah.


00:17:08.220 --> 00:17:09.060
- Yeah, nice.


00:17:09.060 --> 00:17:13.220
What I think is valuable here is the constraints, right?


00:17:13.220 --> 00:17:14.740
You know, you have, here's your data


00:17:14.740 --> 00:17:15.900
that you're gonna be working from.


00:17:15.900 --> 00:17:17.820
Here's the type of problem you're solving.


00:17:17.820 --> 00:17:19.420
And so often when you're a beginner,


00:17:19.420 --> 00:17:21.460
whether it's machine learning or web development


00:17:21.460 --> 00:17:22.900
or whatever, it's really hard to know


00:17:22.900 --> 00:17:25.660
what is the right sized problem to attack.


00:17:25.660 --> 00:17:27.100
It's so easy to go, well, that's too small,


00:17:27.100 --> 00:17:28.180
that's not interesting, or oh, wait,


00:17:28.180 --> 00:17:29.640
all of a sudden I tried to build Instagram


00:17:29.640 --> 00:17:32.060
and I got stuck, or whatever, you know?


00:17:32.060 --> 00:17:33.700
- Yeah, and I think it's nice, you know,


00:17:33.700 --> 00:17:34.860
if they give you the data, like, yeah,


00:17:34.860 --> 00:17:36.900
I think a lot of times the biggest part


00:17:36.900 --> 00:17:38.820
machine learning and data sciences,


00:17:38.820 --> 00:17:40.740
cleaning the data and making sure you have the right data


00:17:40.740 --> 00:17:42.980
and the right attributes to look at.


00:17:42.980 --> 00:17:44.300
Hopefully they walk you through how to,


00:17:44.300 --> 00:17:45.380
they should walk you through how to do that


00:17:45.380 --> 00:17:46.780
and kind of give you a taste of how to do that.


00:17:46.780 --> 00:17:48.700
So, I think it'll be a good learning experience.


00:17:48.700 --> 00:17:50.980
- I suspect this is free, is that true?


00:17:50.980 --> 00:17:52.840
- Yeah, yeah, yeah, that's true, it's free, yep.


00:17:52.840 --> 00:17:54.260
All you need is a Kaggle account.


00:17:54.260 --> 00:17:57.140
- Yeah, and it starts August 2nd, which is like four days


00:17:57.140 --> 00:17:59.220
away, so yeah, don't hesitate, get in there


00:17:59.220 --> 00:18:00.340
if you're gonna be part of this.


00:18:00.340 --> 00:18:02.980
- This sounds neat, and actually, there's this,


00:18:02.980 --> 00:18:04.940
but even if somebody doesn't wanna do this,


00:18:04.940 --> 00:18:10.700
Kaggle has a lot of learning opportunities for people that want to learn the tools.


00:18:10.700 --> 00:18:13.340
It's an interesting resource for learning how to do this.


00:18:13.340 --> 00:18:14.340
Yeah, absolutely.


00:18:14.340 --> 00:18:15.340
Cool.


00:18:15.340 --> 00:18:16.340
That's a great pick.


00:18:16.340 --> 00:18:17.340
Brian, you're next, right?


00:18:17.340 --> 00:18:18.340
Oh, right.


00:18:18.340 --> 00:18:19.340
Yeah.


00:18:19.340 --> 00:18:20.340
So, been testing a lot.


00:18:20.340 --> 00:18:21.340
More testing.


00:18:21.340 --> 00:18:30.500
So, one of the things I had a project that was set up to use Docs, but I also, early


00:18:30.500 --> 00:18:32.660
on when GitHub Actions came about.


00:18:32.660 --> 00:18:35.180
I put it up on GitHub Actions too.


00:18:35.180 --> 00:18:39.360
But I was trying to understand the workflow a little more.


00:18:39.360 --> 00:18:41.160
At first, there were a lot of resources.


00:18:41.160 --> 00:18:43.520
Then I came across this recently,


00:18:43.520 --> 00:18:46.140
just this weekend, this week, last week,


00:18:46.140 --> 00:18:47.760
Building and Testing Python.


00:18:47.760 --> 00:18:51.780
It's part of the GitHub Actions guides.


00:18:51.780 --> 00:18:54.100
It's actually pretty great and it


00:18:54.100 --> 00:18:56.260
goes through a whole bunch of stuff.


00:18:56.260 --> 00:19:00.460
I mean, it's around a set of docs that talks about,


00:19:00.460 --> 00:19:03.140
Python, Ruby, Java, a whole bunch of other things.


00:19:03.140 --> 00:19:05.300
But within the Python space,


00:19:05.300 --> 00:19:12.020
it really is a full setup of how to run this yourself.


00:19:12.020 --> 00:19:15.160
The reason why I brought this up is I wanted to,


00:19:15.160 --> 00:19:17.620
hopefully people are using Tox, I love Tox.


00:19:17.620 --> 00:19:22.360
One of the reasons why I like it is because it's like a CI system,


00:19:22.360 --> 00:19:26.480
but locally you can run through making sure your installs work,


00:19:26.480 --> 00:19:29.740
your builds work, and all your extra tools


00:19:29.740 --> 00:19:30.900
that you've got hooked up.


00:19:30.900 --> 00:19:33.680
- Right, one of the problems is you just got your Python,


00:19:33.680 --> 00:19:36.040
whatever, version 393, whatever, installed,


00:19:36.040 --> 00:19:37.320
and you run your test, it runs on that,


00:19:37.320 --> 00:19:39.180
but you want to kind of exhaustively go,


00:19:39.180 --> 00:19:40.960
I want to test on all the versions


00:19:40.960 --> 00:19:43.240
that I, in theory, support every time.


00:19:43.240 --> 00:19:44.660
- Yeah, or you might have an error


00:19:44.660 --> 00:19:48.120
in your pyproject.toml file or your setup.py,


00:19:48.120 --> 00:19:51.080
and you're not seeing that because you're not completely,


00:19:51.080 --> 00:19:54.000
you're not rebuilding it, but Tox will do that.


00:19:54.000 --> 00:19:55.300
But so will CI systems,


00:19:55.300 --> 00:19:57.900
but it's kind of nice to have it set up both.


00:19:57.900 --> 00:20:03.300
The directions here, it starts with directions on how to run


00:20:03.300 --> 00:20:07.040
pytest and to install dependencies and build,


00:20:07.040 --> 00:20:09.440
and lint, and run pytest on your project.


00:20:09.440 --> 00:20:11.080
But if you already have talks set up,


00:20:11.080 --> 00:20:13.380
this is a duplicate effort.


00:20:13.380 --> 00:20:16.840
But I think you want to jump down to the talk section of


00:20:16.840 --> 00:20:21.840
this document because it shows you just how to run talks directly.


00:20:21.840 --> 00:20:24.020
It's a smaller setup,


00:20:24.020 --> 00:20:27.660
and essentially what KM-Axis is doing is setting up


00:20:27.660 --> 00:20:31.040
a Python environment and then


00:20:31.040 --> 00:20:33.960
installing talks and running your talks environments.


00:20:33.960 --> 00:20:36.600
So you're having that same code from


00:20:36.600 --> 00:20:40.400
your talks any file running within GitHub Actions.


00:20:40.400 --> 00:20:42.520
>> I like it because it's going to


00:20:42.520 --> 00:20:45.220
try to do the same thing locally as it will in CI.


00:20:45.220 --> 00:20:48.500
>> Yeah. The one change I want to mention to


00:20:48.500 --> 00:20:50.920
lag out and we'll have this in the show notes,


00:20:50.920 --> 00:20:55.760
as I've modified this example because hopefully,


00:20:55.760 --> 00:20:58.180
It didn't make sense to me at first.


00:20:58.180 --> 00:21:00.760
The example they show is on push.


00:21:00.760 --> 00:21:02.440
When you push to a branch,


00:21:02.440 --> 00:21:03.560
it'll run these actions.


00:21:03.560 --> 00:21:07.480
But you also want to set up on pull requests.


00:21:07.480 --> 00:21:11.880
Just add pull_request right next to push.


00:21:11.880 --> 00:21:14.920
When people do pull requests to your project,


00:21:14.920 --> 00:21:17.280
it'll run your talks also.


00:21:17.280 --> 00:21:19.360
Then also, if you want to try to run 3.10,


00:21:19.360 --> 00:21:20.760
and hopefully you are right now


00:21:20.760 --> 00:21:23.680
because 3.10 is just around the corner,


00:21:23.680 --> 00:21:28.760
add 310-dev into the Python list.


00:21:28.760 --> 00:21:31.320
>> Dash dev, interesting. That'll run the RC?


00:21:31.320 --> 00:21:33.920
>> Yeah. Well, I don't know if it's the RC.


00:21:33.920 --> 00:21:35.640
I think you can do RCs also,


00:21:35.640 --> 00:21:38.080
but dev is I think close enough,


00:21:38.080 --> 00:21:40.080
and you don't have to muck with it all the time.


00:21:40.080 --> 00:21:42.120
>> Is that like the latest build, 310 or something?


00:21:42.120 --> 00:21:44.520
>> I think so. I think it's just the latest 310 build.


00:21:44.520 --> 00:21:48.580
Then at the bottom, there's this thing that talks e-pi,


00:21:48.580 --> 00:21:52.760
and that dash e usually means run the environment,


00:21:52.760 --> 00:21:57.160
run a specific one, but I don't set up the one that just says pi.


00:21:57.160 --> 00:21:59.720
I usually say pi 37 to pi 38.


00:21:59.720 --> 00:22:04.480
But I got some help also on Twitter to understand this.


00:22:04.480 --> 00:22:08.200
What that does is it just will pick the one that's valid.


00:22:08.200 --> 00:22:10.280
I tried it out and it works.


00:22:10.280 --> 00:22:11.840
If you do this code,


00:22:11.840 --> 00:22:13.620
it'll run the correct one.


00:22:13.620 --> 00:22:16.560
>> Very nice. In the live stream, we have Felix.


00:22:16.560 --> 00:22:18.880
Hey, Felix says, "I love talks to you using it for


00:22:18.880 --> 00:22:21.560
my strong typing package and it's awesome."


00:22:21.560 --> 00:22:25.360
Welcome Felix. Yeah, we covered your strong typing package a few weeks ago. That's really good.


00:22:25.360 --> 00:22:31.640
Yeah. Oh, and then Oli says the machine language sounds good.


00:22:31.640 --> 00:22:32.640
So thanks Oli.


00:22:32.640 --> 00:22:34.840
Yeah, absolutely. Yeah, absolutely. Yeah. All right.


00:22:34.840 --> 00:22:38.040
Well, Brian, you spoke about the stuff on the plane,


00:22:38.040 --> 00:22:41.640
and I've got an alternative solution for you.


00:22:41.640 --> 00:22:42.360
Okay.


00:22:42.360 --> 00:22:43.760
This is really interesting.


00:22:43.760 --> 00:22:46.840
This one comes from Patrick Park, this recommendation,


00:22:46.840 --> 00:22:49.640
and it's called Python-Vendorize.


00:22:49.640 --> 00:22:52.920
So, vendoring a dependency in Python means


00:22:52.920 --> 00:22:55.640
instead of linking to the package you get from pip,


00:22:55.640 --> 00:22:59.480
you just go, I'm going to find that code and just jam it into my project


00:22:59.480 --> 00:23:01.080
and just copy it over, right?


00:23:01.080 --> 00:23:04.600
Which is a bit of a hassle because then you've got to like keep syncing it and stuff.


00:23:04.600 --> 00:23:08.120
But for small things like, you know, six, unsync,


00:23:08.120 --> 00:23:11.560
you know, like things that are one file or they're just pure Python


00:23:11.560 --> 00:23:13.400
and they don't have many dependencies,


00:23:13.400 --> 00:23:17.240
you know, it might just make sense if there were an easy way to just make that


00:23:17.240 --> 00:23:20.600
like a sub directory sub module of your package,


00:23:20.600 --> 00:23:22.120
then when somebody runs your code,


00:23:22.120 --> 00:23:23.520
they don't have to pip install anything.


00:23:23.520 --> 00:23:25.240
No virtual environments, nothing.


00:23:25.240 --> 00:23:27.280
So with this Python vendorize,


00:23:27.280 --> 00:23:30.200
that's what you can do for pure Python packages.


00:23:30.200 --> 00:23:32.720
So the idea is if you've got


00:23:32.720 --> 00:23:36.120
some code that has lightweight dependencies,


00:23:36.120 --> 00:23:39.720
I don't know if I do this with something like Flask that depends on Vixoic,


00:23:39.720 --> 00:23:41.240
that depends on who knows what,


00:23:41.240 --> 00:23:44.640
right-click and so on, I wouldn't necessarily go too deep.


00:23:44.640 --> 00:23:46.440
But for things that are smallish,


00:23:46.440 --> 00:23:49.200
What you can do is you can set up a vendorize.toml file,


00:23:49.200 --> 00:23:51.280
and then in here just list the packages,


00:23:51.280 --> 00:23:52.360
and you give it a location.


00:23:52.360 --> 00:23:56.540
You say I wanted to go for my project into underscore vendor in this example,


00:23:56.540 --> 00:23:57.640
but that could be whatever.


00:23:57.640 --> 00:24:00.000
Then you just run vendorize,


00:24:00.000 --> 00:24:04.680
Python-vendorize in the working directory where that toml file is.


00:24:04.680 --> 00:24:10.160
What it'll do is it'll actually copy the package details over for that project.


00:24:10.160 --> 00:24:13.240
Then in your code, you just say from underscore vendor,


00:24:13.240 --> 00:24:16.600
import package name, six requests, whatever.


00:24:16.600 --> 00:24:17.300
>> Interesting.


00:24:17.300 --> 00:24:18.320
>> It's interesting, right?


00:24:18.320 --> 00:24:18.760
>> Yeah.


00:24:18.760 --> 00:24:23.480
>> Yeah. So then you've got a program or a package really,


00:24:23.480 --> 00:24:25.760
that has effectively zero dependencies,


00:24:25.760 --> 00:24:28.360
even though you're still using some of these third-party libraries.


00:24:28.360 --> 00:24:30.520
>> Do you know if it'll re-download,


00:24:30.520 --> 00:24:31.760
if you run this again,


00:24:31.760 --> 00:24:33.320
will it re-download them or?


00:24:33.320 --> 00:24:36.440
>> I don't know for sure and I looked,


00:24:36.440 --> 00:24:38.680
I didn't see anything in the documentation one way or the other.


00:24:38.680 --> 00:24:40.780
It is honestly a little sparse on documentation.


00:24:40.780 --> 00:24:42.080
>> This is an interesting idea.


00:24:42.080 --> 00:24:47.280
Actually, this does happen whether people like it or not,


00:24:47.280 --> 00:24:54.520
and it's completely legitimate according to a lot of the licensing.


00:24:54.520 --> 00:24:57.560
But for commercial projects,


00:24:57.560 --> 00:25:03.080
this is very common that I don't want to go out and pull things from pip all the time.


00:25:03.080 --> 00:25:07.640
I want to just have things local so that they're just built locally.


00:25:07.640 --> 00:25:11.800
>> It might not be for just to avoid the pip install.


00:25:11.800 --> 00:25:15.760
It might be that you want extreme control over what's shipped and you don't want


00:25:15.760 --> 00:25:20.120
something that might happen to that package coming down through pip and breaking your code.


00:25:20.120 --> 00:25:23.040
Even if you pin it, you know, you might want to just have more control.


00:25:23.040 --> 00:25:23.680
>> Right.


00:25:23.680 --> 00:25:27.120
Or a decision that somebody takes the project in a completely different


00:25:27.120 --> 00:25:28.200
direction that you don't want.


00:25:28.200 --> 00:25:31.800
It's like, this is a very hard fork sometimes.


00:25:31.800 --> 00:25:32.760
>> Yeah.


00:25:32.760 --> 00:25:37.440
I suspect rerunning Python-Vendorize will re-download it, but I don't know for sure.


00:25:37.440 --> 00:25:38.280
Brandon, go ahead.


00:25:38.280 --> 00:25:40.280
>> Can you pin versions in this?


00:25:40.480 --> 00:25:43.920
>> Well, it looks like the packages in the vendorized.toml,


00:25:43.920 --> 00:25:45.600
it doesn't say that you can do versions,


00:25:45.600 --> 00:25:48.360
but I was guessing here,


00:25:48.360 --> 00:25:50.120
I'm thinking that you can probably pin them.


00:25:50.120 --> 00:25:55.040
>> Yeah. I'm just guessing that it passes whatever that string is over to pip.


00:25:55.040 --> 00:25:58.320
>> Yeah, that's what I was thinking as well. So probably you can.


00:25:58.320 --> 00:26:00.920
>> We'll have to try it out. Somebody can tell us if we're wrong.


00:26:00.920 --> 00:26:02.680
>> Felix is right there with you, Brandon,


00:26:02.680 --> 00:26:04.360
asking do you know of any specified version.


00:26:04.360 --> 00:26:05.560
I don't know. Like I said,


00:26:05.560 --> 00:26:08.000
it doesn't say in the docs about it,


00:26:08.000 --> 00:26:10.060
but yeah, it's a small project,


00:26:10.060 --> 00:26:11.520
but I think it's an interesting idea


00:26:11.520 --> 00:26:12.820
and it could be, you know,


00:26:12.820 --> 00:26:14.820
if you just have these real simple dependencies


00:26:14.820 --> 00:26:15.660
and you're like, ah,


00:26:15.660 --> 00:26:17.260
we're gonna have to create environments


00:26:17.260 --> 00:26:18.780
and have all these complicated instructions


00:26:18.780 --> 00:26:20.700
because of, you know, a few little files,


00:26:20.700 --> 00:26:22.620
like just, here's a nice way to do that.


00:26:22.620 --> 00:26:23.980
Obviously you can do it yourself, right?


00:26:23.980 --> 00:26:26.780
But here's a more repeatable type of way.


00:26:26.780 --> 00:26:28.580
Cool, all right, Brandon, take us out.


00:26:28.580 --> 00:26:29.420
What's your last one?


00:26:29.420 --> 00:26:32.220
- Yeah, so there's a newer project out there


00:26:32.220 --> 00:26:34.060
called Supabase.


00:26:34.060 --> 00:26:36.380
I feel really weird saying the name Supabase.


00:26:36.380 --> 00:26:37.940
(laughing)


00:26:37.940 --> 00:26:40.020
- You gotta say it with an attitude.


00:26:40.020 --> 00:26:41.820
It sounds like a car audio product.


00:26:41.820 --> 00:26:43.260
I'm gonna go put a super bass in my car.


00:26:43.260 --> 00:26:45.300
But basically what it is, sorry.


00:26:45.300 --> 00:26:46.420
(laughing)


00:26:46.420 --> 00:26:48.220
- When you're doing a query, it's like.


00:26:48.220 --> 00:26:50.460
(laughing)


00:26:50.460 --> 00:26:53.460
- But yeah, so they tout themselves


00:26:53.460 --> 00:26:56.340
as an open source Firebase alternative.


00:26:56.340 --> 00:26:58.300
So if you've ever done a lot of JavaScript


00:26:58.300 --> 00:27:00.260
or been friends with JavaScript developers,


00:27:00.260 --> 00:27:01.540
a lot of people use Firebase


00:27:01.540 --> 00:27:04.020
because it provides authentication.


00:27:04.020 --> 00:27:07.020
I believe they're more of a NoSQL database.


00:27:07.020 --> 00:27:08.980
Real time updates, so if you subscribe


00:27:08.980 --> 00:27:12.740
to database changes, your app will change based on if it,


00:27:12.740 --> 00:27:14.740
you know, something changes.


00:27:14.740 --> 00:27:18.880
So what Superbase is doing is something kind of similar,


00:27:18.880 --> 00:27:23.020
but they are running basically a Postgres database for you.


00:27:23.020 --> 00:27:25.460
And then they've got different open source projects


00:27:25.460 --> 00:27:27.060
that are wrapping it.


00:27:27.060 --> 00:27:29.060
So they have the authentication part of,


00:27:29.060 --> 00:27:31.340
which they have a wrap around the GoTo library


00:27:31.340 --> 00:27:33.880
from Netlify for handling authentication.


00:27:33.880 --> 00:27:35.600
So if you want to have authentication for your app,


00:27:35.600 --> 00:27:39.500
You can easily do first name or email password,


00:27:39.500 --> 00:27:42.360
just email that sends an authentication link to the email.


00:27:42.360 --> 00:27:45.220
They have an extensive list of OAuth 2 providers.


00:27:45.220 --> 00:27:46.840
So if you want to add OAuth 2,


00:27:46.840 --> 00:27:49.040
they handle all that for you.


00:27:49.040 --> 00:27:53.300
>> Yeah. So the main idea of this database is like,


00:27:53.300 --> 00:27:56.080
I want to have a front-end JavaScript framework,


00:27:56.080 --> 00:27:57.920
maybe hosted on the back-end by Python.


00:27:57.920 --> 00:28:02.840
But then I just wanted to have a database access over an API,


00:28:02.840 --> 00:28:05.120
just like the entire CRUD story,


00:28:05.120 --> 00:28:08.400
And all of a sudden you run into all these challenges of offline,


00:28:08.400 --> 00:28:11.520
of authentication and stuff. And that's what this is


00:28:11.520 --> 00:28:13.040
mostly focused on, right?


00:28:13.040 --> 00:28:18.280
Yeah, so they have a package that gets, you can use it called Postgres.


00:28:18.280 --> 00:28:19.960
I can't say it.


00:28:19.960 --> 00:28:23.800
It's a wrap around Postgres that basically gives you


00:28:23.800 --> 00:28:27.000
an API to your Postgres database that you don't have to write.


00:28:27.000 --> 00:28:31.200
And they implement that in a way that, you know, you can just like you said, make those HTTP calls


00:28:31.200 --> 00:28:35.720
to write, read, to basically do your card operations to your database.


00:28:35.720 --> 00:28:40.720
And what's nice is whenever you update your database, they automatically generate the API documentation for you.


00:28:40.720 --> 00:28:43.840
So you're not writing any controllers, any services or anything to do that.


00:28:43.840 --> 00:28:45.120
It's just provided by them.


00:28:45.120 --> 00:28:50.000
And like you said, it looks like it's definitely a JavaScript thing, but they're actually just released a


00:28:50.000 --> 00:28:52.240
Python library for it. They show up right now.


00:28:52.240 --> 00:28:54.320
Superbase-py.


00:28:54.320 --> 00:28:55.040
Yeah.


00:28:55.040 --> 00:28:58.640
So your snake has base.


00:28:58.640 --> 00:29:02.640
Anyways, so it's currently, I believe, in alpha.


00:29:02.640 --> 00:29:04.640
So I wouldn't suggest using it in like


00:29:04.640 --> 00:29:06.240
an enterprise application.


00:29:06.240 --> 00:29:08.240
But it's definitely something to try, you know, play around with


00:29:08.240 --> 00:29:10.240
if you want to deploy to do authentication


00:29:10.240 --> 00:29:12.240
access to a Postgres database.


00:29:12.240 --> 00:29:15.240
It was nice, you know, they give you the Postgres database,


00:29:15.240 --> 00:29:16.840
but you don't actually have to access it


00:29:16.840 --> 00:29:18.840
through their terminal where their UI,


00:29:18.840 --> 00:29:21.440
you can connect to it through, you know, whatever you use for your database.


00:29:21.440 --> 00:29:24.640
And yeah, going along the no internet development,


00:29:24.640 --> 00:29:26.640
they also have a Sufa-based local


00:29:26.640 --> 00:29:28.120
you can run locally so you don't need internet


00:29:28.120 --> 00:29:29.120
to do your development.


00:29:29.120 --> 00:29:31.360
So if you lose power or you wanna get on a plane


00:29:31.360 --> 00:29:32.640
or something, you can still do your work.


00:29:32.640 --> 00:29:34.780
- Yeah, this is super cool.


00:29:34.780 --> 00:29:37.280
And one of the things that's interesting here


00:29:37.280 --> 00:29:39.760
is the subscribing to the real time changes, right?


00:29:39.760 --> 00:29:43.720
That's pretty unique, especially over a remote API.


00:29:43.720 --> 00:29:46.360
So if you've got some front end


00:29:46.360 --> 00:29:48.840
and you want everyone to see those changes,


00:29:48.840 --> 00:29:50.560
possibly, guess you could even do this


00:29:50.560 --> 00:29:54.520
in like a Qt or a WX Python app or even a Terminal app,


00:29:54.520 --> 00:29:56.600
But you might even wanna just say,


00:29:56.600 --> 00:29:58.720
I've got a FastAPI app and I'm gonna fire up


00:29:58.720 --> 00:30:00.400
a web socket there so all the clients


00:30:00.400 --> 00:30:02.320
just get the changes streamed down.


00:30:02.320 --> 00:30:04.880
So the changes stream to you and then they kind of


00:30:04.880 --> 00:30:07.840
like multiplex on out to all the people watching.


00:30:07.840 --> 00:30:08.680
That'd be neat.


00:30:08.680 --> 00:30:09.520
- Yeah, I was thinking something like,


00:30:09.520 --> 00:30:11.600
I was curious if you could set up like an AWS Lambda


00:30:11.600 --> 00:30:13.280
so where someone changes and you need to


00:30:13.280 --> 00:30:14.760
send out a notification email or something


00:30:14.760 --> 00:30:16.000
to get hooked up to that and it would just


00:30:16.000 --> 00:30:17.120
kick that off for you.


00:30:17.120 --> 00:30:18.040
- Oh yeah.


00:30:18.040 --> 00:30:18.920
- So things like that.


00:30:18.920 --> 00:30:19.800
- Yeah, that's a good find.


00:30:19.800 --> 00:30:23.400
I had not heard about Superbase but it does look super.


00:30:23.400 --> 00:30:25.040
- Yeah, it looks really useful actually.


00:30:25.040 --> 00:30:26.200
Do you know what the story is?


00:30:26.200 --> 00:30:27.600
So what I'm looking at over here,


00:30:27.600 --> 00:30:30.520
they talk about, okay, so here's how you specify


00:30:30.520 --> 00:30:34.560
your API endpoint at app.supabase.io.


00:30:34.560 --> 00:30:36.740
Is there, and it's in this open source thing,


00:30:36.740 --> 00:30:39.260
but there's probably some database as a service


00:30:39.260 --> 00:30:41.880
or something equivalent that I maybe sign up for,


00:30:41.880 --> 00:30:44.840
or I pay for, do you know what the story is around that?


00:30:44.840 --> 00:30:46.800
I don't know, I mean, surely they are not running


00:30:46.800 --> 00:30:48.080
the database for the world for free.


00:30:48.080 --> 00:30:49.680
They gotta charge at least bandwidth.


00:30:49.680 --> 00:30:51.280
- Yeah, so that's the interesting thing.


00:30:51.280 --> 00:30:53.920
So there's a, their pricing model is a little confusing.


00:30:53.920 --> 00:30:56.280
I know that, I feel like they've gotten some funding.


00:30:56.280 --> 00:30:58.880
And I don't know how they're going to plan


00:30:58.880 --> 00:30:59.720
to make money with this.


00:30:59.720 --> 00:31:02.920
The pricing that they have is like $25 a project a month.


00:31:02.920 --> 00:31:04.920
And that gives you unlimited API calls,


00:31:04.920 --> 00:31:08.640
real-time functionality, eight gigabytes of database space.


00:31:08.640 --> 00:31:10.420
I mean, I don't know who they're using


00:31:10.420 --> 00:31:11.760
for their database provider.


00:31:11.760 --> 00:31:13.360
I can't imagine they have a data center somewhere


00:31:13.360 --> 00:31:14.520
where they're running it, but.


00:31:14.520 --> 00:31:17.160
- Yeah, it's probably on top of some cloud somewhere.


00:31:17.160 --> 00:31:18.000
- Yeah.


00:31:18.000 --> 00:31:21.020
- They do have a zero dollars per month version.


00:31:21.020 --> 00:31:21.860
- Yeah. - Yeah.


00:31:21.860 --> 00:31:23.860
- It's nice to get your project up and going, so.


00:31:23.860 --> 00:31:24.980
- Yeah, very nice.


00:31:24.980 --> 00:31:25.820
That's an excellent one.


00:31:25.820 --> 00:31:28.620
All right, well, I think that's it for our six items.


00:31:28.620 --> 00:31:30.500
Brian, you got anything else you wanna throw out extra,


00:31:30.500 --> 00:31:31.860
you wanna throw out there for everyone?


00:31:31.860 --> 00:31:34.740
- Yeah, I mean, we had Simon Wilson on recently,


00:31:34.740 --> 00:31:37.260
and he just released a post


00:31:37.260 --> 00:31:40.620
about the baked data architecture pattern,


00:31:40.620 --> 00:31:43.580
and that's, if you know what he's up to,


00:31:43.580 --> 00:31:46.300
this isn't surprising, but it's a nice write-up.


00:31:46.300 --> 00:31:49.420
Baked data is bundling a read-only copy of your data


00:31:49.420 --> 00:31:51.580
alongside the code for your application


00:31:51.580 --> 00:31:53.260
as part of the same deployment.


00:31:53.260 --> 00:31:55.740
And it's just an interesting and neat write up


00:31:55.740 --> 00:31:58.060
and it's good to go have a read.


00:31:58.060 --> 00:32:01.300
- Yeah, it says, "Most dynamic sites keep their code


00:32:01.300 --> 00:32:02.180
"and data separate.


00:32:02.180 --> 00:32:03.920
"Code runs on the server and it's stored in


00:32:03.920 --> 00:32:04.980
"like Postgres or Mongo.


00:32:04.980 --> 00:32:06.620
"With baked data, the data is deployed


00:32:06.620 --> 00:32:08.340
"as part of the application bundle."


00:32:08.340 --> 00:32:09.380
Interesting. - Okay.


00:32:09.380 --> 00:32:10.940
- Yeah, and then also on the live stream,


00:32:10.940 --> 00:32:13.240
Tim Pogue is doing real-time research for us.


00:32:13.240 --> 00:32:14.080
Thank you.


00:32:14.080 --> 00:32:15.720
It looks like you were able to do a pin


00:32:15.720 --> 00:32:18.340
similar to as you would with Pip


00:32:18.340 --> 00:32:20.140
with the Python vendorize.


00:32:20.140 --> 00:32:21.420
So yeah, awesome, thanks.


00:32:21.420 --> 00:32:22.300
Appreciate that.


00:32:22.300 --> 00:32:23.720
Brandon, anything else you wanna throw out


00:32:23.720 --> 00:32:25.660
for people while we're here?


00:32:25.660 --> 00:32:26.500
- No, not really.


00:32:26.500 --> 00:32:29.620
I guess maybe a little bit of self-promotion if I could.


00:32:29.620 --> 00:32:32.980
I'm currently working on a side project called Released.


00:32:32.980 --> 00:32:35.860
It's at released.sh.


00:32:35.860 --> 00:32:38.460
Basically what it is, it's working on a tool


00:32:38.460 --> 00:32:40.380
to automate release notes for companies.


00:32:40.380 --> 00:32:41.980
I've noticed a lot of places,


00:32:41.980 --> 00:32:43.580
when they have releases, they need to go out


00:32:43.580 --> 00:32:45.420
and curate all these release notes


00:32:45.420 --> 00:32:47.580
and have somebody manually do this work


00:32:47.580 --> 00:32:49.820
It takes hours upon hours every release.


00:32:49.820 --> 00:32:51.540
So I'm gonna try to automate that


00:32:51.540 --> 00:32:53.780
and make it easier for people.


00:32:53.780 --> 00:32:56.260
- That looks like a great project and nice web design.


00:32:56.260 --> 00:32:57.100
Well done.


00:32:57.100 --> 00:32:58.100
- Thank you, thank you.


00:32:58.100 --> 00:33:00.700
Tailwind CSS, if you haven't tried it, give it a shot.


00:33:00.700 --> 00:33:01.540
(laughing)


00:33:01.540 --> 00:33:03.140
- Hearing good things about Tailwind.


00:33:03.140 --> 00:33:05.860
So many good things, must learn.


00:33:05.860 --> 00:33:07.420
All right, speaking of must learn,


00:33:07.420 --> 00:33:10.020
one must be cautious when learning it turns out


00:33:10.020 --> 00:33:12.900
because if we study the circle of AI life,


00:33:12.900 --> 00:33:16.460
there's this great cartoon here on devhumor.com.


00:33:16.460 --> 00:33:18.060
So there's the circle of AI life,


00:33:18.060 --> 00:33:19.380
and it's got these little pictures


00:33:19.380 --> 00:33:21.380
of how humanity progresses.


00:33:21.380 --> 00:33:23.340
So there's some two humans sitting here


00:33:23.340 --> 00:33:25.100
analyzing neural networks.


00:33:25.100 --> 00:33:26.620
It says, "Human researches AI,"


00:33:26.620 --> 00:33:29.180
and then they're celebrating near a quantum computer.


00:33:29.180 --> 00:33:31.100
"Humanity perfects AI."


00:33:31.100 --> 00:33:33.820
Then AI perfects itself with lots of lightning.


00:33:33.820 --> 00:33:35.600
"AI enslaves humanity."


00:33:35.600 --> 00:33:36.500
There's pyramids.


00:33:36.500 --> 00:33:38.480
"A solar flare disables the AI."


00:33:38.480 --> 00:33:40.700
And then there's humans worshiping a sun god.


00:33:40.700 --> 00:33:42.220
Humanity worships the sun god.


00:33:42.220 --> 00:33:43.060
(both laughing)


00:33:43.060 --> 00:33:43.900
And we start over.


00:33:43.900 --> 00:33:46.220
(both laughing)


00:33:46.220 --> 00:33:47.740
There's our joke for the week.


00:33:47.740 --> 00:33:48.740
>> It's good.


00:33:48.740 --> 00:33:49.740
Thanks.


00:33:49.740 --> 00:33:50.740
>> Yeah.


00:33:50.740 --> 00:33:51.740
>> Awesome.


00:33:51.740 --> 00:33:52.740
>> Yeah, yeah.


00:33:52.740 --> 00:33:53.740
It's a warning.


00:33:53.740 --> 00:33:54.740
It's humorous and ominous.


00:33:54.740 --> 00:33:55.740
>> The singularity is coming.


00:33:55.740 --> 00:33:56.740
Anyway.


00:33:56.740 --> 00:33:57.740
>> Awesome.


00:33:57.740 --> 00:33:58.740
>> Thanks, Brandon, for coming on the show.


00:33:58.740 --> 00:33:59.740
It was fun.


00:33:59.740 --> 00:34:00.740
>> Yes, thanks for having me.


00:34:00.740 --> 00:34:01.740
>> Yeah, it was great to have you here, Brandon, Brian.


00:34:01.740 --> 00:34:02.740
Good to chat with you all.


00:34:02.740 --> 00:34:03.740
And thank you, everyone.


00:34:03.740 --> 00:34:04.740
Bye.


00:34:04.740 --> 00:34:05.740
>> Bye.


00:34:05.740 --> 00:34:06.740
>> Thanks for listening to Python Bytes.


00:34:06.740 --> 00:34:07.740
Follow the show on Twitter via @pythonbytes.


00:34:07.740 --> 00:34:08.740
That's Python Bytes as in B-Y-T-E-S.


00:34:08.740 --> 00:34:09.740
Get the full show notes over at Python Bytes.com.


00:34:09.740 --> 00:34:10.740
>> Bye.


00:34:10.740 --> 00:34:11.740
>> Bye.


00:34:11.740 --> 00:34:12.740
>> Bye.


00:34:12.740 --> 00:34:18.580
in BYTES. Get the full show notes over at pythonbytes.fm. If you have a news item we should


00:34:18.580 --> 00:34:23.380
cover, just visit pythonbytes.fm and click submit in the nav bar. We're always on the lookout for


00:34:23.380 --> 00:34:27.540
sharing something cool. If you want to join us for the live recording, just visit the website and


00:34:27.540 --> 00:34:33.060
click live stream to get notified of when our next episode goes live. That's usually happening at


00:34:33.060 --> 00:34:38.740
noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aukin, this is Michael


00:34:38.740 --> 00:34:42.620
Michael Kennedy, thank you for listening and sharing this podcast with your friends and

