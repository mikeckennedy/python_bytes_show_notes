
00:00:00.000 --> 00:00:04.640
Hey everyone, Michael here. I want to take a quick moment for an editorial comment before we get to


00:00:04.640 --> 00:00:09.840
this week's show. On the last episode, we covered a story from Bloomberg about China implanting


00:00:09.840 --> 00:00:14.800
hardware hacking devices into motherboards for servers. Since that article came out,


00:00:14.800 --> 00:00:19.520
there's been a lot of pushback from the organizations named Amazon, Apple, and others.


00:00:19.520 --> 00:00:24.640
And there's been a few articles that raised some doubts about the veracity of the original Bloomberg


00:00:24.640 --> 00:00:30.280
I'm linking to an article in Forbes called "Doubts Swirl About Bloomberg's China


00:00:30.280 --> 00:00:32.000
Tip Hack Report."


00:00:32.000 --> 00:00:36.840
This doesn't mean the original article is false or implausible, but it may be.


00:00:36.840 --> 00:00:39.840
And because of that, I felt like I should add this disclaimer and warning about the


00:00:39.840 --> 00:00:42.080
coverage we had on episode 98.


00:00:42.080 --> 00:00:43.640
Sorry about that.


00:00:43.640 --> 00:00:48.880
Now let's get on to some Python-focused topics on this episode with Brian.


00:00:48.880 --> 00:00:52.760
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:52.760 --> 00:00:53.820
to your earbuds.


00:00:53.820 --> 00:00:58.340
This is episode 99, recorded October 10th, 2018.


00:00:58.340 --> 00:00:59.180
I'm Michael Kennedy.


00:00:59.180 --> 00:01:00.000
- I'm Brian Okken.


00:01:00.000 --> 00:01:02.260
- Brian, we're coming up really close on episode 100.


00:01:02.260 --> 00:01:04.380
- Yeah, one more, this is 99, wow.


00:01:04.380 --> 00:01:06.540
- Yeah, we're gonna have to do something cool for that one.


00:01:06.540 --> 00:01:08.300
But for now, I think it is super cool


00:01:08.300 --> 00:01:10.460
that DigitalOcean is sponsoring the show,


00:01:10.460 --> 00:01:12.460
not just for today, but for the rest of the year.


00:01:12.460 --> 00:01:13.500
- That is very cool.


00:01:13.500 --> 00:01:14.500
- Yeah, thank you, DigitalOcean.


00:01:14.500 --> 00:01:17.140
Check them out at pythonbytes.fm/digitalocean.


00:01:17.140 --> 00:01:20.100
Get $100 credit for new users.


00:01:20.100 --> 00:01:22.860
I think I had said this before as a joke to you,


00:01:22.860 --> 00:01:24.860
And you didn't necessarily agree with it.


00:01:24.860 --> 00:01:29.860
But your first item here may belial some agreement,


00:01:29.860 --> 00:01:31.820
that if you have a problem and you solve it


00:01:31.820 --> 00:01:33.900
with a regular expression, you now have two problems.


00:01:33.900 --> 00:01:36.020
- Yes, yeah, well, definitely.


00:01:36.020 --> 00:01:38.220
We think code, at least you have two things to support.


00:01:38.220 --> 00:01:39.060
- Yeah, that's right.


00:01:39.060 --> 00:01:40.100
But you've run across some library


00:01:40.100 --> 00:01:42.460
that's actually really awesome for like simple,


00:01:42.460 --> 00:01:44.940
what you might think of as Redge X problems.


00:01:44.940 --> 00:01:47.380
- I got this from a tweet from Kenneth Reitz.


00:01:47.380 --> 00:01:50.780
He's like said, "Oh yeah, everybody, by the way,


00:01:50.780 --> 00:01:53.420
parse is a thing or something like that.


00:01:53.420 --> 00:01:57.140
Parse is a library that the tagline is,


00:01:57.140 --> 00:01:59.220
it's the opposite of format.


00:01:59.220 --> 00:02:01.660
In the general sense of it,


00:02:01.660 --> 00:02:03.160
there's a bunch of things you can do.


00:02:03.160 --> 00:02:04.600
You can parse strings,


00:02:04.600 --> 00:02:06.300
you can search inside strings,


00:02:06.300 --> 00:02:10.300
you can find all the element patterns or whatever from a string.


00:02:10.300 --> 00:02:14.580
But you give it both the string that you're searching,


00:02:14.580 --> 00:02:19.800
and then also instead of a regular expression for what to search for,


00:02:19.800 --> 00:02:24.840
basically the same string but with parts of it replaced with the curly braces


00:02:24.840 --> 00:02:27.200
or something like that to say


00:02:27.200 --> 00:02:29.760
if I were to have printed it with format


00:02:29.760 --> 00:02:32.680
using this string I would have gotten this output


00:02:32.680 --> 00:02:36.160
and reverse that out and then you can get the results out to see


00:02:36.160 --> 00:02:37.040
all the stuff.


00:02:37.040 --> 00:02:39.040
That's awesome. So you could say like


00:02:39.040 --> 00:02:41.440
this is episode curly curly


00:02:41.440 --> 00:02:44.360
of Python bytes and then you could actually parse it


00:02:44.360 --> 00:02:46.360
and that little curly curly would say


00:02:46.360 --> 00:02:53.000
give you the number, well I guess the first example would give you a string and you could put a colon d and it would actually give you an integer 99.


00:02:53.000 --> 00:03:00.000
Yeah, definitely. That is cool. It has some like cool things too because if you were going to do that and pass in elements of a dictionary,


00:03:00.000 --> 00:03:06.700
you can have this thing return basically things that look like dictionaries with named elements and


00:03:06.700 --> 00:03:09.400
both positional elements and named elements.


00:03:09.400 --> 00:03:14.560
And it's pretty neat. And I was playing with it like the for each or the find all.


00:03:14.560 --> 00:03:17.560
So you can you put that in a loop to say like,


00:03:17.560 --> 00:03:20.760
for all the elements in and I gave it a big file,


00:03:20.760 --> 00:03:24.660
finding a whole bunch of colon or a CSV file or something


00:03:24.660 --> 00:03:28.060
and pulling out elements and it works really good.


00:03:28.060 --> 00:03:32.360
And the thing I like about it is it's more readable than a regular expression.


00:03:32.360 --> 00:03:34.760
So yeah, for sure, if you've got something,


00:03:34.760 --> 00:03:38.860
something simple like that, that you've got multiple people that have to be able to support it.


00:03:38.860 --> 00:03:40.180
I think this is a good choice.


00:03:40.180 --> 00:03:40.940
>> Yeah, I love it.


00:03:40.940 --> 00:03:42.060
It's a really cool example.


00:03:42.060 --> 00:03:45.420
And you can tell that it's probably written by somebody who understands


00:03:45.420 --> 00:03:47.540
Regex well under the covers.


00:03:47.540 --> 00:03:50.380
But you don't have to think about it, because it has a compiled mode and


00:03:50.380 --> 00:03:52.180
things like that, which Regex often do.


00:03:52.180 --> 00:03:55.820
>> Yeah, and you can pass in a pattern apparently, but


00:03:55.820 --> 00:03:59.220
if you're going to figure out patterns, then why not just use Regex?


00:03:59.220 --> 00:04:00.620
So, yeah.


00:04:00.620 --> 00:04:01.500
>> Yeah, quite cool.


00:04:01.500 --> 00:04:02.260
>> Anyway. >> I like it.


00:04:02.260 --> 00:04:05.300
I'm going to see if I can use it next time I need something like this.


00:04:05.300 --> 00:04:08.540
So this next one I want to talk about has to do with GUIs.


00:04:08.540 --> 00:04:09.540
Can you believe it?


00:04:09.540 --> 00:04:11.420
- Yeah, we've covered that a few times.


00:04:11.420 --> 00:04:12.420
- I think we have.


00:04:12.420 --> 00:04:14.920
So this one is called the FMAN Build System


00:04:14.920 --> 00:04:18.580
and it comes from the project


00:04:18.580 --> 00:04:21.460
which is like a dual pane file explorer


00:04:21.460 --> 00:04:24.260
for Windows and Mac and so on from Michael Herman.


00:04:24.260 --> 00:04:25.500
So it's a pretty cool project


00:04:25.500 --> 00:04:29.140
but I'm not interested so much in covering the desktop app


00:04:29.140 --> 00:04:30.340
that he built per se


00:04:30.340 --> 00:04:32.380
but the tool to build it.


00:04:32.380 --> 00:04:34.180
So the FMAN Build System, right?


00:04:34.180 --> 00:04:36.600
So what it lets you do is it lets you create GUI apps


00:04:36.600 --> 00:04:39.000
for Windows, Mac, and Linux.


00:04:39.000 --> 00:04:42.100
As in, here is my .app file or my .exe.


00:04:42.100 --> 00:04:44.740
Go click it. In fact, it gives you an installer.


00:04:44.740 --> 00:04:46.080
Right? And it like,


00:04:46.080 --> 00:04:48.580
a proper installer for Windows.


00:04:48.580 --> 00:04:50.240
One of those, you know,


00:04:50.240 --> 00:04:54.240
drag here and has like the applications folder for a .app file,


00:04:54.240 --> 00:04:55.920
disk image and macOS.


00:04:55.920 --> 00:04:57.520
This is nice.


00:04:57.520 --> 00:05:00.160
Wow, that's kind of like one of the missing pieces that we've


00:05:00.160 --> 00:05:03.360
had for packaging and sending out things.


00:05:03.360 --> 00:05:05.660
It really is, right? It's quite cool. So,


00:05:05.660 --> 00:05:09.160
Like I said, Windows, Mac, and Linux works really well.


00:05:09.160 --> 00:05:11.660
It's what he uses for his project.


00:05:11.660 --> 00:05:16.000
It's open source, so you can use it for free on open source projects.


00:05:16.000 --> 00:05:19.760
It's licensed under the GPL for commercial stuff,


00:05:19.760 --> 00:05:22.760
so you can basically buy a license for it.


00:05:22.760 --> 00:05:26.960
Now, if you're using Qt, you also have to buy a license for Qt,


00:05:26.960 --> 00:05:29.760
and that's kind of a complicated story.


00:05:29.760 --> 00:05:31.960
Looking to figure out a little bit more about that.


00:05:31.960 --> 00:05:34.160
Honestly, I don't really know the full story there.


00:05:34.160 --> 00:05:36.920
It's sort of I got this commercial side and this open source side,


00:05:36.920 --> 00:05:38.760
but at least if you're doing open source stuff,


00:05:38.760 --> 00:05:40.080
I think it's a really cool option.


00:05:40.080 --> 00:05:43.800
>> Yeah, I like that. Even the idea of being able to,


00:05:43.800 --> 00:05:49.760
matching the model, similar model is what Qt's model is a decent idea.


00:05:49.760 --> 00:05:52.480
>> Yeah, and if you're at the point as to package Qt apps,


00:05:52.480 --> 00:05:54.520
it's almost probably unavoidable.


00:05:54.520 --> 00:05:56.880
>> Yeah, definitely. I also like,


00:05:56.880 --> 00:05:59.840
I got to give a shout out to Michael Herman.


00:05:59.840 --> 00:06:10.840
It's not trivial to say, take a piece of your project and pull it off as he did with the build system so that it can be usable for other people.


00:06:10.840 --> 00:06:11.840
That's pretty cool.


00:06:11.840 --> 00:06:15.840
>> Yeah, absolutely. So, JSON, not a whole lot of validation there, is there?


00:06:15.840 --> 00:06:22.840
>> Well, I think there's a lot of ways to validate JSON, but I don't know if everybody does.


00:06:22.840 --> 00:06:25.880
I don't think I've ever in all the times where I've used


00:06:25.880 --> 00:06:28.280
Jason to talk with different parts of the


00:06:28.280 --> 00:06:30.280
application, I usually


00:06:30.280 --> 00:06:32.280
just kind of assume it's all working, right?


00:06:32.280 --> 00:06:33.080
Yeah, for sure.


00:06:33.080 --> 00:06:35.880
But there are validators out there and this one,


00:06:35.880 --> 00:06:38.280
the one I want to cover is, has been


00:06:38.280 --> 00:06:39.960
recommended by a few people.


00:06:39.960 --> 00:06:43.440
It's, the documentation is a little light. So I think


00:06:43.440 --> 00:06:45.440
it's called fast Jason schema.


00:06:45.440 --> 00:06:47.440
But the name is descriptive.


00:06:47.440 --> 00:06:48.440
Yeah, definitely.


00:06:48.440 --> 00:06:52.440
And I'm not sure what the, so one of the articles I'm going to link to


00:06:52.440 --> 00:06:57.000
It's got four different libraries, including FastJSON Schema,


00:06:57.000 --> 00:06:59.920
and I'm not sure what they were validating.


00:06:59.920 --> 00:07:02.160
It's way faster than everything else.


00:07:02.160 --> 00:07:04.320
So JSON Schema takes five seconds,


00:07:04.320 --> 00:07:05.860
JSON Spec takes seven,


00:07:05.860 --> 00:07:11.320
and then his was the FastJSON Schema, 250 milliseconds.


00:07:11.320 --> 00:07:17.240
I'm not sure how big of a dataset this is to have anything take five seconds or seven seconds.


00:07:17.240 --> 00:07:19.880
>> Yeah. It must be the same size one would hope.


00:07:19.880 --> 00:07:21.880
>> Yeah. It's a compiling scheme.


00:07:21.880 --> 00:07:23.920
So the kind of the scheme is,


00:07:23.920 --> 00:07:26.720
it's a pretty simple interface.


00:07:26.720 --> 00:07:29.600
I think, like I said, the documentation is a little slim,


00:07:29.600 --> 00:07:33.920
but you describe a schema in terms of what the types


00:07:33.920 --> 00:07:37.480
of each element is supposed to be like.


00:07:37.480 --> 00:07:39.360
And I think there's some optional keywords


00:07:39.360 --> 00:07:41.760
and stuff like that you can throw in there.


00:07:41.760 --> 00:07:43.520
And then you compile it,


00:07:43.520 --> 00:07:46.160
you compile that into your own validator.


00:07:46.160 --> 00:07:49.240
So this is like we were talking about with Regex,


00:07:49.240 --> 00:07:52.000
You compile it so that it runs faster.


00:07:52.000 --> 00:07:52.840
And that's what this does.


00:07:52.840 --> 00:07:57.360
It just comes up, you compile your own validator,


00:07:57.360 --> 00:07:59.960
and then you can use that to validate


00:07:59.960 --> 00:08:01.200
any strings that you want.


00:08:01.200 --> 00:08:02.200
- Yeah, it's cool.


00:08:02.200 --> 00:08:07.200
Yeah, so JSON schema is a separate specification,


00:08:07.200 --> 00:08:11.240
and you can even learn about it at json-schema.org


00:08:11.240 --> 00:08:14.240
that allows you to create a secondary JSON file


00:08:14.240 --> 00:08:18.960
that is the type system for the original data exchange.


00:08:18.960 --> 00:08:21.000
Right, so if I have like an address,


00:08:21.000 --> 00:08:23.240
I could say, okay, here my schema is,


00:08:23.240 --> 00:08:25.920
this is an object that has properties like post office box


00:08:25.920 --> 00:08:29.120
and extended address, those are strings and so on.


00:08:29.120 --> 00:08:32.500
You can even have like dependencies and stuff like so,


00:08:32.500 --> 00:08:35.120
the post office box must be a valid street address,


00:08:35.120 --> 00:08:37.680
which is defined, you know, elsewhere.


00:08:37.680 --> 00:08:38.640
So this is pretty cool.


00:08:38.640 --> 00:08:42.720
You take those files, you feed it to this validator


00:08:42.720 --> 00:08:44.840
and it'll take anything you get back from say,


00:08:44.840 --> 00:08:46.040
a web service or something and say,


00:08:46.040 --> 00:08:47.280
yeah, this is valid or not.


00:08:47.280 --> 00:08:49.080
- And this project's been around for a while,


00:08:49.080 --> 00:08:53.340
but the big news lately is that there's multiple drafts


00:08:53.340 --> 00:08:56.920
of this JSON schema, and the tool we're talking about


00:08:56.920 --> 00:08:59.360
covers drafts four, six, and seven.


00:08:59.360 --> 00:09:00.640
- Right, which is pretty nice.


00:09:00.640 --> 00:09:02.040
Yeah, very cool, so there was other ones,


00:09:02.040 --> 00:09:03.640
and they were apparently kind of stale,


00:09:03.640 --> 00:09:05.160
didn't cover the latest drafts and things.


00:09:05.160 --> 00:09:08.140
So, nice find, and it's way, way faster.


00:09:08.140 --> 00:09:09.160
Now, before we get to the next one,


00:09:09.160 --> 00:09:12.360
I want to tell you about a cool feature at DigitalOcean.


00:09:12.360 --> 00:09:14.640
So at DigitalOcean, you can, of course,


00:09:14.640 --> 00:09:16.800
log in and say, create me what they call a droplet,


00:09:16.800 --> 00:09:21.040
virtual machine or various other things, load balancers, firewalls, and so on.


00:09:21.040 --> 00:09:24.560
And it'll spin up your machine and off you go. And you get some choices like


00:09:24.560 --> 00:09:29.600
various versions of Ubuntu and other stuff. But what you can do, if you'd like, is you can create


00:09:29.600 --> 00:09:34.880
your own local virtual machine of whatever you want, some kind of Linux, as long as you can


00:09:34.880 --> 00:09:38.800
install a few dependencies that it needs to interact with the DigitalOcean infrastructure


00:09:38.800 --> 00:09:43.440
and upload that. And from then on, you can just click a button and say, "Create me


00:09:43.440 --> 00:09:46.380
my super special private server


00:09:46.380 --> 00:09:47.480
as many as you want


00:09:47.480 --> 00:09:48.580
with their API or whatever.


00:09:48.580 --> 00:09:49.580
Very cool.


00:09:49.580 --> 00:09:50.280
Definitely.


00:09:50.280 --> 00:09:52.580
Yeah, pretty cool. So if you want more control


00:09:52.580 --> 00:09:54.580
over how your virtual machines get created


00:09:54.580 --> 00:09:56.020
and what they even look like,


00:09:56.020 --> 00:09:59.720
check them out at pythonbytes.fm/digitalocean.


00:09:59.720 --> 00:10:01.460
New users get $100 credit,


00:10:01.460 --> 00:10:02.920
and they've got a bunch of cool stuff


00:10:02.920 --> 00:10:05.300
that you can do with all their infrastructure.


00:10:05.300 --> 00:10:08.260
Speaking of infrastructure, a lot of people use IPython


00:10:08.260 --> 00:10:10.600
these days in the whole data science space, right?


00:10:10.600 --> 00:10:11.600
Yeah, very big.


00:10:11.600 --> 00:10:15.040
And people might be tired of me going on and on about async.


00:10:15.040 --> 00:10:19.440
I know some people are not a fan, but it is just so powerful.


00:10:19.440 --> 00:10:22.720
And when it's used at the right time, very, very nice.


00:10:22.720 --> 00:10:27.280
But until recently, IPython was a thing that you put Python code into.


00:10:27.280 --> 00:10:33.760
And async was a thing that you did in files, you know, applications that executed Python code.


00:10:33.760 --> 00:10:35.120
But they didn't really go together.


00:10:35.120 --> 00:10:38.000
Yeah, I'm still trying to get my head around them going together.


00:10:38.000 --> 00:10:38.960
But yeah.


00:10:39.920 --> 00:10:44.240
So here's the thing, if I have an async library that I want to use,


00:10:44.240 --> 00:10:48.960
basically, the only way to use it in IPython previously, I believe,


00:10:48.960 --> 00:10:53.600
was to spin up all the infrastructure to sort of host the async loop yourself,


00:10:53.600 --> 00:10:56.080
which is like five or six lines to just call the function.


00:10:56.080 --> 00:10:58.720
So now, in IPython, you can just say,


00:10:58.720 --> 00:10:59.840
"Oh, wait."


00:10:59.840 --> 00:11:01.920
Give it a function, and it just runs it automatically.


00:11:01.920 --> 00:11:03.600
Oh, okay. That's cool.


00:11:03.600 --> 00:11:06.560
So, yeah, IPython 7 is out,


00:11:06.560 --> 00:11:12.960
And one of the big features that it has is the interactive shell now supports async and await,


00:11:12.960 --> 00:11:13.840
which is really cool.


00:11:13.840 --> 00:11:15.280
Yeah, that's very neat.


00:11:15.280 --> 00:11:19.680
Yeah, so this one came to us from Nick Spirit. Thank you, Nick, for sending it in.


00:11:19.680 --> 00:11:22.960
And this is written by Mathias Boussigny. And he is the guy


00:11:22.960 --> 00:11:28.960
who originally cloned the term legacy Python for the world, as far as I can tell.


00:11:28.960 --> 00:11:31.600
Yeah, I think you're right.


00:11:31.600 --> 00:11:35.920
Yeah, he wrote a cool article called "Planning an Early Death for Python 2" or something,


00:11:35.920 --> 00:11:37.740
and friendly like that,


00:11:37.740 --> 00:11:39.680
and talked about referring to it as legacy Python,


00:11:39.680 --> 00:11:41.120
which I think is great.


00:11:41.120 --> 00:11:42.260
So he also wrote this,


00:11:42.260 --> 00:11:45.360
and he works on IPython and whatnot quite a bit,


00:11:45.360 --> 00:11:50.000
talks about how when IPython dropped support for Python 2,


00:11:50.000 --> 00:11:53.360
how are they able to sort of make these features possible?


00:11:53.360 --> 00:11:55.620
If you want to support these types of things,


00:11:55.620 --> 00:11:57.760
it was much harder to do so


00:11:57.760 --> 00:12:01.340
if you want to use a Python 3.5 feature,


00:12:01.340 --> 00:12:02.800
but you also want to support Python 2.


00:12:02.800 --> 00:12:05.320
So it's cool how they talk a lot about that.


00:12:05.320 --> 00:12:09.080
And I also think the open source community is a little, is sort of changing.


00:12:09.080 --> 00:12:13.680
We, we had this idea that kind of from, from I think other commercial


00:12:13.680 --> 00:12:18.380
applications that you should support as many platforms as possible, or like


00:12:18.380 --> 00:12:21.700
your library should support as many versions of Python as possible.


00:12:21.700 --> 00:12:22.000
Right.


00:12:22.000 --> 00:12:23.840
If it gets a port two, one, that'd be awesome.


00:12:23.840 --> 00:12:31.180
But, but at the same time, there's a reality that if you only support the


00:12:31.180 --> 00:12:36.220
more recent versions, you can clean up your code and have it be an easier code


00:12:36.220 --> 00:12:40.460
base for other developers to work in and increase your open source


00:12:40.460 --> 00:12:43.660
contributions. And I think that's a very real thing. And I think that's one of


00:12:43.660 --> 00:12:47.420
like, like you said, it's one of the things that they probably addressed with


00:12:47.420 --> 00:12:48.300
Python.


00:12:48.300 --> 00:12:52.660
Yeah, definitely. It sounds like it here, when they talked about doing the same


00:12:52.660 --> 00:12:56.460
thing for Django was we were able to delete a bunch of code. And the easiest


00:12:56.460 --> 00:13:01.100
way to maintain code is to not have it. Yeah. So yeah, it's a great point. And


00:13:01.140 --> 00:13:01.940
Here's another example.


00:13:01.940 --> 00:13:04.740
A lot of people are using iPython to teach Python.


00:13:04.740 --> 00:13:08.740
And whether or not that there's a debate as to whether or not that's a good thing.


00:13:08.740 --> 00:13:12.040
But at least now they'll be able to teach async.


00:13:12.040 --> 00:13:13.040
Yeah, that's a good point.


00:13:13.040 --> 00:13:15.740
Yeah, it's there's a lot of presentations and stuff done there.


00:13:15.740 --> 00:13:17.340
And now it's nice and easy to call it.


00:13:17.340 --> 00:13:17.840
Super cool.


00:13:17.840 --> 00:13:18.140
Yeah.


00:13:18.140 --> 00:13:18.440
All right.


00:13:18.440 --> 00:13:19.440
What's the next one you got for us?


00:13:19.440 --> 00:13:21.240
I have a library called Molten.


00:13:21.240 --> 00:13:22.840
And Molten is...


00:13:22.840 --> 00:13:24.540
Is it for studying volcanoes or what is this?


00:13:24.540 --> 00:13:26.940
It's an API framework.


00:13:26.940 --> 00:13:30.540
So the link we're going to include has a little video demo on it.


00:13:30.540 --> 00:13:37.180
But it's like a rest API framework used similar to like API star.


00:13:37.180 --> 00:13:53.220
And in fact, the kind of the motivation, there's a motivation page that talks about how API star is kind of awesome. But there's some of the implementation like a hook model for middleware that this author didn't quite like.


00:13:53.460 --> 00:14:08.800
So they took inspiration from API star and rocket, which is a rust framework, and tried to make this one and it's a Python three only because they're they're leveraging type hints and type annotation.


00:14:08.800 --> 00:14:10.560
Yeah, in a really nice way.


00:14:10.560 --> 00:14:20.280
It's really clean looking. There's a you can implement a an API fairly quickly. But there's also built in speaking of schema validation.


00:14:20.560 --> 00:14:24.200
There is schema validation built into the system


00:14:24.200 --> 00:14:26.200
so that you know


00:14:26.200 --> 00:14:29.960
the code that you're writing to deal with requests or


00:14:29.960 --> 00:14:31.080
the coming in,


00:14:31.080 --> 00:14:33.600
they're already going to be valid before it even hits you.


00:14:33.600 --> 00:14:36.480
So you won't be hit with invalid data,


00:14:36.480 --> 00:14:37.280
which is pretty cool.


00:14:37.280 --> 00:14:39.040
Yeah, there's a lot of cool validation.


00:14:39.040 --> 00:14:41.640
So for example, the hello world type method


00:14:41.640 --> 00:14:44.320
for a web view method


00:14:44.320 --> 00:14:48.400
is just like def hello and then name colon str age colon int.


00:14:48.400 --> 00:14:52.740
and it actually, you know, grabs the value, say, out of the URL or somewhere,


00:14:52.740 --> 00:14:54.900
puts it in there, converts it to an integer,


00:14:54.900 --> 00:15:00.200
and passes it, and you don't have to figure out, you know, how do I go get that from the route match data


00:15:00.200 --> 00:15:02.580
or other weird data sources like that, so that's really cool.


00:15:02.580 --> 00:15:07.700
And then they take it farther, you say, okay, well, you could have like a string and an integer in the function,


00:15:07.700 --> 00:15:11.420
or if you've got something more interesting,


00:15:11.420 --> 00:15:14.080
you could define an actual class


00:15:14.080 --> 00:15:18.340
that has a little decorator, so it's a schema, like it has an ID that's an optional int,


00:15:18.340 --> 00:15:23.480
that it has a description that has a status that can be, you know, certain values


00:15:23.480 --> 00:15:25.480
and has default values, all sorts of cool stuff.


00:15:25.480 --> 00:15:30.180
And then you just say, this web method takes this, like,


00:15:30.180 --> 00:15:32.840
we have a to do example as a class, right?


00:15:32.840 --> 00:15:35.640
It takes a to do item and it automatically pulls that out,


00:15:35.640 --> 00:15:38.780
does the validation and check in. Yeah, I'm loving this. This is great.


00:15:38.780 --> 00:15:42.340
Yeah, and also you can define the schema on the output as well


00:15:42.340 --> 00:15:43.780
to make sure that you're complying.


00:15:43.780 --> 00:15:45.380
I think it's kind of neat.


00:15:45.380 --> 00:15:47.880
And the other, there's a couple other neat features of it.


00:15:47.880 --> 00:15:51.480
or at least features of it, whether or not you like it.


00:15:51.480 --> 00:15:55.840
The middleware is a functional programming-based middleware.


00:15:55.840 --> 00:15:57.680
And a lot of the different pieces,


00:15:57.680 --> 00:16:00.800
like if you want to have a database management,


00:16:00.800 --> 00:16:05.080
they're all set up to allow them to be isolated easily.


00:16:05.080 --> 00:16:08.240
So using dependency injection, it's a thing,


00:16:08.240 --> 00:16:10.440
and it allows you to sort of test


00:16:10.440 --> 00:16:12.480
your different components by themselves


00:16:12.480 --> 00:16:13.880
or swap out new ones.


00:16:13.880 --> 00:16:14.920
So it's fun.


00:16:14.920 --> 00:16:15.760
- Yeah, it looks really cool.


00:16:15.760 --> 00:16:17.820
I'm well done on that project, you guys.


00:16:17.820 --> 00:16:21.340
I think it looks like something if I was building an API,


00:16:21.340 --> 00:16:23.340
I might be pretty excited about using.


00:16:23.340 --> 00:16:26.700
So I wanna round out this episode with something


00:16:26.700 --> 00:16:29.260
a little fluffy, but nice to just remind everybody


00:16:29.260 --> 00:16:33.060
why we're here and why we use the tools


00:16:33.060 --> 00:16:34.780
and the technology that we do.


00:16:34.780 --> 00:16:38.260
So this last one is called a Python love letter.


00:16:38.260 --> 00:16:40.020
- Well, I love Python.


00:16:40.020 --> 00:16:41.020
- Yeah, I love it too.


00:16:41.020 --> 00:16:43.940
So this was actually a thing posted to a Reddit thread


00:16:43.940 --> 00:16:46.020
by a guy who's pretty new to Python.


00:16:46.020 --> 00:16:48.080
And he posted it, it said, "Dear Python,


00:16:48.080 --> 00:16:49.620
"where have you been all my life?"


00:16:49.620 --> 00:16:50.460
Right?


00:16:50.460 --> 00:16:54.180
And the thing he posted was pretty interesting,


00:16:54.180 --> 00:16:56.020
but also the comments, right?


00:16:56.020 --> 00:16:57.260
There are many, many comments,


00:16:57.260 --> 00:16:59.780
and just all the people either agreeing


00:16:59.780 --> 00:17:00.700
or disagreeing or whatever.


00:17:00.700 --> 00:17:02.220
So the guy says, "Look, I'm not a developer,


00:17:02.220 --> 00:17:03.800
"but I've been teeing with programming


00:17:03.800 --> 00:17:07.860
"for Basic and Perl and whatnot."


00:17:07.860 --> 00:17:09.420
And for some reason he decided,


00:17:09.420 --> 00:17:11.140
you know, he's done with shell scripts,


00:17:11.140 --> 00:17:11.980
so we've heard that before, right?


00:17:11.980 --> 00:17:14.340
He's gonna go write some Python.


00:17:14.340 --> 00:17:17.200
and said, "Look, I went and I learned Python,


00:17:17.200 --> 00:17:20.040
"and no, I didn't go from zero to production in a day,


00:17:20.040 --> 00:17:21.580
"but if my coworkers will leave me alone,


00:17:21.580 --> 00:17:24.120
"I might be in production tomorrow."


00:17:24.120 --> 00:17:26.420
Which is, you know, I think that's just,


00:17:26.420 --> 00:17:28.660
like, kind of sums up a lot of what happens


00:17:28.660 --> 00:17:30.160
in the Python space. - Yeah, that's neat.


00:17:30.160 --> 00:17:31.620
Just kind of a fun story.


00:17:31.620 --> 00:17:32.800
- Yeah, it's definitely a fun story.


00:17:32.800 --> 00:17:34.520
A couple of the comments that came up


00:17:34.520 --> 00:17:36.200
that I thought were interesting were,


00:17:36.200 --> 00:17:38.760
one person said, "Welcome to the club.


00:17:38.760 --> 00:17:40.200
"I came up on C++.


00:17:40.200 --> 00:17:43.600
"My job highly trained me in C and assembly,


00:17:43.600 --> 00:17:47.000
And every project I touch, can't we do 90% of this,


00:17:47.000 --> 00:17:48.320
95% of this in Python?


00:17:48.320 --> 00:17:49.880
And we do, right?


00:17:49.880 --> 00:17:53.120
We don't need inline assembly most of the time.


00:17:53.120 --> 00:17:55.380
Another person said, I have a chip on my shoulder.


00:17:55.380 --> 00:17:57.640
I want to do things the hard way and understand them.


00:17:57.640 --> 00:18:00.400
So I went C++, 'cause that's real programming, dang it.


00:18:00.400 --> 00:18:03.280
But later, after suffering a lot,


00:18:03.280 --> 00:18:05.540
I kind of learned that doing things smarter


00:18:05.540 --> 00:18:08.560
was way better than doing the hard way and whatnot.


00:18:08.560 --> 00:18:12.200
So he loves, sort of found his way to Python.


00:18:12.200 --> 00:18:13.600
I guess one other person said,


00:18:13.600 --> 00:18:16.080
I felt exactly the same way, decided to learn it.


00:18:16.080 --> 00:18:17.120
What a breath of fresh air.


00:18:17.120 --> 00:18:18.560
Sadly, there are a few things in my life


00:18:18.560 --> 00:18:19.560
that make me feel like this.


00:18:19.560 --> 00:18:22.960
Python and Bitcoin give me the same levels of enjoyment.


00:18:22.960 --> 00:18:26.040
I've used Java, Groovy, Scala, Objective-C,


00:18:26.040 --> 00:18:30.360
C, C++, et cetera, and nothing feels as good as Python does.


00:18:30.360 --> 00:18:32.880
So definitely, definitely cool.


00:18:32.880 --> 00:18:35.920
And then this person, this is what was notable to me, Brian,


00:18:35.920 --> 00:18:37.560
closed out his comment, is,


00:18:37.560 --> 00:18:39.700
hell, my next two planned tattoos


00:18:39.700 --> 00:18:42.160
are Bitcoin and Python logos on my wrist.


00:18:42.160 --> 00:18:43.000
Way to go.


00:18:43.000 --> 00:18:44.000
That's some commitment.


00:18:44.000 --> 00:18:48.960
The Python, fine, but you're probably going to regret the Bitcoin one.


00:18:48.960 --> 00:18:54.240
Is there an abstract cryptocurrency that is going to encapsulate whatever comes next?


00:18:54.240 --> 00:18:55.740
I agree. I agree.


00:18:55.740 --> 00:19:00.460
Anyway, I thought that was fun and it just reminds us what a great community and ecosystem.


00:19:00.460 --> 00:19:03.200
Yeah, definitely. I also just wanted to say,


00:19:03.200 --> 00:19:06.700
assembly code, real man, program in bits.


00:19:06.700 --> 00:19:09.860
That's right. 0110, baby.


00:19:09.860 --> 00:19:12.580
So, anyway.


00:19:12.580 --> 00:19:14.100
Alright, so that's for our official items.


00:19:14.100 --> 00:19:16.420
But I see you have one little extra one here


00:19:16.420 --> 00:19:21.300
that will also bring fun, excitement, and joy to any presentation


00:19:21.300 --> 00:19:25.380
if you're just sitting down with a co-worker or even at like a meetup, right?


00:19:25.380 --> 00:19:32.300
Yeah, and it's, Oliver Bestwalter got me excited about this and it's Power Mode.


00:19:32.300 --> 00:19:35.260
And I'm linking to something called Power Mode 2,


00:19:35.260 --> 00:19:37.860
which is a plugin for PyCharm,


00:19:37.860 --> 00:19:41.020
but there's power modes in a couple different,


00:19:41.020 --> 00:19:43.420
it started in Atom, I think,


00:19:43.420 --> 00:19:45.860
and people have probably done it other places.


00:19:45.860 --> 00:19:47.820
It just makes programming more fun.


00:19:47.820 --> 00:19:48.900
- This is funny.


00:19:48.900 --> 00:19:50.200
You introduced this to me,


00:19:50.200 --> 00:19:53.940
so let me just sort of give people a little description.


00:19:53.940 --> 00:19:56.820
So imagine as you start typing,


00:19:56.820 --> 00:19:59.420
it's kind of like a bit like a comic book.


00:19:59.420 --> 00:20:02.420
The faster you type, the more excited your editor gets.


00:20:02.420 --> 00:20:04.440
If you copy and like duplicate a method,


00:20:04.440 --> 00:20:06.880
like a big bam pow thing will pop out,


00:20:06.880 --> 00:20:09.140
sparks shoot off of your cursor,


00:20:09.140 --> 00:20:11.840
the faster you type, the more intense it gets.


00:20:11.840 --> 00:20:14.280
Yeah, it's super, super productive and awesome.


00:20:14.280 --> 00:20:16.620
(laughing)


00:20:16.620 --> 00:20:19.960
- I've left it, I've turned off the shaking screen,


00:20:19.960 --> 00:20:24.320
which is a little unsettling to me, and the flames,


00:20:24.320 --> 00:20:26.000
but the rest of it, the sparks flying


00:20:26.000 --> 00:20:27.840
and everything like that, I've been using it


00:20:27.840 --> 00:20:28.680
for like a week or a week and a half.


00:20:28.680 --> 00:20:30.480
- You leave it on all the time?


00:20:30.480 --> 00:20:31.320
- Yeah.


00:20:31.320 --> 00:20:32.160
(laughing)


00:20:32.160 --> 00:20:33.000
- That's awesome.


00:20:34.280 --> 00:20:37.160
because I really like it when I copy and paste and it goes BAM!


00:20:37.160 --> 00:20:38.360
I know. BAM! POW!


00:20:38.360 --> 00:20:39.480
That's nice.


00:20:39.480 --> 00:20:40.120
That's cool.


00:20:40.120 --> 00:20:42.920
Yeah, Power Mode, if you're using PyJarm, is definitely fun to check out.


00:20:42.920 --> 00:20:44.560
It's got the link in the show notes. Cool.


00:20:44.560 --> 00:20:44.880
Okay.


00:20:44.880 --> 00:20:47.320
All right. Well, that's a fun one to close it out for sure.


00:20:47.320 --> 00:20:48.120
All right. Thanks, Brian.


00:20:48.120 --> 00:20:49.360
And chat with you.


00:20:49.360 --> 00:20:49.880
Yeah, thank you.


00:20:49.880 --> 00:20:51.160
Yeah, chat with you next time.


00:20:51.160 --> 00:20:51.640
Bye, everyone.


00:20:51.640 --> 00:20:52.440
Okay. Bye.


00:20:52.440 --> 00:20:54.800
Thank you for listening to Python Bytes.


00:20:54.800 --> 00:20:57.280
Follow the show on Twitter via @PythonBytes.


00:20:57.280 --> 00:21:00.400
That's Python Bytes as in B-Y-T-E-S.


00:21:00.400 --> 00:21:03.800
And get the full show notes at PythonBytes.fm.


00:21:03.800 --> 00:21:07.880
If you have a news item you want featured, just visit PythonBytes.fm and send it our way.


00:21:07.880 --> 00:21:11.000
We're always on the lookout for sharing something cool.


00:21:11.000 --> 00:21:14.360
On behalf of myself and Brian Auchin, this is Michael Kennedy.


00:21:14.360 --> 00:21:17.640
Thank you for listening and sharing this podcast with your friends and colleagues.

