WEBVTT

00:00:00.001 --> 00:00:04.760
Hey everyone, Michael here. I want to take a quick moment for an editorial comment before we get to

00:00:04.760 --> 00:00:09.820
this week's show. On the last episode, we covered a story from Bloomberg about China implanting

00:00:09.820 --> 00:00:14.880
hardware hacking devices into motherboards for servers. Since that article came out,

00:00:14.880 --> 00:00:19.080
there's been a lot of pushback from the organizations named Amazon, Apple, and others.

00:00:19.080 --> 00:00:24.380
And there's been a few articles that raised some doubts about the veracity of the original Bloomberg

00:00:24.380 --> 00:00:31.340
article. I'm linking to an article in Forbes called Doubt Swirl About Bloomberg's China Tip Hack Report.

00:00:31.340 --> 00:00:37.440
This doesn't mean the original article is false or implausible, but it may be. And because of that,

00:00:37.440 --> 00:00:41.460
I felt like I should add this disclaimer and warning about the coverage we had on episode 98.

00:00:41.460 --> 00:00:47.800
Sorry about that. Now, let's get on to some Python-focused topics on this episode with Brian.

00:00:47.800 --> 00:00:53.380
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:53.380 --> 00:00:58.900
This is episode 99, recorded October 10th, 2018. I'm Michael Kennedy.

00:00:58.900 --> 00:00:59.680
I'm Brian Okken.

00:00:59.680 --> 00:01:02.020
Brian, we're coming up really close on episode 100.

00:01:02.020 --> 00:01:04.200
Yeah, one more. This is 99. Wow.

00:01:04.200 --> 00:01:05.840
Yeah, we're going to have to do something cool for that one.

00:01:05.840 --> 00:01:10.380
But for now, I think it is super cool that DigitalOcean is sponsoring the show,

00:01:10.380 --> 00:01:12.240
not just for today, but for the rest of the year.

00:01:12.240 --> 00:01:13.320
That is very cool.

00:01:13.320 --> 00:01:16.700
Yeah, thank you, DigitalOcean. Check them out at pythonbytes.fm/DigitalOcean.

00:01:16.700 --> 00:01:19.000
Get $100 credit for new users.

00:01:19.780 --> 00:01:24.360
I think I had said this before as a joke to you, and you didn't necessarily agree with it,

00:01:24.360 --> 00:01:32.620
but your first item here may belial some agreement that if you have a problem and you solve it with a regular expression,

00:01:32.620 --> 00:01:33.560
you now have two problems.

00:01:33.560 --> 00:01:35.560
Yes. Yeah. Well, definitely.

00:01:35.560 --> 00:01:38.020
Within code, at least you have two things to support.

00:01:38.020 --> 00:01:38.840
Yeah, that's right.

00:01:38.980 --> 00:01:44.680
But you've run across some library that's actually really awesome for simple, what you might think of as red jacks problems.

00:01:44.680 --> 00:01:47.120
I got this from a tweet from Kenneth Reitz.

00:01:47.120 --> 00:01:53.220
He said, oh, yeah, everybody, by the way, parse is a thing or something like that.

00:01:53.220 --> 00:01:58.520
Parse is a library that the tagline is it's the opposite of format.

00:01:59.180 --> 00:02:03.140
So in the general sense of it, there's a bunch of things you can do.

00:02:03.140 --> 00:02:04.520
You can parse strings.

00:02:04.520 --> 00:02:06.220
You can search inside strings.

00:02:06.220 --> 00:02:10.060
You can find all the element patterns or whatever from a string.

00:02:10.400 --> 00:02:19.420
But you give it both the string that you're searching and then also a instead of a regular expression for what to search for,

00:02:19.420 --> 00:02:26.980
basically the same string, but with parts of it replaced with the curly braces or something like that to say,

00:02:26.980 --> 00:02:33.980
if I were to have printed it with format using this string, I would have gotten this output and reverse that out.

00:02:33.980 --> 00:02:36.980
And then you can get the results out to see all the stuff.

00:02:36.980 --> 00:02:37.600
That's awesome.

00:02:37.700 --> 00:02:42.500
So you could say like, this is episode curly curly of Python bytes.

00:02:42.500 --> 00:02:44.140
And then you could actually parse it.

00:02:44.140 --> 00:02:47.340
And that little curly curly would say, give you the number.

00:02:47.340 --> 00:02:52.380
Well, I guess the first example would give you a string and you could put a colon D and it would actually give you an integer 99.

00:02:52.380 --> 00:02:53.640
Yeah, definitely.

00:02:53.640 --> 00:02:54.420
That is cool.

00:02:54.420 --> 00:02:59.540
It has some like cool things too, because if you were going to do that and pass in elements of a dictionary,

00:02:59.540 --> 00:03:05.860
you're going to have this thing return basically things that look like dictionaries with named elements

00:03:05.860 --> 00:03:09.060
and both positional elements and named elements.

00:03:09.060 --> 00:03:11.020
And it's pretty neat.

00:03:11.020 --> 00:03:14.360
And I was playing with it like the for each or the find all.

00:03:14.360 --> 00:03:20.540
So you can put that in a loop to say like for all the elements in and I gave it a big file,

00:03:20.540 --> 00:03:26.280
finding a whole bunch of colon or a CSV file or something and pulling out elements.

00:03:26.280 --> 00:03:28.020
And it works really good.

00:03:28.020 --> 00:03:32.000
And the thing I like about it is it's more readable than a regular expression.

00:03:32.800 --> 00:03:38.900
So if you've got something simple like that, that you've got multiple people that have to be able to support it,

00:03:38.900 --> 00:03:40.120
I think this is a good choice.

00:03:40.120 --> 00:03:40.960
Yeah, I love it.

00:03:40.960 --> 00:03:41.940
It's a really cool example.

00:03:41.940 --> 00:03:47.100
And you can tell that it's probably written by somebody who understands Regex well under the covers,

00:03:47.100 --> 00:03:50.940
but you don't have to think about it because it has like a compiled mode and things like that,

00:03:50.940 --> 00:03:52.040
which Regex often do.

00:03:52.040 --> 00:03:57.780
Yeah, and you can pass in a pattern apparently, but if you're going to figure out patterns,

00:03:57.780 --> 00:03:59.160
then why not just use Regex?

00:03:59.160 --> 00:04:00.260
So yeah.

00:04:00.260 --> 00:04:01.320
Yeah, quite cool.

00:04:01.320 --> 00:04:01.740
Anyway.

00:04:01.740 --> 00:04:02.280
I like it.

00:04:02.280 --> 00:04:04.940
I'm going to see if I can use it next time I need something like this.

00:04:04.940 --> 00:04:08.540
So this next one I want to talk about has to do with GUIs.

00:04:08.540 --> 00:04:09.120
Can you believe it?

00:04:09.120 --> 00:04:11.340
Yeah, we've covered that a few times.

00:04:11.340 --> 00:04:12.240
I think we have.

00:04:12.460 --> 00:04:18.500
So this one is called the Fman Build System, and it comes from the project,

00:04:18.500 --> 00:04:24.140
which is like a dual pane file explorer for Windows and Mac and so on from Michael Herman.

00:04:24.140 --> 00:04:30.200
So it's a pretty cool project, but I'm not interested so much in covering the desktop app that he built per se,

00:04:30.200 --> 00:04:32.440
but the tool to build it.

00:04:32.440 --> 00:04:34.180
So the Fman Build System, right?

00:04:34.180 --> 00:04:38.800
So what it lets you do is it lets you create GUI apps for Windows, Mac, and Linux,

00:04:38.800 --> 00:04:41.960
as in here is my .app file or my .exe.

00:04:41.960 --> 00:04:42.800
Go click it.

00:04:42.800 --> 00:04:45.200
In fact, it gives you an installer, right?

00:04:45.200 --> 00:04:51.460
And like a proper installer for Windows, one of those, you know, drag here,

00:04:51.460 --> 00:04:55.760
and it has like the applications folder for a .app file, disk image, and macOS.

00:04:55.760 --> 00:04:57.480
I mean, this is nice.

00:04:57.480 --> 00:05:03.240
Wow, that's kind of like one of the missing pieces that we've had for packaging and sending out things.

00:05:03.240 --> 00:05:04.180
It really is, right?

00:05:04.180 --> 00:05:05.140
It's quite cool.

00:05:05.140 --> 00:05:08.880
So like I said, Windows, Mac, and Linux works really well.

00:05:08.880 --> 00:05:11.260
It's what he uses for his project.

00:05:11.460 --> 00:05:15.720
It's open source, so you can use it for free on open source projects.

00:05:15.720 --> 00:05:22.380
It's licensed under the GPL for commercial stuff, so you can buy, basically buy a license for it.

00:05:22.380 --> 00:05:29.480
Now, if you're using Qt, you also have to buy a license for Qt, and that's kind of a complicated story.

00:05:29.480 --> 00:05:32.300
Looking to figure out a little bit more about that, honestly.

00:05:32.300 --> 00:05:33.800
I don't really know the full story there.

00:05:34.400 --> 00:05:39.920
It's sort of like I've got this commercial side and this open source side, but at least if you're doing open source stuff, I think it's a really cool option.

00:05:39.920 --> 00:05:40.940
Yeah, I like that.

00:05:40.940 --> 00:05:49.680
Even the idea of being able to, matching the model, similar model as what Qt's model is, is a decent idea.

00:05:49.780 --> 00:05:54.240
Yeah, and if the point is to package Qt apps, it's almost probably unavoidable.

00:05:54.240 --> 00:05:55.460
Yeah, definitely.

00:05:55.460 --> 00:05:59.380
And I also like, I got to give a shout out to Michael Herman.

00:06:00.020 --> 00:06:10.780
It's not trivial to say, take a piece of your project and pull it off, as he did with the build system, so that it can be usable for other people.

00:06:10.780 --> 00:06:11.600
That's pretty cool.

00:06:11.600 --> 00:06:11.740
Yeah, absolutely.

00:06:11.740 --> 00:06:15.640
So, JSON, not a whole lot of validation there, is there?

00:06:15.640 --> 00:06:22.620
Well, I think there's a lot of ways to validate JSON, but I don't know if everybody does.

00:06:22.620 --> 00:06:32.280
I don't think I've ever, in all the times where I've used JSON to talk with different parts of an application, I usually just kind of assume it's all working right.

00:06:32.280 --> 00:06:32.940
Yeah, for sure.

00:06:32.940 --> 00:06:39.640
But there are validators out there, and this one, the one I want to cover, has been recommended by a few people.

00:06:39.640 --> 00:06:45.280
It's, the documentation is a little light, so I think it's called Fast JSON Schema.

00:06:45.280 --> 00:06:46.360
But the name is descriptive.

00:06:46.360 --> 00:06:48.040
Yeah, definitely.

00:06:48.460 --> 00:06:56.880
And I'm not sure what the, so one of the articles that I'm going to link to has got four different libraries, including Fast JSON Schema.

00:06:56.880 --> 00:06:59.440
And I'm not sure what they were validating.

00:06:59.440 --> 00:07:02.080
It's like way faster than everything else.

00:07:02.080 --> 00:07:04.200
So, JSON Schema takes five seconds.

00:07:04.200 --> 00:07:05.700
JSON Spec takes seven.

00:07:05.700 --> 00:07:10.740
And then his was the Fast JSON Schema, 250 milliseconds.

00:07:10.740 --> 00:07:16.780
And I'm not sure how big of a data set this is to have anything take five seconds or seven seconds.

00:07:17.100 --> 00:07:19.840
Yeah, it must be the same size, one would hope, you know?

00:07:19.840 --> 00:07:21.760
Yeah, it's a compiling scheme.

00:07:21.760 --> 00:07:25.820
So, kind of the scheme is, it's a pretty simple interface.

00:07:25.820 --> 00:07:29.100
I think, like I said, the documentation is a little slim.

00:07:29.100 --> 00:07:36.820
But you describe a schema in terms of what the types of each element is supposed to be like.

00:07:36.820 --> 00:07:41.280
And I think there's some optional keywords and stuff like that you can throw in there.

00:07:41.680 --> 00:07:45.680
And then you compile it, you compile that into your own validator.

00:07:45.680 --> 00:07:51.440
So, this is a, like we were talking about with Regex, you compile it so that it runs faster.

00:07:51.440 --> 00:07:52.760
And that's what this does.

00:07:52.760 --> 00:07:56.940
It just comes up, you compile your own validator.

00:07:56.940 --> 00:08:01.180
And then you can use that to validate any strings that you want.

00:08:01.180 --> 00:08:02.100
Yeah, it's cool.

00:08:02.100 --> 00:08:02.360
Yeah.

00:08:02.360 --> 00:08:06.640
So, JSON Schema is a separate specification.

00:08:06.640 --> 00:08:18.340
And you can even learn by that json-schema.org that allows you to create a secondary JSON file that is the type system for the original data exchange.

00:08:18.840 --> 00:08:23.020
So, if I have like an address, I could say, okay, here my schema is.

00:08:23.020 --> 00:08:26.720
This is an object that has properties like post office box and extended address.

00:08:26.720 --> 00:08:29.060
Those are strings and so on.

00:08:29.060 --> 00:08:32.400
You can even have like dependencies and stuff like so.

00:08:32.400 --> 00:08:36.560
The post office box must be a valid street address, which is defined, you know, elsewhere.

00:08:36.560 --> 00:08:38.580
So, this is pretty cool.

00:08:38.580 --> 00:08:47.180
You take those files, you feed it to this validator, and it'll take anything you get back from, say, a web service or something and say, yeah, this is valid or not.

00:08:47.180 --> 00:08:54.560
And this project's been around for a while, but the big news lately is that there's multiple drafts of this JSON Schema.

00:08:54.560 --> 00:08:59.220
And the tool we're talking about covers drafts 4, 6, and 7.

00:08:59.220 --> 00:09:00.220
Right, which is pretty nice.

00:09:00.220 --> 00:09:00.480
Cool.

00:09:00.480 --> 00:09:01.160
Yeah, very cool.

00:09:01.160 --> 00:09:04.980
So, there was other ones, and they were apparently kind of stale, didn't cover the latest drafts and things.

00:09:04.980 --> 00:09:06.600
So, nice find.

00:09:06.600 --> 00:09:07.640
And it's way, way faster.

00:09:07.640 --> 00:09:11.720
Now, before we get to the next one, I want to tell you about a cool feature at DigitalOcean.

00:09:12.120 --> 00:09:20.840
So, at DigitalOcean, you can, of course, log in and say, create me what they call a droplet, a new virtual machine, or various other things, load balancers, firewalls, and so on.

00:09:20.840 --> 00:09:23.120
And it'll spin up your machine, and off you go.

00:09:23.120 --> 00:09:26.600
And you get some choices, like various versions of Ubuntu and other stuff.

00:09:27.080 --> 00:09:40.380
But what you can do, if you'd like, is you can create your own local virtual machine, whatever you want, some kind of Linux, as long as you can install a few dependencies that it needs to interact with the DigitalOcean infrastructure, and upload that.

00:09:40.380 --> 00:09:48.500
And from then on, you can just click a button and say, create me my super special private server, as many as you want, with your API or whatever.

00:09:48.500 --> 00:09:49.220
Very cool.

00:09:49.220 --> 00:09:50.040
Definitely.

00:09:50.360 --> 00:09:50.820
Yeah, pretty cool.

00:09:50.820 --> 00:09:59.400
So, if you want more control over how your virtual machines get created and what they even look like, check them out at pythonbytes.fm/digitalocean.

00:09:59.400 --> 00:10:01.120
New users get $100 credit.

00:10:01.120 --> 00:10:04.900
And they've got a bunch of cool stuff that you can do with all their infrastructure.

00:10:04.900 --> 00:10:10.560
Speaking of infrastructure, a lot of people use IPython these days in the whole data science space, right?

00:10:10.560 --> 00:10:11.600
Yeah, very big.

00:10:11.600 --> 00:10:14.580
And people might be tired of me going on and on about async.

00:10:14.580 --> 00:10:19.420
I know some people are not a fan, but it's just so powerful.

00:10:19.420 --> 00:10:22.380
And when it's used at the right time, very, very nice.

00:10:22.380 --> 00:10:26.940
But until recently, IPython was a thing that you put Python code into.

00:10:26.940 --> 00:10:33.680
And async was a thing that you did in files, you know, applications that executed Python code.

00:10:33.680 --> 00:10:35.000
But they didn't really go together.

00:10:35.000 --> 00:10:35.440
Yeah.

00:10:35.440 --> 00:10:37.940
I'm still trying to get my head around them going together.

00:10:37.940 --> 00:10:39.060
But yeah.

00:10:39.860 --> 00:10:41.380
So here's the thing.

00:10:41.380 --> 00:10:55.820
If I have an async library that I want to use, basically, the only way to use it in IPython previously, I believe, was to spin up all the infrastructure to sort of host the async loop yourself, which is like five or six lines to just call the function.

00:10:55.820 --> 00:11:01.960
So now in IPython, you can just say, oh, wait, give it a function, and it just runs it automatically.

00:11:01.960 --> 00:11:02.620
Oh, okay.

00:11:02.620 --> 00:11:03.580
That's cool.

00:11:03.580 --> 00:11:04.580
So that's, yeah.

00:11:04.580 --> 00:11:06.320
So IPython 7 is out.

00:11:06.800 --> 00:11:13.820
And one of the big features that it has is the interactive shell now supports async and await, which is really cool.

00:11:13.820 --> 00:11:14.920
Yeah, that's very neat.

00:11:14.920 --> 00:11:15.640
Yeah.

00:11:15.640 --> 00:11:18.320
So this one came to us from Nick Spirit.

00:11:18.320 --> 00:11:19.640
Thank you, Nick, for sending it in.

00:11:19.640 --> 00:11:21.320
And this is written by Matthias Boussignier.

00:11:22.200 --> 00:11:29.080
And he is the guy who originally cloned the term legacy Python for the world, as far as I can tell.

00:11:29.080 --> 00:11:31.600
Yeah, I think you're right.

00:11:31.600 --> 00:11:32.100
Yeah, yeah.

00:11:32.100 --> 00:11:37.280
He wrote a cool article called Planning an Early Death for Python 2 or something, you know, friendly like that.

00:11:37.520 --> 00:11:40.480
And talked about referring to it as legacy Python, which I think is great.

00:11:40.480 --> 00:11:44.900
So he also wrote this, and he works on IPython and whatnot quite a bit.

00:11:44.900 --> 00:11:53.280
Talks about how when IPython drops support for Python 2, how are they able to sort of make these features possible, right?

00:11:53.280 --> 00:12:02.720
If you want to support these types of things, it was much harder to do so if, you know, you want to use a Python 3.5 feature, but you also want to support Python 2.

00:12:02.860 --> 00:12:05.240
So it's cool how they talk a lot about that.

00:12:05.240 --> 00:12:08.920
Yeah, and I also think the open source community is sort of changing.

00:12:08.920 --> 00:12:21.620
We had this idea that kind of from, I think, other commercial applications that you should support as many platforms as possible or, like, your library should support as many versions of Python as possible.

00:12:21.620 --> 00:12:21.980
Right.

00:12:21.980 --> 00:12:23.760
If it could support 2.1, that'd be awesome.

00:12:25.440 --> 00:12:41.000
But at the same time, there's the reality that if you only support the more recent versions, you can clean up your code and have it be an easier code base for other developers to work in and increase your open source contributions.

00:12:41.000 --> 00:12:42.860
And I think that's a very real thing.

00:12:42.860 --> 00:12:48.220
And I think that's one of the, like you said, it's one of the things that they probably addressed with IPython.

00:12:48.220 --> 00:12:49.500
Yeah, definitely.

00:12:49.500 --> 00:12:55.540
It sounds like it here when they talked about doing the same thing for Django was we were able to delete a bunch of code.

00:12:55.540 --> 00:12:58.160
And the easiest way to maintain code is to not have it.

00:12:58.160 --> 00:12:58.780
Yeah.

00:12:58.780 --> 00:13:00.500
So, yeah, it's a great point.

00:13:00.500 --> 00:13:01.860
And here's another example.

00:13:01.860 --> 00:13:04.740
A lot of people are using IPython to teach Python.

00:13:04.740 --> 00:13:08.580
And whether or not that there's a debate as to whether or not that's a good thing.

00:13:08.580 --> 00:13:11.220
But at least now they'll be able to teach async.

00:13:11.220 --> 00:13:13.060
Yeah, that's a good point.

00:13:13.060 --> 00:13:15.640
Yeah, there's a lot of presentations and stuff done there.

00:13:15.640 --> 00:13:17.380
Now it's nice and easy to call it.

00:13:17.380 --> 00:13:17.820
Super cool.

00:13:17.820 --> 00:13:18.080
Yeah.

00:13:18.080 --> 00:13:18.400
All right.

00:13:18.400 --> 00:13:19.460
What's the next one you got for us?

00:13:19.460 --> 00:13:21.040
I have a library called Molten.

00:13:21.040 --> 00:13:22.880
And Molten is...

00:13:22.880 --> 00:13:24.480
Is it for studying volcanoes or what is this?

00:13:24.480 --> 00:13:26.840
It's an API framework.

00:13:26.840 --> 00:13:30.600
So, the link we're going to include has a little video demo on it.

00:13:30.600 --> 00:13:37.020
But it's like a REST API framework used similar to like API Star.

00:13:37.400 --> 00:13:45.720
And in fact, the kind of the motivation, there's a motivation page that talks about how API Star is kind of awesome.

00:13:45.720 --> 00:13:53.160
But there's some of the implementation like a hook model for middleware that this author didn't quite like.

00:13:53.220 --> 00:14:02.340
So, they took inspiration from API Star and Rocket, which is a REST framework, and tried to make this one.

00:14:02.340 --> 00:14:08.660
And it's a Python 3 only because they're leveraging type hints and type annotation.

00:14:08.660 --> 00:14:09.100
Yeah.

00:14:09.100 --> 00:14:10.480
In a really nice way.

00:14:10.640 --> 00:14:11.860
It's really clean looking.

00:14:11.860 --> 00:14:12.960
There's a...

00:14:12.960 --> 00:14:16.160
You can implement an API fairly quickly.

00:14:16.160 --> 00:14:18.720
But there's also built in...

00:14:18.720 --> 00:14:30.840
Speaking of schema validation, there is schema validation built into this system so that you know the code that you're writing to deal with requests or the coming in.

00:14:30.840 --> 00:14:33.540
They're already going to be valid before it even hits you.

00:14:33.540 --> 00:14:37.240
So, you won't be hit with invalid data, which is pretty cool.

00:14:37.240 --> 00:14:37.680
Yeah.

00:14:37.680 --> 00:14:38.880
There's a lot of cool validation.

00:14:39.100 --> 00:14:48.000
So, for example, the hello world type method for a web view method is just like def hello and then name colon stir age colon int.

00:14:48.000 --> 00:14:55.840
And it actually, you know, grabs the value, say, out of the URL or somewhere, puts it in there, converts it to an integer, and passes it.

00:14:55.840 --> 00:15:01.620
And so, you don't have to figure out, you know, how do I go get that from the route match data or other weird data sources like that.

00:15:01.620 --> 00:15:02.340
So, that's really cool.

00:15:02.340 --> 00:15:04.160
And then they take it farther.

00:15:04.160 --> 00:15:07.480
You say, okay, well, you could have like a string and an integer in the function.

00:15:07.780 --> 00:15:15.400
Or if you've got something more interesting, you could define an actual class that has a little decorator.

00:15:15.400 --> 00:15:16.060
It says a schema.

00:15:16.060 --> 00:15:18.060
Like it has an ID that's an optional int.

00:15:18.640 --> 00:15:25.400
That it has a description that has a status that can be, you know, certain values and has default values, all sorts of cool stuff.

00:15:25.400 --> 00:15:32.800
And then you can just say, this web method takes this, like, we have a to-do example as a class, right?

00:15:32.800 --> 00:15:37.240
It takes a to-do item and it automatically pulls it out, does the validation and check-in.

00:15:37.240 --> 00:15:38.360
Yeah, I'm loving this.

00:15:38.360 --> 00:15:38.740
This is great.

00:15:38.860 --> 00:15:43.580
Yeah, and also, you can define the schema on the output as well to make sure that you're complying.

00:15:43.580 --> 00:15:45.320
I think it's kind of neat.

00:15:45.320 --> 00:15:47.820
And the other, there's a couple other neat features of it.

00:15:47.820 --> 00:15:51.060
It's, or at least features of it, whether or not you like it.

00:15:51.440 --> 00:15:55.180
The middleware is a functional programming-based middleware.

00:15:55.180 --> 00:16:04.920
And a lot of the different pieces, like if you want to have a database management, they're all set up to allow them to be isolated easily.

00:16:04.920 --> 00:16:08.120
So using dependency injection, it's a thing.

00:16:08.120 --> 00:16:13.680
And it allows you to sort of test your different components by themselves or swap out new ones.

00:16:13.680 --> 00:16:14.800
So it's fun.

00:16:14.920 --> 00:16:15.580
Yeah, it looks really cool.

00:16:15.580 --> 00:16:17.720
I'm, you know, well done on that project, you guys.

00:16:17.720 --> 00:16:22.820
I think it looks like something if I was building an API, I might be pretty excited about using.

00:16:22.820 --> 00:16:23.160
Yeah.

00:16:23.160 --> 00:16:34.140
So I want to round out this episode with something a little fluffy but nice to just remind everybody why we're here and why we use the tools and the technology that we do.

00:16:34.140 --> 00:16:37.560
So this last one is called a Python love letter.

00:16:37.560 --> 00:16:38.920
Well, I love Python.

00:16:38.920 --> 00:16:40.640
Yeah, I love it too.

00:16:40.840 --> 00:16:45.340
So this was actually a thing posted to a Reddit thread by a guy who's pretty new to Python.

00:16:45.340 --> 00:16:49.420
And he posted, it said, Dear Python, where have you been all my life?

00:16:49.420 --> 00:16:49.820
Right?

00:16:49.820 --> 00:16:55.940
And the thing he posted was pretty interesting, but also the comments, right?

00:16:55.940 --> 00:17:00.540
There are many, many comments and just all the people either agreeing or disagreeing or whatever.

00:17:00.540 --> 00:17:06.920
So the guy says, look, I'm not a developer, but I've been teeing with programming for, you know, Basic and Perl and whatnot.

00:17:07.520 --> 00:17:11.040
And for some reason, he decided, you know, he's done with shell scripts.

00:17:11.040 --> 00:17:12.020
So we've heard that before, right?

00:17:12.020 --> 00:17:13.480
He's going to go write some Python.

00:17:13.480 --> 00:17:16.760
And he said, look, I went and I learned Python.

00:17:16.760 --> 00:17:19.800
And no, I didn't go from zero to production in a day.

00:17:19.800 --> 00:17:23.220
But if my coworkers will leave me alone, I might be in production tomorrow.

00:17:23.220 --> 00:17:28.980
Which is, you know, I think that's just like kind of sums up a lot of what happens in the Python.

00:17:28.980 --> 00:17:29.600
That's neat.

00:17:29.600 --> 00:17:31.440
Just kind of a fun story.

00:17:31.600 --> 00:17:32.640
Yeah, it's definitely a fun story.

00:17:32.640 --> 00:17:38.520
A couple of the comments that came up that I thought were interesting were one person said, welcome to the club.

00:17:38.520 --> 00:17:39.860
I came up on C++.

00:17:39.860 --> 00:17:43.000
My job highly trained me in C and assembly.

00:17:43.000 --> 00:17:48.100
And every project I touch, can't we do 90% of this, 95% of this in Python?

00:17:48.100 --> 00:17:49.820
And we do, right?

00:17:49.820 --> 00:17:52.560
We don't need inline assembly most of the time.

00:17:52.560 --> 00:17:55.260
Another person said, I have a chip on my shoulder.

00:17:55.260 --> 00:17:57.620
I want to do things the hard way and understand them.

00:17:57.620 --> 00:17:59.680
So I went C++ because that's real programming.

00:17:59.680 --> 00:18:00.240
Dang it.

00:18:00.240 --> 00:18:08.340
But later, after suffering a lot, I kind of learned that, you know, doing things smarter was way better than doing the hard way and whatnot.

00:18:08.340 --> 00:18:11.160
So he loves, you know, sort of found his way to Python.

00:18:11.160 --> 00:18:15.060
I guess one other person said, I felt exactly the same way.

00:18:15.060 --> 00:18:15.980
I decided to learn it.

00:18:15.980 --> 00:18:17.040
What a breath of fresh air.

00:18:17.040 --> 00:18:19.520
Sadly, there are a few things in my life that make me feel like this.

00:18:19.520 --> 00:18:22.860
Python and Bitcoin give me the same levels of enjoyment.

00:18:22.860 --> 00:18:25.000
I've used Java, Groovy, Scala.

00:18:25.160 --> 00:18:27.080
Objective C, C++, etc.

00:18:27.080 --> 00:18:30.260
And nothing feels as good as Python does.

00:18:30.260 --> 00:18:32.740
So definitely, definitely cool.

00:18:32.740 --> 00:18:35.340
And then this person, this is what was notable to me, Brian.

00:18:35.340 --> 00:18:41.980
Closed out his comment is, hell, my next two planned tattoos are Bitcoin and Python logos on my wrists.

00:18:41.980 --> 00:18:42.600
Way to go.

00:18:42.600 --> 00:18:43.840
That's some commitment.

00:18:43.840 --> 00:18:48.340
The Python, fine, but you're probably going to regret the Bitcoin one.

00:18:48.340 --> 00:18:54.260
Is there an abstract cryptocurrency that is going to encapsulate like whatever comes next?

00:18:54.260 --> 00:18:54.700
I agree.

00:18:55.060 --> 00:18:55.260
I agree.

00:18:55.260 --> 00:18:57.340
Anyway, I thought that was fun.

00:18:57.340 --> 00:19:00.440
And it just reminds us, you know, what a great community and ecosystem.

00:19:00.440 --> 00:19:01.260
Yeah, definitely.

00:19:01.260 --> 00:19:06.120
I also just wanted to say, assembly code, real man program in bits.

00:19:06.120 --> 00:19:07.900
That's right.

00:19:07.900 --> 00:19:09.420
Zero, one, one, zero, baby.

00:19:09.420 --> 00:19:12.340
Anyway.

00:19:12.740 --> 00:19:12.960
All right.

00:19:12.960 --> 00:19:12.960
All right.

00:19:12.960 --> 00:19:12.980
All right.

00:19:12.980 --> 00:19:14.120
So that's for our official items.

00:19:14.120 --> 00:19:20.540
But I see you have one little extra one here that will also bring fun, excitement, and joy to any presentation.

00:19:21.280 --> 00:19:25.040
If you're just sitting down with a coworker or even at like a meetup.

00:19:25.040 --> 00:19:25.340
Right.

00:19:25.340 --> 00:19:25.700
Yeah.

00:19:25.700 --> 00:19:25.940
Yeah.

00:19:25.940 --> 00:19:31.040
Oliver Best Walter got me excited about this.

00:19:31.040 --> 00:19:32.060
And it's power mode.

00:19:32.320 --> 00:19:37.440
And I'm linking to something called Power Mode 2, which is a plugin for PyCharm.

00:19:37.880 --> 00:19:40.300
But there's power modes in a couple different.

00:19:40.300 --> 00:19:42.640
And it started in Atom, I think.

00:19:42.640 --> 00:19:45.700
And people have probably done it other places.

00:19:45.700 --> 00:19:47.360
It just makes programming more fun.

00:19:47.360 --> 00:19:48.260
This is funny.

00:19:48.260 --> 00:19:50.120
You introduced this to me.

00:19:50.200 --> 00:19:53.400
So let me just sort of give people a little description.

00:19:53.400 --> 00:19:58.960
So imagine as you start typing, it's kind of like a bit like a comic book.

00:19:58.960 --> 00:20:02.320
The faster you type, the more excited your editor gets.

00:20:02.320 --> 00:20:06.640
If you copy and like duplicate a method, like a big bam, pow, thing will pop out.

00:20:06.640 --> 00:20:08.860
Sparks shoot off of your cursor.

00:20:08.860 --> 00:20:10.920
The faster you type, the more intense it gets.

00:20:10.920 --> 00:20:11.980
Yeah.

00:20:11.980 --> 00:20:13.980
It's super, super productive and awesome.

00:20:16.440 --> 00:20:22.500
I've left it, I've turned off the shaking screen, which is a little unsettling to me.

00:20:22.500 --> 00:20:23.760
And the flames.

00:20:23.760 --> 00:20:26.680
But the rest of it, the sparks flying and everything like that.

00:20:26.680 --> 00:20:29.160
I've been using it for like a week or a week and a half.

00:20:29.160 --> 00:20:30.040
You leave it on all the time?

00:20:30.040 --> 00:20:30.880
Yeah.

00:20:30.880 --> 00:20:32.560
That's awesome.

00:20:32.560 --> 00:20:37.100
Because I really like it when I copy and paste and it goes bam.

00:20:37.100 --> 00:20:37.440
I know.

00:20:37.440 --> 00:20:38.320
Bam, pow.

00:20:38.320 --> 00:20:38.680
That's nice.

00:20:38.680 --> 00:20:39.980
That's cool.

00:20:39.980 --> 00:20:40.340
Yeah.

00:20:40.340 --> 00:20:42.900
Power Mode, if you're using PyCharm, is definitely fun to check out.

00:20:42.900 --> 00:20:44.120
Got the link in the show notes.

00:20:44.120 --> 00:20:44.420
Cool.

00:20:44.420 --> 00:20:44.820
Okay.

00:20:44.820 --> 00:20:45.160
All right.

00:20:45.160 --> 00:20:47.200
Well, that's a fun one to close it out for sure.

00:20:47.200 --> 00:20:47.600
All right.

00:20:47.600 --> 00:20:48.060
Thanks, Brian.

00:20:48.060 --> 00:20:49.440
And chat with you.

00:20:49.440 --> 00:20:49.560
Yeah.

00:20:49.560 --> 00:20:49.880
Thank you.

00:20:49.880 --> 00:20:50.060
Yeah.

00:20:50.060 --> 00:20:50.880
Chat with you next time.

00:20:50.880 --> 00:20:51.600
Bye, everyone.

00:20:51.600 --> 00:20:51.880
Okay.

00:20:51.880 --> 00:20:52.180
Bye.

00:20:52.180 --> 00:20:54.640
Thank you for listening to Python Bytes.

00:20:54.640 --> 00:20:57.200
Follow the show on Twitter via at Python Bytes.

00:20:57.200 --> 00:21:00.100
That's Python Bytes as in B-Y-T-E-S.

00:21:00.100 --> 00:21:03.540
And get the full show notes at Pythonbytes.fm.

00:21:03.540 --> 00:21:07.860
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:21:07.860 --> 00:21:10.560
We're always on the lookout for sharing something cool.

00:21:10.560 --> 00:21:13.960
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:14.440 --> 00:21:17.580
Thank you for listening and sharing this podcast with your friends and colleagues.

