
00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.000 --> 00:00:11.160
This is episode 54, recorded November 28th, 2017.


00:00:11.160 --> 00:00:12.040
I'm Michael Kennedy.


00:00:12.040 --> 00:00:12.960
And I'm Brian Okken.


00:00:12.960 --> 00:00:16.400
And Brian, I feel like we got some pretty good stuff lined up for this week. What do you think?


00:00:16.400 --> 00:00:17.040
Yeah, we do.


00:00:17.040 --> 00:00:18.040
Totally.


00:00:18.040 --> 00:00:21.040
Before we get to that though, let's just say thank you to DigitalOcean.


00:00:21.040 --> 00:00:24.680
They want you to know about Spaces at do.co/python.


00:00:24.680 --> 00:00:29.640
Spaces is awesome. It's like AWS S3 but 10 times better.


00:00:29.640 --> 00:00:31.960
maybe even more so. I'll tell you more about that later.


00:00:31.960 --> 00:00:37.060
But Brian, you have some fantastic news for the stability of Python


00:00:37.060 --> 00:00:39.060
open source infrastructure, right?


00:00:39.060 --> 00:00:43.100
Yes, this just came out yesterday, an announcement that the


00:00:43.100 --> 00:00:45.600
Python Software Foundation has awarded


00:00:45.600 --> 00:00:49.100
a $170,000 grant


00:00:49.100 --> 00:00:52.500
that the money came from the Mozilla open source program


00:00:52.500 --> 00:00:56.700
and it's to improve the sustainability of PyPI.


00:00:56.700 --> 00:00:59.620
that is our packaging index that everybody uses.


00:00:59.620 --> 00:01:02.740
Yeah, and we've talked about the challenges that PyPI had previously.


00:01:02.740 --> 00:01:06.060
I've actually done an entire like panel episode on Talk Python.


00:01:06.060 --> 00:01:10.780
It's a ways back. It's in like the 60s, 70s range in the episode number.


00:01:10.780 --> 00:01:14.500
But this has been a really big problem and it's really been like


00:01:14.500 --> 00:01:18.380
on the shoulders of Donald Stuft to just keep


00:01:18.380 --> 00:01:20.860
pip and PyPI running, right?


00:01:20.860 --> 00:01:24.180
There are other people involved with trying to keep it up and running.


00:01:24.180 --> 00:01:32.220
But really that's all that they have time for right now. There was effort for the new warehouse code base, but there's,


00:01:32.220 --> 00:01:39.820
Donald has switched jobs recently and cannot spend as much time as he was before working on it.


00:01:39.820 --> 00:01:45.140
So there's a big gap there and we need some work. So there's a lot of people that have asked,


00:01:45.140 --> 00:01:49.260
this warehouse thing, I thought it was going to become the new PyPI, what's up?


00:01:49.260 --> 00:02:07.460
Still not the default. I know, you know, the site basically works, it uses the same database, so it doesn't get out of sync. And you know, if you go to pypi.org or pypi.io, you end up there. And it's a much better experience than the funky double pypi URL that's at python.org.


00:02:07.460 --> 00:02:11.040
>> There are some administrative capabilities that,


00:02:11.040 --> 00:02:14.840
for instance, if you're pushing up a new package, you will notice.


00:02:14.840 --> 00:02:20.440
You still have to go use the old API to create an account.


00:02:20.440 --> 00:02:24.300
There are some backwards compatible administrative capabilities that are


00:02:24.300 --> 00:02:27.560
needed in order to get this going and farther.


00:02:27.560 --> 00:02:33.420
Also, it's used by so many people that we have to migrate slowly,


00:02:33.420 --> 00:02:35.140
a little bit slowly and carefully,


00:02:35.140 --> 00:02:41.140
and hopefully this grant will be enough to at least get us started and get that done.


00:02:41.140 --> 00:02:42.260
So I'm excited about it.


00:02:42.260 --> 00:02:43.700
Yeah, that'd be super awesome.


00:02:43.700 --> 00:02:49.140
Maybe they can take a page out of how the Instagram folks migrated from Python 2


00:02:49.140 --> 00:02:52.660
and the older version of Django to Python 3 and the newer version of Django,


00:02:52.660 --> 00:02:58.660
where at first it just rolled out to the internal people and then a small group and so on.


00:02:58.660 --> 00:03:02.580
It's either that, them or their Facebook, same company, but I can't remember exactly the product,


00:03:02.580 --> 00:03:03.700
but I think it was Instagram.


00:03:03.700 --> 00:03:05.660
I think it'll be pretty good a plan put together.


00:03:05.660 --> 00:03:10.180
They've got in the article that we link up and they do talk about one of the first


00:03:10.180 --> 00:03:17.260
steps is redirecting some of the production traffic to the warehouse and then gradually


00:03:17.260 --> 00:03:19.180
going over migrating that over.


00:03:19.180 --> 00:03:23.140
And then again, the main thing is to try to get all the administrative


00:03:23.140 --> 00:03:24.380
capabilities up to snuff.


00:03:24.380 --> 00:03:24.580
Yeah.


00:03:24.580 --> 00:03:24.940
Nice.


00:03:24.940 --> 00:03:27.900
I don't know what the timeline is like, but I'm looking forward to seeing some of those


00:03:27.900 --> 00:03:28.300
changes.


00:03:28.300 --> 00:03:33.020
You know, I'm looking forward to that red pre-production website banner thing being


00:03:33.020 --> 00:03:33.340
gone.


00:03:33.420 --> 00:03:34.940
Yeah, yeah, definitely.


00:03:34.940 --> 00:03:37.660
Because the site, at least from a consumer perspective, is really, really great.


00:03:37.660 --> 00:03:42.220
I think they could actually take that down now and just say, "Admin people, if you want to maintain your package, go over here."


00:03:42.220 --> 00:03:47.300
It's still kind of a messy thing to have to try to teach people how to put up new packages.


00:03:47.300 --> 00:03:50.180
It's still a convoluted instruction set.


00:03:50.180 --> 00:03:51.180
Yep, for sure.


00:03:51.180 --> 00:03:54.980
So how often do you use type annotations?


00:03:54.980 --> 00:03:57.180
Python's a dynamic language.


00:03:57.180 --> 00:04:01.420
You might say, "Here's a function called register, and it has a thing called user."


00:04:01.780 --> 00:04:05.520
Maybe that's the user's email, maybe that's a user object, maybe it's something else.


00:04:05.520 --> 00:04:07.520
Like, you could annotate that, but do you do that?


00:04:07.520 --> 00:04:11.020
I try to do it for at least the API for a package.


00:04:11.020 --> 00:04:12.320
That's what I've been using it for.


00:04:12.320 --> 00:04:14.960
Yeah, that's a really great point. I do that as well.


00:04:14.960 --> 00:04:19.120
I don't, like, go over the top and, like, annotate everything in my code.


00:04:19.120 --> 00:04:22.920
But I find as you cross, like, major architectural boundaries,


00:04:22.920 --> 00:04:25.460
which hopefully you've put into your application,


00:04:25.460 --> 00:04:27.340
you know, you've got, like, a data access layer,


00:04:27.340 --> 00:04:28.960
and you've got some other layer that's using it.


00:04:28.960 --> 00:04:30.960
Like, if you annotate just that data access layer,


00:04:30.960 --> 00:04:35.400
Like that really flows a lot of good checking through.


00:04:35.400 --> 00:04:39.400
So one of the tools that has been around for a while


00:04:39.400 --> 00:04:41.700
and is actually, as I understand it,


00:04:41.700 --> 00:04:45.080
one of the main projects that Guido van Rossum


00:04:45.080 --> 00:04:47.880
has been working on is mypy,


00:04:47.880 --> 00:04:51.860
which is an experimental optional type checker for Python.


00:04:51.860 --> 00:04:52.700
Yeah, it's cool, right?


00:04:52.700 --> 00:04:54.860
So basically what it does is it's like Flake 8


00:04:54.860 --> 00:04:56.680
or something, you run it against your code.


00:04:56.680 --> 00:04:58.540
And if you've used these type annotations,


00:04:58.540 --> 00:05:01.260
which are just editor notes, basically.


00:05:01.260 --> 00:05:05.180
They have no runtime behavior for most frameworks.


00:05:05.180 --> 00:05:06.660
I've seen some people try to make use of it,


00:05:06.660 --> 00:05:08.260
and it's been pretty cool what I've seen.


00:05:08.260 --> 00:05:10.780
But generally, it's just like a,


00:05:10.780 --> 00:05:13.500
here's a note for the editors to give you some hints.


00:05:13.500 --> 00:05:16.340
mypy will check that through,


00:05:16.340 --> 00:05:19.620
as it follows the flow of your code, right?


00:05:19.620 --> 00:05:20.540
- Yeah. - So that's pretty good.


00:05:20.540 --> 00:05:21.700
It even works on Python 2,


00:05:21.700 --> 00:05:23.340
which doesn't support type annotations,


00:05:23.340 --> 00:05:26.620
but there's like a docstring style of doing it.


00:05:26.620 --> 00:05:29.900
So the big announcement is that Dropbox


00:05:29.900 --> 00:05:33.660
has just released something called PyAnnotate.


00:05:33.660 --> 00:05:36.300
So PyAnnotate builds on mypy,


00:05:36.300 --> 00:05:37.940
and instead of just going, okay, great,


00:05:37.940 --> 00:05:38.860
so you wrote this code,


00:05:38.860 --> 00:05:41.180
and then you went and you added type annotations,


00:05:41.180 --> 00:05:43.380
I can tell you if it's correct,


00:05:43.380 --> 00:05:45.660
PyAnnotate will say, you wrote a bunch of code,


00:05:45.660 --> 00:05:47.800
or you inherited a bunch of code,


00:05:47.800 --> 00:05:49.780
I will annotate it for you.


00:05:49.780 --> 00:05:50.620
That is awesome.


00:05:50.620 --> 00:05:51.440
- It's pretty cool.


00:05:51.440 --> 00:05:54.140
- Yeah, so basically, if you've got some amount of code


00:05:54.140 --> 00:05:58.100
you want to annotate, what you do is you can go


00:05:58.100 --> 00:06:01.060
and like import some profiler hooks,


00:06:01.060 --> 00:06:03.000
and you can do it just on a function by function


00:06:03.000 --> 00:06:05.300
or call graph by call graph section


00:06:05.300 --> 00:06:07.180
and say, start annotating,


00:06:07.180 --> 00:06:10.420
collecting annotation information here, stop there.


00:06:10.420 --> 00:06:12.740
And it generates a JSON file with all the info,


00:06:12.740 --> 00:06:13.580
and then if you want,


00:06:13.580 --> 00:06:17.900
you can run a separate command line argument, a utility,


00:06:17.900 --> 00:06:20.340
pass it that JSON file plus your source files,


00:06:20.340 --> 00:06:23.220
and it will then go put the type annotations in it.


00:06:23.220 --> 00:06:26.340
So I think this is huge, and I really like it.


00:06:26.340 --> 00:06:28.340
I think it has a potential of being huge.


00:06:28.340 --> 00:06:30.340
There's a few things I'm on the fence about.


00:06:30.340 --> 00:06:31.060
Like what?


00:06:31.060 --> 00:06:37.180
Like it only does the Python 2 style comment annotations so far.


00:06:37.180 --> 00:06:38.460
Yeah, that's not so amazing.


00:06:38.460 --> 00:06:40.460
Well, hold on, let me look.


00:06:40.460 --> 00:06:41.780
Let me pull this up.


00:06:41.780 --> 00:06:46.100
So one of the things I think this is actually coming from


00:06:46.100 --> 00:06:52.060
is the fact that Dropbox is trying to move away from Python 2.


00:06:52.060 --> 00:06:54.380
I'm pretty sure that's why this whole thing exists.


00:06:54.380 --> 00:06:56.640
You're right, it does do the Python 2 style,


00:06:56.640 --> 00:06:57.720
which is kind of annoying,


00:06:57.720 --> 00:06:59.600
but I guess it wouldn't be that much work


00:06:59.600 --> 00:07:01.240
to like migrate it up.


00:07:01.240 --> 00:07:04.400
Maybe some enterprising person will add that feature,


00:07:04.400 --> 00:07:07.440
the Python 3 style, which I think is much, much nicer.


00:07:07.440 --> 00:07:08.360
- Version of PyAnnotate.


00:07:08.360 --> 00:07:09.880
- Yeah, a PyAnnotate 3.


00:07:09.880 --> 00:07:11.960
- Yeah, one of the comments is,


00:07:11.960 --> 00:07:13.600
it's pull requests accepted.


00:07:13.600 --> 00:07:15.780
- Beautiful.


00:07:15.780 --> 00:07:16.620
Yeah, that's really cool.


00:07:16.620 --> 00:07:19.680
So I think the plan is those guys have


00:07:19.680 --> 00:07:23.680
one of the largest code bases in Python, period.


00:07:23.680 --> 00:07:25.280
And it's all in Python 2.


00:07:25.280 --> 00:07:26.840
Well, I should say all, I don't know all.


00:07:26.840 --> 00:07:28.520
I think much of it is in Python 2.


00:07:28.520 --> 00:07:33.280
And so here's a great way to like prepare this


00:07:33.280 --> 00:07:35.240
for some kind of automated migration


00:07:35.240 --> 00:07:37.640
or much stronger migration story.


00:07:37.640 --> 00:07:40.040
- Yeah, it's definitely a step in the right direction.


00:07:40.040 --> 00:07:40.960
I think it's really cool.


00:07:40.960 --> 00:07:41.840
- Yeah, very cool.


00:07:41.840 --> 00:07:43.960
Maybe somebody will take this and do something fun with it.


00:07:43.960 --> 00:07:47.400
- One of the other parts of it is the little boilerplate


00:07:47.400 --> 00:07:50.160
that you've got to do to try to import your code


00:07:50.160 --> 00:07:52.780
and run it to generate that stuff,


00:07:52.780 --> 00:07:55.680
there's somebody already, the Kencho Engineering


00:07:55.680 --> 00:07:59.680
has released a project called pytest Annotate


00:07:59.680 --> 00:08:02.560
that makes this a little bit cleaner.


00:08:02.560 --> 00:08:05.080
So with pytest Annotate, you can run,


00:08:05.080 --> 00:08:07.060
just run your tests against your code


00:08:07.060 --> 00:08:12.060
without doing any hooks into your code for the PyAnnotate.


00:08:12.060 --> 00:08:17.040
And it will generate all, it does all of the start and stop


00:08:17.040 --> 00:08:23.440
the resume and stop whatever it is. Yeah, the resume. And it generates that stuff for you with


00:08:23.440 --> 00:08:29.120
that. Again, there's these are all in the early phases. And there's a few caveats with it. But


00:08:29.120 --> 00:08:33.840
I played with it a little bit. And it's a lot. It's pretty easy. There's just a couple lines


00:08:33.840 --> 00:08:38.240
of code to generate some to get annotations out of your code. It's pretty cool. Yeah,


00:08:38.240 --> 00:08:43.760
I think that's really great. And so basically, you can run individual tests or all the sets of tests


00:08:43.760 --> 00:08:49.600
and everything under test will then have type annotation information available for it.


00:08:49.600 --> 00:08:53.600
Then one more line, command line thing, and you'll put it back in code.


00:08:53.600 --> 00:08:54.960
Yeah, I tried it out.


00:08:54.960 --> 00:08:58.200
One of the things I do like about the PyAnnotate is there's, by default,


00:08:58.200 --> 00:09:02.120
it doesn't modify your code, but it tells you what you should change.


00:09:02.120 --> 00:09:04.600
And then if you want to have it actually write the code,


00:09:04.600 --> 00:09:07.200
you add a -w flag and it'll write it.


00:09:07.200 --> 00:09:09.500
So that's a good behavior. I like it.


00:09:09.500 --> 00:09:11.460
Yeah, it gives you the option to see what's going to happen


00:09:11.460 --> 00:09:14.180
before you actually commit.


00:09:14.180 --> 00:09:16.180
I mean, we have source control, I hope.


00:09:16.180 --> 00:09:18.020
People are using source control.


00:09:18.020 --> 00:09:18.860
- Yeah.


00:09:18.860 --> 00:09:20.300
- But still.


00:09:20.300 --> 00:09:22.500
Awesome, so before we get to the next item,


00:09:22.500 --> 00:09:24.460
I want to tell you guys about DigitalOcean Spaces.


00:09:24.460 --> 00:09:28.020
So DigitalOcean Spaces is online object storage,


00:09:28.020 --> 00:09:29.920
file storage for your applications,


00:09:29.920 --> 00:09:31.820
and all the other things you might use


00:09:31.820 --> 00:09:34.260
something like Amazon S3 for.


00:09:34.260 --> 00:09:37.220
But it's much, much more affordable


00:09:37.220 --> 00:09:40.220
instead of being, say, $93


00:09:40.220 --> 00:09:42.820
for the first terabyte of traffic, it's five.


00:09:42.820 --> 00:09:46.320
And you get free inbound traffic, all sorts of really good stuff.


00:09:46.320 --> 00:09:50.660
And after that, it's still 10 times, nine times cheaper than AWS.


00:09:50.660 --> 00:09:54.860
So really great, same APIs, you can just switch over there, super easy,


00:09:54.860 --> 00:09:57.760
more or less just point your client at a different URL,


00:09:57.760 --> 00:10:00.020
and you're still doing the same type of thing.


00:10:00.020 --> 00:10:03.320
So check it out at do.co/python.


00:10:03.320 --> 00:10:08.920
Speaking of server code that wants to store stuff in places and link other people to it,


00:10:08.920 --> 00:10:12.080
Have you ever created a systemd service for Linux?


00:10:12.080 --> 00:10:12.800
I have not.


00:10:12.800 --> 00:10:14.800
I haven't either. It always seemed like kind of a


00:10:14.800 --> 00:10:17.280
complicated thing that you'd have to set up.


00:10:17.280 --> 00:10:20.320
So systemd is the more modern


00:10:20.320 --> 00:10:22.320
sort of daemon service for


00:10:22.320 --> 00:10:23.680
at least Ubuntu.


00:10:23.680 --> 00:10:26.400
I think on other ones as well that I've only played with Ubuntu.


00:10:26.400 --> 00:10:29.320
So that's a really early one that I encountered on.


00:10:29.320 --> 00:10:32.320
And there's this guy who created it just


00:10:32.320 --> 00:10:35.280
showing how to use a Python script


00:10:35.280 --> 00:10:36.920
as a system daemon


00:10:36.920 --> 00:10:39.240
in the systemd service, then you can control it


00:10:39.240 --> 00:10:41.240
with like service control and all those


00:10:41.240 --> 00:10:42.920
sorts of things just like you would say


00:10:42.920 --> 00:10:46.360
nginx or microwizky or some other major built-in


00:10:46.360 --> 00:10:47.640
server component.


00:10:47.640 --> 00:10:49.800
And it is super, super easy.


00:10:49.800 --> 00:10:51.800
You basically create a Python file


00:10:51.800 --> 00:10:55.440
and you create this little .service file.


00:10:55.440 --> 00:10:56.680
Those are both in the gist.


00:10:56.680 --> 00:10:59.040
Copy into a certain location, run a few command line


00:10:59.040 --> 00:11:01.280
arguments to enable them and start them.


00:11:01.280 --> 00:11:04.320
And off it goes. You just have a little while true


00:11:04.320 --> 00:11:06.320
go do your stuff work


00:11:06.320 --> 00:11:09.180
in your Python script and it'll just run indefinitely


00:11:09.180 --> 00:11:11.180
and even auto start when Linux boots.


00:11:11.180 --> 00:11:11.920
Oh, that's cool.


00:11:11.920 --> 00:11:13.920
And it's super easy, right? Are you looking at the code?


00:11:13.920 --> 00:11:16.780
Yeah, I mean it's just a handful of lines of code. That's it.


00:11:16.780 --> 00:11:18.780
Yeah, and it's basically a configuration.


00:11:18.780 --> 00:11:20.780
It's probably like eight lines of configuration,


00:11:20.780 --> 00:11:22.780
half of which is like headers.


00:11:22.780 --> 00:11:24.780
So it's really, really super easy.


00:11:24.780 --> 00:11:26.780
So if you need to have stuff running in the background


00:11:26.780 --> 00:11:29.460
and just run with your system on Linux,


00:11:29.460 --> 00:11:31.460
check this out if you want to write that in Python.


00:11:31.460 --> 00:11:32.460
Nice. Cool.


00:11:32.460 --> 00:11:34.460
Yeah, for sure.


00:11:34.460 --> 00:11:36.460
You were talking about pytest before.


00:11:36.460 --> 00:11:38.460
pytest is shiny and new again, right?


00:11:38.460 --> 00:11:40.460
Yes, there's a new


00:11:40.460 --> 00:11:42.460
version came out, pytest 3.3.


00:11:42.460 --> 00:11:44.460
And there's


00:11:44.460 --> 00:11:46.460
quite a few changes, one of which is


00:11:46.460 --> 00:11:48.460
they're not supporting


00:11:48.460 --> 00:11:50.460
a couple versions of


00:11:50.460 --> 00:11:52.460
Python anymore. I think


00:11:52.460 --> 00:11:54.460
2.6 and 3.3


00:11:54.460 --> 00:11:56.460
are out now.


00:11:56.460 --> 00:11:58.460
So you have to do either


00:11:58.460 --> 00:12:00.460
2.7 and above or


00:12:00.460 --> 00:12:02.460
I guess 2.7 or


00:12:02.460 --> 00:12:08.060
3.4 and above. Yeah, that's right. The Python 3.3 just went out of support in its own right.


00:12:08.060 --> 00:12:12.100
So those are probably tied. I'm not sure about 2.6. There's a bunch of new features which


00:12:12.100 --> 00:12:17.860
are exciting, but the most exciting thing is just a visual thing for me is that there's


00:12:17.860 --> 00:12:22.820
pytest now displays a progress percentage while running tests. So you get along the


00:12:22.820 --> 00:12:28.440
right hand side of your terminal window, you'll get like percentage of tests done. And I imagine


00:12:28.440 --> 00:12:33.720
And it's based on just the number of, it does collections first, it's probably just the


00:12:33.720 --> 00:12:34.720
number of tests.


00:12:34.720 --> 00:12:40.080
Yeah, it probably doesn't go, okay, this one last time took 10 seconds, and this one took


00:12:40.080 --> 00:12:41.080
one.


00:12:41.080 --> 00:12:42.080
So you have, you know, you've whatever, right?


00:12:42.080 --> 00:12:43.080
I don't know that for sure.


00:12:43.080 --> 00:12:44.080
But I'm guessing that.


00:12:44.080 --> 00:12:48.680
So yeah, yeah, it'd be awesome if it if it had kind of both, but I can totally see why


00:12:48.680 --> 00:12:49.680
that wouldn't make any sense.


00:12:49.680 --> 00:12:50.680
Yeah.


00:12:50.680 --> 00:12:54.040
And then one of the other things that pytest has always been great about is capturing standard


00:12:54.040 --> 00:12:57.200
out and standard error and display those.


00:12:57.200 --> 00:13:02.040
If there's for test failures by default, you can display them all the time if you feel


00:13:02.040 --> 00:13:03.360
like it.


00:13:03.360 --> 00:13:09.760
And also, you can write tests around cap around the captured output and test against that.


00:13:09.760 --> 00:13:17.440
And they've added built in support for capturing the output from the standard logging module,


00:13:17.440 --> 00:13:20.600
which is quite helpful for people using the logging module.


00:13:20.600 --> 00:13:21.600
Yeah, how nice.


00:13:21.600 --> 00:13:22.600
That's pretty cool.


00:13:22.600 --> 00:13:25.100
I gotta go out and test my entire book


00:13:25.100 --> 00:13:27.040
to make sure that it still compiles,


00:13:27.040 --> 00:13:29.420
it still runs against my test 3.3.


00:13:29.420 --> 00:13:30.860
- Ah, the joys of being an author.


00:13:30.860 --> 00:13:31.980
You're never done.


00:13:31.980 --> 00:13:34.540
- Yeah, I'm pretty sure everything looks pretty compatible,


00:13:34.540 --> 00:13:35.740
so it shouldn't be an issue.


00:13:35.740 --> 00:13:36.660
- That's cool.


00:13:36.660 --> 00:13:38.660
Think of it this way, like someday it'll break bad enough,


00:13:38.660 --> 00:13:42.320
you'll have to write a version to a second edition.


00:13:42.320 --> 00:13:44.460
- Yeah, that's the plan.


00:13:44.460 --> 00:13:46.980
- Think of those, yeah, for sure.


00:13:46.980 --> 00:13:49.140
Cool, all right, so I wanna wrap this episode up


00:13:49.140 --> 00:13:51.260
with something pretty straightforward,


00:13:51.260 --> 00:13:55.740
but also it kind of gives you a really unique technique.


00:13:55.740 --> 00:13:59.000
So it turns out that if you're going to create a dictionary,


00:13:59.000 --> 00:14:01.820
as we all know, there's multiple ways to do this in Python.


00:14:01.820 --> 00:14:03.460
Same for list, same for strings,


00:14:03.460 --> 00:14:05.060
same for tuples and so on.


00:14:05.060 --> 00:14:08.620
Like I could say D equals open curly, close curly.


00:14:08.620 --> 00:14:11.600
That's the sort of language way,


00:14:11.600 --> 00:14:13.900
or there's the more type driven way


00:14:13.900 --> 00:14:16.900
where I say D equals dict, open close parentheses, right?


00:14:16.900 --> 00:14:19.180
So you either use the curly braces or use the dict.


00:14:19.180 --> 00:14:22.380
Similarly, list or square brackets or set,


00:14:22.380 --> 00:14:24.660
I guess set you can do it, but tuples, things like that.


00:14:24.660 --> 00:14:27.940
So there's the type way, and then there's the built-in way.


00:14:27.940 --> 00:14:32.540
It turns out that the built-in way is faster.


00:14:32.540 --> 00:14:37.540
Okay, that's kind of an interesting piece of trivia,


00:14:37.540 --> 00:14:40.900
but what's really interesting is this guy wrote an article


00:14:40.900 --> 00:14:43.380
called why D equals curly braces


00:14:43.380 --> 00:14:45.020
is faster than D equals dict.


00:14:45.020 --> 00:14:46.580
And he goes through the analysis,


00:14:46.580 --> 00:14:48.780
and he uses the dis module.


00:14:48.780 --> 00:14:50.940
and he goes through and he actually disassembles


00:14:50.940 --> 00:14:52.940
the line that uses curly braces


00:14:52.940 --> 00:14:54.980
and the line that uses dict


00:14:54.980 --> 00:14:58.860
and analyzes why the one is like 20% slower


00:14:58.860 --> 00:15:00.700
or whatever the numbers turn out to be.


00:15:00.700 --> 00:15:02.420
- It's fun and nerdy.


00:15:02.420 --> 00:15:04.300
It looks like just one extra byte code


00:15:04.300 --> 00:15:05.460
or something like that.


00:15:05.460 --> 00:15:08.260
- Yeah, the main thing that makes it slow


00:15:08.260 --> 00:15:10.940
is when you use the type way,


00:15:10.940 --> 00:15:12.900
you're effectively calling a function.


00:15:12.900 --> 00:15:14.780
And when you're calling a function,


00:15:14.780 --> 00:15:18.020
it needs to load the global variables


00:15:18.020 --> 00:15:20.540
and check to see if that function is overridden


00:15:20.540 --> 00:15:24.620
in the local scope rather than in the major scope.


00:15:24.620 --> 00:15:28.500
So it can't be convinced that str or dict


00:15:28.500 --> 00:15:30.660
or whatever is what the built-in one means.


00:15:30.660 --> 00:15:32.540
So it has to kind of load up the state


00:15:32.540 --> 00:15:34.780
and check it out and then carry on.


00:15:34.780 --> 00:15:36.500
And it turns out that that makes that slower.


00:15:36.500 --> 00:15:38.880
And so this is all interesting, right?


00:15:38.880 --> 00:15:42.500
But it's kind of just like a little trivia trick.


00:15:42.500 --> 00:15:43.900
But the reason I brought up this article


00:15:43.900 --> 00:15:45.460
is if you look farther down at the end,


00:15:45.460 --> 00:15:49.300
he analyzes something that has nothing to do


00:15:49.300 --> 00:15:53.260
with this whole dict versus curly thing.


00:15:53.260 --> 00:15:55.660
So let's suppose we're going to do


00:15:55.660 --> 00:15:59.660
some mathematical calculations with like math.floor


00:15:59.660 --> 00:16:01.580
and logarithms and so on.


00:16:01.580 --> 00:16:03.380
There's a way to structure it.


00:16:03.380 --> 00:16:07.580
We're using the functions directly out of, say,


00:16:07.580 --> 00:16:09.220
out of the globals that you've imported.


00:16:09.220 --> 00:16:11.220
So you say import math and then math.floor,


00:16:11.220 --> 00:16:13.060
math.log10, and so on.


00:16:13.060 --> 00:16:15.140
And then there's another way to like pass those


00:16:15.140 --> 00:16:19.380
into the function, the passing it in means you get to skip that load global


00:16:19.380 --> 00:16:23.340
for really hot loops or really short functions that are called super frequently.


00:16:23.340 --> 00:16:28.940
And that's like 22% faster by just passing them in from the outside


00:16:28.940 --> 00:16:33.180
than calling them directly. So if you're really trying to optimize something,


00:16:33.180 --> 00:16:38.100
this is a super simple non obvious trick to get like a significant speed up.


00:16:38.100 --> 00:16:40.940
That actually to get around loading globals.


00:16:40.940 --> 00:16:41.940
Isn't that weird?


00:16:41.940 --> 00:16:44.780
Yeah, I didn't know you could get around that. So that's cool.


00:16:44.780 --> 00:16:45.780
I didn't either.


00:16:45.780 --> 00:16:46.780
Apparently you can.


00:16:46.780 --> 00:16:50.760
And I just think it's an interesting way of going like, all right, here's this incongruity.


00:16:50.760 --> 00:16:52.240
Like why would these have any different speed?


00:16:52.240 --> 00:16:55.220
They're effectively doing the same thing in the end.


00:16:55.220 --> 00:16:58.720
And then using the dissimilar to analyze it and then seeing, okay, well, here's the problem.


00:16:58.720 --> 00:16:59.720
How do we get around that?


00:16:59.720 --> 00:17:01.280
Let's make this other unrelated thing faster.


00:17:01.280 --> 00:17:02.280
I think that's just fascinating.


00:17:02.280 --> 00:17:03.680
Yeah, that's pretty cool.


00:17:03.680 --> 00:17:04.680
For sure.


00:17:04.680 --> 00:17:05.680
All right.


00:17:05.680 --> 00:17:08.600
Well, that's pretty much it for our news this week, everyone.


00:17:08.600 --> 00:17:09.600
Hopefully enjoy it.


00:17:09.600 --> 00:17:12.380
I thought all of them were very, very cool.


00:17:12.380 --> 00:17:14.440
I do have one follow up item for you, Brian.


00:17:14.440 --> 00:17:15.280
- Okay, great.


00:17:15.280 --> 00:17:17.160
- Remember I told you guys a couple of weeks ago


00:17:17.160 --> 00:17:18.500
about All Work, All Play,


00:17:18.500 --> 00:17:20.420
that weird eSports championship thing


00:17:20.420 --> 00:17:21.860
that apparently has taken over?


00:17:21.860 --> 00:17:22.700
- Yeah.


00:17:22.700 --> 00:17:24.940
- So there's this article that came out in Ars Technica


00:17:24.940 --> 00:17:26.240
that caught my attention


00:17:26.240 --> 00:17:28.360
that's really closely related to that.


00:17:28.360 --> 00:17:29.820
And I love Ars Technica.


00:17:29.820 --> 00:17:33.140
It says, "F1 eSports is now more exciting


00:17:33.140 --> 00:17:34.720
"than the real F1."


00:17:34.720 --> 00:17:35.860
As in Formula One,


00:17:35.860 --> 00:17:39.460
like the many, many million dollar racing teams.


00:17:39.460 --> 00:17:41.640
And it says, "Look, watching the eSports version


00:17:41.640 --> 00:17:42.860
"is actually more interesting."


00:17:42.860 --> 00:17:45.920
and they go through and they talk about why that is.


00:17:45.920 --> 00:17:48.120
It was just like the first world championship of F1


00:17:48.120 --> 00:17:50.280
and they have the 20 minute race video


00:17:50.280 --> 00:17:53.920
with real announcers and the super excited Italian guy


00:17:53.920 --> 00:17:55.380
as one of the announcers.


00:17:55.380 --> 00:17:56.700
And if you look through the comments,


00:17:56.700 --> 00:17:58.080
I think they might be right.


00:17:58.080 --> 00:18:01.480
I think eSports F1 might actually be more interesting


00:18:01.480 --> 00:18:02.760
than real F1 racing.


00:18:02.760 --> 00:18:05.760
And I love racing things, like real racing, not game racing.


00:18:05.760 --> 00:18:07.000
- That's kind of cool though.


00:18:07.000 --> 00:18:08.200
I'll have to go check this out.


00:18:08.200 --> 00:18:09.960
- Yeah, yeah, so if this sounds interesting to you guys,


00:18:09.960 --> 00:18:10.800
check it out.


00:18:10.800 --> 00:18:11.920
Watch that video for like five minutes


00:18:11.920 --> 00:18:18.720
wait for the Italian announcer. He's awesome. All right. Great. Well, hopefully you guys can


00:18:18.720 --> 00:18:23.600
enjoy that and find some cool stuff in the news. Brian, thank you for sharing this with everyone.


00:18:23.600 --> 00:18:24.720
Yeah, thank you. You bet. Bye.


00:18:24.720 --> 00:18:50.920
Bye.

