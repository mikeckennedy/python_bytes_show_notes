WEBVTT

00:00:00.001 --> 00:00:05.660
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.660 --> 00:00:10.760
This is episode 54, recorded November 28th, 2017.

00:00:10.760 --> 00:00:11.940
I'm Michael Kennedy.

00:00:11.940 --> 00:00:12.880
And I'm Brian Okken.

00:00:12.880 --> 00:00:15.900
And Brian, I feel like we've got some pretty good stuff lined up for this week.

00:00:15.900 --> 00:00:16.300
What do you think?

00:00:16.300 --> 00:00:17.000
Yeah, we do.

00:00:17.000 --> 00:00:17.520
Totally.

00:00:17.520 --> 00:00:20.880
Before we get to that, though, let's just say thank you to DigitalOcean.

00:00:20.880 --> 00:00:24.440
They want you to know about Spaces at do.co slash Python.

00:00:24.440 --> 00:00:25.660
Spaces is awesome.

00:00:25.660 --> 00:00:29.320
It's like AWS S3, but 10 times better.

00:00:29.800 --> 00:00:30.620
Maybe even more so.

00:00:30.620 --> 00:00:31.800
I'll tell you more about that later.

00:00:31.800 --> 00:00:38.800
But Brian, you have some fantastic news for the stability of Python open source infrastructure, right?

00:00:38.800 --> 00:00:39.280
Yes.

00:00:39.280 --> 00:00:52.180
This just came out yesterday, an announcement that the Python Software Foundation has awarded a $170,000 grant that the money came from the Mozilla open source program.

00:00:52.180 --> 00:00:56.240
And it's to improve the sustainability of PyPI.

00:00:56.240 --> 00:00:59.520
That is our packaging index that everybody uses.

00:00:59.600 --> 00:00:59.740
Yeah.

00:00:59.740 --> 00:01:02.600
And we've talked about the challenges that PyPI had previously.

00:01:02.600 --> 00:01:05.800
I've actually done an entire panel episode on Talk Python.

00:01:05.800 --> 00:01:07.340
It's a ways back.

00:01:07.340 --> 00:01:10.700
It's in the 60s, 70s range in the episode number.

00:01:10.700 --> 00:01:12.920
But this has been a really big problem.

00:01:12.920 --> 00:01:20.720
And it's really been on the shoulders of Donald Stuffed to just keep pip and PyPI running, right?

00:01:20.880 --> 00:01:23.940
There are other people involved with trying to keep it up and running.

00:01:23.940 --> 00:01:26.980
But really, that's all that they have time for right now.

00:01:26.980 --> 00:01:30.440
There was effort for the new warehouse code base.

00:01:30.440 --> 00:01:39.720
But Donald has switched jobs recently and cannot spend as much time as he was before working on it.

00:01:40.120 --> 00:01:42.540
So there's a big gap there.

00:01:42.540 --> 00:01:43.580
And we need some work.

00:01:43.580 --> 00:01:48.580
So there's a lot of people that have asked, this warehouse thing, I thought it was going to become the new PyPI.

00:01:48.580 --> 00:01:49.160
What's up?

00:01:49.160 --> 00:01:50.320
Still not the default.

00:01:50.320 --> 00:01:50.940
I know.

00:01:50.940 --> 00:01:53.640
You know, the site basically works.

00:01:53.640 --> 00:01:56.220
It uses the same database, so it doesn't get out of sync.

00:01:56.220 --> 00:02:01.160
And, you know, if you go to pypi.org or pypi.io, you end up there.

00:02:01.160 --> 00:02:07.420
And it's a much better experience than the funky double PyPI URL that's at python.org.

00:02:07.420 --> 00:02:14.680
There are some administrative capabilities that, for instance, if you're pushing up a new package, you will notice.

00:02:14.680 --> 00:02:19.600
You still have to go use the old API to create an account.

00:02:19.980 --> 00:02:27.360
And there are some backwards compatible administrative capabilities that are needed in order to get this going and farther.

00:02:27.360 --> 00:02:34.920
And also, it's used by so many people that we kind of have to migrate slowly, a little bit slowly and carefully.

00:02:34.920 --> 00:02:40.960
And hopefully this grant will be enough to at least get us started and get that done.

00:02:40.960 --> 00:02:42.240
So I'm excited about it.

00:02:42.240 --> 00:02:43.620
Yeah, that'd be super awesome.

00:02:43.620 --> 00:02:58.660
Maybe they can take a page out of how the Instagram folks migrated from Python 2 and the older version of Django to Python 3 and the newer version of Django, where at first it just rolled out to the internal people and then a small group and so on.

00:02:58.720 --> 00:03:00.400
It's either them or their Facebook.

00:03:00.400 --> 00:03:02.560
Same company, but I can't remember exactly the product.

00:03:02.560 --> 00:03:03.520
But I think it was Instagram.

00:03:03.520 --> 00:03:05.580
I think it'll be pretty good a plan put together.

00:03:05.580 --> 00:03:19.100
They've got in the article that we link up, they do talk about one of the first steps is redirecting some of the production traffic to the warehouse and then gradually migrating that over.

00:03:19.580 --> 00:03:24.400
And then again, the main thing is to try to get all the administrative capabilities up to snuff.

00:03:24.400 --> 00:03:24.920
Yeah, nice.

00:03:24.920 --> 00:03:28.240
I don't know what the timeline is like, but I'm looking forward to seeing some of those changes.

00:03:28.240 --> 00:03:33.300
You know, I'm looking forward to that red pre-production website banner thing being gone.

00:03:33.300 --> 00:03:34.800
Yeah, yeah, definitely.

00:03:34.800 --> 00:03:37.660
Because the site, at least from a consumer perspective, is really, really great.

00:03:37.660 --> 00:03:42.200
I think they could actually take that down now and just say, admin people, if you want to maintain your package, go over here.

00:03:42.200 --> 00:03:47.000
It's still kind of a messy thing to have to try to teach people how to put up new packages.

00:03:47.000 --> 00:03:50.180
It's still a convoluted instruction set.

00:03:50.180 --> 00:03:51.060
Yep, for sure.

00:03:51.060 --> 00:03:54.800
So how often do you use type annotations?

00:03:54.800 --> 00:03:56.860
Python's a dynamic language.

00:03:56.860 --> 00:04:01.240
You might say, here's a function called register, and it has a thing called user.

00:04:01.240 --> 00:04:03.000
Maybe that's the user's email.

00:04:03.000 --> 00:04:04.060
Maybe that's a user object.

00:04:04.060 --> 00:04:05.340
Maybe it's something else.

00:04:05.340 --> 00:04:06.820
Like, you could annotate that.

00:04:06.820 --> 00:04:07.500
But do you do that?

00:04:07.500 --> 00:04:10.760
I try to do it for at least the API for a package.

00:04:10.940 --> 00:04:12.280
That's what I've been using it for.

00:04:12.280 --> 00:04:13.720
Yeah, that's a really great point.

00:04:13.720 --> 00:04:14.940
I do that as well.

00:04:14.940 --> 00:04:18.820
I don't, like, go over the top and, like, annotate everything in my code.

00:04:18.820 --> 00:04:28.980
But I find as you cross, like, major architectural boundaries, which hopefully you've put into your application, you know, you've got, like, a data access layer, and you've got some other layer that's using it.

00:04:28.980 --> 00:04:34.480
Like, if you annotate just that data access layer, like, that really flows a lot of good checking through.

00:04:35.600 --> 00:04:51.160
So one of the tools that has been around for a while, and it's actually, as I understand it, one of the main projects that Guido van Rossum has been working on is mypy, which is an experimental optional type checker for Python.

00:04:51.160 --> 00:04:51.700
Yeah.

00:04:51.840 --> 00:04:52.460
Yeah, it's cool, right?

00:04:52.460 --> 00:04:55.120
So basically what it does is it's like Flake 8 or something.

00:04:55.120 --> 00:04:56.600
You run it against your code.

00:04:56.600 --> 00:05:04.520
And if you've used these type annotations, which are just editor notes, basically, they have no runtime behavior for most frameworks.

00:05:04.940 --> 00:05:08.200
I've seen some people try to make use of it, and it's been pretty cool what I've seen.

00:05:08.200 --> 00:05:13.060
But generally it's just, like, here's a note for the editors to give you some hints.

00:05:13.060 --> 00:05:19.500
mypy will check that through as it follows the, you know, the flow of your code, right?

00:05:19.500 --> 00:05:19.800
Yeah.

00:05:19.800 --> 00:05:20.480
So that's pretty good.

00:05:20.480 --> 00:05:26.080
It even works on Python 2, which doesn't support type annotations, but there's, like, a doc string style of doing it.

00:05:26.080 --> 00:05:32.080
So the big announcement is that Dropbox has just released something called PyAnnotate.

00:05:33.360 --> 00:05:42.580
So PyAnnotate builds on mypy, and instead of just going, okay, great, so you wrote this code, and then you went and you added type annotations, I can tell you if it's correct.

00:05:42.580 --> 00:05:46.920
PyAnnotate will say, you wrote a bunch of code or you inherited a bunch of code.

00:05:46.920 --> 00:05:49.080
I will annotate it for you.

00:05:49.080 --> 00:05:50.320
That is awesome.

00:05:50.320 --> 00:05:51.040
It's pretty cool.

00:05:51.040 --> 00:05:51.320
Yeah.

00:05:51.320 --> 00:06:00.260
So basically if you've got some amount of code you want to annotate, what you do is you can go and, like, import some profiler hooks.

00:06:00.800 --> 00:06:09.140
And you can do it just on a function by function or, you know, call graph by call graph section and say, start collecting annotation information here.

00:06:09.140 --> 00:06:10.100
Stop there.

00:06:10.100 --> 00:06:12.600
And it generates a JSON file with all the info.

00:06:12.600 --> 00:06:22.740
And then if you want, you can run a separate command line argument, a utility, pass it that JSON file plus your source files, and it will then go put the type annotations in it.

00:06:23.080 --> 00:06:26.300
So I think this is huge, and I really like it.

00:06:26.300 --> 00:06:28.220
I think it has a potential of being huge.

00:06:28.220 --> 00:06:30.340
There's a few things I'm on the fence about.

00:06:30.340 --> 00:06:30.980
Oh, like what?

00:06:30.980 --> 00:06:36.860
Like it only does the Python 2 style comment annotations so far.

00:06:36.860 --> 00:06:38.340
Yeah, that's not so amazing.

00:06:38.340 --> 00:06:39.840
Well, hold on.

00:06:39.840 --> 00:06:40.320
Let me look.

00:06:40.320 --> 00:06:41.740
Let me pull this up.

00:06:41.740 --> 00:06:51.660
So one of the things I think this is actually coming from is the fact that Dropbox is trying to move away from Python 2.

00:06:51.660 --> 00:06:53.840
I'm pretty sure that's why this whole thing exists.

00:06:53.840 --> 00:06:54.660
You're right.

00:06:54.660 --> 00:06:57.680
It does do the Python 2 style, which is kind of annoying.

00:06:57.680 --> 00:07:01.100
But I guess, you know, it wouldn't be that much work to, like, migrate it up.

00:07:01.260 --> 00:07:07.380
Maybe some enterprising person will add that feature, the Python 3 style, which I think is much, much nicer.

00:07:07.380 --> 00:07:08.240
Version of PyAnnotate.

00:07:08.240 --> 00:07:09.640
Yeah, a PyAnnotate 3.

00:07:09.640 --> 00:07:10.140
Yeah.

00:07:10.140 --> 00:07:13.280
One of the comments is, it's pull requests accepted.

00:07:13.280 --> 00:07:15.240
Beautiful.

00:07:15.240 --> 00:07:16.600
Yeah, that's really cool.

00:07:16.600 --> 00:07:23.080
So I think the plan is those guys have one of the largest code bases in Python, period.

00:07:23.080 --> 00:07:24.800
And it's all in Python 2.

00:07:24.800 --> 00:07:26.140
Well, I should say all.

00:07:26.140 --> 00:07:26.560
I don't know.

00:07:26.560 --> 00:07:28.320
I think much of it is in Python 2.

00:07:28.740 --> 00:07:37.480
And so here's a great way to, like, prepare this for some kind of automated migration or much stronger migration story.

00:07:37.480 --> 00:07:39.940
Yeah, it's definitely a step in the right direction.

00:07:39.940 --> 00:07:40.800
I think it's really cool.

00:07:40.800 --> 00:07:41.480
Yeah, very cool.

00:07:41.480 --> 00:07:43.820
Maybe somebody will take this and do something fun with it.

00:07:43.820 --> 00:07:52.220
One of the other parts of it is the little boilerplate that you've got to do to try to import your code and run it to generate that stuff.

00:07:52.700 --> 00:07:53.580
There's somebody already.

00:07:53.580 --> 00:08:01.820
The Kensho Engineering has released a project called pytest Annotate that makes this a little bit cleaner.

00:08:01.820 --> 00:08:11.660
So with pytest Annotate, you can run, just run your tests against your code without doing any hooks into your code for the PyAnnotate.

00:08:11.920 --> 00:08:14.200
And it will generate all.

00:08:14.200 --> 00:08:17.500
It does all of the start and stop or the...

00:08:17.500 --> 00:08:18.900
The resume and stop, whatever it is, yeah.

00:08:18.900 --> 00:08:19.760
Yeah, the resume.

00:08:19.760 --> 00:08:23.740
And it, yeah, it generates that stuff for you with that.

00:08:23.740 --> 00:08:25.980
Again, these are all in early phases.

00:08:25.980 --> 00:08:28.540
And there's a few caveats with it.

00:08:28.540 --> 00:08:30.360
But I played with it a little bit.

00:08:30.360 --> 00:08:32.060
And it's a lot.

00:08:32.060 --> 00:08:32.980
It's pretty easy.

00:08:32.980 --> 00:08:37.300
There's just a couple lines of code to generate some ticket annotations out of your code.

00:08:37.300 --> 00:08:38.000
It's pretty cool.

00:08:38.000 --> 00:08:39.500
Yeah, I think that's really great.

00:08:39.500 --> 00:08:43.700
And so basically, you can run individual tests or all the sets of tests.

00:08:43.700 --> 00:08:49.640
And everything under test will then have type annotation information available for it.

00:08:49.640 --> 00:08:53.520
And then one more line, command line thing, and you'll put it back in code.

00:08:53.520 --> 00:08:54.880
Yeah, I tried it out.

00:08:54.880 --> 00:08:59.600
One of the things I do like about the PyAnnotate is there's, by default, it doesn't modify your code.

00:08:59.600 --> 00:09:01.660
But it tells you what you should change.

00:09:01.660 --> 00:09:06.740
And then if you want to have it actually write the code, you add a dash W flag and it'll write it.

00:09:06.740 --> 00:09:08.500
So that's a good behavior.

00:09:08.500 --> 00:09:09.520
I like it.

00:09:09.520 --> 00:09:13.580
Yeah, it gives you the option to see what's going to happen before you actually commit.

00:09:13.580 --> 00:09:15.160
I mean, we have source control.

00:09:15.160 --> 00:09:17.280
I hope people are using source control.

00:09:17.280 --> 00:09:18.220
Yeah.

00:09:18.220 --> 00:09:19.160
But still.

00:09:19.160 --> 00:09:20.560
Awesome.

00:09:20.560 --> 00:09:24.320
So before we get to the next item, I want to tell you guys about DigitalOcean Spaces.

00:09:24.320 --> 00:09:33.740
So DigitalOcean Spaces is online object storage, file storage for your applications, and all the other things you might use something like Amazon S3 for.

00:09:34.160 --> 00:09:36.660
But it's much, much more affordable.

00:09:36.660 --> 00:09:42.600
Instead of being, say, $93 for the first terabyte of traffic, it's $5.

00:09:43.040 --> 00:09:46.340
And you get free inbound traffic, all sorts of really good stuff.

00:09:46.340 --> 00:09:50.480
And after that, it's still 10 times, nine times cheaper than AWS.

00:09:50.480 --> 00:09:51.980
So really great.

00:09:51.980 --> 00:09:52.760
Same APIs.

00:09:52.760 --> 00:09:54.640
You can just switch over there super easy.

00:09:55.020 --> 00:10:00.020
More or less just point your client at a different URL, and you're still doing the same type of thing.

00:10:00.020 --> 00:10:03.000
So check it out at do.co slash Python.

00:10:03.460 --> 00:10:11.980
Speaking of server code that wants to store stuff in places and link other people to it, have you ever created a SystemD service for Linux?

00:10:11.980 --> 00:10:12.740
I have not.

00:10:12.740 --> 00:10:13.320
I haven't either.

00:10:13.320 --> 00:10:17.260
It always seemed like kind of a complicated thing that you'd have to set up.

00:10:17.400 --> 00:10:23.400
So SystemD is the more modern sort of daemon service for at least Ubuntu.

00:10:23.400 --> 00:10:26.280
I think on other ones as well, but I only play with Ubuntu.

00:10:26.280 --> 00:10:29.080
So that's a really early one that I encountered on.

00:10:29.920 --> 00:10:38.160
And there's this guy who created a gist showing how to use a Python script as a SystemD daemon in the SystemD service.

00:10:38.160 --> 00:10:47.320
And then you can control it with like service control and all those sorts of things, just like you would say Nginx or Microwiski or some other major built-in server component.

00:10:47.320 --> 00:10:49.680
And it is super, super easy.

00:10:49.680 --> 00:10:55.320
You basically create a Python file, and you create this little .service file.

00:10:55.320 --> 00:10:56.460
Those are both in the gist.

00:10:56.880 --> 00:11:02.220
Copy and restart and location, run a few command line arguments to enable them and start them, and off it goes.

00:11:02.220 --> 00:11:11.240
You can just have a little while true, go do your stuff work in your Python script, and it'll just run indefinitely and even auto start when Linux boots.

00:11:11.240 --> 00:11:11.860
Oh, that's cool.

00:11:11.860 --> 00:11:12.920
And it's super easy, right?

00:11:12.920 --> 00:11:13.680
Are you looking at the code?

00:11:13.680 --> 00:11:14.200
I mean, it's like...

00:11:14.200 --> 00:11:14.460
Yeah.

00:11:14.460 --> 00:11:16.380
I mean, it's just a handful of lines of code.

00:11:16.380 --> 00:11:16.780
That's it.

00:11:16.780 --> 00:11:18.620
Yeah, and it's basically a configuration.

00:11:18.620 --> 00:11:22.180
It's probably like eight lines of configuration, half of which is like headers.

00:11:22.180 --> 00:11:24.080
So it's really, really super easy.

00:11:24.240 --> 00:11:31.240
So if you need to have stuff run in the background and just run with your system on Linux, check this out if you want to write that in Python.

00:11:31.240 --> 00:11:31.720
Nice.

00:11:31.720 --> 00:11:32.240
Cool.

00:11:32.240 --> 00:11:32.940
Yeah, for sure.

00:11:33.860 --> 00:11:36.120
So you were talking about pytest before.

00:11:36.120 --> 00:11:38.520
pytest is shiny and new again, right?

00:11:38.520 --> 00:11:39.480
Yes.

00:11:39.480 --> 00:11:42.720
There's a new version came out, pytest 3.3.

00:11:43.240 --> 00:11:51.420
And there's quite a few changes, one of which is they're not supporting a couple versions of Python anymore.

00:11:51.420 --> 00:11:56.000
I think it's 2.6 and 3.3 are out now.

00:11:56.000 --> 00:12:03.600
So you have to do either 2.7 and above or 3.7 or 3.4 and above.

00:12:03.740 --> 00:12:04.260
Yeah, that's right.

00:12:04.260 --> 00:12:08.000
The Python 3.3 just went out of support in its own right.

00:12:08.000 --> 00:12:09.000
So those are probably tied.

00:12:09.000 --> 00:12:09.940
I'm not sure about 2.6.

00:12:09.940 --> 00:12:12.620
There's a bunch of new features which are exciting.

00:12:12.620 --> 00:12:21.280
But the most exciting thing is just a visual thing for me is that pytest now displays a progress percentage while running tests.

00:12:21.680 --> 00:12:27.140
So you get along the right-hand side of your terminal window, you'll get like percentage of tests done.

00:12:27.140 --> 00:12:34.540
And I imagine it's based on just the number of – it does collections first and it's probably just the number of tests.

00:12:34.540 --> 00:12:38.660
Yeah, it probably doesn't go, okay, this one last time took 10 seconds.

00:12:38.660 --> 00:12:42.180
And this one took one, so you have – whatever, right?

00:12:42.180 --> 00:12:44.100
I don't know that for sure, but I'm guessing that.

00:12:44.100 --> 00:12:45.020
Yeah, yeah.

00:12:45.020 --> 00:12:49.580
It'd be awesome if it had kind of both, but I can totally see why that wouldn't make any sense.

00:12:49.700 --> 00:12:56.540
Yeah, and then one of the other things that pytest has always been great about is capturing standard out and standard error and display those.

00:12:56.540 --> 00:13:02.500
If there's – for test failures by default, you can display them all the time if you feel like it.

00:13:02.500 --> 00:13:09.140
And also, you can write tests around the captured output and test against that.

00:13:09.140 --> 00:13:16.640
And they've added built-in support for capturing the output from the standard logging module,

00:13:17.000 --> 00:13:20.600
which is quite helpful for people using the logging module.

00:13:20.600 --> 00:13:21.080
Oh, yeah.

00:13:21.080 --> 00:13:21.580
How nice.

00:13:21.580 --> 00:13:22.240
That's pretty cool.

00:13:22.240 --> 00:13:29.280
Now I've got to go out and test my entire book to make sure that it still runs against pytest 3.3.

00:13:29.280 --> 00:13:30.600
Ah, the joys of being an author.

00:13:30.600 --> 00:13:31.680
You're never done.

00:13:31.680 --> 00:13:35.600
Yeah, I'm pretty sure everything looks pretty compatible, so it shouldn't be an issue.

00:13:35.600 --> 00:13:36.120
That's cool.

00:13:36.120 --> 00:13:37.220
Think of it this way.

00:13:37.220 --> 00:13:41.940
Like someday it'll break bad enough you have to write a version to a second edition.

00:13:43.180 --> 00:13:44.360
Yeah, that's the plan.

00:13:44.360 --> 00:13:44.920
Think of those.

00:13:44.920 --> 00:13:46.200
Yeah, for sure.

00:13:46.200 --> 00:13:47.160
Cool.

00:13:47.160 --> 00:13:47.420
All right.

00:13:47.420 --> 00:13:54.980
So I want to wrap this episode up with something pretty straightforward, but also it kind of gives you a really unique technique.

00:13:55.500 --> 00:14:01.640
So it turns out that if you're going to create a dictionary, as we all know, there's multiple ways to do this in Python.

00:14:01.640 --> 00:14:04.980
Same for list, same for string, same for tuples, and so on.

00:14:04.980 --> 00:14:08.180
Like I could say D equals open curly, close curly.

00:14:08.180 --> 00:14:11.060
That's the sort of language way.

00:14:11.400 --> 00:14:16.780
Or there's the more type-driven way where I say D equals dict, open, close parenthesis, right?

00:14:16.780 --> 00:14:18.980
So you either use the curly braces or use the dict.

00:14:18.980 --> 00:14:22.220
Similarly, list or square brackets or set.

00:14:22.220 --> 00:14:24.320
I guess set you can't do it, but tuples, things like that.

00:14:24.320 --> 00:14:27.480
So there's the type way, and then there's the built-in way.

00:14:27.920 --> 00:14:31.620
It turns out that the built-in way is faster.

00:14:31.620 --> 00:14:32.780
Okay.

00:14:32.780 --> 00:14:37.280
That's kind of an interesting piece of trivia.

00:14:37.280 --> 00:14:44.640
But what's really interesting is this guy wrote an article called why D equals curly braces is faster than D equals dict.

00:14:44.640 --> 00:14:48.500
And he goes through the analysis, and he uses the dis module.

00:14:48.500 --> 00:14:54.380
And he goes through and he actually disassembles the line that uses curly braces and the line that uses dict

00:14:54.380 --> 00:15:00.580
and analyzes why the one is like 20% slower or whatever the numbers turn out to be.

00:15:00.580 --> 00:15:02.140
It's fun and nerdy.

00:15:02.140 --> 00:15:05.140
It looks like just one extra bytecode or something like that.

00:15:05.140 --> 00:15:05.640
Yeah.

00:15:05.640 --> 00:15:12.260
The main thing that makes it slow is when you use the type way, you're effectively calling a function.

00:15:12.260 --> 00:15:17.240
And when you're calling a function, it needs to load the global variables

00:15:17.240 --> 00:15:24.520
and check to see if that function is overridden in the local scope rather than in the major scope.

00:15:24.520 --> 00:15:30.600
So it can't be convinced that stir or dict or whatever is what the built-in one means.

00:15:30.600 --> 00:15:34.060
So it has to kind of load up the state and check it out and then carry on.

00:15:34.060 --> 00:15:36.420
And it turns out that that makes that slower.

00:15:36.420 --> 00:15:38.620
And so this is all interesting, right?

00:15:38.620 --> 00:15:42.420
But it's kind of just like a little trivia trick.

00:15:42.420 --> 00:15:45.440
But the reason I brought up this article is if you look farther down at the end,

00:15:45.440 --> 00:15:52.900
he analyzes something that has nothing to do with this whole dict versus curly thing.

00:15:52.900 --> 00:16:01.060
It says, let's suppose we're going to do some mathematical calculations with like math.floor and logarithms and so on.

00:16:01.060 --> 00:16:03.340
There's a way to structure it.

00:16:03.340 --> 00:16:09.120
We're using the functions directly out of, say, out of the globals that you've imported.

00:16:09.120 --> 00:16:12.460
So you say import math and then math.floor, math.log10, so on.

00:16:12.460 --> 00:16:15.980
And then there's another way to like pass those into the function.

00:16:15.980 --> 00:16:23.160
The passing it in means you get to skip that load global for really hot loops or really short functions that are called super frequently.

00:16:23.160 --> 00:16:30.280
And that's like 22% faster by just passing them in from the outside than calling them directly.

00:16:30.280 --> 00:16:33.000
So if you're really trying to optimize something,

00:16:33.000 --> 00:16:38.060
this is a super simple, non-obvious trick to get like a significant speedup.

00:16:38.060 --> 00:16:40.860
That actually to get around loading globals.

00:16:40.860 --> 00:16:41.860
Isn't that weird?

00:16:41.860 --> 00:16:42.340
Yeah.

00:16:42.340 --> 00:16:43.900
I didn't know you could get around that.

00:16:43.900 --> 00:16:44.720
So that's cool.

00:16:44.720 --> 00:16:45.460
I didn't either.

00:16:45.460 --> 00:16:46.780
Apparently you can.

00:16:46.780 --> 00:16:50.620
And I just think it's an interesting way of going like, all right, here's this incongruity.

00:16:50.620 --> 00:16:52.180
Like, why would these have any different speed?

00:16:52.180 --> 00:16:54.460
They're effectively doing the same thing in the end.

00:16:54.920 --> 00:16:58.660
And then using the dissimilar to analyze it and then seeing, okay, well, here's the problem.

00:16:58.660 --> 00:16:59.380
How do we get around that?

00:16:59.380 --> 00:17:01.200
Let's make this other unrelated thing faster.

00:17:01.200 --> 00:17:02.440
I think that's just fascinating.

00:17:02.440 --> 00:17:03.560
Yeah, that's pretty cool.

00:17:03.560 --> 00:17:03.980
For sure.

00:17:03.980 --> 00:17:05.120
All right.

00:17:05.120 --> 00:17:08.000
Well, that's pretty much it for our news this week, everyone.

00:17:08.000 --> 00:17:08.880
Hopefully.

00:17:08.880 --> 00:17:09.560
Enjoy it.

00:17:09.560 --> 00:17:11.560
I thought all of them were very, very cool.

00:17:11.560 --> 00:17:14.020
I do have one follow-up item for you, Brian.

00:17:14.020 --> 00:17:14.860
Okay, great.

00:17:14.860 --> 00:17:19.360
Remember I told you guys a couple of weeks ago about All Work, All Play, that weird esports

00:17:19.360 --> 00:17:21.660
championship thing that apparently has taken over?

00:17:21.660 --> 00:17:22.020
Yeah.

00:17:22.020 --> 00:17:26.380
So there's this article that came out in Ars Technica that caught my attention that's

00:17:26.380 --> 00:17:27.800
really closely related to that.

00:17:27.800 --> 00:17:29.360
And I love Ars Technica.

00:17:29.360 --> 00:17:34.140
It says, F1 esports is now more exciting than the real F1.

00:17:34.140 --> 00:17:38.560
It has in Formula One, like the many, many million dollar racing teams.

00:17:38.560 --> 00:17:42.780
And it says, look, watching the esports version is actually more interesting.

00:17:42.780 --> 00:17:45.400
And they go through and they talk about why that is.

00:17:45.400 --> 00:17:48.020
It was just like the first world championship of F1.

00:17:48.020 --> 00:17:53.080
And they have the 20-minute race video with real announcers and this super excited Italian

00:17:53.080 --> 00:17:54.820
guy as one of the announcers.

00:17:54.820 --> 00:17:58.000
And if you look through the comments, I think they might be right.

00:17:58.000 --> 00:18:02.660
I think esports F1 might actually be more interesting than real F1 racing.

00:18:02.660 --> 00:18:05.660
And I love racing things, like real racing, not game racing.

00:18:05.660 --> 00:18:06.700
That's kind of cool, though.

00:18:06.700 --> 00:18:08.060
I'll have to go check this out.

00:18:08.060 --> 00:18:08.680
Yeah, yeah.

00:18:08.680 --> 00:18:10.220
So if this sounds interesting to you guys, check it out.

00:18:10.220 --> 00:18:13.980
Watch that video for like five minutes and wait for the Italian announcer.

00:18:13.980 --> 00:18:14.780
He's awesome.

00:18:14.780 --> 00:18:16.500
All right.

00:18:16.500 --> 00:18:16.820
Great.

00:18:16.820 --> 00:18:21.200
Well, hopefully you guys can enjoy that and find some cool stuff in the news.

00:18:21.200 --> 00:18:23.540
Brian, thank you for sharing this with everyone.

00:18:23.540 --> 00:18:24.280
Yeah, thank you.

00:18:24.280 --> 00:18:24.580
You bet.

00:18:24.580 --> 00:18:24.820
Bye.

00:18:24.820 --> 00:18:27.920
Thank you for listening to Python Bytes.

00:18:27.920 --> 00:18:30.480
Follow the show on Twitter via at Python Bytes.

00:18:30.480 --> 00:18:33.360
That's Python Bytes as in B-Y-T-E-S.

00:18:33.360 --> 00:18:36.780
And get the full show notes at pythonbytes.fm.

00:18:36.780 --> 00:18:41.140
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:18:41.140 --> 00:18:43.840
We're always on the lookout for sharing something cool.

00:18:44.020 --> 00:18:47.240
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:18:47.240 --> 00:18:50.840
Thank you for listening and sharing this podcast with your friends and colleagues.

