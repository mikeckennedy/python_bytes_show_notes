
00:00:00.000 --> 00:00:02.100
- Hello and welcome to Python Bytes,


00:00:02.100 --> 00:00:03.780
where we deliver Python news and headlines


00:00:03.780 --> 00:00:05.460
directly to your earbuds.


00:00:05.460 --> 00:00:10.140
This is episode 292, recorded July 7th, 2022.


00:00:10.140 --> 00:00:11.140
I'm Michael Kennedy.


00:00:11.140 --> 00:00:12.420
- And I am Brian Okken.


00:00:12.420 --> 00:00:14.100
- Yeah, great to have you here, Brian.


00:00:14.100 --> 00:00:15.900
This episode is brought to you by us.


00:00:15.900 --> 00:00:18.660
Check out Brian's book, and if you want a course,


00:00:18.660 --> 00:00:19.900
check out Talk Python Training.


00:00:19.900 --> 00:00:22.420
Actually, a few more topics on that at the very end.


00:00:22.420 --> 00:00:24.700
Some cool stuff going on there I want to tell people about.


00:00:24.700 --> 00:00:27.680
Right now, I would like to hear about your first item,


00:00:27.680 --> 00:00:30.240
something rich, if you will.


00:00:30.240 --> 00:00:35.240
- Yeah, so it wouldn't be our Python Bytes podcast


00:00:35.240 --> 00:00:39.480
if we didn't talk about Will, Will McGugan


00:00:39.480 --> 00:00:43.600
and his rich project, but anyway.


00:00:43.600 --> 00:00:46.240
- Something built from rich almost always, yes.


00:00:46.240 --> 00:00:50.280
- Yeah, so Will tweeted out, "Fantastic today,


00:00:50.280 --> 00:00:54.560
"fantastic project from Phil Ewells, maybe?


00:00:54.560 --> 00:00:57.640
it generates screenshots of commands on


00:00:57.640 --> 00:01:01.720
the fly from Markdown files to keep them up to date.


00:01:01.720 --> 00:01:02.320
>> Okay.


00:01:02.320 --> 00:01:06.480
>> This is great. Let's say you want to do


00:01:06.480 --> 00:01:08.760
an output from a terminal output


00:01:08.760 --> 00:01:10.960
or from your command or something in your readme.


00:01:10.960 --> 00:01:15.600
It looks great if it's like here's a kitty cat.


00:01:15.600 --> 00:01:17.200
I mean, you're probably not going to put that in here.


00:01:17.200 --> 00:01:19.400
But for instance,


00:01:19.400 --> 00:01:24.440
you might have your help text and this looks beautiful.


00:01:24.440 --> 00:01:26.560
and that can just show up.


00:01:26.560 --> 00:01:28.120
- And so that's a Markdown file?


00:01:28.120 --> 00:01:30.740
- Well, yeah, so that's just this,


00:01:30.740 --> 00:01:33.500
you just stick this little line in your Markdown file


00:01:33.500 --> 00:01:38.500
and it runs what Rich Codecs does.


00:01:38.500 --> 00:01:40.600
Oh yeah, I forgot to say what it is.


00:01:40.600 --> 00:01:42.940
The project's called Rich Codecs.


00:01:42.940 --> 00:01:47.180
What it does is it looks for these image tags


00:01:47.180 --> 00:01:50.940
within your Markdown file, and if there's backticks,


00:01:50.940 --> 00:01:53.260
it figures that you wanna run that code.


00:01:53.260 --> 00:01:57.260
and it runs the code and then puts the output in this image file,


00:01:57.260 --> 00:01:58.860
and that's it, and that's enough.


00:01:58.860 --> 00:02:02.980
>> I see. Then includes that in your markdown as an image, right?


00:02:02.980 --> 00:02:05.380
>> Well, it's already there. It already shows up like this.


00:02:05.380 --> 00:02:06.980
It doesn't change your readme at all.


00:02:06.980 --> 00:02:08.380
It doesn't change your markdown file.


00:02:08.380 --> 00:02:11.380
It just generates the image from the code for you.


00:02:11.380 --> 00:02:13.820
Then you have this.


00:02:13.820 --> 00:02:17.580
This right here, so this is an image I'm sure generated from here.


00:02:17.580 --> 00:02:21.860
Then you can resize it and it's an image.


00:02:21.860 --> 00:02:24.860
It's a vector image, so it just resizes.


00:02:24.860 --> 00:02:26.320
How cool is that?


00:02:26.320 --> 00:02:27.940
>> That is really cool.


00:02:27.940 --> 00:02:30.860
>> You can run a command like this,


00:02:30.860 --> 00:02:31.940
just throw an image in there,


00:02:31.940 --> 00:02:34.340
in your markdown file or wherever.


00:02:34.340 --> 00:02:37.100
You can also do code snippets.


00:02:37.100 --> 00:02:41.420
You can give it this code snippet,


00:02:41.420 --> 00:02:44.200
I'm showing a snippet of some JSON,


00:02:44.200 --> 00:02:51.060
and it'll detect this comment out of your code,


00:02:51.060 --> 00:02:56.220
and then embed it as this image and show up like this.


00:02:56.220 --> 00:02:59.420
Colorize your code.


00:02:59.420 --> 00:03:03.100
One of the ideas around this is images are nice and they really


00:03:03.100 --> 00:03:06.300
make a readme really easy to,


00:03:06.300 --> 00:03:09.020
I mean, it's colorful, it's cool,


00:03:09.020 --> 00:03:13.580
and we like them, but it's hard to keep up to date.


00:03:13.580 --> 00:03:17.700
This way you can have it kept up to date all the time.


00:03:17.700 --> 00:03:19.940
What I really, really love about this is,


00:03:19.940 --> 00:03:21.280
You have all these things,


00:03:21.280 --> 00:03:22.680
you can do code snippets,


00:03:22.680 --> 00:03:25.900
you can even do config files.


00:03:25.900 --> 00:03:29.400
You can have, if you want just to generate the image and


00:03:29.400 --> 00:03:31.960
you're not referencing it from your readme,


00:03:31.960 --> 00:03:34.160
maybe you're referencing somewhere else or something,


00:03:34.160 --> 00:03:37.500
you can have it generated from a config file.


00:03:37.500 --> 00:03:41.820
But the cool thing about all of this is that he's got it


00:03:41.820 --> 00:03:45.520
set up for GitHub Actions.


00:03:45.520 --> 00:03:49.540
You just stick this bit of code within your GitHub Actions,


00:03:49.540 --> 00:03:52.260
and it'll regenerate your images for you.


00:03:52.260 --> 00:03:54.620
It even does, if there's any changes,


00:03:54.620 --> 00:03:55.900
it even does a commit,


00:03:55.900 --> 00:03:57.700
makes your changes back.


00:03:57.700 --> 00:03:58.860
>> That's pretty cool.


00:03:58.860 --> 00:03:59.500
>> Yeah.


00:03:59.500 --> 00:04:01.220
>> Yeah, that's fantastic.


00:04:01.220 --> 00:04:01.980
>> Really sweet.


00:04:01.980 --> 00:04:03.020
>> You check in your readme,


00:04:03.020 --> 00:04:05.820
the action runs and then it rebuilds the graphics.


00:04:05.820 --> 00:04:07.340
>> Yes, exactly.


00:04:07.340 --> 00:04:07.820
>> Cool.


00:04:07.820 --> 00:04:10.180
>> Then you got a nice looking readme with just like


00:04:10.180 --> 00:04:12.940
this little tiny line of code in your readme.


00:04:12.940 --> 00:04:13.820
>> Nice.


00:04:13.820 --> 00:04:14.500
>> Pretty neat.


00:04:14.500 --> 00:04:17.380
>> Yeah, that's a cool project. Very nice.


00:04:17.380 --> 00:04:26.740
All right. Well, let's jump over to this one, which is sent in to us by Roman Wright.


00:04:26.740 --> 00:04:32.660
And it's actually a project by Rami Awar. And the project is called, scroll down,


00:04:32.660 --> 00:04:40.900
get this right, Pydastic. So the idea is, it says, Rami says, inspired by Sebastian Ramirez's


00:04:40.900 --> 00:04:44.120
SQL model and Roman the writes Beanie.


00:04:44.120 --> 00:04:46.280
So SQL model, we've talked about that.


00:04:46.280 --> 00:04:50.920
That is, identic models that are also SQLAlchemy models.


00:04:50.920 --> 00:04:54.240
So basically a database layer on top of Async that,


00:04:54.240 --> 00:04:56.800
on SQLAlchemy that you can do like Async stuff and so on.


00:04:56.800 --> 00:04:58.840
That is built on Pydantic.


00:04:58.840 --> 00:05:01.800
And then Beanie is the same thing built on top of Motor,


00:05:01.800 --> 00:05:04.320
but the models are Pydantic models.


00:05:04.320 --> 00:05:09.080
So here is another one, like an Elasticsearch ORM


00:05:09.080 --> 00:05:12.020
do CRUD results and bulk operations and so on,


00:05:12.020 --> 00:05:15.960
built on Pydantic but now talking to Elasticsearch. How cool is that?


00:05:15.960 --> 00:05:18.000
>> Oh, that is very cool. Yeah.


00:05:18.000 --> 00:05:20.080
>> Yeah. So if you're going to do an Elasticsearch,


00:05:20.080 --> 00:05:22.680
and I feel like this is one of those tools that I don't use,


00:05:22.680 --> 00:05:25.880
but I'm like, "Oh, I should probably learn this because it seems really useful."


00:05:25.880 --> 00:05:28.920
So let's take a step back real quick.


00:05:28.920 --> 00:05:32.800
So Elasticsearch is part of the Elastic stack.


00:05:32.800 --> 00:05:35.880
There's the whole elastic.co company and so on.


00:05:35.880 --> 00:05:39.160
But the core of this is the open source Elasticsearch,


00:05:39.160 --> 00:05:42.920
which is a distributed RESTful search and analytics engine


00:05:42.920 --> 00:05:45.200
capable of a bunch of different things,


00:05:45.200 --> 00:05:48.580
stores your data for lightning fast search,


00:05:48.580 --> 00:05:52.320
fine-tune relevancy, ranking of your search and so on,


00:05:52.320 --> 00:05:54.640
and basically search and analytics.


00:05:54.640 --> 00:05:56.440
If you want to do that,


00:05:56.440 --> 00:06:00.440
but you want to have your models be cool Python Pydantic models,


00:06:00.440 --> 00:06:03.360
well, this Pydastic thing is the way to go.


00:06:03.360 --> 00:06:05.680
>> Nice. Fun name too.


00:06:05.680 --> 00:06:08.600
So to get, it does, these all have fun names.


00:06:08.600 --> 00:06:11.720
So the way you do it is, you know, if you know Pydantic,


00:06:11.720 --> 00:06:13.520
you basically know how to do this.


00:06:13.520 --> 00:06:17.020
You create a class and it derives from now an ES model,


00:06:17.020 --> 00:06:19.940
but you can bet that that's also like a derived class


00:06:19.940 --> 00:06:22.440
from a Pydantic base model, model base,


00:06:22.440 --> 00:06:23.280
I think it's model base.


00:06:23.280 --> 00:06:25.640
Anyway, the base class of Pydantic.


00:06:25.640 --> 00:06:28.920
And then you just say like name str, phone optional str,


00:06:28.920 --> 00:06:32.060
and even you can do the Pydantic field stuff.


00:06:32.060 --> 00:06:33.680
So you could say it's a date time,


00:06:33.680 --> 00:06:37.320
but it's a field with a default factory of DateTime.now.


00:06:37.320 --> 00:06:38.760
- Oh. - Right, all the cool stuff


00:06:38.760 --> 00:06:41.220
that you would do for a gigantic model.


00:06:41.220 --> 00:06:44.260
And then you can add a meta class


00:06:44.260 --> 00:06:47.920
to add information over to Elastic.


00:06:47.920 --> 00:06:51.080
So for example, the meta here says index is user.


00:06:51.080 --> 00:06:52.660
Then you just set up a connection,


00:06:52.660 --> 00:06:55.380
you create one of these objects and you save it.


00:06:55.380 --> 00:06:58.080
You can change its name and save again.


00:06:58.080 --> 00:07:01.680
Standard ORM stuff, you can get one of these objects by ID


00:07:01.680 --> 00:07:04.880
And yeah, you can even create new ones, delete ones.


00:07:04.880 --> 00:07:05.720
Pretty straightforward.


00:07:05.720 --> 00:07:07.920
The other thing to realize is it uses


00:07:07.920 --> 00:07:10.240
the unit of work design pattern.


00:07:10.240 --> 00:07:13.760
So it says, this is based on SQL alchemy sessions,


00:07:13.760 --> 00:07:16.720
which is the unit of work applied to SQL alchemy.


00:07:16.720 --> 00:07:18.860
So, you know, by the transitive property.


00:07:18.860 --> 00:07:20.580
Anyway, you create a context manager


00:07:20.580 --> 00:07:22.680
and then you do a bunch of work and then you commit it.


00:07:22.680 --> 00:07:24.600
So you can transactionally make changes


00:07:24.600 --> 00:07:26.160
to your data in Elasticsearch.


00:07:26.160 --> 00:07:27.000
- Oh, that's cool.


00:07:27.000 --> 00:07:27.840
Yeah, I like that.


00:07:27.840 --> 00:07:28.900
- Yeah, and that's pretty much it, right?


00:07:28.900 --> 00:07:29.880
You can query.


00:07:29.880 --> 00:07:33.800
You know what, there is one, I feel like this is a little bit ironic.


00:07:33.800 --> 00:07:37.040
Uh, the one part missing still haven't got an idea how to wrap the


00:07:37.040 --> 00:07:38.880
underlying API productively.


00:07:38.880 --> 00:07:42.240
So, how do you search elastic search?


00:07:42.240 --> 00:07:44.640
I'm not really sure yet, but you could put something to it.


00:07:44.640 --> 00:07:45.820
I love that.


00:07:45.820 --> 00:07:49.020
It just says that it just says in the docs still haven't got an idea


00:07:49.020 --> 00:07:50.480
of how to wrap the underlying API.


00:07:50.480 --> 00:07:52.160
I'm anyone who got an idea.


00:07:52.160 --> 00:07:57.100
So if, shoot me a thought, if you've got some ideas, out there,


00:07:57.100 --> 00:07:58.740
maybe, maybe y'all could figure it out.


00:07:58.740 --> 00:08:00.780
So I guess when you do a regular query,


00:08:00.780 --> 00:08:02.260
you get these results back.


00:08:02.260 --> 00:08:03.200
Maybe it's a dictionary.


00:08:03.200 --> 00:08:05.140
I haven't actually tried the raw API


00:08:05.140 --> 00:08:06.340
for Elasticsearch either.


00:08:06.340 --> 00:08:08.700
But if you get a dictionary back or list of dictionaries,


00:08:08.700 --> 00:08:11.980
then you can just jam those into your Pydantic models anyway.


00:08:11.980 --> 00:08:14.060
Right, you can transform them back, but yeah.


00:08:14.060 --> 00:08:15.740
Anyway, if you're doing Elasticsearch stuff,


00:08:15.740 --> 00:08:16.860
you know, check this out.


00:08:16.860 --> 00:08:18.100
It looks pretty cool.


00:08:18.100 --> 00:08:21.380
And if you have ideas on how to address that,


00:08:21.380 --> 00:08:23.500
the final bit to do the search in a good way,


00:08:23.500 --> 00:08:25.660
then you know, maybe take up that conversation.


00:08:25.660 --> 00:08:26.780
- Yeah, nice.


00:08:26.780 --> 00:08:27.940
- Yeah. - Cool.


00:08:27.940 --> 00:08:30.320
- Well, I'm gonna stick with kind of some web stuff


00:08:30.320 --> 00:08:34.240
for a minute and talk about PyScript again.


00:08:34.240 --> 00:08:37.320
So we've covered PyScript several times, I think.


00:08:37.320 --> 00:08:40.480
And so, but I ran across this article called


00:08:40.480 --> 00:08:43.000
Three Things to Know Before Building PyScript.


00:08:43.000 --> 00:08:45.620
And I gotta say one of the, I haven't played,


00:08:45.620 --> 00:08:47.040
you've made a little application


00:08:47.040 --> 00:08:48.540
with PyScript already, right?


00:08:48.540 --> 00:08:50.000
- Yes, I have, and I loved it.


00:08:50.000 --> 00:08:51.720
- Yeah. - It's very cool.


00:08:51.720 --> 00:08:53.200
- So I hadn't played with it yet.


00:08:53.200 --> 00:08:55.840
And one of the things I love about this


00:08:55.840 --> 00:08:57.860
is it's got a little crash course


00:08:57.860 --> 00:08:59.360
and it's really short.


00:08:59.360 --> 00:09:02.640
The crash course is you gotta stick this in the head


00:09:02.640 --> 00:09:03.840
and that's it.


00:09:03.840 --> 00:09:08.320
And then in the body, you wrap some of your Python code


00:09:08.320 --> 00:09:11.820
in PyScript and when you print things, it comes out.


00:09:11.820 --> 00:09:13.720
That's pretty much it, crash course.


00:09:13.720 --> 00:09:15.720
That's pretty easy.


00:09:15.720 --> 00:09:16.880
- One thing I would like to throw in there


00:09:16.880 --> 00:09:21.800
about the script bit, it's not exactly obvious


00:09:21.800 --> 00:09:22.960
in a lot of the documentation,


00:09:22.960 --> 00:09:25.600
but you can host your own runtime


00:09:25.600 --> 00:09:28.940
of the PyOA diet and PyScript web assemblies and stuff.


00:09:28.940 --> 00:09:29.780
- Okay.


00:09:29.780 --> 00:09:30.980
- So this just downloads it off of there,


00:09:30.980 --> 00:09:33.640
which I don't think the caching works super well from there,


00:09:33.640 --> 00:09:36.760
but you can put it in your own place


00:09:36.760 --> 00:09:38.420
and cache it and so on.


00:09:38.420 --> 00:09:39.360
- Okay, so--


00:09:39.360 --> 00:09:41.060
- So I think that's the PyEMV or something.


00:09:41.060 --> 00:09:42.360
So if people are checking that out


00:09:42.360 --> 00:09:44.900
and you maybe wanna pin it so it's stable


00:09:44.900 --> 00:09:46.960
or something like that, then you can do that.


00:09:46.960 --> 00:09:48.520
- Or just make sure it's on your server


00:09:48.520 --> 00:09:50.520
so that you're not pulling it off of their server


00:09:50.520 --> 00:09:51.680
all the time or something.


00:09:51.680 --> 00:09:53.480
- Right, 'cause maybe they'll change it


00:09:53.480 --> 00:09:54.320
or who knows, right?


00:09:54.320 --> 00:09:55.140
- Right. - Exactly.


00:09:55.140 --> 00:09:57.980
>> I was curious about that.


00:09:57.980 --> 00:10:00.900
When you're just learning and playing around with it,


00:10:00.900 --> 00:10:02.180
you can obviously use it.


00:10:02.180 --> 00:10:04.300
>> Yeah, just drop the script link in there.


00:10:04.300 --> 00:10:07.340
>> Yeah. Just a few snippets,


00:10:07.340 --> 00:10:09.280
and I forgot to mention who wrote this,


00:10:09.280 --> 00:10:13.020
Brandon Riggs wrote this.


00:10:13.020 --> 00:10:18.180
The first thing that he brings up is package indentation matters.


00:10:18.180 --> 00:10:20.300
I probably would have messed this up.


00:10:20.300 --> 00:10:23.500
This is interesting. You can do a high ENV,


00:10:23.500 --> 00:10:28.460
and in one of those tags, HTML tags.


00:10:28.460 --> 00:10:32.420
But the packages have to be,


00:10:32.420 --> 00:10:34.900
have dashes and they have to be all the way to the left.


00:10:34.900 --> 00:10:38.180
So you can't have those indented with your IAM.


00:10:38.180 --> 00:10:42.380
>> Yeah, it's nuts because it's basically embedded YAML.


00:10:42.380 --> 00:10:43.140
>> Okay.


00:10:43.140 --> 00:10:45.600
>> YAML is sensitive to indentation,


00:10:45.600 --> 00:10:49.340
but white space is not supposed to matter in HTML.


00:10:49.340 --> 00:10:51.080
So if you do auto reformat of the doc,


00:10:51.080 --> 00:10:52.460
it'll keep breaking it. So you got to be


00:10:52.460 --> 00:10:53.820
super careful with that section.


00:10:53.820 --> 00:10:54.860
>> Interesting.


00:10:54.860 --> 00:10:56.100
>> Yeah, it's a pain.


00:10:56.100 --> 00:10:57.760
>> For something to watch out for,


00:10:57.760 --> 00:11:00.100
the next one is local file access,


00:11:00.100 --> 00:11:02.180
which I'm like, I don't believe this,


00:11:02.180 --> 00:11:04.700
and I had to try it out and play with it.


00:11:04.700 --> 00:11:08.940
Because normally you don't access local files through JavaScript,


00:11:08.940 --> 00:11:13.660
but you can apparently through this Python thing, sort of.


00:11:13.660 --> 00:11:17.620
You have to set up paths in your environment,


00:11:17.620 --> 00:11:19.420
and then I guess,


00:11:19.420 --> 00:11:21.460
Was the slash mean just the current directory


00:11:21.460 --> 00:11:23.460
or something like that, or I don't know, slash.


00:11:23.460 --> 00:11:25.780
- Yeah, I think what it means,


00:11:25.780 --> 00:11:28.860
those have to be static files on your web server.


00:11:28.860 --> 00:11:30.860
So this says, for people listening,


00:11:30.860 --> 00:11:33.020
forward slash views.csv,


00:11:33.020 --> 00:11:34.620
you need to be able to take that URL


00:11:34.620 --> 00:11:37.300
and jam it into just a web browser and see the file.


00:11:37.300 --> 00:11:40.840
So if it was like yourserver.com/views.csv,


00:11:40.840 --> 00:11:43.340
that's the little fragment without the domain that goes there.


00:11:43.340 --> 00:11:45.180
- Yeah, and in this part, when I was trying it


00:11:45.180 --> 00:11:47.460
just on my own, but the first part actually,


00:11:47.460 --> 00:11:51.140
You can run a little PyScript thing just as a file,


00:11:51.140 --> 00:11:52.940
an HTML file on your computer.


00:11:52.940 --> 00:11:56.020
But if you're doing this, the local file thing,


00:11:56.020 --> 00:11:58.100
it needs a server, so you need to run a little.


00:11:58.100 --> 00:12:02.740
But there's ways to do it, just a little Python server.


00:12:02.740 --> 00:12:04.460
So that's interesting.


00:12:04.460 --> 00:12:08.220
And his example is using a CSV file here


00:12:08.220 --> 00:12:13.540
to just import pandas and use pandas to read a CSV file,


00:12:13.540 --> 00:12:16.140
which is pretty sweet.


00:12:16.140 --> 00:12:16.920
>> Yeah.


00:12:16.920 --> 00:12:19.680
>> The last bit is DOM manipulation,


00:12:19.680 --> 00:12:22.480
which of course you'd want to do


00:12:22.480 --> 00:12:26.800
within if you're going to stick some Python code in your PyScript.


00:12:26.800 --> 00:12:30.300
But there's just some gotchas that he ran across


00:12:30.300 --> 00:12:33.240
or just some things that weren't obvious to him.


00:12:33.240 --> 00:12:36.320
I guess for buttons,


00:12:36.320 --> 00:12:41.520
there's a pys-onclick,


00:12:41.520 --> 00:12:45.600
and then there's how you get the element.


00:12:45.600 --> 00:12:49.920
you can get an element through the document and then you can put it back.


00:12:49.920 --> 00:12:53.680
You can do PyScript write and write to an element.


00:12:53.680 --> 00:12:57.440
It's nice to have this little example to be able to see.


00:12:57.440 --> 00:12:59.320
It's good to try this out.


00:12:59.320 --> 00:13:01.780
On this PyScript write,


00:13:01.780 --> 00:13:05.320
it's going to this outp.


00:13:05.320 --> 00:13:08.160
Well, that shows up as an ID in a div somewhere.


00:13:08.160 --> 00:13:12.440
You can try to specify where you want to write to.


00:13:12.440 --> 00:13:22.040
Yeah, and then how to get this kind of example is kind of nice because it has like the grabbing from an input field and how to deal with the click and stuff like that.


00:13:22.040 --> 00:13:24.040
Yeah, that's really nice.


00:13:24.040 --> 00:13:30.540
Can you go back really quick to where you have the PIE and V section and the static file, the CSV?


00:13:30.540 --> 00:13:31.040
Yeah.


00:13:31.040 --> 00:13:32.440
A little bit further, a little further back.


00:13:32.440 --> 00:13:32.940
A little further.


00:13:32.940 --> 00:13:39.340
So one of the things that's really cool is you can actually, in addition to these CSV files, you can put Python files in there.


00:13:39.340 --> 00:13:40.340
Yeah, I was curious about that.


00:13:40.340 --> 00:13:42.460
one to the other, you can say like,


00:13:42.460 --> 00:13:44.700
if you had like a helper.py,


00:13:44.700 --> 00:13:47.300
you could say somewhere else, import helper,


00:13:47.300 --> 00:13:49.460
and then call helper.suchandsuch or whatever.


00:13:49.460 --> 00:13:52.340
And that's all you gotta do to kind of like register


00:13:52.340 --> 00:13:53.940
where the modules live.


00:13:53.940 --> 00:13:54.780
- Okay.


00:13:54.780 --> 00:13:56.300
- So you can break your code up and you don't have,


00:13:56.300 --> 00:13:59.320
the example here shows it all written in the HTML file,


00:13:59.320 --> 00:14:00.540
which is kind of insane.


00:14:00.540 --> 00:14:02.740
And you should put those into separate files.


00:14:02.740 --> 00:14:04.460
You wouldn't do that with JavaScript generally.


00:14:04.460 --> 00:14:05.300
- Right.


00:14:05.300 --> 00:14:06.600
- So you shouldn't do it with Python either, right?


00:14:06.600 --> 00:14:09.060
So that's, it's really easy to use that path thing


00:14:09.060 --> 00:14:12.020
to break it up across Python files,


00:14:12.020 --> 00:14:13.860
you get full auto-complete and everything with.


00:14:13.860 --> 00:14:15.060
- And then same thing then,


00:14:15.060 --> 00:14:17.700
would your Python file have to be served


00:14:17.700 --> 00:14:19.140
so you could just stick it on a--


00:14:19.140 --> 00:14:20.420
- Yes. - Yeah, just server.


00:14:20.420 --> 00:14:23.100
- Yeah, so that part, the client side,


00:14:23.100 --> 00:14:26.100
so weird to say, the client side Python files


00:14:26.100 --> 00:14:29.460
have to live in a static, servable section.


00:14:29.460 --> 00:14:31.060
- Okay. - Normally that's not possible.


00:14:31.060 --> 00:14:32.540
Normally that's blocked, as it should be.


00:14:32.540 --> 00:14:33.620
- Yeah, nice.


00:14:33.620 --> 00:14:35.680
Anyway, interesting.


00:14:35.680 --> 00:14:38.420
This was enough to get me to try it,


00:14:38.420 --> 00:14:41.600
to try PyScript because it was pretty fun.


00:14:41.600 --> 00:14:42.440
It was pretty cool.


00:14:42.440 --> 00:14:45.140
- Yeah, it's very fun and it's quite neat,


00:14:45.140 --> 00:14:46.180
all the things you can build.


00:14:46.180 --> 00:14:48.880
And I think we're just at the beginning, right?


00:14:48.880 --> 00:14:51.040
A lot of the examples are data science oriented,


00:14:51.040 --> 00:14:52.560
but some of the things you showed,


00:14:52.560 --> 00:14:55.400
like the events and the DOM manipulation and whatnot,


00:14:55.400 --> 00:14:59.600
you can build full-fledged JavaScript run-in style apps.


00:14:59.600 --> 00:15:02.900
They don't have to be only showing graphs and data frames.


00:15:02.900 --> 00:15:05.960
- Right, and I think we're gonna see some interesting stuff


00:15:05.960 --> 00:15:10.960
because like I said, if you serve up your extra helper file,


00:15:10.960 --> 00:15:14.840
or it basically might be most of your code actually


00:15:14.840 --> 00:15:19.320
is in these extra files, then we really can,


00:15:19.320 --> 00:15:23.400
I mean, do most of your code and do demos


00:15:23.400 --> 00:15:25.500
and it's all live and everything,


00:15:25.500 --> 00:15:26.340
and that'll be pretty cool.


00:15:26.340 --> 00:15:27.240
- Yeah, it's gonna be fantastic.


00:15:27.240 --> 00:15:30.720
- Now when I tried this, the delay actually surprised me.


00:15:30.720 --> 00:15:32.980
It shouldn't surprise me, 'cause it's pulling in


00:15:32.980 --> 00:15:35.420
the whole whatever, the PyScript library and everything,


00:15:35.420 --> 00:15:38.080
but it does like this little spinny wheel thing


00:15:38.080 --> 00:15:39.820
and you gotta wait a few seconds.


00:15:39.820 --> 00:15:41.340
Now for a lot of applicants,


00:15:41.340 --> 00:15:42.500
and I think that's one of the reasons


00:15:42.500 --> 00:15:45.220
why I think data scientists could really take off quickly


00:15:45.220 --> 00:15:47.060
is because they're not gonna,


00:15:47.060 --> 00:15:49.580
it's an internal thing, you're not bothered by it.


00:15:49.580 --> 00:15:51.380
It's not something I would,


00:15:51.380 --> 00:15:52.360
I don't think I,


00:15:52.360 --> 00:15:55.320
I'd like it to be the point where you could really use Python


00:15:55.320 --> 00:15:58.780
instead of JavaScript in a customer application


00:15:58.780 --> 00:16:01.460
or something, but I don't think it's gonna be a while.


00:16:01.460 --> 00:16:03.060
- Yeah, it's gonna be a while before you see it


00:16:03.060 --> 00:16:05.180
in like a landing page scenario,


00:16:05.180 --> 00:16:08.340
but you may well see it in the equivalent of Gmail,


00:16:08.340 --> 00:16:10.240
but internal, you know, like that kind of app


00:16:10.240 --> 00:16:12.080
where you open it and you stay on there for a while.


00:16:12.080 --> 00:16:12.920
- Yeah, that's true.


00:16:12.920 --> 00:16:14.300
- Especially if it's an internal app, yeah.


00:16:14.300 --> 00:16:16.360
- Some backend stuff, yeah, sure.


00:16:16.360 --> 00:16:18.920
- Yeah, if you know it, well, I gotta log into this thing


00:16:18.920 --> 00:16:22.000
and I sit and then like, so the video that I did


00:16:22.000 --> 00:16:25.080
last month or so was about how do you host that


00:16:25.080 --> 00:16:26.440
and then do a progressive web app


00:16:26.440 --> 00:16:27.880
so that it stores that offline,


00:16:27.880 --> 00:16:31.080
in which case the web app startup time is like one second.


00:16:31.080 --> 00:16:33.040
Always, like it's really, really quick.


00:16:33.040 --> 00:16:34.960
If you get it off of the server, like they list here,


00:16:34.960 --> 00:16:35.920
that it takes a lot longer.


00:16:35.920 --> 00:16:36.680
So anyway.


00:16:36.680 --> 00:16:37.920
>> Cool. Let's try that next.


00:16:37.920 --> 00:16:41.400
>> But yeah, I'm super excited about this. This is great.


00:16:41.400 --> 00:16:44.000
All right. What do I have next? Let's see.


00:16:44.000 --> 00:16:45.640
We covered these.


00:16:45.640 --> 00:16:47.640
Next up, more fun names.


00:16:47.640 --> 00:16:49.800
This one comes to us from Sean Koenig,


00:16:49.800 --> 00:16:51.440
and it says, "Hey,


00:16:51.440 --> 00:16:52.800
this might be a good one.


00:16:52.800 --> 00:16:54.000
You like punny names."


00:16:54.000 --> 00:16:56.040
So this is Dissnake.


00:16:56.040 --> 00:16:57.960
D-I-S-snake.


00:16:57.960 --> 00:16:59.000
>> Dissnake.


00:16:59.000 --> 00:17:03.740
>> Dissnake. So Dissnake is a modern.


00:17:03.740 --> 00:17:07.140
I agree with that, but you'll see in a second, easy to use feature, rich,


00:17:07.140 --> 00:17:11.480
async API wrapper in Python for that or discord.


00:17:11.480 --> 00:17:12.000
Okay.


00:17:12.000 --> 00:17:15.560
So discord being the, yeah, like the community place, there's a lot


00:17:15.560 --> 00:17:18.680
of stuff happening there, you know, it's a little, it feels a slightly


00:17:18.680 --> 00:17:22.240
different role than Slack and teams, but you know, kind of more community


00:17:22.240 --> 00:17:24.360
oriented rather than company oriented.


00:17:24.360 --> 00:17:25.160
I suppose.


00:17:25.160 --> 00:17:26.920
Although you can sort of do that with Slack.


00:17:26.920 --> 00:17:29.060
It's not really like it's focused.


00:17:29.060 --> 00:17:33.000
It's more, some of the people jammed it into, like, for example, if you want


00:17:33.000 --> 00:17:37.000
to save the history of your community and you're doing Slack, you've got to pay per


00:17:37.000 --> 00:17:40.480
user. But it's like, if it's a public community, like everyone who randomly shows up, you're


00:17:40.480 --> 00:17:45.880
like $8 a month for them too. Oh no. Right. So for lots of reasons, for gaming and others,


00:17:45.880 --> 00:17:50.120
Discord is very popular. But what you can do is you can create bots for your community


00:17:50.120 --> 00:17:56.140
that do fun things. And this is a way to do that fun and easily in Python. So features


00:17:56.140 --> 00:18:02.640
include a modern async and await API. One of the problems apparently you run into is


00:18:02.640 --> 00:18:05.960
is you can overrun your rate limit by being too chatty.


00:18:05.960 --> 00:18:08.380
So it has built in like rate limiting


00:18:08.380 --> 00:18:09.680
so it doesn't destroy,


00:18:09.680 --> 00:18:12.560
it doesn't get 409 too many requests errors.


00:18:12.560 --> 00:18:14.440
It has a really cool command extension


00:18:14.440 --> 00:18:15.800
you'll see in a moment,


00:18:15.800 --> 00:18:19.760
object oriented and both optimized for speed and memory.


00:18:19.760 --> 00:18:21.500
Okay, so that's pretty cool.


00:18:21.500 --> 00:18:22.800
Probably the best way to understand


00:18:22.800 --> 00:18:25.720
is to just check out the quick start.


00:18:25.720 --> 00:18:26.880
So here's a minimal bot.


00:18:26.880 --> 00:18:27.720
Here's what you do Brian,


00:18:27.720 --> 00:18:30.560
you import Disnake and you create a client


00:18:30.560 --> 00:18:32.400
with a Disnake.client


00:18:32.400 --> 00:18:34.800
and then you call, you create some functions,


00:18:34.800 --> 00:18:37.520
you decorate them, and then you say client.run,


00:18:37.520 --> 00:18:38.920
and you give your API token.


00:18:38.920 --> 00:18:41.720
So then you just write regular async functions.


00:18:41.720 --> 00:18:44.300
It handles the execution of the async functions,


00:18:44.300 --> 00:18:45.600
but they need to be async.


00:18:45.600 --> 00:18:48.360
And you just say, here's an event for onReady.


00:18:48.360 --> 00:18:49.200
- Okay.


00:18:49.200 --> 00:18:50.240
- Here's an event onMessage.


00:18:50.240 --> 00:18:53.500
So if somebody sends a message to that community,


00:18:53.500 --> 00:18:55.960
then it's gonna call back into here straight away.


00:18:55.960 --> 00:18:56.800
- Oh, interesting.


00:18:56.800 --> 00:18:58.080
- All right, so just this function,


00:18:58.080 --> 00:18:59.680
this onMessage function gets called


00:18:59.680 --> 00:19:01.400
every time a message happens,


00:19:01.400 --> 00:19:04.040
including if the thing itself sends a message


00:19:04.040 --> 00:19:05.620
or the account itself.


00:19:05.620 --> 00:19:07.500
So it sort of checks to make sure it doesn't go


00:19:07.500 --> 00:19:09.440
into like some sort of infinite loop


00:19:09.440 --> 00:19:12.160
where it sends out messages if you send a message,


00:19:12.160 --> 00:19:13.000
but it just checks,


00:19:13.000 --> 00:19:15.320
hey, if you send the string dollar hello,


00:19:15.320 --> 00:19:17.000
it'll send back hello.


00:19:17.000 --> 00:19:19.220
The dollar means send this to the bot.


00:19:19.220 --> 00:19:20.060
You know what I mean?


00:19:20.060 --> 00:19:20.880
- Okay.


00:19:20.880 --> 00:19:21.720
- In this world.


00:19:21.720 --> 00:19:23.840
So yeah, that's pretty much how it works.


00:19:23.840 --> 00:19:24.980
It's kind of interesting,


00:19:24.980 --> 00:19:26.480
but if you look at the commands


00:19:26.480 --> 00:19:28.040
then it gets way more powerful.


00:19:28.040 --> 00:19:30.320
So the commands are what people would probably think of


00:19:30.320 --> 00:19:31.720
like what I want to do with a bot.


00:19:31.720 --> 00:19:32.960
So with this minimal bot,


00:19:32.960 --> 00:19:34.800
what you do is you sync the events


00:19:34.800 --> 00:19:37.080
like on message and ready and such.


00:19:37.080 --> 00:19:38.200
But with the commands,


00:19:38.200 --> 00:19:40.880
you can go over here to the import the bot thing


00:19:40.880 --> 00:19:43.720
and say @decorate another async function,


00:19:43.720 --> 00:19:45.440
@bot decorate command,


00:19:45.440 --> 00:19:46.920
and this one's called foo.


00:19:46.920 --> 00:19:48.240
So when that's the case,


00:19:48.240 --> 00:19:50.260
you know, it takes arguments and so on.


00:19:50.260 --> 00:19:52.940
In Discord, you can write $foo,


00:19:52.940 --> 00:19:53.840
and then other stuff,


00:19:53.840 --> 00:19:55.560
and that other stuff goes to the argument.


00:19:55.560 --> 00:19:58.200
So all you gotta do is have a single function


00:19:58.200 --> 00:19:59.040
with that name,


00:19:59.040 --> 00:20:00.240
and you put the decorator on it,


00:20:00.240 --> 00:20:02.700
And now all of a sudden that's a command in Discord


00:20:02.700 --> 00:20:03.740
that talks to the bot.


00:20:03.740 --> 00:20:05.060
- That's cool, yeah.


00:20:05.060 --> 00:20:06.120
- Isn't that easy? - Yeah.


00:20:06.120 --> 00:20:08.560
- Yeah, so there's some other examples.


00:20:08.560 --> 00:20:11.100
You can register your bot with a prefix.


00:20:11.100 --> 00:20:12.780
So you could use, I don't know,


00:20:12.780 --> 00:20:15.940
exclamation versus dollar versus,


00:20:15.940 --> 00:20:17.140
whatever it is you want to do.


00:20:17.140 --> 00:20:19.340
And by default, the command name


00:20:19.340 --> 00:20:20.880
is the same as the function name,


00:20:20.880 --> 00:20:24.140
but you can also pass in a name.


00:20:24.140 --> 00:20:25.900
Like for example, if the name is list,


00:20:25.900 --> 00:20:27.080
can't have a function called list


00:20:27.080 --> 00:20:28.920
'cause it'll freak out what list means.


00:20:28.920 --> 00:20:30.740
So you can give it a name


00:20:30.740 --> 00:20:32.620
and then use a different function name and so on.


00:20:32.620 --> 00:20:35.160
And then again, passing arguments and such.


00:20:35.160 --> 00:20:36.500
So there's some cool little examples


00:20:36.500 --> 00:20:38.400
of they're saying $test hello


00:20:38.400 --> 00:20:40.620
and the documentation bot says hello


00:20:40.620 --> 00:20:43.860
and they say $test hello world, hello world, so on.


00:20:43.860 --> 00:20:46.780
- Yeah, okay, so I was thinking stuff like


00:20:46.780 --> 00:20:50.060
you could give people access to some of these commands.


00:20:50.060 --> 00:20:52.020
Like if you want to subscribe to my newsletter,


00:20:52.020 --> 00:20:54.340
you could give it a subscribe command


00:20:54.340 --> 00:20:57.380
with your email address and subscribe yourself or something.


00:20:57.380 --> 00:20:58.500
- Yeah, you could totally do that.


00:20:58.500 --> 00:21:01.220
- Yeah, you could just on the bot side of things,


00:21:01.220 --> 00:21:02.340
you have the command.


00:21:02.340 --> 00:21:03.740
It takes an argument, which is the email,


00:21:03.740 --> 00:21:07.380
and then you just use the MailChimp or whatever API


00:21:07.380 --> 00:21:09.060
to just stick them in there.


00:21:09.060 --> 00:21:10.660
Yeah, and that's running on your server,


00:21:10.660 --> 00:21:12.700
so it can do all sorts of things.


00:21:12.700 --> 00:21:14.140
- Interesting, yeah.


00:21:14.140 --> 00:21:16.700
- Cool, so if you wanna do something with Discord,


00:21:16.700 --> 00:21:17.540
check this out.


00:21:17.540 --> 00:21:19.020
I haven't used it 'cause I haven't tried


00:21:19.020 --> 00:21:21.220
to build a bot for Discord, but this looks pretty fun.


00:21:21.220 --> 00:21:22.220
So go and check that out.


00:21:22.220 --> 00:21:23.060
- Definitely.


00:21:23.060 --> 00:21:23.880
- Yeah.


00:21:23.880 --> 00:21:26.300
- So that's our items for today.


00:21:27.180 --> 00:21:29.460
Do you have any extras for us?


00:21:29.460 --> 00:21:30.420
- I have extras.


00:21:30.420 --> 00:21:31.640
I do, I do have extras.


00:21:31.640 --> 00:21:34.060
And I actually came up with another extra


00:21:34.060 --> 00:21:35.340
while I was thinking about the extras.


00:21:35.340 --> 00:21:36.740
So yeah, yeah, yeah.


00:21:36.740 --> 00:21:38.860
Okay, so some exciting stuff.


00:21:38.860 --> 00:21:40.700
Let me pull my screen back up here.


00:21:40.700 --> 00:21:41.900
What's the order I want?


00:21:41.900 --> 00:21:42.740
Let's talk about this one first.


00:21:42.740 --> 00:21:46.500
So last time I spoke about the modern APIs with FastAPI,


00:21:46.500 --> 00:21:51.180
MongoDB, Beanie, Python as a in-person live course


00:21:51.180 --> 00:21:53.100
that runs for two weeks that I'm teaching


00:21:53.100 --> 00:21:54.340
and people can check that out.


00:21:54.340 --> 00:21:56.040
Starts on August 8th.


00:21:56.040 --> 00:21:58.200
So I'll link to that, but that's not my item


00:21:58.200 --> 00:21:59.480
'cause that's what I talked about last time.


00:21:59.480 --> 00:22:03.640
What I decided to do is I'm opening up a scholarship program


00:22:03.640 --> 00:22:07.080
for people who are underrepresented in the Python space


00:22:07.080 --> 00:22:09.280
and programming in general and who maybe also


00:22:09.280 --> 00:22:12.400
just need a hand up, two different groups there.


00:22:12.400 --> 00:22:15.340
So if you're a woman in tech or a person of color


00:22:15.340 --> 00:22:17.400
or maybe you lost your job and you're like,


00:22:17.400 --> 00:22:18.480
I'm trying to get into programming,


00:22:18.480 --> 00:22:20.080
maybe this course will help me do that.


00:22:20.080 --> 00:22:22.320
I could try and get in programming as a job.


00:22:22.320 --> 00:22:24.560
Check out the scholarship link that I put in here


00:22:24.560 --> 00:22:26.940
and I'm saving some spots in that live course


00:22:26.940 --> 00:22:28.700
for people who could benefit from that.


00:22:28.700 --> 00:22:29.620
- Oh, that's pretty cool.


00:22:29.620 --> 00:22:30.460
Kudos, nice.


00:22:30.460 --> 00:22:31.380
- Yeah, thanks.


00:22:31.380 --> 00:22:32.220
Yeah, thanks.


00:22:32.220 --> 00:22:36.420
Okay, now, just this is fresh, hot off the presses,


00:22:36.420 --> 00:22:39.140
as in is one hour and 30 minutes old.


00:22:39.140 --> 00:22:42.860
We have Operation Python 2022 software bundle


00:22:42.860 --> 00:22:43.940
from Humble Bundle.


00:22:43.940 --> 00:22:45.860
So we're doing another Humble Bundle this year


00:22:45.860 --> 00:22:50.740
and I've got my Git course and a Coder course


00:22:50.740 --> 00:22:53.740
and a Pythonic code course that I put in there


00:22:53.740 --> 00:22:57.800
for people to take, but there's also 24 other topics,


00:22:57.800 --> 00:22:59.440
like some stuff from RealPython,


00:22:59.440 --> 00:23:01.600
some stuff from Roof and Learner,


00:23:01.600 --> 00:23:02.900
from PyCharm, and so on.


00:23:02.900 --> 00:23:05.080
So people can look through there and check that out.


00:23:05.080 --> 00:23:07.280
It's certainly a good way to get


00:23:07.280 --> 00:23:10.040
a deal on Python educational stuff.


00:23:10.040 --> 00:23:11.920
- Nice, cool, that's pretty cool.


00:23:11.920 --> 00:23:13.440
- All right, and here's the one that,


00:23:13.440 --> 00:23:15.900
yeah, thanks, I'm pretty excited about that.


00:23:15.900 --> 00:23:17.800
The last one is, I told you about these crazy headphones


00:23:17.800 --> 00:23:19.680
that I have, and I just wanna tell people


00:23:19.680 --> 00:23:20.840
maybe quick about this.


00:23:20.840 --> 00:23:23.360
So I got this thing called Ultimate Ear Fits,


00:23:23.360 --> 00:23:27.760
UE fits and they're these fitted earplugs, earbuds,


00:23:27.760 --> 00:23:29.760
which I'm wearing now, obviously on the YouTube channel.


00:23:29.760 --> 00:23:32.960
And what they do is they come really soft and smushy


00:23:32.960 --> 00:23:34.800
and they're light sensitive and heat sensitive.


00:23:34.800 --> 00:23:36.600
You put them in your ear and you press a,


00:23:36.600 --> 00:23:38.440
you pair them to your phone, you press a button.


00:23:38.440 --> 00:23:40.400
They start blazing out light and heat


00:23:40.400 --> 00:23:42.920
and they form to the shapes of your ears.


00:23:42.920 --> 00:23:44.720
So Brian, what do you think of that?


00:23:44.720 --> 00:23:47.960
- That's, I don't know.


00:23:47.960 --> 00:23:48.800
- It's unusual, right?


00:23:48.800 --> 00:23:49.880
- Yeah, it sounds pretty cool.


00:23:49.880 --> 00:23:51.160
I just don't want it to go too far


00:23:51.160 --> 00:23:52.880
and to take over my brain.


00:23:52.880 --> 00:23:55.480
What if it's too mushy and it, yes, if it gets in there,


00:23:55.480 --> 00:23:57.000
you don't know, you can't get it out.


00:23:57.000 --> 00:23:57.840
- No, it's probably safe.


00:23:57.840 --> 00:23:59.040
- Anyway, you and I were talking about that


00:23:59.040 --> 00:23:59.920
right before we started,


00:23:59.920 --> 00:24:01.600
so I thought I'd just give a quick shout out to that.


00:24:01.600 --> 00:24:02.440
That's kind of fun.


00:24:02.440 --> 00:24:03.400
- So how's it sound so far?


00:24:03.400 --> 00:24:04.240
- It sounds great.


00:24:04.240 --> 00:24:06.480
It's kind of like you're wearing earplugs,


00:24:06.480 --> 00:24:08.160
so the sound is a little bit blocked out,


00:24:08.160 --> 00:24:10.520
but then there's a speaker on the inside.


00:24:10.520 --> 00:24:11.920
- Okay, nice.


00:24:11.920 --> 00:24:13.160
- Yeah.


00:24:13.160 --> 00:24:14.160
Any extras from you?


00:24:14.160 --> 00:24:15.920
- I don't have any extras.


00:24:15.920 --> 00:24:17.320
- All right, well, let's tell the joke then.


00:24:17.320 --> 00:24:18.160
- Okay.


00:24:18.160 --> 00:24:20.600
- So this one is a proposed,


00:24:20.600 --> 00:24:22.680
more of a comment on a proposed idea,


00:24:22.680 --> 00:24:24.720
which gosh, it probably will never happen,


00:24:24.720 --> 00:24:25.920
but I wish it would.


00:24:25.920 --> 00:24:29.120
So if we're gonna unionize, forget wage,


00:24:29.120 --> 00:24:31.200
increased wages and that kind of stuff.


00:24:31.200 --> 00:24:33.740
I want this instead as a software developer.


00:24:33.740 --> 00:24:37.640
And what it is, is it's a proposed new standard year,


00:24:37.640 --> 00:24:41.440
which breaks up the year into 13 different months.


00:24:41.440 --> 00:24:42.960
They're all 28 days,


00:24:42.960 --> 00:24:45.920
which almost exactly rounds out the year.


00:24:45.920 --> 00:24:49.080
So every single month, the first is Sunday,


00:24:49.080 --> 00:24:53.360
the fifth is Thursday, the 26th is a Thursday.


00:24:53.360 --> 00:24:56.440
It's always the same year after year after year.


00:24:56.440 --> 00:24:59.160
So you know about the days, you know how many months it is,


00:24:59.160 --> 00:25:01.680
you know how long, if you have 28 days


00:25:01.680 --> 00:25:04.080
or you know, 45 days from now, you know,


00:25:04.080 --> 00:25:05.420
doesn't matter what month you're in


00:25:05.420 --> 00:25:07.560
on how far that pushes you into the next month.


00:25:07.560 --> 00:25:08.680
But there's one day left over.


00:25:08.680 --> 00:25:12.660
It says the day, the one day left over is New Year's Day.


00:25:12.660 --> 00:25:15.440
It isn't a weekend or a weekday, it's magic.


00:25:15.440 --> 00:25:17.600
And on leap years, it's a double vacation day.


00:25:17.600 --> 00:25:18.560
The rest is easy.


00:25:18.560 --> 00:25:20.000
Someone says, "I'll see you on the 19th."


00:25:20.000 --> 00:25:21.200
You know it's on a Thursday.


00:25:21.200 --> 00:25:23.440
Doesn't matter what month or anything.


00:25:23.440 --> 00:25:25.040
What do you think of this?


00:25:25.040 --> 00:25:29.440
- I've always been a proponent to the fixed calendar.


00:25:29.440 --> 00:25:30.720
I think it's a great idea.


00:25:30.720 --> 00:25:32.440
And I don't remember the history,


00:25:32.440 --> 00:25:35.600
but I'm pretty sure that we probably started out this way


00:25:35.600 --> 00:25:40.040
because it's the lunar calendar, essentially.


00:25:40.040 --> 00:25:41.240
- Yeah, yeah, pretty much, yeah.


00:25:41.240 --> 00:25:43.400
- And I thought I read somewhere once


00:25:43.400 --> 00:25:45.580
that people were freaked out by the number 13,


00:25:45.580 --> 00:25:47.560
so they dropped it to 12 or something.


00:25:47.560 --> 00:25:49.840
I'm sure somebody in the chat or somebody will.


00:25:49.840 --> 00:25:52.680
I think we could fix it if you just started with zero based.


00:25:52.680 --> 00:25:54.240
It goes zero to 12.


00:25:54.240 --> 00:25:55.080
That's better.


00:25:55.080 --> 00:25:57.080
Yeah, January zero.


00:25:57.080 --> 00:25:58.320
Perfect.


00:25:58.320 --> 00:25:59.200
Exactly.


00:25:59.200 --> 00:26:01.400
Yeah.


00:26:01.400 --> 00:26:01.900
Yeah.


00:26:01.900 --> 00:26:05.080
Anyway, it's sort of a joke, but the comment about it,


00:26:05.080 --> 00:26:06.720
that's the joke.


00:26:06.720 --> 00:26:07.600
Yeah.


00:26:07.600 --> 00:26:09.280
You got any other jokes you want to share?


00:26:09.280 --> 00:26:10.040
Is that a--


00:26:10.040 --> 00:26:12.120
No, I don't.


00:26:12.120 --> 00:26:12.720
All right.


00:26:12.720 --> 00:26:13.360
Fantastic.


00:26:13.360 --> 00:26:14.440
Good talking to you again.


00:26:14.440 --> 00:26:16.920
Well, yeah, it's great to talk to you as always.


00:26:16.920 --> 00:26:19.160
Thanks for being here and thanks everyone for being out in the audience.


00:26:19.160 --> 00:26:20.460
>> Yeah. Thank you. Bye.


00:26:20.460 --> 00:26:22.360
>> Cheers. Bye.

