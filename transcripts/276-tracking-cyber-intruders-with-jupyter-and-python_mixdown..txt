00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 276 recorded March 22nd, 2022.

00:00:11 So many twos.

00:00:12 I'm Michael Kennedy.

00:00:13 And I'm Brian Arkin.

00:00:14 And I'm Ian Helen.

00:00:15 Hey Ian, welcome to the show.

00:00:17 It's great to have you here.

00:00:18 Thank you very much.

00:00:19 I've listened to the show a lot and I feel very privileged to appear on it.

00:00:23 It's our privilege to have you here.

00:00:26 Thank you so much for listening.

00:00:28 And I know you got some cool stuff to share.

00:00:29 So we're, we're looking forward to hearing about that.

00:00:32 Also, I do want to say thank you to Fusion Auth for sponsoring the show.

00:00:37 I'll tell you more about them later.

00:00:39 Before we get into the topics, Ian, tell people a bit about yourself.

00:00:42 Sure.

00:00:43 I'm a developer in Microsoft, in Microsoft Threat Intelligence Center.

00:00:48 Been with Microsoft for quite a long time.

00:00:49 Only relatively recently, like four years or so ago, got into Python coding with Jupyter notebooks.

00:00:55 So I work on Jupyter notebooks for the Microsoft Sentinel project and own a modest open source package that we'll call Mystic Pi, which we'll cover a little bit later.

00:01:06 Takes most of my time.

00:01:07 Fantastic.

00:01:08 The whole cybersecurity threat detection stuff.

00:01:11 It's, it's very interesting.

00:01:13 There's a lot of innovation there, but it's also, it's a challenging area to be working.

00:01:17 Yep.

00:01:18 Yep.

00:01:18 We never short of stuff to do.

00:01:20 So that's.

00:01:20 I'm sure you're not.

00:01:22 Well, Brian, how about you kick us off here?

00:01:25 Well, so I'm going to start off with a problem.

00:01:27 So I had a problem and I have a cool solution for it.

00:01:31 So my problem is on test and code, I've got titles and I want to end a show on MP3 file, but I want to create a show notes, automated show notes or not show notes, transcripts.

00:01:45 So one of the problems, there's a lot of problems in doing this, trying to automate it, but one of them is the title.

00:01:51 I want to turn that into something that's a little bit, so something like, you know, it's got normal English and capitalization and all sorts of spaces and stuff.

00:02:02 I want to turn that into a--

00:02:03 - Things that URLs hate.

00:02:04 - Yeah, I want to turn that into a URL.

00:02:06 And one of the things is getting rid of stop words.

00:02:11 So there's a bunch of stuff like lowercasing.

00:02:14 I can do that easy.

00:02:15 But getting rid of stop words was a little hard.

00:02:17 So I ran across this thing called GenSim parsing pre-processing.

00:02:24 So pre-processing, so GenSim is a larger sort of beast.

00:02:29 It's used for machine learning and stuff to generate models.

00:02:34 But I'm just really using one little piece of it, the pre-processing part, and it's really pretty cool.

00:02:43 I was looking, I actually found this article first.

00:02:46 there was an article called Removing Stopwords from Strings in Python.

00:02:49 It has a discussion of NLTK and GenSim and Spacy.

00:02:55 I tried all of them out actually, and the one that really stuck best for me is using removed stopwords is exactly what I wanted from GenSim.

00:03:07 I went ahead and tried that and it worked really well, but I'm like, "Wait, I'm pulling this in from the pre-processing library.

00:03:15 I wonder what else is in there.

00:03:18 There's all sorts of really cool stuff in here.

00:03:21 There's lowercase to Unicode.

00:03:24 It turns it both into lowercase and in Unicode.

00:03:26 That's pretty neat. Don't think I need it, but that's neat.

00:03:29 But then there was one that was, I thought maybe this is exactly what I want.

00:03:35 It's something called pre-processed string, and it has a whole bunch of filters built into it.

00:03:40 >> Oh, nice.

00:03:41 >> Like strip.

00:03:42 >> Strip. Yeah, strip whitespace, strip punctuation. I love it.

00:03:45 - Yeah, and take away multiple, after it strips punctuation, like you're gonna have, if I go back, I had a slash in my title for one of the episodes.

00:03:54 If it takes that out, I'm gonna have a space before and a space after.

00:03:58 So I wanna remove those.

00:04:00 So it'll strip multiple white space, strips out numerics, 'cause I probably don't want numbers in there, and then remove stop words.

00:04:07 The one thing I don't want that I'll have to like customize how I'm calling this is a stem text.

00:04:13 So stem text, I don't know what that did without playing with it, but what it does is it will take things like twisted and turn it into twist.

00:04:22 That's really not right.

00:04:23 - So you definitely don't want that.

00:04:24 - I don't want that.

00:04:25 - That'll mess it up.

00:04:26 - But I think I want everything else.

00:04:27 So this Gensim library has, you know, if you're doing machine learning, coming up with models, I think this is a great tool to look into, but if it's actually, I'm gonna use it just for removing, to create these titles for my podcast.

00:04:46 But it feels a little weird.

00:04:49 It feels like I'm using this really big hammer to do this little tiny problem.

00:04:53 I guess I'm okay with it, but do you have any other ideas where it could use or?

00:04:59 - Well, I didn't know about this, so I wrote my own.

00:05:03 - Okay.

00:05:04 - And it's kind of janky, like it's a little bit recursive, iterative, it's like, we'll take away all the punctuation now, Turn all of your white spaces into single white spaces.

00:05:14 Cause there might've been, you know, dot space.

00:05:16 So now you've got two white spaces, but you've got to take away, you know, there's like a bunch of weird steps and then put it back.

00:05:22 This looks cleaner.

00:05:23 It is a dependency, but it does look cleaner.

00:05:25 I like this.

00:05:25 I think it's, I'm glad I know about it.

00:05:27 Ian, what do you think?

00:05:28 Is it a huge thing?

00:05:29 I mean, dependency, but I always think of like ML like stuff, but this is like just the pre-processing, right?

00:05:35 This is kind of neat.

00:05:36 I'm actually pulling in all of GenSim to get this.

00:05:39 I don't know if I can pull in a little bits.

00:05:41 But it's not really part of my application that I'm shipping.

00:05:45 It's just a tool that I'm using on my laptop.

00:05:47 So I guess downloading it once doesn't really bother me too much, even if it's a big thing.

00:05:53 >> But cool. Yeah, I was thinking.

00:05:54 >> Yeah, that's a good point.

00:05:56 If it's running local, it's like a dev dependency, who cares?

00:05:59 It's like worrying about how big pytest is.

00:06:01 Like it doesn't really matter.

00:06:02 >> And I'm not, well, I kind of care about that because CI is going to pull it in all the time for pytest.

00:06:07 >> Yeah, but they got fast networks.

00:06:10 - Yeah.

00:06:11 (laughing)

00:06:11 - It's not your bandwidth, it'll be all right.

00:06:13 - Yeah, anyway.

00:06:14 - One of the things that struck me about this that made me think of your situation is like that lowercase to Unicode in so many times in the security space, it's about like, you're checking for this representation, but what if there's another representation that means the same thing?

00:06:30 Like you don't say go to this directory, you say go dot dot and then over there, you know, those kinds of non-canonical representations.

00:06:37 I wonder if there's any use of this kind of stuff for you.

00:06:39 Yeah, there's something I kind of touch on the pigment section later on, which like the attackers typically write scripted attacks and try to obfuscate code using a mix of upper case and putting random dots, I'm just thinking that'd be a nice, potentially a nice way of kind of cleaning some of that, that stuff up.

00:06:56 Yeah, for sure.

00:06:57 There was a, there's been some interesting supply chain vulnerability stuff.

00:07:01 Remember, remember the guy with the color and I think the faker stuff in JavaScript that sabotaged his libraries.

00:07:09 There was another one that maybe well-intentioned, I don't know, it was some open source library, I don't believe it was Python, I can't remember what it was.

00:07:19 It could have been, I'm pretty sure it was in JavaScript 'cause that's where all, most of the bad stuff was, it seems, anyway, they wrote their, they taught their dependency to erase everybody's hard drive who installed it, who was in Belarus and Russia, which, okay, maybe they're trying to contribute, but it ended up doing a bunch of bad things, even to places that were trying to help, say, people in the press and journalists do certain things and connect with sources and interrace that database as well.

00:07:49 And what they did to make it so that nobody would notice in the GitHub commit before it went out to NPM was base64 encode their changes.

00:07:59 So they basically put a base64 encoded string and then decode and then run that.

00:08:04 It's like that kind of stuff.

00:08:05 I know this won't solve that problem, but that sort of category of like weird representations.

00:08:10 Yeah.

00:08:11 You need mystic pie for something like that.

00:08:12 It's one of the things we, yeah, it's a common thing, kind of basics before decoding, before the obfuscating.

00:08:19 Yeah.

00:08:20 Yeah.

00:08:21 Interesting.

00:08:22 Yeah.

00:08:23 I thought of maybe using something like that with, because one of the problems we have is like every script is kind of slightly different.

00:08:29 If you could use something like that to essentially kind of apply like sentiment analysis to script I mean, this is a big problem.

00:08:36 This is not something I've particularly solved.

00:08:37 but that might be a kind of useful, useful thing to just picking out certain things that indicates malicious, like format, you know, format drive.

00:08:46 Exactly.

00:08:48 Yeah.

00:08:48 You could certainly represent like this one does hard drive stuff.

00:08:51 Is this, I thought it was parsing colors.

00:08:53 Why is it doing things with the hard drive?

00:08:55 This is odd, you know, like, or with the network, stuff like that.

00:08:57 Cool.

00:08:58 All right.

00:08:58 Well, you know what you would really want to check out if you were trying to research these things, probably documentation.

00:09:04 So I want to tell you all about DevDocs, devdocs.io.

00:09:07 This is pretty cool.

00:09:08 Now, when you get there, it's an interesting, on my Firefox, it's just got like the mobile view, which is really odd.

00:09:15 If you go there with a full browser, it's what it believes is a full browser, I guess.

00:09:19 It's like a slightly different view that's pretty similar, but not the same.

00:09:23 So there's, if you open up a whole bunch of programming technologies, let's say, not just Python or JavaScript or something, but there's also Vue.js.

00:09:33 There's Vexoic, for example, like some of the foundation of Flash, and you can pick the particular versions and stuff.

00:09:39 You can go and like enable these different things.

00:09:41 So maybe I care about view, I can go over here and enable that one.

00:09:44 Let's, we definitely want some Python.

00:09:46 Let me go find some Python.

00:09:48 It gives you all the versions, I'll pick that.

00:09:50 And let's say I'm also working with Postgres, so I'll enable that documentation.

00:09:54 And then I might be working with Nginx for the front end, which is somewhere right here.

00:10:00 So you can go enable that.

00:10:02 And then it will be up near the top somewhere here.

00:10:05 You can see these are either the default ones or the ones that I checked on.

00:10:08 So then you can open them up and say, I wanna go and see the Nginx guide about a debugging log.

00:10:15 And then it takes you to the documentation for that technology.

00:10:18 So it's like a meta documentation repository for all of these things all at once, which is pretty cool, right?

00:10:25 So I can go up here and search.

00:10:26 I wanna know about like, let's go about like media tags or something.

00:10:30 So you can see the stuff in HTML5, you can see the stuff in, when you say media, it looks like median.

00:10:36 So you can see that in the statistics module for Python, some stuff for CSS, or you could come over here and say, like, I just want to search for CSS.

00:10:45 And then you get like using media queries and how to do that kind of stuff.

00:10:49 So it's kind of a, what you do is you turn on the pieces that are relevant to you, and then you can search across those technologies.

00:10:55 Cool, right?

00:10:56 - Mm-mm, wow.

00:10:57 - Yeah, and then if you're on the move, you can come over here and turn on offline data, and it'll download all of that as an app so that then you're at the coffee shop and you're playing, you now have all the documentation for Python 3.10, Vue.js, Verix, Zoid, Nginx, et cetera, et cetera, that you can use, which is pretty cool.

00:11:18 And this is something that drives me crazy about Firefox.

00:11:22 They had it and they took it away, and I don't understand why, So they took away the ability to do progressive web apps in Firefox, but all the Chromium browsers support it.

00:11:30 So you can actually go and install this as a dedicated application on your system.

00:11:35 So you, if you have no web, you just click that open.

00:11:38 It's its own window.

00:11:38 You can up, you know, alt tab, command tab between it's super easy.

00:11:42 And then turn on the offline mode.

00:11:44 And you basically have an app that has offline documentation for all the programming technologies that you care about.

00:11:50 So, so that's, that's a great point.

00:11:51 programming technologies that you care about.

00:11:53 - So this is our way to--

00:11:54 - So this is my new coffee shop buddy.

00:11:56 - Is the search go across the thing you've selected then?

00:11:59 So if I search for like replace or something, it's the things I've selected?

00:12:03 - Yeah, so if you turn on like JavaScript and Python, it would look for that in both languages.

00:12:08 - Oh, okay.

00:12:09 - Yeah, so basically the ones you turn on, there's a ton of them, right?

00:12:11 And you pick, you say, these are interesting to me, and then search and stuff, from what I can tell, only applies to the technologies you say you care about.

00:12:18 'Cause like if you don't use Java, you really don't wanna see the documentation for Java search, right?

00:12:23 That would be useless.

00:12:24 - Yeah, one of the things I like about this is it also has versions.

00:12:26 So if you're using an older version of Postgres, you can just enable that version.

00:12:33 - Right.

00:12:34 Sometimes it doesn't matter very much, but other times it matters massively.

00:12:37 Like Bootstrap 3 and Bootstrap 5, they're fully incompatible, basically.

00:12:41 Like they're totally different keywords and grid systems, and you don't want just the latest if you've got an old app you're working on, something like that.

00:12:48 Python's more forgiving about that kind of stuff, but it doesn't break as often.

00:12:53 - I was amused that the list though is, it has like three, nine, three, eight for Python, and it has three, 10 at the bottom because one is obviously--

00:13:03 - 'Cause it's alphabetically sorted, how interesting.

00:13:05 (laughing)

00:13:07 Ian, what do you think of this?

00:13:08 - That's very cool, I'm amazed.

00:13:10 Is somebody at DevDocs kind of manually maintaining all of the links to these, like the original source documentation?

00:13:17 >> Yeah, where are they getting it from, right?

00:13:19 Because they're super desperate.

00:13:21 It's like Matplotlib and Markdown and MariaDB, it's unlikely they're all stored in the same basic system.

00:13:28 I don't know how they get them actually.

00:13:30 >> Yeah, that's very cool. I normally have solved the same problem by having 130 tabs open to different bits of Python docs and pandas.

00:13:38 >> Exactly. Yeah, I'm pretty sure they got pandas in here.

00:13:42 They got NumPy as its own thing.

00:13:44 Then we saw Matplotlib, There's pandas and there's even versions of pandas across there.

00:13:50 Single tab solution.

00:13:52 Brilliant.

00:13:52 Yeah.

00:13:53 It looks, looks pretty good to me.

00:13:55 All right.

00:13:56 You want to tell us about what you got for your first item?

00:13:58 Okay, sure.

00:13:59 Yeah.

00:13:59 so, as I mentioned earlier, I own a package called mystic pie.

00:14:05 and first thing to sort out with it is the spelling.

00:14:08 Cause I suffer from this on a daily basis, mistyping it, even though I've owned it for like three or four years.

00:14:14 So it's MSTIC, Standard for Microsoft Threat Intelligence Center.

00:14:19 There's no Y or anything like that in there.

00:14:20 So it's a tool set for cybersecurity investigations and hunting in Python, mainly in Jupyter notebooks.

00:14:28 So there are a couple of questions to ask about that.

00:14:31 So firstly, what is cybersecurity hunting and investigation and why are Jupyter notebooks useful?

00:14:37 So the first one, CyberSec investigation is really responding to alerts or other kinds of threat intelligence and trawling through typically large amounts of security logs from cloud services, hosts, account services to determine whether this is a real threat or not.

00:14:53 And there were two main kind of.

00:14:55 >> That's one of the huge problems, right?

00:14:56 Is you've got all these different systems.

00:14:59 How are you going to know if someone, if you don't have a tool like this, how are you going to know that something, someone's in there rooting around?

00:15:05 Right?

00:15:05 >> Yeah.

00:15:06 Yeah.

00:15:06 And there are a couple of things that usually trigger this kind of search.

00:15:10 So one of them is an alert may be coming from your SIEM and that stands for security information event management.

00:15:18 So it's like a console, like ArcSight is a traditional one or Microsoft Sentinel is a cloud-based one.

00:15:25 So you get an alert based on a rule and you need to go in a fairly managed process.

00:15:30 Somebody needs to go and investigate, is this a real threat or is this just noise?

00:15:34 Or there might be something like the solar winds, they never were a year ago, the log 4J, like something in the press or something from a threat intel kind of alert that says this kind of threat is around.

00:15:46 And that's a more ad hoc process, kind of hunting, like, do we see this in our organization?

00:15:52 So that's kind of what Mystic Pi is trying to address the needs of that.

00:15:57 And the second question is why Jupyter Notebooks?

00:16:00 Why would you do any Jupyter Notebook rather than in your existing SOC tools?

00:16:04 I mean, I think there's a lot in common.

00:16:08 This kind of activity is a lot in common with like big science data, sorry, big data science.

00:16:15 Something like astronomy where you're kind of hunting for an adversary activity is a little bit like trying to find an exoplanet in kind of gigabytes of data or a new quasar or something like that.

00:16:25 Yeah.

00:16:26 A hundred thousand stars or a hundred thousand lines of log file and you're hunting for some patterns and stuff, right?

00:16:31 And you've got a few photons you're trying to determine, all these kind of different, you know, something like adversary activity is a little bit like that.

00:16:37 like millions and millions of events and you're trying to find the bad stuff.

00:16:42 So traditional SOC tools are kind of, you know, can be really excellent.

00:16:45 And I work with one that I think is really good, but they all have limitations.

00:16:49 But a SOC tool.

00:16:52 A SOC tool, yeah.

00:16:53 So, SOC, Security Operations Center.

00:16:55 So something like a console that fires alerts and tells you that you have a bunch of analysts, engineers looking at this output of this and deciding, and that's the trigger for their investigations. They're like, is it like failed login to SQL server? Yeah, something like that. Or, you know, it could be a more sophisticated thing like, something's exit, you know, trying to access the kind of password data on this. It looks like it's trying to access password data on this host or, or has made a weird kind of configuration change to a mailbox settings. So all those kinds of things can kind of trigger alerts and investigations.

00:17:32 But you are limited in most kind of operation center environments.

00:17:38 Notebooks allow you to kind of break out of some of the constraints of that.

00:17:41 So firstly, you can get data from anywhere.

00:17:44 You're not just limited by kind of what's in your logs.

00:17:46 You could go to virus total, or so you can bring data from anywhere.

00:17:50 You can use customized kind of analysis.

00:17:54 So write your own or get things from PyPI.

00:17:57 Lots of people have kind of written this stuff.

00:18:00 You control the workflow, so you don't have to follow what the tool says.

00:18:03 You can reorder things, you can backtrack, redo things.

00:18:07 And the workflow is repeatable.

00:18:08 So if you get a similar issue again, or similar kind of alert, you can fish out an old notebook and rerun the same kind of analysis.

00:18:18 And you end up with a nice kind of shareable document that describes your investigation a bit like the results of a scientific investigation.

00:18:26 It's like, "Here are all the steps I took, and these are the results, and this is what they, this is what we determined to be the bad, you know, the bad activity.

00:18:33 Right.

00:18:34 The other thing that seems useful here is Jupyter.

00:18:37 Often the notebooks will save the last bit of computed information, and then you can go, you know, change a cell, ask the question again, without rerunning the whole thing.

00:18:47 And like that's parsing tons of logs or pulling them over SSH or whatever that not doing that again is nice.

00:18:54 Yeah.

00:18:54 And it's brilliant if you don't like doing lots of queries in different browser tabs and your browser crashes, they've all gone.

00:19:00 What do you do?

00:19:01 It's all in a Jupyter notebook.

00:19:03 I say, it's like second by second after you do it, you can just go back and you can go back to things like you may have done months ago.

00:19:09 So.

00:19:10 Yeah, absolutely.

00:19:11 Yeah.

00:19:12 So, so when I started all of this, I kind of thought a lot of this stuff for cyber investigations would be available on PyPI.

00:19:19 I thought, great Jupyter notebook seemed like brilliant.

00:19:21 And there's going to be process tree viewer and there's going to be an event timeline and all this kind of stuff.

00:19:26 And I found out there wasn't, at least I couldn't find it.

00:19:31 So I decided to stop, maybe we need to start writing this stuff.

00:19:35 So it turns out that things like visualizations you need for detecting exoplanets are a bit different from ones you need to detect bad actors.

00:19:45 So we started building this thing, originally me, but there's now Pete Bryan and Ashwin I'm also kind of working on it to my colleagues and a bunch of people in the community.

00:19:56 It's got four main functional sections.

00:19:58 It's like data querying, how you get data in, how you do templated queries.

00:20:03 There's enrichment.

00:20:04 So, for example, if you have something like an IP address, you might have a bunch of questions about it as an analyst, like which geographical location is this IP address from?

00:20:14 Does it have any malware reports about it?

00:20:17 Third area is analysis, so things like anomaly identification, like the thing you've been talking about, a spike in failed logon events, unusual spike in failed logon events, that kind of thing.

00:20:28 The final area is visualizations, and these are more specialized.

00:20:32 I've got a couple of examples in the show notes.

00:20:34 This is like an anomaly identification pattern.

00:20:38 This is one of the custom, we use Boca, which is a really nice visualization package to allow you to kind of view data in a way that analyst kind of expects you to see it.

00:20:50 So the more this kind of visualization and more traditional kind of graphs.

00:20:54 I would much rather look at this than log files or event logs or whatever, you know?

00:20:59 Yeah.

00:21:00 That's the whole thing about, you know, you may have thousands of events and you need to get down to the few that are the interesting, the interesting thing.

00:21:08 So one of the areas that we've, we try to focus on currently, cause we wrote all this stuff and you have like hundreds of functions that you could use, but it's kind of difficult to discover them.

00:21:18 And they all, cause they evolved a little bit organically.

00:21:21 Like, how do you, they'll work in a little bit of a different way, different set of parameters.

00:21:26 So the work we're currently doing is trying to make this all a bit more accessible.

00:21:30 So all of the functions that relate to say an IP address, all the questions you want to ask about it, kind of dynamically attached to a class called IP address.

00:21:40 So they're all like things like.

00:21:41 Oh, interesting.

00:21:42 Do, do you don't have to work just with a raw string or just some raw IP representation, but you can ask it questions like its location?

00:21:49 Well, it's not quite that intelligent.

00:21:51 So even a bit less intelligent than Alexa, but, but it's, but it's more like, you know, there might be things like geolocation of an IP address, threat intel lookups, different queries that might be have IP addresses like a parameter.

00:22:07 And previously you'd have to go and find all of these things and import them separately and run them.

00:22:13 But now they're all kind of dynamically attached as methods to the fact that use IP address as a parameter means that you just have one object to import, and then you can do all of these different operations on this single item.

00:22:25 There's some things that don't work with that.

00:22:27 Some things like the visualizations, for example, they're not IP address or host or account specific.

00:22:33 They work on big blocks of data.

00:22:35 So the other area we're working on is try to, anything that takes a bunch of data as an input, we're writing those as pandas accessors.

00:22:44 So they appear as methods to a data frame.

00:22:47 So you do kind of data frame dot MP plot dot timeline, and it would produce your timeline as long as it's the right kind of data.

00:22:54 So yeah, that's one of the challenges of writing this kind of thing organically is you end up with a lot of stuff, but nobody knows it's there and nobody knows how to import it. So try to make it as accessible so that it just becomes a very intuitive thing.

00:23:08 Oh, I have an IP address. What functions can I do? I could do this. You know, it's all tab completable, that kind of thing.

00:23:14 Yeah, I think it's really cool. You've taken this Python data stack view of cybersecurity and threat detection.

00:23:22 Yeah.

00:23:22 Yeah. Brian, what do you think?

00:23:23 Well, it's definitely a complicated area. And it trying to, one of the things I like about this story is just talking about the complexities in API design and discoverability that applies to lots of different fields.

00:23:38 Yeah, it's one of those things you should have thought about at the beginning, but even at the end you can tidy things up.

00:23:46 Famous last words.

00:23:50 So yeah, we're definitely open for other people collaborating, contributing stuff, because there's a lot of ground to cover.

00:23:57 Yeah, for sure.

00:23:58 It's on GitHub, I saw.

00:24:00 One final question before we move on.

00:24:02 Is it just for Azure or is this a thing that more broadly works across different systems?

00:24:08 >> No, I think I should have mentioned that a little bit earlier on.

00:24:10 We recently built it for Microsoft Sentinel notebooks, but it supports like Splunk, Defender, we're working on Elastic, Provider.

00:24:19 So really anything you can get into a Pandas data frame, you can use most of the functionality.

00:24:24 So even if we don't have a provider ourselves, if you've got something like PySpark and you can get a data frame, then all of our functions take data frame.

00:24:34 We use pandas as our universal data interchange format.

00:24:37 - Yeah, indeed, indeed.

00:24:39 Kim Van Wick out in the audience likes it.

00:24:42 It's way like a much nicer way to glean info in logs and complex script.

00:24:47 I'm right there with you.

00:24:48 All right, now, before we move on, Brian, let me tell you about our sponsor for this episode.

00:24:54 This episode of Python Bytes is brought to you by FusionAuth.

00:24:57 FusionAuth is an authentication and authorization platform built by devs for devs.

00:25:02 It solves the problem of building essential user security without adding risk or distracting from the primary application.

00:25:09 FusionAuth has all the features you need with great support and a price that won't break the bank.

00:25:14 And you can either self-host it or get the fully managed solution hosted in any AWS region.

00:25:20 Do you have a side project that needs custom login and registration, multi-factor authentication, social logins, or user management, download Fusion Auth Community Edition for free.

00:25:30 The best part is you get unlimited users and there's no credit card or subscription required.

00:25:36 Learn more and get started at pythonbytes.fm/fusionauth.

00:25:40 The link's in your show notes.

00:25:42 Thank you to Fusion Auth for supporting the show.

00:25:44 All right, what do you got for your next one, Brian?

00:25:46 Numbers, something every computer scientist should know.

00:25:49 - Yes, floating point.

00:25:50 Arithmetic is complicated.

00:25:52 When I started working professionally, one of the things that was recommended reading was an article called, "What Every Computer Scientist Should Know About Floating-Point Arithmetic." Don't worry, it's only a really long paper with lots of math.

00:26:09 I am not telling you to read this, although it is an interesting read.

00:26:14 What I would like you to read is this article by David Amos, called "The Right Way to Compare Floats in Python." because there's a few things that we need to know about floats when we're using them and floating points is, and he covers all of this in the article without going through tons of scary math, is the floating point numbers have to be represented in a way that the computer can store them and use them and manipulate them even though some numbers are huge and won't fit normally. So we have to do things like accept that there's error and rounding. So there's a little bit of a discussion there that he talks about. One of the things that surprises people sometimes when they first come into Python, but it's not just Python, it's most languages, is somewhere there's going to be something obvious that doesn't work. Like in David's example, 0.1 plus 0.2 equals or comparison equals 0.3 and that will show up as false because they don't. And this is weird, They obviously are equal.

00:27:17 >> So crazy that that doesn't work.

00:27:20 >> But it's not just equals.

00:27:21 You can also do comparisons like less than or greater than.

00:27:25 Not only are they not equal, they're not like 0.1 plus 0.2 is not even less than or equal to 0.3.

00:27:33 It's weird. What do you do?

00:27:38 The gist of it is don't compare things with normal math comparisons if there's floating points involved.

00:27:45 So what you want to do instead is, and here's a little tiny bit of math, way less than the example.

00:27:53 - The thesis, the dissertation.

00:27:55 - Yeah.

00:27:56 So there's a whole bunch of stuff built into Python that you can, to work with comparisons.

00:28:02 And one of the most common ones I'm trying to get there is math is close.

00:28:07 So there's a math library that's, that with an is close function, that it's used to just say, "Hey, I've got two values, are these close, close enough?" And if you're using, if you have to compare floats, something like this is great.

00:28:24 And underneath the scene, behind the scenes, what it does is it's taking the two values and subtracting them and figuring out if the delta is, or the absolute value of the delta is below some tolerance, some reasonable tolerance, like close enough.

00:28:39 And what that tolerance is, is either a relative or absolute tolerance.

00:28:44 And most of the time you can kind of get away with not caring about that, but if you do care about it, you can control that.

00:28:51 You can pass in what tolerance you expect things to be closer to.

00:28:55 I use stuff like this all the time with test equipment because I definitely want to know control over the tolerance levels.

00:29:03 So-- - Yeah, for sure.

00:29:04 - So there's math is close, but then there's also, I'm not gonna scroll all the way down here, but he also covers NumPy.

00:29:12 So NumPy has got a couple of these that are really great.

00:29:15 One of them is close also, but it works on arrays and it'll give you an array of true and false values, but you can also use all close, which just says you've got two arrays and if all of the pairs are close enough, it'll match those up.

00:29:32 Also covered, which we use during testing a lot is pytestProx, which is a little bit of a different beast, but David covers that.

00:29:42 Basically, this is a semi-regular reminder to anybody using floating-point math in Python, that you should be careful with it or any other language.

00:29:51 >> Yeah, it's not a Python thing, it's just representing things that don't fit.

00:29:57 >> Now, there's some things, sometimes where you have to be very exact, you need to be very precise, and in those cases, Python does have the decimal and fraction types, and David covers these in the article, which are cool, they're cool things to know about, like definitely around people using money or other very high precision.

00:30:16 But if you're also, so those are covered, they do get some hit for those.

00:30:21 But if you really care about the precision and want to do things exactly right, then you probably should read that larger article because there's things that you have to do like certain operations before other operations to to try to keep the error from accumulating too high.

00:30:38 So it gets messy.

00:30:40 - I think I'm fundamentally disturbed by the idea that zero isn't zero.

00:30:44 So my approach to floating point numbers is normally convert them to ints.

00:30:48 - Yeah, I was thinking that, sometimes that is the way to do it, right?

00:30:55 I was thinking this kind of stuff maybe applies a lot to the project that you're working on if you're trying to come up with ratios that represent how risky something is and things like that.

00:31:07 >> Yeah, yeah, I mean, certainly a lot of, yeah, I was being a bit flippant before we got into it.

00:31:12 It's just as fun, it's like I'm very platonic at heart, I think, so like zeroed one should be zeroed one, not nearly one of nearly zero.

00:31:20 >> There should be a perfect square and a perfect circle.

00:31:22 How can they not exist in our language?

00:31:25 >> Is it really zero or negative zero?

00:31:29 (both laughing)

00:31:32 Henry on the audience, hey Henry, also points out that pytest approximate also works on NumPy arrays as well.

00:31:38 - Nice. - Which is pretty cool.

00:31:39 - Mm-hmm, cool.

00:31:40 - You can put that all together.

00:31:41 All right, let me tell you all about Piper.

00:31:44 I think that might be the representation, the way you pronounce it.

00:31:48 Everything needs its own description, its own little phonetic bit.

00:31:51 So this is a simple way to create scripts that run and do stuff on your computer using Python.

00:31:59 And what's cool about it is it has a real simple way to define the steps.

00:32:03 Some of those steps can be optional, but then you can also piece together things like other programming.

00:32:08 So you can combine commands, different scripts in different languages and applications all into one sequence of events that happens on your computer.

00:32:17 So it's basically a task runner where you define stuff in YAML.

00:32:22 And probably the best way to see is to go check out the docs and there's a whole bunch of docs.

00:32:27 The docs are really nice here actually.

00:32:29 So for example, if you go to getting started and come down here and run your first pipeline, I really like the way the docs here look, how they look.

00:32:37 But the way you define it, here's like a one step one is you just say the steps and it's all YAML and give a step a name so you can refer to it.

00:32:46 And then you have inputs and outputs and you can do the little curly string interpolation types of things.

00:32:51 Or you can have more complex ones like with different steps and you can even have little comments.

00:32:57 There's a way to put a comma in your YAML file as well.

00:33:01 So there's also conditional.

00:33:02 Let's see if I can find a good conditional one down here.

00:33:05 Here's the one that goes and works with like, this one is just an echo statement and the ping command, but whatever you wanna do, you can basically pass command line arguments to the YAML file or to the workflow, the pipeline, and it'll take those and feed them into the steps.

00:33:22 So for example, when you call it, you can say like count equals one and IP equals that.

00:33:28 And those will come the little string interpolated pieces that go in there.

00:33:32 So you can just combine whatever, basically whatever commands are available to the shell, right, be that Python or POSIX or Windows or PowerShell or whatever you're looking to do.

00:33:42 Pretty cool, huh?

00:33:43 - That's pretty neat.

00:33:44 I might need this for my job of automating my show notes.

00:33:49 Might use some of this.

00:33:50 - Oh yeah, there you go.

00:33:52 If you can find this, go do that and so on.

00:33:53 Like here's one that sort of uses the truthiness.

00:33:57 So it says there's a bunch of different steps and you can use the run flag.

00:34:01 So here it says run if there's a value for A on this one.

00:34:05 And this one says run if there's a value for B.

00:34:07 And then there's an example where it says, okay, we run it by itself, those don't run.

00:34:11 But if you pass A, then it runs that A step.

00:34:13 If you pass B, it does the B step, or it can do both if you pass them both.

00:34:17 And I like the simplicity of it.

00:34:19 Like a lot of these tools like this feel like they're pretty complicated.

00:34:23 You know, you're sort of like your example with the Genshin, Brian, where you're like, is this thing too heavyweight for what I'm trying to ask it to do, you know?

00:34:30 And this seems like a real simple thing and I don't have to learn about make or any of those kinds of things.

00:34:35 >> Yeah.

00:34:36 GitHub actions or.

00:34:37 >> Yeah.

00:34:38 >> Yeah.

00:34:39 >> Yeah, it's got a bit of a GitHub actions feel to it.

00:34:41 >> It's, but it seems like a, yeah, nicer kind of declarative.

00:34:44 That's pretty cool.

00:34:45 >> Indeed.

00:34:46 Yeah, if you were not, not into programming or you didn't want your steps to be programming, But of course what happens at each step, you could call a Python app or script that's going to do something complicated, right?

00:34:56 If it needs to.

00:34:57 But the orchestration of that, you don't have to make complicated.

00:35:00 >> Is it just a command line tool or can you invoke it from Python?

00:35:03 Might be a-

00:35:04 >> Interesting.

00:35:05 I'm sure there's a way to import it and make it do a thing.

00:35:09 You know, it's probably just a Python package with an entry point in this package.

00:35:13 So I would think so.

00:35:14 >> Yeah, because it would be nice to be able to do that rather than just using subprocess to invoke a lot of things.

00:35:19 if you're in.

00:35:20 Oh, interesting.

00:35:21 I hadn't really thought about it as a replacement for subprocess.

00:35:24 But yeah, because a lot of times when you're trying to orchestrate stuff, like it talks about here being part of the shell or being another app or another language, you would just use subprocess on it, right?

00:35:35 Yeah, cool.

00:35:36 Well, there it is, Piper, piper.io.

00:35:39 And people can check that out.

00:35:40 It looks pretty interesting.

00:35:41 Nice.

00:35:42 All right, Ian, you want to take us out with your final item here?

00:35:44 Ah, pigments.

00:35:45 Okay.

00:35:46 So this is a package.

00:35:47 I mean, if you're a developer, there's a very good chance that you have been using this for years without knowing, like me, without knowing about it.

00:35:54 You might have seen it being installed as like a dependency.

00:35:56 It's like, what is that thing?

00:35:57 >> That was my thought, Ian.

00:35:59 I'm like, I know I see this all the time in my dependencies.

00:36:01 And I just never really bothered to look into what it does.

00:36:04 >> Yeah.

00:36:05 So I hadn't until recently.

00:36:06 So if you use Jupyter Notebook markdown, you know, you can do like three backticks and then a block of code.

00:36:15 And you can actually put like Python or Bash or something and it will intelligently highlight it.

00:36:23 So the thing that's doing that intelligent highlighting is pigments, GitHub markdown, same kind of thing.

00:36:28 Although I'm not sure whether GitHub uses pigments.

00:36:30 And if you do developer docs like reader docs and Sphinx, that also uses pigments to kind of color code your code samples.

00:36:40 And I know there's a lot of...

00:36:42 kind of blog posts and stuff like that.

00:36:44 There are some quite a few services out there where you can take a chunk of code and it will intelligently highlight it and give you a JPEG or a PNG back.

00:36:53 And that's kind of nice, but then you can't copy and paste the code from those samples.

00:36:58 So I don't like that really.

00:36:59 I think if you're going to put code in an article, you're probably intended for people to be able to copy and paste it.

00:37:05 Yeah.

00:37:06 That's the most likely thing you are to copy and paste.

00:37:08 Yeah.

00:37:09 Right.

00:37:10 Because you want that code over here.

00:37:11 You could use OCR to like reinterpret it, but it's all...

00:37:14 And then maybe Brian's GenSim to like tidy it up.

00:37:22 So with Pigments, you can use it as a standalone package and it can do this kind of rendering.

00:37:28 And it can render to like HTML with like CSS style sheets for all of the coding.

00:37:32 It also rendered to like ANSI terminal, latex, a few other kind of things.

00:37:39 So if you're using, if you want a kind of nicely formatted piece of code in a document or you're doing developer docs, it's certainly kind of useful.

00:37:47 I came across it, or should I just say one thing?

00:37:51 It also supports, maybe I can just switch, supports lots and lots of languages.

00:37:55 So it's very simple to use.

00:37:57 It has a highlight function, and then you import Alexa, which is like the thing that understands the tokens in a language, and a formatter for the output type you want.

00:38:08 I think there's hundreds of these things.

00:38:10 >> There are a lot of languages in there. No kidding.

00:38:13 >> More than half of these I've never heard of.

00:38:15 It also supports as well as things like you'd expect Python.

00:38:19 It supports Python tracebacks.

00:38:21 It has separate Lexa for color-coding tracebacks.

00:38:24 All the usual languages you'd expect, but also some things like data formats like TML, JSON, XML.

00:38:33 >> Okay. Interesting. A lot of the files that we might run across, You can syntax highlight them.

00:38:38 Yeah.

00:38:39 And so it's very easy to use.

00:38:41 And the reason I came across it is because I, it recently, so a lot of attacker code tends to be a deliberately obfuscated.

00:38:50 So it's kind of a base 64 encoded, but then even once you decode it, it's kind of munged in a way to make it as unreadable as possible.

00:38:58 So one of the things that we try to do is, is pull that code back, like decode it, trying to re like clean it, deobfuscate it.

00:39:05 But if you can present it as close to the way a developer would write it as possible, it makes it much quicker for an analyst to determine what is this doing.

00:39:15 So we use it now in MysticPy to kind of color display things like malicious PowerShell script or Bash or something like that.

00:39:25 So that's how I came across it.

00:39:26 Actually, rather than just seeing it go past as part of a pip install, actually, I have to invoke it directly.

00:39:34 I got a big shout out to the developers maintainers of pigments.

00:39:38 It's one of those package that probably millions of people benefit from, but like very few people kind of know about it or you know, you can, and it's just super easy to use.

00:39:48 They seem to be adding kind of Lexus all the time.

00:39:50 So, great.

00:39:51 Yeah, this is amazing.

00:39:52 I didn't realize that it did all of this.

00:39:55 This is way more advanced than I thought.

00:39:57 Brian, did you know?

00:39:58 No, I just thought it was something that magically syntax did syntax highlighting.

00:40:03 I didn't have to care about it.

00:40:05 Yeah, exactly.

00:40:07 I got a little example in the show notes as well.

00:40:11 I pasted it.

00:40:12 It has a dark theme?

00:40:13 Yeah, yeah.

00:40:15 Yeah, and you probably want to include this "no background equals true" if you're using Jupyter Notebooks, because if you select a theme, it just flips the whole notebook's kind of CSS theme.

00:40:25 So that tells it just not to mess with what's in the background.

00:40:28 Okay.

00:40:29 Yeah, that looks great.

00:40:31 >> Thanks for pointing out how useful that can be.

00:40:33 That's cool. Like I said, I've seen it go by all the time.

00:40:36 I just never really paid that much attention to it.

00:40:39 >> It's probably a pretty minority use, but if you need it, it's great.

00:40:42 >> Yeah, it's incredibly powerful. Fantastic.

00:40:45 Well, that's all of our main items.

00:40:46 Brian, you got any extras?

00:40:47 >> Just one extra actually.

00:40:48 One of the things when I was doing that, the first topic with GenSim, it doesn't have very many dependencies, but one of the dependencies is this library called SmartOpen.

00:41:02 I open things and I want to be smart about it, so I wanted to check this out.

00:41:08 It's pretty neat. I don't know if we've covered this before, but it basically mimics the interface of open, normal Python open, but you can pass it really anything.

00:41:19 It does transparent on-the-fly reading of things, efficient streaming of large files from S3 or Azure or over the web.

00:41:31 >> Even straight just HTTP.

00:41:33 >> Yeah.

00:41:33 >> If you just have a link to a large file on a web server.

00:41:35 >> Yeah. Then just the code for it is just super nice.

00:41:40 You import open from SmartOpen and you got like for a line in open this thing and you can work from each line there. It's pretty cool.

00:41:51 >> I love it. That's a great one. Very nice.

00:41:55 - All right, Ian, you got any extras you wanna shout out while we're here?

00:41:59 - I don't, I'm afraid.

00:42:00 I have some. - No, that's fine.

00:42:02 I have two real quick ones to just quickly talk about.

00:42:07 Last time, Emily Morehouse spoke about using AutoSquash, which was really cool.

00:42:13 So Adam, let me get the attribution correct here.

00:42:17 Adam Parkin sent in a follow-up to say, hey, you should check out this article over here called fixing commits with git commit --fix up and git rebase --auto squash.

00:42:30 Woo, the long and the short of it is, talks about doing a lot of things that Emily said was pretty cool.

00:42:35 But in the end, setting up your .git config to auto squash equals true and then adding an alias so you can just type git space fix up.

00:42:45 And when you type that, it actually does git log and shows the last 50 items and then allows you to go back and work with those.

00:42:53 And basically it's just a real quick way to get back into the scenario where you mark different elements for fix up.

00:42:58 So people can check that out if they were following Emily's advice, but they want it to be like one line.

00:43:05 They don't have to remember.

00:43:06 There you go.

00:43:06 That's cool.

00:43:07 And then Python 3.10.3 is out as of about a week ago, I suppose.

00:43:12 So there are many changes amongst here.

00:43:15 You know, I would love, there's like so many great changes here.

00:43:18 You can see, I don't know.

00:43:19 How many do you think that is?

00:43:20 Probably a hundred, maybe a little bit less.

00:43:22 it would be great if there was like a, "These are critically important." At the front, there's a security problem that was fixed, or there's a thing we've taken out is no longer here.

00:43:33 They're all the same priority.

00:43:35 But nonetheless, there's a bunch of changes that people can check out and upgrade to the newer version of Python 3.10.

00:43:42 >> Different people care about different stuff though.

00:43:45 >> I know. I don't want to impose my importance on other people's importance.

00:43:48 >> Yeah.

00:43:49 >> So it's funny.

00:43:49 >> All right.

00:43:50 When I first came across Python, you'd be like, "Why is it so slow between the major versions coming out?" Then suddenly, as a Python developer, it's like, "Why are the versions coming out so quickly?" I can't get it.

00:44:01 >> Yeah. It's definitely true.

00:44:05 There's a ton of change. This is just some minor version change that has all these changes in here, which is pretty cool.

00:44:11 >> Well, we also used to be on an 18-month cycle and now we're on a yearly cycle.

00:44:15 >> Yeah.

00:44:16 It's Lucas Schlinga's fault that we are 50% faster now.

00:44:20 Thanks Lucas.

00:44:21 All right, how about a joke to close out the show?

00:44:24 - That'd be great.

00:44:25 - Yeah, so here's a good tweet and it's this sort of perplexed, I think in a good way, character, wearing all these, are these prizes?

00:44:35 I don't know, anyway, Python developers, when someone asks what their secret is, and this person just says, "I just keep writing pseudocode and it just keeps working." It's a little bit like that joke where they have some code, pseudocode in a text file.

00:44:50 They're like, just rename it to .py and try to run it.

00:44:52 See what happens.

00:44:53 Anyway, that's the joke.

00:44:56 - Nice.

00:44:56 - Thank you, Brian, as always.

00:44:57 And Ian, thanks for being part of the show.

00:44:59 - Thank you. - Thank you.

00:45:00 - Great to have you here.

00:45:01 - Thank you very much both.

00:45:02 Been a real pleasure.

00:45:03 - Yeah, it sure has.

