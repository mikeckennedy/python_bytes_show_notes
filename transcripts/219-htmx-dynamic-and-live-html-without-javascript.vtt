
00:00:00.000 --> 00:00:01.880
- Hello and welcome to Python Bytes,


00:00:01.880 --> 00:00:04.000
where we deliver Python news and headlines


00:00:04.000 --> 00:00:05.520
directly to your earbuds.


00:00:05.520 --> 00:00:10.520
This is episode 219, recorded February 3rd, 2021.


00:00:10.520 --> 00:00:12.120
I'm Brian Okken.


00:00:12.120 --> 00:00:13.160
- I'm Michael Kennedy.


00:00:13.160 --> 00:00:14.560
- And I'm Jennifer Stark.


00:00:14.560 --> 00:00:15.400
Hiya.


00:00:15.400 --> 00:00:16.220
- Yay.


00:00:16.220 --> 00:00:17.060
- Yay, welcome Jennifer.


00:00:17.060 --> 00:00:17.900
It's so great to have you here.


00:00:17.900 --> 00:00:18.720
- Thank you.


00:00:18.720 --> 00:00:20.520
It's really great to be here, thank you.


00:00:20.520 --> 00:00:22.160
- Yeah, yeah, it's been great.


00:00:22.160 --> 00:00:23.280
It's great to have you here.


00:00:23.280 --> 00:00:26.360
You know, we had you, or I had you as a guest


00:00:26.360 --> 00:00:29.440
over on Talk Python, and that was really fun,


00:00:29.440 --> 00:00:31.080
talking about data science stuff over there,


00:00:31.080 --> 00:00:33.280
and now we're happy to have you here


00:00:33.280 --> 00:00:35.000
on Python Bytes as well.


00:00:35.000 --> 00:00:37.640
So really quickly, you wanna just tell people


00:00:37.640 --> 00:00:39.880
about yourself before we jump into the topics?


00:00:39.880 --> 00:00:43.880
- Sure, yep, so I'm Jennifer, I work at Lab Bible


00:00:43.880 --> 00:00:48.080
as a lead data engineer on a really small team of three,


00:00:48.080 --> 00:00:49.640
but we're a bigger data team


00:00:49.640 --> 00:00:52.760
for research and insights as well.


00:00:52.760 --> 00:00:53.840
We've been spending most of our time


00:00:53.840 --> 00:00:55.760
working on engineering stuff,


00:00:55.760 --> 00:00:57.320
but we've been moving gradually


00:00:57.320 --> 00:01:01.320
to include more data science tasks as well.


00:01:01.320 --> 00:01:03.360
So looking forward to doing some more of that.


00:01:03.360 --> 00:01:04.480
- Yeah, it sounds really fun.


00:01:04.480 --> 00:01:06.440
Brian, you wanna kick us off?


00:01:06.440 --> 00:01:07.600
I mean, I heard that you're supposed


00:01:07.600 --> 00:01:08.640
to use virtual environments


00:01:08.640 --> 00:01:10.200
and not mess up what you're doing,


00:01:10.200 --> 00:01:13.600
but if you don't want to, I guess you just don't do that.


00:01:13.600 --> 00:01:17.560
- Well, I use virtual environments all the time.


00:01:17.560 --> 00:01:20.040
But there was an article, so I wanted to cover this,


00:01:20.040 --> 00:01:22.760
and there was some discussion online.


00:01:22.760 --> 00:01:25.640
An article from Frost Ming titled,


00:01:25.640 --> 00:01:28.280
you don't really need a virtual environment.


00:01:28.280 --> 00:01:30.160
So what's the story there?


00:01:30.160 --> 00:01:30.640
>> Yeah.


00:01:30.640 --> 00:01:36.440
>> Yeah. So there's a little hint in the slug of the URL,


00:01:36.440 --> 00:01:38.900
that the slug is introducing PDM.


00:01:38.900 --> 00:01:42.660
So I don't know if he's really saying that you don't need it,


00:01:42.660 --> 00:01:45.020
but PDM stands for,


00:01:45.020 --> 00:01:46.200
what does it stand for?


00:01:46.200 --> 00:01:49.680
Package Python Development Master.


00:01:49.680 --> 00:01:50.720
Well, that's cool.


00:01:50.720 --> 00:01:53.020
I think I want to put that on my business card.


00:01:53.020 --> 00:01:54.840
I'm a Python Development Master.


00:01:54.840 --> 00:01:59.160
Anyway, so let's just go back up a little bit.


00:01:59.160 --> 00:02:01.120
This is a neat tool.


00:02:01.120 --> 00:02:06.520
It's poetry-like, but it says it doesn't use virtual environments,


00:02:06.520 --> 00:02:11.400
it uses the Dunder package directory. What is that?


00:02:11.400 --> 00:02:14.280
We do have this problem with virtual environments.


00:02:14.280 --> 00:02:18.040
The main problem I think is it's hard to teach people.


00:02:18.040 --> 00:02:21.640
If you're teaching somebody new and you want them to install something,


00:02:21.640 --> 00:02:23.200
you have to say, "Okay,


00:02:23.200 --> 00:02:29.360
well, type Python-M venv or Python-M venv,


00:02:29.360 --> 00:02:34.040
space venv, and then you have to activate it.


00:02:34.040 --> 00:02:36.240
The Mac people do this,


00:02:36.240 --> 00:02:38.760
the Windows people do something else.


00:02:38.760 --> 00:02:40.740
Then after you've activated it,


00:02:40.740 --> 00:02:42.360
then if we've got requirements,


00:02:42.360 --> 00:02:45.520
you need to install them or install the requirements.


00:02:45.520 --> 00:02:49.640
That's not a fun way to start teaching people how to use Python.


00:02:49.640 --> 00:02:51.360
I think we do need to solve that,


00:02:51.360 --> 00:02:53.400
but I'm not sure this is it.


00:02:53.400 --> 00:02:54.240
But there's--


00:02:54.240 --> 00:02:56.360
- Sure, well, like Node.js has a similar problem,


00:02:56.360 --> 00:02:59.480
but they don't necessarily have as much of a challenge


00:02:59.480 --> 00:03:01.440
'cause they have this like directory structure,


00:03:01.440 --> 00:03:03.760
which I think what DunderPi package is trying to do, right?


00:03:03.760 --> 00:03:06.560
Like if you have a node modules folder,


00:03:06.560 --> 00:03:09.440
some directory up and you do something with NPM,


00:03:09.440 --> 00:03:11.200
it just goes up till it finds one.


00:03:11.200 --> 00:03:13.600
It's like, well, there's the top of the project, we're good.


00:03:13.600 --> 00:03:15.880
- Yeah, so there's, that's kind of what,


00:03:15.880 --> 00:03:19.040
so there's a pep582, which we'll link to,


00:03:19.040 --> 00:03:21.880
that kind of has that, has this,


00:03:21.880 --> 00:03:25.040
it's proposing to have this Dunder packages,


00:03:25.040 --> 00:03:28.440
package directory and have that sort of thing.


00:03:28.440 --> 00:03:31.880
So if you're in a directory with one of those around


00:03:31.880 --> 00:03:33.440
and you do a pip install,


00:03:33.440 --> 00:03:34.760
I think this is how it works,


00:03:34.760 --> 00:03:35.840
either it's supposed to,


00:03:35.840 --> 00:03:37.600
I think it's just gonna install stuff there


00:03:37.600 --> 00:03:39.000
instead of in your global one.


00:03:39.000 --> 00:03:41.360
So I actually think this would be cool,


00:03:41.360 --> 00:03:43.860
even if it's only used for teaching,


00:03:43.860 --> 00:03:47.160
it would be a cool thing to have


00:03:47.160 --> 00:03:50.760
because also you could possibly zip this whole thing up


00:03:50.760 --> 00:03:52.440
and give somebody a directory


00:03:52.440 --> 00:03:54.640
and they'd already have all the packages and everything.


00:03:54.640 --> 00:03:55.480
That'd be kind of--


00:03:55.480 --> 00:03:56.480
- Interesting.


00:03:56.480 --> 00:03:59.840
I wonder if that's kind of similar to how Conda,


00:03:59.840 --> 00:04:01.080
is that similar to how Conda works?


00:04:01.080 --> 00:04:03.480
Can I use Conda ends instead?


00:04:03.480 --> 00:04:04.320
- Yeah, so--


00:04:04.320 --> 00:04:06.520
- Because to me, conceptually, it feels easier.


00:04:06.520 --> 00:04:07.880
- Yeah, yeah, you probably live way more


00:04:07.880 --> 00:04:10.600
in the Conda world than the pip world, right?


00:04:10.600 --> 00:04:11.440
- Yeah.


00:04:11.440 --> 00:04:14.400
- I think Conda's sort of intermediate, right?


00:04:14.400 --> 00:04:18.300
So with Conda, you do have to say Conda activate, right?


00:04:18.300 --> 00:04:19.180
- Yeah. - Manually.


00:04:19.180 --> 00:04:22.200
But you don't have to be in the right place.


00:04:22.200 --> 00:04:23.040
Like with Pip, you literally have to say--


00:04:23.040 --> 00:04:24.140
- You could be anywhere.


00:04:24.140 --> 00:04:24.980
- Yeah, exactly.


00:04:24.980 --> 00:04:27.100
You say, I have an environment called this, let's roll,


00:04:27.100 --> 00:04:29.340
like activate that and then go, right?


00:04:29.340 --> 00:04:32.340
Whereas this is, it's like, I'm in the right location,


00:04:32.340 --> 00:04:34.380
but I don't wanna have to talk about environments.


00:04:34.380 --> 00:04:36.880
And it just happens to be that that environment


00:04:36.880 --> 00:04:40.400
has a directory structure that Python will know about.


00:04:40.400 --> 00:04:41.580
- Yeah. - Yeah.


00:04:41.580 --> 00:04:44.380
So there's another part of virtual environments


00:04:44.380 --> 00:04:48.140
that's a little icky, is that, I guess, it's tied,


00:04:48.140 --> 00:04:51.420
you know, maybe, it's that if you create


00:04:51.420 --> 00:04:53.240
a virtual environment, you kind of tie it


00:04:53.240 --> 00:04:55.740
to a particular Python version.


00:04:55.740 --> 00:04:56.580
- Yes.


00:04:56.580 --> 00:04:57.780
- And if you update your Python version,


00:04:57.780 --> 00:05:00.740
then your virtual environments aren't pointing


00:05:00.740 --> 00:05:03.100
to the new one, and I don't really know,


00:05:03.100 --> 00:05:05.000
I don't know how to, actually, I don't deal with that.


00:05:05.000 --> 00:05:08.020
I just delete the virtual environment and recreate it.


00:05:08.020 --> 00:05:09.700
- I've gotten really good at doing that


00:05:09.700 --> 00:05:13.100
because every time I brew upgrade my Python


00:05:13.100 --> 00:05:14.820
for a major version, it just stops working.


00:05:14.820 --> 00:05:16.380
I'm like, oh, come on, here we go.


00:05:16.380 --> 00:05:19.140
You know, time to erase everything and start over.


00:05:19.140 --> 00:05:22.260
- Yeah, so the PEP 582 might fix that also


00:05:22.260 --> 00:05:24.900
'cause you could just, I don't know if it fixes that


00:05:24.900 --> 00:05:27.180
because it's still in the directory structure.


00:05:27.180 --> 00:05:31.420
It does have Python versions in the directory naming thing.


00:05:31.420 --> 00:05:34.500
So I think for minor upgrades it would work,


00:05:34.500 --> 00:05:37.820
but for major ones like going from 3.9 to 3.10,


00:05:37.820 --> 00:05:39.180
I don't think it would help you there.


00:05:39.180 --> 00:05:40.540
I don't know.


00:05:40.540 --> 00:05:45.060
Anyway, I don't know enough about 582 to comment on this,


00:05:45.060 --> 00:05:47.820
but I do think it's cool that PDM is around


00:05:47.820 --> 00:05:50.580
so that you can play with the Dunder packages


00:05:50.580 --> 00:05:51.860
to see what it's like.


00:05:51.860 --> 00:05:54.260
However, the workflow within PDM


00:05:54.260 --> 00:05:56.900
is way more complicated than virtual environments,


00:05:56.900 --> 00:05:57.740
in my opinion.


00:05:57.740 --> 00:06:02.740
So I don't think that it's gonna fix the newbie problem,


00:06:02.740 --> 00:06:04.220
but it's still an easy thing.


00:06:04.220 --> 00:06:06.420
- That's what I feel about with all of these things


00:06:06.420 --> 00:06:08.500
is it's like, it solves two problems


00:06:08.500 --> 00:06:11.400
and it adds three years like, oh, come on.


00:06:11.400 --> 00:06:13.240
Do I really want to trade those?


00:06:13.240 --> 00:06:16.600
A couple of comments from the live stream.


00:06:16.600 --> 00:06:18.760
Hi Lang says, "Conda rocks," mostly.


00:06:18.760 --> 00:06:20.520
So right there with you, Jennifer.


00:06:20.520 --> 00:06:21.360
Yeah.


00:06:21.360 --> 00:06:22.180
- Love Conda.


00:06:22.180 --> 00:06:23.020
- Yeah, yeah.


00:06:23.020 --> 00:06:25.920
And then, Chen Danelli says,


00:06:25.920 --> 00:06:27.400
"There was a way to set up Conda things


00:06:27.400 --> 00:06:31.600
"so it automatically switches to the Conda environment.


00:06:31.600 --> 00:06:34.340
"See the environment.yaml file."


00:06:34.340 --> 00:06:35.360
I don't know anything about this.


00:06:35.360 --> 00:06:36.680
Have you seen that, Jennifer?


00:06:36.680 --> 00:06:39.320
- I have not used that, no.


00:06:39.320 --> 00:06:40.160
- It sounds like we should all check it out.


00:06:40.160 --> 00:06:41.200
- That sounds really helpful.


00:06:41.200 --> 00:06:42.520
Yeah, it sounds really good.


00:06:42.520 --> 00:06:44.000
- Yeah, thank you, Daniel.


00:06:44.000 --> 00:06:45.500
All right, well, I guess we should jump over


00:06:45.500 --> 00:06:46.340
to the next one.


00:06:46.340 --> 00:06:50.320
Something else that's really helpful is cookie cutter,


00:06:50.320 --> 00:06:51.160
right?


00:06:51.160 --> 00:06:52.440
So often we want to go and say,


00:06:52.440 --> 00:06:53.880
well, I want to create a project


00:06:53.880 --> 00:06:55.860
and I don't want to just start from file, new project.


00:06:55.860 --> 00:06:57.340
I want to have a certain structure.


00:06:57.340 --> 00:06:58.840
I want to maybe have some of the files there.


00:06:58.840 --> 00:07:01.960
So for example, if I go and create a new pyramid web app,


00:07:01.960 --> 00:07:04.520
I can use a cookie cutter to generate that.


00:07:04.520 --> 00:07:06.760
And it'll say things like what template language


00:07:06.760 --> 00:07:07.600
do you wanna use?


00:07:07.600 --> 00:07:08.840
Do you wanna use SQLAlchemy?


00:07:08.840 --> 00:07:10.200
And you answer a couple of questions


00:07:10.200 --> 00:07:13.220
and it generates project already integrating those things


00:07:13.220 --> 00:07:14.460
with the right directory structure


00:07:14.460 --> 00:07:16.400
and the right extra dependencies and whatnot.


00:07:16.400 --> 00:07:17.280
And that's cool, right?


00:07:17.280 --> 00:07:19.400
So I think cookie cutter is really taken over


00:07:19.400 --> 00:07:22.280
as the primary way of creating projects


00:07:22.280 --> 00:07:23.100
that are structured.


00:07:23.100 --> 00:07:24.120
It's not just Python.


00:07:24.120 --> 00:07:26.200
You could even create like Atari 2600


00:07:26.200 --> 00:07:28.160
assembly language projects and C++,


00:07:28.160 --> 00:07:29.300
other weird stuff like that.


00:07:29.300 --> 00:07:31.420
Anything that has to do with projects,


00:07:31.420 --> 00:07:33.160
just here's a bunch of files,


00:07:33.160 --> 00:07:36.420
replace some conditionally include others and so on.


00:07:36.420 --> 00:07:37.480
That's what cookie cutter does.


00:07:37.480 --> 00:07:39.320
And so that's not what I want to talk about.


00:07:39.320 --> 00:07:41.680
What I want to talk about is this thing called copier.


00:07:41.680 --> 00:07:42.800
Have you guys heard of copier?


00:07:42.800 --> 00:07:43.640
- I have not.


00:07:43.640 --> 00:07:46.100
I have used cookie cutter, but I've not heard of this one.


00:07:46.100 --> 00:07:47.080
- Yeah, cookie cutter is cool.


00:07:47.080 --> 00:07:49.600
And it's way more popular than copier.


00:07:49.600 --> 00:07:51.740
Copier is pretty relatively unknown,


00:07:51.740 --> 00:07:53.280
but I think it's worth checking out.


00:07:53.280 --> 00:07:55.600
I don't know that I'll replace what I'm doing


00:07:55.600 --> 00:07:57.040
with cookie cutter with copier.


00:07:57.040 --> 00:07:58.400
They're not interchangeable.


00:07:58.400 --> 00:08:00.240
They should be, that would be a great feature,


00:08:00.240 --> 00:08:02.600
but I don't think they can share each other's templates.


00:08:02.600 --> 00:08:06.360
That said, the thing that is interesting about Copier


00:08:06.360 --> 00:08:09.080
primarily is that it allows you to upgrade


00:08:09.080 --> 00:08:10.840
working with projects.


00:08:10.840 --> 00:08:13.720
So if I go and make a decision to create, say,


00:08:13.720 --> 00:08:16.800
some web application or whatever else application,


00:08:16.800 --> 00:08:17.960
it even works for data science,


00:08:17.960 --> 00:08:19.840
like structuring notebooks and whatnot.


00:08:19.840 --> 00:08:22.400
If I make a decision and then I change my mind


00:08:22.400 --> 00:08:24.880
after I've already worked on it for a while, too bad.


00:08:24.880 --> 00:08:26.040
You don't get any choice.


00:08:26.040 --> 00:08:28.560
Like you throw it away or you create another one


00:08:28.560 --> 00:08:29.880
and you kind of diff the files.


00:08:29.880 --> 00:08:31.400
You're like, "Oh, well, what's the difference over here?


00:08:31.400 --> 00:08:32.640
Oh, I should include this thing.


00:08:32.640 --> 00:08:36.480
But with copier, you can rerun it on the project and make changes


00:08:36.480 --> 00:08:40.800
and apply those changes and different choices to an existing project you're working on.


00:08:40.800 --> 00:08:42.080
That's why I think it's interesting.


00:08:42.080 --> 00:08:42.880
- That's cool.


00:08:42.880 --> 00:08:45.480
Does it have like a prompt like thing also?


00:08:45.480 --> 00:08:47.880
I mean, because cookie cutter asks you things.


00:08:47.880 --> 00:08:48.760
- I believe it does.


00:08:48.760 --> 00:08:50.200
Yeah, it will ask you questions.


00:08:50.200 --> 00:08:55.120
If you look at it, it has, yeah, it absolutely has prompts.


00:08:55.120 --> 00:08:57.360
I can't really see a great example here.


00:08:57.360 --> 00:08:58.200
- Okay.


00:08:58.200 --> 00:09:00.360
- It doesn't use, I believe, cookie cutters,


00:09:00.360 --> 00:09:03.200
like native Python that you program it in.


00:09:03.200 --> 00:09:04.740
The scripts are Python,


00:09:04.740 --> 00:09:07.920
and then they drive arbitrary text files and whatnot


00:09:07.920 --> 00:09:10.080
with replacement, and it's kind of like Jinja.


00:09:10.080 --> 00:09:12.320
This actually uses YAML.


00:09:12.320 --> 00:09:16.340
So if you look at an example somewhere,


00:09:16.340 --> 00:09:18.960
I'm not sure exactly where a good example is,


00:09:18.960 --> 00:09:21.120
but basically you set up YAML files,


00:09:21.120 --> 00:09:23.040
and the YAML files have different types


00:09:23.040 --> 00:09:24.400
of prompts and questions.


00:09:24.400 --> 00:09:26.160
You can say, "Here, I want to ask for a password,"


00:09:26.160 --> 00:09:28.160
and then confirm it, but don't show the output.


00:09:28.160 --> 00:09:29.520
So there's a lot of configurability


00:09:29.520 --> 00:09:31.260
and interesting things like that.


00:09:31.260 --> 00:09:32.820
And then if you rerun it again,


00:09:32.820 --> 00:09:35.320
it'll say, here's the project structure that you have.


00:09:35.320 --> 00:09:37.120
Here's the project structure that we're creating.


00:09:37.120 --> 00:09:39.640
And if it runs into a file, it'll say,


00:09:39.640 --> 00:09:40.600
this one already exists.


00:09:40.600 --> 00:09:41.740
Do you want to override it?


00:09:41.740 --> 00:09:44.280
Use the one we're about to generate, things like that.


00:09:44.280 --> 00:09:45.680
So it's pretty neat.


00:09:45.680 --> 00:09:47.040
- I think that looks pretty cool.


00:09:47.040 --> 00:09:48.440
I definitely want to check it out.


00:09:48.440 --> 00:09:49.440
- Yeah, yeah.


00:09:49.440 --> 00:09:52.000
It seems to solve a slightly different problem


00:09:52.000 --> 00:09:53.240
than cookie cutter, but it's,


00:09:53.240 --> 00:09:55.560
I think cookie cutter is the right conceptualization


00:09:55.560 --> 00:09:56.720
to have when you think about it.


00:09:56.720 --> 00:09:58.260
- Yeah, I did start using,


00:09:58.260 --> 00:10:01.940
I created my own cookie cutter for some data science-y things


00:10:01.940 --> 00:10:02.780
that I was working on.


00:10:02.780 --> 00:10:05.140
And there is a data science cookie cutter that exists,


00:10:05.140 --> 00:10:06.880
already templates exist,


00:10:06.880 --> 00:10:08.660
but it wasn't completely sitting in my needs,


00:10:08.660 --> 00:10:10.020
so I made my own.


00:10:10.020 --> 00:10:14.140
And then I was gonna make one for projects in our team,


00:10:14.140 --> 00:10:16.940
'cause we do some one-off data analysis


00:10:16.940 --> 00:10:18.420
for data science projects.


00:10:18.420 --> 00:10:20.340
And then discovered that GitHub now has,


00:10:20.340 --> 00:10:22.220
you can make a repo as a template,


00:10:22.220 --> 00:10:24.340
and you can set it as a template in GitHub,


00:10:24.340 --> 00:10:26.660
and then you just clone it and name it something else.


00:10:26.660 --> 00:10:30.660
So that's solved part of, doesn't solve everything.


00:10:30.660 --> 00:10:32.660
You know, if you want something different, then,


00:10:32.660 --> 00:10:33.500
- Right.


00:10:33.500 --> 00:10:35.100
- You know, contentual with this might be really good, but.


00:10:35.100 --> 00:10:36.220
- Yeah, yeah, yeah, that's right.


00:10:36.220 --> 00:10:39.060
So I remember if you go to your GitHub repository


00:10:39.060 --> 00:10:41.860
under settings, there's a checkbox that's off by default.


00:10:41.860 --> 00:10:44.540
It says, this repository is a template.


00:10:44.540 --> 00:10:45.740
That's what you're talking about, right?


00:10:45.740 --> 00:10:46.560
- Yeah.


00:10:46.560 --> 00:10:47.400
- I see.


00:10:47.400 --> 00:10:48.380
- So if you set up like empty,


00:10:48.380 --> 00:10:51.180
you can set up your file structure.


00:10:51.180 --> 00:10:53.620
So it's got nothing about, I guess,


00:10:53.620 --> 00:10:55.260
Some of the things that you're setting up in this one


00:10:55.260 --> 00:10:57.740
are not what you set up in the GitHub template.


00:10:57.740 --> 00:10:59.300
It's just the file structure really.


00:10:59.300 --> 00:11:00.900
And if any files, you know,


00:11:00.900 --> 00:11:03.500
that you want to pre-populate with any files.


00:11:03.500 --> 00:11:05.180
But yeah, so you have,


00:11:05.180 --> 00:11:07.220
that solves what I was gonna solve with cookie cutter.


00:11:07.220 --> 00:11:08.980
Cookie cutter would have been overkill for this.


00:11:08.980 --> 00:11:09.820
- I see.


00:11:09.820 --> 00:11:11.540
Yeah, I had never really thought of those two things


00:11:11.540 --> 00:11:12.820
as being the same, but you're right.


00:11:12.820 --> 00:11:13.780
They're basically the same.


00:11:13.780 --> 00:11:15.380
'Cause normally when you fork a repo,


00:11:15.380 --> 00:11:17.620
it's like, well, now you can contribute back,


00:11:17.620 --> 00:11:20.020
but the templates are just, now you start from here


00:11:20.020 --> 00:11:22.300
and it's not really related back, right?


00:11:22.300 --> 00:11:23.140
- Yeah. - Nice.


00:11:23.140 --> 00:11:27.300
- Well, yeah, that brings us to your first topic, right?


00:11:27.300 --> 00:11:29.000
Tell us about it.


00:11:29.000 --> 00:11:30.440
- Yes, yeah.


00:11:30.440 --> 00:11:34.280
I was thinking of data science in our team.


00:11:34.280 --> 00:11:36.800
We had a data science project


00:11:36.800 --> 00:11:39.360
that we started a couple of weeks ago,


00:11:39.360 --> 00:11:40.240
and it had a deadline,


00:11:40.240 --> 00:11:42.540
so we weren't gonna make anything particularly pretty.


00:11:42.540 --> 00:11:46.000
We just wanted to get something analyzed and done.


00:11:46.000 --> 00:11:49.640
So we were using lots of tooling that we hadn't used before


00:11:49.640 --> 00:11:52.280
'cause we were using a massive data set.


00:11:52.280 --> 00:11:55.280
I think it was a couple of gigs worth of text.


00:11:55.280 --> 00:11:59.840
So we had to use Google's AI platform notebook,


00:11:59.840 --> 00:12:03.720
which is just Jupyter Notebook on Google Cloud.


00:12:03.720 --> 00:12:05.720
But you can have different sizes of your machine.


00:12:05.720 --> 00:12:07.560
You can have as many cores as you want,


00:12:07.560 --> 00:12:09.840
different types of machines if you want,


00:12:09.840 --> 00:12:11.320
and it will just run Notebook for you.


00:12:11.320 --> 00:12:12.640
So we thought that would solve the problem.


00:12:12.640 --> 00:12:14.760
We just have all these cores,


00:12:14.760 --> 00:12:15.600
and we run our Notebook on that,


00:12:15.600 --> 00:12:17.000
and it would be magical.


00:12:17.000 --> 00:12:20.560
But it wasn't, and we tried to apply,


00:12:20.560 --> 00:12:23.100
to a Panda supply to this huge data frame,


00:12:23.100 --> 00:12:26.100
it just was not working at all.


00:12:26.100 --> 00:12:29.540
We even had the process bar on the bottom,


00:12:29.540 --> 00:12:30.540
like under the cell,


00:12:30.540 --> 00:12:33.820
and it would take, I think it was like 10 minutes to do,


00:12:33.820 --> 00:12:35.380
and it was still on zero percent.


00:12:35.380 --> 00:12:36.980
>> Wow.


00:12:36.980 --> 00:12:38.860
>> We don't have time for this.


00:12:38.860 --> 00:12:40.380
Yeah, don't have time for this.


00:12:40.380 --> 00:12:41.980
We're already on a deadline and it's like,


00:12:41.980 --> 00:12:43.300
this isn't working.


00:12:43.300 --> 00:12:47.140
Then we went over to terminal and just checked


00:12:47.140 --> 00:12:50.560
at the top to see what processes were going on.


00:12:50.560 --> 00:12:52.660
And this was like one Python thing.


00:12:52.660 --> 00:12:54.820
I thought, well, that's not, we could speed that up.


00:12:54.820 --> 00:12:56.100
Let's see what we can do there.


00:12:56.100 --> 00:12:57.700
- Even though you have a ton of cores


00:12:57.700 --> 00:12:59.980
and a lot of high-end machine,


00:12:59.980 --> 00:13:02.300
it's still just single threaded basically, right?


00:13:02.300 --> 00:13:04.180
- Yes, it is.


00:13:04.180 --> 00:13:05.620
So I looked at a few alternatives


00:13:05.620 --> 00:13:07.580
and didn't want to get too much into,


00:13:07.580 --> 00:13:09.620
I think some people were suggesting


00:13:09.620 --> 00:13:12.420
there's some desk-related modules we could use.


00:13:12.420 --> 00:13:15.420
Like I think Swifter was one,


00:13:15.420 --> 00:13:17.980
but it didn't work instantly for me.


00:13:17.980 --> 00:13:20.620
So I looked for something else and found-


00:13:20.620 --> 00:13:22.100
(laughing)


00:13:22.100 --> 00:13:23.940
- You have 30 seconds library, work for me.


00:13:23.940 --> 00:13:24.780
- Yeah.


00:13:24.780 --> 00:13:26.220
(laughing)


00:13:26.220 --> 00:13:28.340
I can't figure it out, bin it, start again,


00:13:28.340 --> 00:13:29.180
find something else.


00:13:29.180 --> 00:13:30.020
- Yeah.


00:13:30.020 --> 00:13:32.940
- I tried pandarallel,


00:13:32.940 --> 00:13:37.860
which just parallelizes any pandas apply function.


00:13:37.860 --> 00:13:41.420
So you can tell it how many cores you wanna use.


00:13:41.420 --> 00:13:43.620
You might not wanna use all of them.


00:13:43.620 --> 00:13:46.820
And it's not like a linear or exponential improvement, is it?


00:13:46.820 --> 00:13:50.180
Like doubling your cause is not necessarily half your time.


00:13:50.180 --> 00:13:51.980
There's some overhead.


00:13:51.980 --> 00:13:54.180
So yeah, you can tell it how many cause you want to use.


00:13:54.180 --> 00:13:56.660
You can also opt, I think if you scroll down,


00:13:56.660 --> 00:13:59.720
it says you can also add like a progress bar to it


00:13:59.720 --> 00:14:00.560
in the options.


00:14:00.560 --> 00:14:01.500
- Nice.


00:14:01.500 --> 00:14:02.340
- But it's, and then yeah,


00:14:02.340 --> 00:14:04.320
it got some benchmarking there as well.


00:14:04.320 --> 00:14:06.940
And it's just really easy to use.


00:14:06.940 --> 00:14:08.860
So that solved our problem.


00:14:08.860 --> 00:14:11.420
Again, like the whole project was just quick and dirty,


00:14:11.420 --> 00:14:14.180
but to get it done quickly, this is great.


00:14:14.180 --> 00:14:16.580
And then going over to terminal and doing top again,


00:14:16.580 --> 00:14:18.500
it's like, boom, all Python.


00:14:18.500 --> 00:14:19.340
Just Python, Python, Python, Python, Python.


00:14:19.340 --> 00:14:20.740
I was like, yeah. - Yeah, yeah.


00:14:20.740 --> 00:14:22.660
Beautiful, and by default, if you don't,


00:14:22.660 --> 00:14:24.740
you can specify the number of workers,


00:14:24.740 --> 00:14:27.060
but if you don't, it's just the number of CPU cores.


00:14:27.060 --> 00:14:28.420
- Yeah, all of them.


00:14:28.420 --> 00:14:29.660
- So just a quick question.


00:14:29.660 --> 00:14:30.940
It looks like this is,


00:14:30.940 --> 00:14:34.140
it says that it's mostly around the apply function.


00:14:34.140 --> 00:14:36.740
What does apply do, as a reminder?


00:14:36.740 --> 00:14:40.100
- So if you have a, if you specify a function somewhere,


00:14:40.100 --> 00:14:42.980
And then when you hit apply,


00:14:42.980 --> 00:14:45.000
I think there's some examples actually a bit further down


00:14:45.000 --> 00:14:47.780
of the kinds of applies that you do.


00:14:47.780 --> 00:14:50.900
So you can have, where you'd normally put apply func,


00:14:50.900 --> 00:14:54.260
so you can apply a function to that whole directory,


00:14:54.260 --> 00:14:55.860
sorry, to that whole data frame


00:14:55.860 --> 00:15:00.300
or to a specific column within that data frame.


00:15:00.300 --> 00:15:02.340
So any function you apply will be column,


00:15:02.340 --> 00:15:04.260
will be row-wise in that column.


00:15:04.260 --> 00:15:05.660
- Oh, okay.


00:15:05.660 --> 00:15:06.860
- So the function only has to work


00:15:06.860 --> 00:15:09.860
on a single row, essentially.


00:15:09.860 --> 00:15:11.420
So anywhere where you'd put apply,


00:15:11.420 --> 00:15:12.860
if you're using parallel, you just,


00:15:12.860 --> 00:15:16.300
pandernally just replace apply with parallel apply,


00:15:16.300 --> 00:15:18.820
and then it will parallelize the function.


00:15:18.820 --> 00:15:19.660
- It's very cool.


00:15:19.660 --> 00:15:21.260
- Yeah, that's super cool.


00:15:21.260 --> 00:15:24.900
Daniel asks, oops, not that one, this one.


00:15:24.900 --> 00:15:27.460
He asks, how does this compare to Dask?


00:15:27.460 --> 00:15:28.300
- I don't know.


00:15:28.300 --> 00:15:30.140
(laughing)


00:15:30.140 --> 00:15:31.940
- I have not used Dask a lot either,


00:15:31.940 --> 00:15:35.100
but I think Dask can be set up to run in parallel


00:15:35.100 --> 00:15:36.940
on a given machine.


00:15:36.940 --> 00:15:40.100
- It can also be set up to run


00:15:40.100 --> 00:15:43.020
in a distributed cluster, basically.


00:15:43.020 --> 00:15:43.860
- Yeah.


00:15:43.860 --> 00:15:44.700
- My feeling is--


00:15:44.700 --> 00:15:46.340
- It's to work on large datasets, isn't it?


00:15:46.340 --> 00:15:48.420
- Yeah, my first impression is probably,


00:15:48.420 --> 00:15:49.460
like this is about,


00:15:49.460 --> 00:15:52.100
I've got to apply this function to every element.


00:15:52.100 --> 00:15:53.900
I want that to be fast and simple.


00:15:53.900 --> 00:15:55.260
Let's just do that.


00:15:55.260 --> 00:15:56.100
- Yeah.


00:15:56.100 --> 00:15:57.700
- That's my first thought.


00:15:57.700 --> 00:16:00.180
- I think the other option I used,


00:16:00.180 --> 00:16:02.700
or looked at for 30 seconds, was Swifter.


00:16:02.700 --> 00:16:06.340
And I think that is a Dask-based module, I think.


00:16:06.340 --> 00:16:07.940
that I might be misremembering.


00:16:07.940 --> 00:16:11.220
- And then somebody else said that apply


00:16:11.220 --> 00:16:13.260
is like map in base Python.


00:16:13.260 --> 00:16:14.860
So. - Yeah, absolutely.


00:16:14.860 --> 00:16:16.140
Yeah, very cool.


00:16:16.140 --> 00:16:16.980
Brian, you know what else is cool


00:16:16.980 --> 00:16:18.140
before we get on the next thing?


00:16:18.140 --> 00:16:18.980
- What is?


00:16:18.980 --> 00:16:20.260
- If I wanted to learn pytest,


00:16:20.260 --> 00:16:22.500
say if I was Jennifer's team, maybe,


00:16:22.500 --> 00:16:24.620
I could get a book on pytest, right?


00:16:24.620 --> 00:16:27.220
So this episode is brought to you by us.


00:16:27.220 --> 00:16:29.140
- Yeah, so I highly recommend a book


00:16:29.140 --> 00:16:31.180
called "Python Testing with pytest."


00:16:31.180 --> 00:16:33.260
There's a small glitch with it though.


00:16:33.260 --> 00:16:34.940
It was written in 2017.


00:16:34.940 --> 00:16:38.360
So if you go to pytestbook.com,


00:16:38.360 --> 00:16:41.040
there's a bunch of errata that will help you.


00:16:41.040 --> 00:16:43.580
There's just some minor changes.


00:16:43.580 --> 00:16:46.400
I forgot to pin a version of one of the libraries,


00:16:46.400 --> 00:16:47.240
stuff like that.


00:16:47.240 --> 00:16:50.100
So if you go to pytestbook.com,


00:16:50.100 --> 00:16:52.660
that page has some errata that helps you


00:16:52.660 --> 00:16:56.220
through learning pytest and with the book.


00:16:56.220 --> 00:16:58.100
There is a second edition on its way,


00:16:58.100 --> 00:17:00.900
but it is a long way out, so don't wait for it.


00:17:00.900 --> 00:17:02.400
- That's a lot of work, yeah.


00:17:04.140 --> 00:17:05.340
Over at TalkBytes on Trading,


00:17:05.340 --> 00:17:06.620
we're working on a bunch of courses.


00:17:06.620 --> 00:17:08.700
Breaking news, never mentioned this before,


00:17:08.700 --> 00:17:12.060
but we may be having a Dask course coming soon.


00:17:12.060 --> 00:17:13.940
So just so you know.


00:17:13.940 --> 00:17:17.020
And Damon also says, probably with more experience


00:17:17.020 --> 00:17:18.660
than definitely me, or Brian,


00:17:18.660 --> 00:17:20.000
that Dask has more features.


00:17:20.000 --> 00:17:21.480
It can do chunking on the data frame


00:17:21.480 --> 00:17:23.800
to work around the RAM size limit, for example,


00:17:23.800 --> 00:17:25.300
and whatnot, which is pretty interesting.


00:17:25.300 --> 00:17:27.220
And also notice down over here,


00:17:27.220 --> 00:17:30.340
how is it, this option, Use Memory FS,


00:17:30.340 --> 00:17:32.460
it will actually use this memory file system thing,


00:17:32.460 --> 00:17:35.380
which sounds like it's good for lots of data as well.


00:17:35.380 --> 00:17:36.220
- Cool.


00:17:36.220 --> 00:17:38.260
- But, I haven't been out much.


00:17:38.260 --> 00:17:41.300
I used to love to go out and get a milkshake or something.


00:17:41.300 --> 00:17:45.180
But you wanted me to use Ice Cream instead for Python?


00:17:45.180 --> 00:17:46.020
- Yes.


00:17:46.020 --> 00:17:46.840
- What's going on here?


00:17:46.840 --> 00:17:50.580
- Yeah, so actually, kind of love this.


00:17:50.580 --> 00:17:54.220
There's an article from Kuyen Tran,


00:17:54.220 --> 00:17:57.980
stop using print to debug in Python, use Ice Cream instead.


00:17:57.980 --> 00:17:59.740
And I think we've covered a couple of others,


00:17:59.740 --> 00:18:01.540
like other print alternatives.


00:18:01.540 --> 00:18:05.520
but I went in and tried this and it's pretty cool.


00:18:05.520 --> 00:18:08.940
So with the new fprint stuff,


00:18:08.940 --> 00:18:11.160
you can, there's, I forget when it came in,


00:18:11.160 --> 00:18:14.900
but you can do an equal sign to print


00:18:14.900 --> 00:18:17.220
and it prints a nice like variable name


00:18:17.220 --> 00:18:20.620
or whatever you want and then the value of it next to it.


00:18:20.620 --> 00:18:23.420
So it's nice, but it's still a lot of typing.


00:18:23.420 --> 00:18:26.140
So if you want to print something nice,


00:18:26.140 --> 00:18:28.620
you type, it's a lot of typing.


00:18:28.620 --> 00:18:31.380
It's not tons, but when you're throwing debugging in,


00:18:31.380 --> 00:18:33.860
you're probably stressed doing it quickly is good.


00:18:33.860 --> 00:18:36.120
So Icecream is just a way to do this faster.


00:18:36.120 --> 00:18:39.220
So Icecream is instead of typing print


00:18:39.220 --> 00:18:42.220
for your debugging output, you type IC.


00:18:42.220 --> 00:18:44.020
- So first of all, fewer characters.


00:18:44.020 --> 00:18:47.100
- Yeah, fewer characters, no curly brackets.


00:18:47.100 --> 00:18:49.220
You don't have to do quotes.


00:18:49.220 --> 00:18:53.360
It's just IC and then you give it whatever object


00:18:53.360 --> 00:18:55.260
or expression you want to print.


00:18:55.260 --> 00:18:57.460
So that's cool, that's it.


00:18:57.460 --> 00:19:00.540
So even just at that, it's worth it, it's less typing.


00:19:00.540 --> 00:19:03.720
I mean, you do have to import it, but there's that.


00:19:03.720 --> 00:19:04.820
But there's other stuff too.


00:19:04.820 --> 00:19:08.340
So you can, if you don't give it any arguments,


00:19:08.340 --> 00:19:13.340
it logs, it's kind of like easy flow control debugging


00:19:13.340 --> 00:19:14.920
without having a debugger.


00:19:14.920 --> 00:19:18.400
Because if it, every time it hits an IC statement


00:19:18.400 --> 00:19:22.720
without any arguments, it'll by default print


00:19:22.720 --> 00:19:25.960
like the file and function and line number where it's at.


00:19:25.960 --> 00:19:27.740
So you can kind of trace through your stuff.


00:19:27.740 --> 00:19:28.860
So that's nice.


00:19:29.720 --> 00:19:34.220
If you want to have that tracing be part of all


00:19:34.220 --> 00:19:36.380
of your statements, even the ones where you pass


00:19:36.380 --> 00:19:38.940
something in, there's a way to configure that too,


00:19:38.940 --> 00:19:40.020
which is very nice.


00:19:40.020 --> 00:19:41.500
- Oh, nice.


00:19:41.500 --> 00:19:45.900
- You can custom prefix, which is like super powerful.


00:19:45.900 --> 00:19:47.600
I'm totally gonna use it for this.


00:19:47.600 --> 00:19:52.060
So the example that they have is instead of,


00:19:52.060 --> 00:19:54.060
of course you can just put a string in or something,


00:19:54.060 --> 00:19:55.500
but it's a callback.


00:19:55.500 --> 00:19:57.620
So you have a callback function getting called.


00:19:57.620 --> 00:19:58.740
So you can use that.


00:19:58.740 --> 00:20:01.500
Their example is to inject the date time,


00:20:01.500 --> 00:20:02.540
which is kind of neat.


00:20:02.540 --> 00:20:04.540
You can inject the date time in your print statement,


00:20:04.540 --> 00:20:06.100
but I was thinking you could use that


00:20:06.100 --> 00:20:10.740
to encode system state, like which users logged in


00:20:10.740 --> 00:20:15.260
or whatever other system state you kind of want to track


00:20:15.260 --> 00:20:16.940
while you're debugging something.


00:20:16.940 --> 00:20:18.380
This would be really cool to do


00:20:18.380 --> 00:20:21.100
since you can use a callback function.


00:20:21.100 --> 00:20:22.420
A couple other features with it,


00:20:22.420 --> 00:20:24.100
it doesn't go to standard out,


00:20:24.100 --> 00:20:25.840
it goes to standard error by default.


00:20:25.840 --> 00:20:28.260
So it's not cluttering up your output


00:20:28.260 --> 00:20:30.820
if you're storing an output somewhere.


00:20:30.820 --> 00:20:32.860
And then one of the other things,


00:20:32.860 --> 00:20:36.780
I'm glad they like this article lists this as a feature.


00:20:36.780 --> 00:20:38.220
It's not a print statement.


00:20:38.220 --> 00:20:40.500
So when you wanna clean out all your debugging,


00:20:40.500 --> 00:20:42.660
you can just search for all of your IC lines


00:20:42.660 --> 00:20:44.220
and clean those out.


00:20:44.220 --> 00:20:46.300
You don't, because you might have print statements


00:20:46.300 --> 00:20:47.500
that are supposed to be there


00:20:47.500 --> 00:20:49.260
and you don't need to clean those out.


00:20:49.260 --> 00:20:50.660
So definitely. - Yeah, you could even


00:20:50.660 --> 00:20:52.500
sort of cancel it out with an import statement.


00:20:52.500 --> 00:20:55.820
Just define import, define IC to be a function


00:20:55.820 --> 00:20:57.300
that takes whatever and does nothing.


00:20:57.300 --> 00:20:58.140
- Yeah.


00:20:58.140 --> 00:20:58.960
- Yeah, this is really cool.


00:20:58.960 --> 00:21:00.100
So people who are listening,


00:21:00.100 --> 00:21:01.820
you know, you say, if I were to say,


00:21:01.820 --> 00:21:04.320
I see of a function call like plus five


00:21:04.320 --> 00:21:05.300
and give it the number four,


00:21:05.300 --> 00:21:07.020
the output would be I see colon,


00:21:07.020 --> 00:21:09.860
then actually plus five with the argument values,


00:21:09.860 --> 00:21:11.540
colon the return value.


00:21:11.540 --> 00:21:12.580
And so it's a really nice way,


00:21:12.580 --> 00:21:14.860
instead of just printing nine and 10,


00:21:14.860 --> 00:21:17.220
it prints, I called plus five with four and got nine,


00:21:17.220 --> 00:21:19.780
I called plus five with five and got 10.


00:21:19.780 --> 00:21:22.060
And it just, it sort of summarizes


00:21:22.060 --> 00:21:23.940
the debug information a little bit better.


00:21:23.940 --> 00:21:25.300
Jennifer, I think this might make sense


00:21:25.300 --> 00:21:26.860
inside of even a Jupyter notebook.


00:21:26.860 --> 00:21:27.820
- Yeah, I think it was.


00:21:27.820 --> 00:21:30.980
I was just thinking this is even less typing


00:21:30.980 --> 00:21:33.100
than if you use f-strings.


00:21:33.100 --> 00:21:34.060
- Yeah. - Yeah.


00:21:34.060 --> 00:21:35.620
- Yeah. - And a little more powerful.


00:21:35.620 --> 00:21:37.020
And like Brian said, you kind of know


00:21:37.020 --> 00:21:39.140
it's intentionally a debug thing.


00:21:39.140 --> 00:21:42.740
You could even rename, import IC as debug


00:21:42.740 --> 00:21:45.660
and just make it really clear if you really wanted, right?


00:21:45.660 --> 00:21:46.500
- Oh, yeah.


00:21:46.500 --> 00:21:48.380
- You've got three extra letters to type.


00:21:48.380 --> 00:21:49.220
- Yeah, I know.


00:21:49.220 --> 00:21:50.060
I know it.


00:21:50.060 --> 00:21:52.180
(both laughing)


00:21:52.180 --> 00:21:54.740
'Cause I'm not sure if I saw IC in my code


00:21:54.740 --> 00:21:55.740
without being familiar with this


00:21:55.740 --> 00:21:56.980
that I know what that's about.


00:21:56.980 --> 00:21:57.820
- It's your code.


00:21:57.820 --> 00:21:58.660
- It's not a pun.


00:21:58.660 --> 00:21:59.500
- Yeah.


00:21:59.500 --> 00:22:00.320
- Are they making a pun?


00:22:00.320 --> 00:22:02.540
Like, I see, I see my error.


00:22:02.540 --> 00:22:04.860
- Oh, I see, I see.


00:22:04.860 --> 00:22:06.620
Yes, they may be.


00:22:06.620 --> 00:22:07.460
They may be.


00:22:07.460 --> 00:22:10.140
And Piling is a fan of the name, brilliant name.


00:22:10.140 --> 00:22:11.180
Yeah, it's pretty clever.


00:22:11.180 --> 00:22:12.540
All right, good one, Brian.


00:22:12.540 --> 00:22:15.220
So the last two, by the way,


00:22:15.220 --> 00:22:19.020
the parallel pandarello had a great visualization.


00:22:19.020 --> 00:22:20.380
This one has some great visuals.


00:22:20.380 --> 00:22:22.060
And this next one I wanna talk about,


00:22:22.060 --> 00:22:23.700
you know, I think might be part of the reason


00:22:23.700 --> 00:22:24.540
we love these things.


00:22:24.540 --> 00:22:26.940
Like they communicate their values so clearly.


00:22:26.940 --> 00:22:31.740
This thing called HTMX, high power tools for HTML.


00:22:31.740 --> 00:22:34.100
So Brian, I know you fall into this realm.


00:22:34.100 --> 00:22:35.980
I do some of the time as well.


00:22:35.980 --> 00:22:38.140
Jennifer, maybe, I'm not sure.


00:22:38.140 --> 00:22:40.340
If you're gonna write some interactive webpages,


00:22:40.340 --> 00:22:43.260
you really wanna drop in and write a ton of JavaScript


00:22:43.260 --> 00:22:44.860
and do all that interaction by hand


00:22:44.860 --> 00:22:47.100
or would you rather just have it like magic


00:22:47.100 --> 00:22:48.780
its way into interactivity?


00:22:48.780 --> 00:22:50.380
And so that's a little bit-- - I think it's the magic.


00:22:50.380 --> 00:22:52.420
- Yeah, who doesn't want the magic, right?


00:22:53.420 --> 00:22:55.320
So this is kind of what this is.


00:22:55.320 --> 00:22:57.960
Like normally if you have a webpage,


00:22:57.960 --> 00:22:58.800
you have two options.


00:22:58.800 --> 00:23:01.420
You can have a form and that form could like post back


00:23:01.420 --> 00:23:02.900
and submit some data.


00:23:02.900 --> 00:23:04.640
And then you could write some JavaScript.


00:23:04.640 --> 00:23:07.000
So if I click on some element, something happens.


00:23:07.000 --> 00:23:09.320
But what this does is it lets you to go to almost


00:23:09.320 --> 00:23:13.900
any element in your page, a picture, air graph, whatever.


00:23:13.900 --> 00:23:15.840
And you can say, if you interact with this,


00:23:15.840 --> 00:23:18.120
here is a CSS transition to run.


00:23:18.120 --> 00:23:19.580
Here's a WebSocket call to do.


00:23:19.580 --> 00:23:22.740
Here is a Ajax JavaScript call.


00:23:22.740 --> 00:23:24.780
and then it does something in reverse.


00:23:24.780 --> 00:23:26.460
So what I could say, for example,


00:23:26.460 --> 00:23:28.600
is when somebody clicks on this picture,


00:23:28.600 --> 00:23:32.060
replace it with whatever HTML fragment I get back


00:23:32.060 --> 00:23:33.820
on the server that I told it to call.


00:23:33.820 --> 00:23:35.180
So the picture could be like,


00:23:35.180 --> 00:23:37.660
click this for this bit of data report,


00:23:37.660 --> 00:23:40.660
and then what it does is return actually the HTML


00:23:40.660 --> 00:23:42.620
for a graph that's like a live graph


00:23:42.620 --> 00:23:43.660
with the data pre-filled.


00:23:43.660 --> 00:23:45.340
And all you have to do is touch the picture


00:23:45.340 --> 00:23:48.420
and teach the server how to return the HTML,


00:23:48.420 --> 00:23:50.000
and now you have this interactive page


00:23:50.000 --> 00:23:52.300
that's like live with animations and stuff.


00:23:52.300 --> 00:23:53.140
Super cool.


00:23:53.140 --> 00:23:55.500
So let me show you probably the best way to see this


00:23:55.500 --> 00:23:56.540
is through an example.


00:23:56.540 --> 00:23:58.380
So for example, there's a button.


00:23:58.380 --> 00:24:00.460
If you just include the script, that's all you gotta do.


00:24:00.460 --> 00:24:02.660
And you say button, instead of having it in a form,


00:24:02.660 --> 00:24:06.900
you just say HX-POST, that's the HTMLX thing.


00:24:06.900 --> 00:24:08.900
You give it a URL, and when you click it,


00:24:08.900 --> 00:24:10.980
it says call slash clicked.


00:24:10.980 --> 00:24:13.940
And when it comes back, replace what button is,


00:24:13.940 --> 00:24:16.220
the outer HTML, like button and everything in it


00:24:16.220 --> 00:24:18.460
with whatever you got back from the server, okay?


00:24:18.460 --> 00:24:22.360
And even has a haiku in here, which is pretty cool.


00:24:22.360 --> 00:24:25.940
JavaScript fatigue, longing for a hypertext already in hand.


00:24:25.940 --> 00:24:28.240
But let's go look at some examples.


00:24:28.240 --> 00:24:29.080
These are cool.


00:24:29.080 --> 00:24:31.660
For example, let's do lazy load.


00:24:31.660 --> 00:24:33.660
If I go over to lazy load, which is a little slow,


00:24:33.660 --> 00:24:34.900
so it probably--


00:24:34.900 --> 00:24:35.800
- It's lazy.


00:24:35.800 --> 00:24:37.700
- It's quite lazy, it is indeed.


00:24:37.700 --> 00:24:39.780
Maybe we will, here we go.


00:24:39.780 --> 00:24:43.740
So we come over here and if you just scroll down,


00:24:43.740 --> 00:24:46.260
you can see like it automatically loaded in this


00:24:46.260 --> 00:24:48.140
by refreshing, see there's a little action,


00:24:48.140 --> 00:24:50.660
Boop, boop, boop, and then off it goes.


00:24:50.660 --> 00:24:52.900
And all I gotta do is say is this image,


00:24:52.900 --> 00:24:54.500
it has this indicator.


00:24:54.500 --> 00:24:56.140
Here's the image to show while you're loading.


00:24:56.140 --> 00:24:58.540
And then what you wanna do is just show


00:24:58.540 --> 00:25:00.060
whatever you get from slash graph.


00:25:00.060 --> 00:25:00.980
Isn't that slick?


00:25:00.980 --> 00:25:03.300
And like, that's literally what you get, have to write.


00:25:03.300 --> 00:25:04.580
Let me show you another one.


00:25:04.580 --> 00:25:06.540
- I might do this just for the lazy loading.


00:25:06.540 --> 00:25:07.580
That's great.


00:25:07.580 --> 00:25:09.800
- I know, let's go do, yeah, look at the active search.


00:25:09.800 --> 00:25:13.300
So over here I can type J-E.


00:25:13.300 --> 00:25:14.140
Okay, there you go.


00:25:14.140 --> 00:25:15.860
And just as you type, all you gotta do


00:25:15.860 --> 00:25:17.380
to like type in this little text box


00:25:17.380 --> 00:25:19.580
and have all these search results come up lazy


00:25:19.580 --> 00:25:22.420
is just say, here's what you call,


00:25:22.420 --> 00:25:24.660
HTTP post and the trigger is the key chain.


00:25:24.660 --> 00:25:25.540
So there's even a delay.


00:25:25.540 --> 00:25:26.620
So as you type really fast,


00:25:26.620 --> 00:25:28.060
it doesn't go insane on the server.


00:25:28.060 --> 00:25:29.060
It like waits.


00:25:29.060 --> 00:25:30.100
Really, really cool.


00:25:30.100 --> 00:25:31.180
Yeah, as a little indicator.


00:25:31.180 --> 00:25:32.960
And then if you notice at the bottom,


00:25:32.960 --> 00:25:34.620
there's this thing you can show


00:25:34.620 --> 00:25:36.540
and it shows all the requests


00:25:36.540 --> 00:25:38.980
and the responses that have gone back and forth.


00:25:38.980 --> 00:25:41.060
There's like a little debug toolbar here


00:25:41.060 --> 00:25:42.780
for the whole AJAX interaction.


00:25:42.780 --> 00:25:43.620
- Oh, sweet.


00:25:43.620 --> 00:25:44.460
- Isn't that sweet?


00:25:44.460 --> 00:25:45.280
- Yeah.


00:25:45.280 --> 00:25:46.120
- It is nice.


00:25:46.120 --> 00:25:47.300
How did you find this?


00:25:47.300 --> 00:25:48.580
Gosh, I don't remember.


00:25:48.580 --> 00:25:52.120
I feel like maybe somebody, some listener told us about it


00:25:52.120 --> 00:25:54.700
or I just ran across it on Twitter or something.


00:25:54.700 --> 00:25:57.300
I feel like I found it from the community somewhere.


00:25:57.300 --> 00:25:58.140
- Cool.


00:25:58.140 --> 00:26:00.420
- But I remember where, but I'm excited about this.


00:26:00.420 --> 00:26:03.000
Include a JavaScript file, put one line,


00:26:03.000 --> 00:26:05.500
and then it becomes this cool interactive thing


00:26:05.500 --> 00:26:06.340
all over the place.


00:26:06.340 --> 00:26:07.780
So yeah, definitely digging it.


00:26:07.780 --> 00:26:09.460
- Yeah, totally gonna use that.


00:26:09.460 --> 00:26:10.300
- Yeah, for sure.


00:26:10.300 --> 00:26:11.340
- Yeah, same.


00:26:11.340 --> 00:26:12.180
- Nice, all right.


00:26:12.180 --> 00:26:16.620
- It might encourage me to update my website.


00:26:16.620 --> 00:26:17.120
Exactly.


00:26:17.120 --> 00:26:19.160
You're like, oh, it's super interactive.


00:26:19.160 --> 00:26:19.800
Look at all this.


00:26:19.800 --> 00:26:21.000
I rewrote it completely.


00:26:21.000 --> 00:26:21.680
So much fun.


00:26:21.680 --> 00:26:22.680
Yeah.


00:26:22.680 --> 00:26:22.920
Yeah.


00:26:22.920 --> 00:26:23.360
Cool.


00:26:23.360 --> 00:26:23.960
All right.


00:26:23.960 --> 00:26:24.680
What's next?


00:26:24.680 --> 00:26:26.440
Hi, LDA Viz.


00:26:26.440 --> 00:26:27.560
Yes.


00:26:27.560 --> 00:26:32.080
This is also part of that quick turnaround data science project that


00:26:32.080 --> 00:26:34.320
my team did a couple of weeks ago.


00:26:34.320 --> 00:26:42.200
We were looking at doing some topic analysis on text and our first


00:26:42.200 --> 00:26:45.160
approach was to use latent derisolate.


00:26:45.360 --> 00:26:46.560
Nobody knows how to say it.


00:26:46.560 --> 00:26:47.760
Just gonna say it with confidence,


00:26:47.760 --> 00:26:50.980
Leighton Derisely, I can't remember what the A stands for.


00:26:50.980 --> 00:26:55.360
Analysis, maybe that's the A.


00:26:55.360 --> 00:27:00.360
He applied that, but to understand what you're looking at,


00:27:00.360 --> 00:27:03.160
you can have it print out what the topics are


00:27:03.160 --> 00:27:05.800
and what words are contained in that topic,


00:27:05.800 --> 00:27:09.480
but it's really hard to get into the output of your model


00:27:09.480 --> 00:27:13.200
to evaluate if it's a good model or not.


00:27:13.200 --> 00:27:16.920
So what some wonderful people in the R community did


00:27:16.920 --> 00:27:19.920
was they made LDAVis,


00:27:19.920 --> 00:27:23.760
which just displays the different elements


00:27:23.760 --> 00:27:27.800
of the LDA output in a really, really intuitive way.


00:27:27.800 --> 00:27:31.600
So even if you're not too sure on the math behind LDA


00:27:31.600 --> 00:27:35.280
and what everything means, what lambda is


00:27:35.280 --> 00:27:38.160
and what all the different complex interactions are,


00:27:38.160 --> 00:27:40.480
it's quite intuitive if you spend a bit of time


00:27:40.480 --> 00:27:42.700
exploring the visualization.


00:27:42.700 --> 00:27:47.300
So that was then ported into Python,


00:27:47.300 --> 00:27:50.020
and in Python it's called PyLDavis.


00:27:50.020 --> 00:27:52.360
But the visualization is exactly the same.


00:27:52.360 --> 00:27:53.180
>> Nice.


00:27:53.180 --> 00:27:55.180
>> Yeah. So you'd have,


00:27:55.180 --> 00:28:00.100
so in this little partial screenshot of visualization,


00:28:00.100 --> 00:28:01.820
we have some bars,


00:28:01.820 --> 00:28:03.780
and the blue bars and the red bars.


00:28:03.780 --> 00:28:08.140
So the blue bars are like how much of the overall,


00:28:08.140 --> 00:28:10.300
you have all the words in all the topics,


00:28:10.300 --> 00:28:12.460
in all the documents, so baseball.


00:28:12.460 --> 00:28:16.300
of all the words in all the documents,


00:28:16.300 --> 00:28:17.660
how much does baseball,


00:28:17.660 --> 00:28:20.140
how much does baseball represented in all those documents?


00:28:20.140 --> 00:28:23.500
And the red bar represents how much in that topic,


00:28:23.500 --> 00:28:25.100
topic number 19,


00:28:25.100 --> 00:28:29.500
how much topic number 19 is made up of baseball.


00:28:29.500 --> 00:28:30.340
- Oh, I see.


00:28:30.340 --> 00:28:32.100
So you have these different topics on the left


00:28:32.100 --> 00:28:33.540
that you can like click on them


00:28:33.540 --> 00:28:36.380
and it'll generate the bars to explain more detail?


00:28:36.380 --> 00:28:37.220
- Yes.


00:28:37.220 --> 00:28:38.040
- Okay.


00:28:38.040 --> 00:28:40.060
- You can click on all the different topics.


00:28:40.060 --> 00:28:41.980
The number of topics is determined already in the model


00:28:41.980 --> 00:28:44.220
that you've already created and you can change that,


00:28:44.220 --> 00:28:47.100
rerun the model and get that main topics out.


00:28:47.100 --> 00:28:49.260
So yes, you can click on the different topics


00:28:49.260 --> 00:28:52.300
and explore the top words, either top words


00:28:52.300 --> 00:28:55.020
based on how it's listed there across all the documents


00:28:55.020 --> 00:28:57.020
or within that one topic.


00:28:57.020 --> 00:28:59.420
And then there's a slider as well.


00:28:59.420 --> 00:29:01.460
I don't know if it's an example, if you scroll down,


00:29:01.460 --> 00:29:05.700
but there'll be a slider which goes between zero and one.


00:29:05.700 --> 00:29:10.700
And at one, it's the word order, the topic words order,


00:29:10.700 --> 00:29:15.340
order is ordered by representation across all the documents.


00:29:15.340 --> 00:29:18.300
If you slide all the way down to zero,


00:29:18.300 --> 00:29:22.540
it's shuffled all the words to be more specific,


00:29:22.540 --> 00:29:25.780
to show the words that are more specific to that topic,


00:29:25.780 --> 00:29:30.140
that are exclusive to that topic and not in other topics.


00:29:30.140 --> 00:29:31.540
Whereas if you have it up to one,


00:29:31.540 --> 00:29:36.580
it's prioritizing the words in the list of words that are like everywhere.


00:29:36.580 --> 00:29:41.340
So yeah, that's just really easy and nice to play around with and explore your model.


00:29:41.340 --> 00:29:45.820
It seems like such a powerful way to explore these models around NLP stuff.


00:29:45.820 --> 00:29:49.980
Yeah, it just looks, it's just nice, it's just well designed and makes you feel happy


00:29:49.980 --> 00:29:51.540
playing with it.


00:29:51.540 --> 00:29:54.140
Yeah, these pictures and live interactions are great.


00:29:54.140 --> 00:29:55.900
Yeah, and there's really good documentation as well.


00:29:55.900 --> 00:30:02.060
So they've got links to easy to read documents that explain way better than I did what everything


00:30:02.060 --> 00:30:05.600
and how to interpret stuff.


00:30:05.600 --> 00:30:07.360
So definitely take a look at that.


00:30:07.360 --> 00:30:09.600
And there's some, I think links to some YouTube videos


00:30:09.600 --> 00:30:10.480
and whatnot as well.


00:30:10.480 --> 00:30:12.860
So yeah, the docs are really nice.


00:30:12.860 --> 00:30:15.640
Links to academic papers explaining what everything is


00:30:15.640 --> 00:30:17.480
and topic models and yeah, good.


00:30:17.480 --> 00:30:19.200
- Yeah, and there's some linked videos there.


00:30:19.200 --> 00:30:20.040
I didn't pull them out


00:30:20.040 --> 00:30:21.840
'cause I think they're probably like talks or something,


00:30:21.840 --> 00:30:23.800
but yeah, those look good as well.


00:30:23.800 --> 00:30:24.720
- Yeah. - Cool.


00:30:24.720 --> 00:30:25.560
- Nice.


00:30:25.560 --> 00:30:28.640
So it says this package was ported over from R.


00:30:28.640 --> 00:30:30.880
And I know there's a fair number of things


00:30:30.880 --> 00:30:33.000
in the Python data science world that's like that.


00:30:33.000 --> 00:30:34.360
Do you see that still happening a lot?


00:30:34.360 --> 00:30:37.860
Like what's this interplay between R and Python these days?


00:30:37.860 --> 00:30:41.140
- I think, I've actually not seen that in a while.


00:30:41.140 --> 00:30:44.320
- To me, I'm not very aware of it,


00:30:44.320 --> 00:30:46.600
but it seemed like that was really popular


00:30:46.600 --> 00:30:48.720
a couple years ago and I hear less of it now.


00:30:48.720 --> 00:30:50.840
- Yeah, yeah, well yeah, same.


00:30:50.840 --> 00:30:54.840
I think R is really, 'cause R's a stats language,


00:30:54.840 --> 00:30:58.680
so, and it's been around to stats longer,


00:30:58.680 --> 00:31:00.040
I think, than Python has been.


00:31:00.040 --> 00:31:02.220
It's much more mature when it comes to that.


00:31:02.220 --> 00:31:06.420
And I think very specific statistical applications


00:31:06.420 --> 00:31:07.980
are more advanced in R,


00:31:07.980 --> 00:31:10.200
just 'cause they've been around for longer.


00:31:10.200 --> 00:31:12.740
Python is definitely catching up though.


00:31:12.740 --> 00:31:14.340
But with something like this, I think it's nice


00:31:14.340 --> 00:31:17.540
that rather than reinventing the wheel in Python,


00:31:17.540 --> 00:31:19.380
they've just taken something that already works


00:31:19.380 --> 00:31:20.820
and made it work in Python.


00:31:20.820 --> 00:31:21.660
- Exactly.


00:31:21.660 --> 00:31:22.500
You're like, we like this, we'll just do this.


00:31:22.500 --> 00:31:23.380
This is great.


00:31:23.380 --> 00:31:24.820
- Yeah, like why change it?


00:31:24.820 --> 00:31:27.020
- Yeah, Daniel Chen threw out there,


00:31:27.020 --> 00:31:28.620
going back a few topics,


00:31:28.620 --> 00:31:33.620
that there's conda-auto-env, that project,


00:31:33.620 --> 00:31:37.860
which works, I think, probably like the PDM thing


00:31:37.860 --> 00:31:39.260
that you had, Brian, what do you think?


00:31:39.260 --> 00:31:40.100
- Say that again?


00:31:40.100 --> 00:31:42.460
- I think we're talking about whether conda has this idea


00:31:42.460 --> 00:31:45.260
of automatically activating environments


00:31:45.260 --> 00:31:46.100
under PyPackages.


00:31:46.100 --> 00:31:49.260
I think this project, conda-auto-env, probably does.


00:31:49.260 --> 00:31:52.100
And apparently there's a tie-in with RStudio as well,


00:31:52.100 --> 00:31:53.420
the guy who created it.


00:31:53.420 --> 00:31:54.980
- Nice, I was just looking at R,


00:31:54.980 --> 00:31:58.260
so R looks like it's been around since '93.


00:31:58.260 --> 00:31:59.940
I didn't know it was that old.


00:31:59.940 --> 00:32:00.980
- Oh wow.


00:32:00.980 --> 00:32:03.580
- Yeah, based on F apparently.


00:32:03.580 --> 00:32:04.420
- Based on what?


00:32:04.420 --> 00:32:05.240
- F?


00:32:05.240 --> 00:32:06.080
- Based on F.


00:32:06.080 --> 00:32:06.920
- F?


00:32:06.920 --> 00:32:07.740
- Yeah.


00:32:07.740 --> 00:32:08.580
(laughing)


00:32:08.580 --> 00:32:11.540
- Just one character please, one character is all we need.


00:32:11.540 --> 00:32:12.380
- Yeah.


00:32:12.380 --> 00:32:15.140
- C was ahead, we'll go with something to follow on.


00:32:15.140 --> 00:32:18.180
- Yeah, R was my first programming language


00:32:18.180 --> 00:32:20.940
for data analysis, so I'm really out of touch with it.


00:32:20.940 --> 00:32:22.220
Like now that we've got tidy R,


00:32:22.220 --> 00:32:25.060
which is supposed to be like really amazing and great for,


00:32:26.180 --> 00:32:28.820
Like it makes it easier for people new to programming


00:32:28.820 --> 00:32:31.340
to get up and running quicker.


00:32:31.340 --> 00:32:33.220
But I look at R now and I think,


00:32:33.220 --> 00:32:35.820
oh I don't know how that works or what that is.


00:32:35.820 --> 00:32:37.460
Since it's been out of it for so long.


00:32:37.460 --> 00:32:39.400
- Okay, so you're completely in Python now?


00:32:39.400 --> 00:32:40.780
- Yes, yeah.


00:32:40.780 --> 00:32:43.500
But I'm not like no to R.


00:32:43.500 --> 00:32:44.940
I don't know, you see it sometimes


00:32:44.940 --> 00:32:47.140
when people are like yay to Python and no to R


00:32:47.140 --> 00:32:50.060
or the other way around and I think it's just silly.


00:32:50.060 --> 00:32:52.020
Everything's, they're both really, really good


00:32:52.020 --> 00:32:52.860
at what they do.


00:32:52.860 --> 00:32:54.620
- Yeah, if they're doing something cool like this,


00:32:54.620 --> 00:32:57.380
like LDA viz, you know, do that here as well.


00:32:57.380 --> 00:32:58.640
- Yeah. - Yeah.


00:32:58.640 --> 00:33:00.760
- Speaking of visualization, I wanna remind people


00:33:00.760 --> 00:33:03.160
that are listening to the podcast


00:33:03.160 --> 00:33:06.520
that we do live stream it,


00:33:06.520 --> 00:33:10.600
this so that you can hop on on Wednesdays and watch with us


00:33:10.600 --> 00:33:13.080
or you can catch it on our YouTube channel


00:33:13.080 --> 00:33:16.800
so that you can see the things we're looking at.


00:33:16.800 --> 00:33:18.740
We highlight, if we're looking at a webpage


00:33:18.740 --> 00:33:20.920
or a cool visualization, you can see it, so.


00:33:20.920 --> 00:33:22.680
- Yeah, absolutely.


00:33:22.680 --> 00:33:23.520
Is that it, Brian?


00:33:23.520 --> 00:33:24.640
- I think it is.


00:33:24.640 --> 00:33:25.640
- It is.


00:33:25.640 --> 00:33:27.680
- Do you have any extra news or anything?


00:33:27.680 --> 00:33:28.940
- Nothing super exciting,


00:33:28.940 --> 00:33:31.940
but I did want to tell people about the JetBrains survey.


00:33:31.940 --> 00:33:33.920
And if you've ever gone to the JetBrains site,


00:33:33.920 --> 00:33:37.960
did you know that they have a little terminal command prompt


00:33:37.960 --> 00:33:40.200
for agreeing to the cookie policy, which is kind of cool.


00:33:40.200 --> 00:33:41.160
Anyway.


00:33:41.160 --> 00:33:42.160
- Yeah, I love it.


00:33:42.160 --> 00:33:43.360
- I had to do that kind of,


00:33:43.360 --> 00:33:44.680
I'm like, oh, I hate these cookie things,


00:33:44.680 --> 00:33:45.520
but that's kind of cool.


00:33:45.520 --> 00:33:46.340
I'm going to do that.


00:33:46.340 --> 00:33:50.080
So they are launching the developer ecosystem survey


00:33:50.080 --> 00:33:51.320
for 2021.


00:33:51.320 --> 00:33:53.160
If you participate, you get some prizes.


00:33:53.160 --> 00:33:54.160
It does take a little while.


00:33:54.160 --> 00:33:55.200
It took me like 15 minutes.


00:33:55.200 --> 00:33:57.260
It's a non-trivial amount of questions,


00:33:57.260 --> 00:33:59.880
but I'm sure that we'll cover this in three months


00:33:59.880 --> 00:34:01.120
or whenever the report comes out


00:34:01.120 --> 00:34:02.780
and there'll be all sorts of cool stuff we can talk about.


00:34:02.780 --> 00:34:05.120
So, you know, Python people, get your voice heard.


00:34:05.120 --> 00:34:06.320
- Nice, yeah.


00:34:06.320 --> 00:34:07.480
Gotta remember to take that.


00:34:07.480 --> 00:34:09.240
- Yeah, how about you?


00:34:09.240 --> 00:34:11.280
- I've got a couple of exciting bits.


00:34:11.280 --> 00:34:15.040
I am gonna be speaking next week at a couple of places.


00:34:15.040 --> 00:34:19.280
So I'm gonna be speaking at the Python user group


00:34:19.280 --> 00:34:22.600
for Aberdeen, which it's in the UK.


00:34:22.600 --> 00:34:23.960
that's about all I know.


00:34:23.960 --> 00:34:26.080
(laughs)


00:34:26.080 --> 00:34:26.920
It's a virtual--


00:34:26.920 --> 00:34:27.760
- It's online.


00:34:27.760 --> 00:34:30.680
- Yeah, it's an online thing.


00:34:30.680 --> 00:34:33.560
And so I'm gonna teach,


00:34:33.560 --> 00:34:37.720
we kind of did a survey of the people going


00:34:37.720 --> 00:34:39.600
and there's a lot of people new to testing


00:34:39.600 --> 00:34:40.440
and new to pytest.


00:34:40.440 --> 00:34:44.360
So I'm gonna do sort of a intro to pytest sort of a thing,


00:34:44.360 --> 00:34:47.600
or at least a topic around pytest that's introductory.


00:34:47.600 --> 00:34:50.200
And then I'm gonna do a similar talk


00:34:50.200 --> 00:34:53.160
but targeted a little bit closer to what they're doing


00:34:53.160 --> 00:34:56.480
to NOAA, which I'll probably get that wrong,


00:34:56.480 --> 00:34:59.440
National Oceanic something, something.


00:34:59.440 --> 00:35:02.840
So I'm gonna talk with a group of those people next week.


00:35:02.840 --> 00:35:04.440
That'll be fun.


00:35:04.440 --> 00:35:06.480
And oh, it's in Scotland.


00:35:06.480 --> 00:35:08.360
Aberdeen is in Scotland, sorry.


00:35:08.360 --> 00:35:11.080
- Thank you, Alex.


00:35:11.080 --> 00:35:13.560
- So I told my kids about both of the things


00:35:13.560 --> 00:35:16.880
and they're like, "Yeah, Aberdeen, that sounds neat."


00:35:16.880 --> 00:35:19.200
But no, I really, you're gonna be talking to them.


00:35:19.200 --> 00:35:20.960
So my kids are excited about that.


00:35:20.960 --> 00:35:22.280
- Yeah, that's super cool.


00:35:22.280 --> 00:35:25.000
Jennifer, anything you wanna throw out to people listening?


00:35:25.000 --> 00:35:26.680
You run a user group, right?


00:35:26.680 --> 00:35:30.440
- Yeah, we've got PyData Manchester that we have going on.


00:35:30.440 --> 00:35:33.440
And our next, it's on Meetup,


00:35:33.440 --> 00:35:35.720
and it's obviously on YouTube,


00:35:35.720 --> 00:35:38.400
'cause where else are we gonna be?


00:35:38.400 --> 00:35:42.880
But then our next one coming up is on agent-based models,


00:35:42.880 --> 00:35:44.000
so that's gonna be really cool.


00:35:44.000 --> 00:35:45.200
Looking forward to that one.


00:35:45.200 --> 00:35:47.800
And hopefully, and I'm not gonna promise too much,


00:35:47.800 --> 00:35:51.740
But we did put our own podcast on hold for a little bit.


00:35:51.740 --> 00:35:56.740
So hopefully we will start that up again this year.


00:35:56.740 --> 00:36:00.400
So one reason why I'm pretty interested in the tools


00:36:00.400 --> 00:36:02.040
that you guys use for your podcast,


00:36:02.040 --> 00:36:05.860
'cause I think this makes it really interesting and engaging.


00:36:05.860 --> 00:36:08.680
- Yeah, well, I think some of these tools,


00:36:08.680 --> 00:36:10.380
like we're using, for example, StreamYard


00:36:10.380 --> 00:36:11.900
for our live streams and stuff,


00:36:11.900 --> 00:36:14.020
I do think there's a lot of,


00:36:14.020 --> 00:36:16.020
a low bar to adopt those kind of things


00:36:16.020 --> 00:36:17.660
for a lot of meetups and stuff.


00:36:17.660 --> 00:36:18.620
So yeah, that's cool.


00:36:18.620 --> 00:36:19.620
If people wanna know what we're doing,


00:36:19.620 --> 00:36:21.860
they can shoot us a message and we'll let them know.


00:36:21.860 --> 00:36:22.700
- Yeah.


00:36:22.700 --> 00:36:23.580
- I just looked it up.


00:36:23.580 --> 00:36:26.140
Scotland is in the UK, so I wasn't completely wrong.


00:36:26.140 --> 00:36:26.980
- It is.


00:36:26.980 --> 00:36:27.820
No, you're not wrong at all.


00:36:27.820 --> 00:36:30.260
- They're squares and rectangles, come on.


00:36:30.260 --> 00:36:31.100
(laughing)


00:36:31.100 --> 00:36:32.780
You said it was a rectangle, it's all good.


00:36:32.780 --> 00:36:34.780
All right, well, with that,


00:36:34.780 --> 00:36:36.300
you think we should close it out with a joke?


00:36:36.300 --> 00:36:37.140
- Yes.


00:36:37.140 --> 00:36:37.960
- What do you think, Brian?


00:36:37.960 --> 00:36:38.800
- Yeah.


00:36:38.800 --> 00:36:41.620
- All right, so this one comes to us from Edward Orochina


00:36:41.620 --> 00:36:45.060
and sent us this cool picture here.


00:36:45.060 --> 00:36:47.340
And this has to do with an engineer


00:36:47.340 --> 00:36:49.900
helping a designer fix a problem.


00:36:49.900 --> 00:36:52.660
I kind of feel like I want to be the developer.


00:36:52.660 --> 00:36:54.860
Do you mind being the designer, Brian?


00:36:54.860 --> 00:36:55.680
- Sure.


00:36:55.680 --> 00:36:57.820
- All right, so the Brian comes to me,


00:36:57.820 --> 00:36:59.700
the designer comes and says,


00:36:59.700 --> 00:37:01.620
"There's a problem with this design."


00:37:01.620 --> 00:37:03.180
So I say, "Oh, no problem, no problem.


00:37:03.180 --> 00:37:04.580
"We can fix this here in the terminal."


00:37:04.580 --> 00:37:08.340
And I pull open Z shell and I'm rolling along and--


00:37:08.340 --> 00:37:09.740
- Whoa, you're a hacker.


00:37:09.740 --> 00:37:11.420
- No, no, it's just the terminal.


00:37:11.420 --> 00:37:13.540
- But where are all the buttons and icons


00:37:13.540 --> 00:37:14.800
and drop down menus?


00:37:14.800 --> 00:37:16.060
Is this the matrix?


00:37:16.060 --> 00:37:16.900
- Yes.


00:37:16.900 --> 00:37:19.140
(laughing)


00:37:19.140 --> 00:37:23.540
- Have you ever had one of those experiences?


00:37:23.540 --> 00:37:26.100
- I had one of those experiences at a coffee shop.


00:37:26.100 --> 00:37:27.540
I was doing something with the terminal


00:37:27.540 --> 00:37:29.060
and I had like three of them open


00:37:29.060 --> 00:37:31.340
and one of them was doing like tailing a log


00:37:31.340 --> 00:37:33.860
and one was running like a pip install script


00:37:33.860 --> 00:37:35.580
with a bunch of progress bars.


00:37:35.580 --> 00:37:36.420
And people were like,


00:37:36.420 --> 00:37:38.740
"Are you trying to hack us here on the wifi?"


00:37:38.740 --> 00:37:40.820
I'm like, "No, I'm just working, leave me alone."


00:37:40.820 --> 00:37:42.140
(laughing)


00:37:42.140 --> 00:37:45.700
- So I was on the other side of it to start with.


00:37:45.700 --> 00:37:48.060
I was a grad student.


00:37:48.060 --> 00:37:52.000
I shared an office with a couple of other people.


00:37:52.000 --> 00:37:54.860
And one of the women that shared the office with us


00:37:54.860 --> 00:37:58.300
was a VIM user or VI user at the time.


00:37:58.300 --> 00:38:00.700
And I was with tags and everything.


00:38:00.700 --> 00:38:04.500
And I was an Emacs person at the time with menus and stuff.


00:38:04.500 --> 00:38:07.500
And so I was watching her code once


00:38:07.500 --> 00:38:09.620
and it's just jumping all over the place.


00:38:09.620 --> 00:38:10.860
Like she'll go to a very,


00:38:10.860 --> 00:38:13.860
and your hands on the keyboard, nothing, no mouse.


00:38:13.860 --> 00:38:16.700
and the windows are popping back and forth


00:38:16.700 --> 00:38:17.860
and she's going all over the place.


00:38:17.860 --> 00:38:21.500
I'm like, oh my God, she's like thinking into the computer.


00:38:21.500 --> 00:38:26.380
So I learned to VI because of that experience.


00:38:26.380 --> 00:38:27.420
- Oh, that's awesome.


00:38:27.420 --> 00:38:29.980
- Yeah, when you see people using Vim


00:38:29.980 --> 00:38:33.620
or any of Emacs, whatever like that, like mind blowing.


00:38:33.620 --> 00:38:36.580
I still need my, I like to use my mouse.


00:38:36.580 --> 00:38:39.660
- Yeah, I like a blended experience as well.


00:38:39.660 --> 00:38:42.100
- Cool, well, thanks everybody.


00:38:42.100 --> 00:38:43.000
- Yeah, thanks Brian.


00:38:43.000 --> 00:38:44.000
Thanks for coming.


00:38:44.000 --> 00:38:45.000
>> Thank you.


00:38:45.000 --> 00:38:46.000
Yeah, this was really fun.


00:38:46.000 --> 00:38:47.000
Thanks for having me.


00:38:47.000 --> 00:38:49.000
>> Thank you for listening to Python Bytes.


00:38:49.000 --> 00:38:51.760
Follow the show on Twitter via @PythonBytes.


00:38:51.760 --> 00:38:54.880
That's Python Bytes as in B-Y-T-E-S.


00:38:54.880 --> 00:38:58.160
And get the full show notes at PythonBytes.fm.


00:38:58.160 --> 00:39:01.880
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:39:01.880 --> 00:39:02.880
way.


00:39:02.880 --> 00:39:05.380
We're always on the lookout for sharing something cool.


00:39:05.380 --> 00:39:08.840
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:39:08.840 --> 00:39:12.280
Thank you for listening and sharing this podcast with your friends and colleagues.

