WEBVTT

00:00:00.001 --> 00:00:04.580
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.580 --> 00:00:11.640
your earbuds. This is episode 219, recorded February 3rd, 2021. I'm Brian Okken.

00:00:11.640 --> 00:00:12.800
I'm Michael Kennedy.

00:00:12.800 --> 00:00:14.860
And I'm Jennifer Stark. Hiya.

00:00:14.860 --> 00:00:15.520
Yay!

00:00:15.520 --> 00:00:17.900
Yay! Welcome, Jennifer. It's so great to have you here.

00:00:17.900 --> 00:00:20.220
Thank you. It's really great to be here. Thank you.

00:00:20.220 --> 00:00:25.980
Yeah, yeah. It's been great. It's great to have you here. You know, we had you or I had you as a

00:00:25.980 --> 00:00:31.000
guest over on Talk Python. And that was really fun talking about data science stuff over there.

00:00:31.000 --> 00:00:36.940
And now we're happy to have you here on Python Bytes as well. Yeah. So you really quickly want

00:00:36.940 --> 00:00:39.520
to just tell people about yourself before we jump into the topics.

00:00:39.520 --> 00:00:47.540
Sure. Yep. So I'm Jennifer. I work at Loud Bible as a lead data engineer on a really small team of

00:00:47.540 --> 00:00:53.560
three, but we're a bigger data team for research and insights as well. We've been spending most of

00:00:53.560 --> 00:00:58.580
our time working on engineering stuff, but we've been moving gradually into like include more

00:00:58.580 --> 00:01:03.160
data science tasks as well. So looking forward to doing some more of that.

00:01:03.160 --> 00:01:07.440
Yeah, it sounds really fun. All right, Brian, you want to kick us off? I mean, I heard that you're

00:01:07.440 --> 00:01:11.540
supposed to use virtual environments and not mess up what you're doing, but if you don't want to,

00:01:11.540 --> 00:01:12.960
I guess you just don't do that.

00:01:12.960 --> 00:01:15.380
Well, I use virtual environments.

00:01:15.380 --> 00:01:16.100
I do.

00:01:16.100 --> 00:01:20.860
All the time. But there was an article, so I wanted to cover this and there was some

00:01:20.860 --> 00:01:27.960
discussion online. An article from Frostming titled, You Don't Really Need a Virtual Environment.

00:01:27.960 --> 00:01:29.980
So what's the story there?

00:01:29.980 --> 00:01:30.480
Yeah.

00:01:30.480 --> 00:01:38.700
Yeah. So there's a little hint in the slug of the URL that the slug is introducing PDM.

00:01:39.080 --> 00:01:45.900
So I don't know if he's really saying that you don't need it, but PDM stands for, what does it stand for?

00:01:45.900 --> 00:01:52.960
Package Python Development Master. Well, that's cool. I think I want to put that on my business card.

00:01:52.960 --> 00:02:00.760
I'm a Python Development Master. Anyway, so let's just go back up a little bit. This is kind of a neat tool.

00:02:01.080 --> 00:02:07.980
It's sort of poetry-like, but it says it doesn't use virtual environments. It uses the package,

00:02:07.980 --> 00:02:13.420
Dunder package directory. So what is that? So there's, we do have this problem with virtual

00:02:13.420 --> 00:02:18.740
environments and I do. The main problem I think is it's hard to teach people. So if you're teaching

00:02:18.740 --> 00:02:23.000
somebody new and you want them to install something, you kind of have to say, okay,

00:02:23.000 --> 00:02:33.600
well type Python-M-VenV or, you know, Python-M-VenV space VENV and then you have to activate it.

00:02:33.600 --> 00:02:40.320
And in the Mac people do this, the Windows people do something else. And then after you've activated

00:02:40.320 --> 00:02:44.880
it, then if we've got requirements, you need to install them or install the requirements. And,

00:02:44.880 --> 00:02:49.480
and I, you know, that's not a fun way to start teaching people how to use Python. So

00:02:49.480 --> 00:02:53.760
I think we do need to solve that, but I'm not sure this is it, but there's-

00:02:53.760 --> 00:02:59.060
Sure. Well, like Node.js has a similar problem, but they don't necessarily have as much of a

00:02:59.060 --> 00:03:02.880
challenge because they have this like directory structure, which I think what DunderPyPackage

00:03:02.880 --> 00:03:08.300
is trying to do, right? Like if you have a, a node modules folder, some directory up and you do

00:03:08.300 --> 00:03:12.560
something with NPM, it just goes up till it finds when it's like, well, there, there's the top of

00:03:12.560 --> 00:03:13.340
the project. We're good.

00:03:13.340 --> 00:03:19.300
Yeah. So there's, that's, that's kind of what, so there's a PEP 582, which we'll link to that.

00:03:19.300 --> 00:03:26.100
But, kind of has that, has this, it's proposing to have this Dunder packages, package directory

00:03:26.100 --> 00:03:31.540
and have that sort of thing. So if you're, if you're in a directory with one of those around

00:03:31.540 --> 00:03:36.400
and you do a pip install, I think this is how it works. Either it's supposed to, I think it's just

00:03:36.400 --> 00:03:41.280
going to install stuff there instead of in your global one. So I actually think this would be cool.

00:03:41.280 --> 00:03:48.160
Even, even if it's only used for teaching, it would be a cool thing to have because also you could,

00:03:48.160 --> 00:03:53.040
you could possibly zip this whole thing up and give somebody a directory and they'd already have

00:03:53.040 --> 00:03:57.940
all the packages and everything. That'd be kind of interesting. I wonder if that's kind of similar

00:03:57.940 --> 00:04:03.080
to how Conda, is that similar to how Conda works? Can I use Conda ends instead?

00:04:03.080 --> 00:04:08.820
Yeah. So it feels easier. Yeah. Yeah. You probably live way more in the Conda world than

00:04:08.820 --> 00:04:15.040
the pip world. Right. Yeah. I think Conda is sort of a intermediate, right? So with Conda,

00:04:15.040 --> 00:04:21.700
you do have to say Conda activate, right? Yeah. Manually, but you don't have to be in the right

00:04:21.700 --> 00:04:25.780
place. Like with PIP, you could be anywhere. Yeah, exactly. You just say, I have an environment

00:04:25.780 --> 00:04:30.900
called this. Let's roll, like activate that and then go. Right. Whereas this is, it's like,

00:04:30.900 --> 00:04:35.160
I'm in the right location, but I don't want to have to talk about environments. And it just happens

00:04:35.160 --> 00:04:41.820
to be that that environment has a directory structure that Python will know about. Yeah. Yeah. Yeah. So

00:04:41.820 --> 00:04:47.980
there's another, another part of virtual environments. It's a little icky is that I guess it's time,

00:04:47.980 --> 00:04:53.700
you know, maybe, it's that if you, if you create a virtual environment, you kind of tie it to a

00:04:53.700 --> 00:04:59.300
particular Python version. Yes. And if you update your Python version, then you're not, your virtual

00:04:59.300 --> 00:05:03.620
environments aren't pointing to the new one. And I don't really know. I don't know how to,

00:05:03.620 --> 00:05:07.640
actually, I don't deal with that. I just delete the virtual environment and recreate it.

00:05:07.640 --> 00:05:12.840
maybe there's really good at doing that because, you know, every time I brew upgrade my Python

00:05:12.840 --> 00:05:16.600
for a major version, it just stops working. I'm like, Oh, come on, here we go. You know,

00:05:16.600 --> 00:05:22.540
time just time to erase everything and start over. Yeah. So the PEP 582 might fix that also. Cause you

00:05:22.540 --> 00:05:27.780
could just, I don't know if it fixes that because it's still in the directory structure. It does have,

00:05:27.780 --> 00:05:33.800
uh, Python versions in the directory naming thing. So, I think for minor upgrades,

00:05:33.800 --> 00:05:38.580
it would work, but for major ones like going from three nine to three 10, I don't think it would help

00:05:38.580 --> 00:05:44.560
you there. I don't know. anyway, I don't, I don't know enough about 582 to comment on this,

00:05:44.560 --> 00:05:51.100
but I do think it's cool that PDM is around so that you can play with the dunder packages to see what

00:05:51.100 --> 00:05:56.340
it's like. However, the workflow within PDM is way more complicated than virtual environments.

00:05:56.340 --> 00:06:02.500
So in my opinion, so I don't think that it's going to fix the newbie, problem,

00:06:02.500 --> 00:06:07.000
but yeah, it's still, that's, that's what I feel about with all of these things is it's like,

00:06:07.000 --> 00:06:10.440
it solves two problems and it adds three. You're just like, Oh, come on.

00:06:10.440 --> 00:06:16.360
Do I really want to trade those? a couple of comments from the, the live stream.

00:06:16.360 --> 00:06:22.140
Hi Lang says conda rocks mostly. So, right there with you, Jennifer. Yeah. And then, yeah,

00:06:22.140 --> 00:06:28.100
yeah. And then, Danelli says, there was a way to set up conda thing. So it automatically

00:06:28.100 --> 00:06:34.840
switches to the conda invite, environment, see the environment.yaml file. I don't know anything

00:06:34.840 --> 00:06:40.360
about this. Have you seen that Jennifer? I have not used that. No, it sounds like we should all check

00:06:40.360 --> 00:06:45.720
that helpful. Yeah. Yeah. Thank you, Daniel. All right. Well, I guess we should jump over to the

00:06:45.720 --> 00:06:52.080
next one. Something else that's really, helpful is a cookie cutter, right? So often we want to go

00:06:52.080 --> 00:06:55.780
and say, well, I want to create a project and I don't want to just start from file, new project.

00:06:55.780 --> 00:06:59.780
I want to have a certain structure. I want to maybe have some of the files there. So for example,

00:06:59.780 --> 00:07:05.120
if I go and create a new pyramid web app, I can use a cookie cutter to generate that. And it'll say

00:07:05.120 --> 00:07:09.400
things like what template language do you want to use? Do you want to use SQLAlchemy? And you answer

00:07:09.400 --> 00:07:13.620
a couple of questions and it generates project already integrating those things with the right

00:07:13.620 --> 00:07:17.700
directory structure and the right extra dependencies and whatnot. And that's cool, right? So I think

00:07:17.700 --> 00:07:23.280
cookie cutter is really taken over as the primary way of creating projects that are structured. It's not

00:07:23.280 --> 00:07:28.720
just Python. You could even create like Atari 2600 assembly language projects and C++, other weird stuff

00:07:28.720 --> 00:07:34.440
like that. Anything that has to do with projects, just here's a bunch of files, replace, some

00:07:34.440 --> 00:07:38.780
conditionally include others and so on. That's what cookie cutter does. And so that's not what I want

00:07:38.780 --> 00:07:42.480
to talk about. What I want to talk about is this thing called copier. Have you guys heard of copier?

00:07:42.480 --> 00:07:45.860
I have not. I have used cookie cutter, but I've not heard of this one.

00:07:45.860 --> 00:07:51.640
Yeah. Cookie cutter is cool. And it's way more popular than copier copiers pretty relatively unknown,

00:07:51.640 --> 00:07:55.680
but I think it's worth checking out. I don't know that I'll replace what I'm doing with

00:07:55.680 --> 00:08:00.120
cookie cutter with copier. They're not interchangeable. They should be, that would be a great feature,

00:08:00.120 --> 00:08:04.620
but I don't think they can share each other's templates. That said, the thing that is interesting

00:08:04.620 --> 00:08:11.940
about copier primarily is that it allows you to upgrade working with projects. So if I go and make

00:08:11.940 --> 00:08:17.540
a decision to create, say some web application or whatever else application, it even works for data

00:08:17.540 --> 00:08:22.680
science, like structuring notebooks and whatnot. If I make a decision and then I change my mind after

00:08:22.680 --> 00:08:26.560
I've already worked on it for a while, too bad. You don't get any choice. Like it's,

00:08:26.560 --> 00:08:30.080
you throw it away or you create another one and you kind of diff the files. You're like,

00:08:30.080 --> 00:08:33.540
ah, well, what's the difference over here? Oh, I should include this thing. But with copier,

00:08:33.540 --> 00:08:38.600
you can rerun it on the project and make changes and apply those changes and different choices

00:08:38.600 --> 00:08:42.020
to an existing project you're working on. That's why I think it's interesting.

00:08:42.020 --> 00:08:45.780
That's cool. Does it have a, like a prompt like thing also? I mean,

00:08:45.780 --> 00:08:51.460
cookie cutter asks you things. I believe it does. Yeah. It will ask you questions. If you look at it,

00:08:51.460 --> 00:08:56.980
it has, yeah, it absolutely has prompts. I can't really see a great example here.

00:08:56.980 --> 00:09:03.640
It's, it doesn't use, I believe cookie cutters like native Python that you program it in. The scripts

00:09:03.640 --> 00:09:09.460
are Python and then they drive arbitrary text files and whatnot with replacement. And it's kind of like

00:09:09.460 --> 00:09:17.580
Jinja. This actually uses YAML. So if you look at an example somewhere, I'm not sure exactly

00:09:17.580 --> 00:09:23.140
where a good example is, but basically you set up YAML files and the YAML files have different types of

00:09:23.140 --> 00:09:26.840
prompts and questions. You can say like here, I want to ask for a password and then confirm it,

00:09:26.840 --> 00:09:30.700
but don't show the output. So there's a lot of configurability and interesting things like that.

00:09:30.700 --> 00:09:35.600
And then if you rerun it again, it'll say, here's the project structure that you have. Here's the

00:09:35.600 --> 00:09:38.960
project structure that we're creating. And if it runs into a file, it'll say,

00:09:39.040 --> 00:09:44.000
this one already exists. Do you want to override it? Use the one we're about to generate things like

00:09:44.000 --> 00:09:48.260
that. So it's pretty neat. I think that's, it looks pretty cool. I definitely want to check it out.

00:09:48.260 --> 00:09:53.240
Yeah. Yeah. It's, it seems to solve a slightly different problem than cookie cutter, but it's,

00:09:53.240 --> 00:09:56.580
I think cookie cutter is the right conceptualization to have when you think about it.

00:09:56.580 --> 00:10:02.360
Yeah. I did start using, I created my own cookie cutter for some data science-y things that I was

00:10:02.360 --> 00:10:06.160
working on. And there's a data science cookie cutter that exists already, templates exist,

00:10:06.520 --> 00:10:11.180
but it wasn't completely sitting my knees. So I, I made my own and then I was going to make one

00:10:11.180 --> 00:10:16.820
for, for projects in our team. Cause we do some, you know, like one-off data analysis,

00:10:16.820 --> 00:10:21.760
advanced projects. And then discovered that GitHub now has, you can make a repo with a temp as a

00:10:21.760 --> 00:10:26.220
template and you can set it as a template in GitHub and then you just clone it and name it something

00:10:26.220 --> 00:10:31.340
else. So that's solved part of, it doesn't solve everything. You know, if you want something

00:10:31.340 --> 00:10:36.560
different, then, you know, this might be really good, but yeah, yeah, yeah, that's right. So I

00:10:36.560 --> 00:10:41.740
remember if you go to your GitHub repository under settings, there's a checkbox that's off by default

00:10:41.740 --> 00:10:45.500
that says this repository is a template. That's what you're talking about, right?

00:10:45.500 --> 00:10:45.940
Yeah.

00:10:45.940 --> 00:10:46.560
I see.

00:10:46.800 --> 00:10:51.680
So if you set up like empty, you can set up your, set your file structure. so it's got nothing

00:10:51.680 --> 00:10:56.360
about, I guess, some of the things that you're setting up in this one are not what you set up in,

00:10:56.360 --> 00:11:00.740
in the GitHub template. It's just the file structure really. And if any files, you know,

00:11:00.740 --> 00:11:06.440
that you want to pre-populate with any files. but yeah, so you, that's what I was going to

00:11:06.440 --> 00:11:08.780
solve with cookie cutter. Cookie cutter would have been overkill for this.

00:11:08.780 --> 00:11:12.580
I see. Yeah. I had never really thought of those two things as being the same, but you're right.

00:11:12.580 --> 00:11:16.580
They're, they're basically the same. Cause normally when you fork a repo, it's like, well, now you can

00:11:16.580 --> 00:11:21.240
contribute back, but the templates are just, now you start from here and it's not really related back.

00:11:21.240 --> 00:11:22.040
Right. Cool.

00:11:22.040 --> 00:11:22.500
Yeah.

00:11:22.500 --> 00:11:28.580
Nice. Well, that, yeah, that, that brings us to your first topic, right? Tell us about it.

00:11:28.580 --> 00:11:36.600
Yeah. Yeah. so I was thinking of data science and our team, we, we had a data science project,

00:11:36.600 --> 00:11:41.580
uh, that we started a couple of weeks ago and it had a deadline. So we weren't going to make anything

00:11:41.580 --> 00:11:47.520
particularly pretty. We just wanted to get something analyzed and done. so we were using lots of

00:11:47.520 --> 00:11:53.780
tooling that we hadn't used before because we're using massive data set. I think it was a couple of

00:11:53.780 --> 00:12:01.060
gigs worth of text. So we had to use, Google AI platform notebook, which is just Jupyter notebook

00:12:01.060 --> 00:12:06.240
on Google cloud. but you can, you can have different sizes of your machine. You can have as many

00:12:06.240 --> 00:12:10.620
cores as you want, different types of machines if you want. and it would just run notebook

00:12:10.620 --> 00:12:13.980
for you. So we thought that was sort of the problem. We just have like, have all these cores,

00:12:13.980 --> 00:12:19.420
um, and we run our notebook on that and it'll be magical, but it, it wasn't, and a hub.

00:12:19.420 --> 00:12:25.000
We're trying to apply to a pandas apply to this huge data frame. It just was not, was not working

00:12:25.000 --> 00:12:31.240
at all. we, we even had the process bar on the bottom, like under the cell and it would take,

00:12:31.240 --> 00:12:36.300
I think it was like 10 minutes to do, and it was still on 0%. And I thought, Oh wow.

00:12:36.300 --> 00:12:41.740
You don't have time for this. Yeah. Don't have time for this. We're already on a deadline and it's

00:12:41.740 --> 00:12:48.400
like, this isn't working. and then went over to, terminal and just checked like, top to see

00:12:48.400 --> 00:12:53.080
what, what, processes were going on. And this was like one Python thing. I thought, well,

00:12:53.080 --> 00:12:57.040
well, it's not, we could speed that up. Let's see what we can do there. Even though you have a ton

00:12:57.040 --> 00:13:02.040
of cores and a lot of heart, a high end machine, it's still just single threaded basically. Right.

00:13:02.040 --> 00:13:07.900
Yes, it is. so I looked at a few alternatives and didn't want to get too much into, I think some

00:13:07.900 --> 00:13:13.420
people were suggesting, there's some desk related modules we could use. Like I think Swifter

00:13:13.420 --> 00:13:20.360
was one, but there was, it didn't work instantly for me. So I looked for something else and found,

00:13:20.360 --> 00:13:24.300
um, you have 30 seconds library work for me. Yeah.

00:13:24.300 --> 00:13:31.820
I can't figure it out. Bin it. Start again. Find something else. I tried, found Pandarello,

00:13:31.820 --> 00:13:40.100
um, which just parallelizes any pandas apply function. so you can tell it, you can tell it if you,

00:13:40.100 --> 00:13:45.060
how many cores you want to use. You might not want to use all of them. and it's not like a linear

00:13:45.060 --> 00:13:49.300
or exponential improvement. Is it like doubling your cores? Does not necessarily have your time.

00:13:49.300 --> 00:13:53.460
Yeah. there's some overhead. but yeah, you can tell it how many cores you want to use.

00:13:53.460 --> 00:13:59.460
Um, you can also opt to think on the, if you scroll down, it says you can also add like a progress bar to

00:13:59.460 --> 00:14:04.980
it in the options. but it's, and then you've got some benchmarking there as well. And it's just really

00:14:04.980 --> 00:14:11.300
easy to use. so that solved our problem again, like the whole project was just quick and dirty,

00:14:11.300 --> 00:14:16.420
but, to get it done quickly, this is great. And then going over to terminal and doing top again,

00:14:16.420 --> 00:14:20.980
it's like all Python, just Python, Python, Python, Python. I was like, yeah. Yeah. Yeah. Beautiful.

00:14:20.980 --> 00:14:25.300
And by default, if you don't, you can specify the number of workers, but if you don't,

00:14:25.300 --> 00:14:30.340
it's just the number of CPU cores. Yeah. All of them. so just a quick question. It looks like this is,

00:14:30.340 --> 00:14:35.860
um, it says that it's mostly around the apply function. What does apply do as a reminder?

00:14:35.860 --> 00:14:42.420
Um, if you have a, if you specify a function somewhere and then when you, when you hit

00:14:42.420 --> 00:14:46.740
apply, I think it's an example that's actually a bit further down of the, of the kinds of,

00:14:46.740 --> 00:14:51.700
applies that you do. So you can have, where you'd normally put apply func. So you can apply

00:14:51.700 --> 00:14:57.780
a function to that whole directory of, sorry, to that whole data frame or to a specific,

00:14:57.780 --> 00:15:02.740
column within that data frame. so any function you apply will be column will be

00:15:02.740 --> 00:15:07.940
row wise in that column. Oh, okay. so the function only has to work on a single

00:15:07.940 --> 00:15:12.660
row essentially. so anywhere where you'd put apply, if you're using parallel, you just

00:15:12.660 --> 00:15:17.220
panderal, you just replace apply with parallel apply, and then it will. Nice.

00:15:17.220 --> 00:15:22.660
Yeah. That's cool. That's very cool. Yeah. That's super cool. Daniel asks,

00:15:22.660 --> 00:15:27.140
whoops, not that one, this one. He asks, how does this compare to Dask?

00:15:27.140 --> 00:15:27.620
I do not know.

00:15:27.620 --> 00:15:35.380
You know, I have not used Dask a lot either, but I think Dask can be set up to run in parallel on a

00:15:35.380 --> 00:15:42.580
given machine. it can also be set up to run, you know, in a distributed cluster basically.

00:15:42.580 --> 00:15:49.300
Yeah. my, my feeling is, yeah, my, my first impression is probably like, this is about,

00:15:49.300 --> 00:15:54.340
I've got to apply this function to every element. I want that to be fast and simple. Let's just do

00:15:54.340 --> 00:15:57.540
that. that's, that's my first thought.

00:15:57.540 --> 00:16:03.540
I think the, the other option I used or looked at for 30 seconds was Swifter. And I think that is

00:16:03.540 --> 00:16:07.620
a Dask base module, I think. but I might be misremembering.

00:16:07.620 --> 00:16:13.380
And then, somebody else said, that apply is like a map in base Python. So.

00:16:13.380 --> 00:16:17.860
Yeah, absolutely. Yeah. Very cool. Brian, what else is cool before we get on the next thing?

00:16:17.860 --> 00:16:23.620
What is, if I wanted to learn pytest, say if I was Jennifer's team, maybe I could get a book on

00:16:23.620 --> 00:16:29.380
pytest, right? So this episode is brought to you by us. Yeah. So I, I highly recommend a book called

00:16:29.380 --> 00:16:35.620
Python testing with pytest. There's a small glitch with it though. It was written in 2017. So,

00:16:35.620 --> 00:16:41.460
I, if you go to pytestbook.com, there's a bunch of a rata that will help you. There's some,

00:16:41.460 --> 00:16:47.060
just some minor changes. I forgot to pin a version of one of the libraries, stuff like that. So,

00:16:47.060 --> 00:16:54.180
um, if you go to pytestbook.com, that page has some a rata that helps you through learning pytest.

00:16:54.180 --> 00:16:58.580
Awesome. And with the book, there is a second edition on its way, but it is

00:16:58.580 --> 00:17:04.820
a long way out. So don't wait for it. That's a lot of work. Yeah. So, I'll over talk by the

00:17:04.820 --> 00:17:08.580
trading and we're working on a bunch of courses, breaking news, never mentioned this before,

00:17:08.580 --> 00:17:14.980
but we may be having a desk course coming soon. So, just, just so you know, and, Damon also

00:17:14.980 --> 00:17:19.780
says, probably with more experience than definitely me or Brian, the desk has more features.

00:17:19.780 --> 00:17:24.180
It can do chunking on the data frame to work around the Ram size limit, for example, and whatnot,

00:17:24.180 --> 00:17:29.940
which is pretty interesting. And also notice down over here, I was it, this option use memory.fs.

00:17:29.940 --> 00:17:34.580
Uh, it will actually use this memory file system thing, which sounds like it's good for lots of data

00:17:34.580 --> 00:17:40.340
as well. But, and I, I haven't been out much. I used to love to go out and get like a milkshake

00:17:40.340 --> 00:17:44.020
or something, but you wanted me to use ice cream instead for Python.

00:17:44.020 --> 00:17:45.940
Yes. What's going on here?

00:17:45.940 --> 00:17:52.820
Yeah. So actually, kind of love this. there's a, there's an article, from,

00:17:52.820 --> 00:17:58.500
Kuyen Tran, stop using print to debug in Python, use ice cream instead. And I think we've

00:17:58.500 --> 00:18:03.540
covered a couple of others, like other print alternatives. but, I went in and tried

00:18:03.540 --> 00:18:09.860
this and it's pretty cool. So, with the, with the new F print stuff, you can, there's,

00:18:09.860 --> 00:18:15.940
I forget when it came in, but you can do an equal sign, to, to print in, it prints a nice,

00:18:15.940 --> 00:18:21.140
like variable name or whatever, whatever you want. And then the value of it next to it. So it's nice,

00:18:21.140 --> 00:18:25.860
nice, but it's still a lot of typing. So if you want to print, print something nice,

00:18:25.860 --> 00:18:31.140
you, you know, type it's a, it's a lot of typing. It's not tons, but when you're throwing debugging in,

00:18:31.140 --> 00:18:36.260
you're probably stressed doing it quickly is good. So ice cream is just a way to do this faster. So

00:18:36.260 --> 00:18:41.860
ice cream is, instead of typing print for your debugging output, you type IC.

00:18:41.860 --> 00:18:48.020
So first of all, fewer characters, right? Right there. No curly brackets. You don't have to do

00:18:48.020 --> 00:18:53.940
quotes. it's just, I see. And then, and then you give it whatever object or expression

00:18:53.940 --> 00:19:00.020
you want to print. So that's cool. That's it. so even just at that, it's worth it. It's less

00:19:00.020 --> 00:19:04.740
typing. I mean, you do have to import it, but there's that. but there's other stuff too.

00:19:04.740 --> 00:19:12.340
So you can, if you don't give it any arguments, it, logs, it's kind of like easy deep flow

00:19:12.340 --> 00:19:18.660
control debugging without having a debugger, because if it, every time it hits an IC statement without,

00:19:18.660 --> 00:19:25.380
uh, without any arguments, it'll by default print, like the file and function and line number where

00:19:25.380 --> 00:19:31.300
it's at. So you can kind of trace through your stuff. So that's nice. if you want to have

00:19:31.300 --> 00:19:37.300
that tracing, be part of all of your statements, even the ones where you pass something in, there's

00:19:37.300 --> 00:19:43.460
a way to configure that too, which is very nice. Oh, nice. I, you can custom prefix, which is kind

00:19:43.460 --> 00:19:49.780
of, it's, which is like super powerful. I'm totally going to use it for this. so the example that they

00:19:49.780 --> 00:19:54.500
have is, is instead of you can, of course you can just put a string in or something, but it's a

00:19:54.500 --> 00:19:59.860
callback. So you have a callback function getting called. So you can use that. Their example is to

00:19:59.860 --> 00:20:04.260
inject the date time, which is kind of neat. You can inject the date time in your print statement,

00:20:04.260 --> 00:20:11.780
but I was thinking you could use that to, encode system state, like which users logged in or,

00:20:11.780 --> 00:20:16.660
whatever other system state you kind of want to, track while you're debugging something.

00:20:16.660 --> 00:20:21.860
This would be really cool to do since you can use a callback function. a couple other features

00:20:21.860 --> 00:20:26.940
with it. It, it doesn't go to standard out. It goes to standard error by default. So it's not

00:20:26.940 --> 00:20:32.440
cluttering up your output if you're storing your output somewhere. and then, one of the other

00:20:32.440 --> 00:20:38.480
things I'm glad they like this article lists this as a, as a feature, it's not a print statement. So

00:20:38.480 --> 00:20:43.000
when you want to clean out all your debugging, you can just search for all of your IC lines and clean

00:20:43.000 --> 00:20:47.620
those out. you don't, because you might have print statements that are supposed to be there and

00:20:47.620 --> 00:20:51.640
you don't need to clean those out. So definitely. Yeah. You could even sort of cancel it out with

00:20:51.640 --> 00:20:56.800
an import statement, just define import, define IC to be a function that takes whatever and does

00:20:56.800 --> 00:21:01.440
nothing. Yeah. Yeah. That's really cool. So people who are listening, you know, you, you say, if I were

00:21:01.440 --> 00:21:06.700
to say IC of a function call, like plus five and give it the number four, the output would be IC colon,

00:21:07.000 --> 00:21:12.360
then actually plus five with the argument values colon, the return value. And so it's a really nice

00:21:12.360 --> 00:21:17.140
way. Instead of just printing nine and 10, it prints, I called plus five with four and got nine.

00:21:17.140 --> 00:21:23.200
I called plus five with five and got 10. And it just, it sort of summarizes the, the debug information

00:21:23.200 --> 00:21:26.580
a little bit better. Jennifer, I think this might make sense inside even a Jupyter notebook.

00:21:26.580 --> 00:21:32.160
Yeah, I think it will. I was just, I was just thinking this is even less typing than if you used

00:21:32.160 --> 00:21:36.960
f-strings. Yeah. Yeah. Yeah. And a little more powerful. And like Brian said, you kind of know

00:21:36.960 --> 00:21:43.340
it's intentionally a debug thing. You could even rename, you know, import IC as debug and just like

00:21:43.340 --> 00:21:48.920
make it really clear if you really want it. Right. Oh yeah. Three extra letters to type. Yeah. I know.

00:21:48.920 --> 00:21:55.720
I know. Cause I'm not sure if I saw IC in my code, you know, without being familiar with this,

00:21:55.720 --> 00:21:59.940
that I know what that's about. It's your code. It's not a pun. Yeah. Are they making a pun?

00:22:00.280 --> 00:22:08.980
Like I see, I see my errors. Oh, I see. I see. Yes. They may be. They may be. And Piling is a fan of

00:22:08.980 --> 00:22:14.300
the name. Brilliant name. Yeah. It's pretty clever. All right. Good one, Brian. So the last two,

00:22:14.300 --> 00:22:20.040
by the way, the parallel Pandarello had a great visualization. This one has some great visuals.

00:22:20.040 --> 00:22:23.920
And this next one I want to talk about, you know, I think might be what part of the reason we love

00:22:23.920 --> 00:22:28.820
these things. It's like they, they communicate their value. So clearly this thing called HTMX,

00:22:28.820 --> 00:22:35.700
high power tools for HTML. So Brian, I know you fall into this realm. I do some of the time as well.

00:22:35.700 --> 00:22:41.900
Jennifer, maybe not sure. If you're going to write some interactive web pages, you really want to drop

00:22:41.900 --> 00:22:45.760
in and write a ton of JavaScript and do all that interaction by hand. Or would you rather just have

00:22:45.760 --> 00:22:51.660
it like magic its way into interactivity? And so that's a little bit. Yeah. Who doesn't want the magic,

00:22:51.660 --> 00:22:58.440
right? So this is kind of what this is like. Normally, if you have a web page, you have two

00:22:58.440 --> 00:23:03.620
options. You can have a form and that form could like post back and submit some data. And then you

00:23:03.620 --> 00:23:07.820
could write some JavaScript. So if I click on some element, something happens. But what this does is

00:23:07.820 --> 00:23:14.400
it lets you to go to almost any, any element in your page, a picture, paragraph, whatever. And you can say,

00:23:14.480 --> 00:23:20.320
if you interact with this, here is a CSS transition to run. Here's a WebSocket call to do. Here is a

00:23:20.320 --> 00:23:26.960
Ajax JavaScript call. And then it does something in reverse. So what I could say, for example, is when

00:23:26.960 --> 00:23:32.540
somebody clicks on this picture, replace it with whatever HTML fragment I get back on the server

00:23:32.540 --> 00:23:37.700
that I told it to call. So the picture could be like, click this for this bit of data report. And

00:23:37.700 --> 00:23:43.040
then what it does is return actually the HTML for a graph. That's like a live graph with the data

00:23:43.040 --> 00:23:48.080
prefilled. And all you have to do is touch the picture and teach the server how to return the HTML.

00:23:48.080 --> 00:23:52.740
And now you have this interactive page that's like live with animations and stuff. Super cool.

00:23:52.980 --> 00:23:57.100
So let me show you probably the best way to see this is through an example. So for example,

00:23:57.100 --> 00:24:01.500
there's a button. If you just include the script, that's all you got to do. And you say button,

00:24:01.500 --> 00:24:07.680
instead of having it in a form, you just say HX dash post. That's the HTMLX thing. You give it a URL.

00:24:07.680 --> 00:24:13.840
And when you click it, it says call slash clicked. And when it comes back, replace what button is,

00:24:13.840 --> 00:24:18.180
the outer HTML, like button and everything in it with whatever you got back from the server. Okay.

00:24:18.420 --> 00:24:23.380
And even has a, a haiku in here, which is pretty cool. JavaScript fatigue,

00:24:23.380 --> 00:24:28.680
longing for a hypertext already in hand, but let's go, let's go look at some examples. These are cool.

00:24:28.680 --> 00:24:34.580
For example, let's do lazy load. If I go over to lazy load, which is a little slow. So it probably

00:24:34.580 --> 00:24:41.300
it's lazy. It's quite lazy. It is indeed. Maybe we will. Here we go. So we come over here and

00:24:41.300 --> 00:24:46.860
if you just scroll down, you can see like it automatically loaded in this by refreshing.

00:24:46.860 --> 00:24:51.580
See, there's a little action, boop, boop, boop. And then off it goes. And all I got to do is say,

00:24:51.580 --> 00:24:56.880
is this image, it has this indicator. Here's the image to show while you're loading. And then what

00:24:56.880 --> 00:25:01.240
you want to do is just show whatever you get from slash graph. Isn't that slick? And like,

00:25:01.240 --> 00:25:04.340
that's literally what you get have to write. Let me show you another one.

00:25:04.340 --> 00:25:07.280
I might do this just for the lazy loading. That's great.

00:25:07.620 --> 00:25:11.160
I know here. Let's go do. Yeah. Look at the active search. So over here, I can type

00:25:11.160 --> 00:25:17.100
J E. Okay. There you go. And just, as you type, all you got to do to like type in this little text

00:25:17.100 --> 00:25:23.260
box and have all these search results come up lazy is just say, here's what you call ATP post. And the

00:25:23.260 --> 00:25:27.640
trigger is the key change. There's even a delay. So as you type really fast, it doesn't go insane on

00:25:27.640 --> 00:25:32.340
the server. It like waits really, really cool. Yeah. As a little indicator. And then if you notice at the

00:25:32.340 --> 00:25:37.280
bottom, there's this thing you can show and it shows all the requests and the responses

00:25:37.280 --> 00:25:41.940
that have gone back and forth. There's like a little debug toolbar here for the whole Ajax

00:25:41.940 --> 00:25:44.740
interaction. Oh, sweet. Isn't that sweet? Yeah.

00:25:44.740 --> 00:25:46.800
It is nice. How did you find this?

00:25:46.800 --> 00:25:52.640
Gosh, I don't remember. I feel like maybe, maybe somebody, some listener told us about it, or I just,

00:25:52.640 --> 00:25:56.640
I ran across it on Twitter or something. I feel like I found it from the community somewhere.

00:25:56.640 --> 00:25:57.500
Cool.

00:25:57.760 --> 00:26:01.900
But I don't remember where, but I'm, I'm excited about this. Include a JavaScript file,

00:26:01.900 --> 00:26:06.820
put one line, and then it becomes this cool interactive thing all over the place. So yeah,

00:26:06.820 --> 00:26:07.540
definitely digging it.

00:26:07.540 --> 00:26:09.280
Yeah. Totally can use that.

00:26:09.280 --> 00:26:10.060
Yeah, for sure.

00:26:10.060 --> 00:26:11.020
Yeah. Same.

00:26:11.020 --> 00:26:11.800
I'm sorry.

00:26:11.800 --> 00:26:15.760
It might, it might encourage me to update my website.

00:26:16.420 --> 00:26:20.820
Exactly. You're like, oh, it's super interactive. Look at all this. I rewrote it completely.

00:26:20.820 --> 00:26:21.580
So much fun.

00:26:21.580 --> 00:26:24.620
Yeah. Yeah. Cool. All right. What's next?

00:26:24.620 --> 00:26:32.840
Hi, LDA Viz. Yes. This is also part of that quick turnaround data science project that my team did

00:26:32.840 --> 00:26:42.440
a couple of weeks ago, we were looking at doing some topic analysis on text. And our first approach

00:26:42.440 --> 00:26:47.480
was to use latent dirichlet, dirichlet. Nobody knows how to say it. Just got to say it with confidence.

00:26:47.480 --> 00:26:54.320
Latent dirichlet. Oh no, I can't remember what the A stands for. Analysis. Maybe that's the A.

00:26:54.320 --> 00:27:00.880
We applied that. And, but it's the output to understand what you're looking at. You know,

00:27:00.880 --> 00:27:05.460
you can, you can have it print out what the topics are and what words contained in that topic. And,

00:27:05.460 --> 00:27:10.160
but, you know, you can't, it's really hard to sort of get into the output of your model to evaluate

00:27:10.160 --> 00:27:18.940
if it's a good model or not. So what some wonderful people in the R community did was they made LDA Viz,

00:27:18.940 --> 00:27:28.160
which just displays the different elements of the LDA output in a really, really intuitive way. So even if

00:27:28.160 --> 00:27:36.080
you're not too sure on the math behind LDA and, you know, what everything means, what, what Lambda is and what all the different,

00:27:36.080 --> 00:27:42.080
like complex interactions are, it's quite intuitive. If you, if you spend a bit of time exploring the visualization.

00:27:42.880 --> 00:27:52.200
So that was then ported into Python and that's called, in Python it's called PyLDA Viz, but the visualization is exactly the same.

00:27:52.200 --> 00:28:03.440
So, yeah. So you'd have, so in this little partial screenshot of visualization, we have some bars and the blue bars and the red bars.

00:28:03.520 --> 00:28:08.000
So the blue bars are like how, how much of the overall,

00:28:08.000 --> 00:28:11.180
you'd have all the words in all the topics, like in all the documents.

00:28:11.180 --> 00:28:17.220
So baseball, how of the, all the words in all the documents, how much does baseball,

00:28:17.220 --> 00:28:19.820
how much is baseball represented in all those documents?

00:28:19.820 --> 00:28:24.720
And the red bar represents how much in that topic, topic number 19,

00:28:25.120 --> 00:28:29.080
how much topic number 19 is made up of baseball.

00:28:29.080 --> 00:28:36.100
Oh, I see. So you have these different topics on the left that you can like click on them and it'll generate the bars to explain more detail.

00:28:36.100 --> 00:28:36.620
Yes.

00:28:36.620 --> 00:28:37.140
Okay.

00:28:37.140 --> 00:28:39.060
You can click in all the different topics.

00:28:39.740 --> 00:28:42.900
The number of topics is determined already in the model that you've already created.

00:28:42.900 --> 00:28:46.180
And you can change that, rerun the model and get that many topics out.

00:28:46.180 --> 00:28:51.460
So yes, you can like, you can click on the different topics and explore the top words,

00:28:51.460 --> 00:28:56.700
either top words based on how it's sensitive they are across all the documents or within that, that one topic.

00:28:56.700 --> 00:28:58.640
And then there's a slider as well.

00:28:58.640 --> 00:29:02.620
I don't know if it's an example, if you scroll down, but there'll be a slider,

00:29:02.620 --> 00:29:04.840
which goes between zero and one.

00:29:05.380 --> 00:29:14.940
And at one, it's the word order, the topic words order is ordered by representation across all the documents.

00:29:14.940 --> 00:29:22.300
And if you slide the slider all the way down to zero, it's shuffled all the words to be more specific,

00:29:22.300 --> 00:29:30.020
to show the words that are more specific to that topic, that are exclusive to that topic and not in other topics.

00:29:30.020 --> 00:29:35.640
Whereas if you have it to one, it's prioritizing the words in the list of words that are like everywhere.

00:29:35.640 --> 00:29:40.940
So yeah, that's just really easy and nice to play around with and explore your model.

00:29:40.940 --> 00:29:45.780
It seems like such a powerful way to explore these models around NLP stuff.

00:29:45.780 --> 00:29:46.200
Yeah.

00:29:46.200 --> 00:29:47.640
It just looks, it's just nice.

00:29:47.640 --> 00:29:51.200
It's just well designed and makes you feel happy playing with it.

00:29:51.200 --> 00:29:51.800
Yeah.

00:29:51.800 --> 00:29:54.100
These pictures and live interactions are great.

00:29:54.320 --> 00:29:54.520
Yeah.

00:29:54.520 --> 00:29:55.840
And there's really good documentation as well.

00:29:55.840 --> 00:30:02.640
So they've got links to easy to read documents that explain way better than I did what everything means

00:30:02.640 --> 00:30:05.420
and how to interpret stuff.

00:30:05.420 --> 00:30:07.300
So definitely take a look at that.

00:30:07.300 --> 00:30:10.400
And there's some, I think, links to some YouTube videos and whatnot as well.

00:30:10.400 --> 00:30:12.660
So yeah, the docs are really nice.

00:30:12.660 --> 00:30:16.180
Links to academic papers explaining what everything is and topic models.

00:30:16.180 --> 00:30:17.220
And yeah, good.

00:30:17.220 --> 00:30:17.640
Yeah.

00:30:17.640 --> 00:30:19.160
And there's some linked videos there.

00:30:19.160 --> 00:30:21.760
I didn't pull them out because I think they're probably like talks or something.

00:30:21.760 --> 00:30:23.300
But yeah, those look good as well.

00:30:23.580 --> 00:30:23.980
Yeah.

00:30:23.980 --> 00:30:24.460
Cool.

00:30:24.460 --> 00:30:24.920
Nice.

00:30:24.920 --> 00:30:28.500
So it says this package was ported over from R.

00:30:28.500 --> 00:30:32.820
And I know there's a fair number of things in the Python data science world that's like that.

00:30:32.820 --> 00:30:34.320
Do you see that still happening a lot?

00:30:34.320 --> 00:30:37.100
Like what's this interplay between R and Python these days?

00:30:37.100 --> 00:30:40.800
I think I've actually not seen that in a while.

00:30:40.800 --> 00:30:47.180
To me, I'm not very aware of it, but it seemed like that was really popular a couple of years ago.

00:30:47.180 --> 00:30:48.480
And I hear less of it now.

00:30:48.480 --> 00:30:49.080
Yeah.

00:30:49.080 --> 00:30:49.440
Yeah.

00:30:49.440 --> 00:30:50.240
Well, yeah, same.

00:30:50.240 --> 00:30:53.480
I think R is really, because R is a stat stat.

00:30:53.480 --> 00:30:54.620
It's a very popular language.

00:30:54.620 --> 00:30:59.980
So, and it's been around the stats longer, I think, than Python has been.

00:30:59.980 --> 00:31:02.000
It's much more mature when it comes to stats.

00:31:02.000 --> 00:31:09.180
And I think like very specific statistical applications are more advanced in R just because they've been around for longer.

00:31:10.020 --> 00:31:11.760
Python is definitely catching up, though.

00:31:11.760 --> 00:31:20.300
But, you know, with something like this, I think it's nice that rather than reinventing the wheel in Python, they've just taken something that already works and made it work in Python.

00:31:20.300 --> 00:31:21.040
Exactly.

00:31:21.040 --> 00:31:22.000
You're like, we like this.

00:31:22.000 --> 00:31:22.200
Yeah.

00:31:22.200 --> 00:31:22.600
We'll just do this.

00:31:22.600 --> 00:31:23.120
This is great.

00:31:23.120 --> 00:31:23.580
Yeah.

00:31:23.580 --> 00:31:24.600
Like, why change it?

00:31:24.840 --> 00:31:25.020
Yeah.

00:31:25.020 --> 00:31:38.520
Daniel Chen threw out there, going back a few topics, that there's conda-auto-env, that project, which works, I think, probably like the PDM thing that you had, Brian?

00:31:38.520 --> 00:31:39.100
What do you think?

00:31:39.100 --> 00:31:39.700
Say that again?

00:31:39.920 --> 00:31:45.960
I think we're talking about whether conda has this idea of automatically activating environments under PyPackages.

00:31:45.960 --> 00:31:49.180
I think this project, conda-auto-env probably does.

00:31:49.180 --> 00:31:51.960
And apparently there's a tie-in with RStudio as well.

00:31:51.960 --> 00:31:52.820
I think I agree with it.

00:31:52.820 --> 00:31:53.760
Nice.

00:31:53.760 --> 00:31:54.900
I was just looking at R.

00:31:54.900 --> 00:31:58.100
So R looks like it's been around since 93.

00:31:58.100 --> 00:31:59.600
I didn't know it was that old.

00:31:59.600 --> 00:32:00.240
Oh, wow.

00:32:00.240 --> 00:32:01.160
Yeah.

00:32:01.160 --> 00:32:02.880
Based on S, apparently.

00:32:02.880 --> 00:32:04.080
Based on what?

00:32:04.080 --> 00:32:05.040
F?

00:32:05.040 --> 00:32:05.620
Based on S?

00:32:05.620 --> 00:32:06.100
S.

00:32:06.100 --> 00:32:06.600
Yeah.

00:32:08.060 --> 00:32:10.340
Just one character, please.

00:32:10.340 --> 00:32:11.500
One character is all we need.

00:32:11.500 --> 00:32:11.720
Yeah.

00:32:11.720 --> 00:32:12.660
See what's ahead.

00:32:12.660 --> 00:32:13.180
We'll go with it.

00:32:13.180 --> 00:32:14.340
What was up to follow on?

00:32:14.340 --> 00:32:15.320
Yeah.

00:32:15.320 --> 00:32:19.040
R was my first programming language for data analysis.

00:32:19.040 --> 00:32:20.880
But I'm really out of touch with it.

00:32:20.880 --> 00:32:30.340
Now that we've got TidyR, which is supposed to be really amazing and great for, I guess, it makes it easier for people new to programming to get up and running quicker.

00:32:30.340 --> 00:32:35.000
But I look at R now and I think, oh, I don't know how that works or what that is.

00:32:35.000 --> 00:32:37.160
I've just been out of it for so long.

00:32:37.440 --> 00:32:37.660
Okay.

00:32:37.660 --> 00:32:39.180
So you're completely in Python now?

00:32:39.180 --> 00:32:39.700
Yes.

00:32:39.700 --> 00:32:40.480
Yeah.

00:32:40.480 --> 00:32:43.300
But I'm not like no to R.

00:32:43.300 --> 00:32:44.060
I don't know.

00:32:44.060 --> 00:32:47.980
You see it sometimes when people are like, yay to Python and no to R or the other way around.

00:32:47.980 --> 00:32:49.360
And I think it's just silly.

00:32:49.360 --> 00:32:49.840
Yeah.

00:32:49.840 --> 00:32:52.560
They're both really, really good at what they do.

00:32:52.560 --> 00:32:53.000
Yeah.

00:32:53.000 --> 00:32:57.140
If they're doing something cool like this, like LDA viz, do that here as well.

00:32:57.140 --> 00:32:57.540
Yeah.

00:32:57.540 --> 00:32:57.920
Yeah.

00:32:58.500 --> 00:33:06.460
Speaking of visualization, I want to remind people that are listening to the podcast that we do live stream it.

00:33:06.460 --> 00:33:09.840
So you can hop on on Wednesdays and watch with us.

00:33:09.840 --> 00:33:16.400
Or you can catch it on our YouTube channel so that you can see the things we're looking at.

00:33:16.400 --> 00:33:20.400
We highlight if we're looking at a web page or a cool visualization, we can see it.

00:33:20.400 --> 00:33:21.480
Yeah, absolutely.

00:33:21.480 --> 00:33:23.140
Is that it, Brian?

00:33:23.140 --> 00:33:24.160
I think it is.

00:33:24.160 --> 00:33:24.880
It is.

00:33:25.280 --> 00:33:27.200
Do you have any extra news or anything?

00:33:27.200 --> 00:33:31.760
Nothing super exciting, but I did want to tell people about the JetBrains survey.

00:33:31.760 --> 00:33:40.120
And if you've ever gone to the JetBrains site, did you know that they have a little terminal command prompt for agreeing to the cookie policy, which is kind of cool?

00:33:40.120 --> 00:33:40.400
Anyway.

00:33:40.400 --> 00:33:41.800
Yeah, I love it.

00:33:41.800 --> 00:33:45.260
I'm like, oh, I hate these cookie things, but that's kind of cool.

00:33:45.260 --> 00:33:45.840
I'm going to do that.

00:33:45.840 --> 00:33:50.820
So they are launching the developer ecosystem survey for 2021.

00:33:50.820 --> 00:33:52.720
And if you participate, you get some prizes.

00:33:52.720 --> 00:33:54.060
It does take a little while.

00:33:54.060 --> 00:33:55.060
It took me like 15 minutes.

00:33:55.220 --> 00:33:57.100
It's a non-trivial amount of questions.

00:33:57.100 --> 00:34:02.660
But I'm sure that we'll cover this in three months or whenever the report comes out, and there'll be all sorts of cool stuff we can talk about.

00:34:02.660 --> 00:34:04.900
So, you know, Python people, get your voice heard.

00:34:04.900 --> 00:34:05.360
Nice.

00:34:05.360 --> 00:34:05.880
Yeah.

00:34:05.880 --> 00:34:07.220
Got to remember to take that.

00:34:07.220 --> 00:34:07.600
Yeah.

00:34:07.600 --> 00:34:08.260
How about you?

00:34:08.260 --> 00:34:10.660
I've got a couple exciting bits.

00:34:10.660 --> 00:34:14.780
I am going to be speaking next week at a couple places.

00:34:14.780 --> 00:34:22.120
So I'm going to be speaking at the Python user group for Aberdeen, which it's in the UK.

00:34:22.120 --> 00:34:23.720
That's about all I know.

00:34:25.160 --> 00:34:26.160
It's online.

00:34:26.160 --> 00:34:27.040
It's a virtual thing.

00:34:27.040 --> 00:34:27.320
It's online.

00:34:27.320 --> 00:34:27.760
Yeah.

00:34:27.760 --> 00:34:28.460
It's online now.

00:34:28.460 --> 00:34:28.680
Yeah.

00:34:28.680 --> 00:34:29.800
It's an online thing.

00:34:29.800 --> 00:34:33.220
And so I'm going to teach.

00:34:34.440 --> 00:34:40.300
We kind of did a survey of the people going, and there's a lot of people new to testing and new to pytest.

00:34:40.300 --> 00:34:46.560
So I'm going to do sort of an intro to pytest sort of a thing, or at least a topic around pytest that's introductory.

00:34:47.360 --> 00:34:56.200
And then I'm going to do a similar talk, but targeted a little bit closer to what they're doing to NOAA, which I'll probably get that wrong.

00:34:56.200 --> 00:34:58.620
National Oceanic something, something.

00:34:59.160 --> 00:35:02.780
So I'm going to talk with a group of those people next week.

00:35:02.780 --> 00:35:03.440
That'll be fun.

00:35:03.440 --> 00:35:06.060
And, oh, it's in Scotland.

00:35:06.060 --> 00:35:07.520
Aberdeen is in Scotland.

00:35:07.520 --> 00:35:08.020
Sorry.

00:35:08.020 --> 00:35:10.760
Thank you, Alex.

00:35:11.040 --> 00:35:16.800
So I told my kids about both of the things, and they're like, yeah, Aberdeen, that sounds neat.

00:35:16.800 --> 00:35:17.940
But NOAA, really?

00:35:17.940 --> 00:35:19.080
You're going to be talking to them?

00:35:19.080 --> 00:35:20.500
So my kids are excited about that.

00:35:20.500 --> 00:35:22.040
Yeah, that's super cool.

00:35:22.040 --> 00:35:24.460
Jennifer, anything you want to throw out to people listening?

00:35:24.460 --> 00:35:25.980
You run a user group, right?

00:35:25.980 --> 00:35:26.820
Yeah.

00:35:26.880 --> 00:35:30.260
We've got PyData in Manchester that we have going on.

00:35:30.260 --> 00:35:38.320
And our next, it's on Meetup, and it's obviously on YouTube, because where else are we going to be?

00:35:38.320 --> 00:35:42.620
But then our next one coming up is on agent-based models.

00:35:42.620 --> 00:35:43.760
So that's going to be really cool.

00:35:43.760 --> 00:35:44.760
Looking forward to that one.

00:35:44.760 --> 00:35:50.980
And hopefully, and I'm not going to promise too much, but we did put our own podcast on hold for a little bit.

00:35:52.240 --> 00:35:56.720
So hopefully, we will start that up again this year.

00:35:56.720 --> 00:36:05.460
So one reason why I'm pretty interested in the tools that you guys use for your podcast, because I think this makes it really interesting and engaging.

00:36:05.460 --> 00:36:11.780
Yeah, well, I think some of these tools, like we're using, for example, StreamYard for our live streams and stuff,

00:36:11.780 --> 00:36:17.560
I do think there's a lot of low bar to adopt those kind of things for a lot of meetups and stuff.

00:36:17.560 --> 00:36:18.520
So yeah, that's cool.

00:36:18.520 --> 00:36:21.660
If people want to know what we're doing, they can shoot us a message, and we'll let them know.

00:36:21.920 --> 00:36:23.420
I just looked it up.

00:36:23.420 --> 00:36:26.080
Scotland is in the UK, so I wasn't completely wrong.

00:36:26.080 --> 00:36:26.460
It is.

00:36:26.460 --> 00:36:27.500
No, you're not wrong at all.

00:36:27.500 --> 00:36:29.640
It's like squares and rectangles.

00:36:29.640 --> 00:36:30.100
Come on.

00:36:30.100 --> 00:36:31.700
You said it was a rectangle.

00:36:31.700 --> 00:36:32.200
It's all good.

00:36:32.200 --> 00:36:33.020
All right.

00:36:33.020 --> 00:36:35.980
Well, with that, you think we should close it out with a joke?

00:36:35.980 --> 00:36:36.620
Yes.

00:36:36.620 --> 00:36:37.040
You think, Brian?

00:36:37.040 --> 00:36:37.500
Yeah.

00:36:37.500 --> 00:36:38.020
All right.

00:36:38.020 --> 00:36:44.280
So this one comes to us from Edward Orochena, and send us this cool picture here.

00:36:44.280 --> 00:36:49.180
And this has to do with an engineer helping a designer fix a problem.

00:36:49.180 --> 00:36:52.460
I kind of feel like I want to be the developer.

00:36:52.460 --> 00:36:54.480
Do you mind being the designer, Brian?

00:36:54.480 --> 00:36:55.040
Sure.

00:36:55.040 --> 00:36:55.580
All right.

00:36:55.580 --> 00:37:01.520
So Brian comes to me, the designer comes and says, there's a problem with this design.

00:37:01.520 --> 00:37:02.800
So I say, oh, no problem.

00:37:02.800 --> 00:37:03.140
No problem.

00:37:03.140 --> 00:37:04.420
We can fix this here in the terminal.

00:37:04.420 --> 00:37:07.580
I pull open Z shell, and I'm rolling along.

00:37:07.580 --> 00:37:09.320
Whoa, you're a hacker.

00:37:09.320 --> 00:37:09.980
No, no.

00:37:09.980 --> 00:37:11.080
It's just the terminal.

00:37:11.420 --> 00:37:14.420
But where are all the buttons and icons and drop-down menus?

00:37:14.420 --> 00:37:15.700
Is this the matrix?

00:37:15.700 --> 00:37:18.100
Yes.

00:37:18.100 --> 00:37:22.680
Have you ever had one of those experiences?

00:37:22.680 --> 00:37:25.940
I had one of those experiences at a coffee shop.

00:37:25.940 --> 00:37:28.940
I was doing something with the terminal, and I had three of them open.

00:37:28.940 --> 00:37:34.220
And one of them was tailing a log, and one was running a pip install script with a bunch

00:37:34.220 --> 00:37:38.640
of progress bars, and people were like, are you trying to hack us here on the wife?

00:37:38.640 --> 00:37:40.020
I'm like, no, I'm just working.

00:37:40.020 --> 00:37:40.520
Leave me alone.

00:37:40.520 --> 00:37:45.600
So I was on the other side of it to start with.

00:37:45.740 --> 00:37:47.820
I was a grad student.

00:37:47.820 --> 00:37:51.660
I shared an office with a couple other people.

00:37:51.660 --> 00:37:58.040
And one of the women that shared the office with us was a Vim user, or VI user at the time.

00:37:58.040 --> 00:38:00.200
And I was with tags and everything.

00:38:00.200 --> 00:38:04.020
And I was an Emacs person at the time with menus and stuff.

00:38:04.020 --> 00:38:09.520
And so I was watching her code once, and it's just jumping all over the place.

00:38:09.520 --> 00:38:13.400
So she'll go to a very, and her hand's on the keyboard, nothing, no mouse.

00:38:13.400 --> 00:38:17.780
And the windows are popping back and forth, and she's going all over the place.

00:38:17.780 --> 00:38:18.700
I'm like, oh, my God.

00:38:18.700 --> 00:38:21.140
She's like thinking into the computer.

00:38:21.140 --> 00:38:26.020
So I learned VI because of that experience.

00:38:26.020 --> 00:38:26.940
Oh, that's awesome.

00:38:26.940 --> 00:38:27.680
Yeah.

00:38:27.680 --> 00:38:33.200
When you see people just using Vim or any of Emacs, whatever, like that's mind-blowing.

00:38:33.200 --> 00:38:35.720
I still need my, I like to use my mouse.

00:38:35.720 --> 00:38:39.400
Yeah, I like a blended experience as well.

00:38:40.280 --> 00:38:40.720
Cool.

00:38:40.720 --> 00:38:41.720
Well, thanks, everybody.

00:38:41.720 --> 00:38:42.700
Yeah, thanks, Brian.

00:38:42.700 --> 00:38:43.280
Thanks, Jennifer.

00:38:43.280 --> 00:38:43.860
Thank you.

00:38:43.860 --> 00:38:45.440
Yeah, this was really fun.

00:38:45.440 --> 00:38:46.500
Thanks for having me.

00:38:46.500 --> 00:38:48.860
Thank you for listening to Python Bytes.

00:38:48.860 --> 00:38:51.420
Follow the show on Twitter via at Python Bytes.

00:38:51.420 --> 00:38:54.300
That's Python Bytes as in B-Y-T-E-S.

00:38:54.300 --> 00:38:57.700
And get the full show notes at pythonbytes.fm.

00:38:57.700 --> 00:39:02.080
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:39:02.080 --> 00:39:04.800
We're always on the lookout for sharing something cool.

00:39:04.800 --> 00:39:08.160
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:39:08.640 --> 00:39:11.780
Thank you for listening and sharing this podcast with your friends and colleagues.

