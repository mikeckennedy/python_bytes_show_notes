
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:10.400
This is episode 311 recorded November 22nd, 2022.


00:00:10.400 --> 00:00:11.600
And I am Brian Okken.


00:00:11.600 --> 00:00:12.600
I'm Michael Kennedy.


00:00:12.600 --> 00:00:13.800
And I'm Merlou Cunha.


00:00:13.800 --> 00:00:15.200
So welcome Merlou.


00:00:15.200 --> 00:00:18.600
So tell us a little bit about yourself before we jump into the topics.


00:00:18.600 --> 00:00:24.200
TLDR is I'm a machine learning engineer at a data and AI consultancy company called Data Roots.


00:00:24.200 --> 00:00:27.000
I'm from Brazil, but I actually live in Belgium.


00:00:27.000 --> 00:00:29.200
And I guess that's it.


00:00:29.200 --> 00:00:30.440
Thanks for having me.


00:00:30.440 --> 00:00:31.920
>> Thanks for showing up.


00:00:31.920 --> 00:00:32.920
>> It's great to have you here.


00:00:32.920 --> 00:00:35.440
>> Well, Michael, why don't you kick us off with the first topic?


00:00:35.440 --> 00:00:36.760
>> All right. Let's kick it off.


00:00:36.760 --> 00:00:38.920
I've got some fun stuff.


00:00:38.920 --> 00:00:40.560
Let's see what Marilo thinks about this.


00:00:40.560 --> 00:00:42.760
This is a little bit mathy,


00:00:42.760 --> 00:00:44.480
what I got going on here.


00:00:44.480 --> 00:00:47.200
That is not the right screen. How about that screen?


00:00:47.200 --> 00:00:51.880
This comes in from one of the big friends of the show, Brian Skin.


00:00:51.880 --> 00:00:53.920
He sent me a tweet and it just says,


00:00:53.920 --> 00:00:55.600
"What @PythonBytes?"


00:00:55.600 --> 00:01:00.240
And it's a quote tweet from somebody here saying,


00:01:00.240 --> 00:01:04.240
"Holy latexify is the sexiest thing I've ever seen."


00:01:04.240 --> 00:01:05.080
(laughing)


00:01:05.080 --> 00:01:06.040
And look at this.


00:01:06.040 --> 00:01:08.600
So when, I studied a ton of math,


00:01:08.600 --> 00:01:13.320
and the symbols of mathematics are really important,


00:01:13.320 --> 00:01:16.240
and they communicate stuff like really, really quickly.


00:01:16.240 --> 00:01:18.160
You can scan over and you see the symbol


00:01:18.160 --> 00:01:20.920
for the real numbers, or you can see the symbol


00:01:20.920 --> 00:01:24.360
for subset or infinite sum, and you're like,


00:01:24.360 --> 00:01:25.320
"I know what that means."


00:01:25.320 --> 00:01:28.680
When you translate that into Python or into computer code,


00:01:28.680 --> 00:01:32.200
it usually becomes something gnarly looking.


00:01:32.200 --> 00:01:36.600
The example here on this tweet has a function called solve,


00:01:36.600 --> 00:01:38.560
and it's solving the quadratic equation.


00:01:38.560 --> 00:01:41.080
I guess just for one variation of the root,


00:01:41.080 --> 00:01:42.520
not the plus minus, but that's fine.


00:01:42.520 --> 00:01:48.120
It just says like negative b plus math dot square b star star two.


00:01:48.120 --> 00:01:49.680
It's like symbol soup.


00:01:49.680 --> 00:01:52.460
So this latexify thing,


00:01:52.460 --> 00:01:56.960
Letechify, letech is the language of expressing those symbols


00:01:56.960 --> 00:01:59.560
the way mathematicians would have written them in


00:01:59.560 --> 00:02:01.600
the 16th century or whatever,


00:02:01.600 --> 00:02:07.800
like the fancy flowing sum symbols and integral symbols and whatnot.


00:02:07.800 --> 00:02:11.920
What this does is you just put a decorator onto that Python function,


00:02:11.920 --> 00:02:14.360
you say letechify.withLetech.


00:02:14.360 --> 00:02:18.820
Letech, when you show that function in a notebook,


00:02:18.820 --> 00:02:22.500
it shows the formal mathematics of it.


00:02:22.500 --> 00:02:23.380
>> Wow.


00:02:23.380 --> 00:02:25.440
>> There's one that was doing,


00:02:25.440 --> 00:02:26.540
I said the quadratic equation.


00:02:26.540 --> 00:02:28.020
Another one that says, if x is zero,


00:02:28.020 --> 00:02:32.780
return one else, return sine of x divided by x.


00:02:32.780 --> 00:02:36.160
Then the symbols is like this branching equation,


00:02:36.160 --> 00:02:38.160
like what you would write that in LaTeX,


00:02:38.160 --> 00:02:39.660
conceptually. What do you think?


00:02:39.660 --> 00:02:40.300
>> Wow.


00:02:40.300 --> 00:02:41.340
>> Is that insane?


00:02:41.340 --> 00:02:42.340
>> This is great.


00:02:42.340 --> 00:02:45.180
>> But it just changes the level of the function, I guess.


00:02:45.180 --> 00:02:47.180
If you call the function, it's all fine.


00:02:47.180 --> 00:02:49.180
>> Yeah, exactly. It doesn't change the function at all.


00:02:49.180 --> 00:02:51.940
It changes the repper or the stir.


00:02:51.940 --> 00:02:53.880
If you do this outside of a notebook,


00:02:53.880 --> 00:02:55.420
what it prints out,


00:02:55.420 --> 00:02:59.460
let me see if I can somehow communicate this back.


00:02:59.460 --> 00:03:02.380
If you print it out, what it returns,


00:03:02.380 --> 00:03:04.140
do I have it here? No.


00:03:04.140 --> 00:03:06.500
Yes, there. No, that's not it.


00:03:06.500 --> 00:03:10.220
Sorry, I don't have it. What it prints out is the LaTeX escape codes.


00:03:10.220 --> 00:03:14.420
It'll say backslash frack.


00:03:14.420 --> 00:03:16.940
I don't know how to write LaTeX.


00:03:16.940 --> 00:03:18.540
I did a little bit when I was studying math,


00:03:18.540 --> 00:03:20.880
and then I'd said, "That's something I never need to remember,"


00:03:20.880 --> 00:03:24.340
and shot it out of my brain.


00:03:24.340 --> 00:03:25.320
>> Never again.


00:03:25.320 --> 00:03:26.880
>> Yeah. Why do I need to know this?


00:03:26.880 --> 00:03:27.880
I don't need to know this.


00:03:27.880 --> 00:03:33.060
But yeah, so the repper is just the LaTeX escape codes,


00:03:33.060 --> 00:03:34.560
and then the notebooks see that,


00:03:34.560 --> 00:03:36.560
and then they render it as LaTeX.


00:03:36.560 --> 00:03:39.620
>> That's pretty cool. But one of the nice things about this then is,


00:03:39.620 --> 00:03:44.960
you might have the math that you're trying to convert to code,


00:03:44.960 --> 00:03:46.680
and then you can check your answer.


00:03:46.680 --> 00:03:50.560
You can just see, did I get it right in code?


00:03:50.560 --> 00:03:52.160
So, it's pretty cool.


00:03:52.160 --> 00:03:53.040
- That's really interesting.


00:03:53.040 --> 00:03:54.560
Yeah, 'cause you round trip it, right?


00:03:54.560 --> 00:03:56.560
- Yeah, I'm assuming people are doing this


00:03:56.560 --> 00:03:58.360
on their own code, so they're, you know.


00:03:58.360 --> 00:03:59.200
Oh, I guess you can--


00:03:59.200 --> 00:04:01.760
- The question about the inverse, right?


00:04:01.760 --> 00:04:04.640
It's like, hey, if I have the math symbols,


00:04:04.640 --> 00:04:06.480
could I turn this into a Python function?


00:04:06.480 --> 00:04:08.560
I mean, I don't see why I can't go both ways.


00:04:08.560 --> 00:04:09.600
- Sure, true.


00:04:09.600 --> 00:04:10.880
But I still think it would be easier


00:04:10.880 --> 00:04:13.120
to write the Python function than the latex code


00:04:13.120 --> 00:04:14.600
for rendering it.


00:04:14.600 --> 00:04:15.920
- Yeah, that's true.


00:04:15.920 --> 00:04:17.520
I think it's a pretty niche use case.


00:04:17.520 --> 00:04:18.520
Well, you know, I'm sure.


00:04:18.520 --> 00:04:21.440
- Well, I'm sure someone's gonna find a cool use case


00:04:21.440 --> 00:04:22.480
for it too, right?


00:04:22.480 --> 00:04:25.200
- Yeah, this is pretty interesting.


00:04:25.200 --> 00:04:27.880
We've got a couple of live comments.


00:04:27.880 --> 00:04:29.720
Madison, hey Madison, out in the audience.


00:04:29.720 --> 00:04:31.520
Madison's been on the show before.


00:04:31.520 --> 00:04:33.880
I'm blown away by how libraries like this


00:04:33.880 --> 00:04:35.560
are able to make math approachable.


00:04:35.560 --> 00:04:36.560
I wonder how this could be used


00:04:36.560 --> 00:04:37.960
with auto-generated documentation.


00:04:37.960 --> 00:04:39.340
Very cool, I agree.


00:04:39.340 --> 00:04:42.120
And Henry also says, I'm guessing it's working


00:04:42.120 --> 00:04:44.240
on the bytecode like Numba,


00:04:44.240 --> 00:04:45.760
but compiling it into a human language.


00:04:45.760 --> 00:04:48.820
>> Yeah, compile it into the LaTeX escape codes.


00:04:48.820 --> 00:04:49.500
>> Which is not human.


00:04:49.500 --> 00:04:49.980
>> Basically.


00:04:49.980 --> 00:04:50.820
>> Yeah.


00:04:50.820 --> 00:04:52.580
>> Which is the opposite of unreadable,


00:04:52.580 --> 00:04:54.260
but it is text, right?


00:04:54.260 --> 00:04:57.300
You know, related to this just as-


00:04:57.300 --> 00:04:59.580
>> Oh, yeah. Henry tells us how it's done.


00:04:59.580 --> 00:05:01.740
>> Okay. It's using inspect,


00:05:01.740 --> 00:05:03.060
get source, and parsing the AST.


00:05:03.060 --> 00:05:04.980
Yeah, perfect. Another thing that's amazing,


00:05:04.980 --> 00:05:07.780
if people check out the SymPy stuff,


00:05:07.780 --> 00:05:10.100
it does some really,


00:05:10.100 --> 00:05:13.420
really interesting things like if you go say to like calculus,


00:05:13.420 --> 00:05:15.020
you take a limit here,


00:05:15.020 --> 00:05:18.100
It'll do similar outputs as well, right?


00:05:18.100 --> 00:05:23.580
So you could put in this and it'll actually express it as symbolic math,


00:05:23.580 --> 00:05:26.940
and it won't lose precision because it solves it symbolically.


00:05:26.940 --> 00:05:29.180
You can say like, "Factor this equation."


00:05:29.180 --> 00:05:31.340
So that's related, but this just says,


00:05:31.340 --> 00:05:36.340
"Given any arbitrary Python function not written in the symbolic form,"


00:05:36.340 --> 00:05:38.740
just turn it into a LaTeX, which is pretty amazing.


00:05:38.740 --> 00:05:41.380
So anyway, thank you, Brian Skin for pointing that out.


00:05:41.380 --> 00:05:42.580
That is pretty neat.


00:05:42.580 --> 00:05:45.480
One final comment, I could not get it to install


00:05:45.480 --> 00:05:49.000
on my Apple Silicon Mac, maybe that detail matters,


00:05:49.000 --> 00:05:51.020
but I couldn't get it to pip install.


00:05:51.020 --> 00:05:54.760
Out of PyPI, I had to pip install the git plus


00:05:54.760 --> 00:05:57.380
the GitHub URL, and then it would install.


00:05:57.380 --> 00:05:59.280
I don't know why, but if people wanna play with it,


00:05:59.280 --> 00:06:00.360
that might be necessary.


00:06:00.360 --> 00:06:01.660
- Okay, cool. - Yeah.


00:06:01.660 --> 00:06:02.820
Over to you, Brian.


00:06:02.820 --> 00:06:05.360
- All right, well, while we're talking about math,


00:06:05.360 --> 00:06:08.700
I'm often working in the measurement world


00:06:08.700 --> 00:06:11.620
and where we care about prefixes a lot,


00:06:11.620 --> 00:06:15.180
and a lot of people do with big numbers or small numbers.


00:06:15.180 --> 00:06:20.180
And this was actually suggested to us by Avram.


00:06:20.180 --> 00:06:23.660
And I think he either works on this or it's his project.


00:06:23.660 --> 00:06:25.380
It's a project called Prefixed.


00:06:25.380 --> 00:06:30.180
And what this does is it's just, it's a class,


00:06:30.180 --> 00:06:33.180
it provides a class called float, capital F,


00:06:33.180 --> 00:06:37.960
that is a, derives from the built-in float,


00:06:37.960 --> 00:06:42.960
and it supports scientific and IEC,


00:06:42.960 --> 00:06:47.040
which I'm not familiar with, prefixes.


00:06:47.040 --> 00:06:52.040
So things like scientific, like K and S and things like that.


00:06:52.040 --> 00:06:54.560
If you go look at all the metric prefixes,


00:06:54.560 --> 00:06:57.240
you've got like, there's some new ones,


00:06:57.240 --> 00:07:00.680
but N, K, mega, giga, things like that.


00:07:00.680 --> 00:07:05.160
And it just, so it adds these onto when you print them.


00:07:05.160 --> 00:07:07.200
So it acts just like a normal float.


00:07:07.200 --> 00:07:11.080
Most of the time, you can use it in math equations


00:07:11.080 --> 00:07:11.920
and everything.


00:07:11.920 --> 00:07:16.080
The interesting thing is if it is used in math equation,


00:07:16.080 --> 00:07:21.080
the result will be one of these prefix float types.


00:07:21.080 --> 00:07:23.080
But then the nice thing about it


00:07:23.080 --> 00:07:25.080
is when you convert it to a string,


00:07:25.080 --> 00:07:28.880
it includes the little prefix thing,


00:07:28.880 --> 00:07:30.520
or the suffix, or whatever,


00:07:30.520 --> 00:07:34.120
the little micro, or K, or M, or something like that.


00:07:34.120 --> 00:07:37.680
So I think this is actually super helpful.


00:07:37.680 --> 00:07:40.180
I'm gonna use this right away because I, you know,


00:07:40.180 --> 00:07:42.500
I use a lot of like big and small numbers


00:07:42.500 --> 00:07:44.680
and reporting out just the huge thing


00:07:44.680 --> 00:07:48.800
or just the float is sometimes horrible to compare with.


00:07:48.800 --> 00:07:51.080
So this is pretty cool.


00:07:51.080 --> 00:07:51.920
- It's very clever.


00:07:51.920 --> 00:07:54.280
I love how simple the idea is.


00:07:54.280 --> 00:07:56.200
So you can just F string one of these floats


00:07:56.200 --> 00:08:00.600
and say colon 0.2H, and that'll convert it to its,


00:08:00.600 --> 00:08:02.920
and the age tells it to be either, you know,


00:08:02.920 --> 00:08:05.720
kila or micro or mega or, you know,


00:08:05.720 --> 00:08:07.360
whatever suffix is needed.


00:08:07.360 --> 00:08:08.200
That's cool.


00:08:08.200 --> 00:08:09.920
- Right, and then there's the byte example


00:08:09.920 --> 00:08:13.680
where they said, well, I'm gonna use the capital B


00:08:13.680 --> 00:08:17.400
for bytes, but that's after the formatting of the number.


00:08:17.400 --> 00:08:20.800
And then the K comes in from the float thing.


00:08:20.800 --> 00:08:22.960
So that's pretty cool.


00:08:22.960 --> 00:08:25.000
One of the other things that he passed along


00:08:25.000 --> 00:08:27.440
is there's some new prefixes.


00:08:27.440 --> 00:08:30.720
So this is apparently new.


00:08:30.720 --> 00:08:33.440
New scientific prefixes over the last,


00:08:33.440 --> 00:08:36.720
for the first ones, new ones for the last 30 years,


00:08:36.720 --> 00:08:37.560
apparently.


00:08:37.560 --> 00:08:41.820
So we have 10 to the 21st, which is Zeta,


00:08:41.820 --> 00:08:44.400
and 10 to the 24th, which is Yotta,


00:08:44.400 --> 00:08:47.900
and then negative is Zepto and Yocto.


00:08:47.900 --> 00:08:49.620
So these are fun.


00:08:49.620 --> 00:08:51.360
- Maybe, why now?


00:08:51.360 --> 00:08:53.880
Why they decided to, like,


00:08:53.880 --> 00:08:56.020
need to have more money now


00:08:56.020 --> 00:08:58.860
need to come up with new prefixes or?


00:08:58.860 --> 00:08:59.780
- Exactly.


00:08:59.780 --> 00:09:03.060
- I'm not sure why we need new prefixes.


00:09:03.060 --> 00:09:05.040
- Our microscopes can now see smaller things.


00:09:05.040 --> 00:09:06.500
We don't have words for this,


00:09:06.500 --> 00:09:08.540
that things are this small, like.


00:09:08.540 --> 00:09:12.040
- But national debt, maybe.


00:09:12.040 --> 00:09:15.740
- Yeah, very possible.


00:09:15.740 --> 00:09:19.100
- But also Avram notes that prefix


00:09:19.100 --> 00:09:20.620
does handle these new ones.


00:09:20.620 --> 00:09:22.460
So cool, good job.


00:09:22.460 --> 00:09:25.260
- One thing in Python too, you can put the underscore, right?


00:09:25.260 --> 00:09:26.980
Like if you put underscore in the thousands,


00:09:26.980 --> 00:09:29.340
that also, that's something that makes it easier,


00:09:29.340 --> 00:09:31.340
I think, to read the numbers too.


00:09:31.340 --> 00:09:32.180
That's what I was using to know.


00:09:32.180 --> 00:09:33.900
- Yeah, like the digit grouping, yeah.


00:09:33.900 --> 00:09:35.240
- Yeah. - Do you do that a lot?


00:09:35.240 --> 00:09:38.780
- Not a lot, but like some, whenever I can, I do.


00:09:38.780 --> 00:09:41.380
I think it makes it easier to distinguish


00:09:41.380 --> 00:09:42.700
how big the number is, I guess.


00:09:42.700 --> 00:09:43.980
- I always forget to.


00:09:43.980 --> 00:09:46.400
I just, I know it's there, but I never use it.


00:09:46.400 --> 00:09:49.160
- I think usually it's like when I'm counting the zeros


00:09:49.160 --> 00:09:50.320
with my finger on the screen, I'm like,


00:09:50.320 --> 00:09:52.660
no, no, maybe I'll just put a underscore there.


00:09:52.660 --> 00:09:54.660
It makes everyone's life easier.


00:09:54.660 --> 00:09:55.500
- Yeah.


00:09:55.500 --> 00:09:56.940
- Yeah, I've really started doing that a lot


00:09:56.940 --> 00:09:59.140
the last couple of years, but before then I didn't.


00:09:59.140 --> 00:09:59.980
- Cool.


00:09:59.980 --> 00:10:01.500
- Well, what is next?


00:10:01.500 --> 00:10:03.300
- Merlo, what you got for us?


00:10:03.300 --> 00:10:04.700
- I think that's me.


00:10:04.700 --> 00:10:05.540
- Yeah.


00:10:05.540 --> 00:10:07.580
- DBT, have you ever--


00:10:07.580 --> 00:10:10.180
- First you gotta accept some cookies, hold on.


00:10:10.180 --> 00:10:11.700
- Oh, my bad, my bad.


00:10:11.700 --> 00:10:13.460
- Just kidding, I'm just teasing.


00:10:13.460 --> 00:10:14.300
- I love cookies.


00:10:14.300 --> 00:10:16.300
- I'm trying to, these cookie things drive me crazy, man.


00:10:16.300 --> 00:10:17.140
I don't know why.


00:10:17.140 --> 00:10:17.960
- Yeah, yeah, yeah.


00:10:17.960 --> 00:10:19.580
I think it's like crazy how like,


00:10:19.580 --> 00:10:20.860
now that it's popping up everywhere


00:10:20.860 --> 00:10:22.620
and then you see like the data,


00:10:22.620 --> 00:10:24.100
the gathering all the time and this and this


00:10:24.100 --> 00:10:25.100
Yeah.


00:10:25.100 --> 00:10:26.100
Yeah.


00:10:26.100 --> 00:10:27.100
But maybe DBT.


00:10:27.100 --> 00:10:28.100
Have you ever heard of DBT?


00:10:28.100 --> 00:10:31.980
Is this something because in the data world in my field, it's super popular, but I don't


00:10:31.980 --> 00:10:33.500
know if it's a bubble as well.


00:10:33.500 --> 00:10:34.500
I've never heard of it.


00:10:34.500 --> 00:10:35.500
Michael never heard of it.


00:10:35.500 --> 00:10:38.620
I think I've heard of it, but I couldn't tell you what it does.


00:10:38.620 --> 00:10:40.700
So I'm basically in the same spot.


00:10:40.700 --> 00:10:41.980
Tell us about it.


00:10:41.980 --> 00:10:43.700
No, it's a really cool tool.


00:10:43.700 --> 00:10:44.700
It's open source as well.


00:10:44.700 --> 00:10:46.660
They have their cloud option, I guess.


00:10:46.660 --> 00:10:47.660
Right.


00:10:47.660 --> 00:10:48.860
So you can pay and they host it.


00:10:48.860 --> 00:10:52.660
Maybe a disclaimer as well that I never, I always see it and I always want to use it,


00:10:52.660 --> 00:10:54.360
and I haven't found the use case.


00:10:54.360 --> 00:10:56.820
So I don't have first-hand experience here.


00:10:56.820 --> 00:10:58.740
But basically the way I would describe


00:10:58.740 --> 00:11:01.700
is that they add best practices around SQL projects.


00:11:01.700 --> 00:11:05.300
So why am I mentioning this on Python Bytes?


00:11:05.300 --> 00:11:06.980
It's built with Python, yay.


00:11:06.980 --> 00:11:08.580
And the other thing too is that


00:11:08.580 --> 00:11:12.900
they actually mix Jinja with SQL stuff, right?


00:11:12.900 --> 00:11:14.300
So you can actually do for loops,


00:11:14.300 --> 00:11:15.140
you can do stuff like that.


00:11:15.140 --> 00:11:16.700
So you don't have to repeat every time


00:11:16.700 --> 00:11:18.540
and just change the variable.


00:11:18.540 --> 00:11:20.740
They also have these like reference macros and stuff.


00:11:20.740 --> 00:11:23.320
so you can actually say, okay, this comes from that table


00:11:23.320 --> 00:11:25.060
that is on that file and this comes from this.


00:11:25.060 --> 00:11:27.400
So you can actually chain a lot of these dependencies,


00:11:27.400 --> 00:11:28.900
right, like there's a lot of projects


00:11:28.900 --> 00:11:30.760
that you have these ETL stuff, right?


00:11:30.760 --> 00:11:32.860
So you just have to basically transform each step.


00:11:32.860 --> 00:11:34.680
And with DBT, they actually keep track


00:11:34.680 --> 00:11:36.520
of what depends on what, and you can say,


00:11:36.520 --> 00:11:38.000
oh, I want the freshest data here,


00:11:38.000 --> 00:11:39.120
and you execute everything


00:11:39.120 --> 00:11:41.160
that needs to be executed there.


00:11:41.160 --> 00:11:42.000
- Wow.


00:11:42.000 --> 00:11:43.080
- Yeah, so it's super cool.


00:11:43.080 --> 00:11:45.120
They actually support a lot of like data platforms here,


00:11:45.120 --> 00:11:48.680
right, so you see like BigQuery, Databricks, Snowflake,


00:11:48.680 --> 00:11:50.720
all these things as well.


00:11:50.720 --> 00:11:53.040
Another thing that they also more things they do,


00:11:53.040 --> 00:11:55.360
they even have some data validation stuff,


00:11:55.360 --> 00:11:57.680
which in my field, it's a big thing too,


00:11:57.680 --> 00:11:59.760
like maybe you have an ID column that needs to be unique,


00:11:59.760 --> 00:12:01.200
cannot be null, and you wanna make sure


00:12:01.200 --> 00:12:02.160
that that always happens.


00:12:02.160 --> 00:12:04.320
And if it doesn't happen, you wanna be flagged, right?


00:12:04.320 --> 00:12:05.320
So that's super cool.


00:12:05.320 --> 00:12:07.680
What else?


00:12:07.680 --> 00:12:09.760
You also have some built-in documentation.


00:12:09.760 --> 00:12:11.720
So once you have the dependencies,


00:12:11.720 --> 00:12:13.600
you can say, oh, show me the DAG,


00:12:13.600 --> 00:12:16.000
show me where the data comes from and what depends on what.


00:12:16.000 --> 00:12:17.360
So that's also super cool.


00:12:17.360 --> 00:12:19.740
And recently, actually, they actually started supporting,


00:12:19.740 --> 00:12:23.460
So like an SQL file kind of corresponds to a model, right?


00:12:23.460 --> 00:12:25.100
Oh, cookies again.


00:12:25.100 --> 00:12:28.900
And so they have SQL models, so that's the one,


00:12:28.900 --> 00:12:31.080
but they also started supporting Python models, right?


00:12:31.080 --> 00:12:33.160
So this is very tight to data.


00:12:33.160 --> 00:12:34.660
So now you can actually mix and match, right?


00:12:34.660 --> 00:12:37.220
You can say this step, this transformation is in SQL,


00:12:37.220 --> 00:12:39.060
but this one is actually in Python, right?


00:12:39.060 --> 00:12:41.280
So the way they don't run anything on the machine,


00:12:41.280 --> 00:12:42.760
they actually send it to the cloud.


00:12:42.760 --> 00:12:44.380
So Snowflake has Snowpark,


00:12:44.380 --> 00:12:47.140
which is Python on its own Snowflake.


00:12:47.140 --> 00:12:50.300
BigQuery has Spark and Databricks as well, right?


00:12:50.300 --> 00:12:52.700
So basically you can mix and match these transformations here,


00:12:52.700 --> 00:12:53.660
these transformations there,


00:12:53.660 --> 00:12:56.140
but everything is like in a nice put in one place.


00:12:56.140 --> 00:12:58.860
And because it's on Git as well, you can have CI/CD.


00:12:58.860 --> 00:13:01.380
I think also you mentioned, I think it was you, Brian,


00:13:01.380 --> 00:13:03.180
that mentioned SQL Fluff,


00:13:03.180 --> 00:13:05.980
and SQL Fluff actually came from a DBT project as well.


00:13:05.980 --> 00:13:08.300
So, and it's all in Python, so super cool.


00:13:08.300 --> 00:13:09.500
- Wow, that's really neat.


00:13:09.500 --> 00:13:11.620
So what do the Python models look like?


00:13:11.620 --> 00:13:15.060
Are they straight Python classes or are they Pydantic or?


00:13:15.060 --> 00:13:17.260
I have, I watch, maybe I'm a bit lazy


00:13:17.260 --> 00:13:18.780
'cause I just watched a video


00:13:18.780 --> 00:13:21.780
and they were showing here how it works.


00:13:21.780 --> 00:13:23.620
'Cause it's also doing a comparison, right?


00:13:23.620 --> 00:13:25.860
Maybe this is, no, this doesn't work, does it?


00:13:25.860 --> 00:13:26.860
- Yeah, it works.


00:13:26.860 --> 00:13:27.700
- This works?


00:13:27.700 --> 00:13:28.520
- Yeah, it was wrong.


00:13:28.520 --> 00:13:30.540
- Okay, but the quality is horrible.


00:13:30.540 --> 00:13:31.360
- That's okay.


00:13:31.360 --> 00:13:32.980
- But in a nutshell, you have this basically.


00:13:32.980 --> 00:13:33.820
- Yeah.


00:13:33.820 --> 00:13:35.220
- You define a function.


00:13:35.220 --> 00:13:37.340
Yeah, you define a function that has a dbt in a session


00:13:37.340 --> 00:13:38.260
and then you create a reference.


00:13:38.260 --> 00:13:40.020
So reference is basically a table, right?


00:13:40.020 --> 00:13:41.660
And you can say, and then from that point on,


00:13:41.660 --> 00:13:43.620
you can say two pandas and then you can just basically


00:13:43.620 --> 00:13:45.780
use the pandas API to transform that, right?


00:13:45.780 --> 00:13:47.360
So there's still some caveats, right?


00:13:47.360 --> 00:13:49.300
'Cause panda is not super performant


00:13:49.300 --> 00:13:50.780
depending on how much data you have and whatnot.


00:13:50.780 --> 00:13:52.400
So sometimes you just probably still wanna stick


00:13:52.400 --> 00:13:55.620
to the SQL stuff, but then it opens a lot


00:13:55.620 --> 00:13:57.340
of possibilities there too, right?


00:13:57.340 --> 00:13:59.580
So even stuff like deploying machine learning models


00:13:59.580 --> 00:14:01.640
on the SQL infrastructure and everything, so.


00:14:01.640 --> 00:14:06.380
- Yeah, so it's kind of the same old, same old story.


00:14:06.380 --> 00:14:07.800
Even if you're working with an ORM,


00:14:07.800 --> 00:14:10.060
sometimes you don't wanna bring all that data back


00:14:10.060 --> 00:14:11.220
to make some minor change.


00:14:11.220 --> 00:14:15.300
but you would just do a sort of an update statement instead of pull back 10,000 models,


00:14:15.300 --> 00:14:19.300
change something and call save 10,000 times, right? Like it's probably that kind of tradeoff,


00:14:19.300 --> 00:14:24.260
but it's really cool that you can bring it back into Python this way. What are you using it for?


00:14:24.260 --> 00:14:28.980
Like, what are you interested in using it for? - Well, I think we have a lot of these like ETL


00:14:28.980 --> 00:14:33.380
pipeline stuff, right? A lot of these, we have some data here and then we want to like basically


00:14:33.380 --> 00:14:38.260
clean it up and make sure it's all uniform and put in a dashboard, calculate some KPIs and whatnot,


00:14:38.260 --> 00:14:41.940
right? And so business people can see, are we doing better? Are we making more money or not?


00:14:41.940 --> 00:14:47.700
And a lot of the times it's just SQL, right? It's also more accessible for a lot of people. So we


00:14:47.700 --> 00:14:53.060
stick to SQL, but there are also limitations, right? But before what I've seen is people just


00:14:53.060 --> 00:14:57.460
kind of go in the UI and just execute stuff ad hoc, right? So no versioning, nothing. And I


00:14:57.460 --> 00:15:01.380
think this kind of puts everything in one place. You can even add CI/CD because the CLI tool and


00:15:01.380 --> 00:15:04.900
everything, and just kind of make sure that everything goes to that versioned method,


00:15:04.900 --> 00:15:06.820
that let's say, I mean, and again, yeah,


00:15:06.820 --> 00:15:08.860
if you need something more fancy, right,


00:15:08.860 --> 00:15:10.660
then you can throw some Python stuff in there,


00:15:10.660 --> 00:15:12.740
but usually we try to avoid it, to be honest.


00:15:12.740 --> 00:15:14.220
- I can imagine.


00:15:14.220 --> 00:15:16.100
Let's see here, hold on.


00:15:16.100 --> 00:15:18.860
Yeah, the models, the way you express the code,


00:15:18.860 --> 00:15:21.940
it's really nice looking for a SQL,


00:15:21.940 --> 00:15:23.460
which is surprising, right?


00:15:23.460 --> 00:15:26.600
This code you write, like with customers as select


00:15:26.600 --> 00:15:29.220
these fields from this table.


00:15:29.220 --> 00:15:31.260
- Yeah, and they have, they also have like


00:15:31.260 --> 00:15:32.920
the different macros and like people can write


00:15:32.920 --> 00:15:35.360
different macro, so like the describe function in Panda,


00:15:35.360 --> 00:15:37.640
someone can just have written that and you can import that


00:15:37.640 --> 00:15:40.320
and it's really nice to share all these things as well.


00:15:40.320 --> 00:15:43.480
So super cool, really, really eager to give it a try,


00:15:43.480 --> 00:15:45.840
to be honest, I've been just like, try and scratch that.


00:15:45.840 --> 00:15:48.560
- Yeah, wait, when's the next project


00:15:48.560 --> 00:15:49.400
that we get to use this on?


00:15:49.400 --> 00:15:51.360
- Indeed, indeed, indeed.


00:15:51.360 --> 00:15:53.040
- Yeah, all right, Brian, anything you want to add


00:15:53.040 --> 00:15:56.680
before we jump over to talking about our sponsor real quick?


00:15:56.680 --> 00:15:59.040
- Yeah, no, let's talk about our sponsor.


00:15:59.040 --> 00:15:59.860
- All right.


00:15:59.860 --> 00:16:01.720
- So today's episode of Python Bytes


00:16:01.720 --> 00:16:05.280
brought to you by Microsoft for Startups Founders Hub.


00:16:05.280 --> 00:16:10.040
The Microsoft for Startups set out to understand what startups need to be successful and created


00:16:10.040 --> 00:16:14.640
a digital platform to help you overcome those challenges and they came up with Microsoft


00:16:14.640 --> 00:16:16.160
for Startups Founders Hub.


00:16:16.160 --> 00:16:20.480
The Founders Hub provides all founders at any stage with free resources to help solve


00:16:20.480 --> 00:16:21.680
startup challenges.


00:16:21.680 --> 00:16:26.320
The platform provides access to expert guidance, skilled resources, mentorship, and networking


00:16:26.320 --> 00:16:29.480
connections, technology benefits, and so much more.


00:16:29.480 --> 00:16:31.420
Founders Hub is truly open to all.


00:16:31.420 --> 00:16:33.740
You don't need to be investor backed, but you can be.


00:16:33.740 --> 00:16:36.380
Speed up development with free access to GitHub


00:16:36.380 --> 00:16:38.140
and the Microsoft Cloud.


00:16:38.140 --> 00:16:39.680
You can unlock credits over time,


00:16:39.680 --> 00:16:41.420
and there's also discounts and benefits


00:16:41.420 --> 00:16:44.660
from innovative companies partnering with Founders Hub,


00:16:44.660 --> 00:16:45.940
such as OpenAI.


00:16:45.940 --> 00:16:48.980
You'll have access to their mentorship network,


00:16:48.980 --> 00:16:50.640
which includes hundreds of mentors


00:16:50.640 --> 00:16:52.500
across a range of disciplines.


00:16:52.500 --> 00:16:55.560
Need advice on marketing, fundraising, idea validation?


00:16:55.560 --> 00:16:58.220
There's tons of topics, including management and coaching.


00:16:58.220 --> 00:17:00.140
You'll be able to book one-on-one meetings


00:17:00.140 --> 00:17:04.900
with the mentors, many of whom are former founders themselves.


00:17:04.900 --> 00:17:06.940
It's no longer about who you know.


00:17:06.940 --> 00:17:09.660
Get critical support you need from Microsoft


00:17:09.660 --> 00:17:13.340
for Startup Founders Hub and make your ideas a reality today.


00:17:13.340 --> 00:17:18.340
Join the program by visiting pythonbytes.fm/foundershub2022.


00:17:18.340 --> 00:17:20.540
That link is also in your show notes.


00:17:20.540 --> 00:17:23.320
- Yep, thanks Microsoft for keeping us going strong.


00:17:23.320 --> 00:17:25.740
All right, what have I got next?


00:17:25.740 --> 00:17:27.980
This one is a chain of really cool things.


00:17:27.980 --> 00:17:34.160
So Roman Wright of Beanie fame and other things tweeted about this project that


00:17:34.160 --> 00:17:37.360
Pablo Galindo Salgado has been working on.


00:17:37.360 --> 00:17:40.820
So Pablo was the release manager for Python 3.11.


00:17:40.820 --> 00:17:43.460
It was part of the live stream of release and that was all fun.


00:17:43.460 --> 00:17:47.420
But he also, I believe, works at Bloomberg where they work on memory.


00:17:47.420 --> 00:17:50.780
And I think we spoke about memory quite a while back, Brian.


00:17:50.780 --> 00:17:53.380
It's a memory profiling tool.


00:17:53.380 --> 00:17:53.940
Maybe.


00:17:54.100 --> 00:17:56.740
- Marlo, do you use profilers


00:17:56.740 --> 00:17:58.940
and that kind of stuff in your world?


00:17:58.940 --> 00:18:00.180
- Not, I haven't used much.


00:18:00.180 --> 00:18:02.540
Haven't had the need to be honest, not yet.


00:18:02.540 --> 00:18:06.420
I feel like so far, there's no, try to keep it simple.


00:18:06.420 --> 00:18:10.140
- So a lot of times profilers are about performance.


00:18:10.140 --> 00:18:11.520
Like how fast did this code run?


00:18:11.520 --> 00:18:13.660
And if it's slower, should I look at this loop


00:18:13.660 --> 00:18:15.260
or that loop or, you know, where do you spend your time


00:18:15.260 --> 00:18:16.100
making it faster?


00:18:16.100 --> 00:18:18.420
'Cause it's really surprising when you look at code,


00:18:18.420 --> 00:18:19.700
you're like, this part looks complicated.


00:18:19.700 --> 00:18:20.740
So that must be the slow part.


00:18:20.740 --> 00:18:22.220
Like, no, that doesn't matter.


00:18:22.220 --> 00:18:23.620
Nothing you do to that will make any difference.


00:18:23.620 --> 00:18:24.800
You gotta look over here, right?


00:18:24.800 --> 00:18:25.640
That kind of stuff.


00:18:25.640 --> 00:18:27.960
But Memray, as the name would suggest,


00:18:27.960 --> 00:18:30.020
is more about memory profiling


00:18:30.020 --> 00:18:33.240
and like talking about how many of these different things


00:18:33.240 --> 00:18:35.720
have you allocated and those kinds of things.


00:18:35.720 --> 00:18:36.900
What is coming?


00:18:36.900 --> 00:18:39.760
Well, first, let me pull up,


00:18:39.760 --> 00:18:42.240
we have a pytest plugin, which is super cool.


00:18:42.240 --> 00:18:46.920
So with the pytest plugin, you can do two things now.


00:18:46.920 --> 00:18:50.480
You can say pytest --memray-tests,


00:18:50.480 --> 00:18:53.580
and it'll tell you things like,


00:18:53.580 --> 00:18:55.520
you can actually set limits on how much memory


00:18:55.520 --> 00:18:57.720
can be allocated for a certain operation.


00:18:57.720 --> 00:18:59.340
And if it exceeds that, it'll say,


00:18:59.340 --> 00:19:00.960
oh my gosh, there's something wrong.


00:19:00.960 --> 00:19:03.920
This thing is like way over using the memory we expected.


00:19:03.920 --> 00:19:04.780
So that's an error.


00:19:04.780 --> 00:19:09.780
But it also gives you like a cool emoji filled summary,


00:19:09.780 --> 00:19:12.200
I guess, like total memory allocated,


00:19:12.200 --> 00:19:16.040
the number of allocations, a histogram of allocation sizes.


00:19:16.040 --> 00:19:19.720
So like Python memory has like size classes.


00:19:19.720 --> 00:19:22.920
when we've talked about its block arena,


00:19:22.920 --> 00:19:24.840
one other term, I'm forgetting,


00:19:24.840 --> 00:19:27.020
that it uses to organize data structures.


00:19:27.020 --> 00:19:29.880
And then you can actually get it overall


00:19:29.880 --> 00:19:31.040
then for individual tests.


00:19:31.040 --> 00:19:33.300
And so it'll tell you like the different things


00:19:33.300 --> 00:19:37.640
that were allocated and anyway, it's pretty insane.


00:19:37.640 --> 00:19:39.480
Okay, so you can get that report


00:19:39.480 --> 00:19:41.960
and then you can also, where's the other one?


00:19:41.960 --> 00:19:43.440
I think it's, where was it?


00:19:43.440 --> 00:19:45.680
There's a place where you put a decorator


00:19:45.680 --> 00:19:47.600
and you just say on this test,


00:19:47.600 --> 00:19:49.640
if it exceeds this amount of allocation


00:19:49.640 --> 00:19:51.060
that should fail the unit test.


00:19:51.060 --> 00:19:54.800
It's just a pytest.mark.memorylimit or something.


00:19:54.800 --> 00:19:56.300
I don't think it's a limit or memory limit.


00:19:56.300 --> 00:19:58.600
I can't remember exactly what it's called.


00:19:58.600 --> 00:20:03.600
You can say, if this test exceeds one megabyte of memory allocation,


00:20:03.600 --> 00:20:05.880
then that's a failed test, which is pretty cool, right Brian?


00:20:05.880 --> 00:20:07.640
>> That's really great.


00:20:07.640 --> 00:20:12.320
Yeah, they have a limit memory decorator and a check leaks decorator.


00:20:12.320 --> 00:20:15.760
>> That's the one. So the check leaks is the new thing.


00:20:15.760 --> 00:20:17.820
And so what you can do now is you can say


00:20:17.820 --> 00:20:22.040
pytest.mark.checkleaks as a decorator on your test.


00:20:22.040 --> 00:20:23.840
And if there's a memory leak in the code


00:20:23.840 --> 00:20:26.680
that runs during that, it will let you know.


00:20:26.680 --> 00:20:27.860
I don't know if anyone else has tried


00:20:27.860 --> 00:20:29.260
to track down memory leaks.


00:20:29.260 --> 00:20:31.660
I would rather track down like a multi-threaded


00:20:31.660 --> 00:20:33.580
race condition than a memory leak.


00:20:33.580 --> 00:20:35.280
I don't want anything to do with memory leaks.


00:20:35.280 --> 00:20:36.520
This is no fun.


00:20:36.520 --> 00:20:38.900
And so if I can do it with a decorator, let's do it.


00:20:38.900 --> 00:20:40.560
- Well, and also decorating your tests


00:20:40.560 --> 00:20:44.280
so you're not having to modify your code at all to do this.


00:20:44.280 --> 00:20:46.720
I mean, the code under test, you're modifying your test code.


00:20:46.720 --> 00:20:51.420
If at all, it looks like it gives you some benefits even with no modification.


00:20:51.420 --> 00:20:52.220
It's pretty cool.


00:20:52.220 --> 00:20:52.500
>> Yeah.


00:20:52.500 --> 00:20:54.540
>> Maybe, pardon my ignorance here,


00:20:54.540 --> 00:20:57.400
but when would I worry about memory leaks in Python?


00:20:57.400 --> 00:21:02.780
>> I think, so imagine you're writing pandas,


00:21:02.780 --> 00:21:06.780
and you've written a bunch of C code that's getting imported,


00:21:06.780 --> 00:21:09.860
and you know there's a memory leak in there somewhere.


00:21:09.860 --> 00:21:13.860
And it's just like, okay, well, I don't really know how to...


00:21:13.860 --> 00:21:17.860
- But then it's more like the C part is the...


00:21:17.860 --> 00:21:21.860
- You can also have memory leaks in the sense that you expected


00:21:21.860 --> 00:21:25.860
there to be no more things allocated after the function was called,


00:21:25.860 --> 00:21:29.860
but you could have signed it to a global variable or you could have, you know,


00:21:29.860 --> 00:21:33.860
stored it, held onto a reference in some way that you weren't expecting.


00:21:33.860 --> 00:21:37.860
So it's not a leak in the super traditional sense, but it could build up if you're


00:21:37.860 --> 00:21:39.240
you're doing something wrong in Python,


00:21:39.240 --> 00:21:41.040
but certainly outside of that.


00:21:41.040 --> 00:21:42.960
So I think this is pretty cool.


00:21:42.960 --> 00:21:46.440
- Really any long running service is gonna have,


00:21:46.440 --> 00:21:47.760
you're gonna be concerned about it.


00:21:47.760 --> 00:21:50.520
There's a lot of Python applications that are short running


00:21:50.520 --> 00:21:53.600
and it just cleans up after itself when it's done.


00:21:53.600 --> 00:21:55.680
So there's cases, long running services,


00:21:55.680 --> 00:21:58.480
also things like, maybe you care about,


00:21:58.480 --> 00:22:00.720
things that are using large amounts of data


00:22:00.720 --> 00:22:04.800
and need all of the data that they can get ahold of


00:22:04.800 --> 00:22:06.040
without wasting any.


00:22:06.040 --> 00:22:09.160
or that's important as well.


00:22:09.160 --> 00:22:10.000
- Makes sense.


00:22:10.000 --> 00:22:11.120
I'm also wondering-- - Yeah, if you're right


00:22:11.120 --> 00:22:12.200
at the limit, yeah.


00:22:12.200 --> 00:22:13.180
- No, sorry, go ahead, go ahead.


00:22:13.180 --> 00:22:15.160
- Yeah, if you're right at the limit of like,


00:22:15.160 --> 00:22:17.160
I'm using 15 and a half gigs,


00:22:17.160 --> 00:22:19.760
and I don't have more than that, so I need that.


00:22:19.760 --> 00:22:22.280
Or like, I just checked the TalkByThon training site,


00:22:22.280 --> 00:22:24.760
it's been running for seven days and one hour.


00:22:24.760 --> 00:22:26.760
Like, if it had a memory leak, you know,


00:22:26.760 --> 00:22:28.480
even if it's 100 kilobyte here and there,


00:22:28.480 --> 00:22:31.040
like it could turn out to be like a big hassle.


00:22:31.040 --> 00:22:31.960
- Okay, cool.


00:22:31.960 --> 00:22:35.160
I'm wondering if you could use this for edge device stuff,


00:22:35.160 --> 00:22:37.020
if we don't limit the memory,


00:22:37.020 --> 00:22:39.840
'cause we know the edge device won't have that much.


00:22:39.840 --> 00:22:42.280
- That's actually a really good point,


00:22:42.280 --> 00:22:44.240
because if you're on one of these


00:22:44.240 --> 00:22:46.160
CircuitPython little boards,


00:22:46.160 --> 00:22:48.680
they've got like 256K of RAM,


00:22:48.680 --> 00:22:52.160
and that's very different than 16 gigs, isn't it?


00:22:52.160 --> 00:22:53.000
- Yeah, yeah.


00:22:53.000 --> 00:22:54.880
- Right, but yeah, so you could test your application


00:22:54.880 --> 00:22:59.700
on a larger computer and limit how much memory you give it.


00:22:59.700 --> 00:23:01.120
- Right, yeah, I think you would wanna do that


00:23:01.120 --> 00:23:04.120
with the limit rather than the check leaks, but still.


00:23:04.120 --> 00:23:05.920
- Yeah, but it's the same, yeah, yeah, yeah.


00:23:05.920 --> 00:23:07.360
- Cool. - Yeah, awesome.


00:23:07.360 --> 00:23:09.680
All right, let's see, a couple comments from the audience.


00:23:09.680 --> 00:23:11.280
Gareth out there, hey Gareth.


00:23:11.280 --> 00:23:12.800
Says, "I ended up writing Docker containers


00:23:12.800 --> 00:23:14.620
"that swapped out every couple hours to solve it."


00:23:14.620 --> 00:23:16.200
I mean, that's actually what a lot of people do.


00:23:16.200 --> 00:23:17.020
They're like, you know what?


00:23:17.020 --> 00:23:18.700
If it runs more than 12 hours, there's a problem.


00:23:18.700 --> 00:23:21.400
So we just tell it to recycle itself.


00:23:21.400 --> 00:23:23.160
And then Madison says, "This is so cool.


00:23:23.160 --> 00:23:24.660
"I need memory profile line all the time


00:23:24.660 --> 00:23:26.320
"with some of the data I do work with regularly."


00:23:26.320 --> 00:23:27.880
So people are digging it.


00:23:27.880 --> 00:23:29.740
- Cool. - Yeah, very cool.


00:23:29.740 --> 00:23:30.920
So thank you, Roman.


00:23:30.920 --> 00:23:32.880
I know you didn't send that to us on purpose,


00:23:32.880 --> 00:23:33.920
but you shared it with us anyway.


00:23:33.920 --> 00:23:35.920
- Nice. - Over to you, Brian.


00:23:35.920 --> 00:23:39.920
Okay, before I get on to the next topic, I want to point out that Henry Schreiner,


00:23:39.920 --> 00:23:45.920
I'm going to paraphrase him by saying, "Brian, you dork, you didn't even read the article."


00:23:45.920 --> 00:23:47.920
Yes, you're right, Henry, sorry.


00:23:47.920 --> 00:23:53.920
So the new prefixes I was showing, the previous new ones in '91,


00:23:53.920 --> 00:23:57.920
when they added Yocto and Zepto, these are not the new ones.


00:23:57.920 --> 00:24:04.920
The new ones are down here with Rana Quetta, Ronto, and Quekto.


00:24:04.920 --> 00:24:09.920
Yes, the reason why those sounded familiar is because they've been around.


00:24:09.920 --> 00:24:11.920
These new ones, they're the new ones.


00:24:11.920 --> 00:24:14.920
Okay, so thanks Henry for clarifying that.


00:24:14.920 --> 00:24:21.920
But on to the next topic is Will McGugan says, "Please steal my source code."


00:24:21.920 --> 00:24:24.920
So he wrote an article, Will McGugan wrote an article,


00:24:24.920 --> 00:24:27.160
stealing open source code from textual.


00:24:27.160 --> 00:24:31.780
And he says, I would like to talk about a serious issue


00:24:31.780 --> 00:24:35.480
with free and open source software, stealing code.


00:24:35.480 --> 00:24:37.460
You wouldn't steal a car, would you?


00:24:37.460 --> 00:24:39.480
And then actually he has this funny video


00:24:39.480 --> 00:24:43.320
that he embeds about like how like digital piracy


00:24:43.320 --> 00:24:44.560
really is like stealing.


00:24:44.560 --> 00:24:47.140
And it's sort of a funny video.


00:24:47.140 --> 00:24:51.400
But the comment is real that like you need to,


00:24:51.400 --> 00:24:53.960
you can steal code from open source projects


00:24:53.960 --> 00:24:55.200
as long as you can.


00:24:55.200 --> 00:24:58.380
So please read the MIT license


00:24:58.380 --> 00:25:01.420
or read the license to make sure that you can.


00:25:01.420 --> 00:25:03.320
And in a lot of cases you can.


00:25:03.320 --> 00:25:07.800
So like, I'm gonna give an example that I use a lot


00:25:07.800 --> 00:25:10.380
is I'll think of something that I wanna do.


00:25:10.380 --> 00:25:12.360
Like I'm interacting with a library


00:25:12.360 --> 00:25:14.560
and maybe I don't quite get how to do that


00:25:14.560 --> 00:25:15.580
with the documentation.


00:25:15.580 --> 00:25:17.320
I can search GitHub for projects


00:25:17.320 --> 00:25:20.200
that use that library also as an example.


00:25:20.200 --> 00:25:22.920
And so that's a way to look at other source code


00:25:22.920 --> 00:25:27.600
how to interact with a project that maybe doesn't have the greatest documentation.


00:25:27.600 --> 00:25:29.400
You can see how it's done.


00:25:29.400 --> 00:25:31.240
>> I've honestly never thought to do that.


00:25:31.240 --> 00:25:32.400
That's a great idea.


00:25:32.400 --> 00:25:33.520
>> That's good.


00:25:33.520 --> 00:25:34.920
>> I'll go look at the test and stuff.


00:25:34.920 --> 00:25:35.800
I'm like, these tests suck.


00:25:35.800 --> 00:25:39.860
There's not a single one that shows me this use case that I'm looking for.


00:25:39.860 --> 00:25:41.960
This is brilliant.


00:25:41.960 --> 00:25:45.640
>> I do that a lot with pytest plugins because I


00:25:45.640 --> 00:25:48.480
look at how other plugins are testing their stuff.


00:25:48.480 --> 00:25:51.080
I'm like, how do they do it?


00:25:51.640 --> 00:25:55.960
But so the warning there is he's not advocating for piracy.


00:25:55.960 --> 00:25:59.460
Open source code gives you explicit permission to use it.


00:25:59.460 --> 00:26:02.420
If you're actually just copying the whole thing,


00:26:02.420 --> 00:26:05.360
you probably should reference it and use the same license,


00:26:05.360 --> 00:26:07.700
or if you're copying large chunks.


00:26:07.700 --> 00:26:09.460
But the MIT license, for example,


00:26:09.460 --> 00:26:11.940
says it's substantial copying.


00:26:11.940 --> 00:26:14.180
So a little bit of copying is fine.


00:26:14.180 --> 00:26:16.140
Will says, Textual has


00:26:16.140 --> 00:26:18.580
some cool stuff in it that you might want to look at.


00:26:18.580 --> 00:26:21.600
So he's got a loop. He points out some things you might want to steal.


00:26:21.600 --> 00:26:25.640
the loop first and last, so he's got a loop iterator


00:26:25.640 --> 00:26:28.560
that he's got a couple versions of it that will


00:26:28.560 --> 00:26:31.600
not only iterate through things, but it'll


00:26:31.600 --> 00:26:36.640
it'll give you, it'll note which one's the first and the last. So if you need to do something


00:26:36.640 --> 00:26:40.480
cool on something different on the first and the last one, do that.


00:26:40.480 --> 00:26:46.160
He tweeted recently or tooted or whatever about the LRU cache as well.


00:26:46.160 --> 00:26:50.560
So the Python's got a built-in LRU cache, but everything's global, so you can only


00:26:50.560 --> 00:26:53.560
there's limits on how you can interact with it.


00:26:53.560 --> 00:26:56.240
So he has a more flexible LRU cache.


00:26:56.240 --> 00:26:59.500
He's got a color class that looks pretty cool that you can


00:26:59.500 --> 00:27:02.960
convert to different color representations, that's pretty neat.


00:27:02.960 --> 00:27:06.940
Then you know he's been working on a ton of geometry stuff, 2D geometry.


00:27:06.940 --> 00:27:09.000
So he's like, you might want to use this for


00:27:09.000 --> 00:27:11.960
whatever 2D geometry you're using, so here's there.


00:27:11.960 --> 00:27:14.640
So cool reminder that open source,


00:27:14.640 --> 00:27:16.480
one of the benefits of open source is you can


00:27:16.480 --> 00:27:18.960
see the source and learn from people.


00:27:18.960 --> 00:27:21.400
>> I like it. I love your idea.


00:27:21.400 --> 00:27:23.920
>> You've never done that. I'm like,


00:27:23.920 --> 00:27:26.020
in my dance, I just can't figure this out.


00:27:26.020 --> 00:27:28.240
How are other people using it?


00:27:28.240 --> 00:27:30.880
>> I just get frustrated and go into a new library.


00:27:30.880 --> 00:27:32.960
This one sucks. I can't do this. I'm going to find another one.


00:27:32.960 --> 00:27:33.840
>> It's not good enough.


00:27:33.840 --> 00:27:35.760
>> Merlo, are you an open-source thief?


00:27:35.760 --> 00:27:37.000
Do you do this kind of stuff?


00:27:37.000 --> 00:27:39.240
>> I have to admit, yes. Yes, I am.


00:27:39.240 --> 00:27:41.760
Stack Overflow thief, open-source thief,


00:27:41.760 --> 00:27:44.440
especially in the early days.


00:27:44.440 --> 00:27:47.120
But I think with the rich stuff too,


00:27:47.120 --> 00:27:49.400
it's very inviting for you to steal code.


00:27:49.400 --> 00:27:51.640
'Cause even on the rich package, right?


00:27:51.640 --> 00:27:55.040
Like if you do Python-m rich table or whatever,


00:27:55.040 --> 00:27:56.480
you always show some really nice stuff


00:27:56.480 --> 00:27:58.400
on the terminal, right?


00:27:58.400 --> 00:28:00.720
And I was like, how does he do that?


00:28:00.720 --> 00:28:02.600
Or like, I think for every component,


00:28:02.600 --> 00:28:04.480
he had a little demo that you can just run.


00:28:04.480 --> 00:28:06.000
And it's very tempting.


00:28:06.000 --> 00:28:08.360
Even if you didn't want people to steal stuff from him,


00:28:08.360 --> 00:28:09.640
I feel like you have a hard time


00:28:09.640 --> 00:28:11.840
just keeping the thieves away, you know?


00:28:11.840 --> 00:28:12.960
- Yeah, yeah.


00:28:12.960 --> 00:28:13.800
Yeah, very cool.


00:28:13.800 --> 00:28:14.880
And funny too.


00:28:14.880 --> 00:28:15.720
I like it.


00:28:15.720 --> 00:28:16.560
Good job.


00:28:16.560 --> 00:28:18.560
Where are we at now?


00:28:18.560 --> 00:28:21.560
Off to Marlow's final item.


00:28:21.560 --> 00:28:22.560
Yes.


00:28:22.560 --> 00:28:24.560
This one I had not heard of either and it looks pretty interesting.


00:28:24.560 --> 00:28:28.560
Yeah, I mean, it's a, I think it kind of, it's one of the things that I saw, I was like,


00:28:28.560 --> 00:28:29.560
yeah, this makes so much sense.


00:28:29.560 --> 00:28:32.560
Why, how come I never, I didn't think of this before.


00:28:32.560 --> 00:28:33.560
But this is Shed.


00:28:33.560 --> 00:28:35.560
I mean, this is a podcast, right?


00:28:35.560 --> 00:28:42.560
So maybe, Shed is, it basically, I think it's related to like bike shedding, shed your legacy


00:28:42.560 --> 00:28:43.560
code, right?


00:28:43.560 --> 00:28:45.560
So it's like a super set of black, right?


00:28:45.560 --> 00:28:51.800
it black++ here. So they say here, maximally opinionated auto formatting tool, right? So


00:28:51.800 --> 00:28:56.200
it's all about configuration over convention over configuration, which is also something that I


00:28:56.200 --> 00:29:03.000
can subscribe to. They have no configuration options, but basically it's a bundling of a lot


00:29:03.000 --> 00:29:08.120
of tools, right? So they have black here, but they also have isort and with the profile black,


00:29:08.120 --> 00:29:12.520
so it doesn't clash. They also have pyupgrade, which I think you guys mentioned a couple of times,


00:29:12.520 --> 00:29:13.120
>> Yeah, we did.


00:29:13.120 --> 00:29:14.680
>> Out of Flake as well.


00:29:14.680 --> 00:29:16.800
Out of Flake, I didn't know actually before,


00:29:16.800 --> 00:29:19.440
but basically it removes


00:29:19.440 --> 00:29:23.560
unused imports and unused variables from your Python code.


00:29:23.560 --> 00:29:25.280
It's like, "Yeah, that's all I wanted."


00:29:25.280 --> 00:29:28.120
>> I wish I had this last week.


00:29:28.120 --> 00:29:32.160
>> There you go. Yeah. It's a one-stop shop,


00:29:32.160 --> 00:29:34.160
and even do like a blackened docs.


00:29:34.160 --> 00:29:36.280
If you have doc strings or markdown or everything,


00:29:36.280 --> 00:29:38.840
it will take that, it will black format that for you.


00:29:38.840 --> 00:29:40.840
I was like, "Yeah, this is what I wanted."


00:29:40.840 --> 00:29:43.000
>> Okay. Hold on. Black in Docs.


00:29:43.000 --> 00:29:44.800
This is new to me too. All right.


00:29:44.800 --> 00:29:46.000
>> Yeah. Let's see.


00:29:46.000 --> 00:29:48.480
>> So this is black on Python blocks,


00:29:48.480 --> 00:29:50.200
a sample code blocks.


00:29:50.200 --> 00:29:52.440
>> Yes. So if you have a restructured text,


00:29:52.440 --> 00:29:54.320
markdown, even doc strings,


00:29:54.320 --> 00:29:56.440
it will format that for you.


00:29:56.440 --> 00:29:59.320
>> You like blackening your readme, for instance.


00:29:59.320 --> 00:30:00.320
>> Yes.


00:30:00.320 --> 00:30:01.280
>> Yes.


00:30:01.280 --> 00:30:03.080
>> Oh, okay.


00:30:03.080 --> 00:30:04.120
>> This is good.


00:30:04.120 --> 00:30:07.480
>> So I have some stuff to talk about at the very end,


00:30:07.480 --> 00:30:09.560
just a little bit about blogging and writing


00:30:09.560 --> 00:30:12.640
and some platforms and stuff, and it's all in Markdown.


00:30:12.640 --> 00:30:16.560
Like I could run this against all of my code samples on my blog,


00:30:16.560 --> 00:30:19.900
so basically auto-format all code in the blog.


00:30:19.900 --> 00:30:20.800
>> That would be cool.


00:30:20.800 --> 00:30:21.360
>> Yeah.


00:30:21.360 --> 00:30:23.000
>> Yes. Exciting.


00:30:23.000 --> 00:30:25.120
>> The next time I write a book, I'm totally going to use that.


00:30:25.120 --> 00:30:28.000
>> Yeah, or if you're doing a book, yeah, I mean, absolutely.


00:30:28.000 --> 00:30:31.480
>> So I literally just like yesterday,


00:30:31.480 --> 00:30:34.400
the day before, I was cleaning up some code.


00:30:34.400 --> 00:30:37.920
I finally got, I don't do it clean the whole time.


00:30:37.920 --> 00:30:41.920
I get it to work and then I look at what I did stupid.


00:30:41.920 --> 00:30:45.440
There might be some imports laying around that I thought I needed.


00:30:45.440 --> 00:30:48.240
Because you add an import and then you take that code out,


00:30:48.240 --> 00:30:50.480
but you sometimes forget to take the import out.


00:30:50.480 --> 00:30:52.560
I ran black on everything, of course,


00:30:52.560 --> 00:30:55.640
and then I run Flake 8 and I'm getting errors.


00:30:55.640 --> 00:30:58.600
I'm like, "Shoot, why didn't black just take those out?"


00:30:58.600 --> 00:31:00.760
Now I've got shed and I take those out.


00:31:00.760 --> 00:31:03.720
>> It does it all. It's great because maybe it's the same.


00:31:03.720 --> 00:31:05.160
You have Flake 8 is like, "Oh, yeah,


00:31:05.160 --> 00:31:08.880
unused variable, okay, they have to go there one by one, you know, it's like, it feels


00:31:08.880 --> 00:31:10.560
like there should be a nicer way, right?


00:31:10.560 --> 00:31:12.240
Yeah, I mean, it's good.


00:31:12.240 --> 00:31:17.200
You have to pay attention to that because your unused variable might be a typo or something.


00:31:17.200 --> 00:31:19.040
You might think you're using it.


00:31:19.040 --> 00:31:20.400
But that's true.


00:31:20.400 --> 00:31:24.880
Yeah, or it's like a global variable module supposed to share with something else.


00:31:24.880 --> 00:31:25.880
And it's a library.


00:31:25.880 --> 00:31:29.280
But in general, I mean, you could probably put like a hash, no QA or something on it.


00:31:29.280 --> 00:31:30.280
Well, I mean, yeah.


00:31:30.280 --> 00:31:32.320
And also your, your, your testing.


00:31:32.320 --> 00:31:34.480
So your tests will catch it if you delete too much.


00:31:34.480 --> 00:31:35.480
So yeah.


00:31:35.480 --> 00:31:39.000
- All right, well, really, really good one.


00:31:39.000 --> 00:31:43.040
Take your code out to the shed and whip it into shape behind the shed.


00:31:43.040 --> 00:31:44.040
- That's it.


00:31:44.040 --> 00:31:45.040
All right.


00:31:45.040 --> 00:31:46.520
- All right, well, Brian, what else we got?


00:31:46.520 --> 00:31:47.520
Extras?


00:31:47.520 --> 00:31:48.520
- I got some extras.


00:31:48.520 --> 00:31:49.520
You got some extras.


00:31:49.520 --> 00:31:50.720
Who should go first?


00:31:50.720 --> 00:31:51.720
- You go first.


00:31:51.720 --> 00:31:52.720
- Okay.


00:31:52.720 --> 00:31:56.640
Well, the thing that I've been working on is by test check.


00:31:56.640 --> 00:32:02.040
And I finally got, and I've been talking about this for like a month, because I've been slowly


00:32:02.040 --> 00:32:03.040
pulling this into shape.


00:32:03.040 --> 00:32:05.840
almost a complete, not really a rewrite,


00:32:05.840 --> 00:32:07.100
but I moved everything around


00:32:07.100 --> 00:32:08.700
and the code's a lot easier to read


00:32:08.700 --> 00:32:09.940
and so it makes me happy.


00:32:09.940 --> 00:32:11.820
And I also changed the API.


00:32:11.820 --> 00:32:14.020
So I wanted to mention to everybody


00:32:14.020 --> 00:32:16.400
that you can either use,


00:32:16.400 --> 00:32:19.140
so you can either use from pytest check,


00:32:19.140 --> 00:32:22.060
import check to get this check object,


00:32:22.060 --> 00:32:24.940
or you can stick the check object as a fixture.


00:32:24.940 --> 00:32:27.540
And either way, you get access to everything in the library.


00:32:27.540 --> 00:32:28.660
That's the only thing you have to do.


00:32:28.660 --> 00:32:29.980
And for people unfamiliar,


00:32:29.980 --> 00:32:34.980
I took check is a library that allows you to have multiple failures per test.


00:32:34.980 --> 00:32:39.280
You know, normally the recommendation is try to fail on one thing,


00:32:39.280 --> 00:32:40.940
but sometimes you need lots of data.


00:32:40.940 --> 00:32:43.580
And I just threw in a little example that uses both.


00:32:43.580 --> 00:32:48.080
So if like it's using HTTPS to grab the status code,


00:32:48.080 --> 00:32:50.080
and as long as the status goes 200,


00:32:50.080 --> 00:32:52.080
then I can check a whole bunch of stuff.


00:32:52.080 --> 00:32:55.120
I can check to make sure the redirect and encoding is right


00:32:55.120 --> 00:32:58.280
and check for some stuff inside the...


00:32:58.280 --> 00:33:03.960
I mean, these could be multiple tests, but if it really is, you're checking multiple parts of things.


00:33:03.960 --> 00:33:10.240
And for scientific work that I'm in, measurement work that I do, I'm often checking like tons of aspects of a waveform.


00:33:10.240 --> 00:33:15.280
And it's really just making sure the waveforms right and that rightness is multiple checks.


00:33:15.280 --> 00:33:16.400
So use that.


00:33:16.400 --> 00:33:21.400
Anyway, I didn't intend to break anybody, but I did break Brian's skin.


00:33:21.400 --> 00:33:27.120
So Brian came up at the beginning of the article, but he tagged me in a GitHub issue on his project.


00:33:27.120 --> 00:33:28.660
and I looked at it and I'm like,


00:33:28.660 --> 00:33:30.540
"Oh, I didn't intend to break that."


00:33:30.540 --> 00:33:31.680
So I fixed it this morning.


00:33:31.680 --> 00:33:35.820
So hopefully, if anybody gets broken by this,


00:33:35.820 --> 00:33:37.860
I was not intending to break anybody,


00:33:37.860 --> 00:33:39.420
just let me know and I'll try to fix it.


00:33:39.420 --> 00:33:40.320
>> That looks great.


00:33:40.320 --> 00:33:41.380
>> How about you?


00:33:41.380 --> 00:33:42.980
>> Merlo, I know you have some as well.


00:33:42.980 --> 00:33:44.260
It goes well, sorry.


00:33:44.260 --> 00:33:46.140
I don't know too much.


00:33:46.140 --> 00:33:49.820
>> Maybe. Yeah, I feel like I should have opened that.


00:33:49.820 --> 00:33:51.180
I didn't have the link up here.


00:33:51.180 --> 00:33:53.940
But I'm talking about breaking stuff.


00:33:53.940 --> 00:33:57.020
Flakate is not on GitLab anymore.


00:33:57.020 --> 00:33:59.740
And I actually didn't have issues with that


00:33:59.740 --> 00:34:00.820
'cause with pre-commit, right?


00:34:00.820 --> 00:34:02.060
You have to specify the repo.


00:34:02.060 --> 00:34:04.700
I already was on GitHub, but I actually heard from people,


00:34:04.700 --> 00:34:06.660
some people that they heard a lot of noise


00:34:06.660 --> 00:34:08.700
that Flake 8 is not on GitLab anymore.


00:34:08.700 --> 00:34:10.420
And then there was also this video from Anthony


00:34:10.420 --> 00:34:11.660
that is maintaining, right?


00:34:11.660 --> 00:34:13.020
Pre-commit and Flake 8.


00:34:13.020 --> 00:34:15.160
He was explaining a bit 'cause why,


00:34:15.160 --> 00:34:17.420
what was the motivation from going from GitLab to GitHub?


00:34:17.420 --> 00:34:21.140
And yeah, like what's relatable is that like,


00:34:21.140 --> 00:34:22.460
sometimes you break people's code,


00:34:22.460 --> 00:34:24.220
but it's like, it's not intention, right?


00:34:24.220 --> 00:34:26.700
But sometimes people can get very heated over these things.


00:34:26.700 --> 00:34:29.460
So yeah, just maybe public service announcement,


00:34:29.460 --> 00:34:32.180
change your Git repo to GitHub now


00:34:32.180 --> 00:34:34.300
for using Flakegate as a pre-commit.


00:34:34.300 --> 00:34:36.820
- You also had mastodon.py, right?


00:34:36.820 --> 00:34:38.820
- Yes, yes, yes, I did.


00:34:38.820 --> 00:34:40.140
I just, sorry, I flipped the order


00:34:40.140 --> 00:34:43.100
'cause I thought it was a segue there.


00:34:43.100 --> 00:34:46.540
- Yeah, yeah, yeah, I wish I knew about this


00:34:46.540 --> 00:34:47.780
like a week ago or so.


00:34:47.780 --> 00:34:48.620
That would have been awesome.


00:34:48.620 --> 00:34:51.060
- You covered a toot, I think, right?


00:34:51.060 --> 00:34:52.380
- Yes, we covered toot, that's right.


00:34:52.380 --> 00:34:56.060
- Yeah, yeah, so this is, to be very honest,


00:34:56.060 --> 00:34:58.140
I wasn't the one that found this, it was my boss.


00:34:58.140 --> 00:35:00.700
So shout out to Bart, if you're listening right now.


00:35:00.700 --> 00:35:02.420
But this is basically just a wrapper


00:35:02.420 --> 00:35:04.140
around the Mastodon API, right?


00:35:04.140 --> 00:35:05.100
So you don't have to do requests.


00:35:05.100 --> 00:35:07.060
You can usually have like a nice client library there


00:35:07.060 --> 00:35:07.900
to do all these things.


00:35:07.900 --> 00:35:09.940
So if you wanna play around, create some bots,


00:35:09.940 --> 00:35:12.280
you know, whatever, then yeah,


00:35:12.280 --> 00:35:15.380
there's a nice convenient package now for you to do it.


00:35:15.380 --> 00:35:16.220
- Wow, this is really cool.


00:35:16.220 --> 00:35:17.060
And it has, you know what?


00:35:17.060 --> 00:35:19.140
Documentations that say what functions it has.


00:35:19.140 --> 00:35:19.980
I love it.


00:35:19.980 --> 00:35:20.820
(laughing)


00:35:20.820 --> 00:35:21.900
- Documentation?


00:35:21.900 --> 00:35:22.740
(laughing)


00:35:22.740 --> 00:35:23.580
It's a dream come true.


00:35:23.580 --> 00:35:24.400
- It doesn't have to be much,


00:35:24.400 --> 00:35:26.900
like the seven or eight lines of code that are in the readme,


00:35:26.900 --> 00:35:28.320
like gives you a really good boost,


00:35:28.320 --> 00:35:30.280
but it lets you register your app,


00:35:30.280 --> 00:35:32.440
which is one of the things if you go to the website,


00:35:32.440 --> 00:35:34.060
it'll show you which apps are registered


00:35:34.060 --> 00:35:36.360
for your access keys on Mastodon,


00:35:36.360 --> 00:35:39.060
but it won't let you create one on the website.


00:35:39.060 --> 00:35:40.720
So it's like a simple create app,


00:35:40.720 --> 00:35:42.660
and you just give it a instance name


00:35:42.660 --> 00:35:45.480
and what file to save the access tokens over to,


00:35:45.480 --> 00:35:46.680
and boom, you're good to go.


00:35:46.680 --> 00:35:49.520
- Yeah, have you guys already done stuff with Mastodon?


00:35:49.520 --> 00:35:51.920
- Yeah, you know, on the stream deck,


00:35:51.920 --> 00:35:53.280
the thing that controls the stream,


00:35:53.280 --> 00:35:55.740
I already wrote that thing where I push the one button,


00:35:55.740 --> 00:35:58.240
it sends out the message automatically


00:35:58.240 --> 00:35:59.920
that this live stream is starting.


00:35:59.920 --> 00:36:02.480
And yeah, that uses a little bit of toot


00:36:02.480 --> 00:36:05.620
and mostly just the straight API with HTTPX.


00:36:05.620 --> 00:36:08.400
But if I'd known about this, I would've used it.


00:36:08.400 --> 00:36:09.240
- Now we know.


00:36:09.240 --> 00:36:10.240
- Yeah, no, thanks for sharing that.


00:36:10.240 --> 00:36:12.200
Anything else you wanna share before we move on?


00:36:12.200 --> 00:36:14.960
- Yes, so there are a couple more things.


00:36:14.960 --> 00:36:18.800
But this one, this is the Brazilian EME that couldn't resist.


00:36:18.800 --> 00:36:19.840
The World Cup started.


00:36:19.840 --> 00:36:22.520
I don't know, are you guys soccer fans or not at all?


00:36:22.520 --> 00:36:24.800
So we've a fun soccer team here.


00:36:24.800 --> 00:36:27.640
We go see-- I go see with the kids and stuff in town.


00:36:27.640 --> 00:36:31.880
Yeah, so I'm also in machine learning, so a lot of data.


00:36:31.880 --> 00:36:33.960
And this time of the year, there's a lot of like,


00:36:33.960 --> 00:36:36.360
oh, yeah, the AI models are predicting this, this, and--


00:36:36.360 --> 00:36:37.480
This one is one from Oxford.


00:36:37.480 --> 00:36:39.600
So I just wanted to give a quick shout out here.


00:36:39.600 --> 00:36:42.160
So they have a video on YouTube as well, which is cool.


00:36:42.160 --> 00:36:43.200
They explain the math.


00:36:43.200 --> 00:36:44.880
And I will go on a limb here and say


00:36:44.880 --> 00:36:46.760
they use Python because they even mention Matplotlib


00:36:46.760 --> 00:36:47.680
and whatnot.


00:36:47.680 --> 00:36:49.480
But this is basically just a big excuse


00:36:49.480 --> 00:36:51.100
to say that they predict Brazil to win.


00:36:51.100 --> 00:36:55.060
So if this doesn't happen, it's all rigged.


00:36:55.060 --> 00:36:56.500
The math supports this.


00:36:56.500 --> 00:36:58.620
So Brazil must win this World Cup.


00:36:58.620 --> 00:37:01.220
And anything that is not there, I'm going to be extremely disappointed.


00:37:01.220 --> 00:37:04.660
This is really cool.


00:37:04.660 --> 00:37:09.740
People are always looking for realistic examples to learn and explore libraries and tools.


00:37:09.740 --> 00:37:12.820
And if you're into soccer and you care about the World Cup, this is great.


00:37:12.820 --> 00:37:14.140
Yeah, I think if you...


00:37:14.140 --> 00:37:16.580
Yeah, there's people, people are very creative.


00:37:16.580 --> 00:37:18.460
I feel like there's a lot of uses for it.


00:37:18.460 --> 00:37:21.740
Well, I'm sure this will happen because there's absolutely no corruption in soccer.


00:37:21.740 --> 00:37:22.940
So yeah, yeah, for sure.


00:37:22.940 --> 00:37:25.620
Yeah, not at all.


00:37:25.620 --> 00:37:26.140
Not at all.


00:37:26.140 --> 00:37:27.980
Cool.


00:37:27.980 --> 00:37:30.860
Should I just keep going or you want to take over?


00:37:30.860 --> 00:37:32.220
If you got more items?


00:37:32.220 --> 00:37:32.940
Yeah, keep going.


00:37:32.940 --> 00:37:33.460
I have.


00:37:33.460 --> 00:37:35.540
I have two more.


00:37:35.540 --> 00:37:36.220
Sorry.


00:37:36.220 --> 00:37:37.780
I know you said I could have more than two.


00:37:37.780 --> 00:37:40.980
So that's what this whole section is about.


00:37:40.980 --> 00:37:42.340
One.


00:37:42.340 --> 00:37:46.460
So for me as a data scientist or machine learning engineer, we use a lot of notebooks, right?


00:37:46.460 --> 00:37:50.100
And I think they have their place in data science, but there are some tools that don't


00:37:50.100 --> 00:37:51.620
play very nicely with it.


00:37:51.620 --> 00:37:56.020
And I think in Git diffs or PRs, they don't play so nicely.


00:37:56.020 --> 00:38:00.540
So this is, I think it's public preview, I want to say, but I haven't actually seen this,


00:38:00.540 --> 00:38:03.780
but now GitHub is going to start supporting notebook diffs.


00:38:03.780 --> 00:38:07.340
So if you have a pull request, they're going to have a nicer rendering of the notebook


00:38:07.340 --> 00:38:09.260
here and you can actually see what the differences are.


00:38:09.260 --> 00:38:14.940
And I think before there was a tool called ReviewNB that you could add to GitHub, but


00:38:14.940 --> 00:38:17.340
But yeah, now they're just going to start supporting it.


00:38:17.340 --> 00:38:20.380
So I haven't seen how it looks, but I'm pretty excited about this too.


00:38:20.380 --> 00:38:21.380
One less headache for me.


00:38:21.380 --> 00:38:22.380
Yeah, that's excellent.


00:38:22.380 --> 00:38:25.060
Because before the diff would just be like, here's the diff of the JSON file.


00:38:25.060 --> 00:38:27.460
You're like, no, that's not what it was.


00:38:27.460 --> 00:38:29.620
And also JSON is just JSON, just key value.


00:38:29.620 --> 00:38:33.620
So if you just change the order of some keys, it's just like, yeah, you have a lot of changes,


00:38:33.620 --> 00:38:34.620
but you don't care.


00:38:34.620 --> 00:38:35.620
Yeah.


00:38:35.620 --> 00:38:36.620
Oh, this looks really useful.


00:38:36.620 --> 00:38:37.620
Yeah.


00:38:37.620 --> 00:38:39.820
And maybe one last, if that's okay.


00:38:39.820 --> 00:38:40.820
Yeah.


00:38:40.820 --> 00:38:41.820
Just pull this here.


00:38:41.820 --> 00:38:42.820
This is Lancer.


00:38:42.820 --> 00:38:43.820
So it's another CLI tool.


00:38:43.820 --> 00:38:45.360
about linting before, right?


00:38:45.360 --> 00:38:47.600
So this is another kind of linting.


00:38:47.600 --> 00:38:49.940
And I say kind of, 'cause so,


00:38:49.940 --> 00:38:52.140
you know black-- - Some definition


00:38:52.140 --> 00:38:56.180
of linting or clean up, yeah.


00:38:56.180 --> 00:38:58.400
- So this is like black, almost like black,


00:38:58.400 --> 00:38:59.380
but it's the opposite.


00:38:59.380 --> 00:39:01.020
So instead of making your code look nice,


00:39:01.020 --> 00:39:03.140
it would just make it like a hideous,


00:39:03.140 --> 00:39:04.500
but working mess, right?


00:39:04.500 --> 00:39:06.480
So these are some of the features.


00:39:06.480 --> 00:39:08.620
It turns all your comments to pitbull lyrics


00:39:08.620 --> 00:39:11.540
or something safe for work, depending if you want.


00:39:11.540 --> 00:39:12.940
It takes all your variable names


00:39:12.940 --> 00:39:15.380
and mix into like animal sounds


00:39:15.380 --> 00:39:17.620
and horribly similar looking characters.


00:39:17.620 --> 00:39:22.420
So like bark underscore bark underscore 0 0 0 0.


00:39:22.420 --> 00:39:24.080
It adds white spaces.


00:39:24.080 --> 00:39:26.780
It adds completely irrelevant comments


00:39:26.780 --> 00:39:29.900
and the code still runs after these improvements.


00:39:29.900 --> 00:39:30.740
So here's an example.


00:39:30.740 --> 00:39:31.580
- I love it.


00:39:31.580 --> 00:39:33.020
- Yeah.


00:39:33.020 --> 00:39:34.860
You have here some comments and everything.


00:39:34.860 --> 00:39:36.860
So before like nicely formatted


00:39:36.860 --> 00:39:38.460
and then afterwards you see some comments


00:39:38.460 --> 00:39:40.980
like a bada bing bada boom, you know.


00:39:40.980 --> 00:39:42.680
There's nothing like Miami heat.


00:39:42.680 --> 00:39:44.880
some alpha characters in your variable names.


00:39:44.880 --> 00:39:47.600
So pretty good stuff.


00:39:47.600 --> 00:39:49.140
Again, I must say I haven't used this,


00:39:49.140 --> 00:39:52.080
but this is a tool that I'm not as excited to use.


00:39:52.080 --> 00:39:55.840
- I mean, there's always times that you need


00:39:55.840 --> 00:39:58.000
to send out your code to different places


00:39:58.000 --> 00:40:01.080
and you would rather share it less than more.


00:40:01.080 --> 00:40:04.740
Thinking of like if you make a desktop app


00:40:04.740 --> 00:40:07.080
and you got to send out the code for that or whatever,


00:40:07.080 --> 00:40:08.840
and you would want to obfuscate it.


00:40:08.840 --> 00:40:10.200
You want to make it harder for people


00:40:10.200 --> 00:40:12.200
to just pick it up and like do stuff.


00:40:12.200 --> 00:40:14.240
you could hit it with this, they'd be like, yeah, no,


00:40:14.240 --> 00:40:15.840
no, we're just not doing that.


00:40:15.840 --> 00:40:18.420
- So my favorite one's on the screen


00:40:18.420 --> 00:40:20.860
is the adding obvious comments,


00:40:20.860 --> 00:40:22.800
like setting the value of some.


00:40:22.800 --> 00:40:29.940
That wasn't in the original and it's just funny to,


00:40:29.940 --> 00:40:33.060
I mean, that's actually not gibberish, it's just useless.


00:40:33.060 --> 00:40:38.480
- It's really good.


00:40:38.480 --> 00:40:41.900
The comments out in the live stream are really great


00:40:41.900 --> 00:40:43.520
as well, people are enjoying it.


00:40:43.520 --> 00:40:45.240
One of them is it's great for Twitter employees.


00:40:45.240 --> 00:40:47.300
You can maximize your lines of code


00:40:47.300 --> 00:40:48.840
for review as it's coming up.


00:40:48.840 --> 00:40:50.520
Then you just print it out and you take it,


00:40:50.520 --> 00:40:53.400
and sidebar, like if somebody says print out my code


00:40:53.400 --> 00:40:56.920
so we can review it, they're not equipped


00:40:56.920 --> 00:40:58.440
to review the code that you may have written.


00:40:58.440 --> 00:41:00.920
Like if the word print involves in evaluating code,


00:41:00.920 --> 00:41:02.960
like no, all right, I don't think so.


00:41:02.960 --> 00:41:05.480
So leave that where that is.


00:41:05.480 --> 00:41:07.280
But you could put this on top of like,


00:41:07.280 --> 00:41:09.200
yeah, I'm kind of funky when I write codes.


00:41:09.200 --> 00:41:10.080
It's a little different.


00:41:10.080 --> 00:41:13.640
Let's get used to, let's, yeah, I just, it's a farm.


00:41:13.640 --> 00:41:14.800
It's a code farm.


00:41:14.800 --> 00:41:16.040
Oink, oink, oink.


00:41:16.040 --> 00:41:19.320
- Yeah, you can have two sets of books, kinda.


00:41:19.320 --> 00:41:22.300
You got your real repo and then you use this


00:41:22.300 --> 00:41:26.000
to put it into the actual one that you submit.


00:41:26.000 --> 00:41:27.680
And you're like, I understand it.


00:41:27.680 --> 00:41:29.440
I don't know what your problem is.


00:41:29.440 --> 00:41:30.880
- It works on my machine.


00:41:30.880 --> 00:41:35.680
- I kinda wanna run this on a large code base.


00:41:35.680 --> 00:41:38.960
Like something really complicated.


00:41:38.960 --> 00:41:41.840
Squash all the commits, force push.


00:41:41.840 --> 00:41:44.040
- Like textual, fine.


00:41:44.040 --> 00:41:46.600
Release it as textual oink oink or something.


00:41:46.600 --> 00:41:50.000
- Yes, I love it.


00:41:50.000 --> 00:41:50.820
- Cool.


00:41:50.820 --> 00:41:52.520
- All right, well this was a good find.


00:41:52.520 --> 00:41:53.360
Awesome, thanks.


00:41:53.360 --> 00:41:54.800
All right, I'll make mine quick here.


00:41:54.800 --> 00:41:56.280
So a new YouTube video,


00:41:56.280 --> 00:41:59.820
I talked about how you can install the Mastodon web app


00:41:59.820 --> 00:42:03.480
on your iPad as a native app, as well as on your desktop.


00:42:03.480 --> 00:42:07.680
So if you're doing that kind of stuff, not there.


00:42:07.680 --> 00:42:11.480
Basically, they just released Mastodon 4 a couple days ago,


00:42:11.480 --> 00:42:14.320
and all the apps don't have features like edit


00:42:14.320 --> 00:42:16.440
and some of the other features that are there


00:42:16.440 --> 00:42:18.160
because they're like months behind.


00:42:18.160 --> 00:42:20.360
And so if you install the web app as an app,


00:42:20.360 --> 00:42:21.200
then guess what?


00:42:21.200 --> 00:42:22.440
It looks like an app, it acts like an app,


00:42:22.440 --> 00:42:24.720
but it has like zero latency.


00:42:24.720 --> 00:42:26.920
So as soon as something is released on the website,


00:42:26.920 --> 00:42:27.880
you get it, which is pretty cool.


00:42:27.880 --> 00:42:29.360
So people can check that out.


00:42:29.360 --> 00:42:31.680
I saw Madison in the audience,


00:42:31.680 --> 00:42:35.160
she sent over a call for proposals,


00:42:35.160 --> 00:42:38.520
calling all Pythonistas, if you will, for PyCascades.


00:42:38.520 --> 00:42:41.960
So PyCascades is back in person this year in Vancouver, BC.


00:42:41.960 --> 00:42:46.040
It goes from Vancouver to Seattle to Portland and cycles through that there.


00:42:46.040 --> 00:42:49.960
But so this year, it's going to be in Vancouver.


00:42:49.960 --> 00:42:53.880
So if you want to go up there and talk, be part of the conference, good conference.


00:42:53.880 --> 00:42:55.880
So call for proposals are open there.


00:42:55.880 --> 00:42:57.880
Yeah, but they're not open for very much longer.


00:42:57.880 --> 00:42:59.400
So jump on that.


00:42:59.400 --> 00:43:00.920
I don't remember what the date is, but...


00:43:00.920 --> 00:43:04.040
It closes Wednesday 30th.


00:43:04.040 --> 00:43:04.880
So what is that?


00:43:04.880 --> 00:43:06.000
- Yeah, eight days. - Well, Wednesday,


00:43:06.000 --> 00:43:06.840
yeah, next Wednesday.


00:43:06.840 --> 00:43:08.280
Yeah, eight days.


00:43:08.280 --> 00:43:10.640
And Madison, and if you're in the audience, thank you.


00:43:10.640 --> 00:43:12.680
Is put it in person this time,


00:43:12.680 --> 00:43:14.320
and we really value the first time speakers


00:43:14.320 --> 00:43:15.640
in atypical talks.


00:43:15.640 --> 00:43:17.560
So get out there and put yourself out there


00:43:17.560 --> 00:43:19.080
and get into public speaking.


00:43:19.080 --> 00:43:21.480
It's not a huge conference, but it's big enough,


00:43:21.480 --> 00:43:24.240
couple hundred people, three, 400 people, fun time.


00:43:24.240 --> 00:43:27.160
This is just really quick and fun.


00:43:27.160 --> 00:43:28.760
You know, if you're on a Mac,


00:43:28.760 --> 00:43:31.760
you're not as likely to get viruses sent your way


00:43:31.760 --> 00:43:33.000
that would actually be able to do something


00:43:33.000 --> 00:43:35.760
like 90% of viruses are written for Windows.


00:43:35.760 --> 00:43:37.120
But what's a really interesting fact,


00:43:37.120 --> 00:43:39.160
I just, if you do have a Mac,


00:43:39.160 --> 00:43:41.880
it turns out 50% of all macOS malware


00:43:41.880 --> 00:43:43.560
comes from one single app.


00:43:43.560 --> 00:43:44.400
Can you believe that?


00:43:44.400 --> 00:43:46.360
- What is it, Safari?


00:43:46.360 --> 00:43:49.400
- No, it's MacKeeper.


00:43:49.400 --> 00:43:51.440
So if you have MacKeeper,


00:43:51.440 --> 00:43:53.440
it like organizes your files,


00:43:53.440 --> 00:43:56.720
and it'll like clean up your junky cache and stuff.


00:43:56.720 --> 00:43:59.560
But apparently it has to take over so much permissions,


00:43:59.560 --> 00:44:01.760
and it is like, it can get, I guess,


00:44:01.760 --> 00:44:05.740
plug in or I don't know what it does, but people can like plug into this and make it


00:44:05.740 --> 00:44:07.240
to all sorts of horrible stuff.


00:44:07.240 --> 00:44:10.680
So 50% of all malware is written for Mackeeper.


00:44:10.680 --> 00:44:17.480
So if you have Mackeeper, maybe unhave it.


00:44:17.480 --> 00:44:23.360
I recently as a Sunday launched a new website that I hope will bring me back to writing


00:44:23.360 --> 00:44:24.360
some more.


00:44:24.360 --> 00:44:25.560
We'll see about how that goes.


00:44:25.560 --> 00:44:30.000
But here I'm, I'm trying a new philosophy on, on blogging, Brian, I don't know how you


00:44:30.000 --> 00:44:33.400
feel about it, but I have a blog, been doing it for a long time, but like I looked, the


00:44:33.400 --> 00:44:37.760
last article I wrote was like 2020. I'm like, oh, that's not so good. And the reason is


00:44:37.760 --> 00:44:42.840
I would always try to write like 2000 word posts that are really, and I'm like, but I


00:44:42.840 --> 00:44:46.640
could post to Twitter and mass it on all day. And it's like, I can just do that. That's


00:44:46.640 --> 00:44:51.000
no problem. I don't like fall behind on Twitter. I'm like, well, that's because these really


00:44:51.000 --> 00:44:56.000
should be super short posts. So I have, I've got this new website that I wrote that are


00:44:56.000 --> 00:45:00.700
just super short, you know, fits on a page type of articles that people can go and check


00:45:00.700 --> 00:45:01.700
out.


00:45:01.700 --> 00:45:06.680
So yeah, some of the people, some people are promoting like today I learned things, but


00:45:06.680 --> 00:45:07.680
short and why not?


00:45:07.680 --> 00:45:12.600
I mean, if you think it, if you think it's going to be a thread, write a blog post.


00:45:12.600 --> 00:45:13.600
Exactly.


00:45:13.600 --> 00:45:14.600
Yeah.


00:45:14.600 --> 00:45:15.600
Yeah.


00:45:15.600 --> 00:45:16.600
Cool.


00:45:16.600 --> 00:45:19.960
So all of these are written and this is all based on Hugo, which is a just learned about


00:45:19.960 --> 00:45:22.320
it, but a ridiculously cool static site generator.


00:45:22.320 --> 00:45:23.680
Either of you played with Hugo?


00:45:23.680 --> 00:45:24.680
I use it.


00:45:24.680 --> 00:45:25.680
I love it.


00:45:25.680 --> 00:45:28.000
So python test.com is written on Hugo.


00:45:28.000 --> 00:45:29.440
It's ridiculous, right?


00:45:29.440 --> 00:45:30.440
No, Merlo.


00:45:30.440 --> 00:45:30.840
You haven't.


00:45:30.840 --> 00:45:31.560
Sorry.


00:45:31.560 --> 00:45:33.160
Yeah, no, I haven't used it, but I heard of it.


00:45:33.160 --> 00:45:33.320
Yeah.


00:45:33.320 --> 00:45:33.440
Yeah.


00:45:33.440 --> 00:45:34.040
I heard nice things.


00:45:34.040 --> 00:45:34.640
Yeah.


00:45:34.640 --> 00:45:38.200
So you basically just go to your directory of markdown files and images.


00:45:38.200 --> 00:45:40.600
Hugo dash D server or whatever.


00:45:40.600 --> 00:45:44.480
And then as you write, you have your, your web page open in your browser and


00:45:44.480 --> 00:45:49.080
automatically sees the markdown file changes or the CSS changes, regenerates


00:45:49.080 --> 00:45:50.520
it and refreshes your browser.


00:45:50.520 --> 00:45:54.600
Just so your browser could be just over there and it's just periodically as you


00:45:54.600 --> 00:45:56.520
make changes, it instantly refreshes.


00:45:56.520 --> 00:45:58.000
So you don't even go and refresh the page.


00:45:58.000 --> 00:46:02.200
You see how that you just write and the browser just watches and, and reloads.


00:46:02.200 --> 00:46:02.600
It's cool.


00:46:02.600 --> 00:46:02.960
Yeah.


00:46:02.960 --> 00:46:06.520
And I, so you got it so that you just, you just push it, push your changes to


00:46:06.520 --> 00:46:10.840
github or your repo for, and it just appears on your website.


00:46:10.840 --> 00:46:11.720
Exactly.


00:46:11.720 --> 00:46:13.020
Yeah, exactly.


00:46:13.020 --> 00:46:16.640
So that was my, my next thing is then I set up a Netlify free account


00:46:16.640 --> 00:46:19.160
with CDN SSL, custom domain name.


00:46:19.160 --> 00:46:19.540
Push.


00:46:19.540 --> 00:46:21.840
It just has a prod branch that I connected it to.


00:46:21.840 --> 00:46:24.400
And when I pushed a prod, boom, it just goes there instantly.


00:46:24.400 --> 00:46:26.740
So anyway, people are looking at that, that is super cool.


00:46:26.740 --> 00:46:29.000
- Push to prod, oh that's kind of cool.


00:46:29.000 --> 00:46:30.920
I just edit on prod, so.


00:46:30.920 --> 00:46:31.920
(laughing)


00:46:31.920 --> 00:46:34.420
- I just log in, I edit over SSH.


00:46:34.420 --> 00:46:35.260
- Yeah.


00:46:35.260 --> 00:46:37.540
- Just edit on the server, the server is the backup.


00:46:37.540 --> 00:46:38.840
Anyway, I have stuff on the screen,


00:46:38.840 --> 00:46:39.680
but there are no more backups,


00:46:39.680 --> 00:46:41.100
that's just stuff I pulled up while we were talking.


00:46:41.100 --> 00:46:42.860
So no more extras I mean.


00:46:42.860 --> 00:46:44.960
So yeah, fun stuff.


00:46:44.960 --> 00:46:48.280
People check out the blog website and the video


00:46:48.280 --> 00:46:51.360
and apply for speaking at PyCascades.


00:46:51.360 --> 00:46:52.200
- Nice.


00:46:52.200 --> 00:46:55.400
I feel like Lancer also was like already really funny,


00:46:55.400 --> 00:46:57.680
but do you have anything else funny for us or?


00:46:57.680 --> 00:46:59.520
- I do, although I somehow forgot


00:46:59.520 --> 00:47:00.440
to pull them up on the screen.


00:47:00.440 --> 00:47:01.880
So give me just a second here.


00:47:01.880 --> 00:47:04.000
There's two, these are really good, okay?


00:47:04.000 --> 00:47:06.820
These are pretty epic.


00:47:06.820 --> 00:47:10.620
So this one is called, I think Merlo,


00:47:10.620 --> 00:47:11.600
you'll really like this one


00:47:11.600 --> 00:47:14.320
'cause it has to do with like algorithms and data science.


00:47:14.320 --> 00:47:16.400
And it's called Messing with the Algorithm.


00:47:16.400 --> 00:47:18.840
And it shows this dude here,


00:47:18.840 --> 00:47:19.800
don't mind the thing at the bottom.


00:47:19.800 --> 00:47:21.060
I have no idea what that's about.


00:47:21.060 --> 00:47:23.580
But see there's this guy whose face is blurred out


00:47:23.580 --> 00:47:26.380
in the UK, I think, I can't remember where this was.


00:47:26.380 --> 00:47:27.220
No, Berlin.


00:47:27.220 --> 00:47:30.400
And he's got a wagon, like a little red wagon


00:47:30.400 --> 00:47:34.060
that you pull behind you, full of 99 phones.


00:47:34.060 --> 00:47:37.420
Now what he did is he got them all running Google Maps


00:47:37.420 --> 00:47:40.060
and left them open and started walking down the street


00:47:40.060 --> 00:47:43.900
real slow and notice his neighborhood is now red on the map


00:47:43.900 --> 00:47:46.100
and he got it so he thinks there's a traffic jam


00:47:46.100 --> 00:47:47.980
and he'll send cars around his neighborhood.


00:47:47.980 --> 00:47:49.420
- Nice.


00:47:49.420 --> 00:47:51.000
I wanna get one of these so bad


00:47:51.000 --> 00:47:52.740
and whenever I take my dog for a walk,


00:47:52.740 --> 00:47:55.180
just walk with the wagon behind me too.


00:47:55.180 --> 00:47:56.700
- This is no cars.


00:47:56.700 --> 00:47:59.020
- Yeah, so good, isn't it?


00:47:59.020 --> 00:48:01.940
- Yeah, this guy's so ahead of our time.


00:48:01.940 --> 00:48:02.780
He's just like--


00:48:02.780 --> 00:48:03.620
- Oh, he's so brilliant.


00:48:03.620 --> 00:48:05.600
- Yeah, he's working out for his neighbors.


00:48:05.600 --> 00:48:08.580
- Yeah, the next one here is gonna take a little bit of,


00:48:08.580 --> 00:48:11.900
I gotta set the stage, give me a second to set the history.


00:48:11.900 --> 00:48:12.900
Have you heard, you've heard about


00:48:12.900 --> 00:48:14.060
these motivational posters?


00:48:14.060 --> 00:48:15.340
You go to like a dentist's office,


00:48:15.340 --> 00:48:18.100
it'll be like an eagle soaring over like a sunset.


00:48:18.100 --> 00:48:19.400
Like if you don't spread your wings,


00:48:19.400 --> 00:48:20.960
you'll never soar as high as you could


00:48:20.960 --> 00:48:22.300
or something cheesy like that.


00:48:22.300 --> 00:48:24.220
- Yeah, it's pretty small clusters.


00:48:24.220 --> 00:48:25.060
- Yes, exactly.


00:48:25.060 --> 00:48:26.600
There's a company called Despair.


00:48:26.600 --> 00:48:30.240
And Despair creates these but like in reverse.


00:48:30.240 --> 00:48:31.760
They're called the demotivators.


00:48:31.760 --> 00:48:32.600
- Yeah, nice.


00:48:32.600 --> 00:48:33.980
- So have you seen these?


00:48:33.980 --> 00:48:34.820
- No.


00:48:34.820 --> 00:48:36.060
- Okay, so here's one like Solutions.


00:48:36.060 --> 00:48:36.940
And what does it say?


00:48:36.940 --> 00:48:40.940
It has like a Rube Goldbergian type looking thing here.


00:48:40.940 --> 00:48:43.300
And it says, "Solutions, this is what happens


00:48:43.300 --> 00:48:45.740
"when the problem solver gets paid by the hour."


00:48:45.740 --> 00:48:47.100
(laughing)


00:48:47.100 --> 00:48:48.880
It's just out of control.


00:48:48.880 --> 00:48:49.880
Here's one.


00:48:49.880 --> 00:48:50.880
What is this?


00:48:50.880 --> 00:48:52.440
It's a frog wearing with a snail on its head.


00:48:52.440 --> 00:48:56.400
It says, "Collaborate so the best of us have to carry the rest of us."


00:48:56.400 --> 00:48:59.600
It's just like, they're really...


00:48:59.600 --> 00:49:01.080
All right.


00:49:01.080 --> 00:49:02.080
So that brings us to...


00:49:02.080 --> 00:49:04.960
I feel like this is a Brian Skin show a little bit.


00:49:04.960 --> 00:49:13.680
This tweet that he shared here, and it has the latexify thing, but recursion.


00:49:13.680 --> 00:49:15.640
And for the recursion, it has that demotivator.


00:49:15.640 --> 00:49:20.120
There's a picture that said recursion. Here we go again, and then embedded in that is the recursion. Here we go again


00:49:20.120 --> 00:49:26.100
It's like that. Yeah, like your screen share you see your own screen. Yeah, so it's kind of like that poster but for recursion


00:49:26.100 --> 00:49:27.180
Yeah


00:49:27.180 --> 00:49:33.200
I kind of feel bad that people people that don't get the recursion joke because they can't even look it up because it just


00:49:33.200 --> 00:49:39.680
It's redirected. It just keeps going like I the definition is the definition. It's right. Nice. All right


00:49:39.680 --> 00:49:41.980
Well, that's what I got for you all. Well, thanks everybody


00:49:41.980 --> 00:49:45.980
Thanks, Michael, of course, and thanks, Merlo, for coming on the show.


00:49:45.980 --> 00:49:47.980
Thanks for having me. It was great.


00:49:47.980 --> 00:49:49.980
Yeah, you bet. Bye, everyone.

