
00:00:00.000 --> 00:00:05.160
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.160 --> 00:00:09.460
This is episode 40, recorded August 21st, 2017.


00:00:09.460 --> 00:00:15.280
I'm Brian Okken. We have a guest host again, filling in for Michael while he's still on vacation.


00:00:15.280 --> 00:00:20.040
This week we have Eric Choo. Did I pronounce that right? Is it Eric Choo?


00:00:20.040 --> 00:00:24.600
Yeah, so I would usually pronounce Eric Cho, but it's all good. Eric Cho. Yeah, okay.


00:00:24.640 --> 00:00:27.320
Well, Eric has agreed to do it with us.


00:00:27.320 --> 00:00:31.000
He's the author of the book, "Mastering Python Networking,"


00:00:31.000 --> 00:00:34.120
and a self-proclaimed network automation nerd.


00:00:34.120 --> 00:00:35.600
That sounds great.


00:00:35.600 --> 00:00:37.840
Let's jump in with Eric's first topic.


00:00:37.840 --> 00:00:38.600
Yeah, sure.


00:00:38.600 --> 00:00:39.120
Hey, Brian.


00:00:39.120 --> 00:00:40.360
So it's good to be here.


00:00:40.360 --> 00:00:43.080
As you mentioned, I first recently finished my book.


00:00:43.080 --> 00:00:46.080
And in the book, I introduced about a dozen or so


00:00:46.080 --> 00:00:48.600
Python tools and modules.


00:00:48.600 --> 00:00:50.400
And I thought this would be a great chance


00:00:50.400 --> 00:00:52.640
to kind of introduce three of the top ones,


00:00:52.640 --> 00:00:58.640
my go-to modules that I mentioned in the book so that I could share with everybody if they


00:00:58.640 --> 00:01:00.240
proved to be helpful for other people.


00:01:00.240 --> 00:01:04.480
These topics also show up, we have links in the show notes, but you have information about


00:01:04.480 --> 00:01:05.680
these in your book as well?


00:01:05.680 --> 00:01:06.680
Yeah, totally.


00:01:06.680 --> 00:01:11.440
So these are actually, so for example, the first tool that I will mention a bit, Ansible,


00:01:11.440 --> 00:01:15.520
you know, I actually spent two chapters in the book on Ansible.


00:01:15.520 --> 00:01:19.320
First just kind of introducing and then the second would be like more advanced topics


00:01:19.320 --> 00:01:20.320
and so on and so forth.


00:01:20.320 --> 00:01:24.880
the ones that I kind of live by the book as a reflection of the experience I have.


00:01:24.880 --> 00:01:28.400
So okay, great. So let's, let's talk about Ansible.


00:01:28.400 --> 00:01:32.480
Yeah, sure. So if you're, you know, I know we chat a little bit about


00:01:32.480 --> 00:01:38.400
ops and so on. But, you know, if you're involved in operations of your company,


00:01:38.400 --> 00:01:44.560
you probably heard of Ansible. So it's a general purpose automation framework. And so not just for


00:01:44.560 --> 00:01:49.280
networking equipment, but you could automate both, you know, servers, cloud operations, like


00:01:49.280 --> 00:01:55.600
Azure and AWS through what they call the modules like, you know, in their quote unquote playbooks.


00:01:55.600 --> 00:02:01.120
It's a good framework because I think especially for network engineering, because it has the most


00:02:01.120 --> 00:02:06.880
vendor support. So in the network engineering world that it's always the tool kind of lives


00:02:06.880 --> 00:02:11.920
and dies by vendor support. And Ansible has the most network support because they're


00:02:11.920 --> 00:02:18.400
agentless, and they could execute locally calls the API's on the remote network devices,


00:02:18.400 --> 00:02:20.840
and therefore allows a lot of flexibility,


00:02:20.840 --> 00:02:22.680
allows the vendors to shine, and so on.


00:02:22.680 --> 00:02:23.240
That's cool.


00:02:23.240 --> 00:02:26.240
And Ansible is written in Python?


00:02:26.240 --> 00:02:26.800
That's neat.


00:02:26.800 --> 00:02:28.280
Yeah, it is written in Python.


00:02:28.280 --> 00:02:29.880
So that's another thing that's great.


00:02:29.880 --> 00:02:33.160
It's that you obviously start out as a user of the tool.


00:02:33.160 --> 00:02:35.360
But if you know a little bit about Python,


00:02:35.360 --> 00:02:38.440
you can actually start contributing to the modules


00:02:38.440 --> 00:02:39.560
rather quickly.


00:02:39.560 --> 00:02:42.680
So I'm a network engineer by nature,


00:02:42.680 --> 00:02:44.680
and I don't write a lot of code.


00:02:44.680 --> 00:02:47.560
But I was able to write modules for it rather quickly.


00:02:47.560 --> 00:02:50.520
But you can also drive it then, obviously,


00:02:50.520 --> 00:02:54.160
from if you've got Python scripts or Python modules


00:02:54.160 --> 00:02:56.720
to control your Ansible tool chain?


00:02:56.720 --> 00:02:57.220
Yeah.


00:02:57.220 --> 00:03:00.960
Or is it something you use outside of that?


00:03:00.960 --> 00:03:02.440
The heart of the tool is actually


00:03:02.440 --> 00:03:04.080
revolve around playbooks.


00:03:04.080 --> 00:03:07.040
So they have this playbook, and that is in a YAML format.


00:03:07.040 --> 00:03:09.040
And in the YAML format, you can actually


00:03:09.040 --> 00:03:11.120
specify the modules that you want to use.


00:03:11.120 --> 00:03:15.640
For example, you want to do Cisco iOS for NTP configuration,


00:03:15.640 --> 00:03:16.560
for example.


00:03:16.560 --> 00:03:21.460
So you use the iOS command module and within your playbook, you only have to


00:03:21.460 --> 00:03:26.040
specify the parameters for your like NTP server IP address, for example.


00:03:26.040 --> 00:03:31.320
That allows you to quickly spin up and be a user of Ansible, but the iOS


00:03:31.320 --> 00:03:33.860
command module that is running in Python.


00:03:33.860 --> 00:03:38.620
So, you know, if there's a module that you're, you want to use, but does not


00:03:38.620 --> 00:03:41.180
exist, you could just go ahead and write that module.


00:03:41.180 --> 00:03:45.620
So for example, for me, I work for ATEN networks and ATEN networks didn't


00:03:45.620 --> 00:03:46.780
really have a lot of modules.


00:03:46.780 --> 00:03:49.900
So I went ahead and ported one of the modules


00:03:49.900 --> 00:03:52.380
into our latest API and so on.


00:03:52.380 --> 00:03:53.340
- Okay, cool.


00:03:53.340 --> 00:03:54.180
- Yeah.


00:03:54.180 --> 00:03:55.000
- Well, thanks.


00:03:55.000 --> 00:03:55.840
- Yeah, thanks.


00:03:55.840 --> 00:03:58.980
- Well, I'm gonna jump into a article that I found


00:03:58.980 --> 00:04:01.340
and I like the topics.


00:04:01.340 --> 00:04:04.800
The article is Python Practices for Efficient Code,


00:04:04.800 --> 00:04:07.260
Performance, Memory and Usability.


00:04:07.260 --> 00:04:09.740
And I gotta like preface this


00:04:09.740 --> 00:04:12.500
that I've got a lot of opinions about some of this stuff,


00:04:12.500 --> 00:04:15.340
but I don't wanna, it's not meant as a disrespect


00:04:15.340 --> 00:04:19.260
to the author and I'm gonna probably get his name wrong but it's


00:04:19.260 --> 00:04:22.860
I think it's Satwik Kensal. I wanted to say it because it's a cool name.


00:04:22.860 --> 00:04:26.340
But it's got six different practices he talks about.


00:04:26.340 --> 00:04:31.580
I'll just list them off. Try not to blow off memory. Whether you use Python 2 or 3.


00:04:31.580 --> 00:04:34.700
Write beautiful code. Speed up performance.


00:04:34.700 --> 00:04:37.980
Analyze your code and testing and continuous integration.


00:04:37.980 --> 00:04:41.660
I like that these are, it's a pretty short article but these are


00:04:41.660 --> 00:04:45.220
it's a really good overview of a lot of things that you should care about when


00:04:45.220 --> 00:04:47.060
you're getting serious about code.


00:04:47.060 --> 00:04:51.540
So, first off, the memory bit. I think it is important to talk to


00:04:51.540 --> 00:04:55.300
people about using generators when they're dealing with large data sets


00:04:55.300 --> 00:04:56.460
because that's


00:04:56.460 --> 00:04:59.940
something that by default my brain doesn't think generators right off the


00:04:59.940 --> 00:05:00.640
bat.


00:05:00.640 --> 00:05:04.820
So making sure that generators are used when you can for big things.


00:05:04.820 --> 00:05:10.340
Big number crunching, use NumPy. And a little bit on using classes and


00:05:10.340 --> 00:05:12.060
strings actually don't see a lot of


00:05:12.060 --> 00:05:14.540
people using the mentions don't use plus


00:05:14.540 --> 00:05:17.500
for formatting large strings and I just


00:05:17.500 --> 00:05:19.740
don't see that that much and then his


00:05:19.740 --> 00:05:21.320
recommendation for classes if you're


00:05:21.320 --> 00:05:23.900
going to use classes use slots and I say


00:05:23.900 --> 00:05:25.700
just use adders if you're going to use


00:05:25.700 --> 00:05:28.060
classes because adders is awesome


00:05:28.060 --> 00:05:30.740
Python 2 vs Python 3 kind of goes on


00:05:30.740 --> 00:05:34.100
this a lot but I guess I just say use


00:05:34.100 --> 00:05:35.620
Python 3 unless you really have to


00:05:35.620 --> 00:05:37.940
writing beautiful code he has a lot of


00:05:37.940 --> 00:05:43.380
good reasons I think for why you should, because you're writing for other people


00:05:43.380 --> 00:05:49.420
as well as not just yourself, but I'm more solid for why I like...


00:05:49.420 --> 00:05:52.780
I used to be like everybody should just learn how to read other people's code


00:05:52.780 --> 00:05:57.500
but now I think it's a maintenance cost thing and maybe it's my foray into


00:05:57.500 --> 00:06:02.580
management but just picking a style, sticking with it, using static analysis


00:06:02.580 --> 00:06:06.980
it's a cost thing it's gonna save you money. The next couple topics I can't


00:06:06.980 --> 00:06:11.180
really talk about too much. Speed up your performance, multi-processing versus


00:06:11.180 --> 00:06:16.180
multi-threading. I guess I'm I gotta admit that I don't really use either in


00:06:16.180 --> 00:06:21.780
most of my Python code so far. And then analyzing your code with cprofile and


00:06:21.780 --> 00:06:26.540
memory profiler and stuff. I haven't done enough of that to really comment. And


00:06:26.540 --> 00:06:30.300
then the last bit I have to testing and continuous integration. I really


00:06:30.300 --> 00:06:33.980
appreciate that he links to python testing.net for some of these tutorials.


00:06:33.980 --> 00:06:35.140
That's awesome.


00:06:35.140 --> 00:06:39.780
But I think for testing, the shorter answer is use PyTest.


00:06:39.780 --> 00:06:42.780
I didn't really tell you all about what his thoughts are,


00:06:42.780 --> 00:06:44.740
but it's a well-written article, so go read it.


00:06:44.740 --> 00:06:45.540
Yeah, I agree.


00:06:45.540 --> 00:06:47.660
I read it, and I totally agree with your point


00:06:47.660 --> 00:06:49.420
about Python 2 and Python 3.


00:06:49.420 --> 00:06:51.020
I think it's almost--


00:06:51.020 --> 00:06:54.740
I've read studies on how much users were


00:06:54.740 --> 00:06:56.220
on Python 3 and Python 2.


00:06:56.220 --> 00:06:58.740
It seems like last year we reached the inflection point


00:06:58.740 --> 00:07:01.660
where most users are starting to write their new code in Python


00:07:01.660 --> 00:07:03.580
3 as opposed to Python 2.


00:07:03.580 --> 00:07:04.660
I don't know if you agree or not.


00:07:04.660 --> 00:07:05.720
Yeah, I think so.


00:07:05.720 --> 00:07:11.040
And also, even a couple of years ago, there was a problem with some really


00:07:11.040 --> 00:07:16.260
crucial projects and modules and packages not being available for Python 3.


00:07:16.260 --> 00:07:18.400
But I think that's totally changed.


00:07:18.400 --> 00:07:23.040
I think it's just some of the little corner case things that may not even be


00:07:23.040 --> 00:07:27.100
being used on new projects anymore that are Python 2 only.


00:07:27.100 --> 00:07:32.000
It seems like once Django moved over, it's like the world is wide open now.


00:07:32.000 --> 00:07:32.480
Yeah.


00:07:32.520 --> 00:07:35.480
And I think that has a lot to do with just people don't--


00:07:35.480 --> 00:07:36.880
a lot of new people didn't--


00:07:36.880 --> 00:07:39.680
they're just following the tutorial and doing the default.


00:07:39.680 --> 00:07:42.240
I think the next hurdle will be trying


00:07:42.240 --> 00:07:46.040
to get all of the default distributions and even


00:07:46.040 --> 00:07:49.600
Mac to ship with Python 3 instead of Python 2.


00:07:49.600 --> 00:07:50.240
That'd be good.


00:07:50.240 --> 00:07:52.920
Yeah, good luck with that.


00:07:52.920 --> 00:07:54.640
Because I think-- yeah, I think--


00:07:54.640 --> 00:07:57.840
what is it, Ubuntu 16.04 ships with 3.4.


00:07:57.840 --> 00:07:59.520
But default, you know, if you--


00:07:59.520 --> 00:08:00.920
I forgot, when you type in Python,


00:08:00.920 --> 00:08:05.960
Does it come out with 3.4 or 2.7 on my Mac? It was 2.7, but I've had this Mac for a while


00:08:05.960 --> 00:08:09.160
So I'm not sure so that's all I got on that one


00:08:09.160 --> 00:08:13.040
I'm actually pretty interested in this next tool that you're gonna talk about


00:08:13.040 --> 00:08:19.280
So let's jump into that. Yeah, so the second tool I want to mention is the the scapy program


00:08:19.280 --> 00:08:24.700
So it's a Python based interactive packet manipulation and library


00:08:24.700 --> 00:08:29.280
So you could use it both in an interactive mode where you could just kind of fuzzing and trying stuff out


00:08:29.280 --> 00:08:33.920
And once you're happy with it, you can actually write a program and just reuse it.


00:08:33.920 --> 00:08:39.920
And so the biggest difference between Skapi and other tools like, and I'm just going to be mainly


00:08:39.920 --> 00:08:46.960
security focused. So like I say, HPING 3, for example. So biggest difference between Skapi and


00:08:46.960 --> 00:08:51.640
HPING 3 is that for Skapi, you're crafting a packet from the ground up. So you're not really


00:08:51.640 --> 00:08:56.840
limited to the features and functions that was provided by the program itself. So for example,


00:08:56.840 --> 00:09:02.440
you know, using Skapi, I was able to write a mail form packet, IP version 3, for example,


00:09:02.440 --> 00:09:08.440
in a packet and see if it passes through my network, or if it crashes my infrastructure,


00:09:08.440 --> 00:09:16.280
my servers or anything like that. So mainly, very much security focused tool for me. But I could


00:09:16.280 --> 00:09:21.880
imagine other people have other use for it. So on the tutorial on the for Skapi, and it's in the


00:09:21.880 --> 00:09:25.540
the show notes that it shows how to use ping of death,


00:09:25.540 --> 00:09:29.200
where you have a large payload of the packet and that's a ping,


00:09:29.200 --> 00:09:31.140
see if it crashes your host.


00:09:31.140 --> 00:09:34.820
It's pretty much an outdated vulnerability, but who knows?


00:09:34.820 --> 00:09:36.600
Some new service comes out,


00:09:36.600 --> 00:09:38.140
we still have this vulnerability,


00:09:38.140 --> 00:09:41.620
you have your land attacks, and so on and so forth.


00:09:41.620 --> 00:09:44.560
There's a bunch of useful things that you could test with,


00:09:44.560 --> 00:09:45.680
or even just fuzzing,


00:09:45.680 --> 00:09:47.880
or TCP scanning, and stuff like that.


00:09:47.880 --> 00:09:49.200
>> This is actually awesome.


00:09:49.200 --> 00:09:50.420
I can't wait to play with this,


00:09:50.420 --> 00:09:55.220
And in testing and stuff, like being able to muck with 8 or 11 frames.


00:09:55.220 --> 00:09:56.220
Exactly.


00:09:56.220 --> 00:09:59.220
And yeah, this is great.


00:09:59.220 --> 00:10:01.380
Yes, and it's been around for a while.


00:10:01.380 --> 00:10:06.020
A lot of people, I think if you're running just say something quick and something that's


00:10:06.020 --> 00:10:10.520
already included in say HP3, go ahead and just use HP3, right?


00:10:10.520 --> 00:10:14.180
Because it's quick, you don't have to spend all this time crafting your packet.


00:10:14.180 --> 00:10:19.900
But for the 20% of stuff that you really need to clamp down on what you want inside of that


00:10:19.900 --> 00:10:23.940
packet either through the header or the payload, Skappy is kind of your go-to


00:10:23.940 --> 00:10:28.180
tool for that and it's based in Python. So and use the Python shell for


00:10:28.180 --> 00:10:32.220
interactive to play with it so that's even better. Oh that's great, cool. You


00:10:32.220 --> 00:10:35.900
definitely have to pass that along with some of the people I know. Yeah let me


00:10:35.900 --> 00:10:39.940
know how it goes, you know. I wanted to talk about headless Chrome which I


00:10:39.940 --> 00:10:44.860
haven't actually played with but I just heard about it because Miguel Grinberg


00:10:44.860 --> 00:10:48.540
wrote a post on using headless Chrome with Selenium and


00:10:48.540 --> 00:10:54.900
With testing web applications. It's a common practice to use Selenium and Python


00:10:54.900 --> 00:11:00.920
but usually a lot of people are using a Firefox as their default browser to interact with a


00:11:00.920 --> 00:11:03.220
website and


00:11:03.220 --> 00:11:07.820
This is a little he starts off with basically an example that does use


00:11:07.820 --> 00:11:10.580
Think he's using


00:11:10.980 --> 00:11:18.320
Firefox but if not, it's using a normal. Yeah starts off the Firefox example and then shows how to change it


00:11:18.320 --> 00:11:19.520
He's using unit tests


00:11:19.520 --> 00:11:22.420
I got to get on him about using by test more but


00:11:22.420 --> 00:11:27.780
Using a headless Chrome and then the nice thing about that is you don't get the with a headless browser


00:11:27.780 --> 00:11:33.760
You don't have the the dialog window or the the window pop up all the time when you're running tests. So


00:11:33.760 --> 00:11:40.420
The magic trick I guess is that there's an option to to selenium with the web driver


00:11:40.420 --> 00:11:45.100
you pass it a headless option but like I said all this we got a link to


00:11:45.100 --> 00:11:51.020
Miguel's post in the show notes and he just shows you how to do it. Yeah, I'm a big fan of


00:11:51.020 --> 00:11:52.860
Miguel's work, you know


00:11:52.860 --> 00:11:53.380
obviously


00:11:53.380 --> 00:11:58.380
he did the mega tutorial on flask and I learned a lot from that and also back to his


00:11:58.380 --> 00:12:03.080
Kickstarter campaign that's gonna come out next year when he's revising his


00:12:03.080 --> 00:12:09.240
Mega tutorial so I've definitely recommend anything that anything you publish I would just recommend go read it


00:12:09.980 --> 00:12:16.600
Yeah, he's a super nice guy, too. He was the only person in Portland that I knew that was going to EuroPython


00:12:16.600 --> 00:12:20.940
He took a bunch of rocket stickers for the pytest book


00:12:20.940 --> 00:12:26.740
He just like carried him over there with him so I could have him handed out there. So that was cool


00:12:26.740 --> 00:12:32.500
Yeah, I saw him on the last year's PyCon in Portland, but I was just too shy to go up and say hi, right?


00:12:32.500 --> 00:12:38.860
So, you know, maybe next time I'll just say hey Miguel like it work. You should he's a he's a super nice guy


00:12:38.860 --> 00:12:40.700
He's pretty underspoken.


00:12:40.700 --> 00:12:45.060
He won't go out and tell you how awesome he is right off the bat.


00:12:45.060 --> 00:12:46.100
We all know that's wrong.


00:12:46.100 --> 00:12:46.600
He is.


00:12:46.600 --> 00:12:47.460
That's right.


00:12:47.460 --> 00:12:49.660
Again, I'm excited looking at this list.


00:12:49.660 --> 00:12:52.380
It's kind of fun getting new people in to talk about things.


00:12:52.380 --> 00:12:55.220
I love graph visualization tools.


00:12:55.220 --> 00:12:56.900
So tell me about GraphViz.


00:12:56.900 --> 00:12:59.500
Yeah, so as a network engineer, it


00:12:59.500 --> 00:13:02.500
seems like we spent a large chunk of our time,


00:13:02.500 --> 00:13:03.660
and rightfully so.


00:13:03.660 --> 00:13:06.180
It's part of our job to document the network.


00:13:06.180 --> 00:13:09.140
and you spend a lot of time drawing the graph


00:13:09.140 --> 00:13:12.420
and using, you know, whether your choice of tool is a Visio


00:13:12.420 --> 00:13:14.640
or it's a OmniGraffle,


00:13:14.640 --> 00:13:16.760
you spend a lot of time diagramming your network.


00:13:16.760 --> 00:13:18.100
But by the time you're done,


00:13:18.100 --> 00:13:22.020
it's almost the case that your graph is outdated, right?


00:13:22.020 --> 00:13:23.660
Like the network actually just grows.


00:13:23.660 --> 00:13:26.820
You either add a new VLAN, you add a new box,


00:13:26.820 --> 00:13:30.180
or just whatever it is that it's almost,


00:13:30.180 --> 00:13:32.480
because you take so long and it's not automated,


00:13:32.480 --> 00:13:36.080
you're actually manually graphing these network diagrams.


00:13:36.080 --> 00:13:39.680
So this is especially a big problem with the data center


00:13:39.680 --> 00:13:40.760
being bigger and bigger.


00:13:40.760 --> 00:13:44.920
So now you have what they call the factory network, where


00:13:44.920 --> 00:13:47.020
the middle is huge, where you have server


00:13:47.020 --> 00:13:49.200
to server communication as opposed to server


00:13:49.200 --> 00:13:50.760
to client communication.


00:13:50.760 --> 00:13:54.120
So this huge network presents a big problem


00:13:54.120 --> 00:13:57.340
because you're having hundreds of links between each


00:13:57.340 --> 00:13:58.960
of the network layers.


00:13:58.960 --> 00:14:01.280
And doing it manually is just not an option anymore.


00:14:01.280 --> 00:14:02.880
So I think a couple of years ago,


00:14:02.880 --> 00:14:05.360
I went out and started thinking about trying


00:14:05.360 --> 00:14:09.360
come up with a solution and GraphViz is what I saw where you could actually


00:14:09.360 --> 00:14:15.440
basically describe your network in terms of a text file. So I would say in terms


00:14:15.440 --> 00:14:19.800
of nodes and edges and say these two nodes should be placed together at the


00:14:19.800 --> 00:14:24.320
very top tier and these four nodes would be in the middle tier and they should


00:14:24.320 --> 00:14:28.840
line up and so on so forth. So GraphViz is a great tool for doing that and


00:14:28.840 --> 00:14:33.960
there's a Python module that's also named GraphViz that allows you to come


00:14:33.960 --> 00:14:38.640
up with this what they call like a dot file where you know you you come you use


00:14:38.640 --> 00:14:42.200
the Python module you generate this dot file you run it through graph viz and


00:14:42.200 --> 00:14:46.040
voila you have this beautiful graph that's up to your liking so the only


00:14:46.040 --> 00:14:51.440
thing that I guess it's me not being didn't learn it enough that you know


00:14:51.440 --> 00:14:55.760
like coloring the graph like say if I wanted to color all the spine boxes or


00:14:55.760 --> 00:15:00.240
if I want to color all the leafs but leave devices in a certain color I still


00:15:00.240 --> 00:15:01.580
haven't learned how to do that.


00:15:01.580 --> 00:15:04.420
So sometimes when I do need that colorization,


00:15:04.420 --> 00:15:07.260
I kind of launch OmniGraffle Pro.


00:15:07.260 --> 00:15:11.100
And you could import that graph and then color it to my liking.


00:15:11.100 --> 00:15:12.620
But it's an awesome tool.


00:15:12.620 --> 00:15:16.100
It allows you to automatically generate your graph.


00:15:16.100 --> 00:15:20.060
So it allows you to have less of a drift


00:15:20.060 --> 00:15:22.620
between your actual network versus your diagram.


00:15:22.620 --> 00:15:23.860
OK.


00:15:23.860 --> 00:15:24.900
Nice.


00:15:24.900 --> 00:15:29.500
Actually, I didn't know about the Python module for it,


00:15:29.500 --> 00:15:32.660
or the Python package to use it.


00:15:32.660 --> 00:15:35.420
Because GraphViz has been around for a long time.


00:15:35.420 --> 00:15:35.980
That's right.


00:15:35.980 --> 00:15:39.180
But working with the dot files, even though the format's


00:15:39.180 --> 00:15:42.300
pretty easy, it still is something else to learn.


00:15:42.300 --> 00:15:46.100
And yeah, I'll have to check out the Python package,


00:15:46.100 --> 00:15:47.500
because that's pretty cool.


00:15:47.500 --> 00:15:48.300
I like that.


00:15:48.300 --> 00:15:50.180
Yeah, so I think just the biggest--


00:15:50.180 --> 00:15:52.380
I mean, if you want a quick graph,


00:15:52.380 --> 00:15:55.420
you could use PyGal or Matplotlib even,


00:15:55.420 --> 00:15:57.260
and you just quickly draw that graph.


00:15:57.260 --> 00:16:00.260
But GraphViz to me is the most powerful.


00:16:00.260 --> 00:16:05.380
And I know a lot of companies use that for drawing their eye


00:16:05.380 --> 00:16:06.380
candy kind of graph.


00:16:06.380 --> 00:16:08.660
Like you've seen the Facebook graph where it just


00:16:08.660 --> 00:16:11.220
have lines all over the globe and so on.


00:16:11.220 --> 00:16:13.460
I mean, that's the kind of graph that GraphViz is capable


00:16:13.460 --> 00:16:14.940
of doing really, really quickly.


00:16:14.940 --> 00:16:15.620
Well, yeah.


00:16:15.620 --> 00:16:18.820
I don't know if those are helpful, but yeah.


00:16:18.820 --> 00:16:20.660
Those are helpful for marketing materials.


00:16:20.660 --> 00:16:21.160
Yeah.


00:16:21.160 --> 00:16:23.420
Some of the automated code processors


00:16:23.420 --> 00:16:26.900
use it for drawing class hierarchies and stuff.


00:16:26.900 --> 00:16:27.900
Right, right.


00:16:27.900 --> 00:16:31.700
I mean, and in a shameless plug for my book, I also use the, the graphics tool.


00:16:31.700 --> 00:16:37.460
I use an example of where you're inside of a, so use your Python script to go


00:16:37.460 --> 00:16:41.620
query your network devices and say, basically say, tell me who your neighbors


00:16:41.620 --> 00:16:46.340
are and you just kind of walk layer by layer by layer and you construct a


00:16:46.340 --> 00:16:49.940
graph is file that represents your network in real time.


00:16:49.940 --> 00:16:54.260
So every time you could just execute that script and you will give you your most


00:16:54.260 --> 00:16:56.460
up to date and network graph automatically.


00:16:56.460 --> 00:16:59.420
So I think that's kind of a good use case for the tool,


00:16:59.420 --> 00:17:01.940
where, like I said, the biggest problem that I


00:17:01.940 --> 00:17:03.820
face with network graphs is there's always


00:17:03.820 --> 00:17:06.820
this drift between the actual network topology


00:17:06.820 --> 00:17:08.300
versus the graph that you present.


00:17:08.300 --> 00:17:10.500
And if the graph is wrong, nobody's going to use it.


00:17:10.500 --> 00:17:11.000
Yeah.


00:17:11.000 --> 00:17:15.500
Oh, hey, I just remembered a cool example of the dot files.


00:17:15.500 --> 00:17:19.260
One of the projects I work on, one of the things that we log


00:17:19.260 --> 00:17:23.540
is basically a running state machine example,


00:17:23.540 --> 00:17:28.580
an internal state machine that is basically a state machine


00:17:28.580 --> 00:17:32.620
as it's running and where we are currently.


00:17:32.620 --> 00:17:37.980
That's being output as a log file in the dot format


00:17:37.980 --> 00:17:42.300
so that whenever we get a crash or something,


00:17:42.300 --> 00:17:45.540
we can take that log file and just throw it through GraphViz


00:17:45.540 --> 00:17:48.620
and see exactly where we're at visually.


00:17:48.620 --> 00:17:52.380
So even a manager could understand it.


00:17:52.380 --> 00:17:53.380
Yeah, like me.


00:17:53.380 --> 00:17:54.020
Yeah.


00:17:54.020 --> 00:17:54.820
So cool.


00:17:54.820 --> 00:17:55.320
Yeah.


00:17:55.320 --> 00:17:59.120
Last topic I'd like to bring up is PyCascades.


00:17:59.120 --> 00:18:01.580
So this is a new thing this year.


00:18:01.580 --> 00:18:03.280
I think it's-- I'm going to get it wrong,


00:18:03.280 --> 00:18:05.680
but I think it's a whole bunch of different Python


00:18:05.680 --> 00:18:08.180
groups in the area coming together


00:18:08.180 --> 00:18:12.260
to try to do a regional Northwest Python conference.


00:18:12.260 --> 00:18:12.960
Oh, interesting.


00:18:12.960 --> 00:18:14.060
It is in January.


00:18:14.060 --> 00:18:16.420
It's January 22nd, 23rd.


00:18:16.420 --> 00:18:18.900
And then they're going to do sprints the 24th.


00:18:18.900 --> 00:18:20.100
But I like the format.


00:18:20.100 --> 00:18:21.460
I like what they're doing.


00:18:21.460 --> 00:18:28.540
The tickets are not very expensive. I think they're like a hundred bucks or something. Okay, they're not bad and it's in Vancouver, BC


00:18:28.540 --> 00:18:31.320
Which I even though I live in Portland, I've never been there


00:18:31.320 --> 00:18:36.940
So I'm looking forward to going and seeing that and the call for proposals for talks is the 28th


00:18:36.940 --> 00:18:39.300
So that's like Monday or something like that


00:18:39.300 --> 00:18:44.520
So when this comes out people only have a couple days, but I think there's still slots open


00:18:44.520 --> 00:18:48.780
So, please check it out. And if you want to do a talk local talk, I think this is good


00:18:48.780 --> 00:18:51.780
The talk slots are 25 minutes too, which is a nice length.


00:18:51.780 --> 00:18:57.220
I think that anybody that has a, if you've got expertise on really anything in your job,


00:18:57.220 --> 00:18:59.660
25 minutes shouldn't be too hard to fill.


00:18:59.660 --> 00:19:04.180
So I'm going to submit a couple talks and encourage anybody else to as well.


00:19:04.180 --> 00:19:04.460
Yeah.


00:19:04.460 --> 00:19:07.340
So Vancouver is about three hours away from me as well.


00:19:07.340 --> 00:19:08.660
So I have to check it out.


00:19:08.660 --> 00:19:12.100
I mean, I've never been to the PAI Cascades,


00:19:12.100 --> 00:19:13.700
but it seems like a good format.


00:19:13.700 --> 00:19:15.140
And like you said, tickets are cheap.


00:19:15.140 --> 00:19:15.580
Yeah.


00:19:15.580 --> 00:19:17.780
Well, yeah, it's the first one this year.


00:19:17.780 --> 00:19:25.140
Oh, okay. Got it. Yeah. Yeah, that's our six topics that went by really fast. It did it did so tell me a little bit


00:19:25.140 --> 00:19:29.120
About what's up with you? How long is mastering Python networking been out?


00:19:29.120 --> 00:19:34.000
So it's been out since a June 28th, but the only the digital version was out


00:19:34.000 --> 00:19:37.540
So I think you could start ordering the physical book like mid-july


00:19:37.540 --> 00:19:39.600
So it's been out for about a month and a half


00:19:39.600 --> 00:19:46.080
I have the link in the show notes go check it out. If you if you could I really appreciate any kind of feedbacks or


00:19:46.420 --> 00:19:53.380
Just any criticism good bad ugly, whatever it is, you know, I'm open to it. So I appreciate that nice


00:19:53.380 --> 00:19:54.900
Yeah, so what's happening with you Brian?


00:19:54.900 --> 00:20:02.560
Well, the this last week was the fixing up the cop I got got the copy editing changes for the Pyth test book back


00:20:02.560 --> 00:20:05.460
Oh, that's right. And I just got those in yesterday


00:20:05.460 --> 00:20:11.340
That's gonna be out and I'm so excited to get the the physical copy out. So the physical form. Yeah


00:20:11.340 --> 00:20:18.020
Yeah, the physical form will be like in October, but I'm like as of like there's a like one minor tweak


00:20:18.020 --> 00:20:23.180
I got a fix tonight. Other than that, my hands are completely off. Hopefully I keep saying this every week


00:20:23.180 --> 00:20:27.700
But once it goes in past copy editing and through the rest of it


00:20:27.700 --> 00:20:33.100
It's really a author doesn't get to interfere process until it comes out as a hard copy


00:20:33.100 --> 00:20:37.860
So from start of this project to actually at this point, how long did it take for you?


00:20:37.860 --> 00:20:45.140
That's a long answer, but my interaction with Pragmatic started, I think, June of last year,


00:20:45.140 --> 00:20:50.940
June of 2016. So a little over a year, but I think the first four or five chapters,


00:20:50.940 --> 00:20:56.540
I think I rewrote those like four times to try to get it right. Yeah. Initially,


00:20:56.540 --> 00:21:02.940
I was kind of coming along the same lines as the tutorials I have on the Python testing.net,


00:21:02.940 --> 00:21:07.860
but getting a lot of trying to understand how to write in a book format


00:21:07.860 --> 00:21:12.380
instead of a blog format is a it was a learning experience for me and but still


00:21:12.380 --> 00:21:17.460
even after doing all that I think that I don't think it looking back a year isn't


00:21:17.460 --> 00:21:22.300
that terrible but there's a one of the other authors Python authors is Luciano


00:21:22.300 --> 00:21:27.420
Romalo I wish I knew which book he wrote it's like I'm gonna get it wrong he's


00:21:27.420 --> 00:21:31.340
one of the reviewers and his feedback was really influential but added like


00:21:31.340 --> 00:21:34.460
two or three weeks of my work.


00:21:34.460 --> 00:21:40.100
For me, I think the biggest issue was always not on myself, but on the people around me.


00:21:40.100 --> 00:21:45.700
It's almost like I have to be concentrated and focus on the book, and then so the family


00:21:45.700 --> 00:21:47.500
has to go away.


00:21:47.500 --> 00:21:51.900
My wife has to take on the burden of taking the kids away from me for the duration I was


00:21:51.900 --> 00:21:52.900
writing the book.


00:21:52.900 --> 00:21:57.700
So, yeah, it's definitely both a draining experience, but I'm very excited for you.


00:21:57.700 --> 00:22:00.620
I think when you see that paper copy, you're just going to be like, "Yay!"


00:22:00.620 --> 00:22:03.180
You know, makes it real.


00:22:03.180 --> 00:22:06.740
Yeah, it definitely is going to be cool.


00:22:06.740 --> 00:22:08.980
Like you said, trying to find time within your life


00:22:08.980 --> 00:22:10.400
and trying to get distractions out.


00:22:10.400 --> 00:22:12.740
Because like you, I've got a full time job,


00:22:12.740 --> 00:22:14.500
and kids, and family.


00:22:14.500 --> 00:22:17.740
So it was quite a few late nights at the coffee shop


00:22:17.740 --> 00:22:19.300
trying to get away from everything.


00:22:19.300 --> 00:22:20.500
But it'll be out.


00:22:20.500 --> 00:22:22.860
So that's all we got for today.


00:22:22.860 --> 00:22:26.100
And thanks a ton for helping out, Eric.


00:22:26.100 --> 00:22:27.580
And we'll keep in touch.


00:22:27.580 --> 00:22:28.340
Yeah, absolutely.


00:22:28.340 --> 00:22:28.920
Thanks, Brian.


00:22:28.920 --> 00:22:29.920
being fine.


00:22:29.920 --> 00:22:32.760
Thank you for listening to Python Bytes.


00:22:32.760 --> 00:22:36.320
Follow the show on Twitter via @PythonBytes.


00:22:36.320 --> 00:22:40.080
That's Python Bytes as in B-Y-T-E-S.


00:22:40.080 --> 00:22:43.920
Get the full show notes, including links at pythonbytes.fm.


00:22:43.920 --> 00:22:49.040
If you have a news story you'd like featured, visit pythonbytes.fm and send it our way.


00:22:49.040 --> 00:22:52.080
We're always on the lookout for sharing something cool.


00:22:52.080 --> 00:22:53.080
This is Brian Okken.


00:22:53.080 --> 00:22:57.440
On behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast


00:22:57.440 --> 00:22:58.880
with your friends and colleagues.

