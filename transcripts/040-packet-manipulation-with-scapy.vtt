WEBVTT

00:00:00.001 --> 00:00:05.220
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.220 --> 00:00:09.340
This is episode 40, recorded August 21st, 2017.

00:00:09.340 --> 00:00:15.260
I'm Brian Okken. We have a guest host again, filling in for Michael while he's still on vacation.

00:00:15.260 --> 00:00:20.100
This week we have Eric Chu. Did I pronounce that right? Is it Eric Chu?

00:00:20.100 --> 00:00:23.280
Yeah, so I would usually pronounce Eric Cho, but it's all good.

00:00:23.280 --> 00:00:27.280
Eric Cho. Yeah, okay. Well, Eric has agreed to do it with us.

00:00:27.380 --> 00:00:33.960
He's the author of the book Mastering Python Networking and a self-proclaimed network automation nerd.

00:00:33.960 --> 00:00:37.800
That sounds great. Yeah. Let's jump in with Eric's first topic.

00:00:37.800 --> 00:00:40.180
Yeah, sure. Hey, Brian. So it's good to be here.

00:00:40.180 --> 00:00:42.900
As you mentioned, I first recently finished my book.

00:00:42.900 --> 00:00:48.380
And in the book, I introduced about a dozen or so Python tools and modules.

00:00:48.380 --> 00:00:55.920
And I thought this would be a great chance to kind of introduce three of the top ones, my go-to modules that I mentioned in the book,

00:00:56.000 --> 00:00:59.940
so that I could share with everybody if they're proved to be helpful for other people.

00:00:59.940 --> 00:01:05.480
These topics also show up. We have links on the show notes, but you have information about these in your book as well?

00:01:05.480 --> 00:01:07.900
Yeah, totally. So these are actually...

00:01:07.900 --> 00:01:14.580
So for example, the first tool that I will mention a bit, Ansible, you know, I actually spent two chapters in the book on Ansible.

00:01:14.580 --> 00:01:19.880
So first, just kind of introducing, and then the second would be like more advanced topics, and so on and so forth.

00:01:19.880 --> 00:01:25.020
So these are the ones that I kind of live by. The book is a reflection of the experience I have.

00:01:25.020 --> 00:01:28.240
Okay, great. So let's talk about Ansible.

00:01:28.520 --> 00:01:39.520
Yeah, sure. So if you're, you know, I know we chatted a little bit about ops and so on, but, you know, if you're involved in operations of your company, you probably heard of Ansible.

00:01:39.520 --> 00:01:42.460
So it's a general purpose automation framework.

00:01:42.460 --> 00:01:55.420
And so not just for networking equipment, but it could automate both, you know, servers, cloud operations like Azure and AWS through what they call the modules, like, you know, in their quote unquote playbooks.

00:01:55.420 --> 00:02:01.900
It's a good framework because I think especially for network engineering, because it has the most vendor support.

00:02:01.900 --> 00:02:08.500
So in the network engineering world that it's always the tool kind of lives and dies by vendor support.

00:02:09.200 --> 00:02:22.600
Ansible has the most network support because they're agentless and they could execute locally, calls the APIs on the remote network devices, and therefore allows a lot of flexibility, allows the vendors to shine and so on.

00:02:22.600 --> 00:02:26.700
That's cool. And Ansible is a, it's written in Python? That's neat.

00:02:26.700 --> 00:02:32.760
Yeah, it is written in Python. So that's another thing that's great. It's that you obviously start out as a user of the tool.

00:02:32.760 --> 00:02:39.100
But if you know a little bit about Python, you could actually start contributing to the modules rather quickly.

00:02:39.100 --> 00:02:47.480
So I'm a network engineer by nature, and I don't write a lot of code. But you know, I was able to write modules for it rather quickly.

00:02:47.480 --> 00:02:56.380
But you can drive it, you can also drive it then obviously from if you've got Python scripts or Python modules to control your Ansible tool chain?

00:02:56.380 --> 00:02:56.960
Yeah.

00:02:56.960 --> 00:03:00.700
Or is it something you use outside of that?

00:03:00.880 --> 00:03:16.060
The heart of the tool is actually revolve around playbooks. So they have this playbook, and that is in a YAML format. And in the YAML format, you can actually specify the modules that you want to use. For example, you want to do Cisco iOS for NTP configuration, for example.

00:03:16.260 --> 00:03:33.660
So you use the iOS command module. And within your playbook, you only have to specify the parameters for your like NTP server IP address, for example, that allows you to quickly spin up and be a user of Ansible. But the iOS command module that is written in Python.

00:03:34.040 --> 00:03:52.320
So, you know, if there's a module that you're, you want to use, but does not exist, you could just go ahead and write that module. So for example, for me, I work for A10 networks, and A10 networks didn't really have a lot of modules. So I went ahead and ported one of the modules into our latest API and so on.

00:03:52.320 --> 00:03:53.000
Okay, cool.

00:03:53.000 --> 00:03:53.580
Yeah.

00:03:53.580 --> 00:03:54.140
Well, thanks.

00:03:54.140 --> 00:03:54.760
Yeah, thanks.

00:03:54.760 --> 00:04:22.840
Well, I'm going to jump into a article that I found. And I like the topics. The article is Python practices for efficient code, performance, memory and usability. And I got to like preface this that I've got a lot of opinions about some of this stuff. But I don't want to it's not meant as a disrespect to the author. And I'm going to probably get his name wrong. But it's I think it's Satwick Kensal. I wanted to say it because it's a cool name.

00:04:23.060 --> 00:04:52.960
But it's got six different practices that he talks about. I'll just list them off. Try not to blow off memory, whether you use Python 2 or 3, write beautiful code, speed up performance, analyze your code and testing and continuous integration. I like that these are it's a pretty short article. But these are it's a really good overview of a lot of things that you should care about when you're getting serious about code. So the first off the the memory bit, I think it is important to talk to people about using generators.

00:04:52.960 --> 00:05:10.860
When they're dealing with large data sets, because that's something that by default, my brain doesn't think generators right off the bat. So making sure that generators are used when you can for big things, big number crunching, use NumPy. And a little bit on using classes and strings.

00:05:10.860 --> 00:05:18.540
Actually, I don't see a lot of things. Actually, I don't see a lot of things. Actually, I don't see a lot of people using the mentions don't use plus for formatting large strings. And I just don't see that that much.

00:05:18.540 --> 00:05:35.700
And then his recommendation for classes, if you're going to use classes, use slots. And I say just use adders if you're going to use classes, because adders is awesome. Python 2 versus Python 3 kind of goes on this a lot. But I guess I just say use Python 3 unless you really have to.

00:05:36.300 --> 00:05:46.140
Writing beautiful code. He has a lot of good reasons, I think, for why you should, because you're writing for other people as well as not just, not just yourself.

00:05:46.140 --> 00:05:57.980
But I'm more solid for why I like, I used to be like, everybody should just learn how to read other people's code. But now, I think it's a maintenance cost thing. And maybe it's my foray into management.

00:05:57.980 --> 00:06:04.860
But just picking a style, sticking with it, using static analysis, it's a cost thing. It's going to save you money.

00:06:04.860 --> 00:06:12.020
The next couple topics I can't really talk about too much. Speed up your performance, multiprocessing versus multithreading.

00:06:12.480 --> 00:06:25.780
I guess I got to admit that I don't really use either in most of my Python code so far. And then analyzing your code with cprofile and memory profiler and stuff. I haven't done enough of that to really comment.

00:06:25.780 --> 00:06:34.520
And then the last bit, I have to testing and continuous integration. I really appreciate that he links to pythontesting.net for some of these tutorials. That's awesome.

00:06:35.320 --> 00:06:44.780
But I think for testing, the short answer is use pytest. I didn't really tell you all about what his thoughts are, but it's a well written article. So go read it.

00:06:44.780 --> 00:06:56.240
Yeah, I agree. I read it. And I totally agree with your point about Python 2 and Python 3. I think it's almost I've read studies on how much, you know, users were on Python 3 and Python 2.

00:06:56.320 --> 00:07:04.660
It seems like last year we reached the inflection point where most users are starting to write their new code in Python 3 as opposed to Python 2. I don't know if you agree or not.

00:07:04.660 --> 00:07:27.040
Yeah, I think so. And also, even a couple years ago, there was this, there was a problem with some really crucial projects and modules not and packages not being available for Python 3. But I think that's totally changed. I don't, I think it's just some of the little corner case things that may not even be being used on new projects anymore that are Python 2 only.

00:07:27.040 --> 00:07:32.040
It seems like once Django moved over, it's like, the world's wide open now.

00:07:32.040 --> 00:07:39.080
Yeah, and I think that has a lot to do with just people don't, a lot of new people didn't, they're just following the tutorial and doing the default.

00:07:39.080 --> 00:07:50.100
I think the next hurdle will be making, trying to get all of the default distributions and even Mac to ship with Python 3 instead of Python 2. That'd be good.

00:07:50.100 --> 00:07:51.380
Yeah, good luck with that.

00:07:52.720 --> 00:08:02.840
Because I think, yeah, I think, what is it, Ubuntu 16.04, it shifts with 3.4. But default, you know, if you, I forgot, when you type in Python, does it come out with 3.4 or 2.7?

00:08:02.840 --> 00:08:15.280
On my Mac, it was 2.7. But I've had this Mac for a while. So I'm not sure. So that's all I got on that one. I'm actually pretty interested in this next tool that you're going to talk about. So let's jump into that.

00:08:15.280 --> 00:08:29.400
Yeah, so the second tool I want to mention is the SCAPI program. So it's a Python-based interactive packet manipulation and library. So you could use it both in an interactive mode where you could just kind of fuzzing and trying stuff out.

00:08:29.400 --> 00:08:44.680
And once you're happy with it, you can actually write a program and just reuse it. And so the biggest difference between SCAPI and other tools, like, and I'm just going to be mainly security focused. So like, I say HPing 3, for example.

00:08:44.680 --> 00:08:55.600
So the biggest difference between SCAPI and HPing 3 is that for SCAPI, you're crafting a packet from the ground up. So you're not really limited to the features and functions that was provided by the program itself.

00:08:55.800 --> 00:09:10.120
So for example, you know, using SCAPI, I was able to write a mail form packet, IP version 3, for example, in the packet and see if it passes through my network, or if it crashes my infrastructure, my servers or anything like that.

00:09:10.120 --> 00:09:18.360
So mainly very much security focused tool for me, but I could imagine other people have other use for it.

00:09:18.360 --> 00:09:28.920
So on the tutorial for SCAPI, and it's in the show notes that it shows how to, you know, use ping of death where you have a large payload of the packet and that's a ping.

00:09:28.920 --> 00:09:30.920
See if it crashes your host.

00:09:30.920 --> 00:09:34.540
It's pretty much an outdated vulnerability, but who knows, right?

00:09:34.600 --> 00:09:41.540
Like some new service comes out, we still have this vulnerability, you have your land attacks, and so on and so forth.

00:09:41.540 --> 00:09:47.780
So there's a bunch of useful things that you could test with, or even just fuzzing or, you know, TCP scanning and stuff like that.

00:09:47.780 --> 00:09:49.040
This is actually awesome.

00:09:49.040 --> 00:09:50.300
I can't wait to play with this.

00:09:50.300 --> 00:09:55.120
And in testing and stuff, like being able to muck with 8 or 211 frames.

00:09:55.120 --> 00:09:55.460
Exactly.

00:09:55.940 --> 00:09:59.060
And yeah, this is great.

00:09:59.060 --> 00:09:59.640
Yes.

00:09:59.640 --> 00:10:10.360
And it's been around for a while, you know, a lot of people, I think if you're running just say something quick and something that's already included in say HP 3, go ahead and just use HP 3, right?

00:10:10.360 --> 00:10:11.080
Because it's quick.

00:10:11.080 --> 00:10:13.460
You don't have to spend all these time crafting your packet.

00:10:13.720 --> 00:10:25.000
But for the 20% of stuff that you really need to clamp down on what you want inside of that packet, either through the header or the payload, SCAPI is kind of your go-to tool for that.

00:10:25.000 --> 00:10:26.180
And it's based in Python.

00:10:26.180 --> 00:10:29.580
And use the Python shell for interactive to play with it.

00:10:29.580 --> 00:10:30.380
So that's even better.

00:10:30.380 --> 00:10:31.180
Oh, that's great.

00:10:31.180 --> 00:10:31.460
Cool.

00:10:31.460 --> 00:10:34.640
You definitely have to pass that along with some of the people I know.

00:10:34.640 --> 00:10:36.820
Yeah, let me know how it goes, you know.

00:10:36.820 --> 00:10:48.320
I wanted to talk about Headless Chrome, which I haven't actually played with, but I just heard about it because Miguel Grinberg wrote a post on using Headless Chrome with Selenium.

00:10:48.320 --> 00:10:54.880
And with testing web applications, it's a common practice to use Selenium and Python.

00:10:54.880 --> 00:11:02.240
But usually a lot of people are using Firefox as their default browser to interact with a website.

00:11:02.700 --> 00:11:13.640
And this is a little, he starts off with basically an example that does use, I think he's using Firefox, but if not, it's using a normal.

00:11:13.640 --> 00:11:18.420
Yeah, starts off the Firefox example and then shows how to change it.

00:11:18.420 --> 00:11:19.560
He's using unit test.

00:11:19.560 --> 00:11:21.880
I got to get on him about using pytest more.

00:11:21.880 --> 00:11:24.440
But using a Headless Chrome.

00:11:24.440 --> 00:11:33.060
And the nice thing about that is you don't get the, with a Headless browser, you don't have the dialogue window or the window pop up all the time when you're running tests.

00:11:33.060 --> 00:11:40.540
So the magic trick, I guess, is that there's an option to Selenium with the web driver.

00:11:40.540 --> 00:11:42.560
You pass it a Headless option.

00:11:42.560 --> 00:11:49.460
But like I said, all this, we got a link to Miguel's post in the show notes and he just shows you how to do it.

00:11:49.460 --> 00:11:49.840
Yeah.

00:11:49.840 --> 00:11:52.580
I'm a big fan of Miguel's work.

00:11:52.580 --> 00:12:04.760
You know, obviously he did the mega tutorial on Flask and I learned a lot from that and also backed his Kickstarter campaign that's going to come out next year when he's revising his mega tutorial.

00:12:04.760 --> 00:12:09.340
So I would definitely recommend anything that, anything he published, I would just recommend go read it.

00:12:09.340 --> 00:12:10.560
Yeah.

00:12:10.560 --> 00:12:12.700
He's a super nice guy too.

00:12:12.700 --> 00:12:16.660
He was the only person in Portland that I knew that was going to Europython.

00:12:16.960 --> 00:12:21.040
He took a bunch of rocket stickers for the Pi Test book.

00:12:21.040 --> 00:12:25.920
He just like carried them over there with him so I could have him handed out there.

00:12:25.920 --> 00:12:26.780
So that was cool.

00:12:26.780 --> 00:12:27.040
Yeah.

00:12:27.040 --> 00:12:32.340
I saw him on the last year's Pi Con in Portland, but I was just too shy to go up and say hi.

00:12:32.340 --> 00:12:32.580
Right.

00:12:32.580 --> 00:12:36.740
So, you know, maybe next time I would just say, hey, Miguel, like your work.

00:12:36.740 --> 00:12:37.300
You should.

00:12:37.300 --> 00:12:38.940
He's a super nice guy.

00:12:38.940 --> 00:12:40.640
He's pretty underspoken.

00:12:40.820 --> 00:12:44.320
He won't go out and tell you how awesome he is right off the bat.

00:12:44.320 --> 00:12:46.080
We all know that's funny.

00:12:46.080 --> 00:12:46.660
That's right.

00:12:46.660 --> 00:12:49.680
So again, I'm excited looking at this list.

00:12:49.680 --> 00:12:52.320
It's kind of fun getting new people in to talk about things.

00:12:52.320 --> 00:12:54.980
I love graph visualization tools.

00:12:54.980 --> 00:12:56.860
So tell me about GraphViz.

00:12:56.860 --> 00:12:57.260
Yeah.

00:12:57.260 --> 00:13:03.660
So, you know, as a network engineer, it seems like we spent a large chunk of our time and rightfully so.

00:13:03.660 --> 00:13:05.820
It's part of our job to document the network.

00:13:06.120 --> 00:13:13.940
And you spend a lot of time drawing the graph and using, you know, whether your choice of tool is a Visio or it's Omnigraffle.

00:13:13.940 --> 00:13:16.660
You spend a lot of time diagramming your network.

00:13:16.660 --> 00:13:21.520
But by the time you're done, it's almost the case that your graph is outdated.

00:13:21.520 --> 00:13:21.980
Right.

00:13:21.980 --> 00:13:23.560
Like the network actually just grows.

00:13:23.560 --> 00:13:32.300
You either add a new VLAN, you add a new box or just whatever it is that it's almost because you take so long and it's not automated.

00:13:32.300 --> 00:13:35.660
You're actually manually graphing these network diagrams.

00:13:35.660 --> 00:13:40.560
So this is especially a big problem with the data center being bigger and bigger.

00:13:40.560 --> 00:13:50.200
So now you have what they call the factory network where the middle is huge, where you have server-to-server communication as opposed to server-to-client communication.

00:13:50.920 --> 00:14:01.180
So this huge network presents a big problem because you're having hundreds of links between each of the network layers and doing it manually is just not an option anymore.

00:14:01.180 --> 00:14:06.260
So I think a couple of years ago, I went out and started thinking about trying to come up with a solution.

00:14:06.260 --> 00:14:13.920
And GraphVis is what I saw where you could actually basically describe your network in terms of a text file.

00:14:13.920 --> 00:14:20.680
So I would say in terms of nodes and edges and say these two nodes should be placed together at the very top tier.

00:14:20.680 --> 00:14:25.800
And these four nodes would be in the middle tier and they should line up and so on and so forth.

00:14:26.060 --> 00:14:28.420
So GraphVis is a great tool for doing that.

00:14:28.420 --> 00:14:45.480
And there's a Python module that's also named GraphVis that allows you to come up with this what they call like a .file where you use the Python module, you generate this .file, you run it through GraphVis and voila, you have this beautiful graph that's up to your liking.

00:14:45.480 --> 00:15:01.480
So the only thing that I guess it's me not being didn't learn it enough that, you know, like coloring the graph, like say if I wanted to color all the spine boxes or if I want to color all the leaf devices in a certain color, I still haven't learned how to do that.

00:15:01.480 --> 00:15:10.980
So sometimes when I do need that colorization, I kind of launch OmniGraphle Pro that you could import that graph and then color it to my liking.

00:15:10.980 --> 00:15:12.480
But it's an awesome tool.

00:15:12.480 --> 00:15:16.080
It allows you to automatically generate your graph.

00:15:16.080 --> 00:15:22.420
So it allows you to have this less of a drift between your actual network versus your diagram.

00:15:22.420 --> 00:15:22.860
Okay.

00:15:22.860 --> 00:15:24.160
Nice.

00:15:24.160 --> 00:15:35.300
Actually, I didn't know about this, the Python module for it or the Python package to use it because GraphVis has been around for a long time.

00:15:35.300 --> 00:15:35.860
That's right.

00:15:35.860 --> 00:15:42.180
But working with the .files, even though the format's pretty easy, it still is something else to learn.

00:15:42.180 --> 00:15:46.960
And yeah, I'll have to check out the Python package because that's pretty cool.

00:15:46.960 --> 00:15:47.960
I like that.

00:15:47.960 --> 00:15:48.600
Yeah.

00:15:48.600 --> 00:15:55.120
So I think just the biggest, I mean, if you want a quick graph, you could use PyGal or Matplotlib, even.

00:15:55.120 --> 00:15:57.180
And you just, you know, quickly draw that graph.

00:15:57.460 --> 00:15:59.980
But GraphVis, to me, is the most powerful.

00:15:59.980 --> 00:16:06.360
And I know, you know, a lot of companies use that for drawing their kind of eye candy kind of graph.

00:16:06.360 --> 00:16:10.920
Like, you know, you've seen the Facebook graph where you just have lines all over the globe and so on.

00:16:10.920 --> 00:16:14.820
I mean, that's the kind of graph that GraphVis is capable of doing really, really quickly.

00:16:14.820 --> 00:16:15.560
Well, yeah.

00:16:15.560 --> 00:16:17.500
I don't know if those are helpful, but yeah.

00:16:17.500 --> 00:16:20.340
Those are helpful for marketing materials.

00:16:20.340 --> 00:16:20.820
Yeah.

00:16:20.820 --> 00:16:26.840
Some of the automated code processors use it for drawing, like, class hierarchies and stuff.

00:16:26.840 --> 00:16:27.800
Right, right.

00:16:27.800 --> 00:16:31.660
I mean, and in a shameless plug for my book, I also use the GraphVis tool.

00:16:31.660 --> 00:16:35.420
I use an example of where you're inside of a...

00:16:35.420 --> 00:16:41.840
So use your Python script to go query your network devices and say, basically to say, tell me who your neighbors are.

00:16:41.840 --> 00:16:44.500
And you just kind of walk layer by layer by layer.

00:16:44.680 --> 00:16:49.920
And you construct a GraphVis file that represents your network in real time.

00:16:49.920 --> 00:16:56.340
So every time you could just execute that script and it will give you your most up-to-date network graph automatically.

00:16:56.340 --> 00:17:08.180
So I think that's kind of a good use case for the tool where, like I said, like the biggest problem that I face with network graphs is there's always this drift between the actual network topology versus the graph that you present.

00:17:08.180 --> 00:17:10.140
And if the graph is wrong, nobody's going to use it.

00:17:10.140 --> 00:17:10.380
Yeah.

00:17:10.380 --> 00:17:15.000
Oh, hey, I just remembered a cool example of the .files.

00:17:15.000 --> 00:17:23.080
One of the projects I work on, one of the things that we log is basically a running state machine example.

00:17:23.080 --> 00:17:32.000
An internal state machine that is basically a state machine as it's running and where we are currently.

00:17:32.000 --> 00:17:48.080
That's being output as a log file in the .format so that if whenever we get like a crash or something, we can take that log file and just throw it through GraphVis and see exactly where we're at visually.

00:17:48.080 --> 00:17:50.420
So even a manager could understand it.

00:17:52.080 --> 00:17:53.040
Yeah, like me.

00:17:53.040 --> 00:17:53.580
Yeah.

00:17:53.580 --> 00:17:54.660
So cool.

00:17:54.660 --> 00:17:55.040
Yeah.

00:17:55.040 --> 00:17:58.760
Last topic I'd like to bring up is PyCascades.

00:17:58.760 --> 00:18:01.520
So this is a new thing this year.

00:18:01.520 --> 00:18:12.340
I think it's, I'm going to get it wrong, but I think it's a whole bunch of different Python groups in the area coming together to try to do a regional Northwest Python conference.

00:18:12.340 --> 00:18:13.860
It is in January.

00:18:13.860 --> 00:18:15.920
It's January 22nd, 23rd.

00:18:15.920 --> 00:18:18.580
And then they're going to do sprints the 24th.

00:18:18.580 --> 00:18:20.000
But I like the format.

00:18:20.000 --> 00:18:21.000
I like what they're doing.

00:18:21.000 --> 00:18:22.820
And the tickets are now very expensive.

00:18:22.820 --> 00:18:25.220
I think they're like 100 bucks or something.

00:18:25.220 --> 00:18:25.520
Okay.

00:18:25.520 --> 00:18:26.300
They're not bad.

00:18:26.540 --> 00:18:31.380
And it's in Vancouver, BC, which I, even though I live in Portland, I've never been there.

00:18:31.380 --> 00:18:33.220
So I'm looking forward to go and seeing that.

00:18:33.220 --> 00:18:37.120
And the call for proposals for talks is the 28th.

00:18:37.120 --> 00:18:39.540
So that's like Monday or something like that.

00:18:39.540 --> 00:18:44.520
So when this comes out, people only have a couple days, but I think there's still slots open.

00:18:44.520 --> 00:18:46.180
So please check it out.

00:18:46.180 --> 00:18:48.880
And if you want to do a talk, local talk, I think this is good.

00:18:48.880 --> 00:18:51.900
The talk slots are 25 minutes too, which is a nice length.

00:18:51.900 --> 00:18:59.700
I think that anybody that has a, if you've got expertise on really anything in your job, 25 minutes shouldn't be too hard to fill.

00:18:59.700 --> 00:19:04.240
So I'm going to submit a couple talks and encourage anybody else to as well.

00:19:04.240 --> 00:19:04.560
Yeah.

00:19:04.560 --> 00:19:07.440
So Vancouver is about three hours away from me as well.

00:19:07.440 --> 00:19:08.740
So I have to check it out.

00:19:08.820 --> 00:19:13.700
I mean, I've never been to the Py Cascades, but it seems like a good format.

00:19:13.700 --> 00:19:15.260
And like you said, tickets are cheap.

00:19:15.260 --> 00:19:15.660
Yeah.

00:19:15.660 --> 00:19:17.840
Well, yeah, it's the first one this year.

00:19:17.840 --> 00:19:18.100
So.

00:19:18.100 --> 00:19:18.640
Oh, okay.

00:19:18.640 --> 00:19:19.160
Got it.

00:19:19.160 --> 00:19:19.480
Yeah.

00:19:19.480 --> 00:19:19.920
Yeah.

00:19:19.920 --> 00:19:22.440
That's our six topics that went by really fast.

00:19:22.440 --> 00:19:23.060
It did.

00:19:23.060 --> 00:19:23.500
It did.

00:19:23.500 --> 00:19:26.860
So tell me a little bit about what's up with you.

00:19:26.860 --> 00:19:29.200
How long has Mastering Python Networking been out?

00:19:29.200 --> 00:19:34.060
So it's been out since June 28th, but only the digital version was out.

00:19:34.060 --> 00:19:37.700
So I think you could start ordering the physical book like mid-July.

00:19:37.940 --> 00:19:39.920
So it's been out for about a month and a half.

00:19:39.920 --> 00:19:41.720
I have the link in the show notes.

00:19:41.720 --> 00:19:43.260
Go check it out if you could.

00:19:43.260 --> 00:19:49.340
I really appreciate any kind of feedbacks or just any criticism, good, bad, ugly, whatever

00:19:49.340 --> 00:19:49.760
it is.

00:19:49.760 --> 00:19:51.560
You know, I'm open to it.

00:19:51.560 --> 00:19:53.060
So I appreciate that.

00:19:53.060 --> 00:19:53.560
Nice.

00:19:53.560 --> 00:19:53.880
Yeah.

00:19:53.880 --> 00:19:54.940
So what's happening with you, Brian?

00:19:54.940 --> 00:19:58.140
Well, this last week was the fixing up the copy.

00:19:58.140 --> 00:20:02.720
I got the copy editing changes for the Pyth test book back.

00:20:02.720 --> 00:20:03.320
Oh, that's right.

00:20:03.320 --> 00:20:05.420
And I just got those in yesterday.

00:20:05.420 --> 00:20:07.120
That's going to be out.

00:20:07.120 --> 00:20:10.240
I'm so excited to get the physical copy out.

00:20:10.240 --> 00:20:11.140
So the physical form.

00:20:11.140 --> 00:20:11.480
Yay!

00:20:11.480 --> 00:20:11.880
Yeah.

00:20:11.880 --> 00:20:13.720
The physical form will be like in October.

00:20:13.720 --> 00:20:19.020
But I'm like, as of like, there's like one minor tweak I got to fix tonight.

00:20:19.020 --> 00:20:21.620
Other than that, my hands are completely off.

00:20:21.620 --> 00:20:21.980
Hopefully.

00:20:22.140 --> 00:20:23.280
I keep saying this every week.

00:20:23.280 --> 00:20:29.440
But once it goes in past copy editing and through the rest of it, it's really an author

00:20:29.440 --> 00:20:33.260
doesn't get to interfere process until it comes out as a hard copy.

00:20:33.260 --> 00:20:37.960
So from start of this project to actually this point, how long did it take for you?

00:20:37.960 --> 00:20:39.540
That's a long answer.

00:20:39.660 --> 00:20:45.260
But my interaction with Pragmatic started, I think, June of last year.

00:20:45.260 --> 00:20:45.560
Right.

00:20:45.560 --> 00:20:46.240
June of 2016.

00:20:46.240 --> 00:20:46.700
Okay.

00:20:46.700 --> 00:20:48.140
So a little over a year.

00:20:48.140 --> 00:20:53.680
But I think the first four or five chapters, I think I rewrote those like four times.

00:20:53.680 --> 00:20:54.040
Yeah.

00:20:54.040 --> 00:20:55.140
To try to get it right.

00:20:55.140 --> 00:20:55.560
Yeah.

00:20:56.060 --> 00:21:01.740
Initially, I was kind of coming along the same lines as the tutorials I have on the

00:21:01.740 --> 00:21:03.040
pythontesting.net.

00:21:03.040 --> 00:21:08.720
But getting a lot of trying to understand how to write in a book format instead of a blog

00:21:08.720 --> 00:21:11.660
format, it was a learning experience for me.

00:21:11.660 --> 00:21:17.520
But still, even after doing all that, I think that, I don't think, looking back, a year isn't

00:21:17.520 --> 00:21:18.100
that terrible.

00:21:18.100 --> 00:21:22.820
But there's one of the other authors, Python authors, is Luciano Romalo.

00:21:22.820 --> 00:21:25.060
I wish I knew which book he wrote.

00:21:25.220 --> 00:21:26.740
It's like, I'm going to get it wrong.

00:21:26.740 --> 00:21:31.560
He was one of the reviewers and his feedback was really influential, but added like two

00:21:31.560 --> 00:21:33.620
or three weeks of my work.

00:21:33.620 --> 00:21:34.240
Yeah.

00:21:34.240 --> 00:21:39.580
For me, I think the biggest issue was always the, not on myself, but on the people around

00:21:39.580 --> 00:21:39.860
me.

00:21:39.860 --> 00:21:44.500
It's almost like, you know, I have to be concentrated and focus on the book.

00:21:44.500 --> 00:21:47.400
And then, so the family has to, you know, kind of go away.

00:21:47.400 --> 00:21:51.980
My wife has taken the burden of taking the kids away from me for the time duration I was

00:21:51.980 --> 00:21:52.520
writing the book.

00:21:52.520 --> 00:21:53.520
So, yeah.

00:21:53.520 --> 00:21:57.360
So, it's definitely both a journey experience, but I'm very excited for you.

00:21:57.360 --> 00:22:00.900
You know, I think when you see that paper copy, you're just going to be like, yay, you know,

00:22:00.900 --> 00:22:02.080
makes it real.

00:22:02.080 --> 00:22:03.400
Yeah.

00:22:03.400 --> 00:22:05.400
It definitely is going to be cool.

00:22:05.400 --> 00:22:10.360
The, like you said, trying to find time within your life and trying to get distractions out

00:22:10.360 --> 00:22:13.820
because like you, I've got a full-time job and kids and family.

00:22:14.040 --> 00:22:18.800
And so, it was quite a few late nights at the coffee shop trying to get away from everything,

00:22:18.800 --> 00:22:20.320
but it'll be out.

00:22:20.320 --> 00:22:22.680
So, that's all we got for today.

00:22:22.680 --> 00:22:25.920
And thanks a ton for helping out, Eric.

00:22:25.920 --> 00:22:27.360
And we'll keep in touch.

00:22:27.360 --> 00:22:28.080
Yeah, absolutely.

00:22:28.080 --> 00:22:28.640
Thanks, Brian.

00:22:28.640 --> 00:22:29.440
This has been fun.

00:22:30.500 --> 00:22:32.260
Thank you for listening to Python Bytes.

00:22:32.260 --> 00:22:35.660
Follow the show on Twitter via at Python Bytes.

00:22:35.660 --> 00:22:39.160
That's Python Bytes as in B-Y-T-E-S.

00:22:39.160 --> 00:22:43.280
Get the full show notes, including links at pythonbytes.fm.

00:22:43.280 --> 00:22:48.660
If you have a news story you'd like featured, visit pythonbytes.fm and send it our way.

00:22:48.660 --> 00:22:51.120
We're always on the lookout for sharing something cool.

00:22:51.120 --> 00:22:52.940
This is Brian Okken.

00:22:52.940 --> 00:22:57.660
On behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with

00:22:57.660 --> 00:22:58.740
your friends and colleagues.

