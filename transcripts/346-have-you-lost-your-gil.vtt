WEBVTT

00:00:00.000 --> 00:00:03.840
Hello and welcome to Python Bytes where we deliver Python news and headlines


00:00:03.840 --> 00:00:05.840
directly to your earbuds.


00:00:05.840 --> 00:00:08.640
This is episode 346.


00:00:08.640 --> 00:00:09.640
I'm Michael Kennedy.


00:00:09.640 --> 00:00:10.800
And I'm Brian Okken.


00:00:10.800 --> 00:00:13.440
And this episode is brought to you by us.


00:00:13.440 --> 00:00:18.080
Check out all of our things and support the show by taking part in them.


00:00:18.080 --> 00:00:21.200
We have our courses, the pytest one Brian wrote, a bunch of other ones.


00:00:21.200 --> 00:00:26.320
I just did the Async Python and MongoDB combo with a little bit of FastAPI and


00:00:26.320 --> 00:00:27.040
load testing in there.


00:00:27.040 --> 00:00:28.400
That's a good one to check out.


00:00:28.400 --> 00:00:37.400
And if you want to be part of the live stream, just Python by set up them slash alive and you'll see the next scheduled one that we got set up for you queued up for you.


00:00:37.400 --> 00:00:45.400
Usually 11am Pacific on a Tuesday, as it is today, but that's not always the case. So be sure to check. It is August, Brian.


00:00:45.400 --> 00:00:53.400
Yeah, the summer is moving along. And so is the Python you have some big news to share. I know, I have a bunch of fun small things, but you got some big ones.


00:00:53.400 --> 00:00:54.340
- You wanna kick us off?


00:00:54.340 --> 00:00:56.620
- So we, I think we've covered this before.


00:00:56.620 --> 00:01:00.540
There was a PEP 703 to make the global interpreter lock


00:01:00.540 --> 00:01:02.880
optional in CPython.


00:01:02.880 --> 00:01:05.800
And well, we have some news from the steering council.


00:01:05.800 --> 00:01:08.200
So the steering council has come back.


00:01:08.200 --> 00:01:14.200
There's a Thomas Wooters posted a steering council notice


00:01:14.200 --> 00:01:15.680
about PEP 703.


00:01:15.680 --> 00:01:17.640
And there's a lot of news in here


00:01:17.640 --> 00:01:21.400
that I think I'll let you help me dig through this.


00:01:21.400 --> 00:01:24.080
So I'm gonna jump down to the,


00:01:24.080 --> 00:01:26.180
so there's some assumptions


00:01:26.180 --> 00:01:28.280
and there's some discussion around this


00:01:28.280 --> 00:01:31.160
gill removal thing,


00:01:31.160 --> 00:01:34.520
but I'm gonna jump to the short and midterm


00:01:34.520 --> 00:01:36.320
and long-term actions.


00:01:36.320 --> 00:01:38.000
So it's gonna be in stages.


00:01:38.000 --> 00:01:40.680
So the idea is in the short term,


00:01:40.680 --> 00:01:45.520
there'll be a no GIL build as an experimental build,


00:01:45.520 --> 00:01:50.520
and that will be part of possibly Python version 3.13


00:01:51.320 --> 00:01:53.380
or 3.14.


00:01:53.380 --> 00:01:55.040
It looks like they're hoping for 3.13,


00:01:55.040 --> 00:01:57.060
but that's, so that, what,


00:01:57.060 --> 00:01:58.840
that's like next year or something like that?


00:01:58.840 --> 00:02:02.380
So, and then, okay, so then we'll have two builds.


00:02:02.380 --> 00:02:03.220
What do we do with that?


00:02:03.220 --> 00:02:07.240
Well, midterm is, is to have,


00:02:07.240 --> 00:02:09.160
and the default is, the default version


00:02:09.160 --> 00:02:12.580
is gonna be the, the, the GIL version, of course,


00:02:12.580 --> 00:02:15.420
just as usual, as things go through it,


00:02:15.420 --> 00:02:18.340
as they figure out, and everybody deals with,


00:02:18.340 --> 00:02:20.080
like the rest of the Python environment,


00:02:20.080 --> 00:02:24.560
community and all the third party libraries figure out how to deal with the no-gil version.


00:02:24.560 --> 00:02:32.160
So in the midterm, there's going to be hopefully community support to help get through this


00:02:32.160 --> 00:02:41.200
no-gil part. And then long-term, the no-gil version becomes the main version of Python,


00:02:41.200 --> 00:02:49.200
and we deprecate the GIL version. So the time frame looks like about... The long-term isn't


00:02:49.200 --> 00:02:52.360
super long, it's like in the five plus year time frame.


00:02:52.360 --> 00:02:55.280
Well, the plus means like, who knows how long it will be.


00:02:55.280 --> 00:02:59.080
But I think that there's a lot of energy around getting this done


00:02:59.080 --> 00:03:01.760
and getting a lot done in the next few years.


00:03:01.760 --> 00:03:07.480
So, yeah, the the time frame of it being an option in three 13,


00:03:07.480 --> 00:03:11.120
I would put it in October of next year of twenty twenty four.


00:03:11.120 --> 00:03:15.040
Yeah. And some some alphas and betas earlier than so.


00:03:15.040 --> 00:03:16.720
Yeah, for sure. It's pretty quick.


00:03:16.720 --> 00:03:20.080
And then, so there's just some caveats in here saying,


00:03:20.080 --> 00:03:22.280
this, everybody's excited about it,


00:03:22.280 --> 00:03:26.680
but they reserve the right to just cancel the whole thing


00:03:26.680 --> 00:03:29.300
if it's really not sound, if it's not working out.


00:03:29.300 --> 00:03:31.240
So, but I don't think that'll happen.


00:03:31.240 --> 00:03:33.040
- Yeah, yeah, we'll see how it goes.


00:03:33.040 --> 00:03:36.040
But we talked about this a little bit on our AMA episode


00:03:36.040 --> 00:03:39.400
about the value and basically what do other languages do?


00:03:39.400 --> 00:03:41.180
Most of them have some constructs,


00:03:41.180 --> 00:03:43.840
but assume that developer is kind of responsible.


00:03:43.840 --> 00:03:46.800
You pointed out that it's not as burdensome


00:03:46.800 --> 00:03:47.900
as people might think,


00:03:47.900 --> 00:03:50.580
because most code is not parallel code


00:03:50.580 --> 00:03:51.720
and you don't have to worry about it.


00:03:51.720 --> 00:03:54.700
It's just kind of a no big deal.


00:03:54.700 --> 00:03:55.900
Don't have to think about it.


00:03:55.900 --> 00:03:57.000
Unless you're writing libraries


00:03:57.000 --> 00:03:59.720
where you know they will be used in a thread safe way,


00:03:59.720 --> 00:04:00.800
you know, things like that,


00:04:00.800 --> 00:04:03.680
then you do have to take that into account.


00:04:03.680 --> 00:04:05.780
I think the trade-off is worth it.


00:04:05.780 --> 00:04:09.000
We're not getting, we're not trending towards a world


00:04:09.000 --> 00:04:12.120
where there are fewer CPU cores, right?


00:04:12.120 --> 00:04:16.160
It's only getting to the point where, you know, like for example, on my Mac,


00:04:16.160 --> 00:04:20.520
if I run some Python program, it has access to 10% of the capacity.


00:04:20.520 --> 00:04:26.920
If I run it on my sim computer, sim racing computer, it has 1/16th access


00:04:26.920 --> 00:04:29.260
to 1/16th of the CPU capacity, right?


00:04:29.260 --> 00:04:32.680
It's just, if you want to work in modern hardware, you really need to


00:04:32.680 --> 00:04:35.320
have access to parallelism when you need it.


00:04:35.320 --> 00:04:37.260
So for me, this is a real positive.


00:04:37.260 --> 00:04:40.580
I think the other thing that we previously covered is Meta said they


00:04:40.580 --> 00:04:45.980
would come along and dedicate three experienced engineering engineer years


00:04:45.980 --> 00:04:49.640
to this project to help make, not just it happen in CPython, but to make it


00:04:49.640 --> 00:04:54.500
happen in the important libraries outside there like NumPy and those types of things.


00:04:54.500 --> 00:04:57.960
So I think for me, this is a super positive.


00:04:57.960 --> 00:05:01.860
It's always been a little bit weird that Python has been so restricted.


00:05:01.860 --> 00:05:05.820
It's also one of those reasons that might, it's like one of those springboards that


00:05:05.820 --> 00:05:10.340
might eject someone from the community that they would otherwise love.


00:05:10.340 --> 00:05:13.220
You might be told, well, we got to get better parallelism.


00:05:13.220 --> 00:05:14.700
So we're not doing this in Python.


00:05:14.700 --> 00:05:17.620
We're going to do it in Go or some other place where you're like,


00:05:17.620 --> 00:05:20.500
kind of like Python, but I guess it's not a fit anymore.


00:05:20.500 --> 00:05:23.300
This would mean that it's a better fit in other places.


00:05:23.300 --> 00:05:24.620
So this is awesome.


00:05:24.620 --> 00:05:25.860
I know it's going to be a lot of work.


00:05:25.860 --> 00:05:30.300
It's going to be another legacy Python versus non-legacy Python sort of deal.


00:05:30.300 --> 00:05:32.020
Hopefully not too bad.


00:05:32.020 --> 00:05:34.220
Maybe having gone through it once,


00:05:34.220 --> 00:05:35.860
the community go, "Oh, we'll do it again."


00:05:35.860 --> 00:05:37.060
It's not as bad as we thought.


00:05:37.060 --> 00:05:40.180
>> Yeah. But I mean, the goal is so that you can have,


00:05:40.180 --> 00:05:46.340
Like if you're just writing a little single threaded thing or a little script or whatever,


00:05:46.340 --> 00:05:48.900
the small sort of things you do with Python also,


00:05:48.900 --> 00:05:53.620
that those things are just as easy as they've always been and just as fast.


00:05:53.620 --> 00:05:54.900
That's what we want.


00:05:54.900 --> 00:05:56.620
>> Yeah, that's certainly the goal.


00:05:56.620 --> 00:05:59.900
I'm just thinking about the code that uses


00:05:59.900 --> 00:06:02.900
the Python API for an important libraries that


00:06:02.900 --> 00:06:07.140
run calls the API release the gill, take the gill.


00:06:07.140 --> 00:06:10.500
When there's no more GIL, does that library become unusable?


00:06:10.500 --> 00:06:13.580
Does that become a no-op and it's just undefined behavior?


00:06:13.580 --> 00:06:17.740
You know what I mean? There will be some consequence in the ecosystem.


00:06:17.740 --> 00:06:20.060
I'm not sure what the knock-on effect will be.


00:06:20.060 --> 00:06:23.900
>> Yeah. It'll be interesting to see how applications


00:06:23.900 --> 00:06:27.820
like Django and things like that deal with it.


00:06:27.820 --> 00:06:30.420
>> Yeah, for sure. Liz out there,


00:06:30.420 --> 00:06:33.220
points out, get through this long-winded breakup with the GIL.


00:06:33.220 --> 00:06:36.820
We have a semi-toxic and ambivalent relationship with the GIL.


00:06:36.820 --> 00:06:39.060
We love it and hate it at the same time, for sure.


00:06:39.060 --> 00:06:40.460
- Yep, definitely.


00:06:40.460 --> 00:06:45.460
- All right, well, Thomas, thanks for the update on this.


00:06:45.460 --> 00:06:46.820
It's gonna be an interesting journey.


00:06:46.820 --> 00:06:48.900
Brian will give us plenty to talk about, so that's cool.


00:06:48.900 --> 00:06:50.460
- Yeah, stick with this.


00:06:50.460 --> 00:06:52.340
Make sure you subscribe to Python Bytes


00:06:52.340 --> 00:06:54.460
to keep up on everything that's going on


00:06:54.460 --> 00:06:56.180
with the Gil breakup.


00:06:56.180 --> 00:06:57.660
- Yeah, exactly.


00:06:57.660 --> 00:06:58.500
It'll be fun.


00:06:58.500 --> 00:07:00.580
All right, I gotta adjust my browser before we switch


00:07:00.580 --> 00:07:01.980
or I'm gonna spoil the joke.


00:07:01.980 --> 00:07:06.300
All right, so I wanna do just a quick one.


00:07:06.300 --> 00:07:09.460
This is not Python specific, but it's super important for web developers.


00:07:09.460 --> 00:07:16.380
So we had Google with Flock, remember that federated cohorts of learning of cohorts.


00:07:16.380 --> 00:07:22.740
And then we had the sandbox groups, which was kind of like that.


00:07:22.740 --> 00:07:26.300
And I don't remember exactly what that was called, but that was another


00:07:26.300 --> 00:07:30.980
technique because the Flock's met with such resistance, like you could really


00:07:30.980 --> 00:07:33.460
do some bad stuff by putting people into these groups.


00:07:33.660 --> 00:07:37.220
And so the, I'm not sure where the sandbox stands,


00:07:37.220 --> 00:07:40.180
but it turns out there's now a new proposal


00:07:40.180 --> 00:07:42.860
to try to get rid of third-party cookies.


00:07:42.860 --> 00:07:44.940
My feeling, I don't know for sure,


00:07:44.940 --> 00:07:47.060
but Google's trying to get rid of third-party cookies


00:07:47.060 --> 00:07:48.540
because they're easy to block


00:07:48.540 --> 00:07:51.260
and it hurts their advertising and their retargeting


00:07:51.260 --> 00:07:53.860
if you can just easily block it by checking a box.


00:07:53.860 --> 00:07:55.180
Like, do you want to be tracked?


00:07:55.180 --> 00:07:56.100
No, thanks.


00:07:56.100 --> 00:07:57.540
You know, in your browser, right?


00:07:57.540 --> 00:07:59.880
Like Firefox does, like Vivaldi does.


00:07:59.880 --> 00:08:00.720
You know what?


00:08:00.720 --> 00:08:02.340
Oddly, I don't remember that setting


00:08:02.340 --> 00:08:04.380
being a default in Chrome that it just offers


00:08:04.380 --> 00:08:05.620
to block the Google network.


00:08:05.620 --> 00:08:06.440
That's interesting.


00:08:06.440 --> 00:08:07.420
Must've been an oversight.


00:08:07.420 --> 00:08:11.320
So anyway, they're now out with a new thing


00:08:11.320 --> 00:08:14.460
and the over on a bleeping computer,


00:08:14.460 --> 00:08:16.700
they say browser developers push back


00:08:16.700 --> 00:08:19.380
against Google's web DRM.


00:08:19.380 --> 00:08:23.580
So basically the different websites can choose


00:08:23.580 --> 00:08:28.580
or be made to choose to force you to verify certain things


00:08:29.180 --> 00:08:32.740
that basically prohibit things like ad blocking,


00:08:32.740 --> 00:08:34.920
like prove that you don't have ad blocking on


00:08:34.920 --> 00:08:36.160
so you can visit my website


00:08:36.160 --> 00:08:38.020
or I'm gonna tell you you can't, right?


00:08:38.020 --> 00:08:39.880
New authentication system could let websites


00:08:39.880 --> 00:08:42.280
block extensions, jailbroken devices,


00:08:42.280 --> 00:08:44.040
and other important things.


00:08:44.040 --> 00:08:45.320
So the headline is,


00:08:45.320 --> 00:08:47.000
"Google has been trying to implement plans


00:08:47.000 --> 00:08:49.440
"to move beyond cookies for years."


00:08:49.440 --> 00:08:51.120
That sounds great, comma,


00:08:51.120 --> 00:08:53.380
"without denying its partners and itself


00:08:53.380 --> 00:08:55.340
"the means to sell targeted ads


00:08:55.340 --> 00:08:58.360
"which form the backbone of the company's revenue."


00:08:58.360 --> 00:08:59.840
This new one comes,


00:08:59.840 --> 00:09:02.760
Proposal to Guarantee User Privacy and Security


00:09:02.760 --> 00:09:06.280
comes at the cost of freedom of functionality,


00:09:06.280 --> 00:09:07.840
aka the open web.


00:09:07.840 --> 00:09:09.600
So there's a bunch of,


00:09:09.600 --> 00:09:12.280
it talks a little bit about how this works,


00:09:12.280 --> 00:09:15.400
but basically the website has to come along


00:09:15.400 --> 00:09:18.560
and decide what browsers it trusts,


00:09:18.560 --> 00:09:20.680
and the web browsers themselves


00:09:20.680 --> 00:09:24.260
have to implement a mechanism to guarantee who they are.


00:09:24.260 --> 00:09:27.120
Not surprisingly, Vivaldi comes along


00:09:27.120 --> 00:09:29.540
as one of the first people to push back against this


00:09:29.540 --> 00:09:31.220
and calling it dangerous.


00:09:31.220 --> 00:09:33.380
If an entity has the power to decide


00:09:33.380 --> 00:09:35.440
which browsers are trusted and which are not,


00:09:35.440 --> 00:09:37.840
they say there's no guarantee


00:09:37.840 --> 00:09:39.640
that they will trust any given browser


00:09:39.640 --> 00:09:42.440
and a new one that comes along would not by default


00:09:42.440 --> 00:09:44.940
not be trusted until it's somehow proven itself


00:09:44.940 --> 00:09:47.040
to the people who run that website.


00:09:47.040 --> 00:09:48.240
And what about the next website?


00:09:48.240 --> 00:09:49.080
What about the next?


00:09:49.080 --> 00:09:49.900
And so on.


00:09:49.900 --> 00:09:51.760
You have all these kind of in an interesting position


00:09:51.760 --> 00:09:55.760
like this, they're just, they use a fork of Chrome


00:09:55.760 --> 00:09:58.640
that's stripped down of a lot of things.


00:09:58.640 --> 00:10:01.680
But when you go to a website or you look at the user agent,


00:10:01.680 --> 00:10:04.840
that's how browsers nowadays tell people who they are, right?


00:10:04.840 --> 00:10:05.840
You can just send whatever you want,


00:10:05.840 --> 00:10:08.120
but it usually is a consistent thing.


00:10:08.120 --> 00:10:11.460
Vivaldi lies and doesn't say, "We're Vivaldi version,"


00:10:11.460 --> 00:10:13.120
I don't know, whatever version we're on.


00:10:13.120 --> 00:10:14.580
It says, "I'm Chrome,"


00:10:14.580 --> 00:10:16.080
and whatever the current version of Chrome is,


00:10:16.080 --> 00:10:17.280
it just says that.


00:10:17.280 --> 00:10:19.400
That way websites don't go,


00:10:19.400 --> 00:10:21.280
"Oh, you're gonna need to use Chrome


00:10:21.280 --> 00:10:24.520
"because your web browser isn't one of those."


00:10:24.520 --> 00:10:27.560
You know, it's like, it actually is internally identical.


00:10:27.560 --> 00:10:30.040
Just, it's got a different name, right?


00:10:30.040 --> 00:10:31.920
So they're in this situation where they kind of lie


00:10:31.920 --> 00:10:35.360
to the world about who they are, the web server world.


00:10:35.360 --> 00:10:37.960
And this would kind of break that as well.


00:10:37.960 --> 00:10:39.360
The Brave team says,


00:10:39.360 --> 00:10:43.800
they don't really care, they're not shipping it.


00:10:43.800 --> 00:10:45.920
We'll see if that's a problem or not.


00:10:45.920 --> 00:10:48.160
And Mozilla doesn't have an official opinion,


00:10:48.160 --> 00:10:49.000
but one of the folks said,


00:10:49.000 --> 00:10:51.480
"The mechanisms to attempt to restrict these choices


00:10:51.480 --> 00:10:54.200
"are harmful to the openness of the web ecosystem."


00:10:54.200 --> 00:10:57.360
And this one's might be interesting to you, Brian.


00:10:57.360 --> 00:11:00.160
Additionally, the use cases listed depend upon the ability


00:11:00.160 --> 00:11:03.200
to detect non-human traffic, which as described,


00:11:03.200 --> 00:11:06.900
would likely obstruct things like web assistive technologies


00:11:06.900 --> 00:11:08.200
or automated testing.


00:11:08.200 --> 00:11:10.280
So anyway, this is one of those things


00:11:10.280 --> 00:11:14.240
that probably deserves enough interest


00:11:14.240 --> 00:11:16.080
from people in the Python web world


00:11:16.080 --> 00:11:18.240
to just voice a little bit of no.


00:11:18.240 --> 00:11:19.280
(Brian laughs)


00:11:19.280 --> 00:11:20.960
- No, the answer is no.


00:11:20.960 --> 00:11:22.720
- Yeah, and yeah.


00:11:22.720 --> 00:11:26.640
So anyway, I, it's, you know, not super actionable.


00:11:26.640 --> 00:11:30.680
It's not a thing that's out there yet, but like the previous two, it's, it's


00:11:30.680 --> 00:11:35.160
the folks behind the web side of Google, the web browser side of Google, the


00:11:35.160 --> 00:11:41.040
web standard side of Google saying, how can we basically change the web so that


00:11:41.040 --> 00:11:45.920
it's, so that we will be able to completely still control and track and sell you.


00:11:45.920 --> 00:11:46.540
Right.


00:11:46.540 --> 00:11:49.320
Right now, the third party cookie thing is not looking good.


00:11:49.320 --> 00:11:53.800
Even, you know, parliaments and Congress have gotten into it and said, Oh, you


00:11:53.800 --> 00:11:54.720
can't have these cookies.


00:11:54.720 --> 00:11:56.400
We have these stupid pop-ups everywhere.


00:11:56.400 --> 00:11:58.000
This would make those all go away.


00:11:58.000 --> 00:12:00.300
And you would just be like part of the machine.


00:12:00.300 --> 00:12:00.960
You know what I mean?


00:12:00.960 --> 00:12:04.340
Uh, this is just the third, the third version of how do we make them part of


00:12:04.340 --> 00:12:05.000
the machine?


00:12:05.000 --> 00:12:07.680
Um, and this one I think is probably the worst.


00:12:07.680 --> 00:12:10.240
Cause not only is it something that would go into Chrome, which was the


00:12:10.240 --> 00:12:14.760
previous two, but this is something that would basically make the websites.


00:12:14.760 --> 00:12:16.360
Reject browsers.


00:12:16.360 --> 00:12:19.000
You might say, Michael, why would a website do this?


00:12:19.200 --> 00:12:23.440
I mean, obviously terrible places like CNN that have like some, like 45


00:12:23.440 --> 00:12:25.260
trackers they put on you every visit.


00:12:25.260 --> 00:12:29.100
You might see why they would do that, but why would, you know, random


00:12:29.100 --> 00:12:30.660
little website not want you to come?


00:12:30.660 --> 00:12:33.960
Well, there could be things like, Oh, do you want to have Google ads on your


00:12:33.960 --> 00:12:38.620
site or any double-click or any ads from any ad network, or we're not going to


00:12:38.620 --> 00:12:42.940
allow you to have them at all unless your website has this, you know, please


00:12:42.940 --> 00:12:46.420
reject the ones that we don't like sort of setting turned on and here's


00:12:46.420 --> 00:12:47.720
the script will help you do that.


00:12:47.980 --> 00:12:49.700
So it's not ideal.


00:12:49.700 --> 00:12:50.420
>> Yeah.


00:12:50.420 --> 00:12:54.060
It's like nobody can make money off of traffic except for me.


00:12:54.060 --> 00:12:57.060
>> Yeah. I mean, it's pretty bad.


00:12:57.060 --> 00:12:59.500
It's a monopoly type of situation.


00:12:59.500 --> 00:13:01.620
One, in the browser space and then two,


00:13:01.620 --> 00:13:02.740
in the ad space,


00:13:02.740 --> 00:13:04.180
they're both sides of that markets.


00:13:04.180 --> 00:13:06.580
It's pretty not good.


00:13:06.580 --> 00:13:09.340
>> I wonder how many people are turning off ads.


00:13:09.340 --> 00:13:13.900
Because I've got Vivaldi running and it's turning off ads.


00:13:13.900 --> 00:13:18.100
And I run into websites that say, you can't read this


00:13:18.100 --> 00:13:20.940
unless you turn off your ad blocker.


00:13:20.940 --> 00:13:23.580
And I'm like, well, I'm not going to read it then.


00:13:23.580 --> 00:13:26.020
I'll go somewhere else.


00:13:26.020 --> 00:13:27.940
But how many people really do?


00:13:27.940 --> 00:13:30.980
I mean, it can't be that many of us.


00:13:30.980 --> 00:13:33.740
I would say for developers, the developer audience,


00:13:33.740 --> 00:13:38.220
looking at when I used to run Google Analytics before I


00:13:38.220 --> 00:13:40.540
decided they were evil and turned them off,


00:13:40.540 --> 00:13:45.040
it was about 40 to 50% of the traffic would not show up.


00:13:45.040 --> 00:13:45.980
- Yeah, okay.


00:13:45.980 --> 00:13:48.340
- So that, I mean, it's not quite all blocking.


00:13:48.340 --> 00:13:49.980
There could be robots, like, you know,


00:13:49.980 --> 00:13:52.660
requests doing a request, like Python requests,


00:13:52.660 --> 00:13:54.520
doing a request that also wouldn't register,


00:13:54.520 --> 00:13:56.140
but that's pretty good.


00:13:56.140 --> 00:13:57.140
And just, you know.


00:13:57.140 --> 00:13:58.620
- Yeah, we'll go back to, like,


00:13:58.620 --> 00:14:00.500
magazine ads never had tracking in them,


00:14:00.500 --> 00:14:01.500
and they did fine.


00:14:01.500 --> 00:14:02.660
- Yeah, exactly.


00:14:02.660 --> 00:14:05.160
So, I mean, it's not just,


00:14:05.160 --> 00:14:07.300
we're trying to be jerks to websites,


00:14:07.300 --> 00:14:08.580
and we don't wanna pay for stuff,


00:14:08.580 --> 00:14:09.620
or we don't wanna look at ads.


00:14:09.620 --> 00:14:11.700
like this headline, how long is this?


00:14:11.700 --> 00:14:14.320
This is just six months ago, or nine months ago.


00:14:14.320 --> 00:14:16.340
Hackers abuse Google ads to spread malware


00:14:16.340 --> 00:14:17.520
in legit software, right?


00:14:17.520 --> 00:14:19.100
There's just stuff over and over.


00:14:19.100 --> 00:14:22.220
Plus there's all the reselling stuff,


00:14:22.220 --> 00:14:26.320
the NSA, CIA stuff, buying.


00:14:26.320 --> 00:14:27.620
I mean, there's just lots of,


00:14:27.620 --> 00:14:29.620
it's not just I don't wanna see ads.


00:14:29.620 --> 00:14:32.360
There's really negative effects to these things,


00:14:32.360 --> 00:14:35.220
and it's honestly a little bit disappointing


00:14:35.220 --> 00:14:36.820
that Google is doing this.


00:14:36.820 --> 00:14:38.300
- Right, and we have advertisers,


00:14:38.300 --> 00:14:42.420
And we put ads on our website for the advertiser.


00:14:42.420 --> 00:14:44.220
And it's, but it's, there's no tracking.


00:14:44.220 --> 00:14:45.060
So.


00:14:45.060 --> 00:14:45.980
- And they're not even blocked


00:14:45.980 --> 00:14:47.740
because we're not trying to send it


00:14:47.740 --> 00:14:49.480
through some creepy network with retargeting.


00:14:49.480 --> 00:14:52.160
We're just, we tell you things that we've,


00:14:52.160 --> 00:14:54.240
we've evaluated and thought you might like


00:14:54.240 --> 00:14:56.680
and people have paid us to help spread the word.


00:14:56.680 --> 00:14:59.480
And you know, there's certainly ways you could do that.


00:14:59.480 --> 00:15:00.320
Right?


00:15:00.320 --> 00:15:02.140
Like this last thing, this page we're on here,


00:15:02.140 --> 00:15:04.100
if it had ads, I don't know if it does or not


00:15:04.100 --> 00:15:05.740
cause I'm blocking them like you.


00:15:05.740 --> 00:15:10.660
But if it did, it could easily show you ads about privacy.


00:15:10.660 --> 00:15:12.220
It could show you ad about browsers.


00:15:12.220 --> 00:15:16.040
There's like certainly relevant ads that can be put on here just based on the


00:15:16.040 --> 00:15:18.560
context of the page, not who is viewing it.


00:15:18.560 --> 00:15:18.840
Right.


00:15:18.840 --> 00:15:22.380
And those work almost as well without all the negative stuff.


00:15:22.380 --> 00:15:27.380
So anyway, one more thing to keep an eye on folks and Christopher on the


00:15:27.380 --> 00:15:32.260
audience says, interesting how Google has lately continuously continuously been


00:15:32.260 --> 00:15:34.540
trying to do the exact opposite of don't be evil.


00:15:34.540 --> 00:15:35.260
Yeah.


00:15:35.260 --> 00:15:38.380
I'm like shareholder value, Christopher shareholder value.


00:15:38.380 --> 00:15:39.220
Let's have it.


00:15:39.220 --> 00:15:41.940
- Well.


00:15:41.940 --> 00:15:43.660
- All right, Brian, over to you.


00:15:43.660 --> 00:15:45.380
- That's pretty rough news, man.


00:15:45.380 --> 00:15:47.180
- So it's okay.


00:15:47.180 --> 00:15:48.500
The last two sounded bad too,


00:15:48.500 --> 00:15:51.560
and they both got, you know, pushed out of existence.


00:15:51.560 --> 00:15:53.180
I suspect this one will as well, but.


00:15:53.180 --> 00:15:56.100
- No, I was just trying to do a rough transition.


00:15:56.100 --> 00:15:58.520
- Oh, that was pretty rough, sorry.


00:15:58.520 --> 00:16:04.500
- Anyway, so there's an article,


00:16:04.500 --> 00:16:05.980
- Oh, I lost the author.


00:16:05.980 --> 00:16:10.500
It's from Mattias, from Mattias.


00:16:10.500 --> 00:16:13.860
How Ruff changed my Python programming habits.


00:16:13.860 --> 00:16:17.400
And we've covered Ruff, I think, several times on the show.


00:16:17.400 --> 00:16:20.860
But I, and I've used it on a lot of projects,


00:16:20.860 --> 00:16:23.860
but I was excited to see this


00:16:23.860 --> 00:16:25.660
because it's some stuff about Ruff


00:16:25.660 --> 00:16:27.820
that I haven't been paying attention to.


00:16:27.820 --> 00:16:29.540
It just works and it's really fast.


00:16:29.540 --> 00:16:31.200
But there's a whole bunch of cool stuff.


00:16:31.200 --> 00:16:34.060
So this, in this article, talks about,


00:16:34.060 --> 00:16:38.380
He talks about using pre-commit or has long been using pre-commit


00:16:38.380 --> 00:16:42.380
and flakeade and black and isorge and all that sort of stuff.


00:16:42.380 --> 00:16:46.860
And I knew that Ruff was going to start picking up some of these extra things,


00:16:46.860 --> 00:16:48.460
but I didn't know how far it went.


00:16:48.460 --> 00:16:53.660
So in this article, he talks about using different rules within Ruff,


00:16:53.660 --> 00:16:57.740
like PyFlakes and PyCodeStyles.


00:16:57.740 --> 00:17:03.860
So that's in the McCabe for cyclomatic complexity checker.


00:17:03.860 --> 00:17:07.200
just to make sure that you don't have too many nested,


00:17:07.200 --> 00:17:09.620
huge loops and different things like that.


00:17:09.620 --> 00:17:10.940
>> I love that, Vacek.


00:17:10.940 --> 00:17:16.200
>> All these things you can turn on just within Ruff.


00:17:16.200 --> 00:17:18.700
I sort, pep8 naming, that's cool.


00:17:18.700 --> 00:17:20.420
PyUpgrade, love that.


00:17:20.420 --> 00:17:23.260
Flake 8 2020, and I'm going to


00:17:23.260 --> 00:17:25.100
shortly show where you can look these up.


00:17:25.100 --> 00:17:27.260
There's a whole bunch of really cool things.


00:17:27.260 --> 00:17:30.660
I really like bugbear, Flake 8 bugbear also.


00:17:30.660 --> 00:17:32.440
So apparently that's been supported


00:17:32.440 --> 00:17:34.120
for almost a year within Ruff.


00:17:34.120 --> 00:17:37.760
Like a Django, Py, Simplify,


00:17:37.760 --> 00:17:40.720
but these are just the ones that this person likes


00:17:40.720 --> 00:17:43.280
or is trying out and using.


00:17:43.280 --> 00:17:45.840
So I went ahead and kept looking.


00:17:45.840 --> 00:17:47.400
So that's this article,


00:17:47.400 --> 00:17:48.880
which is a pretty decent article


00:17:48.880 --> 00:17:50.920
about using how it changes.


00:17:50.920 --> 00:17:52.400
One of the things I wanna highlight,


00:17:52.400 --> 00:17:54.520
and I've been trying to use,


00:17:54.520 --> 00:17:57.240
when I tried to use pre-commit a while ago,


00:17:57.240 --> 00:17:58.720
I haven't been using it lately


00:17:58.720 --> 00:18:01.520
because a lot of these things take a bit.


00:18:01.520 --> 00:18:05.440
They take a bit of time and it's, he writes,


00:18:05.440 --> 00:18:08.240
"There's always a trade-off between development speed,


00:18:08.240 --> 00:18:11.180
"i.e. waiting on git commit is very boring,


00:18:11.180 --> 00:18:12.300
"and strictness."


00:18:12.300 --> 00:18:13.140
And I have to agree.


00:18:13.140 --> 00:18:17.080
So what I've been doing is mostly putting these tests in CI


00:18:17.080 --> 00:18:19.000
and not doing it as part of pre-commit.


00:18:19.000 --> 00:18:22.980
But having it within Ruff is super fast


00:18:22.980 --> 00:18:25.800
and you can go back to using pre-commit with RUF


00:18:25.800 --> 00:18:27.680
and just turn on a bunch of these things.


00:18:27.680 --> 00:18:32.540
So also linking to the rough configuration documentation.


00:18:32.540 --> 00:18:34.880
And for example, all these things


00:18:34.880 --> 00:18:36.380
aren't turned on by default.


00:18:36.380 --> 00:18:41.380
We get, I think the PyCode style warnings.


00:18:41.380 --> 00:18:46.440
Oh, it doesn't turn on PyCode style warnings.


00:18:46.440 --> 00:18:49.940
By default, it turns on PyCode style errors


00:18:49.940 --> 00:18:52.620
and PyFlakes errors.


00:18:52.620 --> 00:18:54.720
So those are turned on by default.


00:18:54.720 --> 00:18:58.100
And you turn it on within the Toml file


00:18:58.100 --> 00:18:59.720
with a select equal,


00:18:59.720 --> 00:19:02.360
and then you have just a string of characters,


00:19:02.360 --> 00:19:06.160
like E for PyCode style, F for PyFlakes.


00:19:06.160 --> 00:19:08.000
And then there's a whole list of these.


00:19:08.000 --> 00:19:11.080
So there's an example of you do B for a bug bear.


00:19:11.080 --> 00:19:13.720
And then there's another page for rules,


00:19:13.720 --> 00:19:18.560
and the rules list all of the different ones.


00:19:18.560 --> 00:19:20.240
So the PyFlakes start with F,


00:19:20.240 --> 00:19:22.000
so if you would add F for that.


00:19:22.000 --> 00:19:26.200
there's a whole ton of these things that I'm excited about


00:19:26.200 --> 00:19:28.880
trying to turn more of them on.


00:19:28.880 --> 00:19:30.760
And I have on one of my projects,


00:19:30.760 --> 00:19:31.920
and it's just super fast.


00:19:31.920 --> 00:19:34.220
So you just like within pre-commit.


00:19:34.220 --> 00:19:36.280
So there, when I try to commit something,


00:19:36.280 --> 00:19:40.360
it'll run these on the files that I've changed


00:19:40.360 --> 00:19:43.360
and try to run, or I can't, I actually don't know.


00:19:43.360 --> 00:19:45.280
It's happening so fast that I don't care.


00:19:45.280 --> 00:19:46.640
Maybe it does the whole thing,


00:19:46.640 --> 00:19:48.280
but it's just super fast now.


00:19:48.280 --> 00:19:49.520
And I don't have to wait to commit,


00:19:49.520 --> 00:19:51.040
but I know the checks are being done.


00:19:51.040 --> 00:19:55.080
super fun. The other bit that I wanted to the one last link I


00:19:55.080 --> 00:20:00.360
want to share is Astral, which is the now company around


00:20:00.360 --> 00:20:06.200
rough has a rough pre commit hook that you can set up for


00:20:06.200 --> 00:20:11.960
git for GitHub actions. So if you just add a this little


00:20:11.960 --> 00:20:18.200
snippet that we have a link to there's just a Astral Astral


00:20:18.200 --> 00:20:25.160
-sh rough pre-commit repository with a version and with a hook.


00:20:25.160 --> 00:20:29.760
That will make it so that your project runs within GitHub Actions also.


00:20:29.760 --> 00:20:30.640
Super fun.


00:20:30.640 --> 00:20:32.320
>> Okay. Yeah, very cool.


00:20:32.320 --> 00:20:36.680
I also like having it set up not as a pre-commit hook,


00:20:36.680 --> 00:20:39.720
but also as a PyCharm plugin.


00:20:39.720 --> 00:20:42.600
>> Yeah. I just misspoke.


00:20:42.600 --> 00:20:43.720
This isn't a GitHub Action,


00:20:43.720 --> 00:20:45.120
it's a pre-commit hook.


00:20:45.120 --> 00:20:47.000
It hooks rough in with pre-commit.


00:20:47.000 --> 00:20:47.960
Sorry about that.


00:20:47.960 --> 00:20:48.920
- Yeah, yeah, nice.


00:20:48.920 --> 00:20:52.300
Well, so that way, as you're typing and you see the stuff,


00:20:52.300 --> 00:20:54.320
it just puts a little squigglies in there


00:20:54.320 --> 00:20:56.640
and suggests sometimes it can even auto fix it,


00:20:56.640 --> 00:20:59.280
you know, Alt + Enter fix this thing by,


00:20:59.280 --> 00:21:01.640
for example, applying strict equals true and the zip.


00:21:01.640 --> 00:21:02.480
- Okay. - Stuff like that.


00:21:02.480 --> 00:21:05.800
- So you just have rough running in PyCharm.


00:21:05.800 --> 00:21:07.240
- And it just runs constantly as you type.


00:21:07.240 --> 00:21:11.040
But again, it's so fast, like, you know, you don't notice.


00:21:11.040 --> 00:21:12.280
- Well, one of the fun-- - What's on 10 cores?


00:21:12.280 --> 00:21:13.200
I could do it over there.


00:21:13.200 --> 00:21:15.800
- One of the fun things with the,


00:21:15.800 --> 00:21:18.480
Having it be a commit hook also is,


00:21:18.480 --> 00:21:21.200
you can set it up to auto-fix.


00:21:21.200 --> 00:21:23.560
So, Ruff isn't just, you have errors,


00:21:23.560 --> 00:21:25.040
but it can find the errors and fix them


00:21:25.040 --> 00:21:26.240
and not even tell you about them.


00:21:26.240 --> 00:21:27.080
It just fixes them.


00:21:27.080 --> 00:21:28.200
- Oh, that's nice, yeah.


00:21:28.200 --> 00:21:29.360
- So like-- - That's pretty cool.


00:21:29.360 --> 00:21:31.720
- Well, I turned on Bugbear, or I can't remember what.


00:21:31.720 --> 00:21:33.880
I turned on one of the extra rules


00:21:33.880 --> 00:21:38.240
and it showed some spaces at the end of the lines.


00:21:38.240 --> 00:21:42.200
And then I added the command to just fix them for me.


00:21:42.200 --> 00:21:43.760
And then it just didn't do it.


00:21:43.760 --> 00:21:46.080
it just would fix them without even telling me,


00:21:46.080 --> 00:21:47.200
which is great.


00:21:47.200 --> 00:21:48.520
- It's way better than complaining.


00:21:48.520 --> 00:21:49.480
(laughing)


00:21:49.480 --> 00:21:50.920
- Yeah, like I sort stuff.


00:21:50.920 --> 00:21:53.440
Well, if I'm just sort them,


00:21:53.440 --> 00:21:54.640
if I got them in the wrong order,


00:21:54.640 --> 00:21:56.360
just reorder them, that's fine.


00:21:56.360 --> 00:21:59.080
- Yeah, and Henry says RUP also has a VS Code


00:21:59.080 --> 00:22:01.000
language server plugin as well.


00:22:01.000 --> 00:22:04.480
So either side of the fence that you sit on for those,


00:22:04.480 --> 00:22:05.320
that's all good.


00:22:05.320 --> 00:22:07.400
All right, onto the next, onto the last.


00:22:07.400 --> 00:22:09.040
All right, onto the last.


00:22:09.040 --> 00:22:13.920
We've discussed FS-spec file system specification,


00:22:13.920 --> 00:22:14.760
I'm guessing.


00:22:14.760 --> 00:22:18.920
And the idea of FS-spec was that what you can do


00:22:18.920 --> 00:22:21.720
is you can have all these different file systems


00:22:21.720 --> 00:22:23.920
that when you would do like open,


00:22:23.920 --> 00:22:26.160
you know, open some file name,


00:22:26.160 --> 00:22:29.940
encoding is this, append, so on, that kind of work.


00:22:29.940 --> 00:22:33.480
You could point it at different places besides the hard drive.


00:22:33.480 --> 00:22:35.000
You could point it at S3.


00:22:35.000 --> 00:22:38.320
You could point it at some kind of web dev


00:22:38.320 --> 00:22:41.660
or some other blob storage, network drive,


00:22:41.660 --> 00:22:44.280
all these different things that you could possibly do,


00:22:44.280 --> 00:22:46.380
and you have exactly the same API


00:22:46.380 --> 00:22:48.720
as just opening a standard file, right?


00:22:48.720 --> 00:22:52.920
So that was like with open as file stream,


00:22:52.920 --> 00:22:54.720
da da da da, you go do your thing, right?


00:22:54.720 --> 00:22:59.320
Well, a lot of us are fans of using Pathlib, right?


00:22:59.320 --> 00:23:01.880
So create the path, you do like a cool thing,


00:23:01.880 --> 00:23:04.680
you do the slash, the division is overridden


00:23:04.680 --> 00:23:06.580
to look like you can separate the file names


00:23:06.580 --> 00:23:07.420
and all that, right?


00:23:07.420 --> 00:23:11.920
So there's this thing called Universal Pathlib now that's,


00:23:11.920 --> 00:23:14.420
it looks like this project was created two months ago.


00:23:14.420 --> 00:23:16.120
And this was sent in to us.


00:23:16.120 --> 00:23:18.980
So I wanna say thank you to Justin Flannery.


00:23:18.980 --> 00:23:22.080
Remember he had that camping CLI thing


00:23:22.080 --> 00:23:24.520
that we could find campsites that are sold out and stuff.


00:23:24.520 --> 00:23:25.520
- Yeah.


00:23:25.520 --> 00:23:27.220
- And so we talked about that a few months ago.


00:23:27.220 --> 00:23:30.980
So he sent this in and said, look, FS spec is awesome,


00:23:30.980 --> 00:23:33.740
but now there's a Universal Pathlib


00:23:33.740 --> 00:23:36.680
and it extends the built-in Pathlib.


00:23:36.680 --> 00:23:42.560
So the pathlib module dot path API to use basically FS spec, which is awesome.


00:23:42.560 --> 00:23:47.360
And so if you want to talk to things that are not file systems, but you really like


00:23:47.360 --> 00:23:50.320
the path class, then you can use this one.


00:23:50.320 --> 00:23:53.640
They're saying, you know, import it as upath.


00:23:53.640 --> 00:23:56.920
You could also just import it as path if you want, as long as you're not mixing it up with


00:23:56.920 --> 00:23:58.480
the other and just treat it the same, right?


00:23:58.480 --> 00:24:03.680
So for example, you could say upath instead of giving it a directory name or a file name,


00:24:03.680 --> 00:24:10.300
You would say like S3 colon, you know, slash slash some path to your S3 information slash


00:24:10.300 --> 00:24:11.300
some file.


00:24:11.300 --> 00:24:12.300
Right.


00:24:12.300 --> 00:24:13.300
And you could ask, what is the name?


00:24:13.300 --> 00:24:14.300
What is the suffix?


00:24:14.300 --> 00:24:15.300
Does it exist?


00:24:15.300 --> 00:24:18.000
And read it and so on, just like you would with a normal file.


00:24:18.000 --> 00:24:19.920
But now this thing is in S3.


00:24:19.920 --> 00:24:25.040
We have file, we have Azure storage, we have HTTP and HTTPS.


00:24:25.040 --> 00:24:29.720
We have Hadoop, Google cloud, S3, web dev.


00:24:29.720 --> 00:24:32.560
And one, I think that would be really cool for testing Brian is memory.


00:24:32.560 --> 00:24:33.560
Yeah.


00:24:33.560 --> 00:24:38.280
create a file, work with it, make sure you pass this path-like object to other APIs,


00:24:38.280 --> 00:24:41.360
let it do things, and then it just goes away when it goes away, right?


00:24:41.360 --> 00:24:42.080
That's pretty cool.


00:24:42.080 --> 00:24:44.960
>> Yeah, I love using memory file systems for testing.


00:24:44.960 --> 00:24:46.160
>> Yeah, absolutely.


00:24:46.160 --> 00:24:51.880
Like, SQLite has one memory colon, I think it is, or maybe two colons on the front.


00:24:51.880 --> 00:24:53.200
The same thing for the database.


00:24:53.200 --> 00:24:54.360
But yeah, this is really handy.


00:24:54.360 --> 00:24:56.800
Not to, you might be wondering, like, why would I ever use memory?


00:24:56.800 --> 00:24:58.840
Because you don't want to touch the file system.


00:24:58.840 --> 00:25:00.880
You just need to pass a file, and there you go.


00:25:00.880 --> 00:25:02.360
So, super simple.


00:25:02.360 --> 00:25:05.760
there's a little example notebook that I blasted past somewhere.


00:25:05.760 --> 00:25:09.000
People can check that out if they want to just see how to use it.


00:25:09.000 --> 00:25:10.400
A bunch of examples play with it.


00:25:10.400 --> 00:25:12.600
So if you are working with these alternate file systems,


00:25:12.600 --> 00:25:14.140
this is definitely worth giving it a look.


00:25:14.140 --> 00:25:15.600
>> Yeah. Cool. Nice.


00:25:15.600 --> 00:25:17.120
>> All right. Well, I have no extras.


00:25:17.120 --> 00:25:18.800
How extra are you feeling today?


00:25:18.800 --> 00:25:20.880
>> I guess I don't really have any extras either.


00:25:20.880 --> 00:25:23.440
Just thinking something funny might be nice.


00:25:23.440 --> 00:25:28.440
>> I think so. I know that you do a lot of C these days still,


00:25:28.440 --> 00:25:30.120
and I've traditionally done some,


00:25:30.120 --> 00:25:31.360
although not too much lately.


00:25:31.360 --> 00:25:37.160
So I want to have both a joke and something to help people think about pointers and pointers to pointers.


00:25:37.160 --> 00:25:40.560
Because Python is all about pointers, even though we don't realize it, right?


00:25:40.560 --> 00:25:43.960
When you create a variable, it points out to a thing, you got a list,


00:25:43.960 --> 00:25:47.860
it doesn't hold the value of the thing that's in the list, it holds the pointers,


00:25:47.860 --> 00:25:49.960
that point to the things that are the values.


00:25:49.960 --> 00:25:51.060
So here's the joke.


00:25:51.060 --> 00:25:56.160
There's an int just written out in memory, just out in space floating there.


00:25:56.160 --> 00:26:01.260
And there's an int star, so a pointer to the int, it's like an anime character pointing out to it.


00:26:01.260 --> 00:26:03.020
And then what is a pointer to a pointer?


00:26:03.020 --> 00:26:05.260
Well, just the anime character pointing at the


00:26:05.260 --> 00:26:07.460
int star that points over to the other one.


00:26:07.460 --> 00:26:08.260
What do you think of this?


00:26:08.260 --> 00:26:11.020
I think it's just a great, I agree with the comment.


00:26:11.020 --> 00:26:13.100
It's just a great way to describe pointers.


00:26:13.100 --> 00:26:14.860
Actually, somebody pointing.


00:26:14.860 --> 00:26:18.620
Yeah, it seems completely non-scary.


00:26:18.620 --> 00:26:20.260
Where as thinking about int star star,


00:26:20.260 --> 00:26:23.460
avoid star star, something like that is pretty crazy.


00:26:23.460 --> 00:26:27.020
Well, it's got 18,000 likes on,


00:26:27.020 --> 00:26:27.780
I don't know what it's on.


00:26:27.780 --> 00:26:29.260
What website is this, Brian?


00:26:29.260 --> 00:26:34.260
- The company formerly known as Twitter?


00:26:34.260 --> 00:26:39.100
- Yes, and yet what is the title of the pages


00:26:39.100 --> 00:26:41.980
so and so on Twitter, the domain is twitter.com,


00:26:41.980 --> 00:26:46.080
but the logo is X and I don't know what a mess this is.


00:26:46.080 --> 00:26:47.620
But anyway, the joke is funny.


00:26:47.620 --> 00:26:52.020
- Well, and the icons, there's an X for closing,


00:26:52.020 --> 00:26:53.660
which is still confusing.


00:26:53.660 --> 00:26:56.580
- Yeah, there's two Xs in my tab up there.


00:26:56.580 --> 00:26:57.420
- Yeah.


00:26:57.420 --> 00:26:59.220
- The left X and the right X.


00:26:59.220 --> 00:27:04.100
>> Yeah. Hopefully nobody renames their company greater than,


00:27:04.100 --> 00:27:07.380
greater than, and weird things like that.


00:27:07.380 --> 00:27:08.780
>> Yeah, absolutely.


00:27:08.780 --> 00:27:11.740
>> Hey, I want to add one more funny thing.


00:27:11.740 --> 00:27:14.900
This is not really programming related,


00:27:14.900 --> 00:27:17.980
but I've been watching a lot of streaming,


00:27:17.980 --> 00:27:20.340
catching up on some TV shows.


00:27:20.340 --> 00:27:23.660
I'm watching, I can't even remember the name of it now,


00:27:23.660 --> 00:27:25.780
Catching Up, and I want to skip through the beginning.


00:27:25.780 --> 00:27:27.600
Have you ever done that on streaming shows,


00:27:27.600 --> 00:27:28.800
you skip the intro?


00:27:28.800 --> 00:27:33.020
>> Right. I saw this the other day, it just cracked me up.


00:27:33.020 --> 00:27:35.940
Apparently, it's rude to poke someone in the head,


00:27:35.940 --> 00:27:37.340
the forehead, and say,


00:27:37.340 --> 00:27:40.300
"Skip intro" when they start talking to you.


00:27:40.300 --> 00:27:42.980
I know people like this.


00:27:42.980 --> 00:27:43.820
>> I heard the first time.


00:27:43.820 --> 00:27:46.540
>> Yeah. Okay, can you skip the preamble and


00:27:46.540 --> 00:27:49.620
just go to whatever you wanted to talk to me about?


00:27:49.620 --> 00:27:54.100
>> Pretty funny. I imagine it probably is a little rude,


00:27:54.100 --> 00:27:56.620
but sometimes you're in a hurry.


00:27:56.620 --> 00:28:00.060
>> You've heard it three times already, so get to the end.


00:28:00.060 --> 00:28:02.260
>> Awesome talking with you as usual.


00:28:02.260 --> 00:28:03.700
>> Indeed. Thanks for being here.


00:28:03.700 --> 00:28:06.060
Thank you to everyone who is listening


00:28:06.060 --> 00:28:08.140
and everyone who participated in the live stream.


00:28:08.140 --> 00:28:10.100
See you all next time.

