WEBVTT

00:00:00.001 --> 00:00:04.980
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.980 --> 00:00:11.980
your earbuds. This is episode 346. I'm Michael Kennedy. And I'm Brian Okken. And this episode

00:00:11.980 --> 00:00:17.860
is brought to you by us. Check out all of our things and support the show by taking part in

00:00:17.860 --> 00:00:22.520
them. We have our courses, the pytest one Brian wrote, a bunch of other ones. I just did the async

00:00:22.520 --> 00:00:27.580
Python and MongoDB combo with a little bit of FastAPI and load testing in there. That's a good

00:00:27.580 --> 00:00:32.120
one to check out. And if you want to be part of the live stream, just Python by set up him slash

00:00:32.120 --> 00:00:38.680
live and you'll see the next scheduled one we got set up for you queued up for you. Usually 11am

00:00:38.680 --> 00:00:44.380
Pacific on a Tuesday as it is today, but that's not always the case. So be sure to check. It is August,

00:00:44.380 --> 00:00:50.740
Brian. Yeah, the summer is moving along. And so is the Python. You have some big news to share. I know

00:00:50.740 --> 00:00:54.060
I have a bunch of fun, small things, but you got some big ones. You want to kick us off?

00:00:54.060 --> 00:00:59.760
Yeah. So we, I think we've covered this before. There was a PEP 703 to make the global interpreter

00:00:59.760 --> 00:01:06.820
lock optional in CPython. And well, we have some news from the steering council. So the steering

00:01:06.820 --> 00:01:15.320
council has come back. There's a Thomas Wooters posted a steering council notice about PEP 703.

00:01:15.600 --> 00:01:21.900
And there's a lot of news in here that I think I'll let you help me dig through this. So I'm going

00:01:21.900 --> 00:01:28.220
to jump down to the, so there's, there's some assumptions and some discussion around this

00:01:28.220 --> 00:01:37.160
Gill removal thing, but I'm going to jump to the short and midterm and longterm actions. So it's going

00:01:37.160 --> 00:01:44.520
to be in stages. So the idea is in the short term, there'll be a no GIL build as an experimental build.

00:01:44.520 --> 00:01:54.120
And that will be a part of possibly Python, their version 313 or 314. It looks like they're hoping

00:01:54.120 --> 00:02:00.920
for 313, but that's so that what that's like next year or something like that. So and then, okay. So

00:02:00.920 --> 00:02:07.500
then we'll have two builds. What do we do with that? Well, midterm is there is to have, and the

00:02:07.500 --> 00:02:13.540
default is the default version is going to be the, the, the GIL version, of course, just as usual,

00:02:13.540 --> 00:02:19.300
as things go through it, as they figure out and everybody deals with like the rest of the Python

00:02:19.300 --> 00:02:24.000
environment and the community and all the third-party libraries figure out how to deal with the no Gill

00:02:24.000 --> 00:02:30.060
version. So in the midterm is there's going to be a community, hopefully community support to help,

00:02:30.060 --> 00:02:38.120
help get through this no GIL part. And, and then longterm, the no GIL version becomes the main

00:02:38.120 --> 00:02:44.240
Gill or the main, not the main Gill, the main version of Python. And we deprecate the GIL version. So

00:02:44.240 --> 00:02:52.240
the timeframe looks like about the longterm isn't super long. It's like in the five plus year timeframe.

00:02:52.240 --> 00:02:57.740
Well, the plus means like, who knows how long it will be. But I think that there's a lot of energy

00:02:57.740 --> 00:03:04.440
around getting this done and getting a lot done in the next few years. So yeah, the, the timeframe of

00:03:04.440 --> 00:03:12.640
it being an option in three 13, I would put it in October of next year of 2024. Yeah. And some,

00:03:12.640 --> 00:03:18.320
some alphas and betas earlier then. So yeah, for sure. That's pretty quick. And then, so there's just some

00:03:18.320 --> 00:03:25.640
caveats in here saying they're this, everybody's excited about it, but they, they reserve the right to

00:03:25.640 --> 00:03:30.560
just cancel the whole thing. If it's really not sound, if it's not working out. So, but I don't

00:03:30.560 --> 00:03:34.760
think that will happen. Yeah. Yeah. We'll see how it goes. But we talked about this a little bit on

00:03:34.760 --> 00:03:40.540
our AMA episode about the value and basically what the other languages do. Most of them have some

00:03:40.540 --> 00:03:45.860
constructs, but assume that developer is kind of responsible. You pointed out that it's not as

00:03:45.860 --> 00:03:51.400
burdensome as people might think, because most code is not parallel code and you don't have to worry

00:03:51.400 --> 00:03:56.480
about it. It's just kind of a, no, no big deal. You don't have to think about it unless you're writing

00:03:56.480 --> 00:04:01.020
libraries where, you know, that will be used in a thread safe way, you know, things like that, then,

00:04:01.020 --> 00:04:06.860
then you do have to take that into account. I think the trade-off is worth it. We're not getting,

00:04:07.240 --> 00:04:13.160
we're not trending towards a world where there are fewer CPU cores, right? Yeah. It's only getting to

00:04:13.160 --> 00:04:18.120
the point where, you know, like for example, on, on my Mac, if I run some Python program, it has access

00:04:18.120 --> 00:04:26.820
to 10% of the capacity. If I run it on my SIM computer, SIM racing computer, it has one 16th access

00:04:26.820 --> 00:04:31.580
to one 16th of the CPU capacity, right? It's just, if you want to work in modern hardware,

00:04:31.580 --> 00:04:37.180
you really need to have access to parallelism when you need it. So for me, this is a real positive.

00:04:37.180 --> 00:04:42.560
I think the other thing that we previously covered is meta said they will come along and dedicate three

00:04:42.560 --> 00:04:49.000
experienced engineering engineer years to this project to help make, not just it happen in CPython,

00:04:49.000 --> 00:04:54.460
but to make it happen in the important libraries outside there, like NumPy and those types of things.

00:04:54.460 --> 00:05:00.840
So I think for me, this is a super positive. It's always been a little bit weird that Python has been

00:05:00.840 --> 00:05:05.680
so restricted. It's also one of those reasons that might, it's like one of those springboards

00:05:05.680 --> 00:05:11.660
that might eject someone from the community that they would otherwise love, right? You might be told,

00:05:11.660 --> 00:05:15.900
well, we got to get better parallelism. So we're not doing this in Python. We're going to do it and go

00:05:15.900 --> 00:05:20.060
or some other place where you're like, kind of like Python, but I guess it's not a fit anymore,

00:05:20.060 --> 00:05:25.120
right? This would mean that it's a better fit in other places. So this is awesome. I know it's

00:05:25.120 --> 00:05:30.100
going to be a lot of work. It's going to be another legacy Python versus non-legacy Python sort of deal.

00:05:30.100 --> 00:05:34.900
hopefully not too bad. Maybe having gone through it once, the community will go,

00:05:34.900 --> 00:05:36.940
oh, we'll do it again. It's not as bad as we thought.

00:05:36.940 --> 00:05:41.300
Yeah. But I mean, like the goal is so that you can have, like, if you're just writing a little,

00:05:41.300 --> 00:05:47.880
a little single threaded thing or a little script or whatever, the small sort of things you do with

00:05:47.880 --> 00:05:53.220
Python also, that those things are just as easy as they are. They've always been and just as fast.

00:05:53.220 --> 00:05:54.600
That's what we want.

00:05:55.000 --> 00:06:01.740
Yeah. That's certainly the goal. I'm just thinking about the code that uses the Python API for important

00:06:01.740 --> 00:06:08.760
libraries that calls the API, release the gill, take the gill. When there's no more gill, does that

00:06:08.760 --> 00:06:14.100
library become unusable? Does that become a no-op and it's just undefined behavior? You know what I mean?

00:06:14.220 --> 00:06:19.340
Like there will be some kind of consequence in the ecosystem. I just, I'm not sure what the knock-on

00:06:19.340 --> 00:06:19.940
effect will be.

00:06:19.940 --> 00:06:26.940
Yeah. Yeah. And it'll be interesting to see how, like, applications like Django and things like that

00:06:26.940 --> 00:06:27.540
deal with it.

00:06:27.940 --> 00:06:33.040
Yeah, for sure. And Liz out there points out, get through this long-winded breakup with a gill.

00:06:33.040 --> 00:06:37.960
We have a semi-toxic and ambivalent relationship with a gill. We love it and hate it at the same

00:06:37.960 --> 00:06:38.760
time. For sure.

00:06:38.760 --> 00:06:39.800
Yep. Definitely.

00:06:39.800 --> 00:06:46.360
All right. Well, Thomas, thanks for the updates on this. Yeah. And it's going to be an interesting

00:06:46.360 --> 00:06:48.660
journey. Brian, it'll give us plenty to talk about. So that's cool.

00:06:48.660 --> 00:06:54.180
Yeah. Stick with this. Make sure you subscribe to Python Bytes to keep up on everything that's going

00:06:54.180 --> 00:07:00.140
on with the GIL breakup. Yeah, exactly. It'll be fun. All right. I got to adjust my browser before

00:07:00.140 --> 00:07:06.800
we switch or I'm going to spoil the joke. All right. So I want to do just a quick one. This is not

00:07:06.800 --> 00:07:12.640
Python specific, but it's super important for web developers. So we had Google with flock. Remember

00:07:12.640 --> 00:07:21.500
that federated, cohorts of, learning of cohorts. Oh yeah. And then we had the sandbox groups,

00:07:21.500 --> 00:07:25.160
which was kind of like that. And I, I don't remember exactly what that was called, but that was

00:07:25.160 --> 00:07:31.800
another technique because the flocks met with such resistance. Like you could really do some bad stuff

00:07:31.800 --> 00:07:37.940
by putting people into these groups. And so the, I'm not sure where the sandbox stands, but it turns out

00:07:37.940 --> 00:07:44.760
there's now a new proposal, to try to get rid of third-party cookies. My feeling, I don't know for sure,

00:07:44.760 --> 00:07:49.380
but Google is trying to get rid of third-party cookies because they're easy to block and it hurts

00:07:49.380 --> 00:07:53.740
their advertising and they're retargeting. If you can just easily block it by checking a box,

00:07:53.740 --> 00:07:58.480
like, do you want to be tracked? No, thanks. You know, in your browser, right? Like Firefox does,

00:07:58.480 --> 00:08:03.460
like Vivaldi does. You know what? Oddly, I don't remember that setting being a default in Chrome that

00:08:03.460 --> 00:08:07.140
it just offers to block the Google network. That's interesting. It must've been an oversight.

00:08:07.140 --> 00:08:14.340
So anyway, this, they're now out with a new thing and the, over on a bleeping computer,

00:08:14.340 --> 00:08:21.580
they say browser developers push back against Google's web DRM. So basically the different websites

00:08:21.580 --> 00:08:30.800
can choose or be made to choose to force you to verify certain things, that, basically

00:08:30.800 --> 00:08:35.700
prohibit things like ad blocking, like prove that you don't have ad blocking on. So you can visit my

00:08:35.700 --> 00:08:40.120
website or I'm going to tell you, you can't write new authentication system could let websites block

00:08:40.120 --> 00:08:45.880
extensions, jailbroken devices, and other important things. So the, the headline is Google has been

00:08:45.880 --> 00:08:52.240
trying to implement plans to move beyond cookies for years. That sounds great. Comma without denying its

00:08:52.240 --> 00:08:57.240
partners and itself, the means to sell targeted ads, which form the backbone of the company's revenue.

00:08:57.240 --> 00:09:04.780
This new one comes, proposal to guarantee user privacy and security comes to the, the cost of

00:09:04.780 --> 00:09:11.200
freedom of functionality, AKA the open web. So there's a bunch of, it talks a little bit

00:09:11.200 --> 00:09:18.460
about how this works, but basically the website has to come along and decide what browsers it trusts.

00:09:18.460 --> 00:09:25.200
And the web browsers themselves have to implement a mechanism to guarantee who they are. Not surprisingly,

00:09:25.200 --> 00:09:30.780
Vivaldi comes along as one of the first people to push back against this and calling it dangerous.

00:09:30.780 --> 00:09:36.700
If an entity has the power to decide which browsers are trusted and which are not, they say there's no

00:09:36.700 --> 00:09:42.300
guarantee that they will trust any given browser. And a new one that comes along would not by default,

00:09:42.300 --> 00:09:47.500
not be trusted until it's somehow proven itself to the people who run that website. And what about the

00:09:47.500 --> 00:09:51.820
next website? What about the next? And so on, you have, of all these kind of an interesting position like

00:09:51.820 --> 00:09:59.660
this, they, they're just, they use a fork of Chrome that's stripped down of a lot of things. But when you go

00:09:59.660 --> 00:10:04.540
to a website or you look at the user agent, that's how browsers nowadays tell people who they are, right?

00:10:04.540 --> 00:10:09.740
And just send whatever you want. But it usually is a consistent thing. Vivaldi lies and doesn't say,

00:10:09.740 --> 00:10:21.660
we're Vivaldi version. I don't know, whatever version we're on. It says, I'm Chrome. And whatever the current version of Chrome is, it just says that. That way websites don't go, oh, you're going to need to use Chrome because,

00:10:21.660 --> 00:10:27.020
your, your web browser isn't one of those. You know, it's like, it actually is internally identical.

00:10:27.020 --> 00:10:51.500
Just, it's got a different name, right? So they're in this situation where they kind of lie to the world about who they are, the web server world. And this would kind of break that as well. The Brave team says, the Brave team says, they don't really care. They're not shipping it. We'll see if that's a problem or not. And Mozilla doesn't have an official opinion. But one of the folks said the mechanisms to attempt to restrict these choices are

00:10:51.500 --> 00:11:07.980
are harmful to the openness of the web ecosystem. And this one's might be interesting to Brian. Additionally, the use cases listed depend upon the ability to detect non-human traffic, which as described would likely obstruct things like web assistive technologies or automated testing.

00:11:07.980 --> 00:11:17.980
So anyway, this is one of those things that probably deserves enough interest from people in the Python web world to just voice a little bit of no.

00:11:17.980 --> 00:11:19.980
No, the answer is no.

00:11:19.980 --> 00:11:40.040
Yeah. And yeah. So anyway, I, it's, you know, not super actionable. It's not a thing that's out there yet. But like the previous two, it's, it's the folks behind the web side of Google, the web browser side of Google, the web standard side of Google saying, how can we basically change the web?

00:11:40.040 --> 00:11:56.320
So that it's so that we will be able to completely still control and track and sell you right right now. The third party cookie thing is not looking good. Even, you know, parliaments and Congress have gotten into it and said, Oh, you can't have these cookies. We have these stupid pop-ups everywhere.

00:11:56.460 --> 00:12:07.680
This would make those all go away and you would just be like part of the machine. You know what I mean? this is just the third, the third version of how do we make them part of the machine? and this one I think is probably the worst.

00:12:07.680 --> 00:12:23.940
Cause not only is it something that would go into Chrome, which was the previous two, but this is something that would basically make the websites reject browsers. You might say, Michael, why would a website do this? I mean, obviously terrible places like CNN that have some like 45 trackers.

00:12:23.940 --> 00:12:37.620
They put on you every visit, you might see why they would do that, but why would, you know, random little website not want you to come? Well, there could be things like, Oh, do you want to have Google ads on your site or any double click or any ads from any ad network?

00:12:37.620 --> 00:12:47.740
Well, we're not going to allow you to have them at all. Unless your website has this, you know, please reject the ones that we don't like sort of setting turned on. And here's the script will help you do that.

00:12:47.940 --> 00:12:54.780
So it's not ideal. Yeah. It's like, nobody can make money off of traffic except for me. sort of thing.

00:12:54.780 --> 00:13:06.500
Yeah. It's, it's, I mean, it's pretty bad. It's kind of a monopoly type of situation. One in the browser space and then two in the ad space. They're kind of both sides of that markets. It's, it's pretty, pretty much not good.

00:13:06.500 --> 00:13:18.500
I wonder how many people are turning off ads, because I mean, I've gone, I've got Vivaldi running and it's turning off ads and I, I run into websites that say I did. You can't read this unless you turn on.

00:13:18.500 --> 00:13:30.500
Turn on if turn off your ad blocker and I'm like, well, I'm not going to read it then. I'm like, I'll go somewhere else. yeah. But how many people really do? I mean, it's can't be that many, many of us.

00:13:30.500 --> 00:13:44.720
I would say for developers, the developer audience looking at when I used to run Google analytics before I decided they were evil and turn them off. It was about 40 to 50% of the traffic would not show up.

00:13:44.720 --> 00:13:45.660
Yeah. Okay.

00:13:45.660 --> 00:13:56.820
So that is not quite all blocking. There could be robots like, you know, requests doing a request like Python requests, doing a request that also wouldn't register, but that's, that's pretty good. And just, you know.

00:13:56.820 --> 00:14:01.140
Yeah. We'll go back to like magazine ads, never had tracking in them and they did fine.

00:14:01.140 --> 00:14:10.620
Yeah, exactly. So, I mean, it's not just, we're trying to be jerks to websites and we don't want to pay for stuff or we don't look at ads like this headline.

00:14:10.620 --> 00:14:17.440
How long is this? This is just, you know, six months ago or nine months ago, hackers abuse Google ads to spread malware in legit software. Right.

00:14:17.440 --> 00:14:24.320
There's just stuff over and over. Plus what, you know, there's all like the reselling stuff, the NSA, CIA stuff.

00:14:25.060 --> 00:14:36.620
Yeah. Buying your, I mean, there's just lots of, it's not just, I don't want to see ads. There's really negative effects to these things. And it's honestly, it's a little bit disappointing that Google is doing this.

00:14:36.620 --> 00:14:41.900
Right. And we have advertisers and we put ads on our website for the advertiser.

00:14:41.900 --> 00:14:42.060
Absolutely.

00:14:42.380 --> 00:14:44.460
And it's, but it's, there's no tracking. So.

00:14:44.460 --> 00:14:54.160
And they're not even blocked because we're not trying to send it through some creepy network with retargeting. We're just, we tell you things that we've, we've evaluated and thought you might like.

00:14:54.160 --> 00:15:05.080
And people paid us to help spread the word. And, you know, there's certainly ways you could do that. Right. Like this last thing, there's this page we're on here. If it had ads, I don't know if it does or not, cause I'm blocking them like you.

00:15:05.720 --> 00:15:18.840
But if it did, it could easily show you ads about privacy. It could show you ad about browsers. There's like certainly relevant ads that can be put on here just based on the context of the page, not who is viewing it. Right.

00:15:18.880 --> 00:15:34.500
And those work almost as well without all the negative stuff. So anyway, one more thing to keep an eye on folks. And Christopher on the audience says, interesting how Google has lately continuously, continuously been trying to do the exact opposite of don't be evil.

00:15:34.500 --> 00:15:35.220
Yeah.

00:15:35.220 --> 00:15:38.920
Shareholder value, Christopher, shareholder value. Let's have it.

00:15:38.920 --> 00:15:41.320
Well.

00:15:41.320 --> 00:15:42.860
All right, Brian, over to you.

00:15:42.860 --> 00:15:45.100
That's pretty rough news, man.

00:15:45.480 --> 00:15:52.900
No, it's okay. The last two sounded bad, too. And they both got, you know, pushed out of existence. I suspect this one will as well.

00:15:52.900 --> 00:15:55.100
No, I was just trying to do a rough transition.

00:15:55.100 --> 00:15:58.200
Oh, that was pretty rough.

00:15:58.200 --> 00:16:09.240
Anyway, so there's an article. Oh, I lost the author. It's from Matthias.

00:16:09.240 --> 00:16:35.480
From Matthias. How rough changed my Python programming habits. And we've covered rough, I think, several times on the show. But I, I and I've used it on a lot of projects. But, but I, I was excited to see this because it's some stuff about rough that I've, I haven't been paying attention to. It just works. And it's really fast. But there's a whole bunch of cool stuff. So this, in this article talks about, he talks about using pre commit.

00:16:35.480 --> 00:16:48.360
Pre commit. Or has long been using pre commit. And flake eight and black and I sort of all that sort of stuff. And I knew that rough was going to start picking up some of these extra things. But I didn't know how far it went.

00:16:48.360 --> 00:17:09.600
So in this article, he talks about using different rules within, within rough, like, like pie flakes and pie code styles. So that's, and the McCabe for cyclomatic complexity checker, just to make sure that you don't have too many nested, huge loops and different things like that.

00:17:09.600 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.480
I love that magic.

00:17:10.480 --> 00:17:10.980
I love that magic.

00:17:10.980 --> 00:17:15.900
So all these things you can turn on within, just within, within rough.

00:17:15.900 --> 00:17:17.900
I sort, PEP 8 naming.

00:17:17.900 --> 00:17:18.600
That's cool.

00:17:18.600 --> 00:17:19.360
Pi upgrade.

00:17:19.360 --> 00:17:20.020
Love that.

00:17:20.020 --> 00:17:22.480
Flake, flake eight 2020.

00:17:22.480 --> 00:17:25.040
And I'm going to shortly show where you can look these up.

00:17:25.040 --> 00:17:27.100
So there's a whole bunch of really cool things.

00:17:27.100 --> 00:17:30.300
I really like bug bear, flake eight bug bear also.

00:17:30.300 --> 00:17:33.860
So apparently that's been supported for almost a year within rough.

00:17:33.860 --> 00:17:40.560
Um, like a Django pie simplify, but this, these are just the, the ones that this person likes

00:17:40.560 --> 00:17:42.660
or has, is he trying out and using.

00:17:42.660 --> 00:17:45.480
Um, so I went ahead and kept looking.

00:17:45.480 --> 00:17:50.560
So that's, that's this article, which is a pretty decent article about using how it changes.

00:17:50.560 --> 00:17:55.440
One of the things I want to highlight, and I've been trying to use, I, when I tried to use

00:17:55.440 --> 00:18:00.820
pre-commit a while ago, I haven't been using it lately because a lot of these things take a

00:18:00.820 --> 00:18:01.000
bit.

00:18:01.000 --> 00:18:07.000
Uh, they take a bit of time and it's, he writes, there's always a trade-off between

00:18:07.000 --> 00:18:08.000
development speed.

00:18:08.000 --> 00:18:12.100
I.e. waiting on get commit is very boring and strictness.

00:18:12.100 --> 00:18:13.000
And I have to agree.

00:18:13.000 --> 00:18:18.920
So what I've been doing is mostly putting these tests in CI and not doing it as part of pre-commit,

00:18:18.920 --> 00:18:22.840
but having it within, within rough is super fast.

00:18:22.840 --> 00:18:27.340
And you can go back to using pre-commit with rough and just turn on a bunch of these things.

00:18:27.340 --> 00:18:32.340
So, link also linking to the rough configuration, documentation.

00:18:32.340 --> 00:18:36.340
And for example, these aren't, all these things aren't turned on by default.

00:18:36.340 --> 00:18:42.340
We get, I think the air, the, PY code style warnings.

00:18:42.340 --> 00:18:44.340
Oh, it does not turn on.

00:18:44.340 --> 00:18:46.340
It doesn't turn on PY code style warnings.

00:18:46.340 --> 00:18:51.340
It by default, it turns on PY code style errors and PY flakes, errors.

00:18:51.340 --> 00:18:56.340
So those, those are turned on by default and you turn it on with this, like, in within

00:18:56.340 --> 00:18:59.340
the toml file with like a select equal.

00:18:59.340 --> 00:19:05.340
And then you have like just a, a string of characters like E for, PY code style F for PY flakes.

00:19:05.340 --> 00:19:07.340
And then there's a whole list of these.

00:19:07.340 --> 00:19:10.340
Um, so there's an example of you do B for like a bug bear.

00:19:10.340 --> 00:19:16.340
And then there's another page for, rules, where, in the rules list, all of the

00:19:16.340 --> 00:19:17.340
different, different ones.

00:19:17.340 --> 00:19:19.340
So like the PY flakes start with F.

00:19:19.340 --> 00:19:25.340
So if you would add F for that, there's a whole ton of these things, that I'm excited about

00:19:25.340 --> 00:19:28.340
trying to turn, turn more of them on.

00:19:28.340 --> 00:19:31.340
And I have on one of my projects and it's just super fast.

00:19:31.340 --> 00:19:33.340
So you just like within pre-commit.

00:19:33.340 --> 00:19:39.340
So there, when I try to commit something, it'll run these on the files that have changed,

00:19:39.340 --> 00:19:42.340
and try to run, or I can't, I actually don't know.

00:19:42.340 --> 00:19:43.340
It's happening so fast.

00:19:43.340 --> 00:19:44.340
I don't care.

00:19:44.340 --> 00:19:47.340
Maybe it does the whole thing, but it's just super fast now.

00:19:47.340 --> 00:19:50.340
And I don't have to wait to commit, but I know the checks are being done.

00:19:50.340 --> 00:19:51.340
Super fun.

00:19:51.340 --> 00:19:57.340
The other bit that I wanted to, the one last link I want to share is, astral, which is

00:19:57.340 --> 00:20:05.340
the now company, around rough, has a rough pre-commit, hook that you can set

00:20:05.340 --> 00:20:08.340
up for get, for GitHub actions.

00:20:08.340 --> 00:20:16.340
So, if you just add a, this little snippet, that we have a link to, there's just a,

00:20:16.340 --> 00:20:23.340
astral, astral dash sh rough pre-commit repository with a river, with a version and, with

00:20:23.340 --> 00:20:28.340
the hook and you would, that will make it so that your project runs within GitHub actions

00:20:28.340 --> 00:20:29.340
also.

00:20:29.340 --> 00:20:30.340
So super fun.

00:20:30.340 --> 00:20:31.340
Okay.

00:20:31.340 --> 00:20:32.340
Yeah.

00:20:32.340 --> 00:20:33.340
Very cool.

00:20:33.340 --> 00:20:34.340
I also like having it set up.

00:20:34.340 --> 00:20:39.340
So not as a pre-commit hook, but also as a high charm plugin.

00:20:39.340 --> 00:20:40.340
Yeah.

00:20:40.340 --> 00:20:41.340
Oh, right.

00:20:41.340 --> 00:20:42.340
I just misspoke.

00:20:42.340 --> 00:20:43.340
This isn't a GitHub action.

00:20:43.340 --> 00:20:44.340
It's a pre-commit hook.

00:20:44.340 --> 00:20:46.340
So it's, it hooks rough in with pre-commit.

00:20:46.340 --> 00:20:47.340
Sorry about that.

00:20:47.340 --> 00:20:48.340
Yeah.

00:20:48.340 --> 00:20:49.340
Yeah.

00:20:49.340 --> 00:20:50.340
Nice.

00:20:50.340 --> 00:20:53.340
Well, so that way as you're typing and you see the stuff, it just puts a little squiggly

00:20:53.340 --> 00:20:57.340
send there, there and suggests sometimes it can even auto fix it, you know, alt enter,

00:20:57.340 --> 00:21:01.340
fix this thing by, for example, applying strict equals true and the zip.

00:21:01.340 --> 00:21:02.340
Okay.

00:21:02.340 --> 00:21:05.340
So you just have rough rough running in, in PyCharm.

00:21:05.340 --> 00:21:07.340
And it just runs constantly as you type.

00:21:07.340 --> 00:21:08.340
But again, it's so fast.

00:21:08.340 --> 00:21:09.340
Like, you know, you don't notice.

00:21:09.340 --> 00:21:12.340
Well, one of the fun 10 cores, I can do it over there.

00:21:12.340 --> 00:21:18.340
One of the things with the, with the having it be a commit hook also is, you can set

00:21:18.340 --> 00:21:20.340
it up to, to auto fix.

00:21:20.340 --> 00:21:24.340
So rough isn't just, you have errors, but it can find the errors and fix them and not even

00:21:24.340 --> 00:21:25.340
tell you about them.

00:21:25.340 --> 00:21:26.340
It just fixes.

00:21:26.340 --> 00:21:27.340
Oh, that's nice.

00:21:27.340 --> 00:21:28.340
Yeah.

00:21:28.340 --> 00:21:33.340
So like, well, I turned on bug bear or I can't remember what I turned on one of the extra

00:21:33.340 --> 00:21:38.340
rules and it showed some, some, like some spaces at the end of the lines.

00:21:38.340 --> 00:21:42.340
And then I added the command to just fix them for me.

00:21:42.340 --> 00:21:43.340
And then it just didn't do it.

00:21:43.340 --> 00:21:46.340
It just would fix them without even telling me, which is great.

00:21:46.340 --> 00:21:48.340
It's way better than complaining.

00:21:48.340 --> 00:21:49.340
Yeah.

00:21:49.340 --> 00:21:50.340
Like I sort stuff.

00:21:50.340 --> 00:21:55.340
Well, if I, if I, if I'm just, just sort them, if I got them in the wrong order, just

00:21:55.340 --> 00:21:56.340
like, you know, I'm going to do it and that's fine.

00:21:56.340 --> 00:21:57.340
Yeah.

00:21:57.340 --> 00:22:00.340
And Henry says rough also has a VS Code language server plugin as well.

00:22:00.340 --> 00:22:04.340
So either side of the fence that you sit on for those, that's all good.

00:22:04.340 --> 00:22:05.340
All right.

00:22:05.340 --> 00:22:06.340
Onto the next, onto the last.

00:22:06.340 --> 00:22:07.340
All right.

00:22:07.340 --> 00:22:08.340
Onto the last.

00:22:08.340 --> 00:22:14.340
We've discussed F S back file system specification, I'm guessing.

00:22:14.340 --> 00:22:20.340
And the idea of F S spec was that what you can do is you can have all these different

00:22:20.340 --> 00:22:25.340
different file systems that when you would do like open, you know, open some file name

00:22:25.340 --> 00:22:27.340
encoding as this append.

00:22:27.340 --> 00:22:33.340
So on that kind of work, you could point it at different places besides the hard drive.

00:22:33.340 --> 00:22:34.340
You could point it S three.

00:22:34.340 --> 00:22:41.340
You could point it at a, some kind of web dev or some other, you know, blob storage network

00:22:41.340 --> 00:22:43.340
drive, all these different things that you could possibly do.

00:22:43.340 --> 00:22:47.340
And you have exactly the same API as just opening a standard file.

00:22:47.340 --> 00:22:48.340
Right.

00:22:48.340 --> 00:22:53.340
So that was like with open as file stream, dah, dah, dah, dah.

00:22:53.340 --> 00:22:54.340
You go do your thing.

00:22:54.340 --> 00:22:55.340
Right.

00:22:55.340 --> 00:22:58.340
Well, a lot of us are fans of using, pathlib, right?

00:22:58.340 --> 00:23:00.340
So create the path.

00:23:00.340 --> 00:23:01.340
You do like a cool thing.

00:23:01.340 --> 00:23:06.340
You do the, the slash, the division is overridden to look like you can separate the file names

00:23:06.340 --> 00:23:07.340
and all that.

00:23:07.340 --> 00:23:07.340
Right.

00:23:07.340 --> 00:23:10.340
So there's this thing called universal pathlib.

00:23:10.340 --> 00:23:15.340
Now that's, it looks like this project was created two months ago and this was sent in to us.

00:23:15.340 --> 00:23:18.340
So I want to say thank you to Justin Flannery.

00:23:18.340 --> 00:23:23.340
Remember he had that, that camping CLI thing that we could find campsites that are sold out and stuff.

00:23:23.340 --> 00:23:24.340
Yeah.

00:23:24.340 --> 00:23:26.340
Uh, and so we talked about that a few months ago.

00:23:26.340 --> 00:23:35.340
So he sent this in and said, look, FS spec is awesome, but now there's a universal pathlib and it extends, the built-in pathlib.

00:23:35.340 --> 00:23:41.340
So the pathlib module dot path API to use basically FS spec, which is awesome.

00:23:41.340 --> 00:23:49.340
And so if you want to talk to things that are not file systems, but you really like the path class, then you can use this one.

00:23:49.340 --> 00:23:52.340
Either saying, you know, import it as you path.

00:23:52.340 --> 00:23:57.340
You could also just import it as path if you want, for long as you're not mixing it up with the other and just treat it the same.

00:23:57.340 --> 00:23:58.340
Right.

00:23:58.340 --> 00:24:10.340
So for example, you could say you path, instead of giving it a directory name or a file name, you would say like S3 colon, you know, slash, slash, some path to your S3 information slash some file.

00:24:10.340 --> 00:24:11.340
Right.

00:24:11.340 --> 00:24:12.340
And you could ask, what is the name?

00:24:12.340 --> 00:24:13.340
What is the suffix?

00:24:13.340 --> 00:24:14.340
Does it exist?

00:24:14.340 --> 00:24:15.340
And read it.

00:24:15.340 --> 00:24:17.340
And so on, just like you would with a normal file.

00:24:17.340 --> 00:24:19.340
But now this thing is in S3.

00:24:19.340 --> 00:24:20.340
We have file.

00:24:20.340 --> 00:24:22.340
We have Azure storage.

00:24:22.340 --> 00:24:24.340
We have HTTP and HTTPS.

00:24:24.340 --> 00:24:28.340
We have Hadoop, Google cloud, S3, web dev.

00:24:28.340 --> 00:24:32.340
And one, I think that would be really cool for testing Brian is memory.

00:24:32.340 --> 00:24:33.340
Yeah.

00:24:33.340 --> 00:24:33.340
Right.

00:24:33.340 --> 00:24:38.340
You want to create a file, work with it, make sure, you know, pass this path like object to other APIs, let it do things.

00:24:38.340 --> 00:24:40.340
And then it just goes away when it goes away.

00:24:40.340 --> 00:24:41.340
Right.

00:24:41.340 --> 00:24:42.340
That's pretty cool.

00:24:42.340 --> 00:24:43.340
Yeah.

00:24:43.340 --> 00:24:44.340
I love using memory file systems for testing.

00:24:44.340 --> 00:24:45.340
Yeah, absolutely.

00:24:45.340 --> 00:24:51.340
Like SQLite has one memory colon, I think it is, or maybe two colons on the front.

00:24:51.340 --> 00:24:52.340
Same thing for the database.

00:24:52.340 --> 00:24:54.340
But yeah, this is really handy.

00:24:54.340 --> 00:24:56.340
Not to be, you might be wondering like, why would I ever use memory?

00:24:56.340 --> 00:24:58.340
Because you don't want to touch the file system.

00:24:58.340 --> 00:25:00.340
You just need to pass a file and there you go.

00:25:00.340 --> 00:25:01.340
So super simple.

00:25:01.340 --> 00:25:05.340
There's a little example notebook that I blasted past somewhere.

00:25:05.340 --> 00:25:08.340
People can check that out if they want to just see how to use it.

00:25:08.340 --> 00:25:08.340
Okay.

00:25:08.340 --> 00:25:09.340
A bunch of examples play with it.

00:25:09.340 --> 00:25:13.340
So if you are working with these alternative file systems, this is definitely worth giving it a look.

00:25:13.340 --> 00:25:14.340
Yeah.

00:25:14.340 --> 00:25:14.340
Cool.

00:25:14.340 --> 00:25:15.340
Nice.

00:25:15.340 --> 00:25:16.340
All right.

00:25:16.340 --> 00:25:17.340
Well, I have no extras.

00:25:17.340 --> 00:25:18.340
How extra are you feeling today?

00:25:18.340 --> 00:25:20.340
I guess I don't really have any extras either.

00:25:20.340 --> 00:25:23.340
Just thinking something funny might be nice.

00:25:23.340 --> 00:25:24.340
I think so.

00:25:24.340 --> 00:25:31.340
And I know that you've done, you do a lot of C these days still, and I've traditionally done some, although not too much lately.

00:25:31.340 --> 00:25:36.340
So I want to have both a joke and something to help people think about pointers and pointers to pointers.

00:25:36.340 --> 00:25:40.340
Because Python is all about pointers, even though we don't realize it, right?

00:25:40.340 --> 00:25:42.340
When you create a variable, it points out to a thing.

00:25:42.340 --> 00:25:43.340
You've got a list.

00:25:43.340 --> 00:25:46.340
It doesn't hold the value of the thing that's in the list.

00:25:46.340 --> 00:25:49.340
It holds the pointers that point to the things that are the values.

00:25:49.340 --> 00:25:50.340
So here's the joke.

00:25:50.340 --> 00:25:55.340
There's an int just written out in memory, just out in space floating there.

00:25:55.340 --> 00:25:58.340
And there's an int star to a pointer to the int.

00:25:58.340 --> 00:26:00.340
It's like an anime character pointing out to it.

00:26:00.340 --> 00:26:02.340
And then what is a pointer to a pointer?

00:26:02.340 --> 00:26:07.340
Well, it's just the anime character pointing at the int star that points over to the other one.

00:26:07.340 --> 00:26:08.340
What do you think of this?

00:26:08.340 --> 00:26:10.340
I think it's just a great, I agree with the comment.

00:26:10.340 --> 00:26:12.340
It's just a great way to describe pointers.

00:26:12.340 --> 00:26:14.340
Actually, somebody pointing.

00:26:14.340 --> 00:26:15.340
Yeah.

00:26:15.340 --> 00:26:16.340
Yeah.

00:26:16.340 --> 00:26:18.340
It seems completely non-scary.

00:26:18.340 --> 00:26:23.340
Whereas thinking about int star star avoid star star, something like that is pretty crazy.

00:26:23.340 --> 00:26:27.340
Well, it's got 18,000 likes on, I don't know what it's on.

00:26:27.340 --> 00:26:29.340
What website is this, Brian?

00:26:29.340 --> 00:26:34.340
The company formerly known as Twitter?

00:26:34.340 --> 00:26:35.340
Yes.

00:26:35.340 --> 00:26:38.340
And yet what is the title of the pages?

00:26:38.340 --> 00:26:41.340
So and so on Twitter and the domain is twitter.com.

00:26:41.340 --> 00:26:45.340
But the logo is X and I don't know what a mess this is.

00:26:45.340 --> 00:26:47.340
But anyway, the joke is funny.

00:26:47.340 --> 00:26:53.340
Well, the next, so the, and the icons, there's an X for closing, which is still confusing.

00:26:53.340 --> 00:26:56.340
Yeah, there's two X's in my tab up there.

00:26:56.340 --> 00:26:57.340
Yeah.

00:26:57.340 --> 00:26:58.340
The left X and the right X.

00:26:58.340 --> 00:26:59.340
Yeah.

00:26:59.340 --> 00:27:07.340
We just, hopefully nobody renames their company greater than greater than and weird things like that.

00:27:07.340 --> 00:27:08.340
Yeah, absolutely.

00:27:08.340 --> 00:27:11.340
So, hey, I want, want to add one more funny thing.

00:27:11.340 --> 00:27:20.340
This is not really programming related, but I've been watching a lot of like streaming, catching up on some TV shows.

00:27:20.340 --> 00:27:21.340
I'm watching.

00:27:21.340 --> 00:27:25.340
I can't remember the name of it now catching up and I want to skip through the beginning.

00:27:25.340 --> 00:27:27.340
Have you ever done that on streaming shows?

00:27:27.340 --> 00:27:28.340
You skip the intro.

00:27:28.340 --> 00:27:29.340
Right.

00:27:29.340 --> 00:27:31.340
So, I saw this the other day.

00:27:31.340 --> 00:27:32.340
It just cracked me up.

00:27:32.340 --> 00:27:39.340
Apparently, it's rude to poke someone in the head, the forehead and say, skip intro when they start talking to you.

00:27:39.340 --> 00:27:43.340
I know people heard the first hour.

00:27:43.340 --> 00:27:44.340
Yeah.

00:27:44.340 --> 00:27:48.340
Like I, okay, can you skip the preamble and just go to the, whatever you wanted to talk to me about.

00:27:48.340 --> 00:27:49.340
So.

00:27:49.340 --> 00:27:51.340
Pretty funny.

00:27:51.340 --> 00:27:56.340
I imagine it probably is a little, little rude, but you know, sometimes you're in a hurry.

00:27:56.340 --> 00:27:57.340
Yeah.

00:27:57.340 --> 00:27:58.340
You've heard it three times already.

00:27:58.340 --> 00:27:59.340
So get to the end.

00:27:59.340 --> 00:28:01.340
Awesome talking with you as usual.

00:28:01.340 --> 00:28:02.340
Indeed.

00:28:02.340 --> 00:28:03.340
Thanks for being here.

00:28:03.340 --> 00:28:07.340
Thank you to everyone who is listening and everyone who participated in the live stream.

00:28:07.340 --> 00:28:08.340
See you all next time.

