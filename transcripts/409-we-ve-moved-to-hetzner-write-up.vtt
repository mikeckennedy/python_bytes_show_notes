WEBVTT

00:00:00.001 --> 00:00:04.860
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.860 --> 00:00:11.260
This is episode 409, recorded November 13th, 2024.

00:00:11.260 --> 00:00:12.560
And I'm Brian Okken.

00:00:12.560 --> 00:00:13.580
And I'm Michael Kennedy.

00:00:13.580 --> 00:00:18.100
And this episode, we've got a couple sponsors, Scout APM and Codeium.

00:00:18.100 --> 00:00:22.060
Thank you both of them and listen to their spots later in the show.

00:00:22.060 --> 00:00:26.360
If you'd like to connect with us, connect on Fostadon.org.

00:00:26.360 --> 00:00:29.360
We're M. Kennedy, Brian Okken, and Python Bytes.

00:00:29.660 --> 00:00:32.740
But any Mastodon client gets to us.

00:00:32.740 --> 00:00:35.320
And now also Blue Sky.

00:00:35.320 --> 00:00:37.400
So I'm trying out Blue Sky.

00:00:37.400 --> 00:00:39.960
So we'll drop a link to that as well.

00:00:39.960 --> 00:00:50.240
And if you're listening to this in a podcast player, you can join us live sometime on YouTube at pythonbytes.fm/live.

00:00:50.240 --> 00:00:59.020
And no need to jot down notes while you're listening, because you can just sign up to be a friend of the show and sign up for our newsletter.

00:00:59.320 --> 00:01:02.660
And we will send all the links to you into your inbox every week.

00:01:02.660 --> 00:01:03.260
That's right.

00:01:03.260 --> 00:01:04.600
The Bytes come to you.

00:01:04.600 --> 00:01:05.660
You don't have to come to them.

00:01:05.660 --> 00:01:06.740
Yeah, exactly.

00:01:06.740 --> 00:01:13.240
So I like to, I think we should jump into the terminal this week a little bit.

00:01:13.240 --> 00:01:13.560
Yeah.

00:01:13.560 --> 00:01:13.980
What do you think?

00:01:14.680 --> 00:01:16.820
We absolutely should jump into the terminal.

00:01:16.820 --> 00:01:18.880
And I just want to point out, I got a lot of stuff to cover.

00:01:18.880 --> 00:01:22.120
I'm on my third cup of coffee, and it's 730 in the morning.

00:01:22.120 --> 00:01:22.760
Let's go.

00:01:22.760 --> 00:01:25.380
We'll start with something from Will McCoogan.

00:01:25.380 --> 00:01:29.940
It's been a while since we've spoken about rich and textual, but the drought is over.

00:01:29.940 --> 00:01:31.580
Folks, the drought is over.

00:01:31.580 --> 00:01:35.920
This is something I saw Will throw out as a proof of concept.

00:01:35.920 --> 00:01:36.500
Okay.

00:01:36.760 --> 00:01:37.380
Have you seen this, Brian?

00:01:37.380 --> 00:01:38.720
No.

00:01:38.720 --> 00:01:39.900
So it's pretty cool.

00:01:39.900 --> 00:01:43.680
Imagine, if you will, as I have actually been.

00:01:43.680 --> 00:01:44.500
If you will.

00:01:46.580 --> 00:01:54.680
Imagine, if you will, that you are SSH'd into your server for a lot of the recent days working on something.

00:01:54.680 --> 00:01:55.420
Hang on.

00:01:55.420 --> 00:02:01.300
You know, you've got tree, which is a command that will show sort of a hierarchical view of things.

00:02:01.300 --> 00:02:08.600
But wouldn't it be nice if there was something kind of graphical that you could use to explore and interact with the file system?

00:02:08.600 --> 00:02:09.040
Yeah.

00:02:09.040 --> 00:02:12.380
A little bit like Mac Finder or something like Windows Explorer?

00:02:12.380 --> 00:02:14.460
Well, that is what this terminal tree is.

00:02:14.460 --> 00:02:17.380
So the idea here is, well, I didn't like that.

00:02:17.380 --> 00:02:27.480
So the idea is that you run this in the shell and it gives you a tree-like view of, here we go, that's a better one.

00:02:27.480 --> 00:02:31.300
It gives you a tree-like view that you can explore with your keyboard.

00:02:31.300 --> 00:02:32.620
It also says mouse.

00:02:32.620 --> 00:02:36.480
I don't think that works on Linux, but it works, it seems to work on macOS.

00:02:36.480 --> 00:02:42.520
Anyway, maybe with your mouse, certainly with your keyboard, that you can sort of open up the tree and go around.

00:02:42.520 --> 00:02:49.780
You can find a file, you can hit P to preview it in a little side tab thing, like side by side with the tree.

00:02:49.780 --> 00:02:56.680
You can jump from different roots of this tree by just hitting G and then typing directory, you know, slash apps, enter.

00:02:56.680 --> 00:02:59.920
And then you're just exploring whatever your apps folder is or whatever.

00:02:59.920 --> 00:03:00.560
What do you think?

00:03:00.560 --> 00:03:02.480
I think this looks pretty nice, actually.

00:03:02.480 --> 00:03:03.860
Pretty great.

00:03:04.060 --> 00:03:06.680
Yeah, I was using it over SSH and it's pretty nice.

00:03:06.680 --> 00:03:10.140
Now, to be clear, it is a, where does it say this?

00:03:10.140 --> 00:03:10.840
I don't know.

00:03:10.840 --> 00:03:15.680
Will says, I don't know if this will become a standalone tool or folded back into textual or nothing.

00:03:15.680 --> 00:03:18.520
But here, if you're interested, fork it, play with it, let me know.

00:03:18.520 --> 00:03:26.040
The one thing I was talking to Will about when I saw this was, wow, wouldn't it be cool to be able to specify a starting directory?

00:03:26.200 --> 00:03:27.940
Like, create me a tree of this place.

00:03:27.940 --> 00:03:31.320
Right now, it just jumps into your home directory and then you've got to navigate from there.

00:03:31.320 --> 00:03:38.560
Also, hat tip to, hey, let's run this using UV with a zero install, zero download.

00:03:38.560 --> 00:03:42.060
You don't even download textual or this file or anything.

00:03:42.060 --> 00:03:47.100
You just run UVX from the Git repo and you specify a Python version.

00:03:47.100 --> 00:03:49.460
I suppose you could probably drop that, actually.

00:03:49.640 --> 00:03:53.760
And then the dash Q so it doesn't output all the, hey, we're creating a virtual environment and all that.

00:03:53.760 --> 00:03:54.380
Oh, nice.

00:03:54.380 --> 00:03:54.880
Right?

00:03:54.880 --> 00:03:57.920
That's the terminal tree's entry point to this package.

00:03:57.920 --> 00:04:05.300
So, yeah, I think if you're looking for a quick way to explore your file system over SSH, this is pretty nice.

00:04:05.300 --> 00:04:07.320
Or even in the terminal on your own machine.

00:04:07.320 --> 00:04:09.520
Although I find that, you know, some people I'm sure would love that.

00:04:09.520 --> 00:04:10.860
It's not how I roll.

00:04:10.860 --> 00:04:15.460
I just use binder or an IDE or whatever it is that I'm working with there.

00:04:15.460 --> 00:04:17.380
But over SSH, this is handy.

00:04:17.380 --> 00:04:17.920
Nice.

00:04:17.920 --> 00:04:18.300
Cool.

00:04:18.300 --> 00:04:19.140
Mm-hmm.

00:04:19.140 --> 00:04:19.980
All right.

00:04:19.980 --> 00:04:23.700
I actually love all the terminal apps or the textual apps.

00:04:23.700 --> 00:04:25.180
Yeah, there's a lot of good ones.

00:04:25.180 --> 00:04:25.660
Yeah.

00:04:25.660 --> 00:04:29.320
I feel like we might be heading in that direction again.

00:04:29.320 --> 00:04:29.880
Yeah.

00:04:29.880 --> 00:04:40.620
So another recent find around textual is this beautiful API client called Posting.

00:04:40.620 --> 00:04:42.600
And I got this from Darren Burns.

00:04:42.600 --> 00:04:45.300
And actually, it's his project, Darren Burns.

00:04:45.300 --> 00:04:47.580
And isn't he part of the textual team?

00:04:47.580 --> 00:04:48.680
I think so.

00:04:48.680 --> 00:04:51.300
If not, my memory is serving me incorrectly.

00:04:51.300 --> 00:04:52.340
But okay.

00:04:52.340 --> 00:04:56.300
So this is a gorgeous client.

00:04:56.520 --> 00:05:00.040
And it's an open source terminal app.

00:05:00.140 --> 00:05:01.880
And it's all color coded.

00:05:01.880 --> 00:05:04.700
And you've got colorization for the output.

00:05:04.700 --> 00:05:08.460
On the left-hand side, you've got collections, which is cool.

00:05:08.460 --> 00:05:10.040
You can hide that as well.

00:05:10.040 --> 00:05:17.380
But different ways, like if you're jumping to different APIs, like if you're trying different APIs out, you can have them up in different collections.

00:05:17.380 --> 00:05:23.000
But I started this quickly.

00:05:23.000 --> 00:05:23.620
So I'll give it a shot.

00:05:23.620 --> 00:05:26.260
So I went down and said, get started.

00:05:26.620 --> 00:05:33.540
And similar to like you said, the top installation instructions were to use UVTool.

00:05:34.180 --> 00:05:39.800
So that's UVTool is, and I'm using it now on lots of things.

00:05:39.800 --> 00:05:42.160
I think it's a little easier than PIPX.

00:05:42.160 --> 00:05:44.060
So that's what I'm using.

00:05:44.060 --> 00:05:47.860
So UVTool install, Python 312, posting.

00:05:47.860 --> 00:05:51.380
And posting will get you started with this.

00:05:51.380 --> 00:05:56.500
And I really loved, I'm just going to go back to the main homepage because it has a lot of the stuff I wanted to talk about.

00:05:57.260 --> 00:05:59.040
It's a beautiful interface.

00:05:59.040 --> 00:06:02.380
I was trying it out with the mouse, actually.

00:06:02.380 --> 00:06:03.180
I'm on a Mac.

00:06:03.180 --> 00:06:05.340
And using the mouse worked great.

00:06:05.340 --> 00:06:07.300
I tried some of the keyboard shortcuts, too.

00:06:07.300 --> 00:06:08.820
There's keyboard shortcuts at the bottom.

00:06:08.820 --> 00:06:12.660
And then the documentation has more that you can just show you how to jump around.

00:06:12.660 --> 00:06:22.280
So it is designed to have some quick workflows to work around like testing an API.

00:06:23.320 --> 00:06:28.240
And it works over, since it's termed textual, works over SSH.

00:06:28.240 --> 00:06:29.520
It saves stuff.

00:06:29.520 --> 00:06:32.900
So when you interact with it, it saves all of your interactions.

00:06:32.900 --> 00:06:35.820
And you can save it to a file.

00:06:35.820 --> 00:06:37.920
And it's a version control friendly file.

00:06:37.920 --> 00:06:43.140
So it's something you can diff and stuff if you want to do it a couple times and see how things are different.

00:06:43.140 --> 00:06:51.560
One of the things I loved about this is when I've tested APIs before, sometimes I've got a whole bunch of header stuff that I need to stuff into an API

00:06:51.560 --> 00:06:54.680
to just get it working.

00:06:54.680 --> 00:07:03.080
So manual things like, oh, I forget that other one, the manual stuff that you can jump around and manually fill things out.

00:07:03.080 --> 00:07:04.220
It's a little difficult.

00:07:04.220 --> 00:07:06.560
But this one has the ability.

00:07:06.560 --> 00:07:07.320
Are we thinking postman?

00:07:07.320 --> 00:07:08.740
Yeah, stuff like that.

00:07:09.600 --> 00:07:15.020
And it's great for things that you don't have to fill in a bunch of header stuff for a post or for a query.

00:07:15.020 --> 00:07:26.940
But if you do, this will work great because it's got scripting capabilities where you can run some Python code before and after and or after a request to prepare the headers,

00:07:26.940 --> 00:07:30.800
set variables and stuff to get your post ready.

00:07:31.080 --> 00:07:32.980
And this is just excellent.

00:07:32.980 --> 00:07:35.180
I'm going to be using this all the time.

00:07:35.180 --> 00:07:37.260
The colors are gorgeous.

00:07:37.260 --> 00:07:38.840
Love the syntax highlighting.

00:07:38.840 --> 00:07:40.500
It's configurable.

00:07:40.500 --> 00:07:42.980
The key maps customize.

00:07:42.980 --> 00:07:46.980
You can even customize the key binding if the ones that they've chosen for you don't work that way.

00:07:46.980 --> 00:07:47.740
That's pretty cool.

00:07:48.200 --> 00:07:55.320
But just an excellent little command thing or a terminal application for testing your APIs.

00:07:55.320 --> 00:07:55.940
Yeah.

00:07:55.940 --> 00:08:00.760
This is one of the more full-featured textual apps I've seen.

00:08:00.760 --> 00:08:01.280
This is great.

00:08:01.280 --> 00:08:01.800
Yeah.

00:08:01.800 --> 00:08:04.820
So we get from Liz in the audience.

00:08:04.820 --> 00:08:06.580
I love this thing.

00:08:06.580 --> 00:08:09.000
I've been wanting to replace Postman for a while.

00:08:09.000 --> 00:08:09.480
Nice.

00:08:09.480 --> 00:08:10.060
Yeah.

00:08:10.060 --> 00:08:12.640
I was just in Postman today.

00:08:12.640 --> 00:08:14.580
But I don't want to tell you about Postman, Brian.

00:08:14.580 --> 00:08:16.800
I want to talk about Scout.

00:08:16.800 --> 00:08:20.720
Let me tell you real quick about Scout APM.

00:08:20.720 --> 00:08:22.860
They're big supporters of Python Bytes.

00:08:22.860 --> 00:08:24.380
So we appreciate that very much.

00:08:24.380 --> 00:08:30.540
So if you are tired of spending hours trying to find the root cause of issues impacting your performance,

00:08:30.540 --> 00:08:33.300
then you owe it to yourself to check out Scout APM.

00:08:33.300 --> 00:08:37.740
They're a leading Python application performance monitoring tool, APM,

00:08:37.740 --> 00:08:42.440
that helps you identify and solve performance abnormalities faster and easier.

00:08:42.440 --> 00:08:45.680
Scout APM ties bottlenecks such as memory leaks,

00:08:45.680 --> 00:08:53.200
slow database queries, background jobs, and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:08:53.200 --> 00:08:55.600
And then you say, oh, no, why is it so slow?

00:08:55.600 --> 00:08:57.940
Why are you doing 200 database queries for what should be one?

00:08:57.940 --> 00:08:59.320
So you can find out things like that.

00:08:59.320 --> 00:09:01.100
And it links it back directly to source code.

00:09:01.100 --> 00:09:06.560
So you can spend less time in the debugger and peeling logs and just finding the problems and moving on.

00:09:06.560 --> 00:09:09.600
And you'll love it because it's built for developers by developers.

00:09:09.600 --> 00:09:11.260
It makes it easy to get set up.

00:09:11.260 --> 00:09:13.780
Seriously, you can do it in less than four minutes.

00:09:13.780 --> 00:09:14.620
So that's awesome.

00:09:14.820 --> 00:09:17.620
And the best part is the pricing is straightforward.

00:09:17.620 --> 00:09:23.040
You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:09:23.740 --> 00:09:25.420
And I just learned this, Brian.

00:09:25.420 --> 00:09:30.540
They also have they provide the pro version for free to all open source projects.

00:09:30.540 --> 00:09:37.860
So if you're an open source maintainer and you want to have Scout APM for that project, just shoot them a message or something on their pricing page about that.

00:09:37.860 --> 00:09:41.720
So you can start your free trial and get instant insights today.

00:09:41.720 --> 00:09:44.340
Visit pythonbytes.fm/Scout.

00:09:44.580 --> 00:09:46.580
The link is in your podcast player show notes as well.

00:09:46.580 --> 00:09:48.000
And please use that link.

00:09:48.000 --> 00:09:51.860
Don't just search for them because otherwise they don't think you came from us.

00:09:51.860 --> 00:09:53.460
And then they'd stop supporting the show.

00:09:53.460 --> 00:09:56.020
So please use our link pythonbytes.fm/Scout.

00:09:56.020 --> 00:09:56.940
Check them out.

00:09:56.940 --> 00:09:58.880
It really supports the show.

00:09:58.880 --> 00:10:00.560
All right.

00:10:00.560 --> 00:10:02.840
Next up, Brian.

00:10:02.840 --> 00:10:11.340
It's good I had a lot of coffee because this there was almost a first after eight years, nine years, eight years of the show.

00:10:11.340 --> 00:10:12.580
How long it's been going on.

00:10:12.700 --> 00:10:14.760
We just had our birthday last week, by the way.

00:10:14.760 --> 00:10:20.220
After that, we've never had a straight run of extra, extra, extra as all of the topics.

00:10:20.220 --> 00:10:24.740
I almost have too many topics that I had to have two extra, extra, extras, but they're quick.

00:10:24.740 --> 00:10:26.060
So are you ready?

00:10:26.060 --> 00:10:26.640
All right.

00:10:26.640 --> 00:10:27.120
Here we go.

00:10:27.120 --> 00:10:31.640
First of all, we have our getting started with NLP and Spacey in Jupyter Notebooks course.

00:10:31.640 --> 00:10:34.100
This one is awesome.

00:10:34.100 --> 00:10:42.620
If you do anything with Spacey or anything with text and you want to parse it with Python, Spacey is a great option.

00:10:42.620 --> 00:10:47.540
And Vincent Morberdam, who used to work at Explosion, actually wrote this course.

00:10:47.540 --> 00:10:48.920
So why am I telling you about that?

00:10:48.920 --> 00:10:54.960
Because over at Google Forms here, we're doing a Spacey swag giveaway.

00:10:55.180 --> 00:11:01.780
So they have a Spacey course with illustrated how-to books and all sorts of other cool things that you can get around Spacey.

00:11:01.780 --> 00:11:07.500
So Ines Montani gave us some codes to give away for people who are interested in that.

00:11:07.500 --> 00:11:08.560
So I put a link.

00:11:08.700 --> 00:11:14.140
All you got to do is give us your name and email so that we can find you and give you the code if you want.

00:11:14.140 --> 00:11:15.380
So check that out.

00:11:15.380 --> 00:11:17.160
Links in the show notes, obviously.

00:11:17.160 --> 00:11:20.460
A couple of articles I wrote, Brian, maybe three.

00:11:20.460 --> 00:11:22.360
I've been writing a lot last week.

00:11:22.360 --> 00:11:25.320
One is I wrote something opposite of cloud native is.

00:11:25.320 --> 00:11:31.180
Trying a little bit of a pushback against how many managed services can you have?

00:11:31.280 --> 00:11:32.420
Well, let's use Kubernetes.

00:11:32.420 --> 00:11:35.100
Oh, and with Kubernetes, it's hard to see the logs.

00:11:35.100 --> 00:11:36.580
So we're going to need log aggregation.

00:11:36.580 --> 00:11:38.740
And then with log aggregation, we're going to need some log monitoring.

00:11:38.740 --> 00:11:43.320
And then on and on, it just builds until you've got this super complicated thing.

00:11:43.320 --> 00:11:47.860
And so this article is kind of an homage to, can we just go back to something simple?

00:11:47.860 --> 00:11:50.600
That will work for tons of people, I think.

00:11:50.600 --> 00:12:07.500
So I'm proposing the idea of stack native, like just enough technology to make what you need your web app or your API or whatever to run, not something that'll tie you so deeply into all the hyperscale clouds that you end up with a $100,000 bill, but no idea how to move away from it.

00:12:07.500 --> 00:12:10.040
I almost covered this as one of my topics.

00:12:10.040 --> 00:12:10.920
This is a great article.

00:12:10.920 --> 00:12:11.440
Did you?

00:12:11.440 --> 00:12:12.260
Oh, thank you so much.

00:12:12.260 --> 00:12:12.720
That's awesome.

00:12:12.720 --> 00:12:14.800
Yeah, this is a really, really fun one.

00:12:15.120 --> 00:12:26.520
Related, I also wrote, and I talked about it last time, but I wrote this up that we, Python Bytes, Talk Python, Talk Python Training, all the APIs, et cetera, et cetera, in like a broad sense, have moved to Hetzner.

00:12:26.520 --> 00:12:29.480
Remember, I talked about how Hetzner was really interesting and appealing.

00:12:29.480 --> 00:12:34.180
And hey, I took the plunge, bought us a, I splurged, Brian.

00:12:34.180 --> 00:12:36.360
I went for the big VM, the big machine.

00:12:36.360 --> 00:12:36.940
Okay.

00:12:36.940 --> 00:12:41.680
Eight virtual CPUs, 16 gigs for a whopping $25 a month.

00:12:42.560 --> 00:12:49.100
That is $112 at DigitalOcean, $205 at AWS, and $320 a month on Azure.

00:12:49.100 --> 00:12:50.040
Same machine.

00:12:50.040 --> 00:12:50.540
Okay.

00:12:50.540 --> 00:12:55.440
And if you look, the performance, people are saying, well, it was probably cheaper because it's like from 20 years ago or something.

00:12:55.440 --> 00:13:00.380
CPU performance, 1.2 times faster than DigitalOcean's $112 version.

00:13:00.380 --> 00:13:07.300
And the bandwidth is eight times more, 20 gigabit bandwidth versus two for 25 bucks.

00:13:07.300 --> 00:13:10.440
So anyway, this is really, really excellent.

00:13:10.720 --> 00:13:12.500
And talked a lot about that.

00:13:12.500 --> 00:13:18.740
So another thing I did is I created, I was on vacation for four days, long weekend.

00:13:18.740 --> 00:13:23.300
So I decided to create a package for Chameleon and Flask.

00:13:23.300 --> 00:13:25.060
Chameleon, the web templating language.

00:13:25.060 --> 00:13:26.580
Flask, you know what Flask is.

00:13:26.580 --> 00:13:26.920
Yeah.

00:13:26.920 --> 00:13:28.260
Usually it uses Jinja.

00:13:28.260 --> 00:13:29.720
I don't like Jinja very much.

00:13:29.820 --> 00:13:35.320
I think it's too much Python and not enough pure web, not like view or other things where you just have little attributes.

00:13:35.320 --> 00:13:36.420
Chameleon is like that.

00:13:36.420 --> 00:13:37.020
I like it a lot.

00:13:37.020 --> 00:13:42.680
Plus, I have a whole ton of Chameleon templates I don't want to mess with, but I want to do some Flask things with some of that base.

00:13:42.680 --> 00:13:57.520
So I created a package that if you just put a decorator onto either a async or a regular non-synchronous view method in Flask, it will, when you return a dictionary, it'll use that dictionary to render the Chameleon template.

00:13:57.520 --> 00:13:58.260
It's pretty awesome.

00:13:58.260 --> 00:13:58.960
That's neat.

00:13:59.140 --> 00:14:07.760
And if anyone wants a really cool example, there's some of these that have existed before, but they were super simplistic.

00:14:07.760 --> 00:14:12.540
Like, okay, so technically the Chameleon engine is set up, but then you have to do every view.

00:14:12.540 --> 00:14:18.540
You've got to do all the manual steps to actually render it, or it only works with synchronous functions and not async.

00:14:18.540 --> 00:14:26.520
So here's a decorator that looks and sees if it's decorating an asynchronous or asynchronous function and creates a different wrapper behavior.

00:14:27.060 --> 00:14:30.620
So the wrapper itself is async or not async, depending on which it covers here.

00:14:30.620 --> 00:14:37.260
So if people are trying to write something regardless of whether it's web or not that can handle both sync and async, here's a little example for them.

00:14:37.260 --> 00:14:37.620
Okay.

00:14:37.620 --> 00:14:38.160
All right.

00:14:38.160 --> 00:14:47.080
Next, also released a new version of ListMonk, the email API client for Python.

00:14:47.080 --> 00:14:50.540
I think I have this guy's name, Ron.

00:14:50.540 --> 00:14:50.860
Thank you.

00:14:50.860 --> 00:14:53.800
Ron Hudson did a bunch of work for adding new features to that.

00:14:53.800 --> 00:14:54.680
So that is out.

00:14:55.300 --> 00:14:56.980
Also, you're still on zero over.

00:14:56.980 --> 00:14:57.780
What's up with that?

00:14:57.780 --> 00:15:00.120
Well, it's only been out a couple of days.

00:15:00.120 --> 00:15:00.640
Okay.

00:15:00.640 --> 00:15:02.120
I feel like I should give it a week.

00:15:02.120 --> 00:15:04.420
I'm just now rewriting.

00:15:04.420 --> 00:15:09.420
I've been doing a bunch of work the last day to use that to convert something into Flask.

00:15:09.420 --> 00:15:10.520
I'll talk more about that later.

00:15:10.520 --> 00:15:12.460
And there's been like little tiny issues.

00:15:12.460 --> 00:15:14.060
I want to get it a little bit more.

00:15:14.060 --> 00:15:16.520
I want to test it for a week before I give it a non-zero over.

00:15:16.520 --> 00:15:16.940
Come on.

00:15:16.940 --> 00:15:17.360
Okay.

00:15:17.360 --> 00:15:17.660
Okay.

00:15:17.660 --> 00:15:18.240
That's fine.

00:15:18.240 --> 00:15:18.540
Okay.

00:15:18.540 --> 00:15:18.960
Yeah.

00:15:19.960 --> 00:15:21.380
Oh, and Ron is out in the audience.

00:15:21.380 --> 00:15:21.860
Hey, Ron.

00:15:21.860 --> 00:15:22.520
Awesome.

00:15:22.520 --> 00:15:23.040
Thank you, man.

00:15:23.040 --> 00:15:23.680
Thanks for the help.

00:15:23.680 --> 00:15:24.400
Okay.

00:15:24.400 --> 00:15:27.540
So on here to TOB.

00:15:27.540 --> 00:15:29.120
We all know the TOB, TOB Index.

00:15:29.120 --> 00:15:29.780
There was big news.

00:15:29.780 --> 00:15:31.280
Hey, Python's number one.

00:15:31.280 --> 00:15:31.840
Hooray.

00:15:31.840 --> 00:15:32.880
In this other way, right?

00:15:32.880 --> 00:15:34.460
We just talked about GitHub last week.

00:15:34.460 --> 00:15:37.240
And TOB, this is not news that Python is number one.

00:15:37.240 --> 00:15:40.160
But it was updated for year over year in November.

00:15:40.160 --> 00:15:43.100
And I just noticed, look at the numbers here.

00:15:43.100 --> 00:15:47.760
Python is not just number one over C++, then over Java, over C.

00:15:47.760 --> 00:15:54.180
It's over two times as popular and has a almost 9% year over year growth.

00:15:54.180 --> 00:15:57.820
Whereas number two, C++ has 0.3%.

00:15:57.820 --> 00:15:59.280
And Java is 1%.

00:15:59.280 --> 00:16:01.080
And C is negative 3%.

00:16:01.080 --> 00:16:02.420
C Sharp has negative 3%.

00:16:02.420 --> 00:16:04.380
So not only is it number one, it's double.

00:16:04.740 --> 00:16:08.880
And it's growing many times faster than anything else on the list, including Rust.

00:16:08.880 --> 00:16:09.720
That's amazing.

00:16:09.720 --> 00:16:14.020
So I'm not sure if we should really bet our careers on these toy languages yet.

00:16:14.020 --> 00:16:15.320
But you know, you guys do you.

00:16:15.320 --> 00:16:15.840
Okay.

00:16:15.840 --> 00:16:19.340
I'm betting my career on it, baby.

00:16:19.340 --> 00:16:20.620
A little late.

00:16:20.620 --> 00:16:27.720
So update on PEP 750 being spearheaded by Paul Everett and others.

00:16:27.720 --> 00:16:30.880
I just talked about Jinja versus Chameleon.

00:16:30.880 --> 00:16:31.360
Yeah.

00:16:31.580 --> 00:16:35.760
But these are all external packages that have their own parsers, their own behaviors.

00:16:35.760 --> 00:16:40.020
And wouldn't it be nice if Python itself had a type of a template language?

00:16:40.020 --> 00:16:41.500
Maybe.

00:16:41.500 --> 00:16:42.080
Sure.

00:16:42.080 --> 00:16:42.380
Maybe.

00:16:42.380 --> 00:16:43.700
Well, I mean, we have f-strings.

00:16:43.700 --> 00:16:46.500
We do have f-strings.

00:16:46.500 --> 00:16:52.580
But when you're doing things in, say, I want to create the content of an HTML page in memory.

00:16:52.580 --> 00:16:53.100
Yeah.

00:16:53.340 --> 00:16:55.080
As part of some action, right?

00:16:55.080 --> 00:16:58.420
A lot of people say, well, I guess we could run, like, set up the Jinja engine or whatever.

00:16:58.420 --> 00:17:09.800
So this PEP 750, which is in draft mode currently, targeting 314, is trying to bring some modern version that's like f-strings into Python.

00:17:09.800 --> 00:17:11.060
So this is interesting.

00:17:11.060 --> 00:17:11.560
Yeah.

00:17:11.560 --> 00:17:11.880
Coming along.

00:17:11.880 --> 00:17:12.960
Progress is happening there.

00:17:12.960 --> 00:17:13.400
Cool.

00:17:14.160 --> 00:17:17.380
Switched over to Canary email, Brian.

00:17:17.380 --> 00:17:23.620
I got so sick of Spark and all of their, hey, we're only focused on building AI features.

00:17:23.620 --> 00:17:33.920
Even though Canary says it's your AI email copilot, they actually seem to be working on features that are not just AI, even though that's what their landing page seems to say.

00:17:34.080 --> 00:17:40.380
So that's an interesting experiment I'm running, but not as interesting as a couple others that are coming up.

00:17:40.380 --> 00:17:41.800
Omnivore.

00:17:41.800 --> 00:17:44.900
Remember I told you they're shutting down and deleting everybody's account?

00:17:44.900 --> 00:17:45.320
Yeah.

00:17:45.320 --> 00:17:45.820
All right.

00:17:45.820 --> 00:17:48.340
So I thought, well, let me go back to Pocket.

00:17:48.340 --> 00:17:51.860
Pocket supports Firefox because it's owned by Mozilla.

00:17:51.860 --> 00:17:52.680
That's kind of cool.

00:17:52.680 --> 00:17:54.360
And I had a paid account to them.

00:17:54.360 --> 00:17:55.020
So that's great.

00:17:55.020 --> 00:18:00.680
And then I realized that Pocket kind of represents everything that's wrong with Mozilla on a broader scale.

00:18:00.680 --> 00:18:01.780
And it made me sad.

00:18:02.300 --> 00:18:04.600
So, for example, I told you I just took this four-day trip.

00:18:04.600 --> 00:18:11.060
I'd like to take some things and take it with me and maybe read it on the plane or at the beach or wherever.

00:18:11.060 --> 00:18:11.600
Yeah.

00:18:11.600 --> 00:18:13.960
Pocket has been around for 10 years.

00:18:13.960 --> 00:18:18.220
They were acquired by Mozilla in 2017, I believe it was.

00:18:18.220 --> 00:18:20.560
They don't even support offline mode.

00:18:20.560 --> 00:18:24.060
You can't even read the text offline like an e-book.

00:18:24.060 --> 00:18:31.560
It's like acquired in 2017, put on the shelf, worked on other random things that have nothing to do with Firefox

00:18:31.560 --> 00:18:33.480
or other things they're selling, right?

00:18:33.480 --> 00:18:34.820
Anyway, made me sad.

00:18:34.820 --> 00:18:37.140
Went through a whole bunch of different other things.

00:18:37.140 --> 00:18:38.220
I'm back at Instapaper.

00:18:38.220 --> 00:18:39.460
Instapaper is actually really great.

00:18:39.460 --> 00:18:43.940
The only thing it's not great at is read it to me, which is what Omnivore was so perfect at.

00:18:43.940 --> 00:18:45.660
But, you know, they're dead.

00:18:45.660 --> 00:18:47.480
So I will not speak of them ever again.

00:18:47.480 --> 00:18:49.920
Anyway, Instapaper is actually pretty awesome these days.

00:18:49.920 --> 00:18:53.380
So I know a lot of people are talking to me on Mastodon and other places.

00:18:53.380 --> 00:18:54.380
That's where it's at.

00:18:54.440 --> 00:18:58.780
So other people are saying they like it or don't like it?

00:18:58.780 --> 00:19:03.820
Well, no one really mentioned Instapaper one way or the other, but there's good links.

00:19:03.820 --> 00:19:05.660
There's Readwise.

00:19:05.660 --> 00:19:13.240
There's like a bunch of other premium paid ones that are just, they're not that great, but they're expensive, like $100 a year expensive.

00:19:13.240 --> 00:19:14.540
So I don't know.

00:19:14.540 --> 00:19:15.280
I tried them.

00:19:16.280 --> 00:19:20.960
So I started, I used Instapaper a long time ago and I don't remember why I stopped.

00:19:20.960 --> 00:19:22.940
I don't remember why I stopped either.

00:19:22.940 --> 00:19:26.580
But, well, I know I would switch to Omnivore because it was awesome, but it's gone.

00:19:26.580 --> 00:19:27.420
So say la vie.

00:19:27.420 --> 00:19:30.140
Anyway, onward and upward.

00:19:30.140 --> 00:19:33.700
If you are feeling the open source self-hosted world, there's Hoarder.

00:19:33.700 --> 00:19:35.520
I mean, who doesn't want to be a hoarder, Brian?

00:19:35.520 --> 00:19:37.220
But this is really awesome.

00:19:37.220 --> 00:19:44.580
It's kind of a save your links and notes and articles and then let locally running AI tag them and group them.

00:19:44.720 --> 00:19:47.720
And this thing just, it's a Docker run, open source.

00:19:47.720 --> 00:19:48.400
It's pretty awesome.

00:19:48.400 --> 00:19:52.360
But I do not need more self-hosted things to babysit and backup.

00:19:52.360 --> 00:19:53.720
So not messing with it.

00:19:53.720 --> 00:19:56.240
But people, they really want, this looks pretty neat.

00:19:56.240 --> 00:19:57.260
All right.

00:19:57.260 --> 00:19:58.140
We're getting close to the end.

00:19:58.140 --> 00:19:58.760
I promise.

00:19:58.760 --> 00:19:59.840
Yeah, this is the last one.

00:19:59.840 --> 00:20:02.740
So have you heard about the Arc browser?

00:20:02.740 --> 00:20:03.500
No.

00:20:03.500 --> 00:20:09.640
Super minimalist wrapper around Chrome like Vivaldi, but it's all about like reimagining the web.

00:20:09.640 --> 00:20:12.500
And it's, you don't even see the address bar.

00:20:12.620 --> 00:20:16.720
You just hit a command palette and then you type the, type the address you want.

00:20:16.720 --> 00:20:18.420
And it's just, it's magic.

00:20:18.420 --> 00:20:28.660
And well, if you wanted to, I don't know, take the, the most extreme caricature of a Silicon Valley bro, the person running Arc is that.

00:20:28.660 --> 00:20:29.040
Okay.

00:20:29.040 --> 00:20:34.440
There's some amazing, there's some amazing videos in like a cringy way of.

00:20:34.440 --> 00:20:38.960
So they made Arc and it became incredibly popular amongst the people who liked it.

00:20:38.960 --> 00:20:41.860
Like it was going really, really, you know, the adoption was going very fast.

00:20:41.860 --> 00:20:43.700
And they decided we want to build a browser.

00:20:43.700 --> 00:20:47.260
It's really based in AI and you don't even need to tell it what you want to do.

00:20:47.260 --> 00:20:48.740
It just browses the web for you.

00:20:48.740 --> 00:20:49.840
You're just with it.

00:20:49.840 --> 00:20:51.560
Like seriously, that's their new project.

00:20:51.560 --> 00:20:53.300
And they're kind of like, oh, we're done with this Arc thing.

00:20:53.300 --> 00:20:55.920
We're going to go build something that browses the web for you.

00:20:55.920 --> 00:20:57.960
So a bunch of people are like, ah, what is there?

00:20:57.960 --> 00:21:02.640
Well, it turns out that someone, some group was working on this thing called the Zen browser.

00:21:02.640 --> 00:21:05.120
Now I knocked on Mozilla before.

00:21:05.120 --> 00:21:07.860
This is based on Firefox and it's awesome.

00:21:07.860 --> 00:21:08.480
Okay.

00:21:08.820 --> 00:21:09.220
Okay.

00:21:09.220 --> 00:21:15.320
So this is a super minimalist wrapper that gives you a really clean, nice, just let me see the web.

00:21:15.320 --> 00:21:18.980
You know, Chrome was called Chrome because it literally maybe should be anti-Chrome.

00:21:18.980 --> 00:21:24.420
It took away the window Chrome, all the junk that used to be around all the toolbars and buttons and everything.

00:21:24.420 --> 00:21:26.200
And it minimalized it.

00:21:26.200 --> 00:21:29.640
But this is, you know, the next version of that.

00:21:29.640 --> 00:21:31.340
And it's super neat.

00:21:31.340 --> 00:21:34.040
So in fact, that's what I'm running right here.

00:21:34.040 --> 00:21:36.760
And you can see all the things.

00:21:36.760 --> 00:21:39.560
You can see the little tab bar on the side, but you don't even have to have that there.

00:21:39.560 --> 00:21:40.600
Isn't this nice?

00:21:40.600 --> 00:21:41.460
Sure.

00:21:41.460 --> 00:21:41.980
It's cool.

00:21:41.980 --> 00:21:43.540
So anyway, I'm giving this a try.

00:21:43.540 --> 00:21:45.800
It's quite promising.

00:21:45.800 --> 00:21:49.680
The people working on it are releasing versions a couple times a week.

00:21:49.680 --> 00:21:51.660
So it says alpha, but it's working pretty well.

00:21:51.660 --> 00:21:52.180
So anyway.

00:21:52.180 --> 00:21:57.940
I do want to shout out like one of the features of the Arc browser is that whenever you look at a picture of an animal, you see two.

00:21:57.940 --> 00:21:59.840
Yeah, exactly.

00:21:59.840 --> 00:22:03.640
Of course, because how else are they going to go on the Arc?

00:22:03.640 --> 00:22:04.420
Yeah.

00:22:04.420 --> 00:22:06.580
They're not allowed in if there's just one picture of them.

00:22:06.580 --> 00:22:07.980
Yeah, that's pretty good.

00:22:07.980 --> 00:22:08.200
Okay.

00:22:08.200 --> 00:22:10.620
So I recommend zen-browser.app.

00:22:10.620 --> 00:22:11.620
It's pretty awesome.

00:22:11.620 --> 00:22:14.660
Right now, it doesn't have a built-in ad blocker.

00:22:14.660 --> 00:22:24.080
And if you go to a site that's got a bunch of ads and you somehow block them with, say, DNS or whatever, they'll leave big gaping holes, as did Arc, unlike Vivaldi, which takes them away.

00:22:24.080 --> 00:22:30.200
But I talked to the Zen browser people, and they said that they are very soon releasing a feature that cleans up the pages.

00:22:30.200 --> 00:22:33.420
So it's not just pages with holes where these would be ads, but a clean page.

00:22:33.420 --> 00:22:35.980
So anyway, if you're wondering about that, that is coming.

00:22:35.980 --> 00:22:39.600
I'm still pretty happy with Vivaldi, but you can go for it.

00:22:40.160 --> 00:22:43.840
I'm experimenting, but I'm also still a big fan of Vivaldi.

00:22:43.840 --> 00:22:51.060
So this does have the drawbacks that Firefox itself has in the sense that certain pages don't behave as well based on Firefox, right?

00:22:51.060 --> 00:22:55.140
Because it's really Firefox at the core or Gecko or whatever they call the rendering engine these days.

00:22:55.140 --> 00:22:55.940
Okay.

00:22:56.200 --> 00:22:56.460
All right.

00:22:56.460 --> 00:22:59.660
Over to you for your final item.

00:22:59.660 --> 00:23:01.100
Yeah.

00:23:01.100 --> 00:23:04.940
So for my final item, I wanted to talk about UV.

00:23:04.940 --> 00:23:14.120
Because we actually talked about UV twice at the beginning of the show, talking about how UV install or UV tool install works like Pipex.

00:23:14.120 --> 00:23:23.340
But there's an article from Jeff Triplett saying, UV does everything or enough that I'm not sure what else it needs to do.

00:23:23.340 --> 00:23:25.820
This is a great title because that's how I feel.

00:23:25.820 --> 00:23:32.640
I mean, UV is, it's kind of refreshing that I need to forget about a lot of things.

00:23:32.640 --> 00:23:37.240
And these other projects are still great, but it solves so many problems.

00:23:37.240 --> 00:23:38.740
I'm just going to read here.

00:23:38.740 --> 00:23:45.420
UV feels like one of those old infomercials where it solves everything, which is where we have landed in the Python world.

00:23:45.420 --> 00:23:48.040
Like it slices, dices at Julian's.

00:23:48.040 --> 00:23:52.200
So I've had several discussions with friends about UV.

00:23:52.200 --> 00:23:58.240
And even when we talk about it during my weekly-ish office hours, the list has grown.

00:23:59.020 --> 00:24:05.100
And it starts to sound like not just what can it do, but it's a shorter list to say what it cannot do.

00:24:05.100 --> 00:24:06.740
So let's just come up with some.

00:24:06.740 --> 00:24:10.700
He has a list of things that I think are great of how it's replaced things.

00:24:10.700 --> 00:24:13.280
So UV pip install replaces pip install.

00:24:13.280 --> 00:24:15.560
Not completely, but yes.

00:24:15.560 --> 00:24:16.520
Yeah.

00:24:17.480 --> 00:24:19.840
I am now using that almost exclusively.

00:24:19.840 --> 00:24:24.460
UV venv replaces the Python-m venv.

00:24:24.460 --> 00:24:27.880
And I'm using that wherever I can.

00:24:27.880 --> 00:24:29.360
So yep, using that.

00:24:29.360 --> 00:24:32.460
UV pip compile replaces pip tools compile.

00:24:32.460 --> 00:24:35.380
UV pip sync replaces pip tool sync.

00:24:35.380 --> 00:24:37.500
UV run replaces pip x.

00:24:37.500 --> 00:24:40.140
UV tool run replaces pip x.

00:24:40.300 --> 00:24:45.700
And like we talked before, UV tool install does the installation of tools as well.

00:24:45.700 --> 00:24:50.120
UV Python, actually, we covered that on the show.

00:24:50.120 --> 00:24:54.900
But I haven't really been using that very much because I use virtual environments.

00:24:54.900 --> 00:24:59.120
And a virtual environment just installs Python for me if it's not there.

00:24:59.120 --> 00:25:01.280
So that's what I've been doing.

00:25:01.280 --> 00:25:02.200
Yeah, it's super awesome.

00:25:02.200 --> 00:25:04.820
I don't find I use it very much locally.

00:25:04.820 --> 00:25:08.600
But I do use it in Docker when I got to get Python into a Docker image.

00:25:08.600 --> 00:25:09.760
It's a nice way to do that.

00:25:09.960 --> 00:25:10.680
Yeah, cool.

00:25:10.680 --> 00:25:16.060
UV build, which was new to me, or I forgot about it.

00:25:16.060 --> 00:25:19.400
We'll build your package for PyPI.

00:25:19.400 --> 00:25:22.000
And UV publish publishes it.

00:25:22.000 --> 00:25:25.120
I just, you know, I told you I published those two packages,

00:25:25.120 --> 00:25:27.800
the chameleon-flask and then the list monk one.

00:25:27.800 --> 00:25:28.140
Yeah.

00:25:28.140 --> 00:25:30.740
Both of those, UV build, UV publish.

00:25:30.740 --> 00:25:31.240
Perfect.

00:25:31.240 --> 00:25:35.180
And what I find is I'm using these like on new packages.

00:25:35.180 --> 00:25:36.060
I'll do UV.

00:25:36.060 --> 00:25:39.820
I'll do build and publish until I get the,

00:25:39.820 --> 00:25:40.860
workflows going.

00:25:40.860 --> 00:25:45.920
Because after a package is, you know, around for a little bit, then I do a GitHub workflow

00:25:45.920 --> 00:25:50.300
that will just do a build and publish on with a version.

00:25:50.300 --> 00:25:52.620
When I push a version, it does that for me.

00:25:52.620 --> 00:25:53.140
So.

00:25:53.140 --> 00:25:54.140
Nice.

00:25:54.380 --> 00:25:54.900
So there's that.

00:25:54.900 --> 00:26:01.100
And then we talked about this GitHub Actions with setup UV.

00:26:01.100 --> 00:26:07.120
Is there Astral has a setup UV for bringing UV into GitHub Actions to make that faster?

00:26:07.920 --> 00:26:10.960
And then there's a Docker thing.

00:26:10.960 --> 00:26:13.020
Bringing UV and Python to Docker.

00:26:13.020 --> 00:26:14.620
Have you used this?

00:26:14.620 --> 00:26:15.620
Have we talked about this already?

00:26:15.620 --> 00:26:15.840
No.

00:26:15.840 --> 00:26:26.480
I believe it uses multi-layer Docker builds where you have a build image and then you have the destination image and it gets that one and it copies it into the actual running image.

00:26:26.880 --> 00:26:32.420
But I have a base image that just does the curl install and it barely ever updates.

00:26:32.420 --> 00:26:34.980
So it just, it's fine for me to just do it that way.

00:26:34.980 --> 00:26:35.860
I haven't messed with this.

00:26:35.860 --> 00:26:48.820
And so I liked the idea where poetry was going a while ago with trying to have like kind of a unified project feel for, you know, to have these project files.

00:26:48.820 --> 00:26:51.380
But I wasn't ready for it then.

00:26:51.380 --> 00:26:57.900
But now that I've converted everything to pyproject.toml, having that as my project file makes sense.

00:26:57.900 --> 00:27:04.620
And UV does, has add, remove, sync, and lock that do things that are project related.

00:27:04.620 --> 00:27:07.860
So adding a dependency to a project, removing.

00:27:07.860 --> 00:27:13.100
So it'll add, add to pyproject.toml, remove, sync.

00:27:13.100 --> 00:27:16.300
And I'm actually finding I'm using this a lot.

00:27:16.300 --> 00:27:23.500
So I'll, I'll create a, so I'll clone a project, create a virtual environment and do UV sync.

00:27:23.500 --> 00:27:28.360
And it installs everything that's in the, in the, in the project.toml or requirements file.

00:27:28.360 --> 00:27:29.220
Sweet.

00:27:29.220 --> 00:27:31.040
So UV sync is awesome.

00:27:31.040 --> 00:27:32.640
Yeah.

00:27:32.640 --> 00:27:34.840
So then he talks about what is it, what does it not do?

00:27:34.840 --> 00:27:40.720
And does it run custom scripts defined in your project.toml?

00:27:40.720 --> 00:27:41.640
Oh, okay.

00:27:41.640 --> 00:27:43.660
There's a few things it doesn't do.

00:27:43.660 --> 00:27:47.100
It doesn't manage bumper and bump versions like bumper.

00:27:47.100 --> 00:27:49.780
There's so many ways that people do versions of it.

00:27:50.120 --> 00:27:54.600
You know, do you, do you have a bumper sort of a thing that you use, Michael?

00:27:54.600 --> 00:28:00.780
Because I, I used to, I used to use a couple, but, but they were more complicated.

00:28:00.780 --> 00:28:02.520
I mean, it was just an extra thing.

00:28:02.520 --> 00:28:06.140
And I thought all it's doing is make changing a number for me.

00:28:06.140 --> 00:28:07.080
I can just do that.

00:28:07.440 --> 00:28:07.860
Exactly.

00:28:07.860 --> 00:28:09.520
No, not really.

00:28:09.520 --> 00:28:17.120
I have one that sort of keeps track of how many deploys or pushed to productions I have for certain things, but it's kind of meaningless.

00:28:17.660 --> 00:28:19.440
So short answer, no.

00:28:19.440 --> 00:28:21.320
I love the last item.

00:28:21.320 --> 00:28:25.320
UV doesn't replace Python, nor should it.

00:28:25.320 --> 00:28:33.820
But, but I am, I'm really, you know, I don't even feel bad that I'm using UV in all the places where I can, because why not?

00:28:36.300 --> 00:28:38.600
I am your father.

00:28:38.600 --> 00:28:41.620
No, I don't feel bad about it either.

00:28:41.620 --> 00:28:42.080
I love it.

00:28:42.080 --> 00:28:54.640
It's, it's revolutionary in how quick it does things and how comprehensively it does it, especially getting Python versions onto your machine and creating virtual environments with different versions of Python.

00:28:54.640 --> 00:28:55.340
It's glorious.

00:28:55.340 --> 00:28:55.820
Yeah.

00:28:55.820 --> 00:28:57.700
All right.

00:28:57.700 --> 00:29:01.620
Before we get to our extras, are there any other extras?

00:29:01.620 --> 00:29:05.720
No other extras, except for we have an extra sponsor.

00:29:06.140 --> 00:29:07.920
I'd love to tell people about.

00:29:07.920 --> 00:29:14.540
This portion of Python Bytes is brought to you by Codium, the AI tool of choice for professional software developers.

00:29:14.540 --> 00:29:17.500
That's C-O-D-E-I-U-M.

00:29:17.500 --> 00:29:26.100
Codium removes tedium from your development through a suite of state-of-the-art AI capabilities available with extensions in all of your favorite IDEs.

00:29:26.100 --> 00:29:35.700
Use Codium in VS Code, the JetBrains IDEs, including PyCharm, Visual Studio Proper, Eclipse, Xcode, NeoVim, Jupyter Notebooks, and more.

00:29:35.700 --> 00:29:47.440
Uniquely, Codium is fully enterprise-ready with over 1,000 paying enterprise customers, including multiple regulated Fortune 500 companies in completely self-hosted air-gap deployments.

00:29:47.440 --> 00:29:50.660
Join over a million developers and use Codium for free forever.

00:29:50.660 --> 00:29:56.260
Once you see the value, then it's time to ask your company to consider a free trial of the enterprise plan.

00:29:56.260 --> 00:30:02.120
To learn more about Codium and get started today for free, visit pythonbytes.fm/Codium.

00:30:02.120 --> 00:30:06.840
That is pythonbytes.fm/C-O-D-E-I-U-M.

00:30:06.840 --> 00:30:07.660
Don't forget the E.

00:30:07.900 --> 00:30:10.700
Or just click the link in your podcast player's show notes.

00:30:10.700 --> 00:30:13.220
Thank you to Codium for supporting Python Bytes.

00:30:13.220 --> 00:30:14.040
Absolutely.

00:30:14.040 --> 00:30:15.760
So no extras.

00:30:15.760 --> 00:30:16.800
I got an extra.

00:30:16.800 --> 00:30:17.880
Wait, you got extra.

00:30:17.880 --> 00:30:21.440
I have no extras because I am still out of breath from covering all the extra extras.

00:30:21.440 --> 00:30:22.200
Yeah, the extras.

00:30:23.000 --> 00:30:30.200
So I wanted to just, there's a little article from Ned Batchelder, coverage.py originally.

00:30:30.200 --> 00:30:35.140
And it's, what I thought was, I always wondered why it's called coverage.py.

00:30:35.140 --> 00:30:37.860
Is it because it's like all the stuff on PyPI is Python.

00:30:37.860 --> 00:30:39.680
So why .py?

00:30:39.680 --> 00:30:43.500
Well, it used to be one line of code or one file, not one line of code.

00:30:43.500 --> 00:30:46.040
But it was originally a single file.

00:30:46.040 --> 00:30:49.120
So the coverage.py name was literal.

00:30:49.120 --> 00:30:52.740
It was a name of a file and it had only 350 lines of code.

00:30:52.740 --> 00:30:57.320
And it was written by Gareth Rees in 2001.

00:30:57.320 --> 00:31:01.240
And Ned started maintaining it in 2004.

00:31:01.240 --> 00:31:06.540
So a few years later, and he still will tell you, I didn't invent coverage.py.

00:31:06.540 --> 00:31:07.760
I'm just maintaining it.

00:31:07.760 --> 00:31:10.160
But he's maintained it for all but three years.

00:31:10.160 --> 00:31:16.160
And now it's 20,000 lines of code and about 100 files.

00:31:16.160 --> 00:31:20.540
So it's got twice the amount of C code as it originally had.

00:31:20.960 --> 00:31:25.640
And it's almost 20 years later, Ned's still pushing the ball forward.

00:31:25.640 --> 00:31:26.920
So we appreciate that, Ned.

00:31:26.920 --> 00:31:29.340
And that's why it's called coverage.py.

00:31:29.340 --> 00:31:30.400
So that was it.

00:31:30.400 --> 00:31:31.580
Yeah, very cool.

00:31:31.580 --> 00:31:32.480
The other extra.

00:31:32.480 --> 00:31:33.780
And 20 years trying.

00:31:33.780 --> 00:31:35.160
20 years on a project.

00:31:35.160 --> 00:31:35.640
Yeah.

00:31:35.640 --> 00:31:36.200
That's awesome.

00:31:36.200 --> 00:31:39.500
And we couldn't ask for a better maintainer for this project.

00:31:39.500 --> 00:31:40.480
So Ned's awesome.

00:31:41.400 --> 00:31:51.540
The other thing is there's been some news lately about people wanting to shift from what used to be Twitter and now is X.

00:31:51.540 --> 00:31:53.900
And a lot of people are going to Blue Sky.

00:31:53.900 --> 00:31:55.060
I'm trying it out myself.

00:31:55.060 --> 00:31:58.160
So if you're over on Blue Sky, connect with me.

00:31:58.160 --> 00:32:00.300
And we'll play with it a bit.

00:32:00.300 --> 00:32:04.580
See if we want to do something else for the podcast or not.

00:32:04.580 --> 00:32:05.060
All right.

00:32:05.060 --> 00:32:05.340
Cool.

00:32:05.400 --> 00:32:06.300
You might drag me over there.

00:32:06.300 --> 00:32:06.940
I'm not there yet.

00:32:06.940 --> 00:32:09.980
But on the Mastodon and the others.

00:32:09.980 --> 00:32:09.980
Definitely.

00:32:09.980 --> 00:32:11.640
Also, one of the things.

00:32:11.640 --> 00:32:15.320
I was going to try to find this article, but I can't find it.

00:32:15.880 --> 00:32:25.580
There was an article saying that a year ago, or even just a few months ago, there were so many millions of people on Blue Sky, but none of them were very active.

00:32:25.580 --> 00:32:30.120
Like me, I had an account, but it wasn't there very much.

00:32:30.120 --> 00:32:32.580
And it sort of feeds on itself, right?

00:32:32.580 --> 00:32:33.460
It's a network effect.

00:32:33.460 --> 00:32:38.780
If you talk and nobody says anything back to you, it's not fun.

00:32:38.780 --> 00:32:41.500
But now it's got a huge growth.

00:32:41.500 --> 00:32:44.520
Even Taylor Swift said she's switching over to Blue Sky.

00:32:45.520 --> 00:32:48.060
But there's a lot of Python people there now, too.

00:32:48.060 --> 00:32:50.160
And it's not just an echo chamber.

00:32:50.160 --> 00:32:53.100
The people are actually hanging out and replying and stuff.

00:32:53.100 --> 00:32:54.960
So it's getting fun there.

00:32:54.960 --> 00:32:56.740
So just letting you know.

00:32:56.740 --> 00:32:57.680
Awesome.

00:32:57.680 --> 00:32:59.860
And that was my extra, really.

00:32:59.860 --> 00:33:02.240
Go follow Brian in the sky.

00:33:02.240 --> 00:33:02.800
Yeah.

00:33:02.800 --> 00:33:04.200
All right.

00:33:04.200 --> 00:33:04.880
Ready for a joke?

00:33:04.880 --> 00:33:06.040
I am very ready.

00:33:06.040 --> 00:33:06.440
I am.

00:33:06.440 --> 00:33:12.880
Also, a quick shout out to the Momentum extension, which gives you a cool little homepage with all sorts of fun stuff you want.

00:33:12.880 --> 00:33:14.360
Oh, that's on your New Zen thing?

00:33:14.360 --> 00:33:15.920
Yeah, but you can get that in Vivaldi.

00:33:15.920 --> 00:33:16.620
You can get that wherever.

00:33:16.620 --> 00:33:17.080
Yeah.

00:33:17.080 --> 00:33:17.260
Okay.

00:33:17.260 --> 00:33:18.120
Yeah.

00:33:18.120 --> 00:33:18.640
Very neat.

00:33:18.640 --> 00:33:21.520
And a bunch of cool little hot links.

00:33:21.520 --> 00:33:22.320
But that's not funny.

00:33:22.320 --> 00:33:22.780
No.

00:33:22.780 --> 00:33:23.600
Sleeping is funny.

00:33:23.600 --> 00:33:25.260
How about how programmers sleep?

00:33:25.260 --> 00:33:27.900
We talked about how they sit in chairs last time.

00:33:27.900 --> 00:33:30.300
We're down to the basics here, Brian.

00:33:30.300 --> 00:33:30.840
Okay.

00:33:31.080 --> 00:33:33.860
But I think many of us will relate to this.

00:33:33.860 --> 00:33:36.980
So there's a picture of a programmer, cat, sleeping.

00:33:36.980 --> 00:33:37.720
Earthquake.

00:33:37.720 --> 00:33:38.540
Still asleep.

00:33:38.540 --> 00:33:39.320
Thunderstorm.

00:33:39.320 --> 00:33:40.300
Still asleep.

00:33:40.300 --> 00:33:41.140
Alien attack.

00:33:41.140 --> 00:33:41.740
Pew, pew.

00:33:41.740 --> 00:33:42.640
Still asleep.

00:33:42.640 --> 00:33:45.100
Remembers how to fix that error on line 56.

00:33:45.100 --> 00:33:45.600
Boom.

00:33:45.600 --> 00:33:46.540
Shoots out of bed.

00:33:46.540 --> 00:33:48.700
God.

00:33:48.700 --> 00:33:51.440
It's three in the morning, but I can fix it.

00:33:51.440 --> 00:33:52.020
Yes.

00:33:52.020 --> 00:33:53.080
Definitely.

00:33:55.640 --> 00:33:58.280
Liz says, I'm in that picture and I don't like it.

00:33:58.280 --> 00:34:00.160
Okay.

00:34:00.160 --> 00:34:01.280
Sort of related.

00:34:01.280 --> 00:34:02.380
I got to tell this story.

00:34:02.380 --> 00:34:07.220
Last night, I was writing up an article on, not an article.

00:34:07.220 --> 00:34:14.120
I was explaining to some of my sponsors how some requirements cannot be implemented.

00:34:14.120 --> 00:34:18.320
And I listed out the reasons why the implementation is not possible.

00:34:18.320 --> 00:34:26.700
And then at the end, I'm like, either we don't do this or we move the database out of one of the objects.

00:34:26.700 --> 00:34:27.620
Well, we can move.

00:34:27.620 --> 00:34:28.260
That's fine.

00:34:28.260 --> 00:34:29.360
That's all it.

00:34:29.360 --> 00:34:30.440
It's possible.

00:34:30.440 --> 00:34:31.000
Yeah.

00:34:31.000 --> 00:34:31.660
Yeah.

00:34:31.660 --> 00:34:36.100
So sleep or writing it down help to figure out.

00:34:36.100 --> 00:34:36.380
Yeah.

00:34:36.380 --> 00:34:38.160
Or even just going for a walk or something.

00:34:38.160 --> 00:34:39.640
I would do that a lot when I get stuck.

00:34:39.640 --> 00:34:42.900
When I was earlier in my career, I'm like, it's time for a walk around the building.

00:34:42.900 --> 00:34:44.100
I'll be back in 10 minutes.

00:34:44.100 --> 00:34:46.400
And also, yeah.

00:34:46.820 --> 00:34:49.020
Wait, I'm babysitting a kitten right now.

00:34:49.020 --> 00:34:51.420
And he's not letting me sleep.

00:34:51.420 --> 00:34:55.320
So he might be sleeping through a thunderstorm, but I'm not sleeping through the kitten.

00:34:55.320 --> 00:34:56.460
So anyway.

00:34:56.460 --> 00:34:58.120
Very meta.

00:34:58.120 --> 00:34:59.440
I think we got to leave it there.

00:34:59.440 --> 00:34:59.900
What do you think?

00:34:59.900 --> 00:35:00.240
Yeah.

00:35:00.240 --> 00:35:01.480
Let's stop talking.

00:35:01.480 --> 00:35:05.320
Thanks again, Michael, for a wonderful episode.

00:35:05.320 --> 00:35:05.760
Bye.

00:35:05.760 --> 00:35:06.160
Yeah.

00:35:06.160 --> 00:35:06.820
Thanks as always.

