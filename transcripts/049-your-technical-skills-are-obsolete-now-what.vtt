
00:00:00.000 --> 00:00:05.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.800 --> 00:00:10.400
This is episode 49, recorded October 24th, 2017.


00:00:10.400 --> 00:00:11.400
I'm Michael Kennedy.


00:00:11.400 --> 00:00:12.400
And I'm Brian Okken.


00:00:12.400 --> 00:00:18.600
And we have yet another six or more amazing news items, actually tons of really cool stuff to share with you.


00:00:18.600 --> 00:00:26.400
But before we get to them, I want to say thanks to DigitalOcean for creating Spaces and sponsoring this podcast to tell you about Spaces.


00:00:26.400 --> 00:00:29.000
Spaces are like S3 but way, way better.


00:00:29.000 --> 00:00:32.960
And check them out at do.co/python.


00:00:32.960 --> 00:00:33.920
Tell you more about that later.


00:00:33.920 --> 00:00:35.680
Right now, I want to go watch some videos.


00:00:35.680 --> 00:00:39.080
Yeah, I know there's a lot of conferences that go on around the world.


00:00:39.080 --> 00:00:42.880
And actually, anybody that's doing a Python conference,


00:00:42.880 --> 00:00:45.040
I have no problem with trying to highlight those.


00:00:45.040 --> 00:00:49.080
So let us know when they're going on and also when their videos are up.


00:00:49.080 --> 00:00:52.200
And that's what I want to talk about right now is there's a couple conferences


00:00:52.200 --> 00:00:54.320
who have videos available now.


00:00:54.320 --> 00:01:00.280
DjangoCon and PyGotham both happened recently and both of their videos are available.


00:01:00.280 --> 00:01:01.760
So we've got links to both.


00:01:01.760 --> 00:01:09.040
PyGotham is on, I don't know if it's on YouTube or not, but it is up on pyvideo.org and the


00:01:09.040 --> 00:01:12.080
DjangoCon 2017 is up on YouTube.


00:01:12.080 --> 00:01:14.760
I've got links to both those playlists.


00:01:14.760 --> 00:01:20.320
I was excited to look at a lot of these and one of the videos I started off with was a


00:01:20.320 --> 00:01:27.320
a video from DjangoCon called Django vs Flask and it was by DB David Baumgold.


00:01:27.320 --> 00:01:28.320
That sounds fun.


00:01:28.320 --> 00:01:33.320
It actually was interesting because it's somebody that respects both Django and Flask


00:01:33.320 --> 00:01:39.320
and it was probably one of the best Flask videos I've watched


00:01:39.320 --> 00:01:44.320
talking about how to deal, kind of how to do some of the things you can do in Django right out of the box


00:01:44.320 --> 00:01:47.320
but how to do it in Flask and comparing those.


00:01:47.320 --> 00:01:49.320
That sounds like a really cool video.


00:01:49.320 --> 00:01:54.780
It's one thing to go study Django, it's one thing to like learn Flask, but to see the features side by side


00:01:54.780 --> 00:01:59.680
sounds like a really nice way to... if you're new and you're trying to decide should I go with Flask or should I go with


00:01:59.680 --> 00:02:02.920
Django, this is like half an hour 45 minutes


00:02:02.920 --> 00:02:08.180
You'll have probably a really good idea rather than you've got to like spend hours learning each and then decide, right?


00:02:08.180 --> 00:02:15.320
It sounds like he leans... he likes the flexibility of Flask. However, it's obvious that he has respect for both and


00:02:15.960 --> 00:02:19.200
And he's talking at a Django conference, of course.


00:02:19.200 --> 00:02:20.600
There's some things I didn't even know about,


00:02:20.600 --> 00:02:21.440
which was cool.


00:02:21.440 --> 00:02:23.200
I didn't know about Flask blueprints,


00:02:23.200 --> 00:02:25.240
and I didn't also definitely never heard


00:02:25.240 --> 00:02:28.440
of Flask Marshmallow for APIs before.


00:02:28.440 --> 00:02:30.200
- Marshmallow, yeah, that's great.


00:02:30.200 --> 00:02:33.080
And it covers things like SQLAlchemy, MongoEngine,


00:02:33.080 --> 00:02:37.120
PeeWee, all the great ODM, ORM, data access layers.


00:02:37.120 --> 00:02:37.960
It's cool.


00:02:37.960 --> 00:02:40.520
- Yeah, but there's so many other great videos up


00:02:40.520 --> 00:02:43.240
from those two conferences, and I really appreciate that.


00:02:43.240 --> 00:02:44.640
That part of the Python culture


00:02:44.640 --> 00:02:48.160
that we try to make the conference videos available for people.


00:02:48.160 --> 00:02:50.280
>> Yeah, that's great. I love that these conferences


00:02:50.280 --> 00:02:52.160
are so quick about getting the videos up.


00:02:52.160 --> 00:02:54.780
The videos are really high quality usually.


00:02:54.780 --> 00:02:57.480
The sound is good, everything's in focus.


00:02:57.480 --> 00:02:58.920
A lot of times it's picture and picture.


00:02:58.920 --> 00:03:00.640
I mean, well done. So that's nice.


00:03:00.640 --> 00:03:01.800
>> What do you got for us, Michael?


00:03:01.800 --> 00:03:05.120
>> Well, I want to pay a little attention to Facebook,


00:03:05.120 --> 00:03:07.540
because Facebook does a lot with Python actually.


00:03:07.540 --> 00:03:10.540
People will tell you Facebook is written in PHP,


00:03:10.540 --> 00:03:12.320
and that it uses React,


00:03:12.320 --> 00:03:15.000
the JavaScript framework which they invented on the front end.


00:03:15.000 --> 00:03:16.480
So it's like PHP plus React.


00:03:16.480 --> 00:03:17.560
And that's interesting.


00:03:17.560 --> 00:03:19.560
But it turns out that I don't work there.


00:03:19.560 --> 00:03:21.320
I don't really know a lot of people there.


00:03:21.320 --> 00:03:23.000
From what I've been able to read,


00:03:23.000 --> 00:03:26.640
there's a decent amount of Python backend services


00:03:26.640 --> 00:03:29.520
sort of supporting that PHP front end.


00:03:29.520 --> 00:03:30.020
OK?


00:03:30.020 --> 00:03:30.320
Wow.


00:03:30.320 --> 00:03:30.680
Yeah.


00:03:30.680 --> 00:03:31.680
And so it's pretty cool.


00:03:31.680 --> 00:03:35.960
And there was a tweet from one of the guys there, El Lange.


00:03:35.960 --> 00:03:36.960
I think he works there.


00:03:36.960 --> 00:03:39.500
I'm pretty sure he works there from the reading of the tweet.


00:03:39.500 --> 00:03:41.680
But he was talking about Facebook and said,


00:03:41.680 --> 00:03:47.920
hey Python 363 was released on Tuesday and I think last Tuesday you covered that which is pretty


00:03:47.920 --> 00:03:53.200
awesome. This was maybe this was two weeks ago when it was released though they said this tweet


00:03:53.200 --> 00:03:58.080
was three days after that and said all the machines at Facebook are already running Python 363.


00:03:58.080 --> 00:04:07.520
That's cool. Three days and they said that 36.3% of their Python apps are based on 36 already.


00:04:07.520 --> 00:04:13.200
How about that? That's great, man. I love three six now. I do too. The f-strings are just so delightful.


00:04:13.200 --> 00:04:18.160
Yeah. And so this is super interesting. And what's more interesting is I would say,


00:04:18.160 --> 00:04:23.760
20. Oh, gosh, I'm forgetting the numbers off to just send you guys to the video,


00:04:23.760 --> 00:04:28.880
and let you pull the numbers out. But a couple years previously, Facebook was not friendly


00:04:28.880 --> 00:04:34.320
to Python three, basically, they had just gotten access to Python two, seven from two, six.


00:04:34.880 --> 00:04:37.360
Okay, that was the big upgrade.


00:04:37.360 --> 00:04:43.920
And the all the recommendations reduce Python 2, the onboarding processes said, hey, when


00:04:43.920 --> 00:04:47.920
you get here, you should you're expected right in Python 2, etc, etc.


00:04:47.920 --> 00:04:53.560
And this guy named Jason Fried, not of 37 signals fame, but different Jason Fried, took


00:04:53.560 --> 00:05:01.700
over the process of trying to shift the organizational culture to valuing Python 3 as the default


00:05:01.700 --> 00:05:06.020
and making the people that do Python 2 look kind of outdated and funky.


00:05:06.020 --> 00:05:09.800
So there's this really great presentation called Rules for Radicals, Changing the Culture


00:05:09.800 --> 00:05:11.720
of Python at Facebook.


00:05:11.720 --> 00:05:18.180
And it's step by step, it's a step by step playbook basically of how he transformed the


00:05:18.180 --> 00:05:25.060
culture to where we're in this place where you say Python 3.6.3 was released on Tuesday,


00:05:25.060 --> 00:05:26.980
Facebook machines are now running it.


00:05:26.980 --> 00:05:29.060
And that tweet comes out on Friday, right?


00:05:29.060 --> 00:05:34.100
So this is not from, this is not like, well, Facebook's a startup, it can always do like,


00:05:34.100 --> 00:05:40.100
no, it was this huge organization transformed through like clear, simple, repeatable steps.


00:05:40.100 --> 00:05:45.020
So I think this is just a really cool evidence of Jason Fried's work and well done, Jason


00:05:45.020 --> 00:05:46.020
and everyone at Facebook.


00:05:46.020 --> 00:05:47.860
Yeah, and I can't wait to watch this video.


00:05:47.860 --> 00:05:48.860
Thanks for linking to it.


00:05:48.860 --> 00:05:49.940
Yeah, it's super cool.


00:05:49.940 --> 00:05:53.020
It was at Pi, Ohio, a couple years ago.


00:05:53.020 --> 00:05:58.620
And in more modern Python news, Ubuntu 17.10, which just came out and I upgraded one of


00:05:58.620 --> 00:06:04.080
my servers recently to it. It says Python 2 is no longer installed by default and


00:06:04.080 --> 00:06:09.660
Python 3.6 has been upgraded to 3.6. How about that? That's great. Another step


00:06:09.660 --> 00:06:15.120
forward. Alright, so modern Python is on the march. And 3.3 is end of life by


00:06:15.120 --> 00:06:18.600
probably by the time this comes out. It's already end of life so if you have


00:06:18.600 --> 00:06:22.320
something on 3.3 it is time to move up and if you're gonna move up don't go to


00:06:22.320 --> 00:06:27.080
3.4 go to 3.6. Speaking of new technologies there was a pretty good


00:06:27.080 --> 00:06:31.220
article and it's not Python specific but called "Your technical skills are


00:06:31.220 --> 00:06:36.960
obsolete, now what?" And this is it's actually a pretty fun article about you


00:06:36.960 --> 00:06:40.160
know since you and I are both big proponents to people keeping their


00:06:40.160 --> 00:06:44.920
skills up-to-date and learning new things I thought it fit in nice and this


00:06:44.920 --> 00:06:50.200
article is focused on how to do that while at work to not try to eat into


00:06:50.200 --> 00:06:54.560
your home life to beef up your skills. I think there's a lot of people who feel


00:06:54.560 --> 00:06:59.720
kind of in a tough situation because they see all these new technologies coming out


00:06:59.720 --> 00:07:04.240
and they hear presentations or people say, "Oh, the stuff that you're doing is so old


00:07:04.240 --> 00:07:05.240
and crappy.


00:07:05.240 --> 00:07:08.200
You should be doing whatever whiz-bang new thing it is."


00:07:08.200 --> 00:07:12.040
These recommendations or this excitement, probably rightly so, but it comes from people


00:07:12.040 --> 00:07:13.040
who are young.


00:07:13.040 --> 00:07:17.680
Maybe they don't have kids or they're single and they have a lot of free time and to spend


00:07:17.680 --> 00:07:23.440
an extra two hours after work on some project is like no big deal if you're young and you


00:07:23.440 --> 00:07:27.040
got lots of free time and energy but if you know you're getting dinner for the


00:07:27.040 --> 00:07:30.600
kids and you've been up early driving to school and you got to work with homework


00:07:30.600 --> 00:07:34.040
it's just like it's a whole nother level right? I think it's a great idea to try


00:07:34.040 --> 00:07:38.140
to fit that into your to your work if you can. One of the things is I really


00:07:38.140 --> 00:07:43.040
like that he starts off by talking about the reasons sometimes good reasons why


00:07:43.040 --> 00:07:47.840
companies stay with an old technology however I mean if Facebook can switch in


00:07:47.840 --> 00:07:52.680
a few days what's your company's excuse? That's right. Seriously though there's


00:07:52.680 --> 00:07:57.720
sometimes there's good reasons to not jump on the bandwagon right away. So he


00:07:57.720 --> 00:08:01.980
goes through some steps of identifying obsolete and problematic technologies


00:08:01.980 --> 00:08:06.320
and trying to do some research on potential replacements and then trying


00:08:06.320 --> 00:08:10.800
to get buy-in from your management and hopefully to try to get some time for


00:08:10.800 --> 00:08:15.720
yourself or maybe you and some other people to do a pilot project exploring


00:08:15.720 --> 00:08:20.700
this process. Yeah the main message of this was look if you want to find a way


00:08:20.700 --> 00:08:25.020
to learn new skills, you need to fit it into work often, right?


00:08:25.020 --> 00:08:28.700
Unless you just want to really put in a lot of energy to learn something outside of work.


00:08:28.700 --> 00:08:33.100
But if you're going to try to fit into work, go and identify a problematic area


00:08:33.100 --> 00:08:39.280
of your technology stack and see, like, create a plan on how to solve that problem


00:08:39.280 --> 00:08:44.820
with the new technology by you, thereby you learn the new technology by solving the problem.


00:08:44.820 --> 00:08:47.860
So you're actually adding value, not just saying, "Please send me to training.


00:08:47.860 --> 00:08:50.420
You can send me in six weeks, six months, whatever, right?"


00:08:50.420 --> 00:08:56.920
So then he does talk about how to pose those questions and talk to your manager about making the change.


00:08:56.920 --> 00:09:03.920
But he kind of ends with, "If your boss says no, then you at least have some extra skills that you can apply to your next job."


00:09:03.920 --> 00:09:11.920
And I'd like to shim in there and say, "I think you should use it to start a conversation with your boss or your management chain


00:09:11.920 --> 00:09:18.420
about that you care about the company, you care about increasing the skills of both yourself and the others on your team,


00:09:18.420 --> 00:09:21.620
And how can you go about doing that and why?


00:09:21.620 --> 00:09:22.460
Why the no?


00:09:22.460 --> 00:09:24.500
Like, is it bad timing?


00:09:24.500 --> 00:09:26.620
Or do you just have a bad proposal?


00:09:26.620 --> 00:09:28.540
Or too much time spent?


00:09:28.540 --> 00:09:31.860
Anyway, I think that you should try to not throw your company


00:09:31.860 --> 00:09:34.700
under the bus right away and try to work a little harder.


00:09:34.700 --> 00:09:38.580
So I think actually the video you linked to


00:09:38.580 --> 00:09:41.020
with the rules for radicals probably


00:09:41.020 --> 00:09:43.900
fits right in here too of trying to change your company.


00:09:43.900 --> 00:09:44.620
Yeah, absolutely.


00:09:44.620 --> 00:09:46.460
You don't just, like Jason didn't just go,


00:09:46.460 --> 00:09:47.700
well, they said Python 2, so I'm going


00:09:47.700 --> 00:09:49.380
go find a startup, forget this, right?


00:09:49.380 --> 00:09:51.100
He actually changed Facebook,


00:09:51.100 --> 00:09:52.340
which is even more impressive.


00:09:52.340 --> 00:09:53.860
- And then a book that a little tiny,


00:09:53.860 --> 00:09:55.180
it's a little tiny read,


00:09:55.180 --> 00:09:56.700
book I read a couple years ago,


00:09:56.700 --> 00:09:58.380
it's called Team Geek,


00:09:58.380 --> 00:10:01.140
that has some great advice on this.


00:10:01.140 --> 00:10:03.660
And it says that things like changing your process,


00:10:03.660 --> 00:10:08.440
you probably ought to limit it to under 50% of your time.


00:10:08.440 --> 00:10:10.000
I would say stronger,


00:10:10.000 --> 00:10:12.980
I would say 10 to 20% of your time at most


00:10:12.980 --> 00:10:14.660
trying to fix things.


00:10:14.660 --> 00:10:16.100
And then the other thing is,


00:10:16.100 --> 00:10:18.460
There's a nice section on,


00:10:18.460 --> 00:10:20.460
sometimes it's easier to ask for forgiveness


00:10:20.460 --> 00:10:21.580
than permission.


00:10:21.580 --> 00:10:23.320
You can try to get your manager buy-in,


00:10:23.320 --> 00:10:25.800
but also, if you're not spending much time on it,


00:10:25.800 --> 00:10:27.620
you might be able to just change some things


00:10:27.620 --> 00:10:28.920
and make it better.


00:10:28.920 --> 00:10:31.260
Like one of those disclaimers,


00:10:31.260 --> 00:10:33.380
"My advice cannot be taken as legal advice


00:10:33.380 --> 00:10:35.980
"and you should seek your own legal counsel."


00:10:35.980 --> 00:10:37.900
- Yeah, your conditions may vary,


00:10:37.900 --> 00:10:40.260
but I think it's really good advice


00:10:40.260 --> 00:10:41.940
and this article is really practical,


00:10:41.940 --> 00:10:44.020
especially for people who are not trying to spend


00:10:44.020 --> 00:10:47.360
extra hour a day outside of work learning something.


00:10:47.360 --> 00:10:48.360
So that's really cool.


00:10:48.360 --> 00:10:53.820
I feel like there's a lot of slack in big organizations already.


00:10:53.820 --> 00:10:56.100
You get put into a lot of meetings.


00:10:56.100 --> 00:11:00.760
You have a lot of, I don't know, there's time between the actual work that seems to get


00:11:00.760 --> 00:11:01.760
done.


00:11:01.760 --> 00:11:05.500
And if you can just wall off like a little bit of that for learning and working on a


00:11:05.500 --> 00:11:10.020
project, it could be like a skunk work thing, I'm trying to prototype something different,


00:11:10.020 --> 00:11:11.220
or I'm just learning something.


00:11:11.220 --> 00:11:16.420
But if you could like say find an extra half hour a day to be studying something in the


00:11:16.420 --> 00:11:19.900
context of your work that you're trying to learn, that actually could make a huge difference


00:11:19.900 --> 00:11:21.020
over a couple months.


00:11:21.020 --> 00:11:22.780
So that's usually pretty good to do.


00:11:22.780 --> 00:11:28.980
I completely value in my employees somebody that really wants to increase their skill


00:11:28.980 --> 00:11:34.200
set and also cares about saving the company money and making things better.


00:11:34.200 --> 00:11:38.940
So at the very least, your management chain should know that you care about that too.


00:11:38.940 --> 00:11:40.180
They should care about that.


00:11:40.180 --> 00:11:43.340
People who care about this stuff and who are actively working on it, those are the type


00:11:43.340 --> 00:11:44.540
of people you want.


00:11:44.540 --> 00:11:48.540
The ones that don't complain, that are just going to like work on that old 20 year old


00:11:48.540 --> 00:11:51.900
technology, like that's fine that they're great employees and they're doing that, but


00:11:51.900 --> 00:11:54.180
that's, that's not going to push you guys forward.


00:11:54.180 --> 00:11:57.540
So definitely, I think people should see this as a positive.


00:11:57.540 --> 00:11:58.540
Awesome.


00:11:58.540 --> 00:12:03.540
Speaking of making and making things better, DigitalOcean has made online cloud storage


00:12:03.540 --> 00:12:07.180
for apps much, much better with their new thing called Spaces.


00:12:07.180 --> 00:12:11.480
So check out spaces at do.co/python.


00:12:11.480 --> 00:12:15.240
And the idea is it's a similar service to Amazon S3, right?


00:12:15.240 --> 00:12:21.780
You have a just a cloud storage, you can have either private or public things stored up


00:12:21.780 --> 00:12:24.580
there on huge, huge amounts of data.


00:12:24.580 --> 00:12:28.420
If your app has a process, a bunch of pictures, and you got to store the picture somewhere


00:12:28.420 --> 00:12:33.760
instead of jamming them in the database, put the gigs of pictures up in spaces.


00:12:33.760 --> 00:12:39.200
And it's really easy to adopt because it uses the same API's as s3.


00:12:39.200 --> 00:12:45.240
So tools like the transmit app I use on my Mac, I just pointed at the URL for spaces


00:12:45.240 --> 00:12:47.740
and I tell it an s3 thing and it just works.


00:12:47.740 --> 00:12:54.680
So that's super cool and easy to do the pricing is so much better than s3 $5 a month flat


00:12:54.680 --> 00:13:01.080
for 250 gigs of storage, a terabyte of outbound bandwidth, which would be like $90 alone on


00:13:01.080 --> 00:13:06.600
S3. And then it's just one cent per gigabyte instead of nine. So definitely, definitely check


00:13:06.600 --> 00:13:11.480
it out. I'm using it for this podcast and many other things. The audio you're listening to came


00:13:11.480 --> 00:13:16.600
over it. So how about that? It's super easy to use. And it's a great deal and very predictable.


00:13:16.600 --> 00:13:24.120
So do.co/python and check out DigitalOcean Spaces. Let's talk about visualizing things as


00:13:24.120 --> 00:13:29.160
well here. So the last week you brought up that deep dive inside of garbage collection. That was


00:13:29.160 --> 00:13:33.880
a super good article and I really appreciated getting a look at how the reference counting GC


00:13:33.880 --> 00:13:39.720
worked, about how the actual mark and sweep garbage collector that would solve the cycle


00:13:39.720 --> 00:13:44.760
problem worked, how Python uses that combination of them, and a lot of the really nice details about


00:13:44.760 --> 00:13:48.600
at this number it behaves differently if it's bigger or smaller, right? These little cutoffs


00:13:48.600 --> 00:13:54.520
are always fun to know. There are many different garbage collection algorithms of which reference


00:13:54.520 --> 00:13:58.960
counting and mark and sweep are just one. And so this guy named Ken Fox, it's not a


00:13:58.960 --> 00:14:02.880
brand new article or anything, but it's really a cool follow-up. Wrote this thing


00:14:02.880 --> 00:14:07.400
called "Visualizing Garbage Collection Algorithms." And yeah, I think this is, if


00:14:07.400 --> 00:14:10.560
you liked the last article, you should definitely check out this one. The little


00:14:10.560 --> 00:14:16.200
videos on visualizing this are, they're kind of mesmerizing. I kind of want to


00:14:16.200 --> 00:14:20.600
like leave one up on my screen or something. They're great. Yeah, exactly. If


00:14:20.600 --> 00:14:23.240
If you could have a screensaver of visualized GCs,


00:14:23.240 --> 00:14:24.480
it would be beautiful.


00:14:24.480 --> 00:14:26.240
(laughs)


00:14:26.240 --> 00:14:27.840
We need that company that made the toasters,


00:14:27.840 --> 00:14:30.440
the flying toasters, we need them to make that, right?


00:14:30.440 --> 00:14:31.780
- Even though I covered it last week,


00:14:31.780 --> 00:14:32.680
I'm trying to remember.


00:14:32.680 --> 00:14:35.760
The Python is both a reference counting collector


00:14:35.760 --> 00:14:37.880
and a mark sweep collector, right?


00:14:37.880 --> 00:14:40.560
- Right, so by default, Python tries


00:14:40.560 --> 00:14:41.680
to use reference counting.


00:14:41.680 --> 00:14:44.580
So every time you have a pointer to an object,


00:14:44.580 --> 00:14:46.000
it increments the counter,


00:14:46.000 --> 00:14:48.420
and then once that counter goes back down to zero,


00:14:48.420 --> 00:14:49.960
then it just deletes it.


00:14:49.960 --> 00:14:53.400
The problem with all reference counting collectors are,


00:14:53.400 --> 00:14:54.820
if you have any form of cycle,


00:14:54.820 --> 00:14:57.360
that's straight up a memory leak right there, right?


00:14:57.360 --> 00:14:59.200
Parent, child, child, parent, boom,


00:14:59.200 --> 00:15:01.260
never goes to zero, never deleted.


00:15:01.260 --> 00:15:02.880
That can be a huge problem.


00:15:02.880 --> 00:15:05.640
And so there's ways to solve that.


00:15:05.640 --> 00:15:07.320
Usually that's some other kind


00:15:07.320 --> 00:15:09.960
of managed garbage collector, right?


00:15:09.960 --> 00:15:11.960
And that's why they bring in the market sweep one,


00:15:11.960 --> 00:15:14.320
'cause it goes and finds these cycles and gets rid of 'em.


00:15:14.320 --> 00:15:15.360
- One of the questions I have


00:15:15.360 --> 00:15:17.320
that I don't expect you to have the answer,


00:15:17.320 --> 00:15:18.360
I'm curious about it,


00:15:18.360 --> 00:15:22.520
is if fragmentation becomes a problem within Python or not.


00:15:22.520 --> 00:15:24.000
- I think it does, I think it does.


00:15:24.000 --> 00:15:25.600
You can actually see it in the picture.


00:15:25.600 --> 00:15:28.120
So let's go through the five visualized here.


00:15:28.120 --> 00:15:30.000
So there's actually five different types of GC.


00:15:30.000 --> 00:15:34.080
There's no GC, which just means we're just gonna allocate


00:15:34.080 --> 00:15:35.600
and not clean up stuff.


00:15:35.600 --> 00:15:37.360
Hopefully we won't spend too much memory


00:15:37.360 --> 00:15:38.260
and that'll be fine.


00:15:38.260 --> 00:15:40.080
Like that's actually a super efficient way


00:15:40.080 --> 00:15:43.360
as long as you have enough memory.


00:15:43.360 --> 00:15:44.680
And it might sound outrageous,


00:15:44.680 --> 00:15:46.880
but Apache, the Apache web server


00:15:46.880 --> 00:15:50.400
actually creates small pools of memory per request and then just throws them


00:15:50.400 --> 00:15:52.160
away and doesn't try to manage that memory.


00:15:52.160 --> 00:15:56.400
Dirt is, so, you know, I guess in like small doses that could work, there's


00:15:56.400 --> 00:15:59.960
the reference counting one and that's Python's first past, as we talked about.


00:15:59.960 --> 00:16:05.200
There's a mark and sweep collector, which goes and says, I'm going to start


00:16:05.200 --> 00:16:08.480
all the known pointers that I have follow them, the things they point to,


00:16:08.480 --> 00:16:09.160
dah, dah, dah, right.


00:16:09.160 --> 00:16:14.080
Follow all that sort of transitive closure of pointers and indicate or mark


00:16:14.080 --> 00:16:17.480
everything that is not garbage.


00:16:17.480 --> 00:16:19.040
So it's like a not garbage finder


00:16:19.040 --> 00:16:21.640
and whatever it doesn't find, well, that's garbage.


00:16:21.640 --> 00:16:25.320
And then there's some stuff more like Java and .NET


00:16:25.320 --> 00:16:26.460
and those types of things


00:16:26.460 --> 00:16:29.600
that are mark and compact collectors.


00:16:29.600 --> 00:16:31.720
All right, so Python, you asked about the fragmentation.


00:16:31.720 --> 00:16:33.080
It doesn't, as far as I know,


00:16:33.080 --> 00:16:35.040
it doesn't move the memory around


00:16:35.040 --> 00:16:37.120
and change where the pointers point.


00:16:37.120 --> 00:16:38.160
After it does a collection,


00:16:38.160 --> 00:16:40.620
it just cleans up the cycles, right?


00:16:40.620 --> 00:16:44.700
And so if you had a 10 byte object in between two things,


00:16:44.700 --> 00:16:47.380
it got cleaned up, that 10 bytes is just a hole.


00:16:47.380 --> 00:16:49.420
Maybe you can fill it, maybe you can't.


00:16:49.420 --> 00:16:50.980
But the compacting ones,


00:16:50.980 --> 00:16:53.980
those will squish the memory back together.


00:16:53.980 --> 00:16:55.740
And what's interesting about the compacting ones


00:16:55.740 --> 00:16:59.940
is allocation in a compacting collector is insanely fast.


00:16:59.940 --> 00:17:02.660
Probably faster than C++ or C


00:17:02.660 --> 00:17:06.100
because you don't have to traverse that list of open slots


00:17:06.100 --> 00:17:07.880
where your new memory might fit.


00:17:07.880 --> 00:17:10.300
You just always allocate at the end


00:17:10.300 --> 00:17:11.660
because you've compacted it down, right?


00:17:11.660 --> 00:17:14.580
So allocate means increment a pointer by,


00:17:14.580 --> 00:17:15.420
you know, you want 10 bytes,


00:17:15.420 --> 00:17:17.780
you increment the pointer by 10, done.


00:17:17.780 --> 00:17:19.660
Right, so it's pretty interesting.


00:17:19.660 --> 00:17:21.100
There's a couple of kinds.


00:17:21.100 --> 00:17:23.340
And so this goes through and visualizes all of these,


00:17:23.340 --> 00:17:24.980
and you can actually see the effect,


00:17:24.980 --> 00:17:26.500
and you can see the fragmentation


00:17:26.500 --> 00:17:28.900
that you were talking about in the reference counting one.


00:17:28.900 --> 00:17:32.180
But it's pretty cool, this set of visualizations.


00:17:32.180 --> 00:17:33.020
- Definitely.


00:17:33.020 --> 00:17:36.140
- You know, I feel like I should be using Pathlib


00:17:36.140 --> 00:17:39.340
more than I do, and I just do os.path.join


00:17:39.340 --> 00:17:41.420
and that sort of stuff that are the older style


00:17:41.420 --> 00:17:43.260
of working with paths in Python.


00:17:43.260 --> 00:17:44.300
And that's worked with me,


00:17:44.300 --> 00:17:47.580
but this article by Doug Hellman that you pull out here,


00:17:47.580 --> 00:17:50.940
this is pretty cool and it makes a solid case for Pathlib.


00:17:50.940 --> 00:17:53.460
- Yeah, actually, and so I went back and like,


00:17:53.460 --> 00:17:54.880
when did Pathlib come in?


00:17:54.880 --> 00:17:58.140
And suppose it came in, introduced in Python 3.4,


00:17:58.140 --> 00:18:00.940
so it's a Python 3 new thing.


00:18:00.940 --> 00:18:04.020
It's an object-oriented system to work with paths.


00:18:04.020 --> 00:18:05.460
So paths as objects.


00:18:05.460 --> 00:18:10.460
And like we're pointing to Doug Hellman's Python module


00:18:10.460 --> 00:18:13.720
of the week, the Python 3 version,


00:18:13.720 --> 00:18:16.920
and it's pretty good, it's a very quick read


00:18:16.920 --> 00:18:19.760
to skim over all the sort of stuff you can do.


00:18:19.760 --> 00:18:21.560
Yeah, I learned things just the other day,


00:18:21.560 --> 00:18:24.240
thinking, oh my gosh, I've been using OS too much,


00:18:24.240 --> 00:18:25.280
I should use this more.


00:18:25.280 --> 00:18:26.680
- Yeah, for sure.


00:18:26.680 --> 00:18:30.000
And I was really blown away at the way you use


00:18:30.000 --> 00:18:33.640
the division to hack the visual, right?


00:18:33.640 --> 00:18:36.400
- Like the way you use the divider, like forward slash,


00:18:36.400 --> 00:18:39.200
so you can have like one path forward slash the other path


00:18:39.200 --> 00:18:41.820
and it just joins them as if it was this thing slash


00:18:41.820 --> 00:18:43.520
that thing in the actual string, right?


00:18:43.520 --> 00:18:46.260
- And you can over, I use that division operator


00:18:46.260 --> 00:18:49.720
with either path objects or just some quote strings


00:18:49.720 --> 00:18:53.640
and characters and quotes to add things to your path.


00:18:53.640 --> 00:18:55.760
And I didn't know that it had glob in there,


00:18:55.760 --> 00:18:56.680
so that's pretty cool.


00:18:56.680 --> 00:19:00.840
And iterdir, iterdir for like iterating over files


00:19:00.840 --> 00:19:02.960
in a directory, that's pretty nice.


00:19:02.960 --> 00:19:05.240
- Right, one of the things that's annoying about os.path


00:19:05.240 --> 00:19:07.040
is if you wanna actually create directories


00:19:07.040 --> 00:19:08.320
or delete them or stuff,


00:19:08.320 --> 00:19:11.240
there's like all these unrelated ways.


00:19:11.240 --> 00:19:15.400
Like you go out to other areas, you know, like os.mkdir


00:19:15.400 --> 00:19:17.520
rather than os.path.mkdir,


00:19:17.520 --> 00:19:19.840
just funky inconsistencies.


00:19:19.840 --> 00:19:20.960
And this like brings it all together.


00:19:20.960 --> 00:19:22.880
You can like create and delete directories


00:19:22.880 --> 00:19:23.720
and things like that.


00:19:23.720 --> 00:19:26.280
- And then there's some top level stuff for concrete paths


00:19:26.280 --> 00:19:31.180
that are shortcuts like path.home and path.cwd


00:19:31.180 --> 00:19:33.840
that just work whether you're on Windows


00:19:33.840 --> 00:19:36.500
or a Linux-based POSIX system.


00:19:36.500 --> 00:19:38.140
- Yep, that's really nice.


00:19:38.140 --> 00:19:41.300
Cool, yeah, so definitely, speaking of learning new things,


00:19:41.300 --> 00:19:42.500
here's something people can learn.


00:19:42.500 --> 00:19:43.380
This is great.


00:19:43.380 --> 00:19:45.580
So we talked about visualization before,


00:19:45.580 --> 00:19:47.640
but can computers see?


00:19:47.640 --> 00:19:48.480
- Yeah, sure.


00:19:48.480 --> 00:19:49.300
- I think they can.


00:19:49.300 --> 00:19:52.460
I mean, cars, we're surprisingly close to a world


00:19:52.460 --> 00:19:55.220
where cars can drive on their own.


00:19:55.220 --> 00:19:56.060
Are you ready?


00:19:56.060 --> 00:19:56.900
- Yeah, I'm totally ready.


00:19:56.900 --> 00:19:58.780
- Yeah, I mean, we've got a whole bunch


00:19:58.780 --> 00:20:00.620
of deep learning stuff happening.


00:20:00.620 --> 00:20:03.580
NVIDIA made a car, I think we talked about this before,


00:20:03.580 --> 00:20:06.120
where they just had it observe humans


00:20:06.120 --> 00:20:07.160
and they made it go drive.


00:20:07.160 --> 00:20:09.020
And they don't know how it knows how to drive,


00:20:09.020 --> 00:20:10.620
but it can, things like this, right?


00:20:10.620 --> 00:20:13.180
They didn't teach it to drive, it just learned.


00:20:13.180 --> 00:20:16.580
And so I wanna highlight this thing called Luminoth,


00:20:16.580 --> 00:20:19.340
an open source computer vision toolkit.


00:20:19.340 --> 00:20:23.140
So this is a new computer vision toolkit for Python


00:20:23.140 --> 00:20:27.140
and it uses deep learning to understand computer vision.


00:20:27.140 --> 00:20:34.140
So basically, its main job right now is to work on object detection and classification,


00:20:34.140 --> 00:20:37.140
but they're trying to do a lot more with it, like that was the first problem they solved.


00:20:37.140 --> 00:20:40.140
So it's built Python, it uses TensorFlow and Sonnet,


00:20:40.140 --> 00:20:45.140
which is Google's deep learning framework and deep mind's graph library.


00:20:45.140 --> 00:20:48.140
So these are really cool.


00:20:48.140 --> 00:20:53.140
This is the same thing that Google is using very likely for things like its AI that just beat Go,


00:20:53.140 --> 00:21:00.060
Or, it had beat Go before, but they just announced that there's a new AI that beat Go without


00:21:00.060 --> 00:21:02.700
anyone teaching it how to play Go.


00:21:02.700 --> 00:21:07.240
So that's the news this week as well, by the way, although I don't have a link to the article.


00:21:07.240 --> 00:21:10.220
So you can super easily train this thing.


00:21:10.220 --> 00:21:15.380
It's like a couple of lines of code, and then you can start asking it to find stuff in objects.


00:21:15.380 --> 00:21:16.980
And it'll say, "That's a bike.


00:21:16.980 --> 00:21:17.980
That's a hand.


00:21:17.980 --> 00:21:18.980
That's a person.


00:21:18.980 --> 00:21:19.980
The face is over here.


00:21:19.980 --> 00:21:21.160
No, that's three people."


00:21:21.160 --> 00:21:22.160
Things like that.


00:21:22.160 --> 00:21:28.720
cool and it uses this modern state-of-the-art algorithm called region-based convolutional


00:21:28.720 --> 00:21:32.640
neural networks, R-CNNs.


00:21:32.640 --> 00:21:36.520
Even comes with GPGPU support and it's cool.


00:21:36.520 --> 00:21:43.440
They even are going to send pre-trained checkpoints for objects that is already pre-classified


00:21:43.440 --> 00:21:45.960
with some really large data sets from other challenges.


00:21:45.960 --> 00:21:46.960
>> Oh wow, that's great.


00:21:46.960 --> 00:21:47.960
>> Isn't that cool?


00:21:47.960 --> 00:21:50.960
want to go and create a project that does some sort of image


00:21:50.960 --> 00:21:54.200
classification or identifies objects in images,


00:21:54.200 --> 00:21:54.800
check this out.


00:21:54.800 --> 00:21:58.480
Because if it comes with pre-trained algorithms


00:21:58.480 --> 00:22:00.920
already, and you have a similar type of data


00:22:00.920 --> 00:22:02.400
as what they already trained it on,


00:22:02.400 --> 00:22:04.440
you might be able to just pick this up and use it.


00:22:04.440 --> 00:22:06.560
Yeah, well, one of the examples it shows


00:22:06.560 --> 00:22:08.640
is detecting dinosaurs in a picture.


00:22:08.640 --> 00:22:09.640
Yeah, that's awesome.


00:22:09.640 --> 00:22:11.640
So you could build a home security.


00:22:11.640 --> 00:22:13.720
Yeah, it'd be useful so that you could find out


00:22:13.720 --> 00:22:15.560
if a dinosaur's at the door.


00:22:15.560 --> 00:22:16.280
Don't open it.


00:22:16.280 --> 00:22:17.840
No, it's a dinosaur.


00:22:17.840 --> 00:22:18.680
- That'd be great.


00:22:18.680 --> 00:22:20.080
Like if you could come,


00:22:20.080 --> 00:22:22.680
for some reason I'm fixated on doorbells.


00:22:22.680 --> 00:22:25.220
If you come up with a doorbell that like rings differently


00:22:25.220 --> 00:22:26.600
based on what it detects.


00:22:26.600 --> 00:22:28.200
If it detects a kid,


00:22:28.200 --> 00:22:30.960
like one of your kid's friends is at the door,


00:22:30.960 --> 00:22:32.280
it could make one kind of noise.


00:22:32.280 --> 00:22:35.320
If it's a UPS guy, it can like make a package noise.


00:22:35.320 --> 00:22:37.320
I mean, wouldn't that really be a cool product?


00:22:37.320 --> 00:22:39.260
- Yeah, like a really big happy sound


00:22:39.260 --> 00:22:40.760
if it's a pizza delivery guy.


00:22:40.760 --> 00:22:41.600
- Yes.


00:22:41.600 --> 00:22:42.440
Pizza.


00:22:42.440 --> 00:22:43.600
(laughing)


00:22:43.600 --> 00:22:44.760
You've got nails.


00:22:44.760 --> 00:22:46.480
Yeah, that sounds like a very good business.


00:22:46.480 --> 00:22:47.640
Let's do that.


00:22:47.640 --> 00:22:50.680
All right, anyway, if you guys are into image recognition,


00:22:50.680 --> 00:22:51.520
check this out.


00:22:51.520 --> 00:22:53.120
It's a cool project, Illuminoth.


00:22:53.120 --> 00:22:54.480
It's fairly new.


00:22:54.480 --> 00:22:55.600
You got a bonus for us, right?


00:22:55.600 --> 00:22:58.760
- Yeah, I was gonna put this as one of my picks,


00:22:58.760 --> 00:23:02.760
but it felt kind of, anyway, there's a bonus article


00:23:02.760 --> 00:23:05.040
called The Cleaning Hand of pytest,


00:23:05.040 --> 00:23:06.960
and it's somebody else's experience


00:23:06.960 --> 00:23:09.920
of what it was like to work in Unit Test and Nose


00:23:09.920 --> 00:23:11.920
after using pytest.


00:23:11.920 --> 00:23:15.260
And I feel a little, actually, I don't feel bad at all,


00:23:15.260 --> 00:23:17.860
But at the end, he links to my book, which is good.


00:23:17.860 --> 00:23:19.380
So check that out.


00:23:19.380 --> 00:23:20.220
- Ah, that's nice.


00:23:20.220 --> 00:23:21.140
That's a nice validation.


00:23:21.140 --> 00:23:22.900
That's cool, yeah, the cleaning hand of pytest.


00:23:22.900 --> 00:23:23.740
That sounds really fun.


00:23:23.740 --> 00:23:24.560
- How about you?


00:23:24.560 --> 00:23:25.400
What's up with you?


00:23:25.400 --> 00:23:26.500
- Well, not a whole lot going on.


00:23:26.500 --> 00:23:28.080
I wanted to highlight two things.


00:23:28.080 --> 00:23:29.780
You mentioned the various PyCons going on


00:23:29.780 --> 00:23:33.380
and PyTennessee 2018 is coming up.


00:23:33.380 --> 00:23:36.100
So if you're anywhere near Nashville


00:23:36.100 --> 00:23:37.340
and you wanna go to a PyCon,


00:23:37.340 --> 00:23:39.340
you don't wanna wait until May


00:23:39.340 --> 00:23:42.220
to go to the big, big PyCon in Cincinnati.


00:23:42.220 --> 00:23:44.480
I think it's somewhere in Ohio this year.


00:23:44.480 --> 00:23:47.040
You can go in February 10th and 11th,


00:23:47.040 --> 00:23:49.860
you can go to one in Nashville, Pi Tien.


00:23:49.860 --> 00:23:51.640
So check that out, that's really awesome.


00:23:51.640 --> 00:23:52.480
- That'd be fun.


00:23:52.480 --> 00:23:54.700
- Yeah, I was thinking of trying to go,


00:23:54.700 --> 00:23:57.780
but it turns out that my wife's already out of town


00:23:57.780 --> 00:23:59.360
that week, and with children,


00:23:59.360 --> 00:24:01.560
we can't both be out of town the same week.


00:24:01.560 --> 00:24:04.180
So that sort of squashed that.


00:24:04.180 --> 00:24:06.200
The other thing really quick is I wanted to point out,


00:24:06.200 --> 00:24:08.360
a movie, it's not super new, it's like a couple years old,


00:24:08.360 --> 00:24:09.680
but I think people in this audience


00:24:09.680 --> 00:24:11.640
will really appreciate it.


00:24:11.640 --> 00:24:12.840
Are you into gaming, Brian?


00:24:12.840 --> 00:24:13.680
- No.


00:24:13.680 --> 00:24:15.940
- I'm not either, and so I'm kind of oblivious


00:24:15.940 --> 00:24:18.660
to this world and what has happened to it


00:24:18.660 --> 00:24:20.420
in the last five years, but there's this movie


00:24:20.420 --> 00:24:22.820
called All Work and All Play, it's available on Netflix,


00:24:22.820 --> 00:24:27.820
I linked to the trailer, and it is a really interesting


00:24:27.820 --> 00:24:30.140
look inside what has been going on


00:24:30.140 --> 00:24:31.460
in the world of professional gaming.


00:24:31.460 --> 00:24:33.940
So if you're into that, there's basically,


00:24:33.940 --> 00:24:36.320
they had the World Championship of Gaming,


00:24:36.320 --> 00:24:39.820
they had it in Poland, and there's some big upsets


00:24:39.820 --> 00:24:41.660
and surprises, and I think they said


00:24:41.660 --> 00:24:45.700
hundred thousand people attended in person. I mean it's like insane. So if you


00:24:45.700 --> 00:24:48.940
haven't been paying attention to this, this movie is pretty


00:24:48.940 --> 00:24:53.980
eye-opening. So this is people playing video games? This is a competition of


00:24:53.980 --> 00:24:58.300
League of Legends players. I think there were six teams. Okay. Six or eight, no


00:24:58.300 --> 00:25:01.780
eight teams I think. And then these are people watching the games being played


00:25:01.780 --> 00:25:06.540
live in person. So you're not a gamer either? We found two nerds talking


00:25:06.540 --> 00:25:11.500
to each other and both of them are not gamers? No, not really. I mean my... What are


00:25:11.500 --> 00:25:16.860
the odds. I know it's pretty low I guess. My pastime is to work on software


00:25:16.860 --> 00:25:20.540
projects. That's my game is like solving software problems not you know made-up


00:25:20.540 --> 00:25:23.740
game problems. Every now and I'll play an iPad game or something but nothing major.


00:25:23.740 --> 00:25:28.860
Yeah okay well cool. All right well thanks a lot. You bet and I'll catch you


00:25:28.860 --> 00:25:32.300
next week. Thanks everyone for listening. Bye.


00:25:32.300 --> 00:25:36.540
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes


00:25:36.540 --> 00:25:43.740
bytes that's Python bytes as in b y t e s and get the full show notes at Python bytes dot fm if you


00:25:43.740 --> 00:25:47.820
have a news item you want featured just visit Python bytes dot fm and send it our way we're


00:25:47.820 --> 00:25:53.260
always on the lookout for sharing something cool on behalf of myself and Brian Okken this is Michael


00:25:53.260 --> 00:25:57.340
Kennedy thank you for listening and sharing this podcast with your friends and colleagues

