
00:00:00.000 --> 00:00:08.180
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 46 recorded October 4th


00:00:08.180 --> 00:00:13.780
2017 I'm Michael Kennedy and I'm Brian Ocken and we've got a bunch of cool stuff lined up for you as always


00:00:13.780 --> 00:00:17.220
But before we get to it, we have some kind of big news, right? We do


00:00:17.220 --> 00:00:21.060
Yes, we have a new sponsor a brand new sponsor for Python bytes


00:00:21.060 --> 00:00:24.860
Who's come on to actually support a bunch of the show DigitalOcean. Oh, that's awesome


00:00:24.860 --> 00:00:28.780
Yeah, so they want to let you guys know about this thing called spaces


00:00:28.780 --> 00:00:32.780
which is kind of like S3 but 10 times better and the audio you're listening to


00:00:32.780 --> 00:00:35.980
actually came to you over it. So we'll talk more about that later. I want to hear


00:00:35.980 --> 00:00:41.580
about spicy code. I want to hear about SciPy lectures. I misread that.


00:00:41.580 --> 00:00:48.220
Spicy SciPy. All the same. Yeah, it's all the same. You threw me off. I'm like what


00:00:48.220 --> 00:00:53.860
story are you looking at man? Anyway, SciPy lecture notes. I saw I hadn't come


00:00:53.860 --> 00:00:58.300
across this before but they did an update just recently. It looks like


00:00:58.300 --> 00:01:01.780
they update it about once a year to make sure it's all current. You know for


00:01:01.780 --> 00:01:05.540
somebody that's doing just-in-time learning for scientific Python usage


00:01:05.540 --> 00:01:09.500
this is pretty darn cool. Their tagline is "One document to learn


00:01:09.500 --> 00:01:15.240
numerics, science, and data with Python" and it runs the gamut. It starts off


00:01:15.240 --> 00:01:19.140
with a Python language tutorial if you want to take it. You can learn about


00:01:19.140 --> 00:01:25.300
NumPy, Matplotlib, SciPy. It's got topics like debugging and optimizing, image


00:01:25.300 --> 00:01:30.660
manipulation and things like how to deal with statistics and machine learning even.


00:01:30.660 --> 00:01:34.660
Yeah, this is really cool. I think a lot of people are getting into data science and getting


00:01:34.660 --> 00:01:39.220
into Python because of it. But also, I just think this is a great way to learn a lot of


00:01:39.220 --> 00:01:45.540
these techniques, right? These, these little short focused, I Python notebook style of examples.


00:01:45.540 --> 00:01:50.580
Yeah. And for somebody that really needs to just jump in and find the way they have it set up,


00:01:50.580 --> 00:01:54.180
It's almost like a table of contents for a book or reference book.


00:01:54.180 --> 00:01:59.340
So you can just jump in and try to learn whatever you need today just right away.


00:01:59.340 --> 00:02:01.700
You know what's cool about the JIT stuff is it has prerequisites.


00:02:01.700 --> 00:02:07.620
It says, like, for example, on the profiling part, it says a prerequisite is you must understand


00:02:07.620 --> 00:02:08.620
line profiler.


00:02:08.620 --> 00:02:09.620
Oh, okay.


00:02:09.620 --> 00:02:10.620
Yeah, it's pretty cool.


00:02:10.620 --> 00:02:14.260
I thought it was a great source for people that really aren't patient enough to go through


00:02:14.260 --> 00:02:16.380
a course or really don't know what they need to learn yet.


00:02:16.380 --> 00:02:17.380
What do you think?


00:02:17.380 --> 00:02:18.380
That's like 95% of people.


00:02:18.380 --> 00:02:23.260
Yeah, especially since like we've talked about before, that Python is often a language that


00:02:23.260 --> 00:02:25.700
people pick up after their primary language.


00:02:25.700 --> 00:02:31.620
Yeah, well, and also, I think we're increasingly asked and expected to build more and more


00:02:31.620 --> 00:02:34.940
complicated apps bringing together more and more different disciplines.


00:02:34.940 --> 00:02:40.140
So would it be unreasonable to say I would like you to write a web application that talks


00:02:40.140 --> 00:02:46.180
to the database, but also uses machine learning, and the GPU like that I can see being a totally


00:02:46.180 --> 00:02:49.500
normal requests now, whereas those used to be their own specialties, right?


00:02:49.500 --> 00:02:54.540
So this ability to jump in and pick up a little bit on demand is only going to be more required,


00:02:54.540 --> 00:02:55.540
I think.


00:02:55.540 --> 00:03:00.980
Yeah, and they also split up some of the Python stuff into some of the beginner stuff you


00:03:00.980 --> 00:03:04.780
just kind of have to know to start with, and then they have some more advanced things a


00:03:04.780 --> 00:03:05.780
little bit later.


00:03:05.780 --> 00:03:06.780
Yeah, nice.


00:03:06.780 --> 00:03:12.280
So the first thing I want to talk about this week is desktop notifications.


00:03:12.280 --> 00:03:17.400
And this caught my eye because I feel like I've said this a couple times, like one of


00:03:17.400 --> 00:03:21.880
the weaker points of Python is the whole desktop GUI type of thing, right?


00:03:21.880 --> 00:03:25.180
I know you can do it, but it's just not as easy as it should be.


00:03:25.180 --> 00:03:29.860
And so here's a real simple and easy way to build a notification like a desktop Toast


00:03:29.860 --> 00:03:33.000
type of notification for Linux using Python.


00:03:33.000 --> 00:03:34.000
Well, that's cool.


00:03:34.000 --> 00:03:36.600
Yeah, so I don't know what what you mean by Toast.


00:03:36.600 --> 00:03:40.800
Well, so you're sitting there and there's like a little thing that pops out and say


00:03:40.800 --> 00:03:43.980
say on Mac it's in the top right and Windows it's in the bottom right by the clock, it


00:03:43.980 --> 00:03:48.960
would pop up and say, "Your friend just liked your thing on Twitter," or "Somebody invited


00:03:48.960 --> 00:03:54.720
you to connect on LinkedIn," or "Your server just went down, your boss is paging you, they're


00:03:54.720 --> 00:03:55.720
upset."


00:03:55.720 --> 00:03:57.240
>> DAN APPELQUIST I finally get the toast reference.


00:03:57.240 --> 00:03:58.240
Thanks.


00:03:58.240 --> 00:03:59.240
>> DAN APPELQUIST Because it pops up.


00:03:59.240 --> 00:04:00.560
At least in Windows it pops up.


00:04:00.560 --> 00:04:04.880
I guess if you tilt your toaster on the right, then in Mac OS it's also toast?


00:04:04.880 --> 00:04:05.880
I don't know.


00:04:05.880 --> 00:04:12.200
Anyway, here's an example, a little app that says, "Let's write a thing that will do web


00:04:12.200 --> 00:04:17.240
scraping against a Bitcoin value location, and it'll go to the website and pull that


00:04:17.240 --> 00:04:20.800
off and give you a periodic notification of the value of Bitcoin."


00:04:20.800 --> 00:04:25.320
While that's not super valuable, it does show you a really interesting use case of this


00:04:25.320 --> 00:04:31.080
package called notify2, which if you have something actually practical and interesting


00:04:31.080 --> 00:04:33.760
you want to notify people about, that's a pretty cool little use case.


00:04:33.760 --> 00:04:35.880
- I think, actually, I think I might actually use this.


00:04:35.880 --> 00:04:36.720
This would be great.


00:04:36.720 --> 00:04:37.960
- Cool, what would you do with it?


00:04:37.960 --> 00:04:40.040
- For instance, we've got a bunch of remote machines.


00:04:40.040 --> 00:04:42.200
For me, I've got a bunch of VMs that are dealing


00:04:42.200 --> 00:04:45.480
with builds and whatever, and some way to keep track of them,


00:04:45.480 --> 00:04:46.660
make sure everything's alive.


00:04:46.660 --> 00:04:47.500
- Yeah, that's cool.


00:04:47.500 --> 00:04:49.740
Like a build, a pass build failed,


00:04:49.740 --> 00:04:52.520
machine no longer responsive type of notifications.


00:04:52.520 --> 00:04:53.760
Yeah, that's awesome.


00:04:53.760 --> 00:04:54.600
That'd be really fun.


00:04:54.600 --> 00:04:57.800
It looks like a couple lines of code and you got it going.


00:04:57.800 --> 00:04:58.920
So that's really cool.


00:04:58.920 --> 00:05:01.840
Would you consider performance,


00:05:01.840 --> 00:05:05.360
like if your app becomes much slower after a check-in,


00:05:05.360 --> 00:05:08.760
like a performance degradation, like a failed build?


00:05:08.760 --> 00:05:10.440
- Well, yeah, definitely.


00:05:10.440 --> 00:05:11.440
- And how would you test for that?


00:05:11.440 --> 00:05:13.940
- Well, funny you should ask.


00:05:13.940 --> 00:05:18.320
The next topic is a tool called PyTest Benchmark.


00:05:18.320 --> 00:05:19.840
And this actually came up because,


00:05:19.840 --> 00:05:23.000
not because of, because I'm actually looking for this.


00:05:23.000 --> 00:05:25.300
I need to have chunks of functionality


00:05:25.300 --> 00:05:27.220
that we need to know whether or not they're,


00:05:27.220 --> 00:05:29.360
we need to time them, make sure they're not getting slower


00:05:29.360 --> 00:05:32.760
with successive releases of the software.


00:05:32.760 --> 00:05:36.320
And what's interesting is the much slower or much faster


00:05:36.320 --> 00:05:39.400
or just very random timing,


00:05:39.400 --> 00:05:41.120
people might actually notice that


00:05:41.120 --> 00:05:42.920
if you're dog footing your own application


00:05:42.920 --> 00:05:45.920
and you're using it, you might notice this.


00:05:45.920 --> 00:05:49.320
It's the subtle things like a measurement is now,


00:05:49.320 --> 00:05:51.360
it used to be two seconds and now,


00:05:51.360 --> 00:05:53.200
and it was for like lots of releases


00:05:53.200 --> 00:05:54.840
and now it's two and a half seconds.


00:05:54.840 --> 00:05:58.000
Normal users might not notice it right then,


00:05:58.000 --> 00:06:00.360
but it sure be good to check this.


00:06:00.360 --> 00:06:02.360
So this is a PyTest benchmark,


00:06:02.360 --> 00:06:06.080
and it's a very easy little thing you can add into your code


00:06:06.080 --> 00:06:08.360
in your PyTest testing to say,


00:06:08.360 --> 00:06:12.080
"Hey, this chunk of code, it needs to be at least this fast."


00:06:12.080 --> 00:06:14.960
And at first you don't know how fast it should be.


00:06:14.960 --> 00:06:18.720
So there's a lot of tools within it to do some graphing


00:06:18.720 --> 00:06:20.320
and table driven,


00:06:20.320 --> 00:06:22.400
showing you what the numbers are right now.


00:06:22.400 --> 00:06:25.600
And then also an ability to have a golden,


00:06:25.600 --> 00:06:29.520
some golden numbers and save off benchmark data into a JSON file.


00:06:29.520 --> 00:06:34.080
And then on future runs, compare against that. So I'm going to use it.


00:06:34.080 --> 00:06:38.200
Yeah, that looks super interesting, actually. And it has nice graphs over time


00:06:38.200 --> 00:06:43.540
and things like that. I mean, sometimes timing doesn't matter, but other than


00:06:43.540 --> 00:06:46.680
like how users feel about it, but you know, in certain types of real time


00:06:46.680 --> 00:06:51.680
systems or trading systems, there are actual numbers you cannot fall below. If


00:06:51.680 --> 00:06:57.120
you're processing inbound data in real time and it's appearing every, you know, 100 milliseconds.


00:06:57.120 --> 00:07:00.500
You have to be lower than 100 milliseconds in the processing time, right? Or you won't


00:07:00.500 --> 00:07:01.500
be able to keep up.


00:07:01.500 --> 00:07:06.400
Often Python's used for other things too, like I've heard that some people use it to


00:07:06.400 --> 00:07:08.240
control test instruments.


00:07:08.240 --> 00:07:10.020
Yes, that's possible.


00:07:10.020 --> 00:07:15.960
So for instance, checking to make sure even application turn on and measurement times


00:07:15.960 --> 00:07:21.060
don't slow down because these instruments are used in production lines and it'll slow


00:07:21.060 --> 00:07:23.780
down your customers production line if you slow down.


00:07:23.780 --> 00:07:24.780
Yeah, absolutely.


00:07:24.780 --> 00:07:27.420
All sorts of factory automation and all kinds of things.


00:07:27.420 --> 00:07:28.420
Cool.


00:07:28.420 --> 00:07:29.740
All right, so that's really nice.


00:07:29.740 --> 00:07:32.580
I definitely if I had a use case for that, I would definitely use it.


00:07:32.580 --> 00:07:36.620
I just don't have anything that I can say it must be this fast or it's a problem, but


00:07:36.620 --> 00:07:40.580
it still would be cool to actually see the speed over time.


00:07:40.580 --> 00:07:44.780
Now before we get on to the next one, let me say thanks to DigitalOcean and just let


00:07:44.780 --> 00:07:46.020
you guys know about Spaces.


00:07:46.020 --> 00:07:48.780
So you probably heard of Amazon S3, right?


00:07:48.780 --> 00:07:51.040
I think that was their first thing.


00:07:51.040 --> 00:07:57.040
But like I said, digitalization just really spaces and I definitely think it's better.


00:07:57.040 --> 00:07:59.800
Soon as I heard about it before they even said, Hey, I want to sponsor the show and


00:07:59.800 --> 00:08:01.200
have you tell the world about it.


00:08:01.200 --> 00:08:02.640
I'm like, I'm switching to this thing.


00:08:02.640 --> 00:08:07.200
So for one, it's like nine times cheaper than AWS.


00:08:07.200 --> 00:08:09.360
It's super predictable pricing.


00:08:09.360 --> 00:08:10.440
There's all kinds of benefits.


00:08:10.440 --> 00:08:14.760
You can use the same tools as you use to manage your s3 thing.


00:08:14.760 --> 00:08:16.720
So same API's and everything.


00:08:16.720 --> 00:08:21.220
So for example, I use this cool program called transmit for my Mac to manage all my files


00:08:21.220 --> 00:08:25.420
in S3, just pointed at DigitalOcean Spaces and it just keeps working.


00:08:25.420 --> 00:08:26.420
It's awesome.


00:08:26.420 --> 00:08:33.360
So it's like $5 a month, 250 gigs for free in storage, a terabyte for free in bandwidth.


00:08:33.360 --> 00:08:40.560
That is quite expensive if you pay nine cents per gigabyte at AWS, but it's completely free


00:08:40.560 --> 00:08:41.560
here.


00:08:41.560 --> 00:08:46.380
And it's a really nice service just as fast, but much more predictable.


00:08:46.380 --> 00:08:48.140
And even inbound data is 100% free.


00:08:48.140 --> 00:08:49.440
So check them out.


00:08:49.440 --> 00:08:51.880
It's really a super simple API.


00:08:51.880 --> 00:08:55.540
It's one you're familiar with the tools work and you can actually get whether you're a


00:08:55.540 --> 00:08:58.960
new or existing customer, you get two months free.


00:08:58.960 --> 00:09:04.060
If you just go to do.co slash Python do co slash Python.


00:09:04.060 --> 00:09:05.060
So check it out.


00:09:05.060 --> 00:09:06.060
That's great.


00:09:06.060 --> 00:09:07.060
Cool.


00:09:07.060 --> 00:09:08.060
Yeah, it's super cool project.


00:09:08.060 --> 00:09:12.900
out with it and I'm happy to be using it for this podcast and other stuff.


00:09:12.900 --> 00:09:17.900
So we've talked, you've talked more than I have, but we both talked a fair amount about


00:09:17.900 --> 00:09:23.660
projects how they do packaging, Python packaging, how you should structure those, and so on.


00:09:23.660 --> 00:09:28.980
So I want to highlight an article that is, it's a fun article, but it's super in depth


00:09:28.980 --> 00:09:34.140
and a deep look inside of how Python works, and how packages are built and why they're


00:09:34.140 --> 00:09:35.140
built that way.


00:09:35.140 --> 00:09:37.180
It's an article by Vicky Boykus,


00:09:37.180 --> 00:09:40.780
and it's called Alice in Python Project Land.


00:09:40.780 --> 00:09:42.820
So it's got some cool little graphics and stuff,


00:09:42.820 --> 00:09:44.540
but the idea is like,


00:09:44.540 --> 00:09:48.380
she's a data scientist learning data science


00:09:48.380 --> 00:09:49.780
and those things, so doing a lot of Java


00:09:49.780 --> 00:09:50.620
and doing a lot of Python.


00:09:50.620 --> 00:09:52.860
It's like, look, Python is so much better,


00:09:52.860 --> 00:09:56.340
except for it's really hard to package up things.


00:09:56.340 --> 00:09:58.620
Like, how do I take some code that I've written


00:09:58.620 --> 00:10:01.060
and make it so that I could give it to you


00:10:01.060 --> 00:10:03.100
and you could use it, for example.


00:10:03.100 --> 00:10:04.260
So instead of just going,


00:10:04.260 --> 00:10:06.660
These are the four steps you do to create a Python package.


00:10:06.660 --> 00:10:11.060
She said, let's look at the internals of how Python actually works and how it runs,


00:10:11.060 --> 00:10:13.540
how it understands and links things together.


00:10:13.540 --> 00:10:18.100
And so you not just know how to put things together, but you understand why.


00:10:18.100 --> 00:10:21.780
So very, very interesting article, pretty in depth.


00:10:21.780 --> 00:10:24.980
So packaging has always been kind of this weird thing that you just follow the steps.


00:10:24.980 --> 00:10:25.620
You can check this out.


00:10:25.620 --> 00:10:26.420
It's a good article.


00:10:26.420 --> 00:10:29.860
Like you said, it's in depth, which makes it kind of a long article,


00:10:29.860 --> 00:10:31.300
but the writing is really good.


00:10:31.300 --> 00:10:33.380
So it moves along pretty fast.


00:10:33.380 --> 00:10:36.980
Yeah, it sure does. It sure does. And answers a lot of questions like, should you set up


00:10:36.980 --> 00:10:43.620
tools to use pip and should what does dunder and net.py do? Should I mess with Python path?


00:10:43.620 --> 00:10:47.380
Should I not? And another thing that I saw that she referenced in there was pretty cool. It's


00:10:47.380 --> 00:10:52.100
called pip rex. Have you seen this? No. Yeah. So I think pip rex, you pointed at your code,


00:10:52.100 --> 00:10:56.900
and it looks at all your imports, and it then knows what to create for your requirements.txt.


00:10:56.900 --> 00:11:01.620
Cool. So instead of remembering like, oh, yeah, there was that thing that I use Colorama or


00:11:01.620 --> 00:11:03.740
or whatever and I forgot to put in the requirements file


00:11:03.740 --> 00:11:04.580
so it's not gonna work.


00:11:04.580 --> 00:11:05.700
Like this will just discover it.


00:11:05.700 --> 00:11:06.740
It's really cool.


00:11:06.740 --> 00:11:10.080
So, yep, if you wanna get like an understanding


00:11:10.080 --> 00:11:13.580
of how Python packaging and assembly of modules


00:11:13.580 --> 00:11:15.800
at runtime works, definitely check out this article.


00:11:15.800 --> 00:11:17.820
It's super approachable, but well done.


00:11:17.820 --> 00:11:20.180
- Next article, how to teach technical concepts


00:11:20.180 --> 00:11:21.660
with cartoons.


00:11:21.660 --> 00:11:22.700
Love technology.


00:11:22.700 --> 00:11:26.180
So I personally, since I came from computer science


00:11:26.180 --> 00:11:27.740
from the art, fine arts actually,


00:11:27.740 --> 00:11:29.380
I started out in fine arts.


00:11:29.380 --> 00:11:34.260
And I actually gave up because I was frustrated with my ability to draw.


00:11:34.260 --> 00:11:40.000
But drawing things to help people understand concepts, it's very, it helps.


00:11:40.000 --> 00:11:41.800
It's easier to understand things.


00:11:41.800 --> 00:11:45.100
And nobody expects you to draw really great pictures.


00:11:45.100 --> 00:11:50.940
This article starts off, I love this, it starts off with just saying that she draws not that


00:11:50.940 --> 00:11:51.940
great.


00:11:51.940 --> 00:11:55.180
It has really three horrible pictures of a dog, a cat, and an elephant.


00:11:55.180 --> 00:11:58.940
I don't think I can do better, but they're not great drawings.


00:11:58.940 --> 00:12:03.860
But just then going through and talking about how people should use drawings more when trying


00:12:03.860 --> 00:12:07.240
to teach things and some tips on making them more personable.


00:12:07.240 --> 00:12:08.860
I think it's a really cool idea.


00:12:08.860 --> 00:12:15.400
You certainly can personalize and humanize technical concepts if you use pictures.


00:12:15.400 --> 00:12:17.560
Like you said, they don't have to be super fancy.


00:12:17.560 --> 00:12:20.500
So she has a dog, a cat, an elephant and those sorts of things.


00:12:20.500 --> 00:12:26.860
But you know, not far down, she says, oh, let's do something about a mutex and actually


00:12:26.860 --> 00:12:32.860
represents how mutexes are used to like for shared memory or something like that, right?


00:12:32.860 --> 00:12:36.860
And it's completely approachable, but somehow it just makes it much more.


00:12:36.860 --> 00:12:41.700
If you looked at the formal definition of a mutex, like, oh my gosh, what is that thing?


00:12:41.700 --> 00:12:43.540
But here it's like, oh, okay, well, that's totally simple.


00:12:43.540 --> 00:12:49.780
I think you can really convey a lot and sort of disarm people with some nice drawings.


00:12:49.780 --> 00:12:55.620
One of the things I like about this article as well is it itself is a mix of hand


00:12:55.620 --> 00:13:00.300
lettering just for normal printing and some simple drawings with text. That's


00:13:00.300 --> 00:13:04.860
what the tutorial is and it breaks it up a lot and I think a lot of technical


00:13:04.860 --> 00:13:07.700
people when they're trying to teach something they'll think a drawing is a


00:13:07.700 --> 00:13:11.380
good idea but then they'll get out a tool to make all the lines straight and


00:13:11.380 --> 00:13:15.380
draw it with vector graphics and sometimes I think just a pen and paper


00:13:15.380 --> 00:13:19.620
might help convey the information better. Yeah yeah absolutely I think this is


00:13:19.620 --> 00:13:23.100
really cool and hopefully inspire some people to do a little more a little more


00:13:23.100 --> 00:13:27.180
freehand stuff. It doesn't always have to be perfect. So keeping it graphical for


00:13:27.180 --> 00:13:32.580
our last item, I want to share the Halo with you. So Halo is a project called


00:13:32.580 --> 00:13:38.060
Beautiful Terminal Spinners in Python, which is what it sounds like. It's a


00:13:38.060 --> 00:13:43.060
really simple library that will give you sort of I'm loading or I'm working or I'm


00:13:43.060 --> 00:13:47.100
thinking type of spinners and a lot of cool features. So you have a little


00:13:47.100 --> 00:13:51.540
spinner go around and you have different styles. You have successful outcomes,


00:13:51.540 --> 00:13:53.100
outcomes, failed outcomes.


00:13:53.100 --> 00:13:57.420
So like this little spinner will spin and then it'll go to like a check mark if it succeeds.


00:13:57.420 --> 00:14:01.460
Or if it fails, it'll go to like a cross and you could make it red or something like this,


00:14:01.460 --> 00:14:02.460
right?


00:14:02.460 --> 00:14:03.640
So that's, that's really cool.


00:14:03.640 --> 00:14:07.860
We talked about progress bars, where you have the progress going across, you know, the,


00:14:07.860 --> 00:14:11.500
I think one of the better ones is TQDM.


00:14:11.500 --> 00:14:14.340
Sometimes you don't know what the progress is going to be, right?


00:14:14.340 --> 00:14:20.460
Like I hate progress bars that go it's, it's 5%, it's 5%, it's 90%, 91%, and then it goes


00:14:20.460 --> 00:14:25.100
forever and then finally it's done right there's a great xkcd i'll put in the show notes it's


00:14:25.100 --> 00:14:29.580
really fun about the guy who built the windows progress bar file copy progress bar but sometimes


00:14:29.580 --> 00:14:33.020
progress bars aren't the answer there's a reason i'm bringing it up but little spinners sort of


00:14:33.020 --> 00:14:37.100
solve that problem because it doesn't indicate progress it's just like we're busy and so here's


00:14:37.100 --> 00:14:42.460
a really cool way to uh put that into your program it's very simple and it's it really


00:14:42.460 --> 00:14:47.340
looks nice too yeah definitely and it has a unicorn a colorful unicorn who doesn't want that


00:14:48.540 --> 00:14:51.100
>> I'm not sure how the unicorn displays progress though.


00:14:51.100 --> 00:14:52.820
>> No, maybe in the horn.


00:14:52.820 --> 00:14:56.100
>> That would be cool if the horn had colored.


00:14:56.100 --> 00:14:59.660
>> Yes, like the horn flashed like rainbow.


00:14:59.660 --> 00:15:00.540
>> Yeah.


00:15:00.540 --> 00:15:03.660
>> I don't know if it does that or not, but it should.


00:15:03.660 --> 00:15:06.340
But if you're looking to add some user feedback like,


00:15:06.340 --> 00:15:08.060
"Hey, we're busy, we're not locked up,


00:15:08.060 --> 00:15:10.420
Halo, super easy, very cool."


00:15:10.420 --> 00:15:13.420
That's it, Brian, for our topics. You got anything else?


00:15:13.420 --> 00:15:15.340
>> I don't think they would have made a full story,


00:15:15.340 --> 00:15:18.340
but I wanted to let people know that the Python,


00:15:18.340 --> 00:15:21.220
I think it's 363 is out now.


00:15:21.220 --> 00:15:22.700
So go upgrade.


00:15:22.700 --> 00:15:24.340
I don't know if there's anything major in it.


00:15:24.340 --> 00:15:26.460
I haven't looked through it, but it's around.


00:15:26.460 --> 00:15:28.380
So keeping current is good.


00:15:28.380 --> 00:15:32.140
Then there's also a bug fix release I noticed in PyTest.


00:15:32.140 --> 00:15:33.780
That's around. I'm not sure what's in it,


00:15:33.780 --> 00:15:36.780
but again, it's around so people can pay attention.


00:15:36.780 --> 00:15:39.660
>> Yeah. Okay, very cool. So check those out.


00:15:39.660 --> 00:15:42.580
>> The last thing I wanted to mention is I haven't been,


00:15:42.580 --> 00:15:44.420
I warned people that I was going to start


00:15:44.420 --> 00:15:46.580
podcasting again, but it took me a while.


00:15:46.580 --> 00:15:47.580
You warned him.


00:15:47.580 --> 00:15:48.580
Look out, I'm going to do it.


00:15:48.580 --> 00:15:49.760
Yeah, there are a couple.


00:15:49.760 --> 00:15:54.740
So at the end of September and just a couple days ago, I released a couple different test


00:15:54.740 --> 00:15:58.500
and code episodes, one of them related to the testing pyramid.


00:15:58.500 --> 00:16:02.580
And the last one, 32, is an excellent one by an amazing speaker.


00:16:02.580 --> 00:16:06.060
It's with an amazing speaker named David Hussman.


00:16:06.060 --> 00:16:07.300
And he's a brilliant man.


00:16:07.300 --> 00:16:08.300
Yeah, that's really cool.


00:16:08.300 --> 00:16:09.460
And I'm glad you got that one out.


00:16:09.460 --> 00:16:10.460
That's awesome.


00:16:10.460 --> 00:16:11.460
How about you?


00:16:11.460 --> 00:16:12.460
Anything new going on?


00:16:12.460 --> 00:16:13.460
No, nothing new.


00:16:13.460 --> 00:16:14.660
I'm working on my courses like crazy.


00:16:14.660 --> 00:16:19.000
But the announcement's going to have to wait until next week for anything to be actually


00:16:19.000 --> 00:16:20.280
out for anyone to check out.


00:16:20.280 --> 00:16:21.840
>> Well, thanks a lot for doing this today.


00:16:21.840 --> 00:16:22.840
>> You bet.


00:16:22.840 --> 00:16:25.440
It was great to catch up with you and share all these ideas with everyone.


00:16:25.440 --> 00:16:26.440
Catch you later.


00:16:26.440 --> 00:16:28.760
Thank you for listening to Python Bytes.


00:16:28.760 --> 00:16:31.280
Follow the show on Twitter via @PythonBytes.


00:16:31.280 --> 00:16:34.400
That's Python Bytes as in B-Y-T-E-S.


00:16:34.400 --> 00:16:37.680
And get the full show notes at PythonBytes.fm.


00:16:37.680 --> 00:16:41.400
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:16:41.400 --> 00:16:42.400
way.


00:16:42.400 --> 00:16:44.880
a lookout for sharing something cool.


00:16:44.880 --> 00:16:48.360
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:16:48.360 --> 00:16:51.400
Thank you for listening and sharing this podcast with your friends and colleagues.

