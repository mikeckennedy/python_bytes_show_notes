00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06 This is episode 404, recorded October 7th, 2024.

00:00:11 I'm Michael Kennedy.

00:00:12 And I'm Brian Okken.

00:00:14 And this episode is brought to you by Scout APM.

00:00:17 We will, of course, tell you more about them later.

00:00:18 The link is in the podcast player show notes right at the top.

00:00:21 Brian, I've been looking for this episode for a while and I just can't find it, man.

00:00:27 I was like, where do I go?

00:00:30 404.

00:00:30 Everywhere I go, it's 404.

00:00:31 What's going on?

00:00:32 Yeah, I don't know.

00:00:35 We'll find it.

00:00:37 Let's make it.

00:00:38 It's going to be a journey.

00:00:39 We're going to try to get our way through it.

00:00:41 Speaking of a journey, you want to stay in touch with us, hit by them by Scout APM.

00:00:46 Click on newsletter.

00:00:47 Enter your info there.

00:00:48 We'll keep you up to date.

00:00:49 Brian will send you some show notes.

00:00:50 Find us on Mastodon and other social places.

00:00:54 And even subscribe right here on YouTube if you're watching the video.

00:00:58 And with that, were you able to find an item for your first item today?

00:01:03 Well, I almost did it.

00:01:04 So, okay.

00:01:05 The first item, I really wanted to cover Python 3.13.

00:01:09 Because Python 3.13 is released on October 7th.

00:01:13 And today is, text notes, October 7th.

00:01:16 So, it's today, right?

00:01:18 So, I went to python.org and go, well, the latest, it still says latest is 3.12.

00:01:24 So, they're working on it.

00:01:26 Thomas Wooters and others.

00:01:27 It's a process to get it out.

00:01:29 But it's really out already.

00:01:30 So, you just can't see it.

00:01:31 If you go to downloads, it still says 3.12.

00:01:33 I'm sure it'll be updated soon.

00:01:35 However, we've got the link for 3.13.0.

00:01:39 It's really not that complicated.

00:01:40 Downloads, release, python-3.1.3.0.

00:01:45 And then you got it.

00:01:46 So, it's got a stable release of 3.13.0.

00:01:49 I've been playing with it this morning and having a lot of fun.

00:01:53 If you go down to the bottom of this link, there's where the installers are.

00:01:57 The pre-built installers, if you want to grab those.

00:02:00 Or you can install it yourself if you want.

00:02:02 Or build it yourself.

00:02:03 But I'm on a Mac right now.

00:02:05 So, I grabbed the Mac installer.

00:02:07 And I want to cover some of the new stuff in 3.13.

00:02:11 But I really wanted to play with the multi-threading stuff, which I haven't yet.

00:02:14 I just wanted to make sure it was enabled.

00:02:16 And there's a bit of a trick.

00:02:18 So, if you look in...

00:02:20 Maybe it's not in here.

00:02:22 It's in the What's New page.

00:02:23 So, if you go to the What's New, it does talk about the Python, the macOS, and Windows installers.

00:02:30 And there's a link somewhere in here.

00:02:32 But we'll include the link also.

00:02:35 That when you're installing it, and on the Mac, when I did it, you go through this install process.

00:02:41 You have to hit customize and click the free-threaded.

00:02:46 Because free-threading is off by default.

00:02:49 So, when you install it, you have to turn it on.

00:02:51 So, just remember that.

00:02:53 And I will play with the free-threading later.

00:02:56 So, what do we have new in 3.13?

00:02:59 I think we've covered this before.

00:03:00 But now we actually have 3.13.

00:03:02 So, we can play with it.

00:03:04 We have the interactive interpreter changes, which...

00:03:08 Actually, let's back up a little bit.

00:03:09 This isn't even called out here.

00:03:11 My favorite feature of 3.13 is exit.

00:03:14 Oh, I guess it is here.

00:03:17 Direct REPL support for help, exit, and quit.

00:03:21 And thank you.

00:03:23 Thank you.

00:03:23 Thank you.

00:03:24 Thank you.

00:03:24 Whoever worked on this.

00:03:25 Because it used to say, oh, did you mean to exit out?

00:03:28 You have to type exit with the parans or quit with the parans.

00:03:31 And if you know what I want to do, just do it.

00:03:35 So, you know what it does.

00:03:36 It's really cool.

00:03:36 I can imagine somebody was like, well, what if we have a variable named exit and you want

00:03:41 to see its value?

00:03:42 But if there's no variable defined, just quit.

00:03:45 I love it.

00:03:46 So, exit and quit now work.

00:03:49 I didn't know quit worked.

00:03:50 That's neat.

00:03:51 So, the other couple things in interactive, there's a lot of stuff in the interactive REPL

00:03:57 that's changed.

00:03:58 Multi-line editing, amazing.

00:04:00 So, you type in a multi-line thing and you get the three dots, which is great.

00:04:05 But when you want to go and type something wrong and you want to go change that, now you

00:04:10 can go back and you can just hit the up arrow and it works.

00:04:14 It's great.

00:04:16 So, I'm really enjoying that.

00:04:17 There's F1 for command history.

00:04:20 History is, we've had history before, but now if you exit and then start the REPL again,

00:04:26 history is still there.

00:04:27 It preserves all of your history from the session.

00:04:29 Oh, that's nice.

00:04:30 Super nice for when you're debugging something, trying it out.

00:04:33 And the colors are amazing.

00:04:35 So, they've turned on colors by default.

00:04:37 So, in prompts and tracebacks.

00:04:40 So, even just having the little prompt be in a color, it's nice.

00:04:43 It helps.

00:04:44 So, love that.

00:04:45 We've also got improved error messages.

00:04:47 Like, before, if you named, like, random is built in, one of the built-in things.

00:04:53 But if you named a module named random, it would just mess up.

00:04:56 And it would, like, it would say stuff like, you know, module random has no attribute.

00:05:01 But now it says, hey, you've already considered renaming your own module something else because you're messing up.

00:05:08 So, if you rename them.

00:05:09 If you name a module or a script, the same thing as a built-in or now as one of your installed third-party libraries, Python will tell you that you've messed up, which is nice.

00:05:20 There's other improvements, too.

00:05:22 Like, if you misspell a keyword argument, it will suggest that maybe you had the correct spelling.

00:05:30 It will suggest that.

00:05:31 That's pretty cool.

00:05:32 And then, of course, there's lots of changes in 3.13.

00:05:35 But the REPL, I'm excited about.

00:05:37 I'm also excited about the error messages and free-threaded Python.

00:05:42 So, there's a lot of other stuff, too.

00:05:43 So, check out the What's New.

00:05:45 But I really am looking forward to playing with the free-threading.

00:05:48 Yeah, this is amazing.

00:05:50 I'm really excited to see this here.

00:05:51 I actually can't believe that free-threaded Python is a thing.

00:05:54 I know.

00:05:55 It's like.

00:05:56 It's been so long.

00:05:56 The journey's been so long.

00:05:58 I mean, I was walking this morning and I saw a pig flying through the sky.

00:06:01 It had imported free-threaded Python, rather than imported anti-gravity.

00:06:07 That's what it did.

00:06:08 Yes.

00:06:09 Yeah.

00:06:09 So, I know that a lot of people have worked a lot, long and hard, to make that work.

00:06:14 So, I'm looking forward to it.

00:06:16 Now, free-threading is still officially experimental.

00:06:19 So, I don't know what that means.

00:06:22 If they're going to take it back from.

00:06:23 Please don't take it away from us.

00:06:25 But we'll see.

00:06:26 Yeah.

00:06:27 The original PEP that got it accepted, 703 or something like that, said,

00:06:31 we are allowing this in.

00:06:32 But if it causes too much trouble, we're taking it back out.

00:06:35 Which I've never seen in a PEP.

00:06:36 Maybe it's happened before.

00:06:37 But we approve it.

00:06:38 But we might unapprove it.

00:06:40 Might unapprove it.

00:06:41 We'll turn this car around.

00:06:43 If you keep fighting, we'll turn it around.

00:06:45 Yeah.

00:06:45 That's right.

00:06:46 Don't make me turn this car.

00:06:47 Don't make me pull over.

00:06:48 Speaking of pulling over, this was supposed to be out a week ago, Brian.

00:06:54 Yeah.

00:06:54 Yeah.

00:06:55 And apparently, it was pushed back due to performance issues or some kind of issue with the incremental GC.

00:07:03 Right.

00:07:04 And I'll put the Python, the discuss.python.org link in my extras.

00:07:08 But I'm not going to cover it separately.

00:07:10 But it's kind of irrelevant.

00:07:12 Things are out now.

00:07:13 But yeah.

00:07:14 Very cool.

00:07:14 All right.

00:07:15 Well, what do you got for us next, Python?

00:07:16 Michael?

00:07:17 Well, let's stick with some core language topics and stuff like that.

00:07:22 I want to talk about PyPI bandwidth and PEP 759 external wheel hosting.

00:07:30 So right now, when you pip install, uv pip install, whatever, you go to get something and you,

00:07:37 as a publisher of a package like Flask, you send that to pypi.org, maybe as a wheel, maybe

00:07:44 as a multi-platform variations of different wheels, if it's got to compile differently or

00:07:48 something.

00:07:48 And then people pip install that and it downloads from there.

00:07:51 That results in an insane amount of traffic.

00:07:54 I actually want to talk a little bit more about that later in general.

00:07:57 But it's an insane amount of traffic.

00:07:59 Over 66 petabytes a month, which is six-figure level of bandwidth costs.

00:08:05 And luckily, Fastly, the CDN company, is basically donating all that bandwidth at reasonably high

00:08:13 expense for them.

00:08:14 Probably not the same as retail, but whatever wholesale that is in bandwidth, I'm sure it's

00:08:18 still a lot.

00:08:19 And they announced a five-year plan or five-year commitment to the PSF to do that at PyCon.

00:08:25 All right.

00:08:26 They're on the big keynote stage.

00:08:27 That was nice.

00:08:28 Thank you, Fastly.

00:08:29 However, there's still problems with this, even though they're covering it.

00:08:33 What if Fastly changes their mind eventually?

00:08:35 But more importantly, there's hard limits on how large your project's overall usage on

00:08:43 pypi.org can be.

00:08:45 It gets no individual package can be bigger than 100 megs.

00:08:49 You can't have 10 gigs total across all platforms, across all releases, things like that, right?

00:08:55 You can't apply for exceptions, but it's not great.

00:08:57 What if you could just say, here's my wheel, but when you actually download it, download it

00:09:02 from over there.

00:09:02 Download it off of Microsoft.com if it's a Microsoft package.

00:09:06 Or download it off of explosion.ai if it's some sort of spaCy package.

00:09:13 Those things have to be quite large.

00:09:14 A lot of their models that you pip install.

00:09:16 I think they have to get an exception to be even uploaded in the first place.

00:09:19 All right.

00:09:20 So that's what this is about.

00:09:20 It's by Barry Warsaw.

00:09:21 Ethan Smith.

00:09:22 Delegate is Donald Stufft, who is a person largely behind the rewrite of pypi.org.

00:09:29 So here's the deal.

00:09:31 Brian, if you had a wheel, which is the metadata about a package and all of its binary details

00:09:38 and its source code and all that, and you ripped off a lot of the wheel stuff, like the binary

00:09:44 bits, what would you be left with?

00:09:46 I don't know.

00:09:46 A rim.

00:09:47 A wheel rim, you know?

00:09:49 Oh.

00:09:50 So this PEP literally defines a new package format called a rim file.

00:09:58 And the rim file is basically the wheel without the binary.

00:10:00 Instead, it's got a URL to where the binary lives.

00:10:02 And a checksum of the binary, which may already be there anyway, but it's left in the rim file,

00:10:07 if not added to it.

00:10:09 Okay.

00:10:09 Interesting.

00:10:10 So basically, you upload just the metadata if you want to participate in this.

00:10:15 And then you point somewhere else.

00:10:17 And there's a lot of motivation, things they tried, things that didn't work, limits.

00:10:22 You can see in this pep, they list the limits that I talked about.

00:10:26 And all the details, but most importantly, there's a security section way down here.

00:10:35 I was worried about that.

00:10:36 So, yeah.

00:10:36 Yes.

00:10:37 Here.

00:10:37 As well as stability constraints.

00:10:39 But so for example, the wheel checksum must be included in rim files.

00:10:44 Once it's uploaded, just like current wheels, it can't change.

00:10:47 Yeah.

00:10:48 So here's my metadata.

00:10:49 That's where the thing lives.

00:10:50 Here's the hash of it.

00:10:52 So it can't be tampered with.

00:10:53 It must be served over HTTPS.

00:10:56 Okay.

00:10:57 And you're only allowed to do this if you get pre-approved by the PyPI admin.

00:11:01 So it's not just all sorts of chaos.

00:11:04 People just upload and stuff everywhere.

00:11:06 All right.

00:11:07 But a lot of consideration about like malware and things like that.

00:11:10 And also a bunch of stuff about stability.

00:11:12 Like external wheels must be hosted over SSL.

00:11:16 And not just that, but it actually must be signed by Mozilla's root certificate store, which

00:11:21 is interesting.

00:11:22 And they should use CDNs.

00:11:24 They must be stable, et cetera.

00:11:26 What do you think?

00:11:26 So who would do this?

00:11:28 I mean, because then the person with the package doing this, they'd have to pay the hosting fees.

00:11:34 Or get it on GitHub and point to it as a raw or something, you know?

00:11:37 Oh, yeah.

00:11:38 Something like that.

00:11:39 I don't know.

00:11:40 Oh, okay.

00:11:41 Or if you're a big company and you want to ship ML models and you'd rather have more control

00:11:47 over that and how it works, right?

00:11:50 You could set that.

00:11:51 I don't think small individuals are going to be like, hey, I'd love to cover a terabyte

00:11:55 of bandwidth charges a month for no reason.

00:11:57 Yeah.

00:11:58 Right.

00:11:58 Well, also, like you said, it's somebody that's got a, it's going to be a large one.

00:12:04 You're not going to do this for just a little Python only package.

00:12:08 Yeah, exactly.

00:12:09 It's very unlikely.

00:12:09 Right.

00:12:10 It's very unlikely.

00:12:11 So they said this is only about hosting the binary downloads, not packages, package indexes,

00:12:18 package listings, none of that stuff.

00:12:20 Because that's already supported through having just a separate private white label.

00:12:25 You run it yourself.

00:12:26 PyPI, mirror, something like that, right?

00:12:29 Yeah.

00:12:29 I think this is cool, actually.

00:12:30 Neat.

00:12:31 Yeah.

00:12:31 Flexibility is good.

00:12:32 I think it's, I think it's all right.

00:12:34 So anyway, very cool.

00:12:35 That's, that's what I wanted to cover.

00:12:37 And before we move on, how about a quick shout out to our sponsor?

00:12:41 Yep.

00:12:41 Let me tell you real quick about Scout APM.

00:12:45 They're big supporters of Python Bytes.

00:12:47 So we appreciate that very much.

00:12:49 So if you are tired of spending hours trying to find the root cause of issues impacting your performance,

00:12:55 then you owe it to yourself to check out Scout APM.

00:12:58 They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:13:07 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:13:17 And then you say, oh no, why is it so slow?

00:13:20 Why are you doing 200 database queries for what should be one?

00:13:22 So you can find out things like that.

00:13:24 And it links it back directly to source code so you can spend less time in the debugger and healing logs and just finding the problems and moving on.

00:13:31 And you'll love it because it's built for developers by developers.

00:13:34 It makes it easy to get set up.

00:13:36 Seriously, you can do it in less than four minutes.

00:13:38 So that's awesome.

00:13:39 And the best part is the pricing is straightforward.

00:13:42 You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:13:47 And I just learned this, Brian.

00:13:50 They also have, they provide the pro version for free to all open source projects.

00:13:55 So if you're an open source maintainer and you want to have Scout APM for that project, just shoot them a message or something on their pricing page about that.

00:14:02 So you can start your free trial and get instant insights today.

00:14:06 Visit pythonbytes.fm/scout.

00:14:09 The link is in your podcast player show notes as well.

00:14:11 And please use that link.

00:14:12 Don't just search for them because otherwise they don't think you came from us.

00:14:16 And then they'd stop supporting the show.

00:14:18 So please use our link pythonbytes.fm/scout.

00:14:20 Check them out.

00:14:21 How about the next one for you?

00:14:23 I feel like, just give people a little heads up.

00:14:25 We've got some, that's a pie test coming up here.

00:14:27 What do we got?

00:14:28 If you didn't know it, Python 3.13 is out.

00:14:30 So we already covered this.

00:14:34 However, it's got the free threading thing going on.

00:14:38 How do you know if your project supports it?

00:14:40 So that's the question that Anthony Shaw and others at, where was this at again?

00:14:46 Was that PyCon JP?

00:14:48 I think that's PyCon Japan.

00:14:50 Is that right?

00:14:51 I think so.

00:14:52 Okay.

00:14:52 So it was one of their sprints.

00:14:54 Looks like seven or eight people, Anthony, Mike, a bunch of people worked on this.

00:15:00 And the idea is that you'd like to be able to test that your project and your code works on the free threaded, right?

00:15:08 So if you're like, especially support libraries and packages.

00:15:13 So what, how do you do that?

00:15:15 And one of the thoughts was to just test, just run it.

00:15:19 But with the free threading turned on.

00:15:23 But pytest normally runs in single thread mode by default.

00:15:26 So how about XTest?

00:15:28 Because that's multiprocessing, right?

00:15:30 Yes, it's multiprocessing.

00:15:31 It's not multithreading.

00:15:32 So Anthony and others made this plugin.

00:15:36 It's called pytest-FreeThreaded.

00:15:39 And link in the show notes, of course.

00:15:41 But they made the plugin to be able to run the tests in a thread pool with the guild disabled and help identify that your tests are thread safe.

00:15:52 So, you know, as long as your tests possibly are testing your code in such a way to test that, great.

00:15:59 But at least your tests will be free thread safe compatible.

00:16:03 Anyway, they tested the first library that was marked as compatible with free threading.

00:16:10 I don't know how to do that.

00:16:11 So I guess that's a to-do item to look that up.

00:16:14 Okay.

00:16:15 So you think it might go in the classifiers of the package metadata?

00:16:18 I'm not sure.

00:16:19 Oh, okay.

00:16:20 All right.

00:16:20 Well, we'll take a look at that.

00:16:22 Anyway, they tested one and it caused a segfault in CPython.

00:16:27 So not really compatible if you're segfaulting.

00:16:30 So I haven't tried this out yet, but I'm going to try it on a few projects anyway.

00:16:36 So Python free threaded will help test this.

00:16:39 Well, I think this is awesome.

00:16:41 And some people might perceive this like, oh, it just means a performance boost.

00:16:45 But if you're writing code that's meant to be supported for free threaded Python, you should test it in that style as well.

00:16:52 Not just in some limited way, right?

00:16:54 Yeah.

00:16:56 And even if your tests pass, I think it would make sense to look at the different parts of your library to make sure that it really makes sense that your tests are actually testing your library in such a way that you have fairly good confidence.

00:17:13 But, you know, mileage may vary.

00:17:15 But this is a good step in the right direction.

00:17:18 So thanks to Anthony and others for doing this.

00:17:21 Yeah, that's awesome.

00:17:22 Speaking of Anthony, I was not going to point this out, but now that you mentioned it, just published an episode on Talk Python with him designing effective load tests for your Python app.

00:17:33 Nice.

00:17:33 Yeah, that's a really fun one.

00:17:35 So people can check that out.

00:17:36 But what I'm actually talking about for this section is more pytests.

00:17:40 Ryan, how did you not get this one?

00:17:42 pytest edit.

00:17:43 Do you know this?

00:17:44 No.

00:17:44 Okay, so here's the deal.

00:17:46 You're on the terminal CLI sitting there running something and you run into an error and you're like, ah.

00:17:52 My test crashed or my test failed rather.

00:17:54 I just want to see what's up.

00:17:56 So one way to do that is to see what test failed.

00:17:59 Go open your editor, find your project, load it up, search around until you find it.

00:18:03 Or the other way is to install pytest-edit from Mr. Minnow.

00:18:08 That's the GitHub name.

00:18:09 And then just type pytest-edit and it'll open a pre-configured editor to the line of the failing test.

00:18:17 Oh, wow.

00:18:18 Yeah, so you can say pytest-edit and it'll show you the last one.

00:18:21 Or you can say some index.

00:18:23 So for example, you can say edit equals two.

00:18:25 And it'll open the third failing test because, of course, it's zero-based.

00:18:28 Or negative two will open the second to the last one.

00:18:31 So you can kind of hone in on it with this number here.

00:18:34 And then you just set up your editor.

00:18:35 If you don't set it up, you get VI or Vim or even Windows.

00:18:40 On Windows, you get notepad.

00:18:42 So I recommend picking a better editor.

00:18:47 But anyway, you just set an environment variable to what you want your editor to be.

00:18:51 And I got a ton of extras to cover, so I don't want to go too deep on this one.

00:18:54 But there it is.

00:18:55 Neat.

00:18:56 Speaking of extras, what do you got for us?

00:18:58 Any?

00:18:58 I've got zero extras this week.

00:19:01 I must have stolen them all.

00:19:03 Look at my tabs.

00:19:03 All right.

00:19:06 Well, let's just jump into the extras then.

00:19:07 Extra, extra.

00:19:09 So I got a bunch here, but they're all pretty quick.

00:19:11 Last week, you spoke about Jade, D-J-A-D-E, for formatting Django templates, right?

00:19:21 Kind of like black or rough, but instead of being for Python, it's for Django templates and

00:19:26 HTML and so on, which is awesome.

00:19:27 So I'm linking to something from Adam Chains, Django pre-commit hook.

00:19:32 Or sorry, Jade pre-commit hook.

00:19:33 So if you want this to just happen automatically, there you go.

00:19:36 Super easy, right?

00:19:37 Cool.

00:19:37 Yes.

00:19:38 This one is really fun.

00:19:39 And remember I talked about Polyfill, Polyfill.js and somebody took over the domain.

00:19:45 I don't remember.

00:19:45 It was, I think it was sold even, but if it wasn't sold, it was taken over because it lapsed

00:19:50 or whatever.

00:19:50 However, it got into some nefarious hands and they took over polyfill.io, boot CDN, boot

00:19:56 CSS, static file.

00:19:58 And they had basically rewritten a whole bunch of CDN served JavaScript to hundreds of thousands

00:20:04 of websites with malware that would then go on to the visitors of those websites.

00:20:08 It's bad.

00:20:09 The only reason I'm bringing this is a quick follow-up.

00:20:20 How do they know?

00:20:21 That person had published, they accidentally published their Cloudflare secret keys.

00:20:30 And so then the security researchers will, you know, they basically logged into Cloudflare

00:20:37 and just looked at their cloud setup, which I think this is awesome.

00:20:41 Yeah.

00:20:44 And then, yeah, funny thing out in the audience.

00:20:47 We'll share that in a second.

00:20:48 All right.

00:20:48 This one is also really cool.

00:20:50 Over at pythonbytes.fm, created that site seven years ago.

00:20:55 How long have we been there?

00:20:55 Eight years?

00:20:56 Well, when I created it, I created it with Bootstrap, okay?

00:20:58 Because Bootstrap was probably the nicest way at that time to get a good looking site that's

00:21:04 consistent, responsive, all those things up in Atom, right?

00:21:07 Well, if you look at the Bootstrap CSS file, it's about 140 kilobytes, which is a lot to

00:21:14 just be serving as one of your static resources on every web request, right?

00:21:18 But it's pretty gnarly.

00:21:20 You don't want to mess with it, right?

00:21:21 Like, what are you using?

00:21:22 I don't know.

00:21:23 And what's the knock-on effect?

00:21:24 So I ran across this thing called Purge CSS, which is a Node.js CLI tool, but it doesn't

00:21:30 really matter how it's implemented, right?

00:21:31 It's just a CLI tool.

00:21:32 And you can run this thing against your CSS file, and you can say, hey, this CSS file,

00:21:39 I would like you to look at all the styles that I'm using, look at the CSS file, and if

00:21:44 there's any styles in there I'm not using, take them out of the CSS file.

00:21:48 Oh, wow.

00:21:48 Yeah.

00:21:49 So, and it doesn't have to work on just HTML.

00:21:53 I pointed at chameleon templates, or it could be Jinja templates, or we just talked about

00:21:57 Django templates.

00:21:57 You just give it a, like a star, star, slash, star, whatever your template extension is,

00:22:03 like .j, or if it was Jinja, or whatever.

00:22:06 And then it'll go through and look at all of those that are being used, and then it'll

00:22:10 rip them out, rip out all the stuff that wasn't.

00:22:12 So now, for example, if you go to pythonbytes.org, and you click on the CSS file, it's like 20k,

00:22:20 25k, something like that.

00:22:22 So it's six, seven times smaller, and all I had to do is run a command line thing against

00:22:26 it.

00:22:27 So maybe you're not using enough bootstrap.

00:22:30 I feel like that's still 20kb of bootstrap.

00:22:33 That's a lot of bootstrap.

00:22:34 I love your attitude, but there we go.

00:22:38 Last week, on the first go-round of 3.13 release, there's also Python 3.12.7 released.

00:22:47 So just so you know, if you're not ready for 3.13, there's also a new version of 3.12.

00:22:52 I want to give a quick shout-out to a video by Hynek.

00:22:55 It says, uv is the future of Python packaging.

00:22:58 Snake box emojis.

00:23:00 Anyway, this is a really good video.

00:23:02 Hynek is getting his YouTube game on quite well, and he's fun to watch.

00:23:07 So check that out.

00:23:08 I'll link that as well.

00:23:09 And I still got some more.

00:23:11 We're just tabs bumping around.

00:23:13 Chris over on Faucet On pointed out, hey, love all this uv talk, grouping these together

00:23:18 on 4.3 and others and so on.

00:23:19 It's interesting to be seeing it show up just broadly now.

00:23:23 And things like Home Assistant is now using it to reduce download and setup times.

00:23:27 Oh, yeah.

00:23:28 Cool.

00:23:28 Yeah, kind of cool.

00:23:29 Over here, Brian, do you think people are getting tired of LLMs and hearing about AI tools?

00:23:34 Yes.

00:23:35 I feel like there's a lot of AI fatigue out there.

00:23:38 I'm like, ah, but is that just me projecting this onto people?

00:23:41 Is this real?

00:23:42 So I posted on Faucet On and on Twitter and said, hey, just thinking about topics, how

00:23:49 do you guys feel about LLM topics and spending time talking about them?

00:23:52 Only 4% said, more LLMs, please.

00:23:55 22% said, ah, they're fine.

00:23:57 38% said, I've had enough.

00:24:00 And 36% fully said, if you say AI one more time, I will pile drive you.

00:24:04 Well, you just said it like four times.

00:24:07 Oh, no.

00:24:07 It's going to hurt so much, but I had to say it.

00:24:09 But that's 74% of people saying, oh, man, I've had enough.

00:24:12 Yeah.

00:24:12 So anyway.

00:24:13 One of the things that would have been funny is if you'd have added, do you want us to start

00:24:17 talking about blockchain again instead?

00:24:19 Oh, my gosh.

00:24:21 Yes.

00:24:22 That would definitely do it.

00:24:23 All right.

00:24:23 A couple real quick ones here.

00:24:26 JetBrains and the PSF have now released or opened up the Python developer survey 2024.

00:24:33 So check that out.

00:24:34 I'll link to how you can go and take it.

00:24:36 But yeah, everyone participate.

00:24:38 This is super important.

00:24:39 We really value all the information that we get in the spring or whenever we get the answers,

00:24:43 the responses and the write up.

00:24:44 But it's time to submit your notes.

00:24:47 Okay.

00:24:47 A couple real quick things.

00:24:49 I added a really cool way to explore courses over at Talk Python.

00:24:54 So there's a big tag cloud up at the top here.

00:24:57 And we get all the courses.

00:24:58 But now if you just click around, like if you want to find stuff about test, right, I just

00:25:03 click on testing and it'll show like your test course.

00:25:06 And this thing is super neat.

00:25:08 This is all implemented with HTMX.

00:25:10 All dynamic.

00:25:11 No page refreshes, but no JavaScript.

00:25:13 Love it.

00:25:14 Cool.

00:25:14 Anyway, go check that out.

00:25:16 And very last extra, extra, extra.

00:25:18 I wrote an article that says, let's go easy on PyPI, okay?

00:25:22 And I got some nice feedback from people on Updated.

00:25:25 But basically, it talks about a bunch of different steps that you can take to not keep that number

00:25:31 at 66 petabytes a month hitting PyPI.org, right?

00:25:36 Yeah.

00:25:37 I don't know how you feel, but my assessment is fully 75% or more of that has to be Docker

00:25:42 builds, continuous integration, all that crap, right?

00:25:45 It just, it has to be so over the top, just like machines talking to machines like, hey,

00:25:52 here's a requirements file with 200 things in it.

00:25:54 We're going to build a Docker container on it.

00:25:56 So let's start with this base one, like the Python one or whichever one, it doesn't really

00:26:00 matter and just build from it.

00:26:02 Every single time you want any kind of code change published or tested, it's going to download

00:26:08 all 200 over and over, right?

00:26:10 Yeah.

00:26:10 And then you're testing it against multiple versions of Python.

00:26:13 So it downloads it that many more times.

00:26:15 That's a really good point.

00:26:16 Yeah.

00:26:16 So this article talks you through different steps you can take to cache it over and over

00:26:22 faster and faster.

00:26:22 So basically, almost, unless a requirement changes, it will not ever, ever touch PyPI.org.

00:26:30 Ever.

00:26:30 Right?

00:26:31 So it starts out just saying, oh yeah, you just pip install your requirements.

00:26:34 What's wrong with that?

00:26:35 You know, every code change causes a download.

00:26:37 And then maybe you could run the requirements, copy just the requirements file over and run

00:26:43 it first and then do it.

00:26:45 That way, only if a requirement changes, does it get them all?

00:26:48 And then you could pre-list some of your top level requirements.

00:26:52 That would cache it in the Docker image.

00:26:54 And then after a lot of conversations with a lot of people, there's this mount command

00:26:58 that you can say for cache on a per command basis.

00:27:02 And this will cache the output to somewhere on the machine that does the building of the

00:27:08 Docker container.

00:27:09 So it'll cache either the uv or the pip cache.

00:27:12 So that way, if you get it again, it'll just go using cached version, even if it's a completely

00:27:16 fresh image, long as the machine has seen that download before, right?

00:27:20 That dependency.

00:27:21 And then finally, if you're on probably one of the biggest offenders in the sense of CI

00:27:26 on GitHub, over at GitHub, they actually have this thing called, maybe you know it, this

00:27:31 thing called a cache action or actions slash cache.

00:27:36 And you can set up a cache for your CI so that subsequent CI builds don't download and install

00:27:42 it again as well.

00:27:43 This will not just make it lighter on PyPI, but also every one of these things makes it faster

00:27:48 for you.

00:27:48 So it's like incentives are aligned.

00:27:50 Do you know what I mean?

00:27:51 Yeah.

00:27:51 Yeah.

00:27:51 That's pretty cool.

00:27:52 It's almost too bad that like GitHub itself can't notice that like multiple packages or

00:27:58 multiple builds on different projects are using the same version of something and caches.

00:28:03 Right.

00:28:04 Just have a universal pip cache or something like that.

00:28:07 One of my questions is, and I don't know if you know the answer to this, is I know that

00:28:11 uv does a lot of caching.

00:28:13 Will just using uv help with reducing hitting PyPI?

00:28:18 That's an interesting question.

00:28:20 I don't know if it'll make it less traffic.

00:28:22 It'll definitely make it faster.

00:28:24 There's no doubt about that.

00:28:25 But it might be the same traffic.

00:28:27 Okay.

00:28:27 Yeah.

00:28:28 Yeah.

00:28:28 Yeah.

00:28:28 Cool.

00:28:29 All right.

00:28:31 Henry says, set up dash uv has a cache option.

00:28:34 Excellent.

00:28:35 Excellent.

00:28:35 That's awesome to hear.

00:28:36 All right.

00:28:36 And then Jay Miller dropped in to say that he assumed he wouldn't be able to find this episode.

00:28:41 But like us, he eventually found his way.

00:28:44 And also, Tony out in the audience says, I was literally working on caching in CI while listening.

00:28:49 uv does support caching in CI too.

00:28:52 Yeah.

00:28:52 And by the way, if you're checking out these notes on the GitHub CI stuff down here for

00:28:57 the pip example, somewhere, pip, are you here?

00:29:00 If you just say this patch of .cache slash pip, if you just change that to .cache slash uv,

00:29:07 I'm pretty sure everything else will just flow from there.

00:29:10 So awesome.

00:29:11 Nice.

00:29:12 Indeed.

00:29:12 All right.

00:29:14 Let's be ready for a joke.

00:29:16 Well, I was hoping you didn't have a lost the joke.

00:29:18 So let's see if I can find it.

00:29:20 Let's see what I can find.

00:29:21 All right.

00:29:21 So, you know, when you go to a page, that's bad.

00:29:25 Like if you go to Python bytes slash blah, blah, blah, and it's not there, should it just

00:29:30 say 404?

00:29:30 No, you should have something amusing and interesting.

00:29:33 Like for us, we have a big empty microphone in a stage with nobody at the microphone that

00:29:38 just says 404.

00:29:39 Try our episodes listing instead.

00:29:41 And you can click on it and it takes you to our episodes, right?

00:29:43 That's all fun.

00:29:44 So my joke, which I think I'll just let people link to, but maybe we can find one or two just

00:29:49 give people a sense, is 28 clever and funny 404 pages.

00:29:53 So I love this.

00:29:55 These are so good.

00:29:56 It almost makes me want to like mess up a website just to see what they've got, right?

00:30:01 Like one of them is for a blue path.

00:30:03 I don't know what that is, but there's a big map with tons of little dots of like, here's

00:30:07 all the distribution of where people live around the city or things happening.

00:30:10 It says, this is everyone else.

00:30:11 And then like way over somewhere else, it has a little dot says, this is you way off

00:30:15 the map.

00:30:15 Please go find.

00:30:16 Some of them are not that great, but some of them are real good.

00:30:22 So anyway, if this kind of stuff amuses you, Pixar has one with a crying inside out person.

00:30:29 It's sad emotion.

00:30:30 Yeah.

00:30:31 Yeah, exactly.

00:30:32 Exactly.

00:30:32 Others are just weird.

00:30:34 One has a bear wearing like a gold 404 baller type.

00:30:38 Anyway, check it out.

00:30:42 Lego has a unassembled disconnected sort of thing.

00:30:45 So I thought that would be pretty good for our episode 404.

00:30:49 People can scroll through that and enjoy it.

00:30:51 Yeah.

00:30:51 And also, I love watching the, looking at these.

00:30:54 So if anybody has a, has some good 404 pages that they, that they want to share with us,

00:30:59 head on over to Mastodon and, or our show notes page and send us, send us a link to your favorite

00:31:05 404.

00:31:06 That'd be fun.

00:31:06 Yeah.

00:31:07 Awesome.

00:31:07 All right, guys.

00:31:09 Thank you.

00:31:09 Thank you everyone for listening.

00:31:11 Brian.

00:31:12 Thanks for being here as always.

00:31:13 Thanks.

