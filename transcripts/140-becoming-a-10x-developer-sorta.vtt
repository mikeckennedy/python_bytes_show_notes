
00:00:00.000 --> 00:00:04.800
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.800 --> 00:00:09.840
This is episode 140 recorded July 18th, 2019. I'm Michael Kennedy.


00:00:09.840 --> 00:00:10.640
And I'm Brian Ekin.


00:00:10.640 --> 00:00:12.720
And this episode is brought to you by DigitalOcean.


00:00:12.720 --> 00:00:15.920
Check them out at pythonbytes.fm/digitalocean. More on that later.


00:00:15.920 --> 00:00:17.360
Brian, how you been?


00:00:17.360 --> 00:00:18.320
I'm doing great.


00:00:18.320 --> 00:00:19.120
Yeah, wonderful.


00:00:19.120 --> 00:00:19.440
You?


00:00:19.440 --> 00:00:25.360
Yeah, very good. I just got back from a camping trip in Astoria right on the coast there. And


00:00:25.360 --> 00:00:27.440
it's nice to get away from the computers for a couple days.


00:00:27.440 --> 00:00:27.680
Yeah.


00:00:27.680 --> 00:00:28.480
But it's good to be back.


00:00:29.120 --> 00:00:32.920
So the Python news, it has been flowing even while I was gone.


00:00:32.920 --> 00:00:33.960
So that's pretty awesome.


00:00:33.960 --> 00:00:35.480
Let's get started with your first item.


00:00:35.480 --> 00:00:36.120
What do you got here?


00:00:36.120 --> 00:00:41.040
Well, people have been, there's, I'm not going to get into the 10 X


00:00:41.040 --> 00:00:45.680
controversy too much, but there's some 10 X developer rubbish going around


00:00:45.680 --> 00:00:50.200
Twitter recently, I think partly for clickbait, but I'm not going to hold it


00:00:50.200 --> 00:00:50.720
against her.


00:00:50.720 --> 00:00:56.240
Kate Heddleson put together a article called becoming a 10 X developer, 10


00:00:56.240 --> 00:01:01.760
ways to be a better teammate. And I read it and that's actually a lot of great


00:01:01.760 --> 00:01:06.840
advice. So a quote from her is a 10x engineer isn't someone who is 10 times


00:01:06.840 --> 00:01:10.760
better than those around them, but someone who makes those around them 10


00:01:10.760 --> 00:01:16.680
times better. Which is humbling because I don't think I do that. I try, but you know.


00:01:16.680 --> 00:01:21.480
Do you feel like that's not properly rewarded? Like in business and projects


00:01:21.480 --> 00:01:27.640
and stuff like what gets measured gets optimized, right? And if you're in an organization where they


00:01:27.640 --> 00:01:32.360
don't take that as a major factor into like how you're doing, like, well, what features did you


00:01:32.360 --> 00:01:36.360
ship? Like what things did you work on? And so on. And if your job is to kind of float around


00:01:36.360 --> 00:01:41.800
and make sure everyone is like not hung up on how to use this API, or they don't know this backstory


00:01:41.800 --> 00:01:46.520
on how to use this thing or why it is the way it is, like if you spend too much time doing that,


00:01:46.520 --> 00:01:48.680
are you like hurting your career?


00:01:48.680 --> 00:01:54.640
I think it probably definitely depends on the organization and probably even within a company it changes


00:01:54.640 --> 00:01:58.160
Based on like what division or what group you're in or something?


00:01:58.160 --> 00:01:58.640
So yeah


00:01:58.640 --> 00:02:04.520
And I've certainly seen places where it's highly valued and it's like recognized and other places where it's like well


00:02:04.520 --> 00:02:09.200
But what have you been doing? You know, it's not the best. Well there I mean there definitely has to be a balance


00:02:09.200 --> 00:02:14.600
You can't just be a cheerleader. Yeah, and a coach. We actually do need to get stuff done


00:02:14.600 --> 00:02:19.640
also. And actually I'm amused that it's a weird controversy that now that to say


00:02:19.640 --> 00:02:24.800
like that there's the 10x is 10 times better than average and I don't think


00:02:24.800 --> 00:02:28.560
it ever started out that way. I think it started out just of an acknowledgment


00:02:28.560 --> 00:02:34.240
that there's orders of magnitude between the productivity of the most productive


00:02:34.240 --> 00:02:38.640
people and the least productive people and I don't think that that's


00:02:38.640 --> 00:02:42.320
controversial. No it's definitely not. Whether or not you believe in the 10x


00:02:42.320 --> 00:02:45.780
saying these are great advice so I'm just going to run through them. Number one,


00:02:45.780 --> 00:02:50.780
create an environment of psychological safety and this there's a reference to


00:02:50.780 --> 00:02:56.340
Google study basically saying people are better creative work if they feel safe


00:02:56.340 --> 00:03:00.020
in their environment. Number two, encourage everyone to participate


00:03:00.020 --> 00:03:05.260
equally. Three, assign credit accurately and generously. Four, amplified unheard


00:03:05.260 --> 00:03:10.180
voices in meetings. I love that. Five, give constructive actionable feedback and


00:03:10.180 --> 00:03:15.260
avoid personal criticisms. Six, hold yourself and others accountable. Seven,


00:03:15.260 --> 00:03:20.260
cultivate excellence in an area that is valuable to your team. Eight, educate


00:03:20.260 --> 00:03:24.560
yourself about diversity, inclusivity, and equality in the workplace. Nine, maintain


00:03:24.560 --> 00:03:30.100
a growth mindset. And last, advocate for company policies that increase workplace


00:03:30.100 --> 00:03:33.500
equality. I don't think there's anything to argue about, but this is good stuff.


00:03:33.500 --> 00:03:37.900
Yeah, these are all great things to keep in mind, and Kate's definitely been a


00:03:37.900 --> 00:03:40.300
a voice for these types of things for a long time.


00:03:40.300 --> 00:03:44.500
So it's good to see her put it in the context of this 10x story.


00:03:44.500 --> 00:03:47.580
And I encourage people to read the article because every one of these,


00:03:47.580 --> 00:03:49.420
if you're like, I don't know how to do that,


00:03:49.420 --> 00:03:53.860
she gives actionable advice on what you can do to increase any of these.


00:03:53.860 --> 00:03:54.580
So it's good.


00:03:54.580 --> 00:03:55.100
Yeah.


00:03:55.100 --> 00:03:55.580
Cool.


00:03:55.580 --> 00:03:59.380
This next one that I want to talk about here is interesting.


00:03:59.380 --> 00:04:03.260
It's a little bit more JavaScript-y than the stuff that we normally cover.


00:04:03.260 --> 00:04:04.820
Normally it's like pure Python.


00:04:04.820 --> 00:04:07.140
But I feel like there's enough tie-ins together here.


00:04:07.140 --> 00:04:10.420
So this one comes partially to us from Doug Farrell,


00:04:10.420 --> 00:04:13.700
who's done some cool articles over at RealPython.


00:04:13.700 --> 00:04:15.980
He's been on the show before and things like that.


00:04:15.980 --> 00:04:17.580
So the first thing that he sent over


00:04:17.580 --> 00:04:21.220
is this new framework called Quasar.


00:04:21.220 --> 00:04:25.820
And Quasar builds on top of Vue.js.


00:04:25.820 --> 00:04:28.420
Now, if you're going to build some kind of front-end


00:04:28.420 --> 00:04:30.740
JavaScript thing, maybe it's going


00:04:30.740 --> 00:04:33.260
to talk to Python on the back end, a bunch of APIs


00:04:33.260 --> 00:04:34.180
you're going to write.


00:04:34.180 --> 00:04:37.120
But it's going to be mostly JavaScript and front-end stuff.


00:04:37.120 --> 00:04:39.800
Well, Vue.js, in my opinion, is really


00:04:39.800 --> 00:04:41.040
one of the best choices, right?


00:04:41.040 --> 00:04:42.960
It's simple, it's easy to get started with,


00:04:42.960 --> 00:04:44.220
it works really, really well.


00:04:44.220 --> 00:04:47.400
It's not as complicated or convoluted as like AngularJS


00:04:47.400 --> 00:04:49.280
or something like this.


00:04:49.280 --> 00:04:53.200
So Quasar, what it does is it builds on top of Vue.js,


00:04:53.200 --> 00:04:55.720
adding all sorts of cool components that you can use,


00:04:55.720 --> 00:04:59.280
and it lets you create many different types of apps.


00:04:59.280 --> 00:05:01.000
You can create a single page application


00:05:01.000 --> 00:05:02.560
that is like an app that loads.


00:05:02.560 --> 00:05:03.760
You never really navigate away,


00:05:03.760 --> 00:05:06.760
it just is constantly updating itself through JavaScript.


00:05:06.760 --> 00:05:09.360
a server-side rendered app, which is cool,


00:05:09.360 --> 00:05:10.740
a progressive web app, which is cool,


00:05:10.740 --> 00:05:13.240
but then you can also do mobile apps,


00:05:13.240 --> 00:05:15.640
Android and iOS, that's cool,


00:05:15.640 --> 00:05:19.560
and multi-platform desktop apps using Electron,


00:05:19.560 --> 00:05:22.760
like Visual Studio Code or Slack or whatever.


00:05:22.760 --> 00:05:25.680
All of that with the same code base, based on Vue.


00:05:25.680 --> 00:05:26.520
- That's cool.


00:05:26.520 --> 00:05:27.340
- That's pretty cool, right?


00:05:27.340 --> 00:05:28.880
So if you could build that, that's great.


00:05:28.880 --> 00:05:30.480
And of course, Python on the back end


00:05:30.480 --> 00:05:33.480
is obviously a super, super good choice.


00:05:33.480 --> 00:05:35.200
I mean, that's how it is for my mobile apps,


00:05:35.200 --> 00:05:37.400
but Xamarin on the front end.


00:05:37.400 --> 00:05:38.880
But like I said, it's great.


00:05:38.880 --> 00:05:40.440
There's tons of these things you can just drop in


00:05:40.440 --> 00:05:43.160
and get cool little widgets and progress bars and buttons


00:05:43.160 --> 00:05:46.440
and all the kind of things you need to build your UI.


00:05:46.440 --> 00:05:48.640
But what if it could be all Python?


00:05:48.640 --> 00:05:51.920
What if the stuff that you write on the front end


00:05:51.920 --> 00:05:53.400
or the server-side rendered bits,


00:05:53.400 --> 00:05:55.200
what if that could also be Python?


00:05:55.200 --> 00:05:56.120
That would be nice, right?


00:05:56.120 --> 00:05:56.960
- Yeah.


00:05:56.960 --> 00:05:59.000
- What I mean is to not write JavaScript


00:05:59.000 --> 00:06:02.640
in the browser, but instead write Python.


00:06:02.640 --> 00:06:05.040
And you might think, silly, no way.


00:06:05.040 --> 00:06:08.360
But there's this thing called view.py.


00:06:08.360 --> 00:06:12.120
And view.py provides all the bindings for Vue.js,


00:06:12.120 --> 00:06:16.840
runs on Brython, which is a way to put Python in the browser.


00:06:16.840 --> 00:06:18.800
And there's a bunch of cool example apps


00:06:18.800 --> 00:06:21.040
that are non-trivial that you can work with.


00:06:21.040 --> 00:06:23.560
So you just write pure Python code.


00:06:23.560 --> 00:06:25.680
If you want to create a Vue.js component,


00:06:25.680 --> 00:06:29.640
you just derive from the component class in the view.py


00:06:29.640 --> 00:06:30.160
thing.


00:06:30.160 --> 00:06:31.440
And it's pure Python.


00:06:31.440 --> 00:06:31.940
Wow.


00:06:31.940 --> 00:06:32.960
So that's pretty cool.


00:06:32.960 --> 00:06:34.840
So there's some examples right at the bottom.


00:06:34.840 --> 00:06:38.080
And you can pull those up, and you can run it, and so on.


00:06:38.080 --> 00:06:43.040
So my favorite one is this thing called the SVG graph.


00:06:43.040 --> 00:06:45.080
So they all have a demo, and they have the source,


00:06:45.080 --> 00:06:45.880
and you can run it.


00:06:45.880 --> 00:06:48.160
And the first time, it takes them maybe a couple seconds


00:06:48.160 --> 00:06:51.360
to download the Brython JavaScript and whatnot.


00:06:51.360 --> 00:06:55.880
But it's like a super cool little interactive little thing


00:06:55.880 --> 00:06:56.520
all in Python.


00:06:56.520 --> 00:06:57.520
You can check out the source.


00:06:57.520 --> 00:06:58.020
-Neat.


00:06:58.020 --> 00:06:59.200
Yeah, definitely will.


00:06:59.200 --> 00:06:59.720
That's cool.


00:06:59.720 --> 00:07:00.220
-Yeah.


00:07:00.220 --> 00:07:03.640
So I was a little hesitant to cover Quasar,


00:07:03.640 --> 00:07:07.560
because it's pure JavaScript, but if I can take view.py


00:07:07.560 --> 00:07:10.000
and then write this, then now we're talking.


00:07:10.000 --> 00:07:11.720
Now we're getting somewhere interesting.


00:07:11.720 --> 00:07:14.800
Now build on top of that, that the Electron apps


00:07:14.800 --> 00:07:18.160
don't care about how much download time it takes


00:07:18.160 --> 00:07:19.000
or whatever, right?


00:07:19.000 --> 00:07:21.240
'Cause you ship it, like one of the things included


00:07:21.240 --> 00:07:25.600
with a Electron app is Chrome, right?


00:07:25.600 --> 00:07:28.120
Which is like 60 megs or more.


00:07:28.120 --> 00:07:31.680
So who cares if you throw in an extra 200K


00:07:31.680 --> 00:07:34.360
for like a Brython JavaScript.


00:07:34.360 --> 00:07:37.160
So it could be a really cool way to build some desktop


00:07:37.160 --> 00:07:38.880
apps with Python and VJS.


00:07:38.880 --> 00:07:40.400
- Yeah, I think that's a neat idea.


00:07:40.400 --> 00:07:41.240
- Cool. - Yeah.


00:07:41.240 --> 00:07:45.320
Anyway, it's kind of a cool mix of front-end JavaScript


00:07:45.320 --> 00:07:47.560
and some Python, maybe even in the front-end.


00:07:47.560 --> 00:07:48.400
- Yeah. - Yeah, all right.


00:07:48.400 --> 00:07:49.220
What's the next one?


00:07:49.220 --> 00:07:52.560
- Well, in episode 138, we talked about regular expressions


00:07:52.560 --> 00:07:55.880
a little bit, and I made a joke on Twitter


00:07:55.880 --> 00:07:58.080
about regular expressions, and then I got a whole bunch


00:07:58.080 --> 00:08:00.420
of people giving me resources back,


00:08:00.420 --> 00:08:04.020
and there's a couple of them that I'm actually really excited about.


00:08:04.020 --> 00:08:07.420
So the first one I want to cover is a website called


00:08:07.420 --> 00:08:09.920
it's regular expressions 101.


00:08:09.920 --> 00:08:12.920
It's at regex101.com.


00:08:12.920 --> 00:08:16.020
And I kind of wish I had this a long time ago,


00:08:16.020 --> 00:08:19.620
because I know regular expressions are a little different in different languages.


00:08:19.620 --> 00:08:23.620
In this one, you can select Python or PHP or JavaScript or Go


00:08:23.620 --> 00:08:25.820
as the one you're working with.


00:08:25.820 --> 00:08:29.520
And then you can just start typing in a regular expression example,


00:08:29.520 --> 00:08:32.400
or you put in like an example string that you want to match,


00:08:32.400 --> 00:08:34.660
and maybe even some stuff you don't want to match.


00:08:34.660 --> 00:08:37.100
But then as you're typing the regular expression,


00:08:37.100 --> 00:08:38.520
it shows you and highlights


00:08:38.520 --> 00:08:40.080
the different areas where it's matching,


00:08:40.080 --> 00:08:41.440
where it's not matching.


00:08:41.440 --> 00:08:45.320
Then since we also have match groups and multiple matches,


00:08:45.320 --> 00:08:47.880
it shows you how that works too.


00:08:47.880 --> 00:08:51.120
There's also a little quick reference guide.


00:08:51.120 --> 00:08:53.080
It's actually mostly what you need.


00:08:53.080 --> 00:08:56.380
Like for instance, I always forget how to do,


00:08:56.380 --> 00:08:58.620
like if I want to match a character,


00:08:58.620 --> 00:09:02.180
but I want to match like one to three characters of that type,


00:09:02.180 --> 00:09:03.780
not just more than one.


00:09:03.780 --> 00:09:07.300
I mean, I remember that star is nothing or all,


00:09:07.300 --> 00:09:08.980
and plus is one or more,


00:09:08.980 --> 00:09:10.980
but what about if I want to match like three?


00:09:10.980 --> 00:09:12.820
How do I do that? I always forget that.


00:09:12.820 --> 00:09:14.220
That's there.


00:09:14.220 --> 00:09:17.060
If you have to generate as you're generating them,


00:09:17.060 --> 00:09:18.820
I think this is a pretty cool tool.


00:09:18.820 --> 00:09:19.820
I'm going to use this more.


00:09:19.820 --> 00:09:22.260
>> I got to say, this is really slick. I love it.


00:09:22.260 --> 00:09:23.540
You can select it like you said,


00:09:23.540 --> 00:09:25.540
you select the different language types,


00:09:25.540 --> 00:09:30.080
And it will even give you like assistance on what it means, right?


00:09:30.080 --> 00:09:35.680
So I typed dot plus and it says, oh, the dot plus matches any character except for line


00:09:35.680 --> 00:09:37.040
terminators.


00:09:37.040 --> 00:09:40.360
The plus matches one and unlimited times.


00:09:40.360 --> 00:09:44.140
And then I wrote a little capture group and it says, oh, the capture group means this


00:09:44.140 --> 00:09:45.140
and whatnot.


00:09:45.140 --> 00:09:46.140
And yeah.


00:09:46.140 --> 00:09:49.960
Oh, so like, like if you're looking at somebody else's code, for instance, and there's a regular


00:09:49.960 --> 00:09:55.760
expression you don't understand, you could pop it in here and it could like explain to


00:09:55.760 --> 00:09:56.760
you what it all means.


00:09:56.760 --> 00:10:00.280
Yeah, yeah, it's, I got to say, cool.


00:10:00.280 --> 00:10:04.680
And then if you want to see it running in action in your code, you can hit the generate


00:10:04.680 --> 00:10:09.400
function and it generates a little script for you that you can just copy and paste into


00:10:09.400 --> 00:10:12.800
a file and run it to see what it looks like.


00:10:12.800 --> 00:10:13.800
It's pretty nice.


00:10:13.800 --> 00:10:15.800
Yeah, this is a super slick little web app.


00:10:15.800 --> 00:10:20.200
If I was better at regular expressions, I'd be able to do really cool stuff, but I can


00:10:20.200 --> 00:10:22.160
just kind of write them.


00:10:22.160 --> 00:10:23.160
So it works still.


00:10:23.160 --> 00:10:24.160
It's good.


00:10:24.160 --> 00:10:30.200
And then somebody else mentioned RegExGolf, and it just doesn't teach you at all.


00:10:30.200 --> 00:10:35.760
It just has two lists of strings, and you're supposed to match the first list and not the


00:10:35.760 --> 00:10:41.440
second list with a regular expression and try to do it with the least amount of characters.


00:10:41.440 --> 00:10:46.000
So possibly not, well, I mean, you can do it with as many characters of regular expression


00:10:46.000 --> 00:10:49.960
as you want, but some of them, people have matched it with one character.


00:10:49.960 --> 00:10:51.120
I'm like, how?


00:10:51.120 --> 00:10:52.920
How did you match it with one character?


00:10:52.920 --> 00:10:58.000
Yeah, that's pretty awesome and got some spare time, I guess.


00:10:58.000 --> 00:11:03.400
Well, you know, I'm a manager and also the spare time comes with the territory.


00:11:03.400 --> 00:11:04.400
That's right.


00:11:04.400 --> 00:11:08.280
Now, this regular expression 101 is a super cool web app and I'm definitely going to save


00:11:08.280 --> 00:11:09.280
it.


00:11:09.280 --> 00:11:11.200
Any time I got to do regular expression stuff,


00:11:11.200 --> 00:11:12.280
I'm going to go back to it.


00:11:12.280 --> 00:11:14.560
Speaking of regular, tell me about our sponsor today.


00:11:14.560 --> 00:11:17.480
Yes, our regular sponsor, DigitalOcean.


00:11:17.480 --> 00:11:19.920
They've been sponsoring the show for quite a while.


00:11:19.920 --> 00:11:21.680
And they're doing all sorts of cool stuff.


00:11:21.680 --> 00:11:23.840
They got managed Postgres database services.


00:11:23.840 --> 00:11:26.440
Obviously, their main thing is running virtual machines


00:11:26.440 --> 00:11:28.440
and really quick and easy to do that.


00:11:28.440 --> 00:11:30.080
I was just logged into a bunch of mine


00:11:30.080 --> 00:11:33.120
there today to upgrade some stuff.


00:11:33.120 --> 00:11:37.360
And they also have now a Kubernetes cluster option.


00:11:37.360 --> 00:11:39.600
So they've managed Kubernetes services.


00:11:39.600 --> 00:11:40.280
It's super easy.


00:11:40.280 --> 00:11:41.940
You go over there in just a few minutes.


00:11:41.940 --> 00:11:44.560
You can have your Kubernetes cluster up and running.


00:11:44.560 --> 00:11:46.760
And they take care of all the stuff you need for that.


00:11:46.760 --> 00:11:49.080
So if you're thinking about doing anything with Docker


00:11:49.080 --> 00:11:51.760
and scaling it out, check out Kubernetes, of course,


00:11:51.760 --> 00:11:56.360
and then the Kubernetes service over at DigitalOcean.


00:11:56.360 --> 00:11:57.160
Very, very nice.


00:11:57.160 --> 00:11:59.520
And yeah, they're great supporters of the show.


00:11:59.520 --> 00:12:01.920
A lot of our infrastructure runs on what they're doing.


00:12:01.920 --> 00:12:04.200
So appreciate that and can definitely recommend them.


00:12:04.200 --> 00:12:06.480
Try them at pythonby.fm/digitalocean.


00:12:06.480 --> 00:12:10.080
and get a $50 credit for new users.


00:12:10.080 --> 00:12:13.720
Now, places like DigitalOcean and many


00:12:13.720 --> 00:12:17.240
of the other hosting spots that you might go and use,


00:12:17.240 --> 00:12:20.280
they're now offering SSD solid state drives


00:12:20.280 --> 00:12:22.280
as basically a default option.


00:12:22.280 --> 00:12:26.480
So you get really fast disk access, right?


00:12:26.480 --> 00:12:27.320
- Yeah.


00:12:27.320 --> 00:12:30.320
- Yeah, well, if you have fast disk access


00:12:30.320 --> 00:12:32.280
and you can speak properly,


00:12:32.280 --> 00:12:35.220
you could actually use that as a cache, right?


00:12:35.220 --> 00:12:39.380
So caching has huge benefits for making our apps faster.


00:12:39.380 --> 00:12:42.360
And a lot of the ways that people think about caching


00:12:42.360 --> 00:12:44.820
is they think about, I'm going to precompute some stuff


00:12:44.820 --> 00:12:47.140
and cram it into memory.


00:12:47.140 --> 00:12:47.820
And that's OK.


00:12:47.820 --> 00:12:50.500
But so if you go over to, say, DigitalOcean


00:12:50.500 --> 00:12:53.260
and you fire up a server, the server


00:12:53.260 --> 00:13:00.220
comes with 1 gig of memory, but 25 or 50 gigs of SSD.


00:13:00.220 --> 00:13:03.240
So if you're trying to squeeze a lot of performance out


00:13:03.240 --> 00:13:06.660
of your app, you could go buy a super high memory version,


00:13:06.660 --> 00:13:08.540
or you could set up a separate server that's


00:13:08.540 --> 00:13:11.280
doing Redis or something like that, which still is also


00:13:11.280 --> 00:13:12.820
going to kind of run into that issue.


00:13:12.820 --> 00:13:14.840
Or you could just use that really fast disk.


00:13:14.840 --> 00:13:16.920
So this next, the fourth item I want to talk about


00:13:16.920 --> 00:13:20.380
is something called Python-DiskCache.


00:13:20.380 --> 00:13:23.740
I'm not going to give it a huge grade for creative naming,


00:13:23.740 --> 00:13:25.540
but definitely descriptive.


00:13:25.540 --> 00:13:26.500
Yeah.


00:13:26.500 --> 00:13:29.140
So the idea is that we can basically


00:13:29.140 --> 00:13:31.860
treat this Python disk cache kind of like Redis.


00:13:31.860 --> 00:13:33.620
Like you put an item, you get an item,


00:13:33.620 --> 00:13:36.180
but it stores it on disk.


00:13:36.180 --> 00:13:38.660
And it's apparently super fast.


00:13:38.660 --> 00:13:40.180
And it's also pure Python.


00:13:40.180 --> 00:13:41.100
- I don't get it.


00:13:41.100 --> 00:13:44.520
If it came from disk and you're caching it on disk,


00:13:44.520 --> 00:13:45.360
for data that--


00:13:45.360 --> 00:13:46.220
- It might not have come from disk.


00:13:46.220 --> 00:13:49.220
What if you call like a search API or you--


00:13:49.220 --> 00:13:51.180
- Oh yeah, you're using somebody else.


00:13:51.180 --> 00:13:54.900
- Right, somebody types in, I want to find X on the website


00:13:54.900 --> 00:13:57.660
and you have to go to like do a big complex database query


00:13:57.660 --> 00:13:59.620
or an elastic search query.


00:13:59.620 --> 00:14:00.440
- Okay, got it.


00:14:00.440 --> 00:14:02.840
Instead, you could say, this key of search for this


00:14:02.840 --> 00:14:04.280
goes to bam, those results.


00:14:04.280 --> 00:14:06.560
And now you just deserialize them,


00:14:06.560 --> 00:14:08.280
like pickle or JSON or whatever.


00:14:08.280 --> 00:14:12.640
And it's just like super, super quick.


00:14:12.640 --> 00:14:15.040
Or even if you're doing computational stuff,


00:14:15.040 --> 00:14:19.720
like I know if I pass in 20 to this crazy computational


00:14:19.720 --> 00:14:21.320
method, I get this number back.


00:14:21.320 --> 00:14:24.000
Well, you can cache that.


00:14:24.000 --> 00:14:25.720
And you can cache it in memory.


00:14:25.720 --> 00:14:26.520
That's OK.


00:14:26.520 --> 00:14:30.320
You can use the FuncTools LRU cache, which is pretty cool.


00:14:30.320 --> 00:14:32.440
But even if you have enough space,


00:14:32.440 --> 00:14:36.240
it doesn't keep working across reruns of your app.


00:14:36.240 --> 00:14:38.000
So you run it once, and it does some stuff.


00:14:38.000 --> 00:14:40.520
But then as soon as it exits, it's gone from memory.


00:14:40.520 --> 00:14:41.640
Then you run it again.


00:14:41.640 --> 00:14:43.020
Well, now it's got to start over.


00:14:43.020 --> 00:14:44.840
But if it's on disk, it's persistent.


00:14:44.840 --> 00:14:45.920
So that's cool, too.


00:14:45.920 --> 00:14:49.000
Django itself has built-in caching, which is cool.


00:14:49.000 --> 00:14:51.720
But apparently, at least according to the author of this--


00:14:51.720 --> 00:14:53.800
I don't do enough Django to know for sure--


00:14:53.800 --> 00:14:57.560
but apparently, the file-based cache in Django


00:14:57.560 --> 00:14:59.840
is essentially broken.


00:14:59.840 --> 00:15:01.800
if you listen to what he says.


00:15:01.800 --> 00:15:04.240
So let me pull up the little section where he says that


00:15:04.240 --> 00:15:06.920
a calling method is random and large caches


00:15:06.920 --> 00:15:09.800
repeatedly scan cache dictionary, which is slow.


00:15:09.800 --> 00:15:11.760
You know, it could take like 60 milliseconds


00:15:11.760 --> 00:15:14.400
to store a key with a couple thousand items in the cache.


00:15:14.400 --> 00:15:16.840
Like that's kind of ridiculous.


00:15:16.840 --> 00:15:18.900
So apparently this thing, this disk cache


00:15:18.900 --> 00:15:22.240
is much, much faster and it takes micro seconds,


00:15:22.240 --> 00:15:25.640
not milliseconds, which is pretty awesome.


00:15:25.640 --> 00:15:29.180
And it's a built-in pluggable replacement


00:15:29.180 --> 00:15:30.100
for the Django cache.


00:15:30.100 --> 00:15:32.980
You can just say Django use this thing as the disk cache.


00:15:32.980 --> 00:15:33.820
- Oh, okay, nice.


00:15:33.820 --> 00:15:36.580
- Yeah, it basically uses memory map files


00:15:36.580 --> 00:15:40.700
and other database technologies to store stuff on disk,


00:15:40.700 --> 00:15:42.060
which is pretty cool.


00:15:42.060 --> 00:15:45.340
It's all C, no C, it's all Python, which is great.


00:15:45.340 --> 00:15:48.100
You'd like this, it has 100% test coverage


00:15:48.100 --> 00:15:50.300
with unit tests and hours of stress tests.


00:15:50.300 --> 00:15:51.620
- Yeah, and pytest.


00:15:51.620 --> 00:15:53.500
- Yeah, and finally, you might say,


00:15:53.500 --> 00:15:55.500
well, I've heard of other things like this, right?


00:15:55.500 --> 00:15:59.140
Like there's other types of caches like this.


00:15:59.140 --> 00:16:04.500
So there's stuff called DBM and Shelf and SQL Dict and PickleDB.


00:16:04.500 --> 00:16:06.040
And I think these are all new to me.


00:16:06.040 --> 00:16:08.860
But there's a bunch of these other similar types of things.


00:16:08.860 --> 00:16:13.300
But what's cool is they have a really great breakdown of all


00:16:13.300 --> 00:16:17.180
the features you might care about, like for DBM, is it atomic?


00:16:17.180 --> 00:16:19.060
For Shelf, is it thread safe?


00:16:19.060 --> 00:16:19.780
And so on.


00:16:19.780 --> 00:16:21.940
And so it really shows you a lot of places


00:16:21.940 --> 00:16:25.620
why you might care about using this in addition to just, oh,


00:16:25.620 --> 00:16:26.700
here's yet another.


00:16:26.700 --> 00:16:28.060
I like the comparison.


00:16:28.060 --> 00:16:31.140
Looking at that table, it looks like disk cache is based on,


00:16:31.140 --> 00:16:33.300
or it stores the data in SQLite,


00:16:33.300 --> 00:16:35.580
and we know SQLite's really fast, so.


00:16:35.580 --> 00:16:37.820
- Yeah, you already get indexes for efficient lookups


00:16:37.820 --> 00:16:39.700
and inserts and stuff like that.


00:16:39.700 --> 00:16:40.980
- Yeah, so, cool.


00:16:40.980 --> 00:16:43.780
- Very cool, so if you have to cache stuff,


00:16:43.780 --> 00:16:46.220
or you have things that are slow and caching might fix it,


00:16:46.220 --> 00:16:49.340
this is actually a really interesting way to think about it


00:16:49.340 --> 00:16:51.740
'cause the alternative of setting up other servers


00:16:51.740 --> 00:16:53.940
like Redis and then having to manage the connections


00:16:53.940 --> 00:16:55.860
and all that, that's great if that's something


00:16:55.860 --> 00:16:56.740
that works for you and you need it,


00:16:56.740 --> 00:16:58.340
But this seems really simple.


00:16:58.340 --> 00:17:00.540
- Yeah, and I was thinking along the lines of it,


00:17:00.540 --> 00:17:03.500
companies that store or are keeping track


00:17:03.500 --> 00:17:06.620
like for dashboards and stuff,


00:17:06.620 --> 00:17:08.620
they're pulling data from various places,


00:17:08.620 --> 00:17:12.020
but it's, and people can look back in old stuff,


00:17:12.020 --> 00:17:14.280
but it's mostly the recent things


00:17:14.280 --> 00:17:16.300
that people are looking at all the time.


00:17:16.300 --> 00:17:19.500
And so something that caches the more recent stuff


00:17:19.500 --> 00:17:21.220
makes a lot of sense.


00:17:21.220 --> 00:17:23.340
- Yeah, and it's quite cool.


00:17:23.340 --> 00:17:24.420
Yep, what's the next one?


00:17:24.420 --> 00:17:25.820
- Oh yeah, it's my turn.


00:17:25.820 --> 00:17:27.060
(laughing)


00:17:27.060 --> 00:17:29.940
- Oh, speaking of, I was just looking at the disk cache


00:17:29.940 --> 00:17:32.300
stuff and they were talking about how to learn more,


00:17:32.300 --> 00:17:33.420
you can use the help system.


00:17:33.420 --> 00:17:35.400
- Yeah, it's like the tutorial is type help this,


00:17:35.400 --> 00:17:36.600
type help that.


00:17:36.600 --> 00:17:38.720
- Yeah, and so that's what I wanna talk about.


00:17:38.720 --> 00:17:41.040
I wanna talk about the Python help system.


00:17:41.040 --> 00:17:44.620
And I guess I knew it was around, but I kind of forgot.


00:17:44.620 --> 00:17:47.500
So there was an article on StackAbuse


00:17:47.500 --> 00:17:49.420
about the Python help system.


00:17:49.420 --> 00:17:53.220
And in a Python REPL, you can, like for instance,


00:17:53.220 --> 00:17:56.220
type help print and then you do, you know,


00:17:56.220 --> 00:17:58.240
help is a function and you pass it.


00:17:58.240 --> 00:18:01.140
If you pass an object or a built-in something


00:18:01.140 --> 00:18:03.300
like print and dict or built-ins,


00:18:03.300 --> 00:18:05.620
you get like a lot of information.


00:18:05.620 --> 00:18:08.980
Like if you type help dict, you get basically a tutorial


00:18:08.980 --> 00:18:12.820
on what all the stuff you get on dictionaries.


00:18:12.820 --> 00:18:13.660
It's pretty nice.


00:18:13.660 --> 00:18:16.460
And I tried like, and things that are keywords


00:18:16.460 --> 00:18:19.440
that are not objects, you can type help on those too,


00:18:19.440 --> 00:18:21.660
but you put them in like quotes first.


00:18:21.660 --> 00:18:24.680
So like you can type help quote assert


00:18:24.680 --> 00:18:27.980
and get all the information on how assert works in Python.


00:18:27.980 --> 00:18:29.420
And you can import stuff.


00:18:29.420 --> 00:18:31.840
So it's not just the built-ins you can,


00:18:31.840 --> 00:18:34.880
like for instance, one of the examples was import math


00:18:34.880 --> 00:18:37.200
and then help on math.log.


00:18:37.200 --> 00:18:39.340
And yeah, you can learn about a lot.


00:18:39.340 --> 00:18:42.080
Like I just did that to try it and I'm like, oh cool.


00:18:42.080 --> 00:18:44.600
I always forget that log can take a different base.


00:18:44.600 --> 00:18:46.680
So you can do, I don't know, base seven


00:18:46.680 --> 00:18:48.800
if you were just crazy and wanted to.


00:18:48.800 --> 00:18:49.640
- Yeah.


00:18:49.640 --> 00:18:51.560
- And then for non-built-in stuff


00:18:51.560 --> 00:18:54.080
and other libraries, even your own stuff,


00:18:54.080 --> 00:18:55.840
Help will pull out the doc string.


00:18:55.840 --> 00:18:58.120
And I mean, there's-- actually, I forget about this.


00:18:58.120 --> 00:19:00.440
There's a lot of stuff that you could just type Help on


00:19:00.440 --> 00:19:03.720
that instead of googling or hitting Stack Overflow,


00:19:03.720 --> 00:19:04.560
you just look it up.


00:19:04.560 --> 00:19:05.640
Yeah, and it's right there.


00:19:05.640 --> 00:19:07.320
And even works with-- it's offline.


00:19:07.320 --> 00:19:08.200
It's great.


00:19:08.200 --> 00:19:10.840
You're right that HelpDict has a ridiculous amount of stuff


00:19:10.840 --> 00:19:11.340
in there.


00:19:11.340 --> 00:19:12.640
That's pretty crazy.


00:19:12.640 --> 00:19:15.320
I've never typed that.


00:19:15.320 --> 00:19:17.600
Shows you all the magic methods that are overridden


00:19:17.600 --> 00:19:18.840
and all the stuff that happens.


00:19:18.840 --> 00:19:20.360
Yeah, it's quite cool, actually.


00:19:20.360 --> 00:19:23.840
- Yeah, and the things that you can convert to dictionaries.


00:19:23.840 --> 00:19:25.240
- Yeah, it's a nice one.


00:19:25.240 --> 00:19:27.040
Keeping with the same line of thinking of like,


00:19:27.040 --> 00:19:29.000
I have some code and I want to understand


00:19:29.000 --> 00:19:30.640
how it works and how it fits together, right?


00:19:30.640 --> 00:19:32.120
This is like the documentation


00:19:32.120 --> 00:19:34.720
and some of the methods and examples and stuff.


00:19:34.720 --> 00:19:38.540
But David Seddon sent over a cool couple of projects


00:19:38.540 --> 00:19:40.840
that he works on that is like a higher level


00:19:40.840 --> 00:19:44.220
architectural overview of Python libraries.


00:19:44.220 --> 00:19:46.360
So I think these are created by him.


00:19:46.360 --> 00:19:48.160
And one is called Impulse


00:19:48.160 --> 00:19:50.600
and one is called import linter.


00:19:50.600 --> 00:19:52.860
And the idea is that you get a quick picture


00:19:52.860 --> 00:19:56.580
of all the dependencies within a Python package.


00:19:56.580 --> 00:19:57.420
- Oh, nice.


00:19:57.420 --> 00:19:59.680
- Yeah, so I could type impulse space,


00:19:59.680 --> 00:20:02.880
draw graph space, and then some Python package


00:20:02.880 --> 00:20:05.500
that's installed in the same environment


00:20:05.500 --> 00:20:07.960
as the impulse thing is, so it can find it,


00:20:07.960 --> 00:20:10.080
and then it'll go and look all through it


00:20:10.080 --> 00:20:11.640
and say, well, here's all the modules,


00:20:11.640 --> 00:20:13.260
sub-modules, classes, and so on


00:20:13.260 --> 00:20:14.720
that are referencing each other,


00:20:14.720 --> 00:20:17.280
and it draws a cool architectural graph


00:20:17.280 --> 00:20:19.960
of this depends on that, which depends on that, and so on.


00:20:19.960 --> 00:20:20.920
Oh, wow.


00:20:20.920 --> 00:20:21.440
Yeah.


00:20:21.440 --> 00:20:23.720
So it's a good idea to just run that against code


00:20:23.720 --> 00:20:25.360
that you're not super familiar with.


00:20:25.360 --> 00:20:27.520
Before you go digging through the source code,


00:20:27.520 --> 00:20:29.280
let me just get a picture of what's in here


00:20:29.280 --> 00:20:30.760
and what's talking to what.


00:20:30.760 --> 00:20:32.960
Yeah, and also, if people keep asking


00:20:32.960 --> 00:20:35.040
about a particular part of your code base,


00:20:35.040 --> 00:20:39.760
do this and see how many loops and knots are in it.


00:20:39.760 --> 00:20:41.120
And maybe that's why.


00:20:41.120 --> 00:20:41.920
Yeah, exactly.


00:20:41.920 --> 00:20:44.520
It's a little more complicated than it probably should be.


00:20:44.520 --> 00:20:46.240
Or why does everything depend on this?


00:20:46.240 --> 00:20:47.080
Yeah, it's cool.


00:20:47.080 --> 00:20:49.080
If you want to run it, you might get an error


00:20:49.080 --> 00:20:50.640
that it can't draw the graph.


00:20:50.640 --> 00:20:53.120
You have to have GraphViz separately installed,


00:20:53.120 --> 00:20:55.040
because it draws the graph, and then it


00:20:55.040 --> 00:20:58.000
hands the data off to there to do the drawing.


00:20:58.000 --> 00:21:01.000
And if you're on a Mac, you can just brew install GraphViz.


00:21:01.000 --> 00:21:02.640
You just basically have that installed,


00:21:02.640 --> 00:21:04.160
and then you can more or less just run


00:21:04.160 --> 00:21:05.360
ImpulseDrawGraph on things.


00:21:05.360 --> 00:21:05.840
It's great.


00:21:05.840 --> 00:21:06.280
- Nice.


00:21:06.280 --> 00:21:07.840
- Yeah, the other one, ImportLinter,


00:21:07.840 --> 00:21:11.180
allows you to check contracts about the dependency graph.


00:21:11.180 --> 00:21:13.720
So you can say, like, we want to prevent


00:21:13.720 --> 00:21:17.000
circular dependencies or other types of constraints,


00:21:17.000 --> 00:21:18.600
like this should never depend upon that.


00:21:18.600 --> 00:21:19.440
So you can run it,


00:21:19.440 --> 00:21:21.480
and it's like part of a continuous integration,


00:21:21.480 --> 00:21:23.420
and it'll tell you if like some rule,


00:21:23.420 --> 00:21:24.520
you said this shouldn't happen,


00:21:24.520 --> 00:21:26.720
you know, it changes in terms of dependencies.


00:21:26.720 --> 00:21:28.600
- Oh, interesting.


00:21:28.600 --> 00:21:29.440
- Yep.


00:21:29.440 --> 00:21:30.260
- Ah, this is cool.


00:21:30.260 --> 00:21:31.800
- Yeah, I think I would definitely use Impulse,


00:21:31.800 --> 00:21:33.900
the graph one, more than the linter,


00:21:33.900 --> 00:21:35.680
but I can see like depending on what you're doing,


00:21:35.680 --> 00:21:37.680
like one might be more valuable than the other.


00:21:37.680 --> 00:21:39.880
- Yeah, I mean, if you were teaching a class,


00:21:39.880 --> 00:21:42.360
and you said I want you to implement something,


00:21:42.360 --> 00:21:44.840
but don't use package X.


00:21:44.840 --> 00:21:45.680
- That's right.


00:21:45.680 --> 00:21:46.980
have this as a test.


00:21:46.980 --> 00:21:48.780
- Submit your answer here and we'll lint it.


00:21:48.780 --> 00:21:49.620
Yeah, it's cool.


00:21:49.620 --> 00:21:51.680
So if you care about these architectural graphs


00:21:51.680 --> 00:21:54.280
and whatnot, yeah, these are nice tools.


00:21:54.280 --> 00:21:55.800
You can turn on your Python code.


00:21:55.800 --> 00:21:56.640
- Yeah, nice.


00:21:56.640 --> 00:21:58.440
Well, so that's all of our six.


00:21:58.440 --> 00:22:00.460
You got anything extra for us?


00:22:00.460 --> 00:22:04.120
- I ran across something that I'm sure some folks know about,


00:22:04.120 --> 00:22:06.220
definitely the core developers know about,


00:22:06.220 --> 00:22:07.900
but it just made me laugh.


00:22:07.900 --> 00:22:10.500
I was just like, all right, this is funny.


00:22:10.500 --> 00:22:13.600
So I was working on some package


00:22:13.600 --> 00:22:15.440
and I needed to understand it better,


00:22:15.440 --> 00:22:17.140
So I just used PyCharm, go to definition,


00:22:17.140 --> 00:22:19.960
and took me inside the source code of some part


00:22:19.960 --> 00:22:20.920
of the standard library.


00:22:20.920 --> 00:22:23.520
And I saw it was importing TabNanny.


00:22:23.520 --> 00:22:25.760
I'm like, what the heck?


00:22:25.760 --> 00:22:26.920
TabNanny.


00:22:26.920 --> 00:22:31.280
So TabNanny, as in like the babysitter of tabs or something,


00:22:31.280 --> 00:22:35.280
I don't know, is apparently a standard module,


00:22:35.280 --> 00:22:39.520
and it checks for inconsistent mixtures of tabs and spaces.


00:22:39.520 --> 00:22:40.680
And I knew Python checked it.


00:22:40.680 --> 00:22:43.640
I just didn't know that the thing that did that checking


00:22:43.640 --> 00:22:44.520
was called TabNanny.


00:22:44.520 --> 00:22:45.400
So I thought that was funny.


00:22:45.400 --> 00:22:46.480
I thought I'd share that with you all.


00:22:46.480 --> 00:22:47.440
- That's awesome.


00:22:47.440 --> 00:22:49.840
(laughing)


00:22:49.840 --> 00:22:51.900
And there's a thing called bad tabs.


00:22:51.900 --> 00:22:53.920
(laughing)


00:22:53.920 --> 00:22:55.440
- Yeah, it's pretty funny.


00:22:55.440 --> 00:22:56.280
- Yeah, nice.


00:22:56.280 --> 00:22:58.040
- Yeah, so I guess one other thing, quick shout out,


00:22:58.040 --> 00:22:59.840
just to let people know that the Flask


00:22:59.840 --> 00:23:01.320
data-driven web app course is out


00:23:01.320 --> 00:23:03.680
and people can give that a check out.


00:23:03.680 --> 00:23:05.680
It seems like everyone's enjoying that.


00:23:05.680 --> 00:23:08.280
So if you want to work with Flask, that's also a good one.


00:23:08.280 --> 00:23:09.240
- Okay. - Anything for you, Brian?


00:23:09.240 --> 00:23:10.840
- Nope, just working away.


00:23:10.840 --> 00:23:12.760
The new office is working pretty good,


00:23:12.760 --> 00:23:15.160
but I've decided like it last week,


00:23:15.160 --> 00:23:16.600
it was sitting on the ground.


00:23:16.600 --> 00:23:19.360
I've got a chair this week, so this is good.


00:23:19.360 --> 00:23:21.420
- You're upgrading your podcasting studio


00:23:21.420 --> 00:23:22.560
from the office, I see.


00:23:22.560 --> 00:23:25.160
- I'm elevating my environment, yeah.


00:23:25.160 --> 00:23:26.000
- Nice. - Literally.


00:23:26.000 --> 00:23:28.000
- All right, we have two jokes for you all this time.


00:23:28.000 --> 00:23:29.360
You want me to kick this one off?


00:23:29.360 --> 00:23:30.360
- Yeah. - All right.


00:23:30.360 --> 00:23:32.600
This is a joke that never gets boring, okay?


00:23:32.600 --> 00:23:34.600
You can tell it as many times as you want.


00:23:34.600 --> 00:23:35.520
It's never the same.


00:23:35.520 --> 00:23:37.900
All right, so two threads walk into a bar.


00:23:37.900 --> 00:23:39.200
The bartender looks up and yells,


00:23:39.200 --> 00:23:44.200
"Hey, I don't any conditions race like time last."


00:23:44.200 --> 00:23:46.460
(laughing)


00:23:46.460 --> 00:23:47.300
- Yeah, yeah.


00:23:47.300 --> 00:23:49.000
- The next time you tell it, you could be like,


00:23:49.000 --> 00:23:50.680
"Hey, two threads walking in bar,


00:23:50.680 --> 00:23:52.760
"barkeeper looks up and yells,


00:23:52.760 --> 00:23:56.080
"don't any conditions I, hey, want race like time last."


00:23:56.080 --> 00:23:58.000
Right, just, it's good every time.


00:23:58.000 --> 00:23:59.640
- Yeah, it's good every time.


00:23:59.640 --> 00:24:00.480
- All right, how about you?


00:24:00.480 --> 00:24:02.280
- A string value walks into a bar


00:24:02.280 --> 00:24:04.000
and then was sent to standard out.


00:24:04.000 --> 00:24:04.840
(laughing)


00:24:04.840 --> 00:24:06.360
That's a pipe joke. - I love it.


00:24:06.360 --> 00:24:07.480
Pipe joke, that's great.


00:24:07.480 --> 00:24:09.200
- Always good to finish on a laugh.


00:24:09.200 --> 00:24:11.040
Brian, thanks for being here


00:24:11.040 --> 00:24:13.240
and doing all this research for everyone.


00:24:13.240 --> 00:24:14.080
- Yeah, thank you.


00:24:14.080 --> 00:24:14.900
- Yep, you bet.


00:24:14.900 --> 00:24:15.740
See ya.


00:24:15.740 --> 00:24:17.280
Thank you for listening to Python Bytes.


00:24:17.280 --> 00:24:19.760
Follow the show on Twitter via @PythonBytes.


00:24:19.760 --> 00:24:22.800
That's Python Bytes as in B-Y-T-E-S.


00:24:22.800 --> 00:24:26.000
And get the full show notes at PythonBytes.fm.


00:24:26.000 --> 00:24:27.600
If you have a news item you want featured,


00:24:27.600 --> 00:24:30.040
just visit PythonBytes.fm and send it our way.


00:24:30.040 --> 00:24:32.920
We're always on the lookout for sharing something cool.


00:24:32.920 --> 00:24:34.760
On behalf of myself and Brian Auchin,


00:24:34.760 --> 00:24:36.120
this is Michael Kennedy.


00:24:36.120 --> 00:24:38.160
Thank you for listening and sharing this podcast


00:24:38.160 --> 00:24:39.800
with your friends and colleagues.

