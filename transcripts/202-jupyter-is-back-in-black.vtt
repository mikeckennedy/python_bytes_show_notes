
00:00:00.000 --> 00:00:05.760
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.760 --> 00:00:11.840
This is episode 202 recorded September 30th 2020. I'm Brian Okken.


00:00:11.840 --> 00:00:12.960
And I'm Michael Kennedy.


00:00:12.960 --> 00:00:16.720
Yeah and this episode is brought to you by Datadog. So thanks Datadog.


00:00:16.720 --> 00:00:19.040
Yeah thank you Datadog. It's good to have you back Brian.


00:00:19.040 --> 00:00:19.680
It's good to be back.


00:00:19.680 --> 00:00:20.240
We missed you.


00:00:20.240 --> 00:00:23.040
Yeah I had a little bit of a heart scare but I'm all better now.


00:00:23.040 --> 00:00:24.960
So that's good to hear.


00:00:24.960 --> 00:00:30.000
We're recording this September 30th, but by the time this comes out, we might have a new Python.


00:00:30.000 --> 00:00:32.560
So did you know that?


00:00:32.560 --> 00:00:36.960
I did not know that, but I'm very excited that you're covering that first. Yeah. So


00:00:36.960 --> 00:00:40.640
usually there's about a week delay and that's about when Python 3.9 should be, right?


00:00:40.640 --> 00:00:47.040
Yeah. So Python 3.9, there is a, the RC2 or Release Candidate 2 was released September 17th.


00:00:47.040 --> 00:00:52.800
The final is scheduled for release October 5th. Of course, you know, it's software,


00:00:52.800 --> 00:00:57.680
so things can come up, but we're looking forward to starting using 3.9 right away.


00:00:57.680 --> 00:01:03.120
We're linking to the changelog. There's a lot of different lists for what is in 3.9,


00:01:03.120 --> 00:01:09.280
but I wanted to highlight a few features that I pulled out from the changelog. The first couple,


00:01:09.280 --> 00:01:15.600
I think I'm most excited about, there's a dictionary merge and update operators. So


00:01:15.600 --> 00:01:21.280
the merge operator is just the bar, so you can have two dictionaries and do a bar to merge them


00:01:21.280 --> 00:01:25.640
them together and the bar equal for the update.


00:01:25.640 --> 00:01:28.600
The update means it doesn't mean append,


00:01:28.600 --> 00:01:32.700
it means if there's new stuff added to the other dictionary,


00:01:32.700 --> 00:01:34.640
but if there's changes, change it.


00:01:34.640 --> 00:01:37.520
I think this is just when I first read about this,


00:01:37.520 --> 00:01:39.420
I thought, why don't we already have this?


00:01:39.420 --> 00:01:40.920
This just seems obvious.


00:01:40.920 --> 00:01:43.000
I'm glad to have a merge operator.


00:01:43.000 --> 00:01:46.680
>> Yeah, I thought there's already a way to accomplish this with


00:01:46.680 --> 00:01:49.200
the curly bracket star star dictionary,


00:01:49.200 --> 00:01:51.880
star star dictionary, star star dictionary,


00:01:51.880 --> 00:01:53.520
which has the same effect.


00:01:53.520 --> 00:01:54.720
It's a little bit longer.


00:01:54.720 --> 00:01:56.480
I think this is for consistency


00:01:56.480 --> 00:01:58.240
with other container objects like sets


00:01:58.240 --> 00:02:00.320
that have a pipe behavior.


00:02:00.320 --> 00:02:02.560
So it's like, oh, you can just do it to dictionaries.


00:02:02.560 --> 00:02:03.400
I think.


00:02:03.400 --> 00:02:04.220
- That's nice.


00:02:04.220 --> 00:02:05.060
I had to read a little bit.


00:02:05.060 --> 00:02:06.360
The next one is a remove prefix


00:02:06.360 --> 00:02:08.920
and remove suffix has been added to strings


00:02:08.920 --> 00:02:11.080
and also added to bytes, byte array


00:02:11.080 --> 00:02:15.000
and collections user string, which is cool.


00:02:15.000 --> 00:02:16.080
- I'm most excited about this one.


00:02:16.080 --> 00:02:16.920
- Are you?


00:02:16.920 --> 00:02:17.760
- Yeah.


00:02:17.760 --> 00:02:18.580
- Because this actually,


00:02:18.580 --> 00:02:23.140
the workarounds to do something the other workarounds are ugly if you just


00:02:23.140 --> 00:02:26.700
want to it's just I have like this string that might be at the beginning of


00:02:26.700 --> 00:02:32.260
my of another string I want to remove it like if just this prepended stuff that


00:02:32.260 --> 00:02:36.260
happens all the time so like spaces or things like that what would you use it


00:02:36.260 --> 00:02:39.300
for well yeah the same thing there's a lot of times there's like oh there's


00:02:39.300 --> 00:02:42.100
this string that always starts at the beginning of this line and I just don't


00:02:42.100 --> 00:02:48.160
want it. Right? But the trim, trim start, trim end, trim, if you give it


00:02:48.160 --> 00:02:52.360
characters, it doesn't mean remove that string, it means remove, like take


00:02:52.360 --> 00:02:55.060
each one of those characters and remove all of them until you don't run into


00:02:55.060 --> 00:02:58.960
any more of those characters. And so if one of the characters of your string


00:02:58.960 --> 00:03:02.740
happens to be the first character of the stuff that's left, it'll also get ripped.


00:03:02.740 --> 00:03:07.780
Yeah, you just want a specific string to get removed. A set of strings. Right, if I'm


00:03:07.780 --> 00:03:11.740
like, I want this substring off the front, you know, if it exists, but not if it


00:03:11.740 --> 00:03:15.280
doesn't, right? You don't do the test and anyway it's just it cleans it up and


00:03:15.280 --> 00:03:19.080
makes it a little more predictable. Okay, yeah. Next thing is type annotations


00:03:19.080 --> 00:03:23.320
have a change that you can now use the built-in collection types such as list


00:03:23.320 --> 00:03:28.980
and dict as generic types instead of having to import typing or from typing


00:03:28.980 --> 00:03:34.040
import capital list or capital dict. I'm really excited about this. Wait, I didn't


00:03:34.040 --> 00:03:37.380
get back. I'm more excited about this than removed. Yes, because I'm always


00:03:37.380 --> 00:03:39.020
- I'm always annoyed when I have to like,


00:03:39.020 --> 00:03:43.680
'cause I'm starting to use type hinting for interfaces,


00:03:43.680 --> 00:03:46.520
and you don't need to import anything to do that,


00:03:46.520 --> 00:03:49.060
except for if you have a list or a dictionary


00:03:49.060 --> 00:03:51.680
or a set or something like that.


00:03:51.680 --> 00:03:53.780
And now you don't have to do that anymore,


00:03:53.780 --> 00:03:54.620
and I'm very happy.


00:03:54.620 --> 00:03:57.380
- I'm still waiting for the optional operator,


00:03:57.380 --> 00:03:58.940
the question mark or something,


00:03:58.940 --> 00:04:01.460
rather than capital O optional.


00:04:01.460 --> 00:04:03.740
- Oh, yeah, that'd be good.


00:04:03.740 --> 00:04:04.580
Should add that.


00:04:04.580 --> 00:04:05.420
- Yeah.


00:04:05.420 --> 00:04:06.260
- We've talked about the PEG parser before,


00:04:06.260 --> 00:04:10.260
but the three nine is where the new peg parser comes in.


00:04:10.260 --> 00:04:12.860
I don't know if it'll affect anybody, but it's neat.


00:04:12.860 --> 00:04:14.660
- Yeah, it's supposed to make extending the language


00:04:14.660 --> 00:04:16.620
with more complicated behaviors


00:04:16.620 --> 00:04:20.460
and more nuanced syntax easier,


00:04:20.460 --> 00:04:23.140
but it won't affect you or me probably writing code


00:04:23.140 --> 00:04:24.540
day to day, I'm not gonna touch that thing.


00:04:24.540 --> 00:04:26.020
- Yeah, I'm not.


00:04:26.020 --> 00:04:27.420
I was intrigued by this.


00:04:27.420 --> 00:04:30.700
Any valid expression can now be used as a decorator.


00:04:30.700 --> 00:04:32.540
This is pep614.


00:04:32.540 --> 00:04:34.380
I haven't quite wrapped my head around it,


00:04:34.380 --> 00:04:37.780
But I think this will change the way we use decorators.


00:04:37.780 --> 00:04:40.460
But I think we need a few tutorials to be written


00:04:40.460 --> 00:04:42.700
for people to figure out how to use this.


00:04:42.700 --> 00:04:44.020
- So maybe we should just make decorators


00:04:44.020 --> 00:04:45.300
like a lambda expression?


00:04:45.300 --> 00:04:46.960
'Cause I know you have later in the show


00:04:46.960 --> 00:04:48.980
some really cool uses of lambda expressions.


00:04:48.980 --> 00:04:49.820
So we can come back to that.


00:04:49.820 --> 00:04:52.060
- Oh my gosh, a huge lambda expression


00:04:52.060 --> 00:04:53.180
could be a decorator.


00:04:53.180 --> 00:04:55.700
Yeah, that'd be cool.


00:04:55.700 --> 00:04:56.900
Or really bad.


00:04:56.900 --> 00:05:00.580
Anyway, the other thing, last thing I wanted to mention,


00:05:00.580 --> 00:05:04.020
zone info is a new module that comes in, which is cool.


00:05:04.020 --> 00:05:08.160
It has IA, NA time zone databases support.


00:05:08.160 --> 00:05:10.140
That's part of the standard library now.


00:05:10.140 --> 00:05:11.480
And there's a whole bunch of other stuff too.


00:05:11.480 --> 00:05:13.040
So we're going to link to the change log


00:05:13.040 --> 00:05:14.240
and people should check that out.


00:05:14.240 --> 00:05:15.080
- Yeah, very cool.


00:05:15.080 --> 00:05:15.900
Exciting.


00:05:15.900 --> 00:05:16.740
We're going to have a new Python


00:05:16.740 --> 00:05:18.000
and Python comes faster now.


00:05:18.000 --> 00:05:18.840
- It does.


00:05:18.840 --> 00:05:20.960
- I think they changed the release cycle to 12 months.


00:05:20.960 --> 00:05:21.800
- Oh yeah.


00:05:21.800 --> 00:05:25.440
- So three, 10 or whatever the next thing is


00:05:25.440 --> 00:05:26.280
should be out soon.


00:05:26.280 --> 00:05:27.520
- Yeah, we'll just put it on our calendar.


00:05:27.520 --> 00:05:29.800
First week in October, we should expect a new Python.


00:05:29.800 --> 00:05:30.620
- That's right.


00:05:30.620 --> 00:05:31.480
What happens in October?


00:05:31.480 --> 00:05:33.280
Halloween and Python.


00:05:33.280 --> 00:05:34.760
- And black, black cats.


00:05:34.760 --> 00:05:38.160
- Black, yeah, 'cause you wanna go out into your costumes


00:05:38.160 --> 00:05:41.120
and your scary costumes at night when it's dark.


00:05:41.120 --> 00:05:42.840
It's no fun to do Halloween in the day


00:05:42.840 --> 00:05:45.160
'cause it looks fake.


00:05:45.160 --> 00:05:47.200
Or maybe you just have a Jupyter Notebook


00:05:47.200 --> 00:05:49.640
and you're a fan of black, but you would like to format it.


00:05:49.640 --> 00:05:50.480
- Yeah.


00:05:50.480 --> 00:05:56.080
- So Mary Hong sent over a cool recommendation


00:05:56.080 --> 00:05:58.560
based on some stuff we had over on Talk Python.


00:05:58.560 --> 00:06:01.720
So in Talk Python, I did a auto racing episode


00:06:01.720 --> 00:06:06.300
with Kane Replical and his pick for a PyPI package


00:06:06.300 --> 00:06:08.480
recommendation was Black Cell Magic,


00:06:08.480 --> 00:06:11.080
which I think we covered on the show as well.


00:06:11.080 --> 00:06:12.040
I'm pretty sure.


00:06:12.040 --> 00:06:14.440
She said you should check out Jupyter Black.


00:06:14.440 --> 00:06:18.120
And Jupyter Black is kind of like the same thing,


00:06:18.120 --> 00:06:20.760
but instead of having to type into the cells,


00:06:20.760 --> 00:06:23.160
you can just press, it gives you a toolbar button


00:06:23.160 --> 00:06:25.160
you can press and off it goes.


00:06:25.160 --> 00:06:26.640
So that looks really cool.


00:06:26.640 --> 00:06:30.160
Gives you a toolbar button and a couple of hotkey


00:06:30.160 --> 00:06:33.220
shortcuts, keyboard shortcuts, to format single cells


00:06:33.220 --> 00:06:34.280
and format all the cells.


00:06:34.280 --> 00:06:35.620
- Okay, that was gonna be my question.


00:06:35.620 --> 00:06:38.960
Can you just have it do the whole shebang at once?


00:06:38.960 --> 00:06:41.080
- Exactly, and that's what was, it also,


00:06:41.080 --> 00:06:44.120
you can also just run, instead of running black in your CI,


00:06:44.120 --> 00:06:46.380
you can run JBlack or as a pre-commit hook


00:06:46.380 --> 00:06:47.220
or something like that.


00:06:47.220 --> 00:06:48.040
- Okay.


00:06:48.040 --> 00:06:49.320
- So I believe with the one, the Black Cell Magic


00:06:49.320 --> 00:06:51.420
that I called, talked about previously,


00:06:51.420 --> 00:06:53.760
you had to like type it into the notebook


00:06:53.760 --> 00:06:57.240
and it would do it, which is cool, but this is more of a,


00:06:57.240 --> 00:06:58.640
and I talked about there being an extension


00:06:58.640 --> 00:07:01.760
would kind of do it for the whole notebook, but it was, it had a huge


00:07:01.760 --> 00:07:03.560
message, like this is no longer supported.


00:07:03.560 --> 00:07:05.180
So like, I'm not so sure.


00:07:05.180 --> 00:07:09.360
So this gives you both a CLI and hotkeys for the whole.


00:07:09.360 --> 00:07:11.160
For the whole notebook, which seems cool.


00:07:11.160 --> 00:07:12.300
Yeah, it does seem neat.


00:07:12.300 --> 00:07:13.640
Definitely need to check that out.


00:07:13.640 --> 00:07:14.300
Yeah, absolutely.


00:07:14.300 --> 00:07:15.440
Quick and simple.


00:07:15.440 --> 00:07:19.080
But to me, that's one of the huge shortcomings of Jupyter.


00:07:19.080 --> 00:07:20.800
A multiple levels.


00:07:20.800 --> 00:07:25.500
I think the auto formatting, like Jupyter should format that code as I type, I


00:07:25.500 --> 00:07:28.900
I shouldn't have to run command line things against it


00:07:28.900 --> 00:07:32.860
to get formatted code like Visual Studio Code, PyCharm.


00:07:32.860 --> 00:07:34.300
It gives you that support as you go.


00:07:34.300 --> 00:07:36.620
You're not spacing around, tabbing around.


00:07:36.620 --> 00:07:40.660
The other I really wish Jupyter did better was Autocomplete.


00:07:40.660 --> 00:07:44.300
Yes, if you hit dot, nothing happens,


00:07:44.300 --> 00:07:46.140
but if you hit tab, it will come up.


00:07:46.140 --> 00:07:47.860
I think there's a lot of,


00:07:47.860 --> 00:07:49.480
compare that to the other modern editors.


00:07:49.480 --> 00:07:52.420
There's a lot of room to make improvements on those areas.


00:07:52.420 --> 00:07:54.620
But this, at least having a keyboard shortcut


00:07:54.620 --> 00:07:58.620
like reformat document, you know, command shift B or whatever,


00:07:58.620 --> 00:08:00.620
control shift B, that seems really like a good start.


00:08:00.620 --> 00:08:03.620
Do you know if JupyterLab has any different support?


00:08:03.620 --> 00:08:06.620
I don't think so. I think JupyterLab just has more


00:08:06.620 --> 00:08:10.620
other UI elements, like you have an ability to get to the terminal


00:08:10.620 --> 00:08:12.620
and do other stuff. It's not just the notebook.


00:08:12.620 --> 00:08:16.620
But I don't think the fundamental editor experience changed.


00:08:16.620 --> 00:08:19.620
I could be wrong, I don't compare them that often, but I don't think so.


00:08:19.620 --> 00:08:22.620
I mean, if they get to that point, it wouldn't be an IDE,


00:08:22.620 --> 00:08:29.340
a JD, right? Jupyter development. That's right, a JD. Exactly. Good one. All right. Another cool


00:08:29.340 --> 00:08:34.780
thing is Datadog. This episode of Python Bytes is brought to you by Datadog. Let me ask you a


00:08:34.780 --> 00:08:39.820
question. Do you have an app in production that is slower than you like? Is its performance all


00:08:39.820 --> 00:08:45.500
over the place? Sometimes fast, sometimes slow. Now here's an important question. Do you know why?


00:08:45.500 --> 00:08:49.900
With Datadog you will. You can troubleshoot your app's performance with Datadog's end-to-end


00:08:49.900 --> 00:08:56.060
tracing. Use the detailed flame graphs to identify bottlenecks and latency in that finicky app of


00:08:56.060 --> 00:09:02.140
yours. Be the hero that got the app back on track for your company. Get started today with a free


00:09:02.140 --> 00:09:08.300
trial at pythonbytes.fm/datadog. Awesome. Thank you, Datadog. You know what's not awesome? DDoS.


00:09:08.300 --> 00:09:14.460
Denial of service against your web app. Yeah. So this is a couple of things I've got are


00:09:14.460 --> 00:09:16.460
listeners suggestions and


00:09:16.460 --> 00:09:21.980
Unfortunately since I've kind of been out of commission for a week. I forgot who suggested this


00:09:21.980 --> 00:09:25.180
So my apologies to the listener who brought this to their attention


00:09:25.180 --> 00:09:28.280
There's an article written by Jacob Kaplan Moss


00:09:28.280 --> 00:09:32.300
called understanding and preventing denial of service on


00:09:32.300 --> 00:09:35.700
web applications I saw it but I


00:09:35.700 --> 00:09:41.380
Kind of dismissed it right away because I thought it was just another like about all languages


00:09:41.380 --> 00:09:45.820
But this one is focused on Python and has some specifics on Django.


00:09:45.820 --> 00:09:50.320
So I think it's it starts off with a good discussion of what denial service is,


00:09:50.320 --> 00:09:54.820
and then sort of what to do about it and how to prevent it from happening


00:09:54.820 --> 00:09:57.880
and fix things on your with your application.


00:09:57.880 --> 00:10:01.720
But it kind of led me down a rabbit hole and I kind of enjoyed it.


00:10:01.720 --> 00:10:06.860
Anyway, there's one example that it lists as a hadn't I think I've heard of.


00:10:06.860 --> 00:10:10.320
I don't remember if we've talked about it on the show, which is called a redos,


00:10:10.320 --> 00:10:12.720
which is a regular expression denial of service.


00:10:12.720 --> 00:10:14.320
We talked about this, do you know?


00:10:14.320 --> 00:10:15.420
I don't think so.


00:10:15.420 --> 00:10:19.920
But yeah, there's certain types of computationally expensive things


00:10:19.920 --> 00:10:22.320
that are not going to match or useless or whatever


00:10:22.320 --> 00:10:23.920
you can send over to regular expressions


00:10:23.920 --> 00:10:25.620
that'll cause all sorts of trouble.


00:10:25.620 --> 00:10:29.320
What's interesting, so it says redos bugs occur


00:10:29.320 --> 00:10:31.720
when certain types of strings can cause


00:10:31.720 --> 00:10:36.620
improperly crafted regular expressions to perform poorly.


00:10:36.620 --> 00:10:38.920
And I'm talking like really poorly.


00:10:38.920 --> 00:10:42.920
What's interesting is they're not even complicated regular expressions.


00:10:42.920 --> 00:10:46.920
They're just like, for instance, a match, a set containing


00:10:46.920 --> 00:10:50.920
like one or more characters, or zero or more characters,


00:10:50.920 --> 00:10:54.920
followed by another zero or more characters, followed by a B,


00:10:54.920 --> 00:10:58.920
or something like that. And there's like a little graphic on one of the links


00:10:58.920 --> 00:11:02.920
on this page that shows how slow this is.


00:11:02.920 --> 00:11:06.920
It has to match all these different things and it's bad.


00:11:06.920 --> 00:11:09.340
Anyway, some languages have stuff put in place


00:11:09.340 --> 00:11:13.580
to try to work this sort of a thing, but Python does not.


00:11:13.580 --> 00:11:15.880
But we have a solution.


00:11:15.880 --> 00:11:17.920
So this article links to another article


00:11:17.920 --> 00:11:22.840
called "Finding Python Redos Bugs at Scale Using DLint,"


00:11:22.840 --> 00:11:25.960
which I was like, "DLint, what's that?"


00:11:25.960 --> 00:11:28.120
So I went and looked there.


00:11:28.120 --> 00:11:30.720
DLint is a Flake 8 plugin,


00:11:30.720 --> 00:11:34.800
so you can check for denial of service vulnerabilities


00:11:34.800 --> 00:11:36.880
when you're checking everything else with Flake.


00:11:36.880 --> 00:11:37.720
- Oh, that's interesting.


00:11:37.720 --> 00:11:39.480
I'd never heard of that one.


00:11:39.480 --> 00:11:43.400
- Yeah, so this, I was thinking it's a security plugin,


00:11:43.400 --> 00:11:45.600
a sort of linter for Python.


00:11:45.600 --> 00:11:46.960
Man, I was thinking,


00:11:46.960 --> 00:11:48.720
is there a difference between that and Bandit?


00:11:48.720 --> 00:11:51.740
And the authors of DLint were expecting that.


00:11:51.740 --> 00:11:55.360
So the first FAQ is, what about Bandit?


00:11:55.360 --> 00:11:57.760
So there's a discussion about whether or not to use Bandit,


00:11:57.760 --> 00:12:02.520
but the TLDR is, it checks for different things than Bandit


00:12:02.520 --> 00:12:04.060
so you can run both of them


00:12:04.060 --> 00:12:06.780
and they run perfectly fine on the same code base.


00:12:06.780 --> 00:12:07.860
- Yeah, super cool.


00:12:07.860 --> 00:12:09.220
DDoS is no fun.


00:12:09.220 --> 00:12:11.820
Distributed DDoS, a whole lot less fun.


00:12:11.820 --> 00:12:13.580
So having to deal with that,


00:12:13.580 --> 00:12:15.060
I've had to deal with that before


00:12:15.060 --> 00:12:18.480
and managed to get ahead of it.


00:12:18.480 --> 00:12:21.220
But if there's thousands of computers


00:12:21.220 --> 00:12:22.780
trying to do bad stuff to your website


00:12:22.780 --> 00:12:25.740
all at the same time from different locations,


00:12:25.740 --> 00:12:26.900
it's not easy.


00:12:26.900 --> 00:12:30.220
- You've had to do that for maybe Talk Python or something?


00:12:30.220 --> 00:12:31.860
- For Talk Python Training, yeah.


00:12:31.860 --> 00:12:34.980
People, thousands of computers


00:12:34.980 --> 00:12:37.400
We're trying to do all sorts of stuff at the same time.


00:12:37.400 --> 00:12:41.080
So even things like, let's just block this IP address,


00:12:41.080 --> 00:12:44.720
or let's put in checks that if this IP address does


00:12:44.720 --> 00:12:47.920
five bad actions, we're going to block it for an hour,


00:12:47.920 --> 00:12:49.120
or a day, or permanently.


00:12:49.120 --> 00:12:51.360
None of that would work, because it was so many


00:12:51.360 --> 00:12:53.880
different computers, or devices, or whatever.


00:12:53.880 --> 00:12:55.360
Anyway, not fun.


00:12:55.360 --> 00:12:57.160
It'll definitely get your attention.


00:12:57.160 --> 00:13:00.280
Another thing that'll get your attention is pictures.


00:13:00.280 --> 00:13:01.480
We love pictures.


00:13:01.480 --> 00:13:05.720
So, Shomik Chowdhury sent over a project


00:13:05.720 --> 00:13:08.040
that he's working on that I think is pretty cool,


00:13:08.040 --> 00:13:09.240
so I decided to cover it.


00:13:09.240 --> 00:13:12.520
It reminds me of something I'd worked on a long time ago.


00:13:12.520 --> 00:13:14.120
So he works with computer vision.


00:13:14.120 --> 00:13:15.200
And now this is not just about,


00:13:15.200 --> 00:13:16.920
I think this is useful beyond computer vision,


00:13:16.920 --> 00:13:18.440
which is why I'm covering it,


00:13:18.440 --> 00:13:21.200
but especially for computer vision.


00:13:21.200 --> 00:13:24.520
What he has to work with a lot is there's an image


00:13:24.520 --> 00:13:27.040
and you're trying to find all the people


00:13:27.040 --> 00:13:29.380
and maybe the bicycle or all the cars


00:13:29.380 --> 00:13:31.080
and the things the car needs to worry about


00:13:31.080 --> 00:13:32.660
if it's a self-driving car, right?


00:13:32.660 --> 00:13:35.080
Crosswalks, lights, whatever.


00:13:35.080 --> 00:13:36.740
You want to put little pictures around it, say,


00:13:36.740 --> 00:13:39.720
the computer vision and the ML algorithm said,


00:13:39.720 --> 00:13:42.160
this is a car, where's that duck over there?


00:13:42.160 --> 00:13:43.760
That's not a car, right?


00:13:43.760 --> 00:13:46.300
So you want to label them visually.


00:13:46.300 --> 00:13:48.360
So often what they do is they put boxes around them


00:13:48.360 --> 00:13:50.840
and they put some text to say, this is a person,


00:13:50.840 --> 00:13:53.020
this is a car, this is a duck.


00:13:53.020 --> 00:13:55.720
And drawing those boxes with the picture,


00:13:55.720 --> 00:13:57.880
with the label lined up just right


00:13:57.880 --> 00:13:59.880
or affixed to the edge of the box


00:13:59.880 --> 00:14:01.640
or sort of an arrow pointing down to it


00:14:01.640 --> 00:14:03.920
or things like that, you know, kind of tedious.


00:14:03.920 --> 00:14:07.320
So he wrote a thing called Bbox Visualizer,


00:14:07.320 --> 00:14:12.160
which lets you just say, here's an image file, like a PNG,


00:14:12.160 --> 00:14:15.640
and here is the coordinates of this box


00:14:15.640 --> 00:14:17.400
and the label I want you to put on it,


00:14:17.400 --> 00:14:20.200
and boom, it draws like a nice, fancy little box


00:14:20.200 --> 00:14:21.740
around the object that you talk about


00:14:21.740 --> 00:14:25.200
and puts a well-oriented label on it.


00:14:25.200 --> 00:14:28.600
So if you're doing any sort of science stuff


00:14:28.600 --> 00:14:31.400
or image analysis where you want to put,


00:14:31.400 --> 00:14:34.000
like, here's what the computer thought is over here,


00:14:34.000 --> 00:14:35.400
and here's what we're calling it,


00:14:35.400 --> 00:14:37.360
you know, for all sorts of analysis.


00:14:37.360 --> 00:14:39.040
This is a handy little library.


00:14:39.040 --> 00:14:40.120
- Yeah, this is cool.


00:14:40.120 --> 00:14:40.960
- Yeah.


00:14:40.960 --> 00:14:41.940
You know, not everyone's going to need it.


00:14:41.940 --> 00:14:44.440
You don't need it for like a fancy web app or whatever,


00:14:44.440 --> 00:14:47.040
but I think if you're trying to do this kind of work,


00:14:47.040 --> 00:14:50.540
here's a super simple, like, two or three lines of code,


00:14:50.540 --> 00:14:52.700
put a nice bunch of bounding boxes on top of things


00:14:52.700 --> 00:14:54.280
and pictures with nice labels.


00:14:54.280 --> 00:14:55.120
That seems cool.


00:14:55.120 --> 00:14:57.560
- Yeah, I can also see, like, lots of different,


00:14:57.560 --> 00:14:59.260
like student projects where they're using,


00:14:59.260 --> 00:15:03.060
working with images and algorithms around it


00:15:03.060 --> 00:15:05.820
to be able to highlight a particular area


00:15:05.820 --> 00:15:07.320
that they're working on or something like that,


00:15:07.320 --> 00:15:08.160
I think uses--


00:15:08.160 --> 00:15:08.980
- For sure.


00:15:08.980 --> 00:15:10.580
I can see a lot of science that are doing it.


00:15:10.580 --> 00:15:13.460
Like we detected this as a star here.


00:15:13.460 --> 00:15:14.300
This is a star.


00:15:14.300 --> 00:15:15.740
Here's the name of the star or whatever.


00:15:15.740 --> 00:15:17.940
- Yeah, and to just sort of lump all of the


00:15:17.940 --> 00:15:20.260
drawing the box stuff into a library.


00:15:20.260 --> 00:15:21.100
This is cool.


00:15:21.100 --> 00:15:21.920
I like it.


00:15:21.920 --> 00:15:22.760
- Yeah, for sure.


00:15:22.760 --> 00:15:25.540
You've got some nice fancy code examples,


00:15:25.540 --> 00:15:27.540
like taking your Pythonic code to the next level.


00:15:27.540 --> 00:15:28.040
Tell us about it.


00:15:28.040 --> 00:15:28.980
>> To the next level.


00:15:28.980 --> 00:15:30.420
I was debating as to what,


00:15:30.420 --> 00:15:32.300
I've got a devilish streak in me,


00:15:32.300 --> 00:15:34.540
I think, as to why I'm bringing this in.


00:15:34.540 --> 00:15:37.180
This also was another listener's suggestion.


00:15:37.180 --> 00:15:38.780
My apologies to whoever sent it.


00:15:38.780 --> 00:15:41.180
I forget. I think it's a gist.


00:15:41.180 --> 00:15:42.780
GitHub gist, I'm pretty sure.


00:15:42.780 --> 00:15:46.420
It's how to never use lambdas.


00:15:46.420 --> 00:15:50.260
I'm just chuckling even at the name.


00:15:50.260 --> 00:15:53.660
It starts off with a brief example showing how to


00:15:53.660 --> 00:15:57.140
rewrite a power function as a lambda.


00:15:57.140 --> 00:15:59.860
And anybody sort of familiar with lambdas,


00:15:59.860 --> 00:16:01.940
that's kind of a common use case is,


00:16:01.940 --> 00:16:06.660
I've got a little single one or two argument function


00:16:06.660 --> 00:16:10.420
that I need to pass in as an expression instead,


00:16:10.420 --> 00:16:12.700
and I can't pass in functions,


00:16:12.700 --> 00:16:14.460
so I pass in a lambda,


00:16:14.460 --> 00:16:16.780
says it's kind of a bound function sort of thing.


00:16:16.780 --> 00:16:18.700
- Right, I wanna do a sort on a list,


00:16:18.700 --> 00:16:20.740
and I wanna sort by all users,


00:16:20.740 --> 00:16:22.740
I wanna sort by their login date.


00:16:22.740 --> 00:16:25.980
So, yeah, lambda u goes to u.loginDate,


00:16:25.980 --> 00:16:27.740
or something super simple like that, right?


00:16:27.740 --> 00:16:28.580
That seems good.


00:16:28.580 --> 00:16:29.620
- And anybody scared of lambdas,


00:16:29.620 --> 00:16:31.600
if you look at the initial example,


00:16:31.600 --> 00:16:33.300
that's a good simple thing.


00:16:33.300 --> 00:16:34.180
They're not scary,


00:16:34.180 --> 00:16:36.780
they're just basically functions without names.


00:16:36.780 --> 00:16:38.540
But they have to be expressions.


00:16:38.540 --> 00:16:40.860
So first one, no problem.


00:16:40.860 --> 00:16:43.060
But then he jumps right into some crazy code.


00:16:43.060 --> 00:16:45.620
I'm saying he, I don't know who wrote it.


00:16:45.620 --> 00:16:47.700
But the crazy code right away


00:16:47.700 --> 00:16:50.260
is some code with import statements.


00:16:50.260 --> 00:16:52.060
So how do you get around import statements?


00:16:52.060 --> 00:16:56.380
Well, you somehow it's using a dunder import


00:16:56.380 --> 00:16:58.740
and referencing the library you want to import


00:16:58.740 --> 00:17:00.100
as an expression,


00:17:00.100 --> 00:17:02.540
has to as in the value of that past


00:17:02.540 --> 00:17:04.660
as an argument to another Lambda.


00:17:04.660 --> 00:17:06.380
And these are nested Lambdas.


00:17:06.380 --> 00:17:10.180
So right off the bat, first bad example is horrible.


00:17:10.180 --> 00:17:11.020
So don't do that.


00:17:11.020 --> 00:17:16.020
- This is almost like a decorator Lambda thing.


00:17:16.020 --> 00:17:17.100
It's so weird.


00:17:17.100 --> 00:17:18.460
- Starts off frightening.


00:17:18.460 --> 00:17:22.220
And then shows an example of a class definition


00:17:22.220 --> 00:17:26.500
and then how to lambify a class definition as,


00:17:26.500 --> 00:17:28.420
yeah, so you can have a Lambda expression


00:17:28.420 --> 00:17:32.060
be an entire class definition, weird.


00:17:32.060 --> 00:17:35.880
And then the last example, which is my favorite,


00:17:35.880 --> 00:17:39.800
is an entire working Flask application


00:17:39.800 --> 00:17:41.860
as a single Lambda expression.


00:17:41.860 --> 00:17:43.300
It's truly horrible stuff.


00:17:43.300 --> 00:17:45.780
You should not do this, but it's amusing to read about.


00:17:45.780 --> 00:17:48.660
- Well, if your goal is to have fewer lines of code,


00:17:48.660 --> 00:17:51.460
like one line for an entire Flask application,


00:17:51.460 --> 00:17:52.640
that's impressive.


00:17:52.640 --> 00:17:55.900
I think it has two routes, not just one.


00:17:55.900 --> 00:17:56.740
Impressive.


00:17:56.740 --> 00:17:59.420
- Yeah, yeah, it's great.


00:17:59.420 --> 00:18:00.740
- Cool.


00:18:00.740 --> 00:18:02.780
Sometimes these, like, let's see these ideas


00:18:02.780 --> 00:18:04.380
taken to extreme are pretty interesting,


00:18:04.380 --> 00:18:06.140
and definitely that's the Lambda equivalent there.


00:18:06.140 --> 00:18:08.620
- Now, one good use case of this, I think,


00:18:08.620 --> 00:18:12.340
maybe I might get struck by lightning by suggesting this,


00:18:12.340 --> 00:18:15.260
but if you're in, if you're a CS student


00:18:15.260 --> 00:18:16.700
and you're doing really good,


00:18:16.700 --> 00:18:18.820
you've got like 110% in the class,


00:18:18.820 --> 00:18:21.540
maybe turn in a homework assignment


00:18:21.540 --> 00:18:24.860
that's just entirely lambda expressions.


00:18:24.860 --> 00:18:26.180
(laughing)


00:18:26.180 --> 00:18:29.900
- Or if you're just feeling really mischievous


00:18:29.900 --> 00:18:32.260
and you get some homework assignment


00:18:32.260 --> 00:18:33.580
you're super frustrated with,


00:18:33.580 --> 00:18:35.100
you're like, "You know what?


00:18:35.100 --> 00:18:37.260
"You're gonna ask me to do something silly."


00:18:37.260 --> 00:18:39.140
And you said, "As long as it works, it counts.


00:18:39.140 --> 00:18:40.220
"You're getting this back."


00:18:40.220 --> 00:18:41.660
(laughing)


00:18:41.660 --> 00:18:43.260
- Anyway, yeah, I'll probably get--


00:18:43.260 --> 00:18:44.580
- Yeah, don't do that, that's mean.


00:18:44.580 --> 00:18:49.140
get hate mail for that. What's not mean is contributing to open source generally.


00:18:49.140 --> 00:18:52.420
Yeah, that's not mean. That's nice. Yeah. So Alexander, one of the listeners


00:18:52.420 --> 00:18:57.780
sent over an article or blog post by Vincent Wonderman, and it's called


00:18:57.780 --> 00:19:02.340
uncommon contributions, making an impact without touching the core of a library.


00:19:02.340 --> 00:19:09.140
I think this is one of the challenges, paradoxes that you might run into is like,


00:19:09.140 --> 00:19:13.140
you find these libraries that are very popular and you love them and you want to contribute to


00:19:13.140 --> 00:19:15.660
to them, like I love Django, so I want to contribute to it.


00:19:15.660 --> 00:19:17.420
I love Flask, I want to contribute to it.


00:19:17.420 --> 00:19:19.380
I love requests, I want to contribute to it.


00:19:19.380 --> 00:19:20.860
Well, guess what?


00:19:20.860 --> 00:19:22.740
All of those things are highly polished


00:19:22.740 --> 00:19:24.580
and they have a lot of different use cases.


00:19:24.580 --> 00:19:26.300
It's very hard to make changes to them


00:19:26.300 --> 00:19:28.980
because any little change will have a potentially


00:19:28.980 --> 00:19:30.940
huge effect on a lot of software, right?


00:19:30.940 --> 00:19:32.460
- Yeah, and it's also just intimidating


00:19:32.460 --> 00:19:35.380
to touch the code for a large project too, so.


00:19:35.380 --> 00:19:36.580
- Yeah, exactly.


00:19:36.580 --> 00:19:38.820
So here are a bunch of ideas of things


00:19:38.820 --> 00:19:41.740
that are low danger, low stress.


00:19:41.740 --> 00:19:44.820
probably a lot of people haven't taken advantage of them.


00:19:44.820 --> 00:19:48.220
I'll just go through a couple that Vincent works through.


00:19:48.220 --> 00:19:51.180
One of them is just providing better information.


00:19:51.180 --> 00:19:54.680
So he contributed to this project called Rasa.


00:19:54.680 --> 00:19:56.820
And I don't know what Rasa does, I forgot to check out.


00:19:56.820 --> 00:19:59.780
So it has a CLI, you say Rasa,


00:19:59.780 --> 00:20:02.100
you can say Rasa --version.


00:20:02.100 --> 00:20:05.940
And what it would say would be like 1.2.7.


00:20:05.940 --> 00:20:07.620
Okay, that seems totally legit,


00:20:07.620 --> 00:20:09.780
like that feature is implemented, right?


00:20:09.780 --> 00:20:12.200
But then, and by the way, if you look at this article,


00:20:12.200 --> 00:20:14.060
if you open up the actual article, Brian,


00:20:14.060 --> 00:20:15.660
you'll see like each one of these


00:20:15.660 --> 00:20:20.660
has like a beautiful like XKCD style picture


00:20:20.660 --> 00:20:22.460
talking about the story.


00:20:22.460 --> 00:20:25.220
So for like the info one, it says to debug this,


00:20:25.220 --> 00:20:26.980
like somebody says, hey, Ross is not working.


00:20:26.980 --> 00:20:28.300
They're like, all right, well,


00:20:28.300 --> 00:20:29.380
in order for me to debug this,


00:20:29.380 --> 00:20:30.740
you gotta give me your Python version,


00:20:30.740 --> 00:20:31.900
your operating system,


00:20:31.900 --> 00:20:33.980
all the versions of the packages that you have,


00:20:33.980 --> 00:20:36.300
like are you running out of a virtual environment,


00:20:36.300 --> 00:20:37.300
et cetera, et cetera.


00:20:37.300 --> 00:20:39.460
So what he did was that,


00:20:39.460 --> 00:20:41.100
All right, when you say --version,


00:20:41.100 --> 00:20:42.980
now you're gonna get the version of Python,


00:20:42.980 --> 00:20:44.620
the path to your virtual environment,


00:20:44.620 --> 00:20:47.660
the version of related packages that Rasa depends upon,


00:20:47.660 --> 00:20:48.500
things like that.


00:20:48.500 --> 00:20:49.620
- Nice. - That's easy to do.


00:20:49.620 --> 00:20:51.700
That's not a challenging,


00:20:51.700 --> 00:20:54.820
you know, too difficult sort of implementation there.


00:20:54.820 --> 00:20:57.980
The next one is to set up a cron job


00:20:57.980 --> 00:21:01.580
to run tests checking


00:21:01.580 --> 00:21:05.460
that dependencies haven't affected a package.


00:21:05.460 --> 00:21:08.580
So I know you know about continuous integration,


00:21:08.580 --> 00:21:09.460
- Yeah. - Right?


00:21:09.460 --> 00:21:11.940
Check in, changes come,


00:21:11.940 --> 00:21:13.720
gonna rerun your unit tests.


00:21:13.720 --> 00:21:15.020
That's great, right?


00:21:15.020 --> 00:21:19.660
But what happens if an underlying package


00:21:19.660 --> 00:21:21.540
has an underlying dependency,


00:21:21.540 --> 00:21:23.280
so the dependency of the dependency,


00:21:23.280 --> 00:21:25.500
is that a grand dependency?


00:21:25.500 --> 00:21:26.340
I don't know.


00:21:26.340 --> 00:21:29.260
An underlying dependency has a change


00:21:29.260 --> 00:21:32.540
that potentially makes something operate differently.


00:21:32.540 --> 00:21:34.260
What is gonna trigger your CI


00:21:34.260 --> 00:21:36.660
if you don't make any changes to your code there?


00:21:36.660 --> 00:21:38.220
- Yeah. - Right?


00:21:38.220 --> 00:21:42.900
So he actually ran into this, scikit-lego


00:21:42.900 --> 00:21:45.100
is a package that Vincent works on.


00:21:45.100 --> 00:21:48.620
And he discovered that it wasn't working for some reason


00:21:48.620 --> 00:21:52.100
because scikit-learn introduced a minor but breaking change.


00:21:52.100 --> 00:21:55.700
So what he set up was a cron job with GitHub Actions


00:21:55.700 --> 00:21:58.060
to just run that once a day to say,


00:21:58.060 --> 00:22:00.780
hey, just in case something which we don't know about


00:22:00.780 --> 00:22:03.640
or directly affects our repo,


00:22:03.640 --> 00:22:05.020
we still wanna run those tests again


00:22:05.020 --> 00:22:07.500
just to make sure like, yeah, things are still good.


00:22:07.500 --> 00:22:08.340
What do you think about that? - That's good.


00:22:08.340 --> 00:22:11.620
And I also wonder if the breaking change


00:22:11.620 --> 00:22:16.420
was that they changed what the version output produced.


00:22:16.420 --> 00:22:18.620
- Yeah, I did think about that actually.


00:22:18.620 --> 00:22:21.300
If somewhere in there, there's like a test,


00:22:21.300 --> 00:22:23.580
someone has something that just test that calling that


00:22:23.580 --> 00:22:25.100
on the command line.


00:22:25.100 --> 00:22:26.260
All right, spell check.


00:22:26.260 --> 00:22:27.660
Spell check is easy.


00:22:27.660 --> 00:22:30.660
- Yeah, there's always spelling errors in code.


00:22:30.660 --> 00:22:31.540
- Always, yeah.


00:22:31.540 --> 00:22:33.180
'Cause a lot of times the symbols we use


00:22:33.180 --> 00:22:34.780
are not proper words.


00:22:34.780 --> 00:22:37.740
But I do really appreciate things like PyCharm


00:22:37.740 --> 00:22:42.740
that will find misspellings inside of various things.


00:22:42.740 --> 00:22:45.860
Right, like if you've got a function,


00:22:45.860 --> 00:22:48.220
check login and I and enter switch,


00:22:48.220 --> 00:22:50.420
it'll say login is misspelled.


00:22:50.420 --> 00:22:51.500
But you know, it's still--


00:22:51.500 --> 00:22:55.060
- Or grammar checks, grammar checking people's doc strings


00:22:55.060 --> 00:22:57.100
or comments in code and stuff like that.


00:22:57.100 --> 00:22:57.940
- Exactly.


00:22:57.940 --> 00:23:02.300
So there's a nice example in there about looking for


00:23:02.300 --> 00:23:03.940
a country I think where it was Spain,


00:23:03.940 --> 00:23:07.020
but Spain was misspelled as a docstring example.


00:23:07.020 --> 00:23:09.340
So that's definitely something easy to do,


00:23:09.340 --> 00:23:11.580
just run a spell checker on the docstring.


00:23:11.580 --> 00:23:13.620
One that I'm a real big proponent of


00:23:13.620 --> 00:23:15.540
is having better error messages.


00:23:15.540 --> 00:23:16.380
- Oh yeah.


00:23:16.380 --> 00:23:18.340
- So it's so frustrating.


00:23:18.340 --> 00:23:21.140
Like just today, yesterday?


00:23:21.140 --> 00:23:21.980
I don't know, I was asleep.


00:23:21.980 --> 00:23:24.100
I was not sure exactly when I got this.


00:23:24.100 --> 00:23:28.740
But I got a message from a student taking the Excel course


00:23:28.740 --> 00:23:31.900
says, "Hey, I tried to run cookie cutter,"


00:23:31.900 --> 00:23:33.020
'cause during the Excel course,


00:23:33.020 --> 00:23:35.420
we talk about setting up like a cookie cutter template


00:23:35.420 --> 00:23:36.980
that gets everyone started.


00:23:36.980 --> 00:23:40.380
It says, I tried to run cookie cutter and it didn't work.


00:23:40.380 --> 00:23:41.220
Here's the message.


00:23:41.220 --> 00:23:44.300
And it just says something about the Git clone


00:23:44.300 --> 00:23:46.780
that cookie cutter internally tries to use failed.


00:23:46.780 --> 00:23:48.940
And it doesn't say anything about, you know,


00:23:48.940 --> 00:23:50.720
is Git not installed?


00:23:50.720 --> 00:23:53.120
Did Git, what was the error from Git?


00:23:53.120 --> 00:23:56.140
Like it just, nope, it failed, right?


00:23:56.140 --> 00:23:58.140
You know, just like a random, like this command failed.


00:23:58.140 --> 00:23:59.220
Like great.


00:23:59.220 --> 00:24:01.180
So if there was a better error message,


00:24:01.180 --> 00:24:02.420
like we tried to do that,


00:24:02.420 --> 00:24:03.740
but you don't have permission to write


00:24:03.740 --> 00:24:05.300
where you tried to clone this thing to,


00:24:05.300 --> 00:24:07.840
or Git is not installed or something like that.


00:24:07.840 --> 00:24:10.180
They could have gone, oh, I need to install Git, right?


00:24:10.180 --> 00:24:12.000
They would have been a much better op.


00:24:12.000 --> 00:24:12.960
So error messages.


00:24:12.960 --> 00:24:14.340
So they work on,


00:24:14.340 --> 00:24:17.300
I mean, it works on something called whatlies,


00:24:17.300 --> 00:24:19.940
and it allows for optional dependencies.


00:24:19.940 --> 00:24:21.540
Like it has some of its functionality,


00:24:21.540 --> 00:24:25.180
but you might have to pip install whatlies bracket


00:24:25.180 --> 00:24:27.700
something else like here's tf.hub, right?


00:24:27.700 --> 00:24:30.620
And in order to use a certain part of that


00:24:30.620 --> 00:24:32.900
that depends on that optional dependency,


00:24:32.900 --> 00:24:34.100
you have to have that installed,


00:24:34.100 --> 00:24:35.900
but you don't have to install it to use the library, right?


00:24:35.900 --> 00:24:36.900
So you could run into this problem


00:24:36.900 --> 00:24:38.060
where you try to use a feature


00:24:38.060 --> 00:24:39.820
that doesn't have a dependency.


00:24:39.820 --> 00:24:41.200
So instead of just going,


00:24:41.200 --> 00:24:44.700
none object has no attribute whatever, right?


00:24:44.700 --> 00:24:46.820
Or whatever's gonna happen there,


00:24:46.820 --> 00:24:48.820
or no library such and such,


00:24:48.820 --> 00:24:50.260
it's now the error is,


00:24:50.260 --> 00:24:53.300
in order to use convert language,


00:24:53.300 --> 00:24:58.100
you'll need to install pip install whatlies bracket tfhub,


00:24:58.100 --> 00:24:59.560
see installation guide here,


00:24:59.560 --> 00:25:01.720
and there's the URL, like that is a proper error message.


00:25:01.720 --> 00:25:02.640
- Yeah, that's great.


00:25:02.640 --> 00:25:04.720
Telling people how to fix the error, yeah.


00:25:04.720 --> 00:25:07.280
- Yeah, and you know, it's just, it's not that much work,


00:25:07.280 --> 00:25:08.680
but just finding these problems,


00:25:08.680 --> 00:25:11.120
like how many times does this appear on Stack Overflow,


00:25:11.120 --> 00:25:14.160
rather than just like let him go find it on Stack Overflow


00:25:14.160 --> 00:25:15.120
and give the message.


00:25:15.120 --> 00:25:17.920
So I recently added something like this to FluentCheck.


00:25:17.920 --> 00:25:20.320
Remember when we talked, I think you brought this up,


00:25:20.320 --> 00:25:24.040
talked about using raise from on an exception.


00:25:24.040 --> 00:25:26.280
So you can say raise an exception,


00:25:26.280 --> 00:25:28.720
but if you do that in a catch block,


00:25:28.720 --> 00:25:31.660
you get weird other issues, right?


00:25:31.660 --> 00:25:35.120
So by default, it would say something like,


00:25:35.120 --> 00:25:37.360
during the handling of the above exception,


00:25:37.360 --> 00:25:38.800
another exception occurred.


00:25:38.800 --> 00:25:41.600
And that sounds like one thing broke another.


00:25:41.600 --> 00:25:43.440
But like in this library,


00:25:43.440 --> 00:25:47.280
it's supposed to find errors and then report them to you.


00:25:47.280 --> 00:25:50.280
So if you use raiseFrom,


00:25:50.280 --> 00:25:52.640
it'll say the above exception was a direct cause


00:25:52.640 --> 00:25:54.200
of the following exception,


00:25:54.200 --> 00:25:55.160
which makes it sound like,


00:25:55.160 --> 00:25:58.040
okay, this is the source of the error, right?


00:25:58.040 --> 00:26:00.860
So just simple changes like that are really nice,


00:26:00.860 --> 00:26:03.440
get better error messages, failing unit tests.


00:26:03.440 --> 00:26:04.680
And I'm not talking about going around


00:26:04.680 --> 00:26:07.380
and finding projects that have failing unit tests,


00:26:07.380 --> 00:26:10.080
but rather, if you wanna make a contribution,


00:26:10.080 --> 00:26:11.880
or rather you find a bug,


00:26:11.880 --> 00:26:13.600
rather than just submitting a bug


00:26:13.600 --> 00:26:15.600
on a GitHub issue tracker saying,


00:26:15.600 --> 00:26:17.600
this doesn't work, I tried it,


00:26:17.600 --> 00:26:20.040
and then having a long conversation about it,


00:26:20.040 --> 00:26:23.120
submit along with it a failing,


00:26:23.120 --> 00:26:25.440
create a PR that has a failing unit test for that issue.


00:26:25.440 --> 00:26:26.280
- Oh, that's awesome.


00:26:26.280 --> 00:26:27.720
- Yeah, right.


00:26:27.720 --> 00:26:29.760
It's supposed to do this, this fails.


00:26:29.760 --> 00:26:31.700
If you make this pass, I'm happy, right?


00:26:31.700 --> 00:26:34.040
And then they can fold that into the unit test suite


00:26:34.040 --> 00:26:34.920
and so on.


00:26:34.920 --> 00:26:37.840
And then also, finally, there are some packages


00:26:37.840 --> 00:26:41.720
that might have names that result in import statements


00:26:41.720 --> 00:26:43.200
that are very confusing.


00:26:43.200 --> 00:26:44.960
So for example, if you've got a package


00:26:44.960 --> 00:26:48.380
and in the package, there's a file.py, lowercase f,


00:26:48.380 --> 00:26:53.000
and within file.py, there's a capital file class


00:26:53.000 --> 00:26:54.160
that those would be totally reasonable.


00:26:54.160 --> 00:26:57.360
What you call the file is file.py, create a class in it.


00:26:57.360 --> 00:26:58.880
depending on how the package is set up,


00:26:58.880 --> 00:27:00.920
you could end up with something like


00:27:00.920 --> 00:27:03.280
from package import lowercase file


00:27:03.280 --> 00:27:06.680
and from package import uppercase file would both work,


00:27:06.680 --> 00:27:08.600
but obviously don't mean the same thing.


00:27:08.600 --> 00:27:12.020
So in that case, they recommend renaming certain files


00:27:12.020 --> 00:27:15.000
that are really meant to be used internally as an option.


00:27:15.000 --> 00:27:17.120
- Yeah, like in the example,


00:27:17.120 --> 00:27:19.480
I don't even get what's different.


00:27:19.480 --> 00:27:22.320
- I know, I just stared at it for a while as well.


00:27:22.320 --> 00:27:23.760
That's it for all those recommendations.


00:27:23.760 --> 00:27:25.360
But I think there's definitely some good ones in there.


00:27:25.360 --> 00:27:27.000
I like the error messages a lot.


00:27:27.000 --> 00:27:29.700
I like the failing unit tests as well.


00:27:29.700 --> 00:27:30.960
Those are my two faves.


00:27:30.960 --> 00:27:33.360
- Yeah, I was just even thinking about all this stuff.


00:27:33.360 --> 00:27:35.740
The, did it talk about documentation?


00:27:35.740 --> 00:27:37.320
- Not about creating documentation,


00:27:37.320 --> 00:27:40.080
just about the spell checking within documentation.


00:27:40.080 --> 00:27:41.640
- Okay, well I would probably--


00:27:41.640 --> 00:27:43.280
- Well, I guess that's doc strings.


00:27:43.280 --> 00:27:44.280
That's pretty limited.


00:27:44.280 --> 00:27:45.680
- I add documentation to this


00:27:45.680 --> 00:27:48.560
because projects always are lacking,


00:27:48.560 --> 00:27:50.060
or sometimes behind.


00:27:50.060 --> 00:27:51.920
So the documentation might be great.


00:27:51.920 --> 00:27:54.600
Somebody was really gung-ho about it for a while,


00:27:54.600 --> 00:27:55.940
and then there's been improvements,


00:27:55.940 --> 00:28:00.500
but the new features just haven't made it into the documentation all over the place yet.


00:28:00.500 --> 00:28:01.820
Yeah, or tutorials.


00:28:01.820 --> 00:28:05.220
There's no good tutorials showing this part of code.


00:28:05.220 --> 00:28:09.540
There might be a quick start, but then the advanced hard stuff, there's no examples.


00:28:09.540 --> 00:28:11.060
Yeah, definitely.


00:28:11.060 --> 00:28:13.060
These are good.


00:28:13.060 --> 00:28:14.500
What extra you got for us?


00:28:14.500 --> 00:28:19.140
Well, I just learned about this this morning, so I was going to just not give a whole big thing,


00:28:19.140 --> 00:28:20.620
but just let people know.


00:28:20.620 --> 00:28:23.020
I saw somebody on Twitter, of course,


00:28:23.020 --> 00:28:27.260
obviously being really bad about referencing people, but sorry.


00:28:27.260 --> 00:28:31.740
A new thing, there's a, as of September, early in September, there was a


00:28:31.740 --> 00:28:35.700
a collaboration between the people in Wonder Woman


00:28:35.700 --> 00:28:39.260
and the Smithsonian Learning Lab and NASA and Microsoft.


00:28:39.260 --> 00:28:46.220
So, there's a, we're linking to an article that's learned to code with Wonder Woman, Smithsonian and NASA.


00:28:46.220 --> 00:28:49.660
And so there's a whole bunch of, the idea is that there's


00:28:49.660 --> 00:28:53.460
There's one, there's a lot of schools that don't offer computer science education.


00:28:53.460 --> 00:28:59.460
And also with COVID and everything, some people have kind of, that's kind of dropped off a little bit.


00:28:59.460 --> 00:29:03.760
And people are focusing on core classes, which is probably fair.


00:29:03.760 --> 00:29:09.460
But if you still want to have your kid learn programming, this might be a way to do it.


00:29:09.460 --> 00:29:12.560
And this is pretty cool and looks pretty neat.


00:29:12.560 --> 00:29:18.660
There's some Wonder Woman adventure stuff and NASA exploration.


00:29:18.660 --> 00:29:22.340
and there's even a little bit of Minecraft in there.


00:29:22.340 --> 00:29:23.140
It looks really fun.


00:29:23.140 --> 00:29:25.700
And at least some of the tutorials are in Python.


00:29:25.700 --> 00:29:28.700
I haven't checked out to see if all of them are Python or not,


00:29:28.700 --> 00:29:30.260
but there's a lot of Python in there.


00:29:30.260 --> 00:29:32.380
Some of them use Blocky, but some of them,


00:29:32.380 --> 00:29:36.620
like the super quiz from Wonder Woman uses Python.


00:29:36.620 --> 00:29:38.740
And then some of the NASA ones, which


00:29:38.740 --> 00:29:41.940
Cecil actually called out the NASA Microsoft partner


00:29:41.940 --> 00:29:45.380
ones last time, but not this Wonder Woman one.


00:29:45.380 --> 00:29:47.100
So yeah, it's a mix, but very cool.


00:29:47.100 --> 00:29:47.700
It's neat.


00:29:47.700 --> 00:29:51.240
Plus, I can't wait to see 1984.


00:29:51.240 --> 00:29:53.500
I'm looking forward to it.


00:29:53.500 --> 00:29:54.800
Yeah, definitely.


00:29:54.800 --> 00:29:56.200
I have a quick thing as well.


00:29:56.200 --> 00:29:59.240
I'm going to be doing a presentation at IndiePi.


00:29:59.240 --> 00:30:01.780
So virtual online, obviously.


00:30:01.780 --> 00:30:02.440
When is this?


00:30:02.440 --> 00:30:06.280
This is coming up on October 13th.


00:30:06.280 --> 00:30:10.640
So there I'm going to be doing a Python memory deep dive,


00:30:10.640 --> 00:30:13.100
both understanding some of the internals of Python memory


00:30:13.100 --> 00:30:16.600
as well as some optimizations that you can make to go faster


00:30:16.600 --> 00:30:17.440
and use less memory.


00:30:17.440 --> 00:30:20.040
So you all can sign up for that and check it out if you like.


00:30:20.040 --> 00:30:21.960
- Cool, a memory talk and you forgot the date.


00:30:21.960 --> 00:30:23.440
That's funny.


00:30:23.440 --> 00:30:24.360
- Yeah, I know.


00:30:24.360 --> 00:30:28.600
Maybe we should just have another joke, finish it off.


00:30:28.600 --> 00:30:30.860
- You know, I think we actually may have covered this


00:30:30.860 --> 00:30:33.240
a long time ago when it came out, but I'm not sure.


00:30:33.240 --> 00:30:34.720
- I don't remember covering it.


00:30:34.720 --> 00:30:37.240
- So it was suggested by Tim Jacobson,


00:30:37.240 --> 00:30:40.120
Kelsey Hightower's project, NoCode.


00:30:40.120 --> 00:30:42.320
This is a hilarious repo,


00:30:42.320 --> 00:30:44.000
but you kind of have to go look at it.


00:30:44.000 --> 00:30:46.840
So the tagline is no code is the best way


00:30:46.840 --> 00:30:48.920
to write secure and reliable applications.


00:30:48.920 --> 00:30:51.340
Write nothing, deploy nowhere.


00:30:51.340 --> 00:30:53.720
And you highlighted that the style guide was good,


00:30:53.720 --> 00:30:55.400
so I went and looked at that.


00:30:55.400 --> 00:30:57.240
It says no code style guide.


00:30:57.240 --> 00:30:58.960
All no code programs are the same,


00:30:58.960 --> 00:31:00.380
regardless of use case.


00:31:00.380 --> 00:31:02.920
Any code you write is a liability.


00:31:02.920 --> 00:31:03.760
So-- - Yeah.


00:31:03.760 --> 00:31:05.360
And the style, this is beautiful.


00:31:05.360 --> 00:31:08.600
The style guide talks about file extensions.


00:31:08.600 --> 00:31:12.000
It says no code is not stored in files,


00:31:12.000 --> 00:31:15.160
But if you must, use the .no file extension.


00:31:15.160 --> 00:31:17.400
Like example, main.no.


00:31:17.400 --> 00:31:21.040
There are linters built right into your POSIX-based system,


00:31:21.040 --> 00:31:22.300
your Linux systems.


00:31:22.300 --> 00:31:27.300
So for example, you can check by saying du-h main.no,


00:31:27.300 --> 00:31:32.880
and if it outputs zero, then you have no code.


00:31:32.880 --> 00:31:34.360
- What is du, do you know?


00:31:34.360 --> 00:31:35.320
- It's like a line count,


00:31:35.320 --> 00:31:38.360
count the number of lines of text in this file.


00:31:38.360 --> 00:31:41.440
And then they have code reviews.


00:31:41.440 --> 00:31:44.180
The no code community has adopted the following conventions


00:31:44.180 --> 00:31:46.320
for reviewing code changes.


00:31:46.320 --> 00:31:49.180
When the code changes contains no code additions


00:31:49.180 --> 00:31:52.320
or modifications, LGTM, looks good to me.


00:31:52.320 --> 00:31:54.720
When the code changes include code additions


00:31:54.720 --> 00:31:58.640
or modifications, C-I-A-L, code is a liability.


00:31:58.640 --> 00:32:01.160
They should be, that code change


00:32:01.160 --> 00:32:02.600
should be rejected immediately.


00:32:02.600 --> 00:32:04.760
And then the final kicker for me on this one


00:32:04.760 --> 00:32:09.760
is that there's 43,000 stars, 4,000 forks of it,


00:32:09.960 --> 00:32:10.920
which are funny.


00:32:10.920 --> 00:32:13.920
But the thing that made me laugh is there's 368 people


00:32:13.920 --> 00:32:17.460
watching for changes in the no code repository


00:32:17.460 --> 00:32:19.460
where there's supposed to be no changes.


00:32:19.460 --> 00:32:23.300
- That's funny.


00:32:23.300 --> 00:32:24.760
And there's three, three point.


00:32:24.760 --> 00:32:25.600
- Oh, it adds Docker support as well.


00:32:25.600 --> 00:32:28.440
- There's 3.2 thousand issues filed against it.


00:32:28.440 --> 00:32:30.800
- Oh my God, there are, what are they here for?


00:32:30.800 --> 00:32:33.960
Oh yeah.


00:32:33.960 --> 00:32:35.800
Suspended Arctic code vault,


00:32:35.800 --> 00:32:37.480
contributional reconstruction,


00:32:37.480 --> 00:32:40.160
Aviator chain generator keys, all right.


00:32:40.160 --> 00:32:42.800
No water in the water cooler is one of the issues.


00:32:42.800 --> 00:32:44.800
- This is, and then the contributing,


00:32:44.800 --> 00:32:47.100
at the end of the read me, it says contributing.


00:32:47.100 --> 00:32:47.940
You don't.


00:32:47.940 --> 00:32:49.580
(laughing)


00:32:49.580 --> 00:32:50.760
- Sweet.


00:32:50.760 --> 00:32:53.200
All right, well, that's a good one, Tim,


00:32:53.200 --> 00:32:55.520
and Kelsey, nice job on that project.


00:32:55.520 --> 00:32:59.180
- Well, thanks a lot again for a lovely podcast.


00:32:59.180 --> 00:33:00.920
Thank you for listening to Python Bytes.


00:33:00.920 --> 00:33:03.380
Follow the show on Twitter @pythonbytes.


00:33:03.380 --> 00:33:06.480
That's Python Bytes as in B-Y-T-E-S.


00:33:06.480 --> 00:33:09.360
And get the full show notes at pythonbytes.fm.


00:33:09.360 --> 00:33:11.560
If you have a news item you want featured,


00:33:11.560 --> 00:33:14.320
just visit pythonbytes.fm and send it our way.


00:33:14.320 --> 00:33:16.440
We're always on the lookout for sharing something cool.


00:33:16.440 --> 00:33:17.520
This is Brian Okken,


00:33:17.520 --> 00:33:19.620
and on behalf of myself and Michael Kennedy,


00:33:19.620 --> 00:33:21.720
thank you for listening and sharing this podcast


00:33:21.720 --> 00:33:23.360
with your friends and colleagues.

