
00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your buds.


00:00:05.360 --> 00:00:11.360
This is episode 122, recorded March 20th, 2019. I'm Michael Kennedy.


00:00:11.360 --> 00:00:12.160
And I'm Brian Okken.


00:00:12.160 --> 00:00:16.080
And this episode is brought to you by DigitalOcean. They have some big news to share with you.


00:00:16.080 --> 00:00:20.240
I'll tell you all about that shortly. Check them out at pythonbytes.fm/digitalocean


00:00:20.240 --> 00:00:26.720
and get a $100 credit for new users. So, tell you more about that later. Brian, how are you doing?


00:00:26.720 --> 00:00:28.760
- I'm doing good, and if I chuckle,


00:00:28.760 --> 00:00:30.480
it's because you got your mic up


00:00:30.480 --> 00:00:32.640
and you kind of look like a rapper doing the thing.


00:00:32.640 --> 00:00:35.000
- Yeah, I'm gonna drop it at the end of this episode.


00:00:35.000 --> 00:00:37.280
- Yeah, anyway, no, things are good.


00:00:37.280 --> 00:00:39.440
- People can't see, yeah, so I've got my microphone


00:00:39.440 --> 00:00:41.720
on a different stand, so we'll see how it sounds,


00:00:41.720 --> 00:00:43.320
but yeah, I think it's working all right.


00:00:43.320 --> 00:00:44.240
- Yeah. - Nice.


00:00:44.240 --> 00:00:47.320
All right, so I find dictionaries


00:00:47.320 --> 00:00:49.220
sometimes get used in Python,


00:00:49.220 --> 00:00:52.200
like every now and then people will make use


00:00:52.200 --> 00:00:54.080
of that fancy data structure.


00:00:54.080 --> 00:00:55.240
- Yeah, definitely.


00:00:55.240 --> 00:00:57.640
One of the hard things, and I don't have a link to this,


00:00:57.640 --> 00:01:00.360
maybe we could drop it, but one of the things


00:01:00.360 --> 00:01:02.880
you need to do with dictionaries is pull them apart


00:01:02.880 --> 00:01:04.720
and put them together and stuff.


00:01:04.720 --> 00:01:08.900
There's a PEP 584, it's had the plus and minus operators


00:01:08.900 --> 00:01:10.520
to the built-in dict class.


00:01:10.520 --> 00:01:11.820
- Yeah, that makes a lot of sense to me.


00:01:11.820 --> 00:01:13.480
I mean, we already have it for list,


00:01:13.480 --> 00:01:15.280
well, not the minus, but we have the plus.


00:01:15.280 --> 00:01:19.000
- List makes sense because operators are neat


00:01:19.000 --> 00:01:22.840
and the thing that throws me off is the massive difference


00:01:22.840 --> 00:01:26.820
between if you do dictionary one plus dictionary two,


00:01:26.820 --> 00:01:30.360
it's different than dictionary two plus dictionary one


00:01:30.360 --> 00:01:34.360
because the second thing always wins.


00:01:34.360 --> 00:01:36.920
- Right, if there's duplicate keys,


00:01:36.920 --> 00:01:38.920
the second one is gonna overwrite the first one.


00:01:38.920 --> 00:01:41.880
So you're saying that addition might not be commutative,


00:01:41.880 --> 00:01:42.960
that might be a problem.


00:01:42.960 --> 00:01:46.400
- Well, maybe, but I mean like strings are like that,


00:01:46.400 --> 00:01:48.240
like if you've got, I don't know, do we do--


00:01:48.240 --> 00:01:50.720
- That's true, you don't get the same result


00:01:50.720 --> 00:01:52.880
of like hello plus world or world plus hello.


00:01:52.880 --> 00:01:54.440
- Yeah, exactly.


00:01:54.440 --> 00:01:55.800
So maybe it's okay.


00:01:55.800 --> 00:01:57.160
We'll link into the pep.


00:01:57.160 --> 00:01:59.100
Actually, I think it's nice because


00:01:59.100 --> 00:02:02.260
if you look at the alternates, the alternates are gross.


00:02:02.260 --> 00:02:04.320
Like you can unpack both dictionaries


00:02:04.320 --> 00:02:05.960
and then create a new dictionary


00:02:05.960 --> 00:02:09.240
or you can copy one and then update it with the other.


00:02:09.240 --> 00:02:11.000
That all of those are not obvious


00:02:11.000 --> 00:02:13.600
and so I think plus would be good.


00:02:13.600 --> 00:02:15.480
So we're gonna link to that article


00:02:15.480 --> 00:02:19.680
but also Guido Van Rossum wrote an article called


00:02:19.680 --> 00:02:23.080
why operators are useful that partly talks about this.


00:02:23.080 --> 00:02:27.000
And then also there's an email link of why,


00:02:27.000 --> 00:02:29.920
apparently one of the options for combining dictionaries


00:02:29.920 --> 00:02:32.800
was to use the pipe operator instead of plus.


00:02:32.800 --> 00:02:34.600
And so I've got a link to that too.


00:02:34.600 --> 00:02:37.120
But actually, so this is just a,


00:02:37.120 --> 00:02:39.240
we don't know if it'll go in, it's in draft status


00:02:39.240 --> 00:02:41.880
and it just got proposed, but I think this is,


00:02:41.880 --> 00:02:43.640
would be a neat thing to add to Python.


00:02:43.640 --> 00:02:45.400
- Yeah, I'm honestly a little bit surprised


00:02:45.400 --> 00:02:46.920
it's not already there.


00:02:46.920 --> 00:02:48.000
It would be nice.


00:02:48.000 --> 00:02:50.660
I certainly prefer plus over pipe.


00:02:50.660 --> 00:02:54.140
Like, pipe is not something that's commonly used in Python


00:02:54.140 --> 00:02:55.260
for combining stuff.


00:02:55.260 --> 00:02:57.300
Maybe if this was C or something, I don't know,


00:02:57.300 --> 00:02:59.000
but it certainly in the Python world,


00:02:59.000 --> 00:03:01.160
plus seems like a more natural choice here.


00:03:01.160 --> 00:03:04.640
So this next one comes from Matthew Rockland,


00:03:04.640 --> 00:03:07.180
the guy behind Dask and other data science-y things.


00:03:07.180 --> 00:03:09.580
I recently interviewed him on Talk Python,


00:03:09.580 --> 00:03:10.720
but you know, time shifting,


00:03:10.720 --> 00:03:12.760
it will be in the future when that comes out.


00:03:12.760 --> 00:03:14.880
But I was reading through some of his articles


00:03:14.880 --> 00:03:16.520
and found something I thought, you know,


00:03:16.520 --> 00:03:19.760
well, at least it super resonated with me.


00:03:19.760 --> 00:03:20.880
I don't know how your world is, Brian,


00:03:20.880 --> 00:03:24.000
but mine is like a constant stream


00:03:24.000 --> 00:03:29.000
of inbound inquiries, requests, comments.


00:03:29.000 --> 00:03:32.440
Like watch the Talk Python Twitter account,


00:03:32.440 --> 00:03:34.000
my personal Twitter account.


00:03:34.000 --> 00:03:36.520
We share watching the Python Bytes Twitter account.


00:03:36.520 --> 00:03:38.040
I have a Gitter channel.


00:03:38.040 --> 00:03:39.280
I'm on a couple of Slacks.


00:03:39.280 --> 00:03:42.680
I'm on like Cisco Teams or something like this.


00:03:42.680 --> 00:03:44.160
Email is insane.


00:03:44.160 --> 00:03:48.200
And there's just too many places that stuff comes at me.


00:03:48.200 --> 00:03:51.080
And I've spent like, there's times where I'll take a week


00:03:51.080 --> 00:03:54.000
and I'll take a full two days off to just write email


00:03:54.000 --> 00:03:55.320
and respond to messages.


00:03:55.320 --> 00:03:56.800
And I'm still not all the way caught up.


00:03:56.800 --> 00:03:58.740
It's like, it's really a problem.


00:03:58.740 --> 00:04:00.760
So when I read this article called,


00:04:00.760 --> 00:04:03.040
"Why I Avoid Slack" by Matthew Rocklin,


00:04:03.040 --> 00:04:05.940
I'm like, oh, yes, this definitely resonates with me.


00:04:05.940 --> 00:04:08.580
Because when you get that much inbound stuff,


00:04:08.580 --> 00:04:10.040
like anything that's transient


00:04:10.040 --> 00:04:12.020
is super hard to keep track of, right?


00:04:12.020 --> 00:04:13.760
Like @mentions on Twitter,


00:04:13.760 --> 00:04:15.860
like maybe I'll catch him, but if I don't,


00:04:15.860 --> 00:04:17.400
like I'm sorry, but I just, you know,


00:04:17.400 --> 00:04:18.280
it's, I lost it.


00:04:18.280 --> 00:04:20.720
It went by in the stream somehow on accident


00:04:20.720 --> 00:04:22.500
or something on Slack, right?


00:04:22.500 --> 00:04:24.920
Like it's a hundred messages back


00:04:24.920 --> 00:04:28.400
and you know, I dropped in there and I didn't check it,


00:04:28.400 --> 00:04:29.820
marked the messages red and left


00:04:29.820 --> 00:04:30.840
and now it's just gone, right?


00:04:30.840 --> 00:04:32.280
It's never gonna come back.


00:04:32.280 --> 00:04:34.800
So I feel like those kinds of things,


00:04:34.800 --> 00:04:37.640
while kind of fun and interesting and more lively


00:04:37.640 --> 00:04:40.880
are also, you know, just adding stress


00:04:40.880 --> 00:04:41.960
and not really positive.


00:04:41.960 --> 00:04:44.940
So Matthew wrote this cool article saying,


00:04:44.940 --> 00:04:47.600
"Why avoid Slack focused on


00:04:47.600 --> 00:04:50.020
"for open source maintainers of projects?"


00:04:50.020 --> 00:04:51.680
Right, like should we have a Slack channel


00:04:51.680 --> 00:04:53.260
for open source project?


00:04:53.260 --> 00:04:55.300
He says, "No."


00:04:55.300 --> 00:04:58.720
So he says, "Instead of doing something like that,"


00:04:58.720 --> 00:05:00.000
I mean, I guess a Gitter channel


00:05:00.000 --> 00:05:01.600
would be basically equivalent.


00:05:01.600 --> 00:05:03.840
Says, "I encourage colleagues to have technical


00:05:03.840 --> 00:05:05.940
"and design conversations on GitHub


00:05:05.940 --> 00:05:07.700
"or some other system that is public,


00:05:07.700 --> 00:05:09.980
"permanent, searchable, and cross-referencable."


00:05:09.980 --> 00:05:10.820
What do you think?


00:05:10.820 --> 00:05:14.260
especially for that case of open source projects


00:05:14.260 --> 00:05:18.300
and those types of conversations, I think I totally agree.


00:05:18.300 --> 00:05:20.260
- Yeah, so he says, you know, a couple reasons why,


00:05:20.260 --> 00:05:22.500
like say GitHub, public GitHub repos


00:05:22.500 --> 00:05:24.060
and their issues and their conversations


00:05:24.060 --> 00:05:27.020
and PRs and whatnot around it are better than Slack


00:05:27.020 --> 00:05:29.460
would be because you can engage collaborators


00:05:29.460 --> 00:05:31.320
who aren't on Slack, right?


00:05:31.320 --> 00:05:34.140
Not everyone is on Slack, but if you're working


00:05:34.140 --> 00:05:36.180
with a person who doesn't have a web browser,


00:05:36.180 --> 00:05:38.660
that's probably okay, you can ignore that person.


00:05:38.660 --> 00:05:40.340
But most people can get to the web


00:05:40.340 --> 00:05:42.780
and they can read or even Google search


00:05:42.780 --> 00:05:45.220
and then find some kind of thing.


00:05:45.220 --> 00:05:47.000
Also, you can record the conversation


00:05:47.000 --> 00:05:49.880
because it sounds like his life's a little bit like mine.


00:05:49.880 --> 00:05:53.180
Like, hey, everybody just needs a couple of minutes


00:05:53.180 --> 00:05:56.180
of your time every couple of minutes, you know?


00:05:56.180 --> 00:05:59.900
And it completely derails any form of productivity.


00:05:59.900 --> 00:06:01.540
So it's super hard.


00:06:01.540 --> 00:06:03.860
And the reason is they'll drop in a Slack channel


00:06:03.860 --> 00:06:05.460
or some other conversation and go,


00:06:05.460 --> 00:06:07.100
hey, why is it like this?


00:06:07.100 --> 00:06:08.460
Or just quick question about that.


00:06:08.460 --> 00:06:11.620
And it's like, if you have it in an issue and discussed


00:06:11.620 --> 00:06:15.060
or something, you can say, that's issue 17725.


00:06:15.060 --> 00:06:16.540
We talked about it for a week.


00:06:16.540 --> 00:06:18.260
Here's a whole detail, all right?


00:06:18.260 --> 00:06:20.340
Also, you can serve the silent majority.


00:06:20.340 --> 00:06:22.660
That is people who go to Google and they type in a thing


00:06:22.660 --> 00:06:24.980
and say, I need help with this thing


00:06:24.980 --> 00:06:26.640
or why does this work that way?


00:06:26.640 --> 00:06:28.860
GitHub ranks super high on Google


00:06:28.860 --> 00:06:31.020
and those issues often come up


00:06:31.020 --> 00:06:32.780
and you can see the whole conversation.


00:06:32.780 --> 00:06:33.620
- That's a great idea.


00:06:33.620 --> 00:06:35.460
- Yeah, the other one is encourage


00:06:35.460 --> 00:06:37.020
more thoughtful discourse.


00:06:37.020 --> 00:06:39.820
So if you're writing like one-on-one


00:06:39.820 --> 00:06:41.720
or a couple of people in a Slack channel,


00:06:41.720 --> 00:06:42.880
you're willing to just throw out


00:06:42.880 --> 00:06:45.660
kind of quick off-the-cuff comments.


00:06:45.660 --> 00:06:48.060
If you're writing in a public permanent forum


00:06:48.060 --> 00:06:50.240
that's associated with your GitHub profile,


00:06:50.240 --> 00:06:51.220
it's much more likely


00:06:51.220 --> 00:06:53.380
that you're gonna write something thoughtful.


00:06:53.380 --> 00:06:56.140
And finally, you get to cross-reference issues.


00:06:56.140 --> 00:06:58.140
So you can say, we talked about part of it here


00:06:58.140 --> 00:06:59.620
and part of it over there on this other issue,


00:06:59.620 --> 00:07:00.700
and then there was this PR,


00:07:00.700 --> 00:07:02.540
and then we're bringing it back here.


00:07:02.540 --> 00:07:05.220
Your Slack is siloed, you can't cross-reference people


00:07:05.220 --> 00:07:06.800
and conversations and things like that.


00:07:06.800 --> 00:07:10.940
So here's a call to say, enjoy Slack, chat in Slack,


00:07:10.940 --> 00:07:15.940
but don't use Slack for design decisions and other stuff.


00:07:15.940 --> 00:07:17.640
Maintainers come and go,


00:07:17.640 --> 00:07:19.900
maybe you wanna have a history of these things


00:07:19.900 --> 00:07:21.780
and not just a transient chat stream.


00:07:21.780 --> 00:07:23.400
- Yeah, and the bigger a Slack channel gets,


00:07:23.400 --> 00:07:25.700
the more useful it is in some respects.


00:07:25.700 --> 00:07:27.500
You get answers really quickly.


00:07:27.500 --> 00:07:29.700
But also, the more it reflects


00:07:29.700 --> 00:07:33.500
like kind of just a topical party at somebody's house


00:07:33.500 --> 00:07:34.980
with lots of conversations going on.


00:07:34.980 --> 00:07:36.020
- Right, there was a cool chat


00:07:36.020 --> 00:07:38.420
about this thing on the couch, but that's not the same


00:07:38.420 --> 00:07:41.020
as like, we wrote up our thoughts on that thing.


00:07:41.020 --> 00:07:42.060
- Yeah, exactly.


00:07:42.060 --> 00:07:42.980
Oh, I'll have to read this.


00:07:42.980 --> 00:07:43.820
- Yeah, it's pretty good.


00:07:43.820 --> 00:07:45.800
It's not much longer than actually what I talked about,


00:07:45.800 --> 00:07:48.100
but it's still really helpful, I think.


00:07:48.100 --> 00:07:49.380
What's the next one you got for us?


00:07:49.380 --> 00:07:52.240
- That reminds me, actually, no, I had a leak in my memory.


00:07:52.240 --> 00:07:53.080
No, that's bad.


00:07:53.080 --> 00:07:55.860
- That's pretty good, actually.


00:07:55.860 --> 00:07:57.260
It's so bad, it's good, I like it.


00:07:57.260 --> 00:08:00.980
- There's an article from Zendesk, from Y. Chiao,


00:08:00.980 --> 00:08:04.220
that's called "Hunting for Memory Leaks


00:08:04.220 --> 00:08:05.580
in Python Applications."


00:08:05.580 --> 00:08:07.900
And we've covered memory leak stuff before,


00:08:07.900 --> 00:08:09.680
but I really liked this write-up.


00:08:09.680 --> 00:08:12.800
And it's specifically, they've got,


00:08:12.800 --> 00:08:16.640
Zendesk has a bunch of machine learning in Python written.


00:08:16.640 --> 00:08:19.560
And one of the problems they run into is


00:08:19.560 --> 00:08:22.340
some of them will have really big memory spikes


00:08:22.340 --> 00:08:25.360
or memory leaks, and they want to try to figure that out.


00:08:25.360 --> 00:08:27.120
So this was a specific use case.


00:08:27.120 --> 00:08:29.600
So he's not covering all of the options,


00:08:29.600 --> 00:08:32.720
just some of the tools that were used there.


00:08:32.720 --> 00:08:33.640
And I think it's cool.


00:08:33.640 --> 00:08:35.300
I didn't know some of these things were around.


00:08:35.300 --> 00:08:42.580
So there's a, for example, there's a combination of the memory profiler package with matplotlib


00:08:42.580 --> 00:08:48.220
where you can easily run without doing anything to your code, you can run some Python code


00:08:48.220 --> 00:08:53.140
and then get a visual graph of the memory utilization, which is cool.


00:08:53.140 --> 00:08:56.660
If you're hunting into stuff and trying to break things around, there was a discussion


00:08:56.660 --> 00:09:02.660
of using, adding some code to your code to use, it looks like Muppy, M-U-P-P-Y.


00:09:02.660 --> 00:09:03.740
Yeah, Muppy.


00:09:03.740 --> 00:09:07.380
will dump, heap dump in certain places.


00:09:07.380 --> 00:09:10.100
So if you think, sometimes time really doesn't help you


00:09:10.100 --> 00:09:11.900
too much, but you can add certain places


00:09:11.900 --> 00:09:14.180
where you think there is a stable state,


00:09:14.180 --> 00:09:16.100
doing a heap dump, especially if it's somewhere,


00:09:16.100 --> 00:09:18.060
something that's looping, you might be able


00:09:18.060 --> 00:09:19.900
to catch something there.


00:09:19.900 --> 00:09:23.260
Reference to object graph or obj graph


00:09:23.260 --> 00:09:26.060
to profile memory object lineage.


00:09:26.060 --> 00:09:28.260
So objects that create other objects.


00:09:28.260 --> 00:09:30.380
- Yeah, that can be tricky because you've got,


00:09:30.380 --> 00:09:32.520
maybe you have some object, it's a class,


00:09:32.520 --> 00:09:34.960
and it's got some field, that field is a list,


00:09:34.960 --> 00:09:36.580
in that list it has a bunch of objects,


00:09:36.580 --> 00:09:38.360
one of those happens to hold onto a pointer


00:09:38.360 --> 00:09:40.760
to some other huge dictionary that you thought


00:09:40.760 --> 00:09:43.400
should be gone, but there's still some reference


00:09:43.400 --> 00:09:44.420
keeping it alive, right?


00:09:44.420 --> 00:09:47.000
So this object graph will tell you that basically?


00:09:47.000 --> 00:09:47.840
- Yeah. - Nice.


00:09:47.840 --> 00:09:51.560
- Like for example, when he dumped some of the heap dumps,


00:09:51.560 --> 00:09:54.160
some of those examples, it's just that you've got


00:09:54.160 --> 00:09:57.040
so many megabytes towards strings.


00:09:57.040 --> 00:09:59.960
Well, I don't know if that really helps you too much.


00:09:59.960 --> 00:10:02.800
having a finding out where it came from might be helpful.


00:10:02.800 --> 00:10:03.040
>> Yeah.


00:10:03.040 --> 00:10:05.540
>> Then he ends the article with a bunch of tips.


00:10:05.540 --> 00:10:06.740
Do quick feedback.


00:10:06.740 --> 00:10:08.160
If you think something,


00:10:08.160 --> 00:10:10.600
one of the things I liked which is probably really good is,


00:10:10.600 --> 00:10:12.920
if you have memory intensive tasks


00:10:12.920 --> 00:10:15.280
or something you think might be the problem,


00:10:15.280 --> 00:10:17.300
separate that into a separate process,


00:10:17.300 --> 00:10:19.220
so you can debug it separately.


00:10:19.220 --> 00:10:23.480
The Python built-in PDB has a bunch of stuff that can help you as well.


00:10:23.480 --> 00:10:26.240
Then also watch out for leaky packages,


00:10:26.240 --> 00:10:28.400
because the leak might not be in yours,


00:10:28.400 --> 00:10:30.400
it might be in your dependencies.


00:10:30.400 --> 00:10:33.100
Yeah, you might have pip installed a memory leak, for sure.


00:10:33.100 --> 00:10:35.900
Which I was surprised that he said, for example, pandas.


00:10:35.900 --> 00:10:39.400
And I'm like, really? Pandas is like, must be tested the heck out of it.


00:10:39.400 --> 00:10:43.700
But apparently there's some known pandas problems in some corner cases.


00:10:43.700 --> 00:10:44.400
But oh well.


00:10:44.400 --> 00:10:47.200
Yeah, it probably is kind of tricky with like the C layer


00:10:47.200 --> 00:10:51.500
holding on to PyObject references and all sorts of funkiness, right?


00:10:51.500 --> 00:10:54.500
My first reaction to dealing with memory in Python is like,


00:10:54.500 --> 00:10:57.700
well, we're not supposed to have to, so it must be a real pain in the rear.


00:10:57.700 --> 00:11:00.900
But these tools don't look that bad to work with if you need to.


00:11:00.900 --> 00:11:08.200
This object graph looks really cool and it will actually create a PNG visual graph of the relationships,


00:11:08.200 --> 00:11:11.000
which is cool, and you can even ask for back references, like,


00:11:11.000 --> 00:11:17.600
it seems like this is the thing that has all the memory, it should be gone, but why is it not garbage collected or cleaned up?


00:11:17.600 --> 00:11:24.200
And you can say, draw me a graph, or not a, like a mathematical graph, not a parabola type graph,


00:11:24.200 --> 00:11:28.800
a graph to your graph of all the back references to this object, which is nice.


00:11:28.800 --> 00:11:30.800
Yeah, so you can ask it in both directions.


00:11:30.800 --> 00:11:31.300
Yeah, right.


00:11:31.300 --> 00:11:34.800
If you think it should have been deleted and it's not, it's because somebody's still referencing it.


00:11:34.800 --> 00:11:36.000
Right. So who is that?


00:11:36.000 --> 00:11:36.600
Tell me about that.


00:11:36.600 --> 00:11:37.900
I need to know about that right now.


00:11:37.900 --> 00:11:39.000
Yeah, that looks really cool.


00:11:39.000 --> 00:11:41.600
It's definitely something I'd like to explore.


00:11:41.600 --> 00:11:43.000
Actually, let me rephrase that.


00:11:43.000 --> 00:11:44.400
I don't want to explore it.


00:11:44.400 --> 00:11:47.500
I don't have memory leaks, but if I do, I will find it very useful.


00:11:47.500 --> 00:11:48.500
Yes, definitely.


00:11:48.500 --> 00:11:49.500
Here you go.


00:11:49.500 --> 00:11:51.100
Also useful, DigitalOcean.


00:11:51.100 --> 00:11:53.800
Let me tell you a cool thing that they just released.


00:11:53.800 --> 00:11:55.800
And this came from one of the listeners.


00:11:55.800 --> 00:11:57.440
They sent me a message like, "Hey, this looks really cool.


00:11:57.440 --> 00:11:58.760
Do you know about this?"


00:11:58.760 --> 00:12:03.200
So they announced this thing called the Digital Ocean Marketplace.


00:12:03.200 --> 00:12:08.680
So the idea is that different companies and other people can create these pre-configured


00:12:08.680 --> 00:12:12.280
virtual machines, and then you can just do one-click app install them.


00:12:12.280 --> 00:12:17.320
Like, if you want a Ghostblog server configured with Nginx and all that, you just click Ghostblog


00:12:17.320 --> 00:12:20.800
server, pay your $5, and now you have one.


00:12:20.800 --> 00:12:27.280
Or maybe you want GitLab Enterprise, a MongoDB server, or even you can say, "I want a Django


00:12:27.280 --> 00:12:30.960
server," and it'll give you Django, Nginx, G-Unicorn, Postgres, Certbot, a whole bunch


00:12:30.960 --> 00:12:34.080
of stuff pre-configured all to work together in a few seconds.


00:12:34.080 --> 00:12:35.080
That's pretty cool, right?


00:12:35.080 --> 00:12:36.080
>> Yeah, definitely.


00:12:36.080 --> 00:12:37.080
>> Yeah, yeah, yeah.


00:12:37.080 --> 00:12:38.840
So I think this is a really nice feature.


00:12:38.840 --> 00:12:41.640
It's already great to run infrastructure there.


00:12:41.640 --> 00:12:46.960
Now if you can get it much closer to the end, it's a little bit, I'm sure it's Docker-inspired,


00:12:46.960 --> 00:12:47.960
right?


00:12:47.960 --> 00:12:49.720
It seems like that, but for their infrastructure.


00:12:49.720 --> 00:12:51.160
You still have to figure all that stuff out


00:12:51.160 --> 00:12:52.760
and to be able to throw a few dollars


00:12:52.760 --> 00:12:54.120
to the people who are willing to do the work


00:12:54.120 --> 00:12:55.360
to put it together, that's great.


00:12:55.360 --> 00:12:56.600
- Yeah, it's beautiful.


00:12:56.600 --> 00:12:58.600
All right, so check them out over at


00:12:58.600 --> 00:13:01.240
pythonbytes.fm/digitalocean, create an account,


00:13:01.240 --> 00:13:02.760
and then once you get into your account,


00:13:02.760 --> 00:13:04.640
there's a little marketplace tab over there.


00:13:04.640 --> 00:13:06.240
So, super cool.


00:13:06.240 --> 00:13:09.140
So speaking of Docker and all these other things,


00:13:09.140 --> 00:13:12.680
there's a cool article by Craig Kerstens,


00:13:12.680 --> 00:13:15.480
and it's called "Give Me My Monolith Back,"


00:13:15.480 --> 00:13:17.720
or "Give Me Back My Monolith,"


00:13:17.720 --> 00:13:20.100
as opposed to a whole bunch of microservices, right?


00:13:20.100 --> 00:13:23.820
So there's been a lot of hype, excitement, I don't know,


00:13:23.820 --> 00:13:26.820
take your, choose your side of the fence


00:13:26.820 --> 00:13:28.300
around microservices.


00:13:28.300 --> 00:13:31.100
And this is the idea of like, yeah, you have a web app


00:13:31.100 --> 00:13:34.320
and it's got like 500 Python files


00:13:34.320 --> 00:13:36.340
and maybe it's doing all these different things.


00:13:36.340 --> 00:13:37.840
And wouldn't it be better


00:13:37.840 --> 00:13:39.700
if we could take the credit card processing


00:13:39.700 --> 00:13:42.660
and make it its own service with its own database?


00:13:42.660 --> 00:13:45.820
If we could make the caching its own service,


00:13:45.820 --> 00:13:47.740
It's user accounts, it's own service,


00:13:47.740 --> 00:13:49.020
all that kind of stuff.


00:13:49.020 --> 00:13:51.880
And then that user account part is super simple, right?


00:13:51.880 --> 00:13:54.740
Because the whole purpose of this application is,


00:13:54.740 --> 00:13:56.980
who are you, what can you do, can you log in,


00:13:56.980 --> 00:13:59.140
can you reset your password or something like this, right?


00:13:59.140 --> 00:13:59.980
That seems good, yeah?


00:13:59.980 --> 00:14:00.820
- Yeah.


00:14:00.820 --> 00:14:01.980
- There's a lot of really good uses for this.


00:14:01.980 --> 00:14:05.100
Like if you have a large team of people


00:14:05.100 --> 00:14:06.860
working on a large web app,


00:14:06.860 --> 00:14:09.300
it might make more sense to break into these small pieces


00:14:09.300 --> 00:14:12.260
and have some people in charge of each piece.


00:14:12.260 --> 00:14:14.580
I think that actually legitimately makes a lot of sense.


00:14:14.580 --> 00:14:17.380
It's easy to bring on a junior developer who can say,


00:14:17.380 --> 00:14:20.340
all right, I'm gonna work on this caching bit or whatever,


00:14:20.340 --> 00:14:21.520
and I don't have to know the whole thing.


00:14:21.520 --> 00:14:23.560
I just gotta work on my little API.


00:14:23.560 --> 00:14:26.600
It does court, async, or whatever it does.


00:14:26.600 --> 00:14:27.620
That makes a lot of sense,


00:14:27.620 --> 00:14:29.380
but most people who are working on web apps


00:14:29.380 --> 00:14:33.100
aren't in that space of having 30 people on their team.


00:14:33.100 --> 00:14:34.020
That's really rare.


00:14:34.020 --> 00:14:35.900
You've got them down this rant of you're not Google,


00:14:35.900 --> 00:14:37.820
you're not Facebook, you're not LinkedIn.


00:14:37.820 --> 00:14:40.540
You don't need all these patterns 'cause you are not them.


00:14:40.540 --> 00:14:44.300
You're a little relatively smaller company or project.


00:14:44.300 --> 00:14:47.900
Anyway, this guy feels like, you know,


00:14:47.900 --> 00:14:50.640
that adds a lot of complexity and challenges


00:14:50.640 --> 00:14:52.300
and he lays them out of like,


00:14:52.300 --> 00:14:54.260
why does the world have to be so hard?


00:14:54.260 --> 00:14:57.480
Wasn't it easy before and now it's not.


00:14:57.480 --> 00:14:59.380
Not from the article, but just a thought of mine.


00:14:59.380 --> 00:15:02.700
Like when I think of this microservice architecture,


00:15:02.700 --> 00:15:05.740
what you're doing is you're taking code complexity


00:15:05.740 --> 00:15:08.180
and you're moving it to infrastructure complexity.


00:15:08.180 --> 00:15:09.020
- Yeah, definitely.


00:15:09.020 --> 00:15:11.740
- Instead of having one kind of complicated bit of code,


00:15:11.740 --> 00:15:15.220
I now have 12 super simple bits of code,


00:15:15.220 --> 00:15:16.940
but they all have to work together


00:15:16.940 --> 00:15:19.620
in fairly complicated network environments,


00:15:19.620 --> 00:15:21.660
failover, all this kind of stuff,


00:15:21.660 --> 00:15:23.460
this topography and whatnot.


00:15:23.460 --> 00:15:26.660
So my thought is at least,


00:15:26.660 --> 00:15:28.260
well, which of those two things are you good at,


00:15:28.260 --> 00:15:30.180
infrastructure or code?


00:15:30.180 --> 00:15:32.160
That drives a lot of these decisions.


00:15:32.160 --> 00:15:34.860
But he runs down a couple of things that he said


00:15:34.860 --> 00:15:38.060
used to be simple, but now we get to revisit them.


00:15:38.060 --> 00:15:38.980
Get to.


00:15:38.980 --> 00:15:42.600
So, setup went from like chemistry to quantum mechanics.


00:15:42.600 --> 00:15:46.540
A lot of this has to do with bringing new people


00:15:46.540 --> 00:15:48.860
onto a team or junior developers and things like that.


00:15:48.860 --> 00:15:51.220
So it says, onboarding a new engineer,


00:15:51.220 --> 00:15:52.640
at least for the initial environment,


00:15:52.640 --> 00:15:54.280
used to be like half a day.


00:15:54.280 --> 00:15:56.940
And now we've ventured into microservices,


00:15:56.940 --> 00:15:58.780
this onboarding time has skyrocketed


00:15:58.780 --> 00:16:00.440
and it's super complicated for them


00:16:00.440 --> 00:16:02.540
to understand all the moving pieces.


00:16:02.540 --> 00:16:04.700
And then the next one is,


00:16:04.700 --> 00:16:07.220
so long for understanding our systems.


00:16:07.220 --> 00:16:08.860
You know, back when we had monolithic apps,


00:16:08.860 --> 00:16:11.460
you had an error, it had a stack trace.


00:16:11.460 --> 00:16:14.260
You click on the hyperlink generated by your little editor


00:16:14.260 --> 00:16:16.700
to take you to the line where the stack trace is.


00:16:16.700 --> 00:16:19.940
And now, you have different services


00:16:19.940 --> 00:16:21.020
that talk to another service,


00:16:21.020 --> 00:16:22.740
that queue something on a message bus,


00:16:22.740 --> 00:16:24.120
that another service pulls it out,


00:16:24.120 --> 00:16:25.540
and then you get an error.


00:16:25.540 --> 00:16:27.100
What caused that?


00:16:27.100 --> 00:16:29.360
Right, how do you follow that through?


00:16:29.360 --> 00:16:30.580
How do you debug that?


00:16:30.580 --> 00:16:32.580
So, it says, well, if we can't debug them,


00:16:32.580 --> 00:16:33.620
maybe we can test them.


00:16:33.620 --> 00:16:36.140
Talks about the challenges of continuous integration


00:16:36.140 --> 00:16:36.980
and whatnot.


00:16:36.980 --> 00:16:40.540
but also talks about some services that were made into


00:16:40.540 --> 00:16:42.460
some apps that were made into microservices


00:16:42.460 --> 00:16:45.580
that are now moving back sort of in a reverse migration


00:16:45.580 --> 00:16:46.520
to these monoliths.


00:16:46.520 --> 00:16:49.180
And I gotta say, I'm pretty sympathetic with this.


00:16:49.180 --> 00:16:52.620
Like I see the value of microservices,


00:16:52.620 --> 00:16:55.100
but I also know that I'm not Google, right?


00:16:55.100 --> 00:16:57.800
And so, yeah, anyway, for me,


00:16:57.800 --> 00:16:59.540
I don't think this whole microservice world


00:16:59.540 --> 00:17:01.700
makes as much sense in my space,


00:17:01.700 --> 00:17:03.300
but I don't know, what do you think?


00:17:03.300 --> 00:17:06.220
- We should go back to HTML and Perl.


00:17:06.220 --> 00:17:08.220
- That's right, can't we just have static files?


00:17:08.220 --> 00:17:09.860
All this like logic is busting your brain.


00:17:09.860 --> 00:17:12.140
- CGI used to be easy.


00:17:12.140 --> 00:17:12.980
No.


00:17:12.980 --> 00:17:15.300
- No, it actually was never, ever easy.


00:17:15.300 --> 00:17:18.060
- I think that there's different ways to solve problems


00:17:18.060 --> 00:17:19.220
and I think that making sure


00:17:19.220 --> 00:17:20.340
that you're paying attention to it,


00:17:20.340 --> 00:17:23.780
I think is a good idea and make sure that people understand


00:17:23.780 --> 00:17:28.740
that microservices are sometimes it's a funny,


00:17:28.740 --> 00:17:31.380
it's a shiny new thing to go learn.


00:17:31.380 --> 00:17:33.540
And sometimes that's not bad


00:17:33.540 --> 00:17:35.720
if you're willing to take on the risks.


00:17:35.720 --> 00:17:39.060
but it is changing from what you know


00:17:39.060 --> 00:17:40.820
to what you don't know is a risk.


00:17:40.820 --> 00:17:41.900
- It's definitely exciting.


00:17:41.900 --> 00:17:44.080
I mean, you can bring in Docker and Kubernetes


00:17:44.080 --> 00:17:45.580
and do all sorts of fun stuff,


00:17:45.580 --> 00:17:46.540
but at the same time,


00:17:46.540 --> 00:17:48.620
just be aware of the trade-offs you're making.


00:17:48.620 --> 00:17:50.120
- Some of the things that it solved


00:17:50.120 --> 00:17:51.900
are now solved by async.


00:17:51.900 --> 00:17:53.140
- Yeah, that's true, absolutely.


00:17:53.140 --> 00:17:54.340
- One of the things also is


00:17:54.340 --> 00:17:56.660
if you're in a single language or not.


00:17:56.660 --> 00:17:58.520
So one of the things that microservices gives you


00:17:58.520 --> 00:18:01.460
is the different teams can do whatever language they want,


00:18:01.460 --> 00:18:03.580
as long as they provide an interface


00:18:03.580 --> 00:18:05.340
that's compatible with everybody else.


00:18:05.340 --> 00:18:07.380
- The authentication bits in Node.js,


00:18:07.380 --> 00:18:10.040
the caching tiers in something else,


00:18:10.040 --> 00:18:12.380
and the front ends in Python or whatever.


00:18:12.380 --> 00:18:13.220
- Yeah, definitely.


00:18:13.220 --> 00:18:14.460
- Yeah, makes sense.


00:18:14.460 --> 00:18:17.220
Again, it's not something you will do that often


00:18:17.220 --> 00:18:18.780
when you're just a couple of people,


00:18:18.780 --> 00:18:20.620
but if you're a big team or set of teams,


00:18:20.620 --> 00:18:22.380
then sure, makes a lot of sense.


00:18:22.380 --> 00:18:27.060
All right, so I know of some famous laws and rules


00:18:27.060 --> 00:18:29.660
in software development, like the solid principles,


00:18:29.660 --> 00:18:32.060
single responsibility principle, open-close principle,


00:18:32.060 --> 00:18:32.940
these are all good.


00:18:32.940 --> 00:18:35.980
You found some more amusing ones, didn't you?


00:18:35.980 --> 00:18:39.660
- Yeah, some of them are serious and some are amusing.


00:18:39.660 --> 00:18:41.780
All of them have kind of a little bit of truth.


00:18:41.780 --> 00:18:43.120
And this is an older article,


00:18:43.120 --> 00:18:45.840
so I'm not really sure how I got a hold of it.


00:18:45.840 --> 00:18:48.880
But it's the famous laws of software development,


00:18:48.880 --> 00:18:50.940
and there are 13 listed.


00:18:50.940 --> 00:18:52.780
I think I counted that many.


00:18:52.780 --> 00:18:54.660
I'm not gonna read all 13.


00:18:54.660 --> 00:18:57.680
I guess it was written in 2017, it's not that old.


00:18:57.680 --> 00:19:01.260
But okay, so Hofstetter's Law, which is great.


00:19:01.260 --> 00:19:03.300
It always takes longer than you expect,


00:19:03.300 --> 00:19:05.880
even when you take into account Hofstadter's law.


00:19:05.880 --> 00:19:07.560
So it's self-referencing.


00:19:07.560 --> 00:19:08.960
- I love it, yeah, I love it.


00:19:08.960 --> 00:19:10.100
(laughs)


00:19:10.100 --> 00:19:11.240
There's some money good ones here.


00:19:11.240 --> 00:19:12.480
- So that's just funny.


00:19:12.480 --> 00:19:15.480
There's Conway's law, which it's not supposed to be funny,


00:19:15.480 --> 00:19:18.320
but it's sometimes depressing.


00:19:18.320 --> 00:19:22.200
Any piece of software reflects the organizational structure


00:19:22.200 --> 00:19:23.040
that produced it.


00:19:23.040 --> 00:19:24.240
- Yeah, I think that's true.


00:19:24.240 --> 00:19:27.600
- Like microservices are great for lots of teams.


00:19:27.600 --> 00:19:30.680
One team, one monolith, or something.


00:19:30.680 --> 00:19:32.340
I don't know, but I've seen that before.


00:19:32.340 --> 00:19:34.780
Also, the hierarchy of different teams


00:19:34.780 --> 00:19:37.060
shows up in the software as well.


00:19:37.060 --> 00:19:41.300
And then, of course, a couple more I'd like to point out,


00:19:41.300 --> 00:19:44.540
the peer principle, in any hierarchy,


00:19:44.540 --> 00:19:48.300
every employee tends to rise to his level of incompetence.


00:19:48.300 --> 00:19:51.860
- Sounds like a quote from the Despair,


00:19:51.860 --> 00:19:54.620
Inc. calendars or posters.


00:19:54.620 --> 00:19:55.460
That's great.


00:19:55.460 --> 00:19:57.420
- Yeah, and then the 90/90 rule,


00:19:57.420 --> 00:19:59.120
which I haven't actually heard before,


00:19:59.120 --> 00:20:01.440
but it's just hilarious.


00:20:01.440 --> 00:20:02.420
Have you heard this before?


00:20:02.420 --> 00:20:03.260
- No.


00:20:03.260 --> 00:20:06.120
- The first 90% of the code takes 10% of the time.


00:20:06.120 --> 00:20:09.260
The remaining 10% takes the other 90% of the time.


00:20:09.260 --> 00:20:11.520
- That sounds about right to me.


00:20:11.520 --> 00:20:14.400
Yeah, it's definitely, it feels like things just drag on


00:20:14.400 --> 00:20:16.520
and on right at the end of these projects.


00:20:16.520 --> 00:20:17.880
So the comments are good too.


00:20:17.880 --> 00:20:19.840
I noticed that some people, a guy named Cory


00:20:19.840 --> 00:20:20.680
threw in a thing and said,


00:20:20.680 --> 00:20:24.120
"I'm shocked that Cunningham's Law isn't on the list."


00:20:24.120 --> 00:20:26.680
Cunningham's Law, the fastest way to get help


00:20:26.680 --> 00:20:29.200
over the internet is not to ask a question,


00:20:29.200 --> 00:20:31.080
but instead to answer it wrong.


00:20:31.080 --> 00:20:33.200
(laughing)


00:20:33.200 --> 00:20:35.200
And then someone also responds,


00:20:35.200 --> 00:20:37.800
maybe it's omission was the conscious choice to invoke it.


00:20:37.800 --> 00:20:39.440
(laughing)


00:20:39.440 --> 00:20:40.280
- That's awesome.


00:20:40.280 --> 00:20:41.120
- Yeah, it's really good.


00:20:41.120 --> 00:20:42.240
There's a bunch of nice ones in there.


00:20:42.240 --> 00:20:43.880
- Yeah, that's like real though.


00:20:43.880 --> 00:20:46.140
I mean, the best way to get people to help you


00:20:46.140 --> 00:20:48.640
on the internet is to start blogging the wrong stuff.


00:20:48.640 --> 00:20:49.640
(laughing)


00:20:49.640 --> 00:20:52.880
- Yeah, enable comments and start writing.


00:20:52.880 --> 00:20:54.360
Yeah, that's cool.


00:20:54.360 --> 00:20:56.440
I got a quick one to round it out here.


00:20:56.440 --> 00:20:59.000
We talked about a plugin architecture before


00:20:59.000 --> 00:21:02.280
for building plugins that ran like within your app.


00:21:02.280 --> 00:21:05.840
So basically, ways to let people interface


00:21:05.840 --> 00:21:08.280
like simple bits of code into your other systems


00:21:08.280 --> 00:21:09.840
and version plugins and all that.


00:21:09.840 --> 00:21:12.280
There's another one called Beer Garden plugins,


00:21:12.280 --> 00:21:13.600
which is pretty fun.


00:21:13.600 --> 00:21:15.640
I want the listeners suggested this.


00:21:15.640 --> 00:21:18.000
So the idea is it's a framework


00:21:18.000 --> 00:21:19.520
that will convert your functions.


00:21:19.520 --> 00:21:21.640
These are like regular Python scripts.


00:21:21.640 --> 00:21:24.160
They don't know anything about the web


00:21:24.160 --> 00:21:25.400
or plugins or whatever,


00:21:25.400 --> 00:21:27.620
convert those into composable, discoverable,


00:21:27.620 --> 00:21:30.600
production-ready services, as in RESTful,


00:21:30.600 --> 00:21:33.220
HTTP services with minimal overhead.


00:21:33.220 --> 00:21:35.260
So if you have a class, you can just go say,


00:21:35.260 --> 00:21:37.380
this is a system, and then the functions on the class,


00:21:37.380 --> 00:21:39.800
you go, these are services, and they take these parameters,


00:21:39.800 --> 00:21:42.820
and you describe what they take, things like that,


00:21:42.820 --> 00:21:45.340
and it will just go serve that.


00:21:45.340 --> 00:21:47.780
And it even does cool stuff like it does


00:21:47.780 --> 00:21:51.300
swagger documentation of the services and whatnot.


00:21:51.300 --> 00:21:54.060
So yeah, it's a pretty interesting little quick way


00:21:54.060 --> 00:21:56.340
to convert code that was not meant to be a service


00:21:56.340 --> 00:21:57.300
into services.


00:21:57.300 --> 00:21:58.140
- Oh, very cool.


00:21:58.140 --> 00:21:59.480
- Yeah, it's pretty cool.


00:21:59.480 --> 00:22:02.860
It's apparently based on MongoDB, RabbitMQ,


00:22:02.860 --> 00:22:06.100
and it supports modern Python, so that's pretty cool.


00:22:06.100 --> 00:22:08.140
It talks about what you have to do to get it running,


00:22:08.140 --> 00:22:11.180
or something that's kind of nice is it also comes


00:22:11.180 --> 00:22:13.980
in a Docker and Docker Compose form.


00:22:13.980 --> 00:22:18.620
So you can just clone the Docker Compose bit from GitHub,


00:22:18.620 --> 00:22:20.500
and then you say Docker Compose up,


00:22:20.500 --> 00:22:21.580
and now it's up and running.


00:22:21.580 --> 00:22:23.860
And then you can give it these little apps


00:22:23.860 --> 00:22:25.140
and whatnot, it's pretty cool.


00:22:25.140 --> 00:22:25.980
- Nice.


00:22:25.980 --> 00:22:27.820
- Yeah, so I think the idea is you run your code


00:22:27.820 --> 00:22:29.900
and it plugs into the server there.


00:22:29.900 --> 00:22:31.740
So yeah, anyway, it's pretty neat.


00:22:31.740 --> 00:22:33.460
People can check that out if that sounds like something


00:22:33.460 --> 00:22:35.060
they're looking for.


00:22:35.060 --> 00:22:37.740
All right, well, that's it for official items.


00:22:37.740 --> 00:22:40.900
Anything else you wanna cover here at the end?


00:22:40.900 --> 00:22:44.220
- Just had a really cool interview the other day.


00:22:44.220 --> 00:22:47.140
This'll go out as a testing code 69,


00:22:47.140 --> 00:22:49.900
which should be available for everybody


00:22:49.900 --> 00:22:51.500
before you listen to this.


00:22:51.500 --> 00:22:56.780
But it was with Andy Hunt, who is now at the head of Pragmatic Programmer.


00:22:56.780 --> 00:22:57.780
I mean,


00:22:57.780 --> 00:22:59.980
Yeah, he's one of the original founders of it, right?


00:22:59.980 --> 00:23:01.260
Him and one other guy, I think?


00:23:01.260 --> 00:23:02.260
Yeah.


00:23:02.260 --> 00:23:03.260
Is that right?


00:23:03.260 --> 00:23:06.860
Andy Hunt and Dave Thomas wrote the Pragmatic Programmer, and that was released in '99.


00:23:06.860 --> 00:23:11.140
And then in 2003, they formed their own publishing company, and they've been going strong.


00:23:11.140 --> 00:23:13.900
And the Pytest book was under their publishing company.


00:23:13.900 --> 00:23:20.060
And so now Dave doesn't play an active role in the publishing anymore, but Andy does.


00:23:20.060 --> 00:23:21.760
So it's a really cool conversation.


00:23:21.760 --> 00:23:25.900
Andy was also one of the original signers of the Agile Manifesto.


00:23:25.900 --> 00:23:28.120
And so we talk a lot about, oh, right.


00:23:28.120 --> 00:23:28.780
That's cool.


00:23:28.780 --> 00:23:29.100
Yeah.


00:23:29.100 --> 00:23:31.760
We talk a lot about that and quite a few other things.


00:23:31.760 --> 00:23:33.860
So that, that, that's a fun thing to listen to.


00:23:33.860 --> 00:23:34.220
Excellent.


00:23:34.220 --> 00:23:35.940
I'm definitely going to check it out when you release it.


00:23:35.940 --> 00:23:36.480
That's a good one.


00:23:36.480 --> 00:23:36.880
How about you?


00:23:36.880 --> 00:23:39.140
So I have two quick things to share with you.


00:23:39.140 --> 00:23:42.300
First, there's this thing called Firefox send.


00:23:42.300 --> 00:23:43.500
Have you heard of this?


00:23:43.500 --> 00:23:44.260
I have not.


00:23:44.260 --> 00:23:44.500
Yeah.


00:23:44.500 --> 00:23:48.640
So Firefox send is actually not something built into Firefox, but it's more like a


00:23:48.640 --> 00:23:53.880
Mozilla project to make the web better, right? So here's what it does is it lets


00:23:53.880 --> 00:23:59.840
you share files securely, large files like up to two and a half gigs per file,


00:23:59.840 --> 00:24:07.440
and it does end-to-end encryption where the the decryption key is


00:24:07.440 --> 00:24:12.040
actually stored in the URL. So if you don't share the URL, like even the


00:24:12.040 --> 00:24:16.680
Firefox send people can't decrypt it or whatever. Okay, interesting. So basically


00:24:16.680 --> 00:24:19.840
Basically it's a way to serve these files around,


00:24:19.840 --> 00:24:23.260
like without putting it into Dropbox or OneDrive


00:24:23.260 --> 00:24:24.520
or Google Drive or whatever,


00:24:24.520 --> 00:24:26.400
where it's like permanently there,


00:24:26.400 --> 00:24:27.560
it's gonna be backed up.


00:24:27.560 --> 00:24:29.400
It's, you know, who knows like if you could ever


00:24:29.400 --> 00:24:31.320
truly delete that thing, right?


00:24:31.320 --> 00:24:35.040
Whereas here, the maximum life of one of these files


00:24:35.040 --> 00:24:36.680
is seven days, and you can even say


00:24:36.680 --> 00:24:38.520
it can only be downloaded one time


00:24:38.520 --> 00:24:41.080
and delete it in an hour or something like that.


00:24:41.080 --> 00:24:43.160
And of course, the encryption key is not stored


00:24:43.160 --> 00:24:44.720
with the Firefox folks.


00:24:44.720 --> 00:24:47.640
So if it gets lost, it's not that big of a deal.


00:24:47.640 --> 00:24:48.640
- Interesting.


00:24:48.640 --> 00:24:49.640
I'll have to check that out.


00:24:49.640 --> 00:24:50.840
- Yeah, it's a free, quick little thing.


00:24:50.840 --> 00:24:56.400
You can either sign in and have larger file options or smaller ones if you want to stay


00:24:56.400 --> 00:24:57.400
anonymous.


00:24:57.400 --> 00:25:01.040
But yeah, definitely I think it fills a cool need and it's kind of nice to see Mozilla


00:25:01.040 --> 00:25:04.220
just making the web better in that way.


00:25:04.220 --> 00:25:05.800
It doesn't depend on Firefox.


00:25:05.800 --> 00:25:07.560
It just happens to be made by them.


00:25:07.560 --> 00:25:08.560
- Okay.


00:25:08.560 --> 00:25:09.560
- Nice.


00:25:09.560 --> 00:25:11.280
Speaking of making stuff better, do you know what I really hate?


00:25:11.280 --> 00:25:17.880
I hate going to weather.com and I'm saying, "Oh, it looks like you're running an ad blocker.


00:25:17.880 --> 00:25:23.360
We want to serve you crap ads from an ad network that may have malicious content and JavaScript


00:25:23.360 --> 00:25:26.240
in it, so please whitelist us."


00:25:26.240 --> 00:25:28.480
And every time I see that, I think if you...


00:25:28.480 --> 00:25:33.440
And these are not small little blogs or little article sites.


00:25:33.440 --> 00:25:38.680
These are CNN, The Weather Channel, major, major places, right?


00:25:38.680 --> 00:25:42.160
And I always think, look, if you want to serve ads to me,


00:25:42.160 --> 00:25:46.320
why don't you do it on a system that is not broken,


00:25:46.320 --> 00:25:50.320
on a way that will not put my computer and my information


00:25:50.320 --> 00:25:53.040
and everything else at risk.


00:25:53.040 --> 00:25:56.160
You could easily talk to your sponsors,


00:25:56.160 --> 00:25:59.220
put an image on your site, let people click on it,


00:25:59.220 --> 00:26:00.720
and it takes them to their offer.


00:26:00.720 --> 00:26:03.320
But no, they want to run all sorts of retargeting


00:26:03.320 --> 00:26:05.520
and tracking, and they want to figure out,


00:26:05.520 --> 00:26:09.560
like, oh, are you a woman who is 36,


00:26:09.560 --> 00:26:11.600
who is also searched for this, right?


00:26:11.600 --> 00:26:12.440
Like, it's really shady.


00:26:12.440 --> 00:26:15.500
So this is not a change for us,


00:26:15.500 --> 00:26:18.660
but this is more of a make it explicit for us.


00:26:18.660 --> 00:26:22.780
On Pythonbytes.fm and also talkpython.fm,


00:26:22.780 --> 00:26:24.100
we don't pop up these,


00:26:24.100 --> 00:26:25.520
hey, it looks like you're running an ad blocker,


00:26:25.520 --> 00:26:26.920
please stop it.


00:26:26.920 --> 00:26:30.360
Because our ads still show when there's an ad blocker,


00:26:30.360 --> 00:26:31.920
because all they are is images,


00:26:31.920 --> 00:26:33.320
and we're not trying to retarget anyone.


00:26:33.320 --> 00:26:34.160
Isn't that cool?


00:26:34.160 --> 00:26:35.000
- That is very cool, yeah.


00:26:35.000 --> 00:26:38.600
Yeah, so there's this move I've seen on the internet


00:26:38.600 --> 00:26:40.480
to talk, just sort of a pushback on that,


00:26:40.480 --> 00:26:42.760
to say, no, these are ethical ads.


00:26:42.760 --> 00:26:44.680
You know, you see this on Read the Docs and other places.


00:26:44.680 --> 00:26:47.120
So I put a little note under our ad saying,


00:26:47.120 --> 00:26:48.440
these ads are served ethically.


00:26:48.440 --> 00:26:50.960
We don't track you, we don't retarget you,


00:26:50.960 --> 00:26:52.120
we don't do anything.


00:26:52.120 --> 00:26:54.640
But here's our sponsor, if you like it,


00:26:54.640 --> 00:26:56.200
if you like the product, you wanna support us,


00:26:56.200 --> 00:26:59.440
click on it, and that will,


00:26:59.440 --> 00:27:01.560
they'll know that you came from us because of the URL,


00:27:01.560 --> 00:27:02.760
and that's all you need, right?


00:27:02.760 --> 00:27:05.120
So I really wish all these places that say,


00:27:05.120 --> 00:27:07.160
please whitelist us, instead said,


00:27:07.160 --> 00:27:09.080
could we have a better business model


00:27:09.080 --> 00:27:11.180
where we don't have to track people


00:27:11.180 --> 00:27:12.880
and do all sorts of nefarious stuff.


00:27:12.880 --> 00:27:14.480
So we're opting out.


00:27:14.480 --> 00:27:15.320
- Good job.


00:27:15.320 --> 00:27:16.140
- Yeah, thanks.


00:27:16.140 --> 00:27:19.200
All right, well, I believe it's time to laugh a little bit.


00:27:19.200 --> 00:27:21.120
- Yeah.


00:27:21.120 --> 00:27:21.940
- All right, go first.


00:27:21.940 --> 00:27:25.560
- I really like this joke that Derek Chambers submitted.


00:27:25.560 --> 00:27:29.200
It is, what do you call it when a Python programmer


00:27:29.200 --> 00:27:31.360
refuses to implement custom objects?


00:27:31.360 --> 00:27:32.260
- What's that, I don't know.


00:27:32.260 --> 00:27:33.600
- Self deprivation.


00:27:33.600 --> 00:27:38.180
And then he adds, "Sorry, that joke was really classless."


00:27:38.180 --> 00:27:39.460
- Yeah, that's pretty good, I love it.


00:27:39.460 --> 00:27:41.780
The classless Python.


00:27:41.780 --> 00:27:43.460
Cool, so I have another one for you,


00:27:43.460 --> 00:27:46.380
and I pretty much have an infinite supply of these now


00:27:46.380 --> 00:27:49.220
that I've pipx installed PyJokes.


00:27:49.220 --> 00:27:51.540
So I ran this before our episode,


00:27:51.540 --> 00:27:53.900
and this one came up, said, "I had a problem,


00:27:53.900 --> 00:27:55.340
"so I thought I'd use Java.


00:27:55.340 --> 00:27:57.080
"Now I have a problem factory."


00:27:57.080 --> 00:28:00.100
(laughing)


00:28:00.100 --> 00:28:00.940
I love it.


00:28:01.880 --> 00:28:05.600
Anyway, that's the jokes, and if you find yourself


00:28:05.600 --> 00:28:08.000
wanting more jokes between now and the next episode


00:28:08.000 --> 00:28:10.640
we release, you can always pipx install pyjokes


00:28:10.640 --> 00:28:12.800
and get your fix on the command line.


00:28:12.800 --> 00:28:14.200
- Yeah, oh, here's one more.


00:28:14.200 --> 00:28:15.760
Okay, I just ran it.


00:28:15.760 --> 00:28:17.080
I gotta do this one also.


00:28:17.080 --> 00:28:19.580
There's only two hard problems in computer science,


00:28:19.580 --> 00:28:22.880
cache invalidation, naming things, and off by one errors.


00:28:22.880 --> 00:28:23.720
(laughing)


00:28:23.720 --> 00:28:25.000
- Nice.


00:28:25.000 --> 00:28:27.360
Yeah, there's good jokes in that pyjokes set.


00:28:27.360 --> 00:28:28.200
I love it.


00:28:28.200 --> 00:28:29.280
- Yeah, there's not an infinite number,


00:28:29.280 --> 00:28:31.240
so people still keep sending us jokes.


00:28:31.240 --> 00:28:33.440
- Yeah, we're gonna hit the limit eventually.


00:28:33.440 --> 00:28:35.940
It's gotta happen, but definitely fun.


00:28:35.940 --> 00:28:37.480
So thank you for sending that in, Derek.


00:28:37.480 --> 00:28:39.960
And Brian, thanks for doing this with me every week.


00:28:39.960 --> 00:28:40.800
- Yep, thank you.


00:28:40.800 --> 00:28:41.740
- You bet, talk to you later.


00:28:41.740 --> 00:28:43.480
Thank you for listening to Python Bytes.


00:28:43.480 --> 00:28:45.940
Follow the show on Twitter via @pythonbytes.


00:28:45.940 --> 00:28:49.000
That's Python Bytes as in B-Y-T-E-S.


00:28:49.000 --> 00:28:52.180
And get the full show notes at pythonbytes.fm.


00:28:52.180 --> 00:28:53.800
If you have a news item you want featured,


00:28:53.800 --> 00:28:56.240
just visit pythonbytes.fm and send it our way.


00:28:56.240 --> 00:28:59.120
We're always on the lookout for sharing something cool.


00:28:59.120 --> 00:29:00.960
On behalf of myself and Brian Okken,


00:29:00.960 --> 00:29:05.440
This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

