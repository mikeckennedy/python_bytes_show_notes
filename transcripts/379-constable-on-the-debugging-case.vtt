WEBVTT

00:00:00.000 --> 00:00:05.040
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.040 --> 00:00:10.320
This is episode 379, recorded April 16th, and I am Brian Okken.

00:00:10.320 --> 00:00:11.600
And I'm Michael Kennedy.

00:00:11.600 --> 00:00:18.480
This week we are sponsored by us, Talk Python training courses, and also the pytest course,

00:00:18.480 --> 00:00:23.600
and our Patreon supporters. We love everybody that supports us. We really appreciate it.

00:00:23.600 --> 00:00:28.960
And if you'd like to connect with us, we're all on Fostadon, on Mastodon.

00:00:28.960 --> 00:00:33.280
So it's @mkennedy, @brianocken, and @pythonbytes.

00:00:33.280 --> 00:00:40.800
And I wanted to shout out to myself, I guess, and Michael for we're doing a newsletter now.

00:00:40.800 --> 00:00:45.520
So if you head over to pythonbytes.fm and join the friends of the show list,

00:00:45.520 --> 00:00:48.160
we will send you an email with all of the tidbits.

00:00:48.160 --> 00:00:52.320
So if you happen to miss an episode, you can catch up on all the links that we share.

00:00:52.320 --> 00:00:58.080
Michael, why don't you kick us off with our first topic?

00:00:58.640 --> 00:01:00.080
Let's get started, huh?

00:01:00.080 --> 00:01:04.320
So I want to talk about an article by Stephanie Mullin.

00:01:04.320 --> 00:01:08.400
She put together this really nice article on something that I don't use very much,

00:01:08.400 --> 00:01:10.880
Git pre-commit hooks. Do you use Git pre-commit hooks?

00:01:10.880 --> 00:01:14.880
Not, yes, on some projects.

00:01:14.880 --> 00:01:18.800
Yeah, and I just think there's a lot of possibility for interesting things there.

00:01:18.800 --> 00:01:24.320
And, you know, I've considered it, but you don't want stuff that like takes a long time to run

00:01:24.320 --> 00:01:29.840
there, so like how much value do you get? But nowadays with tools like Ruff and others that

00:01:29.840 --> 00:01:33.920
run really quickly, it's basically you wouldn't even really notice it, right?

00:01:33.920 --> 00:01:36.000
So it's not a lot of overhead.

00:01:36.000 --> 00:01:40.000
So maybe it's time to reconsider Git pre-commit hooks.

00:01:40.000 --> 00:01:42.480
And she has a really nice walkthrough here.

00:01:42.480 --> 00:01:45.840
So I just kind of want to set out some of the motivation and kind of call attention

00:01:45.840 --> 00:01:46.720
to this article.

00:01:46.720 --> 00:01:49.760
People can come check it out and set up pre-commit hooks for themselves.

00:01:49.760 --> 00:01:51.520
So why do you care about these things?

00:01:51.520 --> 00:01:54.720
They give developers near instant feedback of code locally.

00:01:54.720 --> 00:01:58.880
So not all, but some of the things that would run in continuous integration,

00:01:58.880 --> 00:02:03.680
like linting checks and other types of checks run.

00:02:03.680 --> 00:02:09.040
And when you try to do a Git commit, and if it, for some reason, there's a problem, right?

00:02:09.040 --> 00:02:10.560
Like it won't even let you commit.

00:02:10.560 --> 00:02:11.680
It'll say, no, can't commit.

00:02:11.680 --> 00:02:14.640
You've got to fix the issue detected by the pre-commit hook.

00:02:14.640 --> 00:02:20.720
So it's kind of a gate before stuff actually gets into broader source control world.

00:02:20.720 --> 00:02:24.320
And super valuable if you're on a team, but also if you just want to make sure,

00:02:24.320 --> 00:02:27.600
like, I kind of want to make sure I'm doing this for myself, for my own project,

00:02:27.600 --> 00:02:31.120
or I'm working alone at a company and I still want to make sure these things happen,

00:02:31.120 --> 00:02:32.000
then throw them in there.

00:02:32.000 --> 00:02:32.960
That's for you.

00:02:32.960 --> 00:02:36.720
Also, the continuous integration side of thing is pretty excellent.

00:02:36.720 --> 00:02:44.640
So here she's using a project, I believe by Anthony Sotili called pre-commit.

00:02:44.640 --> 00:02:49.280
And pre-commit is a Python project, but it's not only for Python things

00:02:49.280 --> 00:02:52.240
and Git and source control, it just happens to run on Python.

00:02:52.240 --> 00:02:54.880
Like some things run on C, some things run on Rust.

00:02:54.880 --> 00:02:56.320
This is what runs on Python.

00:02:56.320 --> 00:02:59.840
So basically, as long as you can run Python things, you have an interpreter,

00:02:59.840 --> 00:03:02.000
you can use pre-commit for whatever projects.

00:03:02.000 --> 00:03:05.680
You know, if you're a React native person, you could use pre-commit for it, right?

00:03:05.680 --> 00:03:06.080
- Yeah.

00:03:06.080 --> 00:03:09.600
- So there's a nice example of showing how to set up a bunch of checks.

00:03:09.600 --> 00:03:10.720
And it's super easy.

00:03:10.720 --> 00:03:15.680
Basically, you set up pre-commit-config-.yml file or .yml.

00:03:15.680 --> 00:03:19.040
And then you specify different things to run.

00:03:19.040 --> 00:03:23.120
And so you can say, I want to run the hooks for check the format for the toml file,

00:03:23.120 --> 00:03:24.880
check the format for yml files.

00:03:24.880 --> 00:03:31.680
Make sure that every file ends with a blank line, trim out all white, trailing white space.

00:03:31.680 --> 00:03:34.240
All those kinds, those are all pretty simple and pretty nice, right?

00:03:34.240 --> 00:03:34.800
- Yes.

00:03:34.800 --> 00:03:38.080
- Another one is throw in the rough pre-commit.

00:03:38.080 --> 00:03:44.480
And then I'll just say run rough and run rough format, which will fix up the things.

00:03:44.480 --> 00:03:48.000
And you can even pass arguments to it through these pre-commit hooks here,

00:03:48.000 --> 00:03:49.120
which is pretty cool.

00:03:49.120 --> 00:03:50.800
Yeah, so that's pretty much it.

00:03:50.800 --> 00:03:55.680
Once you set up your file, you just have to run pre-commit install,

00:03:55.680 --> 00:04:00.480
which will download all the hooks that you've mentioned that you want to run,

00:04:00.480 --> 00:04:01.840
all the checkers.

00:04:01.840 --> 00:04:05.040
And it'll actually create virtual environments for those and install them in there.

00:04:05.040 --> 00:04:08.320
So the first time it's a little bit slow, but then the next time it's plenty quick.

00:04:08.320 --> 00:04:12.320
And finally, if for some reason you're like, you know what, I know it keeps complaining,

00:04:12.320 --> 00:04:16.320
but this time I just need it to commit for whatever reason,

00:04:16.320 --> 00:04:18.880
you can use down here, find it.

00:04:18.880 --> 00:04:22.880
You can specify git commit dash dash no verify.

00:04:22.880 --> 00:04:24.880
That'll just say it's going in.

00:04:24.880 --> 00:04:28.160
I don't care it's going in if you need to kind of override it.

00:04:28.160 --> 00:04:30.800
So yeah, it's pretty straightforward, really nice write up.

00:04:30.800 --> 00:04:33.920
And people can check that out if the idea appeals.

00:04:33.920 --> 00:04:39.040
- Actually, this is a great timing for this because I have used it in years past,

00:04:39.040 --> 00:04:41.760
and there's times where I've added like a whole bunch of stuff.

00:04:41.760 --> 00:04:45.360
And it kind of slows down my process.

00:04:45.360 --> 00:04:50.960
But with the recent rustification of a lot of our tools, like with rough and stuff,

00:04:50.960 --> 00:04:53.440
things are pretty zippy now.

00:04:53.440 --> 00:04:55.520
So I don't think it'll slow down things that much.

00:04:55.520 --> 00:04:58.240
- Yeah, I doubt you'd really even notice it, you know?

00:04:58.240 --> 00:05:00.640
- Yeah, depending on what kind of tools you have.

00:05:00.640 --> 00:05:02.720
- When it fails, you'll notice.

00:05:02.720 --> 00:05:05.280
- Yeah, and I do like the shout out.

00:05:05.280 --> 00:05:06.640
There's a couple of things I love about this.

00:05:06.640 --> 00:05:08.240
I like the shout out to the no verify,

00:05:08.240 --> 00:05:11.120
because there's times where you're just running off to vacation

00:05:11.120 --> 00:05:13.760
and you have to commit your stuff no matter what.

00:05:13.760 --> 00:05:19.520
Get that in there, especially if it's on a developer branch or something.

00:05:19.520 --> 00:05:21.760
- Yeah, that's a good point if it's not on the main branch,

00:05:21.760 --> 00:05:23.840
but you're like, you know what, I'm just going to put it here

00:05:23.840 --> 00:05:26.160
because I want to get it over to my laptop and I'm leaving.

00:05:26.160 --> 00:05:27.680
- Yeah, I need it saved.

00:05:27.680 --> 00:05:32.160
The other thing is running down some of the rough settings.

00:05:32.160 --> 00:05:39.040
So I love some of the configuration that she's included with how to configure rough.

00:05:39.760 --> 00:05:43.840
Because rough is awesome by default, but there's some cool configuration you can do,

00:05:43.840 --> 00:05:47.920
like setting the quote style to single and stuff like that.

00:05:47.920 --> 00:05:48.560
So neat.

00:05:48.560 --> 00:05:50.320
- Indeed. Very, very neat.

00:05:50.320 --> 00:05:52.480
Yeah, Stephanie's doing a bunch of cool stuff,

00:05:52.480 --> 00:05:55.280
so people should check out broadly what she's up to.

00:05:55.280 --> 00:05:56.720
But this article is really nice.

00:05:56.720 --> 00:05:56.960
- Yeah.

00:05:56.960 --> 00:05:57.840
- All right, over to you, Brian.

00:05:57.840 --> 00:06:01.360
- Well, I want to talk about something I talked about two years ago.

00:06:01.360 --> 00:06:07.760
So I was researching this Difftastic, and I'm like, I'm really loving this tool.

00:06:07.760 --> 00:06:11.200
I got to cover it, and I apparently covered it two years ago,

00:06:11.200 --> 00:06:15.040
but I haven't started using it until just recently.

00:06:15.040 --> 00:06:21.600
So Difftastic is a tool, and I think it's written in Rust.

00:06:21.600 --> 00:06:27.280
I'm not sure actually, but it's a super fast diff tool, and it does coloring,

00:06:27.280 --> 00:06:29.840
but there's a lot of stuff I love about it.

00:06:29.840 --> 00:06:31.440
The reasons why I'm using it a lot.

00:06:31.440 --> 00:06:33.200
The colors are great, by the way.

00:06:33.200 --> 00:06:35.680
Awesome, nice red, green, different colors.

00:06:36.560 --> 00:06:43.120
But what I really love is that it's a diff tool that's not a line-by-line,

00:06:43.120 --> 00:06:44.640
character-by-character diff.

00:06:44.640 --> 00:06:48.960
It understands your syntax, and it only changes things that really change.

00:06:48.960 --> 00:06:52.000
So if you happen to add a new line in there or something,

00:06:52.000 --> 00:06:53.600
it's not going to show you that diff.

00:06:53.600 --> 00:06:58.400
It's going to do just real changes to your code, which is super helpful.

00:06:58.400 --> 00:07:02.240
I hate it when you have to turn off.

00:07:02.240 --> 00:07:04.800
By default, it doesn't show you that.

00:07:04.800 --> 00:07:10.080
So I don't like to see if I messed up some spacing and somebody fixed that.

00:07:10.080 --> 00:07:11.120
That's not a real diff.

00:07:11.120 --> 00:07:12.080
I don't need to see that.

00:07:12.080 --> 00:07:15.840
So having syntax-based is great.

00:07:15.840 --> 00:07:20.480
What I really love is what I'm going to highlight here is there's instructions.

00:07:20.480 --> 00:07:24.960
It tells you how to do it, and I can't remember where the link is.

00:07:24.960 --> 00:07:26.960
But I'm going to show it right here.

00:07:26.960 --> 00:07:33.200
In the manual for Difftastic, it shows you how to set this up for diff.

00:07:33.200 --> 00:07:34.880
So you can-- for git diff.

00:07:34.880 --> 00:07:39.600
So if you're using it with git and you want to just try it out,

00:07:39.600 --> 00:07:43.280
it shows you how to just set your git external diff,

00:07:43.280 --> 00:07:44.480
and then you can try it out.

00:07:44.480 --> 00:07:48.640
What I really love is the real winner is doing a log.

00:07:48.640 --> 00:07:54.080
So showing what you've done on the file recently is great with the git log.

00:07:54.080 --> 00:07:59.840
But if you do that with the external diff of Difftastic, it's a fantastic experience,

00:07:59.840 --> 00:08:03.120
especially if you've got a large screen, which I do right now.

00:08:03.120 --> 00:08:07.120
And it just makes things-- working with git so much easier.

00:08:07.120 --> 00:08:10.640
So definitely, if you haven't tried Difftastic yet, try it.

00:08:10.640 --> 00:08:15.360
And try the-- so it shows you how to do it just like one-offs for git.

00:08:15.360 --> 00:08:21.040
But also, it shows you how to set up your git config so that you can use it all the time.

00:08:21.040 --> 00:08:23.120
So this is fantastic.

00:08:23.120 --> 00:08:24.320
Yeah, very excellent.

00:08:24.320 --> 00:08:25.280
Are you starting to use it?

00:08:25.280 --> 00:08:27.680
I'm using it every day now.

00:08:27.680 --> 00:08:28.800
It's just part of my workflow.

00:08:29.520 --> 00:08:30.160
So yeah.

00:08:30.160 --> 00:08:36.320
Mike Feehler out in the audience says, "Difftastic is indeed in Rust."

00:08:36.320 --> 00:08:38.720
Yeah, it's one of those-- it's super fast.

00:08:38.720 --> 00:08:42.160
I love-- I'm going to have to start learning Rust, I guess, maybe.

00:08:42.160 --> 00:08:48.000
But-- or just-- I just love other people writing Rust for me so that I can write my Python even

00:08:48.000 --> 00:08:48.400
faster.

00:08:48.400 --> 00:08:51.760
It's like-- it's kind of like when you use Jupyter Notebooks.

00:08:51.760 --> 00:08:54.640
You don't have to learn TypeScript and JavaScript and all those things.

00:08:54.640 --> 00:08:55.040
You can just--

00:08:55.040 --> 00:08:55.360
That's true.

00:08:55.360 --> 00:08:58.480
--use them and appreciate that someone else took one for the team.

00:08:58.480 --> 00:08:59.040
Yeah, yeah.

00:08:59.040 --> 00:09:01.360
Yeah, so awesome.

00:09:01.360 --> 00:09:05.200
All right, actually, speaking exactly of that kind of stuff, the next thing I wanted to

00:09:05.200 --> 00:09:08.480
give a shout out to here, the next topic, is Corto.

00:09:08.480 --> 00:09:09.600
Have you heard of Corto?

00:09:09.600 --> 00:09:11.200
I don't believe so.

00:09:11.200 --> 00:09:13.120
Yeah, so Corto is pretty cool.

00:09:13.120 --> 00:09:18.640
It lives solidly in the-- I want to publish stuff for various reasons, maybe because I

00:09:18.640 --> 00:09:24.160
want a blog or a website or I want to write an e-book or I just want to create a web page

00:09:24.160 --> 00:09:29.360
that shows my research or visualizations for my company or something like that.

00:09:29.360 --> 00:09:36.640
So basically, it's an open source scientific and technical publishing system based on Jupyter

00:09:36.640 --> 00:09:37.360
Notebooks.

00:09:37.360 --> 00:09:40.960
And a lot of people have been talking about this and recommending this lately.

00:09:40.960 --> 00:09:43.280
So I thought I'd give it a look.

00:09:43.280 --> 00:09:49.040
So the idea is you write in Jupyter Notebooks with plain text or markdown or whatever you

00:09:49.040 --> 00:09:49.680
want to use.

00:09:49.680 --> 00:09:54.240
And then you create the dynamic elements in Python, R, Julia, or Observable.

00:09:54.240 --> 00:09:56.160
Observable has always been an adjective.

00:09:56.160 --> 00:09:57.840
I didn't know it was a noun, but OK.

00:09:57.840 --> 00:10:01.600
Yeah, I may have to check that out later.

00:10:01.600 --> 00:10:05.760
But basically, most relevant point is you can write your stuff in Python.

00:10:05.760 --> 00:10:12.080
And then you can create production quality articles, dashboards, websites, blogs, and

00:10:12.080 --> 00:10:14.000
even EPUB books.

00:10:14.000 --> 00:10:18.160
So HTML, PDF, even Word, EPUB, and so on, which is pretty awesome.

00:10:18.160 --> 00:10:21.360
And then it comes out of the Posit folks.

00:10:21.360 --> 00:10:23.760
You can connect it to Posit Connect if you want.

00:10:23.760 --> 00:10:31.200
But then you can write in HandDoc markdown as well and get fancy math equation type things,

00:10:31.200 --> 00:10:34.240
you know, like integral from 0 to infinity of that to that.

00:10:34.240 --> 00:10:41.280
And it looks proper, like you would see in calculus class, not weird ASCII representations

00:10:41.280 --> 00:10:41.760
to it.

00:10:41.760 --> 00:10:44.000
So yeah, it looks pretty awesome.

00:10:44.000 --> 00:10:46.320
It has the ability to show or hide the code.

00:10:46.320 --> 00:10:50.000
You go to their website, you can see there's a little example of here's a notebook and

00:10:50.000 --> 00:10:54.640
then here's actually publication of it, which I think it's pretty cool.

00:10:54.640 --> 00:10:55.520
What do you think, Brian?

00:10:55.520 --> 00:10:56.880
I think this is excellent.

00:10:56.880 --> 00:10:58.480
I definitely want to try this out.

00:10:58.480 --> 00:11:01.280
I've been itching to write more long form.

00:11:01.280 --> 00:11:04.640
And doing something like this would be great.

00:11:04.640 --> 00:11:09.200
I think it would, especially if you use Python to sort of express what you're working on

00:11:09.200 --> 00:11:10.160
or what you're doing, right?

00:11:10.160 --> 00:11:11.920
It would be super, super cool.

00:11:11.920 --> 00:11:14.800
Yeah, and Pandoc, it's cool they're using Pandoc markdown.

00:11:14.800 --> 00:11:20.080
Because I mean, markdown is amazing, but the Pandoc's flavors of markdown, there's a bunch

00:11:20.080 --> 00:11:21.360
of cool extensions.

00:11:21.360 --> 00:11:23.040
So it's pretty neat.

00:11:23.040 --> 00:11:23.440
Yeah.

00:11:23.440 --> 00:11:30.320
Also, final thing, you apparently can embed things like Jupyter widgets, HTML widgets

00:11:30.320 --> 00:11:34.720
and others to let people sort of interact with the page as well, which is also cool.

00:11:34.720 --> 00:11:36.320
Yeah, neat.

00:11:36.320 --> 00:11:37.040
Yeah.

00:11:37.040 --> 00:11:37.280
All right.

00:11:37.280 --> 00:11:38.960
So if this is your world, check it out.

00:11:38.960 --> 00:11:41.040
Definitely.

00:11:41.600 --> 00:11:46.800
Okay, next, I want to talk about Constable.

00:11:46.800 --> 00:11:49.920
So this is a simple debugging tool.

00:11:49.920 --> 00:11:51.760
Looks like it's fairly new.

00:11:51.760 --> 00:11:52.320
Look at that.

00:11:52.320 --> 00:11:53.760
So--

00:11:53.760 --> 00:11:54.080
Wow.

00:11:54.080 --> 00:11:56.080
Initial commit four days ago.

00:11:56.080 --> 00:12:04.640
If you find yourself aimlessly adding print statements while debugging your code, this

00:12:04.640 --> 00:12:05.520
might be for you.

00:12:05.520 --> 00:12:07.760
So this is actually pretty neat.

00:12:07.760 --> 00:12:08.720
I like it.

00:12:08.720 --> 00:12:15.280
So you throw like in the example, you throw a decorator at constable.trace, and then you

00:12:15.280 --> 00:12:17.360
can throw in which variables you want to trace.

00:12:17.360 --> 00:12:23.440
And it just like, it shows you some cool output of like what happens while you're running.

00:12:23.440 --> 00:12:30.160
And you can walk through and it does the changes to your-- which line changed your variable

00:12:30.160 --> 00:12:33.040
and what did it change it to and all that sort of stuff.

00:12:33.040 --> 00:12:34.400
And it's kind of--

00:12:34.400 --> 00:12:39.760
each line that changes, Brian, it prints out like as the variables change at any step,

00:12:39.760 --> 00:12:42.080
it'll say here's what the new values are, which is cool.

00:12:42.080 --> 00:12:43.920
But it kind of describes it, which is awesome.

00:12:43.920 --> 00:12:48.160
It'll say like this equation ran, so now it's a new-- this statement ran, so here's the

00:12:48.160 --> 00:12:48.640
value.

00:12:48.640 --> 00:12:50.400
This statement ran, so now here's the value.

00:12:50.400 --> 00:12:52.000
It's really good.

00:12:52.000 --> 00:12:56.720
Yeah, it's fairly verbose, but-- and with a lot of spacing in here.

00:12:56.720 --> 00:13:00.480
But I think that's good, because you're probably going to like throw it on just a couple of

00:13:00.480 --> 00:13:03.680
functions to when you're debugging at the time and then pull it out later.

00:13:03.680 --> 00:13:04.320
You said production.

00:13:04.320 --> 00:13:06.240
Don't put it in production.

00:13:06.240 --> 00:13:08.160
I was wondering this too.

00:13:08.160 --> 00:13:11.760
So I forgot the name of the other tool that was kind of like this.

00:13:11.760 --> 00:13:17.680
And Mike Felder, or Fiedler, says, I wonder how Constable compares to ice cream.

00:13:17.680 --> 00:13:24.560
And I think I would take this as Mike is volunteering to do a write-up of comparing Constable and

00:13:24.560 --> 00:13:25.280
ice cream.

00:13:25.280 --> 00:13:25.600
Definitely.

00:13:25.600 --> 00:13:26.240
Thanks, Mike.

00:13:26.240 --> 00:13:27.520
Sounds-- thanks, Mike.

00:13:27.520 --> 00:13:29.520
Yeah, let us know when that's written up and we'll take a look.

00:13:30.880 --> 00:13:38.640
No, I think probably a lot of this is just probably feel, like how does it feel to you

00:13:38.640 --> 00:13:40.080
if it fits your workflow or not.

00:13:40.080 --> 00:13:43.200
So this looks fun.

00:13:43.200 --> 00:13:44.160
Yeah, this looks very fun.

00:13:44.160 --> 00:13:47.120
And both are new to me, so it's worth checking out.

00:13:47.120 --> 00:13:47.360
OK.

00:13:47.360 --> 00:13:50.960
And if Mike doesn't want to do it, maybe I'll take a look at comparing Constable.

00:13:50.960 --> 00:13:51.280
Excellent.

00:13:51.280 --> 00:13:52.400
You could write it in Cordo.

00:13:52.400 --> 00:13:52.900
Yeah.

00:13:52.900 --> 00:13:54.740
Yeah.

00:13:54.740 --> 00:14:00.240
So apparently Mike didn't-- was surprised at-- no?

00:14:00.720 --> 00:14:02.000
You know, the volunteering.

00:14:02.000 --> 00:14:08.400
So anyway, so yeah, Constable for debugging print statements.

00:14:08.400 --> 00:14:10.000
Or it's easier than print statements.

00:14:10.000 --> 00:14:11.840
Yeah, nice.

00:14:11.840 --> 00:14:12.320
Cool.

00:14:12.320 --> 00:14:14.480
I'm going to work it into my world, I think.

00:14:14.480 --> 00:14:15.040
It looks good.

00:14:15.040 --> 00:14:17.040
What do you got for us next?

00:14:17.040 --> 00:14:19.680
Extra, extra stuff.

00:14:19.680 --> 00:14:22.080
It's all-- I have only one extra thing.

00:14:22.080 --> 00:14:23.760
Oh, we're done with our topics already?

00:14:23.760 --> 00:14:24.320
I believe so.

00:14:24.320 --> 00:14:24.800
Yeah, we are.

00:14:24.800 --> 00:14:26.640
Time flies when you're having fun, you know, and you're--

00:14:26.640 --> 00:14:27.120
Yeah.

00:14:27.120 --> 00:14:27.680
Time flies.

00:14:27.680 --> 00:14:28.400
All right.

00:14:28.400 --> 00:14:30.960
So at least I've done-- I've got nothing else.

00:14:30.960 --> 00:14:31.360
How's that?

00:14:31.360 --> 00:14:35.440
So two pieces of news here.

00:14:35.440 --> 00:14:37.920
They're all-- they're both the same piece of news.

00:14:37.920 --> 00:14:45.120
So Python 3.12.3 final is out, which comes with 1, 2, 3, 4 security updates.

00:14:45.120 --> 00:14:53.040
They don't sound like any sort of big deal, so I wouldn't like run and patch it now or

00:14:53.040 --> 00:14:57.120
anything, but there are some things listed under security, so that's always worth thinking

00:14:57.120 --> 00:15:00.400
about, but there's also quite a few changes under built-in, under library.

00:15:00.400 --> 00:15:06.560
I mean, just gauging by the scrolling, I would say there's probably 50 or 60 changes.

00:15:06.560 --> 00:15:09.120
That's a big change for a .3, .2 to .3.

00:15:09.120 --> 00:15:09.920
Yeah, yeah.

00:15:09.920 --> 00:15:11.680
And why not?

00:15:11.680 --> 00:15:13.840
Why not upgrade?

00:15:13.840 --> 00:15:15.280
So absolutely.

00:15:15.280 --> 00:15:20.720
And I would-- just the other piece of news is that Python bytes and all the other things

00:15:20.720 --> 00:15:28.320
are already running on 3.12.3, just bump a number, kick off the Docker update, and boom.

00:15:28.320 --> 00:15:28.320
Sweet.

00:15:28.320 --> 00:15:29.280
We're updated.

00:15:29.280 --> 00:15:31.600
Yeah, very nice to have that set up in place.

00:15:31.600 --> 00:15:32.880
Extras for you?

00:15:32.880 --> 00:15:38.960
Just one that I was excited to cover, but then like-- okay, so I'll just talk about it.

00:15:38.960 --> 00:15:41.280
It's a couple-- oh, you appear to be offline.

00:15:41.280 --> 00:15:47.600
It's a couple weeks old, but pointers are going to be added to the standard library

00:15:47.600 --> 00:15:48.400
with pep4.

00:15:48.400 --> 00:15:49.200
What?

00:15:49.200 --> 00:15:49.440
Yeah.

00:15:49.440 --> 00:15:49.680
What?

00:15:50.640 --> 00:15:54.000
Apparently, Guida says, why the hell not?

00:15:54.000 --> 00:15:55.200
Why not add pointers?

00:15:55.200 --> 00:16:00.960
This will also introduce pointer literals, size of operators, and memory errors.

00:16:00.960 --> 00:16:08.240
Actually, I was perusing Reddit in Python and noticed this, and I'm like, what's going on?

00:16:08.240 --> 00:16:09.440
And then I noticed the date.

00:16:09.440 --> 00:16:10.560
It was 15 days ago.

00:16:10.560 --> 00:16:13.200
That would have been April Fool's, April 1st.

00:16:13.200 --> 00:16:13.840
So--

00:16:13.840 --> 00:16:14.480
Rough.

00:16:14.480 --> 00:16:15.120
I actually got--

00:16:15.120 --> 00:16:15.680
Rough, rough.

00:16:15.680 --> 00:16:18.160
--snagged on this.

00:16:18.160 --> 00:16:19.760
This is sort of funny, though.

00:16:19.760 --> 00:16:21.280
This is funny.

00:16:21.280 --> 00:16:26.800
It even has the C syntax, like ampersand to grab the pointer of a variable, a star to

00:16:26.800 --> 00:16:27.760
dereference the pointer.

00:16:27.760 --> 00:16:28.880
It's all sorts of stuff.

00:16:28.880 --> 00:16:30.160
Yeah, malloc, memory malloc.

00:16:30.160 --> 00:16:30.880
Malloc, why not?

00:16:30.880 --> 00:16:31.840
Why not?

00:16:31.840 --> 00:16:33.040
New size of operator.

00:16:33.040 --> 00:16:36.720
The irony is everything in Python has a pointer.

00:16:36.720 --> 00:16:39.040
You just can't directly address them, right?

00:16:39.040 --> 00:16:41.760
You can't work with them that way.

00:16:41.760 --> 00:16:42.320
Oh, yeah.

00:16:42.320 --> 00:16:44.880
No pass by-- there's no pass reference.

00:16:45.360 --> 00:16:51.600
The ampersand operator in C, where you could change the value of the pointer within somewhere

00:16:51.600 --> 00:16:52.560
else and stuff.

00:16:52.560 --> 00:16:53.760
I love this example.

00:16:53.760 --> 00:16:55.360
Spam equals star of none.

00:16:55.360 --> 00:16:58.880
That will segfault core dump.

00:16:58.880 --> 00:16:59.600
Good luck, kiddo.

00:16:59.600 --> 00:17:03.440
This is good.

00:17:03.440 --> 00:17:04.240
I enjoy it.

00:17:04.240 --> 00:17:05.760
All right.

00:17:05.760 --> 00:17:06.880
People comments are like, nice one.

00:17:06.880 --> 00:17:07.760
I believed it.

00:17:07.760 --> 00:17:08.560
I believed it.

00:17:08.560 --> 00:17:10.560
I believed it for a second, except for--

00:17:10.560 --> 00:17:12.480
Anyway.

00:17:12.480 --> 00:17:14.720
But there is an infamous pointers.py.

00:17:14.720 --> 00:17:16.400
So is that a real thing?

00:17:16.400 --> 00:17:17.360
You can-- no.

00:17:17.360 --> 00:17:19.760
Bringing the hell of pointers to Python.

00:17:19.760 --> 00:17:22.080
From pointers import underscore.

00:17:22.080 --> 00:17:25.120
That's funny.

00:17:25.120 --> 00:17:26.260
Anyway.

00:17:26.260 --> 00:17:27.760
All right.

00:17:27.760 --> 00:17:28.260
So--

00:17:28.260 --> 00:17:30.960
This is involved, right?

00:17:30.960 --> 00:17:31.280
Involved.

00:17:31.280 --> 00:17:32.080
This is in depth.

00:17:32.080 --> 00:17:33.280
That wasn't just a Reddit post.

00:17:33.280 --> 00:17:35.440
It's got a whole GitHub repo.

00:17:35.440 --> 00:17:36.080
Yeah.

00:17:36.080 --> 00:17:36.640
Example.

00:17:36.640 --> 00:17:37.840
There's a ton of code here.

00:17:37.840 --> 00:17:38.640
What are they doing?

00:17:38.640 --> 00:17:42.560
This is awesome.

00:17:42.560 --> 00:17:43.520
Why does this exist?

00:17:44.320 --> 00:17:44.820
Anyway.

00:17:44.820 --> 00:17:47.760
Lays out in the audience says, I would have believed it too.

00:17:47.760 --> 00:17:50.480
One of the features is segfaults.

00:17:50.480 --> 00:17:53.280
Always a good time.

00:17:53.280 --> 00:17:54.240
Always a good time.

00:17:54.240 --> 00:17:54.740
Yeah.

00:17:54.740 --> 00:17:55.840
All right.

00:17:55.840 --> 00:17:57.520
So that was funny.

00:17:57.520 --> 00:17:59.440
But do you have anything else funny for us?

00:17:59.440 --> 00:18:00.320
I do.

00:18:00.320 --> 00:18:02.000
And it's very much in the same vein.

00:18:02.000 --> 00:18:04.080
Although I don't think it's the same date.

00:18:04.080 --> 00:18:05.200
I think it's just more random.

00:18:05.200 --> 00:18:06.800
So check this out.

00:18:06.800 --> 00:18:10.880
Henik from the Python community, who we speak about often, is here.

00:18:11.600 --> 00:18:14.560
Holding this award that is a Hugo.

00:18:14.560 --> 00:18:18.800
Hugo, not the static site generator, but the awards for--

00:18:18.800 --> 00:18:21.280
So like a sci-fi award or something?

00:18:21.280 --> 00:18:21.780
Yeah.

00:18:21.780 --> 00:18:22.960
For best sci-fi.

00:18:22.960 --> 00:18:24.160
Best science fiction.

00:18:24.160 --> 00:18:25.520
So here's the thing.

00:18:25.520 --> 00:18:29.920
Very happy to accept a Hugo award for my science fiction short story.

00:18:29.920 --> 00:18:32.080
The day Python packaging made everyone happy.

00:18:32.080 --> 00:18:37.120
Good one Henik.

00:18:37.120 --> 00:18:40.000
That is excellent.

00:18:40.000 --> 00:18:41.300
Nice.

00:18:41.780 --> 00:18:42.280
Someday.

00:18:42.280 --> 00:18:46.340
And science fiction is a good angle here, right?

00:18:46.340 --> 00:18:49.620
Because science fiction is the sort of stuff that's not real now.

00:18:49.620 --> 00:18:54.260
But you can imagine maybe, but probably not at some point in the future.

00:18:54.260 --> 00:18:56.100
Like the year 3000 will all be fine.

00:18:56.100 --> 00:18:58.440
Yeah.

00:18:58.440 --> 00:19:01.780
I don't believe anything until I get my hover skateboard.

00:19:01.780 --> 00:19:02.280
I know.

00:19:02.280 --> 00:19:07.700
All it's going to be about is people crashing and falling over backwards on YouTube

00:19:07.700 --> 00:19:09.300
on the hover skateboard once we all get them.

00:19:09.300 --> 00:19:10.520
Yeah.

00:19:11.140 --> 00:19:15.300
So like the ones with wheels now, but now when you hover, it'll be even more tippy.

00:19:15.300 --> 00:19:18.340
Still trying to figure out how you turn on something that hovers.

00:19:18.340 --> 00:19:19.480
I know.

00:19:19.480 --> 00:19:20.520
Anyway.

00:19:20.520 --> 00:19:21.940
All right.

00:19:21.940 --> 00:19:22.740
Well, thanks.

00:19:22.740 --> 00:19:23.540
This was fun.

00:19:23.540 --> 00:19:25.940
Pretty quick episode, but--

00:19:25.940 --> 00:19:32.340
Oh, Mike says hover skateboard uses pointers and seg faults.

00:19:32.340 --> 00:19:34.520
Yeah.

00:19:34.520 --> 00:19:36.900
So and then we can get like--

00:19:36.900 --> 00:19:41.300
we can get Devin and our AI to create seg faults for us.

00:19:41.300 --> 00:19:42.580
Yeah, that'd be awesome.

00:19:42.580 --> 00:19:43.380
Not my fault.

00:19:43.380 --> 00:19:44.500
I didn't take down production.

00:19:44.500 --> 00:19:45.540
Devin did.

00:19:45.540 --> 00:19:47.700
I wonder if the segue is written in C.

00:19:47.700 --> 00:19:49.380
I wonder if segways have seg faults.

00:19:49.380 --> 00:19:50.260
I bet they do.

00:19:50.260 --> 00:19:50.760
Yeah.

00:19:50.760 --> 00:19:52.340
It would be fitting.

00:19:52.340 --> 00:19:54.100
All right.

00:19:54.100 --> 00:19:56.420
Well, thanks, everybody, for showing up.

00:19:56.420 --> 00:19:57.460
If you want to--

00:19:57.460 --> 00:20:03.060
and if you're listening and you want to join the fun of talking with us while we're doing

00:20:03.060 --> 00:20:08.740
a podcast, head over to pythonbytes.fm, and you can see what the schedule is for the next

00:20:08.740 --> 00:20:09.860
live episode.

00:20:09.860 --> 00:20:10.360
Indeed.

00:20:10.360 --> 00:20:11.540
Thanks, Brian.

00:20:11.540 --> 00:20:12.100
Thank you.

