00:00:00 Hello, and welcome to python bytes where we delivered by thought news and headlines directly to your earbuds. This is Episode 317, recorded January 3 2023. And I am Brian Aachen. Hello, I'm Michael Kennedy. Welcome to 2023. Exciting.

00:00:14 It's very exciting. It's a lot like 2022. But I think maybe a little more optimism, we'll see.

00:00:20 Yeah, but I've had one extra shower here and 20 since 2022. Do you remember? 2022 just feels like a few days ago?

00:00:27 It honestly it really flew by? Yeah. I mean, we stayed inside for like two years. And then like, hey, look, we get to go outside. Oh, time flies when you're not just outside.

00:00:36 I think we actually rode a bicycle the other day. Nice. And then Oregon said we're going to rain for two weeks.

00:00:41 So of course, of course it did.

00:00:44 Well, let's kick it off. What do you got for us first?

00:00:46 All right. Let's talk about the Stack Overflow 2022 developer survey. Now, this is one of the better surveys that gives you a pulse on the developer community. It's, you know, we do the PSF survey every year. And that one, I think, is really well done. This one's interesting, because it's not just Python, obviously, it's all of Stack Overflow people. And it's really, really long. Notice the scroll bar. So I'm going to try to go through these and just hit on some of the high points for us. Alright, so they did that as well. First, at the top here, they kind of summarized some little things you can call it and then jump to other sections saying learning to code online increased by 10%. Year over year, however, respondents older than 45 years are most likely to have learned from books, whereas the younger ones are more likely to use some kind of online course, or YouTube video or something along those lines. Does that surprise you? No. Okay, I mean, so last year, they said we saw get rise as a fundamental tool of software development. So like, if you're a software developer, you basically just need to know get surprisingly, this year, they said, That's Docker this year, increasing from 55% usage to 69%. Usage. I kind of felt like the hype, and the heyday of Docker was actually a couple of years ago, and I hear a little bit less, maybe just less hype, but it's more like, yeah, we're just using it. But I don't know that that was surprising. And interesting to me,

00:02:21 I'm using it more in places where I didn't used to. So like what build chains for just to keep them consistent. We're just does isn't even a cloud thing. It's just having being able to have a consistent build system, no matter what machine you're on. Yeah, that makes sense. CI systems are utilizing Docker more

00:02:43 sure. I've heard of even people using Docker to manage and Floy Is that Is that how you would phrase it, little apps to raspberry pies for like home automation and stuff? I'm sure there would be more of that if you could actually get a Raspberry Pi. But this is more of a theoretical, those who already have the Raspberry Pi. But the most one of my favorite sections of this is the most loved most dreaded and Most Wanted. Yeah. Because it really tells you, you know, how do people feel about how things are now? And how do they feel about where they're going? Right? What What would they do if they were unencumbered by, you know, their boss saying, Nope, we're using this particular database, or Nope, it's all Angular, and you're on the team that does Angular, so I don't care what you want. You're doing Angular, you know. And so rust is on its seventh year as the most loved language.

00:03:35 Seven years isn't even seven years old.

00:03:39 My thought is well, okay, 87% of developers say they want to continue using it. Wow. I mean, yeah, anyway, that's pretty interesting. But it also Python and rust are basically exactly tied as the most wanted programming language. That's cool. I can see that. Yeah, absolutely. Phoenix, Phoenix is some some web framework I've never heard of that is apparently the most popular. Angular JS, it continues into its third year of being the most dreaded. Alright, what else?

00:04:12 Oh, just react. Yeah, is most wanted, but who knows? Yeah,

00:04:17 exactly. So some of these questions, and some of these phrasings and analyses are super, super good. And others are really bad. So I'll try to highlight some of these. So let me jump down here. Well, I don't really care about the education stuff. I mean, it tells you education profile, it tells you things like yeah, there's an insane number of guys versus women.

00:04:40 No, that's fine. I just thought it was funny that you said I don't care about education.

00:04:46 And teacher, you know, leave the kids alone alright. So no, it's like it's it's fine. But it's you know, people can check it out if they hear about it, right. Like there's there's stuff about the demographics like age and gender that is pretty interesting. I wish Some of these numbers were better like, yeah. Does that make sense? Yeah, it totally is. Right. But, you know, that's also not news. So, yeah, some of the most popular technologies here. Now, I know, Brian, I might just be getting older and grumpy. But when I look at this, there's like, it's almost all these responses are broken into two segments, professional developers, and learning to code people. And the default is to take all those together. And I guess that's the biggest picture, but I don't know, I just when I overlook these, I'm just like, professional developers. Tell me about this. Like, yeah, you know, if some, if you're on your third week of a coding tutorial on that tutorial says use this, like, how, how much? Does that really speak to the state of the community? I don't think. So. I'm checking. Like, when I think about these, I'm just going to check professional developer and if you want the same numbers into so as well, so where are we? We are on programming languages, scripting, and markup, JavaScript is definitely the most popular here. This is one of those areas where I don't I think you need to phrase it a little bit different. Let's see what the question exactly is. Which programming languages? Have you done extensive development work in over the year? Over the last year? Okay. I don't know how quite how to solve this problem. But there's a ton of Python people who did JavaScript work. Yeah, there is a ton of C++ people who did SQL, right. There's also Python people who did SQL. So SQL ranks above Python, but there's very few people whose job it is as a developer to write sequel and not use something else. Right. So that's,

00:06:37 that's weird to have sequel even in there. Yeah, I

00:06:40 know. Well, HTML and CSS, right is like a little bit weirder, as well. And so I feel like it should say like, what is your primary programming language? Or something like, you know, something like that, right. I feel like it's, it's

00:06:54 it's kind of like, favorite movie, like, what's your favorite movie? But not Princess Bride? Other than that, what's your favorite?

00:06:59 Yes, exactly. Exactly. So like, there's people who do no JS and JavaScript. And that is what I think this top bar where JavaScript is, should represent. Yeah, it's that plus everyone else, right, aggregated? So I don't know, it's, these are a little bit weird, but I'll just

00:07:14 go. So like, unless you're primarily just a front end developer, what back end languages

00:07:20 are right, right. Or maybe you're using node on the back end. But then other than that, so JavaScript, number one, HTML top programming language, okay. Sequel third most and then Python and then TypeScript. So, you know, like a bunch of interesting ones. And then you've got your, your, your VM, garbage collected JavaScript, Java, and C char back there, then starts to fall fall off pretty quick after that. Yeah. And at the very bottom of see the very bottom one is crystal. Okay. And APL, oh, my gosh, APL APL is is something all right. Another one that's worth talking about is databases. So we've got Postgres, MySQL, SQLite, SQL Server MongoDB, as the top five. So it's pretty clear that Postgres has the momentum, like MySQL was higher, and now Postgres is passing it. But you know, that's kind of going up here. So this is which environments have you done extensive work in, we'll also see that in like the loved versus dreaded section there. And by the way, on the audience, Marco says, I've already aged myself with that Pink Floyd reference, indeed. Alright, so cloud platforms, you know, AWS, or surprise you that AWS has over half of the entire market

00:08:37 now. Now, but only it's only a smidge over half, five. So

00:08:41 yeah, exactly. Web technologies. Huge. Another one. No, not this one's kind of kind of okay. But like, for example, they've got no JS. But they don't have Python, right. So I don't know it's a little bit funky. Like they have no done Express and express runs on Node, whereas they have flask and Django, but they don't have the thing that Django and flask run on. I just added anyway, it's, it's a little bit of a challenging one, but node and react are quite high up there. Look at this art artifact this living, living fossil right here. Ryan, what's number three?

00:09:19 jQuery,

00:09:19 jQuery? You know, it? Dollar document. Ready? Let's go. All right.

00:09:25 I learned jQuery long time ago. Yeah, it's

00:09:27 still these a little bit of jQuery. If there's some site that's already using it, I'm like, Yeah, whatever. It's gonna. I'm just gonna put one handler in here and not worry about it. That's stupid. Yeah, fast API is on the list. Django and flask are 14.6% both fast API's 6%. And going up, fast API's just actually had a Ruby on Rails, which is pretty interesting.

00:09:48 Wait, so Phoenix is down at 2% 2.13%. But I thought it was like it's

00:09:54 the most loved. Okay, the Most Wanted. I'm not I looked at it. I'm not sure I agree with that. but it's it's a web framework built on the elixir language. So we'll see. So yeah, there's another one here that's worth pointing out. I'm not gonna go over too many more other frameworks and libraries. This one is pretty, pretty weird in terms of like the partition, this is what I had in mind, right? Like, there's something really weird about this.

00:10:23 So dotnet and NumPy in the same bucket?

00:10:26 Exactly. So dotnet is the equivalent of Python. It's the equivalent of C Plus Plus, it's the equivalent of Ruby, right? It's like a huge and abroad. And it's the thing that all the other stuff in that ecosystem runs on, right? ASP, dotnet, or whatever. And so they say what other languages you work with, do or other libraries? Do you work with? dotnet? Or do you work with NumPy? Or do you work with Panda? There's no Python here, right? And there's no go? And there's no, no, I don't know. Like, it just it's, I feel like this just fully like out of place here. So if you just go past that the top two are NumPy and pandas, which by quite a good margin, and then spring for Java, React Native for mobile with JavaScript flutter. And but then back to a bunch of Python library like concern. pytorch. Yeah. So Python actually ranks pretty high on the other frameworks and libraries you might be using. Let's just let's jump to the love to dreaded wanted section, and then it's probably enough people can check out the rest. All right, so they've got this sort of, you know, like, what is driving the market greed versus fear type of thing. And so they put each technology up and it's got to how much love versus how much hate does this technology get in one single bar, which is the graphics here are pretty nice. So rust 86% Love. So people use rust, really like rust? And they don't strongly dislike, it's probably a self selecting group, right? If you made if you took I don't know JavaScript people and told them they had to do rust, they might not like it. But rust people seem to really like rust. Elixir. I've never done anything with elixir, but it's it's also really high closure, TypeScript, and Python. Is there about two thirds a loved 1/3 dreaded, I suppose or not loved? And you can see it goes down from there.

00:12:18 Yeah, I kind of want to talk to those 32% of the people. So what is it that you don't like?

00:12:23 Well, I agree. I feel like there's a lot of people who end up to for example, if you look at just the third that says they don't like it, that's 11 times as many people using elixir, and that's two times all the people using rust. So I think it's a little bit, you know, a scale thing, right? Like, yeah, there's a bunch of people who were working on one technology, and then they were told you're gonna do Python, and some of them wanted that change. And some of them probably like, but I like C++ or I like whatever I'm doing. And you know, they're unhappy to be in that situation. So I imagine there's some of that going on here. Because there's less people like being moved into elixir projects. And this they really want to because pretty small group. Anyway, there's that. And then if you switch to the wanted, though, Python and rest high for number one, and most wanted, along with TypeScript is showing very notable there. Yeah. Nice. Yeah. Last one. We'll say databases, I suppose. Postgres most love the least, dreaded Redis. Again, one of the things like does this really belong on this list? Redis is cool. It's mostly for caching and message queues, not really, as a standalone independent database. So can it really be the most one a database? You technically I know, can make it work that way. But it's not really built for it. So I don't know. Anyway, Redis is number two, whether it belongs or not. And then MongoDB, and SQLite, and so on, in terms of wanted Postgres and Mongo? No, not too much of a change. All right. I think that's pretty much it. I'll give just a quick shout out some graphics that are down here that people can play with, if you really want to go explore, Brian, check this out, like, which one is this? This database? one's probably fair. So there's this giant, it's what section is this? It is work with versus what to work with. Okay, so it has this video. And as you move around the wheel, it'll show you, for example, 5000, people who worked with Postgres want to work with SQLite 8000 people work with MongoDB want to stay with it. Whereas 7000 people work with MySQL, want to move to MongoDB. And similarly, there's like, it shows you all these interesting trends and flows from this technology to that technology. Like if you go up here to the language one, you go to pros, and you click on C sharp, it's pretty interesting because like the C sharp people, they want to go to TypeScript or Python or JavaScript or HTML, but they don't want to go to Java. Like there's no arc over to Java, right? Because these are basically the same technology with slightly different trade offs. So if you wanted to be in Java, you would just be in Java, I feel like you can sort of check out these these flows. and stuff. So anyway, I think that's more than enough on this survey, but people should go check it out. There's a lot of data here and a lot of a lot of

00:15:07 things to learn. So does that say hype script? I script? It doesn't fit

00:15:11 on the screen. That's all. Hype script. Yeah, there's just y p e script type script with. It's just a scaling.

00:15:19 Nice. Okay, so,

00:15:22 before we move on real quick, John out audience says it's interesting that MySQL and Maria DB are perceived so differently. Yeah, that is true.

00:15:29 Yeah, I don't know much. I think that MySQL, like, has a problem that people used it a long time ago. And maybe it's different now. But I mean, that's what I'm basing my bait. My experience with MySQL is like all over 10 years ago. So

00:15:43 yeah. What do you got for us next? Well,

00:15:47 I wanted to talk about Pepe or Pete, I don't know it's a pee pee. Why that tech. So I found out about this, who died from from the person that wrote it. Petru Rares. So it's, it's we've talked about something similar, what we've talked about before is, is pi pi download stats, or pi pi stats.org. And so I was like, Well, what's different? So Pepe does download stats for, for packages. So what I'm showing we're showing here is the the stats for PI test. And what the pi pi stats does is it shows you a breakdown of like you've got the overall packages, but then you can also look at downloads per python two versus three, and then major and minor versions of Python. And so that's kind of interesting. But but but I actually now afterwards, like so much, far past the two, three vs three split, like I'm not even supporting two anymore. So what I like is Pepe doesn't do that. So Pepe is the same stats are same for PI test, what it's looking at is it grabs like the top handful. So let's do the default, I have it all customized right now. So let's drop them drop those off. By default, it shows us the last few versions of PI test plus all of the all of the downloads for the last major one. So all the 7x downloads. And so the the numbers are a little different, because we're not showing everything. So right off the bat, I kind of like that I'm just caring about the last few versions, it's kind of nice. And it also has a daily, weekly, monthly chart so that you can kind of see trends going up, which is nice. The I didn't realize at first is that you can you can select different debt, different statistics. So if I wanted to see everything on all versions, I can just go ahead and type a star there. I think that works. Yeah, yeah, that does, does all of the downloads. And then also when I just dropped that I don't know if you noticed, but it shows all the all the different download stats already. So you can kind of get a glimpse of what you're going to find right off the bat. Now going down through the chart, we've got both a chart and a table for when they when they grab the data. And this this split up of I'm not looking at Python version, I'm looking at version for the package that I care about, or like, you know, possibly my package. So I did this recently for PI test check. And I was thinking about it for PI test of like, which version should I support? And clearly, like most, like tons of people have switched up to most people switch to 7x already. So yeah, I think it's perfectly fair game to not support 6x pi test anymore, so why not? Anyway, so just a different different take on Download stats, plus, it includes it some cool badges that if you want to grab your, like add this to your to your repo to say how many downloads per week or per month. Kind of neat. So,

00:19:01 yeah, that's really cool. If you, you know, if you're open if you're maintaining some open source package, and like say, and it depends on something like this, like pie does it you just quickly look at that and and make a call like, well, how, how important? Is it for me to support this old version? Or how ready Am I to move to the new thing adopt this feature that won't allow older versions of Python or whatever it is you're looking at? Right? Like, should we add types? Well, that might not work on like, where's that three, three? And before?

00:19:33 Yeah, well, like on PI test check. I've got a feature that I'm going to deprecate. And it's only been in since like the last version. I just didn't think through the API enough, I think. But so I wanted to take a look how many people are using the most recent version and actually so most of the people are quite a few people are using the most recent version, but it isn't most it's a if I do like a total of every every version instead Probably not most people using the most recent one, but yeah, no, no. And of those, I have no idea what if they're using the feature or not? Anyway, interesting. Take a look on it, and I appreciate it. And it's open source project as well. And some of these graphs have been updated by a contributor, so it's kinda kinda nice to have it alive and well on open source.

00:20:21 So happy happy dot tech. Yeah. Nice. Good, fine delegate. All right. Off to our sponsor for the week.

00:20:28 Yes. Thank you, Microsoft. for sponsoring this episode. This episode is brought to you by Microsoft for startups founders hub starting businesses hard to but by some estimates, over 90% of startups will go out of business in the first year. Ouch. With this in mind, Microsoft for startups set out to understand what startups need to be successful and create a digital platform to help overcome those challenges. And startups founders hub was born Microsoft for startups founders hub provides all founders at any stage with free resources to help solve startup challenges. The platform provides technology benefits, access to expert guidance and skilling resources, mentorship and network connections and much more. Unlike others in the industry, Microsoft for startups, founders hub does not require startups to be investor backed or third party validated to participate. It is truly open to all so what do you get? You can speed up development with free access to GitHub and the Microsoft Cloud with the ability to unlock credits over time to help with your startup. And to help innovate founders hub is partnering with innovative companies like open AI, a global leader in AI research and development to provide exclusive benefits and discounts through founders hub becoming a founder is no longer about who you know, you'll have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines. across areas like idea validation, fundraising, management, and coaching, sales and marketing. As well as specific technical stress points, you will be able to book a one on one meeting with the mentors, many of whom are former moundridge former founders themselves. Make your ideas a reality today with the critical support you'll get from Microsoft for startups founders hub to join the program, visit Python bytes.fm/founders hub 2022. Or click the link in your show notes.

00:22:21 Dede, thank you, Microsoft for startups. Let's move over here. So this next one comes to us from several folks recommended. And to be honest, I'm not sure if I would cover it if there wasn't a bunch of people said, Hey, you should cover it. This is really interesting. So I'll sort of take their lead and say this does look pretty interesting. So Jeff Hutchins and Abdulazeez, as was seen, sent this in thank you both for sitting and this is the code on Python compiler. Have you heard about this, Brian,

00:22:51 just from people submitting it. So yeah,

00:22:55 and people will talk about Python performance all the time. Sometimes I would say most of the time, it doesn't really matter to you most of the time, you're spending way more time waiting on a network waiting on an API call waiting on a database. But sometimes it really does matter. And you need your code to go faster, right. So traditional options have included things like number, or cite on or even py py py py for the JIT compiled version of Python. So here's one more thing to put into that category of options called codon from Excellent. And it's a high performance, zero overhead extensible Python compiler using LLVM. And LLVM is a compiler that gets used all the time, of course, for a bunch of different things. And they claim that it is on the order of 10 to 100 times or more faster than regular Python for single core performance. And because it really compiles to some native code, the SE also, by the way, sometimes better than C++ in terms of performance, but it also because it compiles to some native representation, it doesn't involve the Gil. So you also get better scaling. And it comes out of this, I think genetics project called sec, bioinformatics, rather, which is this a language for bioinformatics? And I think what they've decided is like, you know, let's just go and just use straight Python, right. And if you go to exa, loop.io, they've got a couple of sort of selling points here. Performance a C is either Python, it adopts Python syntax, and is fully interoperable with Python. And they've got this little blow graphic type thing shows your Python code. And if you look, it's not even type annotated, which kind of surprised me, Brian, I figured they would at least required you add Python type ends. But no, it says you take Python syntax and semantics, and you feed it in it builds up an abstract syntax tree. It does some kind of type inference to figure out what The types are like ants comes up with an intermediate representation and then applies a bunch of JIT style optimizations and domain specific optimizations and outcomes. Pretty interesting native code, as I said, but also what does it show us it doesn't have a better picture, because it's cut off your outcomes, native code, but also WebAssembly. And GPU. Targeted code means you want to write some code, say this Python code does matrix stuff, I want it to run on my Nvidia GPU, you know, dash dash GPU or whatever the thing you do to make it come out with that is, that's pretty, pretty wild, or put it on the web with web assembly.

00:25:36 That's, it sounds great.

00:25:38 It does sound great. So they've got some examples. It says we're going to have a list of fruits, just three strings, banana, apple, and lime and some prices. In a dictionary. Banana has a price, Apple has a price. And it says we're going to write standard for fruit and fruits, F string, print out the price of the fruit. And then it's going to put a bunch of stuff in the cart by doing lists multiplication and addition, like you would expect, call the sum with a comprehension and print it out. And then boom, no problem. Compile that to native code if you want. Okay, this is if you know, Python, there's nothing to learn. So a bunch of good

00:26:14 question is Which Python says Python syntax, but which Python syntax? Is it 310 3937?

00:26:22 It's not clear other than 3.6 or above because the F strings. Okay, only giveaway I see here.

00:26:30 And possibly lots of people are fine with not exactly knowing which version of the syntax

00:26:36 Yeah, didn't say, I mean, maybe if you go into the docs, it'll exactly say right, but none of them little landing page was initially dissolved to solve computing challenges in genomics, which is so focused on also, it's got a bunch of stuff focused on finance, and GPUs for CUDA programming, as well as web assembly, which is pretty dope. Also, if you scroll down a little bit, there's a little video tells you go there's a video, I'll tell the stop button where they show it running as a colonel in Jupyter Notebooks, doing standard standard Python stuff with like, kind of maths intensive things and then pulling in matplotlib and showing the various things you get with matplotlib. So yeah, it looks pretty good. So what do you think?

00:27:23 I think even if I'd like to know what version of Python it's compatible with bone that it looks fun, and it looks

00:27:30 really good. It's on GitHub. And so it is technically at least source open. What is the license here? Of license is a business source license? What the heck is a business source license? Okay, from Maria DB Corp. Yeah, I'm gonna have to figure out what the business source license I don't know.

00:27:49 This horse, but

00:27:50 it's our source openers, is it not? Yeah. And so all this stuff is good. And the reason I'm hesitant to recommend it, but I think these benefits are really big. And you know, people can use it, then great. You go a little further, it says, excellent venue, this is free for non production use. If you want to use it for things that are commercial, then you know what it costs? So no contact? I don't know, either. If you got to ask it's too much. It's too much for you. Let's just Let's

00:28:20 just put it there. That's a My dad always said if you got to ask you can't afford it.

00:28:24 Exactly. Which I don't know. I don't, I'm not against them charging for it. I understand this is probably an insane amount of work to put together. And if that's their model, that's that's their prerogative, it's fine. Don't think everything has to be given away free. There's tons of work that goes into a lot of stuff. And sometimes charging for it is the right answer. But just tell people what it costs, you know, don't make them email you that is really not good. Well, so.

00:28:49 So Robert mentioned, Robert Robinson, maybe it's a sliding scale. And it's like, it depends on who's asking, you know, Microsoft calls up and asks, it's a different price than

00:29:01 I'm sure it is a different price. And I'm sure that's Oh, do you want to run it on all of Azure? Well, here's the price. But you know, put put some common cases in there? And are you a data scientist and you want to use it for an API, here's what it costs? Are you trying to host it as a certain well here like then maybe need it like, there should be at least a little bit of a, here's the realm of where you start, right? A lot of things have, you know, here's the base price, here's the pro price, here's the enterprise price, and here's the contact us if that doesn't fit you right, but to say it cost money, and we won't tell you what it costs. I don't know. It just sounds

00:29:37 well in and I help people so the free nonproduction criminate non commercial versus commercial. That's still a fuzzy line and I wish I wish there was like more detail whenever anybody does that, because I've been in situations a lot where I'm just some dude writing a script in a company and the company's big but I just want to get this thing to work and it's just a small A piece of my build chain or something, I'm not going to get okay to do a corporate license for something. Just to save me five minutes a day.

00:30:08 Yeah, maybe you're not selling it, right?

00:30:10 Yeah. Yeah. Oh, that's another thing is is it part of the thing I'm selling? Or is it just part of my work to get something else done?

00:30:19 Yep, indeed. So anyway, pluses and minuses, but it's an interesting contribution. And thanks, folks for sending that in. Definitely, they well,

00:30:29 so I want to talk about type pets a little bit, I've been thinking about type pens a lot, and ran across this article called eight levels of using type hints in Python. And it's from Yong Cho, and I first off I love the graphic, this is a Unsplash graphic, but I'm kind of a fan of it looks like, like posters like a movie or like band posters or something like that on on something, and then the half of them are peeled off. So cool image anyway, yeah, complete side note. But, so I was attracted to this, because this aid aid state, I thought, I kind of thought of it as like eight stages of using type hints, because that's kind of how I started using type hints. And it almost got the order the same. So let's go through through these orders. So the first one is to skip over it. The first was type hints for basic data types. So basically, it like you kind of do this if using data classes at all. It just say, well, I've got, I've got my ages in it. And it defaults to 29, just to kind of tell people what, what you're thinking about. And while you're, you know, my, my posts are a tuple, they default to an empty, empty tuple or something. So this is, this is pretty much how I started as well. And I started mostly because I was started using tight data classes. And this is what they look like when you're different declaring the contents of a data class. The and then so where do you go from there? The next, the next stage is defining a constant using Final type. Actually, I've never used this view ever used Final.

00:32:13 I've wanted to use it, but it's so it's so not exactly enforced type of thing. It's like, right. But I would love to have a constant in Python, but doing it through typing means the only time it's going to be validated or checked is if I run my PI or something like most of the time I'm not, you know, so it's like well, okay, whatever I'm not, yeah,

00:32:37 I'm I'm actually increasing the amount of times I'm using my PI or other or other type checking things. But yeah, I wouldn't have put this number two but minor grapes kind of a cool feature.

00:32:48 So it is a cool feature, though. Yeah, I don't I don't knock it exists. Yes, I just wish it was more supported, like in the language.

00:32:55 Yeah. The third is adding multiple type hints to one variable. Like it shows here a couple different ways the union of an integer float, or the bar of int and float. And I might the most the number one way I use this, I mean, I use things like this also, like it could be an int or float. But I mostly use it for like int or none, or something or none, because I've got a default value of none. And I kind of wish there was another way to do it. Because I when you when you have a I don't know it's kind of convenient anyway. But like, let's say I've got a parameter to a function. And it defaults. When I internally I assign it defaults to none if nobody passes anything in, but I also don't really want somebody to pass none in, you know. So I wish there was a like the default is none but users can't pass it in, or something like that.

00:33:52 Yeah, but

00:33:53 anyway, it works. In the end, it helps with testing anyway, to be able to pass in all all the types. But so yeah, the end, I've totally switched to the bar thing. I think it was 310 that added that. Do you remember? I think it was

00:34:07 three? To 10? Yeah, that's right here. There. Yeah.

00:34:11 So anything I'm writing I support 310. and above, because I like the bar. The next thing is using general type hints, which also this is yeah, I think I think now we're starting to increase this stage of understanding of how how type hints can help you. And the notion like then the example they use iterable. As, as you know, from typing import iterable. So you say that, you know, I'm accepting something like numbers, and it takes an iterable I love this use and I you know, it takes a little bit more of advanced use, so you get a little more comfortable with type hints. And to be able to say, I'm gonna do iteration like for N and noms doesn't really matter what it is if it's a list or tuple or or something else as long as I can iterate over it. It's good. So the other thing is probably, and I'm not sure why they didn't put is optional, but along the same is iterable. I like, I'm going to often say it's iterable. But the type inside is an int, or something like that. But anyway, right? The fifth one is

00:35:19 bracket, enter something, bracket strings, you know what you get out? Yeah,

00:35:23 the fifth is type hints for functions. And I probably would have put this as like number two, because I started using this right away. Yeah, to say, because it's it. That's one of the things that's hard with when I came to Python from C++ is knowing, like, where do I put the the return value, like the return type is, is, you know, maybe, maybe it's multiple return types, which I don't really want it to be, but, but it's nice to be able to see what the return type is and type inside that with, with type pins for functions,

00:35:56 or you read a function, I want to call that. But what do I do? Yeah, pass to it. Right? Do I have to read the function and try to understand it? Or can I just read the definition? Right? I think this is one of the main uses, right? Yeah.

00:36:08 And it's also nice to be able to see right there, but leave it with a union type is, is none a possibility? Do I have to deal with nothing coming back as something is possible? Number six is the alias for type hints. And I kinda love this. I haven't been using this much, but I'm going to start using it more. Especially it says with in Python 310. So before Python 310, you had to do like from typing import type alias and have this weird syntax thing around it. But it's not really that weird. It's, but the after 310, you just sort of declare the thing. It says like post type posts type is a dict. That goes from int to string. That's great. And then you can use that as a type int or other places. So

00:36:54 that's interesting. That's news to me. Yeah, that's really interesting.

00:36:57 So definitely, I'll definitely start using that. So I'm glad I read the article for that type hints for class for a class itself, which I'm not sure why was titled this. But basically, it's the self type. And this is very helpful if you have a class as a class that has objects that refer to other objects of the same type. I don't know how I did that before, then I guess I wasn't caring about it. But

00:37:21 you had you as a hack, or you put it into quote. So the example from this article is a class called list node. And it's going to be past the previous node. Right? So what is the time for that? Well, it should be a list node. Python is in the process of building up the list node class, so it doesn't yet know what it is. But you're trying to define a function that has that. So there's this weird catch 22 thing I can anything to what you put into a list note in quotes. That's the old version. Of course, it was just a string, but then it's like, well, but it's a string that says that. So we're gonna just guess that that's what you want.

00:37:56 Okay, well, the eighth and final one is to provide literals for variables. And I haven't done this, but it's kind of nice. Also, and I didn't know you could do this. Just to say in the example it's from typing import literal, and then you define like a weekend. That's a literal, that can only be the string Saturday or Sunday. And so this isn't an enumeration. It's a, it's just saying that it can only have these particular values. So I think I got that right. I don't think it has to be an enumeration. But no, no. So this this in the end, so like the example says, Well, if you assign that variable to Monday, it's gonna your type checkers are going to complain because you didn't assign the one of the known ones. And I probably would use this in conjunction with a neumes. Or maybe I don't have to the names, I don't know. But, but there's a lot of stuff that is passed around that it's kind of like any name, but it's passed around is just a handful of strings that it can only be one of these strings.

00:38:57 So be nice for this to support it. Henry on the audience points out that x colon final equals true. Also maps to one of these literal checks. So is literal of true rather than just a bool. So the type checker can make sure it's always true, not true or false. So interesting tie together of those as well. And Robert points out that it sounds like a case of the Mondays.

00:39:19 Oh, dear. And Henry mentioned that last time I checked self was not supported by my PI. But so we'll have to check on that. Yeah. Anybody from my PI listening? You?

00:39:29 Let us know? Let us know.

00:39:30 Well, that's it for for this. I just thought I thought it was a good idea. And I do think this is a good idea is to not try to jump in the deep end of type hints. Try try some of the simple stuff first and then then get you get to carry about it. So

00:39:48 yeah, that was a good, good little discussion around it. That was fun. Yeah. All right. Got any extra force you want to throw out there.

00:39:54 The only extra I wanted to bring up is the testing code hasn't had an episode since like October. over something and it's not dead, I just kind of wanted to take the holiday off without telling anybody. And it's coming back. So sometime in January, there'll be a testing code episode.

00:40:12 Oh, excellent. Looking forward to it, I have a few extras and one leads to another, which leads to another as is the nature of all these things. So I wrote, I ran across a couple of articles, let me start that way that sort of talks about RSS and how RSS is actually kind of important as a foundation of the independent web and in ways, maybe bigger than, like, I really realized. So there's this one called back to RSS, I'll just read a little excerpt from each other says it's 2023 or 1999, or whatever personal sites are back, blogs are back RSS is back and owning your data is becoming real, which kind of a cool thing. And then also, there's this one, same day on the verge called bring back personal blogging, and yeah, anyway, so I ended up writing a welcome back RSS article, that kind of rift on those ideas and talked about some more talks about reader, which I talked about before and stuff. So yeah, anyway, people can go check out that article. And it's interesting. And as part of the conversation, I learned about reader, as in Reader, dot read the docs, that IO, which is a reader is a Python feed reader library. So it does things like let you subscribe with Python to RSS and Atom and JSON feeds, Mark articles as read and important, filter them get stats, do all of it. Like basically, if you wanted the, the logical internals of an RSS reader, here's the Python library to do that, which is cool.

00:41:34 Now what we need to do is have a listener, like take reader and put a textual front end on it. So we have

00:41:41 Yes, actually, that's a pretty interesting idea. That'd be cool. This guy over here, built this thing called coos toasts, which is basically like Instapaper, self hosted Python web app built on reader, so people can check that out. And then read wise looks really interesting. Are you willing to read wise? No. So it's like an RSS reader. But it also lets you take notes marked stuff as read for later, even if it doesn't have an RSS feed and highlight, like your research as you're going through it and save it. So think how good that would be for people that say, do podcasts, you got to remember a bunch of stuff, but an article, pull that thing back up, and it's got your highlights and your notes on it. So

00:42:23 I'm liking this, I'm gonna have to check it out. Yeah, that's

00:42:26 looking pretty good. So anyway, all that stuff came from this little article that I wrote, people can check that out. Now, another very important thing, there's this, this Mastodon account called year progress, and it just goes along. And every day, it just posts a progress bar for how far we are in the daily progress. So it's like a little ASCII, you know, TQ DM style progress bar of the year. And it's just notable that we just had 100% progress for the year. Now that we're now we're done as it should reset to zero, but

00:43:01 it was 100%. Actually, it looks like it doesn't actually do it every day, but it does it when it goes to a new percentage. So it's every few days or two days, right?

00:43:09 Yeah, looks like it, which I guess is probably good. I mean, thank you for not tuning. It's like saving 3.6 2.6 posts, something like that.

00:43:19 All right. And don't just watch it wait first.

00:43:23 It's not that exciting. It doesn't. It has no decimal point. So it's, it's got to work in big ASCII blocks. So it does what it does. All right, this is something that people might want to keep an eye out who had automated builds running over the winter break, and also use pytorch. So one of the like, thoughts I had was like I was doing, I was just kicking back, we're hanging around. I'm like, you know, I'm gonna work on some of these little weird projects. Like I'd like the login page on top of Python chain and just be a little smoother and cleaner. Maybe I'll just go play with that. Like I I'm not really going to do real work, but it'd be kind of fun to do some web design and just sort of like no pressure redesign that a little bit and I thought but I'm kind of be careful about adding new libraries, updating existing ones like Pip pip tools, style, update them, because it's anybody watching and if something bad got in there, would anybody know are they all on break? Right? Well, it turns out my paranoid side was on to something luckily, not anything I was using but pytorch discloses malicious dependency chain compromised over the holidays. This is bad. If you pip installed somehow the pie torch stuff. I don't know the exact how it links together but says pytorch has identified a malicious dependency with the same name as the front of frameworks torch Triton library. So that was like somehow shipped or directly linked in pytorch in a way that I don't fully understand because I don't use it. But what happened is on merry Merry Christmas on December 25 users who installed pipe torch nightly I should ensure their systems are not compromised. Because of this Triton torch. What they did is somebody put a malicious version on pi pi. And when pytorch was getting set up, instead of picking its own version, it preferred the pi pi version, which was a virus. So anyway, people can check that out. It's sub ideal since the IPI index takes precedence this malicious malicious package was being installed, instead of the version from the official repository. This enables somebody to register a package to do bad things. Anyway, people can read all about that. But if you have pytorch And you pip installed it over the winter break, read that.

00:45:36 Yeah, plus, you know, kudos for them for coming up with a great domain name bleeping computer. COMM

00:45:41 sign up bleeping computer. There's a lot of good articles on bleeping computer. It's an RSS feed. All right. Well, that's all I got for extras. How about a joke? Yeah, it sounds great. So first of all, let me I don't want to kill the punch line before we set the stage. Okay, so I pulled up just the picture. Can you tell people what this is on the screen? Brian, do you remember these things? Well,

00:46:02 remember, they're still they're not Oh, okay. It's on the back of like a computer or something. A desktop computer. Next to the power cord. There's a toggle switch with a on and off sawn off toggle switch for

00:46:18 like a physical power button directly on the power supply on a desktop computer. Right? Yep. Yeah. And Robert, Robert got it exactly. Right. So here's the joke, they finally made a switch to exit Vim. They've highlighted that power physical power button on the back of the power supply. Nice. Your vim lover, so I don't rub it in too much. But that's a pretty effective way to exit Vim.

00:46:46 Vim runs in a Windows. So just close the window. Whatever the, the What funny thing about power switches. So I used to work with a lot of so I work with embedded systems and some of them run Windows Embedded. And embedded systems are supposed to be able to toggle the power off just like from the power supply. And now normal windows, you're not supposed to do that. Because you know, you let you want to let it shut down gracefully. And if the disk is moving at the time, and there's even with Windows Embedded, there's some some issues or any embedded operating system, there are a possibility you could do some damage to the disk if you're you if you power off at exactly the right time. But there's supposed to be safeguards in place to take care of it. So I'm just in the habit of using these things all the time of like, toggle off and on. And if we get a like a new batch of people in that are mostly from DevOps, or from non embedded worlds, they're like, What are you doing?

00:47:48 Good to break it?

00:47:49 Yeah, you're gonna break it like, these are good. Yeah.

00:47:53 Awesome. Yeah. My little circuit Python thing. It doesn't have a power switch. You just disconnected from power. That's,

00:48:01 yeah, works well, and one of the reasons uh, now I'm going in the weeds, but one of the reasons for the the, the need for the ability to just power off is because a lot of times instruments are in a huge rack, and you don't go through and power off each individual instrument, you just turn the rack off. So

00:48:17 Wow, interesting. Cool. Well, it's good to be back in 2023.

00:48:22 Yeah, it's good to be back. So welcome back. And thanks, everybody for tuning in. Yeah,

00:48:29 you bet. Bye bye.

