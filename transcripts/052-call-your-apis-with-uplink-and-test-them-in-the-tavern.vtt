
00:00:00.000 --> 00:00:05.760
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.760 --> 00:00:10.800
This is episode 52, recorded November 15th, 2017.


00:00:10.800 --> 00:00:11.680
I'm Michael Kennedy.


00:00:11.680 --> 00:00:12.560
And I'm Brian Okken.


00:00:12.560 --> 00:00:16.400
And we got some awesome news for you. But hey, Brian, just wanna say happy birthday, man.


00:00:16.400 --> 00:00:17.920
Oh, yeah. Happy birthday.


00:00:17.920 --> 00:00:22.960
Yeah. So this is the 52nd episode of Python Bytes. And if I recall, I don't think we skipped.


00:00:22.960 --> 00:00:26.560
I'm pretty sure we did not skip a single episode.


00:00:26.560 --> 00:00:28.240
- Yeah, we shipped the entire first year,


00:00:28.240 --> 00:00:29.440
we shipped an episode every week,


00:00:29.440 --> 00:00:30.520
and I think that's pretty awesome.


00:00:30.520 --> 00:00:32.360
- That is cool, even around Christmas and stuff?


00:00:32.360 --> 00:00:34.420
- Yeah, I think we somehow recorded ahead,


00:00:34.420 --> 00:00:38.000
or maybe we missed one, but I think we did it.


00:00:38.000 --> 00:00:38.920
So pretty exciting.


00:00:38.920 --> 00:00:40.200
You know, and I just wanna say thank you


00:00:40.200 --> 00:00:42.040
to everybody out there who listens to the show


00:00:42.040 --> 00:00:44.200
on a weekly basis, 'cause that's why we do it.


00:00:44.200 --> 00:00:45.600
We do it for you guys, and we wouldn't do it


00:00:45.600 --> 00:00:47.100
if you weren't interested and excited.


00:00:47.100 --> 00:00:49.160
So thank you for appreciating this,


00:00:49.160 --> 00:00:50.760
giving us all the ideas, and keeping us going.


00:00:50.760 --> 00:00:51.600
- Yeah, definitely, thank you.


00:00:51.600 --> 00:00:52.940
And we had a whole bunch backed up,


00:00:52.940 --> 00:00:56.660
So this episode is two hours long and it has 52 topics.


00:00:56.660 --> 00:00:57.500
- That's right.


00:00:57.500 --> 00:01:00.540
So you guys deposit now, get a coffee, settle in


00:01:00.540 --> 00:01:02.460
or whiskey if it's late.


00:01:02.460 --> 00:01:04.900
Now, actually we're going to keep to the same format.


00:01:04.900 --> 00:01:05.740
All right, cool.


00:01:05.740 --> 00:01:07.540
So before we get to our topics though,


00:01:07.540 --> 00:01:10.260
I just wanna say thank you again to Digital Ocean as well.


00:01:10.260 --> 00:01:13.780
They're another reason that this show is going strong.


00:01:13.780 --> 00:01:16.380
Digital Ocean, Rollbar and a few of the other folks


00:01:16.380 --> 00:01:18.300
that continuously support the show.


00:01:18.300 --> 00:01:19.500
Thank you, thank you.


00:01:19.500 --> 00:01:20.460
They just launched Spaces.


00:01:20.460 --> 00:01:23.820
check it out at do.co/python.


00:01:23.820 --> 00:01:24.780
Tell you more about it later.


00:01:24.780 --> 00:01:27.460
Right now, I want to spend a while on APIs, Brian.


00:01:27.460 --> 00:01:30.440
- Yeah, I've got APIs on the brain right now.


00:01:30.440 --> 00:01:32.980
So we'll start with a new pro,


00:01:32.980 --> 00:01:34.340
I don't know if it's new actually,


00:01:34.340 --> 00:01:35.820
a project called Tavern.


00:01:35.820 --> 00:01:37.340
- It's like a drinking game or something?


00:01:37.340 --> 00:01:38.520
(Brian laughs)


00:01:38.520 --> 00:01:42.260
- No, it's a testing, it's testing RESTful APIs.


00:01:42.260 --> 00:01:44.300
So I don't know why it's called Tavern.


00:01:44.300 --> 00:01:45.460
I'll have to ask him about that.


00:01:45.460 --> 00:01:46.680
- It's a really cool project though.


00:01:46.680 --> 00:01:47.520
I checked it out.


00:01:47.520 --> 00:01:48.380
I like it a lot actually.


00:01:48.380 --> 00:01:51.940
- Yeah, so it's at taverntesting.github.io.


00:01:51.940 --> 00:01:54.140
Like I said, it's a RESTful API testing.


00:01:54.140 --> 00:01:57.720
And what it reminds me of the most is PyREST test


00:01:57.720 --> 00:02:02.720
because it uses a YAML format to describe the tests


00:02:02.720 --> 00:02:06.880
and describe what sequences to go through.


00:02:06.880 --> 00:02:09.020
So it does have like one-off tests


00:02:09.020 --> 00:02:13.220
where you could just either post or gets from a URL


00:02:13.220 --> 00:02:15.100
and then determines whether or not,


00:02:15.100 --> 00:02:17.460
and you can specify what you want out of it.


00:02:17.460 --> 00:02:19.140
But you can also do sequences.


00:02:19.140 --> 00:02:21.220
And one of my favorite things about this


00:02:21.220 --> 00:02:23.900
is it comes with a pytest plugin,


00:02:23.900 --> 00:02:27.420
and they say it works best integrated with pytest.


00:02:27.420 --> 00:02:28.500
- That's really awesome.


00:02:28.500 --> 00:02:30.420
So you basically describe,


00:02:30.420 --> 00:02:33.220
I want you to call this URL, it's gonna be a get,


00:02:33.220 --> 00:02:35.780
and you expect to get kind of this thing back,


00:02:35.780 --> 00:02:37.340
and then you can just assert against it.


00:02:37.340 --> 00:02:38.180
Is that how it works?


00:02:38.180 --> 00:02:39.500
- With the YAML syntax,


00:02:39.500 --> 00:02:41.420
you don't even have to specify asserts.


00:02:41.420 --> 00:02:44.380
You just specify what you expect to get back,


00:02:44.380 --> 00:02:47.380
and it just automatically tests for all that


00:02:47.380 --> 00:02:49.580
For things like this, actually, I really like,


00:02:49.580 --> 00:02:51.780
even though it takes up a lot of space,


00:02:51.780 --> 00:02:53.500
the YAML takes a lot more space


00:02:53.500 --> 00:02:55.440
than like a little test function.


00:02:55.440 --> 00:02:59.820
But it's very readable, especially if you have an editor


00:02:59.820 --> 00:03:01.700
that colorizes your YAML files.


00:03:01.700 --> 00:03:04.220
And I think it's good for, especially,


00:03:04.220 --> 00:03:07.460
you can discuss it with non-programmer people.


00:03:07.460 --> 00:03:09.060
So that's one of the benefits of that.


00:03:09.060 --> 00:03:10.340
- Okay, yeah, that's really cool.


00:03:10.340 --> 00:03:11.180
Yeah, that's true.


00:03:11.180 --> 00:03:14.060
You can give a YAML file to a non-technical person


00:03:14.060 --> 00:03:16.700
who is like sort of a requirements gatherer,


00:03:16.700 --> 00:03:19.360
business analyst or something, or domain expert,


00:03:19.360 --> 00:03:20.980
they can say, yeah, okay, these are the things


00:03:20.980 --> 00:03:22.380
that let's slot in here, right?


00:03:22.380 --> 00:03:24.180
Or to the person who built the API.


00:03:24.180 --> 00:03:26.460
- Like for instance, the sequences, you can say,


00:03:26.460 --> 00:03:28.620
okay, here's the kind of the test is called this,


00:03:28.620 --> 00:03:31.260
and this is sort of the sequence we're gonna go through.


00:03:31.260 --> 00:03:33.620
First you log in, and then you have to do this.


00:03:33.620 --> 00:03:37.300
And there is also with a lot of sequences,


00:03:37.300 --> 00:03:40.340
you have to collect, get information like tokens


00:03:40.340 --> 00:03:42.620
or something from the server.


00:03:42.620 --> 00:03:45.660
And Tavern allows you to save those tokens


00:03:45.660 --> 00:03:50.380
as variable names to use later in later tests, which is nice.


00:03:50.380 --> 00:03:51.220
- Yeah, that's really sweet.


00:03:51.220 --> 00:03:52.040
- That's Tavern.


00:03:52.040 --> 00:03:53.060
- Tavern sounds really cool.


00:03:53.060 --> 00:03:54.220
Definitely worth checking out.


00:03:54.220 --> 00:03:57.660
The thing I wanna talk about is not for testing APIs,


00:03:57.660 --> 00:03:59.540
but consuming APIs, calling APIs.


00:03:59.540 --> 00:04:03.220
What if you weren't looking at this document we're sharing,


00:04:03.220 --> 00:04:04.060
just like thinking of like,


00:04:04.060 --> 00:04:05.940
"Hey, I'm gonna call an API from Python."


00:04:05.940 --> 00:04:07.500
What library do you think you would use?


00:04:07.500 --> 00:04:08.460
- Oh, requests.


00:04:08.460 --> 00:04:09.820
- Obviously, everyone uses requests.


00:04:09.820 --> 00:04:13.500
And request is one of the absolute most popular libraries


00:04:13.500 --> 00:04:15.060
since downloaded an insane number of times.


00:04:15.060 --> 00:04:17.520
And what I find myself doing a lot when I,


00:04:17.520 --> 00:04:21.200
I know this is like a proper API I'm going to consume.


00:04:21.200 --> 00:04:23.980
It's part of an application or I'm going to fold it in


00:04:23.980 --> 00:04:26.860
and make it really important is I'll create like a class


00:04:26.860 --> 00:04:29.580
or some module that will model all the actions


00:04:29.580 --> 00:04:31.360
that you take against that API, right?


00:04:31.360 --> 00:04:34.980
Like log in or, you know, get courses


00:04:34.980 --> 00:04:36.940
or whatever your API is about, right?


00:04:36.940 --> 00:04:39.500
And you sort of put use request to implement it,


00:04:39.500 --> 00:04:42.020
but deep down, you kind of bury requests


00:04:42.020 --> 00:04:45.600
and hopefully you've got some facade sort of class


00:04:45.600 --> 00:04:47.400
or module in front of it.


00:04:47.400 --> 00:04:51.140
So I want to talk about this sort of up and coming project


00:04:51.140 --> 00:04:54.220
that does that all at once for you,


00:04:54.220 --> 00:04:55.260
which is really sweet.


00:04:55.260 --> 00:04:58.420
And it uses it with decorators called uplink.


00:04:58.420 --> 00:04:59.340
Have you heard of uplink?


00:04:59.340 --> 00:05:02.220
- Not until you listed it today, but it looks really cool.


00:05:02.220 --> 00:05:03.060
- It's super cool, right?


00:05:03.060 --> 00:05:04.860
So let me just describe real quick how you use this.


00:05:04.860 --> 00:05:07.340
So imagine I want to call the GitHub API.


00:05:07.340 --> 00:05:09.340
I need to have a header on all my requests


00:05:09.340 --> 00:05:12.780
that says I'm using this particular format


00:05:12.780 --> 00:05:14.620
or schema for my JSON.


00:05:14.620 --> 00:05:16.580
I'm gonna call the get users function.


00:05:16.580 --> 00:05:18.060
I might update a user and so on.


00:05:18.060 --> 00:05:19.780
So what I do is I create a class,


00:05:19.780 --> 00:05:21.300
call it whatever you want,


00:05:21.300 --> 00:05:23.740
derived from a certain base class that comes from uplink.


00:05:23.740 --> 00:05:26.500
I had to add headers decorator to the class.


00:05:26.500 --> 00:05:30.140
I say, accept the right funky content type.


00:05:30.140 --> 00:05:31.900
And that just applies to all the functions


00:05:31.900 --> 00:05:33.300
you call on this class.


00:05:33.300 --> 00:05:34.540
If I wanna get the users,


00:05:34.540 --> 00:05:36.860
I'd say create a function called get user.


00:05:36.860 --> 00:05:41.860
and I'd say @get /users/curly username,


00:05:41.860 --> 00:05:44.500
and that curly username there maps to the argument.


00:05:44.500 --> 00:05:47.620
So when I call it, I say, github.getuser,


00:05:47.620 --> 00:05:49.660
yeah, Mike C. Kennedy is my username there,


00:05:49.660 --> 00:05:52.780
and it actually directly pulls that into the little URL


00:05:52.780 --> 00:05:54.260
in the decorator and passes it.


00:05:54.260 --> 00:05:55.180
- Oh, this is cool.


00:05:55.180 --> 00:05:56.020
- That is cool, right?


00:05:56.020 --> 00:05:58.340
And they have another example for updating a user,


00:05:58.340 --> 00:06:01.740
that's a patch call, so you say @json @patch,


00:06:01.740 --> 00:06:03.740
and then the arguments to the method,


00:06:03.740 --> 00:06:08.740
You can pass in just like a body of basically KW args


00:06:08.740 --> 00:06:12.680
and that becomes the body of the patch submission.


00:06:12.680 --> 00:06:15.640
You can also say access token colon query


00:06:15.640 --> 00:06:18.520
and use the type decorator in Python three


00:06:18.520 --> 00:06:19.720
to decorate as a query.


00:06:19.720 --> 00:06:22.240
So then I'll go question mark access token


00:06:22.240 --> 00:06:24.120
equals what you pass as that argument.


00:06:24.120 --> 00:06:26.000
This is so smooth.


00:06:26.000 --> 00:06:27.000
I really like it.


00:06:27.000 --> 00:06:29.240
So if I'm building like a super structured API


00:06:29.240 --> 00:06:32.160
that's got really strict restful requirements like this,


00:06:32.160 --> 00:06:33.440
I'm definitely gonna check out uplink.


00:06:33.440 --> 00:06:35.500
I'm gonna definitely watch this, this is neat.


00:06:35.500 --> 00:06:37.400
They have a little warning in there that says


00:06:37.400 --> 00:06:39.680
that it's in the early stages,


00:06:39.680 --> 00:06:43.340
but that might be a great way for other people


00:06:43.340 --> 00:06:44.880
to get involved if they wanna help out


00:06:44.880 --> 00:06:46.120
and push this further.


00:06:46.120 --> 00:06:47.960
- Absolutely, so that's definitely a warning


00:06:47.960 --> 00:06:48.800
you wanna be careful about.


00:06:48.800 --> 00:06:50.520
They say it's not quite production ready,


00:06:50.520 --> 00:06:52.060
mostly not because it doesn't work,


00:06:52.060 --> 00:06:54.680
but because they think the API may change.


00:06:54.680 --> 00:06:56.260
They don't wanna break your code.


00:06:56.260 --> 00:06:59.100
So I think that there's an opportunity here.


00:06:59.100 --> 00:07:00.080
There's so many people that say,


00:07:00.080 --> 00:07:01.640
"I really wanna get started in open source,"


00:07:01.640 --> 00:07:06.000
they look at Django or CPython, like, whoa, this is complicated and changing


00:07:06.000 --> 00:07:09.840
this is really hard. Something like this, you could totally contribute to a


00:07:09.840 --> 00:07:13.360
project like this without getting overwhelmed in the early stages. So


00:07:13.360 --> 00:07:15.960
check it out. Yeah, definitely. Cool. Alright, so let's switch to totally


00:07:15.960 --> 00:07:18.720
different topic and talk about rest and API.


00:07:18.720 --> 00:07:25.080
Yeah, yeah. So I wanted actually to combine these two things because I ran


00:07:25.080 --> 00:07:30.120
across them in the same week for one. And this was shared by a listener. And


00:07:30.120 --> 00:07:32.000
I'm sorry that I didn't write down the name.


00:07:32.000 --> 00:07:33.180
>> But yeah, thank you for submitting that.


00:07:33.180 --> 00:07:35.060
That's awesome. I saw that coming as well over email.


00:07:35.060 --> 00:07:36.600
>> There's an article called,


00:07:36.600 --> 00:07:37.820
I've got it turned around,


00:07:37.820 --> 00:07:39.700
using JSON Schema,


00:07:39.700 --> 00:07:41.420
which I hadn't heard of before,


00:07:41.420 --> 00:07:45.260
using JSON Schema for REST API endpoint testing.


00:07:45.260 --> 00:07:48.720
The idea, had you heard of JSON Schema before?


00:07:48.720 --> 00:07:50.220
>> I have heard of JSON Schema.


00:07:50.220 --> 00:07:51.460
It's basically a way to say,


00:07:51.460 --> 00:07:53.260
it's like what your test does,


00:07:53.260 --> 00:07:54.360
but in a different level.


00:07:54.360 --> 00:07:56.320
You say, this is what the JSON is supposed to look like.


00:07:56.320 --> 00:07:57.240
This is supposed to be an integer,


00:07:57.240 --> 00:07:59.520
this is supposed to be a string, and so on.


00:07:59.520 --> 00:08:00.520
but I haven't ever used it.


00:08:00.520 --> 00:08:02.920
So like I pretty much have exhausted my knowledge of it now.


00:08:02.920 --> 00:08:05.620
- The example of it, they do Django,


00:08:05.620 --> 00:08:07.400
which I don't really know Django.


00:08:07.400 --> 00:08:09.320
So I kind of read that anyway,


00:08:09.320 --> 00:08:10.800
but I don't think that's necessary.


00:08:10.800 --> 00:08:12.540
I think you could use this for anything.


00:08:12.540 --> 00:08:16.440
But the idea is you can implement a schema


00:08:16.440 --> 00:08:18.800
to describe what your data should look like,


00:08:18.800 --> 00:08:21.640
and then actually serve that within.


00:08:21.640 --> 00:08:25.800
So within your, on your server code, serve that as well.


00:08:25.800 --> 00:08:28.720
And then for your tests, you can grab the schema


00:08:28.720 --> 00:08:32.080
and then grab whatever data you wanted


00:08:32.080 --> 00:08:34.820
and validate, use a test to validate


00:08:34.820 --> 00:08:38.060
that the data you're getting adheres to the schema.


00:08:38.060 --> 00:08:39.320
And then you can also go out


00:08:39.320 --> 00:08:42.080
and make sure the values are correct and things like that.


00:08:42.080 --> 00:08:44.200
But actually, I'm just curious what you think of this.


00:08:44.200 --> 00:08:45.600
- I think it's pretty cool, actually,


00:08:45.600 --> 00:08:48.400
especially if the API already has


00:08:48.400 --> 00:08:51.480
a JSON schema associated with it, right?


00:08:51.480 --> 00:08:54.200
Like if they're like, here's the schema, here's the API,


00:08:54.200 --> 00:08:56.520
then you could just, okay, and here's how I test.


00:08:56.520 --> 00:08:58.480
You know, one thing that might be interesting


00:08:58.480 --> 00:09:01.480
It's interesting if you're the maintainer of that thing


00:09:01.480 --> 00:09:04.480
so that you know if the tests break,


00:09:04.480 --> 00:09:09.480
that you're verifying, you have to go and update the documentation or something like this.


00:09:09.480 --> 00:09:14.480
But it's also interesting, I think, to point it at APIs you depend upon


00:09:14.480 --> 00:09:18.480
and say, I'm going to call this, and I want to know if the schema changes.


00:09:18.480 --> 00:09:22.480
Because it's totally common that people will document one API,


00:09:22.480 --> 00:09:25.480
the API will change, your stuff will stop working,


00:09:25.480 --> 00:09:27.480
and you're like, "But I'm doing what they say."


00:09:27.480 --> 00:09:29.360
It's like, what has happened, right?


00:09:29.360 --> 00:09:33.200
So if you knew the schema of why APIs you depended upon changed,


00:09:33.200 --> 00:09:35.080
this is a good way to do that. I think that'd be great.


00:09:35.080 --> 00:09:38.560
>> Yeah. Even if you didn't have a schema provided to you,


00:09:38.560 --> 00:09:39.840
you could define one for-


00:09:39.840 --> 00:09:41.320
>> Yeah, it's usually not too hard, right?


00:09:41.320 --> 00:09:42.880
>> Actually, that's a great idea.


00:09:42.880 --> 00:09:47.280
Another thought with that is that it's not just RESTful APIs.


00:09:47.280 --> 00:09:49.400
Anything that's using JSON,


00:09:49.400 --> 00:09:51.600
you can use that to test any API.


00:09:51.600 --> 00:09:54.800
>> Yeah, definitely. It's very neat. So check that out as well.


00:09:54.800 --> 00:09:57.200
Alright, before we get on to the next thing,


00:09:57.200 --> 00:09:59.800
I want to tell you where your audio came from this week.


00:09:59.800 --> 00:10:02.200
It came from DigitalOcean Spaces.


00:10:02.200 --> 00:10:04.800
So that's right, those guys are sponsoring this episode,


00:10:04.800 --> 00:10:06.200
as I said at the top of the show,


00:10:06.200 --> 00:10:09.000
check them out at dio.co/python,


00:10:09.000 --> 00:10:11.000
get a free two-month trial of Spaces.


00:10:11.000 --> 00:10:15.000
And Spaces is object storage and delivery in the cloud.


00:10:15.000 --> 00:10:17.600
You know, things like AWS or Azure Blob Storage,


00:10:17.600 --> 00:10:20.400
sorry, AWS S3, Azure Blob Storage,


00:10:20.400 --> 00:10:22.800
things like that, but way, way better,


00:10:22.800 --> 00:10:25.920
better pricing, simpler, things like this.


00:10:25.920 --> 00:10:29.000
So I've been using it for this podcast.


00:10:29.000 --> 00:10:31.320
I just recently, big announcement,


00:10:31.320 --> 00:10:34.600
switched to using it as the video delivery network


00:10:34.600 --> 00:10:36.200
for my courses.


00:10:36.200 --> 00:10:37.800
So I'm trying that out on a few courses


00:10:37.800 --> 00:10:40.560
and that's been super, super smooth as well.


00:10:40.560 --> 00:10:41.520
And what's really interesting,


00:10:41.520 --> 00:10:43.560
the way that I wrote the API


00:10:43.560 --> 00:10:46.480
for accessing the video files and stuff


00:10:46.480 --> 00:10:49.440
was I imported Boto3.


00:10:49.440 --> 00:10:51.920
That's the S3 AWS API.


00:10:51.920 --> 00:10:54.200
So the API is compatible with S3,


00:10:54.200 --> 00:10:57.000
like quite literally it's the same API even.


00:10:57.000 --> 00:10:59.200
Just point it at some different base URL


00:10:59.200 --> 00:11:00.040
and you're good to go.


00:11:00.040 --> 00:11:02.360
So if you've been using something like S3,


00:11:02.360 --> 00:11:03.360
you really owe it to yourself


00:11:03.360 --> 00:11:04.920
to check out DigitalOcean Spaces


00:11:04.920 --> 00:11:07.440
at dio.to/python.


00:11:07.440 --> 00:11:08.280
Very cool stuff.


00:11:08.280 --> 00:11:09.100
- Yeah, very neat.


00:11:09.100 --> 00:11:10.280
And cool that you tried that out,


00:11:10.280 --> 00:11:11.920
that the API's compatible.


00:11:11.920 --> 00:11:13.160
- So far it's working really well.


00:11:13.160 --> 00:11:15.240
- I was thinking that some music would be nice.


00:11:15.240 --> 00:11:17.360
- I love to listen to music when I code, do you?


00:11:17.360 --> 00:11:18.200
- Yeah, all the time.


00:11:18.200 --> 00:11:20.760
- It's funny, I find like a little bit of distraction


00:11:20.760 --> 00:11:22.640
kind of helps keep the mind focused.


00:11:22.640 --> 00:11:24.040
I don't know, people are weird that way.


00:11:24.040 --> 00:11:27.520
I work in coffee shops as well, and I like that as well.


00:11:27.520 --> 00:11:30.560
But this is a different kind of music to coding.


00:11:30.560 --> 00:11:34.200
So this is almost like music as performance art.


00:11:34.200 --> 00:11:36.200
So there's this presentation called


00:11:36.200 --> 00:11:38.720
Programming Music for Performance,


00:11:38.720 --> 00:11:41.080
Live Coding with FoxDot.


00:11:41.080 --> 00:11:44.720
This is by Ryan Kirkbride at PyCon UK.


00:11:44.720 --> 00:11:46.880
So this is a really short video,


00:11:46.880 --> 00:11:48.280
but maybe it'll inspire some people


00:11:48.280 --> 00:11:50.560
to do some similar performances.


00:11:50.560 --> 00:11:56.440
Basically, he's up there writing code to dramatic, electric,


00:11:56.440 --> 00:11:57.760
classical type music.


00:11:57.760 --> 00:12:00.400
And it's just-- it's really interesting to see it go.


00:12:00.400 --> 00:12:01.760
What did you think of it, Brian?


00:12:01.760 --> 00:12:02.800
I thought it was really interesting,


00:12:02.800 --> 00:12:03.960
but I'm a little lost.


00:12:03.960 --> 00:12:06.440
So I was hoping you could explain to me what's going on.


00:12:06.440 --> 00:12:08.080
I wasn't at the talk, so--


00:12:08.080 --> 00:12:11.160
and the video is not that long, so I didn't see the introduction.


00:12:11.160 --> 00:12:13.280
But what I think it is is it's like, I'm


00:12:13.280 --> 00:12:18.160
going to show you some cool thing by writing a demo live and do it.


00:12:18.160 --> 00:12:20.100
but instead of explain it to you,


00:12:20.100 --> 00:12:22.820
I'm going to do it to a dramatic music


00:12:22.820 --> 00:12:24.740
and make it like a performance art.


00:12:24.740 --> 00:12:28.480
Remember how we talked about code is like poetry


00:12:28.480 --> 00:12:29.500
a while back?


00:12:29.500 --> 00:12:32.140
This is like code as performance art, I think.


00:12:32.140 --> 00:12:33.260
- Yeah, I guess I'll have to check out


00:12:33.260 --> 00:12:36.860
what all Fox.is and how that works with that.


00:12:36.860 --> 00:12:39.980
- Yeah, yeah, sadly, there's not that much information


00:12:39.980 --> 00:12:42.500
in this video 'cause it's like partial and it's short,


00:12:42.500 --> 00:12:44.700
but this is from Ian Watt, another listener suggestion.


00:12:44.700 --> 00:12:47.140
I thought it might inspire some of you guys out there.


00:12:47.140 --> 00:12:49.180
So just, you know, chore it, have a look at this little video.


00:12:49.180 --> 00:12:49.660
It's cool.


00:12:49.660 --> 00:12:51.220
But be sure to turn on the audio.


00:12:51.220 --> 00:12:53.940
Plus he did a talk without speaking, which is good.


00:12:53.940 --> 00:12:54.540
Exactly.


00:12:54.540 --> 00:12:57.060
We've talked about, should you do live coding during your new demos?


00:12:57.060 --> 00:12:58.340
This is like the opposite.


00:12:58.340 --> 00:12:59.820
Of a, should I do live?


00:12:59.820 --> 00:13:02.040
Cause it's like only live coding and there's nothing else.


00:13:02.040 --> 00:13:02.900
There's not even words.


00:13:02.900 --> 00:13:03.180
Yeah.


00:13:03.180 --> 00:13:03.500
Yeah.


00:13:03.500 --> 00:13:04.060
That's good.


00:13:04.060 --> 00:13:05.420
That's awesome.


00:13:05.420 --> 00:13:08.780
But, if, if we had like a weekly Python chat, there'd be words, right?


00:13:08.780 --> 00:13:11.420
There would be words and video and audio.


00:13:11.420 --> 00:13:11.700
Right.


00:13:11.700 --> 00:13:14.180
So tell us, tell us about what you got going on this weekly Python chat.


00:13:14.180 --> 00:13:15.460
I saw you were just on it, right?


00:13:15.460 --> 00:13:15.860
Yeah.


00:13:15.860 --> 00:13:16.100
Yeah.


00:13:16.100 --> 00:13:18.040
So it was super fun.


00:13:18.040 --> 00:13:22.220
So weekly Python chat is at, how did he get that?


00:13:22.220 --> 00:13:26.880
It's at weekly Python dot chat, but it's Trey Hunter.


00:13:26.880 --> 00:13:31.560
And he's a, he's can't remember exactly what he does, but he's part of the


00:13:31.560 --> 00:13:36.920
Python software foundation, but he's also Python instructor and he does quite a bit.


00:13:36.920 --> 00:13:37.800
He's a super nice guy.


00:13:37.800 --> 00:13:42.320
He has these weekly chats where he just picks somebody in the Python community


00:13:42.320 --> 00:13:45.840
and often requested by other people that listen.


00:13:45.840 --> 00:13:50.000
and does like a little, like a under an hour,


00:13:50.000 --> 00:13:53.000
approximately an hour video chat with somebody else,


00:13:53.000 --> 00:13:55.400
but they're also, you can do live coding.


00:13:55.400 --> 00:13:58.740
And then there's people in the chat room asking questions


00:13:58.740 --> 00:14:00.000
while it's going on.


00:14:00.000 --> 00:14:02.580
So it's a live thing, but then it's also recorded.


00:14:02.580 --> 00:14:03.640
So you can watch old ones.


00:14:03.640 --> 00:14:06.720
So yeah, the last one last week on November 9th


00:14:06.720 --> 00:14:08.880
was testing Python with pytest.


00:14:08.880 --> 00:14:10.560
So that was with me.


00:14:10.560 --> 00:14:11.400
- That's awesome.


00:14:11.400 --> 00:14:13.000
- And I'm highlighting it because I want more,


00:14:13.000 --> 00:14:14.820
it's really cool, it's fun.


00:14:14.820 --> 00:14:17.820
It allows to ask questions of people that they wouldn't,


00:14:17.820 --> 00:14:20.500
maybe you don't go to conferences that much,


00:14:20.500 --> 00:14:22.780
but you could stay up for a weird hour


00:14:22.780 --> 00:14:25.340
depending on where you live in the world.


00:14:25.340 --> 00:14:27.540
But you can ask questions of people


00:14:27.540 --> 00:14:29.020
you wouldn't get a chance to otherwise.


00:14:29.020 --> 00:14:30.140
So that's good.


00:14:30.140 --> 00:14:31.420
- Yeah, very cool.


00:14:31.420 --> 00:14:32.420
Nice, so yeah, check that out.


00:14:32.420 --> 00:14:34.260
We got the link in the show notes.


00:14:34.260 --> 00:14:36.380
So let's run this out with a bunch of mistakes.


00:14:36.380 --> 00:14:37.540
I think that's a good one.


00:14:37.540 --> 00:14:40.020
So our last topic is sort of,


00:14:40.020 --> 00:14:41.460
I think actually has a mistake in it.


00:14:41.460 --> 00:14:44.220
It's 10 common beginner mistakes in Python.


00:14:44.220 --> 00:14:48.040
So this comes to us from a blog post at a checkio.org


00:14:48.040 --> 00:14:51.700
or maybe better, pull it up, pi.checkio.org.


00:14:51.700 --> 00:14:53.920
Have you played with pi.checkio.org?


00:14:53.920 --> 00:14:55.400
It's like a video game for programming.


00:14:55.400 --> 00:14:56.300
- I think I have.


00:14:56.300 --> 00:14:57.220
Yeah, I have, yeah.


00:14:57.220 --> 00:14:58.060
- Yeah, it's funky.


00:14:58.060 --> 00:15:00.020
So you basically, you have these little islands,


00:15:00.020 --> 00:15:01.920
you gotta conquer the islands and you go,


00:15:01.920 --> 00:15:03.900
the way you conquer them is by solving all the puzzles.


00:15:03.900 --> 00:15:06.100
It's a little bit like Myst, but programming.


00:15:06.100 --> 00:15:07.520
One of the things I think is really cool


00:15:07.520 --> 00:15:09.900
about playing the game actually is


00:15:09.900 --> 00:15:11.500
you solve some little puzzle


00:15:11.500 --> 00:15:13.380
and then you see how everybody else solved it.


00:15:13.380 --> 00:15:16.580
and then you get to see your style of programming


00:15:16.580 --> 00:15:18.180
relative to other solutions.


00:15:18.180 --> 00:15:19.380
- Yeah, and it's kind of like code reviews


00:15:19.380 --> 00:15:22.460
'cause you can comment on other people's solutions and stuff.


00:15:22.460 --> 00:15:23.540
- Yeah, so it's pretty cool.


00:15:23.540 --> 00:15:25.140
Yeah, so these guys wrote a blog post


00:15:25.140 --> 00:15:29.500
based on the mistakes they see people making from that area.


00:15:29.500 --> 00:15:31.100
They said, "10 common beginner mistakes."


00:15:31.100 --> 00:15:31.920
Let's go through them real quick.


00:15:31.920 --> 00:15:35.620
Incorrect indentation, tabs versus spaces, obvious,


00:15:35.620 --> 00:15:37.580
but you can imagine if you come from Java


00:15:37.580 --> 00:15:39.020
that you don't know that, right?


00:15:39.020 --> 00:15:40.260
This one's more subtle.


00:15:40.260 --> 00:15:42.760
Using a mutable value as a default value.


00:15:42.760 --> 00:15:47.520
So like, append to list, and then you give it like,


00:15:47.520 --> 00:15:51.760
source list equals bracket bracket as a default value.


00:15:51.760 --> 00:15:53.160
That is a super bad idea,


00:15:53.160 --> 00:15:56.480
but not at all obvious why it's bad, right?


00:15:56.480 --> 00:15:58.760
Because every time you call it


00:15:58.760 --> 00:16:02.400
without specifying that argument explicitly,


00:16:02.400 --> 00:16:04.940
it's going to use the same list.


00:16:04.940 --> 00:16:07.120
'Cause that is initialized at like,


00:16:07.120 --> 00:16:08.240
not quite compilation time,


00:16:08.240 --> 00:16:11.100
but as Python sees and determines that method,


00:16:11.100 --> 00:16:12.720
it finds that default value and sets it.


00:16:12.720 --> 00:16:15.360
it doesn't actually recompute it every call.


00:16:15.360 --> 00:16:16.800
- Yeah, that's a fun one.


00:16:16.800 --> 00:16:18.760
- Yeah, it's definitely fun and tricky.


00:16:18.760 --> 00:16:20.520
Write a lot of comments in doc strings.


00:16:20.520 --> 00:16:24.120
You know, my theory is comments, not so much doc strings,


00:16:24.120 --> 00:16:27.440
but comments are deodorant for code smells and problems.


00:16:27.440 --> 00:16:30.040
So I'm not so sure I'm gonna recommend that as much,


00:16:30.040 --> 00:16:32.200
but documentation, good stuff for sure.


00:16:32.200 --> 00:16:34.960
Scoping, you know, if you come from a C-based language


00:16:34.960 --> 00:16:37.880
with curly brace scoping, block scoping,


00:16:37.880 --> 00:16:39.560
Python is different with its functions,


00:16:39.560 --> 00:16:41.680
scoping and closures and whatnot.


00:16:41.680 --> 00:16:44.360
So that's definitely a mistake to be made.


00:16:44.360 --> 00:16:45.760
One that I really love they covered


00:16:45.760 --> 00:16:47.840
is called edge cases first.


00:16:47.840 --> 00:16:51.400
And you could have like a loop with a test


00:16:51.400 --> 00:16:52.960
that does another loop with another test


00:16:52.960 --> 00:16:55.080
and it could be some super indented thing


00:16:55.080 --> 00:16:58.320
or you could do the negative test,


00:16:58.320 --> 00:17:00.080
the edge case that you're gonna break out of


00:17:00.080 --> 00:17:00.920
and then the loop.


00:17:00.920 --> 00:17:01.760
And then you're gonna do the edge case


00:17:01.760 --> 00:17:03.760
you're gonna break out of and then the inner loop


00:17:03.760 --> 00:17:05.040
and it's way less indented.


00:17:05.040 --> 00:17:07.720
And that's one of the Zen of Python things


00:17:07.720 --> 00:17:09.800
but also just a great design pattern.


00:17:09.800 --> 00:17:12.560
I mean, if you utilize, I see a lot of that


00:17:12.560 --> 00:17:16.640
when people are used to old style C code or something,


00:17:16.640 --> 00:17:19.480
that they don't trust the exception handling.


00:17:19.480 --> 00:17:22.260
Oftentimes you don't have to check for,


00:17:22.260 --> 00:17:23.960
you don't have to make things bulletproof


00:17:23.960 --> 00:17:25.480
if the function you're calling


00:17:25.480 --> 00:17:27.240
is gonna check it for you anyway.


00:17:27.240 --> 00:17:29.620
- Exactly, the easier to ask for forgiveness


00:17:29.620 --> 00:17:31.000
than for permission style


00:17:31.000 --> 00:17:33.000
is better than the look before you leap.


00:17:33.000 --> 00:17:35.420
We got copying, everything is a pointer in Python.


00:17:35.420 --> 00:17:38.560
So the pointers means you may be sharing the same object,


00:17:38.560 --> 00:17:40.360
not a new one, so it talks about that,


00:17:40.360 --> 00:17:42.960
especially around the lists and data structures.


00:17:42.960 --> 00:17:45.600
Range is half closed, range one to 10


00:17:45.600 --> 00:17:47.920
actually is one to nine.


00:17:47.920 --> 00:17:49.740
Wrong capitalization, so you're just writing


00:17:49.740 --> 00:17:53.620
like camel case, Java, C# style,


00:17:53.620 --> 00:17:57.880
or some JavaScript style of naming for variables,


00:17:57.880 --> 00:17:59.960
classes, functions, whatever.


00:17:59.960 --> 00:18:03.240
And then finally, using class variables incorrectly.


00:18:03.240 --> 00:18:04.600
This one's a little bit interesting


00:18:04.600 --> 00:18:07.360
about class level variables and inheritance,


00:18:07.360 --> 00:18:08.200
and you can check that out,


00:18:08.200 --> 00:18:10.240
They have nice little examples for all of them.


00:18:10.240 --> 00:18:13.000
And as far as I could tell, there's only nine mistakes.


00:18:13.000 --> 00:18:14.520
So I'm not sure what the 10th mistake is,


00:18:14.520 --> 00:18:16.320
but maybe I read it wrong.


00:18:16.320 --> 00:18:17.160
I read it twice.


00:18:17.160 --> 00:18:17.980
I didn't see it.


00:18:17.980 --> 00:18:18.820
So could be tired.


00:18:18.820 --> 00:18:21.880
- Well, I mean, if the range is one to nine, if it's-


00:18:21.880 --> 00:18:22.700
- Yeah, that's true.


00:18:22.700 --> 00:18:24.600
It could be range, range one to 10


00:18:24.600 --> 00:18:26.200
common beginner mistakes in Python.


00:18:26.200 --> 00:18:27.040
Yeah. - Yeah.


00:18:27.040 --> 00:18:28.160
(Luke laughs)


00:18:28.160 --> 00:18:29.000
- Perfect.


00:18:29.000 --> 00:18:31.080
All right, so anyway, if you're getting started in Python


00:18:31.080 --> 00:18:33.160
and you want to kind of level it up a little bit,


00:18:33.160 --> 00:18:34.040
you know, check that out.


00:18:34.040 --> 00:18:36.380
Or if you're working with new developers


00:18:36.380 --> 00:18:39.180
mentoring new people, this is all good information.


00:18:39.180 --> 00:18:41.380
- Yeah, and also if you got somebody that works for you


00:18:41.380 --> 00:18:43.920
that's on Check.io at their lunch break,


00:18:43.920 --> 00:18:46.460
they're not just goofing off, they're upskilling.


00:18:46.460 --> 00:18:48.420
- That's right, let 'em goof off on Check.io.


00:18:48.420 --> 00:18:51.020
That's one of the best possible options.


00:18:51.020 --> 00:18:52.060
Beats Facebook every day.


00:18:52.060 --> 00:18:54.420
- That's our sixth, do you got any news for us?


00:18:54.420 --> 00:18:56.220
- I do, I have two pieces of news


00:18:56.220 --> 00:18:57.700
or ideas I wanted to run by you.


00:18:57.700 --> 00:19:00.220
First, have you tried Firefox Quantum,


00:19:00.220 --> 00:19:01.980
the brand new Firefox that came out yesterday?


00:19:01.980 --> 00:19:02.820
- No.


00:19:02.820 --> 00:19:04.120
- It's supposed to be twice as fast.


00:19:04.120 --> 00:19:06.440
A lot of it's rewritten in Rust.


00:19:06.440 --> 00:19:09.600
Use way less memory than Chrome.


00:19:09.600 --> 00:19:11.040
So these are all pretty exciting.


00:19:11.040 --> 00:19:12.880
So I'm actually checking out Firefox Quantum.


00:19:12.880 --> 00:19:14.880
I'm doing even the show from it this week.


00:19:14.880 --> 00:19:15.880
Pretty cool.


00:19:15.880 --> 00:19:18.700
So yeah, if that sounds interesting to you, check it out.


00:19:18.700 --> 00:19:21.060
It sounds like Firefox might make a good comeback.


00:19:21.060 --> 00:19:23.620
And they're definitely the most open source friendly


00:19:23.620 --> 00:19:24.460
of all the browsers.


00:19:24.460 --> 00:19:26.460
So I love to see them actually alive.


00:19:26.460 --> 00:19:31.160
- Rust is that language that I'm always meaning


00:19:31.160 --> 00:19:33.280
to try to look at, but I haven't yet.


00:19:33.280 --> 00:19:35.720
- Yeah, well it's getting dark and cold and rainy


00:19:35.720 --> 00:19:36.560
here in Portland.


00:19:36.560 --> 00:19:37.640
Maybe you have like a Sunday afternoon,


00:19:37.640 --> 00:19:38.840
you're like, you know, I just need to get a book


00:19:38.840 --> 00:19:40.080
and just sit by the fire.


00:19:40.080 --> 00:19:42.520
- Yeah, and rain and rust go together really well, so.


00:19:42.520 --> 00:19:44.920
- They do, you can start with like some regular metal,


00:19:44.920 --> 00:19:47.080
put it outside, by the time you know rust, it'll be rust.


00:19:47.080 --> 00:19:48.200
It's all gonna go together great.


00:19:48.200 --> 00:19:49.040
- It's good.


00:19:49.040 --> 00:19:51.300
- So the other thing I wanted to run by you is,


00:19:51.300 --> 00:19:55.480
by everybody is, how interested would people out there be


00:19:55.480 --> 00:20:00.080
in having an Amazon Flash Briefing that is this show?


00:20:00.080 --> 00:20:01.160
Right, so what I'm talking about,


00:20:01.160 --> 00:20:03.720
if you don't have an Amazon Echo,


00:20:03.720 --> 00:20:05.640
there's a way to ask it in the morning.


00:20:05.640 --> 00:20:06.560
You could ask it whenever,


00:20:06.560 --> 00:20:08.040
but I think the idea is in the morning.


00:20:08.040 --> 00:20:10.240
Like, "Hey, what's my news today


00:20:10.240 --> 00:20:11.800
"while I'm brushing my teeth,


00:20:11.800 --> 00:20:13.560
"getting ready for work," whatever, right?


00:20:13.560 --> 00:20:14.600
Or just sat down at my desk


00:20:14.600 --> 00:20:16.320
and I'm not really ready to work yet.


00:20:16.320 --> 00:20:17.880
You could ask for your flash briefing


00:20:17.880 --> 00:20:19.540
and you can configure different sources


00:20:19.540 --> 00:20:22.760
like Reuters or NPR or whatever.


00:20:22.760 --> 00:20:24.360
And I was thinking it might be really fun


00:20:24.360 --> 00:20:25.760
if we took our little items


00:20:25.760 --> 00:20:29.220
and shipped one of them per day as a flash briefing.


00:20:29.220 --> 00:20:31.020
I think then every day somebody would have,


00:20:31.020 --> 00:20:32.820
people to have a thing that we talk about


00:20:32.820 --> 00:20:34.180
for a couple of minutes for Python.


00:20:34.180 --> 00:20:35.020
- Yeah, we should do that.


00:20:35.020 --> 00:20:35.840
- Sound fun.


00:20:35.840 --> 00:20:36.820
So if people are super into this,


00:20:36.820 --> 00:20:39.020
send us an email or something on Twitter and let us know.


00:20:39.020 --> 00:20:39.860
- Yeah, let us know.


00:20:39.860 --> 00:20:41.220
- Yeah, if not, then I won't write it.


00:20:41.220 --> 00:20:43.540
- If we do it, then I can get a,


00:20:43.540 --> 00:20:46.380
like an Amazon device as a business expense.


00:20:46.380 --> 00:20:48.120
- Absolutely, I think that's totally great.


00:20:48.120 --> 00:20:50.540
Yeah, so the Echo Dot,


00:20:50.540 --> 00:20:53.380
it just as functional as the full expensive one,


00:20:53.380 --> 00:20:54.680
it's just the speakers aren't as good,


00:20:54.680 --> 00:20:57.460
but it's like 45, 50 bucks for one of those things.


00:20:57.460 --> 00:20:58.380
It's not outrageous.


00:20:58.380 --> 00:21:00.500
- Yeah, and everybody's got them on sale


00:21:00.500 --> 00:21:02.000
for the after Thanksgiving thing.


00:21:02.000 --> 00:21:02.840
- Yeah, that's right.


00:21:02.840 --> 00:21:03.660
It's coming up.


00:21:03.660 --> 00:21:04.500
All right, cool.


00:21:04.500 --> 00:21:05.320
Well, that's all I have for us.


00:21:05.320 --> 00:21:06.160
- Yeah, me too.


00:21:06.160 --> 00:21:07.180
- Yeah, so just once again,


00:21:07.180 --> 00:21:10.320
thank you everybody for helping the show be one year old.


00:21:10.320 --> 00:21:11.160
It's really awesome.


00:21:11.160 --> 00:21:11.980
- Yeah, thanks.


00:21:11.980 --> 00:21:12.820
- Yep, and thanks, Brian.


00:21:12.820 --> 00:21:13.660
Catch you next time.


00:21:13.660 --> 00:21:16.740
Thank you for listening to Python Bytes.


00:21:16.740 --> 00:21:19.220
Follow the show on Twitter via @PythonBytes.


00:21:19.220 --> 00:21:22.420
That's Python Bytes as in B-Y-T-E-S.


00:21:22.420 --> 00:21:25.780
And get the full show notes at PythonBytes.fm.


00:21:25.780 --> 00:21:27.420
If you have a news item you want featured,


00:21:27.420 --> 00:21:29.860
just visit PythonBytes.fm and send it our way.


00:21:29.860 --> 00:21:33.020
we're always on the lookout for sharing something cool.


00:21:33.020 --> 00:21:34.860
On behalf of myself and Brian Okken,


00:21:34.860 --> 00:21:36.380
this is Michael Kennedy.


00:21:36.380 --> 00:21:38.380
Thank you for listening and sharing this podcast


00:21:38.380 --> 00:21:40.020
with your friends and colleagues.

