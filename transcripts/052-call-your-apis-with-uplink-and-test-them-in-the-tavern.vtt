WEBVTT

00:00:00.001 --> 00:00:05.680
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.680 --> 00:00:11.600
This is episode 52, recorded November 15th, 2017. I'm Michael Kennedy.

00:00:11.600 --> 00:00:12.540
And I'm Brian Okken.

00:00:12.540 --> 00:00:16.420
And we got some awesome news for you. But hey, Brian, just want to say happy birthday, man.

00:00:16.420 --> 00:00:17.820
Oh, yeah. Happy birthday.

00:00:17.820 --> 00:00:22.900
Yeah. So this is the 52nd episode of Python Bytes. And if I recall, I don't think we skipped.

00:00:22.900 --> 00:00:28.160
I'm pretty sure we did not skip a single episode. We shipped the entire first year.

00:00:28.160 --> 00:00:30.360
We shipped an episode every week. And I think that's pretty awesome.

00:00:30.360 --> 00:00:32.240
That is cool. Even around Christmas and stuff?

00:00:32.240 --> 00:00:37.600
Yeah. I think we somehow recorded ahead. Or maybe we missed one. But I think we did it.

00:00:37.600 --> 00:00:37.840
Okay.

00:00:37.840 --> 00:00:42.700
So pretty exciting. And I just want to say thank you to everybody out there who listens to the show on a weekly basis.

00:00:42.700 --> 00:00:46.920
That's why we do it. We do it for you guys. And we wouldn't do it if you weren't interested and excited.

00:00:46.920 --> 00:00:50.580
So thank you for appreciating this, giving us all the ideas and keeping us going.

00:00:50.580 --> 00:00:56.400
Yeah, definitely. Thank you. And we had a whole bunch backed up. So this episode is two hours long and it has 52 topics.

00:00:56.400 --> 00:01:01.840
That's right. So you guys, just pause it now, get a coffee, settle in, or whiskey if it's late.

00:01:01.840 --> 00:01:05.420
No. Actually, we're going to keep to the same format. All right. Cool.

00:01:05.420 --> 00:01:09.960
So before we get to our topics, though, I just want to say thank you again to Digital Ocean as well.

00:01:09.960 --> 00:01:13.280
They're another reason that this show is going strong.

00:01:13.280 --> 00:01:18.080
Digital Ocean, Rollbar, and a few of the other folks that continuously support this show.

00:01:18.080 --> 00:01:19.000
Thank you. Thank you.

00:01:19.000 --> 00:01:23.680
They just launched Spaces. Check it out at do.co slash Python.

00:01:23.800 --> 00:01:27.320
Tell you more about it later. Right now, I want to spend a while on APIs, Brian.

00:01:27.320 --> 00:01:35.600
Yeah, I've got APIs on the brain right now. So we'll start with a new project. I don't know if it's new, actually. A project called Tavern.

00:01:35.600 --> 00:01:37.060
It's like a drinking game or something?

00:01:38.320 --> 00:01:45.240
No, it's testing RESTful APIs. So I don't know why it's called Tavern. I'll have to ask him about that.

00:01:45.240 --> 00:01:48.180
It's a really cool project, though. I checked it out. I like it a lot, actually.

00:01:48.360 --> 00:02:06.780
Yeah, so it's at tavern testing dot GitHub dot IO. Like I said, it's a RESTful API testing. And what it reminds me of the most is PyREST test, because it uses a YAML format to describe the tests and describe what sequences to go through.

00:02:06.880 --> 00:02:17.000
So it does have like one off tests where you could just either post or gets from a URL and then determines whether or not. And you can specify what you want out of it.

00:02:17.120 --> 00:02:27.280
But you can also do sequences. And one of my favorite things about this is it comes with a pytest plugin and they say it works best with integrated with pytest.

00:02:27.280 --> 00:02:37.860
That's really awesome. So you basically describe, I want you to call this URL. It's going to be a get and you expect to get kind of this thing back and then you can just assert against it. Is that how it works?

00:02:37.860 --> 00:02:47.060
With the YAML syntax, you don't even have to specify asserts. You just specify what you expect to get back. And it just automatically tests for all that.

00:02:47.060 --> 00:02:54.840
For things like this, I actually I really like, even though it takes up a lot of space, the YAML takes a lot more space than like a little test function.

00:02:55.040 --> 00:03:09.000
But it's very readable, especially if you have if you have an editor that colorizes your YAML files. And I think it's good for especially you can discuss it with non programmer people. So that's one of the benefits of that.

00:03:09.000 --> 00:03:19.260
OK, yeah, that's really cool. Yeah, that's true. You can give a YAML file to a non technical person who is like sort of a requirements gatherer, business analyst or something or domain expert.

00:03:19.260 --> 00:03:24.040
They can say, yeah, OK, these are the things that let's slot in here. Right. Or to the person who built the API.

00:03:24.280 --> 00:03:30.660
Like, for instance, the sequences, you can say, OK, here's the kind of the test is called this. And this is sort of the sequence we're going to go through.

00:03:30.660 --> 00:03:42.160
First, you log in and then you have to do this. And there is also with a lot of sequences, you have to collect get information like tokens or something from from the server.

00:03:42.160 --> 00:03:50.260
And Tavern allows you to save those tokens as variable names to use later in later tests, which is nice.

00:03:50.260 --> 00:03:53.920
Yeah, that's really sweet. That's Tavern. Tavern sounds really cool. Definitely worth checking out.

00:03:53.920 --> 00:03:59.400
The thing I want to talk about is not for testing APIs, but consuming APIs, calling APIs.

00:03:59.400 --> 00:04:05.820
What if you weren't looking at this document or sharing, just like thinking of like, hey, I'm going to call an API from Python.

00:04:05.820 --> 00:04:08.260
What library do you think you would use? Oh, requests.

00:04:08.260 --> 00:04:14.960
Obviously, everyone uses requests and requests is one of the absolute most popular libraries since downloaded an insane number of times.

00:04:14.960 --> 00:04:20.580
What I find myself doing a lot when I know this is like a proper API I'm going to consume.

00:04:20.580 --> 00:04:30.880
It's part of an application or I'm going to fold it in and make it really important is I'll create like a class or some module that will model all the actions that you take against that API.

00:04:30.880 --> 00:04:36.280
Right. Like log in or, you know, get courses or whatever your API is about.

00:04:36.280 --> 00:04:39.460
Right. And you sort of put use requests to implement it.

00:04:39.460 --> 00:04:46.760
But deep down, you know, you kind of bury requests and hopefully you've got some like facade sort of class or module in front of it.

00:04:47.000 --> 00:04:55.180
So I want to talk about this sort of up and coming project that does that all at once for you, which is really sweet.

00:04:55.180 --> 00:04:59.180
And it uses it with decorators called Uplink. Have you heard of Uplink?

00:04:59.180 --> 00:05:02.100
Not until you listed it today, but it looks really cool.

00:05:02.100 --> 00:05:04.800
It's super cool. Right. So let me just describe like real quick how you use this.

00:05:04.800 --> 00:05:06.620
So imagine I want to call the GitHub API.

00:05:06.620 --> 00:05:13.800
I need to have a header on all my requests that says I'm using this particular format or schema for my JSON.

00:05:13.800 --> 00:05:16.360
I'm going to call the get users function.

00:05:16.640 --> 00:05:18.020
I might update a user and so on.

00:05:18.020 --> 00:05:23.480
So what I do is I create a class, call it whatever you want, derived from a certain base class that comes from Uplink.

00:05:23.480 --> 00:05:26.420
I had to add headers decorator to the class.

00:05:26.420 --> 00:05:29.900
I say accept the right funky content type.

00:05:29.900 --> 00:05:32.800
And that just applies to all the functions you call on this class.

00:05:32.800 --> 00:05:36.440
If I want to get the users, I'd say create a function called get user.

00:05:36.440 --> 00:05:41.440
And I'd say at get slash users slash curly username.

00:05:41.440 --> 00:05:44.380
And that curly username there maps to the argument.

00:05:44.480 --> 00:05:46.980
So when I call it, I say GitHub dot get user.

00:05:46.980 --> 00:05:49.260
Yeah, Mike C. Kennedy is my username there.

00:05:49.400 --> 00:05:54.120
And it actually directly pulls that into the little URL in the decorator and passes it.

00:05:54.120 --> 00:05:55.020
Oh, this is cool.

00:05:55.020 --> 00:05:55.780
That is cool, right?

00:05:55.780 --> 00:05:58.240
And they have another example for updating a user.

00:05:58.240 --> 00:05:59.260
That's a patch call.

00:05:59.260 --> 00:06:01.060
So you say at JSON at patch.

00:06:01.580 --> 00:06:09.080
And then the arguments to the method, you can pass in just like a body of basically KW args.

00:06:09.080 --> 00:06:12.220
And that becomes the body of the patch submission.

00:06:12.220 --> 00:06:19.600
You can also say access token colon query and use the type decorator in Python 3 to decorate as a query.

00:06:19.600 --> 00:06:23.940
So then I'll go question mark access token equals what you pass as that argument.

00:06:23.940 --> 00:06:25.520
This is so smooth.

00:06:25.520 --> 00:06:25.840
Wow.

00:06:25.840 --> 00:06:26.960
I really like it.

00:06:26.960 --> 00:06:33.300
So if I'm building like a super structured API that's got really strict, restful requirements like this, I'm definitely going to check out Uplink.

00:06:33.300 --> 00:06:34.560
I'm going to definitely watch this.

00:06:34.560 --> 00:06:35.100
This is neat.

00:06:35.100 --> 00:06:39.420
They have a little warning in there that says that it's in the early stages.

00:06:40.520 --> 00:06:45.940
But that might be a great way for other people to get involved if they want to help out and push this further.

00:06:45.940 --> 00:06:46.420
Absolutely.

00:06:46.420 --> 00:06:48.700
So that's definitely a warning you want to be careful about.

00:06:48.700 --> 00:06:54.600
They say it's not quite production ready, mostly not because it doesn't work, but because they think the API may change.

00:06:54.600 --> 00:06:55.860
They don't want to break your code.

00:06:55.860 --> 00:06:58.980
So I think that there's an opportunity here.

00:06:58.980 --> 00:07:01.500
There are so many people that say, I really want to get started open source.

00:07:01.500 --> 00:07:03.960
And they look at Django or CPython.

00:07:03.960 --> 00:07:05.440
I'm like, whoa, this is complicated.

00:07:05.440 --> 00:07:07.040
And changing this is really hard.

00:07:07.520 --> 00:07:13.160
Something like this, you could totally contribute to a project like this without getting overwhelmed in the early stages.

00:07:13.160 --> 00:07:13.780
So check it out.

00:07:13.780 --> 00:07:14.360
Yeah, definitely.

00:07:14.360 --> 00:07:14.680
Cool.

00:07:14.680 --> 00:07:14.900
All right.

00:07:14.900 --> 00:07:18.660
So let's switch to a totally different topic and talk about REST and APIs.

00:07:18.660 --> 00:07:20.760
Yeah.

00:07:20.760 --> 00:07:21.300
Yeah.

00:07:21.300 --> 00:07:26.800
So I wanted actually to combine these two things because I ran across them in the same week for one.

00:07:26.800 --> 00:07:29.500
And this was shared by a listener.

00:07:29.500 --> 00:07:31.980
And I'm sorry that I didn't write down the name.

00:07:31.980 --> 00:07:33.160
But yeah, thank you for submitting that.

00:07:33.160 --> 00:07:33.580
That's awesome.

00:07:33.580 --> 00:07:34.980
I saw that coming as well over email.

00:07:34.980 --> 00:07:44.620
There's an article called, I've got it turned around, using JSON schema, which I hadn't heard of before, using JSON schema for REST API endpoint testing.

00:07:44.620 --> 00:07:48.600
And the idea, had you heard of JSON schema before?

00:07:48.600 --> 00:07:50.100
I have heard of JSON schema.

00:07:50.100 --> 00:07:54.340
It's basically a way to say my, it's kind of like what your test does, but at a different level.

00:07:54.340 --> 00:07:56.320
You say, this is what the JSON is supposed to look like.

00:07:56.320 --> 00:07:57.180
This is supposed to be an integer.

00:07:57.180 --> 00:07:59.540
This is supposed to be a string and so on.

00:07:59.540 --> 00:08:00.520
But I haven't ever used it.

00:08:00.520 --> 00:08:02.820
So like, I pretty much have exhausted my knowledge of it now.

00:08:02.820 --> 00:08:07.280
The example of it, they do a Django, which I don't really know Django.

00:08:07.280 --> 00:08:10.740
So I kind of read that anyway, but I don't think that's necessary.

00:08:10.740 --> 00:08:12.000
I think you could use this for anything.

00:08:12.000 --> 00:08:21.300
But the idea is you can implement a schema to describe what your data should look like and then actually serve that within.

00:08:21.500 --> 00:08:25.480
So within your, on your server code, serve that as well.

00:08:25.480 --> 00:08:37.420
And then for your tests, you can grab the schema and then grab, grab whatever data you wanted and validate, use a test to validate that the data you're getting it adheres to the schema.

00:08:37.420 --> 00:08:41.700
And then you can also go out and make sure the values are correct and things like that.

00:08:41.840 --> 00:08:44.120
But actually, I'm just curious what you think of this.

00:08:44.120 --> 00:08:50.960
I think it's pretty cool, actually, especially if the API already has a JSON schema associated with it.

00:08:50.960 --> 00:08:51.440
Right.

00:08:51.440 --> 00:08:56.140
Like if they're like, here's the schema, here's the API, then you could just, okay, and here's how I test.

00:08:56.140 --> 00:09:01.300
You know, one thing that might be interesting is like, it's interesting if you are the maintainer of that thing.

00:09:01.680 --> 00:09:09.080
So that, you know, if the test break that you're verifying, you have to go and update the documentation or something like this.

00:09:09.080 --> 00:09:18.280
But it's also interesting, I think, to point it at APIs you depend upon and say, I'm going to call this and I want to know if the schema changes.

00:09:18.280 --> 00:09:25.480
Because it's totally common that people will document one API, the API will change, your stuff will stop working.

00:09:25.480 --> 00:09:27.440
You're like, but I'm doing what they say.

00:09:27.440 --> 00:09:29.220
It's like, you know, what has happened, right?

00:09:29.220 --> 00:09:34.220
So if you knew the schema of APIs you depended upon changed, this is a good way to do that.

00:09:34.220 --> 00:09:35.040
I think that'd be great.

00:09:35.040 --> 00:09:35.240
Yeah.

00:09:35.240 --> 00:09:39.780
Or you could even, I mean, even if you didn't have a schema provided to you, you could define one for.

00:09:39.780 --> 00:09:40.080
Yeah.

00:09:40.080 --> 00:09:41.300
It's usually not too hard, right?

00:09:41.300 --> 00:09:42.340
Actually, that's a great idea.

00:09:42.340 --> 00:09:46.840
And another thought with that is that it's not just RESTful APIs.

00:09:46.840 --> 00:09:51.320
You can, anything that's using JSON, you can use that to test any API.

00:09:51.320 --> 00:09:51.720
So.

00:09:51.720 --> 00:09:52.240
Yeah, definitely.

00:09:52.240 --> 00:09:52.760
It's very neat.

00:09:52.760 --> 00:09:54.420
So check that out as well.

00:09:54.420 --> 00:09:55.380
All right.

00:09:55.380 --> 00:09:59.200
Before we get on to the next thing, I want to tell you where your audio came from.

00:09:59.200 --> 00:10:01.980
It came from DigitalOcean Spaces.

00:10:01.980 --> 00:10:03.540
So that's right.

00:10:03.540 --> 00:10:04.700
Those guys are sponsoring this episode.

00:10:04.700 --> 00:10:08.780
As I said at the top of the show, check them out at do.co slash Python.

00:10:08.780 --> 00:10:10.740
Get a free two month trial of Spaces.

00:10:10.740 --> 00:10:14.820
And Spaces is object storage and delivery in the cloud.

00:10:14.820 --> 00:10:17.520
You know, things like AWS or Azure Blob Storage.

00:10:17.520 --> 00:10:20.300
Sorry, AWS S3, Azure Blob Storage.

00:10:20.440 --> 00:10:21.000
Things like that.

00:10:21.000 --> 00:10:22.660
But way, way better.

00:10:22.660 --> 00:10:23.620
Better pricing.

00:10:23.620 --> 00:10:24.880
Simpler.

00:10:24.880 --> 00:10:25.860
Things like this.

00:10:25.860 --> 00:10:28.780
So I've been using it for this podcast.

00:10:28.780 --> 00:10:35.880
I just recently, big announcement, switched to using it as the video delivery network for my courses.

00:10:36.160 --> 00:10:37.700
So I'm trying that out on a few courses.

00:10:37.700 --> 00:10:40.180
And that's been super, super smooth as well.

00:10:40.180 --> 00:10:48.700
And what's really interesting, the way that I wrote the API for accessing the video files and stuff was I imported Voto 3.

00:10:49.220 --> 00:10:51.740
That's the S3 AWS API.

00:10:51.740 --> 00:10:54.940
So the API is compatible with S3, like quite literally.

00:10:54.940 --> 00:10:56.680
It's the same API even.

00:10:56.680 --> 00:11:00.000
Just pointed at some different base URL and you're good to go.

00:11:00.000 --> 00:11:04.620
So if you've been using something like S3, you really owe it to yourself to check out DigitalOcean Spaces.

00:11:04.620 --> 00:11:06.800
And do.co slash Python.

00:11:06.800 --> 00:11:07.940
Very cool stuff.

00:11:07.940 --> 00:11:08.680
Yeah, very neat.

00:11:08.680 --> 00:11:11.400
And cool that you tried that out, that the API is compatible.

00:11:11.400 --> 00:11:12.980
So far it's working really well.

00:11:12.980 --> 00:11:15.100
I was thinking that some music could be nice.

00:11:15.100 --> 00:11:16.980
I love to listen to music when I code.

00:11:16.980 --> 00:11:17.220
Do you?

00:11:17.220 --> 00:11:18.160
Yeah, all the time.

00:11:18.160 --> 00:11:18.520
It's funny.

00:11:18.640 --> 00:11:22.560
I find like a little bit of distraction kind of helps keep the mind focused.

00:11:22.560 --> 00:11:22.940
I don't know.

00:11:22.940 --> 00:11:23.960
People are weird that way.

00:11:23.960 --> 00:11:25.480
I work in coffee shops as well.

00:11:25.480 --> 00:11:26.780
And I like that as well.

00:11:26.780 --> 00:11:30.480
But this is a different kind of music to coding.

00:11:30.480 --> 00:11:34.060
So this is almost like music as performance art.

00:11:34.060 --> 00:11:40.340
So there's this presentation called Programming Music for Performance, Live Coding with Fox Dot.

00:11:40.340 --> 00:11:44.200
This is by Ryan Kirkbride at PyCon UK.

00:11:44.200 --> 00:11:48.540
So this is a really short video, but maybe it will inspire some people to do.

00:11:48.540 --> 00:11:49.340
Some similar performances.

00:11:49.340 --> 00:11:49.920
And he's doing some similar performances.

00:11:49.920 --> 00:11:57.540
Basically, he's up there writing code to dramatic, electric, classical type music.

00:11:57.540 --> 00:12:00.700
And it's just, it's really interesting to see it go.

00:12:00.700 --> 00:12:01.660
What did you think of it, Brian?

00:12:01.660 --> 00:12:03.900
I thought it was really interesting, but I'm a little lost.

00:12:04.100 --> 00:12:06.380
So I was hoping you could explain to me what's going on.

00:12:06.380 --> 00:12:07.720
I wasn't at the talk.

00:12:07.720 --> 00:12:09.240
So the video is not that long.

00:12:09.240 --> 00:12:11.000
So I didn't see the introduction.

00:12:11.000 --> 00:12:17.660
But what I think it is, is it's like, I'm going to show you some cool thing by writing a demo live and do it.

00:12:17.660 --> 00:12:24.160
But instead of explaining it to you, I'm going to do it to a dramatic music and make it like a performance art.

00:12:24.160 --> 00:12:29.180
Remember how we talked about code is like poetry a while back?

00:12:29.300 --> 00:12:31.980
This is like code as performance art, I think.

00:12:31.980 --> 00:12:36.480
Yeah, I guess I'll have to check out what all FoxDot is and how that works with that.

00:12:36.480 --> 00:12:37.080
Yeah.

00:12:37.080 --> 00:12:37.480
Yeah.

00:12:37.480 --> 00:12:42.440
There's not, sadly, there's not that much information in this video because it's like partial and it's short.

00:12:42.440 --> 00:12:44.400
But this is from Ian Watt, another listener suggestion.

00:12:44.400 --> 00:12:47.120
And I thought it might inspire some of you guys out there.

00:12:47.120 --> 00:12:49.120
So just, you know, short, have a look at this little video.

00:12:49.120 --> 00:12:49.600
It's cool.

00:12:49.600 --> 00:12:51.160
But be sure to turn on the audio.

00:12:51.160 --> 00:12:53.900
Plus he did a talk without speaking, which is good.

00:12:53.900 --> 00:12:54.380
Exactly.

00:12:54.560 --> 00:12:57.000
We've talked about should you do live coding during your new demos.

00:12:57.000 --> 00:12:59.960
This is like the opposite of a should I do live coding.

00:12:59.960 --> 00:13:02.000
It's like only live coding and there's nothing else.

00:13:02.000 --> 00:13:02.840
There's not even words.

00:13:02.840 --> 00:13:03.140
Yeah.

00:13:03.140 --> 00:13:03.480
Yeah.

00:13:03.480 --> 00:13:04.080
That's good.

00:13:04.080 --> 00:13:05.360
That's awesome.

00:13:05.360 --> 00:13:08.780
But if we had like a weekly Python chat, there'd be words, right?

00:13:08.780 --> 00:13:11.380
There would be words and video and audio.

00:13:11.380 --> 00:13:11.720
All right.

00:13:11.720 --> 00:13:14.140
So tell us about what you got going on this weekly Python chat.

00:13:14.140 --> 00:13:15.420
I saw you were just on it, right?

00:13:15.420 --> 00:13:15.780
Yeah.

00:13:15.780 --> 00:13:16.100
Yeah.

00:13:16.100 --> 00:13:18.020
So it was super fun.

00:13:18.020 --> 00:13:22.240
So weekly Python chat is at, how did you get that?

00:13:22.320 --> 00:13:25.200
It's at weeklypython.chat.

00:13:25.200 --> 00:13:25.540
Nice.

00:13:25.540 --> 00:13:26.720
But it's Trey Hunter.

00:13:26.720 --> 00:13:32.660
And he's a, he's can't remember exactly what he does, but he's part of the Python software

00:13:32.660 --> 00:13:35.500
foundation, but he's also Python instructor.

00:13:35.500 --> 00:13:36.940
And he does quite a bit.

00:13:36.940 --> 00:13:37.820
He's a super nice guy.

00:13:37.820 --> 00:13:44.320
He has these weekly chats where he just picks somebody in the Python community and often requested

00:13:44.320 --> 00:13:50.440
by other people that listen and does like a little, like a under an hour or approximately

00:13:50.440 --> 00:13:52.920
an hour video chat with somebody else.

00:13:52.920 --> 00:13:57.620
But they're also, you can do live coding and then there's people in the chat room asking

00:13:57.620 --> 00:13:59.840
questions while it's going on.

00:13:59.840 --> 00:14:03.580
So it's a live thing, but then it's also recorded so you can watch old ones.

00:14:03.580 --> 00:14:08.800
So yeah, the last one last week on November 9th was a testing Python with pytest.

00:14:08.800 --> 00:14:10.500
So those with me.

00:14:10.500 --> 00:14:10.960
That's awesome.

00:14:10.960 --> 00:14:12.900
And I'm highlighting it because I want more.

00:14:12.900 --> 00:14:13.760
It's really cool.

00:14:13.760 --> 00:14:14.300
It's fun.

00:14:14.300 --> 00:14:19.140
It allows to ask questions of people that they wouldn't, maybe you don't go to conferences

00:14:19.140 --> 00:14:24.240
that much, but you could stay up for a weird hour or what, depending on your, where you

00:14:24.240 --> 00:14:28.820
live in the world, but you can ask questions of people you wouldn't get a chance to otherwise.

00:14:29.040 --> 00:14:30.020
So that's good.

00:14:30.020 --> 00:14:30.280
Yeah.

00:14:30.280 --> 00:14:30.680
Very cool.

00:14:30.680 --> 00:14:31.600
Nice.

00:14:31.600 --> 00:14:32.400
So yeah, check that out.

00:14:32.400 --> 00:14:33.720
We got the link in the show notes.

00:14:33.720 --> 00:14:36.280
So let's run this out with a bunch of mistakes.

00:14:36.280 --> 00:14:37.140
I think that's a good one.

00:14:37.140 --> 00:14:41.460
So our last topic is sort of, I think actually has a mistake in it.

00:14:41.460 --> 00:14:44.040
It's 10 common beginner mistakes in Python.

00:14:44.040 --> 00:14:50.700
So this comes to us from a blog post at a checkio.org or maybe better pull it up pi.checkio.org.

00:14:50.700 --> 00:14:53.580
Have you played with pi.checkio.org?

00:14:53.580 --> 00:14:55.160
It's like a video game for programming.

00:14:55.160 --> 00:14:56.220
I think I have.

00:14:56.220 --> 00:14:56.820
Yeah, I have.

00:14:56.820 --> 00:14:57.120
Yeah.

00:14:57.120 --> 00:14:57.360
Yeah.

00:14:57.360 --> 00:14:57.800
It's funky.

00:14:57.940 --> 00:15:01.760
So you basically, you have these little islands, you got to conquer the islands and you go,

00:15:01.760 --> 00:15:03.760
the way you conquer them is by solving all the puzzles.

00:15:03.760 --> 00:15:05.520
It's a little bit like Myst, but programming.

00:15:05.520 --> 00:15:10.920
One of the things I think is really cool about playing the game actually is you solve some

00:15:10.920 --> 00:15:13.180
little puzzle and then you see how everybody else solved it.

00:15:13.180 --> 00:15:17.920
And then you get to see your style of programming relative to other solutions.

00:15:17.920 --> 00:15:21.820
And it's kind of like code reviews because you can, you can comment on other people's solutions

00:15:21.820 --> 00:15:22.300
and stuff.

00:15:22.300 --> 00:15:22.580
Yeah.

00:15:22.580 --> 00:15:23.400
So it's pretty cool.

00:15:23.400 --> 00:15:23.660
Yeah.

00:15:23.680 --> 00:15:28.120
So these guys wrote a blog post based on the mistakes they see people making from that

00:15:28.120 --> 00:15:28.980
area.

00:15:28.980 --> 00:15:30.960
And they said 10 common beginner mistakes.

00:15:30.960 --> 00:15:31.780
So let's go through real quick.

00:15:31.780 --> 00:15:34.140
Incorrect indentation tabs versus spaces.

00:15:34.140 --> 00:15:35.180
Obvious.

00:15:35.440 --> 00:15:38.440
But you can imagine if you come from Java that you don't know that, right?

00:15:38.440 --> 00:15:42.660
This one's more subtle using a mutable value as a default value.

00:15:42.660 --> 00:15:50.040
So like, you know, append to list and then you give it like a source list equals bracket bracket

00:15:50.040 --> 00:15:51.240
as a default value.

00:15:51.240 --> 00:15:55.080
That is a super bad idea, but not at all obvious why it's bad.

00:15:55.080 --> 00:15:56.400
Right?

00:15:56.400 --> 00:16:02.720
Because every time you call it with, without specifying that argument explicitly, it's going

00:16:02.720 --> 00:16:08.180
to use the same list because that is initialized at like not quite compilation time.

00:16:08.180 --> 00:16:12.660
But as Python sees and determines that method, it finds that default value and sets it.

00:16:12.660 --> 00:16:15.220
It doesn't actually recompute it every call.

00:16:15.220 --> 00:16:15.480
Yeah.

00:16:15.480 --> 00:16:16.700
That's a, that's a fun one.

00:16:16.700 --> 00:16:16.940
Yeah.

00:16:16.940 --> 00:16:18.220
It's definitely fun and tricky.

00:16:18.220 --> 00:16:20.060
Write a lot of comments and doc strings.

00:16:20.060 --> 00:16:26.120
You know, my theory is comments, not so much doc strings, but comments are deodorant for

00:16:26.120 --> 00:16:27.300
code smells and problems.

00:16:27.300 --> 00:16:31.300
So I'm not so sure I'm going to recommend that as much, but documentation, good stuff

00:16:31.300 --> 00:16:31.760
for sure.

00:16:31.760 --> 00:16:37.360
Scoping, you know, if you come from a C based language with curly brace scoping, block scoping,

00:16:37.360 --> 00:16:41.500
Python is different with its functions, scoping and closures and whatnot.

00:16:41.500 --> 00:16:43.640
So that's definitely a mistake to be made.

00:16:43.640 --> 00:16:47.100
One that I really love they covered is called edge cases first.

00:16:47.740 --> 00:16:52.880
And you could have like a loop with a test that does another loop with another test.

00:16:52.880 --> 00:16:58.680
And it could be some super indented thing, or you could do the negative test, the edge

00:16:58.680 --> 00:17:00.820
case that you're going to break out of and then the loop.

00:17:00.820 --> 00:17:03.440
And then you're going to do the edge case you're going to break out of and then the inner

00:17:03.440 --> 00:17:03.660
loop.

00:17:03.660 --> 00:17:04.880
And it's way less indented.

00:17:04.880 --> 00:17:09.640
And, you know, that's one of the Xenopython things, but also just a great design pattern.

00:17:09.780 --> 00:17:15.680
I mean, if you utilize, I see a lot of that when people are used to old style C code or

00:17:15.680 --> 00:17:18.880
something that they don't trust the exception handling.

00:17:18.880 --> 00:17:24.260
Oftentimes you don't have to check for, you don't have to make things bulletproof if the

00:17:24.260 --> 00:17:27.100
function you're calling is going to check it for you anyway.

00:17:27.100 --> 00:17:27.640
Exactly.

00:17:27.640 --> 00:17:31.980
The easier to ask for forgiveness than for permission style is better than the look before

00:17:31.980 --> 00:17:32.280
you leap.

00:17:32.280 --> 00:17:33.580
We got copying.

00:17:33.580 --> 00:17:35.140
Everything is a pointer in Python.

00:17:35.140 --> 00:17:39.280
So the pointers means you may be sharing the same object, not a new one.

00:17:39.380 --> 00:17:42.320
So it talks about that, especially around the lists and data structures.

00:17:42.320 --> 00:17:44.420
Range is half closed.

00:17:44.420 --> 00:17:46.920
Range one to 10 actually is one to nine.

00:17:46.920 --> 00:17:48.880
Wrong capitalization.

00:17:48.880 --> 00:17:54.840
So you're just writing like camel case, Java, C# style, or some, you know, JavaScript

00:17:54.840 --> 00:17:59.040
style of naming for variables, classes, functions, whatever.

00:17:59.040 --> 00:18:02.460
And then finally, using class variables incorrectly.

00:18:02.460 --> 00:18:07.060
This one's a little bit interesting about class level variables and inheritance.

00:18:07.060 --> 00:18:08.120
And you can check that out.

00:18:08.140 --> 00:18:09.780
But they have nice little examples for all of them.

00:18:09.780 --> 00:18:12.560
And as far as I could tell, there's only nine mistakes.

00:18:12.560 --> 00:18:14.480
So I'm not sure what the 10th mistake is.

00:18:14.480 --> 00:18:16.300
But maybe I read it wrong.

00:18:16.300 --> 00:18:16.820
I read it twice.

00:18:16.820 --> 00:18:17.440
I didn't see it.

00:18:17.440 --> 00:18:18.440
So could be tired.

00:18:18.440 --> 00:18:22.040
Well, I mean, if the range is one to nine, if it's...

00:18:22.040 --> 00:18:22.520
Yeah, that's true.

00:18:22.520 --> 00:18:26.080
It could be range, range one to 10 common beginner mistakes in Python.

00:18:26.080 --> 00:18:26.340
Yeah.

00:18:26.340 --> 00:18:26.600
Yeah.

00:18:26.600 --> 00:18:28.400
Perfect.

00:18:28.400 --> 00:18:28.800
All right.

00:18:28.800 --> 00:18:32.840
So anyway, if you're getting started in Python, and you want to kind of level it up a little

00:18:32.840 --> 00:18:33.860
bit, you know, check that out.

00:18:33.860 --> 00:18:39.080
Or if you're working with new developers or mentoring new people, this is all good information.

00:18:39.080 --> 00:18:39.340
Yeah.

00:18:39.340 --> 00:18:43.860
And also, if you got somebody that works for you that's on Check.io at their lunch break,

00:18:43.860 --> 00:18:44.940
they're not just goofing off.

00:18:44.940 --> 00:18:45.820
They're upskilling.

00:18:45.820 --> 00:18:46.580
So...

00:18:46.580 --> 00:18:46.880
That's right.

00:18:46.880 --> 00:18:48.380
Let them goof off on Check.io.

00:18:48.380 --> 00:18:50.460
That's one of the best possible options.

00:18:50.460 --> 00:18:51.980
Beats Facebook every day.

00:18:51.980 --> 00:18:52.880
That's our six.

00:18:52.880 --> 00:18:54.280
Do you have any news for us?

00:18:54.280 --> 00:18:54.700
I do.

00:18:54.700 --> 00:18:57.700
I have two pieces of news or ideas I want to run by you.

00:18:57.700 --> 00:19:01.820
First, have you tried Firefox Quantum, the brand new Firefox that came out yesterday?

00:19:01.820 --> 00:19:02.320
No.

00:19:02.320 --> 00:19:03.860
It's supposed to be twice as fast.

00:19:03.860 --> 00:19:05.820
A lot of it's rewritten in Rust.

00:19:05.820 --> 00:19:08.900
Use a way, way less memory than Chrome.

00:19:08.900 --> 00:19:10.960
So these are all pretty exciting.

00:19:10.960 --> 00:19:12.800
So I'm actually checking out Firefox Quantum.

00:19:12.800 --> 00:19:14.800
I'm doing even the show from it this week.

00:19:14.800 --> 00:19:15.240
Pretty cool.

00:19:15.880 --> 00:19:18.440
So yeah, if that sounds interesting to you, check it out.

00:19:18.440 --> 00:19:20.880
It sounds like Firefox might make a good comeback.

00:19:20.880 --> 00:19:24.220
And they're definitely the most open source friendly of all the browsers.

00:19:24.220 --> 00:19:26.300
So I love to see them actually alive.

00:19:26.300 --> 00:19:33.020
Rust is that language that I'm always meaning to try to look at, but I haven't yet.

00:19:33.020 --> 00:19:33.500
Yeah.

00:19:33.500 --> 00:19:36.200
Well, it's getting dark and cold and rainy here in Portland.

00:19:36.200 --> 00:19:38.920
Maybe you have a Sunday afternoon and you're like, you know, I just need to get a book and

00:19:38.920 --> 00:19:39.900
just sit by the fire.

00:19:39.900 --> 00:19:40.260
Yeah.

00:19:40.260 --> 00:19:42.020
And rain and rust go together really well.

00:19:42.020 --> 00:19:42.980
They do.

00:19:42.980 --> 00:19:44.840
You can start with some regular metal.

00:19:44.960 --> 00:19:45.540
Put it outside.

00:19:45.540 --> 00:19:47.000
By the time you know rust, it'll be rust.

00:19:47.000 --> 00:19:48.120
It's all going to go together great.

00:19:48.120 --> 00:19:48.460
It's good.

00:19:48.460 --> 00:19:54.740
So the other thing I wanted to run by you is by everybody is how interested would people

00:19:54.740 --> 00:20:00.220
out there be in having an Amazon flash briefing that is this show, right?

00:20:00.220 --> 00:20:05.260
So what I'm talking about, if you don't have an Amazon Echo, there's a way to ask it in

00:20:05.260 --> 00:20:05.560
the morning.

00:20:05.560 --> 00:20:10.000
You could ask it whenever, but I think the idea is in the morning, like, hey, what's my news

00:20:10.000 --> 00:20:13.460
today while I'm brushing my teeth, you know, getting ready for work, whatever, right?

00:20:13.460 --> 00:20:15.800
Or just sit down at my desk and I'm not really ready to work yet.

00:20:15.800 --> 00:20:21.200
You could ask for your flash briefing and you can configure different sources like Reuters or

00:20:21.200 --> 00:20:22.240
NPR or whatever.

00:20:22.500 --> 00:20:26.740
And I was thinking it might be really fun if we took our little items and shipped one

00:20:26.740 --> 00:20:28.720
of them per day as a flash briefing.

00:20:28.720 --> 00:20:32.720
I think then every day somebody would have, people would have a thing that we talk about

00:20:32.720 --> 00:20:33.940
for a couple of minutes for Python.

00:20:33.940 --> 00:20:34.900
Yeah, we should do that.

00:20:34.900 --> 00:20:35.200
Sound fun.

00:20:35.200 --> 00:20:38.900
So if people are super into this, send us an email or something on Twitter and let us know.

00:20:38.900 --> 00:20:39.540
Yeah, let us know.

00:20:39.540 --> 00:20:39.740
Yeah.

00:20:39.740 --> 00:20:41.160
If not, then I won't write it.

00:20:41.160 --> 00:20:46.280
If we do it, then I can get a, like an Amazon device as a business expense.

00:20:46.280 --> 00:20:46.820
Absolutely.

00:20:46.820 --> 00:20:48.020
I think that's totally great.

00:20:48.020 --> 00:20:48.240
Yeah.

00:20:48.240 --> 00:20:53.260
So the Echo Dot, it just as functional as the full expensive one.

00:20:53.260 --> 00:20:57.360
It's just the speakers aren't as good, but it's like 45, 50 bucks for one of those things.

00:20:57.360 --> 00:20:58.100
It's not outrageous.

00:20:58.100 --> 00:20:58.620
Yeah.

00:20:58.620 --> 00:21:01.840
And everybody's got them on sale for the after Thanksgiving thing.

00:21:01.840 --> 00:21:02.540
Yeah, that's right.

00:21:02.540 --> 00:21:03.260
It's coming up.

00:21:03.260 --> 00:21:03.980
All right, cool.

00:21:03.980 --> 00:21:05.100
Well, that's all I have for us.

00:21:05.100 --> 00:21:05.760
Yeah, me too.

00:21:05.760 --> 00:21:10.240
Yeah, so just once again, thank you everybody for helping the show be one year old.

00:21:10.240 --> 00:21:10.820
It's really awesome.

00:21:10.820 --> 00:21:11.660
Yeah, thanks.

00:21:11.660 --> 00:21:11.920
Yep.

00:21:11.920 --> 00:21:12.460
And thanks, Brian.

00:21:12.460 --> 00:21:13.320
Catch you next time.

00:21:13.320 --> 00:21:16.520
Thank you for listening to Python Bytes.

00:21:16.520 --> 00:21:19.080
Follow the show on Twitter via at Python Bytes.

00:21:19.080 --> 00:21:21.980
That's Python Bytes as in B-Y-T-E-S.

00:21:21.980 --> 00:21:25.420
And get the full show notes at Pythonbytes.fm.

00:21:25.420 --> 00:21:29.740
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:21:29.740 --> 00:21:32.440
We're always on the lookout for sharing something cool.

00:21:32.660 --> 00:21:35.840
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:35.840 --> 00:21:39.460
Thank you for listening and sharing this podcast with your friends and colleagues.

