
00:00:00.000 --> 00:00:06.080
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:06.080 --> 00:00:09.100
177 recorded April 8th


00:00:09.100 --> 00:00:15.060
2020 I'm Michael Kennedy and I'm Brian Okken and this episode is brought to you by Datadog check them out at Python bytes


00:00:15.060 --> 00:00:22.160
Fm slash Datadog more on that later Brian. Can you believe that it's April? I really can't it doesn't feel like it


00:00:22.160 --> 00:00:25.520
I know I feel like we're still kind of in the winter mode and yet it's warm and sunny


00:00:25.520 --> 00:00:28.340
For the first time in seven months. I've been told yeah


00:00:28.340 --> 00:00:29.480
- Yeah, well I'm doing yard work,


00:00:29.480 --> 00:00:32.540
but it was just sort of feel like we're gonna skip Easter.


00:00:32.540 --> 00:00:33.980
I don't know what's going on there.


00:00:33.980 --> 00:00:35.220
- Yeah, it's crazy times,


00:00:35.220 --> 00:00:38.160
but at least it's warming up out there and that's lovely.


00:00:38.160 --> 00:00:40.140
So before we get into our main items,


00:00:40.140 --> 00:00:41.780
I have a very exciting announcement


00:00:41.780 --> 00:00:45.320
that we were just working on to let everyone know about.


00:00:45.320 --> 00:00:48.060
So we're trying to find other ways


00:00:48.060 --> 00:00:51.000
for people to learn about or consume the podcast,


00:00:51.000 --> 00:00:54.540
other ways that you can interact with us, you dear listener.


00:00:54.540 --> 00:00:57.740
And so we are launching a YouTube project,


00:00:57.740 --> 00:01:01.020
to the YouTube channel, so right now if you can,


00:01:01.020 --> 00:01:03.740
you're up for it, go over to pythonbytes.fm/youtube,


00:01:03.740 --> 00:01:04.940
click subscribe.


00:01:04.940 --> 00:01:06.580
I honestly don't know if there's gonna be


00:01:06.580 --> 00:01:09.800
any content there yet, probably, probably maybe,


00:01:09.800 --> 00:01:11.780
we're not 100% sure because there's none now,


00:01:11.780 --> 00:01:13.500
but by the time this episode comes out,


00:01:13.500 --> 00:01:14.340
I think we'll have some.


00:01:14.340 --> 00:01:16.920
And the idea is, each segment that we're covering,


00:01:16.920 --> 00:01:19.620
we're gonna have a dedicated little video


00:01:19.620 --> 00:01:22.440
of Brian and me talking, and if there's another guest,


00:01:22.440 --> 00:01:24.900
that'll probably involve them as well.


00:01:24.900 --> 00:01:28.860
And so it'd be really nice to have that for everyone,


00:01:28.860 --> 00:01:32.080
I think, to just be able to quickly dive in


00:01:32.080 --> 00:01:35.440
and watch a video, see the two of us talking here


00:01:35.440 --> 00:01:38.500
as we see each other, but also be able to just focus in


00:01:38.500 --> 00:01:39.560
on one topic.


00:01:39.560 --> 00:01:41.280
I'm not quite sure how it's going to service,


00:01:41.280 --> 00:01:42.760
but we'll put it on the YouTube channel,


00:01:42.760 --> 00:01:43.960
probably put it on social media,


00:01:43.960 --> 00:01:45.840
and feedback would be very welcome there.


00:01:45.840 --> 00:01:47.080
- I'm super excited for this.


00:01:47.080 --> 00:01:47.920
It's going to be great.


00:01:47.920 --> 00:01:48.740
- Yeah, absolutely.


00:01:48.740 --> 00:01:49.580
So am I.


00:01:49.580 --> 00:01:51.800
I'm also a little excited for Pip


00:01:51.800 --> 00:01:53.640
and the whole packaging thing around Python.


00:01:53.640 --> 00:01:54.940
Yeah, well, I am too.


00:01:54.940 --> 00:01:56.900
One of the things I'm looking forward to,


00:01:56.900 --> 00:01:59.660
I think we covered this a couple episodes ago,


00:01:59.660 --> 00:02:04.660
is the dependency resolver coming in changes in pip,


00:02:04.660 --> 00:02:06.060
which is exciting.


00:02:06.060 --> 00:02:08.140
But one of the reasons why we're having,


00:02:08.140 --> 00:02:10.220
I mean, there's been a lot of packaging changes lately.


00:02:10.220 --> 00:02:13.860
We've had relaunch of PyPI in 2018.


00:02:13.860 --> 00:02:16.700
Some security features went in in 2019.


00:02:16.700 --> 00:02:18.220
One of the things I didn't know about


00:02:18.220 --> 00:02:22.420
was more support for users with disabilities


00:02:22.420 --> 00:02:25.540
and multiple locales were added in 2019.


00:02:25.540 --> 00:02:27.380
And there's been more security features


00:02:27.380 --> 00:02:31.780
and the dependency resolver being updated for 2020.


00:02:31.780 --> 00:02:35.460
And a lot of this has to do with some money that came in


00:02:35.460 --> 00:02:38.820
through some sponsorships and through a gift from the,


00:02:38.820 --> 00:02:41.600
I think it was Facebook Foundation or something like that.


00:02:41.600 --> 00:02:44.480
But anyway, so money came in, but they were one-time things.


00:02:44.480 --> 00:02:46.260
And the Python Working Group


00:02:46.260 --> 00:02:48.280
and the Python Software Foundation


00:02:48.280 --> 00:02:49.280
wanted to keep this going.


00:02:49.280 --> 00:02:52.100
So they're launching an all new sponsorship program


00:02:52.100 --> 00:02:55.900
help sustain and improve the Python's packaging ecosystem.


00:02:55.900 --> 00:02:57.780
And funds raised through this program


00:02:57.780 --> 00:03:01.180
will go directly towards improving the tools that all


00:03:01.180 --> 00:03:04.100
of us and your company uses every day


00:03:04.100 --> 00:03:07.740
to sustain the continued operation of the Python package


00:03:07.740 --> 00:03:08.780
index.


00:03:08.780 --> 00:03:11.140
And so I wanted to highlight this


00:03:11.140 --> 00:03:13.180
because I think it's really important.


00:03:13.180 --> 00:03:16.060
And I depend on PyPI and packaging.


00:03:16.060 --> 00:03:18.940
And I know my company does even more and more and more people


00:03:18.940 --> 00:03:21.540
are moving towards more Python tools.


00:03:21.540 --> 00:03:23.260
we're linking to this page.


00:03:23.260 --> 00:03:26.620
One of the things on there is there's a prospectus


00:03:26.620 --> 00:03:29.080
for what you get as a sponsor,


00:03:29.080 --> 00:03:31.180
and you can apply to be a sponsor there,


00:03:31.180 --> 00:03:34.180
and there's a link to ask questions as well.


00:03:34.180 --> 00:03:37.960
And then a note there that even if your company


00:03:37.960 --> 00:03:39.080
doesn't want to sponsor you,


00:03:39.080 --> 00:03:40.540
individuals can donate money,


00:03:40.540 --> 00:03:43.320
either sustaining or a one-time thing too.


00:03:43.320 --> 00:03:45.340
Yeah, I think the changes they've made lately


00:03:45.340 --> 00:03:46.980
have been in the right direction,


00:03:46.980 --> 00:03:48.540
and I want to have it keep going.


00:03:48.540 --> 00:03:49.580
- Yeah, let's keep it going.


00:03:49.580 --> 00:03:51.400
The changes, the major changes,


00:03:51.400 --> 00:03:54.260
like the big rewrite of pypi.org


00:03:54.260 --> 00:03:56.340
happened because there was a grant,


00:03:56.340 --> 00:03:59.080
I think that one was from Mozilla at the time,


00:03:59.080 --> 00:04:00.900
but it was, we actually have some money


00:04:00.900 --> 00:04:03.060
and some folks can put their full energy


00:04:03.060 --> 00:04:05.760
for several months onto that project.


00:04:05.760 --> 00:04:06.600
And guess what?


00:04:06.600 --> 00:04:08.380
When you do that, you make a ton of progress


00:04:08.380 --> 00:04:09.880
and stuff gets better.


00:04:09.880 --> 00:04:12.900
And there are so many companies out there


00:04:12.900 --> 00:04:17.900
whose primary technology stack is running on Python.


00:04:17.980 --> 00:04:22.980
They have billions of dollars of revenue,


00:04:22.980 --> 00:04:26.160
and they contribute zero back to Python


00:04:26.160 --> 00:04:29.520
to keep that base that they are built on strong.


00:04:29.520 --> 00:04:32.520
So this is definitely a chance to encourage


00:04:32.520 --> 00:04:34.920
your employer to make a yearly sponsorship donation


00:04:34.920 --> 00:04:39.360
or something like that to the PSF.


00:04:39.360 --> 00:04:41.520
They definitely need it now that Python got canceled.


00:04:41.520 --> 00:04:43.700
That means less revenue for them as well.


00:04:43.700 --> 00:04:46.620
So it's more important than even usual.


00:04:44.040 --> 00:04:45.560
- Yeah, and I think it would be even neat.


00:04:45.560 --> 00:04:47.720
I mean, a lot of people think about these,


00:04:47.720 --> 00:04:50.200
we have the news, there's news of these huge grants


00:04:50.200 --> 00:04:52.800
and stuff, and those are super nice.


00:04:52.800 --> 00:04:55.400
But if all the companies that use Python,


00:04:55.400 --> 00:04:57.760
and you know they're hitting PyPI all the time,


00:04:57.760 --> 00:05:00.640
even just pitched in like a couple thousand dollars


00:05:00.640 --> 00:05:01.800
a year, even.


00:05:01.800 --> 00:05:03.600
- Yeah, it would be game changing.


00:05:03.600 --> 00:05:04.800
- That'd be great, yeah.


00:05:04.800 --> 00:05:06.880
So, it'd be cool. - Yeah, absolutely.


00:05:06.880 --> 00:05:08.560
So onto another good cause.


00:05:08.560 --> 00:05:10.240
Listeners probably know I'm very passionate


00:05:10.240 --> 00:05:13.040
about making sure that we address climate change


00:05:13.040 --> 00:05:16.680
and move to renewable energy, things like that


00:05:16.680 --> 00:05:19.240
at all of our infrastructure and our content


00:05:19.240 --> 00:05:21.240
is delivered carbon-free.


00:05:21.240 --> 00:05:23.800
We have like a broader initiative to make sure


00:05:23.800 --> 00:05:26.440
that we offset any of the resources


00:05:26.440 --> 00:05:28.080
we might be using and so on.


00:05:28.080 --> 00:05:30.280
So this next project is sort of in that vein


00:05:30.280 --> 00:05:32.580
and it's called Energy Usage.


00:05:32.580 --> 00:05:34.860
So the idea is it's a Python package


00:05:34.860 --> 00:05:36.960
that will allow you to measure


00:05:36.960 --> 00:05:39.580
the environmental impact of computation.


00:05:39.580 --> 00:05:43.360
So, you know, we've had like profilers, like cProfile,


00:05:43.360 --> 00:05:45.020
and we've had timeit, right?


00:05:45.020 --> 00:05:48.500
So that's basically the idea of this thing, right?


00:05:48.500 --> 00:05:51.200
But instead of asking how much time does it take,


00:05:51.200 --> 00:05:54.860
you can ask how much energy does it use?


00:05:54.860 --> 00:05:57.100
And what you do is you give it a function,


00:05:57.100 --> 00:05:59.220
you give it the arguments, and you just say,


00:05:59.220 --> 00:06:02.380
run this function and figure out how much energy it uses.


00:06:02.380 --> 00:06:05.420
So it sounds silly, but it can measure


00:06:05.420 --> 00:06:09.920
how much CPU resources say versus disk versus network


00:06:09.920 --> 00:06:12.940
it's doing and actually figure out how much computation


00:06:12.940 --> 00:06:13.840
that's taking, right?


00:06:13.840 --> 00:06:15.700
'Cause at the time it just tells you how long it took.


00:06:15.700 --> 00:06:19.500
It doesn't say, well, actually 18% was CPU


00:06:19.500 --> 00:06:21.520
and it was this high and so on.


00:06:21.520 --> 00:06:23.420
And it takes all sorts of things into account


00:06:23.420 --> 00:06:25.900
like the loss of energy across the wires,


00:06:25.900 --> 00:06:28.940
how far you are away, the location that you're in.


00:06:28.940 --> 00:06:32.140
So it'll actually, the report you get is like,


00:06:32.140 --> 00:06:36.340
this computation took 1.86 watts of energy


00:06:36.340 --> 00:06:39.260
and using geolocation, we saw you're in Pennsylvania,


00:06:39.260 --> 00:06:43.220
so that means you got 25% coal, 0.17% oil,


00:06:43.220 --> 00:06:46.700
30% natural gas, 42% renewable,


00:06:46.700 --> 00:06:48.420
and that's how the energy was broken down


00:06:48.420 --> 00:06:50.340
for this particular run of that function.


00:06:50.340 --> 00:06:52.420
And it's equivalent to, say,


00:06:52.420 --> 00:06:54.300
you know, like a certain amount of TV watching


00:06:54.300 --> 00:06:58.780
or driving so far or US household consumption and so on.


00:06:58.780 --> 00:07:00.020
- Interesting. - Interesting, right?


00:07:00.020 --> 00:07:02.020
- Yeah. - So it's just a nice little package


00:07:02.020 --> 00:07:04.740
that you can point at some code that you're trying


00:07:04.740 --> 00:07:07.820
to profile and saying how much energy does this use?


00:07:07.820 --> 00:07:08.660
Should I worry about it?


00:07:08.660 --> 00:07:09.500
Should I optimize it?


00:07:09.500 --> 00:07:12.900
I mean, profiling is pretty close to giving you


00:07:12.900 --> 00:07:14.940
where you should focus your energy.


00:07:14.940 --> 00:07:16.900
But if you want to know, okay, this is most


00:07:16.900 --> 00:07:18.760
of the computation, but how much does that actually cost


00:07:18.760 --> 00:07:22.040
in terms of carbon, or just more specifically,


00:07:22.040 --> 00:07:23.800
it's measuring energy consumption,


00:07:23.800 --> 00:07:25.540
which is also just something you have to pay for


00:07:25.540 --> 00:07:28.340
if you have a data center, then it's pretty interesting,


00:07:28.340 --> 00:07:29.180
I think.


00:07:29.180 --> 00:07:30.900
- Yeah, we could get like maybe a Flake 8 package


00:07:30.900 --> 00:07:33.900
that would fail your code if it--


00:07:33.900 --> 00:07:35.700
- If it uses too much or something, yeah.


00:07:35.700 --> 00:07:37.180
Yeah, yeah, it's pretty interesting.


00:07:37.180 --> 00:07:39.820
It'll output PDFs.


00:07:39.820 --> 00:07:42.260
You can run it where it doesn't put anything on the screen,


00:07:42.260 --> 00:07:44.900
but then it will save a report to a file


00:07:44.900 --> 00:07:45.900
or something like that.


00:07:45.900 --> 00:07:47.620
- Does it include the running of the,


00:07:47.620 --> 00:07:49.380
I mean, how much energy does it take


00:07:49.380 --> 00:07:52.340
to run the usage, energy usage?


00:07:52.340 --> 00:07:54.020
- That's very meta, yeah.


00:07:54.020 --> 00:07:55.740
I don't know if it,


00:07:55.740 --> 00:07:58.660
how much it actually is computationally intensive,


00:07:58.660 --> 00:08:00.220
but it is worth pointing out,


00:08:00.220 --> 00:08:05.220
Because of that, it only runs on Linux


00:08:05.220 --> 00:08:07.360
because of the system CPU inspection parts of it


00:08:07.360 --> 00:08:11.580
aren't built out to support other operating systems.


00:08:11.580 --> 00:08:13.980
So you have to be on Linux to do this test on your code.


00:08:13.980 --> 00:08:16.700
Anyway, EnergyUsage, people can check that out.


00:08:16.700 --> 00:08:19.100
It's a cool little package.


00:08:19.100 --> 00:08:20.820
Now, before we move on to the next one,


00:08:20.820 --> 00:08:22.860
let me tell you about Datadog


00:08:22.860 --> 00:08:23.980
because this episode of Python Bytes


00:08:23.980 --> 00:08:25.860
is brought to you by Datadog.


00:08:25.860 --> 00:08:27.160
And let me ask you a question.


00:08:27.160 --> 00:08:28.580
Do you have an app in production


00:08:28.580 --> 00:08:30.060
that is slower than you like,


00:08:26.700 --> 00:08:28.440
using too much energy maybe.


00:08:28.440 --> 00:08:30.340
Its performance is all over the place.


00:08:30.340 --> 00:08:31.900
Sometimes it's fast or slow.


00:08:31.900 --> 00:08:33.100
But the most important question is,


00:08:33.100 --> 00:08:35.360
do you know why it's slow?


00:08:35.360 --> 00:08:36.820
With Datadog, you will.


00:08:36.820 --> 00:08:38.460
You can troubleshoot your app's performance


00:08:38.460 --> 00:08:40.540
with Datadog's end-to-end tracing.


00:08:40.540 --> 00:08:42.900
Use detailed flame graphs to identify bottlenecks


00:08:42.900 --> 00:08:45.140
and latency in that finicky app of yours.


00:08:45.140 --> 00:08:47.300
So be the hero that got the app back on track


00:08:47.300 --> 00:08:48.340
at your company.


00:08:48.340 --> 00:08:49.700
Get started today with a free trial


00:08:49.700 --> 00:08:52.260
at pythonbytes.fm/datadog.


00:08:52.260 --> 00:08:54.760
Cool Datadog t-shirt included.


00:08:54.760 --> 00:08:57.400
- So Brian, this next one that you put on here,


00:08:57.400 --> 00:09:00.800
I almost covered it a few weeks ago as well,


00:09:00.800 --> 00:09:02.480
and I was like, yes, this is really interesting,


00:09:02.480 --> 00:09:04.160
but then I don't know, something else,


00:09:04.160 --> 00:09:06.080
like there was a shiny object,


00:09:06.080 --> 00:09:07.280
and it pulled my attention away.


00:09:07.280 --> 00:09:10.580
So yeah, this is a bit of a philosophical one.


00:09:10.580 --> 00:09:12.400
- Yeah, so this is a, we're linking


00:09:12.400 --> 00:09:14.040
to just a short little article,


00:09:14.040 --> 00:09:16.000
but I wanted to talk about the topic.


00:09:16.000 --> 00:09:19.440
The article's called "Coding is 90% Google Searching,


00:09:19.440 --> 00:09:21.440
a Brief Note to Beginners."


00:09:21.440 --> 00:09:22.720
And there's really not much here,


00:09:22.720 --> 00:09:24.280
other than saying that, like,


00:09:24.280 --> 00:09:28.280
I mean, I guess there's three points in trying to learn how to program.


00:09:28.280 --> 00:09:32.280
And a couple of them are good in that just


00:09:32.280 --> 00:09:36.280
pick one language to start with when you're learning how to program, and of course, pick Python.


00:09:36.280 --> 00:09:40.280
And then start to do a project, like try to do a project.


00:09:40.280 --> 00:09:44.280
Those are great ideas. And then the third point is, anytime you get stuck,


00:09:44.280 --> 00:09:48.280
Google it. And the point of the article really is, I think, that


00:09:48.280 --> 00:09:52.280
coding is 90% Google searching anyway, and people don't usually


00:09:52.280 --> 00:09:55.280
I don't usually tell beginners that.


00:09:55.280 --> 00:09:58.280
I don't think I agree with this.


00:09:58.280 --> 00:10:00.280
I was wondering what you think of this.


00:10:00.280 --> 00:10:01.280
- I don't think I agree with it either.


00:10:01.280 --> 00:10:03.280
But I'm not sure I agree with you yet either.


00:10:03.280 --> 00:10:06.280
So let's talk about it because it is interesting.


00:10:06.280 --> 00:10:07.280
We probably do agree, honestly.


00:10:07.280 --> 00:10:13.280
I think programming, developer career evolution


00:10:13.280 --> 00:10:17.280
goes through phases and seasons and whatnot.


00:10:17.280 --> 00:10:19.280
I think in the beginning, you're just super lost.


00:10:19.280 --> 00:10:21.280
You just are trying to figure out syntax and whatever.


00:10:21.280 --> 00:10:22.700
And then you feel really good because,


00:10:22.700 --> 00:10:24.180
oh, I really got this syntax figured out.


00:10:24.180 --> 00:10:26.340
And it turns out that's a minor part of programming.


00:10:26.340 --> 00:10:29.380
Now you got to like tracking down bugs and using libraries.


00:10:29.380 --> 00:10:31.660
You're like, I got to learn what SQLAlchemy is.


00:10:31.660 --> 00:10:33.620
Oh my gosh, what is a migration?


00:10:33.620 --> 00:10:34.660
Okay, Google migration.


00:10:34.660 --> 00:10:35.640
How do I do migrations?


00:10:35.640 --> 00:10:36.500
Well, this isn't working.


00:10:36.500 --> 00:10:39.220
Let me like Google and up at Stack Overflow.


00:10:39.220 --> 00:10:42.820
And in that sort of stage where you've crossed over,


00:10:42.820 --> 00:10:47.140
like I'm kind of a competent language user of the language,


00:10:47.140 --> 00:10:50.700
but I'm not really, like the world is actually open


00:10:50.700 --> 00:10:52.700
and all these libraries and packages are out there,


00:10:52.700 --> 00:10:54.700
and I have no idea what I'm doing.


00:10:54.700 --> 00:10:56.700
I don't even know what third normal form is,


00:10:56.700 --> 00:10:58.700
so I better figure that out, because it says I need it


00:10:58.700 --> 00:11:00.700
in my design for my SQLAlchemy classes, or whatever.


00:11:00.700 --> 00:11:03.700
I think in that season of your career,


00:11:03.700 --> 00:11:05.700
I kind of agree with this.


00:11:05.700 --> 00:11:07.700
You're just Googling like crazy, and it's okay,


00:11:07.700 --> 00:11:09.700
because Google is really good,


00:11:09.700 --> 00:11:11.700
and the resources out there are really good.


00:11:11.700 --> 00:11:13.700
But when I saw this article, I thought,


00:11:13.700 --> 00:11:15.700
okay, that's a pretty good message


00:11:15.700 --> 00:11:17.700
to people who are kind of new.


00:11:17.700 --> 00:11:19.700
You hear how horrible it is to do copy and paste coding,


00:11:19.700 --> 00:11:23.280
coding and yet this person is saying,


00:11:23.280 --> 00:11:25.580
like they were in, I think a couple of years


00:11:25.580 --> 00:11:27.300
into their career, they're like, look,


00:11:27.300 --> 00:11:29.360
I do this a lot and I don't feel like


00:11:29.360 --> 00:11:31.440
I'm cheating or whatever.


00:11:31.440 --> 00:11:34.400
And yet I don't feel like, if I had to put a number on it,


00:11:34.400 --> 00:11:39.240
I would say coding is 5% Google searching for me these days.


00:11:39.240 --> 00:11:41.720
Five to 10, depending on what, if it's like


00:11:41.720 --> 00:11:45.260
something new I'm doing, it's probably 10% to 15.


00:11:45.260 --> 00:11:48.880
But most day-to-day work, it's 5% or less.


00:11:48.880 --> 00:11:53.880
I don't know, how do you feel about that?


00:11:53.880 --> 00:11:55.200
- I definitely agree.


00:11:55.200 --> 00:11:55.960
Like for instance, picking up a new framework or something,


00:11:55.960 --> 00:11:58.680
I'm going to be looking it up a lot.


00:11:58.680 --> 00:12:01.280
- Right, there's little spikes as you adopt a new thing,


00:12:01.280 --> 00:12:04.080
but then it really goes back down, right?


00:12:04.080 --> 00:12:05.880
- But I was paying attention,


00:12:05.880 --> 00:12:07.280
so I was thinking about this the last couple of weeks


00:12:07.280 --> 00:12:09.360
and paying attention to my coding style.


00:12:09.360 --> 00:12:11.520
And I do, there's probably at least a handful of times


00:12:11.520 --> 00:12:15.400
during the day where I'm Googling something.


00:12:15.400 --> 00:12:18.280
But it isn't like everything.


00:12:14.960 --> 00:12:17.960
It's definitely more of a 5% thing or less.


00:12:17.960 --> 00:12:20.460
And then I realized that a lot of the things I'm googling


00:12:20.460 --> 00:12:22.960
is stuff that I've just decided to not memorize.


00:12:22.960 --> 00:12:23.960
Right.


00:12:23.960 --> 00:12:26.960
Like the syntax of weird things.


00:12:26.960 --> 00:12:30.960
I'm pretty sure that I can have a step size in range,


00:12:30.960 --> 00:12:33.460
the range function, but I don't use it very often.


00:12:33.460 --> 00:12:34.960
What's that again?


00:12:34.960 --> 00:12:35.960
Things like that.


00:12:35.960 --> 00:12:37.960
Like extra stuff.


00:12:37.960 --> 00:12:41.960
And a lot of this stuff, editor support really helps anyway.


00:12:41.960 --> 00:12:43.460
If I already know what I'm doing,


00:12:43.460 --> 00:12:46.460
the editor can pop up what the syntax is.


00:12:46.460 --> 00:12:47.460
- That's a really good point,


00:12:47.460 --> 00:12:50.460
because if I was using just pure Emacs


00:12:50.460 --> 00:12:52.460
or something that had zero autocomplete,


00:12:52.460 --> 00:12:54.460
I'd be Googling more, for sure.


00:12:54.460 --> 00:12:57.460
But, you know, on PyCharm you hit dot,


00:12:57.460 --> 00:12:59.460
and like, well, there's three choices,


00:12:59.460 --> 00:13:00.460
and it tells you the parameters.


00:13:00.460 --> 00:13:02.460
Like, you don't need to Google for that stuff anymore,


00:13:02.460 --> 00:13:03.460
because you've got the better tooling.


00:13:03.460 --> 00:13:06.460
- Yeah, and there's different stuff, like,


00:13:06.460 --> 00:13:09.460
so the syntax, I leave to the IDE a lot.


00:13:09.460 --> 00:13:10.460
There's definitely a skill,


00:13:10.460 --> 00:13:12.460
so one of the things that I kind of missed


00:13:12.460 --> 00:13:15.760
article is it's not that 90 that Google


00:13:15.760 --> 00:13:18.780
searching is 90% of coding. It's, there's a


00:13:18.780 --> 00:13:22.260
big chunk of your skill set is to learn how


00:13:22.260 --> 00:13:24.960
to Google something effectively. So in


00:13:24.960 --> 00:13:28.320
coding, like, like the instead of trying to


00:13:28.320 --> 00:13:30.860
summarize what the error message is, and then


00:13:30.860 --> 00:13:33.520
googling that, oh, just paste the entire error


00:13:33.520 --> 00:13:36.200
message in. That's like one trick to do. And so


00:13:36.200 --> 00:13:38.920
there's a whole bunch of coding, Google tricks


00:13:38.920 --> 00:13:41.260
to find the information fast, because I don't


00:13:41.260 --> 00:13:45.140
want it to be 90% of the time. I want something that I kind of think I


00:13:45.140 --> 00:13:49.540
remember to be able to look that up in just seconds and then go back to coding


00:13:49.540 --> 00:13:55.060
again. So yeah, I hope it's not 90%. That would be a very slow way to code.


00:13:55.060 --> 00:13:59.700
It would be, but I remember that being the case back in the day and for me it


00:13:59.700 --> 00:14:04.020
wasn't googling because I think we had, when I was first doing programming, you


00:14:04.020 --> 00:14:07.940
have to see if you can remember yours, but I was using AltaVista, I'm pretty


00:14:07.940 --> 00:14:08.780
- I'm pretty sure.


00:14:08.780 --> 00:14:10.020
(laughing)


00:14:10.020 --> 00:14:11.540
Right, like people who are listening


00:14:11.540 --> 00:14:12.380
who don't know what that is.


00:14:12.380 --> 00:14:14.220
That was a search engine that was nowhere near


00:14:14.220 --> 00:14:17.380
as good as Google that existed before Google.


00:14:17.380 --> 00:14:18.700
But the things you would end up,


00:14:18.700 --> 00:14:20.700
there was not Stack Overflow to search from


00:14:20.700 --> 00:14:22.260
and all those sorts of things.


00:14:22.260 --> 00:14:25.380
And so it was a lot of books and a lot of user groups,


00:14:25.380 --> 00:14:27.360
not user groups, like Usenet groups,


00:14:27.360 --> 00:14:29.060
whatever those were called.


00:14:29.060 --> 00:14:32.860
So there was a lot of like reference research stuff


00:14:32.860 --> 00:14:34.340
in the early days for me as well.


00:14:34.340 --> 00:14:35.540
And I wish there was Google.


00:14:35.540 --> 00:14:38.200
I could have done a lot more effective Google searching.


00:14:38.200 --> 00:14:40.340
But certainly I think that that is a


00:14:40.340 --> 00:14:43.260
just past stage one of your career.


00:14:43.260 --> 00:14:45.120
This is a reasonable way to see the world.


00:14:45.120 --> 00:14:46.780
But you're right, it's absolutely a skill


00:14:46.780 --> 00:14:50.720
and the more effective you can be at narrowing in,


00:14:50.720 --> 00:14:51.560
the better.


00:14:51.560 --> 00:14:53.100
But then I think it actually is,


00:14:53.100 --> 00:14:54.920
if people are living that life now,


00:14:54.920 --> 00:14:56.100
like I'm Googling all the time,


00:14:56.100 --> 00:14:58.460
this just must be like the rest of my life,


00:14:58.460 --> 00:14:59.840
I'm going to just do this.


00:14:59.840 --> 00:15:00.900
That won't be the way it is.


00:15:00.900 --> 00:15:03.340
- Yeah, I'm thinking back in my memory.


00:15:03.340 --> 00:15:07.100
So when I learned to program, there was no internet.


00:15:07.100 --> 00:15:10.700
Or if there was, I didn't have access to it.


00:15:10.700 --> 00:15:14.380
So early '90s, late '80s, it was books.


00:15:14.380 --> 00:15:16.220
So I had references.


00:15:16.220 --> 00:15:19.500
And still, even through my early career,


00:15:19.500 --> 00:15:22.780
I had a couple books that I would rely on,


00:15:22.780 --> 00:15:24.940
because I knew how to look things up quickly.


00:15:24.940 --> 00:15:28.740
So I had, for instance, I had a sticky note right where


00:15:28.740 --> 00:15:31.060
the printf translator thing.


00:15:31.060 --> 00:15:33.680
So if I knew how to print F and scan F,


00:15:33.680 --> 00:15:37.720
what those little percent signs were and all that stuff.


00:15:37.720 --> 00:15:39.280
- Yeah, that's a really good point.


00:15:39.280 --> 00:15:44.280
So I remember I had a C++ primer or something like that,


00:15:44.280 --> 00:15:46.800
and boy, that thing was all tattered,


00:15:46.800 --> 00:15:48.920
and I used that a lot as well, yeah.


00:15:48.920 --> 00:15:50.560
But it's not that way either.


00:15:50.560 --> 00:15:53.380
It doesn't matter whether it's a book or Google or whatever.


00:15:53.380 --> 00:15:56.620
It's a phase, but it's not all of coding


00:15:56.620 --> 00:15:57.860
for the rest of your career.


00:15:57.860 --> 00:16:00.120
- Right, and then there's stuff that you just end up


00:16:00.120 --> 00:16:02.560
remembering that you like, I'm never going to remember this.


00:16:02.560 --> 00:16:05.160
I know I'm going to always have to look this up because there's


00:16:05.160 --> 00:16:08.080
some block like printf decoders and stuff like that.


00:16:08.080 --> 00:16:08.640
Yeah, exactly.


00:16:08.640 --> 00:16:13.320
But yeah, like the stuff for parsing strings into dates, like that is not,


00:16:13.320 --> 00:16:16.120
that is always a Google search for me because I'm just, I'm not going to


00:16:16.120 --> 00:16:17.440
remember all the details there.


00:16:17.440 --> 00:16:20.160
This next one, if I were to set this up, this would definitely be


00:16:20.160 --> 00:16:21.760
a Google search for me as well.


00:16:21.760 --> 00:16:25.280
So I'm considering it, but luckily I don't have to Google search it because


00:16:25.280 --> 00:16:29.520
we're covering the show and Chris Moffitt is covering it and wrote it all up for us.


00:16:29.520 --> 00:16:31.880
So Chris Moffett wrote an article,


00:16:31.880 --> 00:16:34.320
he's been on Talk Python before,


00:16:34.320 --> 00:16:36.160
and he wrote an article called


00:16:36.160 --> 00:16:39.360
Using WSL to Build a Python Development Environment


00:16:39.360 --> 00:16:40.560
on Windows.


00:16:40.560 --> 00:16:43.680
So WSL is Windows Subsystem for Linux.


00:16:43.680 --> 00:16:44.760
And this is interesting to me


00:16:44.760 --> 00:16:47.600
because I just recently had this experience


00:16:47.600 --> 00:16:50.240
where I finally broke down and I decided


00:16:50.240 --> 00:16:52.680
I've been using Parallels on my Mac,


00:16:52.680 --> 00:16:57.440
and I have a super fast Mac, like a i9 with six cores,


00:16:57.440 --> 00:16:59.960
So it should be able to run virtual machines just fine.


00:16:59.960 --> 00:17:01.760
And yet still when you're working in Windows,


00:17:01.760 --> 00:17:03.440
you're working in any of the virtual machines,


00:17:03.440 --> 00:17:05.080
like even a virtualized macOS,


00:17:05.080 --> 00:17:08.560
it's still like the scrolling's a little bit off,


00:17:08.560 --> 00:17:11.080
like the keyboard's tiny bits of late,


00:17:11.080 --> 00:17:14.760
there's just a little bit where it just doesn't feel good


00:17:14.760 --> 00:17:15.600
to work there, right?


00:17:15.600 --> 00:17:17.500
You can totally do it, but it's kind of,


00:17:17.500 --> 00:17:20.900
you can tell it's not a perfect experience.


00:17:20.900 --> 00:17:24.040
So I finally broke down and installed Windows and Bootcamp


00:17:24.040 --> 00:17:26.000
so I can boot into Windows


00:17:26.000 --> 00:17:27.340
and have a true native experience,


00:17:27.340 --> 00:17:29.980
or just keep booting into my macOS and have that.


00:17:29.980 --> 00:17:31.340
And that is a lot nicer.


00:17:31.340 --> 00:17:34.020
But one of the reasons I don't want to go to Windows


00:17:34.020 --> 00:17:36.300
is I really love the terminal in macOS,


00:17:36.300 --> 00:17:38.420
way more than even on Linux.


00:17:38.420 --> 00:17:41.060
It's just super nice.


00:17:41.060 --> 00:17:42.660
And some of the tools you have there


00:17:42.660 --> 00:17:45.300
are like in deployment on Linux machines.


00:17:45.300 --> 00:17:48.700
So you have this sort of closer to production world,


00:17:48.700 --> 00:17:51.660
but you have a nice OS with like GUI tools


00:17:51.660 --> 00:17:54.300
and little widgets and whatnot with macOS.


00:17:54.300 --> 00:17:57.000
And I was thinking, it's not really fair to Windows


00:17:57.000 --> 00:17:59.560
to stick it into this little crummy system.


00:17:59.560 --> 00:18:01.640
So it's nice to have this other option,


00:18:01.640 --> 00:18:03.240
but I don't want to go there and do development


00:18:03.240 --> 00:18:06.800
because I don't have this Linux type system, right?


00:18:06.800 --> 00:18:07.800
It's a nice terminal.


00:18:07.800 --> 00:18:09.840
So what Chris talked about is basically


00:18:09.840 --> 00:18:12.560
how to set up Windows subsystem for Linux,


00:18:12.560 --> 00:18:15.080
and there's a new version that came out


00:18:15.080 --> 00:18:18.760
mid last year called WSL2 that is a lot better,


00:18:18.760 --> 00:18:22.180
especially around file performance and I/O and sharing


00:18:22.180 --> 00:18:25.440
and crossing over between Windows and Ubuntu


00:18:25.440 --> 00:18:26.760
or whatever you choose to run.


00:18:26.760 --> 00:18:27.600
- Oh, cool.


00:18:27.600 --> 00:18:28.420
- Do you do this any?


00:18:28.420 --> 00:18:30.080
- So I tried it really early on,


00:18:30.080 --> 00:18:33.000
and I haven't tried it since WSL2 is out.


00:18:33.000 --> 00:18:34.600
- Yeah, it sounds like it might be worthwhile.


00:18:34.600 --> 00:18:38.120
So if you look at this thing Chris wrote,


00:18:38.120 --> 00:18:40.280
he talks about, there's like a little motivation


00:18:40.280 --> 00:18:41.480
on how it runs and whatnot,


00:18:41.480 --> 00:18:42.960
I'll give people the lowdown,


00:18:42.960 --> 00:18:44.560
but mostly it's like a step,


00:18:44.560 --> 00:18:48.760
a guide of how to set up the various things you want.


00:18:48.760 --> 00:18:52.200
So for example, if you want to be able to have


00:18:52.200 --> 00:18:54.520
a nice terminal on the Windows side,


00:18:54.520 --> 00:18:57.600
but then that can talk to the Windows subsystem.


00:18:57.600 --> 00:18:59.520
It talks about installing the new Windows terminal,


00:18:59.520 --> 00:19:02.180
which we already covered recently.


00:19:02.180 --> 00:19:05.380
It talks about getting Ubuntu from the store,


00:19:05.380 --> 00:19:09.320
how to upgrade old WSL installations to the version two.


00:19:09.320 --> 00:19:13.420
Also, how you can set it up to use Visual Studio Code


00:19:13.420 --> 00:19:16.580
in Windows that is actually working on


00:19:16.580 --> 00:19:18.040
the Windows subsystem for Linux.


00:19:18.040 --> 00:19:21.040
So you fire up VS Code and you're doing your work,


00:19:21.040 --> 00:19:23.180
and then one of the environments you could choose


00:19:23.180 --> 00:19:26.700
is like a WSL environment that's actually running


00:19:26.700 --> 00:19:29.900
on an ultra lightweight version of Linux.


00:19:29.900 --> 00:19:31.340
So you know when you get the little terminal


00:19:31.340 --> 00:19:33.340
and VS Code and you type over there, right?


00:19:33.340 --> 00:19:37.140
It's running Linux commands, but on your machine still.


00:19:37.140 --> 00:19:39.580
Without a VM, I mean, sort of a VM, but not really.


00:19:39.580 --> 00:19:42.220
It's like halfway between Docker and full VMs.


00:19:42.220 --> 00:19:43.060
- This looks nice.


00:19:43.060 --> 00:19:46.580
So what I am usually doing is,


00:19:46.580 --> 00:19:47.880
I'll have to try this out again,


00:19:47.880 --> 00:19:51.760
but I agree with you that I like to pretend


00:19:51.760 --> 00:19:53.140
I don't have Windows.


00:19:53.140 --> 00:19:55.800
But I do, I mean, my day job, I work on a Windows machine.


00:19:55.800 --> 00:19:57.360
- So maybe this is extra helpful for you


00:19:57.360 --> 00:19:59.080
because you're gonna be there anyway, right?


00:19:59.080 --> 00:20:01.940
- Yeah, but I mean, so I've already worked around most of it


00:20:01.940 --> 00:20:06.940
so I use Git, so Git for Windows comes with Git Bash command


00:20:06.940 --> 00:20:10.040
which is, you kind of have both of them.


00:20:10.040 --> 00:20:12.640
You can do Windows stuff and work around in Bash


00:20:12.640 --> 00:20:15.200
and it sort of feels like a Unix environment.


00:20:15.200 --> 00:20:17.880
- Nice, well, I'm very excited about the possibility


00:20:17.880 --> 00:20:22.380
just having native feeling, oh my Z shell on Windows.


00:20:22.380 --> 00:20:23.220
- Oh yeah.


00:20:23.220 --> 00:20:24.040
- That's going to be nice.


00:20:24.040 --> 00:20:26.760
- Yeah, well and I hope this is a direction.


00:20:26.760 --> 00:20:30.280
I think it is, that this WSL stuff is just more


00:20:30.280 --> 00:20:32.160
and more integrated with the rest of Windows.


00:20:32.160 --> 00:20:33.520
- Yeah, the integration's pretty sweet.


00:20:33.520 --> 00:20:35.880
So if you're in WSL, which is effectively


00:20:35.880 --> 00:20:37.520
like you're in Ubuntu, right?


00:20:37.520 --> 00:20:40.840
You can type explorer on the terminal


00:20:40.840 --> 00:20:43.520
and it will open up the Windows Explorer


00:20:43.520 --> 00:20:45.760
in that folder, in the Linux folder,


00:20:45.760 --> 00:20:48.460
but it'll open up the Windows Explorer,


00:20:48.460 --> 00:20:51.860
the native file stuff, right, on Windows,


00:20:51.860 --> 00:20:52.700
and things like that.


00:20:52.700 --> 00:20:54.260
So the integration's pretty sweet now,


00:20:54.260 --> 00:20:56.140
which is what I was thinking is worthwhile.


00:20:56.140 --> 00:21:00.540
Also, to start up this WSL, it's like one second.


00:21:00.540 --> 00:21:04.060
So it basically feels like starting a sluggish terminal.


00:21:04.060 --> 00:21:05.580
- Oh. (laughs)


00:21:05.580 --> 00:21:06.420
Yeah, it's not bad.


00:21:06.420 --> 00:21:07.660
- Right, then it's up and running, right?


00:21:07.660 --> 00:21:08.500
- Yeah.


00:21:08.500 --> 00:21:09.740
- Anyway, so this is a really cool breakdown


00:21:09.740 --> 00:21:12.820
of how Chris is working, and the various tools,


00:21:12.820 --> 00:21:15.060
like the various plugins for VS Code,


00:21:15.060 --> 00:21:17.260
and how he configured them to make them all work together


00:21:17.260 --> 00:21:18.100
and stuff.


00:21:18.100 --> 00:21:21.380
So if this workflow sounds interesting and useful to you,


00:21:21.380 --> 00:21:22.220
check out the article.


00:21:22.220 --> 00:21:24.820
It's got a bunch of details and screenshots on how to do it


00:21:24.820 --> 00:21:26.420
and it's not really worth going into those.


00:21:26.420 --> 00:21:28.100
But I think it's a cool idea


00:21:28.100 --> 00:21:30.580
and I just want to give a shout out to WSL2


00:21:30.580 --> 00:21:32.500
and doing Python on it.


00:21:32.500 --> 00:21:33.460
- Yeah, very neat.


00:21:33.460 --> 00:21:35.420
- You got a solid one for us, huh?


00:21:35.420 --> 00:21:37.900
- We've kind of kicked this can down the road a few times,


00:21:37.900 --> 00:21:39.660
but I thought we'd take a crack at it.


00:21:39.660 --> 00:21:42.980
There was an article written by Derek D


00:21:42.980 --> 00:21:47.680
called A Pythonic Guide to Solid Design Principles.


00:21:47.680 --> 00:21:51.120
Are you familiar with what the solid principles are?


00:21:51.120 --> 00:21:53.480
- Single responsibility, open-close,


00:21:53.480 --> 00:21:56.720
Liskov substitution in something,


00:21:56.720 --> 00:21:58.000
and dependency injection.


00:21:58.000 --> 00:22:00.240
(laughing)


00:22:00.240 --> 00:22:02.520
I forgot what the I is.


00:22:02.520 --> 00:22:04.200
I is interface segregation principle.


00:22:04.200 --> 00:22:05.200
There you go, okay.


00:22:05.200 --> 00:22:06.040
- Yeah, so--


00:22:06.040 --> 00:22:07.440
- I had to look on that one, I cheated.


00:22:07.440 --> 00:22:08.760
- I always have to look it up.


00:22:08.760 --> 00:22:12.320
But I was curious, so the article is interesting.


00:22:12.320 --> 00:22:20.320
interesting article. So the idea is taking all these principles and I'm gonna have to go through and spell check these.


00:22:20.320 --> 00:22:29.320
But anyway, I don't even know where these came from. But this idea that if you're doing object-oriented design, you should have solid object-oriented design.


00:22:29.320 --> 00:22:41.320
I don't know if I completely buy it. Actually, I'm pretty sure that I don't. But this article goes in and also talks about, kind of relates each one to the Zen of Python as well.


00:22:41.320 --> 00:22:47.820
and sometimes it's a little bit of a stretch. And then also just really how to apply these principles in


00:22:47.820 --> 00:22:55.380
programming and coding in Python. I guess I'll just say my take on solid design principles are


00:22:55.380 --> 00:22:58.380
there are things that are good to know about and


00:22:58.380 --> 00:23:03.500
there's lots of different design principles to know about and these are some of them and in


00:23:03.500 --> 00:23:09.980
developing object systems with objects and all Python uses objects whether you think it does or not.


00:23:10.260 --> 00:23:13.260
If you look at some code and it's hard to maintain,


00:23:13.260 --> 00:23:16.260
or it already is hard to maintain,


00:23:16.260 --> 00:23:19.260
maybe some of these principles might help refactor


00:23:19.260 --> 00:23:22.260
so that it's in a better state.


00:23:22.260 --> 00:23:25.260
But blindly following these rules


00:23:25.260 --> 00:23:28.260
actually, I think, could possibly make your code even worse,


00:23:28.260 --> 00:23:30.260
is my take on it.


00:23:30.260 --> 00:23:33.260
Yeah, well, I'm a big fan of design patterns, actually.


00:23:33.260 --> 00:23:35.260
I really love the concept of design patterns.


00:23:35.260 --> 00:23:38.260
And one of the things I love about them is


00:23:38.260 --> 00:23:42.000
is once you start to think of code in design patterns,


00:23:42.000 --> 00:23:43.520
you can think of trade-offs


00:23:43.520 --> 00:23:45.180
and higher level building blocks


00:23:45.180 --> 00:23:47.520
than just functions or here's a class.


00:23:47.520 --> 00:23:49.680
You can think, oh, this is a,


00:23:49.680 --> 00:23:51.020
you know, this is going to be an interface.


00:23:51.020 --> 00:23:52.680
And so what that means is here's a benefit


00:23:52.680 --> 00:23:53.520
and here's a drawback


00:23:53.520 --> 00:23:55.680
and do we want to go down that path, right?


00:23:55.680 --> 00:23:59.220
Or I like that it lets you think in bigger abstractions


00:23:59.220 --> 00:24:01.460
than just lines of code or functions.


00:24:01.460 --> 00:24:03.480
So I'm a huge fan of that.


00:24:03.480 --> 00:24:05.480
But one problem that I've seen a lot


00:24:05.480 --> 00:24:06.900
when people adopt design,


00:24:06.900 --> 00:24:08.580
first when they learn design patterns


00:24:08.580 --> 00:24:09.660
and they become super passionate,


00:24:09.660 --> 00:24:11.520
like, oh my gosh, this is so awesome.


00:24:11.520 --> 00:24:14.520
It could be so easy to go, all right, well,


00:24:14.520 --> 00:24:15.820
these are going into everything.


00:24:15.820 --> 00:24:18.780
Like, every chance I can get to use the visitor pattern,


00:24:18.780 --> 00:24:21.000
it's going in, and you're like, wait, wait, wait, wait,


00:24:21.000 --> 00:24:23.040
the visitor pattern is super complicated,


00:24:23.040 --> 00:24:25.040
and it only solves a cool problem,


00:24:25.040 --> 00:24:28.640
but it is really not obvious or easy to maintain.


00:24:28.640 --> 00:24:32.060
The problem it solves had better be glaring and massive,


00:24:32.060 --> 00:24:33.260
or you're just making it worse.


00:24:33.260 --> 00:24:36.580
And so, I don't know, I see this kind of stuff as salt


00:24:36.580 --> 00:24:40.740
and pepper and paprika, its code is better with it.


00:24:40.740 --> 00:24:44.480
But that doesn't mean it should be ultra doused at it.


00:24:44.480 --> 00:24:45.320
You know what I mean?


00:24:45.320 --> 00:24:46.480
'Cause then it's not better anymore.


00:24:46.480 --> 00:24:47.860
It's all of a sudden like,


00:24:47.860 --> 00:24:51.320
this is a really cool study and design patterns.


00:24:51.320 --> 00:24:52.660
I have no idea what's going on.


00:24:52.660 --> 00:24:54.340
Like for example, dependency injection.


00:24:54.340 --> 00:24:56.880
Like there's a few places where dependency injection


00:24:56.880 --> 00:24:58.660
like at certain layers might be cool


00:24:58.660 --> 00:25:00.520
and you could apply it and it's really neat.


00:25:00.520 --> 00:25:01.780
But if you do it everywhere, you're like,


00:25:01.780 --> 00:25:03.280
I have no idea what anything is


00:25:03.280 --> 00:25:05.340
or how any of them get to each other.


00:25:05.340 --> 00:25:10.340
know that this is a complete mess


00:25:10.340 --> 00:25:12.160
and I need a debugger to even figure out


00:25:12.160 --> 00:25:13.700
what's happening all the time.


00:25:13.700 --> 00:25:15.340
And that's kind of my feeling about Solid,


00:25:15.340 --> 00:25:18.440
especially in Python.


00:25:18.440 --> 00:25:19.300
It's definitely my feeling about design patterns.


00:25:19.300 --> 00:25:21.200
What do you think?


00:25:21.200 --> 00:25:22.200
I definitely have to agree.


00:25:22.200 --> 00:25:23.460
One of the things that,


00:25:23.460 --> 00:25:25.140
well, I think I agree.


00:25:25.140 --> 00:25:26.860
Both design patterns and the idea around Solid,


00:25:26.860 --> 00:25:31.900
they were really developed for other languages.


00:25:31.900 --> 00:25:34.940
I don't think, they're definitely not


00:25:31.680 --> 00:25:33.960
the first tools that I reach for,


00:25:33.960 --> 00:25:38.080
for making Python more maintainable and design better.


00:25:38.080 --> 00:25:42.040
Like for instance, like you mentioned dependency injection.


00:25:42.040 --> 00:25:43.680
This is, as far as I can tell,


00:25:43.680 --> 00:25:48.080
dependency injection should be used very sparingly in Python.


00:25:48.080 --> 00:25:51.840
And there are great, great ways to, examples,


00:25:51.840 --> 00:25:53.640
like for instance, in an application


00:25:53.640 --> 00:25:57.560
where you don't want to depend on a particular database style


00:25:57.560 --> 00:26:01.600
or database, you can set up the database configuration


00:26:01.600 --> 00:26:04.440
early on and then pass that to the system.


00:26:04.440 --> 00:26:06.560
But the problems with looking up,


00:26:06.560 --> 00:26:08.580
if you want to know more about solid


00:26:08.580 --> 00:26:10.640
and more about design patterns,


00:26:10.640 --> 00:26:12.800
almost all the examples are going to be


00:26:12.800 --> 00:26:14.720
not appropriate for Python,


00:26:14.720 --> 00:26:16.560
because they're going to be like, you know,


00:26:16.560 --> 00:26:19.440
Java examples or C# examples or something.


00:26:19.440 --> 00:26:20.280
- Right.


00:26:20.280 --> 00:26:21.880
It's static language examples.


00:26:21.880 --> 00:26:22.720
- Yeah.


00:26:22.720 --> 00:26:23.540
- Yeah.


00:26:23.540 --> 00:26:24.640
I also think that they get,


00:26:24.640 --> 00:26:25.920
the way they get used,


00:26:25.920 --> 00:26:27.960
they get used in this like overly general,


00:26:27.960 --> 00:26:28.920
over complicated way.


00:26:28.920 --> 00:26:31.080
So for example, dependency injection.


00:26:31.080 --> 00:26:34.320
I've got something I can maybe have a data access layer


00:26:34.320 --> 00:26:35.520
and I want to be able to configure


00:26:35.520 --> 00:26:37.880
the type of database access it uses


00:26:37.880 --> 00:26:40.200
and I want to be able to configure the logging messages


00:26:40.200 --> 00:26:42.440
that it can send or whether or not it logs to a file


00:26:42.440 --> 00:26:43.720
or at all, right?


00:26:43.720 --> 00:26:45.880
You could take that and require everyone


00:26:45.880 --> 00:26:49.840
to always pass a database core instance to it


00:26:49.840 --> 00:26:52.100
and always pass a logger thing to it


00:26:52.100 --> 00:26:55.400
or you could just have the data access layer have defaults


00:26:55.400 --> 00:26:57.640
and then you override them only if you need to,


00:26:57.640 --> 00:26:59.160
usually in testing.


00:26:59.160 --> 00:27:01.820
And so you can set them up so you always have to feel


00:27:01.820 --> 00:27:03.920
the pain of this structure, or you can set them up


00:27:03.920 --> 00:27:06.080
so you only even know that it exists


00:27:06.080 --> 00:27:08.440
if you need to look into it and change it.


00:27:08.440 --> 00:27:12.360
And I find a lot of times it gets used in the hard way only.


00:27:12.360 --> 00:27:15.040
But the problem is, there's like a little bit of hard here


00:27:15.040 --> 00:27:16.860
and a little bit of hard there, then you compose it,


00:27:16.860 --> 00:27:18.760
it's a little bit more hard, and at the top you're like,


00:27:18.760 --> 00:27:22.040
we need 20 things to create this class and get it started,


00:27:22.040 --> 00:27:23.440
and I don't even know what they're for,


00:27:23.440 --> 00:27:24.880
they've got to be passed way down.


00:27:24.880 --> 00:27:27.640
And like, now we need IOC, now I can't figure out


00:27:27.640 --> 00:27:28.480
where stuff is coming.


00:27:28.480 --> 00:27:31.220
There's just a lot of layers that it adds on.


00:27:31.220 --> 00:27:34.300
So I don't know, salt I think is my best, like spice.


00:27:34.300 --> 00:27:36.160
- Yeah, and sometimes simple is good.


00:27:36.160 --> 00:27:37.980
Sometimes just a cookie is good.


00:27:37.980 --> 00:27:39.100
- Yeah, well, you're right.


00:27:39.100 --> 00:27:42.160
And you can always, sorry, cookie's good.


00:27:42.160 --> 00:27:44.820
You can always start with just write it the simple way


00:27:44.820 --> 00:27:47.260
and then add the stuff if you need it, right?


00:27:47.260 --> 00:27:49.140
Are you really feeling the pain


00:27:49.140 --> 00:27:51.800
that these kind of patterns would solve?


00:27:51.800 --> 00:27:53.060
Okay, bring it in, right?


00:27:53.060 --> 00:27:54.940
You got refactoring tools, you got tests, right?


00:27:54.940 --> 00:27:56.700
- Yeah, and the other thing with the,


00:27:56.700 --> 00:27:59.700
I mean, solid includes things like the Liskov


00:27:59.700 --> 00:28:01.700
substitutability principle.


00:28:01.700 --> 00:28:03.700
How arrogant does that sound?


00:28:03.700 --> 00:28:06.700
I mean, it's one of the things that I have a problem with.


00:28:06.700 --> 00:28:09.700
It just reeks of, "I'm smarter than you


00:28:09.700 --> 00:28:11.700
because I know about this stuff."


00:28:11.700 --> 00:28:13.700
And I just don't like that.


00:28:13.700 --> 00:28:15.700
Yeah.


00:28:15.700 --> 00:28:17.700
It's a cool article, though.


00:28:17.700 --> 00:28:19.700
The solid principles are good to know,


00:28:19.700 --> 00:28:21.700
even if you're not using them everywhere.


00:28:21.700 --> 00:28:23.700
It's good to know, like, these are some design principles,


00:28:23.700 --> 00:28:25.700
and I'm choosing to use them here,


00:28:25.700 --> 00:28:27.700
- You have to use them there because, right?


00:28:27.700 --> 00:28:28.540
- Yeah.


00:28:28.540 --> 00:28:29.360
- Do it consciously, right?


00:28:29.360 --> 00:28:30.200
- Definitely.


00:28:30.200 --> 00:28:32.620
- Speaking of making choices and trade-offs,


00:28:32.620 --> 00:28:35.420
Instagram wrote a cool article recently


00:28:35.420 --> 00:28:37.540
that I thought would be fun to cover


00:28:37.540 --> 00:28:39.580
'cause it's a look inside how they're running


00:28:39.580 --> 00:28:40.660
their Django app.


00:28:40.660 --> 00:28:43.700
They want to basically take typed Python,


00:28:43.700 --> 00:28:46.900
like typed annotations, which they're loving, right?


00:28:46.900 --> 00:28:49.260
They actually did a PyCon presentation


00:28:49.260 --> 00:28:52.580
or I don't know if it's officially under Instagram,


00:28:52.580 --> 00:28:57.580
But Lucas Lenga covered basically how they're using types


00:28:57.580 --> 00:28:59.580
at Instagram when he was there.


00:28:59.580 --> 00:29:01.220
And that was really, really interesting.


00:29:01.220 --> 00:29:04.580
But they were like, look, we have a few HTTP endpoints.


00:29:04.580 --> 00:29:07.700
They've talked about how they're not doing microservices.


00:29:07.700 --> 00:29:09.740
They have a single Django app,


00:29:09.740 --> 00:29:13.740
and it has a few thousand HTTP endpoints in the one app


00:29:13.740 --> 00:29:15.300
on top of other stuff.


00:29:15.300 --> 00:29:18.380
That is a lot of API endpoints.


00:29:18.380 --> 00:29:23.380
And they all exchange like rich types with validation.


00:29:23.380 --> 00:29:27.880
And so they asked the question,


00:29:27.880 --> 00:29:30.880
are methods in code have type annotations?


00:29:30.880 --> 00:29:35.720
We can check that with mypy and stuff like that,


00:29:35.720 --> 00:29:39.480
but how do we have developers know


00:29:39.480 --> 00:29:42.640
whether their APIs are still matching what they should be?


00:29:42.640 --> 00:29:47.220
Because everything returns a JSON response,


00:29:46.100 --> 00:29:49.280
everything takes an HTTP post or a JSON object,


00:29:49.280 --> 00:29:50.940
and what are you going to do with that, right?


00:29:50.940 --> 00:29:54.780
So they went on this mission to try to add this typing


00:29:54.780 --> 00:29:55.900
to their API.


00:29:55.900 --> 00:29:57.960
So they came up with this decorator


00:29:57.960 --> 00:30:00.340
that they can put on a regular typed method


00:30:00.340 --> 00:30:03.780
that converts it to an HTTP endpoint in Django.


00:30:03.780 --> 00:30:04.620
- Okay.


00:30:04.620 --> 00:30:05.580
- Right, so I've got a regular function,


00:30:05.580 --> 00:30:07.800
it just declares its variables,


00:30:07.800 --> 00:30:09.660
it declares they're of this certain type,


00:30:09.660 --> 00:30:10.980
it returns them of another type,


00:30:10.980 --> 00:30:12.360
and you just decorate this thing,


00:30:12.360 --> 00:30:17.360
and boom, it becomes an HTTP endpoint


00:30:17.360 --> 00:30:20.300
that returns JSON based on what it exchanges JSON


00:30:20.300 --> 00:30:23.500
based on what comes in and what goes out,


00:30:23.500 --> 00:30:24.820
which is pretty cool.


00:30:24.820 --> 00:30:25.780
So that's a start, and it says,


00:30:25.780 --> 00:30:27.020
well, you're still just returning JSON responses,


00:30:27.020 --> 00:30:29.420
so how do you get better validation than that?


00:30:29.420 --> 00:30:32.340
So they decided to start using data classes


00:30:32.340 --> 00:30:35.180
or data exchange, because data classes have a type.


00:30:35.180 --> 00:30:38.660
They can be immutable because you can set


00:30:38.660 --> 00:30:40.300
the frozen decorator on them.


00:30:37.820 --> 00:30:41.180
They have type validation through things like mypy


00:30:41.180 --> 00:30:43.480
and whatnot, which is all really cool.


00:30:43.480 --> 00:30:46.820
But remember, they have millions of lines of code


00:30:46.820 --> 00:30:49.140
and thousands of endpoints in a single Django app


00:30:49.140 --> 00:30:50.580
and they're not gonna go, well, you know what?


00:30:50.580 --> 00:30:52.460
We're gonna upgrade every single interaction


00:30:52.460 --> 00:30:53.420
to use data classes, right?


00:30:53.420 --> 00:30:56.420
There's a bunch of dictionaries still going around.


00:30:56.420 --> 00:30:58.660
So have you heard about TypedDict?


00:30:58.660 --> 00:30:59.880
- Yeah, it's neat.


00:30:59.880 --> 00:31:00.780
- Yeah, it's really cool.


00:31:00.780 --> 00:31:03.340
So that comes out as one of the mypy extensions


00:31:03.340 --> 00:31:04.740
and it lets you create a dictionary


00:31:04.740 --> 00:31:06.700
but then also express the types.


00:31:06.700 --> 00:31:08.580
like this key is supposed to be an integer


00:31:08.580 --> 00:31:10.440
and this key is supposed to be a date.


00:31:10.440 --> 00:31:13.380
And so for the older code that couldn't be written


00:31:13.380 --> 00:31:15.620
with data classes, what was just dictionaries,


00:31:15.620 --> 00:31:19.800
they added in typed dicks to help give validation to that


00:31:19.800 --> 00:31:22.560
and type explicit type definitions.


00:31:22.560 --> 00:31:24.060
Instead of saying this thing returns a dick,


00:31:24.060 --> 00:31:26.280
it can return a type that is a type dick,


00:31:26.280 --> 00:31:27.980
but still is compatible with API.


00:31:27.980 --> 00:31:28.820
So that's pretty cool, right?


00:31:28.820 --> 00:31:30.340
- Yeah, this is interesting.


00:31:30.340 --> 00:31:31.360
- Yeah, it's super interesting.


00:31:31.360 --> 00:31:33.100
And so they also talked about how do we dot,


00:31:33.100 --> 00:31:36.720
So once we have these APIs and they have types


00:31:36.720 --> 00:31:37.940
and they have type validation,


00:31:37.940 --> 00:31:40.500
how do we communicate that back to people?


00:31:40.500 --> 00:31:43.820
So they leverage OpenAPI to come up


00:31:43.820 --> 00:31:45.500
with very nice documentation.


00:31:45.500 --> 00:31:46.900
If you got the article open, Brian,


00:31:46.900 --> 00:31:47.780
you could scroll down and you can see


00:31:47.780 --> 00:31:50.860
like a very beautiful API reference


00:31:50.860 --> 00:31:52.460
that was just automatically generated


00:31:52.460 --> 00:31:54.020
out of the API methods.


00:31:54.020 --> 00:31:55.580
- Yeah, OpenAPI is really nice.


00:31:55.580 --> 00:31:56.900
- Yeah, so that's really cool.


00:31:56.900 --> 00:32:00.420
Now, what's also interesting is they go through


00:32:00.420 --> 00:32:01.840
this whole process of what they've done


00:32:01.840 --> 00:32:05.340
and how they've done it, and this is on Medium,


00:32:05.340 --> 00:32:06.680
implicitly, it's on their blog,


00:32:06.680 --> 00:32:08.200
but their blog's running on Medium.


00:32:08.200 --> 00:32:10.360
So you can go and see the comments in there,


00:32:10.360 --> 00:32:12.400
and a lot of people are like, hey, this is cool,


00:32:12.400 --> 00:32:13.920
why don't you use Pydantic?


00:32:13.920 --> 00:32:15.640
Which we've covered Pydantic before,


00:32:15.640 --> 00:32:17.920
it solves many of these problems


00:32:17.920 --> 00:32:19.400
for data exchange and validation.


00:32:19.400 --> 00:32:21.600
Another person's like, you should use FastAPI,


00:32:21.600 --> 00:32:25.200
'cause FastAPI has this typed API methods


00:32:25.200 --> 00:32:27.960
natively at the boundary, you don't have to


00:32:27.960 --> 00:32:31.640
have this decorator that'll transform them into Django.


00:32:31.640 --> 00:32:32.880
- That's really cool.


00:32:32.880 --> 00:32:34.080
But all of these are like,


00:32:34.080 --> 00:32:36.680
hey, I know you have a couple million lines of code


00:32:36.680 --> 00:32:39.760
for a huge project in production.


00:32:39.760 --> 00:32:42.240
Why don't you rewrite that in FastAPI?


00:32:42.240 --> 00:32:43.080
No, right?


00:32:43.080 --> 00:32:43.920
That's just not going to happen.


00:32:43.920 --> 00:32:44.960
- They're already in Django.


00:32:44.960 --> 00:32:46.240
I mean, yeah, I was thinking,


00:32:46.240 --> 00:32:47.520
oh, it's kind of like FastAPI,


00:32:47.520 --> 00:32:49.600
except for they're in Django, so it's different.


00:32:49.600 --> 00:32:50.800
- Yeah, exactly.


00:32:50.800 --> 00:32:52.880
I mean, who wants to take on the job


00:32:52.880 --> 00:32:55.640
of rewriting the entire millions of lines of code


00:32:55.640 --> 00:32:57.600
when they've just gone through the process


00:32:57.600 --> 00:32:59.360
of going, upgrading Django,


00:32:59.360 --> 00:33:01.240
and upgrading from Python 2 to 3, and so on.


00:33:01.240 --> 00:33:03.700
So there's a bunch of interesting comments


00:33:03.700 --> 00:33:05.840
about alternative ways to solve this problem


00:33:05.840 --> 00:33:07.680
if you were starting from scratch.


00:33:07.680 --> 00:33:10.200
But I think it's also interesting to think about that.


00:33:10.200 --> 00:33:13.320
Now one thing that did come out that they could use,


00:33:13.320 --> 00:33:14.680
somebody said, this is cool,


00:33:14.680 --> 00:33:17.920
and if you have typed APIs and nice documentation


00:33:17.920 --> 00:33:20.480
and you're already using OpenAPI,


00:33:20.480 --> 00:33:23.600
why don't you check out SchemaThesis?


00:33:23.600 --> 00:33:24.440
SchemaThesis?


00:33:24.440 --> 00:33:25.680
- SchemaThesis.


00:33:25.680 --> 00:33:27.160
- SchemaThesis.


00:33:27.160 --> 00:33:29.760
So it's a tool for testing your web apps


00:33:29.760 --> 00:33:32.980
based on their API definition.


00:33:32.980 --> 00:33:34.240
So it goes in reverse.


00:33:34.240 --> 00:33:37.320
It looks at the documentation and it says,


00:33:37.320 --> 00:33:39.160
okay, we're going to call your endpoint


00:33:39.160 --> 00:33:41.000
according to the documentation


00:33:41.000 --> 00:33:42.800
and see if it really matches that or not.


00:33:42.800 --> 00:33:44.560
- Yeah, it's really cool, actually.


00:33:44.560 --> 00:33:46.520
- Yeah, so I think that that's actually pretty neat.


00:33:46.520 --> 00:33:48.040
I've never used this.


00:33:48.040 --> 00:33:49.000
Can't necessarily recommend it,


00:33:49.000 --> 00:33:50.400
but it seems pretty interesting


00:33:50.400 --> 00:33:52.600
if you've already got the open API stuff in place.


00:33:52.600 --> 00:33:53.440
So I like that.


00:33:53.440 --> 00:33:56.400
- Yeah, Alexander Holtner brought it up,


00:33:56.400 --> 00:33:58.600
the Schema Thesis Project up when we,


00:33:58.600 --> 00:34:01.280
I talked to him on testing code 107,


00:34:01.280 --> 00:34:02.520
and it sounds pretty neat.


00:34:02.520 --> 00:34:03.680
- Yeah, yeah, very cool.


00:34:03.680 --> 00:34:05.720
All right, well, that's it for our main items.


00:34:05.720 --> 00:34:08.120
Brian, you got anything else you wanna share with folks?


00:34:08.120 --> 00:34:09.520
- One of the things we've done


00:34:09.520 --> 00:34:10.640
for the past couple of episodes


00:34:10.640 --> 00:34:14.080
is talk about the current COVID-19 stuff


00:34:14.080 --> 00:34:15.560
and working from home.


00:34:15.560 --> 00:34:17.160
We didn't mention that at the beginning,


00:34:17.160 --> 00:34:19.400
but I've got, like, actually,


00:34:19.400 --> 00:34:21.400
I wanted to just take this section


00:34:21.400 --> 00:34:24.200
to bring up some things that I'm running into.


00:34:24.200 --> 00:34:27.560
And I'm curious if any of our listeners have some comments,


00:34:27.560 --> 00:34:29.240
but I'm curious about you as well,


00:34:29.240 --> 00:34:30.400
if you have any suggestions.


00:34:30.400 --> 00:34:33.920
So you don't normally switch between Windows and Mac,


00:34:33.920 --> 00:34:34.840
is that correct?


00:34:34.840 --> 00:34:35.960
- No, not usually.


00:34:35.960 --> 00:34:37.880
And if I, actually if I told you,


00:34:37.880 --> 00:34:40.680
I just got bootcamp booting into it,


00:34:40.680 --> 00:34:42.000
and it's driving me crazy


00:34:42.000 --> 00:34:43.940
because even when I was using Parallels,


00:34:43.940 --> 00:34:46.780
I remapped Control + C to be Command + C.


00:34:46.780 --> 00:34:49.440
So even in Windows, I could do Command + C,


00:34:49.440 --> 00:34:51.680
Command + V, and in Windows,


00:34:51.680 --> 00:34:53.900
I could do Command + W to close a window,


00:34:53.900 --> 00:34:56.040
but now I gotta do Alt + F4,


00:34:56.040 --> 00:34:58.580
but oh yeah, the crazy touch bar thing


00:34:58.580 --> 00:35:00.140
doesn't have function keys,


00:35:00.140 --> 00:35:02.500
so now how to do Alt+F4 with no function key.


00:35:02.500 --> 00:35:03.900
Like there's just a bunch of like,


00:35:03.900 --> 00:35:08.480
yeah, it's a challenge if I'm not running a VM, so yes.


00:35:08.480 --> 00:35:10.420
- Okay, so I've got two laptops,


00:35:10.420 --> 00:35:13.380
one of them runs Windows, one of them's running Mac,


00:35:13.380 --> 00:35:15.820
it's a Mac, and so I've got my setup


00:35:15.820 --> 00:35:19.420
with my monitor and my keyboard and everything,


00:35:19.420 --> 00:35:21.580
and I can switch between them.


00:35:21.580 --> 00:35:23.980
I would love to have just a magic switch,


00:35:23.980 --> 00:35:27.160
but apparently USB switches don't happen.


00:35:27.160 --> 00:35:30.700
So I just plug in the USB-C from one to the other.


00:35:30.700 --> 00:35:33.820
So if anybody's got a switch that they know about, great,


00:35:33.820 --> 00:35:35.580
but I don't want to pay like $1,000.


00:35:35.580 --> 00:35:37.060
I was thinking like 50.


00:35:37.060 --> 00:35:39.780
Anyway, what I'm noticing is this whole,


00:35:39.780 --> 00:35:40.860
the Control + C thing.


00:35:40.860 --> 00:35:44.060
So on Mac, it's Command + C, Command + V,


00:35:44.060 --> 00:35:45.580
all that stuff, it's great.


00:35:45.580 --> 00:35:49.040
And then it's Control, that's the thing I'm messing up,


00:35:49.040 --> 00:35:51.380
is the copy and paste and all that stuff


00:35:51.380 --> 00:35:53.020
is different on the two.


00:35:53.020 --> 00:35:57.100
So any idea, is it easier to, can you remap on a Mac?


00:35:57.100 --> 00:36:00.140
Can you make it do Control C and Control V also?


00:36:00.140 --> 00:36:00.980
- I think so.


00:36:00.980 --> 00:36:01.940
I'm pretty sure you can.


00:36:01.940 --> 00:36:04.340
You can go, one thing that I do all the time on the Mac


00:36:04.340 --> 00:36:06.780
is if you go to the keyboard preferences,


00:36:06.780 --> 00:36:08.980
and then you can go in there, you can go to shortcuts.


00:36:08.980 --> 00:36:12.060
And so I'll go to the app shortcuts.


00:36:12.060 --> 00:36:15.100
So if you go to app shortcuts, you could add a new one.


00:36:15.100 --> 00:36:17.300
You could pick all apps or just one.


00:36:17.300 --> 00:36:20.460
So you could go and say edit means,


00:36:20.460 --> 00:36:22.420
paste means this, copy means that.


00:36:22.420 --> 00:36:24.420
And it might not always work, you might have to add it


00:36:24.420 --> 00:36:27.820
for different apps 'cause it has to match the menu


00:36:27.820 --> 00:36:28.660
item exactly.


00:36:28.660 --> 00:36:31.620
So if one is like, I don't know, copy and paste,


00:36:31.620 --> 00:36:33.660
or I don't know, like paste with a capital P


00:36:33.660 --> 00:36:36.460
or a lower P or a dot dot dot or not a dot dot dot,


00:36:36.460 --> 00:36:37.940
those would not be compatible,


00:36:37.940 --> 00:36:40.380
but you could go in there and add the shortcuts


00:36:40.380 --> 00:36:44.980
and just say control V means paste or paste dot dot


00:36:44.980 --> 00:36:46.700
or capital P paste or whatever you gotta do


00:36:46.700 --> 00:36:49.100
for a few of 'em, and then I bet you could


00:36:49.100 --> 00:36:50.660
map it over like that.


00:36:50.660 --> 00:36:51.500
- Yeah, I'll check that.


00:36:51.500 --> 00:36:52.820
The other thing that you could do


00:36:52.820 --> 00:36:54.100
that I used for a little while


00:36:54.100 --> 00:36:58.020
is I had a Windows machine and a Mac at the same time


00:36:58.020 --> 00:36:59.820
on two different computers,


00:36:59.820 --> 00:37:03.100
and I set up a network KVM,


00:37:03.100 --> 00:37:05.500
which is kind of what you're talking about,


00:37:05.500 --> 00:37:07.660
and it lets you actually just have two monitors


00:37:07.660 --> 00:37:08.940
on two computers side by side,


00:37:08.940 --> 00:37:10.660
and the mouse will just move straight across


00:37:10.660 --> 00:37:13.960
from one to the other computer without changing stuff.


00:37:13.960 --> 00:37:16.160
So there's a place called sharemouse.com.


00:37:16.160 --> 00:37:17.100
I cannot recommend it.


00:37:17.100 --> 00:37:18.000
I've never used it.


00:37:18.000 --> 00:37:21.100
I can't seem to find the one that I used to search for


00:37:21.100 --> 00:37:23.260
and use back like five years ago.


00:37:23.260 --> 00:37:25.980
But like a network KVM switch is what you want,


00:37:25.980 --> 00:37:27.100
or something like that.


00:37:27.100 --> 00:37:27.860
So check that out.


00:37:27.860 --> 00:37:30.740
That might let you actually have both at the same time.


00:37:30.740 --> 00:37:34.820
Maybe you can remap command to control across that as well.


00:37:34.820 --> 00:37:35.660
- Okay.


00:37:35.660 --> 00:37:39.540
The other thing is, so we're on episode 177, right?


00:37:39.540 --> 00:37:41.580
We've done most of these episodes


00:37:41.580 --> 00:37:46.060
where I'm using a laptop, and now I'm using a monitor.


00:37:46.060 --> 00:37:49.620
Is it distracting to do, and it's nicer to me,


00:37:49.620 --> 00:37:51.660
to look at you while I'm talking,


00:37:51.660 --> 00:37:56.260
but is it distracting to see somebody looking sideways


00:37:56.260 --> 00:37:57.220
while you're talking?


00:37:57.220 --> 00:37:59.860
- Right, right, 'cause your camera's on your laptop.


00:37:59.860 --> 00:38:02.880
But your main high-risk monitor is in front of you


00:38:02.880 --> 00:38:03.720
without it.


00:38:03.720 --> 00:38:06.020
It's not distracting to me, 'cause I'm used to it.


00:38:06.020 --> 00:38:08.580
There's so many video calls that I'm in these days


00:38:08.580 --> 00:38:11.520
where it's some sort of setup like that.


00:38:11.520 --> 00:38:13.300
I think I'm just overtaking it personally.


00:38:13.300 --> 00:38:14.820
The person never looks at me.


00:38:14.820 --> 00:38:16.540
Or you just don't really like the way I look,


00:38:16.540 --> 00:38:18.180
and you're always like, oh, geez.


00:38:18.180 --> 00:38:19.620
(laughing)


00:38:19.620 --> 00:38:20.460
No, I'm just kidding.


00:38:20.460 --> 00:38:21.820
No, I think it's okay.


00:38:21.820 --> 00:38:23.380
I do have a Logitech.


00:38:23.380 --> 00:38:26.020
I have my MacBook, and it would be off to the side


00:38:26.020 --> 00:38:26.860
as well where the camera is,


00:38:26.860 --> 00:38:29.700
but I got a little USB camera to go at the top.


00:38:29.700 --> 00:38:31.820
- Okay, maybe I'll get a USB camera.


00:38:31.820 --> 00:38:33.380
- Yeah, who knows.


00:38:33.380 --> 00:38:34.980
- Okay, anyway, that was it.


00:38:34.980 --> 00:38:37.940
And also, for some reason, I've got an hour and a half extra


00:38:37.940 --> 00:38:40.940
with no commute time, but I don't know where it goes.


00:38:40.940 --> 00:38:43.260
I don't seem to have more time in the day.


00:38:43.260 --> 00:38:44.860
I seem to have less time.


00:38:44.860 --> 00:38:46.820
But anyway.


00:38:46.820 --> 00:38:47.940
- Maybe you're more accessible.


00:38:47.940 --> 00:38:49.860
I mean, you used to be like kind of accessible


00:38:49.860 --> 00:38:51.140
to the people who were near you.


00:38:51.140 --> 00:38:54.860
Now the entire company has equal access


00:38:54.860 --> 00:38:57.500
to you and your time, right?


00:38:57.500 --> 00:38:59.060
I booked it on your Outlook calendar.


00:38:59.060 --> 00:39:00.660
Like, oh no, not my Outlook calendar.


00:39:00.660 --> 00:39:01.740
Don't even look at that.


00:39:01.740 --> 00:39:03.380
(laughing)


00:39:03.380 --> 00:39:04.220
- Anyway, okay.


00:39:04.220 --> 00:39:05.060
So enough about me.


00:39:05.060 --> 00:39:06.460
- I don't know where my time goes either,


00:39:06.460 --> 00:39:08.500
but yeah, although I don't have more,


00:39:08.500 --> 00:39:10.300
I've lost getting used to that.


00:39:10.300 --> 00:39:13.300
Although I did have to drive my daughter to school


00:39:13.300 --> 00:39:15.500
and sometimes, and that time is back.


00:39:15.500 --> 00:39:17.140
So yeah, I guess I have some time as well.


00:39:17.140 --> 00:39:19.540
I have a quick follow up, really, really quick.


00:39:19.540 --> 00:39:22.540
So we talked about SuperString and their benchmarks last week.


00:39:22.540 --> 00:39:26.980
And the benchmark showing that SuperString is much faster on Python


00:39:26.980 --> 00:39:31.820
and lower memory usage on Python for a bunch of operations and whatnot.


00:39:31.820 --> 00:39:36.220
And I convinced Matt Harrison to cover it and whatnot.


00:39:36.220 --> 00:39:37.820
But on Twitter, a couple of people were like,


00:39:37.820 --> 00:39:39.920
"Hey, I looked at the code and I don't really know


00:39:39.920 --> 00:39:42.480
where the memory improvements are coming from."


00:39:42.480 --> 00:39:44.280
If you look at the benchmark stuff,


00:39:44.280 --> 00:39:47.280
Honestly, I don't know how much better it is or isn't.


00:39:47.280 --> 00:39:49.520
I haven't dug super deep into it.


00:39:49.520 --> 00:39:52.400
But it looks like a lot of the improvements in speed


00:39:52.400 --> 00:39:55.720
are around slices and new string creation


00:39:55.720 --> 00:39:58.000
is not necessarily that much better.


00:39:58.000 --> 00:40:00.440
Anyway, I just wanted to link to a conversation


00:40:00.440 --> 00:40:03.400
with Anthony Sottile and a few other folks


00:40:03.400 --> 00:40:05.000
who are chatting about that.


00:40:05.000 --> 00:40:07.040
So might want to jump in if you really care


00:40:07.040 --> 00:40:08.000
about Superstring.


00:40:08.000 --> 00:40:09.960
- Yeah, and also I'm glad you brought it up


00:40:09.960 --> 00:40:12.960
because I really love that people are calling us on stuff.


00:40:12.960 --> 00:40:16.600
Like people pay attention and go, hey, wait a second.


00:40:16.600 --> 00:40:18.280
You covered something, and I don't


00:40:18.280 --> 00:40:21.960
think that it's as cool as you think it is.


00:40:21.960 --> 00:40:24.000
That's why we have awesome listeners.


00:40:24.000 --> 00:40:26.760
Usually the feedback is, you covered this one thing.


00:40:26.760 --> 00:40:28.520
Did you know there are seven others like it


00:40:28.520 --> 00:40:29.320
that you've never heard of?


00:40:29.320 --> 00:40:30.160
We're like, no.


00:40:30.160 --> 00:40:32.200
Or why did you cover this other thing you don't know about?


00:40:32.200 --> 00:40:34.520
Well, because I didn't know about it until now.


00:40:34.520 --> 00:40:35.520
Are you ready for a joke?


00:40:35.520 --> 00:40:36.720
I am so ready.


00:40:36.720 --> 00:40:38.640
This one is a little bit--


00:40:38.640 --> 00:40:42.560
we've covered this before, but like 75 episodes ago


00:40:42.560 --> 00:40:43.400
or something like that.


00:40:43.400 --> 00:40:44.880
So I feel like it's okay to cover it again


00:40:44.880 --> 00:40:46.960
because I've talked a lot about Windows,


00:40:46.960 --> 00:40:48.880
Windows subsystem for Linux.


00:40:48.880 --> 00:40:52.380
You just talked about the sharing keyboard around it.


00:40:52.380 --> 00:40:56.000
So, you know, in all good nature joking at Windows,


00:40:56.000 --> 00:40:57.160
here's a joke.


00:40:57.160 --> 00:40:59.140
So do you know how many programmers it takes


00:40:59.140 --> 00:41:00.080
to kill a cockroach?


00:41:00.080 --> 00:41:00.920
- No, how many?


00:41:00.920 --> 00:41:01.740
- Two.


00:41:01.740 --> 00:41:03.620
One holds, the other installs Windows on it.


00:41:03.620 --> 00:41:05.240
(laughing)


00:41:05.240 --> 00:41:06.080
- That's funny.


00:41:06.080 --> 00:41:08.840
It takes way more than one person to install Windows.


00:41:08.840 --> 00:41:09.680
(laughing)


00:41:09.680 --> 00:41:10.500
- That's right.


00:41:10.500 --> 00:41:11.920
(laughing)


00:41:11.920 --> 00:41:13.320
Oh, fun.


00:41:13.320 --> 00:41:14.160
All right, well.


00:41:14.160 --> 00:41:14.980
- That's good.


00:41:14.980 --> 00:41:16.000
- Good topics this week, Brian.


00:41:16.000 --> 00:41:17.760
Thanks for sharing them with me and with everyone.


00:41:17.760 --> 00:41:18.600
- Thank you.


00:41:18.600 --> 00:41:19.440
- You bet, bye.


00:41:19.440 --> 00:41:20.260
- Bye.


00:41:20.260 --> 00:41:21.220
- Thank you for listening to Python Bytes.


00:41:21.220 --> 00:41:23.680
Follow the show on Twitter via @PythonBytes.


00:41:23.680 --> 00:41:26.720
That's Python Bytes as in B-Y-T-E-S.


00:41:26.720 --> 00:41:29.920
And get the full show notes at pythonbytes.fm.


00:41:29.920 --> 00:41:31.520
If you have a news item you want featured,


00:41:31.520 --> 00:41:33.980
just visit pythonbytes.fm and send it our way.


00:41:33.980 --> 00:41:36.860
We're always on the lookout for sharing something cool.


00:41:36.860 --> 00:41:38.700
On behalf of myself and Brian Aukin,


00:41:38.700 --> 00:41:40.040
this is Michael Kennedy.


00:41:40.040 --> 00:41:42.040
Thank you for listening and sharing this podcast


00:41:42.040 --> 00:41:43.680
with your friends and colleagues.

