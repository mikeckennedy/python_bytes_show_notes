WEBVTT

00:00:00.001 --> 00:00:05.080
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.080 --> 00:00:10.240
This is episode 177, recorded April 8th, 2020.

00:00:10.240 --> 00:00:11.200
I'm Michael Kennedy.

00:00:11.200 --> 00:00:12.020
And I'm Brian Ecken.

00:00:12.020 --> 00:00:13.960
And this episode is brought to you by Datadog.

00:00:13.960 --> 00:00:16.240
Check them out at pythonbytes.fm/datadog.

00:00:16.240 --> 00:00:17.760
More on that later.

00:00:17.760 --> 00:00:19.740
Brian, can you believe that it's April?

00:00:19.740 --> 00:00:20.920
I really can't.

00:00:20.920 --> 00:00:22.200
It doesn't feel like it.

00:00:22.200 --> 00:00:22.540
I know.

00:00:22.540 --> 00:00:25.580
I feel like we're still kind of in the winter mode and yet it's warm and sunny.

00:00:25.580 --> 00:00:27.920
For the first time in seven months, I've been told.

00:00:27.920 --> 00:00:32.400
Yeah, well, I'm doing yard work, but it was just sort of feel like we're going to skip Easter.

00:00:32.400 --> 00:00:33.560
I don't know what's going on there.

00:00:33.560 --> 00:00:37.660
Yeah, it's crazy times, but at least it's warming up out there and that's lovely.

00:00:37.660 --> 00:00:44.800
So before we get into our main items, I have a very exciting announcement that we were just working on to let everyone know about.

00:00:44.800 --> 00:00:53.720
So we're trying to find other ways for people to learn about or consume the podcast, other ways that you can interact with us, you dear listener.

00:00:54.300 --> 00:00:58.440
And so we are launching a YouTube project, a YouTube channel.

00:00:58.440 --> 00:01:03.440
So right now, if you can and you're up for it, go over to pythonbytes.fm/YouTube.

00:01:03.440 --> 00:01:04.500
Click subscribe.

00:01:04.500 --> 00:01:07.920
I honestly don't know if there's going to be any content there yet.

00:01:07.920 --> 00:01:09.680
Probably, probably maybe.

00:01:09.680 --> 00:01:11.700
We're not 100% sure because there's none now.

00:01:11.780 --> 00:01:14.180
But by the time this episode comes out, I think we'll have some.

00:01:14.180 --> 00:01:21.200
And the idea is each segment that we're covering, we're going to have a dedicated little video of Brian and me talking.

00:01:21.200 --> 00:01:24.160
And if there's another guest, that'll probably involve them as well.

00:01:24.780 --> 00:01:39.260
And so it'll be really nice to have that for everyone, I think, to just be able to quickly dive in and watch a video, see the two of us talking here as we see each other, but also be able to just focus in on one topic.

00:01:39.260 --> 00:01:45.660
I'm not quite sure how it's going to service, but we'll put it on the YouTube channel, probably put on social media and feedback would be very welcome there.

00:01:45.660 --> 00:01:47.000
I'm super excited for this.

00:01:47.000 --> 00:01:47.740
It's going to be great.

00:01:47.740 --> 00:01:48.260
Yeah, absolutely.

00:01:48.260 --> 00:01:48.800
So am I.

00:01:49.240 --> 00:01:53.440
I'm also a little excited for pip and the whole packaging thing around Python.

00:01:53.440 --> 00:01:54.600
Yeah, well, I am too.

00:01:54.600 --> 00:02:05.440
One of the things I'm looking forward to, I think we covered this a couple episodes ago, is the dependency resolver coming in in changes in PIP, which is exciting.

00:02:05.440 --> 00:02:10.100
But one of the reasons why we're having, I mean, there's been a lot of packaging changes lately.

00:02:10.100 --> 00:02:12.940
We've had relaunch of PyPI in 2018.

00:02:12.940 --> 00:02:15.860
Some security features went in in 2019.

00:02:16.640 --> 00:02:24.720
One of the things I didn't know about was more support for users with disabilities and multiple locales were added in 2019.

00:02:24.720 --> 00:02:31.280
And there's been more security features and pip and the dependency resolver being updated for 2020.

00:02:31.280 --> 00:02:41.240
And a lot of this has to do with some money that came in through some sponsorships and through a gift from the, I think it was the Facebook Foundation or something like that.

00:02:41.240 --> 00:02:43.980
But anyway, some money came in, but they were one-time things.

00:02:44.200 --> 00:02:49.160
And the Python Working Group and the Python Software Foundation wanted to keep this going.

00:02:49.160 --> 00:02:55.300
So they're launching an all-new sponsorship program to help sustain and improve the Python's packaging ecosystem.

00:02:55.300 --> 00:03:08.040
And funds raised through this program will go directly towards improving the tools that all of us and your company uses every day to sustain the continued operation of the Python Package Index.

00:03:08.540 --> 00:03:13.080
And so I wanted to highlight this because I think it's really important.

00:03:13.080 --> 00:03:15.600
And I depend on PyPI and packaging.

00:03:15.600 --> 00:03:18.340
And I know my company does even more and more and more.

00:03:18.340 --> 00:03:21.100
More people are moving towards more Python tools.

00:03:21.100 --> 00:03:22.780
We're linking to this page.

00:03:22.780 --> 00:03:28.500
One of the things on there is there's a prospectus for what you get as a sponsor.

00:03:28.740 --> 00:03:31.060
And you can apply to be a sponsor there.

00:03:31.060 --> 00:03:33.680
And there's a link to ask questions as well.

00:03:33.680 --> 00:03:42.720
And then a note there that even if your company doesn't want to sponsor you, individuals can donate money, either sustaining or one-time thing, too.

00:03:42.720 --> 00:03:48.400
Yeah, I think the changes they've made lately have been in the right direction, and I want to have it keep going.

00:03:48.540 --> 00:03:49.380
Yeah, let's keep it going.

00:03:49.380 --> 00:03:56.260
The changes, the major changes, like the big rewrite of PyPI.org happened because there was a grant.

00:03:56.260 --> 00:03:58.460
I think that one was from Mozilla at the time.

00:03:58.460 --> 00:04:05.020
But it was, we actually have some money and some folks can put their full energy for several months onto that project.

00:04:05.020 --> 00:04:06.260
And guess what?

00:04:06.260 --> 00:04:09.480
When you do that, you make a ton of progress and stuff gets better.

00:04:09.480 --> 00:04:17.460
There are so many companies out there whose primary technology stack is running on Python.

00:04:17.460 --> 00:04:27.000
They have billions of dollars of revenue, and they contribute zero back to Python to keep that base that they are built on strong.

00:04:27.000 --> 00:04:36.420
So this is definitely a chance to encourage your employer to make a yearly sponsorship donation or something like that to the PSF.

00:04:36.420 --> 00:04:38.420
They definitely need it now that PyCon got canceled.

00:04:38.420 --> 00:04:41.540
That means less revenue for them as well.

00:04:41.540 --> 00:04:43.880
So it's more important than even usual.

00:04:43.880 --> 00:04:45.480
Yeah, and I think it would be even neat.

00:04:45.480 --> 00:04:47.360
I mean, a lot of people think about these.

00:04:47.360 --> 00:04:48.440
We have the news.

00:04:48.440 --> 00:04:52.240
There's news of these huge grants and stuff, and those are super nice.

00:04:52.240 --> 00:05:01.620
But if all the companies that use Python, and you know they're hitting PyPI all the time, even just pitched in like a couple thousand dollars a year, even.

00:05:01.620 --> 00:05:03.340
Yeah, it would be game-changing.

00:05:03.340 --> 00:05:04.180
That'd be great.

00:05:04.180 --> 00:05:05.480
Yeah, so that'd be cool.

00:05:05.480 --> 00:05:05.860
Absolutely.

00:05:05.860 --> 00:05:08.120
So on to another good cause.

00:05:08.120 --> 00:05:15.500
As listeners probably know, I'm very passionate about making sure that we address climate change and move to renewable energy.

00:05:15.500 --> 00:05:20.900
things like that at all of our infrastructure and our content delivered carbon-free.

00:05:20.900 --> 00:05:27.720
We have a broader initiative to make sure that we offset any of the resources we might be using and so on.

00:05:27.720 --> 00:05:31.820
So this next project is sort of in that vein, and it's called energy usage.

00:05:32.300 --> 00:05:39.140
So the idea is it's a Python package that will allow you to measure the environmental impact of computation.

00:05:39.140 --> 00:05:44.560
So, you know, we've had profilers like Cprofile, and we've had TimeIt, right?

00:05:44.560 --> 00:05:44.820
Yeah.

00:05:44.920 --> 00:05:48.160
So that's basically the idea of this thing, right?

00:05:48.160 --> 00:05:54.360
But instead of asking how much time does it take, you can ask how much energy does it use.

00:05:54.360 --> 00:06:02.160
And what you do is you give it a function, you give it the arguments, and you just say, run this function and figure out how much energy it uses.

00:06:02.160 --> 00:06:13.760
So it sounds silly, but it can measure how much CPU resources, say, versus disk versus network it's doing and actually figure out how much computation that's taking, right?

00:06:13.760 --> 00:06:15.620
Because at the time, it just tells you how long it took.

00:06:15.620 --> 00:06:21.020
It doesn't say, well, actually, 18% was CPU and it was this high and so on.

00:06:21.020 --> 00:06:28.840
And it takes all sorts of things into account, like the loss of energy across the wires, how far you are away, the location that you're in.

00:06:28.840 --> 00:06:35.740
And so it'll actually, the report you get is like, this computation took 1.86 watts of energy.

00:06:35.740 --> 00:06:38.980
And using geolocation, we saw you're in Pennsylvania.

00:06:38.980 --> 00:06:45.900
So that means you've got 25% coal, 0.17% oil, 30% natural gas, 42% renewable.

00:06:45.900 --> 00:06:50.060
And that's how the energy was broken down for this particular run of that function.

00:06:50.060 --> 00:06:58.520
And it's equivalent to, say, you know, like a certain amount of TV watching or driving so far or U.S. household consumption and so on.

00:06:58.820 --> 00:06:59.100
Interesting.

00:06:59.100 --> 00:06:59.840
Interesting, right?

00:06:59.840 --> 00:07:00.160
Yeah.

00:07:00.160 --> 00:07:07.200
So it's just a nice little package that you can point at some code that you're trying to profile and saying, how much energy does this use?

00:07:07.200 --> 00:07:08.540
Should I worry about it?

00:07:08.540 --> 00:07:09.340
Should I optimize it?

00:07:09.340 --> 00:07:14.280
I mean, profiling is pretty close to giving you where you should focus your energy.

00:07:14.640 --> 00:07:19.540
But if you want to know, okay, this is most of the computation, but how much does that actually cost in terms of carbon?

00:07:19.540 --> 00:07:26.420
Or just more specifically, it's measuring energy consumption, which is also just something you have to pay for if you have a data center.

00:07:26.420 --> 00:07:28.500
Then it's pretty interesting, I think.

00:07:28.660 --> 00:07:33.840
Yeah, we could get like maybe a flaky package that would fail your code if it...

00:07:33.840 --> 00:07:35.200
If it uses too much or something, yeah.

00:07:35.200 --> 00:07:36.040
Yeah, yeah.

00:07:36.040 --> 00:07:36.720
It's pretty interesting.

00:07:36.720 --> 00:07:39.220
It'll output PDFs.

00:07:39.220 --> 00:07:45.740
You can run it where it doesn't put anything on the screen, but then it will, you know, save a report to a file or something like that.

00:07:45.740 --> 00:07:47.560
Does it include the running of the...

00:07:47.560 --> 00:07:51.500
I mean, how much energy does it take to run the usage, energy usage?

00:07:51.500 --> 00:07:53.280
That's very meta, yeah.

00:07:53.280 --> 00:07:55.640
I don't know if it...

00:07:55.640 --> 00:07:58.380
How much it actually is computationally intensive.

00:07:58.380 --> 00:08:01.080
But it is worth pointing out sort of because of that.

00:08:01.080 --> 00:08:08.840
It only runs on Linux because of the system CPU inspection parts of it aren't built out to support other operating systems.

00:08:08.840 --> 00:08:11.060
So you have to be on Linux to do this test on your code.

00:08:11.060 --> 00:08:14.040
So anyway, energy usage, people can check that out.

00:08:14.040 --> 00:08:15.100
It's a cool little package.

00:08:15.880 --> 00:08:21.880
Now, before we move on to the next one, let me tell you about Datadog because this episode of Python Bytes is brought to you by Datadog.

00:08:21.880 --> 00:08:23.320
And let me ask you a question.

00:08:23.320 --> 00:08:26.340
Do you have an app in production that is slower than you like?

00:08:26.340 --> 00:08:27.960
Using too much energy, maybe?

00:08:27.960 --> 00:08:30.220
Its performance is all over the place.

00:08:30.220 --> 00:08:31.360
Sometimes it's fast or slow.

00:08:31.360 --> 00:08:34.920
But the most important question is, do you know why it's slow?

00:08:34.920 --> 00:08:36.580
With Datadog, you will.

00:08:36.580 --> 00:08:39.900
You can troubleshoot your app's performance with Datadog's end-to-end tracing.

00:08:39.900 --> 00:08:44.800
Use detailed flame graphs to identify bottlenecks and latency in that finicky app of yours.

00:08:44.800 --> 00:08:47.720
So be the hero that got the app back on track at your company.

00:08:47.720 --> 00:08:50.940
Get started today with a free trial at pythonbytes.fm.

00:08:50.940 --> 00:08:51.640
Slash Datadog.

00:08:51.640 --> 00:08:54.000
Cool Datadog t-shirt included.

00:08:54.000 --> 00:09:00.720
So, Brian, this next one that you put on here, I almost covered it a few weeks ago as well.

00:09:00.720 --> 00:09:02.260
And I was like, yes, this is really interesting.

00:09:02.520 --> 00:09:07.180
But then, I don't know, something else, like there was a shiny object and it pulled my attention away.

00:09:07.180 --> 00:09:10.420
So, yeah, this is a bit of a philosophical one.

00:09:10.420 --> 00:09:10.720
Yeah.

00:09:10.720 --> 00:09:15.820
So this is a, we're linking to just a short little article, but I wanted to talk about the topic.

00:09:15.820 --> 00:09:19.280
The article is called Coding is 90% Google Searching.

00:09:19.360 --> 00:09:20.560
A brief note to beginners.

00:09:20.560 --> 00:09:28.240
And there's really not much here other than saying that, like, I mean, there's, I guess there's three points in trying to learning how to program.

00:09:28.240 --> 00:09:34.920
And a couple of them are good in that just pick one language to start with when you're learning in a program.

00:09:35.000 --> 00:09:36.260
And, of course, pick Python.

00:09:36.260 --> 00:09:39.780
And then start or do a project, like try to do a project.

00:09:39.780 --> 00:09:40.940
Those are great ideas.

00:09:40.940 --> 00:09:44.860
And then the third point is anytime you get stuck, Google it.

00:09:44.860 --> 00:09:50.560
And the point of the article really is I think that coding is 90% Google Searching anyway.

00:09:50.560 --> 00:09:53.700
So, and people don't usually tell beginners that.

00:09:53.700 --> 00:09:57.620
And I don't think I agree with this.

00:09:57.620 --> 00:09:59.440
I was wondering what you think of this.

00:09:59.440 --> 00:10:00.760
I don't think I agree with it either.

00:10:00.760 --> 00:10:02.800
But I'm not sure I agree with you yet either.

00:10:02.800 --> 00:10:05.600
So, let's talk about it because it is interesting.

00:10:05.600 --> 00:10:07.020
And we probably do agree, honestly.

00:10:07.020 --> 00:10:16.240
I think programming, developer career evolution goes through phases and seasons and whatnot.

00:10:16.240 --> 00:10:18.960
I think in the beginning, you're just super lost.

00:10:18.960 --> 00:10:20.960
You just are trying to figure out syntax and whatever.

00:10:20.960 --> 00:10:24.120
And then you feel really good because, oh, I really got the syntax figured out.

00:10:24.120 --> 00:10:26.160
And it turns out, like, that's a minor part of programming.

00:10:26.160 --> 00:10:29.260
Now you've got tracking down bugs and using libraries.

00:10:29.260 --> 00:10:31.580
And you're like, I got to learn what SQLAlchemy is.

00:10:31.580 --> 00:10:32.120
Oh, my gosh.

00:10:32.200 --> 00:10:33.480
What is a migration?

00:10:33.480 --> 00:10:34.420
Okay, Google migration.

00:10:34.420 --> 00:10:35.500
How do I do migrations?

00:10:35.500 --> 00:10:36.400
Well, this isn't working.

00:10:36.400 --> 00:10:38.640
Let me, like, Google and up at Stack Overflow.

00:10:38.640 --> 00:10:47.000
And in that sort of stage where you've crossed over, like, I'm kind of a competent language user of the language.

00:10:47.000 --> 00:10:50.540
But I'm not really, like, the world is actually open.

00:10:50.540 --> 00:10:52.560
And all these libraries and packages are out there.

00:10:52.560 --> 00:10:54.280
And I have no idea what I'm doing.

00:10:54.280 --> 00:10:56.280
Like, I don't even know what third normal form is.

00:10:56.280 --> 00:10:57.360
So I better figure that out.

00:10:57.360 --> 00:11:00.580
Because it says I need it in my design for my SQLAlchemy classes or whatever.

00:11:00.580 --> 00:11:04.900
I think in that season of your career, I kind of agree with this.

00:11:04.900 --> 00:11:06.640
Like, you're just Googling like crazy.

00:11:06.640 --> 00:11:07.920
And it's okay.

00:11:08.080 --> 00:11:10.040
Because Google is really good.

00:11:10.040 --> 00:11:11.940
And the resources out there are really good.

00:11:11.940 --> 00:11:16.520
But when I saw this article, I thought, okay, that's a pretty good message to people who are kind of new.

00:11:16.520 --> 00:11:19.980
Like, you hear how horrible it is to do copy and paste coding.

00:11:20.800 --> 00:11:26.400
And yet, this person is saying, like, they were, I think, a couple of years into their career.

00:11:26.400 --> 00:11:28.080
They're like, look, I do this a lot.

00:11:28.080 --> 00:11:30.340
And I don't feel like I'm cheating or whatever.

00:11:30.340 --> 00:11:38.660
And yet, I don't feel like, if I had to put a number on it, I would say coding is 5% Google searching for me these days.

00:11:38.660 --> 00:11:39.820
5 to 10.

00:11:39.820 --> 00:11:44.700
Depending on what, if it's like something new I'm doing, it's probably 10% to 15.

00:11:44.700 --> 00:11:48.800
But most day-to-day work, it's 5% or less.

00:11:48.800 --> 00:11:49.140
I don't know.

00:11:49.140 --> 00:11:50.040
How do you feel about that?

00:11:50.040 --> 00:11:50.840
I definitely agree.

00:11:50.840 --> 00:11:56.160
Like, for instance, picking up a new framework or something, I'm going to be looking it up a lot.

00:11:56.160 --> 00:11:56.380
Right.

00:11:56.380 --> 00:11:58.960
There's little spikes as you adopt a new thing.

00:11:58.960 --> 00:12:00.620
But then it really goes back down, right?

00:12:00.620 --> 00:12:02.060
But I was paying attention.

00:12:02.060 --> 00:12:05.840
So I was thinking about this the last couple of weeks and paying attention to my coding style.

00:12:05.840 --> 00:12:07.360
And I do.

00:12:07.360 --> 00:12:12.700
There's probably at least a handful of times during the day where I'm Googling something.

00:12:12.700 --> 00:12:14.720
But it isn't like everything.

00:12:14.720 --> 00:12:17.700
It's definitely more of a 5% thing or less.

00:12:17.920 --> 00:12:22.660
And then I realized that a lot of the things I'm Googling is stuff that I've just decided to not memorize.

00:12:22.660 --> 00:12:23.360
Right.

00:12:23.360 --> 00:12:26.700
Like the syntax of weird things.

00:12:26.700 --> 00:12:33.080
Like, I'm pretty sure that I can have like a step size in range, the range function, but I don't use it very often.

00:12:33.080 --> 00:12:34.600
What's that again?

00:12:34.600 --> 00:12:35.720
You know, things like that.

00:12:35.720 --> 00:12:37.740
Like extra stuff.

00:12:37.840 --> 00:12:41.600
And a lot of this, actually, a lot of this stuff, editor support really helps.

00:12:41.600 --> 00:12:46.340
Anyway, if I already know kind of what I'm doing, the editor can pop up what the syntax is.

00:12:46.340 --> 00:12:47.360
That's a really good point.

00:12:47.360 --> 00:12:54.420
Because if I was using just pure Emacs or something that had zero autocomplete, I'd be Googling more for sure.

00:12:55.080 --> 00:12:59.000
But in PyCharm, you hit dot and like, well, there's three choices.

00:12:59.000 --> 00:13:00.160
Then it tells you the parameters.

00:13:00.160 --> 00:13:03.400
Like, you don't need to Google for that stuff anymore because you've got the better tooling.

00:13:03.400 --> 00:13:03.860
Yeah.

00:13:04.000 --> 00:13:05.400
And there's different stuff.

00:13:05.400 --> 00:13:08.660
Like, so the syntax I leave to the IDE a lot.

00:13:08.660 --> 00:13:10.240
There's definitely a skill.

00:13:10.240 --> 00:13:17.480
So one of the things that kind of missed out of this article is it's not that Google searching is 90% of coding.

00:13:17.480 --> 00:13:23.680
It's a big chunk of your skill set is to learn how to Google something effectively.

00:13:24.040 --> 00:13:34.140
So in coding, like, instead of trying to summarize what the error message is and then Googling that, oh, just paste the entire error message in.

00:13:34.140 --> 00:13:35.480
That's like one trick to do.

00:13:35.480 --> 00:13:42.840
And so there's a whole bunch of coding Google tricks to find the information fast because I don't want it to be 90% of the time.

00:13:42.840 --> 00:13:50.280
I want something that I kind of think I remember to be able to look that up in just seconds and then go back to coding again.

00:13:50.280 --> 00:13:52.520
So, yeah, I hope it's not 90%.

00:13:52.520 --> 00:13:54.920
That would be a very slow way to code.

00:13:54.920 --> 00:13:55.520
It would be.

00:13:55.520 --> 00:13:58.880
But I remember that being the case back in the day.

00:13:58.880 --> 00:14:05.700
And for me, it wasn't Googling because I think we had, when I was first doing programming, you'll have to see if you can remember yours.

00:14:05.700 --> 00:14:08.220
But I was using AltaVista, I'm pretty sure.

00:14:08.220 --> 00:14:10.160
Right?

00:14:10.160 --> 00:14:12.120
Like, people who are listening who don't know what that is.

00:14:12.120 --> 00:14:16.660
That was a search engine that was nowhere near as good as Google that existed before Google.

00:14:16.660 --> 00:14:21.680
But the things you would end up, there was not Stack Overflow to search from and all those sorts of things.

00:14:21.940 --> 00:14:25.020
And so, it was a lot of books and a lot of user groups.

00:14:25.020 --> 00:14:25.940
Not user groups.

00:14:25.940 --> 00:14:28.460
Like, Usenet groups, whatever those were called.

00:14:28.460 --> 00:14:34.240
So, there was a lot of, like, reference research stuff in the early days for me as well.

00:14:34.240 --> 00:14:35.280
And I wish there was Google.

00:14:35.280 --> 00:14:37.360
I could have done a lot more effective Google searching.

00:14:38.120 --> 00:14:42.400
But certainly, I think that that is a just past stage one of your career.

00:14:42.480 --> 00:14:44.900
This is a reasonable way to see the world.

00:14:44.900 --> 00:14:45.620
But you're right.

00:14:45.620 --> 00:14:46.660
It's absolutely a skill.

00:14:46.660 --> 00:14:51.060
And the more effective you can be at narrowing in, the better.

00:14:51.060 --> 00:14:56.020
But then I think it actually is, if people are living that life now, like, I'm Googling all the time.

00:14:56.020 --> 00:14:59.400
This just must be, like, the rest of my life, I'm going to just do this.

00:14:59.400 --> 00:15:00.740
That won't be the way it is.

00:15:00.840 --> 00:15:01.040
Yeah.

00:15:01.040 --> 00:15:02.720
I'm thinking back in my memory.

00:15:02.720 --> 00:15:05.300
When I learned to program, there was no internet.

00:15:05.300 --> 00:15:10.280
So, there was, or if there was, I didn't have access to it.

00:15:10.280 --> 00:15:14.040
So, early 90s, late 80s, it was books.

00:15:14.040 --> 00:15:15.960
So, I had references.

00:15:15.960 --> 00:15:24.780
And still, even through my career, early career, I had a couple books that I would rely on because I knew how to look things up quickly.

00:15:24.780 --> 00:15:30.980
So, I had, like, for instance, I had, like, a sticky note right where the, like, the printf translator thing.

00:15:31.100 --> 00:15:37.300
So, if I knew how to printf and scanf, what those little percent signs were and all that stuff.

00:15:37.300 --> 00:15:37.860
Yeah.

00:15:37.860 --> 00:15:38.920
That's a really good point.

00:15:38.920 --> 00:15:39.160
Yeah.

00:15:39.160 --> 00:15:44.280
So, I remember my, I had a C++ primer or something like that.

00:15:44.280 --> 00:15:46.680
And, boy, that thing was all tattered.

00:15:46.680 --> 00:15:48.220
And I used that a lot as well.

00:15:48.220 --> 00:15:48.440
Yeah.

00:15:48.440 --> 00:15:48.880
Yeah.

00:15:48.880 --> 00:15:50.500
But it's not that way either.

00:15:50.500 --> 00:15:52.880
It doesn't matter whether it's a book or Google or whatever.

00:15:52.880 --> 00:15:57.700
It's a phase, but it's not all of coding for the rest of your career.

00:15:57.700 --> 00:15:58.060
Right.

00:15:58.140 --> 00:16:02.500
And then there's stuff that you just end up remembering that you, like, I'm never going to remember this.

00:16:02.500 --> 00:16:04.300
I know I'm going to always have to look this up.

00:16:04.300 --> 00:16:04.720
Right.

00:16:04.720 --> 00:16:08.060
Because there's some block, like printf decoders and stuff like that.

00:16:08.060 --> 00:16:08.600
Yeah, exactly.

00:16:08.600 --> 00:16:09.360
Yeah.

00:16:09.360 --> 00:16:14.760
Like, the stuff for parsing strings and to dates, like, that is not, that is always a Google search for me.

00:16:14.760 --> 00:16:17.400
Because I'm just, I'm not going to remember all the details there.

00:16:17.400 --> 00:16:17.640
Yeah.

00:16:17.640 --> 00:16:21.580
This next one, if I were to set this up, this would definitely be a Google search for me as well.

00:16:21.580 --> 00:16:23.320
So, I'm considering setting it.

00:16:23.320 --> 00:16:26.200
But luckily, I don't have to Google search it because we're covering the show.

00:16:26.200 --> 00:16:28.560
And Chris Moffitt is covering it.

00:16:28.560 --> 00:16:29.520
He wrote it all up for us.

00:16:29.520 --> 00:16:31.660
So, Chris Moffitt wrote an article.

00:16:31.660 --> 00:16:33.940
He's been on Talk Python before.

00:16:34.420 --> 00:16:39.940
And he wrote an article called Using WSL to Build a Python Development Environment on Windows.

00:16:39.940 --> 00:16:42.960
So, WSL is Windows Subsystem for Linux.

00:16:42.960 --> 00:16:43.440
Okay.

00:16:43.440 --> 00:16:52.620
And this is interesting to me because I just recently had this experience where I finally broke down and I decided I've been using Parallels on my Mac.

00:16:52.620 --> 00:16:56.880
And I have a super fast Mac, like a i9 with six cores.

00:16:56.880 --> 00:16:59.680
So, it should be able to run virtual machines just fine.

00:16:59.980 --> 00:17:07.620
And yet, still, when you're working in Windows, you're working in any of the virtual machines, like even a virtualized macOS, it's still like the scrolling's a little bit off.

00:17:07.620 --> 00:17:10.940
Like the keyboard's just tiny bits of late.

00:17:10.940 --> 00:17:15.500
There's just a little bit where it just doesn't feel good to work there, right?

00:17:15.500 --> 00:17:20.080
You can totally do it, but it's kind of, you can tell it's not a perfect experience.

00:17:20.080 --> 00:17:29.500
So, I finally broke down and installed Windows and Boot Camp so I can boot into Windows and have a true native experience or just keep booting into my macOS and have that.

00:17:29.920 --> 00:17:31.020
And that is a lot nicer.

00:17:31.020 --> 00:17:37.920
But one of the reasons I don't want to go to Windows is I really love the terminal in macOS way more than even on Linux.

00:17:37.920 --> 00:17:40.280
It's just super nice.

00:17:40.280 --> 00:17:45.100
And some of the tools you have there are like in deployment on Linux machines.

00:17:45.100 --> 00:17:53.600
So, you have this sort of closer to production world, but you have a nice OS with like GUI tools and little widgets and whatnot with macOS.

00:17:54.320 --> 00:17:58.900
And I was thinking, you know, it's not really fair to Windows to like stick it into this little crummy system.

00:17:58.900 --> 00:18:06.380
So, it's nice to have this other option, but I don't want to go there and do development because I don't have this Linux type system, right?

00:18:06.380 --> 00:18:07.280
It's a nice terminal.

00:18:07.780 --> 00:18:12.320
So, what Chris talked about is basically how to set up Windows subsystem for Linux.

00:18:12.320 --> 00:18:26.560
And there's a new version that came out mid last year called WSL2 that is a lot better, especially around file performance and IO and sharing and like crossing over between Windows and Ubuntu or whatever you choose to run.

00:18:26.560 --> 00:18:27.020
Oh, cool.

00:18:27.020 --> 00:18:27.720
Do you do this any?

00:18:27.840 --> 00:18:32.860
So, I tried it really early on and I haven't tried it since WSL2 is out.

00:18:32.860 --> 00:18:34.320
Yeah, it sounds like it might be worthwhile.

00:18:34.320 --> 00:18:41.280
So, if you look at this thing Chris wrote, he talks about, you know, there's like a little motivation of how it runs and whatnot.

00:18:41.280 --> 00:18:42.560
It'll give people the lowdown.

00:18:42.560 --> 00:18:48.400
But mostly, it's like a step to a guide of how to set up the various things you want.

00:18:48.780 --> 00:18:57.300
So, for example, if you want to be able to have a nice terminal on the Windows side, but then that can talk to the Windows subsystem.

00:18:57.300 --> 00:19:01.380
It talks about installing the new Windows terminal, which we already covered it recently.

00:19:01.380 --> 00:19:08.760
It talks about getting Ubuntu from the store, how to upgrade old WSL installations to like the version 2.

00:19:08.760 --> 00:19:17.900
Also, how you can set it up to use Visual Studio code in Windows that is actually like working on the Windows subsystem for Linux.

00:19:18.020 --> 00:19:29.200
So, like you fire up VS Code and you're doing your work and then one of the environments you could choose is like a WSL environment that's actually running on an ultra lightweight version of Linux.

00:19:29.200 --> 00:19:33.260
So, you know, when you get the little terminal and VS Code and you type over there, right?

00:19:33.260 --> 00:19:36.620
It's running Linux commands, but on your machine still.

00:19:36.620 --> 00:19:37.740
Without a VM.

00:19:37.740 --> 00:19:39.340
I mean, sort of a VM, but not really.

00:19:39.340 --> 00:19:42.100
It's like halfway between Docker and full VMs.

00:19:42.100 --> 00:19:42.700
This looks nice.

00:19:42.700 --> 00:19:47.760
So, what I am usually doing is, I'll have to try this out again.

00:19:47.760 --> 00:19:52.520
But I agree with you that I like to pretend I don't have Windows.

00:19:52.520 --> 00:19:53.520
But I do.

00:19:53.520 --> 00:19:55.640
I mean, my day job, I work on a Windows machine.

00:19:55.640 --> 00:19:58.900
So, maybe this is extra helpful for you because you're going to be there anyway, right?

00:19:58.900 --> 00:19:59.300
Yeah.

00:19:59.300 --> 00:20:01.860
But I mean, so I've already worked around most of it.

00:20:01.860 --> 00:20:03.580
So, I use Git.

00:20:03.580 --> 00:20:09.980
So, Git for Windows comes with Git Bash command, which is kind of have both of them.

00:20:10.060 --> 00:20:12.520
You can do Windows stuff and work around in Bash.

00:20:12.520 --> 00:20:14.580
And it sort of feels like Unix environment.

00:20:14.580 --> 00:20:15.360
Nice.

00:20:15.360 --> 00:20:22.100
Well, I'm very excited about the possibility of just having native feeling OhMyZ shell on Windows.

00:20:22.100 --> 00:20:22.760
Oh, yeah.

00:20:22.760 --> 00:20:23.840
That's going to be nice.

00:20:23.840 --> 00:20:24.160
Yeah.

00:20:24.300 --> 00:20:25.940
Well, and I hope this is a direction.

00:20:25.940 --> 00:20:31.880
I think it is that this WSL stuff is just more and more integrated with the rest of Windows.

00:20:32.140 --> 00:20:33.460
Yeah, the integration is pretty sweet.

00:20:33.460 --> 00:20:37.180
So, if you're in WSL, which is effectively like you're in Ubuntu, right?

00:20:37.180 --> 00:20:45.660
You can type Explorer on the terminal and it will open up the Windows Explorer in that folder, in the Linux folder.

00:20:45.660 --> 00:20:50.900
But it will open up the Windows Explorer, the native file stuff, right?

00:20:50.900 --> 00:20:52.580
On Windows and things like that.

00:20:52.660 --> 00:20:56.040
So, the integration is pretty sweet now, which is what I was thinking is worthwhile.

00:20:56.040 --> 00:20:59.780
Also, to start up this WSL, it's like one second.

00:20:59.780 --> 00:21:03.620
So, it basically feels like starting a sluggish terminal.

00:21:03.620 --> 00:21:04.180
Oh.

00:21:04.180 --> 00:21:06.260
Yeah, it's not bad.

00:21:06.260 --> 00:21:06.480
Right?

00:21:06.480 --> 00:21:07.600
Then it's up and running, right?

00:21:07.600 --> 00:21:07.840
Yeah.

00:21:07.840 --> 00:21:17.520
Anyway, so this is a really cool breakdown of how Chris is working and the various tools, like the various plugins for VS Code and how he configured them to make them all work together and stuff.

00:21:17.520 --> 00:21:22.020
So, if this workflow sounds interesting and useful to you, check out the article.

00:21:22.020 --> 00:21:24.780
It's got a bunch of details and screenshots on how to do it.

00:21:24.780 --> 00:21:26.340
And it's not really worth going into those.

00:21:26.340 --> 00:21:28.000
But I think it's a cool idea.

00:21:28.000 --> 00:21:32.420
And I just want to give a shout out to WSL2 and doing Python on it.

00:21:32.420 --> 00:21:33.340
Yeah, very neat.

00:21:33.340 --> 00:21:34.560
You got a solid one for us, huh?

00:21:34.560 --> 00:21:39.240
We've kind of kicked this can down the road a few times, but I thought we'd take a crack at it.

00:21:39.240 --> 00:21:47.020
There was an article written by Derek D called A Pythonic Guide to Solid Design Principles.

00:21:47.580 --> 00:21:50.880
Are you familiar with what the solid principles are?

00:21:50.880 --> 00:21:57.660
Single responsibility, open-closed, Liskov substitution in something, and dependency injection.

00:21:57.660 --> 00:22:02.460
I forgot what the I is.

00:22:02.460 --> 00:22:04.120
I is Interface Segregation Principle.

00:22:04.120 --> 00:22:04.520
There you go.

00:22:04.520 --> 00:22:04.760
Okay.

00:22:04.760 --> 00:22:06.480
I had to look on that one.

00:22:06.480 --> 00:22:06.820
I cheated.

00:22:06.820 --> 00:22:08.680
I always have to look it up.

00:22:08.680 --> 00:22:10.360
But I was curious.

00:22:10.360 --> 00:22:12.180
So, the article is interesting.

00:22:12.180 --> 00:22:13.460
It's an interesting article.

00:22:13.460 --> 00:22:16.720
So, the idea is taking all these principles.

00:22:16.720 --> 00:22:20.400
And I'm going to have to go through and spell check these.

00:22:20.400 --> 00:22:23.480
But anyway, I don't even know where these came from.

00:22:23.480 --> 00:22:29.220
But this idea that if you're doing object-oriented design, you should have solid object-oriented design.

00:22:29.220 --> 00:22:31.660
I don't know if I completely buy it.

00:22:31.660 --> 00:22:33.660
Actually, I'm pretty sure that I don't.

00:22:34.140 --> 00:22:41.400
But this article goes in and also talks about, kind of relates each one to the Zen of Python as well.

00:22:41.400 --> 00:22:43.880
And sometimes it's a little bit of a stretch.

00:22:43.880 --> 00:22:50.460
And then also just really how to apply these principles in programming and coding in Python.

00:22:51.280 --> 00:22:58.200
I guess I'll just say, my take on solid design principles are, there are things that are good to know about.

00:22:58.200 --> 00:23:01.340
And there's lots of different design principles to know about.

00:23:01.340 --> 00:23:02.880
And these are some of them.

00:23:02.880 --> 00:23:10.160
And in developing object systems with objects, and all Python uses objects, whether you think it does or not.

00:23:10.700 --> 00:23:21.700
If you look at some code and it's hard to maintain, or it already is hard to maintain, maybe some of these principles might help refactor so that it's in a better state.

00:23:21.700 --> 00:23:30.100
But blindly following these rules, actually, I think could possibly make your code even worse, is my take on it.

00:23:30.100 --> 00:23:30.480
Yeah.

00:23:30.480 --> 00:23:32.820
Well, I'm a big fan of design patterns, actually.

00:23:32.820 --> 00:23:35.260
I really love the concept of design patterns.

00:23:35.440 --> 00:23:46.340
And one of the things I love about them is, once you start to think of code in design patterns, you can think of trade-offs in higher-level building blocks than just functions.

00:23:46.340 --> 00:23:47.420
Or here's a class.

00:23:47.420 --> 00:23:50.860
You can think, oh, this is going to be an interface.

00:23:50.860 --> 00:23:53.420
And so what that means is, here's a benefit, and here's a drawback.

00:23:53.420 --> 00:23:55.560
And do we want to go down that path, right?

00:23:55.560 --> 00:24:01.060
Or I like that it lets you think in bigger abstractions than just lines of code or functions.

00:24:01.060 --> 00:24:02.980
So I'm a huge fan of that.

00:24:03.100 --> 00:24:09.540
But one problem that I've seen a lot when people adopt design, first, when they learn design patterns, they become super passionate.

00:24:09.540 --> 00:24:11.140
Like, oh, my gosh, this is so awesome.

00:24:11.140 --> 00:24:15.700
It could be so easy to go, all right, well, these are going into everything.

00:24:15.700 --> 00:24:19.440
Like, every chance I can get to use the visitor pattern, it's going in.

00:24:19.440 --> 00:24:20.680
And you're like, wait, wait, wait, wait.

00:24:20.680 --> 00:24:22.780
The visitor pattern is super complicated.

00:24:22.780 --> 00:24:28.100
And it solves a cool problem, but it is really not obvious or easy to maintain.

00:24:28.260 --> 00:24:33.160
The problem it solves had better be glaring and massive, or you're just making it worse.

00:24:33.160 --> 00:24:37.720
And so I see this kind of stuff as salt and pepper and paprika.

00:24:37.720 --> 00:24:40.680
It's code is better with it.

00:24:40.680 --> 00:24:44.180
But that doesn't mean it should be ultra doused at it.

00:24:44.180 --> 00:24:44.860
You know what I mean?

00:24:44.860 --> 00:24:46.100
Because then it's not better anymore.

00:24:46.100 --> 00:24:50.460
It's all of a sudden, like, this is a really cool study and design patterns.

00:24:50.760 --> 00:24:52.380
I have no idea what's going on.

00:24:52.380 --> 00:24:53.940
Like, for example, dependency injection.

00:24:53.940 --> 00:24:59.380
Like, there's a few places where dependency injection, like, at certain layers might be cool, and you could apply it.

00:24:59.380 --> 00:25:00.220
And it's really neat.

00:25:00.220 --> 00:25:04.840
But if you do it everywhere, you're like, I have no idea what anything is or how any of them get to each other.

00:25:04.840 --> 00:25:06.900
I just know that this is a complete mess.

00:25:06.900 --> 00:25:10.200
And I need a debugger to even figure out what's happening all the time.

00:25:10.200 --> 00:25:14.120
And, like, that's kind of my feeling about solid, especially in Python.

00:25:14.120 --> 00:25:15.800
It's definitely my feeling about design patterns.

00:25:15.800 --> 00:25:16.560
What do you think?

00:25:16.560 --> 00:25:17.960
I definitely have to agree.

00:25:17.960 --> 00:25:21.380
And one of the things that, well, I think I agree.

00:25:21.380 --> 00:25:29.220
Both design patterns and the idea around solid are, they were really developed for other languages.

00:25:29.220 --> 00:25:37.940
I don't think, they're definitely not the first tools that I reach for for making Python more maintainable and design better.

00:25:37.940 --> 00:25:41.320
Like, for instance, the, like you mentioned, dependency injection.

00:25:41.320 --> 00:25:47.480
This is, as far as I can tell, dependency injection should be used very sparingly in Python.

00:25:47.480 --> 00:25:51.320
And there are great, great ways to examples.

00:25:51.320 --> 00:26:03.900
Like, for instance, in an application where you don't want to depend on a particular database style or database, you can set up the database configuration early on and then pass that to the system.

00:26:04.040 --> 00:26:19.040
But the problems with looking up, if you want to know more about solid and more about design patterns, almost all the examples are going to be not appropriate for Python because they're going to be like, you know, Java examples or C# examples or something.

00:26:19.040 --> 00:26:19.600
Right.

00:26:19.600 --> 00:26:21.580
Static language examples.

00:26:21.580 --> 00:26:22.060
Yeah.

00:26:22.240 --> 00:26:22.400
Yeah.

00:26:22.400 --> 00:26:28.840
I also think that they get, the way they get used, they get used in this like overly general, overcomplicated way.

00:26:28.840 --> 00:26:30.340
So, for example, dependency injection.

00:26:30.340 --> 00:26:37.480
I've got something that I can maybe have a data access layer and I want to be able to configure the type of database access it uses.

00:26:37.480 --> 00:26:42.920
And I want to be able to configure the logging messages that it can send or whether or not it logs to a file or at all.

00:26:43.260 --> 00:26:43.480
Right.

00:26:43.480 --> 00:26:51.580
You could take that and require everyone to always pass a database core instance to it and always pass a logger thing to it.

00:26:51.580 --> 00:26:58.440
Or you could just have the data access layer have defaults and then you override them only if you need to, usually in testing.

00:26:58.440 --> 00:27:07.880
So you can set them up so you always have to feel the pain of this structure or you can set them up so you only even know that it exists if you need to look into it and change it.

00:27:08.360 --> 00:27:11.700
And I find a lot of times it gets used in the hard way only.

00:27:11.700 --> 00:27:16.040
But the problem is there's like a little bit of hard here and a little bit of hard there.

00:27:16.040 --> 00:27:16.820
Then you compose it.

00:27:16.820 --> 00:27:17.880
It's a little bit more hard.

00:27:17.880 --> 00:27:21.920
And at the top, you're like, we need 20 things to like create this class and get it started.

00:27:21.920 --> 00:27:23.340
And I don't even know what they're for.

00:27:23.340 --> 00:27:24.780
They've got to be passed way down.

00:27:24.780 --> 00:27:26.660
And like, now we need IOC.

00:27:26.660 --> 00:27:28.260
Now I can't figure out where stuff is coming.

00:27:28.260 --> 00:27:31.140
There's just a lot of like layers that it adds on.

00:27:31.140 --> 00:27:31.920
So, I don't know.

00:27:31.920 --> 00:27:34.020
Salt, I think, is my best, like spice.

00:27:34.020 --> 00:27:34.480
Yeah.

00:27:34.480 --> 00:27:36.040
And sometimes simple is good.

00:27:36.040 --> 00:27:37.800
Sometimes just a cookie is good.

00:27:37.800 --> 00:27:38.120
Yeah.

00:27:38.240 --> 00:27:39.040
Well, you're right.

00:27:39.040 --> 00:27:39.880
And you can always.

00:27:39.880 --> 00:27:41.800
Sorry, cookie is good.

00:27:41.800 --> 00:27:46.500
You can always start with just write it the simple way and then add the stuff if you need it.

00:27:46.500 --> 00:27:46.900
Right.

00:27:46.900 --> 00:27:51.060
Are you really feeling the pain that these kind of patterns would solve?

00:27:51.060 --> 00:27:51.980
Okay.

00:27:51.980 --> 00:27:52.780
Bring it in.

00:27:52.780 --> 00:27:52.940
Right.

00:27:52.940 --> 00:27:53.940
Got refactoring tools.

00:27:53.940 --> 00:27:54.500
Got tests.

00:27:54.500 --> 00:27:54.720
Right.

00:27:54.720 --> 00:27:55.080
Yeah.

00:27:55.080 --> 00:28:01.360
And the other thing with the I mean, solid includes things like the list of substitutability principle.

00:28:01.360 --> 00:28:03.420
How arrogant does that sound?

00:28:03.420 --> 00:28:11.220
I mean, it's one of the things that just I have a problem with is it just it reeks of I'm smarter than you because I know about this stuff.

00:28:11.220 --> 00:28:12.080
Yeah.

00:28:12.200 --> 00:28:13.400
I just don't like that.

00:28:13.400 --> 00:28:14.260
But yeah.

00:28:14.260 --> 00:28:14.880
Yeah.

00:28:14.880 --> 00:28:14.920
Yeah.

00:28:14.920 --> 00:28:15.080
Yeah.

00:28:15.080 --> 00:28:15.120
Yeah.

00:28:15.120 --> 00:28:16.180
It's cool article, though.

00:28:16.180 --> 00:28:18.660
And the solid principles are good to know.

00:28:18.660 --> 00:28:26.340
Even if you're not using them everywhere, it's good to know, like, these are some design principles and I'm choosing to use them here and I'm choosing not to use them there.

00:28:26.720 --> 00:28:26.840
Yeah.

00:28:26.840 --> 00:28:27.540
Because, right?

00:28:27.540 --> 00:28:27.740
Yeah.

00:28:27.740 --> 00:28:28.740
Do it consciously, right?

00:28:28.740 --> 00:28:29.200
Definitely.

00:28:29.200 --> 00:28:40.360
Speaking of making choices and tradeoffs, Instagram wrote a cool article recently that I thought would be fun to cover because it's a look inside how they're running their Django app.

00:28:40.360 --> 00:28:46.700
They want to basically take typed Python, like type annotations, which they're loving, right?

00:28:46.700 --> 00:28:58.980
They actually did a PyCon presentation or I don't know if it's officially under Instagram, but Lucas Lenga covered basically how they're using types to add Instagram when he was there.

00:28:58.980 --> 00:29:00.800
And that was really, really interesting.

00:29:00.800 --> 00:29:04.460
But they're like, look, we have a few HTTP endpoints.

00:29:04.600 --> 00:29:07.560
They've talked about how they're not doing microservices.

00:29:07.560 --> 00:29:14.700
They have a single Django app and it has a few thousand HTTP endpoints in the one app on top of other stuff.

00:29:14.700 --> 00:29:15.060
Wow.

00:29:15.060 --> 00:29:17.860
That is a lot of API endpoints.

00:29:17.860 --> 00:29:18.280
Yeah.

00:29:18.280 --> 00:29:21.860
And they all exchange like rich types with validation.

00:29:21.860 --> 00:29:30.000
And so they asked the question, you know, are methods in code have type annotations?

00:29:30.000 --> 00:29:33.740
We can check that with mypy and stuff like that.

00:29:34.420 --> 00:29:42.160
But how do we have developers know whether their APIs are still matching what they should be?

00:29:42.160 --> 00:29:45.540
Because everything returns a JSON result or JSON response.

00:29:45.540 --> 00:29:49.160
Everything takes an HTTP post or a JSON object.

00:29:49.160 --> 00:29:50.380
And like, what are you going to do with that?

00:29:50.380 --> 00:29:50.600
Right.

00:29:50.600 --> 00:29:55.520
So they went on this mission to try to add this typing to their API.

00:29:55.520 --> 00:30:03.540
So they came up with this decorator that they can put on a regular typed method that converts it to an HTTP endpoint in Django.

00:30:03.540 --> 00:30:03.940
Okay.

00:30:04.200 --> 00:30:04.360
Right.

00:30:04.360 --> 00:30:05.440
So I've got a regular function.

00:30:05.440 --> 00:30:07.200
It just, it declares its variables.

00:30:07.200 --> 00:30:09.580
It declares they're of this certain type.

00:30:09.580 --> 00:30:10.900
It returns them of another type.

00:30:10.900 --> 00:30:12.280
And you just decorate this thing.

00:30:12.280 --> 00:30:20.420
And boom, it becomes an HTTP endpoint that returns JSON based on what it exchanges JSON based on what comes in and what goes out, which is pretty cool.

00:30:20.780 --> 00:30:21.780
So that's a start.

00:30:21.780 --> 00:30:21.780
So that's a start.

00:30:21.780 --> 00:30:24.180
And it says, well, you're still just returning JSON responses.

00:30:24.180 --> 00:30:26.820
So how do you get better validation than that?

00:30:26.980 --> 00:30:32.960
So they decided to start using data classes or data exchange because data classes have a type.

00:30:33.360 --> 00:30:37.160
They can be immutable because you can set the frozen decorator on them.

00:30:37.160 --> 00:30:37.480
Yeah.

00:30:37.480 --> 00:30:42.700
They have a type validation through things like mypy and whatnot, which is all really cool.

00:30:42.700 --> 00:30:49.060
But remember, they have millions of lines of code and thousands of endpoints in a single Django app.

00:30:49.060 --> 00:30:50.500
And they're not going to go, well, you know what?

00:30:50.500 --> 00:30:53.320
We're going to upgrade every single interaction to these data classes, right?

00:30:53.320 --> 00:30:55.800
There's a bunch of dictionaries still going around.

00:30:55.800 --> 00:30:58.240
So have you heard about typed dict?

00:30:58.240 --> 00:30:59.580
Yeah, it's neat.

00:30:59.580 --> 00:31:00.700
Yeah, it's really cool.

00:31:00.700 --> 00:31:02.560
So that comes out as one of the mypy extensions.

00:31:02.560 --> 00:31:06.600
And it lets you create a dictionary, but then also express the types.

00:31:06.600 --> 00:31:09.860
Like this key is supposed to be an integer and this key is supposed to be a date.

00:31:09.860 --> 00:31:15.520
And so for the older code that couldn't be written with data classes, what was just dictionaries,

00:31:15.520 --> 00:31:22.260
they added in typed dicks to help give validation to that and type explicit type definitions.

00:31:22.260 --> 00:31:26.160
Instead of saying this thing returns a dict, it can return a type that is a type dict,

00:31:26.160 --> 00:31:27.720
but still is compatible with the API.

00:31:27.720 --> 00:31:28.640
So that's pretty cool, right?

00:31:28.640 --> 00:31:30.060
Yeah, this is interesting.

00:31:30.060 --> 00:31:31.180
Yeah, it's super interesting.

00:31:31.180 --> 00:31:32.980
And so they also talked about how do we dot.

00:31:32.980 --> 00:31:37.700
So once we have these APIs and they have types and they have type validation,

00:31:37.700 --> 00:31:39.940
how do we communicate that back to people?

00:31:39.940 --> 00:31:45.260
So they leverage open API to come up with very nice documentation.

00:31:45.260 --> 00:31:48.680
If you got the article open, Brian, you could scroll down and you can see like a very beautiful

00:31:48.680 --> 00:31:53.880
like API reference that was just automatically generated out of the API methods.

00:31:53.880 --> 00:31:55.400
Yeah, open API is really nice.

00:31:55.400 --> 00:31:56.480
Yeah, so that's really cool.

00:31:56.480 --> 00:32:01.900
Now, what's also interesting is they go through this whole process of what they've done and

00:32:01.900 --> 00:32:02.600
how they've done it.

00:32:02.600 --> 00:32:05.840
And this is on Medium implicitly.

00:32:05.840 --> 00:32:07.680
It's on their blog, but their blog is running on Medium.

00:32:07.680 --> 00:32:10.280
So you can go and see the comments in there.

00:32:10.280 --> 00:32:12.200
And a lot of people are like, hey, this is cool.

00:32:12.200 --> 00:32:13.560
Why don't you use Pydantic?

00:32:13.560 --> 00:32:15.460
Which we've covered Pydantic before.

00:32:15.460 --> 00:32:19.220
It solves many of these problems for data exchange and validation.

00:32:19.220 --> 00:32:24.800
Another person like, you should use FastAPI because FastAPI has this typed API methods

00:32:24.800 --> 00:32:26.620
natively at the boundary.

00:32:26.620 --> 00:32:30.760
You don't have to like have this decorator that'll transform them into Django.

00:32:30.760 --> 00:32:32.260
That's really cool.

00:32:32.260 --> 00:32:36.200
But all of these are like, hey, I know you have a couple million lines of code

00:32:36.200 --> 00:32:39.080
for like a huge, huge project in production.

00:32:39.680 --> 00:32:41.520
Why don't you rewrite that in FastAPI?

00:32:41.520 --> 00:32:42.700
No, right?

00:32:42.700 --> 00:32:43.660
That's just not going to happen.

00:32:43.660 --> 00:32:44.640
They're already in Django.

00:32:44.640 --> 00:32:45.420
I mean, yeah.

00:32:45.420 --> 00:32:48.640
I was thinking, oh, it's kind of like FastAPI, except for they're in Django.

00:32:48.640 --> 00:32:49.820
So it's different.

00:32:49.820 --> 00:32:50.200
Yeah, exactly.

00:32:50.200 --> 00:32:55.920
I mean, who wants to take on the job of rewriting the entire millions of lines of code when they've

00:32:55.920 --> 00:33:00.880
just gone through the process of going, upgrading Django and upgrading from Python 2 to 3 and

00:33:00.880 --> 00:33:01.200
so on.

00:33:01.240 --> 00:33:05.700
So there's a bunch of interesting comments about alternative ways to solve this problem

00:33:05.700 --> 00:33:07.020
if you were starting from scratch.

00:33:07.020 --> 00:33:07.400
Yeah.

00:33:07.400 --> 00:33:10.140
But I think it's also interesting to think about that.

00:33:10.140 --> 00:33:14.540
Now, one thing that did come out that they could use, somebody said, this is cool.

00:33:14.540 --> 00:33:20.720
And if you have typed APIs and nice documentation and you're already using OpenAPI, why don't

00:33:20.720 --> 00:33:23.220
you check out Schema Thesis?

00:33:23.220 --> 00:33:24.180
Schema Thesis.

00:33:24.180 --> 00:33:25.020
Schema Thesis.

00:33:25.020 --> 00:33:25.280
Schema Thesis.

00:33:25.620 --> 00:33:26.340
Schema Thesis.

00:33:26.340 --> 00:33:32.160
So it's a tool for testing your web apps based on their API definition.

00:33:32.160 --> 00:33:34.100
So it goes in reverse.

00:33:34.100 --> 00:33:39.460
It looks at the documentation and it says, okay, we're going to call your endpoint according

00:33:39.460 --> 00:33:42.660
to the documentation and see if it really matches that or not.

00:33:42.660 --> 00:33:44.220
Yeah, it's really cool, actually.

00:33:44.220 --> 00:33:44.660
Yeah.

00:33:44.660 --> 00:33:46.140
So I think that that's actually pretty neat.

00:33:46.140 --> 00:33:47.700
I've never used this.

00:33:47.700 --> 00:33:51.180
Can't necessarily recommend it, but it seems pretty interesting if you've already got the

00:33:51.180 --> 00:33:52.500
OpenAPI stuff in place.

00:33:52.500 --> 00:33:53.300
So I like that.

00:33:53.300 --> 00:33:59.180
Yeah, Alexander Holtner brought it up, the Schema Thesis project up when I talked to him

00:33:59.180 --> 00:34:00.620
on testing code 107.

00:34:00.620 --> 00:34:02.200
And it sounds pretty neat.

00:34:02.200 --> 00:34:02.940
Yeah, yeah.

00:34:02.940 --> 00:34:03.280
Very cool.

00:34:03.280 --> 00:34:03.820
All right.

00:34:03.820 --> 00:34:05.480
Well, that's it for our main items.

00:34:05.480 --> 00:34:07.700
Brian, you got anything else you want to share with folks?

00:34:07.700 --> 00:34:13.440
One of the things we've done for the past couple of episodes is talk about the current COVID-19

00:34:13.440 --> 00:34:15.080
stuff and working from home.

00:34:15.080 --> 00:34:20.700
We didn't mention that at the beginning, but I've got like, actually, I wanted to just take

00:34:20.700 --> 00:34:23.580
this section to bring up some things that I'm running into.

00:34:23.580 --> 00:34:28.600
And I'm curious if any of our listeners have some comments, but I'm curious about you as

00:34:28.600 --> 00:34:30.200
well, if you have any suggestions.

00:34:30.200 --> 00:34:33.840
So you don't normally switch between Windows and Mac.

00:34:33.840 --> 00:34:34.560
Is that correct?

00:34:34.560 --> 00:34:35.760
No, not usually.

00:34:35.760 --> 00:34:40.640
And if I'm actually, if I told you, I just built, got bootcamp booting into it.

00:34:40.640 --> 00:34:45.640
And it's driving me crazy because even when I was using parallels, I remapped control

00:34:45.640 --> 00:34:50.040
C to be command C. So even in Windows, I could do command C, command V.

00:34:50.040 --> 00:34:53.740
And in Windows, I could do command W to close a window.

00:34:53.740 --> 00:34:55.540
But now I got to do alt F4.

00:34:55.540 --> 00:35:00.020
But oh yeah, the crazy touch bar thing doesn't have function key.

00:35:00.020 --> 00:35:02.380
So now how to do alt F4 with no function key?

00:35:02.380 --> 00:35:07.480
Like there's just a bunch of like, yeah, it's, it's a challenge if I'm not running in a VM.

00:35:07.700 --> 00:35:08.280
So yes.

00:35:08.280 --> 00:35:11.800
Okay. So I've got two laptops for one of them runs Windows.

00:35:11.800 --> 00:35:13.820
One of them's running Mac. It's a Mac.

00:35:13.820 --> 00:35:18.820
And so I've got my setup with my, like my monitor and my keyboard and everything.

00:35:18.820 --> 00:35:20.980
And I can switch between them.

00:35:20.980 --> 00:35:26.580
I would love to have just a magic switch, but apparently USB switches don't happen.

00:35:26.580 --> 00:35:30.200
So I just plug in the USB-C from one to the other.

00:35:30.200 --> 00:35:33.620
So if anybody's got a switch that they know about, great.

00:35:33.620 --> 00:35:35.460
But I don't want to pay like a thousand dollars.

00:35:35.460 --> 00:35:36.500
I was thinking like 50.

00:35:37.020 --> 00:35:40.760
Anyway, what I'm noticing is this whole, the control C thing.

00:35:40.760 --> 00:35:44.720
So on Mac, it's command C, command V, all that stuff.

00:35:44.720 --> 00:35:45.120
It's great.

00:35:45.120 --> 00:35:46.600
And then it's control.

00:35:46.600 --> 00:35:52.500
That's the thing I'm messing up is the copy and paste and all that stuff is different on the two.

00:35:52.500 --> 00:35:53.900
So any idea?

00:35:53.900 --> 00:35:57.080
Is it easier to, can you remap on a Mac?

00:35:57.080 --> 00:35:59.900
Can you make it do control C and control V also?

00:36:00.140 --> 00:36:00.680
I think so.

00:36:00.680 --> 00:36:01.780
I'm pretty sure you can.

00:36:01.780 --> 00:36:02.480
You can go.

00:36:02.480 --> 00:36:06.180
One thing that I do all the time on the Mac is if you go to the keyboard preferences.

00:36:06.180 --> 00:36:06.660
Okay.

00:36:06.660 --> 00:36:08.880
And then you can go in there, you can go to shortcuts.

00:36:08.880 --> 00:36:11.460
And so I'll like go to that, like app shortcuts.

00:36:11.880 --> 00:36:14.520
So if you go to app shortcuts, you could add a new one.

00:36:14.520 --> 00:36:16.980
You could pick all apps or just one.

00:36:17.660 --> 00:36:22.360
So you could go and say edit means, you know, paste means this, copy means that.

00:36:22.360 --> 00:36:23.420
And it might not always work.

00:36:23.420 --> 00:36:28.360
You might have to add it for different apps because it has to match the menu item exactly.

00:36:28.360 --> 00:36:36.320
So if one is like, I don't know, copy and paste or I don't know, like paste with a capital P or lower P or a dot, dot, dot, or not a dot, dot, dot.

00:36:36.380 --> 00:36:47.420
Those would not be compatible, but you could go in there and add the shortcuts and just say control, control V means paste or paste dot, dot, dot, or capital P paste or whatever you got to do for a few of them.

00:36:47.420 --> 00:36:50.020
And then I bet you could map it over like that.

00:36:50.620 --> 00:36:59.000
But the other thing that you could do that I used for a little while is I had a Windows machine and a Mac at the same time on two different computers.

00:36:59.000 --> 00:37:04.920
And I set up a, like a network KVM, which is kind of what you're talking about.

00:37:04.920 --> 00:37:08.800
And it lets you actually just have two monitors on two computers side by side.

00:37:08.800 --> 00:37:13.520
And the mouse will just move straight across from one to the other computer, like without changing stuff.

00:37:13.520 --> 00:37:16.020
So there's a place called share mouse.com.

00:37:16.020 --> 00:37:17.040
I cannot recommend it.

00:37:17.040 --> 00:37:17.840
I've never used it.

00:37:17.840 --> 00:37:27.060
I can't seem to find the one that I used to search for and use back like five years ago, but like a network KVM switch is what you want or something like that.

00:37:27.060 --> 00:37:27.860
So check that out.

00:37:27.860 --> 00:37:30.380
That might let you like actually have both at the same time.

00:37:30.380 --> 00:37:34.440
Maybe you can remap command to control across that as well.

00:37:34.440 --> 00:37:35.040
Okay.

00:37:35.040 --> 00:37:38.860
The other thing is, so we're on episode 177, right?

00:37:38.860 --> 00:37:45.500
We've done all these, most of these episodes where I'm using a laptop and now I'm using a monitor.

00:37:45.860 --> 00:37:57.180
Is it distracting to do, and it's nicer to me to look at you while I'm talking, but is it distracting to see somebody looking sideways while you're talking?

00:37:57.180 --> 00:37:57.700
Right, right.

00:37:57.700 --> 00:37:59.320
Because your camera's on your laptop.

00:37:59.320 --> 00:37:59.780
Yeah.

00:37:59.780 --> 00:38:03.400
But your main high risk monitor is in front of you without it.

00:38:03.400 --> 00:38:03.620
Right.

00:38:03.620 --> 00:38:05.700
It's not distracting to me because I'm used to it.

00:38:05.880 --> 00:38:11.080
There's so many video calls that I'm in these days where it's some sort of setup like that.

00:38:11.080 --> 00:38:11.380
Okay.

00:38:11.380 --> 00:38:13.220
I think I'm just overtaking it personally.

00:38:13.220 --> 00:38:14.300
The person never looks at me.

00:38:14.300 --> 00:38:18.040
Or you just don't really like the way I look and you're always like, oh, geez.

00:38:18.040 --> 00:38:20.200
No, I'm just kidding.

00:38:20.200 --> 00:38:20.760
Okay.

00:38:20.760 --> 00:38:21.720
No, I think it's okay.

00:38:21.720 --> 00:38:23.220
I do have a Logitech.

00:38:23.220 --> 00:38:29.520
I have my MacBook and it would be off to the side as well where the camera is, but I got a little USB camera to go at the top.

00:38:29.660 --> 00:38:30.020
Okay.

00:38:30.020 --> 00:38:31.620
Maybe I'll get a USB camera.

00:38:31.620 --> 00:38:32.200
Yeah.

00:38:32.200 --> 00:38:32.760
Who knows?

00:38:32.760 --> 00:38:33.600
But okay.

00:38:33.600 --> 00:38:34.860
Anyway, that was it.

00:38:34.860 --> 00:38:40.860
And also, for some reason, I've got an hour and a half extra with no commute time, but I don't know where it goes.

00:38:40.860 --> 00:38:42.900
I don't seem to have more time in the day.

00:38:42.900 --> 00:38:44.400
I seem to have less time.

00:38:44.400 --> 00:38:45.180
Yeah.

00:38:45.180 --> 00:38:46.060
Anyway.

00:38:46.060 --> 00:38:47.780
Maybe you're more accessible.

00:38:47.780 --> 00:38:51.100
I mean, you used to be kind of accessible to the people who were near you.

00:38:51.100 --> 00:38:56.580
Now the entire company has equal access to you and your time, right?

00:38:56.580 --> 00:38:57.340
Yeah.

00:38:57.340 --> 00:38:58.980
I booked it on your Outlook calendar.

00:38:59.240 --> 00:39:00.580
Oh no, not my Outlook calendar.

00:39:00.580 --> 00:39:01.400
I don't even look at that.

00:39:01.400 --> 00:39:03.140
Yeah.

00:39:03.140 --> 00:39:03.660
Anyway.

00:39:03.660 --> 00:39:03.980
Okay.

00:39:03.980 --> 00:39:04.860
So enough about me.

00:39:04.860 --> 00:39:07.040
I don't know where my time goes either, but yeah.

00:39:07.040 --> 00:39:08.480
Although I don't have more.

00:39:08.480 --> 00:39:10.300
I've lost getting used to that.

00:39:10.300 --> 00:39:15.500
Although I did have to drive my daughter to school and sometimes, and that time is back.

00:39:15.500 --> 00:39:16.840
So yeah, I guess I have some time as well.

00:39:16.840 --> 00:39:19.500
I have a quick follow-up really, really quick.

00:39:19.500 --> 00:39:22.520
So we talked about SuperString and their benchmarks last week.

00:39:22.520 --> 00:39:28.820
The benchmark showing that SuperString is much faster on Python and lower memory usage on Python

00:39:28.820 --> 00:39:31.180
for a bunch of operations and whatnot.

00:39:31.180 --> 00:39:35.920
And I convinced Matt Harrison to cover it and whatnot.

00:39:35.920 --> 00:39:39.800
But on Twitter, a couple of people were like, hey, I looked at the code and I don't really

00:39:39.800 --> 00:39:41.900
know where the memory improvements are coming from.

00:39:42.600 --> 00:39:47.240
If you look at the benchmark stuff, honestly, I don't know how much better it is or isn't.

00:39:47.240 --> 00:39:49.120
I haven't dug super deep into it.

00:39:49.120 --> 00:39:55.640
But it looks like a lot of the improvements in speed are around slices and new string creation

00:39:55.640 --> 00:39:57.980
is not necessarily that much better.

00:39:57.980 --> 00:40:03.560
Anyway, I just wanted to link to a conversation with Anthony Sotili and a few other folks who

00:40:03.560 --> 00:40:04.960
are chatting about that.

00:40:04.960 --> 00:40:07.780
So might want to jump in if you really care about SuperString.

00:40:07.860 --> 00:40:08.300
Yeah.

00:40:08.300 --> 00:40:12.640
And also, I'm glad you brought it up because I really love that people are calling us on

00:40:12.640 --> 00:40:12.920
stuff.

00:40:12.920 --> 00:40:16.200
People will pay attention and go, hey, wait a second.

00:40:16.200 --> 00:40:17.380
You covered something.

00:40:17.380 --> 00:40:20.500
And I don't think that it's as cool as you think it is.

00:40:20.500 --> 00:40:23.160
That's why we have awesome listeners.

00:40:23.160 --> 00:40:26.740
Usually, the feedback is, you covered this one thing.

00:40:26.740 --> 00:40:29.340
Did you know there are seven others like it that you've never heard of?

00:40:29.340 --> 00:40:30.020
We're like, no.

00:40:30.020 --> 00:40:32.180
Or why did you cover this other thing you don't know about?

00:40:32.180 --> 00:40:33.800
Well, because I didn't know about it until now.

00:40:33.800 --> 00:40:34.240
Yeah.

00:40:34.240 --> 00:40:35.300
Are you ready for a joke?

00:40:35.500 --> 00:40:36.400
I am so ready.

00:40:36.400 --> 00:40:36.760
All right.

00:40:36.760 --> 00:40:42.940
This one is a little bit, we've covered this before, but like 75 episodes ago or something

00:40:42.940 --> 00:40:43.320
like that.

00:40:43.320 --> 00:40:47.300
So I feel like it's okay to cover it again because I've talked a lot about Windows, Windows

00:40:47.300 --> 00:40:48.320
Subsystem for Linux.

00:40:48.320 --> 00:40:52.320
You just talked about the sharing keyboard around it.

00:40:52.320 --> 00:40:56.540
So, you know, in all good nature joking at Windows, here's a joke.

00:40:56.540 --> 00:40:59.960
So do you know how many programmers it takes to kill a cockroach?

00:40:59.960 --> 00:41:00.300
No.

00:41:00.300 --> 00:41:00.640
How many?

00:41:00.640 --> 00:41:01.000
Two.

00:41:01.000 --> 00:41:03.460
One holds, the other installs Windows on it.

00:41:05.080 --> 00:41:05.880
That's funny.

00:41:05.880 --> 00:41:08.220
It takes way more than one person to install Windows.

00:41:08.220 --> 00:41:09.520
That's right.

00:41:09.520 --> 00:41:13.020
Oh, fun.

00:41:13.020 --> 00:41:13.560
All right.

00:41:13.560 --> 00:41:13.820
Well.

00:41:13.820 --> 00:41:14.600
That's good.

00:41:14.600 --> 00:41:15.880
Good topics this week, Brian.

00:41:15.880 --> 00:41:17.400
Thanks for sharing them and with everyone.

00:41:17.400 --> 00:41:18.080
Thank you.

00:41:18.080 --> 00:41:18.420
You bet.

00:41:18.420 --> 00:41:18.640
Bye.

00:41:18.640 --> 00:41:18.940
Bye.

00:41:19.400 --> 00:41:21.020
Thank you for listening to Python Bytes.

00:41:21.020 --> 00:41:23.560
Follow the show on Twitter via at Python Bytes.

00:41:23.560 --> 00:41:26.420
That's Python Bytes as in B-Y-T-E-S.

00:41:26.420 --> 00:41:29.640
And get the full show notes at pythonbytes.fm.

00:41:29.640 --> 00:41:33.860
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:41:33.860 --> 00:41:36.560
We're always on the lookout for sharing something cool.

00:41:36.560 --> 00:41:39.660
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:41:39.660 --> 00:41:43.100
Thank you for listening and sharing this podcast with your friends and colleagues.

