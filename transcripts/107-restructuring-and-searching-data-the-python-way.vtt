
00:00:00.000 --> 00:00:05.840
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.840 --> 00:00:10.880
This is episode 107, recorded December 5th, 2018. I'm Michael Kennedy.


00:00:10.880 --> 00:00:11.840
And I'm Brian Ockin.


00:00:11.840 --> 00:00:17.520
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean.


00:00:17.520 --> 00:00:22.960
Huge supporters of the show, great product, and you get $100 free credit for new users.


00:00:22.960 --> 00:00:27.200
So check them out. I'll tell you more about them later. But Brian, how you been?


00:00:27.200 --> 00:00:28.080
I'm doing really good.


00:00:28.080 --> 00:00:31.060
- Good, so I hear you're working on your stand-up act.


00:00:31.060 --> 00:00:33.000
(laughing)


00:00:33.000 --> 00:00:33.840
- No.


00:00:33.840 --> 00:00:35.240
- No, your stand-up comedy?


00:00:35.240 --> 00:00:39.120
- No, but I do find lots of things funny.


00:00:39.120 --> 00:00:43.860
And we've got a, the first topic turned into a,


00:00:43.860 --> 00:00:46.120
into a Twitter discussion that ended in a joke,


00:00:46.120 --> 00:00:48.120
and so I'm gonna share that later in the show.


00:00:48.120 --> 00:00:49.480
- Right, but like good jokes,


00:00:49.480 --> 00:00:50.720
punchlines go at the end, right?


00:00:50.720 --> 00:00:51.560
- Yeah.


00:00:51.560 --> 00:00:52.400
- Okay, cool.


00:00:52.400 --> 00:00:54.240
- So the topic I wanna talk about is Glam,


00:00:54.240 --> 00:00:57.560
which I'd actually heard about.


00:00:57.560 --> 00:01:01.160
It's a package started by Mahmoud Hashemi,


00:01:01.160 --> 00:01:03.880
who brought us Zerover and other great things.


00:01:03.880 --> 00:01:05.960
It's a package to try to reshape data.


00:01:05.960 --> 00:01:09.460
So if you've got like JSON or really any data


00:01:09.460 --> 00:01:12.280
that is in or data structure that's in one type


00:01:12.280 --> 00:01:15.780
and one shape and you need it in another shape


00:01:15.780 --> 00:01:17.400
or you need some of it out,


00:01:17.400 --> 00:01:18.860
that's what Glom is written for.


00:01:18.860 --> 00:01:20.920
But it's written to be kind of like,


00:01:20.920 --> 00:01:22.580
kind of used like a regular expression is.


00:01:22.580 --> 00:01:25.440
It's a general purpose tool that you can use


00:01:25.440 --> 00:01:27.780
to translate from one thing to another.


00:01:27.780 --> 00:01:30.580
And some of the cool things about it are


00:01:30.580 --> 00:01:32.960
that it's like a path-based,


00:01:32.960 --> 00:01:36.240
you can access things with path-based access.


00:01:36.240 --> 00:01:38.960
Like, as an example, if you were gonna have


00:01:38.960 --> 00:01:43.040
a 3D dictionary, you'd have to pass in--


00:01:43.040 --> 00:01:45.480
- A dictionary of dictionaries of dictionaries,


00:01:45.480 --> 00:01:46.320
sort of thing. - Yeah, so--


00:01:46.320 --> 00:01:48.080
- Or maybe two levels and then an item.


00:01:48.080 --> 00:01:51.440
- So it's sort of a lot of brackets and colons,


00:01:51.440 --> 00:01:54.680
and brackets and quotes and stuff to specify that.


00:01:54.680 --> 00:01:57.880
So they've got a shorthand version that you can say like


00:01:57.880 --> 00:02:02.460
a.b.c or something like that instead of all the brackets.


00:02:02.460 --> 00:02:04.640
It's a fairly simple interface to think about.


00:02:04.640 --> 00:02:08.180
It's a GLOM and then you have a target data,


00:02:08.180 --> 00:02:12.160
target specification, and then you've got some other things


00:02:12.160 --> 00:02:13.480
that you can do like default.


00:02:13.480 --> 00:02:15.760
So if like there's some data that's missing.


00:02:15.760 --> 00:02:18.400
There's a lot of Python ways to do this sort of thing,


00:02:18.400 --> 00:02:20.200
but GLOM is sort of rather complete.


00:02:20.200 --> 00:02:21.960
It does a lot of neat things.


00:02:21.960 --> 00:02:24.200
And one of the neat things it does is


00:02:24.200 --> 00:02:26.840
as you're specifying the from portion


00:02:26.840 --> 00:02:28.960
of your data transformation,


00:02:28.960 --> 00:02:30.480
sometimes something might not be there.


00:02:30.480 --> 00:02:33.080
Like, if you were expecting element C


00:02:33.080 --> 00:02:36.480
in a really nested dictionary,


00:02:36.480 --> 00:02:38.000
and if it's not there,


00:02:38.000 --> 00:02:40.240
that element just doesn't exist,


00:02:40.240 --> 00:02:43.000
you might get something weird in normal Python,


00:02:43.000 --> 00:02:47.160
like the famous none type object is not subscriptable.


00:02:47.160 --> 00:02:49.240
And it doesn't tell you anything about what went wrong.


00:02:49.240 --> 00:02:50.640
So one of the things Colum does


00:02:50.640 --> 00:02:52.280
is gives you better error messages.


00:02:52.280 --> 00:02:57.280
I could not access C part two of the path ABC,


00:02:57.280 --> 00:02:59.580
which is like, oh, well that's way more useful


00:02:59.580 --> 00:03:02.420
than something on this line was none, basically.


00:03:02.420 --> 00:03:03.780
- Yeah, exactly.


00:03:03.780 --> 00:03:05.700
And then they also built in,


00:03:05.700 --> 00:03:07.780
since it's being used in production,


00:03:07.780 --> 00:03:10.260
Mahmoud is using it at work as well.


00:03:10.260 --> 00:03:13.140
It's got a bunch of cool things like built-in data


00:03:13.140 --> 00:03:15.100
exploration and debugging features.


00:03:15.100 --> 00:03:16.940
So when things do go wrong,


00:03:16.940 --> 00:03:19.420
you can sort of interactively try to figure out


00:03:19.420 --> 00:03:20.940
what went wrong.


00:03:20.940 --> 00:03:21.780
- That's really cool.


00:03:21.780 --> 00:03:23.820
I love the way that it works.


00:03:23.820 --> 00:03:25.340
It seems really nice.


00:03:25.340 --> 00:03:27.820
I feel like you could almost do a little--


00:03:27.820 --> 00:03:30.320
like a minor tweak to it to make it even cooler, where you can


00:03:30.320 --> 00:03:32.340
do straight attribute access.


00:03:32.340 --> 00:03:35.100
So you say glom parentheses data, and then the string


00:03:35.100 --> 00:03:36.540
a.b.c.


00:03:36.540 --> 00:03:39.040
It feels to me like you could extend it, say glom of data


00:03:39.040 --> 00:03:43.780
dot a.b.c, and have it understand that and sort


00:03:43.780 --> 00:03:47.160
of apply it so it doesn't look like function calls.


00:03:47.160 --> 00:03:48.620
It looks more like attribute access


00:03:48.620 --> 00:03:50.120
once you sort of glomify an object.


00:03:50.120 --> 00:03:50.860
Who knows?


00:03:50.860 --> 00:03:53.580
But either way, I still think this is really nice,


00:03:53.580 --> 00:03:57.020
especially if you're working with data that comes,


00:03:57.020 --> 00:03:59.860
like you said, in nested dictionaries or things like that,


00:03:59.860 --> 00:04:03.900
where you haven't built some sort of object structure


00:04:03.900 --> 00:04:06.580
to pack it into, like Marshmallow or something.


00:04:06.580 --> 00:04:08.100
You're just like, I'm gonna work with this dictionary,


00:04:08.100 --> 00:04:09.020
and it's kind of painful.


00:04:09.020 --> 00:04:10.940
This seems like it takes a lot of the pain away.


00:04:10.940 --> 00:04:12.820
- Yeah, I have a use case right now


00:04:12.820 --> 00:04:15.940
that we're pulling JSON out of,


00:04:15.940 --> 00:04:20.060
we took an off-the-shelf JSON reporter for PyTest


00:04:20.060 --> 00:04:24.100
that reports all the test output in JSON.


00:04:24.100 --> 00:04:27.140
And it's nice, but it reports like way too much


00:04:27.140 --> 00:04:28.620
than we care about.


00:04:28.620 --> 00:04:32.100
So we're gonna use this to, or something like this


00:04:32.100 --> 00:04:33.940
to translate from what we're getting


00:04:33.940 --> 00:04:36.700
to a data structure that's easier to work with.


00:04:36.700 --> 00:04:38.780
- Yeah, that's quite cool.


00:04:38.780 --> 00:04:39.860
Super nice.


00:04:39.860 --> 00:04:42.660
So I think there's this topic I wanna bring up.


00:04:42.660 --> 00:04:45.100
Let me just know if we've covered it before.


00:04:45.100 --> 00:04:46.740
It has to do with GUIs and Python?


00:04:46.740 --> 00:04:49.420
(laughing)


00:04:49.420 --> 00:04:51.660
- So who's doing standup now?


00:04:51.660 --> 00:04:52.900
I think you're doing the standup.


00:04:52.900 --> 00:04:54.900
- Yeah, I know, pretty much, oh my gosh.


00:04:54.900 --> 00:04:58.180
So long ago, you and I, we started down this path


00:04:58.180 --> 00:05:01.260
on this journey of exploring what we thought


00:05:01.260 --> 00:05:04.100
were the UI frameworks, like WXPython,


00:05:04.100 --> 00:05:08.060
the Phoenix release, and Python for Qt coming along.


00:05:08.060 --> 00:05:10.980
Those were the big pieces of news, and there still are.


00:05:10.980 --> 00:05:12.860
But it seems like every week, somebody's like,


00:05:12.860 --> 00:05:15.220
oh, I know you guys have talked about 26 other


00:05:15.220 --> 00:05:18.460
cool UI frameworks, but do you know about X?


00:05:18.460 --> 00:05:18.960
Yeah.


00:05:18.960 --> 00:05:19.680
Right?


00:05:19.680 --> 00:05:23.640
And even the guy behind Python Simple GUI


00:05:23.640 --> 00:05:26.140
is doing all sorts of cool stuff since we started


00:05:26.140 --> 00:05:27.400
talking about it on the show.


00:05:27.400 --> 00:05:29.600
And there's a lot of cool things happening here.


00:05:29.600 --> 00:05:30.160
Yeah.


00:05:30.160 --> 00:05:31.520
You picked out a really neat one.


00:05:31.520 --> 00:05:37.160
This is a really scientific computing Python GUI focused


00:05:37.160 --> 00:05:37.660
thing.


00:05:37.660 --> 00:05:38.960
And it's really, really simple.


00:05:38.960 --> 00:05:41.760
It's not for building super complicated things.


00:05:41.760 --> 00:05:45.960
The idea is I've got some object or set of objects.


00:05:45.960 --> 00:05:49.160
and I would like to create a GUI around it.


00:05:49.160 --> 00:05:51.960
So, you know, for example, they have like a,


00:05:51.960 --> 00:05:55.000
this camera concept and the camera has a gain


00:05:55.000 --> 00:05:57.480
and an exposure and some functions and stuff like that.


00:05:57.480 --> 00:06:00.840
Like you can take a picture based on those settings.


00:06:00.840 --> 00:06:04.000
And what you can do, it's a little bit like SQLAlchemy


00:06:04.000 --> 00:06:07.800
that you specify, these are the traits of this object.


00:06:07.800 --> 00:06:11.680
And then you use this thing called traits UI from InThought


00:06:11.680 --> 00:06:15.360
and you can upgrade that to like a form basically.


00:06:15.360 --> 00:06:16.880
So you can say, show the camera,


00:06:16.880 --> 00:06:18.980
and it pops up a form, it says, what is the gain,


00:06:18.980 --> 00:06:21.320
what is the exposure, and you can even control


00:06:21.320 --> 00:06:23.600
the widgets that go there, so like an up/down


00:06:23.600 --> 00:06:26.120
numerical thing and so on.


00:06:26.120 --> 00:06:30.200
You can pack on graphs through this Kakoa thing,


00:06:30.200 --> 00:06:32.980
also from InThot, and it's just a really simple way


00:06:32.980 --> 00:06:36.420
to take an object, show it to the user in a GUI form,


00:06:36.420 --> 00:06:37.360
and get their values back.


00:06:37.360 --> 00:06:38.520
- It's actually, it's pretty cool,


00:06:38.520 --> 00:06:42.200
and so the mindset kind of is, people that are,


00:06:42.200 --> 00:06:44.220
again, a lot of people are using Python


00:06:44.220 --> 00:06:46.800
that are not programming isn't their main job.


00:06:46.800 --> 00:06:49.120
So this is something where people would,


00:06:49.120 --> 00:06:50.640
they need access to, you know,


00:06:50.640 --> 00:06:52.880
like let's say a device interaction or something,


00:06:52.880 --> 00:06:54.680
like this example,


00:06:54.680 --> 00:06:56.080
but they need to be able to control it


00:06:56.080 --> 00:06:57.480
in a user interface.


00:06:57.480 --> 00:06:58.940
It doesn't have to be beautiful,


00:06:58.940 --> 00:07:01.360
but actually this looks pretty good.


00:07:01.360 --> 00:07:02.180
- It doesn't look terrible,


00:07:02.180 --> 00:07:04.720
and what's cool is the foundational framework.


00:07:04.720 --> 00:07:09.360
It'll actually find its way to select like WX Python


00:07:09.360 --> 00:07:13.480
or PySide, which is the Python for Qt variant,


00:07:13.480 --> 00:07:17.120
or PyQt 5, so it'll cycle through the known frameworks


00:07:17.120 --> 00:07:19.160
and basically say, well, I found WXPython,


00:07:19.160 --> 00:07:21.240
so we're using that, for example.


00:07:21.240 --> 00:07:23.080
Which is really cool, because a lot of those frameworks


00:07:23.080 --> 00:07:26.240
are much better looking than, say, TK Enter by default.


00:07:26.240 --> 00:07:27.280
- Yeah, that's cool.


00:07:27.280 --> 00:07:29.240
- Yeah, so you can, if you ship your little app,


00:07:29.240 --> 00:07:33.080
like you Py installer it with WXPython, it'll use that.


00:07:33.080 --> 00:07:36.840
You Py installer it with Qt for Python, it'll do that.


00:07:36.840 --> 00:07:37.680
That's really cool.


00:07:37.680 --> 00:07:39.120
- Now I kinda wanna go out and see if I can write


00:07:39.120 --> 00:07:41.280
an oscilloscope interface with this.


00:07:41.280 --> 00:07:42.120
- Yeah, you should do it.


00:07:42.120 --> 00:07:43.720
- I've got other things to do.


00:07:43.720 --> 00:07:46.120
- Oh, come on, you've got a few hours, don't you?


00:07:46.120 --> 00:07:46.960
- Yeah.


00:07:46.960 --> 00:07:47.880
(laughing)


00:07:47.880 --> 00:07:49.280
- Awesome, all right, well, what's next?


00:07:49.280 --> 00:07:52.120
- Another, taking data from one format


00:07:52.120 --> 00:07:53.960
and putting it in another one.


00:07:53.960 --> 00:07:56.240
I found another tool that I figured I'd cover


00:07:56.240 --> 00:07:58.720
in the same episode because I'm comparing them


00:07:58.720 --> 00:08:00.040
at the same time.


00:08:00.040 --> 00:08:04.540
And so this one is called PAMPY, P-A-M-P-Y.


00:08:04.540 --> 00:08:07.360
It's Pattern Matching for Python You Always Dreamed Of.


00:08:07.360 --> 00:08:08.800
That's their tagline.


00:08:08.800 --> 00:08:12.360
It's a very small focused library


00:08:12.360 --> 00:08:14.720
that it's kind of got a neat interface


00:08:14.720 --> 00:08:15.560
that's pretty easy to catch up.


00:08:15.560 --> 00:08:17.600
>>It's got a really interesting interface, yeah.


00:08:17.600 --> 00:08:20.360
>>Yeah, so like the example that we're gonna stick


00:08:20.360 --> 00:08:22.580
in the show notes is you just say


00:08:22.580 --> 00:08:25.620
from PAMPI import match and underscore.


00:08:25.620 --> 00:08:28.160
So they're overusing, they're reusing underscore


00:08:28.160 --> 00:08:30.880
or using it as a thing.


00:08:30.880 --> 00:08:34.360
And so you give it a pattern of known,


00:08:34.360 --> 00:08:36.280
like a known data structure pattern.


00:08:36.280 --> 00:08:38.940
And then you put these blanks in the places


00:08:38.940 --> 00:08:41.160
where you expect other values.


00:08:41.160 --> 00:08:44.400
And then you call match with any data you want


00:08:44.400 --> 00:08:47.440
and then this pattern, and then it spits out


00:08:47.440 --> 00:08:50.720
as many variables as you've put underscores in


00:08:50.720 --> 00:08:52.080
if they match.


00:08:52.080 --> 00:08:55.680
So you can just sort of go through a whole bunch of data


00:08:55.680 --> 00:08:57.760
and pull out just the bits you need


00:08:57.760 --> 00:08:59.040
as long as they match the pattern.


00:08:59.040 --> 00:09:00.880
- This is kind of similar to the one you had before,


00:09:00.880 --> 00:09:03.320
but it's like regular expressions applied


00:09:03.320 --> 00:09:06.000
to a hierarchical structure of data.


00:09:06.000 --> 00:09:07.440
in like a weird, weird way.


00:09:07.440 --> 00:09:09.920
So let me see if I can try to like visualize this for folks.


00:09:09.920 --> 00:09:12.480
So if you have a variable that is a list


00:09:12.480 --> 00:09:14.480
and unless you have one,


00:09:14.480 --> 00:09:17.480
and then the next item is actually the list two, three,


00:09:17.480 --> 00:09:19.160
and then four, you can say,


00:09:19.160 --> 00:09:22.300
match, you know, list of one comma,


00:09:22.300 --> 00:09:24.780
some underscore, a list that contains an underscore


00:09:24.780 --> 00:09:26.240
and a three and then an underscore.


00:09:26.240 --> 00:09:28.220
And then every, whenever you run it through that,


00:09:28.220 --> 00:09:30.640
it'll say, well, we found a match


00:09:30.640 --> 00:09:33.360
and the values for the two underscores were two and four.


00:09:33.360 --> 00:09:34.200
That's pretty cool.


00:09:34.200 --> 00:09:39.280
And the last thing you pass in is the what to do if you find a match.


00:09:39.280 --> 00:09:44.180
And so you can pass in a function that takes that many parameters or a lambda expression


00:09:44.180 --> 00:09:51.320
or something if you want, and it'll call your function with those parameters and do whatever.


00:09:51.320 --> 00:09:54.720
>>Yeah, and you can also just write a function that returns the value so you can capture


00:09:54.720 --> 00:09:56.920
it, which is kind of cool as well.


00:09:56.920 --> 00:09:57.920
Very nice.


00:09:57.920 --> 00:09:58.920
I like it.


00:09:58.920 --> 00:10:02.360
It's one of those things that I think looks really cool and I think would be really useful,


00:10:02.360 --> 00:10:04.160
but I would forget to use it.


00:10:04.160 --> 00:10:07.360
You know, so I guess I gotta remember to use this thing


00:10:07.360 --> 00:10:09.960
next time that I have like a situation


00:10:09.960 --> 00:10:11.120
where it would be a really good fit.


00:10:11.120 --> 00:10:14.280
Where, you know, it's a match for the problem I'm solving.


00:10:14.280 --> 00:10:15.680
- Nice.


00:10:15.680 --> 00:10:17.400
But it's one of those things also I like.


00:10:17.400 --> 00:10:20.360
I'd like to see more packages that are just small,


00:10:20.360 --> 00:10:23.840
sharp tools for one use case or use them for whatever.


00:10:23.840 --> 00:10:27.000
But I mean, I use screwdrivers for all sorts of stuff.


00:10:27.000 --> 00:10:27.920
But, you know.


00:10:27.920 --> 00:10:29.320
- Yeah, the little backhand part's good


00:10:29.320 --> 00:10:31.640
for beating stuff in like nails and whatnot.


00:10:31.640 --> 00:10:33.520
I think that's a great point.


00:10:33.520 --> 00:10:35.720
All right, now before we get on to the next one, which


00:10:35.720 --> 00:10:38.600
has some pretty practical applications, actually,


00:10:38.600 --> 00:10:40.640
I just want to tell you all about DigitalOcean.


00:10:40.640 --> 00:10:43.640
So one of the features I've been really happy with lately


00:10:43.640 --> 00:10:45.040
is their idea of projects.


00:10:45.040 --> 00:10:47.160
Because you go to some of these cloud providers,


00:10:47.160 --> 00:10:49.160
and there's just tons of assets.


00:10:49.160 --> 00:10:50.120
There's servers.


00:10:50.120 --> 00:10:51.120
There's IP addresses.


00:10:51.120 --> 00:10:52.720
There's load balancers.


00:10:52.720 --> 00:10:54.240
They're all just spread in there.


00:10:54.240 --> 00:10:55.960
And you don't know which one goes with which.


00:10:55.960 --> 00:10:57.880
Maybe you've got a QA environment or a staging


00:10:57.880 --> 00:10:59.480
environment and a production one.


00:10:59.480 --> 00:11:01.080
Which goes with which, unless you've


00:11:01.080 --> 00:11:04.760
it really carefully and even then it's hard. So at DigitalOcean you can go create a project


00:11:04.760 --> 00:11:11.560
like a production Python bytes server, you know, as project input the servers and the


00:11:11.560 --> 00:11:16.520
floating IP addresses and all that in there. Same for staging and so on. So they've got all sorts of


00:11:16.520 --> 00:11:23.160
cool features. If you check them out at pythonbytes.fm/digitalocean you'll get $100 credit for new users


00:11:23.160 --> 00:11:27.720
and definitely working out well for us. You guys should check them out. Speaking of getting checked


00:11:27.720 --> 00:11:32.080
Sometimes people get sick or they may be sick


00:11:32.080 --> 00:11:34.180
and you have to go to the doctor


00:11:34.180 --> 00:11:36.540
and the doctor takes some kind of picture


00:11:36.540 --> 00:11:39.700
and says, "I looked at this scan


00:11:39.700 --> 00:11:42.380
"and either you're okay or you're not okay."


00:11:42.380 --> 00:11:45.620
It turns out though that analyzing pictures for patterns


00:11:45.620 --> 00:11:48.380
is something that AI can do really well.


00:11:48.380 --> 00:11:49.220
- Yeah.


00:11:49.220 --> 00:11:53.780
- So Google recently took, in this article,


00:11:53.780 --> 00:11:55.100
it's so funny, it says, "Well, they took this


00:11:55.100 --> 00:12:02.380
off-the-shelf AI and they pointed it at mammogram scans to try to detect a breast


00:12:02.380 --> 00:12:06.820
cancer. And what they found out was a couple of things that were super, super


00:12:06.820 --> 00:12:13.500
interesting. First, this thing they called Lina was able to correctly identify


00:12:13.500 --> 00:12:20.660
tumorous regions 99% of the time. The AI was. That's amazing. I mean it's not a


00:12:20.660 --> 00:12:24.300
100%, but it is much better than doctors.


00:12:24.300 --> 00:12:25.840
I can't remember what the doctor percentage was,


00:12:25.840 --> 00:12:27.140
but it was way off.


00:12:27.140 --> 00:12:29.620
If you have, if it's really a bad case,


00:12:29.620 --> 00:12:32.180
then it's pretty easy, but this is like early detection,


00:12:32.180 --> 00:12:34.460
right, and catching cancer early is the key,


00:12:34.460 --> 00:12:37.920
and this is like much, much better than doctors did.


00:12:37.920 --> 00:12:40.140
So that's really great.


00:12:40.140 --> 00:12:42.300
So I guess the first, the question is,


00:12:42.300 --> 00:12:45.540
does this mean that all the radiologists


00:12:45.540 --> 00:12:48.260
and their jobs and the cancer pathologists,


00:12:48.260 --> 00:12:50.020
their jobs are just gone, right?


00:12:50.020 --> 00:12:51.380
Is that what it means, right?


00:12:51.380 --> 00:12:53.100
'Cause that could be what AI means,


00:12:53.100 --> 00:12:55.340
say, for truck drivers or taxi drivers.


00:12:55.340 --> 00:12:57.360
But you always think of that as kind of low-end jobs.


00:12:57.360 --> 00:13:00.340
But is that really, do people who have medical degrees,


00:13:00.340 --> 00:13:03.660
are they in danger of being kicked out of a job by AI?


00:13:03.660 --> 00:13:04.820
I honestly am on the fence.


00:13:04.820 --> 00:13:05.660
I don't really know.


00:13:05.660 --> 00:13:10.340
Like, this is not a great sign for that skill


00:13:10.340 --> 00:13:12.540
because computers are getting so good at it.


00:13:12.540 --> 00:13:15.460
But one good sign is they did a second trial


00:13:15.460 --> 00:13:17.700
where they took six pathologists


00:13:17.700 --> 00:13:21.600
and they let them do diagnosis with and without


00:13:21.600 --> 00:13:23.200
the AI's assistance.


00:13:23.200 --> 00:13:24.400
And they said with the assistance,


00:13:24.400 --> 00:13:27.280
the doctors found it easier to detect these small problems


00:13:27.280 --> 00:13:28.620
and it only took half as long.


00:13:28.620 --> 00:13:30.220
- Yeah, well that's what I was gonna say.


00:13:30.220 --> 00:13:32.740
I mean, it says 99% of the time,


00:13:32.740 --> 00:13:35.400
but that's not a real statistic.


00:13:35.400 --> 00:13:37.940
We wanna know how many false positives,


00:13:37.940 --> 00:13:39.260
how many false negatives.


00:13:39.260 --> 00:13:42.000
There's gonna be gray area where the computer says,


00:13:42.000 --> 00:13:43.440
yep, there's cancer there.


00:13:43.440 --> 00:13:47.400
And I'm 100% sure, or close.


00:13:47.400 --> 00:13:52.160
In all those cases, the doctor probably would have found it also, but having the computers


00:13:52.160 --> 00:13:54.360
do it is going to be better.


00:13:54.360 --> 00:13:59.840
And then the gray area is we're going to always need doctors to look at the stuff that's questionable,


00:13:59.840 --> 00:14:05.140
like 50% chance that there might be, and they can look at it and go, "Yeah, maybe we should


00:14:05.140 --> 00:14:08.340
redo the test or something," or whatever.


00:14:08.340 --> 00:14:13.240
I don't know about other countries, but I think all of us have a shortage of doctors.


00:14:13.240 --> 00:14:19.920
If we can have the same doctors do 10 or 100 times more patients with the help of AI, then


00:14:19.920 --> 00:14:20.920
go for it.


00:14:20.920 --> 00:14:21.920
Let's do it.


00:14:21.920 --> 00:14:26.840
Yeah, I think that's the real bright point here is to have more doctors and not just


00:14:26.840 --> 00:14:30.720
having more doctors, but having doctors more evenly distributed.


00:14:30.720 --> 00:14:36.560
In a large country like the US, there's very rural parts and there's very urban parts.


00:14:36.560 --> 00:14:41.680
And the access to doctors you have in a big city versus 100 miles from a big city in a


00:14:41.680 --> 00:14:44.160
in a tiny town, that is not the same, right?


00:14:44.160 --> 00:14:47.640
But I can easily see taking a scan at your local doctors,


00:14:47.640 --> 00:14:50.520
shooting it up to the cloud, it says this.


00:14:50.520 --> 00:14:52.840
You jump on a Zoom meeting with another doctor


00:14:52.840 --> 00:14:55.520
for five minutes, it says, hey, here's what the AI says,


00:14:55.520 --> 00:14:58.040
I checked it over, I agree, here's what we're gonna do.


00:14:58.040 --> 00:15:00.300
Either you come to the city for treatment,


00:15:00.300 --> 00:15:02.280
or actually you're fine, you just hang out.


00:15:02.280 --> 00:15:07.280
So I think in the democratization of this for people,


00:15:07.280 --> 00:15:08.280
I think this is really good.


00:15:08.280 --> 00:15:10.440
- Yeah, and speeding things up too,


00:15:10.440 --> 00:15:15.440
It might be that on the walk back from the scanning area


00:15:15.440 --> 00:15:20.220
of your doctor's office back to your normal room,


00:15:20.220 --> 00:15:22.840
in that time, maybe we could have an answer for you


00:15:22.840 --> 00:15:26.240
instead of having to call you later tomorrow or something.


00:15:26.240 --> 00:15:27.280
So it's all good.


00:15:27.280 --> 00:15:28.680
- Yeah, it's definitely good.


00:15:28.680 --> 00:15:30.680
All right, so this next one,


00:15:30.680 --> 00:15:32.760
is this a little bit like 100 Days of Code?


00:15:32.760 --> 00:15:33.600
What is this?


00:15:33.600 --> 00:15:36.520
- I think it is, but it's like Christmas-y.


00:15:36.520 --> 00:15:40.180
So this is the Advent of Code.


00:15:40.180 --> 00:15:42.940
And this has been around since 2015,


00:15:42.940 --> 00:15:45.460
and it's at adventofcode.com.


00:15:45.460 --> 00:15:48.980
It's just sort of a fun code challenges


00:15:48.980 --> 00:15:53.260
that they reveal one per day for 25 days in December.


00:15:53.260 --> 00:15:56.380
And you've got just small programming puzzles


00:15:56.380 --> 00:15:58.540
covering a wide variety of skill sets,


00:15:58.540 --> 00:16:01.740
but they're sort of geared both easy to hard


00:16:01.740 --> 00:16:04.660
and there's not a particular programming language


00:16:04.660 --> 00:16:05.580
you can use.


00:16:05.580 --> 00:16:06.860
So a lot of people have said,


00:16:06.860 --> 00:16:09.180
or I've heard people say they solve them


00:16:09.180 --> 00:16:10.880
in their most comfortable language,


00:16:10.880 --> 00:16:15.840
but then also you've got puzzles of past years available too.


00:16:15.840 --> 00:16:17.060
If you're learning a new language,


00:16:17.060 --> 00:16:18.600
you can try to solve these puzzles


00:16:18.600 --> 00:16:20.240
in a new language as well.


00:16:20.240 --> 00:16:21.080
- Yeah, I really like it.


00:16:21.080 --> 00:16:24.360
That's pretty cool, and the fact that it comes one a day


00:16:24.360 --> 00:16:25.560
is pretty sweet.


00:16:25.560 --> 00:16:26.720
Yeah, and it says it doesn't need


00:16:26.720 --> 00:16:29.160
a lot of computational power, so it should be accessible.


00:16:29.160 --> 00:16:30.840
- Yeah, and then we've also put a link


00:16:30.840 --> 00:16:34.480
into a GitHub repo that's called Awesome Advent of Code,


00:16:34.480 --> 00:16:36.360
which is a whole bunch of extra resources


00:16:36.360 --> 00:16:39.840
like links to where people have posted their solutions


00:16:39.840 --> 00:16:42.200
in particular languages or things like that.


00:16:42.200 --> 00:16:45.520
So if you're really into it, you can check that out also.


00:16:45.520 --> 00:16:48.760
- Yeah, I love it and it's quite timely.


00:16:48.760 --> 00:16:50.840
I guess people are maybe a couple days behind.


00:16:50.840 --> 00:16:53.000
They'll have to do a few in a row, right?


00:16:53.000 --> 00:16:55.560
Being December 5th, but that's okay.


00:16:55.560 --> 00:16:59.540
All right, the last one is a nice year-end type of thing


00:16:59.540 --> 00:17:03.360
as well and it has to do with the sun setting


00:17:03.360 --> 00:17:06.320
of Legacy Python, which most people agree


00:17:06.320 --> 00:17:07.680
I think is a good thing, right?


00:17:07.680 --> 00:17:08.520
- Definitely.


00:17:08.520 --> 00:17:09.340
- Yeah, definitely.


00:17:09.340 --> 00:17:13.240
So when I think of some of the holdouts


00:17:13.240 --> 00:17:16.840
for legacy Python, Python 2, if you will,


00:17:16.840 --> 00:17:21.000
it's often these enterprises, they have big code bases,


00:17:21.000 --> 00:17:22.100
they don't really wanna change them,


00:17:22.100 --> 00:17:24.160
they don't have a large motivation to change them.


00:17:24.160 --> 00:17:26.520
They're often using something like Red Hat Linux


00:17:26.520 --> 00:17:28.260
because they want the stability of that,


00:17:28.260 --> 00:17:29.600
the long-term support of that.


00:17:29.600 --> 00:17:34.360
So the news is Red Hat Linux 8 is now updated


00:17:34.360 --> 00:17:38.280
for Python six, sorry, three, six by default.


00:17:38.280 --> 00:17:39.880
Six would be awesome, that'd be a huge announcement.


00:17:39.880 --> 00:17:43.120
No, three, six by default instead of two, seven.


00:17:43.120 --> 00:17:45.920
So that's pretty interesting, right?


00:17:45.920 --> 00:17:48.200
- Yes, very interesting. - By default, yeah.


00:17:48.200 --> 00:17:51.200
I think I'm linking to the Reddit page.


00:17:51.200 --> 00:17:52.680
Yeah, I'm linking to the Reddit discussion


00:17:52.680 --> 00:17:53.760
that then links to the main article


00:17:53.760 --> 00:17:55.480
because there's some funny stuff in there.


00:17:55.480 --> 00:17:58.280
And I think, Brian, I don't know if this comes from us


00:17:58.280 --> 00:18:01.760
in any way or maybe Matias who started this way back when,


00:18:01.760 --> 00:18:05.680
But the very first comment was just simply


00:18:05.680 --> 00:18:07.180
correcting the title to say,


00:18:07.180 --> 00:18:08.800
no, you didn't mean to say 2.7,


00:18:08.800 --> 00:18:10.440
you meant to say legacy Python.


00:18:10.440 --> 00:18:12.080
(laughing)


00:18:12.080 --> 00:18:12.920
Yes.


00:18:12.920 --> 00:18:15.400
Keep going people, keep going.


00:18:15.400 --> 00:18:16.900
So, yeah, it's pretty cool.


00:18:16.900 --> 00:18:20.240
They said they have only limited support for Python 2.7


00:18:20.240 --> 00:18:24.160
and also no version of Python will be installed by default.


00:18:24.160 --> 00:18:25.960
So you've got to install 3 as well,


00:18:25.960 --> 00:18:29.240
but that's what most of the stuff defaults to.


00:18:29.240 --> 00:18:30.980
- Actually, that's kind of cool


00:18:30.980 --> 00:18:34.020
because then with nothing installed by default,


00:18:34.020 --> 00:18:38.020
we can probably use some statistics better


00:18:38.020 --> 00:18:40.220
because it's hard to tell.


00:18:40.220 --> 00:18:44.340
If it just comes with your install installation,


00:18:44.340 --> 00:18:46.740
then we don't really know what people are choosing.


00:18:46.740 --> 00:18:48.220
- Right, absolutely.


00:18:48.220 --> 00:18:50.820
Yeah, so there's a couple comments that are interesting.


00:18:50.820 --> 00:18:53.900
It says Python 2.7 is available as a package,


00:18:53.900 --> 00:18:55.100
but it'll have a shorter life,


00:18:55.100 --> 00:18:56.900
and the reason it's still available


00:18:56.900 --> 00:18:59.980
is to facilitate a smoother transition to Python 3.


00:18:59.980 --> 00:19:00.940
That's one.


00:19:00.940 --> 00:19:03.660
And they also say, "Customers are advised to use Python 3


00:19:03.660 --> 00:19:07.780
"or Python 2 directly," because the shabangs,


00:19:07.780 --> 00:19:09.900
or sorry, hashbangs that you put at the front,


00:19:09.900 --> 00:19:14.100
at the file, like to say, "This should be executed in Bash.


00:19:14.100 --> 00:19:16.380
"This should be executed in Python."


00:19:16.380 --> 00:19:19.780
Well, now you have to specify a major version.


00:19:19.780 --> 00:19:20.940
You can't say-- - Yeah, Python 3


00:19:20.940 --> 00:19:22.300
or Python 2. - Yeah, you can't just say


00:19:22.300 --> 00:19:24.420
Python up there, that's actually an error.


00:19:24.420 --> 00:19:26.860
You'll see you have to say Python 2 or 3


00:19:26.860 --> 00:19:28.340
if you want this to actually run,


00:19:28.340 --> 00:19:30.580
because they want you to opt in


00:19:30.580 --> 00:19:32.800
and not just choose some sort of default thing.


00:19:32.800 --> 00:19:33.640
It's pretty cool.


00:19:33.640 --> 00:19:37.780
So another step towards the present future.


00:19:37.780 --> 00:19:40.540
- Yeah, so I've never seen Hashbang before.


00:19:40.540 --> 00:19:42.380
- Yeah, I usually see it as shabang,


00:19:42.380 --> 00:19:43.740
but they say Hashbangs here, yeah.


00:19:43.740 --> 00:19:44.580
- Okay.


00:19:44.580 --> 00:19:45.860
- It must be the enterprise term.


00:19:45.860 --> 00:19:46.900
(laughing)


00:19:46.900 --> 00:19:47.740
- Maybe.


00:19:47.740 --> 00:19:48.560
- Cool.


00:19:48.560 --> 00:19:50.700
Well, that's pretty much all the news we have for this week.


00:19:50.700 --> 00:19:51.540
There's tons more.


00:19:51.540 --> 00:19:54.440
We're always not covering all the items.


00:19:54.440 --> 00:19:57.180
There's so much going on, but that's our news.


00:19:57.180 --> 00:19:59.380
I do want to throw out one thing here,


00:19:59.380 --> 00:20:02.140
and I know Brian, I'm still waiting for that punchline


00:20:02.140 --> 00:20:02.640
there.


00:20:02.640 --> 00:20:04.060
So before we get to that, though,


00:20:04.060 --> 00:20:08.380
I want to say thanks to Brian McCullough over at TechMeme.


00:20:08.380 --> 00:20:11.300
So TechMeme is a website that's got all the latest news on tech,


00:20:11.300 --> 00:20:12.620
which is pretty cool.


00:20:12.620 --> 00:20:15.820
And they have a podcast called The Long Ride Home.


00:20:15.820 --> 00:20:16.860
You can check that out.


00:20:16.860 --> 00:20:18.100
So the reason I'm bringing this up here


00:20:18.100 --> 00:20:19.220
is it's a pretty cool show.


00:20:19.220 --> 00:20:24.020
It's kind of like Python Bytes, but more for general tech.


00:20:24.020 --> 00:20:26.900
You know, like, oh, Google acquired this company,


00:20:26.900 --> 00:20:29.860
or this thing's happening to the iPhone or whatever, right?


00:20:29.860 --> 00:20:32.240
So it's good analysis, it's well done,


00:20:32.240 --> 00:20:33.280
it's about the same length.


00:20:33.280 --> 00:20:35.860
But the reason I'm calling him out and saying thank you


00:20:35.860 --> 00:20:37.640
is he actually covered Python Bytes


00:20:37.640 --> 00:20:40.180
as the first recommended podcast on his show.


00:20:40.180 --> 00:20:41.460
So I just wanna say thanks, Brian,


00:20:41.460 --> 00:20:43.260
and you guys can check out their show as well.


00:20:43.260 --> 00:20:45.620
- Yeah, definitely, and because they did that,


00:20:45.620 --> 00:20:48.700
which it's a really cool call out too, thanks, Brian.


00:20:48.700 --> 00:20:50.660
But I listened to a couple episodes


00:20:50.660 --> 00:20:52.100
and I kinda liked it, it's nice.


00:20:52.100 --> 00:20:52.940
- Yeah, it's nice, I like it.


00:20:52.940 --> 00:20:55.980
It's a good, it's sort of a cousin of the show, if you will.


00:20:55.980 --> 00:20:56.820
- Yeah.


00:20:56.820 --> 00:20:58.060
- All right, all right, tell me about this punchline, man.


00:20:58.060 --> 00:21:00.760
- Okay, so I had heard of Glam before,


00:21:00.760 --> 00:21:02.820
but I heard about it a lot more


00:21:02.820 --> 00:21:05.420
when I had Mahmood on testing code.


00:21:05.420 --> 00:21:07.160
And we talked about Glam,


00:21:07.160 --> 00:21:08.720
but we mostly were talking about


00:21:08.720 --> 00:21:11.660
how difficult it was to test it,


00:21:11.660 --> 00:21:14.920
because if you're using a high-level construct,


00:21:14.920 --> 00:21:16.580
you don't have to write very much code for it,


00:21:16.580 --> 00:21:19.460
so your code can be 100% covered,


00:21:19.460 --> 00:21:21.980
but you really haven't covered all the cases yet.


00:21:21.980 --> 00:21:22.960
So how do you deal with that?


00:21:22.960 --> 00:21:24.220
So we talked about that.


00:21:24.220 --> 00:21:27.060
And then Anthony Shaw got on Twitter


00:21:27.060 --> 00:21:29.660
and started talking about some of the ways


00:21:29.660 --> 00:21:31.820
we could increase the coverage of Glam.


00:21:31.820 --> 00:21:35.580
And then I pointed out holes in his solution.


00:21:35.580 --> 00:21:38.180
And then he replied with this joke.


00:21:38.180 --> 00:21:42.380
And the joke originally came from Brennan Keller.


00:21:42.380 --> 00:21:45.780
And it's a QA engineer walks into a bar.


00:21:45.780 --> 00:21:47.020
He orders a beer.


00:21:47.020 --> 00:21:48.300
Orders zero beers.


00:21:48.300 --> 00:21:52.240
Orders 9,999,000 beers.


00:21:52.240 --> 00:21:53.340
Orders a lizard.


00:21:53.340 --> 00:21:57.840
orders minus one beers, orders a random set of characters.


00:21:57.840 --> 00:22:00.680
Okay, now a first real customer walks in


00:22:00.680 --> 00:22:02.480
and asks where the bathroom is.


00:22:02.480 --> 00:22:04.520
The bar bursts into flames, killing everyone.


00:22:04.520 --> 00:22:05.400
(laughing)


00:22:05.400 --> 00:22:06.240
- I love it.


00:22:06.240 --> 00:22:07.920
It is so perfect.


00:22:07.920 --> 00:22:09.080
(laughing)


00:22:09.080 --> 00:22:09.920
- Anyway.


00:22:09.920 --> 00:22:13.680
It has nothing to do with anything, it's just funny.


00:22:13.680 --> 00:22:15.160
- Yeah, no, it's really good, I like it.


00:22:15.160 --> 00:22:16.480
It's great, thanks for sharing.


00:22:16.480 --> 00:22:18.160
- Man, thanks for doing this podcast with me.


00:22:18.160 --> 00:22:19.000
It's been fun.


00:22:19.000 --> 00:22:20.200
- It's fun as always.


00:22:20.200 --> 00:22:21.660
We're gonna keep it rolling.


00:22:21.660 --> 00:22:24.360
strong into 2019 for sure. Catch you later.


00:22:24.360 --> 00:22:25.020
>> Yeah. All right. Bye.


00:22:25.020 --> 00:22:25.300
>> Bye.


00:22:25.300 --> 00:22:27.100
>> Thank you for listening to Python Bytes.


00:22:27.100 --> 00:22:29.580
Follow the show on Twitter via @PythonBytes,


00:22:29.580 --> 00:22:32.640
that's Python Bytes as in B-Y-T-E-S,


00:22:32.640 --> 00:22:36.020
and get the full show notes at PythonBytes.fm.


00:22:36.020 --> 00:22:37.740
If you have a news item you want featured,


00:22:37.740 --> 00:22:40.220
just visit PythonBytes.fm and send it our way.


00:22:40.220 --> 00:22:43.180
We're always on the lookout for sharing something cool.


00:22:43.180 --> 00:22:45.180
On behalf of myself and Brian Aukin,


00:22:45.180 --> 00:22:46.520
this is Michael Kennedy.


00:22:46.520 --> 00:22:48.040
Thank you for listening and sharing


00:22:48.040 --> 00:22:50.900
this podcast with your friends and colleagues.

