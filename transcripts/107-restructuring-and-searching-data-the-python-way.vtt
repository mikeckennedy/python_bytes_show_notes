WEBVTT

00:00:00.001 --> 00:00:05.720
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.720 --> 00:00:10.920
This is episode 107, recorded December 5th, 2018. I'm Michael Kennedy.

00:00:10.920 --> 00:00:11.820
And I'm Brian Ockman.

00:00:11.820 --> 00:00:17.240
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/DigitalOcean.

00:00:17.240 --> 00:00:22.500
Huge supporters of the show, great product, and you get $100 free credit for new users.

00:00:22.500 --> 00:00:26.900
So check them out. I'll tell you more about them later. But Brian, how you been?

00:00:26.900 --> 00:00:28.120
I'm doing really good.

00:00:28.120 --> 00:00:30.840
Good. So I hear you're working on your stand-up act.

00:00:30.840 --> 00:00:33.180
No.

00:00:33.180 --> 00:00:35.020
No? Your stand-up comedy?

00:00:35.020 --> 00:00:45.980
No, but I do find lots of things funny. And we've got the first topic turned into a Twitter discussion that ended in a joke.

00:00:45.980 --> 00:00:47.980
And so I'm going to share that later in the show.

00:00:47.980 --> 00:00:50.580
Right. But good jokes, punchlines go at the end, right?

00:00:50.580 --> 00:00:50.940
Yeah.

00:00:50.940 --> 00:00:57.400
So the topic I want to talk about is GLOM, which I'd actually heard about.

00:00:57.600 --> 00:01:03.580
It's a package started by Mahmoud Hashemi, who brought us ZeroVer and other great things.

00:01:03.580 --> 00:01:05.780
It's a package to try to reshape data.

00:01:06.000 --> 00:01:18.760
So if you've got like JSON or really any data that is in or data structure that's in one type and one shape and you need it in another shape or you need some of it out, that's what GLOM is written for.

00:01:18.760 --> 00:01:22.500
But it's written to be kind of like, kind of used like a regular expression is.

00:01:22.560 --> 00:01:27.080
It's a general purpose tool that you can use to translate from one thing to another.

00:01:27.540 --> 00:01:32.580
And some of the cool things about it are that it's like a path based.

00:01:32.580 --> 00:01:35.900
You can access things with a path based access.

00:01:35.900 --> 00:01:43.000
Like as an example, if you were going to have a three deep dictionary, you'd have to pass in.

00:01:43.000 --> 00:01:45.960
A dictionary of dictionaries of dictionaries sort of thing.

00:01:45.960 --> 00:01:46.020
Yeah.

00:01:46.180 --> 00:01:47.860
Or maybe two levels and then an item.

00:01:47.860 --> 00:01:54.240
So it's sort of a lot of brackets and colons and brackets and quotes and stuff to specify that.

00:01:54.240 --> 00:02:01.740
So they've got a shorthand version that you can say like A.B.C or something like that instead of all the brackets.

00:02:02.360 --> 00:02:04.540
It's a fairly simple interface to think about.

00:02:04.540 --> 00:02:08.940
It's a GLOM and then you have a target data, target specification.

00:02:08.940 --> 00:02:13.300
And then you've got some other things that you can do like default.

00:02:13.300 --> 00:02:18.320
So if like there's some data that's missing, there's a lot of Python ways to do this sort of thing.

00:02:18.320 --> 00:02:20.080
But GLOM is sort of rather complete.

00:02:20.080 --> 00:02:21.540
It does a lot of neat things.

00:02:21.540 --> 00:02:30.360
And one of the neat things it does is as you're specifying the from and portion of your data transformation, sometimes something might not be there.

00:02:30.540 --> 00:02:42.820
Like if you were expecting element C in like a really nested dictionary and if it's not there or that just element just doesn't exist, you might get something weird in normal Python.

00:02:42.820 --> 00:02:46.520
Like the famous none type object is not subscriptable.

00:02:46.520 --> 00:02:49.120
And it doesn't tell you anything about what went wrong.

00:02:49.120 --> 00:02:52.020
So one of the things GLOM does is gives you better error messages.

00:02:52.020 --> 00:03:02.160
Like could not access C part two of the path ABC, which is like, oh, well, that's way more useful than something on this line was, you know, none basically.

00:03:02.160 --> 00:03:03.540
Yeah, exactly.

00:03:03.540 --> 00:03:07.200
And then they built also built in since it's being used in production.

00:03:07.200 --> 00:03:09.700
Mahmoud is using it at work as well.

00:03:09.700 --> 00:03:14.900
It's got a bunch of cool things like built in data exploration and debugging features.

00:03:14.900 --> 00:03:20.420
So when things do go wrong, you can sort of interactively try to figure out what went wrong.

00:03:20.420 --> 00:03:21.500
That's really cool.

00:03:21.500 --> 00:03:23.720
I love this, the way that it works.

00:03:23.720 --> 00:03:24.700
It seems really nice.

00:03:24.700 --> 00:03:31.660
I feel like you could almost do a little like a minor tweak to it to make it even cooler where you can do straight attribute access.

00:03:32.000 --> 00:03:36.180
So you say GLOM, parenthesis, data, and then the string A.B.C.

00:03:36.180 --> 00:03:47.060
It feels to me like you could extend it and say GLOM of data.A.B.C and have it understand that and sort of apply it so it doesn't look like function calls.

00:03:47.060 --> 00:03:50.000
It looks more like attribute access once you sort of GLOMify an object.

00:03:50.000 --> 00:03:50.360
Who knows?

00:03:50.360 --> 00:03:59.660
But either way, I still think this is really nice, especially if you're working with data that comes, like you said, in nested dictionaries or things like that,

00:04:00.280 --> 00:04:06.500
where you haven't built like some sort of object structure to pack it into with like marshmallow or something.

00:04:06.500 --> 00:04:08.880
You're just like, I'm going to work with this dictionary and it's kind of painful.

00:04:08.880 --> 00:04:10.800
This seems like it takes a lot of the pain away.

00:04:10.800 --> 00:04:23.400
Yeah, I have a use case right now that we're pulling Jason out of, we took an off the shelf Jason reporter for pytest that reports all the test output in Jason.

00:04:23.400 --> 00:04:28.500
And it's nice, but it reports like way too much that we care, than we care about.

00:04:28.500 --> 00:04:36.280
So we're going to use this to, or something like this to translate from what we're getting to a data structure that's easier to work with.

00:04:36.280 --> 00:04:37.600
Yeah, that's quite cool.

00:04:37.600 --> 00:04:37.880
Yeah.

00:04:37.880 --> 00:04:39.220
Super nice.

00:04:39.760 --> 00:04:42.460
So I think there's this topic I want to bring up.

00:04:42.460 --> 00:04:45.060
Let me just know if we've covered it before.

00:04:45.060 --> 00:04:46.480
It has to do with GUIs and Python.

00:04:46.480 --> 00:04:51.580
So who's doing standup now?

00:04:51.580 --> 00:04:52.840
I think you're doing the standup.

00:04:52.840 --> 00:04:53.500
Yeah, I know.

00:04:53.500 --> 00:04:54.060
Pretty much.

00:04:54.060 --> 00:04:54.580
Oh my gosh.

00:04:54.980 --> 00:05:07.940
So long ago, you and I, we started down this path on this journey of exploring like, you know, what we thought were the UI frameworks, like WX Python, the Phoenix release, and Python for Qt coming along.

00:05:07.940 --> 00:05:10.580
Those were like the big pieces of news, and there still are.

00:05:10.940 --> 00:05:18.340
But it seems like every week, somebody's like, oh, I know you guys have talked about 26 other cool UI frameworks, but do you know about X?

00:05:18.340 --> 00:05:18.660
Yeah.

00:05:18.660 --> 00:05:18.960
Right?

00:05:19.600 --> 00:05:27.020
And, you know, even the guy behind Python's simple GUI is like doing all sorts of cool stuff since we started talking about it on the show.

00:05:27.020 --> 00:05:29.440
And there's a lot of cool things happening here.

00:05:29.440 --> 00:05:29.820
Yeah.

00:05:29.820 --> 00:05:31.320
You picked out a really neat one.

00:05:31.320 --> 00:05:38.720
This is a really scientific computing Python GUI focused thing, and it's really, really simple.

00:05:38.720 --> 00:05:41.080
It's not for building super complicated things.

00:05:41.080 --> 00:05:48.780
The idea is I've got some object or set of objects, and I would like to create a GUI around it.

00:05:49.300 --> 00:05:57.460
So, you know, for example, they have like this camera concept, and the camera has a gain and an exposure and some functions and stuff like that.

00:05:57.460 --> 00:06:00.220
Like you can take a picture based on those settings.

00:06:00.220 --> 00:06:04.740
And what you can do, it's a little bit like SQL Alchemin that you specify.

00:06:04.740 --> 00:06:07.540
These are the traits of this object.

00:06:07.540 --> 00:06:15.240
And then you use this thing called traits UI from InThot, and you can upgrade that to like a form, basically.

00:06:15.240 --> 00:06:17.820
So you can say, show the camera, and it pops up a form.

00:06:17.900 --> 00:06:18.900
It says, what is the gain?

00:06:18.900 --> 00:06:19.700
What is the exposure?

00:06:19.700 --> 00:06:22.200
And you can even control the widgets that go there.

00:06:22.200 --> 00:06:25.480
So like an up, down, numerical thing, and so on.

00:06:25.480 --> 00:06:30.880
You can pack on graphs through this Kakoa thing, also from InThot.

00:06:31.320 --> 00:06:37.300
And it's just a really simple way to take an object, show it to the user in a GUI form, and get their values back.

00:06:37.300 --> 00:06:38.440
It's pretty cool.

00:06:38.440 --> 00:06:46.320
And so the mindset kind of is people that are, again, a lot of people are using Python that are not, programming isn't their main job.

00:06:46.820 --> 00:06:53.980
So this is something where people would, they need access to, you know, like let's say a device interaction or something like this example.

00:06:53.980 --> 00:06:56.900
But they need to be able to control it in a user interface.

00:06:56.900 --> 00:07:01.180
It doesn't have to be beautiful, but actually this looks pretty good.

00:07:01.300 --> 00:07:01.960
It doesn't look terrible.

00:07:01.960 --> 00:07:04.220
And what's cool is the foundational framework.

00:07:04.220 --> 00:07:14.300
It'll actually find its way to select like WX Python or PySide, which is the Python for Qt variant, or PyQt5.

00:07:15.080 --> 00:07:20.920
So it'll cycle through the known frameworks and basically say, well, I found WX Python, so we're using that, for example.

00:07:20.920 --> 00:07:26.120
Which is really cool because a lot of those frameworks are much better looking than, say, TK Enter by default.

00:07:26.120 --> 00:07:27.080
Yeah, that's cool.

00:07:27.080 --> 00:07:33.000
Yeah, so you can, if you ship your little app, like you Py installer it with, you know, WX Python, it'll use that.

00:07:33.000 --> 00:07:36.480
You Py installer it with Qt for Python, it'll do that.

00:07:36.480 --> 00:07:37.240
That's really cool.

00:07:37.240 --> 00:07:41.100
Now I kind of want to go out and see if I can write like an oscilloscope interface with this.

00:07:41.100 --> 00:07:41.760
Yeah, you should do it.

00:07:41.760 --> 00:07:43.020
But like I got other things to do.

00:07:43.700 --> 00:07:45.420
Oh, come on, you got a few hours, don't you?

00:07:45.420 --> 00:07:46.280
Yeah.

00:07:46.280 --> 00:07:48.120
Awesome.

00:07:48.120 --> 00:07:49.100
All right, well, what's next?

00:07:49.100 --> 00:07:53.440
Another, taking data from one format and putting it in another one.

00:07:53.440 --> 00:07:59.480
I found another tool that I figured I'd cover in the same episode because I'm comparing them at the same time.

00:07:59.480 --> 00:08:03.840
And so this one is called PAMPY, P-A-M-P-Y.

00:08:03.840 --> 00:08:07.280
It's a pattern matching for Python you always dreamed of.

00:08:07.280 --> 00:08:08.160
That's their tagline.

00:08:08.560 --> 00:08:15.540
It's a very small focused library that it's kind of got a neat interface that's pretty easy to catch on.

00:08:15.540 --> 00:08:17.280
It's got a really interesting interface, yeah.

00:08:17.280 --> 00:08:17.780
Yeah.

00:08:17.780 --> 00:08:25.300
So like the example that we're going to stick in the show notes is you just say from PAMPY import match and underscore.

00:08:25.660 --> 00:08:30.280
So they're overusing, they're reusing underscore or using it as a thing.

00:08:30.280 --> 00:08:35.940
And so you give it a pattern of known, like a known data structure pattern.

00:08:35.940 --> 00:08:40.560
And then you put these blanks in the places where you expect other values.

00:08:41.000 --> 00:08:44.260
And then you call match with any data you want.

00:08:44.260 --> 00:08:45.520
And then this pattern.

00:08:45.520 --> 00:08:51.420
And then it spits out as many variables as you've put underscores in if they match.

00:08:51.420 --> 00:08:58.880
So you can just sort of go through a whole bunch of data and pull out just the bits you need as long as they match the pattern.

00:08:58.880 --> 00:09:00.600
This is kind of similar to the one you had before.

00:09:00.600 --> 00:09:07.380
But it's like regular expressions applied to hierarchical structure of data in like a weird way.

00:09:07.380 --> 00:09:09.820
So let me see if I can try to visualize this for folks.

00:09:09.900 --> 00:09:25.920
So if you have a variable that is a list and unless you have one and then the next item is actually the list, two, three, and then four, you can say match, you know, list of one comma, some underscore, a list that contains an underscore and a three and then an underscore.

00:09:25.920 --> 00:09:32.920
And then every, when you run it through that, it'll say, well, we found a match and the values for the two underscores were two and four.

00:09:32.920 --> 00:09:33.840
That's pretty cool.

00:09:33.840 --> 00:09:39.060
And then the last thing you pass in is the what to do if you find a match.

00:09:39.200 --> 00:09:45.720
And so you can pass in a function that takes that many parameters or a lambda expression or something if you want.

00:09:45.720 --> 00:09:51.020
And it'll call your function with those parameters and do whatever.

00:09:51.020 --> 00:09:51.860
Yeah.

00:09:51.860 --> 00:09:55.900
And you can also just write a function that returns the value so you can capture it, which is kind of cool as well.

00:09:55.900 --> 00:09:56.360
Yeah.

00:09:56.360 --> 00:09:56.620
Yeah.

00:09:56.620 --> 00:09:57.200
Very nice.

00:09:57.200 --> 00:09:57.800
I like it.

00:09:58.140 --> 00:10:03.740
It's one of those things that I think looks really cool and I think would be really useful, but I would forget to use it.

00:10:03.740 --> 00:10:13.260
You know, so I guess I got to remember to use this thing next time that I have like a situation where it would be a really good fit and where, you know, it's a match for the problem I'm solving.

00:10:13.260 --> 00:10:14.560
Nice.

00:10:15.380 --> 00:10:17.280
But it's one of those things also I like.

00:10:17.280 --> 00:10:23.620
I like to see more packages that are just small, sharp tools for one use case or use them for whatever.

00:10:23.620 --> 00:10:26.600
But, I mean, I use screwdrivers for all sorts of stuff.

00:10:26.600 --> 00:10:27.800
But, you know.

00:10:27.800 --> 00:10:27.980
Yeah.

00:10:27.980 --> 00:10:30.820
The little backhand part is good for beating stuff in like nails and whatnot.

00:10:30.820 --> 00:10:31.260
Yeah.

00:10:31.260 --> 00:10:32.900
I think that's a great point.

00:10:32.900 --> 00:10:33.700
All right.

00:10:33.700 --> 00:10:39.880
Now, before we get on to the next one, which has some pretty practical applications, actually, I just want to tell you all about Digitalution.

00:10:39.880 --> 00:10:49.020
So, one of the features I've been really happy with lately is their idea of projects because you go to some of these cloud providers and there's just tons of assets.

00:10:49.020 --> 00:10:49.900
There's servers.

00:10:49.900 --> 00:10:50.840
There's IP addresses.

00:10:50.840 --> 00:10:52.240
There's load balancers.

00:10:52.240 --> 00:10:55.860
They're all just spread in there and you don't know which one goes with which.

00:10:55.860 --> 00:10:59.060
Maybe you've got a QA environment or a staging environment and a production one.

00:10:59.060 --> 00:11:02.700
Which goes with which unless you've named it really carefully and even then it's hard.

00:11:02.860 --> 00:11:13.240
So, at Digitalution, you can go create a project like a production Python Bytes server, you know, as project and put the servers and the floating IP addresses and all that in there.

00:11:13.240 --> 00:11:15.200
Same for staging and so on.

00:11:15.200 --> 00:11:17.200
So, they've got all sorts of cool features.

00:11:17.200 --> 00:11:23.080
If you check them out at pythonbytes.fm/Digitalution, you'll get $100 credit for new users.

00:11:23.080 --> 00:11:25.200
And definitely working out well for us.

00:11:25.200 --> 00:11:26.380
You guys should check them out.

00:11:26.380 --> 00:11:31.880
Speaking of getting checked out, sometimes people get sick or they may be sick.

00:11:32.820 --> 00:11:41.940
You have to go to the doctor and the doctor takes some kind of picture and says, I looked at this scan and either you're okay or you're not okay, right?

00:11:41.940 --> 00:11:48.440
It turns out, though, that analyzing pictures for patterns is something that AI can do really well, right?

00:11:48.440 --> 00:11:48.800
Yeah.

00:11:48.940 --> 00:12:02.700
So, Google recently took in this article, it's so funny, it says, well, they took this off-the-shelf AI and they pointed it at mammogram scans to try to detect a breast cancer.

00:12:02.700 --> 00:12:07.200
And what they found out was a couple of things that were super, super interesting.

00:12:08.320 --> 00:12:17.480
So, first, this thing they called Lina was able to correctly identify tumorous regions 99% of the time.

00:12:17.480 --> 00:12:18.800
The AI was.

00:12:18.800 --> 00:12:19.540
That's amazing.

00:12:19.700 --> 00:12:24.200
I mean, it's not 100%, but it is much better than doctors.

00:12:24.200 --> 00:12:27.020
I can't remember what the doctor percentage was, but it was way off.

00:12:27.020 --> 00:12:30.440
If you have, if it's really a bad case, then it's pretty easy.

00:12:30.440 --> 00:12:32.360
But this is like early detection, right?

00:12:32.360 --> 00:12:34.200
And catching cancer early is the key.

00:12:34.500 --> 00:12:37.160
And this is like much, much better than doctors did.

00:12:37.160 --> 00:12:39.380
So, that's really great.

00:12:39.380 --> 00:12:49.960
So, I guess the first, the question is, does this mean that all the radiologists and their jobs and the cancer pathologists, their jobs are just gone, right?

00:12:49.960 --> 00:12:51.300
Is that what it means, right?

00:12:51.300 --> 00:12:55.020
Because that could be what AI means, say, for truck drivers or taxi drivers.

00:12:55.020 --> 00:12:57.100
But you always think that it's kind of low in jobs.

00:12:57.100 --> 00:13:02.920
But is that really, do people who have medical degrees, are they in danger of being like kicked out of a job by AI?

00:13:03.440 --> 00:13:04.740
I honestly am on the fence.

00:13:04.740 --> 00:13:05.460
I don't really know.

00:13:05.460 --> 00:13:12.100
Like this, this is not a great sign for that skill because computers are getting so good at it.

00:13:12.100 --> 00:13:22.540
But one good sign is they did a second trial where they took six pathologists and they let them do diagnosis with and without the AI's assistants.

00:13:22.540 --> 00:13:28.400
And they said with the assistants, the doctors found it easier to detect these small problems and it only took half as long.

00:13:28.400 --> 00:13:28.820
Yeah.

00:13:28.820 --> 00:13:30.140
Well, that's what I was going to say.

00:13:30.240 --> 00:13:34.980
I mean, like it says 99% of the time, but that's not a real statistic.

00:13:34.980 --> 00:13:38.720
We want to know like how many false positives, how many false negatives.

00:13:38.720 --> 00:13:39.040
Yeah.

00:13:39.040 --> 00:13:42.960
There's going to be gray area where like the computer says, yep, there's cancer there.

00:13:43.540 --> 00:13:46.980
And I'm 100% sure or, you know, close.

00:13:46.980 --> 00:13:50.120
Well, those cases, the doctor probably would have found it also.

00:13:50.120 --> 00:13:53.740
But having the computers do it is going to be better.

00:13:53.740 --> 00:14:01.600
And then the gray area is we're going to always need doctors to look at the stuff that's like questionable, like 50% chance that there might be.

00:14:01.760 --> 00:14:07.760
And they can look at it and go, yeah, maybe we should redo the test or something or whatever.

00:14:07.760 --> 00:14:09.460
I don't know about other countries.

00:14:09.460 --> 00:14:12.440
But I think all of us have a shortage of doctors.

00:14:12.440 --> 00:14:12.840
Yes.

00:14:13.060 --> 00:14:20.440
If we can have the same doctors do 10 or 100 times more patients with the help of AI, then go for it.

00:14:20.440 --> 00:14:20.980
Let's do it.

00:14:20.980 --> 00:14:21.200
Yeah.

00:14:21.260 --> 00:14:30.420
I think that's the real bright point here is to have more doctors and not just having more doctors, but having doctors more evenly distributed.

00:14:30.420 --> 00:14:36.320
In a large country like the U.S., there's very rural parts and there's very urban parts.

00:14:36.320 --> 00:14:43.900
And the access to doctors you have in a big city versus, you know, 100 miles from a big city in a tiny town, that is not the same.

00:14:43.900 --> 00:14:44.080
Right.

00:14:44.080 --> 00:14:48.860
But I can easily see taking a scan at your local doctors, shooting it up to the cloud.

00:14:48.960 --> 00:14:53.540
It says this, you jump on a Zoom meeting with another doctor for five minutes.

00:14:53.540 --> 00:14:55.420
It says, hey, here's what the AI says.

00:14:55.420 --> 00:14:56.100
I checked it over.

00:14:56.100 --> 00:14:56.560
I agree.

00:14:56.560 --> 00:14:57.660
Here's what we're going to do.

00:14:57.660 --> 00:15:01.020
Either, you know, you come to the city for treatment or actually you're fine.

00:15:01.020 --> 00:15:02.000
You just hang out.

00:15:02.000 --> 00:15:08.040
So I think in the, like the democratization of this for people, I think this is really good.

00:15:08.040 --> 00:15:08.400
Yeah.

00:15:08.400 --> 00:15:10.360
And, and, and speeding things up too.

00:15:10.360 --> 00:15:18.540
It might be that, that the, on the walk back from the, the scanning area of, of your doctor's office back to the,

00:15:18.540 --> 00:15:25.360
your normal room in that time, maybe we could have an answer for you instead of having to call you later tomorrow or something.

00:15:25.360 --> 00:15:27.120
So it's all good.

00:15:27.120 --> 00:15:28.080
Yeah, it's definitely good.

00:15:28.080 --> 00:15:28.880
All right.

00:15:28.880 --> 00:15:32.680
So this next one, is this like a little bit like a hundred days of code?

00:15:32.680 --> 00:15:33.260
What is this?

00:15:33.260 --> 00:15:35.980
I think it is, but it's like Christmasy.

00:15:36.400 --> 00:15:39.680
So this is the advent of code.

00:15:39.680 --> 00:15:44.880
And this has been around since 2015 and it's at adventofcode.com.

00:15:45.100 --> 00:15:52.640
It's just sort of a fun code challenges that they reveal one per day for 25 days in December.

00:15:52.920 --> 00:15:58.440
And you've got just small programming puzzles covering a wide variety of skill sets.

00:15:58.440 --> 00:16:01.600
But they're, they're sort of a geared both easy to hard.

00:16:01.600 --> 00:16:05.160
And there's, there's not a particular programming language you can use.

00:16:05.300 --> 00:16:10.760
So a lot of people have said, or I've heard people say they, they solve them in their most comfortable language.

00:16:10.760 --> 00:16:15.200
But then also you've got puzzles, of past years available too.

00:16:15.200 --> 00:16:20.100
If you're learning a new language, you can try to solve these puzzles in, in a new language as well.

00:16:20.100 --> 00:16:21.000
Yeah, I really like it.

00:16:21.000 --> 00:16:21.900
That's, that's pretty cool.

00:16:21.900 --> 00:16:25.160
And the fact that it comes one a day is pretty sweet.

00:16:25.160 --> 00:16:25.680
Yeah.

00:16:25.680 --> 00:16:28.920
And it says it doesn't need a lot of computational power, so it should be accessible.

00:16:29.120 --> 00:16:29.280
Yeah.

00:16:29.280 --> 00:16:42.120
And then we've also put a link into a GitHub repo that's called Awesome Advent of Code, which is a whole bunch of extra resources, like links to where people have posted their solutions in particular languages or things like that.

00:16:42.120 --> 00:16:45.320
So if you're really into it, you can check that out also.

00:16:45.320 --> 00:16:45.640
Yeah.

00:16:45.640 --> 00:16:46.740
I love it.

00:16:46.740 --> 00:16:48.140
And it's, quite timely.

00:16:48.140 --> 00:16:48.580
Yeah.

00:16:48.580 --> 00:16:50.700
I guess people are maybe a couple of days behind.

00:16:50.700 --> 00:16:52.880
They'll have to do a few in a row, right?

00:16:52.880 --> 00:16:54.500
Being December 5th, but that's okay.

00:16:54.500 --> 00:16:55.700
All right.

00:16:55.720 --> 00:17:00.060
The last one is a nice year end type of thing as well.

00:17:00.060 --> 00:17:07.520
And it's, it has to do with the, the sun setting of legacy Python, which most people agree, I think is a good thing, right?

00:17:07.520 --> 00:17:08.040
Definitely.

00:17:08.040 --> 00:17:08.720
Yeah, definitely.

00:17:08.720 --> 00:17:20.700
So when I think of some of the, the holdouts for legacy Python, Python 2, if you will, it's often these enterprises, they have, they have big code bases.

00:17:20.700 --> 00:17:22.040
They don't really want to change them.

00:17:22.040 --> 00:17:23.780
They don't have a large motivation to change them.

00:17:23.900 --> 00:17:29.300
They're often using something like Red Hat Linux because they want the stability of that, the long-term support of that.

00:17:29.300 --> 00:17:35.520
So the news is Red Hat Linux 8 is now updated for Python 6.

00:17:35.520 --> 00:17:37.220
Sorry, 3.6 by default.

00:17:37.220 --> 00:17:38.920
6 would be awesome.

00:17:38.920 --> 00:17:39.720
That'd be a huge announcement.

00:17:39.720 --> 00:17:42.260
No, 3.6 by default instead of 2.7.

00:17:42.260 --> 00:17:45.300
So that's pretty interesting, right?

00:17:45.300 --> 00:17:46.120
Yes.

00:17:46.120 --> 00:17:47.140
By default.

00:17:47.140 --> 00:17:47.740
Yeah.

00:17:48.080 --> 00:17:50.260
I think I'm linking to the Reddit page.

00:17:50.260 --> 00:17:51.360
Yeah.

00:17:51.360 --> 00:17:55.120
I'm linking to the Reddit discussion that then links to the main article because there's some funny stuff in there.

00:17:55.120 --> 00:18:01.220
And I think, Brian, I don't know if this comes from us in any way, or maybe Matias who started this way back when.

00:18:01.540 --> 00:18:08.680
But the very first comment was just simply correcting the title to say, no, you know, you didn't mean to say 2.7.

00:18:08.680 --> 00:18:09.980
You meant to say legacy Python.

00:18:09.980 --> 00:18:12.440
Yes.

00:18:12.440 --> 00:18:13.740
Yes.

00:18:13.740 --> 00:18:14.360
Keep going, people.

00:18:14.360 --> 00:18:14.840
Keep going.

00:18:14.840 --> 00:18:15.300
Yes.

00:18:15.380 --> 00:18:16.800
So, yeah, it's pretty cool.

00:18:16.800 --> 00:18:20.040
They said they have only limited support for Python 2.7.

00:18:20.040 --> 00:18:23.140
And also, no version of Python will be installed by default.

00:18:23.140 --> 00:18:25.860
So you've got to install 3.8 as well.

00:18:25.860 --> 00:18:28.680
But that's what most of the stuff defaults to.

00:18:28.680 --> 00:18:37.860
And that actually, that's kind of cool because then with nothing installed by default, we can probably use some statistics better.

00:18:37.860 --> 00:18:38.700
Yes.

00:18:38.700 --> 00:18:46.600
It's hard to tell if it just comes with your install, installation, then we don't really know what people are choosing.

00:18:46.600 --> 00:18:46.940
Right.

00:18:46.940 --> 00:18:47.420
Absolutely.

00:18:47.420 --> 00:18:48.360
Yeah.

00:18:48.360 --> 00:18:49.920
So there's a couple of comments that are interesting.

00:18:49.920 --> 00:18:55.020
It says Python 2.7 is available as a package, but it'll have a shorter life.

00:18:55.020 --> 00:18:59.480
And the reason it's still available is to facilitate a smoother transition to Python 3.

00:18:59.480 --> 00:19:00.400
That's one.

00:19:00.520 --> 00:19:14.040
And they also say customers are advised to use Python 3 or Python 2 directly because the shebangs that, or sorry, hashbangs that you put at the front at the file, like to say this should be executed in Bash.

00:19:14.040 --> 00:19:15.560
This should be executed in Python.

00:19:15.560 --> 00:19:18.760
Well, now you have to specify a major version.

00:19:18.760 --> 00:19:20.700
You can't say like.

00:19:20.700 --> 00:19:21.460
Yeah, Python 3 or Python 2.

00:19:21.460 --> 00:19:23.040
Yeah, you can't just say Python up there.

00:19:23.040 --> 00:19:23.980
That's actually an error.

00:19:24.100 --> 00:19:32.300
It'll say you have to say Python 2 or 3 if you want this to actually run because they want you to opt in and not just choose some sort of default thing.

00:19:32.300 --> 00:19:33.160
It's pretty cool.

00:19:33.160 --> 00:19:33.460
Yeah.

00:19:33.460 --> 00:19:37.520
So another step towards the present future.

00:19:37.520 --> 00:19:37.960
Yeah.

00:19:37.960 --> 00:19:40.280
So I've never seen hashbang before.

00:19:40.280 --> 00:19:40.640
Yeah.

00:19:40.640 --> 00:19:43.320
I usually see the shebang, but they say hashbangs here.

00:19:43.320 --> 00:19:43.920
Okay.

00:19:43.920 --> 00:19:45.560
It must be the enterprise term.

00:19:45.560 --> 00:19:47.020
Maybe.

00:19:47.020 --> 00:19:47.500
Cool.

00:19:47.500 --> 00:19:50.620
Well, that's pretty much all the news we have for this week.

00:19:50.620 --> 00:19:51.440
There's tons more.

00:19:51.440 --> 00:19:54.340
We're always not covering all the items.

00:19:54.340 --> 00:19:55.260
There's so much going on.

00:19:55.260 --> 00:19:57.080
But that's our news.

00:19:57.080 --> 00:19:59.340
I do want to throw out one thing here.

00:19:59.340 --> 00:20:02.280
And I know, Brian, I'm still waiting for that punchline there.

00:20:02.280 --> 00:20:08.120
So before we get to that, though, I want to say thanks to Brian McCullough over at Tech Meme.

00:20:08.120 --> 00:20:11.940
So Tech Meme is a website that's got like all the latest news on tech, which is pretty cool.

00:20:11.940 --> 00:20:15.120
And they have a podcast called The Long Ride Home.

00:20:15.120 --> 00:20:16.400
You can check that out.

00:20:16.400 --> 00:20:19.000
So the reason I'm bringing this up here is it's a pretty cool show.

00:20:19.000 --> 00:20:23.800
It's kind of like Python Bytes, but more for like general tech.

00:20:23.800 --> 00:20:29.420
You know, like, oh, Google acquired this company or this thing's happening to the iPhone or whatever.

00:20:29.420 --> 00:20:29.720
Right.

00:20:29.720 --> 00:20:31.420
So it's good analysis.

00:20:31.420 --> 00:20:32.140
It's well done.

00:20:32.140 --> 00:20:32.920
It's about the same length.

00:20:32.920 --> 00:20:40.080
But the reason I'm calling him out and saying thank you is he actually covered Python Bytes as the first recommended podcast on his show.

00:20:40.080 --> 00:20:41.340
So I just want to say thanks, Brian.

00:20:41.340 --> 00:20:43.120
And you guys can check out their show as well.

00:20:43.120 --> 00:20:43.680
Yeah, definitely.

00:20:43.860 --> 00:20:47.480
And because they did that, which is it's a really cool call out, too.

00:20:47.480 --> 00:20:48.060
Thanks, Brian.

00:20:48.060 --> 00:20:51.480
But the I listened to a couple episodes and I kind of liked it.

00:20:51.480 --> 00:20:51.920
It's nice.

00:20:51.920 --> 00:20:52.500
Yeah, it's nice.

00:20:52.500 --> 00:20:52.880
I like it.

00:20:52.880 --> 00:20:55.820
It's a good sort of a cousin of the show, if you will.

00:20:55.820 --> 00:20:56.180
Yeah.

00:20:56.180 --> 00:20:56.620
All right.

00:20:56.620 --> 00:20:56.880
All right.

00:20:56.880 --> 00:20:57.940
Tell me about this punchline, man.

00:20:58.040 --> 00:20:58.260
Okay.

00:20:58.260 --> 00:21:05.340
So I had heard of GLOM before, but I heard about it a lot more when I had Mahmoud on testing code.

00:21:05.340 --> 00:21:11.560
And we talked about GLOM, but we mostly were talking about how difficult it was to test it.

00:21:11.560 --> 00:21:16.520
Because if you're using a high level construct, you don't have to write very much code for it.

00:21:16.520 --> 00:21:21.520
So your code can be 100 percent covered, but you really haven't covered all the cases yet.

00:21:21.520 --> 00:21:22.880
So how do you deal with that?

00:21:22.940 --> 00:21:23.840
So we talked about that.

00:21:23.840 --> 00:21:31.220
And then Anthony Shaw got on Twitter and started talking about some of the ways we could increase the coverage of GLOM.

00:21:31.220 --> 00:21:34.720
And then I pointed out holes in his solution.

00:21:34.720 --> 00:21:37.640
And then he replied with this joke.

00:21:37.640 --> 00:21:41.540
And the joke originally came from Brennan Keller.

00:21:41.540 --> 00:21:45.380
And it's a QA engineer walks into a bar.

00:21:45.380 --> 00:21:46.380
He orders a beer.

00:21:46.380 --> 00:21:47.780
Orders zero beers.

00:21:47.780 --> 00:21:51.520
Orders 9,999,000 beers.

00:21:51.520 --> 00:21:52.860
Orders a lizard.

00:21:53.320 --> 00:21:54.560
Orders minus one beers.

00:21:54.560 --> 00:21:56.980
Orders a random set of characters.

00:21:56.980 --> 00:21:58.000
Okay.

00:21:58.000 --> 00:22:01.960
Now a first real customer walks in and asks where the bathroom is.

00:22:01.960 --> 00:22:04.240
The bar bursts into flames, killing everyone.

00:22:04.240 --> 00:22:05.920
I love it.

00:22:05.920 --> 00:22:07.580
It's so perfect.

00:22:07.580 --> 00:22:09.340
Anyway.

00:22:09.340 --> 00:22:12.260
It has nothing to do with anything.

00:22:12.260 --> 00:22:13.060
It's just funny.

00:22:13.060 --> 00:22:13.800
Yeah.

00:22:13.800 --> 00:22:14.720
No, it's really good.

00:22:14.720 --> 00:22:15.120
I like it.

00:22:15.120 --> 00:22:15.720
It's great.

00:22:15.720 --> 00:22:16.360
Thanks for sharing.

00:22:16.360 --> 00:22:18.000
And thanks for doing this podcast with me.

00:22:18.000 --> 00:22:18.600
It's been fun.

00:22:18.600 --> 00:22:20.060
It's fun as always.

00:22:20.060 --> 00:22:21.140
We're going to keep it rolling.

00:22:21.680 --> 00:22:23.460
Strong into 2019 for sure.

00:22:23.460 --> 00:22:24.260
Catch you later.

00:22:24.260 --> 00:22:24.840
Bye.

00:22:24.840 --> 00:22:25.160
Bye.

00:22:25.160 --> 00:22:26.980
Thank you for listening to Python Bytes.

00:22:26.980 --> 00:22:29.500
Follow the show on Twitter via at Python Bytes.

00:22:29.500 --> 00:22:32.380
That's Python Bytes as in B-Y-T-E-S.

00:22:32.380 --> 00:22:35.800
And get the full show notes at pythonbytes.fm.

00:22:35.800 --> 00:22:40.140
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:22:40.140 --> 00:22:42.860
We're always on the lookout for sharing something cool.

00:22:43.020 --> 00:22:46.260
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:22:46.260 --> 00:22:49.760
Thank you for listening and sharing this podcast with your friends and colleagues.

