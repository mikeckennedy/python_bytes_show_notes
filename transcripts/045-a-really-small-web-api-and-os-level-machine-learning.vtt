WEBVTT

00:00:00.001 --> 00:00:04.980
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.980 --> 00:00:10.160
This is episode 45, recorded September 27th, 2017.

00:00:10.160 --> 00:00:11.220
I'm Michael Kennedy.

00:00:11.220 --> 00:00:12.220
And I'm Brian Ockin.

00:00:12.220 --> 00:00:15.520
And as usual, we got a bunch of cool news items lined up for you.

00:00:15.520 --> 00:00:18.200
So, Brian, let's first say thanks to Rollbar.

00:00:18.200 --> 00:00:19.100
Yeah, thanks, Rollbar.

00:00:19.100 --> 00:00:20.260
Yeah, thanks for sponsoring this episode.

00:00:20.260 --> 00:00:22.940
We'll tell you guys more about Rollbar if you don't know about them later.

00:00:22.940 --> 00:00:25.260
But let's start with something super small.

00:00:25.260 --> 00:00:26.480
Like, I don't want to start anything big.

00:00:26.480 --> 00:00:29.580
This was recommended by a listener, Ivan.

00:00:29.580 --> 00:00:31.340
I'm not going to try his last name.

00:00:31.340 --> 00:00:32.740
But thanks, Ivan.

00:00:32.740 --> 00:00:35.800
A little micro framework called Pico.

00:00:35.800 --> 00:00:41.340
And there was a lightning talk given at EuroPython 2017.

00:00:41.340 --> 00:00:42.780
And we have a link to it.

00:00:42.780 --> 00:00:48.220
But this is just a very simple, very, well, I don't know how simple the code is.

00:00:48.220 --> 00:00:48.700
I haven't looked.

00:00:48.700 --> 00:00:49.760
But it's simple to use.

00:00:49.760 --> 00:00:53.740
It's a little web framework that you can use for actual web pages.

00:00:53.740 --> 00:00:58.480
It does have some CSS and JavaScript serving, I think.

00:00:58.480 --> 00:01:06.340
But the main idea of it is a very simple, easy-to-use web framework for people that are not web developers.

00:01:06.340 --> 00:01:09.340
So, let's say, I think it was developed in a scientific community.

00:01:09.940 --> 00:01:11.900
So, people that can just hook up.

00:01:11.900 --> 00:01:18.520
You really, it's really hook up a web endpoint with just a decorator that says Pico.expose.

00:01:18.520 --> 00:01:19.420
And you've got a function.

00:01:19.420 --> 00:01:23.760
And there you've got a service, a web service you can use.

00:01:23.760 --> 00:01:26.060
So, it's pretty amazingly simple.

00:01:26.280 --> 00:01:27.280
Yeah, it is quite simple.

00:01:27.280 --> 00:01:41.320
And one of the things that is unique about it, well, relatively unique, is that it comes with a JavaScript client that automatically generates a proxy for objects described in your API.

00:01:41.320 --> 00:01:42.740
And that's pretty trick.

00:01:42.740 --> 00:01:43.320
Oh, wow.

00:01:43.320 --> 00:01:43.860
I missed that.

00:01:43.860 --> 00:01:44.440
That's cool.

00:01:44.440 --> 00:01:45.120
Yeah, isn't that cool?

00:01:45.120 --> 00:01:54.960
So, instead of having to, like, define the REST call and then actually just do that, you know, like with direct AJAX calls, whatever framework you're using, how you do that.

00:01:54.960 --> 00:02:05.380
If you have something that has, like, a hello function and takes a string, you can create one of these clients and just say .hello and pass it a string.

00:02:05.680 --> 00:02:08.100
And then it gives you, like, a promise, which is really cool.

00:02:08.100 --> 00:02:08.920
I think that's kind of unique.

00:02:08.920 --> 00:02:09.380
Yeah.

00:02:09.380 --> 00:02:14.200
It's one of the simplest, like, very little boilerplate you have to throw in some code.

00:02:14.200 --> 00:02:23.800
I was looking at this because if I had some services at work trying to pull out some database objects, I think non-developers could maintain it fairly well okay.

00:02:23.800 --> 00:02:27.120
I mean, probably not non-developers, but not web developers.

00:02:27.120 --> 00:02:27.780
Right, right.

00:02:27.780 --> 00:02:30.140
So, I think it's pretty interesting.

00:02:30.140 --> 00:02:35.840
I actually haven't heard of it, so I don't know, like, how durable it is, how good it is for building rich applications.

00:02:35.840 --> 00:02:38.520
I have lots of requirements, but it looks pretty cool to me.

00:02:38.520 --> 00:02:39.620
It's definitely worth checking it out.

00:02:39.620 --> 00:02:42.440
And it's small and easy to get started with, so that's always nice.

00:02:42.440 --> 00:02:44.980
Like, there's not a lot of mental overhead to use the thing, right?

00:02:44.980 --> 00:02:52.280
Yeah, and the link we have, which I thank Ivan for this also, is to the exact part of the Lightning Talk.

00:02:52.280 --> 00:02:59.840
So, it's just, I don't know, a few minutes of one of the maintainers talking about this project, and it's a really good overview.

00:02:59.840 --> 00:03:00.580
That's cool.

00:03:00.580 --> 00:03:02.220
You always hear, like, the why did I build it?

00:03:02.220 --> 00:03:05.280
Yes, I know Django REST framework and other things exist.

00:03:05.280 --> 00:03:06.220
I still built it.

00:03:06.220 --> 00:03:07.460
Things like that, right?

00:03:07.460 --> 00:03:13.780
Yeah, and it's specifically not REST compliant, but for a lot of cases, you don't really care.

00:03:13.780 --> 00:03:14.320
Yeah, it's interesting.

00:03:14.320 --> 00:03:18.760
It's almost more like a traditional XML web service proxy type looking thing.

00:03:18.760 --> 00:03:19.740
Anyway, pretty cool.

00:03:19.740 --> 00:03:21.820
Definitely check that out if that sounds interesting to you.

00:03:21.820 --> 00:03:25.400
So, I got a question for you and everyone.

00:03:25.400 --> 00:03:27.480
Brian, have you installed macOS High Sierra?

00:03:27.480 --> 00:03:28.080
No.

00:03:28.080 --> 00:03:29.100
It came out yesterday.

00:03:29.220 --> 00:03:29.920
I already installed it.

00:03:29.920 --> 00:03:33.040
It was a bit of a risk, but I had stuff backed up, so why not give it a shot, right?

00:03:33.040 --> 00:03:35.200
And we're talking today, so apparently it went okay.

00:03:35.200 --> 00:03:40.660
And we're talking on the same computer I installed it on, so it all went okay, and it was all pretty smooth and seamless.

00:03:40.660 --> 00:03:43.420
So, super excited to have a new macOS.

00:03:43.420 --> 00:03:46.320
But this one is actually more like a foundational release.

00:03:46.320 --> 00:03:51.780
So, there's a bunch of underlying systems and things that have been changed to make it able to build more cool stuff.

00:03:52.200 --> 00:04:03.640
So, like one of the popular things people will talk about maybe is APFS, a new Apple file system that is like a modern built-in 2017 type file system, not like, you know, 30-year-old file system.

00:04:03.640 --> 00:04:05.440
So, really, really cool type stuff like that.

00:04:05.500 --> 00:04:10.920
But one thing, the reason we're talking about it on this show is it comes with something that I think is actually kind of a big deal.

00:04:10.920 --> 00:04:12.840
It comes with something called Core ML.

00:04:12.840 --> 00:04:18.660
So, that's Core is like all the systems like, you know, Core Storage, Core whatever, right?

00:04:18.660 --> 00:04:20.420
Core ML is Core Machine Learning.

00:04:20.960 --> 00:04:27.960
So, here with the latest Apple operating system, maybe the first major OS to come with like built-in machine learning.

00:04:27.960 --> 00:04:28.400
Wow.

00:04:28.400 --> 00:04:29.240
Is that crazy or what?

00:04:29.240 --> 00:04:32.840
Well, Core ML is a set of APIs that you can use.

00:04:32.840 --> 00:04:43.000
And basically, it packages up a lot of the stuff that they're already doing in things like photos where the photos can like identify, you know, people.

00:04:43.000 --> 00:04:45.720
So, you can say, show me all the pictures of Brian.

00:04:45.840 --> 00:04:51.560
And it would just like find those magically in all my photos, Siri, text-to-speech, all those types of things, right?

00:04:51.560 --> 00:04:54.400
So, they want to make it possible for you to use some of those.

00:04:54.400 --> 00:04:59.120
So, basically, with Core ML, it comes with pre-built machine learning models.

00:04:59.120 --> 00:05:05.520
You can create your own models and then package it up with your app and send it on so you could train it to do whatever.

00:05:05.520 --> 00:05:07.360
And they even offer some default ones.

00:05:07.360 --> 00:05:07.880
It's pretty cool.

00:05:07.880 --> 00:05:08.300
Yeah.

00:05:08.300 --> 00:05:08.660
Yeah.

00:05:08.660 --> 00:05:15.000
So, another thing that's pretty sweet about it is it will use basically on any of the Macs from 2012 or later,

00:05:15.300 --> 00:05:19.860
it will use a mix of CPU processing and GP-GPU processing depending on the task.

00:05:19.860 --> 00:05:21.260
And it will just figure that out for you.

00:05:21.260 --> 00:05:23.740
So, this whole, do I use them?

00:05:23.740 --> 00:05:25.260
I'm guessing that makes it slicker.

00:05:25.260 --> 00:05:28.020
Well, how many cores does your Mac have?

00:05:28.020 --> 00:05:28.900
I have no idea.

00:05:28.900 --> 00:05:30.860
Probably four with hyperthreading, right?

00:05:30.860 --> 00:05:31.340
Probably.

00:05:31.340 --> 00:05:35.180
So, it's either two or four plus hyperthreading, which would double that, right?

00:05:35.180 --> 00:05:38.680
Some of the GPUs have like thousands of cores.

00:05:38.680 --> 00:05:39.520
Thousands.

00:05:39.520 --> 00:05:47.240
So, if you want to do something in parallel, which a lot of machine learning is, like if you have either eight cores or 2,000 cores, that's a big difference.

00:05:47.240 --> 00:05:48.720
So, it's really cool that that's built in.

00:05:48.720 --> 00:05:49.280
Yeah.

00:05:49.280 --> 00:05:52.940
Anyway, so, I think this might be the first major OS to like come with machine learning built in.

00:05:52.940 --> 00:05:54.160
It's just a sign of the times, right?

00:05:54.160 --> 00:05:54.780
All right.

00:05:54.800 --> 00:05:59.740
You probably got to log your code and figure out what's happening when your machine learning models don't do what you want, right?

00:05:59.740 --> 00:06:05.740
I don't have a list, but we've covered several simple logging modules on the show so far.

00:06:05.740 --> 00:06:09.860
But this, right now, we're just talking about plain old logging.

00:06:09.860 --> 00:06:12.420
The built-in logging library.

00:06:12.420 --> 00:06:13.900
Am I getting that right?

00:06:13.900 --> 00:06:14.880
I think it's just logging.

00:06:14.880 --> 00:06:15.180
Yep.

00:06:15.180 --> 00:06:16.440
Just the logger.

00:06:16.440 --> 00:06:16.700
Yep.

00:06:16.700 --> 00:06:17.440
Logger.

00:06:17.440 --> 00:06:18.060
Import logger.

00:06:18.060 --> 00:06:18.260
Yeah.

00:06:18.260 --> 00:06:26.120
The reason why I haven't really used it too much before, to be honest, is I have had trouble getting my head wrapped around all the little pieces.

00:06:26.120 --> 00:06:29.600
And it's a fairly complex module.

00:06:29.600 --> 00:06:32.300
And for good reason, it does a lot.

00:06:32.300 --> 00:06:34.180
But this is the first.

00:06:34.180 --> 00:06:38.500
I'm pointing to a blog article called A Guide to Logging in Python.

00:06:38.500 --> 00:06:54.360
And it walks through using logging very simple and then adding on, changing our mental model to include all the different pieces like logging file handlers and memory handlers and filters and all that stuff.

00:06:54.360 --> 00:07:00.540
And it's the first time I've read about logging where, from start to finish, I wasn't lost the entire time.

00:07:00.540 --> 00:07:02.900
So it's a good introduction.

00:07:02.900 --> 00:07:03.520
Yeah, it's cool.

00:07:03.580 --> 00:07:06.180
And it talks about, like, why not just do print, right?

00:07:06.180 --> 00:07:15.700
There's all sorts of things like multi-threading support, categorization and different logging levels, time-rotating files, all kinds of stuff better than just print.

00:07:15.700 --> 00:07:17.800
So, yeah, this is really cool.

00:07:17.800 --> 00:07:21.820
I do feel like there's a lot of configuration and stuff in the built-in logging module.

00:07:21.820 --> 00:07:23.080
And it kind of tries to do everything.

00:07:23.080 --> 00:07:24.540
So it can make it tricky.

00:07:24.540 --> 00:07:25.100
And this is nice.

00:07:25.100 --> 00:07:25.640
Yeah.

00:07:25.640 --> 00:07:28.220
And there's some things that it does that I didn't even know it did.

00:07:28.220 --> 00:07:31.520
I didn't know it does, like, automatic file rotation just built in.

00:07:31.520 --> 00:07:31.980
That's cool.

00:07:31.980 --> 00:07:33.040
Yeah, that's really nice.

00:07:33.200 --> 00:07:37.540
Anyway, if you're trying to figure out the built-in logging module, check this one out.

00:07:37.540 --> 00:07:43.480
I can tell you that time-based rotating file is important when your website generates gigabytes of log files.

00:07:43.480 --> 00:07:44.720
You don't want that to be one file.

00:07:44.720 --> 00:07:45.980
Yeah.

00:07:45.980 --> 00:07:49.620
Speaking of websites, it kind of sucks when your website's crashed for users, right?

00:07:49.620 --> 00:07:50.020
Yeah.

00:07:50.020 --> 00:07:51.620
They don't like it, but they might not tell you.

00:07:51.620 --> 00:07:52.400
They might just go away.

00:07:52.400 --> 00:07:54.820
So that's why you want to get Rollbar, right?

00:07:54.820 --> 00:07:56.360
So like we said, Rollbar is supporting the show.

00:07:56.920 --> 00:08:00.100
Visit them at pythonbytes.fm/rollbar.

00:08:00.100 --> 00:08:03.920
And you can install it in just a few minutes.

00:08:03.920 --> 00:08:10.080
Pip install Rollbar, a few lines of configuration, and all the errors in your website are captured with tons of detail.

00:08:10.260 --> 00:08:15.060
Things like local parameters, arguments passed to methods when it crashed, all that kind of stuff.

00:08:16.020 --> 00:08:18.160
Applications, Slack, email, whatever.

00:08:18.160 --> 00:08:18.860
It's beautiful.

00:08:18.860 --> 00:08:22.020
So definitely install that if you're running a web app based on Python.

00:08:22.020 --> 00:08:27.600
So speaking of web apps, you might care about memory, right?

00:08:27.600 --> 00:08:32.740
A lot of times one of the things that puts a lot of pressure on your web apps is not the CPU, but it's actually memory.

00:08:32.920 --> 00:08:35.520
And I'd say that's true certainly for my web apps.

00:08:35.520 --> 00:08:39.500
It seems like memory is more of a pressure than CPU by quite a bit.

00:08:39.500 --> 00:08:47.520
So one of the things that I thought was interesting is somebody wrote an article called, Let Me Introduce Dunder Slots.

00:08:47.520 --> 00:08:56.220
So slots are alternative backing store for class data, I guess is maybe the simplest way to put it.

00:08:56.220 --> 00:08:57.400
Have you played with these, Brian?

00:08:57.400 --> 00:08:58.280
No, I haven't.

00:08:58.280 --> 00:08:59.100
This is really crazy.

00:08:59.100 --> 00:09:15.300
When you create a regular Python class and you implement a Dunder init, and in there you say self.name equals something passed in, self.email equals some email address passed in, that goes into DunderDict, right?

00:09:15.300 --> 00:09:22.720
Like each instance of that class has a dictionary that has the name, email, the name, name, and then the two values that you passed in.

00:09:22.720 --> 00:09:26.080
And every instance of the class gets a separate instance of the dictionary.

00:09:26.080 --> 00:09:26.700
They're one-to-one.

00:09:26.700 --> 00:09:31.000
That makes it be super easy to do lookups, right?

00:09:31.000 --> 00:09:31.640
Or one.

00:09:31.640 --> 00:09:34.600
It's super easy to make it dynamic.

00:09:34.600 --> 00:09:39.060
Like if you just interact with a class and you try to add new stuff to it, it just goes into that dictionary.

00:09:39.060 --> 00:09:40.040
So that's cool.

00:09:40.040 --> 00:09:53.400
But what's not so cool is if I have 10 million instances of that class, I have 10 million copies of that dictionary, which has 10 million strings, each one that says email, and another 10 million strings that say name.

00:09:53.400 --> 00:09:54.920
Why do I need to store those?

00:09:54.920 --> 00:09:55.740
I probably don't, right?

00:09:56.060 --> 00:09:58.500
If I'm really not going to be dynamic, I probably don't.

00:09:58.500 --> 00:10:00.340
So you can use this thing called Dunder Slots.

00:10:00.340 --> 00:10:03.160
And you would say the slots of this class are name and email.

00:10:03.160 --> 00:10:07.420
And then that slot is stored on the type, not the instance.

00:10:07.420 --> 00:10:13.460
So instead of having 10 million names and 10 million emails in terms of the field name, right?

00:10:13.460 --> 00:10:14.620
You just have the two.

00:10:15.320 --> 00:10:19.180
And otherwise, they're just stored like in an array, in a positional thing.

00:10:19.180 --> 00:10:21.360
So super good for performance.

00:10:21.360 --> 00:10:27.260
Like the test they did in this article, 57% less memory usage just by adding that one line.

00:10:27.260 --> 00:10:30.860
And it's a little bit faster for access, but it's definitely better on memory.

00:10:30.860 --> 00:10:31.980
Can you use both?

00:10:32.140 --> 00:10:32.500
No.

00:10:32.500 --> 00:10:32.580
No.

00:10:32.580 --> 00:10:35.720
Well, you could still do the self dot whatever and assign to it.

00:10:35.820 --> 00:10:41.240
But basically, if you try to assign to something that's not declared in the slot, it'll say it doesn't have that property.

00:10:41.240 --> 00:10:45.260
It wasn't pre-allocated in the type, basically, or predefined in the type.

00:10:45.260 --> 00:10:47.600
So yeah, it's pretty cool.

00:10:47.860 --> 00:10:51.760
I actually go into this in depth in my write Pythonic code course.

00:10:51.760 --> 00:10:58.060
And you'll see that this is even better in terms of memory than an unnamed tuple.

00:10:58.060 --> 00:11:01.680
Like you wouldn't think you could do better than an unnamed tuple for like space.

00:11:01.680 --> 00:11:02.920
But like this is actually even better.

00:11:02.920 --> 00:11:07.200
And you get all the type class inheritance behavior that you'd expect.

00:11:07.200 --> 00:11:08.220
Very cool.

00:11:08.220 --> 00:11:12.640
Seems like more of the mental model of classes I have in the first place.

00:11:12.640 --> 00:11:12.900
Yeah.

00:11:12.900 --> 00:11:13.460
Yeah, for sure.

00:11:13.460 --> 00:11:16.920
It's very much like C++, C#, traditional.

00:11:16.920 --> 00:11:20.000
Like these are the things that are in here and they never change.

00:11:20.000 --> 00:11:22.280
A static language type of thought of a class.

00:11:22.280 --> 00:11:22.420
Yeah.

00:11:22.420 --> 00:11:29.720
Well, I'm definitely going to have to go and re-watch your seasoned developer course and do these again.

00:11:29.720 --> 00:11:30.660
Yeah, it's pretty cool.

00:11:30.660 --> 00:11:31.460
Yeah, it's super easy.

00:11:31.460 --> 00:11:32.720
Like you shouldn't use it all the time.

00:11:32.720 --> 00:11:35.200
But when it makes sense, it can save you tons of memory.

00:11:35.200 --> 00:11:36.260
Well, that's cool.

00:11:36.260 --> 00:11:41.560
Hey, a long time ago in episode 11, we covered Pipen from Kenneth.

00:11:41.560 --> 00:11:42.860
And I always get his name wrong.

00:11:42.940 --> 00:11:43.560
So you say it.

00:11:43.560 --> 00:11:43.980
Kenneth Wright.

00:11:43.980 --> 00:11:44.760
Kenneth Wright.

00:11:44.760 --> 00:11:45.240
Okay.

00:11:45.240 --> 00:11:48.260
Maybe that was one of like the 10 things he did that week.

00:11:48.260 --> 00:11:48.660
I don't know.

00:11:48.660 --> 00:11:49.080
Yeah.

00:11:49.080 --> 00:11:50.820
So he's been doing a lot.

00:11:50.820 --> 00:11:57.520
But one of the things that the first time I took a look at this, I gave it a honest college try.

00:11:57.520 --> 00:12:02.740
And to just be honest, I didn't know why I needed it.

00:12:02.740 --> 00:12:04.040
You're like, I already got this covered.

00:12:04.040 --> 00:12:04.680
Whatever.

00:12:04.680 --> 00:12:06.080
Yeah, I already got this covered.

00:12:06.280 --> 00:12:11.880
But one of the things that changed my mind is not too long ago, he put up a video.

00:12:11.880 --> 00:12:18.400
And so if you go to docs.pipenv.org, there's a four minute screencast of him just using it.

00:12:18.400 --> 00:12:21.420
And that video got me convinced.

00:12:21.420 --> 00:12:22.860
I'm like, oh, wow.

00:12:22.860 --> 00:12:25.580
This is really a lot easier than I've done before.

00:12:26.140 --> 00:12:30.720
And actually, I've been doing a lot more virtual environments than I used to.

00:12:30.720 --> 00:12:34.180
And I kind of lose track of which ones are where.

00:12:34.180 --> 00:12:35.480
So this helps.

00:12:35.980 --> 00:12:44.640
So PIPenv, if you haven't listened to episode 11, it's something that deals with your virtual environments and pip and install and all that for you.

00:12:44.640 --> 00:12:49.400
And it's just a way of working that if you give it a try, you might like it.

00:12:49.400 --> 00:12:52.500
So the video is one thing that's new that convinced me.

00:12:52.500 --> 00:12:54.920
But there's also a bunch of other stuff that he's done recently.

00:12:54.920 --> 00:12:58.600
He also included security checks.

00:12:58.600 --> 00:13:08.780
So our scare from last week of whether or not you're going to install a problem package, this PIPenv will look through with PIPenv check.

00:13:08.780 --> 00:13:14.700
You can look through all your dependencies and make sure that you don't have any security vulnerabilities installed in any of them.

00:13:14.700 --> 00:13:15.140
That's awesome.

00:13:15.140 --> 00:13:19.940
And that's not like you have an old version of Django, so it has a security vulnerability.

00:13:19.940 --> 00:13:25.820
That's like somebody called it Django without the D and put a virus in it, right?

00:13:25.820 --> 00:13:27.040
That type of thing, right?

00:13:27.040 --> 00:13:32.940
Yeah, and the other thing that one of the things that it has that it's had from the start is a lot of packages.

00:13:32.940 --> 00:13:39.640
So packages have these hash values to compare your actual install from what's been published.

00:13:39.640 --> 00:13:45.440
And PIPenv deals with that and checks those, which is hard to do manually.

00:13:45.440 --> 00:13:52.720
And then one of the things it does recently is also it allows multiple package indexes.

00:13:52.720 --> 00:13:59.800
So you could have PyPI, of course, but also maybe a company index and a group index and maybe even one for your project.

00:13:59.800 --> 00:14:00.360
That's really cool.

00:14:00.360 --> 00:14:01.780
The features are piling up.

00:14:01.780 --> 00:14:07.000
And he recently said that it's nine months old, but it's had 192 releases.

00:14:07.000 --> 00:14:10.200
So he's not sleeping a lot, I don't think.

00:14:10.200 --> 00:14:11.080
No, probably not.

00:14:11.080 --> 00:14:12.520
Yeah, that's really cool.

00:14:12.620 --> 00:14:17.240
My favorite thing is pipenv lock-r will generate a requirements.txt file.

00:14:17.240 --> 00:14:17.600
That's cool.

00:14:17.600 --> 00:14:17.940
Right.

00:14:17.940 --> 00:14:21.420
And that's actually the thing that turned me off the first time.

00:14:21.420 --> 00:14:29.860
And it's because it uses a, PIPenv uses a thing called pip file and pip file.lock, which I don't really follow what those, why I need those.

00:14:29.860 --> 00:14:31.740
But I know sometimes I need a requirements.

00:14:31.740 --> 00:14:35.360
And this allows you, you can use this and still get your requirements files.

00:14:35.660 --> 00:14:36.320
Yeah, very cool.

00:14:36.320 --> 00:14:37.140
Very cool.

00:14:37.140 --> 00:14:38.100
All right.

00:14:38.100 --> 00:14:44.800
So the final thing I want to talk about is a little bit of a softer, more squishy concept, right?

00:14:44.800 --> 00:14:46.160
Not just an API or something.

00:14:46.920 --> 00:14:51.500
But Stack Overflow, they're doing some interesting data science.

00:14:51.500 --> 00:14:57.720
I think they actually have like full-time data scientists that are just like mining these and like generating reports and analysis on the industry.

00:14:57.720 --> 00:14:59.360
So that's pretty cool.

00:14:59.360 --> 00:15:15.220
And what I'm actually pointing to for this is not Stack Overflow, but to an Ars Technica article, which is a follow-up to this kind of unfortunate article they did called Tabs and Spaces, Who Gets Paid More or something like that.

00:15:16.020 --> 00:15:20.480
And they made the claim that like, well, people who are uninformed use Spaces.

00:15:20.480 --> 00:15:23.980
And for some reason, they get paid more than people who use Tabs.

00:15:23.980 --> 00:15:24.960
Don't know why.

00:15:24.960 --> 00:15:26.620
That was something they found in the survey.

00:15:26.620 --> 00:15:31.140
Well, the reason why is because those are Python developers, right?

00:15:31.140 --> 00:15:33.820
Whereas the other ones aren't.

00:15:33.820 --> 00:15:35.960
So that's an interesting thing in and of itself.

00:15:35.960 --> 00:15:42.480
But this is like a follow-up to say like, let's look at not programming languages, but like just different locations.

00:15:42.480 --> 00:15:48.360
So if you live in New York versus you just live in a random place in the U.S. versus Germany or France.

00:15:48.360 --> 00:15:50.420
Basically, the U.S. versus Europe.

00:15:50.420 --> 00:15:53.200
Well, U.S. and Europe all compared against each other.

00:15:53.200 --> 00:15:56.360
So it talks about like in these different places.

00:15:56.360 --> 00:15:58.880
If you're in DevOps or a data scientist, you earn really well.

00:15:58.880 --> 00:16:00.200
Probably using Python.

00:16:00.620 --> 00:16:06.660
Surprisingly, if you do graphics programming like OpenGL or something, you're not paid very well, even though that's super hard to do.

00:16:06.880 --> 00:16:13.060
The reason is, I think, and they sort of hinted this as well, is you're probably working in a game company.

00:16:13.060 --> 00:16:18.740
And there's a lot of young people working at game companies who are just, they want to work on games, period.

00:16:18.740 --> 00:16:22.260
It doesn't matter if they have to work 80 hours a week and get paid a little for it, right?

00:16:22.260 --> 00:16:22.740
Okay.

00:16:22.740 --> 00:16:23.080
Yeah.

00:16:23.080 --> 00:16:23.680
So that's pretty tough.

00:16:23.680 --> 00:16:27.240
I have heard that the game industry is a pretty hard place to work.

00:16:27.800 --> 00:16:30.540
But, you know, that's sort of one part of it, right?

00:16:30.540 --> 00:16:31.240
You don't get paid tons.

00:16:31.240 --> 00:16:39.880
But the most surprising fact was really that in the U.S., developer pay is significantly more than in Europe.

00:16:39.880 --> 00:16:43.260
And it's not like 10% more or something like that.

00:16:43.260 --> 00:16:46.220
It's like, I don't know, close to double.

00:16:46.220 --> 00:16:48.360
It's really like quite a bit more.

00:16:48.360 --> 00:16:56.060
So they say things like, hey, people in the U.S. have substantially higher median income, even regardless of experience.

00:16:56.060 --> 00:17:03.960
So they say, for example, a median salary of a developer in the U.S. is comparable to somebody with 20 years experience in Canada or Germany.

00:17:03.960 --> 00:17:08.120
And it isn't even quite higher than people in France or the U.K. with 20 years experience.

00:17:08.120 --> 00:17:09.760
Like a new, like, hey, I just graduated.

00:17:09.760 --> 00:17:10.640
What can I do now?

00:17:10.640 --> 00:17:11.640
Sort of job.

00:17:11.640 --> 00:17:13.460
So pretty interesting.

00:17:13.460 --> 00:17:20.160
The comments are also super interesting because people coming from all over the place and they're thinking about like, well, okay, salary is not everything.

00:17:20.160 --> 00:17:22.080
There's cost of living.

00:17:22.080 --> 00:17:23.580
There's cost of health care.

00:17:23.580 --> 00:17:24.720
There's social support.

00:17:24.720 --> 00:17:25.400
There's a lot of stuff.

00:17:25.400 --> 00:17:32.240
So like this is kind of partly interesting for the article, but also partly interesting for the way people are analyzing it.

00:17:32.240 --> 00:17:32.560
Yeah.

00:17:32.560 --> 00:17:37.260
Well, actually, it's kind of nice to have some good news for being an American.

00:17:38.660 --> 00:17:38.800
Yeah.

00:17:38.800 --> 00:17:41.880
It's been a little sketchy lately, but hooray.

00:17:41.880 --> 00:17:44.820
We've got the weirdest president, the highest health care costs.

00:17:44.820 --> 00:17:46.300
But hey, we get paid a lot.

00:17:46.300 --> 00:17:46.700
Yeah.

00:17:46.700 --> 00:17:51.400
And health care actually makes a big part of the conversation and the end like, hey, well, you guys pay so much more of our health care.

00:17:51.400 --> 00:17:52.760
Maybe the salary doesn't offset it.

00:17:52.800 --> 00:17:55.420
But we don't pay like half our salary yet.

00:17:55.420 --> 00:17:55.460
Yeah.

00:17:55.460 --> 00:17:56.220
In health care.

00:17:56.220 --> 00:17:57.280
So it doesn't offset it yet.

00:17:57.280 --> 00:17:59.060
Anyway, pretty interesting.

00:17:59.060 --> 00:18:04.480
So if you're thinking about this kind of stuff, here's an article with a lot of data to back it.

00:18:04.480 --> 00:18:05.680
All right.

00:18:05.680 --> 00:18:06.740
That's our news items.

00:18:06.740 --> 00:18:09.300
Brian, got anything else you want to share with the folks?

00:18:09.300 --> 00:18:10.360
No.

00:18:10.680 --> 00:18:11.120
Oh, my gosh.

00:18:11.120 --> 00:18:12.260
You're not doing anything, right?

00:18:12.260 --> 00:18:16.780
You're just like chilling now that the book is done and you're just kicking back?

00:18:16.780 --> 00:18:21.140
I think some people have already received the book, although I haven't.

00:18:21.140 --> 00:18:23.820
I'm waiting for my box to show up this afternoon.

00:18:23.820 --> 00:18:24.760
Oh, how exciting.

00:18:24.760 --> 00:18:28.400
I've seen a lot of Twitter messages, people like posting that they've shipped and things like that.

00:18:28.400 --> 00:18:28.780
That's great.

00:18:28.780 --> 00:18:29.180
Congrats.

00:18:29.180 --> 00:18:29.600
Thank you.

00:18:29.600 --> 00:18:30.540
How about you?

00:18:30.540 --> 00:18:31.940
Not too much going on right now.

00:18:31.940 --> 00:18:37.700
I'm working on a free MongoDB course, and that is super close to done.

00:18:38.080 --> 00:18:41.460
So I'm hoping to have some announcements soon, but I'm not there yet.

00:18:41.460 --> 00:18:47.440
One of the things, I'm going to try to start some new projects and not talk about the book so much every episode,

00:18:47.440 --> 00:18:51.460
but I'd really love to hear from people when they get them and what they think.

00:18:51.460 --> 00:18:56.820
Go ahead and send me a shout out on Twitter at Brian Hawken and say, hey, I got your book.

00:18:56.820 --> 00:18:58.540
And that'd be cool to hear from people.

00:18:58.540 --> 00:18:59.200
Yeah, that'd be awesome.

00:18:59.200 --> 00:18:59.880
Yeah, it's really cool.

00:18:59.880 --> 00:19:00.800
People are excited about it.

00:19:00.800 --> 00:19:02.280
I've been watching from the sidelines.

00:19:02.280 --> 00:19:02.760
All right.

00:19:02.760 --> 00:19:03.080
All right.

00:19:03.080 --> 00:19:05.580
Well, thanks for joining me for another one of these chats.

00:19:05.580 --> 00:19:05.960
Thank you.

00:19:05.960 --> 00:19:06.300
Yep.

00:19:06.300 --> 00:19:06.920
Talk to you later.

00:19:06.920 --> 00:19:07.240
You bet.

00:19:07.240 --> 00:19:07.620
Bye.

00:19:07.620 --> 00:19:07.660
Bye.

00:19:07.660 --> 00:19:10.620
Thank you for listening to Python Bytes.

00:19:10.620 --> 00:19:13.180
Follow the show on Twitter via at Python Bytes.

00:19:13.180 --> 00:19:16.080
That's Python Bytes as in B-Y-T-E-S.

00:19:16.080 --> 00:19:19.480
And get the full show notes at pythonbytes.fm.

00:19:19.480 --> 00:19:23.840
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:19:23.840 --> 00:19:26.540
We're always on the lookout for sharing something cool.

00:19:26.540 --> 00:19:29.920
On behalf of myself and Brian Hawken, this is Michael Kennedy.

00:19:29.920 --> 00:19:33.540
Thank you for listening and sharing this podcast with your friends and colleagues.

