
00:00:00.000 --> 00:00:05.040
Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds.


00:00:05.040 --> 00:00:12.640
This is episode 45 recorded September 27 2017. I'm Michael Kennedy, and I'm Brian Ockett. And


00:00:12.640 --> 00:00:17.760
as usual, we got a bunch of cool news items lined up for you. So Brian, let's first say thanks to


00:00:17.760 --> 00:00:20.960
roll bar. Yeah, thanks, Robar. Yeah, thanks for sponsoring this episode. We'll tell you guys more


00:00:20.960 --> 00:00:25.360
about roll bar if you don't know about them later. But let's start with something super small. Like


00:00:25.360 --> 00:00:26.860
I don't want to start anything big.


00:00:26.860 --> 00:00:30.040
- This was recommended by a listener, Ivan,


00:00:30.040 --> 00:00:33.320
I'm not going to try his last name, but thanks Ivan,


00:00:33.320 --> 00:00:36.620
a little micro framework called Pico.


00:00:36.620 --> 00:00:41.620
And there was a lightning talk given at EuroPython 2017


00:00:41.620 --> 00:00:43.260
and we have a link to it.


00:00:43.260 --> 00:00:46.600
But this is just a, it's a very simple, very,


00:00:46.600 --> 00:00:48.280
well, I don't know how simple the code is,


00:00:48.280 --> 00:00:49.860
I haven't looked, but it's simple to use.


00:00:49.860 --> 00:00:52.460
It's a little web framework that you can use


00:00:52.460 --> 00:00:54.220
for actual web pages.


00:00:54.220 --> 00:00:59.020
It does have some CSS and JavaScript serving, I think.


00:00:59.020 --> 00:01:02.060
But the main idea of it is a very simple,


00:01:02.060 --> 00:01:05.100
easy to use web framework for people


00:01:05.100 --> 00:01:06.580
that are not web developers.


00:01:06.580 --> 00:01:08.340
So let's say, I think it was developed


00:01:08.340 --> 00:01:09.860
in a scientific community.


00:01:09.860 --> 00:01:12.220
So people that can just hook up,


00:01:12.220 --> 00:01:15.300
you really, it's really hook up a web endpoint


00:01:15.300 --> 00:01:18.620
with just a decorator that says pico.expose


00:01:18.620 --> 00:01:19.980
and you got a function.


00:01:19.980 --> 00:01:24.180
And there you've got a service, a web service you can use.


00:01:24.180 --> 00:01:26.240
So it's pretty amazingly simple.


00:01:26.240 --> 00:01:27.880
- Yeah, it is quite simple.


00:01:27.880 --> 00:01:30.620
And one of the things that is unique about it,


00:01:30.620 --> 00:01:32.660
well, relatively unique,


00:01:32.660 --> 00:01:36.080
is that it comes with a JavaScript client


00:01:36.080 --> 00:01:38.480
that automatically generates a proxy


00:01:38.480 --> 00:01:42.000
for objects described in your API.


00:01:42.000 --> 00:01:42.960
And that's pretty trick.


00:01:42.960 --> 00:01:44.080
- Oh, wow, I missed that.


00:01:44.080 --> 00:01:44.920
That's cool.


00:01:44.920 --> 00:01:45.740
- Yeah, isn't that cool?


00:01:45.740 --> 00:01:48.880
So instead of having to define the REST call


00:01:48.880 --> 00:01:50.680
and then actually just do that,


00:01:50.680 --> 00:01:52.560
like with direct AJAX calls,


00:01:52.560 --> 00:01:55.520
whatever framework you're using, how you do that.


00:01:55.520 --> 00:01:58.440
If you have something that has like a hello function


00:01:58.440 --> 00:02:01.680
and takes a string, you can create one of these,


00:02:01.680 --> 00:02:04.600
one of these clients and just say .hello


00:02:04.600 --> 00:02:07.540
and pass it a string and then it gives you like a promise,


00:02:07.540 --> 00:02:09.240
which is really cool, I think that's kind of unique.


00:02:09.240 --> 00:02:11.800
- Yeah, it's one of the simplest,


00:02:11.800 --> 00:02:14.560
like very little boilerplate you have to throw in some code.


00:02:14.560 --> 00:02:18.560
I was looking at this because if I had some services at work


00:02:18.560 --> 00:02:20.720
trying to pull out some database objects,


00:02:20.720 --> 00:02:24.360
I think non-developers could maintain it fairly well, okay.


00:02:24.360 --> 00:02:26.120
I mean, probably not non-developers,


00:02:26.120 --> 00:02:27.400
but not web developers.


00:02:27.400 --> 00:02:28.680
- Right, right.


00:02:28.680 --> 00:02:30.240
So I think it's pretty interesting.


00:02:30.240 --> 00:02:31.440
I actually haven't heard of it,


00:02:31.440 --> 00:02:33.700
so I don't know how durable it is,


00:02:33.700 --> 00:02:35.960
how good it is for building rich applications.


00:02:35.960 --> 00:02:36.920
I have lots of requirements,


00:02:36.920 --> 00:02:38.520
but it looks pretty cool to me.


00:02:38.520 --> 00:02:39.680
It's definitely worth checking it out.


00:02:39.680 --> 00:02:41.600
And it's small and easy to get started with,


00:02:41.600 --> 00:02:42.640
so that's always nice.


00:02:42.640 --> 00:02:44.200
There's not a lot of mental overhead


00:02:44.200 --> 00:02:45.120
to use the thing, right?


00:02:45.120 --> 00:02:46.800
- Yeah, and the link we have,


00:02:46.800 --> 00:02:48.840
which thank Ivan for this also,


00:02:48.840 --> 00:02:52.360
to the exact part of the lightning talk.


00:02:52.360 --> 00:02:56.000
So it's just a few minutes of one of the maintainers


00:02:56.000 --> 00:03:00.120
talking about this project and it's a really good overview.


00:03:00.120 --> 00:03:02.440
- That's cool, you always hear like the why did I build it?


00:03:02.440 --> 00:03:05.400
Yes, I know Django REST framework and other things exist.


00:03:05.400 --> 00:03:07.520
I still built it, things like that, right?


00:03:07.520 --> 00:03:12.060
- Yeah, and it isn't, it's specifically not REST compliant,


00:03:12.060 --> 00:03:13.880
but for a lot of cases you don't really care.


00:03:13.880 --> 00:03:15.360
- Yeah, it's interesting, it's almost more like


00:03:15.360 --> 00:03:18.800
traditional XML web service proxy type looking thing.


00:03:18.800 --> 00:03:22.120
Anyway, very cool. Definitely check that out if that sounds interesting to you.


00:03:22.120 --> 00:03:25.480
So I had a question for you and everyone.


00:03:25.480 --> 00:03:27.680
Brian, have you installed Mac OS High Sierra?


00:03:27.680 --> 00:03:28.240
>> No.


00:03:28.240 --> 00:03:30.000
>> It came out yesterday. I already installed it.


00:03:30.000 --> 00:03:31.040
It was a bit of a risk,


00:03:31.040 --> 00:03:33.160
but I had stuff backed up, so why not give it a shot, right?


00:03:33.160 --> 00:03:35.320
>> We're talking today, so apparently it went okay.


00:03:35.320 --> 00:03:37.560
>> We're talking on the same computer I installed it on.


00:03:37.560 --> 00:03:40.960
So it all went okay and it was all pretty smooth and seamless.


00:03:40.960 --> 00:03:43.700
So super excited to have a new Mac OS.


00:03:43.700 --> 00:03:46.420
But this one is actually more like a foundational release.


00:03:46.420 --> 00:03:50.320
So there's a bunch of underlying systems and things that have been changed to make it able


00:03:50.320 --> 00:03:52.240
to build more cool stuff.


00:03:52.240 --> 00:03:56.940
So like one of the popular things people will talk about maybe is APFS, a new Apple file


00:03:56.940 --> 00:04:02.980
system that is like a modern built in 2017 type file system, not like, you know, 30 year


00:04:02.980 --> 00:04:03.980
old files.


00:04:03.980 --> 00:04:05.560
It's a really, really cool type stuff like that.


00:04:05.560 --> 00:04:09.260
But one thing, the reason we're talking about on this show is it comes with something that


00:04:09.260 --> 00:04:11.060
I think is actually a kind of a big deal.


00:04:11.060 --> 00:04:13.820
It comes with something called core ML.


00:04:13.820 --> 00:04:18.860
So that's cores, like all the systems like, you know, core storage, core, whatever, right?


00:04:18.860 --> 00:04:21.060
Core ML is core machine learning.


00:04:21.060 --> 00:04:26.600
So here with the latest Apple operating system, maybe the first major OS to come with like


00:04:26.600 --> 00:04:28.060
built in machine learning.


00:04:28.060 --> 00:04:29.060
Wow.


00:04:29.060 --> 00:04:30.060
Is that crazy or what?


00:04:30.060 --> 00:04:33.460
Well, the core ML is a set of API's that you can use.


00:04:33.460 --> 00:04:37.660
And basically, it packages up a lot of the stuff that they're already doing anything


00:04:37.660 --> 00:04:44.220
like photos where the photos can like identify, you know, people so you can say show me all


00:04:44.220 --> 00:04:49.940
the pictures of Brian and it would just like find those magically and all my photos, Siri,


00:04:49.940 --> 00:04:51.940
text to speech, all those types of things, right?


00:04:51.940 --> 00:04:54.900
So they want to make it possible for you to use some of those.


00:04:54.900 --> 00:05:00.540
So basically, it's core ml and it comes with pre built machine learning models, you can


00:05:00.540 --> 00:05:04.340
create your own models and then package it up with your app and send it on so you could


00:05:04.340 --> 00:05:05.860
train it to do whatever.


00:05:05.860 --> 00:05:07.460
And they even offer some default ones.


00:05:07.460 --> 00:05:08.460
It's pretty cool.


00:05:08.460 --> 00:05:09.460
Yeah.


00:05:09.460 --> 00:05:10.460
Yeah.


00:05:10.460 --> 00:05:13.740
So another thing that's pretty sweet about it is it will use basically on any of the


00:05:13.740 --> 00:05:19.300
Macs from 2012 or later, it will use a mix of CPU processing and GPGPU processing depending


00:05:19.300 --> 00:05:20.300
on the task.


00:05:20.300 --> 00:05:22.200
And it'll just figure that out for you.


00:05:22.200 --> 00:05:23.700
So this whole, do I use...


00:05:23.700 --> 00:05:25.660
I'm guessing that makes it slicker.


00:05:25.660 --> 00:05:28.220
Well, how many cores does your Mac have?


00:05:28.220 --> 00:05:29.380
I have no idea.


00:05:29.380 --> 00:05:31.420
Probably four with hyper-threading, right?


00:05:31.420 --> 00:05:32.420
Probably.


00:05:32.420 --> 00:05:35.840
So it's either two or four plus hyper-threading, which would double that, right?


00:05:35.840 --> 00:05:39.840
Some of the GPUs have like thousands of cores, thousands.


00:05:39.840 --> 00:05:43.580
So if you want to do something in parallel, which a lot of machine learning is like if


00:05:43.580 --> 00:05:47.320
you have either eight cores or 2000 cores, that's a big difference.


00:05:47.320 --> 00:05:48.640
So it's really cool that it that's built in.


00:05:48.640 --> 00:05:52.560
Yeah, anyway, so I think this might be the first major OS to like come with machine learning


00:05:52.560 --> 00:05:53.560
built in.


00:05:53.560 --> 00:05:54.560
It's just a sign of the times, right?


00:05:54.560 --> 00:05:57.440
All right, you probably got to log your code and figure out what's happening when your


00:05:57.440 --> 00:06:00.040
machine learning models don't do what you want, right?


00:06:00.040 --> 00:06:05.100
I don't have a list, but we've covered several simple logging modules on the on the show


00:06:05.100 --> 00:06:11.920
so far. But this right now we're just talking about plain old logging. The built in logging


00:06:11.920 --> 00:06:14.980
library. Am I getting that right? I think it's just logging.


00:06:14.980 --> 00:06:16.480
Yep, just the logger.


00:06:16.480 --> 00:06:21.540
Yep. Logger, import logger. Yeah. The reason why I haven't really used it too much before,


00:06:21.540 --> 00:06:27.060
to be honest, is I have had trouble getting my head wrapped around all the little pieces.


00:06:27.060 --> 00:06:33.700
And it's a fairly complex module. And for good reason, it does a lot. But this is the


00:06:33.700 --> 00:06:36.920
This is the first, I'm pointing to a blog article


00:06:36.920 --> 00:06:39.540
called A Guide to Logging in Python,


00:06:39.540 --> 00:06:43.880
and it walks through using logging very simple


00:06:43.880 --> 00:06:46.760
and then adding on, changing our mental model


00:06:46.760 --> 00:06:49.160
to include all the different pieces


00:06:49.160 --> 00:06:52.700
like logging file handlers and memory handlers


00:06:52.700 --> 00:06:55.040
and filters and all that stuff.


00:06:55.040 --> 00:06:57.700
And it's the first time I've read about logging


00:06:57.700 --> 00:06:59.380
where I, from start to finish,


00:06:59.380 --> 00:07:00.840
I wasn't lost the entire time.


00:07:00.840 --> 00:07:03.240
So it's a good introduction.


00:07:03.240 --> 00:07:05.920
That's cool and it talks about like why not just do print.


00:07:05.920 --> 00:07:10.760
There's all sorts of things like multi-threading support, categorization, and different login


00:07:10.760 --> 00:07:16.000
levels, time rotating files, all kinds of stuff better than just print.


00:07:16.000 --> 00:07:17.880
So yeah, this is really cool.


00:07:17.880 --> 00:07:22.120
I do feel like there's a lot of configuration and stuff in the built-in logging module that


00:07:22.120 --> 00:07:23.320
kind of tries to do everything.


00:07:23.320 --> 00:07:25.400
So I can make it tricky and this is nice.


00:07:25.400 --> 00:07:28.240
Yeah, and there's some things that it does that I didn't even know it did.


00:07:28.240 --> 00:07:31.480
I didn't know it does like automatic file rotation just built in.


00:07:31.480 --> 00:07:32.480
That's cool.


00:07:32.480 --> 00:07:33.320
- That's really nice.


00:07:33.320 --> 00:07:34.880
- Anyway, if you're trying to figure out


00:07:34.880 --> 00:07:37.640
the built-in logging module, check this one out.


00:07:37.640 --> 00:07:39.960
- I can tell you that time-based rotating file


00:07:39.960 --> 00:07:41.800
is important when your website generates


00:07:41.800 --> 00:07:43.620
gigabytes of log files.


00:07:43.620 --> 00:07:45.840
You don't want that to be one file.


00:07:45.840 --> 00:07:46.680
- Yeah.


00:07:46.680 --> 00:07:48.040
- Speaking of websites, it kind of sucks


00:07:48.040 --> 00:07:49.880
when your websites crash for your users, right?


00:07:49.880 --> 00:07:50.720
- Yeah.


00:07:50.720 --> 00:07:51.640
- They don't like it, but they might not tell you


00:07:51.640 --> 00:07:52.800
that might just go away.


00:07:52.800 --> 00:07:54.920
So that's why you want to get Rollbar, right?


00:07:54.920 --> 00:07:56.960
So like we said, Rollbar's supporting the show.


00:07:56.960 --> 00:08:00.820
Visit them at pythonbytes.fm/rollbar,


00:08:00.820 --> 00:08:03.980
And you can install it in just a few minutes.


00:08:03.980 --> 00:08:06.660
Pip install rule bar, few lines of configuration,


00:08:06.660 --> 00:08:08.420
and all the errors in your website


00:08:08.420 --> 00:08:10.260
are captured with tons of detail.


00:08:10.260 --> 00:08:12.300
Things like local parameters,


00:08:12.300 --> 00:08:14.340
arguments passed to methods when it crashed,


00:08:14.340 --> 00:08:15.780
all that kind of stuff.


00:08:15.780 --> 00:08:18.500
Notifications, Slack, email, whatever.


00:08:18.500 --> 00:08:19.320
It's beautiful.


00:08:19.320 --> 00:08:20.660
So definitely install that if you're running


00:08:20.660 --> 00:08:22.620
a web app based on Python.


00:08:22.620 --> 00:08:24.020
So speaking of web apps,


00:08:24.020 --> 00:08:28.300
you might care about memory, right?


00:08:28.300 --> 00:08:29.220
A lot of times one of the things


00:08:29.220 --> 00:08:30.620
that puts a lot of pressure on your web apps


00:08:30.620 --> 00:08:32.900
is not the CPU, but it's actually memory.


00:08:32.900 --> 00:08:35.600
And I'd say that's true for, certainly for my web apps,


00:08:35.600 --> 00:08:37.400
it seems like memory is more of a pressure


00:08:37.400 --> 00:08:40.160
than CPU by quite a bit.


00:08:40.160 --> 00:08:42.560
So one of the things that I thought was interesting


00:08:42.560 --> 00:08:45.240
is somebody wrote an article called


00:08:45.240 --> 00:08:47.860
Let Me Introduce Dunder Slots.


00:08:47.860 --> 00:08:53.800
So slots are alternative backing store for class data,


00:08:53.800 --> 00:08:56.540
I guess is maybe the simplest way to put it.


00:08:56.540 --> 00:08:57.560
Have you played with these, Brian?


00:08:57.560 --> 00:08:58.400
- No, I haven't.


00:08:58.400 --> 00:08:59.280
- This is really crazy.


00:08:59.280 --> 00:09:02.100
You can, like when you create a regular Python class


00:09:02.100 --> 00:09:04.880
and you implement a dunder init,


00:09:04.880 --> 00:09:08.180
and then there you say self.name equals something passed in,


00:09:08.180 --> 00:09:13.100
self.email equals some email address passed in,


00:09:13.100 --> 00:09:15.360
that goes into dunder dict, right?


00:09:15.360 --> 00:09:19.060
Like each instance of that class has a dictionary


00:09:19.060 --> 00:09:21.180
that has the name, email, the name, name,


00:09:21.180 --> 00:09:23.260
and then the two values that you passed in.


00:09:23.260 --> 00:09:24.620
And every instance of the class


00:09:24.620 --> 00:09:26.180
gets a separate instance of the dictionary,


00:09:26.180 --> 00:09:27.020
they're one-to-one.


00:09:27.020 --> 00:09:35.020
it be super easy to do lookups, right, or one, it's super easy to make it dynamic. Like if you


00:09:35.020 --> 00:09:39.340
just interact with a class and you try to add new stuff to it, it just goes into that dictionary. So


00:09:39.340 --> 00:09:46.140
that's cool. But what's not so cool is if I have 10 million instances of that class, I have 10


00:09:46.140 --> 00:09:50.380
million copies of that dictionary, which has 10 million strings, each one that says email,


00:09:50.380 --> 00:09:55.420
and another 10 million strings that say name, why do I need to store those? I probably don't,


00:09:55.420 --> 00:09:59.660
right? If I'm really not going to be dynamic, I probably don't. So you can use this thing called


00:09:59.660 --> 00:10:04.460
dunder slots. And you would say, the slots of this class are name and email. And then that


00:10:04.460 --> 00:10:09.580
that slot is stored on the type, not the instance. So instead of having 10 million names,


00:10:09.580 --> 00:10:15.740
and 10 million emails, in terms of the field name, right, you just have the two. And otherwise,


00:10:15.740 --> 00:10:21.340
they're just stored like in like an array, and a positional thing. So super good for performance,


00:10:21.340 --> 00:10:26.740
And it's like the test they did in this article, 57% less memory usage just by adding that


00:10:26.740 --> 00:10:28.140
one line.


00:10:28.140 --> 00:10:31.220
And it's a little bit faster for access, but it's definitely better on memory.


00:10:31.220 --> 00:10:32.220
Can you use both?


00:10:32.220 --> 00:10:33.220
No.


00:10:33.220 --> 00:10:35.900
Well, you can still do the self dot whatever and assign to it.


00:10:35.900 --> 00:10:39.940
But basically, if you try to assign to something that's not declared in the slot, it'll say


00:10:39.940 --> 00:10:42.200
it doesn't have that property.


00:10:42.200 --> 00:10:46.220
It wasn't pre allocated in the type basically, or predefined in the type.


00:10:46.220 --> 00:10:48.180
So yeah, it's pretty cool.


00:10:48.180 --> 00:10:54.400
I actually go into this in depth in my write Python code course and you'll see that it's


00:10:54.400 --> 00:10:58.780
this is even better in terms of memory than an unnamed tuple.


00:10:58.780 --> 00:11:02.080
You wouldn't think you could do better than an unnamed tuple for like space but like this


00:11:02.080 --> 00:11:06.820
is actually even better and you get all the type class inheritance behavior that you'd


00:11:06.820 --> 00:11:07.820
expect.


00:11:07.820 --> 00:11:08.820
Very cool.


00:11:08.820 --> 00:11:12.660
>> Seems like more of the mental model of classes I have in the first place.


00:11:12.660 --> 00:11:13.700
>> Yeah, yeah for sure.


00:11:13.700 --> 00:11:17.300
It's very much like C++, C#, traditional,


00:11:17.300 --> 00:11:19.380
like these are the things that are in here


00:11:19.380 --> 00:11:20.220
and they never change.


00:11:20.220 --> 00:11:22.820
A static language type of thought of a class, yeah.


00:11:22.820 --> 00:11:25.140
- Well, I'm definitely gonna have to go


00:11:25.140 --> 00:11:27.980
and re-watch your seasoned developer course


00:11:27.980 --> 00:11:29.860
and do these again.


00:11:29.860 --> 00:11:30.820
- Yeah, it's pretty cool.


00:11:30.820 --> 00:11:31.900
Yeah, it's super easy.


00:11:31.900 --> 00:11:32.820
You shouldn't use it all the time,


00:11:32.820 --> 00:11:35.660
but when it makes sense, it can save you tons of memory.


00:11:35.660 --> 00:11:36.500
- Well, that's cool.


00:11:36.500 --> 00:11:38.660
Hey, a long time ago in episode 11,


00:11:38.660 --> 00:11:41.960
we covered pipenv from Kenneth,


00:11:41.960 --> 00:11:43.580
and I always get his name wrong, so you say it.


00:11:43.580 --> 00:11:44.420
- Kenneth Wright.


00:11:44.420 --> 00:11:46.260
- Kenneth Wright, okay.


00:11:46.260 --> 00:11:47.740
- Maybe that was one of like the 10 things


00:11:47.740 --> 00:11:48.820
he did that week, I don't know.


00:11:48.820 --> 00:11:50.920
- Yeah, so he's been doing a lot,


00:11:50.920 --> 00:11:53.120
but one of the things that,


00:11:53.120 --> 00:11:55.100
the first time I took a look at this,


00:11:55.100 --> 00:11:57.700
I gave it a honest college try,


00:11:57.700 --> 00:12:00.860
and it just, to just be honest,


00:12:00.860 --> 00:12:02.940
it was, I didn't know why I needed it.


00:12:02.940 --> 00:12:04.900
- You're like, I already got this covered, whatever.


00:12:04.900 --> 00:12:06.620
- Yeah, I already got this covered.


00:12:06.620 --> 00:12:08.760
But one of the things that changed my mind


00:12:08.760 --> 00:12:12.100
is not too long ago, he put up a video,


00:12:12.100 --> 00:12:15.420
And so if you go to docs.pipenv.org,


00:12:15.420 --> 00:12:18.880
there's a four minute screencast of him just using it.


00:12:18.880 --> 00:12:21.540
And that video got me convinced.


00:12:21.540 --> 00:12:24.200
I'm like, oh, wow, this is really a lot easier


00:12:24.200 --> 00:12:26.360
than I've done before.


00:12:26.360 --> 00:12:28.700
And actually I've been doing a lot more


00:12:28.700 --> 00:12:31.180
virtual environments than I used to.


00:12:31.180 --> 00:12:34.580
And I kind of lose track of which ones are where.


00:12:34.580 --> 00:12:35.700
So this helps.


00:12:35.700 --> 00:12:39.380
And so PIPenv, if you haven't listened to episode 11,


00:12:39.380 --> 00:12:41.740
is something that deals with your virtual environments


00:12:41.740 --> 00:12:45.180
and pip and install and all that for you.


00:12:45.180 --> 00:12:48.820
And it's just a way of working that if you give it a try,


00:12:48.820 --> 00:12:49.660
you might like it.


00:12:49.660 --> 00:12:52.600
So the video is one thing that's new that convinced me,


00:12:52.600 --> 00:12:54.100
but there's also a bunch of other stuff


00:12:54.100 --> 00:12:55.660
that he's done recently.


00:12:55.660 --> 00:12:58.780
He also included security checks.


00:12:58.780 --> 00:13:01.820
So our scare from last week of whether or not


00:13:01.820 --> 00:13:05.680
you're gonna install a problem package,


00:13:05.680 --> 00:13:08.900
this pipen will look through with pipen check.


00:13:08.900 --> 00:13:11.180
You can look through all your dependencies


00:13:11.180 --> 00:13:14.700
make sure that you don't have any security vulnerabilities installed in any of them.


00:13:14.700 --> 00:13:19.580
That's awesome. And that's not like you have an old version of Django, so it has a security


00:13:19.580 --> 00:13:25.340
vulnerability. That's like somebody called it Django without the D and put a virus in


00:13:25.340 --> 00:13:29.100
it, right? That type of thing, right? Yeah. And the other thing that one of the things


00:13:29.100 --> 00:13:34.620
that it has that it's had from the start is a lot of packages. So packages have these


00:13:34.620 --> 00:13:40.300
hash values to compare your actual install from what's been published.


00:13:40.300 --> 00:13:43.480
Pipenv deals with that and checks those,


00:13:43.480 --> 00:13:45.900
which is hard to do manually.


00:13:45.900 --> 00:13:49.120
Then one of the things it does recently is,


00:13:49.120 --> 00:13:52.780
also it allows multiple package indexes.


00:13:52.780 --> 00:13:55.580
So you could have PyPI of course,


00:13:55.580 --> 00:13:58.660
but also maybe a company index and a group index,


00:13:58.660 --> 00:13:59.860
maybe even one for your project.


00:13:59.860 --> 00:14:00.420
>> That's really cool.


00:14:00.420 --> 00:14:04.220
>> The features are piling up and he recently said that


00:14:04.220 --> 00:14:07.260
it's nine months old, but it's had 192 releases.


00:14:07.260 --> 00:14:10.220
So he's not sleeping a lot, I don't think.


00:14:10.220 --> 00:14:12.580
>> No, probably not. Yeah, that's really cool.


00:14:12.580 --> 00:14:15.060
My favorite thing is pipenv lock-r will


00:14:15.060 --> 00:14:17.660
generate a requirements.txt file. That's cool.


00:14:17.660 --> 00:14:21.460
>> Right. That's actually the thing that turned me off the first time.


00:14:21.460 --> 00:14:26.760
It's because pipenv uses a thing called pip file and pip file.lock,


00:14:26.760 --> 00:14:29.900
which I don't really follow why I need those,


00:14:29.900 --> 00:14:32.540
but I know sometimes I need a requirements.


00:14:32.540 --> 00:14:35.100
allows you, you can use this and still get your requirements


00:14:35.100 --> 00:14:38.620
files. So yeah, very cool. Very cool. Alright, so the final


00:14:38.620 --> 00:14:42.180
thing I want to talk about is a little bit, a little bit of a


00:14:42.180 --> 00:14:45.900
softer, more squishy concept, right? Not just an API or


00:14:45.900 --> 00:14:50.380
something. But stack overflow, they're doing some interesting


00:14:50.380 --> 00:14:53.100
data science, I think they actually have like full time


00:14:53.100 --> 00:14:55.660
data scientists that are just like mining these and like


00:14:55.660 --> 00:14:58.300
generating reports and analysis on the industry. So that's,


00:14:58.300 --> 00:15:02.260
that's pretty cool. And what I'm actually pointing to for this


00:15:02.300 --> 00:15:07.300
is not Stack Overflow, but to an Ars Technica article,


00:15:07.300 --> 00:15:10.380
which is a follow-up to this kind of unfortunate article


00:15:10.380 --> 00:15:14.460
they did called "Tabs and Spaces, Who Gets Paid More?"


00:15:14.460 --> 00:15:16.180
or something like that.


00:15:16.180 --> 00:15:17.940
And they made the claim that like,


00:15:17.940 --> 00:15:20.860
well, people who are uninformed use spaces,


00:15:20.860 --> 00:15:22.860
and for some reason, they get paid more


00:15:22.860 --> 00:15:24.340
than people who use tabs.


00:15:24.340 --> 00:15:25.180
Don't know why.


00:15:25.180 --> 00:15:27.080
That was something they found in the survey.


00:15:27.080 --> 00:15:28.760
Well, the reason why is because


00:15:28.760 --> 00:15:31.820
those are Python developers, right?


00:15:31.820 --> 00:15:34.100
Whereas the other ones aren't.


00:15:34.100 --> 00:15:36.100
So that's an interesting thing in and of itself.


00:15:36.100 --> 00:15:41.220
But this is like a follow up to say like, let's look at not programming languages, but


00:15:41.220 --> 00:15:42.740
like just different locations.


00:15:42.740 --> 00:15:47.660
So if you live in New York versus you just live in a random place in the US versus Germany


00:15:47.660 --> 00:15:53.020
or France, basically the US versus Europe, well, US and Europe all compared against each


00:15:53.020 --> 00:15:54.380
other.


00:15:54.380 --> 00:15:58.060
So it talks about like in these different places, if you're a DevOps or a data scientist,


00:15:58.060 --> 00:16:00.620
you earn really well, probably using Python.


00:16:00.620 --> 00:16:03.060
Surprisingly, if you do graphics programming,


00:16:03.060 --> 00:16:05.460
like OpenGL or something, you're not paid very well,


00:16:05.460 --> 00:16:07.140
even though that's super hard to do.


00:16:07.140 --> 00:16:10.540
The reason is, I think, and they sort of hinted this as well,


00:16:10.540 --> 00:16:13.220
is you're probably working in a game company,


00:16:13.220 --> 00:16:16.100
and there's a lot of young people working at game companies


00:16:16.100 --> 00:16:18.900
who are just, they wanna work on games, period.


00:16:18.900 --> 00:16:20.780
It doesn't matter if they have to work 80 hours a week


00:16:20.780 --> 00:16:22.580
and get paid a little for it, right?


00:16:22.580 --> 00:16:23.740
- Okay. - Yeah, so that's pretty tough.


00:16:23.740 --> 00:16:25.660
I have heard that the game industry


00:16:25.660 --> 00:16:27.620
is a pretty hard place to work,


00:16:27.620 --> 00:16:30.580
but that's sort of one part of it, right?


00:16:30.580 --> 00:16:31.420
You don't get paid tons.


00:16:31.420 --> 00:16:34.020
But the most surprising fact was really that


00:16:34.020 --> 00:16:39.020
in the US, developer pay is significantly more


00:16:39.020 --> 00:16:40.540
than in Europe.


00:16:40.540 --> 00:16:43.340
And it's not like 10% more or something like that.


00:16:43.340 --> 00:16:46.860
It's like, I don't know, close to double.


00:16:46.860 --> 00:16:48.740
It's really like quite a bit more.


00:16:48.740 --> 00:16:50.460
So they say things like,


00:16:50.460 --> 00:16:53.720
hey, people in the US have substantially higher


00:16:53.720 --> 00:16:56.180
median income, even regardless of experience.


00:16:56.180 --> 00:17:01.180
So they say, for example, a median salary of a developer in the US is comparable to


00:17:01.180 --> 00:17:05.400
somebody with 20 years experience in Canada or Germany, and it isn't even quite higher


00:17:05.400 --> 00:17:08.180
than people in France or the UK with 20 years experience.


00:17:08.180 --> 00:17:09.940
Like a new, like, "Hey, I just graduated.


00:17:09.940 --> 00:17:10.940
What can I do now?"


00:17:10.940 --> 00:17:11.940
sort of job.


00:17:11.940 --> 00:17:14.020
So pretty interesting.


00:17:14.020 --> 00:17:17.380
The comments are also super interesting because people coming from all over the place and


00:17:17.380 --> 00:17:21.180
they're thinking about like, "Well, okay, salary is not everything.


00:17:21.180 --> 00:17:22.500
There's cost of living.


00:17:22.500 --> 00:17:23.940
There's cost of health care.


00:17:23.940 --> 00:17:24.940
There's social support."


00:17:24.940 --> 00:17:28.740
There's a lot of stuff, so this is partly interesting


00:17:28.740 --> 00:17:30.560
for the article, but also partly interesting


00:17:30.560 --> 00:17:32.320
for the way people are analyzing it.


00:17:32.320 --> 00:17:35.100
- Yeah, well, actually, it's kinda nice


00:17:35.100 --> 00:17:37.540
to have some good news for being an American.


00:17:37.540 --> 00:17:38.640
(Luke laughs)


00:17:38.640 --> 00:17:42.060
- Yeah, it's been a little sketchy lately, but hooray.


00:17:42.060 --> 00:17:43.460
- We've got the weirdest president,


00:17:43.460 --> 00:17:46.620
the highest healthcare costs, but hey, we get paid a lot.


00:17:46.620 --> 00:17:48.380
- Yeah, and healthcare actually makes a big part


00:17:48.380 --> 00:17:50.180
of the conversation, and like, hey, well,


00:17:50.180 --> 00:17:51.500
you guys pay so much more for healthcare,


00:17:51.500 --> 00:17:52.800
maybe the salary doesn't offset it,


00:17:52.800 --> 00:17:56.320
but we don't pay like half our salary yet in healthcare.


00:17:56.320 --> 00:17:58.160
So it doesn't offset it yet.


00:17:58.160 --> 00:17:59.360
Anyway, pretty interesting.


00:17:59.360 --> 00:18:02.280
So if you're thinking about this kind of stuff,


00:18:02.280 --> 00:18:05.440
here's an article with a lot of data to back it.


00:18:05.440 --> 00:18:07.440
All right, that's our news items, Brian.


00:18:07.440 --> 00:18:09.940
Got anything else you wanna share with the folks?


00:18:09.940 --> 00:18:10.860
- No.


00:18:10.860 --> 00:18:12.480
- My gosh, you're not doing anything, right?


00:18:12.480 --> 00:18:15.040
You're just like chilling now that the book is done


00:18:15.040 --> 00:18:17.080
and you're just kicking back?


00:18:17.080 --> 00:18:18.160
- I think people have,


00:18:18.160 --> 00:18:19.920
some people have already received the book,


00:18:19.920 --> 00:18:21.240
although I haven't.


00:18:21.240 --> 00:18:24.040
I'm waiting for my box to show up this afternoon.


00:18:24.040 --> 00:18:24.880
- Oh, how exciting.


00:18:24.880 --> 00:18:26.160
Yeah, I've seen a lot of Twitter messages,


00:18:26.160 --> 00:18:28.480
people posting that they've shipped and things like that.


00:18:28.480 --> 00:18:29.320
That's great, congrats.


00:18:29.320 --> 00:18:30.160
- Thank you.


00:18:30.160 --> 00:18:31.000
How about you?


00:18:31.000 --> 00:18:32.840
- Not too much going on right now.


00:18:32.840 --> 00:18:35.600
I'm working on a free MongoDB course,


00:18:35.600 --> 00:18:38.120
and that is super close to done.


00:18:38.120 --> 00:18:40.440
So I'm hoping to have some announcements soon,


00:18:40.440 --> 00:18:41.720
but I'm not there yet.


00:18:41.720 --> 00:18:42.540
- One of the things,


00:18:42.540 --> 00:18:44.800
I'm gonna try to start some new projects


00:18:44.800 --> 00:18:48.080
and not talk about the book so much every episode,


00:18:48.080 --> 00:18:50.040
but I'd really love to hear from people


00:18:50.040 --> 00:18:51.820
when they get them and what they think,


00:18:51.820 --> 00:18:55.760
go ahead and send me a shout out on Twitter @brianhawkin


00:18:55.760 --> 00:18:56.960
and say, "Hey, I got your book,"


00:18:56.960 --> 00:18:58.680
and that'd be cool to hear from people.


00:18:58.680 --> 00:18:59.520
- Yeah, that'd be awesome.


00:18:59.520 --> 00:19:00.340
Yeah, it's really cool.


00:19:00.340 --> 00:19:01.180
People are excited about it.


00:19:01.180 --> 00:19:02.480
I've been watching from the sidelines.


00:19:02.480 --> 00:19:03.320
- All right.


00:19:03.320 --> 00:19:04.640
- All right, well, thanks for joining me


00:19:04.640 --> 00:19:05.680
for another one of these chats.


00:19:05.680 --> 00:19:06.520
- Thank you.


00:19:06.520 --> 00:19:07.340
- Yep. - Talk to you later.


00:19:07.340 --> 00:19:08.180
- You bet, bye.


00:19:08.180 --> 00:19:10.800
Thank you for listening to Python Bytes.


00:19:10.800 --> 00:19:13.320
Follow the show on Twitter via @pythonbytes.


00:19:13.320 --> 00:19:16.520
That's Python Bytes as in B-Y-T-E-S.


00:19:16.520 --> 00:19:19.880
And get the full show notes at pythonbytes.fm.


00:19:19.880 --> 00:19:23.600
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:19:23.600 --> 00:19:24.600
way.


00:19:24.600 --> 00:19:27.120
We're always on the lookout for sharing something cool.


00:19:27.120 --> 00:19:30.360
On behalf of myself and Brian Auken, this is Michael Kennedy.


00:19:30.360 --> 00:19:33.600
Thank you for listening and sharing this podcast with your friends and colleagues.

