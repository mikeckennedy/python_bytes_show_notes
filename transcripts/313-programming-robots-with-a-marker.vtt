WEBVTT

00:00:00.001 --> 00:00:04.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.800 --> 00:00:11.160
This is episode 313, recorded December 6, 2022, and I am Brian Okken.

00:00:11.160 --> 00:00:11.960
Hey, I'm Michael Kennedy.

00:00:11.960 --> 00:00:14.960
I'm the person with the scroll bar going across. I just realized that.

00:00:14.960 --> 00:00:17.440
I'm Kelly Schuster for eight days.

00:00:17.440 --> 00:00:18.880
And I'm Sean Tyburn.

00:00:18.880 --> 00:00:23.020
And we're here from the Teaching Python podcast, so it's good to be here with you both.

00:00:23.020 --> 00:00:24.980
Recommend everybody listen to Teaching Python.

00:00:24.980 --> 00:00:29.020
The focus is kind of around teaching, being teachers and teaching Python.

00:00:29.020 --> 00:00:34.900
But I think anybody that helps anybody with learning Python, it's worth listening to your show.

00:00:34.900 --> 00:00:40.860
100%. It's more like about anybody who's a learner, which is everybody, hopefully, out there listening.

00:00:40.860 --> 00:00:42.380
Well, welcome.

00:00:42.380 --> 00:00:43.080
Thank you.

00:00:43.080 --> 00:00:46.100
Well, should we get into the first topic, Michael?

00:00:46.100 --> 00:00:48.660
Yeah, let's just jump right in.

00:00:48.660 --> 00:00:53.520
Over here, this one, I ran across on Mastodon.

00:00:53.520 --> 00:00:57.000
And I thought, what a fun, quick little thing.

00:00:57.340 --> 00:01:07.580
And with the teaching angle from the Teaching Python podcast with Kelly and Sean, I thought this might be kind of a cool thing for teachers or for kids for something simple with Python.

00:01:07.580 --> 00:01:09.440
But also, I just like it.

00:01:09.540 --> 00:01:19.660
So if you look over here in the link, this person, Teresita, posted spell out numbers with Python.

00:01:19.660 --> 00:01:22.360
All you got to do is pip install inflect.

00:01:22.360 --> 00:01:23.520
Check this out.

00:01:23.780 --> 00:01:26.600
So with inflect, this is a Python library.

00:01:26.600 --> 00:01:32.740
You can just say, you create an inflector thing and you say number to words and you give it some giant number.

00:01:32.740 --> 00:01:34.400
And you're like, I have no idea what this is.

00:01:34.400 --> 00:01:41.920
And it says, in this case, it was 8,675,309.

00:01:42.380 --> 00:01:48.620
And so any number you give it, it'll tell you the friendly version or the human version of it.

00:01:48.620 --> 00:01:56.420
So if you want to turn, you know, written numbers into spoken numbers, this is the way to do it.

00:01:56.420 --> 00:01:58.260
I think, you know, this is great.

00:01:58.260 --> 00:02:04.500
I don't know you need it for 8 million, but if you go much farther than that, if you go beyond trillion, then it gets really interesting.

00:02:04.660 --> 00:02:10.800
Another one that I found after I discovered this, because on Mastodon, somebody said, this is amazing.

00:02:10.800 --> 00:02:13.980
Have you heard of num to words as well?

00:02:13.980 --> 00:02:16.900
So num to words is another one that you can use.

00:02:16.900 --> 00:02:19.200
Num to words is possibly better.

00:02:19.200 --> 00:02:21.020
The API seems a little bit cleaner.

00:02:21.020 --> 00:02:26.420
Now, I haven't pushed the outer bounds of like, well, what is the biggest number it will speak to me in a reasonable way?

00:02:26.420 --> 00:02:28.420
So I don't know which one will go farther in that way.

00:02:28.420 --> 00:02:33.600
But in terms of kind of usefulness, this num to words, the two spelled out as a number,

00:02:33.900 --> 00:02:36.620
you can actually get a command line version.

00:02:36.620 --> 00:02:39.560
So you can pip x install this.

00:02:39.560 --> 00:02:43.760
And then on your terminal or command prompt, you just say num to words and put a number.

00:02:43.760 --> 00:02:45.520
And then you don't even have to write Python code.

00:02:45.520 --> 00:02:46.520
You just call it.

00:02:46.520 --> 00:02:47.800
But of course you can.

00:02:47.800 --> 00:02:49.640
And it will work in multiple languages.

00:02:49.640 --> 00:02:51.400
Oh, the language part is cool.

00:02:51.400 --> 00:02:52.620
I saw that there.

00:02:52.620 --> 00:02:56.520
There's my teacher side just went, wow, I can go into Spanish and French.

00:02:56.520 --> 00:02:57.660
Exactly.

00:02:57.660 --> 00:02:57.740
Exactly.

00:02:57.740 --> 00:02:58.720
So excited.

00:02:58.720 --> 00:03:00.360
Oh, yeah.

00:03:00.360 --> 00:03:02.780
So there's a bunch of different options.

00:03:02.900 --> 00:03:05.680
There's a ton of languages you can use here.

00:03:05.680 --> 00:03:06.160
Wow.

00:03:06.160 --> 00:03:07.800
Which is really cool.

00:03:07.800 --> 00:03:08.340
Yeah.

00:03:08.340 --> 00:03:09.460
So this is neat.

00:03:09.460 --> 00:03:15.100
And I wrote a little bit of code to just, you know, throw some sort of examples together and put those in the show notes.

00:03:15.100 --> 00:03:18.060
So you can use inflect or you can use num to words.

00:03:18.060 --> 00:03:23.740
I think I would trend towards the num to words because the multilingual as well as the command line version.

00:03:23.740 --> 00:03:25.700
If you pip x install it.

00:03:25.700 --> 00:03:28.420
Also, the fact that we don't have to call an instance.

00:03:28.420 --> 00:03:29.140
Is that correct?

00:03:29.140 --> 00:03:30.020
Yeah, exactly.

00:03:30.020 --> 00:03:31.000
Yeah, exactly.

00:03:31.000 --> 00:03:34.060
You don't have to create like some object and then call it on that.

00:03:34.060 --> 00:03:34.680
It's a little more.

00:03:34.680 --> 00:03:35.840
I thought like you might say.

00:03:35.840 --> 00:03:40.000
I have a second grader in my household who's probably ready to cheat on his math homework with us.

00:03:40.000 --> 00:03:42.300
There's a lot of those transfer questions.

00:03:42.300 --> 00:03:44.080
So it could be fun.

00:03:44.080 --> 00:03:52.840
I think this is great for like parents that have kids in, you know, trying to come up with pronounced big numbers and stuff.

00:03:52.840 --> 00:03:54.060
Occasionally I forget.

00:03:54.540 --> 00:03:56.220
I know that's what I'm saying.

00:03:56.220 --> 00:03:57.440
I'm thinking of that too.

00:03:57.440 --> 00:04:02.280
But this is like fact number like 20 for the math teacher.

00:04:02.280 --> 00:04:04.240
I always tell them, no, we don't need math anymore.

00:04:04.240 --> 00:04:05.040
We'll just have Python.

00:04:05.040 --> 00:04:06.260
We don't need math anymore.

00:04:06.260 --> 00:04:09.020
I have a Python library that's going to give us number sense.

00:04:09.020 --> 00:04:10.300
All right.

00:04:10.300 --> 00:04:12.900
So I got some homework for someone out there who's feeling ambitious.

00:04:12.900 --> 00:04:19.420
How about create this as a website as a service so we can just put it in then as a progressive web app.

00:04:19.420 --> 00:04:22.380
We just put it on our phone and then we can do it.

00:04:22.400 --> 00:04:25.520
Or you could use PyScript and just install it.

00:04:25.520 --> 00:04:28.600
So the kids could just constantly go around and ask it, what is this called?

00:04:28.600 --> 00:04:29.220
What is that called?

00:04:29.220 --> 00:04:29.680
Exactly.

00:04:29.680 --> 00:04:35.060
And then set it up for phonetic pronunciation so we can just have Siri pronounce it properly.

00:04:35.060 --> 00:04:36.860
Yeah, there you go.

00:04:36.860 --> 00:04:43.320
And out in the audience, Steve says, I guess you could pipe it to say to get it to read the number out loud as well.

00:04:43.320 --> 00:04:43.700
Okay.

00:04:43.700 --> 00:04:45.020
I hadn't thought about that.

00:04:45.020 --> 00:04:46.160
That's pretty dope.

00:04:46.160 --> 00:04:46.680
Okay.

00:04:46.680 --> 00:04:47.780
Very cool.

00:04:47.780 --> 00:04:48.240
Nice.

00:04:48.240 --> 00:04:48.660
All right.

00:04:48.660 --> 00:04:49.740
Well, that's mine.

00:04:49.740 --> 00:04:50.620
Off to you, Brian.

00:04:50.620 --> 00:04:51.720
Okay.

00:04:52.000 --> 00:04:57.820
So I'd like to go back in time to the origins of Python.

00:04:57.820 --> 00:05:03.220
Now, I'm not going to read the whole article, but there was an article by Lambert Mirtens.

00:05:03.220 --> 00:05:03.740
Mirtens.

00:05:03.740 --> 00:05:04.540
Sorry, Lambert.

00:05:04.540 --> 00:05:05.720
I got your last name wrong.

00:05:05.720 --> 00:05:09.620
But this is really, it's a really cool but long article.

00:05:09.840 --> 00:05:22.900
So I've heard mostly from Guido different stories about, I guess they weren't different stories, but that Python did come from a lot of inspiration from the ABC language.

00:05:23.180 --> 00:05:24.980
I guess you probably have all heard that, right?

00:05:24.980 --> 00:05:27.320
But I haven't heard a lot of that.

00:05:27.320 --> 00:05:29.580
Like, where did ABC come from?

00:05:30.000 --> 00:05:31.420
And maybe that's out there.

00:05:31.420 --> 00:05:32.360
But I just haven't looked.

00:05:32.360 --> 00:05:35.000
But this is kind of going through it.

00:05:35.000 --> 00:05:36.900
So this is going back to 1970.

00:05:36.900 --> 00:05:40.700
Lambert was involved with teaching programming.

00:05:41.020 --> 00:05:46.180
And this is teaching programming at university levels to people that had no programming experience.

00:05:46.180 --> 00:05:49.440
It's like they had a computer arts society.

00:05:49.880 --> 00:05:52.060
They had non-numerical programming.

00:05:52.060 --> 00:05:59.320
And he mentions teaching like artists and other people that probably don't even hang around computers at all.

00:05:59.320 --> 00:06:01.560
And especially in the 70s, you wouldn't.

00:06:01.560 --> 00:06:10.720
So they were using, and then he kind of ties it in also to modern day, a similar sort of topic is Django Girls,

00:06:10.720 --> 00:06:22.920
which is a great program that, if anybody doesn't know about it, tries to get particularly women to learn and do something useful with Python in one day,

00:06:22.920 --> 00:06:27.120
even if you've never touched a programming language, which is an incredible experience.

00:06:27.120 --> 00:06:30.500
But he even mentions it's going on in like Istanbul.

00:06:30.500 --> 00:06:33.880
So these workshops go on all over the world, which is pretty awesome.

00:06:33.880 --> 00:06:37.500
So he started with a programming language called Telcomp.

00:06:37.500 --> 00:06:42.900
And it was an unstructured language similar to BASIC.

00:06:42.900 --> 00:06:48.300
And the reason why they chose it is just because it was easier to learn or easier to use.

00:06:48.300 --> 00:06:50.240
It was more easy to talk about.

00:06:50.240 --> 00:06:54.020
And then this tale goes through, like it's a pretty long tale,

00:06:54.020 --> 00:06:58.400
but it goes through a lot of the frustrations they had even with Telcomp.

00:06:58.740 --> 00:07:15.080
And then deciding to go into developing ABC, which was like started out was B for B for beginner or beta zero or B zero for the initial element or something,

00:07:15.080 --> 00:07:20.220
which is, I think, too nerdy for a programming language name.

00:07:20.220 --> 00:07:22.620
But talks about the ABC project.

00:07:22.620 --> 00:07:25.540
A lot of this article is around the ABC project.

00:07:25.740 --> 00:07:30.000
But one of the things I wanted to highlight, try to get my notes back up,

00:07:30.000 --> 00:07:37.640
but wanted to highlight one of the things they brought up was really wanting to have ease of learning and ease of use,

00:07:37.640 --> 00:07:45.280
desirable, but also at the same time, use high level task oriented features to make things easier.

00:07:45.280 --> 00:07:52.480
So they wanted things, wanted it to be easy to learn, but also not cumbersome to use as a later as a developer.

00:07:52.480 --> 00:07:54.920
And that was probably that was my experience with BASIC.

00:07:55.140 --> 00:07:56.480
It was fairly easy to learn.

00:07:56.480 --> 00:07:59.080
But then when you try to do something large, it's tedious.

00:07:59.080 --> 00:08:01.380
And Pascal was the same way with me.

00:08:01.380 --> 00:08:03.200
But Python's not so much.

00:08:03.200 --> 00:08:08.520
And one of the things they talk about is even they had this, the put command right in there.

00:08:08.520 --> 00:08:15.220
So put one, two in AB was to put two values in two variables.

00:08:15.580 --> 00:08:23.040
And again, the swapping of you could say put AB in BA to swap variables where every other language I've ever used,

00:08:23.040 --> 00:08:25.780
you've got to use a third intermediate variable.

00:08:26.740 --> 00:08:29.040
And so we use that in Python today, right?

00:08:29.040 --> 00:08:31.800
So A comma B equals B comma A.

00:08:31.800 --> 00:08:33.580
B comma A will do the same thing.

00:08:33.580 --> 00:08:37.360
Brian, this is like looking back on like evolution or something.

00:08:37.360 --> 00:08:37.840
Yeah.

00:08:37.840 --> 00:08:44.020
And when you see like, oh, I see here was where the fish started to grow an arm because it went on land a lot.

00:08:44.020 --> 00:08:44.560
Yeah.

00:08:44.560 --> 00:08:47.200
This is like, here's the tuple unpacking of early Python.

00:08:47.580 --> 00:08:47.780
Yeah.

00:08:47.780 --> 00:08:50.040
So I encourage people to read it.

00:08:50.040 --> 00:08:55.540
It's just kind of a great read and a romp through history of Python.

00:08:55.540 --> 00:09:08.660
So, I mean, they even brought in like ABC brought in, I think Beta Zero did also, of the spacing making sense and not having to do brackets and things,

00:09:08.660 --> 00:09:10.460
but having spaces for blocks.

00:09:10.460 --> 00:09:12.520
Pretty cool ideas.

00:09:12.520 --> 00:09:14.260
What else?

00:09:14.420 --> 00:09:19.240
One of the things that a couple of quotes, I'm not sure where it's at, talks about Python success.

00:09:19.240 --> 00:09:30.620
The growth in pop and in popularity of Python from its inception 30 years ago as a one person effort flying under the radar has been phenomenal, but not meteoric.

00:09:30.620 --> 00:09:33.880
It's instead, it's been a long, slow and steady rise.

00:09:33.880 --> 00:09:41.360
And the competitive advantage it had in a period where we needed a lot of programmers was the ease of use and ease of new programmers.

00:09:41.360 --> 00:09:45.540
So, yeah, in the last 20 years, we really needed a lot more programmers.

00:09:45.540 --> 00:09:48.560
Having Python be easy to learn has been powerful.

00:09:48.960 --> 00:10:02.900
And then, as it also comments, which we know about, where the use of extra languages, that same concept of it's easy to learn, but you don't have to stop using it when you do something advanced.

00:10:02.900 --> 00:10:13.160
We see that with like data science and web libraries, where if it needs to be super fast, they stick it in an extension, in a C extension or something, or now Rust often.

00:10:13.460 --> 00:10:15.180
But it hasn't slowed down.

00:10:15.180 --> 00:10:17.160
And anyway, great read.

00:10:17.160 --> 00:10:18.840
Thanks, Lambert, for writing this.

00:10:18.840 --> 00:10:19.400
Cool.

00:10:19.400 --> 00:10:20.020
Yeah, it's pretty cool.

00:10:20.020 --> 00:10:25.260
I always thought of Python, especially for refugees from other languages, it's like it's cheating, right?

00:10:25.260 --> 00:10:29.800
Because it shouldn't be that easy to do something that powerful or that complex.

00:10:29.980 --> 00:10:37.780
And it's interesting to see the origins of that, even just the variable substitution or, you know, the multiple assignments.

00:10:37.780 --> 00:10:40.540
That's pretty cool to see that it has its origins that far back.

00:10:40.540 --> 00:10:57.700
Yeah, and I kind of, now I'm sort of here understanding some of the comments where every time we put in a new language feature, like the match statement or the walrus operator, there's some people that are like, are we making the language too complicated to learn now?

00:10:57.700 --> 00:11:01.260
And I think those are valid discussions to have.

00:11:01.260 --> 00:11:14.460
I don't think we've made it too complex to learn right now, but it's good to have those thoughts of like, you know, maybe it's a cool feature, but do we want to, you know, I look, my thoughts on that are really just don't teach that.

00:11:14.460 --> 00:11:20.600
I probably wouldn't teach the match statement or the walrus operator to new engineers.

00:11:21.080 --> 00:11:21.760
Yeah, indeed.

00:11:21.760 --> 00:11:22.480
Very nice one.

00:11:22.480 --> 00:11:23.720
All right, Kelly.

00:11:23.720 --> 00:11:25.020
I'll go ahead.

00:11:25.020 --> 00:11:25.620
One more comment.

00:11:25.620 --> 00:11:27.620
I was going to swap it over to your next item.

00:11:27.620 --> 00:11:28.160
Yeah.

00:11:28.160 --> 00:11:28.460
All right.

00:11:28.460 --> 00:11:29.060
Well, here we go.

00:11:29.060 --> 00:11:32.180
Let's talk about robots that teach kids.

00:11:32.180 --> 00:11:33.060
Oh, yeah.

00:11:33.060 --> 00:11:38.760
So this has become the, I should, in a good way, the bane of my existence is finding all these bots.

00:11:38.760 --> 00:11:40.340
And it's like, I have so many bots.

00:11:40.340 --> 00:11:42.340
This one's an old bot.

00:11:42.340 --> 00:11:45.940
And it's one of, it's a very popular bot for little kids.

00:11:45.940 --> 00:11:47.700
Very cute.

00:11:47.700 --> 00:11:50.860
They draw the line that can follow the line.

00:11:50.960 --> 00:11:54.120
It was using block code on the iPad, connects easy.

00:11:54.120 --> 00:11:57.340
And it's always been a real big staple for a lot of classrooms.

00:11:57.340 --> 00:11:58.640
It's called the Ozobot.

00:11:58.640 --> 00:12:06.900
But the interesting thing, coming in August 17th, the Ozobot just introduced a Python beta version, which is super cool.

00:12:06.900 --> 00:12:14.540
They got rid of the original Ozobot bit, which was a similar version.

00:12:15.180 --> 00:12:20.980
And then they made a new version of the Ozobot called the Evo Ozobot.

00:12:20.980 --> 00:12:23.520
And with this bot, it has line following.

00:12:23.520 --> 00:12:24.740
It has color detection.

00:12:24.740 --> 00:12:25.400
It has sound.

00:12:25.400 --> 00:12:26.540
It has proximity sensor.

00:12:26.540 --> 00:12:27.120
It has Bluetooth.

00:12:27.120 --> 00:12:28.800
It has crash detection.

00:12:30.040 --> 00:12:34.760
You can even write functions within this, within the program for the beta.

00:12:34.760 --> 00:12:46.060
And then I think when you open up the documentation for the beta, they have five different programs already written in there for you to try out.

00:12:46.060 --> 00:12:46.860
And it's kind of cool.

00:12:46.860 --> 00:12:53.040
You have a tree following, and it can count how many branches are in a tree.

00:12:53.240 --> 00:13:05.700
So if you're talking, maybe you want to do a science classroom classification and you want to see how far removed, this is very sciencey for you guys, how far removed an amoeba is from an ape.

00:13:05.700 --> 00:13:11.020
You would go down the cladogram or the tree, and you can calculate how many branches away.

00:13:11.020 --> 00:13:13.820
So it would be really cool how to incorporate the EvoBot.

00:13:13.820 --> 00:13:17.080
And not that you can't count trees, but, you know, just fun little things.

00:13:17.080 --> 00:13:20.480
No, but it's a really cool way to get the kids thinking.

00:13:20.480 --> 00:13:21.120
Yeah.

00:13:21.120 --> 00:13:24.440
So it says there's two ways of programming.

00:13:24.440 --> 00:13:30.240
And, you know, Brian just spoke about the history of programming languages and all these text-oriented languages.

00:13:30.240 --> 00:13:34.920
But neither of those are particularly, I mean, it does come with the Python aspect, but it's not.

00:13:34.920 --> 00:13:39.240
The two options here are kind of like there's this blocky style of programming.

00:13:39.240 --> 00:13:41.500
And does that become Python, as you know?

00:13:41.500 --> 00:13:45.060
No, I'm not sure how they came about it, but the original was always block.

00:13:45.060 --> 00:13:49.780
And then the block would increase in difficulty depending on the age.

00:13:50.580 --> 00:14:00.100
Similar to a lot of the other block programs where you would have limited writing, and then you would have color coding, and then you would start pushing in more functions.

00:14:00.100 --> 00:14:04.300
But this one seems to be just a full-on Python beta version.

00:14:04.500 --> 00:14:12.940
There is an online web browser where you can connect to the Ozo bot.

00:14:12.940 --> 00:14:14.620
I think it gave you an – no, that's the simulator.

00:14:14.620 --> 00:14:15.520
That one's for the block.

00:14:15.520 --> 00:14:16.660
But that one's cool, too.

00:14:16.660 --> 00:14:18.000
I'll try to find it for you.

00:14:18.000 --> 00:14:20.460
But there's a – it's called – I'll find it for you.

00:14:20.460 --> 00:14:26.460
But it's called like Evo Ozo bot, and you can code right in the browser once you connect via Bluetooth.

00:14:27.180 --> 00:14:28.240
Yeah, let me see.

00:14:28.240 --> 00:14:29.060
This is it.

00:14:29.060 --> 00:14:32.100
So bots like these are great for learning to code.

00:14:32.100 --> 00:14:37.320
And this is one that I definitely tell parents when – because everyone asks me, like, hey, what should I get for my kid?

00:14:37.320 --> 00:14:38.800
Like, should I get a micro bit?

00:14:38.800 --> 00:14:40.100
What kind of robot should I get?

00:14:40.100 --> 00:14:47.540
The Ozo bot is a great one because it can now grow even further with your child as they're learning more about coding.

00:14:47.540 --> 00:14:52.820
So you can get them started with really basics, you know, writing on paper with a marker.

00:14:52.820 --> 00:14:55.580
It can follow the line and do different things as the color changes.

00:14:55.580 --> 00:15:00.720
They can then grow into using blocks to program it, and now they can code using Python.

00:15:00.900 --> 00:15:10.340
So it's the same robot, but now they've evolved their knowledge and understanding of computer science and computational thinking by progressing their languages as they go.

00:15:10.340 --> 00:15:12.220
So it's a really great use for that.

00:15:12.220 --> 00:15:13.660
This is really cool.

00:15:13.660 --> 00:15:17.140
Let me just try to do a little commentary for people listening and not seeing.

00:15:17.140 --> 00:15:18.280
Of course, the link's in the show notes.

00:15:18.280 --> 00:15:20.740
It looks like a little miniature R2-D2.

00:15:20.740 --> 00:15:24.960
Maybe, like, a little bit smaller than the palm of a kid's hand.

00:15:25.460 --> 00:15:32.540
And one way you can program it, which is fascinating, is you can draw a line with different colors, like a big, thick, sharpie-looking line.

00:15:32.540 --> 00:15:34.820
But the colors teach it to do stuff.

00:15:34.820 --> 00:15:42.960
Like, if it hits a red part of the line, it might spin or play a sound, and then it goes to a black line, and then, like, a blue one maybe means, you know, disco.

00:15:42.960 --> 00:15:43.420
Whatever.

00:15:43.420 --> 00:15:46.200
I don't know what the mapping over to its actions are.

00:15:46.200 --> 00:15:49.000
But that's really neat to get kids thinking.

00:15:49.000 --> 00:15:51.820
And then they can go to this visual block, and then they can go to Python.

00:15:51.820 --> 00:15:52.800
I agree.

00:15:52.800 --> 00:15:53.380
This is neat.

00:15:53.380 --> 00:15:57.620
And I put the editor on the notes for you, so you can click on it.

00:15:57.620 --> 00:16:07.980
Yeah, so the only problem that I've been reading about is the Python's not picking up on the dimensions or the length of the line.

00:16:07.980 --> 00:16:12.140
So they have to be exactly four millimeters in order to do, like, tree branching.

00:16:12.140 --> 00:16:15.880
So it's working on that feature.

00:16:15.880 --> 00:16:21.140
Whereas with the regular block, you can draw – a kid can draw a line, and it'll work.

00:16:21.140 --> 00:16:23.460
But I think that's great, and they have the examples.

00:16:23.460 --> 00:16:32.520
So they have the three simple ones that you can get right into the square walk example, and then it goes down into a little bit more complex where the template ones are.

00:16:32.520 --> 00:16:33.360
So it's pretty cool.

00:16:33.360 --> 00:16:33.680
Yeah.

00:16:33.680 --> 00:16:34.180
Yeah.

00:16:34.180 --> 00:16:36.860
Any idea how much – I mean, like, if I'm a teacher.

00:16:37.540 --> 00:16:37.980
Yeah.

00:16:37.980 --> 00:16:37.980
Yeah.

00:16:37.980 --> 00:16:42.900
$175 for the new Ozo bot Evo.

00:16:42.900 --> 00:16:44.100
It used to be $95.

00:16:44.100 --> 00:16:48.200
But, like I said, it's a new improved.

00:16:48.200 --> 00:16:49.500
You can get a class set.

00:16:49.500 --> 00:16:52.300
A class set of, I think, eight is – I don't know.

00:16:52.300 --> 00:16:53.200
I want to say $2,000.

00:16:53.200 --> 00:16:53.760
Okay.

00:16:54.040 --> 00:16:55.200
So it's not too bad.

00:16:55.200 --> 00:17:00.540
It is one of those things that a teacher could go and get a grant for.

00:17:00.540 --> 00:17:03.280
I was thinking even, like, a teach-at-home sort of thing as well.

00:17:03.280 --> 00:17:03.680
Oh, yeah.

00:17:03.680 --> 00:17:05.280
It's not out of bounds for –

00:17:05.280 --> 00:17:11.140
Yeah, $175 is not bad for the bots going – you know, the bots that I've seen out there right now.

00:17:11.140 --> 00:17:18.260
And I really like the idea of having programming be something that's interacting with the real world.

00:17:18.260 --> 00:17:25.960
Like, either – that's what I liked about some of the MicroPython stuff or CircuitPython.

00:17:25.960 --> 00:17:28.700
The Playground Express and stuff does lights and everything.

00:17:29.320 --> 00:17:42.340
But this, it's – maybe it's just a little robot, but having it – your computer, your code, change something that they can see, it does make a big difference to make that reality there.

00:17:42.340 --> 00:17:44.780
Yeah, and it's pocket-sized, which is – I love.

00:17:44.780 --> 00:17:45.820
I love.

00:17:45.820 --> 00:17:47.120
It's not big and bulky.

00:17:47.120 --> 00:17:49.420
You can throw it in your pocket and walk around.

00:17:49.420 --> 00:17:50.960
But I might lose it in my house.

00:17:50.960 --> 00:17:51.800
Yeah, you might.

00:17:51.800 --> 00:17:53.240
Your cat might take it or something.

00:17:53.240 --> 00:17:57.460
But, yeah, that's mine.

00:17:57.460 --> 00:17:58.500
Excellent.

00:17:58.500 --> 00:18:00.120
Well, that's a really good find.

00:18:00.120 --> 00:18:04.400
Brian, before we move on, I want to tell everyone about our sponsor this week.

00:18:04.400 --> 00:18:12.160
I would like to tell us – tell everyone and to thank Microsoft and Microsoft for Startups for sponsoring this episode.

00:18:12.160 --> 00:18:21.800
Microsoft for Startups set out to understand what startups need to be successful and created a digital platform to help you overcome those challenges, and it's the Founders Hub.

00:18:21.800 --> 00:18:27.300
Founders Hub provides all founders at any stage with free resources to help solve startup challenges.

00:18:27.300 --> 00:18:32.980
Platform provides access to expert guidance, skilled resources, mentorship, and networking connections.

00:18:32.980 --> 00:18:35.100
Technology benefits and so much more.

00:18:35.100 --> 00:18:37.400
Founders Hub is truly open to all.

00:18:37.400 --> 00:18:39.700
You don't need to be investor-backed, but you can be.

00:18:39.700 --> 00:18:43.640
Speed up development with free access to GitHub and the Microsoft Cloud.

00:18:43.640 --> 00:18:45.320
Unlock credits over time.

00:18:45.760 --> 00:18:52.140
Also discounts and benefits from innovative companies partnering with Microsoft Founders Hub, such as OpenAI.

00:18:52.140 --> 00:18:57.640
You'll have access to their mentorship network, which includes hundreds of mentors across a range of disciplines.

00:18:57.640 --> 00:19:01.180
Need advice on marketing or fundraising or idea validation?

00:19:01.180 --> 00:19:10.400
Tons of topics, including management and coaching, are available, and you'll be able to book a one-on-one meeting with mentors, many of whom were former founders themselves.

00:19:10.660 --> 00:19:12.380
It's no longer about who you know.

00:19:12.380 --> 00:19:15.980
Get the critical support you need from Microsoft for startups, Founders Hub.

00:19:15.980 --> 00:19:22.580
Make your ideas a reality today by visiting pythonbytes.fm/foundershub 2022.

00:19:22.580 --> 00:19:28.900
That link, of course, is in your show notes, and we appreciate you using the link to let them know that you heard about them from us.

00:19:29.340 --> 00:19:31.280
Yeah, thanks, Microsoft, for supporting the show.

00:19:31.280 --> 00:19:36.120
Hey, Brian, real quick, real-time follow-up before we get on the next topic.

00:19:36.120 --> 00:19:40.440
Marco and the audience says, I envy every child that gets hooked onto programming with one of these.

00:19:40.440 --> 00:19:48.600
Yeah, that's way more compelling than original basic or Fortran or whatever many of us had to fight our way through.

00:19:48.600 --> 00:19:50.000
Yeah.

00:19:50.000 --> 00:19:51.600
Guess the number game.

00:19:51.600 --> 00:19:52.900
Yes, exactly.

00:19:52.900 --> 00:19:56.760
How about the print your name diagonal infinitely many times?

00:19:56.760 --> 00:19:57.960
That one's a good...

00:19:57.960 --> 00:20:07.420
I'm still trying to find it, but I remember when I was in third grade, I had a book that had programming challenges that would unlock parts of the story.

00:20:07.420 --> 00:20:13.840
So you'd read a few pages, and then you'd have to solve some puzzle to figure out what happens next in the story.

00:20:13.840 --> 00:20:19.060
And I need to go back and find it because it was such a creative way of getting kids engaged.

00:20:19.060 --> 00:20:21.640
And it was the cost of a book.

00:20:21.640 --> 00:20:23.800
Choose your own adventure, but with...

00:20:23.800 --> 00:20:24.500
Oh, with code.

00:20:24.500 --> 00:20:26.260
It's kind of like the advent of code thing.

00:20:26.580 --> 00:20:28.080
That's my next sixth grade project.

00:20:28.080 --> 00:20:29.160
I'm just going to have them do it.

00:20:29.160 --> 00:20:31.580
You have to guess the right word in order to see the next lesson.

00:20:31.580 --> 00:20:32.440
Nice.

00:20:32.440 --> 00:20:33.240
Exactly.

00:20:33.240 --> 00:20:42.640
Speaking of setting words, I want to talk to something a little more on the DevOps-y side, perhaps, of things.

00:20:42.640 --> 00:20:47.720
But this is a real simple one that I think people will find some joy and use for.

00:20:47.720 --> 00:20:53.040
I don't know if you've written any Python code and then wanted to know what's happening with it.

00:20:53.040 --> 00:21:04.140
So if you open up Activity Monitor in macOS, if you open up Task Manager or some of the Sysmon tools, and you say, what is my program doing?

00:21:04.340 --> 00:21:05.340
Is it using a lot of memory?

00:21:05.340 --> 00:21:06.340
Is it busy?

00:21:06.340 --> 00:21:07.540
It's not...

00:21:07.540 --> 00:21:08.640
Nothing seems to be happening.

00:21:08.640 --> 00:21:11.920
Is it like the CPU is pinned or is it just stuck?

00:21:11.920 --> 00:21:16.640
You want to find your program in a list of programs or use even top or something like that.

00:21:16.640 --> 00:21:18.140
What is the name of your program?

00:21:18.140 --> 00:21:18.860
It's Python.

00:21:18.860 --> 00:21:20.060
It's always Python.

00:21:20.060 --> 00:21:25.080
And there might be many things called Python that are not even related to your thing called Python.

00:21:25.220 --> 00:21:25.720
No.

00:21:25.720 --> 00:21:35.900
So I want to tell people about this thing called SetProcTitle, as in SetProcessTitle or name, which is really, really cool.

00:21:35.900 --> 00:21:38.460
And its use case is incredibly simple.

00:21:38.460 --> 00:21:41.120
I think I even have an example here.

00:21:41.120 --> 00:21:41.620
Yes.

00:21:41.620 --> 00:21:42.060
Here.

00:21:42.060 --> 00:21:42.400
No.

00:21:42.400 --> 00:21:43.440
One of these.

00:21:43.440 --> 00:21:45.200
I don't have the exact code.

00:21:45.200 --> 00:22:03.240
But one thing that's cool is if you do anything with web stuff like MicroWSGI or G-Unicorn, if you would just have this installed as part of your web app or your API or any of those things, like in MicroWSGI, you can say proc name prefix is like, for example, on TalkByTheTraining, we use MicroWSGI.

00:22:03.240 --> 00:22:05.220
So it says training dash.

00:22:05.220 --> 00:22:07.580
And then you just say autoproc name is true.

00:22:07.580 --> 00:22:08.820
Oh, cool.

00:22:09.060 --> 00:22:16.900
When I go to the server and I hit glances or top or one of these types of things and you say, what are my processes doing?

00:22:16.900 --> 00:22:17.780
Well, guess what?

00:22:17.780 --> 00:22:23.980
It's called training MicroWSGI worker one, training MicroWSGI worker seven and eight.

00:22:23.980 --> 00:22:30.800
And then for the thing that does the search engine as a system daemon I wrote in Python, it was also called Python in the list.

00:22:30.800 --> 00:22:36.100
But now it's TalkByTheOn search, as in training, search daemon and these things.

00:22:36.160 --> 00:22:44.140
And all you're going to do is basically import set proc title and say, at the beginning of your program, set proc title, whatever you want to see here, off it goes.

00:22:44.140 --> 00:22:47.600
But also the web frameworks will pick this up and use it if they find it a lot of times.

00:22:47.600 --> 00:22:48.160
Nice.

00:22:48.160 --> 00:22:58.780
This is really cool when you're working in like a Docker environment where you've got a bunch of containers that are all running Python, especially ones that maybe you are just, you know, hosting rather than building.

00:22:58.780 --> 00:23:01.900
This is a great way to identify your specific processes.

00:23:01.900 --> 00:23:03.120
So I really like this.

00:23:03.120 --> 00:23:07.420
Yeah, I like it too, because it's just so simple to use.

00:23:07.420 --> 00:23:09.920
You literally, one import statement, what is the title?

00:23:09.920 --> 00:23:14.540
But it knocks on, it follows onto these other tools that make it really useful.

00:23:14.540 --> 00:23:18.660
So you can find your thing, not just, you know, one of the 10 Python things.

00:23:18.660 --> 00:23:21.120
Yeah, just don't set the proc title to Python.

00:23:24.260 --> 00:23:25.580
You could be also Python.

00:23:25.580 --> 00:23:27.380
It could be also Python.

00:23:27.380 --> 00:23:29.140
Exactly.

00:23:29.140 --> 00:23:32.320
You could set it to like sneaky things.

00:23:32.320 --> 00:23:37.380
Like you could set it to notepad on Windows or service host or like some weird thing.

00:23:37.380 --> 00:23:38.940
You're like, oh, no, it's blending in.

00:23:39.600 --> 00:23:44.280
This reminds me of that library, the progress library or the spinning wheel of death on the Mac.

00:23:44.280 --> 00:23:49.720
So we just have the cursor and the ticking cursor going around.

00:23:49.720 --> 00:23:50.300
Each wall, right?

00:23:50.300 --> 00:23:53.840
Just combine them, combine them two together and just go, yes, it's still processing.

00:23:53.840 --> 00:23:55.600
Exactly.

00:23:55.600 --> 00:23:56.940
Evil virus.

00:23:56.940 --> 00:23:57.880
All right.

00:23:58.140 --> 00:24:00.440
Well, anyway, that's set proc title.

00:24:00.440 --> 00:24:02.140
People should check that out if they haven't used it.

00:24:02.140 --> 00:24:02.900
Oh, nice.

00:24:02.900 --> 00:24:03.080
Cool.

00:24:03.080 --> 00:24:08.900
Well, I was looking in the past before looking at old, the origins of Python.

00:24:08.900 --> 00:24:11.520
Now I want to look in the future at 3.12.

00:24:11.520 --> 00:24:14.260
Didn't we just get 3.11 though?

00:24:14.260 --> 00:24:15.160
Yeah.

00:24:15.160 --> 00:24:19.500
So 3.11 really just was finally released in like November, right?

00:24:19.500 --> 00:24:21.260
So just last month, I think.

00:24:21.260 --> 00:24:23.560
But I'm already looking ahead to 3.12.

00:24:23.560 --> 00:24:26.300
So it is in the alpha stages.

00:24:26.300 --> 00:24:38.100
So one of the things I want to point out like a caveat right away is that publishers, pre-release users should be aware that, oh, I forgot.

00:24:38.100 --> 00:24:39.320
This isn't the right morning.

00:24:39.320 --> 00:24:41.980
But basically, stuff in alpha might change.

00:24:41.980 --> 00:24:43.800
So be careful if you're using alpha.

00:24:43.800 --> 00:24:47.240
So 3.12 is on the alpha 2 release.

00:24:47.240 --> 00:24:48.900
I'm already checking it out.

00:24:48.900 --> 00:24:52.060
One of the things I love already, I'm loving this in 3.11.

00:24:52.060 --> 00:24:55.880
So I'm glad they're going for more changes is the improved error messages.

00:24:55.880 --> 00:24:56.400
100%.

00:24:56.400 --> 00:24:57.900
So I'm already seeing.

00:24:57.900 --> 00:24:58.980
Have you guys noticed?

00:24:58.980 --> 00:25:00.360
I love it.

00:25:00.360 --> 00:25:01.960
It's so much easier to teach.

00:25:01.960 --> 00:25:02.760
Just let me tell you.

00:25:02.760 --> 00:25:04.400
I'm like, read down last line.

00:25:04.400 --> 00:25:04.860
Read it.

00:25:04.860 --> 00:25:05.560
Yeah.

00:25:05.560 --> 00:25:13.480
If you import something or use a wrong variable or something, having it be able to say, did you mean?

00:25:13.480 --> 00:25:15.420
And then pick the right thing.

00:25:15.420 --> 00:25:16.140
That's incredible.

00:25:16.140 --> 00:25:16.960
It is incredible.

00:25:16.960 --> 00:25:17.740
I love it.

00:25:17.740 --> 00:25:21.700
So even more improvements in the error messages, which is great.

00:25:21.700 --> 00:25:24.460
This is nice.

00:25:24.460 --> 00:25:25.760
Did you mean?

00:25:25.760 --> 00:25:25.980
Yeah.

00:25:25.980 --> 00:25:27.160
Did you mean from import?

00:25:27.160 --> 00:25:28.460
Oh, I've done this before.

00:25:28.460 --> 00:25:30.040
Do you say import from?

00:25:30.040 --> 00:25:30.720
You can't do that.

00:25:30.720 --> 00:25:32.880
You have to say from thing, import thing.

00:25:32.880 --> 00:25:34.220
So nice.

00:25:34.220 --> 00:25:35.040
Those are great.

00:25:35.040 --> 00:25:40.380
The new features so far, it's a Linux perf profiler.

00:25:40.380 --> 00:25:42.720
So if you care about that, run it on Linux.

00:25:42.720 --> 00:25:43.420
That's kind of neat.

00:25:43.420 --> 00:25:45.840
There's a whole bunch of other changes.

00:25:45.840 --> 00:25:48.460
The one thing I noticed was pathlib walk.

00:25:48.460 --> 00:25:50.340
I didn't know pathlib didn't have a walk.

00:25:50.340 --> 00:25:53.460
So for your walking, a directory tree, which is kind of neat.

00:25:53.460 --> 00:25:56.300
Anyway, why am I bringing this up?

00:25:56.300 --> 00:25:59.500
Because it's not going to come out until next November.

00:25:59.500 --> 00:26:01.720
So why should you care about it?

00:26:01.720 --> 00:26:06.420
Well, you should care about it as soon as possible if you're a Python package maintainer.

00:26:06.420 --> 00:26:11.820
If you maintain a package that other people are using, why not start already and see if

00:26:11.820 --> 00:26:13.780
there's anything in there that you need to care about?

00:26:13.780 --> 00:26:21.480
And what I did, so I wrote up a little article on testing with Python 312 at pythontest.com.

00:26:21.480 --> 00:26:23.860
And I just went through the changes.

00:26:23.860 --> 00:26:26.980
So there were just a few lines of change that I needed to make.

00:26:27.940 --> 00:26:35.440
If I talk about where to get it and using also running Py, which is Brett Cannon's Python

00:26:35.440 --> 00:26:38.680
launcher on Mac in on Windows, it just comes with Py.

00:26:38.680 --> 00:26:41.000
But once you install it, you can use three.

00:26:41.000 --> 00:26:43.860
You can use that to launch 312 to play with things.

00:26:43.860 --> 00:26:46.080
So the one liners really are.

00:26:46.080 --> 00:26:49.200
I've got a tox any file that I just added 312 to.

00:26:49.200 --> 00:26:49.840
That's it.

00:26:50.280 --> 00:26:52.220
And then what else?

00:26:52.220 --> 00:26:53.500
GitHub Actions.

00:26:53.500 --> 00:26:55.800
GitHub Actions also does 312 now.

00:26:55.800 --> 00:27:01.320
So I added 312 dev to the test matrix.

00:27:01.320 --> 00:27:04.160
But so I released this morning.

00:27:04.160 --> 00:27:05.940
I just wrote this up and sent it out.

00:27:05.940 --> 00:27:10.960
And I already got a question back from Brian Skin saying, what if it fails?

00:27:10.960 --> 00:27:15.280
I don't really want to like not release something just because 312 failed.

00:27:15.280 --> 00:27:21.180
And if you care about that and want to make sure that that doesn't muck up your pipelines,

00:27:21.180 --> 00:27:22.800
there's a way to deal with that.

00:27:22.800 --> 00:27:27.860
So there's some documentation on GitHub Actions on how to deal with that.

00:27:27.860 --> 00:27:30.080
And it's using continue on error.

00:27:30.080 --> 00:27:34.880
And I'm using the documentation uses the variable experimental.

00:27:34.880 --> 00:27:36.720
And that sounds good to me.

00:27:36.720 --> 00:27:43.300
So I'm adding like a treat everything else normal without experimental, but treat 312 dev

00:27:43.300 --> 00:27:45.680
as experimental, which means continue on error.

00:27:45.680 --> 00:27:51.060
And all this does, the only thing it does, if you set that for a particular thing, is it

00:27:51.060 --> 00:27:59.140
allows your different things that you're testing, it allows some of them to fail and not stop

00:27:59.140 --> 00:27:59.460
others.

00:27:59.460 --> 00:28:05.800
So by default, if anything fails in the GitHub Action Pipeline, then it stops running all the

00:28:05.800 --> 00:28:06.400
rest of them.

00:28:06.400 --> 00:28:09.100
And what this does is it allows the rest of them.

00:28:09.100 --> 00:28:10.640
You still see that something failed.

00:28:10.640 --> 00:28:16.140
So you have to decide whether you care about that or not, but it'll let everything else

00:28:16.140 --> 00:28:16.540
pass.

00:28:16.540 --> 00:28:21.280
So anyway, also handy for ensuring that all of your tests continue, right?

00:28:21.280 --> 00:28:25.020
So if you just want to let it continue on everything, all your pipelines will always work.

00:28:25.020 --> 00:28:30.380
You'll never break the bill and have to worry about it.

00:28:30.380 --> 00:28:30.640
Yeah.

00:28:30.640 --> 00:28:31.800
It's fine.

00:28:31.800 --> 00:28:34.260
Brian, is this what you're recommending?

00:28:34.260 --> 00:28:37.940
No, I actually, seriously, I like that feature.

00:28:37.940 --> 00:28:40.000
And I love the experimental classification.

00:28:40.000 --> 00:28:40.480
That's cool.

00:28:40.480 --> 00:28:40.860
Yeah.

00:28:40.860 --> 00:28:43.140
So anyway, what do we got next?

00:28:43.140 --> 00:28:46.820
Well, over to Sean.

00:28:46.820 --> 00:28:47.380
Yeah.

00:28:47.380 --> 00:28:52.920
So I was at in Las Vegas last week for reInvent from AWS.

00:28:52.920 --> 00:28:55.600
And I'm still not sure what day it is.

00:28:55.600 --> 00:29:00.180
It's it was Las Vegas is its own time zone, meaning all of them at the same time.

00:29:01.180 --> 00:29:07.600
But what I saw there was actually a really great chat by a company called EF Education

00:29:07.600 --> 00:29:08.140
First.

00:29:08.140 --> 00:29:09.760
It's been around for a long time.

00:29:09.760 --> 00:29:14.400
They have schools and offices and training centers all over the world.

00:29:14.400 --> 00:29:18.620
And they were talking about how they were using the cloud to reinvent online learning.

00:29:18.620 --> 00:29:22.780
And they've been doing online learning for years and years since the 90s, in fact.

00:29:23.040 --> 00:29:28.200
And what they recognized was that when we all went into the pandemic and we did online learning,

00:29:28.200 --> 00:29:33.000
a lot of it looked like old school classrooms where everyone was neatly arranged in rows

00:29:33.000 --> 00:29:38.180
and all sitting there facing forward and looking forward, just like we are kind of on this call right now.

00:29:38.180 --> 00:29:42.720
But they recognized that that's not really the way that classrooms work anymore.

00:29:42.720 --> 00:29:45.680
We don't all sit in rows and face forward towards the teacher.

00:29:45.860 --> 00:29:47.620
We we are more interactive.

00:29:47.620 --> 00:29:48.420
We're more engaged.

00:29:48.420 --> 00:29:50.120
We're more collaborative in the classroom.

00:29:50.120 --> 00:29:53.120
And they wanted to redesign their platform to do that.

00:29:53.120 --> 00:29:57.880
So they retooled their entire thing using AWS cloud.

00:29:57.880 --> 00:30:03.640
But what was great about their approach was that they also baked in a lot of science into the online learning.

00:30:03.640 --> 00:30:13.020
And what they were talking about was the way that we've been doing measurements and metrics and science and learning online is always after the fact.

00:30:13.100 --> 00:30:15.000
We look at test scores or we look at assessments.

00:30:15.000 --> 00:30:18.420
We look at the way that people answer multiple choice questions.

00:30:18.420 --> 00:30:23.440
But we don't actually bring the science into the actual learning environment, into the live classroom.

00:30:23.440 --> 00:30:28.320
So what they did was used a number of AWS services, which you could find on any platform.

00:30:28.320 --> 00:30:29.560
Transcription.

00:30:29.560 --> 00:30:31.800
They used a bunch of NLP work with it.

00:30:31.800 --> 00:30:39.120
A lot of analysis to be able to figure out how engaged every student was in the classroom, basically as it was happening.

00:30:39.120 --> 00:30:43.400
So they could give feedback to the teachers to show them, like, hey, these students are really engaged.

00:30:43.400 --> 00:30:44.840
These ones, not so much.

00:30:44.840 --> 00:30:50.840
And then they also use some really great computer vision to see how people were interacting with the coursework.

00:30:51.560 --> 00:30:57.360
So even just where their mouse was and what the position was, as well as their level of engagement with the students.

00:30:57.360 --> 00:31:08.320
So what I really liked about this was they looked at this problem of online learning and tried to figure out how do we make it suck less for the teachers, for the students, for everybody involved.

00:31:08.460 --> 00:31:14.000
And what I got me thinking about in this talk was how could we use this in computer science?

00:31:14.000 --> 00:31:25.720
So how can we take that same level of engagement around learning a foreign language or learning business processes for an MBA and apply that to computer science in a really highly engaging sort of way?

00:31:25.720 --> 00:31:38.220
And also a very metrics driven, sciencey sort of way so that everyone, student, teacher, administrator can get better information about how the learning is actually happening online.

00:31:38.220 --> 00:31:38.980
I love that.

00:31:38.980 --> 00:31:41.260
Like educational data mining at its best.

00:31:41.260 --> 00:31:44.220
They really took it to another level.

00:31:44.320 --> 00:31:47.480
I mean, just their classroom experience is very dynamic, right?

00:31:47.480 --> 00:31:49.300
So it's almost that Twitch style.

00:31:49.300 --> 00:31:54.780
If you see on the screen here, the instructor is green screened in in just the corner of the screen, right?

00:31:54.780 --> 00:31:57.400
So it's not over in a box with a bunch of distractions.

00:31:57.400 --> 00:32:03.980
He's in the corner and he's doing in this screenshot, he's doing a little bit of a mix and match and drag and drop.

00:32:03.980 --> 00:32:14.300
But they had other examples where he was they had created a digital set where he was behind the counter at a hotel and he could practice, you know, checking into a hotel using the foreign language.

00:32:14.300 --> 00:32:19.900
With him as the receptionist and the student as the guest coming in.

00:32:19.900 --> 00:32:21.380
That's pretty cool.

00:32:21.380 --> 00:32:28.460
I think there's like there's a lot of big uptick in a lot of the educational data mining side for the data scientists.

00:32:28.460 --> 00:32:34.760
And there's been a lot more ability to collect all this big data from these websites.

00:32:34.760 --> 00:32:39.320
We had a slew tons and tons of data from COVID-19.

00:32:39.320 --> 00:32:43.400
And I think a lot of people are realizing, wow, we have so much data now.

00:32:43.500 --> 00:32:44.080
What can we do?

00:32:44.080 --> 00:32:44.800
And that's awesome.

00:32:44.800 --> 00:32:45.520
That's awesome.

00:32:45.520 --> 00:32:47.820
Just changes, just changes the dynamics.

00:32:47.820 --> 00:32:56.800
I haven't been in the education space directly enough lately to know, but obviously I've seen kids through there and, you know, I was in a lot of school myself.

00:32:56.800 --> 00:33:03.640
I feel like there's still probably a lot of opportunities for technology in education to make it smoother and nicer.

00:33:03.640 --> 00:33:04.880
Is that still true?

00:33:04.880 --> 00:33:05.320
Yeah.

00:33:05.420 --> 00:33:14.480
I mean, just think about when you provide a course where you do a course online and you're in this box and all your cohorts are kind of in this box and you have to switch.

00:33:14.480 --> 00:33:18.880
And then your slide takes over all the space when your students are trying to type.

00:33:18.880 --> 00:33:21.760
And if you don't have two monitors, everything gets in the way.

00:33:21.760 --> 00:33:29.860
So this can actually reshape the way that learning online for adults, for kids can change, right?

00:33:29.860 --> 00:33:37.160
So can you imagine you're a nice little cutout person on the bottom screen and your code's going up behind you as you type.

00:33:37.240 --> 00:33:44.780
So you're not in the way and you're still there and you're still engaging and you're still keeping, you know, that physical contact.

00:33:44.780 --> 00:33:46.720
I did air quotes there for those people listening.

00:33:46.720 --> 00:33:48.100
I keep forgetting podcasts.

00:33:48.100 --> 00:33:51.840
Physical, you know, contact with your students.

00:33:51.840 --> 00:33:52.640
Yeah.

00:33:52.640 --> 00:33:55.420
And did you air quote that we were a podcast?

00:33:55.420 --> 00:33:56.800
A podcast too.

00:33:56.800 --> 00:34:00.740
Can't take her anywhere.

00:34:00.740 --> 00:34:05.400
Sean, what else was your takeaways from AWS reInvent?

00:34:05.680 --> 00:34:09.300
There were a ton of really great talks there.

00:34:09.300 --> 00:34:11.820
And I'm catching up on a lot of them that I missed online.

00:34:11.820 --> 00:34:16.100
But really the main point was that everything is asynchronous.

00:34:16.100 --> 00:34:17.560
Everything is event driven.

00:34:17.560 --> 00:34:20.040
And it's pretty much Python all the way down.

00:34:20.040 --> 00:34:23.020
There's Lambda functions everywhere.

00:34:23.020 --> 00:34:24.760
And most people are writing them in Python.

00:34:24.760 --> 00:34:28.320
There's, you know, plenty of other options as well.

00:34:28.320 --> 00:34:32.540
But it seemed like it was the most popular choice for making things happen in the cloud.

00:34:33.020 --> 00:34:38.000
Looks like a lot of the videos, you know, it's in other sessions are available on demand as well.

00:34:38.000 --> 00:34:41.860
So yeah, I put a link to the one with Werner Vogel, which was really great.

00:34:41.860 --> 00:34:47.920
That was all about the asynchronous world that we live in and making the making the cloud more asynchronous.

00:34:48.640 --> 00:34:49.080
Yeah.

00:34:49.080 --> 00:34:51.640
As well as a, I forget the other one I put in.

00:34:51.640 --> 00:34:58.680
I think it was a link to, oh, a new feature that they added called EventBridge pipes, which I thought was kind of fun and a nice throwback.

00:34:58.680 --> 00:35:04.540
So EventBridge on AWS is like a place where you can have event driven code.

00:35:04.820 --> 00:35:08.280
So one process will finish, it will post an event saying, hey, I'm finished.

00:35:08.280 --> 00:35:12.920
And then another bit of code like a Lambda or something else can pick it up and process it.

00:35:12.920 --> 00:35:19.680
But they took the idea of bash pipes or Unix style pipes, and they're using it to connect these events more directly.

00:35:19.860 --> 00:35:30.920
So instead of having to write a bunch of glue code to be able to pass data and information about these events from one process to another, from a producer to a consumer, you can just connect them together directly.

00:35:30.920 --> 00:35:36.560
And so, okay, when this happens, then do this other thing, just like you would pipe output from one command into the input of another.

00:35:36.560 --> 00:35:37.120
Okay.

00:35:37.120 --> 00:35:38.040
Very interesting.

00:35:38.040 --> 00:35:38.580
Nice.

00:35:38.580 --> 00:35:45.100
I also got to give a shout out to AWS and for, or in re-event to get those videos out that quickly.

00:35:45.100 --> 00:35:47.540
I mean, it just stopped just a few days ago.

00:35:47.540 --> 00:35:48.660
So that's amazing.

00:35:48.980 --> 00:35:51.640
Yeah, they had live streams for just about everything.

00:35:51.640 --> 00:35:53.400
You could register for free for it.

00:35:53.400 --> 00:35:58.700
Pretty much every breakout session I went into had a really nice camera in the back filming it.

00:35:58.700 --> 00:36:02.600
I think I even, I was even interviewed on a video podcast while I was there.

00:36:02.600 --> 00:36:09.360
They really were embracing video and live streaming and making it available to as many people as they possibly could.

00:36:09.360 --> 00:36:15.040
I guess when you're like the top server holder and space provider, it doesn't matter, right?

00:36:15.040 --> 00:36:16.660
Sure.

00:36:16.660 --> 00:36:18.520
It's just money, right?

00:36:18.820 --> 00:36:19.140
Yeah.

00:36:19.140 --> 00:36:27.100
Well, it's a great example of, you know, a company investing millions in a conference to get billions back from the developers using their platform.

00:36:27.100 --> 00:36:28.840
So it seems like a smart investment.

00:36:28.840 --> 00:36:29.560
Absolutely.

00:36:29.560 --> 00:36:30.700
Well, yeah.

00:36:30.700 --> 00:36:36.560
But wait, before we move on really quick, just an audience, James just says that would be an awesome use of tech and teaching comp side.

00:36:36.560 --> 00:36:36.880
Yeah.

00:36:36.880 --> 00:36:38.160
That's definitely about Sean.

00:36:38.160 --> 00:36:38.520
Yeah.

00:36:39.340 --> 00:36:41.040
Do we have any extras?

00:36:41.040 --> 00:36:43.120
I guess we're rounded out.

00:36:43.120 --> 00:36:44.080
Kelly, do you want to go first?

00:36:44.080 --> 00:36:44.660
Yeah.

00:36:44.660 --> 00:36:44.880
Go ahead.

00:36:44.880 --> 00:36:45.260
Yeah.

00:36:45.260 --> 00:36:45.320
Yeah.

00:36:45.320 --> 00:36:45.380
Yeah.

00:36:45.380 --> 00:36:53.040
So I just saw this and it's only been out for six days, but there's a new special interest group with the PSF, which is an EduSig.

00:36:53.800 --> 00:36:55.780
And it's led by Timothy Wilson.

00:36:55.780 --> 00:37:00.600
So I actually reached out to him because they've got a great list of universities that are teaching Python.

00:37:00.960 --> 00:37:06.240
They've got about five high school schools that are teaching Python.

00:37:06.240 --> 00:37:12.040
And I'm like, wait, I know there's more because I know there's a lot of our listeners out there are teaching Python there.

00:37:12.040 --> 00:37:16.500
And with all the work that's done with the educational summit, I thought this was interesting.

00:37:16.500 --> 00:37:22.360
There's not much on it from the PSF, so I'm hoping to find some more information soon.

00:37:22.360 --> 00:37:25.160
But it's only been out six days, so I've got to be patient, I guess.

00:37:25.160 --> 00:37:27.280
I'm like, go.

00:37:28.500 --> 00:37:31.460
And launch with full five pages of information, please.

00:37:31.460 --> 00:37:33.360
Yeah, that's excellent.

00:37:33.360 --> 00:37:34.120
That was cool.

00:37:34.120 --> 00:37:34.260
Nice.

00:37:34.260 --> 00:37:35.820
Sean, do you have any extras?

00:37:35.820 --> 00:37:39.920
I posted a couple of links to those talks at reInvent that I really liked.

00:37:39.920 --> 00:37:40.500
Okay.

00:37:40.500 --> 00:37:41.860
Go check them out.

00:37:41.860 --> 00:37:42.960
They're pretty fun to watch.

00:37:42.960 --> 00:37:48.200
And like Michael said, I think pretty much all of the live streams are out there, certainly of all the keynotes.

00:37:48.200 --> 00:37:53.520
But it was looking at dozens of different breakout sessions available now and all of it online for free.

00:37:53.520 --> 00:37:54.000
Wonderful.

00:37:54.000 --> 00:37:54.960
All right.

00:37:54.960 --> 00:37:57.500
I got a couple real, real quick ones here.

00:37:57.500 --> 00:38:07.500
So I talked about TextSniper and Textinator a little while ago, which is just fantastic software for, you know, select part of your screen.

00:38:07.500 --> 00:38:12.420
Whether this is a video you're watching with like a code demo and they're like, oh, here, call this API.

00:38:12.420 --> 00:38:13.760
Or here's a link to it.

00:38:13.760 --> 00:38:14.320
Just quick.

00:38:14.320 --> 00:38:15.420
Command-shift-2.

00:38:15.420 --> 00:38:16.080
Select.

00:38:16.080 --> 00:38:18.340
But we left our Windows friends out of that.

00:38:18.340 --> 00:38:20.040
So who was it?

00:38:20.040 --> 00:38:21.960
I want to make sure I give some credit here.

00:38:22.960 --> 00:38:24.440
I don't remember who said this ever.

00:38:24.440 --> 00:38:24.880
I'm sorry.

00:38:24.880 --> 00:38:36.780
But someone, thank you, listener, sent in a text extractor, which comes from the Microsoft Power Tools for Windows, Power Toys for Windows, which is the same thing for Windows.

00:38:36.940 --> 00:38:42.520
So if you're in Windows and you want to be able to hit a button or hot key and then say, I want to copy this out of the video.

00:38:42.520 --> 00:38:46.980
So I'm taking notes and I don't want to write, you know, five lines of bullet points.

00:38:46.980 --> 00:38:48.080
I want to just paste them.

00:38:48.080 --> 00:38:48.500
Boom.

00:38:48.500 --> 00:38:48.980
Here you go.

00:38:49.480 --> 00:38:50.440
So there's that.

00:38:50.440 --> 00:38:52.220
That's a great free one.

00:38:52.220 --> 00:38:53.640
Nice.

00:38:53.640 --> 00:39:06.420
Did a quick article over on using Jinja partials to break up your HTML templates like Jinja, Chameleon, and Django templates into more reusable pieces.

00:39:06.420 --> 00:39:08.080
And yeah, that's it for me.

00:39:08.080 --> 00:39:08.900
Just those quick ones.

00:39:08.900 --> 00:39:09.420
Okay.

00:39:09.420 --> 00:39:15.600
I just had like, I guess now that I have two teachers and we were talking about how education has changed.

00:39:15.600 --> 00:39:19.680
I just want to hear if you have a similar experience.

00:39:19.680 --> 00:39:32.460
So my daughter is in junior high, eighth grade, and she's the she was in sixth when they were home the whole year doing like and the they did it all on iPads.

00:39:32.460 --> 00:39:33.880
Now they're back.

00:39:33.880 --> 00:39:37.080
They're back, of course, but they're still using the iPads a lot.

00:39:37.080 --> 00:39:39.200
And they're even turning a lot of their work in.

00:39:39.200 --> 00:39:43.340
I mean, and I didn't I didn't type when I was in junior high.

00:39:43.340 --> 00:39:50.520
I was writing stuff and they actually some of the writing assignments have to now have to actually be in paper, which is the unusual thing.

00:39:50.520 --> 00:39:57.100
Most of them are typed and sometimes they're in paper and people and the kids complain of like, I don't want to actually write something.

00:39:57.100 --> 00:39:59.560
Have you guys deal with that at all?

00:39:59.560 --> 00:40:01.120
Or I feel I feel the same way.

00:40:01.120 --> 00:40:01.740
I hate writing.

00:40:01.740 --> 00:40:02.480
I do, too.

00:40:02.480 --> 00:40:05.760
Sean and I would not have a printer in our room.

00:40:05.840 --> 00:40:07.100
They're like, do you have scissors?

00:40:07.100 --> 00:40:07.800
Do you have a pencil?

00:40:07.800 --> 00:40:08.500
I'm like, what's a pencil?

00:40:08.500 --> 00:40:10.020
Who uses pencils in this school?

00:40:10.020 --> 00:40:14.260
I think it slows down.

00:40:14.260 --> 00:40:16.920
For us, for me, at least, it's inefficient.

00:40:16.920 --> 00:40:18.260
I'd rather type something.

00:40:18.260 --> 00:40:24.600
I can even start typing while kids are up to me looking at me and I can without, you know, looking at the keyboard.

00:40:24.600 --> 00:40:26.880
And whereas if you're writing, you have to stop.

00:40:26.880 --> 00:40:29.600
And one of the interesting things is the due dates.

00:40:29.600 --> 00:40:31.560
Now, the due times are not on.

00:40:31.560 --> 00:40:33.380
They're not like 59 PM.

00:40:33.380 --> 00:40:33.920
Yeah.

00:40:33.920 --> 00:40:35.840
They're like midnight or something like that.

00:40:35.840 --> 00:40:38.080
It's defaulted in most learning management systems.

00:40:38.080 --> 00:40:39.920
And teachers are lazy, just like coders.

00:40:39.920 --> 00:40:40.820
Okay.

00:40:40.820 --> 00:40:43.040
Interesting.

00:40:43.040 --> 00:40:43.460
All right.

00:40:43.460 --> 00:40:43.960
Well, thanks.

00:40:44.560 --> 00:40:48.800
Well, I think the whole typing versus writing is it should have a purpose, right?

00:40:48.800 --> 00:40:50.300
There should be an intent behind it.

00:40:50.300 --> 00:40:57.040
So, in some grade levels and in some settings, the idea of writing something out is really important.

00:40:57.160 --> 00:41:05.620
It might be to help slow down the thinking or even sometimes the tactile feel and the feedback that you get from the pen or the pencil moving across the paper, right?

00:41:05.620 --> 00:41:07.840
It's the satisfying part of using a crayon.

00:41:07.840 --> 00:41:11.960
But as long as it's not, oh, write it because I told you to, right?

00:41:11.960 --> 00:41:13.280
Or write it so you don't cheat.

00:41:13.280 --> 00:41:14.000
Right.

00:41:14.000 --> 00:41:17.560
It should be there for a purpose or a reason.

00:41:17.560 --> 00:41:25.660
We want you to write this out because we want you to slow down and think about what you're writing or take the time to process what you're writing instead of just, you know, typing it out.

00:41:25.820 --> 00:41:27.100
That makes sense to me.

00:41:27.100 --> 00:41:30.580
But I never appreciated the just do it because I said so.

00:41:30.580 --> 00:41:35.400
I'm concerned about the kids' ability to doodle while the teacher's talking, though.

00:41:35.400 --> 00:41:36.940
Are we losing that?

00:41:36.940 --> 00:41:37.360
No.

00:41:37.360 --> 00:41:42.240
Teachers don't like kids to doodle while they're talking anyways because they're like, you're not listening.

00:41:42.240 --> 00:41:45.180
I mean, that's what's said, right?

00:41:45.180 --> 00:41:50.320
We, on the other hand, we have whiteboard markers all over the table, you know, out there for the tables and the walls.

00:41:50.320 --> 00:41:53.020
That's something that Sean and I started and has kept.

00:41:53.920 --> 00:41:56.640
Because we do like the process of writing, like Sean said.

00:41:56.640 --> 00:41:58.740
I, you know, write out your pseudocode.

00:41:58.740 --> 00:42:00.040
Think about what's going on.

00:42:00.040 --> 00:42:03.080
How would this look if you were writing something in an editor?

00:42:03.080 --> 00:42:04.220
A hundred percent.

00:42:04.220 --> 00:42:05.640
But actual writing stories?

00:42:05.640 --> 00:42:08.520
I use Grammarly.

00:42:08.520 --> 00:42:09.660
Like your tweet.

00:42:10.920 --> 00:42:12.500
Well, I forgot.

00:42:12.500 --> 00:42:15.060
We haven't got to our joke yet.

00:42:15.060 --> 00:42:16.520
This is true.

00:42:16.520 --> 00:42:18.260
I actually have a really quick follow-up.

00:42:18.260 --> 00:42:29.940
Now, for people who are in the digital side but kind of want this, you can check out Paperlike, which is a screen protector for your iPad that gives it writing on paper feel.

00:42:29.940 --> 00:42:30.700
Oh, nice.

00:42:30.800 --> 00:42:35.160
For the pen, that might be kind of nice because still writing on glass is just odd.

00:42:35.160 --> 00:42:35.700
All right.

00:42:35.700 --> 00:42:36.420
But on to the joke.

00:42:36.420 --> 00:42:37.840
We got a couple of jokes.

00:42:37.840 --> 00:42:42.980
Marco was picking on me earlier saying, you use Mastodon, Michael?

00:42:42.980 --> 00:42:43.680
I had no idea.

00:42:46.520 --> 00:42:53.060
But as much as I love it, I tried to pull up the jokes last week, which were on Mastodon, and they would not pull up.

00:42:53.060 --> 00:42:56.280
If I pulled them up when I was logged into Mastodon, they would say, you can't find these.

00:42:56.280 --> 00:42:58.800
But if I pull them up in an incognito window, guess what?

00:42:58.800 --> 00:42:59.340
You can find them.

00:42:59.340 --> 00:43:01.000
So I want to highlight a couple of jokes.

00:43:01.000 --> 00:43:03.440
We talked about recursion like the week before.

00:43:03.440 --> 00:43:12.500
And Kim Van Wijk says, given the nature of the joke, perhaps next week's Python Bytes joke could just be, see last week's Python Bytes joke.

00:43:14.520 --> 00:43:24.100
And also, I saw another joke, or not really a joke, but sort of a meme derived from a real thing, is apparently crows, ravens, can learn recursion.

00:43:24.100 --> 00:43:27.520
And so it's just a matter of time before they take over the world.

00:43:27.520 --> 00:43:35.380
No, they're going to get stuck in a race condition where they don't have a base case, and we'll never see them again.

00:43:35.380 --> 00:43:36.880
They're like, no exit condition?

00:43:36.880 --> 00:43:37.300
No.

00:43:37.300 --> 00:43:40.240
The call stack got too deep.

00:43:40.240 --> 00:43:40.580
Sorry.

00:43:40.580 --> 00:43:44.100
Why did that raven fall over?

00:43:44.100 --> 00:43:47.680
Well, it just went in circles faster and faster until it collapsed.

00:43:47.680 --> 00:43:48.720
All right.

00:43:48.720 --> 00:43:55.700
Then I got another Mastodon sort of follow-on joke because, you know, Mastodon is like open source and like independent and not corporate.

00:43:55.700 --> 00:43:56.940
But it's kind of weird.

00:43:56.940 --> 00:44:00.100
So this person says, timeline of a new Mastodon user.

00:44:00.100 --> 00:44:01.600
Day one, this sucks.

00:44:01.600 --> 00:44:02.400
Servers are confusing.

00:44:02.400 --> 00:44:03.540
Why is my feed empty?

00:44:03.540 --> 00:44:05.640
Day two, there's no quote tweet.

00:44:05.640 --> 00:44:06.540
This is dumb.

00:44:06.540 --> 00:44:10.160
Day three, Mastodon better make some changes if it wants to compete with Twitter.

00:44:10.160 --> 00:44:12.160
Day seven, hmm, people are nice.

00:44:12.160 --> 00:44:16.400
Day 10, I'm loving the note ads and real conversations.

00:44:16.400 --> 00:44:19.120
Day 15, the workers must seize the production.

00:44:19.120 --> 00:44:22.640
It means a reduction to execute the capitalist, might I add.

00:44:22.640 --> 00:44:24.060
The billionaires first.

00:44:26.060 --> 00:44:30.880
Yeah, maybe I can see people getting a little too intense in this.

00:44:30.880 --> 00:44:33.120
And then let's see here.

00:44:33.120 --> 00:44:34.260
That's too true.

00:44:34.260 --> 00:44:36.340
I'm telling you, this is the timeline.

00:44:36.340 --> 00:44:38.120
We're like on day 15 around here.

00:44:38.120 --> 00:44:42.440
And then I saw some, one of you all put this joke in here as well.

00:44:42.440 --> 00:44:43.700
Someone want to take that one?

00:44:43.700 --> 00:44:48.340
Yeah, this is the, you know, my source for most of my geek humor, which is XKCD.

00:44:48.340 --> 00:44:52.760
And it's a matrix, a feature matrix of the various social media platforms.

00:44:52.760 --> 00:44:57.360
And so on the left side, it's got things like direct messages, group chats, file transfer,

00:44:57.360 --> 00:45:00.840
built-in games, user run instances, doesn't require a central server.

00:45:00.840 --> 00:45:01.960
So it just goes all the way down.

00:45:02.020 --> 00:45:06.800
And across the top, it's Twitter, Discord, Mastodon, Facebook, just goes all the way to

00:45:06.800 --> 00:45:07.100
the right.

00:45:07.100 --> 00:45:12.100
And on the very right side, you know, everything has like maybe half of the checkboxes at most

00:45:12.100 --> 00:45:13.020
filled in for features.

00:45:13.020 --> 00:45:17.900
But on the very right side, it says the Cybeco wireless handheld computer for teens from the

00:45:17.900 --> 00:45:18.500
year 2000.

00:45:18.500 --> 00:45:20.360
And it's every single checkbox.

00:45:20.360 --> 00:45:23.020
It does all of it from 22 years ago.

00:45:23.020 --> 00:45:24.540
I love it.

00:45:24.540 --> 00:45:26.440
Interesting.

00:45:26.440 --> 00:45:29.920
We were living in the future and we just didn't know it.

00:45:29.920 --> 00:45:30.300
Yep.

00:45:30.300 --> 00:45:33.900
So now there's going to be a run on Cybeco computers on eBay.

00:45:33.900 --> 00:45:35.640
You'll never be able to find one now.

00:45:35.640 --> 00:45:37.340
It'll be like raspberry pies.

00:45:37.340 --> 00:45:38.300
They're just to be unobtainium.

00:45:38.300 --> 00:45:39.380
Yeah.

00:45:39.380 --> 00:45:41.860
Like that quote, the future is now is not true.

00:45:41.860 --> 00:45:43.480
The future is 22 years ago.

00:45:43.480 --> 00:45:44.400
You missed it.

00:45:44.400 --> 00:45:47.140
You're late in the game.

00:45:47.140 --> 00:45:49.840
Well, so thanks.

00:45:49.840 --> 00:45:51.800
Thanks everybody for coming on the show.

00:45:51.800 --> 00:45:52.720
It was a lot of fun.

00:45:52.720 --> 00:45:53.460
Thanks, Michael.

00:45:53.460 --> 00:45:55.220
Thank you for having us.

00:45:55.220 --> 00:45:56.120
We always enjoy it.

00:45:56.120 --> 00:45:56.800
Yeah.

00:45:56.800 --> 00:45:57.780
Thanks for coming, Sean and Kelly.

00:45:57.780 --> 00:45:58.260
Bye.

00:45:58.260 --> 00:45:59.240
Bye everyone.

