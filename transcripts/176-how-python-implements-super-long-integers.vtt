
00:00:00.000 --> 00:00:05.520
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.520 --> 00:00:14.160
This is episode 176 recorded April 1st 2020. April fools. So I'm Brian Okken. I'm Michael Kennedy.


00:00:14.160 --> 00:00:19.280
And this episode is brought to you by DigitalOcean. We'll talk about more about them later.


00:00:19.280 --> 00:00:24.320
But yeah, let's just catch up a little bit. What's going on? Oh, you know,


00:00:26.160 --> 00:00:31.120
this is one of the few bits of human interaction outside of my house that I get is to talk to you


00:00:31.120 --> 00:00:36.320
here on Skype video, right? Like, it's a weird time, isn't it? It's totally weird. We normally


00:00:36.320 --> 00:00:42.320
don't record video, but we do see each other. And we've noticed as we would contacted us or


00:00:42.320 --> 00:00:46.400
connected today that both of us have new haircuts, but they're homegrown haircuts.


00:00:46.400 --> 00:00:53.200
I never cut my own hair and it was getting bigger and bigger. And my hair doesn't get long. It just


00:00:53.200 --> 00:00:56.200
it just gets big and poofy and it's more like a Q-tip


00:00:56.200 --> 00:00:58.120
on top of my head and eventually I just break down,


00:00:58.120 --> 00:00:59.440
like I can't do this.


00:00:59.440 --> 00:01:01.720
So at first I looked at my daughter who's 19,


00:01:01.720 --> 00:01:04.680
I'm like, here's a shaver, you gotta cut my hair.


00:01:04.680 --> 00:01:07.460
She's like, no, no, she did an okay job.


00:01:07.460 --> 00:01:09.720
And that was really good and then I decided to go back


00:01:09.720 --> 00:01:11.960
and it was still quite a bit actually longer than I wanted


00:01:11.960 --> 00:01:15.320
so I gave it a second haircutting as well.


00:01:15.320 --> 00:01:17.720
And you know, honestly, it's about as good


00:01:17.720 --> 00:01:19.160
as the haircuts I've paid for.


00:01:19.160 --> 00:01:20.980
So I'm feeling like this might be a trend


00:01:20.980 --> 00:01:23.740
that I was forced into, and you're looking good yourself.


00:01:23.740 --> 00:01:27.800
- Yeah, so I normally have like a short goatee thing


00:01:27.800 --> 00:01:29.320
that I keep, and I just have,


00:01:29.320 --> 00:01:30.440
when I bought the trimmer for it,


00:01:30.440 --> 00:01:32.260
I just only needed one guard,


00:01:32.260 --> 00:01:34.940
'cause I'm, I mean, I didn't think ahead,


00:01:34.940 --> 00:01:37.380
and I just like, I don't know where


00:01:37.380 --> 00:01:38.700
all the rest of the guards were,


00:01:38.700 --> 00:01:41.660
so I only have that like little short guard


00:01:41.660 --> 00:01:45.700
for the trimmer, and my wife was willing to cut my hair,


00:01:45.700 --> 00:01:47.980
but it's a little shorter than I was expecting,


00:01:47.980 --> 00:01:49.060
but I think it's all right.


00:01:49.060 --> 00:01:50.620
I don't have to worry about it anymore.


00:01:50.620 --> 00:01:55.260
My kids say it's like a peach, so they come by and rub my head all the time.


00:01:55.260 --> 00:01:56.260
It looks good.


00:01:56.260 --> 00:01:57.900
That's the weird world we find ourselves in.


00:01:57.900 --> 00:02:01.820
You know, I'm here drinking coffee out of this Pittsburgh mug, but there will be no


00:02:01.820 --> 00:02:02.820
Pittsburgh, right?


00:02:02.820 --> 00:02:04.060
PyCon is now officially canceled.


00:02:04.060 --> 00:02:05.780
Yeah, that's a bummer.


00:02:05.780 --> 00:02:09.660
This might be the first recording since it was actually fully, fully canceled.


00:02:09.660 --> 00:02:11.940
At least the first time we spoke about it, possibly.


00:02:11.940 --> 00:02:16.060
We might have managed it last time, but there's certainly a tightening up on getting together


00:02:16.060 --> 00:02:19.280
for conferences and that kind of thing.


00:02:19.280 --> 00:02:22.860
We spoke a little bit about what's going to stick, these changes that we have to have


00:02:22.860 --> 00:02:24.520
that are going to stick.


00:02:24.520 --> 00:02:28.400
A lot of meetings could just be emails, or they could be remote, or whatever.


00:02:28.400 --> 00:02:31.000
I wonder what that's going to do to the conference space.


00:02:31.000 --> 00:02:32.840
Yeah, I wonder too.


00:02:32.840 --> 00:02:38.120
One of the reactions I heard from somebody was, even if it was to move towards a virtual,


00:02:38.120 --> 00:02:43.120
which they were talking about that a little bit, maybe doing a virtual conference, but


00:02:43.120 --> 00:02:44.120
that wasn't the thing.


00:02:44.120 --> 00:02:45.400
It's essentially canceled.


00:02:45.400 --> 00:02:48.040
Although some people are sending in videos,


00:02:48.040 --> 00:02:50.240
they're gonna have some people be able to send in


00:02:50.240 --> 00:02:52.280
their presentations as videos, so that's neat.


00:02:52.280 --> 00:02:53.960
But it's the meeting people.


00:02:53.960 --> 00:02:56.440
We interact with people online all year long,


00:02:56.440 --> 00:02:59.300
and it's one chance to get together.


00:02:59.300 --> 00:03:02.080
So at least with PyCon, I don't think that'll go away.


00:03:02.080 --> 00:03:03.000
- No, I don't think so.


00:03:03.000 --> 00:03:05.000
For me, it's not about the talks.


00:03:05.000 --> 00:03:07.400
I go to talks and they're interesting,


00:03:07.400 --> 00:03:10.040
but it's about the stuff that happens in between it.


00:03:10.040 --> 00:03:12.120
It's about hanging out with you,


00:03:12.120 --> 00:03:14.000
hanging out with people from other places


00:03:14.000 --> 00:03:16.620
I don't normally see making those connections


00:03:16.620 --> 00:03:18.240
and just stumbling onto things that are like,


00:03:18.240 --> 00:03:20.480
oh, I had no idea that this was happening.


00:03:20.480 --> 00:03:21.720
Let's talk about that.


00:03:21.720 --> 00:03:24.080
That's the value and that's really tough to replace.


00:03:24.080 --> 00:03:25.840
- Yeah, it really is tough to replace.


00:03:25.840 --> 00:03:27.680
Maybe more video chats will help.


00:03:27.680 --> 00:03:28.880
- Absolutely.


00:03:28.880 --> 00:03:31.560
All right, well, I guess everyone be safe out there


00:03:31.560 --> 00:03:32.760
and follow our lead.


00:03:32.760 --> 00:03:35.760
Stay home, even if you gotta cut your own hair.


00:03:35.760 --> 00:03:37.820
- Well, let's move on to some topics.


00:03:37.820 --> 00:03:41.760
So first off, I was hoping to talk about pyproject.toml.


00:03:41.760 --> 00:03:44.700
I think we've, I'm sure we've covered it before,


00:03:44.700 --> 00:03:48.720
but the Brett Cannon is, is he still part of the core


00:03:48.720 --> 00:03:49.640
or did he get voted out?


00:03:49.640 --> 00:03:52.040
I think he's still part of the core at Honchos.


00:03:52.040 --> 00:03:53.400
- I think he's on the steering council, yeah.


00:03:53.400 --> 00:03:56.640
- Yeah, he wrote an article just released recently


00:03:56.640 --> 00:03:59.520
called "What the Heck is PyProject.toml?"


00:03:59.520 --> 00:04:02.080
And one of the reasons why he wrote it,


00:04:02.080 --> 00:04:04.600
and I think this is an interesting side effect,


00:04:04.600 --> 00:04:07.840
is so if you're just joining us,


00:04:07.840 --> 00:04:10.640
the PyProject.toml came out of the efforts


00:04:10.640 --> 00:04:15.640
with PEP 517 and 518 to define what the file looks like.


00:04:15.640 --> 00:04:18.600
And it kind of defines what tools are needed


00:04:18.600 --> 00:04:21.960
to build a project and how to build it.


00:04:21.960 --> 00:04:25.600
And that used to be mostly just setup tools,


00:04:25.600 --> 00:04:29.600
but now there's lots of other tools like Flit and Poetry,


00:04:29.600 --> 00:04:32.280
and you can make your own if you want to.


00:04:32.280 --> 00:04:34.320
But these are this file.


00:04:34.320 --> 00:04:37.520
One of the side effects is people started adding


00:04:37.520 --> 00:04:41.080
other, their tool configuration to this file,


00:04:41.080 --> 00:04:42.880
such as like coverage and talks.


00:04:42.880 --> 00:04:46.600
Now you can put those configurations


00:04:46.600 --> 00:04:49.820
into pyproject.toml for those tools,


00:04:49.820 --> 00:04:52.500
even though it has nothing to do with building.


00:04:52.500 --> 00:04:55.640
And it just saves you from having an extra file,


00:04:55.640 --> 00:04:56.520
but even though those tools


00:04:56.520 --> 00:04:58.540
have their own configuration files.


00:04:58.540 --> 00:05:00.280
And then Black came around,


00:05:00.280 --> 00:05:04.480
and Black uses, only has a few configurations available.


00:05:04.480 --> 00:05:07.480
So instead of creating their own configuration file,


00:05:07.480 --> 00:05:11.960
Black uses the pyproject.toml for looking up configuration


00:05:11.960 --> 00:05:14.500
if you want to configure like line length or something.


00:05:14.500 --> 00:05:17.280
And so there's been projects that have added


00:05:17.280 --> 00:05:20.080
pyproject.toml files for the reason


00:05:20.080 --> 00:05:22.880
because they were trying to, they're using Black also,


00:05:22.880 --> 00:05:24.840
and now their builds don't work.


00:05:24.840 --> 00:05:28.280
And the reason is if there's a pyproject.toml,


00:05:28.280 --> 00:05:30.160
even if you're using setup tools,


00:05:30.160 --> 00:05:33.560
Pip will look for the build stuff


00:05:33.560 --> 00:05:35.380
around that within the file.


00:05:35.380 --> 00:05:38.020
So Brett has gone and added,


00:05:38.020 --> 00:05:41.580
showed the few lines of code you need to add


00:05:41.580 --> 00:05:45.900
to the Toml file to specify how to build with setup tools.


00:05:45.900 --> 00:05:47.400
That's the main contribution for this,


00:05:47.400 --> 00:05:50.020
but it's also, I think that people ought to


00:05:50.020 --> 00:05:52.380
go read the article 'cause it's a good summary


00:05:52.380 --> 00:05:53.260
of where we're at right now.


00:05:53.260 --> 00:05:55.620
- Yeah, the pyproject.toml is great,


00:05:55.620 --> 00:05:58.740
and it's super cool that you can specify things like


00:05:58.740 --> 00:06:01.820
here's how you can, say, build the package, right?


00:06:01.820 --> 00:06:04.300
It requires a wheel and whatnot.


00:06:04.300 --> 00:06:07.300
- Yeah, it's cool, I really like it.


00:06:07.300 --> 00:06:09.860
I honestly need to start working with it.


00:06:09.860 --> 00:06:13.740
I'm still on the requirements.txt side of the fence,


00:06:13.740 --> 00:06:15.760
just waiting for things to shake out,


00:06:15.760 --> 00:06:18.420
but it certainly seems like there's a lot of energy here.


00:06:18.420 --> 00:06:19.460
- Yeah, definitely.


00:06:19.460 --> 00:06:21.140
- Yeah, so definitely a good pick there.


00:06:21.140 --> 00:06:23.380
You know, sometimes we talk about awesome things


00:06:23.380 --> 00:06:24.820
on Python Bytes, right?


00:06:24.820 --> 00:06:25.660
- Yeah.


00:06:25.660 --> 00:06:27.540
- And we've even talked about awesome lists,


00:06:27.540 --> 00:06:31.260
which are lists organizing various other things,


00:06:31.260 --> 00:06:35.100
projects, websites, tools, whatever, around something.


00:06:35.100 --> 00:06:37.260
But last time in passing, we mentioned


00:06:37.260 --> 00:06:40.300
that there was a cool article by Jack McHugh


00:06:40.300 --> 00:06:43.300
where he blogged about the awesome Python bytes,


00:06:43.300 --> 00:06:44.140
awesome list.


00:06:44.140 --> 00:06:45.800
- Yeah, that was neat. - That was cool, right?


00:06:45.800 --> 00:06:50.740
Yeah, so now, Jack has made this a proper GitHub repository


00:06:50.740 --> 00:06:53.700
where it has a clear way to contribute to it.


00:06:53.700 --> 00:06:56.420
You can do PRs and all sorts of stuff.


00:06:56.420 --> 00:06:58.500
And he said he'll be adding personally to the repo


00:06:58.500 --> 00:07:01.780
whenever he hears about awesome things like this,


00:07:01.780 --> 00:07:03.180
maybe he'll add his own list to it,


00:07:03.180 --> 00:07:04.940
which would be very meta, right?


00:07:04.940 --> 00:07:06.260
It would just link back to itself.


00:07:06.260 --> 00:07:07.080
No, just kidding.


00:07:07.080 --> 00:07:08.220
But that's really awesome.


00:07:08.220 --> 00:07:11.180
And there's already five PRs from listeners


00:07:11.180 --> 00:07:12.380
accepted on this list.


00:07:12.380 --> 00:07:13.660
- Oh, wow, that's great.


00:07:13.660 --> 00:07:14.500
- Ain't that cool?


00:07:14.500 --> 00:07:15.320
People seem to be liking it.


00:07:15.320 --> 00:07:17.780
- After we announced it, then we had other people saying,


00:07:17.780 --> 00:07:20.000
and I saw some commentary about,


00:07:20.000 --> 00:07:22.860
there was some missing that he forgot about.


00:07:22.860 --> 00:07:24.140
- Yeah, well, it's just the stuff


00:07:24.140 --> 00:07:26.320
that really stood out to Jack in the beginning, right?


00:07:26.320 --> 00:07:28.960
So if you want to go back and kind of look through


00:07:28.960 --> 00:07:31.360
what some people thought of a year and a half ago


00:07:31.360 --> 00:07:33.600
that we talked about that was awesome, you can go there.


00:07:33.600 --> 00:07:36.460
And if you look at it, it comes with graphics,


00:07:36.460 --> 00:07:38.440
like all good things that present things.


00:07:38.440 --> 00:07:40.400
If you can have graphics, guess what?


00:07:40.400 --> 00:07:42.680
It's like a thousand words, isn't it?


00:07:42.680 --> 00:07:43.520
- Oh yeah.


00:07:43.520 --> 00:07:44.340
- Isn't that cool?


00:07:44.340 --> 00:07:45.180
- This is great.


00:07:45.180 --> 00:07:46.840
- Yeah, it's really, really polished


00:07:46.840 --> 00:07:48.400
and you can just flip through and like,


00:07:48.400 --> 00:07:50.840
we talked about D-type,


00:07:50.840 --> 00:07:53.760
the visualization for Pandas DataFrames.


00:07:53.760 --> 00:07:56.820
and there's some nice examples and pictures there.


00:07:56.820 --> 00:07:58.000
Really, really good stuff.


00:07:58.000 --> 00:08:00.120
So I think it's a great way to explore


00:08:00.120 --> 00:08:01.880
some of the stuff that we talk about.


00:08:01.880 --> 00:08:03.600
Couple of fun projects I saw on there


00:08:03.600 --> 00:08:05.800
that I just remembered, oh yeah, we did talk about that.


00:08:05.800 --> 00:08:06.640
It was cool.


00:08:06.640 --> 00:08:08.600
It was great expectations for validating


00:08:08.600 --> 00:08:11.640
and documenting and profiling data.


00:08:11.640 --> 00:08:14.400
Pandas VET, which is a Flake 8,


00:08:14.400 --> 00:08:17.240
a linter for opinionated Pandas code.


00:08:17.240 --> 00:08:20.160
GeoAlchemy, which is like geospatial databases


00:08:20.160 --> 00:08:21.160
on top of SQLAlchemy.


00:08:21.160 --> 00:08:26.160
and Vue.py, which provides in-browser Python runtimes


00:08:26.160 --> 00:08:27.640
interacting with Vue.js.


00:08:27.640 --> 00:08:30.200
So just all sorts of cool stuff there.


00:08:30.200 --> 00:08:32.180
And I guess related to this,


00:08:32.180 --> 00:08:34.560
although not technically anything to do with that,


00:08:34.560 --> 00:08:36.640
is we have a super cool search


00:08:36.640 --> 00:08:39.120
over at pythonbytes.fm/search,


00:08:39.120 --> 00:08:40.400
and it's really fast.


00:08:40.400 --> 00:08:42.960
It even searches our spoken words.


00:08:42.960 --> 00:08:45.560
So if you wanna just find something


00:08:45.560 --> 00:08:47.160
that maybe we talked about a long time ago


00:08:47.160 --> 00:08:48.960
or see if it's covered, throw it in there,


00:08:48.960 --> 00:08:49.880
and it'll pop up.


00:08:49.880 --> 00:08:50.720
- That's really neat.


00:08:50.720 --> 00:08:53.840
I love this because I'm like flipping through this going,


00:08:53.840 --> 00:08:56.200
"Oh, I want to go back and check that out again."


00:08:56.200 --> 00:08:59.080
>> Exactly. That was like a year and a half and we only spent


00:08:59.080 --> 00:09:01.200
half an hour playing with it before we talked about it,


00:09:01.200 --> 00:09:02.340
then maybe we didn't use it again.


00:09:02.340 --> 00:09:03.760
But yeah, it was cool.


00:09:03.760 --> 00:09:06.640
I legitimately enjoyed going through the list here and I thought


00:09:06.640 --> 00:09:09.760
listeners might as well if they heard it before or even if they didn't.


00:09:09.760 --> 00:09:11.120
>> Yeah, that's awesome.


00:09:11.120 --> 00:09:14.560
>> Yeah. Well, I guess you are going to continue a theme a little bit


00:09:14.560 --> 00:09:17.720
with your from the pyproject.toml onward.


00:09:17.720 --> 00:09:24.760
I have been playing with a project for a while, off and on, associated with testing code called


00:09:24.760 --> 00:09:30.200
the Cards Project. And it's a little to-do app thing. It's just a little sample thing,


00:09:30.200 --> 00:09:36.440
mostly to play with all of the stuff around Python and distribution and testing and all that.


00:09:36.440 --> 00:09:42.440
And somebody, oh gosh, it was months ago and I should have their name here, but


00:09:42.440 --> 00:09:49.480
one of the somebody else contributed a pull request to add GitHub actions. So GitHub actions are


00:09:49.480 --> 00:09:56.680
a way to you know for you can use that for like CI/CD workflows with Python project with all


00:09:56.680 --> 00:10:01.240
sorts of stuff but with especially with Python projects because you know that the building


00:10:01.240 --> 00:10:07.560
pipeline is kind of short with Python it's not as complicated as other things so


00:10:07.560 --> 00:10:11.640
Often you don't really, it might be overkill to use another CI system.


00:10:11.640 --> 00:10:15.640
And so GitHub actions are really pretty cool for that.


00:10:15.640 --> 00:10:21.000
And so I incorporated that and then was looking into the last step was,


00:10:21.000 --> 00:10:23.000
how do I publish to the PyPI?


00:10:23.000 --> 00:10:24.840
I'd really like to add that.


00:10:24.840 --> 00:10:29.480
So there's a, I was looking it up and the PyPA, the Python Packaging Authority,


00:10:29.480 --> 00:10:36.200
actually has a article written called publishing package distribution releases


00:10:36.200 --> 00:10:40.000
is using GitHub Actions with CI/CD workflows.


00:10:40.000 --> 00:10:42.700
And so this was like, I'm following through this.


00:10:42.700 --> 00:10:44.520
I'm actually ran into some hiccups,


00:10:44.520 --> 00:10:46.260
but I wanted to cover it anyway.


00:10:46.260 --> 00:10:49.000
My promise is that by the time this goes live,


00:10:49.000 --> 00:10:51.560
the cards project will actually be complete


00:10:51.560 --> 00:10:53.320
'cause it's almost there.


00:10:53.320 --> 00:10:55.640
There's a few hiccups I've ran into.


00:10:55.640 --> 00:10:58.840
PyPI requires you to have an email associated with package,


00:10:58.840 --> 00:11:00.840
which is kind of annoying


00:11:00.840 --> 00:11:05.840
because Flit and pip don't anymore, but PyPI still does.


00:11:05.920 --> 00:11:07.760
So I had to do that.


00:11:07.760 --> 00:11:09.800
And there's a few other hiccups.


00:11:09.800 --> 00:11:10.680
I don't know if I'll write it.


00:11:10.680 --> 00:11:12.880
If there's just these, I'll probably just fix them


00:11:12.880 --> 00:11:14.920
and have it ready for people to look at.


00:11:14.920 --> 00:11:17.160
But if it's too many more,


00:11:17.160 --> 00:11:19.160
I'll have to write a new blog post


00:11:19.160 --> 00:11:20.920
and I'll associate that with this as well.


00:11:20.920 --> 00:11:21.880
- Yeah, this looks great.


00:11:21.880 --> 00:11:24.560
And I had no idea about the GitHub secrets.


00:11:24.560 --> 00:11:28.160
So one of the challenges is you want to have


00:11:28.160 --> 00:11:32.000
your personal PyPI account where you're the maintainer,


00:11:32.000 --> 00:11:35.020
admin of that package on pypi.org.


00:11:35.020 --> 00:11:37.900
You might not want to contribute that into the source code,


00:11:37.900 --> 00:11:39.940
especially for an open source project, right?


00:11:39.940 --> 00:11:41.420
- Yeah, probably a bad idea.


00:11:41.420 --> 00:11:42.980
- Yeah, that's going to result in some bad things


00:11:42.980 --> 00:11:44.740
happening there eventually.


00:11:44.740 --> 00:11:48.860
It talks about how to use the secrets settings in GitHub


00:11:48.860 --> 00:11:49.900
to store those there,


00:11:49.900 --> 00:11:53.340
and then how to pull those out as replacements


00:11:53.340 --> 00:11:55.340
in your GitHub actions, which I had never done.


00:11:55.340 --> 00:11:56.180
That's pretty cool.


00:11:56.180 --> 00:11:58.140
- Yeah, and the workflow that they're suggesting,


00:11:58.140 --> 00:12:00.060
which is, I think, a great idea,


00:12:00.060 --> 00:12:03.220
is to go ahead and have all,


00:12:03.220 --> 00:12:05.980
every pull request or merge to your,


00:12:05.980 --> 00:12:08.940
some master branch or to anywhere, any branch,


00:12:08.940 --> 00:12:10.620
go through the entire thing


00:12:10.620 --> 00:12:14.000
and try to publish to the test PYPI server.


00:12:14.000 --> 00:12:16.340
And only ones where you change the tag,


00:12:16.340 --> 00:12:18.020
which is where you would change,


00:12:18.020 --> 00:12:20.820
you'd change a tag if you change your version number,


00:12:20.820 --> 00:12:24.940
that's when it would push to a PYPI, the real one.


00:12:24.940 --> 00:12:26.220
But to have that workflow,


00:12:26.220 --> 00:12:28.260
even going through the test PYPI,


00:12:28.260 --> 00:12:31.180
every time you push something, I think that's a great idea.


00:12:31.180 --> 00:12:32.020
- Yeah, it is.


00:12:32.020 --> 00:12:35.380
how you got to change the version number or it's not going to let you publish even to


00:12:35.380 --> 00:12:36.380
test right?


00:12:36.380 --> 00:12:37.380
Yeah.


00:12:37.380 --> 00:12:38.380
So I'm not sure.


00:12:38.380 --> 00:12:39.860
I still haven't figured out how to get around that.


00:12:39.860 --> 00:12:40.860
So we'll see.


00:12:40.860 --> 00:12:41.860
Yeah.


00:12:41.860 --> 00:12:42.860
Cool.


00:12:42.860 --> 00:12:44.420
One of the things I love, I love really great tutorials.


00:12:44.420 --> 00:12:48.180
The internet I think is working because of the great tutorials around.


00:12:48.180 --> 00:12:53.460
And one of the groups that have put out some awesome tutorials is Digital Ocean.


00:12:53.460 --> 00:12:56.260
So Digital Ocean is sponsoring this episode.


00:12:56.260 --> 00:13:00.620
And one of the things that they're offering of course is they offer a way to get started


00:13:00.620 --> 00:13:03.580
with they offer Kubernetes clusters


00:13:03.580 --> 00:13:05.540
and you can do that with DigitalOcean.


00:13:05.540 --> 00:13:08.240
But to get started with hosting and running Linux servers


00:13:08.240 --> 00:13:11.460
with Kubernetes clusters, that can be a little tricky.


00:13:11.460 --> 00:13:13.060
And that's why we want to highlight


00:13:13.060 --> 00:13:16.180
that DigitalOcean has launched their new support center.


00:13:16.180 --> 00:13:19.860
And this makes it easier to find answers to your questions,


00:13:19.860 --> 00:13:22.680
help you get up to speed, get what you need.


00:13:22.680 --> 00:13:25.480
And you can search across product documentation


00:13:25.480 --> 00:13:29.340
and community tutorials and forums all in one place.


00:13:29.340 --> 00:13:31.440
and especially with something tricky


00:13:31.440 --> 00:13:32.760
like a Kubernetes cluster,


00:13:32.760 --> 00:13:34.760
or really even if you're new to any of this,


00:13:34.760 --> 00:13:36.760
it's like their support center is awesome,


00:13:36.760 --> 00:13:38.300
got great tutorials.


00:13:38.300 --> 00:13:42.120
So visit pythonbytes.fm/docsupport


00:13:42.120 --> 00:13:43.260
to see their tutorials,


00:13:43.260 --> 00:13:47.280
and of course use pythonbytes.fm/digitalocean


00:13:47.280 --> 00:13:49.400
for $100 credit for new users.


00:13:49.400 --> 00:13:50.220
- Yeah, absolutely.


00:13:50.220 --> 00:13:51.400
Their tutorials are so good


00:13:51.400 --> 00:13:54.280
that you can even select different operating systems


00:13:54.280 --> 00:13:55.520
in different versions


00:13:55.520 --> 00:13:58.640
so that the steps exactly line up


00:13:58.640 --> 00:14:01.600
If you're on, say, Ubuntu 16,


00:14:01.600 --> 00:14:03.520
you don't have to try to patch that back.


00:14:03.520 --> 00:14:04.880
The tutorial steps would be different,


00:14:04.880 --> 00:14:06.880
which is, that's taken to the next level.


00:14:06.880 --> 00:14:07.720
Very good stuff.


00:14:07.720 --> 00:14:09.080
- I've heard some from somebody once before


00:14:09.080 --> 00:14:11.520
where they were actually using a different host


00:14:11.520 --> 00:14:14.800
and using DigitalOcean tutorials to help them set it up,


00:14:14.800 --> 00:14:16.000
and then they finally realized,


00:14:16.000 --> 00:14:18.240
why am I giving money to somebody else?


00:14:18.240 --> 00:14:20.840
Let's use DigitalOcean 'cause they helped me out.


00:14:20.840 --> 00:14:22.780
- That's where our infrastructure is, very good.


00:14:22.780 --> 00:14:24.240
Now this next one, Brian,


00:14:24.240 --> 00:14:26.560
this one is best seen through pictures.


00:14:26.560 --> 00:14:28.200
So make sure you open this up


00:14:28.200 --> 00:14:29.600
and we talked through it.


00:14:29.600 --> 00:14:31.520
So like I said, all good presentations,


00:14:31.520 --> 00:14:35.440
especially stuff that's graphical has pictures, people.


00:14:35.440 --> 00:14:36.340
This is amazing.


00:14:36.340 --> 00:14:39.200
So this thing that I wanna talk about is called Rich.


00:14:39.200 --> 00:14:41.200
Rich text for terminals.


00:14:41.200 --> 00:14:44.600
So we've talked a lot about how it's great to have GUIs


00:14:44.600 --> 00:14:46.020
and web apps and stuff like that,


00:14:46.020 --> 00:14:48.560
that's very visual for the presentations,


00:14:48.560 --> 00:14:50.320
which are still true.


00:14:50.320 --> 00:14:51.920
But a lot of times you just want something


00:14:51.920 --> 00:14:54.560
in a little terminal app command, CLI app.


00:14:54.560 --> 00:14:58.000
And it would be nice if it wasn't just all one plain color


00:14:58.000 --> 00:15:00.560
or just all text left aligned.


00:15:00.560 --> 00:15:03.720
So there's this cool project called Rich.


00:15:03.720 --> 00:15:08.720
And Rich lets you have up to 16.7 million colors


00:15:08.720 --> 00:15:12.000
for your terminal colors, not just like eight


00:15:12.000 --> 00:15:15.160
or whatever it is, red and light red,


00:15:15.160 --> 00:15:16.700
like 16.8 million colors.


00:15:16.700 --> 00:15:19.360
It supports bold, dim, italics, underline,


00:15:19.360 --> 00:15:22.200
strikethrough, and even, please don't use it,


00:15:22.200 --> 00:15:23.120
the blink tag.


00:15:23.120 --> 00:15:26.400
You can put the blink tag out there.


00:15:26.400 --> 00:15:29.020
You can have text that's left aligned, centered,


00:15:29.020 --> 00:15:33.660
right aligned, justified, supports like Chinese and Korean,


00:15:33.660 --> 00:15:36.940
has emojis, like you can put colon, apple, colon,


00:15:36.940 --> 00:15:38.820
and an apple shows up.


00:15:38.820 --> 00:15:42.100
You can, as part of a string, put little escapes.


00:15:42.100 --> 00:15:45.180
So you can say this word is bold magenta,


00:15:45.180 --> 00:15:46.220
and then here's the rest of the words


00:15:46.220 --> 00:15:47.280
and just print that thing out.


00:15:47.280 --> 00:15:49.180
So you have like inline styling.


00:15:49.180 --> 00:15:53.740
Tables, you have beautiful tables, like in the terminal.


00:15:53.740 --> 00:15:54.700
- Those are nice. - Really nice.


00:15:54.700 --> 00:15:57.700
Those are really nice syntax highlighting for code.


00:15:57.700 --> 00:15:59.780
So you can print out Python code with line numbers


00:15:59.780 --> 00:16:01.180
and it'll highlight it.


00:16:01.180 --> 00:16:03.340
And even has a Markdown support.


00:16:03.340 --> 00:16:05.340
So you could write Markdown and it renders it


00:16:05.340 --> 00:16:07.980
as its own version of rich text.


00:16:07.980 --> 00:16:10.200
Not quite HTML or something like that,


00:16:10.200 --> 00:16:11.860
but it has, you know, bulleted lists


00:16:11.860 --> 00:16:13.780
and like titles and whatnot,


00:16:13.780 --> 00:16:16.180
even as progress bars and logger support


00:16:16.180 --> 00:16:17.020
and all kinds of stuff.


00:16:17.020 --> 00:16:17.840
Isn't that cool?


00:16:17.840 --> 00:16:20.180
- Yeah, the logger handling is actually pretty great.


00:16:20.180 --> 00:16:22.380
- Yeah, so if you're working on a terminal app


00:16:22.380 --> 00:16:24.840
and you're like, we're just gonna keep it this way,


00:16:24.840 --> 00:16:26.100
but I want it to look nicer.


00:16:26.100 --> 00:16:27.900
I want it to look a little more professional.


00:16:27.900 --> 00:16:29.820
This is like kind of your all-in-one


00:16:29.820 --> 00:16:31.240
do a bunch of cool stuff here.


00:16:31.240 --> 00:16:33.740
You can even have multiple progress bars


00:16:33.740 --> 00:16:36.680
all updating in parallel on the screen.


00:16:36.680 --> 00:16:38.240
So if you've got a bunch of downloads,


00:16:38.240 --> 00:16:40.340
you can indicate them all happening or something like that.


00:16:40.340 --> 00:16:41.700
A bunch of jobs running.


00:16:41.700 --> 00:16:42.580
- Sweet. - So yeah,


00:16:42.580 --> 00:16:43.780
this is a cool project.


00:16:43.780 --> 00:16:45.420
- Might have to add this to cards.


00:16:45.420 --> 00:16:46.660
That'd be cool. - That would be awesome.


00:16:46.660 --> 00:16:47.940
Yeah, it definitely would.


00:16:47.940 --> 00:16:52.140
It even has all of that support for Windows.


00:16:52.140 --> 00:16:54.580
If you use the new Windows console or terminal,


00:16:54.580 --> 00:16:56.700
I guess is the word that they're now using,


00:16:56.700 --> 00:16:58.620
'cause console, I guess, is the old school thing


00:16:58.620 --> 00:17:01.660
and Microsoft's like, no, no, we all have terminals now.


00:17:01.660 --> 00:17:03.460
And you can go get that from the,


00:17:03.460 --> 00:17:05.040
you probably don't have that on Windows,


00:17:05.040 --> 00:17:06.260
it's in preview, but you can get it


00:17:06.260 --> 00:17:08.060
on the Windows Store for free,


00:17:08.060 --> 00:17:09.260
and I link to that as well.


00:17:09.260 --> 00:17:11.500
So if you're on Windows and you want a better terminal


00:17:11.500 --> 00:17:13.460
in general that supports this kind of stuff,


00:17:13.460 --> 00:17:14.300
check that out too.


00:17:14.300 --> 00:17:15.420
- Hmm, interesting.


00:17:15.420 --> 00:17:18.300
Second, do you know if that'll roll into the normal,


00:17:18.300 --> 00:17:20.420
just all releases of Windows at some point?


00:17:20.420 --> 00:17:22.260
- I would hope so, maybe.


00:17:22.260 --> 00:17:24.380
It's still in beta, I guess we'll have to see,


00:17:24.380 --> 00:17:25.460
but it would be nice, right?


00:17:25.460 --> 00:17:27.900
It'd be one step closer to parity


00:17:27.900 --> 00:17:30.420
across all these platforms, which is always good.


00:17:30.420 --> 00:17:32.820
- Yeah, I just use the Bash terminal for,


00:17:32.820 --> 00:17:36.540
Bash for, or Git for Windows comes with a Bash terminal.


00:17:36.540 --> 00:17:37.380
- Right, nice.


00:17:37.380 --> 00:17:40.060
- Speaking of Windows, I guess it's any operating system,


00:17:40.060 --> 00:17:42.380
but I'm actually kind of surprised.


00:17:42.380 --> 00:17:45.060
This has been on our to-do list for a long time.


00:17:45.060 --> 00:17:47.380
A library called psutil.


00:17:47.380 --> 00:17:50.500
It's a cross-platform library for process and system


00:17:50.500 --> 00:17:52.380
monitoring in Python.


00:17:52.380 --> 00:17:54.960
And I'm actually surprised that we haven't really covered it.


00:17:54.960 --> 00:17:57.060
We must have covered it in passing a couple of times.


00:17:57.060 --> 00:17:57.560
Probably.


00:17:57.560 --> 00:17:59.400
But I wanted to highlight it because it


00:17:59.400 --> 00:18:01.220
is an amazing little tool.


00:18:01.220 --> 00:18:04.700
It's not something I really love when I have to use it.


00:18:04.700 --> 00:18:07.060
But things like-- there's time zone control


00:18:07.060 --> 00:18:10.040
and multiple computers or services running


00:18:10.040 --> 00:18:13.180
on a different machine with Windows.


00:18:13.180 --> 00:18:15.640
Like I said, you can use it with-- it's a cross-platform


00:18:15.640 --> 00:18:16.140
thing.


00:18:16.140 --> 00:18:19.780
You can use this to grab CPU utilization,


00:18:19.780 --> 00:18:22.860
memory utilization, disk usage, network,


00:18:22.860 --> 00:18:24.460
what ports are being used.


00:18:24.460 --> 00:18:26.620
And you can even see all of this information


00:18:26.620 --> 00:18:27.980
based on which process.


00:18:27.980 --> 00:18:32.980
So you can get like a per process list of CPU usage


00:18:32.980 --> 00:18:35.620
and everything within that.


00:18:35.620 --> 00:18:39.260
And then around processes, you can suspend and kill


00:18:39.260 --> 00:18:41.620
and signal different processes.


00:18:41.620 --> 00:18:44.400
So if you're, one of the things that we use this for


00:18:44.400 --> 00:18:46.800
is monitoring our build servers.


00:18:46.800 --> 00:18:48.080
I know there's other ways to do it,


00:18:48.080 --> 00:18:53.080
but this is a pretty easy way to go over to another server


00:18:53.080 --> 00:18:55.880
and grab the CPU's usage and memory usage


00:18:55.880 --> 00:18:57.840
so we can keep track of all of our,


00:18:57.840 --> 00:19:00.720
make sure all of our build servers are working


00:19:00.720 --> 00:19:02.440
and not overloaded.


00:19:02.440 --> 00:19:04.320
So we use this, it's a pretty cool little tool.


00:19:04.320 --> 00:19:06.240
- Yeah, this looks really great.


00:19:06.240 --> 00:19:08.520
I think we also talked about it last week,


00:19:08.520 --> 00:19:12.360
briefly when we covered a Hytest monitor,


00:19:12.360 --> 00:19:15.040
And that was built on top of PSUtil amongst other things.


00:19:15.040 --> 00:19:16.480
We didn't cover PSUtil, but like,


00:19:16.480 --> 00:19:19.360
it's that kind of tools that this enables, right?


00:19:19.360 --> 00:19:21.400
- Yeah, pytest Monitor used that also.


00:19:21.400 --> 00:19:24.080
That was, I'm like, man, I think we covered this recently,


00:19:24.080 --> 00:19:26.480
but yeah, it was last week we covered that.


00:19:26.480 --> 00:19:28.960
It by itself, it's still a really great thing


00:19:28.960 --> 00:19:29.860
to use right itself.


00:19:29.860 --> 00:19:31.720
And the readme is huge,


00:19:31.720 --> 00:19:33.960
but it shows you a lot of different examples


00:19:33.960 --> 00:19:35.640
for how to use it.


00:19:35.640 --> 00:19:37.120
- Yeah, it looks super useful.


00:19:37.120 --> 00:19:39.000
If you're gonna do any automation


00:19:39.000 --> 00:19:42.200
and sort of admin sort of work, it looks great.


00:19:42.200 --> 00:19:54.700
One of the great things that I love is the cross-platform part because this sort of stuff you can do on, I mean, you can do directly with Windows and with Unix, but, you know, it's different on everything else, on everything.


00:19:54.700 --> 00:20:00.200
And so having a cross, I'm pretty impressed that it can even exist as a cross-platform thing, but it can't.


00:20:00.200 --> 00:20:02.400
No kidding. Apparently it can and it's awesome.


00:20:02.400 --> 00:20:02.700
Yeah.


00:20:02.700 --> 00:20:03.800
Definitely, definitely a good one.


00:20:03.800 --> 00:20:05.480
So let me ask you this question.


00:20:05.480 --> 00:20:11.480
If I'm going to store some numbers, let's say up to 100,000,


00:20:11.480 --> 00:20:13.720
how big of an integer do I need to make in Python?


00:20:13.720 --> 00:20:15.000
I don't have to make an integer.


00:20:15.000 --> 00:20:16.840
They're just there.


00:20:16.840 --> 00:20:18.360
They're just there. It's beautiful, right?


00:20:18.360 --> 00:20:22.840
But I know that you've done a lot of C and C++, and I have as well back in the day.


00:20:22.840 --> 00:20:25.240
And you used to have to really think about that, right?


00:20:25.240 --> 00:20:29.800
Like if you saw a negative 32,000 for a number and you thought you were adding to it,


00:20:29.800 --> 00:20:33.160
you're like, "Oh, it was a short and it overflowed. Darn."


00:20:33.160 --> 00:20:38.440
Well, I guess it's maybe it should be a u short unsigned short. It could be it could hold up to 65,000, right?


00:20:38.440 --> 00:20:43.000
like this is something you always had to think about and in python you don't and


00:20:43.000 --> 00:20:47.560
How that happens is pretty interesting. I didn't really know the internals


00:20:47.560 --> 00:20:54.120
I kind of guess maybe something like what's happening was happening, but I didn't know and so there's a cool article by our pete


00:20:54.120 --> 00:20:57.720
Bayani and he wrote it something called how python


00:20:58.260 --> 00:21:00.420
implements super long integers.


00:21:00.420 --> 00:21:03.020
So for example, if you tried to take two


00:21:03.020 --> 00:21:06.020
and raise it to the power of 20,000 in C,


00:21:06.020 --> 00:21:07.300
you would get infinity.


00:21:07.300 --> 00:21:08.140
(laughing)


00:21:08.140 --> 00:21:09.880
All right, because it's,


00:21:09.880 --> 00:21:11.380
well, it's bigger than we can hold it,


00:21:11.380 --> 00:21:13.700
so it must be infinity as far as we're concerned.


00:21:13.700 --> 00:21:15.380
But in Python, it's fine.


00:21:15.380 --> 00:21:19.140
It just gives you a 6,021 digit integer


00:21:19.140 --> 00:21:20.260
and you don't have to declare,


00:21:20.260 --> 00:21:21.820
like I'm working with really big numbers


00:21:21.820 --> 00:21:23.060
or anything like that.


00:21:23.060 --> 00:21:25.020
And so Python is pretty cool


00:21:25.020 --> 00:21:26.380
in how it's transparent with these, right?


00:21:26.380 --> 00:21:27.340
- Yeah.


00:21:27.340 --> 00:21:28.300
- Yeah.


00:21:28.300 --> 00:21:33.300
- So this article digs into the CPython source code.


00:21:33.300 --> 00:21:36.740
It talks about the algorithms and the data structures


00:21:36.740 --> 00:21:37.900
that make this happen.


00:21:37.900 --> 00:21:42.380
So basically the numbers in Python are represented


00:21:42.380 --> 00:21:44.580
as what's called a pi var object.


00:21:44.580 --> 00:21:49.260
So pi object, that's the core type of things in Python,


00:21:49.260 --> 00:21:51.900
but this is a variable length one, right?


00:21:51.900 --> 00:21:53.820
And so there's a couple of different types


00:21:53.820 --> 00:21:55.180
that are like this.


00:21:55.180 --> 00:21:57.360
We've got lists, we've got tuples,


00:21:57.360 --> 00:21:58.880
but we also have numbers.


00:21:58.880 --> 00:22:01.580
And that indicates that they can be of different size


00:22:01.580 --> 00:22:05.100
and they can basically grow as they need to.


00:22:05.100 --> 00:22:07.840
All right, so Python's numbers ultimately represent


00:22:07.840 --> 00:22:10.160
by this thing called a long object


00:22:10.160 --> 00:22:12.400
and that has a pi object base,


00:22:12.400 --> 00:22:15.160
but then it also has a size and a digit.


00:22:15.160 --> 00:22:18.800
And these digits are, I think they're four,


00:22:18.800 --> 00:22:21.120
four or eight bytes long.


00:22:21.120 --> 00:22:22.800
I remember it doesn't say here.


00:22:22.800 --> 00:22:24.400
It's a macro that would expand it,


00:22:24.400 --> 00:22:25.600
four, eight, something like that.


00:22:25.600 --> 00:22:29.160
But basically it uses a list of digits


00:22:29.160 --> 00:22:32.020
and it, you know, initially it just uses one of those,


00:22:32.020 --> 00:22:33.120
but then when it gets full,


00:22:33.120 --> 00:22:35.080
it adds another and another and another.


00:22:35.080 --> 00:22:37.800
What's interesting is their base 230,


00:22:37.800 --> 00:22:40.600
not 10, not 16, 230.


00:22:40.600 --> 00:22:41.600
- That's weird, okay.


00:22:41.600 --> 00:22:44.480
- Yeah, because apparently it can most efficiently use


00:22:44.480 --> 00:22:49.000
that's exactly that space of its four bytes or whatever


00:22:49.000 --> 00:22:51.280
as individual elements in a base.


00:22:51.280 --> 00:22:52.400
So it's pretty interesting.


00:22:52.400 --> 00:22:54.800
Like there's this ginormous number.


00:22:54.800 --> 00:22:58.480
And if you were trying to represent it in base 230, it's 100.


00:22:58.480 --> 00:23:00.640
I'm not gonna read it off 'cause it's really, really long,


00:23:00.640 --> 00:23:02.880
but it's pretty interesting how it uses this.


00:23:02.880 --> 00:23:04.760
But then when you get into operations, right?


00:23:04.760 --> 00:23:07.920
If I'm gonna add two numbers and they're base 230,


00:23:07.920 --> 00:23:09.780
like what algorithm do you do?


00:23:09.780 --> 00:23:13.760
It's not like base 10 where you normally do the thing


00:23:13.760 --> 00:23:14.760
or division or something.


00:23:14.760 --> 00:23:16.920
So that's also interesting to think about.


00:23:16.920 --> 00:23:19.120
If you look at arithmetic, it's pretty straightforward.


00:23:19.120 --> 00:23:20.680
You just add within the digits.


00:23:20.680 --> 00:23:23.200
And if you overflow 230, you do a carry over


00:23:23.200 --> 00:23:24.840
like you learned in elementary school.


00:23:24.840 --> 00:23:26.640
Subtraction is like you do the borrow,


00:23:26.640 --> 00:23:28.120
so it's like reverse.


00:23:28.120 --> 00:23:31.060
But then multiplication, in order to keep things efficient,


00:23:31.060 --> 00:23:36.060
uses an algorithm called the Karastabu algorithm,


00:23:36.060 --> 00:23:40.480
which is a interesting way to multiply


00:23:40.480 --> 00:23:44.160
two in-digit numbers in different bases and stuff.


00:23:44.160 --> 00:23:46.880
And yeah, so it's, if you've ever wondered


00:23:46.880 --> 00:23:49.240
how come you don't have to worry about numbers


00:23:49.240 --> 00:23:50.840
overflowing in Python.


00:23:50.840 --> 00:23:52.080
Here's a cool look inside that,


00:23:52.080 --> 00:23:54.560
at the CPython source code and some of the algorithms.


00:23:54.560 --> 00:23:55.920
- That's amazing.


00:23:55.920 --> 00:23:56.760
- Yeah. - Actually,


00:23:56.760 --> 00:23:57.600
that's pretty cool.


00:23:57.600 --> 00:23:58.420
- It is pretty cool.


00:23:58.420 --> 00:24:00.120
I'm so glad I don't have to worry about it, right?


00:24:00.120 --> 00:24:00.960
It just happens.


00:24:00.960 --> 00:24:03.360
- Yeah, one of the definite benefits of Python


00:24:03.360 --> 00:24:05.280
is this notion of, you know,


00:24:05.280 --> 00:24:08.440
developer time is way more valuable than computer time.


00:24:08.440 --> 00:24:11.120
So let's figure all this stuff out for everybody else


00:24:11.120 --> 00:24:13.640
and then we can stop thinking about it so much.


00:24:13.640 --> 00:24:14.480
- Yeah, for sure.


00:24:14.480 --> 00:24:16.560
- I had a project many years ago


00:24:16.560 --> 00:24:19.020
where I had to work with an FPGA


00:24:19.020 --> 00:24:23.420
and the clock system was such that the timing had,


00:24:23.420 --> 00:24:26.180
to set the current time, had to divide that out


00:24:26.180 --> 00:24:29.180
for a multi radix number.


00:24:29.180 --> 00:24:32.840
So it wasn't like base 10 or base 230.


00:24:32.840 --> 00:24:35.020
It was each digit had its own base.


00:24:35.020 --> 00:24:37.500
- Oh my goodness, that's crazy.


00:24:37.500 --> 00:24:39.140
- It was kind of a beast.


00:24:39.140 --> 00:24:43.340
It was a cool algorithm, but it was a fun thing.


00:24:43.340 --> 00:24:44.180
- Yeah, yeah.


00:24:44.180 --> 00:24:45.000
- Love this sort of stuff.


00:24:45.000 --> 00:24:45.840
- Yeah, this is really cool.


00:24:45.840 --> 00:24:48.640
glimpsed behind the curtain a little bit of the red pill.


00:24:48.640 --> 00:24:52.140
You go down inside, see what's happening.


00:24:52.140 --> 00:24:54.140
One final comment here is


00:24:54.140 --> 00:24:57.140
there's some funny little tricks you can play on people to ask


00:24:57.140 --> 00:24:59.140
you can like create the number 10


00:24:59.140 --> 00:25:02.340
and then create the number 10 somewhere else and ask if those are the same number like


00:25:02.340 --> 00:25:03.540
with the word "is"


00:25:03.540 --> 00:25:07.140
it's true for small numbers but it's false for large numbers


00:25:07.140 --> 00:25:10.140
and that's because Python pre-allocates the numbers


00:25:10.140 --> 00:25:12.140
negative 5 to 256.


00:25:12.140 --> 00:25:13.340
Oh wow, okay.


00:25:13.340 --> 00:25:15.340
When you have a hundred in your program


00:25:15.340 --> 00:25:22.780
it's the same hundred everywhere. But if you have 1,226,411, that was made on the spot.


00:25:22.780 --> 00:25:25.820
Because these are pointers. These are not just like four bytes on the stack.


00:25:25.820 --> 00:25:29.820
These are getting allocated in complicated ways each time. And so they said, look,


00:25:29.820 --> 00:25:34.380
negative five to 256. We use these all the time. Let's just make them when Python starts.


00:25:34.380 --> 00:25:35.420
Why minus five?


00:25:35.420 --> 00:25:43.660
Well, because who uses minus six? Come on. I have no idea. I can see minus one and zero to 256.


00:25:43.660 --> 00:25:46.660
But beyond that, I don't really know what they must have some reason.


00:25:46.660 --> 00:25:48.160
Yeah, I don't know why.


00:25:48.160 --> 00:25:49.960
They probably started with negative one.


00:25:49.960 --> 00:25:51.960
Somebody said, well, let's do minus two also.


00:25:51.960 --> 00:25:55.460
Let's go hog wild and go all the way down to minus five.


00:25:55.460 --> 00:25:57.460
Exactly. Exactly.


00:25:57.460 --> 00:25:59.460
Anyway, hey, that's our six.


00:25:59.460 --> 00:26:02.160
You got anything, any news for us or any extras?


00:26:02.160 --> 00:26:04.160
I have two really quick things.


00:26:04.160 --> 00:26:06.860
You know how Microsoft bought GitHub?


00:26:06.860 --> 00:26:08.360
That's kind of interesting news a while ago.


00:26:08.360 --> 00:26:12.160
And actually people were contemplating the effects that would have on open source and all.


00:26:12.160 --> 00:26:13.840
- Yeah. - Well, NPM,


00:26:13.840 --> 00:26:16.320
the pip equivalent of JavaScript,


00:26:16.320 --> 00:26:19.320
is now, was acquired by GitHub as well.


00:26:19.320 --> 00:26:22.640
So just an interesting moving and shaking over there


00:26:22.640 --> 00:26:23.480
behind the scenes.


00:26:23.480 --> 00:26:24.480
- That's really interesting.


00:26:24.480 --> 00:26:29.480
- Unlike PyPA and PIP, NPM was like a commercial venture


00:26:29.480 --> 00:26:32.420
or something to that effect to try to bring that order


00:26:32.420 --> 00:26:33.440
to the JavaScript side.


00:26:33.440 --> 00:26:35.800
And now, so since it was commercial, it's been acquired.


00:26:35.800 --> 00:26:37.480
- So NPM is the JavaScript thing?


00:26:37.480 --> 00:26:39.800
- NPM is how JavaScript spells PIP.


00:26:39.800 --> 00:26:42.060
(laughing)


00:26:42.060 --> 00:26:42.900
- Yeah.


00:26:42.900 --> 00:26:45.280
(laughing)


00:26:45.280 --> 00:26:46.120
- Okay.


00:26:46.120 --> 00:26:48.160
- Okay, quick other one is,


00:26:48.160 --> 00:26:51.200
we're going to try to set up a YouTube channel


00:26:51.200 --> 00:26:54.240
where people can see both of us talking,


00:26:54.240 --> 00:26:56.120
see all the silly stuff that we do


00:26:56.120 --> 00:26:58.360
in a fairly uncut, unedited way.


00:26:58.360 --> 00:27:01.440
But we're gonna try to put a video for each topic.


00:27:01.440 --> 00:27:03.700
So we just talked about the Python number thing,


00:27:03.700 --> 00:27:05.160
like just a single video on that.


00:27:05.160 --> 00:27:07.120
It'd be easy to share with friends,


00:27:07.120 --> 00:27:08.220
it'll be something we put up there.


00:27:08.220 --> 00:27:10.660
So we'll have more details with you soon


00:27:10.660 --> 00:27:12.420
on the YouTube channel, but I'm looking forward to it.


00:27:12.420 --> 00:27:14.860
I think people, it'll give people a new look


00:27:14.860 --> 00:27:15.700
and I think it'll be fun.


00:27:15.700 --> 00:27:18.580
- Yeah, and then people will be able to recognize our faces


00:27:18.580 --> 00:27:20.140
when we are not walking around


00:27:20.140 --> 00:27:21.700
because everybody should stay home.


00:27:21.700 --> 00:27:23.220
- Exactly, assuming that we continue


00:27:23.220 --> 00:27:25.100
to just give ourselves haircuts.


00:27:25.100 --> 00:27:26.140
So we look the same.


00:27:26.140 --> 00:27:27.900
(laughing)


00:27:27.900 --> 00:27:28.980
- Yeah. - Yeah.


00:27:28.980 --> 00:27:31.060
- All right, anything you wanna share with the folks?


00:27:31.060 --> 00:27:33.380
- Nope, nope, just working from home.


00:27:33.380 --> 00:27:35.740
- All right, well, I had this joke about C


00:27:35.740 --> 00:27:37.980
and numbers overflowing and like,


00:27:37.980 --> 00:27:39.980
Why is it negative 32,000?


00:27:39.980 --> 00:27:43.780
Oh, because it's 37,000 positive or something like that.


00:27:43.780 --> 00:27:44.020
Right?


00:27:44.020 --> 00:27:45.540
Well, here's another one.


00:27:45.540 --> 00:27:47.780
And this one is just to kind of make you feel good about yourself


00:27:47.780 --> 00:27:49.780
as a Python developer, right?


00:27:49.780 --> 00:27:50.060
Yeah.


00:27:50.060 --> 00:27:53.700
So this one's visual as a lot of them seem to be lately, but I'll go ahead


00:27:53.700 --> 00:27:56.020
and we'll do our best to describe it.


00:27:56.020 --> 00:27:57.380
Right.


00:27:57.380 --> 00:27:59.060
I'm going to let you be the developer.


00:27:59.060 --> 00:28:00.100
So you do the first three.


00:28:00.100 --> 00:28:01.620
You got to give a little description though.


00:28:01.620 --> 00:28:01.860
Okay.


00:28:01.860 --> 00:28:04.420
So the dude's 830 in the morning.


00:28:04.740 --> 00:28:09.180
I'm staring at the screen and I comment stupid bug.


00:28:09.180 --> 00:28:15.260
And then seven hours later, and this guy apparently grows facial hair really fast


00:28:15.260 --> 00:28:18.100
because he's already got stubble at seven, seven hours.


00:28:18.100 --> 00:28:19.820
Oh, it must be Linux.


00:28:19.820 --> 00:28:24.740
And then the next day his face is red and he's even got more hair.


00:28:24.740 --> 00:28:27.300
And he says, JavaScript's broken.


00:28:27.300 --> 00:28:28.020
Okay.


00:28:28.020 --> 00:28:28.380
Oh yeah.


00:28:28.380 --> 00:28:29.740
Bob comes in.


00:28:29.740 --> 00:28:31.420
Or the other guy comes in and looks at us.


00:28:31.420 --> 00:28:32.580
He says, Oh, Hey Bob.


00:28:32.580 --> 00:28:34.140
It looks like you forgot a semicolon.


00:28:34.260 --> 00:28:35.760
Ah, fix.


00:28:35.760 --> 00:28:38.020
(laughing)


00:28:38.020 --> 00:28:38.860
- Oh yeah.


00:28:38.860 --> 00:28:39.680
- Oh man, yeah.


00:28:39.680 --> 00:28:41.260
So that'll be in the show notes.


00:28:41.260 --> 00:28:43.460
You can check out the little comic, it's fun.


00:28:43.460 --> 00:28:45.260
It's by Eric Burke, nice one.


00:28:45.260 --> 00:28:47.260
- Yeah, don't miss semicolons.


00:28:47.260 --> 00:28:48.180
- No.


00:28:48.180 --> 00:28:50.740
Oh, there's a lot of things I don't miss.


00:28:50.740 --> 00:28:53.940
- Although I'm doing a lot more C now, C++.


00:28:53.940 --> 00:28:54.780
I gotta do it again.


00:28:54.780 --> 00:28:55.820
- Well, it just makes you appreciate


00:28:55.820 --> 00:28:56.940
when you get to do Python.


00:28:56.940 --> 00:28:58.260
- Yeah, it sure does.


00:28:58.260 --> 00:29:00.660
So, and appreciate my time with you,


00:29:00.660 --> 00:29:01.860
'cause this is so special.


00:29:01.860 --> 00:29:02.860
- Absolutely, thank you.


00:29:02.860 --> 00:29:05.940
It's great to get together and chat about this and share with everyone.


00:29:05.940 --> 00:29:06.220
Thanks.


00:29:06.220 --> 00:29:06.660
Thank you.


00:29:06.660 --> 00:29:06.860
Yep.


00:29:06.860 --> 00:29:07.140
Bye.


00:29:07.140 --> 00:29:07.420
Bye.


00:29:07.420 --> 00:29:09.380
Thank you for listening to Python Bytes.


00:29:09.380 --> 00:29:11.820
Follow the show on Twitter @pythonbytes.


00:29:11.820 --> 00:29:14.900
That's Python Bytes as in B-Y-T-E-S.


00:29:14.900 --> 00:29:17.780
And get the full show notes at pythonbytes.fm.


00:29:17.780 --> 00:29:22.780
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.


00:29:22.780 --> 00:29:24.900
We're always on the lookout for sharing something cool.


00:29:24.900 --> 00:29:31.420
This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

