WEBVTT

00:00:00.001 --> 00:00:05.180
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.180 --> 00:00:10.880
This is episode 176, recorded April 1st, 2020.

00:00:10.880 --> 00:00:11.740
April Fool's.

00:00:11.740 --> 00:00:13.300
So, I'm Brian Okken.

00:00:13.300 --> 00:00:14.060
I'm Michael Kennedy.

00:00:14.060 --> 00:00:16.780
And this episode is brought to you by DigitalOcean.

00:00:16.780 --> 00:00:19.300
We'll talk more about them later.

00:00:19.300 --> 00:00:22.860
But, yeah, let's just catch up a little bit.

00:00:22.860 --> 00:00:23.740
What's going on?

00:00:23.740 --> 00:00:29.880
Oh, you know, this is one of the few bits of human interaction outside of my house that I get.

00:00:30.200 --> 00:00:32.660
It's to talk to you here on Skype video, right?

00:00:32.660 --> 00:00:34.720
Like, it's a weird time, isn't it?

00:00:34.720 --> 00:00:35.580
It's totally weird.

00:00:35.580 --> 00:00:39.340
We normally don't record video, but we do see each other.

00:00:39.340 --> 00:00:46.460
And we've noticed as we contacted us or connected today that both of us have new haircuts, but they're homegrown haircuts.

00:00:46.460 --> 00:00:49.040
I never cut my own hair.

00:00:49.040 --> 00:00:50.880
And it was getting bigger and bigger.

00:00:50.880 --> 00:00:52.660
And my hair doesn't get long.

00:00:52.660 --> 00:00:54.300
It just gets big and poofy.

00:00:54.300 --> 00:00:56.840
And it's more like a Q-tip on top of my head.

00:00:56.840 --> 00:00:58.060
And eventually, I just break down.

00:00:58.060 --> 00:00:58.920
Like, I can't do this.

00:00:59.460 --> 00:01:01.660
So, at first, I looked at my daughter who's 19.

00:01:01.660 --> 00:01:02.960
I'm like, here's a shaver.

00:01:02.960 --> 00:01:04.560
You got to cut my hair.

00:01:04.560 --> 00:01:05.640
And she's like, no, no.

00:01:05.640 --> 00:01:06.840
And so, she did an okay job.

00:01:06.840 --> 00:01:08.580
And that was really good.

00:01:08.580 --> 00:01:09.720
And then I decided to go back.

00:01:09.720 --> 00:01:11.900
And, like, it was still quite a bit, actually, longer than I wanted.

00:01:11.900 --> 00:01:15.220
So, I gave it a second haircutting as well.

00:01:15.220 --> 00:01:15.640
Yeah.

00:01:15.640 --> 00:01:19.100
And, you know, honestly, it's about as good as the haircuts I pay for.

00:01:19.100 --> 00:01:21.780
So, I'm feeling like this might be a trend that I was forced into.

00:01:21.780 --> 00:01:23.280
And you're looking good yourself.

00:01:23.280 --> 00:01:23.980
Yeah.

00:01:24.080 --> 00:01:28.300
So, I normally have, like, a short goatee thing that I keep.

00:01:28.300 --> 00:01:32.400
And I just have, when I bought the trimmer for it, I just only needed one guard because,

00:01:32.400 --> 00:01:34.440
I mean, I didn't think ahead.

00:01:34.440 --> 00:01:38.600
And I just, like, I don't know where all the rest of the guards were.

00:01:38.780 --> 00:01:42.860
So, I only have that, like, little short guard for the trimmer.

00:01:42.860 --> 00:01:45.600
And my wife was willing to cut my hair.

00:01:45.600 --> 00:01:47.760
But it's a little shorter than I was expecting.

00:01:47.760 --> 00:01:48.820
But I think it's all right.

00:01:48.820 --> 00:01:50.220
I don't have to worry about it anymore.

00:01:50.220 --> 00:01:52.720
My kids, like, say it's like a peach.

00:01:52.720 --> 00:01:55.200
So, they come by and rub my head all the time.

00:01:55.200 --> 00:01:55.900
It looks good.

00:01:55.900 --> 00:01:57.880
And that's the weird world we find ourselves in.

00:01:57.880 --> 00:02:00.940
You know, I'm here drinking coffee out of this Pittsburgh mug.

00:02:00.940 --> 00:02:02.460
But there will be no Pittsburgh, right?

00:02:02.460 --> 00:02:03.760
PyCon is now officially canceled.

00:02:03.760 --> 00:02:04.400
Yeah.

00:02:04.400 --> 00:02:05.460
That's a bummer.

00:02:05.680 --> 00:02:09.280
This might be the first recording since it was actually fully, fully canceled.

00:02:09.280 --> 00:02:11.300
At least the first time we spoke about it, possibly.

00:02:11.300 --> 00:02:12.840
We might have mentioned it last time.

00:02:12.840 --> 00:02:18.460
But there's certainly a tightening up on getting together for conferences and that kind of thing.

00:02:18.460 --> 00:02:21.100
And, you know, we spoke a little bit about what's going to stick.

00:02:21.100 --> 00:02:23.660
These changes that we have to have that are going to stick.

00:02:23.660 --> 00:02:25.880
Like, a lot of meetings could just be emails.

00:02:25.880 --> 00:02:28.240
Or they could be remote or whatever, right?

00:02:28.240 --> 00:02:30.840
And I wonder what that's going to do to the conference space.

00:02:30.840 --> 00:02:31.380
Yeah.

00:02:31.380 --> 00:02:32.440
I wonder, too.

00:02:32.720 --> 00:02:37.860
One of the reactions I heard from somebody was, even if it was to move towards a virtual,

00:02:37.860 --> 00:02:42.400
which they were talking about that a little bit, maybe doing a virtual conference.

00:02:42.400 --> 00:02:43.980
But that wasn't the thing.

00:02:43.980 --> 00:02:45.260
It's essentially canceled.

00:02:45.260 --> 00:02:49.880
Although some people are sending in videos, they're going to have some people be able to

00:02:49.880 --> 00:02:51.440
send in their presentations as videos.

00:02:51.440 --> 00:02:52.120
So that's neat.

00:02:52.120 --> 00:02:53.440
But it's the meeting people.

00:02:53.440 --> 00:02:56.360
We interact with people online all year long.

00:02:56.360 --> 00:02:58.460
And it's one chance to get together.

00:02:58.460 --> 00:03:01.880
So at least with PyCon, I don't think that'll go away.

00:03:02.140 --> 00:03:02.940
No, I don't think so.

00:03:02.940 --> 00:03:04.920
For me, it's not about the talks.

00:03:04.920 --> 00:03:06.620
I go to talks and they're interesting.

00:03:06.620 --> 00:03:09.980
But it's about the stuff that happens in between it.

00:03:09.980 --> 00:03:14.460
It's about hanging out with you, hanging out with people from other places I don't normally

00:03:14.460 --> 00:03:19.160
see, making those connections, and just stumbling onto things that are like, oh, I had no idea

00:03:19.160 --> 00:03:20.380
that this was happening.

00:03:20.380 --> 00:03:21.200
Let's talk about that.

00:03:21.200 --> 00:03:22.400
That's the value.

00:03:22.400 --> 00:03:23.780
And that's really tough to replace.

00:03:23.780 --> 00:03:25.460
Yeah, it really is tough to replace.

00:03:25.460 --> 00:03:27.560
Maybe more video chats will help.

00:03:27.560 --> 00:03:27.960
Absolutely.

00:03:27.960 --> 00:03:29.020
All right.

00:03:29.040 --> 00:03:30.980
Well, I guess everyone be safe out there.

00:03:30.980 --> 00:03:31.420
Yeah.

00:03:31.420 --> 00:03:32.500
And follow our lead.

00:03:32.500 --> 00:03:34.520
Stay home, even if you got to cut your own hair.

00:03:34.520 --> 00:03:37.400
Well, let's move on to some topics.

00:03:37.400 --> 00:03:41.640
So first off, I was hoping to talk about PyProject.toml.

00:03:41.640 --> 00:03:43.980
I think we've, I'm sure we've covered it before.

00:03:43.980 --> 00:03:49.540
But the Brett Cannon is, is he still part of the core or did he get voted out?

00:03:49.540 --> 00:03:51.740
I think he's still part of the core at Honchos.

00:03:51.960 --> 00:03:52.960
I think he's on the steering council.

00:03:52.960 --> 00:03:53.180
Yeah.

00:03:53.180 --> 00:03:53.580
Yeah.

00:03:53.580 --> 00:03:58.820
He wrote an article just released recently called, What the Heck is PyProject.toml?

00:03:58.820 --> 00:04:04.020
And one of the reasons why he wrote it, and I think this is an interesting side effect,

00:04:04.020 --> 00:04:10.520
is so if you're just, if you're just joining us, the PyProject.toml came out of the efforts

00:04:10.520 --> 00:04:15.660
with PEP 517 and 518 to define what the file looks like.

00:04:15.660 --> 00:04:21.440
And it kind of defines what tools are needed to build a project and, and how to build it.

00:04:21.440 --> 00:04:27.580
And that used to be mostly just setup tools, but now there's lots of other tools like Flit

00:04:27.580 --> 00:04:31.560
and Poetry, and you can make your own if you want to.

00:04:31.560 --> 00:04:38.960
But these are, this file, one of the side effects is people started adding other, their tool

00:04:38.960 --> 00:04:42.720
configuration to this file, such as like coverage and talks.

00:04:42.720 --> 00:04:50.020
Now you can, you can put the, those configurations into PyProject.toml for those tools, even,

00:04:50.020 --> 00:04:55.560
even though it has nothing to do with building and it just saves you from having an extra file,

00:04:55.560 --> 00:04:57.920
but even though those tools have their own configuration files.

00:04:57.920 --> 00:05:03.820
And then Black came around and Black uses, only has a few configurations available.

00:05:04.100 --> 00:05:10.980
So instead of creating their own configuration file, Black uses the PyProject.toml for looking

00:05:10.980 --> 00:05:13.880
up configuration if you want to configure like line length or something.

00:05:13.880 --> 00:05:19.960
And so there's, there's been projects that have added PyProject.toml files for the reason

00:05:19.960 --> 00:05:22.280
because they were trying to, they're using Black also.

00:05:22.280 --> 00:05:24.340
And now their, their builds don't work.

00:05:24.600 --> 00:05:30.720
And the reason is if there's a PyProject.toml, even if you're using setup tools, pip will,

00:05:30.720 --> 00:05:35.260
Pip will look for the build stuff around that within the file.

00:05:35.260 --> 00:05:42.060
So Brett is, has gone and added, showed the, the few lines of code you need to add to the

00:05:42.060 --> 00:05:45.240
toml file to specify how to build with setup tools.

00:05:45.620 --> 00:05:49.880
That's the main contribution for this, but it's also, I think that people ought to, ought to

00:05:49.880 --> 00:05:53.160
go read the article because it's a good, a good summary of where we're at right now.

00:05:53.160 --> 00:05:53.360
Yeah.

00:05:53.360 --> 00:05:55.440
The PyProject.toml is great.

00:05:55.440 --> 00:06:01.360
And it's super cool that you can specify things like here's how you can say, build the package,

00:06:01.360 --> 00:06:01.580
right?

00:06:01.580 --> 00:06:03.860
It requires a wheel and whatnot.

00:06:03.860 --> 00:06:04.440
Yeah.

00:06:04.440 --> 00:06:05.740
It's, it's cool.

00:06:05.740 --> 00:06:06.640
I really like it.

00:06:06.640 --> 00:06:09.780
I honestly need to start working with it.

00:06:09.780 --> 00:06:15.140
I'm still on the requirements.txt side of the fence, just waiting for things to, you know,

00:06:15.140 --> 00:06:18.240
shake out, but it certainly seems like there's a lot of energy here.

00:06:18.240 --> 00:06:19.100
Yeah, definitely.

00:06:19.100 --> 00:06:19.580
Yeah.

00:06:19.580 --> 00:06:20.840
So definitely good pick there.

00:06:20.840 --> 00:06:24.340
You know, sometimes we talk about awesome things on Python bytes, right?

00:06:24.340 --> 00:06:24.980
Yeah.

00:06:24.980 --> 00:06:31.140
And we've even talked about awesome lists, which are lists organizing various other things,

00:06:31.140 --> 00:06:34.600
projects, websites, tools, whatever around something.

00:06:34.600 --> 00:06:40.420
But last time in passing, we mentioned that there was a cool article by Jack McHugh, where

00:06:40.420 --> 00:06:43.940
he blogged about the awesome Python bytes, awesome list.

00:06:43.940 --> 00:06:44.260
Yeah.

00:06:44.660 --> 00:06:45.340
That was cool, right?

00:06:45.340 --> 00:06:45.900
Yeah.

00:06:45.900 --> 00:06:53.400
So now Jack has made this a proper GitHub repository where it has a clear way to contribute to it.

00:06:53.400 --> 00:06:56.360
You can do PRs and all sorts of stuff.

00:06:56.360 --> 00:07:01.000
And he said he'll be adding personally to the repo whenever he hears about awesome things like

00:07:01.000 --> 00:07:01.320
this.

00:07:01.320 --> 00:07:04.860
Maybe he'll add his own list to it, which would be very meta, right?

00:07:04.860 --> 00:07:06.100
It would just link back to itself.

00:07:06.100 --> 00:07:06.760
No, just kidding.

00:07:06.760 --> 00:07:07.960
But that's really awesome.

00:07:07.960 --> 00:07:12.240
And there's already five PRs from listeners accepted on this list.

00:07:12.360 --> 00:07:12.700
Oh, wow.

00:07:12.700 --> 00:07:13.560
That's great.

00:07:13.560 --> 00:07:14.080
Isn't that cool?

00:07:14.080 --> 00:07:15.140
People seem to be liking it.

00:07:15.140 --> 00:07:20.100
After we announced it, then we had other people saying, and I saw some commentary about there

00:07:20.100 --> 00:07:22.380
was some missing that he forgot about.

00:07:22.380 --> 00:07:22.980
Yeah.

00:07:22.980 --> 00:07:26.240
Well, it's just the stuff that really stood out to Jack in the beginning, right?

00:07:26.300 --> 00:07:31.100
So if you want to go back and kind of look through what some people thought of a year and a half

00:07:31.100 --> 00:07:33.380
ago that we talked about that was awesome, you can go there.

00:07:33.380 --> 00:07:36.260
And if you look at it, it comes with graphics.

00:07:36.260 --> 00:07:40.040
Like all good things that present things, if you can have graphics, guess what?

00:07:40.040 --> 00:07:41.480
It's like a thousand words, isn't it?

00:07:41.480 --> 00:07:43.100
Oh, yeah.

00:07:43.220 --> 00:07:43.740
Isn't that cool?

00:07:43.740 --> 00:07:44.780
This is great.

00:07:44.780 --> 00:07:45.340
Yeah.

00:07:45.340 --> 00:07:46.780
It's really, really polished.

00:07:46.780 --> 00:07:52.480
And you can just flip through and like, we talked about D type, the visualization for

00:07:52.480 --> 00:07:53.500
Panda's data frames.

00:07:53.500 --> 00:07:56.260
And, you know, there's like some nice examples and pictures there.

00:07:56.260 --> 00:07:57.900
Really, really good stuff.

00:07:58.040 --> 00:08:01.400
So I think it's a great way to explore some of the stuff that we talk about.

00:08:01.400 --> 00:08:04.560
A couple of fun projects I saw on there that I just remembered.

00:08:04.560 --> 00:08:05.700
Oh, yeah, we did talk about that.

00:08:05.700 --> 00:08:06.060
It was cool.

00:08:06.060 --> 00:08:11.060
It was great expectations for validating, documenting, and profiling data.

00:08:11.060 --> 00:08:16.740
Panda's vet, which is a flake eight, a linter for opinionated pandas code.

00:08:16.740 --> 00:08:20.980
Geoalchemy, which is like geospatial databases on top of SQLAlchemy.

00:08:20.980 --> 00:08:27.400
And Vue.py, which provides in-browser Python runtimes interacting with Vue.js.

00:08:27.740 --> 00:08:29.500
So just, you know, all sorts of cool stuff there.

00:08:29.500 --> 00:08:35.520
And I guess related to this, although not technically anything to do with that, is we

00:08:35.520 --> 00:08:38.540
have a super cool search over at Python by set of M slash search.

00:08:38.540 --> 00:08:40.260
And it's really fast.

00:08:40.260 --> 00:08:42.740
It even searches our spoken words.

00:08:42.740 --> 00:08:47.360
So if you want to just find something that maybe we talked about a long time ago or see

00:08:47.360 --> 00:08:49.780
if it's covered, throw it in there and it'll pop up.

00:08:49.780 --> 00:08:50.460
That's really neat.

00:08:50.460 --> 00:08:54.960
And I love this because I'm like flipping through this going, oh, I want to go back and

00:08:54.960 --> 00:08:55.740
check that out again.

00:08:55.740 --> 00:08:56.980
Exactly.

00:08:57.120 --> 00:08:59.820
Like that was like a year and a half and we only spent like, you know, half an hour

00:08:59.820 --> 00:09:01.200
playing with it before we talked about it.

00:09:01.200 --> 00:09:02.320
Then maybe we didn't use it again.

00:09:02.320 --> 00:09:03.420
But yeah, it was cool.

00:09:03.420 --> 00:09:07.860
So I legitimately enjoyed going through the list here and I thought listeners might as well

00:09:07.860 --> 00:09:09.780
if they heard it before or even if they didn't.

00:09:09.780 --> 00:09:10.100
Yeah.

00:09:10.100 --> 00:09:10.560
Yeah.

00:09:10.560 --> 00:09:11.020
That's awesome.

00:09:11.020 --> 00:09:11.340
Yeah.

00:09:11.400 --> 00:09:17.060
Well, I guess you were going to continue a theme a little bit with your, from the pyproject.toml

00:09:17.060 --> 00:09:17.720
onward, huh?

00:09:17.720 --> 00:09:24.840
I've been playing with a project for a while off and on associated with testing code called

00:09:24.840 --> 00:09:25.800
the cards project.

00:09:25.800 --> 00:09:28.180
And it's a little to-do app thing.

00:09:28.240 --> 00:09:33.080
It's just a little sample thing to mostly to play with all of the stuff around Python and

00:09:33.080 --> 00:09:36.100
distribution and testing and, and all that.

00:09:36.100 --> 00:09:42.080
And, somebody, oh gosh, it was months ago and I should have their name here.

00:09:42.080 --> 00:09:47.500
But one of the, somebody else contributed a pull request to add a GitHub actions.

00:09:47.500 --> 00:09:54.380
So GitHub actions are a way to, you know, for, you can use that for like CI, CD workflows

00:09:54.380 --> 00:09:59.160
with Python project with all, all sorts of stuff, but with, especially with Python projects,

00:09:59.160 --> 00:10:05.400
because you know that the building pipeline is kind of short, with, with Python, it's

00:10:05.400 --> 00:10:06.980
not as complicated as other things.

00:10:06.980 --> 00:10:11.680
So often you don't really, it's, it might be overkill to use another CI system.

00:10:11.680 --> 00:10:15.620
Um, and so GitHub actions are really pretty cool for that.

00:10:15.620 --> 00:10:22.060
And so I incorporated that and then was looking into the last step was how do I publish to

00:10:22.060 --> 00:10:22.580
the PyPI?

00:10:22.580 --> 00:10:24.620
I'd really like to add that.

00:10:24.620 --> 00:10:29.820
So there's a, I was looking it up and the PyPI, the Python packaging authority actually

00:10:29.820 --> 00:10:36.180
has a article written called publishing pack, publishing packets, distribution release releases

00:10:36.180 --> 00:10:39.340
using GitHub actions with CI, CD workflows.

00:10:40.080 --> 00:10:42.180
And so this was like, I'm following through this.

00:10:42.180 --> 00:10:45.720
I'm actually ran into some hiccups, but I wanted to cover it anyway.

00:10:45.720 --> 00:10:51.360
My promise is that by the time this goes live, the cards project will actually be complete

00:10:51.360 --> 00:10:52.840
because it's, it's almost there.

00:10:52.840 --> 00:10:54.780
There's a few hiccups I've ran into.

00:10:54.780 --> 00:11:01.620
PyPI requires you to have an email associated with package, which is kind of annoying because,

00:11:01.620 --> 00:11:05.880
split and pip don't anymore, but PyPI still does.

00:11:06.100 --> 00:11:07.280
So I had to do that.

00:11:07.280 --> 00:11:09.600
And there's a few, a few other hiccups.

00:11:09.600 --> 00:11:10.640
I don't know if I'll write it.

00:11:10.640 --> 00:11:14.860
If there's just these, I'll probably just fix them and have it ready for people to look at.

00:11:14.860 --> 00:11:20.020
But, if it's too many more, I'll have to write a new blog post and I'll associate that

00:11:20.020 --> 00:11:20.800
with this as well.

00:11:20.800 --> 00:11:21.780
Yeah, this looks great.

00:11:21.780 --> 00:11:24.400
And I had no idea about the GitHub secrets.

00:11:24.400 --> 00:11:34.240
So one of the challenges is you want to have your personal PyPI account where you are the maintainer admin of that package on pypi.org.

00:11:34.240 --> 00:11:39.900
You might not want to contribute that into the source code, especially for an open source project, right?

00:11:39.900 --> 00:11:40.820
Yeah, probably a bad idea.

00:11:41.400 --> 00:11:43.680
Yeah, that's going to result in some bad things happening there.

00:11:43.680 --> 00:11:55.320
Eventually it talks about how to use the secrets settings in GitHub to store those there and then how to like pull those out as replacements in your GitHub actions, which I had never done.

00:11:55.320 --> 00:11:55.840
That's pretty cool.

00:11:55.960 --> 00:12:13.320
Yeah, and the workflow that they're suggesting, which is, I think, a great idea, is to go ahead and have all, every pull request or merge to your, some master branch or to anywhere, any branch, go through the entire thing and try to publish to the test pypi server.

00:12:13.320 --> 00:12:20.320
And only ones where you change the tag, which is where you would change, you'd change a tag if you change your version number.

00:12:20.320 --> 00:12:24.640
That's when it would push to a pypi, the real one.

00:12:24.640 --> 00:12:31.140
But to have that workflow even going through the test pypi every time you push something, I think that's a great idea.

00:12:31.140 --> 00:12:31.640
Yeah, it is.

00:12:31.640 --> 00:12:35.940
But somehow you've got to change the version number or it's not going to let you publish even to test, right?

00:12:35.940 --> 00:12:36.220
Yeah.

00:12:36.220 --> 00:12:37.520
So I'm not sure.

00:12:37.520 --> 00:12:39.680
I still am figuring out how to get around that.

00:12:39.680 --> 00:12:40.380
So we'll see.

00:12:40.380 --> 00:12:40.620
Yeah.

00:12:40.620 --> 00:12:40.920
Cool.

00:12:40.920 --> 00:12:43.680
One of the things I love, I love really great tutorials.

00:12:43.680 --> 00:12:47.580
The internet, I think, is working because of the great tutorials around.

00:12:47.580 --> 00:12:52.720
And one of the groups that have put out some awesome tutorials is DigitalOcean.

00:12:53.060 --> 00:12:55.520
So DigitalOcean is sponsoring this episode.

00:12:55.520 --> 00:13:03.180
And one of the things that they're offering, of course, is they offer a way to get started with, they offer Kubernetes clusters.

00:13:03.180 --> 00:13:05.040
And you can do that with DigitalOcean.

00:13:05.040 --> 00:13:10.860
But to get started with hosting and running Linux servers with Kubernetes clusters, that can be a little tricky.

00:13:11.400 --> 00:13:15.560
And that's why we want to highlight that DigitalOcean has launched their new support center.

00:13:16.200 --> 00:13:22.200
And this makes it easier to find answers to your questions, help you get up to speed, get what you need.

00:13:22.200 --> 00:13:28.800
And you can search across product documentation and community tutorials and forums all in one place.

00:13:29.200 --> 00:13:36.520
And especially with something tricky like a Kubernetes cluster, really, even if you're new at any of this, their support center is awesome.

00:13:36.520 --> 00:13:37.680
Got great tutorials.

00:13:37.680 --> 00:13:43.060
So visit pythonbytes.fm/doc support to see their tutorials.

00:13:43.060 --> 00:13:49.220
And of course, use pythonbytes.fm/DigitalOcean for $100 credit for new users.

00:13:49.220 --> 00:13:49.940
Yeah, absolutely.

00:13:49.940 --> 00:13:58.320
Their tutorials are so good that you can even select different operating systems and different versions so that the steps exactly line up.

00:13:58.800 --> 00:14:03.420
If you're on, say, Ubuntu 16, you don't have to try to patch that back.

00:14:03.420 --> 00:14:06.760
The tutorial steps would be different, which is, that's taken to the next level.

00:14:06.760 --> 00:14:07.380
Very good stuff.

00:14:07.380 --> 00:14:14.740
I've heard some from somebody once before where they were actually using a different host and using DigitalOcean tutorials to help them set it up.

00:14:14.740 --> 00:14:17.760
And then they finally realized, why am I giving money to somebody else?

00:14:17.760 --> 00:14:20.440
Let's use DigitalOcean because they helped me out.

00:14:20.440 --> 00:14:22.300
That's where our infrastructure is.

00:14:22.300 --> 00:14:22.640
Very good.

00:14:22.640 --> 00:14:26.320
Now, this next one, Brian, this one is best seen through pictures.

00:14:26.320 --> 00:14:29.580
So make sure you open this up and we talk through it.

00:14:29.580 --> 00:14:35.100
So like I said, all good presentations, especially stuff that's graphical, has pictures, people.

00:14:35.100 --> 00:14:35.980
This is amazing.

00:14:35.980 --> 00:14:38.600
So this thing that I want to talk about is called rich.

00:14:38.600 --> 00:14:40.460
Rich text for terminals.

00:14:40.460 --> 00:14:49.860
So we've talked a lot about how it's great to have GUIs and web apps and stuff like that that's very visual for the presentations, which are still true.

00:14:49.860 --> 00:14:53.860
But a lot of times you just want something in a little terminal app, command CLI app.

00:14:54.240 --> 00:15:00.120
And it would be nice if it wasn't just all one plain color or just, you know, all text left aligned.

00:15:00.120 --> 00:15:02.840
So there's this cool project called rich.

00:15:03.580 --> 00:15:16.640
And rich lets you have up to 16.7 million colors for your terminal colors, not just like eight or whatever it is, you know, red and light red, like 16.8 million colors.

00:15:16.640 --> 00:15:22.840
It supports bold, dim, italics, underlined, strikethrough, and even, please don't use it, the blink tag.

00:15:23.840 --> 00:15:25.980
You can put the blink tag out there.

00:15:25.980 --> 00:15:34.480
You can have text that's left aligned, centered, right aligned, justified, supports like Chinese and Korean, has emojis.

00:15:34.480 --> 00:15:38.060
Like you can put colon, apple, colon, and an apple shows up.

00:15:38.060 --> 00:15:42.020
You can, as part of a string, put little escapes.

00:15:42.020 --> 00:15:44.840
So you can say this word is bold magenta.

00:15:45.080 --> 00:15:47.240
And then here's the rest of the words and just print that thing out.

00:15:47.240 --> 00:15:48.760
So you have like inline styling.

00:15:48.760 --> 00:15:49.540
Tables.

00:15:49.540 --> 00:15:53.320
You have beautiful tables like in the terminal.

00:15:53.320 --> 00:15:54.600
Those are really nice.

00:15:54.600 --> 00:15:55.520
Those are really nice.

00:15:56.240 --> 00:15:57.640
Syntax highlighting for code.

00:15:57.640 --> 00:16:00.740
So you can print out Python code with line numbers and it'll highlight it.

00:16:00.740 --> 00:16:03.240
And it even has a markdown support.

00:16:03.240 --> 00:16:07.860
So you could write markdown and it renders it as its own version of rich text.

00:16:07.860 --> 00:16:13.320
Not quite HTML or something like that, but it has, you know, bulleted lists and like titles and whatnot.

00:16:13.320 --> 00:16:16.780
Even as progress bars and logger support and all kinds of stuff.

00:16:16.780 --> 00:16:17.320
Isn't that cool?

00:16:17.320 --> 00:16:17.700
Yeah.

00:16:17.700 --> 00:16:20.100
The logger handling is actually pretty great.

00:16:20.100 --> 00:16:20.280
Yeah.

00:16:20.280 --> 00:16:26.020
So if you're working on a terminal app and you're like, we're just going to keep it this way, but I want it to look nicer.

00:16:26.120 --> 00:16:27.260
I want it to look a little more professional.

00:16:27.260 --> 00:16:31.200
This is like kind of your all in one, do a bunch of cool stuff here.

00:16:31.200 --> 00:16:36.540
You can even have multiple progress bars, all updating in parallel on the screen.

00:16:36.540 --> 00:16:40.300
So if you've got a bunch of downloads, you can indicate them all happening or something like that.

00:16:40.300 --> 00:16:41.320
A bunch of jobs running.

00:16:41.320 --> 00:16:41.960
Sweet.

00:16:41.960 --> 00:16:43.700
So yeah, this is a cool project.

00:16:43.700 --> 00:16:45.020
Might have to add this to cards.

00:16:45.020 --> 00:16:45.860
That would be cool.

00:16:45.860 --> 00:16:46.540
That would be awesome.

00:16:46.540 --> 00:16:47.540
Yeah, it definitely would.

00:16:47.540 --> 00:16:51.540
It even has all of that support for Windows.

00:16:52.080 --> 00:16:58.560
If you use the new Windows console or terminal, I guess is the word that they're now using because console, I guess, is the old school thing.

00:16:58.560 --> 00:17:00.740
And Microsoft's like, no, no, we all have terminals now.

00:17:00.740 --> 00:17:04.680
And you can go get that from the, you probably don't have that on Windows.

00:17:04.680 --> 00:17:07.900
It's in preview, but you can get it on the Windows store for free.

00:17:07.900 --> 00:17:09.160
And I link to that as well.

00:17:09.220 --> 00:17:14.020
So if you're on Windows and you want a better terminal in general that supports this kind of stuff, check that out too.

00:17:14.020 --> 00:17:14.380
Hmm.

00:17:14.380 --> 00:17:15.060
Interesting.

00:17:15.060 --> 00:17:20.280
Second, do you know if that'll roll into the normal, just all releases of Windows at some point?

00:17:20.280 --> 00:17:21.020
I would hope so.

00:17:21.020 --> 00:17:21.680
Maybe.

00:17:21.680 --> 00:17:22.960
It's still in beta.

00:17:22.960 --> 00:17:25.340
I guess we'll have to see, but it would be nice, right?

00:17:25.340 --> 00:17:30.340
It'd be one step closer to parity across all these platforms, which, you know, it's always good.

00:17:30.340 --> 00:17:30.520
Yeah.

00:17:30.520 --> 00:17:35.620
I just use the bash terminal for bash for or get for Windows comes with a bash terminal.

00:17:35.620 --> 00:17:36.740
Right.

00:17:36.740 --> 00:17:37.100
Nice.

00:17:37.100 --> 00:17:42.260
Speaking of Windows, I guess it's any operating system, but I'm actually kind of surprised.

00:17:42.260 --> 00:17:44.460
This has been on our to-do list for a long time.

00:17:44.460 --> 00:17:46.540
A library called psutil.

00:17:46.540 --> 00:17:51.720
It's a cross-platform library for process and system monitoring in Python.

00:17:51.720 --> 00:17:54.820
And I'm actually surprised that we haven't really covered it.

00:17:54.820 --> 00:17:56.980
We must have covered it in passing a couple of times.

00:17:56.980 --> 00:18:00.820
But I wanted to highlight it because it is an amazing little tool.

00:18:00.820 --> 00:18:04.540
It's not something I really like love when I have to use it.

00:18:04.540 --> 00:18:12.740
But things like there's time zone control and multiple computers or services running on a different machine with Windows.

00:18:12.740 --> 00:18:14.600
Like I said, you can use it with it.

00:18:14.600 --> 00:18:15.900
It's a cross-platform thing.

00:18:16.020 --> 00:18:24.100
But you can use this to grab CPU utilization, memory utilization, disk usage, network, what ports are being used.

00:18:24.100 --> 00:18:27.880
And you can even see all of this information based on which process.

00:18:28.080 --> 00:18:35.580
So you can get like a per process list of CPU usage and everything within that.

00:18:35.580 --> 00:18:41.120
And then around processes, you can suspend and kill and signal different processes.

00:18:41.640 --> 00:18:46.160
So if you're one of the things that we use this for is monitoring our build servers.

00:18:46.160 --> 00:18:55.560
I know there's other ways to do it, but this is a pretty easy way to go over to another server and grab the CPU usage and memory usage.

00:18:55.560 --> 00:19:01.980
So we can keep track of all of our, make sure all of our build servers are working and not overloaded.

00:19:01.980 --> 00:19:03.080
So we use this.

00:19:03.080 --> 00:19:04.160
It's a pretty cool little tool.

00:19:04.160 --> 00:19:05.400
Yeah, this looks really great.

00:19:05.860 --> 00:19:11.780
I think we also talked about it last week briefly when we covered pytest Monitor.

00:19:11.780 --> 00:19:14.980
And that was built on top of psutil amongst other things.

00:19:14.980 --> 00:19:19.260
We didn't cover psutil, but like it's that kind of tools that this enables, right?

00:19:19.260 --> 00:19:21.300
Yeah, pytest Monitor used that also.

00:19:21.300 --> 00:19:23.980
I'm like, man, I think we covered this recently.

00:19:23.980 --> 00:19:26.120
But yeah, it was last week we covered that.

00:19:26.120 --> 00:19:29.780
By itself, it's still a really great thing to use right itself.

00:19:29.780 --> 00:19:35.560
And the readme is huge, but it shows you a lot of different examples for how to use it.

00:19:35.560 --> 00:19:37.000
Yeah, it looks super useful.

00:19:37.000 --> 00:19:42.060
If you're going to do any automation and sort of admin sort of work, it looks great.

00:19:42.060 --> 00:19:48.080
One of the great things that I love is the cross-platform part because this sort of stuff you can do on,

00:19:48.080 --> 00:19:54.540
I mean, you can do directly with Windows and with Unix, but, you know, it's different on everything else, on everything.

00:19:54.540 --> 00:19:59.920
And so having a cross, I'm pretty impressed that it can even exist as a cross-platform thing, but it can.

00:19:59.920 --> 00:20:00.540
Yeah, no kidding.

00:20:00.540 --> 00:20:02.320
Apparently it can, and it's awesome.

00:20:02.320 --> 00:20:03.720
Definitely a good one.

00:20:03.720 --> 00:20:05.200
So let me ask you this question.

00:20:05.260 --> 00:20:13.720
If I'm going to store some numbers, let's say up to 100,000, how big of an integer do I need to make in Python?

00:20:13.720 --> 00:20:14.980
I don't have to make an integer.

00:20:14.980 --> 00:20:16.880
They're just there.

00:20:16.880 --> 00:20:17.540
They're just there.

00:20:17.540 --> 00:20:18.240
It's beautiful, right?

00:20:18.340 --> 00:20:25.260
But I know that you've done a lot of C and C++, and I have as well back in the day, and you used to have to really think about that, right?

00:20:25.260 --> 00:20:32.680
Like if you saw a negative 32,000 for a number and you thought you were adding to it, you're like, oh, it was a short and it overflowed.

00:20:33.060 --> 00:20:36.160
Well, I guess it's maybe it should be a U short, unsigned short.

00:20:36.160 --> 00:20:38.440
It could hold up to 65,000, right?

00:20:38.440 --> 00:20:40.640
Like this is something you always had to think about.

00:20:40.720 --> 00:20:42.660
And in Python, you don't.

00:20:42.660 --> 00:20:45.900
And how that happens is pretty interesting.

00:20:45.900 --> 00:20:47.620
I didn't really know the internals.

00:20:47.620 --> 00:20:52.200
I kind of guessed maybe something like what's happening, what's happening, but I didn't know.

00:20:52.260 --> 00:21:00.020
And so there's a cool article by Arpiz Bayani, and he wrote something called How Python Implements Superlong Integers.

00:21:00.020 --> 00:21:07.080
So, for example, if you tried to take two and raise it to the power of 20,000 in C, you would get infinity.

00:21:07.080 --> 00:21:13.360
Right, because it's, well, it's bigger than we can hold it, so it must be infinity as far as we're concerned.

00:21:13.360 --> 00:21:15.340
But in Python, it's fine.

00:21:15.340 --> 00:21:22.740
It just gives you a 6,021-digit integer, and you don't have to declare, like, I'm working with really big numbers or anything like that.

00:21:22.740 --> 00:21:26.320
And so Python is pretty cool in how it's transparent with these, right?

00:21:26.320 --> 00:21:26.660
Yeah.

00:21:26.660 --> 00:21:27.520
Yeah.

00:21:27.520 --> 00:21:33.360
So this article digs into the CPython source code.

00:21:33.360 --> 00:21:37.500
It talks about the algorithms and the data structures that make this happen.

00:21:37.500 --> 00:21:44.500
So basically, the numbers in Python are represented as what's called a pyvar object.

00:21:44.680 --> 00:21:48.500
So pyobject, that's the core type of things in Python.

00:21:48.500 --> 00:21:51.800
But this is a variable length one, right?

00:21:51.800 --> 00:21:54.560
And so there's a couple of different types that are like this.

00:21:54.560 --> 00:21:56.080
We've got lists.

00:21:56.080 --> 00:21:56.980
We've got tuples.

00:21:56.980 --> 00:21:58.480
But we also have numbers.

00:21:58.480 --> 00:22:04.320
And that indicates that they can be of different size, and they can basically grow as they need to.

00:22:04.320 --> 00:22:05.280
Right?

00:22:05.280 --> 00:22:09.720
So Python's numbers ultimately are represented by this thing called a long object.

00:22:10.100 --> 00:22:12.180
And that has a pyobject base.

00:22:12.180 --> 00:22:14.420
But then it also has a size and a digit.

00:22:14.880 --> 00:22:20.480
And these digits are, I think they're four or eight bytes long.

00:22:20.480 --> 00:22:21.440
I can't remember.

00:22:21.440 --> 00:22:22.180
It doesn't say here.

00:22:22.180 --> 00:22:25.320
It's a macro that would expand at four or eight, something like that.

00:22:25.320 --> 00:22:28.840
But basically, it uses a list of digits.

00:22:28.840 --> 00:22:31.940
And it, you know, initially, it just uses one of those.

00:22:31.940 --> 00:22:34.640
But then when it gets full, it adds another and another and another.

00:22:35.000 --> 00:22:40.120
What's interesting is they're base 230, not 10, not 16, 230.

00:22:40.120 --> 00:22:41.080
That's weird.

00:22:41.080 --> 00:22:41.520
Okay.

00:22:41.520 --> 00:22:46.800
Yeah, because apparently it can most efficiently use that's exactly that space.

00:22:46.800 --> 00:22:47.180
Okay.

00:22:47.180 --> 00:22:51.140
Of its four bytes or whatever as individual elements in a base.

00:22:51.140 --> 00:22:52.340
So it's pretty interesting.

00:22:52.340 --> 00:22:54.760
Like there's this ginormous number.

00:22:54.760 --> 00:22:57.860
And if you were trying to represent it in base 230, it's 100.

00:22:57.860 --> 00:23:00.580
I'm not going to read it off because it's really, really long.

00:23:00.580 --> 00:23:02.840
But it's pretty interesting how it uses this.

00:23:02.920 --> 00:23:06.880
But then when you get into operations, right, if I'm going to add two numbers and they're

00:23:06.880 --> 00:23:09.380
base 230, like what algorithm do you do?

00:23:09.380 --> 00:23:14.700
It's not like base 10 where you normally do the thing or division or something.

00:23:14.700 --> 00:23:16.840
So that's also interesting to think about.

00:23:16.840 --> 00:23:18.980
If you look at arithmetic, it's pretty straightforward.

00:23:18.980 --> 00:23:20.600
You just add within the digits.

00:23:20.600 --> 00:23:24.740
And if you overflow 230, you do a carryover like you learned in elementary school.

00:23:24.740 --> 00:23:26.520
Subtraction is like you do the borrow.

00:23:26.520 --> 00:23:27.460
So it's like reverse.

00:23:27.460 --> 00:23:32.700
But then multiplication, in order to keep things efficient, uses an algorithm called the

00:23:32.700 --> 00:23:42.960
Karastabu algorithm, which is an interesting way to multiply two in-digit numbers in different

00:23:42.960 --> 00:23:43.740
bases and stuff.

00:23:43.740 --> 00:23:49.120
And yeah, so it's if you've ever wondered how come you don't have to worry about numbers

00:23:49.120 --> 00:23:50.240
overflowing in Python.

00:23:50.240 --> 00:23:54.380
Here's a cool look inside that at the CPython source code and some of the algorithms.

00:23:54.380 --> 00:23:55.140
That's amazing.

00:23:55.140 --> 00:23:56.080
Yeah.

00:23:56.080 --> 00:23:57.420
Actually, that's pretty cool.

00:23:57.420 --> 00:23:58.180
It is pretty cool.

00:23:58.180 --> 00:23:59.860
I'm so glad I don't have to worry about it, right?

00:23:59.860 --> 00:24:00.800
It's just digits happens.

00:24:00.800 --> 00:24:01.060
Yeah.

00:24:01.060 --> 00:24:06.840
One of the definite benefits of Python is this notion of developer time is way more valuable

00:24:06.840 --> 00:24:08.360
than computer time.

00:24:08.360 --> 00:24:11.040
So let's figure all this stuff out for everybody else.

00:24:11.040 --> 00:24:13.540
And then we can stop thinking about it so much.

00:24:13.540 --> 00:24:14.280
Yeah, for sure.

00:24:14.400 --> 00:24:20.440
I had a project many years ago where I had to work with an FPGA and the clock system was

00:24:20.440 --> 00:24:28.160
such that the timing had to set the current time, had to divide that out for a multi-radix

00:24:28.160 --> 00:24:29.060
number.

00:24:29.060 --> 00:24:32.240
So it wasn't like base 10 or base 230.

00:24:32.240 --> 00:24:34.900
It was each digit had its own base.

00:24:34.900 --> 00:24:35.720
Oh my goodness.

00:24:35.720 --> 00:24:36.720
That's crazy.

00:24:37.440 --> 00:24:39.060
It was kind of a beast.

00:24:39.060 --> 00:24:39.680
It was cool.

00:24:39.680 --> 00:24:43.220
A cool algorithm, but it was a fun thing.

00:24:43.220 --> 00:24:43.540
Yeah.

00:24:43.540 --> 00:24:43.800
Yeah.

00:24:43.800 --> 00:24:44.740
Love this sort of stuff.

00:24:44.740 --> 00:24:44.920
Yeah.

00:24:44.920 --> 00:24:45.500
This is really cool.

00:24:45.500 --> 00:24:47.300
A cool glimpse behind the curtain.

00:24:47.300 --> 00:24:48.440
A little bit of the red pill.

00:24:48.440 --> 00:24:51.900
Go down inside, see what's happening.

00:24:51.900 --> 00:24:57.040
One final comment here is there's some funny little tricks you can play on people to ask.

00:24:57.040 --> 00:25:00.940
You can like create the number 10 and then create the number 10 somewhere else and ask

00:25:00.940 --> 00:25:06.040
if those are the same number, like with the word is, it's true for small numbers, but it's

00:25:06.040 --> 00:25:06.960
false for large numbers.

00:25:06.960 --> 00:25:11.800
And that's because Python pre-allocates the numbers negative five to 256.

00:25:11.800 --> 00:25:12.700
Oh wow.

00:25:12.700 --> 00:25:13.200
Okay.

00:25:13.200 --> 00:25:16.620
When you have a hundred in your program, it's the same hundred everywhere.

00:25:16.620 --> 00:25:22.580
But if you have 1,226,411, that was made on the spot.

00:25:22.580 --> 00:25:23.740
Cause these are pointers.

00:25:23.740 --> 00:25:25.720
These are not just like four bytes on the stack.

00:25:25.800 --> 00:25:28.640
These are getting allocated in complicated ways each time.

00:25:28.640 --> 00:25:31.360
And so they said, look, negative five to 256.

00:25:31.360 --> 00:25:32.680
We use these all the time.

00:25:32.680 --> 00:25:34.220
Let's just make them when Python starts.

00:25:34.220 --> 00:25:35.560
Why minus five?

00:25:35.560 --> 00:25:37.880
Well, because who uses minus six?

00:25:37.880 --> 00:25:38.240
Come on.

00:25:38.240 --> 00:25:38.680
I don't know.

00:25:38.680 --> 00:25:40.360
I have no idea.

00:25:40.360 --> 00:25:43.560
I can see minus one and zero to 256.

00:25:43.560 --> 00:25:46.600
But beyond that, I don't really know what they must have some reason.

00:25:46.600 --> 00:25:47.340
Yeah.

00:25:47.340 --> 00:25:47.980
I don't know why.

00:25:47.980 --> 00:25:49.860
They probably started with negative one.

00:25:49.860 --> 00:25:51.740
Somebody said, well, let's do minus two also.

00:25:51.740 --> 00:25:55.320
Oh, let's go hog wild and go all the way down to minus five.

00:25:55.320 --> 00:25:56.500
Exactly.

00:25:56.500 --> 00:25:57.380
Exactly.

00:25:57.380 --> 00:25:57.880
Anyway.

00:25:57.880 --> 00:25:59.380
Hey, that's our six.

00:25:59.380 --> 00:26:02.060
You got anything, any news for us or any extras?

00:26:02.060 --> 00:26:04.120
I have two really quick things.

00:26:04.120 --> 00:26:06.700
You know how Microsoft bought GitHub?

00:26:06.700 --> 00:26:08.380
That was kind of interesting news a while ago.

00:26:08.380 --> 00:26:12.060
And actually people were contemplating the effects that would have on open source and all.

00:26:12.060 --> 00:26:12.320
Yeah.

00:26:12.320 --> 00:26:19.240
Well, NPM, the pip equivalent of JavaScript, is now was acquired by GitHub as well.

00:26:19.240 --> 00:26:23.260
So just interesting moving and shaking over there behind the scenes.

00:26:23.260 --> 00:26:24.240
That's really interesting.

00:26:24.240 --> 00:26:31.480
Unlike PyPA and PIP, NPM was like a commercial venture or something to that effect to try to

00:26:31.480 --> 00:26:33.380
bring that order to the JavaScript side.

00:26:33.380 --> 00:26:35.640
And now, so since it was commercial, it's been acquired.

00:26:35.780 --> 00:26:37.420
So NPM is the JavaScript thing?

00:26:37.420 --> 00:26:39.620
NPM is how JavaScript spells PIP.

00:26:39.620 --> 00:26:42.320
Yeah.

00:26:42.320 --> 00:26:45.580
Okay.

00:26:45.580 --> 00:26:46.020
Okay.

00:26:46.020 --> 00:26:53.200
Quick other one is we're going to try to set up a YouTube channel where people can see both

00:26:53.200 --> 00:26:58.300
of us talking, the silly stuff that we do in a fairly uncut, unedited way.

00:26:58.300 --> 00:27:01.200
But we're going to try to put a video for each topic.

00:27:01.200 --> 00:27:03.660
So we just talked about the Python number thing.

00:27:03.660 --> 00:27:05.080
Like just a single video on that.

00:27:05.080 --> 00:27:06.700
It'll be easy to share with friends.

00:27:06.700 --> 00:27:08.160
It'll be something we put up there.

00:27:08.160 --> 00:27:11.360
So we'll have more details with you soon on the YouTube channel.

00:27:11.360 --> 00:27:12.420
But I'm looking forward to it.

00:27:12.420 --> 00:27:14.780
I think people, it'll give people a new look.

00:27:14.780 --> 00:27:15.420
I think it'll be fun.

00:27:15.420 --> 00:27:15.740
Yeah.

00:27:15.740 --> 00:27:20.400
And then people will be able to recognize our faces when we are not walking around because

00:27:20.400 --> 00:27:21.620
everybody should stay home.

00:27:21.680 --> 00:27:22.040
Exactly.

00:27:22.040 --> 00:27:24.320
Assuming that we continue to just give ourselves haircuts.

00:27:24.320 --> 00:27:25.920
So we look the same.

00:27:25.920 --> 00:27:28.020
Yeah.

00:27:28.020 --> 00:27:28.320
Yeah.

00:27:28.320 --> 00:27:29.200
All right.

00:27:29.200 --> 00:27:30.820
Anything you want to share with folks?

00:27:30.820 --> 00:27:31.480
Nope.

00:27:31.480 --> 00:27:32.000
Nope.

00:27:32.000 --> 00:27:33.200
Just working from home.

00:27:33.200 --> 00:27:33.680
All right.

00:27:33.680 --> 00:27:38.700
Well, I had this joke about C and like numbers overflowing and like, oh, why is it negative

00:27:38.700 --> 00:27:40.000
32,000?

00:27:40.000 --> 00:27:43.840
Oh, because it's 37,000 positive or something like that.

00:27:43.840 --> 00:27:44.000
Right.

00:27:44.000 --> 00:27:45.560
Well, here's another one.

00:27:45.560 --> 00:27:49.180
And this one is just to kind of make you feel good about yourself as a Python developer.

00:27:49.180 --> 00:27:49.760
Right.

00:27:49.760 --> 00:27:50.060
Yeah.

00:27:50.180 --> 00:27:54.660
So this one's visual as a lot of them seem to be lately, but I'll go ahead and we'll do

00:27:54.660 --> 00:27:56.180
our best to describe it.

00:27:56.180 --> 00:27:57.320
Right.

00:27:57.320 --> 00:27:59.000
I'm going to let you be the developer.

00:27:59.000 --> 00:28:00.040
So you do the first three.

00:28:00.040 --> 00:28:01.640
You got to give a little description though.

00:28:01.640 --> 00:28:01.900
Okay.

00:28:01.900 --> 00:28:04.360
So the dude's 830 in the morning.

00:28:04.360 --> 00:28:09.180
I'm staring at the screen and I comment stupid bug.

00:28:09.820 --> 00:28:15.900
And then seven hours later and this guy apparently grows facial hair really fast because he's

00:28:15.900 --> 00:28:18.080
already got stubble at seven, seven hours.

00:28:18.080 --> 00:28:19.760
Oh, it must be Linux.

00:28:20.200 --> 00:28:26.840
And then the next day his face is red and he's even got more hair and he says, JavaScript's

00:28:26.840 --> 00:28:27.180
broken.

00:28:27.180 --> 00:28:28.020
Okay.

00:28:28.020 --> 00:28:28.480
Oh yeah.

00:28:28.480 --> 00:28:29.760
Bob comes in.

00:28:29.760 --> 00:28:32.620
Our other guy comes in and looks at his, oh, hey Bob.

00:28:32.620 --> 00:28:34.120
It looks like you forgot a semicolon.

00:28:34.120 --> 00:28:35.560
Ah, fix.

00:28:35.560 --> 00:28:38.560
Oh yeah.

00:28:38.560 --> 00:28:39.180
Oh man.

00:28:39.180 --> 00:28:39.520
Yeah.

00:28:39.620 --> 00:28:41.240
So that'll be in the show notes.

00:28:41.240 --> 00:28:42.460
You could check out the little comic.

00:28:42.460 --> 00:28:42.960
It's fun.

00:28:42.960 --> 00:28:44.460
It's by Eric Burke.

00:28:44.460 --> 00:28:45.140
Nice one.

00:28:45.140 --> 00:28:45.660
Yeah.

00:28:45.660 --> 00:28:47.180
Don't miss semicolons.

00:28:47.180 --> 00:28:47.500
No.

00:28:47.500 --> 00:28:49.520
Oh, there's a lot of things I don't miss.

00:28:49.520 --> 00:28:53.360
Although I'm doing a lot more C now or C++.

00:28:53.360 --> 00:28:54.600
I got to do it again.

00:28:54.600 --> 00:28:56.580
Well, it just makes you appreciate when you get to do Python.

00:28:56.580 --> 00:28:58.000
Yeah, it sure does.

00:28:58.000 --> 00:29:01.760
So, and appreciate my time with you because this is so special.

00:29:01.760 --> 00:29:02.260
Absolutely.

00:29:02.260 --> 00:29:02.840
Thank you.

00:29:02.840 --> 00:29:05.880
It's great to get together and chat about this and share with everyone.

00:29:05.880 --> 00:29:06.220
Thanks.

00:29:06.220 --> 00:29:06.660
Thank you.

00:29:06.660 --> 00:29:06.860
Yep.

00:29:06.860 --> 00:29:07.040
Bye.

00:29:07.040 --> 00:29:07.380
Bye.

00:29:07.380 --> 00:29:07.420
Bye.

00:29:07.420 --> 00:29:09.280
Thank you for listening to Python Bytes.

00:29:09.520 --> 00:29:11.740
Follow the show on Twitter at Python Bytes.

00:29:11.740 --> 00:29:14.780
That's Python Bytes as in B-Y-T-E-S.

00:29:14.780 --> 00:29:17.660
And get the full show notes at Python Bytes.fm.

00:29:17.660 --> 00:29:22.720
If you have a news item you want featured, just visit Python Bytes.fm and send it our way.

00:29:22.720 --> 00:29:24.780
We're always on the lookout for sharing something cool.

00:29:24.780 --> 00:29:29.220
This is Brian Okken and on behalf of myself and Michael Kennedy, thank you for listening and

00:29:29.220 --> 00:29:31.260
sharing this podcast with your friends and colleagues.

