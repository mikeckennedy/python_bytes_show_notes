
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:10.600
This is episode 126, recorded April 17th, 2019. I'm Michael Kennedy.


00:00:10.600 --> 00:00:11.400
And I'm Brian Akin.


00:00:11.400 --> 00:00:13.000
And Brian, we have a special guest, don't we?


00:00:13.000 --> 00:00:13.500
Yes.


00:00:13.500 --> 00:00:16.000
Yeah, Cecil, Cecil Philip. Welcome to the show, man.


00:00:16.000 --> 00:00:18.000
Thank you so much for having me on. Appreciate it.


00:00:18.000 --> 00:00:22.400
It's great to have you on the show. You've been on Talk Python. I've been on your podcast, Away From The Keyboard.


00:00:22.400 --> 00:00:24.100
So we might as well round this thing out, right?


00:00:24.100 --> 00:00:25.700
Yeah, we may as well go for the trifecta.


00:00:25.700 --> 00:00:27.940
- Yeah, exactly, exactly.


00:00:27.940 --> 00:00:29.780
So, super excited to have you here.


00:00:29.780 --> 00:00:31.160
We got a bunch of cool stuff to cover.


00:00:31.160 --> 00:00:32.780
Before we get to it, just want to say thank you


00:00:32.780 --> 00:00:35.020
to DigitalOcean for sponsoring this episode


00:00:35.020 --> 00:00:35.860
like they do many.


00:00:35.860 --> 00:00:38.540
Check them out at pythonbytes.fm/digitalocean.


00:00:38.540 --> 00:00:39.940
More on that later.


00:00:39.940 --> 00:00:44.260
Brian, there's some really interesting news


00:00:44.260 --> 00:00:47.020
around Python being used for X,


00:00:47.020 --> 00:00:49.660
where Xs find the Higgs boson


00:00:49.660 --> 00:00:52.620
or get the Nobel Prize in economics


00:00:52.620 --> 00:00:54.200
or something else, right?


00:00:54.200 --> 00:00:55.340
You got a new one for us.


00:00:55.340 --> 00:00:58.580
- Well, yeah, I was actually, I was the last to the list.


00:00:58.580 --> 00:00:59.900
I was surprised nobody else took it,


00:00:59.900 --> 00:01:01.860
but in the news recently,


00:01:01.860 --> 00:01:05.060
there's a picture of a black hole, which is cool.


00:01:05.060 --> 00:01:08.100
And it's really neat that there's a bunch


00:01:08.100 --> 00:01:09.420
of Python involved in it.


00:01:09.420 --> 00:01:10.780
And of course, this is a big team


00:01:10.780 --> 00:01:12.160
with lots of software and whatnot,


00:01:12.160 --> 00:01:13.960
but a couple of people did some digging.


00:01:13.960 --> 00:01:16.980
I'm linking to a quick write-up from Mike Driscoll.


00:01:16.980 --> 00:01:20.220
So the Python used to take the photo of the black hole.


00:01:20.220 --> 00:01:21.420
He's referencing a paper,


00:01:21.420 --> 00:01:24.500
which is a paper from the Event Horizon team.


00:01:24.500 --> 00:01:28.220
It includes references to lots of our favorites,


00:01:28.220 --> 00:01:30.580
like NumPy and SciPy, Pandas,


00:01:30.580 --> 00:01:33.500
Jupyter, Matplotlib, and Astropy.


00:01:33.500 --> 00:01:36.580
So yeah, lots of Python used in astronomy


00:01:36.580 --> 00:01:38.380
and in this black hole picture.


00:01:38.380 --> 00:01:39.200
- That's so cool.


00:01:39.200 --> 00:01:40.620
And the reason this is a big deal


00:01:40.620 --> 00:01:42.900
is this is literally the first picture


00:01:42.900 --> 00:01:44.180
of a black hole ever, right?


00:01:44.180 --> 00:01:46.060
- Yeah, one of the reasons why I linked this article


00:01:46.060 --> 00:01:50.060
as well is it links to a TED talk from a couple years ago,


00:01:50.060 --> 00:01:52.820
basically of how they took some of the concepts


00:01:52.820 --> 00:01:55.440
around how this picture was generated.


00:01:55.440 --> 00:01:58.700
Not the technical part, but just in high level concepts.


00:01:58.700 --> 00:02:00.500
And that there's a lot of people involved in it.


00:02:00.500 --> 00:02:02.220
And it's a pretty big deal.


00:02:02.220 --> 00:02:04.180
And I'm looking forward to every time


00:02:04.180 --> 00:02:07.140
anybody ever asks me for the rest of my life,


00:02:07.140 --> 00:02:08.940
so what can you do with Python?


00:02:08.940 --> 00:02:12.380
I can say, well, we helped with the entire picture


00:02:12.380 --> 00:02:15.740
of the black hole thing, so whatever you need it for,


00:02:15.740 --> 00:02:16.940
we can probably handle it.


00:02:16.940 --> 00:02:17.780
(laughing)


00:02:17.780 --> 00:02:18.660
- That's funny. - Yeah.


00:02:18.660 --> 00:02:19.500
- That's pretty awesome.


00:02:19.500 --> 00:02:21.340
I wonder if it was used in the detection


00:02:21.340 --> 00:02:24.440
of the gravitational waves for black holes as well.


00:02:24.440 --> 00:02:26.660
So maybe that'd be a nice way to round it out,


00:02:26.660 --> 00:02:28.540
but I honestly don't remember there.


00:02:28.540 --> 00:02:29.980
Cecil, are you into astronomy?


00:02:29.980 --> 00:02:31.620
- I am a little bit, to be honest with you.


00:02:31.620 --> 00:02:33.440
We actually have the Kennedy Space Center


00:02:33.440 --> 00:02:34.460
that's pretty close by.


00:02:34.460 --> 00:02:35.860
I'm in Florida for everybody that's listening


00:02:35.860 --> 00:02:36.780
that doesn't know.


00:02:36.780 --> 00:02:38.540
And so it's definitely something that we'd love


00:02:38.540 --> 00:02:39.620
to go over and do.


00:02:39.620 --> 00:02:41.340
There's like a little observatory in there,


00:02:41.340 --> 00:02:42.180
if you remember.


00:02:42.180 --> 00:02:44.620
So it's really kind of interesting to take the little one


00:02:44.620 --> 00:02:48.260
over and see how excited he gets over stars and planets


00:02:48.260 --> 00:02:49.300
and those types of things.


00:02:49.300 --> 00:02:50.140
- That's so cool.


00:02:50.140 --> 00:02:51.700
definitely been at Kennedy Space Center as well,


00:02:51.700 --> 00:02:53.060
taking my daughter there.


00:02:53.060 --> 00:02:54.260
And it's a great place.


00:02:54.260 --> 00:02:56.580
And it's so awesome that Python and all these tools,


00:02:56.580 --> 00:02:58.940
I mean, this is like the big hitters list


00:02:58.940 --> 00:03:01.180
of all the data science in Python


00:03:01.180 --> 00:03:03.060
used for this real cool discovery.


00:03:03.060 --> 00:03:03.900
- Yeah, this is amazing.


00:03:03.900 --> 00:03:04.780
You should definitely get,


00:03:04.780 --> 00:03:05.900
I can't remember her name at the moment,


00:03:05.900 --> 00:03:08.020
but the girl that they attributed


00:03:08.020 --> 00:03:09.580
to taking the pictures on your show.


00:03:09.580 --> 00:03:11.580
- Yes, Dr. Bowen, Bowman?


00:03:11.580 --> 00:03:13.180
Yeah, I almost have it right, Katie Bowman.


00:03:13.180 --> 00:03:14.020
- There you go, yeah.


00:03:14.020 --> 00:03:14.840
- That's right.


00:03:14.840 --> 00:03:16.740
And she, yeah, I've invited her to the show


00:03:16.740 --> 00:03:17.580
as to talk Python.


00:03:17.580 --> 00:03:19.800
It would be great to have her come and talk about this


00:03:19.800 --> 00:03:21.300
'cause it's so exciting.


00:03:21.300 --> 00:03:22.780
You know, what's really unfortunate is


00:03:22.780 --> 00:03:26.780
there was such a weird internet backlash


00:03:26.780 --> 00:03:29.200
against her in particular.


00:03:29.200 --> 00:03:30.880
There were so many trolls and other weird stuff.


00:03:30.880 --> 00:03:33.520
For example, I tried originally to reach out to her


00:03:33.520 --> 00:03:36.960
through Twitter and somebody had set up a fake account


00:03:36.960 --> 00:03:38.960
with pictures of her and video posts


00:03:38.960 --> 00:03:41.080
and all sorts of stuff to make it look real,


00:03:41.080 --> 00:03:43.600
but it got suspended 'cause apparently it was,


00:03:43.600 --> 00:03:45.080
I don't know what the deal is, you know,


00:03:45.080 --> 00:03:46.680
sorry that she had to go through that,


00:03:46.680 --> 00:03:48.300
but it's awesome, the stuff she's doing,


00:03:48.300 --> 00:03:49.140
which is really cool.


00:03:49.140 --> 00:03:51.540
- Yeah, that's really sad to see.


00:03:51.540 --> 00:03:53.500
We all have a very supportive community


00:03:53.500 --> 00:03:55.700
in developer relations in general,


00:03:55.700 --> 00:03:58.340
but you're always gonna have one or two folks


00:03:58.340 --> 00:04:01.540
that are gonna just try and be nasty for no reason.


00:04:01.540 --> 00:04:03.620
I think what she's done was totally amazing,


00:04:03.620 --> 00:04:05.260
and I think she deserves all the credit


00:04:05.260 --> 00:04:06.080
that she gets for it.


00:04:06.080 --> 00:04:06.920
- Absolutely.


00:04:06.920 --> 00:04:11.580
The problem is you take 1% of 1% of 1% of people


00:04:11.580 --> 00:04:12.900
who are absolute jerks,


00:04:12.900 --> 00:04:14.220
and then you put them on the internet


00:04:14.220 --> 00:04:16.260
where they can reach out to you all the time.


00:04:16.260 --> 00:04:18.020
It feels like there's way more jerks


00:04:18.020 --> 00:04:18.860
than there actually are,


00:04:18.860 --> 00:04:19.820
Yeah, I still got to deal with it.


00:04:19.820 --> 00:04:20.660
It's a bummer.


00:04:20.660 --> 00:04:21.480
- Definitely.


00:04:21.480 --> 00:04:22.320
- Yeah, cool.


00:04:22.320 --> 00:04:25.180
So Cecil, something I'm super excited about


00:04:25.180 --> 00:04:28.340
is WebAssembly and the possibility to bring


00:04:28.340 --> 00:04:33.100
various desktop or native code to browsers, right?


00:04:33.100 --> 00:04:34.020
So you don't have to just go,


00:04:34.020 --> 00:04:36.160
well, does it compile to JavaScript and run in JavaScript?


00:04:36.160 --> 00:04:38.040
Like WebAssembly means you don't have to, right?


00:04:38.040 --> 00:04:38.880
- Yeah, exactly.


00:04:38.880 --> 00:04:40.980
So just for everyone that might be listening,


00:04:40.980 --> 00:04:43.300
so WebAssembly essentially is this new standard


00:04:43.300 --> 00:04:45.980
that's in most modern browsers today.


00:04:45.980 --> 00:04:48.940
And essentially it allows you to target


00:04:48.940 --> 00:04:50.280
somewhat of a virtual machine, right?


00:04:50.280 --> 00:04:52.300
But essentially it's running in the browser.


00:04:52.300 --> 00:04:55.860
And so if whatever your language of choice happens to be


00:04:55.860 --> 00:04:57.420
can compile down into WebAssembly,


00:04:57.420 --> 00:04:59.020
then you can run it in the browser.


00:04:59.020 --> 00:05:01.140
What I actually ran into when I was on Reddit


00:05:01.140 --> 00:05:03.040
was this thing called Wasimer.


00:05:03.040 --> 00:05:05.180
And what this is, is a project that allow you


00:05:05.180 --> 00:05:08.220
to take that WebAssembly output, right?


00:05:08.220 --> 00:05:10.260
And run it in a Python application,


00:05:10.260 --> 00:05:11.260
which is kind of interesting.


00:05:11.260 --> 00:05:12.440
- Yeah, that's like the opposite


00:05:12.440 --> 00:05:13.780
of what I expected actually.


00:05:13.780 --> 00:05:14.780
- Right, it's actually pretty interesting.


00:05:14.780 --> 00:05:17.980
So this is not Python running on WebAssembly in the browser,


00:05:17.980 --> 00:05:20.580
although I'm pretty sure there's a few products that can do that.


00:05:20.580 --> 00:05:23.480
This is Python taking the WebAssembly output,


00:05:23.480 --> 00:05:26.240
the .wasm file, W-A-S-M file,


00:05:26.240 --> 00:05:29.240
and running it in your Python application, which is interesting.


00:05:29.240 --> 00:05:32.740
So if you think about, again, WebAssembly is,


00:05:32.740 --> 00:05:35.620
you know, allows us to run these different languages in the browser.


00:05:35.620 --> 00:05:38.620
So if we have these different languages targeting WebAssembly,


00:05:38.620 --> 00:05:43.280
and then we have a Python module that allows us to run that executable,


00:05:43.280 --> 00:05:45.680
Essentially, we could run any language on Python, right?


00:05:45.680 --> 00:05:47.680
- Yeah. - Or at least we'll have that ability


00:05:47.680 --> 00:05:50.180
to interoperate between all these things,


00:05:50.180 --> 00:05:53.340
just using WebAssembly as that common language, I guess,


00:05:53.340 --> 00:05:54.840
that we're all speaking. - That's so cool.


00:05:54.840 --> 00:05:59.080
So what we have in Python now is you can compile stuff to C


00:05:59.080 --> 00:06:01.620
and then use the C extensions and bring it in and run it.


00:06:01.620 --> 00:06:04.480
But this means anything that compiles to WebAssembly


00:06:04.480 --> 00:06:07.620
can now execute sort of natively in Python,


00:06:07.620 --> 00:06:09.840
regardless of whether there's decent integration


00:06:09.840 --> 00:06:10.880
between those two languages.


00:06:10.880 --> 00:06:12.080
- Yeah, I think that's really interesting, right?


00:06:12.080 --> 00:06:15.200
And so this is like the essence of cross-platform


00:06:15.200 --> 00:06:16.160
software development, right?


00:06:16.160 --> 00:06:17.000
Like when you think about it.


00:06:17.000 --> 00:06:18.800
- You know what I thought about when you said this is like,


00:06:18.800 --> 00:06:20.880
I was thinking like, oh, this is kind of like Node.


00:06:20.880 --> 00:06:23.400
I can take stuff that used to be on the web,


00:06:23.400 --> 00:06:26.040
but now I can run it like locally,


00:06:26.040 --> 00:06:27.480
but running it instead of like JavaScript,


00:06:27.480 --> 00:06:28.840
I run it like Python,


00:06:28.840 --> 00:06:30.760
but it takes anything that kind of was on the web,


00:06:30.760 --> 00:06:31.600
which is pretty wild.


00:06:31.600 --> 00:06:32.480
- Exactly.


00:06:32.480 --> 00:06:33.640
So the folks that are really behind


00:06:33.640 --> 00:06:36.440
this WebAssembly movement was actually Mozilla.


00:06:36.440 --> 00:06:38.280
And so they already have some implementations


00:06:38.280 --> 00:06:39.880
of their Rust programming language


00:06:39.880 --> 00:06:41.280
that targets WebAssembly.


00:06:41.280 --> 00:06:42.920
So I could write Rust that targets,


00:06:42.920 --> 00:06:44.720
now you know that, that builds down to that,


00:06:44.720 --> 00:06:47.420
this .wasm file and then run it in my browser.


00:06:47.420 --> 00:06:49.400
So now you imagine I could write something in Rust


00:06:49.400 --> 00:06:50.600
or C or something like that,


00:06:50.600 --> 00:06:52.200
that targets this WebAssembly file


00:06:52.200 --> 00:06:53.560
and I could just run it in Python, right?


00:06:53.560 --> 00:06:55.720
So, you know, if there so happens to be something


00:06:55.720 --> 00:06:57.400
that's missing or a module that I want to use,


00:06:57.400 --> 00:06:58.480
like I could totally just bring it


00:06:58.480 --> 00:07:00.160
into my Python application and just use it.


00:07:00.160 --> 00:07:01.920
- Ooh. - I'm pretty excited about this.


00:07:01.920 --> 00:07:05.840
- Thinking I can use some of the awesome Python testing tools


00:07:05.840 --> 00:07:07.760
to test my WebAssembly projects then.


00:07:07.760 --> 00:07:08.600
- Yeah, probably too.


00:07:08.600 --> 00:07:10.000
That'd be pretty interesting to try out.


00:07:10.000 --> 00:07:12.520
I ran this a little bit yesterday just to try it out


00:07:12.520 --> 00:07:13.720
and it actually works pretty well.


00:07:13.720 --> 00:07:15.160
And so now as the WebAssembly community


00:07:15.160 --> 00:07:16.920
just starts to grow, you can imagine


00:07:16.920 --> 00:07:19.000
as these different runtimes and languages


00:07:19.000 --> 00:07:20.840
wanna start a target WebAssembly,


00:07:20.840 --> 00:07:22.480
you know, that just kind of opens up the world


00:07:22.480 --> 00:07:23.920
to everybody else, right?


00:07:23.920 --> 00:07:26.240
'Cause now I can just pull those into my Python application


00:07:26.240 --> 00:07:27.060
and just run them.


00:07:27.060 --> 00:07:28.360
- I love it, this is a super cool find.


00:07:28.360 --> 00:07:30.920
Yeah, I mean, I don't know how much of the,


00:07:30.920 --> 00:07:32.960
is it this now, but I can see a future


00:07:32.960 --> 00:07:35.640
where there will be stuff that's like WebAssembly only.


00:07:35.640 --> 00:07:37.440
You know, once the adoption is greater,


00:07:37.440 --> 00:07:39.400
you're like, oh, that's only available in WebAssembly.


00:07:39.400 --> 00:07:41.120
Like, well, now it's also available in Python.


00:07:41.120 --> 00:07:41.560
I love it.


00:07:41.560 --> 00:07:43.520
And Brian, I think you totally could, right?


00:07:43.520 --> 00:07:45.880
There's an example here that's a Rust function that


00:07:45.880 --> 00:07:48.760
takes two numbers and returns the values and things like that.


00:07:48.760 --> 00:07:50.680
And then the Python example of calling it.


00:07:50.680 --> 00:07:53.000
So yeah, you could wrap that up in pytest, I think.


00:07:53.000 --> 00:07:53.680
Pretty sweet.


00:07:53.680 --> 00:07:55.760
Yeah, Cecil, that's a really, really cool one.


00:07:55.760 --> 00:07:59.200
The next one I want to talk about is called cooked input.


00:07:59.200 --> 00:08:02.280
And this one is a really cool little project.


00:08:02.280 --> 00:08:04.080
Do you remember Bullet, Brian?


00:08:04.080 --> 00:08:04.580
Yeah.


00:08:04.580 --> 00:08:06.420
Cecil, I don't know if you caught this one,


00:08:06.420 --> 00:08:09.160
but Bullet is this library that lets you basically


00:08:09.160 --> 00:08:13.840
create dropdown combo boxes in the terminal


00:08:13.840 --> 00:08:15.280
with like arrow control.


00:08:15.280 --> 00:08:17.760
So you can like, and scroll bars and stuff.


00:08:17.760 --> 00:08:19.800
So you can say, I would like to get the,


00:08:19.800 --> 00:08:22.240
ask the user for this, and here's the five options.


00:08:22.240 --> 00:08:24.220
And then the five options is like a dropdown


00:08:24.220 --> 00:08:26.360
with like the things, and you can like arrow through it


00:08:26.360 --> 00:08:27.180
and stuff like that.


00:08:27.180 --> 00:08:28.840
And also has some features to say,


00:08:28.840 --> 00:08:31.060
I want a number from you, like with some limitation.


00:08:31.060 --> 00:08:34.440
So cooked input is like that latter half to the extreme.


00:08:34.440 --> 00:08:36.240
So you can do all sorts of cool stuff.


00:08:36.240 --> 00:08:39.000
And the name comes from the idea of like Python 2,


00:08:39.000 --> 00:08:41.760
the way you got input from the user was raw_input.


00:08:41.760 --> 00:08:44.560
So validated input is cooked input, not raw input.


00:08:44.560 --> 00:08:45.520
Yeah, that kind of thing.


00:08:45.520 --> 00:08:46.960
- Oh, I like that.


00:08:46.960 --> 00:08:47.800
Nice, nice.


00:08:47.800 --> 00:08:48.640
- Yeah, it's funny, right?


00:08:48.640 --> 00:08:51.680
So the idea is you can ask for all sorts of stuff


00:08:51.680 --> 00:08:55.940
and it has this cleaning and this converting option


00:08:55.940 --> 00:08:57.800
and then this validation option.


00:08:57.800 --> 00:09:00.000
So I could go and say, I'd like to say,


00:09:00.000 --> 00:09:02.080
go to the user and get a string called,


00:09:02.080 --> 00:09:04.160
I asked the prompt is, what is your name?


00:09:04.160 --> 00:09:05.720
And of course you could do that with input,


00:09:05.720 --> 00:09:07.160
but here you can specify, like,


00:09:07.160 --> 00:09:09.760
I would like whatever they type to be transformed


00:09:09.760 --> 00:09:10.780
to cap words.


00:09:10.780 --> 00:09:13.200
So like if you type your name, all lowercase,


00:09:13.200 --> 00:09:15.040
or like it'll put just first,


00:09:15.040 --> 00:09:16.480
capitalized first letters and everything else


00:09:16.480 --> 00:09:17.800
is lowercase.


00:09:17.800 --> 00:09:20.320
Or you can say like, I would like to get an integer.


00:09:20.320 --> 00:09:21.140
How old are you?


00:09:21.140 --> 00:09:22.160
And the minimum is a one.


00:09:22.160 --> 00:09:23.920
You know, it just keeps asking the question


00:09:23.920 --> 00:09:26.560
and tells you what's wrong until it gives you the answer.


00:09:26.560 --> 00:09:29.960
So it's a really nice way to get input from the user


00:09:29.960 --> 00:09:32.040
on the terminal that's like pre-validated.


00:09:32.040 --> 00:09:32.880
- That's pretty interesting.


00:09:32.880 --> 00:09:35.840
So let's say, could I do something like,


00:09:35.840 --> 00:09:37.280
I don't want to say a very bad word here,


00:09:37.280 --> 00:09:40.340
use regex and do something like,


00:09:40.340 --> 00:09:42.660
get like my date formatted a certain way


00:09:42.660 --> 00:09:44.360
or four numbers inputted a certain way.


00:09:44.360 --> 00:09:46.200
- Yeah, it has all these different validators


00:09:46.200 --> 00:09:48.080
and some of the validators have to do with dates


00:09:48.080 --> 00:09:49.080
and other types of things.


00:09:49.080 --> 00:09:51.080
So like, give me an email address,


00:09:51.080 --> 00:09:53.520
give me a date and you know, give me,


00:09:53.520 --> 00:09:56.560
you can give an example of like the year, month,


00:09:56.560 --> 00:09:59.080
day or whatever and it won't let the user go on


00:09:59.080 --> 00:10:00.200
until they answer it correctly.


00:10:00.200 --> 00:10:01.040
- That's pretty cool.


00:10:01.040 --> 00:10:01.860
- Pretty nice, Brian, what do you think?


00:10:01.860 --> 00:10:02.700
You like it?


00:10:02.700 --> 00:10:03.520
- You're bringing a bullet.


00:10:03.520 --> 00:10:04.440
Is it a reason?


00:10:04.440 --> 00:10:07.080
Is it just a similar project?


00:10:07.080 --> 00:10:11.400
- I bring it up because it's another utility or library


00:10:11.400 --> 00:10:14.100
that takes just get standard input


00:10:14.100 --> 00:10:16.200
from the user on the terminal and makes it a lot better.


00:10:16.200 --> 00:10:17.040
- Yeah, okay.


00:10:17.040 --> 00:10:19.580
- Right, it's kind of like, not exactly a competitor,


00:10:19.580 --> 00:10:22.280
but a similar but different take on that idea.


00:10:22.280 --> 00:10:23.840
- Probably can use them together,


00:10:23.840 --> 00:10:26.880
like if you wanted to do these free form entries,


00:10:26.880 --> 00:10:27.720
get it through--


00:10:27.720 --> 00:10:29.400
- Yeah, and then drop down, yeah.


00:10:29.400 --> 00:10:30.840
I wouldn't see why you couldn't do that.


00:10:30.840 --> 00:10:33.200
This also sort of came inspired by Bullet


00:10:33.200 --> 00:10:35.280
because our listeners are awesome.


00:10:35.280 --> 00:10:37.680
Anytime we mention something that we thought was like,


00:10:37.680 --> 00:10:39.720
oh, here's this new unique thing we've never heard of,


00:10:39.720 --> 00:10:41.560
they're like, and here's five other amazing ones


00:10:41.560 --> 00:10:43.480
you also haven't heard of and talked about yet, right?


00:10:43.480 --> 00:10:44.960
- Yeah. - So pretty cool.


00:10:44.960 --> 00:10:46.240
All right, before we get to the next one,


00:10:46.240 --> 00:10:48.600
let me tell you all about DigitalOcean.


00:10:48.600 --> 00:10:51.220
So DigitalOcean run our infrastructure,


00:10:51.220 --> 00:10:53.600
they're really great, super happy with them.


00:10:53.600 --> 00:10:55.120
And one of the things they've recently done


00:10:55.120 --> 00:10:57.920
is launch their DigitalOcean Marketplace, which is cool.


00:10:57.920 --> 00:10:59.560
So you just go to the marketplace and you say,


00:10:59.560 --> 00:11:02.720
I'd like a pre-configured Linux machine


00:11:02.720 --> 00:11:05.000
that's set up to run Django properly,


00:11:05.000 --> 00:11:07.960
like with micro-whiskey and g-unicorn and all that.


00:11:07.960 --> 00:11:09.320
Or I want a MongoDB server,


00:11:09.320 --> 00:11:10.720
or I want a ghost server, whatever,


00:11:10.720 --> 00:11:12.000
and you just say I want one of those


00:11:12.000 --> 00:11:14.480
and bam, it just creates the whole virtual machine


00:11:14.480 --> 00:11:16.960
droplet ready to go, pre-configured.


00:11:16.960 --> 00:11:19.320
So they've got like GitLab Enterprise,


00:11:19.320 --> 00:11:21.280
Nginx, Postgres, Certbot,


00:11:21.280 --> 00:11:23.120
all that kind of stuff that you might need.


00:11:23.120 --> 00:11:25.200
So quite cool, which is one of the things


00:11:25.200 --> 00:11:26.360
you can get at DigitalOcean


00:11:26.360 --> 00:11:28.320
to get started more easily and quicker.


00:11:28.320 --> 00:11:31.160
So check them out at pythonbytes.fm/digitalocean.


00:11:31.160 --> 00:11:33.320
get a $100 credit for new users.


00:11:33.320 --> 00:11:35.760
Brian, you're starting to be a fan of PyCharm these days,


00:11:35.760 --> 00:11:36.260
right?


00:11:36.260 --> 00:11:38.560
I'm slowly, slowly wearing off on you.


00:11:38.560 --> 00:11:39.140
Is that right?


00:11:39.140 --> 00:11:39.640
Oh, no.


00:11:39.640 --> 00:11:40.920
I've been using it for a while.


00:11:40.920 --> 00:11:43.740
But I use it with VI mode, of course,


00:11:43.740 --> 00:11:46.480
because I can't unlearn Vim.


00:11:46.480 --> 00:11:49.040
It's just built into my head now.


00:11:49.040 --> 00:11:50.760
So one of the things I've been trying to do


00:11:50.760 --> 00:11:55.000
is use more Jupyter Notebooks for various presentations


00:11:55.000 --> 00:11:58.160
and tutorials and stuff, and just playing with stuff,


00:11:58.160 --> 00:12:00.120
especially with big data sets.


00:12:00.120 --> 00:12:02.700
But it bugged me that maybe there's a way to use VI


00:12:02.700 --> 00:12:06.600
within a web browser, but I don't know how to do it.


00:12:06.600 --> 00:12:08.860
But I can do it within PyCharm.


00:12:08.860 --> 00:12:11.720
And so the neat thing that I'm announcing right now,


00:12:11.720 --> 00:12:13.480
I guess I'm not really announcing it,


00:12:13.480 --> 00:12:14.920
I just wanna highlight it,


00:12:14.920 --> 00:12:16.720
is that JetBrains and PyCharm,


00:12:16.720 --> 00:12:19.520
they have announced that they're working


00:12:19.520 --> 00:12:23.080
with the Anaconda group to get more support


00:12:23.080 --> 00:12:25.380
for things like conda environments


00:12:25.380 --> 00:12:29.280
and notebooks into PyCharm.


00:12:29.280 --> 00:12:33.200
And I'm using the 2019.1.1 recently,


00:12:33.200 --> 00:12:37.360
the most recent build, and the pro version, of course,


00:12:37.360 --> 00:12:39.800
but it makes it so that I can just edit my notebooks


00:12:39.800 --> 00:12:43.040
within PyCharm with the Vim emulation,


00:12:43.040 --> 00:12:46.520
all my normal things that I have hooked up to PyCharm,


00:12:46.520 --> 00:12:48.240
and it just works great, I love it.


00:12:48.240 --> 00:12:51.000
- That's super cool, and they have a special distribution


00:12:51.000 --> 00:12:54.000
for PyCharm for Anaconda, which has even better support.


00:12:54.000 --> 00:12:56.520
Now, I don't do much with Anaconda, I'm a fan of it,


00:12:56.520 --> 00:12:58.240
but I just don't have a use case for it,


00:12:58.240 --> 00:13:00.100
So I don't know a whole lot about it,


00:13:00.100 --> 00:13:00.940
but that sounds pretty cool.


00:13:00.940 --> 00:13:02.440
- I don't use it myself either,


00:13:02.440 --> 00:13:03.720
but I know that a lot of people,


00:13:03.720 --> 00:13:06.160
especially if they're behind firewalls and stuff,


00:13:06.160 --> 00:13:09.020
it's just an easier install for other people


00:13:09.020 --> 00:13:09.860
to put that on there.


00:13:09.860 --> 00:13:10.860
- That's pretty cool.


00:13:10.860 --> 00:13:13.220
Cecil, you ever use PyCharm or being at Microsoft,


00:13:13.220 --> 00:13:15.900
are you mostly on the Visual Studio Code side


00:13:15.900 --> 00:13:16.780
of the world these days?


00:13:16.780 --> 00:13:19.460
- To be honest with you, I'm still a big PyCharm user.


00:13:19.460 --> 00:13:21.900
Like I was using PyCharm prior to coming to Microsoft,


00:13:21.900 --> 00:13:23.100
I still use it a little bit.


00:13:23.100 --> 00:13:26.980
I do use our Python extension for Visual Studio Code,


00:13:26.980 --> 00:13:27.800
depending.


00:13:27.800 --> 00:13:29.160
- It's getting nicer and nicer, yeah.


00:13:29.160 --> 00:13:30.280
- Yeah, it's getting better and better.


00:13:30.280 --> 00:13:32.160
And people love it obviously 'cause it's free


00:13:32.160 --> 00:13:34.800
and it's open source and you can contribute back to it.


00:13:34.800 --> 00:13:37.880
But honestly, I'm still a PyCharm guy.


00:13:37.880 --> 00:13:40.960
I think when you think about IDEs versus editors,


00:13:40.960 --> 00:13:42.800
there's a different use case for those, right?


00:13:42.800 --> 00:13:45.960
And there's a group of folks that just need an editor,


00:13:45.960 --> 00:13:50.120
making really quick changes or just kind of going through,


00:13:50.120 --> 00:13:51.640
I guess your run of the mill,


00:13:51.640 --> 00:13:53.960
edits, builds, view type lifecycle.


00:13:53.960 --> 00:13:55.980
But I think when it comes down to debugging


00:13:55.980 --> 00:13:57.700
and really getting deep introspection


00:13:57.700 --> 00:13:59.140
into what's happening into your application,


00:13:59.140 --> 00:14:02.740
that you honestly can't beat the power of an IDE.


00:14:02.740 --> 00:14:03.580
- Yeah, I'm with you.


00:14:03.580 --> 00:14:07.140
- I'm sorry, Brian, I know you're a VI guy, I apologize.


00:14:07.140 --> 00:14:08.820
- I'm 100% in PyCharm now.


00:14:08.820 --> 00:14:10.300
- You just have it set up in VI mode.


00:14:10.300 --> 00:14:11.460
Yeah, I tried that for a minute,


00:14:11.460 --> 00:14:13.460
then I was like, whoa, somebody broke my PyCharm.


00:14:13.460 --> 00:14:15.820
I gotta disable this extension here.


00:14:15.820 --> 00:14:18.340
That was when we were playing with AceJump,


00:14:18.340 --> 00:14:19.160
which is really cool,


00:14:19.160 --> 00:14:22.260
but that's a different topic for a different time.


00:14:22.260 --> 00:14:24.060
Yeah, so over at Azure,


00:14:24.060 --> 00:14:27.180
You guys have some interesting stuff going on there.


00:14:27.180 --> 00:14:29.180
And one of the big trends,


00:14:29.180 --> 00:14:31.900
I don't know if it's really where the world is,


00:14:31.900 --> 00:14:34.980
but it's certainly where a lot of the hype and excitement is,


00:14:34.980 --> 00:14:37.740
is around serverless code, right?


00:14:37.740 --> 00:14:38.580
- Yeah, definitely.


00:14:38.580 --> 00:14:41.100
So serverless is where we hide your servers from you.


00:14:41.100 --> 00:14:43.740
I'm like, so it's essentially like,


00:14:43.740 --> 00:14:46.080
we're just taking the burden away from you


00:14:46.080 --> 00:14:48.440
in terms of like capacity planning, right?


00:14:48.440 --> 00:14:51.040
So that means that the servers are still there,


00:14:51.040 --> 00:14:53.340
but essentially all you need to do as a company,


00:14:53.340 --> 00:14:55.960
as a developer is just, you just need to give us your code


00:14:55.960 --> 00:14:58.420
or upload it to GitHub or what have you.


00:14:58.420 --> 00:15:01.620
And then we'll take care of deploying it, scaling it


00:15:01.620 --> 00:15:02.860
and doing all those types of things.


00:15:02.860 --> 00:15:04.700
So again, like you'd have to worry about,


00:15:04.700 --> 00:15:06.260
this is how many virtual machines I need


00:15:06.260 --> 00:15:07.500
or this is how much RAM I need


00:15:07.500 --> 00:15:10.020
and worry about backups and some of those types of things.


00:15:10.020 --> 00:15:11.180
But along with serverless,


00:15:11.180 --> 00:15:13.260
like you start to see like some interesting workloads


00:15:13.260 --> 00:15:14.860
that people want to build with them, right?


00:15:14.860 --> 00:15:18.020
So a lot of folks use it for APIs


00:15:18.020 --> 00:15:20.680
or the mobile backends to your web applications.


00:15:20.680 --> 00:15:23.180
Actually, I found a really interesting article yesterday


00:15:23.180 --> 00:15:28.240
And this is on dev.2, which is a really cool online community for developers of,


00:15:28.240 --> 00:15:32.540
you know, this guy that created this serverless solution using Python, and it


00:15:32.540 --> 00:15:35.180
connected it to a Raspberry Pi to get like telemetry data.


00:15:35.180 --> 00:15:39.680
And so he connected the Raspberry Pi to this other offer we have called Azure


00:15:39.680 --> 00:15:44.420
IoT hubs, and that allows you to do two way communication to your IoT device.


00:15:44.420 --> 00:15:49.120
And so we connected to that and then we send information over into Azure functions.


00:15:49.440 --> 00:15:52.540
And then now he has like this real time chart of telemetry


00:15:52.540 --> 00:15:54.380
showing up in web browser, which I thought was pretty cool.


00:15:54.380 --> 00:15:56.220
So the pieces that he has connected to this


00:15:56.220 --> 00:15:57.820
are pretty straightforward, right?


00:15:57.820 --> 00:16:00.460
So he uses, again, he uses Python,


00:16:00.460 --> 00:16:03.680
he uses D3 for actually generating the charts.


00:16:03.680 --> 00:16:05.420
- Oh, nice. Yeah, D3 is beautiful, yeah.


00:16:05.420 --> 00:16:07.180
- Yeah, and he has this thing called C3,


00:16:07.180 --> 00:16:08.860
which I never heard about before.


00:16:08.860 --> 00:16:13.100
So C3 sits on top of D3 and makes D3 easier


00:16:13.100 --> 00:16:14.820
specifically for creating charts.


00:16:14.820 --> 00:16:15.660
- Okay, nice.


00:16:15.660 --> 00:16:17.060
- If anybody's ever used D3,


00:16:17.060 --> 00:16:20.020
you know it's not like the easiest learning curve thing.


00:16:20.020 --> 00:16:21.420
You can do more than just create charts,


00:16:21.420 --> 00:16:23.180
but there's a charting library on top of that,


00:16:23.180 --> 00:16:24.740
which I think is actually pretty cool.


00:16:24.740 --> 00:16:26.320
But again, this article is pretty interesting.


00:16:26.320 --> 00:16:29.020
Again, it uses Visual Studio Code and the Python extension.


00:16:29.020 --> 00:16:31.660
It uses functions, serverless functions,


00:16:31.660 --> 00:16:33.980
and it shows you how you can take telemetry


00:16:33.980 --> 00:16:37.140
from an IoT device, specifically a Raspberry Pi,


00:16:37.140 --> 00:16:38.140
push it up into the cloud,


00:16:38.140 --> 00:16:40.120
and now you're getting this real-time telemetry.


00:16:40.120 --> 00:16:41.500
So if you think about it, I don't know,


00:16:41.500 --> 00:16:43.860
maybe you have a garden in your yard


00:16:43.860 --> 00:16:46.220
and you wanna have moisture sensor


00:16:46.220 --> 00:16:48.460
or even a heat sensor or anything like that.


00:16:48.460 --> 00:16:50.780
Like you could start to get like interesting telemetry


00:16:50.780 --> 00:16:53.060
from your house or from your different devices


00:16:53.060 --> 00:16:55.300
and then push it up into a real-time chart using Python.


00:16:55.300 --> 00:16:56.780
- That's a really cool use case


00:16:56.780 --> 00:16:58.540
and I like the way they lay it out.


00:16:58.540 --> 00:16:59.500
What's really interesting to me


00:16:59.500 --> 00:17:01.280
is the two-way communication.


00:17:01.280 --> 00:17:04.540
Like calling into your Raspberry Pi


00:17:04.540 --> 00:17:07.300
seems more interesting than it talking out


00:17:07.300 --> 00:17:08.580
or more impressive, I guess.


00:17:08.580 --> 00:17:09.540
- Yeah, so when you think about it,


00:17:09.540 --> 00:17:12.720
I mean, messaging is a hard thing to do sometimes,


00:17:12.720 --> 00:17:14.420
particularly when you're talking about a device


00:17:14.420 --> 00:17:18.020
that you don't necessarily have close by, right?


00:17:18.020 --> 00:17:20.740
And so definitely IoT Hub helps a lot with this.


00:17:20.740 --> 00:17:22.260
But I think for this particular use case


00:17:22.260 --> 00:17:23.180
is just using it one way,


00:17:23.180 --> 00:17:24.740
but you can go both ways if you needed to.


00:17:24.740 --> 00:17:25.980
- Yeah, that's pretty cool.


00:17:25.980 --> 00:17:26.820
I like it.


00:17:26.820 --> 00:17:29.300
So if anybody wants to create a cool IoT thing,


00:17:29.300 --> 00:17:32.900
here's a nice little write up with Python and Azure.


00:17:32.900 --> 00:17:33.740
- Yeah.


00:17:33.740 --> 00:17:36.060
- What would you create with IoT if you could?


00:17:36.060 --> 00:17:37.840
Like Brian and I talk about this every now and then.


00:17:37.840 --> 00:17:39.100
I always like, it's so cool,


00:17:39.100 --> 00:17:41.500
but I actually can't think of anything I wanna build


00:17:41.500 --> 00:17:43.060
that's not already out there.


00:17:43.060 --> 00:17:45.260
What would you build with some sort of IoT stuff


00:17:45.260 --> 00:17:47.060
if you had some time and energy?


00:17:47.060 --> 00:17:48.540
- I have two coworkers that actually built


00:17:48.540 --> 00:17:49.620
some interesting things.


00:17:49.620 --> 00:17:50.740
And I think I might copy them,


00:17:50.740 --> 00:17:53.100
so I'm gonna call them out a little bit.


00:17:53.100 --> 00:17:55.100
So one of my coworkers lives in Tampa,


00:17:55.100 --> 00:17:56.620
and so he's into barbecue,


00:17:56.620 --> 00:17:59.460
and he has a professional-grade barbecue grill


00:17:59.460 --> 00:18:00.900
in his backyard.


00:18:00.900 --> 00:18:03.100
- Okay. - He has multiples of them.


00:18:03.100 --> 00:18:05.460
So we went over to his house one day for barbecue,


00:18:05.460 --> 00:18:07.060
and I'm like, "Dude, what are all these wires


00:18:07.060 --> 00:18:08.900
"you have attached to this grill?"


00:18:08.900 --> 00:18:10.380
He has a sensor attached to the grill


00:18:10.380 --> 00:18:12.700
that's checking temperature and whatnot,


00:18:12.700 --> 00:18:18.460
And he had a raspberry pie, could you not, like hanging from the grill that was connected


00:18:18.460 --> 00:18:20.500
to his Wi-Fi in his house.


00:18:20.500 --> 00:18:24.820
And it was pushing telemetry to Grafana that was running on a server in his house.


00:18:24.820 --> 00:18:28.460
If folks on the letter listening don't know what Grafana is, Grafana is essentially like


00:18:28.460 --> 00:18:30.660
an open source dashboard.


00:18:30.660 --> 00:18:33.460
You know, you send it some information and it just generates a chart for you.


00:18:33.460 --> 00:18:37.380
So he has this Grafana chart that's like in his house.


00:18:37.380 --> 00:18:40.500
And so he could look and see, oh, well, this is what temperature the steak is.


00:18:40.500 --> 00:18:43.040
and this is what temperature like the sausages are.


00:18:43.040 --> 00:18:43.960
I thought it was super cool.


00:18:43.960 --> 00:18:45.000
- That's pretty awesome.


00:18:45.000 --> 00:18:47.040
Brian, have you come up with any IoT things yet?


00:18:47.040 --> 00:18:49.620
- Actually, I'm intrigued by this whole barbecue thing.


00:18:49.620 --> 00:18:50.840
And it sounds great to me.


00:18:50.840 --> 00:18:52.580
You could even have extra probes in there


00:18:52.580 --> 00:18:55.120
to just to probe your meat while it's cooking.


00:18:55.120 --> 00:18:57.380
- What's cool with the two-way communication now is that,


00:18:57.380 --> 00:18:58.880
so now he could look at it and be like,


00:18:58.880 --> 00:19:02.000
okay, this is hot enough, and then he could turn it down.


00:19:02.000 --> 00:19:04.040
'Cause again, you can do bi-directional communication


00:19:04.040 --> 00:19:04.880
with your device, right?


00:19:04.880 --> 00:19:07.080
So when you say it's getting too hot,


00:19:07.080 --> 00:19:08.460
maybe it's not hot enough.


00:19:08.460 --> 00:19:11.860
the IoT device again because it's connected to the temperature gauge,


00:19:11.860 --> 00:19:13.260
like he could adjust it,


00:19:13.260 --> 00:19:15.060
but he doesn't have to be right next to his grill.


00:19:15.060 --> 00:19:15.560
That's cool.


00:19:15.560 --> 00:19:18.760
Yeah, and you could do a feedback loop, a control loop, and have


00:19:18.760 --> 00:19:21.760
like an AI actually cook your food for you then.


00:19:21.760 --> 00:19:23.160
Yes, exactly.


00:19:23.160 --> 00:19:25.160
You could do like 10 good grillings


00:19:25.160 --> 00:19:27.860
and then just like feed it to like some ML and go,


00:19:27.860 --> 00:19:30.360
"Do more of that. That was good."


00:19:30.360 --> 00:19:31.560
I actually like that idea.


00:19:31.560 --> 00:19:32.760
So maybe that's my project now.


00:19:32.760 --> 00:19:34.260
I'm going to have ML cook food for me.


00:19:34.260 --> 00:19:34.960
That'll be awesome.


00:19:34.960 --> 00:19:36.660
That actually would be incredible.


00:19:36.660 --> 00:19:39.500
I would love to have some ML cooked barbecue with you.


00:19:39.500 --> 00:19:40.340
That'd be great.


00:19:40.340 --> 00:19:41.860
All right, the last one is not nearly as fun


00:19:41.860 --> 00:19:43.100
as machine learning cooked barbecue,


00:19:43.100 --> 00:19:44.220
but it's pretty useful.


00:19:44.220 --> 00:19:47.940
So in Python, the whole threading parallelism story


00:19:47.940 --> 00:19:49.700
is a little bit complicated, right?


00:19:49.700 --> 00:19:52.780
We've got threads, but they can only do IO bound stuff.


00:19:52.780 --> 00:19:54.200
They can't really do computational stuff


00:19:54.200 --> 00:19:55.380
'cause of the GIL.


00:19:55.380 --> 00:19:56.700
We've got async and await,


00:19:56.700 --> 00:19:59.820
and that's really even better for IO driven concurrency,


00:19:59.820 --> 00:20:02.660
but it also doesn't work with the computational stuff.


00:20:02.660 --> 00:20:04.660
So if you really wanna do computational concurrency,


00:20:04.660 --> 00:20:08.080
you have to use multiprocessing or C or something like that.


00:20:08.080 --> 00:20:08.920
Right?


00:20:08.920 --> 00:20:12.320
But the way you've exchanged data while those are running


00:20:12.320 --> 00:20:13.800
has been somewhat limited.


00:20:13.800 --> 00:20:15.960
Like certain structures can be shared


00:20:15.960 --> 00:20:18.900
and you wait for the response to come back


00:20:18.900 --> 00:20:20.960
from the thing you're running over there.


00:20:20.960 --> 00:20:23.600
So new in Python 3.8,


00:20:23.600 --> 00:20:26.580
there's a new set of modules


00:20:26.580 --> 00:20:29.720
called multiprocessing.sharedmemory.


00:20:29.720 --> 00:20:32.360
And the idea is you can create shared memory segments


00:20:32.360 --> 00:20:36.080
that are directly shared with all the multiprocessing


00:20:36.080 --> 00:20:38.680
subprocesses that are running in your parallel work.


00:20:38.680 --> 00:20:41.200
So if you're doing any multiprocessing, it's pretty cool.


00:20:41.200 --> 00:20:43.280
And a lot of it's fairly complicated.


00:20:43.280 --> 00:20:45.520
You're like reading and writing bytes directly,


00:20:45.520 --> 00:20:46.920
which sounds kind of gnarly,


00:20:46.920 --> 00:20:50.340
but there's also a shareable list, which is pretty cool.


00:20:50.340 --> 00:20:51.480
You can throw stuff on the list,


00:20:51.480 --> 00:20:52.520
you can pull stuff off the list,


00:20:52.520 --> 00:20:55.200
and it's shared just like straight shared memory


00:20:55.200 --> 00:20:57.240
across the various processes,


00:20:57.240 --> 00:20:58.640
which I thought was a pretty cool addition.


00:20:58.640 --> 00:21:01.600
- I'm wondering, so does it control access to who's writing?


00:21:01.600 --> 00:21:03.240
'Cause I'm guessing multiple people can't write to it


00:21:03.240 --> 00:21:04.200
at the same time.


00:21:04.200 --> 00:21:06.580
So I'm guessing there must be like some type of control


00:21:06.580 --> 00:21:08.520
that says this person's writing first


00:21:08.520 --> 00:21:10.120
and then this person's writing second kind of thing.


00:21:10.120 --> 00:21:11.880
- One would hope there's some serialized


00:21:11.880 --> 00:21:14.160
like shared critical section or something


00:21:14.160 --> 00:21:16.360
that doesn't let it like corrupt the shared memory.


00:21:16.360 --> 00:21:18.320
But yeah, it's still pretty.


00:21:18.320 --> 00:21:19.800
I haven't looked, but I would guess so.


00:21:19.800 --> 00:21:21.680
I didn't see anything in the documentation


00:21:21.680 --> 00:21:25.000
about explicitly programming for that.


00:21:25.000 --> 00:21:26.520
It was just like, you put something in the list,


00:21:26.520 --> 00:21:27.360
you get something out of the list.


00:21:27.360 --> 00:21:30.360
But I bet internally, it's probably down at the C level


00:21:30.360 --> 00:21:32.000
or something that's pretty careful about that.


00:21:32.000 --> 00:21:32.840
- Sure.


00:21:32.840 --> 00:21:33.960
At the very least, this is a building block


00:21:33.960 --> 00:21:35.960
that we can build things like that on top of.


00:21:35.960 --> 00:21:36.800
- It's pretty cool.


00:21:36.800 --> 00:21:39.680
And it's nice to see new stuff coming in the threading world


00:21:39.680 --> 00:21:41.360
or parallelism world on Python.


00:21:41.360 --> 00:21:43.680
So this is like I said, brand new in 3.8, so it's cool.


00:21:43.680 --> 00:21:44.520
- Yeah, nice.


00:21:44.520 --> 00:21:45.340
- Indeed.


00:21:45.340 --> 00:21:47.340
All right, well, guys, that's it for our main items,


00:21:47.340 --> 00:21:49.360
but there's always a few extra things


00:21:49.360 --> 00:21:50.320
at the end to talk about.


00:21:50.320 --> 00:21:52.560
So Brian, what do you got that you want to throw out there?


00:21:52.560 --> 00:21:54.400
- Well, I'm just totally gearing up


00:21:54.400 --> 00:21:56.400
and getting excited for PyCon.


00:21:56.400 --> 00:21:57.860
I just got my stickers ordered.


00:21:57.860 --> 00:22:02.860
So I'm going to have also bring in a bunch of copies of the Pytest book,


00:22:02.860 --> 00:22:04.260
try to sell some of those there.


00:22:04.260 --> 00:22:06.380
I only took like four last year and they sold out.


00:22:06.380 --> 00:22:07.580
So I'll bring more next time.


00:22:07.580 --> 00:22:09.380
>> Probably on your way to the booth, right?


00:22:09.380 --> 00:22:12.460
People mobbed you and got your book before you could even set them down?


00:22:12.460 --> 00:22:14.260
>> Yeah, I was going to bring a whole bunch, but


00:22:14.260 --> 00:22:16.860
it turns out that a whole bunch of books is heavy.


00:22:16.860 --> 00:22:18.460
So I'll bring some.


00:22:18.460 --> 00:22:19.260
>> That sounds good.


00:22:19.260 --> 00:22:22.100
>> Also, I've never done live interviews for Testing Code.


00:22:22.100 --> 00:22:24.540
I think it'd be fun to do some live interviews.


00:22:24.540 --> 00:22:25.780
You've done those before.


00:22:25.780 --> 00:22:29.500
So I'll pick your brain on how to do that best and get some of those set up.


00:22:29.500 --> 00:22:30.020
Absolutely.


00:22:30.020 --> 00:22:32.580
I'm super excited about some live recordings at PyCon.


00:22:32.580 --> 00:22:37.260
I'm sure you and I'll do some open session live Python bites, but there'll also be


00:22:37.260 --> 00:22:38.460
some other stuff happening as well.


00:22:38.460 --> 00:22:43.460
I actually just bought some two little cool desktop, Mike holders for exactly


00:22:43.460 --> 00:22:44.380
that to bring to PyCon.


00:22:44.380 --> 00:22:45.380
So we'll see how they work.


00:22:45.380 --> 00:22:45.740
Nice.


00:22:45.740 --> 00:22:46.420
How about you Cecil?


00:22:46.420 --> 00:22:47.340
In terms of sharing.


00:22:47.340 --> 00:22:51.620
So I actually found a workshop online that I thought was pretty cool.


00:22:51.620 --> 00:22:54.940
So, you know, everybody's always talking about machine learning and I want to get


00:22:54.940 --> 00:22:58.980
into it, but I don't know what exactly I could do with it.


00:22:58.980 --> 00:23:03.740
So I found this interesting Python workshop, and it's called Attendee Detector Workshop.


00:23:03.740 --> 00:23:08.260
So essentially, you go through this process of creating a Flask application, but essentially


00:23:08.260 --> 00:23:13.740
what you do is you upload a picture of, let's say, a group of people or an audience or the


00:23:13.740 --> 00:23:20.620
background or what have you, and using machine learning, it'll help you pick out the faces


00:23:20.620 --> 00:23:23.220
of the people that are in that picture that you put out.


00:23:23.220 --> 00:23:27.300
And then it'll tell you if they're smiling, if they're happy, if they're sad, or what


00:23:27.300 --> 00:23:28.300
have you.


00:23:28.300 --> 00:23:29.300
So I think it's pretty cool.


00:23:29.300 --> 00:23:32.860
So you can imagine, again, as a speaker, or maybe you go to a basketball game or something,


00:23:32.860 --> 00:23:36.100
you take a picture, and you can be like, "Hey, I don't really think these people are really


00:23:36.100 --> 00:23:39.020
interested as to what you're saying or what's going on here."


00:23:39.020 --> 00:23:42.180
Or, "Hey, somebody just scored some points.


00:23:42.180 --> 00:23:43.540
I'm really super excited about it."


00:23:43.540 --> 00:23:47.300
But I think it's a really interesting practical application of using machine learning, but


00:23:47.300 --> 00:23:50.060
also something that's very approachable, because I think it's something that we all could relate


00:23:50.060 --> 00:23:51.060
to.


00:23:51.060 --> 00:23:52.060
I think that's awesome.


00:23:52.060 --> 00:23:54.380
to get a camera and point it on your audience


00:23:54.380 --> 00:23:55.860
while you're doing a presentation


00:23:55.860 --> 00:23:57.540
and just have like a little meter of like


00:23:57.540 --> 00:24:00.260
audience engagement as like that only you see


00:24:00.260 --> 00:24:02.060
while you're presenting something unrelated to this.


00:24:02.060 --> 00:24:03.620
- And then it'll show you like the faces of the people


00:24:03.620 --> 00:24:04.500
that aren't paying attention.


00:24:04.500 --> 00:24:06.380
So you can like walk by them and like stare.


00:24:06.380 --> 00:24:08.940
(laughing)


00:24:08.940 --> 00:24:10.620
- You've been singled out by the AI.


00:24:10.620 --> 00:24:11.980
We have to talk.


00:24:11.980 --> 00:24:12.820
- Exactly.


00:24:12.820 --> 00:24:13.640
I thought that was pretty cool.


00:24:13.640 --> 00:24:15.420
So I put that on the extras.


00:24:15.420 --> 00:24:17.340
Another thing I wanted to talk about too.


00:24:17.340 --> 00:24:21.380
So I've actually downloaded your Talk Python mobile app.


00:24:21.380 --> 00:24:22.940
I have it on my phone, actually.


00:24:22.940 --> 00:24:23.780
- Nice.


00:24:23.780 --> 00:24:25.420
- So I took it with me when I was traveling last week.


00:24:25.420 --> 00:24:27.340
And I actually say, I actually pretty like it.


00:24:27.340 --> 00:24:29.180
I know we've been working on this probably for a while.


00:24:29.180 --> 00:24:32.620
We spoke about doing offline video content


00:24:32.620 --> 00:24:33.460
and whatnot for your show.


00:24:33.460 --> 00:24:35.220
So I'm really happy to see that this came up, man.


00:24:35.220 --> 00:24:36.060
This is super cool.


00:24:36.060 --> 00:24:36.880
- Yeah, thanks.


00:24:36.880 --> 00:24:38.180
I'm really happy the way it came out as well.


00:24:38.180 --> 00:24:39.700
And it's really fun.


00:24:39.700 --> 00:24:43.340
Even I am experiencing going through my courses differently.


00:24:43.340 --> 00:24:45.480
You might think, well, why would you do that?


00:24:45.480 --> 00:24:47.900
But I have other authors, I'm going through their content,


00:24:47.900 --> 00:24:48.740
they're going through mine, right?


00:24:48.740 --> 00:24:50.260
Like I'm kind of a student as well.


00:24:50.260 --> 00:24:51.100
And it's super fun.


00:24:51.100 --> 00:24:54.260
We almost have the iOS version out, just the Android currently.


00:24:54.260 --> 00:24:56.060
But yeah, it's super, super close.


00:24:56.060 --> 00:24:57.540
So that was a fun project.


00:24:57.540 --> 00:25:00.340
Let's see, I do have a couple other things I want to throw out as well.


00:25:00.340 --> 00:25:03.540
There's an interesting interview with Guido van Rossum


00:25:03.540 --> 00:25:06.380
on MIT's AI podcast.


00:25:06.380 --> 00:25:09.500
This was sent over by Tony Cappinelli.


00:25:09.500 --> 00:25:10.820
Thanks for sharing that with us.


00:25:10.820 --> 00:25:13.580
And this is just-- it's not really worth going into the whole thing,


00:25:13.580 --> 00:25:15.940
but it's a different look at his perspective,


00:25:15.940 --> 00:25:20.300
like his perspective on science fiction and on machine learning


00:25:20.300 --> 00:25:21.900
and on just all sorts of stuff.


00:25:21.900 --> 00:25:23.700
So if you've got an hour or something,


00:25:23.700 --> 00:25:25.540
you want to just catch up with Guido


00:25:25.540 --> 00:25:27.460
and sort of a historical look on what he did


00:25:27.460 --> 00:25:29.780
and his accomplishments, it's pretty cool.


00:25:29.780 --> 00:25:32.460
Another one, that's in the whole Microsoft realm,


00:25:32.460 --> 00:25:36.500
is Visual Studio IntelliCode for VS Code,


00:25:36.500 --> 00:25:37.580
which is pretty awesome.


00:25:37.580 --> 00:25:40.780
So we talked about some other projects that are like this,


00:25:40.780 --> 00:25:43.340
but this is, I think, a more legitimate one.


00:25:43.340 --> 00:25:46.500
So IntelliCode is like autocomplete, IntelliSense,


00:25:46.500 --> 00:25:50.620
but actually is based on the usage of your code.


00:25:50.620 --> 00:25:52.440
So this works for Python among other things,


00:25:52.440 --> 00:25:55.660
and it goes through like say popular libraries on GitHub.


00:25:55.660 --> 00:25:57.320
So when you go to your,


00:25:57.320 --> 00:25:59.300
if you install this extension, say VS Code,


00:25:59.300 --> 00:26:02.780
and you go to, you hit, you know, regex.


00:26:02.780 --> 00:26:04.640
The stuff that shows up in the list first


00:26:04.640 --> 00:26:05.780
is not just alphabetical,


00:26:05.780 --> 00:26:09.620
but is actually the most commonly used things


00:26:09.620 --> 00:26:14.020
for like say popular libraries that use regex


00:26:14.020 --> 00:26:14.860
and stuff like that.


00:26:14.860 --> 00:26:17.420
It really kind of shows you, and it's contextual as well.


00:26:17.420 --> 00:26:19.380
So it's pretty cool that people can check that out


00:26:19.380 --> 00:26:20.380
and install that.


00:26:20.380 --> 00:26:23.580
And then finally, my buddy Dan Koster sent me this yesterday.


00:26:23.580 --> 00:26:24.540
It just made me laugh.


00:26:24.540 --> 00:26:27.780
Somebody had gotten-- was running a Craigslist thing


00:26:27.780 --> 00:26:28.980
and gotten a message.


00:26:28.980 --> 00:26:32.380
Hey, here's my proposal or something to your Craigslist


00:26:32.380 --> 00:26:32.880
ad.


00:26:32.880 --> 00:26:36.020
Click here to sign up and fill it out or whatever.


00:26:36.020 --> 00:26:37.680
And it turned out to be a complete scam.


00:26:37.680 --> 00:26:40.900
It was like craigslist.somerandomdomain.com.


00:26:40.900 --> 00:26:43.340
And he's like, all right, well, I could just ignore this.


00:26:43.340 --> 00:26:45.860
or I could write a program to destroy this guy.


00:26:45.860 --> 00:26:48.780
And so it's a video of him going through,


00:26:48.780 --> 00:26:51.340
figuring out where the, like basically what it does


00:26:51.340 --> 00:26:53.220
is it shows you a fake Craigslist login


00:26:53.220 --> 00:26:54.780
to steal your credentials.


00:26:54.780 --> 00:26:58.220
So he used requests and some other APIs


00:26:58.220 --> 00:27:01.140
to actually go and just overflow the guy's database,


00:27:01.140 --> 00:27:04.260
you know, just generate like a hundred million fake logins


00:27:04.260 --> 00:27:06.060
and just blast him into his database.


00:27:06.060 --> 00:27:07.820
So that's enjoyable.


00:27:07.820 --> 00:27:10.620
Anyone who feels like a little bit of schadenfreude,


00:27:10.620 --> 00:27:12.220
you can watch that, it's pretty good.


00:27:12.220 --> 00:27:13.420
- Nice, I love that.


00:27:13.420 --> 00:27:14.780
- Yeah, it's pretty short and sweet.


00:27:14.780 --> 00:27:17.780
It is Python too, so it's a bit of a knock on it,


00:27:17.780 --> 00:27:19.340
but still, it's all good and funny.


00:27:19.340 --> 00:27:21.740
Speaking of funny, Brian, what do you got for us, man?


00:27:21.740 --> 00:27:23.860
- Okay, well I used our PyJoke,


00:27:23.860 --> 00:27:26.700
which I probably used it too much, but whatever.


00:27:26.700 --> 00:27:27.940
- You can't use PyJoke too much.


00:27:27.940 --> 00:27:29.500
And Cecil, we gotta tell you,


00:27:29.500 --> 00:27:31.180
the way we get our jokes these days,


00:27:31.180 --> 00:27:32.340
sometimes people send them to us,


00:27:32.340 --> 00:27:35.220
but we found that there's a package called PyJokes,


00:27:35.220 --> 00:27:36.700
and if you pip install PyJokes,


00:27:36.700 --> 00:27:39.300
you can just go to your terminal and just type PyJoke


00:27:39.300 --> 00:27:40.940
anytime you need a developer joke.


00:27:40.940 --> 00:27:41.780
- Are you serious?


00:27:41.780 --> 00:27:43.940
- It's a package and it'll just randomly generate jokes?


00:27:43.940 --> 00:27:44.980
- Exactly, it's beautiful.


00:27:44.980 --> 00:27:46.380
- Do you know if it's like machine learning jokes


00:27:46.380 --> 00:27:48.620
or is it like just static jokes and they just give you one?


00:27:48.620 --> 00:27:49.460
- I think it's static.


00:27:49.460 --> 00:27:50.280
- Oh, okay.


00:27:50.280 --> 00:27:51.120
- Yeah, it's just a list.


00:27:51.120 --> 00:27:51.940
- But there's quite a few.


00:27:51.940 --> 00:27:52.780
- Here's one.


00:27:52.780 --> 00:27:53.860
To understand recursion,


00:27:53.860 --> 00:27:56.460
you must first understand recursion.


00:27:56.460 --> 00:27:57.560
- It's very meta.


00:27:57.560 --> 00:27:59.140
- But I wanted to make a comment on that


00:27:59.140 --> 00:28:02.740
because we teach recursion to new computer science people


00:28:02.740 --> 00:28:04.880
all the time and I don't use it.


00:28:04.880 --> 00:28:06.220
I never use it.


00:28:06.220 --> 00:28:07.660
It blows up your stack.


00:28:07.660 --> 00:28:10.220
I don't think I've used it once in 23 years.


00:28:10.220 --> 00:28:13.860
and I've never needed a Fibonacci sequence generator.


00:28:13.860 --> 00:28:14.700
That is that.


00:28:14.700 --> 00:28:16.180
- Yeah, I kind of felt that way when I learned CSM.


00:28:16.180 --> 00:28:17.840
Like, this is cool and mind-blowing,


00:28:17.840 --> 00:28:19.140
but will I ever use this?


00:28:19.140 --> 00:28:21.260
After I saw your comment here, I decided to think about it.


00:28:21.260 --> 00:28:23.380
I probably have legitimately, professionally


00:28:23.380 --> 00:28:24.980
used recursion like five times.


00:28:24.980 --> 00:28:26.060
- Yeah, I can attest to that.


00:28:26.060 --> 00:28:28.900
I've probably done similar, to be honest with you.


00:28:28.900 --> 00:28:31.860
- It's not zero, but it's not very high


00:28:31.860 --> 00:28:33.380
given the number of years that I've been doing this.


00:28:33.380 --> 00:28:34.260
Same for you, huh, Cecil?


00:28:34.260 --> 00:28:35.340
- Yeah, 'cause when you think about it,


00:28:35.340 --> 00:28:36.820
what would you use recursion for, right?


00:28:36.820 --> 00:28:38.540
And it's probably, more commonly,


00:28:38.540 --> 00:28:41.220
you probably use it for like processing of lists of things,


00:28:41.220 --> 00:28:42.620
you know, and breaking up lists of things


00:28:42.620 --> 00:28:43.460
into different pieces.


00:28:43.460 --> 00:28:45.700
And now most programming languages have things


00:28:45.700 --> 00:28:47.340
that are in the box in their standard library


00:28:47.340 --> 00:28:48.180
that'll help you do that.


00:28:48.180 --> 00:28:51.060
So I really haven't had the need to go down that rabbit hole.


00:28:51.060 --> 00:28:52.900
- Exactly, I agree.


00:28:52.900 --> 00:28:55.060
All right, I have one for you as well.


00:28:55.060 --> 00:28:57.420
I have two actually, because I had to run Pie Joke


00:28:57.420 --> 00:28:58.860
as we were talking about it.


00:28:58.860 --> 00:29:01.420
So here's one, I really like this one.


00:29:01.420 --> 00:29:03.600
A programmer was found dead in the shower.


00:29:03.600 --> 00:29:06.220
Next to their body was a bottle of shampoo.


00:29:06.220 --> 00:29:08.700
with the instructions, lather, rinse, repeat.


00:29:08.700 --> 00:29:10.140
(laughing)


00:29:10.140 --> 00:29:11.700
He just did it until they died.


00:29:11.700 --> 00:29:14.500
An infinite loop.


00:29:14.500 --> 00:29:16.500
And then, this one's special for you, Brian,


00:29:16.500 --> 00:29:18.500
'cause I just ran it and it came up in Pie Joke.


00:29:18.500 --> 00:29:20.540
How do you know whether a person is a Vim user?


00:29:20.540 --> 00:29:21.380
- I don't know how.


00:29:21.380 --> 00:29:22.700
- Don't worry, they'll tell you.


00:29:22.700 --> 00:29:24.940
(laughing)


00:29:24.940 --> 00:29:27.020
- Well, I use Vim.


00:29:27.020 --> 00:29:30.380
- Oh, man.


00:29:30.380 --> 00:29:31.580
I love our joke segment.


00:29:31.580 --> 00:29:35.260
- Oh, man, this is crazy.


00:29:35.260 --> 00:29:36.220
All right, it is.


00:29:36.220 --> 00:29:37.460
All right, guys.


00:29:37.460 --> 00:29:38.540
Brian, thank you as always.


00:29:38.540 --> 00:29:39.980
Cecil, thank you for being here.


00:29:39.980 --> 00:29:41.140
It was a lot of fun to have you on the show.


00:29:41.140 --> 00:29:41.960
- Sure, definitely.


00:29:41.960 --> 00:29:42.800
Thank you so much for having me on.


00:29:42.800 --> 00:29:43.640
Appreciate it.


00:29:43.640 --> 00:29:44.460
- You bet.


00:29:44.460 --> 00:29:45.300
Bye, guys.


00:29:45.300 --> 00:29:46.140
Bye, everyone.


00:29:46.140 --> 00:29:46.960
- Bye. - Bye.


00:29:46.960 --> 00:29:47.800
- Thank you for listening to Python Bytes.


00:29:47.800 --> 00:29:49.420
Follow the show on Twitter via @PythonBytes.


00:29:49.420 --> 00:29:52.460
That's Python Bytes as in B-Y-T-E-S.


00:29:52.460 --> 00:29:55.660
And get the full show notes at PythonBytes.fm.


00:29:55.660 --> 00:29:57.260
If you have a news item you want featured,


00:29:57.260 --> 00:29:59.740
just visit PythonBytes.fm and send it our way.


00:29:59.740 --> 00:30:02.580
We're always on the lookout for sharing something cool.


00:30:02.580 --> 00:30:04.460
On behalf of myself and Brian Okken,


00:30:04.460 --> 00:30:05.780
This is Michael Kennedy.


00:30:05.780 --> 00:30:07.780
Thank you for listening and sharing this podcast


00:30:07.780 --> 00:30:09.380
with your friends and colleagues.

