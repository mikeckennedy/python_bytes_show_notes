WEBVTT

00:00:00.001 --> 00:00:04.480
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.480 --> 00:00:10.600
your earbuds. This is episode 126, recorded April 17th, 2019. I'm Michael Kennedy.

00:00:10.600 --> 00:00:11.500
And I'm Brian Okken.

00:00:11.500 --> 00:00:13.060
And Brian, we have a special guest, don't we?

00:00:13.060 --> 00:00:13.540
Yes.

00:00:13.540 --> 00:00:16.080
Yeah, Cecil, Cecil Phillip. Welcome to the show, man.

00:00:16.080 --> 00:00:18.120
Thank you so much for having me on. Appreciate it.

00:00:18.120 --> 00:00:21.660
It's great to have you on the show. You've been on Talk Python. I've been on your podcast

00:00:21.660 --> 00:00:24.120
away from the keyboard, so we might as well round this thing out, right?

00:00:24.120 --> 00:00:25.920
Yeah, we may as well go for the trifecta.

00:00:25.920 --> 00:00:29.940
Yeah, exactly, exactly. So super excited to have you here. We've got

00:00:29.940 --> 00:00:33.480
a bunch of cool stuff to cover. Before we get to it, just want to say thank you to DigitalOcean

00:00:33.480 --> 00:00:38.200
for sponsoring this episode like they do many. Check them out at pythonbytes.fm/DigitalOcean.

00:00:38.200 --> 00:00:46.060
More on that later. Brian, there's some really interesting news around Python being used for

00:00:46.060 --> 00:00:54.080
X, where X's find the Higgs boson or get the Nobel Prize in economics or something else, right?

00:00:54.080 --> 00:00:56.180
You got a new one for us on that incredible list.

00:00:56.180 --> 00:00:59.860
Well, yeah, I was actually, I was the last of the list. I was surprised nobody else took it,

00:00:59.880 --> 00:01:06.240
but in the news recently, there's a picture of a black hole, which is cool. And it's really neat

00:01:06.240 --> 00:01:11.200
that there's a bunch of Python involved in it. And of course, this is a big team with lots of

00:01:11.200 --> 00:01:16.440
software and whatnot, but a couple people did some digging. I'm linking to a quick write-up from Mike

00:01:16.440 --> 00:01:22.020
Driscoll. So the Python used to take the photo of the black hole. He's referencing a paper, which is a

00:01:22.020 --> 00:01:29.120
paper from the Event Horizon team. It includes references to lots of our favorites like NumPy and

00:01:29.120 --> 00:01:37.580
SciPy, Pandas, Jupyter, Matt Plotlib, and AstroPy. So yeah, lots of Python used in astronomy and in this

00:01:37.580 --> 00:01:38.240
black hole picture.

00:01:38.240 --> 00:01:43.520
That's so cool. And the reason this is a big deal is this is literally the first picture of a black hole

00:01:43.520 --> 00:01:48.440
ever, right? Yeah. One of the reasons why I linked this article as well is that links to a TED talk

00:01:48.440 --> 00:01:53.860
from a couple of years ago, basically of how they took some of the concepts around how this picture

00:01:53.860 --> 00:01:59.800
was generated, not the technical part, but just in high level concepts and that there's a lot of people

00:01:59.800 --> 00:02:04.820
involved in it. And it's a pretty big deal. And I'm looking forward to every time anybody ever,

00:02:04.820 --> 00:02:09.840
ever asked me for the rest of my life. So what can you do with Python? I can say, well,

00:02:09.920 --> 00:02:15.400
we helped with the entire picture of the black hole thing. So whatever you need it for,

00:02:15.400 --> 00:02:16.780
we could probably handle it.

00:02:16.780 --> 00:02:22.480
Yeah, that's pretty awesome. I wonder if it was used in the detection of the gravitational waves

00:02:22.480 --> 00:02:27.340
for black holes as well. So maybe that'd be a nice way to round it out. But I honestly don't

00:02:27.340 --> 00:02:29.660
remember there. Cecil, are you into astronomy?

00:02:29.660 --> 00:02:33.780
I am a little bit, to be honest with you. We actually have the Kennedy Space Center that's pretty

00:02:33.780 --> 00:02:37.740
close by. I'm in Florida for everybody that's listening that doesn't know. And so it's definitely

00:02:37.740 --> 00:02:41.280
something that we'd love to go over and do. There's like a little observatory in there,

00:02:41.280 --> 00:02:42.120
if you've ever been. Yeah.

00:02:42.120 --> 00:02:45.980
So it's really kind of interesting to, you know, take the little one over and like see how excited

00:02:45.980 --> 00:02:49.220
he gets over like stars and planets and those types of things.

00:02:49.220 --> 00:02:52.600
That's so cool. I've definitely been to Kennedy Space Center as well, taking my daughter there.

00:02:52.600 --> 00:02:57.400
And it's a great place. And it's so awesome that Python and all these tools, I mean, this is like

00:02:57.400 --> 00:03:02.860
the big hitters list of all the data science and Python used for this real cool discovery.

00:03:03.140 --> 00:03:05.860
Yeah, this is amazing. You should definitely get, I can't remember her name at the moment,

00:03:05.860 --> 00:03:09.560
but the girl that they attributed to taking the pictures on your show.

00:03:09.560 --> 00:03:13.080
Yes, Dr. Bowen? Bowman? Yeah, I almost have it right. Katie Bowman.

00:03:13.080 --> 00:03:13.780
There you go. Yeah.

00:03:13.780 --> 00:03:18.660
That's right. And she, yeah, I've invited her to the show to talk Python. It would be great to have

00:03:18.660 --> 00:03:22.780
her come and talk about this because it's so exciting. You know, what's really unfortunate is

00:03:22.780 --> 00:03:30.520
there was such a weird internet backlash against her in particular. There were so many trolls and other

00:03:30.520 --> 00:03:35.060
weird stuff. For example, I tried originally to reach out to her through Twitter and somebody had

00:03:35.060 --> 00:03:40.660
set up a fake account with pictures of her and video posts and all sorts of stuff to make it look

00:03:40.660 --> 00:03:45.020
real. But it got suspended because apparently it was, I don't know what the deal is, you know,

00:03:45.020 --> 00:03:48.260
sorry that she had to go through that, but it's awesome. This is the stuff she's doing,

00:03:48.260 --> 00:03:49.020
which is really cool.

00:03:49.020 --> 00:03:54.220
Yeah, that's really sad to see. I mean, it's, we all have a very supportive community in developer

00:03:54.220 --> 00:03:59.300
relations in general, but you're always going to have one or two folks that are going to just,

00:03:59.340 --> 00:04:02.820
you know, just try and be nasty for no reason. You know, I think what she's done was, you know,

00:04:02.820 --> 00:04:05.840
totally amazing. And I think she deserves all the credit that she gets for it.

00:04:05.840 --> 00:04:12.620
Absolutely. The problem is, you know, you take 1% of 1% of 1% of people who are absolute jerks,

00:04:12.620 --> 00:04:16.160
and then you put them on the internet where they can, you know, reach out to you all the time.

00:04:16.160 --> 00:04:19.040
It feels like there's way more jerks than there actually are, but yeah,

00:04:19.040 --> 00:04:20.220
I still got to deal with it. It's a bummer.

00:04:20.220 --> 00:04:20.680
Definitely.

00:04:20.680 --> 00:04:21.100
Yeah.

00:04:21.100 --> 00:04:27.940
Cool. So Cecil, something I'm super excited about is WebAssembly and the possibility to bring

00:04:27.940 --> 00:04:33.940
various, you think, desktop or native code to browsers, right? So you don't have to just go,

00:04:33.940 --> 00:04:37.500
well, does it compile to JavaScript and run in JavaScript? Like, WebAssembly means you don't

00:04:37.500 --> 00:04:37.940
have to, right?

00:04:37.940 --> 00:04:42.540
Yeah, exactly. So just for everyone that might be listening, so WebAssembly essentially is this

00:04:42.540 --> 00:04:47.480
new standard that are in, that's in most modern browsers today. And essentially it allows you to

00:04:47.480 --> 00:04:51.720
target somewhat of a virtual machine, right? But essentially it's running in the browser.

00:04:51.940 --> 00:04:57.320
And so if whatever your language of choice happens to be can compile down into WebAssembly,

00:04:57.320 --> 00:05:01.460
then you could run it in the browser. What I actually ran into when I was on Reddit was this

00:05:01.460 --> 00:05:06.460
thing called Wasmer. And what this is, is a project that'll allow you to take that WebAssembly

00:05:06.460 --> 00:05:11.020
output, right? And run it in a Python application, which is kind of interesting.

00:05:11.380 --> 00:05:13.620
Yeah, that's like the opposite of what I expected actually.

00:05:13.620 --> 00:05:17.820
Right. It's actually pretty interesting. So this is not Python running on WebAssembly in the browser,

00:05:17.820 --> 00:05:22.560
although I'm pretty sure there's a few products that can do that. This is Python taking the WebAssembly

00:05:22.560 --> 00:05:29.040
output, the .wasm file, W-A-S-M file, and running it in your Python application, which is interesting.

00:05:29.040 --> 00:05:34.760
So if you think about, again, WebAssembly is, you know, allows us to run these different languages in

00:05:34.760 --> 00:05:39.940
the browser. So if we have these different languages targeting WebAssembly, and then we have a Python

00:05:39.940 --> 00:05:45.020
module that allows us to run that executable, essentially like we could run any language on

00:05:45.020 --> 00:05:50.640
Python, right? Or at least we'll have that ability to interoperate between all these things, just using

00:05:50.640 --> 00:05:53.860
WebAssembly as like that common language, I guess, that we're all speaking.

00:05:53.860 --> 00:06:00.160
That's so cool. So what we have in Python now is you can compile stuff to C, and then use the C

00:06:00.160 --> 00:06:05.040
extensions and bring it in and run it. But this means anything that compiles to WebAssembly can now

00:06:05.040 --> 00:06:10.100
execute sort of natively in Python, regardless of whether there's like decent integration between

00:06:10.100 --> 00:06:10.720
those two languages.

00:06:10.720 --> 00:06:14.880
Yeah, I think that's really interesting, right? And so this is like the essence of cross-platform

00:06:14.880 --> 00:06:16.920
software development, right? Like when you think about it.

00:06:16.920 --> 00:06:20.240
You know what I thought about when you said this is like, I was thinking like, oh, this is kind of like

00:06:20.240 --> 00:06:26.580
node. I can take stuff that used to be on the web, but now I can run it like locally, but running it

00:06:26.580 --> 00:06:30.720
instead of like JavaScript, I run it like Python, but it takes anything that kind of was on the web,

00:06:30.720 --> 00:06:31.480
which is pretty wild.

00:06:31.480 --> 00:06:35.920
Exactly. So the folks that are really behind this WebAssembly movement was actually Mozilla.

00:06:35.920 --> 00:06:40.420
And so they already have some implementations of their Rust programming language that targets

00:06:40.420 --> 00:06:45.840
WebAssembly. So I could write Rust that targets, you know, that builds down to that, this .wasm file,

00:06:45.840 --> 00:06:50.040
and then run it in my browser. So now you imagine I could write something in Rust or C or

00:06:50.040 --> 00:06:53.520
something like that, that targets this WebAssembly file, and I could just run it in Python, right?

00:06:53.520 --> 00:06:57.380
So, you know, if there so happens to be something that's missing or a module that I want to use,

00:06:57.380 --> 00:07:00.120
like I could totally just bring it into my Python application and just use it.

00:07:00.120 --> 00:07:01.840
I'm pretty excited about this.

00:07:01.840 --> 00:07:07.520
Thinking I can use some of the awesome Python testing tools to test my WebAssembly projects.

00:07:07.520 --> 00:07:11.740
Yeah, probably too. That'd be pretty interesting to try out. I ran this a little bit yesterday just

00:07:11.740 --> 00:07:15.320
to try it out, and it actually works pretty well. And so now as the WebAssembly community just

00:07:15.320 --> 00:07:19.840
starts to grow, you can imagine as these different runtimes and languages want to start a target

00:07:19.840 --> 00:07:24.140
WebAssembly, you know, that just kind of opens up the world to everybody else, right? Because

00:07:24.140 --> 00:07:26.720
now I can just pull those into my Python application and just run them.

00:07:26.720 --> 00:07:31.840
I love it. This is a super cool find. Yeah, I mean, I don't know how much of the, is it this now,

00:07:31.840 --> 00:07:35.880
but I can see a future where there will be stuff that's like WebAssembly only. You know,

00:07:35.880 --> 00:07:39.580
once the adoption is greater, you're like, oh, that's only available in WebAssembly. Like,

00:07:39.580 --> 00:07:42.900
well, now it's also available in Python. I love it. And Brian, I think you totally could,

00:07:42.900 --> 00:07:47.820
right? There's an example here that's a Rust function that takes two numbers and returns the values

00:07:47.820 --> 00:07:51.980
and things like that. And then the Python example of calling it. So yeah, you could wrap that up in

00:07:51.980 --> 00:07:56.300
pytest, I think. Yeah. Pretty sweet. Yeah. Cecil, that's a really, really cool one. The next one I

00:07:56.300 --> 00:08:02.840
want to talk about is called Cooked Input. And this one is a really cool little project. Do you remember

00:08:02.840 --> 00:08:04.260
Bullet, Brian? Yeah.

00:08:04.260 --> 00:08:09.640
Cecil, I don't know if you caught this one, but Bullet is this library that lets you basically create

00:08:09.640 --> 00:08:17.380
dropdown combo boxes in the terminal with like arrow control. So you can like, and scroll bars

00:08:17.380 --> 00:08:22.140
and stuff. So you can say, I would like to get the, ask the user for this. And here's the five options.

00:08:22.140 --> 00:08:26.320
And then the five options is like a dropdown with like the thing. And you can like arrow through it

00:08:26.320 --> 00:08:30.540
and stuff like that. And also has some features to say, I want a number from you, like with some

00:08:30.540 --> 00:08:35.940
limitations. So Cooked Input is like that latter half to the extreme. So you can do all sorts of cool

00:08:35.940 --> 00:08:40.480
stuff. And the name comes from the idea of like Python 2, the way you got input from the user was

00:08:40.480 --> 00:08:45.520
raw underscore input. So validated input is Cooked Input, not raw input. Yeah. That kind of thing.

00:08:45.520 --> 00:08:51.640
Oh, I like that. Nice. Yeah. It's funny, right? So the idea is you can ask for all sorts of stuff

00:08:51.640 --> 00:08:58.940
and it has this cleaning and this converting option and then this validation option. So I could go and say,

00:08:58.940 --> 00:09:03.580
I'd like to say, go to the user and get a string called what I asked the prompt is, what is your name?

00:09:04.060 --> 00:09:07.780
And of course you could do that with input, but here you can specify, like, I would like

00:09:07.780 --> 00:09:13.440
whatever they type to be transformed to cap words. So like if you type your name, all lowercase or like

00:09:13.440 --> 00:09:17.060
a, it'll put just first capitalized first letters and everything else is lowercase.

00:09:17.060 --> 00:09:21.880
Or you can say like, I would like to get an integer. How old are you? And the minimum is one,

00:09:21.880 --> 00:09:26.000
you know, it just keeps asking the question and tells you what's wrong until it gives you the answer.

00:09:26.000 --> 00:09:31.920
So it's a really nice way to get input from the user on the terminal. That's like pre-validated.

00:09:31.920 --> 00:09:36.640
That's pretty interesting. So let's say, could I do something like, I don't want to say a very bad

00:09:36.640 --> 00:09:43.340
word here. Use regex and do something like get like my date formatted a certain way or four numbers

00:09:43.340 --> 00:09:44.300
inputted a certain way.

00:09:44.300 --> 00:09:48.200
Yeah. It has all these different validators and some of the validators have to do with dates and

00:09:48.200 --> 00:09:53.440
other types of things. So like, give me an email address, give me a date and, you know, give me,

00:09:53.440 --> 00:09:57.640
you know, give an example of like the, you know, year, month, day or whatever. And it'll,

00:09:57.640 --> 00:10:00.080
it won't let the user go on until they answer it correctly.

00:10:00.080 --> 00:10:01.980
That's pretty cool. Pretty nice. Brian, what do you think? You like it?

00:10:01.980 --> 00:10:07.000
You're bringing up bullet. Is it a reason? Is it just a similar project or?

00:10:07.000 --> 00:10:13.980
I bring it up because it's another utility or library that like takes just get standard input

00:10:13.980 --> 00:10:16.020
from the user on the terminal and makes it a lot better.

00:10:16.020 --> 00:10:16.820
Yeah. Okay.

00:10:16.820 --> 00:10:22.180
Right. It's kind of like a, not exactly a competitor, but a similar, but different take on that idea.

00:10:22.180 --> 00:10:27.480
Probably can use them together. Like if you wanted to do these free form entries, get it through,

00:10:27.560 --> 00:10:32.220
Yeah. And then drop downs. Yeah. I wouldn't see why you couldn't do that. This also sort of came

00:10:32.220 --> 00:10:37.080
inspired by bullet because our listeners are awesome. Anytime we mentioned something that we

00:10:37.080 --> 00:10:40.720
thought was like, Oh, here's this new unique thing we've never heard of. They're like, and here's five

00:10:40.720 --> 00:10:44.220
other amazing ones. You also haven't heard of and talked about yet. Right. Yeah. So pretty cool.

00:10:44.220 --> 00:10:50.620
All right. Before we get to the next one, let me tell you all about digital ocean. So digital ocean run our

00:10:50.620 --> 00:10:55.200
infrastructure. They're really great. Super happy with them. And one of the things they've recently done is

00:10:55.200 --> 00:10:59.480
launched their digital ocean marketplace, which is cool. So you just go to the marketplace and you say,

00:10:59.480 --> 00:11:05.840
I'm like a, a pre-configured Linux machine that's set up to run Django properly, like with micro whiskey

00:11:05.840 --> 00:11:10.820
and G unicorn and all that, or I want a MongoDB server, or I want a ghost server or whatever. And you

00:11:10.820 --> 00:11:15.540
just say, I want one of those. And bam, it just creates the whole virtual machine droplet ready to go

00:11:15.540 --> 00:11:21.880
pre-configured. So they've got like GitLab enterprise, engine X, Postgres, cert bot, all that kind of stuff

00:11:21.880 --> 00:11:26.620
that you might need. So quite cool. I would just, one of the things you can get at digital ocean to get

00:11:26.620 --> 00:11:31.940
started more easily and quicker. So check them out at pythonbytes.fm/digital ocean, get a $100

00:11:31.940 --> 00:11:36.720
credit for new users. Brian, you're starting to be a fan of PyCharm these days, right? I'm slowly,

00:11:36.720 --> 00:11:40.460
slowly wearing off on you. Is that right? Oh no, I've been using it for a while,

00:11:40.460 --> 00:11:48.440
but I use it with VI mode, of course, because I can't unlearn Vim. It's just built into my head now.

00:11:48.440 --> 00:11:55.120
So one of the things I've been trying to do is use more Jupyter Notebooks for various presentations and

00:11:55.120 --> 00:12:00.840
tutorials and stuff, and just playing with stuff, especially with big data sets. But it bugged me that

00:12:00.840 --> 00:12:07.820
maybe there's a way to use VI within a web browser, but I don't know how to do it. But I can do it within

00:12:07.820 --> 00:12:13.400
PyCharm. And so the neat thing that I'm announcing right now, I guess I'm not really announcing it,

00:12:13.400 --> 00:12:19.120
I just want to highlight it, is that JetBrains and PyCharm have, they've announced that they're

00:12:19.120 --> 00:12:25.800
working with the Anaconda group to get more support for things like Conda environments and

00:12:25.800 --> 00:12:34.420
notebooks into PyCharm. And I'm using the 2019.1.1 recently, the most recent build,

00:12:35.040 --> 00:12:40.140
and the pro version, of course, but it makes it so that I can just edit my notebooks within

00:12:40.140 --> 00:12:45.940
PyCharm with the UFM emulation, all my normal things that I have hooked up to PyCharm.

00:12:45.940 --> 00:12:48.160
And it just works great. I love it.

00:12:48.160 --> 00:12:52.440
That's super cool. And they have a special distribution for PyCharm for Anaconda,

00:12:52.440 --> 00:12:56.480
which has even better support. Now, I don't do much with Anaconda. I'm a fan of it,

00:12:56.480 --> 00:13:00.060
but I just don't have a use case for it. So I don't know a whole lot about it,

00:13:00.060 --> 00:13:00.760
but that sounds pretty cool.

00:13:00.860 --> 00:13:04.680
I don't use it myself either, but I know that a lot of people, especially if they're behind

00:13:04.680 --> 00:13:09.780
firewalls and stuff, it's just an easier install for other people to put that on there.

00:13:09.780 --> 00:13:10.440
That's pretty cool.

00:13:10.440 --> 00:13:15.920
Cecil, you ever use PyCharm or being at Microsoft, are you mostly on the Visual Studio Code side of

00:13:15.920 --> 00:13:16.620
the world these days?

00:13:16.620 --> 00:13:18.900
To be honest with you, I'm still a big PyCharm user.

00:13:18.900 --> 00:13:22.760
Like I was using PyCharm prior to coming to Microsoft, and I still use it a little bit.

00:13:22.760 --> 00:13:27.240
I do use our Python extension for Visual Studio Code, depending.

00:13:27.240 --> 00:13:29.020
That's getting nicer and nicer. Yeah.

00:13:29.020 --> 00:13:32.380
Yeah, it's getting better and better. And people love it, obviously, because it's free and it's

00:13:32.380 --> 00:13:38.280
open source and you can contribute back to it. But honestly, I'm still a PyCharm guy. I think when

00:13:38.280 --> 00:13:43.620
you think about IDEs versus editors, there's a different use case for those. There's a group of

00:13:43.620 --> 00:13:49.500
folks that just need an editor, making really quick changes or just kind of going through,

00:13:49.500 --> 00:13:54.360
like, you know, I guess your run of the mill edits, builds, view type lifecycle. But I think

00:13:54.360 --> 00:13:58.520
when it comes down to debugging and really getting deep introspection into what's happening into

00:13:58.520 --> 00:14:02.560
your application, that you honestly can't beat like the, you know, the power of an IDE.

00:14:02.560 --> 00:14:03.400
Yeah, I'm with you.

00:14:03.400 --> 00:14:05.940
I'm sorry, Brian. I know you're like a VI guy. I apologize.

00:14:05.940 --> 00:14:08.720
I'm 100% in PyCharm now.

00:14:08.720 --> 00:14:12.020
Do you just have it set up in VI mode? Yeah, I tried that for a minute that I was like,

00:14:12.020 --> 00:14:15.600
whoa, somebody broke my PyCharm. I got to disable this extension here.

00:14:16.520 --> 00:14:20.120
That was when we were playing with AceJump, which is really cool. But that's a different

00:14:20.120 --> 00:14:27.100
topic for a different time. Yeah. So over at Azure, you guys have some interesting stuff going on there.

00:14:27.100 --> 00:14:32.720
And one of the big trends, I don't know if it's really where the world is, but it's certainly where

00:14:32.720 --> 00:14:37.500
a lot of the hype and excitement is, is around serverless code, right?

00:14:37.500 --> 00:14:43.480
Yeah, definitely. So serverless is where we hide your servers from you. I'm like, so, so it's essentially

00:14:43.480 --> 00:14:49.040
like we're just taking the burden away from you in terms of like capacity planning, right? So that

00:14:49.040 --> 00:14:53.260
means that the servers are still there, but essentially all you need to do as a company,

00:14:53.260 --> 00:14:57.620
as a developer is just, you just need to give us your code or, you know, upload it to GitHub or what

00:14:57.620 --> 00:15:02.800
have you. And then we'll take care of deploying it, scaling it and doing all those types of things.

00:15:02.800 --> 00:15:06.640
So again, like you'd have to worry about this is how many virtual machines I need, or this is how

00:15:06.640 --> 00:15:11.120
much RAM I need and worry about backups and some of those types of things. But along with serverless,

00:15:11.120 --> 00:15:14.620
like you start to see like some interesting workloads that people want to build with them,

00:15:14.620 --> 00:15:20.320
right? So a lot of folks use it for APIs or the mobile backends to your web applications.

00:15:20.320 --> 00:15:25.000
Actually, I found a really interesting article yesterday, and this is on dev.2, which is a really

00:15:25.000 --> 00:15:30.840
cool online community for developers of, you know, this guy that created this serverless solution

00:15:30.840 --> 00:15:36.160
using Python, and it connected it to our Raspberry Pi to get like telemetry data. And so he connected

00:15:36.160 --> 00:15:41.560
the Raspberry Pi to this other offer we have called Azure IoT hubs. And that allows you to do

00:15:41.560 --> 00:15:47.840
two-way communication to your IoT device. And so we connected to that, and then we send information

00:15:47.840 --> 00:15:53.040
over into Azure functions. And then now he has like this real-time chart of telemetry showing up in

00:15:53.040 --> 00:15:56.800
web browser, which I thought was pretty cool. So the pieces that he has connected to this are pretty

00:15:56.800 --> 00:16:03.060
straightforward. Right? So he uses, again, he uses Python, he uses D3 for actually generating

00:16:03.060 --> 00:16:03.120
the charts.

00:16:03.120 --> 00:16:08.300
Oh, nice. Yeah. D3 is beautiful. Yeah. Yeah. And he has this thing called C3, which I never heard

00:16:08.300 --> 00:16:14.700
about before. So C3 sits on top of D3 and makes D3 easier specifically for creating charts.

00:16:14.700 --> 00:16:15.540
Okay. Nice.

00:16:15.540 --> 00:16:20.400
If anybody's ever used D3, you know, it's not like the easiest learning curve thing. And you could do

00:16:20.400 --> 00:16:23.720
more than just create charts, but like there's a charting library on top of that, which I think is

00:16:23.720 --> 00:16:27.980
actually pretty cool. But again, this article is pretty interesting. Again, it uses Visual Studio Code and

00:16:27.980 --> 00:16:33.380
the Python extension. It uses functions, serverless functions. And then it shows you how you can take

00:16:33.380 --> 00:16:38.640
telemetry from an IoT device, specifically a Raspberry Pi, push it up into the cloud. And now you're getting

00:16:38.640 --> 00:16:43.320
like this real-time telemetry. So if you think about it, like, I don't know, maybe you have like a garden

00:16:43.320 --> 00:16:48.400
in your yard and you want to have like moisture sensor or even a heat sensor or anything like that.

00:16:48.400 --> 00:16:52.700
Like you could start to get like interesting telemetry from your house or from your different devices

00:16:52.700 --> 00:16:55.140
and then push it up into a real-time chart using Python.

00:16:55.140 --> 00:16:59.460
That's a really cool use case. And I like the way they lay it out. What's really interesting to me

00:16:59.460 --> 00:17:05.820
is the two-way communication. Like calling into your Raspberry Pi seems more interesting than it

00:17:05.820 --> 00:17:08.440
talking out or more impressive, I guess.

00:17:08.440 --> 00:17:12.600
Yeah. So when you think about it, I mean, messaging is a hard thing to do sometimes,

00:17:12.600 --> 00:17:17.560
particularly when you're talking about a device that you don't necessarily have close by, right?

00:17:17.560 --> 00:17:22.160
And so definitely IoT Hub helps a lot with this. But I think for this particular use case,

00:17:22.160 --> 00:17:24.560
it's just using it one way, but you can go both ways if you need to.

00:17:24.560 --> 00:17:29.200
Yeah, that's pretty cool. I like it. So if anybody wants to create a cool IoT thing,

00:17:29.200 --> 00:17:32.460
here's a nice little write-up with Python and Azure.

00:17:32.460 --> 00:17:33.080
Yeah.

00:17:33.080 --> 00:17:37.760
What would you create with IoT if you could? Like Brian and I talk about this every now and then.

00:17:37.760 --> 00:17:41.820
I always like, it's so cool, but I actually can't think of anything I want to build that's,

00:17:41.820 --> 00:17:45.660
you know, not already out there. Like what would you build with some sort of IoT stuff if you had

00:17:45.660 --> 00:17:46.960
some time and energy?

00:17:46.960 --> 00:17:51.040
I have two co-workers that actually built some interesting things. And I think I might copy them. So

00:17:51.040 --> 00:17:55.900
I'm going to call them out a little bit. So one of my co-workers lives in Tampa. And so he's in the

00:17:55.900 --> 00:18:01.580
barbecue and he has like a professional grade barbecue grill in his backyard. He has like

00:18:01.580 --> 00:18:06.520
multiples of them. So we went over to his house one day for barbecue. And I'm like, dude, like what are

00:18:06.520 --> 00:18:10.920
all these wires you have attached to this grill? He has a sensor attached to the grill that's, you know,

00:18:10.920 --> 00:18:17.400
checking temperature and whatnot. And he had a Raspberry Pi. Could you not like hanging from the grill

00:18:17.400 --> 00:18:23.620
that was connected to his Wi-Fi in his house? And it was pushing telemetry to Grafana that was running

00:18:23.620 --> 00:18:28.040
on a server in his house. If folks on the letter listening don't know what Grafana is, Grafana is

00:18:28.040 --> 00:18:32.160
essentially like an open source dashboard. You know, you send us some information and it just

00:18:32.160 --> 00:18:38.220
generates a chart for you. So he has this Grafana chart that's like in his house. And so he could look

00:18:38.220 --> 00:18:42.140
and see, oh, well, this is what temperature the steak is. And this is what temperature like the

00:18:42.140 --> 00:18:43.940
sausages are. I thought it was super cool.

00:18:44.080 --> 00:18:46.900
That's pretty awesome. Brian, have you come up with any IoT things yet?

00:18:46.900 --> 00:18:51.300
Actually, I'm intrigued by this whole barbecue thing. And it sounds great to me. You could even

00:18:51.300 --> 00:18:55.080
have extra probes in there to just to probe your meat while it's cooking.

00:18:55.080 --> 00:18:58.940
What's cool with the two-way communication now is that so now he could look at it and be like,

00:18:58.940 --> 00:19:03.080
okay, this is hot enough. And then he could turn it down. Because again, it's you could do

00:19:03.080 --> 00:19:07.460
bi-directional communication with your device, right? So when you say it's getting too hot or maybe it's

00:19:07.460 --> 00:19:11.720
not hot enough. The IoT device, again, because it's connected to the temperature gauge,

00:19:11.720 --> 00:19:15.020
like he could adjust it. But he doesn't have to be right next to his grill.

00:19:15.020 --> 00:19:15.500
That's cool.

00:19:15.500 --> 00:19:21.140
Yeah. And you could do a feedback loop, a control loop and have like an AI actually cook your food

00:19:21.140 --> 00:19:21.760
for you then.

00:19:21.760 --> 00:19:27.800
Yes, exactly. You could do like 10 good grillings and then just like feed it to like some ML and go,

00:19:27.800 --> 00:19:29.240
do more of that. That was good.

00:19:30.180 --> 00:19:34.560
I actually like that. So maybe that's my project now. I'm going to have ML cook food for me. That'll

00:19:34.560 --> 00:19:34.940
be awesome.

00:19:34.940 --> 00:19:39.740
That actually would be incredible. I would love to have some ML cooked barbecue with you. That'd be

00:19:39.740 --> 00:19:43.440
great. All right. The last one is not nearly as fun as machine learning cooked barbecue, but it's

00:19:43.440 --> 00:19:49.340
pretty useful. So in Python, the whole threading parallelism story is a little bit complicated,

00:19:49.340 --> 00:19:53.860
right? We've got threads, but they can only do IO bound stuff. They can't really do computational

00:19:53.860 --> 00:19:58.400
stuff because of the GIL. We've got async and await, and that's really even better for

00:19:58.400 --> 00:20:03.320
IO driven concurrency, but it also doesn't work with the computational stuff. So if you really want

00:20:03.320 --> 00:20:07.780
to do computational concurrency, you have to use multiprocessing or C or something like that.

00:20:07.780 --> 00:20:13.700
Right. But the way you've exchanged data while those are running has been somewhat limited,

00:20:13.700 --> 00:20:19.700
like certain structures can be shared and you wait for the response to come back from the thing

00:20:19.700 --> 00:20:27.000
you're running over there. So new in Python 3.8, there's a new set of modules called

00:20:27.000 --> 00:20:32.660
multiprocessing dot shared memory. And the idea is you can create shared memory segments that are

00:20:32.660 --> 00:20:38.480
directly shared with all the multiprocessing sub processes that are running in your parallel work.

00:20:38.480 --> 00:20:43.500
So if you're doing any multiprocessing, it's pretty cool. And a lot of it's fairly complicated. You're

00:20:43.500 --> 00:20:49.200
like reading, writing bytes directly, which sounds kind of gnarly, but there's also a shareable list,

00:20:49.200 --> 00:20:53.000
which is pretty cool. You can throw stuff on the list, you can pull stuff off the list and it's shared,

00:20:53.120 --> 00:20:58.280
just like straight shared memory across the various processes, which I thought was a pretty cool

00:20:58.280 --> 00:20:58.780
addition.

00:20:58.780 --> 00:21:03.940
I'm wondering, so does it control access to who's writing? Because I'm guessing multiple people can't write to it at the same time.

00:21:03.940 --> 00:21:10.080
So I'm guessing there must be like some type of control that says this person's writing first and then this person's writing second kind of thing.

00:21:10.080 --> 00:21:16.320
One would hope there's some serialized like shared critical section or something that doesn't let it like corrupt the shared memory.

00:21:16.320 --> 00:21:18.180
But yeah, it's still pretty cool.

00:21:18.320 --> 00:21:22.020
I haven't looked, but I would guess so. I didn't see anything in the documentation about

00:21:22.020 --> 00:21:31.820
explicitly programming for that. It was just like you put something in the list, you get something out of the list. But I bet internally, it's probably down at the sea level or something. It's pretty careful about that.

00:21:31.820 --> 00:21:32.200
Sure.

00:21:32.200 --> 00:21:35.920
At the very least, this is a building block that we can build things like that on top of.

00:21:35.920 --> 00:21:43.540
It's pretty cool. And it's nice to see, you know, new stuff coming in the threading world or parallelism world in Python. So this is like I said, brand new in 3.8. So it's cool.

00:21:43.680 --> 00:21:44.260
Yeah, nice.

00:21:44.260 --> 00:21:52.440
Indeed. All right. Well, guys, that's it for our main items. But there's always a few extra things at the end to talk about. So Brian, what do you got that you want to throw out there?

00:21:52.440 --> 00:22:06.400
Well, I'm just totally gearing up and getting excited for PyCon. I just got my stickers ordered. So I'm going to have also bring in a bunch of copies of the pytest book, try to sell some of those there. I only took like four last year and they sold out.

00:22:06.400 --> 00:22:07.700
So I'll bring more.

00:22:07.700 --> 00:22:12.360
On your way to the booth, right? People mobbed you and got your book before you could even set them down.

00:22:12.560 --> 00:22:18.480
Yeah, I was going to bring a whole bunch, but it turns out that like a whole bunch of books is heavy. So I'll bring some.

00:22:18.480 --> 00:22:19.160
That sounds good.

00:22:19.160 --> 00:22:29.520
Also, I've never done live interviews for testing code. I think it'd be fun to do some live interviews. You've done those before. So I'll pick your brain on how to do that best and get some of those set up.

00:22:29.520 --> 00:22:38.400
Absolutely. I'm super excited about some live recordings at PyCon. I'm sure you and I will do some open session live Python bytes, but there'll also be some other stuff happening as well.

00:22:38.400 --> 00:22:44.320
I actually just bought some two little cool desktop mic holders for exactly that to bring to PyCon.

00:22:44.440 --> 00:22:45.400
So we'll see how they work.

00:22:45.400 --> 00:22:45.740
Nice.

00:22:45.740 --> 00:22:46.400
How about you, Cecil?

00:22:46.400 --> 00:22:51.580
In terms of sharing. So I actually found a workshop online that I thought was pretty cool.

00:22:51.580 --> 00:22:58.380
So, you know, everybody's always talking about machine learning and I want to get into it, but I don't know what exactly I could do with it.

00:22:58.760 --> 00:23:03.780
So I found this interesting Python workshop and it's called attendee detector workshop.

00:23:03.780 --> 00:23:04.060
Okay.

00:23:04.060 --> 00:23:14.760
So essentially you go through this process of creating a Flast application, but essentially what you do is like, you know, you upload a picture of like, let's say a group of people or the audience or the background or what have you.

00:23:14.760 --> 00:23:22.600
And using machine learning, like it'll help you like pick out the people that are in like the faces of the people that are in that picture that you put out.

00:23:22.920 --> 00:23:27.480
And then it'll tell you like if they're smiling, if they're happy, if they're sad or what have you.

00:23:27.480 --> 00:23:28.720
So I think it's pretty cool.

00:23:28.720 --> 00:23:38.960
So you can imagine again as a speaker or I don't know, maybe you go to a basketball game or something, you take a picture and you can be like, hey, I don't really think these people are really interested to like what you're saying, what's going on here.

00:23:38.960 --> 00:23:42.060
Or, hey, like they're like somebody just scored like some points, right?

00:23:42.060 --> 00:23:43.520
Like I'm really super excited about it.

00:23:43.520 --> 00:23:50.180
But I think it's a really interesting practical application of using machine learning, but also something that's very approachable because I think it's something that we all could relate to.

00:23:50.180 --> 00:23:51.040
I think that's awesome.

00:23:51.220 --> 00:24:01.960
It would be really cool to get a camera and point it on your audience while you're doing a presentation and just have like a little meter of like audience engagement as like that only you see while you're presenting something unrelated to this.

00:24:01.960 --> 00:24:04.360
And it'll show you like the faces of the people that aren't paying attention.

00:24:04.360 --> 00:24:06.060
So you can like walk by them and like stir.

00:24:06.060 --> 00:24:10.460
You've been singled out by the AI.

00:24:10.460 --> 00:24:11.280
We have to talk.

00:24:11.280 --> 00:24:12.400
Exactly.

00:24:12.400 --> 00:24:13.500
I thought that was pretty cool.

00:24:13.500 --> 00:24:14.920
So I put that on the extras.

00:24:15.300 --> 00:24:17.100
Another thing I wanted to talk about too.

00:24:17.100 --> 00:24:21.300
So I've actually downloaded your Talk Python mobile app.

00:24:21.300 --> 00:24:22.740
I have it on my phone, actually.

00:24:22.740 --> 00:24:23.220
Nice.

00:24:23.220 --> 00:24:25.360
So I took it with me when I was traveling last week.

00:24:25.360 --> 00:24:26.920
And I actually say I actually pretty like it.

00:24:26.920 --> 00:24:29.100
I know we've been working on this probably for a while.

00:24:29.100 --> 00:24:33.440
And we spoke about doing offline video content and whatnot for your show.

00:24:33.440 --> 00:24:35.200
So I'm really happy to see that this came out, man.

00:24:35.200 --> 00:24:35.800
This is super cool.

00:24:35.800 --> 00:24:36.320
Yeah, thanks.

00:24:36.420 --> 00:24:38.140
I'm really happy the way it came out as well.

00:24:38.140 --> 00:24:39.540
And it's really fun.

00:24:39.540 --> 00:24:43.220
Even I am experiencing going through my courses differently.

00:24:43.220 --> 00:24:45.460
You might think, well, why would you do that?

00:24:45.460 --> 00:24:46.660
But I have other authors.

00:24:46.660 --> 00:24:47.780
I'm going through their content.

00:24:47.780 --> 00:24:48.640
They're going through mine, right?

00:24:48.640 --> 00:24:50.240
Like I'm kind of a student as well.

00:24:50.240 --> 00:24:51.000
And it's super fun.

00:24:51.000 --> 00:24:54.160
We almost have the iOS version out, just the Android currently.

00:24:54.160 --> 00:24:56.000
But yeah, it's super, super close.

00:24:56.000 --> 00:24:57.040
So that was a fun project.

00:24:57.040 --> 00:24:57.740
Let's see.

00:24:57.740 --> 00:24:59.860
I do have a couple of other things I want to throw out as well.

00:24:59.860 --> 00:25:05.860
There's an interesting interview with Guido Van Rossum on MIT's AI podcast.

00:25:06.320 --> 00:25:08.860
This was sent over by Tony Cappanelli.

00:25:08.860 --> 00:25:10.640
Thanks for sharing that with us.

00:25:10.640 --> 00:25:12.920
And this is just, you know, it's not really worth going through the whole thing.

00:25:12.920 --> 00:25:15.660
But it's a different look at his perspective.

00:25:15.660 --> 00:25:21.860
Like his perspective on science fiction and on machine learning and on just all sorts of stuff.

00:25:21.860 --> 00:25:28.320
So if you've got an hour or something, you want to just catch up with Guido and sort of a historical look on what he did and his accomplishments.

00:25:28.320 --> 00:25:29.140
It's pretty cool.

00:25:29.140 --> 00:25:36.300
Another one, Cecil, in the whole Microsoft realm is Visual Studio IntelliCode for VS Code.

00:25:36.300 --> 00:25:37.480
Which is pretty awesome.

00:25:37.480 --> 00:25:40.680
So we talked about some other projects that are like this.

00:25:40.680 --> 00:25:43.280
But this is, I think, a more legitimate one.

00:25:43.280 --> 00:25:46.280
So IntelliCode is like autocomplete, IntelliSense.

00:25:46.280 --> 00:25:50.560
But actually is based on the usage of your code.

00:25:50.560 --> 00:25:52.380
So this works for Python, among other things.

00:25:52.380 --> 00:25:55.060
And it goes through, like, say, popular libraries on GitHub.

00:25:55.620 --> 00:26:02.460
So when you go to your, if you install this extension, say, in VS Code, and you go to, you hit, you know, regex dot.

00:26:02.460 --> 00:26:14.700
The stuff that shows up in the list first is not just alphabetical, but is actually the most commonly used things for, like, say, popular libraries that use regex and stuff like that.

00:26:14.740 --> 00:26:17.340
So it kind of shows you, and it's contextual as well.

00:26:17.340 --> 00:26:19.880
So it's pretty cool that people can check that out and install that.

00:26:19.880 --> 00:26:23.260
And then finally, my buddy Dan Koster sent me this yesterday.

00:26:23.260 --> 00:26:24.380
It just made me laugh.

00:26:24.380 --> 00:26:28.540
Somebody had gotten, was running a Craigslist thing and gotten a message.

00:26:28.920 --> 00:26:32.620
Hey, you know, here's my proposal or something to your Craigslist ad.

00:26:32.620 --> 00:26:35.700
Click here to sign up and, you know, fill it out or whatever.

00:26:35.700 --> 00:26:37.620
And it turned out to be a complete scam.

00:26:37.620 --> 00:26:40.220
It was like craigslist.somerandomdomain.com.

00:26:40.220 --> 00:26:43.080
And he's like, all right, well, I could just ignore this.

00:26:43.080 --> 00:26:45.580
Or I could write a program to destroy this guy.

00:26:45.580 --> 00:26:54.060
And so it's a video of him going through, figuring out where the, like, basically what it does is it shows you a fake Craigslist login to steal your credentials.

00:26:54.520 --> 00:27:00.840
So he used requests and some other APIs to actually go and just overflow the guy's database.

00:27:00.840 --> 00:27:05.660
You know, just generate like 100 million fake logins and just blast them into his database.

00:27:05.660 --> 00:27:07.660
So that's enjoyable.

00:27:07.660 --> 00:27:11.220
Anyone who feels like a little bit of schadenfreude, you can watch that.

00:27:11.220 --> 00:27:11.660
It's pretty good.

00:27:11.660 --> 00:27:12.460
Nice.

00:27:12.460 --> 00:27:12.780
Nice.

00:27:12.780 --> 00:27:13.280
I love that.

00:27:13.280 --> 00:27:14.700
Yeah, it's pretty short and sweet.

00:27:14.700 --> 00:27:17.780
It is Python 2, so it's a bit of a knock on it.

00:27:17.780 --> 00:27:19.140
But still, it's all good and funny.

00:27:19.140 --> 00:27:21.620
Speaking of funny, Brian, what do you got for us, man?

00:27:21.620 --> 00:27:26.540
Okay, well, I used our PyJoke, which I probably used it too much, but whatever.

00:27:26.540 --> 00:27:27.920
You can't use PyJoke too much.

00:27:27.920 --> 00:27:32.300
And Cecil, we got to tell you, the way we get our jokes these days, sometimes people send them to us.

00:27:32.300 --> 00:27:35.060
But we found that there's a package called PyJokes.

00:27:35.060 --> 00:27:40.840
And if you pip install PyJokes, you can just go to your terminal and just type PyJoke anytime you need a developer joke.

00:27:40.840 --> 00:27:41.340
Are you serious?

00:27:41.340 --> 00:27:43.660
So it's just a package and it'll just randomly generate jokes?

00:27:43.660 --> 00:27:44.220
Exactly.

00:27:44.220 --> 00:27:44.740
It's beautiful.

00:27:44.740 --> 00:27:48.520
Do you know if it's like machine learning jokes or is it like just static jokes and they just give you one?

00:27:48.520 --> 00:27:49.260
I think it's static.

00:27:49.260 --> 00:27:49.740
Oh, okay.

00:27:49.740 --> 00:27:50.740
Yeah, it's just a list.

00:27:50.740 --> 00:27:51.760
But there's quite a few.

00:27:51.760 --> 00:27:52.260
Here's one.

00:27:52.260 --> 00:27:55.680
To understand recursion, you must first understand recursion.

00:27:55.680 --> 00:27:56.980
It's very meta.

00:27:56.980 --> 00:28:03.360
But I wanted to make a comment on that because we teach recursion to new computer science people all the time.

00:28:03.360 --> 00:28:04.780
And I don't use it.

00:28:04.780 --> 00:28:05.700
I never use it.

00:28:05.700 --> 00:28:07.440
It blows up your stack.

00:28:07.440 --> 00:28:09.720
I don't think I've used it once in 23 years.

00:28:09.720 --> 00:28:13.120
And I've never needed a Fibonacci sequence generator.

00:28:13.120 --> 00:28:14.280
There's that.

00:28:14.360 --> 00:28:16.020
Yeah, I kind of felt that way when I learned CS.

00:28:16.020 --> 00:28:17.740
I'm like, this is cool and mind-blowing.

00:28:17.740 --> 00:28:19.080
But will I ever use this?

00:28:19.080 --> 00:28:21.280
After I saw your comment here, I decided to think about it.

00:28:21.280 --> 00:28:24.860
I probably have legitimately professionally used recursion like five times.

00:28:24.860 --> 00:28:25.880
Yeah, I can attest to that.

00:28:25.880 --> 00:28:28.880
I've probably done similar, to be honest with you.

00:28:28.920 --> 00:28:33.320
It's not zero, but it's not very high given the number of years that I've been doing this.

00:28:33.320 --> 00:28:34.140
Same for you, huh, Cecil?

00:28:34.140 --> 00:28:36.760
Yeah, because when you think about it, what would you use recursion for, right?

00:28:36.760 --> 00:28:41.000
And it's probably, more commonly, you'd probably use it for processing of lists of things.

00:28:41.000 --> 00:28:43.260
You know, and breaking up lists of things into different pieces.

00:28:43.620 --> 00:28:48.160
Now, most programming languages have things that are in the box in their standard library that'll help you do that.

00:28:48.160 --> 00:28:50.940
So, I really haven't had the need to go down that rabbit hole.

00:28:50.940 --> 00:28:51.360
Exactly.

00:28:51.360 --> 00:28:51.860
I agree.

00:28:51.860 --> 00:28:53.100
All right.

00:28:53.100 --> 00:28:54.700
I have one for you as well.

00:28:54.700 --> 00:28:58.380
I have two, actually, because I had to run Pyjoke as we were talking about it.

00:28:58.380 --> 00:28:59.780
So, here's one.

00:28:59.780 --> 00:29:00.940
I really like this one.

00:29:00.940 --> 00:29:03.120
A programmer was found dead in the shower.

00:29:03.120 --> 00:29:05.660
Next to their body was a bottle of shampoo.

00:29:05.660 --> 00:29:08.480
With the instructions, lather, rinse, repeat.

00:29:08.480 --> 00:29:11.280
They just did it until they died.

00:29:13.000 --> 00:29:13.920
An infinite loop.

00:29:13.920 --> 00:29:18.120
And then, this one's special for you, Brian, because I just ran it and it came up in Pyjoke.

00:29:18.120 --> 00:29:20.380
How do you know whether a person is a Vim user?

00:29:20.380 --> 00:29:21.160
I don't know how.

00:29:21.160 --> 00:29:21.720
Don't worry.

00:29:21.720 --> 00:29:22.200
They'll tell you.

00:29:22.200 --> 00:29:26.820
Well, I use Vim.

00:29:26.820 --> 00:29:29.660
Oh, man.

00:29:29.660 --> 00:29:31.340
I love our jokes so good.

00:29:31.340 --> 00:29:34.540
Oh, man.

00:29:34.540 --> 00:29:35.160
This is crazy.

00:29:35.160 --> 00:29:35.500
All right.

00:29:35.500 --> 00:29:36.160
It is.

00:29:36.160 --> 00:29:36.680
All right, guys.

00:29:36.680 --> 00:29:38.440
Brian, thank you as always.

00:29:38.440 --> 00:29:39.780
Cecil, thank you for being here.

00:29:39.780 --> 00:29:40.940
It was a lot of fun to have you on the show.

00:29:40.940 --> 00:29:41.260
Sure.

00:29:41.260 --> 00:29:41.580
Definitely.

00:29:41.580 --> 00:29:42.680
Thank you so much for having me on.

00:29:42.780 --> 00:29:43.220
Appreciate it.

00:29:43.220 --> 00:29:43.500
You bet.

00:29:43.500 --> 00:29:43.940
Bye, guys.

00:29:43.940 --> 00:29:44.340
Bye, everyone.

00:29:44.340 --> 00:29:44.600
Bye.

00:29:44.600 --> 00:29:44.840
Bye.

00:29:44.840 --> 00:29:46.780
Thank you for listening to Python Bytes.

00:29:46.780 --> 00:29:49.320
Follow the show on Twitter via at Python Bytes.

00:29:49.320 --> 00:29:52.160
That's Python Bytes as in B-Y-T-E-S.

00:29:52.160 --> 00:29:55.400
And get the full show notes at pythonbytes.fm.

00:29:55.400 --> 00:29:59.620
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:29:59.620 --> 00:30:02.320
We're always on the lookout for sharing something cool.

00:30:02.320 --> 00:30:05.420
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:30:05.420 --> 00:30:08.820
Thank you for listening and sharing this podcast with your friends and colleagues.

