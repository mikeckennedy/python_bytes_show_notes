00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 449, recorded September 15th, 2025.

00:00:10 And I am Brian Okken.

00:00:11 And I am Michael Kennedy.

00:00:12 And of course, this episode, not of course, but this episode is sponsored by us.

00:00:16 So please check out the stuff we offer you guys and everyone.

00:00:22 Courses at Talk Python Training, pytestCourses at Pythontest.com.

00:00:26 And there's also one at Talk Python Training too.

00:00:29 And then Patreon supporters, we love you.

00:00:32 Thanks for supporting the show.

00:00:33 If you'd like to have a suggestion for the show or like to get a hold of us, we're on Bluesky and Mastodon.

00:00:40 Links are in the show notes.

00:00:41 And as normal, this is currently Monday at 7 a.m., but normally it's Monday at 10 a.m.

00:00:49 If you'd like to watch the show live, you can go to pythonbytes.fm/live and catch it.

00:00:55 And you can even interact with us while we're recording.

00:00:57 Finally, I'd like to thank everybody that's joined up for the newsletter.

00:01:02 You can go to pythonbytes.fm and join the newsletter, and you get all the links that we talk about in the show, plus extra information on how to digest that, even if you're not listening at the time.

00:01:14 We'll send that right to your inbox.

00:01:15 So lots of cool stuff to talk about today.

00:01:19 Let's kick it off, Michael.

00:01:20 Yeah, let's kick it off with a little FOSS news, free and open source software.

00:01:25 And this is, I don't know, maybe the story is kind of the opposite of FOSS.

00:01:29 Giant trillion dollar company interacts with Monopoly court, but the consequences may fall down to open source software.

00:01:38 And Judge Mehta from the Google antitrust monopoly case has ruled on the remedy for Google being a monopolist who abused their privilege in ad search, in ad space, in search and so on.

00:01:53 So there were many different possibilities floated, even by the prosecution, like, you know, you probably need to sell Chrome and you may need to divest from Android, things like that, which would have been wild.

00:02:04 I know that OpenAI and gosh, was it Cursor?

00:02:09 Might have been Cursor or Anthropic.

00:02:11 I can't, one of the, one of the AI companies was like, oh yeah, we'll take it.

00:02:15 We'll buy.

00:02:16 And I know perplexity threw their hat in there.

00:02:18 We'll buy Chrome.

00:02:19 One of them offered to buy Chrome for like 10 times their, their valuation.

00:02:24 they're like we're gonna fire divestors we don't care but it turns out none of that is going to be that happened in an alternate reality or i don't know were you ever a fan to choose your adventure books brian yeah they went to page 11 instead of page 42 on this one and so there will be no selling of chrome there will be no divesting of android and the reason this is even on the show although all these things are fun to imagine is mozilla and firefox exist almost solely in their current form because some of the bad behavior of Google, right? Google, one of the big problems was Google's paying Apple something like 26, 20, 20-ish billion dollars a year just to say, yeah, make, make Google the default in Safari search on iPhone, right? But the other one was, for reasons I don't still fully understand, although I think they might not be 100% goodwilled, they are also paying 85% of Mozilla's bill every year to exist.

00:03:22 Wow.

00:03:23 Like they're 85% of Mozilla's revenue.

00:03:25 So one of the remedies could be, you can't be paying all these companies to like make you the default search engine.

00:03:31 Same reason, that's what Mozilla was getting is like default search engine on Mozilla equals Google.

00:03:36 Here's $100 million a year or whatever it was.

00:03:39 Okay.

00:03:40 Go ahead.

00:03:40 No, I was just looking at the notes.

00:03:43 you wrote down that the google can keep paying mozilla to make google but only if it's if the deals are are not exclusive i don't understand how i believe what that means is um they let's say

00:03:58 you know i'm a fan of like start page and kagi yeah i think they can't like say we'll pay you 100 million dollars and no one else can pay you anything to be like privileged or something along

00:04:08 those lines okay because like only one person can be the default but yeah that's true maybe somebody could be like top on the list or something yeah i think something like that yeah i don't i haven't

00:04:19 read the whole ruling right um the idea is that would be a totally reasonable remedy as part of this like selling chrome which maybe is a little less reasonable but still yeah i'm here for it it was so interesting okay um but a lot of people would a lot would have lost a lot of revenue like mozilla right exactly like i don't care if apple is revenue they can suck it up they they make more money than anyone and they're gonna get a bunch of my money when they ship new computers and ipads in a month or two so it's gonna be fine i'll backfill that for them but mozilla 85 the revenue you as a company with hundreds of employees you can't lose 85 of your income and not get it would just make mozilla fold i think yeah or maybe just focus i agree that it would probably make them fold in the short term maybe in the long term it just makes them focus on providing products so anyway this is there's a bit of a long conversation around just this but um i think you know i wrote i wrote the hey on the unsolicited advice from mozilla giving him like five business ideas that should be not just depend on google yeah um not that they necessarily need to take him or that it was like a big deal but there are certainly things that they could do and they should have started doing five years ago and maybe now is better than never. Because this is not Google promises to keep paying Mozilla's bill forever. This is the law will not make Google stop paying them. This deal is up for renewal in 2026. So it still could get canceled. I mean, when I said, I'm not sure about the motives of Google, if Google is paying them just because, hey, we definitely want Google to be the top search thing in your browser, Google could decide, you know, the market share is getting down and down and down.

00:06:01 And maybe it just doesn't make sense to pay that anymore.

00:06:04 It's done.

00:06:04 Yeah.

00:06:05 And that just seems icky also.

00:06:07 It does seem like Google's just keeping Mozilla around so that they are not the, just to keep competition there.

00:06:14 Just to not look like a monopolist, right?

00:06:17 Yeah.

00:06:17 Exactly.

00:06:18 But now they've been punished as a monopolist.

00:06:20 The fines have been determined.

00:06:22 There are no more consequences, right?

00:06:25 So do they still have to pay?

00:06:26 I mean, no one's going to say, well, look, they're not a monopolist because of Firefox.

00:06:30 They are legally declared to be a monopolist.

00:06:33 So that check, that guard by doing that is gone.

00:06:37 The market share of Mozilla is tweaking down enough that maybe it just, they are like, you know, it's not even worth like the vendor registration that we do.

00:06:45 Like it could be a huge problem.

00:06:47 It could also be that Google wants to show some goodwill and do this, but I don't know.

00:06:51 It's still tenuous.

00:06:52 This is not like, oh, they're fine.

00:06:54 Interesting.

00:06:56 - It's a super interesting thing to follow.

00:06:59 We'll see where it goes, but yeah, they should probably hustle and start getting some things that are not being paid.

00:07:05 And let's put a bow on it, but final thought is, I think you're right on point that it's icky and it's icky because when Mozilla makes choices about how to like defend users, like for example, you know, that fingerprinting, like not the ad blocking, but that creepy stuff where you ask, well, what fonts are installed?

00:07:22 this JavaScript runtime has this speed behavior.

00:07:26 So that means it's actually this person.

00:07:27 It's down to like two people in the world and only one person visited our site.

00:07:30 So we can track them like not just as good as a cookie.

00:07:34 Like those kinds of things that would be lovely to have.

00:07:37 Yeah.

00:07:38 I actually don't know if Firefox has that or not, but I don't think so.

00:07:41 I think Brave might.

00:07:42 Anyway, there's exact opposite incentives like for Firefox.

00:07:47 One is the users would be better off if they were actually a private browser that did that kind of stuff.

00:07:51 Two, Google would be more upset with them and less likely to pay them their salary.

00:07:56 That just puts them in a, hey, we could be for the users or we could be for our job.

00:08:01 I'm not a fan.

00:08:02 What a morning.

00:08:03 We're going to go from lawsuits to trove classifiers.

00:08:11 This will wake everybody up.

00:08:12 Are you telling me that pytest-check has been declared a monopoly pytest plugin?

00:08:18 No, I just wanted to pick one.

00:08:20 So I wanted to pick a project on, so I've got, we've got pytest-check, one of the projects I work on, that is, I'm just to have the PyPI page up, because I wanted to show what some of the extra stuff, because it's relevant to Trove classifiers.

00:08:35 So there's some meta information in the PyProject.toml, or maybe there was like a setup CFG or something like that.

00:08:44 Anyway, don't use that.

00:08:45 Use PyProject.toml.

00:08:46 Anyway.

00:08:47 Things like the license.

00:08:49 on the left-hand side of uh of pi pi you can see things like the license uh who the maintainers are um the author require what python version it requires um and if it provides any extra installers i didn't know it did that that's pretty cool i know i knew that my package did i didn't know that pi pi said which extras you can install i didn't know that either that's interesting yeah um i below that there's extra things like i've got on here i've got that the development status is stable so so you can go ahead and use it.

00:09:19 It's part of the pytest.

00:09:21 It's a pytest plugin, so I have the pytest framework.

00:09:23 Intended audience is developers.

00:09:25 I don't know if that's important or not, but sure.

00:09:27 And which Python versions?

00:09:29 It's Python 3.9, 10, so I'll test it all the way up.

00:09:33 3.15?

00:09:34 I was going to take that out.

00:09:35 But anyway, I haven't tested it.

00:09:37 Leave it.

00:09:37 It's only like three or four more weeks, and then it'll start to make sense.

00:09:40 Just leave it.

00:09:41 Yeah, I haven't tested 3.15 yet.

00:09:43 But okay, so and then what topic?

00:09:46 It's utility.

00:09:46 all this extra stuff.

00:09:48 Why do we care about that?

00:09:50 Well, those things are listed in pipi.org slash classifiers.

00:09:56 And there's a big list of these that you can put in there, even which CUDA version you're using.

00:10:03 Interesting.

00:10:04 A lot of them are legacy and don't make sense.

00:10:06 But they have to be exact matches in your classifier list.

00:10:10 Why am I bringing this up?

00:10:11 Because I'm bringing it up because I'm blanking right now.

00:10:16 Adam Hill wrote a project recently called troml, T-R-O-M-L.

00:10:21 And troml provides a list of potential classifiers that could be added to a Python package.

00:10:26 And actually, I think that's the original thing.

00:10:29 It was to provide a potential list of classifiers.

00:10:33 Now, if you're okay with it, you can say, go ahead and update it.

00:10:36 It'll update your PyProjectDommel file with the right classifiers.

00:10:40 And this is what they look like in code.

00:10:42 There's a classifier list, and it's a string.

00:10:47 It has to be exact spelling, exact capitalization with the spaces and everything.

00:10:53 So you don't really want to do this by hand.

00:10:55 I usually copied and pasted it, but now you don't have to.

00:10:59 You can just run troml against your project, and you just give it the directory of your project, and it'll find your project troml file.

00:11:06 And there's a couple arguments.

00:11:08 You can say suggest, and it just suggests what you should put in.

00:11:12 But if you add fix, it'll just change it.

00:11:16 And if you want to just check stuff, you can say troml check.

00:11:21 It'll check.

00:11:21 That's really nice.

00:11:22 Yeah.

00:11:23 And that might be a good one for CICD or something, a pre-commit to check.

00:11:28 So really cool that I don't have to think about that too much anymore.

00:11:32 I can just run troml on my project, and it'll work.

00:11:35 So the final thought on this is if you're like, why do we even care about classifiers?

00:11:43 This is ridiculous.

00:11:46 We have a testing code episode from 2023 that I'm linking to where I talk about to Brett Cannon.

00:11:52 Because I, frankly, I just wanted to stop using him on my project.

00:11:56 So I got Brett on the phone and said, hey, Brett, why do we need to care about these anymore?

00:12:00 And he gave me a nice discussion.

00:12:02 It's a half an hour discussion linked to that.

00:12:05 Okay.

00:12:05 Yeah, very nice.

00:12:07 Anyway, classifiers.

00:12:10 Love it.

00:12:10 Yeah, and those things do look tricky.

00:12:12 You almost feel like they should be an enumeration in some library like pip or something.

00:12:18 You use a pip colon Django, pip colon Django find out to, you know what I mean?

00:12:23 Well, yeah.

00:12:25 One of the things I want to bring up.

00:12:26 But it's by Project Toml, right?

00:12:27 You can't run code in there.

00:12:29 One of the things I wanted to point out that I was surprised when I first wrote this is I was putting licenses in my PyProject Toml classifiers.

00:12:41 And because that used to be the only way you could get them in PyPI to show up.

00:12:46 But you don't have to do that anymore.

00:12:48 You don't have to list the licenses.

00:12:50 So a little bit of news.

00:12:52 Okay.

00:12:52 Very nice.

00:12:53 All right.

00:12:53 What you got for us next?

00:12:55 What is next?

00:12:56 Well, let's see.

00:12:57 pqrs.

00:12:59 pqrs. I'm sure it's spoken out. It's not, it has no vowels. So if you're in data science,

00:13:05 you, and let's say intersect two things. If you're in data science and you deal with large files, like large CSVs, right? Like let's say you've, you've got a 500 megabyte and a rather 500 gigabyte, I don't know, huge, huge CSV file for your project. And you start out your day by going to your notebook and you say pandas read csv or something equivalent of that right you're you're just directly working with the csv i guess even if this was like a web app might it still makes sense but the i think the real common usage scenario is someone is going around and working with their their data files right why do you keep it a csv there are better formats parquet for example which this applies to this pqrs is a command line tool for inspecting parquet files These are compressed, optimized binary versions of basically CSV files, right?

00:13:56 I guess they're slightly different in the sense that like columns have types, like there can be an integer column, a little more like Excel, but Excel is hard to work with, right?

00:14:04 Excel files are hard to work with.

00:14:05 So CSV.

00:14:06 Well, why might you keep it as CSV?

00:14:08 Well, you want to be able to actually look at the file and see what the heck it is.

00:14:11 These are like compressed binary things you can't look at unless you install this.

00:14:15 And then you can just kind of browse around through the files.

00:14:18 So you can go to your parquet file and say, show me the top entries by doing parquet.cat or head or merging them or do all sort of row count, sample some items out of it.

00:14:29 So if you were avoiding working with these parquet files or something else, I think parquet is kind of one of the top ones out of the PyArrow project, out of the Arrow project.

00:14:39 This is really cool.

00:14:40 And it gives you back a little bit of that.

00:14:42 Let me just poke around this binary file as if it were a CSV text file.

00:14:47 So how about some reasons to use it?

00:14:51 So I think there's two reasons.

00:14:52 I think size and speed, both of which are relevant.

00:14:56 You work with large data files, right?

00:14:58 So in the show notes, I've got some things written down, like a typical 200 megabyte CSV file might be as small as 20 or 50 megabytes as a Parquet file.

00:15:09 That's like a 5x smaller size.

00:15:12 We're talking a bunch of huge data files, right?

00:15:14 Smaller size, good.

00:15:15 I mean, I guess if they're changing a lot, you know, a Git diff or whatever, but I mean, putting 500 gigs into a Git, it's going to hate it a lot.

00:15:22 That I've never put a large file into Git, but it does complain about it.

00:15:28 At least Git have complaints about it.

00:15:30 And then the other thing is speed, right?

00:15:33 So if you fully load like a big, obviously it depends on what the content is and so on.

00:15:37 But on standard use cases, it also might be two to 10 times faster to read the Parquet file.

00:15:44 And it's small, smaller.

00:15:46 So really nice, right?

00:15:48 Okay.

00:15:49 Less memory usage, the way that it's read.

00:15:51 Like there's a lot of advantages to having this.

00:15:53 And Michael Booth out in the audience.

00:15:55 No, sorry.

00:15:56 Bart Williams points out that Parquet files also preserve D types, which is great for dates, date times, and US zip codes.

00:16:04 indeed meaning like it knows it's a string and doesn't parse 0 1 7 7 2 as a 1 7 7 2 as a number right which is a big big problem and then um michael booth points out hey you could use duckdb for exploring perky files yeah i think this is more like i'm just cruising through the system and i

00:16:23 would do a cat or just a tail a file just to see what the heck it is you know yeah that's pretty

00:16:29 cool anyway pqrs check it out if you work with uh csv and other data cute name too it is do you

00:16:37 know what time it is it's almost time for a new version of python checking out the python 314 or the pi python version um it's um um it it's coming up so looking at the dates i was looking at the PEP 745, which shows the dates.

00:16:55 It looks like the release candidate is expected.

00:16:59 The third release candidate is expected on the 16th, just tomorrow.

00:17:04 Wow.

00:17:04 And then the final is expected October 7th, but at least probably sometime in October.

00:17:11 So why am I bringing this up?

00:17:14 I'm bringing this up for a couple of things.

00:17:16 I was going to talk about what's new in Python.

00:17:19 So I'm going to link to it anyway.

00:17:21 There's a what's new page with all the things.

00:17:24 We've talked about some of these already.

00:17:26 I'm not going to, there's a free thread.

00:17:28 It is officially supported, but it's been in there for already.

00:17:33 Template strings are neat.

00:17:34 Anyway, cool list of new things.

00:17:36 But what do I really want to talk about today is I want to talk about that I really wanted pytest-check, which we were already talking about, and the rest of my projects.

00:17:45 I thought, you know what?

00:17:46 I'm not completely testing them yet.

00:17:49 I am testing them.

00:17:50 I added them to talks recently, so I would test everything locally.

00:17:54 But I wasn't testing 3.14 in CI, and I thought, now's the time to turn that on.

00:18:02 But I had trouble.

00:18:03 I forgot the magic incantation of, what do I do?

00:18:06 Do I just add 3.14 to my GitHub actions list or the Python matrix?

00:18:13 Tried that.

00:18:14 Didn't work.

00:18:15 So I asked people on Master on Bluesky, and I'm always grateful for everybody that answers things rather quickly.

00:18:24 Got a bunch of cool answers.

00:18:26 A few people suggested that I forgot the, what was the answer?

00:18:32 I forgot the use pre-releases.

00:18:36 And in particular, Ed Rogers said, hey, there's a great article from Hugo about running 3.14 in CI.

00:18:48 So I'm going to link to that.

00:18:49 It's called Free Threaded Python on GitHub Actions.

00:18:53 So that doesn't say how to run 3.14.

00:18:55 It's about free threading.

00:18:56 But hidden in here is the secret.

00:18:59 The secret is down here.

00:19:01 And there's a bunch of great examples of YAML files and workflow files.

00:19:06 But the magic keyword is right down in here that says allow pre-release is true.

00:19:12 That's it.

00:19:13 You really, that's all you got to do.

00:19:14 So you got to say allow pre-release is true.

00:19:16 And of course, while you're there, it's good to check to make sure that you have a current setup Python version.

00:19:24 And I believe this is already out of date.

00:19:27 I believe that we've got maybe the, I don't know, check them.

00:19:30 So I think we're up to V5 and V6, but it's good to check on your actions, the checkout action and Python action.

00:19:38 But at least you have to be up to five, I think, for this to work.

00:19:41 Anyway, pre-release is true.

00:19:43 And then while you're there, you can check it out and say, hey, I am going to test against 3.14, but maybe I should test against the free-threaded version also.

00:19:52 And all you have to do is add a 3.14T to make that work.

00:19:57 All right.

00:19:57 Yeah, that's very cool.

00:19:59 And yeah, thanks to everybody that helped me out on that one.

00:20:03 Indeed.

00:20:03 Yeah, that's super cool.

00:20:04 And pretty soon you can drop the pre-release thing, right, in a month.

00:20:07 Well, but you don't really have to.

00:20:09 It can just be in there to test stuff.

00:20:12 Yeah.

00:20:13 Exactly.

00:20:13 It's not going to hurt anything.

00:20:14 And you'll need it for 3.15 right around the corner.

00:20:18 Exactly.

00:20:19 So you're almost ready to test your Trove classifier.

00:20:22 I mean, who doesn't want to do like some deadlocks on GitHub Actions?

00:20:24 Come on.

00:20:25 Put the T in there.

00:20:27 I don't think we're in danger of deadlocks.

00:20:29 I think we're in danger of a lot of race conditions and data corruption because deadlocks assume that people are already writing locks using thread, thread locks, just using them wrong.

00:20:38 I think no one's using them.

00:20:40 Yeah.

00:20:41 So I don't know.

00:20:43 So I turned on testing on free threaded for pytest, but I don't know if it makes a difference because it's a pytest plugin.

00:20:48 And I don't think that.

00:20:50 Yeah.

00:20:51 It's probably fairly stateless.

00:20:52 Yeah.

00:20:53 Well, I don't think pytest utilizes the free threading yet.

00:20:56 It'd be kind of cool if it did, so we could test multiple things at once.

00:21:00 But I think it's a single test.

00:21:01 Yeah, that's true, because it's still subject to the gil, unless it runs it in multiprocessing.

00:21:05 Yeah, I mean, you can run them in parallel, but traditionally people use Xdist, pytest Xdist, which splits them off into separate processes.

00:21:15 All right.

00:21:15 Now are we ready for extras?

00:21:17 Yeah, we're at extras now.

00:21:19 All right.

00:21:19 For something completely different, let's talk about an article by Hugo van Caminande.

00:21:26 Yeah.

00:21:27 So you spoke about PREC last time, which is a alternate, faster UV-enabled pre-commit, right?

00:21:37 We talked about pre-commit in different ways intersecting with uv, and that was one of them.

00:21:41 And said, hey, by the way, I also wrote, by the way, it comes from the episode, I'm getting the BIOS flavor.

00:21:47 It's got to be one of the better titles.

00:21:49 So good.

00:21:50 Anyway, the article is Ready PREC Go, talking about how he's using Prec for pre-commit type of things.

00:21:58 So super cool.

00:22:00 People can check that out.

00:22:01 And this was not on my follow-up earlier and my extra earlier, but now I realize I should throw this on you.

00:22:07 So remember I said that it was quite a bit slower to run my little URL crunching utility in Python

00:22:15 instead of, I can't remember what we were talking about.

00:22:17 You're talking about something, oh, the startup cost of Prec actually it was.

00:22:21 So I'm like, yeah, even my little super silly utility is kind of slow.

00:22:26 Like it takes almost a second to just start and do its little thing.

00:22:30 Well, well, Michael learns a lesson.

00:22:31 The lesson is that was something that came out of the Talk Python code base, which has like packages installed that have a whole bunch of stuff in there.

00:22:41 And I think somehow loading up that sub package of that whole code base was loading like almost all of the talk Python stuff as it just parsed, doing all the imports to find its way to what it needed to like put a few pieces together.

00:22:57 And I may have broken that out and it may run way, way, way, way faster now.

00:23:01 So lesson, keep it, if you put it in its own little virtual environment and you make it do its own, if it's like a one or two line utility or one or two file utility, maybe that makes a big difference.

00:23:11 At least it does here.

00:23:12 So yeah, I thought that was actually really interesting that it makes a big difference.

00:23:15 like 10 times different startup speed.

00:23:17 Wow. Yeah.

00:23:18 Yeah. Yeah. So there I've learned a lesson.

00:23:21 Also just before I call it on my extras, I was listening to some security podcasts and apparently there was a super broad, although not super bad, supply chain attack at npm where some package, some maintainer of a package got phished by a, Hey, you've got to make sure your 2FA is up to date innpm.

00:23:43 And they did, but that was actually logging into a site that was completely not that, which gave the hackers access to their npm repository, their package.

00:23:52 And they replaced, they called it a one-function, one-liner dependency that 500 other packages depend upon that resulted in something like 2 billion downloads a month or a week.

00:24:04 I don't know.

00:24:05 It was like a lot of downloads.

00:24:06 And they put in cryptocurrency stealers where the one line used to be.

00:24:11 Just thinking about like, do you necessarily need a one line dependency that has other dependencies?

00:24:16 Like, could you just maybe just vendor that in?

00:24:19 So just, I definitely think not depending on too many things has many good advantages to you.

00:24:25 And this age of AI, if you can ask AI to say, write me a single function that does this thing and it solves your use case, like maybe you don't need any dependencies and side benefit is like you code might start a little bit faster, but also people can't fish someone downstream and do bad stuff too.

00:24:39 So anyway, very interesting.

00:24:41 Starts much faster.

00:24:42 Cool.

00:24:43 All right, over to you.

00:24:45 I kind of, I've got a lot of extras, so I'll try to get through.

00:24:50 So Adam Hill, we talked about troml or yeah, troml.

00:24:55 So Adam Hill also has another Toml utility and it's DJ Toml settings.

00:25:01 I haven't played with this yet, but essentially it's, you can save your Django settings in Toml files, either into pyproject.toml or you can make a Django Tommel file.

00:25:11 Anyway, he's got a new package called DJ Tommel settings that you can store Django stuff in Tommel.

00:25:17 So that's that.

00:25:19 A couple of people notified us about this, and I noticed it also.

00:25:24 Somebody named Sam Henry Gold, did you see this?

00:25:28 He wrote a little utility that allows you to detect.

00:25:39 It allows you to detect the angle of your Python, or not your Python, your MacBook, the lid, and then react to it.

00:25:47 So he's got a couple things that are fun.

00:25:49 He's got a creaky door sound that you can play on your MacBook while you're opening and closing the lid.

00:25:56 And then a, what did he call this?

00:25:58 The theremin.

00:26:00 It's a different kind of instrument.

00:26:04 I saw this, thought it was fun.

00:26:07 And then we got, somebody told us, it's called Lid Angle Sensor.

00:26:13 And then-

00:26:14 Brian Weber.

00:26:15 Yeah.

00:26:16 Yeah.

00:26:16 So Brian Weber notified us that there's a version of this for Python already.

00:26:22 This just came out like a week ago or so, called PyBookLid.

00:26:26 So just directly from Python, you can control your book lid.

00:26:29 You don't have to get anything else.

00:26:32 All right.

00:26:33 So who's going to be the first person that takes this to the Apple store?

00:26:37 and tells them they need to oil their macbook lid at the genius bar i mean look listen to the thing and then if you put it too far like a crunch if it like goes oh my god you broke it yeah

00:26:52 pretty funny don't do that okay uh what do we got not pie test check again i've already done that um no these are my oh i was just debugging my uh my stuff so uh the last thing i wanted to bring up was pie bay so pie bay is just around the corner also uh pie bay is coming in october october 18th of 2025 just so um middle of october if you are planning on if you're already in san francisco um or or the bay area or plan on being there in october or would like to go and um don't want to buy your own ticket so i encourage people to go buy your own ticket this is a really cool there's a lot of great people there talking we've got Guido Pamela Fox Christopher Lisa Jim there's there's tons of great speaker profiles I kind of wish I could go I'm not gonna be able to get there Burnett is going to talk about Python packaging a lot of great speakers anyway so check out PyBay and I've got a secret for everybody so if if you would like to go but for some reason would just like to get a free ticket, just let us know.

00:28:01 So how do you let us know?

00:28:02 I think that'd be cool to do a drawing from our email list.

00:28:08 So go to pythonbiz.fm, sign up for our email newsletter, and we're going to draw how many tickets do we got?

00:28:16 They gave us some tickets to give away.

00:28:18 I've got one, two, three, four.

00:28:20 I've got four vouchers, so four people.

00:28:23 We'll randomly pick before next week, we'll randomly pick four people and we'll email you and say, hey, do you want a ticket?

00:28:33 And we'll give out some tickets.

00:28:35 Also, it looks like it's a voucher for one individual ticket and a free conference T-shirt.

00:28:40 So you get the T-shirt also.

00:28:41 So that's cool.

00:28:42 So when are we going to do that drawing?

00:28:43 I'll probably do it.

00:28:44 I'll do it next Sunday.

00:28:45 So sign up this week.

00:28:47 Sign up before Sunday, actually by the end of Saturday.

00:28:51 And then I'll draw it next week.

00:28:54 Sweet.

00:28:54 Yeah, that's a fun conference.

00:28:56 So, and it's a whole new set of people, too, since the last time I went of running it.

00:29:02 So, yeah.

00:29:03 Yeah.

00:29:04 How about something funny?

00:29:05 I've got something good for you.

00:29:07 All right.

00:29:08 Imagine, Brian, you are junior in high school or something.

00:29:12 Now, I guess the joke, it's got to be a little bit older.

00:29:14 College age, but decided not to go to college.

00:29:17 You're on your first time meeting your potential newish girlfriend's father.

00:29:23 They're a little upset that he decided to go into this computer thing.

00:29:26 They don't know if it's going to work out.

00:29:27 And they wish that he had gone to college.

00:29:30 So you meet the father.

00:29:31 And the father says, my daughter told me that you're a console developer.

00:29:34 So PlayStation, Xbox, and just know what?

00:29:39 The young guy wearing a hoodie says, I console.logster.

00:29:44 You have exactly 10 seconds to get out of my house.

00:29:50 yeah console developer love it that's what i got for you um of course comes from uh programming humor which is doing a good job with the memes yeah i think we need to like redo that one look um

00:30:03 uh what's that uh some cli stuff right yeah like a print print to print debugger yeah very good so

00:30:11 I heard you're a console log, a console developer.

00:30:14 Amazing.

00:30:15 Console.log.

00:30:18 Yeah.

00:30:18 I like that he is sir.

00:30:19 I console.log, sir.

00:30:25 Yeah.

00:30:26 Do you pronounce parens in spoken English?

00:30:30 I guess.

00:30:31 I don't know.

00:30:32 Yeah.

00:30:33 Open close.

00:30:34 Yeah.

00:30:34 I don't know.

00:30:36 All right.

00:30:37 Well, awesome.

00:30:39 Oh, wait.

00:30:40 Real time follow up, by the way.

00:30:41 Brian Weber says thanks for mentioning his extra.

00:30:43 So very good.

00:30:44 And thanks, Brian.

00:30:45 And thanks to everybody.

00:30:46 We had quite a show of people showing up at 7 a.m.

00:30:50 Interesting.

00:30:51 We got some from Sydney, Michael Booth.

00:30:55 Hey, thanks for being live in a friendlier time slot than usual.

00:30:59 So maybe we should do an early one once in a while anyway.

00:31:02 Yeah, absolutely.

00:31:03 Mix it up a little.

00:31:04 I mean, how about this?

00:31:05 How about we just get a random number generator?

00:31:07 It generates a number between zero and 24 every day.

00:31:11 Every week, we just hit that.

00:31:12 And whatever hour that is, that's when we record.

00:31:14 I hate that idea.

00:31:15 It's 3 a.m.

00:31:16 You hate it?

00:31:17 I don't like that idea.

00:31:19 I honestly hate it too.

00:31:21 But I'm glad some people got to attend.

00:31:24 All right.

00:31:25 Well, thanks, everybody, for listening.

00:31:27 And we will talk to you next week.

