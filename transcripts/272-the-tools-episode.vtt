
00:00:00.000 --> 00:00:04.440
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbud.


00:00:04.440 --> 00:00:10.700
This is episode 272, recorded February 23rd, 2022.


00:00:10.700 --> 00:00:11.500
I'm Michael Kennedy.


00:00:11.500 --> 00:00:12.500
And I'm Brian Okken.


00:00:12.500 --> 00:00:14.500
And I'm Calvin Hendricks-Parker.


00:00:14.500 --> 00:00:16.500
Hey Calvin, so good to have you here.


00:00:16.500 --> 00:00:17.700
I'm excited to be back.


00:00:17.700 --> 00:00:19.100
Yeah, it's great to have you back.


00:00:19.100 --> 00:00:22.400
I also want to say this episode is brought to you by Fusion Auth, a new sponsor.


00:00:22.400 --> 00:00:24.600
Thank you so much to them for supporting the show.


00:00:24.600 --> 00:00:27.100
Check them out at pythonbytes.fm/fusionauth.


00:00:27.100 --> 00:00:28.100
More on that later.


00:00:28.100 --> 00:00:32.840
Calvin, it's been a while since you've been here, but you're a frequent guest. How about


00:00:32.840 --> 00:00:35.200
just tell quickly people about yourself?


00:00:35.200 --> 00:00:40.560
Sure. I've been a almost, I guess, nearly lifelong Pythonista at this point. I'm going


00:00:40.560 --> 00:00:45.280
back a long ways, but started a company back in 1999 called Six Feet Up, where I am the


00:00:45.280 --> 00:00:49.520
CTO and co-founder, and we are all things Python and all things cloud. So we're doing


00:00:49.520 --> 00:00:53.720
some cool stuff there. I've been very involved in some open source projects, like the Plone


00:00:53.720 --> 00:01:00.440
Foundation for the Plone CMS. We're very involved in Django as well, sponsoring the Django Software


00:01:00.440 --> 00:01:04.040
Foundation. So super excited to be involved in open source and all things Python.


00:01:04.040 --> 00:01:08.200
Right on. So if I was a company or person and said, I need a Python app, I need some help with


00:01:08.200 --> 00:01:11.720
it, or maybe someone even build it, I might reach out to you all and you might build it for me.


00:01:11.720 --> 00:01:14.760
Yeah. No, we'd love to talk about those kinds of opportunities.


00:01:14.760 --> 00:01:17.080
The harder and more challenging, the better.


00:01:17.080 --> 00:01:18.600
Yeah. Those are the fun ones.


00:01:18.600 --> 00:01:20.920
Yeah. I agree. I completely agree.


00:01:21.960 --> 00:01:22.800
I like easy.


00:01:22.800 --> 00:01:28.000
- Well, I think this one you got here


00:01:28.000 --> 00:01:30.400
and this for the first one, Brian, maybe not so easy.


00:01:30.400 --> 00:01:31.240
- Not so easy.


00:01:31.240 --> 00:01:32.060
- What's up with your mocking?


00:01:32.060 --> 00:01:33.320
Why is it not working?


00:01:33.320 --> 00:01:34.680
- Well, your mocks.


00:01:34.680 --> 00:01:37.400
So this is a great, actually, this is a rabbit hole,


00:01:37.400 --> 00:01:40.220
but well, mocks are a rabbit hole.


00:01:40.220 --> 00:01:43.840
So Ned Batchelder, great guy,


00:01:43.840 --> 00:01:48.840
he writes a lot of great stuff, also maintains coverage.


00:01:48.880 --> 00:01:50.920
But he wrote an article called,


00:01:50.920 --> 00:01:53.320
"Why Your Mocks Still Don't Work,"


00:01:53.320 --> 00:01:58.200
which is a reference to an earlier article he wrote


00:01:58.200 --> 00:02:00.560
called "Why Your Mock Doesn't Work,"


00:02:00.560 --> 00:02:02.800
and he wrote that in 2019.


00:02:02.800 --> 00:02:05.200
So if you haven't read this first,


00:02:05.200 --> 00:02:07.400
so I'm gonna go back and recommend both of these.


00:02:07.400 --> 00:02:09.960
So "Why Your Mocks Don't Work,"


00:02:09.960 --> 00:02:13.560
or "Why Your Mock Doesn't Work,"


00:02:13.560 --> 00:02:14.920
is an excellent article.


00:02:14.920 --> 00:02:18.180
It starts talking about just like,


00:02:18.180 --> 00:02:20.380
- Well, to think about how mocks work,


00:02:20.380 --> 00:02:23.540
you really have to understand Python namespaces


00:02:23.540 --> 00:02:27.180
and names and how imports work and all of that stuff.


00:02:27.180 --> 00:02:29.640
And it, maybe you don't think you should have to,


00:02:29.640 --> 00:02:30.860
but you kind of do.


00:02:30.860 --> 00:02:31.700
So--


00:02:31.700 --> 00:02:35.320
- And imports, those are not entirely obvious.


00:02:35.320 --> 00:02:37.220
Like the way that that happens,


00:02:37.220 --> 00:02:38.760
- No. - compared to other languages,


00:02:38.760 --> 00:02:40.300
right, where you just say, I'm using this library.


00:02:40.300 --> 00:02:42.820
There's like, it's way more direct.


00:02:42.820 --> 00:02:46.320
- So Ned starts off with like this really great example


00:02:46.320 --> 00:02:48.000
of just basically two variables,


00:02:48.000 --> 00:02:50.380
X and Y pointing to a number.


00:02:50.380 --> 00:02:52.860
And if you assign to each other,


00:02:52.860 --> 00:02:54.680
but you don't really point at another variable,


00:02:54.680 --> 00:02:57.340
you point at the thing that the variable is pointing to


00:02:57.340 --> 00:03:00.640
if you assign X to Y or Y to X or something.


00:03:00.640 --> 00:03:03.520
And this does have to do with importing


00:03:03.520 --> 00:03:05.880
because the names that you import


00:03:05.880 --> 00:03:09.040
are just kind of variable names that point to something.


00:03:09.040 --> 00:03:14.040
So he talks about namespaces and where things point to,


00:03:14.040 --> 00:03:16.080
talks about importing and the difference,


00:03:16.080 --> 00:03:21.080
mostly the difference between from foo import thing


00:03:21.080 --> 00:03:25.840
instead of import foo and reference it as foo thing.


00:03:25.840 --> 00:03:28.800
Those are completely different names


00:03:28.800 --> 00:03:31.760
within your Python application.


00:03:31.760 --> 00:03:35.120
So talk, walks through that, talks about it and why.


00:03:35.120 --> 00:03:38.880
So if you've got a value from one module


00:03:38.880 --> 00:03:40.560
pointing to an original value,


00:03:40.560 --> 00:03:44.480
and then another one pointing to the same thing,


00:03:44.480 --> 00:03:46.300
If you mock the wrong place,


00:03:46.300 --> 00:03:49.860
you're not going to get what you think is right.


00:03:49.860 --> 00:03:54.860
So basically, and this is terrible to discuss over podcast.


00:03:54.860 --> 00:03:57.040
So I recommend looking at this


00:03:57.040 --> 00:04:01.340
because it's a really great example of how mocks work


00:04:01.340 --> 00:04:04.980
and why they act the way they do


00:04:04.980 --> 00:04:07.500
and you'll be able to fix a lot of your problems.


00:04:07.500 --> 00:04:09.200
So this is a good recommendation.


00:04:09.200 --> 00:04:12.080
But the one that we're trying to talk about right now,


00:04:12.080 --> 00:04:13.880
why your mock still doesn't work,


00:04:13.880 --> 00:04:17.340
has to do with this cool decorator thing that Mach,


00:04:17.340 --> 00:04:20.560
I don't remember when a unit test Mach added this,


00:04:20.560 --> 00:04:22.500
but there's a patch decorator.


00:04:22.500 --> 00:04:25.980
Actually, I'm gonna link to the show notes somewhere.


00:04:25.980 --> 00:04:29.560
We talk about the patch decorator and it's pretty neat.


00:04:29.560 --> 00:04:31.520
Actually, I'm jumping all around, sorry.


00:04:31.520 --> 00:04:35.340
But if you just say like patch something,


00:04:35.340 --> 00:04:37.420
what happens on your test?


00:04:37.420 --> 00:04:39.740
Like in this example, he's got two,


00:04:39.740 --> 00:04:44.580
You got a patch cool feature dot expensive preparation


00:04:44.580 --> 00:04:47.460
and patch cool feature dot logger.


00:04:47.460 --> 00:04:48.900
And you're not patching it with anything


00:04:48.900 --> 00:04:49.900
with this decorator.


00:04:49.900 --> 00:04:53.400
What happens is you get these like other variables


00:04:53.400 --> 00:04:55.740
that you can add as parameters,


00:04:55.740 --> 00:04:57.740
mock prep and mock logger,


00:04:57.740 --> 00:04:59.540
that you can use those to change it.


00:04:59.540 --> 00:05:01.620
You can change the behavior,


00:05:01.620 --> 00:05:03.260
the, you can use asserts on it.


00:05:03.260 --> 00:05:07.500
You can change the return values on these through that.


00:05:07.500 --> 00:05:09.940
It's just a, this is a way to get a handle


00:05:09.940 --> 00:05:11.020
into your mock object.


00:05:11.020 --> 00:05:11.960
It's pretty cool.


00:05:11.960 --> 00:05:17.380
And, but the trick is they have to be in the right order.


00:05:17.380 --> 00:05:20.040
And this example looks like it's fine,


00:05:20.040 --> 00:05:22.700
but you've got logger at the bottom decorator,


00:05:22.700 --> 00:05:24.420
which is really the first,


00:05:24.420 --> 00:05:27.580
and prep as the above decorator.


00:05:27.580 --> 00:05:28.420
And--


00:05:28.420 --> 00:05:29.420
- It's the first one, Brian.


00:05:29.420 --> 00:05:31.820
It says the first line says this prep one,


00:05:31.820 --> 00:05:33.100
the second one says logger.


00:05:33.100 --> 00:05:35.140
- Yeah, but that's not the way it happens.


00:05:35.140 --> 00:05:39.540
The catch here and the punchline is,


00:05:39.540 --> 00:05:41.900
when you're reading decorators,


00:05:41.900 --> 00:05:45.700
it goes bottom up and left to right.


00:05:45.700 --> 00:05:46.940
>> Like onions.


00:05:46.940 --> 00:05:48.180
>> Sure.


00:05:48.180 --> 00:05:50.620
>> There's layers around your code


00:05:50.620 --> 00:05:53.500
and the inner layer is the first one it sees.


00:05:53.500 --> 00:05:56.460
>> The way he has it originally written,


00:05:56.460 --> 00:05:58.080
it just fails, it doesn't work.


00:05:58.080 --> 00:06:00.500
The second punchline is,


00:06:00.500 --> 00:06:03.540
unless you've got a real good reason to use


00:06:03.540 --> 00:06:07.380
AutoSpec because AutoSpec would have caught this problem like right away.


00:06:07.380 --> 00:06:12.180
And what AutoSpec does is it says the thing that you're mocking,


00:06:12.180 --> 00:06:16.500
you have to call it with the same interface that the thing had in the first place.


00:06:16.500 --> 00:06:24.100
And so if you've got a class or a module that has a function in it,


00:06:24.100 --> 00:06:28.100
you can't call other functions, whereas normal mocks, you can call whatever you want.


00:06:29.060 --> 00:06:31.460
So the default is free for all.


00:06:31.460 --> 00:06:34.100
What you really should do is auto spec equals true.


00:06:34.100 --> 00:06:36.660
And really, a lot of people, me included,


00:06:36.660 --> 00:06:38.820
wish that that was the default to begin with.


00:06:38.820 --> 00:06:41.300
But for historical reasons, it can't be


00:06:41.300 --> 00:06:42.820
because it would break other stuff.


00:06:42.820 --> 00:06:43.540
But anyway.


00:06:43.540 --> 00:06:44.760
Yeah.


00:06:44.760 --> 00:06:45.640
Yeah.


00:06:45.640 --> 00:06:48.100
If it's not the default to start with,


00:06:48.100 --> 00:06:50.900
if you put that in to say now only behave


00:06:50.900 --> 00:06:54.100
as if you are the thing that I say you're pretending to be,


00:06:54.100 --> 00:06:55.460
that's going to crash a ton of stuff.


00:06:55.460 --> 00:06:55.780
Yeah.


00:06:55.780 --> 00:06:56.420
So yeah.


00:06:56.420 --> 00:06:58.500
And then the third and final punch line is


00:06:58.500 --> 00:07:01.100
is just don't use mocks.


00:07:01.100 --> 00:07:03.520
(laughing)


00:07:03.520 --> 00:07:07.380
Even he mentions it in both articles,


00:07:07.380 --> 00:07:10.020
avoid using mocks if you can.


00:07:10.020 --> 00:07:11.060
- Absolutely.


00:07:11.060 --> 00:07:11.980
Felix out in the audience says,


00:07:11.980 --> 00:07:14.140
"Tiny feature with a lot of power, this auto spec."


00:07:14.140 --> 00:07:14.980
- Yes.


00:07:14.980 --> 00:07:16.660
- Very much like Yoda would put it, I love it.


00:07:16.660 --> 00:07:17.540
All right.


00:07:17.540 --> 00:07:18.580
- What do we got next?


00:07:18.580 --> 00:07:21.060
- Thoughts on mocking real quick before we move on?


00:07:21.060 --> 00:07:23.900
- We are just diving into that


00:07:23.900 --> 00:07:26.100
and I don't do a lot of the test work myself.


00:07:26.100 --> 00:07:30.260
So I'm sure Brian is the super expert on all things pytest,


00:07:30.260 --> 00:07:33.360
of course, so I don't have a huge opinion here


00:07:33.360 --> 00:07:35.100
on specific mocking,


00:07:35.100 --> 00:07:37.260
although I think it is important for folks to realize


00:07:37.260 --> 00:07:40.020
that yeah, decorators go from like that


00:07:40.020 --> 00:07:41.500
closest to the function out.


00:07:41.500 --> 00:07:43.660
It was an important call out there.


00:07:43.660 --> 00:07:47.100
- Yeah, the other one was from thing import something,


00:07:47.100 --> 00:07:49.020
and then you patch the thing inside there.


00:07:49.020 --> 00:07:50.620
It's kind of that, that I actually,


00:07:50.620 --> 00:07:52.260
that was news to me, that's very interesting.


00:07:52.260 --> 00:07:53.700
All right, also news to me,


00:07:53.700 --> 00:07:55.900
please, please tell me about this, Chris May.


00:07:55.900 --> 00:07:58.580
Thank you, Chris May, for sending this over.


00:07:58.580 --> 00:08:01.300
And wow, I don't know if you've heard about,


00:08:01.300 --> 00:08:06.300
please folks, PLS as an LS replacement for Linux and macOS,


00:08:06.300 --> 00:08:09.020
but wow, this thing is cool.


00:08:09.020 --> 00:08:11.100
Was this, have either of you heard about this?


00:08:11.100 --> 00:08:11.980
- Not until today.


00:08:11.980 --> 00:08:14.220
And I went and installed it as part of my demo


00:08:14.220 --> 00:08:16.340
so I could see it, 'cause it looks pretty darn awesome.


00:08:16.340 --> 00:08:17.940
- So this is an LS replacement.


00:08:17.940 --> 00:08:19.940
And I know there are other LS replacements


00:08:19.940 --> 00:08:22.140
that already exist, so you can do more things.


00:08:22.140 --> 00:08:25.260
But this is a developer focused one written in Python


00:08:25.260 --> 00:08:26.980
That's pretty darn awesome.


00:08:26.980 --> 00:08:30.580
So if you go look at the image I linked to,


00:08:30.580 --> 00:08:32.320
or just go check out the site,


00:08:32.320 --> 00:08:33.660
you can see that if you say,


00:08:33.660 --> 00:08:36.540
so I've aliased ls to pls.


00:08:36.540 --> 00:08:37.900
And if I just say ls,


00:08:37.900 --> 00:08:41.840
it shows you the contents of your directory,


00:08:41.840 --> 00:08:42.680
folders on top,


00:08:42.680 --> 00:08:45.940
and then it has icons for the types of files that they are.


00:08:45.940 --> 00:08:48.360
So I did an ls, there's a git ignore,


00:08:48.360 --> 00:08:49.940
so it has a git branch icon.


00:08:49.940 --> 00:08:51.660
There's a license with the law.


00:08:51.660 --> 00:08:52.900
There's a markdown file.


00:08:52.900 --> 00:08:54.900
There's a Python file, the Python logo,


00:08:54.900 --> 00:08:58.460
but it goes beyond that, like it understands your gitignore


00:08:58.460 --> 00:09:00.740
and the files that are considered hidden


00:09:00.740 --> 00:09:03.240
are the gitignored ones as well.


00:09:03.240 --> 00:09:04.220
And it won't show you,


00:09:04.220 --> 00:09:06.660
even if you do like a hidden file listing,


00:09:06.660 --> 00:09:11.660
it won't show you things like the .es_store on macOS


00:09:11.660 --> 00:09:15.440
because that's in the gitignore.


00:09:15.440 --> 00:09:17.860
So the structure that it gives you is related to that.


00:09:17.860 --> 00:09:20.580
Also for Python, if you have a virtual environment,


00:09:20.580 --> 00:09:22.660
it'll treat that directory as hidden.


00:09:22.660 --> 00:09:24.300
And because the directory is hidden,


00:09:24.300 --> 00:09:27.620
like it's sort of suppressed in its visibility.


00:09:27.620 --> 00:09:29.920
So there's really cool features around this


00:09:29.920 --> 00:09:32.740
that have to do with basically saying,


00:09:32.740 --> 00:09:33.700
all right, you're a developer,


00:09:33.700 --> 00:09:37.500
you're listing files that are probably developer-like.


00:09:37.500 --> 00:09:39.540
Now what, now what do we do?


00:09:39.540 --> 00:09:42.020
So another part that's cool is you can do


00:09:42.020 --> 00:09:46.260
an please --details, which I alias to L


00:09:46.260 --> 00:09:48.420
'cause that's the LS like equivalent.


00:09:48.420 --> 00:09:51.020
And in this world, it shows you the same types of things,


00:09:51.020 --> 00:09:55.660
but it also shows you the size in human terms.


00:09:55.660 --> 00:09:59.660
So instead of like 101121171112,


00:09:59.660 --> 00:10:02.660
it would say that's 10.2 gigabytes, which is nice.


00:10:02.660 --> 00:10:04.820
But it also shows you the get status in the listing.


00:10:04.820 --> 00:10:09.100
So like it has a dash M next to a file I modified and so on.


00:10:09.100 --> 00:10:10.300
What do you all think of this?


00:10:10.300 --> 00:10:12.140
- I think it's excellent.


00:10:12.140 --> 00:10:14.580
I tried to use it and failed


00:10:14.580 --> 00:10:16.900
and you helped me understand why


00:10:16.900 --> 00:10:19.980
because you have to have fonts,


00:10:19.980 --> 00:10:22.340
like some special font installed, right?


00:10:22.340 --> 00:10:25.140
- So one of the questions when I posted this tweet


00:10:25.140 --> 00:10:28.300
was people like, how does it have custom icons?


00:10:28.300 --> 00:10:29.980
What magic is this?


00:10:29.980 --> 00:10:32.540
'Cause this'll work over, like if I SSH into somewhere


00:10:32.540 --> 00:10:34.340
and install please on the server,


00:10:34.340 --> 00:10:36.740
long as my local terminal is set up correctly,


00:10:36.740 --> 00:10:37.580
this will work.


00:10:37.580 --> 00:10:38.620
And they're like, how does this work?


00:10:38.620 --> 00:10:41.100
Well, the way it works is you have to have


00:10:41.100 --> 00:10:43.500
your terminal font set to a nerd font.


00:10:43.500 --> 00:10:45.540
So I've talked about nerd fonts before,


00:10:45.540 --> 00:10:48.680
but all these nerd fonts have all these special icons


00:10:48.680 --> 00:10:53.440
in them and long as your active terminal font is one of the nerd fonts,


00:10:53.440 --> 00:10:54.860
then you get all these cool behaviors.


00:10:54.860 --> 00:10:56.500
If you don't, you get squares,


00:10:56.500 --> 00:10:59.240
which are less than awesome.


00:10:59.240 --> 00:11:01.560
>> My only complaint with this,


00:11:01.560 --> 00:11:05.400
I wish it would have emulated more of the flags from standard LS,


00:11:05.400 --> 00:11:07.120
so that it just work alike.


00:11:07.120 --> 00:11:09.480
I installed it, the first thing I did was like,


00:11:09.480 --> 00:11:13.920
please dash AL and I got like a no L flag.


00:11:13.920 --> 00:11:14.600
>> We don't know what that is.


00:11:14.600 --> 00:11:16.320
>> Yeah, I didn't know what that was.


00:11:16.320 --> 00:11:18.040
>> Yeah, it's its own thing.


00:11:18.040 --> 00:11:19.320
And that's why I did the alias on it.


00:11:19.320 --> 00:11:20.480
And I'm like, okay, well, I'll just,


00:11:20.480 --> 00:11:22.000
I'll do these things.


00:11:22.000 --> 00:11:23.120
Another thing that's interesting,


00:11:23.120 --> 00:11:25.420
it has a, you can set up these,


00:11:25.420 --> 00:11:30.360
these YAML configuration files that control how it looks.


00:11:30.360 --> 00:11:33.520
And then you can put those kind of like Node.js does


00:11:33.520 --> 00:11:34.360
with Node modules.


00:11:34.360 --> 00:11:35.400
Like you can put it at different,


00:11:35.400 --> 00:11:38.920
or the project.json, you can put it at different levels.


00:11:38.920 --> 00:11:41.600
And if you go into a certain project


00:11:41.600 --> 00:11:43.600
that you've had of a configuration file


00:11:43.600 --> 00:11:44.720
and there's somewhere,


00:11:44.720 --> 00:11:46.280
it'll pick up that configuration


00:11:46.280 --> 00:11:49.440
and then use that to like customize how it looks for those.


00:11:49.440 --> 00:11:52.000
So that's kind of an interesting thing as well.


00:11:52.000 --> 00:11:52.840
- That is awesome.


00:11:52.840 --> 00:11:55.440
I mean, we need more like fun stuff


00:11:55.440 --> 00:11:56.920
in our terminals as developers.


00:11:56.920 --> 00:11:59.000
I totally love this.


00:11:59.000 --> 00:12:01.160
This is absolutely the way to get people hooked


00:12:01.160 --> 00:12:03.720
on using the terminal in the console.


00:12:03.720 --> 00:12:06.160
- Yes, and I was thinking about like server management,


00:12:06.160 --> 00:12:08.200
which we'll get to later, right Calvin?


00:12:08.200 --> 00:12:09.020
- Yeah, yeah.


00:12:09.020 --> 00:12:10.640
- But if you wanna go into the server


00:12:10.640 --> 00:12:13.760
and so I'm gonna SSH in and do a thing,


00:12:13.760 --> 00:12:17.440
like this is your entire user interface to that place.


00:12:17.440 --> 00:12:18.480
>> It's your world.


00:12:18.480 --> 00:12:19.880
>> Yeah, this is your world.


00:12:19.880 --> 00:12:23.800
This is a way to bring a little bit more UI information


00:12:23.800 --> 00:12:28.080
rather than just raw white text listing of files.


00:12:28.080 --> 00:12:30.400
I feel like there's actually a lot of value in this.


00:12:30.400 --> 00:12:31.400
>> Totally.


00:12:31.400 --> 00:12:35.200
>> Awesome. Let's see a Dean out in the audience and former.


00:12:35.200 --> 00:12:37.520
I thought my life was complete until today.


00:12:37.520 --> 00:12:40.280
I didn't know this was missing from my life, but it is.


00:12:40.280 --> 00:12:41.280
Yes.


00:12:41.280 --> 00:12:44.280
Please, more terminal stuff.


00:12:44.280 --> 00:12:45.280
Absolutely.


00:12:45.280 --> 00:12:48.280
Speaking of more terminal stuff.


00:12:48.280 --> 00:12:51.280
Speaking of more terminal stuff, yeah, take it away.


00:12:51.280 --> 00:12:52.280
All right.


00:12:52.280 --> 00:12:56.280
So we over at 6PF have been very focused on the developer experience.


00:12:56.280 --> 00:13:03.280
And so once a week we get together and talk about just, we do a code review, but really it's more of a show and tell.


00:13:03.280 --> 00:13:07.780
This is something I showed off last week at our code and review in Show and Tell,


00:13:07.780 --> 00:13:12.540
which is a terminal that is GPU-based and written in Python.


00:13:12.540 --> 00:13:14.820
It's called KITTY. If you've not used it,


00:13:14.820 --> 00:13:18.220
it actually is a super awesome, super fast.


00:13:18.220 --> 00:13:21.820
Basically, I found it to just be a super smooth experience.


00:13:21.820 --> 00:13:24.540
The reason I had revisited it was I'd been using


00:13:24.540 --> 00:13:27.380
Tmux forever and before that I was using Screen.


00:13:27.380 --> 00:13:31.940
I wanted to just have the ultimate power tools available to me as a developer


00:13:31.940 --> 00:13:35.000
and my primary mode of operation


00:13:35.000 --> 00:13:37.880
is basically hanging out in the shell or an editor all day long,


00:13:37.880 --> 00:13:39.880
so I want the best tools possible.


00:13:39.880 --> 00:13:42.240
I'd highly recommend folks check out KITTI.


00:13:42.240 --> 00:13:44.920
It is absolutely tuned for performance.


00:13:44.920 --> 00:13:46.720
You may ask, "Why the heck would I want


00:13:46.720 --> 00:13:49.720
a GPU-enabled terminal that's just showing me text?"


00:13:49.720 --> 00:13:52.560
It's because I want the most performance possible out of


00:13:52.560 --> 00:13:54.640
my system when I'm using it.


00:13:54.640 --> 00:13:58.400
I was going to give a quick little demo here of KITTI.


00:13:58.400 --> 00:14:00.440
This is actually using PLS.


00:14:00.440 --> 00:14:02.520
- I'm there, yeah, I see it, fantastic.


00:14:02.520 --> 00:14:03.360
- I have the right--


00:14:03.360 --> 00:14:06.040
- And what is this, oh my, is this oh my posh also?


00:14:06.040 --> 00:14:06.880
What do you got for the--


00:14:06.880 --> 00:14:08.800
- Oh, for the bullet train down there.


00:14:08.800 --> 00:14:11.120
So it's actually bullet train core.


00:14:11.120 --> 00:14:12.360
It's not maintained anymore.


00:14:12.360 --> 00:14:15.560
That's probably my next venture


00:14:15.560 --> 00:14:17.040
is gonna be replacing that line with some new--


00:14:17.040 --> 00:14:18.200
- Starship or something like that.


00:14:18.200 --> 00:14:20.960
- Yeah, exactly, some new system


00:14:20.960 --> 00:14:23.400
for showing my awesome prompt up there.


00:14:23.400 --> 00:14:26.160
But yeah, if you get the right fonts installed


00:14:26.160 --> 00:14:29.060
and all that, KITTI supports, all that stuff seamlessly,


00:14:29.060 --> 00:14:30.620
It's very, very fast.


00:14:30.620 --> 00:14:32.100
And one really cool thing,


00:14:32.100 --> 00:14:33.740
since we're all like Pythonistas


00:14:33.740 --> 00:14:36.300
and people who are listening to this would totally relate,


00:14:36.300 --> 00:14:40.140
you can extend kitty with kittens


00:14:40.140 --> 00:14:42.840
that are basically Python plugins for kitty.


00:14:42.840 --> 00:14:45.220
So if you actually, I'll give you a quick example.


00:14:45.220 --> 00:14:46.380
- It's terrible. - If I run kitty,


00:14:46.380 --> 00:14:47.220
I love it, but I love it.


00:14:47.220 --> 00:14:49.020
- I kind of love it, actually.


00:14:49.020 --> 00:14:52.300
- So you just, you invoke kitty with the kitten flag


00:14:52.300 --> 00:14:54.260
and say like what kitten you wanna use.


00:14:54.260 --> 00:14:55.900
In this case, I'm gonna use iCat.


00:14:55.900 --> 00:14:59.820
I'm gonna just basically echo out a Slack emoji


00:14:59.820 --> 00:15:02.220
that we use for Python.


00:15:02.220 --> 00:15:03.700
Oops, uh-oh.


00:15:03.700 --> 00:15:06.820
Oh no, is this gonna be like the total demo guys


00:15:06.820 --> 00:15:08.740
not being very kind to me now?


00:15:08.740 --> 00:15:12.340
- I love that your prompt has the Python version


00:15:12.340 --> 00:15:14.020
and stuff in there, that's great.


00:15:14.020 --> 00:15:16.740
- Oh yeah, if you're in a specific like pyenv area,


00:15:16.740 --> 00:15:18.580
it definitely shows up.


00:15:18.580 --> 00:15:20.340
Let me just try it here.


00:15:20.340 --> 00:15:22.620
I cat Python.


00:15:22.620 --> 00:15:23.460
Oh, there we go.


00:15:23.460 --> 00:15:24.900
So I must've just been in the wrong directory.


00:15:24.900 --> 00:15:27.940
But so you can actually show graphics on the screen.


00:15:27.940 --> 00:15:29.740
So if I want to look at an image real quick,


00:15:29.740 --> 00:15:31.860
I don't need to go to Finder and open up Preview


00:15:31.860 --> 00:15:34.020
and like do a quick look on an image.


00:15:34.020 --> 00:15:36.940
I can actually like, you know, quick look on any image I want.


00:15:36.940 --> 00:15:39.140
And one of the things I did want to show off,


00:15:39.140 --> 00:15:40.620
I go back to the director.


00:15:40.620 --> 00:15:41.740
- For people who are listening,


00:15:41.740 --> 00:15:45.300
this looks like a full high res image in the terminal,


00:15:45.300 --> 00:15:46.180
based on a PNG.


00:15:46.180 --> 00:15:47.700
- So I used iCat, which is a kitten,


00:15:47.700 --> 00:15:49.780
to display an image directly in the terminal.


00:15:49.780 --> 00:15:52.180
And now if I wanted to do show even some coolers,


00:15:52.180 --> 00:15:53.380
because one of the features of KITTI


00:15:53.380 --> 00:15:55.700
is it's basically got a graphic subsystem in here.


00:15:55.700 --> 00:15:58.780
If I wanted to look at my markdown files,


00:15:58.780 --> 00:16:01.180
normally if I'd use bat to look at my markdown,


00:16:01.180 --> 00:16:02.940
like for the readme that's in here,


00:16:02.940 --> 00:16:05.680
you get the content highlighted,


00:16:05.680 --> 00:16:08.880
markdown, cool, not super great.


00:16:08.880 --> 00:16:10.740
But if I do MDCat,


00:16:10.740 --> 00:16:12.060
which is KITTY enabled,


00:16:12.060 --> 00:16:14.740
it actually leverages the KITTY subsystem here.


00:16:14.740 --> 00:16:19.660
I can actually review my markdown file with images in line.


00:16:19.660 --> 00:16:22.340
You can see that the XKCD cartoon is


00:16:22.340 --> 00:16:25.340
actually embedded into the readme of that document.


00:16:25.340 --> 00:16:26.660
It does a little better job of


00:16:26.660 --> 00:16:28.780
coloring and highlighting the syntax.


00:16:28.780 --> 00:16:30.920
If you want to preview Markdown documents without again,


00:16:30.920 --> 00:16:32.660
not going to preview or not going to


00:16:32.660 --> 00:16:35.200
rendering it to HTML and viewing your browser,


00:16:35.200 --> 00:16:37.740
you can actually view it right in your terminal


00:16:37.740 --> 00:16:41.620
with the images shown in line, which is super awesome.


00:16:41.620 --> 00:16:44.080
One last thing, one more trick I'll show you.


00:16:44.080 --> 00:16:48.020
There is a kitty kitten for viewing diffs in a rich tool.


00:16:48.020 --> 00:16:50.400
If I do get diff tool,


00:16:50.400 --> 00:16:57.040
I've configured with my .gitconfig to configure an alternate diff tool for diff.


00:16:57.040 --> 00:17:03.120
And now I get this really beautiful high-res graphic representation of my diff, my files.


00:17:03.120 --> 00:17:07.200
So really pretty. You can see there's two diffs, two different files.


00:17:07.200 --> 00:17:11.840
I can page through the different files and it shows me side-by-side diffs.


00:17:11.840 --> 00:17:13.280
Is that still in the terminal?


00:17:13.280 --> 00:17:15.520
That is still in the terminal. I did not leave my terminal.


00:17:15.520 --> 00:17:16.560
It looks like a new window.


00:17:16.560 --> 00:17:19.040
It did. It looked like a new window, but it's actually all in terminal.


00:17:19.040 --> 00:17:21.740
so you can stay in your terminal, stay at your keyboard,


00:17:21.740 --> 00:17:24.880
and all the shortcuts are super nice.


00:17:24.880 --> 00:17:26.040
One last thing.


00:17:26.040 --> 00:17:28.740
Oh, the diff just sold me, so...


00:17:28.740 --> 00:17:31.340
Yeah, and you can split your windows, obviously,


00:17:31.340 --> 00:17:34.480
like other kinds of terminal emulators,


00:17:34.480 --> 00:17:36.080
like if you're using Tmux,


00:17:36.080 --> 00:17:37.540
but then it's got all the layouts built in,


00:17:37.540 --> 00:17:40.840
so if I wanted, like, horizontal or vertical or grid,


00:17:40.840 --> 00:17:44.080
or if I wanted to, like, just get to the current one I'm on,


00:17:44.080 --> 00:17:46.680
you've got all that available to you with nice shortcut keys,


00:17:46.680 --> 00:17:49.040
and you can just, I got rid of TMUX


00:17:49.040 --> 00:17:51.920
and started just going all in on KDE only.


00:17:51.920 --> 00:17:53.200
- Okay, I got a question.


00:17:53.200 --> 00:17:55.360
So I've always been confused about this whole windowing


00:17:55.360 --> 00:17:57.880
thing because I just opened another terminal.


00:17:57.880 --> 00:18:00.160
So--


00:18:00.160 --> 00:18:01.000
- Oh, I see what your question is.


00:18:01.000 --> 00:18:03.480
I don't wanna open another terminal.


00:18:03.480 --> 00:18:06.160
I don't wanna reach for my mouse when I have to like go


00:18:06.160 --> 00:18:07.280
between terminal windows.


00:18:07.280 --> 00:18:10.960
So I'd rather have like multiple tabs and then have splits.


00:18:10.960 --> 00:18:12.920
And so I can have like a paging going on one window


00:18:12.920 --> 00:18:14.120
or another window.


00:18:14.120 --> 00:18:18.000
I can then edit these things, make them shorter or taller,


00:18:18.000 --> 00:18:19.560
or split them in a different way.


00:18:19.560 --> 00:18:22.640
I feel like just keeping my hands on a keyboard keeps me more


00:18:22.640 --> 00:18:26.720
productive as a developer as opposed to reaching over to the mouse.


00:18:26.720 --> 00:18:28.040
I know it's not that far away,


00:18:28.040 --> 00:18:29.720
but I feel like it breaks that flow.


00:18:29.720 --> 00:18:32.200
If you're typing away at code and you want to


00:18:32.200 --> 00:18:35.000
quickly open up a tail for a log in


00:18:35.000 --> 00:18:38.240
the same window right below where you're running the process,


00:18:38.240 --> 00:18:41.460
you're just a couple of keystrokes away and you've got that open and going.


00:18:41.460 --> 00:18:42.680
>> Cool. Nice.


00:18:42.680 --> 00:18:43.980
>> Yeah.


00:18:43.980 --> 00:18:47.100
>> That's really cool. I know we're not to the joke section yet,


00:18:47.100 --> 00:18:49.540
but you know the joke about how do you generate a random string,


00:18:49.540 --> 00:18:53.900
put a new computer science student inside of them and ask them to exit.


00:18:53.900 --> 00:18:54.380
>> Yeah.


00:18:54.380 --> 00:18:57.820
>> I think the new version is put four of them in


00:18:57.820 --> 00:19:01.500
these different panes controlled here and ask them to exit the top right one.


00:19:01.500 --> 00:19:04.380
>> I'll demo that right now.


00:19:04.380 --> 00:19:07.500
>> Even more random number or word.


00:19:07.500 --> 00:19:09.660
>> There we go. Boom, did it.


00:19:10.020 --> 00:19:11.040
(laughing)


00:19:11.040 --> 00:19:13.000
- I'm gonna try kitty, this looks great.


00:19:13.000 --> 00:19:16.120
- It's super configurable, it supports all the nerd fonts,


00:19:16.120 --> 00:19:18.320
all the color schemes, I've got, you know,


00:19:18.320 --> 00:19:19.960
there's a bunch of cool plugins for it.


00:19:19.960 --> 00:19:22.240
I've got a search plugin which searches through your,


00:19:22.240 --> 00:19:23.480
back through your terminal.


00:19:23.480 --> 00:19:26.360
And so if I was, there's nothing in that specific one,


00:19:26.360 --> 00:19:29.680
but if I search through here and wanted to search backward,


00:19:29.680 --> 00:19:32.180
it uses FZF to do searching backwards.


00:19:32.180 --> 00:19:33.420
So if I was looking for like LS,


00:19:33.420 --> 00:19:36.740
you see it highlighted the word LS or 2020.


00:19:36.740 --> 00:19:37.820
And then if I had multiple ones


00:19:37.820 --> 00:19:39.960
I could just arrow back up between them.


00:19:39.960 --> 00:19:40.800
- Nice.


00:19:40.800 --> 00:19:42.520
- So it's all built in. - Fantastic.


00:19:42.520 --> 00:19:43.860
Yeah, now really cool.


00:19:43.860 --> 00:19:47.900
Also really cool is our new sponsor, Fusion Auth.


00:19:47.900 --> 00:19:50.600
Thank you them for sponsoring this episode.


00:19:50.600 --> 00:19:52.940
So let me just tell you really quickly about them.


00:19:52.940 --> 00:19:55.480
They're an authentication and authorization platform


00:19:55.480 --> 00:19:57.760
built for devs by devs.


00:19:57.760 --> 00:20:00.680
It solves the problem of building essential user security


00:20:00.680 --> 00:20:04.000
without adding the risk and distraction from your main app.


00:20:04.000 --> 00:20:07.000
Fusion Auth has all the features you need


00:20:07.000 --> 00:20:10.840
for great support at a price that won't break the bank.


00:20:10.840 --> 00:20:12.560
And you can either do self-hosting


00:20:12.560 --> 00:20:14.180
or you can get a fully managed solution


00:20:14.180 --> 00:20:16.400
running in any AWS region.


00:20:16.400 --> 00:20:17.780
So if you've got a side project


00:20:17.780 --> 00:20:19.640
that needs a custom login registration


00:20:19.640 --> 00:20:21.240
or multi-factor authentication,


00:20:21.240 --> 00:20:23.260
social logins or user management,


00:20:23.260 --> 00:20:24.960
you can download FusionAuth


00:20:24.960 --> 00:20:27.000
and get the community edition for free.


00:20:27.000 --> 00:20:29.600
And the best part is you can have unlimited users


00:20:29.600 --> 00:20:32.720
and there's no credit card or subscription required for that.


00:20:32.720 --> 00:20:36.000
So check them out at pythonbytes.fm/fusionauth


00:20:36.000 --> 00:20:39.120
or just click the link in your podcast player show notes


00:20:39.120 --> 00:20:41.680
and let them know you came from us.


00:20:41.680 --> 00:20:42.840
- I want that T-shirt.


00:20:42.840 --> 00:20:43.680
That's cool.


00:20:43.680 --> 00:20:44.500
- I know.


00:20:44.500 --> 00:20:46.760
Yeah, you got to get a cool T-shirt,


00:20:46.760 --> 00:20:50.440
cat slash et cetera slash pow password D.


00:20:50.440 --> 00:20:51.360
Very cool.


00:20:51.360 --> 00:20:52.200
- Nice.


00:20:52.200 --> 00:20:56.500
- I love when you get a cool T-shirt from our sponsors.


00:20:56.500 --> 00:20:57.340
All right.


00:20:57.340 --> 00:20:58.440
- Well Susan likes cats.


00:20:58.440 --> 00:20:59.880
- I know, and kitties.


00:20:59.880 --> 00:21:00.720
- And kitties.


00:21:00.720 --> 00:21:03.080
- I can tell that you're already a fan of kitties.


00:21:04.040 --> 00:21:08.760
- Well, so I don't know if Kitty is parallelized,


00:21:08.760 --> 00:21:12.260
but yeah, so I want to talk about parallels.


00:21:12.260 --> 00:21:15.260
And parallelization, say that three times.


00:21:15.260 --> 00:21:21.640
Anyway, I found this article by Jamie Welta,


00:21:21.640 --> 00:21:24.280
cool last name, actually,


00:21:24.280 --> 00:21:27.000
but it's called "Futures in Easy Parallelization."


00:21:27.000 --> 00:21:30.160
And I was like, you know, it was a pretty short article


00:21:30.160 --> 00:21:32.160
and I was like, it can't be that easy.


00:21:32.160 --> 00:21:37.160
But so this isn't talking about AIO stuff or asyncio.


00:21:37.160 --> 00:21:41.040
It's talking about,


00:21:41.040 --> 00:21:44.520
this one is talking about thread futures with threads.


00:21:44.520 --> 00:21:48.040
And this is, it's pretty cool.


00:21:48.040 --> 00:21:50.780
The idea is you've got just, maybe you've got,


00:21:50.780 --> 00:21:53.040
and it starts off with a simple example.


00:21:53.040 --> 00:21:55.160
I just have some work that I want done


00:21:55.160 --> 00:21:57.720
and I want it done on different threads


00:21:57.720 --> 00:21:59.160
or different processors.


00:21:59.160 --> 00:22:04.160
So this example brings up a thread pool,


00:22:04.160 --> 00:22:06.120
a thread pool executor,


00:22:06.120 --> 00:22:08.440
and then runs them all at the same time.


00:22:08.440 --> 00:22:10.160
Does an executor submit?


00:22:10.160 --> 00:22:12.520
And it's just a small snippet of code,


00:22:12.520 --> 00:22:14.080
just a handful of lines.


00:22:14.080 --> 00:22:15.240
And then I tried this out.


00:22:15.240 --> 00:22:17.680
So this example actually is kind of boring.


00:22:17.680 --> 00:22:21.200
It's just doing like a power X to the power of two


00:22:21.200 --> 00:22:23.840
or X squared on a couple of things.


00:22:23.840 --> 00:22:25.800
I think that's what star star is, isn't it?


00:22:25.800 --> 00:22:27.680
Is that power of?


00:22:27.680 --> 00:22:28.800
I don't remember.


00:22:28.800 --> 00:22:29.720
Yeah.


00:22:29.720 --> 00:22:30.560
X to the power of two.


00:22:30.560 --> 00:22:31.600
X, yeah, X squared.


00:22:31.600 --> 00:22:32.440
- X squared.


00:22:32.440 --> 00:22:37.200
So the other example seems a bit more down to earth


00:22:37.200 --> 00:22:40.880
and that's, and yes, on our screen,


00:22:40.880 --> 00:22:44.400
on the YouTube screen is just,


00:22:44.400 --> 00:22:46.520
it's the entire program here.


00:22:46.520 --> 00:22:49.920
It's just, you're taking a few websites


00:22:49.920 --> 00:22:51.960
and a couple of pages to go to


00:22:51.960 --> 00:22:56.960
and then actually just slurping those down with requests


00:22:56.960 --> 00:22:58.620
and grabbing something about them.


00:22:58.620 --> 00:23:00.900
And this example just as the result,


00:23:00.900 --> 00:23:03.020
whether it's a 200 or something like that.


00:23:03.020 --> 00:23:04.940
But it's a really short example


00:23:04.940 --> 00:23:07.200
and you've got parallelization going on.


00:23:07.200 --> 00:23:09.300
And I played with this, just downloaded it.


00:23:09.300 --> 00:23:11.300
The only, we'll have it in our show notes.


00:23:11.300 --> 00:23:14.840
The only error on this that I had to do is it's using,


00:23:14.840 --> 00:23:18.340
it's using time in here as just like a debug thing.


00:23:18.340 --> 00:23:20.580
And in the example, it doesn't import time.


00:23:20.580 --> 00:23:23.140
So you have to add that import time


00:23:23.140 --> 00:23:24.900
and it runs just fine like this.


00:23:24.900 --> 00:23:27.780
And this is a pretty quick way to add parallelization


00:23:27.780 --> 00:23:29.340
for some quick task.


00:23:29.340 --> 00:23:30.860
So I kind of like it.


00:23:30.860 --> 00:23:33.940
There's occasionally, especially like I would do it.


00:23:33.940 --> 00:23:36.700
There's a lot of huge log files I have to parse


00:23:36.700 --> 00:23:40.460
or big data files that I'm looking for stuff on


00:23:40.460 --> 00:23:44.440
or grabbing error logs off of different systems.


00:23:44.440 --> 00:23:47.100
And this would be a great example to just grab them all


00:23:47.100 --> 00:23:49.180
at the same time and pull them in.


00:23:49.180 --> 00:23:50.900
- Yeah, yeah, that's nice.


00:23:50.900 --> 00:23:54.420
You know, one thing that's cool about the futures


00:23:54.420 --> 00:23:57.060
you get back from the Threadpool executor,


00:23:57.060 --> 00:24:00.060
as you can say dot result and it blocks,


00:24:00.060 --> 00:24:02.060
whereas on asyncio it throws an exception


00:24:02.060 --> 00:24:04.160
and says it's not done rather than just blocking.


00:24:04.160 --> 00:24:05.960
- Oh yeah, yeah, and that's,


00:24:05.960 --> 00:24:07.460
the article kind of talks about that.


00:24:07.460 --> 00:24:10.980
It's one of the simplest things is you tell the executors,


00:24:10.980 --> 00:24:14.420
you call executor submit and that gets the jobs ready,


00:24:14.420 --> 00:24:15.540
but that doesn't block.


00:24:15.540 --> 00:24:19.060
Those are, you can submit as many as you want.


00:24:19.060 --> 00:24:23.180
And then in the example, he's just using like future.result


00:24:24.020 --> 00:24:28.100
in a list comprehension.


00:24:28.100 --> 00:24:29.940
And that for each of those result,


00:24:29.940 --> 00:24:32.100
that'll block until the next one's done.


00:24:32.100 --> 00:24:34.180
And this one's doing it in an order


00:24:34.180 --> 00:24:35.660
of which one you submitted it.


00:24:35.660 --> 00:24:37.860
That might not be the order they finish in,


00:24:37.860 --> 00:24:40.540
but you don't really care because you just wanna wait


00:24:40.540 --> 00:24:41.620
till they're all done anyway.


00:24:41.620 --> 00:24:43.300
So just keep doing it. - Yeah, exactly.


00:24:43.300 --> 00:24:45.220
If you block on the first one, it's not done.


00:24:45.220 --> 00:24:46.980
The second one might finish first,


00:24:46.980 --> 00:24:49.180
but it'll both be done by the time you get to them.


00:24:49.180 --> 00:24:50.300
- Yeah. - Yeah.


00:24:50.300 --> 00:24:52.580
- Yeah, and this is a lot more natural


00:24:52.580 --> 00:24:55.020
for folks who may not be used to like asyncio too.


00:24:55.020 --> 00:24:57.420
- Oh, I've been deep in the asyncio world.


00:24:57.420 --> 00:25:00.180
- Well, it all built natural here.


00:25:00.180 --> 00:25:01.020
- And that's exactly--


00:25:01.020 --> 00:25:03.500
- Well, and I have scars now, let me tell you.


00:25:03.500 --> 00:25:05.580
- That's exactly why I wanted to bring up this article


00:25:05.580 --> 00:25:06.700
is 'cause there's a lot of stuff,


00:25:06.700 --> 00:25:10.340
we're like maybe a DevOps person or something.


00:25:10.340 --> 00:25:12.620
They're not writing async programs,


00:25:12.620 --> 00:25:17.020
but they might have async need or asynchronous needs


00:25:17.020 --> 00:25:19.920
that can be solved with a simple, some simpler code.


00:25:19.920 --> 00:25:20.760
So.


00:25:20.760 --> 00:25:22.120
This is very, very elegant.


00:25:22.120 --> 00:25:23.320
Easy to understand.


00:25:23.320 --> 00:25:23.920
Yeah.


00:25:23.920 --> 00:25:25.160
Nice article.


00:25:25.160 --> 00:25:25.600
Good one.


00:25:25.600 --> 00:25:25.960
All right.


00:25:25.960 --> 00:25:29.280
Well, I want to talk about databases and more tools.


00:25:29.280 --> 00:25:32.720
I feel like this is just the tool focused tool episode.


00:25:32.720 --> 00:25:33.720
It is.


00:25:33.720 --> 00:25:34.400
It's cool time.


00:25:34.400 --> 00:25:34.760
All right.


00:25:34.760 --> 00:25:41.560
So I did an episode on talk Python with Emily Morehouse, glyph and Henek and


00:25:41.560 --> 00:25:45.400
Henek pointed out this thing called PG mustard.


00:25:45.400 --> 00:25:46.480
Have you heard of this?


00:25:46.480 --> 00:25:47.080
No.


00:25:47.080 --> 00:25:47.720
Have you?


00:25:47.720 --> 00:25:49.320
Oh, well, I just listened to that.


00:25:49.320 --> 00:25:49.760
Excellent.


00:25:49.800 --> 00:25:50.640
- Well, thank you.


00:25:50.640 --> 00:25:51.980
So now you know, other than that,


00:25:51.980 --> 00:25:52.820
like I had not heard of it,


00:25:52.820 --> 00:25:56.020
but one of the challenges, so many websites,


00:25:56.020 --> 00:25:58.300
I just don't understand why the world works this way,


00:25:58.300 --> 00:26:01.620
but you go to the website and it just spins and spins.


00:26:01.620 --> 00:26:04.740
And the clunkier, the more internal the thing looks,


00:26:04.740 --> 00:26:07.100
the more likely it is to take 10 seconds


00:26:07.100 --> 00:26:08.620
to do whatever it's doing.


00:26:08.620 --> 00:26:11.340
Right, but you know, it's doing some database query,


00:26:11.340 --> 00:26:12.500
probably without an index.


00:26:12.500 --> 00:26:13.740
Maybe they gave it an index,


00:26:13.740 --> 00:26:15.220
but the index is not being used


00:26:15.220 --> 00:26:16.780
'cause it's actually filtering first


00:26:16.780 --> 00:26:18.100
on some other random thing.


00:26:18.100 --> 00:26:20.940
filtering first on some other random thing or whatever.


00:26:20.940 --> 00:26:23.620
So databases have this cool feature to say,


00:26:23.620 --> 00:26:27.700
given a query, explain how you're gonna execute this.


00:26:27.700 --> 00:26:31.100
MongoDB has this, Postgres has this and so on.


00:26:31.100 --> 00:26:33.780
Okay, so that comes out as text.


00:26:33.780 --> 00:26:35.760
What if you could have a better way that gave you advice?


00:26:35.760 --> 00:26:39.260
And that's what this tool here is, which does cost money.


00:26:39.260 --> 00:26:40.780
Just to be clear, this is a commercial thing,


00:26:40.780 --> 00:26:41.680
but I thought it was cool enough


00:26:41.680 --> 00:26:43.300
that I wanted to point it out to people.


00:26:43.300 --> 00:26:46.340
So what you do is you give it your,


00:26:47.940 --> 00:26:51.900
basically a select statement and you ask it to explain it.


00:26:51.900 --> 00:26:55.220
And it'll break down the explain statement


00:26:55.220 --> 00:26:58.180
into different sections and tell you,


00:26:58.180 --> 00:26:59.740
this part is really good,


00:26:59.740 --> 00:27:03.500
this part of the query could be improved and so on.


00:27:03.500 --> 00:27:04.780
And then it gives you,


00:27:04.780 --> 00:27:07.980
so like it'll show you this beautiful visual way


00:27:07.980 --> 00:27:11.060
of explaining it and you can dive into it.


00:27:11.060 --> 00:27:12.980
And if you click on it, it'll tell you things like,


00:27:12.980 --> 00:27:16.100
okay, this is a nested loop and on this part of the query,


00:27:16.100 --> 00:27:19.540
it took 152 milliseconds, you got 100 rows back.


00:27:19.540 --> 00:27:22.460
And then it actually describes the situation,


00:27:22.460 --> 00:27:24.040
why it's good or bad.


00:27:24.040 --> 00:27:26.260
So for example, it says you got five stars


00:27:26.260 --> 00:27:29.940
because you discarded 1.3 million rows,


00:27:29.940 --> 00:27:32.980
that makes it faster, but you only got 3.2 stars


00:27:32.980 --> 00:27:37.340
because the row estimate was out by a factor of 42.


00:27:37.340 --> 00:27:38.940
You know, try to get that from text, right?


00:27:38.940 --> 00:27:42.420
This is super helpful if you've got a slow site


00:27:42.420 --> 00:27:45.620
that you wanna say, okay, this page is slow,


00:27:45.620 --> 00:27:48.500
These are the three queries that run when we pull this page.


00:27:48.500 --> 00:27:49.460
Why are they slow?


00:27:49.460 --> 00:27:50.420
How can I make them better?


00:27:50.420 --> 00:27:53.140
So it's, you know, we talked about the Regex 101 thing,


00:27:53.140 --> 00:27:54.740
how it like kind of guided you through


00:27:54.740 --> 00:27:56.000
and gave you recommendations.


00:27:56.000 --> 00:27:57.700
This is like the database equivalent.


00:27:57.700 --> 00:27:58.780
- This is nice.


00:27:58.780 --> 00:27:59.780
- This is awesome.


00:27:59.780 --> 00:28:01.920
I can't believe I've never seen this before.


00:28:01.920 --> 00:28:03.820
- Well, I know, I can't either.


00:28:03.820 --> 00:28:04.700
I'd never seen it either.


00:28:04.700 --> 00:28:06.180
- Now from the interview,


00:28:06.180 --> 00:28:08.900
it sounded like it would recommend


00:28:08.900 --> 00:28:11.340
how you could change your query to make it better.


00:28:11.340 --> 00:28:12.860
Is that something that has in there?


00:28:12.860 --> 00:28:14.380
Or did I imagine that?


00:28:14.380 --> 00:28:15.940
I believe so, and I believe so.


00:28:15.940 --> 00:28:19.720
If you like open up this 3.2 stars,


00:28:19.720 --> 00:28:21.820
I think it'll give you descriptions


00:28:21.820 --> 00:28:23.440
about what could be better in there.


00:28:23.440 --> 00:28:25.480
So it can give you performance advice,


00:28:25.480 --> 00:28:27.880
including high index potentials,


00:28:27.880 --> 00:28:30.760
poor index efficiency, disk operations.


00:28:30.760 --> 00:28:32.300
So like you've got to read too much off this


00:28:32.300 --> 00:28:33.200
to answer this question.


00:28:33.200 --> 00:28:37.440
Poor cache performance, excessive heap fetches,


00:28:37.440 --> 00:28:41.460
read efficiencies, glossy bitmap scans,


00:28:41.460 --> 00:28:43.040
and on and on and on, right?


00:28:43.040 --> 00:28:48.040
So it's pretty cool, it runs on Postgres 9.6 or newer.


00:28:48.040 --> 00:28:49.840
- I hope you're newer than that 9.6.


00:28:49.840 --> 00:28:53.240
That's pretty great, it supports that far back.


00:28:53.240 --> 00:28:54.460
- Yeah, yeah.


00:28:54.460 --> 00:28:57.000
Anyway, it is a paid tool, but man,


00:28:57.000 --> 00:29:01.340
if you could for $95 make your website 10 times faster


00:29:01.340 --> 00:29:03.200
and people have been complaining and complaining,


00:29:03.200 --> 00:29:04.240
you don't have to rewrite anything,


00:29:04.240 --> 00:29:07.800
you just put in like a slightly different hint or index


00:29:07.800 --> 00:29:10.120
or change the order of a query,


00:29:10.120 --> 00:29:12.120
like that's worth a lot I think.


00:29:12.120 --> 00:29:13.840
I think I'm just gonna try to learn this


00:29:13.840 --> 00:29:16.380
and then set up a page to say


00:29:16.380 --> 00:29:19.100
I'm a database optimization consultant


00:29:19.100 --> 00:29:21.600
and just run this in the background and say--


00:29:21.600 --> 00:29:23.320
- Yeah, look, $500 an hour.


00:29:23.320 --> 00:29:25.080
I will absolutely come in there.


00:29:25.080 --> 00:29:25.920
- Yeah, it's a new business idea.


00:29:25.920 --> 00:29:28.840
- And I have this proprietary set of tools


00:29:28.840 --> 00:29:31.040
that I just, I can't talk about it,


00:29:31.040 --> 00:29:34.320
but you let me in there and magic's gonna happen.


00:29:34.320 --> 00:29:36.320
- I shouldn't have said that out loud.


00:29:36.320 --> 00:29:40.520
- Yeah, well, the market will be swamped with these folks.


00:29:40.520 --> 00:29:41.600
- Yeah.


00:29:41.600 --> 00:29:42.920
Anyway, I thought this was cool,


00:29:42.920 --> 00:29:44.520
so I wanted to give it a shout out.


00:29:44.520 --> 00:29:46.320
- Cool, nice. - That is super cool.


00:29:46.320 --> 00:29:48.920
- Yeah, all right, Calvin, you got the last one?


00:29:48.920 --> 00:29:52.040
- All right, last one up, continuing the tools parade.


00:29:52.040 --> 00:29:54.720
Another tool, this is also cross-platform.


00:29:54.720 --> 00:29:55.840
I didn't mention that before.


00:29:55.840 --> 00:29:57.120
One of the reasons I really like KITTY


00:29:57.120 --> 00:29:58.680
was the fact I can use it anywhere.


00:29:58.680 --> 00:30:01.860
Linux, BSD, Windows, Mac,


00:30:01.860 --> 00:30:04.560
there are downloads for all those platforms.


00:30:04.560 --> 00:30:05.840
This one doesn't support Windows,


00:30:05.840 --> 00:30:09.200
but it does support Linux, Mac, and FreeBSD.


00:30:09.200 --> 00:30:11.040
It's bpytop.


00:30:11.040 --> 00:30:13.740
I used to be a longtime user of Glances.


00:30:13.740 --> 00:30:15.120
And if you didn't know what Glances was,


00:30:15.120 --> 00:30:16.480
you were also missing out.


00:30:16.480 --> 00:30:18.800
Because Glances is an awesome way to see


00:30:18.800 --> 00:30:19.840
what's going on in your system,


00:30:19.840 --> 00:30:21.080
like what I/O is being used,


00:30:21.080 --> 00:30:22.060
how much memory is being used,


00:30:22.060 --> 00:30:23.920
how much swaps being used.


00:30:23.920 --> 00:30:26.520
And BPyTop is kind of the next generation of that.


00:30:26.520 --> 00:30:30.440
So I will show a quick little demo of this one as well.


00:30:30.440 --> 00:30:32.760
So for those of you who aren't familiar with Glances,


00:30:32.760 --> 00:30:34.360
this is what Glances looks like.


00:30:34.360 --> 00:30:39.400
I got, sorry, a little interruption there.


00:30:39.400 --> 00:30:42.460
But while I'm live here on the podcast, this is Glances.


00:30:42.460 --> 00:30:45.220
It's kind of like more tech, very techsy,


00:30:45.220 --> 00:30:47.060
kind of old school looking.


00:30:47.060 --> 00:30:49.260
But if you just pipx install,


00:30:49.260 --> 00:30:51.820
and that's how I typically install these kinds of tools.


00:30:51.820 --> 00:30:53.500
It will start, sorry about that.


00:30:53.500 --> 00:31:00.980
- pipx is the homebrew Python thing, right?


00:31:00.980 --> 00:31:04.320
- You just pipx install bpytop.


00:31:04.320 --> 00:31:07.780
If you don't have pipx installed, you should install pipx


00:31:07.780 --> 00:31:10.320
because that'll get you access to all the stuff


00:31:10.320 --> 00:31:11.960
and your path all set up.


00:31:11.960 --> 00:31:16.240
But now I just use BPyTop and you get this like nice,


00:31:16.240 --> 00:31:19.920
colorized view of like a dashboard


00:31:19.920 --> 00:31:22.680
with all really like just laid out well.


00:31:22.680 --> 00:31:25.540
And then all of the, you can kind of see on here,


00:31:25.540 --> 00:31:28.320
there's like characters that are shaded


00:31:28.320 --> 00:31:29.440
in a different color.


00:31:29.440 --> 00:31:31.720
If you hit those characters,


00:31:31.720 --> 00:31:33.320
you'll be able to like resort


00:31:33.320 --> 00:31:35.360
or if you see the little numbers,


00:31:35.360 --> 00:31:39.360
I can hide and show the CPU or the memory graph


00:31:39.360 --> 00:31:41.600
if I don't care about that one so much.


00:31:41.600 --> 00:31:42.880
- So for people who are just listening,


00:31:42.880 --> 00:31:47.880
here's a terminal app that has like task manager


00:31:47.880 --> 00:31:52.640
or activity monitor levels of sort of graphs going on


00:31:52.640 --> 00:31:54.400
of like here's the CPU over time,


00:31:54.400 --> 00:31:57.000
here's the running processes sorted by CPU,


00:31:57.000 --> 00:31:58.680
here's the network.


00:31:58.680 --> 00:32:01.000
This is probably more useful than activity monitor,


00:32:01.000 --> 00:32:01.840
honestly.


00:32:01.840 --> 00:32:02.660
- Oh, I think it is.


00:32:02.660 --> 00:32:05.040
I mean, what's nice is you get the trending metrics


00:32:05.040 --> 00:32:10.360
over time. So you can see by CPU core or by like kind of aggregated CPU view,


00:32:10.360 --> 00:32:16.120
how you know if you're seeing the spikes or what this is really useful if you're on a server and


00:32:16.120 --> 00:32:20.160
like something's periodically happening, you're not sure what and you can kind of track down like


00:32:20.160 --> 00:32:26.080
either I. O. Issues or CPU spikes. You can kind of see if they're becoming very like periodic.


00:32:26.080 --> 00:32:29.600
Maybe they're happening every minute or every like five minutes like on the dot and you're like,


00:32:29.600 --> 00:32:33.320
oh, that's weird. There's something like maybe it's this cron job. So it helps you track that track


00:32:33.320 --> 00:32:34.580
those kinds of things down.


00:32:34.580 --> 00:32:36.320
You can also inspect the processes.


00:32:36.320 --> 00:32:37.960
So you can arrow up and down


00:32:37.960 --> 00:32:39.460
and you can actually like hit return


00:32:39.460 --> 00:32:41.920
and see like what CPU specifically


00:32:41.920 --> 00:32:43.960
or memory like a specific process is.


00:32:43.960 --> 00:32:46.160
You can like dig down into a specific process


00:32:46.160 --> 00:32:48.300
and see what core it's actually running on.


00:32:48.300 --> 00:32:51.600
It's just, again, for tracking down performance issues,


00:32:51.600 --> 00:32:54.340
I'm just using it locally on my own laptop right here,


00:32:54.340 --> 00:32:55.600
but I've used this numerous,


00:32:55.600 --> 00:32:57.600
every machine I log into for, you know,


00:32:57.600 --> 00:32:59.100
customer or production type stuff,


00:32:59.100 --> 00:33:01.580
if they're still using virtual machines,


00:33:01.580 --> 00:33:02.940
this is absolutely installed


00:33:02.940 --> 00:33:04.480
so that when they're like, "Oh, something's slow,"


00:33:04.480 --> 00:33:06.180
or "Something's doing weird,"


00:33:06.180 --> 00:33:08.860
I just go fire these up and take a look real quick


00:33:08.860 --> 00:33:11.420
to get kind of a snapshot in real time what's going on.


00:33:11.420 --> 00:33:13.100
- I've done that with Glances.


00:33:13.100 --> 00:33:15.020
- Yeah, that was used to be my go-to.


00:33:15.020 --> 00:33:16.740
But I just found Beefy Top was like


00:33:16.740 --> 00:33:18.760
the super powered version of Glances.


00:33:18.760 --> 00:33:19.940
- Interesting, you've moved over.


00:33:19.940 --> 00:33:21.740
Yeah, the graphs are way better.


00:33:21.740 --> 00:33:22.580
- Yeah.


00:33:22.580 --> 00:33:26.060
- Like you have progress bars or like meter bars


00:33:26.060 --> 00:33:28.620
that are graphical in Glances if you make it wide enough,


00:33:28.620 --> 00:33:31.020
but they don't have over time, they're just like snapshots.


00:33:31.020 --> 00:33:33.060
And these are like beautiful gradient colors.


00:33:33.060 --> 00:33:35.980
Like I kind of just expanded the net one so you can see the traffic


00:33:35.980 --> 00:33:38.420
going across my card.


00:33:38.420 --> 00:33:40.980
You can also switch back and forth between different interfaces


00:33:40.980 --> 00:33:43.940
on the system. So if you've got multiple network interfaces, you can


00:33:43.940 --> 00:33:47.380
see the aggregate or just for a specific interface.


00:33:47.380 --> 00:33:50.780
Yeah, super helpful when trying to track down weird,


00:33:50.780 --> 00:33:52.900
in quotes, weird issues.


00:33:52.900 --> 00:33:54.700
How's it run on KITTI?


00:33:54.700 --> 00:33:57.380
It runs great on KITTI. The performance is amazing.


00:33:57.380 --> 00:33:59.740
That's another thing I didn't show you is like you can actually see


00:33:59.740 --> 00:34:06.280
with the NVIDIA SMI tool, like there is kitty using up 20 megabytes of my GPU memory on


00:34:06.280 --> 00:34:07.280
there.


00:34:07.280 --> 00:34:08.280
My goodness.


00:34:08.280 --> 00:34:09.280
No, that's pretty awesome.


00:34:09.280 --> 00:34:13.760
Speaking of beautiful, Alvaro says B pi top has themes.


00:34:13.760 --> 00:34:16.120
Yes, they use the dark yellow theme.


00:34:16.120 --> 00:34:20.020
Yeah, I love the fact that anything's got themes I can customize like, you know, kitty


00:34:20.020 --> 00:34:24.040
or even be pi top or my my whatever my ID is.


00:34:24.040 --> 00:34:25.940
I just I trick that stuff out.


00:34:25.940 --> 00:34:26.940
This is my environment.


00:34:26.940 --> 00:34:29.340
to be as comfortable and as productive as possible.


00:34:29.340 --> 00:34:31.660
So the more customizable, the better.


00:34:31.660 --> 00:34:32.820
And the more emojis, the better.


00:34:32.820 --> 00:34:33.820
Love emojis.


00:34:33.820 --> 00:34:34.660
- Yes.


00:34:34.660 --> 00:34:36.460
(laughing)


00:34:36.460 --> 00:34:37.500
There's something to be said about it.


00:34:37.500 --> 00:34:39.420
If you sit down and you're like, I am excited.


00:34:39.420 --> 00:34:40.240
Look how cool this is.


00:34:40.240 --> 00:34:41.080
- Look how cool it is.


00:34:41.080 --> 00:34:41.920
- Yeah.


00:34:41.920 --> 00:34:42.740
- Yeah.


00:34:42.740 --> 00:34:44.120
- I'm using like an old version of Bash


00:34:44.120 --> 00:34:45.100
with nothing else installed.


00:34:45.100 --> 00:34:47.020
This is not as much fun as I envisioned it to be.


00:34:47.020 --> 00:34:49.340
- Well, the only issue is when you sit down


00:34:49.340 --> 00:34:51.980
with someone who's like, they fire up text edit


00:34:51.980 --> 00:34:52.940
to like edit some text.


00:34:52.940 --> 00:34:53.940
You're like, what are you doing?


00:34:53.940 --> 00:34:56.740
Like, come on, like, let me show you some cool tools.


00:34:56.740 --> 00:34:58.600
Let me get you up to speed on here.


00:34:58.600 --> 00:35:02.720
>> Yeah. TextEdit being the notepad equivalent if you're not a Mac person.


00:35:02.720 --> 00:35:02.960
>> Yeah.


00:35:02.960 --> 00:35:05.360
>> That's maybe it's a WordPad.


00:35:05.360 --> 00:35:06.960
Maybe it's a WordPad level.


00:35:06.960 --> 00:35:08.960
That's probably where it, which is worse.


00:35:08.960 --> 00:35:10.920
I think that's worse than notepad because you're going to get


00:35:10.920 --> 00:35:13.280
weird corrupted characters that you're not going to know.


00:35:13.280 --> 00:35:13.960
>> Yeah.


00:35:13.960 --> 00:35:15.360
>> Oh, man.


00:35:15.360 --> 00:35:18.600
>> Especially with working from home now,


00:35:18.600 --> 00:35:22.400
a lot of people are working with kids around that walk by,


00:35:22.400 --> 00:35:23.880
and you want your job to look


00:35:23.880 --> 00:35:26.600
awesome so that they're interested in what you're doing.


00:35:26.600 --> 00:35:27.560
Just saying.


00:35:27.560 --> 00:35:30.520
>> Yeah, I'm sure my kids think I'm a hacker.


00:35:30.520 --> 00:35:35.000
>> You're not a hacker?


00:35:35.000 --> 00:35:37.560
>> I hack on code, yes.


00:35:37.560 --> 00:35:39.920
>> The original.


00:35:39.920 --> 00:35:42.240
>> Exactly, the original meaning of that word.


00:35:42.240 --> 00:35:43.800
>> OG hacker.


00:35:43.800 --> 00:35:44.240
>> Yeah.


00:35:44.240 --> 00:35:46.520
>> Brian, time for some extras.


00:35:46.520 --> 00:35:49.840
>> I do have a big extra that I'm really excited about.


00:35:49.840 --> 00:35:53.000
Yes, the book which I've been talking about for


00:35:53.000 --> 00:35:54.000
about 18 months.


00:35:54.000 --> 00:35:56.400
And if you add that to the previous 18 months,


00:35:56.400 --> 00:35:57.960
about three years of this podcast


00:35:57.960 --> 00:35:59.120
has been talking about this book.


00:35:59.120 --> 00:36:04.120
But anyway, so it's, there's no longer a beta flag on it.


00:36:04.120 --> 00:36:06.000
It's not in beta anymore.


00:36:06.000 --> 00:36:07.760
So it's off to the printers.


00:36:07.760 --> 00:36:12.720
And then to celebrate it being officially released,


00:36:12.720 --> 00:36:16.160
there's a coupon code that will link


00:36:16.160 --> 00:36:19.320
to this page in the show notes, but it's a coupon code.


00:36:19.320 --> 00:36:21.680
I don't know how long this is going to be good for,


00:36:21.680 --> 00:36:24.320
but this is for 40% off the ebook.


00:36:24.320 --> 00:36:26.320
So this is exciting.


00:36:26.320 --> 00:36:28.440
And I don't have a physical copy yet.


00:36:28.440 --> 00:36:30.360
I'm still waiting for mine to get delivered.


00:36:30.360 --> 00:36:32.800
Hopefully it'll be in the next couple of weeks.


00:36:32.800 --> 00:36:36.520
So yeah, anyway, that's one of my extras.


00:36:36.520 --> 00:36:40.960
The other extra I wanted to bring up is a PyCamp Spain


00:36:40.960 --> 00:36:44.540
is happening April 15th through the 18th.


00:36:44.540 --> 00:36:46.580
And man, this looks fun.


00:36:46.580 --> 00:36:49.120
- It's like actual camping.


00:36:49.120 --> 00:36:50.360
I love the idea.


00:36:50.360 --> 00:36:52.860
>> I don't know if it's actual camping,


00:36:52.860 --> 00:36:58.540
but admission includes four days and three nights,


00:36:58.540 --> 00:37:01.980
including accommodations and breakfast, lunch, and dinner provided.


00:37:01.980 --> 00:37:03.740
This is pretty amazing.


00:37:03.740 --> 00:37:06.500
>> I know, Brian, I see karaoke on that list too.


00:37:06.500 --> 00:37:08.120
>> Karaoke talks?


00:37:08.120 --> 00:37:08.580
>> Yes.


00:37:08.580 --> 00:37:11.340
>> Board games, ping pong? This looks great.


00:37:11.340 --> 00:37:14.140
>> You have to give your talk in song form.


00:37:14.140 --> 00:37:14.500
>> Yeah.


00:37:14.500 --> 00:37:16.940
>> Oh, man. No one would want to see me do that.


00:37:16.940 --> 00:37:17.540
>> No one.


00:37:17.540 --> 00:37:18.820
>> Or me either.


00:37:18.820 --> 00:37:21.720
This looks great. It does look like a lot of fun


00:37:21.720 --> 00:37:26.040
Fantastic Calvin got anything extra you want to throw out there?


00:37:26.040 --> 00:37:31.660
I do coming up next month and just a little over a month is the Python web conference


00:37:31.660 --> 00:37:34.700
Oh, I've got the let me pull up the slide for it. You've got the screen


00:37:34.700 --> 00:37:36.540
I do have the screen for it


00:37:36.540 --> 00:37:41.660
I had even even pre-planned for this to be ready to roll. So it is Python web conference time


00:37:41.660 --> 00:37:44.840
This is our four good speakers or what fourth annual event


00:37:44.980 --> 00:37:49.380
we've got some amazing speakers who are going to join us this year.


00:37:49.380 --> 00:37:52.980
So I'll actually bring that up because I'm really proud of this group.


00:37:52.980 --> 00:37:55.480
If you scroll down through here,


00:37:55.480 --> 00:38:00.980
there is just an amazing bunch of people who have signed on for this amazing adventure


00:38:00.980 --> 00:38:03.280
with all of us over here.


00:38:03.280 --> 00:38:04.680
So definitely check it out.


00:38:04.680 --> 00:38:06.980
It's going to be way bigger than it has been in previous years.


00:38:06.980 --> 00:38:09.180
So this is the fourth year we've run it.


00:38:09.180 --> 00:38:11.980
And I believe we've got 90 speakers this year.


00:38:11.980 --> 00:38:16.680
We're doing five tracks across five days.


00:38:16.680 --> 00:38:19.240
So there's two app dev tracks, a culture track,


00:38:19.240 --> 00:38:21.880
a cloud track, and a Pi data track.


00:38:21.880 --> 00:38:23.880
So there is something for everybody.


00:38:23.880 --> 00:38:25.880
Get your tickets now.


00:38:25.880 --> 00:38:27.480
It's going to be a ton of fun.


00:38:27.480 --> 00:38:30.440
We will start getting things cranked up a couple days beforehand.


00:38:30.440 --> 00:38:33.680
We're getting the Slack channels all set up and people can start


00:38:33.680 --> 00:38:36.180
basically hanging out and we're going to have some cool socials.


00:38:36.180 --> 00:38:39.880
I know we've got one of our speakers is going to give a mindfulness


00:38:39.880 --> 00:38:46.780
socials. So if you want to come and learn how to decompress as a developer, and she's going to actually be one of our keynotes about burnout.


00:38:46.780 --> 00:38:52.580
But she's going to give a practical example during one of the socials that I'm super excited to try out.


00:38:52.580 --> 00:38:53.780
Nice. Fantastic.


00:38:53.780 --> 00:38:57.680
Yeah, I see a bunch of the people in the speaker list have been here on the show.


00:38:57.680 --> 00:39:01.680
Yeah, these should not be strangers to especially this guy right here.


00:39:01.680 --> 00:39:03.780
He's definitely a stranger. I don't know about that guy. He's shady.


00:39:03.780 --> 00:39:04.780
Definitely shady.


00:39:04.780 --> 00:39:07.540
>> Well, I'm noticing a lot of these speakers from


00:39:07.540 --> 00:39:11.860
either this show or Talk Python or Test and Code.


00:39:11.860 --> 00:39:14.020
They've been, a lot of people have been one of those.


00:39:14.020 --> 00:39:16.620
>> A lot of friendly faces on here.


00:39:16.620 --> 00:39:18.900
Again, great group of people.


00:39:18.900 --> 00:39:20.980
They're all super excited to participate in the conference.


00:39:20.980 --> 00:39:22.540
They're all super excited to hang out with


00:39:22.540 --> 00:39:24.820
everybody and just be a part.


00:39:24.820 --> 00:39:26.460
>> Yeah. I like that you're putting


00:39:26.460 --> 00:39:29.620
the social links up on the page so that people can


00:39:29.620 --> 00:39:30.700
check that out instead of having


00:39:30.700 --> 00:39:31.940
the Google forum or something.


00:39:31.940 --> 00:39:34.300
>> Yeah. It's all about the people for me.


00:39:34.300 --> 00:39:38.460
I love being a community builder and putting this together for folks.


00:39:38.460 --> 00:39:42.540
Now look, there's another amazing speakers in the audience right now.


00:39:42.540 --> 00:39:44.540
>> Fantastic.


00:39:44.540 --> 00:39:45.900
>> That is awesome.


00:39:45.900 --> 00:39:47.380
>> Well, how about, no,


00:39:47.380 --> 00:39:48.340
I don't mean to cut you off,


00:39:48.340 --> 00:39:51.140
but I was just curious if Michael had any extras.


00:39:51.140 --> 00:39:54.740
>> You know that I do. I got a couple.


00:39:54.740 --> 00:39:57.580
Let me tell you about this little app I got,


00:39:57.580 --> 00:40:00.460
which I meant to do a little video so I could show you.


00:40:00.460 --> 00:40:02.640
I'm a huge fan of macOS,


00:40:02.640 --> 00:40:04.680
And I really enjoy working there.


00:40:04.680 --> 00:40:08.680
I love that like the terminal tools are like server stuff,


00:40:08.680 --> 00:40:12.480
but it's not, you know, you got all the nice little tools and whatnot.


00:40:12.480 --> 00:40:16.440
One of the things that I absolutely just don't understand is


00:40:16.440 --> 00:40:21.880
switching between windows is like nearly impossible if it's the same app.


00:40:21.880 --> 00:40:26.120
If I got one web browser set of tabs and another, I'm going to cycle between them,


00:40:26.120 --> 00:40:30.240
like command tab, alt tab equivalent has no effect on that, right?


00:40:30.240 --> 00:40:30.880
Like, why is this?


00:40:30.880 --> 00:40:34.480
So I found this cool app called which that lets you do all sorts of stuff.


00:40:34.480 --> 00:40:40.280
Like, you map it like alt tab instead of command tab and it'll pull up.


00:40:40.280 --> 00:40:42.680
It's very similar, but then it'll, you can even like switch


00:40:42.680 --> 00:40:44.440
between tabs within a browser.


00:40:44.440 --> 00:40:45.440
So I want to switch to.


00:40:45.440 --> 00:40:49.300
The Vivaldi, but onto this tab of that Vivaldi.


00:40:49.300 --> 00:40:52.800
So how, wherever it lives on what Vivaldi window, I don't care.


00:40:52.800 --> 00:40:54.560
I just want to go to that tab, stuff like that.


00:40:54.560 --> 00:40:56.080
Super, super cool.


00:40:56.080 --> 00:41:00.040
Just cycle between the last use window and say the last use app.


00:41:00.040 --> 00:41:03.880
and there's just a, the customizability of it is insane.


00:41:03.880 --> 00:41:07.240
Like it's truly crazy and what does it cost?


00:41:07.240 --> 00:41:08.600
It costs $14 a month.


00:41:08.600 --> 00:41:12.160
So if that frustrated you, check that out.


00:41:12.160 --> 00:41:16.400
Number two is I did this video called Don't Use Loops.


00:41:16.400 --> 00:41:18.000
Or do you actually need loops in Python?


00:41:18.000 --> 00:41:19.360
It was really to say like some of the time


00:41:19.360 --> 00:41:22.600
you can use comprehensions of various types.


00:41:22.600 --> 00:41:23.760
That I already talked about.


00:41:23.760 --> 00:41:25.920
But in response to that, someone said,


00:41:25.920 --> 00:41:28.120
oh, I don't really think there's any difference


00:41:28.120 --> 00:41:31.320
between using a list comprehension and a for loop.


00:41:31.320 --> 00:41:32.360
They're the same.


00:41:32.360 --> 00:41:34.480
Like, how could you even tell me that they're different?


00:41:34.480 --> 00:41:37.680
Well, one, import dis from dis,


00:41:37.680 --> 00:41:39.480
import dis, dis like a disassembly,


00:41:39.480 --> 00:41:40.640
and you'll see a big difference.


00:41:40.640 --> 00:41:42.240
But two, I put together an example


00:41:42.240 --> 00:41:44.140
that for 10 million times,


00:41:44.140 --> 00:41:47.080
basically adds the numbers one to 10 million,


00:41:47.080 --> 00:41:50.640
even numbers one to 10 million to a list


00:41:50.640 --> 00:41:53.120
using a for loop and then using a list comprehension.


00:41:53.120 --> 00:41:57.560
And it is about 25% faster to do the list comprehension


00:41:57.560 --> 00:42:01.680
than the loop, which isn't going to change people's world probably, but it's, you know,


00:42:01.680 --> 00:42:06.320
something to consider. Yeah. So I'll link into a very small gist there.


00:42:06.320 --> 00:42:14.560
I just, my, my people of mine, if you're going to do a loop at the very least, don't do for


00:42:14.560 --> 00:42:19.720
I in length of something. That's C, that's not Python. So


00:42:19.720 --> 00:42:24.600
>> Yes, please. Or create a number,


00:42:24.600 --> 00:42:29.320
i equals zero while i less than this i plus plus on the inside.


00:42:29.320 --> 00:42:31.920
There's a lot of bad variations.


00:42:31.920 --> 00:42:36.160
>> Yeah. I intentionally put things like that in


00:42:36.160 --> 00:42:38.600
interview questions to try to see if people are


00:42:38.600 --> 00:42:42.760
really Python programmers or if they're just C programmers.


00:42:42.760 --> 00:42:45.440
>> It might be fine that you're a C programmer coming into Python,


00:42:45.440 --> 00:42:47.240
but sometimes people will be


00:42:47.240 --> 00:42:48.960
dishonest with you during the interviews.


00:42:48.960 --> 00:42:52.840
like, oh, yes, I use flask all the time. All right. How about you create a Hello


00:42:52.840 --> 00:42:58.720
World view and run that? I can't do that. Okay, well, then you probably don't use


00:42:58.720 --> 00:43:02.720
flask all the time. You might use it sometimes or not, not eight hours a day,


00:43:02.720 --> 00:43:08.080
like you told me. All right. Another thing, another similar little gist thing


00:43:08.080 --> 00:43:15.160
is I was working on using a database API that is async only, but I want to use it


00:43:15.160 --> 00:43:18.600
in the web app that is not async at all?


00:43:18.600 --> 00:43:19.640
How do you do that?


00:43:19.640 --> 00:43:21.560
Right, we talked about like the result and blocking


00:43:21.560 --> 00:43:22.480
and all how painful that is.


00:43:22.480 --> 00:43:23.760
So I came up with this little gist


00:43:23.760 --> 00:43:27.480
that was working great in production, in dev.


00:43:27.480 --> 00:43:28.760
So this really simple thing,


00:43:28.760 --> 00:43:33.520
you can just wrap up an async call and say, run it.


00:43:33.520 --> 00:43:35.520
It internally manages a little loop


00:43:35.520 --> 00:43:36.440
and it calls run async.


00:43:36.440 --> 00:43:40.200
So you've got like a database async call.


00:43:40.200 --> 00:43:42.640
You can just say, you know,


00:43:42.640 --> 00:43:45.680
go to the call and just say run, whatever,


00:43:45.680 --> 00:43:47.600
get the thing async with the parameters, right?


00:43:47.600 --> 00:43:48.720
So it's not like a decorator,


00:43:48.720 --> 00:43:50.640
you just call it really simple.


00:43:50.640 --> 00:43:53.680
In practice, what I found trying to deploy this


00:43:53.680 --> 00:43:58.400
to a website was the database backend was doing weird stuff


00:43:58.400 --> 00:44:00.340
with like what thread it's running on,


00:44:00.340 --> 00:44:03.920
the web server, microWSGI was like shuffling around


00:44:03.920 --> 00:44:06.240
like the order of when stuff ran on different threads


00:44:06.240 --> 00:44:07.720
and it was freaking out the event loop


00:44:07.720 --> 00:44:09.360
and you get all these errors about like,


00:44:09.360 --> 00:44:13.400
this thing has become detached from its asyncio loop


00:44:13.400 --> 00:44:15.560
or it came from one loop and is trying to continue


00:44:15.560 --> 00:44:18.200
on another loop, just like, oh no, what is all this?


00:44:18.200 --> 00:44:21.900
So I ended up coming up with a massively brazier version


00:44:21.900 --> 00:44:24.840
that people can check out that basically coordinates


00:44:24.840 --> 00:44:26.200
all the work to a background thread,


00:44:26.200 --> 00:44:29.360
runs it all in the same place and then puts it back.


00:44:29.360 --> 00:44:31.960
It works fabulously, it is horrifying.


00:44:31.960 --> 00:44:34.120
So you can take it for what it is, anyway.


00:44:34.120 --> 00:44:36.940
As part of this conversation,


00:44:37.840 --> 00:44:40.540
- Maybe it works really well, but it looks really bad.


00:44:40.540 --> 00:44:45.620
Bill Jones, so from court, I believe,


00:44:45.620 --> 00:44:47.680
sent over a thing that said,


00:44:47.680 --> 00:44:49.140
"One of the problems with async I/O


00:44:49.140 --> 00:44:50.540
"is if it's already running


00:44:50.540 --> 00:44:52.400
"and then you call async version


00:44:52.400 --> 00:44:55.060
"which internally happens to use the same pattern,


00:44:55.060 --> 00:44:57.840
"it's gonna crash and say it's already running."


00:44:57.840 --> 00:44:58.680
Weird.


00:44:58.680 --> 00:45:01.700
So there's this thing called nest I/O,


00:45:01.700 --> 00:45:05.060
which allows you to basically have a re-entrancy.


00:45:05.060 --> 00:45:06.540
So if you get the runtime error,


00:45:06.540 --> 00:45:08.300
this event loop is already running.


00:45:08.300 --> 00:45:10.660
Well, if it is just run, you know, whatever.


00:45:10.660 --> 00:45:11.740
But that's the error you get.


00:45:11.740 --> 00:45:13.580
So this will allow you to basically


00:45:13.580 --> 00:45:16.820
re like continue on in the same loop.


00:45:16.820 --> 00:45:17.940
All right, those are all my extras.


00:45:17.940 --> 00:45:20.020
I thought those were all a little fun.


00:45:20.020 --> 00:45:20.860
- Nice.


00:45:20.860 --> 00:45:23.580
- I can't believe combining threading and asyncio


00:45:23.580 --> 00:45:27.340
in the same little sub module is brave.


00:45:27.340 --> 00:45:30.020
- I did not get to that position willingly.


00:45:30.020 --> 00:45:32.700
(both laughing)


00:45:32.700 --> 00:45:33.540
Not at all.


00:45:33.540 --> 00:45:35.420
Like, but everything I had tried,


00:45:35.420 --> 00:45:36.740
It didn't matter and people say,


00:45:36.740 --> 00:45:40.500
oh, you should use asyncio.run, that manages it for you.


00:45:40.500 --> 00:45:42.060
Yeah, except for that it wasn't working


00:45:42.060 --> 00:45:43.480
in the weird web servers


00:45:43.480 --> 00:45:45.140
that are doing all sorts of threading tricks.


00:45:45.140 --> 00:45:48.420
And just, right, like, it was the only thing that worked


00:45:48.420 --> 00:45:50.140
and so there it was.


00:45:50.140 --> 00:45:52.100
All right, that was not funny,


00:45:52.100 --> 00:45:54.100
but maybe I've got something funny for you.


00:45:54.100 --> 00:45:55.700
You guys ready for a joke?


00:45:55.700 --> 00:45:57.880
- Yes, always, definitely.


00:45:57.880 --> 00:46:02.880
- So, this one is about mistakes that people make


00:46:02.940 --> 00:46:07.940
with testing for truthiness versus assignment.


00:46:07.940 --> 00:46:11.060
And so it's a cartoon and there's these humans


00:46:11.060 --> 00:46:12.580
being ripped apart by robots.


00:46:12.580 --> 00:46:15.220
It says, "Oh no, the robots are killing us."


00:46:15.220 --> 00:46:16.500
And someone asks, "Why?"


00:46:16.500 --> 00:46:17.340
"But why?


00:46:17.340 --> 00:46:19.140
"We never programmed to do this."


00:46:19.140 --> 00:46:21.500
And then there's like a computer


00:46:21.500 --> 00:46:22.620
with some code on the screen.


00:46:22.620 --> 00:46:24.780
In the background, you see robots killing people.


00:46:24.780 --> 00:46:27.620
And it says, it has actually the code for the robot.


00:46:27.620 --> 00:46:31.380
It says, "Void, interact with humans.


00:46:31.380 --> 00:46:36.180
If is crazy robot equals true, kill humans else be nice to humans.


00:46:36.180 --> 00:46:39.100
>> But it's an assignment, not a quality.


00:46:39.100 --> 00:46:42.300
>> It's a single equals instead of a double equals.


00:46:42.300 --> 00:46:45.420
End of the world has come because of that.


00:46:45.420 --> 00:46:47.140
>> You just assigned it to be a crazy killer robot,


00:46:47.140 --> 00:46:48.660
crazy murdering robot.


00:46:48.660 --> 00:46:49.900
>> Yes, exactly.


00:46:49.900 --> 00:46:51.780
>> Yeah, nice.


00:46:51.780 --> 00:46:57.500
>> Anthony would save us from this cartoon apocalypse by saying this,


00:46:57.500 --> 00:46:58.820
remember your unit tests.


00:46:58.820 --> 00:47:01.100
>> Yeah, and beta testers.


00:47:01.100 --> 00:47:04.620
Why do we keep losing QA people?


00:47:04.620 --> 00:47:06.380
I just don't understand.


00:47:06.380 --> 00:47:09.100
Where do they go? I don't know.


00:47:09.100 --> 00:47:11.220
>> Just ship it to beta.


00:47:11.220 --> 00:47:13.180
>> Yeah, exactly.


00:47:13.180 --> 00:47:16.900
>> Segment your population, AB test this stuff.


00:47:16.900 --> 00:47:18.900
>> Anyway.


00:47:18.900 --> 00:47:19.300
>> No, thanks.


00:47:19.300 --> 00:47:20.020
>> Nice.


00:47:20.020 --> 00:47:21.460
>> But thank you,


00:47:21.460 --> 00:47:23.140
Calvin, for coming on the show this time.


00:47:23.140 --> 00:47:24.580
>> It was totally fun. Love it.


00:47:24.580 --> 00:47:26.060
>> Yeah, absolutely. Brian.


00:47:26.060 --> 00:47:27.540
>> Thank you. That was a good time.


00:47:27.540 --> 00:47:27.900
>> Yeah.


00:47:27.900 --> 00:47:28.300
>> All right.


00:47:28.300 --> 00:47:28.660
>> Always.


00:47:28.660 --> 00:47:29.340
>> See you later.


00:47:29.340 --> 00:47:29.980
>> Yeah. Bye.


00:47:29.980 --> 00:47:30.740
>> Bye, everyone.


00:47:30.740 --> 00:47:35.940
Thanks for listening to Python bytes. Follow the show on Twitter via @Pythonbytes. That's


00:47:35.940 --> 00:47:42.580
Python bytes as in B Y T E S. Get the full show notes over at Python bytes.fm. If you have a news


00:47:42.580 --> 00:47:47.460
item we should cover, just visit Python bytes.fm and click Submit in the nav bar. We're always on


00:47:47.460 --> 00:47:51.860
the lookout for sharing something cool. If you want to join us for the live recording, just visit


00:47:51.860 --> 00:47:57.540
the website and click live stream to get notified of when our next episode goes live. That's usually


00:47:57.540 --> 00:48:01.620
usually happening at noon Pacific on Wednesdays over at YouTube.


00:48:01.620 --> 00:48:05.100
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:48:05.100 --> 00:48:08.420
Thank you for listening and sharing this podcast with your friends and colleagues.

