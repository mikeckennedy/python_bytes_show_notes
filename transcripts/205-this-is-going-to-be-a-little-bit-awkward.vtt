
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:08.720
This is episode 205 recorded October 21st.


00:00:08.720 --> 00:00:09.600
I'm Michael Kennedy.


00:00:09.600 --> 00:00:10.560
And I'm Brian Okken.


00:00:10.560 --> 00:00:13.440
And this episode is brought to you by us.


00:00:13.440 --> 00:00:16.480
More about that later, how you can support what we're doing.


00:00:16.480 --> 00:00:20.880
Right now, Brian, I'm really sorry, man, but I've got something a little bit awkward to talk about.


00:00:20.880 --> 00:00:22.080
Well, this is awkward.


00:00:22.080 --> 00:00:26.560
I know, but luckily it's just you and me, so you don't mind if I just sort of tell it to you straight?


00:00:26.560 --> 00:00:27.680
Yeah, just tell me.


00:00:27.680 --> 00:00:28.180
All right.


00:00:28.180 --> 00:00:32.380
Well, sometimes I have an array and it's perfectly tabular.


00:00:32.380 --> 00:00:36.200
Like it's, it's maybe just a linear array or sometimes the array goes across.


00:00:36.200 --> 00:00:39.220
Like every entry is like 20.


00:00:39.220 --> 00:00:41.980
It's like a list with like 20 length, 20 lists in it.


00:00:41.980 --> 00:00:45.280
And it's all the right size, but sometimes, you know, maybe it's, it's the


00:00:45.280 --> 00:00:48.460
wrong shape and it's awkward and it's hard to deal with in Python.


00:00:48.460 --> 00:00:53.680
You know, a lot of array processing happens in NumPy, but NumPy is all


00:00:53.680 --> 00:00:56.320
about rectangular like things.


00:00:56.380 --> 00:00:59.140
And so if you've got data that's kind of like an array,


00:00:59.140 --> 00:01:01.460
multi-dimensional array, but it doesn't fit that shape,


00:01:01.460 --> 00:01:02.300
what do you do?


00:01:02.300 --> 00:01:06.100
Well, Simon Thor sent us a message and said,


00:01:06.100 --> 00:01:08.860
"You all should talk about awkward arrays."


00:01:08.860 --> 00:01:12.340
So awkward arrays,


00:01:12.340 --> 00:01:14.940
this is a, it's actually a pretty advanced library.


00:01:14.940 --> 00:01:17.180
So it's a little bit like NumPy,


00:01:17.180 --> 00:01:20.300
and it has NumPy-like idioms and so on,


00:01:20.300 --> 00:01:23.500
but it's a library for nested variable size data,


00:01:23.500 --> 00:01:29.060
including arbitrary length lists, records, mixed data types, missing data,


00:01:29.060 --> 00:01:32.740
and all those things, and dealing with those with NumPy-like idioms.


00:01:32.740 --> 00:01:37.700
So it's better for handling, you know, like what I described,


00:01:37.700 --> 00:01:39.860
not the same shaped data.


00:01:39.860 --> 00:01:41.300
It's kind of the same dimensions,


00:01:41.300 --> 00:01:44.060
but it's not always the same length on the various parts.


00:01:44.060 --> 00:01:47.740
And you could even use it with things like Numba


00:01:47.740 --> 00:01:50.380
to JIT compile the code to make it even faster.


00:01:50.380 --> 00:01:54.460
And they just announced version 1.0 of this library,


00:01:54.460 --> 00:01:56.940
which was originally written in Python.


00:01:56.940 --> 00:01:59.620
So it was good, but not super, super fast.


00:01:59.620 --> 00:02:02.380
And they rewrote the core in C++.


00:02:02.380 --> 00:02:05.580
So now it's like a lot of the data science stuff,


00:02:05.580 --> 00:02:09.260
C++ at where the business end of the library.


00:02:09.260 --> 00:02:10.460
So it's super fast.


00:02:10.460 --> 00:02:11.460
- Nice. - Yeah, pretty cool.


00:02:11.460 --> 00:02:12.780
And what do you think about the logo?


00:02:12.780 --> 00:02:14.220
- The logo is actually great.


00:02:14.220 --> 00:02:19.620
It's awkward array, but the second array is below awkward.


00:02:19.620 --> 00:02:25.820
and the A is capitalized so it sort of runs into the K and the W and the F to squish out of the way.


00:02:25.820 --> 00:02:26.500
It's very clever.


00:02:26.500 --> 00:02:28.620
Yeah, kind of bent and awkward looking.


00:02:28.620 --> 00:02:30.620
It's pretty clever. I like it as well.


00:02:30.620 --> 00:02:34.820
Another thing that I thought was interesting, if you open up the link over there, you don't have to, but


00:02:34.820 --> 00:02:38.500
if you were to go there, like right on the page it says here's the Python quick start.


00:02:38.500 --> 00:02:40.820
Oh, and here's the C++ quick start.


00:02:40.820 --> 00:02:44.620
So this library, the internals of it are written in C++,


00:02:44.620 --> 00:02:45.020
right?


00:02:45.020 --> 00:02:45.380
Okay.


00:02:45.380 --> 00:02:47.740
So that it's fast from Python, but also


00:02:47.740 --> 00:02:52.780
you can go straight to the template library side of C++ and use it directly.


00:02:52.780 --> 00:02:56.540
If you are, say, building some stuff in C++ and also want to use this library,


00:02:56.540 --> 00:03:00.220
or maybe you're building a library that does data science-y things,


00:03:00.220 --> 00:03:03.260
and you have a big C++ C component aspect of it,


00:03:03.260 --> 00:03:05.180
you could use the C side of it directly there.


00:03:05.180 --> 00:03:06.060
- Nice. - Yeah.


00:03:06.060 --> 00:03:09.340
So that's actually something I don't see almost ever is,


00:03:09.340 --> 00:03:13.420
here's the Python library and the C++ API that corresponds to it.


00:03:13.420 --> 00:03:14.460
- Yeah, that's pretty cool. - Yeah.


00:03:14.460 --> 00:03:20.780
Also, it's I have a lot of cases for this. I'm gonna definitely check this out. Mm-hmm. Yeah, it's pretty cool


00:03:20.780 --> 00:03:22.860
So thank you Simon for sending that in


00:03:22.860 --> 00:03:28.620
Last quick note is when you install it you pip install awkward the number one not just awkward


00:03:28.620 --> 00:03:31.900
I think awkward which my gosh


00:03:31.900 --> 00:03:36.940
It's just so weird to have a package called awkward, but it's great. Anyway


00:03:36.940 --> 00:03:44.060
I think awkward is the older version and awkward one is this new 1.0 release. I think it's the same library


00:03:44.140 --> 00:03:48.460
I wasn't sure if like, I was like, okay, if this is awkward one, what is just awkward by itself?


00:03:48.460 --> 00:03:50.620
That's got to even be more awkward


00:03:50.620 --> 00:03:54.620
But I think it's the same library. It's just a different api version. Okay, okay


00:03:54.620 --> 00:04:01.020
You might be surprised by it. But nonetheless, it's it's pretty good library. Go and check it out. Yeah, you got any surprises for us


00:04:01.020 --> 00:04:04.540
Yeah, the surprises came from ned batch elder. So,


00:04:04.540 --> 00:04:10.080
Ned surprised us with some surprising order dict ordered dict surprises


00:04:10.080 --> 00:04:12.860
So I think we've covered this but in python 3.6


00:04:13.720 --> 00:04:20.760
Dictionaries change a little bit so normal dictionary just use a dictator just declare one they retain their insertion order.


00:04:20.760 --> 00:04:24.560
If you list them out again or just you know say.


00:04:24.560 --> 00:04:35.620
You know if you have x equals some dictionary and print x on the rebel it'll just print it in the same order it arrived in right and if you do like for k comma v.


00:04:35.860 --> 00:04:40.260
in dictionary.items you'll get them in the same order now which is nice.


00:04:40.260 --> 00:04:42.980
I think probably one of the most annoying things was


00:04:42.980 --> 00:04:45.580
if you are saving a dictionary,


00:04:45.580 --> 00:04:48.060
if you're going back and forth between a JSON file


00:04:48.060 --> 00:04:50.060
into a dictionary and then you save it again,


00:04:50.060 --> 00:04:51.060
right, like,


00:04:51.060 --> 00:04:55.580
that could just randomly be changing before whereas you'll be getting like


00:04:55.580 --> 00:04:59.180
diffs on that file. Anyway, this stability is nice.


00:04:59.180 --> 00:05:01.580
I really like it, but I just sort of assumed,


00:05:01.580 --> 00:05:08.140
I knew there may have been some differences. There's still a collections.ordered dict that is around.


00:05:08.140 --> 00:05:12.580
It's still around and there's a few reasons for it. One of them is just because


00:05:12.580 --> 00:05:18.860
it's a class that some other stuff derives from and it would break backwards compatibility to remove it.


00:05:18.860 --> 00:05:20.860
So I'm glad it's still there.


00:05:20.860 --> 00:05:23.700
But Ned brings up a couple surprising things around it.


00:05:23.700 --> 00:05:26.500
The first actually wasn't that surprising to me.


00:05:26.500 --> 00:05:29.620
They're ordered, but you can't get access them by order.


00:05:29.620 --> 00:05:34.580
You can't say, "Give me the first one," by saying bracket zero or something.


00:05:34.580 --> 00:05:35.700
Does this surprise you?


00:05:35.700 --> 00:05:36.980
Doesn't really surprise me.


00:05:36.980 --> 00:05:37.460
Not really.


00:05:37.460 --> 00:05:39.060
I would just do--


00:05:39.060 --> 00:05:41.300
I mean, it's a dictionary.


00:05:41.300 --> 00:05:45.060
Yeah, just get the first thing out of items, and then just be happy with that.


00:05:45.060 --> 00:05:45.380
I don't know.


00:05:45.380 --> 00:05:49.140
But yeah, there's no way to index bracket zero of the dictionary.


00:05:49.140 --> 00:05:49.380
Right.


00:05:49.380 --> 00:05:50.100
That's OK.


00:05:50.100 --> 00:05:55.540
The thing that actually I didn't really think about before was that Ned brings up is that


00:05:55.540 --> 00:05:57.860
how equality and order mix.


00:05:57.860 --> 00:06:01.980
So in the dictionaries for Python 3.6 and above now,


00:06:01.980 --> 00:06:05.660
if you declare two dictionaries with the same content,


00:06:05.660 --> 00:06:10.580
but they have, they've, they're created in a different order,


00:06:10.580 --> 00:06:12.140
they're still going to be equal.


00:06:12.140 --> 00:06:14.860
So two dictionaries are equal if they have equal contents.


00:06:14.860 --> 00:06:16.180
It would super bug me.


00:06:16.180 --> 00:06:20.300
Like if I have A equals one, B equals two, or B equals two, A equals one.


00:06:20.300 --> 00:06:24.420
If the dictionary contents are the same, but the order changes,


00:06:24.420 --> 00:06:27.300
and they say they're not equal, that would,


00:06:27.300 --> 00:06:28.540
I mean, that would bug me, I think.


00:06:28.540 --> 00:06:31.060
- Right, but order dict, apparently it does matter.


00:06:31.060 --> 00:06:34.660
So if you care about order, you can use order dict


00:06:34.660 --> 00:06:36.460
to make sure they're in the same order.


00:06:36.460 --> 00:06:38.300
- Yeah, I guess you're explicitly saying


00:06:38.300 --> 00:06:39.500
I super care about order,


00:06:39.500 --> 00:06:41.660
so if the order changes, they're not the same.


00:06:41.660 --> 00:06:44.340
- Yeah, yeah, so just a little surprise.


00:06:44.340 --> 00:06:45.180
Surprise!


00:06:45.180 --> 00:06:46.020
- Surprise!


00:06:46.020 --> 00:06:47.340
- Or maybe not, but thanks, Ned.


00:06:47.340 --> 00:06:48.180
- Yeah, that's cool.


00:06:48.180 --> 00:06:49.460
I wouldn't have known that.


00:06:49.460 --> 00:06:50.500
That's pretty neat.


00:06:50.500 --> 00:06:52.900
Speaking of knowing stuff, you and I work on a few things.


00:06:52.900 --> 00:06:54.460
So we've got some Patreon stuff going on,


00:06:54.460 --> 00:06:55.860
a lot of ways people can support us.


00:06:55.860 --> 00:06:57.220
I'll just really quick shout out,


00:06:57.220 --> 00:06:58.260
as a lot of people know,


00:06:58.260 --> 00:07:00.620
if you want to get better at Python,


00:07:00.620 --> 00:07:02.180
learn some things,


00:07:02.180 --> 00:07:04.620
check out training.talkpython.fm.


00:07:04.620 --> 00:07:07.140
We've got a ton of classes coming up on


00:07:07.140 --> 00:07:10.980
almost 200 hours of polished Python content over there,


00:07:10.980 --> 00:07:11.820
which is pretty crazy.


00:07:11.820 --> 00:07:13.420
- Yeah, and I love the content there.


00:07:13.420 --> 00:07:15.700
We now have 55 supporters on Patreon,


00:07:15.700 --> 00:07:17.140
which is super cool.


00:07:17.140 --> 00:07:19.060
And if you go to any of our show notes,


00:07:19.060 --> 00:07:21.180
there's a Patreon link on the side,


00:07:21.180 --> 00:07:22.020
you can click on it.


00:07:22.020 --> 00:07:24.500
And a lot of people are just sending a buck a month


00:07:24.500 --> 00:07:27.540
and it's just awesome, but it adds up and it helps out.


00:07:27.540 --> 00:07:28.460
- Yeah. - Thank you.


00:07:28.460 --> 00:07:29.300
- Yeah, it definitely helps out.


00:07:29.300 --> 00:07:31.980
It covers operating expenses like editing


00:07:31.980 --> 00:07:33.260
and transcripts and whatnot.


00:07:33.260 --> 00:07:36.220
- Yeah, so what you got next for us?


00:07:36.220 --> 00:07:41.220
- I have a follow-on to a follow-on to a follow-on.


00:07:41.220 --> 00:07:42.740
How about that? - That's great.


00:07:42.740 --> 00:07:46.620
- Yes, so we spoke about black cell magic,


00:07:46.620 --> 00:07:50.340
which is a way to type a thing into a cell in Jupyter


00:07:50.340 --> 00:07:51.980
and have black format it.


00:07:51.980 --> 00:07:53.320
And a bunch of people said, "Oh, and there's this,


00:07:53.320 --> 00:07:55.480
"and there's that, and there's all these great things."


00:07:55.480 --> 00:07:58.920
And you covered, I think it was NB--


00:07:58.920 --> 00:08:00.960
- NBQA. - QA, yeah, was it?


00:08:00.960 --> 00:08:03.160
Yeah, it was the last letter, QA, which is cool.


00:08:03.160 --> 00:08:05.760
So that's kind of like a bigger set of tooling


00:08:05.760 --> 00:08:09.320
and other libraries along with Black on top of that.


00:08:09.320 --> 00:08:12.400
But one of the things that bugs me about Jupyter Notebooks


00:08:12.400 --> 00:08:16.600
is they just seem to lack some of this proper editor support


00:08:16.600 --> 00:08:19.120
and Black, like format code is one of those,


00:08:19.120 --> 00:08:22.240
but it's not the only one that bugs me.


00:08:22.240 --> 00:08:25.000
And it took me a while to kind of get the zen of notebooks.


00:08:25.000 --> 00:08:27.320
Like why do I create one of those instead of something else?


00:08:27.320 --> 00:08:28.160
And what's the flow?


00:08:28.160 --> 00:08:30.100
And I really do find them valuable,


00:08:30.100 --> 00:08:32.680
but it drives me crazy that if I type,


00:08:32.680 --> 00:08:37.160
you know, class object library dot, I just have to know.


00:08:37.160 --> 00:08:38.200
Like there's no help.


00:08:38.200 --> 00:08:40.640
I have to know what I'm supposed to type.


00:08:40.640 --> 00:08:43.600
And then when I type it out, I say parentheses,


00:08:43.600 --> 00:08:45.400
and there's some number of arguments


00:08:45.400 --> 00:08:47.760
that go into this function call or whatever.


00:08:47.760 --> 00:08:51.480
I have to just know the order, the type, the name, everything.


00:08:51.480 --> 00:08:57.360
Now, before someone mails in, I know I can type thing dot and then press tab and it'll


00:08:57.360 --> 00:08:59.160
come up in a list.


00:08:59.160 --> 00:09:02.880
But like this, like, please help me out on request.


00:09:02.880 --> 00:09:03.880
I don't know.


00:09:03.880 --> 00:09:07.840
It's like just typing dot should just, I should be able to just flow and not have to like,


00:09:07.840 --> 00:09:12.240
okay, type and then okay, now what's the documentation again for the signature?


00:09:12.240 --> 00:09:13.240
Where is it defined?


00:09:13.240 --> 00:09:14.360
All those kinds of things.


00:09:14.360 --> 00:09:23.000
So there's this cool project that was sent in by Anders Kallmer called JupyterLab LSP


00:09:23.000 --> 00:09:30.100
for Language Server Protocol Integration or more accurately, it rolls right off the tongue.


00:09:30.100 --> 00:09:35.680
Language Server Protocol Integration for JupyterLab is its official name, but it's super cool.


00:09:35.680 --> 00:09:42.360
It brings a lot of these things that I felt were missing from the Jupyter experience.


00:09:42.360 --> 00:09:45.720
So if you go there, you'll see that there's a bunch of examples, sample code, which shows


00:09:45.720 --> 00:09:50.700
Python, but actually works in R, Bash, TypeScript, and a bunch of other languages.


00:09:50.700 --> 00:09:52.360
So here are some of the things that are supported.


00:09:52.360 --> 00:09:58.040
One, if I hover over a piece of code, if an underline appears, you can press control to


00:09:58.040 --> 00:10:02.280
get a tooltip with a function and a function or class signature.


00:10:02.280 --> 00:10:07.360
You can get documentation and other information about it just by hovering.


00:10:07.360 --> 00:10:10.680
It'll show you like if you write code that's bad, like in Jupyter, if I write code that's


00:10:10.680 --> 00:10:14.720
bad it just it looks like code that's good except for it won't run. Whereas


00:10:14.720 --> 00:10:17.320
here to put little squigglies under it and say there's something wrong with


00:10:17.320 --> 00:10:21.720
this or there's a warning here you're doing something wrong right so editor


00:10:21.720 --> 00:10:26.560
stuff like that. Jump to definition so you can right-click and say take me to


00:10:26.560 --> 00:10:30.440
where this variable or this function is defined which is pretty awesome. It'll


00:10:30.440 --> 00:10:35.280
highlight your references if you place it on a variable like in PyCharm if you


00:10:35.280 --> 00:10:39.680
put got a variable you put your cursor on it like all the places where it's


00:10:39.680 --> 00:10:41.400
used or defined light up.


00:10:41.400 --> 00:10:42.400
So like that.


00:10:42.400 --> 00:10:43.400
Yeah.


00:10:43.400 --> 00:10:45.720
And auto completion.


00:10:45.720 --> 00:10:49.960
If I type the character dot, it will know that I want auto complete.


00:10:49.960 --> 00:10:51.640
So I don't have to keep typing stuff.


00:10:51.640 --> 00:10:52.640
That's pretty cool.


00:10:52.640 --> 00:10:56.280
And then on top of that, it has a rename, rename refactorings.


00:10:56.280 --> 00:11:01.080
So you can rename stuff across your, your, all your cells and things like that.


00:11:01.080 --> 00:11:02.760
As well as files.


00:11:02.760 --> 00:11:08.520
So, you know, not groundbreaking world changing, but it definitely seems like it will take,


00:11:08.520 --> 00:11:12.760
it up a notch in your Jupyter experience, right? Just to bring it a little closer to


00:11:12.760 --> 00:11:17.320
editors like PyCharm and VS Code. And it proves the point that the hardest thing in computer


00:11:17.320 --> 00:11:23.080
science is naming. That's right. We have a whole function when you get that wrong. That's what you


00:11:23.080 --> 00:11:34.280
do. Yeah, but I mean the name Jupyter. Jupyter-JupyterLab-LSP. Yes, indeed. All right,


00:11:34.280 --> 00:11:35.560
All right, what's this next one you got?


00:11:35.560 --> 00:11:38.640
>> Well, speaking of Jupyter, I guess it's a little related.


00:11:38.640 --> 00:11:43.200
This is a project that is implemented as a Jupyter book.


00:11:43.200 --> 00:11:44.720
I'm not sure if we covered Jupyter books,


00:11:44.720 --> 00:11:46.240
the Jupyter book project before,


00:11:46.240 --> 00:11:49.880
but it's a pretty neat documentation system.


00:11:49.880 --> 00:11:52.320
This is open source tools and data


00:11:52.320 --> 00:11:54.920
for music source separation.


00:11:54.920 --> 00:11:58.840
I was researching music, Python music tools recently,


00:11:58.840 --> 00:12:02.120
came across this, and it's really cool.


00:12:02.120 --> 00:12:05.840
So what it is, it's an online book powered by JupyterBook.


00:12:05.840 --> 00:12:09.920
The authors are Ethan Manilow, Prem Setherman,


00:12:09.920 --> 00:12:12.400
and Justin Solomon, I think.


00:12:12.400 --> 00:12:15.120
And it's a tutorial intended to guide people


00:12:15.120 --> 00:12:17.520
through modern open source tooling and data sets


00:12:17.520 --> 00:12:19.560
for running, evaluating, researching,


00:12:19.560 --> 00:12:22.760
and deploying source separation approaches


00:12:22.760 --> 00:12:24.680
and focuses on music.


00:12:24.680 --> 00:12:26.440
Now, that's a mouthful,


00:12:26.440 --> 00:12:29.120
and maybe that's a limited set of people,


00:12:29.120 --> 00:12:30.480
but it's really neat.


00:12:30.480 --> 00:12:33.920
that uses Python and it has interactive demos.


00:12:33.920 --> 00:12:36.680
Things with audio are way easier to visualize


00:12:36.680 --> 00:12:39.960
if you have a waveform in front of you.


00:12:39.960 --> 00:12:43.000
And this uses waveforms and stuff, it's beautiful.


00:12:43.000 --> 00:12:44.160
One of the things I wanted to highlight


00:12:44.160 --> 00:12:47.200
is there's a basics of source separation section.


00:12:47.200 --> 00:12:51.580
And that includes a primer on digitizing audio signals.


00:12:51.580 --> 00:12:55.300
And it looks at frequency, time frequency representations,


00:12:55.300 --> 00:12:58.160
what phases, some evaluations and measurements.


00:12:58.160 --> 00:13:00.240
Anyway, I think this is the best reference


00:13:00.240 --> 00:13:04.680
for understanding digitizing signals that I've seen so far.


00:13:04.680 --> 00:13:05.520
It's really great.


00:13:05.520 --> 00:13:06.620
- Oh, this is super cool.


00:13:06.620 --> 00:13:09.080
I think maybe the most generally useful thing at all,


00:13:09.080 --> 00:13:11.640
this is the whole Jupyter book way


00:13:11.640 --> 00:13:15.120
to create something like this for any knowledge base.


00:13:15.120 --> 00:13:16.680
- Yeah, I'd love to see how they do it.


00:13:16.680 --> 00:13:18.880
And it's a Creative Commons sort of thing.


00:13:18.880 --> 00:13:20.560
They got links to their GitHub repo


00:13:20.560 --> 00:13:22.460
so anybody can see how they do this.


00:13:22.460 --> 00:13:24.160
So it's really cool.


00:13:24.160 --> 00:13:25.000
I like it.


00:13:25.000 --> 00:13:25.840
- Yeah, yeah, it's super cool.


00:13:25.840 --> 00:13:28.080
And they do have it on, it's open source on GitHub.


00:13:28.080 --> 00:13:29.800
So that's pretty sweet.


00:13:29.800 --> 00:13:30.800
I do have a complaint though.


00:13:30.800 --> 00:13:31.800
Okay.


00:13:31.800 --> 00:13:32.800
This is a big deal.


00:13:32.800 --> 00:13:38.520
So, there's a section in here on the basics of phase, phase and phase train, like waveforms


00:13:38.520 --> 00:13:39.960
and what phases and so on.


00:13:39.960 --> 00:13:44.560
There's some formulas in here where they define J to be the square root of negative one.


00:13:44.560 --> 00:13:47.200
We all know that I is the square root of negative one.


00:13:47.200 --> 00:13:48.200
Come on.


00:13:48.200 --> 00:13:52.440
I mean, it's an imaginary number.


00:13:52.440 --> 00:13:55.040
It doesn't start with J. It starts with I.


00:13:55.040 --> 00:13:57.680
Sorry, carry on.


00:13:57.680 --> 00:13:59.280
That phase thing is gorgeous.


00:13:59.280 --> 00:14:02.820
- Yeah, the animations in Phase is actually really nice.


00:14:02.820 --> 00:14:05.280
- To tell you the truth, I deal with signals all the time


00:14:05.280 --> 00:14:08.760
and if you want to get into the math, the math is here.


00:14:08.760 --> 00:14:11.660
So this actually would be a great actual textbook


00:14:11.660 --> 00:14:13.360
for a university course.


00:14:13.360 --> 00:14:15.760
But I just skip over the math part


00:14:15.760 --> 00:14:17.640
and read the explanations and stuff.


00:14:17.640 --> 00:14:18.600
It's still useful.


00:14:18.600 --> 00:14:19.680
- Yeah, quite neat.


00:14:19.680 --> 00:14:21.060
All right, let me ask you a question.


00:14:21.060 --> 00:14:21.900
- Okay.


00:14:21.900 --> 00:14:23.160
- You've done C++ a ton.


00:14:23.160 --> 00:14:24.860
You still do it every now and then, right?


00:14:24.860 --> 00:14:25.800
- I do it every day.


00:14:25.800 --> 00:14:27.360
- Yeah, right on.


00:14:27.360 --> 00:14:28.440
Python have pointers.


00:14:28.440 --> 00:14:30.560
- Somewhere, I guess.


00:14:30.560 --> 00:14:31.400
It's gotta be.


00:14:31.400 --> 00:14:32.720
- Does it have value types?


00:14:32.720 --> 00:14:33.960
Like non-pointers?


00:14:33.960 --> 00:14:35.960
Can I have a thing that doesn't behave like a pointer?


00:14:35.960 --> 00:14:37.600
- I think of it more like references.


00:14:37.600 --> 00:14:38.440
- Yeah.


00:14:38.440 --> 00:14:39.520
- All of Python seems like a reference.


00:14:39.520 --> 00:14:41.200
- I wanna cover an article,


00:14:41.200 --> 00:14:42.520
Pass-by-Reference in Python,


00:14:42.520 --> 00:14:43.840
Background and Best Practices,


00:14:43.840 --> 00:14:45.680
from the RealPython crew.


00:14:45.680 --> 00:14:48.920
- And also, I just apparently failed this job interview.


00:14:48.920 --> 00:14:49.760
So.


00:14:49.760 --> 00:14:50.880
(laughing)


00:14:50.880 --> 00:14:53.880
- By Marius Mogiarossi?


00:14:53.880 --> 00:14:55.960
Hopefully I got that somewhat close.


00:14:55.960 --> 00:15:00.920
So Mariusz wrote this article over there on Python,


00:15:00.920 --> 00:15:02.480
which is pretty interesting.


00:15:02.480 --> 00:15:06.340
And it sort of compares languages that have explicit,


00:15:06.340 --> 00:15:09.080
you can explicitly work with things as references


00:15:09.080 --> 00:15:12.920
or pointers, or you can work with them as local value types.


00:15:12.920 --> 00:15:14.440
And then sort of compare that,


00:15:14.440 --> 00:15:16.760
like there are certain types of problems you might solve


00:15:16.760 --> 00:15:18.700
or address or algorithms over there


00:15:18.700 --> 00:15:20.760
that don't necessarily make a lot of sense in Python.


00:15:20.760 --> 00:15:23.960
So how would you simulate some of those behaviors?


00:15:23.960 --> 00:15:26.880
So Python's interesting because in the guts,


00:15:26.880 --> 00:15:30.360
like everything is a pointer, even the number four.


00:15:30.360 --> 00:15:33.880
If you ask, like the number four in C,


00:15:33.880 --> 00:15:35.720
if I said four, how many bytes would you think


00:15:35.720 --> 00:15:36.560
that would take?


00:15:36.560 --> 00:15:38.520
- It depends on, in C?


00:15:38.520 --> 00:15:39.360
- Yeah.


00:15:39.360 --> 00:15:40.720
- It's the machine type, so it's--


00:15:40.720 --> 00:15:42.000
- Right, so probably four or eight,


00:15:42.000 --> 00:15:42.920
something like that, right?


00:15:42.920 --> 00:15:43.920
- How many bytes, yeah, yeah.


00:15:43.920 --> 00:15:44.980
- Yeah, exactly.


00:15:44.980 --> 00:15:47.560
And when you create one, it would be associated


00:15:47.560 --> 00:15:50.320
with a stack, unless you did some funky stuff


00:15:50.320 --> 00:15:53.040
to like allocate it and like you do it in like an amper


00:15:53.040 --> 00:15:53.880
to get the address.


00:15:53.880 --> 00:15:58.120
But by default, it's like comes on the stack and you pass around and makes a copy of it.


00:15:58.120 --> 00:16:02.460
In Python, the number four is a pointer.


00:16:02.460 --> 00:16:07.280
It's a C, it's a pi long object out in the heap.


00:16:07.280 --> 00:16:12.960
And it takes like 28 bytes, like the number four takes 28 bytes, which is pretty interesting.


00:16:12.960 --> 00:16:17.080
But so everything like even basic numbers that seem like they just might be values are


00:16:17.080 --> 00:16:19.680
like in the guts, these sort of reference types.


00:16:19.680 --> 00:16:25.440
the function passing behavior is they say it's something called pass by


00:16:25.440 --> 00:16:30.920
assignment which I'll go with that so when I pass in like if I create a


00:16:30.920 --> 00:16:35.480
variable say X equals 4 and then I pass the X to a function and that function


00:16:35.480 --> 00:16:39.520
changes the value of X it's changed for the function but not for the global


00:16:39.520 --> 00:16:44.920
thing that had it before right yes well in C or C++ or C# like all the


00:16:44.920 --> 00:16:48.920
examples here actually C# you can say no no pass it so that if you the


00:16:48.920 --> 00:16:50.840
the function changes the variable,


00:16:50.840 --> 00:16:53.840
the one where it came from also changes, right?


00:16:53.840 --> 00:16:57.400
I can pass the, I guess in C,


00:16:57.400 --> 00:16:59.000
that would be the pointer to the pointer,


00:16:59.000 --> 00:17:01.120
and you would make a change to the pointer.


00:17:01.120 --> 00:17:04.800
In C#, you would say ref or out or something like that,


00:17:04.800 --> 00:17:07.120
and it would make a change on the other side.


00:17:07.120 --> 00:17:09.080
So how do we do that in Python?


00:17:09.080 --> 00:17:10.880
And what are some of the interesting things


00:17:10.880 --> 00:17:12.300
that you might do?


00:17:12.300 --> 00:17:14.560
Said, well, Python doesn't have value type,


00:17:14.560 --> 00:17:16.160
so it doesn't, one of the problems


00:17:16.160 --> 00:17:18.300
with the value type world is like,


00:17:18.300 --> 00:17:21.800
Maybe if I created a class, let's say a class in C++,


00:17:21.800 --> 00:17:24.840
and I create it on the stack and I pass it,


00:17:24.840 --> 00:17:27.360
it's, I think I can make a copy of that, is that right?


00:17:27.360 --> 00:17:30.560
Anyway, it's definitely, if you don't use the new keyword,


00:17:30.560 --> 00:17:32.800
like these pass by values are making copies


00:17:32.800 --> 00:17:33.960
of the data that's passed around.


00:17:33.960 --> 00:17:35.320
That can make things slow.


00:17:35.320 --> 00:17:37.920
Python, everything at some level being a pointer


00:17:37.920 --> 00:17:39.160
doesn't have that problem.


00:17:39.160 --> 00:17:41.160
So that doesn't apply.


00:17:41.160 --> 00:17:44.200
But how do you implement these algorithms?


00:17:44.200 --> 00:17:47.360
So it says, well, if you wanna actually have the function


00:17:47.360 --> 00:17:50.940
make a change, you can do a couple of interesting things.


00:17:50.940 --> 00:17:54.900
Like you could, suppose I want to pass in a variable,


00:17:54.900 --> 00:17:56.060
maybe have that variable change,


00:17:56.060 --> 00:17:58.180
but also get like a true false back,


00:17:58.180 --> 00:17:59.460
like it worked or it didn't work


00:17:59.460 --> 00:18:01.300
or something along those lines.


00:18:01.300 --> 00:18:04.240
So they said, look, you can use tuple unpacking


00:18:04.240 --> 00:18:06.420
to return multiple values,


00:18:06.420 --> 00:18:09.740
the return value and then the modified value, which is one.


00:18:09.740 --> 00:18:11.820
Another thing is you could pass in a mutable data type,


00:18:11.820 --> 00:18:15.180
like I create an object and change a field on the object.


00:18:15.180 --> 00:18:19.980
Right? So that would have this or list or yeah, anything that is mutable,


00:18:19.980 --> 00:18:25.300
basically, or another interesting one would be returning optional value types.


00:18:25.300 --> 00:18:29.220
So if I had like a function that was say, like they would say, okay, we're


00:18:29.220 --> 00:18:33.740
going to try to parse a string into an integer, and I either want to tell you,


00:18:33.740 --> 00:18:36.860
here's the number, the integer you got, or it didn't work.


00:18:36.860 --> 00:18:40.580
Forget that you might throw an exception, but suppose for some reason, this


00:18:40.580 --> 00:18:43.420
example, you don't want to throw an exception, right? What do you do?


00:18:44.020 --> 00:18:48.300
Well, you could return the value and whether or not it worked as a tuple.


00:18:48.300 --> 00:18:49.100
And that's one thing.


00:18:49.100 --> 00:18:54.700
Like in C#, the example they say is as a tri pars takes a string and an out


00:18:54.700 --> 00:18:58.880
integer, which is like a one way ref type of thing.


00:18:58.880 --> 00:19:00.480
So how do we do that in Python?


00:19:00.480 --> 00:19:05.620
Well, you could do just this multi value, multi return value, tuple unpacking, like


00:19:05.620 --> 00:19:09.960
it worked and here's the value or it didn't work and there's no value, which


00:19:09.960 --> 00:19:11.300
is, I don't really love that one.


00:19:11.400 --> 00:19:14.900
One that is interesting is you could use optional types.


00:19:14.900 --> 00:19:19.200
So you could return an integer, and if it's not parsable, you return none.


00:19:19.200 --> 00:19:24.280
And then use the walrus operator to say, value colon equals, try to parse it.


00:19:24.280 --> 00:19:26.440
If that's not none, then you're good to go.


00:19:26.440 --> 00:19:28.200
That one's kind of OK with me.


00:19:28.200 --> 00:19:29.200
How do you feel about this, Brian?


00:19:29.200 --> 00:19:33.640
I feel like people are trying to force non-Python programming


00:19:33.640 --> 00:19:34.800
styles into Python.


00:19:34.800 --> 00:19:35.480
Yeah.


00:19:35.480 --> 00:19:36.200
It's interesting.


00:19:36.200 --> 00:19:38.240
I was reading through it, it just made me think about--


00:19:38.240 --> 00:19:42.840
Think back to my C++ days and all these patterns of passing variables and changes and,


00:19:42.840 --> 00:19:45.040
you know, passing by reference,


00:19:45.040 --> 00:19:47.600
copy and values and all that stuff.


00:19:47.600 --> 00:19:49.320
It's probably worth reading, I think,


00:19:49.320 --> 00:19:51.400
even if you don't necessarily need to do it that much.


00:19:51.400 --> 00:19:54.760
Yeah, I actually like it to be more explicit and have


00:19:54.760 --> 00:19:57.760
either do functional programming where you're...


00:19:57.760 --> 00:19:59.800
I like the functional model where you


00:19:59.800 --> 00:20:03.680
pass in data and you return the modified.


00:20:03.680 --> 00:20:04.600
Yeah, exactly.


00:20:04.600 --> 00:20:07.760
The other approach that I like is to know,


00:20:07.840 --> 00:20:29.060
I mean, you have a shared data that you're pointing to that you, you know, you're past a modifiable data, like, like a list or something and say, hey, this function and it's needs to be obvious, like fill out the data, you know, it's needs to be obvious that the thing you're calling is going to change that, or use a database reference, changeable stuff.


00:20:29.060 --> 00:20:29.440
But


00:20:29.840 --> 00:20:31.840
Yeah, a lot can be done with data structures.


00:20:31.840 --> 00:20:34.840
I thought it was interesting to compare these other styles of programming


00:20:34.840 --> 00:20:37.440
to how you might get them done in Python.


00:20:37.440 --> 00:20:38.780
I think I'll go for the optional.


00:20:38.780 --> 00:20:42.200
If I had to pick one of these to write, I think I would go for the optional


00:20:42.200 --> 00:20:44.200
tripars that returns none


00:20:44.200 --> 00:20:46.200
if it doesn't work.


00:20:46.200 --> 00:20:48.200
Assuming that you don't want exceptions, right?


00:20:48.200 --> 00:20:51.280
Right. And I mean, that's also like the default.


00:20:51.280 --> 00:20:55.000
If you've got the return of a value in


00:20:55.000 --> 00:20:58.880
some nested data or logic,


00:20:58.880 --> 00:21:02.160
and you don't return anything otherwise, you're going to return none.


00:21:02.160 --> 00:21:05.760
Yeah, you know, when I first started learning Python, that's something that


00:21:05.760 --> 00:21:09.840
was strange to me is that every function returns a value,


00:21:09.840 --> 00:21:13.600
even if the word return doesn't appear in the function, it just happens to be none.


00:21:13.600 --> 00:21:16.800
Like the fall through case sort of in there is return none.


00:21:16.800 --> 00:21:20.000
I kind of forgot that that's not obvious.


00:21:20.000 --> 00:21:21.200
Yeah, yeah, yeah.


00:21:21.200 --> 00:21:25.120
But that takes some getting used to because all the other languages you say,


00:21:25.120 --> 00:21:26.480
it returns one of these things.


00:21:26.480 --> 00:21:30.800
if you want to return something, you say return none at the end or something.


00:21:30.800 --> 00:21:35.760
Anyway, a lot of interesting ways to think about passing variables and some of the patterns there.


00:21:35.760 --> 00:21:36.640
Yeah, my head hurts.


00:21:36.640 --> 00:21:39.920
So if we're going to write some of these down, maybe you should just put them in


00:21:39.920 --> 00:21:41.200
in GitHub and store them, huh?


00:21:41.200 --> 00:21:44.560
I apologize again. I think somebody on Twitter sent us this, but I


00:21:44.560 --> 00:21:50.160
couldn't find the reference this morning. This is a really cool thing. The author is WeiWang,


00:21:50.160 --> 00:21:53.280
I think, goes by only way on GitHub.


00:21:53.280 --> 00:21:57.280
And it's a tool for visualizing Git concepts.


00:21:57.280 --> 00:21:59.040
And I absolutely love this.


00:21:59.040 --> 00:22:01.840
He actually references a Git basics page,


00:22:01.840 --> 00:22:03.920
which is, I forget where that's at,


00:22:03.920 --> 00:22:06.080
but it's a good explanation.


00:22:06.080 --> 00:22:08.960
But it's a visual, not really,


00:22:08.960 --> 00:22:10.720
it's like a static thing that you read


00:22:10.720 --> 00:22:12.560
about all the different ways and all the repos


00:22:12.560 --> 00:22:13.680
and where they are and everything.


00:22:13.680 --> 00:22:16.160
And that's, you kind of have to read that once,


00:22:16.160 --> 00:22:17.840
even though if it doesn't make sense,


00:22:17.840 --> 00:22:20.240
read something about how Git goes together.


00:22:20.240 --> 00:22:23.240
But this visualizing tool is super cool.


00:22:23.240 --> 00:22:25.240
The one he's put together,


00:22:25.240 --> 00:22:27.840
it says visualizing Git concepts in D3,


00:22:27.840 --> 00:22:30.640
and it just nails the things home.


00:22:30.640 --> 00:22:31.640
It's really cool.


00:22:31.640 --> 00:22:34.440
It's got all these different concepts like


00:22:34.440 --> 00:22:36.840
commit, branch, checkout, checkout with a B,


00:22:36.840 --> 00:22:40.640
reset, revert, merge, rebase, tag, fetch, pull, push.


00:22:40.640 --> 00:22:44.440
And you just start out with a diagram


00:22:44.440 --> 00:22:49.160
of what your repo looks like with branches and everything and the dots.


00:22:49.160 --> 00:22:55.000
And then on the left side, you can type commands and you don't have any code you're changing.


00:22:55.000 --> 00:23:00.120
You're just typing these commands to see what it does to the repository tree.


00:23:00.120 --> 00:23:04.560
And it'll like add nodes and add tags and things move around.


00:23:04.560 --> 00:23:08.960
And it's like light bulbs go off in your head where you're like, "Oh,


00:23:08.960 --> 00:23:11.200
that's what's happening. When I do a checkout,


00:23:11.200 --> 00:23:13.840
all I'm doing is looking at a different branch and that's it."


00:23:13.840 --> 00:23:15.080
Yeah, it's pretty cool.


00:23:15.080 --> 00:23:17.480
So yeah, it's this cool interactive command thing.


00:23:17.480 --> 00:23:26.640
Like you said there, what if I type this and this, what if I do like two commits and then a branch and then a commit and then check it out the other branch and do a commit?


00:23:26.640 --> 00:23:28.120
How does that whole thing look?


00:23:28.120 --> 00:23:29.320
Yeah, it's pretty nice.


00:23:29.320 --> 00:23:38.320
And it tells you like there's a little instructions around each little lesson to like describe what's going on and then suggest things to try.


00:23:38.320 --> 00:23:40.960
But the interactive thing, you can do whatever you want within it.


00:23:40.960 --> 00:23:42.160
You can, you can try it.


00:23:42.160 --> 00:23:45.160
And it doesn't handle all of the things.


00:23:45.160 --> 00:23:51.160
Like, for instance, I tried to get checkout with a dash for the last branch.


00:23:51.160 --> 00:23:53.160
That's not implemented. It's not there.


00:23:53.160 --> 00:23:55.160
But it's pretty cool.


00:23:55.160 --> 00:23:57.160
You know, another thing that's nice about it,


00:23:57.160 --> 00:24:01.160
I mean, the fact that it doesn't support everything isn't necessarily ideal.


00:24:01.160 --> 00:24:07.160
But one thing that is pretty cool is you don't have to be totally accurate there to make it work.


00:24:07.160 --> 00:24:09.160
You can just do a get commit.


00:24:09.160 --> 00:24:14.760
commit and you don't just like add stuff and fake stage things and then like commit them.


00:24:14.760 --> 00:24:18.840
You just type like git commit, git commit, git branch, and it kind of just shows like there's


00:24:18.840 --> 00:24:23.400
sort of a shorthand like if you kind of got the sense of it, it'll do the stuff to let you,


00:24:23.400 --> 00:24:28.280
you don't have to know your git perfectly. Yeah, and the commands that involve, because you kind


00:24:28.280 --> 00:24:32.120
of want to play with this stuff to try to get it, get your head around it, but you don't really want


00:24:32.120 --> 00:24:38.760
to muck up your own repo or your code base. The ones that involve like the origin remote repository,


00:24:38.760 --> 00:24:40.440
like fetch, pull, and push.


00:24:40.440 --> 00:24:44.200
Those are great to be, you visualize both of them at the same time.


00:24:44.200 --> 00:24:46.680
And there's two pictures going on.


00:24:46.680 --> 00:24:50.680
And this is definitely something a desktop sort of thing, I don't think that,


00:24:50.680 --> 00:24:55.080
I think it would be tricky to do this on an iPhone or something like that.


00:24:55.080 --> 00:24:57.320
Yeah, without a keyboard, yeah, for sure.


00:24:57.320 --> 00:25:00.120
I'm definitely going to bring this to my team and say, "Hey, everybody,


00:25:00.120 --> 00:25:01.560
check this out."


00:25:01.560 --> 00:25:05.400
You should do things like, I want you to build a picture that looks like this.


00:25:05.400 --> 00:25:12.200
what git commands and what order the commands are necessary to result in this structure, right?


00:25:12.200 --> 00:25:13.560
I think that would be a cool way to do it.


00:25:13.560 --> 00:25:14.760
Oh, man.


00:25:14.760 --> 00:25:18.840
Okay, so the second part of the interview, I will fail at also.


00:25:18.840 --> 00:25:22.520
Man, you're tough.


00:25:22.520 --> 00:25:23.960
I'm glad I'm not interviewing with you.


00:25:23.960 --> 00:25:24.520
Oh, my gosh.


00:25:24.520 --> 00:25:25.320
Yeah.


00:25:25.320 --> 00:25:27.800
No, I think that would be cool though, because you're like, all right, well,


00:25:27.800 --> 00:25:31.240
because I think conceptually, we also have this idea of like,


00:25:31.240 --> 00:25:35.240
this is the picture I want, but what are the commands that like


00:25:35.240 --> 00:25:41.800
take those steps, right? Yeah. I'm still getting over the, quick, the integer four, how


00:25:41.800 --> 00:25:48.280
many bytes, how many bytes in Python? Four or eight or something. Yeah, exactly. 28 is not what you


00:25:48.280 --> 00:25:54.360
would expect, but in Python it's 28. Yeah. Okay. And if you want to test import this, just get


00:25:54.360 --> 00:25:58.760
object size past the number four. All right. But if here's the, here's the next question, Brian,


00:25:58.760 --> 00:26:00.360
If I have a hundred


00:26:00.360 --> 00:26:02.360
fours in a Python program,


00:26:02.360 --> 00:26:03.860
how many bytes does it take?


00:26:03.860 --> 00:26:04.360
28.


00:26:04.360 --> 00:26:05.160
Yeah, exactly.


00:26:05.160 --> 00:26:07.560
Plus the pointers that point at them, but yeah, 28.


00:26:07.560 --> 00:26:08.460
That's pretty cool.


00:26:08.460 --> 00:26:11.260
So, 128, I don't know.


00:26:11.260 --> 00:26:14.360
8 times, 828, I don't know.


00:26:14.360 --> 00:26:15.760
How big are the pointers?


00:26:15.760 --> 00:26:17.760
I think they're 64 bits, so they got to be 8.


00:26:17.760 --> 00:26:18.560
I don't know.


00:26:18.560 --> 00:26:20.960
We've gone down a hole that we don't need to.


00:26:20.960 --> 00:26:22.960
What I would rather talk about is


00:26:22.960 --> 00:26:24.160
MicroPython.


00:26:24.160 --> 00:26:25.160
Yeah, so this is...


00:26:25.160 --> 00:26:26.360
Round out the extras.


00:26:26.360 --> 00:26:27.760
Oh yeah, we're in the extras now.


00:26:27.760 --> 00:26:31.520
a micro bit announced that it's going to come out with a new version in November.


00:26:31.520 --> 00:26:34.520
It's got a whole bunch of videos showing the cool stuff.


00:26:34.520 --> 00:26:37.160
They're shooting at the same price point they had before,


00:26:37.160 --> 00:26:39.720
which I have no idea what it was, but reasonable.


00:26:39.720 --> 00:26:42.640
But micro bit now has a speaker and a microphone,


00:26:42.640 --> 00:26:45.920
so you can play sounds and do things like,


00:26:45.920 --> 00:26:48.200
I don't know, record your voice or something.


00:26:48.200 --> 00:26:51.160
I don't know what you want to do, but that's neat.


00:26:51.160 --> 00:26:51.720
Nice.


00:26:51.720 --> 00:26:54.320
Yeah, it does do MicroPython.


00:26:54.320 --> 00:26:56.680
I think they do something else also,


00:26:56.680 --> 00:26:58.880
but why would you do something else, use MicroPython?


00:26:58.880 --> 00:27:00.600
- Yeah, exactly.


00:27:00.600 --> 00:27:02.240
Yeah, I'm looking for the price.


00:27:02.240 --> 00:27:04.880
All right, too much math.


00:27:04.880 --> 00:27:07.420
I think it's $21, but that's Australian,


00:27:07.420 --> 00:27:08.760
so I don't know, something like that.


00:27:08.760 --> 00:27:09.600
It's not a lot.


00:27:09.600 --> 00:27:12.200
- Australian?


00:27:12.200 --> 00:27:16.120
- Well, the first thing I pulled up was $2,119 Australian,


00:27:16.120 --> 00:27:17.560
but that's for 100 packs, so.


00:27:17.560 --> 00:27:20.160
- Okay.


00:27:20.160 --> 00:27:21.320
- All right, cool, now that's really neat


00:27:21.320 --> 00:27:24.200
that the sound is coming in and you can interact with it.


00:27:24.200 --> 00:27:26.480
I think there'll be a lot of neat stuff you can do there.


00:27:26.480 --> 00:27:29.480
That's a really nice, I mean, so far a lot of these little devices,


00:27:29.480 --> 00:27:30.580
like how do you interact with it?


00:27:30.580 --> 00:27:33.980
Well, you can kind of shake it or you can touch this button or it like has an LED


00:27:33.980 --> 00:27:36.380
and sound is a whole nother level, right?


00:27:36.380 --> 00:27:39.980
You could do speech recognition, you could play, like, I think it's really neat.


00:27:39.980 --> 00:27:44.380
Yeah, looks like they've got some plans to extend what this can do in the future too.


00:27:44.380 --> 00:27:45.380
So this is pretty cool.


00:27:45.380 --> 00:27:45.980
Yeah, absolutely.


00:27:45.980 --> 00:27:48.280
I'm a fan of the Circuit Playground Express.


00:27:48.280 --> 00:27:51.180
That's a really fun thing to play with, but this is neat also.


00:27:51.180 --> 00:27:52.280
Yeah, for sure.


00:27:52.280 --> 00:27:54.780
All right, I got two quick things to share with people.


00:27:54.780 --> 00:27:59.340
One really fast one yesterday, so eight days ago in real time.


00:27:59.340 --> 00:28:08.100
I was on the 425 show, which is a Microsoft identity Twitch stream.


00:28:08.100 --> 00:28:15.020
Spent three hours converting a flask web app to use federated identity and like


00:28:15.020 --> 00:28:19.140
remote login and all sorts of cool stuff like that, and like just to step away


00:28:19.140 --> 00:28:23.620
from also having like social logins and whatnot, using all those libraries.


00:28:23.620 --> 00:28:24.700
So people are interested in that.


00:28:24.700 --> 00:28:26.580
I'll link to the whole show.


00:28:26.580 --> 00:28:30.140
And I just want to comment, it's a very different way


00:28:30.140 --> 00:28:30.740
of presenting.


00:28:30.740 --> 00:28:32.740
I'm used to polished presentations.


00:28:32.740 --> 00:28:34.660
What are we going to do in this half hour?


00:28:34.660 --> 00:28:36.140
Let's get it all down really clear.


00:28:36.140 --> 00:28:37.300
Here's the demo I'm going to write.


00:28:37.300 --> 00:28:39.140
I've already gone through it once,


00:28:39.140 --> 00:28:39.980
so I know it's going to work.


00:28:39.980 --> 00:28:41.700
And this is like, hey, we have this idea.


00:28:41.700 --> 00:28:43.860
Let's just work on it until we get it done.


00:28:43.860 --> 00:28:47.100
And just take input from the audience,


00:28:47.100 --> 00:28:48.860
from the people watching live.


00:28:48.860 --> 00:28:52.180
And for people who've done presentations


00:28:52.180 --> 00:28:55.460
and haven't done this style, it's an interesting shift.


00:28:55.460 --> 00:28:58.420
It's a cool way to present programming to people, I think.


00:28:58.420 --> 00:28:59.420
- So would you do it again?


00:28:59.420 --> 00:29:00.260
Was it fun?


00:29:00.260 --> 00:29:01.080
- Yeah, it was fun.


00:29:01.080 --> 00:29:01.920
It was a little stressful,


00:29:01.920 --> 00:29:06.920
'cause I haven't done a lot with OAuth identity type stuff,


00:29:06.920 --> 00:29:09.260
so I'm like, I have no idea if we're gonna be successful


00:29:09.260 --> 00:29:11.700
making this work at all, but it was fun.


00:29:11.700 --> 00:29:13.700
And spoiler alert, it worked in the end.


00:29:13.700 --> 00:29:17.740
- Is the 4.25 a joke on five minutes after 4.20?


00:29:17.740 --> 00:29:20.980
- I have no idea.


00:29:20.980 --> 00:29:21.820
No idea why.


00:29:21.820 --> 00:29:23.600
- There's an about, let me see if it says


00:29:23.600 --> 00:29:25.700
what it says in the about.


00:29:25.700 --> 00:29:27.640
I have no idea, it doesn't say.


00:29:27.640 --> 00:29:31.480
But anyway, it was fun, so people can check out that video.


00:29:31.480 --> 00:29:34.140
And then also, I've started using something interesting


00:29:34.140 --> 00:29:36.340
that people may find interesting.


00:29:36.340 --> 00:29:39.420
So one of the things that bugs me is so much of our life


00:29:39.420 --> 00:29:41.460
is on the web, Brian, as you know.


00:29:41.460 --> 00:29:45.420
And how many cookies do you think your browser has in it?


00:29:45.420 --> 00:29:47.740
If you were like to sum them up across all the sites.


00:29:47.740 --> 00:29:48.580
- No way.


00:29:48.580 --> 00:29:49.620
- Like an untold number, right?


00:29:49.620 --> 00:29:52.780
like 100,000, 200, like some insane number.


00:29:52.780 --> 00:29:56.380
If it had been, you know, the same browser for years


00:29:56.380 --> 00:29:59.060
and you've used it all day, like who knows, right?


00:29:59.060 --> 00:30:01.540
So I had a couple of thoughts.


00:30:01.540 --> 00:30:04.500
I decided, well, I want to just restart all that from scratch.


00:30:04.500 --> 00:30:08.920
So I erased every bit of history from my browser


00:30:08.920 --> 00:30:09.980
and fired it back up.


00:30:09.980 --> 00:30:11.120
I'm like, okay, now I've got to log


00:30:11.120 --> 00:30:13.020
into all these things again, which is fine.


00:30:13.020 --> 00:30:17.660
But then also realize like, do I want, like say,


00:30:17.660 --> 00:30:19.680
If I go to some random site,


00:30:19.680 --> 00:30:23.120
and maybe it has some cross-site vulnerability or whatever,


00:30:23.120 --> 00:30:24.820
do I want that site potentially to be able to say


00:30:24.820 --> 00:30:28.780
to get to my GitHub things or my bank or whatever,


00:30:28.780 --> 00:30:30.380
if I'm logged in?


00:30:30.380 --> 00:30:33.180
So I started using this thing called Firefox containers


00:30:33.180 --> 00:30:35.460
that let you basically create like isolated,


00:30:35.460 --> 00:30:38.700
independent browsers for like categories of sites.


00:30:38.700 --> 00:30:42.420
So like GitHub and Bitbucket and all those things


00:30:42.420 --> 00:30:45.100
are in their own like container.


00:30:45.100 --> 00:30:48.220
So only cookies they ever see in login sessions


00:30:48.220 --> 00:30:50.740
and whatnot are between say GitHub and Bitbucket,


00:30:50.740 --> 00:30:53.220
like those and all the other browsing,


00:30:53.220 --> 00:30:55.980
none of them know anything about


00:30:55.980 --> 00:30:57.940
that I've ever visited GitHub, for example.


00:30:57.940 --> 00:30:58.780
- Cool.


00:30:58.780 --> 00:31:00.380
- So anyway, if people are, if that sounds interesting,


00:31:00.380 --> 00:31:02.540
I'll link to a little short video.


00:31:02.540 --> 00:31:03.380
- Is there a limit?


00:31:03.380 --> 00:31:05.700
I mean, 'cause you could possibly just do a container


00:31:05.700 --> 00:31:07.460
for each site that you go to.


00:31:07.460 --> 00:31:09.100
- You could, it gets a little bit annoying


00:31:09.100 --> 00:31:13.700
because if you click on, like if you're in like Google Drive


00:31:13.700 --> 00:31:17.300
and you click on a link and it takes you somewhere.


00:31:17.300 --> 00:31:19.740
And you did that like over grouping it,


00:31:19.740 --> 00:31:21.660
like you'd have to log in every time


00:31:21.660 --> 00:31:22.480
'cause it wouldn't know.


00:31:22.480 --> 00:31:24.280
There's a little bit of juggling.


00:31:24.280 --> 00:31:27.460
So too many, it gets annoying, but yeah.


00:31:27.460 --> 00:31:28.620
Anyways, it's kind of a cool idea


00:31:28.620 --> 00:31:30.340
to like keep all those things separated.


00:31:30.340 --> 00:31:32.500
- People definitely should put Facebook in there 'cause--


00:31:32.500 --> 00:31:36.580
- Oh yeah, I have one specifically the containers,


00:31:36.580 --> 00:31:38.780
like the containers are like banking, shopping,


00:31:38.780 --> 00:31:42.420
code, cloud drives, and I have one called Shund.


00:31:42.420 --> 00:31:44.120
and shunned is where Facebook is.


00:31:44.120 --> 00:31:45.980
(laughing)


00:31:45.980 --> 00:31:47.640
Yeah, so for example, that's a great example.


00:31:47.640 --> 00:31:48.780
So like you go to all these sites


00:31:48.780 --> 00:31:50.180
and they have like Facebook pixels


00:31:50.180 --> 00:31:51.500
and all this tracking stuff.


00:31:51.500 --> 00:31:53.900
Like because I put Facebook over there


00:31:53.900 --> 00:31:55.900
and didn't log into it anywhere else,


00:31:55.900 --> 00:31:59.580
then it will never, those things will never trigger for me


00:31:59.580 --> 00:32:02.180
in the sense of like being tied to my account, right?


00:32:02.180 --> 00:32:03.220
And that makes me happy.


00:32:03.220 --> 00:32:04.860
- I've got like one relative that's,


00:32:04.860 --> 00:32:06.500
that the only way to get ahold of them


00:32:06.500 --> 00:32:08.580
is through Facebook Messenger.


00:32:08.580 --> 00:32:11.180
And so I have to have Facebook just for that.


00:32:11.180 --> 00:32:14.180
Yeah, so you got to get one of these and like you kind of sort of don't have it.


00:32:14.180 --> 00:32:16.180
[laughter]


00:32:16.180 --> 00:32:17.180
Awesome.


00:32:17.180 --> 00:32:22.180
All right, well, that was funny, but not nearly as funny as what we got coming up here.


00:32:22.180 --> 00:32:23.180
Okay.


00:32:23.180 --> 00:32:25.180
All right, you want to do the first one, I'll do the next one, and then you got to do the last one,


00:32:25.180 --> 00:32:27.180
because I don't know where we're going with it.


00:32:27.180 --> 00:32:28.180
Okay, so I'm doing the first one?


00:32:28.180 --> 00:32:29.180
Yeah.


00:32:29.180 --> 00:32:30.180
Okay.


00:32:30.180 --> 00:32:31.180
Where do developers drink?


00:32:31.180 --> 00:32:32.180
I don't know, where do they drink?


00:32:32.180 --> 00:32:33.180
At the foobar.


00:32:33.180 --> 00:32:35.180
At the foobar, I love it.


00:32:35.180 --> 00:32:36.180
Yeah.


00:32:36.180 --> 00:32:38.180
All right, this one, you got to do the last line for me, okay?


00:32:38.180 --> 00:32:39.460
Okay, because this is a knock-knock joke,


00:32:39.460 --> 00:32:41.460
where normally it's like, knock-knock, who's there?


00:32:41.460 --> 00:32:43.460
Cow, witch cow, interrupting cow,


00:32:43.460 --> 00:32:44.300
that kind of thing, right?


00:32:44.300 --> 00:32:45.500
- Yeah. - All right.


00:32:45.500 --> 00:32:46.900
Knock-knock, async function.


00:32:46.900 --> 00:32:47.740
- Who's there?


00:32:47.740 --> 00:32:50.740
(laughing)


00:32:50.740 --> 00:32:52.660
- Perfect, all right, so those are the two jokes.


00:32:52.660 --> 00:32:53.620
What's this last one?


00:32:53.620 --> 00:32:55.220
- Oh, also, if anybody tells us


00:32:55.220 --> 00:32:59.300
that we've already done this async knock-knock joke before,


00:32:59.300 --> 00:33:01.020
we haven't, this is the first time


00:33:01.020 --> 00:33:03.700
we just, they somehow asynced.


00:33:03.700 --> 00:33:05.060
- That's right, exactly.


00:33:05.060 --> 00:33:06.740
- Yeah, it's just, it's a race condition.


00:33:06.740 --> 00:33:08.380
It's not a problem.


00:33:08.380 --> 00:33:09.560
It's fine.


00:33:09.560 --> 00:33:11.180
- No, I just, something funny happened to me


00:33:11.180 --> 00:33:12.340
on Twitter the other day.


00:33:12.340 --> 00:33:14.900
Somebody contacted me and said,


00:33:14.900 --> 00:33:17.900
"Hey Brian, what testing module would you recommend?


00:33:17.900 --> 00:33:20.740
"I'm aware that there's unit test and pytest,


00:33:20.740 --> 00:33:22.500
"but are there better options?"


00:33:22.500 --> 00:33:23.900
(Brian laughs)


00:33:23.900 --> 00:33:26.340
Can you guess which one I recommended?


00:33:26.340 --> 00:33:28.060
- Well, you don't like to install stuff,


00:33:28.060 --> 00:33:30.020
so you definitely said unit test.


00:33:30.020 --> 00:33:32.340
(Brian laughs)


00:33:32.340 --> 00:33:33.680
- Yeah, I should have. - That's right, yeah.


00:33:33.680 --> 00:33:34.820
That's funny, awesome.


00:33:34.820 --> 00:33:37.820
I thought it was a joke at first. I really thought they were joking.


00:33:37.820 --> 00:33:40.820
They were pulling your leg. They're like, "Let's see what you'll say. Come on. Of course you'll say pytest."


00:33:40.820 --> 00:33:46.820
Yeah, but apparently he knew of me somehow without knowing that I wrote the book.


00:33:46.820 --> 00:33:47.820
Yeah, exactly.


00:33:47.820 --> 00:33:48.820
Cool.


00:33:48.820 --> 00:33:50.820
Cool. Well, thank you as always.


00:33:50.820 --> 00:33:51.820
Thank you.


00:33:51.820 --> 00:33:52.820
Yep. Bye everyone.


00:33:52.820 --> 00:33:53.820
Talk to you next time.


00:33:53.820 --> 00:33:54.820
Yeah, see you next time.


00:33:54.820 --> 00:33:57.820
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes.


00:33:57.820 --> 00:34:00.820
That's Python Bytes as in B-Y-T-E-S.


00:34:00.820 --> 00:34:03.820
And get the full show notes at pythonbytes.fm.


00:34:03.820 --> 00:34:08.220
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:34:08.220 --> 00:34:09.220
way.


00:34:09.220 --> 00:34:11.460
We're always on the lookout for sharing something cool.


00:34:11.460 --> 00:34:14.500
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:34:14.500 --> 00:34:17.780
Thank you for listening and sharing this podcast with your friends and colleagues.

