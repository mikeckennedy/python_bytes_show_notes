
00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.600 --> 00:00:10.240
This is episode 139, recorded July 11, 2019.


00:00:10.240 --> 00:00:11.120
I'm Michael Kennedy.


00:00:11.120 --> 00:00:11.920
And I'm Brian Okken.


00:00:11.920 --> 00:00:15.120
And I want to welcome Enis Montani to the show.


00:00:15.120 --> 00:00:16.320
Enis, it's great to have you here.


00:00:16.320 --> 00:00:18.720
Special guest, going to help us cover the news of the week.


00:00:18.720 --> 00:00:19.440
Thanks for being here.


00:00:19.440 --> 00:00:20.320
Yeah, thanks for having me.


00:00:20.320 --> 00:00:20.960
I'm really excited.


00:00:20.960 --> 00:00:23.280
It's going to be really fun to have you participate in this.


00:00:23.280 --> 00:00:25.760
Also, thank you to DigitalOcean for sponsoring this episode.


00:00:25.760 --> 00:00:28.400
Check them out at pythonbytes.fm/digitalocean.


00:00:28.400 --> 00:00:29.200
More on that later.


00:00:29.200 --> 00:00:32.640
Brian, we've talked a lot about like, how do you install Python?


00:00:32.640 --> 00:00:34.240
How do you manage Python?


00:00:34.240 --> 00:00:35.680
How do you upgrade your stuff?


00:00:35.680 --> 00:00:37.200
There's just so many ways.


00:00:37.200 --> 00:00:40.400
And then we've got things like pipenv, flit, poetry.


00:00:40.400 --> 00:00:43.280
It goes on and on, and it still goes on, right?


00:00:43.280 --> 00:00:46.800
This was a contribution from Niels de Bruin sent us this.


00:00:46.800 --> 00:00:50.720
There was an article called "Simplify your Python Developer Environment,"


00:00:50.720 --> 00:00:56.480
and it talked about using pyenv, pipx, and pipenv together.


00:00:56.480 --> 00:01:00.080
And my first reaction was like we've already covered all of these


00:01:00.080 --> 00:01:06.400
However, I have tried pip X actually I did the joke the pie jokes. I did that with pip X and


00:01:06.400 --> 00:01:13.560
I've tried pip end once before it doesn't really do anything for me that I really need and the pie


00:01:13.560 --> 00:01:17.020
Env I've tried it and it didn't work for me. So


00:01:17.020 --> 00:01:21.140
Actually all these things I kind of wanted to give them another shot anyway


00:01:21.440 --> 00:01:23.920
So I went ahead and read this article,


00:01:23.920 --> 00:01:26.320
and it actually is pretty nice.


00:01:26.320 --> 00:01:29.200
It's a nice pros and cons of all the tools


00:01:29.200 --> 00:01:30.680
and how to set them up.


00:01:30.680 --> 00:01:33.480
And I think for somebody that wants to try these out again,


00:01:33.480 --> 00:01:37.040
this is a good article to read to try to get back into it.


00:01:37.040 --> 00:01:39.000
So if people don't remember,


00:01:39.000 --> 00:01:43.800
PyENV is used to install and manage multiple Python versions


00:01:43.800 --> 00:01:46.440
and flavors on a computer.


00:01:46.440 --> 00:01:49.900
And then PipX is something that allows you to create,


00:01:49.900 --> 00:01:52.380
take a Python application and have it bundled


00:01:52.380 --> 00:01:53.820
with its own virtual environment


00:01:53.820 --> 00:01:56.120
and use it globally on your system


00:01:56.120 --> 00:01:58.460
without having to activate the environment.


00:01:58.460 --> 00:02:02.220
And then Pipenv is for when you're working on project


00:02:02.220 --> 00:02:05.260
and application, it's a way to manage virtual environments


00:02:05.260 --> 00:02:07.820
and dependencies on a per project basis.


00:02:07.820 --> 00:02:10.920
- These are really interesting because I feel like often


00:02:10.920 --> 00:02:14.180
they kind of blend, like in a blur together, right?


00:02:14.180 --> 00:02:15.660
You're like, well, I know there's all these


00:02:15.660 --> 00:02:18.240
ENV things I could use and whatnot.


00:02:18.240 --> 00:02:20.080
and it's like, "When should I use what?


00:02:20.080 --> 00:02:21.880
And what one is relevant for the situation?"


00:02:21.880 --> 00:02:22.980
What do you think, Enis?


00:02:22.980 --> 00:02:26.140
It actually took me a second to remember the one that I've used.


00:02:26.140 --> 00:02:27.880
So I'm totally in the market for stuff like that.


00:02:27.880 --> 00:02:30.680
But actually, I hadn't heard of pipx at all.


00:02:30.680 --> 00:02:32.920
But I think, yeah, pyenv I definitely use.


00:02:32.920 --> 00:02:36.520
And I think it's quite important, at least for the work I'm doing,


00:02:36.520 --> 00:02:38.840
because I need to run stuff in all kinds of Pythons.


00:02:38.840 --> 00:02:43.180
And I mean, as a library developer, we need to build stuff for like Python 2.


00:02:43.180 --> 00:02:45.820
We're supporting Python 2.7 and 3.5.


00:02:45.880 --> 00:02:49.280
Just so folks know, you're deeply involved with spaCy


00:02:49.280 --> 00:02:50.920
and some tools built on top of that,


00:02:50.920 --> 00:02:52.040
the natural language processing,


00:02:52.040 --> 00:02:53.760
which will come evident as we go through


00:02:53.760 --> 00:02:54.760
some of your topics and more,


00:02:54.760 --> 00:02:56.860
but maybe not everyone knows your background.


00:02:56.860 --> 00:03:00.240
But I feel like PyENV is most relevant


00:03:00.240 --> 00:03:03.960
for people building libraries,


00:03:03.960 --> 00:03:06.080
and pipenv is really relevant


00:03:06.080 --> 00:03:07.840
for people building applications.


00:03:07.840 --> 00:03:08.920
I don't know, what do you think, Brian?


00:03:08.920 --> 00:03:10.720
- Both of them are important for people like us


00:03:10.720 --> 00:03:12.400
that have to do both.


00:03:12.400 --> 00:03:14.600
I have a question for Inez.


00:03:14.600 --> 00:03:20.600
the PyENV, so that one of my concerns was, can I use it to install, to have multiple


00:03:20.600 --> 00:03:26.600
pythons and still be able to run them all from one project, like with the talks build


00:03:26.600 --> 00:03:28.200
to be able to access all of them?


00:03:28.200 --> 00:03:32.600
So I haven't tried it all, like within the exact same project. I think you might need


00:03:32.600 --> 00:03:36.280
different virtual environments for that. At least that's how I use it. So I use


00:03:36.280 --> 00:03:43.240
VM to create my virtual environments and then they are created with whichever python version


00:03:43.240 --> 00:03:49.160
I've configured locally. So I do like I am local to seven and then the virtual environment will have two seven in it


00:03:49.160 --> 00:03:55.080
Okay, well, i'll give it a shot. Yeah. Yeah, really nice. I'm a big fan of pipx. I think pipx is super cool


00:03:55.080 --> 00:03:56.280
So pipx is great


00:03:56.280 --> 00:04:00.760
If you have a thing that you just want as a utility on the command line in your terminal


00:04:00.760 --> 00:04:07.720
That happens to be python based. So instead of brew install something or npm install something pipx does that?


00:04:07.720 --> 00:04:11.240
So for example, I have like cookie cutter. I have the http high


00:04:11.720 --> 00:04:16.600
library of glances, I pie jokes, of course, because we run this podcast, and some other


00:04:16.600 --> 00:04:19.640
stuff that I'll even talk about later, like PT Python.


00:04:19.640 --> 00:04:22.120
Is that a bit like PX files? Or is that something else?


00:04:22.120 --> 00:04:26.440
It's a little, a little bit what it does is you say I want to have, let's say I want the


00:04:26.440 --> 00:04:32.160
utility PT Python, which is like an EMAX enabled rebel, basically. Okay, so I want to have


00:04:32.160 --> 00:04:35.720
that and I want to be able to just type it. It's not tied to any project, I just want


00:04:35.720 --> 00:04:40.280
to have it as a command on my computer that I can use. So what you can do is you can pipx


00:04:40.280 --> 00:04:44.120
install ptPython, and then it just automatically puts it in a location,


00:04:44.120 --> 00:04:48.360
modifies your path, so that it has its own virtual environment.


00:04:48.360 --> 00:04:51.160
It upgrades itself and its dependency separately,


00:04:51.160 --> 00:04:53.800
but anytime I want, I can just type ptPython and go crazy,


00:04:53.800 --> 00:04:55.880
or Glances, or PyJove, or whatever.


00:04:55.880 --> 00:04:58.680
Okay, I think I get it. Okay, that actually sounds quite cool, yeah.


00:04:58.680 --> 00:05:01.480
It's really nice. You can just say, "What are the updates for my Python libraries


00:05:01.480 --> 00:05:04.120
that I use as applications or little utilities?"


00:05:04.120 --> 00:05:05.720
It's pretty cool. I like that one as well.


00:05:05.720 --> 00:05:08.760
Yeah, I wonder if we can ship our annotation tool, Prodigy, like that,


00:05:08.760 --> 00:05:13.080
because it's very, very command line heavy. And, you know, it's usually kind of a separate thing.


00:05:13.080 --> 00:05:18.840
All it does is build upon pip. So if you could pip install the thing, and it has an entry point,


00:05:18.840 --> 00:05:23.880
then you can pip x install it as well. Okay, yeah, cool. Yeah, pretty cool. All right,


00:05:23.880 --> 00:05:28.680
Brian, are you switching to this? Are you going to use pyenv, pipx and pipenv? Is this your new


00:05:28.680 --> 00:05:34.440
plan? I definitely want to try pyenv because I want to try new Python versions. And my old process


00:05:34.440 --> 00:05:42.040
was to just download the regular install and install it. And then my path is all weird.


00:05:42.040 --> 00:05:43.720
And yeah, it's a mess.


00:05:43.720 --> 00:05:44.120
Classic.


00:05:44.120 --> 00:05:47.240
Cool. Yeah, this is nice. Definitely for people looking for a different workflow,


00:05:47.240 --> 00:05:51.080
it's something they can check out for sure. All right, Ines, what's this next one that you got


00:05:51.080 --> 00:05:51.320
for us?


00:05:51.320 --> 00:05:55.080
This week was actually, or like the past few weeks were actually like super exciting


00:05:55.080 --> 00:06:01.960
also in my field. So there was a new release of a fast AI course for natural language processing.


00:06:01.960 --> 00:06:07.880
So Fast.ai is a very popular free online course for deep learning by Rachel Thomas and Jeremy Howard.


00:06:07.880 --> 00:06:12.600
And it also comes with a Python library, comes with lots of notebooks, really active communities.


00:06:12.600 --> 00:06:17.640
So if you want to get into like the modern machine learning stuff, that's like probably the go-to


00:06:17.640 --> 00:06:21.640
course that I would also recommend to you. And they've also produced some very influential


00:06:21.640 --> 00:06:27.560
research developed alongside the library and the course. So for example, ULM Fit,


00:06:27.560 --> 00:06:32.200
which was a very popular algorithm for text classification. And yeah, the new thing is


00:06:32.200 --> 00:06:36.920
they've just released a course on natural language processing. And it's a very practical introduction.


00:06:36.920 --> 00:06:40.680
And what I thought was really, really interesting and really cool about it is that it, of course,


00:06:40.680 --> 00:06:45.800
covers like the modern neural network approaches and all the like very hip stuff. But it also


00:06:45.800 --> 00:06:50.600
focuses on traditional techniques. So just the whole background of like, okay, what did people


00:06:50.600 --> 00:06:56.440
do before deep learning topic modeling, linear models, just really all the basics. And even like


00:06:56.440 --> 00:07:00.920
rule-based approaches, like regular expressions. Some people might look at this and be like,


00:07:00.920 --> 00:07:08.040
"What, RegEx? I did that 20 years ago." But in fact, in real life and in real-life practical


00:07:08.040 --> 00:07:12.440
applications, that's super important. And you can do a lot with that that really gets the job done.


00:07:12.440 --> 00:07:16.520
So I thought that was really cool. And of course, another thing, the course has a really strong


00:07:16.520 --> 00:07:21.000
focus on ethics as well. So there are videos on bias and disinformation, and basically just a


00:07:21.000 --> 00:07:26.840
topic of like, okay, think about the impact that the work you'll be doing has. And I thought


00:07:26.840 --> 00:07:30.660
that was incredibly refreshing. And of course, disclaimer, like I haven't actually watched


00:07:30.660 --> 00:07:35.520
all the videos yet. I don't even think that's like physically possible to do all of that


00:07:35.520 --> 00:07:36.520
since it was released.


00:07:36.520 --> 00:07:38.320
It's too new and it's too long. Yeah.


00:07:38.320 --> 00:07:42.360
Yeah, it's like is a lot of material. But yeah, I really like the work they're doing.


00:07:42.360 --> 00:07:45.560
And it's like, yeah, it's a very, very significant release. And it's off weight.


00:07:45.560 --> 00:07:48.440
Yeah, it's super cool. Yeah, it looks like it's free. Like I was able to go pull up the


00:07:48.440 --> 00:07:52.280
videos without even having an account there. It just sort of takes you through it more like an


00:07:52.280 --> 00:07:56.120
online video book you just make your way through, right? Yeah, and there are lots of like notebooks,


00:07:56.120 --> 00:08:01.240
so you can open the same notebooks, you can play through the examples, and of course also use their


00:08:01.240 --> 00:08:05.400
library to, you know, really work through the things efficiently. Sure, that's super cool.


00:08:05.400 --> 00:08:09.400
Does it cover any of the libraries that you all work on, like spaCy or anything?


00:08:09.400 --> 00:08:13.640
spaCy is a much more like high-level toolkit and framework, so it's like, you know, this is really


00:08:13.640 --> 00:08:19.320
the basics of the technology. So while the FastAR library, I think it does use spaCy for tokenization,


00:08:19.320 --> 00:08:22.920
but spaCy is really, you know, once you're building applications and you have some problems


00:08:22.920 --> 00:08:27.240
and you want to construct your pipelines and really ship something into production, that's


00:08:27.240 --> 00:08:32.200
when you would be using spaCy. But actually, in fact, spaCy is not really the best solution


00:08:32.200 --> 00:08:36.120
if you really want to learn the underlying algorithms and implementations, because we're


00:08:36.120 --> 00:08:40.360
actually super opinionated. You get one implementation and, you know, you kind of


00:08:40.360 --> 00:08:41.720
take that or you plug in your own.


00:08:41.720 --> 00:08:45.080
I see. This is like learning the algorithms and the foundations that maybe spaCy uses,


00:08:45.080 --> 00:08:46.040
so you understand it better.


00:08:46.040 --> 00:08:50.200
Yeah, exactly. And also, you know, giving you some, yeah, the background and yeah, even,


00:08:50.200 --> 00:08:55.160
even the rule-based ideas, which, yeah, I still think it's so great. I scroll through it. I'm


00:08:55.160 --> 00:08:59.320
like, great, regular expressions. That's like really what people should think about.


00:08:59.320 --> 00:09:02.120
Yeah, I mean, that's a start, right? Like sometimes you just want to pull data out of


00:09:02.120 --> 00:09:03.240
text and there you go.


00:09:03.240 --> 00:09:06.840
Yeah. And especially then some people really, you know, then they start throwing like a neural


00:09:06.840 --> 00:09:11.320
network model at it when actually best solution would have been to just write one regular


00:09:11.320 --> 00:09:15.320
expression. Like, I don't know, you work at a company, you have a statistical model that


00:09:15.320 --> 00:09:19.960
recognizes organization names, and then your manager comes to you and is like, "Well, it's


00:09:19.960 --> 00:09:24.680
all great, but it often gets our own company name wrong. Can you fix that? That's really embarrassing."


00:09:24.680 --> 00:09:29.880
And you can spend hours trying to tune your model and update it and fine-tune it


00:09:29.880 --> 00:09:35.480
with more examples, or you can just add one regular expression or one rule on top that says, "Okay,


00:09:35.480 --> 00:09:38.280
whenever I come across this string, don't get it wrong.


00:09:38.280 --> 00:09:40.360
And that will likely take you like five minutes,


00:09:40.360 --> 00:09:42.520
and it's much more effective in the real world.


00:09:42.520 --> 00:09:46.200
So this is the practical, applied natural language processing, right?


00:09:46.200 --> 00:09:46.520
Yeah.


00:09:46.520 --> 00:09:49.480
Speaking of language, this next item that I want to talk about,


00:09:49.480 --> 00:09:51.160
it just scares me.


00:09:51.160 --> 00:09:52.360
So let me tell you quick about it.


00:09:52.360 --> 00:09:54.440
I'll get your two opinions.


00:09:54.440 --> 00:09:58.920
The idea is that we can clone the human voice by giving it a sample


00:09:58.920 --> 00:10:02.840
using some sort of neural network type thing.


00:10:02.840 --> 00:10:03.960
I'm not sure exactly.


00:10:03.960 --> 00:10:05.900
So this was sent in by Brendan.


00:10:05.900 --> 00:10:06.880
Thank you for sending that over.


00:10:06.880 --> 00:10:09.180
And you know, in just a couple of minutes,


00:10:09.180 --> 00:10:10.940
you can load up somebody's voice,


00:10:10.940 --> 00:10:14.760
use some Python, a pre-trained machine learning model,


00:10:14.760 --> 00:10:16.760
and then type in text,


00:10:16.760 --> 00:10:19.260
and it will speak whatever that text is


00:10:19.260 --> 00:10:21.620
in the voice of that person.


00:10:21.620 --> 00:10:23.700
And this is just, I don't know,


00:10:23.700 --> 00:10:26.660
I feel like public discourse is in serious jeopardy here.


00:10:26.660 --> 00:10:27.500
What do you all think?


00:10:27.500 --> 00:10:28.780
- This is pretty interesting.


00:10:28.780 --> 00:10:32.260
And I was a little frightened actually watching this video


00:10:32.260 --> 00:10:36.740
how easy it was to copy somebody's voice. I mean, I don't know the code behind it's


00:10:36.740 --> 00:10:41.860
probably not easy, but it's a little creepy. My first thought was I could use it for if


00:10:41.860 --> 00:10:46.860
I have solo episodes, I could be my own co-host. But that'd be cool.


00:10:46.860 --> 00:10:47.860
That'd be pretty funny.


00:10:47.860 --> 00:10:51.780
Yeah. I mean, I think I would say, I think it's still quite compute intensive, like to


00:10:51.780 --> 00:10:55.100
do that, right? I think you still, you know, if you really want to have good results and


00:10:55.100 --> 00:10:58.220
really want to do it right. But it's true that this, you know, this really, this is


00:10:58.220 --> 00:11:03.100
really good example of, wow, that's possible and that's the type of stuff that's been possible for


00:11:03.100 --> 00:11:10.380
quite a while, especially across video, image, and also voice, audio. Right. I mean, we've heard


00:11:10.380 --> 00:11:14.700
of the deepfake stuff for videos and whatnot, and that's kind of scary. But this is, it's almost


00:11:14.700 --> 00:11:18.860
like, this can be worse, right? I can imagine somebody just putting a little static, a little


00:11:18.860 --> 00:11:25.420
muffling filter on it and saying, "Oh, here's a hot mic take behind the scenes. Somebody said


00:11:25.420 --> 00:11:29.740
something they weren't supposed to during a presidential debate or some kind of public


00:11:29.740 --> 00:11:34.460
figure they're trying to discredit and just make them say stuff. Now, I don't know what you all


00:11:34.460 --> 00:11:39.500
think. To me, it still sounds a little bit off. Like, it doesn't sound exactly like the person,


00:11:39.500 --> 00:11:44.380
but, you know, it's pretty close. But I think you could still use it. Yeah. And also, I mean,


00:11:44.380 --> 00:11:48.860
I do think this type of technology will definitely lead to a situation where we will all just take


00:11:48.860 --> 00:11:54.140
things we hear in like recordings or videos much less seriously. Like, you know, we, I do think it


00:11:54.140 --> 00:11:57.980
will develop into a culture where we don't necessarily trust an audio recording because,


00:11:57.980 --> 00:12:01.420
you know, it could have been produced by something like this. But I do think just for


00:12:01.420 --> 00:12:05.260
very everyday life scam, like I think it's very timely because, yeah, there were all these news


00:12:05.260 --> 00:12:12.300
articles about all these like financial scams and companies using deepfake audio, or even before,


00:12:12.300 --> 00:12:16.540
like using spoofed emails that were quite effective. And actually reading that, like,


00:12:16.540 --> 00:12:19.740
you know, the trick there, I'm like, I can totally see how like an accounting department


00:12:20.300 --> 00:12:24.380
falls for that and thinks, oh, it's their boss in a hurry. And then imagine that with a voice


00:12:24.380 --> 00:12:26.780
of like, you know, CEO.


00:12:26.780 --> 00:12:30.620
Yeah, it's so scary. Exactly. Yeah. So I'm going to link to the video, you all can watch it. I'm


00:12:30.620 --> 00:12:35.500
also linking to the software that did this. Apparently, it uses something called transfer


00:12:35.500 --> 00:12:41.740
learning from speaker verification to multi speaker text to speech synthesis. And that even


00:12:41.740 --> 00:12:48.140
has an acronym SV2TTS, of course. And so this was based on someone's thesis. And you can watch the


00:12:48.140 --> 00:12:54.280
the video and get a good sense. But yeah, you just imagine like, I call I somehow get


00:12:54.280 --> 00:12:58.560
the number of the CEO and I call them up and I record that call. And then I take their


00:12:58.560 --> 00:13:02.640
I don't need only five seconds or so with their voice. And then I take that and I use


00:13:02.640 --> 00:13:06.120
some text to like real time generator, I'll call up the accounting department and say,


00:13:06.120 --> 00:13:10.720
hey, this is so and so we got a super emergency. We really important client, we forgot to pay


00:13:10.720 --> 00:13:17.660
them. We owe them $10,000. And you just like type and then replay what you type live back


00:13:17.660 --> 00:13:23.380
And then you overlay that with some background music, background noise, and just like, "Oh,


00:13:23.380 --> 00:13:25.740
I'm in a taxi right now.


00:13:25.740 --> 00:13:28.060
Please get this done ASAP, otherwise we're in trouble.


00:13:28.060 --> 00:13:29.060
Bye."


00:13:29.060 --> 00:13:30.140
Sometimes, but usually it doesn't work for email.


00:13:30.140 --> 00:13:34.260
But if it's literally a voice that's interacting with you that sounds like the boss, well,


00:13:34.260 --> 00:13:35.260
it might work.


00:13:35.260 --> 00:13:37.140
Hopefully we didn't give anyone ideas.


00:13:37.140 --> 00:13:38.940
I guess you guys are better criminals than me.


00:13:38.940 --> 00:13:42.860
I was just thinking a different version of Ferris Bueller's Day Off.


00:13:42.860 --> 00:13:45.860
You could just use this to call in and excuse yourself from school.


00:13:45.860 --> 00:13:47.620
Oh my gosh, you're right.


00:13:47.620 --> 00:13:50.920
This would be beautiful when I was in middle school or high school.


00:13:50.920 --> 00:13:52.580
Oh my goodness, yeah.


00:13:52.580 --> 00:13:54.180
No, Michael's not feeling well.


00:13:54.180 --> 00:13:54.920
Is he going to be okay?


00:13:54.920 --> 00:13:57.420
He may be out tomorrow, but he'll be back pretty soon.


00:13:57.420 --> 00:13:58.980
[laughter]


00:13:58.980 --> 00:14:00.280
All right then.


00:14:00.280 --> 00:14:01.280
Yeah, that's really horrible.


00:14:01.280 --> 00:14:04.580
Maybe soon you'll have kids recording their parents' voices.


00:14:04.580 --> 00:14:05.220
Yes.


00:14:05.220 --> 00:14:07.280
I don't know which is worse, but these are all bad.


00:14:07.280 --> 00:14:10.120
This is a good example of why, yes, a focus on ethics,


00:14:10.120 --> 00:14:12.620
when you're learning these technologies, is incredibly important,


00:14:12.620 --> 00:14:16.120
because we have that technology, and every developer should think about,


00:14:16.120 --> 00:14:19.120
"Okay, what's the impact of having this and using this?"


00:14:19.120 --> 00:14:21.960
And, "Okay, we can release it to really also, you know,


00:14:21.960 --> 00:14:24.160
make everyone aware that this exists."


00:14:24.160 --> 00:14:26.320
And, you know, we're talking about this right now, but still.


00:14:26.320 --> 00:14:28.560
Yeah, I guess final thought on this one, Ines.


00:14:28.560 --> 00:14:32.560
What do you think the chances of some sort of fingerprinting


00:14:32.560 --> 00:14:37.160
or like system that can determine that this was faked, right?


00:14:37.160 --> 00:14:40.520
Like, not a human, but if I could take this and feed it to, say,


00:14:40.520 --> 00:14:45.020
another ML model that knows, like, the little glitches that show up in the system,


00:14:45.020 --> 00:14:48.560
Like, will we be able to verify stuff or not in the future?


00:14:48.560 --> 00:14:49.820
-Or are we just lost? -I think so.


00:14:49.820 --> 00:14:52.100
I think there have been some experiments where they tried that.


00:14:52.100 --> 00:14:56.800
And another approach would be, okay, you can always encode things in the model


00:14:56.800 --> 00:14:59.800
that only show up under very, very certain circumstances.


00:14:59.800 --> 00:15:01.760
So that's how you can watermark that model.


00:15:01.760 --> 00:15:06.400
You can release that, and then if you say a very, very, very specific sequence,


00:15:06.400 --> 00:15:09.000
or if you type a nonsense sequence in there,


00:15:09.000 --> 00:15:12.920
it will always produce something nonsense but very differently.


00:15:13.000 --> 00:15:15.320
And then you're like, ah, that's the system that was used.


00:15:15.320 --> 00:15:19.160
And you know, that's how we can, it won't work on the output, but like, at least,


00:15:19.160 --> 00:15:23.440
you know, we can at least have some way of kind of finding out what type of system.


00:15:23.440 --> 00:15:23.760
Yeah.


00:15:23.760 --> 00:15:25.280
That's part of the ethics part, right?


00:15:25.280 --> 00:15:28.640
Like that you, you embed these little watermarks rather than just like.


00:15:28.640 --> 00:15:29.440
Put it out there.


00:15:29.440 --> 00:15:29.960
I don't know.


00:15:29.960 --> 00:15:33.480
It's, it's pretty scary to me, but I think as a society we'll come around


00:15:33.480 --> 00:15:35.120
to figure out what to do about it.


00:15:35.120 --> 00:15:35.320
Yeah.


00:15:35.320 --> 00:15:35.600
Cool.


00:15:35.600 --> 00:15:37.600
Well, not scary is DigitalOcean.


00:15:37.600 --> 00:15:40.400
I just want to tell you quickly about them and they're supporting the show.


00:15:40.400 --> 00:15:45.120
So thanks to DigitalOcean, all of our software runs on top of DigitalOcean infrastructure.


00:15:45.120 --> 00:15:49.760
You get the MP3s, it delivers either streams or downloads out of there, things like that.


00:15:49.760 --> 00:15:50.960
So they're really, really great.


00:15:50.960 --> 00:15:54.960
You can get started for as little as $5 per month for a server.


00:15:54.960 --> 00:15:59.040
And they got a bunch of cool services, managed databases, load balancers and whatnot.


00:15:59.040 --> 00:16:03.440
And it's not like EC2, which is so complicated, it could run Netflix.


00:16:03.440 --> 00:16:06.880
It's like the simple thing that you just need to build your app and get it going.


00:16:06.880 --> 00:16:10.480
So check them out at pythonbytes.fm/digitalocean.


00:16:10.480 --> 00:16:12.680
And you get a $50 credit for new users there.


00:16:12.680 --> 00:16:14.380
And definitely highly recommended.


00:16:14.380 --> 00:16:16.880
Brian, what's this next one that you're working on here?


00:16:16.880 --> 00:16:21.280
Okay, well, another contributed by a listener, this one from Andrew.


00:16:21.280 --> 00:16:26.380
He contributed a little snippet that was on a Reddit stream.


00:16:26.380 --> 00:16:32.880
And it was, I'm going to just guess, just describe it as abusing the pyproject.toml file


00:16:32.880 --> 00:16:35.480
by putting any file stuff in it.


00:16:35.480 --> 00:16:43.000
So the example that he gave was you can have the PyTest.ini file and the mypy.ini file or two


00:16:43.000 --> 00:16:46.760
any files for tools and you can, they're in any file format and


00:16:46.760 --> 00:16:53.240
TOML files kind of look like any files but they're not, they're different and you can break


00:16:53.240 --> 00:17:00.520
any with TOML syntax and you can break TOML with any syntax. However, you can write them such that


00:17:00.520 --> 00:17:04.760
they are, if you're careful, you can write them such that they comply with both.


00:17:04.760 --> 00:17:07.020
And I went ahead and tried this out.


00:17:07.020 --> 00:17:13.520
I was able to try putting PyTest any like options within the toml file.


00:17:13.520 --> 00:17:19.420
And, you know, both PyTest and mypy do not support doing this, but they do support passing


00:17:19.420 --> 00:17:22.520
in a path of where their config file is.


00:17:22.520 --> 00:17:27.300
And if you pass in the project.toml file, you can get it to work.


00:17:27.300 --> 00:17:31.940
And if all you're trying to do is reduce the number of files in your project, yeah, this


00:17:31.940 --> 00:17:32.940
kind of works.


00:17:32.940 --> 00:17:34.140
Why would you want to do that?


00:17:34.140 --> 00:17:37.700
Just to try to reduce the number of files in your top level directory.


00:17:37.700 --> 00:17:38.700
Okay.


00:17:38.700 --> 00:17:41.420
I don't know, I should like use all of these like files more.


00:17:41.420 --> 00:17:45.180
And I feel like you know, I love this idea of imagine if there was one config file, like


00:17:45.180 --> 00:17:47.900
really, you know, only one place where you put everything.


00:17:47.900 --> 00:17:52.380
Also your dependencies, everything just goes in one file, and then you have that.


00:17:52.380 --> 00:17:55.580
But for some reason, it's never actually worked out that way in practice,


00:17:55.580 --> 00:18:00.400
you can put it in the setup.cfg. That's a possibility. But they're both those are any


00:18:00.400 --> 00:18:01.600
file syntax also


00:18:01.600 --> 00:18:06.320
I have to admit like our product, our products don't even have a setup.cfg. We have a setup.py


00:18:06.320 --> 00:18:07.880
and then we have a requirements.txt.


00:18:07.880 --> 00:18:12.840
Okay, I have a admission as well. Like I know we're talking about pyproject.toml, but I'm


00:18:12.840 --> 00:18:16.920
still just using requirements.txt as well for some of my projects. Because you know


00:18:16.920 --> 00:18:22.300
what the workflow works, I've got like external systems like pyup that are out there like


00:18:22.300 --> 00:18:26.560
automatically doing PRs for changes. I mean, it's just like, it's super cool. But at the


00:18:26.560 --> 00:18:29.980
same time, I already got a flow working. And I just, you know,


00:18:29.980 --> 00:18:35.420
Yeah, no, I can relate. And I use a ones, I think contributed a PI project Tomo to to


00:18:35.420 --> 00:18:39.980
spacey. And we were, you know, I really appreciated that, because I'm like, great. But it's still


00:18:39.980 --> 00:18:45.940
I don't think we can't really ditch requirements txt yet. And so now, we also have that. And


00:18:45.940 --> 00:18:50.700
now if we update, like a dependency, I have to manually edit that in three places.


00:18:50.700 --> 00:18:53.900
Yeah, yeah, yeah. That's how it goes.


00:18:53.900 --> 00:19:00.820
I'm on the bandwagon. I'm using Flit now, so I'm using pyproject.toml and Flit.


00:19:00.820 --> 00:19:04.220
Okay, and that works cross-platform, cross-Python?


00:19:04.220 --> 00:19:06.620
I don't know. It works for me.


00:19:06.620 --> 00:19:08.500
Well, that's always good. Yeah.


00:19:08.500 --> 00:19:12.820
I'm using it for mostly 3.6 and above, 3.6, 3.7, 3.8.


00:19:12.820 --> 00:19:17.180
My personal projects, I think it's sufficient, and the ones I'm supporting for other people,


00:19:17.180 --> 00:19:21.980
I think it's fine for an individual project owner to say, I'm not supporting 2.7.


00:19:21.980 --> 00:19:29.860
No, of course, I would never, you know, and I also would never go and just like whine about like, oh, there's, of course, there's like an edge case for 2.7 on Windows.


00:19:29.860 --> 00:19:36.580
And there's something there, like, I understand it's not like as easy if like, you know, there was like the Python that could just like magically fix everything.


00:19:36.580 --> 00:19:36.860
Yeah.


00:19:36.860 --> 00:19:41.740
You know, I appreciate there's a lot of work that went into all of this. And it's like, yeah, something's a bit tricky.


00:19:41.740 --> 00:19:45.060
One of the interesting things was coverage.py.


00:19:45.060 --> 00:19:46.020
I use that a lot.


00:19:46.020 --> 00:19:52.460
And it got-- there was a request to put pyproject.toml support on coverage.


00:19:52.460 --> 00:19:56.460
The reason why it isn't there isn't because of any sort of like-- not


00:19:56.460 --> 00:20:00.660
that it would be cool, but the toml parsing is not part of the standard


00:20:00.660 --> 00:20:02.100
library.


00:20:02.100 --> 00:20:06.860
And coverage has the strict policy that the only dependencies that it has


00:20:06.860 --> 00:20:09.220
are standard library dependencies.


00:20:09.220 --> 00:20:11.340
That's a reasonable desire also.


00:20:11.340 --> 00:20:15.500
Well, yeah, that's cool. You just get a cover shop, PY and just run the file or whatever, right?


00:20:15.500 --> 00:20:20.000
Yeah, maybe we should get Toml support added to the standard library, and then it wouldn't be an issue.


00:20:20.000 --> 00:20:26.360
There you go. Yeah, that's a whole different discussion. I know that's quite a heated debate about what should be on the standard library these days.


00:20:26.360 --> 00:20:29.900
And the trend is less, not more, I think, if you take the poll.


00:20:29.900 --> 00:20:31.900
Yeah.


00:20:31.900 --> 00:20:39.300
Yeah, so some of the tools that you build are absolutely about making machine learning easier and do that across teams.


00:20:39.300 --> 00:20:41.500
So I know that you really turned on to that space


00:20:41.500 --> 00:20:42.380
and pay a lot of attention.


00:20:42.380 --> 00:20:45.620
So this polyaxone one that you found for our next item


00:20:45.620 --> 00:20:46.900
must be pretty interesting.


00:20:46.900 --> 00:20:48.620
- Yeah, so basically it's actually quite funny


00:20:48.620 --> 00:20:50.700
because I obviously thought about


00:20:50.700 --> 00:20:51.900
what I was gonna talk about


00:20:51.900 --> 00:20:53.500
and had something else planned.


00:20:53.500 --> 00:20:55.780
And then really earlier today,


00:20:55.780 --> 00:20:58.620
that release came out version 0.5 of polyaxone.


00:20:58.620 --> 00:21:00.780
So I was like, okay, great, this is perfect.


00:21:00.780 --> 00:21:05.780
It's like as if they'd waited for my podcast recordings.


00:21:05.780 --> 00:21:08.580
Yeah, so basically we've been using polyaxone internally


00:21:08.580 --> 00:21:11.660
And essentially, it's a tool for experiment management.


00:21:11.660 --> 00:21:13.180
So, you know, if you work in machine learning


00:21:13.180 --> 00:21:14.380
and you train your models,


00:21:14.380 --> 00:21:16.620
you have to like run tons of experiments


00:21:16.620 --> 00:21:18.340
and you have to, you know, you run an experiment,


00:21:18.340 --> 00:21:21.500
train a model, look at the results, then you stop it.


00:21:21.500 --> 00:21:24.500
Then you tweak some other knobs, then you try again.


00:21:24.500 --> 00:21:26.620
And you keep doing that until you have a good result.


00:21:26.620 --> 00:21:28.780
And one thing we always do when we travel


00:21:28.780 --> 00:21:31.500
and like visit universities and research labs,


00:21:31.500 --> 00:21:32.780
we usually always ask them like,


00:21:32.780 --> 00:21:35.380
"Hey, how do you run your experiments?"


00:21:35.380 --> 00:21:36.760
And usually they're like,


00:21:36.760 --> 00:21:39.800
"Well, yeah, we got this GPU and it sits on my desk,


00:21:39.800 --> 00:21:41.760
and then I start an experiment,


00:21:41.760 --> 00:21:43.520
and then I sit around, and then I wait."


00:21:43.520 --> 00:21:46.760
And that's at some of the top labs


00:21:46.760 --> 00:21:48.560
and people where you'd think,


00:21:48.560 --> 00:21:51.100
"Oh, they must have everything taken care of, tons of money."


00:21:51.100 --> 00:21:54.220
It's like, "No, they're sitting there with their little GPU on their desk."


00:21:54.220 --> 00:21:56.100
And that's how it's done.


00:21:56.100 --> 00:21:59.720
And basically, Polyaxon basically helps you solve this.


00:21:59.720 --> 00:22:01.800
So it's built on Kubernetes.


00:22:01.800 --> 00:22:03.300
It's very easy to set up,


00:22:03.300 --> 00:22:06.600
and especially if you're already set up with cloud computing,


00:22:06.600 --> 00:22:09.760
And you can also do stuff like hyperparameter search,


00:22:09.760 --> 00:22:12.200
where every hyperparameter is a tiny knob


00:22:12.200 --> 00:22:13.480
and you have tons of them,


00:22:13.480 --> 00:22:15.840
and then you want to find the one combination


00:22:15.840 --> 00:22:17.920
that gives you better accuracy.


00:22:17.920 --> 00:22:20.040
And so you can run lots of experiments,


00:22:20.040 --> 00:22:23.160
see them in their little graphs and try things out.


00:22:23.160 --> 00:22:25.080
So it's been a very great tool.


00:22:25.080 --> 00:22:28.080
It's all open source, which is very much in our spirit.


00:22:28.080 --> 00:22:32.240
And yeah, they just released 0.5,


00:22:32.240 --> 00:22:35.200
which comes with a plugin system, which is also great.


00:22:35.200 --> 00:22:36.700
is very much in our spirit.


00:22:36.700 --> 00:22:39.800
That's also how we like to do things with spaCy.


00:22:39.800 --> 00:22:43.180
You can run it locally and it comes with some new features


00:22:43.180 --> 00:22:44.440
for chaining stuff together


00:22:44.440 --> 00:22:46.760
if your experiments have lots of steps.


00:22:46.760 --> 00:22:49.440
So yeah, it's a great tool if you're working in the field.


00:22:49.440 --> 00:22:50.280
- It looks super cool.


00:22:50.280 --> 00:22:51.240
- Yeah, I can definitely recommend it.


00:22:51.240 --> 00:22:53.320
- Yeah, so it's got a platform as a service offering,


00:22:53.320 --> 00:22:55.600
so you just kick it off and have it go,


00:22:55.600 --> 00:22:59.560
but also like on-premise enterprise option too, yeah?


00:22:59.560 --> 00:23:00.400
That's cool.


00:23:00.400 --> 00:23:01.220
- I think that's the focus.


00:23:01.220 --> 00:23:03.360
It's like, you run it and then it gives you a little UI


00:23:03.360 --> 00:23:06.760
and you set it up yourself on your servers,


00:23:06.760 --> 00:23:08.400
and then it manages that.


00:23:08.400 --> 00:23:09.400
Yeah, this looks really great.


00:23:09.400 --> 00:23:13.200
Runs on Google's Kubernetes engine, among other things.


00:23:13.200 --> 00:23:16.120
Probably on pretty much any Kubernetes cluster,


00:23:16.120 --> 00:23:16.960
I guess.


00:23:16.960 --> 00:23:17.800
I haven't tried it.


00:23:17.800 --> 00:23:20.080
Yeah, I think you might have to do a bit more set up


00:23:20.080 --> 00:23:22.080
if you're bringing your own,


00:23:22.080 --> 00:23:24.200
but it should be quite very straightforward.


00:23:24.200 --> 00:23:27.360
Google actually makes this quite straightforward.


00:23:27.360 --> 00:23:28.200
Yeah.


00:23:28.200 --> 00:23:30.360
And another nice thing here is with a hyperparameter search,


00:23:30.360 --> 00:23:35.520
Like if you, yeah, most machine learning stuff is done on GPU, but not everyone has GPUs.


00:23:35.520 --> 00:23:36.960
They're very expensive.


00:23:36.960 --> 00:23:41.180
And we actually say it's not always the best choice necessarily, because if you just want


00:23:41.180 --> 00:23:43.720
to run lots of experiments, you can run them all in parallel.


00:23:43.720 --> 00:23:46.840
You can run like thousands in parallel.


00:23:46.840 --> 00:23:51.040
And then, you know, if you have a tool like Polyaxon that can help you do that, so you


00:23:51.040 --> 00:23:52.720
know, you don't have to kick them all off manually.


00:23:52.720 --> 00:23:56.640
It's actually going to be much cheaper and much more efficient.


00:23:56.640 --> 00:23:58.760
And you don't need a fancy GPU.


00:23:58.760 --> 00:23:59.760
You can just run it on CPU.


00:23:59.760 --> 00:24:04.320
Right. Yeah, the GPS are great, but they're much harder to come by. So that's cool. Yeah. Yeah.


00:24:04.320 --> 00:24:07.440
It also has something about you can run on your laptop as well. Yeah,


00:24:07.440 --> 00:24:10.160
little data science is a box thing they talked about there at the end. So


00:24:10.160 --> 00:24:15.040
yeah, super cool. A nice one. All right, this last one I want to talk about here.


00:24:15.040 --> 00:24:21.280
Actually, the way I got it onto my system is I use pipx. It's my pipx installed this thing called


00:24:21.280 --> 00:24:27.440
flint. So we've heard about linting. And we've heard about f strings. And I'm guessing some


00:24:27.440 --> 00:24:32.720
combination thereof is where the name of this thing called flint came from. It's quite new,


00:24:32.720 --> 00:24:38.560
it's not super popular yet, but it works really, really well. So the idea is I've got some code,


00:24:38.560 --> 00:24:44.160
maybe it's old code, maybe I just haven't bothered to write everything using f strings,


00:24:44.160 --> 00:24:49.920
and I would like to modernize it in its string processing. So this tool, what you can do is you


00:24:49.920 --> 00:24:54.560
can point it at a single Python file, or you can just point it as a directory, like a top level


00:24:54.560 --> 00:24:58.800
It'll just go to every, traverse the whole directory tree


00:24:58.800 --> 00:25:00.100
and find all the Python files


00:25:00.100 --> 00:25:05.000
and then rewrite all the string operations to be fstrings.


00:25:05.000 --> 00:25:05.840
- Nice.


00:25:05.840 --> 00:25:07.020
- And it does a pretty good job.


00:25:07.020 --> 00:25:10.580
It'll do the percent, you know, Python two style formats


00:25:10.580 --> 00:25:14.420
as well as the dot format style.


00:25:14.420 --> 00:25:16.740
And it'll just replace all those with fstrings.


00:25:16.740 --> 00:25:18.200
There's a couple of things it doesn't do.


00:25:18.200 --> 00:25:21.700
If it's like multi-line, really long stuff,


00:25:21.700 --> 00:25:23.580
it won't replace those.


00:25:23.580 --> 00:25:26.340
And when I first tried it, it actually was making a mistake


00:25:26.340 --> 00:25:28.860
on digit grouping format.


00:25:28.860 --> 00:25:31.940
So if you have curly braces, colon, comma,


00:25:31.940 --> 00:25:35.260
'cause you want thousands, millions, grouping, and so on,


00:25:35.260 --> 00:25:37.340
that just went insane and broke my code.


00:25:37.340 --> 00:25:41.060
But I submitted a bug over to the guy who's working on it,


00:25:41.060 --> 00:25:43.380
fixed it, I believe a new release is already out.


00:25:43.380 --> 00:25:45.340
So that shouldn't be there, but just, you know,


00:25:45.340 --> 00:25:47.600
run it on something you have under source control


00:25:47.600 --> 00:25:49.900
and just look at the lines that have changed


00:25:49.900 --> 00:25:52.780
before you do the commit or run your test,


00:25:52.780 --> 00:25:55.280
- Yeah, well, such a good open source user,


00:25:55.280 --> 00:25:58.720
like, you know, found a bug, you know,


00:25:58.720 --> 00:26:01.920
reported it probably with like a nice description, fixed.


00:26:01.920 --> 00:26:04.720
- I'm like, I ran this on all of Talk Python Training


00:26:04.720 --> 00:26:06.640
and all of Python Bytes and some of it broke.


00:26:06.640 --> 00:26:08.920
So what I found out is it's exactly this.


00:26:08.920 --> 00:26:10.560
If it has digit grouping, it broke.


00:26:10.560 --> 00:26:12.560
And so then they fixed it, but it was no big deal.


00:26:12.560 --> 00:26:17.560
I think I converted about 500 to 700 string formats


00:26:17.560 --> 00:26:18.800
over to fStrings.


00:26:18.800 --> 00:26:21.600
And it just, it's cleaner, shorter, nicer.


00:26:21.600 --> 00:26:23.360
The thing with F strings is I always,


00:26:23.360 --> 00:26:26.160
I don't know if you all use it, I'll ask you in a sec,


00:26:26.160 --> 00:26:28.620
but I'm always like, okay, I'm going to write the string.


00:26:28.620 --> 00:26:30.520
I'd say, quote, type, type, type.


00:26:30.520 --> 00:26:32.560
Oh, I want to put something in here.


00:26:32.560 --> 00:26:33.400
Curly brace.


00:26:33.400 --> 00:26:35.120
I wish I would have done the F.


00:26:35.120 --> 00:26:37.240
Back, back, back, back, back, back, back, put the F.


00:26:37.240 --> 00:26:38.440
And then back, back, back, back, back,


00:26:38.440 --> 00:26:39.280
and then type the thing.


00:26:39.280 --> 00:26:41.080
I'm like, well, that was more work than just dot format


00:26:41.080 --> 00:26:44.460
'cause the IDE will auto-complete as dot F and then boom.


00:26:44.460 --> 00:26:47.320
So a lot of times I end up using the format anyway,


00:26:47.320 --> 00:26:49.600
but I still prefer to have the F strings and read them.


00:26:49.600 --> 00:26:51.040
So this way I can write it however I want


00:26:51.040 --> 00:26:53.200
and then just hit it with this before I do a check-in.


00:26:53.200 --> 00:26:55.520
- I think that we should ask VS Code and PyCharm


00:26:55.520 --> 00:26:59.040
to detect when we put a curly brace in a string


00:26:59.040 --> 00:27:00.480
and automatically add the F.


00:27:00.480 --> 00:27:01.680
- Yes, just like a hotkey.


00:27:01.680 --> 00:27:03.720
- I was going to say the exact same thing,


00:27:03.720 --> 00:27:05.000
so it's not. (laughs)


00:27:05.000 --> 00:27:07.120
- That's awesome, you all are in the same boat.


00:27:07.120 --> 00:27:08.920
So yeah, this is really cool.


00:27:08.920 --> 00:27:11.200
I definitely think my code is nicer.


00:27:11.200 --> 00:27:12.600
I originally created,


00:27:12.600 --> 00:27:14.120
like when I created the Python Bytes website


00:27:14.120 --> 00:27:15.880
and I created the Top Python Training,


00:27:15.880 --> 00:27:20.360
this was when the latest version of Python on Ubuntu was 3.5,


00:27:20.360 --> 00:27:21.860
So we didn't have fstrings.


00:27:21.860 --> 00:27:24.520
And I actually took the server down once on accident,


00:27:24.520 --> 00:27:26.860
because I used an fstring in a little utility file


00:27:26.860 --> 00:27:29.900
that was in the same directory in the scanning path,


00:27:29.900 --> 00:27:32.660
looking for the routes, found that, couldn't parse it,


00:27:32.660 --> 00:27:33.920
and the website couldn't start.


00:27:33.920 --> 00:27:35.560
I'm like, "Why is it down? What have I done?


00:27:35.560 --> 00:27:37.000
I didn't even change it."


00:27:37.000 --> 00:27:40.520
So anyway, I'm really happy now that I can just take all that code


00:27:40.520 --> 00:27:42.220
that I used to leave in the format style


00:27:42.220 --> 00:27:45.960
and just flint, space, just run in this directory, boom, it's done.


00:27:45.960 --> 00:27:47.160
So yeah, it's really nice.


00:27:47.160 --> 00:27:50.100
I can't wait to just intuitively just use fstrings


00:27:50.160 --> 00:27:53.040
and all that stuff. It's still kind of, I don't know, just ingrained in my brain.


00:27:53.040 --> 00:27:57.680
Like even, I know I go to conferences and I see people use all the new syntax and I'm like, "Yeah,


00:27:57.680 --> 00:28:02.800
oh, that's so nice." But it's just like, you know, in my day-to-day work, you know,


00:28:02.800 --> 00:28:07.760
even if we don't support 2.7, we support 3.5 and they're just like a lot of these.


00:28:07.760 --> 00:28:11.840
Yeah, exactly. You know, there is this thing called, I can't remember what it was called,


00:28:11.840 --> 00:28:17.120
Brian, we covered it, where it lets you add fString support to Python 2. It may also work


00:28:17.120 --> 00:28:23.440
for Python 3.5. You can definitely retroactively add f-strings to the format. It's some weird


00:28:23.440 --> 00:28:24.440
way.


00:28:24.440 --> 00:28:26.440
But then you need like another runtime dependency, which...


00:28:26.440 --> 00:28:29.040
Yeah, yeah. It's not worth it. It does some weird thing.


00:28:29.040 --> 00:28:30.920
That's how it works. Yeah, that's a bit unattractive.


00:28:30.920 --> 00:28:36.200
It like rewrites like the file loader with a certain weird encode. It's like, it's pretty


00:28:36.200 --> 00:28:37.200
sketchy.


00:28:37.200 --> 00:28:39.160
Yeah. Okay. Now I wouldn't want to ship that in like our libraries.


00:28:39.160 --> 00:28:41.000
Oh, come on. Why not?


00:28:41.000 --> 00:28:44.000
Just run your tests, make sure they pass. It's good.


00:28:44.000 --> 00:28:45.000
Yeah, good.


00:28:45.000 --> 00:28:48.440
It's cool that something like this is out so that when you decide we're no longer supporting


00:28:48.440 --> 00:28:53.640
3.5, you just hit it with this and a quick scan through the files and it's f-stringified.


00:28:53.640 --> 00:28:59.320
That's going to be so nice. I can't wait. All that and all the type hints. Once we can


00:28:59.320 --> 00:29:06.360
drop all of the older versions, it can be so nice. I won't even mind rewriting all of


00:29:06.360 --> 00:29:09.520
Occult. I think with our team, we're just going to sit down and be like, "Yay, let's


00:29:09.520 --> 00:29:10.520
do this."


00:29:10.520 --> 00:29:11.520
We're going to do it. Yes, here it comes.


00:29:11.520 --> 00:29:14.240
It's going to be so satisfying, years later.


00:29:14.240 --> 00:29:16.400
- Yeah, well, it's the curse of success, right?


00:29:16.400 --> 00:29:18.360
You have so many people using your libraries


00:29:18.360 --> 00:29:20.880
that you just gotta keep it sort of a little bit backwards.


00:29:20.880 --> 00:29:21.960
- Yeah, sure, and like some people


00:29:21.960 --> 00:29:23.280
are still stuck on legacy code.


00:29:23.280 --> 00:29:24.640
Like, I mean, I'm not, it's not, you know,


00:29:24.640 --> 00:29:26.960
some people like look down on like companies


00:29:26.960 --> 00:29:28.360
that are still on like Python 2,


00:29:28.360 --> 00:29:31.040
but it's like, you know, it's not like many of them


00:29:31.040 --> 00:29:33.440
like really enjoy using all this legacy software


00:29:33.440 --> 00:29:35.280
and legacy like stuff.


00:29:35.280 --> 00:29:37.400
They're just like, it just exists


00:29:37.400 --> 00:29:40.400
and we might as well keep supporting it if we can.


00:29:40.400 --> 00:29:42.800
- Yeah, what's the Python 2 story for you all?


00:29:42.800 --> 00:29:44.300
you're still supporting it for now?


00:29:44.300 --> 00:29:45.900
- Yeah, and I think we will for a while.


00:29:45.900 --> 00:29:46.740
- After January?


00:29:46.740 --> 00:29:48.080
- Yeah, we probably will.


00:29:48.080 --> 00:29:49.740
There will just naturally be a point


00:29:49.740 --> 00:29:52.780
where we cannot upgrade any of our dependencies.


00:29:52.780 --> 00:29:54.260
Like, I don't know, NumPy, for example.


00:29:54.260 --> 00:29:55.700
Okay, if we ever, you know,


00:29:55.700 --> 00:29:58.820
it is a good reason why we want to use a newer version


00:29:58.820 --> 00:30:00.340
of that, we just can't.


00:30:00.340 --> 00:30:01.840
And if everyone else drops it,


00:30:01.840 --> 00:30:03.760
we just have to be like, okay, that's it.


00:30:03.760 --> 00:30:04.600
We can't.


00:30:04.600 --> 00:30:06.420
And it's also not like the old versions are going away.


00:30:06.420 --> 00:30:10.420
Like, if we make sure we don't have any major bugs,


00:30:10.420 --> 00:30:13.220
you can still use an old version of spacey and like,


00:30:13.220 --> 00:30:14.420
we're not going to take that away from you.


00:30:14.420 --> 00:30:16.460
- Right. Just pin the version and you'll be good.


00:30:16.460 --> 00:30:17.280
- Yeah.


00:30:17.280 --> 00:30:18.120
- Very cool. Very cool.


00:30:18.120 --> 00:30:20.340
All right. Well, that's it for all of our main items.


00:30:20.340 --> 00:30:21.180
Brian, you want to,


00:30:21.180 --> 00:30:22.380
I know we've got a few little extra things


00:30:22.380 --> 00:30:23.220
just thrown here at the end.


00:30:23.220 --> 00:30:24.040
Do you want to kick it off?


00:30:24.040 --> 00:30:26.580
- Yeah. So we had an email from Andre Janish.


00:30:26.580 --> 00:30:28.460
I think that's how you say his name.


00:30:28.460 --> 00:30:29.300
Saying that we were,


00:30:29.300 --> 00:30:32.540
in one of our episodes we talked about regular expressions


00:30:32.540 --> 00:30:34.060
taking down,


00:30:34.060 --> 00:30:34.980
now I even forgot,


00:30:34.980 --> 00:30:35.820
took down something.


00:30:35.820 --> 00:30:37.180
- It was something major. Yeah.


00:30:37.180 --> 00:30:38.020
I can't remember,


00:30:38.020 --> 00:30:40.580
- A major cloud provider went down because of it, yeah.


00:30:40.580 --> 00:30:41.920
- And how that could happen,


00:30:41.920 --> 00:30:43.760
so there's an interesting video


00:30:43.760 --> 00:30:47.120
talking about regular expression denial of service attacks


00:30:47.120 --> 00:30:48.540
and how it happens.


00:30:48.540 --> 00:30:50.020
It was just an interesting video.


00:30:50.020 --> 00:30:51.620
We'll have a link to it in the show notes


00:30:51.620 --> 00:30:52.780
if anybody wants to watch.


00:30:52.780 --> 00:30:54.500
- Okay, yeah, yeah, super cool.


00:30:54.500 --> 00:30:56.060
So I got a couple I wanna throw out there.


00:30:56.060 --> 00:30:58.540
One is if you're doing any work


00:30:58.540 --> 00:31:01.640
where you're working with microservices


00:31:01.640 --> 00:31:05.060
or you want to have some kind of application


00:31:05.060 --> 00:31:06.820
that's talking to some API endpoint,


00:31:06.820 --> 00:31:07.940
you want to debug it,


00:31:07.940 --> 00:31:11.380
There's a new thing called HTTP toolkit,


00:31:11.380 --> 00:31:14.540
and it has like special Python support.


00:31:14.540 --> 00:31:17.500
So this is like a proxy you can run on your computer


00:31:17.500 --> 00:31:19.000
and say start recording,


00:31:19.000 --> 00:31:20.880
and it'll start recording all the requests


00:31:20.880 --> 00:31:22.060
that you're making.


00:31:22.060 --> 00:31:25.940
So it integrates with urllib.request, urllib2,


00:31:25.940 --> 00:31:29.740
request, pip, Python 2 and 3, photo, all those things,


00:31:29.740 --> 00:31:33.460
and specifically catches traffic from those.


00:31:33.460 --> 00:31:36.380
And it does interesting stuff by like changing


00:31:36.380 --> 00:31:39.280
the Python path and environment variables.


00:31:39.280 --> 00:31:42.300
And then all of these libraries that I talked about


00:31:42.300 --> 00:31:44.900
apparently respect certain proxy settings


00:31:44.900 --> 00:31:45.780
and things you can set.


00:31:45.780 --> 00:31:47.620
So you don't have to change your app at all.


00:31:47.620 --> 00:31:50.300
You just start a terminal with HTTP toolkit


00:31:50.300 --> 00:31:52.340
and then run your code and it can record it.


00:31:52.340 --> 00:31:53.180
- That's cool.


00:31:53.180 --> 00:31:55.940
- Yeah, so if you're like, why is this crashing?


00:31:55.940 --> 00:31:57.980
You know, I run my request thing


00:31:57.980 --> 00:32:00.060
and then I get some kind of crash


00:32:00.060 --> 00:32:03.380
and how am I supposed, you don't have the developer tools


00:32:03.380 --> 00:32:06.000
in your web browser to look at the headers and whatnot.


00:32:06.000 --> 00:32:08.400
So you can do it with this, it's pretty cool.


00:32:08.400 --> 00:32:10.500
It's free, but there's also a paid version, just a heads up.


00:32:10.500 --> 00:32:13.380
Also, there's a nice little link.


00:32:13.380 --> 00:32:14.920
Last time, time before, Brian,


00:32:14.920 --> 00:32:17.480
we were talking about magic, Python magic.


00:32:17.480 --> 00:32:20.400
You're like, well, that's a pretty strong,


00:32:20.400 --> 00:32:22.160
strong name to be magic.


00:32:22.160 --> 00:32:24.640
And all it does is detect file types.


00:32:24.640 --> 00:32:26.240
Right, you remember that thing?


00:32:26.240 --> 00:32:29.320
David Martinez said, well, the reason it's called magic


00:32:29.320 --> 00:32:34.320
is there's basically these magic number signatures


00:32:34.480 --> 00:32:36.380
that appear at the beginning of files,


00:32:36.380 --> 00:32:39.180
and that teaches you about the syntax.


00:32:39.180 --> 00:32:41.280
So, for example, if you had a SQLite file,


00:32:41.280 --> 00:32:44.440
it would start with 53, 51, 4C, 69, etc.


00:32:44.440 --> 00:32:47.440
If you see those numbers up the front, that means SQLite, right?


00:32:47.440 --> 00:32:49.440
So, do you actually know this by heart?


00:32:49.440 --> 00:32:51.320
Or did you write this down?


00:32:51.320 --> 00:32:54.140
No, no. I opened it up.


00:32:54.140 --> 00:32:55.780
Of course, yeah, I know that one, sure.


00:32:55.780 --> 00:32:57.540
No, I just unfolded it up.


00:32:57.540 --> 00:32:58.880
Let's see.


00:32:58.880 --> 00:33:01.480
Really quickly, Python 3.7.4 is out.


00:33:01.540 --> 00:33:05.540
So I brew and upgraded my Python 3.7,


00:33:05.540 --> 00:33:06.780
which is how I'm getting on my machine.


00:33:06.780 --> 00:33:08.660
And it's already on homebrew as well.


00:33:08.660 --> 00:33:11.220
So that was like, I don't know, six, seven hours delay there.


00:33:11.220 --> 00:33:12.780
It was really nice to see that come out real quick.


00:33:12.780 --> 00:33:15.460
- Or if you have pyenv, you can do pyenv.


00:33:15.460 --> 00:33:16.500
I don't even know the command,


00:33:16.500 --> 00:33:18.900
but like install something and then--


00:33:18.900 --> 00:33:21.060
- Right away have it, that's awesome, yeah.


00:33:21.060 --> 00:33:21.900
And then the last one,


00:33:21.900 --> 00:33:24.580
I want to point out this thing called flying.


00:33:24.580 --> 00:33:26.420
I just call it flying fractals.


00:33:26.420 --> 00:33:28.860
But this person put together this project


00:33:28.860 --> 00:33:33.860
using pywonderland and it automates some other libraries


00:33:33.860 --> 00:33:36.380
that are based on C.


00:33:36.380 --> 00:33:38.820
So they made some really cool videos


00:33:38.820 --> 00:33:41.340
of like flying through three dimensional,


00:33:41.340 --> 00:33:45.340
like animated Mandelbrot sets and other kinds of stuff.


00:33:45.340 --> 00:33:46.740
And I just, when I was just watching,


00:33:46.740 --> 00:33:49.180
I thought just, wow, this is super cool


00:33:49.180 --> 00:33:51.340
computational stuff over here.


00:33:51.340 --> 00:33:53.420
I've done a bunch of work in like complex dynamics


00:33:53.420 --> 00:33:54.700
and like trying to visualize that


00:33:54.700 --> 00:33:56.400
and like this kind of blew me away.


00:33:56.400 --> 00:33:57.700
So if you care at all about that stuff,


00:33:57.700 --> 00:33:59.820
I think you'll just enjoy like a minute of that video.


00:33:59.820 --> 00:34:00.660
- Yeah, yeah.


00:34:00.660 --> 00:34:02.700
So yeah, actually you might've actually noticed


00:34:02.700 --> 00:34:06.660
that my voice still isn't like 100% and it's a bit rough.


00:34:06.660 --> 00:34:08.300
And that's because last weekend


00:34:08.300 --> 00:34:11.620
we had our very, very first conference here in Berlin


00:34:11.620 --> 00:34:14.580
called Spacey IRL, like, you know, Spacey in real life.


00:34:14.580 --> 00:34:16.500
So our community came together


00:34:16.500 --> 00:34:19.020
and I'm still like absolutely blown away.


00:34:19.020 --> 00:34:20.860
Like there was, you know, the vibe was amazing.


00:34:20.860 --> 00:34:24.220
We had like 200 people there and a lovely like old theater,


00:34:24.220 --> 00:34:27.020
12 really amazing talks by people from research,


00:34:27.020 --> 00:34:32.300
industry, community. So it was really a lot of fun and all talks were recorded and we're


00:34:32.300 --> 00:34:36.460
currently uploading them to our YouTube channel. So probably by the time this airs, they might


00:34:36.460 --> 00:34:40.260
have already been released and yeah, it'd be a bunch of, yeah, if you're interested


00:34:40.260 --> 00:34:44.580
in natural language processing, spacey, those, the talks are really, really great. And,


00:34:44.580 --> 00:34:46.340
yeah, I hope you, you enjoy watching them.


00:34:46.340 --> 00:34:50.460
And that's awesome. I'm so glad you're putting them on YouTube and wow, congratulations.


00:34:50.460 --> 00:34:55.100
You must be just blown away at how awesome it is to put on a conference about your own


00:34:55.100 --> 00:34:58.420
stuff, right? And so many people came and the energy and like you could tell your voice


00:34:58.420 --> 00:34:59.420
was gone. It's great.


00:34:59.420 --> 00:35:03.300
I know that was like, yeah. And it was also it's actually quite refreshing to organize


00:35:03.300 --> 00:35:07.540
your own conference. Like, you know, we were like, okay, let's do all the things that we


00:35:07.540 --> 00:35:11.300
think a conference should do and like try them out. And it actually worked quite well.


00:35:11.300 --> 00:35:16.340
Like, you know, only one track, for example, stuff like that. No questions from the audience,


00:35:16.340 --> 00:35:21.260
much more social time, some really healthy food, stuff like that. So it was it was it


00:35:21.260 --> 00:35:25.640
It was great. My voice suffered a bit, but we're giving a lot back to the community,


00:35:25.640 --> 00:35:27.620
as in the videos, photos, stuff.


00:35:27.620 --> 00:35:30.420
Yeah, sounds great. Awesome. Congratulations.


00:35:30.420 --> 00:35:35.860
Couple of episodes ago, Brian actually talked about FastAPI, not to be confused with FastAI,


00:35:35.860 --> 00:35:41.460
which I talked about earlier. So yeah, it's a great, very modern, cool Python library


00:35:41.460 --> 00:35:45.940
for REST APIs. And we're like, yeah, we've been big fans. We've started switching all


00:35:45.940 --> 00:35:47.480
all our APIs over.


00:35:47.480 --> 00:35:50.380
The exciting news here is that their core developer,


00:35:50.380 --> 00:35:53.140
Sebastian Ramirez, is actually going to join our team here


00:35:53.140 --> 00:35:54.100
in Berlin.


00:35:54.100 --> 00:35:56.060
This means a lot of cool development for us.


00:35:56.060 --> 00:35:59.460
But also, we obviously, since we love the FastAPI project,


00:35:59.460 --> 00:36:01.180
we'll keep supporting that.


00:36:01.180 --> 00:36:02.980
And we'll definitely give him enough time


00:36:02.980 --> 00:36:03.860
to keep working on it.


00:36:03.860 --> 00:36:04.540
That's great news.


00:36:04.540 --> 00:36:05.700
We found him through the project.


00:36:05.700 --> 00:36:07.620
We saw, oh, he's doing some consulting work.


00:36:07.620 --> 00:36:09.820
We're like, hey, we'd love to work with him.


00:36:09.820 --> 00:36:11.140
And one thing came to another.


00:36:11.140 --> 00:36:13.500
And now, yeah, he'll be part of our Explosion team, which


00:36:13.500 --> 00:36:14.860
is still growing, by the way.


00:36:14.860 --> 00:36:19.500
So we've been very lucky that we were able to work with more people and expand our team.


00:36:19.500 --> 00:36:22.460
Yeah, that's so cool that your business is growing.


00:36:22.460 --> 00:36:29.020
And I guess it's worth pointing out that back on Talk Python, to me, we talked about explosion AI.


00:36:29.020 --> 00:36:31.100
I interviewed you about building a software business.


00:36:31.100 --> 00:36:32.780
So back on episode 202.


00:36:32.780 --> 00:36:36.300
So, you know, this is just like more evidence that that's all good advice.


00:36:36.300 --> 00:36:36.780
Thanks.


00:36:36.780 --> 00:36:38.060
Yeah, super cool.


00:36:38.060 --> 00:36:39.580
Well, great, great news.


00:36:39.580 --> 00:36:42.780
I guess it's probably time for a joke here too.


00:36:42.780 --> 00:36:44.540
A pie joke, if you will, maybe.


00:36:44.540 --> 00:36:46.800
So I think this, I'll do the first one.


00:36:46.800 --> 00:36:48.600
This one I think came from PyJokes.


00:36:48.600 --> 00:36:49.440
We'll see.


00:36:49.440 --> 00:36:50.840
We're starting to run that well dry,


00:36:50.840 --> 00:36:53.180
so I suggest people send in your jokes, please.


00:36:53.180 --> 00:36:55.260
But a programmer walks into the bar


00:36:55.260 --> 00:36:58.620
and orders 1.38 root beers.


00:36:58.620 --> 00:37:03.080
The bartender informs her that it's a root beer float.


00:37:03.080 --> 00:37:05.260
She says, "Nah, make it a double."


00:37:05.260 --> 00:37:06.740
All right, it's a pretty bad type system.


00:37:06.740 --> 00:37:08.240
Maybe it doesn't work so well in Python.


00:37:08.240 --> 00:37:09.520
Like we don't care so much about types,


00:37:09.520 --> 00:37:11.120
but you know, still, so it's all right.


00:37:11.120 --> 00:37:11.960
- I like it.


00:37:11.960 --> 00:37:12.800
- All right, we got one more up here.


00:37:12.800 --> 00:37:14.120
Who put this one in, Brian?


00:37:14.120 --> 00:37:19.200
Yeah, so just last night I was researching for this podcast, writing notes for the other


00:37:19.200 --> 00:37:24.880
podcast and working on an open source project and I came up with this.


00:37:24.880 --> 00:37:27.680
What do you call a developer without a side project?


00:37:27.680 --> 00:37:28.680
Well rested.


00:37:28.680 --> 00:37:29.680
Yeah, that's true.


00:37:29.680 --> 00:37:32.680
It's almost a bit sad in that sense.


00:37:32.680 --> 00:37:36.680
I know it's too real.


00:37:36.680 --> 00:37:39.680
I shouldn't be complaining.


00:37:39.680 --> 00:37:41.680
I shouldn't be complaining.


00:37:41.680 --> 00:37:46.600
But you know, there are some comments we could make here about the culture and what's expected


00:37:46.600 --> 00:37:49.520
of developers these days and how that's maybe not ideal.


00:37:49.520 --> 00:37:52.000
You know, sleeping enough, stuff like that.


00:37:52.000 --> 00:37:53.000
Oh, definitely.


00:37:53.000 --> 00:37:54.000
People should be.


00:37:54.000 --> 00:37:55.560
And it's mostly a self-reflection.


00:37:55.560 --> 00:37:57.880
No, I mean, it is a good joke.


00:37:57.880 --> 00:38:00.000
I wasn't criticizing your joke.


00:38:00.000 --> 00:38:01.000
It's a totally fine joke.


00:38:01.000 --> 00:38:02.480
I'm just saying it's very real.


00:38:02.480 --> 00:38:07.240
You know how jokes can be too real and then you're like, "Oh."


00:38:07.240 --> 00:38:09.240
Yeah, I'm really uncomfortable now.


00:38:09.240 --> 00:38:14.560
Exactly. All right. Well, I think that's a good place to leave it. Brian, thank you as


00:38:14.560 --> 00:38:15.560
always.


00:38:15.560 --> 00:38:16.560
Thank you.


00:38:16.560 --> 00:38:17.560
Denis, it was great to have you here. Thanks for coming.


00:38:17.560 --> 00:38:18.560
Yeah, thanks. Bye.


00:38:18.560 --> 00:38:19.560
Bye.


00:38:19.560 --> 00:38:22.560
Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's


00:38:22.560 --> 00:38:28.760
Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.FM. If you


00:38:28.760 --> 00:38:32.800
have a news item you want featured, just visit PythonBytes.FM and send it our way. We're


00:38:32.800 --> 00:38:37.520
always on the lookout for sharing something cool. On behalf of myself and Brian Auken,


00:38:37.520 --> 00:38:38.520
This is Michael Kennedy.


00:38:38.520 --> 00:38:41.840
Thank you for listening and sharing this podcast with your friends and colleagues.

