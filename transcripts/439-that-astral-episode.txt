00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 439, recorded July 6, 2025, and I am Brian Atkin.

00:00:11 And I am Michael Kennedy.

00:00:12 And this episode is sponsored by Sentry. Listen to their spot later in the show. Thanks, Sentry.

00:00:18 Also connect with us if you'd like to send us items or just say hey.

00:00:23 We are on Bluesky and Mastodon, and Michael's even on X still.

00:00:29 So the links to all of us are in the show notes and at pythonbytes.fm.

00:00:36 And also speaking of pythonbytes.fm, why don't you head on over there and sign up for the mailing list because we will send an email to you soon after, hopefully soon after, we release the episode and we send out all the links for everything we cover plus extra information and some background information.

00:00:57 It's really good.

00:00:59 We're pretty proud of the email.

00:01:00 So please sign up for that.

00:01:02 And if you'd like to watch us live or just watch the video post live, after live, whatever that is, the afterlife, no, later on, you can go to pythonbytes.fm/live and there's a link to our YouTube stuff.

00:01:19 So that'd be awesome.

00:01:20 So thanks.

00:01:21 Let's kick it off, Michael.

00:01:24 Let's do it.

00:01:24 All right, so I want to start by saying thank you.

00:01:27 ty, I don't know if it means thank you or not.

00:01:29 ty, the type checker, and also prefix this, Brian.

00:01:32 This is kind of going to be the astral show, just so people are aware.

00:01:38 Yeah.

00:01:38 There's a couple of topics that we're going to cover, and this first and second one comes to us from Skylar Casco.

00:01:45 So thank you, Skylar, for sending this in.

00:01:47 We always appreciate when people are like, hey, have you seen this?

00:01:50 Probably no.

00:01:51 Sometimes yes, but probably no.

00:01:53 All right, so I want to talk about ty from the Astral folks.

00:01:57 ty is very similar in what it brings to the table is what Ruff did.

00:02:03 So, you know, Astral, they make uv, Ruff, and now ty.

00:02:08 And Ruff didn't fundamentally change how we check our code, right?

00:02:13 We had black, which honestly kind of did, and a bunch of tools that that brought together.

00:02:18 But the real difference here was that rough makes linting almost instant.

00:02:23 And it's like, when you run ruff, you got to double check and make sure it's actually on the directory.

00:02:29 You're like, did that, you know, I just hit enter and it's done.

00:02:31 But there were 20,000 lines of code.

00:02:33 Like, how did this, did it actually do anything?

00:02:35 I'm not sure it did anything.

00:02:36 But in fact, it did.

00:02:37 And it's very similar with ty, but for type checking.

00:02:41 So we've had type checking, type checkers like mypy and so on.

00:02:44 But they've really struggled on super large code bases.

00:02:47 And being faster in general is also really nice, right?

00:02:50 So we've talked about ty before.

00:02:53 I've actually had Charlie and Carl Meyer on Talk Python To Me, and we dove into it.

00:02:58 So if you all want a super detailed dive, you can go check that out.

00:03:02 But what is the news?

00:03:04 The news is the documentation for ty is up.

00:03:07 So if people want to check out the docs and learn more about ty, They can go over to docs.astral.sh slash ty.

00:03:16 And there's even an online playground.

00:03:19 And of course, there's a bit of a crossover here in the sense that you can say uvtoolinstallty to have astral installty, just like I do.

00:03:30 Or if you just want to simply run it and say uvx, and that'll install it in like a ephemeral virtual environment sort of thing.

00:03:37 But there's also an online playground.

00:03:39 And this is pretty interesting because the online playground here is written in WebAssembly.

00:03:44 So it's ty running against your Python code in the browser in WebAssembly.

00:03:50 So that's quite neat as well, but that's not exactly the news.

00:03:53 The news is the documentation is up.

00:03:55 And along with that, they also have unrelated to ty exactly, but in the documentation from Astral side, migrating from a pip to a uv project.

00:04:05 And it's a walkthrough on how you might go about using uv in its idiomatic way, I guess you would say, right?

00:04:12 For example, like if you use pip, you probably use pip and pip compile to generate a requirement stock txt and so on, right?

00:04:20 How do you do this kind of stuff using UV?

00:04:23 So people can check that out as well.

00:04:26 Yeah, I really like the migrating thing.

00:04:29 I actually read through it and if you're not migrating, if you're just gonna use uv, I would not recommend reading this because I actually got confused a little bit.

00:04:39 I've already moved on, but yeah, uv all the way.

00:04:44 So what am I going to talk about?

00:04:46 Let's see.

00:04:47 I am going to talk.

00:04:49 Let's just, we have a little bit of news from uv, from Astral.

00:04:55 It's the Astral show.

00:04:58 Yeah.

00:04:58 So I actually picked this up from, oh, Tim, Tim, Tim.

00:05:04 I'm blanking right now.

00:05:06 Tim Hopper.

00:05:06 Sorry, Tim.

00:05:08 Tim Hopper and his Python developer tooling handbook, he posted the uv build backend is now stable.

00:05:16 And actually, I'm pretty sure I heard about the uv build backend, but I don't remember playing with it.

00:05:22 So I played with it.

00:05:24 So the announcement is that for about a year, uv has had a uv build command, and it's kind of like an alternative of, What do we have?

00:05:35 Hatchling or Flit or something like that.

00:05:39 But now it's one of those build backends for pyproject.toml based projects.

00:05:43 And it's pretty exciting that uv build is here.

00:05:46 So that's the announcement.

00:05:48 And it's also that it's stable and also fast.

00:05:51 So Charlie Marsh posted that, he posted that it's 10 to 35 times faster than alternatives.

00:05:59 So what is he looking at?

00:06:00 He's looking at comparing uv to hatchling, to set up tools and to flit the thing that we don't have an answer on is what is he timing because this is just sort of uh posting the times for what he calls the back end sync that is not a command that you can send to hatchling or flit and you actually hatchling isn't a command line thing so i mean i'm not sure what's going on but i believe him that it's faster uh so it would be Kind of cool to find out what he's measuring anyway.

00:06:30 But uv build is now available and that's cool.

00:06:33 I'm pretty excited about that.

00:06:36 Along those lines, if you're switching kind of along the lines of with that, that Michael brought up, if you're switching to uv and you'd kind of like to know what's so great about all of this, I recommend checking out Hinnick's video series.

00:06:50 So he just released the second part in a uv series.

00:06:54 And this one is making Python local workflows fast and boring in 2025.

00:06:59 And he's talking about uv workflows.

00:07:01 So it's a great video.

00:07:02 I mean, I assume it's a great video.

00:07:04 It's 40 minutes long.

00:07:05 I haven't actually watched it yet, but I watched the first one.

00:07:08 Yeah, his videos are great.

00:07:09 So yeah, check them out.

00:07:11 Indeed.

00:07:11 And Brian, our sponsor, also very great.

00:07:15 Let me tell you about them.

00:07:16 How about that?

00:07:17 That'd be great.

00:07:18 Yeah.

00:07:18 So this episode is brought to you by Sentry.

00:07:21 And I'm a huge fan of Sentry.

00:07:23 use them with all of our software.

00:07:26 And they've been incredibly valuable for tracking down errors in our web apps and other code that we've run.

00:07:31 I think everything's fine.

00:07:32 You get a notification.

00:07:33 There is an error.

00:07:34 You're like, hmm, I guess that is a problem.

00:07:37 You know, and it doesn't have to be in your code.

00:07:39 It could be something like you've upgraded a dependency and now there's some kind of problem that's occurred.

00:07:44 I've certainly got that notification as well.

00:07:46 And I've learned about users encountering bugs over at Talk Python and for the courses and stuff.

00:07:52 And then I'll reach out to them and say, sorry, I saw you ran into this bug that we fixed.

00:07:57 And they haven't even contacted me yet.

00:07:59 They're like, okay, awesome, kind of creepy, but amazing.

00:08:02 No, it's good to know, right?

00:08:04 Right away and be able to be on top of things.

00:08:06 So how might you set this up?

00:08:08 Well, they've been adding more and more capabilities and features.

00:08:11 So I want to walk everyone really quickly through the idea of setting up monitoring and distributed tracing for a Python web app, which means like across API calls or across the JavaScript front end and the Python backend, you can correlate errors.

00:08:26 So you can see like the whole operation, right?

00:08:28 So let's imagine we have a Flask app with a React front end and we wanna make sure there's no errors during the checkout process.

00:08:34 I don't know about you, but anytime money and payments are involved, I get a little extra nervous writing that code.

00:08:39 So knowing what's going on, very good.

00:08:41 So you start by enabling distributed tracing and error monitoring on your Flask backend and your React front end, Super easy, just a few lines of code.

00:08:49 Next, you wanna add enough context to the front end and back end actions that you can correlate them into a single request.

00:08:55 So add a little bit of information to like know what's happening.

00:08:58 You enrich the spans, this is the sentry construct across these calls with business contacts like a session ID or a user or whatever.

00:09:08 And then you can see the requests live in a dashboard.

00:09:10 So you build a real-time sentry dashboard.

00:09:12 You spin up one using span metrics to track key, attributes like cart size, checkout duration, and you have just one pane for performance and error data.

00:09:23 And that's it.

00:09:23 If an error happens, you open the error at Sentry and you get end to end request data and error tracebacks to easily spot what's going on both on the JavaScript and the Python side.

00:09:34 So if your app and your customers matter to you, you'll definitely want to set up Sentry like we have.

00:09:40 Visit pythonbytes.fm/sentry and use the code PYTHONBYTES, all caps, just one word.

00:09:46 That's pythonbytes.fm/century, code pythonbytes.

00:09:49 The link is in your podcast player show notes.

00:09:51 And thank you to Century for supporting the show.

00:09:54 Awesome.

00:09:55 I want to move on to something that is sort of, I guess, maybe nerdy, Boolean expressions.

00:10:03 As if the show wasn't already nerdy, right?

00:10:07 So we've got Trey Hunter's article.

00:10:10 And I kind of love what Trey Hunter's been doing lately.

00:10:12 He's been writing some good stuff.

00:10:14 So refactoring long Boolean expressions.

00:10:17 And there's lots of reasons why I love this article, but we'll just walk through a little bit of it.

00:10:23 First of all, he's introducing people to Morgan's Law, which I love.

00:10:28 So here's the idea.

00:10:30 You've got a Boolean expression, and his example, it's a pretty good example, is if you've got events and users, you've got sort of a web app sort of a thing going on, And you want to check to see if a user is verified.

00:10:46 And the event they're looking at, the date of the event is in the future.

00:10:50 So it's greater than now.

00:10:52 And maybe it's not full.

00:10:53 So maybe you're doing like people signing up for something.

00:10:57 And this is a reasonable Boolean expression.

00:11:01 But how do I, it's not that readable.

00:11:03 So let's try to make it more readable.

00:11:05 And that's what he's looking at.

00:11:07 Here's how to break this up.

00:11:08 And one of the things that I love about this is this seems, It's just sort of basic math.

00:11:14 If by basic math, your math includes Boolean algebra and things like that.

00:11:20 But a lot of people come from Python, not from a CS background, which is totally valid, of course.

00:11:28 But how to manipulate and and or.

00:11:31 When I say Boolean expression, it's just truthy things, true and false things with and and or and things like that.

00:11:38 So he walks through some of the things you could do.

00:11:41 You could just split up the lines.

00:11:43 So you could just use parentheses around your expression, and then you can split the different expressions up on multiple lines.

00:11:49 And then he's also saying you could either do it like this, where the and at the beginning, or you could say user verified and, and then go to the next line.

00:11:58 The event date is less than, or is greater than now.

00:12:01 And you go into the next line, not full.

00:12:04 Okay, so you can put the and in the beginning or the end.

00:12:07 It's really up to you.

00:12:09 However, I didn't realize that PEP 8 had made a call on this.

00:12:13 PEP 8 recommends putting things like and and or at the beginning of the line.

00:12:18 And just so it's consistent.

00:12:19 I don't know if it really matters, but I guess I kind of agree that it's a little more readable this way.

00:12:25 So I like that.

00:12:26 The other thing that's kind of neat about this that we will lose a little bit is that Boolean operations and expressions are short-circuited in Python.

00:12:38 So with the ands, that means that all of these expressions have to be true for this to be the entire thing to be true.

00:12:46 So if I get to user verified and that's false, if the user is not verified, I don't evaluate the rest of it.

00:12:53 I just know that this is going to be false that Python does.

00:12:57 And so Python won't run it.

00:12:59 Hold that thought.

00:13:00 It's going to make sense later.

00:13:02 One of the things we can do to make this simpler is to just go ahead and evaluate all of the expressions and assign those to variables like user is verified and then combine those with ands.

00:13:14 That's easier to read. But if if any of these evaluations are lengthy things, we don't want to do this because because the we lose the short circuiting.

00:13:25 We've evaluated all the expressions and then we short circuit just in the ands expression and doesn't we don't get that.

00:13:33 However, Trey says, you still can get this if you throw everything in functions.

00:13:39 So he's got these little is verified, is in future, things like that, naming the expressions into different little functions.

00:13:47 And this is usable.

00:13:49 I don't think this is that readable, though.

00:13:51 But that's just me, I think.

00:13:55 He makes it kind of all on one line, so the entire function on one line.

00:14:00 I think that a lot of people style guides would kind of hate that but you know what I think it looks really neat the way he's got it written like this where it's just one line you kind of call the function as

00:14:09 the test but here's the thing if you run ruff against it keeping it the astral show or you yeah or black

00:14:15 command alt l it in pycharm it's going to wrap it and put spaces like it's just going to keep wrecking it so then you've got to write wrap that in a no format command like directive and then you're like uh okay maybe it's too much to bridge too far but yeah i get it

00:14:32 okay yeah so the these these are cool methods um and then let's jump through the math part the math part is kind of kind of nice uh that um is the there's you can distribute knots and and stuff. And so if you're thinking that either a few things are like A or B is true, and I want to make sure that that's not the case, whatever that means, that's the same as not A and not B. So there's these distributive properties of and and or M. And he shows both whether you want neither one to be true or what? Never both. You want one of them to be true or neither, but not both so those sorts of things to distribute why does this matter it matters because like this he shows an example as a multi-line expression and that is confusing to have a not and then a parentheses of a bunch of stuff but uh if you do uh not one thing and not another thing and not the third thing that's a that's actually pretty easy to read um i think so this is a cool cool intro to to Morgan's law from for some people breaking things up so

00:15:42 anyway yeah very nice this is the kind of stuff I like to geek out on as well like how many how many like variations or how can you restructure stuff to be so much more readable and yeah it's good yeah

00:15:54 and I encourage people to look all the way to the end because you have to you gotta give it to him that some of this stuff is really hard to understand to glance at but because like the first one the knots just sort of hidden up at the top but anyway yeah

00:16:08 all right yeah I would add that you know even though you might evaluate two or three things performance usually is way less important than readability

00:16:17 maintainability and so on yeah i have to say maybe but there's like one sorry maybe there's like one or two functions but the rest of them performance doesn't matter go ahead bro yeah

00:16:27 exactly don't pre prematurely optimize because i have to admit that the uh the example that i sort of poo-pooed on because it's um doesn't allow you to short circuit of just naming the expressions. I do this all the time for, for quick things because it's very readable to do this. So, yeah. Yeah. And we have profilers that can tell us if

00:16:50 it's a problem, right?

00:16:51 Yeah. Usually it's not. All right. What you got for us?

00:16:53 I have just an extra. I have some extras to throw out here. Oh wait, no, I have one more item, don't I? And then, then I have an extra.

00:17:01 So my last main item is this thing called FastAPI Machine Learning or ML Skeleton.

00:17:08 So this is speaking to all the data science folks out there that have some kind of data science model or engine or something they want to expose as an API, right?

00:17:20 Maybe you're not a web developer or you're not really writing a lot of API type of things.

00:17:26 So which framework do you choose?

00:17:28 How do you structure it and so on?

00:17:29 So this person whose name I honestly don't know is just 8beck, the number 8beck, B-E-C, created this thing called FastAPI ML Skeletons.

00:17:41 So what it is, is it's a template that you can start with and adapt for serving machine learning models in a production-ready, fast, and easy way powered by FastAPI.

00:17:53 But it doesn't exactly have to be machine learning models.

00:17:56 Anything that's sort of data science that you can put behind an API, I think would fit here.

00:18:01 So it's tested with talks and it has example code for that and super easy to get started.

00:18:07 There's a few, I'll come back to some, a few little interesting tips and tricks, but it comes with a sample machine learning model that predicts home prices, right?

00:18:15 Just to have something concrete to work with.

00:18:17 And then over here, come through and you can go to the API and they're pretty well structured, right?

00:18:23 It uses like API router and so on, instead of jamming it all into just one file, like so many of the demos do.

00:18:29 You're like, oh, look, it's only 10 lines of code.

00:18:32 You're like, yeah, but if you keep expanding that way, it's going to be terrible.

00:18:36 It comes with like open API documentation by using Pydantic models for all the exchanges.

00:18:43 It's nice and typed and all these things.

00:18:45 So if you're getting, it's not super new, but if you're getting into it, I ran across this and I thought, you know, this is pretty neat.

00:18:51 Maybe this will be real valuable to some folks.

00:18:53 And Brian, I learned something because when it says, how do you start your app?

00:18:58 Well, what you do is you say set dash a, and then you source your env file, which is your environment variable settings.

00:19:04 And you set plus a, I'm like, okay, what does that do?

00:19:08 Yeah.

00:19:08 What does that do?

00:19:10 Are you familiar with this?

00:19:11 No, I wasn't even, I'm like, what in the heck is that?

00:19:15 And that alone might be worth price of entry for this, like learning about this project.

00:19:19 So what set-a does, it says anything that you basically set as a variable in your environment, basically stays set for you, which is pretty cool.

00:19:35 So here, what's the right?

00:19:37 So set-a turns on the all export option.

00:19:41 Set-o all export.

00:19:42 From that point, every variable you assign is automatically exported to the environment.

00:19:48 So if you just said set dash a then like foo equals bar, then it's as if you had created a script and sourced it and all that kind of stuff.

00:19:57 So a cool way to quickly set some environment variables.

00:20:00 Yeah, I think that's-- so getting more and more.

00:20:04 It came up last week of possibly using DuraN for that as well.

00:20:10 Yeah, for sure.

00:20:12 Yeah, that's a more structured way, right, to do it for sure.

00:20:16 But I'm glad to know how to do it manually.

00:20:19 That's cool.

00:20:20 Yeah, yeah, exactly.

00:20:21 Like if you're creating a little alias or something, right?

00:20:24 You could put that at the beginning and just set a bunch of variables or whatever.

00:20:27 Pretty sweet.

00:20:28 Anyway, if you're looking for a FastAPI skeleton to get started with, yeah, it could be pretty cool.

00:20:34 All right.

00:20:35 Do you want to do your extras?

00:20:36 I only have one extra.

00:20:36 Yeah, sure.

00:20:37 Me too, because I tried to jump ahead anyway.

00:20:40 Okay.

00:20:41 So this one comes to us from Wei Lee.

00:20:44 And I'm going to cover this as sort of a gateway to like talk about even more stuff than like it's pretty specific, but it's an example of something that's pretty neat.

00:20:55 So back, keeping with the astral show, Ruff has a bunch of rules for how your code should be formatted, right?

00:21:01 And then things you should do, things you shouldn't do, maybe certain things are deprecated.

00:21:05 You should stop doing them, right?

00:21:07 It hurts when I do this.

00:21:08 Okay, well, stop.

00:21:09 But there are things like Airflow specific rules.

00:21:14 So Airflow is a workflow engine type of thing.

00:21:18 And if you pass, where's the settings?

00:21:21 I guess I don't have it in the docs there, but I have it in the show notes.

00:21:24 So if you pass certain commands to it, such as select Airflow 3, when you run ruff check --fix, it will rewrite old code that was bad into new code automatically having to do with the Airflow framework. For example, in Airflow 2, you used to say from Airflow.models import DAG.

00:21:47 In Airflow 3, you say from Airflow.sdk import DAG, and similarly for other imports. So if you were to say that, it will actually rewrite the import statements to use the non-deprecated style. Cool, right?

00:22:01 Yeah.

00:22:01 Well, if you scroll down a bit, you can see there's similar things for FastAPI, bringing our two topics together, right? So there's certain things that have changed with the way you work with like response model or annotated or so on. So it'll go through and it'll change all those.

00:22:18 Do we have a Pydantic? No, no Pydantic. We should have a Pydantic because that one changed and it's used everywhere. But anyway, there's like framework specific stuff that I think is pretty neat in the rough rule set.

00:22:30 So thanks to Weave for sending that in.

00:22:32 And yeah, you do Airflow or FastAPI or other things.

00:22:35 You can turn that on to do migration across like semi-breaking changes.

00:22:40 And I actually would just encourage people to look through the rough rules because a lot of these things used to be different tools and are different tools, but rough has pulled in rules and checks for lots of different stuff that maybe it's worth perusing around on a regular basis to see what's around and new to see if if maybe you should be checking things a little bit more closely yeah

00:23:03 like they also have like numpy and pandas uh rules and so on watch it a prequel

00:23:08 i just noticed that there's a pie test section i haven't looked through that i'd like to see oh very cool

00:23:14 yeah so one of the things that's neat is um when you go into these um these rules and stuff each one of these it's not just oh here's the rule but it actually tells you does, why you should stop doing it, an example how it's bad and what it fixes. So this is actually a really good resource, which I've actually covered the rule set before is like, hey, you should go check this out just to see like what is going on with these, like do it this way, not that way.

00:23:41 But yeah, the framework specific stuff and like pytest specific stuff is cool.

00:23:46 And that's one of the also one of the reasons why they don't recommend turning everything on, because that's ridiculous. If you're not using

00:23:51 Airflow, you don't need to turn on Airflow.

00:23:54 So, yeah, yeah, exactly. All right. I have something completely unrelated to Python that I just wanted to bring up because I'm going to head to Oregon Country Fair this Friday and I'm totally excited about it.

00:24:07 So, oh, that's awesome. What is it? What?

00:24:11 Don't you live here?

00:24:12 Okay. I do. Oregon Country Fair is a three-day celebration of art, music, and food in Veneto, Oregon once a year, and it's been going on since 1969. They have their own property. Well, they originally rented it or something, but now they own the property or have for a long time, so it can't get shut down.

00:24:35 Anyway, it's not a county fair.

00:24:37 It is a country fair.

00:24:38 So it's music, art vendors, food, and all waste-free.

00:24:47 So the only garbage that they take out is stuff that people bring in.

00:24:52 You can throw away your candy bar wrappers if you're there.

00:24:55 But all the food vendors are all doing containers that are biodegradable.

00:25:00 So it's a fun event.

00:25:03 Yeah, very cool.

00:25:04 I missed it last year and I'm going to go this year.

00:25:09 So some, some big names.

00:25:10 Cool.

00:25:11 It's fun.

00:25:12 All right.

00:25:13 That's our extras.

00:25:15 Are you ready for a joke?

00:25:16 I'm ready.

00:25:16 This is a short joke, but I just can't stop giggling about it.

00:25:21 I saw this Mike at, was it on blue sky?

00:25:25 I don't know.

00:25:26 No, I'm asked it on.

00:25:27 So somebody named Mike sec equals official.

00:25:31 So he said it's based on an idea of somebody else, Daedalus, and pending the release of some kind of official sticker to use.

00:25:39 I now have applied a handy reminder label to my keyboard.

00:25:42 What is the label?

00:25:44 Front towards enemy.

00:25:48 That's amazing.

00:25:49 So it's a picture of the keyboard facing away from the developer.

00:25:54 Yeah, towards the computer or towards whoever you're talking to or whatever.

00:25:59 So front towards enemy.

00:26:00 Exactly. PM maybe.

00:26:02 And if you're thinking, I've seen that before.

00:26:07 Wherever I've seen that, Front Towards Enemy, that's usually on the front of the Claymore mines that are directional mines.

00:26:13 So, yeah.

00:26:14 Oh my gosh. Crazy. I love it.

00:26:18 All right. That is the show for us today.

00:26:21 Awesome.

00:26:22 Thanks for being here as always. Bye.

00:26:24 Yeah. Thanks, Brian.

00:26:25 And I want to encourage people who are listening, if you're not subscribed to the podcast, subscribing to Podcast Player.

00:26:30 And if you're watching the YouTube version, be sure to subscribe and like the video.

00:26:35 Helps a lot.

