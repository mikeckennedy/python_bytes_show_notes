00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 429, recorded April 21st, 2025.

00:00:10 And I am Brian Ockin.

00:00:11 And I am Michael Kennedy.

00:00:13 And this episode is sponsored by the folks at Posit Workbench.

00:00:16 Thank you, Posit.

00:00:17 Also, listen to them later in the show, of course.

00:00:20 If you'd like to connect with us, please do so on BlueSky or Mastodon.

00:00:25 We have all of those links in the show notes.

00:00:28 We'd love to hear from you.

00:00:29 Love to hear new topics that you think we might want to cover.

00:00:32 And if you'd like to listen to us live, head on over to pythonbytes.fm/live.

00:00:37 Usually Mondays at 10 Pacific time.

00:00:40 But you can also use that link just to find the YouTube channel to watch older episodes too.

00:00:45 And finally, you don't need to write anything down while you're listening because we'll just send it to you.

00:00:52 So head on over to pythonbytes.fm.

00:00:55 join the mailing list or the newsletter list, and you'll just get an email sent every week with all the links, but it also has backup information of what you need to know to understand the story.

00:01:06 So really nice, and we don't use it for spamming or anything like that.

00:01:10 Michael, what do you got for us?

00:01:12 I might have a problem.

00:01:13 I like to self-host stuff too much.

00:01:16 It means I end up with things that I have to take care of rather than just have a login somewhere.

00:01:23 But I'm going to make a recommendation.

00:01:25 nonetheless. So if you find yourself using Slack, I think even Zoom maybe, if you're using Jira, if you're using Notion, and you would like that all in one place rather than a bunch of different apps that you pay for, for free, for open source, self-hosted, or paid as hosted if you really want to do it that way, there's a project or tool or platform, whatever, called HULY, H-U-L-Y, An open source platform that serves as an all-in-one replacement for Linear, Jira, Slack, and Notion.

00:01:58 How cool is that?

00:01:59 Okay.

00:01:59 Okay.

00:02:00 So maybe you want to have some place to do chat conversations.

00:02:05 Or you want to store your documents.

00:02:07 Or you want to do project management and sync it with your GitHub issues.

00:02:11 Or do planning.

00:02:13 So all of this stuff is super cool, I think.

00:02:15 And even has video meetings.

00:02:17 So if you want to also get rid of Microsoft Teams or Zoom or whatever, it gives you a nice private way to do all that, right?

00:02:28 And I don't know.

00:02:28 It just, that really resonates with me as just like, here's this cool open source thing that we can do and we can run it.

00:02:35 And we don't have to have all these different services.

00:02:38 And I don't know about the others.

00:02:40 I honestly don't know the pricing for Jira.

00:02:42 I've never paid for Jira.

00:02:43 But Slack is out of control.

00:02:44 Slack is super expensive for what you get from it and things like that.

00:02:49 And so having this with a bunch of dashboards, and it even has a nice self-hosting option.

00:02:55 So if you are a person who does Docker Compose, guess what?

00:03:00 You just Docker Compose up, dash D, you have your whole platform running, which I think is pretty excellent.

00:03:06 So that's how a lot of these self-hosted things are shared and maintained.

00:03:10 So you don't even have to figure out how to put it into Docker.

00:03:12 It's already there and set up.

00:03:14 So you just run it and you're good to go.

00:03:16 Just make sure you do backups.

00:03:17 Pretty neat, I think.

00:03:18 That's pretty cool.

00:03:19 Yeah.

00:03:20 And it also syncs both ways with GitHub.

00:03:22 So if you've got GitHub issues, it will sync with the issues.

00:03:25 And if you have GitHub projects, it'll sync with those projects.

00:03:28 So its project management tools and its issue management, like its JRO replacement stuff, is mirrored on GitHub.

00:03:35 So not everybody has to use it.

00:03:37 Like you can have internal people on this and external people just perceiving it as GitHub.

00:03:41 I have GitHub issues.

00:03:43 I was just talking to my therapist about it the other day.

00:03:47 Yes, indeed.

00:03:48 And John Outer says, this is why I love the podcast.

00:03:50 Thanks for the holy recommendation.

00:03:53 And loves self-hosting as much as I do.

00:03:55 So awesome.

00:03:56 Thanks, John.

00:03:57 Yeah, holy self-hosting, Batman.

00:03:59 Anyway.

00:04:00 Holy self-hosting.

00:04:01 Indeed, yeah.

00:04:02 The problem is you can end up with, you're like, well, now I've got 12 apps to back up and maintain.

00:04:07 But it is super cool to be able to say, we don't have to worry about data privacy.

00:04:11 We don't have to worry about sharing things or if those places get hacked or if they change their business model or if they go out of business.

00:04:19 You know, you've got a self-hosted open source thing that you can fork and just run.

00:04:23 And there's something cool about that.

00:04:24 I wonder if anybody's got like, because this sounds great, but I don't really want to do that work.

00:04:29 So I wonder if there's a self-hosting as a service service.

00:04:33 I think there actually is.

00:04:34 I'm forgetting the name of it right now.

00:04:36 But yes, there basically is a self-hosting as a service.

00:04:39 Yes, it's amazing.

00:04:40 Okay.

00:04:41 What an interesting idea.

00:04:43 All right, that's it for this one.

00:04:44 Over to you.

00:04:45 Okay.

00:04:46 Well, I am going to talk about critical, oh, what are those called again?

00:04:50 CVEs?

00:04:51 Common, I should have practiced this, common vulnerability and exposures.

00:04:57 So CVEs, we're used to talking about these when there's like really wide-scale attacks, but they kind of happen all the time, like vulnerability problems.

00:05:07 And this propped up this last week rather urgently because the CVE system, the entire system is sort of built on top of a non-for-profit called MITRE.

00:05:23 And the entire system, but there was a contract with the U.S. government to maintain this database of CVEs.

00:05:33 However, and this has been around for 25 years, it ran the risk of possibly going away because of all of the cost-cutting that our current lovely administration is doing.

00:05:46 And so the – It's a waste.

00:05:48 It's government waste, I tell you, Ryan.

00:05:51 Like what?

00:05:52 And it's not – it doesn't even – like a lot of people involved in this are volunteers anyway.

00:05:56 That's just nuts.

00:05:58 Anyway, so a 25-year-old CVE program ran the risk of going away.

00:06:03 There was a letter that came out from the vice president of MITRE, gave notice of potential halt of operations.

00:06:12 And apparently they had been worried about this for some time.

00:06:16 So there's this, in order to deal with this and possibly make sure that we don't have this risk in the future, There is now a CVE Foundation.

00:06:30 So there's been an announcement as of April 16th that the CVE Foundation has been formally established to ensure long-term viability, stability, and independence of the CVE program.

00:06:45 This is really cool.

00:06:47 It isn't something they just suddenly did.

00:06:49 They've been thinking about it for a while and planning it.

00:06:52 And there's an announcement at thecvefoundation.org, and they're going to release information about, you know, the transition, what its structure is, the transition planning, opportunities for involvement later.

00:07:05 But right now there's just an announcement.

00:07:07 But this is pretty crazy that we would, like, run the risk of losing this.

00:07:12 This is how we talk about vulnerabilities.

00:07:16 But apparently there was an announcement also, I couldn't find the link to it, that they did not lose funding.

00:07:24 So it's okay for now, but it's still the for now part.

00:07:28 So the foundation wants to make sure that it's not a just for now.

00:07:31 I still think it's something that we should fund as a government, but, you know, it is what it is, I guess.

00:07:37 I think we should fund it, but also I feel like maybe that should be more of like kind of in the style of Python or Mozilla Foundation or, you know, that it's tied to the U.S. government rather than just an international organization of people who are really committed to tracking security issues.

00:07:57 It doesn't take insane amounts of funding to track these things, you know what I mean?

00:08:02 Yeah, I have no idea what the work is involved for this.

00:08:06 Yeah, I don't know what the work is, but it's not like there's a lot of server infrastructure.

00:08:10 It's not running like AI farms or something.

00:08:13 Yeah, and it probably, the funding probably should be coming from like all the ISPs and big companies and stuff that are benefiting from this.

00:08:23 I think so too, but hey, I'm not against the U.S. government.

00:08:27 I'm glad they were doing it, but it just puts it in a weird situation these days.

00:08:32 Yeah.

00:08:32 Yeah, and Python became a CVE authority not too long ago.

00:08:36 the PSF so they can announce their own CVEs around things in the Python space without going through an external, not convincing some other participant to allow them to list their CVE for Python and

00:08:50 so on.

00:08:50 So there's a bit of a distributed aspect of it. Now, before we jump on to thinking our sponsor, Ryan, the thing that I was thinking of is Alestio, E-L-E-S-T-I-O, and it says fully managed DevOps or your cloud and open source software.

00:09:06 And I've not used this.

00:09:08 It's not a recommendation, but we, as in they, deploy and manage open source software to your cloud provider of choice.

00:09:14 So create a Hetzner server, point it at it, and then pick the various self-hosted things that you want and they will self-host them there for you.

00:09:22 I believe that's how it works.

00:09:23 Awesome.

00:09:24 Self-hosting as a service.

00:09:25 Who knew?

00:09:27 Who knew?

00:09:27 Well, I guess you did.

00:09:28 But we also have Posit doing pretty awesome stuff.

00:09:33 Why don't you tell them about it?

00:09:34 This portion of Python Bytes is brought to you by the folks at Posit.

00:09:38 Posit has been making huge investments in the Python community lately.

00:09:42 Known originally for our studio, they've been building out a suite of tools and services for Team Python.

00:09:48 Have you thought of all the things that go into a Python data science project?

00:09:52 You need your notebook or IDE for sure, but you also need a server or cloud environment to run it.

00:09:58 A version of Python, packages, access to your databases, and internal APIs.

00:10:03 That's a lot to set up.

00:10:04 And if you change any of these things when you return to your project months down the road, you might get different results.

00:10:10 Wouldn't it be nice to have all of this set up for you in one easy-to-access place whenever you want to get work done?

00:10:17 That's the goal of Posit Workbench.

00:10:19 Posit Workbench allows data scientists to code in Python within their preferred development environment without any additional strain or on IT.

00:10:28 It gives data scientists access to all the development environments they love, including Jupyter Nobix, JupyterLab, Positron, and VS Code.

00:10:36 And yet it helps ensure reproducibility.

00:10:39 Here's how it works.

00:10:40 You or your team set up Posit Workbench on a powerful, dedicated server within your organization or on the same cloud service that is hosting your most important data sources, such as AWS, SageMaker, Azure, GCP, Kubernetes, or pretty much anywhere.

00:10:57 There, you create dedicated, pre-configured environments to run your code and notebooks.

00:11:02 And importantly, you also configure access to proprietary databases and internal APIs.

00:11:08 When it's time to onboard a new data scientist or start a new project, you just fire it up in Workbench, and it's fully configured and ready to go, including the infrastructure side things.

00:11:19 All of this is securely administered by your organization.

00:11:22 If you work on a data science team where consistency matters, you owe it to you and your org to check out Posit Workbench.

00:11:28 Visit pythonbytes.fm/workbench today and get a three-month free trial to see if it's a good fit.

00:11:35 That's pythonbytes.fm/workbench.

00:11:38 The link is in your podcast player show notes.

00:11:40 Thank you to Posit for supporting Python Bytes.

00:11:43 Indeed.

00:11:44 All right, you ready for the next one?

00:11:45 Yeah.

00:11:46 Database.

00:11:46 Database things.

00:11:48 So here's a really interesting free web app, I guess it is, that lets you draw and import and export and visualize database diagrams.

00:12:00 So either you've got your own projects or where I see this being super useful is you're put onto a new project or you're a consultant.

00:12:07 And they're like, and welcome for the two weeks.

00:12:11 Here's the database and here's the app.

00:12:13 Please fix it by now.

00:12:15 And you're like, how do I even get started?

00:12:17 What is here, right?

00:12:18 So this thing called drawdb.app allows you to draw, copy, and paste database diagrams.

00:12:24 And if you go there, you can see there's really nice graphics, and the UI is quite nice for interacting with it.

00:12:30 So it says you can try this for yourself for free.

00:12:32 And what's interesting is it asks you to choose your database, as in like SQLite or Postgres or SQL Server or whatever, because it imports and exports SQL statements.

00:12:46 and those different databases have different database SQL dialects, which in and of itself is annoying.

00:12:52 But let's just say, I don't know, I'll do Postgres, right?

00:12:55 And you come in here, you can add a little table and you can then like edit that thing, give it a column, multiple columns, different data types, and create a second one.

00:13:04 Then you can say like grab one column from one database or one table rather, and then drag it and drop it in a field on another column and that'll create a foreign key relationship automatically, for example.

00:13:16 And you can go over and you can say file, export SQL or import from SQL.

00:13:21 And that'll generate the data definition language, DDL stuff, create scripts and create the indexes and columns.

00:13:28 Or if you got a database, you can export it and then load up this diagram based on what was in your database.

00:13:33 And then visualize it, tweak it, save it, or just try to understand it.

00:13:37 That's really cool.

00:13:38 Yeah.

00:13:38 And as far as I can tell, it's free.

00:13:40 I don't know.

00:13:40 Maybe there's some point where I pay for it, but I don't think so.

00:13:43 So anyway, I think it's a great little app and people should check it out if they have databases they want to visualize.

00:13:48 And, you know, I'm usually starting with a drawing anyway, like drawing it on paper.

00:13:52 So why not just draw it in something like this?

00:13:55 Exactly, because then you could say generate my table from this.

00:13:58 Yeah, yeah, that's cool.

00:13:59 Cool.

00:14:00 So not much more to it, but there it is.

00:14:02 All right.

00:14:04 Well, my last item is a, and I'm only going to cover part of this, but it is a blog post by Edward Lee called 14 Advanced Python Features.

00:14:14 And, you know, it's a listicle sort of a thing, but there's a lot of those like advanced Python features, and he even talks about this, that are really, really not that advanced.

00:14:24 They're just stuff that people should know and some fun things for, you know, advanced for beginners, but not really.

00:14:30 But I kind of really like this because there are things in this list that I really wish I would have learned earlier.

00:14:40 And so anyway, I'll just jump in.

00:14:42 There's a few things I wanted to pick out.

00:14:45 First off is typing overloads.

00:14:47 And this is something that I just learned while reading this article.

00:14:50 I didn't know you could do this.

00:14:52 So within the typing module, you can say from typing import overload.

00:14:58 And then one of the things you can do then is you can essentially list overloaded operations, overloaded definitions for a function call.

00:15:08 And it's not really like full function overloading like we have in C or something like that.

00:15:15 However, there's return types.

00:15:17 So let's say there's an example here that if you only pass in, if you pass in a certain type, then you're always going to get a list of strings.

00:15:28 And if you're passing in a different type, then you always get a single string back.

00:15:33 Those sorts of things are nice to have for typing or return types.

00:15:38 And that's something that we don't really have in Python.

00:15:40 You can't have a difference in just return type.

00:15:45 So having that in place is kind of neat.

00:15:48 I'm going to play with this like right away.

00:15:50 So that's pretty cool.

00:15:52 Overloading functions with the typing.

00:15:54 So I'll have to try that.

00:15:56 Next up is something I've been using a lot lately is keyword only and positional only arguments.

00:16:02 And specifically, so we now have these, a star or a slash that you can separate the parameters to a function, the parameter definition.

00:16:11 And the asterisk or star means that everything after that is keyword-only parameters.

00:16:19 And then the slash is positional-only parameters, and that's everything before.

00:16:26 So one of them is before and one of them is after.

00:16:28 So in his example, he's got A, B, and then slash, C, D, star, E, F.

00:16:34 So that means A and B are positional-only.

00:16:37 C and D can be positional or keyword, and then ENF have to be keyword only.

00:16:44 And the thing that I'm doing a lot is why I'm using the keyword only one a lot is for functions that have, and these are all not usually API functions, but internal functions that have a lot of parameters that have defaults, And you would almost hardly ever pass it like just positional only because the defaults are, it doesn't really matter the order.

00:17:10 It's just they all have defaults and there's a bunch of them.

00:17:12 So I really want all the callers of that, every place we're calling the function, to list which variable or which parameter they're defining as they call the function.

00:17:22 And you can do that with the asterisks.

00:17:23 Super cool.

00:17:24 Yeah, that's really cool.

00:17:25 Another thing that I think is really useful for that is if it's the same.

00:17:28 A lot of times you're going to give it like numbers or true and false where you don't have a variable that you're passing in, but you have just

00:17:35 some kind of constant.

00:17:37 Because if it goes 7, 7, 5, true, true, false, you're like, whoa, whoa, whoa.

00:17:42 What are these?

00:17:43 It's not like variable names are there where like X, Y, Z, like, oh, those are the dimensions.

00:17:48 No, it just goes 7, 7, 5, like, hmm, which is which?

00:17:52 You know what I mean?

00:17:52 Especially true, true, false, true, something like that.

00:17:55 If you force keyword arguments on it, then it's a much more readable thing at the call site.

00:18:00 Yeah, things that are generic, like you're just adding things, it doesn't really matter that your add function is A and B, but for true and false, you really want, what do those mean?

00:18:12 I like those. It's a good addition.

00:18:14 Last thing I want to come to is there's a list of, he said number nine is Python nitpicks, which is really a few topics around it, but it's listed as a nitpick because it's a bummer when people aren't utilizing this.

00:18:31 So the for else statement, and this is, I think, probably still controversial, is maybe a little bit, is whether or not you should utilize the else clause in for statements.

00:18:44 And kind of, you know, it's like often before the else clause or without using it, you might have to say, Like something, his example is like a found flag to say, you know, whether or not you actually found the item you were looking for while you're iterating the for loop.

00:19:00 And then you can check that later.

00:19:02 But there's else you could just say, you know, if you didn't find, if you never hit anything inside the for loop, you can else out.

00:19:12 It's still a little weird, though.

00:19:13 I still find it very, very good to make sure that you comment that to say what's going on in the else.

00:19:19 They're using what you're doing in there.

00:19:21 So, okay.

00:19:23 I'm anti-else.

00:19:24 I'm definitely anti-else.

00:19:25 And, by the way, Guido, I heard him quoted at one point that said, if I had to do it over again, there would be no else statement.

00:19:32 I think it's just weird.

00:19:33 It's like, does it happen when it breaks or does it happen when it doesn't break?

00:19:36 Like, is break the thing you're looking for and else is the other?

00:19:39 Or is break something weird and it was supposed to go?

00:19:42 Like, it's just, I don't know.

00:19:44 I know you can save one line of code, but it's too ambiguous to me.

00:19:48 It's too weird.

00:19:49 So else is if you didn't break, right?

00:19:52 I think so.

00:19:53 Yeah.

00:19:54 Anyway.

00:19:54 I think so.

00:19:55 Anyway, the fact that you got us, like, we got out of this discussion is like, I don't know, it makes it weird.

00:19:59 For me, I'm out.

00:20:01 I know I could do it, but I don't do it.

00:20:03 Okay.

00:20:03 Also, the Walrus operator, it's been around since 3.8, and 3.8's already deprecated or like end of life.

00:20:10 So we can start using, definitely use the Walrus operator.

00:20:14 Again, it's just saving one line of code, but I like it.

00:20:17 How about Walrus?

00:20:19 I'm a fan of wall I created the wall we're just operating this weekend I believe for me I like it because it's the locality of definition like I'm creating it for this if block and I'm going to use it in this if block if I need it otherwise it's kind of like it's part of this thing not something that might make sense later down the line probably for me I like it

00:20:41 a couple more short circuit evaluation I don't really care I'm fine with a bunch of if-else's actually, if that's all you can do.

00:20:52 But the short circuit, which means using or, utilizing or to say, if you're going to do one thing or the other, you can use or short circuits.

00:21:04 So once you hit one of them that's true, anything after that's not going to get ran.

00:21:09 And you can kind of go crazy with that though and actually put logic in there.

00:21:14 and I'm really not a fan of putting logic in the short-circuiting or operation, but that's just me.

00:21:20 But I am a fan of operator chaining and I often see this with people coming from different languages.

00:21:25 They don't know you can do operator chaining.

00:21:28 So I'll see like if zero is less than X and X is less than 10, you don't have to do that in Python.

00:21:35 Just put them together and say zero less than X less than 10.

00:21:38 So operating chaining is right.

00:21:40 But also I think that we should have been a little more strict with operator chaining.

00:21:45 And I don't think it, like, you can put anything in there, right?

00:21:50 But I don't think you should, like, for numbers, it should be less than.

00:21:53 You should not be doing, like, greater than operator chaining.

00:21:57 It's just weird.

00:21:58 The number line is small to big.

00:22:01 So please do that.

00:22:02 That's all I wanted to cover for that.

00:22:04 But there's a bunch of other great stuff in here.

00:22:07 So definitely check out this article.

00:22:10 Here's the full list.

00:22:11 So LRU cash.

00:22:13 Love it.

00:22:13 Love it.

00:22:14 f-strings.

00:22:15 Love it.

00:22:15 Nitpicks.

00:22:16 I have some nitpicks with that statement.

00:22:17 But you know what?

00:22:18 It's fine.

00:22:18 Good, good, good find there, Brian.

00:22:20 All right.

00:22:21 Well, we're done with our main topics and I don't have any extras, Michael, but do you have any extras?

00:22:27 Well, I thought the answer was no, but it turns out to be yes.

00:22:30 Okay.

00:22:30 Because something I just heard about right before was, oh gosh, assuming on this is all weird.

00:22:37 so there's remember i wrote this article that said unsolicited advice for mozilla or firefox or something like that saying you know what stuff that you guys are doing is does not lead me in the right path and here are five ideas that you might write try as a business to exist down the line please do that and so they're actually coming i mean i really doubt they gave a crap about what i said but they are introducing this um this new suite of services how about that so thunderbird all seems to be based around Thunderbird, their email client, and Thundermail, which is a really interesting term. But they're offering like Thunderbird appointment, which is kind of like Calendly or TidyCal or whatever. Thunderbird Send for private file sharing. I used to love Firefox Send, but it got abused by hackers and other badness. And so then it stopped working. But you could put just like, here's a URL, here's a password. The whole file just goes away in three days, give it to someone, and then they could have it. It was really great. It's all end-to-end did all that kind of stuff. Also, some AI thing because of course there's an AI thing. And then Thunderbird Mail, hosted Thunderbird Mail, all that. Anyway, I think this is a cool idea. Thunder Mail.

00:23:49 Thunder. Thunder. Thunderbird.

00:23:51 Oh. So, very cool.

00:23:53 That's all I got for my extra. You can't spell mail without AI.

00:23:57 That's right. Yeah, well, I'll tell you what, that seems to be what they think in their features that every mail client I find is like.

00:24:04 And now we have some terrible AI thing that will just erase all your formatting and make you have to rewrite your mail if you try to use it.

00:24:09 But it's here, and it's great.

00:24:11 No, it's not.

00:24:14 Anyway, shall we?

00:24:16 You know, Brian, we try to make it not too political here, but I got a political joke, in a sense. Okay, awesome. Are you ready for it? Yeah.

00:24:23 So, this one came to us by many people, so thank you to everyone who sent us this in. Have you noticed, I don't watch the news a ton, but have you noticed that there's some talks about tariffs lately?

00:24:35 Yeah.

00:24:37 I mean, look, I think genuinely it's fair to say, like, let's discuss tariffs.

00:24:42 And if other countries have tariffs on us, does it make sense for us to not?

00:24:47 I don't know.

00:24:48 Whatever.

00:24:48 I think there's a debate that can be had.

00:24:50 But the way that it's been done is so just chaotic and random and on and off again and so on.

00:24:57 But somebody decided that if that's a good idea for a global trade, boy, oh boy, wouldn't that be a cool idea for Python and for program languages and particularly for these pesky external outside of the standard library packages.

00:25:12 Yeah.

00:25:12 So I present to you tariff, a Python package that imposes tariffs on Python import statements.

00:25:20 And no, it's not just a joke.

00:25:22 It's literally version one.

00:25:23 It's not even zero anymore.

00:25:25 And it is released on PyPI.

00:25:26 So you can literally pip install tariff.

00:25:29 What does it do?

00:25:30 Well, boom, fire, fist emoji, fire emoji.

00:25:33 A little reference back to Signal.

00:25:36 The greatest, most tremendous Python package that makes importing great again.

00:25:40 Tariff is a fantastic tool that lets you impose import tariffs on Python packages.

00:25:45 We're going to bring manufacturing back to your code base by making foreign imports more expensive.

00:25:51 And so all you got to do is import it.

00:25:52 You set your rate on the different libraries.

00:25:57 like 50% tariff on NumPy, 200% tariff on Pandos and so on.

00:26:02 And then when you import NumPy, it's literally 50% slower.

00:26:06 It takes 50% longer than before.

00:26:08 What do you think?

00:26:09 That'll teach them.

00:26:10 Yeah.

00:26:10 That'll teach them.

00:26:11 Yeah.

00:26:12 We're going straight back to self-hosted vendoring it in.

00:26:16 Yeah.

00:26:16 But what's not is it works.

00:26:18 Like, you know, it's not just a weird joke idea, but somebody made it.

00:26:22 It's open source.

00:26:24 And the hat.

00:26:25 The hat is good.

00:26:28 Why tariff, you may ask?

00:26:30 Because foreign packages have been stealing our CPU cycles for too long.

00:26:33 It's time to put America first and make importing fair and balanced again.

00:26:37 Obviously a parity package.

00:26:38 Use it at your own risk.

00:26:40 Yeah, other people stealing our CPUs.

00:26:43 We need to steal our own CPUs.

00:26:45 Exactly.

00:26:46 That is how we're going to do it.

00:26:47 Yeah.

00:26:48 Well, that's what I got for you.

00:26:50 Is it funny?

00:26:50 I don't know, but I think it is certainly amusing.

00:26:52 It's not.

00:26:53 when I look at my 401k, it is not funny, but, you gotta laugh.

00:26:58 You gotta cry.

00:26:58 Those are one of your two reactions.

00:27:00 Might as well laugh.

00:27:01 Glad I like my job.

00:27:02 Cause I'm going to be here for a while.

00:27:03 anyway, thanks.

00:27:06 Thanks for everything, Michael.

00:27:08 Thanks for the joke.

00:27:08 Thanks to everybody that shared them.

00:27:10 like we said, a lot of people, sent that in, but that is not a waste.

00:27:14 That also gives us a signal that we, we might want to cover it if a lot of people are thinking about it.

00:27:20 So, so thanks.

00:27:21 Yeah.

00:27:21 Thank you.

00:27:21 All right.

00:27:22 Bye.

00:27:22 Bye Brian.

00:27:23 Bye everyone.

