00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04 your earbuds. This is episode 119, recorded live from PyCascades in Seattle.

00:00:09 All right, it's great to be here. And this episode is brought to you by Datadog. Tell

00:00:17 you more about them later. Right now, I have a bunch of special guests, none of whom are Brian

00:00:21 Aukin. More about that in a second. But we have Trey Hunter. Hello. Dan Bader. Hey, how's it going?

00:00:26 Eric Cho. Yo. All right. And all of us are here at the conference and we thought, why not put

00:00:30 something live together for you? Now, Brian Okken decided to punish his teeth by having a painful

00:00:36 root canal and couldn't join us in some sort of last minute emergency. And that's really unfortunate

00:00:41 because he was looking forward to be here. So everybody, Brian, we miss you. We miss you, Brian.

00:00:45 Right on. Well, let's go ahead and kick it off. I'm going to do the first thing here. And have you guys

00:00:52 heard of this thing called Dropbox? Yeah, a little bit. They have something to do with Python. Anyway,

00:00:56 obviously, Guido works at Dropbox. It's a huge Python center of the universe there. And what's

00:01:02 really interesting is they're finally migrating to Python 3 and using some of the tools that Guido

00:01:08 has personally worked on with like mypy and static typing and all of that. So that's our first item.

00:01:14 And if you were to guess how many lines of code is the Dropbox code that you're working with,

00:01:20 you know, that little box in your menu bar, your task bar, that's also client-side Python,

00:01:25 which is interesting already. But it's over a million lines of code. So they started way back

00:01:32 in 2015, a little hack week side project to prove whether or not maybe they could do it. It turned

00:01:38 out it's going to be hard. That's what they basically they said. And officially they started the first

00:01:44 half of 2017. And the real thing that helped them do this, which I think is interesting is mypy.

00:01:50 Have you guys heard of mypy?

00:01:51 Yep.

00:01:52 Oh, yeah.

00:01:52 So mypy is, it takes the type annotations or type hints and verifies that, you know,

00:01:57 this function says it takes one of these and you're giving it one of the same things like that,

00:02:01 that sort of thing.

00:02:02 Did Guido actually, like, I don't think he started mypy.

00:02:05 I don't think he started it, but he definitely works on it.

00:02:08 One of the original contributors, I think.

00:02:09 Okay. Did he start it or like, was it started for Dropbox specifically or for the Dropbox codebase?

00:02:14 Just curious.

00:02:15 Yeah, I don't know either, but I know that it was an important thing he's working on.

00:02:18 I'm not sure, but I just want to, it seems like Dropbox been migrating away from like the public

00:02:23 clouds for a while and they've been focusing on just getting things right. So this is probably one

00:02:28 of those things where they think for the long-term growth, it's going to be better than rely on

00:02:33 somebody else's infrastructure.

00:02:34 Right. Absolutely. It's very interesting. They're stepping away from some of the cloud hosting.

00:02:37 Everyone else is running to the cloud. They're like, ah, well, we can make cloud.

00:02:40 That's pretty interesting. So let me throw this out for you all, co-guests and audience members

00:02:46 and listeners. One of the very first things they say in this article is, well, once we were armed

00:02:51 with mypy, the first few steps we took was to port our custom fork of Python to 3.5.

00:02:58 What?

00:02:59 That's big.

00:03:01 I'm like, wait, what? They don't run normal Python? They drop Python? What do they call it? It's pretty

00:03:08 cool.

00:03:09 It's pretty cool. It cross compiles to Perl.

00:03:11 Yeah.

00:03:12 Everybody loves it.

00:03:13 Yeah. So I'll just kind of wrap this up here. But basically this article that we're covering

00:03:18 goes to all the steps of Dropbox moving over. And I feel like if people are going to take

00:03:23 the Python 3 as modern Python and other Python as legacy Python as a legitimate thing, the guy

00:03:30 who created Python had better work at a place that uses Python 3, not Python 2.

00:03:34 For sure.

00:03:35 So I'm super happy to see that's moving along. And also that Guido was a pretty big part of it.

00:03:39 All right. So let's see what's up next here. Eric?

00:03:41 Basically, I want to talk about what I feel was like underserved community in Python. I've come from a

00:03:48 network engineering background and been focusing on network automation using Python. And I think we've

00:03:54 gotten to a point where we're big enough to be noticeable. Like it's actually material for the

00:03:59 amount of community. I mean, we have new terms such as NetDevOps or NRE, you know, not to be subtle

00:04:05 differences from the site reliability engineering for network reliability engineering. We have some

00:04:11 popular libraries from NetMiko, Napalm, who's been on your show before. And I can't even pronounce that

00:04:17 new library, Noner, I think. And N-I-R will have the link in the show notes. Yeah, you know, there's a lot

00:04:23 of free resources out there for people to practice on for either network engineer wants to learn more

00:04:28 about Python or developers who wants to learn more about network engineering. I think coming of age,

00:04:32 I mean, hopefully one day, you know, we're going to have a subculture of Python, just like the data

00:04:39 analysis community that for network engineers. So that's, I want to bring it to everybody's

00:04:44 attention. You could do it for fun, do it for profit. And, you know, it's a welcoming community.

00:04:49 Yeah. And you link to a bunch of resources in the show notes that people who are into that can check

00:04:53 out. And yeah, Python's a mosaic and there's so many people doing different things. And here's just

00:04:57 another part of it, right? Yeah, absolutely. I mean, I'm super excited about this because I think,

00:05:02 as you mentioned multiple times on your show, it's like you get started early or started easily,

00:05:06 but you know, you don't hit that ceiling. I mean, I've been doing this for five years and I haven't

00:05:11 found that ceiling yet. It's a dot to me. So yeah. Is that a sign of growth that the Python community

00:05:16 has seen where now, you know, it makes sense to have a niche for network automation specifically?

00:05:21 I think people are still trying to figure out like how this thing's going to go, which is

00:05:24 with lots of changes presents more opportunities for people. And Python kind of sort of just emerged in this

00:05:31 de facto and speaks to the versatility and the power of the language. I think we're in that phase,

00:05:35 we're trying to figure it out. And we just kind of have this trending versus like nobody has the

00:05:41 right answer. But that means at the same time, that's where the opportunity lies. You know,

00:05:45 you could figure it out and could drive that direction. And I think the developer actually

00:05:49 has a huge advantage that everything is virtualized, everything is abstracted away from the physical.

00:05:56 So that's my thought at the moment. You know, you could see like, I'm not very clear either.

00:05:59 I think it's super interesting that you pointed out how everything's abstracted and sort of cloud

00:06:02 programmable. That means like Python has a better chance in the network space if it's not all hardware

00:06:07 and boxes and stuff, right?

00:06:08 Yeah, for sure. I think one of the challenges for network engineers such as myself going into the cloud

00:06:13 is that the fact that, you know, there's no longer broadcast domain, your net, your nick is actually

00:06:18 physically attached to you. So things that we took for granted that were fixed is no longer true.

00:06:23 So you get to have like a network NAT gateway that's just arbitrarily attached to your virtual subnet,

00:06:30 which, you know, you used to, I think if you work in the traditional enterprise, like the first thing

00:06:35 you do when you get a new team is like, you subnet it out, you give it an IP address, you subnet.

00:06:39 But those are all virtualized nowadays. So you still need to understand the basics. But that basic used

00:06:46 to take years to master it. Now it's just a matter of reading a doc. So yeah, hopefully, you know,

00:06:51 you guys, you know, come say hi, if you see me at Ansible Fest, at Cisco DevNet Create at,

00:06:57 you know, some of the Juniper events, you know, come say hi, let's talk. And I think we could make

00:07:01 this potentially make a great community out of it.

00:07:03 Yeah, put Python on the wire.

00:07:05 Yeah, yeah, for sure. Buy you a Python beer.

00:07:08 Yeah, but it's funny, Python really is a mosaic. I mean, that's, I didn't understand. Well, I understood

00:07:14 a lot of the terms you were using, but what they actually mean, I don't know, because I don't need to know

00:07:18 what they mean. And in the space of Python that I kind of am part of, this next thing I've got is

00:07:23 kind of related to the fact that Python is a mosaic. It's kind of part of the web side of the mosaic of

00:07:27 Python, which gets maybe more reputation than it deserves in the sense that there's a lot of folks

00:07:34 using Python for the web, but it's not all you can use Python for at all. I mean, data science is huge.

00:07:39 But if you have to process data, and it's not in a database, and you are someone who's familiar with

00:07:45 Django, there's a thing called Alkali that Kurt made. I can't remember Kurt's last name. Remember,

00:07:50 Kurt's in the room, and we actually, it's Kurt Neufeld. So it's funny being at conferences,

00:07:56 you sometimes just meet the people who end up, you know, making the things that you're using. So

00:08:01 Alkali, I'm not using, but it looks kind of fun, because I'm familiar with the Django ORM.

00:08:05 And Alkali, it's meant to take structured data, maybe an RSS feed, maybe a CSV file,

00:08:10 maybe JSON data, maybe some random homegrown thing that you've got on your team or in your company,

00:08:15 and allow you to use a Django ORM like syntax to query it and also to save it,

00:08:20 maybe in some other format, even. So it's as if you're working with a database,

00:08:24 but you don't actually have a database behind the scenes, you've got some structured file. So it's

00:08:29 kind of does that all in memory, which is fun, right. So maybe you're working with XML, and you don't want to learn XPath,

00:08:35 or you don't want to write regular expressions against CSV files.

00:08:38 Who wants to learn XPath, man?

00:08:40 Nobody.

00:08:40 Hey, rhetorical question.

00:08:42 Hey, man, the 90s are calling, they want their API back.

00:08:44 Here's my style sheet says nobody ever.

00:08:48 Yes, exactly. So I think this is a cool project, Kurt. I definitely like that you can point it at even

00:08:54 like something, an endpoint on ATP service and like turn that into effectively a Django database.

00:09:00 And I've heard that there's a branch working on indexes, which will like sort of complete the

00:09:05 performance side of things.

00:09:06 Ooh, that would be really fun.

00:09:07 Yeah, no, no pressure. No pressure. It's going to be released tomorrow, I heard.

00:09:12 I'm just kidding. It's not going to be released tomorrow.

00:09:14 It's a long night for Eric.

00:09:15 You're shaking his head.

00:09:16 Long flight home. I don't know where you're from.

00:09:18 All right, before we move on to the next one, let me just tell you about our sponsor,

00:09:21 which makes all of this happen. So this episode is brought to you by Datadog and Datadog. They're

00:09:26 really awesome. They let you track the performance and errors and requests, not just within your

00:09:32 Python app, but across all of your infrastructure. Like, so if you're doing like a Kubernetes thing

00:09:36 and you've got a Flask app and it's talking to Nginx and it's talking to PostgreSQL, you can like

00:09:43 tie all the performance of that entire system together, not just profiling your Python code,

00:09:48 which is pretty awesome. So check them out at pythonbytes.fm/Datadog. Get a cool free

00:09:53 t-shirt. You get to try it out. It's awesome. Okay. So the next item, that's Dan.

00:09:57 Oh, sweet. Yeah. So a quick update here. The CMU Carnegie Mellon University launched a undergrad

00:10:03 degree in artificial intelligence. And apparently that is the first AI degree offered by a US

00:10:10 university. And when Mike told me about it, I was really surprised because I thought, well,

00:10:14 AI has kind of been like a big buzzword for a while now. And why didn't anybody else come up

00:10:20 with a degree before that? But I guess it always takes a little while to do that. And I don't really

00:10:25 know what goes into that degree or kind of what, you know, how the curriculum really differs from,

00:10:30 let's say like your average computer science degree or like a data science curriculum. But I just felt it

00:10:36 was an interesting development. Yeah. I'm sure they use a lot of Python.

00:10:39 Computer science forever. Well, first it was like electrical engineering, but I work on computers

00:10:43 on the software side. And like eventually that got a real degree, like computer science.

00:10:47 And then we have like software engineering. But now I think this is a big landmark, like the first

00:10:52 artificial intelligence, like a bachelor of artificial intelligence. Like think of that. That's crazy.

00:10:56 And one of the things the dean said is, you know, of course we'll do CS stuff, but we're also

00:11:00 going to focus on things like computer vision, language processing, huge databases, and how to help

00:11:06 like humans make better decisions automatically. It's pretty cool.

00:11:10 So I'm waiting for the day where we have an AI, get a bachelor's degree in AI, just so we can call

00:11:17 it a day and we're done. Or an AI teaching the bachelor's degree in AI.

00:11:21 Yeah. Even better. That'd be so sweet.

00:11:23 My professor's a jerk.

00:11:25 It's written in Fortran.

00:11:27 Yeah. So do you use Python at all?

00:11:31 I'm guessing you're learning Python.

00:11:32 It must be, right?

00:11:34 It's all Java. No, I don't know. It's got to be Python, right?

00:11:36 All right. So you all might know that maybe I've been kind of on a rant about async and await

00:11:41 and async is programming lately. And the next one, have you also heard that I've talked about

00:11:46 GUIs? Like I've mentioned this twice, I think, like that Python should have better GUIs.

00:11:50 Well, this next one is kind of like these things come together, which is awesome.

00:11:55 So Florian sent this over to me and it's PySide 2 and Qt for Python, the Qt framework. That has an event

00:12:02 loop that, you know, a button gets clicked or a timer runs or something like that. Well, somebody

00:12:07 built some layer that you can plug that into async and await. So you can have like async def button

00:12:14 click handler that integrates with your other async operations happening on your GUI there. It's pretty

00:12:21 awesome. There's some examples on how you do it. It's super simple. I linked to one about downloading

00:12:25 some stuff and whatnot. So yeah, if you're doing anything with Qt and you do anything with async,

00:12:31 then check this out. That's really, really a nice one.

00:12:33 So that one, usually like I know, I haven't done Qt in a while, but GTK uses kind of an object oriented

00:12:38 event loop there, right? Where it's classes. So it's taking a class-based syntax and allowing you to use

00:12:43 the new asyncio syntax, right? I think it's mixing the GUI event loop and the asyncio event

00:12:49 loop together because otherwise I think they would run independently. I think you basically can't have

00:12:55 those run on the same thread or something to that effect, right? Like the async event loop would block

00:12:59 the GUI loop or something to that effect. Cool. All right. So the next item we've got on the list here,

00:13:04 you know, guys, we're at Python 3.7 now. 3.8 is coming out pretty soon. So we're kind of running out of

00:13:09 like minor number space. I guess we could always create more, but whatever. That's a good intro.

00:13:14 People have started thinking about, you know, what's going to happen with Python 4.0? Like what

00:13:19 would be some cool features that we would really want to see? And so our good buddy, Anthony Shaw,

00:13:24 wrote a really interesting blog post about four things he wants to see in Python 4.0. And it's pretty

00:13:33 short read, but there's some interesting ideas in here. So we're just going to go over those points

00:13:37 here. And so number one is he would love to see just in time compilation as a first class feature.

00:13:42 So right now, you know, you've got some alternative Python interpreters like the Piston project,

00:13:47 or PyPI, I guess is like the most well known that actually feature just in time compilation. And it

00:13:53 could bring a huge speed up compared to like the plain like bytecode interpreter setup that CPython uses.

00:13:58 And so I guess the idea would be, is there some way to bring this into core Python? And apparently,

00:14:05 there is and we already have this in some way, or at least we have the infrastructure to be able to

00:14:10 plug in something like that.

00:14:11 That one would be really big because I know there are some companies that the reason they're able to

00:14:15 use Python for what they do is PyPI. The fact that it really speeds up with that just in time

00:14:19 compilation.

00:14:20 Yeah, yeah. I think it's a big one, right? Like performance. I think the more people use Python,

00:14:23 the more relevant the whole performance story becomes for people because then it's like,

00:14:27 yeah, you know, it has a huge impact if you have a small improvement.

00:14:30 Yeah, absolutely. There's tons of attempts to solve this problem. Like there's Rust Python and

00:14:34 there's Grumpy and there's all these different attempts on solving. And PyPI, like Trey said,

00:14:39 is really awesome. But it has this limitation where like when it, it kind of, when it gets to the C

00:14:44 interrupt stuff, it can like slow down or it doesn't necessarily work with all of them. So it kind of

00:14:49 falls back then. And with Pigeon and the work that Brett Cannon and those guys did,

00:14:53 it's really awesome because that's a plugin to the normal CPython. So it wouldn't be like an

00:14:57 alternative thing. So yeah, I would love to see this as well. It'd be great.

00:15:00 Yeah. Great idea. All right. Item number two is on the wishlist is a stable 0.0, like a stable 4.0

00:15:08 release.

00:15:08 Is that a lot to ask?

00:15:09 I don't know, man. You tell me.

00:15:10 I feel like this one, this was because of 3.0 history, right? That, you know,

00:15:16 there were lots of breaking changes. The initial was a kind of a rewrite of the language from my

00:15:20 understanding, although I'm not a core developer. I don't know.

00:15:22 The central point of that in the blog post here is that, well, you only have one chance to make a

00:15:27 first impression really. And so maybe Python 3 kind of bumbled its way into life or whatever. I think

00:15:33 now we're super happy that we have it, but I don't actually really remember the 0 release or the 0.1

00:15:37 release.

00:15:38 I don't know if anyone does.

00:15:39 Yeah. It's like, let's not talk about that. Let's just move on.

00:15:41 No, I'm sure it was great. All right. Static type hinting. I think that's a really good idea too.

00:15:46 You know, we've got my Pi, but it's optional right now. And it would be kind of

00:15:52 interesting to see that integrated into CPython or the core language if this is really the path

00:15:58 forward. And I'm not actually sure what the roadmap says there.

00:16:02 Yeah. I don't know either. It's pretty interesting. I think static typing is super valuable.

00:16:06 I think having it mean something in the language, that would change the Zen of Python, wouldn't it?

00:16:12 I mean, because it's so much about the duck typing and I don't have to worry about it. It's like,

00:16:16 whoa, compilation error. We expected a I runnable of whatever, right? Multiple templated thing. And

00:16:23 yeah, I don't know. I don't know about that.

00:16:25 Really changed the face of the language, I think.

00:16:28 Yeah. I like what he's recommending here. I'm not so sure about the required static type

00:16:32 hinting. Maybe like a mode to run it where you can check it. I mean, we have data classes,

00:16:36 which do some validation in a sense.

00:16:39 You're wrong, Anthony. No, like we're just some really interesting thoughts about this because,

00:16:46 you know, what should go into it? Because obviously it's a big release, right? If you're talking about

00:16:49 Python 4.0, it better be a really, really noticeable improvement. Otherwise, people are going to go,

00:16:55 like, oh, which would be nice too. I mean, if it's just a 4.0 release and everybody's kind of,

00:17:00 there's no upgrade hump like we had from 2 to 3, that's kind of nice too.

00:17:04 Right. Well, and he does mention the idea of static duck typing, putting an iterator in there as

00:17:08 opposed to a generator specific type of thing. But I don't know how you would really make that

00:17:13 a truly generic thing.

00:17:14 Yeah. Well, as long as we don't end up with a Python 3 death clock, we'll be in a pretty good place.

00:17:19 Nice. Okay. So the next item we have here is a GPU story for multiprocessing. So I guess the idea is

00:17:26 that a lot of workloads that people use Python for these days are actually running on GPUs. You know,

00:17:33 a lot of the, I guess, like the deep learning stuff's all running on GPUs these days. And so

00:17:36 wouldn't it be cool if Python 4.0 actually had some facilities to run stuff on the GPU

00:17:41 for like parallel computations and had it built into the language? Wouldn't that be sweet? It's an

00:17:46 interesting idea for sure.

00:17:47 Maybe like another decorator, like an at GPU.

00:17:50 And we're done. Add some tie pins. Yeah. And the last item here on this really interesting list is

00:17:56 number five is more community contributions. And I think Anthony is saying that he's already

00:18:03 seen, you know, like a lot more involvement from the larger community. And now that CPython is

00:18:08 hosted on GitHub and there's less barriers for people to contribute, I guess, to the code. And

00:18:14 just seeing more growth in that and seeing more people involved in the actual development of

00:18:19 CPython would be pretty sweet. And I totally agree. What do you think, Eric?

00:18:22 Well, a lot of these features, I haven't been coding long enough to have a strong opinion about

00:18:27 one way or the other. But I think to me, obviously, you know, optimizing for hardware and who would say

00:18:33 no to that. But to me, the 4.0 story would be big in terms of this would be the first major release without

00:18:40 having a BDFL. And how we I guess it will be we'll figure it out by then how, you know, 3.8 came about and all the

00:18:47 peps. But this will be a major release where it's determined, I guess, by the committee. So it would be kind of

00:18:52 interesting and just see how that transition going and hopefully for the long term and 5.0, 6.0.

00:18:58 I feel like even outside of the core developing team, Python naturally has had more community involvement

00:19:04 over the years. And it'd be nice to see that with a 4.0 because I mean, even this podcast, like, you know, you

00:19:08 mentioned under PyPackages recently. And that's something that that's not a PEP that's actually ready.

00:19:13 That's something it may or may not make it into Python. That's a discussion that normally happens

00:19:18 not behind closed doors, but in an open space that no one looks in, which is the core developer

00:19:23 mailing list, whereas it's on a podcast now.

00:19:24 Some random people in Portland dug it up and talked about it on the internet and all the dirt on your

00:19:30 Python.

00:19:30 Yeah. So that's it for all of our main items. Just a couple of quick extra ones for me. One,

00:19:35 I did an async webcast, which is available. So if you want like one hour review of what async and

00:19:40 await means and why I think now is the time for async and Python and you don't have to switch to

00:19:47 go. It's already awesome. Like just use it. And so you can check that out. I'll link to that in

00:19:51 show notes. And then if you happen to be somewhere near Tel Aviv or Israel, at least the first week of

00:19:57 June, they're having PyCon Israel, which is pretty awesome. And call for proposals is open just a

00:20:03 couple of days ago. So yeah, that's, those are my extra items. And you guys got anything else?

00:20:06 Yeah. Quick announcement. We're working on a new book for real Python and we're going to release

00:20:11 through real Python. It's called the Python basics book. So it's like a beginner's book for people who

00:20:15 want to get into Python in the first place. And Mike actually wrote the foreword for it. And it's great,

00:20:22 but it also kind of duplicates what we had said in the intro. So that means we've got to rip out a

00:20:26 bunch of stuff and then use his foreword as a new intro because it's so much better than what we had.

00:20:29 Thank you, Mike.

00:20:30 You're welcome.

00:20:31 Shameless block for the book.

00:20:32 Thanks for making more work. So the only thing I have to share is that, you know, some things in

00:20:38 my world, I'm, I'm, I have a goal for myself to write more because writing blog posts takes me so

00:20:43 much time. And so that's, that's something that I'm, I'm just announcing publicly here only so that I

00:20:49 will commit to it over the next quarter or so. And there's some kind of big things that folks in my

00:20:54 mailing list know with Python more. So it's going to be coming up soon.

00:20:57 Yeah. Sounds great. So I guess we got to close this out with a joke. So we got a whole list of

00:21:02 jokes here and I'll just grab two for you guys and, you know, let you all see what you think here.

00:21:06 So why did the angry function exceed its call stack size? It got into an argument with itself.

00:21:12 Oh no, oh no. There's more.

00:21:20 But wait, why did the developer ground their child? As in you can't go out, you're in trouble,

00:21:26 you stay home for the week. They weren't telling the truth. And with that, I think we're going to

00:21:31 close it out because that's what are we going to do with that? All right. So Trey, Dan, Eric,

00:21:37 thank you all for being here and everybody. Thank you so much for coming.

00:21:39 Podcasts was great. Brian, we miss you and see y'all later.

00:21:48 Thank you for listening to Python Bytes. Follow the show on Twitter via at Python Bytes. That's

00:21:53 Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news

00:22:00 item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for

00:22:04 sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy.

00:22:09 Thank you for listening and sharing this podcast with your friends and colleagues.

