00:00:00 Hello and welcome to Python Byte, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 410, recorded Monday, November 18th at 7.37 a.m.

00:00:11 Again, an unusual time for our live streaming, but here we are.

00:00:14 I am Michael Kennedy.

00:00:15 And I am Brian Okken.

00:00:16 This episode is brought to you by us, our courses, the podcast, all those things, Brian's book, etc.

00:00:23 Check them out. Links are in the podcast show notes there.

00:00:27 You can find them right in your podcast player.

00:00:28 And we have a standard introduction, Brian, of, hey, follow us on Mastodon.

00:00:33 But you know what? This is not news to you.

00:00:35 You created us a Python Bytes Blue Sky account. How about that?

00:00:40 Yeah, Blue Sky.

00:00:41 So you can still follow us on Mastodon. We're still very active there.

00:00:44 But if you're one of the many people that never really made your way to Mastodon, but decided to make your way to Blue Sky,

00:00:50 well then make your way over to the Python Bytes.bsky.social account where that is the jumping off point to stay in touch with all of us.

00:01:00 So follow the podcast there.

00:01:02 You can follow Brian.

00:01:03 He's linked in the profile there.

00:01:05 You can follow me over there as well.

00:01:08 And once you click on me, you can find Talk Python, all those things.

00:01:11 Follow the chain.

00:01:12 Follow the chain.

00:01:13 So follow us on Mastodon and Blue Sky.

00:01:16 I'm enjoying Blue Sky, Brian.

00:01:17 What do you think about it?

00:01:19 I think the default, I like it.

00:01:21 Also, I like that the default experience is pretty good.

00:01:24 Mastodon, I love Mastodon, but I had to get to, I'm using the Mona client on my iPhone, and it works.

00:01:32 It's a really comfortable thing, but it took me a while to get there because there really isn't, I don't, if there is a default Mastodon client, it's not great.

00:01:40 Yeah, there is a default one, but I tried it for a while and I switched to Mona as well.

00:01:45 Yeah, so.

00:01:45 Yeah.

00:01:46 I'm liking it.

00:01:47 If a bunch of people want to move over there, you know, we should be part of that community.

00:01:51 There's a ton of familiar faces.

00:01:53 Many of the people we talk about on the show are pretty active over there, so.

00:01:56 But it doesn't, you know, one thing, it doesn't have an edit feature.

00:01:59 When you post, you're done.

00:02:01 You can't edit it later.

00:02:02 Just prepare people, prepare to receive a lot of typos from me.

00:02:06 For some reason, I like type fast on my phone and I don't really look and just hit send.

00:02:10 That may be on me.

00:02:11 But I think it's bad form to call people out on typos on social media platforms.

00:02:16 You know, that's just.

00:02:17 Yeah.

00:02:18 Anyway.

00:02:18 Cool.

00:02:19 Indeed.

00:02:20 Indeed.

00:02:20 And, you know, final bits of introduction.

00:02:22 Check out the live show.

00:02:24 We don't know when it is.

00:02:25 Maybe Monday at 7.

00:02:27 You'd like to say normally.

00:02:28 What?

00:02:28 I don't remember.

00:02:29 No.

00:02:30 Well, what?

00:02:30 There's what we normally say is Monday at 10 a.m.

00:02:33 Pacific time.

00:02:34 But then there's what we normally do, which recently has been 7.30 a.m.

00:02:37 All over the place.

00:02:38 Yeah.

00:02:39 Blame Brian.

00:02:40 No, it's fine.

00:02:40 It's fine.

00:02:41 We'll figure out a time.

00:02:43 But you can always find the next episode pretty much right as this one ships.

00:02:47 So if you just click on there, it'll take you to YouTube.

00:02:49 That has the time.

00:02:49 Yeah.

00:02:50 Finally, subscribe to the newsletter.

00:02:51 You guys know the deal.

00:02:52 Handcrafted.

00:02:53 Artisanal.

00:02:54 From Brian.

00:02:54 By the pythonbytes.fm newsletter.

00:02:56 And with that, what do we got?

00:02:58 Let's talk about Django for a bit.

00:03:00 So Carlton Gibson, who was the Django fellow and has stepped, I think, last year.

00:03:07 I believe he did step down.

00:03:08 He is a Django chatter, though.

00:03:10 Django chat.

00:03:11 Yeah.

00:03:11 Django chat's awesome.

00:03:12 Another podcast.

00:03:13 But so he has thoughts on Django core.

00:03:16 And it's kind of a long article, but it's well written.

00:03:20 And it's talking about Django core versus Django plugins and the longevity of Django and everything.

00:03:29 And the whether or not batteries included and things like that and how to sustain it.

00:03:34 So one of the things that I guess I kind of forget that Django will be 20 years old.

00:03:39 Nick's birthday is 20 years ago or 20 years.

00:03:42 That's a pretty long time.

00:03:44 So it must be 19 now.

00:03:45 And that's a long time.

00:03:48 And so one of the sustainable abilities, sustainable parts is that there's lots of stuff there.

00:03:54 There's like this idea of the it's the web framework for perfectionists with deadlines.

00:03:59 And it's also the batteries included framework, but not too many batteries.

00:04:04 So there's a small core.

00:04:06 And then also talking about like a lot of people understand that the power of Django isn't really just the core.

00:04:15 It's that you can get something up quickly with the core, but it's the all the plugins that are available because the ecosystem is a plugin architecture.

00:04:23 And the so what is this talking about?

00:04:26 A lot of people don't realize that there's just a few people working.

00:04:31 I mean, it's not a huge team for how many people are using Django.

00:04:34 There's one and a half.

00:04:36 I'm trying to find it.

00:04:38 I like this.

00:04:38 Anyway, we'll get to that.

00:04:40 There's one and a half.

00:04:42 Wait, wait, we can't just go right past it.

00:04:43 This is a this is a this is great.

00:04:47 Pinky in the brain reference.

00:04:49 Amazing.

00:04:49 Yeah.

00:04:50 Pinky in the brain.

00:04:51 I love them.

00:04:51 OK, so G brain.

00:04:53 What are we going to do tonight?

00:04:54 Same thing we do every night.

00:04:56 Pinky.

00:04:56 Try to get our package into Django core.

00:04:58 This is hilarious.

00:05:01 So the idea is it's difficult to get features into Django core, but maybe you don't want to.

00:05:07 Somebody I can't remember the attribution.

00:05:12 It's listed in here, but somebody mentioned that core is where plugins go to die and which is a little harsh.

00:05:19 But I people need to understand that if you get your feature in core, it doesn't change very frequently.

00:05:25 Then they do.

00:05:27 They do a deprecation release like every two years.

00:05:31 So if if you want to deprecate a feature, it's two years.

00:05:34 If you want to add something new, it's a slow process.

00:05:37 There's a lot of testing involved.

00:05:38 It's going to be way easier to get a new feature if it's in if it's in a plugin also.

00:05:44 And if we look back, I mean, thinking in the future, like we might.

00:05:48 One example here was I'm not going to try to find it, but one example was XHTML or X.

00:05:55 Yeah, that's right.

00:05:56 XHTML.

00:05:57 Super awesome.

00:05:58 A lot of people are using it.

00:06:00 Should that be part of supported natively in core?

00:06:03 Well, we look back a few years.

00:06:06 It would have been like React or something.

00:06:09 Should should Django natively support React?

00:06:11 Glad they chose no.

00:06:13 Now, XHTML might be the next no in a few years.

00:06:18 We never know.

00:06:20 Also, yeah, there's a lot of examples around that.

00:06:23 Django REST framework.

00:06:24 I kind of forget that that's not a core thing.

00:06:27 That's a it's just one of the really popular plugins.

00:06:30 But there's like Django Ninja that is that is awesome also.

00:06:35 And maybe it wouldn't exist if Django REST framework was part of the core.

00:06:40 So the ecosystem is great.

00:06:42 But there is there is a tension there that I like this.

00:06:46 The discussion of is that Django, even the Django website doesn't like the team doesn't like to to like pick the plugins that everybody should use or the winner plugins, because that's kind of like bringing in a decor.

00:07:01 That's that kind of reduces the competition and the ecosystem.

00:07:05 But at the same time, it's hard as a beginner to jump in and say, OK, so what know really what plugins should I be using?

00:07:12 And there isn't a should for everybody, of course.

00:07:15 But I think there I guess this I enjoyed this discussion.

00:07:19 It's around how how should we support the ecosystem while not squelching the ecosystem?

00:07:25 So anyway, I I saw corollars between this and pytest as well, because pytest has the same sort of issue that it's there's a there's a core.

00:07:35 And there's things in the core that I wish weren't there.

00:07:37 And there's things that are out of the core that I think maybe should be.

00:07:41 And and so everybody's going to have those opinions and dealing with whether or not you sanction a plugin or not.

00:07:50 That's a it's a troubling thing for every every system.

00:07:54 So anyway, it's a it's a tough tension.

00:07:56 So anyway, out in the audience, we got you have any says it's great to see Django now got task you feature added.

00:08:03 No need for celery anymore.

00:08:05 Here it is.

00:08:06 Right.

00:08:06 Yeah.

00:08:06 It's awesome to be able to just say, no, we can run stuff asynchronously.

00:08:09 We don't need a mega infrastructure like maybe just an async loop or a thread or, you know.

00:08:15 Yeah.

00:08:15 On the other hand, it's it's weight that's permanently on Django now.

00:08:20 Right.

00:08:20 Yeah.

00:08:21 Yeah.

00:08:21 Yeah.

00:08:21 Yeah.

00:08:21 Yeah.

00:08:21 And another little comic that was in there is this is this comic of how you think happens open source apps are maintained.

00:08:29 And there's a picture of like tons of people hanging out, drawing on whiteboards and talking and stuff.

00:08:36 And the reality is one dude in a basement saying just one more ticket before I go to bed.

00:08:43 So.

00:08:44 Yeah.

00:08:45 Yeah, absolutely.

00:08:46 Let's go to the future.

00:08:47 Okay.

00:08:48 Where we're going.

00:08:48 We don't need roads.

00:08:50 We're going to go to the future pool.

00:08:52 This one comes to us from Pat Decker.

00:08:54 Thank you, Pat.

00:08:55 So this is an interesting idea about library that allows you to do multi processing type of work, but with asyncio.

00:09:05 One of the challenges with asyncio is you can overwhelm the system and it does not.

00:09:11 What's the term?

00:09:12 I think you would say it doesn't feel back pressure.

00:09:14 So let me give you an example.

00:09:16 If you're doing regular programming where you call a function in a blocks, I'm calling it writing a database query and it stays there until the response until the database gets back to you.

00:09:26 Right.

00:09:26 Well, the database is busy.

00:09:27 That slows down the part of the code that's calling the database.

00:09:31 Right.

00:09:31 The code is calling the part of the code that's calling database in.

00:09:35 It kind of backs up the entire system and slows it down.

00:09:37 But with asyncio, you're just sort of throwing more work at it and then carrying on.

00:09:42 So you can go make even more work for it.

00:09:44 Right.

00:09:44 So one of the challenges of asyncio is you can just overwhelm the system.

00:09:48 If you know, Hey, we really can only take 10 concurrent requests, but if it gets over that, it's going to be a problem.

00:09:54 It's challenging to set that limit.

00:09:56 Okay.

00:09:56 So that's kind of what this feature pool thing does.

00:09:58 It's, it's cool.

00:09:59 It's a small use case because the way that you use it, but still it's, it's cool.

00:10:03 So in multi-processing, this is the traditional, I create the processes because Python has this thing called the GIL and we can't really do computational parallelism.

00:10:12 So we're going to do it this way.

00:10:14 So what you can do is say, Hey, maybe we only have two cores or I only want to consume two cores or whatever.

00:10:18 So you can say with pool of two workers, create no more than two processes, just sort of like start processing as many requests as you have, but only take them two at a time.

00:10:29 As one gets done, get the next and just keep going until you're out.

00:10:31 Right.

00:10:31 Yeah.

00:10:32 So that's what this idea of future pool is, but for asyncio.

00:10:35 So you can say async with future pool of however many you want.

00:10:39 And then you can await future pool map, some function over some block of work.

00:10:44 Simple, but interesting, right?

00:10:45 Yeah.

00:10:46 And this way it will stop the caller.

00:10:48 Can't go on anymore.

00:10:49 Then while it's, it's sort of limiting.

00:10:53 So why do I say this is pretty limited and why, why would it be better?

00:10:57 How could it be better?

00:10:58 So this is a local little thing that you create in one function once and it, it does the work.

00:11:06 Also, you can't just say, run this task asynchronously.

00:11:09 You have to use this map reduce pattern on it.

00:11:13 Yeah.

00:11:13 Which is not a normal programming thing.

00:11:15 It's not like I'm calling this function.

00:11:17 I'm awaiting that.

00:11:17 I'm calling that function.

00:11:18 I'm awaiting that.

00:11:18 What would be awesome is if some way you could go and say for this program or, or this thread,

00:11:26 or maybe not ideal, but maybe even for this event loop, I don't care how work gets to it.

00:11:30 Let's limit it to five at a time.

00:11:32 So if a web request kicks something off, awesome.

00:11:34 It's, it, it goes into that thing that's limited by five concurrent requests.

00:11:38 If I say, await something I call, it's also participating in this, this pooling, throttling,

00:11:45 limiting type thing.

00:11:45 But asyncio, as far as I know, doesn't have that concept.

00:11:48 So maybe this could both be useful for some folks and motivation for someone to create

00:11:54 something really interesting that is a little more broadly useful.

00:11:56 Yeah.

00:11:57 It's probably dangerous to architect on the fly here, but isn't there like something that

00:12:04 you've used before that is async sometimes that.

00:12:08 Yeah.

00:12:08 I used unsync, U-N-S-Y-N-C, which is pretty interesting.

00:12:13 And that would be, that would certainly be possible to do that because what that does is that converts

00:12:18 or processes all the asynchronous requests everywhere into a single loop on a single background thread.

00:12:24 No.

00:12:25 Yeah.

00:12:25 Possibly that.

00:12:27 I was just thinking a similar model of you'd want to, you'd want to like give work to this,

00:12:32 this system.

00:12:33 Exactly.

00:12:33 And have it be async until it can't be, and then have it block.

00:12:38 Mm-hmm.

00:12:38 I see.

00:12:39 Yeah.

00:12:39 Yeah.

00:12:40 Yeah.

00:12:40 Yeah.

00:12:41 That would be great.

00:12:41 The problem is I think it really needs something a little bit lower level than people can build

00:12:47 packages for.

00:12:48 Yeah.

00:12:48 It kind of needs to be part of, you know, part of Python itself.

00:12:51 There is UV loop.

00:12:53 Part of the cohort.

00:12:53 Yeah.

00:12:54 Part of the, wait, here we go again.

00:12:56 So it needs to be something that is the loop itself almost as work gets added to it.

00:13:01 Right.

00:13:02 But, you know, UV loop can replace the regular asyncio loop, which is generally a good idea

00:13:06 when possible.

00:13:06 But so maybe, maybe it's, it's that level that you got to work at.

00:13:10 Maybe we could look, look in that realm and, and see what we could do.

00:13:13 Because it would be really cool to say, hey, this thing can handle all, all the concurrency

00:13:16 you want to throw at it, but it's only going to pass it on or you execute it more 10 at

00:13:21 a time or something like that.

00:13:22 Yeah.

00:13:23 Anyway.

00:13:23 Oh dear.

00:13:24 People can go to the future with future pool and check it out.

00:13:27 And maybe it's useful for your project.

00:13:29 Yeah.

00:13:29 It's funny.

00:13:30 You said UV loop and I'm like, UV has loops.

00:13:32 Oh no.

00:13:33 UV loop was a thing way before UV.

00:13:35 Yeah.

00:13:35 UV loop was a, yeah.

00:13:37 Magic stack, right?

00:13:38 UV loop's been around.

00:13:39 I don't know how long it's been around, but at least three years.

00:13:42 At least eight years.

00:13:43 Oh, sorry.

00:13:43 Yeah.

00:13:44 At least eight years.

00:13:44 So that's longer than UV.

00:13:46 Yeah.

00:13:46 Yeah.

00:13:47 Anyway.

00:13:47 Okay.

00:13:48 Yeah.

00:13:48 All right.

00:13:49 Over to you.

00:13:49 I want to go to an article called, from Brett Cannon, called Don't Return Named Tuples

00:13:55 in New APIs.

00:13:57 It's a simple sort of thing, but it's, it's a good thing to, to remind people of.

00:14:02 So first off, I want to thank Brett for using the term API in a sense of the API for a method

00:14:10 or for a function or for a class or module and not necessarily an API for a REST API.

00:14:16 We're not talking about REST APIs or web APIs, talking about good old function, just good

00:14:22 old APIs.

00:14:23 Anyway.

00:14:24 So the idea is named tuples are kind of awesome and they're fun because you can just in one

00:14:30 line say, Hey, I've got like, say a point and it's, it's cool.

00:14:36 And why would I return that where I turn a named tuple is because something like that, like a

00:14:40 point.

00:14:41 So that it's obvious that people can access X, Y, Z or whatever.

00:14:44 And, and in some things like point, it's easy to, you know, or get mouse position, you know,

00:14:51 it's an X, Y coordinate.

00:14:52 So X and Y are probably there.

00:14:55 However, so why, why would you not want to use this?

00:14:58 And he's arguing that, and I kind of agree is that it's really easy to implement something

00:15:05 with a named tuple.

00:15:05 But now you've got to support both index based index access, like a tuple or named access as

00:15:14 if it was a dictionary.

00:15:15 So having both index access and name access is probably not what you meant.

00:15:21 And I think I've seen this a lot of people assume once it's a named tuple, people are

00:15:26 going to use the name, but it's also a tuple.

00:15:28 So you can use it, you can slice it and I'll do all sorts of stuff.

00:15:32 So the, and it's really just to get around like to not have to do a class, but classes are

00:15:39 easier now.

00:15:40 So there's some alternatives to alternatives to named tuple.

00:15:44 You can return a data class and that would be something I'd grab possibly data class or a

00:15:51 dictionary, dictionary would work fine or typed dict.

00:15:54 The, one of the things that is nice about a typed dick is dict is that you get editor

00:15:59 support as well, because you've got the types defined in there.

00:16:02 and then something new to me, which I'm going to have to play with is a simple namespace,

00:16:07 which gives us the ability to, to access the names, but, it's not indexable.

00:16:15 I haven't played with a namespace, simple namespace.

00:16:18 So I'll have to do that.

00:16:20 I haven't heard a simple namespace either.

00:16:21 And I haven't really used type dict.

00:16:23 well, they both are good options.

00:16:25 I haven't either.

00:16:26 I like kind of jumped on the, data class, bandwagon, and use data classes a lot

00:16:31 now, because I do think about that is, is actually, I, I need to think about it more,

00:16:37 but I, I haven't really been using named tuples to return stuff.

00:16:40 but so the, so what's the recommendation really is just be careful.

00:16:44 and, I'll read his quote.

00:16:48 He said, my key point in all of this is to prefer readability and ergonomics over brevity in your

00:16:53 code.

00:16:54 that means avoiding named tuples, except when you're expanding or tweaking in an existing

00:16:59 API where the named tuple improves over the plain tuple that is already being used.

00:17:05 So if you're art and that's, I guess that that's something I think I have done.

00:17:09 If, if you are, the return value was a tuple before it's been a tuple for a long time, there's

00:17:16 existing code using it, but it really should have been a named something.

00:17:19 adding, adding a named tuple allows people to use both.

00:17:24 and that might be ergonomically better.

00:17:26 The, but, the caveat really is you've got a lot of testing to do because you've got

00:17:32 to test both accesses now.

00:17:34 So, test more.

00:17:35 So, okay.

00:17:36 Awesome.

00:17:36 Yeah.

00:17:37 That's a good article blog, Brett.

00:17:38 No surprise there.

00:17:39 No surprise.

00:17:40 Okay.

00:17:41 Let's talk about a different programming language, but I think this is interesting and interesting

00:17:46 perspective.

00:17:46 Okay.

00:17:47 So the Zig programming language, are you familiar with Zig?

00:17:50 No.

00:17:50 I, it's kind of new to me as well.

00:17:53 If you go and look at some examples here, it looks, I think it looks a little like rust

00:17:58 like, I'm not sure, but we go down, it's, it does a lot of, simple things like

00:18:02 it interoperates really quickly and easily with, either C or, or windows APIs or stuff

00:18:08 like that.

00:18:08 But yeah, it looks, it looks pretty approachable, but it's a low level level, low level programming

00:18:13 language like here arrest.

00:18:15 Right.

00:18:15 What are those, what are all those, semicolons and curly braces doing in my code?

00:18:20 I know I, you probably delete them.

00:18:21 I don't think you really need it.

00:18:22 So here's the interesting thing.

00:18:26 They recently were spending quite a bit of money on AWS and they've decided that they would be

00:18:33 better off not spending their supporters money on hosting.

00:18:37 So for example, they said the rust foundation reports that it spends $404,000 on infrastructure

00:18:43 websites and stuff like that.

00:18:45 And probably mostly packages.

00:18:47 And it says, we don't really know anything about PI PI and Python.

00:18:50 Like what does python.org cost to run?

00:18:53 And mostly because that's a lot of the infrastructure costs are donated.

00:18:58 They said, look, as this language is growing, we don't really want for that to be our issue.

00:19:03 So they were getting upwards of a thousand dollars a month for their AWS bill, which is

00:19:07 not insane, but for an open source project.

00:19:10 Yeah.

00:19:10 Yeah.

00:19:11 It's kind of up there.

00:19:12 But what they said is look, zigling.org.

00:19:14 That's their equivalent of python.org.

00:19:16 It says, this is not an essential service.

00:19:18 It's not an emergency if it goes down and 99% uptime is perfectly fine.

00:19:23 It's the last 1% of uptime that represents 99% of the costs, which is pretty interesting.

00:19:29 So they said, look, we got a $36 Hetzner server.

00:19:32 Which comes with 20 terabytes.

00:19:35 I think 20, at least 20 terabytes of bandwidth, which is about $2,000 of AWS bandwidth included

00:19:41 for the $36.

00:19:42 And maybe someday we'll go crazy and spend a hundred or 200 bucks, but we don't need to

00:19:45 do more than that.

00:19:46 Like this, this is enough.

00:19:47 Right.

00:19:48 And so what are they doing instead?

00:19:50 They're saying one, they're encouraging and setting up a system that has package mirrors.

00:19:56 Right.

00:19:57 Remember we talked about that PEP that would basically sign wheels and then allow them

00:20:02 to be hosted somewhere else as long as the signature still matches.

00:20:05 So they're doing that kind of stuff from the start.

00:20:07 They're like, we can spread this out in a distributed style.

00:20:10 So no single thing has taken a huge hit.

00:20:13 And if it fails in one place, the equivalent of pip could say, well, let's try a mirror

00:20:17 or something like that, you know?

00:20:19 Yeah.

00:20:19 And yeah.

00:20:21 Anyway, so they're like, all right, well, 36 bucks a month.

00:20:23 And on top of that, what were they doing before?

00:20:25 AWS is what they were doing before, I believe.

00:20:28 So on AWS, if they wanted to push out a new website deploy, it took five minutes to push

00:20:33 it out, deploy, go through all the stuff just to get it up.

00:20:35 And on their little Hetzner server, it takes zero, takes two seconds.

00:20:39 It's so crazy.

00:20:41 To set up the job.

00:20:42 Yeah.

00:20:42 Yeah.

00:20:43 Basically to call start and then off it goes, right?

00:20:45 There's probably something like check every second.

00:20:47 There's a new job or whatever.

00:20:48 Anyway, I think this is a, you know, packaging is a big conversation.

00:20:52 Cloud, no cloud is a big conversation.

00:20:55 Costs and risks like the black swan of, well, what if the people backing Pythons, especially

00:21:01 PyPI, that infrastructure, what if they decided to stop?

00:21:04 Like how do you get a hundred thousand dollars a month all of a sudden?

00:21:07 Yeah.

00:21:07 You know, that's a big deal.

00:21:08 I think people would figure it out, but it would be a big disruption where like, okay,

00:21:12 what are we going to set up?

00:21:13 And this PEP with self-hosted wheels is like a done, a bit of a deposit down on that.

00:21:18 But anyway, this is interesting from a growing, but not yet super popular language.

00:21:23 Yeah.

00:21:24 Interesting.

00:21:24 Cool.

00:21:25 Indeed.

00:21:26 And all the curly braces and stuff were because it's mentioned by Corky that it's also interoperable

00:21:34 with C.

00:21:34 So that's interesting.

00:21:35 Cool.

00:21:36 Yeah.

00:21:36 Yeah.

00:21:36 It says it's more like C.

00:21:38 I suppose so.

00:21:39 It's, it's an interesting link.

00:21:40 All right.

00:21:41 Well, that's it for our main topics.

00:21:43 Got any extras?

00:21:44 I just have one extra that's going on.

00:21:47 I wanted to let people know about.

00:21:48 on, at the testing code, Python test.com.

00:21:52 I've got courses and, and that's, they're going well and I'm glad people are getting

00:21:58 value.

00:21:59 But I also had a community and the community have a community, but it, it used to be on Slack,

00:22:04 but it's one of those growth things.

00:22:06 Slack was, it was free on Slack and now it's not.

00:22:09 and so we switched to a Podia based forum and it's just not fun.

00:22:16 So, and, I mean, great that Podia offers a forum since the courses are on Podia,

00:22:22 but the, I'm going to say after several months of being on Podia and only like five

00:22:29 comments on there, it's not, it's just not cutting it.

00:22:32 It's not sparking joy.

00:22:33 No.

00:22:33 So we're going to, we're going to try discord and, and so just, I guess,

00:22:40 hang in there, everyone.

00:22:41 I'm trying to trying to get it associated so that everybody has that has community access

00:22:46 will get access to the discord server.

00:22:48 And, I'll probably, I don't know what we're going to do.

00:22:52 I want it to be sustainable.

00:22:53 So it can't just be completely free.

00:22:55 but I also want it to, and, but I want it to be something that's easy for everybody to

00:23:00 get into.

00:23:01 So I guess, just stay tuned.

00:23:03 we'll get that all ironed out as soon as we can.

00:23:06 So anyway, any extras from you?

00:23:08 Yeah, I got a few.

00:23:09 It's, it's tricky, right?

00:23:10 You want to pick something where people already are.

00:23:13 Like they've got some app like Slack or discord or something open.

00:23:16 There's a lot of cool options that you could pick even some neat self hosted ones.

00:23:21 But if it's a completely different app that people have to remember to open instead of

00:23:25 just another tab next to the thing they're already in, I think it's, it changes it, you

00:23:29 know?

00:23:30 So there's a problem.

00:23:30 Like, for example, they got to go to podium versus like, oh, I'm over on this thing.

00:23:33 And now I just go to the next tab open to see what's happening in this community.

00:23:37 Yeah.

00:23:38 So, and I even like when I mentioned it to my, so my daughter's in healthcare, she's not

00:23:43 even like my oldest daughter.

00:23:45 And, and, and I mentioned it to her and she's like, oh, I can help you with that.

00:23:48 I'm on discord all the time.

00:23:50 I'm like, oh, okay.

00:23:51 great.

00:23:52 So that's awesome.

00:23:53 I love it.

00:23:54 All right.

00:23:55 I got some extras.

00:23:55 Okay.

00:23:56 One, still, still living the Zen, Zen browser lifestyle.

00:24:00 It's, it's pretty good.

00:24:01 So I'm going to keep going with that.

00:24:03 That's fun, but that's not actually an extra.

00:24:04 First extra is I was on the work item podcast talking with Dan over there for an hour about

00:24:11 Python and business and stuff.

00:24:13 And people can check that out if they want.

00:24:14 That's fun.

00:24:15 Neat.

00:24:15 Yes.

00:24:16 I feel like I, let me know if I talked about this before, Brian, I searched and searched

00:24:21 and couldn't find it, but in my mind, we talked about, did, did I talk about the fact

00:24:24 that you can subscribe as an RSS to GitHub releases?

00:24:28 I don't know.

00:24:29 I don't think so.

00:24:30 Cause I couldn't find it in my mind.

00:24:31 I did.

00:24:32 But anyway, if you go to any release and you just type dot Adam on the end, what you get

00:24:38 is a popular download window instead of showing it, but it gives you an RSS feed.

00:24:42 So go to your project.

00:24:43 You like click on the releases and put dot Adam on the end.

00:24:46 And you can put that in your RSS feeder reader.

00:24:48 So that'll pop up if you like, Hey, there's a new release of this thing that I'm interested

00:24:52 in.

00:24:52 That's pretty cool.

00:24:53 And then let me make sure I attribution, right.

00:24:58 This is Jamie Thompson.

00:24:59 So this over and said, there's a new release of PI test BDD behavior driven design in not

00:25:05 just a new release, but 8.0, which is a big release.

00:25:08 Right.

00:25:08 And probably the most interesting thing is the data tables.

00:25:11 Have you seen these data tables?

00:25:12 That's neat.

00:25:12 It's kind of like a parameterized query, but it's also kind of like a markdown table.

00:25:18 Given the following users exist.

00:25:19 And then you just have pipe, you know, a header pipe name, pipe email, pipe Twitter,

00:25:23 and then values just row, row, row, row, row.

00:25:26 That's pretty neat.

00:25:27 Yeah.

00:25:27 Yeah.

00:25:27 All right.

00:25:28 So anyway, if people like their BDD, they can check out my test BDD.

00:25:33 That's pretty cool.

00:25:34 Also last week I rewrote all the code.

00:25:38 I did a little terminal CLI magic and there are a little over 10,000 lines of Python code

00:25:45 that don't involve blank space.

00:25:47 So meaningful lines for talk Python and Python bytes a little bit less, but not tremendously

00:25:52 less.

00:25:52 I rewrote that in court, which is asynchronous flask, which was pretty awesome.

00:25:58 So this thing is, is running a little more efficiently, a little bit faster, a little bit better than

00:26:03 it was before.

00:26:03 And completely rewriting 10,000 lines of code in two days is, is quite a, quite an undertaking.

00:26:09 You're tired at the end of that.

00:26:10 Let me tell you.

00:26:12 But it's awesome.

00:26:13 It came out really, really well.

00:26:14 I did it in two rewrites, actually.

00:26:15 One rewrite to just convert it from pyramid to flask, and then a second rewrite to convert

00:26:20 it from sync to async for almost every endpoint and all the code below it and all that, all the

00:26:25 database queries and stuff like that.

00:26:26 So did it affect like everything or did it, what were the main parts?

00:26:30 There were, there was, there's certain parts that it doesn't affect, but anything with database

00:26:35 access required it.

00:26:37 And then there's, there's all in, in web frameworks, when you're writing web apps, you're always

00:26:41 dealing with little aspects of that's frameworks API.

00:26:45 So I need to get the, the URL of the current request to see if I should do a redirect or

00:26:51 not.

00:26:52 Well, the way you get the URL is completely different in pyramid versus flask.

00:26:56 So anything that kind of touched headers, cookies, URLs, you know, if you want to know if somebody's

00:27:02 logged in and that's, you know, that's also a cookie, right?

00:27:05 There's, it's surprisingly knock on effects and flask and quartz a little bit funky in

00:27:11 some ways where there's this thread local requests that you can just access out of thin air,

00:27:15 which is cool.

00:27:16 Unless for some reason the call started here and it ends up over there.

00:27:19 Maybe there was a thread or some kind of delay where that's become disconnected that it'll

00:27:25 complain to you that it doesn't know what the request is, even though you have a request

00:27:28 object.

00:27:28 Like there's a lot of weird changes.

00:27:30 So yeah.

00:27:31 But anyway, it was really fun.

00:27:32 I'm doing a write-up on that, but I just thought I'd throw that out there and that's going

00:27:35 well.

00:27:36 Cool.

00:27:36 And that's it.

00:27:37 Shall we, shall we tell a joke?

00:27:39 A joke would be wonderful.

00:27:40 This one, we've done short form jokes and we've done long form jokes, Brian.

00:27:44 This might be the best long form joke.

00:27:47 So y'all are going to have to stick with me for just a second here, but check this out.

00:27:51 Here's the breaking headline.

00:27:53 Breaking.

00:27:53 JavaScript developer commits to a framework for a record-breaking three weeks.

00:28:00 Of course, it comes with a picture of a clown luring JavaScript developers into some shady

00:28:05 spot.

00:28:05 But let me read the press release, okay?

00:28:07 Simi Valley, California.

00:28:08 In an unprecedented display of consistency that has left the tech world reeling, local web

00:28:14 developer Alex Chen, 28, has reportedly stuck with the same JavaScript framework for an astonishing

00:28:19 three weeks.

00:28:19 Chen, known in the local dev circles as the framework whisperer, or his abilities to adopt

00:28:24 and discard JS frameworks at breakneck speeds, has been using Svelte without interruption since

00:28:31 August 1st, shattering his previous record of four days set with Vue.js back in 2022.

00:28:36 I don't know what came over me, Chen said, visibly shaken by his own stability.

00:28:41 I woke up one morning and I just don't feel like switching to Angular or React or that new

00:28:45 framework that was released during the interview.

00:28:46 The news has sent shockwaves through the JavaScript community.

00:28:50 Framework creators are reportedly in crisis mode, with one ace anonymous source from a

00:28:56 major tech company stating, if developers start sticking with one framework, how will

00:29:00 we justify our jobs?

00:29:01 Chen's colleagues have expressed a mix of awe and concern.

00:29:05 Senior developer Lisa Patel noted, I'm worried about Alex.

00:29:08 Yesterday, I caught him reading the documentation instead of immediately rewriting our entire

00:29:12 code base in a new framework.

00:29:14 It's not like him at all.

00:29:15 The unprecedented event has not been without its challenges.

00:29:19 Chen admitted to suffering from withdrawal symptoms, including uncontrollable urges to

00:29:24 create new NPM packages and a persistent eye twitch triggered by the site of a stable

00:29:30 well-maintained code.

00:29:31 Despite the difficulties, Chen remains committed to seeing this through.

00:29:34 Taking it one day at a time, he said, his fingers twitching as he resists the urge to type

00:29:38 NPX create next app.

00:29:39 But I've heard whispers of a revolutionary new framework that's only been downloaded 50 times.

00:29:44 Maybe I'll check it out, you know, just to stay informed.

00:29:47 Good, right?

00:29:49 That's funny.

00:29:50 Yeah.

00:29:51 You got to appreciate the stability.

00:29:53 Appreciate the stability of Django, of Python, of a lot of things that we got.

00:29:57 I mean, it's a joke, but it's also true that there's a lot of churn on that space.

00:30:03 Yeah.

00:30:03 I mean, like how many people here are like, should I stick with Python or should I go to

00:30:07 Zig now?

00:30:08 Yeah, I know.

00:30:09 Well, we might have just, we might have sent a whole bunch of people over there unintentionally.

00:30:13 That wasn't the intention.

00:30:13 I mean, Zig has a lot less.

00:30:16 I mean, I don't think tractor when I think Zig, but Rust kind of.

00:30:20 Yeah, true.

00:30:21 Well, and if you want to make sure you're alphabetically sorted to the very end, right by the comment

00:30:26 section, Zig.

00:30:27 Yeah.

00:30:27 So people just like change frameworks by the alphabet and then they turn out.

00:30:31 You get to the end.

00:30:33 They're like, well, there's nothing left to change.

00:30:34 They're over here.

00:30:35 Nice.

00:30:37 Well, always, always lovely to have you here.

00:30:39 Thanks.

00:30:40 Thank you.

00:30:40 Yep.

