WEBVTT

00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:11.760
This is episode 343, recorded July 11th, 2023, and I am Brian Okken.


00:00:11.760 --> 00:00:13.040
And I am Michael Kennedy.


00:00:13.040 --> 00:00:17.920
That's pretty exciting to be here. If you're listening to the show, thank you.


00:00:17.920 --> 00:00:22.560
And also, if you'd like to watch and participate, ask questions or whatever,


00:00:22.560 --> 00:00:26.640
you can do that by going to pythonbytes.fm/live.


00:00:26.640 --> 00:00:29.520
And we'd love to have you, even if it's just once in a while.


00:00:29.520 --> 00:00:37.740
Yeah, sometimes people show up in the live stream that will possibly get their projects will actually get mentioned as well.


00:00:37.740 --> 00:00:39.240
And that's always kind of interesting.


00:00:39.240 --> 00:00:41.160
I'm feeling this might happen today.


00:00:41.160 --> 00:00:41.580
Yeah.


00:00:41.580 --> 00:00:46.380
Speaking of that, Seth Larson showed up and we have some Seth Larson news to share.


00:00:46.380 --> 00:00:47.300
So that's cool.


00:00:47.300 --> 00:00:48.460
Hey, Seth.


00:00:48.460 --> 00:00:52.040
Well, how would you like to start us off today, Michael?


00:00:52.040 --> 00:00:55.760
I would like to start it with a version update.


00:00:55.760 --> 00:00:57.600
So let's talk about Pydantic.


00:00:57.600 --> 00:01:02.140
we talked about the Pydantic version 2 story and performance.


00:01:02.140 --> 00:01:05.180
So Pydantic got a major rewrite.


00:01:05.180 --> 00:01:07.140
This rewrite was, I don't know,


00:01:07.140 --> 00:01:09.780
maybe a year in undertaking,


00:01:09.780 --> 00:01:11.940
a year-long undertaking, quite massive.


00:01:11.940 --> 00:01:15.500
Got its internals rewritten in Rust to be way faster.


00:01:15.500 --> 00:01:18.840
We talked about the early alpha version of this,


00:01:18.840 --> 00:01:22.640
and the early alpha version had a 22 times speedup.


00:01:22.640 --> 00:01:24.380
Well, alpha no more.


00:01:24.380 --> 00:01:26.180
If you pip install Pydantic,


00:01:26.180 --> 00:01:28.220
you get Pydantic 2.


00:01:28.220 --> 00:01:30.020
So that's pretty exciting, right?


00:01:30.020 --> 00:01:31.680
- That's very exciting, yeah.


00:01:31.680 --> 00:01:33.820
- Yeah, so there's a blog post that says


00:01:33.820 --> 00:01:37.300
the last few months have involved a whirlwind of work.


00:01:37.300 --> 00:01:40.140
And finally, we're ready to announce version 2.


00:01:40.140 --> 00:01:43.780
So you get started by just installing it, upgrading it,


00:01:43.780 --> 00:01:45.800
requires Python 3.7 and above.


00:01:45.800 --> 00:01:48.540
So honestly, that's a pretty old bit of Python


00:01:48.540 --> 00:01:50.200
that you can be based on there.


00:01:50.200 --> 00:01:51.060
That's great.


00:01:51.060 --> 00:01:53.660
Now, there's some pretty major changes


00:01:53.660 --> 00:01:57.760
in terms of the API, I guess you would call it,


00:01:57.760 --> 00:02:00.560
the way that you work with Pydantic, right?


00:02:00.560 --> 00:02:03.200
In some cases, the way you work with base classes


00:02:03.200 --> 00:02:06.240
or the functions you call and all those things.


00:02:06.240 --> 00:02:08.060
So there's a migration guide


00:02:08.060 --> 00:02:09.860
that we can use to go through that.


00:02:09.860 --> 00:02:12.860
And if you check out the migration guide,


00:02:12.860 --> 00:02:14.720
you'll see, let's go like this.


00:02:14.720 --> 00:02:16.120
You got the migration guide.


00:02:16.120 --> 00:02:19.880
It starts by recommending this thing called Bump Pydantic.


00:02:19.880 --> 00:02:22.640
And I guess I should probably also just let you know,


00:02:22.640 --> 00:02:25.520
like this is like a big Pydantic episode


00:02:25.520 --> 00:02:27.320
that we're gonna be covering a lot of Pydantic things.


00:02:27.320 --> 00:02:29.960
So there's this thing called bump Pydantic.


00:02:29.960 --> 00:02:33.620
And what you can do is you can run it against your project


00:02:33.620 --> 00:02:35.880
and it will traverse all the code


00:02:35.880 --> 00:02:39.120
and find all of the Pydantic things,


00:02:39.120 --> 00:02:41.920
the classes and functions and so on


00:02:41.920 --> 00:02:44.600
that you might write with for your Pydantic code


00:02:44.600 --> 00:02:46.840
and it will upgrade them to the new thing.


00:02:46.840 --> 00:02:49.100
So we can check that thing out first.


00:02:49.100 --> 00:02:50.600
Basically a converter.


00:02:50.600 --> 00:02:52.760
It's like a two to three, but for Pydantic.


00:02:52.760 --> 00:02:54.680
It's like a one to two, I guess.


00:02:54.680 --> 00:02:56.080
And so it'll do things like,


00:02:56.080 --> 00:02:57.760
one of the things you should do


00:02:57.760 --> 00:03:02.240
is you should have explicitly set the default value.


00:03:02.240 --> 00:03:04.560
So previously you could have a class


00:03:04.560 --> 00:03:06.520
that give an example of a user that's a base model,


00:03:06.520 --> 00:03:09.320
you have a name and you say the name is an optional string.


00:03:09.320 --> 00:03:11.320
Well, now what you should write


00:03:11.320 --> 00:03:14.560
is name optional string equals none.


00:03:14.560 --> 00:03:17.240
So explicitly setting the default values


00:03:17.240 --> 00:03:19.520
when there's things like none, right?


00:03:19.520 --> 00:03:21.220
So if you run this code against it,


00:03:21.220 --> 00:03:23.180
it'll go and make those transformations.


00:03:23.180 --> 00:03:26.160
It also will replace the config class


00:03:26.160 --> 00:03:28.740
with a model config attribute.


00:03:28.740 --> 00:03:31.560
So you might've had an inner config class


00:03:31.560 --> 00:03:34.920
and now you have a model config


00:03:34.920 --> 00:03:36.920
where you set that to an instance


00:03:36.920 --> 00:03:39.180
of the same settings basically.


00:03:39.180 --> 00:03:41.680
So fewer inner classes,


00:03:41.680 --> 00:03:45.560
more just fields that make things happen, right?


00:03:45.560 --> 00:03:46.860
And a bunch of stuff like that,


00:03:46.860 --> 00:03:48.780
that you can run and it'll do that automatically.


00:03:48.780 --> 00:03:51.100
But this is, if you look at the migration guide,


00:03:51.100 --> 00:03:53.700
this is actually just scratching the surface.


00:03:53.700 --> 00:03:56.060
So there's a lot of other things


00:03:56.060 --> 00:03:57.580
that you need to be aware of.


00:03:57.580 --> 00:03:59.460
And I don't know how far they intend


00:03:59.460 --> 00:04:01.540
for this bump pedantic to go


00:04:01.540 --> 00:04:03.460
in trying to manage those things.


00:04:03.460 --> 00:04:04.300
But for example--


00:04:04.300 --> 00:04:06.060
- It's pretty cool that they have it though.


00:04:06.060 --> 00:04:07.860
- It is pretty cool they have it, yeah.


00:04:07.860 --> 00:04:08.980
Even it's a start, right?


00:04:08.980 --> 00:04:11.740
- Yeah, let people say,


00:04:11.740 --> 00:04:13.140
here's the changes you have to make


00:04:13.140 --> 00:04:16.300
and also here's a tool that can do at least most of it.


00:04:16.300 --> 00:04:17.140
- Exactly.


00:04:17.140 --> 00:04:19.900
So there's things like in old Pydantic,


00:04:19.900 --> 00:04:21.180
you had a dunder fields.


00:04:21.180 --> 00:04:25.900
Now you have model fields as a field to the base class.


00:04:25.900 --> 00:04:27.780
You had dunder private attributes,


00:04:27.780 --> 00:04:29.860
and now you have dunder Pydantic private.


00:04:29.860 --> 00:04:32.180
And there's more relevant ones,


00:04:32.180 --> 00:04:33.660
like there was a copy function,


00:04:33.660 --> 00:04:35.420
and now there's a model copy.


00:04:35.420 --> 00:04:38.340
There was a dict, and now there's a model dump.


00:04:38.340 --> 00:04:40.540
So if you had a Pydantic model, you wanted a dictionary,


00:04:40.540 --> 00:04:41.540
you could just call dict on it.


00:04:41.540 --> 00:04:44.140
Well, that doesn't exist or is deprecated,


00:04:44.140 --> 00:04:46.860
and so now you have a model dump.


00:04:46.860 --> 00:04:48.260
They did say where possible,


00:04:48.260 --> 00:04:50.500
they've tried to retain deprecated methods


00:04:50.500 --> 00:04:52.900
with their old names for ease of migration,


00:04:52.900 --> 00:04:54.420
but you'll get deprecation warnings.


00:04:54.420 --> 00:04:58.580
So don't sleep on that 'cause one day they won't be.


00:04:58.580 --> 00:05:01.860
There's this a pretty significantly long document.


00:05:01.860 --> 00:05:04.340
I don't know how long it is, this migration guide,


00:05:04.340 --> 00:05:08.140
but there's a bunch of things you should just go through.


00:05:08.140 --> 00:05:13.140
I would just say, try to upgrade to Pydantic 2,


00:05:13.140 --> 00:05:16.420
run your code, see if you get any deprecation warnings.


00:05:16.420 --> 00:05:18.900
If it runs and you don't get them, you're probably fine.


00:05:18.900 --> 00:05:23.540
But if you get errors, then go consult a migration guide.


00:05:23.540 --> 00:05:25.740
If you get deprecation warnings, do the same,


00:05:25.740 --> 00:05:28.300
but maybe with slightly less urgency.


00:05:28.300 --> 00:05:30.860
So yeah, there's a bunch of stuff that you can go through.


00:05:30.860 --> 00:05:33.300
One of them was, one that's interesting


00:05:33.300 --> 00:05:36.380
is they introduced this thing called a type adapter.


00:05:36.380 --> 00:05:38.700
Let me see if there's a section where they talk about it.


00:05:38.700 --> 00:05:42.560
Yeah, so now they have this thing called a type adapter,


00:05:42.560 --> 00:05:43.440
which is pretty cool.


00:05:43.440 --> 00:05:45.020
They have some example, there we go.


00:05:45.020 --> 00:05:46.940
says in Pydantic version one,


00:05:46.940 --> 00:05:49.700
we had weak support for validating or serializing


00:05:49.700 --> 00:05:52.760
non-base model types, like a list of something.


00:05:52.760 --> 00:05:56.280
So now you can create this instance of a type


00:05:56.280 --> 00:06:00.360
called a type adapter, and you pass the type it adapts.


00:06:00.360 --> 00:06:03.360
So you can say a type adapter of list of int,


00:06:03.360 --> 00:06:06.360
and then you can just go to it and say validate Python.


00:06:06.360 --> 00:06:09.860
And for the example here, they have a list of numbers,


00:06:09.860 --> 00:06:11.900
but they're in strings, like the list,


00:06:11.900 --> 00:06:13.900
string one, string two, string three.


00:06:13.900 --> 00:06:16.860
and then what it gives you back is just the actual list,


00:06:16.860 --> 00:06:21.420
1, 2, 3, all that magical transformation that Pydantic is.


00:06:21.420 --> 00:06:22.620
>> That's pretty cool.


00:06:22.620 --> 00:06:24.900
>> Yeah. So that's another thing people can check out.


00:06:24.900 --> 00:06:26.940
Like I said, this is a huge document.


00:06:26.940 --> 00:06:28.780
People probably want to go check out.


00:06:28.780 --> 00:06:31.340
They've removed a whole bunch of error messages,


00:06:31.340 --> 00:06:33.580
or errors, sorry, error types like


00:06:33.580 --> 00:06:37.660
Pydantic.errors.ipv any interface error.


00:06:37.660 --> 00:06:40.860
I'm not sure where they went though.


00:06:40.860 --> 00:06:42.340
It doesn't explicitly say.


00:06:42.340 --> 00:06:46.420
and they were moved or re-mapped over to this other error type.


00:06:46.420 --> 00:06:48.540
But again, it's a huge document.


00:06:48.540 --> 00:06:50.960
I don't want to go through my migration guide for everyone.


00:06:50.960 --> 00:06:55.740
That's not fun. But congratulations to the Pydantic team.


00:06:55.740 --> 00:06:57.940
This is really awesome that this is finally here.


00:06:57.940 --> 00:07:00.900
Now, we come to the point where we wait.


00:07:00.900 --> 00:07:04.680
We wait for all of the Pydantic frameworks.


00:07:04.680 --> 00:07:06.580
Because working with Pydantic is great and you can do


00:07:06.580 --> 00:07:08.860
cool stuff with Pydantic directly like you can


00:07:08.860 --> 00:07:12.340
directly work with it in a flask app, for example.


00:07:12.340 --> 00:07:17.180
But if you work with FastAPI or beanie or all these other


00:07:17.180 --> 00:07:19.900
frameworks that are built on top of it, you got to wait for,


00:07:19.900 --> 00:07:21.860
you know, they're deep down in the guts of


00:07:21.860 --> 00:07:24.580
Pydantic a lot of times because of the way they work.


00:07:24.580 --> 00:07:26.940
Except for, now FastAPI though.


00:07:26.940 --> 00:07:28.780
FastAPI is already upgraded, right?


00:07:28.780 --> 00:07:29.900
Yeah, it, um...


00:07:29.900 --> 00:07:32.860
Is it released or just the beta is out for it?


00:07:32.860 --> 00:07:33.900
I can't remember.


00:07:33.900 --> 00:07:36.100
I think so. FastAPI released a


00:07:36.100 --> 00:07:40.260
version 0.100.0. Come on, guys, zero verse still.


00:07:40.260 --> 00:07:41.940
Anyway, four days ago.


00:07:41.940 --> 00:07:47.020
And it does look like the last five days ago,


00:07:47.020 --> 00:07:51.300
we got a merge for adding support for


00:07:51.300 --> 00:07:55.780
pedantic 2.002 or something.


00:07:55.780 --> 00:07:58.540
The first couple of versions for pedantic didn't work


00:07:58.540 --> 00:08:01.220
with fastAPI, but looks like there were some fixes.


00:08:01.220 --> 00:08:04.180
Wouldn't surprise me if they kind of just held off


00:08:04.180 --> 00:08:09.540
on announcing the version 2 until FastAPI was able to use it.


00:08:09.540 --> 00:08:12.180
Because that's a huge user of it.


00:08:12.180 --> 00:08:14.580
>> Yeah, it's certainly the biggest user.


00:08:14.580 --> 00:08:17.580
Samuel and Sebastian work pretty closely together.


00:08:17.580 --> 00:08:20.980
>> I'm excited. I know this is different.


00:08:20.980 --> 00:08:22.820
It might be difficult for people that are already


00:08:22.820 --> 00:08:26.820
using an old Bidantic to move over even with the bump.


00:08:26.820 --> 00:08:30.780
But I guess I haven't used Bidantic directly before,


00:08:30.780 --> 00:08:32.580
and now I'm excited to use it.


00:08:32.580 --> 00:08:37.660
even with tools like this auto thing that they're using.


00:08:37.660 --> 00:08:40.260
What was that? The auto changer?


00:08:40.260 --> 00:08:40.660
>> The bump.


00:08:40.660 --> 00:08:40.860
>> No.


00:08:40.860 --> 00:08:41.980
>> The bump identic?


00:08:41.980 --> 00:08:42.900
>> No, the one to like-


00:08:42.900 --> 00:08:44.100
>> Oh, the type adapter.


00:08:44.100 --> 00:08:45.380
>> Type adapter. Yeah.


00:08:45.380 --> 00:08:47.660
I think that I've got places to use type adapter


00:08:47.660 --> 00:08:51.500
even without non-web stuff.


00:08:51.500 --> 00:08:53.520
So I think that's pretty fun.


00:08:53.520 --> 00:08:56.100
Anyway, cool. I'm excited.


00:08:56.100 --> 00:08:58.780
>> Grant, the audience does point out,


00:08:58.780 --> 00:09:02.420
tough luck for base models with an existing model attribute.


00:09:02.420 --> 00:09:07.420
There might be some mechanism to rename that or remap that.


00:09:07.420 --> 00:09:10.800
You know, there's like an alias you can put on them,


00:09:10.800 --> 00:09:13.300
but you say, when you look in the data,


00:09:13.300 --> 00:09:15.600
it looks like this, even though the name is that,


00:09:15.600 --> 00:09:18.120
but yeah, there might be some trickiness here.


00:09:18.120 --> 00:09:18.960
- Yeah.


00:09:18.960 --> 00:09:21.080
- Yeah, at least at an API level, you could be able to fix it.


00:09:21.080 --> 00:09:22.560
I don't know about the Python code level,


00:09:22.560 --> 00:09:23.400
if that'll help you.


00:09:23.400 --> 00:09:25.960
All right, well, anyway, big news, big news.


00:09:25.960 --> 00:09:28.200
Pydantic version two is out.


00:09:28.200 --> 00:09:33.200
This was on June 30th, but we were off on vacation, Brian.


00:09:33.200 --> 00:09:37.120
Mostly my fault, sorry.


00:09:37.120 --> 00:09:37.960
- Well, actually--


00:09:37.960 --> 00:09:39.040
- So we didn't cover it.


00:09:39.040 --> 00:09:40.680
- It's all right, now that we covered it,


00:09:40.680 --> 00:09:43.240
now we can cover the FastAPIs cut up, so it's great.


00:09:43.240 --> 00:09:45.000
- Yeah, exactly, wait long enough things.


00:09:45.000 --> 00:09:46.500
It's coming together.


00:09:46.500 --> 00:09:49.960
- Well, I wanna talk about talks a little bit


00:09:49.960 --> 00:09:53.080
because I learned something new from Hinnick,


00:09:53.080 --> 00:09:54.480
which isn't that unusual.


00:09:54.480 --> 00:09:57.040
I often learn a lot of stuff from him.


00:09:57.040 --> 00:10:00.100
However, there's an article from him saying


00:10:00.100 --> 00:10:02.880
two ways to turbo charge talks.


00:10:02.880 --> 00:10:07.200
And it just starts right off the bat with saying,


00:10:07.200 --> 00:10:09.060
no, it's not just run parallel


00:10:09.060 --> 00:10:11.440
because actually running parallel is pretty cool.


00:10:11.440 --> 00:10:13.640
And if you don't know about running parallel,


00:10:13.640 --> 00:10:18.640
if you, I usually just use the talks-p to run parallel.


00:10:18.640 --> 00:10:22.700
If you can run all of your environments in parallel,


00:10:22.700 --> 00:10:25.320
it's super cool to be able to speed it up.


00:10:25.320 --> 00:10:28.840
That's the awesomest way to speed it up, I think.


00:10:28.840 --> 00:10:33.180
He does note that it's broken for some people.


00:10:33.180 --> 00:10:38.180
So Talks 4 is awesome and it's got some great new features,


00:10:38.180 --> 00:10:42.980
but apparently for some people, Parallel isn't working.


00:10:42.980 --> 00:10:44.460
I'm not one of those people.


00:10:44.460 --> 00:10:47.780
So most of my, all of my projects that can use Talks


00:10:47.780 --> 00:10:49.400
or Parallel seems to be working,


00:10:49.400 --> 00:10:51.260
but I'm not using something complicated.


00:10:51.260 --> 00:10:53.980
Apparently it's broken for adders, for instance,


00:10:53.980 --> 00:10:56.180
or at least it was last time I checked.


00:10:56.180 --> 00:10:58.340
Anyway, so what is he recommending?


00:10:58.340 --> 00:11:01.580
If it's not running in parallel, what should you do?


00:11:01.580 --> 00:11:04.660
This is something that I didn't really think about before.


00:11:04.660 --> 00:11:06.460
So one of the things that Tox does


00:11:06.460 --> 00:11:09.020
is for each environment that you set up,


00:11:09.020 --> 00:11:10.460
like say you've got environments


00:11:10.460 --> 00:11:12.360
for three versions of Python,


00:11:12.360 --> 00:11:18.360
and it will create a source distribution


00:11:18.360 --> 00:11:22.340
of your library or package for each of those.


00:11:22.340 --> 00:11:24.340
if you're doing a normal, like using talks


00:11:24.340 --> 00:11:26.420
to test a Python package.


00:11:26.420 --> 00:11:29.980
It'll build a source distribution for each environment.


00:11:29.980 --> 00:11:32.700
Except for that's not really how we use our packages.


00:11:32.700 --> 00:11:36.060
We build it once and throw it up on PyPI


00:11:36.060 --> 00:11:37.740
and everybody uses the same one


00:11:37.740 --> 00:11:41.660
if one supports all three versions of Python.


00:11:41.660 --> 00:11:44.900
So he's showing us a way to get around that


00:11:44.900 --> 00:11:48.140
to say instead of building it on all environments,


00:11:48.140 --> 00:11:50.020
go ahead and just build the wheel once.


00:11:50.020 --> 00:11:52.440
And so you tell it to build the wheel


00:11:52.440 --> 00:11:54.320
instead of a source distribution,


00:11:54.320 --> 00:11:57.240
and you tell it where to put it into,


00:11:57.240 --> 00:11:59.700
and there's apparently a command line way to do it,


00:11:59.700 --> 00:12:03.700
but really, it's, throw it in your toxini file.


00:12:03.700 --> 00:12:06.040
Or if you're using pyproject.toml,


00:12:06.040 --> 00:12:07.900
you can throw it there too, of course.


00:12:07.900 --> 00:12:11.660
But so there's a wheel build environment


00:12:11.660 --> 00:12:14.940
that tells tox what directory to stick it in.


00:12:14.940 --> 00:12:17.160
And if it's the same directory for everybody,


00:12:17.160 --> 00:12:19.460
it'll get used for all environments.


00:12:19.460 --> 00:12:23.400
And this alone sped up quite a few of my workflows,


00:12:23.400 --> 00:12:24.940
which is really cool.


00:12:24.940 --> 00:12:27.940
Just building it once, using it and testing it


00:12:27.940 --> 00:12:29.460
in different Python environments.


00:12:29.460 --> 00:12:30.940
- Yeah, that's really excellent.


00:12:30.940 --> 00:12:33.340
'Cause generally the wheel's not gonna vary


00:12:33.340 --> 00:12:35.620
from 3.9 to 3.10, right?


00:12:35.620 --> 00:12:37.100
- Right, yeah.


00:12:37.100 --> 00:12:40.300
In a lot of Python-only packages,


00:12:40.300 --> 00:12:43.020
you're gonna use the same wheel for everything.


00:12:43.020 --> 00:12:44.680
And now there are some that use,


00:12:44.680 --> 00:12:47.420
have different ones for different versions, I guess.


00:12:47.420 --> 00:12:49.780
None of the stuff I work with does.


00:12:49.780 --> 00:12:53.500
And they, okay, so that's the first way to speed it up.


00:12:53.500 --> 00:12:54.700
What's the second way?


00:12:54.700 --> 00:12:58.140
The second way is if you're in one of these camps,


00:12:58.140 --> 00:12:59.500
especially one of these camps


00:12:59.500 --> 00:13:02.440
where you can't run talks in parallel,


00:13:02.440 --> 00:13:04.740
you can still run pytest in parallel.


00:13:04.740 --> 00:13:07.620
So he's recommending using pytest xdist


00:13:07.620 --> 00:13:10.300
and run and then use as a plugin


00:13:10.300 --> 00:13:12.860
and then running pytest dash in auto,


00:13:12.860 --> 00:13:16.300
or you can give it a number of CPUs or whatever.


00:13:16.300 --> 00:13:20.500
And it's auto just says, pick the number of CPUs you want,


00:13:20.500 --> 00:13:22.220
and you can run pytest in parallel.


00:13:22.220 --> 00:13:25.140
This actually, if you have a fast test suite,


00:13:25.140 --> 00:13:26.820
this might slow down your tests.


00:13:26.820 --> 00:13:28.620
So be careful, measure it.


00:13:28.620 --> 00:13:33.180
However, he has an example in a lot of CPU intensive


00:13:33.180 --> 00:13:36.660
test suites, like for instance, if you're using Hypothesis,


00:13:36.660 --> 00:13:40.140
and it's running a lot of tests that are similar.


00:13:40.140 --> 00:13:43.220
And yeah, so especially if you're using Hypothesis,


00:13:43.220 --> 00:13:46.940
I recommend trying out running pytest in parallel,


00:13:46.940 --> 00:13:50.580
and it can speed things up significantly.


00:13:50.580 --> 00:13:52.660
He has an example at the bottom.


00:13:52.660 --> 00:13:54.940
Oh, I wanted to cover some of the other things.


00:13:54.940 --> 00:13:56.420
If you're doing all these tricks,


00:13:56.420 --> 00:14:00.380
it might muck up your coverage collection.


00:14:00.380 --> 00:14:03.300
So he's got some stuff here to help you


00:14:03.300 --> 00:14:07.120
through cleaning up your coverage, which is great.


00:14:07.120 --> 00:14:09.500
Skipping down.


00:14:09.500 --> 00:14:11.600
For the Adders project,


00:14:11.600 --> 00:14:15.800
Those two tricks, he started out with 257 seconds


00:14:15.800 --> 00:14:19.720
and got it down to 69 seconds using parallel pytest


00:14:19.720 --> 00:14:21.900
and building a wheel only.


00:14:21.900 --> 00:14:24.640
I had a test suite that was pretty fast anyway,


00:14:24.640 --> 00:14:26.560
just 18 seconds.


00:14:26.560 --> 00:14:28.980
It did take it down to like five seconds.


00:14:28.980 --> 00:14:33.800
So it's, yeah, it's worth it just for the heck of it.


00:14:33.800 --> 00:14:34.640
Why not?


00:14:34.640 --> 00:14:35.480
So thanks.


00:14:35.480 --> 00:14:37.520
- Yeah, it's almost five times faster, not bad.


00:14:37.520 --> 00:14:38.720
Four times faster?


00:14:38.720 --> 00:14:40.200
- Yeah, I mean, right.


00:14:40.200 --> 00:14:42.480
If it's low, you don't really think about it,


00:14:42.480 --> 00:14:43.880
even if it's multiples.


00:14:43.880 --> 00:14:44.800
So--


00:14:44.800 --> 00:14:45.640
- Yep.


00:14:45.640 --> 00:14:48.800
And the bigger the project, the more you care, right?


00:14:48.800 --> 00:14:49.640
- Yeah.


00:14:49.640 --> 00:14:51.920
And I wasn't using a hypothesis.


00:14:51.920 --> 00:14:54.440
I would like to try this out using hypothesis.


00:14:54.440 --> 00:14:55.700
It's pretty cool.


00:14:55.700 --> 00:14:56.540
- Excellent.


00:14:56.540 --> 00:14:57.360
- Good one.


00:14:57.360 --> 00:14:58.200
- All right.


00:14:58.200 --> 00:14:59.560
Before we move on to the next item,


00:14:59.560 --> 00:15:02.160
I have a bit of real-time follow-up,


00:15:02.160 --> 00:15:04.640
but not real-time follow-up in the traditional sense


00:15:04.640 --> 00:15:06.520
where we have audience members.


00:15:06.520 --> 00:15:09.320
I just got a message from Roman Wright,


00:15:09.320 --> 00:15:14.320
who is the creator of Beanie, the async MongoDB ODM,


00:15:14.320 --> 00:15:17.160
based on Pydantic, and he said,


00:15:17.160 --> 00:15:20.540
I am releasing a version of Beanie


00:15:20.540 --> 00:15:23.000
that supports Pydantic version two soon,


00:15:23.000 --> 00:15:25.040
either this week or next week.


00:15:25.040 --> 00:15:29.480
So don't wanna put him down for a certain time exactly,


00:15:29.480 --> 00:15:32.560
but just that project is also moving along


00:15:32.560 --> 00:15:35.060
like FastAPI did to support it.


00:15:35.060 --> 00:15:37.800
And he said it promises to have quite a bit of a speed up,


00:15:37.800 --> 00:15:38.840
as you would expect.


00:15:38.840 --> 00:15:40.040
- Nice, cool.


00:15:40.040 --> 00:15:41.520
That Beanie's a cool project.


00:15:41.520 --> 00:15:42.480
- It absolutely is.


00:15:42.480 --> 00:15:45.520
So how about something totally different like Pydantic?


00:15:45.520 --> 00:15:49.680
So this next item is Awesome Pydantic,


00:15:49.680 --> 00:15:52.920
a curated list of awesome things related to Pydantic.


00:15:52.920 --> 00:15:57.480
So there's, this is kind of an early stage project here.


00:15:57.480 --> 00:16:00.080
And it's, you know, got created five months ago or so,


00:16:00.080 --> 00:16:02.200
but I feel like it needs people out there


00:16:02.200 --> 00:16:05.200
who have Pydantic things contributing them back.


00:16:05.200 --> 00:16:08.060
For example, do we have,


00:16:08.060 --> 00:16:10.940
I don't even think like SQL model is listed here


00:16:10.940 --> 00:16:13.780
where SQL model is created by Sebastian Ramirez


00:16:13.780 --> 00:16:17.460
based on Pydantic and SQLAlchemy, for example.


00:16:17.460 --> 00:16:19.340
So there are some notable things though


00:16:19.340 --> 00:16:20.580
that are worth pointing out here.


00:16:20.580 --> 00:16:22.640
So we have Transformers


00:16:22.640 --> 00:16:25.100
and what's cool is that lists all the stars.


00:16:25.100 --> 00:16:28.980
So Transformers has 106,000 stars.


00:16:28.980 --> 00:16:30.020
- Wow. - That's crazy, Brian.


00:16:30.020 --> 00:16:30.940
- Yeah.


00:16:30.940 --> 00:16:32.480
- I mean, if you look at CPython,


00:16:32.480 --> 00:16:35.820
I think it has in the realm of 50,000, Flask does as well.


00:16:35.820 --> 00:16:37.640
So Transformers is the state of art,


00:16:37.640 --> 00:16:42.640
natural language processing for PyTorch and TensorFlow based on Pydantic.


00:16:42.640 --> 00:16:45.480
>> It's more popular than Python.


00:16:45.480 --> 00:16:49.840
>> Sort of, yes. I think how many people are


00:16:49.840 --> 00:16:53.520
actually trying to work on Python and the code itself.


00:16:53.520 --> 00:16:55.000
But yeah, in a sense.


00:16:55.000 --> 00:16:56.480
Spacey, of course,


00:16:56.480 --> 00:16:59.880
the free open-source library for natural NLP,


00:16:59.880 --> 00:17:01.840
natural language processing.


00:17:01.840 --> 00:17:03.640
That's a pretty cool one.


00:17:03.640 --> 00:17:10.480
Gina, Gina, Gina is geared towards building


00:17:10.480 --> 00:17:13.320
search systems for any kind of data,


00:17:13.320 --> 00:17:16.360
including text, image, audio, video, and more.


00:17:16.360 --> 00:17:19.840
That's pretty excellent. Modular design and multilayer abstractions.


00:17:19.840 --> 00:17:21.880
You can leverage efficient patterns to build


00:17:21.880 --> 00:17:25.000
different parts of the system or change them to a flow.


00:17:25.000 --> 00:17:26.800
That sounds pretty interesting, right?


00:17:26.800 --> 00:17:27.640
>> Yeah.


00:17:27.640 --> 00:17:30.680
>> Down here, we have the object mapping.


00:17:30.680 --> 00:17:32.880
We have Beanie, as I just called out,


00:17:32.880 --> 00:17:35.880
an asynchronous Python object document mapper


00:17:35.880 --> 00:17:39.880
for MongoDB based on motor and Pydantic, of course.


00:17:39.880 --> 00:17:41.300
What else we got?


00:17:41.300 --> 00:17:44.660
We have data model code generator,


00:17:44.660 --> 00:17:49.140
which is the foundation of JSON to Pydantic,


00:17:49.140 --> 00:17:50.740
which I know that we talked about before.


00:17:50.740 --> 00:17:53.980
If you're not familiar with JSON to Pydantic.com,


00:17:53.980 --> 00:17:55.500
take some JSON, drop it in there,


00:17:55.500 --> 00:17:58.480
you get your JSON output.


00:17:58.480 --> 00:18:00.220
Here's the big question though, Brian,


00:18:00.220 --> 00:18:02.340
what version of Pydantic do you get out?


00:18:02.340 --> 00:18:04.860
>> I'm guessing not the new one. I don't know.


00:18:04.860 --> 00:18:07.500
>> I am as well. It probably needs an update, doesn't it?


00:18:07.500 --> 00:18:10.220
So hopefully that comes along there.


00:18:10.220 --> 00:18:14.660
>> Well, stick in model in there as an attribute and see what happens.


00:18:14.660 --> 00:18:16.860
>> Oh, yeah. Nope, not doing it.


00:18:16.860 --> 00:18:19.300
So data model code generator is


00:18:19.300 --> 00:18:22.980
the CLI equivalent that that thing uses behind the scenes.


00:18:22.980 --> 00:18:26.220
Let's see. I don't know how many people know that


00:18:26.220 --> 00:18:29.300
Pydantic has a settings management capability,


00:18:29.300 --> 00:18:32.200
where you can read variables out of environment variables


00:18:32.200 --> 00:18:33.700
and YAML files and so on.


00:18:33.700 --> 00:18:36.000
So goodconf, as in good config,


00:18:36.000 --> 00:18:40.200
goodconf is a thin wrapper over Pydantic settings management.


00:18:40.200 --> 00:18:41.600
So that's pretty cool.


00:18:41.600 --> 00:18:43.800
You get a little bit of a cleaner


00:18:43.800 --> 00:18:46.400
or more opinionated way to work with settings.


00:18:46.400 --> 00:18:51.000
And of course, fastAPI, Django, Ninja are listed here


00:18:51.000 --> 00:18:52.200
along with some others.


00:18:52.200 --> 00:18:55.000
And yeah, I think I'll probably leave it there


00:18:55.000 --> 00:18:57.100
with that as the shout out for all those items.


00:18:57.100 --> 00:18:58.500
But there's a bunch of cool stuff in here.


00:18:58.500 --> 00:19:01.340
awesome things you might say that people can check out.


00:19:01.340 --> 00:19:05.100
Also, if you have one of these projects or you're a super fan of one of these projects,


00:19:05.100 --> 00:19:06.420
and it's not listed here,


00:19:06.420 --> 00:19:08.140
PRs are accepted, I believe.


00:19:08.140 --> 00:19:09.060
>> Yeah, cool.


00:19:09.060 --> 00:19:14.020
>> Yeah. That was the next thing in the Pydantic journey of today.


00:19:14.020 --> 00:19:18.940
>> Nice. Well, I'm going to go away from Pydantic again,


00:19:18.940 --> 00:19:23.700
and I want to talk about command line interface tools.


00:19:23.700 --> 00:19:25.580
I like CLIs.


00:19:25.580 --> 00:19:30.580
I kind of spent a lot of time with a terminal open.


00:19:30.580 --> 00:19:34.580
And so I thought this was a fun article from Simon Willison,


00:19:34.580 --> 00:19:37.580
CLI tools hidden in the Python standard library.


00:19:37.580 --> 00:19:43.580
And I think it's also really cool that Simon does a shout out to Seth Larson.


00:19:43.580 --> 00:19:45.580
Hey, Seth.


00:19:45.580 --> 00:19:49.580
That Seth pointed out that gzip, the Python gzip module,


00:19:49.580 --> 00:19:52.580
you can use it as a CLI tool,


00:19:52.580 --> 00:19:57.280
especially handy if you're on Windows and don't have gzip built in,


00:19:57.280 --> 00:20:00.380
you can say python -m gzip


00:20:00.380 --> 00:20:05.920
and you can with a -d decompress and give it a gzip file and it'll decompress it for you.


00:20:05.920 --> 00:20:07.920
There's a whole bunch of other stuff you can do with it,


00:20:07.920 --> 00:20:11.180
but it's pretty neat, kind of fun.


00:20:11.180 --> 00:20:16.380
So Simon saw this, that Seth pointed this out


00:20:16.380 --> 00:20:20.680
and thought, wonder what other stuff is hiding in the standard library.


00:20:20.680 --> 00:20:25.800
So he talks about using ripgrep to search through the standard library.


00:20:25.800 --> 00:20:30.680
And I think it's kind of fun that he shows you how he went about looking for all these things


00:20:30.680 --> 00:20:35.240
and then parsed out some stuff because he didn't really care about tests


00:20:35.240 --> 00:20:41.400
or turtle or idle, because yes, we know that those have applications.


00:20:41.400 --> 00:20:44.360
But what's left is quite a few.


00:20:44.360 --> 00:20:49.480
There's quite a few Python modules within standard library or packages, modules


00:20:49.480 --> 00:20:55.320
that do these init things, or have a command line thing.


00:20:55.320 --> 00:20:58.640
And so what's kind of interesting is what he's looking for.


00:20:58.640 --> 00:21:03.680
He's looking for packages that have a if name equals main,


00:21:03.680 --> 00:21:07.200
because that little trick of if dunder name equals dunder main,


00:21:07.200 --> 00:21:10.360
that means that if it's imported,


00:21:10.360 --> 00:21:12.840
it just runs like a library.


00:21:12.840 --> 00:21:16.320
But if it's not imported, if it's run directly,


00:21:16.320 --> 00:21:17.680
then this will be true,


00:21:17.680 --> 00:21:22.840
and whatever's in there will run as a command and you can do the -m thing.


00:21:22.840 --> 00:21:26.440
And so one of the few fun things that he found,


00:21:26.440 --> 00:21:29.960
I did know about the server thing, but I always forget about it.


00:21:29.960 --> 00:21:34.480
Python -m HTTP.server and you can give it a port.


00:21:34.480 --> 00:21:37.480
Yeah, that's nice. I use that sometimes when things complain


00:21:37.480 --> 00:21:41.520
and trying to work with like JavaScript and a static HTML file or something.


00:21:41.520 --> 00:21:43.760
It's like, you need a server for this to work


00:21:43.760 --> 00:21:45.560
because it wants to just do forward slash something.


00:21:45.560 --> 00:21:52.720
So I'll just run that and then like open up the file right there and then it starts working instead of trying to get a lot of trouble.


00:21:52.720 --> 00:21:54.560
Run that in the directory you're working on.


00:21:54.560 --> 00:22:03.520
Yeah, and if you want to, one of the fun things with this is if you want to just learn a little basic HTML, maybe JavaScript in CSS,


00:22:03.520 --> 00:22:10.600
you can just use this as a local server to just play around with using all three together. It's kind of fun.


00:22:10.600 --> 00:22:13.800
Yeah, or maybe you want to do PyScript and not actually do JavaScript.


00:22:13.800 --> 00:22:15.800
Oh, yeah, yeah, maybe.


00:22:15.800 --> 00:22:18.800
So let's go through a few more fun things.


00:22:18.800 --> 00:22:23.000
Base64, you can use -m base64


00:22:23.000 --> 00:22:25.600
to either encode, decode, or both.


00:22:25.600 --> 00:22:28.700
I'm not sure what both at the same time means.


00:22:28.700 --> 00:22:31.000
To try that out, see what it does.


00:22:31.000 --> 00:22:32.500
Maybe you just get the answer back.


00:22:32.500 --> 00:22:33.800
The input back.


00:22:33.800 --> 00:22:34.800
Maybe.


00:22:34.800 --> 00:22:40.600
AsyncIO has, will open up an async REPL,


00:22:40.600 --> 00:22:47.700
where you can use a wait and instead of async.io run, you can use a wait directly.


00:22:47.700 --> 00:22:48.700
It's kind of fun.


00:22:48.700 --> 00:22:53.100
Neat to try out async stuff on the REPL.


00:22:53.100 --> 00:22:55.600
That sounds hard, but it might be fun.


00:22:55.600 --> 00:23:01.900
Tokenize, just as a fun thing, you can use the Python tokenizer


00:23:01.900 --> 00:23:05.500
on a Python file just to see what the tokens look like.


00:23:05.500 --> 00:23:07.400
That's kind of neat.


00:23:07.400 --> 00:23:09.200
AST, I probably would use more.


00:23:09.200 --> 00:23:12.920
You can do -mast on a Python file,


00:23:12.920 --> 00:23:18.540
it'll give you a printout of the abstract syntax tree,


00:23:18.540 --> 00:23:20.220
which is nice.


00:23:20.220 --> 00:23:21.740
This is super handy,


00:23:21.740 --> 00:23:24.400
I didn't know about this, json.tool.


00:23:24.400 --> 00:23:27.080
It's a pretty printer for JSON,


00:23:27.080 --> 00:23:31.580
so you can just pipe some JSON into it,


00:23:31.580 --> 00:23:34.800
and get some nice formatted output, nice.


00:23:34.800 --> 00:23:36.840
Yeah, that's really what I wanted to highlight,


00:23:36.840 --> 00:23:40.680
those calendar. I knew about this a long time ago and I totally forgot about it.


00:23:40.680 --> 00:23:45.600
Python - M calendar will print an ASCII calendar of the current year.


00:23:45.600 --> 00:23:48.960
Why would you need this? But anyway,


00:23:48.960 --> 00:23:50.120
>> Because you can, Brian.


00:23:50.120 --> 00:23:55.480
>> Because you can. I used this way, way, way long ago to try to,


00:23:55.480 --> 00:23:59.120
and then parsed it afterwards to hook up


00:23:59.120 --> 00:24:05.040
a dynamic calendar application with clickable dates.


00:24:05.040 --> 00:24:08.240
It was terrible, it was terrible application, but it was fun.


00:24:08.240 --> 00:24:09.080
Anyway.


00:24:09.080 --> 00:24:09.920
(laughing)


00:24:09.920 --> 00:24:11.560
- That's kind of, I kind of like it though.


00:24:11.560 --> 00:24:13.640
I do kind of like it.


00:24:13.640 --> 00:24:15.720
- So, oh, NNTP.


00:24:15.720 --> 00:24:18.160
Do you use news groups much?


00:24:18.160 --> 00:24:19.360
I don't use news groups.


00:24:19.360 --> 00:24:21.200
- I used to news group, but--


00:24:21.200 --> 00:24:23.400
- Apparently you can do NNTP


00:24:23.400 --> 00:24:25.920
and it prints out like some articles.


00:24:25.920 --> 00:24:26.840
(laughing)


00:24:26.840 --> 00:24:27.680
Interesting.


00:24:27.680 --> 00:24:30.440
- In case you want to read from 1994.


00:24:30.440 --> 00:24:32.920
(laughing)


00:24:32.920 --> 00:24:35.800
- One thing I think it might be kind of cool


00:24:35.800 --> 00:24:40.800
if somebody creates a meta package for this kind of stuff


00:24:40.800 --> 00:24:43.240
based on this article.


00:24:43.240 --> 00:24:45.520
What I mean is if you set an entry point


00:24:45.520 --> 00:24:49.480
in your Python package and you install it


00:24:49.480 --> 00:24:52.760
into your virtual environment or you pipx install it,


00:24:52.760 --> 00:24:54.640
it becomes a CLI command, right?


00:24:54.640 --> 00:24:56.740
So for example, pyjoke, right?


00:24:56.740 --> 00:24:59.840
I could just go up here and type pyjoke,


00:24:59.840 --> 00:25:02.200
oh, pipx install pyjoke first,


00:25:02.200 --> 00:25:04.760
And it'll give you some kind of,


00:25:04.760 --> 00:25:07.160
it'll just call that function, right?


00:25:07.160 --> 00:25:08.040
Is it joke perhaps?


00:25:08.040 --> 00:25:08.880
I'm not sure.


00:25:08.880 --> 00:25:09.700
Yeah.


00:25:09.700 --> 00:25:12.240
So if I type pyjoke after installing a pipx install,


00:25:12.240 --> 00:25:14.760
it says obfuscated reality mappers,


00:25:14.760 --> 00:25:16.800
ORMs can be useful database tools, right?


00:25:16.800 --> 00:25:18.400
So, right.


00:25:18.400 --> 00:25:21.360
But the fact now I have a single command I give


00:25:21.360 --> 00:25:24.400
instead of, you know, Python dash M pyjoke,


00:25:24.400 --> 00:25:25.820
I just type pyjoke, right?


00:25:25.820 --> 00:25:27.920
So it would be cool if somebody took this


00:25:27.920 --> 00:25:30.560
and created something that I could pipx install


00:25:30.560 --> 00:25:35.160
It gave me every single one of these in a more concise way to call it.


00:25:35.160 --> 00:25:39.220
So instead of Python dash M dash, you know, calendar or just calendar, I


00:25:39.220 --> 00:25:42.140
could just type calendar and it runs this right.


00:25:42.140 --> 00:25:45.520
Or I could just type ACP dot server and it runs, runs that.


00:25:45.520 --> 00:25:50.640
So there's a something for, for people to try to come up with a cleaner way.


00:25:50.640 --> 00:25:52.980
Um, there might be some name conflicts.


00:25:52.980 --> 00:25:56.880
So you'd have like for GZIP, you might need to PG zip or something, right?


00:25:56.880 --> 00:25:57.400
Like that.


00:25:57.400 --> 00:26:00.180
So, which is, would be a little bit annoying, but yeah, anyway, it'd be fun.


00:26:00.180 --> 00:26:04.100
And if somebody turned these into a simpler series of commands and just like, you got


00:26:04.100 --> 00:26:06.140
Python, you basically have all these.


00:26:06.140 --> 00:26:08.140
>> Yeah, it might be kind of difficult.


00:26:08.140 --> 00:26:13.340
Maybe a fun thing to try because you can't just import the module and run it because


00:26:13.340 --> 00:26:15.500
then that part doesn't run.


00:26:15.500 --> 00:26:16.500
So you have to, yeah.


00:26:16.500 --> 00:26:20.540
>> Right, you would have to set up a bunch of entry points in your package and then give


00:26:20.540 --> 00:26:24.380
them names and then basically map them over to Colleen.


00:26:24.380 --> 00:26:28.260
But Henry out in the audience says, "I thought the point is you didn't have to install anything


00:26:28.260 --> 00:26:29.260
to use these."


00:26:29.260 --> 00:26:30.480
>> Right.


00:26:30.480 --> 00:26:35.960
>> True. But you have got to make a bunch of aliases if you want them real short.


00:26:35.960 --> 00:26:37.800
Anyway, very cool.


00:26:37.800 --> 00:26:39.440
>> Cheat sheet maybe.


00:26:39.440 --> 00:26:42.520
>> Yes, a cheat sheet. Thanks, Simon.


00:26:42.520 --> 00:26:43.720
Thank you, Seth. This is cool.


00:26:43.720 --> 00:26:46.980
>> All right. Well, those are our things.


00:26:46.980 --> 00:26:49.400
Do you have anything extra to share with us?


00:26:49.400 --> 00:26:50.760
>> I do have some extras.


00:26:50.760 --> 00:26:52.040
Back to Pydantic.


00:26:52.040 --> 00:26:54.240
Over at TalkByThon training,


00:26:54.240 --> 00:26:57.980
We have a brand new course, a seven hour course


00:26:57.980 --> 00:27:02.120
for MongoDB called MongoDB with Async Python.


00:27:02.120 --> 00:27:02.960
- Oh fun.


00:27:02.960 --> 00:27:06.400
- And the whole idea is it takes Beanie


00:27:06.400 --> 00:27:09.280
and it's kind of a comprehensive introduction to MongoDB


00:27:09.280 --> 00:27:11.320
but approaches it from using Beanie


00:27:11.320 --> 00:27:14.000
which is Pydantic plus Async and Await


00:27:14.000 --> 00:27:17.640
talking to MongoDB, how to use indexes,


00:27:17.640 --> 00:27:20.880
how do you write queries, what are the different styles.


00:27:20.880 --> 00:27:24.680
We end up building a FastAPI API around that,


00:27:24.680 --> 00:27:27.000
as well as do load testing with Locust.


00:27:27.000 --> 00:27:29.680
So if you wanna kinda see end to end how to build


00:27:29.680 --> 00:27:34.400
a modern Python app based on MongoDB and Beanie,


00:27:34.400 --> 00:27:35.560
check it out.


00:27:35.560 --> 00:27:38.640
Links in the show notes, just talkpython.fm,


00:27:38.640 --> 00:27:41.100
click on courses, and you'll find it over there.


00:27:41.100 --> 00:27:42.560
So I'm really, really excited.


00:27:42.560 --> 00:27:44.080
I've been working for a long time on this.


00:27:44.080 --> 00:27:46.000
It has an early bird special.


00:27:46.000 --> 00:27:48.760
So for today for a week,


00:27:48.760 --> 00:27:51.940
you can get $10 off or something relative


00:27:51.940 --> 00:27:55.140
in your own currency off if you get it this week


00:27:55.140 --> 00:27:56.620
and then it goes up a little bit next week.


00:27:56.620 --> 00:27:58.060
So really, really fun course.


00:27:58.060 --> 00:27:59.420
There's tons of stuff to learn here.


00:27:59.420 --> 00:28:03.440
People can check it out if they're interested in this.


00:28:03.440 --> 00:28:05.660
And as I said, I was just talking to Roman


00:28:05.660 --> 00:28:09.660
and Beanie should get its Pydantic version two upgrade


00:28:09.660 --> 00:28:12.160
as well so this should only get to be a better story


00:28:12.160 --> 00:28:13.000
as we go on.


00:28:13.000 --> 00:28:13.820
- Very cool.


00:28:13.820 --> 00:28:14.820
Now is this one that you did


00:28:14.820 --> 00:28:16.300
or was this somebody else?


00:28:16.300 --> 00:28:18.220
- This is me.


00:28:18.220 --> 00:28:19.240
- Okay. - And again,


00:28:19.240 --> 00:28:21.400
this is like what's powering Python by set FM,


00:28:21.400 --> 00:28:23.280
this is what's powering talkpython.fm,


00:28:23.280 --> 00:28:26.360
like those kind of, it's the same tech behind the scenes,


00:28:26.360 --> 00:28:27.480
so pretty excellent.


00:28:27.480 --> 00:28:28.480
- Nice.


00:28:28.480 --> 00:28:32.080
- Another one, did you know that PyPI has a blog?


00:28:32.080 --> 00:28:33.920
- No. - It does.


00:28:33.920 --> 00:28:35.600
This one's been sitting around for a little bit,


00:28:35.600 --> 00:28:36.880
I meant to talk about it,


00:28:36.880 --> 00:28:40.120
but it kept getting edged out by more urgent things.


00:28:40.120 --> 00:28:44.100
But back in March, end of March,


00:28:44.100 --> 00:28:48.120
there's now a blog.pypi.org that you can go to.


00:28:48.120 --> 00:28:49.720
So definitely check that out.


00:28:49.720 --> 00:28:51.680
One of the things that's a little bit of a hassle


00:28:51.680 --> 00:28:55.080
is if you take this, like blog.pypi.org


00:28:55.080 --> 00:28:58.320
and you drop it into your RSS reader,


00:28:58.320 --> 00:29:00.400
like reader with two Es for me,


00:29:00.400 --> 00:29:02.020
it says there's no blog here.


00:29:02.020 --> 00:29:04.040
Is there no blog here?


00:29:04.040 --> 00:29:07.480
So go to the bottom.


00:29:07.480 --> 00:29:12.480
There's a blog.pypi.org/feed_rss_created.xml.


00:29:12.480 --> 00:29:15.320
That is what you got to put into your RSS reader


00:29:15.320 --> 00:29:17.040
if your RSS reader doesn't find it


00:29:17.040 --> 00:29:22.040
'cause there's no meta tag for the RSS capabilities.


00:29:22.040 --> 00:29:23.880
Maybe someone's over there listening,


00:29:23.880 --> 00:29:25.840
go and throw that in, make that a little bit quicker


00:29:25.840 --> 00:29:27.560
and simpler for people to find.


00:29:27.560 --> 00:29:29.400
But if you wanna subscribe to it,


00:29:29.400 --> 00:29:32.320
that is the business right there.


00:29:32.320 --> 00:29:35.400
- Well, if you go to, yeah, there is a little icon


00:29:35.400 --> 00:29:39.040
at the bottom right-hand corner, the RSS thing.


00:29:39.040 --> 00:29:41.320
So all the way down. - Yeah, right there.


00:29:41.320 --> 00:29:42.520
- Yeah. - So copy link.


00:29:42.520 --> 00:29:43.560
Is that the same address?


00:29:43.560 --> 00:29:45.560
Yeah, that's the same address I suggested.


00:29:45.560 --> 00:29:46.720
- Cool. - So people, yeah.


00:29:46.720 --> 00:29:48.640
But like if there's a meta tag you can put,


00:29:48.640 --> 00:29:52.480
so like you'll get a little pop up in your different


00:29:52.480 --> 00:29:54.440
browsers and other things that browse it.


00:29:54.440 --> 00:29:56.920
Say, hey, just click here to subscribe or to auto detect it.


00:29:56.920 --> 00:29:57.760
Yeah. - Cool.


00:29:57.760 --> 00:29:58.600
- Yeah.


00:29:58.600 --> 00:29:59.420
Excellent.


00:29:59.420 --> 00:30:02.240
One, yes, one final thing of my extras.


00:30:02.240 --> 00:30:05.040
Oh my gosh, there's a lot of pop ups on Twitter these days.


00:30:05.040 --> 00:30:08.720
On Twitter, Luca Schlinga pointed out,


00:30:08.720 --> 00:30:11.200
says, "Wow, meta," as in Facebook,


00:30:11.200 --> 00:30:14.680
"meta commits to dedicate three engineering years


00:30:14.680 --> 00:30:17.440
to implement the removal of the GIL from Python


00:30:17.440 --> 00:30:21.240
and fix upcoming compatibility and performance issues as a result of that.


00:30:21.240 --> 00:30:22.520
>> Oh, awesome.


00:30:22.520 --> 00:30:26.880
>> How about that? So I believe this is the,


00:30:26.880 --> 00:30:31.160
703 is the no-GIL work done by Sam Gross,


00:30:31.160 --> 00:30:32.720
who is at Meta,


00:30:32.720 --> 00:30:35.000
and there's been some hesitation like,


00:30:35.000 --> 00:30:36.360
well, if we adopt this,


00:30:36.360 --> 00:30:40.080
how much things that are based on C and Rust start breaking?


00:30:40.080 --> 00:30:44.280
So it sounds like with a couple of paragraphs of information,


00:30:44.280 --> 00:30:46.880
that they're saying, look, we'll both fix CPython.


00:30:46.880 --> 00:30:48.880
>> Just do it anyway and we'll fix it later.


00:30:48.880 --> 00:30:53.480
>> I think it's like we'll fix CPython and then maybe I'm inferring here is like,


00:30:53.480 --> 00:30:56.320
and we'll fix the popular packages


00:30:56.320 --> 00:30:59.560
based on it that might run into trouble. I'm not sure.


00:30:59.560 --> 00:31:03.520
But yeah, so basically three years.


00:31:03.520 --> 00:31:07.560
I think they were saying one to two years of actual calendar time,


00:31:07.560 --> 00:31:10.640
but with multiple people who are either core developers


00:31:10.640 --> 00:31:13.560
or very close to core developers to make this happen.


00:31:13.560 --> 00:31:14.560
Cool.


00:31:14.560 --> 00:31:17.060
So that's big news, and those are my extras.


00:31:17.060 --> 00:31:21.560
Nice. I wanted to say congrats to Seth Larson.


00:31:21.560 --> 00:31:25.560
So we mentioned him at the beginning of the show and a couple times during the show.


00:31:25.560 --> 00:31:31.060
Seth is the new security developer in residence.


00:31:31.060 --> 00:31:33.060
So yay, congrats, Seth.


00:31:33.060 --> 00:31:38.060
So we're linking to an announcement on the PSF blog.


00:31:38.060 --> 00:31:41.560
And he also has a... oops, that's blank.


00:31:41.560 --> 00:31:45.860
He has a blog announcing the change also, a blog post.


00:31:45.860 --> 00:31:49.320
So pretty cool. I'm excited to see that.


00:31:49.320 --> 00:31:50.460
So congrats, Seth.


00:31:50.460 --> 00:31:55.620
Yeah, congrats, Seth. And there's all this discussion about supply chain


00:31:55.620 --> 00:31:59.120
vulnerabilities and security and all of those things.


00:31:59.120 --> 00:32:00.760
So it's really excellent.


00:32:00.760 --> 00:32:02.260
And just security in general.


00:32:02.260 --> 00:32:05.260
So thanks for coming on to make things better.


00:32:05.260 --> 00:32:08.760
Yeah, and nice sweatshirt, Seth. Cool.


00:32:08.760 --> 00:32:14.660
The other thing I wanted to announce is I'm pretty excited about this last bit.


00:32:14.660 --> 00:32:16.260
Python People is live.


00:32:16.260 --> 00:32:17.660
So Python People...


00:32:17.660 --> 00:32:19.160
Who are these Python People you speak of, Brian?


00:32:19.160 --> 00:32:20.160
Python People.


00:32:20.160 --> 00:32:23.860
So I, you know, the first part of like,


00:32:23.860 --> 00:32:27.160
I kind of, there's a couple things that were inspiring for this.


00:32:27.160 --> 00:32:31.260
So it's a new podcast, pythonpeople.fm.


00:32:31.260 --> 00:32:33.660
So far, there's one episode with Michael Kennedy,


00:32:33.660 --> 00:32:36.760
but there are you, but there's a whole bunch more coming.


00:32:36.760 --> 00:32:42.460
And I used to mostly just want the tech stuff of a tech podcast.


00:32:42.460 --> 00:32:45.160
But I kind of really liked the first part of Talk Python,


00:32:45.160 --> 00:32:46.960
where you just get to know people.


00:32:46.960 --> 00:32:49.160
And I thought, we should do more of that.


00:32:49.160 --> 00:32:53.560
So I wanted to get a podcast together


00:32:53.560 --> 00:32:56.460
where we mostly focus on the people and less about the tech.


00:32:56.460 --> 00:32:59.560
So that's what Python People is about.


00:32:59.560 --> 00:33:02.060
Yeah, we talk for like 45 minutes or something.


00:33:02.060 --> 00:33:04.160
No, 28 minutes and 44 seconds.


00:33:04.160 --> 00:33:07.360
and we almost don't talk about Python at all, right?


00:33:07.360 --> 00:33:10.000
>> Yeah, a little bit about what you do.


00:33:10.000 --> 00:33:12.440
I thought it'd be fun to pull in why,


00:33:12.440 --> 00:33:14.280
I mean, everybody knows who you are,


00:33:14.280 --> 00:33:15.440
but for some people,


00:33:15.440 --> 00:33:17.120
what is your connection to Python?


00:33:17.120 --> 00:33:19.000
What is your connection to the Python community?


00:33:19.000 --> 00:33:20.920
But then also just more about you.


00:33:20.920 --> 00:33:25.520
We learned about your motorcycling and about being a pool shark.


00:33:25.520 --> 00:33:26.800
[LAUGHTER]


00:33:26.800 --> 00:33:27.760
>> Who knew?


00:33:27.760 --> 00:33:31.080
>> Who knew? We talk about skateboarding with you.


00:33:31.080 --> 00:33:33.560
So there's like a ton of other cool things


00:33:33.560 --> 00:33:35.080
that people might be interested in.


00:33:35.080 --> 00:33:37.160
- Yeah, so check it out, please.


00:33:37.160 --> 00:33:39.640
And that's all I've got for--


00:33:39.640 --> 00:33:41.880
- What if somebody else wants to be a Python people?


00:33:41.880 --> 00:33:43.000
Can they reach out to you?


00:33:43.000 --> 00:33:43.840
- Oh, I will-- - Do you wanna be


00:33:43.840 --> 00:33:44.660
a Python person?


00:33:44.660 --> 00:33:46.680
- Yeah, I should put a like a be a person,


00:33:46.680 --> 00:33:48.400
or I don't know how to be--


00:33:48.400 --> 00:33:49.240
- Be a person.


00:33:49.240 --> 00:33:51.640
- Oh, maybe be a guest or something.


00:33:51.640 --> 00:33:53.880
Yeah, just reach out to me.


00:33:53.880 --> 00:33:56.720
You don't have to be as well known as Michael


00:33:56.720 --> 00:33:58.960
because who is?


00:33:58.960 --> 00:34:02.960
but I'd love to have just like everybody on, why not?


00:34:02.960 --> 00:34:04.240
- Yeah, good luck with the show.


00:34:04.240 --> 00:34:05.400
It's off to a good start


00:34:05.400 --> 00:34:08.240
and it was really fun to be a part of that.


00:34:08.240 --> 00:34:09.080
- Cool.


00:34:09.080 --> 00:34:11.040
- All right, you ready for some O'Reilly?


00:34:11.040 --> 00:34:12.760
- Oh yeah, we have a joke.


00:34:12.760 --> 00:34:14.160
- We have a joke.


00:34:14.160 --> 00:34:17.680
So this is part of the O'Reilly book series.


00:34:17.680 --> 00:34:20.440
You know, O'Reilly always has like an animal


00:34:20.440 --> 00:34:21.600
or something on there.


00:34:21.600 --> 00:34:24.400
And so there's the joke series, O'Reilly?


00:34:24.400 --> 00:34:25.520
Question mark?


00:34:25.520 --> 00:34:27.480
It's kind of a riffs on that a little bit.


00:34:27.480 --> 00:34:29.760
This one is Kubernetes for Beginners.


00:34:29.760 --> 00:34:31.060
It says, "What could go wrong?"


00:34:31.060 --> 00:34:36.060
And this is in the dev-oops category of tech books.


00:34:36.060 --> 00:34:38.080
And then the cover is, it says,


00:34:38.080 --> 00:34:39.400
"Containers, that'll fix it."


00:34:39.400 --> 00:34:41.680
And it has that giant evergreen container ship


00:34:41.680 --> 00:34:43.880
stuck sideways in the Suez Canal.


00:34:43.880 --> 00:34:44.840
What could go wrong?


00:34:44.840 --> 00:34:45.840
- Yeah.


00:34:45.840 --> 00:34:49.640
And just the title, Kubernetes for Beginners.


00:34:49.640 --> 00:34:53.520
No, beginners aren't there yet.


00:34:53.520 --> 00:34:55.240
- Yeah, they probably shouldn't be doing Kubernetes,


00:34:55.240 --> 00:34:56.600
but that'll fix it.


00:34:56.600 --> 00:34:57.440
Awesome.


00:34:57.440 --> 00:34:58.940
You got a joke for us as well, right?


00:34:58.940 --> 00:35:02.200
- Oh yeah, just a random one I heard the other day.


00:35:02.200 --> 00:35:03.440
I thought it was terrible,


00:35:03.440 --> 00:35:05.000
so I thought I'd share it with the world.


00:35:05.000 --> 00:35:07.880
So five ants rent an apartment together.


00:35:07.880 --> 00:35:10.200
They invite five other ants to share the rent.


00:35:10.200 --> 00:35:14.160
Also, they got tons of room, so now they're tenants.


00:35:14.160 --> 00:35:15.640
- Ah, tenants, got it.


00:35:15.640 --> 00:35:16.480
- Tenants, tenants.


00:35:16.480 --> 00:35:17.960
- I love it.


00:35:17.960 --> 00:35:19.720
All right, I got one more in that vein for you


00:35:19.720 --> 00:35:21.480
since I just installed PyJoke.


00:35:21.480 --> 00:35:26.040
They're a single word on the CLI for me.


00:35:26.040 --> 00:35:30.160
So pirates go arg, computer buyers go argv.


00:35:30.160 --> 00:35:32.200
(laughing)


00:35:32.200 --> 00:35:33.040
How about that?


00:35:33.040 --> 00:35:33.880
Pretty bad.


00:35:33.880 --> 00:35:35.280
- Yeah, yeah.


00:35:35.280 --> 00:35:36.360
- But also true.


00:35:36.360 --> 00:35:37.800
They do that.


00:35:37.800 --> 00:35:38.640
- Maybe.


00:35:38.640 --> 00:35:40.760
All right, cool.


00:35:40.760 --> 00:35:42.480
Fun talking with you again.


00:35:42.480 --> 00:35:45.040
Thanks to everybody in the interwebs


00:35:45.040 --> 00:35:47.640
and on the YouTubes to watching us.


00:35:47.640 --> 00:35:48.800
- Yeah, thanks everyone.


00:35:48.800 --> 00:35:50.000
Good to be back with you, Brian.


00:35:50.000 --> 00:35:50.840
- Bye.

