WEBVTT

00:00:00.001 --> 00:00:04.980
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.980 --> 00:00:11.640
This is episode 343, recorded July 11th, 2023, and I am Brian Okken.

00:00:11.640 --> 00:00:12.760
And I am Michael Kennedy.

00:00:12.760 --> 00:00:14.580
That's pretty exciting to be here.

00:00:14.580 --> 00:00:17.880
If you're listening to the show, thank you.

00:00:17.880 --> 00:00:22.520
And also, if you'd like to watch and participate, ask questions or whatever,

00:00:22.520 --> 00:00:26.200
you can do that by going to pythonbytes.fm/live.

00:00:26.200 --> 00:00:29.400
And we'd love to have you, even if it's just once in a while.

00:00:29.400 --> 00:00:37.700
Yeah, sometimes people show up in the live stream that will possibly get their projects will actually get mentioned as well.

00:00:37.700 --> 00:00:39.160
And that's always kind of interesting.

00:00:39.160 --> 00:00:41.080
I'm feeling this might happen today.

00:00:41.080 --> 00:00:41.520
Yeah.

00:00:41.520 --> 00:00:46.320
Speaking of that, Seth Larson showed up and we have some Seth Larson news to share.

00:00:46.320 --> 00:00:47.440
So that's cool.

00:00:47.440 --> 00:00:48.400
Hey, Seth.

00:00:48.400 --> 00:00:51.920
Well, how would you like to start us off today, Michael?

00:00:51.920 --> 00:00:55.560
I would like to start it with a version update.

00:00:55.560 --> 00:00:57.420
So let's talk about Pydantic.

00:00:57.420 --> 00:01:01.880
We talked about the Pydantic version two story and performance.

00:01:01.880 --> 00:01:05.100
So Pydantic got a major rewrite.

00:01:05.100 --> 00:01:10.680
This rewrite was, I don't know, maybe a year in undertaking, a year long undertaking.

00:01:10.680 --> 00:01:11.740
Quite massive.

00:01:11.740 --> 00:01:15.440
Got its internals rewritten in Rust to be way faster.

00:01:15.440 --> 00:01:18.720
We talked about the early alpha version of this.

00:01:18.720 --> 00:01:22.620
And the early alpha version had, you know, like a 22 times speed up.

00:01:22.620 --> 00:01:24.060
Well, alpha no more.

00:01:24.060 --> 00:01:27.740
If you pip install Pydantic, you get Pydantic two.

00:01:27.740 --> 00:01:29.720
So that's pretty exciting, right?

00:01:29.720 --> 00:01:30.820
That's very exciting.

00:01:30.820 --> 00:01:31.360
Yeah.

00:01:31.360 --> 00:01:31.860
Yeah.

00:01:31.940 --> 00:01:37.000
So there's a blog post that says the last few months have involved a whirlwind of work.

00:01:37.000 --> 00:01:39.820
And finally, we're ready to announce version two.

00:01:39.820 --> 00:01:43.760
So you get started by just installing it, upgrading it.

00:01:43.760 --> 00:01:45.720
It requires Python 3.7 and above.

00:01:45.720 --> 00:01:49.880
So honestly, that's a pretty old bit of Python that you can be based on there.

00:01:49.880 --> 00:01:50.640
That's great.

00:01:50.640 --> 00:01:57.900
Now, there's some pretty major changes in terms of the API, I guess you would call it, the

00:01:57.900 --> 00:01:59.800
way that you work with Pydantic, right?

00:02:00.180 --> 00:02:05.940
In some cases, the way you work with base classes or the functions you call and all those things.

00:02:05.940 --> 00:02:09.760
So there's a migration guide that we can use to go through that.

00:02:09.760 --> 00:02:14.500
And if you check out the migration guide, you'll see like this.

00:02:14.500 --> 00:02:15.800
You got the migration guide.

00:02:15.800 --> 00:02:19.380
It starts by recommending this thing called Bump Pydantic.

00:02:19.380 --> 00:02:24.600
And I guess I should probably also just let you know, like, this is like a big Pydantic

00:02:24.600 --> 00:02:27.260
episode that we're going to be covering a lot of Pydantic things.

00:02:27.260 --> 00:02:29.760
So there's this thing called Bump Pydantic.

00:02:29.960 --> 00:02:35.820
And what you can do is you can run it against your project and it will traverse all the code

00:02:35.820 --> 00:02:43.160
and find all of the Pydantic things, the classes and functions and so on that you might write

00:02:43.160 --> 00:02:46.800
with for your Pydantic code and it will upgrade them to the new thing.

00:02:46.800 --> 00:02:48.760
So we can check that thing out first.

00:02:48.760 --> 00:02:50.200
Basically a converter.

00:02:50.200 --> 00:02:52.480
It's like a two to three, but for Pydantic.

00:02:52.480 --> 00:02:54.360
It's like a one to two, I guess.

00:02:54.360 --> 00:03:01.320
And so it'll do things like one of the things you should do is you should have explicitly set the

00:03:01.320 --> 00:03:02.020
default value.

00:03:02.020 --> 00:03:06.480
So previously you could have a class to give an example of a user that's a base model.

00:03:06.480 --> 00:03:09.040
You have a name and you say the name is an optional string.

00:03:09.180 --> 00:03:14.520
Well, now what you should write is name optional string equals none.

00:03:14.520 --> 00:03:19.040
So explicitly setting the default values when there are things like none.

00:03:19.040 --> 00:03:19.480
All right.

00:03:19.480 --> 00:03:22.680
So if you run this code against it, it'll go and make those transformations.

00:03:22.680 --> 00:03:28.180
It also will replace the config class with a model config attribute.

00:03:28.540 --> 00:03:36.120
So you might've had an inner config class and now you have a model config where you set that

00:03:36.120 --> 00:03:38.800
to an instance of the same settings basically.

00:03:38.800 --> 00:03:44.820
So fewer inner classes, more just fields that make, you know, make things happen.

00:03:44.820 --> 00:03:45.080
Right.

00:03:45.080 --> 00:03:48.620
And a bunch of stuff like that, that you can run and it'll do that automatically.

00:03:48.620 --> 00:03:53.240
But this is, if you look at the migration guide, this is actually just scratching the surface.

00:03:53.240 --> 00:03:57.100
So there's, there's a lot of other things that you need to be aware of.

00:03:57.100 --> 00:04:02.840
And I don't know how far they intend for this bump Pydantic to go and try and to manage those

00:04:02.840 --> 00:04:03.160
things.

00:04:03.160 --> 00:04:05.740
But for example, cool that they have it though.

00:04:05.740 --> 00:04:06.680
It is pretty cool.

00:04:06.680 --> 00:04:07.080
They have it.

00:04:07.080 --> 00:04:07.320
Yeah.

00:04:07.320 --> 00:04:08.840
That even it's a star, right?

00:04:08.840 --> 00:04:09.220
Yeah.

00:04:09.220 --> 00:04:13.060
They let people say, here's the changes you have to make.

00:04:13.060 --> 00:04:15.840
And also here's a tool that can do at least most of it.

00:04:15.840 --> 00:04:16.660
So exactly.

00:04:16.660 --> 00:04:22.480
There's things like in old Pydantic, you had a Dunder fields and now you have model fields

00:04:22.480 --> 00:04:25.600
as a field to the base class.

00:04:25.600 --> 00:04:29.740
You had Dunder private attributes and now you have Dunder Pydantic private.

00:04:29.740 --> 00:04:32.160
And there's, you know, there's more relevant ones.

00:04:32.160 --> 00:04:35.040
Like there was a copy function and now there's a model copy.

00:04:35.040 --> 00:04:38.100
There was a dict and now there's a model dump.

00:04:38.100 --> 00:04:41.540
So if you had a Pydantic model, you wanted a dictionary, you could just call dict on it.

00:04:41.540 --> 00:04:43.840
Well, that doesn't exist or is deprecated.

00:04:44.180 --> 00:04:46.300
And so now you have a model dump.

00:04:46.300 --> 00:04:54.300
They did say where possible, they've tried to retain deprecated methods with their old names for ease of migration, but you'll get deprecation warnings.

00:04:54.620 --> 00:04:57.720
So don't sleep on that because one day they won't, they won't be.

00:04:57.720 --> 00:05:01.180
There's, this is a pretty significantly long document.

00:05:01.180 --> 00:05:07.580
I don't know how long, long it is, this migration guide, but there's a, it's a bunch of things you should just go through.

00:05:07.900 --> 00:05:14.320
I would just say, try to upgrade to, to Pydantic to run your code.

00:05:14.320 --> 00:05:16.220
See if you get any deprecation warnings.

00:05:16.220 --> 00:05:18.560
If it runs and you don't get them, you're probably fine.

00:05:18.940 --> 00:05:23.300
But if you get errors, then go consult the migration guide.

00:05:23.300 --> 00:05:27.620
If you get deprecation warnings, do the same with, but maybe with slightly less urgency.

00:05:27.620 --> 00:05:30.500
So yeah, there's a bunch of stuff that you can go through.

00:05:30.500 --> 00:05:35.860
One of them was, one that's interesting is they introduced this thing called a type adapter.

00:05:35.860 --> 00:05:38.680
Let me see if there's a section where they talk about it.

00:05:38.680 --> 00:05:38.920
Yeah.

00:05:38.920 --> 00:05:43.360
So now they have this thing called a type adapter, which is pretty cool.

00:05:43.360 --> 00:05:44.320
They have some example.

00:05:44.320 --> 00:05:44.760
There we go.

00:05:44.760 --> 00:05:50.340
It says in Pydantic version one, we had weak support for validating or serializing non-based

00:05:50.340 --> 00:05:52.400
model types, like a list of something.

00:05:52.400 --> 00:05:59.360
So now you can create this instance of a type called a type adapter and you pass the type.

00:05:59.360 --> 00:06:00.240
It adapts.

00:06:00.240 --> 00:06:05.320
So you can say a type adapter of list of int, and then you can just go to it and say validate

00:06:05.320 --> 00:06:05.820
Python.

00:06:05.820 --> 00:06:11.560
And for the example here, they have a list of numbers, but they're in strings, like the list

00:06:11.560 --> 00:06:13.580
string one, string two, string three.

00:06:13.580 --> 00:06:16.680
And then, you know, what it gives you back is just the actual list.

00:06:16.680 --> 00:06:21.220
One, two, three, like all that magical transformation that Pydantic is.

00:06:21.220 --> 00:06:22.220
That's pretty cool.

00:06:22.220 --> 00:06:22.960
Yeah.

00:06:22.960 --> 00:06:24.640
So that's another thing people can check out.

00:06:24.640 --> 00:06:26.720
There's, like I said, this is a huge document.

00:06:26.720 --> 00:06:28.680
People probably want to go check out.

00:06:28.680 --> 00:06:34.180
They've removed a whole bunch of error messages or errors, sorry, error types like Pydantic

00:06:34.180 --> 00:06:36.600
dot errors dot IPV any interface error.

00:06:36.860 --> 00:06:40.820
For example, I'm not sure where they went, though.

00:06:40.820 --> 00:06:42.020
It doesn't explicitly say.

00:06:42.020 --> 00:06:46.340
And they were moved or, you know, mapped over to this other error type.

00:06:46.340 --> 00:06:48.460
But again, it's a huge document.

00:06:48.460 --> 00:06:50.580
I don't want to go through the migration guide for everyone.

00:06:50.580 --> 00:06:51.840
That's not fun.

00:06:51.960 --> 00:06:55.560
But congratulations to the Pydantic team.

00:06:55.560 --> 00:06:57.800
This is really awesome that this is finally here.

00:06:57.800 --> 00:07:00.380
Now we come to the point where we wait.

00:07:00.380 --> 00:07:04.360
Where we wait for all of the Pydantic frameworks.

00:07:04.360 --> 00:07:06.080
Because working with Pydantic is great.

00:07:06.180 --> 00:07:08.060
And you can do cool stuff with Pydantic directly.

00:07:08.060 --> 00:07:12.100
Like you can directly work with it in a Flask app, for example.

00:07:12.100 --> 00:07:19.020
But if you work with FastAPI or Beanie or all these other frameworks that are built on top of it,

00:07:19.020 --> 00:07:23.180
you've got to wait for, you know, they are deep down in the guts of Pydantic a lot of times

00:07:23.180 --> 00:07:24.500
because of the way they work.

00:07:24.500 --> 00:07:26.820
Except for now FastAPI, though.

00:07:26.820 --> 00:07:28.700
FastAPI is already upgraded, right?

00:07:28.700 --> 00:07:29.200
Yeah.

00:07:29.200 --> 00:07:32.900
Is it released or just the beta is out for it?

00:07:32.900 --> 00:07:33.840
I can't remember.

00:07:34.000 --> 00:07:38.660
So FastAPI released version 0.100.0.

00:07:38.660 --> 00:07:39.400
Come on, guys.

00:07:39.400 --> 00:07:40.100
Zero verse still.

00:07:40.100 --> 00:07:41.740
Anyway, four days ago.

00:07:41.740 --> 00:07:55.320
And it does look like the last, like five days ago, we got a merge for adding support for Pydantic 2.002 or something.

00:07:55.320 --> 00:08:00.980
The first couple of versions for Pydantic didn't work with FastAPI, but looks like there were some fixes.

00:08:01.200 --> 00:08:09.460
Wouldn't surprise me if they kind of just held off on announcing the version 2.002 until FastAPI was able to use it.

00:08:09.460 --> 00:08:11.800
Because that's a huge user of it.

00:08:11.800 --> 00:08:13.920
Yeah, it's certainly the biggest user.

00:08:13.920 --> 00:08:16.780
And Samuel and Sebastian work pretty closely together.

00:08:16.780 --> 00:08:18.780
I'm excited.

00:08:18.940 --> 00:08:20.860
I know this is different.

00:08:20.860 --> 00:08:26.100
It might be difficult for people that are already using an old Pydantic to move over, even with the bump.

00:08:26.100 --> 00:08:32.580
But I guess I haven't used Pydantic directly before, and now I'm kind of excited to use it.

00:08:32.580 --> 00:08:37.460
Even with tools like this auto thing that they're using.

00:08:37.460 --> 00:08:38.300
What was that?

00:08:38.300 --> 00:08:39.760
The auto changer?

00:08:40.600 --> 00:08:41.720
The Pydantic?

00:08:41.720 --> 00:08:42.900
No, the one to like...

00:08:42.900 --> 00:08:44.060
Oh, the type adapter.

00:08:44.060 --> 00:08:44.720
Type adapter.

00:08:44.720 --> 00:08:51.300
Yeah, I think that I've got places to use type adapter, even without non-web stuff.

00:08:51.300 --> 00:08:53.160
So I think that's pretty fun.

00:08:53.160 --> 00:08:54.980
Anyway, cool.

00:08:54.980 --> 00:08:55.560
I'm excited.

00:08:55.560 --> 00:09:02.000
Grant, on the audience, does point out, tough luck for base models with an existing model attribute.

00:09:02.000 --> 00:09:08.480
There might be some mechanism to rename that or remap that.

00:09:08.480 --> 00:09:10.740
You know, there's like an alias you can put on them.

00:09:10.740 --> 00:09:15.540
But you say, when you look in the data, it looks like this, even though the name is that.

00:09:15.540 --> 00:09:17.880
But yeah, there might be some trickiness here.

00:09:17.880 --> 00:09:18.340
Yeah.

00:09:18.340 --> 00:09:19.000
Yeah.

00:09:19.000 --> 00:09:21.100
At least at an API level, you could be able to fix it.

00:09:21.100 --> 00:09:23.120
I don't know about the Python code level, if that'll help you.

00:09:23.120 --> 00:09:23.580
All right.

00:09:23.580 --> 00:09:25.000
Well, anyway, big news.

00:09:25.000 --> 00:09:25.840
Big news.

00:09:25.840 --> 00:09:28.120
Pydantic version 2 is out.

00:09:28.120 --> 00:09:33.880
This was on June 30th, but we were off on vacation, Brian.

00:09:33.880 --> 00:09:35.640
Mostly my fault.

00:09:35.640 --> 00:09:36.560
Sorry.

00:09:36.560 --> 00:09:37.840
Well, actually.

00:09:37.840 --> 00:09:38.880
So we didn't cover it.

00:09:38.880 --> 00:09:39.520
It's all right.

00:09:39.520 --> 00:09:42.600
Now that we covered it, now we can cover that FastAPI is caught up.

00:09:42.600 --> 00:09:43.660
Yeah, exactly.

00:09:43.660 --> 00:09:44.740
Wait long enough things.

00:09:44.740 --> 00:09:45.520
It's come together.

00:09:45.520 --> 00:09:52.880
Well, I want to talk about talks a little bit because I learned something new from Hinnick,

00:09:52.880 --> 00:09:54.200
which isn't that unusual.

00:09:54.200 --> 00:09:56.200
I often learn a lot of stuff from him.

00:09:56.780 --> 00:10:02.440
However, there's an article from him saying two ways to turbo charge talks.

00:10:02.440 --> 00:10:08.700
And it just starts right off the bat with saying, no, it's not just run parallel.

00:10:08.700 --> 00:10:11.300
Because actually running parallel is pretty cool.

00:10:11.300 --> 00:10:18.920
And if you don't know about running parallel, I usually just use the talks-p to run parallel.

00:10:19.120 --> 00:10:25.240
If you can run all of your environments in parallel, it's super cool to be able to speed it up.

00:10:25.240 --> 00:10:28.560
That's the awesomest way to speed it up, I think.

00:10:28.560 --> 00:10:33.060
He does note that it's broken for some people.

00:10:33.060 --> 00:10:38.240
So talks for talks for is awesome, and it's got some great new features.

00:10:38.240 --> 00:10:42.520
But apparently for some people, parallel isn't working.

00:10:42.520 --> 00:10:44.320
I'm not one of those people.

00:10:44.320 --> 00:10:49.000
So most of my, all of my projects that can use talks or parallel seems to be working.

00:10:49.000 --> 00:10:51.080
But I'm not using something complicated.

00:10:51.080 --> 00:10:55.480
Apparently it's broken for adders, for instance, or at least it was last time I checked.

00:10:56.120 --> 00:10:59.560
Anyway, so what is he recommending if it's not running in parallel?

00:10:59.560 --> 00:11:00.540
What should you do?

00:11:00.540 --> 00:11:04.500
This is something that I didn't really think about before.

00:11:04.500 --> 00:11:08.960
So one of the things that talks does is for each environment that you set up,

00:11:08.960 --> 00:11:12.080
like say you've got environments for three versions of Python,

00:11:12.080 --> 00:11:22.220
and it will create a source distribution of your library or package for each of those,

00:11:22.220 --> 00:11:25.640
if you're doing a normal, like using talks to test a Python package.

00:11:25.640 --> 00:11:29.660
It'll build a source distribution for each environment.

00:11:29.660 --> 00:11:32.460
Except for that's not really how we use our packages.

00:11:32.460 --> 00:11:37.660
We build it once and throw it up on PyPI, and everybody uses the same one

00:11:37.660 --> 00:11:41.260
if one supports all three versions of Python.

00:11:41.260 --> 00:11:45.300
So he's showing us a way to get around that to say,

00:11:45.300 --> 00:11:49.800
instead of building it on all environments, go ahead and just build the wheel once.

00:11:49.800 --> 00:11:53.860
And so you tell it to build the wheel instead of a source distribution,

00:11:54.280 --> 00:11:56.940
and you tell it where to put it into.

00:11:56.940 --> 00:11:59.620
And there's apparently a command line way to do it,

00:11:59.620 --> 00:12:02.780
but really it's throw it in your toxin file.

00:12:02.780 --> 00:12:07.520
Or if you're using pyproject.toml, you can throw it there too, of course.

00:12:07.520 --> 00:12:12.360
But so there's a wheel build environment that tells you,

00:12:12.360 --> 00:12:14.700
tells tox what directory to stick it in.

00:12:14.700 --> 00:12:19.240
And if it's the same directory for everybody, it'll get used for all environments.

00:12:19.240 --> 00:12:24.300
And this alone sped up quite a few of my workflows, which is really cool.

00:12:24.300 --> 00:12:29.080
Just building it once, using it, and testing it in different Python environments.

00:12:29.080 --> 00:12:30.760
Yeah, that's really excellent.

00:12:30.760 --> 00:12:35.280
Because generally the wheel is not going to vary from 3.9 to 3.10, right?

00:12:35.280 --> 00:12:35.860
Right.

00:12:35.860 --> 00:12:36.760
Yeah.

00:12:37.720 --> 00:12:42.780
In a lot of Python-only packages, you're going to use the same wheel for everything.

00:12:42.780 --> 00:12:47.000
And now there are some that have different ones for different versions, I guess.

00:12:47.000 --> 00:12:48.760
None of the stuff I work with does.

00:12:48.760 --> 00:12:53.420
Okay, so that's the first way to speed it up.

00:12:53.420 --> 00:12:54.420
What's the second way?

00:12:54.580 --> 00:12:59.720
The second way is if you're in one of these camps, especially one of these camps where

00:12:59.720 --> 00:13:04.180
you can't run tox in parallel, you can still run pytest in parallel.

00:13:04.180 --> 00:13:12.420
So he's recommending using pytest xdist as a plugin, and then running pytest dash in auto,

00:13:12.420 --> 00:13:15.180
or you can give it a number of CPUs or whatever.

00:13:15.180 --> 00:13:21.840
And auto just says, pick the number of CPUs you want, and you can run pytest in parallel.

00:13:21.840 --> 00:13:26.720
This actually, if you have a fast test suite, this might slow down your test.

00:13:26.720 --> 00:13:27.360
So be careful.

00:13:27.360 --> 00:13:28.200
Measure it.

00:13:28.200 --> 00:13:30.280
However, he has an example.

00:13:30.280 --> 00:13:36.300
In a lot of CPU-intensive test suites, like, for instance, if you're using Hypothesis,

00:13:36.300 --> 00:13:39.960
and it's running a lot of tests that are similar.

00:13:39.960 --> 00:13:41.080
Yeah.

00:13:41.080 --> 00:13:46.520
So especially if you're using Hypothesis, I recommend trying out running pytest in parallel,

00:13:46.520 --> 00:13:49.740
and it can speed things up significantly.

00:13:50.340 --> 00:13:52.240
He has an example at the bottom.

00:13:52.240 --> 00:13:54.640
Oh, I want to cover some of the other things.

00:13:54.640 --> 00:14:00.120
If you're doing all these tricks, it might muck up your coverage collection.

00:14:00.120 --> 00:14:06.900
So he's got some stuff here to help you through cleaning up your coverage, which is great.

00:14:06.900 --> 00:14:08.960
Skipping down.

00:14:09.300 --> 00:14:21.180
For the adders project, those two tricks, he started out with 257 seconds and got it down to 69 seconds using parallel pytest and building a wheel only.

00:14:21.700 --> 00:14:26.220
I had a test suite that was pretty fast anyway, just, you know, 18 seconds.

00:14:26.220 --> 00:14:28.840
It did take it down to like five seconds.

00:14:28.840 --> 00:14:33.600
So it's, yeah, it's worth it just for the heck of it.

00:14:33.600 --> 00:14:34.100
Why not?

00:14:34.100 --> 00:14:35.020
So thanks.

00:14:35.020 --> 00:14:36.600
Yeah, it's almost five times faster.

00:14:36.600 --> 00:14:37.220
Not bad.

00:14:37.220 --> 00:14:38.080
Four times faster.

00:14:38.080 --> 00:14:38.980
Yeah.

00:14:39.100 --> 00:14:40.060
I mean, right.

00:14:40.060 --> 00:14:43.480
If it's low, you don't really think about it, even if it's multiples.

00:14:43.480 --> 00:14:44.540
So, but.

00:14:44.540 --> 00:14:44.940
Yep.

00:14:44.940 --> 00:14:48.520
And the bigger the project, the more, the more you care, right?

00:14:48.520 --> 00:14:48.980
Yeah.

00:14:49.060 --> 00:14:51.640
And I wasn't using a hypothesis.

00:14:51.640 --> 00:14:54.120
I would like to try this out using hypothesis.

00:14:54.120 --> 00:14:54.880
It's pretty cool.

00:14:54.880 --> 00:14:55.380
Mm-hmm.

00:14:55.380 --> 00:14:55.940
Excellent.

00:14:55.940 --> 00:14:56.420
Good one.

00:14:56.420 --> 00:14:57.100
All right.

00:14:57.100 --> 00:15:05.800
Before we move on to the next item, I have a bit of real-time follow-up, but not real-time follow-up in the traditional sense where we have audience members.

00:15:05.800 --> 00:15:15.240
I just got a message from Roman Wright, who is the creator of Beanie, the async MongoDB ODM based on Pydantic.

00:15:15.660 --> 00:15:24.640
And he said, I am releasing a version of Beanie that supports Pydantic version 2 soon, either this week or next week.

00:15:24.640 --> 00:15:34.780
So, don't want to put him down for a certain time exactly, but just that project is also moving along like FastAPI did to support it.

00:15:34.780 --> 00:15:38.440
And he said it promises to have quite a bit of a speed-up, as you would expect.

00:15:38.440 --> 00:15:39.100
Nice.

00:15:39.100 --> 00:15:39.620
Cool.

00:15:39.620 --> 00:15:41.000
That Beanie's a cool project.

00:15:41.000 --> 00:15:42.420
It absolutely is.

00:15:42.420 --> 00:15:44.780
So, how about something totally different like Pydantic?

00:15:45.240 --> 00:15:52.460
So, this next item is Awesome Pydantic, a curated list of awesome things related to Pydantic.

00:15:52.460 --> 00:15:56.860
So, this is kind of an early-stage project here.

00:15:56.860 --> 00:16:05.080
It got created five months ago or so, but I feel like it needs people out there who have Pydantic things contributing them back.

00:16:05.220 --> 00:16:17.340
For example, do we have, I don't even think like SQL Model is listed here, where SQL Model is created by Sebastian Ramirez based on Pydantic and SQLAlchemy, for example.

00:16:17.340 --> 00:16:20.520
So, there are some notable things though that are worth pointing out here.

00:16:20.640 --> 00:16:24.620
So, we have Transformers and what's cool is it lists all the stars.

00:16:24.620 --> 00:16:27.860
So, Transformers has 106,000 stars.

00:16:27.860 --> 00:16:29.120
Wow.

00:16:29.120 --> 00:16:29.720
That's crazy, Brian.

00:16:29.720 --> 00:16:30.220
Yeah.

00:16:30.220 --> 00:16:34.460
I mean, if you look at CPython, I think it has in the realm of 50,000.

00:16:34.460 --> 00:16:35.420
Flask does as well.

00:16:35.840 --> 00:16:42.420
So, Transformers is the state-of-art natural language processing for PyTorch and TensorFlow based on Pydantic.

00:16:42.420 --> 00:16:44.180
It's more popular than Python.

00:16:44.180 --> 00:16:47.640
Sort of, yes.

00:16:47.740 --> 00:16:53.480
I think, you know, how many people are actually trying to work on Python and the code itself.

00:16:53.480 --> 00:16:54.700
But, yeah, in a sense.

00:16:54.700 --> 00:17:01.120
Spacey, of course, the free open source library for natural NLP, natural language processing.

00:17:01.120 --> 00:17:03.520
It's a pretty cool one.

00:17:03.520 --> 00:17:16.060
Gina, J-I-N-A, is geared towards building search systems for any kind of data, including text, image, audio, video, and more.

00:17:16.060 --> 00:17:17.160
That's pretty excellent.

00:17:17.480 --> 00:17:19.800
Modular design and multilater abstractions.

00:17:19.800 --> 00:17:24.440
You can leverage efficient patterns to build different parts of the system or change them to a flow.

00:17:24.440 --> 00:17:26.600
That sounds pretty interesting, right?

00:17:26.600 --> 00:17:27.140
Yeah.

00:17:27.140 --> 00:17:30.540
Down here, we have the object mapping.

00:17:30.540 --> 00:17:39.320
We have Beanie, as I just called out, an asynchronous Python object document mapper for MongoDB based on Motor and Pydantic, of course.

00:17:39.320 --> 00:17:40.880
What else we got?

00:17:40.880 --> 00:17:47.220
We have data model code generator, which is the foundation of...

00:17:47.220 --> 00:17:50.440
JSON to Pydantic, which I know that we talked about before.

00:17:50.440 --> 00:17:55.420
If you're not familiar with JSON to Pydantic.com, take some JSON, drop it in there.

00:17:55.420 --> 00:17:57.800
You get your JSON output.

00:17:57.800 --> 00:17:59.780
Here's the big question, though, Ryan.

00:17:59.780 --> 00:18:02.120
What version of Pydantic do you get out?

00:18:02.360 --> 00:18:04.020
I'm guessing not the new one.

00:18:04.020 --> 00:18:04.720
I don't know.

00:18:04.720 --> 00:18:05.660
I am as well.

00:18:05.660 --> 00:18:07.020
It probably needs an update, doesn't it?

00:18:07.020 --> 00:18:07.420
Yeah.

00:18:07.940 --> 00:18:10.200
So hopefully that that comes along there.

00:18:10.200 --> 00:18:14.280
But let's stick in model in there as an attribute and see what happens.

00:18:14.280 --> 00:18:15.420
Oh, yeah.

00:18:15.420 --> 00:18:16.140
Nope.

00:18:16.140 --> 00:18:16.720
Not doing it.

00:18:17.060 --> 00:18:22.540
So data model code generator is the CLI equivalent that that thing uses behind the scenes.

00:18:22.540 --> 00:18:23.980
Let's see.

00:18:23.980 --> 00:18:24.980
GoodConf.

00:18:24.980 --> 00:18:33.600
I don't know how many people know that Pydantic has a settings management capability where you can read variables out of environment variables and YAML files and so on.

00:18:33.600 --> 00:18:39.940
So GoodConf, as in GoodConfig, GoodConf is a thin wrapper over Pydantic settings management.

00:18:39.940 --> 00:18:41.400
So that's pretty cool.

00:18:41.400 --> 00:18:46.180
Get a little bit of a cleaner or more opinionated way to work with settings.

00:18:46.180 --> 00:18:51.980
And, of course, FastAPI, Django Ninja are listed here along with some others.

00:18:51.980 --> 00:18:57.080
And I think I'll probably leave it there with that as the shout out for all those items.

00:18:57.080 --> 00:18:58.420
But there's a bunch of cool stuff in here.

00:18:58.420 --> 00:19:01.020
Awesome things you might say that people can check out.

00:19:01.020 --> 00:19:07.900
And also, if you have one of these projects or you're a super fan of one of these projects and it's not listed here, PRs are accepted, I believe.

00:19:07.900 --> 00:19:08.500
Yeah.

00:19:08.500 --> 00:19:09.000
Cool.

00:19:09.000 --> 00:19:09.280
Yeah.

00:19:09.280 --> 00:19:13.280
So that was the next thing in the Pydantic journey of today.

00:19:13.280 --> 00:19:14.980
Nice.

00:19:14.980 --> 00:19:18.820
Well, I'm going to go away from Pydantic again.

00:19:18.820 --> 00:19:23.300
And I want to talk about command line interface tools.

00:19:23.300 --> 00:19:25.100
So I like CLIs.

00:19:25.100 --> 00:19:29.800
I kind of spend a lot of time with a terminal open.

00:19:30.660 --> 00:19:34.540
And so I thought this was a fun article from Simon Willison.

00:19:34.540 --> 00:19:37.780
CLI tools hidden in the Python standard library.

00:19:37.780 --> 00:19:43.740
And I think it's also really cool that Simon does a shout out to Seth Larson.

00:19:43.740 --> 00:19:44.720
Hey, Seth.

00:19:44.720 --> 00:19:57.120
That Seth pointed out that GZip, the Python GZip module, you can use it as a CLI tool, especially handy if you're on Windows and don't have GZip built in.

00:19:57.360 --> 00:20:00.240
You can say Python dash M GZip.

00:20:00.240 --> 00:20:05.920
And you can with a --decompress and give it a GZip file and it'll decompress it for you.

00:20:05.920 --> 00:20:07.900
There's a whole bunch of other stuff you can do with it.

00:20:08.120 --> 00:20:09.360
But it's pretty neat.

00:20:09.360 --> 00:20:11.000
Kind of fun.

00:20:11.000 --> 00:20:20.460
So Simon saw this, that Seth pointed this out and thought, wonder what other stuff is hiding in the standard library.

00:20:20.680 --> 00:20:25.840
So he talks about using ripgrap to search through the standard library.

00:20:25.840 --> 00:20:37.900
And I think it's kind of fun that he shows you how he went about looking for all these things and then parsed out some stuff because he didn't really care about tests or turtle or idle.

00:20:38.440 --> 00:20:41.200
Because, yes, we know that those have applications.

00:20:41.200 --> 00:20:42.820
But what's left?

00:20:42.820 --> 00:20:44.360
What's left is quite a few.

00:20:44.360 --> 00:20:55.340
There's quite a few Python modules within standard library or packages, modules, that do these init things or have a command line thing.

00:20:55.340 --> 00:20:58.540
And so what's kind of interesting is what he's looking for.

00:20:58.540 --> 00:21:07.040
He's looking for packages that have a if name equals main because that little trick of if to under name equals to under main,

00:21:07.300 --> 00:21:12.760
that means that if you get if it's imported, it just use it runs like a library.

00:21:12.760 --> 00:21:17.520
But if it's not if it's not imported, if it's run directly, then this will be true.

00:21:17.520 --> 00:21:22.720
And whatever's in there will run as as a command and you can do the dash M thing.

00:21:22.720 --> 00:21:30.080
And so one of the few fun things that he found, I did know about the server thing, but I always forget about it.

00:21:30.080 --> 00:21:34.260
Python dash M HTTP dot server and you can give it a port.

00:21:34.260 --> 00:21:35.180
Yeah, that's nice.

00:21:35.260 --> 00:21:41.540
I use that sometimes when things complain and trying to work with like JavaScript and a static HTML file or something.

00:21:41.540 --> 00:21:45.440
It's like you need a server for this to work because it wants to just do forward slash something.

00:21:45.440 --> 00:21:49.560
So I'll just run that and then like open up the file right there.

00:21:49.560 --> 00:21:52.520
And then it then it starts working instead of trying to get a lot of trouble.

00:21:52.520 --> 00:21:53.840
Run that in the directory.

00:21:53.840 --> 00:21:54.500
You're working on it.

00:21:54.720 --> 00:21:54.900
Yeah.

00:21:54.900 --> 00:22:00.720
And if you if you want to one of the fun things with this is if you want to just learn a little basic HTML,

00:22:00.720 --> 00:22:09.080
maybe JavaScript in CSS, you can just use this as a local server to just play around with using all three together.

00:22:09.080 --> 00:22:10.360
It's kind of fun.

00:22:10.360 --> 00:22:11.000
Yeah.

00:22:11.000 --> 00:22:13.440
Or maybe you want to do PyScript and not actually do JavaScript.

00:22:13.940 --> 00:22:14.380
Yeah.

00:22:14.380 --> 00:22:14.380
Yeah.

00:22:14.380 --> 00:22:14.600
Yeah.

00:22:14.600 --> 00:22:15.100
Maybe.

00:22:15.100 --> 00:22:18.540
So let's go through a few more fun things.

00:22:18.540 --> 00:22:19.460
Base64.

00:22:19.460 --> 00:22:25.580
You can you can use dash M base64 to either encode decode or both.

00:22:25.580 --> 00:22:30.300
I'm not sure what both at the same time means to try that out.

00:22:30.300 --> 00:22:31.020
See what it does.

00:22:31.020 --> 00:22:32.440
Maybe you just get the answer back.

00:22:32.440 --> 00:22:34.020
Maybe.

00:22:36.220 --> 00:22:47.500
I'll open up a async REPL, which where you can use a wait and instead of async I O run, you can call use a wait directly.

00:22:47.500 --> 00:22:48.540
It's kind of fun.

00:22:48.540 --> 00:22:50.580
Neat to try out.

00:22:50.580 --> 00:22:52.960
Try out async stuff on the REPL.

00:22:52.960 --> 00:22:55.140
That sounds hard, but it might be fun.

00:22:55.140 --> 00:22:58.100
Tokenize just as a fun thing.

00:22:58.100 --> 00:23:05.420
You can use the token Python tokenizer on a Python file just to see what the tokens look like.

00:23:06.140 --> 00:23:07.280
That's kind of neat.

00:23:07.280 --> 00:23:09.140
AST, I probably would use more.

00:23:09.140 --> 00:23:12.880
So you can use to dash M AST on a Python file.

00:23:12.880 --> 00:23:19.720
It'll give you a printout of the abstract syntax tree, which is nice.

00:23:19.720 --> 00:23:21.720
This is super handy.

00:23:21.720 --> 00:23:22.460
I didn't know about this.

00:23:22.460 --> 00:23:23.480
Jason.tool.

00:23:23.480 --> 00:23:26.940
It's a pretty printer for Jason.

00:23:26.940 --> 00:23:33.500
So you can just pipe some Jason into it and get some nice formatted output.

00:23:33.500 --> 00:23:34.240
Kind of nice.

00:23:35.260 --> 00:23:36.800
Yeah, that's really what I wanted to highlight.

00:23:36.800 --> 00:23:37.560
Those calendar.

00:23:37.560 --> 00:23:40.640
I knew about this a long time ago and I totally forgot about it.

00:23:40.640 --> 00:23:45.400
Python dash M calendar will print an ASCII calendar of the current year.

00:23:45.400 --> 00:23:47.100
Why would you need this?

00:23:47.100 --> 00:23:48.760
But anyway.

00:23:49.180 --> 00:23:50.020
Because you can, Brian.

00:23:50.020 --> 00:23:50.840
Because you can.

00:23:50.840 --> 00:23:51.180
Because you can.

00:23:51.180 --> 00:23:51.440
Because you can.

00:23:51.440 --> 00:24:04.860
I used this way, way, way long ago to try to and then parsed it afterwards to hook up a dynamic calendar application with clickable dates.

00:24:04.860 --> 00:24:05.800
It was terrible.

00:24:05.800 --> 00:24:07.980
It was a terrible application, but it was fun.

00:24:07.980 --> 00:24:08.400
Anyway.

00:24:09.720 --> 00:24:11.440
I kind of like it, though.

00:24:11.440 --> 00:24:12.540
I do kind of like it.

00:24:12.540 --> 00:24:13.780
So.

00:24:13.780 --> 00:24:15.120
Oh, NNTP.

00:24:15.120 --> 00:24:17.440
Do you use news groups much?

00:24:17.440 --> 00:24:18.640
I don't use news groups.

00:24:18.640 --> 00:24:19.260
I used to.

00:24:19.260 --> 00:24:20.540
I used to news group.

00:24:20.540 --> 00:24:25.600
But apparently you can do NNTP and it prints out like some articles.

00:24:25.600 --> 00:24:27.180
Interesting.

00:24:27.380 --> 00:24:29.880
Guess you want to read from 1994.

00:24:29.880 --> 00:24:33.780
So one thing I think would.

00:24:33.780 --> 00:24:36.480
I think it might be kind of cool if somebody had.

00:24:36.480 --> 00:24:42.260
Creates a meta package for this kind of stuff based on this article.

00:24:42.260 --> 00:24:48.700
What I mean is if you set an entry point in your Python package and you put it into.

00:24:48.700 --> 00:24:54.300
You install it into your virtual environment or you pip x install it and it becomes a CLI command.

00:24:54.300 --> 00:24:54.580
Right.

00:24:54.580 --> 00:24:56.100
So, for example, pyjoke.

00:24:56.100 --> 00:24:56.640
Right.

00:24:56.680 --> 00:24:59.380
I could just go up here and type pyjoke.

00:24:59.380 --> 00:25:01.860
Oh, pip x install pyjoke first.

00:25:01.860 --> 00:25:04.660
And it'll give you some kind of.

00:25:04.660 --> 00:25:05.740
It'll just call that function.

00:25:05.740 --> 00:25:06.080
Right.

00:25:06.080 --> 00:25:07.920
Is it jokes perhaps?

00:25:07.920 --> 00:25:08.500
I'm not sure.

00:25:08.500 --> 00:25:08.980
Yeah.

00:25:08.980 --> 00:25:14.920
So if I type pyjoke after installing a pip x install, it says obfuscated reality mappers or

00:25:14.920 --> 00:25:16.280
items can be useful database tools.

00:25:16.280 --> 00:25:16.720
Right.

00:25:16.720 --> 00:25:16.940
So.

00:25:16.940 --> 00:25:18.000
Right.

00:25:18.000 --> 00:25:24.340
But the fact now I have a single command I give instead of, you know, Python dash m pyjoke,

00:25:24.340 --> 00:25:25.420
I just type pyjoke.

00:25:25.420 --> 00:25:25.760
Right.

00:25:25.820 --> 00:25:30.460
So it would be cool if somebody took this and created something that I could pip x install

00:25:30.460 --> 00:25:35.200
that gave me every single one of these in a more concise way to call it.

00:25:35.200 --> 00:25:41.540
So instead of python dash m dash, you know, calendar or just calendar, I can just type calendar and it runs this.

00:25:41.540 --> 00:25:42.080
Right.

00:25:42.080 --> 00:25:45.480
Or I could just type acp dot server and it runs runs that.

00:25:45.820 --> 00:25:50.600
So there's something for people to try to come up with a cleaner way.

00:25:50.600 --> 00:25:53.980
There might be some name conflicts.

00:25:53.980 --> 00:25:58.900
You might need to go up with a pg zip or something right like that, which is would be a little bit annoying.

00:25:58.900 --> 00:26:06.080
But yeah, anyway, it'd be fun if somebody turned these into like a simpler series of commands and just like you got Python, you got you basically have all these.

00:26:06.080 --> 00:26:07.780
Yeah, it might be kind of difficult.

00:26:07.780 --> 00:26:15.100
Maybe a fun, fun thing to try because you can't just import the module and run it because then that part doesn't run.

00:26:15.100 --> 00:26:16.020
So you have to.

00:26:16.020 --> 00:26:16.520
Yeah.

00:26:16.760 --> 00:26:17.200
Right.

00:26:17.200 --> 00:26:22.820
You could you have to set up a bunch of entry points in your package and then give them names and then basically map them over to calling.

00:26:22.820 --> 00:26:23.440
Yeah.

00:26:23.440 --> 00:26:28.800
But Henry, out of the audience, I thought the point is you didn't have to install anything to use these.

00:26:28.800 --> 00:26:30.180
Right.

00:26:30.180 --> 00:26:31.760
True, true, true.

00:26:31.760 --> 00:26:35.120
But you have got to make a bunch of aliases if you want them real short.

00:26:35.120 --> 00:26:37.760
Then anyway, very cool.

00:26:37.760 --> 00:26:39.320
Cheat sheet, maybe a cheat sheet.

00:26:39.320 --> 00:26:40.100
Yes.

00:26:40.100 --> 00:26:41.080
Kind of a cheat sheet.

00:26:41.080 --> 00:26:42.280
Thanks, Simon.

00:26:42.280 --> 00:26:43.020
Thank you, Seth.

00:26:43.020 --> 00:26:43.540
This is cool.

00:26:43.540 --> 00:26:44.220
All right.

00:26:44.220 --> 00:26:46.400
Well, those are our things.

00:26:46.400 --> 00:26:49.200
So do you have anything extra to share with us?

00:26:49.200 --> 00:26:50.640
I do have some extras.

00:26:50.640 --> 00:26:51.420
Back to Pydantic.

00:26:51.420 --> 00:27:01.780
So over at Talk Python Training, we have a brand new course, a seven hour course for MongoDB called MongoDB with Async Python.

00:27:01.780 --> 00:27:02.460
Oh, fun.

00:27:02.460 --> 00:27:13.640
And the whole idea is it takes Beanie and it's kind of a comprehensive introduction to MongoDB, but approaches it from using Beanie, which is Pydantic plus Async and Await.

00:27:13.640 --> 00:27:17.340
Talking to MongoDB, how do you use indexes?

00:27:17.340 --> 00:27:18.700
How do you write queries?

00:27:18.700 --> 00:27:19.840
What are the different styles?

00:27:19.840 --> 00:27:26.880
We end up building a FastAPI API around that as well as do load testing with Locus.

00:27:26.880 --> 00:27:35.020
So if you want to kind of see end to end how to build a modern Python app based on MongoDB and Beanie, check it out.

00:27:35.340 --> 00:27:36.340
Links in the show notes.

00:27:36.340 --> 00:27:38.560
Just talkpython.fm.

00:27:38.560 --> 00:27:40.960
Click on courses and you'll find it over there.

00:27:40.960 --> 00:27:42.420
So I'm really, really excited.

00:27:42.420 --> 00:27:43.940
I've been working for a long time on this.

00:27:43.940 --> 00:27:45.700
It has an early bird special.

00:27:45.700 --> 00:27:53.880
So for today for a week, you get $10 off or something relative in your own currency off.

00:27:53.880 --> 00:27:56.560
If you get it this week and then it goes up a little bit next week.

00:27:56.560 --> 00:27:57.920
So really, really fun course.

00:27:57.920 --> 00:27:59.340
There's tons of stuff to learn here.

00:27:59.340 --> 00:28:03.340
People can check it out if they're interested in this.

00:28:03.340 --> 00:28:09.880
And as I said, I was just talking to Roman and Beanie should get its Pydantic version to upgrade as well.

00:28:09.880 --> 00:28:12.720
So this should only get to be a better story as we go on.

00:28:12.720 --> 00:28:13.340
Very cool.

00:28:13.340 --> 00:28:16.080
Now, is this one that you did or was this somebody else?

00:28:17.120 --> 00:28:17.840
This is me.

00:28:17.840 --> 00:28:18.400
Okay.

00:28:18.400 --> 00:28:21.300
And again, this is like what's powering Python by stat.fm.

00:28:21.300 --> 00:28:23.100
This is what's powering talkpython.fm.

00:28:23.100 --> 00:28:26.240
Like those kinds of, it's the same tech behind the scenes.

00:28:26.240 --> 00:28:27.060
So pretty excellent.

00:28:27.060 --> 00:28:27.700
Nice.

00:28:27.700 --> 00:28:28.980
Another one.

00:28:28.980 --> 00:28:31.400
Did you know that PyPI has a blog?

00:28:31.400 --> 00:28:32.400
No.

00:28:32.400 --> 00:28:33.300
It does.

00:28:33.300 --> 00:28:35.500
This one's been sitting around for a little bit.

00:28:35.500 --> 00:28:39.800
I meant to talk about it, but it kept getting edged out by more urgent things.

00:28:40.320 --> 00:28:47.480
But back in March, end of March, there's now a blog.pypi.org that you can go to.

00:28:47.480 --> 00:28:49.580
So definitely check that out.

00:28:49.580 --> 00:28:54.960
One of the things that's a little bit of a hassle is if you take this, like blog.pypi.org,

00:28:54.960 --> 00:29:01.740
and you drop it into your RSS reader, like reader with two E's for me, it says there's no blog here.

00:29:01.740 --> 00:29:03.660
Is there no blog here?

00:29:05.160 --> 00:29:06.980
Go to the bottom.

00:29:06.980 --> 00:29:12.660
There's a blog.pypi.org slash feed underscore RSS underscore created dot XML.

00:29:12.660 --> 00:29:17.000
That is what you got to put into your RSS reader if your RSS reader doesn't find it.

00:29:17.000 --> 00:29:22.140
Because there's no meta tag for the RSS capabilities.

00:29:22.140 --> 00:29:27.040
Maybe someone's over there listening, go and throw that in, make that a little bit quicker and simpler for people to find.

00:29:27.040 --> 00:29:32.260
But if you want to subscribe to it, that's the business right there.

00:29:32.260 --> 00:29:38.780
Well, if you go to scroll, yeah, there is a little icon at the bottom right-hand corner, a little RSS thing.

00:29:38.780 --> 00:29:40.680
So all the way down.

00:29:40.680 --> 00:29:41.020
Yeah, right there.

00:29:41.020 --> 00:29:41.460
Yeah.

00:29:41.460 --> 00:29:42.460
So copy link.

00:29:42.460 --> 00:29:43.320
Is that the same address?

00:29:43.320 --> 00:29:45.080
Yeah, that's the same address I suggested.

00:29:45.080 --> 00:29:45.680
Cool.

00:29:45.680 --> 00:29:54.160
So people, yeah, but like if there's a meta tag you can put, so like you'll get a little pop-up in your different browsers and other things that browse it.

00:29:54.160 --> 00:29:56.760
Say, hey, just click here to subscribe or to auto-detect it.

00:29:56.760 --> 00:29:57.080
Yeah.

00:29:57.080 --> 00:29:57.500
Cool.

00:29:57.500 --> 00:29:57.920
Yeah.

00:29:57.920 --> 00:29:58.880
Excellent.

00:29:58.880 --> 00:30:01.740
One, yes, one final thing of my extras.

00:30:01.740 --> 00:30:04.260
Oh my gosh, there's a lot of pop-ups on Twitter these days.

00:30:04.260 --> 00:30:21.140
On Twitter, Lucas Schlinger pointed out, says, wow, meta, as in Facebook, meta commits to dedicate three engineering years to implement the removal of the GIL from Python and fix upcoming compatibility and performance issues as a result of that.

00:30:21.140 --> 00:30:22.260
Oh, awesome.

00:30:22.560 --> 00:30:23.360
How about that?

00:30:23.360 --> 00:30:32.460
So I believe, I believe this is the, 703 is the no-kill work done by Sam Gross, who is at meta.

00:30:32.460 --> 00:30:39.720
And there's been some hesitation of like, well, if we adopt this, how much things that are based on C and Rust start breaking?

00:30:40.120 --> 00:30:46.980
And so it sounds like, you know, with a couple of paragraphs of information that they're saying, look, we'll both fix C-Python.

00:30:46.980 --> 00:30:48.380
Just do it anyway and we'll fix it later.

00:30:48.380 --> 00:30:50.420
Well, I think it's like, we'll fix C-Python.

00:30:50.420 --> 00:30:58.160
And then maybe, maybe I'm inferring here is like, and we'll fix the popular packages based on it that might run into trouble.

00:30:58.500 --> 00:30:59.100
I'm not sure.

00:30:59.100 --> 00:31:13.340
But yeah, so basically three, three years, I think they were saying one to two years of actual calendar time, but with multiple people who are either core developers or very close to core developers to make this happen.

00:31:13.340 --> 00:31:13.960
Cool.

00:31:13.960 --> 00:31:14.440
Yeah.

00:31:14.440 --> 00:31:16.020
So that's big news.

00:31:16.020 --> 00:31:16.800
And those are my extras.

00:31:16.800 --> 00:31:17.460
Nice.

00:31:17.880 --> 00:31:21.320
I wanted to say congrats to Seth Larson.

00:31:21.320 --> 00:31:25.320
So we mentioned him at the beginning of the show and a couple of times during the show.

00:31:25.320 --> 00:31:30.840
Seth is the, the new security developer in residence.

00:31:30.840 --> 00:31:32.040
So yay.

00:31:32.040 --> 00:31:33.100
Congrats, Seth.

00:31:33.100 --> 00:31:37.740
So there's a, we're linking to an announcement on the PSF blog.

00:31:37.740 --> 00:31:41.520
And he also has a, oops, that's blank.

00:31:41.520 --> 00:31:45.760
He has a blog announcing the change also, a blog post.

00:31:45.760 --> 00:31:47.560
So pretty cool.

00:31:47.560 --> 00:31:49.320
I'm excited to see that.

00:31:49.320 --> 00:31:50.240
So congrats, Seth.

00:31:50.240 --> 00:31:51.180
Yeah.

00:31:51.180 --> 00:31:51.780
Congrats, Seth.

00:31:51.780 --> 00:31:59.080
And there's the, you know, there's all this discussion about supply chain vulnerabilities and security and, and all of those things.

00:31:59.080 --> 00:32:00.460
So it's, it's really excellent.

00:32:00.460 --> 00:32:05.160
And just security in general, but thanks for coming on to make things better.

00:32:05.160 --> 00:32:05.660
Yeah.

00:32:05.660 --> 00:32:07.580
And nice sweatshirt, Seth.

00:32:07.580 --> 00:32:08.520
Cool.

00:32:08.520 --> 00:32:14.080
The other thing I wanted to announce is I'm pretty excited about this last bit.

00:32:14.080 --> 00:32:16.060
Python people is live.

00:32:16.060 --> 00:32:18.720
So, Python people are these Python people.

00:32:18.720 --> 00:32:19.820
You speak of people.

00:32:19.820 --> 00:32:27.200
So I, you know, the, the first part of like, I kind of, the, there's a couple of things that were inspiring for this.

00:32:27.200 --> 00:32:31.120
So it's a new, it's a new, podcast, Python people.fm.

00:32:31.120 --> 00:32:34.800
So far there's one episode with Michael Kennedy, but they're you.

00:32:34.800 --> 00:32:36.640
Um, but there's a whole bunch more coming.

00:32:36.640 --> 00:32:46.680
And, I, I used to like mostly just want the tech stuff off a tech podcast, but I kind of really liked the first part of talk Python where you just like get to know people.

00:32:46.960 --> 00:32:49.140
Um, and I thought we should do more of that.

00:32:49.140 --> 00:32:56.340
So, I wanted to, the, wanted to get a podcast together where we mostly focus on the people and less about the tech.

00:32:56.480 --> 00:32:59.460
So, that's what Python people is about.

00:32:59.460 --> 00:32:59.880
Yeah.

00:32:59.880 --> 00:33:04.000
We talked for like 45 minutes or something, no, 28 minutes and 44 seconds.

00:33:04.000 --> 00:33:06.740
And we almost don't talk about Python at all.

00:33:06.740 --> 00:33:06.960
Right.

00:33:07.620 --> 00:33:07.940
Yeah.

00:33:07.940 --> 00:33:08.480
A little bit.

00:33:08.480 --> 00:33:08.700
Yeah.

00:33:08.700 --> 00:33:09.800
A little bit about what you do.

00:33:09.800 --> 00:33:16.900
Um, so I thought it'd be fun to like pull in, like why, I mean, everybody knows who you are, but for some people, like, what is your connection to Python?

00:33:16.900 --> 00:33:18.740
What is your connection to Python community?

00:33:18.740 --> 00:33:20.680
But then also just more about you.

00:33:20.680 --> 00:33:25.600
Like we learned to have about your motorcycling and about, about being a pool shark.

00:33:25.600 --> 00:33:27.280
Who knew?

00:33:27.280 --> 00:33:28.560
Who knew?

00:33:28.560 --> 00:33:29.120
Who knew?

00:33:29.120 --> 00:33:30.960
And we talk about skateboarding with you.

00:33:30.960 --> 00:33:34.980
So there's like a ton of other, other cool things that people might be interested in.

00:33:34.980 --> 00:33:35.240
Yeah.

00:33:35.240 --> 00:33:36.500
So check it out, please.

00:33:36.500 --> 00:33:39.360
Um, and that's all I've got for.

00:33:39.360 --> 00:33:41.640
What if somebody else wants to be a Python people?

00:33:41.640 --> 00:33:42.720
Can they reach out to you?

00:33:42.720 --> 00:33:44.080
Oh, I would be a Python person.

00:33:44.080 --> 00:33:44.660
Yeah.

00:33:44.660 --> 00:33:47.760
I should put a, like a, be a person or I don't know.

00:33:47.760 --> 00:33:48.940
Be a person.

00:33:48.940 --> 00:33:51.080
Oh, maybe be a guest or something.

00:33:51.080 --> 00:33:51.840
Uh, yeah.

00:33:51.840 --> 00:33:52.960
Just reach out to me.

00:33:52.960 --> 00:34:02.240
Um, I, you don't have to be as, as well known as Michael because who is, but, I'd love to have, just like everybody on.

00:34:02.240 --> 00:34:02.760
Why not?

00:34:02.760 --> 00:34:03.080
Yeah.

00:34:03.080 --> 00:34:04.120
Good luck with the show.

00:34:04.120 --> 00:34:05.300
It's off to a good start.

00:34:05.520 --> 00:34:07.620
And it was really fun to be a part of that.

00:34:07.620 --> 00:34:08.360
Cool.

00:34:08.360 --> 00:34:08.940
All right.

00:34:08.940 --> 00:34:10.460
You ready for some, Oh, really?

00:34:10.460 --> 00:34:11.500
Oh yeah.

00:34:11.500 --> 00:34:12.300
We have a joke.

00:34:12.300 --> 00:34:13.560
We have a joke.

00:34:13.560 --> 00:34:17.220
So this is part of the, the, Oh, really book series.

00:34:17.220 --> 00:34:21.340
Uh, you know, O'Reilly always has like an animal or something on there.

00:34:21.340 --> 00:34:23.120
And so there's the joke series.

00:34:23.120 --> 00:34:23.660
Oh, really?

00:34:23.660 --> 00:34:24.900
Question mark.

00:34:24.900 --> 00:34:27.380
It's kind of, a riffs on that a little bit.

00:34:27.380 --> 00:34:29.480
This one is Kubernetes for beginners.

00:34:29.480 --> 00:34:30.980
It says, what could go wrong?

00:34:30.980 --> 00:34:35.440
And this is in the dev oops category of tech books.

00:34:35.440 --> 00:34:36.360
Yeah.

00:34:36.360 --> 00:34:39.320
And then the cover is, it says containers that'll fix it.

00:34:39.320 --> 00:34:43.480
And it has that giant evergreen container ship stuck sideways in the Suez canal.

00:34:43.480 --> 00:34:44.560
What could go wrong?

00:34:44.560 --> 00:34:45.180
Yeah.

00:34:45.620 --> 00:34:49.160
And just the, just the title Kubernetes for beginners.

00:34:49.160 --> 00:34:52.700
No, beginners aren't there yet.

00:34:52.700 --> 00:34:53.480
So yeah.

00:34:53.480 --> 00:34:53.620
Yeah.

00:34:53.620 --> 00:34:55.980
They probably shouldn't be doing Kubernetes, but that'll fix it.

00:34:55.980 --> 00:34:56.360
Yeah.

00:34:56.360 --> 00:34:56.860
Awesome.

00:34:57.000 --> 00:34:57.220
All right.

00:34:57.220 --> 00:34:58.700
Then you got a joke for us as well, right?

00:34:58.700 --> 00:34:59.260
Oh yeah.

00:34:59.260 --> 00:35:02.000
Just a, just a random one I heard the other day.

00:35:02.000 --> 00:35:03.160
I thought it was terrible.

00:35:03.160 --> 00:35:04.740
So I thought I'd share it with the world.

00:35:04.740 --> 00:35:07.520
So five ants rent an apartment together.

00:35:07.520 --> 00:35:10.100
They invite five other ants to share the rent.

00:35:10.100 --> 00:35:11.500
Also, they got tons of room.

00:35:11.500 --> 00:35:13.700
So now they're tenants.

00:35:13.700 --> 00:35:14.740
Ah, tenants.

00:35:14.740 --> 00:35:15.580
Got it.

00:35:15.580 --> 00:35:17.020
I love it.

00:35:17.020 --> 00:35:18.080
All right.

00:35:18.080 --> 00:35:21.620
I got one more in that vein for you since I just installed Pi joke there.

00:35:21.620 --> 00:35:22.220
Okay.

00:35:22.220 --> 00:35:25.980
Single key, single word on the CLI for me.

00:35:26.080 --> 00:35:27.660
So pirates go arg.

00:35:27.660 --> 00:35:29.720
Computer buyers go arg V.

00:35:29.720 --> 00:35:32.720
How about that?

00:35:32.720 --> 00:35:33.480
Pretty bad.

00:35:33.480 --> 00:35:33.900
Yeah.

00:35:33.900 --> 00:35:34.800
Yeah.

00:35:34.800 --> 00:35:35.820
But also true.

00:35:35.820 --> 00:35:36.780
They do that.

00:35:36.780 --> 00:35:37.460
Yeah.

00:35:37.460 --> 00:35:38.080
Maybe.

00:35:38.080 --> 00:35:39.020
I don't know.

00:35:39.020 --> 00:35:39.800
All right.

00:35:39.800 --> 00:35:40.100
Cool.

00:35:40.100 --> 00:35:41.880
Uh, fun talking with you again.

00:35:41.880 --> 00:35:47.320
Um, thanks to everybody in the, in the, interwebs and on the YouTubes to watching us.

00:35:47.320 --> 00:35:47.780
Yeah.

00:35:47.780 --> 00:35:48.540
Thanks everyone.

00:35:48.540 --> 00:35:49.660
Good to be back with you, Brian.

00:35:49.660 --> 00:35:50.160
Bye.

