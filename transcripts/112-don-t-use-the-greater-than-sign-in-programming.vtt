
00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.600 --> 00:00:09.900
This is episode 112, recorded January 9th, 2019.


00:00:09.900 --> 00:00:10.700
I'm Michael Kennedy.


00:00:10.700 --> 00:00:11.500
And I'm Brian Okken.


00:00:11.500 --> 00:00:12.400
Hey, Brian. How you doing?


00:00:12.400 --> 00:00:15.100
I am great. It's a wonderful January.


00:00:15.100 --> 00:00:19.200
We're starting to get back into the swing of things. The news is starting to flow again.


00:00:19.200 --> 00:00:19.700
Yes.


00:00:19.700 --> 00:00:26.000
Yeah, absolutely. Now, before we get into it, I just want to say thank you to Datadog for sponsoring the show,


00:00:26.000 --> 00:00:29.400
as they are many of our shows. So tell you more about them later.


00:00:29.400 --> 00:00:37.400
Right now, I want to just think back to what it was like to have my programming and computer science assignments graded.


00:00:37.400 --> 00:00:45.400
They were like, "Here is an algorithm. Write the output with a pencil on a piece of paper."


00:00:45.400 --> 00:00:46.400
We've come a long way from there, right?


00:00:46.400 --> 00:00:53.400
Yeah. I mean, I even remember, I guess, turning in floppy disks and code printouts and stuff like that.


00:00:53.400 --> 00:00:55.400
Right. Because what are you going to do? Go for them?


00:00:55.400 --> 00:00:59.160
First thing I want to talk about is a thing called NBGrader.


00:00:59.160 --> 00:01:01.720
So that's short for Notebook Grader.


00:01:01.720 --> 00:01:03.920
This, I just ran across this.


00:01:03.920 --> 00:01:05.760
This is just so totally cool.


00:01:05.760 --> 00:01:07.880
I'm just going to read their little thing.


00:01:07.880 --> 00:01:12.300
There was an article about it in Journal of Open Source Education.


00:01:12.300 --> 00:01:13.640
Beginning of the summary is,


00:01:13.640 --> 00:01:15.600
NBGrader is a flexible tool for


00:01:15.600 --> 00:01:18.780
creating and grading assignments in the Jupyter Notebook.


00:01:18.780 --> 00:01:23.400
NBGrader allows instructors to create a single master copy of an assignment,


00:01:23.400 --> 00:01:26.540
including tests and canonical solutions.


00:01:26.540 --> 00:01:28.980
From the master copy, a student version is generated


00:01:28.980 --> 00:01:31.980
without the solutions, thus obviating,


00:01:31.980 --> 00:01:34.500
that's totally a smarty word, anyway,


00:01:34.500 --> 00:01:37.540
thus obviating the need to maintain two separate versions.


00:01:37.540 --> 00:01:41.060
NBGrader also automatically grades submitted assignments


00:01:41.060 --> 00:01:43.740
by executing the notebooks and storing the results


00:01:43.740 --> 00:01:45.220
of the test in a database.


00:01:45.220 --> 00:01:47.620
After auto-grading, instructors can manually grade


00:01:47.620 --> 00:01:50.060
free responses and provide partial credit


00:01:50.060 --> 00:01:54.660
using the FormGrader Jupyter Notebook extension.


00:01:54.660 --> 00:01:56.580
Finally, instructors can use NBGrader


00:01:56.580 --> 00:01:59.900
to leave personalized feedback for each student submission,


00:01:59.900 --> 00:02:02.780
including comments as well as detailed error information.


00:02:02.780 --> 00:02:03.900
- That sounds super useful.


00:02:03.900 --> 00:02:04.860
- I totally want to play with it,


00:02:04.860 --> 00:02:06.380
even though I'm not a teacher.


00:02:06.380 --> 00:02:09.820
We're also linking to the NBGrader documentation


00:02:09.820 --> 00:02:12.180
that has a little intro video on how it all works.


00:02:12.180 --> 00:02:14.740
And wow, it just looks totally cool.


00:02:14.740 --> 00:02:16.260
That seems like an awesome way


00:02:16.260 --> 00:02:18.340
to grade computer science stuff.


00:02:18.340 --> 00:02:22.140
And you could grade pretty much anything that is reasonable


00:02:22.140 --> 00:02:24.980
to compute within a Jupyter notebook, right?


00:02:24.980 --> 00:02:28.620
So I guess that people would have to have some Python


00:02:28.620 --> 00:02:30.940
or some sort of skill where they interact with it,


00:02:30.940 --> 00:02:33.920
but maybe that could be really simple,


00:02:33.920 --> 00:02:36.220
like just put an answer or a number


00:02:36.220 --> 00:02:39.420
or something into a cell that then gets stored and checked.


00:02:39.420 --> 00:02:42.340
But the thing that was kind of a concern for me


00:02:42.340 --> 00:02:43.820
as you're describing it was,


00:02:43.820 --> 00:02:48.220
well, what if there's like a super simple mistake


00:02:48.220 --> 00:02:50.860
you make, and then the answer is way off,


00:02:50.860 --> 00:02:52.220
so you just get it wrong, right?


00:02:52.220 --> 00:02:54.260
But the fact that you can go back and give partial credit


00:02:54.260 --> 00:02:57.260
and evaluate it, that sounds pretty cool.


00:02:57.260 --> 00:02:59.460
- Like a lot of the stuff, if you've got tests in place


00:02:59.460 --> 00:03:01.740
where it just checks their code,


00:03:01.740 --> 00:03:03.300
and all the people that got it right,


00:03:03.300 --> 00:03:06.380
you don't have to really go back and double check that stuff.


00:03:06.380 --> 00:03:09.060
Maybe spot check to make sure they're not all writing


00:03:09.060 --> 00:03:12.020
the same answer or something, but it looks like a lot of fun.


00:03:12.020 --> 00:03:12.840
- Yeah, that's cool.


00:03:12.840 --> 00:03:14.740
I was a TA in college and I had to grade a lot of


00:03:14.740 --> 00:03:16.620
calculus tests and stuff.


00:03:16.620 --> 00:03:20.900
This seems really lovely compared to the alternative, honestly.


00:03:20.900 --> 00:03:21.700
It's great.


00:03:21.700 --> 00:03:24.020
Sometimes when people are doing their assignments,


00:03:24.020 --> 00:03:25.220
they can get pretty upset.


00:03:25.220 --> 00:03:26.380
Things aren't working out.


00:03:26.380 --> 00:03:27.380
It's really frustrating.


00:03:27.380 --> 00:03:27.820
Yeah.


00:03:27.820 --> 00:03:28.660
They might even swear.


00:03:28.660 --> 00:03:29.700
They might.


00:03:29.700 --> 00:03:32.340
And they might do it in a public forum,


00:03:32.340 --> 00:03:36.820
or maybe they do it in a GitHub commit that is going to be public,


00:03:36.820 --> 00:03:38.380
and you don't want it there.


00:03:38.380 --> 00:03:40.100
So you might want to check that.


00:03:40.100 --> 00:03:44.940
And there's a couple ways, actually, to check for profanity in Python.


00:03:44.940 --> 00:03:50.060
And there's a new library called profanity-check.


00:03:50.060 --> 00:03:52.340
So what's cool about this--


00:03:52.340 --> 00:03:55.340
obviously, you could say, does it have these seven words


00:03:55.340 --> 00:03:56.420
or whatever.


00:03:56.420 --> 00:03:59.220
But this one takes AI and applies it


00:03:59.220 --> 00:04:01.860
to this problem, basically.


00:04:01.860 --> 00:04:05.500
It takes a linear SVM model trained


00:04:05.500 --> 00:04:11.460
on 200,000 human-labeled samples of clean and profane text.


00:04:11.460 --> 00:04:13.420
So this string is bad.


00:04:13.420 --> 00:04:16.460
this sentence is good, this phrase is bad,


00:04:16.460 --> 00:04:17.740
this phrase is good.


00:04:17.740 --> 00:04:21.900
And then it uses that to understand how similar


00:04:21.900 --> 00:04:24.700
whatever you're looking at is to something like


00:04:24.700 --> 00:04:26.660
one of these bad phrases.


00:04:26.660 --> 00:04:27.500
Isn't that cool?


00:04:27.500 --> 00:04:28.320
- Yeah, great.


00:04:28.320 --> 00:04:30.580
- So one of the problems with a lot of the systems out there


00:04:30.580 --> 00:04:32.020
that are more simple is they just have like


00:04:32.020 --> 00:04:34.660
a explicitly bad words.


00:04:34.660 --> 00:04:38.620
But as you can imagine, there are many, many bad words


00:04:38.620 --> 00:04:41.760
that you might forget or there's some slightly different


00:04:41.760 --> 00:04:44.640
of saying some other thing and they fall through.


00:04:44.640 --> 00:04:46.960
So this one turns out to catch a lot of them.


00:04:46.960 --> 00:04:48.960
And it's also super, super fast.


00:04:48.960 --> 00:04:50.120
So there's another one out there


00:04:50.120 --> 00:04:53.560
called profanity-filter, which is more sophisticated


00:04:53.560 --> 00:04:55.040
than a lot of these, you know,


00:04:55.040 --> 00:04:57.040
like just are these words in here, checks.


00:04:57.040 --> 00:05:01.200
This one is similar, but because it creates this model


00:05:01.200 --> 00:05:02.560
and just uses the result,


00:05:02.560 --> 00:05:05.600
it's actually like three to 400 times faster


00:05:05.600 --> 00:05:06.440
than the other one.


00:05:06.440 --> 00:05:07.260
- That's cool.


00:05:07.260 --> 00:05:10.600
- If you have 300 to 400 times faster, not percent, times,


00:05:10.600 --> 00:05:14.120
Right, like 13 seconds versus 24 milliseconds


00:05:14.120 --> 00:05:15.040
type of difference.


00:05:15.040 --> 00:05:16.000
That's pretty awesome.


00:05:16.000 --> 00:05:17.520
- And the speed really matters if you're,


00:05:17.520 --> 00:05:21.320
especially if the amount of text you're filtering is huge.


00:05:21.320 --> 00:05:23.080
- Right, or a whole bunch of stuff real time


00:05:23.080 --> 00:05:24.400
or something like that.


00:05:24.400 --> 00:05:25.760
And so it's super simple to use.


00:05:25.760 --> 00:05:27.520
It has basically two functions.


00:05:27.520 --> 00:05:30.260
It calls predict, whether or not something is bad,


00:05:30.260 --> 00:05:31.800
or give the probability.


00:05:31.800 --> 00:05:33.440
So you can call predict and give it some text


00:05:33.440 --> 00:05:36.000
and it'll give you like zero or one.


00:05:36.000 --> 00:05:37.560
Or you can say, give me the probability


00:05:37.560 --> 00:05:40.480
and it'll say this is, we think this is 70 point,


00:05:40.480 --> 00:05:45.120
you know, 76.3% bad, do without what you will.


00:05:45.120 --> 00:05:47.560
So you can take it as black and white or gray


00:05:47.560 --> 00:05:50.000
and then just decide how gray you'll let it get.


00:05:50.000 --> 00:05:53.080
- Okay, so I'm like, I'm redoing some, one of my websites.


00:05:53.080 --> 00:05:56.640
Maybe I'll do this on my own blog posts


00:05:56.640 --> 00:05:58.700
and make sure that I haven't,


00:05:58.700 --> 00:06:01.760
just curious to see what my confidence level is


00:06:01.760 --> 00:06:02.580
that they're clean.


00:06:02.580 --> 00:06:03.680
- Yeah, exactly.


00:06:03.680 --> 00:06:05.800
I think a lot of people don't have this problem,


00:06:05.800 --> 00:06:07.800
but if your problem is to take user input


00:06:07.800 --> 00:06:10.080
and evaluate it for this characteristic,


00:06:10.080 --> 00:06:11.560
Like that would be a complete pain, right?


00:06:11.560 --> 00:06:14.920
And so here's a pip install one-liner sort of thing


00:06:14.920 --> 00:06:17.400
you can do that will help a lot, I think.


00:06:17.400 --> 00:06:19.040
- Yeah, neat.


00:06:19.040 --> 00:06:19.880
- Yes, indeed.


00:06:19.880 --> 00:06:21.300
All right, what's the next one?


00:06:21.300 --> 00:06:23.220
Something we've never talked about on this show, right?


00:06:23.220 --> 00:06:25.500
- We've actually talked, of course,


00:06:25.500 --> 00:06:27.640
talked about packaging quite a bit.


00:06:27.640 --> 00:06:29.160
So dealing with packages,


00:06:29.160 --> 00:06:31.400
if you're dealing with Python a lot,


00:06:31.400 --> 00:06:34.280
like the difference between a module and a package


00:06:34.280 --> 00:06:37.760
in the file system and then an installable package


00:06:37.760 --> 00:06:39.280
that you can distribute,


00:06:39.280 --> 00:06:40.960
that all just becomes second nature


00:06:40.960 --> 00:06:43.360
and we don't even really think about it anymore.


00:06:43.360 --> 00:06:45.360
But as I'm working with different people


00:06:45.360 --> 00:06:47.480
and different people are starting to work in Python


00:06:47.480 --> 00:06:49.760
around you, sometimes you have a,


00:06:49.760 --> 00:06:52.340
you got somebody that you need to explain this to.


00:06:52.340 --> 00:06:54.960
And it's hard to remember all the,


00:06:54.960 --> 00:06:56.760
it's hard for me to remember like all,


00:06:56.760 --> 00:06:59.520
what it was like to not know all this stuff.


00:06:59.520 --> 00:07:00.680
So I bookmarked this,


00:07:00.680 --> 00:07:03.560
an article called an introduction to Python packages


00:07:03.560 --> 00:07:05.280
for absolute beginners.


00:07:05.280 --> 00:07:08.000
And it's just a nice gentle discussion


00:07:08.000 --> 00:07:10.160
about somebody trying to share some code


00:07:10.160 --> 00:07:12.380
and then describes modules and packages


00:07:12.380 --> 00:07:14.880
and using packages and installing


00:07:14.880 --> 00:07:18.640
and what import means and a bunch of stuff like that.


00:07:18.640 --> 00:07:20.940
So I think this would be good either to hand around


00:07:20.940 --> 00:07:23.560
or just review before you go explain it to somebody.


00:07:23.560 --> 00:07:25.320
- Right, we get so excited about jumping in


00:07:25.320 --> 00:07:27.440
and talking about Poetry or PipMF


00:07:27.440 --> 00:07:29.560
or all these other things and it's just like,


00:07:29.560 --> 00:07:32.120
wait, what are these, you know, when you're new,


00:07:32.120 --> 00:07:33.160
it's like, what are these things?


00:07:33.160 --> 00:07:35.400
Like, how do I make a package?


00:07:35.400 --> 00:07:37.640
You know, how do I share it?


00:07:37.640 --> 00:07:41.480
You know, people probably start out with just like one giant Python file.


00:07:41.480 --> 00:07:45.320
And like, that's the whole, the whole app is just crammed into the one file even.


00:07:45.320 --> 00:07:45.560
Right.


00:07:45.560 --> 00:07:50.360
And people share the code by just emailing it around or copying it into


00:07:50.360 --> 00:07:51.680
different repos and stuff.


00:07:51.680 --> 00:07:54.080
And there's, yeah, there are better ways.


00:07:54.080 --> 00:07:59.560
To me, it's a little annoying that the word package has multiple meanings


00:07:59.560 --> 00:08:03.760
because it's Python calls just a directory within a knit in it.


00:08:03.760 --> 00:08:04.960
That's a package.


00:08:05.480 --> 00:08:08.780
But that's not what PyPI is full of.


00:08:08.780 --> 00:08:09.680
- Right.


00:08:09.680 --> 00:08:10.760
- Distributions and stuff. - Like wheels


00:08:10.760 --> 00:08:12.100
and all that stuff, right?


00:08:12.100 --> 00:08:13.720
Like, yeah, a whole nother level.


00:08:13.720 --> 00:08:16.840
I do agree that those are like oddly the same and different.


00:08:16.840 --> 00:08:18.200
Yeah, it's definitely confusing.


00:08:18.200 --> 00:08:19.040
- So this is good.


00:08:19.040 --> 00:08:22.720
- So if you're confused about how your app is working,


00:08:22.720 --> 00:08:24.440
we know a company that can help, right Brian?


00:08:24.440 --> 00:08:25.280
- Yes, we do.


00:08:25.280 --> 00:08:26.100
- Datadog.


00:08:26.100 --> 00:08:28.400
So Datadog sponsored the show, as I said at the opening.


00:08:28.400 --> 00:08:30.880
They're a cloud scale monitoring platform


00:08:30.880 --> 00:08:32.960
that brings together all your metrics, logs,


00:08:32.960 --> 00:08:35.460
distributed traces all into one place.


00:08:35.460 --> 00:08:39.660
and it will auto instrument things like Django or Flask or Postgres


00:08:39.660 --> 00:08:44.140
and let you track requests across those different pieces of infrastructure


00:08:44.140 --> 00:08:47.900
and put them all back together to know why it was slow, where it was working,


00:08:47.900 --> 00:08:49.700
things like that. So that's pretty awesome.


00:08:49.700 --> 00:08:53.220
Check them out at pythonbytes.fm/datadog


00:08:53.220 --> 00:08:57.220
Go do a free trial and they will send you a cool Datadog t-shirt.


00:08:57.220 --> 00:08:59.900
So definitely check them out. It helps support the show.


00:08:59.900 --> 00:09:01.020
Plus the t-shirts are cool.


00:09:01.020 --> 00:09:03.420
And the t-shirts are very cool. They have a cute little dog on them.


00:09:03.420 --> 00:09:09.260
Now, I'm going to bring up something on here that we don't spend a whole lot of time on


00:09:09.260 --> 00:09:11.580
and it may be it's even a little bit controversial.


00:09:11.580 --> 00:09:12.580
What do you think?


00:09:12.580 --> 00:09:13.580
I'm looking forward to talking about this.


00:09:13.580 --> 00:09:14.580
Yeah, I figured you are.


00:09:14.580 --> 00:09:17.020
I figured you have an opinion one way or the other.


00:09:17.020 --> 00:09:26.540
So the idea is in Python, we can usually get away with replacing our dependencies.


00:09:26.540 --> 00:09:30.700
Like if we're talking to a database or a web service, we can, you know, kind of cancel


00:09:30.700 --> 00:09:36.460
that out so we can test our code by doing like some sort of patch operation or something


00:09:36.460 --> 00:09:38.980
to that effect, right, we can get it out of the way.


00:09:38.980 --> 00:09:43.260
But this guy named Yasha good sir, hopefully I got that closely right.


00:09:43.260 --> 00:09:49.400
So there's a message that said, Hey, I've been reviewing all of the Python dependency


00:09:49.400 --> 00:09:53.940
injection and IOC and version control containers around Python.


00:09:53.940 --> 00:09:56.520
And I know that some folks say it's not even necessary.


00:09:56.520 --> 00:09:59.200
on large apps, I think there's a lot of value


00:09:59.200 --> 00:10:01.360
in making your dependencies more explicit.


00:10:01.360 --> 00:10:02.200
- Interesting.


00:10:02.200 --> 00:10:03.340
- Yeah, so he sent us a big long list


00:10:03.340 --> 00:10:04.960
of all the options, basically.


00:10:04.960 --> 00:10:07.320
And he did a bunch of good research for us.


00:10:07.320 --> 00:10:08.160
- Awesome.


00:10:08.160 --> 00:10:10.760
- Yeah, so I'll just read off a couple of them.


00:10:10.760 --> 00:10:12.720
Here we got five or six.


00:10:12.720 --> 00:10:15.120
So we have one called Dependency Injector,


00:10:15.120 --> 00:10:17.560
which apparently requires some tricks


00:10:17.560 --> 00:10:18.720
to get installed on Windows,


00:10:18.720 --> 00:10:20.620
but he couldn't get it quite working.


00:10:20.620 --> 00:10:21.860
But it looks pretty good.


00:10:21.860 --> 00:10:23.840
I'm kind of mediocre on that one.


00:10:23.840 --> 00:10:27.480
There's Injector, which is fairly Java-esque.


00:10:27.480 --> 00:10:32.480
There's Pinject, probably P-I-N-J-E-C-T,


00:10:32.480 --> 00:10:34.400
something like that.


00:10:34.400 --> 00:10:37.280
And this one had kind of gone unmaintained,


00:10:37.280 --> 00:10:39.880
but there's, for like five years, long time.


00:10:39.880 --> 00:10:41.680
But now there's new folks working on it,


00:10:41.680 --> 00:10:42.640
so that's kind of cool,


00:10:42.640 --> 00:10:45.240
and it seems like it's doing a lot.


00:10:45.240 --> 00:10:47.720
There's Python Inject,


00:10:47.720 --> 00:10:50.160
which has got some really nice testing features.


00:10:50.160 --> 00:10:53.520
It's got like built-in mocking stuff and things like that.


00:10:53.520 --> 00:10:55.960
Are you starting to notice a similarity in the name?


00:10:55.960 --> 00:10:57.200
Naming?


00:10:57.200 --> 00:10:58.480
- Yeah.


00:10:58.480 --> 00:10:59.880
- There's another one that's just here


00:10:59.880 --> 00:11:03.200
more for completeness sake, dipy,


00:11:03.200 --> 00:11:05.880
but it only works on Python 3.4 apparently,


00:11:05.880 --> 00:11:09.120
so appreciate the comment here is like,


00:11:09.120 --> 00:11:12.240
this is a legacy, so I can't really be touching on this.


00:11:12.240 --> 00:11:13.080
Like, that's no good.


00:11:13.080 --> 00:11:15.920
And then the next two I think are really quite good.


00:11:15.920 --> 00:11:19.300
There's serum, which I think actually


00:11:19.300 --> 00:11:21.480
is a pretty interesting thing to look at


00:11:21.480 --> 00:11:24.800
because what it does is it primarily is driven


00:11:24.800 --> 00:11:27.300
through class decorators.


00:11:27.300 --> 00:11:31.200
Okay, so what you do is you go to like some class here


00:11:31.200 --> 00:11:35.400
and you say this class is a dependency.


00:11:35.400 --> 00:11:39.960
So you put an @dependency on to the class definition.


00:11:39.960 --> 00:11:43.240
And then later on, you can put an @inject


00:11:43.240 --> 00:11:46.560
on top of either a function call or a class.


00:11:46.560 --> 00:11:51.200
And if the class has like say, like a log field,


00:11:51.200 --> 00:11:53.640
a class level log field, it will automatically


00:11:53.640 --> 00:11:56.680
be set to an instance of that dependency


00:11:56.680 --> 00:11:58.800
based on the type annotation.


00:11:58.800 --> 00:12:02.040
There's an interesting way that it kind of uses type annotations


00:12:02.040 --> 00:12:04.120
and class decorators to link that back together.


00:12:04.120 --> 00:12:04.800
Yeah.


00:12:04.800 --> 00:12:05.160
OK.


00:12:05.160 --> 00:12:05.660
OK.


00:12:05.660 --> 00:12:08.760
And then the final one is this thing called HAPS.


00:12:08.760 --> 00:12:12.880
And HAPS is pretty cool, and it's really lightweight and quite simple,


00:12:12.880 --> 00:12:15.640
also based on type annotation.


00:12:15.640 --> 00:12:17.560
So a lot of them are taking advantage of the--


00:12:17.560 --> 00:12:19.720
I think it's probably either 3.5 or 3.6.


00:12:19.720 --> 00:12:22.960
So I think it's 3.6 because of some of the ways it's using type annotations.


00:12:22.960 --> 00:12:29.800
But the point is using the modern features of Python 3 to help figure out a lot of the


00:12:29.800 --> 00:12:32.400
configuration and how stuff wires together.


00:12:32.400 --> 00:12:36.760
That's the survey that Yosha gave us.


00:12:36.760 --> 00:12:37.760
Thank you for that.


00:12:37.760 --> 00:12:38.760
That was cool.


00:12:38.760 --> 00:12:42.480
Now, you want to have a quick chat about whether Python needs dependency injection?


00:12:42.480 --> 00:12:43.480
What do you think?


00:12:43.480 --> 00:12:48.520
I'm still confused as to what the problem is that it's trying to solve is my thing.


00:12:48.520 --> 00:12:49.520
I hear you.


00:12:49.520 --> 00:12:54.200
Let me try to talk about the other side, although I find myself not doing this very often, so


00:12:54.200 --> 00:12:57.840
for what it's worth, I don't do dependency injection a lot.


00:12:57.840 --> 00:13:00.920
So I think the fundamental, let's do it a couple steps.


00:13:00.920 --> 00:13:06.120
I think the fundamental starting point is it's trying to write object-oriented Python


00:13:06.120 --> 00:13:11.440
or even functions following the open-close principle, which is one of the solid principles.


00:13:11.440 --> 00:13:13.200
And it's pretty interesting, this principle.


00:13:13.200 --> 00:13:17.560
It says that software entities like classes and functions should be open for extension


00:13:17.560 --> 00:13:21.080
but closed for modification, which is like, what the heck does that mean?


00:13:21.080 --> 00:13:25.480
Basically, I should be able to change the behavior of this class or this function without


00:13:25.480 --> 00:13:30.040
touching the source code to modify it, which kind of sounds like wait, how do you do that?


00:13:30.040 --> 00:13:31.420
How's that possible?


00:13:31.420 --> 00:13:35.680
But imagine like it has like a logging feature.


00:13:35.680 --> 00:13:39.200
Instead of just internally creating one, if you could pass in the logger, you could pass


00:13:39.200 --> 00:13:42.240
in different loggers changing the behavior of how it logs, right?


00:13:42.240 --> 00:13:44.480
So open close principle, that's how it works, right?


00:13:44.480 --> 00:13:47.880
I think the general motivation for all of these frameworks


00:13:47.880 --> 00:13:50.040
is they're like, that's cool, I wanna do that,


00:13:50.040 --> 00:13:52.080
it's good for testing because I could pass in


00:13:52.080 --> 00:13:54.920
like a fake logger or like a mock database,


00:13:54.920 --> 00:13:56.280
I could pass that in, right?


00:13:56.280 --> 00:13:58.720
And not touch the database.


00:13:58.720 --> 00:14:01.120
And I think that's generally a good feature,


00:14:01.120 --> 00:14:02.000
a good way to do things.


00:14:02.000 --> 00:14:04.640
The problem is, if you do that at low level stuff


00:14:04.640 --> 00:14:06.760
and at all the different layers of your app,


00:14:06.760 --> 00:14:09.680
at the top you gotta pass like 20 things


00:14:09.680 --> 00:14:12.160
to the top level things so it can like distribute them down


00:14:12.160 --> 00:14:14.960
as it creates all the objects further down the graph, right?


00:14:14.960 --> 00:14:17.680
So then people have come up with IOC containers,


00:14:17.680 --> 00:14:20.960
which like, get registered for what I need one of these,


00:14:20.960 --> 00:14:22.160
I really give it one of those,


00:14:22.160 --> 00:14:23.440
and then I create this object


00:14:23.440 --> 00:14:25.400
by giving it three of these things at once.


00:14:25.400 --> 00:14:28.480
And that starts to get really hard in my mind


00:14:28.480 --> 00:14:32.200
to know like, okay, what is being done here?


00:14:32.200 --> 00:14:35.160
Like I see a bunch of abstract types and I can't even tell.


00:14:35.160 --> 00:14:36.640
- An example of like,


00:14:36.640 --> 00:14:39.640
you don't know what database you're gonna use.


00:14:39.640 --> 00:14:47.640
Another, you can do the injection thing, but it kind of ripples through a whole bunch of layers of code is the part that I don't like.


00:14:47.640 --> 00:15:00.040
Whereas another way to do this is to kind of bypass all of the middle stuff and at a top level have, and like Flask, I think Flask does this sort of a thing.


00:15:00.440 --> 00:15:09.040
And this is a common design is to define, instantiate the real objects at an application level,


00:15:09.040 --> 00:15:11.340
and just set those where they need to be set.


00:15:11.340 --> 00:15:13.840
So there's like a, whatever the real database is.


00:15:13.840 --> 00:15:18.740
Right. Go look up the service for the database and everybody can ask that thing to give it the database, right?


00:15:18.740 --> 00:15:25.240
And then everybody just uses the same interface, and we don't need to pass it through all the levels of constructors and stuff.


00:15:25.240 --> 00:15:27.240
It can just kind of bypass all of that.


00:15:27.740 --> 00:15:31.340
I guess then because that's how I generally do things.


00:15:31.340 --> 00:15:36.260
And then for testing, yeah, I'm okay with patching and monkey patching and stuff like


00:15:36.260 --> 00:15:37.260
that.


00:15:37.260 --> 00:15:38.260
So I hear you.


00:15:38.260 --> 00:15:42.340
I think in Python, it is certainly something that's open more for debate because we do


00:15:42.340 --> 00:15:46.740
have these alternative ways to accomplish the same thing like monkey patching.


00:15:46.740 --> 00:15:51.660
Now I don't know, I'm kind of a fan of the open close principle in general, but I do


00:15:51.660 --> 00:15:56.580
think it can just become like too much when you put it all together.


00:15:56.580 --> 00:16:00.900
And certainly I've worked on some applications that did this all over the place, and it was


00:16:00.900 --> 00:16:04.780
some of the most frustrating code I've ever had to work through, because it was just like


00:16:04.780 --> 00:16:05.780
every step.


00:16:05.780 --> 00:16:09.660
There's four things working together, and I don't know what any of them are right now


00:16:09.660 --> 00:16:13.580
because of some configuration setting somewhere other than that.


00:16:13.580 --> 00:16:14.580
So I don't know.


00:16:14.580 --> 00:16:16.700
I'm kind of on the fence.


00:16:16.700 --> 00:16:20.060
Some parts of this I think are cool, and some I think can go too far.


00:16:20.060 --> 00:16:23.500
But I guess check out HAPS if this kind of stuff is interesting to you.


00:16:23.500 --> 00:16:24.820
It is pretty well done.


00:16:24.820 --> 00:16:29.820
I think that one of the places for it is if people are really used to using this kind of a model,


00:16:29.820 --> 00:16:32.820
and then coming to Python, yeah, you can do it here too.


00:16:32.820 --> 00:16:34.820
It's just I'm not sure I'm there.


00:16:34.820 --> 00:16:40.820
Yeah, I think there's simpler things in IOC containers, but this podcast is probably a little short if we're going into them.


00:16:40.820 --> 00:16:44.820
But it's certainly an interesting thing to think about, and here's a bunch of options.


00:16:44.820 --> 00:16:45.820
Yep, cool.


00:16:45.820 --> 00:16:52.820
You know, after all that, Brian, I feel like I just need something gentle, like a gentle conversation about a soft, fuzzy animal.


00:16:52.820 --> 00:16:55.820
Yeah, like a gentle introduction to pandas.


00:16:55.820 --> 00:16:58.820
Yes, well, maybe not an animal, but yeah, something gentle. Tell us about pandas.


00:16:58.820 --> 00:17:04.820
So this is another kind of a newbie thing, but we're starting to use pandas data frames at work,


00:17:04.820 --> 00:17:10.820
and I really kind of needed a "pretend I'm just starting out," which I am,


00:17:10.820 --> 00:17:14.820
and kind of tell me how these things work.


00:17:14.820 --> 00:17:17.820
And so this is a, it's called a gentle introduction to pandas,


00:17:17.820 --> 00:17:23.820
but it's really a gentle introduction to the data structures, series, and data frame.


00:17:23.820 --> 00:17:29.340
The series are interesting. I think it's just a precursor to try to jump you into data frames.


00:17:29.340 --> 00:17:34.940
That's where the real fun gets starts to happen. Goes through about a half an article talking about


00:17:34.940 --> 00:17:40.380
arrays, series, how do you create series from arrays and dictionaries. And I didn't know you


00:17:40.380 --> 00:17:47.500
could create a series from just a scalar and give it a different index and it'll like fill it in.


00:17:47.500 --> 00:17:48.500
That's pretty cool.


00:17:48.500 --> 00:17:49.500
Oh, that is cool.


00:17:49.500 --> 00:17:50.500
Yeah.


00:17:50.500 --> 00:17:54.780
But then it jumps into data frames and then talks about sorting and slicing and how do


00:17:54.780 --> 00:17:57.820
you select things by label or position.


00:17:57.820 --> 00:18:02.920
And then one of the things and how easy it is to get the statistics on columns and then


00:18:02.920 --> 00:18:06.560
how to get things in and out of data frames.


00:18:06.560 --> 00:18:08.180
So importing and exporting.


00:18:08.180 --> 00:18:12.160
And then, you know, where you take it from there is depends on your problem space.


00:18:12.160 --> 00:18:16.740
But this is kind of a really good, why do we call these things data frames and why do


00:18:16.740 --> 00:18:17.980
we care about them.


00:18:17.980 --> 00:18:20.580
If you need to understand them, this is a decent article.


00:18:20.580 --> 00:18:22.700
- Yeah, if you need to understand them, 15 minutes.


00:18:22.700 --> 00:18:26.300
This is kind of a no-fluff, keep it simple one.


00:18:26.300 --> 00:18:28.420
Nice little article by Wilson Busaca.


00:18:28.420 --> 00:18:29.660
Hold on.


00:18:29.660 --> 00:18:32.180
Let's see, Medium tells me it's a five minute read,


00:18:32.180 --> 00:18:35.180
but I bet Medium's not taking into account the code.


00:18:35.180 --> 00:18:36.980
So 15 minutes, how about that?


00:18:36.980 --> 00:18:37.980
- Yeah, I think so.


00:18:37.980 --> 00:18:39.900
- Right, so this last one I have for you, Brian,


00:18:39.900 --> 00:18:44.240
I think it's gonna be a little bit of a shock.


00:18:44.240 --> 00:18:46.720
It'll come across a little bit weird at first,


00:18:46.720 --> 00:18:48.380
But the more you look at it, the more it


00:18:48.380 --> 00:18:50.180
starts to sound appealing, let's say.


00:18:50.180 --> 00:18:50.680
Yeah.


00:18:50.680 --> 00:18:52.280
All right, so I'm going to give you some advice.


00:18:52.280 --> 00:18:53.820
I'm going to tell you a bit about it.


00:18:53.820 --> 00:18:56.080
So the advice-- you also get all sorts of advice,


00:18:56.080 --> 00:18:59.000
like don't format your code like this.


00:18:59.000 --> 00:19:02.660
Don't have a bunch of multiple--


00:19:02.660 --> 00:19:06.000
if this is equal to this value and that value and that value,


00:19:06.000 --> 00:19:07.240
maybe do an end test.


00:19:07.240 --> 00:19:08.880
So there's like sort of Pythonic ways


00:19:08.880 --> 00:19:11.160
to do conditionals and whatnot.


00:19:11.160 --> 00:19:13.840
The advice here is to never--


00:19:13.840 --> 00:19:15.860
not almost never-- says don't use


00:19:15.860 --> 00:19:18.500
the greater than sign in programming.


00:19:18.500 --> 00:19:19.560
- Yeah. - It's crazy, right?


00:19:19.560 --> 00:19:21.420
- It seems like kind of a bold statement.


00:19:21.420 --> 00:19:22.900
I'm like, well, we have it.


00:19:22.900 --> 00:19:24.620
It must be useful somewhere.


00:19:24.620 --> 00:19:27.380
- It must be useful, and why would we not wanna use it?


00:19:27.380 --> 00:19:30.460
So this is an article by a good friend of mine,


00:19:30.460 --> 00:19:32.980
Llewellyn Falco, who I've known for a long time,


00:19:32.980 --> 00:19:34.460
but someone else sent me this article,


00:19:34.460 --> 00:19:37.060
which I thought was a pretty interesting coincidence.


00:19:37.060 --> 00:19:39.980
And Llewellyn has a really interesting way


00:19:39.980 --> 00:19:42.900
of looking at straightforward stuff


00:19:42.900 --> 00:19:46.160
and then just getting it down to its essence.


00:19:46.160 --> 00:19:48.220
So he says, "Let's look at this problem.


00:19:48.220 --> 00:19:50.620
"Let's suppose I wanna check whether a number,


00:19:50.620 --> 00:19:52.960
"let's call it x, it's a variable,


00:19:52.960 --> 00:19:55.560
"is between five and 10."


00:19:55.560 --> 00:19:58.600
There are a lot of ways that we can do this.


00:19:58.600 --> 00:20:02.880
We could say x greater than five and 10 greater than x,


00:20:02.880 --> 00:20:06.360
or we could say x greater than five and x less than 10.


00:20:06.360 --> 00:20:08.420
Those are equivalent,


00:20:08.420 --> 00:20:11.960
but why should you choose one over the other?


00:20:11.960 --> 00:20:15.200
Well, he lists off these six different ways of doing this.


00:20:15.200 --> 00:20:16.560
So it's actually, here's all the ways.


00:20:16.560 --> 00:20:18.720
Oh no, wait, look, one of them is wrong.


00:20:18.720 --> 00:20:20.480
Go back and figure out which one is wrong.


00:20:20.480 --> 00:20:22.480
And it's like not very obvious.


00:20:22.480 --> 00:20:23.720
You know, you kind of got to go through


00:20:23.720 --> 00:20:26.280
and think through every little bit.


00:20:26.280 --> 00:20:27.840
All right, so this is, look,


00:20:27.840 --> 00:20:29.880
if you remove the greater than sign,


00:20:29.880 --> 00:20:32.240
there's actually only two ways to say this.


00:20:32.240 --> 00:20:34.800
X less than 10 and five less than X,


00:20:34.800 --> 00:20:36.400
which is kind of weird,


00:20:36.400 --> 00:20:39.640
or five less than X and X less than 10.


00:20:39.640 --> 00:20:41.760
So in that last one, it's cool


00:20:41.760 --> 00:20:43.680
because the variable you're trying to test


00:20:43.680 --> 00:20:46.660
between five and 10 is literally between


00:20:46.660 --> 00:20:48.120
the five and the 10 in that statement.


00:20:48.120 --> 00:20:49.640
Like it's in text, it's between,


00:20:49.640 --> 00:20:51.400
and it's actually between.


00:20:51.400 --> 00:20:55.460
So here you can test like this containment interval bit


00:20:55.460 --> 00:20:57.440
completely with the no greater than.


00:20:57.440 --> 00:20:58.620
- That's how I code.


00:20:58.620 --> 00:21:02.480
I think of, especially, well, especially with numbers,


00:21:02.480 --> 00:21:05.280
I think of the, that all of the comparisons


00:21:05.280 --> 00:21:07.400
need to kind of be on the number line.


00:21:07.400 --> 00:21:09.460
You can think about them easier.


00:21:09.460 --> 00:21:12.300
I've never really seen it as put in place as a rule,


00:21:12.300 --> 00:21:14.460
kind of a rule of thumb of just don't use


00:21:14.460 --> 00:21:15.580
the greater than sign.


00:21:15.580 --> 00:21:16.460
- Yeah, it's really interesting.


00:21:16.460 --> 00:21:19.420
And this analogy back to the number line is perfect


00:21:19.420 --> 00:21:21.900
'cause it's like, well, where do you want the variable


00:21:21.900 --> 00:21:22.900
to be relative to this?


00:21:22.900 --> 00:21:24.340
So if you want it to be between,


00:21:24.340 --> 00:21:27.260
then as you say, like five less than X, X less than 10,


00:21:27.260 --> 00:21:29.060
right, so it's between.


00:21:29.060 --> 00:21:31.400
If you wanna test that it's outside there,


00:21:31.400 --> 00:21:33.420
you could do the same thing, X less than five


00:21:33.420 --> 00:21:35.980
or 10 less than X, and you put the variable


00:21:35.980 --> 00:21:37.620
outside the numbers, right?


00:21:37.620 --> 00:21:44.020
So you can do this number line sort of relative bit with both and and or and containment and


00:21:44.020 --> 00:21:45.660
not contained in and things like that.


00:21:45.660 --> 00:21:50.340
We'd kind of be remiss if we didn't mention that this article is referencing all programming


00:21:50.340 --> 00:21:51.580
languages.


00:21:51.580 --> 00:21:55.820
If you're doing Python, of course, you would just say, five is less than x is less than


00:21:55.820 --> 00:21:56.820
10.


00:21:56.820 --> 00:21:57.820
You don't need the and.


00:21:57.820 --> 00:21:58.820
Nice.


00:21:58.820 --> 00:22:02.560
And also somebody said, OK, I'm all for I follow you on this.


00:22:02.560 --> 00:22:04.620
This is great.


00:22:04.620 --> 00:22:06.060
And I'm with you.


00:22:06.060 --> 00:22:08.200
"How do you say I would like all the numbers


00:22:08.200 --> 00:22:12.140
"greater than one without the greater than sign?"


00:22:12.140 --> 00:22:16.500
And so the answer is, of course, one less than X.


00:22:16.500 --> 00:22:19.180
- Yeah, there's times where it's a little,


00:22:19.180 --> 00:22:21.940
that's why it's not, it's more of a rule of thumb,


00:22:21.940 --> 00:22:23.860
I think, because there's times where it just,


00:22:23.860 --> 00:22:27.260
it doesn't look right, and you have to go for maintenance.


00:22:27.260 --> 00:22:30.420
If it just looks weird, then change it.


00:22:30.420 --> 00:22:32.980
- I brought this in because I thought it was interesting,


00:22:32.980 --> 00:22:34.420
and when I first read it, I'm like,


00:22:34.420 --> 00:22:36.420
"Well, that's dumb advice. What is this?"


00:22:36.420 --> 00:22:37.420
You know what I mean?


00:22:37.420 --> 00:22:40.420
And I read it, and I'm like, "Actually, no, this makes a lot of sense."


00:22:40.420 --> 00:22:42.420
A lot of the time, but it's...


00:22:42.420 --> 00:22:45.420
I agree, if you have one thing, you want to say, "X is greater than 1,"


00:22:45.420 --> 00:22:48.420
you know, don't twist around so you don't have to have the greater than sign.


00:22:48.420 --> 00:22:50.420
Just, like, say the most straightforward thing.


00:22:50.420 --> 00:22:54.420
But if you're doing more complicated comparisons, then I think it's worthwhile.


00:22:54.420 --> 00:22:59.420
Yeah. Like, I would say, like, for instance, a series of if clauses,


00:22:59.420 --> 00:23:00.420
if you have a...


00:23:00.420 --> 00:23:07.060
And you're not really testing both ends if you're doing like, if X is greater than the max, then do something.


00:23:07.060 --> 00:23:11.580
And if all the comparisons have X on the left, I wouldn't change it just because of this.


00:23:11.580 --> 00:23:12.580
But, you know, anyway.


00:23:12.580 --> 00:23:15.060
All right, Brian, well, that's it for all of our main topics.


00:23:15.060 --> 00:23:19.180
I got a few extras to share with everyone while we're here, just really quick and short things.


00:23:19.180 --> 00:23:21.540
And of course, not be forgotten as our joke.


00:23:21.540 --> 00:23:23.180
But you got any extras to share with everyone?


00:23:23.180 --> 00:23:28.060
I did mention last time that I was having some issues with Python testing.net.


00:23:28.060 --> 00:23:29.340
I think I mentioned that.


00:23:29.340 --> 00:23:32.460
but with SSL and stuff, but that's all,


00:23:32.460 --> 00:23:34.020
that's all resolved and fixed.


00:23:34.020 --> 00:23:34.860
- Wait, wait, wait.


00:23:34.860 --> 00:23:38.100
So if I go over here and I pull this up in Chrome,


00:23:38.100 --> 00:23:40.380
is it gonna tell me that it's secure?


00:23:40.380 --> 00:23:41.220
- Should.


00:23:41.220 --> 00:23:42.060
- Nice.


00:23:42.060 --> 00:23:44.300
Yeah, testing code over SSL, beautiful.


00:23:44.300 --> 00:23:46.580
- It's now, it's still kind of a WordPress thing


00:23:46.580 --> 00:23:48.700
is what I use, and I'm not thrilled with that.


00:23:48.700 --> 00:23:50.860
So I have a side project going on


00:23:50.860 --> 00:23:52.820
to convert that to something else,


00:23:52.820 --> 00:23:54.300
but it's not urgent anymore.


00:23:54.300 --> 00:23:55.260
- Yeah, that's good.


00:23:55.260 --> 00:23:57.700
Well, you'll have to give us the full report


00:23:57.700 --> 00:23:59.140
once you get it all fixed up.


00:23:59.140 --> 00:24:01.260
- Okay, so you said you got a bunch of stuff for us.


00:24:01.260 --> 00:24:02.460
- I do, I'll go through them quick.


00:24:02.460 --> 00:24:04.780
First of all, there's a new Python podcast,


00:24:04.780 --> 00:24:05.940
which is pretty exciting.


00:24:05.940 --> 00:24:09.100
And this one is focused on teaching Python.


00:24:09.100 --> 00:24:10.700
And do you know what the name of it is?


00:24:10.700 --> 00:24:12.660
- I think it's probably Teaching Python?


00:24:12.660 --> 00:24:13.500
- Yeah, it is.


00:24:13.500 --> 00:24:17.620
So, Teaching Python, it's by Kelly Perdez,


00:24:17.620 --> 00:24:20.260
and Sean Tibor, sorry about messing up the names,


00:24:20.260 --> 00:24:21.380
but they're doing a podcast.


00:24:21.380 --> 00:24:23.300
These are two middle school teachers


00:24:23.300 --> 00:24:25.860
who are learning and teaching Python to their students


00:24:25.860 --> 00:24:28.740
and basically documenting that journey.


00:24:28.740 --> 00:24:30.660
So if you're interested in that,


00:24:30.660 --> 00:24:32.540
especially if you're a teacher or you work with kids,


00:24:32.540 --> 00:24:34.740
I think this will be really, really helpful for you.


00:24:34.740 --> 00:24:35.580
So you can check that out.


00:24:35.580 --> 00:24:38.820
- I'm about halfway through the backlog so far,


00:24:38.820 --> 00:24:40.740
and I really like it so far.


00:24:40.740 --> 00:24:42.240
- Yeah, they're doing a nice job.


00:24:42.240 --> 00:24:44.940
One of the things that had kept people


00:24:44.940 --> 00:24:48.260
from using GitHub for their private work


00:24:48.260 --> 00:24:52.100
was that you had to pay for private repositories on GitHub,


00:24:52.100 --> 00:24:53.220
no matter what. - Yes.


00:24:53.220 --> 00:24:54.620
- Right, so people would use Bitbucket


00:24:54.620 --> 00:24:57.820
'cause Bitbucket had free private repositories.


00:24:57.820 --> 00:25:00.500
- And well, GitHub decided we're also gonna have


00:25:00.500 --> 00:25:02.200
free private repositories.


00:25:02.200 --> 00:25:04.260
So if you're working on projects


00:25:04.260 --> 00:25:05.100
that they have to stay private,


00:25:05.100 --> 00:25:06.820
or you just want them private,


00:25:06.820 --> 00:25:09.060
you can now use GitHub without paying anything.


00:25:09.060 --> 00:25:11.020
- There's been some weird reactions to it,


00:25:11.020 --> 00:25:12.900
but they're just sort of following the model


00:25:12.900 --> 00:25:15.980
of Bitbucket and GitLab now,


00:25:15.980 --> 00:25:18.660
so I don't think there's anything weird going on.


00:25:18.660 --> 00:25:19.540
- Exactly.


00:25:19.540 --> 00:25:21.700
Competition is a good thing, and here we have it.


00:25:21.700 --> 00:25:23.380
So it's not like entirely free,


00:25:23.380 --> 00:25:24.420
it's not like GitHub decided


00:25:24.420 --> 00:25:26.540
they're not gonna make money anymore.


00:25:26.540 --> 00:25:28.400
you can only have three contributors


00:25:28.400 --> 00:25:29.640
to the private repository,


00:25:29.640 --> 00:25:31.380
and so there's limits and things like that.


00:25:31.380 --> 00:25:34.500
But still pretty cool for most things.


00:25:34.500 --> 00:25:35.340
- Yep.


00:25:35.340 --> 00:25:36.660
- All right, also, very quickly,


00:25:36.660 --> 00:25:40.160
some early details about EuroPython are available,


00:25:40.160 --> 00:25:41.660
and it's looking pretty sweet.


00:25:41.660 --> 00:25:42.540
I'd love to go.


00:25:42.540 --> 00:25:43.500
I don't know if I'll be able to.


00:25:43.500 --> 00:25:44.340
- Yeah, me too.


00:25:44.340 --> 00:25:45.900
- Yeah, so they just announced EuroPython.


00:25:45.900 --> 00:25:48.420
It's gonna be in Basel, Switzerland,


00:25:48.420 --> 00:25:51.860
July 8th to 14th, and it looks great.


00:25:51.860 --> 00:25:55.640
So I put a link to the conference site there.


00:25:55.640 --> 00:25:56.960
I don't think they have call for papers


00:25:56.960 --> 00:25:58.200
or anything like that out yet,


00:25:58.200 --> 00:25:59.600
but it should be out pretty soon.


00:25:59.600 --> 00:26:02.880
Another thing that has been lacking in the world


00:26:02.880 --> 00:26:07.160
is good data center support in Africa.


00:26:07.160 --> 00:26:10.260
So I know this because I used AWS


00:26:10.260 --> 00:26:13.440
to deliver the video course content,


00:26:13.440 --> 00:26:15.480
like actual the videos.


00:26:15.480 --> 00:26:18.040
And I have streaming servers all over the place,


00:26:18.040 --> 00:26:20.780
like in Brazil or Mumbai or whatever,


00:26:20.780 --> 00:26:23.580
but there was just no way to do that in Africa.


00:26:23.580 --> 00:26:26.820
So the big news is there's an AWS data center


00:26:26.820 --> 00:26:29.280
coming to South Africa, which is pretty cool


00:26:29.280 --> 00:26:31.740
for anyone that wants to be closer


00:26:31.740 --> 00:26:33.240
to that part of the world.


00:26:33.240 --> 00:26:37.580
And finally, Pandas is dropping legacy support.


00:26:37.580 --> 00:26:39.700
No more Python 2 in Pandas.


00:26:39.700 --> 00:26:40.540
- Oh, cool.


00:26:40.540 --> 00:26:42.980
- Yeah, and that's coming out this month.


00:26:42.980 --> 00:26:44.140
So it should be good.


00:26:44.140 --> 00:26:46.300
- Yeah, this is the year that a ton of projects


00:26:46.300 --> 00:26:47.980
are dropping Python 2.


00:26:47.980 --> 00:26:49.180
- Yeah, for sure.


00:26:49.180 --> 00:26:51.820
So one more major thing,


00:26:51.820 --> 00:26:53.780
We already covered how cool pandas is.


00:26:53.780 --> 00:26:56.660
It's not gonna support legacy Python anymore.


00:26:56.660 --> 00:26:58.820
All right, you ready for the joke?


00:26:58.820 --> 00:27:00.020
- Yeah, can I click on it now?


00:27:00.020 --> 00:27:00.840
- You can click on it.


00:27:00.840 --> 00:27:03.460
This is a visual one, but I can describe it to you folks.


00:27:03.460 --> 00:27:06.940
Now, I just gotta do a quick little bit of history here


00:27:06.940 --> 00:27:09.840
for people who maybe have not seen Harry Potter.


00:27:09.840 --> 00:27:11.740
So this is the Harry Potter joke.


00:27:11.740 --> 00:27:14.220
And there's a point in the Harry Potter movie,


00:27:14.220 --> 00:27:16.220
I think this might be the first one,


00:27:16.220 --> 00:27:19.700
where Harry Potter has to get on this like long table


00:27:19.700 --> 00:27:22.460
and he's battling, I don't know, someone, something,


00:27:22.460 --> 00:27:24.020
and all the other students are standing around,


00:27:24.020 --> 00:27:27.820
and somebody conjures a snake, a serpent,


00:27:27.820 --> 00:27:31.540
and in the real show, Harry starts speaking to the thing


00:27:31.540 --> 00:27:32.860
in its native tongue,


00:27:32.860 --> 00:27:35.580
which apparently is a freaky thing to do,


00:27:35.580 --> 00:27:36.980
and people were all freaked out,


00:27:36.980 --> 00:27:40.180
and it was called a parcel tongue, something like that,


00:27:40.180 --> 00:27:41.640
that he could speak snake.


00:27:41.640 --> 00:27:43.580
So with that, here's the joke.


00:27:43.580 --> 00:27:44.980
So there's a picture,


00:27:44.980 --> 00:27:47.020
Harry's fighting the snake in that environment,


00:27:47.020 --> 00:27:48.140
and he says, "In Porto,


00:27:48.140 --> 00:27:51.140
current path equals os.getcurrentworkinter


00:27:51.140 --> 00:27:54.640
and just start speaking out Python commands at the snake.


00:27:54.640 --> 00:27:58.640
And Hermione says, "I didn't know Harry spoke Python."


00:27:58.640 --> 00:28:02.640
And Ron Weasley says, "Yeah, he's a parser tongue."


00:28:02.640 --> 00:28:04.640
[laughter]


00:28:04.640 --> 00:28:05.640
That's terrible.


00:28:05.640 --> 00:28:07.640
It's really bad. It's really bad.


00:28:07.640 --> 00:28:10.140
But there it is. And Nick Spirit sent that to us.


00:28:10.140 --> 00:28:13.640
So thank you, Nick, for finding that joke and letting us share it here.


00:28:13.640 --> 00:28:14.640
Yeah, very nerdy.


00:28:14.640 --> 00:28:16.640
Yep, he's a parser tongue.


00:28:16.640 --> 00:28:19.040
Well, I think we're going to leave it at that, Brian.


00:28:19.040 --> 00:28:19.840
Thanks for being here.


00:28:19.840 --> 00:28:20.740
Yeah, thank you.


00:28:20.740 --> 00:28:21.640
Yeah, bye.


00:28:21.640 --> 00:28:23.440
Thank you for listening to Python Bytes.


00:28:23.440 --> 00:28:25.840
Follow the show on Twitter via @pythonbytes.


00:28:25.840 --> 00:28:29.040
That's Python Bytes as in B-Y-T-E-S.


00:28:29.040 --> 00:28:32.440
And get the full show notes at pythonbytes.fm.


00:28:32.440 --> 00:28:34.040
If you have a news item you want featured,


00:28:34.040 --> 00:28:36.540
just visit pythonbytes.fm and send it our way.


00:28:36.540 --> 00:28:39.640
We're always on the lookout for sharing something cool.


00:28:39.640 --> 00:28:41.540
On behalf of myself and Brian Okken,


00:28:41.540 --> 00:28:42.940
this is Michael Kennedy.


00:28:42.940 --> 00:28:44.940
Thank you for listening and sharing this podcast


00:28:44.940 --> 00:28:46.240
with your friends and colleagues.

