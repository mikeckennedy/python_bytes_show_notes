
00:00:00.000 --> 00:00:04.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:04.640 --> 00:00:05.680
to your earbuds.


00:00:05.680 --> 00:00:10.200
This is episode 41, recorded August 30th, 2017.


00:00:10.200 --> 00:00:11.940
I'm Michael Kennedy.


00:00:11.940 --> 00:00:14.240
And yes, I'm back from vacation.


00:00:14.240 --> 00:00:17.480
Thank you, Brian Okken, for covering and all of our guest co-hosts.


00:00:17.480 --> 00:00:22.320
And it's time to immediately start repaying Brian for his keeping things rolling while


00:00:22.320 --> 00:00:24.240
he was gone.


00:00:24.240 --> 00:00:27.620
He's in Germany for some work business.


00:00:27.620 --> 00:00:30.580
And we have a new guest co host.


00:00:30.580 --> 00:00:31.580
Welcome, Miguel Greenberg.


00:00:31.580 --> 00:00:32.580
Hello, and thank you for having me, Michael.


00:00:32.580 --> 00:00:33.580
Happy to be here.


00:00:33.580 --> 00:00:34.580
Yeah, I'm happy to have you here.


00:00:34.580 --> 00:00:40.740
It's gonna be fun to talk about the items you've chosen for the week and what I've got


00:00:40.740 --> 00:00:41.740
as well.


00:00:41.740 --> 00:00:43.620
So let's just kick it off.


00:00:43.620 --> 00:00:47.580
First by saying thank you to Rollbar who's bringing you this episode.


00:00:47.580 --> 00:00:52.700
So check them out at pythonbytes.fm/rollbar and get some good monitoring for your app.


00:00:52.700 --> 00:00:54.200
We'll talk more about that later.


00:00:54.200 --> 00:00:56.620
But let's jump to your first item, lovis.


00:00:56.620 --> 00:00:59.920
I would like to call it LOL this, right?


00:00:59.920 --> 00:01:02.880
But actually, this is not anything to laugh about.


00:01:02.880 --> 00:01:08.960
So this is a Python package that generates graphical representations of very commonly


00:01:08.960 --> 00:01:11.800
used Python data structures.


00:01:11.800 --> 00:01:15.560
So far, they support five different structures.


00:01:15.560 --> 00:01:21.260
And one of them is a list of lists, which gives the LOL name to the package.


00:01:21.260 --> 00:01:26.940
But they also support dictionaries, lists, linked lists, and binary trees.


00:01:26.940 --> 00:01:32.920
And what they do is basically they use GraphViz, which you need to install on your machine


00:01:32.920 --> 00:01:36.320
to generate these graphical representations.


00:01:36.320 --> 00:01:40.040
And one of the coolest things is that it integrates with Jupyter.


00:01:40.040 --> 00:01:46.200
So if you're doing this from a notebook in Jupyter, then it'll render these graphical


00:01:46.200 --> 00:01:48.820
representations right in your prompt.


00:01:48.820 --> 00:01:53.860
So it's super cool, especially I imagine for you and for me, you know, people who used


00:01:53.860 --> 00:01:58.860
to teach Python, I'm having tons of ideas to use this myself.


00:01:58.860 --> 00:02:03.780
Yeah, so am I I'm like, this can definitely be used to help people who are new to these


00:02:03.780 --> 00:02:06.020
data structures and new to these ideas.


00:02:06.020 --> 00:02:10.500
And honestly, new to the concept of pointers and reference types at all.


00:02:10.500 --> 00:02:12.900
I think it's really a great way to learn it.


00:02:12.900 --> 00:02:18.780
The linked list one is particularly interesting to help people who are not familiar with pointers.


00:02:18.780 --> 00:02:21.780
to visualize how that works.


00:02:21.780 --> 00:02:26.780
One thing I need to mention is that if you try to pip install this in Python 3 today,


00:02:26.780 --> 00:02:28.280
it's going to fail.


00:02:28.280 --> 00:02:34.780
I submitted a bug and the author told me that a fix is coming pretty soon with additional features.


00:02:34.780 --> 00:02:40.280
So I'm glad to hear that he's responsive and that he's working on making more improvements.


00:02:40.280 --> 00:02:42.280
Yeah, this thing came out really recently.


00:02:42.280 --> 00:02:46.780
I don't remember how old it is, but it's all quite new, like a couple of days.


00:02:46.780 --> 00:02:49.680
and it's already got 200 stars on GitHub


00:02:49.680 --> 00:02:50.980
and it looks like it's going well.


00:02:50.980 --> 00:02:52.380
- Yeah, it's going pretty well.


00:02:52.380 --> 00:02:54.100
Yeah, I see a bright future for it.


00:02:54.100 --> 00:02:54.940
- I do as well.


00:02:54.940 --> 00:02:57.100
So if you're out there teaching Python


00:02:57.100 --> 00:02:59.640
and you're trying to help people understand pointers,


00:02:59.640 --> 00:03:02.460
data structures, and even if you're not teaching it,


00:03:02.460 --> 00:03:06.420
like I think looking at some of the different representations


00:03:06.420 --> 00:03:08.240
of these data structures that it draws


00:03:08.240 --> 00:03:10.020
is probably helpful for people


00:03:10.020 --> 00:03:12.020
who just haven't really thought a lot about it as well.


00:03:12.020 --> 00:03:13.900
So definitely worth checking out.


00:03:13.900 --> 00:03:19.420
Alright, so moving from visualizing different data structures to transforming data structures,


00:03:19.420 --> 00:03:22.900
the thing I want to cover first this week is Odo.


00:03:22.900 --> 00:03:28.840
So this is a user or listener recommendation, as was lolvis.


00:03:28.840 --> 00:03:32.700
So Odo migrates data between all these different formats.


00:03:32.700 --> 00:03:38.620
And it knows how to read, let's say a panda data frame, and then convert that to a MongoDB


00:03:38.620 --> 00:03:41.860
table or collection and save it just like that.


00:03:41.860 --> 00:03:46.500
And it's literally one line like, "Odo, here's your data frame, go to that database."


00:03:46.500 --> 00:03:50.020
Or "Here's your Postgres, go to CSV or reverse."


00:03:50.020 --> 00:03:55.380
So if you find yourself pulling in data from one source and trying to convert it or save


00:03:55.380 --> 00:03:59.260
it more or less in the same shape over to another source, then check out this thing


00:03:59.260 --> 00:04:00.900
called Odo, O-D-O.


00:04:00.900 --> 00:04:07.800
I wonder if it takes a list of lists, an LOL, and writes a CSV file.


00:04:07.800 --> 00:04:12.040
That would be something that I could find useful tons of times.


00:04:12.040 --> 00:04:13.040
Yeah, absolutely.


00:04:13.040 --> 00:04:14.200
That would be really, really cool.


00:04:14.200 --> 00:04:16.600
And it does take lists and transform.


00:04:16.600 --> 00:04:17.600
Yes, right.


00:04:17.600 --> 00:04:21.440
So I'm not entirely sure like how flexible it is in that regard.


00:04:21.440 --> 00:04:23.060
But I think there's also extensions.


00:04:23.060 --> 00:04:24.060
So you can write extensions.


00:04:24.060 --> 00:04:29.200
So just to give you the rundown, let's see it'll work with Panda data frames with a list


00:04:29.200 --> 00:04:32.840
with JSON files, CSV files, Postgres.


00:04:32.840 --> 00:04:38.240
Yeah, so you could take like a CSV file, load it into Postgres, or Postgres into JSON, or


00:04:38.240 --> 00:04:43.240
even works with like converting into MongoDB, like I said, so like pandas to Mongo or reverse.


00:04:43.240 --> 00:04:45.880
So not a whole lot more to it than that.


00:04:45.880 --> 00:04:49.080
But it seems really handy if like, that's the problem you're trying to solve.


00:04:49.080 --> 00:04:50.080
Yeah, very nice.


00:04:50.080 --> 00:04:51.080
Yeah.


00:04:51.080 --> 00:04:52.080
So tell us about concurrency.


00:04:52.080 --> 00:04:56.440
I you chose this item, and it's not exactly new, but it's certainly something we haven't


00:04:56.440 --> 00:04:58.060
covered and is really amazing.


00:04:58.060 --> 00:05:03.820
I agree with you that this is one of the really interesting things to cover in concurrency.


00:05:03.820 --> 00:05:09.820
Right. So this is a PyCon talk from a couple years ago from the one and only Dave Beasley.


00:05:09.820 --> 00:05:16.540
I mean, who else, right? And the interesting thing, as a speaker, I find it interesting,


00:05:16.540 --> 00:05:22.540
not only the content, but also the way he presented this talk. This is a live coding


00:05:22.540 --> 00:05:29.100
session. The entire thing, it's Dave's terminal. There are no slides and he's speaking while


00:05:29.100 --> 00:05:33.660
coding and starts from an empty file, actually quotes everything in the talk.


00:05:33.660 --> 00:05:36.300
I think he just fires up Emacs and says, "Let's do this," right?


00:05:36.300 --> 00:05:43.740
Right, yeah. Just two or three terminal sessions, one with Emacs and the other two with Bash, and


00:05:43.740 --> 00:05:49.100
it's done all there. And he goes to cover concurrency, the different ways you can do


00:05:49.100 --> 00:05:54.140
concurrency with threads, with processes, shows all the problems with both approaches,


00:05:54.140 --> 00:06:01.020
how the global interpreter log messes all this and complicates things. And then in the second


00:06:01.020 --> 00:06:07.180
portion of the talk, he goes and builds an asynchronous framework, pretty much like AsyncIO,


00:06:07.180 --> 00:06:13.980
a small version of it, a minimal version, using Python generators without any other


00:06:13.980 --> 00:06:19.660
additional libraries, all in Python standard code. So it's pretty amazing. And it's only 45


00:06:19.660 --> 00:06:24.220
minutes. The amount of knowledge that's in those 45 minutes, it's unbelievable.


00:06:24.220 --> 00:06:26.860
Yeah, and I really love the style like well done, David. So


00:06:26.860 --> 00:06:31.740
certainly the style of we're going to build this up from scratch. I'm not going to just show you a


00:06:31.740 --> 00:06:36.140
bunch of slides and talk about it. But I'm going to just show you how it's built really makes it


00:06:36.140 --> 00:06:39.820
feel accessible. You're like, well, if he could literally do it from scratch in 45 minutes,


00:06:39.820 --> 00:06:44.760
Like I saw everything that went into it. It was pretty understandable. It really is really is well done


00:06:44.760 --> 00:06:51.360
So yeah, if people are you know, thinking about Python concurrency or generators or async IO and all these things that it's actually


00:06:51.360 --> 00:06:56.380
Even good for for networking because he builds a little server. He doesn't even use, you know


00:06:56.380 --> 00:06:59.460
Nothing like flask or Django or anything. He builds a little server


00:06:59.460 --> 00:07:06.420
Using the he calls it the socket framework just using network sockets. Yeah, that was like part of the demo


00:07:06.820 --> 00:07:08.820
It was just like part of it, right?


00:07:08.820 --> 00:07:09.820
Right.


00:07:09.820 --> 00:07:10.820
Yeah, it's super awesome.


00:07:10.820 --> 00:07:11.820
Yeah.


00:07:11.820 --> 00:07:12.820
Yeah.


00:07:12.820 --> 00:07:14.940
So certainly this is if this sounds interesting to you, be sure to watch that video.


00:07:14.940 --> 00:07:16.860
It's on YouTube, or like it to it in the show notes.


00:07:16.860 --> 00:07:21.060
And it's, you'll learn a bunch, especially conceptually what's going on in all this async


00:07:21.060 --> 00:07:22.060
IO stuff.


00:07:22.060 --> 00:07:23.100
Super cool.


00:07:23.100 --> 00:07:25.980
So before we move on to the next segment, though, let me tell you about the sponsor


00:07:25.980 --> 00:07:27.420
for the show rollbar.


00:07:27.420 --> 00:07:34.620
So rollbar lets you basically just type pip install rollbar type a few commands either


00:07:34.620 --> 00:07:40.380
in your config file or in code in your web app, and it will continuously monitor your


00:07:40.380 --> 00:07:43.580
site, your web application for any sorts of errors.


00:07:43.580 --> 00:07:47.180
And not just tell you if something happened, but capture all the details.


00:07:47.180 --> 00:07:50.660
What was the logged in user when they ran into an error?


00:07:50.660 --> 00:07:53.340
So who is your customer who's having this problem?


00:07:53.340 --> 00:07:54.940
What's the call stack?


00:07:54.940 --> 00:07:56.620
What other errors have you experienced like this?


00:07:56.620 --> 00:07:59.500
What are the local variables passed to the function when it failed?


00:07:59.500 --> 00:08:03.220
Like you can probably fix the error without even debugging it or running your code, you


00:08:03.220 --> 00:08:05.940
look and go, "Oh, I see what's wrong."


00:08:05.940 --> 00:08:06.940
I use Rollbar a lot.


00:08:06.940 --> 00:08:07.940
I love it.


00:08:07.940 --> 00:08:14.260
If you want to check it out, check it out at pythonbytes.fm/rollbar.


00:08:14.260 --> 00:08:16.900
Next up, I want to talk about some optimizations.


00:08:16.900 --> 00:08:22.240
This concurrency stuff that you brought up is certainly a form of optimization, but this


00:08:22.240 --> 00:08:29.860
is the future, trying to push CPython, the main default Python implementation, further.


00:08:29.860 --> 00:08:35.940
This is an article on Medium by a friend of the show, Anthony Shaw, covering work that


00:08:35.940 --> 00:08:37.300
Victor Stinner has done.


00:08:37.300 --> 00:08:39.380
Victor Stinner, have you been following what he's doing?


00:08:39.380 --> 00:08:41.420
He's like killing it on performance.


00:08:41.420 --> 00:08:42.420
He is.


00:08:42.420 --> 00:08:43.420
Yes, absolutely.


00:08:43.420 --> 00:08:47.260
I've been to his talk this past PyCon as well.


00:08:47.260 --> 00:08:50.980
Yeah, so there's just so many things that he's doing that are amazing.


00:08:50.980 --> 00:08:54.020
He did give some good talks at PyCon as well.


00:08:54.020 --> 00:08:57.580
This project is called Fat Python, the next chapter in Python optimization.


00:08:57.580 --> 00:09:03.460
So like I said, article by Anthony Shaw, and he basically highlights this fat Python project


00:09:03.460 --> 00:09:07.540
that was started by Victor Stinner back in 2015.


00:09:07.540 --> 00:09:15.820
And the idea was, let's try to make it possible to apply better static optimizers for Python.


00:09:15.820 --> 00:09:20.540
So one of the big challenges that you have with optimizing Python is it's super dynamic,


00:09:20.540 --> 00:09:24.900
you can't necessarily just look at the code and say, well, it has this structure.


00:09:24.900 --> 00:09:30.260
we're going to change it around because you could go and dynamically add methods, functions,


00:09:30.260 --> 00:09:32.060
variables, whatever, right?


00:09:32.060 --> 00:09:36.140
Yeah, so that makes it that makes it a big challenge.


00:09:36.140 --> 00:09:41.700
So there's actually three peps Python enhancement proposals that chain together to try to make


00:09:41.700 --> 00:09:45.060
things a little bit better that Victor's working on as part of this project.


00:09:45.060 --> 00:09:51.620
So one is pep 511, which is a proposal to add a process to optimize ASTs.


00:09:51.620 --> 00:09:58.520
So ASTs or abstract syntax trees are basically what Python pulls up before it starts to execute


00:09:58.520 --> 00:09:59.520
your code, right?


00:09:59.520 --> 00:10:06.880
It can pull up and it's basically a tree representation of the code that you write in a form that


00:10:06.880 --> 00:10:08.560
that's easier to be interpreted, right?


00:10:08.560 --> 00:10:12.640
Like an object oriented representation of what your code is going to do, not just the


00:10:12.640 --> 00:10:13.640
text.


00:10:13.640 --> 00:10:19.800
The idea is, it's possible, it could be possible to have an optimizer look at that AST and


00:10:19.800 --> 00:10:24.960
say, okay, this looks like pandas code, and you're applying this, you're doing this particular


00:10:24.960 --> 00:10:26.360
anti pattern that is slow.


00:10:26.360 --> 00:10:31.560
So maybe we could change things around behind the scenes, you don't even know it to optimize


00:10:31.560 --> 00:10:33.560
or to fix that, right?


00:10:33.560 --> 00:10:37.140
Maybe people run linters that say you're doing this thing that's not amazing.


00:10:37.140 --> 00:10:40.280
What if we could have an optimizer that would just make it fast, right?


00:10:40.280 --> 00:10:42.280
It just make the change for you.


00:10:42.280 --> 00:10:43.280
Exactly.


00:10:43.280 --> 00:10:48.120
The proposal is to basically create some kind of hook for creating these optimizers.


00:10:48.120 --> 00:10:49.640
And this might be built into CPython.


00:10:49.640 --> 00:10:54.400
It might even be something you pip install, like pip install the NumPy optimizer or whatever


00:10:54.400 --> 00:10:57.140
for my runtime, which is really, really cool.


00:10:57.140 --> 00:10:59.600
That also brings us to PEP 509.


00:10:59.600 --> 00:11:03.920
Like I said, this makes it really hard to optimize because everything is mutable at


00:11:03.920 --> 00:11:05.800
runtime.


00:11:05.800 --> 00:11:11.720
There's these things called guards that verify the last time it's processed this bit of the


00:11:11.720 --> 00:11:13.640
structure that it hasn't changed.


00:11:13.640 --> 00:11:19.200
PEP 509 is a process to add a private version of dictionaries that implement a different


00:11:19.200 --> 00:11:21.540
type of guards that are much faster.


00:11:21.540 --> 00:11:28.540
We have 5.10, which proposes a public API to CPython for specialized code with guards


00:11:28.540 --> 00:11:29.540
for a function.


00:11:29.540 --> 00:11:34.220
So the idea is you put it all together, you take this optimizer, it generates a new high-performance


00:11:34.220 --> 00:11:41.200
version, it replaces the code that would normally run with this optimized version.


00:11:41.200 --> 00:11:45.280
And as long as it doesn't change, it can run that optimized code or fall back.


00:11:45.280 --> 00:11:50.380
So taken together, all three of these create this fat Python thing, which is really great.


00:11:50.380 --> 00:11:54.620
So you can download this and run it, you have to compile CPython, like a special branch


00:11:54.620 --> 00:11:57.580
of it to make it work, but the article talks about it.


00:11:57.580 --> 00:11:58.780
But the results are really good.


00:11:58.780 --> 00:12:04.060
So for example, a basic function that just you call it returns a string 24% faster than


00:12:04.060 --> 00:12:05.060
Python three, six,


00:12:05.060 --> 00:12:11.740
I was skimming through the article and the peps and I could not find for this implementation,


00:12:11.740 --> 00:12:12.740
what are the gotchas?


00:12:12.740 --> 00:12:18.740
the gotchas, if there are any. It doesn't look like there are, which is great. But I was wondering if


00:12:18.740 --> 00:12:23.780
you know any code can run or... I think it would, I guess the gotchas would probably be like,


00:12:23.780 --> 00:12:28.980
can the optimizer deal with it? And are you 100% sure the optimizer is not going to make


00:12:28.980 --> 00:12:36.020
a change that, that like has a behavioral change, right? Right, right. Yeah, that was what I was


00:12:36.020 --> 00:12:39.780
looking for. I mean, are there any cases where it can make a mistake at this point? Yeah, I think


00:12:39.780 --> 00:12:43.860
I think this is basically cracking the system open so that these things could be plugged


00:12:43.860 --> 00:12:46.940
in but then you'd probably have to look at the gotchas of the optimizers.


00:12:46.940 --> 00:12:47.940
You know what I mean?


00:12:47.940 --> 00:12:48.940
Right.


00:12:48.940 --> 00:12:53.520
Yeah, so it's pretty good like a 24% improvement in function call speed and that's 46% faster


00:12:53.520 --> 00:12:55.580
than Python 2.7.


00:12:55.580 --> 00:12:57.060
Like that is a big deal.


00:12:57.060 --> 00:13:00.880
One of the big drawbacks of Python is function calls are really slow.


00:13:00.880 --> 00:13:05.580
And so people don't necessarily break their code into as small functions as they should.


00:13:05.580 --> 00:13:07.620
And so this might really alleviate some of that.


00:13:07.620 --> 00:13:08.620
I think it's great.


00:13:08.620 --> 00:13:09.620
Yeah.


00:13:09.620 --> 00:13:14.340
project. Yeah, keep up the good work, Victor. All right, so suppose I'm sitting in a coffee shop.


00:13:14.340 --> 00:13:19.220
I'm sure it's fine if I just, you know, go log into my bank. Right. Things like that.


00:13:19.220 --> 00:13:28.260
Right. Yeah. So, I mean, we all hear that it is insecure to go online on a coffee shop or


00:13:28.260 --> 00:13:32.660
hotel, airport, you know, all of those. Yeah, hotels and airports scare me way more,


00:13:32.660 --> 00:13:36.500
especially hotels these days. I don't know why. Right. So, you know, very few people really


00:13:36.500 --> 00:13:43.620
understand what's the problem. You may think that if you only access sites that are HTTPS,


00:13:43.620 --> 00:13:50.020
so secure sites that you'll find, and you're really not completely, all the content that


00:13:50.020 --> 00:13:55.620
you transfer to this site is going to be encrypted. But there are other things that happen before


00:13:55.620 --> 00:14:00.860
you get to a connection that are not encrypted, like for example, DNS searches. So if you're


00:14:00.860 --> 00:14:06.780
in a coffee shop getting to a lot of sites, it's very easy for someone on the same network


00:14:06.780 --> 00:14:12.020
to find out what sites you visit, even though they cannot see what data you transfer to


00:14:12.020 --> 00:14:13.020
them.


00:14:13.020 --> 00:14:14.020
Right.


00:14:14.020 --> 00:14:17.100
And if somehow they happen to be able to alter that DNS, which probably has no verification


00:14:17.100 --> 00:14:20.060
because it's unencrypted, then they send you to their google.com.


00:14:20.060 --> 00:14:22.140
They send you to some other place.


00:14:22.140 --> 00:14:23.140
Right.


00:14:23.140 --> 00:14:24.140
Exactly.


00:14:24.140 --> 00:14:28.420
So, you know, it's very important that you take security when you go on a public Wi-Fi


00:14:28.420 --> 00:14:33.480
spot, you know, very seriously. And I wanted to mention this tool that so many


00:14:33.480 --> 00:14:38.020
times I talk to people and I mention it and they don't know it and it's super


00:14:38.020 --> 00:14:42.740
great. It's called S-Shuttle and typically the solution that you


00:14:42.740 --> 00:14:47.460
you're told is that you need to pay for a VPN service and S-Shuttle


00:14:47.460 --> 00:14:53.780
it proclaims itself as the poor man's VPN and a nice advantage it has over


00:14:53.780 --> 00:14:59.000
regular VPNs is that it doesn't require any software to be installed on the


00:14:59.000 --> 00:15:04.000
remote machine, the secure machine that you use for your connection. So the way


00:15:04.000 --> 00:15:09.320
it works is basically you need to have SSH access into a secure machine and in


00:15:09.320 --> 00:15:13.700
my case I have it right here in my home. I have a little, this is a chip machine


00:15:13.700 --> 00:15:19.240
that is a $9 computers or could be a Raspberry Pi, you know, any of those and


00:15:19.240 --> 00:15:23.560
the only thing you need there is SSH, right? So you get it by default if you


00:15:23.560 --> 00:15:27.820
install the Linux distribution. And then from anywhere you are,


00:15:27.820 --> 00:15:32.400
you use a shuttle to create a secure encrypted tunnel into


00:15:32.400 --> 00:15:35.840
this secure machine that you have in your home. And then


00:15:35.840 --> 00:15:39.080
everything that you do goes through the tunnel, and then


00:15:39.080 --> 00:15:43.000
it's forwarded into this secure machine. And then it happens on


00:15:43.000 --> 00:15:47.080
your secure machine, including DNS searches. So


00:15:47.080 --> 00:15:51.200
that's really cool. So if I run a shuttle, and I go to like


00:15:51.280 --> 00:15:55.280
gmail.com it will actually funnel the traffic through say my raspberry pi


00:15:55.280 --> 00:16:00.720
like on on on your on the coffee shop there's only going to be a connection to your raspberry pi


00:16:00.720 --> 00:16:05.760
and then the raspberry pi will make the connection to gmail and then forward the results back into


00:16:05.760 --> 00:16:09.360
your connection in the coffee shop through an encrypted channel oh that's really cool


00:16:09.360 --> 00:16:13.520
and everything you do is absolutely private yeah that's that's super cool and it's written in


00:16:13.520 --> 00:16:19.280
python yeah and it is written in python uh it recently had support for python 3 yay nice that's


00:16:19.280 --> 00:16:20.280
That's cool.


00:16:20.280 --> 00:16:23.720
Because that used to be a problem in the past, but now it works on Python 3 as well.


00:16:23.720 --> 00:16:24.720
All right, well, that's really cool.


00:16:24.720 --> 00:16:25.720
I'm definitely going to check that out.


00:16:25.720 --> 00:16:26.720
All right.


00:16:26.720 --> 00:16:31.240
So last thing is I want to talk about something that initially might surprise people about


00:16:31.240 --> 00:16:35.240
the topic is I want to talk about Node.js.


00:16:35.240 --> 00:16:40.440
So Node.js, while, you know, Python developers sometimes or web developers that also play


00:16:40.440 --> 00:16:43.360
with Node.js, I don't want to talk about it for that reason.


00:16:43.360 --> 00:16:49.240
Mostly I consider Node.js like a similar new modern ecosystem and environment similar to


00:16:49.240 --> 00:16:50.880
to Pythons, right?


00:16:50.880 --> 00:16:52.120
It's very open source.


00:16:52.120 --> 00:16:55.960
There's a lot of people excited and contributing to it, things like that.


00:16:55.960 --> 00:16:56.960
But there's...


00:16:56.960 --> 00:17:00.880
Node.js has been in the news for the wrong reason this week.


00:17:00.880 --> 00:17:06.480
And basically, a bunch of the people who are in charge of the steering committee for Node.js


00:17:06.480 --> 00:17:07.920
quit.


00:17:07.920 --> 00:17:12.880
Like a third of the committee quit and just said, "We're done with this," because there's


00:17:12.880 --> 00:17:17.040
been a huge rift in the community, apparently.


00:17:17.040 --> 00:17:23.020
I want to talk about this community aspect and give thanks for how well things are going


00:17:23.020 --> 00:17:28.720
at Python and the Python ecosystem relative to Node.js.


00:17:28.720 --> 00:17:32.400
Basically there was, I don't want to get into name calling, whatever, you guys go read the


00:17:32.400 --> 00:17:36.800
articles, but there was some guy who was on the committee who was making decisions that


00:17:36.800 --> 00:17:39.060
a lot of people disagreed with.


00:17:39.060 --> 00:17:43.600
He was very much against the code of conducts for reasons that may or may not be valid.


00:17:43.600 --> 00:17:44.600
I don't know.


00:17:44.600 --> 00:17:48.600
Basically, they felt like he was not representing the community well.


00:17:48.600 --> 00:17:54.000
And the way the board worked, or the system to enforce the code of conduct worked,


00:17:54.000 --> 00:17:57.100
was they would look at individual things and they would say,


00:17:57.100 --> 00:18:03.000
"Is this sufficiently bad, say, to have this guy removed from being in charge?"


00:18:03.000 --> 00:18:06.700
And they said any individual thing was not a big deal.


00:18:06.700 --> 00:18:09.300
But it was not big enough to take that action.


00:18:09.300 --> 00:18:13.300
But if you add up 10 or 20 of these things, all of a sudden here's like a...


00:18:13.300 --> 00:18:14.500
if there's a pattern, right?


00:18:14.500 --> 00:18:16.340
- A pattern, a pattern of behavior that says,


00:18:16.340 --> 00:18:18.380
you know, maybe this guy is not representing us


00:18:18.380 --> 00:18:21.140
as well as we want or something like that.


00:18:21.140 --> 00:18:24.620
And so they decided not to remove the guy.


00:18:24.620 --> 00:18:25.820
A bunch of people said, that's it.


00:18:25.820 --> 00:18:28.380
We've tried for a long time to sort of fix this


00:18:28.380 --> 00:18:31.620
and we're so fed up with it that we're leaving.


00:18:31.620 --> 00:18:33.440
We're no longer gonna be on the committee.


00:18:33.440 --> 00:18:35.460
Some of the people just said, I'm done with Node.js.


00:18:35.460 --> 00:18:38.060
Like these are former like steering committee folks


00:18:38.060 --> 00:18:41.420
on Node.js, like I'm done with Node.js entirely.


00:18:41.420 --> 00:18:45.040
And actually, one of the, maybe the biggest thing that came out of this, not the people


00:18:45.040 --> 00:18:50.660
on the board, but they said moments after the failed leadership vote, Kate Marchan pushed


00:18:50.660 --> 00:18:56.620
the button and created IO.js, a new open source fork of Node.js.


00:18:56.620 --> 00:19:00.060
And this has happened before there was some problem with Node.js in the community.


00:19:00.060 --> 00:19:02.920
And they created this thing called IO.js.


00:19:02.920 --> 00:19:07.300
This is A-Y-O dot JS, but phonetically, they're the same, right?


00:19:07.300 --> 00:19:12.020
So you had some pretty interesting insights on this, I thought.


00:19:12.020 --> 00:19:15.800
One of the things that you said, I mean, first of all, just give thanks that things are working


00:19:15.800 --> 00:19:19.400
better here and we seem to have a better balance.


00:19:19.400 --> 00:19:24.920
But you also pointed out that we have a single leader who ultimately decides, right?


00:19:24.920 --> 00:19:25.920
We have Guido.


00:19:25.920 --> 00:19:26.920
Right.


00:19:26.920 --> 00:19:31.340
We have a single person that sets the tone for the community, right?


00:19:31.340 --> 00:19:33.940
And I believe they don't.


00:19:33.940 --> 00:19:41.340
vote on things and many people vote and clearly they are very divided on the roles.


00:19:41.340 --> 00:19:46.840
Some people put technical over community and clearly some other people it's the reverse


00:19:46.840 --> 00:19:47.840
of that.


00:19:47.840 --> 00:19:56.220
So yeah, I think we're lucky that at least we have a model that we know that we follow.


00:19:56.220 --> 00:19:58.780
>>Steve Yeah, I think it's really important that


00:19:58.780 --> 00:20:03.020
you know, Guido's open to taking feedback from all the folks involved in the community


00:20:03.020 --> 00:20:07.580
but in the end, he makes the decisions. And I think, you know, credit to him. He's made a lot


00:20:07.580 --> 00:20:15.180
of good decisions that keep people engaged. Yeah. So yeah, here's a Node.js item for Python Bytes.


00:20:15.180 --> 00:20:18.700
And really, the story is just, you know, look at what's going on over here. And let's make sure


00:20:18.700 --> 00:20:23.420
that this doesn't happen to our community as well. It's called no. Yeah. All right. Well,


00:20:23.420 --> 00:20:28.620
Miguel, that's the items for this week that we had picked out. Anything else that you got going on?


00:20:28.620 --> 00:20:31.100
John, you just did an amazing Kickstarter, right?


00:20:31.100 --> 00:20:33.940
- Yeah, that was actually a little experiment.


00:20:33.940 --> 00:20:37.380
I wanted, for many years, I wanted to update


00:20:37.380 --> 00:20:41.300
my Flask mega tutorial, the first tutorial I wrote


00:20:41.300 --> 00:20:44.020
more than four years ago, and the amount of work


00:20:44.020 --> 00:20:49.020
is so big that I always had to give preference to work.


00:20:49.020 --> 00:20:51.820
- Gotta pay the bills, kids gotta go to college,


00:20:51.820 --> 00:20:52.660
things like that, right?


00:20:52.660 --> 00:20:55.620
- Yeah, so I decided to give a Kickstarter to try,


00:20:55.620 --> 00:20:58.840
and basically I converted that task into work.


00:20:58.840 --> 00:20:59.680
- That is really cool.


00:20:59.680 --> 00:21:02.160
So you have this mega tutorial,


00:21:02.160 --> 00:21:03.260
this flash tutorial that you've done,


00:21:03.260 --> 00:21:04.320
and it's really elaborate.


00:21:04.320 --> 00:21:07.540
And you basically ran the Kickstarter and said,


00:21:07.540 --> 00:21:09.300
look, I wanna update this tutorial.


00:21:09.300 --> 00:21:10.840
Who's in on helping me do this?


00:21:10.840 --> 00:21:12.680
And the community really responded, right?


00:21:12.680 --> 00:21:15.360
- It responded in a huge way.


00:21:15.360 --> 00:21:20.360
Basically, the modest funding that I set up for Go


00:21:20.360 --> 00:21:22.200
was met the first day.


00:21:22.200 --> 00:21:23.040
And then from then on,


00:21:23.040 --> 00:21:25.880
I decided to start coming up with ideas


00:21:25.880 --> 00:21:28.320
to expand the tutorial, add more content to it.


00:21:28.320 --> 00:21:29.840
- It got funded in one day?


00:21:29.840 --> 00:21:33.800
- Yes, the 100% funding was in the first day,


00:21:33.800 --> 00:21:36.400
but then it got something like, I don't know,


00:21:36.400 --> 00:21:39.480
maybe 600% funding in the end.


00:21:39.480 --> 00:21:43.640
It ended up pretty good, and I have some serious work to do


00:21:43.640 --> 00:21:48.320
because I have three new, complete new topics to add


00:21:48.320 --> 00:21:51.680
that I will be working on as part of this rewrite.


00:21:51.680 --> 00:21:52.500
- That's really cool.


00:21:52.500 --> 00:21:53.780
So super excited about that.


00:21:53.780 --> 00:21:55.060
- Yeah, that's great, congratulations.


00:21:55.060 --> 00:21:57.020
And how do people find more out about this?


00:21:57.020 --> 00:21:58.460
- They can go to my blog,


00:21:58.460 --> 00:22:02.420
and the blog is blog.miguelgreenberg.com,


00:22:02.420 --> 00:22:05.340
and they're gonna find a little Kickstarter badge there,


00:22:05.340 --> 00:22:07.700
and from there they can go to the Kickstarter page


00:22:07.700 --> 00:22:09.380
and find out what I'm planning to do,


00:22:09.380 --> 00:22:10.220
if they're interested.


00:22:10.220 --> 00:22:11.260
- Awesome, yeah, we'll throw the link


00:22:11.260 --> 00:22:12.100
in the show notes as well.


00:22:12.100 --> 00:22:13.180
- Thank you.


00:22:13.180 --> 00:22:15.860
- Cool, so I just have one piece of news as well myself,


00:22:15.860 --> 00:22:18.820
other than, hey, I'm back from vacation, that's awesome.


00:22:18.820 --> 00:22:20.980
While I was on vacation, I ended up finding


00:22:20.980 --> 00:22:27.320
little bit of time to release my latest course, which is building RESTful APIs with Pyramid.


00:22:27.320 --> 00:22:31.660
And so this is like an eight hour course digging into like the whole what is REST, like how


00:22:31.660 --> 00:22:36.240
do you work with HTTP status codes and verbs and all that and then making this all happen


00:22:36.240 --> 00:22:37.240
in Pyramid.


00:22:37.240 --> 00:22:38.240
And it was really fun to write.


00:22:38.240 --> 00:22:40.240
So if that sounds cool to you, check it out at training.python.fm.


00:22:40.240 --> 00:22:44.340
I'll probably put that in the show notes as well.


00:22:44.340 --> 00:22:50.100
All right, Miguel, thank you so much for filling in while Brian's having his beer over in Germany.


00:22:50.100 --> 00:22:52.100
Actually, I don't know what he's doing, but I hope he had a beer.


00:22:52.100 --> 00:22:54.100
Yeah, thank you for having me.


00:22:54.100 --> 00:22:56.100
Yeah, it was great. Talk to you later.


00:22:56.100 --> 00:22:58.100
Thank you for listening to Python Bytes.


00:22:58.100 --> 00:23:00.100
Follow the show on Twitter via @PythonBytes.


00:23:00.100 --> 00:23:03.100
That's Python Bytes as in B-Y-T-E-S.


00:23:03.100 --> 00:23:06.100
And get the full show notes at pythonbytes.fm.


00:23:06.100 --> 00:23:08.100
If you have a news item you want featured,


00:23:08.100 --> 00:23:11.100
just visit pythonbytes.fm and send it our way.


00:23:11.100 --> 00:23:14.100
We're always on the lookout for sharing something cool.


00:23:14.100 --> 00:23:17.100
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:23:17.100 --> 00:23:20.700
Thank you for listening and sharing this podcast with your friends and colleagues.

