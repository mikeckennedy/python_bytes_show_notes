
00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:10.320
This is episode 132, recorded May 22, 2019.


00:00:10.320 --> 00:00:11.120
I'm Michael Kennedy.


00:00:11.120 --> 00:00:12.000
And I'm Brian Okken.


00:00:12.000 --> 00:00:14.320
And this episode is brought to you by DigitalOcean.


00:00:14.320 --> 00:00:16.720
Check them out at pythonbytes.fm/digitalocean.


00:00:16.720 --> 00:00:17.680
More about that later.


00:00:17.680 --> 00:00:19.040
Brian, how you been?


00:00:19.040 --> 00:00:22.960
I'm good, but I'm giggling right now because I've been looking up jokes, but we'll get to those later.


00:00:22.960 --> 00:00:26.880
Yeah, I always look forward to the jokes, and I think a lot of people out there seem to appreciate them.


00:00:26.880 --> 00:00:28.880
So yeah, we won't disappoint this time.


00:00:28.880 --> 00:00:30.560
We got more lined up as always.


00:00:30.560 --> 00:00:31.360
Yeah, okay.


00:00:31.360 --> 00:00:35.200
I mean, like in the past, you maybe used to have to come up with these, but we have the internet.


00:00:35.200 --> 00:00:36.880
Yeah, I know.


00:00:36.880 --> 00:00:37.440
It's beautiful.


00:00:37.440 --> 00:00:39.200
It's easy to be a dad now.


00:00:39.200 --> 00:00:39.840
That's right.


00:00:39.840 --> 00:00:42.560
All right, you want to kick us off with a little embedded Python?


00:00:42.560 --> 00:00:44.800
Yeah, I was really excited to watch this.


00:00:44.800 --> 00:00:49.120
So I did meet, so this is the first one I've got up is the history of CircuitPython.


00:00:49.120 --> 00:00:52.640
And this was actually on the PSF blog.


00:00:52.640 --> 00:00:56.800
And I think that a Jesse Jerry Davis put it up.


00:00:56.800 --> 00:01:03.480
But anyway, it's about the history of CircuitPython and Adafruit and Scott Showcroft, which I


00:01:03.480 --> 00:01:08.520
met Scott at PyCon and I knew he was involved with CircuitPython, but I guess I didn't realize


00:01:08.520 --> 00:01:11.380
he was, he's the CircuitPython guy.


00:01:11.380 --> 00:01:15.520
So what happened was, and I always kind of wondered about this, like the relationship


00:01:15.520 --> 00:01:17.240
between MicroPython and CircuitPython.


00:01:17.240 --> 00:01:21.480
Right, I knew about MicroPython being for embedded devices and I'm like, oh, there's


00:01:21.480 --> 00:01:22.480
now CircuitPython.


00:01:22.480 --> 00:01:24.040
Like, are they friends?


00:01:24.040 --> 00:01:25.040
Are they frenemies?


00:01:25.040 --> 00:01:27.760
are that one is a specialization of the other, what are they?


00:01:27.760 --> 00:01:31.840
So what happened was Adafruit thought MicroPython was a pretty cool thing


00:01:31.840 --> 00:01:39.760
and hired Scott to port it to their, I guess their SAMD21 chip that's used on many of the boards.


00:01:39.760 --> 00:01:45.840
So he did it, he's working on it and it's a, at first it was just a fork, but now it's a


00:01:45.840 --> 00:01:51.680
fairly big changed fork. There's a lot of differences. But Scott said it's a friendly


00:01:51.680 --> 00:01:54.560
fork. So they he works closely with the


00:01:54.560 --> 00:01:57.600
MicroPython people too and they share code back and forth.


00:01:57.600 --> 00:02:02.240
So there's no no hard feelings there but it's focused on the Adafruit boards.


00:02:02.240 --> 00:02:05.280
But it's also MicroPython is also focused


00:02:05.280 --> 00:02:08.720
really just on embedded stuff whereas CircuitPython


00:02:08.720 --> 00:02:14.720
is focused on beginners and one of Scott's quotes is "our goal is


00:02:14.720 --> 00:02:18.480
to focus on the first five minutes someone has ever coded."


00:02:18.480 --> 00:02:20.480
That's a strong lofty goal.


00:02:20.480 --> 00:02:23.480
But watching some of their demos with the CircuitPython,


00:02:23.480 --> 00:02:25.480
it isn't surprising to me.


00:02:25.480 --> 00:02:28.480
They just hook it up and a few minutes later,


00:02:28.480 --> 00:02:29.480
they've got stuff running.


00:02:29.480 --> 00:02:30.480
It's kind of incredible.


00:02:30.480 --> 00:02:31.480
Yeah, that's really awesome.


00:02:31.480 --> 00:02:36.480
And that is a very impressive goal to say we're focused on the first


00:02:36.480 --> 00:02:39.480
five to ten minutes of somebody programming because, yeah,


00:02:39.480 --> 00:02:41.480
that's an early point in the life cycle.


00:02:41.480 --> 00:02:44.480
But I guess you got to start somewhere.


00:02:44.480 --> 00:02:49.480
I do think these embedded devices really do bring some realism to programming


00:02:49.480 --> 00:02:53.480
for people who may be programming just in the more theoretical way.


00:02:53.480 --> 00:02:56.480
It didn't necessarily connect, so it's great.


00:02:56.480 --> 00:02:58.480
One of the things I didn't know about was with--


00:02:58.480 --> 00:03:02.480
one of the things that CircuitPython does is it outputs--


00:03:02.480 --> 00:03:05.480
all the print statements go automatically to the serial output.


00:03:05.480 --> 00:03:09.480
So if you hook up your serial output to a connected display,


00:03:09.480 --> 00:03:11.480
you don't even have to have any other device.


00:03:11.480 --> 00:03:13.880
you can just see your prints and stuff.


00:03:13.880 --> 00:03:14.880
So that's kind of neat.


00:03:14.880 --> 00:03:15.480
That's awesome.


00:03:15.480 --> 00:03:18.880
And Nina Zakarenko actually showed how to use this.


00:03:18.880 --> 00:03:21.780
And like, I think it was Visual Studio Code,


00:03:21.780 --> 00:03:24.480
she had that serial output connected.


00:03:24.480 --> 00:03:26.380
So just within Visual Studio Code,


00:03:26.380 --> 00:03:29.280
like the devices output would just like stream at the bottom.


00:03:29.280 --> 00:03:30.180
That's so cool.


00:03:30.180 --> 00:03:34.080
And then we're also including a link to the release notes


00:03:34.080 --> 00:03:37.480
for CircuitPython 4.0.0.


00:03:37.480 --> 00:03:39.180
So it's a new major number.


00:03:39.180 --> 00:03:43.080
So there's some breaking, a couple of breaking things, but it looks kind of neat.


00:03:43.080 --> 00:03:43.880
Yeah, that's super.


00:03:43.880 --> 00:03:47.100
And apparently they're not on the zero for philosophy.


00:03:47.100 --> 00:03:49.840
Yeah, no, that's good.


00:03:49.840 --> 00:03:53.400
Maybe you read it reverse for zero for like zero, zero four.


00:03:53.400 --> 00:03:53.800
I don't know.


00:03:53.800 --> 00:03:57.240
Anyway, if you must, but no, that's cool.


00:03:57.240 --> 00:03:59.680
It's, it's great that there's new version of that out at it.


00:03:59.680 --> 00:04:01.600
I really think they're doing a lot of cool stuff.


00:04:01.600 --> 00:04:04.060
The Adafruit folks are doing a lot of cool things.


00:04:04.060 --> 00:04:07.980
And some of those devices I think were given out at PyCon this year as well,


00:04:07.980 --> 00:04:08.860
which is pretty neat.


00:04:08.860 --> 00:04:09.080
Yeah.


00:04:09.100 --> 00:04:12.180
So we've talked about Python being popular, right?


00:04:12.180 --> 00:04:13.060
Yes.


00:04:13.060 --> 00:04:13.820
Yeah, absolutely.


00:04:13.820 --> 00:04:16.460
So this next article that I want to cover


00:04:16.460 --> 00:04:21.700
is by dice.com doing a little bit of analysis of the TOB index.


00:04:21.700 --> 00:04:23.420
So we've talked about TOB before.


00:04:23.420 --> 00:04:25.620
This is a programming index.


00:04:25.620 --> 00:04:28.460
Talks about how popular languages are.


00:04:28.460 --> 00:04:33.300
And one of the areas of major growth in Python


00:04:33.300 --> 00:04:36.380
has to do with the data science space and just the scientific computing


00:04:36.380 --> 00:04:37.340
in general.


00:04:37.340 --> 00:04:43.860
So this article that I want to highlight, the title is "R risks Python swallowing it


00:04:43.860 --> 00:04:46.580
whole" according to DOB.


00:04:46.580 --> 00:04:48.200
So that's pretty interesting.


00:04:48.200 --> 00:04:51.420
There used to be like kind of a debate, do I use R, do I use Python?


00:04:51.420 --> 00:04:55.460
Well, it looks like there's a lot of consolidation and all this growth in Python is somewhat


00:04:55.460 --> 00:04:59.340
a zero-sum game for the other languages.


00:04:59.340 --> 00:05:03.260
So it might be interesting to check out if you're thinking, should I learn R, should


00:05:03.260 --> 00:05:04.260
I learn Python?


00:05:04.260 --> 00:05:07.260
R has a lot of interesting advantages over Python,


00:05:07.260 --> 00:05:10.820
but it seems like Python is kind of winning the day.


00:05:10.820 --> 00:05:14.740
And so R has tumbled out of the top 20 languages


00:05:14.740 --> 00:05:16.420
and now is somewhere below that.


00:05:16.420 --> 00:05:18.380
- It's very popular with a lot of people,


00:05:18.380 --> 00:05:20.900
but I didn't even hear about it until maybe a year ago.


00:05:20.900 --> 00:05:21.780
- For sure.


00:05:21.780 --> 00:05:24.860
Yeah, it's definitely focused on a more of a niche space.


00:05:24.860 --> 00:05:28.460
So the article speculates, sort of not super effectively,


00:05:28.460 --> 00:05:30.100
why they think that is.


00:05:30.100 --> 00:05:32.020
Like, they ask the question, like,


00:05:32.020 --> 00:05:37.500
well, it seems that Python is winning in data science, but why?


00:05:37.500 --> 00:05:40.620
And so I thought maybe I'd throw my own commentary in here.


00:05:40.620 --> 00:05:44.940
And there's this idea I really like to talk about with Python


00:05:44.940 --> 00:05:48.300
being a full spectrum programming language.


00:05:48.300 --> 00:05:51.540
And what I mean by that is you can get started


00:05:51.540 --> 00:05:53.940
with the absolute minimum amount of effort.


00:05:53.940 --> 00:05:57.340
There's no compilers, no linkers, there's no header files.


00:05:57.340 --> 00:06:01.200
There's a single file, and you can say print parentheses quote,


00:06:01.200 --> 00:06:03.440
Hello World, right, and that's it.


00:06:03.440 --> 00:06:05.880
You don't need to think about generators


00:06:05.880 --> 00:06:10.880
or all the other stuff that rich programming languages have.


00:06:10.880 --> 00:06:12.740
Think C#, Java, C++, right?


00:06:12.740 --> 00:06:16.520
You've gotta do all this ceremony to get going.


00:06:16.520 --> 00:06:18.620
But the value of those other languages


00:06:18.620 --> 00:06:21.820
is you can go build video games


00:06:21.820 --> 00:06:25.720
or operating systems or whatever, right?


00:06:25.720 --> 00:06:27.380
And you can do much of that kind of stuff,


00:06:27.380 --> 00:06:28.640
not operating systems necessarily,


00:06:28.640 --> 00:06:32.800
But like you can build real apps, professional apps in Python, and it kind of scales from


00:06:32.800 --> 00:06:37.360
this ultra beginner part where you can partially understand the language and be effective all


00:06:37.360 --> 00:06:43.040
the way up to using meta classes and decorators and generators to build, I don't know, Instagram


00:06:43.040 --> 00:06:44.040
or whatever.


00:06:44.040 --> 00:06:47.640
And I think that that's actually why Python is winning in this space because the data


00:06:47.640 --> 00:06:51.020
scientists and scientific computing folks are coming in and they're like, I don't want


00:06:51.020 --> 00:06:52.680
to be like a programmer.


00:06:52.680 --> 00:06:55.320
I want to use programming to solve my problem.


00:06:55.320 --> 00:06:59.880
And Python lets them start that super easy path but grow into where they eventually find


00:06:59.880 --> 00:07:00.880
themselves.


00:07:00.880 --> 00:07:05.720
One of the things also is that people that have to reach towards R or some other programming


00:07:05.720 --> 00:07:10.580
language, that's not their only software issue that they may have.


00:07:10.580 --> 00:07:15.100
And if you can solve it with Python, you learn Python, and then you can solve other automation


00:07:15.100 --> 00:07:17.520
things within your workflow as well.


00:07:17.520 --> 00:07:22.920
Whereas R has very focused, I don't know how much you can do with it outside of data science.


00:07:22.920 --> 00:07:23.920
That's for sure.


00:07:23.920 --> 00:07:24.920
That's definitely part of the story.


00:07:24.920 --> 00:07:27.920
Speaking of stories, you've got a little history lesson for us, right?


00:07:27.920 --> 00:07:32.860
I've had this on the list for a while, but it took me, I just went back and read it yesterday.


00:07:32.860 --> 00:07:38.640
It's an article by, I think it's Eamon L. Emery, called "The Missing Introduction to


00:07:38.640 --> 00:07:40.920
Containerization."


00:07:40.920 --> 00:07:45.880
And so container systems like Docker and stuff like that, lots of people use them.


00:07:45.880 --> 00:07:50.160
And I do want to ramp up learning how to use them more.


00:07:50.160 --> 00:07:55.420
I'm kind of one of those people that need a mental model of how all this stuff works.


00:07:55.420 --> 00:07:56.420
And this is it.


00:07:56.420 --> 00:08:02.360
So it starts with a 1979 release of something called, I don't even know how to pronounce


00:08:02.360 --> 00:08:03.360
this, Chroot, C-H-R-O-O-T.


00:08:03.360 --> 00:08:04.360
Chroot.


00:08:04.360 --> 00:08:05.360
Chroot, yeah.


00:08:05.360 --> 00:08:06.360
Chroot.


00:08:06.360 --> 00:08:13.880
Anyway, Chroot Jail, which was a way to isolate a root process and its children from the rest


00:08:13.880 --> 00:08:15.120
of the OS.


00:08:15.120 --> 00:08:19.800
But there was a bunch of problems with, there wasn't really meant for security.


00:08:19.800 --> 00:08:24.640
I'm not going to read the whole thing, but it builds up because of this is open source,


00:08:24.640 --> 00:08:32.640
FreeBSD improved on it, then Linux vServer, and then Oracle Solaris had some stuff, OpenVZ,


00:08:32.640 --> 00:08:38.760
and then Google chimed in with something called cgroups, and then a group called Linux containers


00:08:38.760 --> 00:08:45.800
did LXC, and then it kind of built up, Cloud Foundry got involved, and then in 2013, Docker,


00:08:45.800 --> 00:08:49.640
and then Google's still doing more stuff with making things easier.


00:08:49.640 --> 00:08:51.680
all this stuff builds up on itself.


00:08:51.680 --> 00:08:53.040
I really like that bit of


00:08:53.040 --> 00:08:55.400
a history lesson of how things built on itself.


00:08:55.400 --> 00:08:59.320
Then it jumps into talking about the differences,


00:08:59.320 --> 00:09:02.520
all the different terms you'll find like a system virtual machine,


00:09:02.520 --> 00:09:03.840
a process virtual machine,


00:09:03.840 --> 00:09:06.760
and VPS, and what all those things mean.


00:09:06.760 --> 00:09:09.040
Also the difference between


00:09:09.040 --> 00:09:12.920
an operating system container system and an app container.


00:09:12.920 --> 00:09:16.560
Docker is a little bit of a mix of both.


00:09:16.560 --> 00:09:20.060
Also, it's kind of containers and platforms.


00:09:20.060 --> 00:09:24.160
Just why there's so many things around is kind of described in this.


00:09:24.160 --> 00:09:26.460
And then that's only like halfway through the article.


00:09:26.460 --> 00:09:31.460
The rest of the article jumps into, I think it's creating a container system from scratch


00:09:31.460 --> 00:09:34.060
based on some of these lib container things.


00:09:34.060 --> 00:09:35.860
And yeah, I don't want to do that.


00:09:35.860 --> 00:09:39.060
So, but the first half of it, definitely recommend.


00:09:39.060 --> 00:09:40.060
It's a good article.


00:09:40.060 --> 00:09:42.060
Yeah, the history here is really interesting.


00:09:42.060 --> 00:09:45.260
Like, I guess when I first learned about Docker, I thought like,


00:09:45.260 --> 00:09:48.060
"Oh, Docker invented containers," right?


00:09:48.060 --> 00:09:49.860
But absolutely not, all right?


00:09:49.860 --> 00:09:52.820
They were building on LXC and all these other things,


00:09:52.820 --> 00:09:55.420
and eventually they sort of moved off that.


00:09:55.420 --> 00:09:58.860
But yeah, they were just making containers


00:09:58.860 --> 00:10:02.220
more accessible and easier for folks and popularizing it.


00:10:02.220 --> 00:10:04.220
I think these containers are super powerful


00:10:04.220 --> 00:10:05.380
and super interesting.


00:10:05.380 --> 00:10:07.780
To me, I don't know, do you feel like they're complicated?


00:10:07.780 --> 00:10:10.940
- It seems like the system is made to not be,


00:10:10.940 --> 00:10:13.080
but I know there's a lot of stuff


00:10:13.080 --> 00:10:14.700
behind the scenes going on.


00:10:14.700 --> 00:10:17.340
And I, you know, to be honest, I haven't played with them much or used them.


00:10:17.340 --> 00:10:21.560
I don't need them for my normal job, but I would like to learn more.


00:10:21.560 --> 00:10:22.180
How about you?


00:10:22.180 --> 00:10:23.180
I definitely like them.


00:10:23.180 --> 00:10:26.060
I'm not doing anything with them right now.


00:10:26.060 --> 00:10:30.020
And I've thought about how using containers might make sense, but at the


00:10:30.020 --> 00:10:32.680
same time, you have like lightweight VMs.


00:10:32.680 --> 00:10:35.700
I just fire up and like, they're dedicated to a single purpose.


00:10:35.700 --> 00:10:37.140
So I don't know.


00:10:37.140 --> 00:10:40.500
It's, it's always a bit of a trade-off of like adding more complexity.


00:10:40.500 --> 00:10:42.180
In one place.


00:10:42.180 --> 00:10:45.220
I feel like it's a little bit of a whack-a-mole problem.


00:10:45.220 --> 00:10:47.620
I can have more simplicity in some places,


00:10:47.620 --> 00:10:49.660
but I've pushed it to another.


00:10:49.660 --> 00:10:52.420
So for example, people talk about containers


00:10:52.420 --> 00:10:55.140
often being a great way to simplify


00:10:55.140 --> 00:10:58.180
development environments for junior developers.


00:10:58.180 --> 00:10:59.020
Okay? - Yeah.


00:10:59.020 --> 00:11:00.980
- So I'm gonna work at a new company,


00:11:00.980 --> 00:11:03.420
our app infrastructure is super complicated,


00:11:03.420 --> 00:11:05.180
so what they do is they say,


00:11:05.180 --> 00:11:07.380
well, here's three containers,


00:11:07.380 --> 00:11:09.660
one runs a database, one runs the web front end,


00:11:09.660 --> 00:11:12.300
one runs the caching tier, whatever the heck it is.


00:11:12.300 --> 00:11:15.260
And I'm just run those and I'll just develop in that


00:11:15.260 --> 00:11:17.060
regardless of what my machine setup like.


00:11:17.060 --> 00:11:19.520
Well, that's on one hand like simpler,


00:11:19.520 --> 00:11:22.100
I say maybe Docker compose up and boom,


00:11:22.100 --> 00:11:23.220
my little environment's working.


00:11:23.220 --> 00:11:25.940
But now I've got to figure out how does my editor


00:11:25.940 --> 00:11:29.660
do like remote debugging of Docker containers?


00:11:29.660 --> 00:11:32.940
And how do I like step across calls between containers


00:11:32.940 --> 00:11:35.180
in my debugger and all this other stuff.


00:11:35.180 --> 00:11:38.120
It's like, okay, so I've moved like setup complexity


00:11:38.120 --> 00:11:41.540
to like editor complexity or other stuff, right?


00:11:41.540 --> 00:11:43.260
So I don't know, it's super interesting.


00:11:43.260 --> 00:11:45.180
I'd certainly see them being really valuable


00:11:45.180 --> 00:11:46.860
for like zero downtime deployments


00:11:46.860 --> 00:11:49.460
and other kinds of stuff, but yeah, it's interesting.


00:11:49.460 --> 00:11:51.180
- In my wacky corner of the universe,


00:11:51.180 --> 00:11:53.800
the place where I probably would use them


00:11:53.800 --> 00:11:56.740
is we often wanna spin up a new build server


00:11:56.740 --> 00:11:57.960
or something like that.


00:11:57.960 --> 00:12:01.140
And we have it written down of how to build a build server.


00:12:01.140 --> 00:12:03.140
Even though it's on a virtual machine,


00:12:03.140 --> 00:12:04.940
we gotta install a bunch of stuff


00:12:04.940 --> 00:12:08.360
and it's a half a day to get it up and running.


00:12:08.360 --> 00:12:10.200
And having that just saved off.


00:12:10.200 --> 00:12:12.400
- Yeah, that's a perfect example of Docker, right?


00:12:12.400 --> 00:12:14.280
'Cause you can build the container images


00:12:14.280 --> 00:12:16.400
to just do that setup and you just say,


00:12:16.400 --> 00:12:18.920
you know, Docker build and boom, you're ready.


00:12:18.920 --> 00:12:19.960
- Yeah. - Yeah, I like that.


00:12:19.960 --> 00:12:23.160
Speaking of containers and all those good things,


00:12:23.160 --> 00:12:24.760
let's talk really quick about DigitalOcean,


00:12:24.760 --> 00:12:26.000
some of the stuff they have to offer.


00:12:26.000 --> 00:12:28.480
So DigitalOcean just this week


00:12:28.480 --> 00:12:32.440
put their Kubernetes cluster into general availability


00:12:32.440 --> 00:12:33.840
and added some cool new features.


00:12:33.840 --> 00:12:36.800
So if you're using Docker, you got to run it somewhere


00:12:36.800 --> 00:12:39.080
and usually just running it directly is not what you want.


00:12:39.080 --> 00:12:41.040
You want to run it somewhere with like,


00:12:41.040 --> 00:12:44.160
you can upgrade versions and do zero downtime deployments


00:12:44.160 --> 00:12:45.280
and multi container stuff.


00:12:45.280 --> 00:12:47.480
So Kubernetes is a great place for that.


00:12:47.480 --> 00:12:50.000
So check that out over at DigitalOcean.


00:12:50.000 --> 00:12:53.000
Just visit pythonbyte.fm/digitalocean


00:12:53.000 --> 00:12:56.200
and get $50 credit for new users.


00:12:56.200 --> 00:12:58.100
Yeah, so all sorts of cool stuff over there.


00:12:58.100 --> 00:13:00.800
You can provision your servers and optimize it


00:13:00.800 --> 00:13:02.200
and get it going, right?


00:13:02.200 --> 00:13:03.160
Really, really nice.


00:13:03.160 --> 00:13:06.680
And one of the things they just added is free integrated monitoring that'll provide


00:13:06.680 --> 00:13:10.200
like insight across your clusters and your containers and stuff.


00:13:10.200 --> 00:13:11.160
So yeah, check them out.


00:13:11.160 --> 00:13:13.000
Pythonbytes.fm/digitalocean.


00:13:13.000 --> 00:13:14.240
Super, super cool.


00:13:14.240 --> 00:13:17.740
So this next thing I want to cover, Brian, touches on something I've been a fan of for


00:13:17.740 --> 00:13:19.780
a long time, and that's design patterns.


00:13:19.780 --> 00:13:20.140
Okay.


00:13:20.140 --> 00:13:21.740
So design patterns.


00:13:21.740 --> 00:13:27.260
We talked a little bit about that previously, one of the shows just recently, but this


00:13:27.260 --> 00:13:32.480
time I want to focus on maybe a topic that is reversed from a lot of the advice that


00:13:32.480 --> 00:13:34.880
you hear a lot of times you hear people say,


00:13:34.880 --> 00:13:37.500
hey, Python developers, stop using classes


00:13:37.500 --> 00:13:39.040
and stop using objects.


00:13:39.040 --> 00:13:41.280
Just write modules and functions, right?


00:13:41.280 --> 00:13:42.240
- Yeah, sometimes.


00:13:42.240 --> 00:13:44.000
- Yeah, sometimes, and that's totally reasonable.


00:13:44.000 --> 00:13:46.840
A lot of times people come from C# or Java


00:13:46.840 --> 00:13:48.660
where everything is an object,


00:13:48.660 --> 00:13:50.020
everything has to be in a class,


00:13:50.020 --> 00:13:52.600
and so they think, well, I have to do that in Python,


00:13:52.600 --> 00:13:55.620
and if you've got a static variable in a class,


00:13:55.620 --> 00:13:58.440
that's just kind of like a module level variable


00:13:58.440 --> 00:13:59.920
in a function, like there's no real value


00:13:59.920 --> 00:14:01.280
to breaking that apart.


00:14:01.280 --> 00:14:03.100
However, a lot of times there are.


00:14:03.100 --> 00:14:05.920
So there's a cool article that walks you through


00:14:05.920 --> 00:14:10.560
in super in-depth, focused on sort of data science side


00:14:10.560 --> 00:14:14.920
of this object, no object debate called Algorithms as Objects.


00:14:14.920 --> 00:14:16.600
So usually we think of algorithms


00:14:16.600 --> 00:14:18.960
as a single function with an input and output.


00:14:18.960 --> 00:14:21.800
And algorithm textbooks reinforce this notion, right?


00:14:21.800 --> 00:14:24.880
Like everything fits nice onto a single page.


00:14:24.880 --> 00:14:26.480
But in reality, what you end up with


00:14:26.480 --> 00:14:28.640
are these giant monolithic functions


00:14:28.640 --> 00:14:30.520
that are like full of details


00:14:30.520 --> 00:14:32.120
with lots of cyclomatic complexity


00:14:32.120 --> 00:14:35.100
and passing lots of data around and all sorts of stuff.


00:14:35.100 --> 00:14:37.080
And it's not nearly as nice.


00:14:37.080 --> 00:14:40.360
You end up with these functions that like lack readability


00:14:40.360 --> 00:14:42.960
and because of that, they lack maintainability.


00:14:42.960 --> 00:14:46.200
Nobody wants to touch it because it's probably important.


00:14:46.200 --> 00:14:47.480
It's an algorithm, right?


00:14:47.480 --> 00:14:50.600
And if it's wrong, it's probably hard to tell if it's wrong.


00:14:50.600 --> 00:14:52.160
So you don't wanna break it.


00:14:52.160 --> 00:14:54.280
It's just kind of scary, right?


00:14:54.280 --> 00:14:58.000
So they talk about taking these algorithms


00:14:58.000 --> 00:14:59.840
and turning them into functions.


00:14:59.840 --> 00:15:02.080
And one of the ideas I really like


00:15:02.080 --> 00:15:03.240
that they're starting with is like,


00:15:03.240 --> 00:15:04.800
well, should I do this or not?


00:15:04.800 --> 00:15:06.060
How do I know?


00:15:06.060 --> 00:15:08.280
So they talk about this idea of code smells.


00:15:08.280 --> 00:15:10.680
And the idea of code smells comes from Martin Fowler


00:15:10.680 --> 00:15:13.720
way back in the day, like 1999 or something like that,


00:15:13.720 --> 00:15:15.880
when he wrote his refactoring book.


00:15:15.880 --> 00:15:18.080
And these are aspects of code


00:15:18.080 --> 00:15:19.760
that are not necessarily broken,


00:15:19.760 --> 00:15:22.040
but they're just like a little bit off.


00:15:22.040 --> 00:15:23.040
Have you heard of this idea, Brian?


00:15:23.040 --> 00:15:23.880
- Yeah, definitely.


00:15:23.880 --> 00:15:25.160
- It kind of makes you wrinkle up your nose.


00:15:25.160 --> 00:15:27.920
You're like, ew, something's not good here.


00:15:27.920 --> 00:15:29.120
But the code works, right?


00:15:29.120 --> 00:15:31.400
Like it would pass the test, so it's fine.


00:15:31.400 --> 00:15:33.440
So the code smells, they say,


00:15:33.440 --> 00:15:35.500
that you should be on the lookout for here are,


00:15:35.500 --> 00:15:38.480
number one, the function, the algorithm,


00:15:38.480 --> 00:15:40.400
the one giant function, it's too long


00:15:40.400 --> 00:15:41.700
or it's too deeply nested.


00:15:41.700 --> 00:15:44.140
Like we just spoke about guarding clauses last time.


00:15:44.140 --> 00:15:45.600
Does it have banner comments?


00:15:45.600 --> 00:15:48.520
Like a huge comment at the top that describes


00:15:48.520 --> 00:15:51.920
what it does, how it works, the special cases, right?


00:15:51.920 --> 00:15:55.680
I often say that code comments are deodorant for bad code,


00:15:55.680 --> 00:15:57.480
so you should just write good code and not do that.


00:15:57.480 --> 00:15:59.200
So that's an example.


00:15:59.200 --> 00:16:03.920
Helper functions that are maybe nested closures inside there,


00:16:03.920 --> 00:16:06.880
some weird thing like that, or maybe actual helper functions,


00:16:06.880 --> 00:16:11.080
but they're only used within this larger function,


00:16:11.080 --> 00:16:12.000
passing a lot of states.


00:16:12.000 --> 00:16:15.400
All these things are indicators that maybe an object


00:16:15.400 --> 00:16:19.320
would be much better for wrapping up your algorithm.


00:16:19.320 --> 00:16:22.440
So it's really, I think, got a lot of concrete advice here.


00:16:22.440 --> 00:16:24.080
This actually looks pretty interesting.


00:16:24.080 --> 00:16:25.080
It's super interesting.


00:16:25.080 --> 00:16:27.160
And it's full of examples.


00:16:27.160 --> 00:16:29.760
It's a really long article with lots of concrete examples


00:16:29.760 --> 00:16:31.560
of here's an algorithm, we did it this way.


00:16:31.560 --> 00:16:33.000
We refactor that to an object


00:16:33.000 --> 00:16:35.000
and look how much more understandable it is


00:16:35.000 --> 00:16:36.320
and how much simpler it is.


00:16:36.320 --> 00:16:39.200
So if this idea resonates with you,


00:16:39.200 --> 00:16:40.200
definitely check it out.


00:16:40.200 --> 00:16:42.120
And the guy who wrote it said,


00:16:42.120 --> 00:16:46.000
hey, when I present this idea to my colleagues


00:16:46.000 --> 00:16:48.000
or other folks, at first they're like,


00:16:48.000 --> 00:16:49.560
no, we shouldn't be using classes,


00:16:49.560 --> 00:16:50.720
just functions will do.


00:16:50.720 --> 00:16:53.240
He encountered some pushback,


00:16:53.240 --> 00:16:56.320
but rarely does he encounter like prolonged pushback


00:16:56.320 --> 00:16:57.960
after people see the results,


00:16:57.960 --> 00:16:59.960
they're like, no, actually, this is pretty cool.


00:16:59.960 --> 00:17:03.800
- I'm just chuckling, and one of the topics he has here is,


00:17:03.800 --> 00:17:05.920
I've got 99 problems, give me two more.


00:17:05.920 --> 00:17:07.400
(laughing)


00:17:07.400 --> 00:17:08.220
- Yeah, it's a good article.


00:17:08.220 --> 00:17:10.200
Definitely check it out if people are interested.


00:17:10.200 --> 00:17:11.800
It's very concrete and helpful.


00:17:11.800 --> 00:17:13.560
So, Brian, I know you're into testing,


00:17:13.560 --> 00:17:15.440
and I know you're a fan of pytest.


00:17:15.440 --> 00:17:17.800
What are you into, like, really small versions of pytest,


00:17:17.800 --> 00:17:18.640
or what is this?


00:17:18.640 --> 00:17:22.280
- I got into this because I've been using Python


00:17:22.280 --> 00:17:27.280
for testing purposes for since like 2002 or something like that.


00:17:27.280 --> 00:17:32.280
They were often custom made Python frameworks or testing frameworks within our company.


00:17:32.280 --> 00:17:37.280
And then around 2010 I did the same thing and wrote my own.


00:17:37.280 --> 00:17:42.280
But it took me a while to get it down. I was arrogant and thought, "Oh, this would be trivial."


00:17:42.280 --> 00:17:47.280
Because the basic algorithm isn't really doing much. But Oliver Bestwalter,


00:17:47.280 --> 00:17:55.280
there was a comment somewhere on Twitter that the core of pytest could be written in like a couple dozen lines of code.


00:17:55.280 --> 00:17:57.280
And people were like, "What? Really?"


00:17:57.280 --> 00:18:01.280
And so he, of course, he's a brilliant person. He went out and just did it.


00:18:01.280 --> 00:18:04.280
So he released a thing called Picopytest.


00:18:04.280 --> 00:18:09.280
It doesn't have a certain rewriting and it doesn't have like fixtures or any of the fun stuff,


00:18:09.280 --> 00:18:16.280
but it's a generally usable test framework that you could run some tests with, written in 25 lines of code.


00:18:16.280 --> 00:18:22.280
And you know, like the first five are just import statements or space, and one of them is a method.


00:18:22.280 --> 00:18:28.280
So I think you could probably get it down to 19 if you were willing to go a little crazy on it. That's wild.


00:18:28.280 --> 00:18:31.280
So some of the things that it uses are like import lib.


00:18:31.280 --> 00:18:36.280
Some of these things are clearly put in the language for tools like pytest and stuff,


00:18:36.280 --> 00:18:42.280
like import libs, spec from file location, and module from spec.


00:18:42.280 --> 00:18:51.080
I don't know what those things do, but it looks like it's a way to sort of gradually load a module and then run parts of it, because that's what this code does.


00:18:51.080 --> 00:19:00.580
One of the things I like about this, one of the reasons why I'm highlighting it is a lot of people think of test frameworks as this thing, they don't really know, it's a black box that does stuff.


00:19:00.580 --> 00:19:09.080
And I think this is a good way to highlight, it's not, this, Python is very flexible and the heart of a test framework isn't that complicated.


00:19:09.080 --> 00:19:11.960
It's going out and finding files that match


00:19:11.960 --> 00:19:14.200
like a certain pattern, test_,


00:19:14.200 --> 00:19:17.580
and finding some functions inside those to call,


00:19:17.580 --> 00:19:20.820
and then just catching exceptions and logging failures.


00:19:20.820 --> 00:19:23.040
It's not that complicated, so it's pretty cool.


00:19:23.040 --> 00:19:24.600
- That's super cool, and I think anybody


00:19:24.600 --> 00:19:27.240
who cares about testing, or maybe is being introduced


00:19:27.240 --> 00:19:30.060
to testing, should read those 25 lines.


00:19:30.060 --> 00:19:31.400
Not necessarily for understanding,


00:19:31.400 --> 00:19:33.440
but just to get the sense of like,


00:19:33.440 --> 00:19:36.460
this is what happens when you run tests against your code.


00:19:36.460 --> 00:19:38.760
It finds your model, it loads up the functions,


00:19:38.760 --> 00:19:41.820
it calls it, it does this basic thing and that's it.


00:19:41.820 --> 00:19:42.660
It's really nice.


00:19:42.660 --> 00:19:43.480
- Yeah.


00:19:43.480 --> 00:19:44.320
- Very, very cool.


00:19:44.320 --> 00:19:46.160
That is definitely, I don't know what the atomic unit


00:19:46.160 --> 00:19:48.240
of a test framework is, but that's nearly it.


00:19:48.240 --> 00:19:50.020
- He popped this out in like two days


00:19:50.020 --> 00:19:53.620
and it took me like two months to write my first version


00:19:53.620 --> 00:19:55.680
of my test framework, so awesome.


00:19:55.680 --> 00:19:56.880
- Yeah, super cool, super cool.


00:19:56.880 --> 00:19:59.860
All right, last one I wanna cover has to do with Cython.


00:19:59.860 --> 00:20:01.940
Not CPython, but Cython.


00:20:01.940 --> 00:20:04.500
It's an article called "An Introduction to Cython,


00:20:04.500 --> 00:20:07.520
"The Secret Python Extension with Superpowers."


00:20:07.520 --> 00:20:09.880
And who wouldn't want an extension with superpowers?


00:20:09.880 --> 00:20:10.800
- Yeah, exactly.


00:20:10.800 --> 00:20:12.880
- They make the statement that they think Cython


00:20:12.880 --> 00:20:15.040
is one of the best kept secrets of Python.


00:20:15.040 --> 00:20:16.320
And I agree, like,


00:20:16.320 --> 00:20:21.000
Cython will take almost arbitrary Python code


00:20:21.000 --> 00:20:22.780
and turn it into C.


00:20:22.780 --> 00:20:24.440
That right there is pretty impressive.


00:20:24.440 --> 00:20:27.120
If you have a, like, you've got some program


00:20:27.120 --> 00:20:29.420
and you find out like, oh, this part of,


00:20:29.420 --> 00:20:32.360
I don't know, some inner loop within an inner loop,


00:20:32.360 --> 00:20:34.440
you know, within another nested loop or something like,


00:20:34.440 --> 00:20:36.280
that's a little bit too slow.


00:20:36.280 --> 00:20:39.620
you could probably write like a function in Cython


00:20:39.620 --> 00:20:44.180
that does that inner loop and make it way, way faster.


00:20:44.180 --> 00:20:45.020
Super cool.


00:20:45.020 --> 00:20:46.500
- That's what we hear a lot about Python


00:20:46.500 --> 00:20:48.860
is you can take some slow parts in


00:20:48.860 --> 00:20:52.020
and then rewrite it in C if you need to.


00:20:52.020 --> 00:20:53.940
But you don't have to with Cython, right?


00:20:53.940 --> 00:20:55.680
- Exactly, you don't have, that's the thing.


00:20:55.680 --> 00:20:57.880
You don't have to rewrite, you could rewrite it in C


00:20:57.880 --> 00:20:59.340
or in Rust or whatever,


00:20:59.340 --> 00:21:02.300
or you could just call Cython against it


00:21:02.300 --> 00:21:05.020
and make it, you know, it basically transpiles


00:21:05.020 --> 00:21:10.180
Python into C and then compiles the C over to machine instructions. Now


00:21:10.180 --> 00:21:14.340
depending on how you write your code it may still interact with the Python


00:21:14.340 --> 00:21:17.940
interpreter in the Python gill or it might not and that could actually


00:21:17.940 --> 00:21:22.180
significantly determine the performance benefits you get right so you can it'll


00:21:22.180 --> 00:21:26.260
work with like an untyped item but then it does it as a I think is a pie object


00:21:26.260 --> 00:21:31.340
pointer whereas if you tell it this is an actual integer it'll work with it as


00:21:31.340 --> 00:21:34.220
like a C int type of thing or something to that effect, right?


00:21:34.220 --> 00:21:39.620
So you get all sorts of benefits that are ways to overcome shortcomings of Python.


00:21:39.620 --> 00:21:42.940
Say for example, we talked about execution speed,


00:21:42.940 --> 00:21:47.140
but there's also a keyword in Cython that says, that's called no-gill.


00:21:47.140 --> 00:21:50.460
So you can just create a context block in Python effectively,


00:21:50.460 --> 00:21:56.420
say with no-gill colon, and then that stuff works without the gill in threads.


00:21:56.420 --> 00:21:57.420
And that's it.


00:21:57.420 --> 00:22:02.420
You're just guaranteeing that that stuff isn't going outside of it or anything.


00:22:02.420 --> 00:22:07.420
What the requirement for using that keyword is, and if it doesn't match these requirements,


00:22:07.420 --> 00:22:11.420
it's like a compiler error for the Cython compiler,


00:22:11.420 --> 00:22:15.420
is that you don't interact with any Python objects.


00:22:15.420 --> 00:22:21.420
So you basically got to cast them into Cython native objects that can be represented in C,


00:22:21.420 --> 00:22:26.420
and then there's no reason for the gil because the purpose of the gil is to interact with reference counting


00:22:26.420 --> 00:22:29.020
reference counting to make sure that that works


00:22:29.020 --> 00:22:31.380
in Python's object garbage collector.


00:22:31.380 --> 00:22:33.360
But if you're not working with Python objects,


00:22:33.360 --> 00:22:34.200
you don't need the gill.


00:22:34.200 --> 00:22:38.100
So it's a really great way to free up speed and whatnot.


00:22:38.100 --> 00:22:41.540
They talk about some of the projects written in Cython.


00:22:41.540 --> 00:22:44.420
So spaCy, the natural language processing,


00:22:44.420 --> 00:22:48.300
UV loop, which is a really fast async IO event loop,


00:22:48.300 --> 00:22:50.420
significant parts of scikit-learn, NumPy,


00:22:50.420 --> 00:22:51.640
pandas, all that kind of stuff.


00:22:51.640 --> 00:22:53.640
So I think the big value, like you said,


00:22:53.640 --> 00:22:56.140
is like you could go rewrite it in C,


00:22:56.140 --> 00:23:00.420
Or you could just use Cython and make your Python run somewhat like C.


00:23:00.420 --> 00:23:01.420
Pretty cool.


00:23:01.420 --> 00:23:04.660
I actually want to play with this a little bit because I'm glad you found this article.


00:23:04.660 --> 00:23:06.420
Yeah, the article is super interesting.


00:23:06.420 --> 00:23:10.940
One thing that I've noticed, I mean, I didn't read it, I didn't like super inspect every


00:23:10.940 --> 00:23:14.340
code example, but I didn't see them using Python's type annotations.


00:23:14.340 --> 00:23:15.340
Right.


00:23:15.340 --> 00:23:20.180
So they're using like the C def to define types and like special Cython ways to define


00:23:20.180 --> 00:23:21.340
types.


00:23:21.340 --> 00:23:27.020
But the more modern versions of Cython, you can just say, like, value colon int equals


00:23:27.020 --> 00:23:32.180
something like the standard Python way of saying what a type is for type checking.


00:23:32.180 --> 00:23:36.180
And that'll actually also be understood and used by Cython for native types.


00:23:36.180 --> 00:23:41.300
Okay, that's a question I had was, can you use native Python types?


00:23:41.300 --> 00:23:43.900
The answer used to be no, but now the answer is yes.


00:23:43.900 --> 00:23:44.900
Right.


00:23:44.900 --> 00:23:46.300
So, yeah, so it's super cool.


00:23:46.300 --> 00:23:50.020
All right, well, if you think you need your Python code to go a little faster, check out


00:23:50.020 --> 00:23:52.340
this article, check out Cython and it's pretty awesome.


00:23:52.340 --> 00:23:54.140
Just a good reminder, I guess.


00:23:54.140 --> 00:23:55.300
We both have a few extras.


00:23:55.300 --> 00:23:56.820
How about you kick off that section?


00:23:56.820 --> 00:23:57.660
- Sure.


00:23:57.660 --> 00:23:59.100
I didn't really want to highlight this for too long,


00:23:59.100 --> 00:24:01.300
but Henik wrote an article called


00:24:01.300 --> 00:24:02.780
"The Price of the Hallway Track."


00:24:02.780 --> 00:24:04.780
It's just a reminder to everybody.


00:24:04.780 --> 00:24:08.140
We do hear about using, going to things like PyCon


00:24:08.140 --> 00:24:11.400
and other conferences and not actually going to the talks,


00:24:11.400 --> 00:24:13.460
but doing hallway stuff.


00:24:13.460 --> 00:24:15.100
He's pointing out that that's kind of lame


00:24:15.100 --> 00:24:18.040
for all the speakers that work really hard to do that.


00:24:18.040 --> 00:24:21.280
It's also, even if you intend to watch it later,


00:24:21.280 --> 00:24:24.920
it's disheartening for people to speak to an empty room


00:24:24.920 --> 00:24:26.800
or even a mostly empty room.


00:24:26.800 --> 00:24:28.800
And he's just asking, you know,


00:24:28.800 --> 00:24:30.600
don't fill up your day with talks,


00:24:30.600 --> 00:24:33.680
but pick some, especially ones that from people


00:24:33.680 --> 00:24:35.400
that are lesser known people,


00:24:35.400 --> 00:24:37.440
and that sound interesting to you,


00:24:37.440 --> 00:24:38.760
and at least go to a few talks.


00:24:38.760 --> 00:24:39.860
And I think that's a good advice.


00:24:39.860 --> 00:24:41.000
I'm gonna try to do that next year.


00:24:41.000 --> 00:24:41.840
- Yeah, cool.


00:24:41.840 --> 00:24:42.660
And what else?


00:24:42.660 --> 00:24:43.500
- The second one is,


00:24:43.500 --> 00:24:47.140
who put Python in my Windows 10 May 19 update?


00:24:47.140 --> 00:24:52.900
by Steve Dower. We did talk about this in the previous episode, but it is officially


00:24:52.900 --> 00:24:55.500
out and people are noticing it.


00:24:55.500 --> 00:24:59.180
Yeah, and Steve gave us a shout out to the Python Bytes episode we did together right


00:24:59.180 --> 00:25:03.940
there in the first paragraph. So thanks for that, Steve. This is massive. This is Windows


00:25:03.940 --> 00:25:09.380
10 is shipping with Python 3 and that version of Python 3 is auto updating. Like how cool


00:25:09.380 --> 00:25:10.380
is that?


00:25:10.380 --> 00:25:11.380
Okay.


00:25:11.380 --> 00:25:12.380
Within a major version.


00:25:12.380 --> 00:25:15.380
Yeah, but it ships within a little stub. So you don't get Python right away. You get a


00:25:15.380 --> 00:25:16.980
a little thing that pops open.


00:25:16.980 --> 00:25:19.500
If you type Python, it pops open in the app store


00:25:19.500 --> 00:25:20.740
to download it.


00:25:20.740 --> 00:25:22.580
It doesn't ship with it 'cause it doesn't need to.


00:25:22.580 --> 00:25:24.060
And still a lot of people,


00:25:24.060 --> 00:25:25.940
like a lot of people don't need Python,


00:25:25.940 --> 00:25:27.780
but that makes it easier.


00:25:27.780 --> 00:25:29.100
- I guess when I say ships with,


00:25:29.100 --> 00:25:30.960
I mean from a user's perspective.


00:25:30.960 --> 00:25:33.460
Like if you tell a user to go through a tutorial


00:25:33.460 --> 00:25:35.420
and you tell them to type Python 3


00:25:35.420 --> 00:25:36.720
and they sit down and they type it,


00:25:36.720 --> 00:25:38.420
rather than getting error,


00:25:38.420 --> 00:25:39.860
it says, oh, you have to click this button


00:25:39.860 --> 00:25:40.780
for this line to work,


00:25:40.780 --> 00:25:42.260
and they click the button and then it works.


00:25:42.260 --> 00:25:43.820
Like that-- - Yeah, exactly.


00:25:43.820 --> 00:25:45.140
- I wouldn't ask for more, right?


00:25:45.140 --> 00:25:45.980
That's really cool.


00:25:45.980 --> 00:25:46.800
- Yeah, how about you?


00:25:46.800 --> 00:25:47.640
Got any extras?


00:25:47.640 --> 00:25:51.740
- Yeah, I got also something super small, a Pico thing.


00:25:51.740 --> 00:25:56.740
So Matt Trentini sent over a cool project


00:25:56.740 --> 00:26:01.780
called the Tiny Pico, which is an ESP32 based board.


00:26:01.780 --> 00:26:06.460
So a tiny little board that has first class support


00:26:06.460 --> 00:26:08.420
for MicroPython.


00:26:08.420 --> 00:26:10.220
So Brian, if you click on that link,


00:26:10.220 --> 00:26:12.540
if you check this thing out, it's pretty wild.


00:26:12.540 --> 00:26:14.420
It's a project you can order.


00:26:14.420 --> 00:26:17.000
It's pretty cheap, like $26.


00:26:17.000 --> 00:26:18.300
- It's so small.


00:26:18.300 --> 00:26:19.140
- It's incredible.


00:26:19.140 --> 00:26:21.760
It's like two thirds the size,


00:26:21.760 --> 00:26:25.500
so 60% of a AA battery.


00:26:25.500 --> 00:26:30.500
I mean, maybe the middle part of your pinky or something.


00:26:30.500 --> 00:26:33.380
I mean, it's a really small board,


00:26:33.380 --> 00:26:36.000
like both the width and the height of that is crazy.


00:26:36.000 --> 00:26:37.580
But listen to its specs.


00:26:37.580 --> 00:26:40.020
32-bit dual-core processor.


00:26:41.740 --> 00:26:46.680
full on Wi-Fi, 8211 BGNN, Bluetooth,


00:26:46.680 --> 00:26:49.580
all sorts of stuff, like for 26 bucks at that size.


00:26:49.580 --> 00:26:51.020
It's so cool.


00:26:51.020 --> 00:26:53.060
So, I wanted to give a shout out.


00:26:53.060 --> 00:26:54.780
- MicroPython's pre-installed.


00:26:54.780 --> 00:26:55.620
That's cool.


00:26:55.620 --> 00:26:56.460
- Isn't that super?


00:26:56.460 --> 00:26:58.860
So, if people are looking at embedded stuff


00:26:58.860 --> 00:27:01.180
and little devices, things, this is really, really cool.


00:27:01.180 --> 00:27:03.900
- Yeah, good for your next spy cam project.


00:27:03.900 --> 00:27:05.060
- Exactly.


00:27:05.060 --> 00:27:07.180
I got another one from Automation Panda,


00:27:07.180 --> 00:27:10.500
who we met at PyCon, and this is Andy,


00:27:10.500 --> 00:27:13.780
He wrote a cool PyCon 2019 reflections,


00:27:13.780 --> 00:27:16.220
which I thought if you haven't been to PyCon,


00:27:16.220 --> 00:27:17.820
check out this article.


00:27:17.820 --> 00:27:20.420
It's like kind of his diary of like what he did


00:27:20.420 --> 00:27:21.580
and his experiences.


00:27:21.580 --> 00:27:23.500
It's like his second PyCon he ever went to.


00:27:23.500 --> 00:27:26.660
So it was kind of a fresh take on PyCon, which is great.


00:27:26.660 --> 00:27:27.500
That's cool.


00:27:27.500 --> 00:27:28.900
Yeah, it was fun to meet him there.


00:27:28.900 --> 00:27:31.000
I just wanna give a quick shout out to our Patreon page,


00:27:31.000 --> 00:27:31.980
which we don't do that enough.


00:27:31.980 --> 00:27:33.580
So if people wanna support the show,


00:27:33.580 --> 00:27:36.180
obviously visiting the sponsors helps a lot,


00:27:36.180 --> 00:27:39.460
but you can help support with editing fees and other stuff


00:27:39.460 --> 00:27:40.940
by doing small contributions.


00:27:40.940 --> 00:27:43.220
So there's a link at the bottom of this episode


00:27:43.220 --> 00:27:44.660
to say here's the Patreon page,


00:27:44.660 --> 00:27:45.740
so people can check that out.


00:27:45.740 --> 00:27:48.300
And Brian, thanks to you for putting that together.


00:27:48.300 --> 00:27:50.780
- And one of the things people get is the show notes


00:27:50.780 --> 00:27:53.180
emailed directly to their inbox if they do that.


00:27:53.180 --> 00:27:54.220
- That is awesome.


00:27:54.220 --> 00:27:55.860
And then I just wanted to let people know


00:27:55.860 --> 00:28:00.140
I'm doing a free one hour webcast in a couple of weeks.


00:28:00.140 --> 00:28:02.740
And the title of the webcast probably more or less


00:28:02.740 --> 00:28:05.300
sums it up, but it's 10 Tools and Techniques


00:28:05.300 --> 00:28:07.380
Python Web Developers Should Explore.


00:28:07.380 --> 00:28:08.300
- That looks interesting.


00:28:08.300 --> 00:28:10.240
- Yeah, so it's all sorts of fun stuff.


00:28:10.240 --> 00:28:13.140
Like Docker is one of them, Vue.js is another.


00:28:13.140 --> 00:28:16.000
You know, Vue models and other sort of design patterns


00:28:16.000 --> 00:28:17.680
as well, like a lot of fun things


00:28:17.680 --> 00:28:19.560
that people haven't maybe seen there.


00:28:19.560 --> 00:28:20.400
- Yeah.


00:28:20.400 --> 00:28:21.840
- Let's let you kick it off with our joke section.


00:28:21.840 --> 00:28:22.840
What do you got for us?


00:28:22.840 --> 00:28:25.120
- Oh, you're gonna give it to me?


00:28:25.120 --> 00:28:26.440
I'll steal one of your jokes.


00:28:26.440 --> 00:28:27.280
- Yeah, steal it.


00:28:27.280 --> 00:28:29.560
- Okay, what do you call eight hobbits?


00:28:29.560 --> 00:28:33.520
A hobbite, oh, that's terrible.


00:28:33.520 --> 00:28:36.280
- It's so bad, it's so bad, it wrapped around to good.


00:28:36.280 --> 00:28:39.760
It's like badness overflowed into the good level.


00:28:39.760 --> 00:28:40.600
What do you call it?


00:28:40.600 --> 00:28:41.420
- Okay. - All right.


00:28:41.420 --> 00:28:43.120
So I got another one for you.


00:28:43.120 --> 00:28:44.720
This one may also be bad.


00:28:44.720 --> 00:28:46.720
This is a little more on the science-y, math-y side,


00:28:46.720 --> 00:28:47.680
not quite programming,


00:28:47.680 --> 00:28:50.460
but it definitely has a computational bit to it.


00:28:50.460 --> 00:28:53.600
So you know Mandelbrot, Benoit B. Mandelbrot,


00:28:53.600 --> 00:28:55.400
is his full name, the guy who came up


00:28:55.400 --> 00:28:57.240
with the Mandelbrot set and fractals


00:28:57.240 --> 00:28:58.360
and all that kind of stuff, right?


00:28:58.360 --> 00:28:59.920
- Yeah. - And one of the core


00:28:59.920 --> 00:29:01.800
principles of fractals is no matter


00:29:01.800 --> 00:29:03.320
how much you zoom into them,


00:29:03.320 --> 00:29:04.840
there's like always more details


00:29:04.840 --> 00:29:08.080
and often times there's like super weird reasons


00:29:08.080 --> 00:29:09.600
that it like repeats.


00:29:09.600 --> 00:29:11.160
Like you zoom way into the little branch


00:29:11.160 --> 00:29:12.000
of the Mandelbrot set,


00:29:12.000 --> 00:29:13.600
there's like a baby Mandelbrot set.


00:29:13.600 --> 00:29:15.160
- Yeah. - Okay.


00:29:15.160 --> 00:29:20.160
So the question is for Benoit B. Mandelbrot,


00:29:20.160 --> 00:29:21.620
what is his middle name?


00:29:21.620 --> 00:29:23.240
What does the B stand for?


00:29:23.240 --> 00:29:25.880
- Well it stands for Benoit B. Mandelbrot.


00:29:25.880 --> 00:29:26.920
- Of course it does.


00:29:26.920 --> 00:29:29.520
(laughing)


00:29:29.520 --> 00:29:30.600
- Yes. - Oh I love it.


00:29:30.600 --> 00:29:32.640
All right, well, I guess we're gonna leave.


00:29:32.640 --> 00:29:34.160
- We gotta do the other one, it's so great.


00:29:34.160 --> 00:29:35.000
- All right, go for it.


00:29:35.000 --> 00:29:36.480
- Okay, so two bytes meet.


00:29:36.480 --> 00:29:39.320
The first byte asks, "Are you ill?"


00:29:39.320 --> 00:29:42.800
And the second byte replies, "No, just feeling a bit off."


00:29:42.800 --> 00:29:44.720
(laughing)


00:29:44.720 --> 00:29:47.240
Ah, totally left shift on that one.


00:29:47.240 --> 00:29:48.280
- Yeah, absolutely.


00:29:48.280 --> 00:29:51.760
Beautiful, all right, well, thanks as always


00:29:51.760 --> 00:29:52.600
for being here, Brian. - Thank you.


00:29:52.600 --> 00:29:53.520
- It's a lot of fun to talk about these


00:29:53.520 --> 00:29:54.360
and share them with everyone.


00:29:54.360 --> 00:29:55.640
- Yep, bye. - Yep, bye.


00:29:55.640 --> 00:29:57.360
Thank you for listening to Python Bytes.


00:29:57.360 --> 00:29:59.840
Follow the show on Twitter via @PythonBytes.


00:29:59.840 --> 00:30:02.880
That's Python Bytes as in B-Y-T-E-S.


00:30:02.880 --> 00:30:07.520
get the full show notes at pythonbytes.fm. If you have a news item you want featured,


00:30:07.520 --> 00:30:12.320
just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something


00:30:12.320 --> 00:30:17.120
cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and


00:30:17.120 --> 00:30:19.520
sharing this podcast with your friends and colleagues.

