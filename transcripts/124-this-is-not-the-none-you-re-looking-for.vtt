
00:00:00.000 --> 00:00:10.600
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 124 recorded April 3rd, 2019. I'm Michael Kennedy.


00:00:10.600 --> 00:00:11.400
And I'm Brian Okken.


00:00:11.400 --> 00:00:20.400
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean. Get $100 credit for new users. Tell you more about why that's awesome later.


00:00:20.400 --> 00:00:23.500
All right now, Brian, I feel like we're going to go to your happy place.


00:00:23.500 --> 00:00:28.500
Yes, I'm definitely one of the testing nerds that's around.


00:00:28.500 --> 00:00:33.500
And I'm excited about the pytest4.4.0 released.


00:00:33.500 --> 00:00:38.500
There's a lot of stuff in the 4.4 release.


00:00:38.500 --> 00:00:43.500
And that's pretty cool. There's a lot of actually really neat things.


00:00:43.500 --> 00:00:48.500
I'm going to save the big one for last, but one of the cool things is there's a test_paths


00:00:48.500 --> 00:00:53.980
variable that you can put in your configuration, any file, it tells the pytest where to look


00:00:53.980 --> 00:00:54.980
for tests.


00:00:54.980 --> 00:01:00.640
And it kind of short-circuits some of the searching everything under the current directory.


00:01:00.640 --> 00:01:03.140
Just what, like two sub-directories or something, but not everything?


00:01:03.140 --> 00:01:07.100
Yeah, like for instance, this is very common if you've got like a structure where you've


00:01:07.100 --> 00:01:12.240
got tests in one directory, your source in another directory, and then maybe some documents


00:01:12.240 --> 00:01:15.140
or something, and it's a large project.


00:01:15.140 --> 00:01:20.340
If you just launch pytest from the top, it'll look at everything, and it really should just


00:01:20.340 --> 00:01:21.980
look in the test directory.


00:01:21.980 --> 00:01:22.980
Right, exactly.


00:01:22.980 --> 00:01:23.980
That makes sense.


00:01:23.980 --> 00:01:24.980
So that's pretty cool.


00:01:24.980 --> 00:01:27.880
It's been around for a while, but it's kind of hidden.


00:01:27.880 --> 00:01:29.280
It just worked that way.


00:01:29.280 --> 00:01:35.740
And what they've done now is they've added in the output, it tells you which test paths


00:01:35.740 --> 00:01:37.020
have been set.


00:01:37.020 --> 00:01:38.020
So that's nice.


00:01:38.020 --> 00:01:39.020
Yeah, that's cool.


00:01:39.020 --> 00:01:43.420
And then there's a whole bunch of stuff that's relevant, especially to plugin writers, and


00:01:43.420 --> 00:01:44.860
a little bit for test writers.


00:01:44.860 --> 00:01:49.180
actually quite a few things. I encourage people if they're nerdy about pytest to check out


00:01:49.180 --> 00:01:54.420
the changed list. The thing that I'm super excited about is there were a couple of internal


00:01:54.420 --> 00:02:01.820
changes that made it so that there's a new plugin called the pytest Subtests that works.


00:02:01.820 --> 00:02:02.820
Ooh, nice.


00:02:02.820 --> 00:02:09.700
Ish. So pytest has always been able to run unit test code. But one of the things that


00:02:09.700 --> 00:02:14.500
happened is if unit tests were had sub tests in them and sub tests are a way to


00:02:14.500 --> 00:02:19.900
have kind of multiple checks within a test if you had those in there and one


00:02:19.900 --> 00:02:24.940
of them failed it's supposed to keep going and check all of them but pytest


00:02:24.940 --> 00:02:30.100
would stop at the first failure now it doesn't now it continues on with running


00:02:30.100 --> 00:02:33.860
all of them that's cool like so if I've got say a list of five things and I want


00:02:33.860 --> 00:02:38.940
to loop over those and test each one of them without some kind of parameterized


00:02:38.940 --> 00:02:41.940
I just want to loop over them all and write one test and do that.


00:02:41.940 --> 00:02:42.940
I would do that with a subtest.


00:02:42.940 --> 00:02:43.940
Yeah, or at least you can.


00:02:43.940 --> 00:02:44.940
Yeah.


00:02:44.940 --> 00:02:45.940
And it works pretty good.


00:02:45.940 --> 00:02:52.940
So it really was to the plugin and the changes were really to fix this little corner case of the unit test support.


00:02:52.940 --> 00:02:55.940
And so I'm really glad that they did that.


00:02:55.940 --> 00:02:59.940
But they also threw in a new fixture called subtests.


00:02:59.940 --> 00:03:03.940
So even if you're not using unit test, you can use this new fixture.


00:03:03.940 --> 00:03:07.860
and it has a subtest test context manager


00:03:07.860 --> 00:03:09.900
that works just like the unit test version,


00:03:09.900 --> 00:03:12.380
but you can use it in pytest tests.


00:03:12.380 --> 00:03:13.220
- Yeah, that's cool.


00:03:13.220 --> 00:03:14.040
- That's neat.


00:03:14.040 --> 00:03:15.700
- Another one that I think is nice is async.


00:03:15.700 --> 00:03:18.140
So you have the async, you know,


00:03:18.140 --> 00:03:21.040
mark as async decorator you can use.


00:03:21.040 --> 00:03:24.160
But previously, if you did that,


00:03:24.160 --> 00:03:27.140
but for some reason, like the right plugin


00:03:27.140 --> 00:03:29.940
to run the async, say like pytest-asyncIO


00:03:29.940 --> 00:03:31.620
or pytest trio wasn't there,


00:03:31.620 --> 00:03:32.940
they would just not run,


00:03:32.940 --> 00:03:34.560
but they were still marked as passed.


00:03:34.560 --> 00:03:35.760
And now at least you get a warning


00:03:35.760 --> 00:03:37.160
that they're not run or something like this.


00:03:37.160 --> 00:03:38.000
That's cool.


00:03:38.000 --> 00:03:40.600
- Yeah, that's a oops.


00:03:40.600 --> 00:03:42.400
- That's one way to make your test pass.


00:03:42.400 --> 00:03:44.140
Like let's just not install that async runner.


00:03:44.140 --> 00:03:44.980
We'll be cool.


00:03:44.980 --> 00:03:46.320
- Yeah, yeah.


00:03:46.320 --> 00:03:47.760
- Well, keeping with the async theme,


00:03:47.760 --> 00:03:50.160
I wanna roll right into requests.


00:03:50.160 --> 00:03:53.900
So I literally just hung up recording


00:03:53.900 --> 00:03:56.080
or stopped recording with Kenneth Wrights.


00:03:56.080 --> 00:03:58.280
We're doing an episode on Talk Python


00:03:58.280 --> 00:04:00.480
and we're talking to him about requests a little bit,


00:04:00.480 --> 00:04:02.120
but mostly other things.


00:04:02.120 --> 00:04:05.000
Anyway, this next item follows right onto that


00:04:05.000 --> 00:04:07.760
is request-async.


00:04:07.760 --> 00:04:11.800
So currently, without this library or something like it,


00:04:11.800 --> 00:04:14.340
if I want to use async and await,


00:04:14.340 --> 00:04:16.600
and I'm doing web requests like microservices


00:04:16.600 --> 00:04:18.800
or calling like a Stripe API or something,


00:04:18.800 --> 00:04:21.840
I either do it synchronously with requests


00:04:21.840 --> 00:04:23.200
or I can do it asynchronously,


00:04:23.200 --> 00:04:26.680
but I have to switch out my calling package.


00:04:26.680 --> 00:04:29.680
I have to use like aiohtp.client_session


00:04:29.680 --> 00:04:31.640
or something totally different, rewrite my code.


00:04:31.640 --> 00:04:34.440
There's a package called request-async,


00:04:34.440 --> 00:04:35.420
which is pretty cool,


00:04:35.420 --> 00:04:38.640
and it's actually a different thing you import,


00:04:38.640 --> 00:04:41.020
but if you import it as requests,


00:04:41.020 --> 00:04:44.680
then you can do await request.get,


00:04:44.680 --> 00:04:47.480
await request.post, and all of that.


00:04:47.480 --> 00:04:52.440
So it seamlessly fits into your async and await methods.


00:04:52.440 --> 00:04:53.840
Maybe you're testing with that pytest thing


00:04:53.840 --> 00:04:55.040
I was talking about,


00:04:55.040 --> 00:04:56.840
and it's basically the same API,


00:04:56.840 --> 00:04:59.160
but now it's async-friendly, which is cool.


00:04:59.160 --> 00:05:00.560
- That's very neat, yeah.


00:05:00.560 --> 00:05:02.240
And like I said, there's other stuff you could use.


00:05:02.240 --> 00:05:04.760
You could use AIO HTTP, which is nice,


00:05:04.760 --> 00:05:06.360
but it means you rewrite your stuff, right?


00:05:06.360 --> 00:05:09.640
And a lot of people depend on like changing DNS resolvers


00:05:09.640 --> 00:05:11.880
and all sorts of crazy stuff deep down inside a request.


00:05:11.880 --> 00:05:14.520
So this will let you do that, theoretically at least.


00:05:14.520 --> 00:05:15.800
I haven't tried all the edge cases,


00:05:15.800 --> 00:05:18.040
but let you do that without rewriting your code,


00:05:18.040 --> 00:05:19.400
which I think is pretty cool.


00:05:19.400 --> 00:05:21.040
Now, I did say I was just talking to Kenneth


00:05:21.040 --> 00:05:24.280
and one of the things he said is they are working


00:05:24.280 --> 00:05:27.860
on native async and await support for requests.


00:05:27.860 --> 00:05:29.220
So that's pretty cool,


00:05:29.220 --> 00:05:30.620
which would make this unnecessary.


00:05:30.620 --> 00:05:31.460
So why do I bring it up?


00:05:31.460 --> 00:05:33.780
Well, he said it's probably like not done for a while.


00:05:33.780 --> 00:05:35.020
It's probably like a year away


00:05:35.020 --> 00:05:38.220
'cause they're doing like major rework inside of requests.


00:05:38.220 --> 00:05:42.020
And think how many libraries and people depend upon requests


00:05:42.020 --> 00:05:44.500
and how hard that must make it to change at all, right?


00:05:44.500 --> 00:05:47.980
- Yeah, it needs to not break backwards compatibility.


00:05:47.980 --> 00:05:49.620
And it's not even just breaking it.


00:05:49.620 --> 00:05:51.100
It can't slow things down either.


00:05:51.100 --> 00:05:51.940
- Yeah, exactly.


00:05:51.940 --> 00:05:53.860
So they're talking about making a new package


00:05:53.860 --> 00:05:55.580
called request three.


00:05:55.580 --> 00:05:57.300
So you import request three


00:05:57.300 --> 00:05:59.020
and it has a slightly different API.


00:05:59.020 --> 00:06:00.500
I just barely.


00:06:00.500 --> 00:06:03.220
So anyway, here's an interim way to get async and await


00:06:03.220 --> 00:06:04.180
working with requests.


00:06:04.180 --> 00:06:06.400
And another thing, there's a cool bit of testing


00:06:06.400 --> 00:06:08.740
going on here, Brian, I thought you might like.


00:06:08.740 --> 00:06:11.380
So I can mock out my endpoint.


00:06:11.380 --> 00:06:14.820
Like let's suppose I'm trying to call an API or something


00:06:14.820 --> 00:06:17.400
and I don't really want it to go to the real server.


00:06:17.400 --> 00:06:18.460
I want to give it a test one.


00:06:18.460 --> 00:06:22.340
I can create a Flask app or a core or starlet or whatever


00:06:22.340 --> 00:06:25.300
and create a mock connection pool


00:06:25.300 --> 00:06:28.500
or something to that effect and give it my real website


00:06:28.500 --> 00:06:30.040
implement it in Python, and that's


00:06:30.040 --> 00:06:32.640
the mock behavior of this thing.


00:06:32.640 --> 00:06:33.840
- Okay, well that's neat.


00:06:33.840 --> 00:06:35.960
Is there more information about that somewhere?


00:06:35.960 --> 00:06:38.320
- It's covered in the GitHub repo that I linked to,


00:06:38.320 --> 00:06:40.800
and if you go to the bottom down there, it talks about it.


00:06:40.800 --> 00:06:43.440
I don't totally know what's going on exactly,


00:06:43.440 --> 00:06:46.840
but for example, you want to call, I don't know,


00:06:46.840 --> 00:06:49.240
your API, and you could have a little local one


00:06:49.240 --> 00:06:51.480
running on SQLite or something,


00:06:51.480 --> 00:06:53.080
and you could literally give it the app.


00:06:53.080 --> 00:06:54.240
It won't even go to the network.


00:06:54.240 --> 00:06:56.740
It'll just directly interact with the app


00:06:56.740 --> 00:06:57.960
as if it was the web server.


00:06:57.960 --> 00:06:59.040
- Oh, that's really cool.


00:06:59.040 --> 00:07:00.120
- Yeah, it's pretty wild.


00:07:00.120 --> 00:07:00.960
So anyway, this is--


00:07:00.960 --> 00:07:02.280
- I'm gonna play with that.


00:07:02.280 --> 00:07:04.300
- Yeah, yeah, it's a pretty cool thing to be playing with


00:07:04.300 --> 00:07:06.200
and it has some other cool async testing support.


00:07:06.200 --> 00:07:07.800
So it's got a cool testing angle as well.


00:07:07.800 --> 00:07:08.640
- Nice, cool.


00:07:08.640 --> 00:07:10.300
- Speaking of services, what do you got next?


00:07:10.300 --> 00:07:13.580
- I did notice that there was an article in the register


00:07:13.580 --> 00:07:16.540
about a bunch of, I don't know how a bunch,


00:07:16.540 --> 00:07:19.120
but some layoffs at NPM.


00:07:19.120 --> 00:07:22.760
- Right, NPM is the commercial equivalent of PIP, sort of.


00:07:22.760 --> 00:07:24.860
And PyPA, Python Package Authority,


00:07:24.860 --> 00:07:26.320
like mushed into one, right?


00:07:26.320 --> 00:07:31.120
- Yeah, I didn't know that it was a for-profit company,


00:07:31.120 --> 00:07:32.100
but apparently it is.


00:07:32.100 --> 00:07:34.160
- Yeah, that's interesting all by itself right there,


00:07:34.160 --> 00:07:35.000
isn't it?


00:07:35.000 --> 00:07:38.420
- Yeah, so Dustin Ingram wrote an article talking about,


00:07:38.420 --> 00:07:41.380
and Dustin is one of the people that works with PyPI


00:07:41.380 --> 00:07:43.700
and the Packaging Authority,


00:07:43.700 --> 00:07:47.540
and he wrote an article called PyPI as a Service.


00:07:47.540 --> 00:07:52.340
And essentially, there's a couple interesting comparisons


00:07:52.340 --> 00:07:54.940
between NPM and PyPI.


00:07:54.940 --> 00:07:59.660
Firstly, NPM's been around for longer, I guess, since 2014.


00:07:59.660 --> 00:08:02.700
PyPI in 2002.


00:08:02.700 --> 00:08:06.080
Oh no, we're older, so PyPI's older.


00:08:06.080 --> 00:08:07.300
Math is easy.


00:08:07.300 --> 00:08:10.240
Anyway, they have like $10 million in funding.


00:08:10.240 --> 00:08:14.260
And whereas, around 60 people working there,


00:08:14.260 --> 00:08:19.260
and the PyPI has like less than half a million in grants.


00:08:19.260 --> 00:08:21.820
And then just like, there's only half of a,


00:08:21.820 --> 00:08:23.840
a fraction of a single employee,


00:08:23.840 --> 00:08:25.580
and then some volunteers.


00:08:25.580 --> 00:08:29.340
So there's a lot less people running PyPI


00:08:29.340 --> 00:08:30.760
and a lot less money.


00:08:30.760 --> 00:08:32.840
But what if they changed it?


00:08:32.840 --> 00:08:34.640
Apparently they've had a lot of people ask


00:08:34.640 --> 00:08:36.660
for an as-a-service version


00:08:36.660 --> 00:08:38.980
so they could have like a private thing.


00:08:38.980 --> 00:08:42.120
So you could use something like PyPI


00:08:42.120 --> 00:08:45.180
but with your own stuff that's internal or whatever.


00:08:45.180 --> 00:08:47.420
And generally just talked about


00:08:47.420 --> 00:08:48.460
some of the problems with that.


00:08:48.460 --> 00:08:50.880
One of the problems is it might jeopardize


00:08:50.880 --> 00:08:55.060
the non-profit aspect of the Python Software Foundation.


00:08:55.060 --> 00:08:56.320
That would be bad.


00:08:56.320 --> 00:08:58.160
Also, there's a whole bunch of people that,


00:08:58.160 --> 00:09:00.960
companies that donate services and infrastructure


00:09:00.960 --> 00:09:04.640
to make PyPI run at the tune of about a million dollars


00:09:04.640 --> 00:09:08.280
a year, and I don't know if, and he mentions


00:09:08.280 --> 00:09:10.680
that they might not be thrilled about donating


00:09:10.680 --> 00:09:13.120
that service to a for-profit company.


00:09:13.120 --> 00:09:14.160
- I'm sure they wouldn't.


00:09:14.160 --> 00:09:15.160
- I agree.


00:09:15.160 --> 00:09:17.280
There's also some of the ecosystem.


00:09:17.280 --> 00:09:19.560
There's other options out there.


00:09:19.560 --> 00:09:21.820
However, I've kind of looked into these


00:09:21.820 --> 00:09:24.180
and I'm not really thrilled with the other options available.


00:09:24.180 --> 00:09:26.980
So I actually think there's room for somebody else


00:09:26.980 --> 00:09:30.900
to create something like PyPI for private use


00:09:30.900 --> 00:09:32.020
that might as a service,


00:09:32.020 --> 00:09:33.900
that might be an opportunity for somebody.


00:09:33.900 --> 00:09:34.820
- Yeah, for sure.


00:09:34.820 --> 00:09:38.360
You know, one of them that comes to mind is pydisc.com.


00:09:38.360 --> 00:09:41.320
That's in there right now, but it's basically that.


00:09:41.320 --> 00:09:43.740
It's basically the service that people are asking for.


00:09:43.740 --> 00:09:47.020
Honestly, I totally see the problem here, right?


00:09:47.020 --> 00:09:48.780
We've got this careful balance of this


00:09:48.780 --> 00:09:50.980
actually really expensive thing to run,


00:09:50.980 --> 00:09:54.580
PyPI, especially the traffic and the website and whatnot.


00:09:54.580 --> 00:09:58.080
And then we've got these donations taking care of that.


00:09:58.080 --> 00:10:00.600
There probably is a business model to be had here,


00:10:00.600 --> 00:10:05.600
but there's gonna be like a wicked dip to zero, near zero,


00:10:05.600 --> 00:10:09.000
and it has to, somehow you have to be able to climb back


00:10:09.000 --> 00:10:11.260
high enough to cover just the expenses, right?


00:10:11.260 --> 00:10:13.240
Like that's pretty risky to do that.


00:10:13.240 --> 00:10:14.900
- Right, and also, what do you do with the people


00:10:14.900 --> 00:10:16.080
that are now volunteering?


00:10:16.080 --> 00:10:17.500
Do you start paying them?


00:10:17.500 --> 00:10:19.700
What if they only volunteer for a couple hours a week


00:10:19.700 --> 00:10:20.660
or a couple hours a month?


00:10:20.660 --> 00:10:21.700
Do you pay them for that?


00:10:21.700 --> 00:10:22.540
- Yeah.


00:10:22.540 --> 00:10:24.700
- And then also they support some of these


00:10:24.700 --> 00:10:28.240
alternate services right now, PYPA does.


00:10:28.240 --> 00:10:30.780
And if they had an incentive to not support


00:10:30.780 --> 00:10:34.340
the other services and only support their own profit,


00:10:34.340 --> 00:10:35.160
that's not good.


00:10:35.160 --> 00:10:38.020
So anyway, it's an interesting topic.


00:10:38.020 --> 00:10:41.260
- I honestly think that there's actually a huge potential.


00:10:41.260 --> 00:10:42.860
I've talked to people in the community about this,


00:10:42.860 --> 00:10:43.980
but I don't know that I've talked about it


00:10:43.980 --> 00:10:48.580
on the podcast before around pypi.org.


00:10:48.580 --> 00:10:50.380
If you look at how much traffic is there,


00:10:50.380 --> 00:10:55.380
there's a huge opportunity for non-invasive ethical ads


00:10:55.380 --> 00:10:59.060
and other types of promoted stuff to be put on there.


00:10:59.060 --> 00:11:01.200
And I'm sure they could do more than a million dollars


00:11:01.200 --> 00:11:02.800
with the amount of traffic they have,


00:11:02.800 --> 00:11:04.460
but there would be that bad dip


00:11:04.460 --> 00:11:06.340
and they might not make it through and so on.


00:11:06.340 --> 00:11:09.100
But I certainly see this as totally possible


00:11:09.100 --> 00:11:10.140
that it could go that way.


00:11:10.140 --> 00:11:13.820
And it may be, given that they're basically saying,


00:11:13.820 --> 00:11:17.260
"Hey, we need to receive a donation of $40,000, $45,000


00:11:17.260 --> 00:11:20.780
"a month of bandwidth, and if we don't, we're done."


00:11:20.780 --> 00:11:23.860
Right, that's a really scary situation to be in as well,


00:11:23.860 --> 00:11:25.180
they're dependent just on one company.


00:11:25.180 --> 00:11:27.820
So I don't know, it's super interesting.


00:11:27.820 --> 00:11:30.900
The layoffs at NPM, that doesn't make me sound,


00:11:30.900 --> 00:11:35.500
it make me really want to encourage PyPI to go that way.


00:11:35.500 --> 00:11:37.300
- Right, it was interesting at the end,


00:11:37.300 --> 00:11:40.800
the conclusion wasn't that it's never gonna happen.


00:11:40.800 --> 00:11:44.280
It's just right now it looks like it's not worth it.


00:11:44.280 --> 00:11:47.240
It would be kind of a pain and it might backfire.


00:11:47.240 --> 00:11:50.120
And so right now they're not looking into it.


00:11:50.120 --> 00:11:51.560
But it's not a never thing.


00:11:51.560 --> 00:11:52.400
- That makes sense.


00:11:52.400 --> 00:11:53.960
All right, before we get on to the next one,


00:11:53.960 --> 00:11:56.440
let me just tell you all about some cool features


00:11:56.440 --> 00:11:57.280
at DigitalOcean.


00:11:57.280 --> 00:11:58.480
Something they just announced


00:11:58.480 --> 00:12:00.720
is the DigitalOcean Marketplace.


00:12:00.720 --> 00:12:04.000
So it's like one-click apps and server configuration


00:12:04.000 --> 00:12:06.080
for all sorts of tools and whatnot.


00:12:06.080 --> 00:12:08.280
So maybe you want a Discourse server,


00:12:08.280 --> 00:12:10.760
a GitLab Enterprise server, a MongoDB server,


00:12:10.760 --> 00:12:13.800
or even Django, you can go up to there, create an account,


00:12:13.800 --> 00:12:15.880
go into the marketplace and just click the button


00:12:15.880 --> 00:12:18.360
and boom, you have an infrastructure all set up,


00:12:18.360 --> 00:12:21.320
pre-compigured to run whatever app it is


00:12:21.320 --> 00:12:22.140
that you want there.


00:12:22.140 --> 00:12:24.040
So there's a bunch there and I think you can even


00:12:24.040 --> 00:12:26.480
create more and add them if you want your project in there.


00:12:26.480 --> 00:12:29.960
So check them out at pythonbytes.fm/digitalocean.


00:12:29.960 --> 00:12:32.160
Get $100 free credit for new users


00:12:32.160 --> 00:12:34.600
and definitely get a play with that marketplace.


00:12:34.600 --> 00:12:35.540
It's quite cool.


00:12:35.540 --> 00:12:37.880
Brian, if I was looking to run, say,


00:12:37.880 --> 00:12:40.760
some data science Python in the cloud,


00:12:40.760 --> 00:12:42.980
and I maybe wanted to do that without paying any money.


00:12:42.980 --> 00:12:45.060
Maybe I was a college professor


00:12:45.060 --> 00:12:46.480
and I wouldn't have my students do it,


00:12:46.480 --> 00:12:47.900
or even high school,


00:12:47.900 --> 00:12:50.140
or I just didn't want to pay money or whatever.


00:12:50.140 --> 00:12:51.500
There's a bunch of these services now


00:12:51.500 --> 00:12:55.020
that'll run basically Jupyter in the cloud, right?


00:12:55.020 --> 00:12:55.860
- Okay.


00:12:55.860 --> 00:12:56.700
- So there's a couple of big ones.


00:12:56.700 --> 00:12:58.740
We have like Azure and we have Google,


00:12:58.740 --> 00:13:01.140
but there's some smaller ones as well.


00:13:01.140 --> 00:13:03.180
And a friend of ours, Kevin Markham,


00:13:03.180 --> 00:13:04.700
put together a cool article called


00:13:04.700 --> 00:13:08.380
six easy ways to run your Jupyter Notebook in the cloud.


00:13:08.380 --> 00:13:09.500
So basically he went through


00:13:09.500 --> 00:13:11.580
and compared six different services,


00:13:11.580 --> 00:13:13.100
assuming they all had, you know,


00:13:13.100 --> 00:13:15.740
they got into this list if they had all the characteristics


00:13:15.740 --> 00:13:16.900
in that they don't require you


00:13:16.900 --> 00:13:18.440
to install anything on your machine.


00:13:18.440 --> 00:13:19.540
They're either completely free


00:13:19.540 --> 00:13:22.240
or they have a completely free plan.


00:13:22.240 --> 00:13:24.300
They give you access to something


00:13:24.300 --> 00:13:26.820
like a Jupyter Notebook environment.


00:13:26.820 --> 00:13:29.660
You can import and export real Jupyter Notebooks


00:13:29.660 --> 00:13:33.620
through the IPYNB format.


00:13:33.620 --> 00:13:36.300
and they support Python language, maybe others as well.


00:13:36.300 --> 00:13:38.180
Out of all the ones he looked through,


00:13:38.180 --> 00:13:41.840
there's six that were decent that matched those criteria.


00:13:41.840 --> 00:13:43.180
So we have Binder.


00:13:43.180 --> 00:13:44.820
Maybe you've gone to GitHub and you've seen


00:13:44.820 --> 00:13:48.780
like a GitHub repo that has some iPython notebooks in it,


00:13:48.780 --> 00:13:51.780
and a little binder, like a run in binder button.


00:13:51.780 --> 00:13:54.300
So if you click that, you can basically use


00:13:54.300 --> 00:13:56.920
the binder service and run any Jupyter notebook


00:13:56.920 --> 00:14:00.420
that lives in a public GitHub repo on Binder.


00:14:00.420 --> 00:14:02.380
So you just click a button and say run this repo.


00:14:02.380 --> 00:14:03.220
That's kind of cool, right?


00:14:03.220 --> 00:14:04.060
- Yeah, very cool.


00:14:04.060 --> 00:14:04.880
- So that's nice.


00:14:04.880 --> 00:14:06.340
What I like about Kevin's article is he goes through


00:14:06.340 --> 00:14:08.380
and says, "These are the pros, these are the cons."


00:14:08.380 --> 00:14:11.140
So like pros, obviously this is free and easy.


00:14:11.140 --> 00:14:13.420
If you already work on GitHub, it's just right there.


00:14:13.420 --> 00:14:17.200
If you don't, or what you have is a private repo,


00:14:17.200 --> 00:14:19.460
then Binder is not such a big help.


00:14:19.460 --> 00:14:22.040
Another thing that's big in data science is Kaggle, right?


00:14:22.040 --> 00:14:23.780
So they have these Kaggle competitions,


00:14:23.780 --> 00:14:24.980
which are like, "Here's a bunch of data,


00:14:24.980 --> 00:14:28.180
"try to solve a problem by getting the data to tell you,"


00:14:28.180 --> 00:14:30.740
or training a neural network or something like that.


00:14:30.740 --> 00:14:31.940
So Kaggle's known for that,


00:14:31.940 --> 00:14:33.980
They also have this thing called kernels,


00:14:33.980 --> 00:14:36.740
like a free service called Kernel, so Kaggle Kernels.


00:14:36.740 --> 00:14:38.980
And these are kind of like Jupyter Notebooks,


00:14:38.980 --> 00:14:40.140
like super simplified ones.


00:14:40.140 --> 00:14:42.260
So you can run your stuff there, that's cool.


00:14:42.260 --> 00:14:44.500
Maybe one of the bigger ones is Google Collaboratory


00:14:44.500 --> 00:14:46.080
or Google Colab.


00:14:46.080 --> 00:14:47.660
And as long as you have a Google account,


00:14:47.660 --> 00:14:49.900
it's like Google Docs, but for Jupyter Notebooks.


00:14:49.900 --> 00:14:51.740
You just log in, go.


00:14:51.740 --> 00:14:53.460
What I really like about this one is


00:14:53.460 --> 00:14:55.460
it's like Google Docs in that you and I


00:14:55.460 --> 00:14:56.860
could be working on a problem,


00:14:56.860 --> 00:14:59.060
and we could just both be typing at the same time


00:14:59.060 --> 00:15:00.540
and working right alongside each other.


00:15:00.540 --> 00:15:02.940
So the collaboratory bit is like super big there.


00:15:02.940 --> 00:15:03.780
- Oh, that's nice.


00:15:03.780 --> 00:15:04.600
- So that's pretty good.


00:15:04.600 --> 00:15:08.300
And then also you can run your code


00:15:08.300 --> 00:15:10.940
regular on a server through Google Colab,


00:15:10.940 --> 00:15:14.700
but you can also run it on a GPU or a TPU,


00:15:14.700 --> 00:15:17.940
TensorFlow unit, processing unit,


00:15:17.940 --> 00:15:19.900
which is pretty awesome for something.


00:15:19.900 --> 00:15:22.260
I don't know if you have to pay for the GPU option,


00:15:22.260 --> 00:15:23.820
but still pretty cool.


00:15:23.820 --> 00:15:24.660
- Yeah.


00:15:24.660 --> 00:15:25.500
- 'Cause a lot of people don't have,


00:15:25.500 --> 00:15:29.340
certainly don't have TensorFlow chips laying around probably.


00:15:29.340 --> 00:15:33.820
Maybe comparable to the Google one is the Azure Notebooks.


00:15:33.820 --> 00:15:38.620
So this is a big part of what Python and Microsoft are doing.


00:15:38.620 --> 00:15:42.020
What Python is sort of showing up in in the Microsoft space


00:15:42.020 --> 00:15:44.580
is over on Azure and Azure Notebooks.


00:15:44.580 --> 00:15:47.700
So they've got-- simply, it's more of like a project.


00:15:47.700 --> 00:15:49.020
It's not just a notebook, but it's


00:15:49.020 --> 00:15:52.020
like multiple notebooks, markdown files, data sets.


00:15:52.020 --> 00:15:54.660
So you kind of create these project folder type things


00:15:54.660 --> 00:15:56.160
that you can run on Azure Notebooks.


00:15:56.160 --> 00:15:57.340
And that's cool, also free.


00:15:57.340 --> 00:15:58.460
All of them are free.


00:15:58.460 --> 00:15:59.660
There's something I had not heard of,


00:15:59.660 --> 00:16:02.520
CoCalc for collaborative calculation.


00:16:02.520 --> 00:16:06.600
Also super collaboratory, like the Google Collaboratory one.


00:16:06.600 --> 00:16:07.440
Yeah, it's pretty cool.


00:16:07.440 --> 00:16:09.520
It lets you do all sorts of stuff like Jupyter Notebooks,


00:16:09.520 --> 00:16:12.760
but also Sage worksheets and other things, which is good.


00:16:12.760 --> 00:16:15.120
And finally, from JetBrains, we have Datalore,


00:16:15.120 --> 00:16:17.480
and it's not exactly Jupyter Notebooks,


00:16:17.480 --> 00:16:20.520
but it's like a re-imagining of a Jupyter Notebook,


00:16:20.520 --> 00:16:21.840
which is cool, but you can import


00:16:21.840 --> 00:16:23.880
and export Jupyter Notebooks from it.


00:16:23.880 --> 00:16:24.760
So that's pretty cool.


00:16:24.760 --> 00:16:26.560
Like all the features and autocomplete


00:16:26.560 --> 00:16:28.280
and cool stuff that you get in PyCharm,


00:16:28.280 --> 00:16:31.840
but like in a notebook, Jupyter-like notebook,


00:16:31.840 --> 00:16:34.720
is sort of data or also real-time collaboration there.


00:16:34.720 --> 00:16:36.720
So those are all, yeah, those are all pretty cool.


00:16:36.720 --> 00:16:38.120
So if people are out there thinking like,


00:16:38.120 --> 00:16:40.420
hey, I want to do some Jupyter in the cloud,


00:16:40.420 --> 00:16:43.000
maybe for a course or for collaboration or something,


00:16:43.000 --> 00:16:43.960
these are all good options.


00:16:43.960 --> 00:16:44.880
- Yeah, very cool.


00:16:44.880 --> 00:16:46.000
- Yeah, nice article, Kevin,


00:16:46.000 --> 00:16:47.880
and hopefully it helps some folks out there.


00:16:47.880 --> 00:16:51.040
Speaking of Jupyter, what do you got next?


00:16:51.040 --> 00:16:52.200
- Yeah, did you have this down


00:16:52.200 --> 00:16:54.080
and I just didn't see it beforehand,


00:16:54.080 --> 00:16:55.760
or did we just, coincidence?


00:16:55.760 --> 00:16:56.760
- Just a coincidence.


00:16:56.760 --> 00:17:00.560
Okay, so my next item is Jupyter Notebook tutorials.


00:17:00.560 --> 00:17:03.440
So let's say you have some people


00:17:03.440 --> 00:17:05.760
you're trying to collaborate or not,


00:17:05.760 --> 00:17:08.560
and you have some people that aren't quite familiar


00:17:08.560 --> 00:17:10.200
with Jupyter Notebooks and you wanna get them up


00:17:10.200 --> 00:17:12.280
to speed really fast.


00:17:12.280 --> 00:17:14.640
I'm actually in this situation right now,


00:17:14.640 --> 00:17:17.640
not for me, but with some people I'm trying to ramp up.


00:17:17.640 --> 00:17:20.680
And I found there's a ton of tutorials


00:17:20.680 --> 00:17:22.920
about Jupyter Notebooks, of course, out there.


00:17:22.920 --> 00:17:27.360
But I really liked, there's two tutorials from DataQuest.


00:17:27.360 --> 00:17:30.920
The first is Jupyter Notebook for Beginners, a tutorial.


00:17:30.920 --> 00:17:35.320
And the second is Tutorial Advanced Jupyter Notebooks.


00:17:35.320 --> 00:17:36.800
And it's by the same author,


00:17:36.800 --> 00:17:39.320
which I should have written down, but I didn't.


00:17:39.320 --> 00:17:41.400
It starts out incredibly gentle,


00:17:41.400 --> 00:17:45.040
but it's also useful and concise and quick.


00:17:45.040 --> 00:17:48.160
You can get through quite a bit right away.


00:17:48.160 --> 00:17:49.960
And so it even starts with like,


00:17:49.960 --> 00:17:52.440
if you want to install Jupyter on your computer,


00:17:52.440 --> 00:17:54.640
how to install it, how to get started up,


00:17:54.640 --> 00:17:56.740
you don't even, if you aren't even familiar


00:17:56.740 --> 00:17:59.500
with how these work, how to get going,


00:17:59.500 --> 00:18:01.900
a little bit of a discussion about the file type,


00:18:01.900 --> 00:18:06.080
the I-P-Y-N-B, and then a run through of the interface


00:18:06.080 --> 00:18:08.920
and how it works to work with a notebook.


00:18:08.920 --> 00:18:11.600
And then even into data, so like loading data


00:18:11.600 --> 00:18:13.880
and some important things like plotting data


00:18:13.880 --> 00:18:16.800
right off the bat, and then even how to share,


00:18:16.800 --> 00:18:20.000
and then using save and checkpoint frequently


00:18:20.000 --> 00:18:23.840
to make sure that you save parts of your notebook.


00:18:23.840 --> 00:18:26.880
Like this saving often is something we take for granted


00:18:26.880 --> 00:18:29.560
with an editor, but it's kind of nice to have this


00:18:29.560 --> 00:18:31.560
within Jupyter Notebooks also.


00:18:31.560 --> 00:18:32.380
- Yeah, for sure.


00:18:32.380 --> 00:18:35.680
- And I kind of like that he stops the beginning one.


00:18:35.680 --> 00:18:39.040
It's long enough to get people started right at there,


00:18:39.040 --> 00:18:40.900
but then the advanced one,


00:18:40.900 --> 00:18:42.280
once people play with it a little bit,


00:18:42.280 --> 00:18:44.280
getting into some advanced things,


00:18:44.280 --> 00:18:49.280
which like the magics, keywords, debugging, shell commands,


00:18:49.820 --> 00:18:53.340
logging, using Seaborn, using macros,


00:18:53.340 --> 00:18:56.060
and all sorts of stuff in the advanced one, which are not--


00:18:56.060 --> 00:18:56.860
it's nice.


00:18:56.860 --> 00:18:58.020
But they're not too long.


00:18:58.020 --> 00:19:00.500
You could probably take an hour or so and go through it


00:19:00.500 --> 00:19:02.940
and learn what you need and skip what you don't need yet.


00:19:02.940 --> 00:19:03.700
Yeah, that's cool.


00:19:03.700 --> 00:19:06.580
I've also been playing with using PyCharm


00:19:06.580 --> 00:19:08.980
to edit IPython notebooks.


00:19:08.980 --> 00:19:10.180
It works really good.


00:19:10.180 --> 00:19:13.180
I would recommend if people are debugging notebooks,


00:19:13.180 --> 00:19:15.420
maybe not use write in Jupyter.


00:19:15.420 --> 00:19:17.300
I would probably use PyCharm for debugging.


00:19:17.300 --> 00:19:19.100
Yeah, PyCharm's pretty sweet for debugging.


00:19:19.100 --> 00:19:20.380
- Anyway, so that's what I got.


00:19:20.380 --> 00:19:21.220
- Yeah, that's nice.


00:19:21.220 --> 00:19:22.780
I think those definitely go well together.


00:19:22.780 --> 00:19:25.140
So people can check out those articles


00:19:25.140 --> 00:19:26.180
and then try them online.


00:19:26.180 --> 00:19:27.900
They don't even have to install anything.


00:19:27.900 --> 00:19:29.100
All right, final one, Brian,


00:19:29.100 --> 00:19:30.860
comes from a friend of the show, Trey Hunter,


00:19:30.860 --> 00:19:34.940
and it's called unique sentinel values, identity checks,


00:19:34.940 --> 00:19:37.340
and when to use object instead of none.


00:19:37.340 --> 00:19:39.620
And I think this is just a really nice reminder,


00:19:39.620 --> 00:19:42.020
maybe something a lot of folks don't know


00:19:42.020 --> 00:19:43.740
or haven't really thought about.


00:19:43.740 --> 00:19:45.860
Often we have to clear a variable


00:19:45.860 --> 00:19:47.700
and it may or may not have a value.


00:19:47.700 --> 00:19:50.580
Think of like computing the minimum of something.


00:19:50.580 --> 00:19:53.620
So you're gonna, the algorithm is you have the minimum value


00:19:53.620 --> 00:19:55.500
and you gotta set that to something


00:19:55.500 --> 00:19:57.060
and then you're gonna loop through all the items


00:19:57.060 --> 00:19:58.420
and you're gonna set it to the lowest.


00:19:58.420 --> 00:20:00.140
But how do you kind of initialize that, right?


00:20:00.140 --> 00:20:01.580
Do you set it to none?


00:20:01.580 --> 00:20:03.140
Do you set it to maybe negative one?


00:20:03.140 --> 00:20:04.960
But well, what if the values could be negative?


00:20:04.960 --> 00:20:06.340
Like what is that value, right?


00:20:06.340 --> 00:20:08.860
So often none becomes this thing


00:20:08.860 --> 00:20:11.860
that is the it's not yet set value.


00:20:11.860 --> 00:20:13.380
But if none is a valid value


00:20:13.380 --> 00:20:15.860
or maybe in this minimum example,


00:20:15.860 --> 00:20:18.100
like none could actually be a value


00:20:18.100 --> 00:20:19.780
that was passed to you in the list


00:20:19.780 --> 00:20:21.100
that you're trying to find the minimum of,


00:20:21.100 --> 00:20:22.380
but you need to treat it differently


00:20:22.380 --> 00:20:24.220
than actually the not having,


00:20:24.220 --> 00:20:25.940
you know, like it gets really weird, right?


00:20:25.940 --> 00:20:26.780
- Yeah.


00:20:26.780 --> 00:20:28.980
- So Trey makes a case for this,


00:20:28.980 --> 00:20:30.900
for something different in this article.


00:20:30.900 --> 00:20:31.740
I really like this.


00:20:31.740 --> 00:20:34.260
It's like, instead of sending a value to none,


00:20:34.260 --> 00:20:38.020
you can set it to object, parentheses, parentheses.


00:20:38.020 --> 00:20:40.500
And that allocates an object,


00:20:40.500 --> 00:20:43.260
much like none is an object, ironically,


00:20:43.260 --> 00:20:44.940
singleton and things like that.


00:20:44.940 --> 00:20:47.740
But object is going to be allocated on the heap


00:20:47.740 --> 00:20:50.900
and no one will ever pass that thing to you.


00:20:50.900 --> 00:20:54.380
There's no other use case for allocating an object to object.


00:20:54.380 --> 00:20:57.300
You always have something derived from object.


00:20:57.300 --> 00:20:59.620
I don't know, a string, a number, a customer,


00:20:59.620 --> 00:21:02.260
but not object itself, like the base class.


00:21:02.260 --> 00:21:05.420
So just allocating one of those is the perfect Sentinel value.


00:21:05.420 --> 00:21:09.460
And there's all kinds of examples he goes through,


00:21:09.460 --> 00:21:12.140
default values for a function, default parameters


00:21:12.140 --> 00:21:14.740
for functions, how you deal with that,


00:21:14.740 --> 00:21:17.020
How do you deal with this minimum example?


00:21:17.020 --> 00:21:19.860
What is the first value before you've looked at the list?


00:21:19.860 --> 00:21:21.340
And so you end up with really nice checks


00:21:21.340 --> 00:21:23.460
like that set minimum equals to object


00:21:23.460 --> 00:21:26.340
and then if minimum is not initial, right?


00:21:26.340 --> 00:21:30.180
Or is not this, you set the initial to this new object.


00:21:30.180 --> 00:21:31.180
Right, then you go work with it.


00:21:31.180 --> 00:21:34.340
So super simple adaptation that solves


00:21:34.340 --> 00:21:36.740
a certain class of bugs and makes it really nice.


00:21:36.740 --> 00:21:37.580
- That's interesting.


00:21:37.580 --> 00:21:38.540
- Yeah, it's super simple,


00:21:38.540 --> 00:21:40.560
but it's kind of a good reminder.


00:21:40.560 --> 00:21:42.300
And there's the example,


00:21:42.300 --> 00:21:46.200
He re-implements the min function that's a built-in, but in Python,


00:21:46.200 --> 00:21:48.000
and goes through all the cases to make it work,


00:21:48.000 --> 00:21:51.320
and shows how this pattern is much better than using none.


00:21:51.320 --> 00:21:55.440
I'll have to hit up Trey and ask him how to deal with that with type hints.


00:21:55.440 --> 00:21:55.720
Yeah.


00:21:55.720 --> 00:21:56.840
Because I'm used to--


00:21:56.840 --> 00:21:57.680
Yeah, I know.


00:21:57.680 --> 00:21:57.920
I know.


00:21:57.920 --> 00:21:59.000
You can't just say optional.


00:21:59.000 --> 00:22:00.840
I guess you've got to do like union of object,


00:22:00.840 --> 00:22:02.360
but that's also not a good answer.


00:22:02.360 --> 00:22:04.920
Because that would be everything.


00:22:04.920 --> 00:22:07.280
Yeah.


00:22:07.280 --> 00:22:08.720
Yeah, right.


00:22:08.720 --> 00:22:10.400
Yeah, it's not so good.


00:22:10.400 --> 00:22:10.960
Interesting.


00:22:10.960 --> 00:22:12.000
But it's a cool idea.


00:22:12.000 --> 00:22:12.840
- Yeah, it's a great idea.


00:22:12.840 --> 00:22:15.040
It is a little bizarre with the, I don't know,


00:22:15.040 --> 00:22:17.080
with the type-ins, you're right, but that's okay.


00:22:17.080 --> 00:22:19.120
I think you can get around it or just put like a,


00:22:19.120 --> 00:22:21.680
you know, ignore this one line type of thing.


00:22:21.680 --> 00:22:23.720
- Yeah, well, I mean, and it only really will come


00:22:23.720 --> 00:22:26.680
into place if it's part of your interface to something.


00:22:26.680 --> 00:22:29.160
- I mean, you'd probably do have to be careful


00:22:29.160 --> 00:22:31.480
with like mypy and mypyc and those tools,


00:22:31.480 --> 00:22:32.480
so they'll probably freak out


00:22:32.480 --> 00:22:34.560
if you don't take it into account.


00:22:34.560 --> 00:22:37.760
So, but yeah, I love the pattern in general,


00:22:37.760 --> 00:22:39.760
how it fits with type-ins, that's like a different,


00:22:39.760 --> 00:22:40.600
different aside.


00:22:40.600 --> 00:22:42.640
- Sorry, Trey. - Yeah, Trey,


00:22:42.640 --> 00:22:45.280
there's your follow-up article, man.


00:22:45.280 --> 00:22:48.960
Brian, that's it for our official six topics as usual.


00:22:48.960 --> 00:22:50.600
You got anything extra you wanna share with anyone?


00:22:50.600 --> 00:22:51.520
- I do.


00:22:51.520 --> 00:22:53.680
I forgot to write it down, but you reminded me


00:22:53.680 --> 00:22:55.480
'cause you were talking about sentinel values,


00:22:55.480 --> 00:22:59.040
and sentinels were part of the Matrix, right?


00:22:59.040 --> 00:23:00.400
- Oh yeah, they were scary.


00:23:00.400 --> 00:23:01.440
(laughing)


00:23:01.440 --> 00:23:03.000
Those were the big metal things


00:23:03.000 --> 00:23:04.520
that went through the underground tubes


00:23:04.520 --> 00:23:06.040
and they would grab onto the spaceship


00:23:06.040 --> 00:23:07.920
with the good guys in it, yeah.


00:23:07.920 --> 00:23:10.320
- Yeah, yeah, but there's something that's not scary


00:23:10.320 --> 00:23:14.480
is the cool computer screens that would go downwards.


00:23:14.480 --> 00:23:17.600
So one of the things I found, which is--


00:23:17.600 --> 00:23:20.160
I brought it up because I brought up pytest earlier--


00:23:20.160 --> 00:23:24.000
was a plug-in called pytest-Neo.


00:23:24.000 --> 00:23:26.640
And it runs all your--


00:23:26.640 --> 00:23:28.760
like normally, if you just run pytest by default,


00:23:28.760 --> 00:23:31.480
it'll print out the test file name and then


00:23:31.480 --> 00:23:32.840
a whole bunch of dots.


00:23:32.840 --> 00:23:36.800
And the dots mean everything passed or like an F for fail.


00:23:36.800 --> 00:23:39.960
The pytest-Neo plug-in, if you have that installed,


00:23:39.960 --> 00:23:42.140
That happens, but it goes downwards


00:23:42.140 --> 00:23:44.980
and looks like the screen, like a matrix screen,


00:23:44.980 --> 00:23:47.380
but it actually, it looks cool.


00:23:47.380 --> 00:23:48.460
But it's actually informative.


00:23:48.460 --> 00:23:49.700
It has all the same information,


00:23:49.700 --> 00:23:51.580
just in the wrong, a different direction.


00:23:51.580 --> 00:23:53.420
- Whoa, I need to learn unit testing.


00:23:53.420 --> 00:23:55.580
Chunk, yeah, that's awesome, I love it.


00:23:55.580 --> 00:23:56.820
Brings me back to the '90s.


00:23:56.820 --> 00:23:58.180
That's cool, very, very cool.


00:23:58.180 --> 00:23:59.020
- How about you?


00:23:59.020 --> 00:23:59.940
- I've got a couple of things.


00:23:59.940 --> 00:24:00.780
Let's start with this one.


00:24:00.780 --> 00:24:04.060
So I recently released a free course.


00:24:04.060 --> 00:24:06.820
So people can check that out over at training.python.fm


00:24:06.820 --> 00:24:07.860
or just click the link.


00:24:07.860 --> 00:24:11.780
I think we've talked about Kenneth Wright's new web framework


00:24:11.780 --> 00:24:12.940
called Responder, right?


00:24:12.940 --> 00:24:14.780
>> I think so. >> I think so, yeah, I'm pretty sure we have.


00:24:14.780 --> 00:24:17.980
So I decided to create a super short little mini course on it.


00:24:17.980 --> 00:24:22.580
So I created a almost one hour long course on Responder and


00:24:22.580 --> 00:24:25.540
the framework and it actually uses, goes and builds it.


00:24:25.540 --> 00:24:28.940
We go and build out like a cool API using Responder.


00:24:28.940 --> 00:24:31.620
And then actually consume it with Vue.js as well.


00:24:31.620 --> 00:24:34.160
So there's a cool little Vue.js front end on top of that.


00:24:34.160 --> 00:24:37.560
So if people wanna get some quick exposure to Responder,


00:24:37.560 --> 00:24:40.400
maybe see some of the cool features that it can do.


00:24:40.400 --> 00:24:41.900
Kind of Flask-like, but it does a bunch


00:24:41.900 --> 00:24:43.160
of other awesome stuff as well.


00:24:43.160 --> 00:24:44.780
It's not just Flask.


00:24:44.780 --> 00:24:46.640
Check that out, so check out the Responder course.


00:24:46.640 --> 00:24:48.720
Like I said, it's free, so no problem.


00:24:48.720 --> 00:24:49.560
There you go, check that out.


00:24:49.560 --> 00:24:51.380
And the other one is really cool,


00:24:51.380 --> 00:24:53.520
but I have to really remind myself to use it.


00:24:53.520 --> 00:24:55.120
So imagine this.


00:24:55.120 --> 00:24:56.320
I'm working in an editor.


00:24:56.320 --> 00:24:59.320
This is for PyCharm or any of the IntelliJ platforms


00:24:59.320 --> 00:25:01.500
like WebStorm or whatever.


00:25:01.500 --> 00:25:03.000
And I've got like a big monitor up,


00:25:03.000 --> 00:25:04.620
a whole bunch of code on the screen,


00:25:04.620 --> 00:25:06.600
and I have my fingers on the keyboard.


00:25:06.600 --> 00:25:11.160
And I want to go up to that section where I'm doing like open something,


00:25:11.160 --> 00:25:14.000
something as fin or whatever, right?


00:25:14.000 --> 00:25:16.120
But I don't want to take my mouse and go over that.


00:25:16.120 --> 00:25:19.000
I don't want to arrow up like 17 lines and then go to the right,


00:25:19.000 --> 00:25:20.040
control whatever.


00:25:20.040 --> 00:25:22.400
So there's this thing called AceJump.


00:25:22.400 --> 00:25:23.160
Have you heard of this?


00:25:23.160 --> 00:25:25.080
>> No. >> AceJump lets you hit a hotkey.


00:25:25.080 --> 00:25:29.160
I think it's on Windows, sorry, Mac, it's Command semicolon.


00:25:29.160 --> 00:25:33.440
And then if you type, let's say, fi, it'll go and


00:25:33.440 --> 00:25:39.560
put a single character on every space that fi is a substring of on the screen.


00:25:39.560 --> 00:25:44.040
Maybe the one I'm looking for has a j byte, so I'd say fi and hit j.


00:25:44.040 --> 00:25:46.480
And it'll take you straight to it.


00:25:46.480 --> 00:25:51.520
So it basically turns your screen, your code, into you do a little bit of a search


00:25:51.520 --> 00:25:55.440
and then one character keystroke to jump to that section of code.


00:25:55.440 --> 00:25:55.960
>> That's cool.


00:25:55.960 --> 00:25:57.200
>> It's super cool.


00:25:57.200 --> 00:26:01.360
It's super hard to remember to do that, not just era, era, era, era, or mouse,


00:26:01.360 --> 00:26:02.200
or whatever, right?


00:26:02.200 --> 00:26:04.480
But if I can remind myself to do this,


00:26:04.480 --> 00:26:05.800
it's gonna be great.


00:26:05.800 --> 00:26:09.040
- Okay, well, I mean, you use arrows, man?


00:26:09.040 --> 00:26:09.880
- Sometimes.


00:26:09.880 --> 00:26:10.920
- There's a VI mode.


00:26:10.920 --> 00:26:14.080
- True, true, true.


00:26:14.080 --> 00:26:16.120
- Anyway, so, no, that's cool.


00:26:16.120 --> 00:26:17.000
I'm gonna have to try that out.


00:26:17.000 --> 00:26:19.320
- Yeah, so you just basically type as you search


00:26:19.320 --> 00:26:20.840
and the whole thing becomes like,


00:26:20.840 --> 00:26:24.480
sort of quick jump around your editor.


00:26:24.480 --> 00:26:26.200
All right, are you ready for a pie joke?


00:26:26.200 --> 00:26:27.040
- I am.


00:26:27.040 --> 00:26:28.600
- I gotta hit it a few times.


00:26:28.600 --> 00:26:31.600
What's the object-oriented way to become wealthy?


00:26:31.600 --> 00:26:32.400
I don't know.


00:26:32.400 --> 00:26:33.060
Inheritance.


00:26:33.060 --> 00:26:33.320
Okay.


00:26:33.320 --> 00:26:34.120
That's bad, right?


00:26:34.120 --> 00:26:34.960
[laughs]


00:26:34.960 --> 00:26:38.860
A good programmer is someone who always looks both ways before crossing a one-way street.


00:26:38.860 --> 00:26:42.860
[laughs]


00:26:42.860 --> 00:26:47.860
Child, Dad, why does the sun rise in the east and set in the west?


00:26:47.860 --> 00:26:49.960
Dad, sun is working, don't touch it.


00:26:49.960 --> 00:26:52.760
[laughs]


00:26:52.760 --> 00:26:55.760
All right, I'll do one more for you because it's about Python 2.7.


00:26:55.760 --> 00:27:00.000
triumphantly Beth removed Python 2.7 from her server in 2020.


00:27:00.000 --> 00:27:04.160
Finally, she said with glee, only to see the announcement for Python 4.4.


00:27:04.160 --> 00:27:06.660
Yeah.


00:27:06.660 --> 00:27:08.500
All right.


00:27:08.500 --> 00:27:10.080
That's pretty cool.


00:27:10.080 --> 00:27:11.760
Well, I guess I guess we'll leave it there.


00:27:11.760 --> 00:27:12.480
Yep, that's good.


00:27:12.480 --> 00:27:12.960
All right, Brian.


00:27:12.960 --> 00:27:13.600
Thanks for being here.


00:27:13.600 --> 00:27:15.200
Thanks for finding all these items.


00:27:15.200 --> 00:27:15.520
Thanks.


00:27:15.520 --> 00:27:15.760
Yep.


00:27:15.760 --> 00:27:16.320
Bye.


00:27:16.320 --> 00:27:18.080
Thank you for listening to Python Bytes.


00:27:18.080 --> 00:27:20.560
Follow the show on Twitter via @pythonbytes.


00:27:20.560 --> 00:27:23.520
That's Python Bytes as in B-Y-T-E-S.


00:27:23.520 --> 00:27:28.400
and get the full show notes at pythonbytes.fm. If you have a news item you want featured,


00:27:28.400 --> 00:27:33.200
just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something


00:27:33.200 --> 00:27:38.000
cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and


00:27:38.000 --> 00:27:40.160
sharing this podcast with your friends and colleagues.

