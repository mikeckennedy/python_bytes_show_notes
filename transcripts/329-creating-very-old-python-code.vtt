WEBVTT

00:00:00.000 --> 00:00:02.660
Hello and welcome to Python Bytes,


00:00:02.660 --> 00:00:04.460
where we deliver Python news and


00:00:04.460 --> 00:00:06.340
the headlines directly to your earbuds.


00:00:06.340 --> 00:00:08.500
This is episode 329,


00:00:08.500 --> 00:00:13.260
recorded March 30th, 2023. I'm Brian Okken.


00:00:13.260 --> 00:00:14.860
>> I'm Michael Kennedy.


00:00:14.860 --> 00:00:16.980
>> Before we get started,


00:00:16.980 --> 00:00:18.260
I want to do a couple of things.


00:00:18.260 --> 00:00:19.700
I want to thank Microsoft for


00:00:19.700 --> 00:00:21.940
Startup Founders Hub for sponsoring this episode.


00:00:21.940 --> 00:00:23.220
Please listen to their spot.


00:00:23.220 --> 00:00:27.140
We've got a very special random guest appearance


00:00:27.140 --> 00:00:29.540
or voice for that ad read.


00:00:29.540 --> 00:00:30.980
So that'll be fun.


00:00:30.980 --> 00:00:33.180
I also, if you're listening to this,


00:00:33.180 --> 00:00:35.060
I'd like to encourage you to--


00:00:35.060 --> 00:00:37.160
and you've never watched the live show--


00:00:37.160 --> 00:00:40.820
I'd like to encourage you to watch our live show on YouTube


00:00:40.820 --> 00:00:43.660
or streaming.


00:00:43.660 --> 00:00:45.900
Today is Thursday, but we usually record Tuesday


00:00:45.900 --> 00:00:47.100
at noon or 11.


00:00:47.100 --> 00:00:48.260
No, Tuesday at 11.


00:00:48.260 --> 00:00:49.940
Yeah, I should have practiced this.


00:00:49.940 --> 00:00:52.600
Anyway, but welcome.


00:00:52.600 --> 00:00:56.180
And the people that are here today are watching on YouTube.


00:00:56.180 --> 00:00:57.260
Thanks for watching.


00:00:57.260 --> 00:00:59.520
And why don't you kick us off, Michael?


00:00:59.520 --> 00:01:03.280
I got something, I think it'll resonate with you folks.


00:01:03.280 --> 00:01:04.640
Maybe you already are aware of this.


00:01:04.640 --> 00:01:06.080
This is news to me.


00:01:06.080 --> 00:01:09.200
Comes to us from Brandon Hannigan.


00:01:09.200 --> 00:01:10.760
So thanks for sending that in.


00:01:10.760 --> 00:01:13.240
And it's an environment variable.


00:01:13.240 --> 00:01:15.240
And in and of itself, it's just interesting


00:01:15.240 --> 00:01:17.220
that it leads to many more environment variables


00:01:17.220 --> 00:01:19.520
you can play with is also pretty awesome.


00:01:19.520 --> 00:01:24.440
So this one is about the Dunder Pie Cache folder.


00:01:24.440 --> 00:01:26.840
So I don't know how you feel about these, Brian.


00:01:26.840 --> 00:01:28.220
I'm glad they exist.


00:01:28.220 --> 00:01:32.060
I'm not necessarily super glad that they're spread out


00:01:32.060 --> 00:01:34.420
a bunch of random folders.


00:01:34.420 --> 00:01:37.340
So like a lot of my projects have many different modules


00:01:37.340 --> 00:01:39.860
and different folders, you know, sub module type set up.


00:01:39.860 --> 00:01:43.500
And when I run them, they all get filled up


00:01:43.500 --> 00:01:46.420
with DunderPyCache folders with startup PYC,


00:01:46.420 --> 00:01:48.940
you know, compiled Python, like people might think.


00:01:48.940 --> 00:01:51.620
I think Python is compiled, but yes, Python is compiled.


00:01:51.620 --> 00:01:53.660
It's just then interpreted not, you know,


00:01:53.660 --> 00:01:55.580
all the way to machine instructions, right?


00:01:55.580 --> 00:01:57.940
So those files end up in the DunderPyCache,


00:01:57.940 --> 00:02:00.620
which spread throughout your project structure.


00:02:00.620 --> 00:02:02.140
Sometimes I wanna make a copy of that.


00:02:02.140 --> 00:02:03.020
I wanna move that around.


00:02:03.020 --> 00:02:04.220
I wanna zip it up and share it,


00:02:04.220 --> 00:02:05.580
and I don't want those things in there,


00:02:05.580 --> 00:02:07.560
and so I'll have to go in and search for all those


00:02:07.560 --> 00:02:09.460
and remove them recursively,


00:02:09.460 --> 00:02:10.820
which is not the end of the world,


00:02:10.820 --> 00:02:12.400
but I'd rather they are not there,


00:02:12.400 --> 00:02:13.240
or if they were there,


00:02:13.240 --> 00:02:15.580
could they just go in a top-level thing?


00:02:15.580 --> 00:02:16.420
You know what I mean?


00:02:16.420 --> 00:02:20.420
Like, could they just go into a single Dunder Pie cache


00:02:20.420 --> 00:02:22.020
that understands the whole structure,


00:02:22.020 --> 00:02:24.900
not every file being treated as if it's unrelated?


00:02:24.900 --> 00:02:26.900
- Yeah, I mean, it's better than it used to be


00:02:26.900 --> 00:02:29.660
having the PYCs right next to the Python files.


00:02:29.660 --> 00:02:32.180
>> Yes. It is an improvement.


00:02:32.180 --> 00:02:32.700
>> Yeah.


00:02:32.700 --> 00:02:34.980
>> But this thing that Brendan said,


00:02:34.980 --> 00:02:38.780
you can set the Python PyCache prefix,


00:02:38.780 --> 00:02:40.100
which is a path,


00:02:40.100 --> 00:02:43.020
maybe it should be called Python Cache folder, I don't know.


00:02:43.020 --> 00:02:45.500
Anyway, what you do is you


00:02:45.500 --> 00:02:47.480
set this in your environment variable,


00:02:47.480 --> 00:02:49.100
maybe in your user account,


00:02:49.100 --> 00:02:52.060
maybe in the activation of a virtual environment.


00:02:52.060 --> 00:02:54.500
If you want it to be a one-off type thing, I don't know.


00:02:54.500 --> 00:02:56.740
Then when Python goes to create these,


00:02:56.740 --> 00:02:59.580
it goes, oh, they don't want the DunderPy cache.


00:02:59.580 --> 00:03:02.060
They want it over in this directory over there.


00:03:02.060 --> 00:03:05.180
And so it'll make, you can isolate all of your


00:03:05.180 --> 00:03:08.380
DunderPy cache stuff into a separate location


00:03:08.380 --> 00:03:09.740
on your user profile.


00:03:09.740 --> 00:03:11.700
You can go and just blast that away whenever you feel like.


00:03:11.700 --> 00:03:14.580
But most importantly, it's not within your source code.


00:03:14.580 --> 00:03:17.740
If you like zip it up and hand it out or things like that.


00:03:17.740 --> 00:03:18.940
- Oh wow, okay.


00:03:18.940 --> 00:03:19.760
That's great.


00:03:19.760 --> 00:03:22.420
- Yeah, it says, if this is set, Python will write


00:03:22.420 --> 00:03:27.080
star.pyc files in a mirror directory tree at this path


00:03:27.080 --> 00:03:29.260
instead of in dunder pi cache directories


00:03:29.260 --> 00:03:30.140
within the source tree.


00:03:30.140 --> 00:03:32.580
This is equivalent to specifying the -x


00:03:32.580 --> 00:03:35.020
pi cache prefix equals path option.


00:03:35.020 --> 00:03:36.240
So pretty cool, right?


00:03:36.240 --> 00:03:38.900
- Yeah, I also didn't know about the -x though either.


00:03:38.900 --> 00:03:40.220
So that's pretty cool.


00:03:40.220 --> 00:03:42.620
- Yeah, this page that I'm linking to is at the top,


00:03:42.620 --> 00:03:43.900
it has all the command line options


00:03:43.900 --> 00:03:46.100
and then almost all the command line options


00:03:46.100 --> 00:03:49.080
have an environment variable thing


00:03:49.080 --> 00:03:51.040
if you want it to just be the default all the time


00:03:51.040 --> 00:03:52.120
and you don't have to set it.


00:03:52.120 --> 00:03:54.240
So there's a bunch you can come through here.


00:03:54.240 --> 00:03:58.040
So Python path, you can set Python startup.


00:03:58.040 --> 00:04:01.320
So these are the Python commands that'll execute


00:04:01.320 --> 00:04:04.000
whenever you start Python, which is kind of interesting.


00:04:04.000 --> 00:04:07.760
Optimize, breakpoint, debug.


00:04:07.760 --> 00:04:10.520
The one we talked about, you can set up a hash seed


00:04:10.520 --> 00:04:14.240
so you can get repeatable deterministic hashing.


00:04:14.240 --> 00:04:16.400
A bunch of stuff is here people can check out.


00:04:16.400 --> 00:04:18.240
How you look at warnings,


00:04:18.240 --> 00:04:19.280
how much warnings you wanna see,


00:04:19.280 --> 00:04:21.080
whether or not there's buffering.


00:04:21.080 --> 00:04:24.760
So, you'll see sometimes things like the standard out


00:04:24.760 --> 00:04:28.420
will come after the standard error,


00:04:28.420 --> 00:04:32.040
but the standard error in time actually came after the out,


00:04:32.040 --> 00:04:33.800
'cause the buffering got out of,


00:04:33.800 --> 00:04:36.080
they hit the buffer at different periods.


00:04:36.080 --> 00:04:38.080
So you can do things like turn that off,


00:04:38.080 --> 00:04:40.440
turn on malloc stats if you wanna track that.


00:04:40.440 --> 00:04:43.040
So there's like a bunch of things you can come in here


00:04:43.040 --> 00:04:46.440
and play with, but I think the PYC one's an interesting one,


00:04:46.440 --> 00:04:48.440
especially for people who hand out code.


00:04:48.440 --> 00:04:51.000
If you're doing a training or a tutorial


00:04:51.000 --> 00:04:52.280
and you're like, "Here, I want to give everybody this.


00:04:52.280 --> 00:04:54.040
You got to have the pyc file."


00:04:54.040 --> 00:04:56.800
>> I was just looking through there because I'm surprised that you


00:04:56.800 --> 00:05:00.800
can't specify which XKCD comic to link to.


00:05:00.800 --> 00:05:04.200
>> I know. When I import anti-gravity, which one?


00:05:04.200 --> 00:05:06.440
Don't worry, we'll get there.


00:05:06.440 --> 00:05:09.160
Well, that's what I got for this one.


00:05:09.160 --> 00:05:12.240
The Python PyCache prefix. Check it out.


00:05:12.240 --> 00:05:15.040
>> Nice. I wanted to talk about GUIs.


00:05:15.040 --> 00:05:17.000
We haven't talked about GUIs for a while.


00:05:17.000 --> 00:05:20.720
>> It's true. We were on such a kick.


00:05:20.720 --> 00:05:26.400
Yeah, but several people have mentioned this to us, so we thought we'd cover it.


00:05:26.400 --> 00:05:28.720
It's a package called NiceGUI.


00:05:28.720 --> 00:05:33.660
And normally, actually, when I think about GUI, I think about like actual, not web stuff,


00:05:33.660 --> 00:05:36.000
but user interface stuff that's on the desktop.


00:05:36.000 --> 00:05:38.680
But this is a browser-based thing.


00:05:38.680 --> 00:05:44.360
So this is a package that it says it's easy to use Python-based UI framework,


00:05:44.360 --> 00:05:48.840
which shows up in your web browser, buttons, dialogues, markdown, 3D plots, and more.


00:05:48.840 --> 00:05:53.040
What's cool is you can play with it all before you even try it.


00:05:53.040 --> 00:05:56.280
The documentation is really great.


00:05:56.280 --> 00:05:58.560
Even just here, I thought this was


00:05:58.560 --> 00:06:00.800
just like a screenshot or something.


00:06:00.800 --> 00:06:02.640
No, you can just like, this is part of it.


00:06:02.640 --> 00:06:04.480
You can move it and interact with it


00:06:04.480 --> 00:06:07.000
right here in the first page. It's pretty cool.


00:06:07.000 --> 00:06:11.040
The full documentation is really pretty great too.


00:06:11.040 --> 00:06:12.680
I actually want to try to play with this because


00:06:12.680 --> 00:06:15.960
the code really looks pretty easy to write.


00:06:15.960 --> 00:06:21.320
So for some quick maybe dashboards or some quick control stuff that you're okay with doing through


00:06:21.320 --> 00:06:27.560
a web browser, why not try it out? And some of these are pretty cool. I was playing with text


00:06:27.560 --> 00:06:33.400
input. So it's talking about validation stuff. So you can have some text and you can just start


00:06:33.400 --> 00:06:38.840
typing and it's saying, "Oh, that's too long." So you can, I mean, this validation is pretty


00:06:38.840 --> 00:06:42.680
simple of just checking length, but you can do all sorts of stuff like email validation or


00:06:42.680 --> 00:06:44.080
or whatever you want it to do,


00:06:44.080 --> 00:06:45.840
because it's just like a function that's calling.


00:06:45.840 --> 00:06:47.160
So kind of neat.


00:06:47.160 --> 00:06:48.600
You got a validation there.


00:06:48.600 --> 00:06:50.480
Knobs, knobs are fun.


00:06:50.480 --> 00:06:51.760
I was playing with the knobs.


00:06:51.760 --> 00:06:54.440
So drag knob and turning.


00:06:54.440 --> 00:06:57.080
Anyway, all sorts of fun things.


00:06:57.080 --> 00:07:00.560
- Context manager to put it into the page with knob.


00:07:00.560 --> 00:07:01.400
- What?


00:07:01.400 --> 00:07:02.680
You go with knob.


00:07:02.680 --> 00:07:05.760
Interesting, I wonder why.


00:07:05.760 --> 00:07:06.800
- I don't know.


00:07:06.800 --> 00:07:08.480
Oh, to put the icon inside it.


00:07:08.480 --> 00:07:10.680
So you basically, it looks like you're focusing


00:07:10.680 --> 00:07:17.800
the subsequent commands to be within the container of the knob because the knob is like a like a circular


00:07:17.800 --> 00:07:21.640
progress bar type thing and you can put a volume up icon inside it.


00:07:21.640 --> 00:07:30.440
Okay, anyway, just all sorts of cool stuff. Joystick. That's really, I don't have a joystick to play with this out, but


00:07:30.440 --> 00:07:40.440
some interesting naming there with the joystick. But anyway, so moving on, date pickers and all sorts of things.


00:07:40.440 --> 00:07:41.840
Oh, that's nice.


00:07:41.840 --> 00:07:42.240
Cool.


00:07:42.240 --> 00:07:46.600
But UI elements, if you're okay with trying something new,


00:07:46.600 --> 00:07:49.240
a nice GUI might be right for you.


00:07:49.240 --> 00:07:51.120
>> That's interesting, isn't it?


00:07:51.120 --> 00:07:54.480
When I look at these types of frameworks,


00:07:54.480 --> 00:07:57.160
a lot of times I feel like what they say is,


00:07:57.160 --> 00:08:00.640
HTML is terrible, the DOM is terrible, CSS is terrible.


00:08:00.640 --> 00:08:05.160
Let's create a parallel Python or name your language equivalent,


00:08:05.160 --> 00:08:07.560
where we put elements in the web page.


00:08:07.560 --> 00:08:10.240
I'm like, they may have their drawbacks,


00:08:10.240 --> 00:08:12.240
but at least you have a ton of tools and stuff


00:08:12.240 --> 00:08:15.160
that apply to HTML and CSS and all those things, right?


00:08:15.160 --> 00:08:17.920
But with this one, I think there's a lot of cool widgets


00:08:17.920 --> 00:08:20.400
and stuff that are here, and it looks more like,


00:08:20.400 --> 00:08:22.840
it's not like we don't like HTML,


00:08:22.840 --> 00:08:26.480
so let's make a Python DOM that you create the HTML with,


00:08:26.480 --> 00:08:29.840
but rather, how do we make a cool interactive page


00:08:29.840 --> 00:08:32.400
based on these additional things like knobs


00:08:32.400 --> 00:08:35.360
and joysticks and sliders and stuff


00:08:35.360 --> 00:08:37.960
that's not easily part of HTML?


00:08:37.960 --> 00:08:40.800
- Yeah, and the places where I would really use


00:08:40.800 --> 00:08:44.440
something like this are, I mean, this is a short code.


00:08:44.440 --> 00:08:49.400
So especially internal tools, or even just stuff for myself.


00:08:49.400 --> 00:08:52.840
If I want to explore some data control, like a database,


00:08:52.840 --> 00:08:56.400
or got a bunch of, you know, controlling some system


00:08:56.400 --> 00:08:57.880
or something, and I want to like quickly


00:08:57.880 --> 00:08:59.560
throw something together, something like this


00:08:59.560 --> 00:09:03.680
would be great for just doing like a one-pager


00:09:03.680 --> 00:09:05.560
something to try it out.


00:09:05.560 --> 00:09:07.840
- I also think these types of frameworks


00:09:07.840 --> 00:09:11.040
would be pretty cool to bring into some kind of


00:09:11.040 --> 00:09:14.640
electron JS type thing, where you're like,


00:09:14.640 --> 00:09:16.840
and here's how you make it an app


00:09:16.840 --> 00:09:18.480
that doesn't actually look like a web page


00:09:18.480 --> 00:09:19.880
and give it to someone.


00:09:19.880 --> 00:09:22.900
- Yeah, so one of the things they bring up is like,


00:09:22.900 --> 00:09:26.920
great for micro web apps, dashboards, robotics projects,


00:09:26.920 --> 00:09:28.840
like school robotics, stuff like that,


00:09:28.840 --> 00:09:30.240
smart home solutions. - Probably that joystick thing,


00:09:30.240 --> 00:09:32.320
right, can drive you a little.


00:09:32.320 --> 00:09:36.080
- And then one of the nice things that I noticed


00:09:36.080 --> 00:09:40.080
about the documentation is they've got a bunch of demos.


00:09:40.080 --> 00:09:44.480
Oh, these are the actual demos, but there's examples.


00:09:44.480 --> 00:09:45.320
Where did I find this?


00:09:45.320 --> 00:09:47.440
Is it maybe under examples?


00:09:47.440 --> 00:09:49.960
Well, anyway, there's a whole bunch of like actual code.


00:09:49.960 --> 00:09:52.640
So there's repos around that you can try it out


00:09:52.640 --> 00:09:56.040
with different repositories.


00:09:56.040 --> 00:09:57.440
Maybe it's just on the front page.


00:09:57.440 --> 00:09:59.320
Anyway, I was impressed.


00:09:59.320 --> 00:10:00.360
Oh yeah, here we go.


00:10:00.360 --> 00:10:01.640
Down at the bottom of the front page,


00:10:01.640 --> 00:10:02.960
there's like slideshows.


00:10:02.960 --> 00:10:05.840
And even if you want to, will this work with FastAPI?


00:10:05.840 --> 00:10:09.140
apparently there's a FastAPI example


00:10:09.140 --> 00:10:12.200
for just some quick repositories


00:10:12.200 --> 00:10:13.840
so you can try it out yourself.


00:10:13.840 --> 00:10:17.600
- Oh, maybe like an admin page type of dashboard thing


00:10:17.600 --> 00:10:19.160
that you can play with.


00:10:19.160 --> 00:10:21.480
Yeah, there's some OpenCV webcam.


00:10:21.480 --> 00:10:24.320
- Infinite scroll for galleries.


00:10:24.320 --> 00:10:29.060
And the amount of like demos of components right there,


00:10:29.060 --> 00:10:32.360
but then actually specific examples where you can,


00:10:33.560 --> 00:10:36.200
with the code, with repos that you can just copy


00:10:36.200 --> 00:10:37.040
and get started with.


00:10:37.040 --> 00:10:39.720
That's pretty impressive that they put all that together


00:10:39.720 --> 00:10:40.600
right off the bat.


00:10:40.600 --> 00:10:43.800
- Yeah, it looks like it's definitely worth checking out.


00:10:43.800 --> 00:10:45.880
- Do you know what else is worth checking out?


00:10:45.880 --> 00:10:47.200
- Our sponsor.


00:10:47.200 --> 00:10:50.440
- Yes, Microsoft for Startups, Founders Hub.


00:10:50.440 --> 00:10:52.580
Thank you for sponsoring this episode.


00:10:52.580 --> 00:10:55.920
And what was the key that you,


00:10:55.920 --> 00:10:58.560
how did you generate this code, the text?


00:10:58.560 --> 00:11:00.840
- Well, remember, I don't recall who suggested it


00:11:00.840 --> 00:11:03.560
because I had the American football coach


00:11:03.560 --> 00:11:06.840
motivational speech version, variant last time.


00:11:06.840 --> 00:11:09.040
And somebody said, well, what if it was like Ted Lasso?


00:11:09.040 --> 00:11:14.040
So I said, hey, open AI thing, here's the Microsoft ad.


00:11:14.040 --> 00:11:17.860
Could you rewrite it this time in the style of Ted Lasso?


00:11:17.860 --> 00:11:21.560
- Yeah, so it's an odd episode.


00:11:21.560 --> 00:11:24.000
So I get the honor of trying to be Ted Lasso,


00:11:24.000 --> 00:11:26.640
which I'm not gonna get the voice, so apologies.


00:11:26.640 --> 00:11:28.440
And I did not grow up in the Midwest.


00:11:28.440 --> 00:11:30.800
So anyway, let's just get started.


00:11:30.800 --> 00:11:33.640
Hey there team, gather around because I've got something


00:11:33.640 --> 00:11:35.320
real special to share with y'all.


00:11:35.320 --> 00:11:38.720
Now, you know how much I believe in the power of teamwork


00:11:38.720 --> 00:11:39.960
and positivity, right?


00:11:39.960 --> 00:11:42.120
Well, this opportunity I'm telling you,


00:11:42.120 --> 00:11:45.400
about to tell you is just like the perfect assist


00:11:45.400 --> 00:11:47.020
to your startup goal.


00:11:47.020 --> 00:11:49.080
I'm talking about the Microsoft for Startups


00:11:49.080 --> 00:11:50.380
Founders Hub, folks.


00:11:50.380 --> 00:11:53.880
Now imagine if you will, a locker room full of support


00:11:53.880 --> 00:11:57.000
for your startup, especially if you're keen on that


00:11:57.000 --> 00:11:58.960
there artificial intelligence stuff.


00:11:58.960 --> 00:12:01.180
We're talking over six figures of benefits


00:12:01.180 --> 00:12:03.460
that'll change the game for your team.


00:12:03.460 --> 00:12:07.300
They're offering you 150K in Azure credits.


00:12:07.300 --> 00:12:09.740
And that my friends is like having the best player


00:12:09.740 --> 00:12:11.220
on the field on your side.


00:12:11.220 --> 00:12:13.580
And what's more, the Founders Hub has given y'all


00:12:13.580 --> 00:12:17.780
a unique chance to access open AIs, APIs,


00:12:17.780 --> 00:12:21.340
and the new Azure Open AI, API,


00:12:21.340 --> 00:12:23.340
the Azure Open AI service.


00:12:23.340 --> 00:12:26.420
It's like having your own generative AI coach


00:12:26.420 --> 00:12:28.840
to help you come up with game winning strategies


00:12:28.840 --> 00:12:30.100
for your applications.


00:12:30.100 --> 00:12:34.080
Now, I know how important it is to have the right support


00:12:34.080 --> 00:12:36.040
and that's why the folks at Microsoft


00:12:36.040 --> 00:12:39.600
are also offering one-on-one technical advice,


00:12:39.600 --> 00:12:42.580
helping you with your game plan, scalability and security.


00:12:42.580 --> 00:12:44.640
Plus, you'll be part of a network of mentors


00:12:44.640 --> 00:12:49.320
who know the startup world like the back of their hand.


00:12:49.320 --> 00:12:51.700
I can't emphasize enough how amazing


00:12:51.700 --> 00:12:53.440
this opportunity is, friends.


00:12:53.440 --> 00:12:54.280
And guess what?


00:12:54.280 --> 00:12:55.460
It's open to everyone,


00:12:55.460 --> 00:12:57.560
no matter what stage your startup's at


00:12:57.560 --> 00:12:59.440
and no funding requirements.


00:12:59.440 --> 00:13:01.320
Just take five minutes to apply


00:13:01.320 --> 00:13:04.700
and you'll be on your way to reaping some massive benefits.


00:13:04.700 --> 00:13:07.280
So come on team, let's harness the power of AI


00:13:07.280 --> 00:13:08.960
for your startup and join Microsoft


00:13:08.960 --> 00:13:10.620
for Startup Founders Hub today.


00:13:10.620 --> 00:13:15.160
Head on over to pythonbytes.fm/foundershub2022


00:13:15.160 --> 00:13:16.000
and sign up.


00:13:16.000 --> 00:13:17.800
This is your chance to score big.


00:13:17.800 --> 00:13:20.400
So don't let it slip through your fingers.


00:13:20.400 --> 00:13:22.960
And just so you know, the ad you just heard


00:13:22.960 --> 00:13:26.660
was written by the same AI you'll get access to.


00:13:26.660 --> 00:13:27.680
Ain't that something?


00:13:27.680 --> 00:13:29.660
So don't wait any longer and sign up


00:13:29.660 --> 00:13:33.920
at pythonbytes.fm/foundershub2022.


00:13:33.920 --> 00:13:37.700
A big thank you to Microsoft for supporting this show.


00:13:37.700 --> 00:13:39.820
- That open AI, that sure is something.


00:13:39.820 --> 00:13:40.660
All right.


00:13:40.660 --> 00:13:42.140
(laughing)


00:13:42.140 --> 00:13:44.700
Speaking of something, let's talk about ngrok.


00:13:44.700 --> 00:13:45.540
Let's talk about Flask.


00:13:45.540 --> 00:13:47.140
Like I can't decide, let's talk about both.


00:13:47.140 --> 00:13:50.300
So this one I wanna cover is an interesting one.


00:13:50.300 --> 00:13:53.660
So I've talked about ngrok before.


00:13:53.660 --> 00:13:54.620
For those of you who don't know,


00:13:54.620 --> 00:13:55.980
like unfortunately their website,


00:13:55.980 --> 00:13:57.900
I don't know what's gone on, but they've redesigned it


00:13:57.900 --> 00:13:59.420
in a way they can't really tell what it does,


00:13:59.420 --> 00:14:01.200
but it's just, anyway.


00:14:01.200 --> 00:14:06.940
In Grok, what it does is it lets you run a command locally


00:14:06.940 --> 00:14:09.940
and then share your web app,


00:14:09.940 --> 00:14:11.900
whether that be for an API,


00:14:11.900 --> 00:14:13.700
someone needs to talk to the API,


00:14:13.700 --> 00:14:15.780
or just the web app itself.


00:14:15.780 --> 00:14:19.380
So for example, Brian, imagine you had created a cool demo


00:14:19.380 --> 00:14:21.980
of that nice GUI thing,


00:14:21.980 --> 00:14:23.460
and you wanted to let some people,


00:14:23.460 --> 00:14:24.500
you're in a meeting with your team,


00:14:24.500 --> 00:14:26.380
"Hey, you guys, y'all should check this out.


00:14:26.380 --> 00:14:28.380
This is really, really cool."


00:14:28.380 --> 00:14:30.740
What you might do normally would say,


00:14:30.740 --> 00:14:34.300
"Well, let's just fire up a screen sharing and I'll drive it around."


00:14:34.300 --> 00:14:37.340
But the interaction part of those widgets is really cool.


00:14:37.340 --> 00:14:38.620
So it'd be better if you could just say,


00:14:38.620 --> 00:14:39.860
"And interact with this."


00:14:39.860 --> 00:14:41.460
So if you fire up ngrok,


00:14:41.460 --> 00:14:47.620
you just give them a URL that reverse SSH tunnels into your machine,


00:14:47.620 --> 00:14:49.860
and then they can access it on the Internet with their browser,


00:14:49.860 --> 00:14:51.780
and everyone can play with it live.


00:14:51.780 --> 00:14:53.660
So that's really cool.


00:14:53.660 --> 00:14:57.660
I recently used that for, I'm just about to release


00:14:57.660 --> 00:15:01.000
a course called Python Web Apps that fly with CDNs.


00:15:01.000 --> 00:15:03.160
Like basically how do you do really awesome stuff


00:15:03.160 --> 00:15:06.620
with CDNs plus Python and Flask and all those things


00:15:06.620 --> 00:15:08.460
to make your app way, way faster.


00:15:08.460 --> 00:15:11.580
Well, in order to put that together and test it,


00:15:11.580 --> 00:15:13.800
you've got to let a public CDN get access


00:15:13.800 --> 00:15:16.140
to your dev machine, which like, how does that happen?


00:15:16.140 --> 00:15:17.420
ngrok is how that happens.


00:15:17.420 --> 00:15:19.140
Same thing with our mobile apps, like,


00:15:19.140 --> 00:15:20.980
you can see, like right here,


00:15:20.980 --> 00:15:23.780
we had this problem where some of the data


00:15:23.780 --> 00:15:26.220
wasn't being passed through as headers correctly


00:15:26.220 --> 00:15:28.300
to the server and we're like,


00:15:28.300 --> 00:15:29.980
we cannot figure out why this is not working.


00:15:29.980 --> 00:15:31.700
It's clearly in the headers collection.


00:15:31.700 --> 00:15:33.540
Why is Python not seeing those?


00:15:33.540 --> 00:15:35.660
And it turns out there was like a weird case


00:15:35.660 --> 00:15:37.380
sensitivity issue or whatever.


00:15:37.380 --> 00:15:40.260
But I just fired up ngrok, pressed debug on PyCharm


00:15:40.260 --> 00:15:41.820
and said, all right, try it again.


00:15:41.820 --> 00:15:43.640
And then boom, I'm like stepping through,


00:15:43.640 --> 00:15:45.700
like on a mobile device,


00:15:45.700 --> 00:15:47.740
I'm stepping through its interaction with the APIs.


00:15:47.740 --> 00:15:49.140
I'm like, oh, I see, here's what's happening.


00:15:49.140 --> 00:15:50.580
And then we fixed it, super easy.


00:15:50.580 --> 00:15:54.420
All of that is to set up Flask-ngrok.


00:15:54.420 --> 00:15:56.620
So all of those benefits are awesome,


00:15:56.620 --> 00:15:59.380
but what I gotta do is I have to go fire up ngrok,


00:15:59.380 --> 00:16:01.960
overdo the thing, and then come back, right?


00:16:01.960 --> 00:16:04.700
So it'd be cool maybe if I could just press go,


00:16:04.700 --> 00:16:09.700
either Flask run, or just go in PyCharm or VS Code,


00:16:09.700 --> 00:16:12.560
and it would just, in addition to starting up Flask,


00:16:12.560 --> 00:16:14.380
it would also start up ngrok,


00:16:14.380 --> 00:16:16.340
pointing back at whatever the right port is, right?


00:16:16.340 --> 00:16:18.140
So basically that's what this is.


00:16:18.140 --> 00:16:21.860
you just wrap the app in run with ngrok.


00:16:21.860 --> 00:16:23.900
So you get a run with ngrok app.


00:16:23.900 --> 00:16:25.660
And then when you say flask run,


00:16:25.660 --> 00:16:27.780
it fires up the local version,


00:16:27.780 --> 00:16:30.560
but it also fires up an ngrok URL


00:16:30.560 --> 00:16:31.720
that you can share with people.


00:16:31.720 --> 00:16:32.560
- Oh, cool.


00:16:32.560 --> 00:16:35.380
- Yeah, so not a huge, huge feature


00:16:35.380 --> 00:16:37.140
'cause sure you can run ngrok on your own,


00:16:37.140 --> 00:16:38.980
but I think it's kind of cool.


00:16:38.980 --> 00:16:43.140
Like basically that means whenever you run your flask code,


00:16:43.140 --> 00:16:46.580
your flask app for debugging or for dev or whatever,


00:16:46.580 --> 00:16:49.140
there's always a publicly accessible address


00:16:49.140 --> 00:16:50.500
that you can share with other people


00:16:50.500 --> 00:16:52.800
or you can type into some other tool.


00:16:52.800 --> 00:16:54.700
I wanna validate an RSS feed.


00:16:54.700 --> 00:16:58.620
I want to have my API,


00:16:58.620 --> 00:17:01.500
some API client that is not on my machine


00:17:01.500 --> 00:17:03.860
like a mobile app or some other,


00:17:03.860 --> 00:17:05.500
think if this, then that,


00:17:05.500 --> 00:17:06.780
or one of those types of things.


00:17:06.780 --> 00:17:08.540
All those can just come back right in


00:17:08.540 --> 00:17:10.620
'cause you always have this public address available,


00:17:10.620 --> 00:17:11.660
which I think is pretty cool.


00:17:11.660 --> 00:17:12.500
- That's pretty cool.


00:17:12.500 --> 00:17:15.300
- Yeah, so if that sounds useful, people can check it out.


00:17:15.300 --> 00:17:16.140
- Oh man.


00:17:16.140 --> 00:17:18.640
- Okay, so I was just thinking, I wonder if random address,


00:17:18.640 --> 00:17:20.380
'cause like I need another URL


00:17:20.380 --> 00:17:21.600
that I'm not doing anything with,


00:17:21.600 --> 00:17:24.400
but I was wondering if random address was taken


00:17:24.400 --> 00:17:26.520
and random address is taken.


00:17:26.520 --> 00:17:27.720
- Is random addresses?


00:17:27.720 --> 00:17:30.360
(laughing)


00:17:30.360 --> 00:17:31.860
- No, we have enough.


00:17:31.860 --> 00:17:35.420
I've got several that I'm not using.


00:17:35.420 --> 00:17:36.440
- Yeah, that's awesome.


00:17:36.440 --> 00:17:37.360
All right, cool.


00:17:37.360 --> 00:17:38.680
Anyway, people can check this out


00:17:38.680 --> 00:17:41.000
if they are doing a lot with ngrok.


00:17:41.000 --> 00:17:43.360
So by the way, one thing that I think would be interesting,


00:17:43.360 --> 00:17:46.180
I didn't see in the docs whether or not this is easy,


00:17:46.180 --> 00:17:48.320
possible, impossible, whatever.


00:17:48.320 --> 00:17:50.480
One of the things you can do is you can set it up


00:17:50.480 --> 00:17:54.380
so that this random address is repeatable.


00:17:54.380 --> 00:17:55.640
Otherwise, if you just rerun it,


00:17:55.640 --> 00:17:56.720
you'll get a new random address,


00:17:56.720 --> 00:17:58.420
which you gotta keep typing in


00:17:58.420 --> 00:18:00.520
by doing like subdomain type things and stuff.


00:18:00.520 --> 00:18:01.640
If you've got a paid account,


00:18:01.640 --> 00:18:04.180
I don't know if it's possible to have it do that or not,


00:18:04.180 --> 00:18:06.280
but it would be cool if you could make it random,


00:18:06.280 --> 00:18:07.700
but not completely random.


00:18:07.700 --> 00:18:08.820
So anyway.


00:18:08.820 --> 00:18:10.800
- Not completely, just random once.


00:18:10.800 --> 00:18:13.080
- Yeah, random once, and let's stick with that for a while.


00:18:13.080 --> 00:18:15.520
All right, what do you got for our last one?


00:18:15.520 --> 00:18:17.800
- I want to talk about async.


00:18:17.800 --> 00:18:21.280
So Will McGugan wrote an article called


00:18:21.280 --> 00:18:23.600
No Async with Python.


00:18:23.600 --> 00:18:25.320
No async, async.


00:18:25.320 --> 00:18:30.320
And that confused me, but it's a really well-written article.


00:18:30.320 --> 00:18:35.080
There's times where if you want to take advantage of async,


00:18:35.080 --> 00:18:38.200
you kind of have to have async all the way up


00:18:38.200 --> 00:18:39.500
and down the call stack, right?


00:18:39.500 --> 00:18:42.960
Or you maybe, that's what it seems like at least,


00:18:42.960 --> 00:18:45.080
to make sure this all works.


00:18:45.080 --> 00:18:48.520
But, and so that's actually what I guess Textual did


00:18:48.520 --> 00:18:50.940
at one point is made, asynced all the things,


00:18:50.940 --> 00:18:55.000
but Textual now is async optional.


00:18:55.000 --> 00:18:57.840
And so this article discusses how they do that.


00:18:57.840 --> 00:19:02.440
And the first part is if you're passing in a callback to,


00:19:02.440 --> 00:19:04.520
if you're providing a mechanism for somebody


00:19:04.520 --> 00:19:07.240
to pass a callback in, and that callback can,


00:19:07.240 --> 00:19:09.760
you want it to be either just a normal function


00:19:09.760 --> 00:19:11.000
or an async function,


00:19:11.000 --> 00:19:15.180
He's utilizing the await me maybe pattern


00:19:15.180 --> 00:19:17.820
that he borrowed from Simon Willison.


00:19:17.820 --> 00:19:21.120
So Simon Willison wrote about this a couple of years ago


00:19:21.120 --> 00:19:24.300
and he shows, scroll almost to the bottom.


00:19:24.300 --> 00:19:26.620
There's this, basically there's a way to,


00:19:26.620 --> 00:19:29.600
you have an async function and it calls.


00:19:29.600 --> 00:19:32.620
So the caller is async and you're calling something


00:19:32.620 --> 00:19:34.380
that could be either async or not.


00:19:34.380 --> 00:19:37.000
And you just call something and check to see


00:19:37.000 --> 00:19:40.060
if it's a coroutine and then await it or don't await it.


00:19:40.060 --> 00:19:43.380
And that's pretty much what Will is showing,


00:19:43.380 --> 00:19:46.340
is inspect the callback,


00:19:46.340 --> 00:19:49.060
inspect the result to see if it's awaitable or not.


00:19:49.060 --> 00:19:50.560
Doing it a little bit different method,


00:19:50.560 --> 00:19:52.460
but similar sort of effect.


00:19:52.460 --> 00:19:54.160
So that's neat.


00:19:54.160 --> 00:19:57.180
So you can provide a mechanism to add a callback


00:19:57.180 --> 00:19:59.380
that could be async or not, optional.


00:19:59.380 --> 00:20:02.180
But the other part around is,


00:20:02.180 --> 00:20:05.460
if you're providing an async service


00:20:05.460 --> 00:20:08.780
that could be called in either an async or non-async,


00:20:08.780 --> 00:20:10.540
you want it to be called by anybody.


00:20:10.540 --> 00:20:13.240
Because sometimes, like he gives an example


00:20:13.240 --> 00:20:18.060
of mounting a new widget into textual.


00:20:18.060 --> 00:20:20.140
The caller might want to care,


00:20:20.140 --> 00:20:22.300
might care about when that's actually done.


00:20:22.300 --> 00:20:23.740
So they might wanna wait for that.


00:20:23.740 --> 00:20:26.100
But they might not, they might just like keep going


00:20:26.100 --> 00:20:29.220
because apparently textual handles it all correctly anyway.


00:20:29.220 --> 00:20:31.680
They won't let something happen.


00:20:31.680 --> 00:20:34.100
But the caller might not care about when it's done.


00:20:34.100 --> 00:20:38.520
So to be able to allow both async and non-async callers


00:20:38.520 --> 00:20:42.940
to call an async method, that's a little bit yuckier code,


00:20:42.940 --> 00:20:43.920
but he provides it.


00:20:43.920 --> 00:20:48.700
So there's this class, this await mount option.


00:20:48.700 --> 00:20:51.180
So there's, I'm not gonna walk through all this code,


00:20:51.180 --> 00:20:53.100
but basically there's a way to do it,


00:20:53.100 --> 00:20:56.540
and Will has it, has the method to allow you to have.


00:20:56.540 --> 00:20:59.480
And I think that's kind of neat to be able to provide


00:20:59.480 --> 00:21:01.900
services and APIs that can be called


00:21:01.900 --> 00:21:05.460
both in async and non-async ways.


00:21:05.460 --> 00:21:07.980
Now, hopefully, this still is kind of ugly,


00:21:07.980 --> 00:21:11.820
So hopefully as a community, we can come up with a little bit cleaner solution, but at


00:21:11.820 --> 00:21:13.380
least there's a solution.


00:21:13.380 --> 00:21:15.020
So it's kind of nice.


00:21:15.020 --> 00:21:16.820
Yeah, Will did a nice job of this.


00:21:16.820 --> 00:21:22.420
And I think it's really a huge benefit that Textual has the ability to be async, but doesn't


00:21:22.420 --> 00:21:23.820
force you to be async.


00:21:23.820 --> 00:21:27.460
Because if you're already writing async code, you would like it to be because it's a benefit.


00:21:27.460 --> 00:21:30.400
You can do more in parallel, be more responsive.


00:21:30.400 --> 00:21:35.020
But if it means I have to take my non-async code and now convert the whole thing to know


00:21:35.020 --> 00:21:37.180
about some of the parts of it being async,


00:21:37.180 --> 00:21:38.480
well, that's a hassle.


00:21:38.480 --> 00:21:40.720
And I think one of the things that drives me nuts


00:21:40.720 --> 00:21:42.220
about Python's async,


00:21:42.220 --> 00:21:45.680
there's a few little things that just make me crazy about it.


00:21:45.680 --> 00:21:49.100
It's like, well, it's so close to awesome, right?


00:21:49.100 --> 00:21:50.260
And much of it is awesome.


00:21:50.260 --> 00:21:52.860
But for example, if I have,


00:21:52.860 --> 00:21:55.600
if I'm in a function and I want to say,


00:21:55.600 --> 00:21:57.700
here's some async code, I want to just run it here.


00:21:57.700 --> 00:21:59.860
So for example, async IO, you know,


00:21:59.860 --> 00:22:02.860
get event loop, loop.run sort of thing,


00:22:02.860 --> 00:22:04.700
or just async IO.run to complete.


00:22:04.700 --> 00:22:07.940
If it's already being called within an async function


00:22:07.940 --> 00:22:09.740
with some other event loop,


00:22:09.740 --> 00:22:11.020
and you don't know about it,


00:22:11.020 --> 00:22:12.900
under certain times it'll crash and say,


00:22:12.900 --> 00:22:14.860
"There's already an event loop," or "There is no event loop."


00:22:14.860 --> 00:22:16.620
You're like, "Well, give me,


00:22:16.620 --> 00:22:19.180
if I don't have one, give me one.


00:22:19.180 --> 00:22:20.740
If there is one, just give me that.


00:22:20.740 --> 00:22:22.580
I don't care. I just need to run something async."


00:22:22.580 --> 00:22:24.060
There's always this weird,


00:22:24.060 --> 00:22:25.780
I'm not really sure what state I am,


00:22:25.780 --> 00:22:27.020
and if I get it wrong,


00:22:27.020 --> 00:22:29.820
then it crashes and I was like, "Ah."


00:22:29.820 --> 00:22:33.300
I think that makes it challenging to go.


00:22:33.300 --> 00:22:37.860
This part, we're just going to isolate off the async, which


00:22:37.860 --> 00:22:39.900
it sounds like Will did here, which is cool.


00:22:39.900 --> 00:22:41.340
So that's really excellent.


00:22:41.340 --> 00:22:42.420
Yeah.


00:22:42.420 --> 00:22:45.940
Really quickly here, too, I've had a couple of shots


00:22:45.940 --> 00:22:47.340
at this myself as well.


00:22:47.340 --> 00:22:49.420
Nothing I've published really very much


00:22:49.420 --> 00:22:52.740
in terms of what Will's doing or what Simon talked about.


00:22:52.740 --> 00:22:57.020
But for example, on FastAPI Chameleon and the Jinja


00:22:57.020 --> 00:23:00.900
equivalent, let's you just put a decorator on top of a FastAPI


00:23:00.900 --> 00:23:05.540
function and then it returns the HTML view of that and stuff.


00:23:05.540 --> 00:23:10.500
But those FastAPI functions, they can be synchronous or they can be asynchronous.


00:23:10.500 --> 00:23:15.540
And so what it has to do is it has to say, is this function a coroutine?


00:23:15.540 --> 00:23:18.580
Okay, the decorator has to return also an async one.


00:23:18.580 --> 00:23:21.860
Otherwise, when you say async and it becomes not async, that's wrong.


00:23:21.860 --> 00:23:23.940
But if it's async one, you can't return the async, right?


00:23:23.940 --> 00:23:27.060
Like, so you got to juggle this a lot, which is kind of a pain.


00:23:27.060 --> 00:23:30.340
And then the other one, I created this thing, which I put up just as a gist,


00:23:30.340 --> 00:23:33.220
that like just lets you say this async function,


00:23:33.220 --> 00:23:37.060
we're going to run it in a way that won't have a conflicting event loop complaint


00:23:37.060 --> 00:23:40.580
by constantly managing the background thread and just pushing the work over there


00:23:40.580 --> 00:23:42.180
and pulling the results back.


00:23:42.180 --> 00:23:43.940
So yeah, it's interesting.


00:23:43.940 --> 00:23:46.420
But yeah, that's a cool article.


00:23:46.420 --> 00:23:46.920
Yeah.


00:23:46.920 --> 00:23:49.940
Do you remember the "Call Me Maybe" song?


00:23:49.940 --> 00:23:51.460
"Call Me Maybe."


00:23:51.460 --> 00:23:52.020
Yeah, I do.


00:23:52.020 --> 00:23:52.520
Yeah.


00:23:52.520 --> 00:23:57.540
So Chris May added, "Hey, I just defined you and this may be async,


00:23:58.740 --> 00:24:00.740
But here's my variable, await me maybe.


00:24:00.740 --> 00:24:01.740
Yeah, so nice.


00:24:01.740 --> 00:24:03.740
>> Well done, Chris.


00:24:03.740 --> 00:24:05.740
>> Well done.


00:24:05.740 --> 00:24:07.740
>> I love it. I love it.


00:24:07.740 --> 00:24:09.740
Well, I don't have any extras, Brian. You got any?


00:24:09.740 --> 00:24:11.740
>> I do. We'll try to make them quick, though.


00:24:11.740 --> 00:24:13.740
So PyPI has a blog now.


00:24:13.740 --> 00:24:15.740
Oh, let's pop over to here.


00:24:15.740 --> 00:24:17.740
PyPI has a blog now.


00:24:17.740 --> 00:24:19.740
So anyway, go check it out.


00:24:19.740 --> 00:24:21.740
There's a welcome article.


00:24:21.740 --> 00:24:23.740
So that's nice.


00:24:23.740 --> 00:24:24.740
Neat.


00:24:24.740 --> 00:24:26.740
And then, okay, so another extra.


00:24:26.740 --> 00:24:27.940
Apparently a docker.


00:24:27.940 --> 00:24:32.940
No, they're laying off plans of charging people for the free team plan,


00:24:32.940 --> 00:24:37.040
which is kind of a bummer for people like me that paid for it anyway.


00:24:37.040 --> 00:24:39.340
But, you know, anyway.


00:24:39.340 --> 00:24:40.940
So that's cool.


00:24:40.940 --> 00:24:42.540
Maybe I won't have to pay next year.


00:24:42.540 --> 00:24:45.940
I guess they're offering refunds or something, but I'll look into it.


00:24:45.940 --> 00:24:47.440
I guess there must have been a big backlash.


00:24:47.440 --> 00:24:48.740
I haven't been tracking this, but...


00:24:48.740 --> 00:24:49.340
Oh, yeah.


00:24:49.340 --> 00:24:53.240
I mean, like, it's been a scramble all over the place of people


00:24:53.240 --> 00:24:59.080
because there's sometimes it's a very minimal interaction with it and then suddenly we have


00:24:59.080 --> 00:25:02.760
to pay for it and you got to figure out how many users and how many seats and all that sort of


00:25:02.760 --> 00:25:07.800
stuff and yeah or if you want to use it without so if you if you want to use it without the


00:25:07.800 --> 00:25:14.280
user interface you can use it for free but if you like people asking are are you using it yes we are


00:25:14.280 --> 00:25:19.400
because we debug with it and everything so so i'm glad they're backing off i still want to i


00:25:19.400 --> 00:25:21.800
I mean, of course, it's a great service.


00:25:21.800 --> 00:25:23.800
They should be able to make money somehow,


00:25:23.800 --> 00:25:25.400
but there should be.


00:25:25.400 --> 00:25:26.200
So it's good news.


00:25:26.200 --> 00:25:27.960
(laughs)


00:25:27.960 --> 00:25:31.720
I only, the only thing left I have is a joke.


00:25:31.720 --> 00:25:33.960
Do you want to do mine first or yours first?


00:25:33.960 --> 00:25:35.080
- Let's hear yours first.


00:25:35.080 --> 00:25:35.880
- Okay.


00:25:35.880 --> 00:25:38.680
It's just sort of, I was looking up,


00:25:38.680 --> 00:25:41.240
I was looking up some documentation for pytest-cov


00:25:41.240 --> 00:25:44.120
and noticed at the bottom,


00:25:44.120 --> 00:25:45.720
so there's a, there's mark,


00:25:45.720 --> 00:25:49.000
it provides a no cover marker, which is nice.


00:25:49.000 --> 00:25:54.600
so you can say don't cover this test. And then there's a fixture. You can also use that as a


00:25:54.600 --> 00:25:58.920
fixture. But then there's also the no cover fixture, but there's a cove fixture, which,


00:25:58.920 --> 00:26:03.640
why would you use that? Well, it says for reasons that no one can remember,


00:26:03.640 --> 00:26:08.440
there is a cove fixture that provides access to the underlying coverage in an instance.


00:26:08.440 --> 00:26:13.560
Some say this is disguised as a foot gun and should be removed. And some things,


00:26:13.560 --> 00:26:17.160
some think mysteries make life more interesting and it should be left alone.


00:26:18.280 --> 00:26:21.200
>> I love finding stuff like that in documentation.


00:26:21.200 --> 00:26:23.520
>> Some think mysteries make life more interesting.


00:26:23.520 --> 00:26:26.120
Indeed, they do.


00:26:26.120 --> 00:26:27.800
>> All right.


00:26:27.800 --> 00:26:29.520
>> I got a quick one for you as well.


00:26:29.520 --> 00:26:32.640
This one, you knew an XKCD was coming.


00:26:32.640 --> 00:26:35.400
Good reference earlier. This has to do with


00:26:35.400 --> 00:26:38.000
some deep thinking into how to make


00:26:38.000 --> 00:26:41.480
your code last so long that it becomes legacy code,


00:26:41.480 --> 00:26:43.160
and people can use it for a long time,


00:26:43.160 --> 00:26:45.320
and maybe even curse its name a little bit.


00:26:45.320 --> 00:26:48.620
So there's two parallel universes here.


00:26:48.620 --> 00:26:51.960
On one, this woman just wrote this code.


00:26:51.960 --> 00:26:54.620
She says, "It took some extra work to build,


00:26:54.620 --> 00:26:57.520
but now we're able to use it for all of our future projects."


00:26:57.520 --> 00:26:58.600
And the caption for that is,


00:26:58.600 --> 00:27:00.760
"How to ensure your code is never reused."


00:27:00.760 --> 00:27:03.340
(both laughing)


00:27:03.340 --> 00:27:06.700
The other alternate world is, "Let's not overthink it.


00:27:06.700 --> 00:27:09.880
If this code is still in use that far in the future,


00:27:09.880 --> 00:27:10.740
we'll have bigger problems.


00:27:10.740 --> 00:27:13.520
How to ensure that your code lives forever."


00:27:13.520 --> 00:27:14.880
- Yeah.


00:27:14.880 --> 00:27:19.840
The hover is surely no one, everyone will recognize how flexible and useful this architecture


00:27:19.840 --> 00:27:20.840
is.


00:27:20.840 --> 00:27:24.200
Spend a huge amount of effort painstakingly preserving and updating this garbage I wrote


00:27:24.200 --> 00:27:25.200
in 20 minutes.


00:27:25.200 --> 00:27:26.200
Yeah.


00:27:26.200 --> 00:27:30.160
Well, I mean, it's, there's so many examples of that, isn't there?


00:27:30.160 --> 00:27:31.160
I mean, oh yeah.


00:27:31.160 --> 00:27:32.160
Yeah.


00:27:32.160 --> 00:27:34.560
I mean, internally there's tons.


00:27:34.560 --> 00:27:38.400
There's like, oh, there's this, throw this thing together, build script or whatever.


00:27:38.400 --> 00:27:40.760
And it's just, we'll rewrite it later.


00:27:40.760 --> 00:27:43.080
10 years later, we haven't rewritten it.


00:27:43.080 --> 00:27:44.080
Things like that.


00:27:44.080 --> 00:27:47.820
I mean, flask was like a really quick hack, wasn't it?


00:27:47.820 --> 00:27:49.720
Oh, like a joke at first or something.


00:27:49.720 --> 00:27:51.380
I think it was an April's Fool's thing.


00:27:51.380 --> 00:27:52.320
Yeah, I think so.


00:27:52.320 --> 00:27:59.420
Anyway, and the the other side is the lesson that I think people should learn


00:27:59.420 --> 00:28:02.520
is planning on reuse is just a mistake.


00:28:02.520 --> 00:28:07.820
And I've I've been in many, many design meetings where it's like,


00:28:07.820 --> 00:28:11.960
let's not let's not plan to six years out into the future on this.


00:28:11.960 --> 00:28:13.020
This that's ridiculous.


00:28:13.020 --> 00:28:24.720
We don't even know because I've also seen people plan for it and it is reused and it is maintained, but the things that you thought you were going to need to be variable are not the things that really need to change in the future.


00:28:24.720 --> 00:28:25.660
It's something else.


00:28:25.660 --> 00:28:30.080
So yeah, somewhere in the middle there lives a let's not overthink this, get it out there.


00:28:30.080 --> 00:28:32.080
Oh, let's take a moment and refactor it.


00:28:32.080 --> 00:28:36.000
So it's like more reasonable in the way we now know it needs to be carry on.


00:28:36.000 --> 00:28:41.820
So my advice, keep, keep the interface simple, keep it minimal, document it and test it.


00:28:42.020 --> 00:28:43.980
And then if it grows, great.


00:28:43.980 --> 00:28:45.380
So yeah, excellent.


00:28:45.380 --> 00:28:45.900
Thanks for that.


00:28:45.900 --> 00:28:46.860
That's funny.


00:28:46.860 --> 00:28:47.860
Yeah, for sure.


00:28:47.860 --> 00:28:49.460
And thanks, everybody, for showing up.


00:28:49.460 --> 00:28:51.620
And thanks, Michael, again, for showing up.

