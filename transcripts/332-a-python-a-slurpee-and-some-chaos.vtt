WEBVTT

00:00:00.001 --> 00:00:04.620
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.620 --> 00:00:12.620
your earbuds. This is episode 332, recorded Tuesday, April 18th, 2023. I'm Michael Kennedy.

00:00:12.620 --> 00:00:13.980
And I am Brian Okken.

00:00:13.980 --> 00:00:19.020
And this episode is brought to you by InfluxDB from Influx Data. We will tell you more about them

00:00:19.020 --> 00:00:25.840
later. Connect with us over on Mastodon. We're all on Fosstodon, at Mkennedy, @brianokken,

00:00:25.840 --> 00:00:31.240
and at Python Bytes. And if you want to be part of the live show, pythonbytes.fm/live.

00:00:31.240 --> 00:00:37.860
Crush that bell and you'll get notified when we go live, usually Tuesday, 11 a.m. Pacific time,

00:00:37.860 --> 00:00:38.540
like it is now.

00:00:38.540 --> 00:00:42.680
Well, just a reminder that I think it's really important for people to subscribe because

00:00:42.680 --> 00:00:50.120
sometimes it's not at Tuesday at 11, usually, but sometimes it's not. So get notified. First,

00:00:50.120 --> 00:00:56.060
I want to talk about, I don't know, H-U-A-K. It's a project. I think it's HWAC.

00:00:56.060 --> 00:00:56.820
HWAC?

00:00:56.820 --> 00:00:57.800
I would have guessed HWAC.

00:00:57.800 --> 00:00:58.240
Yeah.

00:00:58.240 --> 00:00:58.880
HWAC.

00:00:58.880 --> 00:01:06.860
HWAC? I'm not sure. But it was suggested to us by Owen on Mastodon. So thank you, Owen.

00:01:06.860 --> 00:01:16.000
And I gave a look at this. So this HWAC is a Python package manager written in Rust. So we've got a lot

00:01:16.000 --> 00:01:22.000
of tools in Python now getting written in Rust. And I think it's cool. I mean, why not?

00:01:22.000 --> 00:01:29.960
So anyway, it's inspired by Cargo. And actually, so my first, I've tried this twice so far. And

00:01:29.960 --> 00:01:36.800
my first take on it was not as, was sort of lukewarm, but I tried it again today. And there's

00:01:36.800 --> 00:01:44.300
some really cool stuff here. So I want to like highlight a few things. There's some decent

00:01:44.300 --> 00:01:49.240
documentation, but it's just, it's just the early stages of the project. I don't know how

00:01:49.240 --> 00:01:54.000
old it is, but they have a disclaimer that it's in an experimental state. But I think there's

00:01:54.000 --> 00:01:59.120
a bunch of it that's already quite usable. You can, it's just a pip install, but it installs

00:01:59.120 --> 00:02:04.980
the Rust tools and stuff with it. And you can create a new project and init a project. And

00:02:04.980 --> 00:02:10.880
that's where like the people are picky about what goes in your project Toml. So, or PyProject

00:02:10.880 --> 00:02:16.880
Toml. And I am picky also. So it isn't, the init isn't quite exactly what I would want,

00:02:16.880 --> 00:02:22.060
but it's pretty good. So it's a, it's a decent mix where it's initializing, but there's so much

00:02:22.060 --> 00:02:26.340
more you can do. So if I go to the, let's go to the main documentation. These are all the

00:02:26.340 --> 00:02:26.540
workflows.

00:02:26.540 --> 00:02:33.080
I just want to comment on something right there. Notice the walk distinguishes between library and

00:02:33.080 --> 00:02:38.820
application, like projects, projects default to library type, but you can pass a --app

00:02:38.820 --> 00:02:44.980
flag. And I think that is pretty excellent because so, so many of these tools, they either have a,

00:02:44.980 --> 00:02:50.780
a tendency for, you know, like hip ENV seems to have a tendency for apps where some of the others

00:02:50.780 --> 00:02:55.980
have tendencies for libraries and you don't really want to say, well, my tool can only be

00:02:55.980 --> 00:03:00.980
used for building libraries, but not apps, right? Like pinning specific versions versus greater than

00:03:00.980 --> 00:03:05.820
type of versions and that, that kind of stuff in your file. So I think that that's a cool aspect

00:03:05.820 --> 00:03:06.640
they've considered here.

00:03:06.640 --> 00:03:11.740
It is. And I'm, I'm, I'll be curious to know what, what that, what that affects,

00:03:11.740 --> 00:03:17.800
what it affects downstream. So we'll have to play with that. There's even like, so apparently there's

00:03:17.800 --> 00:03:25.580
a no VCS flag so that you can generate projects without get, which is cool, but the assumption is

00:03:25.580 --> 00:03:29.660
it's going to be get. And the assumption is it's a, well, right. You said assumption is a library,

00:03:29.660 --> 00:03:36.320
but it can, can do applications too. Nice. So the, yeah, there's, so things like,

00:03:36.320 --> 00:03:41.860
once you have it initialized, there's other stuff that I didn't even think that a workflow tool would

00:03:41.860 --> 00:03:48.160
be good for. But this is pretty cool. Like adding a dependency. I know poetry does this sort of a thing

00:03:48.160 --> 00:03:53.520
where you can say, you know, you know, add some dependency and it adds it to your PI project,

00:03:53.520 --> 00:03:59.040
Toml. This does that, but it's, it's nice that it's a, I don't know. It's just sort of the workflow

00:03:59.040 --> 00:04:06.180
seems nicer to me. You can activate a virtual environment, even if you didn't create it with this

00:04:06.180 --> 00:04:11.800
tool. just pretty nice. you can use, I'm going to go through the list. The list is pretty

00:04:11.800 --> 00:04:17.620
big. you can add a dependency. You can build your project in it. I tried the build and it, it

00:04:17.620 --> 00:04:22.460
builds it. It like creates a new virtual environment and builds it in a fresh virtual environment. So

00:04:22.460 --> 00:04:27.080
that's a really clean way. It's like building with talks almost. it's a real clean way to build.

00:04:27.160 --> 00:04:32.780
It's kind of cool. completion said generating a shell completion. I'm not sure I

00:04:32.780 --> 00:04:37.580
need that, but oh, well, cleaning everything when you're working with projects, sometimes you

00:04:37.580 --> 00:04:43.680
just have tons of stuff around. So a clean option is pretty nice. linting and fixing linting and

00:04:43.680 --> 00:04:48.120
fixing lints. And so I tried this. I like, I'm like, okay, I have this new project, tried linting.

00:04:48.160 --> 00:04:53.040
And at first, one of the things that did it installed, rough, right off the bat

00:04:53.040 --> 00:04:59.840
and then ran it, which is cool. Oh, the other thing I thought was pretty neat when I added

00:04:59.840 --> 00:05:05.680
something. So I added pie test to a project and that added pie test to the dependency list, but it also

00:05:05.680 --> 00:05:11.280
installed it in my virtual environment. It's like, so it figures you don't have it yet. Let's install

00:05:11.280 --> 00:05:16.020
it. So there's a whole bunch of these things like, publishing. so it's kind of a, it's kind

00:05:16.020 --> 00:05:21.720
of a poetry like thing, but if poetry doesn't really float your boat, maybe this does.

00:05:21.720 --> 00:05:26.420
most of this works for me and actually, to be honest, the stuff I've worked with so far,

00:05:26.420 --> 00:05:33.700
I think this is as, this is as close as, as reading my mind as any, workflow tool has

00:05:33.700 --> 00:05:38.280
gotten so far. So this is pretty cool, pretty close to what I was thinking about as a cool thing,

00:05:38.280 --> 00:05:45.580
even lists Python versions. So if you say, walk, I got to understand the name

00:05:45.580 --> 00:05:50.180
because my brain, even if I don't talk about it, my brain needs to know what to call it.

00:05:50.180 --> 00:05:55.680
and, so if you say Python list, it'll list all the Python versions on your, on your machine

00:05:55.680 --> 00:06:00.660
that it can find. So it's kind of cool. Yeah. Cool. It also has update to update the project's

00:06:00.660 --> 00:06:05.260
dependencies, which is pretty neat, which probably the pin, pin numbers and stuff like kind of like

00:06:05.260 --> 00:06:10.680
pip-tools, pip dash compile. Yeah. I tried update first and I said, you don't have any dependencies

00:06:10.680 --> 00:06:16.460
yet. So I'm like, okay, well I'll add some dependencies. So yeah, nice. Pretty cool. Oh,

00:06:16.460 --> 00:06:20.920
yeah. I can get behind checking this out. This looks pretty neat. And it's kind of a theme. It's

00:06:20.920 --> 00:06:25.140
going to be a bit of a theme on this show with what I got coming up as well. Although we didn't

00:06:25.140 --> 00:06:30.120
coordinate this. It's, it is, painful out there, by the way, just has a bit of a nightmare. It's about

00:06:30.120 --> 00:06:36.680
pre-force when here's no get that could also go for source safe or any of these other types of

00:06:36.680 --> 00:06:41.920
systems that like lock a file, you know, the centralized version control. Someone locks a

00:06:41.920 --> 00:06:44.700
file cause they're editing it. Then they go on vacation. That's always a good time.

00:06:44.700 --> 00:06:51.520
Yeah. Yeah. The, the no get part is, I it's important to me for somebody trying

00:06:51.520 --> 00:06:56.420
stuff out because if I'm just trying a bunch of stuff out, playing with a project,

00:06:56.420 --> 00:07:00.440
sometimes I want to see how the whole build and the whole workflow works without actually

00:07:00.440 --> 00:07:06.640
setting up a get repo. Yeah. So I'm cool with it. Yeah. Anyway. Cool. All right. Well,

00:07:06.640 --> 00:07:12.300
we're not going to start with more packaging. Let's start with law. And I suppose as usual,

00:07:12.300 --> 00:07:17.040
we should say we're not lawyers. Don't take our advice, but that's certainly not mine, but I'll tell

00:07:17.040 --> 00:07:25.920
you, there's a blog post written by PSF over on pyfound.blogspot.com. It still kind of blows my mind

00:07:25.920 --> 00:07:33.900
that PSF doesn't have its own domain for blog posts. But anyway, the EU proposes proposed CRA law

00:07:33.900 --> 00:07:39.040
may have unintended consequences for the Python ecosystem. So we've talked about this before,

00:07:39.040 --> 00:07:46.540
um, just bringing awareness to what that law, the cyber resilience act, basically holding companies

00:07:46.540 --> 00:07:52.400
liable for shipping bugs and vulnerabilities in their code in Europe has for the open source ecosystem.

00:07:52.400 --> 00:07:59.340
And so the PSF has come out with a strong statement of this is broken. If you don't fix it,

00:07:59.340 --> 00:08:04.840
bad, bad things are going to happen. I'll, I'll jump ahead just a little bit before we go along.

00:08:04.840 --> 00:08:11.640
It says, let's see if I can find the phrase here. This as written would make it impossible in practice

00:08:11.640 --> 00:08:17.640
for the PSF to continue to provide Python and the PyPI ecosystem to the European public. Sound bad?

00:08:18.000 --> 00:08:25.420
That sounds kind of bad to me. Like, Hey Europe, how about we just cut Python off? Ironically, dear Python,

00:08:25.420 --> 00:08:32.980
you were invented there, but too bad because you hate it. So let's go through what the PSF says. I've already,

00:08:32.980 --> 00:08:37.800
highlighted this, some of these issues. And I think maybe even Penfield was the one that sent this over.

00:08:37.800 --> 00:08:43.200
I can't remember exactly who sent it over the beginning, but so their blog post starts out and says,

00:08:43.200 --> 00:08:49.660
the PSF has found issues that put the mission of their organization and the health of the open source

00:08:49.660 --> 00:08:57.920
software community at risk through the cyber resilience act. CRA says, if the proposed law is

00:08:57.920 --> 00:09:03.740
enforced, as it's currently written, the authors of open source components might bear legal and financial

00:09:03.740 --> 00:09:08.860
responsibility for the way their components are applied in someone else's commercial project.

00:09:08.860 --> 00:09:13.220
So let me give you something really simple, Brian, that just came to mind. Suppose I write the most

00:09:13.220 --> 00:09:20.860
awesome SQL library ever, ever. So here's what you can do. It takes, it takes a connection string and it

00:09:20.860 --> 00:09:27.320
connects to the database. Okay. And then you can issue SQL commands to that database. And I've got all the

00:09:27.320 --> 00:09:34.180
security patched. I've got, I made sure that there's no like SSL vulnerabilities and it's underlying

00:09:34.180 --> 00:09:41.380
communication. Somebody goes and writes that and they write the query select star from users where

00:09:41.380 --> 00:09:48.860
username equals quote plus inputted username, right? Yeah. That would be a SQL injection vulnerability

00:09:48.860 --> 00:09:56.040
just waiting to happen. Is it my fault? They, they concatenated user input and then pass that as trusted

00:09:56.040 --> 00:10:02.620
commands to their database. No, I can, there's no way I could have known that. And yet I, as the writer of

00:10:02.620 --> 00:10:11.300
this awesome, it's called MK SQL, whatever library, I'm now on the hook companies that are, and individuals

00:10:11.300 --> 00:10:18.160
who were, had their data exposed can now sue me directly for providing MK SQL to the world. That's

00:10:18.160 --> 00:10:26.020
what this law says. No. Yeah. And as, and, and so says the existing language makes no differentiation

00:10:26.020 --> 00:10:31.760
between independent authors who have never been paid for the supply of software and corporate tech

00:10:31.760 --> 00:10:38.240
behemoths selling products in exchange for payment to end users. We, the PSF believe that increased

00:10:38.240 --> 00:10:43.560
liability should be carefully assigned to the entity that has entered into a commercial agreement with

00:10:43.560 --> 00:10:49.440
the customer, not the open source people who built the software. Right. So that is.

00:10:49.440 --> 00:10:57.380
I like, I'm going to go, this is terrible. So somebody goes off and like, at looking at a new tool and

00:10:57.380 --> 00:11:02.940
see a typo or something and do a fix or, or even just like, you know, actually help out for a while

00:11:02.940 --> 00:11:07.160
and then move on. They're still going to be liable forever. Like this doesn't make sense.

00:11:07.160 --> 00:11:12.020
That's exactly what it says. So Brandon has the same thought that I had actually out there.

00:11:12.020 --> 00:11:16.260
So I see a new open source license coming and saying that this can be used anywhere but the EU.

00:11:16.400 --> 00:11:22.880
Yeah. I mean, I have 250 GitHub repos. Many of them are private. Some of them are public. Good chunk of

00:11:22.880 --> 00:11:27.220
them are public. And I have a couple of things on PyPI. They're all minor, nothing, you know,

00:11:27.220 --> 00:11:32.320
notable or anything, but they are being used. If this goes into effect, there's a reasonable

00:11:32.320 --> 00:11:36.660
expectation. You know what? Those small libraries, it's not even worth having them. They're just,

00:11:36.660 --> 00:11:41.560
I'm yanking it from PyPI. I haven't come to that decision, but like, why would you want to risk it?

00:11:42.360 --> 00:11:48.520
Yeah. It's a, this is, yeah. So here, that's why we put like this, this software provided as is with

00:11:48.520 --> 00:11:53.020
no warranties. Yeah. And I was actually wondering about that as well. And this kind of goes back to

00:11:53.020 --> 00:11:58.900
what Brandon said and what you just said is, doesn't the license that's a, that's also a legal agreement,

00:11:58.900 --> 00:12:07.380
right? And so when the CRA clashes with the Mozilla open source license, for example, or MIT license or

00:12:07.380 --> 00:12:14.560
whatever, it says kind of what you said, who wins, you know? So it says the PSF does not sell software.

00:12:14.560 --> 00:12:19.580
We provide, but we provide a public square for developers to download code, talk about code

00:12:19.580 --> 00:12:25.340
and host components so that other entities may include it in their software. And so specifically

00:12:25.340 --> 00:12:31.120
people may be wondering like, well, okay, it's all vague. They call out two activities that could be

00:12:31.120 --> 00:12:36.720
affected by the CRA. It says we host and provide the core Python programming language, standard library,

00:12:36.720 --> 00:12:42.520
interpreter to any who wish to use it free of charge. By the way, downloaded over 300 million

00:12:42.520 --> 00:12:47.100
times a day, which is, I had no idea it was that much. That's insane. We host the Python,

00:12:47.100 --> 00:12:55.240
we host PyPI, right? And nobody pays us to do this. None of that. But that's the way the law is

00:12:55.240 --> 00:13:02.200
stated. It's a problem. Let me see if I can find the actual. Yeah. So here we go. We believe there

00:13:02.200 --> 00:13:09.840
are two phrases in the CRA that cast too wide of a net. In article 16, a natural or legal person

00:13:09.840 --> 00:13:15.700
other than the manufacturer, the importer or distributor that carries out substantial modifications.

00:13:15.700 --> 00:13:20.360
So I guess a typo is not it. Substantial modifications of a project with digital elements

00:13:20.360 --> 00:13:25.140
shall be considered a manufacturer for the purpose of this regulation and hence held responsible.

00:13:25.200 --> 00:13:32.240
Secondly, by providing software platform through which the manufacturer monetizes other services

00:13:32.240 --> 00:13:38.660
is not specific enough, right? For example, they say, well, what if you have, you create an open

00:13:38.660 --> 00:13:43.960
source thing, you don't charge for it, but maybe you have classes on it or other types of things,

00:13:43.960 --> 00:13:49.380
right? Then in a sense, in the indirect sense, you're making money and modifying the software.

00:13:49.380 --> 00:13:56.820
So there's just, it's, it's a little bit, I don't know, it feels to me, especially this,

00:13:56.820 --> 00:14:03.600
this line above where they talk about like it, it was, we believe you should distinguish between

00:14:03.600 --> 00:14:10.220
unpaid and independent open source contributors and corporate tech behemoth selling products.

00:14:10.220 --> 00:14:17.120
To me, the GDPR felt very much like we're going after Fang. We're going after Facebook, Google,

00:14:17.120 --> 00:14:22.540
Apple, Microsoft, these big companies that are just harvesting our data reselling. I'm clearly,

00:14:22.540 --> 00:14:26.620
obviously not them, but it was, you know, targeted very much at these large organizations,

00:14:26.620 --> 00:14:33.220
but had consequences for everybody. This seems a little bit similar, right? Not exactly the same,

00:14:33.220 --> 00:14:37.220
but like, look at these huge tech companies are making billions. There's most valuable companies

00:14:37.220 --> 00:14:41.400
in the world and just, they're unleashing viruses on people and they should take, there should be some

00:14:41.400 --> 00:14:47.440
accountability. Yeah. That doesn't, that doesn't really seem to have taken into account like,

00:14:47.440 --> 00:14:52.160
oh, it could also be an extinction level event for open source in Europe. Sounds bad.

00:14:52.160 --> 00:14:57.080
Yeah. Well, I mean, and I don't know where they were coming from, but I kind of, I mean,

00:14:57.080 --> 00:15:02.880
I kind of get the idea of like, let's say for instance, the Google play store or the Apple store

00:15:02.880 --> 00:15:10.240
where, these companies are, are like provided, they're just hosting stuff written by other people,

00:15:10.240 --> 00:15:18.480
but they're taking a 30% cut or more. So it's, I think it's reasonable for customers to expect

00:15:18.480 --> 00:15:26.820
that the stuff they get is not horrible, like a virus or stealing stuff or whatever, or unintentional

00:15:26.820 --> 00:15:33.640
stealing at least. but the, that doesn't, I mean, it seems like this to the two models are the

00:15:33.640 --> 00:15:39.280
same, but they're not, we're not PSF isn't taking it there. Well, they are taking a 30% cut of free.

00:15:39.520 --> 00:15:47.520
but exactly. Yeah. Yeah. I think another area where they probably had this in mind is like

00:15:47.520 --> 00:15:52.540
hardware vendors that have a software component that just let them turn into garbage immediately.

00:15:52.540 --> 00:15:59.120
Like I've got this streaming video camera that'll tell me if something's happening on my house and

00:15:59.120 --> 00:16:04.900
within two weeks it has a vulnerability. There's no updates ever, or I get a router and after a year,

00:16:04.900 --> 00:16:09.500
it's no longer supported and it gets hacked and take over, you know, those kinds of things.

00:16:09.500 --> 00:16:16.080
Totally reasonable. Holding every open source contributor who touches software liable seems

00:16:16.080 --> 00:16:21.620
stupid. Like genuinely, I don't understand what the Eagles, yeah, I don't get it.

00:16:21.620 --> 00:16:30.720
Yeah. So, all right. That, well, anyway, not the best news, but I think it's important to let people

00:16:30.720 --> 00:16:37.680
know, right? Like, at the bottom, there is a call to action that says PSF members and Python

00:16:37.680 --> 00:16:45.140
users in Europe may wish to write to their MEP voicing their concerns about the proposed CRA law

00:16:45.140 --> 00:16:50.840
before April 26th. While amendments that will protect the public open source repositories are

00:16:50.840 --> 00:16:55.900
still being considered. So take action folks. can't really write to them cause I don't have a

00:16:55.900 --> 00:16:58.140
representative in Europe, but I hope people do.

00:16:58.140 --> 00:17:03.640
What's an MEP? I don't know. I have no idea. I'm sure it's like a congressman type of thing.

00:17:03.640 --> 00:17:08.740
And the link, that we're going to provide in the show notes does have a link that

00:17:08.740 --> 00:17:12.620
the bottom of the article has a, has a link to the, write your MEP. So.

00:17:12.620 --> 00:17:14.880
Yep. Write your MEP. Cool.

00:17:14.880 --> 00:17:19.060
All right. Members of European parliament is that acronym we're looking for.

00:17:19.600 --> 00:17:24.900
What is not trying to wipe out the open source community is our sponsor. In fact,

00:17:24.900 --> 00:17:29.780
quite the opposite. So this episode is, Python Bytes is brought to you by influx data,

00:17:29.780 --> 00:17:36.820
the makers of influx DB. Influx DB is a database purpose built for handling time series data at a

00:17:36.820 --> 00:17:43.160
massive scale for real time analytics and developers can ingest store and analyze all types of time

00:17:43.160 --> 00:17:49.220
series data metrics, events, traces in a single platform. So dear listener, let me ask you a

00:17:49.220 --> 00:17:54.040
question. How would boundless cardinality and lightning fast SQL queries impact the way that

00:17:54.040 --> 00:17:59.600
you develop real-time apps? Influx DB processes, large time series data sets and provides low latency

00:17:59.600 --> 00:18:07.580
SQL queries of not the kind with the plus name, just time series, making it a go-to choice for

00:18:07.580 --> 00:18:12.340
developers building real-time applications and seeking crucial insights for developer efficiency.

00:18:12.340 --> 00:18:18.040
It helps you create IOT analytics and cloud applications using timestamp data rapidly and

00:18:18.040 --> 00:18:23.720
at scale. Influx DB is designed to ingest millions of data points in real time with unlimited cardinality.

00:18:23.720 --> 00:18:30.340
Influx DB streamlines building once and deploying across various products and environments from the

00:18:30.340 --> 00:18:36.460
edge on-premise and to the cloud. So try it for free at pythonbytes.fm/influx DB.

00:18:36.460 --> 00:18:41.520
The link is in your podcast show notes. Thank you to influx data for supporting the show.

00:18:41.520 --> 00:18:45.940
Keeping our podcast going strong. Yeah, thank you. All right. Over to you, Brian.

00:18:45.940 --> 00:18:49.340
Well, I want to create a little chaos.

00:18:49.340 --> 00:18:55.180
Arms? I don't know. Anyway, so chaos engineering.

00:18:55.180 --> 00:18:55.760
Don't be mucking around here, man.

00:18:55.760 --> 00:19:25.740
Yeah, it's all the rage with all the Netflix kids. So chaos engineering is a style of taking down parts of your system or injecting issues into your system just to make sure that your system is resilient. There's a lot of experiment. There's a lot of books on it, articles on it. But how do you do it? What kind of tools do you use? And one of the tools is the chaos.

00:19:25.740 --> 00:19:55.720
That's toolkit that we're highlighting. Now this is suggested by the maintainer. Sylvain. And I'm not going to attempt your last name, Sylvain. But thank you for suggesting this. It's an open source project. That is that works with Python. I don't know what it's written in. But it's a I think it's Python. But I don't know. So the idea is you can run experiments against your system. And you can write those experiments in JSON or YAML files. And so you can run experiments.

00:19:55.720 --> 00:20:11.720
You can orchestrate and collaborate with people. And you can orchestrate through the code. So that's nice. It's extensible. You can build on it. It's got an open API that you can extend it. You can automate it through CI pipelines.

00:20:11.720 --> 00:20:27.280
And like I said, it's all open source. There's a whole bunch of cool stuff you can do with it. I'm just touching the surface. But one of the examples in the documentation, which I can't find right now, but I was reading the other, there's installation tutorials and references.

00:20:27.720 --> 00:20:42.680
But one of the ideas was that I'm like, you should totally, I didn't ever consider this is do an experiment where you have your system running, and then you artificially make an SSL certificate expire.

00:20:43.720 --> 00:21:11.720
How does your system deal with that? And I think that's an awesome thing to highlight, because we've all been there with like a system that we're a third party project that we're using, or our own, we think it's fine. And, and then the SSL certificate expires, and the whole thing just doesn't work for and you lose all your customers until you fix that. So testing for that is great. But there's also other things to like taking down and taking out database or region or whatever. So yeah.

00:21:11.720 --> 00:21:41.320
Yeah. And how do you unit test for that kind of stuff, right? Like, how do you unit test that the SSL certificate's no longer valid? And then it is again, you know, like that kind of stuff, that infrastructure level stuff is really hard. And chaos engineering, I think, largely originated around how do we break the cloud? So that, and then what happens to our app? Not how does our app break, but if the infrastructure pieces that our app expects to be there, if those start to go down in weird ways, like how do you

00:21:41.320 --> 00:21:42.320
survive that?

00:21:42.320 --> 00:21:48.840
Yeah, that's kind of net, I think that came out of Netflix, but maybe they weren't the original original, I certainly was popularized out of Netflix.

00:21:48.840 --> 00:21:55.540
Yeah, so some really cool stuff. And it's at your fingertips with just like a pip install, I think so.

00:21:55.540 --> 00:22:02.780
Excellent. Yes, it is 98% Python, 1% Docker file, and 1% make file. So pure Python.

00:22:02.780 --> 00:22:18.880
Yeah, yeah. So cool stuff. And lots of examples. And there's already examples there. And that's one of the ways they like people to help out is whether or not you extend the tool, extending examples for how to use it to test part of your system. I think that's pretty neat.

00:22:19.780 --> 00:22:37.740
And one of the reasons why I wanted to highlight this is a lot of chaos engineering is around large corporations, like places like Netflix or big services. But there's little guys like Michael Kennedy that's running Talk Python training and a couple podcasts. And we would all be sad if something happened.

00:22:37.780 --> 00:22:54.200
And he can't, he can't, he can't hire reams of people to, to test all this stuff. So having these tools available for, for everybody. And yeah, these things, these tools can be used for companies too. But it's, it's nice to have things like this around for people like you and me.

00:22:54.200 --> 00:23:06.780
Yeah, absolutely. Thanks. I do also see it as kind of one of these things that brings like some of the tools and techniques from really large organizations that have a team that could build up custom tools like Netflix to do this kind of stuff.

00:23:06.780 --> 00:23:19.040
You know, kind of like Docker and Kubernetes gives you crazy infrastructure DevOps abilities that used to just live at Google in places like that. Right. So it's a little bit like that for breaking things in your, in your cloud and your infrastructure.

00:23:19.040 --> 00:23:30.640
Yeah. And I definitely want to get, I think this is a perfect topic to go deep in on, on test and code. So I'm going to try to get Sylvain on the, on the show to talk about it. We can jump in deeply. So.

00:23:30.640 --> 00:23:33.080
Yeah. That sounds great. I definitely look forward to it.

00:23:33.080 --> 00:23:34.300
Well, what you got for us next?

00:23:34.300 --> 00:23:48.860
I got a pep. Now to be clear, this PEP is in draft standard and it is 12 days old. So it is not super old, but it is PEP 711. This is the tie back to what you started with Brian.

00:23:48.860 --> 00:23:59.300
Sort of a little bit of packaging and managing and deploying Python things like libraries and stuff called PyBI, a standard format for distributing Python binaries.

00:23:59.300 --> 00:24:07.460
So what that really is by Nathaniel Smith. And I'm actually going to have Nathaniel on talk Python in one and a half hours.

00:24:07.600 --> 00:24:17.480
So if you're watching the live version of this and you care about this, you can drop in on that live stream about an hour after this show ends. But if not, if you're just listening, then, you know, check out talk Python.

00:24:17.480 --> 00:24:26.480
If you want to dive into this for the, about the same timeframe. Anyway, the idea is so many of the tools that we work with, including walk.

00:24:26.480 --> 00:24:35.740
I imagine assume that Python is installed and now how do we manage dependencies? How do we manage environments? How do we isolate environments? Right.

00:24:35.740 --> 00:24:43.200
How do we update the dependencies of a given isolated environment? This is steps back a little bit and says, what if you don't have Python?

00:24:43.200 --> 00:24:49.000
What if you have the wrong version of Python? How do we get that to you? What if you could pip install Python 3.11?

00:24:49.000 --> 00:25:01.320
Oh, wait, no, pip install Python 3.12 and just express your runtime as a binary dependency, not download it, compile source like PyInv does, then takes forever.

00:25:01.320 --> 00:25:09.160
Hope that your system is set up right. But how do you, how do you get Python on your system in a way that is kind of like Python wheels?

00:25:09.160 --> 00:25:19.780
So have a bunch of prebuilt binary versions of Python on PyPI. So you literally install it over that. That's the proposal, right? That's the idea.

00:25:19.780 --> 00:25:28.760
So the abstract is short and sweet. It says like wheels, but for prebuilt Python, instead of a prebuilt Python package, it's a prebuilt Python interpreter.

00:25:29.260 --> 00:25:33.660
Okay. So that is pretty interesting. This is the end goal.

00:25:33.660 --> 00:25:34.280
I want this.

00:25:34.280 --> 00:25:38.320
I want it too. And I'll bring up a discuss thread here in just a second.

00:25:38.320 --> 00:25:45.580
End goal pypi.org has prebuilt packages for all Python versions of on all popular platforms.

00:25:45.580 --> 00:25:48.660
So automated tools can easily grab them and set them up. Right.

00:25:49.060 --> 00:25:53.480
So wouldn't it be cool if we could just do that for the Python runtime itself?

00:25:53.480 --> 00:26:02.440
That would also mean, I imagine, that you wouldn't have to be an administrator or have access to run sudo on your system.

00:26:02.440 --> 00:26:04.500
Well, I hope, but maybe.

00:26:04.500 --> 00:26:08.300
Because you can pip install --user, right?

00:26:08.300 --> 00:26:08.580
Oh, yeah.

00:26:08.580 --> 00:26:12.900
So you could just do that to like a local location because you get this isolated little binary.

00:26:13.660 --> 00:26:18.460
And Jeremy Page out there points out that PyBI exists now. It can be installed with the POSI tool.

00:26:18.460 --> 00:26:24.320
So yes, indeed. Jumping over to the announcement, PyBI and POSI by Nathaniel Smith.

00:26:24.320 --> 00:26:31.980
So this is a, I would, looking in from the outside, I would say this is probably a proof of concept level version of this.

00:26:31.980 --> 00:26:40.420
But really, you know, for the PEP to be accepted and for people really to leverage it, I would imagine, you know, you probably need Python.

00:26:40.740 --> 00:26:46.540
Like the full buy-in of the Python folks themselves, right? The core developers and so on, right?

00:26:46.540 --> 00:26:52.140
But anyway, so much like walk POSI, P-O-S-I, POSI, POSI, I don't know.

00:26:52.140 --> 00:26:59.740
That tool would allow you to run CLI commands that initialize your system with the right version.

00:26:59.740 --> 00:27:07.980
Not so much your system, but a particular localized, kind of like virtual environment, even though it doesn't use virtual environment, but give you one of these, right?

00:27:08.080 --> 00:27:18.240
So it's riffing on Kushal's PEP582, which is the Dunder PyPackages folder.

00:27:18.240 --> 00:27:24.980
Instead of having virtual environments, it could just be kind of like a NodePackages equivalent, which I still would like to see that.

00:27:24.980 --> 00:27:25.760
That would be nice.

00:27:26.000 --> 00:27:40.860
So he said, whoops, come back here, said, got me thinking historically, tools that have started with the assumption that you already have Python, now you want a management, means every tool needs to be prepared to cope with every possible way of installing and managing Python.

00:27:41.260 --> 00:27:47.160
And the beginner workflows, beginner-friendly workflows, has to be the part of the interpreter, right?

00:27:47.160 --> 00:27:56.540
So you've got to install the interpreter, make sure you have the right version of Python, and then you can start using, like, let's say, Hatch or Poetry or pip-tools or whatever, right?

00:27:57.060 --> 00:28:02.700
And if your tester wants to use ToxNox, then you're on your own figuring out how to get all those interpreters installed.

00:28:02.700 --> 00:28:07.100
If you use PyNV, that compiles it from source, so that's got to work on your system.

00:28:07.100 --> 00:28:08.340
That's slow, right?

00:28:08.540 --> 00:28:13.240
But what if we went the other way around and just uploaded CPython to PyPI so you could pip install Python?

00:28:13.240 --> 00:28:16.920
So technically, pip won't work because that's part of Python, right?

00:28:16.920 --> 00:28:20.100
So that's what this POSY thing is.

00:28:20.100 --> 00:28:23.060
It lets you basically say, I want this version of Python.

00:28:23.060 --> 00:28:25.560
And you could also build out projects.

00:28:25.560 --> 00:28:31.900
So you can say, I'm going to use various packages, and I want this version of Python.

00:28:31.900 --> 00:28:37.660
And it will bundle up a thing that, when you install it, has the right version of Python and the right packages.

00:28:38.120 --> 00:28:42.400
So it's kind of a step in a pretty interesting direction, I would say.

00:28:42.400 --> 00:28:45.140
You scroll down, down, down, down.

00:28:45.140 --> 00:28:48.740
There are 71 replies in this announcement thread.

00:28:48.740 --> 00:28:53.120
But Paul Moore, one of the core developers on pip, says, this is beyond awesome.

00:28:53.120 --> 00:28:55.440
I hadn't realized you were actively working on this.

00:28:55.440 --> 00:28:56.680
That's pretty good.

00:28:56.680 --> 00:28:59.400
Frederick says, really nice to see this.

00:28:59.400 --> 00:29:03.300
The direction of the path per package is really the right direction.

00:29:04.140 --> 00:29:16.240
The fact that it requires Rust, the way it is now, it requires having Rust installed, which is kind of just like kicking the having Python installed to a different corner.

00:29:16.240 --> 00:29:19.380
You know, like, oh, you don't have to have Python installed to run this.

00:29:19.380 --> 00:29:21.420
You just have to have the Rust compiler installed.

00:29:21.420 --> 00:29:22.040
You're like, no.

00:29:22.480 --> 00:29:22.820
Why?

00:29:22.820 --> 00:29:31.180
I'm sure that you could compile a binary for a platform and hand it out and say, here's the one for macOS.

00:29:31.180 --> 00:29:34.260
As long as you have this tool on your system, you can run it.

00:29:34.260 --> 00:29:36.000
You don't need the runtime tools, right?

00:29:36.000 --> 00:29:39.120
You could distribute that and let it kind of bootstrap your system, right?

00:29:39.120 --> 00:29:39.760
I imagine.

00:29:40.760 --> 00:29:44.220
Well, yeah, so I got lost with the Posey thing.

00:29:44.220 --> 00:29:47.840
So I'll have to try to read up on this and try to understand what's going on.

00:29:47.840 --> 00:29:51.280
But I guess I don't get it.

00:29:51.280 --> 00:29:53.240
Are we not going to have Pip?

00:29:53.240 --> 00:29:54.560
We're going to have Posey instead?

00:29:54.560 --> 00:29:56.700
Or is this just a, we don't know?

00:29:56.700 --> 00:29:59.100
I need to talk to Nathaniel more about this.

00:29:59.100 --> 00:29:59.480
Okay.

00:29:59.640 --> 00:30:06.080
But from reading this announcement and reading the things, the way to think of it is kind of like Docker.

00:30:06.080 --> 00:30:06.720
Okay.

00:30:06.720 --> 00:30:12.860
So with Docker, you don't create a Docker image and then run it as a container and then decide, oh, I want to make changes.

00:30:12.860 --> 00:30:15.200
So you don't like log into the container and make changes.

00:30:15.200 --> 00:30:21.800
You just shut it down, restart it, rebuild the image with new settings, and then you rerun the container.

00:30:21.800 --> 00:30:24.800
They're a kind of real, right?

00:30:24.800 --> 00:30:25.420
Yeah.

00:30:25.420 --> 00:30:29.420
But this is some of the early phases of trying to figure out the workflows of all this and everything.

00:30:29.420 --> 00:30:30.380
So that's great.

00:30:30.380 --> 00:30:38.360
So what you would do here from what I've read is you would say, I have, I want this version of Python and these dependencies, and it has a lock file and everything.

00:30:38.360 --> 00:30:48.340
You can sort of see down here in this section, it creates a pyproject.toml that describes the environment and some aliases to run it similar as hatch environments.

00:30:48.340 --> 00:30:49.620
And then you run it.

00:30:49.620 --> 00:30:50.080
Right.

00:30:50.080 --> 00:30:54.240
And if there's some kind of change, instead of trying to actually change the environment.

00:30:54.240 --> 00:30:57.660
So there's no virtual environment, for example, there's just, here's the thing you run.

00:30:57.660 --> 00:31:00.640
You want to upgrade a request, say, it's in there.

00:31:00.640 --> 00:31:01.480
You want to upgrade requests.

00:31:01.480 --> 00:31:07.720
You just create a new one of these, a new build of this that has the updated dependency expressed in it.

00:31:07.720 --> 00:31:08.840
And then you run that again.

00:31:08.840 --> 00:31:09.580
Right.

00:31:09.880 --> 00:31:13.720
So you rebuild the environment rather than edit it.

00:31:13.720 --> 00:31:14.200
Right.

00:31:14.200 --> 00:31:16.940
So what, what role is that going back to your question?

00:31:16.940 --> 00:31:18.220
What role does pip have in that?

00:31:18.220 --> 00:31:19.120
Probably less.

00:31:19.120 --> 00:31:25.220
I'm not entirely sure, but maybe pip is involved in the building, but not in the distributing.

00:31:25.220 --> 00:31:26.040
You know what I mean?

00:31:26.080 --> 00:31:30.060
To build up the environment that you would get might, might involve pip.

00:31:30.060 --> 00:31:32.420
But anyway, it's pretty interesting.

00:31:32.420 --> 00:31:36.000
There's a bunch of comments here that people can, can check out below.

00:31:36.000 --> 00:31:38.760
And it's not universally.

00:31:38.760 --> 00:31:39.920
Absolutely.

00:31:39.920 --> 00:31:41.780
Everyone's like, yes, do this now.

00:31:42.120 --> 00:31:44.480
But most of them are like, this certainly blew my mind.

00:31:44.480 --> 00:31:47.520
Count me in on how, how we could explore to do this.

00:31:47.520 --> 00:31:52.540
And Pimple also points out like, this is somewhat related to Conda, right?

00:31:52.640 --> 00:31:57.720
So Conda is another way that people get different versions of Python and bring along the dependencies.

00:31:57.720 --> 00:32:04.140
And so there's some, some talking here about how this might work together, maybe to be something

00:32:04.140 --> 00:32:07.760
that Conda could use or how those two projects might work together.

00:32:07.760 --> 00:32:11.400
So anyway, it is a PEP 7.11.

00:32:11.400 --> 00:32:15.100
And there is this, I'm going to call it proof of concept.

00:32:15.100 --> 00:32:19.720
Maybe I'm not categorizing that right, but this proof of concept with a POSY tool to make

00:32:19.720 --> 00:32:20.140
this happen.

00:32:20.140 --> 00:32:22.260
I just realized it was 7.11.

00:32:22.540 --> 00:32:25.100
So there needs to be like a Slurpee logo for this.

00:32:25.100 --> 00:32:26.760
Yeah.

00:32:26.760 --> 00:32:29.620
I don't think PEPs generally have logos, but yeah, I certainly.

00:32:29.620 --> 00:32:31.720
Sure.

00:32:31.720 --> 00:32:35.520
I think we might just have some image art for our episode.

00:32:35.520 --> 00:32:37.360
All right.

00:32:37.360 --> 00:32:38.920
Anyway, nice, nice work.

00:32:38.920 --> 00:32:42.440
Nathaniel, talk to you soon about this, but it looks interesting.

00:32:42.440 --> 00:32:44.040
Oh, I'm looking forward to listening to that episode.

00:32:44.040 --> 00:32:44.560
Nice.

00:32:44.560 --> 00:32:45.300
Yeah.

00:32:45.300 --> 00:32:45.440
Cool.

00:32:45.440 --> 00:32:47.020
Is that it for all of our items?

00:32:47.020 --> 00:32:47.780
I believe it is.

00:32:47.780 --> 00:32:48.620
It is.

00:32:48.620 --> 00:32:49.780
Got any extras?

00:32:49.780 --> 00:32:50.940
Extras.

00:32:51.040 --> 00:32:56.760
I just want to let people know that we're going to both be, the plan is, both of us in

00:32:56.760 --> 00:32:58.420
a couple of days are going to be heading off to PyCon.

00:32:58.420 --> 00:33:03.420
And so hopefully people will see us.

00:33:03.600 --> 00:33:09.060
I think on, I think the plan is for Saturday that there's going to be a, a ask me anything

00:33:09.060 --> 00:33:11.300
thing at the PyCharm booth.

00:33:12.060 --> 00:33:16.740
And then following that, I, the current plan that things are, things may change, but the

00:33:16.740 --> 00:33:18.660
current plan is that'll be set sometime Saturday.

00:33:18.660 --> 00:33:22.500
And then also I'm going to be giving away some books.

00:33:22.500 --> 00:33:27.280
So there's going to be some, pie test books giving away and, and I'll be signing

00:33:27.280 --> 00:33:27.680
some.

00:33:27.680 --> 00:33:31.500
So if you happen to be also, if you've got one of the old copies or new copies or whatever,

00:33:31.500 --> 00:33:32.080
it doesn't matter.

00:33:32.080 --> 00:33:34.360
If you want to bring your own for me to sign, go for it.

00:33:34.580 --> 00:33:37.700
I don't know why people want me to write in their book, but sure.

00:33:37.700 --> 00:33:38.940
I'll do it.

00:33:38.940 --> 00:33:40.560
So also gotten some new stickers.

00:33:40.560 --> 00:33:43.380
I'm looking forward to giving those out.

00:33:43.380 --> 00:33:49.300
So, yeah, I don't, I don't have like, I'm not speaking, but if you see me, I'll

00:33:49.300 --> 00:33:52.580
it's fine to interrupt whatever I'm doing and ask for some stickers.

00:33:52.580 --> 00:33:58.240
So, and we will be doing some form of live Python bytes from there, which will not be

00:33:58.240 --> 00:34:01.880
at the standard time because it's over on Tuesday, not on Tuesday.

00:34:01.880 --> 00:34:04.120
It does not intersect any known Tuesday.

00:34:04.120 --> 00:34:05.940
So, yeah.

00:34:05.940 --> 00:34:07.080
So we're going to be doing that.

00:34:07.080 --> 00:34:07.900
Absolutely.

00:34:07.900 --> 00:34:10.280
I'll probably do some other podcast recording.

00:34:10.280 --> 00:34:11.400
I'll be going around.

00:34:11.400 --> 00:34:14.140
I'm also doing an ask me anything, giving away some courses.

00:34:14.140 --> 00:34:20.620
So yeah, should be a lot of fun and do that at the jet brains booth and other live events

00:34:20.620 --> 00:34:20.980
as well.

00:34:20.980 --> 00:34:26.820
So come find us and try to, we'll try to live stream, assuming that the internet is good

00:34:26.820 --> 00:34:27.320
enough there.

00:34:27.320 --> 00:34:30.180
We'll try to live stream our recording.

00:34:30.180 --> 00:34:34.420
There's the people who are not at the conference can still check that out.

00:34:34.420 --> 00:34:36.160
Well, is it joke time?

00:34:36.160 --> 00:34:37.640
Yes, it is joke time.

00:34:37.640 --> 00:34:39.240
It is definitely joke time.

00:34:39.240 --> 00:34:40.960
So, or do you have some extras?

00:34:40.960 --> 00:34:42.520
I don't, good question.

00:34:42.520 --> 00:34:43.200
I don't have any extras.

00:34:43.200 --> 00:34:45.480
I have almost have an extra, but I'm not ready.

00:34:45.480 --> 00:34:47.620
that'll be in the next, next one.

00:34:47.620 --> 00:34:48.480
So, okay.

00:34:48.480 --> 00:34:49.100
Good stuff.

00:34:50.100 --> 00:34:56.600
so this one has to do with interns here and maybe try to describe what you're seeing

00:34:56.600 --> 00:34:57.560
here in this picture, Brian.

00:34:57.560 --> 00:35:03.840
So there's, there's first off, you see like, somebody from like their balcony or something

00:35:03.840 --> 00:35:08.940
looking over at somebody else's balcony and somebody throws like some water or something

00:35:08.940 --> 00:35:09.880
out of their window.

00:35:09.880 --> 00:35:13.960
And then you pan over and there's like a, like a forest fire going.

00:35:13.960 --> 00:35:17.960
A raging Canyon fire in somewhere like California or somewhere like that.

00:35:17.960 --> 00:35:18.180
Right.

00:35:18.180 --> 00:35:19.000
Yeah.

00:35:19.120 --> 00:35:24.540
So there's, it clearly requires at least a fire truck, if not one of those airplanes

00:35:24.540 --> 00:35:25.800
that come by and drops water.

00:35:25.800 --> 00:35:30.420
So there's the water is just, you know, like a mixing bowl worth of water.

00:35:30.420 --> 00:35:36.520
And the title is intern helping senior devs fix a severe bug in production.

00:35:36.520 --> 00:35:37.820
Yeah.

00:35:37.820 --> 00:35:42.100
It's like, it's, and also the other title is that it's the effort that counts.

00:35:42.100 --> 00:35:49.000
So, and this is good and it is funny and make you laugh, but there are 43 really good comments.

00:35:49.000 --> 00:35:53.600
So there's different things that says, okay.

00:35:53.600 --> 00:35:59.100
So someone comments when I was an intern, I get paged during the night as an escalation when

00:35:59.100 --> 00:36:02.920
the senior engineers couldn't fix production because they didn't know how.

00:36:02.920 --> 00:36:03.340
Yeah.

00:36:03.340 --> 00:36:04.640
It was a crappy company.

00:36:04.640 --> 00:36:10.180
And then someone replies, plan A, check if someone supplied a solution on Stack Overflow.

00:36:10.180 --> 00:36:11.900
Plan B, it was the intern.

00:36:11.900 --> 00:36:13.180
Place the blame there.

00:36:13.180 --> 00:36:16.040
I like, but it's not water.

00:36:16.040 --> 00:36:16.780
It's gasoline.

00:36:16.780 --> 00:36:17.620
Yeah.

00:36:17.620 --> 00:36:18.180
It's not water.

00:36:18.180 --> 00:36:18.600
It's gasoline.

00:36:18.600 --> 00:36:20.420
That is actually really, really good.

00:36:20.420 --> 00:36:21.420
I love it so much.

00:36:21.420 --> 00:36:27.580
So another one follow up that is actually the intern knows way too much about the problem,

00:36:27.580 --> 00:36:29.380
probably involved in causing it.

00:36:29.380 --> 00:36:32.180
Yeah.

00:36:32.180 --> 00:36:35.540
So anyway, it's, the joke is funny.

00:36:35.540 --> 00:36:39.960
The conversations throughout the comments here on Reddit are, they're fantastic.

00:36:40.740 --> 00:36:42.540
So I encourage you to go check out that joke.

00:36:42.540 --> 00:36:42.900
Yeah.

00:36:42.900 --> 00:36:43.400
Funny.

00:36:43.400 --> 00:36:43.980
Nice.

00:36:43.980 --> 00:36:44.720
All right.

00:36:44.720 --> 00:36:47.120
Well, Brian, thanks for being here.

00:36:47.120 --> 00:36:47.860
Thanks to everyone.

00:36:47.860 --> 00:36:48.220
Thank you.

00:36:48.220 --> 00:36:52.360
Who participated in the live stream and just for showing up and listening.

00:36:52.360 --> 00:36:53.900
We really, really do appreciate it.

00:36:53.900 --> 00:36:54.280
Yeah.

00:36:54.280 --> 00:36:54.880
We do.

00:36:54.880 --> 00:36:55.320
Yep.

