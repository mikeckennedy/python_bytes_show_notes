
00:00:00.000 --> 00:00:05.460
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.460 --> 00:00:10.160
This is episode 60, recorded January 10th, 2018.


00:00:10.160 --> 00:00:10.960
I'm Michael Kennedy.


00:00:10.960 --> 00:00:11.760
And I'm Brian Okken.


00:00:11.760 --> 00:00:14.120
And we've got a bunch of stuff lined up for you as always.


00:00:14.120 --> 00:00:16.120
Before we get to it, I want to say thank you to Datadog.


00:00:16.120 --> 00:00:19.720
Datadog is sponsoring the show at pythonbytes.fm/datadog.


00:00:19.720 --> 00:00:21.720
More to say about that later.


00:00:21.720 --> 00:00:23.720
Brian, I want to know who's at nine.


00:00:23.720 --> 00:00:26.060
Who's at nine? Yes, who is at nine?


00:00:26.060 --> 00:00:32.340
Wouldn't it be awesome if you could actually just utter this question into the air and have it automatically answered for you?


00:00:32.340 --> 00:00:37.380
Yeah, well, that's the promise of Alexa and Google Home and all these home assistants, right?


00:00:37.380 --> 00:00:38.100
That's right.


00:00:38.100 --> 00:00:42.500
This came up, what was it, episode 33 of Python Bytes, actually.


00:00:42.500 --> 00:00:45.540
We talked about you brought up building an Alexa skill.


00:00:45.540 --> 00:00:49.740
And then somebody saw that and we have a link to a Twitter thread.


00:00:49.740 --> 00:00:53.860
Yeah, it was Greg Quinlan who posted that on Twitter. That's cool.


00:00:53.860 --> 00:01:00.660
Okay, well, he ran with it and he looked into programming both skills for Alexa and Google Home.


00:01:00.660 --> 00:01:04.060
And he came up with this Who's at 9 video


00:01:04.060 --> 00:01:11.660
that we have a link to and it's just I think it's hilarious. It's basically the old Who's on first routine,


00:01:11.660 --> 00:01:16.060
but done with an Alexa and a Google Home together.


00:01:16.060 --> 00:01:16.860
It's funny.


00:01:16.860 --> 00:01:20.060
Yeah, so he's got like a little dot in a


00:01:20.060 --> 00:01:24.100
a Google Home, and he activates them both and they talk to each other, right?


00:01:24.100 --> 00:01:26.100
It cracked me up. It's good.


00:01:26.100 --> 00:01:28.340
We should have like had a clip for it or something


00:01:28.340 --> 00:01:29.440
for the show, but


00:01:29.440 --> 00:01:31.440
Yeah, we should just play it. Yeah, that'd be fun.


00:01:31.440 --> 00:01:35.440
One of the things that strikes me, first of all, nice work, Greg. That's awesome.


00:01:35.440 --> 00:01:42.600
Flask ask is really pretty interesting to work with and the Flask assistant is the Google Assistant equivalent of Flask ask.


00:01:42.600 --> 00:01:45.900
It's like just ported to that API. But what's really interesting to me is


00:01:45.900 --> 00:01:47.900
the API here


00:01:47.900 --> 00:01:49.940
effectively is Flask.


00:01:49.940 --> 00:01:52.340
And I'm noticing this in lots and lots of places,


00:01:52.340 --> 00:01:53.900
like someone just sent us something


00:01:53.900 --> 00:01:56.940
that was almost a web API for the command line.


00:01:56.940 --> 00:01:59.980
But I'm noticing Flask being like the de facto API


00:01:59.980 --> 00:02:01.420
for so many things these days.


00:02:01.420 --> 00:02:04.340
- Yeah, it must just be that people are just having


00:02:04.340 --> 00:02:09.340
it's easier to set up a small Flask application


00:02:09.340 --> 00:02:10.660
for something.


00:02:10.660 --> 00:02:13.780
- I guess, I mean, pay attention to number four


00:02:13.780 --> 00:02:15.460
on our picks as well, we'll come back to this.


00:02:15.460 --> 00:02:17.140
- There's something coming up related


00:02:17.140 --> 00:02:20.540
to the Who's at Nine that's on Talk Python, right?


00:02:20.540 --> 00:02:23.900
- Yeah, so I have three guys, a panel discussion,


00:02:23.900 --> 00:02:25.980
who are all involved in building


00:02:25.980 --> 00:02:29.460
echo assistant type things.


00:02:29.460 --> 00:02:31.140
Some of the people behind Flask Ask


00:02:31.140 --> 00:02:33.500
and some of the people behind Flask Assistant,


00:02:33.500 --> 00:02:35.900
those are sometimes the same people,


00:02:35.900 --> 00:02:38.300
on Talk Python this week.


00:02:38.300 --> 00:02:40.420
So it should come out just about the same time


00:02:40.420 --> 00:02:42.460
this episode comes out, which is pretty awesome.


00:02:42.460 --> 00:02:44.420
So if you really like this and you wanna dig into it,


00:02:44.420 --> 00:02:47.380
check out talkpython.fm/146.


00:02:47.380 --> 00:02:49.020
There should be a whole lot there.


00:02:49.020 --> 00:02:49.860
- That's cool.


00:02:49.860 --> 00:02:50.680
I'll check that out.


00:02:50.680 --> 00:02:51.520
- Sounds good?


00:02:51.520 --> 00:02:54.260
Yeah, so I came across an article


00:02:54.260 --> 00:02:57.500
that I think it's pretty interesting


00:02:57.500 --> 00:03:00.320
because you and I have been singing the praises of Python,


00:03:00.320 --> 00:03:02.060
how it's really, really popular.


00:03:02.060 --> 00:03:05.140
It's becoming quite the important language


00:03:05.140 --> 00:03:06.700
in so many ways, right?


00:03:06.700 --> 00:03:08.420
We talked about the incredible growth of Python,


00:03:08.420 --> 00:03:09.640
things like that.


00:03:09.640 --> 00:03:11.780
But I guess this struck a chord with me


00:03:11.780 --> 00:03:13.960
because I feel like one of the places


00:03:13.960 --> 00:03:16.520
where Python really falls down is this


00:03:16.520 --> 00:03:21.080
intersection of packaging for


00:03:21.080 --> 00:03:24.760
delivering an application to non-developers or non-servers,


00:03:24.760 --> 00:03:30.680
or packaging, and especially in that area around UIs, like native UIs.


00:03:30.680 --> 00:03:33.440
Yeah, definitely. We don't have that really.


00:03:33.440 --> 00:03:35.920
It's not as obvious what to do.


00:03:35.920 --> 00:03:37.080
It's not obvious.


00:03:37.080 --> 00:03:41.120
There's a few like half solutions, they sometimes work, except for when they don't.


00:03:41.120 --> 00:03:46.960
And you know, it's the thing that I ran across that made me sort of bring this up again.


00:03:46.960 --> 00:03:50.200
And it's not that I think Python completely sucks because it doesn't have it.


00:03:50.200 --> 00:03:51.480
Obviously, I don't think that.


00:03:51.480 --> 00:03:53.800
But I see it as a major weakness.


00:03:53.800 --> 00:03:58.600
And if we could solve this challenge, I feel like it would just make Python


00:03:58.600 --> 00:04:05.480
even stronger and reach even deeper into like big enterprises that have to have desktop UIs and things like that.


00:04:05.480 --> 00:04:10.200
So the article I found is called "Retiring Python as a Teaching Language."


00:04:10.200 --> 00:04:13.700
So this is by James Hague, and basically he said,


00:04:13.700 --> 00:04:17.500
for the last 10 years, my advice for someone getting started programming


00:04:17.500 --> 00:04:20.500
is to say, guys, start with Python, that's awesome.


00:04:20.500 --> 00:04:25.100
But then he wrote this article to say, actually, that's not my belief anymore.


00:04:25.100 --> 00:04:26.000
Yeah.


00:04:26.000 --> 00:04:27.000
That's kind of sad, right?


00:04:27.000 --> 00:04:28.500
It is, and it seems,


00:04:28.500 --> 00:04:33.900
okay, so his big beef really is part of this not being able to do the user interfaces,


00:04:33.900 --> 00:04:37.200
like desktop applications, easily with it.


00:04:37.200 --> 00:04:38.900
Yeah, absolutely. And mobile as well.


00:04:38.900 --> 00:04:41.860
I mean, these kind of are sort of cousins.


00:04:41.860 --> 00:04:44.020
Says, "It's all great, people work with Python


00:04:44.020 --> 00:04:45.260
"when they're getting started and so on,


00:04:45.260 --> 00:04:47.500
"but then one day the student will innocently ask,


00:04:47.500 --> 00:04:50.660
"instead of running a poker simulator on the command line,


00:04:50.660 --> 00:04:52.020
"can I just put it in a window


00:04:52.020 --> 00:04:53.940
"with like a button and some cards?"


00:04:53.940 --> 00:04:56.980
Yeah, okay, so what do you do then, right?


00:04:56.980 --> 00:04:59.140
Well, there's TK enter, but I don't know,


00:04:59.140 --> 00:05:03.340
that looks like it's from the early 90s, late 80s.


00:05:03.340 --> 00:05:05.820
It definitely doesn't look fresh and exciting


00:05:05.820 --> 00:05:08.120
like modern applications do.


00:05:08.120 --> 00:05:11.160
we have Pygame, but that's only if you want a game, right?


00:05:11.160 --> 00:05:14.520
What if I want an app that I want to,


00:05:14.520 --> 00:05:17.000
so suppose I work at, say, a stock trading place,


00:05:17.000 --> 00:05:21.320
and I want an app that is across three monitors,


00:05:21.320 --> 00:05:24.480
and it's showing me the status of all my trades


00:05:24.480 --> 00:05:28.040
running real-time, maybe a web socket back to some server,


00:05:28.040 --> 00:05:31.680
as fast as it can be to completely show the traders


00:05:31.680 --> 00:05:33.080
what's going on.


00:05:33.080 --> 00:05:34.720
What's the answer for Python there?


00:05:34.720 --> 00:05:36.760
- Yeah, well, I don't want to diss Pygame too much,


00:05:36.760 --> 00:05:39.960
because I know some people have done some non-game things with it.


00:05:39.960 --> 00:05:42.560
But I don't really have an answer to that either.


00:05:42.560 --> 00:05:43.760
I think that's a big shortcoming.


00:05:43.760 --> 00:05:45.560
And if we had really good answers for that,


00:05:45.560 --> 00:05:47.260
like some of the other frameworks,


00:05:47.260 --> 00:05:50.060
like even JavaScript has really good answers for that,


00:05:50.060 --> 00:05:51.760
which is kind of bizarre.


00:05:51.760 --> 00:05:54.560
But like Visual Studio Code, Atom,


00:05:54.560 --> 00:05:58.160
those are all Node.js plus JavaScript front-end apps, right?


00:05:58.160 --> 00:05:59.160
That's Electron.js.


00:05:59.160 --> 00:05:59.660
Yeah.


00:05:59.660 --> 00:06:04.360
I would like to see a modern sort of thing for Python.


00:06:04.360 --> 00:06:07.080
And I think this is just worth considering.


00:06:07.080 --> 00:06:09.760
You know, actually, the Twitter thread,


00:06:09.760 --> 00:06:11.320
we'll link to the Twitter thread.


00:06:11.320 --> 00:06:12.400
It's pretty interesting.


00:06:12.400 --> 00:06:15.460
If you open up my initial sort of tweet,


00:06:15.460 --> 00:06:16.840
I don't know if you wanna call it a complaint


00:06:16.840 --> 00:06:17.920
or warning to the community,


00:06:17.920 --> 00:06:20.200
but if you open that up, you can scroll down


00:06:20.200 --> 00:06:21.360
and you can see all the conversations.


00:06:21.360 --> 00:06:23.100
And even Guido gets in there a little bit


00:06:23.100 --> 00:06:24.640
to talk about some of the history,


00:06:24.640 --> 00:06:27.320
which is pretty interesting, and thanks for that.


00:06:27.320 --> 00:06:28.920
So I think it's, you know, I just,


00:06:28.920 --> 00:06:30.720
I don't know that there's a great answer right now,


00:06:30.720 --> 00:06:32.720
but I'm trying to inspire people.


00:06:32.720 --> 00:06:35.080
I want to play devil's advocate here though a little bit.


00:06:35.080 --> 00:06:40.240
I know that you've said that you have written a lot of desktop applications, but to be honest,


00:06:40.240 --> 00:06:41.240
I have not.


00:06:41.240 --> 00:06:47.160
I've written a couple little tiny things that I've needed for utilities at work.


00:06:47.160 --> 00:06:51.080
There's a whole bunch of programming that is not writing desktop applications.


00:06:51.080 --> 00:06:52.320
Oh, absolutely.


00:06:52.320 --> 00:06:57.360
And a lot of it's services, a lot of it's on the web, or it's just command line utilities,


00:06:57.360 --> 00:06:58.540
like you said.


00:06:58.540 --> 00:07:03.560
But here's where I think the actual, this is why I think we're underestimating the importance


00:07:03.560 --> 00:07:04.820
of this.


00:07:04.820 --> 00:07:11.000
If you could open up your editor, and it was just, you know, here's a few of the widgets,


00:07:11.000 --> 00:07:12.960
I could just drop them in here.


00:07:12.960 --> 00:07:19.480
And I could just put a dot app or a dot exe somewhere and my entire company could just


00:07:19.480 --> 00:07:21.980
pick it up and run it locally.


00:07:21.980 --> 00:07:27.160
How often have you not even can entertain that idea because you're just like, well,


00:07:27.160 --> 00:07:28.160
that doesn't exist.


00:07:28.160 --> 00:07:30.160
I even consider this a weird idea, right?


00:07:30.160 --> 00:07:32.260
Like we'd probably also see a lot less.


00:07:32.260 --> 00:07:35.260
I mean, there's a lot of internal projects that are


00:07:35.260 --> 00:07:39.960
are there set up as web applications, internal web applications that


00:07:39.960 --> 00:07:45.260
could definitely be desktop applications with a shared database back end


00:07:45.260 --> 00:07:48.760
that we don't do it that way because it's not easy to do that.


00:07:48.760 --> 00:07:53.260
Exactly. It's super hard, but it would be really nice to have some sort of


00:07:53.260 --> 00:07:58.180
ability to take advantage of the local application, local OS,


00:07:58.180 --> 00:08:00.980
and maybe you talk to a web service for shared data,


00:08:00.980 --> 00:08:04.300
maybe you just use SQLite locally, that might be interesting.


00:08:04.300 --> 00:08:07.900
But I don't think we do this because it's just like,


00:08:07.900 --> 00:08:12.100
it's so not working that it's just like,


00:08:12.100 --> 00:08:15.180
even if you got the UI working, it's like, okay, well, now what do we do for packaging?


00:08:15.180 --> 00:08:17.860
Right? I know there are answers, but they're always kind of tricky, right?


00:08:17.860 --> 00:08:21.340
So if that was like, entirely obvious,


00:08:21.340 --> 00:08:23.480
the tooling was just like, yeah, of course you do this.


00:08:23.480 --> 00:08:26.880
Like how many stores in the, how many apps in the Mac App Store


00:08:26.880 --> 00:08:29.480
would be Python apps? Right now I bet it's like,


00:08:29.480 --> 00:08:32.080
zero percent, you know, like,


00:08:32.080 --> 00:08:35.880
basically, right, once you round it down to the significant digits, right?


00:08:35.880 --> 00:08:37.280
They don't exist.


00:08:37.280 --> 00:08:39.540
And these things could just open up, right?


00:08:39.540 --> 00:08:44.440
If we could somehow as a community get like a really nice cross-platform UI setup.


00:08:44.440 --> 00:08:45.480
I agree.


00:08:45.480 --> 00:08:51.240
I think some of the stumbling blocks on that are that little thing that you throw in that's cross-platform.


00:08:51.240 --> 00:08:55.940
I know that that's cool, but I don't know if it's necessarily a requirement.


00:08:55.940 --> 00:09:00.940
That's true. Actually, I would say if you had a killer way to build


00:09:00.940 --> 00:09:03.680
macOS apps, stop.


00:09:03.680 --> 00:09:07.680
That would be a huge benefit for Python. If you had a killer way to build Windows apps,


00:09:07.680 --> 00:09:11.880
there's still like the majority of, you know, business people sit down


00:09:11.880 --> 00:09:15.080
and log in on a Windows machine. Like, if you could do that,


00:09:15.080 --> 00:09:20.080
that would be an amazing advancement for Python. So you're right, it doesn't necessarily have to be. I mean,


00:09:20.080 --> 00:09:23.080
One model is what the people at Xamarin are doing.


00:09:23.080 --> 00:09:25.720
They basically have cross-platform stuff,


00:09:25.720 --> 00:09:28.420
but every platform has its own UI a bit,


00:09:28.420 --> 00:09:30.520
but they have these designer things that help with that.


00:09:30.520 --> 00:09:33.480
I don't know. I just wanted to put that out there and let people know about


00:09:33.480 --> 00:09:35.740
this conversation and think about it.


00:09:35.740 --> 00:09:38.920
I think we're having an open session at PyCon on it.


00:09:38.920 --> 00:09:39.760
>> That would be good.


00:09:39.760 --> 00:09:40.160
>> Yeah.


00:09:40.160 --> 00:09:42.280
>> I think I'm glad we're bringing it up because we do need


00:09:42.280 --> 00:09:45.400
to hammer on this until it's fixed.


00:09:45.400 --> 00:09:46.980
>> If I look across all of Python,


00:09:46.980 --> 00:09:49.800
this is really the place where there's still a weakness.


00:09:49.800 --> 00:09:53.680
And it would be nice to just like fortify that wall and make it like a perfect place to be.


00:09:53.680 --> 00:09:54.300
Definitely.


00:09:54.300 --> 00:09:57.040
And like I said, SQLite as a little database,


00:09:57.040 --> 00:09:59.040
you don't even need a server, that might be a good choice, right?


00:09:59.040 --> 00:10:01.340
Yeah, definitely.


00:10:01.340 --> 00:10:05.800
So I came across, well, this is an older interview,


00:10:05.800 --> 00:10:09.000
but somebody recommended to us that we go back and listen to


00:10:09.000 --> 00:10:11.680
episode 201 of the Change Log.


00:10:11.680 --> 00:10:16.000
It's another podcast, but there's an interview with the,


00:10:16.000 --> 00:10:18.680
now I should have looked all these names up, but the dude that wrote...


00:10:18.680 --> 00:10:19.720
Richard Hipp, yeah.


00:10:19.720 --> 00:10:21.880
Okay, you're awesome for looking that up.


00:10:21.880 --> 00:10:25.380
He started at, he calls it SQLite,


00:10:25.380 --> 00:10:27.220
which I've never heard it pronounced that way.


00:10:27.220 --> 00:10:32.080
SQLite, as in like a meteorite or something, yeah.


00:10:32.080 --> 00:10:33.120
Or is that mineral?


00:10:33.120 --> 00:10:35.020
Yes, a very interesting way of pronunciation,


00:10:35.020 --> 00:10:35.980
none of which I would have guessed.


00:10:35.980 --> 00:10:38.880
Right, so the rest of us know this is SQLite, I think.


00:10:38.880 --> 00:10:40.420
That's how I know it, that's how I'm calling it.


00:10:40.420 --> 00:10:41.980
I didn't quite realize that.


00:10:41.980 --> 00:10:44.580
So this is the database, if you just say,


00:10:44.580 --> 00:10:47.820
what, SQLite 3 import in Python,


00:10:47.820 --> 00:10:50.080
and you get a little single file database.


00:10:50.080 --> 00:10:52.580
- This is beautiful because it's built into Python.


00:10:52.580 --> 00:10:56.540
Every instance, every buddy who has Python has this.


00:10:56.540 --> 00:10:57.840
So you can just count on it being there


00:10:57.840 --> 00:10:58.920
and it runs in process.


00:10:58.920 --> 00:11:00.340
So there's no configuration, right?


00:11:00.340 --> 00:11:01.260
- Yeah, definitely.


00:11:01.260 --> 00:11:04.420
And I didn't realize how dang cool the thing is


00:11:04.420 --> 00:11:06.220
until I listened to this episode,


00:11:06.220 --> 00:11:09.260
that this changelog episode,


00:11:09.260 --> 00:11:11.220
one of the comments from the interviewers


00:11:11.220 --> 00:11:15.060
was they just assumed it was a starter database


00:11:15.060 --> 00:11:17.120
that you always eventually have to move over


00:11:17.120 --> 00:11:21.960
to something else. And that's not true. There's, as long as your application is


00:11:21.960 --> 00:11:27.480
not like a web application with extreme client server concurrency, you probably


00:11:27.480 --> 00:11:31.940
can get away with like a lot of desktop applications are small, or the like, if


00:11:31.940 --> 00:11:36.880
you have a client side part of your application, that could just be a SQL


00:11:36.880 --> 00:11:39.400
Lite database, and it'll be fine.


00:11:39.400 --> 00:11:42.240
Yeah, that'd be awesome. Yeah. So if you had like some sort of client side thing


00:11:42.240 --> 00:11:46.040
that periodically wanted to sync with a real database, you could store it all in


00:11:47.040 --> 00:11:50.040
in SQLite locally and just synchronize that data


00:11:50.040 --> 00:11:52.360
across some kind of service with your real data.


00:11:52.360 --> 00:11:54.240
And that would be a real nice way to take the load


00:11:54.240 --> 00:11:57.120
off the server, to have a local offline version,


00:11:57.120 --> 00:11:57.960
all sorts of stuff.


00:11:57.960 --> 00:11:59.760
- Some things I didn't know about SQLite


00:11:59.760 --> 00:12:04.040
before I listened to this was that it started its life


00:12:04.040 --> 00:12:06.120
as a TCL application.


00:12:06.120 --> 00:12:06.960
- Yeah.


00:12:06.960 --> 00:12:07.800
- Which is bizarre.


00:12:07.800 --> 00:12:09.560
- It's very bizarre, but that's what happened.


00:12:09.560 --> 00:12:12.040
- Well, I guess that's where like TK started, right?


00:12:12.040 --> 00:12:13.640
In the TCL world.


00:12:13.640 --> 00:12:16.040
But the, also that one of the things


00:12:16.040 --> 00:12:19.080
you got to watch out for is that it's not as type safe.


00:12:19.080 --> 00:12:20.480
It's type flexible.


00:12:20.480 --> 00:12:22.040
Yeah, that's what he called it.


00:12:22.040 --> 00:12:24.640
When you are changing over to another database,


00:12:24.640 --> 00:12:27.540
your other database might be a little pickier than SQLite.


00:12:27.540 --> 00:12:28.640
So be careful of that.


00:12:28.640 --> 00:12:31.040
So an example, you might have a column,


00:12:31.040 --> 00:12:34.880
which is in the DDL designated as an integer.


00:12:34.880 --> 00:12:38.680
And if you passed, if you tried to assign quote seven to it,


00:12:38.680 --> 00:12:40.680
it would just convert that to seven.


00:12:40.680 --> 00:12:41.920
Things like that.


00:12:41.920 --> 00:12:43.640
So it's very funky in that regard.


00:12:43.640 --> 00:12:44.920
It's kind of scripty like that.


00:12:44.920 --> 00:12:51.220
He comes from a background of interpretive languages and weekly typed.


00:12:51.220 --> 00:12:52.420
So that makes sense.


00:12:52.420 --> 00:12:53.420
It's kind of cool.


00:12:53.420 --> 00:12:56.620
Yeah, I thought that interview was really interesting.


00:12:56.620 --> 00:12:59.020
Definitely a lot of respect for what he's doing.


00:12:59.020 --> 00:13:03.020
He's got some very different opinions and perspectives


00:13:03.020 --> 00:13:07.520
on open source, on say version control and editors.


00:13:07.520 --> 00:13:09.620
I mean, I'm not sure I agree with all of them,


00:13:09.620 --> 00:13:11.620
but they're certainly interesting to think about.


00:13:11.620 --> 00:13:16.380
Couple more things, the SQL, how there's a page of how SQLite is tested.


00:13:16.380 --> 00:13:19.820
And I think it's really cool that they put that out there of like what their


00:13:19.820 --> 00:13:21.900
checklist is for testing it.


00:13:21.900 --> 00:13:23.620
The amount of tests are huge, right?


00:13:23.620 --> 00:13:24.620
Yeah.


00:13:24.620 --> 00:13:28.500
And then also that the, I didn't realize it was in everything.


00:13:28.500 --> 00:13:32.820
Like every Android phone has a, is using it and things like that.


00:13:32.820 --> 00:13:34.040
I think iOS as well.


00:13:34.040 --> 00:13:34.300
Yeah.


00:13:34.300 --> 00:13:34.900
Yeah.


00:13:34.900 --> 00:13:36.500
So it's quite ubiquitous.


00:13:36.500 --> 00:13:37.740
It's definitely ubiquitous.


00:13:37.740 --> 00:13:38.340
It's very cool.


00:13:38.340 --> 00:13:41.380
and I think it's definitely a good place to start.


00:13:41.380 --> 00:13:45.480
And a lot of times you might not need more than that,


00:13:45.480 --> 00:13:48.340
which is one fewer server to configure,


00:13:48.340 --> 00:13:49.720
one fewer thing to patch,


00:13:49.720 --> 00:13:52.180
one fewer thing to make sure the firewalls are all right.


00:13:52.180 --> 00:13:54.380
It's really nice to just have that simple thing.


00:13:54.380 --> 00:13:56.480
Nice. So speaking of servers,


00:13:56.480 --> 00:13:58.380
let's talk about Datadog real quick.


00:13:58.380 --> 00:14:00.920
So Datadog is a monitoring solution


00:14:00.920 --> 00:14:05.260
that provides deep visibility inside of not just your app,


00:14:05.260 --> 00:14:08.060
but the infrastructure your app works with.


00:14:08.060 --> 00:14:12.380
So within a couple of minutes, you could investigate, like, say, a bottleneck in your code by


00:14:12.380 --> 00:14:16.720
checking out some flame graphs and dashboards. You can visualize your Python performance.


00:14:16.720 --> 00:14:23.260
And if you go and do their free trial, you'll get a free Datadog t-shirt, which has got a cool little dog on it.


00:14:23.260 --> 00:14:27.260
So check it out for yourself at pythonbytes.fm/datadog.


00:14:27.260 --> 00:14:29.560
And let them know. Thanks for sponsoring our show.


00:14:29.560 --> 00:14:30.560
Yeah, thank you.


00:14:30.560 --> 00:14:33.520
So I told you about Flask being this sort of, like,


00:14:33.520 --> 00:14:37.560
API that is standing in for all these other places.


00:14:37.560 --> 00:14:40.860
So the next thing I wanted to cover is serverless programming.


00:14:40.860 --> 00:14:44.180
So there was this joke, which I actually don't agree with.


00:14:44.180 --> 00:14:46.840
I kind of slightly disagree with it philosophically,


00:14:46.840 --> 00:14:49.520
but the sort of making fun of cloud computing saying,


00:14:49.520 --> 00:14:52.520
well, that's just another person's computer.


00:14:52.520 --> 00:14:53.360
There is no cloud.


00:14:53.360 --> 00:14:54.880
It's just another person's computer, right?


00:14:54.880 --> 00:14:55.720
That you're borrowing.


00:14:55.720 --> 00:14:56.560
- Isn't that true?


00:14:56.560 --> 00:14:59.960
- It's technically true, but it's,


00:14:59.960 --> 00:15:02.700
my disagreement is like the cloud computing stuff


00:15:02.700 --> 00:15:05.880
really has to do with a hardware


00:15:05.880 --> 00:15:10.180
that you can basically create and control through programming.


00:15:10.180 --> 00:15:12.940
So if there's an API, then you can say instantly,


00:15:12.940 --> 00:15:15.440
I want a machine, I want to scale my machine,


00:15:15.440 --> 00:15:17.540
I want to replicate my machine.


00:15:17.540 --> 00:15:19.740
That's not the same as just like co-location


00:15:19.740 --> 00:15:21.240
or like a rented server,


00:15:21.240 --> 00:15:22.940
'cause you can't just go and like rent a server


00:15:22.940 --> 00:15:25.840
and then hit an API and have like another server.


00:15:25.840 --> 00:15:27.840
So anyway, that's my disagreement a little bit,


00:15:27.840 --> 00:15:29.800
but to some degree, that's true, right?


00:15:29.800 --> 00:15:32.180
Well, we've moved beyond that joke


00:15:32.180 --> 00:15:35.040
to a farther world of potential ridiculousness,


00:15:35.040 --> 00:15:39.040
where we have server-based programs that have no servers.


00:15:39.040 --> 00:15:40.040
Right?


00:15:40.040 --> 00:15:43.840
This whole AWS Lambda, Azure Functions, serverless programming,


00:15:43.840 --> 00:15:44.640
it's kind of funny, right?


00:15:44.640 --> 00:15:45.440
Yes.


00:15:45.440 --> 00:15:46.040
Yes.


00:15:46.040 --> 00:15:49.240
So basically, the idea with this serverless programming,


00:15:49.240 --> 00:15:52.240
whether it's AWS Lambda or Azure Functions,


00:15:52.240 --> 00:15:55.240
is you write a single function,


00:15:55.240 --> 00:15:56.840
preferably in Python,


00:15:56.840 --> 00:16:00.040
but often they support JavaScript, C#, things like that.


00:16:00.040 --> 00:16:06.600
and that single function is the entry point into some piece of functionality


00:16:06.600 --> 00:16:11.240
and you're going to host that function on the cloud


00:16:11.240 --> 00:16:18.520
and it's up to the infrastructure to figure out like what Docker container to create, run that on, make that happen, scale it, etc.


00:16:18.520 --> 00:16:22.520
You just say here's literally a Python function and its dependencies run that.


00:16:22.520 --> 00:16:24.680
So that's pretty interesting.


00:16:24.680 --> 00:16:30.080
And the main reason here that people go for this one is there's no server at all to maintain, not even a virtual one.


00:16:30.080 --> 00:16:35.280
And the scalability is basically infinite and the price is like insanely cheap.


00:16:35.280 --> 00:16:38.680
Because you only pay while your function is literally executing.


00:16:38.680 --> 00:16:42.080
Okay. But I mean, there's still servers, you just don't have to set it up.


00:16:42.080 --> 00:16:46.080
Yeah, and your code is not stuck to one of them, right? Like every function call basically,


00:16:46.080 --> 00:16:50.080
I think is a new Docker container. I'm not entirely sure about the internals, but


00:16:50.080 --> 00:16:54.480
basically, every call is like an isolated execution and then it goes away.


00:16:54.480 --> 00:16:57.480
That's part of the appeal also is that you don't really have to care about that.


00:16:57.480 --> 00:16:58.480
Yeah, it's totally the appeal.


00:16:58.480 --> 00:17:00.180
The infrastructure just deals with it.


00:17:00.180 --> 00:17:02.980
Yeah, you do pay for a small latency on every request


00:17:02.980 --> 00:17:04.580
because it's got to like spin up this bit.


00:17:04.580 --> 00:17:08.780
But that's still for a lot of things that are not super performance critical,


00:17:08.780 --> 00:17:12.180
at least in the latency, it's totally would be fine.


00:17:12.180 --> 00:17:15.180
So what I wanted to talk about this week is this thing called Chalice,


00:17:15.180 --> 00:17:18.680
a Python serverless micro framework for AWS.


00:17:18.680 --> 00:17:22.980
So basically, this is a Flask API.


00:17:22.980 --> 00:17:24.740
Another flask API.


00:17:24.740 --> 00:17:26.740
Another flask API. So you


00:17:26.740 --> 00:17:29.940
implement these functions in Chalice


00:17:29.940 --> 00:17:33.340
and you decorate them with this flask API.


00:17:33.340 --> 00:17:36.940
But instead of running a flask app, you create a Chalice app.


00:17:36.940 --> 00:17:39.940
And then you can even say like Chalice deploy


00:17:39.940 --> 00:17:41.940
and run it and then


00:17:41.940 --> 00:17:45.140
you just go and basically request your thing.


00:17:45.140 --> 00:17:48.180
So what you effectively create is something that looks like


00:17:48.180 --> 00:17:51.780
a flask app with all the different pieces that are related and so on.


00:17:51.780 --> 00:17:54.220
but then they're hosted as individual


00:17:54.220 --> 00:17:58.220
individual function calls on the serverless infrastructure.


00:17:58.220 --> 00:17:59.720
So it's pretty cool, right?


00:17:59.720 --> 00:18:00.580
Okay, that's cool.


00:18:00.580 --> 00:18:02.380
So I think this is really interesting.


00:18:02.380 --> 00:18:05.820
So this is just like, we're going to take flask and put it on to


00:18:05.820 --> 00:18:08.380
AWS Lambda, which is pretty cool.


00:18:08.380 --> 00:18:11.980
Maybe the other counterpart that I know pretty well is Zappa.


00:18:11.980 --> 00:18:13.980
So Zappa is,


00:18:13.980 --> 00:18:17.480
I believe its own framework. I don't think it has a flask variation.


00:18:17.480 --> 00:18:19.980
I could be wrong. I haven't done that much with it. But


00:18:19.980 --> 00:18:24.340
Zappa also lets you basically create this API against


00:18:24.340 --> 00:18:28.680
this website equivalent, scaled out across these different functions.


00:18:28.680 --> 00:18:30.680
Yeah, so pretty cool things to be playing with.


00:18:30.680 --> 00:18:34.280
Like, you don't even need cloud anymore. Now you don't even need servers. It's all serverless.


00:18:34.280 --> 00:18:35.980
Yeah, so


00:18:35.980 --> 00:18:39.180
you still, I mean, of course, you still have to set up like a


00:18:39.180 --> 00:18:41.180
AWS account and get your


00:18:41.180 --> 00:18:43.680
token or whatever to hook into this, I assume.


00:18:43.680 --> 00:18:47.280
Yeah, exactly. You got to get your own token and all those things and


00:18:47.280 --> 00:18:48.080
yeah.


00:18:48.080 --> 00:18:55.360
You probably are talking to like some sort of hosted database or S3 or some combination thereof to actually do your work, right?


00:18:55.360 --> 00:19:02.440
Right. And actually, so I've never worked with AWS, but these sorts of things make me kind of want to try because it doesn't look scary at all.


00:19:02.440 --> 00:19:05.000
Absolutely. So let's wrap it back to item one.


00:19:05.000 --> 00:19:10.440
When you create your flask skill, your ask flask stuff,


00:19:10.440 --> 00:19:16.000
and when you work with Alexa, one of the main ways to work with Alexa is to


00:19:16.000 --> 00:19:19.000
actually tie, see,


00:19:19.000 --> 00:19:20.340
see, she's speaking to me now.


00:19:20.340 --> 00:19:24.140
To have her, you could tie those two lambda


00:19:24.140 --> 00:19:26.140
functions, these serverless functions.


00:19:26.140 --> 00:19:27.860
So actually you could put it all together like that.


00:19:27.860 --> 00:19:28.820
- Neat. - Yeah, cool.


00:19:28.820 --> 00:19:31.260
- Definitely. - So I think you can probably help some people


00:19:31.260 --> 00:19:33.260
with job interviews coming up here.


00:19:33.260 --> 00:19:35.460
Like, first, how do I reverse a string?


00:19:35.460 --> 00:19:39.380
Second, what's the fastest way to unify a list


00:19:39.380 --> 00:19:41.380
in Python? - Reverse a string?


00:19:41.380 --> 00:19:43.380
- Yes. - This is a short little thing,


00:19:43.380 --> 00:19:45.740
but there's a blog article called


00:19:45.740 --> 00:19:49.380
the fastest way to uniquefy a list in Python


00:19:49.380 --> 00:19:52.020
greater than or equal 3.6.


00:19:52.020 --> 00:19:56.980
So basically 3.6, unless you're running 3.7 already.


00:19:56.980 --> 00:19:58.860
I just appreciated the,


00:19:58.860 --> 00:20:00.860
instead of having just an article that says,


00:20:00.860 --> 00:20:02.060
okay, here's the answer.


00:20:02.060 --> 00:20:04.940
There is a discussion of the different ways you might do it


00:20:04.940 --> 00:20:06.820
and the code for how he timed it.


00:20:06.820 --> 00:20:09.020
So you can reproduce all of, if you don't believe it,


00:20:09.020 --> 00:20:10.340
you can reproduce all the code


00:20:10.340 --> 00:20:13.680
and get your results on your machine,


00:20:13.680 --> 00:20:15.420
it's probably similar.


00:20:15.420 --> 00:20:17.340
The short answer is,


00:20:17.340 --> 00:20:19.660
if you wanna keep the order in place,


00:20:19.660 --> 00:20:24.660
you simply do a list of a dict from keys of your sequence.


00:20:24.660 --> 00:20:26.380
And we'll have this in the show notes, of course,


00:20:26.380 --> 00:20:27.940
and a link to the article.


00:20:27.940 --> 00:20:31.140
And if you don't care about the order,


00:20:31.140 --> 00:20:34.020
then just convert it to a set and then a list.


00:20:34.020 --> 00:20:35.460
So that's it.


00:20:35.460 --> 00:20:39.140
And I've used the list set before,


00:20:39.140 --> 00:20:41.160
And I was actually, I mean, it makes sense


00:20:41.160 --> 00:20:42.860
that from keys works.


00:20:42.860 --> 00:20:44.760
I've never really used that before.


00:20:44.760 --> 00:20:45.600
So that--


00:20:45.600 --> 00:20:46.620
- Yeah, and it's gonna get interesting


00:20:46.620 --> 00:20:50.160
with the promises of dictionaries being ordered.


00:20:50.160 --> 00:20:51.960
You could actually get some of these


00:20:51.960 --> 00:20:53.420
to be a little quicker, right?


00:20:53.420 --> 00:20:54.680
But still preserving the order.


00:20:54.680 --> 00:20:57.040
- Well, isn't that the way it is now?


00:20:57.040 --> 00:20:59.400
- Not all, like some of them, there's like two graphs


00:20:59.400 --> 00:21:01.400
that says not order preserving functions


00:21:01.400 --> 00:21:03.440
and then order preserving functions.


00:21:03.440 --> 00:21:08.440
And right now they have list of set of list,


00:21:08.720 --> 00:21:09.920
- Not order preserving.


00:21:09.920 --> 00:21:12.680
- Right, 'cause set isn't an order preserving thing.


00:21:12.680 --> 00:21:14.520
- So yeah, but it's pretty cool though, pretty cool.


00:21:14.520 --> 00:21:16.880
Definitely worth thinking about all the different ways


00:21:16.880 --> 00:21:19.040
and seeing the trade-offs and so on.


00:21:19.040 --> 00:21:19.880
- Okay.


00:21:19.880 --> 00:21:21.320
- All right, so I wanna wrap up this episode


00:21:21.320 --> 00:21:23.440
with leaving some people with homework.


00:21:23.440 --> 00:21:26.840
They've got some research and some chilling on the couch,


00:21:26.840 --> 00:21:28.280
watching some Python videos.


00:21:28.280 --> 00:21:29.120
- Okay.


00:21:29.120 --> 00:21:33.340
- So there's two sets of conference videos that came out,


00:21:33.340 --> 00:21:34.760
and I'm sure there's some that I've missed,


00:21:34.760 --> 00:21:37.640
but these are the two that stood out to me recently.


00:21:37.640 --> 00:21:42.520
PyTexas and PyCon Australia both have their videos up.


00:21:42.520 --> 00:21:45.900
And I linked to the playlist on YouTube for both of them,


00:21:45.900 --> 00:21:46.740
which is pretty cool.


00:21:46.740 --> 00:21:50.120
There's, you know, like always, like 40 or more videos.


00:21:50.120 --> 00:21:51.940
There's tons of really interesting stuff,


00:21:51.940 --> 00:21:54.840
but I kind of wanted to touch on some that I,


00:21:54.840 --> 00:21:57.200
these are not necessarily endorsements.


00:21:57.200 --> 00:21:59.080
These are just like, these look really interesting to me


00:21:59.080 --> 00:22:00.120
and I'd like to go watch them.


00:22:00.120 --> 00:22:02.920
I haven't spent all this time watching all these videos


00:22:02.920 --> 00:22:04.160
just right now.


00:22:04.160 --> 00:22:08.440
But from PyTexas, there's a talk on MicroPython,


00:22:08.440 --> 00:22:10.640
which MicroPython is really, really cool, right?


00:22:10.640 --> 00:22:14.400
You can run your Python on like a $5 microchip


00:22:14.400 --> 00:22:16.640
and hook your Lambda functions, your Python ones,


00:22:16.640 --> 00:22:18.140
up to like hardware interrupts.


00:22:18.140 --> 00:22:20.280
Like that's just the coolest.


00:22:20.280 --> 00:22:22.900
And then there's so much talk about machine learning


00:22:22.900 --> 00:22:24.800
and AI and all that stuff.


00:22:24.800 --> 00:22:26.680
So there was a talk given there called,


00:22:26.680 --> 00:22:28.680
what is machine learning anyway?


00:22:28.680 --> 00:22:30.000
Or something like that.


00:22:30.000 --> 00:22:33.280
So like a foundational background on machine learning,


00:22:33.280 --> 00:22:34.120
which is cool.


00:22:34.120 --> 00:22:38.600
And then another one is C for yourself, with the letter C, not S-E-E, so like trying to


00:22:38.600 --> 00:22:40.920
explore the internals of CPython.


00:22:40.920 --> 00:22:44.680
And then there's one on Python and .NET for this thing called Python.net, which is not


00:22:44.680 --> 00:22:49.000
the Iron Python that's been around for a long time, but like this newer way to try to integrate


00:22:49.000 --> 00:22:50.000
those things.


00:22:50.000 --> 00:22:53.480
So all the people that work on the big enterprise apps and C#, they can now plug in some sweet


00:22:53.480 --> 00:22:55.200
Python or vice versa.


00:22:55.200 --> 00:22:56.280
- Yeah, okay.


00:22:56.280 --> 00:22:59.000
Those all look good to me too, especially the MicroPython.


00:22:59.000 --> 00:23:00.000
- Yeah, MicroPython's great.


00:23:00.000 --> 00:23:01.680
So that's in Texas.


00:23:01.680 --> 00:23:03.480
And then Australia, I don't know,


00:23:03.480 --> 00:23:05.060
those guys were killing it with names down there.


00:23:05.060 --> 00:23:06.380
They just really did a good job.


00:23:06.380 --> 00:23:07.380
And there's so many all kinds,


00:23:07.380 --> 00:23:09.660
I have more I pulled out, so I'll go a little quicker.


00:23:09.660 --> 00:23:11.300
Gradual typing, right?


00:23:11.300 --> 00:23:12.300
We've talked about that,


00:23:12.300 --> 00:23:13.980
the type hints and adding them and stuff.


00:23:13.980 --> 00:23:16.500
And I think this is probably a really interesting survey.


00:23:16.500 --> 00:23:20.220
That hot reloading Python web servers at scale.


00:23:20.220 --> 00:23:21.580
- Ooh, that sounds nice.


00:23:21.580 --> 00:23:23.580
- Yeah, that sounds like a lot of cool internals.


00:23:23.580 --> 00:23:26.420
Prototyping Python microservices in production


00:23:26.420 --> 00:23:28.660
and secrets of a WSGI master,


00:23:28.660 --> 00:23:31.380
like understanding the base HTTP protocol.


00:23:31.380 --> 00:23:33.180
And then another one,


00:23:33.180 --> 00:23:35.780
Python 3 for people who have not been paying attention.


00:23:35.780 --> 00:23:37.420
(laughing)


00:23:37.420 --> 00:23:40.060
So that's not anybody that's listening to this.


00:23:40.060 --> 00:23:41.020
Exactly.


00:23:41.020 --> 00:23:43.020
They know about legacy Python. Come on.


00:23:43.020 --> 00:23:48.020
Then identity 2.0, what, why and how of social and federated login.


00:23:48.020 --> 00:23:49.380
So if you got to do anything with like,


00:23:49.380 --> 00:23:52.700
identity across providers, that's so painful, this would be cool.


00:23:52.700 --> 00:23:56.020
And then here's a sort of a Tesla reference.


00:23:56.020 --> 00:23:59.320
I'm guessing Python ludicrous mode with Django.


00:23:59.320 --> 00:23:59.820
Okay.


00:23:59.820 --> 00:24:04.200
So ludicrous mode in the Tesla is like, you know, like the insane amount of power,


00:24:04.200 --> 00:24:07.860
like, you know, give you a neck ache if you hit the gas yard sort of thing.


00:24:07.860 --> 00:24:09.400
So something to that effect.


00:24:09.400 --> 00:24:13.000
And then finally, scaling down.


00:24:13.000 --> 00:24:16.420
We often talk about scale up and all this complexity you got to deal with.


00:24:16.420 --> 00:24:21.260
You even talked about how you're not Google, you're not Facebook or any of these things a while back, which is cool.


00:24:21.520 --> 00:24:24.040
But this is if you do have one of these large sites


00:24:24.040 --> 00:24:26.520
that's got a complicated architecture,


00:24:26.520 --> 00:24:30.240
let's say a Redis back-end message queue type thing


00:24:30.240 --> 00:24:32.920
and a database and a whole bunch of other stuff,


00:24:32.920 --> 00:24:34.640
maybe some of those are hosted in the cloud.


00:24:34.640 --> 00:24:37.920
Like how do you actually develop that locally also?


00:24:37.920 --> 00:24:38.720
That's cool.


00:24:38.720 --> 00:24:41.520
That's definitely a need for everyone, I think.


00:24:41.520 --> 00:24:42.920
I'm sure there's a lot of good lessons in there.


00:24:42.920 --> 00:24:47.240
So the links to both of those playlists are up on the show notes.


00:24:47.240 --> 00:24:48.040
So that should be fun.


00:24:48.040 --> 00:24:48.880
All right, cool.


00:24:48.880 --> 00:24:49.880
- All right, well, how about you?


00:24:49.880 --> 00:24:52.040
Any other news?


00:24:52.040 --> 00:24:53.320
- We're out.


00:24:53.320 --> 00:24:55.320
So that was six, cool.


00:24:55.320 --> 00:24:58.280
You've actually been crushing it lately.


00:24:58.280 --> 00:24:59.320
- I've been so busy.


00:24:59.320 --> 00:25:01.220
It's been so fun though.


00:25:01.220 --> 00:25:03.640
Yeah, so last week I released my everything bundle


00:25:03.640 --> 00:25:05.100
where people can get all the courses, right?


00:25:05.100 --> 00:25:06.960
And so I shipped my first course


00:25:06.960 --> 00:25:10.780
for that everything bundle called Mastering PyCharm,


00:25:10.780 --> 00:25:12.820
which yes, it covers PyCharm,


00:25:12.820 --> 00:25:15.760
but it's also basically like a little mini course


00:25:15.760 --> 00:25:19.120
on like 16 different parts of software development.


00:25:19.120 --> 00:25:22.160
So there's like a little tiny 20 minute thing on refactoring


00:25:22.160 --> 00:25:25.480
and a 15 minute thing on unit testing and pytest.


00:25:25.480 --> 00:25:27.280
30 minute thing on Git and stuff.


00:25:27.280 --> 00:25:30.040
So it's like sort of all those little pieces put together,


00:25:30.040 --> 00:25:31.960
but through the lens of working with PyCharm.


00:25:31.960 --> 00:25:35.000
So I'll link to that and yeah,


00:25:35.000 --> 00:25:37.360
people can check that out if they want.


00:25:37.360 --> 00:25:39.560
And I'm also doing a webcast with the JetBrains people,


00:25:39.560 --> 00:25:40.800
but on MongoDB.


00:25:40.800 --> 00:25:43.080
So if they wanna, people wanna drop in on that


00:25:43.080 --> 00:25:46.400
on January 30th, I'm doing a live event with JetBrains


00:25:46.400 --> 00:25:48.400
and the link for that registration will be there.


00:25:48.400 --> 00:25:49.880
It's free, you can come check it out.


00:25:49.880 --> 00:25:51.200
- Cool, I'll come watch.


00:25:51.200 --> 00:25:52.560
- All right, awesome.


00:25:52.560 --> 00:25:54.560
Well, yeah, that's all I've been doing this week.


00:25:54.560 --> 00:25:55.400
- Nice.


00:25:55.400 --> 00:25:57.920
- Great, all right, well, thank you, Brian.


00:25:57.920 --> 00:25:58.760
- Thank you.


00:25:58.760 --> 00:26:00.060
- A lot of good stuff this week, yeah.


00:26:00.060 --> 00:26:02.080
And looking forward to more next.


00:26:02.080 --> 00:26:03.000
- Talk to you next week.


00:26:03.000 --> 00:26:04.320
- All right, bye.


00:26:04.320 --> 00:26:06.080
Thank you for listening to Python Bytes.


00:26:06.080 --> 00:26:08.580
Follow the show on Twitter via @PythonBytes.


00:26:08.580 --> 00:26:11.760
That's Python Bytes as in B-Y-T-E-S.


00:26:11.760 --> 00:26:15.160
and get the full show notes at pythonbytes.fm.


00:26:15.160 --> 00:26:16.760
If you have a news item you want featured,


00:26:16.760 --> 00:26:19.200
just visit pythonbytes.fm and send it our way.


00:26:19.200 --> 00:26:22.360
We're always on the lookout for sharing something cool.


00:26:22.360 --> 00:26:24.200
On behalf of myself and Brian Okken,


00:26:24.200 --> 00:26:25.720
this is Michael Kennedy.


00:26:25.720 --> 00:26:27.740
Thank you for listening and sharing this podcast


00:26:27.740 --> 00:26:29.400
with your friends and colleagues.

