
00:00:00.000 --> 00:00:05.320
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.320 --> 00:00:10.020
This is episode 72 recorded April 4th 2018.


00:00:10.020 --> 00:00:10.920
I'm Michael Kennedy.


00:00:10.920 --> 00:00:11.820
And I'm Brian Okken.


00:00:11.820 --> 00:00:13.120
And we got some awesome stuff for you.


00:00:13.120 --> 00:00:16.020
Before we get to it, Brian, I want to say thank you to Datadog.


00:00:16.020 --> 00:00:20.420
Check out what they're offering over at talkpython.fm/datadog.


00:00:20.420 --> 00:00:24.420
And they've got a bunch of cool stuff including a cute little doggy t-shirt.


00:00:24.420 --> 00:00:25.620
I still need to get one of those.


00:00:25.620 --> 00:00:26.820
I know. I don't have a shirt either.


00:00:26.820 --> 00:00:28.320
I really need to do that.


00:00:28.320 --> 00:00:32.320
Alright, I guess the first thing we should talk about is versioning.


00:00:32.320 --> 00:00:37.820
Like, when I normally look at commercial software, they have numbers in the front,


00:00:37.820 --> 00:00:43.620
like version 6 or 12 or version 3 of this software.


00:00:43.620 --> 00:00:48.020
It's pretty rare to have 3.anything in open source, isn't it?


00:00:48.020 --> 00:00:52.320
I don't know if it's rare, but there sure is a lot of stuff that's still...


00:00:52.320 --> 00:00:57.320
We think of stuff that starts with a 0 as being in beta, and it's not...


00:00:57.320 --> 00:01:04.200
Well, like for instance, with semantic versioning, once it's at 1.0, the interface is pretty


00:01:04.200 --> 00:01:06.520
solid and you can depend on it.


00:01:06.520 --> 00:01:14.360
But there was a website put up this month called ZeroVer to talk about zero-based versioning.


00:01:14.360 --> 00:01:16.400
And it's sort of tongue-in-cheek.


00:01:16.400 --> 00:01:22.680
It's from one of our friends, Mahmoud Hashemi, and some others that started it.


00:01:22.680 --> 00:01:27.640
But they kind of wanted to call out a bunch of Python projects and other projects that


00:01:27.640 --> 00:01:34.320
are like perpetually starting with zero by putting up this sort of mock website to say


00:01:34.320 --> 00:01:37.860
that you don't need to do anything other than zero-based versioning.


00:01:37.860 --> 00:01:39.400
It really helps you.


00:01:39.400 --> 00:01:41.920
It gives it like it starts out with a down-to-earth demo.


00:01:41.920 --> 00:01:42.920
It's pretty awesome.


00:01:42.920 --> 00:01:46.360
So it has like some versions and says, yes, these are good.


00:01:46.360 --> 00:01:51.360
0.0.1, 0.1.0.dev, 0.4.0, and then no, 1.0, 1.0.0, 1.0.0,


00:01:51.360 --> 00:01:59.160
18.0, 2018.04.0, like none of these are okay.


00:01:59.160 --> 00:02:00.220
- Right.


00:02:00.220 --> 00:02:03.780
And yeah, so if you haven't figured it out,


00:02:03.780 --> 00:02:06.700
it is a joke, but it is, like for instance,


00:02:06.700 --> 00:02:08.600
I guess I hadn't realized this,


00:02:08.600 --> 00:02:10.940
Flask is one of the ones that was called out


00:02:10.940 --> 00:02:14.140
as it's currently 0.12.2.


00:02:14.140 --> 00:02:16.400
Come on, it's been eight years.


00:02:16.400 --> 00:02:19.580
I think that maybe you can go to a 1.0.


00:02:19.580 --> 00:02:21.900
- I have a new solution here,


00:02:21.900 --> 00:02:24.540
a new way to solve this problem.


00:02:24.540 --> 00:02:27.500
Just whenever you print or look at the version number,


00:02:27.500 --> 00:02:30.420
just strip off all the left zeros and dots.


00:02:30.420 --> 00:02:35.140
So it's like 12.2 is basically what Flask is.


00:02:35.140 --> 00:02:36.860
- You know, there's some pretty,


00:02:36.860 --> 00:02:39.700
ones that are very dependent on by a bunch of people


00:02:39.700 --> 00:02:43.860
that if they completely changed the interface, the API,


00:02:43.860 --> 00:02:44.980
that would be bad.


00:02:44.980 --> 00:02:48.860
So there's the point where they could bump to a 1.0.


00:02:48.860 --> 00:02:51.740
- Yeah, I think eight years, absolutely,


00:02:51.740 --> 00:02:53.580
is a time frame where you could say,


00:02:53.580 --> 00:02:56.180
you know, we're pretty stable at this point, right?


00:02:56.180 --> 00:02:59.260
Like also Panda's in here with a 0.23,


00:02:59.260 --> 00:03:00.900
and it's 7.1 years.


00:03:00.900 --> 00:03:03.260
So, and also they count the releases, right?


00:03:03.260 --> 00:03:07.060
Like 21 releases of Flask, 75 releases of Pandas,


00:03:07.060 --> 00:03:08.540
and it's still on a zero.


00:03:08.540 --> 00:03:11.220
One thing I would like to point out is,


00:03:11.220 --> 00:03:15.780
If you go and you look at a lot of the sort of manager folks


00:03:15.780 --> 00:03:20.300
at more commercial oriented enterprise software groups,


00:03:20.300 --> 00:03:22.020
so people that use like .NET


00:03:22.020 --> 00:03:27.020
or other non-open source development ecosystems,


00:03:27.020 --> 00:03:29.780
when they see things like 0.1,


00:03:29.780 --> 00:03:31.780
they're like, "Oh, this thing is not ready for us to use.


00:03:31.780 --> 00:03:33.260
"We can't use this at our company."


00:03:33.260 --> 00:03:36.460
And I think it actually sends a bit of a message


00:03:36.460 --> 00:03:38.300
that this thing's not quite ready.


00:03:38.300 --> 00:03:40.580
I mean, I know, obviously looking at this list,


00:03:40.580 --> 00:03:44.020
it doesn't mean that, but a significant number of people


00:03:44.020 --> 00:03:45.340
I think interpret it that way.


00:03:45.340 --> 00:03:48.700
And so I think it's worth considering maybe saying,


00:03:48.700 --> 00:03:50.720
all right, we're actually at a version


00:03:50.720 --> 00:03:51.980
where we're gonna call it 1.0.


00:03:51.980 --> 00:03:54.380
Like Flask is probably fully ready for 1.0.


00:03:54.380 --> 00:03:57.300
- Anything that starts with, it's just the dots


00:03:57.300 --> 00:03:59.820
and it's not date-based, people kind of assume


00:03:59.820 --> 00:04:01.140
it's a semantic versioning.


00:04:01.140 --> 00:04:04.420
So I think semantic versioning is the way to go.


00:04:04.420 --> 00:04:05.660
It's not an easy thing though,


00:04:05.660 --> 00:04:07.140
and that's part of the reason why


00:04:07.140 --> 00:04:09.420
they're being a little gentle with it.


00:04:09.420 --> 00:04:11.580
If you check out the about page, it talks about,


00:04:11.580 --> 00:04:14.260
on here it talks about really what you should do about it.


00:04:14.260 --> 00:04:16.580
But when you're actually running a project,


00:04:16.580 --> 00:04:18.740
it's hard to decide when,


00:04:18.740 --> 00:04:20.260
what's something that's big enough


00:04:20.260 --> 00:04:22.740
to go to flip the major digit.


00:04:22.740 --> 00:04:25.020
- Django's doing that pretty well, I think, right?


00:04:25.020 --> 00:04:28.180
They had their 1.0, and that was stable for a long time.


00:04:28.180 --> 00:04:30.020
They said, "We're gonna make a major break and change,


00:04:30.020 --> 00:04:32.700
"so we're flipping to 2.0," right?


00:04:32.700 --> 00:04:34.700
The Drop Python 2 support and all that kind of stuff.


00:04:34.700 --> 00:04:36.980
So Django is one that's not following


00:04:36.980 --> 00:04:38.500
Mamoog's recommendation.


00:04:38.500 --> 00:04:40.500
- Recommendation, yeah.


00:04:40.500 --> 00:04:41.340
- Yeah, I love it.


00:04:41.340 --> 00:04:42.420
I love it how he branded that,


00:04:42.420 --> 00:04:43.700
him and all the folks involved.


00:04:43.700 --> 00:04:45.020
It's very cool.


00:04:45.020 --> 00:04:48.940
So when we build these projects in Python


00:04:48.940 --> 00:04:51.140
and any open source system really,


00:04:51.140 --> 00:04:52.980
you basically layer on a whole bunch


00:04:52.980 --> 00:04:55.560
of external dependencies and packages and stuff.


00:04:55.560 --> 00:04:59.420
How do you know when something has gone terribly wrong?


00:04:59.420 --> 00:05:03.180
Like suppose you depend on Vexig in Flask


00:05:03.180 --> 00:05:05.380
and there's some huge security vulnerability


00:05:05.380 --> 00:05:07.140
in that dependency.


00:05:07.140 --> 00:05:08.140
Do you get notified?


00:05:08.140 --> 00:05:08.980
How do you know?


00:05:08.980 --> 00:05:09.800
- No, I don't know.


00:05:09.800 --> 00:05:10.640
- You don't know, right.


00:05:10.640 --> 00:05:12.380
And so this is actually a really big problem.


00:05:12.380 --> 00:05:15.140
It's like, when you think about problems


00:05:15.140 --> 00:05:17.200
or security issues with your application,


00:05:17.200 --> 00:05:18.920
it's not just what you have,


00:05:18.920 --> 00:05:20.320
it's the stuff you're built upon.


00:05:20.320 --> 00:05:23.800
I mean, the whole Equifax thing was a vulnerability


00:05:23.800 --> 00:05:26.160
in the, was it Swing?


00:05:26.160 --> 00:05:29.820
Swing, I don't know, some foundational library in Java.


00:05:29.820 --> 00:05:32.020
And they just didn't patch it in time, right?


00:05:32.020 --> 00:05:34.200
So getting notified of these things is really important.


00:05:34.200 --> 00:05:36.300
And so much of our code lives on GitHub,


00:05:36.300 --> 00:05:38.620
GitHub decided they're gonna take some responsibility


00:05:38.620 --> 00:05:39.660
for this and try to help people.


00:05:39.660 --> 00:05:42.340
So there's a nice article that says,


00:05:42.340 --> 00:05:45.900
GitHub Security Alerts detected over four million


00:05:45.900 --> 00:05:49.020
vulnerabilities last year, I think it was in the year.


00:05:49.020 --> 00:05:50.220
Or actually it's not even the year,


00:05:50.220 --> 00:05:52.780
it's since like November of last year or something.


00:05:52.780 --> 00:05:54.340
So that's pretty insane.


00:05:54.340 --> 00:05:57.460
So they launched this thing called GitHub Security Alerts.


00:05:57.460 --> 00:06:01.980
Initially it's only for Ruby and JavaScript, which is lame,


00:06:01.980 --> 00:06:03.300
but they have Python support coming,


00:06:03.300 --> 00:06:05.440
which is why I'm talking about this.


00:06:05.440 --> 00:06:07.760
And what it does is it looks at your GitHub repo


00:06:07.760 --> 00:06:10.000
and it says, are you using a certain dependency?


00:06:10.000 --> 00:06:12.720
Does that dependency have a known security vulnerability?


00:06:12.720 --> 00:06:15.800
If it does, then right at the top of your repo,


00:06:15.800 --> 00:06:17.600
you get this great scary warning that says,


00:06:17.600 --> 00:06:20.000
your application is insecure because it depends


00:06:20.000 --> 00:06:21.400
on this thing that is insecure.


00:06:21.400 --> 00:06:22.920
- Yeah, actually that's a great idea.


00:06:22.920 --> 00:06:24.480
- Yeah, I don't know if you get an email notice,


00:06:24.480 --> 00:06:28.760
but certainly your repo looks scary when that's the case.


00:06:28.760 --> 00:06:30.000
This happened to one of my courses


00:06:30.000 --> 00:06:33.400
and it just came back again because one of my courses,


00:06:33.400 --> 00:06:37.360
The PyCharm course demonstrates using ElectronJS,


00:06:37.360 --> 00:06:38.840
editing an ElectronJS app,


00:06:38.840 --> 00:06:41.680
and ElectronJS had some security vulnerability.


00:06:41.680 --> 00:06:43.720
It's not actually used, but you know, whatever.


00:06:43.720 --> 00:06:46.080
It still says your app, it depends upon ElectronJS,


00:06:46.080 --> 00:06:47.960
and it's got this issue.


00:06:47.960 --> 00:06:48.780
So that's pretty cool.


00:06:48.780 --> 00:06:51.480
And then there's some good numbers and whatnot here.


00:06:51.480 --> 00:06:55.160
It says nearly half of all the displayed alerts


00:06:55.160 --> 00:06:58.640
were responded to within a week,


00:06:58.640 --> 00:07:02.280
and 30% were fixed within the first seven days.


00:07:02.280 --> 00:07:03.120
- Oh, that's great.


00:07:03.120 --> 00:07:05.420
- That's a good thing that they're adding that.


00:07:05.420 --> 00:07:08.240
And it does, so you said it's coming for Python


00:07:08.240 --> 00:07:11.380
and I see that it is planned for this year for 2018.


00:07:11.380 --> 00:07:12.600
So that's good.


00:07:12.600 --> 00:07:14.160
- Yeah, there's not a whole lot of details


00:07:14.160 --> 00:07:15.320
about exactly when it's coming,


00:07:15.320 --> 00:07:16.960
but yeah, that will be great.


00:07:16.960 --> 00:07:18.960
They said if you look at repositories


00:07:18.960 --> 00:07:20.840
that have had a contribution in the last 90 days,


00:07:20.840 --> 00:07:23.440
so things that are active,


00:07:23.440 --> 00:07:26.160
it says 98% of such repositories


00:07:26.160 --> 00:07:28.340
were patched within fewer than seven days.


00:07:28.340 --> 00:07:30.360
Like that's insane, that's a really big deal.


00:07:30.360 --> 00:07:31.480
- Yeah. - Yeah.


00:07:31.480 --> 00:07:34.660
So they said they found over half a million repositories


00:07:34.660 --> 00:07:36.360
that had some kind of security vulnerability


00:07:36.360 --> 00:07:37.580
and were pretty much fixed up.


00:07:37.580 --> 00:07:39.820
So anyway, that's all really good.


00:07:39.820 --> 00:07:42.040
I just wanna give a shout out to pyup as well,


00:07:42.040 --> 00:07:43.960
P-Y-U-P dot I-O.


00:07:43.960 --> 00:07:47.640
I use that for my stuff and it basically does


00:07:47.640 --> 00:07:50.080
the same thing and more for Python already.


00:07:50.080 --> 00:07:51.480
So you link it to your GitHub repo,


00:07:51.480 --> 00:07:53.960
it'll like look at your requirements.txt.


00:07:53.960 --> 00:07:56.260
If there's a new version, it'll send you a PR


00:07:56.260 --> 00:07:57.960
to upgrade your dependencies.


00:07:57.960 --> 00:07:59.760
And if there's a security alert, it'll tell you.


00:07:59.760 --> 00:08:01.920
I don't really want to get on this tangent too far,


00:08:01.920 --> 00:08:05.600
but I started using PyUp for the cards project


00:08:05.600 --> 00:08:07.180
that I started recently.


00:08:07.180 --> 00:08:09.680
Since I'm sort of doing this project,


00:08:09.680 --> 00:08:12.020
I can't remember who I read it from,


00:08:12.020 --> 00:08:14.720
but the packages that are intended to be used


00:08:14.720 --> 00:08:17.160
by other applications probably shouldn't have


00:08:17.160 --> 00:08:19.180
their versions pegged.


00:08:19.180 --> 00:08:22.200
So if I unpegged all my versions in a package,


00:08:22.200 --> 00:08:24.980
then pyup.io kind of complains about that.


00:08:24.980 --> 00:08:26.720
- Yeah, that's a little bit, it does require


00:08:26.720 --> 00:08:28.440
you to more or less pin your versions.


00:08:28.440 --> 00:08:32.880
And you can do expressions, like I want it to be this version or higher.


00:08:32.880 --> 00:08:34.280
And I think maybe it'll upgrade it.


00:08:34.280 --> 00:08:35.280
I don't know.


00:08:35.280 --> 00:08:36.280
There's a little flexibility.


00:08:36.280 --> 00:08:37.280
It's not perfect.


00:08:37.280 --> 00:08:41.440
But for like fixed apps, like my web apps, I'll have the stuff pinned and it just automatically


00:08:41.440 --> 00:08:43.280
updates because nothing depends upon it.


00:08:43.280 --> 00:08:44.280
It's fine.


00:08:44.280 --> 00:08:45.280
Yeah.


00:08:45.280 --> 00:08:46.280
Yeah.


00:08:46.280 --> 00:08:47.280
Pretty nice.


00:08:47.280 --> 00:08:48.280
And it's free for stuff.


00:08:48.280 --> 00:08:49.280
So for open source.


00:08:49.280 --> 00:08:50.280
Yeah, it's pretty nice.


00:08:50.280 --> 00:08:51.280
Great.


00:08:51.280 --> 00:08:52.280
Speaking of open source, PyPI is the place where it lives.


00:08:52.280 --> 00:08:54.120
And now you can describe it better, right?


00:08:54.120 --> 00:08:55.120
Yes.


00:08:55.120 --> 00:08:59.480
excited about this because like the cards project I was working on, I was sort of bummed


00:08:59.480 --> 00:09:06.240
that I had to put the readme in rest in or not rest but restructured text. And and now


00:09:06.240 --> 00:09:12.560
you don't anymore. So readme.md and a couple other variants of that extension are now supported


00:09:12.560 --> 00:09:18.400
on pypi.org. And we're linking to a couple articles, one of them, basically describing


00:09:18.400 --> 00:09:22.440
all the steps you have to do, there's a, there's a little bit of changes you have to do to


00:09:22.440 --> 00:09:26.600
your setup.py file and a couple other things


00:09:26.600 --> 00:09:28.280
and update all your tools.


00:09:28.280 --> 00:09:31.840
But for the most part, it just works and that's awesome.


00:09:31.840 --> 00:09:34.080
And then also, just recently,


00:09:34.080 --> 00:09:37.320
GitHub Flavored Markdown has been added.


00:09:37.320 --> 00:09:38.280
- Oh yeah, that's nice.


00:09:38.280 --> 00:09:40.960
GitHub Flavored Markdown has a little bit more, I think,


00:09:40.960 --> 00:09:42.580
from the stuff that I played with.


00:09:42.580 --> 00:09:45.040
- Like tables and cross-- - Yes, tables.


00:09:45.040 --> 00:09:46.880
- Markthrough and stuff.


00:09:46.880 --> 00:09:49.720
So that's nice and I'm looking forward


00:09:49.720 --> 00:09:52.800
a change in a couple projects to utilize that.


00:09:52.800 --> 00:09:55.640
And now the old legacy PyPI,


00:09:55.640 --> 00:09:59.320
which I think maybe they've taken from your legacy Python.


00:09:59.320 --> 00:10:00.720
- I love it.


00:10:00.720 --> 00:10:04.120
- Yeah, it still renders the descriptions as plain text,


00:10:04.120 --> 00:10:07.360
but they comment, don't worry, it's going away real soon.


00:10:07.360 --> 00:10:09.560
- Yeah, I was just talking to Ernest,


00:10:09.560 --> 00:10:11.100
who's doing some of the work there,


00:10:11.100 --> 00:10:15.000
and they're really, really close to just saying


00:10:15.000 --> 00:10:18.680
PyPI.org is where you go and doing a redirect.


00:10:18.680 --> 00:10:20.720
He said, you know that little scary bar across the top?


00:10:20.720 --> 00:10:22.520
He said, you can now dismiss that.


00:10:22.520 --> 00:10:24.640
But I wanted to just go away automatically.


00:10:24.640 --> 00:10:25.480
When does this happen?


00:10:25.480 --> 00:10:27.480
So it's really, PyPI.org is really close


00:10:27.480 --> 00:10:30.640
to being the thing, so maybe this will just hasten


00:10:30.640 --> 00:10:32.840
the move away from legacy PyPI


00:10:32.840 --> 00:10:35.200
with the descriptions looking funky.


00:10:35.200 --> 00:10:36.520
- Yeah, so hopefully.


00:10:36.520 --> 00:10:38.360
- Yeah, awesome, I'm really excited to see PyPI


00:10:38.360 --> 00:10:39.200
making some progress.


00:10:39.200 --> 00:10:40.920
It felt kind of stale for a little while,


00:10:40.920 --> 00:10:42.600
and it seems like it's really been rockin'


00:10:42.600 --> 00:10:43.440
the last nine months.


00:10:43.440 --> 00:10:47.560
- To be fair, even if your markdown gets displayed


00:10:47.560 --> 00:10:52.320
plain text on legacy pipe BI, that's the point of Markdown is it's still readable.


00:10:52.320 --> 00:10:55.720
So that's okay. Exactly. If it were HTML with lots of styles that have been


00:10:55.720 --> 00:10:58.360
different. That's right. Yeah. Nice. All right. So before we get to the next one,


00:10:58.360 --> 00:11:02.200
let me tell you about Datadog. It's a monitoring solution provides like deep


00:11:02.200 --> 00:11:07.160
visibility and tracking into your distributed apps. So your application,


00:11:07.160 --> 00:11:10.960
your data layer, your servers, your services, everything. So within minutes you'll be


00:11:10.960 --> 00:11:14.840
able to investigate bottlenecks and actually see where they are throughout


00:11:14.840 --> 00:11:19.560
your entire distributed app, which is pretty cool to put it together.


00:11:19.560 --> 00:11:24.200
So if you want to visualize your Python performance today, get started with a free trial.


00:11:24.200 --> 00:11:28.840
And also get that cool data dog t shirt visit Python bytes that FM slash data dog.


00:11:28.840 --> 00:11:33.160
Earlier I said talk Python, they both work but Python bytes that FM slash data dog.


00:11:33.160 --> 00:11:39.060
Speaking of web apps and distributed things and whatnot, I think there's a really interesting


00:11:39.060 --> 00:11:43.940
new web server that people should start paying attention to in the Python space.


00:11:43.940 --> 00:11:46.220
So you've probably heard of Nginx, right Brian?


00:11:46.220 --> 00:11:47.820
I know you don't do a ton of web stuff, but--


00:11:47.820 --> 00:11:48.940
- Yeah, definitely.


00:11:48.940 --> 00:11:52.260
- Nginx is kind of like the static front end server


00:11:52.260 --> 00:11:54.500
and load balancer thing for many web apps.


00:11:54.500 --> 00:11:59.300
Like on my sites I have Nginx hitting,


00:11:59.300 --> 00:12:01.700
like it takes all the requests, does the SSL stuff,


00:12:01.700 --> 00:12:04.620
any static resources, CSS, JavaScript, images,


00:12:04.620 --> 00:12:05.860
that just gets sent straight back


00:12:05.860 --> 00:12:07.900
and only the sort of data driven stuff


00:12:07.900 --> 00:12:11.040
makes its way back to the Python web server,


00:12:11.040 --> 00:12:13.260
which in my case is MicroWSGI.


00:12:13.260 --> 00:12:15.560
And microWISGY is really nice,


00:12:15.560 --> 00:12:18.200
but the NGINX folks have come up with this thing


00:12:18.200 --> 00:12:20.600
called NGINX Unit.


00:12:20.600 --> 00:12:23.620
And so the thing I wanna link to is this


00:12:23.620 --> 00:12:27.600
performance comparison between NGINX Unit and microWISGY.


00:12:27.600 --> 00:12:30.080
So microWISGY is written in C++.


00:12:30.080 --> 00:12:32.620
It's like one of the best high-performance things


00:12:32.620 --> 00:12:35.960
that will run and farm out your Python application,


00:12:35.960 --> 00:12:37.800
Pyramid, Flask, whatever.


00:12:37.800 --> 00:12:39.040
And it works really well,


00:12:39.040 --> 00:12:42.960
but NGINX Unit is a little more flexible


00:12:42.960 --> 00:12:47.200
And for example, you can configure it over a RESTful API


00:12:47.200 --> 00:12:49.300
instead of just config files.


00:12:49.300 --> 00:12:52.940
It'll run multiple languages and versions at the same time,


00:12:52.940 --> 00:12:57.560
improve TLS support, HTTP/2, which is cool.


00:12:57.560 --> 00:13:00.260
It'll run Python, multiple versions.


00:13:00.260 --> 00:13:03.420
It'll run Go, Ruby, JavaScript, whatever, right?


00:13:03.420 --> 00:13:05.380
So it'll run all these things in this one server.


00:13:05.380 --> 00:13:09.260
It's not just, I'm gonna run one flavor of Python.


00:13:09.260 --> 00:13:10.500
So anyway, it's pretty cool.


00:13:10.500 --> 00:13:12.100
And the thing I wanted to look at


00:13:12.100 --> 00:13:13.500
was this comparison.


00:13:13.500 --> 00:13:16.620
So there's this, I don't know who did it actually,


00:13:16.620 --> 00:13:20.060
a group that put together sort of a performance analysis


00:13:20.060 --> 00:13:24.260
and said we're going to slowly add more and more traffic,


00:13:24.260 --> 00:13:26.260
concurrent traffic, to both of these things


00:13:26.260 --> 00:13:29.620
running more or less a Hello World Flask app, right?


00:13:29.620 --> 00:13:31.260
And so pull up the pictures,


00:13:31.260 --> 00:13:32.220
and those of you who are listening,


00:13:32.220 --> 00:13:33.620
there's a little link, you can pull up the pictures,


00:13:33.620 --> 00:13:35.220
and this really tells it all.


00:13:35.220 --> 00:13:36.060
- Okay.


00:13:36.060 --> 00:13:36.880
- Do you got the pictures, Brian?


00:13:36.880 --> 00:13:37.720
- Yeah.


00:13:37.720 --> 00:13:39.060
- So if you look at that, there's like a line


00:13:39.060 --> 00:13:41.260
that's pretty much flat across this Nginx unit


00:13:41.260 --> 00:13:44.700
as you go from zero to 500 concurrent users


00:13:44.700 --> 00:13:47.220
doing 10,000 requests per second.


00:13:47.220 --> 00:13:49.500
And it's just kind of like, got it, no problem.


00:13:49.500 --> 00:13:52.380
MicroWSGI or micro, with or without threads,


00:13:52.380 --> 00:13:56.520
it's sort of a linear slope equals one downward trend


00:13:56.520 --> 00:13:58.640
of performance as you add more and more traffic.


00:13:58.640 --> 00:14:02.680
Like, soon as you get to a couple hundred users,


00:14:02.680 --> 00:14:05.540
it just really becomes, it goes from handling


00:14:05.540 --> 00:14:10.220
like 7,500 requests to handling 50 per second.


00:14:10.220 --> 00:14:12.120
I mean, it really falls over.


00:14:12.120 --> 00:14:13.820
So I thought that was pretty interesting.


00:14:13.820 --> 00:14:15.960
This whole Nginx unit thing seems like it might be


00:14:15.960 --> 00:14:18.760
a really powerful and new way to run


00:14:18.760 --> 00:14:20.240
some nice backend stuff.


00:14:20.240 --> 00:14:22.080
- Okay, so the high numbers are better.


00:14:22.080 --> 00:14:22.920
You wanna keep--


00:14:22.920 --> 00:14:24.840
- Yeah, those are requests per second, basically.


00:14:24.840 --> 00:14:27.240
Yeah, so it just, once you do 100,000 requests,


00:14:27.240 --> 00:14:29.760
it goes to zero on Microwave's game


00:14:29.760 --> 00:14:32.040
where it's still basically flat on Nginx unit.


00:14:32.040 --> 00:14:33.440
So really, really cool.


00:14:33.440 --> 00:14:36.520
I think that's quite promising in terms of


00:14:36.520 --> 00:14:39.800
making Python faster and scale better,


00:14:39.800 --> 00:14:42.880
which is super important because people move


00:14:42.880 --> 00:14:44.680
to other languages, Go or whatever,


00:14:44.680 --> 00:14:46.520
'cause like, well, we need this concurrency.


00:14:46.520 --> 00:14:48.480
Or you could just run something that runs it better.


00:14:48.480 --> 00:14:50.000
- Well, so they have a little note that says


00:14:50.000 --> 00:14:52.400
it's still in beta, not for production.


00:14:52.400 --> 00:14:53.360
- Yeah, it's pretty new.


00:14:53.360 --> 00:14:54.580
It's not quite ready.


00:14:54.580 --> 00:14:57.640
So my message, my takeaway is I'm gonna start


00:14:57.640 --> 00:14:58.940
paying attention to this thing.


00:14:58.940 --> 00:15:00.080
Maybe switch to it at some point,


00:15:00.080 --> 00:15:01.720
but yeah, don't switch to it yet.


00:15:01.720 --> 00:15:03.280
- I wonder what version number it is.


00:15:03.280 --> 00:15:04.120
Doesn't say.


00:15:04.120 --> 00:15:05.440
- It's gotta be zero something, right?


00:15:05.440 --> 00:15:08.040
(both laughing)


00:15:08.040 --> 00:15:10.040
- Yeah, I don't know either what version number it is.


00:15:10.040 --> 00:15:11.040
That's a good question.


00:15:11.040 --> 00:15:13.000
- Okay. - Cool, very funny.


00:15:13.000 --> 00:15:14.240
All right, awesome.


00:15:14.240 --> 00:15:15.560
You've got something on looping, right?


00:15:15.560 --> 00:15:18.440
- Trey Hunter, who was on the show last week,


00:15:18.440 --> 00:15:19.280
didn't he do last week?


00:15:19.280 --> 00:15:22.720
- He was your stand-in, your impersonator last week.


00:15:22.720 --> 00:15:25.920
- Well, he's got an article, which is a really good read,


00:15:25.920 --> 00:15:28.120
and I'm gonna not do it justice,


00:15:28.120 --> 00:15:30.400
but it's called "Loop Better,


00:15:30.400 --> 00:15:33.320
a Deeper Look at Iteration in Python."


00:15:33.320 --> 00:15:35.520
And I'm glancing through this,


00:15:35.520 --> 00:15:38.020
I'm thinking, you know, I already know how to loop in Python.


00:15:38.020 --> 00:15:42.340
But the general, he shows a few gotcha examples


00:15:42.340 --> 00:15:44.700
of generators used in loops,


00:15:44.700 --> 00:15:46.720
and generators are, like for instance,


00:15:46.720 --> 00:15:49.740
even a list comprehension is a generator.


00:15:49.740 --> 00:15:51.240
You can't loop twice.


00:15:51.240 --> 00:15:54.780
And if you use containment check,


00:15:54.780 --> 00:15:57.720
like is nine in my generator,


00:15:57.720 --> 00:16:00.480
it'll work once and then it won't work the next time.


00:16:00.480 --> 00:16:01.600
>>But it's not in there anymore.


00:16:01.600 --> 00:16:04.100
And your collection's half the size.


00:16:04.100 --> 00:16:08.220
And it's a little strange and it just behaves weird.


00:16:08.220 --> 00:16:10.480
I mean, I don't know if I've ever run into these,


00:16:10.480 --> 00:16:14.380
but it hurt my head at first trying to figure out,


00:16:14.380 --> 00:16:16.400
I didn't know why these weren't working.


00:16:16.400 --> 00:16:20.160
So then the article goes on to describe in detail,


00:16:20.160 --> 00:16:22.960
really the iterator protocol and what iterators,


00:16:22.960 --> 00:16:25.120
iterable sequences and generators


00:16:25.120 --> 00:16:27.280
and all that good stuff is.


00:16:27.280 --> 00:16:29.500
And then go back and look at those gotchas again


00:16:29.500 --> 00:16:31.420
and explain with that information


00:16:31.420 --> 00:16:33.680
why they behave as they do.


00:16:33.680 --> 00:16:36.720
And I think this is just a well-written article


00:16:36.720 --> 00:16:39.760
that'll be gonna make you a smarter Python programmer


00:16:39.760 --> 00:16:40.600
to read it.


00:16:40.600 --> 00:16:41.420
- Yeah, it's cool.


00:16:41.420 --> 00:16:42.260
Definitely covers a lot.


00:16:42.260 --> 00:16:43.160
Well done, Trey.


00:16:43.160 --> 00:16:45.000
I think this is one of those concepts


00:16:45.000 --> 00:16:46.400
where if you come from a language


00:16:46.400 --> 00:16:48.320
that doesn't have generators,


00:16:48.320 --> 00:16:50.180
this concept of generators,


00:16:50.180 --> 00:16:53.440
or maybe if you just never really use them,


00:16:53.440 --> 00:16:56.520
the stuff that comes out of these generators,


00:16:56.520 --> 00:16:59.500
it looks like you just treat it like a normal collection.


00:16:59.500 --> 00:17:01.400
But you're right, they definitely don't behave


00:17:01.400 --> 00:17:03.040
like normal collections in a lot of ways.


00:17:03.040 --> 00:17:04.680
and you can find these subtle bugs.


00:17:04.680 --> 00:17:06.520
So nice to have them all covered like that.


00:17:06.520 --> 00:17:08.020
- Yeah, and one of the things,


00:17:08.020 --> 00:17:09.340
I guess I'll go a little bit,


00:17:09.340 --> 00:17:12.960
is that generators, it's this iterator protocol,


00:17:12.960 --> 00:17:16.080
and you keep it internally in a loop,


00:17:16.080 --> 00:17:18.360
Python will call the next operator,


00:17:18.360 --> 00:17:20.640
and then eventually it gets to the end.


00:17:20.640 --> 00:17:22.320
There's not a way to reset them.


00:17:22.320 --> 00:17:23.160
So they--


00:17:23.160 --> 00:17:24.080
- Yeah, they're done.


00:17:24.080 --> 00:17:25.640
- They're done, and you gotta generate,


00:17:25.640 --> 00:17:28.160
but you can generate, however you generated them,


00:17:28.160 --> 00:17:29.400
you can generate another one.


00:17:29.400 --> 00:17:30.440
- Yeah, pretty cool.


00:17:30.440 --> 00:17:32.400
So the final thing that I wanna cover


00:17:32.400 --> 00:17:34.840
is a little bit like the first one.


00:17:34.840 --> 00:17:36.240
It's a bit of a warning,


00:17:36.240 --> 00:17:38.680
but this is not an automated system like GitHub saying,


00:17:38.680 --> 00:17:40.040
"Hey, there's all these repos.


00:17:40.040 --> 00:17:41.840
"We're gonna tell you there's this problem."


00:17:41.840 --> 00:17:45.160
It's just something people should be aware of.


00:17:45.160 --> 00:17:47.520
So in Django, there's these configuration files,


00:17:47.520 --> 00:17:49.720
and there's this part we can set debug true or false,


00:17:49.720 --> 00:17:51.240
and there's like a little comment by it that says,


00:17:51.240 --> 00:17:53.740
"Do not set this to be true in production."


00:17:53.740 --> 00:17:56.560
However, do you think everyone goes into it,


00:17:56.560 --> 00:17:58.560
the big long config file,


00:17:58.560 --> 00:18:00.320
and fixes that before they push it out?


00:18:00.320 --> 00:18:01.960
No, no, they don't.


00:18:01.960 --> 00:18:05.280
So the article is called, "Misconfigured Django apps


00:18:05.280 --> 00:18:09.720
are exposing secret API keys and database passwords."


00:18:09.720 --> 00:18:11.160
That sounds about right. - Oh no!


00:18:11.160 --> 00:18:12.000
- No! - Yeah.


00:18:12.000 --> 00:18:14.640
- So it says, "Researchers have begun stumbling


00:18:14.640 --> 00:18:17.240
upon misconfigured Django apps that are exposing


00:18:17.240 --> 00:18:19.580
information like these API keys,"


00:18:19.580 --> 00:18:20.920
could be your Stripe key, whatever.


00:18:20.920 --> 00:18:25.040
"In just like a week, they discovered 28,000 Django apps


00:18:25.040 --> 00:18:28.660
where the admin left the debug mode enabled."


00:18:28.660 --> 00:18:31.400
And then you see, it'll be like screenshots


00:18:31.400 --> 00:18:33.780
of pulling up just random apps on the internet.


00:18:33.780 --> 00:18:37.520
Here's the AWS secret key, here's the database password,


00:18:37.520 --> 00:18:40.520
et cetera, et cetera, just listed in the debug tools.


00:18:40.520 --> 00:18:42.520
So that sounds bad, right?


00:18:42.520 --> 00:18:45.600
- Yeah, well, especially you probably leave that on


00:18:45.600 --> 00:18:47.560
while you're developing it so that you can look


00:18:47.560 --> 00:18:48.380
at all that stuff.


00:18:48.380 --> 00:18:51.040
- Yeah, it sounds really bad, and it pretty much is.


00:18:51.040 --> 00:18:52.980
It says, just skimming through a few servers,


00:18:52.980 --> 00:18:55.380
researchers found debug mode were exposing


00:18:55.380 --> 00:18:58.140
extremely sensitive information that would allow


00:18:58.140 --> 00:19:01.740
malicious actor full access to the app owners data.


00:19:01.740 --> 00:19:06.720
But they were really, I like that they were really clear to emphasize this is not a failure


00:19:06.720 --> 00:19:08.760
on the Django side.


00:19:08.760 --> 00:19:11.660
But in fact, you're just not supposed to do this in production.


00:19:11.660 --> 00:19:14.720
And somebody on Twitter was like, it would be so awesome if there was like a comment


00:19:14.720 --> 00:19:17.820
or like a little note in Django that said, don't put this in production.


00:19:17.820 --> 00:19:21.980
And then of course, right under there's a screenshot of never run this in production


00:19:21.980 --> 00:19:23.020
in debug mode.


00:19:23.020 --> 00:19:25.500
It's not supposedly not Django's fault.


00:19:25.500 --> 00:19:29.460
However, maybe there needs to be more than just on or off.


00:19:29.460 --> 00:19:32.100
Maybe there needs to be a, I'm debugging my app,


00:19:32.100 --> 00:19:35.060
but I don't want to expose all the API keys mode


00:19:35.060 --> 00:19:35.900
or something.


00:19:35.900 --> 00:19:38.580
- Yeah, for sure, I think.


00:19:38.580 --> 00:19:41.660
Or maybe just the debug stuff is off by default,


00:19:41.660 --> 00:19:42.780
and you have to turn it on.


00:19:42.780 --> 00:19:44.060
And the act of turning it on,


00:19:44.060 --> 00:19:45.300
you go to the section and you read that.


00:19:45.300 --> 00:19:46.940
But you might never go and read that part


00:19:46.940 --> 00:19:49.100
of the config file, so you just don't know, right?


00:19:49.100 --> 00:19:52.100
I mean, Django is famous for just getting stuff up


00:19:52.100 --> 00:19:54.780
really easy, I don't have to be a super developer.


00:19:54.780 --> 00:19:56.580
So maybe you just don't know, right?


00:19:56.580 --> 00:19:57.740
Sort of make things worse,


00:19:57.740 --> 00:20:00.660
a security researcher, Victor Givas, Givas,


00:20:00.660 --> 00:20:03.540
said some of these apps running Django


00:20:03.540 --> 00:20:05.060
have already been compromised.


00:20:05.060 --> 00:20:09.260
And he found one server running the Weebly web shell.


00:20:09.260 --> 00:20:10.220
That's bad.


00:20:10.220 --> 00:20:12.220
I mean, they were somehow able to entirely


00:20:12.220 --> 00:20:15.300
take over the computer and just SSH into it.


00:20:15.300 --> 00:20:18.460
And so he said, "I've been notifying server owners


00:20:18.460 --> 00:20:19.760
"about their leaky Django apps.


00:20:19.760 --> 00:20:23.200
"At the moment, we've reported 1,822 servers.


00:20:23.200 --> 00:20:24.800
Well, 143 were fixed.


00:20:24.800 --> 00:20:26.740
(laughing)


00:20:26.740 --> 00:20:27.720
Not so many, right?


00:20:27.720 --> 00:20:31.020
- Yeah, or taken offline, which the taken offline


00:20:31.020 --> 00:20:32.920
tells me that there's some people out there


00:20:32.920 --> 00:20:34.680
that just don't know how to do that yet,


00:20:34.680 --> 00:20:36.240
so they'll just take it down.


00:20:36.240 --> 00:20:37.320
- Yeah, they're just like, you know what?


00:20:37.320 --> 00:20:39.160
My little toy site is not worth getting hacked,


00:20:39.160 --> 00:20:40.480
I'm just taking it off.


00:20:40.480 --> 00:20:41.880
Right, right, right.


00:20:41.880 --> 00:20:44.960
Well, so I guess, takeaway, if you're running Django,


00:20:44.960 --> 00:20:47.000
site, make sure it's not in debug mode,


00:20:47.000 --> 00:20:48.840
or you could be a statistic.


00:20:48.840 --> 00:20:49.680
Don't be a statistic.


00:20:49.680 --> 00:20:52.120
- Yes, don't be a statistic.


00:20:52.120 --> 00:20:55.720
All right, that's it for our official six items.


00:20:55.720 --> 00:20:56.840
Brian, you got anything else?


00:20:56.840 --> 00:20:59.160
- Yeah, I wanted to, I just got pinged today


00:20:59.160 --> 00:21:03.800
to tell me that in episode 70 we covered Wagtail,


00:21:03.800 --> 00:21:06.360
which is a CMS written in Python.


00:21:06.360 --> 00:21:10.440
But the Wagtail team is trying to get some new features out


00:21:10.440 --> 00:21:12.400
and they're running a Kickstarter campaign


00:21:12.400 --> 00:21:15.020
to try to fund that.


00:21:15.020 --> 00:21:16.920
So I think it's a good thing.


00:21:16.920 --> 00:21:18.200
They're not looking for that much money,


00:21:18.200 --> 00:21:20.760
so if everybody pitches in a little bit, it'd be good.


00:21:20.760 --> 00:21:21.600
So we've got a link.


00:21:21.600 --> 00:21:24.220
- Yeah, they're pretty close to their goal, right?


00:21:24.220 --> 00:21:25.640
They got 10 days left.


00:21:25.640 --> 00:21:27.360
They need, they're about halfway there.


00:21:27.360 --> 00:21:28.440
- They should get there, hopefully.


00:21:28.440 --> 00:21:30.720
- Yeah, Wagtail's one of the really nice CMSs


00:21:30.720 --> 00:21:31.960
that's based on Django.


00:21:31.960 --> 00:21:34.140
Hopefully, it's a bug mode equals false.


00:21:34.140 --> 00:21:35.040
Yeah, pretty nice stuff.


00:21:35.040 --> 00:21:39.040
So yeah, if you care at all about Wagtail or the CMSs,


00:21:39.040 --> 00:21:40.720
you know, go in there and help them out a bit.


00:21:40.720 --> 00:21:43.560
- I wanted to mention, I've had a lot of great feedback


00:21:43.560 --> 00:21:44.920
on testing code.


00:21:44.920 --> 00:21:47.160
I've been doing a kind of a series


00:21:47.160 --> 00:21:50.120
of getting an open source project out


00:21:50.120 --> 00:21:53.480
and all of the sort of the testing requirements around it


00:21:53.480 --> 00:21:57.160
and talking about some of the common test design patterns.


00:21:57.160 --> 00:21:58.880
And that's been going well.


00:21:58.880 --> 00:22:01.120
And I've actually been learning a lot


00:22:01.120 --> 00:22:02.320
about running an open source.


00:22:02.320 --> 00:22:05.200
I thought, you know, lately I've just been using GitHub


00:22:05.200 --> 00:22:07.620
for just like a revision control,


00:22:07.620 --> 00:22:10.420
but actually running an open source project,


00:22:10.420 --> 00:22:12.220
even if it's just got a couple of contributors,


00:22:12.220 --> 00:22:13.060
you learn a lot.


00:22:13.060 --> 00:22:15.240
So hopefully I'll get some of those learnings


00:22:15.240 --> 00:22:16.560
written up sometime soon.


00:22:16.560 --> 00:22:17.400
>>You definitely should.


00:22:17.400 --> 00:22:18.760
That's a really cool project you're doing.


00:22:18.760 --> 00:22:19.600
So keep it up.


00:22:19.600 --> 00:22:20.800
Yeah. You got any news?


00:22:20.800 --> 00:22:21.800
No news right now.


00:22:21.800 --> 00:22:25.100
Nothing to report, but I'm always working on new projects.


00:22:25.100 --> 00:22:26.300
I will let you know soon.


00:22:26.300 --> 00:22:27.200
All right.


00:22:27.200 --> 00:22:28.400
Well, thanks a lot for today.


00:22:28.400 --> 00:22:29.100
Yeah, you bet.


00:22:29.100 --> 00:22:31.700
Thank you for listening to Python Bytes.


00:22:31.700 --> 00:22:34.200
Follow the show on Twitter via @pythonbytes.


00:22:34.200 --> 00:22:37.400
That's Python Bytes as in B-Y-T-E-S.


00:22:37.400 --> 00:22:40.800
And get the full show notes at pythonbytes.fm.


00:22:40.800 --> 00:22:42.400
If you have a news item you want featured,


00:22:42.400 --> 00:22:44.800
just visit pythonbytes.fm and send it our way.


00:22:44.800 --> 00:22:48.000
We're always on the lookout for sharing something cool.


00:22:48.000 --> 00:22:51.360
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:22:51.360 --> 00:22:54.600
Thank you for listening and sharing this podcast with your friends and colleagues.

