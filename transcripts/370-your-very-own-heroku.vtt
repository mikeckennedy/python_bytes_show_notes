WEBVTT

00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.000 --> 00:00:12.500
This is episode 370, recorded February 6th, 2024. I'm Michael Kennedy.

00:00:12.500 --> 00:00:13.600
And I'm Brian Okken.

00:00:13.600 --> 00:00:16.600
And this episode is brought to you by us.

00:00:16.600 --> 00:00:18.300
Check out our courses.

00:00:18.300 --> 00:00:22.900
The ones over at Talk Python Training, we have 250 hours of them there, including some from Brian.

00:00:22.900 --> 00:00:27.100
But Brian also has the complete pytest course, which just got finished up.

00:00:27.100 --> 00:00:30.600
So check that out as well. Links in the show notes, of course.

00:00:30.600 --> 00:00:36.400
And connect with us on Mastodon or all over there, the show, Brian and me.

00:00:36.400 --> 00:00:38.800
And now with that, Brian, how are you doing?

00:00:38.800 --> 00:00:43.300
I'm doing good. It's funny, the date, one of the things that I've noticed lately,

00:00:43.300 --> 00:00:46.100
I've actually had to write a couple checks recently.

00:00:46.100 --> 00:00:54.300
And the hard part is not the day, because my watch tells me what day it is, or the day, you know, the day of the month.

00:00:54.300 --> 00:00:59.900
And I usually remember the month, but I'm still having trouble with 2024, man.

00:00:59.900 --> 00:01:02.800
So the year is a problem. It's definitely a problem.

00:01:02.800 --> 00:01:03.900
Yeah. Anyway.

00:01:03.900 --> 00:01:07.400
When I got to write stuff these days, it's like I break out the claw.

00:01:07.400 --> 00:01:10.400
I used to write so good when I was in grad school.

00:01:10.400 --> 00:01:13.400
It was like beautiful writing, right?

00:01:13.400 --> 00:01:16.200
Not cursive, but just really fine print.

00:01:16.200 --> 00:01:18.100
And it was excellent to read.

00:01:18.100 --> 00:01:20.900
Now you'd be like, did you even go to school?

00:01:20.900 --> 00:01:22.100
What is wrong with you?

00:01:22.100 --> 00:01:25.700
Like, no, I can't write. I'm sorry. The claw is not working today.

00:01:25.700 --> 00:01:27.300
That's funny. I write all the time.

00:01:27.300 --> 00:01:33.700
And I was writing, I found some old ID cards from like high school and junior high.

00:01:33.700 --> 00:01:42.300
And I showed them to my daughter and she's like, how is your hand, like your signature is the same now as it was in like eighth grade.

00:01:42.300 --> 00:01:43.200
Incredible.

00:01:43.200 --> 00:01:44.700
I don't know. I just nailed it, man.

00:01:44.700 --> 00:01:48.200
So anyway, or I haven't gotten any better since eighth grade.

00:01:48.200 --> 00:01:50.300
Right off the bat. That's awesome.

00:01:50.300 --> 00:01:50.800
Yeah.

00:01:50.800 --> 00:01:53.100
What topics are connecting with you today?

00:01:53.100 --> 00:01:55.500
Well, a couple of things.

00:01:55.500 --> 00:01:59.200
I've been converting a lot of projects to Python 3.12.

00:01:59.200 --> 00:02:04.000
So, and I know it's been out for a while since December, I think.

00:02:04.000 --> 00:02:05.400
Is it December?

00:02:05.400 --> 00:02:06.900
But a little bit before then.

00:02:06.900 --> 00:02:07.900
I can't remember.

00:02:07.900 --> 00:02:09.500
Yeah, like November or something like that.

00:02:09.500 --> 00:02:10.000
Okay.

00:02:10.000 --> 00:02:13.800
So, but I wanted to do like a summary.

00:02:13.800 --> 00:02:18.900
So I've been thinking about like, should I upgrade projects?

00:02:18.900 --> 00:02:25.000
So some of my projects are still in 3.11, which is fine, but hopefully I'm kind of like halfway between 3.11 and 3.12.

00:02:25.000 --> 00:02:32.100
So there's an article called, and we do this every couple of years, I guess, a summary of major changes between Python versions.

00:02:32.100 --> 00:02:35.900
It's like reasons, you know, look back as to why you might want to update.

00:02:35.900 --> 00:02:39.900
And this is kind of a fun, fun walk through.

00:02:39.900 --> 00:02:45.500
So hopefully you're not still on 3.7 because 3.7 and earlier are all end of life.

00:02:45.500 --> 00:02:47.800
You're living in the past if you're on 3.7.

00:02:47.800 --> 00:02:52.600
Yeah, but some of those things that, some of the things that came in, it's kind of a nice thing looking.

00:02:52.600 --> 00:02:57.600
We've had f strings since 3.6, so definitely use f strings everywhere.

00:02:57.600 --> 00:03:01.300
And then underscores in numeric literals.

00:03:01.300 --> 00:03:02.300
And you know what?

00:03:02.300 --> 00:03:06.900
It's been around since 3.6, but I've just started using this.

00:03:06.900 --> 00:03:15.200
I know it's been around for a while, but whenever I need to do a constant or something like that, I'm like, oh, yeah, we can put underscores in there.

00:03:15.200 --> 00:03:16.200
It's nice.

00:03:16.200 --> 00:03:17.200
Yeah, I like that one a lot.

00:03:17.200 --> 00:03:18.900
Actually, I've been doing that a lot too.

00:03:18.900 --> 00:03:20.200
It really makes a difference.

00:03:20.200 --> 00:03:23.200
Is it 10,000 or 100,000 or is it a million or 100,000?

00:03:23.200 --> 00:03:25.200
Yeah, it's really nice.

00:03:25.200 --> 00:03:29.700
Anyway, a couple and data classes also been around since 3.7.

00:03:29.700 --> 00:03:33.400
Anyway, those ancient history now, let's jump ahead.

00:03:33.400 --> 00:03:36.100
I'm just going to highlight a few of these for people.

00:03:36.100 --> 00:03:43.600
3.8, of course, we had the walrus operator in 3.8 and self-documenting f strings.

00:03:43.600 --> 00:03:46.200
So this is something that I've been using all the time now.

00:03:46.200 --> 00:03:55.200
And for some reason, I thought it was later, but putting equal sign in a f string variable so that it prints out like variable name equals value.

00:03:55.200 --> 00:03:57.200
Super handy when debugging.

00:03:57.200 --> 00:03:58.700
So that's great.

00:03:58.700 --> 00:04:02.700
3.9 brought us a whole bunch of great stuff with typing.

00:04:02.700 --> 00:04:07.700
So people were starting to use a lot of typing in Python even before then.

00:04:07.700 --> 00:04:15.200
But one of the things was if you wanted to type a list or a dict, you had to say from typing import capital dict or something.

00:04:15.200 --> 00:04:17.200
And in 3.9, you don't have to.

00:04:17.200 --> 00:04:19.700
You can just do the lowercase, 3.9 and above.

00:04:19.700 --> 00:04:21.200
So that's really handy.

00:04:21.200 --> 00:04:28.200
And I use that a lot with even when I'm not type checking, but if I want to tell people what the parameter list looks like.

00:04:28.200 --> 00:04:35.700
So I've been more using -- I do use the typing, like type checkers, PyPy and stuff.

00:04:35.700 --> 00:04:36.700
What is it?

00:04:36.700 --> 00:04:37.700
Yeah, I don't know.

00:04:37.700 --> 00:04:38.700
I can't remember.

00:04:38.700 --> 00:04:39.700
It's all built in.

00:04:39.700 --> 00:04:46.200
But mostly I'm doing it not for correctness or anything, but for readability.

00:04:46.200 --> 00:04:48.200
So that's one of the things I like.

00:04:48.200 --> 00:04:49.200
And editors.

00:04:49.200 --> 00:04:54.700
One other thing that was really notable in that release was they added remove prefix, remove suffix.

00:04:54.700 --> 00:04:55.700
Yeah.

00:04:55.700 --> 00:04:56.700
Because -- to strings.

00:04:56.700 --> 00:04:59.200
Because there was strip, L strip, R strip.

00:04:59.200 --> 00:05:02.200
It looks like I could put a string in there and it'll take it out.

00:05:02.200 --> 00:05:04.700
Like if you could say L strip ABC.

00:05:04.700 --> 00:05:14.200
And you have the string ABC because it would actually remove four letters, not three, because it just says if any of these letters appear in the beginning, start taking them away.

00:05:14.200 --> 00:05:15.200
Right?

00:05:15.200 --> 00:05:20.200
And people imagine they were this remove -- like this word at the beginning, take it away if it appears.

00:05:20.200 --> 00:05:21.700
And so this is here.

00:05:21.700 --> 00:05:23.700
And I always try to get it here and I should be using it more.

00:05:23.700 --> 00:05:30.200
Actually, this is another thing that I've just started using more now, even though it's been since 3.9 is this remove prefix and suffix.

00:05:30.200 --> 00:05:36.200
So kind of fun to look back and look at all the fun goodies and go, wow, it's been in for a long time.

00:05:36.200 --> 00:05:37.700
I should totally use that more.

00:05:37.700 --> 00:05:42.700
And sometimes people postpone it because they're supporting multiple versions of Python.

00:05:42.700 --> 00:05:51.700
So this is another reason why this is a great thing to have these kind of lists around is when you start deprecating old versions, you can look back and go, oh, yeah, I can use this now.

00:05:51.700 --> 00:05:54.700
Since it's been -- we're only doing 3.8 and above.

00:05:54.700 --> 00:05:58.700
So we can -- or 3.9 and above, you can use some of these things.

00:05:58.700 --> 00:06:01.200
3.10 brought us structural pattern matching.

00:06:01.200 --> 00:06:03.200
I can't believe it's been that long.

00:06:03.200 --> 00:06:07.200
But, yeah, we now have switch cases in Python.

00:06:07.200 --> 00:06:10.700
Well, they're match case statements, but totally fun.

00:06:10.700 --> 00:06:18.200
And then also one of the big things that are typing time savers for me is to be able to use the pipe operator for unions.

00:06:18.200 --> 00:06:27.200
So I'm not going to go through all of these, but it's a fun look at -- oh, 3.10 also brought us slots in data classes.

00:06:27.200 --> 00:06:28.700
That's pretty cool.

00:06:28.700 --> 00:06:33.700
But I've had no problems with switching over to 3.12 in any of my projects.

00:06:33.700 --> 00:06:37.700
So I think people should just jump the gun and try it.

00:06:37.700 --> 00:06:46.700
One of the cool things with this article comes up -- I'm going to swing down to the bottom -- is some of the useful things in converting from different versions.

00:06:46.700 --> 00:06:50.700
There's different changes to the typing extensions and stuff.

00:06:50.700 --> 00:06:57.200
But there's a project called PyUpgrade that will allow you to just automatically upgrade a lot of your source code.

00:06:57.200 --> 00:07:00.200
And I think that's cool, and I've done that for a couple projects.

00:07:00.200 --> 00:07:10.200
But also I just sort of upgrade, and I leave the code alone often unless I go back and it bugs me, some of the things that bug me.

00:07:10.200 --> 00:07:13.700
Do you proactively PyUpgrade your projects?

00:07:13.700 --> 00:07:17.200
I haven't used PyUpgrade. It's looking interesting. Maybe I should.

00:07:17.200 --> 00:07:19.700
I've used fluent, though.

00:07:19.700 --> 00:07:21.200
I think it's fluent is what it's called.

00:07:21.200 --> 00:07:26.700
Where you can just say, "Convert every string format of any variety to an f-string."

00:07:26.700 --> 00:07:31.200
And that to me was like, "Just f-strings. Just give me f-strings. They're so much more readable."

00:07:31.200 --> 00:07:38.700
But other ones, if it upgrades an optional of a thing to thing-pipe-none, I don't necessarily want that.

00:07:38.700 --> 00:07:43.200
There's certain things where I know I could have a different syntax, but I kind of like it the way it is.

00:07:43.200 --> 00:07:45.200
So I don't necessarily do that.

00:07:45.200 --> 00:07:53.200
Although I do use rough format these days, and I think rough format kind of does that as well, but not as aggressively.

00:07:53.200 --> 00:07:58.200
Yeah, one of the things that article brings up, and I'm curious about this with rough, I'm pretty sure they do this as well.

00:07:58.200 --> 00:08:07.200
But it mentions that black, if you're using black to reformat things, the formatting at least, there's some conventions that have changed,

00:08:07.200 --> 00:08:16.700
or some different things about different versions of the language, but it respects the requires Python setting in your pyproject.toml.

00:08:16.700 --> 00:08:19.200
So if you have that set, black will do that.

00:08:19.200 --> 00:08:22.200
I'll have to look that up. I'm not sure if rough does that.

00:08:22.200 --> 00:08:26.700
Anyway, fun article to look back and go, "Hey, why am I not using these features now?"

00:08:26.700 --> 00:08:28.200
Because we've already upgraded.

00:08:28.200 --> 00:08:32.200
Yeah, excellent. I think rough does, but I don't know 100% for sure either.

00:08:32.200 --> 00:08:36.200
All right, Brian, you want to talk about Heroku, sort of?

00:08:36.200 --> 00:08:37.200
Sure.

00:08:37.200 --> 00:08:46.200
All right. So Heroku, you know, the web hosting platform as a service, like, hey, you just get push, and then your Python code runs,

00:08:46.200 --> 00:08:56.200
or whatever other platform you want to run on probably runs, and you can get these managed databases, and you can get the, it'll just run this stuff,

00:08:56.200 --> 00:08:59.200
and kind of like Docker, but you don't really have to think about it.

00:08:59.200 --> 00:09:08.200
It was the darling of many tutorials and other things among, as well as people using it, because it had a free tier, and completely reasonably,

00:09:08.200 --> 00:09:12.200
they said, "You know what? You can't just run software for free for everyone. We're going to stop this."

00:09:12.200 --> 00:09:13.200
But it's a hassle, right?

00:09:13.200 --> 00:09:19.200
So people might have had the feeling like, "Hey, I'm, I had this change forced upon me against my will.

00:09:19.200 --> 00:09:28.200
I was using this service, and then that service changed, and I'm committed to that service, but I don't necessarily like the way it's changed," right?

00:09:28.200 --> 00:09:33.200
And as you know, as everyone knows, I've been on this Docker kick, and all the things that you can get out of it,

00:09:33.200 --> 00:09:41.200
and how awesome, once you get some kind of infrastructure set up to run those kinds of things, how easy it is to adopt additional stuff, right?

00:09:41.200 --> 00:09:47.200
So I want to tell people about Doku, doku.com, with two Ks, D-O-K-K-U.com.

00:09:47.200 --> 00:09:52.200
It is a open source platform as a service alternative to Heroku.

00:09:52.200 --> 00:10:00.200
So basically, here's what you do. You create a $5 server somewhere, maybe 10 if you want to go crazy, like DigitalOcean or something like that.

00:10:00.200 --> 00:10:05.200
You go in there, you run doku install, and it just runs on top of Docker.

00:10:05.200 --> 00:10:13.200
And then once that foundation is created, you can just go and do all the stuff that you would normally do with Heroku, but here, right?

00:10:13.200 --> 00:10:21.200
So you install it with just Wget or curl or whatever, set some information, set some domains, and then you create, go and create your app, right?

00:10:21.200 --> 00:10:35.200
And then later, somewhere down the line, you can come over and you just say, basically, doku get sync, give it your app, give it your GitHub repo or your Git repo,

00:10:35.200 --> 00:10:42.200
and it'll go clone it, create the equivalent of dynamos that they had over on Heroku, and just run it on your machine.

00:10:42.200 --> 00:10:48.200
You give it, and also it integrates with many of the same constructs that they had at Heroku.

00:10:48.200 --> 00:10:57.200
So with Heroku, you had, what was it called, a proc file or something? I can't, I don't, I didn't do Heroku, so I don't really know.

00:10:57.200 --> 00:11:04.200
But you basically had this file that was kind of like a Docker file that said, when the app starts, this is the command to make it run, right?

00:11:04.200 --> 00:11:10.200
Like a flask run or uvicorn run or whatever, right?

00:11:10.200 --> 00:11:14.200
Like you just tell it the stuff to do to start. And so you basically do that, and then you just get push.

00:11:14.200 --> 00:11:21.200
And then even support scale out, right? So you can say, hey, I would like to scale up my web app to have two nodes. Boom, done.

00:11:21.200 --> 00:11:24.200
Do that on your local machine, and off you go. That's cool, right?

00:11:24.200 --> 00:11:32.200
Yeah, I mean, I assume you can use, you'd have to set up like multiple droplets if you're using like a database and stuff, but.

00:11:32.200 --> 00:11:35.200
No, it just runs multiple containers in a cluster on there.

00:11:35.200 --> 00:11:36.200
Oh, interesting.

00:11:36.200 --> 00:11:43.200
Right? So everything this does is it basically is orchestrating Docker on some particular piece of hardware that you set up.

00:11:43.200 --> 00:11:52.200
Like I would recommend a VM, not a real piece of hardware for most people, although the DHH, leaving the cloud makes sense if you're going to have something huge, right?

00:11:52.200 --> 00:11:59.200
But in general, get like a $10 VM on one of the clouds that is more focused on that, like DigitalOcean.

00:11:59.200 --> 00:12:06.200
And then you just, once you run this, it'll just scale up and create and build all the Docker containers and put them in networks together and all that kind of stuff.

00:12:06.200 --> 00:12:07.200
Wow.

00:12:07.200 --> 00:12:08.200
Yeah.

00:12:08.200 --> 00:12:09.200
Pretty neat.

00:12:09.200 --> 00:12:14.200
Yeah. Oh, Kim is pointing out maybe that I'm, I say Doku, he's right, I say that would be Doku.

00:12:14.200 --> 00:12:15.200
Maybe.

00:12:15.200 --> 00:12:19.200
Okay. I think, well, D-O-K, Doc is probably not Doku.

00:12:19.200 --> 00:12:22.200
But it's D-O-K, oh yeah, it's two Ks.

00:12:22.200 --> 00:12:24.200
From Docker, right? Probably, yeah.

00:12:24.200 --> 00:12:29.200
I should know this, having a last name with two Ks in it. Yeah, it would be totally Doku.

00:12:29.200 --> 00:12:32.200
Doku, okay. Because it's a riff on Docker, right?

00:12:32.200 --> 00:12:33.200
Yeah.

00:12:33.200 --> 00:12:36.200
There's also a ton of plugins you can get for it, which is pretty cool.

00:12:36.200 --> 00:12:51.200
So if you look at it, you can see there's stuff that just like copies files, but there's also CouchDB, you can integrate Let's Encrypt, MariaDB, MongoDB, RabbitMQ, all these different things you want to plug into it.

00:12:51.200 --> 00:12:57.200
Also come along, right? Maintenance mode, I don't know what that is, but they all look interesting. People can check them out as well.

00:12:57.200 --> 00:13:07.200
So it looks neat. Final thoughts on this is it does, it's open source and free, which is excellent, but there's also a pro version if you want.

00:13:07.200 --> 00:13:08.200
If you want, like this is not required.

00:13:08.200 --> 00:13:09.200
Yeah.

00:13:09.200 --> 00:13:15.200
Right? So it gives you a little bit more features. It also gives you support and it's like $850 once.

00:13:15.200 --> 00:13:16.200
A month.

00:13:16.200 --> 00:13:18.200
No, it's just once.

00:13:18.200 --> 00:13:26.200
If your company says like, we really want something we can get support with and whatever, you know, it's an option out there.

00:13:26.200 --> 00:13:33.200
It's cool that there's a way for this project to be supported. And also if you're in a company and something goes wrong, the company's paying for it.

00:13:33.200 --> 00:13:41.200
It's kind of nice to be able to say, somebody please help rather than, all right, who knows the most about Docker here? Get over there and get in that server and make it work. Right?

00:13:41.200 --> 00:13:49.200
If it comes down to it. So anyway, that's what I got for our first item. I think it's for people who are looking for an alternative to Heroku.

00:13:49.200 --> 00:13:57.200
Yeah. Well, I was just looking in, I was like, well, what if I want to use it and I want to throw them a few bucks anyway, but I don't want to give them $850.

00:13:57.200 --> 00:14:04.200
On GitHub, they do have a sponsor of this project, so you can get a few bucks if you want.

00:14:04.200 --> 00:14:16.200
Yeah. Yeah. And what about their GitHub? How many, they have 25,000 stars. So this is not just a, Hey, guess what I created this weekend, right? Like this is a project that's been around for a while.

00:14:16.200 --> 00:14:19.200
Yeah. Some updates even yesterday.

00:14:19.200 --> 00:14:23.200
Yeah, exactly. It's like, it's mostly built with Go, but has a little Python love in there.

00:14:23.200 --> 00:14:25.200
Nice. Okay. Looks fun.

00:14:25.200 --> 00:14:28.200
Yes, indeed. What's your next one?

00:14:28.200 --> 00:14:39.200
Well, my next one is sort of a plea to everybody out there. I was looking for topics today and having a little difficulty. So I think that we should have more people writing more blog posts.

00:14:39.200 --> 00:14:51.200
But okay, so I've got some information. So one of the great things is we can follow Jeff Triplett, because he's leading the way here. He's right, trying to do one blog post a day in February.

00:14:51.200 --> 00:15:10.200
So let's get more people trying to do it. You can start late. It's only the sixth. Start from now and move on. So I want to highlight Jeff Triplett. So awesome. Starting this. So one post a day in February. And let's go through the ones he's got so far.

00:15:10.200 --> 00:15:25.200
So on February 1st, he wrote a post called "Choosing the Right Python and Django Versions for Your Project." So I was just thinking that you just use the latest all the time, but interesting take on it.

00:15:25.200 --> 00:15:42.200
It is like he does talk about waiting for possibly the third or fourth patch release of a particular version of Docker, maybe. Yeah, if you're doing production stuff, that makes sense. So anyway, so that's his first one.

00:15:42.200 --> 00:16:01.200
Second one was "My First Mac," and actually, I really enjoyed this. This is kind of one of those types of podcasts or podcasts, blog posts that just sort of says, you know, what his history with Macintosh and with Macs, and then also talks about some of his favorite software.

00:16:01.200 --> 00:16:09.200
So he picks out Bartender and Alfred. I've used Bartender. I haven't used Alfred yet. So I'm kind of intrigued by that.

00:16:09.200 --> 00:16:15.200
Bartender is so good. It is so good. And I don't use Alfred. I use Raycast, which is incredible.

00:16:15.200 --> 00:16:34.200
Raycast. Okay. So I kind of love this sort of thing for just because people like me and other people are like, "Oh, I've never heard of that." So just sort of a list of sometimes a list of things that you use on your personal computer or your development computer. It's helpful to people.

00:16:34.200 --> 00:16:48.200
He does link to a post that he wrote last year called "Default Apps of 2023" or "Default Apps in 2023." And I was kind of looking through both stuff on his computer and also web apps and things.

00:16:48.200 --> 00:17:04.200
And I saw Cal.com, which is kind of an alternative to Calendly. And so I'm like, "Hey, I should check that out." So it looks pretty nice. So I kind of love these sorts of things of like, what software do I use in every day? So that's great.

00:17:04.200 --> 00:17:07.200
I see a lot of section with stuff that I like as well there.

00:17:07.200 --> 00:17:08.200
Yeah.

00:17:08.200 --> 00:17:10.200
What things have you been interested in on the show?

00:17:10.200 --> 00:17:26.200
I was surprised to see Sublime Text still. So I haven't used Sublime Text. It's a great product, but I haven't used it for a while. February 3rd, what's your go-to comfort media? Kind of fun. Just sort of what do you do in your free time? Those are fun posts. Why not?

00:17:26.200 --> 00:17:50.200
February 4th, Django apps I actually use, rough cut. So this sort of thing I love. I wanted to do one on pytest plugins, plugins I almost always use. So this is Django plugins that he almost always use. And there's no description around them. It's just a list. So it's great. You can kind of go and look those up if you want.

00:17:50.200 --> 00:18:03.200
And at the end, he tagged projects I no longer use, which is also interesting. Things people used to use but don't for some reason. That's also interesting to talk about. So I encourage people to take that up.

00:18:03.200 --> 00:18:20.200
Lastly, how to test with Django and pytest fixtures right up my alley. This is what the article that brought this series to my attention. But he talks about Model Bakery and using fixtures. And one of the things I love, which is that I learned something kind of new.

00:18:20.200 --> 00:18:39.200
I mean, he talks about using, normally you put fixtures in a conf test file, but he's using a feature of pytest called, which is the pytest underscore plugins variable. And that's a global variable that you can say, hey, I've got other plugins, go look for it here.

00:18:39.200 --> 00:18:52.200
And he uses that to put like Model Bakery fixtures in a Django project. And it's an interesting idea. And it's a use model that I haven't seen. I haven't played with myself before. So that's fun.

00:18:52.200 --> 00:19:15.200
All right. So good job, Jeff. I wanted to look at, if you want more ideas, there's another article I wanted to point out called, Build an Idea Bank and Never Run Out of Blog Ideas. So just this notion that pick some way to write down whenever you have an idea, whether it's a notebook or email yourself or text yourself or something.

00:19:15.200 --> 00:19:22.200
Keep a list of all the kind of things that you'd like to write about. And then whenever you want to write, you can just sort of look in there.

00:19:22.200 --> 00:19:38.200
This is the only way you have a little idea. It'd be kind of interesting, but then you don't have time to work on it. Just throw it in there. Come back to it. I do this right now. I'm keeping stuff in Todoist. And I have a just separate category of to do's and every blog post. I just check them off when I write it.

00:19:38.200 --> 00:19:59.200
But I moved a lot of my stuff to Notion. I just absolutely loving Notion these days. It's pretty amazing. And so maybe it'll find its way over there, but that's not really important. Just have a place. Ideally, something you can check off both Notion and Todoist has a little checkbox. You can check whether or not you've written it so it can kind of move out of the way and filter it and so on.

00:19:59.200 --> 00:20:13.200
Yeah, I think I have too many ways. So I've got like paper slips that I write notes down. I've got notebooks, actual physical notebooks. I've got email myself and it just sort of is a lot. I've got to narrow it down to something manageable.

00:20:13.200 --> 00:20:38.200
Also, the last thing around this writing more is if you want to highlight that you're not using AI to help you write, there's a website called notbyai.fyi that has these little downloadable icons or logos that you can put on your work to say that it was handcrafted and you didn't do it by AI.

00:20:38.200 --> 00:20:41.200
I love it. I absolutely love it.

00:20:41.200 --> 00:20:43.200
Put a badge on your work.

00:20:43.200 --> 00:20:44.200
Yeah.

00:20:44.200 --> 00:21:04.200
I actually was thinking about playing with AI with helping writing, like to sort of rough out a topic idea or something to start with. But I haven't tried doing that yet. Interesting. So that's kind of my topic is people blog more, please. Hopefully about Python.

00:21:04.200 --> 00:21:06.200
And hopefully not with AI.

00:21:08.200 --> 00:21:16.200
And find these AI to like think of content and sort of, but don't just take the AI and paste it in.

00:21:16.200 --> 00:21:18.200
Yeah. Yeah. Anyway.

00:21:18.200 --> 00:21:20.200
We should get people ideas.

00:21:20.200 --> 00:21:23.200
So what you got for us next?

00:21:23.200 --> 00:21:37.200
I do have some more stuff here. Let's see. The next one. Oh, I just closed it. That was not ideal. Here we go. Let me get my screen up. All right. No, not that one. I'll come back to that in just a second. Okay. So this one was going to be an extra.

00:21:37.200 --> 00:21:46.200
How fast is your server? If you had a server at AWS, you had a server at DigitalOcean or wherever, how fast is it?

00:21:46.200 --> 00:21:47.200
I don't know.

00:21:47.200 --> 00:21:48.200
No idea.

00:21:48.200 --> 00:22:05.200
Network speed, not compute speed. How fast is it? Well, the way I would do it at home is I would go to speedtest.net or one of the other speed testing mechanisms and I would run it. Right. And, you know, that's, I got to tell you, doing speedtest.net is just more fun since I got Fiber.

00:22:05.200 --> 00:22:20.200
I remember we talked about like one of the episodes, I got it like straight away. So you go and run that and it tells you, all right, four milliseconds over Wi-Fi. I'm doing 500 megs, megabit per second. That's good. But how do I do this on my server?

00:22:20.200 --> 00:22:40.200
So this was originally going to be an extra, but it has a little more to it than I first thought. So there's an exact identical way to do that on an arbitrary Linux machine. But, you know, ideally, I think the use case is a server with no UI, no web browser. It's called speedtest-cli and it's a command line interface for testing internet bandwidth using speedtest.net.

00:22:40.200 --> 00:22:41.200
Cool.

00:22:41.200 --> 00:23:04.200
Yeah. So use case is pretty simple. pipx, they always get this wrong. And this is pip. I don't know what this is about. pipx install speedtest-cli. That is how we pronounce this. I know the X is invisible, but not silent. So pipx install speedtest-cli. And then somewhere down here, you just run it with different options.

00:23:04.200 --> 00:23:21.200
So let's go over here to my server. And we can just say speedtest-cli. Look at it go. It does the same ping. It's checking the download speed. Who knows what it's doing? It's kind of just chilling. It's not a great sign. Let's try again.

00:23:21.200 --> 00:23:50.200
It says, oh, we got 2.8 megabit. This is incredible. You have no idea how happy this makes me, Brian. I'll tell you in a second. So 2.8 gigabit down 1.3 gigabit up on my server. That's excellent, right? But that's a lot of output if you just run it normally. So I created a thing called, which is an alias called speedtest-cli --bytes because my brain works in megabytes, not megabits.

00:23:50.200 --> 00:24:08.200
I think about how much data I have and how much I can send in bytes, not like one eighth or eight X bytes, whatever. And I don't need all that output. I just want the results. So you can say just simple. Then you run it and you get, wait for it, download. Oh, now it's back down to this. Oh, cause it was in bits versus bytes.

00:24:08.200 --> 00:24:24.200
Anyway, 269 megabytes per second down 190 megabytes up. That's cool. Right? Yeah. It uses multiple connections to like the multicast testing that speed test.net does and all that stuff. And it's written in Python.

00:24:24.200 --> 00:24:43.200
That's pretty great. I think it's funny that a lot of things are in bits per second because like -- Do you think in bits? Like how many, how big is your hard drive? Oh, it's 30 terabits. Like, oh really? That's a big one. Oh, wait, what? Yeah, exactly. That actually is still big.

00:24:43.200 --> 00:24:47.200
Why don't we measure in tenth of a bit? Decibits.

00:24:47.200 --> 00:24:59.200
Decibits. Do my, my networks are real fast if I measure in decibits. All right. So this would have probably just been an extra, like I said, if this is all I do, I type speed. It tells me the speed. Excellent.

00:24:59.200 --> 00:25:15.200
But you go back here, you go down a little bit. It also has a, because it's written in Python, has a Python programmable API. So you can add these capabilities to your code. So you can do things like if you've got an app that depends on speed, you could report, hey, it needs to be fast enough.

00:25:15.200 --> 00:25:30.200
You could have a unit test that says, before we run this test with timeouts and things, we need to make sure that the internet is working well because we're, I don't know, whatever. Right? So you can go and just create a speed test object called get servers, get me the best server, pass in the servers.

00:25:30.200 --> 00:25:35.200
How many threads do you want to download? How many threads do you want to use to upload? All this kind of stuff. Very cool, right?

00:25:35.200 --> 00:25:50.200
Yeah, actually, this is great. I was just thinking about that because I've been working with timeouts a lot, like pytest timeout and long test suites can slow down if your network is slower, if you're actually hitting the service. So you need to check that. That's pretty cool.

00:25:50.200 --> 00:26:00.200
And it's pretty cool. It gives you ping time, upload speed, download speed. And you can say only do uploads, only do downloads and so on. Right? That's like, those are separate functions to call in the Python API to test those things.

00:26:00.200 --> 00:26:01.200
Okay, neat.

00:26:01.200 --> 00:26:17.200
Apparently you can even set a mini server. What is a mini server? I don't know. I don't know. I guess he's just specifically set a server. So I don't know. Anyway, this is cool. If you want to know the speed of your network on your server, or in CI or something like that, you know, here you go.

00:26:17.200 --> 00:26:18.200
Yeah, nice.

00:26:18.200 --> 00:26:22.200
Indeed. All right. How about extras? You got any gathered today?

00:26:22.200 --> 00:26:38.200
Just so last, just one. Last week, I mentioned that pytest 8 was out and people should upgrade. And so I've been upgrading to pytest 8 and debugging stuff. And I mean, I haven't, there's no problems, except for something weird.

00:26:38.200 --> 00:27:01.200
So I was looking at a parameterized test, and then I ran it in PyCharm. I just right clicked on it and said, hey, rerun this. And it ran the parameterized list backwards. It was like, it was 1234 to start with. And then it reran it as 4321. And I thought I did something wrong. So I spent like an hour debugging my code.

00:27:01.200 --> 00:27:20.200
And then I tried to do like a small example in another virtual environment, which happened to have an older version of pytest. And it was working just fine. But when I moved it over, it was backwards again. And it just turns out it's a new feature, in quotes, of pytest 8.

00:27:20.200 --> 00:27:44.200
Actually, we're going to link to a defect report. I haven't had any feedback on it yet. But I let the core pytest people know that this is going on. I don't know if it was on purpose, or if it's a surprise. It shouldn't make a difference. I just wanted to highlight this so that if you run across this, you're not doing something wrong. It's just it was a change in the behavior.

00:27:44.200 --> 00:27:53.200
So anyway, implementation detail has surfaced. Yeah. Yeah. All right. Did it promise to run them in order?

00:27:53.200 --> 00:27:57.200
I don't think that's documented anywhere.

00:27:57.200 --> 00:27:59.200
Yeah, but people probably assume that it would, right?

00:27:59.200 --> 00:28:24.200
Well, and I did something terrible. In the case where I found out, I was actually caching the value in my first parameter to compare it with others. Because I was starting at the zero offset case at the beginning. And it failed because that was being run last instead. And I'm like, what's going on? It was bad form on my part. Don't cache the first value. Don't do that.

00:28:24.200 --> 00:28:26.200
So you just got to do what you got to do?

00:28:26.200 --> 00:28:27.200
Yeah.

00:28:27.200 --> 00:28:54.200
All right. I got a few extras for us as well. First of all, a quick follow up on Orbstack. I spoke about Orbstack and also saw Jeff Triplett says Orbstack was the thing he's going to. Remember I mentioned this before as an alternative to Docker Desktop, open source, all that. Two really quick notes. One, it does require a paid version for commercial use. So the free version is only non-commercial, which is, you know, whatever, like take that for that. If that is good or bad to you, you know, whatever, it's their business model.

00:28:54.200 --> 00:29:17.200
But I just wanted to point out one of the things that this thing did that is super awesome. And I'm just really enjoying it. Brian, when you create a Docker container, it's kind of like this isolated thing. And yes, I know you can run a shell in it while it's running to basically attach into it and then like go through the terminal, go explore. But sometimes it's nice to just visually look at it or even edit in an editor with syntax highlighting all this stuff.

00:29:17.200 --> 00:29:46.200
So with Orbstack, see there's a little on some of these, not this one is wrong. You got to get to the volume section. I don't know if it shows it, but in the volume view next to every volume, which is like the little hard drive that's temporarily assigned to that container. There's a button to click and open it in Finder or Windows Explorer. And then it's just like a thing you could open it up in PyCharm or VS code or whatever, and just start working inside of one of these running things, which is, that's pretty excellent.

00:29:46.200 --> 00:29:54.200
So just wanted to give that a little bit of a shout out. No time for a joke yet. We're talking CSS. CSS is not funny.

00:29:54.200 --> 00:29:59.200
So have you, have you mostly moved over to like Orbstack and not using Docker desktop then?

00:29:59.200 --> 00:30:05.200
Yes, but I mean, it's really just like something running in the background. So Docker commands work. I haven't really.

00:30:05.200 --> 00:30:06.200
Okay.

00:30:06.200 --> 00:30:19.200
Although I'm doing more and more stuff with like running some of my apps in Docker. So in a sense, yes, but, but not too much, but that's just really delightful. You're like, wow, I can just use a proper editor to like see what's going wrong with this. That's pretty excellent.

00:30:19.200 --> 00:30:20.200
Yeah. Okay.

00:30:20.200 --> 00:30:49.200
Yeah. As I said, the next one is CSS. So there have been traditionally like meta frameworks, meta languages or languages on top of CSS that transpile or compile down to it. You know, less SASS, S-A-S-S, these things that have like, well, there's all these problems with CSS, like you can't have nesting or you can't have variables and they make it really hard to do stuff with CSS in a way that doesn't duplicate code and values and stuff. Right?

00:30:49.200 --> 00:31:10.200
If you want to have a background color, you can't just say normal background colors, gray. You have to repeat the word gray or the value gray 50 times through your file. Right? Which is a hassle. Well, apparently modern CSS and most of the browsers support this have built in CSS nesting already where you can put a value part of your CSS design inside of the other one.

00:31:10.200 --> 00:31:22.200
So like instead of saying parent space child, parent space, other child, right? You just put the child and other child inside the parent and modern day CSS takes that and loves it. Awesome. Right? That's cool.

00:31:22.200 --> 00:31:24.200
Yeah. I guess I didn't know that.

00:31:24.200 --> 00:31:48.200
I didn't either. I thought you had to use one of these other languages, but apparently you can also have variables, right? If you say this minus minus some variable name has a value that will create a thing, a variable called minus minus in this case, the same main background color. And then later somewhere around here, somewhere, you can then go and then actually work with those. I don't know where the example is, but somewhere.

00:31:48.200 --> 00:31:49.200
Oh yeah there.

00:31:49.200 --> 00:32:07.200
You can go and just say, yeah, the background color is var of this thing. It's kind of, I think this is actually super janky. It looks really weird, but yeah, modern CSS has nesting and variables with no transpiling, nothing. You just write it and it just runs, which is pretty excellent.

00:32:07.200 --> 00:32:13.200
Yeah. The variables thing is the one thing that drove me to transpiler. So cool.

00:32:13.200 --> 00:32:34.200
Yeah. I think less fewer steps, right? The modern web has got so gnarly to just get something to work. It's like, Oh, did you NPM install this? Oh, and then did you set up the watcher so that when you change this, it like shakes the CSS tree over here and then transpiles the tri-script and then bundle. What is going on? I just could just type and run. Like, where did, where did this go wrong? Right?

00:32:34.200 --> 00:32:37.200
I just want my dumb button to be blue, please.

00:32:37.200 --> 00:32:55.200
Exactly. Why is it still gray? I'm going to go play in traffic. If it doesn't turn blue in the next 30 minutes, I can't quit programming. I just can't. That's kind of the feeling of the modern web a lot of times. And like, not depending on that stuff, because apparently it's already supported is, is like, you could just write this. It's great.

00:32:55.200 --> 00:33:24.200
All right. One final extra before we get to the joke is I just want to give a shout out to this new feature in Safari where you can go and you can say on any website file, add to dock progressive web apps, right? Because they're Apple, they can't call it that. They have to say, we have a feature. It's called add to dock. No one else has add to dock. It's like, because they already got it under something else. Like Chrome has it, Vivaldi has it and so on. So why? And I'm not a Safari person, right? I kind of think Safari is like one of the least good browsers out there.

00:33:24.200 --> 00:33:26.200
But so why would I give a shout out to this?

00:33:26.200 --> 00:33:27.200
You're going to get hate mail.

00:33:27.200 --> 00:33:29.200
I'm going to, please don't mail me.

00:33:29.200 --> 00:33:46.200
Show me how to set a DNS over HTTPS in Safari. Even a simple thing like that. Can't do it. Okay. Back, back to Safari in the good way. So one of the things that's, I like, I use Vivaldi, right? Everyone knows, talk about it all the time. You can do this in Vivaldi and it's excellent.

00:33:46.200 --> 00:34:08.200
The problem is if I want to open one of those apps and I don't have Vivaldi open, Vivaldi with all of its histories and all the windows I had open come blasting into the screen. And then that little thing I was trying to open opens. Right. Or if I'm on the big regular Vivaldi and I happen to have that on the side and I close Vivaldi. Oh no, that thing closed as well. And I forgot it was actually part of Vivaldi because it looked like it's on. It's just like a hassle.

00:34:08.200 --> 00:34:25.200
With this, they're like standalone little apps that just run completely dedicated. They don't even have to be PWAs. They just have to be URLs. You can have our command tab between separately. They're really nice. So I encourage people who are on Macs to check this out. If you're not on a Mac, well, then don't worry about it.

00:34:25.200 --> 00:34:30.200
We can title this the grumpy old man episode. Write more blog posts.

00:34:30.200 --> 00:34:38.200
Write more blog posts. Use Safari, even if you don't love it. All right. How about this? How about a joke? Shall we wrap it up?

00:34:38.200 --> 00:34:39.200
Yeah, let's.

00:34:39.200 --> 00:35:07.200
And I got to tell you, this joke is entitled white lies and it connects with me so much. So much. All right, here we go. I'll tell you, Brian. So there's a woman developer who's being distracted by their manager, obviously wearing a suit and tie. I'm saying to talk to her. And says, apparently talking about this new app, this like amazing app that they're about to launch. Says, the boss asks, will this solution work for a million concurrent users?

00:35:07.200 --> 00:35:17.200
The very smart developer, a woman like Sarah says, how many concurrent users do we have today? 10 says the manager. Yes. Yes. This will work for a million concurrent users.

00:35:17.200 --> 00:35:18.200
Exactly.

00:35:18.200 --> 00:35:27.200
You can dream all you want. We got 10 users right now. Whatever I'm building is going to be fine until we got a whole lot more time to worry about it.

00:35:27.200 --> 00:35:28.200
Yeah.

00:35:28.200 --> 00:35:30.200
Does that connect with you?

00:35:30.200 --> 00:35:41.200
Yeah, very much. Yeah. It's hard to not think about that. Like, what if this takes off tomorrow? And we like, you know, well, then we'll add capabilities tomorrow.

00:35:41.200 --> 00:35:45.200
Yeah, exactly. That's why it connects with me.

00:35:45.200 --> 00:36:09.200
It used to be that in the software world, you could tell if somebody was doing, going into, had a job interview that day was because they were wearing a suit or wearing a tie or something like that. And so when I first started, I would wear ties on Fridays and people would say, you're freaking me, freaking everybody out because everybody thinks you're interviewing for another company.

00:36:09.200 --> 00:36:12.200
Hey, just keep them on edge. Just don't let them, don't let them get too comfortable.

00:36:12.200 --> 00:36:22.200
Yeah. But now I kind of, I watch out for any of my coworkers that are not wearing the same shirt they wore yesterday. They might be on the job interview.

00:36:22.200 --> 00:36:24.200
Mm hmm.

00:36:24.200 --> 00:36:29.200
Anyway. So thanks for the joke and the wonderful episode.

00:36:29.200 --> 00:36:34.200
Absolutely. Great to be here with you, Brian, and with everyone else. See y'all later.

00:36:34.200 --> 00:36:35.200
Bye.

