
00:00:00.000 --> 00:00:05.120
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.120 --> 00:00:10.800
This is episode 274 recorded March 8th, 2022.


00:00:10.800 --> 00:00:11.680
I'm Michael Kennedy.


00:00:11.680 --> 00:00:12.800
And I'm Brian Okken.


00:00:12.800 --> 00:00:14.240
And I'm Anne Barolo.


00:00:14.240 --> 00:00:16.560
Welcome Anne. It is so great to have you here.


00:00:16.560 --> 00:00:22.080
It's going to be a lot of fun to talk about Python things with you and devices and maybe even space.


00:00:22.080 --> 00:00:22.560
Who knows?


00:00:22.560 --> 00:00:24.960
I'm glad to be here.


00:00:24.960 --> 00:00:26.640
Thank you very much for inviting me.


00:00:26.640 --> 00:00:27.840
Yeah, absolutely.


00:00:27.840 --> 00:00:30.880
Before we get into our topics, just tell people a quick bit about yourself.


00:00:30.880 --> 00:00:34.160
You've had a varied background and you've done a lot of interesting things.


00:00:34.160 --> 00:00:39.360
I may be known in the Python community as the author of the book "Mate Getting Started with


00:00:39.360 --> 00:00:45.440
Adafruit Circuit Playground Express," which goes over CircuitPython. And I've done numerous


00:00:45.440 --> 00:00:52.000
tutorials and blog posts for Adafruit Industries, where I've been working for the past four years.


00:00:52.560 --> 00:00:56.340
Prior to that, I had a 30 year career with the U.S.


00:00:56.340 --> 00:01:01.180
Department of State as a diplomat and security engineer, reaching


00:01:01.180 --> 00:01:03.420
the level of the senior foreign service.


00:01:03.420 --> 00:01:04.020
Wow.


00:01:04.020 --> 00:01:04.580
Oh, neat.


00:01:04.580 --> 00:01:05.340
Awesome.


00:01:05.340 --> 00:01:07.680
Bet you have some stories to tell that you can't tell.


00:01:07.680 --> 00:01:10.020
I have some I can and some I can't.


00:01:10.020 --> 00:01:11.420
Indeed.


00:01:11.420 --> 00:01:12.060
Indeed.


00:01:12.060 --> 00:01:12.360
All right.


00:01:12.360 --> 00:01:13.320
Well, welcome to the show.


00:01:13.320 --> 00:01:14.180
It's nice to have you here.


00:01:14.180 --> 00:01:14.660
Thank you.


00:01:14.660 --> 00:01:19.220
So Brian, there's that old famous saying, programming is like riding a bike.


00:01:19.220 --> 00:01:20.340
Is that how it goes?


00:01:20.340 --> 00:01:20.780
What is that?


00:01:20.780 --> 00:01:21.840
I've never heard that.


00:01:22.340 --> 00:01:25.340
Oh, yeah, neither of I.


00:01:25.340 --> 00:01:26.440
Tell us about your bike.


00:01:26.440 --> 00:01:29.740
OK, so I'm not sure what the bike is for, but


00:01:29.740 --> 00:01:32.540
actually, it's a cool looking bike.


00:01:32.540 --> 00:01:36.980
But anyway, what we're talking about is Adam Johnson's article,


00:01:36.980 --> 00:01:41.440
the well-maintained test, 12 questions for new dependencies.


00:01:41.440 --> 00:01:43.280
And he's calling it the well-maintained test.


00:01:43.280 --> 00:01:44.840
But I'm going to call it the Adam test.


00:01:44.840 --> 00:01:46.780
I think I think the Adam test is better.


00:01:46.780 --> 00:01:50.740
And anyway, he's referencing.


00:01:51.340 --> 00:01:53.740
Do you remember Joel Spolsky's, the Joel test?


00:01:53.740 --> 00:01:56.380
>> I remember Joel Spolsky.


00:01:56.380 --> 00:01:56.740
>> Okay.


00:01:56.740 --> 00:01:58.580
>> I don't remember the test though.


00:01:58.580 --> 00:02:02.760
>> Okay. So he has this test and it's referenced in this blog post,


00:02:02.760 --> 00:02:04.140
but I'm not going to click over to it,


00:02:04.140 --> 00:02:05.340
but there's a link in here.


00:02:05.340 --> 00:02:08.500
But it's essentially like trying to,


00:02:08.500 --> 00:02:09.940
it's a 12 question,


00:02:09.940 --> 00:02:12.440
question and answer thing of like yes and no questions


00:02:12.440 --> 00:02:16.700
about whether or not your software team is healthy.


00:02:16.700 --> 00:02:19.720
It's interesting, a little bit dated,


00:02:19.720 --> 00:02:22.580
But it's an interesting read.


00:02:22.580 --> 00:02:25.200
But that's way back from like the year 2000.


00:02:25.200 --> 00:02:27.260
So before a lot of you were born.


00:02:27.260 --> 00:02:31.960
But now we've got the Adam test


00:02:31.960 --> 00:02:34.200
and it's about whether or not you should pick up


00:02:34.200 --> 00:02:36.160
a dependency on your project.


00:02:36.160 --> 00:02:39.840
So in there again, there are yes, no questions.


00:02:39.840 --> 00:02:41.880
And there's 12 questions.


00:02:41.880 --> 00:02:45.160
And it's kind of zoom in a little bit.


00:02:45.160 --> 00:02:48.520
It's just questions about a project.


00:02:48.520 --> 00:02:50.440
So let's just run through them.


00:02:50.440 --> 00:02:53.760
Is it described as production ready?


00:02:53.760 --> 00:02:56.560
And is there sufficient documentation?


00:02:56.560 --> 00:02:57.680
Is there a change log?


00:02:57.680 --> 00:03:00.000
Is someone responding to bug reports?


00:03:00.000 --> 00:03:01.740
Are there sufficient tests?


00:03:01.740 --> 00:03:03.800
That's a tough one actually to answer


00:03:03.800 --> 00:03:04.920
if you're from the outside.


00:03:04.920 --> 00:03:07.640
But are the tests running on the latest Python version?


00:03:07.640 --> 00:03:10.160
Are the tests running on the latest integration version?


00:03:10.160 --> 00:03:12.620
So he says language and integration.


00:03:12.620 --> 00:03:15.480
So for instance, is it running on the latest,


00:03:15.480 --> 00:03:18.360
is it running Python 3.10 in CI?


00:03:18.360 --> 00:03:20.740
And is it running the latest Django version


00:03:20.740 --> 00:03:23.480
if it's a Django utility or PyTest version


00:03:23.480 --> 00:03:25.980
if it's a PyTest plugin or something?


00:03:25.980 --> 00:03:28.300
Is there a CI configuration?


00:03:28.300 --> 00:03:30.020
Is it running on CI?


00:03:30.020 --> 00:03:32.060
Is it CI passing?


00:03:32.060 --> 00:03:34.180
Does it seem relatively well used?


00:03:34.180 --> 00:03:39.060
And there's ways to look for that with PyPI stats.


00:03:39.060 --> 00:03:41.980
And then has there been a commit in the last year


00:03:41.980 --> 00:03:44.460
and has there been a release in the last year?


00:03:44.460 --> 00:03:46.100
The 12th one is interesting, I think,


00:03:46.100 --> 00:03:48.340
because sometimes there have been commits,


00:03:48.340 --> 00:03:51.140
there are maintainers that are pushing to the mainline,


00:03:51.140 --> 00:03:54.100
but nobody's actually releasing to PyPI


00:03:54.100 --> 00:03:56.580
because the actual one person


00:03:56.580 --> 00:04:00.320
that has release privileges hasn't been doing that.


00:04:00.320 --> 00:04:04.420
I'm not sure, I guess, what do you think?


00:04:04.420 --> 00:04:05.860
He goes through more detail,


00:04:05.860 --> 00:04:09.020
but do you have any comments on this, either Michael or Ann?


00:04:09.020 --> 00:04:13.060
- I'd like this, I mean, obviously,


00:04:13.060 --> 00:04:15.840
it's directly related to some of the work


00:04:15.840 --> 00:04:19.840
we've been doing at Adafruit.


00:04:19.840 --> 00:04:24.560
And we're trying to make sure that we don't have bottlenecks.


00:04:24.560 --> 00:04:29.400
Like, multiple people have authorization


00:04:29.400 --> 00:04:33.840
to do releases and merges and that type of thing.


00:04:33.840 --> 00:04:37.040
And it would be rather unsettling


00:04:37.040 --> 00:04:40.240
if there was a package that was several years old


00:04:40.240 --> 00:04:42.800
and no releases, and that's where you


00:04:42.800 --> 00:04:45.400
start getting into problems.


00:04:45.400 --> 00:04:46.720
- Sure, I totally agree.


00:04:46.720 --> 00:04:48.360
Things can be done.


00:04:48.360 --> 00:04:50.400
There can be a, like, here's the thing


00:04:50.400 --> 00:04:51.760
that parses CSS styles.


00:04:51.760 --> 00:04:54.160
Like maybe that just doesn't need to be updated,


00:04:54.160 --> 00:04:56.140
but that's not the case for most things.


00:04:56.140 --> 00:04:57.000
Here's a web framework.


00:04:57.000 --> 00:04:59.280
It hasn't changed in four years.


00:04:59.280 --> 00:05:00.200
That might make you nervous


00:05:00.200 --> 00:05:02.720
because the web has changed a lot in four years.


00:05:02.720 --> 00:05:03.680
- And Python's changed.


00:05:03.680 --> 00:05:06.760
So is it even, it just takes a little bit


00:05:06.760 --> 00:05:10.160
to you have to push to get, kick the CI and test on.


00:05:10.160 --> 00:05:11.200
I guess you don't have to.


00:05:11.200 --> 00:05:13.360
You can manually kick CI to run it


00:05:13.360 --> 00:05:14.680
on the latest Python version,


00:05:14.680 --> 00:05:18.200
- Yeah, one more area, and that might be multiple


00:05:18.200 --> 00:05:21.240
little additions, or it might be grouped into one


00:05:21.240 --> 00:05:23.600
that people understand as a group of things,


00:05:23.600 --> 00:05:28.280
but does it use modern language ideas and constructs?


00:05:28.280 --> 00:05:32.280
So for example, does it use Python type hints or no?


00:05:32.280 --> 00:05:35.440
Does, if it's something that is inherently talking


00:05:35.440 --> 00:05:37.840
to external systems or something like that,


00:05:37.840 --> 00:05:41.080
does it use async in a way, is there an async capability?


00:05:41.080 --> 00:05:44.040
Right, or if I'm like, well, I really wanna use FastAPI


00:05:44.040 --> 00:05:46.200
and I have this database that would be awesome to talk to,


00:05:46.200 --> 00:05:48.520
but this thing in the middle that does the database part,


00:05:48.520 --> 00:05:50.840
there's no async version, well then I've thrown away,


00:05:50.840 --> 00:05:54.340
I cannot access that part of the new Python world, right?


00:05:54.340 --> 00:05:56.540
And so those kinds of, I group that into,


00:05:56.540 --> 00:05:59.240
does it use modern Python ideas and features?


00:05:59.240 --> 00:06:00.400
- Yeah, that one's a tough one,


00:06:00.400 --> 00:06:03.140
because sometimes a project will want to support


00:06:03.140 --> 00:06:05.440
older Python versions, so they can't really.


00:06:05.440 --> 00:06:07.000
- Yes, exactly.


00:06:07.000 --> 00:06:09.240
- One of the things Anne said that I wanted to highlight


00:06:09.240 --> 00:06:13.900
was I like these 12 questions to ask of my own projects,


00:06:13.900 --> 00:06:17.020
I mean, yes, it's for dependencies, but I also,


00:06:17.020 --> 00:06:19.660
these are good questions just to ask for your own project.


00:06:19.660 --> 00:06:21.060
- How am I doing?


00:06:21.060 --> 00:06:22.140
- How am I doing?


00:06:22.140 --> 00:06:26.360
And I have this package that's kind of used


00:06:26.360 --> 00:06:28.820
by a handful of people or maybe a thousand people,


00:06:28.820 --> 00:06:31.500
but if I've not updated in the last couple of years,


00:06:31.500 --> 00:06:32.380
that's kind of lame.


00:06:32.380 --> 00:06:34.740
I should just take a few hours and go check it out,


00:06:34.740 --> 00:06:36.140
push something up.


00:06:36.140 --> 00:06:37.340
- Yeah, for sure.


00:06:37.340 --> 00:06:38.980
All right, now that I see your list


00:06:38.980 --> 00:06:40.220
and know what you're talking about, I love it.


00:06:40.220 --> 00:06:41.060
It's great.


00:06:41.060 --> 00:06:42.500
I want to talk about abusing things.


00:06:42.500 --> 00:06:44.100
Let's talk about StackAbuse.


00:06:44.100 --> 00:06:44.940
- Okay.


00:06:44.940 --> 00:06:47.700
- No, StackAbuse is just the blog from Stack Overflow.


00:06:47.700 --> 00:06:53.540
But what I wanna talk about is validating email addresses.


00:06:53.540 --> 00:06:57.040
So this might sound like a solved problem, right?


00:06:57.040 --> 00:07:00.420
We've talked about Regex 101 and stuff like that.


00:07:00.420 --> 00:07:04.220
And surely you can go, you can get some regular expression


00:07:04.220 --> 00:07:06.460
and apply it to an email address.


00:07:06.460 --> 00:07:09.860
Now that may or may not be good.


00:07:09.860 --> 00:07:12.500
There are so many little weird domains these days.


00:07:12.500 --> 00:07:15.700
Like I just got a .tech domain


00:07:15.700 --> 00:07:17.380
that has four letters on the end.


00:07:17.380 --> 00:07:22.380
And if your regex is like, does it go thing, @sign,


00:07:22.380 --> 00:07:25.500
something, .3 or two things?


00:07:25.500 --> 00:07:26.520
Well, that fails.


00:07:26.520 --> 00:07:27.980
I've had that email address come up and say,


00:07:27.980 --> 00:07:29.480
oh, you got to enter a valid email address.


00:07:29.480 --> 00:07:30.780
Like this is a valid email address,


00:07:30.780 --> 00:07:33.940
you crummy regex from 2000.


00:07:33.940 --> 00:07:35.780
You know what I mean?


00:07:35.780 --> 00:07:38.200
So this one goes a little bit beyond that.


00:07:38.200 --> 00:07:40.600
Like it does validate that kind of stuff


00:07:40.600 --> 00:07:41.800
that you're thinking about, right?


00:07:41.800 --> 00:07:44.920
It does validate that like there's an @ sign


00:07:44.920 --> 00:07:48.560
and there's a domain at the end and those kinds of things.


00:07:48.560 --> 00:07:50.920
But it also does a couple of other things


00:07:50.920 --> 00:07:52.840
that I think are worth considering.


00:07:52.840 --> 00:07:54.240
That's kind of cool.


00:07:54.240 --> 00:07:57.680
So for example, one of the things that it'll do,


00:07:57.680 --> 00:07:59.440
if I scroll down a little bit,


00:07:59.440 --> 00:08:03.120
is it will actually check that the domain is real.


00:08:03.120 --> 00:08:04.540
So if you were to say,


00:08:05.480 --> 00:08:08.280
my email is something at blah, blah, blah,


00:08:08.280 --> 00:08:09.800
junk, junk, junk, just type in junk.


00:08:09.800 --> 00:08:12.560
Like, no, no, no, there's no way that could be delivered.


00:08:12.560 --> 00:08:14.320
So it's going to validate,


00:08:14.320 --> 00:08:17.640
like actually do a DNS lookup on the domain name for that.


00:08:17.640 --> 00:08:19.360
Right, so it'll check on the internet


00:08:19.360 --> 00:08:20.780
that this is a real thing.


00:08:20.780 --> 00:08:24.160
It also does some interesting things about normalization


00:08:24.160 --> 00:08:27.320
or canonicalization of the email.


00:08:27.320 --> 00:08:29.400
So for example, there's different ways


00:08:29.400 --> 00:08:32.140
to represent the same thing in Unicode and stuff like that.


00:08:32.140 --> 00:08:34.680
And you'll end up with a, here's the definitive way


00:08:34.680 --> 00:08:36.800
in which you should express this in your database


00:08:36.800 --> 00:08:39.240
so that you can check, have I seen this before?


00:08:39.240 --> 00:08:40.320
Or things like that.


00:08:40.320 --> 00:08:44.200
You could even get ASCII representations of it


00:08:44.200 --> 00:08:45.040
from what comes back.


00:08:45.040 --> 00:08:46.080
So, pretty cool.


00:08:46.080 --> 00:08:49.520
It'll do the check for deliverability,


00:08:49.520 --> 00:08:52.720
and then it also does that normalization plus the regex.


00:08:52.720 --> 00:08:53.560
- Wow.


00:08:53.560 --> 00:08:54.720
- Neat, right? - Yeah, great.


00:08:54.720 --> 00:08:57.880
- Yeah, I mean, it's not gonna change the world, right?


00:08:57.880 --> 00:09:00.560
We'll have to validate email addresses and whatnot,


00:09:00.560 --> 00:09:05.020
but putting just type equals email in an HTML form


00:09:05.020 --> 00:09:07.080
is not gonna tell you that, for example,


00:09:07.080 --> 00:09:09.740
the DNS exists and things like that.


00:09:09.740 --> 00:09:12.400
So I think this is a cool sort of next level version


00:09:12.400 --> 00:09:14.960
and it's a Python package that runs on the server.


00:09:14.960 --> 00:09:17.700
You just pip install it and then you call validate.


00:09:17.700 --> 00:09:18.900
And of course it'll, you know,


00:09:18.900 --> 00:09:20.840
it needs to do the DNS lookup and stuff like that.


00:09:20.840 --> 00:09:22.020
- I like it. - Cool.


00:09:22.020 --> 00:09:23.420
Yeah, awesome.


00:09:23.420 --> 00:09:25.040
Yeah, it's really easy to use.


00:09:25.040 --> 00:09:27.640
So I think that that's a nice feature.


00:09:27.640 --> 00:09:29.040
So let's--


00:09:29.040 --> 00:09:34.040
And it's production ready and as a fairly recent release.


00:09:34.040 --> 00:09:36.400
- Awesome, I'm glad you checked on it.


00:09:36.400 --> 00:09:40.260
And before we switch over to Ann's first topic,


00:09:40.260 --> 00:09:41.700
John Sheehan out in the audience says,


00:09:41.700 --> 00:09:43.240
"For phone numbers, I had really good luck


00:09:43.240 --> 00:09:46.000
"with phone numbers, all one word, no spaces,


00:09:46.000 --> 00:09:47.280
"Python library."


00:09:47.280 --> 00:09:48.120
Oh, very cool.


00:09:48.120 --> 00:09:50.060
Yeah, that has, I think phone numbers


00:09:50.060 --> 00:09:52.540
are more complicated than emails in the sense that like,


00:09:52.540 --> 00:09:54.240
they're different lengths and styles


00:09:54.240 --> 00:09:55.080
and all sorts of stuff.


00:09:55.080 --> 00:09:57.800
- Well, I've lived in many places in the world


00:09:57.800 --> 00:10:02.800
and so many people do this US-centric phone number check


00:10:02.800 --> 00:10:09.240
and do not parse it for international members


00:10:09.240 --> 00:10:11.120
and it drives people crazy.


00:10:11.120 --> 00:10:13.120
>> Yeah, I bet it does.


00:10:13.120 --> 00:10:14.840
Cool, all right, well tell us about your first item.


00:10:14.840 --> 00:10:18.760
>> Well, I was gonna talk about one of the main things


00:10:18.760 --> 00:10:21.960
I've been doing with Adafruit that's Python related


00:10:21.960 --> 00:10:24.960
and that's the Python and Microcontrollers newsletter.


00:10:25.940 --> 00:10:29.820
We think this is the only newsletter focusing on Python


00:10:29.820 --> 00:10:33.580
on very small hardware devices.


00:10:33.580 --> 00:10:38.380
And I started as editor about the time of the pandemic


00:10:38.380 --> 00:10:41.020
when priorities were switched.


00:10:41.020 --> 00:10:44.100
And somebody said, well, I've got to do something else.


00:10:44.100 --> 00:10:45.420
Here, it's yours.


00:10:45.420 --> 00:10:46.820
OK.


00:10:46.820 --> 00:10:51.320
So we currently have about 9,400 subscribers.


00:10:51.320 --> 00:10:56.320
and it focuses mainly on the two flavors of Python


00:10:56.320 --> 00:10:59.520
that run on small devices on hardware,


00:10:59.520 --> 00:11:02.340
and that's CircuitPython and MicroPython.


00:11:02.340 --> 00:11:06.800
When I say it, it's kind of obvious


00:11:06.800 --> 00:11:11.120
that the full CPython will not fit on a device


00:11:11.120 --> 00:11:15.300
with limited memory and capabilities.


00:11:15.300 --> 00:11:18.640
So MicroPython was first developed in CircuitPython.


00:11:18.640 --> 00:11:20.480
I'll talk about it later in the show.


00:11:20.480 --> 00:11:24.280
that actually work on very small devices


00:11:24.280 --> 00:11:29.120
and provide a very Python experience in coding these


00:11:29.120 --> 00:11:32.280
as compared to C or assembly


00:11:32.280 --> 00:11:35.640
or some of the other ways in which people do it.


00:11:35.640 --> 00:11:36.480
- Yeah.


00:11:36.480 --> 00:11:40.320
- So this is obviously free and open source


00:11:40.320 --> 00:11:43.040
just like everything else Adafruit does


00:11:43.040 --> 00:11:46.140
and hopefully much of the Python world.


00:11:46.140 --> 00:11:48.280
- Yeah, one of the real exciting things


00:11:48.280 --> 00:11:50.240
I've seen going on with you all


00:11:50.240 --> 00:11:55.600
is working to get CircuitPython and MicroPython more close together.


00:11:55.600 --> 00:11:58.960
So it's kind of one world for the small Python things.


00:11:58.960 --> 00:12:02.680
Sure. I mean, CircuitPython is a fork,


00:12:02.680 --> 00:12:09.280
but we bring in the upstream features of MicroPython,


00:12:09.280 --> 00:12:17.120
and we provide some compatibility through a library called Blinkus.


00:12:17.120 --> 00:12:18.960
So on certain microcontrollers,


00:12:18.960 --> 00:12:23.960
you can take a MicroPython program and run it in CircuitPython.


00:12:23.960 --> 00:12:30.460
But there's some differences that were chosen.


00:12:30.460 --> 00:12:33.400
And again, I'll go over those in a bit.


00:12:33.400 --> 00:12:36.600
But the two programs talk to each other.


00:12:36.600 --> 00:12:38.360
It's a very friendly relationship.


00:12:38.360 --> 00:12:42.600
Adafruit has provided support to MicroPython.


00:12:42.600 --> 00:12:45.460
We consider it kind of a big happy family


00:12:45.520 --> 00:12:48.720
rather than the Hatfields and the McCoys.


00:12:48.720 --> 00:12:56.520
If anybody's interested in our weekly newsletter, they can go to adafruitdaily.com


00:12:56.520 --> 00:13:02.020
and it was specifically chosen to be a different domain than Adafruit


00:13:02.020 --> 00:13:08.820
because there's no sharing of information between, you know, nothing behind the curtain even.


00:13:08.820 --> 00:13:16.820
It's a totally separate website it's none of the data is used for advertising and.


00:13:16.820 --> 00:13:33.180
All the things that one does when they sign up on the web it's it's pure and clean and it's easy to subscribe and unsubscribe there's no pressure to say oh do you really want to unsubscribe.


00:13:33.180 --> 00:13:39.480
I've been going through this process of unsubscribing from a tremendous number of old newsletters


00:13:39.480 --> 00:13:40.920
that have just piled up.


00:13:40.920 --> 00:13:45.600
And so many of them are like, type in your email address here and uncheck the four things


00:13:45.600 --> 00:13:47.040
you would like to unsubscribe to.


00:13:47.040 --> 00:13:49.040
I'm like, you know, this is not stopping me.


00:13:49.040 --> 00:13:50.520
We're typing this in and this is happening.


00:13:50.520 --> 00:13:51.520
I'm out of here.


00:13:51.520 --> 00:13:52.520
Yeah, that's good to hear.


00:13:52.520 --> 00:13:53.520
Yeah.


00:13:53.520 --> 00:13:55.280
No one wants to actually go to that much effort.


00:13:55.280 --> 00:13:58.400
I've made, you know, just one click and you know, you're gone.


00:13:58.400 --> 00:14:00.960
You can come back if you want to.


00:14:00.960 --> 00:14:06.420
But we really encourage community involvement in this.


00:14:06.420 --> 00:14:15.280
It's not Anne writing her own thoughts together and putting them down via GitHub to WordPress.


00:14:15.280 --> 00:14:18.300
There are different ways in which people can contribute.


00:14:18.300 --> 00:14:21.180
It's all done on GitHub.


00:14:21.180 --> 00:14:28.000
So people can put an issue if they like, or actually a PR on the current document.


00:14:28.000 --> 00:14:30.320
And I review those.


00:14:30.320 --> 00:14:38.240
accept PRs for your newsletter? Sure. That's awesome. Why not? I mean, I've not had that


00:14:38.240 --> 00:14:44.080
many issues. We have some instructions on okay, if you're gonna put a image in, you


00:14:44.080 --> 00:14:49.720
know, make it a certain size and parameters. If you're gonna put a animated GIF, you know,


00:14:49.720 --> 00:14:54.800
kind of do it this way. Otherwise, you know, just kind of as long as it's kind of in the


00:14:54.800 --> 00:15:00.480
same format, I'll take it. Again, we try to be very GitHub-friendly. We love GitHub.


00:15:00.480 --> 00:15:07.000
And again, all our stuff is open source on GitHub. So, you know, people can do whatever


00:15:07.000 --> 00:15:14.360
they wish. And we want to encourage communication. But, you know, if people don't want to use


00:15:14.360 --> 00:15:21.440
GitHub, they can email the information to cpnews@adafruit.com, or they can hashtag


00:15:21.440 --> 00:15:24.640
CircuitPython or MicroPython on say Twitter.


00:15:24.640 --> 00:15:28.640
And I do, I go through and pick up things.


00:15:28.640 --> 00:15:29.480
- Cool.


00:15:29.480 --> 00:15:30.300
- Yeah, very cool.


00:15:30.300 --> 00:15:32.120
Yeah, I subscribe to the newsletter.


00:15:32.120 --> 00:15:32.940
- Thank you.


00:15:32.940 --> 00:15:33.780
- Yeah, you bet.


00:15:33.780 --> 00:15:37.160
I love the idea of a sort of direct community involvement.


00:15:37.160 --> 00:15:39.200
Brian, we should have just put our show notes up beforehand


00:15:39.200 --> 00:15:41.760
and let people do PRs against that, I love it.


00:15:41.760 --> 00:15:43.880
We just have like a Trello board.


00:15:43.880 --> 00:15:45.200
- Well, I didn't put it up here,


00:15:45.200 --> 00:15:50.120
but one of the things we do when we tap CircuitPython,


00:15:50.120 --> 00:15:52.720
the phrase is code plus community.


00:15:52.720 --> 00:15:56.880
And we have a pretty broad community on, again,


00:15:56.880 --> 00:16:01.240
like Twitter, a large Discord server, Reddit,


00:16:01.240 --> 00:16:08.440
Instagram, just wherever you might try to get information,


00:16:08.440 --> 00:16:14.400
we try to target copying it on there.


00:16:14.400 --> 00:16:15.280
And--


00:16:15.280 --> 00:16:16.120
- Yeah.


00:16:16.120 --> 00:16:16.960
- And I think--


00:16:16.960 --> 00:16:19.440
- I think Adafruit and CircuitPython


00:16:19.440 --> 00:16:22.800
or doing community correctly, or at least doing it a good way,


00:16:22.800 --> 00:16:24.240
because it's obvious.


00:16:24.240 --> 00:16:29.200
And for Discord, we have a code of conduct that's plain to see.


00:16:29.200 --> 00:16:33.640
For CircuitPython, it's very similar to the Discord one.


00:16:33.640 --> 00:16:40.760
It's kind of the philosophy of do good things, be good.


00:16:40.760 --> 00:16:43.320
Everybody get along.


00:16:43.320 --> 00:16:47.680
We welcome good-hearted things to happen.


00:16:47.680 --> 00:16:51.780
and for 99.9% of it, it works.


00:16:51.780 --> 00:16:55.480
Because CircuitPython is not Adafruit.


00:16:55.480 --> 00:17:00.280
We want CircuitPython to be much, much, much bigger than Adafruit


00:17:00.280 --> 00:17:03.240
as far as adoption and effort.


00:17:03.240 --> 00:17:06.640
And again, that reflects over to MicroPython.


00:17:06.640 --> 00:17:10.640
And the whole thing goes to the bigger Python community.


00:17:10.640 --> 00:17:16.220
I mean, Guido van Rossum has tweeted and various things saying,


00:17:16.280 --> 00:17:20.000
Yes, he supports Python on small devices.


00:17:20.000 --> 00:17:23.200
I mean, small devices to super computers.


00:17:23.200 --> 00:17:24.580
I mean, it all works.


00:17:24.580 --> 00:17:25.200
Yeah, that's awesome.


00:17:25.200 --> 00:17:26.200
Yeah, very cool.


00:17:26.200 --> 00:17:26.500
All right.


00:17:26.500 --> 00:17:28.080
Well, people should check it out for sure.


00:17:28.080 --> 00:17:33.840
Now, before we move on, I do want to talk about our sponsor for this week.


00:17:33.840 --> 00:17:36.960
Microsoft for startups founders hub.


00:17:36.960 --> 00:17:38.840
They're doing super cool stuff.


00:17:38.840 --> 00:17:43.520
As someone who has started his own small business, it is a lot of work.


00:17:43.560 --> 00:17:44.700
and there's a lot of uncertainty


00:17:44.700 --> 00:17:47.340
and knowing how to get help


00:17:47.340 --> 00:17:49.820
and having support of people who have experience


00:17:49.820 --> 00:17:51.120
is really, really valuable.


00:17:51.120 --> 00:17:53.660
So starting business is hard.


00:17:53.660 --> 00:17:55.200
They say that by some estimates,


00:17:55.200 --> 00:17:57.860
90% of all the startups will go out of business


00:17:57.860 --> 00:18:00.820
in the first year, which is tough, but that's how it is.


00:18:00.820 --> 00:18:02.540
With that in mind, Microsoft for Startups


00:18:02.540 --> 00:18:05.080
set out to understand what startups need to be successful


00:18:05.080 --> 00:18:07.060
and create a digital platform


00:18:07.060 --> 00:18:08.660
to help overcome those challenges.


00:18:08.660 --> 00:18:11.180
And that's where they got their Founders Hub.


00:18:11.180 --> 00:18:12.980
So Microsoft for Startups Founders Hub


00:18:12.980 --> 00:18:16.700
provides all founders at any stage with free resources


00:18:16.700 --> 00:18:18.960
to help them solve startup challenges.


00:18:18.960 --> 00:18:23.540
You get technology benefits, access to expert guidance


00:18:23.540 --> 00:18:25.540
and skilled resources, mentorship,


00:18:25.540 --> 00:18:27.720
networking connections, and so much more.


00:18:27.720 --> 00:18:30.920
So, and unlike a lot of other similar programs


00:18:30.920 --> 00:18:33.160
in the industry, it doesn't require startups


00:18:33.160 --> 00:18:35.560
to be investor backed or third party validated


00:18:35.560 --> 00:18:36.800
to participate.


00:18:36.800 --> 00:18:38.880
Founders Hub is just open to everyone.


00:18:38.880 --> 00:18:39.780
So what do you get?


00:18:39.780 --> 00:18:41.680
You get, you can speed up your development


00:18:41.680 --> 00:18:45.200
with free access to GitHub and Microsoft Cloud resources


00:18:45.200 --> 00:18:47.440
that have a bunch of credits that unlock over time


00:18:47.440 --> 00:18:50.080
so you can grow without worrying about paying for stuff.


00:18:50.080 --> 00:18:52.040
They also help startups innovate.


00:18:52.040 --> 00:18:54.920
They're partnering with companies like OpenAI,


00:18:54.920 --> 00:18:57.400
an AI research and deployment company


00:18:57.400 --> 00:19:00.600
to get extra benefits through their partners as well.


00:19:00.600 --> 00:19:01.760
So with the Founders Hub,


00:19:01.760 --> 00:19:03.340
it's not really about who you know.


00:19:03.340 --> 00:19:06.160
You have this access to this mentorship network.


00:19:06.160 --> 00:19:08.660
So you get access to a pool of hundreds of mentors


00:19:08.660 --> 00:19:10.640
across a range of disciplines,


00:19:10.640 --> 00:19:12.880
in areas like idea validation, fundraising,


00:19:12.880 --> 00:19:15.520
management and coaching, sales and marketing,


00:19:15.520 --> 00:19:17.580
and specific technical stress points.


00:19:17.580 --> 00:19:19.400
I think that might be the most valuable honestly,


00:19:19.400 --> 00:19:21.920
is, hey, I need to talk to this person or somebody.


00:19:21.920 --> 00:19:22.840
Is this a good idea?


00:19:22.840 --> 00:19:23.680
Is this how I should be doing?


00:19:23.680 --> 00:19:24.500
And so on.


00:19:24.500 --> 00:19:26.600
So you can book a one-on-one meeting with mentors,


00:19:26.600 --> 00:19:28.800
many of whom are founders themselves.


00:19:28.800 --> 00:19:32.240
So make your idea a reality today with critical support


00:19:32.240 --> 00:19:35.440
that you'll get from Microsoft for Startups Founders Hub.


00:19:35.440 --> 00:19:38.920
During the program, visit pythonbites.fm/foundershub,


00:19:38.920 --> 00:19:40.440
click the link in your show notes,


00:19:40.440 --> 00:19:43.140
and yeah, thanks Microsoft for supporting the show.


00:19:43.140 --> 00:19:43.660
>> Nice.


00:19:43.660 --> 00:19:46.160
>> Indeed. All right, Brian, you got the next one, right?


00:19:46.160 --> 00:19:50.900
>> Yeah. I want to talk about Git a little bit.


00:19:50.900 --> 00:19:55.460
I've been using Git personally for a long time


00:19:55.460 --> 00:19:59.300
and professionally for many years at work for version control,


00:19:59.300 --> 00:20:01.820
of course, but I've used others as well.


00:20:01.820 --> 00:20:05.680
It's one of the interesting things about Git is you can do it,


00:20:05.680 --> 00:20:07.740
you can use it a lot of different ways


00:20:07.740 --> 00:20:10.820
and trips people up actually to start with.


00:20:10.820 --> 00:20:13.660
This is interesting. There's an article called


00:20:13.660 --> 00:20:16.300
Get Organized, a Better Git Workflow.


00:20:16.300 --> 00:20:20.460
I actually learned about it by listening to episode 480 of


00:20:20.460 --> 00:20:25.540
the Change Log which was talking about this workflow.


00:20:25.540 --> 00:20:28.380
The idea, it really appeals to me.


00:20:28.380 --> 00:20:30.620
I haven't tried it, but I'm going to try it out.


00:20:30.620 --> 00:20:32.940
I'm going to go through the idea.


00:20:32.940 --> 00:20:36.540
The idea is when you're working on


00:20:36.540 --> 00:20:39.380
a new project instead or some new code,


00:20:39.380 --> 00:20:45.100
you create a branch off of the master or main or whatever.


00:20:45.100 --> 00:20:48.340
Then you just push up your work with


00:20:48.340 --> 00:20:50.700
simple comments for yourself or


00:20:50.700 --> 00:20:54.660
just work in progress comments is all.


00:20:54.660 --> 00:21:00.720
Then when you're ready to do a PR or something,


00:21:00.720 --> 00:21:03.520
all of those commits are going to be in a sloppy format.


00:21:03.520 --> 00:21:05.220
It's hard to review those.


00:21:05.220 --> 00:21:10.100
But you, so what the proposal for this, and this is,


00:21:10.100 --> 00:21:11.620
who's the author of this?


00:21:11.620 --> 00:21:15.020
Annie Sexton. Annie's workflow is once you're at that point,


00:21:15.020 --> 00:21:16.260
you're ready to do a PR,


00:21:16.260 --> 00:21:20.660
go ahead and do a get reset against origin main.


00:21:20.660 --> 00:21:25.080
What that does is it keeps all of your changes that you've done,


00:21:25.080 --> 00:21:28.020
but it forgets all the history.


00:21:28.020 --> 00:21:30.640
Then you can recommit in


00:21:30.640 --> 00:21:33.980
a logical order that makes sense for reviewing.


00:21:33.980 --> 00:21:38.480
So you can do, I did clean up here.


00:21:38.480 --> 00:21:40.680
I added this feature over here.


00:21:40.680 --> 00:21:42.300
I fixed this bug over here.


00:21:42.300 --> 00:21:45.020
And there's a comment in the article,


00:21:45.020 --> 00:21:47.900
which I totally agree with, is you can say,


00:21:47.900 --> 00:21:50.580
I'm gonna separate those into different PRs,


00:21:50.580 --> 00:21:54.140
but often that's disruptive to your workflow.


00:21:54.140 --> 00:21:56.220
Often there's a few things you're doing.


00:21:56.220 --> 00:21:58.700
You're cleaning up while you're coding.


00:21:58.700 --> 00:21:59.820
- Brian, when I do that, I'm like,


00:21:59.820 --> 00:22:01.440
oh, I'm gonna check this in separately


00:22:01.440 --> 00:22:03.700
so I know that this is a special task


00:22:03.700 --> 00:22:05.460
that I'm gonna like isolate, and then I'm like,


00:22:05.460 --> 00:22:07.380
oh no, I just checked in part of it.


00:22:07.380 --> 00:22:09.340
You know, like it's so easy to go,


00:22:09.340 --> 00:22:11.380
oh darn, I was doing these two things at the same time,


00:22:11.380 --> 00:22:13.620
and yeah, so yeah, I feel that.


00:22:13.620 --> 00:22:15.160
- So some of the benefits of this are


00:22:15.160 --> 00:22:18.580
that it helps for big PRs.


00:22:18.580 --> 00:22:21.420
So once you're done, you've got a pull request


00:22:21.420 --> 00:22:25.380
that if somebody looks at the individual commits in the PR,


00:22:25.380 --> 00:22:29.260
they're broken up into easy to review bits.


00:22:29.260 --> 00:22:31.180
And I think that's lovely.


00:22:31.180 --> 00:22:34.480
I definitely wouldn't do something like this


00:22:34.480 --> 00:22:37.800
for a one line change or a small change.


00:22:37.800 --> 00:22:39.140
That's kind of overkill.


00:22:39.140 --> 00:22:42.200
But for things that you're working on for a while,


00:22:42.200 --> 00:22:45.560
this is sort of a cool workflow to play with.


00:22:45.560 --> 00:22:47.180
And I think I'm gonna try it out.


00:22:47.180 --> 00:22:48.020
Looks neat.


00:22:48.020 --> 00:22:48.840
- Yeah, this looks great.


00:22:48.840 --> 00:22:50.300
I'm definitely gonna explore it as well,


00:22:50.300 --> 00:22:52.240
because I was just listening to a podcast


00:22:52.240 --> 00:22:53.520
where somebody was talking about like,


00:22:53.520 --> 00:22:57.340
oh yeah, I issued a PR to myself and then I accepted it.


00:22:57.340 --> 00:22:59.440
And other people laughed, they're like, that's so weird.


00:22:59.440 --> 00:23:00.760
Why would you do a PR to yourself?


00:23:00.760 --> 00:23:03.560
But like these organizing ways of like,


00:23:03.560 --> 00:23:05.800
this is the whole feature


00:23:05.800 --> 00:23:07.240
or this is the whole thing that I did.


00:23:07.240 --> 00:23:09.840
Like there's real value in having that as a,


00:23:09.840 --> 00:23:11.600
oh no, what changed across this?


00:23:11.600 --> 00:23:12.840
I need to go back and compare


00:23:12.840 --> 00:23:14.800
or like know the totality of it and stuff.


00:23:14.800 --> 00:23:16.560
I really like these organizing ideas.


00:23:16.560 --> 00:23:18.320
So I'm definitely gonna look into it.


00:23:18.320 --> 00:23:19.240
What do you think, Anne?


00:23:19.240 --> 00:23:20.680
- I like it too.


00:23:20.680 --> 00:23:25.680
My workflow and that of a couple of colleagues


00:23:25.680 --> 00:23:29.880
I can think of would benefit from that


00:23:29.880 --> 00:23:32.040
because some things get chaotic.


00:23:32.040 --> 00:23:34.160
Oftentimes with Datafruit,


00:23:34.160 --> 00:23:36.160
you're working on something,


00:23:36.160 --> 00:23:37.380
you kind of get blocked,


00:23:37.380 --> 00:23:39.760
and then you go to something else.


00:23:39.760 --> 00:23:41.400
It's very easy to say,


00:23:41.400 --> 00:23:44.520
"Okay, where am I and where did I leave off?"


00:23:44.520 --> 00:23:47.520
I think anything to help that.


00:23:47.520 --> 00:23:49.120
- Wonderful. - Yeah, very cool.


00:23:49.120 --> 00:23:51.240
I definitely use the feature branch,


00:23:51.240 --> 00:23:53.440
do a bunch of changes over there, PR these days,


00:23:53.440 --> 00:23:55.520
even if it's just I'm the only one who's gonna see it


00:23:55.520 --> 00:23:58.140
because it just helps me organize for sure.


00:23:58.140 --> 00:24:00.740
All right, speaking of Git and organizing


00:24:00.740 --> 00:24:03.260
on all that thing, all those things,


00:24:03.260 --> 00:24:06.340
traditionally, if you want to issue a bug


00:24:06.340 --> 00:24:10.260
or track changes to CPython,


00:24:10.260 --> 00:24:14.000
you'd have to go over to bugs.python.org, I think it was.


00:24:14.000 --> 00:24:15.640
And yet a long time ago,


00:24:15.640 --> 00:24:18.380
they moved the CPython source code to GitHub.


00:24:18.380 --> 00:24:20.500
So it would be natural, like, well,


00:24:20.500 --> 00:24:22.700
if you're already there and you wanna do a PR


00:24:22.700 --> 00:24:24.380
against GitHub, wouldn't it be awesome


00:24:24.380 --> 00:24:26.180
if like the issue was there,


00:24:26.180 --> 00:24:30.380
you could say at issue 1,226,000, whatever it is,


00:24:30.380 --> 00:24:32.180
this solves that or this addresses that


00:24:32.180 --> 00:24:33.020
or something like that.


00:24:33.020 --> 00:24:34.920
And so that's starting to happen.


00:24:34.920 --> 00:24:37.080
And I believe that this is really one of the things


00:24:37.080 --> 00:24:39.120
that's being made possible by Luka Schlinga


00:24:39.120 --> 00:24:42.320
becoming the CPython core developer in residence


00:24:42.320 --> 00:24:43.720
'cause he can take the time


00:24:43.720 --> 00:24:45.720
and actually focus on getting this done.


00:24:45.720 --> 00:24:46.660
It might sound like,


00:24:46.660 --> 00:24:49.820
"Oh, you just copy the stuff from over in that system.


00:24:49.820 --> 00:24:51.460
"And then you just create them over here."


00:24:51.460 --> 00:24:53.160
But there's stuff going on


00:24:53.160 --> 00:24:55.560
that like makes this a little bit tricky.


00:24:55.560 --> 00:25:00.840
So if you look at the article I'm linking to by Lukasz, GitHub issues, migration is coming soon.


00:25:00.840 --> 00:25:05.960
There's a bunch of stuff going on about testing and how long it takes.


00:25:05.960 --> 00:25:11.080
Let me see if I wrote that down, like one of the actual duration.


00:25:11.080 --> 00:25:13.480
So it was pretty mind blowing.


00:25:13.480 --> 00:25:19.720
It was like, yeah, the migration is estimated to take anywhere from three to seven days of continuous


00:25:19.720 --> 00:25:23.640
tight loop import this over to their next, next, next.


00:25:24.280 --> 00:25:28.760
And so some of the things they got to deal with is like, well, if it's a seven day gap,


00:25:28.760 --> 00:25:33.400
and the issue appears over there, but we haven't yet closed it out on the other side,


00:25:33.400 --> 00:25:36.600
well, people could be commenting on both ones, and you could get like,


00:25:36.600 --> 00:25:41.080
effectively merge conflicts, I guess you would think of them as in GitHub.


00:25:41.080 --> 00:25:45.800
So pretty wild to think about how, how they're doing this. Should they start with the newest


00:25:45.800 --> 00:25:49.240
one? So people have immediate access to that? Or should they start with the oldest ones?


00:25:49.240 --> 00:25:54.120
Because they're least likely to change. And it's, it's pretty interesting. They've compared it to


00:25:54.120 --> 00:25:56.560
to some other really, really large platforms


00:25:56.560 --> 00:25:58.440
that have made a similar change.


00:25:58.440 --> 00:26:01.280
Like the LLVM project made a similar migration


00:26:01.280 --> 00:26:03.880
from Bugzilla, Gasp.


00:26:03.880 --> 00:26:08.440
And it took them 21 days to do the import.


00:26:08.440 --> 00:26:11.400
So yeah, there's a lot of stuff going on


00:26:11.400 --> 00:26:14.960
to get the CPython issues and conversation


00:26:14.960 --> 00:26:16.320
fully over to GitHub.


00:26:16.320 --> 00:26:18.760
But thank you, Lukasz and team for doing this


00:26:18.760 --> 00:26:20.120
because yeah, there's a lot.


00:26:20.120 --> 00:26:21.520
And if you look at the comments below,


00:26:21.520 --> 00:26:22.960
there's a ton of comments that have


00:26:22.960 --> 00:26:25.840
like some pretty interesting stuff if you want to look deep.


00:26:25.840 --> 00:26:28.640
>> To be fair, some of the complexity here is because they're


00:26:28.640 --> 00:26:31.880
trying to do it without shutting people out.


00:26:31.880 --> 00:26:36.080
Because one of the things you could do is you could turn


00:26:36.080 --> 00:26:40.040
off submissions or comments for a week and then just convert it all.


00:26:40.040 --> 00:26:40.960
>> Yeah, exactly.


00:26:40.960 --> 00:26:41.280
>> Yeah.


00:26:41.280 --> 00:26:45.560
>> But then that stops conversation for a week.


00:26:45.560 --> 00:26:49.600
>> I think the real challenge is it's difficult to turn off partial.


00:26:49.600 --> 00:26:53.480
it's hard to go like this older quarter of issues,


00:26:53.480 --> 00:26:55.840
we're going to turn them off and then import them.


00:26:55.840 --> 00:26:57.380
>> Yeah, but you can turn everything off.


00:26:57.380 --> 00:26:57.960
You could just say.


00:26:57.960 --> 00:27:00.360
>> Yeah, that's the problem. I think they don't want to turn it all off.


00:27:00.360 --> 00:27:02.480
If they could do it in a more fine-grained way,


00:27:02.480 --> 00:27:03.980
I think that they would already be on it.


00:27:03.980 --> 00:27:07.140
But yeah, there's a lot of conversation. That's a good point though.


00:27:07.140 --> 00:27:07.960
>> It held off.


00:27:07.960 --> 00:27:11.600
>> Are you excited to see GitHub issues


00:27:11.600 --> 00:27:14.720
for CPython over here where they belong next to the code?


00:27:14.720 --> 00:27:19.280
>> I am. I already read this and put it on the newsletter.


00:27:19.280 --> 00:27:22.080
It's all good to have it in one place.


00:27:22.080 --> 00:27:28.200
I don't know if there's any nexus between Guido working for Microsoft who owns GitHub,


00:27:28.200 --> 00:27:38.480
but it's definite that where the code is and you have your discussion process integrated.


00:27:38.480 --> 00:27:48.400
That actually gives the GitHub developers a way in which to look at which a large project,


00:27:48.400 --> 00:27:57.360
the workflow goes as far as things and they can make more modern optimizations to say,


00:27:57.360 --> 00:28:00.200
"Hey, this is hard."


00:28:00.200 --> 00:28:03.520
It was maybe hard in bugs.python.org.


00:28:03.520 --> 00:28:06.760
We can make it a lot easier on GitHub,


00:28:06.760 --> 00:28:11.240
maybe not today, but with a couple of tweaks in the next release.


00:28:11.240 --> 00:28:16.200
>> Yeah, absolutely. It's definitely going to do a stress test thing for them.


00:28:16.200 --> 00:28:19.480
And you got the final one, the final one of our main topics.


00:28:19.480 --> 00:28:22.200
Sure, I was going to talk a little bit,


00:28:22.200 --> 00:28:25.880
my in and out about MicroPython, CircuitPython,


00:28:25.880 --> 00:28:28.760
and GitHub, and we were just talking about


00:28:28.760 --> 00:28:32.520
is an important parcel in all of this.


00:28:32.520 --> 00:28:36.520
That CPython just will not work currently.


00:28:36.520 --> 00:28:38.520
I mean, somebody might someday say,


00:28:38.520 --> 00:28:41.160
"Okay, we'll slim down CPython."


00:28:41.160 --> 00:28:43.560
But for now, MicroPython,


00:28:43.560 --> 00:28:47.880
which was started as a Kickstarter by Damian George


00:28:47.880 --> 00:28:52.880
back in 2013, does a very good job of providing Python


00:28:52.880 --> 00:28:56.940
on small microcontroller boards,


00:28:56.940 --> 00:29:00.080
like a Raspberry Pi single board computer


00:29:00.080 --> 00:29:02.020
or a microcontroller board.


00:29:02.020 --> 00:29:05.320
And microcontrollers are all around us.


00:29:05.320 --> 00:29:09.760
There's one in this microphone and they're everywhere.


00:29:09.760 --> 00:29:11.840
They're sprinkled like silicon dust.


00:29:12.760 --> 00:29:21.500
MicroPython has some syntax that isn't quite the same as CPython in certain areas.


00:29:21.500 --> 00:29:28.640
Adafruit, when looking at moving into an easy way to program microcontrollers,


00:29:28.640 --> 00:29:33.200
decided that MicroPython was a wonderful starting point,


00:29:33.200 --> 00:29:40.160
but they forked it to have some features which they wanted to focus on,


00:29:40.240 --> 00:29:46.440
which is perfectly fine because both are under MIT open source licenses,


00:29:46.440 --> 00:29:52.940
so there's no conflict as opposed to some other sharing licenses.


00:29:52.940 --> 00:29:57.180
Why the fork? Well, three things.


00:29:57.180 --> 00:30:04.040
CircuitPython boards are specifically made such that they have a USB port,


00:30:04.040 --> 00:30:05.740
and they work just like a thumb drive.


00:30:05.800 --> 00:30:10.800
You plug it into a computer, PC, Mac, Linux, whatever,


00:30:10.800 --> 00:30:13.140
and it should show up as a thumb drive.


00:30:13.140 --> 00:30:18.140
Very small one, but you can drag a text file


00:30:18.140 --> 00:30:23.000
with your source code onto it or off of it,


00:30:23.000 --> 00:30:24.540
and it just runs.


00:30:24.540 --> 00:30:27.800
Immediately, once there's a change in the file system,


00:30:27.800 --> 00:30:28.740
it picks it up.


00:30:28.740 --> 00:30:31.360
- Yeah, the programming model is super interesting, right?


00:30:31.360 --> 00:30:33.540
Like, if there's a file called a certain thing


00:30:33.540 --> 00:30:37.180
in a certain location, it just boots and runs it top to bottom.


00:30:37.180 --> 00:30:39.380
And if that file changes, it just reboots, right?


00:30:39.380 --> 00:30:39.980
That's right.


00:30:39.980 --> 00:30:43.100
The equivalent of reboot for a $5 microcontroller.


00:30:43.100 --> 00:30:46.100
We recommend code.py.


00:30:46.100 --> 00:30:50.620
And yeah, if it detects a change, then it just says,


00:30:50.620 --> 00:30:53.420
okay, I'm going to restart and do things over.


00:30:53.420 --> 00:30:56.420
And it provides instant feedback,


00:30:56.420 --> 00:31:01.580
which a lot of people like the tried and true code


00:31:01.580 --> 00:31:12.140
in a framework compile fix errors and then upload it to some piece of hardware is not something that a lot of


00:31:12.140 --> 00:31:14.860
people understand in in


00:31:14.860 --> 00:31:19.420
2022 whereas anybody can copy a file from one place to another


00:31:19.420 --> 00:31:24.460
And then they light up when they say hey it worked or or oh, I got an error message


00:31:24.460 --> 00:31:26.540
I need to yeah a little syntax. I'm


00:31:26.540 --> 00:31:29.180
learning python or something um


00:31:29.180 --> 00:31:31.020
so


00:31:31.020 --> 00:31:38.060
Brandon out in the audience former guess here said I flashed my ESP 32 s to run micro Python and have a look back the


00:31:38.060 --> 00:31:40.620
special on ESP 32


00:31:40.620 --> 00:31:47.600
Processors there's a framework by the the company that makes it and it's rather daunting


00:31:47.600 --> 00:31:50.960
What you might have to do?


00:31:50.960 --> 00:31:59.240
Circuit Python or micro Python makes it very easy to think of it just as another piece of hardware rather than a specialized


00:32:00.900 --> 00:32:03.500
way in which one might have to code it.


00:32:03.500 --> 00:32:05.960
Let's see, what else we got?


00:32:05.960 --> 00:32:10.460
Oh, CircuitPython specifically wants to


00:32:10.460 --> 00:32:14.100
use CPython syntax whenever possible.


00:32:14.100 --> 00:32:18.200
Because again, MicroPython has deviated a bit.


00:32:18.200 --> 00:32:23.000
But we want as much CPython code to be


00:32:23.000 --> 00:32:25.500
mirrored over as possible.


00:32:25.500 --> 00:32:30.060
And finally, make it easy to use and understand for beginners.


00:32:30.120 --> 00:32:33.280
Pretty much most of the folks are there,


00:32:33.280 --> 00:32:36.360
so Power users can dig right in.


00:32:36.360 --> 00:32:39.100
We recently added a SyncIO.


00:32:39.100 --> 00:32:41.080
You were talking about it. Yeah.


00:32:41.080 --> 00:32:43.800
MicroPython actually does


00:32:43.800 --> 00:32:46.960
asynchronous work a little better than CircuitPython.


00:32:46.960 --> 00:32:49.640
It exposes some of the lower levels.


00:32:49.640 --> 00:32:54.020
Again, we recommend if the Power users use that,


00:32:54.020 --> 00:33:00.820
but CircuitPython wants to come into that world also.


00:33:00.820 --> 00:33:02.720
-Nice. -Yeah.


00:33:02.720 --> 00:33:06.820
It also provides a lot of equipment abstraction.


00:33:06.820 --> 00:33:13.580
There are currently 283 boards that are compatible with CircuitPython,


00:33:13.580 --> 00:33:15.480
and 87 single-board computers.


00:33:15.480 --> 00:33:18.820
Now, Raspberry Pi lineup everybody knows about,


00:33:18.820 --> 00:33:21.560
but what about Orange Pi and Banana Pi,


00:33:21.620 --> 00:33:25.860
the Sony's presence, there are


00:33:25.860 --> 00:33:27.220
pie board and all those things.


00:33:27.220 --> 00:33:27.620
Yeah.


00:33:27.620 --> 00:33:31.140
Um, that they run C Python just fine.


00:33:31.140 --> 00:33:35.920
But if you want to hook up a specific sensor, you don't want to have to code


00:33:35.920 --> 00:33:41.540
down to the, register, level on, on shifting bits around 80 fruits


00:33:41.540 --> 00:33:43.420
already done that for a lot of hardware.


00:33:43.420 --> 00:33:47.980
So you throw on the, some software called the blink abstraction layer.


00:33:48.280 --> 00:33:51.600
and that interfaces between CPython on the small boards


00:33:51.600 --> 00:33:54.600
and CircuitPython code in the library.


00:33:54.600 --> 00:33:56.960
And for the most part, it just works.


00:33:56.960 --> 00:33:58.440
- Nice, yeah.


00:33:58.440 --> 00:33:59.440
CircuitPython's great.


00:33:59.440 --> 00:34:01.240
People who wanna get started with small devices


00:34:01.240 --> 00:34:03.940
should definitely, definitely check that out.


00:34:03.940 --> 00:34:06.920
- And there's a lot of tutorials


00:34:06.920 --> 00:34:08.360
on the Adafruit Learning System


00:34:08.360 --> 00:34:11.320
and various websites around the internet


00:34:11.320 --> 00:34:15.720
of people who have tackled some of these interface changes.


00:34:15.720 --> 00:34:20.720
and we encourage people to check things out, the tires.


00:34:20.720 --> 00:34:22.200
- Cool, very nice.


00:34:22.200 --> 00:34:24.640
All right, well, that's it for our main items, Brian.


00:34:24.640 --> 00:34:26.480
- Oh, I just wanted a quick shout out.


00:34:26.480 --> 00:34:27.320
- Got 30 minutes for this next one.


00:34:27.320 --> 00:34:28.720
- 30 minutes.


00:34:28.720 --> 00:34:31.560
No, I just thought that this is a really easy,


00:34:31.560 --> 00:34:34.000
quick blog post by Daniel Roy Greenfield


00:34:34.000 --> 00:34:36.280
that I wanted to plug 'cause it's a good idea.


00:34:36.280 --> 00:34:37.100
30 minute rule.


00:34:37.100 --> 00:34:39.760
So if you're working on a problem at work,


00:34:39.760 --> 00:34:42.900
and especially at work if you have colleagues,


00:34:42.900 --> 00:34:45.200
and you get stuck on the same problem


00:34:45.200 --> 00:34:48.200
for the half an hour, half an hour is the mark,


00:34:48.200 --> 00:34:49.760
you should ask for help,


00:34:49.760 --> 00:34:51.920
because maybe you're just spinning your wheels


00:34:51.920 --> 00:34:53.000
or wasting time.


00:34:53.000 --> 00:34:56.160
I would also add in, maybe that's time to just get up


00:34:56.160 --> 00:34:58.000
and go get some coffee, go have some lunch.


00:34:58.000 --> 00:34:59.240
- Absolutely.


00:34:59.240 --> 00:35:01.920
- Walk around, and maybe you don't have the problem.


00:35:01.920 --> 00:35:06.160
But yeah, it's a different number for different people,


00:35:06.160 --> 00:35:08.760
but just remember, don't get stuck for too long.


00:35:08.760 --> 00:35:09.800
It's probably not you,


00:35:09.800 --> 00:35:12.680
it's you're just thinking about it wrong or something.


00:35:12.680 --> 00:35:15.160
- There's Twitter, there's Discords,


00:35:15.160 --> 00:35:17.680
there's places you can go and ask for help and yeah.


00:35:17.680 --> 00:35:19.400
Or even coworkers.


00:35:19.400 --> 00:35:21.640
So I got two quick extras.


00:35:21.640 --> 00:35:24.200
One, James wrote into us, remember I said,


00:35:24.200 --> 00:35:27.280
when you say Python 3, do you really need to go back


00:35:27.280 --> 00:35:30.680
and say, well, Python 3.7.2 and beyond


00:35:30.680 --> 00:35:32.880
is this thing I am talking, or just like,


00:35:32.880 --> 00:35:34.920
if it's an expired version of Python,


00:35:34.920 --> 00:35:37.320
do we really, you know, a non-supported out of date,


00:35:37.320 --> 00:35:38.800
like Python 3.2 or something,


00:35:38.800 --> 00:35:41.040
do you really need to explicitly not talk about it?


00:35:41.040 --> 00:35:43.400
Well, James wrote in, said,


00:35:43.400 --> 00:35:46.200
You guys were discussing Python 3


00:35:46.200 --> 00:35:48.280
to mean any current supported version


00:35:48.280 --> 00:35:51.040
rather than say 3.7 plus or similar.


00:35:51.040 --> 00:35:52.680
In my world, that's a really bad idea.


00:35:52.680 --> 00:35:54.760
There's still tons of people using unsupported versions


00:35:54.760 --> 00:35:57.880
of Python and they're not all invalid use cases.


00:35:57.880 --> 00:35:59.720
For example, I'm one of the upstream maintainers


00:35:59.720 --> 00:36:00.840
at Cloud Admin.


00:36:00.840 --> 00:36:03.360
Now it's only recently able to remove Python 3.5


00:36:03.360 --> 00:36:05.920
in order to make 3.6 our minimum supported version,


00:36:05.920 --> 00:36:07.240
which will continue for a year.


00:36:07.240 --> 00:36:08.640
The reason is that our main customers


00:36:08.640 --> 00:36:10.520
are downstream distro packages


00:36:10.520 --> 00:36:12.500
like Ubuntu and Red Hat and so on.


00:36:12.500 --> 00:36:16.100
And it's not uncommon for software released


00:36:16.100 --> 00:36:19.020
into long-term support, LTS OS,


00:36:19.020 --> 00:36:21.180
to be supported for five to 10 years.


00:36:21.180 --> 00:36:24.220
So that's a world that I don't live in,


00:36:24.220 --> 00:36:27.100
but I didn't really think about the LTS story of like,


00:36:27.100 --> 00:36:28.620
yeah, we're gonna support this for 10 years


00:36:28.620 --> 00:36:31.500
and it comes with this, so it's gotta keep getting that.


00:36:31.500 --> 00:36:33.380
So yeah, that's a very valid point, James,


00:36:33.380 --> 00:36:35.940
and thanks for sharing your experience.


00:36:35.940 --> 00:36:37.940
- Top of the list of jobs I don't want.


00:36:37.940 --> 00:36:39.460
(both laughing)


00:36:39.460 --> 00:36:40.340
- Is it 10 years old?


00:36:40.340 --> 00:36:41.180
I can't change it?


00:36:41.180 --> 00:36:41.780
Okay.


00:36:41.780 --> 00:36:46.780
And then I was going to talk about Paul Cutler's new podcast, the circuit


00:36:46.780 --> 00:36:47.580
Python show.


00:36:47.580 --> 00:36:49.580
If you're in a circuit Python, check it out.


00:36:49.580 --> 00:36:53.380
He's really in the circuit Python and he and I have talked a lot about


00:36:53.380 --> 00:36:54.980
getting him set up on this podcast.


00:36:54.980 --> 00:36:55.780
So congrats.


00:36:55.780 --> 00:36:57.980
Happy to see that out there and I hear you're going to be on the show.


00:36:57.980 --> 00:36:58.480
Is that right?


00:36:58.480 --> 00:37:00.080
Um, yes.


00:37:00.080 --> 00:37:04.580
Uh, in a, in a upcoming episode, I will be on it.


00:37:04.580 --> 00:37:08.680
Um, you know, Paul is not affiliated with data fruit, no paid.


00:37:08.680 --> 00:37:10.580
No, he has independent control.


00:37:10.580 --> 00:37:18.160
his baby, but we love the fact that he's doing it. We've recommended people in the community


00:37:18.160 --> 00:37:24.020
that he might want to chat with and again, he's interviewing, you know, the odd Adafruit


00:37:24.020 --> 00:37:33.980
person, but and I mean odd. That there are many other people and I like what he's doing


00:37:33.980 --> 00:37:38.620
a lot. Yeah, this is the first episode. He's also got like a preview thing of like, what


00:37:38.620 --> 00:37:42.260
is this thing I'm doing? And it's good so far.


00:37:42.260 --> 00:37:45.180
So today it's speaking of it's less pounder.


00:37:45.180 --> 00:37:48.580
He works. He's done a lot in the UK.


00:37:48.580 --> 00:37:53.220
He's working for Tom's hardware and he's done a lot with circuit


00:37:53.220 --> 00:37:56.420
Python. So it's wonderful. Speaking of podcasts, I just want to give a


00:37:56.420 --> 00:38:00.300
quick announcement, Brian, that we traditionally have not been on Spotify.


00:38:00.300 --> 00:38:03.660
I now moved our stuff over to Spotify. So people want to listen on Spotify


00:38:03.660 --> 00:38:07.660
for Python bites. It is not during the dark side. We have joined the


00:38:07.660 --> 00:38:12.100
dark side. All right. That's it for all of our stuff, right? Are we ready for a joke?


00:38:12.100 --> 00:38:19.140
Yeah, sure. It's you know, it's we're recording a Tuesday, March 8. Imagine that it is Friday


00:38:19.140 --> 00:38:24.220
and come into work. Has this ever happened to you? Me on Friday, I'll just stop here


00:38:24.220 --> 00:38:29.520
and pick up where I left off. Me on Monday. This is developer just staring like holding


00:38:29.520 --> 00:38:35.300
their head like what? What was I doing? Why did I not make a better note of this? Why


00:38:35.300 --> 00:38:36.700
I did not write this down.


00:38:36.700 --> 00:38:37.900
What is happening?


00:38:37.900 --> 00:38:39.840
>> Yeah, that's good.


00:38:39.840 --> 00:38:42.180
>> We can all relate, right, Anne?


00:38:42.180 --> 00:38:43.740
>> Definitely, isn't there?


00:38:43.740 --> 00:38:45.800
>> So you got to give good whip comments to


00:38:45.800 --> 00:38:50.140
yourself when you commit last on Friday.


00:38:50.140 --> 00:38:52.220
>> But Friday, you're trying to get out.


00:38:52.220 --> 00:38:55.260
You're trying to start your weekend.


00:38:55.260 --> 00:38:56.780
I mean, notes.


00:38:56.780 --> 00:39:00.240
>> Exactly. This is the hangover though.


00:39:00.240 --> 00:39:01.100
This is what you get.


00:39:01.100 --> 00:39:02.100
>> I love it.


00:39:02.100 --> 00:39:03.560
>> I do too. All right. Well,


00:39:03.560 --> 00:39:05.180
I love that Anne came to join and I


00:39:05.180 --> 00:39:06.460
I've been here with you, Brian, every week.


00:39:06.460 --> 00:39:07.300
So thank you both.


00:39:07.300 --> 00:39:10.860
- Yeah, and thanks everybody that was on the stream


00:39:10.860 --> 00:39:11.980
watching.


00:39:11.980 --> 00:39:12.820
- Yep.


00:39:12.820 --> 00:39:13.640
- Thank you. - Thank you.


00:39:13.640 --> 00:39:14.620
- It's been a lot of fun.


00:39:14.620 --> 00:39:15.460
I enjoyed it.


00:39:15.460 --> 00:39:16.660
- Yeah, same, bye.


00:39:16.660 --> 00:39:18.480
- Thanks for listening to Python Bytes.


00:39:18.480 --> 00:39:21.340
Follow the show on Twitter via @PythonBytes.


00:39:21.340 --> 00:39:24.460
That's Python Bytes as in B-Y-T-E-S.


00:39:24.460 --> 00:39:27.300
Get the full show notes over at PythonBytes.fm.


00:39:27.300 --> 00:39:29.180
If you have a news item we should cover,


00:39:29.180 --> 00:39:32.420
just visit PythonBytes.fm and click submit in the nav bar.


00:39:32.420 --> 00:39:34.740
We're always on the lookout for sharing something cool.


00:39:34.740 --> 00:39:36.700
If you want to join us for the live recording,


00:39:36.700 --> 00:39:38.980
just visit the website and click live stream


00:39:38.980 --> 00:39:42.140
to get notified of when our next episode goes live.


00:39:42.140 --> 00:39:45.540
That's usually happening at noon Pacific on Wednesdays


00:39:45.540 --> 00:39:46.520
over at YouTube.


00:39:46.520 --> 00:39:48.620
On behalf of myself and Brian Aukin,


00:39:48.620 --> 00:39:49.900
this is Michael Kennedy.


00:39:49.900 --> 00:39:52.140
Thank you for listening and sharing this podcast


00:39:52.140 --> 00:39:53.780
with your friends and colleagues.

