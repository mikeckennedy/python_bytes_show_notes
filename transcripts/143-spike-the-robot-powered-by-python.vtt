
00:00:00.000 --> 00:00:04.960
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.960 --> 00:00:10.720
This is episode 143, recorded August 7th, 2019. I'm Michael Kennedy.


00:00:10.720 --> 00:00:11.440
And I'm Brian Reichen.


00:00:11.440 --> 00:00:13.600
And Brian, we have a special guest this week.


00:00:13.600 --> 00:00:14.640
Yeah, very special.


00:00:14.640 --> 00:00:17.200
Yeah, Kelly Schuster Perez. Welcome, Kelly.


00:00:17.200 --> 00:00:18.640
Thank you. Thank you for having me.


00:00:18.640 --> 00:00:22.880
It's great to have you here. I know you do a lot of podcasting, but you can do a little


00:00:22.880 --> 00:00:24.720
podcasting with us in addition to that, huh?


00:00:24.720 --> 00:00:29.200
It's very exciting. And I've become quite an expert now at podcasting, I think, with my whole


00:00:29.760 --> 00:00:35.120
25 or 26 episodes. I would say I know Brian, what do you think? What's the the major milestone?


00:00:35.120 --> 00:00:40.960
You got across 10 after 10. You're kind of in. Yeah, I think so. I think I don't think i'm worried about these guys


00:00:40.960 --> 00:00:44.480
They're pretty dedicated. I think yeah, definitely you all seem to be going strong


00:00:44.480 --> 00:00:49.760
So we'll talk more about your podcast at the end. Let you get a word in about that and tell everyone


00:00:49.760 --> 00:00:55.300
I also want to tell you that this episode is brought to you by digital ocean check them out at pythonbytes.fm/digitalocean


00:00:56.960 --> 00:00:58.960
Get a $50 credit for new users.


00:00:58.960 --> 00:01:01.460
Lots of good stuff there. Tell you more about that as well.


00:01:01.460 --> 00:01:03.460
Brian, you want to kick us off with a keynote?


00:01:03.460 --> 00:01:05.460
Yeah. So we don't often...


00:01:05.460 --> 00:01:08.160
There's a lot of great videos out there and sometimes we'll


00:01:08.160 --> 00:01:12.460
recommend people that mention when new conference videos show up.


00:01:12.460 --> 00:01:15.960
So I don't even really know what PyLondinium...


00:01:15.960 --> 00:01:19.760
PyLondinium19. I'm guessing that's a London Python conference.


00:01:19.760 --> 00:01:23.760
Yeah, that or it's a new element discovered out far at the


00:01:23.760 --> 00:01:25.760
far end of the elemental table there.


00:01:25.760 --> 00:01:46.980
But it sounds cool. I saw a couple people recommending this video by Lucas Lange, his keynote about Python 2020. So that's just looking forward a little bit. It's a keynote. So it's kind of a long talk. It's a you know, about an hour ish. It was really interesting and it's interesting. A lot of friends and one of the eight. What I want to highlight is he gets into that.


00:01:47.400 --> 00:01:55.320
It is important for us to try to get Python on multiple platforms and not just on the desktop or on the back end.


00:01:55.320 --> 00:02:06.520
There's other platforms specifically like web, front end stuff, 3D games, system orchestration, mobile platforms that have other languages that are used more than Python.


00:02:06.520 --> 00:02:16.880
The question is really maybe we can get there if we don't limit ourselves to the same implementation of CPython, that maybe we limit the implementation.


00:02:17.280 --> 00:02:21.840
And as an example, MicroPython and CircuitPython are very successful


00:02:21.840 --> 00:02:23.960
and they are limited implementations.


00:02:23.960 --> 00:02:26.080
They don't do everything that Python can do.


00:02:26.080 --> 00:02:28.360
Right, those run on little tiny embedded chips, right?


00:02:28.360 --> 00:02:29.920
Like $5 chips.


00:02:29.920 --> 00:02:34.600
And so you can't put all of CPython into that little tiny thing


00:02:34.600 --> 00:02:36.480
and expect it to behave well.


00:02:36.480 --> 00:02:38.960
So you've got like this, as you said, limited one.


00:02:38.960 --> 00:02:40.600
And yeah, maybe that does make sense.


00:02:40.600 --> 00:02:43.440
We kind of have a limited one for the web front end, right?


00:02:43.440 --> 00:02:47.320
We've got Sculpt and Brython and some of those things as well.


00:02:47.320 --> 00:02:48.920
But I don't feel like it's--


00:02:48.920 --> 00:02:51.720
maybe it's not limited enough, because those are pretty massive


00:02:51.720 --> 00:02:54.120
downloads for your JavaScript.


00:02:54.120 --> 00:02:57.280
But I think this is a really important message.


00:02:57.280 --> 00:02:59.920
And I think the idea of some kind of limited thing


00:02:59.920 --> 00:03:01.520
is quite interesting.


00:03:01.520 --> 00:03:05.080
We had the conversation or the debate


00:03:05.080 --> 00:03:07.520
at the Core Developer Language Summit


00:03:07.520 --> 00:03:11.000
and around that about what do we maybe take out of Python,


00:03:11.000 --> 00:03:14.200
or how do we create a minimum subset of Python?


00:03:14.200 --> 00:03:16.800
It seems like this is kind of part of that conversation.


00:03:16.800 --> 00:03:18.720
- The discussion even talked about things


00:03:18.720 --> 00:03:20.240
that I hadn't even thought about before.


00:03:20.240 --> 00:03:23.680
Like if you're controlling, like you would on JavaScript,


00:03:23.680 --> 00:03:26.960
you're controlling, it gets compiled down into,


00:03:26.960 --> 00:03:29.600
modern JavaScript now gets compiled down into something


00:03:29.600 --> 00:03:32.320
that isn't the same as what people wrote it in


00:03:32.320 --> 00:03:34.680
that gets delivered to the end user.


00:03:34.680 --> 00:03:38.920
And things that, like for instance, massive imports,


00:03:38.920 --> 00:03:44.760
Maybe we don't need the same flexibility of the import system for a web front end stuff.


00:03:44.760 --> 00:03:49.560
And it also reminded me of how C and C++ went,


00:03:49.560 --> 00:03:54.360
because there are many other compilers of C and C++,


00:03:54.360 --> 00:03:58.760
not just Visual, like Visual Studio or GCC,


00:03:58.760 --> 00:04:02.600
that are targeted, because like you were saying, for different limitations,


00:04:02.600 --> 00:04:05.720
I've worked on platforms that really still felt like C++,


00:04:05.720 --> 00:04:07.800
but they threw out the template system.


00:04:07.800 --> 00:04:08.920
You can't use that.


00:04:08.920 --> 00:04:09.760
- Sure.


00:04:09.760 --> 00:04:10.580
- He was even bringing up things


00:04:10.580 --> 00:04:12.280
that I didn't even think about, like monkey patching.


00:04:12.280 --> 00:04:15.800
Maybe we don't allow monkey patching for some cases.


00:04:15.800 --> 00:04:17.640
And I think this is a great idea.


00:04:17.640 --> 00:04:18.960
- It's definitely an interesting idea


00:04:18.960 --> 00:04:20.120
and worth thinking about.


00:04:20.120 --> 00:04:21.900
Kelly, you do a lot with education.


00:04:21.900 --> 00:04:25.080
Your main day job is teaching kids


00:04:25.080 --> 00:04:26.760
and programming and stuff, yeah?


00:04:26.760 --> 00:04:27.720
- Yes, that's correct.


00:04:27.720 --> 00:04:30.460
And we use MicroPython and CircuitPython,


00:04:30.460 --> 00:04:32.660
and I actually watched some of the keynote,


00:04:32.660 --> 00:04:34.620
and I found it kind of interesting


00:04:34.620 --> 00:04:36.560
how you scroll through the documentation.


00:04:36.560 --> 00:04:40.280
And I don't really get into that conversation with the kids


00:04:40.280 --> 00:04:41.460
on where it's coming from.


00:04:41.460 --> 00:04:44.360
I always tell them that some smart guys and girls


00:04:44.360 --> 00:04:46.520
have put all this information in there


00:04:46.520 --> 00:04:48.160
and we don't have to worry about that.


00:04:48.160 --> 00:04:50.040
And in some cases it's great


00:04:50.040 --> 00:04:54.080
because we can only do that limited amount and it's fast.


00:04:54.080 --> 00:04:56.240
And I think there should be more of it.


00:04:56.240 --> 00:04:59.580
- What parts of programming is relevant for education


00:04:59.580 --> 00:05:02.080
and younger kids learning, do you think?


00:05:02.080 --> 00:05:04.320
What stuff doesn't matter, what stuff matters to them?


00:05:04.320 --> 00:05:06.020
What kind of programs do you teach them


00:05:06.020 --> 00:05:08.440
or what kind of projects do you give them, I guess?


00:05:08.440 --> 00:05:10.940
- Right now, the physical computing is really big


00:05:10.940 --> 00:05:14.080
because it's that instantaneous gratification.


00:05:14.080 --> 00:05:17.800
A lot of kids don't wanna code 200, 300, 400 lines of code


00:05:17.800 --> 00:05:18.880
before something happens.


00:05:18.880 --> 00:05:21.200
So that old school thought of,


00:05:21.200 --> 00:05:23.020
oh, we're gonna build an app or a game


00:05:23.020 --> 00:05:25.500
is just out of the question, I think, right now,


00:05:25.500 --> 00:05:26.920
because the kids want something,


00:05:26.920 --> 00:05:29.200
they wanna code and they want it to happen.


00:05:29.200 --> 00:05:32.480
So we particularly work on physical computing


00:05:32.480 --> 00:05:35.560
for a little bit of instantaneous activities.


00:05:35.560 --> 00:05:37.160
- Yeah, so Adafruit stuff,


00:05:37.160 --> 00:05:38.920
things like these little Circuit Express,


00:05:38.920 --> 00:05:40.320
and so on, that kind of thing?


00:05:40.320 --> 00:05:44.340
- Correct, and the ESP, and the BBC micro bit,


00:05:44.340 --> 00:05:46.960
and Lego and stuff that we're gonna talk about later.


00:05:46.960 --> 00:05:48.600
- Yeah, very cool.


00:05:48.600 --> 00:05:49.720
What age group is that?


00:05:49.720 --> 00:05:52.400
- We currently are working with 10 year olds


00:05:52.400 --> 00:05:54.440
to 13, 14 year olds.


00:05:54.440 --> 00:05:55.900
And then as they go up higher,


00:05:55.900 --> 00:05:58.840
then they're getting more deep into Python and AI


00:05:58.840 --> 00:06:01.200
and TensorFlow and things like that.


00:06:01.200 --> 00:06:03.840
- That sounds like a way cooler education than I had.


00:06:03.840 --> 00:06:05.880
- It's totally cooler than what I had.


00:06:05.880 --> 00:06:08.880
I didn't grow up on this stuff.


00:06:08.880 --> 00:06:09.800
- Yeah, amazing.


00:06:09.800 --> 00:06:12.000
That dovetails really well into what you wanna talk


00:06:12.000 --> 00:06:14.200
about next, so tell us about Mew.


00:06:14.200 --> 00:06:16.480
- Oh yeah, so Code With Mew is a software


00:06:16.480 --> 00:06:19.160
that was created by Nicholas Tolerbe.


00:06:19.160 --> 00:06:23.000
And what's so great about Nick is that he's a former teacher,


00:06:23.000 --> 00:06:27.440
he's a music teacher, and he's developed this code editor


00:06:27.440 --> 00:06:30.680
that is specifically for beginner programmers.


00:06:30.680 --> 00:06:33.100
and it's a modal editor,


00:06:33.100 --> 00:06:36.180
whereas the kids can go and click on a mode


00:06:36.180 --> 00:06:38.740
and code in BBC micro bit,


00:06:38.740 --> 00:06:42.840
code in CircuitPython, code in ESP, PyGame.


00:06:42.840 --> 00:06:45.840
He just added Flask and the kids can click on it


00:06:45.840 --> 00:06:47.560
and it kind of packages everything


00:06:47.560 --> 00:06:51.880
so we don't have to worry about slower processing


00:06:51.880 --> 00:06:55.440
and all these nice little from import micro bit,


00:06:55.440 --> 00:06:57.440
everything it's right there in that package.


00:06:57.440 --> 00:07:01.080
And it just bundles things up with simplicity.


00:07:01.080 --> 00:07:04.400
A lot of, you know, when you work in another editor


00:07:04.400 --> 00:07:07.560
like PyCharm, there's so much going on for newcomers.


00:07:07.560 --> 00:07:08.420
You don't know where to go.


00:07:08.420 --> 00:07:09.920
With Moo, it just has these buttons


00:07:09.920 --> 00:07:12.520
and you can click check for updates,


00:07:12.520 --> 00:07:15.280
save, flash, put on a REPL.


00:07:15.280 --> 00:07:17.400
It's just a great little package.


00:07:17.400 --> 00:07:18.660
- Yeah, it's incredible.


00:07:18.660 --> 00:07:20.880
And it really reminds me or makes me think


00:07:20.880 --> 00:07:23.640
this is kind of what IDLE should be.


00:07:23.640 --> 00:07:26.040
The IDLE editor that's built in is like kind of meant there


00:07:26.040 --> 00:07:27.640
to be like a little helpful editor,


00:07:27.640 --> 00:07:30.680
but it seems like it just doesn't help enough.


00:07:30.680 --> 00:07:33.560
And this really brings together kind of a similar philosophy,


00:07:33.560 --> 00:07:37.040
but really making so many things easy to get started with.


00:07:37.040 --> 00:07:39.440
And like you said, these modes you can put it into.


00:07:39.440 --> 00:07:40.280
It's very great.


00:07:40.280 --> 00:07:41.200
- All the books that are out there


00:07:41.200 --> 00:07:43.200
always tell you to install IDLE


00:07:43.200 --> 00:07:45.560
or to go there and get Python,


00:07:45.560 --> 00:07:48.920
but it's really not something that a newcomer like myself,


00:07:48.920 --> 00:07:51.640
who just started coding, it's not intuitive.


00:07:51.640 --> 00:07:54.040
So with using Moo, you're able to just jump in


00:07:54.040 --> 00:07:55.800
and start coding right away.


00:07:55.800 --> 00:07:56.560
So it's great.


00:07:56.560 --> 00:07:59.120
And what I love about it is he's constantly updating.


00:07:59.120 --> 00:08:03.280
He just released a mode called Flask for the kids


00:08:03.280 --> 00:08:06.400
so that they can start making some short web apps.


00:08:06.400 --> 00:08:10.400
And he presented at EuroPython, and he


00:08:10.400 --> 00:08:13.680
released a whole bunch of new alpha features of Moo,


00:08:13.680 --> 00:08:15.280
which I think is great because he's not


00:08:15.280 --> 00:08:18.480
afraid of just throwing something out or pre-alpha.


00:08:18.480 --> 00:08:20.760
And he just lets everyone get on there and train.


00:08:20.760 --> 00:08:21.600
So it's pretty cool.


00:08:21.600 --> 00:08:23.480
It's so exciting that Flask is on there.


00:08:23.480 --> 00:08:26.200
- And the Flask, it can run on these little devices,


00:08:26.200 --> 00:08:27.040
is that right?


00:08:27.040 --> 00:08:28.440
- It just runs on the desktop.


00:08:28.440 --> 00:08:31.400
- Yeah, I think it's really great to make it just a mode


00:08:31.400 --> 00:08:34.640
and then the kids can just start writing Flask apps.


00:08:34.640 --> 00:08:35.600
Do they wanna have a website?


00:08:35.600 --> 00:08:36.440
Well, here you go.


00:08:36.440 --> 00:08:38.760
You flip the switch on and it's really great.


00:08:38.760 --> 00:08:41.720
- Yeah, and he just tweeted out literally like 30 minutes ago


00:08:41.720 --> 00:08:44.480
that he released a project he started two days ago


00:08:44.480 --> 00:08:48.280
called PiperCard, which is a HyperCard-inspired


00:08:48.280 --> 00:08:52.040
GUI framework based on what Adafruit had released.


00:08:52.040 --> 00:08:55.640
And when I mentioned to my co-worker, Sean,


00:08:55.640 --> 00:08:58.320
about HyperCard, he was like, "Oh, I hated HyperCard."


00:08:58.320 --> 00:09:00.920
I don't remember, I don't know if you guys used HyperCard


00:09:00.920 --> 00:09:01.920
(laughing)


00:09:01.920 --> 00:09:04.760
back in the day, if you guys were around.


00:09:04.760 --> 00:09:07.460
- I only know it in lore, I have never used it.


00:09:07.460 --> 00:09:12.320
- It's like in 1980s, so that might be dating some of us.


00:09:12.320 --> 00:09:15.080
But what it does is he just released,


00:09:15.080 --> 00:09:18.740
it's called HyperCard, and he's asking for feedback on it.


00:09:18.740 --> 00:09:22.340
and you can run it through Moo by just going into the toggle,


00:09:22.340 --> 00:09:24.260
the little cog on the bottom right,


00:09:24.260 --> 00:09:25.660
and install PiperCard,


00:09:25.660 --> 00:09:27.940
and then you can run it in the Python 3 mode.


00:09:27.940 --> 00:09:29.220
I can't wait to get my hands on it,


00:09:29.220 --> 00:09:31.900
and I just had a little bit of play just a few seconds ago.


00:09:31.900 --> 00:09:32.740
- That's exciting.


00:09:32.740 --> 00:09:34.340
Anything that contributes to the GUI story


00:09:34.340 --> 00:09:35.780
in Python makes me happy.


00:09:35.780 --> 00:09:38.180
- It helps with that instant gratification for the kids.


00:09:38.180 --> 00:09:39.420
You know, you can click on that button,


00:09:39.420 --> 00:09:42.140
and then so if they can type something and get in there,


00:09:42.140 --> 00:09:42.980
it's just great.


00:09:42.980 --> 00:09:43.940
- Yeah, absolutely.


00:09:43.940 --> 00:09:45.540
Brian, you're a fan of Moo, right?


00:09:45.540 --> 00:09:47.860
- Yeah, I'm really excited to try the Flask


00:09:47.860 --> 00:09:50.140
and the Piper card looks really fun.


00:09:50.140 --> 00:09:53.100
And also CircuitPython, I want to get my daughter


00:09:53.100 --> 00:09:55.180
started working on CircuitPython.


00:09:55.180 --> 00:10:00.180
And the serial output, how to configure that is not hard,


00:10:00.180 --> 00:10:03.060
but it's not something I can expect a nine year old to do.


00:10:03.060 --> 00:10:06.340
But within the Mew editor, it just does it.


00:10:06.340 --> 00:10:09.620
It hooks up to it automatically.


00:10:09.620 --> 00:10:11.860
- Yeah, you should check out the alpha release


00:10:11.860 --> 00:10:13.780
that they launched at EuroPython.


00:10:13.780 --> 00:10:18.080
and he has the ESP MicroPython on there as well,


00:10:18.080 --> 00:10:19.300
which is a board from Adafruit.


00:10:19.300 --> 00:10:21.100
- Yeah, super cool.


00:10:21.100 --> 00:10:23.360
I'm really happy that project exists.


00:10:23.360 --> 00:10:25.100
So let's keep with the theme a little bit


00:10:25.100 --> 00:10:26.820
in this Helping Beginners.


00:10:26.820 --> 00:10:30.140
There's a cool article that I want to reference


00:10:30.140 --> 00:10:32.340
and then just talk about some things here.


00:10:32.340 --> 00:10:33.300
So there's an article called


00:10:33.300 --> 00:10:35.660
Understanding the Python Traceback.


00:10:35.660 --> 00:10:38.860
And this is on RealPython, written by Chad Henson.


00:10:38.860 --> 00:10:41.880
And I'm pretty sure one of the first experiences


00:10:41.880 --> 00:10:46.560
any new programmer has is being confronted with this traceback,


00:10:46.560 --> 00:10:49.720
some kind of error, probably syntax error, but maybe not.


00:10:49.720 --> 00:10:51.600
It could be some other kind of runtime error.


00:10:51.600 --> 00:10:53.800
But you get this giant dump of information.


00:10:53.800 --> 00:10:56.600
And it's like, what is all of this?


00:10:56.600 --> 00:10:58.520
And I just want to highlight this article


00:10:58.520 --> 00:11:00.900
and talk a little bit about some of the things it covers,


00:11:00.900 --> 00:11:05.000
because there is a wealth of information in the traceback.


00:11:05.000 --> 00:11:07.200
And depending on the tools you're using,


00:11:07.200 --> 00:11:08.580
the tools maybe understand that.


00:11:08.580 --> 00:11:10.640
And they can allow you to navigate


00:11:10.640 --> 00:11:12.840
different parts of your application by turning, you know,


00:11:12.840 --> 00:11:15.340
various things into hyperlinks and stuff like that.


00:11:15.340 --> 00:11:17.800
So if you get a trace back, what do you learn right away?


00:11:17.800 --> 00:11:20.160
You learn the type of error, you know, attribute error,


00:11:20.160 --> 00:11:21.760
key error, something like that.


00:11:21.760 --> 00:11:25.320
A description of the error, hopefully, sometimes.


00:11:25.320 --> 00:11:28.040
The line of code that the error occurred on,


00:11:28.040 --> 00:11:31.440
usually like actually the syntax that that error was on,


00:11:31.440 --> 00:11:34.200
the call stack and for, you know, the file names,


00:11:34.200 --> 00:11:36.480
the line numbers, the module names.


00:11:36.480 --> 00:11:39.960
And even if that happened while handling some other error,


00:11:39.960 --> 00:11:40.460
Right?


00:11:40.460 --> 00:11:42.620
Some exception caused another exception to happen,


00:11:42.620 --> 00:11:43.620
or things like that.


00:11:43.620 --> 00:11:44.880
So really, really nice.


00:11:44.880 --> 00:11:49.880
I think there's even some plug-in on PyPI


00:11:49.880 --> 00:11:51.300
that colorizes this.


00:11:51.300 --> 00:11:52.340
I can't entirely remember.


00:11:52.340 --> 00:11:53.980
It might be a pytest extension, Brian.


00:11:53.980 --> 00:11:55.100
Who knows?


00:11:55.100 --> 00:11:56.960
But this article is really nice.


00:11:56.960 --> 00:11:58.780
People should check it out if they just--


00:11:58.780 --> 00:12:00.180
they've always-- I'm sure they've--


00:12:00.180 --> 00:12:02.540
like I said, one of the very first things you learn about


00:12:02.540 --> 00:12:03.020
is errors.


00:12:03.020 --> 00:12:05.220
But it's nice to kind of really highlight--


00:12:05.220 --> 00:12:07.620
actually, look at all these things that are there.


00:12:07.620 --> 00:12:08.940
So people should check that out.


00:12:08.940 --> 00:12:10.980
One of the things that's unusual,


00:12:10.980 --> 00:12:13.180
so if you're experienced at programming,


00:12:13.180 --> 00:12:17.700
but not Python, about tracebacks is they read in reverse.


00:12:17.700 --> 00:12:20.940
Most error messages like this, in other languages,


00:12:20.940 --> 00:12:22.700
they start with the error that actually happened,


00:12:22.700 --> 00:12:24.740
and then where, and then what caused that, and so on.


00:12:24.740 --> 00:12:26.140
But this is the reverse.


00:12:26.140 --> 00:12:27.480
You read it from bottom to top,


00:12:27.480 --> 00:12:28.420
instead of the other way around,


00:12:28.420 --> 00:12:30.180
which I think is a little bit weird.


00:12:30.180 --> 00:12:32.460
It also has some interesting conversation


00:12:32.460 --> 00:12:35.380
and highlights of different common error messages.


00:12:35.380 --> 00:12:37.180
If you see this type of error,


00:12:37.180 --> 00:12:39.700
that probably was caused by this.


00:12:39.700 --> 00:12:41.460
You see this other type of error is caused by that.


00:12:41.460 --> 00:12:43.780
And I don't know if it was even covered in the article,


00:12:43.780 --> 00:12:45.900
but I would throw out the most common error


00:12:45.900 --> 00:12:47.900
you're gonna run into is attribute error,


00:12:47.900 --> 00:12:50.420
none type does not have whatever you're trying to do


00:12:50.420 --> 00:12:51.260
to the none type, right?


00:12:51.260 --> 00:12:52.620
It's just some kind of crash there.


00:12:52.620 --> 00:12:56.140
So it's useful if you have some more junior developers


00:12:56.140 --> 00:12:57.040
or people who are learning,


00:12:57.040 --> 00:12:59.060
I think handing this article out to them would be great.


00:12:59.060 --> 00:13:00.180
- I love this article.


00:13:00.180 --> 00:13:03.460
I picked it up, I looked at it after you posted it,


00:13:03.460 --> 00:13:06.740
and then the idea of the name error being,


00:13:06.740 --> 00:13:08.380
or the error being at the bottom,


00:13:08.380 --> 00:13:10.540
that's something that I never knew.


00:13:10.540 --> 00:13:12.460
I just was like, "Skim down until you find something


00:13:12.460 --> 00:13:14.100
"that you can figure out."


00:13:14.100 --> 00:13:14.940
It's one of those things that I tell my kids.


00:13:14.940 --> 00:13:17.180
- This looks like it applies, yeah, exactly.


00:13:17.180 --> 00:13:19.580
- They're like, "Line two, there's nothing on line two."


00:13:19.580 --> 00:13:20.580
And I'm like, "Just keep reading.


00:13:20.580 --> 00:13:22.380
"Somewhere in there, it tells you the error."


00:13:22.380 --> 00:13:24.300
So I love that I didn't know that it was


00:13:24.300 --> 00:13:26.060
only the last thing, you know, it was the first.


00:13:26.060 --> 00:13:27.940
So, good, thank you for that.


00:13:27.940 --> 00:13:28.780
- Yeah, for sure.


00:13:28.780 --> 00:13:32.260
- But I'm constantly using my error readings lately.


00:13:32.260 --> 00:13:36.100
- When you're teaching people, and especially younger kids,


00:13:36.100 --> 00:13:37.780
This is something that's gotta be a little frustrating,


00:13:37.780 --> 00:13:40.540
but also, you know, something they've gotta get used to


00:13:40.540 --> 00:13:43.180
right away, and it's not really beginner-friendly,


00:13:43.180 --> 00:13:44.440
I wouldn't say.


00:13:44.440 --> 00:13:46.900
One of the things that's really nice that Al Swigert does


00:13:46.900 --> 00:13:48.800
in his book, Automate the Boring Stuff,


00:13:48.800 --> 00:13:51.540
is like right near the beginning he says,


00:13:51.540 --> 00:13:54.560
"Let me show you how to Google some errors


00:13:54.560 --> 00:13:56.140
"and find ways to fix them."


00:13:56.140 --> 00:13:58.220
And he literally spends several pages talking about,


00:13:58.220 --> 00:14:00.580
here's this problem, type this into Google,


00:14:00.580 --> 00:14:02.580
you get this answer, here's what you mean,


00:14:02.580 --> 00:14:03.420
here's how you interpret it.


00:14:03.420 --> 00:14:07.380
It kind of trains people to understand


00:14:07.380 --> 00:14:08.740
how they can solve their own problems


00:14:08.740 --> 00:14:09.740
when they hit this kind of stuff,


00:14:09.740 --> 00:14:11.140
which I think was really cool too.


00:14:11.140 --> 00:14:13.100
- That's one of our features as well,


00:14:13.100 --> 00:14:15.900
is going straight to Google and putting that error in.


00:14:15.900 --> 00:14:18.180
- One of the things I want to pop in is


00:14:18.180 --> 00:14:21.020
when you're just playing with some code,


00:14:21.020 --> 00:14:23.900
you might have to deal with one traceback.


00:14:23.900 --> 00:14:25.920
When you're dealing with test suites,


00:14:25.920 --> 00:14:27.740
there might be lots of failures


00:14:27.740 --> 00:14:30.060
and lots of tracebacks all together.


00:14:30.060 --> 00:14:33.060
And I've found that people get a little overwhelmed


00:14:33.060 --> 00:14:36.380
with like these just lots of huge tracebacks.


00:14:36.380 --> 00:14:38.980
So pytest has a feature that you can limit


00:14:38.980 --> 00:14:40.220
the size of the traceback.


00:14:40.220 --> 00:14:44.420
And so I highly recommend people use short tracebacks.


00:14:44.420 --> 00:14:48.220
It only gives you like 10 lines of code around the failure


00:14:48.220 --> 00:14:50.020
instead of having a huge traceback.


00:14:50.020 --> 00:14:51.740
And it makes it a little less intimidating.


00:14:51.740 --> 00:14:53.340
- Yeah, you don't need to see the whole call stack


00:14:53.340 --> 00:14:56.100
all the way into the pytest library, right?


00:14:56.100 --> 00:14:56.920
- Yeah.


00:14:56.920 --> 00:14:58.900
- 'Cause otherwise, yeah, you'll be chasing that down.


00:14:58.900 --> 00:15:00.160
So one more thing to throw in.


00:15:00.160 --> 00:15:02.360
I don't know that this is covered in the article,


00:15:02.360 --> 00:15:04.520
But it's definitely worth considering.


00:15:04.520 --> 00:15:09.120
To make tracebacks more helpful, to make exception handling better and


00:15:09.120 --> 00:15:13.880
more specific, you should definitely consider making your own exception type.


00:15:13.880 --> 00:15:17.560
Right, if you're writing a library or you're writing an application,


00:15:17.560 --> 00:15:20.960
it's super easy to make your own classifications for errors.


00:15:20.960 --> 00:15:24.840
Like if it has some kind of lookup, you can have it derived from key error, but


00:15:24.840 --> 00:15:28.280
mean something more specific.


00:15:28.280 --> 00:15:31.120
And it's literally like three, two lines, three lines,


00:15:31.120 --> 00:15:35.440
probably two lines to write that, you know, class exception name derives from


00:15:35.440 --> 00:15:39.840
the exception you want, colon pass. You're good. You know what I mean? Like, and it


00:15:39.840 --> 00:15:43.320
really helps communicate errors back and lets you be more specific in your


00:15:43.320 --> 00:15:46.960
try-except block. So also worth considering there. All right, now before


00:15:46.960 --> 00:15:50.720
we move on to the next one, let me just tell you about DigitalOcean. So all of our


00:15:50.720 --> 00:15:57.000
infrastructure here runs on DigitalOcean. When you get your audio on your player,


00:15:57.000 --> 00:16:01.760
that's flown, distributed through the DigitalOcean infrastructure, our website,


00:16:01.760 --> 00:16:05.640
our database server, everything runs there. It's been wonderful, it's super affordable,


00:16:05.640 --> 00:16:09.800
it's the right level of detail, you have enough features to do what you need,


00:16:09.800 --> 00:16:13.200
but it's not overwhelming like you're trying to build the world's most complicated app.


00:16:13.200 --> 00:16:16.960
So I definitely recommend checking out DigitalOcean. Visit them at


00:16:16.960 --> 00:16:21.960
pythonbytes.fm/digitalocean, sign up, get $50 credit to play around for six months,


00:16:21.960 --> 00:16:23.960
And yeah, give them a try.


00:16:23.960 --> 00:16:24.960
It's a really good place to be.


00:16:24.960 --> 00:16:29.960
Now, Brian, you did mention plugins and other things or settings at pytest.


00:16:29.960 --> 00:16:31.960
So let's keep going with that.


00:16:31.960 --> 00:16:37.960
Yeah, so we actually--this is a listener contribution from Ray Coate via email.


00:16:37.960 --> 00:16:43.960
And he recommended us cover extension--like mypy extensions to other tools.


00:16:43.960 --> 00:16:49.960
So there's a Flakate-mypy and a pytest-mypy.


00:16:49.960 --> 00:16:53.620
So mypy is the, I'm sure we've covered that,


00:16:53.620 --> 00:16:56.340
talking about testing type hints in your code


00:16:56.340 --> 00:16:59.340
to verify that they're right or something.


00:16:59.340 --> 00:17:01.200
- Right, so let me give a quick overview


00:17:01.200 --> 00:17:02.040
for people who don't know.


00:17:02.040 --> 00:17:07.040
I mean, you sort of did, but Python has optional type hints.


00:17:07.040 --> 00:17:11.100
I could say, here's a function, it has a thing, colon int.


00:17:11.100 --> 00:17:13.760
Now, the runtime of Python does nothing with that.


00:17:13.760 --> 00:17:15.720
There's no validation, but if you run mypy,


00:17:15.720 --> 00:17:18.720
it will do static type checking to make sure


00:17:18.720 --> 00:17:21.960
that everywhere you're calling that function, you actually are passing integers and all


00:17:21.960 --> 00:17:22.960
that.


00:17:22.960 --> 00:17:25.840
So all the stuff you're talking about is built on top of that.


00:17:25.840 --> 00:17:26.840
Carry on.


00:17:26.840 --> 00:17:27.840
Yeah, there's a couple ideas.


00:17:27.840 --> 00:17:30.800
Flake 8 is a static type checker also.


00:17:30.800 --> 00:17:35.920
Flake 8 mypy just is an extension to that so that you're running mypy while you're running


00:17:35.920 --> 00:17:37.000
Flake 8.


00:17:37.000 --> 00:17:42.520
The interesting thing that Ray brought up is that he said that he tried to do run mypy


00:17:42.520 --> 00:17:47.040
by itself and always had trouble getting it configured right.


00:17:47.040 --> 00:17:50.480
with the plugin Flake 8 mypy, it just worked easier.


00:17:50.480 --> 00:17:51.840
I don't know, it was easier to use.


00:17:51.840 --> 00:17:53.320
So I'm going to try that also.


00:17:53.320 --> 00:17:56.040
I've tried mypy with limited success,


00:17:56.040 --> 00:17:57.280
so I'll try this as well.


00:17:57.280 --> 00:18:01.160
And this extension to Flake 8 is also,


00:18:01.160 --> 00:18:03.140
I guess it's Lucas Langoday for me,


00:18:03.140 --> 00:18:05.720
but this is a project maintained by Lucas.


00:18:05.720 --> 00:18:09.020
And then another project, these are static analysis,


00:18:09.020 --> 00:18:10.880
but if you want to check to see


00:18:10.880 --> 00:18:13.240
if you're really using in runtime,


00:18:13.240 --> 00:18:15.800
whether the types are right or not.


00:18:15.800 --> 00:18:18.200
Actually, I'm not sure if I'm telling this correctly,


00:18:18.200 --> 00:18:21.720
but as part of the pytest, no, I think I lied.


00:18:21.720 --> 00:18:24.820
I don't think it checks runtime types.


00:18:24.820 --> 00:18:27.280
It is still just a static type checker,


00:18:27.280 --> 00:18:30.040
but it's triggered by your pytest suite.


00:18:30.040 --> 00:18:32.880
So like pytest can check doc tests,


00:18:32.880 --> 00:18:35.160
it can check other things as well,


00:18:35.160 --> 00:18:37.240
and this is just an extension that runs mypy


00:18:37.240 --> 00:18:39.520
while you're running your tests.


00:18:39.520 --> 00:18:40.760
- Yeah, that's pretty cool, I like it.


00:18:40.760 --> 00:18:42.960
- And it's maintained by our friend Dan Bader


00:18:42.960 --> 00:18:43.800
and David Tucker.


00:18:43.800 --> 00:18:44.640
- That's a good one.


00:18:44.640 --> 00:18:50.960
do you do any testing with the kids or do you do any of these type hints where you say,


00:18:50.960 --> 00:18:55.480
"Hey kids, this is an integer," or is the beauty of Python that you don't have to even


00:18:55.480 --> 00:18:56.720
talk about that kind of stuff?


00:18:56.720 --> 00:18:58.780
- No, we're getting into it a little bit.


00:18:58.780 --> 00:19:04.800
We do introduce a little bit of the idea of test in the older grade levels.


00:19:04.800 --> 00:19:08.440
Sean, my colleague, he uses it quite often just to set parameters.


00:19:08.440 --> 00:19:10.600
We use the lingo.


00:19:10.600 --> 00:19:15.200
He's a big fan of TEST and he's been trying to show me all of that.


00:19:15.200 --> 00:19:19.300
So I plan to learn more this year, step by step.


00:19:19.300 --> 00:19:25.640
We have the TEST book signed by somebody famous or something.


00:19:25.640 --> 00:19:26.640
Amazing.


00:19:26.640 --> 00:19:28.840
Got the legit version.


00:19:28.840 --> 00:19:30.440
I'm blushing.


00:19:30.440 --> 00:19:31.440
I know.


00:19:31.440 --> 00:19:32.440
All right.


00:19:32.440 --> 00:19:37.600
Speaking of working with kids, your next one has to do with LEGO Education.


00:19:37.600 --> 00:19:38.600
Tell us about this.


00:19:38.600 --> 00:19:40.960
I don't know if you're familiar with Lego Education.


00:19:40.960 --> 00:19:43.280
We all know the Lego bricks that you buy at the store,


00:19:43.280 --> 00:19:46.800
but Lego Education launched a series of robots


00:19:46.800 --> 00:19:48.700
over the years.


00:19:48.700 --> 00:19:52.640
The last robot that they launched was in 2013


00:19:52.640 --> 00:19:54.700
called the EV3 Mindstorm.


00:19:54.700 --> 00:19:57.840
And there hasn't been a new robot since.


00:19:57.840 --> 00:20:01.160
The EV3 Mindstorm, you can still code with Python.


00:20:01.160 --> 00:20:04.440
There was a gentleman named Nigel Ward who did this.


00:20:04.440 --> 00:20:06.640
You'll have to dig into it yourself,


00:20:06.640 --> 00:20:11.640
this kind of convoluted way of getting Python to run on the EV3.


00:20:11.640 --> 00:20:15.640
And it was a Debian Linux-based operating system.


00:20:15.640 --> 00:20:16.640
Oh my goodness.


00:20:16.640 --> 00:20:17.640
EV3 dev.


00:20:17.640 --> 00:20:20.640
So you're going to have to explain that to me.


00:20:20.640 --> 00:20:26.640
But it was a little bit difficult for a person not knowledgeable in Python to run it on Mindstorms.


00:20:26.640 --> 00:20:29.640
We played with it a little bit, but it's kind of convoluted.


00:20:29.640 --> 00:20:35.640
Well, since earlier this year, they're launching a new robot called Spike Prime.


00:20:35.640 --> 00:20:41.180
and spike prime is said that it's going to be running with micro python


00:20:41.180 --> 00:20:46.940
and this is really huge that lego education is launching this because there's over three hundred thousand kids


00:20:46.940 --> 00:20:51.600
who compete with lego robotics and now instead of just using the lego


00:20:51.600 --> 00:20:53.480
programming operating system


00:20:53.480 --> 00:20:56.320
they're now gonna launch it with any programming


00:20:56.320 --> 00:20:59.780
system that they want to use and with support of micro python


00:20:59.780 --> 00:21:01.180
and in


00:21:01.180 --> 00:21:04.840
earlier this year they launched a whole guide about how to


00:21:04.840 --> 00:21:05.680
run,


00:21:05.680 --> 00:21:12.000
MicroPython on top of the EV3 dev with Pybricks and there's a whole bunch of people with their hands in there.


00:21:12.000 --> 00:21:17.000
And it's just a really interesting thing, they even have its own Visual Studio Code extension where you can


00:21:17.000 --> 00:21:20.040
click on it, install it with Visual Studio Code.


00:21:20.040 --> 00:21:22.560
There's no need for use in terminal,


00:21:22.560 --> 00:21:29.280
has all these instructions, it kind of looks like the MicroPython API when you open up their guidebook.


00:21:29.280 --> 00:21:32.240
And it just seems a lot easier.


00:21:32.240 --> 00:21:39.520
And there were a couple people with their hands in this development, and I'm not sure who started what,


00:21:39.520 --> 00:21:43.600
and if it's all based on the original guy, but Sebastian Thomas,


00:21:43.600 --> 00:21:47.360
he's one of the main contributors, it looks like, for Pybricks.


00:21:47.360 --> 00:21:54.160
And then David Lechner, Lorenz Voelk, and Antoine Van Hook are the Lego MicroPython release guys,


00:21:54.160 --> 00:21:59.360
and they have a lot of really cool programs that they've converted into MicroPython.


00:21:59.360 --> 00:22:00.320
So we're excited.


00:22:00.320 --> 00:22:05.840
This is such exciting news. This is like really a mainstream thing that will probably bring


00:22:05.840 --> 00:22:10.800
awareness of MicroPython and exposure of Python to a lot of kids and teachers.


00:22:10.800 --> 00:22:16.480
Absolutely. And what the cool thing is, is like EV3 Mindstorm robots, they're a little bit,


00:22:16.480 --> 00:22:19.840
you know, like all other robots, they don't really do what you program them to do.


00:22:19.840 --> 00:22:26.640
But with using MicroPython, you're pretty much getting down into correct angle and speed. And


00:22:26.640 --> 00:22:29.820
and you can use the gyroscope to regulate where it is


00:22:29.820 --> 00:22:33.460
on what GPS kind of coordination on a mat.


00:22:33.460 --> 00:22:36.280
So you're gonna get a little bit more controlled environment.


00:22:36.280 --> 00:22:37.720
So we're excited.


00:22:37.720 --> 00:22:39.480
- I'm still buying that when it comes out.


00:22:39.480 --> 00:22:40.920
(laughing)


00:22:40.920 --> 00:22:42.480
It just sounds so cool.


00:22:42.480 --> 00:22:43.360
- It's really cool.


00:22:43.360 --> 00:22:45.640
Wait till Spike Prime gets released later this year.


00:22:45.640 --> 00:22:47.460
It looks, it's got really a lot of colors.


00:22:47.460 --> 00:22:48.880
So I think it sounds bad,


00:22:48.880 --> 00:22:52.240
but I think it's going to get more girls involved


00:22:52.240 --> 00:22:53.300
with robotics.


00:22:53.300 --> 00:22:56.360
It's not the basic gray and white of the EV3.


00:22:56.360 --> 00:22:58.240
There's a lot of colors on Spike Prime,


00:22:58.240 --> 00:22:59.160
so I'm excited about it.


00:22:59.160 --> 00:23:00.560
- Yeah, it sounds like it's gonna look fun.


00:23:00.560 --> 00:23:01.400
That's cool.


00:23:01.400 --> 00:23:02.240
Yeah, very exciting.


00:23:02.240 --> 00:23:03.160
Thanks for covering that one.


00:23:03.160 --> 00:23:04.320
I think that's great.


00:23:04.320 --> 00:23:08.040
So the last one, I wanna start with a popular saying.


00:23:08.040 --> 00:23:11.800
So 20 years ago was the best time to plant a tree,


00:23:11.800 --> 00:23:15.120
but the second best time might be like right now.


00:23:15.120 --> 00:23:17.880
And that's kind of the story for Mozilla.


00:23:17.880 --> 00:23:20.480
So Mozilla has tons of Python,


00:23:20.480 --> 00:23:22.360
and they wrote this sort of,


00:23:22.360 --> 00:23:25.080
let's look at what we're doing with Python,


00:23:25.080 --> 00:23:32.000
large at Mozilla and what's the story around Python 3 and converting over to it.


00:23:32.000 --> 00:23:38.240
So they say, "Hey, look, we actually have 3,500 Python files at Mozilla Central, which


00:23:38.240 --> 00:23:41.640
is like 230,000 lines of code, which is a lot of Python.


00:23:41.640 --> 00:23:50.520
And they also have 462 repositories over at the Mozilla or GitHub repo organization."


00:23:50.520 --> 00:23:53.420
So they've got a lot of stuff going on with Python.


00:23:53.420 --> 00:23:57.540
And they looked and they said, you know, most of this is Python 2 only.


00:23:57.540 --> 00:23:58.700
Boo hoo.


00:23:58.700 --> 00:24:03.980
So we all know that the end of life of Python 2 is quickly approaching.


00:24:03.980 --> 00:24:06.620
Brian, you were talking about Python 2020.


00:24:06.620 --> 00:24:09.660
Like that sounds still to me way in the future.


00:24:09.660 --> 00:24:13.660
I don't know what 2020 is, but that is maybe while flying cars by then.


00:24:13.660 --> 00:24:14.660
I don't know.


00:24:14.660 --> 00:24:15.660
But that's way out there, isn't it?


00:24:15.660 --> 00:24:16.660
This next year.


00:24:16.660 --> 00:24:17.660
I know.


00:24:17.660 --> 00:24:18.660
It's like five months.


00:24:18.660 --> 00:24:19.660
It's crazy.


00:24:19.660 --> 00:24:22.340
How is that possible?


00:24:22.340 --> 00:24:25.160
So that is when Python 2 is going to be end of life.


00:24:25.160 --> 00:24:29.420
So this is an interesting article because I know a lot of organizations are thinking


00:24:29.420 --> 00:24:34.920
about their status with Python 2 and Python 3, whether it's worth upgrading things, are


00:24:34.920 --> 00:24:41.360
they behind and looking to other leading organizations on how they're doing their migration.


00:24:41.360 --> 00:24:46.020
So this is kind of a walkthrough of where is Mozilla, where are they going, what's their


00:24:46.020 --> 00:24:47.900
assessment here.


00:24:47.900 --> 00:24:51.980
And the idea was, first of all, do they actually need to migrate off of Python 2?


00:24:51.980 --> 00:24:54.320
Technically, no, you could still download 2.7,


00:24:54.320 --> 00:24:56.840
you could still run it, but here's


00:24:56.840 --> 00:24:59.000
the things we're concerned about at Mozilla.


00:24:59.000 --> 00:25:01.940
Python 2 will no longer receive security fixes.


00:25:01.940 --> 00:25:03.400
That could be a problem.


00:25:03.400 --> 00:25:06.740
More scary, I guess, is all the exciting growth


00:25:06.740 --> 00:25:09.240
of all the other packages they depend upon


00:25:09.240 --> 00:25:11.400
may no longer support Python 2.


00:25:11.400 --> 00:25:13.200
And so they will be stuck on old versions


00:25:13.200 --> 00:25:15.880
of all the other libraries that are great.


00:25:15.880 --> 00:25:18.520
So in a sense, the libraries they can use


00:25:18.520 --> 00:25:21.260
will be calcified, not just the runtime.


00:25:21.260 --> 00:25:24.020
It also means delaying more code they got to migrate


00:25:24.020 --> 00:25:25.220
and probably writing new code


00:25:25.220 --> 00:25:26.940
that is not as easily migrated.


00:25:26.940 --> 00:25:28.740
And it also has an opportunity cost


00:25:28.740 --> 00:25:30.060
that they can't use the cool features


00:25:30.060 --> 00:25:32.260
like async and wait and f-strings


00:25:32.260 --> 00:25:33.700
and all those good things.


00:25:33.700 --> 00:25:36.380
So probably they should migrate to Python 3


00:25:36.380 --> 00:25:37.460
is what they decided.


00:25:37.460 --> 00:25:41.140
And their first step was to set up some linters.


00:25:41.140 --> 00:25:42.740
They said one of the linters make sure


00:25:42.740 --> 00:25:45.380
that Python code at least can be imported


00:25:45.380 --> 00:25:47.420
into Python 3 without failing.


00:25:47.420 --> 00:25:49.020
Like that's a pretty low bar.


00:25:49.020 --> 00:25:52.660
can I say import this and run that statement


00:25:52.660 --> 00:25:54.220
under Python 3?


00:25:54.220 --> 00:25:55.100
Yes or no, right?


00:25:55.100 --> 00:25:57.620
But it's like, that's the first step, you know?


00:25:57.620 --> 00:25:59.120
And then the other linter they set up


00:25:59.120 --> 00:26:01.260
was to make sure that all the Python 2 files


00:26:01.260 --> 00:26:04.780
had the dunder future import statements.


00:26:04.780 --> 00:26:07.220
So things like print statements and whatnot


00:26:07.220 --> 00:26:09.340
were working out, right?


00:26:09.340 --> 00:26:11.620
So you write the right print statements at least.


00:26:11.620 --> 00:26:14.660
And then there's, we've talked a lot about pipenv,


00:26:14.660 --> 00:26:17.860
poetry, managing dependencies, all that kind of stuff.


00:26:17.860 --> 00:26:22.200
And so there's an interesting conversation there about their evaluation of PipMF and


00:26:22.200 --> 00:26:25.280
Poetry and whether or not that made sense for them.


00:26:25.280 --> 00:26:28.960
And PipMF and Poetry are pretty good for, like, I would like to create a project and


00:26:28.960 --> 00:26:33.580
here are some dependencies I want to install, you know, PipMF install whatever, right, request


00:26:33.580 --> 00:26:35.180
or something like that.


00:26:35.180 --> 00:26:42.500
But it turns out the way Mozilla works with one huge mega repository, like monolith repository,


00:26:42.500 --> 00:26:44.460
those tools don't really work for that.


00:26:44.460 --> 00:26:48.540
So they actually created this thing called Jetty, which is based on poetry


00:26:48.540 --> 00:26:52.300
that is more appropriate for those types of systems and dependencies and stuff.


00:26:52.300 --> 00:26:55.940
So it's a pretty interesting look into some simple steps


00:26:55.940 --> 00:26:57.900
that Mozilla's taking to move to Python 3.


00:26:57.900 --> 00:27:00.940
- Yeah, Jetty seems interesting.


00:27:00.940 --> 00:27:04.140
Take a project based on another project that removes features.


00:27:04.140 --> 00:27:09.020
- These features-- what did you do?


00:27:09.020 --> 00:27:12.700
Well, I removed these three features, so now we won't use them.


00:27:12.700 --> 00:27:14.800
[LAUGHTER]


00:27:14.800 --> 00:27:17.740
Yeah, the idea of some of the stuff about the way poetry worked,


00:27:17.740 --> 00:27:21.980
just it assumed that the top level of the project is kind of all of it.


00:27:21.980 --> 00:27:24.460
And at Mozilla, that's like all of their code in entirety,


00:27:24.460 --> 00:27:25.900
and they want to work in sub-bits.


00:27:25.900 --> 00:27:28.780
Or something to that effect is what I got out of it.


00:27:28.780 --> 00:27:29.540
All right, well--


00:27:29.540 --> 00:27:30.420
No, that was cool.


00:27:30.420 --> 00:27:30.920
Yeah, so--


00:27:30.920 --> 00:27:31.660
I like it.


00:27:31.660 --> 00:27:36.180
Yeah, so if you're thinking of moving your organization to Python 3,


00:27:36.180 --> 00:27:39.980
which should be anybody who is not already on Python 3, I would say,


00:27:39.980 --> 00:27:42.280
or that's your role or something like that,


00:27:42.280 --> 00:27:44.480
Check out this article, I think it's got some good tips.


00:27:44.480 --> 00:27:45.960
- One question for you, Michael.


00:27:45.960 --> 00:27:48.160
Wouldn't the second best time to plant a tree


00:27:48.160 --> 00:27:49.420
be 19 years ago?


00:27:49.420 --> 00:27:54.280
- Yeah, but it makes explaining the thing a long,


00:27:54.280 --> 00:27:57.480
it takes like 21 statements instead of two, so.


00:27:57.480 --> 00:27:59.680
- Okay, okay, all right.


00:27:59.680 --> 00:28:01.560
- All right, so that's our main topic.


00:28:01.560 --> 00:28:02.680
So Brian, you got anything extra


00:28:02.680 --> 00:28:03.800
you just wanna throw out there real quick?


00:28:03.800 --> 00:28:07.080
- Yeah, the beta three for Python 3.8 is out


00:28:07.080 --> 00:28:11.200
and the core Python team is encouraging everybody,


00:28:11.200 --> 00:28:13.620
especially people that maintain third-party package


00:28:13.620 --> 00:28:16.740
at third-party Python projects,


00:28:16.740 --> 00:28:21.140
to heavily test 3.8 because it can be fixed now.


00:28:21.140 --> 00:28:23.860
But if you wait until 3.8 is actually out,


00:28:23.860 --> 00:28:24.760
it's harder to fix.


00:28:24.760 --> 00:28:26.860
So please test.


00:28:26.860 --> 00:28:28.540
- It seems like we're getting a little bit closer


00:28:28.540 --> 00:28:29.380
to Python 4.


00:28:29.380 --> 00:28:30.980
Is that in the future?


00:28:30.980 --> 00:28:35.260
- It's such an interesting idea.


00:28:35.260 --> 00:28:37.060
- 2.7, 3.8.


00:28:37.060 --> 00:28:38.820
- Well, I asked, speaking of Lucas Lang,


00:28:38.820 --> 00:28:40.900
I asked him about it back at PyCon


00:28:40.900 --> 00:28:44.180
when I did an interview with him and Anthony Shaw


00:28:44.180 --> 00:28:45.700
around the features of Python 3.8.


00:28:45.700 --> 00:28:49.060
And I think there's hesitation to have


00:28:49.060 --> 00:28:53.140
a double-digit second number there, like 311


00:28:53.140 --> 00:28:54.180
or something like this.


00:28:54.180 --> 00:28:58.460
But there's also so much fatigue of this Python 2 to 3


00:28:58.460 --> 00:29:00.780
conversation that I'm not sure that we're going


00:29:00.780 --> 00:29:02.240
to be going to 4 anytime soon.


00:29:02.240 --> 00:29:03.780
On that note, though, I think it might


00:29:03.780 --> 00:29:08.700
be interesting to have a 4.0 be a non-event,


00:29:08.700 --> 00:29:10.460
to have it just be another version.


00:29:10.460 --> 00:29:13.020
- Yeah, that would be nice, wouldn't it?


00:29:13.020 --> 00:29:14.420
- Especially since everyone's getting used


00:29:14.420 --> 00:29:17.220
to the conversion, so you might as well just throw it in


00:29:17.220 --> 00:29:18.780
and have another one there.


00:29:18.780 --> 00:29:20.940
- That's right, we've been converting for like 10 years,


00:29:20.940 --> 00:29:22.460
let's just keep going.


00:29:22.460 --> 00:29:25.060
All right, so I've got a quick one I wanna throw out there.


00:29:25.060 --> 00:29:29.580
PipX, I love PipX, it lets you install things


00:29:29.580 --> 00:29:32.380
that are Python but are meant to be little utilities


00:29:32.380 --> 00:29:34.180
that you just run on your terminal.


00:29:34.180 --> 00:29:35.760
Install and manage those separately,


00:29:35.760 --> 00:29:38.160
kind of like Homebrew, but for Python stuff.


00:29:38.160 --> 00:29:40.800
It now has shell completions, which is pretty cool.


00:29:40.800 --> 00:29:43.120
So you can install this real easy.


00:29:43.120 --> 00:29:46.280
You can say pipx space u tab, and it'll show you


00:29:46.280 --> 00:29:48.600
all the things that you can send to PipX


00:29:48.600 --> 00:29:50.720
that starts with u, for like upgrade, upgrade all,


00:29:50.720 --> 00:29:51.840
things like that.


00:29:51.840 --> 00:29:53.520
Not a huge thing, but I'm a big fan of PipX,


00:29:53.520 --> 00:29:54.960
so it's a little bit better still.


00:29:54.960 --> 00:29:55.800
- That's good.


00:29:55.800 --> 00:29:56.620
- Yeah, Kelly, how about you?


00:29:56.620 --> 00:29:58.600
- So, you gotta put a plug in for our podcast


00:29:58.600 --> 00:30:00.880
at teachingpython.sm.


00:30:00.880 --> 00:30:03.600
Sean Tyber and I, we started this podcast


00:30:03.600 --> 00:30:08.140
because if you haven't heard, I'm a new coder.


00:30:08.140 --> 00:30:09.420
I can't say I'm a newbie anymore.


00:30:09.420 --> 00:30:10.780
I guess I've been around for a year now


00:30:10.780 --> 00:30:13.540
trying to learn how to code and Sean's a new teacher.


00:30:13.540 --> 00:30:15.780
And we started this podcast and it's just about


00:30:15.780 --> 00:30:18.500
the frustration of working with a coder


00:30:18.500 --> 00:30:20.740
who's becoming a teacher and a teacher


00:30:20.740 --> 00:30:22.340
who's trying to become a coder.


00:30:22.340 --> 00:30:25.140
And it's just about our pitfalls and what we've learned


00:30:25.140 --> 00:30:28.240
and it's been a great push for me learning Python.


00:30:28.240 --> 00:30:30.860
So for all those people that listen to you guys,


00:30:30.860 --> 00:30:35.700
Michael and Brian, I think it's a good in-between.


00:30:35.700 --> 00:30:37.740
We come home and after we listen to you,


00:30:37.740 --> 00:30:40.500
we start Googling, what is he talking about?


00:30:40.500 --> 00:30:41.460
It's great.


00:30:41.460 --> 00:30:42.700
- Yeah, that's a great podcast.


00:30:42.700 --> 00:30:43.780
I'm happy you all are doing it.


00:30:43.780 --> 00:30:45.460
I think you're doing good work there.


00:30:45.460 --> 00:30:48.500
- I recommend the podcast to anybody that is,


00:30:48.500 --> 00:30:51.860
has to teach anybody anything Python related,


00:30:51.860 --> 00:30:55.360
not just teachers or paid instructors.


00:30:55.360 --> 00:30:59.020
If you're acting as a mentor within your organization,


00:30:59.020 --> 00:31:01.520
I think that you get a lot out of this podcast also.


00:31:01.520 --> 00:31:04.500
- Absolutely, we really want to hit everyone in the college,


00:31:04.500 --> 00:31:07.260
even colleagues who want to learn Python,


00:31:07.260 --> 00:31:08.500
and just about good teaching,


00:31:08.500 --> 00:31:10.560
whether it isn't, you know, it's not Python,


00:31:10.560 --> 00:31:12.180
God forbid, it's something else.


00:31:12.180 --> 00:31:14.340
It's just that idea of all the other skills


00:31:14.340 --> 00:31:16.260
that come along with being a coder.


00:31:16.260 --> 00:31:17.620
- Yeah, it's a good podcast.


00:31:17.620 --> 00:31:19.100
People should definitely check it out,


00:31:19.100 --> 00:31:22.540
especially, like Brian said, if you're in that role somehow.


00:31:22.540 --> 00:31:24.580
All right, time for a joke, huh?


00:31:24.580 --> 00:31:28.060
This is visual, so I'm gonna set the stage,


00:31:28.060 --> 00:31:32.260
You have to click that link to open that and see the image here, okay?


00:31:32.260 --> 00:31:34.580
I'm going to describe it to folks.


00:31:34.580 --> 00:31:36.580
We'll see if we can do a visual joke on the air.


00:31:36.580 --> 00:31:38.540
So here's the idea.


00:31:38.540 --> 00:31:42.860
In Python, you just had this phrase, something to the effect of,


00:31:42.860 --> 00:31:44.980
we're all consenting adults.


00:31:44.980 --> 00:31:47.060
We don't need to be overly protective or


00:31:47.060 --> 00:31:50.340
overly structured in how we put our data together.


00:31:50.340 --> 00:31:54.700
We can just say, this part of our data is meant to be internal, leave it alone.


00:31:54.700 --> 00:31:57.540
And so there's conventions, but not really enforcement


00:31:57.540 --> 00:31:58.940
in the language to make that happen.


00:31:58.940 --> 00:32:00.620
So if I have a module and something


00:32:00.620 --> 00:32:02.100
was an internal implementation, I


00:32:02.100 --> 00:32:04.980
might have underscore value instead of value,


00:32:04.980 --> 00:32:07.420
or underscore method for a private method.


00:32:07.420 --> 00:32:10.140
But of course, you could still get to it, right?


00:32:10.140 --> 00:32:12.700
So the joke is, this is a little cartoon.


00:32:12.700 --> 00:32:15.580
And the cartoon is a door and a welcome mat.


00:32:15.580 --> 00:32:16.660
It has a key.


00:32:16.660 --> 00:32:18.460
Sometimes you have a key under the doormat,


00:32:18.460 --> 00:32:20.740
but the key's half sticking out.


00:32:20.740 --> 00:32:24.020
Kelly, what does it say by a little annotation there?


00:32:24.020 --> 00:32:26.660
It says Python private method.


00:32:26.660 --> 00:32:31.460
It's you know, you're not supposed to pick it up, but it's right there.


00:32:31.460 --> 00:32:33.900
So anyway, we'll put the link in the show notes.


00:32:33.900 --> 00:32:35.140
Y'all can click it, check it out.


00:32:35.140 --> 00:32:36.140
But it's pretty funny.


00:32:36.140 --> 00:32:39.020
That comes to us both from real Python and Nick's spirit.


00:32:39.020 --> 00:32:40.700
So thanks guys for sending that over.


00:32:40.700 --> 00:32:42.260
All right.


00:32:42.260 --> 00:32:43.700
Well, that's it for the show.


00:32:43.700 --> 00:32:45.500
Brian, great to chat with you as always.


00:32:45.500 --> 00:32:47.060
Kelly, thanks for being here.


00:32:47.060 --> 00:32:49.700
It was great to talk to you and get your perspective on all this stuff.


00:32:49.700 --> 00:32:51.060
Thank you for having me.


00:32:51.060 --> 00:32:53.500
It's always fun talking to you guys and listening to you guys.


00:32:53.540 --> 00:32:55.540
Yeah, you bet. See y'all later.


00:32:55.540 --> 00:32:57.240
Thank you for listening to Python Bytes.


00:32:57.240 --> 00:32:59.700
Follow the show on Twitter via @pythonbytes.


00:32:59.700 --> 00:33:02.740
That's Python Bytes as in B-Y-T-E-S.


00:33:02.740 --> 00:33:05.940
And get the full show notes at pythonbytes.fm.


00:33:05.940 --> 00:33:07.580
If you have a news item you want featured,


00:33:07.580 --> 00:33:10.020
just visit pythonbytes.fm and send it our way.


00:33:10.020 --> 00:33:12.900
We're always on the lookout for sharing something cool.


00:33:12.900 --> 00:33:14.740
On behalf of myself and Brian Auchin,


00:33:14.740 --> 00:33:16.060
this is Michael Kennedy.


00:33:16.060 --> 00:33:18.080
Thank you for listening and sharing this podcast


00:33:18.080 --> 00:33:19.740
with your friends and colleagues.

