00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 424, recorded March 17th, 2025. I'm Michael Kennedy.

00:00:11 And I'm Brian Okken.

00:00:11 And this episode is brought to you by us. Check out all of our things, courses at pythontest.com,

00:00:19 talkpython .fm, all the places. If you want to get in touch with us, social media is probably the best place. I have a couple of things sent to me on social media. I don't know about you, Brian, but a couple that I'll be covering today.

00:00:31 Yeah.

00:00:31 So that's always fun.

00:00:33 Find us on blue sky, find us on Mastodon.

00:00:36 It doesn't matter.

00:00:37 Doesn't matter what server you're on.

00:00:39 Everyone talks to everyone on Mastodon.

00:00:41 So you can find the links for all those at the top of the show and we're refining and improving our newsletter format.

00:00:48 It's getting better and better and more valuable.

00:00:50 I think it's got a nice little TLDR, grab the links, grab the joke and then dive into it if you want.

00:00:56 And yeah, so.

00:00:57 Buy them by SET-FM, smash that newsletter button and get signed up.

00:01:03 I think people are getting a lot of value out of it.

00:01:05 It's really nice, Brian.

00:01:06 Yeah, I think, I think it's great.

00:01:08 also, yeah, we've mentioned this before, but I really love the, the, what you should know if we cover a topic that you're, you're not quite understand.

00:01:17 Don't not quite, don't quite understand what that topic's all about.

00:01:21 You can check some of the background links in those.

00:01:24 So, so that's cool.

00:01:25 Absolutely.

00:01:26 I totally agree.

00:01:27 And thank you to our Patreon supporters as well.

00:01:29 Now, let us begin.

00:01:31 Let us begin, Brian, with your first item.

00:01:33 What you got for us?

00:01:34 I have, a weird quirk around rounding in Python.

00:01:39 And actually this is just apparently normal.

00:01:41 This is a feature, but I didn't know about it or I had forgotten about it.

00:01:45 So, we're linking to the weird quirk around rounding in Python.

00:01:50 And the weird quirk is really just if your number ends in 0.5, like 1.5, 2.5, things like that.

00:01:57 If you round it, it'll become even.

00:01:59 It always goes even.

00:02:01 So I didn't know this, but apparently it works better that way.

00:02:06 And that's part of the IEEE standard 754.

00:02:10 So 0.5 rounds to 0, 1.5 rounds to 2, and so forth and so on.

00:02:15 Negative numbers also.

00:02:17 So negative 1.5 will round to negative 2.

00:02:21 So did you know this?

00:02:24 I did not know this. I do not accept this. I don't accept this as a mathematician, formerly, but by lots of training and education, I do not accept.

00:02:35 So what do you do?

00:02:36 You always round to even numbers.

00:02:38 So normally, like when I, it's been a long time since I've been in primary school, but isn't the, isn't the like hand math thing that you round up if it's like 1.5?

00:02:50 It goes to the closest whole number.

00:02:52 Wait, but That's it.

00:02:53 At.5 there isn't a closest, it's right in the middle.

00:02:56 Ah, I see. So if it was.1,.5, 0, 0, 0, 0, 0, 0, 1 It goes up, yeah.

00:03:02 It goes up, I see. So it's basically deciding at the...

00:03:07 Where does the tie go?

00:03:08 The decimal representation of the cutoff. So 4 point, in my world, 4.999999, non-repeating but as many nines as you care to put, goes down. And.5 and above goes up.

00:03:22 If it's 1.4, you round down in regular math, right?

00:03:26 - Yeah.

00:03:26 - If it's 1.4999, you round out.

00:03:31 If it's 1 .4999999, as many as you want.

00:03:33 - All the extra decimals don't matter.

00:03:35 It's only with the actual, just one, if it's.5, zero.

00:03:41 All zeros.

00:03:42 So this is like 0.5, 1.5.

00:03:44 That's a tie, then there is no closest integer.

00:03:46 So where does it go?

00:03:48 And I thought in math that we always just like, half goes up. Yeah, that's what I thought too.

00:03:54 But so it doesn't it makes it make and there's reasons around it because if you if you average you want the average to be like if you averaged a bunch of these you want it to be five like you have a bunch of random numbers like

00:04:08 zero through ten or one through yeah I don't know it's gonna you want it to be five, but it's not. It's a little bit off. So this standard makes the average work. However, if you really want the normal way that we've been taught in grade school, there's a decimal feature that you can have it be round half up. So you can make it work normal, but apparently it's doing the right thing. You just didn't know that was the right thing. So

00:04:37 anyway.

00:04:38 It's a feature.

00:04:40 It's also known as banker's rounding or Dutch rounding, apparently.

00:04:44 That's learned something new there.

00:04:47 And being that Guido is Dutch, maybe that has something.

00:04:51 I don't know.

00:04:52 So just if you're rounding numbers, you should be aware of this.

00:04:55 That's it, really.

00:04:57 So, yeah.

00:04:59 You want an easy way to put it back to like grade school rounding?

00:05:04 All you have to do is just say int of your number plus.5.

00:05:08 Int plus.5.

00:05:10 >> Okay.

00:05:10 >> So if it's 1.5 plus 0.5, it's two as a decimal, but then you turn it to an int, it's two.

00:05:16 >> Right.

00:05:17 >> So it's basically just a truncation.

00:05:20 Yeah, it truncates it.

00:05:20 The 0.5 is like, okay, bump it up.

00:05:22 If it's 0.5 or above, bump it to the next number, then chop it off.

00:05:25 >>

00:05:26 Weird. I wonder why we do it different.

00:05:28 Anyway.

00:05:29 >> I don't know.

00:05:30 Interesting.

00:05:31 Thanks, Tom, for the article.

00:05:33 Lots of stuff.

00:05:34 >> Okay. What do you got for us?

00:05:36 >> Well, I've got some pretty interesting things here in terms of Python performance improvements.

00:05:43 So Brian, are you a fan of recursion?

00:05:46 >> Not really.

00:05:47 >> I'm not either, but I was against my will forced to take two programming courses in college.

00:05:53 One was Fortran and one was Lisp.

00:05:55 In Lisp or Scheme, it's all about recursion, right?

00:05:58 >> Yeah.

00:05:58 >> Like there's no, the way you do loops is to do recursion and so on.

00:06:02 And in certain, not in Scheme, but in other languages, you can pretty quickly run out of stack space by doing recursion.

00:06:10 And you might have gotten a stack overflow exception, you know, and--

00:06:15 - That's the name. - We know about stack, that's the name, like, what does this even mean?

00:06:19 So there's ways to rewrite that at the runtime level to say the reason you run out of stack space is every function call gets its own new stack frame allocated and all of its locals and all that kind of stuff.

00:06:33 What if we could just say, reuse the existing stack space, grabbing some of the local variables that are being passed and just kind of reusing them long as you find a way to save the data to kind of go up the stack when you hit return or something like that, right?

00:06:46 - Yeah.

00:06:47 - And to my limited experience, that's what tail calls do.

00:06:51 So if you've heard about adding, like doing tail recursion to make your recursion much faster, that's because not every single, basically every single step in the loop, you don't have to recreate the function frame.

00:07:02 So that's really good.

00:07:04 And so the idea here, the news is that the faster CPython project has added tail calls to Python.

00:07:12 This is not exactly the same thing because it doesn't exactly have to do with recursion.

00:07:16 It has to do with stepping through the bytecode instructions.

00:07:22 Okay.

00:07:22 Okay.

00:07:23 So traditionally there've been different ways in which Python does that.

00:07:27 The article from LWN.net says, "Python's Many Interpreters." So when you run a Python program, it converts it to bytecode.

00:07:35 Yes, we know this.

00:07:36 It says, however, there's actually a couple of ways in which this could be executed.

00:07:41 There's the switch-based interpreter version, and then there's a go-to, what do they call it, the computed go-to statements version, which they say is a micro-op interpreter.

00:07:54 This is relatively new.

00:07:55 Like you maybe have seen the giant switch statement and by giant, I mean, 3,500 lines of C switch statement, single switch statement within a for loop that says for each, you know, go to the next byte instruction, switch on what it is, do that, right?

00:08:11 That has still stuck around because certain compilers don't support what's called a computed go-to statement or dynamic go-to statements, which sounds terrible, but it's a compiler level thing, not a human

00:08:24 code level thing.

00:08:27 My go-to statements are bad for people, but they're not necessarily bad for compilers.

00:08:31 So the reason the old one is around is some of the compilers can't take it, but the new one's a little bit better.

00:08:38 So the idea here is that, I'm going to give credit to it, so Ken Jin, member of the Faster Steep Python project has merged a new set of changes that have up to 10% actually up to 40% performance improvements on an average geometric mean of 10% improvements, which is pretty awesome.

00:08:58 So the idea is that we can change the way that that go-to that computed go-to based interpreter works using tail calls. So kind of like I described for recursion, it's reusing the stack frame as an optimization. So modern compilers like Clang and GCC can do tail call optimizations optimistically, but until recently they weren't 100% guaranteed. You know, like some compilers have that level like -01, -02, like you put it up too high and stuff starts to break, you're like, "Huh, that's weird." You think that would just work, but right. And I think that's kind of the case is here. And apparently it's more stable so they can rely on it. So basically there's this new interpreter.

00:09:41 And as the article points out, like it might seem crazy to add a third interpreter to Python, and it seems like a lot of work, right? But if you go down to the bottom, it says somewhere that Jin's change is only about 200 lines of Python code, which generates the interpreter and generates the code for the tail calling version. So it's actually not very much effort at all. So what it does is it'll say like, does your compiler support this faster version of behaviors? If it does, we'll give you a faster Python.

00:10:10 I think that's pretty awesome.

00:10:11 >>

00:10:11 Yeah. I think.

00:10:14 >> Yeah, I think so.

00:10:15 >> If it works.

00:10:16 >> Yeah, as long as it works. So this is already merged into Python 3.14, which is pretty excellent.

00:10:22 It does say, look, if you're on an older build of Python, or you're building Python yourself with an old compiler, you're going to get the slow version.

00:10:29 Like, okay, if you care about faster Python, compile it with modern compilers or download one with a binary.

00:10:38 I bet you uv is already on top of this, you know what I mean?

00:10:41 So 3.14 already has this in it?

00:10:44 That's what it says.

00:10:45 Okay, cool.

00:10:45 It says merged.

00:10:47 Jin's work has been merged and should be available to end users in Python 3.14.

00:10:51 Expected Halloween 2025.

00:10:54 But what's really interesting here is Jin measured the performance impact of the change as a 10% on average, but up to 40% on some benchmark speed improvement, and then framed it this way, which I thought was really interesting.

00:11:06 the speedup is roughly equal to two CPython releases worth of improvements.

00:11:12 So like 3.11 to 3.13 in this just 200 lines of Python code, which is amazing.

00:11:17 >> That's pretty cool.

00:11:17 >> For example, CPython 3.12 roughly sped up by 5%.

00:11:22 So, year over year sort of thing.

00:11:24 So just this one change in 3.14 is going to be pretty mega.

00:11:28 It's awesome.

00:11:29 >>

00:11:29 Yeah.

00:11:30 Yeah, no, this is really cool.

00:11:33 When I first heard about this, I was excited that maybe we get tail recursion optimization in Python, but we don't.

00:11:40 I'm okay without it. It would be good to have.

00:11:43 But let's not encourage them. Now, I use recursion sometimes.

00:11:46 Look, if you've got hierarchical data structures, recursion is magical, right?

00:11:50 It's like it exactly matches what you do with that hierarchy as you kind of traverse it.

00:11:55 But in life, though, I think I've only used recursion and tail optimization in college.

00:12:04 But I don't do sort of, because I don't do recursive sort of things very much.

00:12:08 But that's all right.

00:12:09 >> Yeah, yeah.

00:12:10 Andrew out there points out, "I was overly excited to see this when I first saw these headlines thinking Python itself was getting tail call optimization.

00:12:18 Very nice nonetheless going to motivate me to get Clang builds working with the required options." Yeah, absolutely cool.

00:12:25 Like I said, I hope the uv folks are on this because uv venv and we just get 10% faster.

00:12:30 Like let's go.

00:12:31 >> Well, yeah, and actually I think that because of UV, we're getting more people trying new versions of Python faster because all you have to do is create a virtual environment and pick it.

00:12:41 >> Yeah.

00:12:42 >> And you get it.

00:12:42 >>

00:12:42 --Python 3.14B or whatever, however you specify it.

00:12:46 >> Yeah.

00:12:47 >> Absolutely.

00:12:48 All right, back to you.

00:12:50 >> Okay. Well, let's see.

00:12:52 We've got something from Rodrigo.

00:12:55 Rodrigo and I'm, anyway, Rodrigo from MathsPP.

00:13:00 Math, that's okay.

00:13:02 I'm gonna have to work on this one.

00:13:03 But he puts out a lot of great stuff.

00:13:05 He's writing about Python and very active on Blue Sky.

00:13:10 And I think I don't, maybe somehow I missed this.

00:13:13 This is, he's using translate and make trans together.

00:13:16 He said, "Don't use the method replace "to remove punctuation from a Python string.

00:13:22 "Use translate instead.

00:13:24 "It's much more efficient and more general." and his example, which I had to like parse a little bit to figure this out.

00:13:31 So basically like his example of hello world with a comma and an exclamation point.

00:13:37 We want to strip that all the punctuation out.

00:13:40 How do you do that?

00:13:41 Well, you can use make trans, which is translates from one string, like some things in a string to another set of characters in a string.

00:13:51 It's kind of a weird function, but he's giving it nothing.

00:13:54 So the translate from and to are empty.

00:13:57 But he's also giving the third parameter is stuff to just strip out.

00:14:02 The way make trans does that is it translates a takes all of the characters in the third argument and replaces them with none, and those just end up getting removed.

00:14:13 For the third character, he's using string.punctuation.

00:14:16 He's creating a translation table that all it does is remove punctuation, and that's what we want, passing it to trans, and you get a string.

00:14:27 And it still seems like maybe there should be an easier way in Python to do this, but that's pretty cool.

00:14:35 I like it.

00:14:35 So he also has an article that talks about not exactly this thing, but he's got an article about string translate and make trans methods if you want to dive deeper into those.

00:14:47 Or you can just use this little trick.

00:14:49 So-- Very interesting.

00:14:50 News to me.

00:14:51 It's a little bit like when I learned that strip, if I have like str, if I want to take str off of the word string and just leave ing, right?

00:15:00 If you say L strip and you put the string str in there, I always thought it would find that string and take it out, but no, that just takes the S's and the T's and the R's, so R2S would also be right.

00:15:12 So there's remove prefix and remove suffix and stuff like that.

00:15:15 And this one's a little bit like that, like, huh, it didn't quite do what I thought, but I, apparently there's another way.

00:15:21 >> Yeah. One of the interesting things about MakeTrans that always throws me is, it's an ordering thing, so you go from and to, and it utilizes the fact that strings are iterable.

00:15:35 That's not something I normally think about unless I'm, I guess when I'm parsing stuff, when I'm parsing a file or parsing a line, I utilize the fact that they're iterable.

00:15:47 But normally I don't iterate over characters of a string.

00:15:51 That's seems like maybe that's too easy to get wrong.

00:15:55 But anyway.

00:15:56 >> Yeah, perhaps.

00:15:58 >> All right. What you got for us next? Oh, we're done.

00:16:02 >> Well, I got extra, extra, extra, extra.

00:16:05 >> Extra, lots of extras.

00:16:07 Yeah, because we had some short topics.

00:16:09 So let's get some extras.

00:16:12 >> So first of all, this was sent in by several people including Owen Lamont.

00:16:16 Thank you for that.

00:16:17 And this is a nine minute video of animation versus coding.

00:16:22 And it's the weirdest-- I don't even know what to make of it.

00:16:25 It's an insane amount of work that these people put into it.

00:16:27 I'll just play a little bit of it as we're talking, Brian.

00:16:30 And so the idea here is it's like an animation of somebody writing code and seeing how it interacts.

00:16:37 And then the computer comes alive, and there's a battle with the computer.

00:16:43 The computer will fire up Turtle and all sorts of stuff.

00:16:46 And it ends up in the end, like creating AIs to run around and doing all sorts of stuff.

00:16:54 And I think spoiler, I think the person character wins by like controlling the computer with AI.

00:17:00 I'm not entirely sure the outcome.

00:17:01 I totally forget, but it features pie game, pandas, pie torch.

00:17:08 I mean, it's, it's nuts.

00:17:09 So anyway, if you're looking for some entertainment, that's pretty cool.

00:17:13 I got to watch that.

00:17:14 It's a 10 minute video though.

00:17:15 Yeah.

00:17:16 Yeah.

00:17:16 If you're eating lunch or something, you're like, I need a little break from programming.

00:17:20 Let me watch a video about programming.

00:17:21 I can do that.

00:17:22 Yeah.

00:17:23 All right.

00:17:23 Next up in the news, I brought this up more as a parallel, as a other thing, other places are doing this too.

00:17:30 Right?

00:17:30 So one of the concerns and benefits of a lot of these new tools is they are written in Rust for Python, right?

00:17:38 So why is uv fast?

00:17:41 Mostly algorithms, but also Rust.

00:17:43 Why is rough fast?

00:17:44 Mostly Rust, probably also algorithms.

00:17:46 You know what I mean?

00:17:47 Like things like that.

00:17:48 Right.

00:17:48 why are we running our website on Granian, Rust, Hyper, all those sorts of things.

00:17:54 So the folks over at TypeScript, Anders Halsberg, the creator of it and the Microsoft team just made TypeScript, which is a typed JavaScript thing.

00:18:05 And I believe the runtime behind it as well.

00:18:07 I think there's some kind of runtime.

00:18:09 I haven't done much with TypeScript that way, but certainly like it's compiler and it's language LSP for editors and stuff like that.

00:18:18 10 times faster by rewriting it in Go.

00:18:20 >> Oh, geez.

00:18:21 >> That's interesting. They said, "Look, we tried a bunch of different languages.

00:18:25 We tried Rust, we tried C, we tried Go, we tried, I think, Zig." They mentioned a lot of languages.

00:18:31 They said, "Look, Go allows us to align the memory stuff as you do in native languages." Like align the memory structures exactly write for the compiler and stuff like that or something.

00:18:43 So anyway, I know a lot of people listening also do JavaScript and TypeScript stuff.

00:18:48 And I think it's, you know, here's another 10 minute video to watch.

00:18:51 That's kind of interesting.

00:18:52 I think 13 minutes technically.

00:18:54 But so that's like the drop loss.

00:18:56 Everything that uses TypeScript would be faster then or.

00:19:00 So that's what I'm not.

00:19:01 There is some kind of runtime that they're doing something with that they rewrote.

00:19:06 Like TypeScript used to compile itself with TypeScript.

00:19:09 But there's also something that runs that does the language server.

00:19:13 I feel like it's a little like node, but like I said, this is far, I'm far out over my skis at this point.

00:19:17 I think when you talk about stuff that runs it, mostly that's in the browser.

00:19:22 And then that's going to be just the JavaScript engine.

00:19:24 Cause the now Go-based transpiler compiler will compile the JavaScript and then it's run natively, natively, you know, anyway, pretty interesting.

00:19:32 I thought it was worth throwing out there.

00:19:33 Cause it's like, Oh, Python's getting overrun by Rust.

00:19:37 What's what in the world's going on?

00:19:38 I'm like, this is a trend of more places, not just Python.

00:19:41 That's what I kind of want to point out here.

00:19:43 They made different choices for different reasons, but it's still pretty interesting.

00:19:47 Okay.

00:19:47 Thanks for showing me that YouTube.

00:19:48 All right.

00:19:49 I, this next section I entitled Firefox lies.

00:19:53 So Brian, it's very exciting.

00:19:55 This weekend was the first formula one race of the year, and they've going to have something like 23 more.

00:20:00 Very good.

00:20:01 And it was amazing.

00:20:02 If you haven't watched it, I won't spoil it, but it's, it was one of the best formula one races I've watched in a very long time.

00:20:07 It was full of drama, full of interesting things.

00:20:10 It was good.

00:20:10 And this, so what does this have to do with Firefox?

00:20:13 So I tried to watch it.

00:20:14 I subscribed to F1 TV so that I can watch all the, all the races, all the replays, all the qualifying, all that kind of stuff, instead of getting cable, which is a complete rip off, you know, pay 200 bucks a month, I paid like 80 bucks once and I watch all those with replays and whatever, right.

00:20:31 I tried to watch that with Firefox.

00:20:34 Do you know what it said?

00:20:35 Your browser is out of date and unsupported.

00:20:38 You cannot watch this website.

00:20:40 You must go away because you don't have Chrome basically.

00:20:43 And I said, huh, I seriously doubt it.

00:20:45 I seriously doubt that Firefox won't work.

00:20:49 FUF1 I said, and I said, no, we're doing it.

00:20:54 We're watching it in Firefox because I have all this blocking turned on in my other favorite browser, Vivaldi.

00:21:00 Right.

00:21:01 And I don't want to turn off the blocking and stuff.

00:21:03 So I have like kind of my bare Firefox is the one that allows all the badness through so I can watch stuff that, you know, Peacock and F1 and so on.

00:21:13 So when they say you can't watch them, like, no, I can watch it.

00:21:16 So what I did is I put the link, I'll link to how you do this, but I just went up and just told Firefox it's user agent is the latest version of Chrome.

00:21:24 Hence Firefox lies.

00:21:26 Went back.

00:21:27 I went back to, F1 TV.

00:21:30 Welcome.

00:21:30 Which, which replay would you like to watch?

00:21:33 Boom.

00:21:33 Perfect.

00:21:34 Played perfectly.

00:21:34 There's nothing wrong with Firefox.

00:21:36 The people are just too lazy to test against it.

00:21:39 And so they're like, well, you got to have Chrome.

00:21:41 Like, all right, fine.

00:21:41 I have Chrome.

00:21:42 Oh, look, it works.

00:21:43 This is the same reason that Vivaldi works.

00:21:45 Vivaldi, you cannot know like the market share of Vivaldi per user agent.

00:21:50 Like, some of those sites that track user agent frequency and stuff.

00:21:54 Yeah.

00:21:54 They just, because they just say the same thing.

00:21:56 They just say my user agent is the latest version of Chrome.

00:21:59 So that it works because if everybody had to also say, we also support Vivaldi, It would say crap like that all the time.

00:22:05 - Yeah.

00:22:05 - And so if you love Firefox or any other browser really, but I have instructions for Firefox and you run into those problems, just make it lie.

00:22:13 I'm really, really loving Zen.

00:22:16 We talked about that a few times and I'm considering making my Zen claim to be the latest Chrome as well.

00:22:23 - Yeah, that's one of the reasons why I like Vivaldi as well, because especially in corporations, a lot of internal tools, they don't wanna, I mean, that's a lot of work for internal tools to test everything.

00:22:35 So they just usually test against Chrome.

00:22:37 And so with Vivaldi, I can just use internal tools just fine.

00:22:41 - Yeah, it's indistinguishable.

00:22:42 It doesn't know.

00:22:44 Why wouldn't it be?

00:22:45 It's literally the same embedded engine in the terms of Vivaldi.

00:22:48 It literally is Chrome.

00:22:49 It just doesn't have all this scumbaggery to it.

00:22:51 - Yeah.

00:22:52 - Yeah, all right.

00:22:53 This is extra, it's getting long, real quick.

00:22:54 All right, Startup Row.

00:22:56 Startup Row applications are open.

00:22:58 Does your startup qualify for Startup Row?

00:23:01 Here's some criteria.

00:23:02 Use Python.

00:23:02 Your startup is less than 2.5 years old.

00:23:05 You have less than 25, fewer than 25 employees, et cetera, et cetera.

00:23:10 You will come to the conference and so on.

00:23:13 This is a really cool program.

00:23:14 And if you have a startup and you want to get some awareness, consider applying to this.

00:23:18 So this is, this is at PyCon on Sundays.

00:23:23 There's there's a, they, they take away all of the booths and everything like that.

00:23:27 And then we have, we have a couple of rows of startups that you can.

00:23:30 Yes.

00:23:30 I think it even might be Thursday through Saturday.

00:23:33 I think it might be during the expo.

00:23:35 Oh, during the expo.

00:23:36 It was in a corner, it was in a corner, but it was, I think it was during the expo.

00:23:39 Oh, right.

00:23:39 Yeah.

00:23:40 Yeah.

00:23:40 Yeah.

00:23:40 You basically get a booth as like a $10,000 equivalent booth as if you were another advertiser there, but it's to promote your Python based startup.

00:23:49 So people should check that out.

00:23:50 I actually did an interview two years ago, coming up on two years ago, called a stroll down startup lane, where I went and interviewed all the people, all the different startups, like 10 minutes per startup or something like that.

00:24:01 Nice.

00:24:02 Yeah.

00:24:03 Ooh, last, last of the extras.

00:24:05 I am publishing a book, Brian.

00:24:07 Wow.

00:24:08 Neat.

00:24:09 Yeah.

00:24:09 Thanks.

00:24:09 Talk Python in production.

00:24:11 So the subtitle is a cloud agnostic guide to building, scaling, and managing your own Python infrastructure.

00:24:17 So I've talked a lot about different ways we're doing different things with infrastructure, but here's a book, it's about 250 pages.

00:24:23 That goes into all the details of like how you can run efficient, high performance, but not complex, not expensive Python infrastructure.

00:24:32 And you can buy, you can read about the first third of it online.

00:24:37 And it says buy the book, but you can't quite buy the book just today.

00:24:41 I'm still trying to get it all ready to go.

00:24:43 So right now you can subscribe to get notified when you can buy the book.

00:24:47 And in a week or two, you will be able to buy the book at Amazon and probably Gumroad is what I'm thinking.

00:24:52 Okay.

00:24:52 I like Gumroad.

00:24:53 Yeah.

00:24:54 Anyway.

00:24:54 So the link to that is in the show notes and hopefully people will check that out.

00:24:59 Cool.

00:25:00 Yeah.

00:25:00 All right.

00:25:00 That's it for my extras.

00:25:01 You got any extra extras?

00:25:04 No, I wanted to announce the changes to the course, but I, but I'm still working on it, life getting in

00:25:11 the way.

00:25:11 So yeah, I hear you.

00:25:12 Well, until then people don't necessarily have to test, right.

00:25:16 They don't need work on your testing.

00:25:17 Yes, they do.

00:25:18 Yeah.

00:25:19 No, they can just test in production.

00:25:22 So the joke is a Star Trek one.

00:25:23 This comes to us by Greg Matiola.

00:25:26 Thank you.

00:25:27 It says, as Goron says, we will test in production and die with glorious honor.

00:25:32 And it's got like a cool little meme over a Star Trek Klingon character.

00:25:36 Yeah.

00:25:37 Yeah.

00:25:37 But it's usually your customers that will die in glorious honor.

00:25:41 They die first and then you wither.

00:25:45 Yeah.

00:25:45 Okay.

00:25:46 Yeah.

00:25:47 So you, what I'm hearing is you're saying you don't actually support this advice.

00:25:51 I don't.

00:25:52 But I, but there is a certain car company that seems to have pieces of their cars flying off.

00:25:59 I think, does it look a little like a spaceship?

00:26:02 Yeah, it does.

00:26:02 And apparently they just glued some of the stuff onto the side is some of this.

00:26:07 Anyway, you know, I was, in Nashville with my kids the last summer and we were driving along and our rental car, which was not one of these spaceship.

00:26:18 things. The, the, there was apparently a, the thing that goes on the column has like a fancy cover, like a bodywork. Yeah. The, the columns that hold up the roof and along the windshield. And it just peeled back, ripped off and started whacking against the car on the highway. And this was on our way to the airport. So one of my kids had to reach out and hold, hold the body work in place for about 15 minutes. And she was, she was kind of done holding the bodywork in place. So we got to to the airport.

00:26:46 - That's crazy.

00:26:47 - So bad, so bad.

00:26:49 - Did you get charged for the damage to the car?

00:26:53 - No, I kinda like mushed it back.

00:26:55 I said, "How's the car?" It was fine, that piece is a little bit loose.

00:26:57 You might wanna check it, bye.

00:26:59 - Bye.

00:27:00 (laughing)

00:27:01 Yeah.

00:27:03 - No, it was okay.

00:27:04 - Anyway.

00:27:05 - Anyway, yeah, test in production.

00:27:07 - Test in production.

00:27:08 No, don't put test in production.

00:27:09 Test before production.

00:27:11 - Absolutely.

00:27:12 But do, do listen to the show every week.

00:27:15 We'll be back next Monday at 10, probably, most likely.

00:27:18 - Tell your friends.

00:27:19 - Until then, thank you everyone, bye.

00:27:21 - Bye.

