
00:00:00.000 --> 00:00:05.440
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.440 --> 00:00:11.200
This is episode 108 recorded December 10th, 2018.


00:00:11.200 --> 00:00:12.000
I'm Michael Kennedy.


00:00:12.000 --> 00:00:12.800
And I'm Brian Okken.


00:00:12.800 --> 00:00:15.520
And this episode is brought to you by DigitalOcean.


00:00:15.520 --> 00:00:18.000
Check them out at pythonbytes.fm/digitalocean.


00:00:18.000 --> 00:00:19.440
Tell you more about that later.


00:00:19.440 --> 00:00:20.880
Right now, I wonder how you're doing, Brian?


00:00:20.880 --> 00:00:21.680
I'm doing great.


00:00:21.680 --> 00:00:22.320
Yeah?


00:00:22.320 --> 00:00:26.800
Do you find that sometimes you end up with messy data?


00:00:26.800 --> 00:00:28.400
So you kind of clean it up.


00:00:28.400 --> 00:00:30.060
you're like, "Ah, gosh, not again."


00:00:30.060 --> 00:00:34.560
Yeah, you've got like, you know, empty spots and, you know, bad stuff.


00:00:34.560 --> 00:00:36.060
Yeah, anyway, data.


00:00:36.060 --> 00:00:38.560
Yeah, somebody spilled a string where a number was supposed to go.


00:00:38.560 --> 00:00:39.560
Yeah.


00:00:39.560 --> 00:00:40.560
Maybe there's something you can do.


00:00:40.560 --> 00:00:41.560
Yeah, you can get a janitor.


00:00:41.560 --> 00:00:42.560
A pyjanitor.


00:00:42.560 --> 00:00:43.560
Clean up your janitor.


00:00:43.560 --> 00:00:47.640
Yeah, first project we're going to talk about is pyjanitor.


00:00:47.640 --> 00:00:50.280
It's a package for cleaning up your data.


00:00:50.280 --> 00:00:56.400
And this has a history in, originally it was a port of an R package called janitor, but


00:00:56.400 --> 00:00:58.600
but now it's grown from that.


00:00:58.600 --> 00:01:02.520
So it's both for cleanliness of data,


00:01:02.520 --> 00:01:05.200
but also just a really clean interface


00:01:05.200 --> 00:01:07.000
in convenient routines.


00:01:07.000 --> 00:01:10.000
So it's kind of for anybody working with data


00:01:10.000 --> 00:01:12.960
that can have problems with it.


00:01:12.960 --> 00:01:15.440
There's a whole bunch of stuff involved with this.


00:01:15.440 --> 00:01:17.600
So some of the functionality includes


00:01:17.600 --> 00:01:20.080
cleaning up column names,


00:01:20.080 --> 00:01:22.640
which I'm not sure why you would have bad column names


00:01:22.640 --> 00:01:23.460
in the first place,


00:01:23.460 --> 00:01:25.000
but if you're pulling it from somewhere else.


00:01:25.000 --> 00:01:26.920
- Yeah, like a lot of times people load CSVs


00:01:26.920 --> 00:01:29.280
into Panda data frames and things like that, I think.


00:01:29.280 --> 00:01:31.200
- Yeah, okay, so cleaning those out.


00:01:31.200 --> 00:01:33.120
Removing empty rows and columns


00:01:33.120 --> 00:01:35.500
and identifying duplicate entries.


00:01:35.500 --> 00:01:39.240
There's some stuff that can just happen with data like that.


00:01:39.240 --> 00:01:40.560
But it has a whole bunch of other cool things


00:01:40.560 --> 00:01:45.040
like telling your system how to deal with empty values


00:01:45.040 --> 00:01:49.120
and expanding columns and coalescing multiple columns


00:01:49.120 --> 00:01:51.960
into a single column and a whole bunch of stuff like that.


00:01:51.960 --> 00:01:54.240
That's part of it is dealing with messy data.


00:01:54.240 --> 00:01:56.960
But the other thing is to try to keep your code clean.


00:01:56.960 --> 00:01:58.400
So on the other side of it,


00:01:58.400 --> 00:02:02.880
it has more of a functional programming style of using it.


00:02:02.880 --> 00:02:05.160
And I'm not gonna try to really talk about this too much,


00:02:05.160 --> 00:02:07.680
but we have a code snippet in our show notes


00:02:07.680 --> 00:02:10.360
where it shows kind of how you would deal with data frames


00:02:10.360 --> 00:02:12.880
and doing things like dropping columns and stuff


00:02:12.880 --> 00:02:15.720
within pandas, and then how that would look


00:02:15.720 --> 00:02:17.880
in PyJanitor code.


00:02:17.880 --> 00:02:19.840
And it just makes it a lot,


00:02:19.840 --> 00:02:21.240
I think it's more maintainable.


00:02:21.240 --> 00:02:22.080
It's neat.


00:02:22.080 --> 00:02:22.900
- Yeah, I really like this.


00:02:22.900 --> 00:02:24.660
It looks super handy.


00:02:24.660 --> 00:02:28.100
It's like a set of utilities on top of Pandas,


00:02:28.100 --> 00:02:29.220
which is great.


00:02:29.220 --> 00:02:31.020
And I like how they describe this feature


00:02:31.020 --> 00:02:31.860
you just talked about.


00:02:31.860 --> 00:02:34.540
It's like, it's a cleaner method changing


00:02:34.540 --> 00:02:38.980
verb-based API for common Pandas routines,


00:02:38.980 --> 00:02:40.860
otherwise known as a fluent interface.


00:02:40.860 --> 00:02:44.460
If you're looking for one word there, but that's great.


00:02:44.460 --> 00:02:46.980
So yeah, I think it's a really nice way to work with it.


00:02:46.980 --> 00:02:48.200
It looks really approachable.


00:02:48.200 --> 00:02:49.780
And I do like the fluent interface.


00:02:49.780 --> 00:02:53.080
like I really, really wish more things like that


00:02:53.080 --> 00:02:53.980
operated that way.


00:02:53.980 --> 00:02:55.840
- Yeah, for instance, a lot of the functions


00:02:55.840 --> 00:02:58.580
return data frames so that you can just keep on


00:02:58.580 --> 00:03:02.020
in a new function to do multiple stages of a workflow.


00:03:02.020 --> 00:03:03.780
- Now this is all around pandas,


00:03:03.780 --> 00:03:06.160
so if you're doing not just regular data cleaning,


00:03:06.160 --> 00:03:07.320
but you gotta be working with pandas,


00:03:07.320 --> 00:03:09.080
but I think a lot of people who do that kind of work


00:03:09.080 --> 00:03:11.020
probably are, so it seems really helpful.


00:03:11.020 --> 00:03:13.860
So would you consider yourself an expert at Python?


00:03:13.860 --> 00:03:15.080
(laughing)


00:03:15.080 --> 00:03:17.380
- No, I know enough to know what I don't know.


00:03:17.380 --> 00:03:18.920
- Yeah, I think this is one of the things


00:03:18.920 --> 00:03:20.560
where it's like you're never really,


00:03:20.560 --> 00:03:22.840
like there's always stuff that you don't know,


00:03:22.840 --> 00:03:25.160
so you don't ever necessarily feel like an expert?


00:03:25.160 --> 00:03:26.440
- Well, especially in this field,


00:03:26.440 --> 00:03:28.680
when we're like, I'm always researching stuff


00:03:28.680 --> 00:03:31.160
that know more than me about cool places,


00:03:31.160 --> 00:03:33.000
but all in all, I think I am, yeah.


00:03:33.000 --> 00:03:34.480
- I would say that you are.


00:03:34.480 --> 00:03:37.440
So I think there's a really interesting presentation


00:03:37.440 --> 00:03:39.740
done by James Powell, and this was recommended to us


00:03:39.740 --> 00:03:42.360
by one of our listeners, I just don't remember who,


00:03:42.360 --> 00:03:43.340
so I can't give him credit,


00:03:43.340 --> 00:03:44.920
but thank you for whoever sent this in.


00:03:44.920 --> 00:03:49.000
And this is a presentation at PyData 2017


00:03:49.000 --> 00:03:51.280
by James Powell.


00:03:51.280 --> 00:03:52.440
And it's a YouTube video.


00:03:52.440 --> 00:03:54.880
And it's not just a little light,


00:03:54.880 --> 00:03:57.360
here's my quick rundown of the five things.


00:03:57.360 --> 00:04:00.100
It's like an hour and a half sort of deep dive


00:04:00.100 --> 00:04:02.480
into what it takes to be an expert.


00:04:02.480 --> 00:04:03.920
So basically James says,


00:04:03.920 --> 00:04:08.360
hey look, it's pretty easy to be competent with Python.


00:04:08.360 --> 00:04:09.880
You can learn a couple of things


00:04:09.880 --> 00:04:11.680
and whatever other programming language you use,


00:04:11.680 --> 00:04:13.880
you can kind of like make Python do that.


00:04:13.880 --> 00:04:17.840
but to really understand it properly and take full advantage of it,


00:04:17.840 --> 00:04:21.800
write Pythonic code, things like that, is a whole lot harder.


00:04:21.800 --> 00:04:26.240
So he runs through some of the things that he thinks people should know.


00:04:26.240 --> 00:04:29.600
And it's really focused at the maybe advanced beginner,


00:04:29.600 --> 00:04:33.600
early intermediate type of developer who can do stuff with Python,


00:04:33.600 --> 00:04:37.880
but maybe stopped learning about the language and the features


00:04:37.880 --> 00:04:40.520
when they got whatever they're trying to make work, work.


00:04:40.520 --> 00:04:41.040
Oh, good.


00:04:41.040 --> 00:04:43.960
Yeah, so it covers things like the Python data model,


00:04:43.960 --> 00:04:46.680
otherwise known as the magic methods or nunder methods,


00:04:46.680 --> 00:04:49.080
meta classes, a bunch of other stuff.


00:04:49.080 --> 00:04:51.280
And it's really nicely done.


00:04:51.280 --> 00:04:53.680
I'm not a fan of presentations that are like,


00:04:53.680 --> 00:04:55.880
hey, here's seven slides and me talking about it.


00:04:55.880 --> 00:04:57.160
Like, woohoo.


00:04:57.160 --> 00:05:00.000
He just fires up an editor and says, I have no slides.


00:05:00.000 --> 00:05:02.120
The editor is going to be the presentation.


00:05:02.120 --> 00:05:03.560
Let's start talking about these things


00:05:03.560 --> 00:05:04.680
and just does it from scratch,


00:05:04.680 --> 00:05:06.600
which I think is a real genuine way to do it.


00:05:06.600 --> 00:05:07.600
So well done.


00:05:07.600 --> 00:05:08.840
- I'm gonna have to check that out myself.


00:05:08.840 --> 00:05:10.240
- Yeah, yeah, I've watched some of it.


00:05:10.240 --> 00:05:11.280
I haven't watched all of it.


00:05:11.280 --> 00:05:13.360
I've only watched like maybe half.


00:05:13.360 --> 00:05:15.840
But definitely watched enough to recommend it to folks.


00:05:15.840 --> 00:05:17.240
If you feel like you're in the stage,


00:05:17.240 --> 00:05:18.060
like am I an expert?


00:05:18.060 --> 00:05:18.920
I'm not sure.


00:05:18.920 --> 00:05:22.680
Watch this and you'll probably get some things reinforced


00:05:22.680 --> 00:05:25.360
and others maybe be like yeah, I knew that, that's great.


00:05:25.360 --> 00:05:26.960
I would even say it was awesome.


00:05:26.960 --> 00:05:28.060
- That's very awesome.


00:05:28.060 --> 00:05:31.880
There's a lot of awesomeness in Python


00:05:31.880 --> 00:05:34.360
and there's quite a few, on GitHub,


00:05:34.360 --> 00:05:37.160
there's quite a few different awesome lists.


00:05:37.160 --> 00:05:39.320
And so that's what I wanna talk about today


00:05:39.320 --> 00:05:42.560
another awesome list. And this one is called the ISO. I saw


00:05:42.560 --> 00:05:45.320
these triangles. No, it's called awesome Python


00:05:45.320 --> 00:05:49.600
applications. It's kind of a just a way for you to try to


00:05:49.600 --> 00:05:54.080
highlight a bunch of different cool applications. Because if


00:05:54.080 --> 00:05:58.280
you're looking for packages to base your own project on, you


00:05:58.280 --> 00:06:01.480
can look at PyPI. But that's not as easy to do with


00:06:01.480 --> 00:06:04.760
applications because they don't exist in PyPI. So that's one of


00:06:04.760 --> 00:06:08.800
the why this has been created. There's quite a few categories


00:06:08.800 --> 00:06:13.760
already and Mahmoud Hashemi has started it and he wants people to help him out


00:06:13.760 --> 00:06:18.080
fill this in because it's kind of hard to find applications sometimes. So these


00:06:18.080 --> 00:06:22.120
are all applications written in Python that are open source that you can look


00:06:22.120 --> 00:06:26.360
at how they're doing things. Yeah I really like this because so often people


00:06:26.360 --> 00:06:31.640
say well I'd like to use Python for this project but to sell this to my teammates


00:06:31.640 --> 00:06:36.320
and my manager or my company it would be great to say well YouTube is written in


00:06:36.320 --> 00:06:40.880
Python, and I know you think Python doesn't scale, but I'm sure we're doing less than


00:06:40.880 --> 00:06:45.440
a million requests a second, so we'll probably be okay also.


00:06:45.440 --> 00:06:48.520
Having the examples for those kinds of comparisons are really great.


00:06:48.520 --> 00:06:49.520
This is a little bit like that.


00:06:49.520 --> 00:06:55.560
There's a bunch of stuff for biology, cell profilers, and things like that, right?


00:06:55.560 --> 00:06:56.560
>> Yeah.


00:06:56.560 --> 00:07:01.120
Even, I had to look this one up, ERPs, Enterprise Resource Planning.


00:07:01.120 --> 00:07:04.880
No, I don't need one of those, but cool, it's there.


00:07:04.880 --> 00:07:08.880
But a lot of these, one of the things I like about this is there's a lot of custom applications


00:07:08.880 --> 00:07:15.080
that people end up writing, and they know that their problem space is very specific.


00:07:15.080 --> 00:07:19.680
Instead of writing everything from scratch, you could take one of these open source projects


00:07:19.680 --> 00:07:23.080
and fork it or customize it for your own need.


00:07:23.080 --> 00:07:25.760
And that's one of the benefits of open source, of course.


00:07:25.760 --> 00:07:26.760
But good starting point.


00:07:26.760 --> 00:07:27.760
Yeah, that's awesome.


00:07:27.760 --> 00:07:28.760
I really like this.


00:07:28.760 --> 00:07:31.200
Again, well done, Mahmoud.


00:07:31.200 --> 00:07:33.440
And it's just, it's cool to have these examples out there, you know?


00:07:33.440 --> 00:07:34.440
Yeah.


00:07:34.440 --> 00:07:37.180
- I do, and if I had a cool application,


00:07:37.180 --> 00:07:40.740
I would like to put my application there in DigitalOcean.


00:07:40.740 --> 00:07:41.580
Absolutely.


00:07:41.580 --> 00:07:45.360
So DigitalOcean is sponsoring the show.


00:07:45.360 --> 00:07:48.180
They've been sponsoring most episodes of Python Bytes,


00:07:48.180 --> 00:07:49.520
and they're big supporters of it.


00:07:49.520 --> 00:07:51.400
So thank you to them.


00:07:51.400 --> 00:07:53.180
We use them for some of our infrastructure,


00:07:53.180 --> 00:07:54.680
and it's working out great.


00:07:54.680 --> 00:07:56.240
One thing I want to highlight this time around


00:07:56.240 --> 00:07:59.880
is their early access Kubernetes project.


00:07:59.880 --> 00:08:02.960
So if you're doing anything with Docker and Kubernetes


00:08:02.960 --> 00:08:06.160
and things like that, they have some special tools


00:08:06.160 --> 00:08:10.520
for deploying and managing your containers in the cloud.


00:08:10.520 --> 00:08:14.240
So just go over to pythonbytes.fm/digitalocean


00:08:14.240 --> 00:08:16.720
and you can sign up there or go over to the products


00:08:16.720 --> 00:08:18.720
and just pick Kubernetes and get started on that.


00:08:18.720 --> 00:08:20.520
There's tons of other stuff that you can do as well,


00:08:20.520 --> 00:08:23.120
but the Kubernetes work they're doing is quite cool.


00:08:23.120 --> 00:08:24.320
- Very cool, nice.


00:08:24.320 --> 00:08:25.480
- Indeed.


00:08:25.480 --> 00:08:27.560
So the next one I wanna talk about


00:08:27.560 --> 00:08:29.840
is something we haven't covered a ton on the show,


00:08:29.840 --> 00:08:32.780
but I think has some interesting shadows


00:08:32.780 --> 00:08:34.660
and parallels with Python itself,


00:08:34.660 --> 00:08:39.660
and that is some governance around Django itself.


00:08:39.660 --> 00:08:41.260
So there's an article called


00:08:41.260 --> 00:08:44.620
Django Core No More by James Bennett.


00:08:44.620 --> 00:08:47.340
So this is not core as in like some library,


00:08:47.340 --> 00:08:49.780
this is core as in core developers.


00:08:49.780 --> 00:08:52.300
So Django's been around for a long time,


00:08:52.300 --> 00:08:54.420
2005 onward I believe,


00:08:54.420 --> 00:08:57.460
and it's obviously a very polished


00:08:57.460 --> 00:08:59.180
professional web framework,


00:08:59.180 --> 00:09:01.060
one of the most, if not the most,


00:09:01.060 --> 00:09:02.740
it's in there fighting with Flask,


00:09:02.740 --> 00:09:06.240
for that title, but one of the most popular Python frameworks,


00:09:06.240 --> 00:09:08.640
lots of amazing apps are built on it.


00:09:08.640 --> 00:09:10.680
But what they're finding is, say, actually,


00:09:10.680 --> 00:09:14.620
Django as a open source project is not


00:09:14.620 --> 00:09:17.040
recruiting enough active contributors.


00:09:17.040 --> 00:09:18.160
That's surprising, right?


00:09:18.160 --> 00:09:18.880
- Yeah, it is.


00:09:18.880 --> 00:09:21.880
- They say one of the reasons they think this is not


00:09:21.880 --> 00:09:25.440
working so well is they feel like there's


00:09:25.440 --> 00:09:27.760
these people called Django core developers,


00:09:27.760 --> 00:09:29.080
and then there's everyone else.


00:09:29.080 --> 00:09:30.840
And if you're not a core developer,


00:09:30.840 --> 00:09:35.840
well, you probably don't have any business messing around with Django or submitting any fixes or anything.


00:09:35.840 --> 00:09:38.840
Maybe you'll tell a core developer and they can go do it, right?


00:09:38.840 --> 00:09:41.840
But not do it themselves.


00:09:41.840 --> 00:09:48.840
So the proposal in summary is more or less to abolish this concept of a core developer altogether.


00:09:48.840 --> 00:09:51.840
So that when people come to look at Django, they don't go,


00:09:51.840 --> 00:09:56.840
"Oh, there's this special group of selected core developers and then everyone else."


00:09:56.840 --> 00:10:00.240
So instead, what they found was in practice,


00:10:00.240 --> 00:10:02.720
these core developers all had this straight commit bit.


00:10:02.720 --> 00:10:05.040
They could just commit straight to the repo


00:10:05.040 --> 00:10:07.320
and just have stuff happen, but no one was doing that.


00:10:07.320 --> 00:10:09.640
They were all creating pull requests


00:10:09.640 --> 00:10:12.720
and having a conversation around their changes anyway.


00:10:12.720 --> 00:10:15.040
And that's how somebody would make a contribution


00:10:15.040 --> 00:10:16.760
to Django from the outside.


00:10:16.760 --> 00:10:21.720
So they said, let's have a more democrat, not democratic,


00:10:21.720 --> 00:10:25.920
more spread out, even way of talking about people


00:10:25.920 --> 00:10:30.120
contribute to Django so that people are more likely to come and make contributions.


00:10:30.120 --> 00:10:33.560
>> Okay. So they'll still have some sort of process for


00:10:33.560 --> 00:10:36.880
deciding on which pull requests to do, right?


00:10:36.880 --> 00:10:39.640
>> Yeah. So now they're going to have two different groups


00:10:39.640 --> 00:10:41.760
of people who are formalizing the stuff.


00:10:41.760 --> 00:10:44.840
There's mergers and releasers who would


00:10:44.840 --> 00:10:49.520
respectively merge PRs and then package it up and release it.


00:10:49.520 --> 00:10:54.000
So these are more like bureaucratic roles like finalizing it.


00:10:54.000 --> 00:10:57.760
But the idea is to have PRs and open discussions around issues and PRs.


00:10:57.760 --> 00:11:00.720
And then these folks kind of say, "Yeah, okay, we're all good with this."


00:11:00.720 --> 00:11:01.200
Interesting.


00:11:01.200 --> 00:11:01.600
Yeah.


00:11:01.600 --> 00:11:01.840
Yeah.


00:11:01.840 --> 00:11:06.480
So it's a little bit of a parallel of Guido stepping back and saying, "Okay, everybody,


00:11:06.480 --> 00:11:11.280
you guys got to spread out some of this decision making and not just leave it all on my back."


00:11:11.280 --> 00:11:12.400
Yeah, I like what they're doing.


00:11:12.400 --> 00:11:17.600
I also like doing a lot of this stuff in the open and having the governance models be


00:11:17.600 --> 00:11:20.960
sort of an open discussion so that different groups can learn from it.


00:11:20.960 --> 00:11:27.160
So, like for instance, I was listening to your interview about SANIC, and they were


00:11:27.160 --> 00:11:33.280
talking about basically still figuring out how to govern the SANIC project.


00:11:33.280 --> 00:11:37.880
And so, doing all this in the open and having everybody be able to give feedback and stuff


00:11:37.880 --> 00:11:38.880
is cool.


00:11:38.880 --> 00:11:39.880
Yeah, it's definitely cool.


00:11:39.880 --> 00:11:42.360
Now, I don't believe this is the way that things are.


00:11:42.360 --> 00:11:47.000
This is a proposal for the way that James and folks wants this to be.


00:11:47.000 --> 00:11:48.680
So, kind of take it in that sense, right?


00:11:48.680 --> 00:11:50.900
It is not an official decision as far as I know,


00:11:50.900 --> 00:11:52.120
but this is the proposal.


00:11:52.120 --> 00:11:52.960
- Okay, neat.


00:11:52.960 --> 00:11:53.780
- Yeah, cool.


00:11:53.780 --> 00:11:55.160
Speaking of Django, what'd you got?


00:11:55.160 --> 00:11:56.380
What's next?


00:11:56.380 --> 00:11:58.280
- Yeah, I wanted to shoo this in.


00:11:58.280 --> 00:12:01.160
I think somebody mentioned this on Twitter.


00:12:01.160 --> 00:12:03.400
Again, I can't remember who, sorry,


00:12:03.400 --> 00:12:06.460
but thanks for everybody for giving us tips on things.


00:12:06.460 --> 00:12:08.640
There is a Django template


00:12:08.640 --> 00:12:11.740
that is called the WeMake Django template.


00:12:11.740 --> 00:12:14.400
I think, actually, I don't really know who WeMake is.


00:12:14.400 --> 00:12:16.640
I think WeMake is a group that does


00:12:16.640 --> 00:12:18.680
like customer websites and stuff.


00:12:18.680 --> 00:12:20.120
- Let me just say really quick,


00:12:20.120 --> 00:12:22.300
this is not templates as in Django templates


00:12:22.300 --> 00:12:23.880
or Jinja 2 or Chameleon.


00:12:23.880 --> 00:12:27.040
This is like I'm making a project from scratch.


00:12:27.040 --> 00:12:28.840
Like it generates the project structure,


00:12:28.840 --> 00:12:31.520
like a project template, not a web HTML template, right?


00:12:31.520 --> 00:12:32.360
- Right. - Okay.


00:12:32.360 --> 00:12:33.800
- I guess it should be called a cookie cutter


00:12:33.800 --> 00:12:36.200
because it is based on cookie cutter.


00:12:36.200 --> 00:12:37.040
- More or less.


00:12:37.040 --> 00:12:38.840
- Yeah, so it's based on cookie cutter.


00:12:38.840 --> 00:12:40.500
So you can use, if you,


00:12:40.500 --> 00:12:42.440
I'm sure everybody's familiar with cookie cutter.


00:12:42.440 --> 00:12:44.320
You use it to start a project


00:12:44.320 --> 00:12:46.480
and it pulls stuff off of GitHub


00:12:46.480 --> 00:12:48.720
and initializes your project


00:12:48.720 --> 00:12:50.880
and then asks you a bunch of questions.


00:12:50.880 --> 00:12:52.920
But it has a whole bunch of really cool things


00:12:52.920 --> 00:12:55.880
that you might not actually think to do right away


00:12:55.880 --> 00:12:57.600
in a Django project.


00:12:57.600 --> 00:13:00.320
They're saying that it's more for larger projects,


00:13:00.320 --> 00:13:02.640
but I'm sure that a lot of these are,


00:13:02.640 --> 00:13:04.200
you could do them for smaller projects too,


00:13:04.200 --> 00:13:08.680
but it uses a system called Dependabot,


00:13:08.680 --> 00:13:10.620
which I hadn't heard of before.


00:13:10.620 --> 00:13:12.220
But it's one of those systems


00:13:12.220 --> 00:13:14.380
to keep your dependencies up to date.


00:13:14.380 --> 00:13:16.600
It's got poetry for package management,


00:13:16.600 --> 00:13:18.080
which is kind of neat.


00:13:18.080 --> 00:13:20.680
pytest for testing, of course, that's awesome.


00:13:20.680 --> 00:13:22.160
One of the reasons why I think this is neat


00:13:22.160 --> 00:13:24.740
because Django doesn't do pytest automatically,


00:13:24.740 --> 00:13:26.860
so having somebody initialize that


00:13:26.860 --> 00:13:29.040
and set it up for you is cool.


00:13:29.040 --> 00:13:31.040
Including things, and then there's some of the other things


00:13:31.040 --> 00:13:33.580
are mypy for static typing,


00:13:33.580 --> 00:13:35.360
pre-commit hooks already set up,


00:13:35.360 --> 00:13:38.320
Flake 8 and an extension to the style guide


00:13:38.320 --> 00:13:40.900
already built in, so you can use that as a template


00:13:40.900 --> 00:13:43.100
to use your own style guide.


00:13:43.100 --> 00:13:44.920
and a whole bunch of other cool things


00:13:44.920 --> 00:13:47.680
like Docker integration already,


00:13:47.680 --> 00:13:50.120
GitLab CI for building and testing.


00:13:50.120 --> 00:13:51.840
And then something that I hadn't heard of before,


00:13:51.840 --> 00:13:54.040
which is CADI, which is,


00:13:54.040 --> 00:13:56.600
I'm gonna probably get this wrong,


00:13:56.600 --> 00:13:58.200
but I think it's something to do


00:13:58.200 --> 00:14:01.720
with secure web sockets or something, I don't know.


00:14:01.720 --> 00:14:04.160
HTTPS, whatever that is.


00:14:04.160 --> 00:14:06.360
(laughing)


00:14:06.360 --> 00:14:07.200
- Sounds good.


00:14:07.200 --> 00:14:08.040
Yeah, I don't know what CADI is either.


00:14:08.040 --> 00:14:11.320
I should check it out, but it looks pretty cool.


00:14:11.320 --> 00:14:14.440
And yeah, I think if you're creating Django projects,


00:14:14.440 --> 00:14:16.480
I think, or any form of web project,


00:14:16.480 --> 00:14:18.240
there's some for Flask, there's some for Pyramid,


00:14:18.240 --> 00:14:19.280
there's some for Django.


00:14:19.280 --> 00:14:22.200
I think looking at these more full featured,


00:14:22.200 --> 00:14:25.680
more structured starter cookie cutters are really valuable.


00:14:25.680 --> 00:14:27.700
And I think actually the biggest value


00:14:27.700 --> 00:14:30.000
comes to people using Flask, by the way.


00:14:30.000 --> 00:14:33.520
The reason I say that is Django already has a structure.


00:14:33.520 --> 00:14:34.360
There's a lot of structure,


00:14:34.360 --> 00:14:35.840
like static files go here, whatever.


00:14:35.840 --> 00:14:38.200
A lot of stuff is set up when you create a site with Django.


00:14:38.200 --> 00:14:39.620
Same thing with Pyramid,


00:14:39.620 --> 00:14:41.460
you already use cookie cutter templates,


00:14:41.460 --> 00:14:43.500
but Flask is like, well, you create a file


00:14:43.500 --> 00:14:45.220
and then you're on your own.


00:14:45.220 --> 00:14:47.980
You know, so like all that structure is like


00:14:47.980 --> 00:14:49.280
not anywhere to be seen,


00:14:49.280 --> 00:14:50.580
but it's still going to have to exist


00:14:50.580 --> 00:14:51.860
on real apps eventually.


00:14:51.860 --> 00:14:53.980
And so having some projects that you can follow,


00:14:53.980 --> 00:14:54.820
I think it's really great.


00:14:54.820 --> 00:14:57.040
- Yeah, so that's a good segue,


00:14:57.040 --> 00:14:58.220
not a segue into the next one,


00:14:58.220 --> 00:15:00.900
but I would love it if people would share with us


00:15:00.900 --> 00:15:05.900
some of their favorite Flask cookie cutter starter projects.


00:15:05.900 --> 00:15:06.740
- Yeah, for sure.


00:15:06.740 --> 00:15:07.560
We can give them a little shout out


00:15:07.560 --> 00:15:09.600
in the extra section or something.


00:15:09.600 --> 00:15:13.200
So you want to make it just a straight three of a kind for Django in a row here?


00:15:13.200 --> 00:15:14.440
Let's just wrap it up with Django.


00:15:14.440 --> 00:15:15.800
Yeah, we're already here.


00:15:15.800 --> 00:15:21.280
So you've gone and you've created your project with one of these Django templates.


00:15:21.280 --> 00:15:25.440
You've got it working, you've done some testing, maybe something wasn't working,


00:15:25.440 --> 00:15:27.760
so you flipped it into debug mode, that's cool.


00:15:27.760 --> 00:15:29.320
Maybe set some other stuff.


00:15:29.320 --> 00:15:31.400
And then you're like, all right, ready to push it out.


00:15:31.400 --> 00:15:34.120
It has this template you told me about here.


00:15:34.120 --> 00:15:39.160
It already has integrated deploy steps into the CI build.


00:15:39.160 --> 00:15:42.280
So that's pretty cool, you just type deploy and boom, off you go.


00:15:42.280 --> 00:15:46.720
And then a little bit later, something starts happening to your AWS account or


00:15:46.720 --> 00:15:50.680
your database records that is not so good.


00:15:50.680 --> 00:15:54.160
That might be because you left the debug mode or


00:15:54.160 --> 00:15:58.440
some other setting on that exposes all sorts of information.


00:15:58.440 --> 00:16:02.200
So there are ways to run Django that is helpful for development, but


00:16:02.200 --> 00:16:06.440
then you obviously don't want to share that information with everyone else.


00:16:06.440 --> 00:16:09.280
So there's this project called Django Hunter,


00:16:09.280 --> 00:16:11.860
and it looks for insecure djangos.


00:16:11.860 --> 00:16:14.300
So if you deploy your app, you can point this thing at it


00:16:14.300 --> 00:16:17.840
and ask it, what's the status of this thing here?


00:16:17.840 --> 00:16:20.620
So the person who wrote it said, why did we create this?


00:16:20.620 --> 00:16:23.860
Well, it's a tool to help identify incorrectly configured


00:16:23.860 --> 00:16:26.560
Django apps that are exposing sensitive information.


00:16:26.560 --> 00:16:31.560
For example, in March 2018, there was 28,165,


00:16:31.560 --> 00:16:32.920
it's a weird way to write it,


00:16:32.920 --> 00:16:35.560
it says 28,165,000 Django servers.


00:16:35.560 --> 00:16:37.240
Is that 28 million?


00:16:37.240 --> 00:16:39.320
I'm just going to say there's a lot of Django servers


00:16:39.320 --> 00:16:40.880
that are exposed on the internet,


00:16:40.880 --> 00:16:43.140
showing off things like their AWS keys,


00:16:43.140 --> 00:16:46.640
their database passwords and connection strings, et cetera.


00:16:46.640 --> 00:16:47.660
That you don't want.


00:16:47.660 --> 00:16:50.720
So there's this cool tool called Django Hunter,


00:16:50.720 --> 00:16:53.120
and you can basically point it at your projects,


00:16:53.120 --> 00:16:55.360
and it will tell you if something's going wrong with them.


00:16:55.360 --> 00:16:56.200
- That's cool.


00:16:56.200 --> 00:16:57.400
I love projects like this,


00:16:57.400 --> 00:17:01.000
because Python's so easy to get started on things.


00:17:01.000 --> 00:17:03.640
You can, I guess, jump into the deep end


00:17:03.640 --> 00:17:05.780
before you're quite ready and having tools like this


00:17:05.780 --> 00:17:07.940
to help you jump in safely with it.


00:17:07.940 --> 00:17:09.020
- Yeah, absolutely.


00:17:09.020 --> 00:17:10.700
So, you know, it's easy for people to say,


00:17:10.700 --> 00:17:12.340
well, that was sure stupid, you got hacked


00:17:12.340 --> 00:17:16.420
because you didn't, you know, set the debug mode to false.


00:17:16.420 --> 00:17:19.020
Well, if you're struggling to figure out, like,


00:17:19.020 --> 00:17:20.340
what does deployment mean?


00:17:20.340 --> 00:17:22.340
Like, I can't even barely get this thing


00:17:22.340 --> 00:17:24.100
to run on a web server,


00:17:24.100 --> 00:17:25.600
and I'm trying to understand Linux


00:17:25.600 --> 00:17:27.500
and databases and firewalls.


00:17:27.500 --> 00:17:30.620
Like, it's pretty easy to overlook that kind of stuff


00:17:30.620 --> 00:17:34.340
when you're like struggling to just make the thing work.


00:17:34.340 --> 00:17:35.980
There's a lot of these settings that like,


00:17:35.980 --> 00:17:37.260
you're like, I just wanna test this out


00:17:37.260 --> 00:17:38.100
and show it to somebody.


00:17:38.100 --> 00:17:41.540
I'm not, I haven't been running Django for 10 years.


00:17:41.540 --> 00:17:42.980
So there was actually a conversation


00:17:42.980 --> 00:17:46.300
either on Twitter or on Reddit about this.


00:17:46.300 --> 00:17:48.460
And somebody said, yeah, this is great.


00:17:48.460 --> 00:17:50.100
Like this guy jumped in and says,


00:17:50.100 --> 00:17:54.260
hey, I probably one of those 20,000 servers


00:17:54.260 --> 00:17:57.340
that are among my early projects that's on Heroku.


00:17:57.340 --> 00:17:59.620
I accidentally exposed my AWS password


00:17:59.620 --> 00:18:01.680
and all hell broke loose.


00:18:01.680 --> 00:18:02.920
The problem is as a beginner,


00:18:02.920 --> 00:18:05.500
it's not obvious how to separate development


00:18:05.500 --> 00:18:07.160
and production settings and keep that stuff


00:18:07.160 --> 00:18:09.680
out of your public repo, of course.


00:18:09.680 --> 00:18:12.020
Yeah, the other thought was somebody said,


00:18:12.020 --> 00:18:14.420
there's a reasonable argument to be made


00:18:14.420 --> 00:18:17.740
that debug should be set to false by default.


00:18:17.740 --> 00:18:19.520
If you turn it on, then maybe you know about it


00:18:19.520 --> 00:18:20.360
so you know to turn it off.


00:18:20.360 --> 00:18:22.800
But if you never turn it on, how do you know?


00:18:22.800 --> 00:18:24.160
There's a setting, there's a huge comment


00:18:24.160 --> 00:18:25.340
right by where the setting is.


00:18:25.340 --> 00:18:27.320
It says, never put this in production


00:18:27.320 --> 00:18:28.320
with debug equals true.


00:18:28.320 --> 00:18:30.880
but it's like in a settings file you might not ever open.


00:18:30.880 --> 00:18:32.560
So if you don't look at it, that's bad.


00:18:32.560 --> 00:18:35.560
So anyway, there's some interesting maybe thoughts


00:18:35.560 --> 00:18:38.440
around what to do to Django to make it better,


00:18:38.440 --> 00:18:41.040
but certainly having a tool to tell you


00:18:41.040 --> 00:18:43.280
if something is wrong is good.


00:18:43.280 --> 00:18:46.020
All right, so Django Hunters for those Django developers,


00:18:46.020 --> 00:18:50.480
or DevOps running Django, people running Django servers.


00:18:50.480 --> 00:18:52.640
(laughing)


00:18:52.640 --> 00:18:54.580
That was good, and that was all of our items.


00:18:54.580 --> 00:18:57.480
I wanna first give a quick shout out to you, Brian,


00:18:57.480 --> 00:18:58.320
in our extra section.


00:18:58.320 --> 00:18:59.760
Thanks for having me on your show.


00:18:59.760 --> 00:19:02.040
And I blogged about that, so I put a link to the blog.


00:19:02.040 --> 00:19:03.440
But we had a great time talking about


00:19:03.440 --> 00:19:06.000
what it takes to be a good podcast guest


00:19:06.000 --> 00:19:07.320
and how to prepare for that,


00:19:07.320 --> 00:19:09.880
which is more broad than just podcast guests, I guess.


00:19:09.880 --> 00:19:11.360
- Yeah, and we've actually already gotten


00:19:11.360 --> 00:19:14.080
a whole bunch of positive feedback on that episode,


00:19:14.080 --> 00:19:15.240
so I'm glad we did it.


00:19:15.240 --> 00:19:16.080
- Yeah, great.


00:19:16.080 --> 00:19:17.040
- Anything else extra?


00:19:17.040 --> 00:19:20.320
- You know, I was just thinking Christmas is coming up.


00:19:20.320 --> 00:19:24.240
Just, you know, at least in the United States,


00:19:24.240 --> 00:19:27.400
there's this weird tradition, but it is a thing.


00:19:27.400 --> 00:19:31.360
where in shopping malls, a Santa will be hired,


00:19:31.360 --> 00:19:33.600
a Santa Claus, and will sit there,


00:19:33.600 --> 00:19:35.460
and there's typically photographers around,


00:19:35.460 --> 00:19:37.840
and parents will bring their children to the Santa,


00:19:37.840 --> 00:19:40.920
and the purpose is the child sits on the lap of the Santa,


00:19:40.920 --> 00:19:43.360
asks for something, probably totally unreasonable,


00:19:43.360 --> 00:19:46.280
and they take pictures of it, of the whole situation,


00:19:46.280 --> 00:19:49.200
and hopefully the kid doesn't cry and get afraid of Santa.


00:19:49.200 --> 00:19:51.720
So, you have a good version of this, right?


00:19:51.720 --> 00:19:55.520
- Yeah, I'm gonna read it out loud because it's a comic,


00:19:55.520 --> 00:19:57.400
But it's hilarious.


00:19:57.400 --> 00:20:01.400
And it was posted by ChangeLog on Twitter.


00:20:01.400 --> 00:20:03.600
This little girl is sitting on Santa's lap,


00:20:03.600 --> 00:20:06.300
and she says, "For Christmas, I want a dragon."


00:20:06.300 --> 00:20:08.960
Of course, Santa says, "Be realistic."


00:20:08.960 --> 00:20:11.280
Okay, I want enough donations to support


00:20:11.280 --> 00:20:13.720
my open source work with a response of,


00:20:13.720 --> 00:20:15.240
"What color do you want your dragon?"


00:20:15.240 --> 00:20:16.320
(laughing)


00:20:16.320 --> 00:20:17.760
- That's so awesome.


00:20:17.760 --> 00:20:18.600
I really love it.


00:20:18.600 --> 00:20:21.160
It's sad that it's true, but yeah, it's pretty awesome.


00:20:21.160 --> 00:20:22.000
Be realistic.


00:20:22.000 --> 00:20:23.960
What color do you want your dragon to be?


00:20:23.960 --> 00:20:25.920
- All right, well, I thought I'd throw one in here


00:20:25.920 --> 00:20:27.200
for you as well.


00:20:27.200 --> 00:20:29.680
It has nothing to do with any seasonal stuff,


00:20:29.680 --> 00:20:31.680
so this is good year round.


00:20:31.680 --> 00:20:33.920
Has more to do with race conditions, deadlocks,


00:20:33.920 --> 00:20:36.560
and that sort of weird timing problems


00:20:36.560 --> 00:20:38.240
you run into with multithreading, yeah?


00:20:38.240 --> 00:20:39.520
So, you've heard the joke,


00:20:39.520 --> 00:20:41.240
why did the chicken cross the road,


00:20:41.240 --> 00:20:42.760
which has all sorts of weird answers,


00:20:42.760 --> 00:20:44.900
but sometimes just to get to the other side, right?


00:20:44.900 --> 00:20:47.160
Why did the multithreaded chicken cross the road?


00:20:47.160 --> 00:20:48.000
- I don't know, why?


00:20:48.000 --> 00:20:51.040
- Road the side get to the other of the two.


00:20:51.040 --> 00:20:51.880
Ask me again.


00:20:51.880 --> 00:20:54.080
- So why did the multi-throated chicken cross the road?


00:20:54.080 --> 00:20:56.340
- The side of to the road other get.


00:20:56.340 --> 00:20:57.840
(laughing)


00:20:57.840 --> 00:21:00.800
There's always ground love, it's always different.


00:21:00.800 --> 00:21:01.640
- I love it.


00:21:01.640 --> 00:21:03.840
- That concludes the joke section, I suppose.


00:21:03.840 --> 00:21:06.200
- Yeah, so yeah, we'd also like,


00:21:06.200 --> 00:21:08.200
we're both sort of silly people,


00:21:08.200 --> 00:21:10.480
and we'd like to have some feedback as well


00:21:10.480 --> 00:21:12.280
from people to see whether or not


00:21:12.280 --> 00:21:15.320
we should keep a joke or two in the episodes,


00:21:15.320 --> 00:21:18.160
or actually just whether or not we should.


00:21:18.160 --> 00:21:19.000
So that'd be great.


00:21:19.000 --> 00:21:20.880
- Yeah, it sounds good, and if you have good jokes.


00:21:20.880 --> 00:21:21.880
Yeah, send them.


00:21:21.880 --> 00:21:22.880
Send them.


00:21:22.880 --> 00:21:23.880
All right.


00:21:23.880 --> 00:21:25.680
Well, Brian, thank you for doing this and everyone, thank you for listening.


00:21:25.680 --> 00:21:26.680
Thank you.


00:21:26.680 --> 00:21:27.680
Bye.


00:21:27.680 --> 00:21:28.680
Thank you for listening to Python Bytes.


00:21:28.680 --> 00:21:31.160
Follow the show on Twitter via @pythonbytes.


00:21:31.160 --> 00:21:34.280
That's Python Bytes as in B-Y-T-E-S.


00:21:34.280 --> 00:21:37.580
And get the full show notes at pythonbytes.fm.


00:21:37.580 --> 00:21:41.280
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:21:41.280 --> 00:21:42.280
way.


00:21:42.280 --> 00:21:44.800
We're always on the lookout for sharing something cool.


00:21:44.800 --> 00:21:48.160
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:21:48.160 --> 00:21:51.200
Thank you for listening and sharing this podcast with your friends and colleagues.

