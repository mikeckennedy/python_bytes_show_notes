WEBVTT

00:00:00.001 --> 00:00:05.420
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.420 --> 00:00:10.740
This is episode 108, recorded December 10th, 2018.

00:00:10.740 --> 00:00:12.000
I'm Michael Kennedy.

00:00:12.000 --> 00:00:12.800
And I'm Brian Okken.

00:00:12.800 --> 00:00:15.460
And this episode is brought to you by DigitalOcean.

00:00:15.460 --> 00:00:17.880
Check them out at pythonbytes.fm/DigitalOcean.

00:00:17.880 --> 00:00:19.200
Tell you more about that later.

00:00:19.200 --> 00:00:20.800
Right now, how are you doing, Brian?

00:00:20.800 --> 00:00:21.660
I'm doing great.

00:00:21.660 --> 00:00:21.920
Yeah?

00:00:21.920 --> 00:00:26.600
Do you find that sometimes you end up with messy data?

00:00:26.600 --> 00:00:28.500
You kind of clean it up.

00:00:28.500 --> 00:00:29.960
You're like, ah, gosh, not again.

00:00:30.200 --> 00:00:34.540
Yeah, I've got empty spots and bad stuff.

00:00:34.540 --> 00:00:36.040
Yeah, anyway, data.

00:00:36.040 --> 00:00:38.420
Yeah, somebody spilled a string where a number was supposed to go.

00:00:38.420 --> 00:00:39.380
Yeah.

00:00:39.380 --> 00:00:40.520
Maybe there is something you can do.

00:00:40.520 --> 00:00:41.760
Yeah, you can get a janitor.

00:00:41.760 --> 00:00:42.960
A Pyjanitor.

00:00:42.960 --> 00:00:44.380
Clean up your janitor.

00:00:44.380 --> 00:00:47.400
Yeah, first project we're going to talk about is Pyjanitor.

00:00:47.400 --> 00:00:49.640
It's a package for cleaning up your data.

00:00:49.640 --> 00:00:58.220
And this has a history in, originally it was a port of an R package called janitor, but now it's grown from that.

00:00:58.660 --> 00:01:06.440
So it's both for cleanliness of data, but also just a really clean interface and convenient routines.

00:01:06.440 --> 00:01:12.460
So it's kind of for anybody working with data that can have problems with it.

00:01:12.760 --> 00:01:15.380
There's a whole bunch of stuff involved with this.

00:01:15.380 --> 00:01:23.120
So some of the functionality includes cleaning up column names, which I'm not sure why you would have bad column names in the first place.

00:01:23.220 --> 00:01:24.820
But if you're pulling it from somewhere else.

00:01:24.820 --> 00:01:29.040
Yeah, like a lot of times people load CSVs into Panda data frames and things like that, I think.

00:01:29.040 --> 00:01:29.780
Yeah, okay.

00:01:29.780 --> 00:01:30.720
So cleaning those out.

00:01:30.720 --> 00:01:34.840
Removing empty rows and columns and identifying duplicate entries.

00:01:35.540 --> 00:01:38.740
There's some stuff that can just happen with data like that.

00:01:38.740 --> 00:01:51.440
But it has a whole bunch of other cool things like telling your system how to deal with empty values and expanding columns and coalescing multiple columns into a single column and a whole bunch of stuff like that.

00:01:51.440 --> 00:01:54.100
That's part of it is dealing with messy data.

00:01:54.260 --> 00:01:56.360
But the other thing is to try to keep your code clean.

00:01:56.360 --> 00:02:02.840
So on the other side of it, it has more of a functional programming style of using it.

00:02:02.840 --> 00:02:13.920
And I'm not going to try to really talk about this too much, but we have a code snippet in our show notes where it shows kind of how you would deal with data frames and doing things like dropping columns and stuff within Pandas.

00:02:13.920 --> 00:02:17.540
And then how that would look in PyJanitor code.

00:02:17.540 --> 00:02:19.200
And it just makes it a lot.

00:02:19.200 --> 00:02:21.040
I think it's more maintainable.

00:02:21.040 --> 00:02:21.480
Sneak?

00:02:21.480 --> 00:02:22.780
Yeah, I really like this.

00:02:22.860 --> 00:02:24.500
It looks super handy.

00:02:24.500 --> 00:02:28.860
It's like a set of utilities on top of Pandas, which is great.

00:02:28.860 --> 00:02:31.640
And I like how they describe this feature you just talked about.

00:02:31.640 --> 00:02:40.580
It's a cleaner, method-changing, verb-based API for common Pandas routines, otherwise known as a fluent interface.

00:02:40.580 --> 00:02:42.840
If you're looking for one word there.

00:02:42.840 --> 00:02:44.040
But that's great.

00:02:44.040 --> 00:02:46.920
So yeah, I think it's a really nice way to work with it.

00:02:46.920 --> 00:02:48.080
It looks really approachable.

00:02:48.080 --> 00:02:49.580
And I do like the fluent interface.

00:02:49.580 --> 00:02:52.320
I really, really wish more things like that.

00:02:52.320 --> 00:02:53.820
Operated that way.

00:02:53.820 --> 00:02:54.200
Yeah.

00:02:54.200 --> 00:03:01.780
For instance, a lot of the functions return data frames so that you can just keep on in a new function to do multiple stages of a workflow.

00:03:01.780 --> 00:03:03.680
Now, this is all around Pandas.

00:03:03.680 --> 00:03:07.280
So if you're doing not just regular data cleaning, but you've got to be working with Pandas.

00:03:07.280 --> 00:03:09.720
But I think a lot of people who do that kind of work probably are.

00:03:09.720 --> 00:03:10.680
So it seems really helpful.

00:03:10.680 --> 00:03:10.960
Yeah.

00:03:11.040 --> 00:03:13.540
So would you consider yourself an expert at Python?

00:03:13.540 --> 00:03:15.320
No.

00:03:15.320 --> 00:03:17.320
I know enough to know what I don't know.

00:03:17.320 --> 00:03:17.560
Yeah.

00:03:17.560 --> 00:03:22.820
I think this is one of the things where it's like you're never really – like there's always stuff that you don't know.

00:03:22.820 --> 00:03:24.960
So you don't ever necessarily feel like an expert.

00:03:24.960 --> 00:03:31.060
Well, especially in this field when we're like – I'm always researching stuff that know more than me about cool places.

00:03:31.060 --> 00:03:32.720
But all in all, I think I am.

00:03:32.720 --> 00:03:32.940
Yeah.

00:03:32.940 --> 00:03:33.780
I would say that you are.

00:03:33.780 --> 00:03:38.460
So I think there's a really interesting presentation done by James Powell.

00:03:38.460 --> 00:03:40.640
And this was recommended to us by one of our listeners.

00:03:40.640 --> 00:03:43.240
I just don't remember who, so I can't give him credit.

00:03:43.240 --> 00:03:44.780
But thank you for whoever sent this in.

00:03:45.200 --> 00:03:51.040
And this is a presentation at PyData 2017 by James Powell.

00:03:51.040 --> 00:03:52.340
And it's a YouTube video.

00:03:52.340 --> 00:03:57.260
And it's not just a little light, you know, here's my quick rundown of the five things.

00:03:57.260 --> 00:04:02.200
It's like an hour and a half sort of deep dive into what it takes to be an expert.

00:04:02.200 --> 00:04:08.300
So basically James says, hey, look, it's pretty easy to be competent with Python, right?

00:04:08.300 --> 00:04:09.780
You can learn a couple of things.

00:04:09.780 --> 00:04:13.180
And whatever other programming language you use, you can kind of like make Python do that.

00:04:13.760 --> 00:04:21.160
But to really understand it properly and take, you know, full advantage of it, write Pythonic code, things like that is a whole lot harder.

00:04:21.160 --> 00:04:24.900
So he runs through some of the things that he thinks people should know.

00:04:24.900 --> 00:04:33.500
And it's really focused at the maybe advanced beginner, early intermediate type of developer who can do stuff with Python,

00:04:33.500 --> 00:04:40.400
but maybe stopped learning about the language and the features when they got whatever they're trying to make work, work.

00:04:40.400 --> 00:04:40.980
Oh, good.

00:04:40.980 --> 00:04:41.220
Yeah.

00:04:41.280 --> 00:04:49.000
So it covers things like the Python data model, you know, otherwise known as the magic methods or dunder methods, meta classes, a bunch of other stuff.

00:04:49.000 --> 00:04:50.800
And it's really nicely done.

00:04:50.800 --> 00:04:55.880
You know, I'm not a fan of presentations that are like, hey, here's seven slides and me talking about it.

00:04:55.880 --> 00:04:56.360
Like, woohoo.

00:04:56.360 --> 00:04:59.800
You know, he just fires up an editor and says, I have no slides.

00:04:59.800 --> 00:05:01.700
The editor is going to be the presentation.

00:05:01.700 --> 00:05:06.580
Let's start talking about these things and just does it from scratch, which I think is a real genuine way to do it.

00:05:06.580 --> 00:05:07.460
So well done.

00:05:07.460 --> 00:05:08.700
I'm going to have to check that out myself.

00:05:08.700 --> 00:05:09.060
Yeah.

00:05:09.060 --> 00:05:09.360
Yeah.

00:05:09.360 --> 00:05:10.200
I've watched some of it.

00:05:10.200 --> 00:05:11.200
I haven't watched all of it.

00:05:11.200 --> 00:05:15.520
I've only watched like maybe half, but definitely watch enough to recommend it to folks.

00:05:15.520 --> 00:05:17.920
If you feel like you're in the stage, like, am I an expert?

00:05:17.920 --> 00:05:18.460
I'm not sure.

00:05:18.460 --> 00:05:19.340
Watch this.

00:05:19.340 --> 00:05:24.120
And, you know, you'll probably get some things reinforced and others maybe feel like, yeah, I knew that.

00:05:24.120 --> 00:05:24.520
That's great.

00:05:24.520 --> 00:05:24.860
Yeah.

00:05:24.960 --> 00:05:25.160
Yeah.

00:05:25.160 --> 00:05:26.200
I would even say it was awesome.

00:05:26.200 --> 00:05:27.640
It's very awesome.

00:05:27.640 --> 00:05:33.400
There's a lot of awesomeness in Python and there's quite a few.

00:05:33.400 --> 00:05:36.380
On GitHub, there's quite a few different awesome lists.

00:05:36.380 --> 00:05:40.320
And so that's what I want to talk about today is another awesome list.

00:05:40.320 --> 00:05:43.240
And this one is called the isosceles triangles.

00:05:43.240 --> 00:05:45.900
No, it's called awesome Python applications.

00:05:45.900 --> 00:05:53.020
It's kind of just a way for you to try to highlight a bunch of different cool applications.

00:05:53.020 --> 00:05:59.080
Because if you're looking for packages to base your own project on, you can look at PyPI.

00:05:59.080 --> 00:06:03.620
But that's not as easy to do with applications because they don't exist in PyPI.

00:06:03.620 --> 00:06:06.840
So that's why this has been created.

00:06:06.840 --> 00:06:09.160
There's quite a few categories already.

00:06:09.160 --> 00:06:12.220
And Mahmoud Hashemi has started it.

00:06:12.220 --> 00:06:17.360
And he wants people to help him out and fill this in because it's kind of hard to find applications sometimes.

00:06:17.360 --> 00:06:23.220
So these are all applications written in Python that are open source that you can look at how they're doing things.

00:06:23.220 --> 00:06:23.480
Yeah.

00:06:23.480 --> 00:06:29.160
I really like this because so often people say, well, I'd like to use Python for this project.

00:06:29.160 --> 00:06:36.720
But to sell this to my teammates and my manager or my company, it would be great to say, well, YouTube is written in Python.

00:06:36.920 --> 00:06:41.980
And I know you think Python doesn't scale, but I'm sure we're doing less than a million requests a second.

00:06:41.980 --> 00:06:44.100
So we'll probably be okay also.

00:06:44.100 --> 00:06:48.120
Having the examples for those kinds of comparisons are really great.

00:06:48.120 --> 00:06:49.580
So this is a little bit like that.

00:06:49.580 --> 00:06:55.200
There's a bunch of stuff for like biology, you know, and like cell profilers and things like that, right?

00:06:55.360 --> 00:06:55.600
Yeah.

00:06:55.600 --> 00:07:00.980
And even like I had to look this one up, ERPs, enterprise resource planning.

00:07:00.980 --> 00:07:03.340
No, I don't need one of those, but cool.

00:07:03.340 --> 00:07:03.900
It's there.

00:07:03.900 --> 00:07:09.940
But a lot of these, one of the things I like about this is there's a lot of custom applications that people end up writing.

00:07:09.940 --> 00:07:13.820
And they know that their problem space is very specific.

00:07:14.380 --> 00:07:22.420
And instead of writing everything from scratch, you could take one of these open source projects and fork it or customize it for your own need.

00:07:22.420 --> 00:07:25.320
And that's one of the benefits of open source, of course.

00:07:25.320 --> 00:07:26.620
But good starting point.

00:07:26.620 --> 00:07:27.320
Yeah, that's awesome.

00:07:27.320 --> 00:07:28.180
I really like this.

00:07:28.180 --> 00:07:29.880
Again, well done, Mahmood.

00:07:29.880 --> 00:07:33.120
And it's just, it's cool to have these examples out there, you know?

00:07:33.120 --> 00:07:33.620
Yeah.

00:07:33.620 --> 00:07:34.800
Do you know what else is cool?

00:07:34.800 --> 00:07:35.300
I do.

00:07:35.300 --> 00:07:40.600
And if I had a cool application, I would like to put my application there in DigitalOcean.

00:07:40.600 --> 00:07:41.060
Absolutely.

00:07:41.240 --> 00:07:45.220
So DigitalOcean is sponsoring the show.

00:07:45.220 --> 00:07:49.480
They've been sponsoring most episodes of Python Bytes, and they're big supporters of it.

00:07:49.480 --> 00:07:50.840
So thank you to them.

00:07:50.840 --> 00:07:53.960
We use them for some of our infrastructure, and it's working out great.

00:07:53.960 --> 00:07:59.720
One thing I want to highlight this time around is their early access Kubernetes project.

00:07:59.720 --> 00:08:09.840
So if you're doing anything with Docker and Kubernetes and things like that, they have some special tools for deploying and managing your containers in the cloud.

00:08:10.280 --> 00:08:13.660
So just go over to pythonbytes.fm/DigitalOcean.

00:08:13.660 --> 00:08:18.660
You can sign up there or go over to the products and just pick Kubernetes and get started on that.

00:08:18.660 --> 00:08:23.040
There's tons of other stuff that you can do as well, but the Kubernetes work they're doing is quite cool.

00:08:23.040 --> 00:08:23.560
Very cool.

00:08:23.560 --> 00:08:24.160
Nice.

00:08:24.160 --> 00:08:24.620
Indeed.

00:08:25.440 --> 00:08:34.460
So the next one I want to talk about is something we haven't covered a ton on the show, but I think has some interesting shadows and parallels with Python itself.

00:08:34.460 --> 00:08:39.140
And that is some governance around Django itself.

00:08:39.400 --> 00:08:43.920
So there's an article called Django Core No More by James Bennett.

00:08:43.920 --> 00:08:44.460
Okay.

00:08:44.580 --> 00:08:47.240
So this is not core as in like some library.

00:08:47.240 --> 00:08:48.960
This is core as in core developers.

00:08:48.960 --> 00:08:54.180
So Django has been around for a long time, 2005 onward, I believe.

00:08:54.440 --> 00:08:58.900
And it's obviously a very polished professional web framework.

00:08:58.900 --> 00:09:03.480
One of the most, if not the most, it's in there fighting with Flask for that title.

00:09:03.480 --> 00:09:08.200
But one of the most popular Python frameworks, lots of amazing apps are built on it.

00:09:08.280 --> 00:09:16.620
But what they're finding is, say, actually, Django as a open source project is not recruiting enough active contributors.

00:09:16.620 --> 00:09:17.960
That's surprising, right?

00:09:17.960 --> 00:09:18.780
Yeah, it is.

00:09:18.780 --> 00:09:28.980
They said one of the reasons they think this is not working so well is they feel like there's these people called Django core developers, and then there's everyone else.

00:09:28.980 --> 00:09:35.520
And if you're not a core developer, well, you probably don't have any business messing around with Django or submitting any fixes or anything.

00:09:35.820 --> 00:09:38.620
Maybe you'll tell a core developer and they can go do it, right?

00:09:38.620 --> 00:09:41.220
But not do it themselves.

00:09:41.220 --> 00:09:48.140
So the proposal, in summary, is more or less to abolish this concept of a core developer altogether.

00:09:48.140 --> 00:09:48.560
Okay.

00:09:48.560 --> 00:09:49.020
Okay?

00:09:49.020 --> 00:09:55.800
So that when people come to look at Django, they don't go, oh, there's this special group of like selected core developers and then everyone else.

00:09:55.800 --> 00:10:02.620
So instead, what they found was in practice, these core developers all had this straight commit bit.

00:10:02.620 --> 00:10:05.760
They could just commit straight to the repo and just have stuff happen.

00:10:05.760 --> 00:10:07.200
But no one was doing that.

00:10:07.200 --> 00:10:11.940
They were all creating pull requests and having a conversation around their changes anyway.

00:10:11.940 --> 00:10:12.460
Yeah.

00:10:12.460 --> 00:10:16.400
And that's how somebody would make a contribution to Django from the outside.

00:10:17.260 --> 00:10:29.900
So they said, let's have a more Democrat, not Democrat, more spread out even way of talking about people who contribute to Django so that people are more likely to come and make contributions.

00:10:29.900 --> 00:10:30.380
Okay.

00:10:30.480 --> 00:10:36.780
So they'll still have some sort of process for deciding on which pull requests to do, right?

00:10:36.780 --> 00:10:37.080
Yeah.

00:10:37.080 --> 00:10:41.740
So now they're going to have two different groups of people who are formalizing this stuff.

00:10:41.740 --> 00:10:49.220
There's mergers and releasers who would respectively merge PRs and then package it up and release it.

00:10:49.860 --> 00:10:54.100
So these are more like bureaucratic roles, like sort of finalizing it, right?

00:10:54.100 --> 00:10:57.800
But the idea is to have PRs and open discussions around issues and PRs.

00:10:57.800 --> 00:11:00.840
And then these folks kind of say, yeah, okay, we're all good with this.

00:11:00.840 --> 00:11:01.220
Interesting.

00:11:01.220 --> 00:11:01.540
Yeah.

00:11:01.540 --> 00:11:01.640
Okay.

00:11:01.760 --> 00:11:11.120
So it's a little bit of a parallel of Guido stepping back and saying, okay, everybody, you guys got to spread out some of this decision making and not just leave it all on my back.

00:11:11.120 --> 00:11:11.620
Yeah.

00:11:11.620 --> 00:11:12.420
I like what they're doing.

00:11:12.420 --> 00:11:20.740
I also like doing a lot of this stuff in the open and having the governance models be sort of an open discussion so that different groups can learn from it.

00:11:21.200 --> 00:11:32.420
So like, for instance, I was listening to your interview about SANIC and they were talking about basically still figuring out how to govern the SANIC project.

00:11:32.420 --> 00:11:33.180
Yeah.

00:11:33.180 --> 00:11:38.320
And so doing all this in the open and having everybody be able to give feedback and stuff is cool.

00:11:38.320 --> 00:11:39.080
Yeah, it's definitely cool.

00:11:39.080 --> 00:11:42.200
Now, I don't believe this is the way that things are.

00:11:42.200 --> 00:11:46.700
This is a proposal for the way that James and folks wants this to be.

00:11:46.700 --> 00:11:47.280
Yeah.

00:11:47.280 --> 00:11:48.680
So kind of take it in that sense, right?

00:11:48.720 --> 00:11:51.880
This is not an official decision as far as I know, but this is the proposal.

00:11:51.880 --> 00:11:52.320
Okay.

00:11:52.320 --> 00:11:52.760
Neat.

00:11:52.760 --> 00:11:53.000
Yeah.

00:11:53.000 --> 00:11:53.240
Cool.

00:11:53.240 --> 00:11:54.680
Speaking of Django, what you got?

00:11:54.680 --> 00:11:55.560
What's next?

00:11:55.560 --> 00:11:56.620
Yeah.

00:11:56.620 --> 00:11:58.000
I wanted to shoo this in.

00:11:58.000 --> 00:12:00.840
I think somebody mentioned this on Twitter.

00:12:00.840 --> 00:12:02.760
Again, I can't remember who.

00:12:02.760 --> 00:12:03.260
Sorry.

00:12:03.260 --> 00:12:05.940
But thanks for everybody for giving us tips on things.

00:12:05.940 --> 00:12:11.220
There is a Django template that is called the WeMake Django template.

00:12:11.220 --> 00:12:14.340
I think, actually, I don't really know who WeMake is.

00:12:14.340 --> 00:12:18.620
I think WeMake is a group that does, like, customer websites and stuff.

00:12:18.620 --> 00:12:23.820
Let me just say, really quick, this is not templates as in Django templates or Jinja 2 or Chameleon.

00:12:23.820 --> 00:12:26.960
This is like, I'm making a project from scratch.

00:12:26.960 --> 00:12:31.440
Like, it generates the project structure, like a project template, not a web HTML template, right?

00:12:31.440 --> 00:12:31.720
Right.

00:12:31.720 --> 00:12:32.000
Okay.

00:12:32.100 --> 00:12:36.120
I guess it should be called a cookie cutter because it is based on cookie cutter.

00:12:36.120 --> 00:12:36.560
More or less.

00:12:36.560 --> 00:12:37.020
Yeah.

00:12:37.020 --> 00:12:38.720
So, it's based on cookie cutter.

00:12:38.720 --> 00:12:50.120
So, you can use, if you, I'm sure everybody's familiar with cookie cutter, you use it to start a project and it pulls stuff off of GitHub and initializes your project and then asks you a bunch of questions.

00:12:50.520 --> 00:12:56.680
But it has a whole bunch of really cool things that you might not actually think to do right away in a Django project.

00:12:56.680 --> 00:13:04.140
They're saying that it is, it's more for larger projects, but I'm sure that a lot of these are, you could do them for smaller projects too.

00:13:04.140 --> 00:13:09.920
But they, it uses a system called Dependabot, which I hadn't heard of before.

00:13:09.920 --> 00:13:13.760
But it's one of those systems to keep your dependencies up to date.

00:13:13.760 --> 00:13:17.400
It's got poetry for package management, which is kind of neat.

00:13:17.400 --> 00:13:19.420
pytest for testing, of course.

00:13:19.520 --> 00:13:20.020
That's awesome.

00:13:20.020 --> 00:13:24.560
One of the reasons why I think this is neat because Django doesn't do pytest automatically.

00:13:24.560 --> 00:13:28.160
So, having somebody initialize that and set it up for you is cool.

00:13:28.160 --> 00:13:39.060
Including things, and then there's some of the other things are mypy for static typing, pre-commit hooks already set up, flake 8, and an extension to the style guide already built in.

00:13:39.060 --> 00:13:42.460
So, you can use that as a template to use your own style guide.

00:13:42.460 --> 00:13:49.500
And a whole bunch of other cool things like Docker integration already, GitLab CI for building and testing.

00:13:49.500 --> 00:14:01.040
And then something that I hadn't heard of before, which is Caddy, which is, I'm going to probably get this wrong, but I think it's something to do with secure web sockets or something.

00:14:01.040 --> 00:14:01.500
I don't know.

00:14:01.500 --> 00:14:02.500
HTTPS.

00:14:02.500 --> 00:14:03.600
Whatever that is.

00:14:06.160 --> 00:14:06.820
Sounds good.

00:14:06.820 --> 00:14:08.000
Yeah, I don't know what Caddy is either.

00:14:08.000 --> 00:14:09.400
I should check it out.

00:14:09.400 --> 00:14:10.800
But it looks pretty cool.

00:14:10.800 --> 00:14:18.820
And, yeah, I think if you're creating Django projects, I think, or any form of web project, there's some for Flask, there's some for Pyramid, there's some for Django.

00:14:19.160 --> 00:14:25.580
I think looking at these more full-featured, more structured starter cookie cutters are really valuable.

00:14:25.580 --> 00:14:29.740
And I think, actually, the biggest value comes to people using Flask, by the way.

00:14:29.740 --> 00:14:33.420
The reason I say that is Django already has a structure, right?

00:14:33.420 --> 00:14:35.700
There's a lot of structure, like static files go here or whatever.

00:14:35.700 --> 00:14:37.840
A lot of stuff is set up when you create a site with Django.

00:14:37.840 --> 00:14:39.580
Same thing with Pyramid.

00:14:39.580 --> 00:14:40.940
You already use cookie cutter templates.

00:14:41.320 --> 00:14:44.640
But Flask is like, well, you create a file, and then you're on your own.

00:14:44.640 --> 00:14:51.620
So all that structure is not anywhere to be seen, but it's still going to have to exist on real apps eventually.

00:14:51.620 --> 00:14:54.640
And so having some projects that you can follow, I think it's really great.

00:14:54.640 --> 00:14:56.600
Yeah, so that's a good segue.

00:14:56.600 --> 00:15:05.460
Not a segue into the next one, but I would love it if people would share with us some of their favorite Flask cookie cutter starter projects.

00:15:05.460 --> 00:15:06.360
Yeah, for sure.

00:15:06.360 --> 00:15:08.440
We can give them a little shout-out in the extra section or something.

00:15:09.300 --> 00:15:12.860
So you want to make it just a straight three of a kind for Django in a row here?

00:15:12.860 --> 00:15:14.180
Let's just wrap it up with Django.

00:15:14.180 --> 00:15:15.320
Yeah, we're already here.

00:15:15.320 --> 00:15:20.880
So you've gone and you created your project with one of these Django templates.

00:15:20.880 --> 00:15:22.220
You've got it working.

00:15:22.220 --> 00:15:24.240
You've done some testing.

00:15:24.240 --> 00:15:26.720
Maybe something wasn't working, so you flipped it into debug mode.

00:15:26.720 --> 00:15:27.300
That's cool.

00:15:27.300 --> 00:15:28.860
Maybe set some other stuff.

00:15:28.860 --> 00:15:31.300
And then you're like, all right, ready to push it out.

00:15:31.300 --> 00:15:34.100
It has like this template you told me about here.

00:15:34.100 --> 00:15:38.560
It already has like integrated deploy steps into the CI build.

00:15:39.000 --> 00:15:39.860
So that's pretty cool.

00:15:39.860 --> 00:15:41.720
You just type deploy and boom, off you go.

00:15:41.720 --> 00:15:49.800
And then a little bit later, something starts happening to your AWS account or your database records that is not so good.

00:15:49.800 --> 00:15:57.820
That might be because you left the debug mode or some other setting on that exposes all sorts of information.

00:15:58.380 --> 00:16:05.780
So there are ways to run Django that is helpful for development, but then you obviously don't want to share that information with everyone else.

00:16:06.100 --> 00:16:11.380
So there's this project called Django Hunter, and it looks for insecure Django's.

00:16:11.380 --> 00:16:11.700
Okay.

00:16:11.820 --> 00:16:17.740
So if you deploy your app, you can point this thing at it and ask it, you know, what's the status of this thing here?

00:16:17.740 --> 00:16:20.520
So the person who wrote it said, why did we create this?

00:16:20.520 --> 00:16:26.360
Well, it's a tool to help identify incorrectly configured Django apps that are exposing sensitive information.

00:16:26.540 --> 00:16:31.200
For example, in March 2018, there was 28,165.

00:16:31.200 --> 00:16:32.700
It's a weird way to write it.

00:16:32.700 --> 00:16:35.420
It says 28,165,000 Django servers.

00:16:35.420 --> 00:16:36.760
Is that 28 million?

00:16:37.160 --> 00:16:45.720
I'm just going to say there's a lot of Django servers that are exposed on the internet, showing off things like their AWS keys, their database passwords and connection strings, etc.

00:16:45.720 --> 00:16:47.260
That you don't want.

00:16:47.260 --> 00:16:47.500
Right.

00:16:47.500 --> 00:16:55.260
So there's this cool tool called Django Hunter, and you can basically point it at your projects, and it will tell you if something's going wrong with them.

00:16:55.260 --> 00:16:55.740
That's cool.

00:16:55.740 --> 00:17:00.320
I love projects like this because Python is so easy to get started on things.

00:17:00.740 --> 00:17:07.500
You can, I guess, jump into the deep end before you're quite ready and have tools like this to help you jump in safely.

00:17:07.500 --> 00:17:08.040
Yeah.

00:17:08.040 --> 00:17:08.400
It's good.

00:17:08.400 --> 00:17:08.860
Absolutely.

00:17:08.860 --> 00:17:11.600
So, you know, it's easy for people to say, well, that was sure stupid.

00:17:11.600 --> 00:17:15.740
You got hacked because you didn't, you know, set the debug mode to false.

00:17:15.740 --> 00:17:20.280
Well, if you're struggling to figure out, like, what does deployment mean?

00:17:20.280 --> 00:17:27.520
Like, I can't even barely get this thing to run on a web server, and I'm trying to understand Linux and databases and firewalls.

00:17:27.520 --> 00:17:33.840
Like, it's pretty easy to overlook that kind of stuff when you're, like, struggling to just make the thing work.

00:17:33.840 --> 00:17:34.220
Right?

00:17:34.220 --> 00:17:34.360
Yeah.

00:17:34.360 --> 00:17:37.800
There's a lot of these settings that, like, you're like, I just want to test this out and show it to somebody.

00:17:37.800 --> 00:17:40.900
I'm not, you know, I haven't been running Django for 10 years.

00:17:40.900 --> 00:17:48.240
So there was actually a conversation either on Twitter or on Reddit about this, and somebody said, yeah, this is great.

00:17:48.240 --> 00:17:56.560
Like, this guy jumped in and says, hey, I've probably one of those, you know, 20,000 servers that are among my early projects that's out on Heroku.

00:17:56.560 --> 00:18:00.780
I accidentally exposed my AWS password and all hell broke loose.

00:18:00.780 --> 00:18:09.260
The problem is, as a beginner, it's not obvious how to separate development and production settings and keep that stuff out of your public repo, of course.

00:18:09.460 --> 00:18:09.540
Yeah.

00:18:09.540 --> 00:18:09.760
Yeah.

00:18:09.760 --> 00:18:17.260
The other thought was, somebody said, you know, there's a reasonable argument to be made that debug should be set to false by default.

00:18:17.260 --> 00:18:20.280
If you turn it on, then maybe you know about it, so you know how to turn it off.

00:18:20.280 --> 00:18:22.700
But if you never turn it on, how do you know, right?

00:18:22.700 --> 00:18:25.260
There's a setting, there's a huge comment right by where the setting is.

00:18:25.260 --> 00:18:28.200
It says, never put this in production with debug equals true.

00:18:28.200 --> 00:18:30.440
But it's like in a settings file you might not ever open.

00:18:30.440 --> 00:18:30.740
Right.

00:18:30.740 --> 00:18:32.480
So if you don't look at it, you know, that's bad.

00:18:32.480 --> 00:18:37.860
So anyway, there's some interesting maybe thoughts around what to do to Django to make it better.

00:18:37.860 --> 00:18:42.100
But certainly having a tool to tell you if something is wrong is good.

00:18:42.100 --> 00:18:42.460
Yeah.

00:18:42.460 --> 00:18:43.120
Okay.

00:18:43.120 --> 00:18:43.440
All right.

00:18:43.440 --> 00:18:48.300
So Django hunters for those Django developers or DevOps running Django.

00:18:48.300 --> 00:18:50.220
People running Django servers.

00:18:50.220 --> 00:18:52.500
Yeah.

00:18:52.500 --> 00:18:53.080
That was good.

00:18:53.080 --> 00:18:54.420
And that was all of our items.

00:18:54.420 --> 00:18:58.200
I want to first give a quick shout out to you, Brian, in our extra section.

00:18:58.200 --> 00:18:59.200
Thanks for having me on your show.

00:18:59.780 --> 00:19:00.820
And I blogged about that.

00:19:00.820 --> 00:19:01.940
So I put a link to the blog.

00:19:01.940 --> 00:19:06.200
But we had a great time talking about what it takes to be a good podcast guest and how

00:19:06.200 --> 00:19:09.700
to prepare for that, which is more broad than just podcast guests, I guess.

00:19:09.700 --> 00:19:09.980
Yeah.

00:19:09.980 --> 00:19:13.780
And we've actually already gotten a whole bunch of positive feedback on that episode.

00:19:13.780 --> 00:19:15.160
So I'm glad we did it.

00:19:15.160 --> 00:19:15.340
Yeah.

00:19:15.340 --> 00:19:15.540
Great.

00:19:15.540 --> 00:19:16.820
Anything else extra?

00:19:16.820 --> 00:19:19.260
You know, I was just thinking Christmas is coming up.

00:19:19.260 --> 00:19:21.160
Just, uh.

00:19:21.160 --> 00:19:21.980
Yeah.

00:19:21.980 --> 00:19:27.040
You know, at least in the United States, there's this weird tradition, but it is, it is a thing

00:19:27.040 --> 00:19:32.820
where like in shopping malls, like a Santa will be hired, a Santa Claus, and we'll sit

00:19:32.820 --> 00:19:33.200
there.

00:19:33.200 --> 00:19:37.220
And there's typically photographers around and like parents will bring their children to

00:19:37.220 --> 00:19:37.680
the Santa.

00:19:37.680 --> 00:19:42.560
And the purpose is the child sits on the lap of the Santa, asks for something probably totally

00:19:42.560 --> 00:19:42.960
unreasonable.

00:19:43.280 --> 00:19:46.100
And they take pictures of it, the whole situation.

00:19:46.100 --> 00:19:48.900
And hopefully the kid doesn't cry and get afraid of Santa.

00:19:48.900 --> 00:19:51.560
So you have a good version of this, right?

00:19:51.560 --> 00:19:51.920
Yeah.

00:19:51.920 --> 00:19:56.300
I'm going to, I'm going to read it out loud because it's a, it's a comic, but it's a, it's

00:19:56.300 --> 00:19:56.560
posted.

00:19:56.560 --> 00:19:57.220
It's hilarious.

00:19:57.220 --> 00:20:00.800
And it was posted by a change log on Twitter.

00:20:01.060 --> 00:20:05.080
This little girl sits, is sitting on Santa's lap and she says, for Christmas, I want

00:20:05.080 --> 00:20:05.560
a dragon.

00:20:05.560 --> 00:20:08.260
Of course says, Santa says, be realistic.

00:20:08.260 --> 00:20:09.200
Okay.

00:20:09.200 --> 00:20:14.440
I want enough donations to support my open source work with a response of what color do you want

00:20:14.440 --> 00:20:14.900
your dragon?

00:20:14.900 --> 00:20:17.100
That's so awesome.

00:20:17.100 --> 00:20:18.300
I really love it.

00:20:18.300 --> 00:20:20.880
It's sad that it's true, but, yeah, it's pretty awesome.

00:20:20.880 --> 00:20:21.520
Be realistic.

00:20:21.520 --> 00:20:21.720
Yeah.

00:20:21.720 --> 00:20:23.140
What color do you want your dragon to be?

00:20:23.140 --> 00:20:24.180
All right.

00:20:24.180 --> 00:20:26.800
Well, I thought I'd throw one in here for you as well.

00:20:26.920 --> 00:20:31.020
it has nothing to do with any seasonal stuff, so this is good year round.

00:20:31.020 --> 00:20:31.480
Okay.

00:20:31.480 --> 00:20:36.740
Has more to do with race conditions, deadlocks, and that sort of weird timing problems you run

00:20:36.740 --> 00:20:37.620
into with multi-threading.

00:20:37.620 --> 00:20:37.860
Yeah.

00:20:37.860 --> 00:20:38.140
Yeah.

00:20:38.140 --> 00:20:42.260
So you've heard the joke, why did the chicken cross the road, which has all sorts of weird

00:20:42.260 --> 00:20:44.680
answers, but sometimes just to get to the other side, right?

00:20:44.680 --> 00:20:47.020
Why did the multi-threaded chicken cross the road?

00:20:47.020 --> 00:20:47.500
I don't know.

00:20:47.500 --> 00:20:47.720
Why?

00:20:47.720 --> 00:20:47.760
Why?

00:20:47.760 --> 00:20:50.300
Road the side get to the other of the two.

00:20:50.300 --> 00:20:51.460
Ask me again.

00:20:51.460 --> 00:20:54.000
Why did the multi-threaded chicken cross the road?

00:20:54.000 --> 00:20:56.100
The side of to the road other get.

00:20:56.100 --> 00:20:58.600
There's always ground love.

00:20:58.600 --> 00:20:59.200
It's always different.

00:20:59.200 --> 00:21:01.280
I love it.

00:21:01.280 --> 00:21:03.460
That concludes the joke section, I suppose.

00:21:03.460 --> 00:21:04.160
Yeah.

00:21:04.160 --> 00:21:09.860
So, yeah, we'd also like, we're both sort of silly people, and we'd like to have some feedback

00:21:09.860 --> 00:21:15.080
as well from people to see whether or not we should keep a joke or two in the episodes,

00:21:15.080 --> 00:21:18.020
or actually just whether or not we should.

00:21:18.020 --> 00:21:18.920
So that'd be great.

00:21:18.920 --> 00:21:19.600
Yeah, it sounds good.

00:21:19.600 --> 00:21:20.680
And if you have good jokes.

00:21:20.680 --> 00:21:21.060
Yeah.

00:21:21.060 --> 00:21:21.800
Send them.

00:21:21.800 --> 00:21:22.120
Send them.

00:21:22.120 --> 00:21:22.920
All right.

00:21:22.920 --> 00:21:25.440
Well, Brian, thank you for doing this, and everyone, thank you for listening.

00:21:25.440 --> 00:21:25.880
Thank you.

00:21:25.880 --> 00:21:26.280
Bye.

00:21:26.280 --> 00:21:28.260
Thank you for listening to Python Bytes.

00:21:28.260 --> 00:21:30.800
Follow the show on Twitter via at Python Bytes.

00:21:30.800 --> 00:21:33.680
That's Python Bytes as in B-Y-T-E-S.

00:21:33.680 --> 00:21:37.100
And get the full show notes at pythonbytes.fm.

00:21:37.100 --> 00:21:41.440
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:21:41.440 --> 00:21:44.140
We're always on the lookout for sharing something cool.

00:21:44.140 --> 00:21:47.540
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:47.540 --> 00:21:51.060
Thank you for listening and sharing this podcast with your friends and colleagues.

