
00:00:00.000 --> 00:00:05.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.200 --> 00:00:08.960
This is episode 199, almost 200 Brian.


00:00:08.960 --> 00:00:09.520
Almost.


00:00:09.520 --> 00:00:10.320
Almost.


00:00:10.320 --> 00:00:13.920
Recorded September 9th, 2020. I'm Michael Kennedy.


00:00:13.920 --> 00:00:15.040
And I'm Brian Okken.


00:00:15.040 --> 00:00:19.200
And this episode is brought to you by us. We'll tell you more about the things that we're doing


00:00:19.200 --> 00:00:26.000
and what we have to offer later. But for now, I want to talk about not any huge announcement,


00:00:26.000 --> 00:00:29.760
but a very, very small announcement that is also kind of huge.


00:00:29.760 --> 00:00:34.960
Very cool. Yeah. So micro, you might say, you might say it's microscopic, but it's a big deal.


00:00:34.960 --> 00:00:40.800
So micro Python has just had a new release. And this is significant, because the last release


00:00:40.800 --> 00:00:47.840
from micro Python was December 19 of last year. So it's been, you know, what is that almost 10


00:00:47.840 --> 00:00:51.920
months since the last release. So if you care about micro Python, this is like a pretty big deal.


00:00:51.920 --> 00:00:58.640
So version 113 is out. And one of the major things is it has improved asyncio,


00:00:58.640 --> 00:01:02.960
async and await support, and it has cool Bluetooth improvements.


00:01:02.960 --> 00:01:08.800
And it even comes with the PEP 526, that walrus operator.


00:01:08.800 --> 00:01:09.280
Oh, nice.


00:01:09.280 --> 00:01:11.600
Yeah. So there's a lot of stuff going on here. They basically,


00:01:11.600 --> 00:01:16.960
MicroPython, as you can imagine, comes with a micro asyncio module,


00:01:16.960 --> 00:01:24.400
I'm guessing the U is really a mu, U asyncio module, that's supposed to be more compatible


00:01:24.400 --> 00:01:26.960
with CPython's async I/O.


00:01:26.960 --> 00:01:29.840
So the main idea is that the task object,


00:01:29.840 --> 00:01:32.040
you can use a task object for each coroutine,


00:01:32.040 --> 00:01:35.240
which allows you to have like unbounded queues of work


00:01:35.240 --> 00:01:36.080
and stuff like that.


00:01:36.080 --> 00:01:38.560
Whereas previously, I think you had to pre-allocate it


00:01:38.560 --> 00:01:39.400
for some reason.


00:01:39.400 --> 00:01:41.840
I never tried to do async I/O on MicroPython,


00:01:41.840 --> 00:01:44.440
but apparently it was a little bit wonky.


00:01:44.440 --> 00:01:47.440
And so now it's more consistent.


00:01:47.440 --> 00:01:48.840
Another thing that I thought was interesting


00:01:48.840 --> 00:01:50.000
about this release, Brian,


00:01:50.000 --> 00:01:54.560
was they went through and auto-formatted all the code


00:01:54.560 --> 00:01:55.960
in the entire repository.


00:01:55.960 --> 00:01:57.280
And if you look at their repo,


00:01:57.280 --> 00:01:59.960
there is Python and MicroPython,


00:01:59.960 --> 00:02:03.000
but a lot like CPython, it's a lot of C as well.


00:02:03.000 --> 00:02:06.200
Right, I think it's like 80% C or something.


00:02:06.200 --> 00:02:09.040
And so they auto-formatted the Python code with black,


00:02:09.040 --> 00:02:11.240
and that probably won't surprise too many people,


00:02:11.240 --> 00:02:14.220
but they auto-formatted C with it's,


00:02:14.220 --> 00:02:16.680
that community's equivalent of black,


00:02:16.680 --> 00:02:20.320
and get ready for the name, Uncrustify.


00:02:20.320 --> 00:02:22.280
They Uncrustified the C code.


00:02:22.280 --> 00:02:23.400
- Okay. - Do you know about this?


00:02:23.400 --> 00:02:24.800
- No, actually I'm writing it down


00:02:24.800 --> 00:02:26.200
because I'd like to check this out.


00:02:26.200 --> 00:02:27.080
- Isn't that great?


00:02:27.080 --> 00:02:29.920
So you can basically configure how it formats your C code.


00:02:29.920 --> 00:02:31.240
And it's like black, it's like,


00:02:31.240 --> 00:02:34.080
you know, it just runs automatically and fixes your C code.


00:02:34.080 --> 00:02:37.400
And boy, if you thought Python code needed some fixing,


00:02:37.400 --> 00:02:38.840
I'll bet you the C code,


00:02:38.840 --> 00:02:40.480
and there's more variety in there, right?


00:02:40.480 --> 00:02:43.440
- Yeah, I've seen some ugly C code in my day.


00:02:43.440 --> 00:02:45.320
- Yeah, for sure, for sure.


00:02:45.320 --> 00:02:47.800
'Cause with the curly braces and semicolons,


00:02:47.800 --> 00:02:50.840
you have a lot more flexibility in how you format stuff.


00:02:50.840 --> 00:02:54.080
Whereas Python forces some of that structure upon you.


00:02:54.080 --> 00:02:56.200
All right, they also added Blue Kitchen.


00:02:56.200 --> 00:02:59.600
Apparently Blue Kitchen is a Bluetooth stack.


00:02:59.600 --> 00:03:04.440
And so they added a micro-MU Bluetooth module


00:03:04.440 --> 00:03:07.440
as an alternative to the Nimble stack as well.


00:03:07.440 --> 00:03:09.760
And there's a Unix port,


00:03:09.760 --> 00:03:12.760
and you can build the Unix port with the Bluetooth support


00:03:12.760 --> 00:03:14.020
for either of these bindings.


00:03:14.020 --> 00:03:15.200
That's pretty cool.


00:03:15.200 --> 00:03:17.380
That comes with new events.


00:03:17.380 --> 00:03:21.300
So if you're doing like Bluetooth discovery and things like that, you can


00:03:21.300 --> 00:03:23.360
like scan for Bluetooth stuff more easily.


00:03:23.360 --> 00:03:29.220
It also came with a big memory leak fix for arm chips, which is big


00:03:29.220 --> 00:03:31.300
in the small space, ironically.


00:03:31.300 --> 00:03:35.920
So apparently, there was certain memory that was not reclaimed by the


00:03:35.920 --> 00:03:37.340
garbage collector and other types of things.


00:03:37.340 --> 00:03:40.660
So if you've, you know, and at the same time on these very small devices, you


00:03:40.660 --> 00:03:42.880
care a lot about not wasting memory, right?


00:03:42.880 --> 00:03:45.320
It's not like you got 32 gigs like my laptop does.


00:03:45.320 --> 00:03:46.960
So like whatever, right?


00:03:46.960 --> 00:03:48.380
It's going to matter if you lose memory


00:03:48.380 --> 00:03:50.820
on like a little MicroPython chip.


00:03:50.820 --> 00:03:55.160
And also they set it up so you can run parallel tests


00:03:55.160 --> 00:03:58.320
against multiple MicroPython targets.


00:03:58.320 --> 00:04:00.760
So I'm guessing like different chips and different devices.


00:04:00.760 --> 00:04:02.560
You can just say, go test them,


00:04:02.560 --> 00:04:06.040
run it synchronized across two or more MicroPython targets.


00:04:06.040 --> 00:04:07.320
I don't know if that's to speed it up


00:04:07.320 --> 00:04:10.560
or to like test the whole thing on different platforms


00:04:10.560 --> 00:04:11.520
in parallel or whatever,


00:04:11.520 --> 00:04:13.520
but it sounds like a good improvement.


00:04:13.520 --> 00:04:15.520
And it does come with a few breaking changes


00:04:15.520 --> 00:04:17.520
so people can check that out.


00:04:17.520 --> 00:04:19.520
Anyway, if you care about MicroPython, and I'm guessing


00:04:19.520 --> 00:04:21.520
this may make its way over to


00:04:21.520 --> 00:04:23.520
CircuitPython as well at some point,


00:04:23.520 --> 00:04:25.520
knowing that those projects are really close.


00:04:25.520 --> 00:04:27.520
So anyway, this looks really good if you're doing


00:04:27.520 --> 00:04:29.520
big stuff on small things.


00:04:29.520 --> 00:04:31.520
Yeah, it's good to see this going forward.


00:04:31.520 --> 00:04:33.520
And thanks to Matt Trentini


00:04:33.520 --> 00:04:35.520
for sharing this and bringing it to our attention.


00:04:35.520 --> 00:04:37.520
I wish I was better at remembering names,


00:04:37.520 --> 00:04:39.520
but somebody I had on Testing Code


00:04:39.520 --> 00:04:44.520
brought up Respex and or Respex, I should stop.


00:04:44.520 --> 00:04:47.760
RESPX, it's a utility for mocking out


00:04:47.760 --> 00:04:50.300
the Python HTTPX library.


00:04:50.300 --> 00:04:51.720
So that somebody brought that up


00:04:51.720 --> 00:04:53.140
and I had never heard of it before.


00:04:53.140 --> 00:04:55.100
So I figured we'd bring it up here.


00:04:55.100 --> 00:04:57.660
So with requests, if you want to mock it,


00:04:57.660 --> 00:05:00.940
there's a cool library called Responses


00:05:00.940 --> 00:05:04.060
and cleverly named a bit hard to search for.


00:05:04.060 --> 00:05:06.860
And then with HTTPX, if you want to mock it,


00:05:06.860 --> 00:05:08.460
there is Respex.


00:05:08.460 --> 00:05:12.140
I'm going to name it responseX, but the other part, you just don't write it.


00:05:12.140 --> 00:05:15.940
It's like the opposite of a silent E. It's not written.


00:05:15.940 --> 00:05:17.940
Maybe.


00:05:17.940 --> 00:05:19.940
Sorry, keep going.


00:05:19.940 --> 00:05:21.940
It sounds like a great idea.


00:05:21.940 --> 00:05:24.420
Well, interestingly enough, when you write the two imports out,


00:05:24.420 --> 00:05:26.420
they're the same number of characters.


00:05:26.420 --> 00:05:28.780
Maybe that's part of the reason why they did that.


00:05:28.780 --> 00:05:32.060
Anyway, that quick start shows it's really quick.


00:05:32.060 --> 00:05:35.300
You just, it's a really just a few lines of code


00:05:35.300 --> 00:05:39.860
to mock out a request response call or response call.


00:05:39.860 --> 00:05:42.300
You can do things like things that you would expect,


00:05:42.300 --> 00:05:44.800
like an assert that something was actually called


00:05:44.800 --> 00:05:48.780
and what the status code was and things like that.


00:05:48.780 --> 00:05:51.140
But you can also have custom content


00:05:51.140 --> 00:05:54.500
and you can return JSON content, of course.


00:05:54.500 --> 00:05:55.420
There's some examples.


00:05:55.420 --> 00:05:58.220
What I like is the documentation is pretty nice.


00:05:58.220 --> 00:05:59.700
There's some examples on how to use it


00:05:59.700 --> 00:06:01.860
with both pytest and Unit Test,


00:06:01.860 --> 00:06:05.240
including how to set up like a mocked API fixture


00:06:05.240 --> 00:06:07.020
for pytest so you can have multiple tests


00:06:07.020 --> 00:06:09.900
using the same mocked endpoint.


00:06:09.900 --> 00:06:13.080
And there's a bunch of nice things about it.


00:06:13.080 --> 00:06:15.140
Like for instance, if you wanna mock out


00:06:15.140 --> 00:06:17.080
a whole bunch of different URLs,


00:06:17.080 --> 00:06:18.860
you can use some regular expressions


00:06:18.860 --> 00:06:23.380
to set what URLs you wanna catch with that.


00:06:23.380 --> 00:06:27.660
And then also the content that you return


00:06:27.660 --> 00:06:30.500
from your mocked object, your mocked request,


00:06:30.500 --> 00:06:33.780
is you can have a callback that can generate that on the fly


00:06:33.780 --> 00:06:35.700
based on what you pass in it.


00:06:35.700 --> 00:06:38.820
If you have a HTTPX-based application,


00:06:38.820 --> 00:06:40.980
you definitely need to know about this for testing.


00:06:40.980 --> 00:06:41.820
- Yeah, absolutely.


00:06:41.820 --> 00:06:43.100
And one of the things that's challenging


00:06:43.100 --> 00:06:47.940
about testing the HTTPX is the async stuff, right?


00:06:47.940 --> 00:06:50.820
And so this is a really cool way to get in there


00:06:50.820 --> 00:06:52.620
and just make it work, right?


00:06:52.620 --> 00:06:53.460
- Yeah.


00:06:53.460 --> 00:06:54.420
- Just put it decorated there,


00:06:54.420 --> 00:06:56.460
and it just mocks it out for you,


00:06:56.460 --> 00:06:57.980
like you would expect.


00:06:57.980 --> 00:06:58.900
Looks very clean.


00:06:58.900 --> 00:06:59.940
- Yeah, pretty easy.


00:06:59.940 --> 00:07:02.240
And there's a lot of magic going on under the hood


00:07:02.240 --> 00:07:04.480
to make that a clean interface,


00:07:04.480 --> 00:07:05.560
but I think they did a good job.


00:07:05.560 --> 00:07:06.540
- Yeah.


00:07:06.540 --> 00:07:11.540
So HTTPS comes from sort of a async derivative of requests,


00:07:11.540 --> 00:07:15.040
which I think is a really fantastic library.


00:07:15.040 --> 00:07:16.680
And I've done some cool stuff with HTTPS.


00:07:16.680 --> 00:07:18.120
So yeah, I'm a fan of this.


00:07:18.120 --> 00:07:19.060
It's great.


00:07:19.060 --> 00:07:21.040
Now, before we move on,


00:07:21.040 --> 00:07:23.880
let's talk about a couple of things that we got going on


00:07:23.880 --> 00:07:25.620
that people can check out


00:07:25.620 --> 00:07:27.360
that will definitely help support the show


00:07:27.360 --> 00:07:29.220
and they might find interesting.


00:07:29.220 --> 00:07:32.020
I know that you've got some updates for your book.


00:07:32.020 --> 00:07:32.860
Is that right?


00:07:32.860 --> 00:07:34.980
- Yeah, the Python testing with pytestBook,


00:07:34.980 --> 00:07:38.260
just a minor, the book itself has a minor update.


00:07:38.260 --> 00:07:40.780
So there's, it wasn't a big enough change


00:07:40.780 --> 00:07:42.580
to change the hardback version,


00:07:42.580 --> 00:07:45.500
but the ebook will be updated.


00:07:45.500 --> 00:07:48.020
I don't think the hardback is gonna be updated,


00:07:48.020 --> 00:07:50.940
but it's a couple lines of code


00:07:50.940 --> 00:07:53.380
in a couple of code examples in chapter five.


00:07:53.380 --> 00:07:56.100
So it's a very minor thing,


00:07:56.100 --> 00:07:59.460
But the big difference is the code download.


00:07:59.460 --> 00:08:01.900
So we've updated the code download.


00:08:01.900 --> 00:08:04.260
So even if you're working with the hardback book


00:08:04.260 --> 00:08:07.580
or using the old version, don't update the ebook,


00:08:07.580 --> 00:08:09.220
please redownload the code.


00:08:09.220 --> 00:08:12.280
It'll make your learning experience better.


00:08:12.280 --> 00:08:14.980
And the main change is that I've pinned the dependencies


00:08:14.980 --> 00:08:17.820
in the target project or the example project


00:08:17.820 --> 00:08:20.820
so that everything works better.


00:08:20.820 --> 00:08:23.780
Good, there was a tinyDB is a database


00:08:23.780 --> 00:08:25.500
that I use in the project.


00:08:25.500 --> 00:08:28.260
and it had some incompatible changes.


00:08:28.260 --> 00:08:31.260
And instead of trying to update everything


00:08:31.260 --> 00:08:35.100
to use the new TinyDB, I just pinned it to an old version.


00:08:35.100 --> 00:08:35.940
- Yeah, that makes sense.


00:08:35.940 --> 00:08:39.620
I mean, it's not like you're trying to teach people TinyDB.


00:08:39.620 --> 00:08:40.580
You're like, here's a dependency,


00:08:40.580 --> 00:08:42.300
we're trying to get around to something.


00:08:42.300 --> 00:08:45.380
- Yeah, so that's not important to the content


00:08:45.380 --> 00:08:47.500
of teaching people how to write tests.


00:08:47.500 --> 00:08:49.320
- Yeah, that's the problem of creating content.


00:08:49.320 --> 00:08:51.780
The world moves on and they're not always compatible


00:08:51.780 --> 00:08:52.620
with what you did.


00:08:52.620 --> 00:08:53.440
- How about--


00:08:53.440 --> 00:08:58.040
Over at Talk Python, we've got a whole bunch of stuff coming.


00:08:58.040 --> 00:09:00.120
And so what I'd like to encourage people to do


00:09:00.120 --> 00:09:04.480
is just to go to talkpython.fm or training.talkpython.fm.


00:09:04.480 --> 00:09:07.040
And right there, you can-- at the front of the training site,


00:09:07.040 --> 00:09:08.760
you can just enter your email so you


00:09:08.760 --> 00:09:09.960
get a bunch of announcements.


00:09:09.960 --> 00:09:13.200
Because I believe we are working on five or six courses right now


00:09:13.200 --> 00:09:14.680
or under active development.


00:09:14.680 --> 00:09:16.220
We've got all sorts of great stuff.


00:09:16.220 --> 00:09:17.160
And rather than going through it,


00:09:17.160 --> 00:09:19.000
just sign up to get notified when those come out.


00:09:19.000 --> 00:09:19.520
Very cool.


00:09:19.520 --> 00:09:20.920
Indeed, indeed.


00:09:20.920 --> 00:09:25.920
So a while ago I went on this Twitter journey, let's say,


00:09:25.920 --> 00:09:27.820
I don't know how to really explain it.


00:09:27.820 --> 00:09:29.840
It was like I posted a quick question


00:09:29.840 --> 00:09:33.620
that led to a ton of feedback and then wow,


00:09:33.620 --> 00:09:36.900
so many pieces of information and ideas


00:09:36.900 --> 00:09:39.200
and variations were sent around.


00:09:39.200 --> 00:09:40.140
What I was trying to say,


00:09:40.140 --> 00:09:43.140
like I'd like a dictionary that contains objects


00:09:43.140 --> 00:09:45.760
that I can access, say with different keys.


00:09:45.760 --> 00:09:47.420
Like I'd like to access by,


00:09:47.420 --> 00:09:49.620
put a bunch of users and access them by ID,


00:09:49.620 --> 00:09:52.100
but maybe also by email or by city.


00:09:52.100 --> 00:09:52.940
And that would come with a bunch.


00:09:52.940 --> 00:09:55.100
So it was like this sort of exploration there.


00:09:55.100 --> 00:09:58.260
And one of the recommendations that came over


00:09:58.260 --> 00:09:59.660
sort of around that is like,


00:09:59.660 --> 00:10:02.620
hey, you should check out this thing called getpy.


00:10:02.620 --> 00:10:03.980
I don't know where the name comes from,


00:10:03.980 --> 00:10:06.340
but it doesn't tell a lot about what it is,


00:10:06.340 --> 00:10:09.600
but it's a vectorized Python dictionary


00:10:09.600 --> 00:10:11.340
and set implementation.


00:10:11.340 --> 00:10:15.820
And vectorized as in it matches up perfectly with NumPy


00:10:15.820 --> 00:10:19.260
and so pandas and all the things that are built upon NumPy


00:10:19.260 --> 00:10:21.360
to plug straight into them.


00:10:21.360 --> 00:10:23.680
So imagine I want to have a dictionary


00:10:23.680 --> 00:10:26.780
that has data in NumPy,


00:10:26.780 --> 00:10:29.900
but lets me treat it like a regular Python dictionary


00:10:29.900 --> 00:10:32.060
or a set and things like that.


00:10:32.060 --> 00:10:33.720
So that's what this is.


00:10:33.720 --> 00:10:36.200
It basically brings a super high performance


00:10:36.200 --> 00:10:38.740
Python dictionary and set implementation


00:10:38.740 --> 00:10:40.580
that automatically integrates


00:10:40.580 --> 00:10:42.560
into the Python scientific ecosystem,


00:10:42.560 --> 00:10:43.880
which I think is pretty cool.


00:10:43.880 --> 00:10:45.620
Yeah, and it's built upon this thing


00:10:45.620 --> 00:10:47.720
called parallel hash map.


00:10:47.720 --> 00:10:53.240
So parallel hash map is apparently the current state of the art unordered map set with minimal


00:10:53.240 --> 00:10:56.100
memory overhead and super fast runtime.


00:10:56.100 --> 00:10:58.820
So like a C binding.


00:10:58.820 --> 00:11:04.500
And so this is just a Python wrapper on top of this C library that's a super fast dictionary


00:11:04.500 --> 00:11:05.500
and set.


00:11:05.500 --> 00:11:07.220
So that's pretty awesome.


00:11:07.220 --> 00:11:11.860
And here's another one for you, Brian, for your C++ adventures.


00:11:11.860 --> 00:11:16.260
The integration between GitPy and Parallel HashMap


00:11:16.260 --> 00:11:18.960
is this thing called PyBind11.


00:11:18.960 --> 00:11:22.920
So PyBind11 is a compatibility layer


00:11:22.920 --> 00:11:25.900
between C++11 and Python.


00:11:25.900 --> 00:11:29.080
So if you want to write like modern C++


00:11:29.080 --> 00:11:32.540
and then plug it in easily to Python, here you go.


00:11:32.540 --> 00:11:34.120
- Nice. - Yeah, so that's pretty cool.


00:11:34.120 --> 00:11:36.180
- Okay. - There's two classes,


00:11:36.180 --> 00:11:39.660
GP, so GitPy, GP.dict and GP.set,


00:11:39.660 --> 00:11:42.460
And they're designed to be basically similar


00:11:42.460 --> 00:11:44.920
to the standard dictionaries and sets from Python,


00:11:44.920 --> 00:11:47.580
but there's a few differences, so check out the docs.


00:11:47.580 --> 00:11:49.940
And then I threw in a quick little example here


00:11:49.940 --> 00:11:52.740
that has two NumPy arrays, and you can say,


00:11:52.740 --> 00:11:55.220
here are the keys, here are the values, put them together,


00:11:55.220 --> 00:11:58.460
and then you can just access different values.


00:11:58.460 --> 00:12:00.940
And it's also typed, which I think is kind of interesting.


00:12:00.940 --> 00:12:04.540
Right, like it has like an unsigned eight-bit integer


00:12:04.540 --> 00:12:08.060
or something like that, much like NumPy is,


00:12:08.060 --> 00:12:11.860
but it's more like a Python array


00:12:11.860 --> 00:12:14.000
where you specify the numerical type


00:12:14.000 --> 00:12:17.020
than it is just an unbounded list.


00:12:17.020 --> 00:12:18.540
Right, so there's some interesting stuff going on here.


00:12:18.540 --> 00:12:20.580
- Does it solve your problem that you were looking for?


00:12:20.580 --> 00:12:21.660
- No, not at all.


00:12:21.660 --> 00:12:23.620
But it's very interesting.


00:12:23.620 --> 00:12:24.860
- But it's still neat, yeah.


00:12:24.860 --> 00:12:26.160
- Yeah, it's still neat.


00:12:26.160 --> 00:12:28.320
Speaking of neat, we already talked about black once,


00:12:28.320 --> 00:12:29.160
but it's pretty neat.


00:12:29.160 --> 00:12:29.980
Let's talk about it again.


00:12:29.980 --> 00:12:32.420
- Yeah, this was sent in by John Hagen.


00:12:32.420 --> 00:12:33.700
And he mentioned that, I mean,


00:12:33.700 --> 00:12:36.940
I'm pretty sure we've mentioned isort before.


00:12:36.940 --> 00:12:40.860
I know we've mentioned black, but a lot of projects use both.


00:12:40.860 --> 00:12:45.980
So, I sort will search your imports, so you don't have to.


00:12:45.980 --> 00:12:50.220
And then just so they're consistent and they're alphabetically sorted.


00:12:50.220 --> 00:12:51.300
And then there's some other--


00:12:51.300 --> 00:12:54.020
Right, and there's PEP8 recommendations about that, I believe,


00:12:54.020 --> 00:12:56.220
about grouping stuff that comes from the library,


00:12:56.220 --> 00:12:58.860
from standard library versus externals and whatnot.


00:12:58.860 --> 00:13:00.940
Yeah, and so you don't have to think about it.


00:13:00.940 --> 00:13:02.300
You can just use I sort.


00:13:02.300 --> 00:13:05.980
Black also is becoming more and more popular, I think,


00:13:05.980 --> 00:13:09.100
or it's just constantly very popular.


00:13:09.100 --> 00:13:10.620
For reform, it's all of your code,


00:13:10.620 --> 00:13:12.940
but it includes the import statements as well.


00:13:12.940 --> 00:13:15.780
So there was this issue that some projects


00:13:15.780 --> 00:13:17.780
wanted to use both Isort and Black,


00:13:17.780 --> 00:13:21.700
and there is, and they kind of fight with each other.


00:13:21.700 --> 00:13:24.420
Right out of the box, if you run Isort,


00:13:24.420 --> 00:13:25.660
you'll have one answer,


00:13:25.660 --> 00:13:29.020
and Black will do something different in some cases.


00:13:29.020 --> 00:13:29.860
So what do you do?


00:13:29.860 --> 00:13:32.860
Well, there's Black had a configuration page,


00:13:32.860 --> 00:13:35.000
and we'll link to this in the show notes,


00:13:35.000 --> 00:13:38.400
that has documents, what settings you have to set


00:13:38.400 --> 00:13:40.920
for ISORT so that it's compatible with Black.


00:13:40.920 --> 00:13:44.880
They also do that for Flake 8 and Pylint, which is nice.


00:13:44.880 --> 00:13:47.400
But Flake 8 and Pylint are not that complicated.


00:13:47.400 --> 00:13:49.000
It's the ISORT that's,


00:13:49.000 --> 00:13:51.340
there's like six settings you have to change.


00:13:51.340 --> 00:13:53.900
But ISORT 5 just came out.


00:13:53.900 --> 00:13:57.320
And ISORT 5 has what they call profiles.


00:13:57.320 --> 00:14:00.800
And so if you run ISORT with profile Black,


00:14:00.800 --> 00:14:03.060
Black is one of the built-in profiles,


00:14:03.060 --> 00:14:08.060
it will sort the imports such that they're compatible with black.


00:14:08.060 --> 00:14:09.220
Nice.


00:14:09.220 --> 00:14:13.220
So now if you use isort with the black profile


00:14:13.220 --> 00:14:17.700
and black also, they won't fight with each other anymore.


00:14:17.700 --> 00:14:19.260
That's pretty cool.


00:14:19.260 --> 00:14:22.460
Black also came out with some new changes.


00:14:22.460 --> 00:14:24.980
So if you're interested in black, check those out.


00:14:24.980 --> 00:14:27.980
They're not huge changes, but some minor fixes.


00:14:27.980 --> 00:14:29.740
The profile feature is pretty cool.


00:14:29.740 --> 00:14:32.140
And even if you don't care about black,


00:14:32.140 --> 00:14:33.620
I think you should check it out.


00:14:33.620 --> 00:14:37.940
They do, apparently, Django, PyCharm, Google, OpenStack,


00:14:37.940 --> 00:14:42.060
Clone, Adders, and Hug are other profiles that are included.


00:14:42.060 --> 00:14:43.780
And also, they're just good examples


00:14:43.780 --> 00:14:46.140
so that you can look at how different projects


00:14:46.140 --> 00:14:48.060
are configuring their ISORT.


00:14:48.060 --> 00:14:50.020
You can figure yours if you want.


00:14:50.020 --> 00:14:51.040
- Yeah, I really like it.


00:14:51.040 --> 00:14:52.500
That's super cool.


00:14:52.500 --> 00:14:55.660
And it is nice to have the top of your files


00:14:55.660 --> 00:14:59.220
nice and clean and organized in some certain way.


00:14:59.220 --> 00:15:00.040
- It's interesting.


00:15:00.040 --> 00:15:04.600
A lot of people do different linters or code reformatters,


00:15:04.600 --> 00:15:07.880
but this combination of ISORT plus black


00:15:07.880 --> 00:15:10.920
is something that's becoming more and more common


00:15:10.920 --> 00:15:11.760
in a lot of projects.


00:15:11.760 --> 00:15:13.880
- Yeah, yeah, very cool.


00:15:13.880 --> 00:15:16.160
So I have something interesting for you.


00:15:16.160 --> 00:15:20.080
If you were to think of the influence of Microsoft Excel


00:15:20.080 --> 00:15:25.080
relative to the influence of all of human genetics


00:15:25.080 --> 00:15:27.560
and the genome science of the world,


00:15:27.560 --> 00:15:29.440
and they got into a fight, who would win?


00:15:29.440 --> 00:15:30.440
Like a superhero.


00:15:30.440 --> 00:15:31.380
- (laughs)


00:15:31.380 --> 00:15:33.540
You seem like apples and oranges, I have no idea.


00:15:33.540 --> 00:15:35.580
- Well, they did get into a fight in Excel 1.


00:15:35.580 --> 00:15:36.900
So, here's the story.


00:15:36.900 --> 00:15:39.720
There's a article that was sent over by Chris Moffat.


00:15:39.720 --> 00:15:41.840
He's the guy who wrote the


00:15:41.840 --> 00:15:44.260
Moving from Excel to Python and Pandas course


00:15:44.260 --> 00:15:45.100
over at DocPython.


00:15:45.100 --> 00:15:46.460
So, we did a bunch of research into like


00:15:46.460 --> 00:15:49.140
all these funny things and weird things around Excel.


00:15:49.140 --> 00:15:50.980
So, he sent this one over and I thought I'd cover it


00:15:50.980 --> 00:15:52.240
'cause it's fun.


00:15:52.240 --> 00:15:55.380
So, on the Verge, there's an article that talks about


00:15:55.380 --> 00:16:01.060
scientists have renamed human genes to stop Excel from misreading them as dates.


00:16:01.060 --> 00:16:02.060
Okay.


00:16:02.060 --> 00:16:03.060
Is that crazy?


00:16:03.060 --> 00:16:04.060
Yeah.


00:16:04.060 --> 00:16:05.060
Yeah.


00:16:05.060 --> 00:16:08.500
So you think of just like formatting and stuff like that.


00:16:08.500 --> 00:16:13.580
So there's like tens of thousands of genes in the human genome and each gene is given


00:16:13.580 --> 00:16:17.220
a name and a numerical code and then you use to talk about it.


00:16:17.220 --> 00:16:23.060
So like this one controls like what color of hair you have or whatever, right?


00:16:23.060 --> 00:16:26.780
So over the past year or so, 27 human genes


00:16:26.780 --> 00:16:30.380
have been renamed all because Excel kept re-reading them


00:16:30.380 --> 00:16:32.420
as symbols, they're symbols of states.


00:16:32.420 --> 00:16:34.420
- Okay, well the examples are important.


00:16:34.420 --> 00:16:39.300
- Yeah, so like March 1, no spaces,


00:16:39.300 --> 00:16:42.220
March 1 is a one of the genes, right?


00:16:42.220 --> 00:16:47.100
But it gets converted to 03/01/year,


00:16:47.100 --> 00:16:50.860
or if you're in Europe, 01/03/the year, right?


00:16:50.860 --> 00:16:52.980
Either way, that's not what you wanted.


00:16:52.980 --> 00:16:57.980
So, March 1 actually stands for membrane-associated ring


00:16:57.980 --> 00:17:02.260
CH type finger 1, which of course is the 1st of March.


00:17:02.260 --> 00:17:05.500
Now it sounds funny, like we're making fun of it,


00:17:05.500 --> 00:17:06.980
like ah, whatever.


00:17:06.980 --> 00:17:11.620
There's a study in 2016 that examined the genetic data


00:17:11.620 --> 00:17:15.980
shared alongside 3,600 published papers


00:17:15.980 --> 00:17:20.100
and found that one fifth of them, which, what is that?


00:17:20.100 --> 00:17:24.420
that's like 700 papers were affected by Excel errors.


00:17:24.420 --> 00:17:25.620
- Oh man, yeah.


00:17:25.620 --> 00:17:26.860
- Isn't that messed up?


00:17:26.860 --> 00:17:31.220
So there's a scientific body in charge of naming genes


00:17:31.220 --> 00:17:34.140
called Hugo Gene Nomenclature Committee.


00:17:34.140 --> 00:17:34.980
Who knew?


00:17:34.980 --> 00:17:36.740
There's a committee for naming genes, but apparently.


00:17:36.740 --> 00:17:39.940
So they published new guidelines for naming genes


00:17:39.940 --> 00:17:42.400
and they said, you have to consider what happens


00:17:42.400 --> 00:17:43.660
if you type into Excel.


00:17:43.660 --> 00:17:46.220
If it gets reformatted, that's not okay.


00:17:46.220 --> 00:17:47.300
Gotta pick a new name.


00:17:47.300 --> 00:17:49.020
(laughing)


00:17:49.020 --> 00:17:52.200
So they put like weird suffixes and stuff on these things to make them work.


00:17:52.200 --> 00:17:55.740
Like March 1 is now like March 1 N1 or something like that.


00:17:55.740 --> 00:17:58.280
Anyway, so why do I bring this up on the Python show?


00:17:58.280 --> 00:18:04.160
You know, so much of this work that people are doing there can totally be solved by pandas


00:18:04.160 --> 00:18:06.200
and Jupyter notebook and stuff.


00:18:06.200 --> 00:18:11.760
And so I, you know, the guy who was quoted in there was like, hey, I made these mistakes


00:18:11.760 --> 00:18:15.280
when I was in grad school because all I knew how to use was Excel.


00:18:15.280 --> 00:18:21.680
So here's a bit of an example along with a plea to help folks who are overusing Excel


00:18:21.680 --> 00:18:28.640
to take a step forward and use something like Pandas and Jupyter.


00:18:28.640 --> 00:18:34.160
And you're going to be able to do a lot more cool processing anyway, which I think is great.


00:18:34.160 --> 00:18:40.840
Also one other thing, if you think the geneticists have an exclusive right to these mistakes,


00:18:40.840 --> 00:18:47.480
There's a really cool article, blog post over on Oracle's blog actually, called "The 10


00:18:47.480 --> 00:18:51.040
Costliest Spreadsheet Boo-Boos in History."


00:18:51.040 --> 00:18:54.840
And they're really hilarious, and like, "Thank God this didn't happen to me."


00:18:54.840 --> 00:18:58.840
Well, and just like awesome stock photo that they have for this too.


00:18:58.840 --> 00:18:59.840
Yeah, it's so bad.


00:18:59.840 --> 00:19:00.840
Perfect.


00:19:00.840 --> 00:19:01.840
Yeah, it's like perfect.


00:19:01.840 --> 00:19:03.600
It could just come out of Excel.


00:19:03.600 --> 00:19:04.600
Yeah.


00:19:04.600 --> 00:19:10.800
So, some of them are fairly mundane, but others like MI5, the British intelligence agency,


00:19:10.800 --> 00:19:14.360
agency bugged over a thousand wrong phone numbers


00:19:14.360 --> 00:19:17.840
because the 000 in the last three digits of the number


00:19:17.840 --> 00:19:20.640
got, you know, misstated.


00:19:20.640 --> 00:19:21.540
- Oh no.


00:19:21.540 --> 00:19:25.880
- Yeah, or Eastman Kodak was forced to reinstate


00:19:25.880 --> 00:19:29.840
financial results for two quarters by, from,


00:19:29.840 --> 00:19:32.120
yeah, two million and 13 million respectively


00:19:32.120 --> 00:19:34.040
due to a spreadsheet mistake.


00:19:34.040 --> 00:19:36.640
Yeah, there's just all these crazy examples


00:19:36.640 --> 00:19:37.880
of stuff just going wrong.


00:19:37.880 --> 00:19:40.040
Like, oh, sorry, that was a billion dollar mistake


00:19:40.040 --> 00:19:42.200
we were off by some random thing.


00:19:42.200 --> 00:19:46.400
Anyway, there's a bunch of errors like this and it's really interesting to think how you


00:19:46.400 --> 00:19:49.080
might use the Python tools to not have these errors.


00:19:49.080 --> 00:19:50.080
Yeah.


00:19:50.080 --> 00:19:52.480
I think Excel has too much influence over the world.


00:19:52.480 --> 00:19:53.480
It does.


00:19:53.480 --> 00:19:57.160
But if you were going to use Python and you had a Jupyter notebook, would you run it in


00:19:57.160 --> 00:19:58.680
your downloads folder?


00:19:58.680 --> 00:19:59.680
No.


00:19:59.680 --> 00:20:01.280
No, definitely not.


00:20:01.280 --> 00:20:06.360
Yeah, so this is another, just kind of an interesting and shocking, I never really think


00:20:06.360 --> 00:20:13.400
about it before, but Glyph has written an article called "Never Run Python in Your Downloads Folder."


00:20:13.400 --> 00:20:18.600
It's not just about that. Okay, so there's your advice. Don't run Python in your downloads folder.


00:20:18.600 --> 00:20:24.520
But I think it's a good article to spread around and read because it's a nice short tutorial on


00:20:24.520 --> 00:20:31.400
how syspath works, how it's populated. So Python has this thing called syspath that is, that's where


00:20:31.400 --> 00:20:32.520
where it looks up.


00:20:32.520 --> 00:20:35.960
So if you say import something or mostly that,


00:20:35.960 --> 00:20:37.600
where it's importing things,


00:20:37.600 --> 00:20:39.680
also the dash M or something,


00:20:39.680 --> 00:20:42.460
if you say dash M and then some module,


00:20:42.460 --> 00:20:44.280
where does it find that?


00:20:44.280 --> 00:20:46.120
And it finds it in lots of places.


00:20:46.120 --> 00:20:50.240
One is the normal system include directory


00:20:50.240 --> 00:20:51.740
or the system packages,


00:20:51.740 --> 00:20:53.840
but there's other places too.


00:20:53.840 --> 00:20:57.100
And one of the places where Python uses


00:20:57.100 --> 00:20:59.880
is the location you're in when you run Python.


00:20:59.880 --> 00:21:03.160
So a little example, he talks about a lot of people


00:21:03.160 --> 00:21:06.480
are now using, instead of running pip directly,


00:21:06.480 --> 00:21:11.440
they run Python-M pip, which I also am including


00:21:11.440 --> 00:21:13.440
that in my advice usually,


00:21:13.440 --> 00:21:16.180
because I'm tired of trying to fix people's errors


00:21:16.180 --> 00:21:18.820
when their Python and their pip


00:21:18.820 --> 00:21:21.320
are pointing to two different places.


00:21:21.320 --> 00:21:22.800
That's frustrating.


00:21:22.800 --> 00:21:27.800
So what happens if you run Python-M pip install something,


00:21:28.600 --> 00:21:31.600
some wheel in your downloads directory.


00:21:31.600 --> 00:21:34.600
Well, normally everything's fine,


00:21:34.600 --> 00:21:37.600
except if there's a malicious fake


00:21:37.600 --> 00:21:40.600
pip.py in your downloads directory


00:21:40.600 --> 00:21:43.600
that happens to have gotten there because somebody wrote some


00:21:43.600 --> 00:21:46.600
malicious JavaScript code, stick it there.


00:21:46.600 --> 00:21:49.600
It's possible. I don't know if it would happen, but it's possible.


00:21:49.600 --> 00:21:52.600
It's more likely now. Yeah, especially now.


00:21:52.600 --> 00:21:55.600
Thanks, Cliff. But then it's going to run that


00:21:55.600 --> 00:21:58.200
instead of the pip that you expect it to run,


00:21:58.200 --> 00:22:00.060
which is bothersome.


00:22:00.060 --> 00:22:02.880
So this is hidden, there's some extra advice in here.


00:22:02.880 --> 00:22:05.600
I encourage everybody to read the whole article.


00:22:05.600 --> 00:22:09.440
Understanding how the Python path variable works as well,


00:22:09.440 --> 00:22:13.440
because sometimes other applications will,


00:22:13.440 --> 00:22:17.280
and if the installer of an application can change things


00:22:17.280 --> 00:22:19.960
and change your Python path, it shouldn't,


00:22:19.960 --> 00:22:22.620
but sometimes they'll do that out of convenience.


00:22:22.620 --> 00:22:27.920
So, occasionally look at your Python path and make sure that there's nothing weird in there.


00:22:27.920 --> 00:22:32.420
And maybe contact application developers or if they're doing something odd.


00:22:32.420 --> 00:22:36.720
If you are mucking with Python path, the recommendation is put absolute paths.


00:22:36.720 --> 00:22:38.720
Don't put anything relative in there.


00:22:38.720 --> 00:22:41.120
You want to be able to have complete control over that.


00:22:41.120 --> 00:22:46.320
The problem with the downloads folder is not that the downloads folder has weird permissions


00:22:46.320 --> 00:22:49.620
or higher permissions or anything of that nature.


00:22:49.620 --> 00:22:54.180
It's just that web virus maliciousness might,


00:22:54.180 --> 00:22:57.220
it's most likely to drop the payload there


00:22:57.220 --> 00:22:59.820
and the Python path plus that operation


00:22:59.820 --> 00:23:03.540
or that aspect is what is likely to lead to trouble.


00:23:03.540 --> 00:23:04.380
- Yeah. - Right?


00:23:04.380 --> 00:23:06.260
Like you wouldn't say don't run it in your documents folder


00:23:06.260 --> 00:23:09.060
unless you copy virus Python files in there.


00:23:09.060 --> 00:23:13.860
- Yeah, in the example, it was real of like sometimes,


00:23:13.860 --> 00:23:15.380
like let's say you're behind a firewall


00:23:15.380 --> 00:23:18.620
or something like that and pip install just doesn't work


00:23:18.620 --> 00:23:20.920
and you haven't figured out how to do proxies yet,


00:23:20.920 --> 00:23:22.760
and you really just need some package,


00:23:22.760 --> 00:23:25.420
you might just download the wheel somewhere.


00:23:25.420 --> 00:23:28.500
Okay, you might have that, and the wheel might be fine,


00:23:28.500 --> 00:23:29.740
but put it somewhere else.


00:23:29.740 --> 00:23:31.380
Don't leave it in your downloads directory,


00:23:31.380 --> 00:23:32.740
put it someplace else.


00:23:32.740 --> 00:23:34.660
And please use virtual environments.


00:23:34.660 --> 00:23:35.900
That'll help things as well.


00:23:35.900 --> 00:23:37.220
- Yeah, absolutely.


00:23:37.220 --> 00:23:40.300
Good advice, and definitely another thing to be aware of.


00:23:40.300 --> 00:23:43.020
That internet, it's a scary place.


00:23:43.020 --> 00:23:44.660
(laughing)


00:23:44.660 --> 00:23:45.500
- Yes, but we love it.


00:23:45.500 --> 00:23:46.340
- It's also a good place.


00:23:46.340 --> 00:23:48.180
It goes both ways, 'cause we do love it.


00:23:48.180 --> 00:23:49.380
That's it for our main topics,


00:23:49.380 --> 00:23:51.100
but I do wanna share two quick things,


00:23:51.100 --> 00:23:53.460
and they both have to do with the internet.


00:23:53.460 --> 00:23:57.620
Number one is we just passed 5 million downloads, Brian.


00:23:57.620 --> 00:23:59.100
- Wow. - That's awesome.


00:23:59.100 --> 00:24:03.160
Yeah, and we're in the top 150 or so


00:24:03.160 --> 00:24:04.780
of all tech podcasts in the world.


00:24:04.780 --> 00:24:06.540
So I just wanna say thank you everyone


00:24:06.540 --> 00:24:07.900
that's helped to make that happen,


00:24:07.900 --> 00:24:09.540
'cause that's kind of a milestone, so that's really cool.


00:24:09.540 --> 00:24:10.940
- Yes, thank you. - Indeed.


00:24:10.940 --> 00:24:14.500
Also, I recently finally broke down


00:24:14.500 --> 00:24:18.300
and got a wifi mesh router or routers.


00:24:18.300 --> 00:24:19.340
Can you say singular router?


00:24:19.340 --> 00:24:21.240
It's gotta be plural, right?


00:24:21.240 --> 00:24:22.980
So one of those routers where it has a bunch


00:24:22.980 --> 00:24:25.220
of different stations and they all work together,


00:24:25.220 --> 00:24:27.300
but because of the way it works,


00:24:27.300 --> 00:24:30.420
you don't actually have to connect to different ones


00:24:30.420 --> 00:24:31.260
at different places.


00:24:31.260 --> 00:24:33.380
It's just all one wifi.


00:24:33.380 --> 00:24:38.340
And man, I got this Linksys wifi six mesh router,


00:24:38.340 --> 00:24:42.620
which is quite pricey, but man, it is so, so awesome.


00:24:42.620 --> 00:24:43.860
So if people are like suffering


00:24:43.860 --> 00:24:45.000
from being home all the time that I,


00:24:45.000 --> 00:24:46.820
gosh, I gotta get better internet.


00:24:46.820 --> 00:24:48.540
My internet was actually pretty good here,


00:24:48.540 --> 00:24:51.160
but we started getting a ton of radio interference


00:24:51.160 --> 00:24:54.700
from different sources, and it would degrade it and stuff.


00:24:54.700 --> 00:24:59.080
So I have my recording area office above my garage,


00:24:59.080 --> 00:25:01.320
this little studio apartment thing we built,


00:25:01.320 --> 00:25:03.420
above the garage, which is a separate building


00:25:03.420 --> 00:25:05.200
across from the house.


00:25:05.200 --> 00:25:06.860
And over here, if I go speed test,


00:25:06.860 --> 00:25:10.560
I get 400 megabit measured off my Wi-Fi now.


00:25:10.560 --> 00:25:11.460
That is solid.


00:25:11.460 --> 00:25:15.220
- Okay, so how far away are the mesh nodes?


00:25:15.220 --> 00:25:18.180
- It's probably 50 feet, but it goes through


00:25:18.180 --> 00:25:20.820
like several outside walls, through like a couple


00:25:20.820 --> 00:25:23.120
inside walls, there's layers it's gotta go through.


00:25:23.120 --> 00:25:25.260
But now with the mesh, I could put one of the nodes


00:25:25.260 --> 00:25:28.040
much closer to the wall that I'm close to


00:25:28.040 --> 00:25:30.180
that spans like that gap between houses.


00:25:30.180 --> 00:25:32.500
- Okay, and how are they talking to each other?


00:25:32.500 --> 00:25:34.140
- They have like their own channel,


00:25:34.140 --> 00:25:38.500
and they do some kind of like back channel Wi-Fi 6 thing.


00:25:38.500 --> 00:25:41.200
So anyway, super good recommendation, yes.


00:25:41.200 --> 00:25:47.960
How about you any extra stuff you want to share the world? No, just I'm sort of sick of it and fires and all that


00:25:47.960 --> 00:25:51.320
Sort of stuff. Yeah, man. It's it's looking a little smoky outside and


00:25:51.320 --> 00:25:56.000
Yeah, the whole West Coast and my sympathies go out to the folks in Northern, California


00:25:56.000 --> 00:26:00.160
I just had a meeting with someone and oh my gosh, is that smoky there?


00:26:00.160 --> 00:26:03.880
It looked like night in the daytime in the background


00:26:03.880 --> 00:26:07.680
I could see their window and it was it was dark as if they were in it like a different time zone


00:26:08.000 --> 00:26:11.960
But they weren't not good. So hopefully hopefully that all in soon


00:26:11.960 --> 00:26:17.840
But before we end this episode I got a question Brian for you


00:26:17.840 --> 00:26:22.920
Are you a real programmer like a real one like a hardcore? I mean you do see plus-plus


00:26:22.920 --> 00:26:24.920
So I put you a little closer. Oh my god


00:26:24.920 --> 00:26:29.920
It's posture syndrome flares every time I get that question. So I don't think so


00:26:29.920 --> 00:26:32.720
Let's go to XKCD and answer it. Okay, okay


00:26:32.720 --> 00:26:37.620
So XKCD has this cartoon called Real Programmers, and it starts with two


00:26:37.620 --> 00:26:42.240
people debating about what kind of editor they're using, right?


00:26:42.240 --> 00:26:46.320
It says there's somebody working and they're using Nano, the editor.


00:26:46.320 --> 00:26:51.340
And the person, come on, Nano for real, real programmers use Emacs.


00:26:51.340 --> 00:26:55.040
And then Brian walks in, Hey, real programmers use Vim.


00:26:55.040 --> 00:26:55.600
Come on.


00:26:55.600 --> 00:26:56.560
Oh yeah.


00:26:56.560 --> 00:26:58.340
Well, real programmers use Ed.


00:26:58.340 --> 00:27:01.460
No, no real programmers use cat and just stick it on the end.


00:27:01.740 --> 00:27:05.620
Real programmers use a magnetized needle in a steady hand.


00:27:05.620 --> 00:27:09.620
Excuse me, but real programmers use butterflies.


00:27:09.620 --> 00:27:11.580
Everyone turns and looks at the person.


00:27:11.580 --> 00:27:12.620
They open their hands


00:27:12.620 --> 00:27:15.460
and they let the delicate wings flap once.


00:27:15.460 --> 00:27:17.220
The disturbance ripples outward,


00:27:17.220 --> 00:27:19.260
changing the flow of the eddy currents


00:27:19.260 --> 00:27:20.300
in the upper atmosphere,


00:27:20.300 --> 00:27:23.900
which acts as a lens that deflects incoming cosmic rays,


00:27:23.900 --> 00:27:25.820
focusing them to strike the derived platter


00:27:25.820 --> 00:27:27.860
and flip the desired bit.


00:27:27.860 --> 00:27:29.060
Nice.


00:27:29.060 --> 00:27:31.100
Of course, there's an Emacs command to do that.


00:27:31.100 --> 00:27:36.100
Oh yeah? Yeah. Command X, Command M, Command Butterfly.


00:27:36.100 --> 00:27:39.100
[Laughter]


00:27:39.100 --> 00:27:40.100
Nice.


00:27:40.100 --> 00:27:46.100
Yeah, yeah. C-M-C-X, C-X-C-M-C-M-Butterfly. Indeed.


00:27:46.100 --> 00:27:48.100
Damn it, Emacs, they say.


00:27:48.100 --> 00:27:50.100
Does anybody use Emacs?


00:27:50.100 --> 00:27:54.100
Yeah, well, I don't know, but I'm not a real programmer, because I don't use butterflies. I'm sorry.


00:27:54.100 --> 00:27:56.100
No, I don't use butterflies.


00:27:56.100 --> 00:28:00.100
Okay, well, we're in the joke section. I've got to share a terrible joke that my wife came up with.


00:28:00.100 --> 00:28:01.100
came up with.


00:28:01.100 --> 00:28:07.020
Okay, 99 bottles of beer on the wall, 99 bottles of beer, take one down, pass it around, now


00:28:07.020 --> 00:28:08.740
everybody's infected.


00:28:08.740 --> 00:28:09.740
Morons.


00:28:09.740 --> 00:28:15.180
Hey, that sounds like college here in the US.


00:28:15.180 --> 00:28:16.180
I think that's what they're doing.


00:28:16.180 --> 00:28:18.220
I'm like, I can tell from all the news I'm watching.


00:28:18.220 --> 00:28:19.220
Oh my gosh.


00:28:19.220 --> 00:28:20.220
Geez, sorry.


00:28:20.220 --> 00:28:22.660
Yeah, these jokes are the 2020 jokes.


00:28:22.660 --> 00:28:27.460
Oh yeah, so this won't make sense in the future.


00:28:27.460 --> 00:28:32.700
So in the future, when you speak to a historian and you say, "Oh, you're a historian.


00:28:32.700 --> 00:28:33.700
What do you study?"


00:28:33.700 --> 00:28:38.060
"Oh, I actually study the year 2020."


00:28:38.060 --> 00:28:39.060
That won't be enough.


00:28:39.060 --> 00:28:40.540
You'll have to say, "Well, which part?


00:28:40.540 --> 00:28:44.060
Do you study the beginning?


00:28:44.060 --> 00:28:45.740
Do you study the financial crash?


00:28:45.740 --> 00:28:47.180
Do you study this crazy election?


00:28:47.180 --> 00:28:50.260
Do you study the pandemic?"


00:28:50.260 --> 00:28:52.620
That year is not enough to say what your specialty is.


00:28:52.620 --> 00:28:53.620
You got to pick one.


00:28:53.620 --> 00:28:54.620
Pick a quarter.


00:28:54.620 --> 00:28:55.620
Yeah.


00:28:55.620 --> 00:28:56.620
Pick a quarter.


00:28:56.620 --> 00:28:59.260
I study the fires. Oh boy.


00:28:59.260 --> 00:29:02.380
Anyway, well, good talking with you as always.


00:29:02.380 --> 00:29:03.740
You as well. Catch you later.


00:29:03.740 --> 00:29:07.900
Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes.


00:29:07.900 --> 00:29:14.140
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm.


00:29:14.140 --> 00:29:18.220
If you have a news item you want featured, just visit PythonBytes.fm and send it our way.


00:29:18.220 --> 00:29:21.020
We're always on the lookout for sharing something cool.


00:29:21.020 --> 00:29:24.220
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:29:24.220 --> 00:29:27.580
Thank you for listening and sharing this podcast with your friends and colleagues.

