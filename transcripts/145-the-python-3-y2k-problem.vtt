
00:00:00.000 --> 00:00:04.480
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.480 --> 00:00:09.680
This is episode 145 recorded August 28th, 2019.


00:00:09.680 --> 00:00:13.280
I'm Michael Kennedy and Brian is away on vacation.


00:00:13.280 --> 00:00:14.560
Yeah, I was on vacation last week.


00:00:14.560 --> 00:00:16.960
Now Brian's gone, but don't despair.


00:00:16.960 --> 00:00:18.640
We have two special guests.


00:00:18.640 --> 00:00:19.760
We have Matt Harrison.


00:00:19.760 --> 00:00:20.320
Hello.


00:00:20.320 --> 00:00:20.880
Welcome, Matt.


00:00:20.880 --> 00:00:23.440
And Anthony Sottile.


00:00:23.440 --> 00:00:24.000
Welcome.


00:00:24.000 --> 00:00:25.200
First time here on the show.


00:00:25.200 --> 00:00:25.840
Nice to have you here.


00:00:25.840 --> 00:00:26.800
Nice to be on the show.


00:00:26.800 --> 00:00:27.920
Yeah, it's great to have you.


00:00:27.920 --> 00:00:30.920
I'm looking forward to talking about all these things with you.


00:00:30.920 --> 00:00:32.920
Now, before we get on to our topics,


00:00:32.920 --> 00:00:34.920
let me just say real quickly, the show is brought to you by Datadog.


00:00:34.920 --> 00:00:37.920
Check them out at pythonbytes.fm/datadog.


00:00:37.920 --> 00:00:39.920
More on that later.


00:00:39.920 --> 00:00:46.920
But I want to focus first on something that's going to help people learning Python


00:00:46.920 --> 00:00:49.920
or teaching people who are learning Python.


00:00:49.920 --> 00:00:54.920
And that's this project called Friendly Traceback.


00:00:54.920 --> 00:00:55.920
Matt, you do a lot of teaching.


00:00:55.920 --> 00:00:58.920
What is your experience with folks,


00:00:58.920 --> 00:01:00.920
you know, what are their first programming experiences


00:01:00.920 --> 00:01:02.920
running into like a traceback crash?


00:01:02.920 --> 00:01:03.920
Like, is it really clear for them?


00:01:03.920 --> 00:01:07.920
Most of my training is with experienced technologists


00:01:07.920 --> 00:01:10.920
who understand what a traceback is.


00:01:10.920 --> 00:01:14.920
So, I do do some with kids in elementary school,


00:01:14.920 --> 00:01:19.920
that sort of thing, but my issue is I like the idea here,


00:01:19.920 --> 00:01:24.920
but in my courses I teach explicitly have them hit errors


00:01:24.920 --> 00:01:28.240
and teach them how to read the trace back and recover them.


00:01:28.240 --> 00:01:29.200
How to recover, yeah.


00:01:29.200 --> 00:01:30.920
So I like the idea.


00:01:30.920 --> 00:01:33.880
The other thing that I have sort of an issue with


00:01:33.880 --> 00:01:35.960
is that you have to install it, right?


00:01:35.960 --> 00:01:40.400
So having someone who's a beginner install something,


00:01:40.400 --> 00:01:41.040
I don't know.


00:01:41.040 --> 00:01:41.960
What do you think about that?


00:01:41.960 --> 00:01:44.120
That's an interesting question, because you--


00:01:44.120 --> 00:01:46.040
well, let me tell folks what it is real quick.


00:01:46.040 --> 00:01:48.740
So this one comes to us from Jose Carlos Garcia, I think,


00:01:48.740 --> 00:01:51.000
because his Twitter name is in elite speak.


00:01:51.000 --> 00:01:52.840
So that's my attempt to understand it back


00:01:52.840 --> 00:01:53.680
into English.


00:01:53.680 --> 00:01:55.380
(laughing)


00:01:55.380 --> 00:01:57.040
Thank you, Carlos, for sending that in.


00:01:57.040 --> 00:01:59.960
And the idea is it's really aimed at beginners,


00:01:59.960 --> 00:02:01.720
as you kind of hinted at, Matt.


00:02:01.720 --> 00:02:04.160
And let me just give folks a sense of what it is.


00:02:04.160 --> 00:02:06.160
So normal traceback will have, like,


00:02:06.160 --> 00:02:08.320
in reverse order, the call stack,


00:02:08.320 --> 00:02:10.800
and then maybe the line of code,


00:02:10.800 --> 00:02:13.700
and then the error message, like the error type,


00:02:13.700 --> 00:02:16.200
and then possibly the error message, right?


00:02:16.200 --> 00:02:20.440
Well, what this does instead is it will


00:02:20.440 --> 00:02:23.280
catch the exception type like an index error,


00:02:23.280 --> 00:02:25.840
and then it has a little help message and an example.


00:02:25.840 --> 00:02:28.040
Right, so it says, oh, this was a Python exception,


00:02:28.040 --> 00:02:29.040
you got an index error,


00:02:29.040 --> 00:02:32.120
that means the list index is out of range in this case,


00:02:32.120 --> 00:02:34.640
and this error occurs under these circumstances,


00:02:34.640 --> 00:02:37.880
here's usually what happened, here's usually the cause.


00:02:37.880 --> 00:02:39.800
And then one thing I really like about it


00:02:39.800 --> 00:02:42.440
is it first shows the line of code where it happened,


00:02:42.440 --> 00:02:44.520
and then it actually shows the local variables.


00:02:44.520 --> 00:02:45.880
So like in the example there,


00:02:45.880 --> 00:02:48.360
it has a function called get last item


00:02:48.360 --> 00:02:49.360
and you're passing a list,


00:02:49.360 --> 00:02:53.600
And it says the list that was passed was 1, 2, 3.


00:02:53.600 --> 00:02:56.120
And then here is actually like three or four lines of code


00:02:56.120 --> 00:02:59.080
where this error is happening and what the index value was


00:02:59.080 --> 00:02:59.720
and all that.


00:02:59.720 --> 00:03:02.840
So you could actually diagnose this


00:03:02.840 --> 00:03:04.520
without even stepping into a debugger.


00:03:04.520 --> 00:03:06.000
You could just say, oh, I see.


00:03:06.000 --> 00:03:08.560
The index is 3, but actually it's 0, 1, 2


00:03:08.560 --> 00:03:10.720
by just looking at the output on the screen here.


00:03:10.720 --> 00:03:12.060
And that I think is pretty cool.


00:03:12.060 --> 00:03:12.560
Yeah.


00:03:12.560 --> 00:03:14.320
I think it's definitely useful.


00:03:14.320 --> 00:03:16.240
I looked over the documentation.


00:03:16.240 --> 00:03:18.200
I thought, this is really cool.


00:03:18.200 --> 00:03:23.200
My issue with beginners is how to walk them through something.


00:03:23.200 --> 00:03:27.200
And installing is always a pain when they're beginners.


00:03:27.200 --> 00:03:29.800
I also-- the other thing that's really cool about it


00:03:29.800 --> 00:03:32.520
is it looks like it has some hooks.


00:03:32.520 --> 00:03:35.840
So you can define your own exceptions.


00:03:35.840 --> 00:03:38.120
You can customize how you handle those.


00:03:38.120 --> 00:03:40.480
So I think that looks kind of cool as well.


00:03:40.480 --> 00:03:46.040
I mean, I can imagine maybe if you're in a environment at work


00:03:46.040 --> 00:03:49.640
where you have support people,


00:03:49.640 --> 00:03:52.120
and they might have to look at your code


00:03:52.120 --> 00:03:56.680
or look at your servers and take problems and resolve them.


00:03:56.680 --> 00:03:58.640
This might be something that could aid them.


00:03:58.640 --> 00:04:01.480
- Right, the fact that it catches the local variables


00:04:01.480 --> 00:04:03.280
in production would be kind of nice.


00:04:03.280 --> 00:04:05.040
Yeah, I think it really comes down to,


00:04:05.040 --> 00:04:07.680
are you using any external packages?


00:04:07.680 --> 00:04:10.680
If there's a pip install or a condo install,


00:04:10.680 --> 00:04:13.400
you could wrap this up to include friendly traceback,


00:04:13.400 --> 00:04:14.960
but if you're using none of that,


00:04:14.960 --> 00:04:17.840
then all of a sudden, yeah, this is like another burden, right?


00:04:17.840 --> 00:04:19.120
- Yeah. - Yeah.


00:04:19.120 --> 00:04:22.080
- This actually looks a lot like the PyTest tracebacks.


00:04:22.080 --> 00:04:23.760
I sometimes find that those are useful


00:04:23.760 --> 00:04:25.880
and sometimes not so useful.


00:04:25.880 --> 00:04:26.720
- Yeah, exactly.


00:04:26.720 --> 00:04:27.560
I think it depends.


00:04:27.560 --> 00:04:29.200
Like they said that there's a lot of tools


00:04:29.200 --> 00:04:31.440
to make exceptions better for advanced developers.


00:04:31.440 --> 00:04:32.520
This is not that.


00:04:32.520 --> 00:04:34.000
This is something else.


00:04:34.000 --> 00:04:35.640
One of the things I thought that was cool about this


00:04:35.640 --> 00:04:38.880
is there's three ways to like integrate it into your app.


00:04:38.880 --> 00:04:41.880
You can install it as an exception hook.


00:04:41.880 --> 00:04:45.000
So all exceptions of the application are caught,


00:04:45.000 --> 00:04:47.320
which is cool 'cause I mean, I knew that that was possible,


00:04:47.320 --> 00:04:49.400
but I didn't really, I've never really played with that.


00:04:49.400 --> 00:04:50.580
And I'm like, oh, look how easy it is.


00:04:50.580 --> 00:04:54.560
You just take a function and assign it to this callback


00:04:54.560 --> 00:04:56.480
globally and any error will go through it.


00:04:56.480 --> 00:04:57.320
That's cool.


00:04:57.320 --> 00:05:00.080
So you can do that at the top of like your startup, your app.


00:05:00.080 --> 00:05:02.720
You can actually, in a try except block,


00:05:02.720 --> 00:05:06.080
you know, say explain, friendly trace back explain,


00:05:06.080 --> 00:05:08.640
and it'll do that on demand.


00:05:08.640 --> 00:05:10.280
But both of those require you changing your code.


00:05:10.280 --> 00:05:11.760
You can also use it from the outside


00:05:11.760 --> 00:05:14.960
when you run an app, you can say -m friendly trace back,


00:05:14.960 --> 00:05:19.040
then the script file, and that way you can run it on code


00:05:19.040 --> 00:05:21.880
that's not modified to be friendly, I guess.


00:05:21.880 --> 00:05:22.900
Unfriendly code, what do you call it?


00:05:22.900 --> 00:05:23.740
I don't know.


00:05:23.740 --> 00:05:25.800
Anthony, let's wrap this up.


00:05:25.800 --> 00:05:26.720
What are your thoughts on this thing?


00:05:26.720 --> 00:05:27.560
- Looks good.


00:05:27.560 --> 00:05:29.340
I'm actually teaching my brother how to program right now,


00:05:29.340 --> 00:05:32.400
and he was pretty overwhelmed by the first stack trace


00:05:32.400 --> 00:05:34.620
that he saw, and I think if he would have saw something


00:05:34.620 --> 00:05:37.300
like this, it would have changed his perception


00:05:37.300 --> 00:05:39.240
about errors and maybe taught him something more


00:05:39.240 --> 00:05:42.600
than I had to teach him after the fact.


00:05:42.600 --> 00:05:43.100
Exactly.


00:05:43.100 --> 00:05:44.020
It looks pretty cool.


00:05:44.020 --> 00:05:45.840
Yeah, I totally-- I think it's awesome.


00:05:45.840 --> 00:05:47.240
I really, really like the idea.


00:05:47.240 --> 00:05:49.920
I do take Matt's point as valid, as like it's now


00:05:49.920 --> 00:05:52.960
a step preceding actually writing code


00:05:52.960 --> 00:05:54.240
that they've got to go through.


00:05:54.240 --> 00:05:55.740
So depending on how much control you


00:05:55.740 --> 00:05:58.780
have over their environment, if you can get this in place


00:05:58.780 --> 00:06:00.320
for them, then maybe it's no big deal.


00:06:00.320 --> 00:06:01.360
But yeah.


00:06:01.360 --> 00:06:02.920
Anyway, worth considering.


00:06:02.920 --> 00:06:04.480
Matt, what have you got next for us?


00:06:04.480 --> 00:06:07.560
So recently, the Pandas developers


00:06:07.560 --> 00:06:10.500
released the Pandas User Survey from 2019.


00:06:10.500 --> 00:06:11.940
So this came out last week.


00:06:11.940 --> 00:06:18.580
They had a call on Twitter, and they had about 1,200 responses.


00:06:18.580 --> 00:06:19.420
Yeah, that's cool.


00:06:19.420 --> 00:06:21.860
I was surprised they got so many folks to participate.


00:06:21.860 --> 00:06:24.420
Those are really solid numbers for statistics.


00:06:24.420 --> 00:06:25.220
Yeah.


00:06:25.220 --> 00:06:27.120
I think we've got a link to the survey there.


00:06:27.120 --> 00:06:30.580
But some of the things that stood out to me


00:06:30.580 --> 00:06:33.960
is that more than half of the people who responded


00:06:33.960 --> 00:06:36.900
have been using Pandas for less than two years.


00:06:36.900 --> 00:06:39.300
Penn has been out for quite a while now,


00:06:39.300 --> 00:06:43.020
but it seems to be one of--


00:06:43.020 --> 00:06:46.540
from what I see, it's one of the key drivers of growth.


00:06:46.540 --> 00:06:48.500
It's just sort of a central component


00:06:48.500 --> 00:06:51.700
of the data analysis, data science space.


00:06:51.700 --> 00:06:53.620
And it looks like they're getting


00:06:53.620 --> 00:06:55.100
a lot of new users there.


00:06:55.100 --> 00:06:58.580
Yeah, so we talked about the incredible growth of Python


00:06:58.580 --> 00:06:59.260
before.


00:06:59.260 --> 00:07:01.740
And a lot of that has to do with this big inflection


00:07:01.740 --> 00:07:04.820
point where Python was largely adopted,


00:07:04.820 --> 00:07:07.020
moved to by data scientists.


00:07:07.020 --> 00:07:09.860
Do you think this is an indicator of that?


00:07:09.860 --> 00:07:12.480
There's all these new folks coming into the Python ecosystem,


00:07:12.480 --> 00:07:14.680
and they're often coming into the data science space.


00:07:14.680 --> 00:07:17.460
And so hence, they haven't been here for many, many years?


00:07:17.460 --> 00:07:18.340
Yeah, I think so.


00:07:18.340 --> 00:07:21.700
I mean, that's the sexy thing right now, data science.


00:07:21.700 --> 00:07:24.220
And it kind of didn't exist before,


00:07:24.220 --> 00:07:27.220
so there's a big push for AI, ML, that sort of thing.


00:07:27.220 --> 00:07:31.140
But if you look at the number one tool


00:07:31.140 --> 00:07:33.580
that data scientists use, it's often called Python.


00:07:33.580 --> 00:07:36.060
And I would say that Pandas is probably


00:07:36.060 --> 00:07:39.140
the number one tool of those people who


00:07:39.140 --> 00:07:40.860
are using data science.


00:07:40.860 --> 00:07:41.500
Yeah, cool.


00:07:41.500 --> 00:07:42.580
What else is in the survey?


00:07:42.580 --> 00:07:43.660
What was really interesting is they


00:07:43.660 --> 00:07:45.580
have the numbers of the operating system.


00:07:45.580 --> 00:07:47.780
So I sort of geek out on that sort of thing.


00:07:47.780 --> 00:07:51.300
But this isn't what I would have thought at all,


00:07:51.300 --> 00:07:53.340
because some definitions of data scientists


00:07:53.340 --> 00:07:55.360
are they're a statistician who uses


00:07:55.360 --> 00:07:57.460
a MacBook in San Francisco.


00:07:57.460 --> 00:08:00.060
Yeah, you definitely do better data science


00:08:00.060 --> 00:08:03.700
if like the back of your laptop glows in Alienware,


00:08:03.700 --> 00:08:05.580
maybe, but certainly in Apple.


00:08:05.580 --> 00:08:07.580
No, I'm just kidding.


00:08:07.580 --> 00:08:10.180
Yeah, so the numbers, actually, they


00:08:10.180 --> 00:08:14.540
have about 60% of their users use both Linux,


00:08:14.540 --> 00:08:18.300
60% use Windows, and 42, Mac.


00:08:18.300 --> 00:08:19.780
So I wouldn't have thought that.


00:08:19.780 --> 00:08:21.660
I mean, obviously, those don't add up to 100.


00:08:21.660 --> 00:08:24.940
So I imagine you've got a lot of deployments on Linux,


00:08:24.940 --> 00:08:25.740
that sort of thing.


00:08:25.740 --> 00:08:29.100
But people tend to forget that Linux sort of rules


00:08:29.100 --> 00:08:30.780
the enterprise world.


00:08:30.780 --> 00:08:33.220
And I think this might be further indication


00:08:33.220 --> 00:08:36.620
that Panda's adoption or Python's adoption


00:08:36.620 --> 00:08:39.540
is not limited to just startups and people


00:08:39.540 --> 00:08:41.220
hacking around on their MacBook.


00:08:41.220 --> 00:08:43.140
- I'm always super surprised by the percentage


00:08:43.140 --> 00:08:45.500
of Windows users when you consider Python.


00:08:45.500 --> 00:08:47.540
And I guess it makes sense 'cause it's really easy


00:08:47.540 --> 00:08:49.380
to get started with Python on Windows,


00:08:49.380 --> 00:08:51.940
but the number just blows me away every time.


00:08:51.940 --> 00:08:53.340
- Yeah, absolutely.


00:08:53.340 --> 00:08:55.180
Steve Dower did a great talk at PyCon


00:08:55.180 --> 00:08:57.700
called "Python is Okay on Windows Actually"


00:08:57.700 --> 00:08:58.540
or something like that.


00:08:58.540 --> 00:09:00.180
And he has some really interesting--


00:09:00.180 --> 00:09:01.020
- That was a great talk.


00:09:01.020 --> 00:09:01.840
- Yeah, it was really good.


00:09:01.840 --> 00:09:02.980
And it had some interesting statistics.


00:09:02.980 --> 00:09:06.100
I feel like the Windows Python developers


00:09:06.100 --> 00:09:08.260
are somewhat in this realm of like


00:09:08.260 --> 00:09:11.500
the dark matter developers in that you know they're using it


00:09:11.500 --> 00:09:13.020
'cause it keeps showing up in these surveys,


00:09:13.020 --> 00:09:16.060
but you go to PyCon and there's many more MacBooks


00:09:16.060 --> 00:09:18.060
toting around and whatnot.


00:09:18.060 --> 00:09:20.980
But yeah, it's definitely a good thing to remember.


00:09:20.980 --> 00:09:21.820
You know, honestly, Matt,


00:09:21.820 --> 00:09:22.940
the thing that surprised me most here


00:09:22.940 --> 00:09:24.540
is how high Linux is in this group.


00:09:24.540 --> 00:09:26.980
- Yeah, I imagine that's deployments,


00:09:26.980 --> 00:09:31.380
But the other interesting number here is Python 3 percentage.


00:09:31.380 --> 00:09:34.500
And Python 3 percentage is 93%.


00:09:34.500 --> 00:09:37.620
So legacy Python, goodbye there, I guess.


00:09:37.620 --> 00:09:40.460
The data scientists move on to the latest and greatest.


00:09:40.460 --> 00:09:43.100
Yeah, the data scientists are leading the way


00:09:43.100 --> 00:09:45.300
with ditching legacy Python.


00:09:45.300 --> 00:09:47.580
I mean, the whole Python 3 statement


00:09:47.580 --> 00:09:50.020
came out of that space, which is pretty cool.


00:09:50.020 --> 00:09:52.620
I think that also has to do with less legacy code,


00:09:52.620 --> 00:09:56.140
as well as the models and the technology are changing so fast.


00:09:56.140 --> 00:09:58.280
you don't keep building on the same code.


00:09:58.280 --> 00:09:59.080
You're like, forget that.


00:09:59.080 --> 00:10:01.580
We're going to go to TensorFlow, because this whole thing is


00:10:01.580 --> 00:10:03.400
slow and wrong, right?


00:10:03.400 --> 00:10:05.600
Yeah, like you said, I think they're leading the way.


00:10:05.600 --> 00:10:07.640
Well, speaking of Python 3, I think


00:10:07.640 --> 00:10:10.040
Anthony has something around that as well.


00:10:10.040 --> 00:10:10.560
Yeah.


00:10:10.560 --> 00:10:11.400
I do indeed.


00:10:11.400 --> 00:10:14.500
Yeah, let's talk about the Y2K problem


00:10:14.500 --> 00:10:16.960
that I kind of stumbled upon recently.


00:10:16.960 --> 00:10:18.800
The YP3 problem?


00:10:18.800 --> 00:10:19.300
Yeah.


00:10:19.300 --> 00:10:20.280
[LAUGHTER]


00:10:20.280 --> 00:10:21.680
Yeah, OK, what is this?


00:10:21.680 --> 00:10:24.600
Python 3.8, close to release, and Python 3.9


00:10:24.600 --> 00:10:25.840
right around the corner.


00:10:25.840 --> 00:10:27.640
There's the question that comes up, which is,


00:10:27.640 --> 00:10:29.640
what is going to come after?


00:10:29.640 --> 00:10:31.400
And we really have two main choices,


00:10:31.400 --> 00:10:35.120
which would be Python 3.10 or Python 4.0.


00:10:35.120 --> 00:10:37.080
But both of these present problems just


00:10:37.080 --> 00:10:39.400
because of their version number.


00:10:39.400 --> 00:10:41.000
So there's a significant amount of code


00:10:41.000 --> 00:10:44.280
out there that's using the sys.version and sys.version


00:10:44.280 --> 00:10:46.680
info variables in the sys module.


00:10:46.680 --> 00:10:49.880
Right, and trying to just take that string and go,


00:10:49.880 --> 00:10:52.400
is there a Python 3 or 2 in here, or something like that,


00:10:52.400 --> 00:10:52.900
right?


00:10:52.900 --> 00:10:55.680
Yeah, there's a lot of slicing or checking


00:10:55.680 --> 00:10:57.600
the first character of that string,


00:10:57.600 --> 00:10:59.520
and it presents a number of different problems.


00:10:59.520 --> 00:11:01.560
The most common one that I've seen


00:11:01.560 --> 00:11:04.000
is when you access sys.version


00:11:04.000 --> 00:11:06.200
and look at the first three characters,


00:11:06.200 --> 00:11:10.800
and that works fine, 2.7 or 3.6 or whatever.


00:11:10.800 --> 00:11:13.800
But as soon as the second minor version of Python becomes 10,


00:11:13.800 --> 00:11:16.160
you're suddenly reporting Python 3.1 again.


00:11:16.160 --> 00:11:18.440
- All right, sorry, this doesn't support Python 3.1.


00:11:18.440 --> 00:11:20.000
You need at least version 3.5.


00:11:20.000 --> 00:11:22.240
You're like, no, it is 3.5.


00:11:22.240 --> 00:11:25.520
- There's an even worse situation


00:11:25.520 --> 00:11:27.960
where if you check, even if you're doing it correctly


00:11:27.960 --> 00:11:31.520
and using sys.versioninfo, if you only check the first number


00:11:31.520 --> 00:11:33.440
and only check equality, so like say,


00:11:33.440 --> 00:11:36.600
sys.versioninfo 0 equals equals 3,


00:11:36.600 --> 00:11:38.720
that's a perfectly fine check if you're checking


00:11:38.720 --> 00:11:40.880
if it's exactly Python 3.


00:11:40.880 --> 00:11:43.560
But as soon as Python 4 happens, that condition


00:11:43.560 --> 00:11:45.080
is going to be false.


00:11:45.080 --> 00:11:45.740
And guess what?


00:11:45.740 --> 00:11:47.320
You're going to run Python 2 again.


00:11:47.320 --> 00:11:49.200
Yeah, some of the maintainability libraries,


00:11:49.200 --> 00:11:51.480
like 6, have this in there, right?


00:11:51.480 --> 00:11:51.960
Yep.


00:11:51.960 --> 00:11:55.000
Yeah, 6 is broken if you change the version to 4,


00:11:55.000 --> 00:11:59.740
which is a little scary given it's one of the most installed libraries,


00:11:59.740 --> 00:12:00.780
as we'll see later.


00:12:00.780 --> 00:12:04.400
- Yeah, well, I guess that makes sense because six is not divisible by four,


00:12:04.400 --> 00:12:05.440
so it's probably fine.


00:12:05.440 --> 00:12:07.600
No, actually, this is really tricky.


00:12:07.600 --> 00:12:09.960
You know, it reminds me of Windows 10, right?


00:12:09.960 --> 00:12:13.680
Like, if you look at the Windows operating system numbers,


00:12:13.680 --> 00:12:18.800
we had Windows 7, which was XP, Windows 8, which was Vista, and then Windows 10.


00:12:18.800 --> 00:12:22.000
And the reason they don't have a Windows 9 is exactly this.


00:12:22.000 --> 00:12:24.440
Like so many people were doing substring searches


00:12:24.440 --> 00:12:28.880
for Windows space nine for looking for 95 or 98.


00:12:28.880 --> 00:12:32.040
And so if they had a nine that was beyond, you know,


00:12:32.040 --> 00:12:32.880
Vista or whatever.


00:12:32.880 --> 00:12:34.680
- Yeah, even Oracle Java had that problem.


00:12:34.680 --> 00:12:37.280
- Yeah, it's, so they just said,


00:12:37.280 --> 00:12:38.320
you don't forget it, we're going to 10,


00:12:38.320 --> 00:12:40.040
but it doesn't sound like skipping to four


00:12:40.040 --> 00:12:42.520
is going to make this better, probably worse.


00:12:42.520 --> 00:12:44.360
I don't know, what you think is the worst way to go?


00:12:44.360 --> 00:12:46.600
- I think skipping to four is going to be worse.


00:12:46.600 --> 00:12:49.800
Most of the things with the 3.10 release


00:12:49.800 --> 00:12:52.760
will just be like slightly broken,


00:12:52.760 --> 00:12:55.920
but trying to run Python 2 code in Python 3


00:12:55.920 --> 00:12:57.600
is way more broken.


00:12:57.600 --> 00:12:58.440
- Yeah, for sure.


00:12:58.440 --> 00:13:01.380
- So I haven't followed this, but I recall,


00:13:01.380 --> 00:13:03.400
and maybe my memory's just fading me,


00:13:03.400 --> 00:13:07.720
that there was talk that there would never be a Python 4.


00:13:07.720 --> 00:13:09.840
So has that changed?


00:13:09.840 --> 00:13:12.360
- As far as I know, that hasn't changed.


00:13:12.360 --> 00:13:16.080
- I think the jury's still kinda out on that one.


00:13:16.080 --> 00:13:19.120
From what I understand, there was talks


00:13:19.120 --> 00:13:22.800
with Python 4 just being the next version of Python 3.


00:13:22.800 --> 00:13:25.140
But I don't think anyone has definitively chosen


00:13:25.140 --> 00:13:28.120
whether it'll be 3.10 or 4.0 next.


00:13:28.120 --> 00:13:30.440
- Yeah, I mean, we're at this crossroads, right?


00:13:30.440 --> 00:13:32.200
Guido has expressed a dislike


00:13:32.200 --> 00:13:35.240
of double-digit second version numbers.


00:13:35.240 --> 00:13:38.120
But everyone is tired of this two versus three debate.


00:13:38.120 --> 00:13:40.000
We don't wanna kick it up a notch, right?


00:13:40.000 --> 00:13:41.600
So where do you go from there, right?


00:13:41.600 --> 00:13:45.920
- Well, just release 3.9.9.9.9 forever.


00:13:45.920 --> 00:13:46.760
- That's right.


00:13:46.760 --> 00:13:47.600
Yeah, it'll be fine.


00:13:47.600 --> 00:13:49.400
Yeah, this actually is coming up pretty quickly.


00:13:49.400 --> 00:13:53.160
So 3.9 will reach beta, according to the pep,


00:13:53.160 --> 00:13:56.540
will reach beta sometime in 2020.


00:13:56.540 --> 00:14:00.200
And usually when the next version releases on beta,


00:14:00.200 --> 00:14:02.340
they start developing the version afterwards.


00:14:02.340 --> 00:14:04.720
And so we'll start seeing 3.10 in the wild.


00:14:04.720 --> 00:14:06.000
But I made a couple of easy ways


00:14:06.000 --> 00:14:08.320
that you can start fixing these problems


00:14:08.320 --> 00:14:10.960
before they're a problem, I guess.


00:14:10.960 --> 00:14:14.120
One of them, I pre-built a version of Python 3.10.


00:14:14.120 --> 00:14:17.120
Well, it's actually 3.8, but with a fake version number.


00:14:17.120 --> 00:14:19.800
And you can run that directly on Ubuntu today.


00:14:19.800 --> 00:14:21.240
And I made a Flake 8 plugin,


00:14:21.240 --> 00:14:25.400
which checks for these common issues called Flake 8 2020.


00:14:25.400 --> 00:14:26.720
- Nice, yeah, that's really cool.


00:14:26.720 --> 00:14:28.120
Yeah, mix it into your container.


00:14:28.120 --> 00:14:31.080
- So does that suggest that you use version info instead?


00:14:31.080 --> 00:14:32.720
- Yeah, it makes the proper suggestion


00:14:32.720 --> 00:14:35.640
when it detects which thing that you're using incorrectly.


00:14:35.640 --> 00:14:36.480
- Cool. - Yeah, super.


00:14:36.480 --> 00:14:37.320
And that's great.


00:14:37.320 --> 00:14:38.360
Now, before we get to the next one,


00:14:38.360 --> 00:14:40.640
let me just tell you all quickly about Datadog.


00:14:40.640 --> 00:14:43.280
They're long-term supporter of the show.


00:14:43.280 --> 00:14:46.940
And Datadog is a modern cloud-scale monitoring platform


00:14:46.940 --> 00:14:48.320
It brings all your metrics and logs


00:14:48.320 --> 00:14:50.120
and distributed traces together.


00:14:50.120 --> 00:14:51.920
So basically it will auto instrument


00:14:51.920 --> 00:14:54.920
all the popular frameworks, Django, Flask, Postgres,


00:14:54.920 --> 00:14:58.240
whatnot, and you can actually trace your requests


00:14:58.240 --> 00:15:01.560
and your performance across different service boundaries.


00:15:01.560 --> 00:15:03.400
So not just what is your Python code doing


00:15:03.400 --> 00:15:04.460
or what is your database doing,


00:15:04.460 --> 00:15:08.840
but like all together in one coherent thing, which is cool.


00:15:08.840 --> 00:15:10.800
If you go to a free trial with them,


00:15:10.800 --> 00:15:12.480
you'll get a cool Datadog t-shirt.


00:15:12.480 --> 00:15:16.240
Just visit pythonbites.fm/datadog to get started.


00:15:16.240 --> 00:15:19.000
Now, Anthony, you had hinted that we may come back


00:15:19.000 --> 00:15:20.960
to popular packages.


00:15:20.960 --> 00:15:23.880
And some folks out of the,


00:15:23.880 --> 00:15:25.780
I think they're associated with the University of Michigan,


00:15:25.780 --> 00:15:27.680
but they also have their own consulting project,


00:15:27.680 --> 00:15:31.440
these two folks, they did some interesting research


00:15:31.440 --> 00:15:33.480
on the current state of PyPI.


00:15:33.480 --> 00:15:35.760
Now, sometimes people use BigQuery,


00:15:35.760 --> 00:15:37.360
you can ask interesting questions like,


00:15:37.360 --> 00:15:39.880
well, what are the most common user agents


00:15:39.880 --> 00:15:40.960
downloading from PyPI?


00:15:40.960 --> 00:15:44.020
Or what are the most common packages or whatever?


00:15:44.020 --> 00:15:48.900
These folks went all in and they downloaded all of the packages from what I can tell,


00:15:48.900 --> 00:15:51.580
like all of them.


00:15:51.580 --> 00:15:55.820
And then they started analyzing all sorts of stuff about them.


00:15:55.820 --> 00:16:04.940
So they started saying, "Look, we downloaded 178,592 packages, which has roughly 1.7 million


00:16:04.940 --> 00:16:09.660
releases and 77,000 contributors."


00:16:09.660 --> 00:16:13.860
And they also analyzed something that was pretty interesting, the connections or the


00:16:13.860 --> 00:16:17.260
interconnectivity or dependency graphs of these various things.


00:16:17.260 --> 00:16:24.300
And they found there's 157 million import statements in these packages.


00:16:24.300 --> 00:16:26.340
And then, yeah, they just did a bunch of analysis.


00:16:26.340 --> 00:16:29.920
This is basically like an academic research paper.


00:16:29.920 --> 00:16:32.580
So the thing I'm linking to is actually a PDF.


00:16:32.580 --> 00:16:36.380
So look for a download you're going to get rather than a website they set up.


00:16:36.380 --> 00:16:39.880
Yeah, it's pretty interesting what these guys put together.


00:16:39.880 --> 00:16:42.300
What do you see that caught your attention going through this?


00:16:42.300 --> 00:16:46.020
I went to their... I read the paper and then I looked at...


00:16:46.020 --> 00:16:47.720
They actually have a GitHub project,


00:16:47.720 --> 00:16:49.900
and I wanted to actually pull the data from the GitHub,


00:16:49.900 --> 00:16:51.480
but sadly the data is not there.


00:16:51.480 --> 00:16:53.940
It says "coming soon" because I wanted to do some analysis on it.


00:16:53.940 --> 00:16:54.640
Ah, bummer.


00:16:54.640 --> 00:16:59.320
So my question is, what do you think is the most common third-party library?


00:16:59.320 --> 00:17:01.400
And it wasn't what I thought it would be.


00:17:01.400 --> 00:17:03.700
I mean, my guess was just going to be like six,


00:17:03.700 --> 00:17:05.040
because you see that everywhere.


00:17:05.040 --> 00:17:06.240
and all sorts of projects.


00:17:06.240 --> 00:17:06.740
Yeah.


00:17:06.740 --> 00:17:08.160
It's super, super low level.


00:17:08.160 --> 00:17:10.060
Yeah, I would have guessed requests.


00:17:10.060 --> 00:17:12.300
Yeah, that would have been my guess as well, I think.


00:17:12.300 --> 00:17:16.800
But the most common was NumPy, which surprised me.


00:17:16.800 --> 00:17:20.080
Those data scientists, they're really dominating.


00:17:20.080 --> 00:17:21.000
I don't know.


00:17:21.000 --> 00:17:21.800
They definitely are.


00:17:21.800 --> 00:17:22.600
Wow.


00:17:22.600 --> 00:17:23.300
How interesting.


00:17:23.300 --> 00:17:26.520
So certainly, so many of these libraries


00:17:26.520 --> 00:17:29.960
that are in the data science space do seem to all focus in


00:17:29.960 --> 00:17:31.680
on NumPy as the foundation, don't they?


00:17:31.680 --> 00:17:33.600
Yeah, it's sort of built around that as well.


00:17:33.600 --> 00:17:36.080
I wonder how much more commonality there is,


00:17:36.080 --> 00:17:40.120
like more shared foundation there is in the data science space,


00:17:40.120 --> 00:17:41.920
rather than say the web space,


00:17:41.920 --> 00:17:45.120
where you've got Flask, Django, Pyramid, Bottle,


00:17:45.120 --> 00:17:48.600
Molten, whatever, and they all kind of have their own foundation.


00:17:48.600 --> 00:17:51.440
So that breaks up their potential


00:17:51.440 --> 00:17:53.720
- Code-y high-res. - Yeah.


00:17:53.720 --> 00:17:55.920
That was definitely interesting, NumPy.


00:17:55.920 --> 00:17:58.720
I wouldn't have guessed that, but I guess it does make sense.


00:17:58.720 --> 00:18:02.440
So some interesting things that I saw was within PyPI,


00:18:02.440 --> 00:18:05.160
They said they find that the growth of the repos--


00:18:05.160 --> 00:18:08.440
of PyPI itself, all the packages,


00:18:08.440 --> 00:18:11.080
has been robust under all measures,


00:18:11.080 --> 00:18:15.800
with an annual compound growth of 47% year over year


00:18:15.800 --> 00:18:18.480
for the number of active packages,


00:18:18.480 --> 00:18:24.520
and 39% for new authors, and 61% for new import statements.


00:18:24.520 --> 00:18:27.520
So I guess that means Python packages are becoming


00:18:27.520 --> 00:18:29.000
more dependent on each other.


00:18:29.000 --> 00:18:32.040
Yeah, that does make sense.


00:18:32.040 --> 00:18:33.800
Again, when I'm doing a training,


00:18:33.800 --> 00:18:37.480
I will go to PyPI, the Python package index,


00:18:37.480 --> 00:18:39.600
and I point them at that number.


00:18:39.600 --> 00:18:44.400
And I'm at it right now, and it says 193,830 projects


00:18:44.400 --> 00:18:44.880
right now.


00:18:44.880 --> 00:18:48.400
And I think that's pretty mind-blowing.


00:18:48.400 --> 00:18:52.800
But it's also, like you said, you've got 47% growth in there,


00:18:52.800 --> 00:18:55.080
39% for new authors, right?


00:18:55.080 --> 00:18:55.580
So--


00:18:55.580 --> 00:18:57.000
Yeah, that's incredible.


00:18:57.000 --> 00:18:59.440
Apparently, it's somewhat straightforward for someone


00:18:59.440 --> 00:19:02.160
to come into Python, make a package,


00:19:02.160 --> 00:19:06.080
and start contributing and sharing it with the community.


00:19:06.080 --> 00:19:09.040
- I think the new authors is the most impressive stat


00:19:09.040 --> 00:19:10.960
from there, like it means that people are coming


00:19:10.960 --> 00:19:13.480
into the community and like building stuff


00:19:13.480 --> 00:19:15.360
for other people, which is great.


00:19:15.360 --> 00:19:17.000
- That's a really good point, yeah, absolutely.


00:19:17.000 --> 00:19:18.560
That's a super positive number.


00:19:18.560 --> 00:19:20.560
That's really high growth when you're talking about,


00:19:20.560 --> 00:19:23.680
you already have 77,000 authors, right?


00:19:23.680 --> 00:19:24.520
- Yeah.


00:19:24.520 --> 00:19:26.440
- Some other real quick stats I thought was interesting.


00:19:26.440 --> 00:19:28.760
They have the number of active packages,


00:19:28.760 --> 00:19:31.680
which is a much smaller number than the total packages.


00:19:31.680 --> 00:19:34.880
But in 2005, you could go to PyPI,


00:19:34.880 --> 00:19:37.720
and you could literally just kind of browse


00:19:37.720 --> 00:19:38.920
all the active packages.


00:19:38.920 --> 00:19:40.760
There were 96.


00:19:40.760 --> 00:19:43.460
So in the early days, it was useful to have it,


00:19:43.460 --> 00:19:47.000
but it was not quite as amazing as almost 200,000 now.


00:19:47.000 --> 00:19:49.200
Before PyPI, there was this cheese shop,


00:19:49.200 --> 00:19:51.600
which I think was the predecessor of that.


00:19:51.600 --> 00:19:53.760
And it was sort of a single web page,


00:19:53.760 --> 00:19:56.160
and it had like, here are the categories, right?


00:19:56.160 --> 00:19:59.040
And so on that web page was a list of packages.


00:19:59.040 --> 00:20:01.000
But yeah, this is crazy.


00:20:01.000 --> 00:20:03.160
- Yeah, so the cheat shop, as you're telling me,


00:20:03.160 --> 00:20:06.920
it's kind of like Yahoo for packaging.


00:20:06.920 --> 00:20:07.760
- Yeah.


00:20:07.760 --> 00:20:10.800
- All right, final stat from this analysis.


00:20:10.800 --> 00:20:13.960
The most popular license for packages


00:20:13.960 --> 00:20:15.880
in the Python space is MIT.


00:20:15.880 --> 00:20:18.360
They've got all the lists, all most of them.


00:20:18.360 --> 00:20:19.320
That's pretty cool.


00:20:19.320 --> 00:20:20.800
All right, Matt, what's this next one?


00:20:20.800 --> 00:20:23.120
Speaking of data scientists, you got another one for us.


00:20:23.120 --> 00:20:24.760
- Yeah, so speaking of data scientists


00:20:24.760 --> 00:20:28.400
and sort of, I guess, the proliferation of--


00:20:28.400 --> 00:20:31.760
Michael mentioned proliferation of web frameworks.


00:20:31.760 --> 00:20:35.540
I came across a new project that I hadn't seen before recently


00:20:35.540 --> 00:20:37.240
called DAPY.


00:20:37.240 --> 00:20:39.000
D-A-P-Y.


00:20:39.000 --> 00:20:40.360
DAPY.


00:20:40.360 --> 00:20:41.160
DAPY.


00:20:41.160 --> 00:20:43.640
And it sort of labels itself--


00:20:43.640 --> 00:20:46.720
it sort of labels itself as Pandas for Humans.


00:20:46.720 --> 00:20:48.320
Not precisely, but it says for humans


00:20:48.320 --> 00:20:50.080
somewhere in its web page.


00:20:50.080 --> 00:20:54.440
And so I just think this is interesting now.


00:20:54.440 --> 00:20:56.040
So, manipulation of web frameworks.


00:20:56.040 --> 00:21:00.020
And I recall, you know, when Django came out,


00:21:00.020 --> 00:21:02.040
at that time, there was another popular web framework


00:21:02.040 --> 00:21:05.080
called TurboGears, and there was sort of a faction


00:21:05.080 --> 00:21:06.800
in the Python community of like,


00:21:06.800 --> 00:21:10.440
are you a TurboGears person or you're a Django person, right?


00:21:10.440 --> 00:21:15.440
And they both sort of had their pluses and minuses, right?


00:21:15.440 --> 00:21:17.960
But I think, and TurboGears has sort of morphed


00:21:17.960 --> 00:21:19.760
into what we see as Pyramid these days.


00:21:19.760 --> 00:21:21.760
But I see that there's been benefit,


00:21:21.760 --> 00:21:23.800
I think in general competition is good,


00:21:23.800 --> 00:21:25.760
and there's been benefit from that.


00:21:25.760 --> 00:21:27.400
This is an interesting library.


00:21:27.400 --> 00:21:30.580
It looks like it's pandas-esque.


00:21:30.580 --> 00:21:32.760
It's got portions of pandas in it,


00:21:32.760 --> 00:21:35.240
but it also has Scikit-learn in it,


00:21:35.240 --> 00:21:38.160
Yellow Brick, which is a visualization tool


00:21:38.160 --> 00:21:40.760
for machine learning, and NumPy as well.


00:21:40.760 --> 00:21:43.400
It says explicitly on there that it's designed for


00:21:43.400 --> 00:21:46.140
data analysis, not for coders,


00:21:46.140 --> 00:21:48.600
which I think that's trying to say that


00:21:48.600 --> 00:21:51.440
maybe pandas is a little too complicated,


00:21:51.440 --> 00:21:56.240
and that data analysts maybe need something a little bit more simple than that.


00:21:56.240 --> 00:21:59.340
But I think it's interesting that there's now a proliferation


00:21:59.340 --> 00:22:02.340
and people are using Python and maybe they're saying,


00:22:02.340 --> 00:22:06.540
"Oh, we want to use Python, but we want to use maybe something simpler,"


00:22:06.540 --> 00:22:08.440
and there's a proliferation there.


00:22:08.440 --> 00:22:09.940
Yeah, I think it's super interesting.


00:22:09.940 --> 00:22:15.140
One of the things it seems to do is also leverage the simpler startup idea,


00:22:15.140 --> 00:22:16.940
kind of like you talked about before.


00:22:16.940 --> 00:22:20.840
A lot of folks say, "Well, you get started by setting up a Jupyter server


00:22:20.840 --> 00:22:23.480
and installing pandas and NumPy and all that stuff.


00:22:23.480 --> 00:22:25.640
And one of the things you can do with this


00:22:25.640 --> 00:22:28.920
is you can have one of these data sheets, and you can say show,


00:22:28.920 --> 00:22:33.400
and it will print out an ASCII representation of the table


00:22:33.400 --> 00:22:34.440
and stuff like that.


00:22:34.440 --> 00:22:35.200
Yeah.


00:22:35.200 --> 00:22:39.120
In general, with most software, a good five-minute out-of-the-box


00:22:39.120 --> 00:22:42.520
experience is really good for bringing someone on, right?


00:22:42.520 --> 00:22:45.960
It'll be interesting to see what happens to this moving forward,


00:22:45.960 --> 00:22:50.960
because what I'm also seeing is a lot of new projects


00:22:50.960 --> 00:22:55.460
are taking the interface from pandas and replicating that.


00:22:55.460 --> 00:22:57.960
And you've talked to people who are doing similar things, right?


00:22:57.960 --> 00:23:00.660
Yeah, like Dask, for example, and stuff like that.


00:23:00.660 --> 00:23:06.460
Like Dask. I was just playing the other day with a library called CUDF.


00:23:06.460 --> 00:23:13.460
I don't know how you pronounce that, but basically it's a pandas on top of CUDA.


00:23:13.460 --> 00:23:18.100
So you can leverage your GPU to do pandas-like operations.


00:23:18.100 --> 00:23:20.060
So it'll be interesting to see where that goes.


00:23:20.060 --> 00:23:23.860
It looks like, in general, the data science community


00:23:23.860 --> 00:23:28.460
is sort of honing in or adopting the pandas interface


00:23:28.460 --> 00:23:30.180
as sort of a standard interface.


00:23:30.180 --> 00:23:32.300
But is there room for improvement,


00:23:32.300 --> 00:23:35.300
room for something more for humans?


00:23:35.300 --> 00:23:37.220
I guess that remains to be seen there.


00:23:37.220 --> 00:23:39.860
Yeah, it definitely seems like a lot of flowers are blooming.


00:23:39.860 --> 00:23:41.860
Yeah, which I think, in general, is good.


00:23:41.860 --> 00:23:43.100
Competition's good.


00:23:43.100 --> 00:23:47.480
And if you only have one tool, you have to use that tool, right?


00:23:47.480 --> 00:23:50.140
But if there are multiple tools and some are better at certain things,


00:23:50.140 --> 00:23:52.420
then I think it pushes everyone to be better.


00:23:52.420 --> 00:23:54.260
So appreciate the competition there.


00:23:54.260 --> 00:23:54.820
- For sure.


00:23:54.820 --> 00:23:58.860
- How do you think a programming library that's not for coders works out?


00:23:58.860 --> 00:24:02.060
- Yeah, I'm not sure how to interpret that.


00:24:02.060 --> 00:24:05.020
- You start by installing friendly traceback, and then you go from there.


00:24:05.020 --> 00:24:07.180
- Yeah.


00:24:07.180 --> 00:24:08.020
Good one.


00:24:08.020 --> 00:24:11.780
I mean, I also consider Excel a programming environment, right?


00:24:11.780 --> 00:24:15.080
I think Excel is the most common programming environment in the world.


00:24:15.080 --> 00:24:17.480
And lots of people use it.


00:24:17.480 --> 00:24:21.580
They won't admit that they're programming, but I mean, if you do a V lookup or


00:24:21.580 --> 00:24:24.540
something like that, you're, you're programming using Excel.


00:24:24.540 --> 00:24:25.040
So.


00:24:25.040 --> 00:24:27.140
And Google sheets is a great database.


00:24:27.140 --> 00:24:27.760
Yeah.


00:24:27.760 --> 00:24:31.480
At some point, I think you have to bite the bullet and, and learn some syntax.


00:24:31.480 --> 00:24:35.780
And so I, I'm not quite sure how to interpret that statement there, but


00:24:35.780 --> 00:24:39.880
friendly interface, pandas has gotten some slack for, for some things that


00:24:39.880 --> 00:24:43.280
might not be super intuitive or not Pythonic in that way.


00:24:43.280 --> 00:24:46.040
So whether this is improvement on that--


00:24:46.040 --> 00:24:47.840
Maybe it's a way to graduate to pandas.


00:24:47.840 --> 00:24:48.360
Yeah.


00:24:48.360 --> 00:24:48.860
Yeah.


00:24:48.860 --> 00:24:50.680
This is your training wheels.


00:24:50.680 --> 00:24:51.560
Yeah, potentially.


00:24:51.560 --> 00:24:52.320
Potentially.


00:24:52.320 --> 00:24:55.520
Now, I started off this whole conversation


00:24:55.520 --> 00:24:59.160
by saying we could use this friendly traceback


00:24:59.160 --> 00:25:02.280
to possibly gather information about crashes on the server


00:25:02.280 --> 00:25:03.400
because it captures local.


00:25:03.400 --> 00:25:05.240
But Anthony, this next one, you've


00:25:05.240 --> 00:25:07.120
got my ticket up a notch, right?


00:25:07.120 --> 00:25:07.620
Yeah.


00:25:07.620 --> 00:25:10.180
I'm actually going to talk about Python Remote PDB.


00:25:10.180 --> 00:25:14.020
This is intended to be a small over-the-network remote debugger.


00:25:14.020 --> 00:25:18.900
It's a very, very thin wrapper around PDB that ships in a single file.


00:25:18.900 --> 00:25:22.900
It's really easy to drop into an existing environment


00:25:22.900 --> 00:25:26.180
and just add it to your path using Python path,


00:25:26.180 --> 00:25:28.820
or you can pip install if that's easier for you.


00:25:28.820 --> 00:25:30.820
It doesn't have all that many features.


00:25:30.820 --> 00:25:34.060
There's a bunch of other remote debuggers that are much more powerful,


00:25:34.060 --> 00:25:38.360
things like PUDB or RPDB or PyCharms debugger


00:25:38.360 --> 00:25:42.300
or Visual Studio Codes debugger or like any of the other things


00:25:42.300 --> 00:25:43.300
that are brought to the table.


00:25:43.300 --> 00:25:45.500
But I found this, it was pretty simple.


00:25:45.500 --> 00:25:48.500
It solved my use case and worked pretty well.


00:25:48.500 --> 00:25:49.340
- That's cool.


00:25:49.340 --> 00:25:54.040
So it integrates with Python's new breakpoint feature,


00:25:54.040 --> 00:25:56.700
which lets you plug in a new debugger, right?


00:25:56.700 --> 00:25:57.540
- Yep, yeah.


00:25:57.540 --> 00:25:59.180
You just set some environment variables


00:25:59.180 --> 00:26:02.060
and anytime you call breakpoint in your code,


00:26:02.060 --> 00:26:04.720
the runtime knows how to import the right module


00:26:04.720 --> 00:26:07.220
and call the right stuff to call your debugger.


00:26:07.220 --> 00:26:09.360
So if you wanted to call remote PDB,


00:26:09.360 --> 00:26:11.740
you would just set Python breakpoint equals


00:26:11.740 --> 00:26:13.320
remote PDB dot set trace,


00:26:13.320 --> 00:26:15.240
and it would just do the right thing.


00:26:15.240 --> 00:26:16.720
- Yeah, that's pretty cool.


00:26:16.720 --> 00:26:19.280
- Yeah, and the access for this tool is,


00:26:19.280 --> 00:26:21.880
you generally just use like Telnet or Netcat


00:26:21.880 --> 00:26:25.880
or Socketcat or anything that can talk to a socket


00:26:25.880 --> 00:26:29.000
and basically gives you a PDB session remotely.


00:26:29.000 --> 00:26:32.000
I'm actually working on creating my own text editor


00:26:32.000 --> 00:26:33.560
just so I can learn Curses.


00:26:33.560 --> 00:26:37.400
And it was really useful to be able to debug a Curses application


00:26:37.400 --> 00:26:40.800
because you can't really enter PDB while it's trying to paint your screen.


00:26:40.800 --> 00:26:42.160
Yeah, that's interesting.


00:26:42.160 --> 00:26:44.960
So, I mean, even though it sets up a little server,


00:26:44.960 --> 00:26:47.840
you don't have to have it be on a different machine, right?


00:26:47.840 --> 00:26:52.000
Yeah, I was just developing it in one tab and I had a debugger in my other tab.


00:26:52.000 --> 00:26:54.400
Yeah, so in general, anything that's printing to--


00:26:54.400 --> 00:26:56.560
if you've got something that's printing to the screen


00:26:56.560 --> 00:26:58.760
or maybe doing input from the screen,


00:26:58.760 --> 00:27:01.400
that might be a case where this would be more appropriate


00:27:01.400 --> 00:27:04.680
than the built-in debugging tools of Python.


00:27:04.680 --> 00:27:06.160
- Yeah, another use case might be


00:27:06.160 --> 00:27:07.720
if you're using a web server,


00:27:07.720 --> 00:27:11.080
although Flask has nice tools for using a debugger


00:27:11.080 --> 00:27:13.880
and Pyramid does as well, and I'm sure the others do also.


00:27:13.880 --> 00:27:15.920
But it's a potential tool.


00:27:15.920 --> 00:27:16.760
- Yeah, it's cool.


00:27:16.760 --> 00:27:17.580
- Yeah, more tools are good.


00:27:17.580 --> 00:27:19.120
Tell folks really quick what Curses is.


00:27:19.120 --> 00:27:22.040
- Curses is a library which allows you


00:27:22.040 --> 00:27:26.360
to paint graphical user interfaces, but in a terminal.


00:27:26.360 --> 00:27:31.840
It's kind of how text editors like Vim or Nano or Emacs draw out their UI.


00:27:31.840 --> 00:27:34.040
Or if I wanted to create a game for like a BBS.


00:27:34.040 --> 00:27:36.320
Oh yeah, you can make games with it too.


00:27:36.320 --> 00:27:38.000
I've seen some really good Cursus games.


00:27:38.000 --> 00:27:39.240
Yeah, that's pretty cool.


00:27:39.240 --> 00:27:40.640
All right, well, that's definitely a good one.


00:27:40.640 --> 00:27:41.520
And I hadn't heard of it.


00:27:41.520 --> 00:27:43.120
So yeah, thanks for sharing that.


00:27:43.120 --> 00:27:44.640
And that's it for our main topics.


00:27:44.640 --> 00:27:49.200
But I do have a few quick extras I know we all do that I want to share.


00:27:49.200 --> 00:27:51.960
I just want to share a story that just made me laugh.


00:27:51.960 --> 00:27:52.640
I really love it.


00:27:52.640 --> 00:27:55.200
So there was this-- the press calls them a hacker.


00:27:55.200 --> 00:27:58.440
I don't really know what this person would be classified as,


00:27:58.440 --> 00:28:00.800
because it's like a pretty low-level hack.


00:28:00.800 --> 00:28:05.480
But a person was trying to avoid getting parking tickets.


00:28:05.480 --> 00:28:08.680
And they assumed that if what they could insert


00:28:08.680 --> 00:28:12.420
into the field that contains the number for the license plate


00:28:12.420 --> 00:28:17.160
was null, the systems, like at the county or whatever,


00:28:17.160 --> 00:28:18.640
is going to give you a ticket.


00:28:18.640 --> 00:28:20.400
They say, oh, there's no address,


00:28:20.400 --> 00:28:23.160
or there's no license plate, so we can't send them a ticket.


00:28:23.160 --> 00:28:25.720
But in fact, quite the opposite is the case.


00:28:25.720 --> 00:28:28.940
So there's this person who got a custom license plate, which


00:28:28.940 --> 00:28:30.680
you can do in the US and have words on it.


00:28:30.680 --> 00:28:34.640
And they got the word null, N-U-L-L, all capital.


00:28:34.640 --> 00:28:38.520
And then all of a sudden, all the other places


00:28:38.520 --> 00:28:40.480
where there actually were nulls in the database


00:28:40.480 --> 00:28:44.280
started directing to this license plate.


00:28:44.280 --> 00:28:46.600
And they got $12,000 in parking tickets


00:28:46.600 --> 00:28:49.200
without even parking illegally because they


00:28:49.200 --> 00:28:50.600
started to receive all the failure


00:28:50.600 --> 00:28:53.400
cases of the database for parking.


00:28:53.400 --> 00:28:55.800
Ah, guess he hacked himself.


00:28:55.800 --> 00:28:56.800
Exactly.


00:28:56.800 --> 00:29:01.920
I don't know, hackers would take kindly to the naming there, but I don't think it worked


00:29:01.920 --> 00:29:03.120
out how he wanted it to.


00:29:03.120 --> 00:29:04.640
It was definitely a backfire.


00:29:04.640 --> 00:29:06.520
Anyway, I'll link into that, that's pretty funny.


00:29:06.520 --> 00:29:12.160
And then just really quick, PyCon 2020 has been sort of officially announced.


00:29:12.160 --> 00:29:15.640
It's going to be earlier this year, I'm trying to figure out exactly.


00:29:15.640 --> 00:29:21.000
Yeah, yeah, it's going to be April 15 to 23 in Pittsburgh.


00:29:21.000 --> 00:29:22.200
And the website is already up.


00:29:22.200 --> 00:29:24.000
So go check it out.


00:29:24.000 --> 00:29:24.560
Sign up.


00:29:24.560 --> 00:29:26.180
Maybe you can submit a talk.


00:29:26.180 --> 00:29:27.120
I'm not entirely sure.


00:29:27.120 --> 00:29:28.480
But the website, at least, is already up.


00:29:28.480 --> 00:29:29.480
So I'll link to that.


00:29:29.480 --> 00:29:30.480
People can check that out.


00:29:30.480 --> 00:29:31.400
Matt, what do you got?


00:29:31.400 --> 00:29:35.280
I recently released a course on Pluralsight


00:29:35.280 --> 00:29:37.720
on the XGBoost library.


00:29:37.720 --> 00:29:40.120
So XGBoost, if you're not familiar with it,


00:29:40.120 --> 00:29:43.200
is a library that a lot of people


00:29:43.200 --> 00:29:46.040
are using with great success in like Kaggle competitions


00:29:46.040 --> 00:29:49.320
for analyzing structured data and making predictive models


00:29:49.320 --> 00:29:50.000
around that.


00:29:50.000 --> 00:29:54.800
So if you're interested in an in-depth course on XGBoost,


00:29:54.800 --> 00:29:58.000
not only how to use it, but how to tune it,


00:29:58.000 --> 00:30:00.840
how to understand what the model is predicting when it comes


00:30:00.840 --> 00:30:02.480
out, check that out.


00:30:02.480 --> 00:30:07.640
I've got a bit.ly link, bit.ly/psxgb,


00:30:07.640 --> 00:30:11.240
plural site, XGBoost, so psxgb if you're interested in that.


00:30:11.240 --> 00:30:13.160
- Nice, yeah, we'll put the links in the show notes.


00:30:13.160 --> 00:30:14.160
Congrats on the new course.


00:30:14.160 --> 00:30:17.040
You and I have both written a fair number of online courses


00:30:17.040 --> 00:30:18.080
and that's a lot of work.


00:30:18.080 --> 00:30:18.920
- Yeah, thank you.


00:30:18.920 --> 00:30:19.760
Yeah, I'm excited about it.


00:30:19.760 --> 00:30:21.480
I think it's a great course


00:30:21.480 --> 00:30:23.280
for anyone interested in NextGBoost.


00:30:23.280 --> 00:30:24.720
- Yeah, awesome.


00:30:24.720 --> 00:30:25.560
Anthony?


00:30:25.560 --> 00:30:27.520
- Cool, I've got one quick little library.


00:30:27.520 --> 00:30:31.200
This is on the same line as the Curses work above.


00:30:31.200 --> 00:30:33.320
I found a tool called Ekate.


00:30:33.320 --> 00:30:34.720
I don't know how to pronounce it.


00:30:34.720 --> 00:30:37.840
It labels itself as a Selenium WebDriver,


00:30:37.840 --> 00:30:39.080
but for the terminal.


00:30:39.080 --> 00:30:40.540
And it's kind of a cool library


00:30:40.540 --> 00:30:43.460
that allows you to control a process in the background


00:30:43.460 --> 00:30:46.660
and make assertions about it as a testing library.


00:30:46.660 --> 00:30:48.820
- So are you sending curses commands


00:30:48.820 --> 00:30:52.300
or is that like expect?


00:30:52.300 --> 00:30:54.680
- So the way it works is it runs a TMUX server


00:30:54.680 --> 00:30:57.700
in the background and then uses the TMUX commands


00:30:57.700 --> 00:30:58.800
to interact with it.


00:30:58.800 --> 00:31:02.620
So it'll sound like up arrow or like control X or--


00:31:02.620 --> 00:31:03.780
- Like sends keys kind of.


00:31:03.780 --> 00:31:04.900
- Yep, pretty much.


00:31:04.900 --> 00:31:06.380
- Ah, that's cool.


00:31:06.380 --> 00:31:07.220
- Yeah, and then it takes three rounds of--


00:31:07.220 --> 00:31:10.620
- That's a utility in that for like driving demos


00:31:10.620 --> 00:31:11.820
and that sort of thing as well.


00:31:11.820 --> 00:31:12.660
That's cool.


00:31:12.660 --> 00:31:13.480
- Oh yeah, that'd be cool.


00:31:13.480 --> 00:31:15.220
- Yeah, you sit there and it looks like you're typing


00:31:15.220 --> 00:31:16.540
and you're just flying through it


00:31:16.540 --> 00:31:17.380
and you just get up, you say,


00:31:17.380 --> 00:31:18.220
let me show you some over here


00:31:18.220 --> 00:31:19.140
and it just keeps going.


00:31:19.140 --> 00:31:19.980
Feel right?


00:31:19.980 --> 00:31:21.580
(laughing)


00:31:21.580 --> 00:31:24.700
- Yeah, yeah, and you could make it understand Emacs.


00:31:24.700 --> 00:31:26.620
It could even control Emacs, awesome.


00:31:26.620 --> 00:31:27.460
- Yeah.


00:31:27.460 --> 00:31:29.420
- Yeah, works great for Emacs too.


00:31:29.420 --> 00:31:30.380
- Sweet, all right.


00:31:30.380 --> 00:31:32.820
We always end the show with a joke or two


00:31:32.820 --> 00:31:36.940
and this one is not like a laugh out loud sort of joke,


00:31:36.940 --> 00:31:39.240
But Matt, you're here, you do a lot of data science.


00:31:39.240 --> 00:31:43.480
I thought I'd bring some sort of scientific-esque humor here.


00:31:43.480 --> 00:31:46.360
And this one just really is deeply satisfying to me.


00:31:46.360 --> 00:31:48.040
So it's a little story.


00:31:48.040 --> 00:31:50.480
I'll get y'all a reaction in a minute.


00:31:50.480 --> 00:31:53.080
So there are two mathematicians sitting at a table in a pub


00:31:53.080 --> 00:31:56.400
having an argument about the level of math education


00:31:56.400 --> 00:31:57.960
among the general public.


00:31:57.960 --> 00:32:00.940
Like, one of them is defending overall math knowledge.


00:32:00.940 --> 00:32:03.120
And he gets up and goes to the restroom.


00:32:03.120 --> 00:32:06.160
And on his way back, he wants to prove his point, right?


00:32:06.160 --> 00:32:07.800
So he encounters the waitress and says,


00:32:07.800 --> 00:32:10.800
hey, I'll give you an extra $10 on your tip


00:32:10.800 --> 00:32:13.240
if you can answer a question for me.


00:32:13.240 --> 00:32:17.240
It doesn't matter what I ask, just say the words X squared.


00:32:17.240 --> 00:32:18.200
X squared, OK?


00:32:18.200 --> 00:32:20.040
She's like, yeah, sure, no problem.


00:32:20.040 --> 00:32:22.580
So a few minutes later, the guy sits back down with his buddy


00:32:22.580 --> 00:32:25.600
and says, I'll bet you $20 that even our waitress can tell us


00:32:25.600 --> 00:32:26.960
the integral of 2x.


00:32:26.960 --> 00:32:29.320
And the cynic's like, yeah, I'll take that bet, buddy.


00:32:29.320 --> 00:32:30.280
No problem.


00:32:30.280 --> 00:32:32.120
So he beckons her over to the table,


00:32:32.120 --> 00:32:35.280
asks the question to which she replies, X squared.


00:32:35.280 --> 00:32:37.920
And this mathematician begins to goad and demand is winning.


00:32:37.920 --> 00:32:39.720
She says, plus a constant.


00:32:39.720 --> 00:32:42.160
[LAUGHTER]


00:32:42.160 --> 00:32:46.360
I don't know why I like that one.


00:32:46.360 --> 00:32:47.760
At least she knows.


00:32:47.760 --> 00:32:49.220
I don't know why I like that one,


00:32:49.220 --> 00:32:50.640
but it's just satisfying to me.


00:32:50.640 --> 00:32:51.640
So yeah.


00:32:51.640 --> 00:32:54.840
So on that, I'm going to brief aside.


00:32:54.840 --> 00:32:56.600
There was a poll on Twitter the other day


00:32:56.600 --> 00:32:59.540
whether they should teach statistics or calculus


00:32:59.540 --> 00:33:00.880
in high school.


00:33:00.880 --> 00:33:02.240
That's an interesting question.


00:33:02.240 --> 00:33:04.760
The only times I've used calculus since high school,


00:33:04.760 --> 00:33:07.040
even though I much enjoyed the class,


00:33:07.040 --> 00:33:09.920
was tutoring other people in calculus.


00:33:09.920 --> 00:33:10.880
So--


00:33:10.880 --> 00:33:12.700
- That's a good career path, by the way.


00:33:12.700 --> 00:33:15.520
Just, you know, when you're young, that's for,


00:33:15.520 --> 00:33:17.480
no, I hear you, but I honestly,


00:33:17.480 --> 00:33:19.960
if you're gonna throw up a math class in high school


00:33:19.960 --> 00:33:23.120
for sacrifice, geometry.


00:33:23.120 --> 00:33:24.440
It's gotta be geometry.


00:33:24.440 --> 00:33:26.560
Replace that with some computer programming.


00:33:26.560 --> 00:33:28.800
Serve as the same purpose, logical thinking.


00:33:28.800 --> 00:33:30.200
Let's do it.


00:33:30.200 --> 00:33:31.040
- Awesome.


00:33:31.040 --> 00:33:34.440
- But yeah, I definitely take your point.


00:33:34.440 --> 00:33:36.840
All right, Anthony, do you have another joke or you wanna,


00:33:36.840 --> 00:33:37.680
should we wrap it up?


00:33:37.680 --> 00:33:41.200
- I had a Golang joke prepared, but then I panicked.


00:33:41.200 --> 00:33:42.040
- Whoa.


00:33:42.040 --> 00:33:42.880
- Whoa.


00:33:42.880 --> 00:33:45.360
- Ow. - You can cut that too.


00:33:45.360 --> 00:33:47.520
- No, no, it's all good. - Don't worry about it.


00:33:47.520 --> 00:33:49.120
- It's all good, man.


00:33:49.120 --> 00:33:52.560
Thank you, Matt Harrison, Anthony Sotile.


00:33:52.560 --> 00:33:53.560
Thank you both for being here.


00:33:53.560 --> 00:33:55.840
It's been really great to have you, Matt, back on the show


00:33:55.840 --> 00:33:57.280
and Anthony here for the first time.


00:33:57.280 --> 00:33:58.240
- Yeah, thanks for having me.


00:33:58.240 --> 00:33:59.640
- Yeah, thanks guys, bye.


00:33:59.640 --> 00:34:00.560
- Okay, bye.


00:34:00.560 --> 00:34:02.280
- Thank you for listening to Python Bytes.


00:34:02.280 --> 00:34:07.720
Follow the show on Twitter via @PythonBytes, that's Python Bytes as in B-Y-T-E-S.


00:34:07.720 --> 00:34:10.920
And get the full show notes at PythonBytes.fm.


00:34:10.920 --> 00:34:15.000
If you have a news item you want featured, just visit PythonBytes.fm and send it our way.


00:34:15.000 --> 00:34:17.800
We're always on the lookout for sharing something cool.


00:34:17.800 --> 00:34:21.000
On behalf of myself and Brian Auchin, this is Michael Kennedy.


00:34:21.000 --> 00:34:24.520
Thank you for listening and sharing this podcast with your friends and colleagues.

