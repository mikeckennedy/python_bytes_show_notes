
00:00:00.000 --> 00:00:04.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.640 --> 00:00:09.280
This is episode 220, recorded February 10th, 2021.


00:00:09.280 --> 00:00:10.200
I'm Michael Kennedy.


00:00:10.200 --> 00:00:11.200
I'm Brian Okken.


00:00:11.200 --> 00:00:12.840
And we have a special guest, Hannah. Welcome.


00:00:12.840 --> 00:00:13.840
Hello.


00:00:13.840 --> 00:00:17.080
Hannah Stepnik, welcome to the show. It is so great to have you here.


00:00:17.080 --> 00:00:18.920
Thank you. I'm happy to be here.


00:00:18.920 --> 00:00:20.280
Yeah, it's good to have you.


00:00:20.280 --> 00:00:22.640
It's so cool, the internet is a global place.


00:00:22.640 --> 00:00:23.800
We can have people from all over.


00:00:23.800 --> 00:00:26.400
So we've decided to make it an all Portland show this time.


00:00:26.400 --> 00:00:28.760
We could do this in person, actually.


00:00:28.760 --> 00:00:30.560
- Well, not really because we can't go anywhere,


00:00:30.560 --> 00:00:32.560
but theoretically, geographically anyway.


00:00:32.560 --> 00:00:34.520
Yeah, so all three of us are from Portland, Oregon.


00:00:34.520 --> 00:00:35.400
Very nice.


00:00:35.400 --> 00:00:38.840
Before we jump into the main topics, a few quick things.


00:00:38.840 --> 00:00:41.880
One, this episode is brought to you by Datadog.


00:00:41.880 --> 00:00:44.220
Check them out at pythonbytes.fm/datadog.


00:00:44.220 --> 00:00:45.600
And Hannah, do you just want to give people


00:00:45.600 --> 00:00:47.760
a quick background on yourself?


00:00:47.760 --> 00:00:50.320
- Yeah, so I'm Hannah.


00:00:50.320 --> 00:00:55.000
I have written a book, which is weird to say, about pandas,


00:00:55.000 --> 00:00:57.440
but I also just go around,


00:00:57.440 --> 00:01:01.000
I give talks at various conferences, like on Python.


00:01:01.000 --> 00:01:03.960
So yeah, like I gave re-architecting


00:01:03.960 --> 00:01:05.440
a legacy code base recently.


00:01:05.440 --> 00:01:06.880
- That sounds interesting and challenging.


00:01:06.880 --> 00:01:07.720
- Yeah.


00:01:07.720 --> 00:01:08.540
(laughs)


00:01:08.540 --> 00:01:09.640
- What was the legacy language?


00:01:09.640 --> 00:01:10.800
Was it Python or something?


00:01:10.800 --> 00:01:12.400
- It was Python.


00:01:12.400 --> 00:01:15.360
It was like a Flask web application.


00:01:15.360 --> 00:01:19.880
And then also the front end of it was Vue, like Vue.js.


00:01:19.880 --> 00:01:20.720
- Oh yeah, uh-huh.


00:01:20.720 --> 00:01:22.800
- So yeah, that's been a fun project.


00:01:22.800 --> 00:01:25.240
That was through work as developers.


00:01:25.240 --> 00:01:26.480
Like you're pretty much always working


00:01:26.480 --> 00:01:28.000
with some form of legacy code,


00:01:28.000 --> 00:01:30.680
just depends on how legacy it really is.


00:01:30.680 --> 00:01:32.920
- Well, what could be cutting edge


00:01:32.920 --> 00:01:35.520
in one person's viewpoint might be super legacy


00:01:35.520 --> 00:01:36.360
in another, right?


00:01:36.360 --> 00:01:38.840
Like it's Python 3.5, you wouldn't believe it.


00:01:38.840 --> 00:01:40.560
- Right.


00:01:40.560 --> 00:01:42.600
- Yeah, very cool.


00:01:42.600 --> 00:01:44.600
Well, it's great to have you here.


00:01:44.600 --> 00:01:47.000
I think maybe we'll start off with our first topic,


00:01:47.000 --> 00:01:49.920
which is sort of along the lines of the data science world,


00:01:49.920 --> 00:01:51.440
some tie-ins to your book.


00:01:51.440 --> 00:01:53.800
And of course, whenever you go to JetBrains,


00:01:53.800 --> 00:01:56.580
you've got to run your CLI to accept the cookies,


00:01:56.580 --> 00:01:57.620
which is fantastic.


00:01:57.620 --> 00:02:00.680
And so this topic, this first topic I want to cover


00:02:00.680 --> 00:02:03.180
is from JetBrains and it's entitled,


00:02:03.180 --> 00:02:06.000
We Downloaded 10 Million Jupyter Notebooks.


00:02:06.000 --> 00:02:08.360
I almost said 10,000, 10 million Jupyter Notebooks


00:02:08.360 --> 00:02:09.780
from GitHub.


00:02:09.780 --> 00:02:10.620
Here's what we learned.


00:02:10.620 --> 00:02:14.740
So this is an article or analysis done by Elena Guzacharina


00:02:14.740 --> 00:02:16.400
and yeah, pretty neat.


00:02:16.400 --> 00:02:18.780
So they went through and downloaded a whole bunch


00:02:18.780 --> 00:02:21.580
of these notebooks and just analyzed them.


00:02:21.580 --> 00:02:24.340
There's many, many of them are publicly accessible.


00:02:24.340 --> 00:02:25.880
And a couple of years ago,


00:02:25.880 --> 00:02:29.840
there were 1.2 million Jupyter notebooks that were public.


00:02:29.840 --> 00:02:33.420
As of last October, it was eight times as many,


00:02:33.420 --> 00:02:36.940
9.7 million notebooks available on GitHub.


00:02:36.940 --> 00:02:37.980
That's crazy, right?


00:02:37.980 --> 00:02:38.820
- Wow.


00:02:38.820 --> 00:02:41.800
- Yeah, so this is a bunch of really nice pictures


00:02:41.800 --> 00:02:42.980
and interactive graphs and stuff.


00:02:42.980 --> 00:02:45.540
So I encourage people to go check out the webpage.


00:02:45.540 --> 00:02:47.660
So for example, one of the questions was,


00:02:47.660 --> 00:02:50.660
well, what language do you think is the most popular


00:02:50.660 --> 00:02:53.700
for data science just by judging on the main language


00:02:53.700 --> 00:02:54.540
of the notebook.


00:02:54.540 --> 00:02:55.500
Hannah, you wanna take a guess?


00:02:55.500 --> 00:02:58.260
- Oh yeah, Python for sure, without a doubt.


00:02:58.260 --> 00:02:59.500
(laughing)


00:02:59.500 --> 00:03:01.180
- That's for sure.


00:03:01.180 --> 00:03:05.060
The second one, I'm pretty sure no one who's not seen this,


00:03:05.060 --> 00:03:06.460
there's no way they're gonna guess.


00:03:06.460 --> 00:03:07.300
It's NaN.


00:03:07.300 --> 00:03:11.220
We have no idea.


00:03:11.220 --> 00:03:14.060
We looked, we can't tell what language this is in there.


00:03:14.060 --> 00:03:16.380
But then the other contenders are R and Julia.


00:03:16.380 --> 00:03:18.420
And often people say, oh yeah, well Julia,


00:03:18.420 --> 00:03:20.700
maybe I should go to Julia from Python.


00:03:20.700 --> 00:03:22.540
Well, maybe, but that's not where the trends are.


00:03:22.540 --> 00:03:25.380
Like there's 60,000 versus 9 million,


00:03:25.380 --> 00:03:26.980
you know, as the ratio, I don't know what that number is,


00:03:26.980 --> 00:03:29.500
but it's a percent of a percent type of thing.


00:03:29.500 --> 00:03:30.340
- Wow.


00:03:30.340 --> 00:03:33.380
- They also talk about the Python 2 versus 3 growth


00:03:33.380 --> 00:03:34.220
or difference.


00:03:34.220 --> 00:03:38.160
So in 2008, it was about 50% was Python 2.


00:03:38.160 --> 00:03:42.060
And in 2020, Python 2 is down to 11%.


00:03:42.060 --> 00:03:43.460
And I was thinking about this 11%,


00:03:43.460 --> 00:03:44.780
like, why do you guys think people,


00:03:44.780 --> 00:03:47.460
there's still 11% there hanging around?


00:03:47.460 --> 00:03:50.460
I mean I would guess, speaking of legacy applications,


00:03:50.460 --> 00:03:55.460
probably it just hasn't been touched, but also--


00:03:55.460 --> 00:03:57.020
- Yeah, those are very likely the ones


00:03:57.020 --> 00:03:59.900
that were like the original 2016, 17 ones


00:03:59.900 --> 00:04:01.420
that were not quite there.


00:04:01.420 --> 00:04:02.300
They're still public, right?


00:04:02.300 --> 00:04:03.840
GitHub doesn't get rid of them.


00:04:03.840 --> 00:04:05.500
The other one is, I was thinking,


00:04:05.500 --> 00:04:07.700
a lot of people do work on Mac,


00:04:07.700 --> 00:04:09.660
or maybe even on some Linux machines


00:04:09.660 --> 00:04:11.940
that just came at the time with Python 2,


00:04:11.940 --> 00:04:13.740
that are just like, well, I'm not gonna change anything.


00:04:13.740 --> 00:04:15.060
I just need to view this thing.


00:04:15.060 --> 00:04:17.180
I have Python, problem solved, right?


00:04:17.180 --> 00:04:19.420
they didn't know that there's more than one Python.


00:04:19.420 --> 00:04:21.300
There's a good breakdown of the different versions.


00:04:21.300 --> 00:04:22.580
Another thing that's interesting


00:04:22.580 --> 00:04:25.300
is looking at the different languages,


00:04:25.300 --> 00:04:27.940
not language, different libraries used during this.


00:04:27.940 --> 00:04:30.660
So like NumPy is by far the most likely used,


00:04:30.660 --> 00:04:32.940
and then a tie is Pandas and Matplotlib,


00:04:32.940 --> 00:04:34.080
and then scikit-learn,


00:04:34.080 --> 00:04:36.100
and then OS actually for traversing stuff,


00:04:36.100 --> 00:04:37.460
and then there's a huge long tail.


00:04:37.460 --> 00:04:38.940
And they also talk about combinations,


00:04:38.940 --> 00:04:41.860
like Pandas and NumPy are common, and then Pandas,


00:04:41.860 --> 00:04:44.580
and then like Seaborn, scikit-learn, Pandas, NumPy,


00:04:44.580 --> 00:04:46.500
Matplotlib, and so on as a combo.


00:04:46.500 --> 00:04:47.340
So that's really interesting,


00:04:47.340 --> 00:04:50.180
like what sets of tools data scientists are using.


00:04:50.180 --> 00:04:52.060
And then another one is they looked


00:04:52.060 --> 00:04:54.620
at deep learning libraries and PyTorch seems


00:04:54.620 --> 00:04:56.860
to be crushing it in terms of growth,


00:04:56.860 --> 00:04:58.820
but not necessarily in terms of popularity.


00:04:58.820 --> 00:05:02.740
So it grew 1.3 times or 130%,


00:05:02.740 --> 00:05:04.140
whereas TensorFlow is more popular,


00:05:04.140 --> 00:05:05.980
but only grew 30% and so on.


00:05:05.980 --> 00:05:07.740
So there's a lot of these types of statistics in there.


00:05:07.740 --> 00:05:09.060
I think people will find interesting


00:05:09.060 --> 00:05:12.060
if they wanna dive more into this ecosystem.


00:05:12.060 --> 00:05:13.900
You know, it's one thing to have survey,


00:05:13.900 --> 00:05:14.740
you can go fill out the survey,


00:05:14.740 --> 00:05:16.460
like ask people, what do you use?


00:05:16.460 --> 00:05:17.940
You know, what platform do you run on?


00:05:17.940 --> 00:05:19.060
Vue.js or Linux?


00:05:19.060 --> 00:05:21.020
Like, okay, well that's not really a reasonable question,


00:05:21.020 --> 00:05:23.380
but I guess Vue.js, you know?


00:05:23.380 --> 00:05:25.660
But if you just go and look at what they're actually doing


00:05:25.660 --> 00:05:27.940
on places like GitHub, I think you can get a lot of insight.


00:05:27.940 --> 00:05:28.860
- Yeah, for sure.


00:05:28.860 --> 00:05:32.500
Yeah, I know I use, like I'll go to GitHub pretty frequently


00:05:32.500 --> 00:05:34.780
like at work when I'm, you know, just like browsing,


00:05:34.780 --> 00:05:36.580
like I wonder how you do this thing,


00:05:36.580 --> 00:05:38.820
or like what's the most common way to do this?


00:05:38.820 --> 00:05:39.660
- Yeah, absolutely.


00:05:39.660 --> 00:05:41.700
- I just look up like what's the most popular.


00:05:41.700 --> 00:05:43.620
So it's a pretty good sign


00:05:43.620 --> 00:05:44.940
a lot of people are using it.


00:05:44.940 --> 00:05:47.740
- It is, one thing I should probably make better use of


00:05:47.740 --> 00:05:49.340
is I know they started adding dependencies,


00:05:49.340 --> 00:05:50.700
like, oh, if you go to Flask,


00:05:50.700 --> 00:05:51.980
it'll show you Flask is used


00:05:51.980 --> 00:05:54.700
in these other GitHub repos and stuff.


00:05:54.700 --> 00:05:56.820
Like, you could find interesting little connections,


00:05:56.820 --> 00:05:59.060
I think, oh, this other project uses this cool library


00:05:59.060 --> 00:05:59.900
I know nothing about,


00:05:59.900 --> 00:06:01.300
but if they're using it, it's probably good.


00:06:01.300 --> 00:06:02.180
- Yeah, for sure.


00:06:02.180 --> 00:06:03.700
- Yeah, I love the dependency feature


00:06:03.700 --> 00:06:05.700
of looking who's using it.


00:06:05.700 --> 00:06:06.780
- Yeah, absolutely.


00:06:06.780 --> 00:06:09.580
So, Brian, you gonna cover something on testing this time?


00:06:09.580 --> 00:06:10.420
- Yeah, I wanna--


00:06:10.420 --> 00:06:11.340
- If we make you?


00:06:11.340 --> 00:06:13.460
(laughing)


00:06:13.460 --> 00:06:15.700
I wanted to bring up something we brought up before.


00:06:15.700 --> 00:06:19.740
So there's a project called pytest Python Path,


00:06:19.740 --> 00:06:23.900
and it's just a little tiny plugin for pytest.


00:06:23.900 --> 00:06:28.420
And we did cover it briefly way back in episode 62,


00:06:28.420 --> 00:06:30.820
but at the time I brought it up as,


00:06:30.820 --> 00:06:35.820
so, okay, so I brought it up as a way to just shim,


00:06:35.820 --> 00:06:39.580
like be able to have your test code see your source code,


00:06:39.580 --> 00:06:42.280
but as just like a shortcut,


00:06:42.280 --> 00:06:45.100
like a stop gap until you actually put together


00:06:45.100 --> 00:06:47.340
like proper packaging for your source code.


00:06:47.340 --> 00:06:50.020
But the more I talk to real life people


00:06:50.020 --> 00:06:53.860
who are testing all sorts of software and hardware even,


00:06:53.860 --> 00:06:57.580
that's a simplistic view of the world.


00:06:57.580 --> 00:07:02.580
So thinking of everybody is working on packages is not real.


00:07:02.580 --> 00:07:05.640
There's applications, for instance,


00:07:05.640 --> 00:07:07.740
that they're never going to set up,


00:07:07.740 --> 00:07:09.960
hold their code together as a package.


00:07:09.960 --> 00:07:12.100
And that's legitimate.


00:07:12.100 --> 00:07:16.000
So if you have an application and your source code


00:07:16.000 --> 00:07:17.940
is in your source directory and your test code


00:07:17.940 --> 00:07:20.620
is in your test directory, it's just,


00:07:20.620 --> 00:07:22.820
your tests are just not gonna be able to see


00:07:22.820 --> 00:07:24.580
your source code right off the bat.


00:07:24.580 --> 00:07:25.420
- Right, right.


00:07:25.420 --> 00:07:28.860
What's more tricky is depending on how you run it,


00:07:28.860 --> 00:07:31.180
they will or they won't, right?


00:07:31.180 --> 00:07:33.100
If you say run it with PyCharm and you open up


00:07:33.100 --> 00:07:35.140
the whole thing and it can put together the paths,


00:07:35.140 --> 00:07:37.260
you're all good, but if you then just go into the directory


00:07:37.260 --> 00:07:39.140
and type pytest, well, maybe not.


00:07:39.140 --> 00:07:41.840
- It doesn't work and it just confuses a lot of people.


00:07:41.840 --> 00:07:44.560
And so more and more, I'm recommending people


00:07:44.560 --> 00:07:47.240
to use this little plugin.


00:07:47.240 --> 00:07:54.120
And really, the big benefit is it gives you--


00:07:54.120 --> 00:07:55.440
it does a few things.


00:07:55.440 --> 00:08:01.600
But the biggie is just you can add a Python path setting


00:08:01.600 --> 00:08:03.440
within your pytest.ini file.


00:08:03.440 --> 00:08:06.160
And you stick your.ini file at the top of your project.


00:08:06.160 --> 00:08:08.040
And then you just give it a relative path


00:08:08.040 --> 00:08:11.680
to where your source code is like source or SRC


00:08:11.680 --> 00:08:12.960
or something else.


00:08:12.960 --> 00:08:15.680
And then pytest from then on


00:08:15.680 --> 00:08:17.440
will be able to see your source code.


00:08:17.440 --> 00:08:19.200
It's a really simple solution.


00:08:19.200 --> 00:08:21.940
It's just, I--


00:08:21.940 --> 00:08:23.400
- That's way better than what I do.


00:08:23.400 --> 00:08:24.600
- I don't think it's a stopgap.


00:08:24.600 --> 00:08:25.880
I think it's awesome, so.


00:08:25.880 --> 00:08:26.960
- Yeah, I totally agree.


00:08:26.960 --> 00:08:29.600
What I do a lot of times is certain parts of my code,


00:08:29.600 --> 00:08:31.320
I'm like, this is gonna get imported.


00:08:31.320 --> 00:08:33.820
But for me, the real tricky thing is Alembic,


00:08:33.820 --> 00:08:37.160
the database migration tool and the tests


00:08:37.160 --> 00:08:38.060
and the web app.


00:08:38.060 --> 00:08:40.340
And usually I can get the tests in the web app to work


00:08:40.340 --> 00:08:41.620
just fine running them directly.


00:08:41.620 --> 00:08:42.460
But for some reason,


00:08:42.460 --> 00:08:44.340
Alembic always seems to get weird,


00:08:44.340 --> 00:08:46.900
like working directories that don't line up in the same way.


00:08:46.900 --> 00:08:48.100
So it can't import stuff.


00:08:48.100 --> 00:08:50.860
So a lot of times I'll put at the top of some file,


00:08:50.860 --> 00:08:54.260
go to the Python path and add,


00:08:54.260 --> 00:08:57.780
get the directory name from dunder file


00:08:57.780 --> 00:09:00.500
and go to the parent, add that to the Python path.


00:09:00.500 --> 00:09:03.060
And now it's gonna work from then on basically.


00:09:03.060 --> 00:09:04.780
And this seems like a nicer one,


00:09:04.780 --> 00:09:06.820
although it doesn't help me with Alembic, but still.


00:09:06.820 --> 00:09:11.220
- But it might, you might be able to add the limbic path


00:09:11.220 --> 00:09:12.300
right to it, so.


00:09:12.300 --> 00:09:13.620
- Yeah, yeah, for sure.


00:09:13.620 --> 00:09:15.340
- Pretty cool, so it's, yeah, go ahead, Hannah.


00:09:15.340 --> 00:09:16.860
- Oh, I was just gonna say, yeah, like,


00:09:16.860 --> 00:09:18.900
this is something I like pretty much every time


00:09:18.900 --> 00:09:21.060
I set up a new project, like, I always have to


00:09:21.060 --> 00:09:22.620
screw with the Python path.


00:09:22.620 --> 00:09:25.740
I always, like, run it initially, and then it's like,


00:09:25.740 --> 00:09:27.260
oh, can't find blah, blah, blah, and I'm like,


00:09:27.260 --> 00:09:28.600
oh, here we go again.


00:09:28.600 --> 00:09:33.140
But I usually always run my projects from Docker, though,


00:09:33.140 --> 00:09:35.660
so I just, you know, hard code that stuff,


00:09:35.660 --> 00:09:37.060
like just directly in the environment variables.


00:09:37.060 --> 00:09:39.340
- Once you get it set up, yeah, that's cool.


00:09:39.340 --> 00:09:40.180
Nice.


00:09:40.180 --> 00:09:41.900
I dream of days when I can use Docker again,


00:09:41.900 --> 00:09:46.500
have an M1 Mac and it's in super early, early beta stages.


00:09:46.500 --> 00:09:47.340
- Oh no.


00:09:47.340 --> 00:09:48.160
- Yeah, it's all good.


00:09:48.160 --> 00:09:49.820
I don't mind too much because I don't use it that much,


00:09:49.820 --> 00:09:50.820
but it's still cool.


00:09:50.820 --> 00:09:53.100
Brian, it says something about .PTH,


00:09:53.100 --> 00:09:55.020
I'm guessing path files.


00:09:55.020 --> 00:09:55.840
Do you know anything about this?


00:09:55.840 --> 00:09:57.340
I have no idea what those are.


00:09:57.340 --> 00:09:58.620
- Oh, .PTH files.


00:09:58.620 --> 00:10:03.300
So there's, yeah, there are a way to,


00:10:03.300 --> 00:10:04.580
I don't know a lot.


00:10:04.580 --> 00:10:07.180
I don't know the detail, the real big details,


00:10:07.180 --> 00:10:09.620
but it's a way to have a,


00:10:09.620 --> 00:10:13.860
you can have a list of different paths within that file.


00:10:13.860 --> 00:10:17.100
And if you import it or don't import it,


00:10:17.100 --> 00:10:19.340
if you include it in your path,


00:10:19.340 --> 00:10:23.420
then Python, I think, includes all of the contents into,


00:10:23.420 --> 00:10:25.220
anyway, I'm actually I'm blown smoke.


00:10:25.220 --> 00:10:26.340
I don't know the details.


00:10:26.340 --> 00:10:27.180
- Okay. - Sorry.


00:10:27.180 --> 00:10:29.180
- Yeah, but apparently you can have a little more control


00:10:29.180 --> 00:10:31.180
with ETH files, whatever those are.


00:10:31.180 --> 00:10:32.980
- Yeah, I don't know much about that either.


00:10:32.980 --> 00:10:34.220
- Yeah. - Unfortunately.


00:10:34.220 --> 00:10:36.860
I mean, I've been using os.path, so what do I know?


00:10:36.860 --> 00:10:37.700
All right.


00:10:37.700 --> 00:10:38.940
(both laughing)


00:10:38.940 --> 00:10:39.960
Speaking of what do I know,


00:10:39.960 --> 00:10:41.500
I could definitely learn more about pandas,


00:10:41.500 --> 00:10:43.860
and that's one of your items here, right, Hannah?


00:10:43.860 --> 00:10:45.900
- Yeah, so-- - Tell us about it.


00:10:45.900 --> 00:10:50.180
- I thought maybe I just give a little snippet


00:10:50.180 --> 00:10:53.300
of some of the stuff I talk about in the book.


00:10:53.300 --> 00:10:55.100
- Mm-hmm, yeah, fantastic.


00:10:55.100 --> 00:10:58.100
- So yeah, here we go.


00:10:58.100 --> 00:11:00.540
So if we're looking at pandas


00:11:00.540 --> 00:11:03.620
in terms of the dependency hierarchy,


00:11:03.620 --> 00:11:05.760
Well, and I guess I should start at the beginning.


00:11:05.760 --> 00:11:07.300
So what is pandas?


00:11:07.300 --> 00:11:08.680
If you're not familiar with it,


00:11:08.680 --> 00:11:11.960
it's a data analysis library for Python.


00:11:11.960 --> 00:11:15.540
So it's used for doing big data operations.


00:11:15.540 --> 00:11:18.520
And so like, if we look at the dependency hierarchy


00:11:18.520 --> 00:11:20.580
of pandas, it kind of goes like pandas,


00:11:20.580 --> 00:11:22.600
which is dependent on NumPy,


00:11:22.600 --> 00:11:25.960
which deep down is dependent on this thing called BLOS,


00:11:25.960 --> 00:11:29.000
which is basic linear algebra subprograms.


00:11:29.000 --> 00:11:30.880
- Right, and wasn't there something with BLOS


00:11:30.880 --> 00:11:33.660
and a Windows update in a certain version,


00:11:33.660 --> 00:11:35.320
I think recently, I can't remember.


00:11:35.320 --> 00:11:36.360
I feel like there was some update


00:11:36.360 --> 00:11:38.640
that made that thing that wasn't working.


00:11:38.640 --> 00:11:39.480
- Yeah, usually--


00:11:39.480 --> 00:11:40.960
- So there was a big challenge around NumPy


00:11:40.960 --> 00:11:42.720
and versioning and stuff to make it work


00:11:42.720 --> 00:11:43.560
in the short term privacy, okay.


00:11:43.560 --> 00:11:46.360
- Yeah, usually the BLAS library


00:11:46.360 --> 00:11:48.600
is built into your OS already,


00:11:48.600 --> 00:11:49.980
and it just points at that.


00:11:49.980 --> 00:11:53.920
But if you're using something like Anaconda,


00:11:53.920 --> 00:11:58.880
I think by default it installs Intel MLK and uses that.


00:11:58.880 --> 00:12:02.080
But yeah, if you're using Linux or just out of the box,


00:12:02.080 --> 00:12:04.200
whatever's on Windows, which is what it is


00:12:04.200 --> 00:12:06.420
if you pip install it, then yeah,


00:12:06.420 --> 00:12:07.880
there could certainly be issues


00:12:07.880 --> 00:12:10.180
with dependencies mismatches.


00:12:10.180 --> 00:12:16.240
Yeah, so, and I've greatly simplified this,


00:12:16.240 --> 00:12:20.320
but in terms of kind of the languages


00:12:20.320 --> 00:12:23.080
and walking down that dependency hierarchy,


00:12:23.080 --> 00:12:26.180
you start out in Python with pandas,


00:12:26.180 --> 00:12:30.020
And then NumPy is partially Python and partially C.


00:12:30.020 --> 00:12:33.180
And then BLAS is pretty much always written in assembly.


00:12:33.180 --> 00:12:34.940
And if you don't know what assembly is,


00:12:34.940 --> 00:12:37.040
it's basically like a very, very, very,


00:12:37.040 --> 00:12:39.580
like probably the lowest level language you can program in.


00:12:39.580 --> 00:12:42.740
And it's essentially like CPU instructions


00:12:42.740 --> 00:12:44.460
for your processor.


00:12:44.460 --> 00:12:48.620
And so I've taken this just like basic example here


00:12:48.620 --> 00:12:51.420
and I'm gonna kind of like roll with it.


00:12:51.420 --> 00:12:55.980
So if we're doing just like a basic addition in pandas,


00:12:55.980 --> 00:13:00.620
say like we have column A and we want to add that with column B and like store it back


00:13:00.620 --> 00:13:01.620
into column C.


00:13:01.620 --> 00:13:05.540
Like a traditional linear algebra vector addition type thing.


00:13:05.540 --> 00:13:06.540
Yes.


00:13:06.540 --> 00:13:08.420
Traditional vector math.


00:13:08.420 --> 00:13:16.060
So pandas, like if you look at these operations, each of these like additions on a per row


00:13:16.060 --> 00:13:22.260
basis is independent, meaning like you could conceivably run like each of those additions


00:13:22.260 --> 00:13:23.980
for each row like in parallel.


00:13:23.980 --> 00:13:26.980
There's no reason why you have to go row by row.


00:13:26.980 --> 00:13:32.980
And that's essentially what big data analysis libraries are at their core,


00:13:32.980 --> 00:13:38.980
is they understand this conceptually and try to parallelize things as much as possible.


00:13:38.980 --> 00:13:42.980
And so that's kind of the first fundamental understanding that you have to have


00:13:42.980 --> 00:13:46.980
when working with pandas is you should be doing things in parallel as much as you can,


00:13:46.980 --> 00:13:51.980
which means understanding the API and understanding which functions in the API


00:13:51.980 --> 00:13:54.700
will let you do things in parallel.


00:13:54.700 --> 00:13:58.620
So if we're just not using pandas at all,


00:13:58.620 --> 00:14:02.260
say we're just inventing our own technique for this,


00:14:02.260 --> 00:14:05.100
you might think, well, each of these rows


00:14:05.100 --> 00:14:07.020
could be broken up into a thread.


00:14:07.020 --> 00:14:08.980
So we could say thread one is going


00:14:08.980 --> 00:14:12.140
to run the first row addition, and then thread two


00:14:12.140 --> 00:14:15.020
is going to run the second row, et cetera.


00:14:15.020 --> 00:14:17.860
But you might find that we'll run into issues


00:14:17.860 --> 00:14:20.340
with this in terms of the gil.


00:14:20.340 --> 00:14:25.340
So like the GIL is otherwise known as the global interpreter lock in Python


00:14:25.340 --> 00:14:31.140
prevents us from really like running a multi-threaded app operation


00:14:31.140 --> 00:14:32.940
like in parallel.


00:14:32.940 --> 00:14:39.240
Basically Python can run, the rule is it can run one Python opcode at a time.


00:14:39.240 --> 00:14:39.740
Yeah.


00:14:39.740 --> 00:14:40.840
And that's it, right?


00:14:40.840 --> 00:14:43.640
It doesn't matter if you've got, you know, 16 cores.


00:14:43.640 --> 00:14:44.940
It's one at a time.


00:14:44.940 --> 00:14:46.040
Yeah, yeah.


00:14:46.040 --> 00:14:53.380
And this is really terrible for trying to do things in parallel, right?


00:14:53.380 --> 00:14:57.300
So that kind of use case is out.


00:14:57.300 --> 00:15:01.760
Like, pandas and NumPy and all that stuff is not going to be able to use multithreading.


00:15:01.760 --> 00:15:07.980
And so, I just want to point out,


00:15:07.980 --> 00:15:13.520
like, Python, at its core, has this fundamental problem,


00:15:13.520 --> 00:15:15.400
which is why they went with the GIL.


00:15:15.400 --> 00:15:18.160
So like Python manages memory for you.


00:15:18.160 --> 00:15:22.300
And how it does that is it keeps track of references


00:15:22.300 --> 00:15:27.300
to know when to free up memory.


00:15:27.300 --> 00:15:31.280
So like when memory can be like completely destroyed


00:15:31.280 --> 00:15:33.540
and somebody else can use it essentially.


00:15:33.540 --> 00:15:34.380
And like that's something--


00:15:34.380 --> 00:15:35.600
- Otherwise you gotta do stuff like,


00:15:35.600 --> 00:15:37.360
Brian sometimes probably has to do with C


00:15:37.360 --> 00:15:40.240
and like malloc and free and all those things, right?


00:15:40.240 --> 00:15:41.740
- Yeah, exactly, yeah.


00:15:41.740 --> 00:15:44.320
Yeah, so like C you have to do this with yourself


00:15:44.320 --> 00:15:46.880
with like malic and free and all that stuff.


00:15:46.880 --> 00:15:50.360
But with Python, it does it for you, but that comes at a cost,


00:15:50.360 --> 00:15:54.360
which means like every single object in Python has this little like counter,


00:15:54.360 --> 00:15:56.000
which is like a reference counter.


00:15:56.000 --> 00:15:59.640
And so basically like way back in the day,


00:15:59.640 --> 00:16:02.840
like when threading first became a thing,


00:16:02.840 --> 00:16:07.920
like in order to kind of like avoid this threading problem,


00:16:07.920 --> 00:16:10.320
they came up with the gil,


00:16:10.320 --> 00:16:13.120
which basically says you can only run one thread at a time,


00:16:13.120 --> 00:16:15.520
or like one opcode at a time, as you said.


00:16:15.520 --> 00:16:17.760
- And attempts have been made to remove it.


00:16:17.760 --> 00:16:20.160
Like Larry Hastings has been working on something


00:16:20.160 --> 00:16:23.840
called the Galectomy, the removal of the GIL for a while.


00:16:23.840 --> 00:16:26.760
And the main problem is if you take it away,


00:16:26.760 --> 00:16:28.480
the way it works now is you have to do lock


00:16:28.480 --> 00:16:31.240
on all memory access, all variable access,


00:16:31.240 --> 00:16:32.640
which actually has a bigger hit


00:16:32.640 --> 00:16:34.200
than a lot of the benefits you would get,


00:16:34.200 --> 00:16:35.680
at least in the single threaded case.


00:16:35.680 --> 00:16:37.360
And I know Guido said, like,


00:16:37.360 --> 00:16:39.440
if we really don't want to make changes to this,


00:16:39.440 --> 00:16:41.920
if it's going to mean slower single threaded Python,


00:16:41.920 --> 00:16:43.040
they're probably not for a while.


00:16:43.040 --> 00:16:46.180
- Yeah, yeah, yeah, and that is a big problem.


00:16:46.180 --> 00:16:49.940
So like, I mean, if generally what people use,


00:16:49.940 --> 00:16:52.980
like instead of threads in Python is they use like


00:16:52.980 --> 00:16:56.000
multi-process and they spin up multiple Python processes,


00:16:56.000 --> 00:16:57.820
right, and like that truly kind of like


00:16:57.820 --> 00:17:00.020
achieves the parallelism.


00:17:00.020 --> 00:17:03.100
But anyways, I digress.


00:17:03.100 --> 00:17:09.180
So we can't use the GIL, but what's interesting to note


00:17:09.180 --> 00:17:14.180
is when you're running NumPy at its very low level in C,


00:17:14.180 --> 00:17:16.700
like when you enter and look at the C files,


00:17:16.700 --> 00:17:18.900
it actually is not subject to the GIL anymore


00:17:18.900 --> 00:17:20.300
'cause you're in C.


00:17:20.300 --> 00:17:23.340
And so you can potentially run, you know,


00:17:23.340 --> 00:17:27.100
multi-threaded things in C and call it from Python.


00:17:27.100 --> 00:17:32.900
But beyond that, if we look at Bloss,


00:17:32.900 --> 00:17:36.340
Bloss has built-in like parallelization


00:17:36.340 --> 00:17:38.540
for like hardware parallelization.


00:17:38.540 --> 00:17:42.540
And how it does that is through vector registers.


00:17:42.540 --> 00:17:48.260
So if you're not familiar with like the architecture of CPUs and stuff,


00:17:48.260 --> 00:17:52.820
like at its core, you basically only have like,


00:17:52.820 --> 00:17:57.700
only can have a certain small set, maybe like three or four values


00:17:57.700 --> 00:18:02.500
in your CPU at any one time that you're running like adds and multiplies on.


00:18:02.500 --> 00:18:08.180
And like how that works is you load those values like into the CPU from memory.


00:18:08.180 --> 00:18:10.940
and that load can be quite time consuming.


00:18:10.940 --> 00:18:14.220
It's really just based on how far away your memory is


00:18:14.220 --> 00:18:16.260
from your CPU at the end of the day,


00:18:16.260 --> 00:18:17.620
like physically on your board.


00:18:17.620 --> 00:18:18.940
>> Right. Is it in cache?


00:18:18.940 --> 00:18:20.140
Is it in regular RAM?


00:18:20.140 --> 00:18:22.300
>> Yes. That's why we have caches.


00:18:22.300 --> 00:18:26.060
Caches are memory that's closer to your CPU.


00:18:26.060 --> 00:18:28.420
Consequently, it's also smaller.


00:18:28.420 --> 00:18:32.780
But that's how you might hear people say,


00:18:32.780 --> 00:18:35.620
"So-and-so wrote this really performant program


00:18:35.620 --> 00:18:38.640
and it utilizes the size of the cache or whatever.


00:18:38.640 --> 00:18:42.820
So basically, if you can load all of that data


00:18:42.820 --> 00:18:45.020
into your cache and run the operations on it


00:18:45.020 --> 00:18:47.540
without ever having to go back out to memory,


00:18:47.540 --> 00:18:49.420
you can make a really fast program.


00:18:49.420 --> 00:18:51.220
- Yeah, yeah, it could be like 100 times faster


00:18:51.220 --> 00:18:52.140
than regular memory.


00:18:52.140 --> 00:18:54.660
- Yeah, yeah, and so essentially,


00:18:54.660 --> 00:18:58.820
that's what Bloss is trying to do underneath


00:18:58.820 --> 00:19:03.660
and NumPy is they're trying to take this giant set of data


00:19:03.660 --> 00:19:06.900
and break it into chunks and load those chunks


00:19:06.900 --> 00:19:10.680
into your cache and operate on those chunks


00:19:10.680 --> 00:19:12.740
and then dump them back out to memory


00:19:12.740 --> 00:19:14.580
and load the next chunk.


00:19:14.580 --> 00:19:16.420
- Very cool, thanks for pointing that out.


00:19:16.420 --> 00:19:18.700
I didn't realize that BLAS leveraged


00:19:18.700 --> 00:19:20.660
some of the OS native stuff,


00:19:20.660 --> 00:19:24.180
nor that it had special CPU instruction type optimization.


00:19:24.180 --> 00:19:25.020
That's pretty cool.


00:19:25.020 --> 00:19:26.820
- Yeah, yeah.


00:19:26.820 --> 00:19:30.580
So it has, on top of the registers,


00:19:30.580 --> 00:19:32.700
it also has these things called vector registers,


00:19:32.700 --> 00:19:35.400
which actually can hold multiple values


00:19:35.400 --> 00:19:37.260
at a time in your CPU.


00:19:37.260 --> 00:19:42.080
So we could take this simple example of the addition


00:19:42.080 --> 00:19:45.040
and we could actually, well we can't run those


00:19:45.040 --> 00:19:49.880
per row calculations in parallel with threads,


00:19:49.880 --> 00:19:51.720
we can with vector registers.


00:19:51.720 --> 00:19:52.560
- Okay, yeah.


00:19:52.560 --> 00:19:54.840
- And the limitation there is that the memory


00:19:54.840 --> 00:19:58.560
has to be sequential when you load it in.


00:19:58.560 --> 00:19:59.960
- This is definitely at a level lower


00:19:59.960 --> 00:20:00.880
than I'm used to working at.


00:20:00.880 --> 00:20:01.720
How about you, Brian?


00:20:01.720 --> 00:20:03.800
(laughing)


00:20:03.800 --> 00:20:07.400
But yeah, so anyways, this is just like kind of the stuff


00:20:07.400 --> 00:20:09.120
that I talk about in my book.


00:20:09.120 --> 00:20:12.700
It's not necessarily about like how to use pandas,


00:20:12.700 --> 00:20:14.420
but it's about like kind of like


00:20:14.420 --> 00:20:16.160
what's going on underneath pandas.


00:20:16.160 --> 00:20:18.160
And then like once you kind of like build


00:20:18.160 --> 00:20:19.720
that foundation of understanding,


00:20:19.720 --> 00:20:23.580
like you can understand like better how pandas is working


00:20:23.580 --> 00:20:25.100
and like how to use it correctly


00:20:25.100 --> 00:20:27.080
and what all the various functions are doing.


00:20:27.080 --> 00:20:29.080
- Fantastic, yeah, so people can check out your book.


00:20:29.080 --> 00:20:31.640
Got a link to it in the show notes, so very nice.


00:20:31.640 --> 00:20:36.640
It's offering me the Euro price, which is fine.


00:20:36.640 --> 00:20:39.760
I don't mind.


00:20:39.760 --> 00:20:41.760
- Yeah, so it's on Amazon too.


00:20:41.760 --> 00:20:44.040
It's on a lot of different platforms,


00:20:44.040 --> 00:20:45.480
but I figured I'd just point directly to the publishers.


00:20:45.480 --> 00:20:49.240
- Yeah, no, that's perfect.


00:20:49.240 --> 00:20:51.240
Quick comment, Roy Larson says,


00:20:51.240 --> 00:20:53.800
NumPy and Intel MKL cause issues sometimes,


00:20:53.800 --> 00:20:57.600
particularly on Windows, if something else


00:20:57.600 --> 00:20:59.360
in the system uses Intel MKL.


00:20:57.800 --> 00:20:58.640
- Yeah, interesting.


00:20:58.640 --> 00:20:59.800
I have no experience with that,


00:20:59.800 --> 00:21:00.640
but I can believe it.


00:21:00.640 --> 00:21:01.720
Intel has a lot of interesting stuff.


00:21:01.720 --> 00:21:04.800
They even have a special Python compiled version,


00:21:04.800 --> 00:21:07.080
I think, for Intel to use potentially.


00:21:07.080 --> 00:21:08.800
I'm not sure, they have some high performance version.


00:21:08.800 --> 00:21:11.600
- Yeah, yeah, yeah, they do, yeah.


00:21:11.600 --> 00:21:14.240
- Also in Portland, keep it in Portland, there we go.


00:21:14.240 --> 00:21:17.880
Now, before we move on to the next item,


00:21:17.880 --> 00:21:19.800
let me tell you about our sponsor today.


00:21:19.800 --> 00:21:21.320
Thank you to Datadog.


00:21:21.320 --> 00:21:23.160
So they're sponsoring Datadog.


00:21:23.160 --> 00:21:25.960
And if you're having trouble visualizing latency,


00:21:25.960 --> 00:21:28.600
CPU, memory bottlenecks, things like that in your app,


00:21:28.600 --> 00:21:30.520
and you don't know why, you don't know where it's coming


00:21:30.520 --> 00:21:33.160
from or how to solve it, you can use Datadog to correlate


00:21:33.160 --> 00:21:36.120
logs and traces at the level of individual requests,


00:21:36.120 --> 00:21:38.280
allowing you to quickly troubleshoot your Python app.


00:21:38.280 --> 00:21:40.960
Plus, they have a continuous profiler that allows you


00:21:40.960 --> 00:21:42.920
to find the most resource consuming parts


00:21:42.920 --> 00:21:45.720
of your production code all the time at any scale


00:21:45.720 --> 00:21:46.560
with minimal overhead.


00:21:46.560 --> 00:21:48.880
So you just point out your production server, run it,


00:21:48.880 --> 00:21:50.440
which is not normally something you want to do


00:21:50.440 --> 00:21:52.320
with diagnostic tools, but you can with their


00:21:52.320 --> 00:21:54.400
continuous profiler, which is pretty awesome.


00:21:54.400 --> 00:21:56.120
So be the hero that got that app back on track


00:21:56.120 --> 00:21:58.080
at your company, get started with a free trial


00:21:58.080 --> 00:22:01.000
at pythonbytes.fm/datadog, or just click the link


00:22:01.000 --> 00:22:03.040
in your podcast or your show notes.


00:22:03.040 --> 00:22:06.920
Now, I'm sure you all have heard that


00:22:06.920 --> 00:22:09.640
working with pickle has all sorts of issues, right?


00:22:09.640 --> 00:22:12.080
The pickle is a way to say, take my Python thing,


00:22:12.080 --> 00:22:14.420
make a binary version of bits that looks like


00:22:14.420 --> 00:22:16.880
that Python thing so I can go do stuff with it, right?


00:22:16.880 --> 00:22:20.720
That's generally got issues, not the least of which


00:22:20.720 --> 00:22:23.060
actually are around the security stuff.


00:22:23.060 --> 00:22:26.460
So like you unpickle, something to deserialize it back


00:22:26.460 --> 00:22:28.820
is actually potentially running arbitrary code.


00:22:28.820 --> 00:22:31.020
So people could send you a pickle virus.


00:22:31.020 --> 00:22:32.300
I don't know what that is, like a bad,


00:22:32.300 --> 00:22:33.860
a rotten pickle or whatever.


00:22:33.860 --> 00:22:34.820
That wouldn't be good.


00:22:34.820 --> 00:22:37.740
So there's a library I came across


00:22:37.740 --> 00:22:39.900
that solves a lot of the pickle problems.


00:22:39.900 --> 00:22:41.700
It's supposed to be faster than pickle


00:22:41.700 --> 00:22:43.560
and it was cleverly named Quickle.


00:22:43.560 --> 00:22:45.660
(laughing)


00:22:45.660 --> 00:22:46.860
Have either of you heard of this thing?


00:22:46.860 --> 00:22:47.700
- No.


00:22:47.700 --> 00:22:48.780
- Yeah, it's cool, right?


00:22:48.780 --> 00:22:50.380
So here's the deal.


00:22:50.380 --> 00:22:52.920
It's a fast serialization format


00:22:52.920 --> 00:22:54.520
for a subset of Python types.


00:22:54.520 --> 00:22:55.820
You can't pickle everything,


00:22:55.820 --> 00:22:58.520
but you can pickle way more, say, than JSON.


00:22:58.520 --> 00:23:02.080
And the reasons they give to use it are it's fast.


00:23:02.080 --> 00:23:03.200
If you check out the benchmarks,


00:23:03.200 --> 00:23:04.200
I'll pull those up in a second,


00:23:04.200 --> 00:23:07.380
it's one of the fastest ways to serialize things in Python.


00:23:07.380 --> 00:23:09.480
It's safe, which is important.


00:23:09.480 --> 00:23:12.680
Unlike pickle, deserializing a user-provided message


00:23:12.680 --> 00:23:15.800
does not allow arbitrary code execution, hooray.


00:23:15.800 --> 00:23:17.440
That seems like the minimum bar.


00:23:17.440 --> 00:23:18.880
Like, oh, I got stuff off the internet.


00:23:18.880 --> 00:23:19.860
Let's try to execute that.


00:23:19.860 --> 00:23:21.120
What's that gonna do?


00:23:21.120 --> 00:23:23.860
Oh, look, it's reading all my files, that's nice.


00:23:23.860 --> 00:23:25.020
All right.


00:23:25.020 --> 00:23:28.800
It also, it's a flexible 'cause it supports more types.


00:23:28.800 --> 00:23:31.560
And we'll also learn about a bunch of other libraries


00:23:31.560 --> 00:23:33.040
while we're at it here, which is kind of cool.


00:23:33.040 --> 00:23:35.780
A bunch of things I heard of like MSGPack,


00:23:35.780 --> 00:23:37.200
or well, JSON, you may have heard of that.


00:23:37.200 --> 00:23:39.160
And the other main problem you get


00:23:39.160 --> 00:23:40.680
with some of these binary formats


00:23:40.680 --> 00:23:42.480
is you can end up where,


00:23:42.480 --> 00:23:44.440
in a situation where you can't read something


00:23:44.440 --> 00:23:45.460
if you make a change to your code.


00:23:45.460 --> 00:23:47.720
Like, so imagine I've got a user object


00:23:47.720 --> 00:23:50.320
and I've pickled them and put them into a Redis cache.


00:23:50.320 --> 00:23:51.840
We upgrade our web app,


00:23:51.840 --> 00:23:54.000
which adds a new field to the user object.


00:23:54.000 --> 00:23:55.240
That stuff is still in cache.


00:23:55.240 --> 00:23:57.120
After we restart, we try to read it.


00:23:57.120 --> 00:23:58.680
Oh, that stuff isn't there anymore.


00:23:58.680 --> 00:24:00.440
You can't use your cache anymore.


00:24:00.440 --> 00:24:02.200
Everything's broken, et cetera, et cetera.


00:24:02.200 --> 00:24:05.060
So it has a concept of schema evolution,


00:24:05.060 --> 00:24:07.760
having different versions of like history.


00:24:07.760 --> 00:24:09.880
So there's ways that older messages can be read


00:24:09.880 --> 00:24:11.240
without errors, which is pretty cool.


00:24:11.240 --> 00:24:12.320
- Yeah, that's nice.


00:24:12.320 --> 00:24:13.160
- Yeah, neat, huh?


00:24:13.160 --> 00:24:14.520
I'll pull up the benchmarks.


00:24:14.520 --> 00:24:16.380
There's actually a pretty cool little site here.


00:24:16.380 --> 00:24:17.900
shows you some examples on how to use it.


00:24:17.900 --> 00:24:19.020
I mean, it's incredibly simple.


00:24:19.020 --> 00:24:20.700
It's like, dump this as a string,


00:24:20.700 --> 00:24:23.060
read this, deserialize this, it's real simple.


00:24:23.060 --> 00:24:27.340
So, but there's quite interesting analysis,


00:24:27.340 --> 00:24:29.260
live analysis where you can click around


00:24:29.260 --> 00:24:31.180
and you can actually look at like load speed


00:24:31.180 --> 00:24:35.100
versus read, like serialize versus deserialize speed,


00:24:35.100 --> 00:24:36.940
how much memory is used and things like that.


00:24:36.940 --> 00:24:39.700
And it compares against pickle tuples,


00:24:39.700 --> 00:24:43.260
protobuf, pickle itself, ORJSON, MSGPACK,


00:24:43.260 --> 00:24:45.180
QUICKL and QUICKLstructs.


00:24:45.180 --> 00:24:46.020
There's a lot of things.


00:24:46.020 --> 00:24:48.060
I mean, I knew about two of those, I think.


00:24:48.060 --> 00:24:49.020
That's cool.


00:24:49.020 --> 00:24:50.020
But these are all different ways.


00:24:50.020 --> 00:24:51.980
And you can see, like in all these pictures,


00:24:51.980 --> 00:24:53.480
generally, at least the top one


00:24:53.480 --> 00:24:55.520
where it's time shorter is better, right?


00:24:55.520 --> 00:24:57.560
So you can see, if you go with their like,


00:24:57.560 --> 00:25:00.260
quick old struts, it's quick roll of thumb,


00:25:00.260 --> 00:25:02.260
maybe four or five times faster than pickle,


00:25:02.260 --> 00:25:05.520
which I presume is way faster than JSON, for example.


00:25:05.520 --> 00:25:06.940
And you'll also see the memory size,


00:25:06.940 --> 00:25:08.720
which actually varies by about 50%


00:25:08.720 --> 00:25:10.560
across the different things.


00:25:10.560 --> 00:25:13.220
Also speed of load in a whole bunch of different objects


00:25:13.220 --> 00:25:14.060
and so on.


00:25:14.060 --> 00:25:17.140
So yeah, you can come check out these analysis here.


00:25:17.140 --> 00:25:19.740
Let's see all the different libraries that we had.


00:25:19.740 --> 00:25:21.460
Yeah, I guess we read them all off basically there.


00:25:21.460 --> 00:25:23.220
But yeah, there's a bunch of different ways


00:25:23.220 --> 00:25:25.220
which are not pickle itself


00:25:25.220 --> 00:25:27.540
to do this kind of binary serialization,


00:25:27.540 --> 00:25:29.060
which is pretty interesting, I think.


00:25:29.060 --> 00:25:31.200
- It does protobuf, that's pretty cool.


00:25:31.200 --> 00:25:33.300
Actually, I wanna try this out.


00:25:33.300 --> 00:25:34.140
It looks neat. - Yeah, yeah.


00:25:34.140 --> 00:25:35.420
It looks really neat, right?


00:25:35.420 --> 00:25:36.260
- And one of the things,


00:25:36.260 --> 00:25:37.940
I was just looking at the source code.


00:25:37.940 --> 00:25:40.540
I love that they use pytest to test this.


00:25:40.540 --> 00:25:42.140
Of course, you should use pytest.


00:25:43.220 --> 00:25:46.380
But the, I can't believe I'm saying this,


00:25:46.380 --> 00:25:48.140
but this would be the perfect package


00:25:48.140 --> 00:25:50.860
to test with a Gherkin syntax, don't you think?


00:25:50.860 --> 00:25:52.180
'Cause it's a pickle thing.


00:25:52.180 --> 00:25:55.240
- Oh my gosh, you've got to use the Gherkin syntax.


00:25:55.240 --> 00:25:57.500
(laughing)


00:25:57.500 --> 00:25:59.220
Yeah, you definitely should.


00:25:59.220 --> 00:26:03.540
And Roy threw out another one like UQ Foundation.


00:26:03.540 --> 00:26:05.860
DIL package deals with many of the same issues,


00:26:05.860 --> 00:26:08.380
but because it's binary, it has all the same


00:26:08.380 --> 00:26:10.620
sort of versioning challenges you might run into as well.


00:26:10.620 --> 00:26:12.760
- DIL, the DIL package, that's funny.


00:26:12.760 --> 00:26:14.080
(laughing)


00:26:14.080 --> 00:26:15.520
- Yeah, pretty good, pretty good.


00:26:15.520 --> 00:26:16.760
All right, so anyway, like, you know,


00:26:16.760 --> 00:26:19.040
I'm kind of a fan of JSON these days.


00:26:19.040 --> 00:26:22.400
I've had enough XML with custom namespaces in my life


00:26:22.400 --> 00:26:24.240
that I really don't want to go down that path


00:26:24.240 --> 00:26:26.760
and XSLT and all that, but, you know,


00:26:26.760 --> 00:26:29.520
I've really shied away from these binary formats


00:26:29.520 --> 00:26:31.220
for a lot of these reasons here,


00:26:31.220 --> 00:26:33.120
but you know, this might make me interested.


00:26:33.120 --> 00:26:35.360
If I was gonna say throw something into a cache,


00:26:35.360 --> 00:26:36.680
the whole point is put it in the cache,


00:26:36.680 --> 00:26:39.000
get it back, read it fast, this might be decent.


00:26:39.000 --> 00:26:41.800
- Yeah, yeah, it definitely seems to address


00:26:41.800 --> 00:26:44.280
a lot of the concerns I have with PQL, for sure.


00:26:44.280 --> 00:26:46.680
- Yeah, and I don't, did I talk about the types?


00:26:46.680 --> 00:26:48.160
Somewhere in here we have, yeah, here's,


00:26:48.160 --> 00:26:50.000
there's quite a list of types.


00:26:50.000 --> 00:26:51.480
You know, one's really nice, date/time.


00:26:51.480 --> 00:26:52.760
You can't do that with JSON.


00:26:52.760 --> 00:26:55.000
Why in the world doesn't JSON support


00:26:55.000 --> 00:26:56.840
some sort of time information?


00:26:56.840 --> 00:26:59.400
Oh, well, but you've got most of the fundamental types


00:26:59.400 --> 00:27:00.600
that you might run into.


00:27:00.600 --> 00:27:03.120
All right, so PQL, give it a quick look.


00:27:03.120 --> 00:27:04.800
(both laughing)


00:27:04.800 --> 00:27:06.680
All right, Brian, what you got here?


00:27:06.680 --> 00:27:10.580
- Well, I was actually reading a different article,


00:27:10.580 --> 00:27:13.080
But it came up--


00:27:13.080 --> 00:27:16.080
I think we've talked about Friendly Traceback.


00:27:16.080 --> 00:27:18.040
It's a package that just sort of tries


00:27:18.040 --> 00:27:20.600
to make your tracebacks nicer.


00:27:20.600 --> 00:27:24.080
But I didn't realize it had a console built in.


00:27:24.080 --> 00:27:27.520
So I was pretty blown away by this.


00:27:27.520 --> 00:27:30.480
So it's not trivial to get set up.


00:27:30.480 --> 00:27:31.560
It's not that terrible.


00:27:31.560 --> 00:27:35.360
But you have to start your own console, start the REPL,


00:27:35.360 --> 00:27:38.840
import Friendly Traceback, and then do Friendly Traceback


00:27:38.840 --> 00:27:39.920
start console.


00:27:39.920 --> 00:27:44.560
But at that point, you have just like the normal console,


00:27:44.560 --> 00:27:46.360
but you have better tracebacks.


00:27:46.360 --> 00:27:48.940
And then also you have all these different cool functions


00:27:48.940 --> 00:27:53.940
you can call, like what, where, why,


00:27:53.940 --> 00:27:56.600
and explain and more.


00:27:56.600 --> 00:27:58.860
And basically if something goes wrong


00:27:58.860 --> 00:28:00.900
while you're playing with Python,


00:28:00.900 --> 00:28:04.640
you can interrogate it and ask for more information.


00:28:04.640 --> 00:28:06.720
And that's just pretty cool.


00:28:06.720 --> 00:28:08.480
The why is really great.


00:28:08.480 --> 00:28:11.840
So if you have one of the examples I saw before,


00:28:11.840 --> 00:28:14.680
and I think I might start using this when teaching people,


00:28:14.680 --> 00:28:19.720
is we often have exceptions like you assigned to none,


00:28:19.720 --> 00:28:22.080
or you assigned to something that can't be assigned,


00:28:22.080 --> 00:28:24.840
or you didn't match up the bracket in


00:28:24.840 --> 00:28:27.880
the parenthesis or something like that correctly.


00:28:27.880 --> 00:28:30.440
You'll get just syntax error,


00:28:30.440 --> 00:28:31.920
and it'll point to the syntax error,


00:28:31.920 --> 00:28:34.260
but you might not know more.


00:28:34.260 --> 00:28:35.920
So you can just type Y,


00:28:35.920 --> 00:28:40.600
a whywith parentheses because it's a function.


00:28:40.600 --> 00:28:42.280
It'll tell you why.


00:28:42.280 --> 00:28:43.160
>> Why?


00:28:43.160 --> 00:28:43.600
>> Where?


00:28:43.600 --> 00:28:45.440
>> It's like the great storytelling,


00:28:45.440 --> 00:28:47.440
the five whys of a bug.


00:28:47.440 --> 00:28:49.040
>> Yeah.


00:28:49.040 --> 00:28:51.520
>> The five whys of a bug.


00:28:51.520 --> 00:28:55.600
>> Yeah. You can say what to repeat what the error was,


00:28:55.600 --> 00:28:57.840
why it will tell you why that was an error,


00:28:57.840 --> 00:29:00.320
and then specifically what you did wrong,


00:29:00.320 --> 00:29:02.240
and then where it will show you.


00:29:02.240 --> 00:29:05.100
If you've been asking all sorts of questions,


00:29:05.100 --> 00:29:07.280
and you lost where the actual trace back was,


00:29:07.280 --> 00:29:10.420
you can say where and it'll point directly to it.


00:29:10.420 --> 00:29:12.080
I think this is going to be cool.


00:29:12.080 --> 00:29:13.920
I think I'll use this when trying to teach,


00:29:13.920 --> 00:29:16.740
especially kids, but really just people new to Python.


00:29:16.740 --> 00:29:18.300
Tracebacks can be very difficult.


00:29:18.300 --> 00:29:20.100
>> It's going to be really helpful for them.


00:29:20.100 --> 00:29:22.500
I know I sometimes have to look up


00:29:22.500 --> 00:29:25.700
certain error messages that I'm not familiar with.


00:29:25.700 --> 00:29:27.500
Yeah, that would be super helpful.


00:29:27.500 --> 00:29:28.820
I could just do it right in the console.


00:29:28.820 --> 00:29:30.580
>> Yeah, I totally agree. You're going to have to help me


00:29:30.580 --> 00:29:32.580
find a W that goes with this.


00:29:32.580 --> 00:29:37.260
But I want the what would be effectively Google open, close, privacy.


00:29:37.260 --> 00:29:43.540
You know, because so often you get this huge trace back and you've got these errors.


00:29:43.540 --> 00:29:46.260
And if you go through and you select it, like, for example, the error you see on the screen,


00:29:46.260 --> 00:29:52.140
an unbound local error, local variable greetings in quotes, reference before assignments.


00:29:52.140 --> 00:29:56.020
Well, the quotes means oftentimes in search, like it must have the word greeting.


00:29:56.020 --> 00:30:00.260
And that's the one thing that is not relevant to the the the Googling of it.


00:30:00.260 --> 00:30:02.900
So if I'm a beginner and I even try to Google that,


00:30:02.900 --> 00:30:05.540
I might get a really wrong message.


00:30:05.540 --> 00:30:10.340
If you could say, Google this in a way that is most likely going to find the error,


00:30:10.340 --> 00:30:13.700
but without carrying through variable details,


00:30:13.700 --> 00:30:16.700
file name details, but just the essence of the error,


00:30:16.700 --> 00:30:17.900
that would be fantastic.


00:30:17.900 --> 00:30:20.380
Now, how do we say that with W?


00:30:20.380 --> 00:30:23.740
>> You just say, whoa.


00:30:23.740 --> 00:30:27.380
>> Or maybe www.


00:30:27.380 --> 00:30:28.340
>> There you go.


00:30:28.340 --> 00:30:30.620
>> Or WTF. I mean, come on, there's some options here.


00:30:30.620 --> 00:30:32.660
>> WTF. WTF is good.


00:30:32.660 --> 00:30:36.740
>> Wouldn't that be great? That's also part of this package that you see at


00:30:36.740 --> 00:30:41.500
their main site where you've got these really cool visualized stuff,


00:30:41.500 --> 00:30:43.300
where it more tries to tell you


00:30:43.300 --> 00:30:45.340
the problem of the error with the help text and whatnot.


00:30:45.340 --> 00:30:45.820
>> Yeah.


00:30:45.820 --> 00:30:47.620
>> Yeah, this is cool. Also uses Rich,


00:30:47.620 --> 00:30:50.100
which is a cool library we talked about previously as well.


00:30:50.100 --> 00:30:52.900
>> I love Rich. I include Rich in everything now,


00:30:52.900 --> 00:30:56.340
even just to print out simple better tables. It's great.


00:30:56.340 --> 00:30:57.620
>> Yeah, for sure.


00:30:57.620 --> 00:30:59.220
- Hannah, do you see yourself using this,


00:30:59.220 --> 00:31:02.300
or are you more in notebooks?


00:31:02.300 --> 00:31:06.700
- Oh, no, I mean, I usually use the PDB debugger,


00:31:06.700 --> 00:31:10.880
so yeah, I mean, I'm not sure if this as it is


00:31:10.880 --> 00:31:15.880
would be a problem, it would depend on how much information


00:31:15.880 --> 00:31:19.900
it has about obscure errors from dependent libraries,


00:31:19.900 --> 00:31:22.260
which is usually what I end up looking at these days.


00:31:22.260 --> 00:31:25.780
But yeah, I mean, conceivably, yeah, that could be helpful.


00:31:25.780 --> 00:31:27.580
- Yeah, if we get that WTF feature added,


00:31:27.580 --> 00:31:28.800
then it's gonna go-- - Yeah, oh yeah,


00:31:28.800 --> 00:31:29.760
for sure, gosh.


00:31:29.760 --> 00:31:31.560
(laughing)


00:31:31.560 --> 00:31:33.840
- Speaking of errors, let's cover your last item,


00:31:33.840 --> 00:31:34.760
last item of the show.


00:31:34.760 --> 00:31:39.760
- Woohoo, yeah, so I at work,


00:31:39.760 --> 00:31:43.780
work in the security org,


00:31:43.780 --> 00:31:46.420
and I write automation tools for them,


00:31:46.420 --> 00:31:50.080
which means sometimes the repos that we work on


00:31:50.080 --> 00:31:55.080
get to be test subjects for new requirements and such,


00:31:55.080 --> 00:32:04.040
and such. And so recently, our work was exploring like static code analysis, looking for like


00:32:04.040 --> 00:32:10.080
security vulnerabilities in the code. And so I ran across Bandit and I integrated Bandit


00:32:10.080 --> 00:32:11.080
into our...


00:32:11.080 --> 00:32:15.480
We don't have time to go through these old legacy code and fix these problems. Oh, wait,


00:32:15.480 --> 00:32:20.080
this is what it means? Oh, sorry. Yes, we can do that right now. That's the kind of


00:32:20.080 --> 00:32:22.080
report you got from Bandit?


00:32:22.080 --> 00:32:24.080
Yeah, exactly.


00:32:24.080 --> 00:32:28.080
So yeah, we integrated Bandit into our legacy code base.


00:32:28.080 --> 00:32:35.080
And we actually, it's funny you say that because the bug that I found using Bandit was actually from the legacy code.


00:32:35.080 --> 00:32:38.080
That does not surprise me.


00:32:38.080 --> 00:32:39.080
Yeah.


00:32:39.080 --> 00:32:43.080
So it was a pretty stupid error.


00:32:43.080 --> 00:32:49.080
It was pretty obvious if you were doing a code review, but because it was legacy code and it was already there,


00:32:49.080 --> 00:32:56.980
I just like never noticed, but it was basically like issuing like a request with like no verify.


00:32:56.980 --> 00:33:00.620
So it was like an unverified like HTTP request.


00:33:00.620 --> 00:33:02.720
And then it was like, no.


00:33:02.720 --> 00:33:04.700
This broken SSL certificate keeps breaking.


00:33:04.700 --> 00:33:06.060
I just told you to ignore it.


00:33:06.060 --> 00:33:07.060
Oh, yeah.


00:33:07.060 --> 00:33:08.060
Yeah.


00:33:08.060 --> 00:33:11.420
Well, and I honestly like I think that might have been why it was there in the first place.


00:33:11.420 --> 00:33:17.460
Because I know like the like several years ago, like had some certificate issues.


00:33:17.460 --> 00:33:22.460
So yeah, that might be, and it was like an internal


00:33:22.460 --> 00:33:25.540
talking to internal, so it was like, eh.


00:33:25.540 --> 00:33:28.460
- Maybe even a self-signed certificate


00:33:28.460 --> 00:33:30.060
that nothing trusted, but like, it technically was there.


00:33:30.060 --> 00:33:32.820
- Yeah, it was like, eh, we'll just do that.


00:33:32.820 --> 00:33:36.940
But yeah, so Bandit is basically like a linter,


00:33:36.940 --> 00:33:41.220
but it looks for security issues.


00:33:41.220 --> 00:33:43.840
So you could just pip install it,


00:33:43.840 --> 00:33:45.460
and then just run it on your code


00:33:45.460 --> 00:33:47.260
and it will find a bunch of different


00:33:44.240 --> 00:33:47.680
potential security issues just by statically analyzing


00:33:47.680 --> 00:33:49.000
your code.


00:33:49.000 --> 00:33:52.960
And I've pretty much come to the opinion


00:33:52.960 --> 00:33:56.600
that why haven't I done this on all of my other projects?


00:33:56.600 --> 00:34:00.400
I should be doing this on every single project.


00:34:00.400 --> 00:34:03.880
Because as a developer, I always run


00:34:03.880 --> 00:34:06.960
Lint and Black and stuff like that.


00:34:06.960 --> 00:34:10.360
So I figured I should probably be running Bandit, too.


00:34:10.360 --> 00:34:11.160
- Yeah, cool.


00:34:11.160 --> 00:34:12.320
Yeah, well, very nice.


00:34:12.320 --> 00:34:14.520
It's a good recommendation for people as well.


00:34:14.520 --> 00:34:15.640
And it's got a lot of cool,


00:34:15.640 --> 00:34:16.840
you can go and actually see the list


00:34:16.840 --> 00:34:18.400
of the things that it tests for


00:34:18.400 --> 00:34:21.480
and even has test plugins as well, which is pretty cool.


00:34:21.480 --> 00:34:22.300
- Yeah, yeah.


00:34:22.300 --> 00:34:24.880
So you can like make your own if you want.


00:34:24.880 --> 00:34:27.080
And it has like all the common Linter sort of


00:34:27.080 --> 00:34:29.480
like functionality, like ignore these files


00:34:29.480 --> 00:34:32.880
or like ignore these rules or even like ignore this rule


00:34:32.880 --> 00:34:35.040
on this particular line, stuff like that.


00:34:35.040 --> 00:34:36.000
- Yeah, absolutely.


00:34:36.000 --> 00:34:36.840
- Which is pretty sweet.


00:34:36.840 --> 00:34:38.800
- I love that things like Bandit are around


00:34:38.800 --> 00:34:43.660
because thankfully, developing web stuff


00:34:43.660 --> 00:34:45.640
is becoming easier and easier,


00:34:45.640 --> 00:34:50.040
but it's then now the barrier to entry is lower.


00:34:50.040 --> 00:34:52.660
You still have to have all the security concerns


00:34:52.660 --> 00:34:54.840
that you had before that normal,


00:34:54.840 --> 00:34:58.040
I mean, usually people just had more experience,


00:34:58.040 --> 00:34:59.600
but they would make mistakes anyway.


00:34:59.600 --> 00:35:01.960
But now I think this is one of the reasons why I love this


00:35:01.960 --> 00:35:03.480
is because people new to it


00:35:03.480 --> 00:35:05.960
might be terrified about the security part,


00:35:05.960 --> 00:35:08.920
but having bandit on there looking over their shoulders.


00:35:08.920 --> 00:35:09.760
Great.


00:35:09.760 --> 00:35:10.600
- Yeah. - Yeah.


00:35:10.600 --> 00:35:12.060
- Like don't publish with the debug setting on


00:35:12.060 --> 00:35:15.000
and blast or Django or anything like that.


00:35:15.000 --> 00:35:16.040
- Simple, obvious stuff.


00:35:16.040 --> 00:35:19.840
And like, honestly, like having worked in the security org


00:35:19.840 --> 00:35:23.440
for about a year now, like I've come to the understanding


00:35:23.440 --> 00:35:27.640
that a lot of security issues stem from just like basic,


00:35:27.640 --> 00:35:31.120
like duh, sort of misconfigurations.


00:35:31.120 --> 00:35:33.600
So like something like this is perfect.


00:35:33.600 --> 00:35:36.500
- And I really like that you added,


00:35:36.500 --> 00:35:40.400
you wrote in the show notes, a pre-commit,


00:35:40.400 --> 00:35:42.000
how to hook this up with pre-commit,


00:35:42.000 --> 00:35:43.920
because I think having it in pre-commit


00:35:43.920 --> 00:35:47.000
or in a CI pipeline is important


00:35:47.000 --> 00:35:49.480
because like you guys were joking about,


00:35:49.480 --> 00:35:51.240
often security problems come in


00:35:51.240 --> 00:35:54.400
because somebody's just trying to fix something that broke,


00:35:54.400 --> 00:35:55.820
but they don't really realize


00:35:55.820 --> 00:35:58.640
how many other things it affects.


00:35:58.640 --> 00:35:59.760
- Yeah. - Yeah.


00:35:59.760 --> 00:36:01.400
- Besides that, we gotta make it work quick.


00:36:01.400 --> 00:36:02.600
Just turn on the debug thing.


00:36:02.600 --> 00:36:04.600
just look real quick and then you forget to turn it off


00:36:04.600 --> 00:36:05.440
or whatever, yeah.


00:36:05.440 --> 00:36:06.920
- Yeah, for sure.


00:36:06.920 --> 00:36:09.960
Yeah, yeah, just stupid human errors.


00:36:09.960 --> 00:36:12.080
- Nice, all right, I wanna go back real quick, Brian,


00:36:12.080 --> 00:36:16.600
'cause your mention of friendly traceback got a lot of stuff


00:36:16.600 --> 00:36:19.120
so let me just do a quick audience reaction.


00:36:19.120 --> 00:36:21.160
Robert says, "It is cool, Brian."


00:36:21.160 --> 00:36:23.360
John Sheehan says, "I was just thinking


00:36:23.360 --> 00:36:24.360
"of something the same would be cool.


00:36:24.360 --> 00:36:25.580
"It's a great teaching concept."


00:36:25.580 --> 00:36:28.240
Anthony says, "Super useful."


00:36:28.240 --> 00:36:30.600
John says, "I've been doing more demo code in the console


00:36:30.600 --> 00:36:33.480
rather than ID and this looks like it would help.


00:36:33.480 --> 00:36:35.560
W how to fix it?


00:36:35.560 --> 00:36:37.640
W wow how W.


00:36:37.640 --> 00:36:38.680
I love it Robert.


00:36:38.680 --> 00:36:39.180
Very good.


00:36:39.180 --> 00:36:42.440
Zach says, what is this magic?


00:36:42.440 --> 00:36:43.780
This looks amazing.


00:36:43.780 --> 00:36:44.440
And so on.


00:36:44.440 --> 00:36:44.640
All right.


00:36:44.640 --> 00:36:45.780
Well, thanks everyone.


00:36:45.780 --> 00:36:47.740
I'm glad you all like that.


00:36:47.740 --> 00:36:49.900
So that's it for our main items.


00:36:49.900 --> 00:36:50.320
You know,


00:36:50.320 --> 00:36:52.160
Brian, you got any extras


00:36:52.160 --> 00:36:53.160
you want to throw out there?


00:36:53.160 --> 00:36:55.540
You were doing some of the climate change


00:36:55.540 --> 00:36:56.620
or what are you doing this week?


00:36:56.620 --> 00:36:59.620
Yeah, I'm sharing a room with some people.


00:36:59.620 --> 00:37:09.340
Just like the I did do two meetups with with Noah and then with the Aberdeen Python meetup.


00:37:09.340 --> 00:37:10.940
Wait, I gotta interrupt you really quick.


00:37:10.940 --> 00:37:14.620
Did all that talk that Hannah did about bandit viruses get you?


00:37:14.620 --> 00:37:21.660
I'm sorry, sorry about that.


00:37:21.660 --> 00:37:22.220
Carry on.


00:37:22.220 --> 00:37:23.940
I missed it.


00:37:23.940 --> 00:37:29.420
Did all this talk with Hannah that Hannah had about viruses and in hacking and stuff with bandit.


00:37:29.420 --> 00:37:32.220
Did it make you nervous and you had to put on your mask?


00:37:32.220 --> 00:37:35.460
- No, just I'm in a group meeting in a group room


00:37:35.460 --> 00:37:37.020
and somebody came in.


00:37:37.020 --> 00:37:39.020
- It's okay, I'm just teasing, carry on.


00:37:39.020 --> 00:37:42.380
- That's funny, I also wanted to look like a bandit.


00:37:42.380 --> 00:37:44.100
- Yeah, exactly.


00:37:44.100 --> 00:37:48.700
- But I was thrilled that Noah asked me to speak to them,


00:37:48.700 --> 00:37:51.660
that was neat, and then the Python Aberdeen people.


00:37:51.660 --> 00:37:54.220
And also like, but they mentioned that Ian


00:37:54.220 --> 00:37:56.340
from the Python Aberdeen group said


00:37:56.340 --> 00:37:58.180
that he had an arrangement with you


00:37:58.180 --> 00:38:01.940
that when you, Michael, that when the pandemic is over,


00:38:01.940 --> 00:38:03.460
you're gonna go over and you're gonna do


00:38:03.460 --> 00:38:06.220
like a whiskey tour or something like that.


00:38:06.220 --> 00:38:07.260
- I don't know the details,


00:38:07.260 --> 00:38:08.620
but it sounds good to me already.


00:38:08.620 --> 00:38:09.460
Let's get this happening.


00:38:09.460 --> 00:38:11.220
- If that happens, I wanna go along.


00:38:11.220 --> 00:38:13.660
- It's a Python Pyte's outing, let's do it.


00:38:13.660 --> 00:38:18.380
- And then we have, there are PDX West meetup tomorrow.


00:38:18.380 --> 00:38:20.580
You're gonna speak, that's kind of exciting.


00:38:20.580 --> 00:38:21.420
- Yeah, it's gonna be fun.


00:38:21.420 --> 00:38:24.540
And people, it's virtual, so people can attend however.


00:38:24.540 --> 00:38:26.820
- I'm also, I've got feedback from both you


00:38:26.820 --> 00:38:30.540
and Matt Harrison gave me some feedback.


00:38:30.540 --> 00:38:33.740
So I'm updating my training page on testing code


00:38:33.740 --> 00:38:36.260
because I really like working with teams.


00:38:36.260 --> 00:38:39.180
So, and anybody else wants to give me feedback


00:38:39.180 --> 00:38:42.220
on my training page, maybe I'd love to hear it.


00:38:42.220 --> 00:38:43.060
So that's good.


00:38:43.060 --> 00:38:43.940
- Yeah, or maybe they even want to have


00:38:43.940 --> 00:38:46.500
some high test training for their team.


00:38:46.500 --> 00:38:48.980
- Yeah, I mean, testing is something that I think


00:38:48.980 --> 00:38:50.940
teaching a team at a time is a great thing


00:38:50.940 --> 00:38:53.940
because people can really, I don't know,


00:38:53.940 --> 00:38:56.340
we can talk about their particular problems,


00:38:56.340 --> 00:38:58.580
not general problems, it's good.


00:38:58.580 --> 00:38:59.420
- Yeah, for sure.


00:38:59.420 --> 00:39:01.900
Well, you also need more of a team buy-in on testing, right?


00:39:01.900 --> 00:39:03.380
'Cause like if one person writes code


00:39:03.380 --> 00:39:04.260
and won't write the test,


00:39:04.260 --> 00:39:05.940
and another person is like really concerned


00:39:05.940 --> 00:39:08.340
about making the test fast, it's super frustrating


00:39:08.340 --> 00:39:10.620
when the person who doesn't wanna run the test


00:39:10.620 --> 00:39:11.960
keeps breaking the build.


00:39:11.960 --> 00:39:15.140
But anyway, it's a team sort of sport in that regard.


00:39:15.140 --> 00:39:16.100
- Yep. - Yeah.


00:39:16.100 --> 00:39:16.940
- All right, awesome.


00:39:16.940 --> 00:39:18.060
So I got a couple of quick things.


00:39:18.060 --> 00:39:21.900
PEP 634, structural pattern matching in Python


00:39:21.900 --> 00:39:23.880
has been accepted for Python 3.10.


00:39:23.880 --> 00:39:26.260
That's like, imagine a switch case


00:39:26.260 --> 00:39:28.700
that has about 100 different options.


00:39:28.700 --> 00:39:29.540
That's what it is.


00:39:29.540 --> 00:39:30.360
- Yeah.


00:39:30.360 --> 00:39:32.100
- With like, like Reg X, not quite,


00:39:32.100 --> 00:39:34.540
but sort of like style, like you can have like these patterns


00:39:34.540 --> 00:39:36.220
and stuff that happen in the cases.


00:39:36.220 --> 00:39:37.300
I don't know how to feel about this.


00:39:37.300 --> 00:39:39.820
Like if, let me put it in perspective,


00:39:39.820 --> 00:39:42.260
like if the Walrus operator was controversial,


00:39:42.260 --> 00:39:45.340
like this is like, this is like a way bigger change


00:39:45.340 --> 00:39:46.180
to the language.


00:39:46.180 --> 00:39:47.000
So I don't know.


00:39:47.000 --> 00:39:48.420
- It's both awesome and terrifying.


00:39:48.420 --> 00:39:49.260
- Yes, exactly.


00:39:49.260 --> 00:39:51.740
- Yeah, I was gonna say I'm kind of surprised.


00:39:51.740 --> 00:39:54.100
- Yeah, yeah, so on my end, like this got accepted.


00:39:54.100 --> 00:39:57.060
It seemed to be sort of counter to the simplicity of Python.


00:39:57.060 --> 00:40:00.140
Like I did not at all against having a simple switch statement


00:40:00.140 --> 00:40:02.300
that does certain things, but this seems like a lot.


00:40:02.300 --> 00:40:03.300
I may come to love it.


00:40:03.300 --> 00:40:06.700
One thing that maybe would help me come to a better understanding


00:40:06.700 --> 00:40:10.500
and acceptance was if the pet page had at least one example of it in use.


00:40:10.500 --> 00:40:13.020
Like the whole page that talks about all the details says,


00:40:13.020 --> 00:40:15.460
I don't believe there's a single code sample ever.


00:40:15.460 --> 00:40:17.860
- Well, there's a tutorial page as well.


00:40:17.860 --> 00:40:18.700
- Oh, is there?


00:40:18.700 --> 00:40:19.740
There's the tutorial page.


00:40:19.740 --> 00:40:21.660
Okay, maybe that's where I should be going to check it out.


00:40:21.660 --> 00:40:22.480
Yeah.


00:40:22.480 --> 00:40:25.100
- This sort of feels like a five barrel foot gun.


00:40:25.100 --> 00:40:26.020
- Yeah, it does.


00:40:26.020 --> 00:40:27.280
Well, but the page that I'm looking,


00:40:27.280 --> 00:40:29.020
like the pip thing that I'm listening to,


00:40:29.020 --> 00:40:31.860
the official PIP, I don't think it has,


00:40:31.860 --> 00:40:32.820
does it have a tutorial?


00:40:32.820 --> 00:40:33.900
Yeah, no, you're right, it does.


00:40:33.900 --> 00:40:35.620
It does somewhere down.


00:40:35.620 --> 00:40:37.140
- Yeah, pip 636.


00:40:37.140 --> 00:40:38.260
- Yeah, it's a different PIP


00:40:38.260 --> 00:40:39.580
that is the tutorial for the PIP.


00:40:39.580 --> 00:40:40.820
Interesting, I didn't realize that.


00:40:40.820 --> 00:40:42.340
It's kind of meta, honestly.


00:40:42.340 --> 00:40:44.620
Anyway, to me, I'm a little surprised this was accepted.


00:40:44.620 --> 00:40:45.580
Fine.


00:40:45.580 --> 00:40:47.100
I know people worked really hard on it,


00:40:47.100 --> 00:40:48.820
and congratulations, a lot of people really want it.


00:40:48.820 --> 00:40:50.180
It comes from Haskell, right?


00:40:50.180 --> 00:40:51.780
So Haskell had this like pattern matching,


00:40:51.780 --> 00:40:53.420
and alternate struct thing.


00:40:53.420 --> 00:40:55.300
I don't know, I just feel like Haskell and Python


00:40:55.300 --> 00:40:56.300
are far away from each other.


00:40:56.300 --> 00:40:58.000
So that's my first impression.


00:40:58.000 --> 00:41:00.580
I will probably come to love it at some point.


00:41:00.580 --> 00:41:02.220
PyCon registration is open.


00:41:02.220 --> 00:41:03.060
So if you want to go to PyCon,


00:41:03.060 --> 00:41:05.300
you want to attend and be more part of it


00:41:05.300 --> 00:41:07.100
than just watching the live stream on YouTube,


00:41:07.100 --> 00:41:07.940
be part of that.


00:41:07.940 --> 00:41:09.620
I think I'm going to try to make a conscious effort


00:41:09.620 --> 00:41:10.980
to attend the virtual conference,


00:41:10.980 --> 00:41:12.660
not just catch some videos.


00:41:12.660 --> 00:41:13.900
So you can do that.


00:41:13.900 --> 00:41:15.260
- PyCon is awesome.


00:41:15.260 --> 00:41:18.740
My first conference was PyCon,


00:41:18.740 --> 00:41:20.500
and then I went to other conferences,


00:41:20.500 --> 00:41:23.220
And I was like, what are wrong with these conferences?


00:41:23.220 --> 00:41:25.740
Like, why do they suck so much?


00:41:25.740 --> 00:41:27.300
- I know, I feel the same way.


00:41:27.300 --> 00:41:28.980
I know.


00:41:28.980 --> 00:41:30.180
It's really, really special.


00:41:30.180 --> 00:41:31.540
I'm sure the virtual one will be good.


00:41:31.540 --> 00:41:33.580
I can't wait for the in-person stuff to come back


00:41:33.580 --> 00:41:34.420
'cause it really is a new experience.


00:41:34.420 --> 00:41:35.860
- For sure, yeah.


00:41:35.860 --> 00:41:37.620
It's a whole nother experience in person.


00:41:37.620 --> 00:41:40.220
- I consider it basically my geek holiday


00:41:40.220 --> 00:41:42.060
where I get away and just get to hang out


00:41:42.060 --> 00:41:42.900
with my geek friends.


00:41:42.900 --> 00:41:44.220
I happen to learn stuff on there.


00:41:44.220 --> 00:41:45.060
- Totally.


00:41:45.060 --> 00:41:48.260
- And then Python WebConf is coming up


00:41:48.260 --> 00:41:50.860
and that's a registration is open for that as well.


00:41:50.860 --> 00:41:52.660
And I suppose probably PyCascades,


00:41:52.660 --> 00:41:55.020
which Brian and I are on a panel out there as well.


00:41:55.020 --> 00:41:55.860
- Oh, nice.


00:41:55.860 --> 00:41:58.940
- I put a link into an hour of code for Minecraft,


00:41:58.940 --> 00:42:01.500
which has to do with programming Minecraft with Python.


00:42:01.500 --> 00:42:03.300
If people are looking to teach kids stuff,


00:42:03.300 --> 00:42:04.140
that looks pretty neat.


00:42:04.140 --> 00:42:06.540
So my daughter's super into Minecraft.


00:42:06.540 --> 00:42:07.380
I don't do anything with it.


00:42:07.380 --> 00:42:08.900
But if you are and you wanna make it part


00:42:08.900 --> 00:42:10.580
of your curriculum, that's pretty cool.


00:42:10.580 --> 00:42:11.740
Hannah, anything you wanna throw out there


00:42:11.740 --> 00:42:13.540
before we break out the joke?


00:42:13.540 --> 00:42:15.620
- Nope, I'm good.


00:42:15.620 --> 00:42:16.460
- Awesome.


00:42:16.460 --> 00:42:17.460
- Do it, do it.


00:42:17.460 --> 00:42:19.220
All right, so this one, we have something


00:42:19.220 --> 00:42:21.020
a little more interactive for everyone.


00:42:21.020 --> 00:42:25.660
We've got a song about PEP 8, about writing clean code.


00:42:25.660 --> 00:42:30.660
This is written and produced, sung by Leon Sandoy,


00:42:30.660 --> 00:42:33.740
goes by Lemon, and him and his team over at Python Discord.


00:42:33.740 --> 00:42:36.460
He runs Python Discord, and apparently it was a team effort


00:42:36.460 --> 00:42:37.980
creating this, and the reason I'm covering it


00:42:37.980 --> 00:42:39.200
is a bunch of people sent it over.


00:42:39.200 --> 00:42:41.500
So Michael Rogers of LA sent it over,


00:42:41.500 --> 00:42:43.640
so you should cover this, Dan Bader said, check this out.


00:42:43.640 --> 00:42:45.880
Alan McElroy said, hey, check out this thing.


00:42:45.880 --> 00:42:49.360
So, all right, I actually spoke to Lemon and said,


00:42:49.360 --> 00:42:50.480
"Hey, do you mind if we play this?"


00:42:50.480 --> 00:42:51.480
He said, "No, that'd be awesome.


00:42:51.480 --> 00:42:52.840
"Give us a shout out," I said, "Of course."


00:42:52.840 --> 00:42:54.840
So we're gonna actually play the song as part of this.


00:42:54.840 --> 00:42:56.240
In the live stream, you get the video.


00:42:56.240 --> 00:42:58.200
On the audio, you get, well, audio.


00:42:58.200 --> 00:43:00.040
So I'm gonna kick this off and we'll come back,


00:43:00.040 --> 00:43:02.440
and I'd love to hear Brian and Hannah's thoughts.


00:43:02.440 --> 00:43:03.280
Here we go.


00:43:03.280 --> 00:43:06.360
(gentle piano music)


00:43:15.120 --> 00:43:19.820
You don't need any curly braces


00:43:19.820 --> 00:43:26.120
Just for spaces, just for spaces


00:43:26.120 --> 00:43:31.120
Wildcard imports should be avoided


00:43:31.120 --> 00:43:37.320
In most cases, in most cases


00:43:37.320 --> 00:43:42.120
Try to make sure there's no trailing white space


00:43:42.120 --> 00:43:48.120
It's confusing, it's confusing


00:43:48.120 --> 00:43:53.120
Trailing commas go behind list items


00:43:53.120 --> 00:44:00.120
Git blamed items, git blamed items


00:44:00.120 --> 00:44:05.120
And comments are important, as long as they're maintained


00:44:05.120 --> 00:44:11.120
When comments are misleading, it will drive people insane


00:44:11.120 --> 00:44:16.720
Just try to be empathic, just try to be a friend


00:44:16.720 --> 00:44:22.720
It's really not that hard, just adhere to


00:44:22.720 --> 00:44:26.720
Pepede


00:44:26.720 --> 00:44:31.720
Pepede


00:44:31.720 --> 00:44:37.720
Constants should be named all capital letters


00:44:37.720 --> 00:44:44.720
And live forever, live forever


00:44:44.720 --> 00:44:48.720
And camel case is not for python


00:44:48.720 --> 00:44:55.720
Never ever, never ever


00:44:55.720 --> 00:44:59.720
And never use a bear exception


00:44:59.720 --> 00:45:06.720
Be specific, be specific


00:45:06.720 --> 00:45:11.520
No one likes the horizontal scrollbar


00:45:11.520 --> 00:45:18.400
Keep it succinct, keep it succinct


00:45:18.400 --> 00:45:23.680
And comments are important, as long as they're maintained


00:45:23.680 --> 00:45:29.320
When comments are misleading, it will drive people insane


00:45:29.320 --> 00:45:34.920
Just try to be empathic, just try to be a friend


00:45:34.920 --> 00:45:40.120
It's really not that hard, just adhere to


00:45:40.120 --> 00:45:43.720
Pepede


00:45:43.720 --> 00:45:49.520
Pepede


00:45:49.520 --> 00:45:55.220
Pepede


00:45:55.220 --> 00:46:01.920
Pepede


00:46:01.920 --> 00:46:16.120
That was amazing. I can sympathize with so much of what he's saying. I'm just having


00:46:16.120 --> 00:46:24.800
flashbacks to a discussion I had with my teammate about comets. And being like, "No, this comet


00:46:24.800 --> 00:46:27.920
doesn't actually describe what the comet is doing."


00:46:27.920 --> 00:46:30.480
It's worse than having no comet. It really is.


00:46:30.480 --> 00:46:31.560
- It really is, yeah.


00:46:31.560 --> 00:46:34.880
Or like if it describes like literally


00:46:34.880 --> 00:46:36.840
what the code is doing and not like,


00:46:36.840 --> 00:46:38.680
you know, kind of like high level sort of--


00:46:38.680 --> 00:46:40.920
- Why or background or anything other than--


00:46:40.920 --> 00:46:42.400
- The why, the why is important.


00:46:42.400 --> 00:46:44.120
- Yeah, I love it.


00:46:44.120 --> 00:46:47.520
So two things, Lemon and team well done on the song


00:46:47.520 --> 00:46:48.800
and man, you got a great voice.


00:46:48.800 --> 00:46:51.240
That's actually, it was beautiful and funny.


00:46:51.240 --> 00:46:53.080
- Yeah. - Yeah, it was amazing.


00:46:53.080 --> 00:46:54.800
- All right, well, Brian, we probably should wrap it up.


00:46:54.800 --> 00:46:56.280
- Yeah, yeah, we're here.


00:46:56.280 --> 00:46:58.120
- All right, well, Hannah, thanks so much for being here.


00:46:58.120 --> 00:46:59.200
It's good to have you on the show.


00:46:59.200 --> 00:47:00.120
And Brian, thanks as always.


00:47:00.120 --> 00:47:01.120
Everyone, thanks for listening.


00:47:01.120 --> 00:47:02.120
>> Thanks for having me.


00:47:02.120 --> 00:47:03.120
>> Bye.


00:47:03.120 --> 00:47:04.120
>> Bye.


00:47:04.120 --> 00:47:05.120
>> Bye all.


00:47:05.120 --> 00:47:06.120
>> Thank you for listening to Python Bytes.


00:47:06.120 --> 00:47:07.720
Follow the show on Twitter via @PythonBytes.


00:47:07.720 --> 00:47:10.680
That's Python Bytes as in B-Y-T-E-S.


00:47:10.680 --> 00:47:13.840
And get the full show notes at PythonBytes.fm.


00:47:13.840 --> 00:47:17.560
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:47:17.560 --> 00:47:18.560
way.


00:47:18.560 --> 00:47:20.760
We're always on the lookout for sharing something cool.


00:47:20.760 --> 00:47:24.000
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:47:24.000 --> 00:47:27.000
Thank you for listening and sharing this podcast with your friends and colleagues.

