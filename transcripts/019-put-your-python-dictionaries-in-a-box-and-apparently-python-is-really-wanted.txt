00:00:00 Hello and welcome to Python Bytes. This is episode 19, where we're going to deliver Python news and headlines directly to your earbuds.

00:00:08 It's recorded on Sunday, March 26, 2017. I'm Michael Kennedy.

00:00:15 And I'm Brian Ockin.

00:00:16 And we got some Python news for you. Hey, Brian, how's it going?

00:00:19 It's going really good.

00:00:20 Yeah. I'm excited about what you picked out. I want to learn about the ones that you got.

00:00:24 And I have some sort of outer loop ones that are really, really different.

00:00:28 I think people will be interested to hear about them. But let's start with what you got on tap.

00:00:33 Well, we're going to start with a story about exceptions in Python 3, not exceptions in Python 3.

00:00:40 But there is a person named Josh or Quix on GitHub who wrote a little utility for Python, which is actually really cool.

00:00:51 And it's called Better Exceptions. And it is just it's just a it's a hook that actually is pretty clever.

00:00:58 But it hooks into your exceptions. And so when you're like, especially when you're developing and debugging or dogfooding your own products, it will show exceptions that are color coded and split out everything that's in there.

00:01:13 And we have the link on our show notes. But there's there's a great picture that you can see that that shows the exceptions as they yeah.

00:01:21 What I like about this is that, like you said, a picture is what you have there.

00:01:25 And we talked about Peter, too, last week about making that sort of bland, just flat list into like something really readable and colorized and nice.

00:01:33 And this kind of does that for exceptions, right?

00:01:35 Yeah, it does. And it was really great.

00:01:38 And Josh works, he mentions and then it was he posted on Reddit as well.

00:01:43 And on Reddit, he mentions that he he works only in Python 2.7.

00:01:48 So he wasn't sure how to do Python 3 at first.

00:01:52 And he put this together pretty quickly and then put it out there for everybody.

00:01:55 And immediately the conversation on Reddit turned to to Python 3 and why why isn't there Python 3 support?

00:02:02 And one of the the great things about this story is Florian, who is Paradox Zero on both on GitHub and on Reddit,

00:02:12 said instead of adding to the complaints list, he went out and made it.

00:02:17 He forked it, put in a pull request with a Python 3 fix.

00:02:21 And and within like eight hours, the whole thing was merged and it was Python 3 as well.

00:02:26 Yeah. So like eight hours of the thing being announced.

00:02:29 It came out without Python 3 support.

00:02:32 The community went in and added Python 3 support.

00:02:35 It's something like this, right?

00:02:36 Yeah. And it's just really incredible.

00:02:37 And I actually reached out to both of them and wanted to know if they had had anything to add to the story.

00:02:43 And like I was saying, Josh wasn't he didn't know how to do make sure that it was running on both because he normally works on Python 2.

00:02:51 And Florian, apparently he supports this tool called WDB, which is a web debugger, which actually we should explore a little bit later.

00:02:59 It's pretty cool.

00:03:00 Anyway, he's used to doing that two and three all the time.

00:03:04 So it wasn't that big of a jump for him to add that support, which is great.

00:03:09 So I like it.

00:03:10 Yeah, I think it's cool.

00:03:12 I think better exceptions.

00:03:13 The package is really cool.

00:03:15 And I think the Python 3 story of eight hours from the time it was published, somebody went and said, there's a problem with this.

00:03:21 It doesn't support Python.

00:03:22 It only supports legacy Python.

00:03:23 We have to fix it.

00:03:24 That's really cool.

00:03:25 I'm not sure if that would have happened four years ago, right?

00:03:28 Right.

00:03:29 And it's really great.

00:03:31 The other thing, when I tried this out, and one of the things that I noticed about it is you have to put an import statement in the modules that you want to use this better exceptions.

00:03:43 Paradox Zero also thought maybe we should modify that.

00:03:47 So he added another GitHub project called Better Exceptions Hook that if you include that as well, you don't have to do that import statement.

00:03:56 Oh, nice.

00:03:57 It's pretty great.

00:03:58 Yeah, that's really great.

00:03:59 Cool.

00:03:59 So everyone check out Better Exceptions.

00:04:01 Check out the Reddit thread.

00:04:02 We'll link to that, of course, maybe as the primary thing and all the stuff's in the show notes.

00:04:06 Very cool.

00:04:06 One of the things I always look forward to, Brian, is the Stack Overflow Developer Survey.

00:04:12 Stack Overflow is such a powerhouse in the software space, and they get quite a bit of feedback on their surveys, like 100,000 people filling out the survey or something.

00:04:24 And it's really comprehensive.

00:04:26 So this year, they just released a couple days ago the 2017 survey, and it has good news for Python in there.

00:04:35 Really?

00:04:36 And it looks like they get results from all over the world.

00:04:38 They do, yeah.

00:04:39 They get a ton of results, like I said.

00:04:41 They have stuff on gender equity, pay across different regions, job demand, all sorts of stuff like that.

00:04:48 But the most interesting thing to me is really around the programming languages that are being used or desire behind working with certain technologies and so on.

00:05:00 So there's some good news here for Python.

00:05:01 If you look at the most popular technologies, we talked recently about Python being the second most popular technology behind JavaScript on GitHub.

00:05:10 On Stack Overflow, in terms of questions, it's number five.

00:05:15 And given that it's pretty easy to work with relative to things like Java, which might generate more questions, I think that's pretty interesting.

00:05:24 So that's cool.

00:05:25 But let's go down a little bit farther.

00:05:26 They have areas where they talk about the frameworks you're working with, the databases that people are using, platforms.

00:05:34 But one of the things that caught my attention is languages over time.

00:05:39 So we've got things like C Sharp, JavaScript, Objective-C, Node.js, and whatever, Java itself.

00:05:46 If you look at Python over the last five years, it went from 22% to 33%, and it's got like a hockey stick curve going to it.

00:05:58 So it's not just it's going up.

00:06:00 It's going up and the rate is increasing.

00:06:02 How cool is that?

00:06:03 That is very neat.

00:06:03 I like it.

00:06:04 If you compare it to Java, Java's on a pretty downward trend.

00:06:07 C Sharp is on a downward trend.

00:06:09 C++, downward trend.

00:06:11 So that's cool.

00:06:13 One other one that really I like, there's a section called Most Loved, Most Dreaded, and Most Wanted.

00:06:19 So Python ranks very highly in the most loved.

00:06:23 And just let's see how the story is for most dreaded.

00:06:27 It turns out Visual Basic 6, VBA, CoffeeScript, and VB.net, three out of four for Visual Basic, are in the most dreaded technologies, just with MATLAB, Tal, and along.

00:06:39 But if you go over to Most Wanted Technology, Python, by a wide margin.

00:06:43 Oh, wow.

00:06:44 Out of everything.

00:06:45 That's great.

00:06:46 Over JavaScript, over Go, over TypeScript, over Swift, over Rust, whatever.

00:06:50 It's 20% of the people said, that's the thing I want most.

00:06:54 Who responded about that?

00:06:56 Isn't that cool?

00:06:56 What does Most Wanted mean?

00:06:58 It means, if you could choose, they ask, what are you using for your day-to-day job?

00:07:04 And they ask, if you could use anything, what would you use?

00:07:07 Oh, okay.

00:07:08 Yeah?

00:07:08 Just to round it out, one more thing, since I've been going on and on about Mongo and stuff like that recently.

00:07:13 If you go to the Database section and look at the Most Wanted database, MongoDB is like more than 2x over second place.

00:07:21 So, also quite interesting.

00:07:23 Well, working with document databases is just, I like it.

00:07:28 If you can do it.

00:07:29 It's so glorious.

00:07:29 Yeah.

00:07:30 If you can make it work, it is so, so nice.

00:07:32 We'll have to cover that in more detail.

00:07:34 But I strongly encourage you guys to go and have a look at this survey.

00:07:37 It's always really insightful.

00:07:40 They had 64,000 developers in this response.

00:07:42 It's not 100,000.

00:07:43 Sorry.

00:07:43 But still a huge number to make this highly statistically relevant, right?

00:07:47 Yeah.

00:07:48 And we need to get more.

00:07:49 It looks like there's still, with surveys like this, we still have more white dudes answering than other people.

00:07:56 Yeah.

00:07:57 That is an ongoing problem.

00:07:59 But what was it there?

00:08:00 Okay.

00:08:00 So, since you brought that up, I was thinking about it.

00:08:02 I didn't want to go on too long.

00:08:03 But there's a section in here that talks about, near the beginning, it talks about demographics.

00:08:10 And it says males, like, 88.6%.

00:08:13 Females, 7.6%.

00:08:16 White dudes are, like, 74%.

00:08:20 If you throw in Asians, it's super, super near, like, the top.

00:08:25 But there's also a section somewhere in there that talks about years of coding experience and demographics over time.

00:08:31 And they break that down.

00:08:33 They don't break it down by anything but male, female, I don't think.

00:08:35 But if you look at less than one year experience, there's more women than men.

00:08:41 If you look at one to two, there's more women than men.

00:08:43 It's not until you get into five years of experience that there are more men.

00:08:48 And then after that, it's gone, right?

00:08:50 It's all men all the time.

00:08:52 But that's pretty encouraging to me because that means people coming into the industry, there's a lot of women coming in, actually.

00:08:59 Yeah, that is really encouraging.

00:09:02 That's good.

00:09:02 Yeah.

00:09:03 So it's right that it is kind of bleak in that sense.

00:09:06 But there's a bit of a shining, at least a positive data point there.

00:09:10 I think that's great.

00:09:10 What do you got next for us?

00:09:11 Next, I've got a project called Box.

00:09:14 And there was an article on Code Calamity.

00:09:18 That's a cool name.

00:09:19 Anyway.

00:09:20 That is a cool name.

00:09:20 This is a really pretty simple tool.

00:09:23 But you just take a dictionary and throw it into an object class called Box.

00:09:28 And what it does is it makes it so that you can use dot notation instead of that annoying.

00:09:33 I mean, the dictionary notation is okay.

00:09:35 But it just takes so many characters to type.

00:09:38 Yeah.

00:09:39 Yeah.

00:09:39 The brackets and the quotes.

00:09:41 And for single word elements in your indexes in your dictionary, Box makes it so you can just use dot notation instead.

00:09:50 It's pretty cool.

00:09:51 That is cool.

00:09:52 I am so using Box.

00:09:54 So what's really nice about it, it feels like it's a little bit similar to like name tuple type things.

00:10:00 I mean, I guess it's dictionaries rather than names for the tuples.

00:10:03 But still, it's like kind of like that.

00:10:06 Like you take this thing you have to index into and you turn it into a thing you can use dot names on.

00:10:11 And while that's pretty helpful, what I think is really cool looking at this is you can have like a deep object graph.

00:10:18 So in their example, they have a box which has movies.

00:10:21 One of the movies is Spaceballs.

00:10:22 Each individual movie has a rating.

00:10:25 And you can just say mybox.movies.spaceballs.rating.

00:10:28 And so if that was dictionaries, that would be a lot of this dot get this dot get this dot get this or bracket bracket bracket bracket bracket, right?

00:10:35 Yeah.

00:10:35 If you're trying to test each one of those, then that's even less fun to test that it's in the dictionary.

00:10:41 Yeah.

00:10:41 And it doesn't like obviously I was trying it out.

00:10:44 Like one of the movies that they showed in their demo was Robin Hood Men in Tights.

00:10:48 Also a good movie.

00:10:50 Anyway, it has spaces in it.

00:10:53 So obviously you can't make a dot name thing with something with spaces in it.

00:10:58 So it just punts and doesn't do it for those.

00:11:00 So it's only.

00:11:01 Right.

00:11:02 Okay.

00:11:03 Anyway.

00:11:03 Yeah.

00:11:04 So those you have to basically use the brackets.

00:11:06 Treat it like a dictionary.

00:11:07 Yeah.

00:11:07 But it's enough.

00:11:09 Anything that saves me a little bit of typing and makes my code look a little cleaner.

00:11:12 I'm going to give it a try.

00:11:14 Yeah.

00:11:14 This is cool.

00:11:15 I think the thing that's awesome about this is it makes your code more readable.

00:11:18 Yeah.

00:11:19 Definitely.

00:11:19 Definitely.

00:11:19 Okay, cool.

00:11:20 Well, thanks for teaching me about Box.

00:11:21 So it wasn't very long ago that we just talked about Python 3.6 being released, right?

00:11:25 Yeah.

00:11:26 Very exciting.

00:11:27 Yeah.

00:11:27 It's super exciting.

00:11:28 That's a big release.

00:11:29 There was a lot of performance improvements, both in memory and CPU time.

00:11:33 And so we were already at our next release.

00:11:37 So on March 21st, we had Python 3.6.1 released.

00:11:40 How about that?

00:11:41 That's pretty cool.

00:11:42 I haven't tried it out yet, though.

00:11:43 I'm running it.

00:11:44 It's been working well for me.

00:11:46 It's very nice.

00:11:46 There are actually a surprising number of changes given the timeframe between 3.6.1 and 3.6.0

00:11:53 being released.

00:11:53 So there's a lot of fixes.

00:11:56 There's probably 25 fixes and optimizations for core and built-in.

00:12:01 If you look at the library, there's probably 35 to 40 fixes.

00:12:07 Things like there was some kind of bug in argpars that help messages would wrap on non-breaking spaces

00:12:13 and other funky stuff like that.

00:12:14 Fixes to the magic mock library.

00:12:17 So what struck me about this release is like a 3.6.1 release feels like you got 3.6.0, 3.6.1,

00:12:24 whatever.

00:12:24 It's all the same, right?

00:12:25 But there's actually a non-trivial number of things that I might actually want to go and

00:12:31 say, oh my gosh, we need to upgrade to this.

00:12:33 So for example, another one is fixes a crash when deallocating deep element tree objects.

00:12:39 So if you load up large XML files and are having problems with that, maybe you want to look at

00:12:44 this.

00:12:45 There's also sections on Windows, on the C API, and lots of stuff.

00:12:48 The other thing that's interesting or notable about this is I don't know if 3.6.0 or 3.6.1,

00:12:53 but one of those two recent releases is the first time that Python is shipping off of GitHub

00:13:00 since it's moved off of Mercurial.

00:13:02 Okay.

00:13:02 So that's pretty cool.

00:13:03 I think so.

00:13:04 Anyway, I think so.

00:13:05 I'm pretty sure that 3.5 was on the other one.

00:13:08 I can't find which one it is in here, but some of the core developers seem to be very excited

00:13:14 about f-strings now with the 3.6.1.

00:13:17 So there must have been some issue with it that we just don't even know about that now makes

00:13:23 it work better or something.

00:13:25 Yeah.

00:13:25 The only one I can find is F string expressions are no longer accepted as doc strings.

00:13:31 You know, that might be it.

00:13:32 Maybe somehow the f-strings in doc strings were being interpreted when they were supposed

00:13:38 to be documentation.

00:13:38 Like, here's the F string to use.

00:13:40 I don't know.

00:13:40 It's great.

00:13:41 If you get a chance, upgrade to 3.6.1.

00:13:42 I will.

00:13:44 Well, last, I've got to tell us a little bit of a story.

00:13:47 I went to the University of Oregon and I tried to take statistics in a building called D.D.

00:13:54 Hall.

00:13:54 D.D.

00:13:55 Hall was built in the 1873 to 1876.

00:13:59 So it's a really old building.

00:14:00 And I think my professor may have been born at the same time because he was a really old

00:14:06 guy.

00:14:07 And it was like on maybe the third floor.

00:14:11 I had to walk upstairs, little tiny room and four o'clock in the afternoon with air conditioners

00:14:17 blowing.

00:14:18 And the gist of it is, is I didn't learn statistics.

00:14:21 I was slept through that class.

00:14:24 And so I'm excited that there's a, an article called, and it looks like it's the start of

00:14:28 it.

00:14:28 It's called Essential Statistics for Data Science.

00:14:32 So it's teaching some of the Python data science stuff along with, and how to use statistics with

00:14:40 it, but also teaching you about the statistics while it's going.

00:14:44 And I really appreciated that.

00:14:46 And it was really easy to follow, even for somebody that slept through statistics.

00:14:50 You know, data science is actually one of the, the reasons I think for that, that growth

00:14:55 in the stack overflow section.

00:14:57 I was talking about others as well.

00:14:58 Right.

00:14:59 But I think the addition of all these data scientists moving into the space makes such, such a big

00:15:04 difference.

00:15:04 So there's a lot of people coming into the space and really having a good statistical foundation,

00:15:10 I think is super important here.

00:15:11 In this article is, it's tutorial is it also explains the box and whisker diagrams and

00:15:18 what all of those pieces mean.

00:15:20 which I had no idea what those meant before.

00:15:23 So, so thank you.

00:15:24 Okay.

00:15:24 Yeah.

00:15:25 Yeah.

00:15:25 That's awesome.

00:15:26 Anyway, cool.

00:15:26 That's all I got.

00:15:27 Yeah.

00:15:27 Okay.

00:15:27 Well, the last one that I want to talk about is called Hi, H-Y.

00:15:31 And for those of you out there that like Lisp, this will be music to your ears.

00:15:38 So the idea is Hi is a Lisp environment, scheme, Lisp type thing.

00:15:45 And you can take it, give it Lisp code and it will actually take that code and compile it

00:15:53 or assemble it into Python abstract syntax trees and then just hand it off to Python to execute.

00:15:59 Okay.

00:15:59 So we've talked about all sorts of different runtimes or interpreters.

00:16:04 We have the two CPython versions.

00:16:06 We have PyPy.

00:16:08 We have Python.net.

00:16:10 We have Jython.

00:16:11 We have IronPython.

00:16:12 We've got Cython.

00:16:14 There's lots of different choices you can make, but I've never talked about Hi.

00:16:18 And this was actually a listener recommendation.

00:16:20 So thanks.

00:16:21 Thanks for sending that in, guys.

00:16:22 So this is if you write Lisp code, you can write code in Lisp and then it just runs on

00:16:27 top of Python, which is cool because it means that you basically get access to the entire

00:16:33 standard library and all the PyPI packages for your Lisp programs, which I think is pretty

00:16:39 awesome.

00:16:39 So if you want to work with various libraries, requests, it says you can write Django applications

00:16:46 in Lisp.

00:16:46 If that seems like a good idea to you, you can use Hi to do that.

00:16:49 Probably Flask and Pyramid as well, I guess, because you just import it, right?

00:16:53 Yeah.

00:16:54 So yeah, they think it's a great way for people to explore Lisp if you are comfortable with Python.

00:16:58 Now do something for me.

00:17:00 Click on the link that says you must try, try-high.appspot.com and just tell me what you think when you see

00:17:07 that.

00:17:07 Oh.

00:17:09 That's cool, right?

00:17:10 So you guys all check this out when you hear this.

00:17:12 Click this link in the show notes.

00:17:13 It's what version of Apple is that?

00:17:15 It's not even Apple.

00:17:16 It's a, it's, but it looks a little bit like an Apple IIe computer.

00:17:20 Oh, that's so cool.

00:17:21 It's a little tiny old CRT and you can type on, like when you type in, you get to type right

00:17:28 on this little monitor.

00:17:29 It's cool.

00:17:29 It's, it's fantastic.

00:17:31 It's even at an angle and you get to type into the interpreter and it's live and you can

00:17:35 try out Lisp.

00:17:36 My Lisp is not good enough, but I can at least hit enter and see 42L.

00:17:38 Come out.

00:17:39 So check this out.

00:17:41 This is really pretty interesting if you're into Lisp.

00:17:43 If you're not into Lisp, I think it's just an interesting data point of here's one more

00:17:49 thing, one alternate way to get other languages in the Python ecosystem.

00:17:53 Yeah.

00:17:53 I just tried out the extent of my Lisp knowledge that cons makes a tuple.

00:17:58 Nice.

00:18:00 I've forgotten all about the cutter in the car and all that stuff from when I took it

00:18:03 back in school.

00:18:04 It's been a long time.

00:18:05 It's been a long time.

00:18:05 It has.

00:18:07 All right.

00:18:07 Well, that's, that's it for the news this week, everyone.

00:18:10 I think, Brian, you found some good ones.

00:18:12 Thank you.

00:18:13 I do want one last thing.

00:18:14 I want to do a little bit of follow-up.

00:18:16 Last week when we covered PDR2, I commented that it didn't look that great in PyPI.

00:18:23 And that was fixed last week.

00:18:25 And with one of the best pull requests I've ever seen or comments in the code, and it was

00:18:31 the comment was remove beer from readme.

00:18:33 Apparently there was a beer Unicode symbol that was messing up the PyPI stuff.

00:18:39 So that's good.

00:18:41 It's marked as a bug and urgent that we get the beer out of the readme.

00:18:45 Fantastic.

00:18:46 That is awesome.

00:18:48 All right.

00:18:49 Yeah.

00:18:49 Cool.

00:18:50 So that's, it's pretty neat that that actually, that people listen to our show and change

00:18:54 the projects based on it.

00:18:56 Right.

00:18:56 That's, that's awesome.

00:18:56 Yeah.

00:18:57 Or they, they may have noticed it on their own, but let's go with that.

00:19:00 They're listeners.

00:19:01 They took your advice and remove the beer.

00:19:03 Excellent.

00:19:04 All right.

00:19:05 Well, thanks so much for chatting with me, Brian, and sharing the news with everyone.

00:19:08 It's fun as always.

00:19:09 Thank you.

00:19:09 Yep.

00:19:10 Bye.

00:19:10 Thank you for listening to Python Bytes.

00:19:13 Follow the show on Twitter via at Python Bytes.

00:19:16 That's Python Bytes as in B-Y-T-E-S.

00:19:19 And get the full show notes at Python Bytes.fm.

00:19:22 If you have a news item you want featured, just visit Python Bytes.fm and send it our way.

00:19:27 We're always on the lookout for sharing something cool.

00:19:29 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:19:33 Thank you for listening and sharing this podcast with your friends and colleagues.

