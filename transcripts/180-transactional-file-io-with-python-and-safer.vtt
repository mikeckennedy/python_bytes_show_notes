
00:00:00.000 --> 00:00:04.800
Hello and welcome to Python Bytes where we deliver news and headlines directly to your earbuds.


00:00:04.800 --> 00:00:12.720
This is episode 180, can't believe it, recorded April 29th, 2020. It's almost Mayday. I am Brian


00:00:12.720 --> 00:00:17.680
Okken. And I'm Michael Kennedy. And this episode is brought to you by DigitalOcean and we'll talk


00:00:17.680 --> 00:00:23.040
more about them a little later. Well, I have some very timely news because not very long ago,


00:00:23.040 --> 00:00:28.040
a couple of days ago, Ubuntu 20.04 is out.


00:00:28.040 --> 00:00:29.980
- What? - That's cool, right?


00:00:29.980 --> 00:00:31.480
Yeah, the new Ubuntu.


00:00:31.480 --> 00:00:33.320
And it's, why is this big news?


00:00:33.320 --> 00:00:37.000
Well, there's a lot of releases of Ubuntu and whatnot,


00:00:37.000 --> 00:00:41.720
but this is the first new LTS long-term support version


00:00:41.720 --> 00:00:43.320
in two years.


00:00:43.320 --> 00:00:47.320
So basically this is the first like real production grade


00:00:47.320 --> 00:00:49.340
version of Ubuntu that's been out in two years.


00:00:49.340 --> 00:00:50.600
So that's a big deal, I think.


00:00:50.600 --> 00:00:51.600
- Oh yeah, really big deal.


00:00:51.600 --> 00:00:54.280
and it's got something special in it.


00:00:54.280 --> 00:00:56.360
- It does, it hates legacy Python,


00:00:56.360 --> 00:00:57.960
but it loves modern Python.


00:00:57.960 --> 00:01:01.600
So one of the things that's bugged me about 1804,


00:01:01.600 --> 00:01:03.760
which is what I've been using for production,


00:01:03.760 --> 00:01:05.760
is it was stuck on 3.6.


00:01:05.760 --> 00:01:10.080
I mean, imagine April 2018, it's using Python 3.6.


00:01:10.080 --> 00:01:11.160
It didn't change.


00:01:11.160 --> 00:01:13.380
Well, what's the current version now?


00:01:13.380 --> 00:01:15.520
Well, that's Python 3.8.


00:01:15.520 --> 00:01:19.080
Sadly, 3.9 is gonna be out really soon,


00:01:19.080 --> 00:01:20.920
and this is 3.8, but nonetheless,


00:01:20.920 --> 00:01:22.400
- Okay, 3.8 is awesome.


00:01:22.400 --> 00:01:25.520
It has a bunch of cool new features that we can use.


00:01:25.520 --> 00:01:27.540
And yeah, it comes included.


00:01:27.540 --> 00:01:29.600
I don't even think you have to pip install Python.


00:01:29.600 --> 00:01:31.040
I think 3.8 is already there.


00:01:31.040 --> 00:01:31.860
- That's really cool.


00:01:31.860 --> 00:01:33.880
- Yeah, and to get legacy Python, you can get it,


00:01:33.880 --> 00:01:36.120
but you have to go like apt install it explicitly


00:01:36.120 --> 00:01:37.680
to say, no, no, I want the old one.


00:01:37.680 --> 00:01:40.600
- Yeah, Python 3.8 automatic.


00:01:40.600 --> 00:01:42.240
- It is now. - f-strings are everywhere.


00:01:42.240 --> 00:01:44.240
- That's right, like it's time to hit it,


00:01:44.240 --> 00:01:47.000
all of your code with Flint and auto F string,


00:01:47.000 --> 00:01:48.160
all the things.


00:01:48.160 --> 00:01:51.880
So upgraded all of the servers for Python bytes.


00:01:51.880 --> 00:01:53.920
The servers are pretty small and simple,


00:01:53.920 --> 00:01:56.000
but if you look at all the stuff that I'm running,


00:01:56.000 --> 00:01:57.400
there's actually a ton of servers.


00:01:57.400 --> 00:01:59.400
And I actually talked about that with Dan Bader


00:01:59.400 --> 00:02:02.520
on TalkBython episode 215.


00:02:02.520 --> 00:02:05.200
So people really want to look in what we're doing,


00:02:05.200 --> 00:02:07.840
what I'm doing here, what we're doing for Python bytes.


00:02:07.840 --> 00:02:09.440
In terms of infrastructure, they could do that,


00:02:09.440 --> 00:02:14.000
but upgraded a bunch of servers to 20.04.


00:02:14.000 --> 00:02:15.920
There's a bunch of stuff that kind of built up cruft


00:02:15.920 --> 00:02:17.520
and I'm like, oh, we could do this way better.


00:02:17.520 --> 00:02:19.080
Read it all that stuff over the weekend.


00:02:19.080 --> 00:02:21.760
And so now everything's on the shiny new versions


00:02:21.760 --> 00:02:24.560
of Python 3.8 and Ubuntu 20.04.


00:02:24.560 --> 00:02:25.880
And it went really well for me.


00:02:25.880 --> 00:02:26.960
So that's great.


00:02:26.960 --> 00:02:30.000
Yeah, and the kernel has been upgraded to 5.4,


00:02:30.000 --> 00:02:33.120
which adds support for WireGuard, VPNs,


00:02:33.120 --> 00:02:35.520
better support for like Raspberry Pis


00:02:35.520 --> 00:02:37.960
and Intel and AMD hardware.


00:02:37.960 --> 00:02:39.200
New version of GNOME.


00:02:39.200 --> 00:02:43.080
You can install the desktop on top of the ZFS file system,


00:02:43.080 --> 00:02:44.280
if you care about that.


00:02:44.280 --> 00:02:47.240
And you talked about DigitalOcean at the top.


00:02:47.240 --> 00:02:50.400
you can go to DigitalOcean right now and just check off,


00:02:50.400 --> 00:02:53.800
I want a new 20.04 droplet, boom, off it goes.


00:02:53.800 --> 00:02:54.640
That's how I got ours.


00:02:54.640 --> 00:02:55.680
- Oh, that's great.


00:02:55.680 --> 00:02:56.500
Nice.


00:02:56.500 --> 00:02:57.340
- Yeah, yeah.


00:02:57.340 --> 00:03:00.180
And actually, we've already had the kernel upgraded,


00:03:00.180 --> 00:03:02.480
the 5.4 kernel upgraded to like a new version.


00:03:02.480 --> 00:03:04.640
I just had to like apply some patches.


00:03:04.640 --> 00:03:07.360
So I guess it's pretty active, but here you go.


00:03:07.360 --> 00:03:10.640
- So yeah, different topic, but for our servers,


00:03:10.640 --> 00:03:13.440
you have to like pay attention to kernel upgrades and stuff?


00:03:13.440 --> 00:03:15.000
- Yeah, apparently, yeah.


00:03:15.000 --> 00:03:17.160
They're not like on a platform as a service type of thing.


00:03:17.160 --> 00:03:18.000
It's not a big deal.


00:03:18.000 --> 00:03:20.560
It's pretty regular, like once a month or whatever.


00:03:20.560 --> 00:03:22.960
I'm usually logged in to one of them


00:03:22.960 --> 00:03:24.560
every couple of days doing something,


00:03:24.560 --> 00:03:27.160
and it'll say, oh, like either it's already applied,


00:03:27.160 --> 00:03:28.120
it says you gotta reboot it,


00:03:28.120 --> 00:03:30.120
it'll be like obvious that there's an update


00:03:30.120 --> 00:03:31.160
when you log in.


00:03:31.160 --> 00:03:33.420
And then I'm like, oh, I should just run that thing


00:03:33.420 --> 00:03:35.120
that upgrades all of them.


00:03:35.120 --> 00:03:35.960
- Okay.


00:03:35.960 --> 00:03:36.960
- Once I notice it, yeah.


00:03:36.960 --> 00:03:38.000
So pretty much, yeah.


00:03:38.000 --> 00:03:38.840
- Okay, neat.


00:03:38.840 --> 00:03:39.660
- Yeah.


00:03:39.660 --> 00:03:41.280
- Okay, well, I'm gonna switch hats.


00:03:41.280 --> 00:03:44.540
So I wanna talk about warnings.


00:03:44.540 --> 00:03:46.160
So warning, I'm gonna switch a hat.


00:03:46.160 --> 00:03:50.800
So Reuven Lerner is a friend of the show and great guy, teaches Python.


00:03:50.800 --> 00:03:53.680
And he wrote an article called "Working with Warnings in Python."


00:03:53.680 --> 00:03:57.440
And I like this because I don't think we've talked about warnings much.


00:03:57.440 --> 00:03:58.880
No, not much at all, actually.


00:03:58.880 --> 00:04:01.520
It's a good introduction, but he talks about exceptions


00:04:01.520 --> 00:04:04.080
and the class hierarchy and printouts and stuff.


00:04:04.080 --> 00:04:06.000
But if you want to, like, if something goes wrong,


00:04:06.000 --> 00:04:10.480
you kind of want, you've got options of like printing out to the user or


00:04:10.480 --> 00:04:12.800
throwing an exception, but you also have warnings.


00:04:12.800 --> 00:04:15.600
And how should you treat those?


00:04:15.600 --> 00:04:17.000
And I love what he wrote.


00:04:17.000 --> 00:04:22.160
He said, "Most of the time, warnings are aimed at developers rather than users.


00:04:22.160 --> 00:04:26.080
Warnings in Python are sort of like the service needed light on a car.


00:04:26.080 --> 00:04:31.840
The user might know that something is wrong, but only a qualified repair person will know what to do.


00:04:31.840 --> 00:04:35.600
Developers should avoid showing warnings to end users."


00:04:35.600 --> 00:04:40.480
But one of the things that the warning system is used for is deprecation warnings.


00:04:40.480 --> 00:04:45.680
A lot of projects do this where they kind of want to get rid of a feature so they can refactor some stuff


00:04:45.680 --> 00:04:49.680
and or just doesn't fit in the API very well.


00:04:49.680 --> 00:04:54.680
So they'll deprecate it and they'll issue a deprecation warning when somebody uses it.


00:04:54.680 --> 00:04:59.280
So it's an alert. It doesn't stop working, but it alerts people to that there's a warning.


00:04:59.280 --> 00:05:05.280
One of the things I love about warnings is by default, pytest turns on warnings.


00:05:05.280 --> 00:05:08.360
And so you can see those and you can also make them make


00:05:08.360 --> 00:05:10.880
Pytest so that it fails on warnings.


00:05:10.880 --> 00:05:13.420
So this is a good thing to pay attention to,


00:05:13.420 --> 00:05:15.920
but it doesn't stop your project.


00:05:15.920 --> 00:05:17.980
- That's cool, I didn't know you can make Pytest,


00:05:17.980 --> 00:05:21.240
like observe and use the warnings as a error.


00:05:21.240 --> 00:05:23.840
- Yeah, the warning system gives you a whole bunch of stuff.


00:05:23.840 --> 00:05:25.920
Python's warning system, it treats warnings


00:05:25.920 --> 00:05:29.420
as separate types of output so that we don't confuse them


00:05:29.420 --> 00:05:32.120
with either exceptions or printed texts.


00:05:32.120 --> 00:05:33.880
It lets us indicate what kind of warning


00:05:33.880 --> 00:05:34.860
we're sending the user.


00:05:34.860 --> 00:05:35.940
so we have different types.


00:05:35.940 --> 00:05:37.580
It's like the exception hierarchy.


00:05:37.580 --> 00:05:39.960
You can have a warning, there's a warning hierarchy.


00:05:39.960 --> 00:05:43.020
You can create your own and you can filter on them


00:05:43.020 --> 00:05:46.780
so that you can screen out stuff that you don't care about,


00:05:46.780 --> 00:05:48.640
selectively fix things.


00:05:48.640 --> 00:05:50.660
Anyway, it's a very powerful system.


00:05:50.660 --> 00:05:52.540
People should use it when they need it.


00:05:52.540 --> 00:05:56.380
The article goes on to give specifics on the syntax


00:05:56.380 --> 00:05:59.220
of how to use them, how to create custom warnings


00:05:59.220 --> 00:06:00.300
and how to filter on them.


00:06:00.300 --> 00:06:01.660
And it's a good intro.


00:06:01.660 --> 00:06:02.860
- Yeah, this looks super interesting


00:06:02.860 --> 00:06:05.320
and like something I should be paying more attention to


00:06:05.320 --> 00:06:06.640
than I have so far.


00:06:06.640 --> 00:06:08.340
Is this something I'm not really using?


00:06:08.340 --> 00:06:10.000
I'm more a consumer of warnings.


00:06:10.000 --> 00:06:11.800
I'm like, oh, that library,


00:06:11.800 --> 00:06:14.320
it started issuing warnings about something.


00:06:14.320 --> 00:06:15.840
And sometimes it's really frustrating


00:06:15.840 --> 00:06:18.680
because it's like the library being used


00:06:18.680 --> 00:06:21.720
by the library I'm actually trying to use


00:06:21.720 --> 00:06:23.000
is doing something wrong.


00:06:23.000 --> 00:06:24.640
It says, well, this is gonna be deprecated


00:06:24.640 --> 00:06:25.640
and now you gotta do this.


00:06:25.640 --> 00:06:27.360
I'm like, well, but I'm not doing that.


00:06:27.360 --> 00:06:28.480
I don't wanna see this.


00:06:28.480 --> 00:06:31.400
But nonetheless, it looks like way simpler


00:06:31.400 --> 00:06:32.960
then maybe I just haven't looked at it.


00:06:32.960 --> 00:06:34.640
It looks great, so I should use this more.


00:06:34.640 --> 00:06:36.760
- One of the cool use cases that I heard recently


00:06:36.760 --> 00:06:41.760
is using pytest warnings, or pytest's knowledge of warnings,


00:06:41.760 --> 00:06:44.760
and testing your system when you're upgrading Python


00:06:44.760 --> 00:06:47.120
so that you can say, oh, when we're,


00:06:47.120 --> 00:06:49.320
'cause Python will deprecate things too.


00:06:49.320 --> 00:06:51.820
And then you can have a heads up


00:06:51.820 --> 00:06:53.640
that you need to start fixing your code


00:06:53.640 --> 00:06:56.400
because, and it'll pinpoint to you exactly,


00:06:56.400 --> 00:06:57.720
it's kind of like the exception system,


00:06:57.720 --> 00:07:00.040
it tells you exactly where it's coming from, so.


00:07:00.040 --> 00:07:01.160
- Yeah, that is really nice.


00:07:01.160 --> 00:07:03.160
Do you want to know something else that's nice?


00:07:03.160 --> 00:07:04.000
- DigitalOcean?


00:07:04.000 --> 00:07:05.600
- DigitalOcean is very nice.


00:07:05.600 --> 00:07:09.320
And DigitalOcean just launched their virtual private cloud


00:07:09.320 --> 00:07:14.320
or VPC system and new trust platform.


00:07:14.320 --> 00:07:15.960
Ooh, a trust platform.


00:07:15.960 --> 00:07:18.040
Together, these make it easier to architect


00:07:18.040 --> 00:07:19.840
and run serious business applications


00:07:19.840 --> 00:07:22.800
with even stronger security and confidence.


00:07:22.800 --> 00:07:26.300
VPC allows you to create multiple private networks


00:07:26.300 --> 00:07:28.520
for your account or your team,


00:07:28.520 --> 00:07:30.640
instead of having just one private network.


00:07:30.640 --> 00:07:34.320
DigitalOcean can auto-generate your private networks,


00:07:34.320 --> 00:07:39.320
IP address range, and, or you can specify your own IPs.


00:07:39.320 --> 00:07:42.280
You can now configure droplets to have,


00:07:42.280 --> 00:07:44.360
to behave as internet gateways.


00:07:44.360 --> 00:07:45.200
That's cool.


00:07:45.200 --> 00:07:46.880
- Yeah, it's like your own little baby internet.


00:07:46.880 --> 00:07:48.120
- Yeah, that's neat.


00:07:48.120 --> 00:07:50.900
And Trust Platform is a new microsite


00:07:50.900 --> 00:07:53.260
that provides one place to get all your security


00:07:53.260 --> 00:07:55.320
and privacy questions answered


00:07:55.320 --> 00:07:59.200
and download our available security certifications.


00:07:59.200 --> 00:08:01.680
DigitalOcean is your trusted partner in the cloud.


00:08:01.680 --> 00:08:04.840
Visit pythonbytes.fm/digitalocean


00:08:04.840 --> 00:08:08.640
to get $100 credit for new users to build something awesome.


00:08:08.640 --> 00:08:09.600
- Yeah, we love it.


00:08:09.600 --> 00:08:13.120
Like I just said, I'll put a voodoo20.04 on there


00:08:13.120 --> 00:08:14.880
and it's been working great for so many years.


00:08:14.880 --> 00:08:18.240
Now, one thing that I ran across,


00:08:18.240 --> 00:08:20.640
there's a few little libraries that are so simple


00:08:20.640 --> 00:08:22.360
and yet when you come across them, you're like,


00:08:22.360 --> 00:08:25.080
oh yes, this is so cool.


00:08:25.080 --> 00:08:28.000
One of those that I go on and on about is Unsync,


00:08:28.000 --> 00:08:31.040
how that unifies all the different APIs


00:08:31.040 --> 00:08:33.240
that do asynchronous programming,


00:08:33.240 --> 00:08:36.560
like async IO, threaded stuff,


00:08:36.560 --> 00:08:38.680
multi-processing stuff and whatnot, right?


00:08:38.680 --> 00:08:41.520
So this is one, I think, that kind of is like that.


00:08:41.520 --> 00:08:42.520
It's not about unification,


00:08:42.520 --> 00:08:45.920
but it's about solving a problem in a way


00:08:45.920 --> 00:08:48.160
that's kind of transparent to the user,


00:08:48.160 --> 00:08:49.280
but is really, really awesome


00:08:49.280 --> 00:08:53.240
because it just adds some nice durability to your code.


00:08:53.240 --> 00:08:58.240
So there's different levels of like exception handling


00:08:58.240 --> 00:08:59.520
if you look at it, right?


00:08:59.520 --> 00:09:00.680
So if you look at code,


00:09:00.680 --> 00:09:02.600
there's probably like the beginner level


00:09:02.600 --> 00:09:06.060
that has no try except blocks anywhere in the code.


00:09:06.060 --> 00:09:08.200
It's just like, I don't know what you call it.


00:09:08.200 --> 00:09:10.600
Is that optimistic programming?


00:09:10.600 --> 00:09:11.800
Like I don't need to do error handling.


00:09:11.800 --> 00:09:12.620
It's gonna be fine.


00:09:12.620 --> 00:09:13.460
Everything's fine.


00:09:13.460 --> 00:09:14.520
This is fine.


00:09:14.520 --> 00:09:15.920
That's one way.


00:09:15.920 --> 00:09:17.640
The next level would be to say,


00:09:17.640 --> 00:09:19.520
okay, I'm gonna have some exception handling.


00:09:19.520 --> 00:09:21.720
I'm gonna do a try, do a bunch of stuff,


00:09:21.720 --> 00:09:24.520
except handle the error, right?


00:09:24.520 --> 00:09:26.360
That's good and maybe you're catching different errors.


00:09:26.360 --> 00:09:27.700
Like maybe that's another level.


00:09:27.700 --> 00:09:30.160
I don't know what the making these levels up a little bit,


00:09:30.160 --> 00:09:32.860
but even if you are catching an error,


00:09:32.860 --> 00:09:35.440
something could have gone terribly, terribly wrong


00:09:35.440 --> 00:09:38.000
and corrupted your data along the way.


00:09:38.000 --> 00:09:39.960
So there's like durable error handling


00:09:39.960 --> 00:09:42.120
and there's, it isn't technically crashing


00:09:42.120 --> 00:09:43.760
at the moment error handling, right?


00:09:43.760 --> 00:09:44.920
So the durable error handling,


00:09:44.920 --> 00:09:48.400
I don't think a lot of people think about nearly as much.


00:09:48.400 --> 00:09:51.480
So simple example is what you would maybe use


00:09:51.480 --> 00:09:53.240
a transaction for in a database.


00:09:53.240 --> 00:09:55.640
It's like, I'm gonna transfer money from this account


00:09:55.640 --> 00:09:58.440
to that account, but what happens if the transfer


00:09:58.440 --> 00:10:00.360
to the second account fails?


00:10:00.360 --> 00:10:02.040
I wanna make sure I don't actually take the money


00:10:02.040 --> 00:10:03.560
from the first account, right?


00:10:03.560 --> 00:10:07.920
Or I want to write some piece of data to a file.


00:10:07.920 --> 00:10:09.660
So I'm gonna open the file,


00:10:09.660 --> 00:10:11.400
and I'm gonna make sure there's a try except,


00:10:11.400 --> 00:10:12.480
I'm gonna put it in a with block


00:10:12.480 --> 00:10:15.000
so the file pointer gets closed, everything's gonna be good.


00:10:15.000 --> 00:10:17.560
I'm gonna make one change and another change


00:10:17.560 --> 00:10:18.760
and then a third change,


00:10:18.760 --> 00:10:20.940
like write these three things to the file.


00:10:20.940 --> 00:10:24.440
what if the exception happens after the second line?


00:10:24.440 --> 00:10:26.620
You've half written to the file.


00:10:26.620 --> 00:10:27.700
Now what? - I don't know.


00:10:27.700 --> 00:10:29.100
- Wow. - That's bad, right?


00:10:29.100 --> 00:10:30.420
- Yeah. - So there's all these ways


00:10:30.420 --> 00:10:31.780
in which, like you still have a try-except,


00:10:31.780 --> 00:10:33.580
you still catch it, you still close the file pointer,


00:10:33.580 --> 00:10:35.120
it doesn't matter, it's corrupted, right?


00:10:35.120 --> 00:10:37.580
So there's like this another level of error handling


00:10:37.580 --> 00:10:41.140
of like kind of treating memory and files and whatnot


00:10:41.140 --> 00:10:44.460
as transactional type things, right?


00:10:44.460 --> 00:10:47.600
If there's an error, they just go back the way they were.


00:10:47.600 --> 00:10:50.540
And so this thing that, this long-winded introduction


00:10:50.540 --> 00:10:52.900
is about is called Safer.


00:10:52.900 --> 00:10:55.120
So a Safer file writer.


00:10:55.120 --> 00:10:58.460
And it's this cool, simple little thing.


00:10:58.460 --> 00:11:02.780
Instead of saying with open file name as file pointer,


00:11:02.780 --> 00:11:06.580
you say with Safer.open file name as file pointer.


00:11:06.580 --> 00:11:08.500
And then otherwise all your code is identical.


00:11:08.500 --> 00:11:09.340
- Okay.


00:11:09.340 --> 00:11:10.700
- Okay, here's what it actually does.


00:11:10.700 --> 00:11:12.860
So as you write to the file pointer,


00:11:12.860 --> 00:11:16.900
it's writing to a temporary file behind the scenes.


00:11:16.900 --> 00:11:19.920
And then if, you know, when you exit a with block,


00:11:19.920 --> 00:11:23.120
the with block, the exit, the dunder exit,


00:11:23.120 --> 00:11:25.200
takes whether or not there was an error


00:11:25.200 --> 00:11:26.660
on the way out the door.


00:11:26.660 --> 00:11:28.880
So you know as you exit the with block,


00:11:28.880 --> 00:11:30.740
did I, am I leaving 'cause a crash


00:11:30.740 --> 00:11:35.100
or am I leaving because everything is cool and we're done?


00:11:35.100 --> 00:11:37.600
So it uses that information to either


00:11:37.600 --> 00:11:41.160
throw away the temp file or move the temp file over top


00:11:41.160 --> 00:11:43.040
the thing you thought you were writing on.


00:11:43.040 --> 00:11:43.880
Isn't that cool?


00:11:43.880 --> 00:11:46.280
So if there's an exception in your with block,


00:11:46.280 --> 00:11:48.400
it still closes up the file pointer and everything


00:11:48.400 --> 00:11:49.640
but your data is unchanged.


00:11:49.640 --> 00:11:53.360
It's kind of like a transaction with a auto rollback for files.


00:11:53.360 --> 00:11:54.160
That's pretty cool.


00:11:54.160 --> 00:11:54.720
Isn't that cool?


00:11:54.720 --> 00:11:57.160
And it's like 28 lines of code that does that little bit.


00:11:57.160 --> 00:11:57.560
Yeah.


00:11:57.560 --> 00:12:00.120
Is it any idea what the time hit is?


00:12:00.120 --> 00:12:01.240
It's got to be a little bit, but--


00:12:01.240 --> 00:12:05.000
It's pretty small because it just uses shutil to replace the file.


00:12:05.000 --> 00:12:08.400
Like it writes to the file just as you would write to the file.


00:12:08.400 --> 00:12:11.760
And then at the very end, it goes, move this file to this destination


00:12:11.760 --> 00:12:12.680
and overwrite.


00:12:12.680 --> 00:12:18.040
So it basically adds a file move, which in an SSD is like nothing, right?


00:12:18.040 --> 00:12:18.600
OK.


00:12:18.600 --> 00:12:19.820
It doesn't matter how big it is.


00:12:19.820 --> 00:12:22.160
It probably just like updates the, I don't know,


00:12:22.160 --> 00:12:26.080
like the table and the drive, whatever that means.


00:12:26.080 --> 00:12:26.920
- Yeah. - Isn't that cool?


00:12:26.920 --> 00:12:27.840
- That is very cool.


00:12:27.840 --> 00:12:28.680
I like it.


00:12:28.680 --> 00:12:31.080
- Yeah, so it seems so easy to use.


00:12:31.080 --> 00:12:33.180
It looks like something that might be worth looking at.


00:12:33.180 --> 00:12:34.720
So I'm linking to a couple of things.


00:12:34.720 --> 00:12:37.200
I'm linking to an article that introduces this.


00:12:37.200 --> 00:12:39.960
And in the beginning, apparently there was like some edge


00:12:39.960 --> 00:12:42.280
case where something wasn't working quite right.


00:12:42.280 --> 00:12:46.640
If you passed like an integer representing a file handle


00:12:46.640 --> 00:12:48.200
or something funky like that.


00:12:48.200 --> 00:12:49.040
It didn't deal with that, right?


00:12:49.040 --> 00:12:52.620
So there's another like a updated article


00:12:52.620 --> 00:12:54.600
that doesn't have all the motivation,


00:12:54.600 --> 00:12:56.360
but then talks about this fix.


00:12:56.360 --> 00:12:57.600
And there's also a GitHub repo


00:12:57.600 --> 00:12:58.600
and you can just pip install it.


00:12:58.600 --> 00:12:59.600
So all those things are good.


00:12:59.600 --> 00:13:00.920
And the final in this section,


00:13:00.920 --> 00:13:04.080
I'm linking to the actual 28 lines of code.


00:13:04.080 --> 00:13:04.920
Do you have that open?


00:13:04.920 --> 00:13:05.760
- I did.


00:13:05.760 --> 00:13:06.600
- Click on that really quick,


00:13:06.600 --> 00:13:07.880
'cause I wanted to talk about a couple


00:13:07.880 --> 00:13:10.080
of really interesting patterns here.


00:13:10.080 --> 00:13:13.260
Like if you wanted to study 28 lines of code


00:13:13.260 --> 00:13:16.400
that took and brought together a bunch of interesting ideas,


00:13:16.400 --> 00:13:18.120
like, whoa, this is pretty crazy.


00:13:18.120 --> 00:13:25.280
So it has a generator expression on an infinite sequence of numbers to


00:13:25.280 --> 00:13:29.800
find the temporary file, which is pretty interesting because it just


00:13:29.800 --> 00:13:30.840
says, I'm going to call it.


00:13:30.840 --> 00:13:32.080
1.2.3.


00:13:32.080 --> 00:13:34.040
And in case those exist, we're just going to go through all


00:13:34.040 --> 00:13:36.000
of them until one doesn't.


00:13:36.000 --> 00:13:37.520
Isn't this crazy?


00:13:37.520 --> 00:13:39.240
So that's pretty fun.


00:13:39.240 --> 00:13:43.320
And that uses SHU to copy the file over, which is pretty cool.


00:13:43.940 --> 00:13:48.780
it uses yield to automatically return the inner file pointer.


00:13:48.780 --> 00:13:51.300
So when you say with thing as whatever,


00:13:51.300 --> 00:13:53.620
even though you said safer.open,


00:13:53.620 --> 00:13:57.380
it actually yields out the underlying pointer,


00:13:57.380 --> 00:13:59.980
file pointer that came from open.


00:13:59.980 --> 00:14:01.620
There's just a bunch of different layers of,


00:14:01.620 --> 00:14:02.820
oh, that's interesting.


00:14:02.820 --> 00:14:03.640
Oh, that's neat.


00:14:03.640 --> 00:14:05.820
Yeah, anyway, I think this is really clever


00:14:05.820 --> 00:14:08.680
and it seems like a cool little library.


00:14:08.680 --> 00:14:11.700
The reason I think it would probably be useful


00:14:11.700 --> 00:14:13.260
and not gonna give you a big hit,


00:14:13.260 --> 00:14:14.380
It's like this is literally it.


00:14:14.380 --> 00:14:15.980
You can see it's creating the temp file,


00:14:15.980 --> 00:14:17.580
it writes to the temp file,


00:14:17.580 --> 00:14:21.620
and then it uses os.rename the temp file to the actual thing.


00:14:21.620 --> 00:14:24.220
So, you know, not a whole lot of magic going on,


00:14:24.220 --> 00:14:26.140
but really quite useful, I think.


00:14:26.140 --> 00:14:27.700
- Not a lot of code either, yeah.


00:14:27.700 --> 00:14:28.980
Just a-- - Yeah, isn't that crazy?


00:14:28.980 --> 00:14:29.800
- Yeah, it's pretty cool.


00:14:29.800 --> 00:14:30.640
- I love it.


00:14:30.640 --> 00:14:33.460
Useful, gives you that sort of durable error handling,


00:14:33.460 --> 00:14:37.260
almost like transactional files, and yet super simple.


00:14:37.260 --> 00:14:38.100
Very good.


00:14:38.100 --> 00:14:39.920
- Uses unit test as its test runner, though.


00:14:39.920 --> 00:14:40.760
- Oh my God.


00:14:40.760 --> 00:14:43.960
All right, I retract all of my endorsements of this thing.


00:14:43.960 --> 00:14:46.960
[laughter]


00:14:46.960 --> 00:14:48.260
All right, what's the next one?


00:14:48.260 --> 00:14:50.060
Okay, I'm on the other tab.


00:14:50.060 --> 00:14:51.560
Did I distract you?


00:14:51.560 --> 00:14:52.860
Oh, yeah, you did.


00:14:52.860 --> 00:14:54.660
And new article, new hat.


00:14:54.660 --> 00:14:56.260
So, Codespell.


00:14:56.260 --> 00:15:01.460
So, I got this from Christian Klaus,


00:15:01.460 --> 00:15:04.560
that silly little project I play with on the side called Cards.


00:15:04.560 --> 00:15:06.860
I got a pull request against the project


00:15:06.860 --> 00:15:10.660
to add a pre-commit hook to run Codespell.


00:15:10.660 --> 00:15:16.260
And I had never heard of Codespell, so I was excited to have a new topic for the podcast.


00:15:16.260 --> 00:15:18.060
Also, just, this is neat.


00:15:18.060 --> 00:15:22.760
So Codespell, what it does is it fixes common misspellings in text files.


00:15:22.760 --> 00:15:28.160
And specifically, it's designed primarily for checking misspelled words in source code,


00:15:28.160 --> 00:15:31.160
but it can be used as other files as well.


00:15:31.160 --> 00:15:34.060
When Christian applied this to the Cards project,


00:15:34.060 --> 00:15:38.860
it noticed that in one of the documentation files I've got, one of the Markdown files,


00:15:38.860 --> 00:15:48.140
I had spelled arguments with an extra you in the middle of it and one of the problems with spelling,


00:15:48.140 --> 00:15:54.380
I mean it's embarrassing to do and distracting to have spelling errors in your code or your


00:15:54.380 --> 00:15:59.980
comments or anything. It's hard to deal with because a lot of source code doesn't have,


00:15:59.980 --> 00:16:04.860
you can't just throw normal spell checkers at source code because it'll just warn you on your


00:16:04.860 --> 00:16:06.740
your variable names and all sorts of stuff.


00:16:06.740 --> 00:16:08.580
- Right, you can't drop it in Grammarly.


00:16:08.580 --> 00:16:09.540
That's not gonna go well.


00:16:09.540 --> 00:16:12.060
- It's not gonna work, but so I'm really excited


00:16:12.060 --> 00:16:14.180
to try this and to start using it


00:16:14.180 --> 00:16:16.780
because if it can work for just about anything,


00:16:16.780 --> 00:16:20.660
it might be able to work for non-Python programs too,


00:16:20.660 --> 00:16:22.180
as well, why not?


00:16:22.180 --> 00:16:23.020
So it's pretty neat.


00:16:23.020 --> 00:16:24.700
- Yeah, all sorts of documentation, that's cool.


00:16:24.700 --> 00:16:26.120
- It's an open source project.


00:16:26.120 --> 00:16:28.540
The GitHub repo has the entire dictionary


00:16:28.540 --> 00:16:29.580
so you can scan through it,


00:16:29.580 --> 00:16:31.780
and there's ways to ignore certain words


00:16:31.780 --> 00:16:33.860
if you're like, no, that's the correct spelling


00:16:33.860 --> 00:16:36.860
and it keeps doing stuff you can ignore it.


00:16:36.860 --> 00:16:38.260
- Nice, well, that's a really good one.


00:16:38.260 --> 00:16:42.800
The most embarrassing misspelling I've ever done in code


00:16:42.800 --> 00:16:46.400
was I'd misspelled like a namespace


00:16:46.400 --> 00:16:50.420
or a class name or a package name or something like that.


00:16:50.420 --> 00:16:53.200
I can't remember quite where it was,


00:16:53.200 --> 00:16:57.900
but it was on a project I had been working on for like a year


00:16:57.900 --> 00:17:00.260
and I misspelled it, but everything was auto-complete.


00:17:00.260 --> 00:17:01.420
And so I don't care, I'm like, da-da-da,


00:17:01.420 --> 00:17:02.940
it is just like, okay, auto-complete.


00:17:02.940 --> 00:17:05.660
I'm not even like ever typing that again, right?


00:17:05.660 --> 00:17:08.140
I guess I just wasn't paying attention to that.


00:17:08.140 --> 00:17:09.100
I kind of suck at spelling.


00:17:09.100 --> 00:17:11.660
That was like an extra bad case.


00:17:11.660 --> 00:17:13.700
Some new person came on the team and said,


00:17:13.700 --> 00:17:16.540
"Dude, why is this misspelled all over the place?"


00:17:16.540 --> 00:17:17.820
And I'm like, "Oh, we got to fix it."


00:17:17.820 --> 00:17:21.580
But it was like other applications depended on that library


00:17:21.580 --> 00:17:22.980
and they used the misspelling.


00:17:22.980 --> 00:17:25.340
It was so bad because it was like,


00:17:25.340 --> 00:17:27.700
it had become pervasive throughout


00:17:27.700 --> 00:17:28.540
like all these different things.


00:17:28.540 --> 00:17:30.980
I'm like, "We may have to leave that misspelled."


00:17:30.980 --> 00:17:32.340
I think we eventually fixed it,


00:17:32.340 --> 00:17:34.420
But it was quite a bit of work,


00:17:34.420 --> 00:17:36.700
considering what it should have been.


00:17:36.700 --> 00:17:37.940
- That's funny.


00:17:37.940 --> 00:17:38.780
That's awesome.


00:17:38.780 --> 00:17:40.900
Well, at least you didn't have both of the spellings


00:17:40.900 --> 00:17:43.420
be valid symbols in your program


00:17:43.420 --> 00:17:45.260
and mean completely different things.


00:17:45.260 --> 00:17:46.080
- That's true.


00:17:46.080 --> 00:17:49.820
Yeah, so one of the things that's awesome


00:17:49.820 --> 00:17:52.980
about this podcast is we'll find some random thing,


00:17:52.980 --> 00:17:54.580
or maybe somebody will send it to us,


00:17:54.580 --> 00:17:56.980
and we'll say, "Oh, did you even know


00:17:56.980 --> 00:17:57.940
"that this was a thing?


00:17:57.940 --> 00:17:59.060
"I had never heard of this."


00:17:59.060 --> 00:18:01.380
And then five other people will shoot us a message


00:18:01.380 --> 00:18:04.760
and say, yeah, and this variation or this other thing.


00:18:04.760 --> 00:18:06.900
And that's cool, but there's also X, Y, and Z, right?


00:18:06.900 --> 00:18:07.860
Isn't that awesome?


00:18:07.860 --> 00:18:08.900
- Yeah, yeah, yeah.


00:18:08.900 --> 00:18:10.260
I learned so much by doing this.


00:18:10.260 --> 00:18:11.100
- Yes, I know.


00:18:11.100 --> 00:18:12.940
We just got to throw something we vaguely know about


00:18:12.940 --> 00:18:14.660
and like people will correct us.


00:18:14.660 --> 00:18:15.980
- Yeah. - It'll be awesome.


00:18:15.980 --> 00:18:19.700
So, no, seriously, we talked about profilers


00:18:19.700 --> 00:18:24.300
and I talked about scaling, how it was really nice and fast


00:18:24.300 --> 00:18:26.460
and it did memory profiling and all that.


00:18:26.460 --> 00:18:28.380
Well, friend of the show, Anthony Shaw said,


00:18:28.380 --> 00:18:30.780
hey, since you're on this kick for profilers,


00:18:30.780 --> 00:18:32.820
Have you heard about Austin?


00:18:32.820 --> 00:18:36.220
To me, Austin is either a guy's name or a town in Texas.


00:18:36.220 --> 00:18:37.700
I hadn't heard about Austin, have you?


00:18:37.700 --> 00:18:39.380
- I got a neighbor named Austin.


00:18:39.380 --> 00:18:41.620
- Yeah, I don't think this is the same thing.


00:18:41.620 --> 00:18:45.620
So this is like scaling as a frame stack sampler


00:18:45.620 --> 00:18:50.220
for CPython, meaning it doesn't have like this huge effect


00:18:50.220 --> 00:18:51.680
of once you run it on your code,


00:18:51.680 --> 00:18:53.940
it doesn't become 10 times slower


00:18:53.940 --> 00:18:56.220
as instrumenting versions do.


00:18:56.220 --> 00:18:57.100
You know, it just asks like,


00:18:57.100 --> 00:18:58.820
"Hey, what are you up to?" really quickly.


00:18:58.820 --> 00:19:00.780
So that's cool, it's nice and fast.


00:19:00.780 --> 00:19:03.380
It also is just pure C code, there's no real dependencies


00:19:03.380 --> 00:19:05.500
like other than like the C runtime,


00:19:05.500 --> 00:19:07.200
which is in all the operating systems.


00:19:07.200 --> 00:19:10.220
So it looks at running Python code at intervals


00:19:10.220 --> 00:19:13.380
and then it dumps out whatever it finds, which is cool.


00:19:13.380 --> 00:19:16.880
It has a really simple output, but as you will learn,


00:19:16.880 --> 00:19:20.500
it has all these interesting ways to visualize that output.


00:19:20.500 --> 00:19:23.860
So it's sort of base, it's atomic unit of output


00:19:23.860 --> 00:19:25.420
is a flame graph.


00:19:25.420 --> 00:19:29.060
So flame graphs are like stacked up sort of things


00:19:29.060 --> 00:19:31.940
that are colorful and they also have information.


00:19:31.940 --> 00:19:34.220
So like the color communicates information and the height.


00:19:34.220 --> 00:19:35.460
So it's kind of like a graph


00:19:35.460 --> 00:19:37.500
with like color bars type of thing.


00:19:37.500 --> 00:19:39.540
And it has the parts of code that are running.


00:19:39.540 --> 00:19:41.780
If you want to see what that is, just click on the link


00:19:41.780 --> 00:19:43.560
and it has it right there at the top.


00:19:43.560 --> 00:19:44.400
And that's cool.


00:19:44.400 --> 00:19:45.220
So it puts that out,


00:19:45.220 --> 00:19:47.620
but you can build other tools to analyze that,


00:19:47.620 --> 00:19:50.020
or you could even make like a little player application


00:19:50.020 --> 00:19:53.500
that replays the execution of your application


00:19:53.500 --> 00:19:54.760
in like slow motion.


00:19:54.760 --> 00:19:56.920
and it replays that flame graph over time.


00:19:56.920 --> 00:19:57.760
- Oh, that's neat.


00:19:57.760 --> 00:19:58.580
- Isn't that cool?


00:19:58.580 --> 00:19:59.420
- Yeah.


00:19:59.420 --> 00:20:00.600
- So now is where it gets really fun


00:20:00.600 --> 00:20:03.280
because there's a couple of user interfaces


00:20:03.280 --> 00:20:06.740
on top of this simple output that can be interpreted.


00:20:06.740 --> 00:20:09.680
So the first one is called the TUI,


00:20:09.680 --> 00:20:11.100
the Terminal User Interface.


00:20:11.100 --> 00:20:13.300
Do you see this animated in our little show notes


00:20:13.300 --> 00:20:14.140
and we'll be in there.


00:20:14.140 --> 00:20:15.600
- It's nice, yeah, it's really cool.


00:20:15.600 --> 00:20:17.680
- Yeah, so let me try to describe it.


00:20:17.680 --> 00:20:19.640
Imagine you've opened, I don't know,


00:20:19.640 --> 00:20:22.600
Emacs or something like that,


00:20:22.600 --> 00:20:26.440
But the top part of it shows the process information,


00:20:26.440 --> 00:20:29.040
the CPU it's using, the memory it's using,


00:20:29.040 --> 00:20:32.360
how long it's been running, and then a graph,


00:20:32.360 --> 00:20:35.120
an active, like interactive flowing graph


00:20:35.120 --> 00:20:38.600
across the top of like the performance analysis.


00:20:38.600 --> 00:20:40.840
And then it has something that's a little bit like top,


00:20:40.840 --> 00:20:43.940
maybe, showing you like what it's currently running,


00:20:43.940 --> 00:20:46.160
how much time it's using,


00:20:46.160 --> 00:20:49.320
is this time being spent on a sub-function call?


00:20:49.320 --> 00:20:51.840
Like did I call a thing that called request


00:20:51.840 --> 00:20:53.840
that is talking to the network and that's why it's slow


00:20:53.840 --> 00:20:55.480
'cause we're waiting on the internet


00:20:55.480 --> 00:20:57.720
or is it actually computationally my stuff


00:20:57.720 --> 00:20:59.960
running in Python or whatever, right?


00:20:59.960 --> 00:21:00.800
So what do you think?


00:21:00.800 --> 00:21:01.620
That's cool, huh?


00:21:01.620 --> 00:21:04.160
- Yeah, that bottom part reminds me of the thing


00:21:04.160 --> 00:21:06.400
that you put the process explorer on Windows


00:21:06.400 --> 00:21:08.840
where you can look at all of the, all your processes.


00:21:08.840 --> 00:21:10.360
- Yeah, a little bit like task manager,


00:21:10.360 --> 00:21:12.440
but it's actually for like your functions


00:21:12.440 --> 00:21:13.680
instead of other processes.


00:21:13.680 --> 00:21:15.440
- Yeah, yeah, it's nice.


00:21:15.440 --> 00:21:16.260
- That's cool.


00:21:16.260 --> 00:21:19.000
So that's the TUI, which is gonna be a popular one,


00:21:19.000 --> 00:21:20.820
but you may also wanna be on the web.


00:21:20.820 --> 00:21:24.820
So there's Web Austin, which is another example of making this for the web.


00:21:24.820 --> 00:21:29.260
So you basically can log in to wherever you're running it, connect to it.


00:21:29.260 --> 00:21:31.040
And it has a D3 flame graph.


00:21:31.040 --> 00:21:34.320
That's like animated of what your web app or whatever process you're


00:21:34.320 --> 00:21:36.640
watching on that remote system is up to.


00:21:36.640 --> 00:21:40.220
So it's kind of the same thing, but like more visual or graphical, like


00:21:40.220 --> 00:21:42.900
the flame flame graph is there and whatnot.


00:21:42.900 --> 00:21:44.940
So that's pretty cool.


00:21:44.940 --> 00:21:48.340
People can check that one out and you can even pause it and whatnot.


00:21:48.680 --> 00:21:52.760
Then finally, there's this other format called SpeedScope,


00:21:52.760 --> 00:21:55.840
which can be visualized in other tools.


00:21:55.840 --> 00:21:58.680
And you can convert Austin output


00:21:58.680 --> 00:22:01.640
into the SpeedScope JSON format.


00:22:01.640 --> 00:22:04.120
And there's a sample for that in the repo.


00:22:04.120 --> 00:22:05.120
If you go look at that,


00:22:05.120 --> 00:22:07.600
you can load it into the SpeedScope visualizer


00:22:07.600 --> 00:22:09.800
type of things and have another way to view the data.


00:22:09.800 --> 00:22:11.160
So this is really nice


00:22:11.160 --> 00:22:13.080
because so many of these profilers are like,


00:22:13.080 --> 00:22:14.800
we collected all this information.


00:22:14.800 --> 00:22:17.760
How would you like it as a CSV?


00:22:17.760 --> 00:22:21.720
or how would you like it as just like random columns


00:22:21.720 --> 00:22:22.680
in a terminal?


00:22:22.680 --> 00:22:26.520
And this is so much, like, I would not like it that way.


00:22:26.520 --> 00:22:28.040
I really like the visualization


00:22:28.040 --> 00:22:31.000
because it's one thing to gather the information.


00:22:31.000 --> 00:22:34.040
It's another to go, oh, I see right there


00:22:34.040 --> 00:22:35.960
is actually where it's slow.


00:22:35.960 --> 00:22:38.760
And if it's, there's just a dump of a bunch of numbers.


00:22:38.760 --> 00:22:40.720
I mean, yeah, you can like sort it and whatnot.


00:22:40.720 --> 00:22:43.520
And it, you can use C profile with different sorting options


00:22:43.520 --> 00:22:46.040
and get it to mean stuff, but it's not the same as like,


00:22:46.040 --> 00:22:47.120
aha, there's the picture.


00:22:47.120 --> 00:22:49.200
I see it's red right there and it's really tall.


00:22:49.200 --> 00:22:50.040
Let's go figure that out.


00:22:50.040 --> 00:22:53.400
- Yeah, and the web one, the logo's awesome.


00:22:53.400 --> 00:22:54.240
It's good.


00:22:54.240 --> 00:22:55.200
- It is really good.


00:22:55.200 --> 00:22:56.920
- Yeah, it's like a '70s thing.


00:22:56.920 --> 00:23:00.920
- It reminds me of Austin Powers a little bit, right?


00:23:00.920 --> 00:23:01.960
- Yep.


00:23:01.960 --> 00:23:04.440
- In a non-copyright infringing way.


00:23:04.440 --> 00:23:06.040
(laughing)


00:23:06.040 --> 00:23:06.880
Anyway, that's it.


00:23:06.880 --> 00:23:08.560
If people are looking for a profiler,


00:23:08.560 --> 00:23:10.360
Austin looks pretty cool.


00:23:10.360 --> 00:23:11.200
Check it out.


00:23:11.200 --> 00:23:12.040
- Definitely.


00:23:12.040 --> 00:23:13.920
- It's definitely one of the contenders.


00:23:13.920 --> 00:23:14.920
Anthony, for sending that in.


00:23:14.920 --> 00:23:16.320
- I wanna talk about numbers.


00:23:16.320 --> 00:23:17.680
Does this fit in the screen?


00:23:17.680 --> 00:23:20.040
- Oh yeah, you got your mathematician hat on now.


00:23:20.040 --> 00:23:21.600
Or your wizard hat, I can't decide.


00:23:21.600 --> 00:23:25.400
- I got this from, man, he writes too great of stuff.


00:23:25.400 --> 00:23:27.520
First name Mosh, last name Zadka?


00:23:27.520 --> 00:23:28.720
Zadka?


00:23:28.720 --> 00:23:30.760
Mosh, you gotta contact me and find out,


00:23:30.760 --> 00:23:32.500
tell me how to pronounce your name.


00:23:32.500 --> 00:23:35.600
But numbers in Python, really great article.


00:23:35.600 --> 00:23:37.000
In Python, you don't really have to think


00:23:37.000 --> 00:23:37.960
about numbers too much.


00:23:37.960 --> 00:23:39.200
They just sort of work.


00:23:39.200 --> 00:23:41.240
But you do kind of need to think about them.


00:23:41.240 --> 00:23:43.840
And this article's a really good, quick tutorial


00:23:43.840 --> 00:23:46.280
about the different things that you need to know.


00:23:46.280 --> 00:23:49.280
Like integers, they turn into floats really easily.


00:23:49.280 --> 00:23:52.880
Like any time there's a division, it'll turn into a float.


00:23:52.880 --> 00:23:57.680
Right, which is unlike other languages which are like truncating sort of things, right?


00:23:57.680 --> 00:24:00.980
That basically take the floor of whatever the result would be.


00:24:00.980 --> 00:24:04.780
Yeah, in earlier Python versions, 2.7 like that?


00:24:04.780 --> 00:24:05.580
Yeah, yeah.


00:24:05.580 --> 00:24:06.880
Like truncated off.


00:24:06.880 --> 00:24:11.080
Right, if you want that old type, now you got to double divide, like the two slashes.


00:24:11.080 --> 00:24:13.580
Yeah, and I forget about the two slashes thing.


00:24:13.580 --> 00:24:15.880
Yeah, I never use the two slashes because that seems wrong.


00:24:15.880 --> 00:24:17.880
[laughs]


00:24:17.880 --> 00:24:20.880
Anyway, so the implications are weird though.


00:24:20.880 --> 00:24:24.380
The other thing, okay, so you got integers, they turn into floats if you divide them.


00:24:24.380 --> 00:24:27.880
You got floats, which are things with decimal points in them.


00:24:27.880 --> 00:24:30.380
They're not the only things with decimal points in them though.


00:24:30.380 --> 00:24:35.380
One of the things you learn early on in programming, but some people are new to programming,


00:24:35.380 --> 00:24:37.880
or numbers, so it's a good thing to remember,


00:24:37.880 --> 00:24:41.380
is floats don't behave like floating point numbers in math.


00:24:41.380 --> 00:24:44.880
Like, the subtraction and addition are not inverses.


00:24:44.880 --> 00:24:47.880
and addition is not associative always.


00:24:47.880 --> 00:24:51.380
And you can't multiply and then divide and get the same number.


00:24:51.380 --> 00:24:53.380
Those are weird things you should be aware of.


00:24:53.380 --> 00:24:57.880
The normal thing that I mostly need to remember is


00:24:57.880 --> 00:25:02.380
don't try to compare floating point numbers with the double equals.


00:25:02.380 --> 00:25:04.880
You have to use something like approximate or something.


00:25:04.880 --> 00:25:07.380
Yeah, that's the one that can really catch people out.


00:25:07.380 --> 00:25:13.880
I mean, okay, so I thought I was going to get 14 and I got 13.999999997... 8?


00:25:13.880 --> 00:25:18.100
Okay, well, it's computers, we know that stuff's truncated,


00:25:18.100 --> 00:25:19.740
but it's really easy to go,


00:25:19.740 --> 00:25:23.700
if X equals some number I'm looking for,


00:25:23.700 --> 00:25:25.460
and that never ever happens, right?


00:25:25.460 --> 00:25:27.100
- Yeah. - It looks right,


00:25:27.100 --> 00:25:30.380
and it is so wrong, and I think just our training


00:25:30.380 --> 00:25:33.440
for so many years in theoretical mathematics


00:25:33.440 --> 00:25:36.700
means that it's hard to look at that and go, that's wrong.


00:25:36.700 --> 00:25:37.660
(laughing)


00:25:37.660 --> 00:25:40.700
- Yeah, well, it's interesting that when you see it


00:25:40.700 --> 00:25:42.300
in numbers, you can, like for instance,


00:25:42.300 --> 00:25:46.320
One of the examples is one plus two minus two minus one


00:25:46.320 --> 00:25:47.960
is zero, obviously.


00:25:47.960 --> 00:25:48.800
- Of course it is.


00:25:48.800 --> 00:25:51.120
- If it's floating point numbers though.


00:25:51.120 --> 00:25:53.280
So floats don't end up with zero.


00:25:53.280 --> 00:25:57.080
You end up with a very small number, but it's not zero.


00:25:57.080 --> 00:25:59.360
Okay, so floats are weird, be careful.


00:25:59.360 --> 00:26:01.520
Fractions, so if you don't wanna use floats,


00:26:01.520 --> 00:26:02.360
there's fractions.


00:26:02.360 --> 00:26:03.640
Python has built-in fractions.


00:26:03.640 --> 00:26:06.220
I actually have never really used these.


00:26:06.220 --> 00:26:07.800
It's neat, they're there.


00:26:07.800 --> 00:26:09.720
- I've never used them either, but yeah,


00:26:09.720 --> 00:26:12.600
there's like a class called fraction with a numerator


00:26:12.600 --> 00:26:14.680
and a denominator or it takes another fraction


00:26:14.680 --> 00:26:17.680
or a floating point, even takes a string.


00:26:17.680 --> 00:26:18.520
How about that?


00:26:18.520 --> 00:26:21.120
- The warning in this article is they,


00:26:21.120 --> 00:26:24.560
fractions take a lot longer than you expect they would


00:26:24.560 --> 00:26:25.840
for algorithms.


00:26:25.840 --> 00:26:28.680
So you can represent things as fractions.


00:26:28.680 --> 00:26:30.040
It's cool that you can do that.


00:26:30.040 --> 00:26:32.680
Be very careful with any sort of algorithm


00:26:32.680 --> 00:26:36.840
because it can explode in memory and size and time


00:26:36.840 --> 00:26:37.760
and stuff like that.


00:26:37.760 --> 00:26:39.320
So probably use floating point.


00:26:39.320 --> 00:26:40.160
- That doesn't surprise me,


00:26:40.160 --> 00:26:44.360
because when I have to do like fraction algorithms,


00:26:44.360 --> 00:26:47.040
in my mind, it takes a lot longer too, so.


00:26:47.040 --> 00:26:49.320
- Yeah, the last one that is,


00:26:49.320 --> 00:26:51.200
which he talks about and it's something


00:26:51.200 --> 00:26:53.120
that some people don't realize right away


00:26:53.120 --> 00:26:54.880
is the decimals are built in.


00:26:54.880 --> 00:26:56.840
So there's a decimals library


00:26:56.840 --> 00:26:58.920
that it's not probably not surprising.


00:26:58.920 --> 00:27:00.000
One of the reasons it's in there


00:27:00.000 --> 00:27:01.760
is for financial transactions.


00:27:01.760 --> 00:27:04.360
They're set up to be correct with precision


00:27:04.360 --> 00:27:05.260
and do the right thing.


00:27:05.260 --> 00:27:07.040
And so I'm really glad it's there,


00:27:07.040 --> 00:27:09.640
Otherwise we'd have like competing decimal


00:27:09.640 --> 00:27:11.320
third-party libraries or something like that.


00:27:11.320 --> 00:27:14.720
We probably do, but this one's built in.


00:27:14.720 --> 00:27:15.940
I'm glad the article was written though


00:27:15.940 --> 00:27:18.400
because something weird about decimals


00:27:18.400 --> 00:27:20.520
that I didn't know about was


00:27:20.520 --> 00:27:24.880
there's a global state variable called context


00:27:24.880 --> 00:27:27.880
that holds the precision that's being used


00:27:27.880 --> 00:27:30.980
for decimal like division and stuff.


00:27:30.980 --> 00:27:33.080
It could be anywhere in your program


00:27:33.080 --> 00:27:35.500
that the precision gets changed.


00:27:35.500 --> 00:27:39.380
So the recommendation in this article is to use a local context.


00:27:39.380 --> 00:27:43.740
So you can do a, those blocks, context, what are those things called?


00:27:43.740 --> 00:27:44.580
I always forget.


00:27:44.580 --> 00:27:45.500
Uh, context manager.


00:27:45.500 --> 00:27:46.820
Context manager.


00:27:46.820 --> 00:27:47.100
Yep.


00:27:47.100 --> 00:27:52.420
You can use the context manager, local context to set a local context


00:27:52.420 --> 00:27:54.860
precision or your arithmetic.


00:27:54.860 --> 00:27:55.860
So that's good.


00:27:55.860 --> 00:27:59.820
That seems like that should be the required way because just setting it


00:27:59.820 --> 00:28:02.660
globally seems really, I don't know.


00:28:02.660 --> 00:28:06.740
It seems wrong because, you know, think of the race condition there.


00:28:06.740 --> 00:28:10.520
I was doing math and then the precision got cut in half and then it


00:28:10.520 --> 00:28:11.960
wasn't what I expected anymore.


00:28:11.960 --> 00:28:14.220
Yeah.


00:28:14.220 --> 00:28:17.140
Or, or I dunno, maybe there should be a minimum precision.


00:28:17.140 --> 00:28:18.080
This is interesting though.


00:28:18.080 --> 00:28:21.820
Like I didn't realize that you could even change the precision of decimals.


00:28:21.820 --> 00:28:26.220
So like in the docs, it says unlike hardware based binary floating point


00:28:26.220 --> 00:28:30.940
numbers, the decimal module has a user alterable precision defaulting to 28


00:28:30.940 --> 00:28:34.740
places, which can be as large as needed for a given problem.


00:28:34.740 --> 00:28:36.100
So yeah, you can change it.


00:28:36.100 --> 00:28:40.700
The example in the, in the Python document on the docs show, she's


00:28:40.700 --> 00:28:44.660
globally changing it halfway through a calculation, which seems like a bad.


00:28:44.660 --> 00:28:47.740
Let's kick them down the stairs instead of teaching them to hold on to the hand


00:28:47.740 --> 00:28:49.700
railing, but this is really cool.


00:28:49.700 --> 00:28:52.300
Like this local context, change it.


00:28:52.300 --> 00:28:53.420
You can set it really high.


00:28:53.420 --> 00:28:54.140
That's cool.


00:28:54.140 --> 00:28:56.940
I had no idea that you could actually change that to grow as you


00:28:56.940 --> 00:28:57.780
needed them, which is cool.


00:28:57.780 --> 00:28:58.060
Yeah.


00:28:58.060 --> 00:29:00.180
- I guess you could still use the global context


00:29:00.180 --> 00:29:02.340
as long as you, maybe this isn't safe,


00:29:02.340 --> 00:29:04.780
but as long as you always remember to set it


00:29:04.780 --> 00:29:07.980
before you do decimal arithmetic.


00:29:07.980 --> 00:29:09.740
- It's safe as long as you're not doing threading.


00:29:09.740 --> 00:29:11.340
- Oh yeah, okay.


00:29:11.340 --> 00:29:12.420
- Yeah, 'cause what if somebody,


00:29:12.420 --> 00:29:15.220
some other thread has the same idea and changes it?


00:29:15.220 --> 00:29:16.900
I think the idea is maybe,


00:29:16.900 --> 00:29:18.740
it seems to me like possibly it would be better


00:29:18.740 --> 00:29:21.100
if once set, it couldn't be set again.


00:29:21.100 --> 00:29:23.360
Like you could set it at the beginning of your program,


00:29:23.360 --> 00:29:25.940
but it couldn't be altered and altered and altered.


00:29:25.940 --> 00:29:29.740
Like, right, something along those lines, like, okay, we set it, we're done.


00:29:29.740 --> 00:29:32.780
It's an exception if you try to set it again to something else and so on.


00:29:32.780 --> 00:29:33.280
I don't know.


00:29:33.280 --> 00:29:35.280
>> I mean, it probably is a convenience.


00:29:35.280 --> 00:29:37.260
>> Yeah, this is a whole world I didn't even know about.


00:29:37.260 --> 00:29:37.900
This is cool.


00:29:37.900 --> 00:29:41.060
>> Yeah, I would probably set up some sort of like hook or something to make sure


00:29:41.060 --> 00:29:43.980
that you're only setting it one place if you're doing that.


00:29:43.980 --> 00:29:44.820
I don't know.


00:29:44.820 --> 00:29:46.460
>> Yeah, sounds good to me.


00:29:46.460 --> 00:29:50.060
Cool, anyway, yeah, this is actually more interesting than I thought because,


00:29:50.060 --> 00:29:52.060
like, as usual, I've learned something, which is cool.


00:29:52.060 --> 00:29:55.460
>> Last thing on this, we're going to link to the standard library documentation for


00:29:55.460 --> 00:29:59.300
fractions and decimals because you may not have heard of them. And then a very


00:29:59.300 --> 00:30:03.500
old article that if you really care about floating-point numbers you should


00:30:03.500 --> 00:30:06.700
at least know this article exists. Although I don't think I've actually


00:30:06.700 --> 00:30:10.740
gotten through the whole thing ever. But it's what every computer scientist


00:30:10.740 --> 00:30:13.940
should know about floating-point arithmetic. That's a good article.


00:30:13.940 --> 00:30:18.780
Yeah. Cool. All right. Any extras for us today, Michael? You know, not too much. I


00:30:18.780 --> 00:30:22.740
don't have too much to share right now. Nothing personal. But I do want to say


00:30:22.740 --> 00:30:26.820
thank you to everyone who subscribed to the YouTube feed of this podcast.


00:30:26.820 --> 00:30:29.540
Because we're breaking every segment.


00:30:29.540 --> 00:30:30.780
We've just covered six things.


00:30:30.780 --> 00:30:35.240
We're breaking that into six different videos and you can see us on video,


00:30:35.240 --> 00:30:35.820
which is kind of cool.


00:30:35.820 --> 00:30:39.160
A bunch of people are subscribing at pythonbytes.fm/youtube.


00:30:39.160 --> 00:30:43.080
You all can check that out and you will see that Brian has awesome hats for every


00:30:43.080 --> 00:30:43.420
segment.


00:30:43.420 --> 00:30:48.500
Well, at least this episode, this episode, which, yeah, you got to wait.


00:30:48.500 --> 00:30:49.180
Yeah, for sure.


00:30:49.180 --> 00:30:49.840
This episode.


00:30:49.840 --> 00:30:52.080
So eventually you'll get to see the hats.


00:30:52.080 --> 00:30:52.460
Okay.


00:30:52.460 --> 00:30:53.940
- Yeah, I'm glad we mentioned that.


00:30:53.940 --> 00:30:58.940
I wanted to mention also that Python 3.9.0 alpha six


00:30:58.940 --> 00:31:02.900
is the last alpha release before we go into betas,


00:31:02.900 --> 00:31:07.540
I believe, and it is available and it has the PEG parser


00:31:07.540 --> 00:31:11.060
that we talked with, I think last week about a little bit.


00:31:11.060 --> 00:31:12.980
- Yeah, yeah, Guido was here and talked about


00:31:12.980 --> 00:31:15.140
that was really cool, the work he's been doing there.


00:31:15.140 --> 00:31:18.200
That's a big long-term upgrade, right?


00:31:18.200 --> 00:31:20.460
That's something that got written


00:31:20.460 --> 00:31:21.860
in the original version of Python.


00:31:21.860 --> 00:31:24.580
was unchanged and obviously can be better, right?


00:31:24.580 --> 00:31:27.660
Basically the syntax was limited by the parser


00:31:27.660 --> 00:31:29.320
and how much it like looked ahead and stuff.


00:31:29.320 --> 00:31:31.220
And so this should open up the language


00:31:31.220 --> 00:31:33.700
for more complex concepts


00:31:33.700 --> 00:31:36.100
or make it easier to add concepts to it.


00:31:36.100 --> 00:31:38.460
All right, so I see we have some competing jokes here.


00:31:38.460 --> 00:31:39.380
You wanna go first?


00:31:39.380 --> 00:31:41.380
- Yeah, I just put a call out on Twitter


00:31:41.380 --> 00:31:42.620
and said I need some more jokes


00:31:42.620 --> 00:31:45.660
and boy, I got a whole bunch of great ones back.


00:31:45.660 --> 00:31:46.500
I'm gonna pick one.


00:31:46.500 --> 00:31:48.060
This one's from James Abel.


00:31:48.060 --> 00:31:51.020
If you put a thousand monkeys at a thousand computers,


00:31:51.020 --> 00:31:53.660
eventually one will write a Python program


00:31:53.660 --> 00:31:55.300
and the rest will write Perl.


00:31:55.300 --> 00:31:56.460
(laughing)


00:31:56.460 --> 00:31:57.460
- That's right.


00:31:57.460 --> 00:32:00.500
I think maybe like 950 of them will write Perl.


00:32:00.500 --> 00:32:01.940
A couple of them are just gonna be writing


00:32:01.940 --> 00:32:04.660
regular expressions, like all on their own.


00:32:04.660 --> 00:32:06.120
- Yeah, that's true.


00:32:06.120 --> 00:32:09.800
- All right, I have one that's maybe in a similar vein here.


00:32:09.800 --> 00:32:11.980
So, you know, like we talked about Austin,


00:32:11.980 --> 00:32:13.620
it has all these different user interfaces


00:32:13.620 --> 00:32:15.400
and it's very user-friendly.


00:32:15.400 --> 00:32:19.640
Well, you could say that Unix is very user-friendly as well.


00:32:19.640 --> 00:32:22.280
It's just very particular about who its friends are.


00:32:22.280 --> 00:32:24.760
(laughing)


00:32:24.760 --> 00:32:26.320
- Yeah, I got friends like that.


00:32:26.320 --> 00:32:27.160
- Yeah.


00:32:27.160 --> 00:32:27.980
(laughing)


00:32:27.980 --> 00:32:29.440
I got that one from the Pyjoke package,


00:32:29.440 --> 00:32:31.880
so pip install pyjoke and you can have it too.


00:32:31.880 --> 00:32:33.520
- Yeah, that's good.


00:32:33.520 --> 00:32:35.160
Yeah, anyway, cool, thanks.


00:32:35.160 --> 00:32:37.200
- All right, fun as always.


00:32:37.200 --> 00:32:38.040
Great to be here with you.


00:32:38.040 --> 00:32:38.860
- Bye. - Bye.


00:32:38.860 --> 00:32:40.360
- Thank you for listening to Python Bytes.


00:32:40.360 --> 00:32:42.820
Follow the show on Twitter @pythonbytes.


00:32:42.820 --> 00:32:45.920
That's Python Bytes as in B-Y-T-E-S.


00:32:45.920 --> 00:32:48.800
And get the full show notes at pythonbytes.fm.


00:32:48.800 --> 00:32:51.000
If you have a news item you want featured,


00:32:51.000 --> 00:32:53.760
just visit pythonbytes.fm and send it our way.


00:32:53.760 --> 00:32:55.880
We're always on the lookout for sharing something cool.


00:32:55.880 --> 00:32:56.960
This is Brian Okken,


00:32:56.960 --> 00:32:59.060
and on behalf of myself and Michael Kennedy,


00:32:59.060 --> 00:33:01.160
thank you for listening and sharing this podcast


00:33:01.160 --> 00:33:02.800
with your friends and colleagues.

