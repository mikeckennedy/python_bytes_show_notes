
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.360
to you by us over at TalkBython Training, and Brian through his pytest book.


00:00:10.360 --> 00:00:15.460
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.460 --> 00:00:21.040
over at TalkBython Training, visit them via pythonbytes.fm/courses.


00:00:21.040 --> 00:00:25.420
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.420 --> 00:00:28.440
at pythonbytes.fm/pytest.


00:00:28.440 --> 00:00:29.440
Enjoy the episode.


00:00:29.440 --> 00:00:31.160
- Hello and welcome to Python Bytes,


00:00:31.160 --> 00:00:33.440
where we deliver Python news and headlines


00:00:33.440 --> 00:00:34.760
directly to your earbuds.


00:00:34.760 --> 00:00:39.760
This is episode 265, recorded January 5th, 2022.


00:00:39.760 --> 00:00:41.480
I'm Brian Okken.


00:00:41.480 --> 00:00:42.680
- I'm Michael Kennedy.


00:00:42.680 --> 00:00:43.800
- And I'm Matt Kramer.


00:00:43.800 --> 00:00:45.280
- Matt, welcome to the show.


00:00:45.280 --> 00:00:47.080
- Thanks, happy to be here.


00:00:47.080 --> 00:00:47.960
- Yeah, welcome Matt.


00:00:47.960 --> 00:00:48.800
- Who are you?


00:00:48.800 --> 00:00:52.600
- Oh, so a huge fan, I've listened to every episode.


00:00:52.600 --> 00:00:54.200
I actually, I'm one of these folks


00:00:54.200 --> 00:00:56.760
that started their career outside of software.


00:00:56.760 --> 00:00:59.520
I've heard a similar parallel story a bunch of times


00:00:59.520 --> 00:01:00.360
in the past.


00:01:00.360 --> 00:01:02.960
So I have my degree actually in Naval Architecture


00:01:02.960 --> 00:01:05.400
and Marine Engineering, which is design of ships


00:01:05.400 --> 00:01:07.440
and offshore structures.


00:01:07.440 --> 00:01:10.080
In grad school, I started with MATLAB,


00:01:10.080 --> 00:01:12.600
picked up Python, thanks to a professor,


00:01:12.600 --> 00:01:15.360
and then over time, that's just grown and grown.


00:01:15.360 --> 00:01:17.680
Spent eight years in the oil and gas industry,


00:01:17.680 --> 00:01:21.320
and using Python mostly for doing engineering analysis,


00:01:21.320 --> 00:01:25.840
a lot of digital type stuff, IOT type monitoring work,


00:01:25.840 --> 00:01:28.520
And about three months ago, I joined Anaconda


00:01:28.520 --> 00:01:30.360
as a software engineer, and I'm working


00:01:30.360 --> 00:01:33.920
on our Nucleus cloud platform as a backend software.


00:01:33.920 --> 00:01:34.760
- Very cool.


00:01:34.760 --> 00:01:36.720
- Awesome, yeah, congrats on the new job as well.


00:01:36.720 --> 00:01:38.960
That's a big change from oil and gas.


00:01:38.960 --> 00:01:39.960
- A couple years.


00:01:39.960 --> 00:01:41.240
- I mean, it is in Texas and all,


00:01:41.240 --> 00:01:43.840
but it's still on the tech side.


00:01:43.840 --> 00:01:47.980
- Yeah, no, it's related, but obviously a different focus.


00:01:47.980 --> 00:01:50.020
I wanted to make writing code my job


00:01:50.020 --> 00:01:53.000
rather than the thing I did to get my job done, so.


00:01:53.000 --> 00:01:55.320
- Fantastic, I'm sure you're having a good time.


00:01:55.320 --> 00:01:56.160
- Yeah.


00:01:56.160 --> 00:01:59.240
- Well, Michael, we had some questions for people last week.


00:01:59.240 --> 00:02:00.080
- We did.


00:02:00.080 --> 00:02:02.680
I wanna make our first topic a meta topic.


00:02:02.680 --> 00:02:05.360
And by that, I mean a topic about Python bytes.


00:02:05.360 --> 00:02:06.200
So you're right.


00:02:06.200 --> 00:02:10.400
We discussed whether the format,


00:02:10.400 --> 00:02:12.880
which is sort of, I wouldn't say changed.


00:02:12.880 --> 00:02:16.840
I would rather categorize it as drifted over time.


00:02:16.840 --> 00:02:19.180
It's sort of drifted to adding this little thing


00:02:19.180 --> 00:02:20.320
and do that different thing.


00:02:20.320 --> 00:02:21.240
And we just said, "Hey, everyone,


00:02:21.240 --> 00:02:22.360
"do you still like this format?"


00:02:22.360 --> 00:02:24.120
It's not exactly what we started with,


00:02:24.120 --> 00:02:25.120
but it's where we are.


00:02:25.120 --> 00:02:26.460
So we asked some questions.


00:02:26.460 --> 00:02:28.320
The first question I asked,


00:02:28.320 --> 00:02:30.180
which I have an interesting followup at the end here,


00:02:30.180 --> 00:02:34.320
by the way, is, is Python bytes too long at 45 minutes?


00:02:34.320 --> 00:02:37.120
That's roughly the time that we're going these days,


00:02:37.120 --> 00:02:38.440
probably about 45 minutes.


00:02:38.440 --> 00:02:42.000
And so I would say, gotta do the quick math here,


00:02:42.000 --> 00:02:46.480
I would say 70, 65%, let's say 65% are like, no, it's good.


00:02:46.480 --> 00:02:48.640
With a third of that being like, are you kidding me?


00:02:48.640 --> 00:02:49.480
It could go way longer.


00:02:49.480 --> 00:02:51.200
I'm not sure we wanna go way longer,


00:02:51.200 --> 00:02:53.120
but there are definitely a couple of people that think,


00:02:53.120 --> 00:02:54.560
yeah, it's getting a little bit long.


00:02:54.560 --> 00:02:57.640
So I would say probably 12% of people said it's too long.


00:02:57.640 --> 00:03:01.520
So I feel like it's actually kind of a decent length.


00:03:01.520 --> 00:03:03.280
And one of the things I thought,


00:03:03.280 --> 00:03:05.680
it's like as we've changed this format,


00:03:05.680 --> 00:03:07.000
we've added things on, right?


00:03:07.000 --> 00:03:09.560
We added the joke that we started always doing at the end.


00:03:09.560 --> 00:03:11.960
We added our extra, extra, extra stuff.


00:03:11.960 --> 00:03:14.400
But the original format was the six items.


00:03:14.400 --> 00:03:15.840
You covered three, I covered three.


00:03:15.840 --> 00:03:16.660
Now it's two, two,


00:03:16.660 --> 00:03:18.280
and we got Matt here to help out with that.


00:03:18.280 --> 00:03:20.960
So what is the length of that?


00:03:20.960 --> 00:03:22.720
And it turns out that that's pretty much


00:03:22.720 --> 00:03:24.120
the same length still.


00:03:24.120 --> 00:03:26.920
So the last episodes, 39 minutes, 32 minutes,


00:03:26.920 --> 00:03:28.260
35 minutes, 33 minutes.


00:03:28.260 --> 00:03:31.320
That's how long our main segments up to the end of the minute.


00:03:31.320 --> 00:03:33.300
So it's kind of like, for people who feel it's too long,


00:03:33.300 --> 00:03:36.280
I want to just sort of say, feel free to just delete it.


00:03:36.280 --> 00:03:38.400
Like you hear the six items, delete it at that point.


00:03:38.400 --> 00:03:40.660
If you don't want to hear us ramble about other things


00:03:40.660 --> 00:03:41.720
that are not pure Python,


00:03:41.720 --> 00:03:43.160
you don't want to hear us talk about the joke


00:03:43.160 --> 00:03:45.080
or tell jokes, no problem.


00:03:45.080 --> 00:03:46.680
- Yeah, stop.


00:03:46.680 --> 00:03:48.920
- Stop, it's at the end for a reason.


00:03:48.920 --> 00:03:50.760
So if you're kind of like, all right, I'm kind of done,


00:03:50.760 --> 00:03:53.120
then be done, that's totally good.


00:03:53.120 --> 00:03:55.560
we'll put the important stuff up first.


00:03:55.560 --> 00:03:59.440
The other one was, do you like us having a third coast


00:03:59.440 --> 00:04:03.520
like Matt or Shell or whoever it is we've had on recently?


00:04:03.520 --> 00:04:06.080
And most people love that format or, you know.


00:04:06.080 --> 00:04:07.080
- Or at least it's okay.


00:04:07.080 --> 00:04:08.200
- It's okay, so that's like,


00:04:08.200 --> 00:04:09.640
I think that that's pretty good.


00:04:09.640 --> 00:04:12.380
I do wanna read out just a couple of comments as well.


00:04:12.380 --> 00:04:14.200
There's stuff that you always get


00:04:14.200 --> 00:04:15.880
that like you just can't balance it.


00:04:15.880 --> 00:04:17.120
A couple of people are saying like,


00:04:17.120 --> 00:04:18.720
you just gotta drop the joke, like don't do that.


00:04:18.720 --> 00:04:20.240
The other people are like, the joke is the best,


00:04:20.240 --> 00:04:21.720
who doesn't wanna stay for that?


00:04:21.720 --> 00:04:24.560
So, you know, like, well, again, it's at the end.


00:04:24.560 --> 00:04:26.440
So you can do that.


00:04:26.440 --> 00:04:28.880
But I also just wanted to say thank you to everybody.


00:04:28.880 --> 00:04:31.760
They wrote a ton of nice comments to you and me


00:04:31.760 --> 00:04:34.140
at the end of that Google forum.


00:04:34.140 --> 00:04:37.680
So one is, "I can't tell what counts as an extra or normal,


00:04:37.680 --> 00:04:39.260
"but it's fine, I love it.


00:04:39.260 --> 00:04:40.940
"My Dumb Bites is such an excellent show.


00:04:40.940 --> 00:04:43.120
"Fun way to keep current.


00:04:43.120 --> 00:04:44.880
"Brian is awesome."


00:04:44.880 --> 00:04:47.280
- Oh, good, I asked my daughter to submit that.


00:04:47.280 --> 00:04:48.480
(laughing)


00:04:48.480 --> 00:04:49.320
- She did good.


00:04:49.320 --> 00:04:52.440
I think your third guest, having a third guest is great.


00:04:52.440 --> 00:04:55.440
Like I said, drop the jokes, keep the jokes for sure, ideal.


00:04:55.440 --> 00:04:58.840
So anyway, there's a bunch of nice comments.


00:04:58.840 --> 00:05:00.840
I think the other thing that I would like


00:05:00.840 --> 00:05:03.820
to just speak to real quick and get your thoughts on,


00:05:03.820 --> 00:05:05.280
and maybe you as well, Matt,


00:05:05.280 --> 00:05:07.560
'cause you've been on the receiving end of this a lot,


00:05:07.560 --> 00:05:09.840
is us having the live audience, right?


00:05:09.840 --> 00:05:12.920
I think having a live audience is really interesting.


00:05:12.920 --> 00:05:14.800
I also wanna just acknowledge,


00:05:14.800 --> 00:05:18.700
we knew that that would be a slight drift of format, right?


00:05:18.700 --> 00:05:19.940
So if you're listening in the car


00:05:19.940 --> 00:05:21.500
and there's a live audience comment,


00:05:21.500 --> 00:05:23.860
it's kind of like, well, but I'm not listening to it live.


00:05:23.860 --> 00:05:25.460
That's kind of different.


00:05:25.460 --> 00:05:27.060
But I think it's really valuable.


00:05:27.060 --> 00:05:29.620
One time we had four, maybe four,


00:05:29.620 --> 00:05:32.060
Python core developers commenting on


00:05:32.060 --> 00:05:33.620
the stuff we were covering.


00:05:33.620 --> 00:05:36.220
Like that's a huge value to have people coming


00:05:36.220 --> 00:05:37.780
and sort of feeding that in.


00:05:37.780 --> 00:05:39.980
So for me, personally, I feel like it's,


00:05:39.980 --> 00:05:42.040
yeah, it's a little bit of a blend of formats,


00:05:42.040 --> 00:05:44.740
but I think having the feedback from the audience,


00:05:44.740 --> 00:05:46.100
especially when people are involved


00:05:46.100 --> 00:05:48.020
in what we're talking about, I think that's worth it.


00:05:48.020 --> 00:05:48.860
Brian, what do you think?


00:05:48.860 --> 00:05:53.300
- Well, we try not to let it interrupt the flow too much,


00:05:53.300 --> 00:05:54.780
but there's some great stuff.


00:05:54.780 --> 00:05:58.300
Like if somebody, if we say something that's just wrong,


00:05:58.300 --> 00:06:01.440
somebody will correct us and that's nice.


00:06:01.440 --> 00:06:05.840
The other thing is sometimes somebody has a great question


00:06:05.840 --> 00:06:08.920
on a topic that like we should have talked about,


00:06:08.920 --> 00:06:10.420
but we didn't.


00:06:10.420 --> 00:06:11.260
- We didn't, right.


00:06:11.260 --> 00:06:12.140
We don't know everything.


00:06:12.140 --> 00:06:13.300
We certainly don't.


00:06:13.300 --> 00:06:16.000
So I do want to add one more thing.


00:06:17.780 --> 00:06:22.140
There was a comment like, hey, we as hosts should let the guest speak.


00:06:22.140 --> 00:06:23.540
We should be better interviewers.


00:06:23.540 --> 00:06:24.920
I'm like, this is not an interview format.


00:06:24.920 --> 00:06:27.920
You know, like talk Python is a great interview format.


00:06:27.920 --> 00:06:29.300
Oh, that's where the guest is featured.


00:06:29.300 --> 00:06:32.220
Testing code is a great form interview format where the guest is featured.


00:06:32.220 --> 00:06:34.700
This is sort of just three people chatting.


00:06:34.700 --> 00:06:36.520
It's not really an interview format.


00:06:36.520 --> 00:06:41.660
So, and we always tell the guests to interrupt us and they just, they don't much.


00:06:41.660 --> 00:06:42.240
So yeah.


00:06:42.240 --> 00:06:42.800
Yeah.


00:06:42.800 --> 00:06:45.020
So Matt, what do you think of this live audience aspect?


00:06:45.020 --> 00:06:46.820
Like, do you feel like that's tracks or is it good?


00:06:46.940 --> 00:06:52.140
Well, yeah, first of all, I'm glad that people generally like having a guest.


00:06:52.140 --> 00:06:54.140
Otherwise, this would have been very awkward.


00:06:54.140 --> 00:06:56.140
But no, I do like it.


00:06:56.140 --> 00:06:58.540
Where'd Matt go? Oh, he must have disconnected.


00:06:58.540 --> 00:07:03.040
Occasionally, there is a little bit of a disruption.


00:07:03.040 --> 00:07:05.040
But I think in general, it's been great.


00:07:05.040 --> 00:07:10.240
I've definitely been listening when times when a bunch of people are chiming in.


00:07:10.240 --> 00:07:12.240
Because there's always, as you know,


00:07:12.240 --> 00:07:16.240
you mentioned a GUI library, and then there's about 12 other options that you may not have covered.


00:07:16.240 --> 00:07:17.080
- Exactly.


00:07:17.080 --> 00:07:17.900
- Instead of waiting 12 weeks,


00:07:17.900 --> 00:07:20.100
you could just get them right out.


00:07:20.100 --> 00:07:20.940
So I think that's great.


00:07:20.940 --> 00:07:23.620
And I'm generally an audio listener.


00:07:23.620 --> 00:07:25.060
I listen when I'm walking my dogs,


00:07:25.060 --> 00:07:27.220
but I love having the video


00:07:27.220 --> 00:07:29.620
because when I'm interested in something,


00:07:29.620 --> 00:07:31.460
I can go hop to it right away


00:07:31.460 --> 00:07:32.900
and see what you're showing,


00:07:32.900 --> 00:07:33.980
which I really like.


00:07:33.980 --> 00:07:36.080
- Yeah, awesome, thank you.


00:07:36.080 --> 00:07:37.700
Two other things that came to mind.


00:07:37.700 --> 00:07:39.620
Someone said, "It would be great if there's a way


00:07:39.620 --> 00:07:42.760
where we could submit ideas and stuff like that


00:07:42.760 --> 00:07:44.900
for guests and whatnot."


00:07:44.900 --> 00:07:46.060
- Oh, yeah.


00:07:46.060 --> 00:07:48.900
right here at the top in our menu, it says submit.


00:07:48.900 --> 00:07:51.640
So please reach out to us on Twitter,


00:07:51.640 --> 00:07:53.540
send us an email, do submit it there.


00:07:53.540 --> 00:07:56.280
The other one was if we could have time links,


00:07:56.280 --> 00:08:01.040
like if you go to listen and at some certain time


00:08:01.040 --> 00:08:03.060
a thing is interesting that's mentioned,


00:08:03.060 --> 00:08:05.880
be cool if you could like link at a time.


00:08:05.880 --> 00:08:08.380
If you look in your podcast player, it has chapters


00:08:08.380 --> 00:08:10.940
and each chapter has both a link and a time.


00:08:10.940 --> 00:08:14.540
So like the thing that Brian's gonna talk about next,


00:08:14.540 --> 00:08:18.100
interpreters, if you want to hear about that during that section in your podcast


00:08:18.100 --> 00:08:22.620
player, you can click the chapter title and it will literally navigate you to


00:08:22.620 --> 00:08:22.980
there.


00:08:22.980 --> 00:08:24.380
So it's already built in.


00:08:24.380 --> 00:08:26.940
Just make sure you can see it in your device.


00:08:26.940 --> 00:08:27.420
Yeah.


00:08:27.420 --> 00:08:27.980
All right.


00:08:27.980 --> 00:08:32.620
I think that's it for that one, but yeah, thank you for everybody who had


00:08:32.620 --> 00:08:33.820
comments and took the time.


00:08:33.820 --> 00:08:34.380
Really appreciate it.


00:08:34.380 --> 00:08:34.860
Yeah.


00:08:34.860 --> 00:08:39.060
And just the comment, if you, if you want to be a guest, just email on that


00:08:39.060 --> 00:08:40.500
form and you might be able to do it.


00:08:40.500 --> 00:08:41.780
That's right.


00:08:41.780 --> 00:08:42.380
That's right.


00:08:42.380 --> 00:08:42.900
Yeah.


00:08:42.900 --> 00:08:43.540
Great to have you here.


00:08:43.860 --> 00:08:46.460
- Actually, I didn't want to talk about interpreters.


00:08:46.460 --> 00:08:47.740
- No, that's me.


00:08:47.740 --> 00:08:49.400
- Oh, wait, you're right.


00:08:49.400 --> 00:08:51.620
Well, you're talking about it now because I've changed.


00:08:51.620 --> 00:08:53.020
No, let's talk about Adders.


00:08:53.020 --> 00:08:54.780
Sorry, I saw the wrong screen.


00:08:54.780 --> 00:08:56.420
You should go for it.


00:08:56.420 --> 00:08:58.180
- Apparently we're not professional here,


00:08:58.180 --> 00:08:59.580
but no, it's okay.


00:08:59.580 --> 00:09:02.500
I wanted to talk about Adders.


00:09:02.500 --> 00:09:04.980
We haven't really talked about it much for a while


00:09:04.980 --> 00:09:07.220
because there are lots of reasons,


00:09:07.220 --> 00:09:09.100
but Adders is a great library.


00:09:09.100 --> 00:09:12.020
And it just came out with Adders,


00:09:12.020 --> 00:09:14.940
came out with a release 21.3.0,


00:09:14.940 --> 00:09:16.580
which is why we're talking about it now.


00:09:16.580 --> 00:09:17.780
And there's some documents,


00:09:17.780 --> 00:09:19.020
there's a little bit of change,


00:09:19.020 --> 00:09:21.860
there's some changes and some documentation changes.


00:09:21.860 --> 00:09:24.820
And I really, in an article I wanted to cover.


00:09:24.820 --> 00:09:27.300
So one of the things you'll see right off the bat,


00:09:27.300 --> 00:09:30.820
if you look at the overview page of the Adders site,


00:09:30.820 --> 00:09:35.820
is it's highlighting the define decorator.


00:09:35.820 --> 00:09:37.860
It's a different kind of way


00:09:37.860 --> 00:09:40.780
that if you've used Adders from years ago,


00:09:40.780 --> 00:09:41.980
this is a little different.


00:09:41.980 --> 00:09:46.740
So there was a different way to,


00:09:46.740 --> 00:09:50.500
a different API that was added in the last release.


00:09:50.500 --> 00:09:53.940
And this is, or in one of the previous releases,


00:09:53.940 --> 00:09:55.900
and now that's the preferred way.


00:09:55.900 --> 00:09:58.520
So this is what we're calling modern adders.


00:09:58.520 --> 00:10:02.900
But along with this, I wanted to talk about an article


00:10:02.900 --> 00:10:06.400
that Hinnick wrote about adders.


00:10:06.400 --> 00:10:07.820
And it's a little bit of a history,


00:10:07.820 --> 00:10:09.580
and I really love this discussion.


00:10:09.580 --> 00:10:14.580
So, and I'll try to quickly go through the history.


00:10:14.580 --> 00:10:17.780
Early on, we didn't have data classes, obviously,


00:10:17.780 --> 00:10:19.860
we had, we could handcraft classes,


00:10:19.860 --> 00:10:21.380
but there were problems with it.


00:10:21.380 --> 00:10:24.260
And there was a library called Characteristic,


00:10:24.260 --> 00:10:25.320
which I didn't know about.


00:10:25.320 --> 00:10:29.060
This was before I started looking into things.


00:10:29.060 --> 00:10:32.780
That, and then Glyph and Hennig in 2015,


00:10:32.780 --> 00:10:35.020
were discussing it, ways to change it.


00:10:35.020 --> 00:10:40.020
And that began the old original Adders interface.


00:10:40.020 --> 00:10:44.540
And there were things like Adder.s and Adder.attrib


00:10:44.540 --> 00:10:48.620
that were partly out of the fact that the old way


00:10:48.620 --> 00:10:51.700
of characteristic attribute was a lot of typing.


00:10:51.700 --> 00:10:54.180
So they wanted to do something a little shorter.


00:10:54.180 --> 00:10:57.060
And then it kind of took off.


00:10:57.060 --> 00:10:59.820
Adders was pretty popular for a long time,


00:10:59.820 --> 00:11:02.900
especially fueled by a 2016 article by Glyph


00:11:02.900 --> 00:11:05.680
called the one Python library everyone needs,


00:11:05.680 --> 00:11:09.620
which was a great, this is kind of how I learned about it.


00:11:09.620 --> 00:11:14.480
And then there was a different kind of API


00:11:14.480 --> 00:11:17.000
that we were used to for adders and it was good.


00:11:17.000 --> 00:11:17.880
And everything was great.


00:11:17.880 --> 00:11:22.880
And then in 2017, Guido and Henik and Eric Smith


00:11:22.880 --> 00:11:27.040
talked about in the PyCon 2017,


00:11:27.040 --> 00:11:29.460
they talked about how to make something like that


00:11:29.460 --> 00:11:31.300
in the standard library.


00:11:31.300 --> 00:11:36.200
And that came out of that came PEP 557 and data classes


00:11:36.200 --> 00:11:40.300
and data classes showed up in Python 3.7.


00:11:40.300 --> 00:11:43.360
And then so what then a dark period happened,


00:11:43.360 --> 00:11:45.480
which was people were like,


00:11:45.480 --> 00:11:48.820
why do we need adders anymore if we have data classes?


00:11:48.820 --> 00:11:52.740
Well, that's one of the things I like about this article.


00:11:52.740 --> 00:11:55.860
And then there's an attached article that is called,


00:11:55.860 --> 00:11:56.700
why not?


00:11:56.700 --> 00:12:00.740
Why not data classes instead of adders?


00:12:00.740 --> 00:12:05.700
And this is, it's important to realize


00:12:05.700 --> 00:12:10.460
that data classes have always been a limited set of adders.


00:12:10.460 --> 00:12:13.580
Adders is a super set of functionality.


00:12:13.580 --> 00:12:15.640
And there's a lot of stuff missing in data classes


00:12:15.640 --> 00:12:20.640
like equality customization and validators.


00:12:20.640 --> 00:12:22.900
Validators and converters are very important


00:12:22.900 --> 00:12:24.580
if you're using a lot of these.


00:12:24.580 --> 00:12:27.260
And then also people were like,


00:12:27.260 --> 00:12:31.180
well, data classes, kind of a nicer interface, right?


00:12:31.180 --> 00:12:33.340
Well, not anymore.


00:12:33.340 --> 00:12:37.060
The pound defines pretty, or the at defines really nice.


00:12:37.060 --> 00:12:39.300
This is a really easy interface now to work with.


00:12:39.300 --> 00:12:40.660
So anyway.


00:12:40.660 --> 00:12:41.860
- And it has typing.


00:12:41.860 --> 00:12:43.140
- And it has typing.


00:12:43.140 --> 00:12:45.460
And I'm glad you wrote this


00:12:45.460 --> 00:12:48.340
because I kind of was one of those people of like,


00:12:48.340 --> 00:12:53.540
am I doing something wrong if I'm using data classes?


00:12:53.540 --> 00:12:55.260
Why should I look at adders?


00:12:55.260 --> 00:12:57.820
And one of the things, there's a whole bunch of reasons.


00:12:57.820 --> 00:13:02.020
One of the things that I really like is Adders has slots.


00:13:02.020 --> 00:13:04.780
The slots are on by default.


00:13:04.780 --> 00:13:07.680
So you have, you kind of define your class once


00:13:07.680 --> 00:13:09.980
instead of keeping it growing.


00:13:09.980 --> 00:13:12.760
Whereas the default Python way in data classes


00:13:12.760 --> 00:13:15.280
is to allow classes to grow at runtime,


00:13:15.280 --> 00:13:17.360
have more attributes,


00:13:17.360 --> 00:13:19.980
but that's not really how a lot of people use classes.


00:13:19.980 --> 00:13:22.220
So if you came from another language


00:13:22.220 --> 00:13:24.480
where you have to kind of define the class once


00:13:24.480 --> 00:13:26.440
and not at runtime,


00:13:26.440 --> 00:13:28.560
Adders might be a closer fit for you.


00:13:28.560 --> 00:13:29.400
- I like it.


00:13:29.400 --> 00:13:32.000
And it's, whether you say @define or @dataclass,


00:13:32.000 --> 00:13:32.840
pretty similar.


00:13:32.840 --> 00:13:35.200
- Yeah, Adders is really cool.


00:13:35.200 --> 00:13:36.400
I personally haven't used it,


00:13:36.400 --> 00:13:38.820
but I've always wanted to try it.


00:13:38.820 --> 00:13:41.040
We're using FastAPI and Pydantic,


00:13:41.040 --> 00:13:42.640
so I've really come to like that library,


00:13:42.640 --> 00:13:45.000
but Adders is something that looks really full-featured


00:13:45.000 --> 00:13:47.960
and nice, definitely something I wanna pick up.


00:13:47.960 --> 00:13:48.800
- Yeah, it's cool.


00:13:48.800 --> 00:13:52.420
And Pydantic also seems very inspired by data classes,


00:13:52.420 --> 00:13:54.040
which I'm learning now.


00:13:54.040 --> 00:13:59.480
suspected, but now learning that is actually inspired by adders and they kind of sort of leapfrog each other in this


00:13:59.480 --> 00:14:04.840
The same trend which is interesting. Yep. So yeah, cool. Good one. Brian matt


00:14:04.840 --> 00:14:08.680
I thought brian was going to talk about this, but you can talk about it. This would be me. Yeah


00:14:08.680 --> 00:14:14.200
So this one's not strictly python related, but I think it's very relevant to python


00:14:14.200 --> 00:14:18.300
Um, so I mentioned earlier I came from a non-cs background


00:14:18.680 --> 00:14:23.280
And I've always, I've just been going down the rabbit hole for about 10 years now,


00:14:23.280 --> 00:14:28.400
trying to understand everything and pick it up and really connect the dots between how do these


00:14:28.400 --> 00:14:33.000
very flexible objects that you're working with every day, how do those get actually implemented?


00:14:33.000 --> 00:14:36.800
And so the first thing I did, if you heard of this guy, Anthony Shaw,


00:14:36.800 --> 00:14:40.400
I think he's been mentioned once or twice, he wrote a great book,


00:14:40.400 --> 00:14:42.400
shout out, CPython Internals.


00:14:42.400 --> 00:14:47.280
Really like that book. >> Anthony's out in the audience, he even says happy new year.


00:14:47.280 --> 00:14:50.320
So this book is great if you want to learn how CPython is implemented.


00:14:50.320 --> 00:14:53.520
But because I don't have a traditional CS background,


00:14:53.520 --> 00:14:57.840
I've always wanted, you know, I felt like I wanted to get a little bit more to the fundamentals.


00:14:57.840 --> 00:15:01.360
And I don't remember where I found out about this book, but Crafting Interpreters,


00:15:01.360 --> 00:15:04.640
I got the paperback here too, I highly recommend it.


00:15:04.640 --> 00:15:09.120
It's an implementation of a language from start to finish.


00:15:09.120 --> 00:15:10.800
Every line of code is in the book.


00:15:10.800 --> 00:15:15.200
It's a dynamic interpreted language, much like Python.


00:15:15.200 --> 00:15:17.440
But I really like how the book is structured.


00:15:17.440 --> 00:15:20.480
So it was written over,


00:15:20.480 --> 00:15:22.720
I think, five years in the open.


00:15:22.720 --> 00:15:25.320
I think the paperback may have just come out last year.


00:15:25.320 --> 00:15:27.680
But you walk through every step from tokenization,


00:15:27.680 --> 00:15:30.540
scanning, building a syntax tree,


00:15:30.540 --> 00:15:32.440
and all the way through the end.


00:15:32.440 --> 00:15:34.720
But what I really like about it is you


00:15:34.720 --> 00:15:38.840
actually develop two separate interpreters for the same language.


00:15:38.840 --> 00:15:40.680
So the first one is written in Java.


00:15:40.680 --> 00:15:45.080
It's a direct evaluation of the abstract syntax tree.


00:15:45.080 --> 00:15:50.680
So that was really how I got a lot of these bits in my head about what is an abstract syntax tree,


00:15:50.680 --> 00:15:54.680
how do you start from there, how do you represent these types. But the second part is actually very,


00:15:54.680 --> 00:15:59.240
where I think it becomes really relevant for Python, because the second part is written in C.


00:15:59.240 --> 00:16:04.840
It's a bytecode virtual machine with garbage collection. So it's not exactly the same as


00:16:04.840 --> 00:16:10.280
Python, but if you want to dig down into how would you actually implement this with the types


00:16:10.280 --> 00:16:16.680
that you have available for UNC, but get something flexible, much like Python. I really recommend


00:16:16.680 --> 00:16:22.120
this. So again, it's not directly, there's some good side notes in here where he compares,


00:16:22.120 --> 00:16:26.640
you know, different implementations between different languages like Python and JavaScript,


00:16:26.640 --> 00:16:32.320
etc., Ruby. But I really like this book. I devoured it during my time between jobs and


00:16:32.320 --> 00:16:36.840
yeah, I keep telling everyone about it. So I thought it would be good for the community


00:16:36.840 --> 00:16:37.840
to hear.


00:16:37.840 --> 00:16:40.680
- Yeah, I didn't study this stuff in college either.


00:16:40.680 --> 00:16:43.000
I mostly studied math and things like that.


00:16:43.000 --> 00:16:45.920
And so understanding how virtual machines work


00:16:45.920 --> 00:16:48.760
and all that is just how code executes.


00:16:48.760 --> 00:16:49.800
I think it's really important.


00:16:49.800 --> 00:16:51.680
You know, it's not the kind of thing


00:16:51.680 --> 00:16:53.640
that you actually need to know how to do


00:16:53.640 --> 00:16:55.620
in terms of you gotta get anything done with it.


00:16:55.620 --> 00:16:58.240
But sometimes your intuition of like,


00:16:58.240 --> 00:17:00.440
if I ask the program to work this way


00:17:00.440 --> 00:17:02.520
and it doesn't work as you expected,


00:17:02.520 --> 00:17:05.440
you expect maybe understanding that internal,


00:17:05.440 --> 00:17:08.000
I was like, oh, it's because it's really doing this


00:17:08.000 --> 00:17:09.760
and everything's all scattered out on the heap


00:17:09.760 --> 00:17:11.040
and I thought numbers would be fast.


00:17:11.040 --> 00:17:12.440
Why are numbers so slow?


00:17:12.440 --> 00:17:13.640
Okay, I understand now.


00:17:13.640 --> 00:17:15.960
- Yeah, I really liked the,


00:17:15.960 --> 00:17:17.920
I mean, it answered a lot of questions for me,


00:17:17.920 --> 00:17:20.000
like how does a HashMap work, right?


00:17:20.000 --> 00:17:21.560
That's a dictionary in Python.


00:17:21.560 --> 00:17:22.600
What is a stack?


00:17:22.600 --> 00:17:23.680
Why would you use it?


00:17:23.680 --> 00:17:25.800
What is the, when you do a disassemble


00:17:25.800 --> 00:17:29.120
and you see bytecode, what does that actually mean, right?


00:17:29.120 --> 00:17:30.440
I really, really enjoyed it.


00:17:30.440 --> 00:17:33.360
And he's got a really great books open source.


00:17:33.360 --> 00:17:35.000
He's got a really great build system.


00:17:35.000 --> 00:17:37.360
if you're interested in writing a book, it's very cool.


00:17:37.360 --> 00:17:39.900
How the adding lines of code and things like that


00:17:39.900 --> 00:17:41.300
are all embedded in there.


00:17:41.300 --> 00:17:45.060
And he's got tests written for every part


00:17:45.060 --> 00:17:47.480
where you add a new bit to the code,


00:17:47.480 --> 00:17:49.080
there's tests written and there's ways


00:17:49.080 --> 00:17:51.300
where he uses macros and things to block them out.


00:17:51.300 --> 00:17:52.720
It's pretty interesting.


00:17:52.720 --> 00:17:55.280
- Nice, testing books.


00:17:55.280 --> 00:17:56.760
- That's pretty excellent.


00:17:56.760 --> 00:17:59.640
Yeah, so Matt, now being at Anaconda,


00:17:59.640 --> 00:18:03.040
like that world, the Python world over


00:18:03.040 --> 00:18:05.540
in the data science stack and especially around there


00:18:05.540 --> 00:18:07.480
has so much of like, here's a bunch of C


00:18:07.480 --> 00:18:09.720
and here's a bunch of Python and they kind of go together.


00:18:09.720 --> 00:18:11.320
Does this give you a deeper understanding


00:18:11.320 --> 00:18:12.260
of what's happening?


00:18:12.260 --> 00:18:13.340
- Yeah, for sure.


00:18:13.340 --> 00:18:16.900
I think CPython internals gave me a really good understanding


00:18:16.900 --> 00:18:20.600
a bit more about the C API and why that's important.


00:18:20.600 --> 00:18:23.840
I'm sure you know and the listeners may know


00:18:23.840 --> 00:18:26.640
like the binary compatibility is really important


00:18:26.640 --> 00:18:28.880
between the two and dealing with locking


00:18:28.880 --> 00:18:32.720
and the global interpreter lock and everything like that.


00:18:32.720 --> 00:18:35.920
So it's definitely given me a better conceptual view


00:18:35.920 --> 00:18:37.440
of how these things are working.


00:18:37.440 --> 00:18:39.900
As you mentioned, you don't need to know it necessarily


00:18:39.900 --> 00:18:41.760
on a day-to-day basis, but I've just found


00:18:41.760 --> 00:18:43.800
that it's given me a much better mental model.


00:18:43.800 --> 00:18:46.140
- Having an intuition is valuable.


00:18:46.140 --> 00:18:49.040
Yeah, quick audience feedback.


00:18:49.040 --> 00:18:50.960
Sam out in the live audience says,


00:18:50.960 --> 00:18:52.480
"I started reading this book over Christmas day


00:18:52.480 --> 00:18:53.920
"and it's an absolute joy."


00:18:53.920 --> 00:18:55.840
So yeah, very cool.


00:18:55.840 --> 00:18:58.040
One more vote of confidence for you there.


00:18:58.040 --> 00:19:01.860
Cool, Brian, are we ready for my next one?


00:19:01.860 --> 00:19:03.200
- Yes, definitely.


00:19:03.200 --> 00:19:04.940
- A little Yamale.


00:19:04.940 --> 00:19:06.120
- Yeah, I'm hungry.


00:19:06.120 --> 00:19:08.520
- So this one is cool.


00:19:08.520 --> 00:19:11.460
It's called Yamale or Yamale.


00:19:11.460 --> 00:19:14.480
I'm not 100% sure, but it was suggested by Andrew Simon.


00:19:14.480 --> 00:19:16.440
Thank you, Andrew, for sending this in.


00:19:16.440 --> 00:19:21.320
And the idea of this is we work with YAML files.


00:19:21.320 --> 00:19:25.040
That's often used for configuration and whatnot.


00:19:25.040 --> 00:19:28.040
But if you want to verify your YAML, right?


00:19:28.040 --> 00:19:29.660
It's just text.


00:19:29.660 --> 00:19:33.660
Maybe you wanna have some YAML that has a number


00:19:33.660 --> 00:19:35.920
for a value, or you wanna have a string,


00:19:35.920 --> 00:19:38.220
or maybe you wanna have true false,


00:19:38.220 --> 00:19:40.340
or you wanna have some nested thing, right?


00:19:40.340 --> 00:19:43.560
Like you could say, I'm gonna have a person in my YAML,


00:19:43.560 --> 00:19:46.580
and then that person has to have fields or values


00:19:46.580 --> 00:19:48.260
set on it like a name and an age.


00:19:48.260 --> 00:19:51.600
With this library, you can actually create a schema


00:19:51.600 --> 00:19:55.640
that talks about what the shape and types of these are,


00:19:55.640 --> 00:19:58.340
much like data classes, and then you can use YAML


00:19:58.340 --> 00:20:02.220
to say, given a YAML file, does it validate?


00:20:02.220 --> 00:20:05.180
Think kind of like Pydantic is for JSON.


00:20:05.180 --> 00:20:07.500
This is for YAML, except it doesn't actually parse


00:20:07.500 --> 00:20:08.340
the results out.


00:20:08.340 --> 00:20:10.460
It just tells you whether or not it's correct.


00:20:10.460 --> 00:20:11.300
Isn't that cool?


00:20:11.300 --> 00:20:12.860
- I think it looks neat.


00:20:12.860 --> 00:20:13.700
Yeah.


00:20:13.700 --> 00:20:16.300
- Yeah, so it's pretty easy to work with.


00:20:16.300 --> 00:20:18.420
Obviously requires modern Python.


00:20:18.420 --> 00:20:21.180
It has a CLI version, right?


00:20:21.180 --> 00:20:23.800
So you can just say, Yamali, give it a schema,


00:20:23.800 --> 00:20:26.620
give it a file, and it'll go through and check it.


00:20:26.620 --> 00:20:29.460
It has a strict and a non-strict mode.


00:20:29.460 --> 00:20:30.740
It also has an API.


00:20:30.740 --> 00:20:32.620
So then to use it, just say,


00:20:32.620 --> 00:20:35.180
yamali.validate schema and data,


00:20:35.180 --> 00:20:36.980
either in code or on the CLI.


00:20:36.980 --> 00:20:38.780
And in terms of schemas,


00:20:38.780 --> 00:20:40.100
like I said, it looks like data classes.


00:20:40.100 --> 00:20:43.740
You just have a file like name colon str, age colon int,


00:20:43.740 --> 00:20:46.120
and then you can even add additional limitations,


00:20:46.120 --> 00:20:49.220
like the max integer value has to be 200 or less,


00:20:49.220 --> 00:20:51.140
which is pretty cool.


00:20:51.140 --> 00:20:52.060
Then also, like I said,


00:20:52.060 --> 00:20:54.820
you can have more complex structures.


00:20:54.820 --> 00:20:57.220
So for example, they have what they call a person,


00:20:57.220 --> 00:21:00.700
but then the person here, actually, you can nest them.


00:21:00.700 --> 00:21:02.540
So you could have like part of your YAML


00:21:02.540 --> 00:21:03.980
could have a person in it,


00:21:03.980 --> 00:21:06.600
and then your person schema could validate that person.


00:21:06.600 --> 00:21:09.420
So very much like Pydantic, but for YAML files,


00:21:09.420 --> 00:21:11.140
like here you can see, scroll down,


00:21:11.140 --> 00:21:13.980
there's an example of, I think it's called recursion


00:21:13.980 --> 00:21:15.300
is how they refer to it.


00:21:15.300 --> 00:21:17.500
But you can have like nested versions


00:21:17.500 --> 00:21:18.860
of these things and so on.


00:21:18.860 --> 00:21:20.980
So if you're working with YAML


00:21:20.980 --> 00:21:23.580
and you wanna validate it through unit tests


00:21:23.580 --> 00:21:27.480
or some data ingestion pipeline or whatever,


00:21:27.480 --> 00:21:29.700
I just wanna make sure you're loading the files correctly,


00:21:29.700 --> 00:21:33.020
then you might as well hit it with some YAML-y guessing.


00:21:33.020 --> 00:21:34.700
- One of the things I like about stuff like this


00:21:34.700 --> 00:21:37.220
is that things like YAML files,


00:21:37.220 --> 00:21:42.220
sometimes people just sort of edit it in the Git repo


00:21:42.220 --> 00:21:44.760
instead of making sure it works first,


00:21:44.760 --> 00:21:49.260
and then it gets, and then having a CI stage that says,


00:21:49.260 --> 00:21:52.340
hey, making sure the YAML's valid syntax


00:21:52.340 --> 00:21:56.660
is pretty nice so that you know it before it blows up


00:21:56.660 --> 00:21:58.860
somewhere else with some weird error message.


00:21:58.860 --> 00:22:00.260
>> Yeah, exactly.


00:22:00.260 --> 00:22:01.780
>> Yeah, this is really cool.


00:22:01.780 --> 00:22:04.020
Validation of these types of input files,


00:22:04.020 --> 00:22:05.700
especially YAML files is really tough,


00:22:05.700 --> 00:22:07.980
I've found just because it's indentation based


00:22:07.980 --> 00:22:10.700
and whitespace is not a bad thing,


00:22:10.700 --> 00:22:12.740
obviously, but for YAML it's tough.


00:22:12.740 --> 00:22:14.940
I can't tell you how many hours I've


00:22:14.940 --> 00:22:17.100
banged my head against the wall in the past life,


00:22:17.100 --> 00:22:20.340
trying to get Ansible scripts to run and things like that.


00:22:20.340 --> 00:22:21.580
This is really neat.


00:22:21.580 --> 00:22:27.180
And anytime I see something like this, I just wish that there was one way to describe those types somewhere,


00:22:27.180 --> 00:22:32.460
like preferably in Python, just because I like that more, but this is really cool.


00:22:32.460 --> 00:22:37.820
Yeah, I wouldn't be surprised if there's some kind of pedantic mapping to YAML instead of to JSON,


00:22:37.820 --> 00:22:43.180
and you can just kind of run it through there. But yeah, I think this is more of a challenge than it is, say, for JSON,


00:22:43.180 --> 00:22:50.780
because JSON, there's a validity to the file, regardless of what the schema is, where YAML, less so, right?


00:22:50.780 --> 00:22:52.880
Like, well, if you didn't indent that, well, it just,


00:22:52.880 --> 00:22:55.380
that means it belongs somewhere else, I guess, you know,


00:22:55.380 --> 00:22:57.100
it's a little more free form.


00:22:57.100 --> 00:22:58.720
So I guess that's why it's popular,


00:22:58.720 --> 00:23:00.320
but also nice to have this validation.


00:23:00.320 --> 00:23:02.480
So yeah, thank you for Andrew.


00:23:02.480 --> 00:23:04.380
Thank you to Andrew for sending that in.


00:23:04.380 --> 00:23:08.540
- Yeah, so next I wanted to talk about Pimpler,


00:23:08.540 --> 00:23:10.080
which is great name.


00:23:10.080 --> 00:23:12.760
And I honestly can't remember where I saw this.


00:23:12.760 --> 00:23:16.800
I think it was a post or something by Bob Belderbos


00:23:16.800 --> 00:23:20.280
or something he wrote on PyBytes, I'm not sure.


00:23:20.280 --> 00:23:22.480
Anyway, so I'll give him credit.


00:23:22.480 --> 00:23:23.720
Maybe it was somebody else.


00:23:23.720 --> 00:23:25.600
So if it was somebody else, I apologize.


00:23:25.600 --> 00:23:27.040
But anyway, what is Pimpler?


00:23:27.040 --> 00:23:29.080
Pimpler is a little tiny library,


00:23:29.080 --> 00:23:30.800
which has a few tools in it.


00:23:30.800 --> 00:23:33.680
And it has-- one of the things it says


00:23:33.680 --> 00:23:37.120
is-- one of the things I saw--


00:23:37.120 --> 00:23:38.720
it does a few things, but what I--


00:23:38.720 --> 00:23:41.640
it measures, monitors, and analyzes memory behavior


00:23:41.640 --> 00:23:43.560
in Python objects.


00:23:43.560 --> 00:23:48.240
But it's the memory size thing that was interesting to me.


00:23:48.240 --> 00:23:55.520
So you've got, like, for instance, it has three tools built into it,


00:23:55.520 --> 00:24:01.280
asizeof and Muppy, which is a great name, and ClassTracker.


00:24:01.280 --> 00:24:07.920
So asizeof provides a basic size information for one or a set of objects.


00:24:07.920 --> 00:24:11.360
And Muppy is a monitoring-- I didn't play with this.


00:24:11.360 --> 00:24:13.440
I didn't play with the ClassTracker either.


00:24:13.440 --> 00:24:17.440
ClassTracker provides offline analysis of lifetimes of Python objects.


00:24:17.440 --> 00:24:19.800
Maybe if you got a memory leak,


00:24:19.800 --> 00:24:21.800
you can see there's a hundred thousands of


00:24:21.800 --> 00:24:24.120
my hundreds of thousands of this type,


00:24:24.120 --> 00:24:26.040
and I thought I only had three of them.


00:24:26.040 --> 00:24:29.960
>> Yeah. One of the things that I really liked with asizeof,


00:24:29.960 --> 00:24:37.560
is we already have sys.getSizeof in Python,


00:24:37.560 --> 00:24:41.360
but that just tells you the size of the object itself,


00:24:41.360 --> 00:24:45.680
not of the later on.


00:24:45.680 --> 00:24:50.600
So a size of will tell you not just what the size of the object is, but all of the recursively


00:24:50.600 --> 00:24:55.800
it goes recursively and and looks at the size of all the stuff that it contents of it.


00:24:55.800 --> 00:24:56.800
So right.


00:24:56.800 --> 00:24:59.920
And people haven't looked at this, you know, they should check out Anthony's book, right?


00:24:59.920 --> 00:25:04.480
But if you've got a list and say the list has 100 items in it and you say, what is the


00:25:04.480 --> 00:25:05.840
size of the list?


00:25:05.840 --> 00:25:11.960
The list will be roughly 900 bytes because it's 108 byte pointers plus a little bit of


00:25:11.960 --> 00:25:13.040
overhead.


00:25:13.040 --> 00:25:15.560
- Those pointers could point at megabytes of memory.


00:25:15.560 --> 00:25:18.600
You could have 100 megabytes of stuff loaded in your list,


00:25:18.600 --> 00:25:19.800
and if it's really only 100,


00:25:19.800 --> 00:25:21.040
like, no, that's 900 bytes,


00:25:21.040 --> 00:25:23.280
not 800 megabytes or whatever, right?


00:25:23.280 --> 00:25:24.560
So you really need to,


00:25:24.560 --> 00:25:27.520
if you actually care about real whole memory size,


00:25:27.520 --> 00:25:28.640
you gotta use something like asizeup.


00:25:28.640 --> 00:25:29.680
It's cool that this is built in.


00:25:29.680 --> 00:25:32.800
I had to write this myself and it was not as fun.


00:25:32.800 --> 00:25:33.640
- Yeah, this is awesome.


00:25:33.640 --> 00:25:38.320
I also, I hit this sometime in grad school, I remember.


00:25:38.320 --> 00:25:40.360
When I was at a deadline or something,


00:25:40.360 --> 00:25:43.860
And just I hit the same thing about the number of bytes


00:25:43.860 --> 00:25:47.060
in a list being so small and just writing something


00:25:47.060 --> 00:25:48.920
that was hacky to try to do the same thing,


00:25:48.920 --> 00:25:51.900
but to have it so nice and available is great.


00:25:51.900 --> 00:25:53.140
And the name is awesome.


00:25:53.140 --> 00:25:54.720
I love silly names.


00:25:54.720 --> 00:25:57.060
- Yeah, for sure.


00:25:57.060 --> 00:25:59.580
- One of the example, I was confused,


00:25:59.580 --> 00:26:02.140
the example we're showing on the screen is just a,


00:26:02.140 --> 00:26:06.380
you've got a list of a few items, some of it's text,


00:26:06.380 --> 00:26:10.040
so some of them are integers and some are lists of integers


00:26:10.040 --> 00:26:12.760
or tuples of integers and being able to go down


00:26:12.760 --> 00:26:14.440
and do the size of everything.


00:26:14.440 --> 00:26:17.560
But then there's also a, you can get more detailed.


00:26:17.560 --> 00:26:22.560
You can give it a sized, a size with a detail numbers.


00:26:22.560 --> 00:26:25.920
I'd have to look at the API to figure out


00:26:25.920 --> 00:26:27.080
what all this means.


00:26:27.080 --> 00:26:30.840
But the example shows each element, not just the total


00:26:30.840 --> 00:26:33.220
but each element, what the size of the different components


00:26:33.220 --> 00:26:34.560
are, which is kind of cool.


00:26:34.560 --> 00:26:36.920
But it lists like a flat size and I'm like,


00:26:36.920 --> 00:26:38.200
what's the flat thing?


00:26:38.200 --> 00:26:40.560
So I had to look that up and flat,


00:26:40.560 --> 00:26:44.520
the flat size returns the flat size of a Python object


00:26:44.520 --> 00:26:47.160
in bytes determined as the basic size.


00:26:47.160 --> 00:26:50.920
So like in these examples, it's like the tuple is just a


00:26:50.920 --> 00:26:53.840
flat, the tuple itself is 32 bytes,


00:26:53.840 --> 00:26:57.240
but the tuple and its contents is 64.


00:26:57.240 --> 00:26:58.060
- I see.


00:26:58.060 --> 00:27:03.060
So flat is like sys.getSizeOf and size is a size of that bit.


00:27:03.060 --> 00:27:07.440
- I think that's what it is, but yeah, not sure.


00:27:07.440 --> 00:27:08.280
but that's what I'm thinking.


00:27:08.280 --> 00:27:09.280
- Yeah, so for people who are listening,


00:27:09.280 --> 00:27:12.160
they don't see this, you should check out the docs page,


00:27:12.160 --> 00:27:13.520
right, like a usage example,


00:27:13.520 --> 00:27:15.880
because if you have a list containing a bunch of stuff,


00:27:15.880 --> 00:27:17.920
you can just say, basically, print this out


00:27:17.920 --> 00:27:19.800
and it shows line by line,


00:27:19.800 --> 00:27:22.120
this part of the list was this much


00:27:22.120 --> 00:27:23.440
and then it pointed at these things,


00:27:23.440 --> 00:27:24.880
each of those things is this big


00:27:24.880 --> 00:27:28.200
and it has constituents and so on.


00:27:28.200 --> 00:27:30.440
My theory is that the detail equals one


00:27:30.440 --> 00:27:32.200
is recursed one level down,


00:27:32.200 --> 00:27:34.280
but don't keep traversing to like show the size


00:27:34.280 --> 00:27:35.320
of numbers and stuff.


00:27:35.320 --> 00:27:36.160
- Yeah, probably.


00:27:36.160 --> 00:27:36.980
- Yeah, cool.


00:27:36.980 --> 00:27:48.020
it. This is great. Yeah. All right. Okay, so I'm going to talk about HVPlot and HVPlot.interactive


00:27:48.020 --> 00:27:53.460
specifically. So this is something I actually wasn't very aware of until I joined Anaconda,


00:27:53.460 --> 00:27:58.260
but one of my colleagues, Philip Roediger, who I know was on Talk Python at one point,


00:27:58.260 --> 00:28:04.740
is the developer working on this. And basically, when you're working in the PyData ecosystem,


00:28:04.740 --> 00:28:06.640
There's pandas and X-Array and Dask.


00:28:06.640 --> 00:28:09.340
There's all these different data frame type interfaces,


00:28:09.340 --> 00:28:11.380
and there's a lot of plotting interfaces.


00:28:11.380 --> 00:28:14.680
And there's a project called HoloViews or HVPlot,


00:28:14.680 --> 00:28:19.280
which is a consistent plotting API that you can use.


00:28:19.280 --> 00:28:21.580
And the really cool part about this


00:28:21.580 --> 00:28:23.740
is you can swap the back end.


00:28:23.740 --> 00:28:27.580
So for example, pandas default plot will use .plot,


00:28:27.580 --> 00:28:28.980
and it'll make a matplotlib.


00:28:28.980 --> 00:28:30.580
But if you want to use something more interactive,


00:28:30.580 --> 00:28:33.420
like Bokeh or HoloViews,


00:28:33.420 --> 00:28:37.220
you can just change the backend and you can use the same commands to do that.


00:28:37.220 --> 00:28:38.220
So that's cool.


00:28:38.220 --> 00:28:40.820
>> That's cool and you set it on the data frame.


00:28:40.820 --> 00:28:42.320
>> Yeah, exactly.


00:28:42.320 --> 00:28:46.020
So what you do is you import hvplot.pandas,


00:28:46.020 --> 00:28:47.320
and then on the data frame,


00:28:47.320 --> 00:28:48.620
if you change the backend,


00:28:48.620 --> 00:28:50.380
you just do dataframe.plot,


00:28:50.380 --> 00:28:55.420
and there's a bunch of rational defaults built in for how it would show


00:28:55.420 --> 00:28:59.020
the different columns in your data frame versus the index.


00:28:59.020 --> 00:29:02.720
>> I like that because you could swap out the plots by writing one line,


00:29:02.720 --> 00:29:05.380
even if you've got hundreds of lines of plotting and stuff, right?


00:29:05.380 --> 00:29:06.380
It just picks it up.


00:29:06.380 --> 00:29:07.380
Exactly, yeah.


00:29:07.380 --> 00:29:11.060
And the common workflow for a data scientist is


00:29:11.060 --> 00:29:13.560
you're reading in a lot of input data, right?


00:29:13.560 --> 00:29:15.220
Then you want to transform that data.


00:29:15.220 --> 00:29:18.720
So you're doing generally a lot of method chaining


00:29:18.720 --> 00:29:20.320
is a common pattern


00:29:20.320 --> 00:29:23.320
where you want to do things like filter and select a time


00:29:23.320 --> 00:29:26.560
and maybe pick a drop a column and do all kinds of things, right?


00:29:26.560 --> 00:29:29.620
At the end, you either want to show that data or write it somewhere


00:29:29.620 --> 00:29:31.360
or plot it, which is very common.


00:29:31.360 --> 00:29:37.920
Now this interactive part, Philip demoed this, or he gave a talk at PyData Global about two


00:29:37.920 --> 00:29:39.920
months ago I think.


00:29:39.920 --> 00:29:43.040
It kind of extends on that, and this blew my mind when I saw it.


00:29:43.040 --> 00:29:48.960
So if you have a data frame like thing and you put .interactive after it, then you can


00:29:48.960 --> 00:29:50.960
put your method chaining after that.


00:29:50.960 --> 00:29:56.080
So this is an example where you say I want to select a discrete time, and then I want


00:29:56.080 --> 00:29:57.080
to plot it.


00:29:57.080 --> 00:30:01.280
And this particular example doesn't have a kernel running in the back end, so it's


00:30:01.280 --> 00:30:04.200
it's not gonna switch, but if you were running this


00:30:04.200 --> 00:30:07.080
in an actual live notebook,


00:30:07.080 --> 00:30:09.520
it would be changing the time on this chart.


00:30:09.520 --> 00:30:12.120
And again, this is built to work with


00:30:12.120 --> 00:30:16.080
a lot of the big data type APIs that match the pandas API.


00:30:16.080 --> 00:30:16.920
- Nice.


00:30:16.920 --> 00:30:19.160
So for people listening, if you say .interactive


00:30:19.160 --> 00:30:20.800
and then you give the parameter


00:30:20.800 --> 00:30:22.160
that's meant to be interactive,


00:30:22.160 --> 00:30:26.040
that just puts one of those I Python widget things


00:30:26.040 --> 00:30:27.400
into your notebook right there, right?


00:30:27.400 --> 00:30:28.320
That's cool. - Yeah.


00:30:28.320 --> 00:30:32.400
So a related library is called Panel,


00:30:32.400 --> 00:30:35.380
which is, it is for building dashboards


00:30:35.380 --> 00:30:37.720
directly from your notebooks.


00:30:37.720 --> 00:30:40.480
So you can, if you had a Jupyter notebook,


00:30:40.480 --> 00:30:44.240
you could say panel serve and pass in the notebook file,


00:30:44.240 --> 00:30:45.400
and it'll make a dashboard.


00:30:45.400 --> 00:30:48.540
That's the thing I wanna show in a second here.


00:30:48.540 --> 00:30:51.040
But the way the interactive works is really neat.


00:30:51.040 --> 00:30:53.440
So wherever you would put a number,


00:30:53.440 --> 00:30:55.160
you can put one of these widgets.


00:30:55.160 --> 00:30:57.380
And so you can have time selectors,


00:30:57.380 --> 00:31:00.220
You can have things like sliders,


00:31:00.220 --> 00:31:03.300
and you can have input boxes, and things like that.


00:31:03.300 --> 00:31:05.420
And all you do is you would change the place


00:31:05.420 --> 00:31:07.180
where you put your input number,


00:31:07.180 --> 00:31:08.540
and put one of those widgets in.


00:31:08.540 --> 00:31:10.380
And then it sort of,


00:31:10.380 --> 00:31:12.420
I actually don't know how it works exactly under the hood,


00:31:12.420 --> 00:31:15.100
but from what I understand, you put this interactive in,


00:31:15.100 --> 00:31:17.420
and then it's capturing all the different methods


00:31:17.420 --> 00:31:18.580
that you're adding onto it.


00:31:18.580 --> 00:31:20.600
And anytime one of those widget changes,


00:31:20.600 --> 00:31:23.580
it will change everything from that point on.


00:31:23.580 --> 00:31:27.180
And so the demo here was from another panel contributor


00:31:27.180 --> 00:31:31.180
Mark Skov-Madsen, and I'm just going to play this and try to explain it.


00:31:31.180 --> 00:31:35.180
So we have a data pipeline on the right where we've chained methods together.


00:31:35.180 --> 00:31:39.180
And what he's done here is he's just placed a widget as a


00:31:39.180 --> 00:31:43.180
parameter to these different methods on your data frame. And then this is


00:31:43.180 --> 00:31:47.180
actually a panel dashboard that's been served up in the browser. And you can see this


00:31:47.180 --> 00:31:51.180
is all generated from the little bit of code on the right. So if you want to do


00:31:51.180 --> 00:31:55.180
interactive data analysis or exploratory data analysis, you can


00:31:55.180 --> 00:31:59.180
really do this very easily with this interactive function.


00:31:59.180 --> 00:32:03.940
When I saw this, I hit myself in the head because normally,


00:32:03.940 --> 00:32:05.740
my pattern here was I had a cell at


00:32:05.740 --> 00:32:08.660
the top with a whole bunch of constants defined.


00:32:08.660 --> 00:32:11.780
I would manually go through and change the time,


00:32:11.780 --> 00:32:13.460
start time from this time to this time,


00:32:13.460 --> 00:32:14.620
or change this parameter to this,


00:32:14.620 --> 00:32:16.620
and run it again and over and over.


00:32:16.620 --> 00:32:19.300
>> You got to remember to run all the cells that are affected by it.


00:32:19.300 --> 00:32:21.940
>> Exactly. The fact that you can do


00:32:21.940 --> 00:32:24.980
this interactively while you're working.


00:32:24.980 --> 00:32:26.920
I could see how this would just,


00:32:26.920 --> 00:32:30.220
you don't break your flow while you're trying to work.


00:32:30.220 --> 00:32:32.860
The method chaining itself is I really like too,


00:32:32.860 --> 00:32:35.060
because you can comment out each stage of


00:32:35.060 --> 00:32:38.940
that as you're going and debugging what you're working on.


00:32:38.940 --> 00:32:42.980
This is really neat. I put a link in the show notes to


00:32:42.980 --> 00:32:44.960
the actual talk as well as


00:32:44.960 --> 00:32:48.860
this gist that Mark Skobmatt's input on GitHub.


00:32:48.860 --> 00:32:51.900
It blew my mind. I would have made my life a lot


00:32:51.900 --> 00:32:54.900
had I known about this earlier.


00:32:54.900 --> 00:32:56.540
>>Yeah, and one of the important things


00:32:56.540 --> 00:32:59.220
I think about plotting and interactive stuff


00:32:59.220 --> 00:33:05.900
is even if your end result isn't a panel or an interactive thing,


00:33:05.900 --> 00:33:08.820
sometimes getting to see the plot,


00:33:08.820 --> 00:33:11.580
seeing the data in a visual form,


00:33:11.580 --> 00:33:14.380
helps you understand what you need to do with it.


00:33:14.380 --> 00:33:15.460
>>Yeah, exactly.


00:33:15.460 --> 00:33:18.540
I mean, I did a lot of work in the past with time series data.


00:33:18.540 --> 00:33:21.260
And time series data, especially if this was sensor data,


00:33:21.260 --> 00:33:24.140
you had a lot of dropouts, you might have spikes,


00:33:24.140 --> 00:33:26.820
and you're always looking at it and trying to make


00:33:26.820 --> 00:33:30.100
some judgment about your filter parameters and being able to


00:33:30.100 --> 00:33:33.780
have that feedback loop between changing some of those and


00:33:33.780 --> 00:33:38.180
seeing what the result is, is a huge game changer.


00:33:38.180 --> 00:33:41.260
>> You can hand it off to someone else who's not writing


00:33:41.260 --> 00:33:42.940
the code and say, "Here, you play with it.


00:33:42.940 --> 00:33:44.940
Give it to a scientist or somebody."


00:33:44.940 --> 00:33:46.420
>> That's exactly right.


00:33:46.420 --> 00:33:48.100
That's what panel's all about is,


00:33:48.100 --> 00:33:53.900
The biggest challenge that I always had and many data scientists have is you do all your analysis in a notebook,


00:33:53.900 --> 00:33:57.060
but then you got to show your manager or you got to show your teammates.


00:33:57.060 --> 00:34:02.740
And going through that trajectory can be very challenging.


00:34:02.740 --> 00:34:05.740
These new tools are amazing to do that.


00:34:05.740 --> 00:34:09.660
But that's how I turned myself into a software engineer because that's what I wanted to do.


00:34:09.660 --> 00:34:16.660
But I went down the rabbit hole and learned Flask and Dash and how to deploy web apps and all this stuff.


00:34:16.660 --> 00:34:18.020
Well, I'm glad you did.


00:34:18.020 --> 00:34:22.100
Yeah, maybe I wouldn't be here if I hadn't done that. But yeah, this is really cool. And I


00:34:22.100 --> 00:34:26.740
definitely recommend people look at this. There was also another talk, sorry, this is an extra, but


00:34:26.740 --> 00:34:34.340
there was another talk at PyData Global, hosted by James Bednar, who's our head of consulting,


00:34:34.340 --> 00:34:39.700
but he leads PyViz, which is a community for visualization tools. And it was a comparison of


00:34:39.700 --> 00:34:42.580
four different dashboarding apps.


00:34:42.580 --> 00:34:44.780
So it's panel, dash,


00:34:44.780 --> 00:34:47.100
voila, and Streamlet.


00:34:47.100 --> 00:34:49.860
They just had main contributors from


00:34:49.860 --> 00:34:51.180
the four libraries talking about


00:34:51.180 --> 00:34:53.260
the benefits and pros and cons of all of them.


00:34:53.260 --> 00:34:55.300
So anyone who wants to go look at those,


00:34:55.300 --> 00:34:56.740
I definitely recommend that too.


00:34:56.740 --> 00:34:59.500
>> That sounds amazing. All those libraries are great.


00:34:59.500 --> 00:35:02.420
>> Nice. Thanks. Speaking of those extra parts


00:35:02.420 --> 00:35:04.740
of the podcast that make the podcast longer,


00:35:04.740 --> 00:35:06.860
we should do some extras.


00:35:06.860 --> 00:35:09.420
>> We should do some extras.


00:35:09.420 --> 00:35:10.220
Got any?


00:35:10.220 --> 00:35:11.900
I don't have anything extra.


00:35:11.900 --> 00:35:12.940
Matt, how about you?


00:35:12.940 --> 00:35:14.700
Yeah, two things.


00:35:14.700 --> 00:35:17.500
So first, if you can show my screen,


00:35:17.500 --> 00:35:20.940
last year Atacana hired the Piston developers.


00:35:20.940 --> 00:35:24.860
Piston is a faster implementation fork of CPython.


00:35:24.860 --> 00:35:27.740
I think it was at Instagram first, I can't recall.


00:35:27.740 --> 00:35:30.300
But anyway, right before the holidays,


00:35:30.300 --> 00:35:32.940
they released pre-compiled packages


00:35:32.940 --> 00:35:36.300
for many of, a couple hundred of the most popular Python packages.


00:35:36.300 --> 00:35:38.060
So if you're interested in trying Piston,


00:35:38.860 --> 00:35:41.260
I put a link to their blog post in here.


00:35:41.260 --> 00:35:43.460
They're using Conda right now.


00:35:43.460 --> 00:35:46.660
They were able to leverage a lot of the Conda Forge recipes for building these.


00:35:46.660 --> 00:35:50.060
This is that binary compatibility challenge that we talked about earlier.


00:35:50.060 --> 00:35:54.460
So I know the team's looking for feedback on that.


00:35:54.460 --> 00:35:56.260
If you want to try that, feel free to go there.


00:35:56.260 --> 00:35:58.760
And it mentions in the blog that they're working on PIP.


00:35:58.760 --> 00:36:01.260
That's a little harder too, just because of how,


00:36:01.260 --> 00:36:05.160
you know, the build stages for all the packages aren't centralized with PIP.


00:36:05.160 --> 00:36:07.460
So it's a little more challenging for them to do that.


00:36:07.460 --> 00:36:16.100
And then just the last thing is, you know, I don't want to be too much of a salesman here, but we are hiring.


00:36:16.100 --> 00:36:21.300
It's an amazing place to work and I definitely recommend anyone to go check it out if they're interested.


00:36:21.300 --> 00:36:25.060
Fantastic. Yeah, and you put a link in the show notes if people want to.


00:36:25.060 --> 00:36:27.860
Yeah, it's anaconda.com/careers.


00:36:27.860 --> 00:36:30.340
And we're doing a lot of cool stuff and growing.


00:36:30.340 --> 00:36:35.480
So if anyone's looking for work in, in data science or just software and


00:36:35.480 --> 00:36:38.940
building out some of the things we're doing to try to help the open source


00:36:38.940 --> 00:36:42.860
community and bridge that gap, it's spelled it wrong, bridge that gap between


00:36:42.860 --> 00:36:45.900
the enterprise and open source and data science in particular.


00:36:45.900 --> 00:36:46.380
Yeah.


00:36:46.380 --> 00:36:46.700
Yeah.


00:36:46.700 --> 00:36:48.180
It definitely seems like a fun place to work.


00:36:48.180 --> 00:36:48.820
So cool.


00:36:48.820 --> 00:36:52.540
People looking for a change or for a fun Python job.


00:36:52.540 --> 00:36:52.820
Yeah.


00:36:52.820 --> 00:36:55.180
And people do reach out to, yeah, cool.


00:36:55.180 --> 00:36:58.380
People do reach out to Brian and me and saying, Hey, I really want to get a


00:36:58.660 --> 00:37:02.200
Python job and doing other stuff, but how do I get a Python job?


00:37:02.200 --> 00:37:02.800
Help us out.


00:37:02.800 --> 00:37:07.060
So we don't know, but we can recommend places like Anaconda for sure.


00:37:07.060 --> 00:37:07.500
Yeah.


00:37:07.500 --> 00:37:10.900
It looks like there's about 40 jobs right now and, so pick it out.


00:37:10.900 --> 00:37:11.340
Fantastic.


00:37:11.340 --> 00:37:11.720
Oh, wow.


00:37:11.720 --> 00:37:12.160
That's awesome.


00:37:12.160 --> 00:37:12.760
All right.


00:37:12.760 --> 00:37:16.560
Well, would it surprise you if I had some extra things?


00:37:16.560 --> 00:37:18.280
It would surprise me if you didn't.


00:37:18.280 --> 00:37:20.280
All right.


00:37:20.280 --> 00:37:23.680
First of all, I want to say congratulations to Will McGugan.


00:37:23.680 --> 00:37:28.300
We have gone the entire show without mentioning rich or textual.


00:37:28.560 --> 00:37:29.560
Can you imagine?


00:37:29.560 --> 00:37:30.560
Almost.


00:37:30.560 --> 00:37:31.560
But no.


00:37:31.560 --> 00:37:34.360
Only because I knew you were going to talk about this, otherwise I would have thrown


00:37:34.360 --> 00:37:35.360
it in.


00:37:35.360 --> 00:37:41.120
Yeah, so Will, last year, a while ago, I don't know the exact number of months back, but


00:37:41.120 --> 00:37:45.880
he's planning to take a year off of work and just focus on rich and textual.


00:37:45.880 --> 00:37:47.400
It was getting so much traction.


00:37:47.400 --> 00:37:51.840
He's like, I'm just going to live off my savings and a small amount of money from the GitHub


00:37:51.840 --> 00:37:55.080
sponsorships and really see what I can do trying that.


00:37:55.080 --> 00:37:58.800
- Well, it turns out he has plans to build


00:37:58.800 --> 00:38:02.360
some really cool stuff and has actually,


00:38:02.360 --> 00:38:04.840
based around Rich and Textual in particular,


00:38:04.840 --> 00:38:08.420
and he has raised a first round of funding


00:38:08.420 --> 00:38:12.180
and started a company called textualize.io.


00:38:12.180 --> 00:38:13.100
How cool is that?


00:38:13.100 --> 00:38:14.860
- Well, we don't know because we don't know


00:38:14.860 --> 00:38:16.060
what it's gonna do.


00:38:16.060 --> 00:38:18.500
- All you do is if you go there, it's like a command prompt.


00:38:18.500 --> 00:38:20.940
You just enter your email address.


00:38:20.940 --> 00:38:22.280
I guess you hit enter, something happens.


00:38:22.280 --> 00:38:23.300
Let's find out what happens.


00:38:23.300 --> 00:38:25.060
Yes, I'm confirmed.


00:38:25.060 --> 00:38:27.460
basically just get notified about when textualize


00:38:27.460 --> 00:38:29.680
comes out of stealth mode, but congrats to Will.


00:38:29.680 --> 00:38:30.740
That's fantastic.


00:38:30.740 --> 00:38:32.580
Another one, we've spoken about tenacity.


00:38:32.580 --> 00:38:33.580
Remember that, Brian?


00:38:33.580 --> 00:38:34.400
- Yeah.


00:38:34.400 --> 00:38:35.240
- So tenacity is cool.


00:38:35.240 --> 00:38:37.920
You can say, here's a function that may run into trouble.


00:38:37.920 --> 00:38:42.220
If you just put @tenacity.retry on it and it crashes,


00:38:42.220 --> 00:38:44.160
it'll just try it again until it succeeds.


00:38:44.160 --> 00:38:45.980
That's probably a bad idea in production.


00:38:45.980 --> 00:38:48.660
So you might want to put something like stop after this


00:38:48.660 --> 00:38:51.540
or do a little delay between them or do both.


00:38:51.540 --> 00:38:53.300
I was having a race condition.


00:38:53.300 --> 00:38:56.960
We're trying to track when people are attempting to hack,


00:38:56.960 --> 00:38:58.920
talk Python, the training side,


00:38:58.920 --> 00:39:00.860
the Python bite side and all that.


00:39:00.860 --> 00:39:03.160
And it turns out when they're trying to attack your site,


00:39:03.160 --> 00:39:04.260
they're not even nice about it.


00:39:04.260 --> 00:39:06.580
They hit you with a botnet of all sorts of stuff.


00:39:06.580 --> 00:39:08.420
And like lots of stuff happens at once


00:39:08.420 --> 00:39:09.800
and there was this race condition


00:39:09.800 --> 00:39:10.640
that was causing trouble.


00:39:10.640 --> 00:39:14.220
So I put retry, a tenacity.retry, boom,


00:39:14.220 --> 00:39:15.060
solved it perfectly.


00:39:15.060 --> 00:39:15.880
So I just wanted to say,


00:39:15.880 --> 00:39:17.380
I finally got a chance to use this


00:39:17.380 --> 00:39:19.140
to solve some problems, which was pretty cool.


00:39:19.140 --> 00:39:20.420
- That's really cool.


00:39:20.420 --> 00:39:22.500
The other one that's similar to this, which I've used,


00:39:22.500 --> 00:39:24.300
and I think, I don't know if you've used Brian,


00:39:24.300 --> 00:39:26.300
but it's called pytest Flaky.


00:39:26.300 --> 00:39:27.860
- Yeah. - And it's awesome


00:39:27.860 --> 00:39:31.500
because I was working with this time series data historian.


00:39:31.500 --> 00:39:33.900
I had a bunch of integration tests in my last job,


00:39:33.900 --> 00:39:36.580
but you know, network stuff, it would drop out occasionally.


00:39:36.580 --> 00:39:39.700
And so you can do very similar type things


00:39:39.700 --> 00:39:43.380
and wrap your test in an @flaky decorator


00:39:43.380 --> 00:39:45.980
and do similar type stuff and, you know,


00:39:45.980 --> 00:39:49.500
give it three tries or something before you make it fail.


00:39:49.500 --> 00:39:50.740
- Yeah, exactly. That's cool.


00:39:50.740 --> 00:39:52.540
That's what I think mine does three tries


00:39:52.540 --> 00:39:55.980
and it's like randomly a couple of second delay or something.


00:39:55.980 --> 00:39:57.580
Remember that part, Brian, where we talked about,


00:39:57.580 --> 00:39:58.980
it's really cool if people are in the audience


00:39:58.980 --> 00:40:00.740
while we talk about stuff and then get a little feedback.


00:40:00.740 --> 00:40:02.460
So Will McGugan says, "Hey, thanks guys.


00:40:02.460 --> 00:40:03.340
"Can't wait to tell you about it."


00:40:03.340 --> 00:40:04.540
Yeah, congrats, Will, that's awesome.


00:40:04.540 --> 00:40:05.620
Glad to see you out there.


00:40:05.620 --> 00:40:07.580
All right, a couple of other things.


00:40:07.580 --> 00:40:11.660
Did you know that GitHub has a whole new project experience?


00:40:11.660 --> 00:40:12.500
That's pretty awesome.


00:40:12.500 --> 00:40:13.820
Have you seen this?


00:40:13.820 --> 00:40:14.660
- I haven't.


00:40:14.660 --> 00:40:15.500
I haven't seen this.


00:40:15.500 --> 00:40:16.940
- So you know how there's like this Kanban board,


00:40:16.940 --> 00:40:19.700
Kanban board, where you have like columns


00:40:19.700 --> 00:40:21.300
you can move your issues between them.


00:40:21.300 --> 00:40:23.980
So just last week, they came out with this thing


00:40:23.980 --> 00:40:28.420
called a beta projects where it still can be that,


00:40:28.420 --> 00:40:30.620
or it can be like an Excel sort of view


00:40:30.620 --> 00:40:32.820
where you have little dropdown combo boxes.


00:40:32.820 --> 00:40:34.300
Like I wanna move this one in this column


00:40:34.300 --> 00:40:36.680
by going through that mode or as a board,


00:40:36.680 --> 00:40:40.740
or you can categorize based on some specification,


00:40:40.740 --> 00:40:42.660
like show me all the stuff that's in progress


00:40:42.660 --> 00:40:44.860
and then give me that as an Excel sheet


00:40:44.860 --> 00:40:47.820
and all these different views you have for automation.


00:40:47.820 --> 00:40:51.560
and then there's APIs and all sorts of neat stuff in there.


00:40:51.560 --> 00:40:54.460
So if you've been using GitHub projects to do stuff,


00:40:54.460 --> 00:40:55.380
you can check this out.


00:40:55.380 --> 00:40:58.480
It looks like you could move a lot more work


00:40:58.480 --> 00:41:00.860
towards that on the project management side of software


00:41:00.860 --> 00:41:01.700
than you used to.


00:41:01.700 --> 00:41:02.980
- This is really neat, yeah.


00:41:02.980 --> 00:41:06.360
In my previous job, I was using Azure DevOps.


00:41:06.360 --> 00:41:08.020
I was always wondering when some of those features


00:41:08.020 --> 00:41:08.980
might move to GitHub.


00:41:08.980 --> 00:41:10.380
I don't know if that's what happened here,


00:41:10.380 --> 00:41:13.500
but being able to have this type of project management


00:41:13.500 --> 00:41:17.560
in there for this type of things, it's really, really great.


00:41:17.560 --> 00:41:18.780
- Yeah, super cool.


00:41:18.780 --> 00:41:20.580
- Yeah, one of the things I love about stuff like this


00:41:20.580 --> 00:41:23.940
is because even, I mean, yes, a lot of companies


00:41:23.940 --> 00:41:25.980
do their project management on,


00:41:25.980 --> 00:41:29.360
or projects on in GitHub or places like that,


00:41:29.360 --> 00:41:33.540
but also open source projects often have,


00:41:33.540 --> 00:41:37.620
they're often have the same needs of project management


00:41:37.620 --> 00:41:41.020
as private commercial projects, so.


00:41:41.020 --> 00:41:42.260
- Yeah.


00:41:42.260 --> 00:41:44.340
- I personally, I only have a few open source


00:41:44.340 --> 00:41:49.140
small projects that are kind of personal and no one would probably want to use them.


00:41:49.140 --> 00:41:56.280
But even just keeping notes about to do's and future stuff and it would be really nice.


00:41:56.280 --> 00:41:58.340
Just for future you if nothing else, right?


00:41:58.340 --> 00:41:59.340
Yeah.


00:41:59.340 --> 00:42:00.340
Awesome.


00:42:00.340 --> 00:42:01.340
Okay, so this is cool.


00:42:01.340 --> 00:42:03.940
Now the last, yeah, this last thing I want to talk about is Markdown.


00:42:03.940 --> 00:42:08.780
So Roger Turrell turned me on to this.


00:42:08.780 --> 00:42:11.700
is this new Markdown editor,


00:42:11.700 --> 00:42:13.420
that's cross platform, yes,


00:42:13.420 --> 00:42:15.940
cross platform called Typora.


00:42:15.940 --> 00:42:19.940
And we all spend so much time in Markdown that,


00:42:19.940 --> 00:42:21.420
just wow, this thing is incredible.


00:42:21.420 --> 00:42:22.860
It's not super expensive


00:42:22.860 --> 00:42:25.340
and it looks like a standard Markdown editor.


00:42:25.340 --> 00:42:29.260
So you write Markdown and it gives you a whizzy wig,


00:42:29.260 --> 00:42:30.460
you know, what you see is what you get,


00:42:30.460 --> 00:42:31.900
style of programming,


00:42:31.900 --> 00:42:34.380
which is not totally unexpected, right?


00:42:34.380 --> 00:42:36.860
But what is super cool is the way


00:42:36.860 --> 00:42:38.020
in which you interact with it.


00:42:38.020 --> 00:42:40.660
and actually I am going to show you real quick.


00:42:40.660 --> 00:42:43.980
So you can see it and then you can tell people like,


00:42:43.980 --> 00:42:45.300
what do you think about this?


00:42:45.300 --> 00:42:47.820
Here, I think that's it, back.


00:42:47.820 --> 00:42:49.420
- Waiting. - There, okay, yeah.


00:42:49.420 --> 00:42:52.340
So here's a Markdown file for my course,


00:42:52.340 --> 00:42:53.820
just the practices and whatever.


00:42:53.820 --> 00:42:54.660
You can say, you know what,


00:42:54.660 --> 00:42:57.620
I would like to view that in code style, right?


00:42:57.620 --> 00:42:58.460
Well, that's kind of cool.


00:42:58.460 --> 00:43:01.060
We want to edit this, you click here and it becomes.


00:43:01.060 --> 00:43:02.260
- Ooh, comes Markdown.


00:43:02.260 --> 00:43:04.660
- Becomes Markdown, but this is a boring file.


00:43:04.660 --> 00:43:07.900
So let's see about, it has a whole file system


00:43:07.900 --> 00:43:10.220
that navigates like through your other markdown stuff,


00:43:10.220 --> 00:43:13.020
hierarchically, so like here, chapter eight's a good one.


00:43:13.020 --> 00:43:14.740
So we go over to chapter eight on this,


00:43:14.740 --> 00:43:16.060
and now you can see some more stuff.


00:43:16.060 --> 00:43:18.340
Like you can go to set these headings and whatnot,


00:43:18.340 --> 00:43:21.940
but if you go to images, like you can set a caption,


00:43:21.940 --> 00:43:23.580
and then you could even change the image,


00:43:23.580 --> 00:43:25.980
like right here, if it were a PNG, it's not,


00:43:25.980 --> 00:43:28.500
but so I'll put it back as JPEG, and then it comes back.


00:43:28.500 --> 00:43:30.660
You can come down and write a code fence,


00:43:30.660 --> 00:43:36.600
use the right symbol, and you can say def A, right, whatever,


00:43:36.600 --> 00:43:37.760
And then you pick a language.


00:43:37.760 --> 00:43:39.560
Isn't that, isn't that dope?


00:43:39.560 --> 00:43:41.220
Oh, this is so good.


00:43:41.220 --> 00:43:45.160
So if, if you end up writing a lot of Markdown and if you need to get back,


00:43:45.160 --> 00:43:48.180
you just, go back and switch back to raw Markdown and then


00:43:48.180 --> 00:43:49.280
go back to this fancy style.


00:43:49.280 --> 00:43:53.320
I think this is really a cool way to work on Markdown.


00:43:53.320 --> 00:43:58.480
I'm actually working on a book with Roger and, it's got tons of Markdown


00:43:58.480 --> 00:44:01.440
and it's been a real joy to actually use this thing on it.


00:44:01.440 --> 00:44:02.240
So yeah.


00:44:02.240 --> 00:44:03.920
Does it have BI mode?


00:44:03.920 --> 00:44:05.040
Probably not.


00:44:05.560 --> 00:44:07.880
I don't know about that, but it has themes.


00:44:07.880 --> 00:44:13.760
I can do like a night mode or I can do like a newspaper mode or take your pick.


00:44:13.760 --> 00:44:15.200
It's pretty cool.


00:44:15.200 --> 00:44:19.120
>> The weirdo grad student in me is upset that this isn't LaTeX.


00:44:19.120 --> 00:44:21.080
>> It has built-in LaTeX.


00:44:21.080 --> 00:44:23.000
>> Oh, that's not a lot of stuff.


00:44:23.000 --> 00:44:25.800
>> Yeah, you can do inline LaTeX and there's


00:44:25.800 --> 00:44:28.200
a bunch of settings you can set for the LaTeX.


00:44:28.200 --> 00:44:31.560
It's got a whole math section in there.


00:44:31.560 --> 00:44:32.800
>> Oh, that's sweet. Okay.


00:44:32.800 --> 00:44:33.720
>> Yeah, let's see.


00:44:33.720 --> 00:44:35.840
- Am I the only person that went all the way


00:44:35.840 --> 00:44:37.900
through college pronouncing it latex?


00:44:37.900 --> 00:44:39.320
- I did too, but I just learned


00:44:39.320 --> 00:44:41.120
that the cool way of saying latex.


00:44:41.120 --> 00:44:42.240
- It's latex, yeah.


00:44:42.240 --> 00:44:45.000
It's French, no, I don't know.


00:44:45.000 --> 00:44:48.400
But no, yeah, it has support for like chemistry settings,


00:44:48.400 --> 00:44:51.160
like inline latex and math and all sides of good stuff.


00:44:51.160 --> 00:44:54.000
So yeah, I'm telling you, this thing's pretty slick.


00:44:54.000 --> 00:44:56.680
All right, well, I gotta do my screen share back


00:44:56.680 --> 00:44:58.960
because so you all can see the joke


00:44:58.960 --> 00:45:02.320
because the joke is very good and we're gonna cover it.


00:45:02.320 --> 00:45:03.520
- Where's the joke? - But it's at the end.


00:45:03.520 --> 00:45:05.320
It's at the end, so if people don't wanna listen to the joke,


00:45:05.320 --> 00:45:06.680
they don't have to.


00:45:06.680 --> 00:45:08.240
Brian, I blew it.


00:45:08.240 --> 00:45:10.120
- You did? - I blew it, I blew it.


00:45:10.120 --> 00:45:11.840
Before we move off the Markdown thing though,


00:45:11.840 --> 00:45:14.040
Anthony Shaw says, "Editorial for iPhone and iPad


00:45:14.040 --> 00:45:15.960
"is really nice too."


00:45:15.960 --> 00:45:16.800
Cool.


00:45:16.800 --> 00:45:19.260
So, but let's do the joke.


00:45:19.260 --> 00:45:22.600
So I blew it because I was saving this all year.


00:45:22.600 --> 00:45:24.960
I saw this like last March,


00:45:24.960 --> 00:45:27.680
and I'm like, this is gonna be so good for Christmas.


00:45:27.680 --> 00:45:30.360
And then we kind of like had already recorded the episode,


00:45:30.360 --> 00:45:32.400
we're not gonna do it, we'll just take a break over.


00:45:32.400 --> 00:45:33.600
So we didn't have a chance to do it.


00:45:33.600 --> 00:45:35.920
So people are going to have to go back


00:45:35.920 --> 00:45:38.020
just a little tiny bit for this one.


00:45:38.020 --> 00:45:39.120
Are you ready?


00:45:39.120 --> 00:45:39.960
- Yes.


00:45:39.960 --> 00:45:41.100
- Matt, you ready?


00:45:41.100 --> 00:45:41.940
- Yeah.


00:45:41.940 --> 00:45:43.720
- So this goes, this sort of a data,


00:45:43.720 --> 00:45:45.920
database developer type thing here.


00:45:45.920 --> 00:45:50.360
And it's on a, I don't know why it's on a printout.


00:45:50.360 --> 00:45:54.880
But anyway, it's called SQL clause as in SQL clause.


00:45:54.880 --> 00:45:57.960
So it's, he's making a database, he's sorting it twice,


00:45:57.960 --> 00:46:01.960
select star from contacts where behavior equals nice.


00:46:01.960 --> 00:46:04.640
SQL clause is coming to town.


00:46:04.640 --> 00:46:05.480
- Nice.


00:46:05.480 --> 00:46:07.960
- It would have been so good for Christmas,


00:46:07.960 --> 00:46:09.840
but we can't keep it another year.


00:46:09.840 --> 00:46:10.680
I gotta get it out for television.


00:46:10.680 --> 00:46:11.500
- You gotta sing it.


00:46:11.500 --> 00:46:14.360
♪ SQL clause is coming to town ♪


00:46:14.360 --> 00:46:16.440
- Yep, exactly.


00:46:16.440 --> 00:46:18.420
- Okay, I wanna share a joke


00:46:18.420 --> 00:46:20.080
that I don't have a picture for.


00:46:20.080 --> 00:46:21.180
- All right, do it.


00:46:21.180 --> 00:46:23.800
- But my daughter made this up last week.


00:46:23.800 --> 00:46:24.720
I think she made it up,


00:46:24.720 --> 00:46:27.120
but it's just been cracking me up for,


00:46:27.120 --> 00:46:28.620
and I've been telling it to everybody.


00:46:28.620 --> 00:46:30.480
So it's a short one.


00:46:30.480 --> 00:46:33.720
Imagine you walk into a room and there's a line of people


00:46:33.720 --> 00:46:36.600
all lined up on one side, that's it.


00:46:36.600 --> 00:46:38.440
That's the punchline.


00:46:38.440 --> 00:46:39.280
- I love it.


00:46:39.280 --> 00:46:41.580
Nice.


00:46:41.580 --> 00:46:46.960
We had my cookie candle last time.


00:46:46.960 --> 00:46:49.520
My kid always eats cookies.


00:46:49.520 --> 00:46:52.000
- We've got a dad joke of the day channel


00:46:52.000 --> 00:46:55.500
in our slack at work and it makes me oof every time.


00:46:55.500 --> 00:46:58.600
- Nice.


00:46:58.600 --> 00:46:59.760
- Nice, okay.


00:46:59.760 --> 00:47:02.120
- All right, nice to see everybody.


00:47:02.120 --> 00:47:03.640
Thanks Matt for joining the show.


00:47:03.640 --> 00:47:04.800
- Thank you for having me.


00:47:04.800 --> 00:47:06.280
- Good to see you Michael again as always.


00:47:06.280 --> 00:47:07.720
- Yeah, good to see you.


00:47:07.720 --> 00:47:08.680
Thank you, thank you.


00:47:08.680 --> 00:47:10.480
Thanks for listening to Python Bytes.


00:47:10.480 --> 00:47:13.360
Follow the show on Twitter via @PythonBytes.


00:47:13.360 --> 00:47:16.480
That's Python Bytes as in B-Y-T-E-S.


00:47:16.480 --> 00:47:19.360
Get the full show notes over at PythonBytes.fm.


00:47:19.360 --> 00:47:21.240
If you have a news item we should cover,


00:47:21.240 --> 00:47:24.480
just visit PythonBytes.fm and click submit in the nav bar.


00:47:24.480 --> 00:47:26.800
We're always on the lookout for sharing something cool.


00:47:26.800 --> 00:47:28.760
If you wanna join us for the live recording,


00:47:28.760 --> 00:47:31.060
just visit the website and click live stream


00:47:31.060 --> 00:47:34.240
to get notified of when our next episode goes live.


00:47:34.240 --> 00:47:37.600
That's usually happening at noon Pacific on Wednesdays


00:47:37.600 --> 00:47:38.600
over at YouTube.


00:47:38.600 --> 00:47:40.680
On behalf of myself and Brian Okken,


00:47:40.680 --> 00:47:42.000
this is Michael Kennedy.


00:47:42.000 --> 00:47:44.220
Thank you for listening and sharing this podcast


00:47:44.220 --> 00:47:45.880
with your friends and colleagues.

