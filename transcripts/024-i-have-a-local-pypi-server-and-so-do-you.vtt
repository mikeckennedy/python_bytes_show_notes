
00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes. It's episode 24 and we are going to deliver


00:00:05.600 --> 00:00:11.280
Python news and headlines directly to your earbuds. This episode is recorded on


00:00:11.280 --> 00:00:17.080
May 2nd, 2017 and is brought to you by Rollbar. I'm Michael Kennedy and I'm


00:00:17.080 --> 00:00:21.560
Brian Okken and we're here to bring you a bunch of Python news but this time


00:00:21.560 --> 00:00:25.640
it's a little different. Normally we're broadcasting from two secret locations


00:00:25.640 --> 00:00:29.520
in Portland, Oregon but this time Brian you're dialing from slightly farther


00:00:29.520 --> 00:00:33.520
- Yeah, I'm just south, what, southeast of Munich today.


00:00:33.520 --> 00:00:35.520
- Right on, well, welcome to Europe.


00:00:35.520 --> 00:00:38.520
Let's start with learning Python out of Munich.


00:00:38.520 --> 00:00:41.520
- Yeah, so this is one of the, I think a listener


00:00:41.520 --> 00:00:44.520
of the show contacted us, said he wrote


00:00:44.520 --> 00:00:48.520
a learning Python series, but he wrote it


00:00:48.520 --> 00:00:52.520
for a group called Robotics and Beyond,


00:00:52.520 --> 00:00:56.520
and it's a STEM educational space, which really looks cool.


00:00:56.520 --> 00:01:00.600
But he's, I think it looks like a nice tutorial


00:01:00.600 --> 00:01:05.360
and he's publishing it on Dan Bader's site, dbader.org.


00:01:05.360 --> 00:01:07.840
And the first in the series is,


00:01:07.840 --> 00:01:11.840
let's program with Python statements, variables, and loops.


00:01:11.840 --> 00:01:15.040
And I think he's coming at it from a space of,


00:01:15.040 --> 00:01:17.640
if you, yeah, you're just really getting started,


00:01:17.640 --> 00:01:19.480
haven't done much.


00:01:19.480 --> 00:01:22.440
And I like, he's even talking about,


00:01:22.440 --> 00:01:24.840
goes through even what is programming.


00:01:24.840 --> 00:01:27.960
he's assuming people haven't done programming before.


00:01:27.960 --> 00:01:30.640
So talking about how it's telling people


00:01:30.640 --> 00:01:33.440
how you're telling the computer how to do steps.


00:01:33.440 --> 00:01:38.220
And you know, it's hard for me to put my head back


00:01:38.220 --> 00:01:40.180
in the space of new to programming,


00:01:40.180 --> 00:01:43.340
but I think this is, it looks like something


00:01:43.340 --> 00:01:46.660
that might be good for, I don't know what age group,


00:01:46.660 --> 00:01:48.060
but it'd be good.


00:01:48.060 --> 00:01:49.700
- Yeah, well, we're gonna talk about


00:01:49.700 --> 00:01:50.740
a lot of different age groups,


00:01:50.740 --> 00:01:53.040
but way to go, Doug, that's awesome.


00:01:53.040 --> 00:01:56.280
it's really hard to get rid of the curse of knowledge, right?


00:01:56.280 --> 00:01:57.120
Once you've learned a thing,


00:01:57.120 --> 00:01:59.000
it's really hard to see it with fresh eyes


00:01:59.000 --> 00:02:00.920
and understand the challenges and stuff.


00:02:00.920 --> 00:02:02.880
So that's really cool.


00:02:02.880 --> 00:02:05.540
And don't you wish something like robotics


00:02:05.540 --> 00:02:07.280
and beyond existed when you were a kid?


00:02:07.280 --> 00:02:08.320
- Yeah, I do.


00:02:08.320 --> 00:02:10.320
And one of the things that I like also


00:02:10.320 --> 00:02:12.240
about having lots of different people


00:02:12.240 --> 00:02:15.320
tackle the new to programming space


00:02:15.320 --> 00:02:17.240
is that everybody learns differently.


00:02:17.240 --> 00:02:19.120
So you might look at one series and go,


00:02:19.120 --> 00:02:20.240
"Man, I just don't get it."


00:02:20.240 --> 00:02:22.760
And then look at somebody else's and it just clicks.


00:02:22.760 --> 00:02:25.200
Like this one uses turtle graphics and stuff.


00:02:25.200 --> 00:02:28.000
Well, I haven't seen people use turtle graphics


00:02:28.000 --> 00:02:30.600
very much recently, but so that's kind of fun.


00:02:30.600 --> 00:02:32.480
- Oh yeah, very cool.


00:02:32.480 --> 00:02:33.320
Nice.


00:02:33.320 --> 00:02:34.140
All right, that's a great one.


00:02:34.140 --> 00:02:34.980
So check that out.


00:02:34.980 --> 00:02:37.680
If people ask you for how to get started programming,


00:02:37.680 --> 00:02:39.960
right, maybe kids, there's a lot of good options.


00:02:39.960 --> 00:02:40.940
Here's one more.


00:02:40.940 --> 00:02:44.160
So speaking of learning to program,


00:02:44.160 --> 00:02:47.940
I picked one that is an actual academic paper,


00:02:47.940 --> 00:02:49.320
but I felt it was pretty interesting.


00:02:49.320 --> 00:02:50.560
This is done by Phil Guo.


00:02:50.560 --> 00:02:52.560
I've had him on Talk Python a few times.


00:02:52.560 --> 00:03:00.280
In this one, he's talking about helping older adults learn to become programmers or become


00:03:00.280 --> 00:03:02.720
more proficient in programming.


00:03:02.720 --> 00:03:08.140
Like what you were just talking about, there's a lot of, "Hey, you're a young kid.


00:03:08.140 --> 00:03:11.600
You want to get started with robots and programming, and here's how you do it, and we'll get you


00:03:11.600 --> 00:03:15.620
going to launch your career and stuff."


00:03:15.620 --> 00:03:22.820
said, like so many of these resources are focused on the young, you know, teenage to


00:03:22.820 --> 00:03:26.740
early twenties group starting their career.


00:03:26.740 --> 00:03:33.900
But you know, how much do we really know about people who are 65 to 80, 60 to 85 years old


00:03:33.900 --> 00:03:35.740
who are just learning to program?


00:03:35.740 --> 00:03:41.820
So he actually wrote a proper academic paper and did a bunch of research on those guys.


00:03:41.820 --> 00:03:42.820
Wow.


00:03:42.820 --> 00:03:43.820
I think that's cool.


00:03:43.820 --> 00:03:44.820
It is really cool.


00:03:44.820 --> 00:03:50.860
I was I guess I wouldn't expect people in from in the like I guess you've listed


00:03:50.860 --> 00:03:55.060
60 to 85 was that the age group of the respondents? That was the age group of


00:03:55.060 --> 00:03:59.340
the respondents yeah if you were outside of that age range mostly younger then


00:03:59.340 --> 00:04:03.860
you were sort of not included right like it was really focused on people who are


00:04:03.860 --> 00:04:09.180
basically either about to retire or who were retired and it looked at a couple


00:04:09.180 --> 00:04:13.780
of different aspects like why are they interested in learning a program what


00:04:13.780 --> 00:04:18.100
What challenges do they have that they share with everyone who's learning a program?


00:04:18.100 --> 00:04:19.100
What's a variable?


00:04:19.100 --> 00:04:20.100
Ah, what's a pointer?


00:04:20.100 --> 00:04:21.100
Right?


00:04:21.100 --> 00:04:25.820
Everybody suffers that, but there's also specific challenges for that age group.


00:04:25.820 --> 00:04:31.860
And then also, just what are they using to learn and some of the lessons on how maybe


00:04:31.860 --> 00:04:34.180
we can make the whole environment better for those guys as well.


00:04:34.180 --> 00:04:35.180
>>TYLER: I think that's great.


00:04:35.180 --> 00:04:36.180
>>DANIEL: Yeah, I do too.


00:04:36.180 --> 00:04:41.060
So I think it's interesting to look at what some of the reasons why people in this age


00:04:41.060 --> 00:04:43.580
group were learning to program.


00:04:43.580 --> 00:04:47.860
Some of them just said, "Look, I'm now retiring and I've always wanted to learn to program.


00:04:47.860 --> 00:04:51.220
Maybe I did something technical, maybe I was a scientist, but I never really got around


00:04:51.220 --> 00:04:54.300
to really learning to programming."


00:04:54.300 --> 00:04:55.540
That might be one reason.


00:04:55.540 --> 00:04:57.420
Another was connecting with grandchildren.


00:04:57.420 --> 00:05:02.780
A lot of these folks have children who are maybe taking this robotics and beyond type


00:05:02.780 --> 00:05:06.460
course and they're like, "Hey, I would love to do that with my grandchild, but I got to


00:05:06.460 --> 00:05:08.620
learn Python myself."


00:05:08.620 --> 00:05:12.880
Another big opportunity here is there's a pretty big gap between people can do programming


00:05:12.880 --> 00:05:14.640
and people are teaching kids.


00:05:14.640 --> 00:05:18.120
And so people in this age group also have a lot of time


00:05:18.120 --> 00:05:21.120
if they're retired to maybe donate, you know,


00:05:21.120 --> 00:05:24.200
an hour or two a week at some place mentoring


00:05:24.200 --> 00:05:25.040
or something like that.


00:05:25.040 --> 00:05:27.640
So maybe they could fill in this like,


00:05:27.640 --> 00:05:30.020
sort of help teachers at high schools and middle schools


00:05:30.020 --> 00:05:31.480
with actually teaching programming


00:05:31.480 --> 00:05:34.760
and not just like the coding class teaches HTML, right?


00:05:34.760 --> 00:05:36.240
Something like that.


00:05:36.240 --> 00:05:39.120
As well as like just keeping mentally active


00:05:39.120 --> 00:05:40.360
and pursuing hobbies, right?


00:05:40.360 --> 00:05:44.620
Like their hobby is airplanes and they are going to create something that works with


00:05:44.620 --> 00:05:45.620
airplanes somehow.


00:05:45.620 --> 00:05:50.140
Yeah, I think and then I could see probably the the maker space getting into that and


00:05:50.140 --> 00:05:52.940
people trying to program Raspberry Pis and stuff like that.


00:05:52.940 --> 00:05:53.940
Yeah, absolutely.


00:05:53.940 --> 00:05:54.940
Absolutely.


00:05:54.940 --> 00:05:58.700
There's a lot of cool stuff, a lot of cool times with like the the MicroPython type of


00:05:58.700 --> 00:05:59.700
stuff as well.


00:05:59.700 --> 00:06:02.380
So if you're interested in this, check this out.


00:06:02.380 --> 00:06:07.100
I'm also planning on doing a full proper Talk Python episode with Philip in a few weeks.


00:06:07.100 --> 00:06:09.980
So we'll catch up on that and go deeper on that show.


00:06:09.980 --> 00:06:10.900
Okay, great.


00:06:10.900 --> 00:06:14.580
Hey, so next up, I've got something that I've been,


00:06:14.580 --> 00:06:16.780
we talked about, I can't even remember what episode.


00:06:16.780 --> 00:06:21.680
I was looking for a good way to have a local PyPI server,


00:06:21.680 --> 00:06:25.480
just like, so you can sort of not have to go out


00:06:25.480 --> 00:06:28.300
onto PyPI all the time.


00:06:28.300 --> 00:06:30.420
And especially on the plane trip,


00:06:30.420 --> 00:06:31.380
when I was flying over here,


00:06:31.380 --> 00:06:33.220
I knew I wouldn't have an internet connection.


00:06:33.220 --> 00:06:36.100
So I wanted to make sure I had a cache


00:06:36.100 --> 00:06:38.900
of all of the packages I needed


00:06:38.900 --> 00:06:41.380
for while I was programming on the plane.


00:06:41.380 --> 00:06:43.940
And I don't know when this crept in,


00:06:43.940 --> 00:06:47.340
but there's, pip has download now,


00:06:47.340 --> 00:06:50.560
and I don't think it used to always have that.


00:06:50.560 --> 00:06:52.740
But you can just, and I've got the,


00:06:52.740 --> 00:06:55.980
I put just the few lines of code you need in our show notes,


00:06:55.980 --> 00:06:59.140
but it's just, you go to a directory you want,


00:06:59.140 --> 00:07:02.180
and you type pip download in some package,


00:07:02.180 --> 00:07:05.780
and it downloads that package and all of its dependencies,


00:07:05.780 --> 00:07:06.940
and doesn't install it.


00:07:06.940 --> 00:07:09.740
just stores the wheels in that directory.


00:07:09.740 --> 00:07:10.740
Yeah, that's super cool.


00:07:10.740 --> 00:07:15.780
So you can basically create an offline version of PyPI.


00:07:15.780 --> 00:07:18.140
And it's really quick.


00:07:18.140 --> 00:07:21.260
You can even list multiple packages on the line.


00:07:21.260 --> 00:07:25.680
I knew like the 10 or 12 that I needed and didn't know what their dependencies were and


00:07:25.680 --> 00:07:29.060
just filled up a directory in like 10 minutes or less.


00:07:29.060 --> 00:07:30.300
And then I was ready to go.


00:07:30.300 --> 00:07:36.920
And then you just have to use the-- when you're doing the install, you do the --noindex and


00:07:36.920 --> 00:07:40.880
and dash dash find links and point it to your directory.


00:07:40.880 --> 00:07:42.720
And then the rest is the same.


00:07:42.720 --> 00:07:44.160
You just give it a package.


00:07:44.160 --> 00:07:46.120
And this includes like version numbers.


00:07:46.120 --> 00:07:49.400
So you can have multiple versions in there as well.


00:07:49.400 --> 00:07:52.000
So anyway, just wanted to share that with everybody.


00:07:52.000 --> 00:07:53.000
Nice.


00:07:53.000 --> 00:07:58.080
Do you know if I can, can I give it like a requirements TXT and say download that?


00:07:58.080 --> 00:08:00.320
Download the results that I suspect you can, right?


00:08:00.320 --> 00:08:05.120
Probably pip download dash R requirements, you know, dot TXT, I bet.


00:08:05.120 --> 00:08:06.120
Probably.


00:08:06.120 --> 00:08:08.000
work with requirements files.


00:08:08.000 --> 00:08:09.320
- Nice, okay, this is a cool thing.


00:08:09.320 --> 00:08:12.720
So if you maybe were going to be stuck on an airplane


00:08:12.720 --> 00:08:16.960
and trains and other places for like 18 hours straight,


00:08:16.960 --> 00:08:19.840
you might wanna take some packages with you, right?


00:08:19.840 --> 00:08:20.800
- Yes. - That's awesome.


00:08:20.800 --> 00:08:23.840
Okay, so that's a really, really cool tip there.


00:08:23.840 --> 00:08:27.120
I know there's the DevPi and the actual local


00:08:27.120 --> 00:08:29.300
proper PyPI servers that you can set up


00:08:29.300 --> 00:08:30.960
and just point at the URL, but I didn't know about


00:08:30.960 --> 00:08:33.720
this local download option, so this is great.


00:08:33.720 --> 00:08:36.640
And that the all those other little PyPI servers,


00:08:36.640 --> 00:08:39.160
I know that the setup says that they're really easy,


00:08:39.160 --> 00:08:41.800
but I haven't been able to get it to work for me.


00:08:41.800 --> 00:08:44.940
So I don't know what I'm doing wrong, but anyway,


00:08:44.940 --> 00:08:45.900
so this is easy.


00:08:45.900 --> 00:08:48.880
- Yeah, this definitely like everybody has a directory.


00:08:48.880 --> 00:08:49.940
So they can do it.


00:08:49.940 --> 00:08:52.640
You don't have to have the right infrastructure around it.


00:08:52.640 --> 00:08:53.460
That's cool.


00:08:53.460 --> 00:08:55.500
All right, before we get onto the next item,


00:08:55.500 --> 00:08:59.640
which is about adding features to the Python language itself,


00:08:59.640 --> 00:09:01.280
I want to just say thanks to Rollbar.


00:09:01.280 --> 00:09:02.800
You guys have heard me talk about Rollbar a lot.


00:09:02.800 --> 00:09:07.480
You know that I use rollbar on my websites and really, really like rollbar.


00:09:07.480 --> 00:09:12.280
Basically all you have to do is pip install rollbar, maybe include a line or two in the


00:09:12.280 --> 00:09:15.200
config or set up for your Python web app.


00:09:15.200 --> 00:09:19.100
And it's tracking all these errors and sending you reports and notifications with lots of


00:09:19.100 --> 00:09:21.120
details anytime it happens.


00:09:21.120 --> 00:09:23.520
So these guys are gonna have a booth at PyCon.


00:09:23.520 --> 00:09:25.640
They're gonna be just like us, Brian.


00:09:25.640 --> 00:09:27.560
We're all gonna have booths at PyCon.


00:09:27.560 --> 00:09:30.560
So yeah, I'm gonna have to go get a rollbar sticker for them.


00:09:30.560 --> 00:09:32.440
Yeah, definitely get a rollbar sticker.


00:09:32.440 --> 00:09:33.440
a roll bar shirt.


00:09:33.440 --> 00:09:38.000
I don't know what kind of swag they're, they're bringing into the show, but they want to make


00:09:38.000 --> 00:09:41.640
sure you know there's a booth at role with for robot at PyCon.


00:09:41.640 --> 00:09:45.080
And so drop by and they'll give you a demo and give you some kind of swag to go with


00:09:45.080 --> 00:09:46.080
it.


00:09:46.080 --> 00:09:47.080
Awesome.


00:09:47.080 --> 00:09:48.080
Awesome.


00:09:48.080 --> 00:09:49.080
Yeah.


00:09:49.080 --> 00:09:51.520
So just check them out rollbar.com slash Python bites, get the bootstrap plan for free, which


00:09:51.520 --> 00:09:54.760
is 100,000 events and 180 days of retention.


00:09:54.760 --> 00:09:57.380
And hopefully you don't use up that many errors.


00:09:57.380 --> 00:09:58.960
But if you do, they got you covered.


00:09:58.960 --> 00:09:59.960
All right.


00:09:59.960 --> 00:10:01.500
But you know what would be cool?


00:10:01.500 --> 00:10:05.340
Is if we could have increment and decrement operators


00:10:05.340 --> 00:10:06.180
in Python.


00:10:06.180 --> 00:10:07.840
I mean, we can do plus equals one,


00:10:07.840 --> 00:10:10.360
but think of all the characters we're wasting there.


00:10:10.360 --> 00:10:12.200
What if we could just do plus plus?


00:10:12.200 --> 00:10:13.040
- Yeah.


00:10:13.040 --> 00:10:14.140
- Do you know why Python doesn't have


00:10:14.140 --> 00:10:15.880
increment and decrement operators?


00:10:15.880 --> 00:10:17.280
I have a theory, but I don't actually know.


00:10:17.280 --> 00:10:18.420
- I don't know why.


00:10:18.420 --> 00:10:19.260
Do you?


00:10:19.260 --> 00:10:21.120
- Certainly the language was created after,


00:10:21.120 --> 00:10:24.140
no, I mean, it was created after C and C++, right?


00:10:24.140 --> 00:10:27.320
So it's not like it wasn't known as a possibility.


00:10:27.320 --> 00:10:31.720
I suspect it was to keep it more explicit.


00:10:31.720 --> 00:10:37.400
One of the challenges of plus plus and minus minus and those types of things is a lot of


00:10:37.400 --> 00:10:42.320
languages that support them support two variations, like plus plus variable and variable plus


00:10:42.320 --> 00:10:43.800
plus.


00:10:43.800 --> 00:10:47.760
It's always like, "Okay, well, that increments it and then returns the incremented value


00:10:47.760 --> 00:10:50.320
versus returns the original value and then increment."


00:10:50.320 --> 00:10:51.440
It's confusing.


00:10:51.440 --> 00:10:54.280
Why is increment confusing?


00:10:54.280 --> 00:10:57.480
I suspect, Kuita is just like, all right, just simple.


00:10:57.480 --> 00:11:03.500
It's also like, like in C++, it matters which side of the assignment operator it's on to


00:11:03.500 --> 00:11:06.040
if it's an L value and R value.


00:11:06.040 --> 00:11:08.540
So, yes, all those things.


00:11:08.540 --> 00:11:10.580
And so it doesn't have one.


00:11:10.580 --> 00:11:15.740
But friend of the show, Anthony Shaw said, let's see what it would be like if we tried


00:11:15.740 --> 00:11:16.740
to add one.


00:11:16.740 --> 00:11:21.060
And I think this is cool, because it actually, his article on Medium takes you through step


00:11:21.060 --> 00:11:26.300
by step what it is you need to do to add a new feature to the Python language.


00:11:26.300 --> 00:11:29.820
So basically he writes an article that adds plus plus and minus minus to CPython.


00:11:29.820 --> 00:11:34.060
I like the way he's going with it and also teaching people how to do this.


00:11:34.060 --> 00:11:35.060
It's kind of neat.


00:11:35.060 --> 00:11:39.420
Yeah, it certainly takes some of the mystery of like, well, how would you even start out


00:11:39.420 --> 00:11:40.420
of this?


00:11:40.420 --> 00:11:43.020
So he says, look, there's basically five or six levels.


00:11:43.020 --> 00:11:47.260
So you're going to start by doing a pep to get agreement on what the language feature


00:11:47.260 --> 00:11:48.420
is going to be.


00:11:48.420 --> 00:11:53.700
Then there's a grammar file that describes what the statements in Python are.


00:11:53.700 --> 00:11:59.020
You don't want to just cram it into CPython, the execution engine, because things like


00:11:59.020 --> 00:12:04.060
PyPy and other implementations, you want those to stay consistent.


00:12:04.060 --> 00:12:05.860
There's this grammar file they all share.


00:12:05.860 --> 00:12:07.340
It talks about how to add them.


00:12:07.340 --> 00:12:11.980
It turns out it's super easy to add these new things.


00:12:11.980 --> 00:12:14.260
Then there's the lexer that parses it.


00:12:14.260 --> 00:12:16.540
Lexer that goes through and, sorry, turns it into tokens.


00:12:16.540 --> 00:12:20.300
the parser takes the tokens to abstract syntax trees and then there's a compiler


00:12:20.300 --> 00:12:25.240
actually compiles it to instructions. So he goes through all the steps and shows


00:12:25.240 --> 00:12:31.020
you how it works and even has his attempt to add this feature to Python itself on


00:12:31.020 --> 00:12:35.840
GitHub if you want to check it out. So he's got a working version with plus plus.


00:12:35.840 --> 00:12:42.800
That's pretty cool. Maybe we could get him to add begin and end to blocks.


00:12:42.800 --> 00:12:45.280
Hopefully, he's no.


00:12:45.280 --> 00:12:47.120
And curly braces, we all love the curly braces.


00:12:47.120 --> 00:12:48.120
No, just kidding.


00:12:48.120 --> 00:12:49.760
Okay, so that's awesome.


00:12:49.760 --> 00:12:54.540
Another thing that you brought up that I like is colorful, right?


00:12:54.540 --> 00:13:00.640
So I think so many of the apps that we create in Python are sort of terminal level or CLI


00:13:00.640 --> 00:13:01.640
type apps.


00:13:01.640 --> 00:13:04.280
So people really could do more to make them pretty, right?


00:13:04.280 --> 00:13:07.600
>> Yeah, so I've been working a lot with pytest lately.


00:13:07.600 --> 00:13:12.080
And one of the great benefits of it is the color in the terminal window.


00:13:12.080 --> 00:13:17.380
And working with terminal colors is often not very fun.


00:13:17.380 --> 00:13:23.580
But this Colorful project has actually got a syntax that's pretty darn readable.


00:13:23.580 --> 00:13:29.320
And once you've figured out what colors and what syntax, what different parts of your


00:13:29.320 --> 00:13:32.600
command line interface you want different colors, I don't think you're going to really


00:13:32.600 --> 00:13:37.080
have to care, like really muck with it too much using Colorful.


00:13:37.080 --> 00:13:43.560
And it even has things like piping colors to strings and like different plus and and


00:13:43.560 --> 00:13:47.080
operators that that makes sense with colors.


00:13:47.080 --> 00:13:48.920
And I like what they're going doing with this.


00:13:48.920 --> 00:13:49.920
Yeah, that's cool.


00:13:49.920 --> 00:13:51.000
I do as well.


00:13:51.000 --> 00:13:54.160
And the couple of things that really stood out is nice to me.


00:13:54.160 --> 00:13:59.240
One is the syntax is pretty straightforward on how you use it.


00:13:59.240 --> 00:14:06.520
The fact that you can use hexadecimal so you can just, you know, hash FAA for gray or whatever,


00:14:06.520 --> 00:14:10.760
You can take sort of web colors and plug them in,


00:14:10.760 --> 00:14:11.800
which is really cool.


00:14:11.800 --> 00:14:12.880
And they even have themes,


00:14:12.880 --> 00:14:14.880
like you can set up general themes.


00:14:14.880 --> 00:14:16.280
You can use context managers.


00:14:16.280 --> 00:14:18.760
So in a width block, you can set a color, things like that.


00:14:18.760 --> 00:14:19.840
- Yeah, okay.


00:14:19.840 --> 00:14:20.680
That's neat.


00:14:20.680 --> 00:14:21.760
- Yeah, yeah, pretty sweet.


00:14:21.760 --> 00:14:22.960
I might start using it.


00:14:22.960 --> 00:14:25.100
I've looked at Colorama and some of the other ones


00:14:25.100 --> 00:14:28.200
and they're fine, but it's like, I don't know,


00:14:28.200 --> 00:14:29.560
it's just painful to say like, okay,


00:14:29.560 --> 00:14:33.360
well, I'm gonna take this like enumerated text value


00:14:33.360 --> 00:14:35.920
and concatenate it with my string to make it a color.


00:14:35.920 --> 00:14:37.840
And I think Colorful is a little nicer.


00:14:37.840 --> 00:14:39.920
>> Yeah, I wonder if it's built, I haven't actually tried it.


00:14:39.920 --> 00:14:42.160
I wonder if it's built on top of Colorama.


00:14:42.160 --> 00:14:43.400
>> Yeah, we'll have to look inside.


00:14:43.400 --> 00:14:43.960
>> Anyway.


00:14:43.960 --> 00:14:47.960
>> Speaking of packages, everybody who works on making a Python package,


00:14:47.960 --> 00:14:51.440
they want to add a nice bit of bling, make it fancy looking, right?


00:14:51.440 --> 00:14:54.040
>> Yeah, all the extra little blips and stuff.


00:14:54.040 --> 00:14:59.840
>> Yeah, so there's a lot of things that make a package look professional or


00:14:59.840 --> 00:15:04.320
not professional, but there's this article called Five Steps to


00:15:04.320 --> 00:15:06.640
add the bling factor to your Python package.


00:15:06.640 --> 00:15:08.240
And I thought it was pretty cool.


00:15:08.240 --> 00:15:10.680
I mean, it's certainly not exhaustive.


00:15:10.680 --> 00:15:13.200
And I don't think it's overly prescriptive,


00:15:13.200 --> 00:15:15.160
but it does talk about a few things that you can do


00:15:15.160 --> 00:15:16.120
that are pretty sweet.


00:15:16.120 --> 00:15:18.300
And so I'll just run through the five steps real quick.


00:15:18.300 --> 00:15:20.580
So step one, you can host your documentation


00:15:20.580 --> 00:15:21.960
on read the docs.


00:15:21.960 --> 00:15:22.780
That's nice, right?


00:15:22.780 --> 00:15:24.920
Proper documentation somewhere with search


00:15:24.920 --> 00:15:26.960
and all that kind of stuff.


00:15:26.960 --> 00:15:30.680
Set up continuous integration with Travis CI


00:15:30.680 --> 00:15:32.960
or maybe AppBear or whatever, right?


00:15:32.960 --> 00:15:37.080
But if you're going to set it up, some kind of continuous integration.


00:15:37.080 --> 00:15:41.320
And if you're going to run unit tests, you probably want to know what your code coverage


00:15:41.320 --> 00:15:42.320
is.


00:15:42.320 --> 00:15:46.080
So you can show your code coverage with code cov.


00:15:46.080 --> 00:15:49.800
Obviously if you're going to have a package, if it doesn't live on PyPI, it's almost not


00:15:49.800 --> 00:15:50.800
real, right?


00:15:50.800 --> 00:15:56.160
It's unless there's some weird requirement about like it really has to be set up in some


00:15:56.160 --> 00:16:00.560
bizarre way that it can't be installed there from there.


00:16:00.560 --> 00:16:02.560
It really should be on PyPI, which is great.


00:16:02.560 --> 00:16:04.200
added up there and talks about how to do it.


00:16:04.200 --> 00:16:07.720
It's surprisingly easy to get your package on the PyPI.


00:16:07.720 --> 00:16:10.960
And finally, if you have all these things, you want to have badges, right?


00:16:10.960 --> 00:16:15.880
This thing supports these versions of Python, it's tests are currently passing or not passing,


00:16:15.880 --> 00:16:18.440
it has this level of code coverage, all those things, right?


00:16:18.440 --> 00:16:19.440
Yeah.


00:16:19.440 --> 00:16:23.520
And one of the things that this highlights for that, I guess I always knew, but I don't


00:16:23.520 --> 00:16:28.640
think about it very much is all these different services for open source projects.


00:16:28.640 --> 00:16:29.640
They're free.


00:16:29.640 --> 00:16:30.640
Yeah.


00:16:30.640 --> 00:16:31.640
Every one of those.


00:16:31.640 --> 00:16:36.680
free for them to run it, but that's cool that all that stuff's just there for open source projects.


00:16:36.680 --> 00:16:43.480
Yeah, it's really great. Like, Read the Docs is free. They do have ads on there. I'm not sure


00:16:43.480 --> 00:16:47.880
how targeted the ads are. They're pretty relevant to Python developers. But I do think it's a


00:16:47.880 --> 00:16:52.440
challenge. I know the Read the Docs guys are doing interesting and creative things to fund it. But


00:16:52.440 --> 00:16:58.200
it's, you know, it's non trivial to run it for free for the world. Yeah. And CI.


00:16:58.200 --> 00:17:06.200
Well, they I had talked with Josh Calderon from Travis. And since they, they started out as a


00:17:06.200 --> 00:17:12.040
like open source stuff to start with, and they, they were doing it in their, their hobby time.


00:17:12.040 --> 00:17:17.080
And in the commercial side is now they're, how they're doing it full time, and they have jobs.


00:17:17.080 --> 00:17:23.240
And, and the reason why they maintain the free for open sources, because they got their careers


00:17:23.240 --> 00:17:28.120
from open source, and they want to give back. So that's really cool. So if I had like a private


00:17:28.120 --> 00:17:32.680
GitHub repo, I'd have to pay to get CI on it, but if I have a public one, it's free,


00:17:32.680 --> 00:17:33.680
something like that?


00:17:33.680 --> 00:17:39.400
Yeah, they have an enterprise driver CI so that you can use for closed repos or private


00:17:39.400 --> 00:17:40.400
repos.


00:17:40.400 --> 00:17:41.400
Yeah, private ones.


00:17:41.400 --> 00:17:44.760
So what I thought was cool about this is none of those things are hard, none of those things


00:17:44.760 --> 00:17:48.320
are major, but they all make it, it shows that you care about what you're building,


00:17:48.320 --> 00:17:51.680
so you're more likely to get contributors, people are more likely to drop your package,


00:17:51.680 --> 00:17:52.680
things like that.


00:17:52.680 --> 00:17:56.240
Also nice to have all these together because I can imagine if I wanted to do any of these,


00:17:56.240 --> 00:17:58.300
I'd probably spend an hour or so trying to figure out


00:17:58.300 --> 00:17:59.960
each little bit.


00:17:59.960 --> 00:18:02.320
- Yeah, there's little tips at each one, which is cool.


00:18:02.320 --> 00:18:04.500
All right, well, that's our news for the week, Brian.


00:18:04.500 --> 00:18:06.680
Anything besides the fact that you're just tooling


00:18:06.680 --> 00:18:07.760
around Germany?


00:18:07.760 --> 00:18:10.800
- Well, I think they had, I'm doing management training,


00:18:10.800 --> 00:18:13.580
so maybe I'll finally learn how to become a manager


00:18:13.580 --> 00:18:15.640
after doing it for many years.


00:18:15.640 --> 00:18:17.060
But the-- - Nice.


00:18:17.060 --> 00:18:20.320
- But I was working furiously on the book


00:18:20.320 --> 00:18:25.320
on the plane trip over, and we're still barely on time


00:18:25.320 --> 00:18:29.080
still barely on target for a beta for PyCon.


00:18:29.080 --> 00:18:31.320
- I just looked, PyCon is two weeks away.


00:18:31.320 --> 00:18:32.780
- I can't believe it. - There's not a lot of time.


00:18:32.780 --> 00:18:34.640
- There's not very much time. - I know.


00:18:34.640 --> 00:18:36.160
- Anyway, I still have to order stickers.


00:18:36.160 --> 00:18:37.400
- It's gonna be so fun though.


00:18:37.400 --> 00:18:38.240
- Yeah. - Yeah.


00:18:38.240 --> 00:18:40.680
You still got time, but not a lot of time.


00:18:40.680 --> 00:18:42.380
- Not a lot of time.


00:18:42.380 --> 00:18:43.400
- It's gonna be tons of fun.


00:18:43.400 --> 00:18:46.320
So I'm looking forward to meeting


00:18:46.320 --> 00:18:47.400
a bunch of the listeners there


00:18:47.400 --> 00:18:49.320
and hanging out with you and everyone else.


00:18:49.320 --> 00:18:50.400
- And how about you?


00:18:50.400 --> 00:18:51.320
Anything up with you?


00:18:51.320 --> 00:18:52.280
- Not too much.


00:18:52.280 --> 00:18:54.160
Just thinking about PyCon makes me think


00:18:54.160 --> 00:18:59.040
I got to get a bunch of stuff ready for the conference or a booth and things like that.


00:18:59.040 --> 00:19:00.880
So yeah, it should be a lot of fun.


00:19:00.880 --> 00:19:03.920
Yeah, I can't wait.


00:19:03.920 --> 00:19:05.760
Thank you for listening to Python Bytes.


00:19:05.760 --> 00:19:08.280
Follow the show on Twitter via @PythonBytes.


00:19:08.280 --> 00:19:11.400
That's Python Bytes as in B-Y-T-E-S.


00:19:11.400 --> 00:19:14.700
And get the full show notes at PythonBytes.fm.


00:19:14.700 --> 00:19:18.400
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:19:18.400 --> 00:19:19.400
way.


00:19:19.400 --> 00:19:21.920
We're always on the lookout for sharing something cool.


00:19:21.920 --> 00:19:25.380
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:19:25.380 --> 00:19:28.420
Thank you for listening and sharing this podcast with your friends and colleagues.

