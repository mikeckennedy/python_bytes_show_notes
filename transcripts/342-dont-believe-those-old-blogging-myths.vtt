WEBVTT

00:00:00.000 --> 00:00:01.880
- Hello and welcome to Python Bytes,


00:00:01.880 --> 00:00:03.960
where we deliver Python news and headlines


00:00:03.960 --> 00:00:05.460
directly to your earbuds.


00:00:05.460 --> 00:00:10.460
This is episode 342, recorded June 25th, 2023.


00:00:10.460 --> 00:00:12.460
I'm Michael Kennedy.


00:00:12.460 --> 00:00:13.920
- And I am Brian Okken.


00:00:13.920 --> 00:00:17.300
- And this episode is brought to you by Brian and me.


00:00:17.300 --> 00:00:18.560
Us, our work.


00:00:18.560 --> 00:00:20.720
So support us, support the show,


00:00:20.720 --> 00:00:21.840
keep us doing what we're doing


00:00:21.840 --> 00:00:24.600
by checking out our courses over at Talk Python Training.


00:00:24.600 --> 00:00:26.760
We have a bunch, including a really nice pytest course


00:00:26.760 --> 00:00:27.600
written by Brian.


00:00:27.600 --> 00:00:29.020
Check out the Test to Code podcast,


00:00:29.020 --> 00:00:30.300
the Patreon supporters.


00:00:30.300 --> 00:00:32.780
Brian's got a book as well in pytest.


00:00:32.780 --> 00:00:34.140
You may have heard of this.


00:00:34.140 --> 00:00:35.660
So please, if you check those things out,


00:00:35.660 --> 00:00:36.700
share them with your friends, share,


00:00:36.700 --> 00:00:37.900
recommend them to your coworkers.


00:00:37.900 --> 00:00:39.300
It really makes a difference.


00:00:39.300 --> 00:00:41.820
You can also connect with us on Mastodon.


00:00:41.820 --> 00:00:45.900
You'll see that over on the show notes for every episode.


00:00:45.900 --> 00:00:49.780
And finally, you can join us over at pythonbytes.fm/live


00:00:49.780 --> 00:00:51.460
if you want to be part of the live recording,


00:00:51.460 --> 00:00:55.460
usually, usually, Tuesdays at 11 a.m. Pacific time,


00:00:55.460 --> 00:00:56.340
but not today.


00:00:56.340 --> 00:00:58.460
No, Brian, we're starting nice and early


00:00:58.460 --> 00:01:01.500
because, well, it's vacation time.


00:01:01.500 --> 00:01:03.900
And, well, plumb bum, I think we should just


00:01:03.900 --> 00:01:04.820
get right into it.


00:01:04.820 --> 00:01:09.200
- Sure, plumb bum, let's do it.


00:01:09.200 --> 00:01:12.020
- It's a new saying, it's a new expression.


00:01:12.020 --> 00:01:14.020
Plumb bum, let's just do it.


00:01:14.020 --> 00:01:15.460
- Let's just do it.


00:01:15.460 --> 00:01:18.100
Yeah, I have no idea where this comes from.


00:01:18.100 --> 00:01:20.380
But the, well, I do know where it comes from.


00:01:20.380 --> 00:01:21.580
It was last week.


00:01:21.580 --> 00:01:24.620
Last week we talked about shells,


00:01:24.620 --> 00:01:27.700
and Henry Schreiner said,


00:01:27.700 --> 00:01:29.380
"Hey, you should check out Plumbum.


00:01:29.380 --> 00:01:32.460
It's like what you're talking about, but also neat."


00:01:32.460 --> 00:01:33.580
I did.


00:01:33.580 --> 00:01:35.340
>> We were talking about shh.


00:01:35.340 --> 00:01:37.540
>> Oh, right. We were talking about shh.


00:01:37.540 --> 00:01:39.460
>> Don't tell anyone.


00:01:39.460 --> 00:01:44.260
>> Plumbum, it's a little easier to search for actually than shh.


00:01:44.260 --> 00:01:51.020
What is it? It's a Python library and it's got shell combinations.


00:01:51.020 --> 00:01:53.220
It's for interacting with your environment.


00:01:53.220 --> 00:01:56.220
And there we go, Henry Schreiner, one of the maintainers.


00:01:56.220 --> 00:02:01.060
So it's a tool that you can install


00:02:01.060 --> 00:02:04.740
so that you can interact with your operating system


00:02:04.740 --> 00:02:06.340
and file system and stuff like that


00:02:06.340 --> 00:02:07.740
and all sorts of other things.


00:02:07.740 --> 00:02:11.320
And it's got a little bit different style than,


00:02:11.320 --> 00:02:15.420
so I was taking a look at,


00:02:15.420 --> 00:02:17.980
this kind of like a local command for one,


00:02:17.980 --> 00:02:22.420
the basics are like import from Plumbum, import local,


00:02:22.420 --> 00:02:23.860
And then you can run commands


00:02:23.860 --> 00:02:25.660
as if you were just running a shell,


00:02:25.660 --> 00:02:28.500
but you do this within your Python code.


00:02:28.500 --> 00:02:32.460
And there's also some convenience ones like SH has,


00:02:32.460 --> 00:02:35.220
like LS and grep and things like that.


00:02:35.220 --> 00:02:40.220
But it generally looks like there's more stuff around


00:02:40.220 --> 00:02:44.600
how you operate with a shell normally,


00:02:44.600 --> 00:02:45.960
things like piping.


00:02:45.960 --> 00:02:50.700
So you can, you know, you can pipe one like LS to grep


00:02:50.700 --> 00:02:53.300
to word count or something like that to count files.


00:02:53.300 --> 00:02:55.420
You can, I mean, there's other ways to do it within Python,


00:02:55.420 --> 00:02:58.360
but if you're used to doing it in the shell,


00:02:58.360 --> 00:03:02.740
just wrapping the same work in a Python script, why not?


00:03:02.740 --> 00:03:05.420
Things like, yeah, redirection,


00:03:05.420 --> 00:03:07.240
manipulating your working directory.


00:03:07.240 --> 00:03:10.200
Just all sorts of fun stuff to do with your shell,


00:03:10.200 --> 00:03:11.500
but through Python.


00:03:11.500 --> 00:03:14.460
- The pipe overriding the, you know,


00:03:14.460 --> 00:03:17.980
the pipe operator in Python overwrite sort of


00:03:17.980 --> 00:03:21.020
actually in the language being the same as in the shell,


00:03:21.020 --> 00:03:24.820
it's a little bit like Pathlib doing the divide aspect, right?


00:03:24.820 --> 00:03:26.980
Like we're going to grab some operator and make it,


00:03:26.980 --> 00:03:29.580
that it probably was never really imagined to be used for,


00:03:29.580 --> 00:03:31.340
but we're going to make it, use it to,


00:03:31.340 --> 00:03:33.620
so it looks like what you would actually, you know,


00:03:33.620 --> 00:03:34.940
the abstraction you're representing,


00:03:34.940 --> 00:03:36.100
which is pretty interesting.


00:03:36.100 --> 00:03:38.220
- Yeah, and they could, like this example,


00:03:38.220 --> 00:03:42.300
they have an example in the, the readme of piping LS


00:03:42.300 --> 00:03:44.420
to grep to word count.


00:03:44.420 --> 00:03:47.540
And they, they like define that as a chain.


00:03:47.540 --> 00:03:51.260
and it doesn't even run it, I don't think.


00:03:51.260 --> 00:03:57.620
It just defines this new sequence so you can chain together script commands.


00:03:57.620 --> 00:04:02.940
If you print it, so it has probably a stirrer or


00:04:02.940 --> 00:04:09.100
a wrapper implementation that shows you exactly what all the pipe and the chaining was.


00:04:09.100 --> 00:04:11.020
That's a neat thing for debugging.


00:04:11.020 --> 00:04:12.580
Then when you actually run it,


00:04:12.580 --> 00:04:16.580
then you call that thing like a function and it runs it. That's pretty neat.


00:04:16.580 --> 00:04:21.140
Yeah, it is. You can even do them in line, just put parentheses around them and kind of execute at the end.


00:04:21.140 --> 00:04:22.180
Yeah, pretty interesting.


00:04:22.180 --> 00:04:27.060
Yeah, anyway, just a fun little quick shout out to Plumbum.


00:04:27.060 --> 00:04:33.220
Yeah, if you thought SH was cool last time, you might also check this out, right? They kind of play in similar spaces.


00:04:33.220 --> 00:04:44.260
Yeah, just one of the things I like about Python and the Python community is this variety of different libraries that might solve the same space, but have a different flavor.


00:04:44.260 --> 00:04:46.860
You know, some people like chocolate, some people like vanilla.


00:04:46.860 --> 00:04:48.560
Well, I'm a big fan of caramel.


00:04:48.560 --> 00:04:51.560
So how about we talk about faster CPython?


00:04:51.560 --> 00:04:53.560
[laughs]


00:04:53.560 --> 00:04:55.560
Okay, I'm not--


00:04:55.560 --> 00:04:56.560
[laughs]


00:04:56.560 --> 00:04:58.560
Faster CPython is--


00:04:58.560 --> 00:05:01.860
They're really starting to show some results, right?


00:05:01.860 --> 00:05:05.860
Python 3.11 was 40% faster, I believe, is--


00:05:05.860 --> 00:05:07.860
you know, roughly speaking,


00:05:07.860 --> 00:05:09.860
working with averages and all those things.


00:05:09.860 --> 00:05:14.160
And we've got 3.12 coming with more optimizations.


00:05:14.160 --> 00:05:19.160
And ultimately the faster CPython plan was put together


00:05:19.160 --> 00:05:21.480
and laid out by Mark Shannon.


00:05:21.480 --> 00:05:24.760
And the idea was if we could make improvements


00:05:24.760 --> 00:05:28.160
like 40% faster, but over and over again,


00:05:28.160 --> 00:05:32.280
because of compounding sort of numbers there,


00:05:32.280 --> 00:05:34.840
we'll end up with a really fast CPython,


00:05:34.840 --> 00:05:37.560
a faster one you might say, in five releases,


00:05:37.560 --> 00:05:39.520
five times faster in five releases.


00:05:39.520 --> 00:05:42.320
And so that started really with 3.10,


00:05:42.320 --> 00:05:45.240
We got 3.11, 3.12, not the one that's coming,


00:05:45.240 --> 00:05:48.280
but the one that's coming in a year and a few months, 3.11.


00:05:48.280 --> 00:05:50.240
They're laying out their work for that.


00:05:50.240 --> 00:05:52.920
And it's looking pretty ambitious.


00:05:52.920 --> 00:05:55.880
So in 3.12, they're coming up with ways


00:05:55.880 --> 00:05:57.840
to optimize blocks of code.


00:05:57.840 --> 00:06:00.240
So in 3.11, stepping a little bit back,


00:06:00.240 --> 00:06:03.760
we've got the adaptive specializing interpreter


00:06:03.760 --> 00:06:05.880
or specializing adaptive interpreter.


00:06:05.880 --> 00:06:07.040
I don't have it pulled up in front of me.


00:06:07.040 --> 00:06:08.240
Which order do those words go in?


00:06:08.240 --> 00:06:13.240
But that will allow CPython to replace the byte codes


00:06:13.240 --> 00:06:15.680
with more specific ones.


00:06:15.680 --> 00:06:18.960
So if it sees that you're doing a float


00:06:18.960 --> 00:06:21.360
plus a float operation, instead of just doing a word,


00:06:21.360 --> 00:06:23.960
we're doing an abstract plus, you know,


00:06:23.960 --> 00:06:26.720
is that a list plus a string?


00:06:26.720 --> 00:06:28.820
Is that an integer and a float?


00:06:28.820 --> 00:06:30.320
Is that actually a float and a float?


00:06:30.320 --> 00:06:31.760
And if it's a float and a float,


00:06:31.760 --> 00:06:35.040
then we can specialize that to do more specific,


00:06:35.040 --> 00:06:37.840
more efficient types of math and that kind of stuff, right?


00:06:37.840 --> 00:06:43.140
3.12 is supposed to have what they're calling the Tier 1 optimizer,


00:06:43.140 --> 00:06:46.280
and so which optimizes little blocks of code,


00:06:46.280 --> 00:06:47.440
but they're pretty small.


00:06:47.440 --> 00:06:54.020
One of the big things coming here in 3.13 is a Tier 2 optimizer.


00:06:54.020 --> 00:06:56.640
So bigger blocks of code,


00:06:56.640 --> 00:06:59.320
something they're calling super blocks,


00:06:59.320 --> 00:07:01.160
which I'll talk about in just a second.


00:07:01.160 --> 00:07:03.680
The other one that sounds really amazing is


00:07:03.680 --> 00:07:07.000
enabling sub-interpreters from Python code.


00:07:07.000 --> 00:07:14.120
So we know about PEP 554, this has been quite the journey and massive amount of work done by Eric Snow.


00:07:14.120 --> 00:07:20.360
And the idea is, if we have a GIL, then we have serious limits on concurrency, right?


00:07:20.360 --> 00:07:23.800
From a computational perspective, not from an I/O one, potentially.


00:07:23.800 --> 00:07:31.360
And, you know, I'm sitting here on my M2 Pro with 10 cores, and no matter how much, you know, multi-threaded Python I write,


00:07:31.360 --> 00:07:34.000
If it's all computational, all running Python bytecode,


00:07:34.000 --> 00:07:37.640
I get one-tenth of the capability of this machine,


00:07:37.640 --> 00:07:40.360
because of the GIL. So the idea is,


00:07:40.360 --> 00:07:44.540
what if we could have each thread have its own GIL?


00:07:44.540 --> 00:07:48.560
So there's still sure a limit to how much work that can be


00:07:48.560 --> 00:07:50.840
done in that particular thread concurrently,


00:07:50.840 --> 00:07:53.160
but it's one thread dedicated to one core,


00:07:53.160 --> 00:07:56.120
and the other core gets its own other sub-interpreter


00:07:56.120 --> 00:07:58.240
that doesn't share objects in the same way,


00:07:58.240 --> 00:08:00.900
but they can pass them around through certain mechanism.


00:08:00.900 --> 00:08:04.260
Anyway, so this thing has been a journey, like I said,


00:08:04.260 --> 00:08:11.260
created 2017 and it has like all this history up until now.


00:08:11.260 --> 00:08:16.080
Status is, still says draft and now the Python version,


00:08:16.080 --> 00:08:19.160
I think the PEP is approved and work has been done,


00:08:19.160 --> 00:08:21.420
but it's still in pretty early stages.


00:08:21.420 --> 00:08:23.700
That's a pretty big deal is to add that.


00:08:23.700 --> 00:08:30.220
That's supposed to show up in 3.13 in Python code.


00:08:30.220 --> 00:08:37.180
this is a big deal. I think that in 3.12, the work has been done so that it's


00:08:37.180 --> 00:08:42.740
internally possible, it's internally done, if I remember correctly, but there's no way


00:08:42.740 --> 00:08:46.980
to use it from Python, right? Like it's, if you're a creator of interpreters


00:08:46.980 --> 00:08:51.380
basically you can use it. So now the idea is like, let's make this possible for you


00:08:51.380 --> 00:08:55.740
to do things like start a thread and give it its own sub-interpreter, you know,


00:08:55.740 --> 00:08:59.860
copy its objects over, let it create its own, and really do computational


00:08:59.860 --> 00:09:04.020
parallelism, I'm guessing interaction with async and await and those kinds of things.


00:09:04.020 --> 00:09:07.780
And also more improved memory management. Let's see what else.


00:09:07.780 --> 00:09:12.420
Well, so I guess along with that, we're going to have to have some tutorials or something on how


00:09:12.420 --> 00:09:16.180
to how do they the two sub-interpreters share information.


00:09:16.180 --> 00:09:21.780
And yeah, exactly. Yeah, we will. We will. What I would love to see is just, you know,


00:09:21.780 --> 00:09:28.100
on the thread object, give the thread object use sub-isolating, you know, isolate sub-interpreter


00:09:28.100 --> 00:09:31.400
or new subinterpreter equals true, and off it goes.


00:09:31.400 --> 00:09:32.260
That would be excellent.


00:09:32.260 --> 00:09:34.100
And then maybe pickles the object.


00:09:34.100 --> 00:09:36.740
I don't know, we can see how they come up with that.


00:09:36.740 --> 00:09:38.340
But this is good news.


00:09:38.340 --> 00:09:39.620
I think it's the kind of thing


00:09:39.620 --> 00:09:43.460
that's not that important necessarily for a lot of people,


00:09:43.460 --> 00:09:45.300
but for those who it is, it's like,


00:09:45.300 --> 00:09:47.540
you know, really we want this to go a lot faster.


00:09:47.540 --> 00:09:48.900
What can we do here, right?


00:09:48.900 --> 00:09:51.320
- Yeah, that sounds complicated.


00:09:51.320 --> 00:09:52.540
Does it make it go faster?


00:09:52.540 --> 00:09:53.700
Yay, then do it.


00:09:53.700 --> 00:09:57.220
- Well, and you know, compared to a lot


00:09:57.220 --> 00:09:59.540
the other alternatives that we've had for,


00:09:59.540 --> 00:10:02.820
I have 10 cores, why can I only use one of them?


00:10:02.820 --> 00:10:05.380
My Python code without multi-processing.


00:10:05.380 --> 00:10:09.020
This is one of those that doesn't affect


00:10:09.020 --> 00:10:10.860
single-threaded performance.


00:10:10.860 --> 00:10:13.580
It's one of those things that there's not a cost


00:10:13.580 --> 00:10:15.380
to people who don't use it, right?


00:10:15.380 --> 00:10:17.820
Whereas a lot of the other types of options are like,


00:10:17.820 --> 00:10:20.780
well, sure, your code gets 5% slower,


00:10:20.780 --> 00:10:23.020
but you could make it a lot faster


00:10:23.020 --> 00:10:24.300
if you did a bunch more work.


00:10:24.300 --> 00:10:25.140
- Yeah.


00:10:25.140 --> 00:10:26.360
- Yeah, and that's been a hard sell,


00:10:26.360 --> 00:10:29.680
and also a hard line that Guido put in the sand saying like,


00:10:29.680 --> 00:10:34.400
look, we can't make regular non-concurrent Python slower


00:10:34.400 --> 00:10:37.040
for the sake of this more rare,


00:10:37.040 --> 00:10:40.360
but sometimes specialized, right, concurrent stuff.


00:10:40.360 --> 00:10:42.040
So they've done a bunch of foundational work,


00:10:42.040 --> 00:10:44.800
and then the three main things are the Tier 2 Optimizer,


00:10:44.800 --> 00:10:47.440
Subinterpreters for Python, and Memory Management.


00:10:47.440 --> 00:10:49.480
So the Tier 2 Optimizer,


00:10:49.480 --> 00:10:51.520
there's a lot of stuff that you kinda gotta look around.


00:10:51.520 --> 00:10:54.320
So check out the detailed plan.


00:10:54.320 --> 00:10:56.880
they have this thing called copy and patch.


00:10:56.880 --> 00:11:00.200
So you can generate like roughly


00:11:00.200 --> 00:11:02.040
these things called super blocks,


00:11:02.040 --> 00:11:03.360
and then you can implement,


00:11:03.360 --> 00:11:06.200
they're planning to implement basic super block management.


00:11:06.200 --> 00:11:07.760
And Ryan, you may be thinking,


00:11:07.760 --> 00:11:09.600
what are the words you're saying, Michael?


00:11:09.600 --> 00:11:11.720
Duplo, they're not those little Legos,


00:11:11.720 --> 00:11:14.440
no, they're big, big Duplos.


00:11:14.440 --> 00:11:15.280
Well, that's kind of true.


00:11:15.280 --> 00:11:17.360
So they were optimizing smaller pieces,


00:11:17.360 --> 00:11:18.560
like little tiny bits,


00:11:18.560 --> 00:11:20.560
but you can only have so much of an effect


00:11:20.560 --> 00:11:22.960
if you're working on small blocks of code


00:11:22.960 --> 00:11:23.800
that you're optimizing.


00:11:23.800 --> 00:11:26.920
So a superblock is a linear piece of code


00:11:26.920 --> 00:11:29.520
with one entry and multiple exits.


00:11:29.520 --> 00:11:33.440
It differs from a basic block in that it


00:11:33.440 --> 00:11:34.520
may duplicate some code.


00:11:34.520 --> 00:11:36.880
So they just talk about considering


00:11:36.880 --> 00:11:39.440
different types of things you might optimize.


00:11:39.440 --> 00:11:41.320
So I'll link over to--


00:11:41.320 --> 00:11:45.400
but there's a big, long discussion, lots of graphics


00:11:45.400 --> 00:11:46.760
people could go check out.


00:11:46.760 --> 00:11:51.760
So yeah, they're going to add support


00:11:51.760 --> 00:11:54.160
for deoptimization of super blocks,


00:11:54.160 --> 00:11:56.120
enhance the code creation,


00:11:56.120 --> 00:11:57.480
implement the specializer,


00:11:57.480 --> 00:12:00.960
and use this algorithm called copy and patch.


00:12:00.960 --> 00:12:04.760
So implement the copy and patch machine code generator.


00:12:04.760 --> 00:12:07.440
You don't normally hear about a machine code generator, do you?


00:12:07.440 --> 00:12:07.760
>> No.


00:12:07.760 --> 00:12:09.920
>> But either that sounds like a JIT compiler


00:12:09.920 --> 00:12:11.600
or something along those lines.


00:12:11.600 --> 00:12:13.720
Yeah. Anyway, so that's the goal.


00:12:13.720 --> 00:12:17.240
Reduce the time spent in the interpreter by 50 percent.


00:12:17.240 --> 00:12:19.080
They make that happen, that sounds all right to me,


00:12:19.080 --> 00:12:20.120
just for this one feature.


00:12:20.120 --> 00:12:21.080
>> That's pretty neat.


00:12:21.080 --> 00:12:22.080
Yeah, wow.


00:12:22.080 --> 00:12:25.580
Pretty good. And I talked a whole bunch about 7Tripper's final thing.


00:12:25.580 --> 00:12:32.420
The profiling data shows that a large amount of time is actually spent in memory management and the cycle GC.


00:12:32.420 --> 00:12:41.140
All right. And while when Python, I guess, if you do, you know, 40% a bunch of times, it was maybe half this fast before,


00:12:41.140 --> 00:12:45.680
like, because remember, we're like a few years out working back on this plan in 3.9, 3.8.


00:12:45.680 --> 00:12:52.240
Maybe it didn't matter as much because as a percentage of where is CPython spending its time,


00:12:52.240 --> 00:12:54.640
it was not that much time on memory management.


00:12:54.640 --> 00:12:57.380
But as all this other stuff gets faster and faster,


00:12:57.380 --> 00:12:59.720
if they don't do stuff to make the memory management faster,


00:12:59.720 --> 00:13:01.840
it's going to be like, well, half the time is memory management.


00:13:01.840 --> 00:13:02.640
What are we doing?


00:13:02.640 --> 00:13:05.280
So they say as we get the VM faster,


00:13:05.280 --> 00:13:07.640
this is only going to be a larger percent of our time.


00:13:07.640 --> 00:13:08.520
So what can we do?


00:13:08.520 --> 00:13:11.520
So do fewer allocations to improve data structures.


00:13:11.520 --> 00:13:14.560
For example, partial evaluation to reduce


00:13:14.560 --> 00:13:16.180
the number of temporary objects,


00:13:16.180 --> 00:13:18.720
which is part of the other section of their work,


00:13:18.720 --> 00:13:21.300
and spend less time doing cycle GCs.


00:13:21.300 --> 00:13:23.600
This could be as simple as doing fewer calculations


00:13:23.600 --> 00:13:25.440
or as complex as implementing


00:13:25.440 --> 00:13:27.960
a new incremental cycle finder.


00:13:27.960 --> 00:13:29.700
Either way, it sounds pretty cool.


00:13:29.700 --> 00:13:33.040
So that's the plan for a year and a couple of months.


00:13:33.040 --> 00:13:34.040
- Pretty exciting.


00:13:34.040 --> 00:13:37.160
I'm really happy that these people are working on it.


00:13:37.160 --> 00:13:38.000
- I am too.


00:13:38.000 --> 00:13:40.400
It's a team of, I think last time I counted,


00:13:40.400 --> 00:13:41.580
five or six people.


00:13:41.580 --> 00:13:44.680
There's a big group of them around Guido at Microsoft,


00:13:44.680 --> 00:13:46.760
but then also outside.


00:13:46.760 --> 00:13:49.160
So for example, this was written by Mark Shannon,


00:13:49.160 --> 00:13:51.520
who's there, but also Michael Dropboom,


00:13:51.520 --> 00:13:54.040
who was at Mozilla, but I don't remember


00:13:54.040 --> 00:13:55.040
where he is right now.


00:13:55.040 --> 00:13:56.760
- Cool last name, Dropboom.


00:13:56.760 --> 00:13:59.160
- Yes, indeed.


00:13:59.160 --> 00:14:01.620
All right, over to you, Bri.


00:14:01.620 --> 00:14:02.720
- Well, that was pretty heavy.


00:14:02.720 --> 00:14:05.400
I'm gonna do kind of a light topic,


00:14:05.400 --> 00:14:09.200
is we need more people to write blogs about Python.


00:14:09.200 --> 00:14:10.640
It would help us out a lot.


00:14:11.560 --> 00:14:15.240
And one of the ways you could do that is to just head over


00:14:15.240 --> 00:14:18.420
and check out one of the recent articles from Julia Evans


00:14:18.420 --> 00:14:21.160
about some blogging myths.


00:14:21.160 --> 00:14:24.420
And I guess this is a pretty light-hearted topic,


00:14:24.420 --> 00:14:26.500
but also serious.


00:14:26.500 --> 00:14:31.500
But we have some more fun stuff in the extras,


00:14:31.500 --> 00:14:33.540
so don't worry about it.


00:14:33.540 --> 00:14:36.300
Anyway, so there's a few blogging myths,


00:14:36.300 --> 00:14:37.780
and I just wanted to highlight these


00:14:37.780 --> 00:14:39.340
'cause I think it's good to remember


00:14:39.340 --> 00:14:41.580
that these are just wrong.


00:14:41.580 --> 00:14:43.800
So I'll just run through them quickly.


00:14:43.800 --> 00:14:45.220
You don't need to be original.


00:14:45.220 --> 00:14:48.680
You can write content that other people have covered before.


00:14:48.680 --> 00:14:49.900
That's fine.


00:14:49.900 --> 00:14:52.000
You don't need to be an expert.


00:14:52.000 --> 00:14:54.180
Posts don't need to be 100% correct.


00:14:54.180 --> 00:14:58.020
Writing boring posts is bad.


00:14:58.020 --> 00:15:00.420
So these are, oh wait, the myths are,


00:15:00.420 --> 00:15:02.460
the myth is you need to be original.


00:15:02.460 --> 00:15:04.060
That's not true.


00:15:04.060 --> 00:15:06.500
Myth, you need to be an expert.


00:15:06.500 --> 00:15:08.140
Posts need to be 100% correct.


00:15:08.140 --> 00:15:09.940
Also myth, all these are myths.


00:15:09.940 --> 00:15:12.460
Writing boring posts is bad.


00:15:12.460 --> 00:15:15.740
Boring posts are fine if they're informational.


00:15:15.740 --> 00:15:17.940
You need to explain every concept.


00:15:17.940 --> 00:15:19.740
Actually, that will just kill your audience


00:15:19.740 --> 00:15:21.840
if you explain every little detail.


00:15:21.840 --> 00:15:24.200
Page views matter.


00:15:24.200 --> 00:15:27.020
More material is always better.


00:15:27.020 --> 00:15:28.380
Everyone should blog.


00:15:28.380 --> 00:15:30.540
These are all myths, according to Julia.


00:15:30.540 --> 00:15:33.420
And then she goes through a lot of the,


00:15:33.420 --> 00:15:35.380
in detail into each one of them.


00:15:35.380 --> 00:15:38.820
And I kind of want to like hover on the first two


00:15:38.820 --> 00:15:40.940
a little bit of you need to be original


00:15:40.940 --> 00:15:42.740
and you need to be an expert.


00:15:42.740 --> 00:15:47.220
I think it's, when we're learning,


00:15:47.220 --> 00:15:48.660
we're learning about the software,


00:15:48.660 --> 00:15:51.320
a new library or a new technique or something,


00:15:51.320 --> 00:15:53.980
often I'm like, I'm reading Stack Overflow,


00:15:53.980 --> 00:15:57.600
I'm reading blog posts, I'm reading maybe books,


00:15:57.600 --> 00:15:59.780
who knows, reading a lot of stuff on it.


00:15:59.780 --> 00:16:04.620
And you'll get all that stuff in your own perspective


00:16:04.620 --> 00:16:07.980
of how it really is, and then you can sort of,


00:16:07.980 --> 00:16:11.140
like the cheating book report you did in junior high


00:16:11.140 --> 00:16:13.420
where you just rewrote some of the encyclopedia


00:16:13.420 --> 00:16:16.220
but changed it, don't do that.


00:16:16.220 --> 00:16:20.000
But you don't have to come up with a completely new technique


00:16:20.000 --> 00:16:23.940
or something, you can just say, oh, all the stuff I learned,


00:16:23.940 --> 00:16:27.940
I'm gonna put it together and write my workflow now


00:16:27.940 --> 00:16:30.140
or the process, or just a little tiny bit.


00:16:30.140 --> 00:16:32.700
It doesn't have to be long, it can be a short thing


00:16:32.700 --> 00:16:35.020
of like, oh, I finally got this.


00:16:35.020 --> 00:16:36.940
It's way easier than I thought it was.


00:16:36.940 --> 00:16:40.500
And writing little aha moments are great times


00:16:40.500 --> 00:16:43.300
to just write that down as a little blog post.


00:16:43.300 --> 00:16:45.460
The other thing of you don't need to be an expert


00:16:45.460 --> 00:16:48.020
is a lot of us got started blogging


00:16:48.020 --> 00:16:51.780
while we were learning stuff as a way to write that down.


00:16:51.780 --> 00:16:54.420
So you're definitely not an expert as you're learning stuff.


00:16:54.420 --> 00:16:56.340
So go ahead and write about it then.


00:16:56.340 --> 00:16:59.380
And it's a great way to, and that ties into,


00:16:59.380 --> 00:17:01.560
it doesn't need to be 100% correct.


00:17:01.560 --> 00:17:03.820
As you get more traction in your blog,


00:17:03.820 --> 00:17:06.040
people will let you know if you made a mistake.


00:17:06.040 --> 00:17:09.200
And in the Python community, usually it's nice.


00:17:09.200 --> 00:17:12.880
They'll mention, "Hey, this isn't quite right anymore."


00:17:12.880 --> 00:17:15.080
And I kind of love that about our community.


00:17:15.080 --> 00:17:18.740
I wanna go back to the original part,


00:17:18.740 --> 00:17:20.400
is you don't even have to be original


00:17:20.400 --> 00:17:21.800
from your own perspective.


00:17:21.800 --> 00:17:24.120
If you wrote about something like last year,


00:17:24.120 --> 00:17:25.240
go ahead and write about it again.


00:17:25.240 --> 00:17:27.120
If you think it's important and it needs,


00:17:27.120 --> 00:17:29.960
and you sort of have a different way to explain it,


00:17:29.960 --> 00:17:32.800
You can write another blog post about a similar topic.


00:17:32.800 --> 00:17:34.400
- Yeah, I totally agree.


00:17:34.400 --> 00:17:38.360
I also want to add a couple of things.


00:17:38.360 --> 00:17:41.360
I would like to add that your posts, the myth,


00:17:41.360 --> 00:17:43.880
your posts have to be long or like an article


00:17:43.880 --> 00:17:46.160
or you need to spend a lot of time on it.


00:17:46.160 --> 00:17:48.760
The biggest example of this in terms of like


00:17:48.760 --> 00:17:52.200
success behind in the face of just really short stuff


00:17:52.200 --> 00:17:55.800
is John Gruber's Daring Fireball.


00:17:55.800 --> 00:17:58.560
This is an incredibly popular site


00:17:58.560 --> 00:18:00.780
and the entire articles are,


00:18:00.780 --> 00:18:03.120
it starts out with him quoting often someone else,


00:18:03.120 --> 00:18:05.760
and that's like two paragraphs, which is half the article.


00:18:05.760 --> 00:18:07.160
And say, here's my thoughts on this,


00:18:07.160 --> 00:18:08.240
or here's something interesting,


00:18:08.240 --> 00:18:10.600
let's highlight it or something, right?


00:18:10.600 --> 00:18:14.960
And my last blog post was four paragraphs and a picture.


00:18:14.960 --> 00:18:17.600
Maybe five if you count the bonus, right?


00:18:17.600 --> 00:18:19.960
Not too many people paid attention to mine


00:18:19.960 --> 00:18:21.600
'cause the title's You Can Ignore This Post,


00:18:21.600 --> 00:18:23.600
so I don't know, I'm having a hard time


00:18:23.600 --> 00:18:25.120
getting traction with it, but.


00:18:25.120 --> 00:18:26.720
(laughing)


00:18:26.720 --> 00:18:28.560
- I actually, I like that you highlighted


00:18:28.560 --> 00:18:31.520
that John Gruber style.


00:18:31.520 --> 00:18:33.480
There's a lot of different styles of blog posts


00:18:33.480 --> 00:18:36.080
and one of them is reacting to something.


00:18:36.080 --> 00:18:38.760
Instead of, because a lot of people have actually turned,


00:18:38.760 --> 00:18:40.960
you can either comment on somebody's blog


00:18:40.960 --> 00:18:42.920
or talk about it on Reddit or something


00:18:42.920 --> 00:18:45.200
or you can react to it on your own blog.


00:18:45.200 --> 00:18:49.520
- And still link to it on Reddit or something, yeah.


00:18:49.520 --> 00:18:50.340
- Yeah.


00:18:50.340 --> 00:18:52.120
- Not anymore 'cause Reddit went private out of protest


00:18:52.120 --> 00:18:54.360
but somewhere else if you find another place.


00:18:54.360 --> 00:18:55.520
- Or maybe post on Twitter.


00:18:55.520 --> 00:18:57.640
- No, don't do that, let's, Mastodon.


00:18:57.640 --> 00:18:58.480
- It's getting hard.


00:18:58.480 --> 00:18:59.300
- Yeah.


00:18:59.300 --> 00:19:02.160
- Funny.


00:19:02.160 --> 00:19:04.680
I had another one as well, but, oh yeah,


00:19:04.680 --> 00:19:07.640
so this is not a myth, but just another thing,


00:19:07.640 --> 00:19:10.360
another source of inspiration is if you come across


00:19:10.360 --> 00:19:12.080
something that really surprised you,


00:19:12.080 --> 00:19:13.980
like if you're learning, right, kind of to add on,


00:19:13.980 --> 00:19:16.120
like I'm not an expert, is if you come across something,


00:19:16.120 --> 00:19:19.000
like wow, Python really, it broke my expectations.


00:19:19.000 --> 00:19:20.440
I thought this was gonna work this way,


00:19:20.440 --> 00:19:21.960
and it, gosh, it's weird here.


00:19:21.960 --> 00:19:24.040
People, it seems like a lot of people think


00:19:24.040 --> 00:19:26.800
it works this way, but it works in some completely other way.


00:19:26.800 --> 00:19:29.280
You know, that could be a cool little write up.


00:19:29.280 --> 00:19:30.880
Also, you know, people might be searching,


00:19:30.880 --> 00:19:32.560
like, why does Python do this?


00:19:32.560 --> 00:19:35.400
You know, they might find your quote, boring article


00:19:35.400 --> 00:19:37.040
and go, that was really helpful, right?


00:19:37.040 --> 00:19:37.920
So, yeah.


00:19:37.920 --> 00:19:41.000
- I still remember way back when I started writing


00:19:41.000 --> 00:19:44.040
about pytest and unit tests and stuff,


00:19:44.040 --> 00:19:49.040
there was a feature, a behavior of teardown functionality


00:19:49.040 --> 00:19:51.160
that behaved different.


00:19:51.160 --> 00:19:55.860
It was like sort of the same in Nose and UnitTest


00:19:55.860 --> 00:19:57.540
and then different in pytest.


00:19:57.540 --> 00:20:00.120
And I wrote a post that said,


00:20:00.120 --> 00:20:01.620
maybe UnitTest is broken


00:20:01.620 --> 00:20:03.980
because I kind of like this pytest behavior.


00:20:03.980 --> 00:20:07.180
And I got a reaction from some of the pytest contributors


00:20:07.180 --> 00:20:11.680
that said, oh no, we just forgot, didn't test that part.


00:20:11.680 --> 00:20:12.740
So that's wrong.


00:20:12.740 --> 00:20:14.000
We'll fix it.


00:20:14.000 --> 00:20:16.240
(laughing)


00:20:17.340 --> 00:20:21.300
>> What a meta problem that I tested and test the thing.


00:20:21.300 --> 00:20:24.420
>> Yeah. Well, I mean, it was really corner case,


00:20:24.420 --> 00:20:29.460
but I'm a fastidious person when I'm looking at how things work.


00:20:29.460 --> 00:20:34.000
But the other thing I want to say is a lot of things written by


00:20:34.000 --> 00:20:37.860
other people are old enough that they don't work anymore.


00:20:37.860 --> 00:20:39.660
If you're following along with


00:20:39.660 --> 00:20:44.040
a little tutorial and it doesn't work anymore because the language changed,


00:20:44.040 --> 00:20:46.960
or the library they're using is not supported anymore


00:20:46.960 --> 00:20:49.120
or something, that's a great opportunity to go,


00:20:49.120 --> 00:20:52.720
well, I'll just kind of write it in my own language,


00:20:52.720 --> 00:20:56.080
but, or in my own style, but also make it current


00:20:56.080 --> 00:20:58.480
and make it work this time.


00:20:58.480 --> 00:21:00.440
So that's good.


00:21:00.440 --> 00:21:01.400
- Indeed.


00:21:01.400 --> 00:21:02.480
- Anyway, okay.


00:21:02.480 --> 00:21:05.240
Well, let's go back to something more meaty.


00:21:05.240 --> 00:21:07.920
- Yeah, something like AI.


00:21:07.920 --> 00:21:11.920
So I want to tell you about Jupyter AI, Brian.


00:21:11.920 --> 00:21:16.920
Jupiter AI is a pretty interesting project here.


00:21:16.920 --> 00:21:21.360
It's a generative AI extension for JupyterLab.


00:21:21.360 --> 00:21:24.920
I believe it also works in Jupyter and IPython


00:21:24.920 --> 00:21:27.560
as I just IPython prompt as well.


00:21:27.560 --> 00:21:28.760
And so here's the idea.


00:21:28.760 --> 00:21:30.840
There's a couple of things that you can do.


00:21:30.840 --> 00:21:34.200
So Jupyter has this thing called a magic, right?


00:21:34.200 --> 00:21:37.600
Where you put 2% in front of a command


00:21:37.600 --> 00:21:40.680
and it applies it to an extension to Jupyter,


00:21:40.680 --> 00:21:43.180
not trying to run Python code, but it says,


00:21:43.180 --> 00:21:44.800
let me find this thing, in this case,


00:21:44.800 --> 00:21:46.320
you say percent percent AI,


00:21:46.320 --> 00:21:47.760
and then you type some stuff.


00:21:47.760 --> 00:21:50.240
That stuff you type afterwards,


00:21:50.240 --> 00:21:54.400
then turns on a certain behavior for that particular cell.


00:21:54.400 --> 00:21:57.320
This AI magic, literally,


00:21:57.320 --> 00:21:58.960
it's percent percent AI and then they


00:21:58.960 --> 00:22:00.880
call it a magic or it is a magic.


00:22:00.880 --> 00:22:06.280
So AI magic turns Jupyter Notebooks into reproducible,


00:22:06.280 --> 00:22:09.240
it's the interesting aspect, generative AI.


00:22:09.240 --> 00:22:14.240
So think if you could have ChatGPT or open AI type stuff


00:22:14.240 --> 00:22:16.700
clicked right into your notebook.


00:22:16.700 --> 00:22:19.580
So instead of going out to one of these AI chat systems


00:22:19.580 --> 00:22:21.420
and say, I'm trying to do this, tell me how to do this,


00:22:21.420 --> 00:22:22.960
or could you explain that data?


00:22:22.960 --> 00:22:26.920
You just say, hey, that cell above, what happened here?


00:22:26.920 --> 00:22:30.300
Or I'm trying, I have this data frame, do you see it above?


00:22:30.300 --> 00:22:31.880
Okay, good.


00:22:31.880 --> 00:22:34.880
How do I visualize that in a pie chart


00:22:34.880 --> 00:22:38.260
or some, you know, in those donut graphs using Plotly?


00:22:38.260 --> 00:22:40.780
it can just write it for you as the next cell.


00:22:40.780 --> 00:22:42.240
>> Interesting. Okay.


00:22:42.240 --> 00:22:43.100
>> Interesting, right?


00:22:43.100 --> 00:22:43.820
>> Yeah.


00:22:43.820 --> 00:22:46.820
>> It runs anywhere that I Python kernel works.


00:22:46.820 --> 00:22:48.380
So JupyterLab, Jupyter Notebooks,


00:22:48.380 --> 00:22:50.060
Google Colab, VS Code,


00:22:50.060 --> 00:22:52.840
probably PyCharm, although they don't call it out,


00:22:52.840 --> 00:22:55.420
and it has a native UI chat.


00:22:55.420 --> 00:22:58.220
So in JupyterLab, not Jupyter,


00:22:58.220 --> 00:23:00.920
there's a left pane that has stuff.


00:23:00.920 --> 00:23:04.540
It has your files and it has other things that you can do,


00:23:04.540 --> 00:23:07.880
and it will plug in another window on the left there that


00:23:07.880 --> 00:23:09.820
is like a ChatGPT.


00:23:09.820 --> 00:23:11.060
So that's pretty cool.


00:23:11.060 --> 00:23:12.860
Another really interesting difference


00:23:12.860 --> 00:23:17.860
is this thing supports its model or platform agnostic.


00:23:17.860 --> 00:23:23.300
So if you like AI21 or Anthropic or OpenAI


00:23:23.300 --> 00:23:26.340
or SageMaker or HuggingFace, et cetera, et cetera,


00:23:26.340 --> 00:23:28.380
you just say, please use this model.


00:23:28.380 --> 00:23:29.620
And they have these integrations


00:23:29.620 --> 00:23:31.060
across these different things.


00:23:31.060 --> 00:23:33.740
So you, for example, you could be going along saying,


00:23:33.740 --> 00:23:35.980
I'm using OpenAI, I'm using OpenAI.


00:23:35.980 --> 00:23:37.700
That's a terrible answer.


00:23:37.700 --> 00:23:40.740
Let's ask Anthropic the same thing.


00:23:40.740 --> 00:23:42.760
Then right there below, you can use


00:23:42.760 --> 00:23:45.960
these different models and different AI platforms.


00:23:45.960 --> 00:23:47.480
Actually, it did really good on this one.


00:23:47.480 --> 00:23:48.880
I'm just going to keep using that one now for


00:23:48.880 --> 00:23:51.040
this part of my data.


00:23:51.040 --> 00:23:52.640
>> Okay.


00:23:52.640 --> 00:23:55.240
>> Okay. How do you install it?


00:23:55.240 --> 00:23:58.480
You pip install jupyter_ai, and that's it.


00:23:58.480 --> 00:24:02.560
It's good to go. Then you plug in


00:24:02.560 --> 00:24:06.720
like your various API keys or whatever you need to


00:24:06.720 --> 00:24:08.320
as environment variables.


00:24:08.320 --> 00:24:09.500
So they give you an example here.


00:24:09.500 --> 00:24:13.140
So you would say percent percent AI space ChatGPT,


00:24:13.140 --> 00:24:14.600
and then you type something like,


00:24:14.600 --> 00:24:16.340
please generate the Python code to solve


00:24:16.340 --> 00:24:19.440
the 2D Laplace equation in the Cartesian coordinates.


00:24:19.440 --> 00:24:21.820
Solve the equation on the square such and such


00:24:21.820 --> 00:24:23.820
with vanishing boundary conditions, et cetera.


00:24:23.820 --> 00:24:25.620
Plot the solution to matplotlib.


00:24:25.620 --> 00:24:27.420
Also, please provide an explanation.


00:24:27.420 --> 00:24:29.060
And then look at this, it goes da-da-da-da-da-da,


00:24:29.060 --> 00:24:30.260
and down it goes.


00:24:30.260 --> 00:24:33.620
and you can see off it shows you how to implement it.


00:24:33.620 --> 00:24:35.220
And that's only part of that's shown.


00:24:35.220 --> 00:24:36.900
You can also have it do graphics.


00:24:36.900 --> 00:24:39.300
Anything that those models will generate


00:24:39.300 --> 00:24:40.860
is HTML just show up.


00:24:40.860 --> 00:24:43.300
So you could say, create a square using SVG


00:24:43.300 --> 00:24:44.700
with a black border and white fill.


00:24:44.700 --> 00:24:47.780
And then what shows up is not SVG commands


00:24:47.780 --> 00:24:49.380
or like little definition.


00:24:49.380 --> 00:24:51.700
You just get a square because it put it in HTML


00:24:51.700 --> 00:24:53.620
as a response and so that showed up.


00:24:53.620 --> 00:24:58.320
You can even do LaTeX, like dash F is math,


00:24:58.320 --> 00:24:59.860
generate a 2D heat equation


00:24:59.860 --> 00:25:03.340
and you get this partial differential equation thing.


00:25:03.340 --> 00:25:04.180
- Wow.


00:25:04.180 --> 00:25:06.380
- In LaTeX.


00:25:06.380 --> 00:25:09.220
You can even ask it to write a poem, whatever you do.


00:25:09.220 --> 00:25:10.700
So that's one of the--


00:25:10.700 --> 00:25:12.260
- Go back to the poem one.


00:25:12.260 --> 00:25:15.900
Yeah, it says write a poem in the style of variable names.


00:25:15.900 --> 00:25:18.880
So you can have commands with variable,


00:25:18.880 --> 00:25:20.740
insert variable stuff.


00:25:20.740 --> 00:25:22.220
So that's interesting.


00:25:22.220 --> 00:25:23.420
- Mm-hmm, mm-hmm.


00:25:23.420 --> 00:25:26.780
So you can also, Jupiter has inputs and outputs


00:25:26.780 --> 00:25:28.140
like along the left side.


00:25:28.140 --> 00:25:30.080
there's like a nine and a 10,


00:25:30.080 --> 00:25:32.200
and those are like the order they were executed.


00:25:32.200 --> 00:25:36.060
You can say using input of nine,


00:25:36.060 --> 00:25:38.160
which might be the previous cell or something,


00:25:38.160 --> 00:25:39.920
or output of nine,


00:25:39.920 --> 00:25:42.400
take that and go do other things.


00:25:42.400 --> 00:25:44.500
That's how I open this conversation.


00:25:44.500 --> 00:25:48.480
One of the really interesting examples that David Q pointed out,


00:25:48.480 --> 00:25:51.800
there's a nice talk that he gave in a link to in the show notes at


00:25:51.800 --> 00:25:57.280
high data like a week ago was he had written some code,


00:25:57.280 --> 00:25:59.280
Two examples, one he had written some code,


00:25:59.280 --> 00:26:01.960
a bunch of calculations and pandas,


00:26:01.960 --> 00:26:03.280
and then he created a plot,


00:26:03.280 --> 00:26:04.680
but the plot wasn't showing


00:26:04.680 --> 00:26:07.400
because he forgot to call plot.show.


00:26:07.400 --> 00:26:10.000
He asked one of the AIs,


00:26:10.000 --> 00:26:11.920
it depends, you can ask a bunch depending


00:26:11.920 --> 00:26:14.720
which model you tell it to target.


00:26:14.720 --> 00:26:17.040
He said, "Hey, in that previous cell,


00:26:17.040 --> 00:26:18.480
why isn't my plot showing?"


00:26:18.480 --> 00:26:21.840
It said, "Because you forgot to call show."


00:26:21.840 --> 00:26:24.360
Here's an example of your code above,


00:26:24.360 --> 00:26:26.080
but that works and shows the plot.


00:26:26.080 --> 00:26:27.520
>> That's pretty cool for help, right?


00:26:27.520 --> 00:26:28.080
>> Yeah.


00:26:28.080 --> 00:26:30.560
>> Instead of going to Stack Overflow


00:26:30.560 --> 00:26:32.960
or even trying to copy that into one of these AIs,


00:26:32.960 --> 00:26:34.560
you just go, "Hey, that thing I just did,


00:26:34.560 --> 00:26:35.920
it didn't do what I expected."


00:26:35.920 --> 00:26:37.360
Why? Here's your answer.


00:26:37.360 --> 00:26:39.240
Not in a general sense,


00:26:39.240 --> 00:26:41.760
but literally grabbing your data and your code.


00:26:41.760 --> 00:26:42.120
>> Interesting.


00:26:42.120 --> 00:26:43.880
>> Two final things that are interesting here.


00:26:43.880 --> 00:26:48.680
The other one is he had some code that was crashing.


00:26:48.680 --> 00:26:50.640
I can't remember what it was doing,


00:26:50.640 --> 00:26:54.760
but it was throwing some exception and it wasn't working out.


00:26:54.760 --> 00:26:57.200
And so he said, "Why is this code crashing?"


00:26:57.200 --> 00:27:00.120
And it explained what the problem was with the code


00:27:00.120 --> 00:27:02.120
and how to fix it, right?


00:27:02.120 --> 00:27:05.780
So super, super interesting here.


00:27:05.780 --> 00:27:07.600
- I'll have to check that out.


00:27:07.600 --> 00:27:10.080
Yeah, we have that link in the show notes.


00:27:10.080 --> 00:27:12.120
- Yeah, the talk is really, really interesting.


00:27:12.120 --> 00:27:13.600
I'm trying to think, there's one other thing


00:27:13.600 --> 00:27:14.720
that was in that talk.


00:27:14.720 --> 00:27:18.000
It's like a 40-minute talk, so I don't remember all of it.


00:27:18.000 --> 00:27:23.000
Anyway, there's more to it that goes on also beyond this.


00:27:23.000 --> 00:27:24.040
It looks pretty interesting.


00:27:24.040 --> 00:27:28.820
If you live in Jupiter and you think that these AI models


00:27:28.820 --> 00:27:30.040
have something to offer you,


00:27:30.040 --> 00:27:32.840
then this is definitely worth checking out.


00:27:32.840 --> 00:27:36.120
Alvaro says, "You know, as long as it doesn't hallucinate


00:27:36.120 --> 00:27:37.740
"a non-existing package."


00:27:37.740 --> 00:27:41.800
Yeah, I mean, that is the thing.


00:27:41.800 --> 00:27:43.600
What's kind of cool about this is


00:27:43.600 --> 00:27:46.560
like it puts it right into code, right?


00:27:46.560 --> 00:27:48.960
You can run it and see if it does indeed work


00:27:48.960 --> 00:27:49.800
and do what it says.


00:27:49.800 --> 00:27:52.840
So anyway, that's our last.


00:27:52.840 --> 00:27:53.680
Yeah, go ahead.


00:27:53.680 --> 00:27:58.600
Before we move away too much, I was listening to a NPR show


00:27:58.600 --> 00:28:02.540
about talking about AI, and somebody did research,


00:28:02.540 --> 00:28:05.000
I think it was for the Times, New York Times,


00:28:05.000 --> 00:28:09.140
a research project, and found out that there were some,


00:28:09.140 --> 00:28:13.460
sometimes they would ask, what's the first instance


00:28:13.460 --> 00:28:16.480
of this phrase showing up in the newspaper or something?


00:28:16.480 --> 00:28:19.540
And it would make up stuff.


00:28:19.540 --> 00:28:23.260
And even, and they'd say, well, can you, what are those,


00:28:23.260 --> 00:28:25.720
show those examples and it would show snippets


00:28:25.720 --> 00:28:28.480
of fake articles that actually never were there.


00:28:28.480 --> 00:28:29.960
(laughing)


00:28:29.960 --> 00:28:32.280
- It did that for, that's crazy,


00:28:32.280 --> 00:28:35.200
it did that for legal proceedings as well


00:28:35.200 --> 00:28:39.160
and a lawyer cited those cases and got sanctioned


00:28:39.160 --> 00:28:41.520
or whatever lawyers get when they do it wrong.


00:28:41.520 --> 00:28:44.120
- Those are wrong, yeah, don't do that.


00:28:44.120 --> 00:28:47.480
- Also, the final thing that was interesting


00:28:47.480 --> 00:28:51.840
that I now remember that made me pause to think, Brian,


00:28:51.840 --> 00:28:54.980
is you can point it at a directory of files,


00:28:54.980 --> 00:28:59.060
like HTML files, Markdown files, CSV files,


00:28:59.060 --> 00:29:00.980
just like a bunch of files


00:29:00.980 --> 00:29:02.980
that happen to be part of your project


00:29:02.980 --> 00:29:05.060
and you wish it had knowledge of.


00:29:05.060 --> 00:29:07.860
So you can say /learn


00:29:07.860 --> 00:29:11.580
and point it at a sub-directory of your project.


00:29:11.580 --> 00:29:15.220
It will go learn that stuff in those documents.


00:29:15.220 --> 00:29:16.740
- Oh, interesting. - And then you can say,


00:29:16.740 --> 00:29:18.400
okay, now I have questions, right?


00:29:18.400 --> 00:29:21.700
Like, you know, if it learned some statistics


00:29:21.700 --> 00:29:24.860
about a CSV, the example that David gave was


00:29:24.860 --> 00:29:28.020
he had copied all the documentation for Jupiter AI


00:29:28.020 --> 00:29:30.540
over into there and it told it to go learn about itself.


00:29:30.540 --> 00:29:32.460
And then it did, and he could talk to it about it


00:29:32.460 --> 00:29:33.860
based on the documentation.


00:29:33.860 --> 00:29:35.380
- Oh.


00:29:35.380 --> 00:29:37.580
- So if you got a whole bunch of research papers,


00:29:37.580 --> 00:29:40.380
for example, and a guy learned those,


00:29:40.380 --> 00:29:41.580
now I need to ask you questions


00:29:41.580 --> 00:29:44.380
about this astronomy study, okay?


00:29:44.380 --> 00:29:47.500
Who studied this and who found what, you know, whatever,


00:29:47.500 --> 00:29:49.460
right, like these kinds of questions are pretty amazing.


00:29:49.460 --> 00:29:51.100
- Yeah, and actually, some of this stuff


00:29:51.100 --> 00:29:56.060
be super powerful, especially if you can make it not like keep all the information local,


00:29:56.060 --> 00:29:59.140
like again, like, you know, internal company stuff.


00:29:59.140 --> 00:30:03.740
They don't want to like upload all of their source code into the cloud just so they can


00:30:03.740 --> 00:30:05.220
ask it questions about it.


00:30:05.220 --> 00:30:06.640
Yeah, yeah, exactly.


00:30:06.640 --> 00:30:12.180
The other one was to generate starter projects and code based on ideas.


00:30:12.180 --> 00:30:18.980
So you can say generate me a Jupyter notebook that explains how to use matplotlib.


00:30:18.980 --> 00:30:19.980
Okay.


00:30:19.980 --> 00:30:22.820
- Okay, and it'll come over the notebook and it'll do,


00:30:22.820 --> 00:30:24.460
so here's a bunch of different examples


00:30:24.460 --> 00:30:25.920
and here's how you might apply a theme


00:30:25.920 --> 00:30:27.260
and it'll create things.


00:30:27.260 --> 00:30:29.420
And one of the things that they actually have to do


00:30:29.420 --> 00:30:33.620
is they use link chain and AI agents to in parallel


00:30:33.620 --> 00:30:35.460
go break that into smaller things


00:30:35.460 --> 00:30:37.580
that are actually gonna be able to handle


00:30:37.580 --> 00:30:39.340
and send them off to all be done separately


00:30:39.340 --> 00:30:40.180
and then compose them.


00:30:40.180 --> 00:30:41.940
So it'll say, oh, what's that problem?


00:30:41.940 --> 00:30:43.580
Instead of saying what's the notebook,


00:30:43.580 --> 00:30:45.520
it'll say give me an outline


00:30:45.520 --> 00:30:47.260
of how somebody might learn this.


00:30:47.260 --> 00:30:49.700
And then for each step in the outline,


00:30:49.700 --> 00:30:51.900
that's a section in the document


00:30:51.900 --> 00:30:54.460
that it'll go have the AIs generate those sections.


00:30:54.460 --> 00:30:56.080
And it's like a smaller problem


00:30:56.080 --> 00:30:57.300
that seem to get better results.


00:30:57.300 --> 00:31:01.140
Anyway, this is a way bigger project than just like,


00:31:01.140 --> 00:31:04.080
maybe I can pipe some information to ChatGPT.


00:31:04.080 --> 00:31:07.980
There's a lot of crazy stuff going on here.


00:31:07.980 --> 00:31:10.460
The people who live in Jupyter might wanna check out.


00:31:10.460 --> 00:31:11.820
- It is pretty neat.


00:31:11.820 --> 00:31:14.720
I was not around the Jupyter stuff,


00:31:14.720 --> 00:31:18.460
but I was thinking that a lot of software work


00:31:18.460 --> 00:31:21.660
is the maintenance, not the writing it in the first place.


00:31:21.660 --> 00:31:24.820
So what we've done is taken the fun part


00:31:24.820 --> 00:31:27.520
of making something new and giving it to a computer,


00:31:27.520 --> 00:31:31.780
and we'll all be just software maintainers afterwards.


00:31:31.780 --> 00:31:33.580
- Exactly, we'll just be plumbers.


00:31:33.580 --> 00:31:36.260
(laughing)


00:31:36.260 --> 00:31:38.540
Sewer overflowed again, call the plumber.


00:31:38.540 --> 00:31:40.860
No, I don't wanna go in there.


00:31:40.860 --> 00:31:42.960
- And also, I'm just imagining a whole bunch


00:31:42.960 --> 00:31:47.020
of new web apps showing up that are generated by ideas,


00:31:47.020 --> 00:31:49.860
and they kind of work, but nobody knows how to fix them.


00:31:49.860 --> 00:31:53.100
- Sure, I think that you're right


00:31:53.100 --> 00:31:55.200
and that that's going to be what's gonna happen a lot,


00:31:55.200 --> 00:31:58.240
but you technically could come to an existing notebook


00:31:58.240 --> 00:32:01.420
and add a cell below it and go, I don't really understand,


00:32:01.420 --> 00:32:03.640
could you try to explain what is happening


00:32:03.640 --> 00:32:06.180
in the line, in the cell above?


00:32:06.180 --> 00:32:08.620
And it also has the possibility


00:32:08.620 --> 00:32:09.740
for making legacy code better,


00:32:09.740 --> 00:32:11.380
and if that's the reality, we'll see.


00:32:11.380 --> 00:32:13.580
- Yeah, hopefully it's a good thing, so cool.


00:32:13.580 --> 00:32:15.240
- All right, well, those are all of our items.


00:32:15.240 --> 00:32:16.660
That's the last one I brought.


00:32:16.660 --> 00:32:17.580
Any extras?


00:32:17.580 --> 00:32:21.100
I got a couple of extras.


00:32:21.100 --> 00:32:24.820
Will McGugan and gang at Textualize


00:32:24.820 --> 00:32:27.540
have started a YouTube channel.


00:32:27.540 --> 00:32:29.260
And so far, there's--


00:32:29.260 --> 00:32:30.460
and some of these--


00:32:30.460 --> 00:32:31.820
I think it's a neat idea.


00:32:31.820 --> 00:32:33.660
Some of the tutorials that they already have,


00:32:33.660 --> 00:32:36.540
they're just walking through some of the tutorials


00:32:36.540 --> 00:32:38.620
in video form at this point.


00:32:38.620 --> 00:32:41.700
And there's three up so far of stopwatch intro


00:32:41.700 --> 00:32:44.420
and how to get set up and use Textualize.


00:32:44.420 --> 00:32:46.900
and I like what they're doing over there


00:32:46.900 --> 00:32:48.740
and it's kind of fun.


00:32:48.740 --> 00:32:49.940
Another fun thing from--


00:32:49.940 --> 00:32:53.180
- I like it too because it's textualize.


00:32:53.180 --> 00:32:56.940
Rich is a visual thing, but textualize is like


00:32:56.940 --> 00:32:58.980
a higher level UI framework where you've got


00:32:58.980 --> 00:33:01.080
docking sections and all kinds of


00:33:01.080 --> 00:33:02.500
really interesting UI things,


00:33:02.500 --> 00:33:06.900
and so sometimes learning that in an animated,


00:33:06.900 --> 00:33:09.860
active video form is really maybe better


00:33:09.860 --> 00:33:10.900
than reading the docs.


00:33:10.900 --> 00:33:13.340
- Yep, and then something else that they've done,


00:33:13.340 --> 00:33:17.620
So maybe watch that if you want to try to build your own


00:33:17.620 --> 00:33:22.620
command line, or text user interface, a TUI, as it were.


00:33:22.620 --> 00:33:24.340
- TUI.


00:33:24.340 --> 00:33:27.260
- Or you could take your command line interface


00:33:27.260 --> 00:33:31.540
and just pipe, use Trogon, Trogon,


00:33:31.540 --> 00:33:34.220
I don't know how you say that, T-R-O-G-O-N.


00:33:34.220 --> 00:33:37.540
It's by Textualize also, it's a new project.


00:33:37.540 --> 00:33:40.340
And the idea is you just,


00:33:41.260 --> 00:33:44.140
I think you use it to wrap your own


00:33:44.140 --> 00:33:46.020
command line interface tool


00:33:46.020 --> 00:33:49.940
and it makes a text-based user interface out of it.


00:33:49.940 --> 00:33:52.160
There's a little video showing an example


00:33:52.160 --> 00:33:57.160
of a Trogon app applied to SQLite Utils,


00:33:57.160 --> 00:33:59.220
which has a whole bunch, SQLite Utils


00:33:59.220 --> 00:34:00.200
has a bunch of great stuff,


00:34:00.200 --> 00:34:04.980
and now you can interact with it with a GUI instead,


00:34:04.980 --> 00:34:07.100
and that's kind of fun.


00:34:07.100 --> 00:34:10.700
Works around Click, but apparently they will support


00:34:10.700 --> 00:34:12.780
other libraries and languages in the future.


00:34:12.780 --> 00:34:14.580
So, interesting.


00:34:14.580 --> 00:34:17.940
>> Yeah, it's like you can pop up the documentation for


00:34:17.940 --> 00:34:19.700
a parameter while you're working on it in


00:34:19.700 --> 00:34:21.260
a little modal window or something.


00:34:21.260 --> 00:34:22.540
It looks interesting.


00:34:22.540 --> 00:34:24.620
>> Yeah. Well, I was thinking along the lines of


00:34:24.620 --> 00:34:27.060
even like in internal stuff,


00:34:27.060 --> 00:34:31.340
it's fairly, you're going to write like a make script or


00:34:31.340 --> 00:34:36.380
a build script or some different utilitarian thing for your work group.


00:34:36.380 --> 00:34:38.620
If you use it all the time,


00:34:38.620 --> 00:34:41.500
command line is fine, but if you only use it like every,


00:34:41.500 --> 00:34:43.700
you know, once a month or every couple weeks or something,


00:34:43.700 --> 00:34:46.300
it might be that you forget about some of the features


00:34:46.300 --> 00:34:49.140
and yeah, there's help, but having it as a GUI,


00:34:49.140 --> 00:34:51.060
if you could easily write a GUI for it,


00:34:51.060 --> 00:34:53.620
that's kind of fun, so why not?


00:34:53.620 --> 00:34:55.180
The other thing I wanted to bring up,


00:34:55.180 --> 00:34:59.680
completely different topic is the June 2023 release


00:34:59.680 --> 00:35:02.940
of Visual Studio Code came out recently


00:35:02.940 --> 00:35:06.320
and I hadn't taken a look at it.


00:35:06.320 --> 00:35:08.120
I'm still, I've installed it,


00:35:08.120 --> 00:35:09.600
but I haven't played with it yet.


00:35:09.600 --> 00:35:11.280
And the reason why I want to play with it


00:35:11.280 --> 00:35:15.240
is they've revamped the test discovery and execution.


00:35:15.240 --> 00:35:17.360
So apparently you can,


00:35:17.360 --> 00:35:20.640
there were some glitches with finding tests sometimes.


00:35:20.640 --> 00:35:23.560
So I'm looking forward to trying this out.


00:35:23.560 --> 00:35:24.600
You have to turn it on though.


00:35:24.600 --> 00:35:28.840
You have to, there's so this new test discovery stuff,


00:35:28.840 --> 00:35:33.840
you have to go, you have to like set a opt into flag.


00:35:34.360 --> 00:35:37.720
And I just put the little snippet in our show notes


00:35:37.720 --> 00:35:40.240
so you can just copy that into your settings file


00:35:40.240 --> 00:35:41.080
to try it out.


00:35:41.080 --> 00:35:43.440
Yeah.


00:35:43.440 --> 00:35:44.260
- Excellent.


00:35:44.260 --> 00:35:45.100
- Guess that's all I got.


00:35:45.100 --> 00:35:45.920
Do you have any extras?


00:35:45.920 --> 00:35:47.560
- I do, I do.


00:35:47.560 --> 00:35:50.320
I have a report, a report from the field, Brian.


00:35:50.320 --> 00:35:55.320
So I had my 16 inch MacBook Pro M1 Max as my laptop


00:35:55.320 --> 00:36:01.080
and I decided it's not really necessarily


00:36:01.080 --> 00:36:02.760
the thing for me so I traded it in


00:36:02.760 --> 00:36:04.800
and got a new MacBook Air 15 inch,


00:36:04.800 --> 00:36:07.080
one of those big, really light ones.


00:36:07.080 --> 00:36:10.360
And I just wanna sort of compare the two


00:36:10.360 --> 00:36:11.720
if people are considering this.


00:36:11.720 --> 00:36:14.520
I have my mini that we're talking on now


00:36:14.520 --> 00:36:16.400
with my big screen and all that,


00:36:16.400 --> 00:36:19.400
which is M2 Pro, it's super fast.


00:36:19.400 --> 00:36:21.460
And I found that thing was way faster


00:36:21.460 --> 00:36:26.160
than my much heavier, more expensive laptop.


00:36:26.160 --> 00:36:27.720
Well, why am I dragging this thing around


00:36:27.720 --> 00:36:31.240
if it's not really faster, if it's heavy,


00:36:31.240 --> 00:36:33.680
has all these cores and stuff


00:36:33.680 --> 00:36:35.520
that are just burning through the battery,


00:36:35.520 --> 00:36:37.240
even though it says it lasts a long time.


00:36:37.240 --> 00:36:40.680
It's like four or five hours was a good day for that thing.


00:36:40.680 --> 00:36:41.520
I'm like, you know what?


00:36:41.520 --> 00:36:44.160
I'm gonna trade it in for the new,


00:36:44.160 --> 00:36:45.920
little bit bigger Air.


00:36:45.920 --> 00:36:48.280
And yeah, so far that thing is incredible.


00:36:48.280 --> 00:36:50.640
It's excellent for doing software development thing.


00:36:50.640 --> 00:36:52.840
The only thing is the screen's not quite as nice.


00:36:52.840 --> 00:36:55.480
But for me, I don't live on my laptop, right?


00:36:55.480 --> 00:36:57.360
I've got like a big dedicated screen.


00:36:57.360 --> 00:36:59.380
I'm normally out then I'm like out somewhere.


00:36:59.380 --> 00:37:03.280
So small is better and it lasts like twice as long


00:37:03.280 --> 00:37:04.120
and the battery.


00:37:04.120 --> 00:37:05.680
So, and I got the black one,


00:37:05.680 --> 00:37:08.620
which is weird for an Apple device, but very cool.


00:37:08.620 --> 00:37:11.620
People say it's a fingerprint magnet and absolutely,


00:37:11.620 --> 00:37:14.140
but it's also a super, super cool machine.


00:37:14.140 --> 00:37:15.820
So if people are thinking about it,


00:37:15.820 --> 00:37:18.920
I'll give it a pretty, I'll give it like a 90% thumbs up.


00:37:18.920 --> 00:37:21.460
Screen's not quite as nice.


00:37:21.460 --> 00:37:23.540
It's super clear, but it kind of is like washed out


00:37:23.540 --> 00:37:24.940
a little harder to see in light.


00:37:24.940 --> 00:37:26.780
But other than that, it's excellent.


00:37:26.780 --> 00:37:28.580
So here's my report.


00:37:28.580 --> 00:37:30.060
I traded in my expensive MacBook


00:37:30.060 --> 00:37:34.720
for an incredibly light, thin, and often faster, right?


00:37:34.720 --> 00:37:36.380
When I'm doing stuff in Adobe Audition


00:37:36.380 --> 00:37:39.860
for audio or video work or a lot of other places,


00:37:39.860 --> 00:37:41.460
like those things that I gotta do,


00:37:41.460 --> 00:37:44.020
like noise reduction and other sorts of stuff,


00:37:44.020 --> 00:37:45.140
it's all single threaded.


00:37:45.140 --> 00:37:47.140
And so it's like 20% faster


00:37:47.140 --> 00:37:51.020
than my $3,500 MacBook Pro Max thing.


00:37:51.020 --> 00:37:52.980
Anyway, and lighter and smaller.


00:37:52.980 --> 00:37:54.780
You know, all the good things.


00:37:54.780 --> 00:37:59.660
>> But you're still using your mini for some of your workload.


00:37:59.660 --> 00:38:01.500
>> I use my mini for almost all my work.


00:38:01.500 --> 00:38:04.180
Yeah, if I'm not out, then I usually, or sitting on the couch,


00:38:04.180 --> 00:38:06.740
then it's all mini, mini, mini all the time.


00:38:06.740 --> 00:38:07.620
>> Okay.


00:38:07.620 --> 00:38:08.260
>> Yeah.


00:38:08.260 --> 00:38:10.620
>> Is it black on the outside also then?


00:38:10.620 --> 00:38:12.620
>> Yeah, yeah, it's cool looking.


00:38:12.620 --> 00:38:16.420
>> You can throw a sticker on that and somebody to hide that it's Apple and


00:38:16.420 --> 00:38:17.980
people might think you just have a Dell.


00:38:17.980 --> 00:38:20.140
>> They wouldn't know, that's right.


00:38:20.140 --> 00:38:24.340
Run parallels, you can run Linux on it, and they're like, okay.


00:38:24.340 --> 00:38:27.400
- Linux, got it, what is that thing, that's a weird.


00:38:27.400 --> 00:38:29.220
Yeah, you could disguise it pretty easy if you want.


00:38:29.220 --> 00:38:31.620
Or just your sticker stained out better, you never know.


00:38:31.620 --> 00:38:33.020
All right, so people are thinking about that,


00:38:33.020 --> 00:38:35.100
pretty cool device.


00:38:35.100 --> 00:38:38.220
But Brian, if somebody were to send you a message


00:38:38.220 --> 00:38:41.100
and like trick you, like hey, you want a MacBook?


00:38:41.100 --> 00:38:42.980
You wanna get your MacBook for free?


00:38:42.980 --> 00:38:44.060
You don't want that, right?


00:38:44.060 --> 00:38:44.900
- No.


00:38:44.900 --> 00:38:47.500
- So, you know, companies, they'll do tests.


00:38:47.500 --> 00:38:51.140
They'll like test their people just to make sure,


00:38:51.140 --> 00:38:54.320
like hey, we told you not to click on weird looking links.


00:38:54.320 --> 00:38:57.120
But let's send out a test and see if they'll click on a link.


00:38:57.120 --> 00:39:02.640
And there's this picture of this guy getting congratulated by the CEO.


00:39:02.640 --> 00:39:08.560
IT congratulating me for not failing the phishing test.


00:39:08.560 --> 00:39:12.320
And the guy's like, deer head, like, oh no.


00:39:12.320 --> 00:39:15.360
Me, who doesn't open emails, is what the picture says.


00:39:15.360 --> 00:39:17.040
[LAUGHTER]


00:39:17.040 --> 00:39:19.440
So you just ignore all your work email.


00:39:19.440 --> 00:39:21.120
You won't get caught in the phishing test.


00:39:21.120 --> 00:39:21.600
How about that?


00:39:22.320 --> 00:39:28.120
>> Yeah. You've been out of the corporate for a while.


00:39:28.120 --> 00:39:31.640
That happens. I've had some phishing test come through.


00:39:31.640 --> 00:39:32.780
>> You've gone through this? Yeah.


00:39:32.780 --> 00:39:37.680
>> Yeah. Well, the email looks like it came from,


00:39:37.680 --> 00:39:40.760
so that's one of the problems is it looks like it's legit,


00:39:40.760 --> 00:39:44.820
and it has the right third-party company


00:39:44.820 --> 00:39:48.160
that we're using for some service or something.


00:39:48.160 --> 00:39:51.520
You're like, "Wait, what is this?"


00:39:51.520 --> 00:39:57.300
And then the link doesn't match up with the whatever it says it's going to and things like that, but


00:39:57.300 --> 00:40:00.920
It actually is harder now. I think that to


00:40:00.920 --> 00:40:06.520
To verify what's real and what's not when more companies do use their third-party


00:40:06.520 --> 00:40:13.000
Services for lots of stuff. Yeah. Yeah. Yeah, it's you know, it's a joke, but it's it is serious


00:40:13.000 --> 00:40:16.140
I worked for a company where somebody got a got a message


00:40:16.140 --> 00:40:20.400
I think either I might have been through a hacked email account or


00:40:20.920 --> 00:40:26.240
or it was spoofed in a way that it looked like it came from a higher-up that says,


00:40:26.240 --> 00:40:28.040
"Hey, there's a really big emergency.


00:40:28.040 --> 00:40:30.480
This vendor is super upset. We didn't pay them.


00:40:30.480 --> 00:40:32.600
They're going to sue us if we don't.


00:40:32.600 --> 00:40:37.080
Could you quick transfer this money over to this bank account?"


00:40:37.080 --> 00:40:42.880
Because it came from somebody who looked like they should be asking that.


00:40:42.880 --> 00:40:45.600
It almost happens. It's not good.


00:40:45.600 --> 00:40:49.360
>> That's not good. I get texts now.


00:40:49.360 --> 00:40:51.160
with the latest one was just this weekend,


00:40:51.160 --> 00:40:53.100
I got a text or something that said,


00:40:53.100 --> 00:40:55.540
"Hey, we need information about your shipping


00:40:55.540 --> 00:40:58.240
for Amazon shipment or something."


00:40:58.240 --> 00:41:01.720
It's like, "Copy and paste this link into your browser."


00:41:01.720 --> 00:41:04.040
It's this bizarre link and I'm like,


00:41:04.040 --> 00:41:06.760
"No, it would be amazon.com something.


00:41:06.760 --> 00:41:12.520
There's no way it's going to be Bob's Burgers or whatever."


00:41:12.520 --> 00:41:15.120
>> Yeah. Amazon.


00:41:15.120 --> 00:41:17.840
Yeah. Let's go to amazon.com.


00:41:17.840 --> 00:41:19.320
- Oh, anyway.


00:41:19.320 --> 00:41:20.160
- Oh well.


00:41:20.160 --> 00:41:23.120
- Well, may everybody get through their day


00:41:23.120 --> 00:41:25.920
without clicking on phishing emails.


00:41:25.920 --> 00:41:26.760
- That's right.


00:41:26.760 --> 00:41:28.680
Yeah, may you pass the test.


00:41:28.680 --> 00:41:31.200
- Or don't read email, just stop reading email.


00:41:31.200 --> 00:41:33.600
- Yeah, think about how productive you'll be.


00:41:33.600 --> 00:41:35.120
Well, this was very productive, Brian.


00:41:35.120 --> 00:41:35.960
- Yes, it was.


00:41:35.960 --> 00:41:36.780
- Yeah.


00:41:36.780 --> 00:41:39.880
- Well, thanks for hanging out with me this morning.


00:41:39.880 --> 00:41:40.720
So, it was fun.


00:41:40.720 --> 00:41:41.560
- Yeah, absolutely.


00:41:41.560 --> 00:41:42.920
Thanks for being here, as always.


00:41:42.920 --> 00:41:44.800
And everyone, thank you for listening.


00:41:44.800 --> 00:41:45.880
It's been a lot of fun.


00:41:45.880 --> 00:41:46.720
See you next time.

