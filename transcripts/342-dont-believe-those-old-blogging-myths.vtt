WEBVTT

00:00:00.001 --> 00:00:04.800
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.800 --> 00:00:12.120
your earbuds. This is episode 342, recorded June 25th, 2023. I'm Michael Kennedy.

00:00:12.120 --> 00:00:13.700
And I am Brian Okken.

00:00:13.700 --> 00:00:19.320
And this episode is brought to you by Brian and me, us, our RRWorks. So support us,

00:00:19.320 --> 00:00:23.520
support the show, keep us doing what we're doing by checking out our courses over at

00:00:23.520 --> 00:00:27.420
Talk Python Training. We have a bunch, including a really nice pytest course written by Brian.

00:00:27.420 --> 00:00:32.700
Check out the Test of Code podcast, the Patreon supporters. Brian's got a book as well in pytest.

00:00:32.700 --> 00:00:36.300
You may have heard of this. So please, if you check those things out, share them with your friends,

00:00:36.300 --> 00:00:40.440
share, recommend them to your co-workers. It really makes a difference. You can also connect with us

00:00:40.440 --> 00:00:47.320
on Mastodon. You'll see that over on the show notes for every episode. And finally, you can join us

00:00:47.320 --> 00:00:52.840
over at pythonbytes.fm/live if you want to be part of the live recording, usually, usually

00:00:53.480 --> 00:00:58.900
Tuesdays at 11 a.m. Pacific time. But not today. No, Brian, we're starting nice and early because,

00:00:58.900 --> 00:01:04.700
well, it's vacation time. And well, plum bomb, I think we should just get right into it.

00:01:04.700 --> 00:01:09.260
Sure. Plum bomb, let's do it.

00:01:09.260 --> 00:01:13.500
It's a new saying. It's an expression. Plum bomb, let's just do it.

00:01:13.840 --> 00:01:19.960
Let's just do it. Yeah, I have no idea where this comes from. But the, well, I do know where it comes

00:01:19.960 --> 00:01:28.280
from. It was last week. Last week, we talked about shells and Henry Schreiner said, hey, you should

00:01:28.280 --> 00:01:33.340
check out plum bomb. It's kind of like what you're talking about, but also neat. So I did.

00:01:33.340 --> 00:01:35.100
We were talking about shh.

00:01:35.100 --> 00:01:35.800
Oh, right.

00:01:35.800 --> 00:01:36.960
We were talking about shh.

00:01:37.780 --> 00:01:38.740
Don't tell anyone.

00:01:38.740 --> 00:01:46.820
So plum bomb, it's a little easier to search for, actually, than shh. So what is it? It's a Python

00:01:46.820 --> 00:01:53.260
library. And it's got, it's shell combinations. It's for interacting with your environment. And

00:01:53.260 --> 00:02:01.600
there we go. Henry Schreiner, one of the maintainers. So it's a tool that you can install so that you can

00:02:01.600 --> 00:02:07.000
interact with your, your operating system and file system and stuff like that and all sorts of other

00:02:07.000 --> 00:02:15.340
things. And it's got a little bit, a little bit different style than shh. But it, so I was taking a look at,

00:02:15.340 --> 00:02:22.780
it's kind of like a local command for one. The basics are like import from plum bomb, import local, and then you

00:02:22.780 --> 00:02:29.540
can run commands as if you were just running a shell, but you do this within your Python code. And there's also

00:02:29.540 --> 00:02:38.580
some convenience ones like sh has like LS and crap and things like that. But, but, but you, it generally

00:02:38.580 --> 00:02:46.080
looks like there's more stuff around how you operating, operate with a shell normally things like piping. So

00:02:46.080 --> 00:02:53.360
you can, you know, you can pipe one like LS to crap to word count or something like that to count files. You

00:02:53.360 --> 00:02:58.240
can, I mean, there's other ways to do it within Python, but if you're used to doing it in, in the shell,

00:02:58.240 --> 00:03:04.880
just wrapping, wrapping the same work in a Python script, why not? Things like re yeah, redirection work,

00:03:04.880 --> 00:03:11.020
manipulating your working directory, just all sorts of fun stuff to do with your shell, but through Python,

00:03:11.020 --> 00:03:18.600
you know, the pipe overriding the, you know, the pipe operator and Python overwrite sort of actually in

00:03:18.600 --> 00:03:24.480
the language being the same as in the shell is a little bit like pathlib doing the divide aspect,

00:03:24.480 --> 00:03:29.040
right? Like we're going to grab some operator and make it that it probably was never really imagined to

00:03:29.040 --> 00:03:33.600
be used for, but we're going to make it use it to, so it looks like what you would actually, you know,

00:03:33.600 --> 00:03:35.820
the abstraction you're representing, which is pretty interesting.

00:03:35.820 --> 00:03:43.500
Yeah. And they, like this example, they have an example in the, the read me of piping LS to crap to

00:03:43.500 --> 00:03:50.140
word count. And they, they like define that as a chain and if, and it didn't even, it doesn't even run it. I

00:03:50.140 --> 00:03:55.820
I don't think, it just defines this new sequence. So you, so you can chain together,

00:03:55.820 --> 00:04:05.260
script commands and if you print it, so it has a, probably a, a stir or a wrapper, implementation

00:04:05.260 --> 00:04:09.980
that shows you exactly what the, the, all the pipe and the chaining was. So that's kind of a neat thing

00:04:09.980 --> 00:04:15.260
for debugging. And then when you actually run it, then it, you call that thing like a function and it

00:04:15.260 --> 00:04:19.180
runs it. That's pretty neat. Yeah, it is. You can even do them in line, just put parentheses

00:04:19.180 --> 00:04:25.340
around them and kind of execute at the end. Yeah. Pretty interesting. Yeah. Anyway, just a fun,

00:04:25.340 --> 00:04:30.460
little quick shout out to Plumbum. Yeah. If you thought SH was cool last time, you might also check

00:04:30.460 --> 00:04:34.780
this out, right? They kind of play in similar spaces. Yeah. Just one of the things I like about

00:04:34.780 --> 00:04:40.620
Python and the Python community is, this variety of different, different libraries that might

00:04:40.620 --> 00:04:45.820
solve the same space, but, have a different flavor. you know, some people like chocolate,

00:04:45.820 --> 00:04:51.260
some people like vanilla. Well, I'm a big fan of caramel. So how about we talk about faster CPython?

00:04:51.260 --> 00:04:55.020
Okay. I'm not sure.

00:04:55.020 --> 00:05:04.780
So the faster CPython is, they're really starting to show some results, right? Python 3.11 was 40% faster,

00:05:04.780 --> 00:05:09.740
I believe is, you know, roughly speaking, working with averages and all those things.

00:05:09.740 --> 00:05:17.980
And we've got 3.12 coming with more optimizations. And ultimately the faster CPython plan was,

00:05:17.980 --> 00:05:24.780
you know, put together and laid out by Mark Shannon. And the idea was if we could make, you know, improvements

00:05:24.780 --> 00:05:32.140
like 40% faster, but over and over again, because of, you know, compounding sort of numbers there,

00:05:32.140 --> 00:05:37.500
we'll end up with a really fast CPython, a faster one, you might say in five releases,

00:05:37.500 --> 00:05:43.180
five times faster and five releases. And so, you know, that started really with 3.10 and at 3.11,

00:05:43.180 --> 00:05:48.140
3.12, not the one that's coming, but the one that's coming in a year and a few months, 3.11,

00:05:48.140 --> 00:05:54.540
they're laying out their work for that. And it's looking pretty ambitious. So in 3.12,

00:05:54.540 --> 00:06:00.140
they're coming up with ways to optimize blocks of code. So in 3.11, stepping a little bit back,

00:06:00.140 --> 00:06:06.140
we've got the adaptive specializing interpreter or specializing adaptive interpreter. I don't have

00:06:06.140 --> 00:06:12.540
it pulled up in front of me, which order those words go in, but that will allow CPython to replace the

00:06:12.540 --> 00:06:20.060
byte codes with more specific ones. So if it sees that you're doing a float plus a float operation,

00:06:20.060 --> 00:06:26.060
instead of just doing a word, we're doing an abstract plus, you know, is that, is that a list plus a string?

00:06:26.060 --> 00:06:31.580
Is that an integer and a float? Is that actually a float and a float? And if it's a float and a float,

00:06:31.580 --> 00:06:37.260
then we can specialize that to do more specific, more efficient types of math and that kind of stuff.

00:06:37.260 --> 00:06:44.220
Right. 3.12 is supposed to have what they're calling the tier one optimizer. And so, which

00:06:44.220 --> 00:06:49.980
optimizes little blocks of code, but they're pretty small. And so one of the big things coming here in

00:06:49.980 --> 00:06:59.260
3.13 is a tier two optimizer. So bigger blocks of code, something they're calling super blocks,

00:06:59.260 --> 00:07:04.700
which I'll talk about in just a second. The other one that sounds really amazing is enabling sub

00:07:04.700 --> 00:07:12.460
interpreters from Python code. So we know about PEP 554. This has been quite the journey and massive

00:07:12.460 --> 00:07:19.340
amount of work done by Eric Snow. And the idea is if we have a gill, then we have serious limits on

00:07:19.340 --> 00:07:24.700
concurrency, right? From a computational perspective, not from an IO one potentially. And you know,

00:07:24.700 --> 00:07:31.260
I'm sitting here on my M2 Pro with 10 cores and no matter how much multi-threaded Python I write,

00:07:31.260 --> 00:07:37.020
if it's all computational, all running Python bytecode, I get, you know, one 10th of the capability of this

00:07:37.020 --> 00:07:43.660
machine, right? Because of the gill. So the idea is, well, what if we could have each thread have its

00:07:43.660 --> 00:07:50.300
own gill? So there's still sure a limit to how much work that can be done in that particular thread

00:07:50.300 --> 00:07:54.940
concurrently, but it's one thread dedicated to one core and the other core gets its own other

00:07:54.940 --> 00:07:59.740
sub interpreter, right? That doesn't share objects in the same way, but they can like pass them around

00:07:59.740 --> 00:08:06.140
through certain mechanisms. Anyway. So this thing has, has been a journey, like I said, created 2017.

00:08:06.140 --> 00:08:15.020
And it has like all this history, up until now. And, status is still says draft. And now the

00:08:15.020 --> 00:08:20.380
Python version, I think the PEP is approved, but, and work has been done, but it's still in like pretty

00:08:20.380 --> 00:08:25.580
early stages. So that's a pretty big deal is to add that that's supposed to show up in,

00:08:25.580 --> 00:08:36.220
3.13 and 3.13 and in Python code. And this is a big deal. I think that in 3.12, the work has been

00:08:36.220 --> 00:08:42.860
done so that it's internally possible. It's internally done by remember correctly, but there's no way to

00:08:42.860 --> 00:08:48.140
use it from Python, right? Like it's, if you're a creator of interpreters, basically you can use it.

00:08:48.140 --> 00:08:53.740
So now the idea is like, let's make this possible for you to do things like start a thread and give

00:08:53.740 --> 00:08:59.100
it its own sub interpreter, you know, copy its objects over, let it create its own and really do

00:08:59.100 --> 00:09:04.060
computational parallelism, I'm guessing interaction with async and await and those kinds of things.

00:09:04.060 --> 00:09:07.820
And also, more, improved memory management. Let's see what else.

00:09:07.820 --> 00:09:12.460
Well, so I guess along, along with that, we're going to have to have some tutorials or something on how

00:09:12.460 --> 00:09:16.140
to, how to, how do they, the two sub interpreters share information.

00:09:16.140 --> 00:09:22.460
Yeah, exactly. Yeah, we will. We will. I'm, what I would love to see is just, you know, on the thread

00:09:22.460 --> 00:09:28.540
object, give the thread object, use sub and isolating, you know, isolate sub interpreter or new

00:09:28.540 --> 00:09:33.980
sub interpreter equals true. And off it goes, that would be excellent. And then maybe pickles the object.

00:09:33.980 --> 00:09:38.780
I don't know. We, we can see how, how they come up with that, but this is, this is good news. I think

00:09:38.780 --> 00:09:44.540
it's the kind of thing that's not that important necessarily for a lot of people, but for those who it is,

00:09:44.540 --> 00:09:48.540
it's like, you know, really, we want this to go a lot faster. What can we do here? Right?

00:09:48.540 --> 00:09:53.420
Yeah. Yeah. That sounds complicated. Does it make it go faster? Yay. Then do it.

00:09:53.420 --> 00:09:59.020
Well, and you know, compared to a lot of the other alternatives that we've had for,

00:09:59.020 --> 00:10:05.100
I have 10 cores. Why can I only use one of them on my Python code without multiprocessing?

00:10:05.100 --> 00:10:11.260
This is one of those, that doesn't affect single threaded performance. It's one of those

00:10:11.260 --> 00:10:16.620
things that there's not a, a cost to people who don't use it. Right. Whereas a lot of the other

00:10:16.620 --> 00:10:22.940
types of options are like, well, sure, your code gets 5% slower, but you could make it a lot faster

00:10:22.940 --> 00:10:27.420
if you did a bunch more work. Yeah. Yeah. And that's been a hard sell and also a hard line that,

00:10:27.420 --> 00:10:31.100
you know, put in the sand saying like, look, we can't make regular,

00:10:31.100 --> 00:10:37.820
non-concurrent Python slower for the sake of, you know, this more rare, but sometimes

00:10:37.820 --> 00:10:41.900
specialized, right. concurred stuff. So they've done a bunch of foundational work.

00:10:41.900 --> 00:10:46.780
And then the three main things are the tier two optimizer, sub interpreters for Python and memory

00:10:46.780 --> 00:10:51.660
management. So the tier two optimizer, there's a lot of stuff that you kind of got to look around. So

00:10:51.660 --> 00:10:59.020
check out the detailed plan. They have this thing called copy and patch. So you can generate like

00:10:59.020 --> 00:11:04.700
roughly these things called super blocks, and then you can implement their planning to implement basic

00:11:04.700 --> 00:11:09.100
super block management. And Ryan, you may be thinking, what are the words you're saying, Michael?

00:11:09.100 --> 00:11:15.020
Duplo. They're not those little like us. No, they're big, big duplos. But it's kind of true.

00:11:15.020 --> 00:11:20.380
So they were optimizing smaller pieces, like little tiny bits, but you can only have so much of an effect

00:11:20.380 --> 00:11:26.380
if you're working on, small blocks of code that you're optimizing. So a super block is a linear piece

00:11:26.380 --> 00:11:33.100
of code with one entry and multiple exits. It differs from an, a basic block and that it,

00:11:33.100 --> 00:11:38.540
it may duplicate some code. So they just talk about, considering different types of things you might

00:11:38.540 --> 00:11:45.260
optimize. so I'll link over to us, but there's a big, long discussion, lots of, lots of graphics.

00:11:45.260 --> 00:11:52.140
People could go check out. So yeah, they're going to add support to D opt, as support for D

00:11:52.140 --> 00:11:59.020
optimization of soup blocks, enhance the code creation, implement the specializer and use this

00:11:59.020 --> 00:12:05.020
algorithm called copy and patch. So implement the copy and patch machine code generator. You don't

00:12:05.020 --> 00:12:09.900
normally hear about a machine code generator. Do you know, but, you know, that sounds like a jet compiler

00:12:09.900 --> 00:12:15.580
or something along those lines. Yeah. Anyway, so that's the goal and reduce the time spent in the

00:12:15.580 --> 00:12:19.900
interpreter by 50%. If they make that happen, that sounds all right to me just for this one feature.

00:12:19.900 --> 00:12:25.340
That's pretty neat. Yeah. Wow. Pretty good. And I talked a whole bunch about the sub-interpreter's final thing.

00:12:25.340 --> 00:12:32.060
The profiling data shows that a large amount of time is actually spent in memory management and the cycle GC.

00:12:32.060 --> 00:12:40.460
All right. And while when Python, I guess if you do, you know, 40% a bunch of times, it was maybe half this fast

00:12:40.460 --> 00:12:45.580
before, like, cause remember we're like a few years out working back on this plan in three, nine, three, eight,

00:12:45.580 --> 00:12:52.220
maybe it didn't matter as much because a percent as a percentage of where is CPython spending its time.

00:12:52.220 --> 00:12:57.260
It was not that much time of memory management, but as all this other stuff gets faster and faster,

00:12:57.260 --> 00:13:00.220
if they don't do stuff to make the memory management faster, it's going to be like, well,

00:13:00.220 --> 00:13:05.260
half the time is memory manager. What are we doing? So they say, as we get the, the VM faster,

00:13:05.260 --> 00:13:10.060
this is only going to be a larger percent of our time. So what can we do? So do fewer allocations to

00:13:10.060 --> 00:13:15.260
improve data structures, for example, partial evaluation to reduce the number of temporary

00:13:15.260 --> 00:13:21.100
objects, which is part of the other section of their work and spend less time doing cycle GCs.

00:13:21.100 --> 00:13:26.540
This could be as simple as doing fewer calculations or as complex as implementing a new incremental

00:13:26.540 --> 00:13:32.860
cycle finder either way. And it sounds pretty cool. So that's the plan for a year and a couple of months.

00:13:32.860 --> 00:13:37.020
Pretty exciting. I'm really happy that these people are working on it.

00:13:37.020 --> 00:13:43.180
I am too. It's a team of, I think last time I counted five or six people, there's a big group of them around

00:13:43.180 --> 00:13:49.020
Guido at Microsoft, but then also outside. Yeah. So for example, this was written by Mark Shannon,

00:13:49.020 --> 00:13:54.300
who's there, but also Michael Dropboom, who was at Mozilla, but I'm not, I don't remember where he is

00:13:54.300 --> 00:14:00.780
right now. Cool. Last name. Yes, indeed. All right. Over to you, Brian.

00:14:00.780 --> 00:14:07.100
Brian. Well, that was pretty heavy. I'm going to do a kind of a light topic is we need more people to write

00:14:07.100 --> 00:14:13.900
blogs about Python. It would help us out a lot really. And one of the ways you could do that is

00:14:13.900 --> 00:14:20.220
to just head over and check out one of the recent articles from Julia Evans about some blogging myths.

00:14:20.220 --> 00:14:28.140
And I guess this is pretty lighthearted topic, but, but also serious, but we have some more fun,

00:14:28.140 --> 00:14:32.460
fun stuff in the extras. So don't worry about it.

00:14:33.420 --> 00:14:38.460
Anyway, so there's a few blogging myths and I just wanted to highlight these because I think it's good

00:14:38.460 --> 00:14:44.060
to remember that, you know, these are just wrong. So I'll just run through them quickly. You don't need

00:14:44.060 --> 00:14:49.980
to be original. You can write content that other people have covered before. That's fine. You don't

00:14:49.980 --> 00:14:58.700
need to be an expert. Posts don't need to be a hundred percent correct. Writing boring posts is bad. So these are,

00:14:58.700 --> 00:15:05.260
Oh, wait, the myths are the myth is you need to be original. That's not true. Myth. You need to be an

00:15:05.260 --> 00:15:10.940
expert. Posts need to be a hundred percent correct. Also myth. All these are myths. Writing boring posts

00:15:10.940 --> 00:15:18.540
is bad. Boring posts are fine. If they're informational, you need to explain every concept. Actually, that will

00:15:18.540 --> 00:15:26.940
just kill your audience. If you explain every little detail page views matter. More material is always better.

00:15:26.940 --> 00:15:33.500
Everyone should blog. These are all myths, according to Julia. And then she goes through a lot of the in

00:15:33.500 --> 00:15:39.900
detail into each one of them. And I kind of want to like hover on the first two a little bit of you

00:15:39.900 --> 00:15:47.580
need to be original and you need to be an expert. I think it's we when we're learning, we're learning

00:15:47.580 --> 00:15:53.260
about the software, a new library or new technique or something. Often I'm like, I'm reading stack

00:15:53.260 --> 00:15:59.980
overflow. I'm reading blog posts. I'm reading maybe books, who knows, reading a lot of stuff on it. And

00:15:59.980 --> 00:16:06.940
you, you'll get all that stuff in, in your own perspective of how it really is. And then you can

00:16:06.940 --> 00:16:12.460
sort of like, like the cheating book report you did in junior high where you just like rewrote some of

00:16:12.460 --> 00:16:18.700
the encyclopedia, but changed it. Don't do that. But it doesn't, you don't have to come up with a

00:16:18.700 --> 00:16:24.220
completely new technique or something. You can just say, oh, all the stuff I learned, I'm going to put

00:16:24.220 --> 00:16:30.300
it together and like write like my, my workflow now or the process or just a little tiny bit. It doesn't

00:16:30.300 --> 00:16:36.140
have to be long. It can be a short thing of like, oh, I finally got this. It's way easier than I

00:16:36.140 --> 00:16:41.340
thought it was. And writing little, little aha moments are great times to just write that down

00:16:41.340 --> 00:16:47.180
as a little blog post. The other thing of you don't need to be an expert is a lot of us got started

00:16:47.180 --> 00:16:53.020
blogging while we were learning stuff as a way to write that down. So I'm, you're definitely not an

00:16:53.020 --> 00:16:58.540
expert as you're learning stuff. So go ahead and write about it then. And it's a great way to, and that

00:16:58.540 --> 00:17:03.660
ties into, it doesn't need to be a hundred percent correct. As you get more traction in your blog,

00:17:03.660 --> 00:17:08.700
people will like, let you know if you made a mistake and in the Python community, usually it's nice.

00:17:08.700 --> 00:17:14.060
Um, they'll, they'll like mention, Hey, this isn't quite right anymore. and I kind of love that about

00:17:14.060 --> 00:17:19.820
our community. So, I'll the, I want to go back to the original part is you don't even have to be

00:17:19.820 --> 00:17:24.380
original from your own perspective. If you wrote about something like last year, go ahead and write

00:17:24.380 --> 00:17:29.020
about it again. If you think it's important and it needs it and you sort of have a different way

00:17:29.020 --> 00:17:34.700
to explain it. You can write another blog post about a similar topic. So yeah, I'm, I totally agree. I

00:17:34.700 --> 00:17:41.820
also want to add a couple of things. Okay. I would like to add that your posts, the myth, your posts have

00:17:41.820 --> 00:17:47.100
to be long or like an article, or you need to spend a lot of time on it. Right. You know, the biggest example

00:17:47.100 --> 00:17:54.220
of this in terms of like successful in the face of just really short stuff is, John Gruber's

00:17:54.220 --> 00:18:01.020
daring fireball, right? Like this is an incredibly popular site and the entire articles are, it starts

00:18:01.020 --> 00:18:05.740
out with him quoting often someone else. And that's like two paragraphs, which is half the article and

00:18:05.740 --> 00:18:09.900
say, here's my thoughts on this. And, or here's something interesting. Let's, let's highlight it or

00:18:09.900 --> 00:18:15.740
something. Right. And my last blog post was four paragraphs in a picture, maybe five. You count the

00:18:15.740 --> 00:18:20.620
bonus. Right. I don't, not too many people paid attention to mine because the titles, you can

00:18:20.620 --> 00:18:24.540
ignore this post. So I'm, I don't know why I'm having a hard time getting traction with it, but

00:18:24.540 --> 00:18:31.820
um, I actually, I like that you highlighted the junk that good John Gruber style. There's a lot of

00:18:31.820 --> 00:18:37.500
different styles of blog posts. And one of them is reacting to something instead of, because a lot of

00:18:37.500 --> 00:18:42.140
people have actually turned, you can either comment on somebody's blog or talk about it on Reddit or

00:18:42.140 --> 00:18:48.700
something, or you can react to it on your own blog. and link to it. So link to it on Reddit or

00:18:48.700 --> 00:18:52.540
something. Yeah. Yeah. Not anymore. Cause Reddit went private out of protest, but you know, somewhere

00:18:52.540 --> 00:18:57.420
else if you find another place or maybe post on Twitter. No, don't do that. Let's master it on.

00:18:57.420 --> 00:18:58.540
It's getting more. Yeah.

00:18:58.540 --> 00:19:07.260
Funny. I had another one as well, but, oh yeah. So this is not a myth, but just another thing, you know,

00:19:07.260 --> 00:19:11.980
another, source of inspiration is if you come across something that it really surprised you,

00:19:11.980 --> 00:19:15.580
like if you're learning, right. It kind of to add on, like, I'm not an expert is if you come across

00:19:15.580 --> 00:19:19.900
something like, wow, I thought really, it broke my expectations. I thought this was going to work

00:19:19.900 --> 00:19:24.380
this way. And it, gosh, it's weird here. People, if it seems like a lot of people think it works this

00:19:24.380 --> 00:19:28.540
way, but it works in some completely other way, you know, that could be a cool little write-up.

00:19:28.540 --> 00:19:33.100
Um, also, you know, people might be searching like, why does Python do this? You know, they're,

00:19:33.100 --> 00:19:37.580
they might find your quote, boring article and go, that was really helpful. Right. So yeah.

00:19:37.580 --> 00:19:43.180
I, I still remember way back, when I started writing about, pytest and unit tests and stuff,

00:19:43.180 --> 00:19:51.020
um, there was a, a feature, a behavior of teardown functionality that, behaved different.

00:19:51.020 --> 00:19:58.380
It was like, sort of the same in nose and unit test and then different in pytest. And I,

00:19:58.380 --> 00:20:03.820
I wrote a post that said, maybe unit test is broken because I kind of like this pytest behavior.

00:20:03.820 --> 00:20:09.420
And I got a reaction from some of the pytest contributors that said, oh no, we just broke,

00:20:09.420 --> 00:20:13.660
we just forgot, didn't test that part. So that's wrong. We we'll fix it.

00:20:13.660 --> 00:20:15.660
Yeah.

00:20:15.660 --> 00:20:20.860
What a, what a meta problem that, pytest didn't test a thing.

00:20:20.860 --> 00:20:27.020
Yeah. Well, I mean, it was, it was really corner case, but I'm kind of a fastidious person when I'm

00:20:27.020 --> 00:20:32.700
looking at how things work. but the other thing I want to say is a lot of, a lot of

00:20:32.700 --> 00:20:38.300
things written by you, other people are old enough that they don't work anymore. If you're,

00:20:38.300 --> 00:20:42.540
if you're following along with like a little tutorial and it doesn't work anymore because,

00:20:42.540 --> 00:20:47.580
you know, the language changed or the library they're using is not supported anymore or something.

00:20:47.580 --> 00:20:52.860
That's a great opportunity to go, well, I'll just kind of write it in my own language, but

00:20:52.860 --> 00:21:00.380
or in my own style, but also make it current and make it work this time. So that's good.

00:21:00.380 --> 00:21:00.780
Indeed.

00:21:00.780 --> 00:21:05.260
Well, anyway. Okay. Well, let's, let's go back to something more meaty.

00:21:05.260 --> 00:21:13.580
Yeah. Something, like AI. So I want to tell you about Jupyter AI, Brian, Jupyter AI is a pretty

00:21:13.580 --> 00:21:21.260
interesting, pretty interesting project here. It's a generative AI extension for JupyterLab. I

00:21:21.260 --> 00:21:28.620
believe it also works in Jupyter and IPython is just IPython prompt as well. And so here's the idea.

00:21:28.620 --> 00:21:33.340
There's, there's a couple of things that you can do. So Jupyter has this thing called a magic,

00:21:33.340 --> 00:21:40.140
right? Where you put, two percents in front of a command and it, it applies it to an extension to

00:21:40.140 --> 00:21:44.700
Jupyter and not, not trying to run Python code, but it says, let me find this thing. In this case,

00:21:44.700 --> 00:21:49.820
you say percent, percent AI and then you types and stuff. So that stuff you type afterwards,

00:21:49.820 --> 00:21:56.300
then, you know, turns on a certain behavior for that particular cell. And so this AI magic,

00:21:56.300 --> 00:22:00.300
literally it's percent, percent AI, and then they call it a magic or it is a magic.

00:22:00.300 --> 00:22:07.420
So AMI, AI magic turns Jupyter notebooks into reproducible. It's the interesting aspect,

00:22:07.420 --> 00:22:15.580
generative AI. So think if you could have ChatGPT or open AI type stuff clicked right into your

00:22:15.580 --> 00:22:20.300
notebook. So instead of going out to one of these AI chat systems and say, I'm trying to do this,

00:22:20.300 --> 00:22:25.020
tell me how to do this. Or could you explain that data? You just say, Hey, that cell above,

00:22:25.020 --> 00:22:30.460
what happened here? Or I'm trying, I have this data frame. Do you see it above? Okay, good.

00:22:30.460 --> 00:22:37.900
How do I visualize that in a pie chart or some, you know, when those donut graphs using plotly,

00:22:37.900 --> 00:22:43.260
and it can just write it for you as the next cell. Interesting. Okay. Interesting. Right. Yeah.

00:22:43.260 --> 00:22:49.020
Yeah. It runs anywhere the Python kernel works. So JupyterLab, Jupyter notebooks, Google collab,

00:22:49.020 --> 00:22:56.380
VS Code, probably by charm, although they don't call it out. And it has a native UI chat. So in

00:22:56.380 --> 00:23:03.260
JupyterLab, not Jupyter, there's like a left pane that has stuff. It has like your files and it has

00:23:03.260 --> 00:23:08.860
other things that you can do. And it will plug in another window on the left there. That is like a chat

00:23:08.860 --> 00:23:14.620
GPT. So that's pretty cool. Another really interesting difference is this thing supports

00:23:14.620 --> 00:23:25.180
its model or platform agnostic. So if you like AI 21 or Anthropic or OpenAI or SageMaker or Hugging Face,

00:23:25.180 --> 00:23:30.140
et cetera, et cetera, you just say, please use this model. And they have these integrations across these

00:23:30.140 --> 00:23:35.820
different things. So you, for example, you could be going along saying, I'm using OpenAI, I'm using OpenAI.

00:23:35.820 --> 00:23:41.420
That's a terrible answer. Let's see, let's ask Anthropic the same thing. And then right there

00:23:41.420 --> 00:23:46.460
below it, it'll, you could use these different models and different AI platforms and go, actually,

00:23:46.460 --> 00:23:50.540
it did really good on this one. I'm just going to keep using that one now for this, this part of my data.

00:23:50.540 --> 00:23:51.580
Okay.

00:23:51.580 --> 00:24:00.940
Okay. So how do you install it? You pip install jupyter_ai and that's it. It's good to go. And then you plug in,

00:24:00.940 --> 00:24:08.140
then you plug in, like your various API keys or whatever you need to as environment variables.

00:24:08.140 --> 00:24:13.660
They give you an example here. So you would say percent percent AI space ChatGPT. And then you type

00:24:13.660 --> 00:24:19.340
something like, please generate the Python code to solve the 2d Laplace equation in the Cartesian coordinates,

00:24:19.340 --> 00:24:24.220
solve the equation on the square, such and such with vanishing boundary conditions, et cetera. Plot

00:24:24.220 --> 00:24:29.020
the solution to matplotlib. Also, please provide an explanation. And then look at this, it goes,

00:24:29.020 --> 00:24:33.980
and down it goes. And you know, you can see off it, off it shows you how to implement it. And that's

00:24:33.980 --> 00:24:38.780
only part of that's shown. You can also have it do graphics. Anything that it, those models will

00:24:38.780 --> 00:24:43.980
generate is HTML just show up. So you could say, create a square using SVG with a black border and

00:24:43.980 --> 00:24:49.500
white fill. And then what shows up is not SVG commands or like little definition. You just

00:24:49.500 --> 00:24:55.660
get a square because it put it in HTML as a response. And so that showed up. You can even do LaTeX, like

00:24:55.660 --> 00:25:02.460
--F is math, generate a 2d heat equation. And you get this, partial differential equation

00:25:02.460 --> 00:25:10.140
thing in, in LaTeX. You can even ask it to write a poem, whatever you do. But that's one of the,

00:25:10.140 --> 00:25:16.540
go back to the poem one. Yeah. It says, write a poem in the style of variable names. So you can have

00:25:16.540 --> 00:25:21.820
commands with variable, insert variable stuff. So that's interesting.

00:25:21.820 --> 00:25:29.260
So you can also Jupyter has inputs and outputs, like along the left side, there's like a nine and

00:25:29.260 --> 00:25:35.980
a 10. And those are like the order they were executed. You can say, using input of nine,

00:25:35.980 --> 00:25:41.180
which might be the previous cell or something, or output of nine, go do, you know, take that and go

00:25:41.180 --> 00:25:43.980
do other things, right? Like kind of, that's how I opened this conversation.

00:25:44.860 --> 00:25:49.660
One of the really interesting examples that David Q pointed out, there's a nice talk that

00:25:49.660 --> 00:25:57.260
he gave in a link to in the show notes at high data, like a week ago was he had written some code,

00:25:57.260 --> 00:26:02.860
two examples. One, he'd written some code, a bunch of calculations and pandas, and then he created a

00:26:02.860 --> 00:26:09.900
plot, but the plot wasn't showing because he forgot to call plot.show. And, he asks one of the AIs,

00:26:09.900 --> 00:26:14.380
it depends, you know, you can ask a bunch depending on which model you tell it to target.

00:26:14.380 --> 00:26:18.620
He said, why isn't, Hey, in that previous cell, why isn't my plot showing? It said,

00:26:18.620 --> 00:26:24.780
because you forgot to pull, call show. So here's an example of your code above, but that

00:26:24.780 --> 00:26:27.340
works and shows the plot. That's pretty cool for help, right?

00:26:27.340 --> 00:26:27.980
Yeah.

00:26:27.980 --> 00:26:28.300
Geez.

00:26:28.300 --> 00:26:33.340
Instead of going to stack overflow or even trying to copy that into one of these AIs, you just go,

00:26:33.340 --> 00:26:38.860
Hey, that thing I just did, it didn't do what I expected. Why? Here's your answer. Not in a general

00:26:38.860 --> 00:26:43.100
sense, but like literally grabbing your data and your code. Two final things that are interesting

00:26:43.100 --> 00:26:49.020
here. The other, maybe three, the other one is he had some code that was crashing and I can't

00:26:49.020 --> 00:26:55.180
remember what it was doing, but it was throwing some kind of exception and it wasn't working out. And so he

00:26:55.180 --> 00:27:00.620
said, why is this code crashing? And it explained what the problem was with the code and how to fix

00:27:00.620 --> 00:27:08.220
it. Right. So super, super interesting here. I'll check that out. Yeah. We have that link.

00:27:08.220 --> 00:27:13.020
Yeah. Yeah. Yeah. The talk is really, really interesting. I'm trying to think there's one

00:27:13.020 --> 00:27:18.140
other thing that that was in that talk. It's like a 40 minute talk. So I don't remember all. Anyway,

00:27:18.140 --> 00:27:24.300
there's, there's more to it that goes on. also beyond this, it's, it looks pretty interesting. If you

00:27:24.300 --> 00:27:30.940
live in Jupyter and you think that these, these AI models have something to offer you, then this is

00:27:30.940 --> 00:27:36.860
definitely worth checking out. Alvaro says, you know, as long as it doesn't hallucinate a non-existing

00:27:36.860 --> 00:27:42.940
package. Yeah. That's, I mean, that is the thing. What's kind of cool about this is

00:27:42.940 --> 00:27:47.820
like, it puts it right into code, right? You just, you could run it and see if it's pretty

00:27:47.820 --> 00:27:53.100
cool. If it does indeed work and do what it says. So anyway, that's, that's our last. Yeah. Go ahead.

00:27:53.100 --> 00:27:59.100
Oh, before we could move away too much, I was listening to a, NPR, show about

00:27:59.100 --> 00:28:05.580
talking about AI and, somebody did research. I think that was for the times, New York times,

00:28:05.580 --> 00:28:10.140
a research project and found out that like there were, there were some, sometimes they would ask

00:28:10.140 --> 00:28:15.900
like, when, what's the first instance of this phrase showing up in the newspaper or something.

00:28:15.900 --> 00:28:22.780
And it would make up stuff. and even, and they'd say, well, you know, can you, what are those,

00:28:22.780 --> 00:28:28.060
you know, show those examples. And it would show snippets of fake articles that actually never were there.

00:28:29.580 --> 00:28:35.900
It did that for, that's crazy. It did that for, legal proceedings as well. And a lawyer

00:28:35.900 --> 00:28:40.780
cited those cases and got sanctioned or whatever lawyers get when they do it wrong.

00:28:40.780 --> 00:28:47.820
Those are wrong. Yeah. Don't, don't do that. But I also, the final thing that was interesting that I

00:28:47.820 --> 00:28:54.540
now remember that, you made me pause the thing, Brian, is you can point it at a directory of files,

00:28:54.540 --> 00:29:01.820
like, HTML files, markdown files, CSV file, just like a bunch of files that happen to be part of

00:29:01.820 --> 00:29:09.900
your project and you wish it had knowledge of. So you can say slash learn and pointed at a subdirectory

00:29:09.900 --> 00:29:16.620
of your project. It will go learn that stuff in those, in those documents. And then you can say,

00:29:16.620 --> 00:29:22.780
okay, now I have questions, right? Like, you know, if it learned some statistics about a CSV,

00:29:22.780 --> 00:29:28.620
the example that David gave was he had copied all the documentation for Jupyter AI over into there,

00:29:28.620 --> 00:29:32.300
and it told it to go learn about itself. And then it did. And you could talk to it about it

00:29:32.300 --> 00:29:38.380
based on the documentation. Oh, that's so if you got a whole bunch of research papers, for example,

00:29:38.380 --> 00:29:43.340
like I learned those. Now I need to ask you questions about this astronomy study. Okay.

00:29:43.340 --> 00:29:47.820
Uh, who, who, who studied this and what did, who found what, you know, whatever, right? Like these

00:29:47.820 --> 00:29:51.980
kinds of questions are pretty amazing. Yeah. And actually some of this stuff would be super powerful,

00:29:51.980 --> 00:29:57.260
especially if you could make it not like keep all the information local, like, like,

00:29:57.260 --> 00:30:02.380
like, you know, internal company stuff. They don't want to like upload all of their source code into

00:30:02.380 --> 00:30:08.140
the cloud just so that they can ask it questions about it. Yeah. Yeah, exactly. The other one,

00:30:08.140 --> 00:30:14.940
was to generate starter projects and code based on ideas. So you can say, generate me a Jupyter

00:30:14.940 --> 00:30:22.700
notebook that explains how to use matplotlib. Okay. Okay. And it'll come up with a notebook and it'll do,

00:30:22.700 --> 00:30:27.100
so here's a bunch of different examples and here's how you might apply a theme and it'll create things.

00:30:27.100 --> 00:30:33.500
And one of the things that they actually have to do is they use Lang chain and AI agents to in parallel,

00:30:33.500 --> 00:30:38.460
go break that into smaller things that are actually going to be able to handle and send them off to all

00:30:38.460 --> 00:30:42.700
be done separately and then compose them. So it'll say, Oh, well, what's that problem? Instead of saying,

00:30:42.700 --> 00:30:47.900
what's the notebook, it'll say, give me an outline of how somebody might learn this. And then for each

00:30:47.900 --> 00:30:53.260
mo each step in the outline, that's a section in the document that it'll go have the AIs generate

00:30:53.260 --> 00:30:57.980
those sections. And it's like a smaller problem that seemed to get better results. Anyway, this is a,

00:30:57.980 --> 00:31:04.620
this is a way bigger project than just like, maybe I can pipe some information to ChatGPT. There's like,

00:31:04.620 --> 00:31:10.380
there's a lot of crazy stuff going on here. the people who live in Jupyter might want to check out.

00:31:10.380 --> 00:31:17.020
It is pretty neat. I, I was not around the Jupyter stuff, but I was thinking, that a lot

00:31:17.020 --> 00:31:23.180
of software work is the maintenance, not the writing it in the first place. So, what we've done is

00:31:23.180 --> 00:31:28.860
like taking the fun part of making something new and giving it to a computer and we'll all be just

00:31:28.860 --> 00:31:33.180
like software maintainers at the, afterwards. Exactly. Let's be plumbers.

00:31:36.140 --> 00:31:40.620
Sue or overflow again, call the flower. No, I don't want to go in there.

00:31:40.620 --> 00:31:45.980
And also I'm just imagining like a whole bunch of new web apps showing up that are generated by like

00:31:45.980 --> 00:31:51.900
ideas and they kind of work, but nobody knows how to fix them. but yeah, sure. I mean,

00:31:51.900 --> 00:31:55.980
I think that you're right and that that's going to be what's going to happen a lot, but you technically

00:31:55.980 --> 00:32:01.260
could come to an existing notebook and add a, a cell below it and go, I don't really understand.

00:32:01.260 --> 00:32:06.780
Could you try to explain what is happening in the line in the cell above? Yeah. And it, you know,

00:32:06.780 --> 00:32:11.020
it also has the possibility for making legacy code better. And if that's the reality, we'll see.

00:32:11.020 --> 00:32:13.260
Yeah. Hopefully it's a good thing. So cool.

00:32:13.260 --> 00:32:17.100
All right. Well, those are all of our items. That's the last one I brought. Any extras?

00:32:17.100 --> 00:32:26.380
I got a couple extras. Will McCoogan and gang at, textualize, have started a YouTube

00:32:26.380 --> 00:32:32.060
channel. and so far there's, and some of these, I think it's a neat idea. Some of the

00:32:32.060 --> 00:32:37.420
tutorials that they already have, they're just walking through some of the tutorials, in video form at

00:32:37.420 --> 00:32:43.660
this point. and there's three up so far of, stopwatch intro and, how to get set up and use

00:32:43.660 --> 00:32:49.020
textualize and yeah, well, I like what they're doing over there and it's kind of fun. another

00:32:49.020 --> 00:32:55.020
fun thing from, I like it too, because it's, you know, textualize riches is a visual thing,

00:32:55.020 --> 00:33:00.940
but textualize is like a higher level UI framework where you've got docking sections and all kinds of

00:33:00.940 --> 00:33:07.180
really interesting UI things. And so sometimes learning that in a interact, an animated active

00:33:07.740 --> 00:33:12.940
video form is really maybe better than reading the docs. Yep. And then, something else that they've

00:33:12.940 --> 00:33:18.380
done. So maybe, watch that if you want to try to build your own, command line,

00:33:18.380 --> 00:33:25.900
use their text, you use your interface, a two E as it were, do we, or you could take your

00:33:25.900 --> 00:33:32.620
command line interface and just pipe, use a trogon, all trogon. I don't know how you say that.

00:33:32.620 --> 00:33:40.380
T R O G O N it's a, by, textualize also it's a new project. And the idea is you just,

00:33:40.380 --> 00:33:47.580
I think you use it to wrap your own, your own command line interface, tool, and it makes a graphic or

00:33:47.580 --> 00:33:54.700
text-based user interface out of it. There's a little video showing an example of, trogon app applied to

00:33:54.700 --> 00:34:00.860
SQLite utils, which, has a whole one SQLite utils has a bunch of great stuff. And now you can

00:34:00.860 --> 00:34:08.300
interact with or interact with it with a GUI instead. And that's kind of fun. works around click,

00:34:08.300 --> 00:34:13.980
but they're apparently they will support other libraries and languages in the future. So interesting.

00:34:13.980 --> 00:34:19.020
Okay. So yeah, it's like you can pop up the documentation for a parameter while you're working

00:34:19.020 --> 00:34:22.300
on it and a little modal window or something looks, looks interesting.

00:34:22.300 --> 00:34:27.740
Yeah. Well, I'm, I was thinking along the lines of even, like in a internal stuff, it's,

00:34:27.740 --> 00:34:33.020
fairly, you're going to write like a make script or a build script or some different

00:34:33.020 --> 00:34:39.420
utilitarian thing for your, your work group. if you use it all the time, command line is fine.

00:34:39.420 --> 00:34:43.580
But if you only use it like every, you know, once a month or every couple of weeks or something,

00:34:43.580 --> 00:34:48.620
it might be that you forget about some of the features and yeah, there's help, but having it as a

00:34:48.620 --> 00:34:53.740
GUI, if you could easily write a GUI for it, that's kind of fun. So why not? the other

00:34:53.740 --> 00:35:00.700
thing I wanted to bring up a completely different topic is, the June 2023 release of, visual

00:35:00.700 --> 00:35:07.900
studio code, came out recently. and I hadn't taken a look at it. I'm still, I've installed it,

00:35:07.900 --> 00:35:13.100
but I haven't played with it yet. And the reason why I want to play with it is, they've revamped the,

00:35:13.100 --> 00:35:19.180
uh, test discovery and execution. So, apparently you can, there were some glitches with finding

00:35:19.180 --> 00:35:24.460
tests sometimes. so I'll, I'm looking forward to trying this out. You have to turn it on though.

00:35:24.460 --> 00:35:31.100
You have to, there's, so these, this new test discovery stuff, you have to, go, you have to like

00:35:31.100 --> 00:35:38.860
set a opt into flag. and the, I just put the little snippet in our show notes so you can, just copy

00:35:38.860 --> 00:35:44.300
that into your settings file to try it out. So, yeah, I guess that's all I got. Do you have

00:35:44.300 --> 00:35:51.900
any extras? I do. I do. I have a report, a report from the field, Brian. So I had my 16 inch

00:35:51.900 --> 00:36:01.260
MacBook pro M one max as my laptop. And I decided I just, it's, it's not really necessarily the thing

00:36:01.260 --> 00:36:07.340
for me. So I traded in and got a new MacBook air 15 inch, one of those big, really light ones. And

00:36:08.060 --> 00:36:12.460
just want to sort of, compare the two of people are considering this. You know, I have my

00:36:12.460 --> 00:36:19.260
mini that we're talking on now with my big screen and all that, which is a M two pro is super fast.

00:36:19.260 --> 00:36:25.660
And I found like that thing was way faster than my, my, much heavier, more expensive laptop.

00:36:25.660 --> 00:36:30.700
Like, well, why am I dragging this thing around? If it's, if it's not really faster, if it's heavy,

00:36:30.700 --> 00:36:34.860
has all these, you know, all these cores and stuff that are just burning through the battery.

00:36:34.860 --> 00:36:39.660
Uh, even though it says it lasts a long time, it's like four or five hours was a good day for

00:36:39.660 --> 00:36:44.860
that thing. I'm like, you know what, I'm going to trade it in for, the, the new little bit bigger

00:36:44.860 --> 00:36:50.460
air. And yeah, so far that thing is incredible. It's excellent for doing software development thing.

00:36:50.460 --> 00:36:55.100
The only thing is the screen's not quite as nice, but for me that like, I don't live on my laptop,

00:36:55.100 --> 00:36:59.500
right? I've got like a big dedicated screen. I'm normally at then I'm like out somewhere. So

00:37:00.060 --> 00:37:05.500
small is better. And it lasts like twice as long and the battery. So, and I got the black one,

00:37:05.500 --> 00:37:10.780
which is weird for an Apple device, but very cool. People say it's a fingerprint magnet and

00:37:10.780 --> 00:37:15.660
absolutely, but it's also a super, super cool machine. So if people are thinking about it,

00:37:15.660 --> 00:37:21.260
I'll give it a pretty, I'll give it like a 90% thumbs up. the screen's not quite as nice.

00:37:21.260 --> 00:37:25.740
It's super clear, but it kind of is like washed out a little harder to see in light. But other than that,

00:37:25.740 --> 00:37:31.900
it's excellent. So there's my report in my expensive MacBook for an incredibly light,

00:37:31.900 --> 00:37:38.140
thin and often faster, right? When I'm doing stuff in Adobe audition for audio or video work

00:37:38.140 --> 00:37:43.580
or a lot of other places, like those things that I got to do, like noise reduction and other sorts of

00:37:43.580 --> 00:37:50.220
stuff, it's all single threaded. And so it's, it's like 20% faster than my $3,500 MacBook Pro max thing.

00:37:50.220 --> 00:37:53.980
Wow. And lighter and smaller, you know, all, all the good things.

00:37:53.980 --> 00:37:59.500
But you're still using, your, your mini for some, for some of your workload.

00:37:59.500 --> 00:38:04.060
I use my mini for almost all my work. Yeah. If I'm not out, then I usually, or sitting on the couch,

00:38:04.060 --> 00:38:10.460
then it's all mini, mini, mini all the time. Okay. Yeah. It's a black on the outside also then.

00:38:10.460 --> 00:38:12.220
Yeah. Yeah. It's, it's cool looking.

00:38:12.220 --> 00:38:17.260
And you can throw a sticker on that and somebody to hide that it's Apple and people might think you just

00:38:17.260 --> 00:38:23.020
have a Dell. They wouldn't know that's right. Run parallels. You can run, run Linux on it.

00:38:23.020 --> 00:38:28.140
They're like, okay, Linux got it. What is that thing? It's a weird. Yeah. You could disguise it

00:38:28.140 --> 00:38:31.740
pretty easy if you want, or just your sticker stand out better. You never know. All right.

00:38:31.740 --> 00:38:36.300
So people are thinking about that and pretty, pretty cool device. but Brian, if somebody

00:38:36.300 --> 00:38:41.980
were to send you a message and like tricky, like, Hey, you won a MacBook, you want to get your MacBook

00:38:41.980 --> 00:38:47.340
for free. You don't, you don't want that. Right. No. So, you know, companies they'll do tests.

00:38:47.340 --> 00:38:52.300
They'll like test their, their people just to make sure like, Hey, we told you not to click on

00:38:52.300 --> 00:38:58.140
weird looking links, but let's send out a test and see if they'll click on a link. And there's this guy,

00:38:58.140 --> 00:39:02.380
there's this picture, this guy getting congratulated by the CEO.

00:39:03.500 --> 00:39:10.220
I T I T group congratulated me for not failing the phishing test. And the guy's like, dear head

00:39:10.220 --> 00:39:15.260
likes like, Oh no. me who doesn't open emails is what the picture says.

00:39:15.260 --> 00:39:21.420
So you just ignore all your work email. You know, you won't get caught in the phishing test. How about

00:39:21.420 --> 00:39:28.940
that? yeah. those are, you, you've been out of the corporate for a while. That, that happens.

00:39:28.940 --> 00:39:34.380
We've got, I've, I've had some phishing tests come through this. Yeah. Yeah. Well, like the,

00:39:34.380 --> 00:39:41.180
the email like looks like it came from. So that's one of the problems is it looks like it's legit. And,

00:39:41.180 --> 00:39:46.140
and it has like, you know, the, the right third party company that we're using for some,

00:39:46.140 --> 00:39:52.620
some service or something. And, and you're like, wait, what is this? and, and then the,

00:39:52.620 --> 00:39:57.260
the link doesn't match up with the, whatever it says it's going to and things like that. But,

00:39:57.260 --> 00:40:04.620
um, it actually is harder now. I think that to, to, to verify what's real and what's not when more

00:40:04.620 --> 00:40:11.180
companies do use 30 third party, services for lots of stuff. So yeah. Yeah. Yeah. It's,

00:40:11.180 --> 00:40:15.740
you know, it's a joke, but it's, it is serious. I worked for a company where somebody got a, got a

00:40:15.740 --> 00:40:22.860
message. I think either I might've been through a hacked email account or, or it was spoofed in a

00:40:22.860 --> 00:40:27.260
way that it, it looked like it came from like a higher up to say, there's something really big

00:40:27.260 --> 00:40:32.300
emergency. This vendor is super upset. We didn't pay them. they're kind of sue us if we don't,

00:40:32.300 --> 00:40:39.580
you know, could you quick transfer this money over to this bank account? And because it, it came from,

00:40:39.580 --> 00:40:44.220
you know, somebody who looked like they should be asking that, right. It, it almost happened. So

00:40:44.220 --> 00:40:50.700
not good. That's not good. Yeah. the, I get texts down, like the latest one was just this

00:40:50.700 --> 00:40:55.740
weekend. I had a text or something that said, said, Hey, we need information about your shipping for,

00:40:55.740 --> 00:41:02.220
uh, Amazon shipment or something. And it's like copy and paste this link into your browser. And it's just

00:41:02.220 --> 00:41:08.300
like bizarre link. And I'm like, no, it would be amazon.com something. there's no way it's going to be

00:41:09.340 --> 00:41:16.940
Bob's Bob's burgers or whatever. yeah. Amazon. Yeah. Let's go to amazon.com.

00:41:16.940 --> 00:41:24.300
Oh, anyway. Oh, well, well may, may everybody get through their day without clicking on phishing

00:41:24.300 --> 00:41:29.980
emails. So that's right. Yeah. May you, may you pass the test or don't read the email. Just stop

00:41:29.980 --> 00:41:35.020
reading email. Yeah. Think about how productive you'll be. Well, this was very productive, Brian.

00:41:35.020 --> 00:41:40.540
Yes, it was. Yeah. Well, thanks for, for hanging out with me to this morning. So it was fun.

00:41:40.540 --> 00:41:45.260
Yeah, absolutely. Thanks for being here as always. And everyone, thank you for listening. It's been a lot

00:41:45.260 --> 00:41:46.700
of fun. See you next time. Bye.

