WEBVTT

00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.000 --> 00:00:14.000
This is episode 384, recorded May 21st, 2024.

00:00:14.000 --> 00:00:15.000
I'm Michael Kennedy.

00:00:15.000 --> 00:00:16.000
And I'm Brian Okken.

00:00:16.000 --> 00:00:21.000
This episode is sponsored by Mailtrap, better email sending APIs.

00:00:21.000 --> 00:00:23.000
Check them out at pythonbytes.fm/mailtrap.

00:00:23.000 --> 00:00:25.000
Tell you more about them later.

00:00:25.000 --> 00:00:29.000
And you can connect with us over on Fostedon.

00:00:29.000 --> 00:00:32.000
We're all Massadon in general, but we're all over on Fostedon.

00:00:32.000 --> 00:00:33.000
So find us there.

00:00:33.000 --> 00:00:38.000
And if you want to X, then you can connect to us over on X as well.

00:00:38.000 --> 00:00:40.000
Brian, I'm not going to call it Twitter anymore.

00:00:40.000 --> 00:00:41.000
Do you know why?

00:00:41.000 --> 00:00:42.000
Why?

00:00:42.000 --> 00:00:46.000
When you go there, it now redirects Twitter to X instead of X to Twitter.

00:00:46.000 --> 00:00:47.000
Oh, really?

00:00:47.000 --> 00:00:49.000
Seems like they've accepted their fate.

00:00:49.000 --> 00:00:50.000
They've accepted their fate.

00:00:50.000 --> 00:00:53.000
So at least for the time being, you can all--

00:00:53.000 --> 00:00:58.000
I just had a friend of mine, like, get mad at me for unfollowing him on Twitter.

00:00:58.000 --> 00:01:01.000
And I'm like, it wasn't just you, man.

00:01:01.000 --> 00:01:03.000
I don't follow anybody on Twitter.

00:01:03.000 --> 00:01:05.000
Don't take it personally.

00:01:05.000 --> 00:01:09.000
Yeah, so people can find us there as well, although more conversations on Massadon.

00:01:09.000 --> 00:01:11.000
And check out the live show.

00:01:11.000 --> 00:01:16.000
If you would like, pythonbytes.fm/live, usually Tuesdays at 10 a.m. Pacific time.

00:01:16.000 --> 00:01:23.000
And if you want an artisanal, handcrafted, specialized, personal summary of what we talked about on the show,

00:01:23.000 --> 00:01:29.000
just head on over to pythonbytes.fm, click newsletter right in the middle of the hero section at the top,

00:01:29.000 --> 00:01:31.000
and put your email address there.

00:01:31.000 --> 00:01:32.000
We won't share it.

00:01:32.000 --> 00:01:35.000
It's just so that we can talk to you about things that we're up to.

00:01:35.000 --> 00:01:37.000
So if that sounds awesome, do that.

00:01:37.000 --> 00:01:41.000
But, Brian, we're not going to be forceful about that.

00:01:41.000 --> 00:01:44.000
We're not going to overdo it, are we?

00:01:44.000 --> 00:01:47.000
I'm going to start by talking about Gitforce, actually.

00:01:47.000 --> 00:01:51.000
Adam Johnson wrote a blog post about Git.

00:01:51.000 --> 00:01:56.000
This isn't specifically Python related, but I'm guessing a lot of you guys use Git.

00:01:56.000 --> 00:02:00.000
I've seen a few people who do Python who use Git also.

00:02:00.000 --> 00:02:01.000
That's true.

00:02:01.000 --> 00:02:05.000
So one of the things that happens is when you're using Git,

00:02:05.000 --> 00:02:12.000
you've got your local repo that's not quite in sync with the remote one.

00:02:12.000 --> 00:02:16.000
And if it's just you, and it somehow, when you push and it doesn't work right,

00:02:16.000 --> 00:02:19.000
you do a push force with a dash dash force.

00:02:19.000 --> 00:02:23.000
And it just says, no, I mean it, take it.

00:02:23.000 --> 00:02:25.000
That's not always what you want to do.

00:02:25.000 --> 00:02:32.000
So Adam Johnson wrote a post called Force Push Safely with Force with Lease

00:02:32.000 --> 00:02:34.000
and Force if Includes.

00:02:34.000 --> 00:02:35.000
Wow, these are verbose.

00:02:35.000 --> 00:02:37.000
I did not know about either of these things.

00:02:37.000 --> 00:02:40.000
So I'm really glad that he wrote this up.

00:02:40.000 --> 00:02:44.000
The idea is I don't know what that means.

00:02:44.000 --> 00:02:48.000
I don't know what with lease or if includes means.

00:02:48.000 --> 00:02:53.000
But the gist of it is, is one of them will make sure that you have --

00:02:53.000 --> 00:02:55.000
let's just look at what he said.

00:02:55.000 --> 00:02:59.000
So if you try and sometimes you get an error message that said,

00:02:59.000 --> 00:03:02.000
a note about fast forwards and failed push,

00:03:02.000 --> 00:03:07.000
because the tip of your current branch is behind its remote counterpart.

00:03:07.000 --> 00:03:09.000
So you're not up to date.

00:03:09.000 --> 00:03:13.000
So -- and wait, before you ignore this because you think,

00:03:13.000 --> 00:03:17.000
oh, I only use my own repos and I'm never going to be in conflict.

00:03:17.000 --> 00:03:21.000
I'm finding this more and more with my own repositories

00:03:21.000 --> 00:03:22.000
and I'm the only one developing.

00:03:22.000 --> 00:03:23.000
Why is that?

00:03:23.000 --> 00:03:28.000
It's because I've got CI tools that do things like update things for me.

00:03:28.000 --> 00:03:32.000
And if it passes, it goes through.

00:03:32.000 --> 00:03:35.000
And so therefore, my local branch is not up to date with my remote

00:03:35.000 --> 00:03:38.000
because there's stuff in CI doing things for me.

00:03:38.000 --> 00:03:41.000
That's a good thing, but it causes this problem sometimes.

00:03:41.000 --> 00:03:46.000
And what we want to do is to make sure that we pull or fetch all of the branches

00:03:46.000 --> 00:03:49.000
that we were going to be pushing to and make sure that our local changes

00:03:49.000 --> 00:03:50.000
are merged correctly.

00:03:50.000 --> 00:03:54.000
And if we don't do that, get push will fail.

00:03:54.000 --> 00:03:58.000
So this -- you can force it, but forcing will just overwrite your version

00:03:58.000 --> 00:03:59.000
with the one up there.

00:03:59.000 --> 00:04:01.000
It's not really what you want to do.

00:04:01.000 --> 00:04:08.000
The -- so one of these flags will make sure that you have at least fetched

00:04:08.000 --> 00:04:12.000
the branching question and all the commits,

00:04:12.000 --> 00:04:14.000
that you fetched all of the commits that are involved

00:04:14.000 --> 00:04:16.000
so that it assumes that you've looked at them.

00:04:16.000 --> 00:04:20.000
And then one of them makes sure that you have actually --

00:04:20.000 --> 00:04:22.000
you've actually checked it out.

00:04:22.000 --> 00:04:26.000
So if you did a get check out and actually -- so that -- and that would mean

00:04:26.000 --> 00:04:31.000
that would, I guess, assume that you have looked at -- actually looked at it,

00:04:31.000 --> 00:04:33.000
not just that it's on your computer.

00:04:33.000 --> 00:04:36.000
Because fetch will pull everything down, so it's on your computer.

00:04:36.000 --> 00:04:40.000
But committing -- or checking it out will mean that you've actually had it

00:04:40.000 --> 00:04:44.000
in there and you had at least the opportunity to look at it.

00:04:44.000 --> 00:04:48.000
So I'm definitely going to -- and there was some comments to this blog post

00:04:48.000 --> 00:04:54.000
saying that I usually have a shortcut assigned to this,

00:04:54.000 --> 00:04:56.000
and I'm not sure what the normal shortcut is for this.

00:04:56.000 --> 00:04:59.000
But I'm definitely going to set this up to see if I can get this

00:04:59.000 --> 00:05:01.000
to happen automatically or something.

00:05:01.000 --> 00:05:03.000
Yeah, this is interesting.

00:05:03.000 --> 00:05:06.000
It's new to me as well, and I'm certainly going to check it out.

00:05:06.000 --> 00:05:11.000
So anyway, some get safety concerns.

00:05:11.000 --> 00:05:15.000
So speaking of safety, how was your flight?

00:05:15.000 --> 00:05:17.000
Was your flight safe back from PyCon?

00:05:17.000 --> 00:05:19.000
My flight was great, actually.

00:05:19.000 --> 00:05:21.000
It worked out pretty good.

00:05:21.000 --> 00:05:24.000
All the flights were full, so it was like rubbing shoulders with strangers.

00:05:24.000 --> 00:05:28.000
I even got the bonus of being in the middle seat one time.

00:05:28.000 --> 00:05:30.000
That was amazing.

00:05:30.000 --> 00:05:32.000
That was the flight that was delayed for an hour and a half

00:05:32.000 --> 00:05:34.000
and waited on the tarmac instead of the terminal,

00:05:34.000 --> 00:05:36.000
so I got an extra time there with people.

00:05:36.000 --> 00:05:38.000
But, yeah, no, it was great.

00:05:38.000 --> 00:05:40.000
And, yeah, let's talk a little bit about PyCon.

00:05:40.000 --> 00:05:43.000
So PyCon was awesome.

00:05:43.000 --> 00:05:45.000
There was a ton of people that I got to see again,

00:05:45.000 --> 00:05:47.000
and that was really special.

00:05:47.000 --> 00:05:51.000
A bunch of people I met, and that was also amazing.

00:05:51.000 --> 00:05:54.000
I just spent my time going around, networking,

00:05:54.000 --> 00:05:57.000
learning what folks were up to, both through the expo floor

00:05:57.000 --> 00:06:00.000
and just from talking to others.

00:06:00.000 --> 00:06:05.000
I say this all the time, but to me it's basically my geek holiday.

00:06:05.000 --> 00:06:07.000
We missed you, though, Brian.

00:06:07.000 --> 00:06:09.000
We missed you this year.

00:06:09.000 --> 00:06:11.000
I missed you guys.

00:06:11.000 --> 00:06:13.000
Yeah, a bunch of people asked about you, by the way.

00:06:13.000 --> 00:06:15.000
They're like, "Hey, too bad he's not here."

00:06:15.000 --> 00:06:18.000
I did do a live TalkByThon episode with Jody Burchill

00:06:18.000 --> 00:06:24.000
and some other data science ladies there at the JetBrains booth.

00:06:24.000 --> 00:06:26.000
So thanks to them for all the AV setup,

00:06:26.000 --> 00:06:28.000
and I'll post that in a couple weeks.

00:06:28.000 --> 00:06:30.000
The talks look really good.

00:06:30.000 --> 00:06:32.000
I'm not always inspired by the PyCon talks

00:06:32.000 --> 00:06:35.000
and some of the Python more regional conference talks,

00:06:35.000 --> 00:06:37.000
but this year they looked quite good.

00:06:37.000 --> 00:06:40.000
So I'm really looking forward to the YouTube version of them

00:06:40.000 --> 00:06:41.000
coming out whenever that happens.

00:06:41.000 --> 00:06:43.000
I think last year was like three months or something.

00:06:43.000 --> 00:06:45.000
Pretty quick. No, just kidding.

00:06:45.000 --> 00:06:48.000
But eventually, whenever they do come out, they'll be really good.

00:06:48.000 --> 00:06:51.000
So we'll talk more about that here when they land, right?

00:06:51.000 --> 00:06:52.000
Yeah.

00:06:52.000 --> 00:06:54.000
All right, let's wrap this up with a rant.

00:06:54.000 --> 00:06:56.000
I highly recommend people go.

00:06:56.000 --> 00:06:58.000
If you're at PyCon and you think that you might,

00:06:58.000 --> 00:06:59.000
you should definitely go.

00:06:59.000 --> 00:07:03.000
If you're thinking that I'm not good enough at Python to go,

00:07:03.000 --> 00:07:04.000
you should definitely go.

00:07:04.000 --> 00:07:05.000
You'll make connections.

00:07:05.000 --> 00:07:06.000
You'll get better at Python.

00:07:06.000 --> 00:07:07.000
People are super welcoming.

00:07:07.000 --> 00:07:09.000
But do you know what was not welcome?

00:07:09.000 --> 00:07:11.000
The stupid mask policy, right?

00:07:11.000 --> 00:07:13.000
It was universally disliked.

00:07:13.000 --> 00:07:16.000
And I'm sure there's one person out of several thousand

00:07:16.000 --> 00:07:18.000
that are like, "Michael, the only reason I would come because of this."

00:07:18.000 --> 00:07:19.000
Yes, I know.

00:07:19.000 --> 00:07:23.000
But I'll tell you, I spoke to tons of people, spoke to vendors.

00:07:23.000 --> 00:07:25.000
Everyone was there complaining about the masks.

00:07:25.000 --> 00:07:27.000
They're like, "Can we go outside and just take this thing off for a minute

00:07:27.000 --> 00:07:28.000
so we can talk?"

00:07:28.000 --> 00:07:31.000
Or I lost my voice after the first day and still had to do the podcast

00:07:31.000 --> 00:07:36.000
because it would be like, "What?"

00:07:36.000 --> 00:07:40.000
It was just a loud – everybody had masks on and it was like loud din

00:07:40.000 --> 00:07:41.000
because everyone was trying to yell through them.

00:07:41.000 --> 00:07:42.000
I don't know.

00:07:42.000 --> 00:07:44.000
It was just a tremendous mistake.

00:07:44.000 --> 00:07:48.000
The only reason I bring this up, not to rant because I've already done this rant.

00:07:48.000 --> 00:07:52.000
Hopefully, people listening for next year, people interested in going next year,

00:07:52.000 --> 00:07:57.000
speak to people in charge and say, "Okay, the world is not like that anymore.

00:07:57.000 --> 00:08:01.000
Can we please just have a more coherent policy?"

00:08:01.000 --> 00:08:04.000
Anyway, that's what my hope is.

00:08:04.000 --> 00:08:06.000
We could do somewhere in the middle.

00:08:06.000 --> 00:08:10.000
If you feel like you might have a cough or something,

00:08:10.000 --> 00:08:12.000
please try to keep your mask on.

00:08:12.000 --> 00:08:14.000
Yeah, 100%.

00:08:14.000 --> 00:08:17.000
I said this before, and just for people who didn't catch it,

00:08:17.000 --> 00:08:21.000
I'm not anti-mask, not anti-science, whatever.

00:08:21.000 --> 00:08:27.000
When I went on a trip recently, long trip, maybe I was getting sick,

00:08:27.000 --> 00:08:30.000
I wore my mask the whole time even though no one around me did,

00:08:30.000 --> 00:08:33.000
like a super long flight and the airport and everything

00:08:33.000 --> 00:08:35.000
because I wanted to be considerate.

00:08:35.000 --> 00:08:37.000
I don't care if other people want to wear a mask.

00:08:37.000 --> 00:08:41.000
That's great, but don't force this weird policy onto everybody

00:08:41.000 --> 00:08:45.000
who generally doesn't think that they'd rather.

00:08:45.000 --> 00:08:50.000
It undermines the networking aspect, both for the sponsors and Expo

00:08:50.000 --> 00:08:53.000
trying to talk to people and each other.

00:08:53.000 --> 00:08:57.000
All right, rant over, but please, fingers crossed for next year.

00:08:57.000 --> 00:08:59.000
If you're out there and you agree with me,

00:08:59.000 --> 00:09:01.000
please let the folks know.

00:09:01.000 --> 00:09:03.000
You don't have to email me.

00:09:03.000 --> 00:09:05.000
I've already had this conversation a lot,

00:09:05.000 --> 00:09:07.000
but it's just closing the loop in the past.

00:09:07.000 --> 00:09:11.000
I feel like what I said before pretty much was how it was.

00:09:11.000 --> 00:09:13.000
You know what, though?

00:09:13.000 --> 00:09:14.000
It's quite awesome, Brian.

00:09:14.000 --> 00:09:16.000
Hinted at the top of the show, not that.

00:09:16.000 --> 00:09:17.000
That's later. Mail trap.

00:09:17.000 --> 00:09:19.000
Let's talk about mail trap real quick.

00:09:19.000 --> 00:09:21.000
This episode is sponsored by Mail Trap,

00:09:21.000 --> 00:09:23.000
an email delivery platform that developers love,

00:09:23.000 --> 00:09:27.000
an email sending solution with industry-best analytics,

00:09:27.000 --> 00:09:33.000
SMTP, and email API, as well as SDKs for major programming languages

00:09:33.000 --> 00:09:35.000
and 24/7 human support.

00:09:35.000 --> 00:09:38.000
Try for free at mailtrap.io.

00:09:38.000 --> 00:09:40.000
Indeed. Thank you, Mail Trap.

00:09:40.000 --> 00:09:42.000
All right, over to you, Brian. What you got?

00:09:42.000 --> 00:09:45.000
I'm going to talk about Git some more, actually.

00:09:45.000 --> 00:09:46.000
Let's get it on.

00:09:46.000 --> 00:09:53.000
I'm thinking about forking a project because you remember how projects

00:09:53.000 --> 00:09:56.000
used to have like fork me on GitHub, little things on the top corner.

00:09:56.000 --> 00:09:58.000
They don't really do that anymore.

00:09:58.000 --> 00:10:03.000
But we often think of contributing to an open source project

00:10:03.000 --> 00:10:08.000
just in the sense of forking it just so that I can make modifications

00:10:08.000 --> 00:10:10.000
to contribute back to the project.

00:10:10.000 --> 00:10:13.000
That's often how we--you create a fork,

00:10:13.000 --> 00:10:16.000
you create a branch on your own fork, and then you contribute back

00:10:16.000 --> 00:10:18.000
to the project.

00:10:18.000 --> 00:10:20.000
That's how we do contributions.

00:10:20.000 --> 00:10:24.000
But what if you want to have a long-running fork of a project?

00:10:24.000 --> 00:10:25.000
And that's what I'm considering.

00:10:25.000 --> 00:10:28.000
And I was thinking about strategies, how to do that,

00:10:28.000 --> 00:10:30.000
because I don't know.

00:10:30.000 --> 00:10:36.000
So I ran across this--a couple blog posts from the Git folks.

00:10:36.000 --> 00:10:39.000
It's actually from Leslie Dennington.

00:10:39.000 --> 00:10:40.000
Cool.

00:10:40.000 --> 00:10:42.000
There's a couple of posts called "Being Friendly."

00:10:42.000 --> 00:10:45.000
So there's "Being Friendly, Friendly Forks 101,"

00:10:45.000 --> 00:10:50.000
and there's "Being Friendly Strategies for Friendly Fork Management."

00:10:50.000 --> 00:10:53.000
And I think these are interesting because there's a lot of stuff

00:10:53.000 --> 00:10:58.000
going on here, but not really.

00:10:58.000 --> 00:11:01.000
We'll go through them relatively quickly.

00:11:01.000 --> 00:11:04.000
They picked some examples to think about, and I was thinking

00:11:04.000 --> 00:11:07.000
I would really like to know from an example project,

00:11:07.000 --> 00:11:11.000
and Git itself is a lovely example project

00:11:11.000 --> 00:11:15.000
because Git has several forks, and they have different policies.

00:11:15.000 --> 00:11:23.000
So there's Git/Git, which is the main--wait.

00:11:23.000 --> 00:11:24.000
There's Git for Windows, for instance.

00:11:24.000 --> 00:11:27.000
So there's Git/Git, the base one.

00:11:27.000 --> 00:11:29.000
There's Git for Windows Git.

00:11:29.000 --> 00:11:31.000
There's Microsoft Git, and there's GitHub Git.

00:11:31.000 --> 00:11:35.000
So there's four different friendly forks off of that.

00:11:35.000 --> 00:11:37.000
Actually, it's not like that.

00:11:37.000 --> 00:11:42.000
There's the main Git/Git, and then there's Git for Windows

00:11:42.000 --> 00:11:46.000
that's based off of that, and then there's Microsoft Git,

00:11:46.000 --> 00:11:49.000
which is a fork of the Git for Windows,

00:11:49.000 --> 00:11:54.000
and then there's GitHub Git, which is a separate branch fork.

00:11:54.000 --> 00:11:58.000
Anyway, three forks on it, and they have different policies,

00:11:58.000 --> 00:12:00.000
and it's interesting to look at them.

00:12:00.000 --> 00:12:04.000
So if you look about the different needs--

00:12:04.000 --> 00:12:07.000
so the first article talks about the different needs for the forks,

00:12:07.000 --> 00:12:10.000
and then the second article talks about merging strategy.

00:12:10.000 --> 00:12:13.000
That's really where I wanted to understand it

00:12:13.000 --> 00:12:14.000
because here's the idea.

00:12:14.000 --> 00:12:18.000
I'm going to fork a project, and then I want to regularly

00:12:18.000 --> 00:12:22.000
get updates from the parent project because I want to maybe--

00:12:22.000 --> 00:12:25.000
and this happens for internal companies a lot.

00:12:25.000 --> 00:12:30.000
If I want to add on extra features that are not there,

00:12:30.000 --> 00:12:33.000
maybe I tried to contribute them, and they got rejected,

00:12:33.000 --> 00:12:35.000
and I still need them so I can have a friendly fork,

00:12:35.000 --> 00:12:37.000
but I want to keep up to date with all the changes.

00:12:37.000 --> 00:12:39.000
So how do you keep up to date?

00:12:39.000 --> 00:12:44.000
So one of the ways is from a--you take what they call

00:12:44.000 --> 00:12:49.000
a merging rebase, which is what Git for Windows does,

00:12:49.000 --> 00:12:53.000
and I guess I'm not going to try to find all the diagrams,

00:12:53.000 --> 00:12:55.000
but there's diagrams in here too.

00:12:55.000 --> 00:12:59.000
But there's merging rebases where you kind of do

00:12:59.000 --> 00:13:04.000
like a fake merge where you say, "I'm going to merge,

00:13:04.000 --> 00:13:07.000
but I'm actually only going to take my changes,"

00:13:07.000 --> 00:13:11.000
and then you--so that isolates just your changes,

00:13:11.000 --> 00:13:16.000
and then you rebase so that you can just take the new space

00:13:16.000 --> 00:13:20.000
on the upstream one and then just apply all of your changes to it.

00:13:20.000 --> 00:13:22.000
It's a way to just do that.

00:13:22.000 --> 00:13:26.000
The second way is a new branch, and that'll allow you

00:13:26.000 --> 00:13:31.000
to just take--like the Microsoft Git one does a new branch.

00:13:31.000 --> 00:13:34.000
So for each upstream new version,

00:13:34.000 --> 00:13:36.000
you just create a new branch for that,

00:13:36.000 --> 00:13:39.000
like completely do a new branch,

00:13:39.000 --> 00:13:42.000
and then you copy over your changes

00:13:42.000 --> 00:13:46.000
from past changes onto the new changes.

00:13:46.000 --> 00:13:49.000
So you start the branch over again every time, almost.

00:13:49.000 --> 00:13:53.000
And then the third one is just a traditional merge,

00:13:53.000 --> 00:13:55.000
like Git uses a traditional merge,

00:13:55.000 --> 00:13:57.000
but there's a lot of noise in that,

00:13:57.000 --> 00:13:59.000
and so they say that that works okay.

00:13:59.000 --> 00:14:01.000
It takes a lot of people and a lot of testing, though,

00:14:01.000 --> 00:14:02.000
and they often delay.

00:14:02.000 --> 00:14:07.000
So let's say I picked, I don't know, any project,

00:14:07.000 --> 00:14:11.000
and for a major release, I'd maybe wait till like--

00:14:11.000 --> 00:14:13.000
wait a couple months or something or wait

00:14:13.000 --> 00:14:15.000
whatever the dot releases to make sure

00:14:15.000 --> 00:14:17.000
a couple of the bug fixes releases

00:14:17.000 --> 00:14:20.000
after the new features came out and then merge them.

00:14:20.000 --> 00:14:24.000
And then at the end, which is great--

00:14:24.000 --> 00:14:27.000
I know this is a lot of detail, but great articles.

00:14:27.000 --> 00:14:32.000
Oh, there's a cool picture of the creating a new branch,

00:14:32.000 --> 00:14:34.000
completing a new branch, and then merging your changes over.

00:14:34.000 --> 00:14:37.000
So there are some great pictures in here.

00:14:37.000 --> 00:14:41.000
And then they also talked about like proactive versus cautious,

00:14:41.000 --> 00:14:43.000
like how frequently you're going to merge.

00:14:43.000 --> 00:14:46.000
And this is just a really good discussion of--

00:14:46.000 --> 00:14:48.000
this is a lot of work, guys.

00:14:48.000 --> 00:14:51.000
If you're really going to maintain a fork of a project,

00:14:51.000 --> 00:14:53.000
you just take it slow.

00:14:53.000 --> 00:14:54.000
Make sure you know what you're doing

00:14:54.000 --> 00:14:56.000
and know how many people you are there.

00:14:56.000 --> 00:14:59.000
So it talks about the different scenarios

00:14:59.000 --> 00:15:01.000
and when you might or might not want

00:15:01.000 --> 00:15:03.000
to use different versions.

00:15:03.000 --> 00:15:08.000
And I think the final one says, if you're new to the fork game

00:15:08.000 --> 00:15:11.000
and want to keep it simple, just do merges

00:15:11.000 --> 00:15:13.000
and be considerate.

00:15:13.000 --> 00:15:15.000
Maybe that might be the easiest.

00:15:15.000 --> 00:15:18.000
And I think I might go with this one to start with.

00:15:18.000 --> 00:15:22.000
But I am intrigued by the whole merging rebase thing.

00:15:22.000 --> 00:15:23.000
That sounds neat, too.

00:15:23.000 --> 00:15:25.000
Actually, they all sound cool.

00:15:25.000 --> 00:15:27.000
I might try all of them just to see how it goes.

00:15:27.000 --> 00:15:30.000
But it's just me, so I might be crazy.

00:15:30.000 --> 00:15:33.000
But I bring this up because I'm--

00:15:33.000 --> 00:15:35.000
one, because other people might be considering

00:15:35.000 --> 00:15:38.000
like forking something for their own company use

00:15:38.000 --> 00:15:41.000
or just wanting to possibly start a sister project

00:15:41.000 --> 00:15:44.000
for something, have it be slightly different.

00:15:44.000 --> 00:15:46.000
How do you go about that?

00:15:46.000 --> 00:15:47.000
So these are great articles.

00:15:47.000 --> 00:15:49.000
But also, if I'm missing something,

00:15:49.000 --> 00:15:51.000
if this is not a great reference for this

00:15:51.000 --> 00:15:55.000
and other people have other tools around, let me know.

00:15:55.000 --> 00:15:58.000
By the way, the whole forking rebase thing,

00:15:58.000 --> 00:16:00.000
there was a script involved here.

00:16:00.000 --> 00:16:04.000
So they shared the script that they used for doing this

00:16:04.000 --> 00:16:09.000
and then talked about some cool merging like diffs.

00:16:09.000 --> 00:16:11.000
And there's a diff merge tool that they used

00:16:11.000 --> 00:16:13.000
for code reviews and stuff.

00:16:13.000 --> 00:16:15.000
So anyway.

00:16:15.000 --> 00:16:16.000
Yeah, very cool.

00:16:16.000 --> 00:16:20.000
This is some advanced Git stuff right here.

00:16:20.000 --> 00:16:24.000
You can easily get yourself in trouble if you fork a repo.

00:16:24.000 --> 00:16:26.000
And even if you intend to make changes back

00:16:26.000 --> 00:16:29.000
and you change the branch that is being updated

00:16:29.000 --> 00:16:32.000
on the remote or the original repository,

00:16:32.000 --> 00:16:34.000
you can end up with merge conflicts.

00:16:34.000 --> 00:16:36.000
It almost always seems like a good idea

00:16:36.000 --> 00:16:39.000
to have a separate branch where you work

00:16:39.000 --> 00:16:42.000
and something that syncs with the project.

00:16:42.000 --> 00:16:44.000
And so that's kind of like that.

00:16:44.000 --> 00:16:48.000
Plus, then what do you do to keep it in sync?

00:16:48.000 --> 00:16:50.000
You definitely could end up with conflicts

00:16:50.000 --> 00:16:52.000
if your intention is not to keep it in sync

00:16:52.000 --> 00:16:54.000
by pushing your changes back to it, right?

00:16:54.000 --> 00:16:55.000
Yeah.

00:16:55.000 --> 00:16:57.000
The other thing that I want to point out

00:16:57.000 --> 00:17:01.000
that wasn't in this article is tags are completely separate.

00:17:01.000 --> 00:17:04.000
I know that tags are part of the Git repository,

00:17:04.000 --> 00:17:06.000
but they don't come automatically.

00:17:06.000 --> 00:17:10.000
So, and that's often, I don't know the reason,

00:17:10.000 --> 00:17:12.000
it's convenient that they don't come.

00:17:12.000 --> 00:17:14.000
It's both convenient and painful

00:17:14.000 --> 00:17:17.000
because the new project will have its own versioning scheme,

00:17:17.000 --> 00:17:19.000
but if you want the same versioning scheme,

00:17:19.000 --> 00:17:21.000
you have to do that separately.

00:17:21.000 --> 00:17:23.000
You need to make sure that you're pulling the tags as well.

00:17:23.000 --> 00:17:24.000
So, yeah.

00:17:24.000 --> 00:17:25.000
A lot to consider.

00:17:25.000 --> 00:17:26.000
Yeah.

00:17:26.000 --> 00:17:28.000
All right, let's talk about Tack.

00:17:28.000 --> 00:17:32.000
Not a super popular project yet, but pretty awesome.

00:17:32.000 --> 00:17:36.000
Let's see, it's about a month old, I would say.

00:17:36.000 --> 00:17:38.000
No, four months old is how old it is.

00:17:38.000 --> 00:17:42.000
So, this is a project that lets you understand the architecture

00:17:42.000 --> 00:17:44.000
and actually not just understand,

00:17:44.000 --> 00:17:48.000
let you specify the architecture of your application

00:17:48.000 --> 00:17:52.000
and enforce it through a linting sort of thing, okay?

00:17:52.000 --> 00:17:54.000
So, let's see what they say here.

00:17:54.000 --> 00:17:57.000
Python tool to enforce modular design.

00:17:57.000 --> 00:17:59.000
So, maybe the best way, Brian,

00:17:59.000 --> 00:18:01.000
would be to like look at this little thing

00:18:01.000 --> 00:18:02.000
as people are watching.

00:18:02.000 --> 00:18:05.000
You can see there's a little video demo, which is great.

00:18:05.000 --> 00:18:08.000
So, what it will do is it will show you,

00:18:08.000 --> 00:18:11.000
you set up some config files and you say,

00:18:11.000 --> 00:18:15.000
"I have these parts of my application, right?

00:18:15.000 --> 00:18:17.000
These modules or these packages,

00:18:17.000 --> 00:18:21.000
and I want to control how they interact with each other."

00:18:21.000 --> 00:18:24.000
So, if I say, "This stuff makes up a data layer here,

00:18:24.000 --> 00:18:26.000
and this stuff makes up an API layer,"

00:18:26.000 --> 00:18:29.000
you might say that the API layer and the data layer

00:18:29.000 --> 00:18:30.000
are not allowed to talk to each other.

00:18:30.000 --> 00:18:32.000
Only stuff that consumes either of them

00:18:32.000 --> 00:18:34.000
can coordinate across them, right?

00:18:34.000 --> 00:18:37.000
So, for example, in the API section,

00:18:37.000 --> 00:18:39.000
shouldn't import something from the data section

00:18:39.000 --> 00:18:40.000
and vice versa.

00:18:40.000 --> 00:18:43.000
You want them to be independent so that potentially

00:18:43.000 --> 00:18:46.000
they're easier to test, they're easier to change.

00:18:46.000 --> 00:18:47.000
You know if I change this part,

00:18:47.000 --> 00:18:50.000
it's only going to affect the thing itself

00:18:50.000 --> 00:18:54.000
and the stuff that I explicitly understand to be using it.

00:18:54.000 --> 00:18:56.000
It doesn't become a spider web of

00:18:56.000 --> 00:18:58.000
everything's connected to everything

00:18:58.000 --> 00:19:00.000
as much as it can in Python,

00:19:00.000 --> 00:19:02.000
because circular dependencies are an issue.

00:19:02.000 --> 00:19:05.000
But still, that's the idea, okay?

00:19:05.000 --> 00:19:10.000
So, you just install it, and you have to add a package,

00:19:10.000 --> 00:19:12.000
and it'll let you take through and specify that,

00:19:12.000 --> 00:19:15.000
or you can just come up with a YAML file,

00:19:15.000 --> 00:19:18.000
a package.yaml, and then you give it a tag,

00:19:18.000 --> 00:19:20.000
like this one is a core, and this one is a DB,

00:19:20.000 --> 00:19:21.000
and this one is utils.

00:19:21.000 --> 00:19:24.000
And then at the root, you come up with a tag.yaml

00:19:24.000 --> 00:19:28.000
that says the core depends upon DB and utils.

00:19:28.000 --> 00:19:30.000
So, the core can import from DB and utils,

00:19:30.000 --> 00:19:31.000
but not vice versa.

00:19:31.000 --> 00:19:32.000
The DB depends on utils,

00:19:32.000 --> 00:19:35.000
and utils shouldn't be importing from other places

00:19:35.000 --> 00:19:36.000
in your application.

00:19:36.000 --> 00:19:39.000
And then you can run it, a CLI tool against your app,

00:19:39.000 --> 00:19:41.000
like tag check, and it tells you that

00:19:41.000 --> 00:19:43.000
there's some import that's breaking the rules

00:19:43.000 --> 00:19:44.000
that you've laid out.

00:19:44.000 --> 00:19:46.000
So, the other thing, yeah, go ahead.

00:19:46.000 --> 00:19:48.000
The other thing that's interesting is it allows you

00:19:48.000 --> 00:19:50.000
to define a public API.

00:19:50.000 --> 00:19:53.000
You can say, "These things I would like you to be able

00:19:53.000 --> 00:19:54.000
"to use when you use my package,

00:19:54.000 --> 00:19:56.000
"but this other stuff is internal stuff,

00:19:56.000 --> 00:19:58.000
"and I make zero promises about it,

00:19:58.000 --> 00:20:00.000
"so please don't use it.

00:20:00.000 --> 00:20:02.000
"I know you could because of Python, but don't."

00:20:02.000 --> 00:20:04.000
And it'll enforce that as well.

00:20:04.000 --> 00:20:06.000
It'll say, like, "You're trying to use something

00:20:06.000 --> 00:20:09.000
"that I'm explicitly trying to say don't use."

00:20:09.000 --> 00:20:12.000
So, I don't think this is useful for every app,

00:20:12.000 --> 00:20:14.000
but if you've got different people working on it

00:20:14.000 --> 00:20:16.000
and you want to be real careful about your architecture,

00:20:16.000 --> 00:20:17.000
you know, it's worth checking out.

00:20:17.000 --> 00:20:20.000
- I think this is, I am going to check this out.

00:20:20.000 --> 00:20:23.000
It's not just, like, you know, bad architecture

00:20:23.000 --> 00:20:24.000
or something.

00:20:24.000 --> 00:20:26.000
You might bring some new people onto a team,

00:20:26.000 --> 00:20:31.000
or it might help people get used to a project

00:20:31.000 --> 00:20:33.000
and the rules around it easier

00:20:33.000 --> 00:20:36.000
if you aren't allowed to do stuff.

00:20:36.000 --> 00:20:37.000
- Yeah, that's a pretty good point.

00:20:37.000 --> 00:20:38.000
- So, how does it stop it?

00:20:38.000 --> 00:20:41.000
Does it, is it a post-testing?

00:20:41.000 --> 00:20:42.000
- It just prints a warning.

00:20:42.000 --> 00:20:43.000
It just prints a warning.

00:20:43.000 --> 00:20:44.000
- Stop it at runtime?

00:20:44.000 --> 00:20:46.000
- It's like the linter would fail.

00:20:46.000 --> 00:20:48.000
So, it's like a linter error,

00:20:48.000 --> 00:20:49.000
but I mean, it doesn't actually,

00:20:49.000 --> 00:20:51.000
there's no runtime checks.

00:20:51.000 --> 00:20:52.000
So, no runtime checks.

00:20:52.000 --> 00:20:53.000
- Okay.

00:20:53.000 --> 00:20:54.000
- Yeah.

00:20:54.000 --> 00:20:55.000
- All right, cool.

00:20:55.000 --> 00:20:57.000
- Yeah, but you can set it up as a pre-commit hook,

00:20:57.000 --> 00:20:59.000
in which case, I guess you couldn't commit

00:20:59.000 --> 00:21:01.000
if you wanted, but yeah.

00:21:01.000 --> 00:21:03.000
I kind of like the idea of the public API.

00:21:03.000 --> 00:21:04.000
Like, I know it looks like you should use that,

00:21:04.000 --> 00:21:06.000
but there's actually this other thing

00:21:06.000 --> 00:21:08.000
that does more checks and brings in some other stuff

00:21:08.000 --> 00:21:09.000
and adds versioning,

00:21:09.000 --> 00:21:11.000
and you should use that function to make this change.

00:21:11.000 --> 00:21:12.000
Don't, like, directly, I don't know,

00:21:12.000 --> 00:21:13.000
whatever, interact with something, right?

00:21:13.000 --> 00:21:14.000
- Yeah.

00:21:14.000 --> 00:21:15.000
- Cool.

00:21:15.000 --> 00:21:16.000
All right, extra time.

00:21:16.000 --> 00:21:17.000
What do you got?

00:21:17.000 --> 00:21:20.000
- I got, I guess, one extra.

00:21:20.000 --> 00:21:24.000
I noticed that the pedantic guys,

00:21:24.000 --> 00:21:26.000
or pedantic people, I should say,

00:21:26.000 --> 00:21:30.000
have something they're trying to sell now.

00:21:30.000 --> 00:21:32.000
So, being a company,

00:21:32.000 --> 00:21:34.000
you have to make some money somehow, which is good.

00:21:34.000 --> 00:21:37.000
But they came up with a tool called LogFire,

00:21:37.000 --> 00:21:40.000
and it just looks fun.

00:21:40.000 --> 00:21:43.000
So, it's advertised as uncomplicated observability

00:21:43.000 --> 00:21:45.000
from the team behind pedantic.

00:21:45.000 --> 00:21:48.000
They have an observability platform

00:21:48.000 --> 00:21:51.000
to look at, like, logging and other things,

00:21:51.000 --> 00:21:55.000
and it's actually, I haven't dug into it too much,

00:21:55.000 --> 00:21:57.000
but it looks pretty slick.

00:21:57.000 --> 00:22:02.000
Anyway, right now, the pricing model is free for everybody,

00:22:02.000 --> 00:22:06.000
but they're going to eventually charge people.

00:22:06.000 --> 00:22:08.000
- You could know how much they're gonna charge you

00:22:08.000 --> 00:22:09.000
if you had--

00:22:09.000 --> 00:22:10.000
- That's it.

00:22:10.000 --> 00:22:11.000
- Yeah, you'd know how much they're gonna charge you

00:22:11.000 --> 00:22:13.000
if you had some of that, like, cool,

00:22:13.000 --> 00:22:16.000
fake, futuristic image capabilities.

00:22:16.000 --> 00:22:18.000
Zoom, enhance, zoom, enhance,

00:22:18.000 --> 00:22:20.000
'cause they have the blurry pricing.

00:22:20.000 --> 00:22:22.000
- Yeah, well, the website's just beautiful.

00:22:22.000 --> 00:22:23.000
- Enhancing, enhancing.

00:22:23.000 --> 00:22:25.000
Oh, it's $9.99, I don't know what it is.

00:22:25.000 --> 00:22:26.000
- It's cool. - Yeah.

00:22:26.000 --> 00:22:27.000
Yeah, it does look good.

00:22:27.000 --> 00:22:28.000
- Do you have any extras?

00:22:28.000 --> 00:22:30.000
- Well, just a quick comment on this.

00:22:30.000 --> 00:22:32.000
What I think is interesting about LogFire,

00:22:32.000 --> 00:22:36.000
and again, congrats to Samuel and team over there.

00:22:36.000 --> 00:22:38.000
I saw those folks at PyCon as well.

00:22:38.000 --> 00:22:41.000
There's a lot of observability platforms

00:22:41.000 --> 00:22:44.000
that you can add to different Python stacks

00:22:44.000 --> 00:22:45.000
and other stacks as well.

00:22:45.000 --> 00:22:47.000
But what's kind of interesting about this

00:22:47.000 --> 00:22:51.000
is it's super focused on specific frameworks

00:22:51.000 --> 00:22:55.000
to add more observability than normal to them, I guess.

00:22:55.000 --> 00:22:56.000
So, for example, you'd say,

00:22:56.000 --> 00:22:59.000
LogFire.instrument.psychopg

00:22:59.000 --> 00:23:02.000
or LogFire.instrument.fastapi,

00:23:02.000 --> 00:23:04.000
and it gets, like, really deep understanding

00:23:04.000 --> 00:23:05.000
of what that thing is doing.

00:23:05.000 --> 00:23:06.000
It gives you reports around it,

00:23:06.000 --> 00:23:08.000
rather than just, oh, I saw a web request,

00:23:08.000 --> 00:23:12.000
or I saw you talk to a file or an API or something, you know?

00:23:12.000 --> 00:23:13.000
- Yeah. - Yeah.

00:23:13.000 --> 00:23:14.000
I do have a couple of extras.

00:23:14.000 --> 00:23:15.000
Let's see.

00:23:15.000 --> 00:23:18.000
The Getting Started with NLP and Spacy course

00:23:18.000 --> 00:23:20.000
by Vincent Vommerdam.

00:23:20.000 --> 00:23:26.000
He and I decided we're going to do 10% on the course

00:23:26.000 --> 00:23:28.000
for the month of May, 10% off.

00:23:28.000 --> 00:23:31.000
So if you would like to take this course

00:23:31.000 --> 00:23:33.000
and save a little bit,

00:23:33.000 --> 00:23:35.000
you've got nine, 10 days to do so,

00:23:35.000 --> 00:23:37.000
if you listen to this right away, right?

00:23:37.000 --> 00:23:41.000
Basically, during May 2024, you can save 10%.

00:23:41.000 --> 00:23:43.000
So put the link in the show notes.

00:23:43.000 --> 00:23:45.000
Check out Getting Started with NLP and Spacy.

00:23:45.000 --> 00:23:47.000
Super cool, super cool one.

00:23:47.000 --> 00:23:50.000
And I feel like I might have had another...

00:23:50.000 --> 00:23:51.000
I'm going with no.

00:23:51.000 --> 00:23:53.000
That's my only extra.

00:23:53.000 --> 00:23:57.000
- Okay. - And I saw we both put a joke in,

00:23:57.000 --> 00:23:59.000
but let's do your joke next week,

00:23:59.000 --> 00:24:00.000
and I'll do this joke this week, okay?

00:24:00.000 --> 00:24:03.000
- Okay. So do my joke next?

00:24:03.000 --> 00:24:04.000
- Yeah. - All right.

00:24:04.000 --> 00:24:08.000
So I was actually listening to a book

00:24:08.000 --> 00:24:11.000
called Company of One from Paul Jarvis.

00:24:11.000 --> 00:24:12.000
Excellent book.

00:24:12.000 --> 00:24:14.000
I'm actually listening to it the second time now.

00:24:14.000 --> 00:24:16.000
I'm really enjoying it.

00:24:16.000 --> 00:24:19.000
Anyway, he talked about one of the people he talked about

00:24:19.000 --> 00:24:23.000
was somebody that runs, actually, Tom Fishbourne

00:24:23.000 --> 00:24:25.000
runs a company called Markitunist.

00:24:25.000 --> 00:24:28.000
And here's a cartoon from Markitunist

00:24:28.000 --> 00:24:30.000
that I actually really love.

00:24:30.000 --> 00:24:31.000
It's the evolution-- - Hold on, let me see your screen.

00:24:31.000 --> 00:24:33.000
One sec. I don't see your screen anymore.

00:24:33.000 --> 00:24:34.000
- You don't see it? - No.

00:24:34.000 --> 00:24:35.000
- Okay. - That's right.

00:24:35.000 --> 00:24:36.000
You just have to tell it to us.

00:24:36.000 --> 00:24:37.000
Most people listen anyway.

00:24:37.000 --> 00:24:41.000
- Okay. Evolution of Smart Products.

00:24:41.000 --> 00:24:43.000
If I were to buy a toaster,

00:24:43.000 --> 00:24:45.000
first there's the toaster. It makes toasts.

00:24:45.000 --> 00:24:47.000
Then you've got Wi-Fi enabled.

00:24:47.000 --> 00:24:51.000
Makes toast after making you wait for a firmware update.

00:24:51.000 --> 00:24:52.000
Data-driven toaster.

00:24:52.000 --> 00:24:57.000
Makes toast by watching how you like toast.

00:24:57.000 --> 00:24:58.000
So it watches you.

00:24:58.000 --> 00:25:01.000
Toast as a service. Makes toast for $5.99 a month.

00:25:01.000 --> 00:25:02.000
Ad-supported toaster.

00:25:02.000 --> 00:25:05.000
Makes toast and lets you know that Smuckers is on sale.

00:25:05.000 --> 00:25:07.000
And then there's the AI toaster.

00:25:07.000 --> 00:25:10.000
Toast? I'm afraid I can't do that, Dave.

00:25:10.000 --> 00:25:13.000
- Ooh, you do it good. - How?

00:25:13.000 --> 00:25:16.000
Let me in. Goodbye, Dave.

00:25:16.000 --> 00:25:18.000
- Goodbye, Dave. - I love it.

00:25:18.000 --> 00:25:20.000
I love it. Yeah, that's a really good one.

00:25:20.000 --> 00:25:24.000
- Anyway, the Mark Tooth, I'm not really--

00:25:24.000 --> 00:25:26.000
He's got a great company.

00:25:26.000 --> 00:25:27.000
There's a couple other ones.

00:25:27.000 --> 00:25:30.000
One of them I really related to.

00:25:30.000 --> 00:25:34.000
Anyway, there's lots I related to and enjoyed his stuff.

00:25:34.000 --> 00:25:36.000
- Awesome. Yeah, very funny one.

00:25:36.000 --> 00:25:38.000
Good stuff over there. So nice finding you.

00:25:38.000 --> 00:25:43.000
All right. Well, I think that is it for the week.

00:25:43.000 --> 00:25:44.000
Brian, thank you.

00:25:44.000 --> 00:25:47.000
- Thank you. - Yeah, thanks, everyone, for listening.

00:25:47.000 --> 00:25:48.000
See you all later. - Bye.

00:25:48.000 --> 00:25:49.480
Thanks, everyone, for listening.

00:25:49.480 --> 00:25:50.200
See you all later.

