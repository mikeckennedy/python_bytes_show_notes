
00:00:00.000 --> 00:00:05.120
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.120 --> 00:00:09.360
This is episode 79 recorded May 23rd, 2018. I'm Michael Kennedy.


00:00:09.360 --> 00:00:10.160
And I'm Brian Okken.


00:00:10.160 --> 00:00:10.960
Hey Brian, how you doing?


00:00:10.960 --> 00:00:11.680
I'm doing great.


00:00:11.680 --> 00:00:15.520
Nice. I think as always, we've got a bunch of fun stuff to talk about.


00:00:15.520 --> 00:00:18.000
And we wouldn't be doing it without DigitalOcean.


00:00:18.000 --> 00:00:21.840
A couple reasons, but DigitalOcean is sponsoring this episode and a bunch of the upcoming ones.


00:00:21.840 --> 00:00:23.200
So thank you to DigitalOcean.


00:00:24.000 --> 00:00:28.800
get $100 off or $100 credit at Python bytes, FM slash


00:00:28.800 --> 00:00:31.160
digital ocean for new customers. Tell them tell you more about


00:00:31.160 --> 00:00:35.000
that later. I would be totally surprised, Ryan, if you wanted


00:00:35.000 --> 00:00:38.440
to cover something about say, testing or pytest.


00:00:38.440 --> 00:00:45.480
Yeah, yeah. So pytest 3.6.0 just got announced. So 360 for


00:00:45.480 --> 00:00:50.480
pytest. And this is, this is like a inside baseball kind of


00:00:50.480 --> 00:00:56.560
release because there's not a lot that if I think 80% of the people using pytest


00:00:56.560 --> 00:01:02.920
won't see a difference. But however, this was a big deal for the team. Essentially


00:01:02.920 --> 00:01:07.960
it's a revamp of the implementation of the marker system and the data type that


00:01:07.960 --> 00:01:12.000
was used to hold the markers. So there is a couple other things that's the big


00:01:12.000 --> 00:01:16.100
thing that's going on in the 3.6.0 release is a reworking of the markers in


00:01:16.100 --> 00:01:20.460
it and there's a list on their release notes that of all the different defect


00:01:20.460 --> 00:01:26.700
that they fixed with this. The takeaway for a lot of people is if you were using, if you're writing


00:01:26.700 --> 00:01:33.260
a plugin or something or using the plugin features and using get marker to find out which markers


00:01:33.260 --> 00:01:39.100
are applied to a particular function, the get marker is deprecated. There's a new API, there's


00:01:39.100 --> 00:01:45.580
inner markers and get closest marker and yeah, I'll link in the show notes to read more on that.


00:01:45.580 --> 00:01:51.980
So most of it's a plugin writers change the API change, but it's it's exciting. And I'm


00:01:51.980 --> 00:01:58.860
excited for the team to get that out because kind of like the Django to release, it's about


00:01:58.860 --> 00:02:04.060
maintenance and going forward. And so that's great. There is one more feature that we from our


00:02:04.060 --> 00:02:10.300
couple other things on the breakpoint, the pytest is supporting the breakpoint functionality in 3.7.


00:02:10.300 --> 00:02:13.420
And that is brought to you by our friend Anthony Shaw. So he put that in.


00:02:13.420 --> 00:02:19.900
Oh, nice. Yeah, he's doing a lot of work on Python 3.7 because rumor is he may be doing a course on Python 3.7.


00:02:19.900 --> 00:02:22.220
So awesome. He was able to bring it over here.


00:02:22.220 --> 00:02:27.660
And a couple of other smaller things like the, apparently, I had never run into this,


00:02:27.660 --> 00:02:33.180
but if you have an assertion failure on equality and the only thing different is whitespace,


00:02:33.180 --> 00:02:38.220
it's kind of hard to tell. So they now escape characters too.


00:02:38.220 --> 00:02:42.060
So you can see what the whitespace difference is a little bit better,


00:02:42.060 --> 00:02:44.060
which is kind of cool. I've never heard of that.


00:02:44.060 --> 00:02:46.060
That's a little hard to print it on. You're like, "Oh, so they're the same."


00:02:46.060 --> 00:02:49.060
No, no. That's two spaces, not one right there.


00:02:49.060 --> 00:02:54.060
Yeah, so for the main port, I wanted to get this out to as many people as possible.


00:02:54.060 --> 00:03:00.060
So if you are depending on reading markers in your internal code, pay attention to this.


00:03:00.060 --> 00:03:01.060
That's it.


00:03:01.060 --> 00:03:04.060
Yeah, it sounds like a nice cleanup of the internal APIs for extension writers.


00:03:04.060 --> 00:03:07.060
And that's always good because that probably means more extensions.


00:03:07.060 --> 00:03:09.060
Extensions are more likely to be built.


00:03:09.060 --> 00:03:10.060
Yep.


00:03:10.060 --> 00:03:10.060
Sounds good.


00:03:10.060 --> 00:03:14.060
So have we talked about GUIs, Python GUIs on this podcast?


00:03:14.060 --> 00:03:16.060
I'm not sure if we have. We probably should.


00:03:16.060 --> 00:03:18.060
We probably should. Yeah, let's do that.


00:03:18.060 --> 00:03:22.060
So there's a lot of stuff going on.


00:03:22.060 --> 00:03:26.060
Part of the reason I went on that rant is because stuff needs to be happening there,


00:03:26.060 --> 00:03:28.060
but also because some things are happening.


00:03:28.060 --> 00:03:30.060
Like we had the WX Python Phoenix release,


00:03:30.060 --> 00:03:34.060
which is kind of a rebirth of WX Python, which is really great.


00:03:34.060 --> 00:03:37.060
Well, we also have the same thing going on for Qt.


00:03:37.060 --> 00:03:43.780
So for a while, there was a sort of a split, there was pi qt, there was pi side, there was pi side


00:03:43.780 --> 00:03:48.900
to there all these ways they defended on different versions of qt. And it was kind of just generally


00:03:48.900 --> 00:03:56.740
a mess. So the qt company is now officially making something called qt for Python, which as far as I


00:03:56.740 --> 00:04:04.500
can tell is more or less a, like a rebirth, pi side to for what that's worth. So it's really nice


00:04:04.500 --> 00:04:06.660
that the company that makes Qt,


00:04:06.660 --> 00:04:09.700
the cross-platform GUI framework,


00:04:09.700 --> 00:04:12.460
is really dedicating itself to Python.


00:04:12.460 --> 00:04:15.840
One of the things that I think is cool about the Qt space


00:04:15.840 --> 00:04:18.020
is they have the Qt Designer,


00:04:18.020 --> 00:04:20.060
and I think that's really nice and important


00:04:20.060 --> 00:04:23.500
for a heavy visual way to design the UI.


00:04:23.500 --> 00:04:26.780
I know you can write code and say the position is 20,20


00:04:26.780 --> 00:04:28.060
and it stretches this wide,


00:04:28.060 --> 00:04:31.620
but that is not the same as draggy-droppy,


00:04:31.620 --> 00:04:33.540
press the button, you know what I mean?


00:04:33.540 --> 00:04:37.220
So I got a lot of, I'm pretty excited about this, let's say.


00:04:37.220 --> 00:04:38.700
So that's really cool.


00:04:38.700 --> 00:04:40.800
They basically are keeping it super similar


00:04:40.800 --> 00:04:44.780
to the Qt C++ API, where that makes sense.


00:04:44.780 --> 00:04:47.640
So like if you read documentation about C++,


00:04:47.640 --> 00:04:50.820
which is the native language for Qt,


00:04:50.820 --> 00:04:53.620
if you replace the pointer dereference,


00:04:53.620 --> 00:04:56.320
so the arrow, the dash arrow,


00:04:56.320 --> 00:04:57.980
to replace that with a dot,


00:04:57.980 --> 00:05:00.340
that may well be the Python API.


00:05:00.340 --> 00:05:01.180
- Okay. - Which is good.


00:05:01.180 --> 00:05:03.560
But some of the drawbacks, let's say,


00:05:03.560 --> 00:05:05.620
that are it doesn't necessarily leverage


00:05:05.620 --> 00:05:06.980
the Pythonic features.


00:05:06.980 --> 00:05:09.440
So maybe you call a function to do a thing


00:05:09.440 --> 00:05:12.640
rather than put a decorator onto something else,


00:05:12.640 --> 00:05:13.640
things like that.


00:05:13.640 --> 00:05:16.800
One thing that is nice is a lot of these UI frameworks


00:05:16.800 --> 00:05:18.880
are super painful to install, right?


00:05:18.880 --> 00:05:20.320
You can install them on the system


00:05:20.320 --> 00:05:22.460
and then they don't work so well.


00:05:22.460 --> 00:05:24.680
Maybe there's some big long compilation step


00:05:24.680 --> 00:05:28.400
like WXPython takes forever to pip install it


00:05:28.400 --> 00:05:32.760
onto Ubuntu, the last time I tried doing that.


00:05:32.760 --> 00:05:36.040
So they're planning on shipping a wheels version of Qt,


00:05:36.040 --> 00:05:37.200
which before you had to get like


00:05:37.200 --> 00:05:38.760
some separate installer or something.


00:05:38.760 --> 00:05:40.140
So that'll be pretty sweet,


00:05:40.140 --> 00:05:42.360
that you'll just be able to pip install your thing


00:05:42.360 --> 00:05:44.680
and it'll come with the foundational stuff you need.


00:05:44.680 --> 00:05:45.500
- That's exciting.


00:05:45.500 --> 00:05:46.440
- Yeah, that is pretty cool, right?


00:05:46.440 --> 00:05:50.480
So, I mean, I really hope that the company behind Qt


00:05:50.480 --> 00:05:52.400
putting a big effort into this is gonna mean


00:05:52.400 --> 00:05:54.840
like finally a polished version.


00:05:54.840 --> 00:05:57.280
So we'll see.


00:05:57.280 --> 00:06:01.800
I think the licensing might still be GPL and LGPL.


00:06:01.800 --> 00:06:04.840
So as a combination, take your pick.


00:06:04.840 --> 00:06:08.880
I'm not sure what the variations are exactly there, but I don't know.


00:06:08.880 --> 00:06:12.520
I'd like to see something more permissive, but who knows?


00:06:12.520 --> 00:06:13.760
Still nice to see some progress here.


00:06:13.760 --> 00:06:19.160
So do you know, I was trying to find it, do you know the projected release date for the


00:06:19.160 --> 00:06:20.640
official Qt for Python?


00:06:20.640 --> 00:06:21.640
Or is that...


00:06:21.640 --> 00:06:22.640
They're talking about...


00:06:22.640 --> 00:06:28.520
So the article I'm linking to is a blog post calling hello Qt for Python and they say they're


00:06:28.520 --> 00:06:31.100
working on a technology preview.


00:06:31.100 --> 00:06:33.720
So that's all I've seen.


00:06:33.720 --> 00:06:38.600
But they don't seem to have any further information that I easily found that maybe somewhere else.


00:06:38.600 --> 00:06:46.120
Yes, it'll be does say it'll be available under GPL, LG PL and commercial licenses.


00:06:46.120 --> 00:06:49.840
It talks about when development started and stuff like that, but it doesn't seem to have


00:06:49.840 --> 00:06:51.120
like a release date.


00:06:51.120 --> 00:06:52.120
So there it is.


00:06:52.120 --> 00:06:53.120
All right.


00:06:53.120 --> 00:06:54.120
Cool.


00:06:54.120 --> 00:06:55.120
Nice.


00:06:55.120 --> 00:07:00.660
Well, speaking of sneak peeks on things, we've got, we've talked about MongoDB, the 4.0 release


00:07:00.660 --> 00:07:02.360
that's coming.


00:07:02.360 --> 00:07:05.320
We've talked about that before, but now you can play with it.


00:07:05.320 --> 00:07:11.120
So the 4.0, 4.0.0 RCS 0 is now available.


00:07:11.120 --> 00:07:13.600
It's the very 0th version of the RCS.


00:07:13.600 --> 00:07:15.240
Yes, there's a lot of zeros there.


00:07:15.240 --> 00:07:19.040
Yeah, so that is out and ready for testing so people can actually get their hands on


00:07:19.040 --> 00:07:24.040
and try working the again the big news for this.


00:07:24.040 --> 00:07:25.200
There's a lot of new features,


00:07:25.200 --> 00:07:29.920
but the big news is ACID transactions and multi-document.


00:07:29.920 --> 00:07:32.060
- Multi-document ACID transactions.


00:07:32.060 --> 00:07:33.880
Yes, that's a pretty big deal.


00:07:33.880 --> 00:07:35.880
- And I actually don't know if this is a big deal.


00:07:35.880 --> 00:07:37.040
Well, there's a lot of things here,


00:07:37.040 --> 00:07:39.200
but non-blocking secondary reads,


00:07:39.200 --> 00:07:41.080
I don't even know if I know what that means.


00:07:41.080 --> 00:07:44.320
- So the idea with the non-blocking secondary reads


00:07:44.320 --> 00:07:47.520
is one of the ways you can set up MongoDB


00:07:47.520 --> 00:07:49.680
is in a, what's called a replica set.


00:07:49.680 --> 00:07:53.840
So there's like a primary thing that you read and write to.


00:07:53.840 --> 00:07:56.240
And then there are other ones which are constantly


00:07:56.240 --> 00:07:59.800
just staying in sync with that server.


00:07:59.800 --> 00:08:01.000
There's a couple of benefits to that.


00:08:01.000 --> 00:08:04.520
Like you could put them into say different data centers.


00:08:04.520 --> 00:08:06.600
The primary thing is if like for some reason


00:08:06.600 --> 00:08:09.480
the main server, the primary server fails,


00:08:09.480 --> 00:08:12.520
it'll automatically switch to one of the secondary ones.


00:08:12.520 --> 00:08:15.520
So it's kind of like a failover redundancy


00:08:15.520 --> 00:08:17.360
sort of thing as well.


00:08:17.360 --> 00:08:20.280
but you can configure it in a way that you can say,


00:08:20.280 --> 00:08:25.280
I would like to read from the non-primary database


00:08:25.280 --> 00:08:28.520
as a way of like adding read scalability.


00:08:28.520 --> 00:08:31.360
So like if I have five servers in the cluster,


00:08:31.360 --> 00:08:32.180
if I don't do anything,


00:08:32.180 --> 00:08:36.600
I can only talk to the primary one as a single server,


00:08:36.600 --> 00:08:39.680
and I get no boost of concurrency, let's say.


00:08:39.680 --> 00:08:41.760
But if you say, I wanna read from the others,


00:08:41.760 --> 00:08:42.760
well, then all of a sudden,


00:08:42.760 --> 00:08:44.480
there's like, you're sort of farming that out


00:08:44.480 --> 00:08:46.280
across six different servers,


00:08:46.280 --> 00:08:48.720
primary plus other five or whatever.


00:08:48.720 --> 00:08:52.220
Right, that used to block for consistency reasons


00:08:52.220 --> 00:08:54.460
and now apparently they found a different way


00:08:54.460 --> 00:08:57.220
to ensure consistency, maybe because of the transactions.


00:08:57.220 --> 00:08:58.060
- Okay.


00:08:58.060 --> 00:09:00.300
- Anyway, that's a long explanation


00:09:00.300 --> 00:09:01.900
for what I think that means.


00:09:01.900 --> 00:09:04.740
- That does make sense and that's cool.


00:09:04.740 --> 00:09:07.140
At least I knew, I know that there are a lot of people


00:09:07.140 --> 00:09:11.180
that choose a SQL database over a document database


00:09:11.180 --> 00:09:13.500
mostly because of the lack of transactions


00:09:13.500 --> 00:09:15.620
and so that's one of the reasons why I brought this up


00:09:15.620 --> 00:09:17.420
'cause I'm excited about transactions.


00:09:17.420 --> 00:09:19.700
- Yeah, I think that's super exciting as well


00:09:19.700 --> 00:09:21.180
for the reason you just said.


00:09:21.180 --> 00:09:23.300
What I do think is interesting is


00:09:23.300 --> 00:09:27.180
as people get to more serious applications,


00:09:27.180 --> 00:09:29.460
they get to a place where often


00:09:29.460 --> 00:09:33.860
they give up transactions anyway for sort of concurrency.


00:09:33.860 --> 00:09:36.700
Right, like, you know, if I go to Amazon,


00:09:36.700 --> 00:09:38.860
it's not like, and I go to order something,


00:09:38.860 --> 00:09:41.620
it's not just going to lock all of Amazon


00:09:41.620 --> 00:09:45.500
while I interact with, you know, my order.


00:09:45.500 --> 00:09:47.520
what it's gonna do is like say, we'll place the order


00:09:47.520 --> 00:09:51.220
and if it happens to be that actually the thing you ordered


00:09:51.220 --> 00:09:53.660
sort of sold out just at the moment that you pressed it,


00:09:53.660 --> 00:09:55.340
you'll get like a message or something, right?


00:09:55.340 --> 00:09:57.860
Like, hey, sorry, we couldn't fulfill it or whatever,


00:09:57.860 --> 00:09:58.900
here's your refund.


00:09:58.900 --> 00:10:00.820
So there's a lot of these sort of compensation things


00:10:00.820 --> 00:10:03.860
that get put into like high scalable stuff.


00:10:03.860 --> 00:10:06.140
I just grabbed Amazon as an example,


00:10:06.140 --> 00:10:07.180
I don't really know how they work.


00:10:07.180 --> 00:10:08.860
But you know, there's a lot of these large sites


00:10:08.860 --> 00:10:12.600
that do sort of don't use full on transactions


00:10:12.600 --> 00:10:15.060
in the same sense that other ones do.


00:10:15.060 --> 00:10:16.860
So it's pretty interesting.


00:10:16.860 --> 00:10:19.380
It's interesting in that I don't really think


00:10:19.380 --> 00:10:21.980
transactions are something I'm gonna be using


00:10:21.980 --> 00:10:23.180
in any of my sites.


00:10:23.180 --> 00:10:25.920
They just don't really seem to be necessary


00:10:25.920 --> 00:10:28.260
with a few possible exceptions.


00:10:28.260 --> 00:10:30.020
I'll get to what those might be in a little bit.


00:10:30.020 --> 00:10:33.340
But yeah, I think you're right that people,


00:10:33.340 --> 00:10:34.420
when people feel they need it,


00:10:34.420 --> 00:10:36.720
or there are a few situations where you really do need it,


00:10:36.720 --> 00:10:37.660
this is super interesting.


00:10:37.660 --> 00:10:39.340
One other thing that's kind of cool,


00:10:39.340 --> 00:10:42.300
that's not a 4.0 thing, but it's in a 3.6,


00:10:42.300 --> 00:10:44.780
which is the one right before this, as far as I know,


00:10:44.780 --> 00:10:47.820
is actually the streaming API.


00:10:47.820 --> 00:10:49.900
So if I've got like say web sockets


00:10:49.900 --> 00:10:52.400
or something that I want notification


00:10:52.400 --> 00:10:54.620
of like push of change to the database,


00:10:54.620 --> 00:10:56.740
you could like run a query and say,


00:10:56.740 --> 00:10:59.800
I want to stream new results that hit this query.


00:10:59.800 --> 00:11:03.900
And then as stuff is inserted to the database that matches,


00:11:03.900 --> 00:11:05.300
it'll get pushed out to you


00:11:05.300 --> 00:11:07.700
instead of repolling the database.


00:11:07.700 --> 00:11:09.540
So suppose I connect to a chat server


00:11:09.540 --> 00:11:10.680
and I set up web sockets,


00:11:10.680 --> 00:11:12.140
you could like literally subscribe


00:11:12.140 --> 00:11:13.380
to like these change streams


00:11:13.380 --> 00:11:15.820
on like the conversation record,


00:11:15.820 --> 00:11:18.840
and you would just get them pushed back down instantly


00:11:18.840 --> 00:11:20.580
without any polling end to end.


00:11:20.580 --> 00:11:21.740
- Okay. - That's pretty cool.


00:11:21.740 --> 00:11:23.900
It's kind of like RethinkDB's feature,


00:11:23.900 --> 00:11:24.860
primary feature was.


00:11:24.860 --> 00:11:28.100
- I guess where I would probably use transactions a lot,


00:11:28.100 --> 00:11:30.200
and it's not really transactions,


00:11:30.200 --> 00:11:33.020
but because of transactions you can do this,


00:11:33.020 --> 00:11:38.020
is I believe 4.0 also includes rollback checkpoints.


00:11:38.020 --> 00:11:41.620
For instance, you can grab a replica


00:11:41.620 --> 00:11:44.660
of a big database or something.


00:11:44.660 --> 00:11:47.360
And like for instance, for like during testing,


00:11:47.360 --> 00:11:49.680
you can have a starting point,


00:11:49.680 --> 00:11:51.500
do a whole bunch of transactions on it,


00:11:51.500 --> 00:11:54.460
query it, and then roll back to a previous state.


00:11:54.460 --> 00:11:55.620
- Yeah, that is pretty cool.


00:11:55.620 --> 00:11:58.780
And I think maybe that secondary non-blocking read stuff


00:11:58.780 --> 00:11:59.980
has to do with that as well.


00:11:59.980 --> 00:12:02.020
You sort of begin a transaction and you start reading.


00:12:02.020 --> 00:12:02.860
- Yeah, anyway.


00:12:02.860 --> 00:12:03.740
- Yeah, yeah, very cool.


00:12:03.740 --> 00:12:05.640
So I'm glad to see that that's coming along.


00:12:05.640 --> 00:12:09.500
I feel like the NoSQL document database world


00:12:09.500 --> 00:12:13.440
and the relational world are kind of like merging,


00:12:13.440 --> 00:12:15.760
like they're getting closer to each other


00:12:15.760 --> 00:12:16.840
in a lot of ways, right?


00:12:16.840 --> 00:12:19.620
We have Postgres getting JSON stuff,


00:12:19.620 --> 00:12:21.600
we get MongoDB getting transactions,


00:12:21.600 --> 00:12:23.840
and they're all kind of sort of growing


00:12:23.840 --> 00:12:25.480
and intersecting in interesting ways.


00:12:25.480 --> 00:12:26.920
Speaking of interesting,


00:12:26.920 --> 00:12:28.200
DigitalOcean's pretty interesting.


00:12:28.200 --> 00:12:29.400
They're doing a lot of good stuff for us.


00:12:29.400 --> 00:12:32.020
So like the files that you're getting


00:12:32.020 --> 00:12:34.040
when you download the podcast, the website,


00:12:34.040 --> 00:12:36.660
all that stuff is running on DigitalOcean servers,


00:12:36.660 --> 00:12:39.440
and I'm super, super happy customer of theirs,


00:12:39.440 --> 00:12:42.280
and they're sponsoring the show as well.


00:12:42.280 --> 00:12:44.040
So one of the things that's cool,


00:12:44.040 --> 00:12:45.800
maybe I mentioned this a while ago, Brian,


00:12:45.800 --> 00:12:49.520
is their sort of one-click app server configuration.


00:12:49.520 --> 00:12:51.360
So if I want to create, say,


00:12:51.360 --> 00:12:53.300
a server with MongoDB all configured,


00:12:53.300 --> 00:12:55.460
I can go there, say, create me a droplet


00:12:55.460 --> 00:12:56.840
with this version of Mongo


00:12:56.840 --> 00:13:01.320
or with this other web framework set up,


00:13:01.320 --> 00:13:04.660
and it'll automatically create all the server configuration


00:13:04.660 --> 00:13:06.760
and have everything set up and ready to go


00:13:06.760 --> 00:13:08.040
within like 60 seconds.


00:13:08.040 --> 00:13:09.740
So really, really nice.


00:13:09.740 --> 00:13:11.460
And probably the biggest thing,


00:13:11.460 --> 00:13:12.940
if you are not using DigitalOcean,


00:13:12.940 --> 00:13:15.260
you can get a $100 credit by going


00:13:15.260 --> 00:13:17.380
to pythonbytes.fm/digitalocean.


00:13:17.380 --> 00:13:18.660
So that's a pretty good deal.


00:13:18.660 --> 00:13:19.540
- Yeah, that's great.


00:13:19.540 --> 00:13:20.380
- Yeah, awesome.


00:13:20.380 --> 00:13:23.580
So if you're looking for a nice, affordable,


00:13:23.580 --> 00:13:26.020
fair, and very fast server hosting,


00:13:26.020 --> 00:13:28.700
check them out, pythonbytes.fm/digitalocean.


00:13:28.700 --> 00:13:31.460
- So Michael, have we talked about PipMF


00:13:31.460 --> 00:13:32.300
in the show before?


00:13:32.300 --> 00:13:33.540
- If I recall correctly,


00:13:33.540 --> 00:13:35.420
I think we were confused about PipMF.


00:13:35.420 --> 00:13:37.340
I was confused about PipMF.


00:13:37.340 --> 00:13:40.000
Basically, you know, I, or surprised,


00:13:40.000 --> 00:13:42.840
maybe it's the right word, that PIPMF became


00:13:42.840 --> 00:13:46.080
sort of the officially recommended way


00:13:46.080 --> 00:13:51.040
of the packaging authority in Python to manage packages.


00:13:51.040 --> 00:13:52.440
And I'm like, oh, when did that happen?


00:13:52.440 --> 00:13:53.720
That was pretty interesting.


00:13:53.720 --> 00:13:55.400
So there's been a lot of debate,


00:13:55.400 --> 00:13:58.080
and you said there was kind of a coarse Reddit thread,


00:13:58.080 --> 00:14:00.520
like imagine Reddit was unkind to people.


00:14:00.520 --> 00:14:01.360
Could you imagine?


00:14:01.360 --> 00:14:02.840
- Yeah, right, yeah.


00:14:02.840 --> 00:14:06.640
- That's unfortunate, but I think it's too bad


00:14:06.640 --> 00:14:07.680
that kind of stuff happens.


00:14:07.680 --> 00:14:09.240
And maybe we should all just speak up like,


00:14:09.240 --> 00:14:11.700
hey, like that comment is out of bounds, right?


00:14:11.700 --> 00:14:13.360
Anyway, I'm not gonna link to it.


00:14:13.360 --> 00:14:14.680
I don't wanna encourage it.


00:14:14.680 --> 00:14:18.080
But I do wanna link to this thing called Pip-Inf Review


00:14:18.080 --> 00:14:19.320
after using it in production.


00:14:19.320 --> 00:14:22.860
So there's this team that used Pip-Inf in production


00:14:22.860 --> 00:14:24.800
since November, 2017.


00:14:24.800 --> 00:14:25.640
So what is that?


00:14:25.640 --> 00:14:26.460
A little over half a year,


00:14:26.460 --> 00:14:28.440
maybe almost exactly half a year.


00:14:28.440 --> 00:14:29.960
And this sort of comes,


00:14:29.960 --> 00:14:32.080
they talk about this is what worked for us.


00:14:32.080 --> 00:14:34.760
This is what wasn't working so well for us.


00:14:34.760 --> 00:14:39.960
And in the end, they're like, at no point did anyone in the team ever mention getting


00:14:39.960 --> 00:14:44.520
read a pipenv, which actually is a pretty strong statement, apparently.


00:14:44.520 --> 00:14:46.960
So, so like, if no, he said, No, we got to get rid of this.


00:14:46.960 --> 00:14:49.480
It's just like, it's not quite working in some way.


00:14:49.480 --> 00:14:51.720
So here, I'll give you the rundown.


00:14:51.720 --> 00:14:55.520
The article starts off pretty accurately says the current state of Python's packaging is


00:14:55.520 --> 00:14:56.520
awful.


00:14:56.520 --> 00:14:59.360
I don't think anyone would disagree with that the problem is recognized.


00:14:59.360 --> 00:15:01.940
And there are many attempts to solve the mess.


00:15:01.940 --> 00:15:06.740
And PipMF was the first and it did get a lot of traction, but not everyone loved it.


00:15:06.740 --> 00:15:13.700
And he said, one of the areas where PipMF can be a challenge is for libraries.


00:15:13.700 --> 00:15:20.420
So PipMF is around, is more built for managing the dependency of an application.


00:15:20.420 --> 00:15:24.460
But if you're a library author, that it doesn't necessarily make a lot of sense.


00:15:24.460 --> 00:15:25.900
Yeah, I'm on the fence on that.


00:15:25.900 --> 00:15:26.900
Sure.


00:15:26.900 --> 00:15:27.900
Sorry, I forgot the guy's name.


00:15:27.900 --> 00:15:32.260
that he said this was basically supporting multiple environments goes


00:15:32.260 --> 00:15:39.500
against pip m's philosophy. Right? So they want a deterministic reproducible


00:15:39.500 --> 00:15:44.620
application environment. But you know, if you're going to do that for say,


00:15:44.620 --> 00:15:52.740
pi pi, and Python two, seven, and Python three, six, or whatever, well, then it


00:15:52.740 --> 00:15:56.580
doesn't really work, potentially, right? Because it's, you know, once exact


00:15:56.580 --> 00:16:02.060
hashes of the exact libraries and if those don't match then you're out of luck, right?


00:16:02.060 --> 00:16:03.060
So that's a challenge.


00:16:03.060 --> 00:16:04.580
I think that's the primary challenge.


00:16:04.580 --> 00:16:05.580
Yeah, yeah.


00:16:05.580 --> 00:16:06.580
And I agree with that.


00:16:06.580 --> 00:16:09.940
And it's just partly I think it's a miscommunication.


00:16:09.940 --> 00:16:17.860
PipM was never intended to work for every library sort of use because libraries by definition


00:16:17.860 --> 00:16:20.740
or they don't have their dependencies pinned.


00:16:20.740 --> 00:16:24.020
It's at the application level where you pin your dependencies.


00:16:24.020 --> 00:16:28.600
So you say there's this miscommunication and I definitely think you're right because when


00:16:28.600 --> 00:16:35.620
I looked at pipenv on GitHub, I really saw that as, you know, the statement, pipenv is


00:16:35.620 --> 00:16:42.380
the officially recommended tool for managing application dependencies from PyPA as pipenv


00:16:42.380 --> 00:16:47.980
is the officially recommended tool for managing Python dependencies, where really like the


00:16:47.980 --> 00:16:53.100
application should have been bolded, underlined in all caps, something to that effect, right?


00:16:53.100 --> 00:17:21.100
So pretty interesting. But yeah, I think, you know, it generally their review of it was was good. So I'll try to give you the quick rundown here. So pip file and pip file lock really are superiorities or requirements.txt by a ton. And the guy said, Hey, I first disliked having flake aid and a security checking tool all built into one thing, but I think it's actually great. Installing from private repositories that works really well. Creating a new pip file is easy.


00:17:21.100 --> 00:17:28.140
new problems, introducing pip and to new users or installing from a mixture of indexes and


00:17:28.140 --> 00:17:31.300
get repos that was all really good.


00:17:31.300 --> 00:17:36.100
Virtual MF or virtual EMV is much easier to get into and understand.


00:17:36.100 --> 00:17:41.460
Now, see dependencies can install be easily installed into a system like Docker.


00:17:41.460 --> 00:17:45.060
And finally, like I said, no one proposed getting rid of it.


00:17:45.060 --> 00:17:49.900
They were just a few edge cases mostly around the library side of things.


00:17:49.900 --> 00:17:51.140
So yeah, pretty good.


00:17:51.140 --> 00:17:55.860
But if you're thinking about using pipenv in production, check this article out.


00:17:55.860 --> 00:17:59.780
It's kind of got some good discussion and a lot of follow up as well.


00:17:59.780 --> 00:18:06.840
I want to add that I was, for library development, I am going to start, I haven't been using


00:18:06.840 --> 00:18:14.220
it, but I'm going to start using it not from the standpoint of handling all of the dependencies


00:18:14.220 --> 00:18:19.480
for the library dependencies, but more because the setup.py does that.


00:18:19.480 --> 00:18:25.880
the transitive dependencies and also mostly the developer dependencies. So Pipenv has a developer


00:18:25.880 --> 00:18:30.520
feature where you can either create the environment for running or create the environment for


00:18:30.520 --> 00:18:34.840
development and those can be different. And traditionally we've had a requirements_dev


00:18:34.840 --> 00:18:40.520
or something like that, but it's just you kind of have to know it's there. So for that reason I'm


00:18:40.520 --> 00:18:46.840
going to try Pipenv. The other reason is the --run flag to be able to run in the environment


00:18:46.840 --> 00:18:52.440
without activating the environment is going to be useful for things like Jenkins runs and things


00:18:52.440 --> 00:18:56.840
like that. I'm going to give it a shot. I don't have a report yet, but I'm going to start using


00:18:56.840 --> 00:18:59.960
this as well. Yeah, sounds good. You're going to have to give us a report after a while.


00:18:59.960 --> 00:19:06.120
Yeah, definitely. Nice. All right. So you've got some stuff for GitHub flow, the whole


00:19:06.120 --> 00:19:11.000
sort of working in GitHub, PRs, submitting issues, open source goodness. Yeah.


00:19:11.000 --> 00:19:16.440
I've had a development team that's migrating to both a lot of changes in our development


00:19:16.440 --> 00:19:23.640
workflow, but one of the things is using Git more and we're using GitLab at work, but this is so a


00:19:23.640 --> 00:19:28.360
lot of these some of these I use GitHub for open source projects of course, but here's an article


00:19:28.360 --> 00:19:35.240
called 15 tips to enhance your GitHub workflow and or GitHub flow and they a lot of these apply


00:19:35.240 --> 00:19:41.080
to both Git and GitHub and GitLab. Some of them are GitHub only, but there's some things that you


00:19:41.080 --> 00:19:46.040
just sort of need to know about the culture around Git and GitHub and GitLab and everything


00:19:46.040 --> 00:19:49.600
that you don't actually, it isn't obvious from the start.


00:19:49.600 --> 00:19:52.440
So I like having an article that calls out a lot of these things.


00:19:52.440 --> 00:19:56.200
Like one of the talks about, I'm not using projects yet,


00:19:56.200 --> 00:20:02.640
but I'd like to try to use projects to prioritize issues and maybe track progress and plan.


00:20:02.640 --> 00:20:06.000
Plan for what's going in which release and stuff.


00:20:06.000 --> 00:20:07.600
Maybe if that's built in,


00:20:07.600 --> 00:20:10.480
might as well try it. Using tags on issues.


00:20:10.480 --> 00:20:11.920
I've started using that.


00:20:11.920 --> 00:20:14.480
I know we have tags on a lot of


00:20:14.480 --> 00:20:19.480
open source projects like, what is it, Help Wanted and things like that.


00:20:19.480 --> 00:20:22.480
There's some standard ones. Getting to know those are good.


00:20:22.480 --> 00:20:26.480
Templates are something that really, so a lot of this stuff isn't stuff I know about yet.


00:20:26.480 --> 00:20:30.480
It's stuff I want to start using. Templates are something,


00:20:30.480 --> 00:20:34.480
like if somebody does a pull request against your project,


00:20:34.480 --> 00:20:38.480
having some predefined stuff filled in


00:20:38.480 --> 00:20:42.480
for them to know what to fill in. And the default template is sometimes


00:20:42.480 --> 00:20:45.240
sometimes kind of lame for certain projects.


00:20:45.240 --> 00:20:47.980
Like I've got a library that it,


00:20:47.980 --> 00:20:51.000
the default one asks for like operating system.


00:20:51.000 --> 00:20:52.520
Well, I don't really care.


00:20:52.520 --> 00:20:55.160
It's not going to affect the library I'm using.


00:20:55.160 --> 00:20:57.000
If the issue is really hard to reproduce,


00:20:57.000 --> 00:20:58.040
I'll ask somebody and say,


00:20:58.040 --> 00:21:00.520
"Hey, this is, I'm trying to reproduce it here


00:21:00.520 --> 00:21:02.040
and I can't reproduce."


00:21:02.040 --> 00:21:05.240
Anyway, there's a whole bunch of great things like squat down.


00:21:05.240 --> 00:21:06.920
One of the things I didn't know about at first


00:21:06.920 --> 00:21:10.840
was squashing pull requests and squashing commits.


00:21:10.840 --> 00:21:14.000
That's something that is totally foreign


00:21:14.000 --> 00:21:17.600
if you're coming to get from other revision control systems.


00:21:17.600 --> 00:21:20.520
So, there's just a good list of a whole bunch of goodies.


00:21:20.520 --> 00:21:21.480
- Yeah, that's really cool.


00:21:21.480 --> 00:21:26.480
And I like the automated tests and checks on pull requests.


00:21:26.480 --> 00:21:27.460
Like, that's really nice.


00:21:27.460 --> 00:21:29.800
Like, if I do a PR to someone else's repo


00:21:29.800 --> 00:21:32.520
and my PR automatically gets tested,


00:21:32.520 --> 00:21:34.760
like flaked or whatever,


00:21:34.760 --> 00:21:37.480
they're wanting to have checked, right?


00:21:37.480 --> 00:21:40.280
That can tell me right away before they get back to me,


00:21:40.280 --> 00:21:43.240
"Oh, there's a step I missed, let me fix that."


00:21:43.240 --> 00:21:46.800
And then resubmit the PR, or just update the PR,


00:21:46.800 --> 00:21:49.360
and then have it rerunning, okay, now everything's good.


00:21:49.360 --> 00:21:51.200
And I'm sure that on the other side of things,


00:21:51.200 --> 00:21:52.960
if someone is running a project


00:21:52.960 --> 00:21:54.640
and it's already passing all that,


00:21:54.640 --> 00:21:57.120
before they even get to it, they can take it more seriously.


00:21:57.120 --> 00:21:59.960
- Yeah, and that helps you with even,


00:21:59.960 --> 00:22:01.420
you know, you're splitting up branches,


00:22:01.420 --> 00:22:04.380
and so you can have tests running on multiple branches,


00:22:04.380 --> 00:22:08.720
which is nice if you have a long-running development feature.


00:22:08.720 --> 00:22:10.260
And then one of the things I wanna play with here


00:22:10.260 --> 00:22:13.820
there's a discussion in some about pre-commit hooks


00:22:13.820 --> 00:22:17.420
and hooking things like black up to your pre-commit hook


00:22:17.420 --> 00:22:19.100
to make sure the styling is correct.


00:22:19.100 --> 00:22:21.760
- Oh nice, yeah, instead of asking, just change it.


00:22:21.760 --> 00:22:22.680
- Yeah. (laughs)


00:22:22.680 --> 00:22:24.300
- Your styling is wrong, you need to break that line.


00:22:24.300 --> 00:22:25.860
Fine, we did that for you.


00:22:25.860 --> 00:22:26.700
- Yeah.


00:22:26.700 --> 00:22:28.020
- That's pretty cool.


00:22:28.020 --> 00:22:29.660
All right, so the last one I got, Brian,


00:22:29.660 --> 00:22:34.020
is just a feel-good story, Python versus legacy Python,


00:22:34.020 --> 00:22:35.220
that type of thing.


00:22:35.220 --> 00:22:37.480
So Pandas goes Python only,


00:22:37.480 --> 00:22:39.140
no more legacy Python for Pandas.


00:22:39.140 --> 00:22:40.340
Wow, that's cool.


00:22:40.340 --> 00:22:41.180
That's a pretty big deal.


00:22:41.180 --> 00:22:43.040
Like pandas in the data science space


00:22:43.040 --> 00:22:46.420
is one of the true foundational items.


00:22:46.420 --> 00:22:49.300
Maybe it's more popular than any of the others.


00:22:49.300 --> 00:22:51.580
I feel like people almost always start with pandas


00:22:51.580 --> 00:22:53.300
and then once they get their data processed,


00:22:53.300 --> 00:22:55.380
they like move to another library.


00:22:55.380 --> 00:22:58.980
So pandas going Python 3 only is really awesome.


00:22:58.980 --> 00:23:00.820
I got this off of Twitter from Randy Olson.


00:23:00.820 --> 00:23:01.860
Thank you for that.


00:23:01.860 --> 00:23:04.620
And basically they're following NumPy's lead.


00:23:04.620 --> 00:23:06.660
Remember NumPy is going Python 3 only.


00:23:06.660 --> 00:23:10.500
So officially starting January 1st, 2019,


00:23:10.500 --> 00:23:15.060
which is not that far away, seven months-ish, six months,


00:23:15.060 --> 00:23:17.340
Pandas will drop support for legacy Python.


00:23:17.340 --> 00:23:20.940
And this includes no backports of security or bug fixes.


00:23:20.940 --> 00:23:23.860
The final release will be the day before,


00:23:23.860 --> 00:23:25.620
and that one's gonna support Python 2,


00:23:25.620 --> 00:23:28.140
and we're just gonna leave it there, apparently.


00:23:28.140 --> 00:23:31.660
So I feel like data science has got a little bit of an edge


00:23:31.660 --> 00:23:34.620
on the Python 3 story for everyone,


00:23:34.620 --> 00:23:38.200
and partly because they've come into the ecosystem


00:23:38.200 --> 00:23:42.700
as a large group more recently than say the web developers


00:23:42.700 --> 00:23:47.460
or the automator folks who have been around for a long time.


00:23:47.460 --> 00:23:50.380
Like the data science stuff has really exploded 2012


00:23:50.380 --> 00:23:53.760
and onward, so it was a slightly easier choice I think.


00:23:53.760 --> 00:23:54.600
- Yeah, I think so.


00:23:54.600 --> 00:23:55.900
- Yeah, pretty cool.


00:23:55.900 --> 00:23:57.220
All right, well that's it for our news.


00:23:57.220 --> 00:23:58.660
Anything personal you wanna share?


00:23:58.660 --> 00:24:00.720
- No, I'm just excited to get back


00:24:00.720 --> 00:24:02.380
to like podcasting and stuff.


00:24:02.380 --> 00:24:03.220
It's been good.


00:24:03.220 --> 00:24:06.420
- It was a lot of fun to do the live one though at PyCon.


00:24:06.420 --> 00:24:08.780
Right, like nobody cheered for us today.


00:24:08.780 --> 00:24:10.500
Not that we heard anyway, right?


00:24:10.500 --> 00:24:12.220
It was so fun to just be in the audience and get the--


00:24:12.220 --> 00:24:15.780
- Yeah, and like nobody laughed at my jokes, yeah.


00:24:15.780 --> 00:24:17.300
- Maybe they did, we'll just never know.


00:24:17.300 --> 00:24:18.700
- Maybe we need like a sound--


00:24:18.700 --> 00:24:20.680
- Yeah, like one of those fake audience tracks.


00:24:20.680 --> 00:24:22.620
Nah, that'll take away from the real ones.


00:24:22.620 --> 00:24:24.740
We'll do some more live ones, we're talking about it, right?


00:24:24.740 --> 00:24:27.380
- Yeah, definitely, it was so fun, we wanna do more.


00:24:27.380 --> 00:24:29.660
- Yeah, maybe we can do some more, we'll figure that out.


00:24:29.660 --> 00:24:31.100
So are you excited?


00:24:31.100 --> 00:24:32.980
It's GDPR Eve.


00:24:32.980 --> 00:24:35.480
- Yeah, the only way, well, yeah.


00:24:35.480 --> 00:24:37.100
I don't really know how that affects me,


00:24:37.100 --> 00:24:39.480
but I'm telling people that's why I forget their name


00:24:39.480 --> 00:24:42.320
so quickly is because I'm complying with GDPR.


00:24:42.320 --> 00:24:46.560
- Oh, man, I have very mixed feelings about GDPR.


00:24:46.560 --> 00:24:50.640
I'm a fan of privacy and respecting data stuff.


00:24:50.640 --> 00:24:54.040
I'm not a fan of some of the ways


00:24:54.040 --> 00:24:54.960
in which they're going about it.


00:24:54.960 --> 00:24:58.000
I mean, it's a tech requirement


00:24:58.000 --> 00:25:00.640
written by non-technical people, for starters.


00:25:00.640 --> 00:25:02.720
- Do you have to change, for instance,


00:25:02.720 --> 00:25:05.040
the courses site of yours?


00:25:05.040 --> 00:25:07.520
- We have to, I've been doing nothing


00:25:07.520 --> 00:25:10.800
but 10 hours a day of GDPR programming all week.


00:25:10.800 --> 00:25:11.640
- Oh, geez.


00:25:11.640 --> 00:25:12.460
- Yeah, and I'm not done.


00:25:12.460 --> 00:25:13.560
I got one or two more days.


00:25:13.560 --> 00:25:16.520
And what drives me crazy about this is


00:25:16.520 --> 00:25:19.520
I'm an American company, 100% in America,


00:25:19.520 --> 00:25:23.200
and you know, like, that Europe has these rules


00:25:23.200 --> 00:25:26.760
that apply to us, which it's not about Europe or America.


00:25:26.760 --> 00:25:28.760
Like, what if India decides later


00:25:28.760 --> 00:25:30.520
that they have other rules that are inconsistent


00:25:30.520 --> 00:25:31.880
with what I've done for GDPR,


00:25:31.880 --> 00:25:33.800
and then Brazil has other,


00:25:33.800 --> 00:25:36.400
like I just think it's kind of crazy to say


00:25:36.400 --> 00:25:40.200
like lawmakers in one country can like impose their will


00:25:40.200 --> 00:25:41.960
on all of the world through these laws.


00:25:41.960 --> 00:25:42.780
So it's kind of funky,


00:25:42.780 --> 00:25:45.800
but I'm gonna do it because they pretty much have to.


00:25:45.800 --> 00:25:48.400
So if basically the reason I'm throwing this out there


00:25:48.400 --> 00:25:52.080
is if you run a site where you've got like say a mailing list


00:25:52.080 --> 00:25:55.000
or people buy stuff or you collect user data,


00:25:55.000 --> 00:25:59.080
just be sure to be really careful and look into this.


00:25:59.080 --> 00:26:00.720
And also we talked about environments


00:26:00.720 --> 00:26:05.840
we talked about pipenv and various other bits of packaging. So I just want to give a quick


00:26:05.840 --> 00:26:12.080
shout out to the XKCD Python environment cartoon which came out a few weeks ago. So that would


00:26:12.080 --> 00:26:21.760
be xkcd.com/1987. It's just about the sort of madness. So my Python environment has become


00:26:21.760 --> 00:26:27.520
so degraded that my laptop has been declared a super fun site. It's got homebrew for Python,


00:26:27.520 --> 00:26:29.520
It's got the OS Python Anaconda.


00:26:29.520 --> 00:26:33.520
It's got PIP, another PIP, easy install.


00:26:33.520 --> 00:26:34.520
Okay.


00:26:34.520 --> 00:26:35.520
It's pretty good, right?


00:26:35.520 --> 00:26:36.520
Yeah.


00:26:36.520 --> 00:26:38.520
Yeah, I think we'll probably try to...


00:26:38.520 --> 00:26:41.520
I'm going to link to the Kenneth Reitz's...


00:26:41.520 --> 00:26:42.520
Reitz's...


00:26:42.520 --> 00:26:46.520
I should just stop trying to pronounce names.


00:26:46.520 --> 00:26:49.520
His PyCon talk, because there was a lot of stuff in there


00:26:49.520 --> 00:26:52.520
about like the history of packaging that I didn't know about.


00:26:52.520 --> 00:26:54.520
So it's a good, good list.


00:26:54.520 --> 00:26:55.520
Yeah, you should definitely link to that.


00:26:55.520 --> 00:26:56.520
That's awesome.


00:26:56.520 --> 00:26:57.520
All right.


00:26:57.520 --> 00:27:01.020
Well, thank you, Kenneth, for working on pipenv.


00:27:01.020 --> 00:27:04.080
And thank you, Brian, for sharing everything with all of our listeners.


00:27:04.080 --> 00:27:06.560
Thank you.


00:27:06.560 --> 00:27:08.400
Thank you for listening to Python Bytes.


00:27:08.400 --> 00:27:10.920
Follow the show on Twitter via @pythonbytes.


00:27:10.920 --> 00:27:14.040
That's Python Bytes as in B-Y-T-E-S.


00:27:14.040 --> 00:27:17.320
And get the full show notes at pythonbytes.fm.


00:27:17.320 --> 00:27:21.040
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:27:21.040 --> 00:27:22.040
way.


00:27:22.040 --> 00:27:24.520
We're always on the lookout for sharing something cool.


00:27:24.520 --> 00:27:28.000
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:27:28.000 --> 00:27:31.040
Thank you for listening and sharing this podcast with your friends and colleagues.

