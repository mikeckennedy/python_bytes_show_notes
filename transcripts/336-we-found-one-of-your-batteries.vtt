WEBVTT

00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:12.080
This is episode 336 recorded May 16th, 2023. I'm Michael Kennedy.


00:00:12.080 --> 00:00:13.280
And I'm Brian Okken.


00:00:13.280 --> 00:00:18.560
And this episode is brought to you by InfluxDB from InfluxData. We'll tell you more about them


00:00:18.560 --> 00:00:26.480
later. Be sure to connect with us over on fostedon.org. I'm @mkennedy, Brian is @brianaukin,


00:00:27.040 --> 00:00:29.600
And the show is at Python Bytes.


00:00:29.600 --> 00:00:32.800
The rights and status of the show are still undetermined, Brian,


00:00:32.800 --> 00:00:34.800
but I'm sure we'll figure that out someday.


00:00:34.800 --> 00:00:36.800
See the last show to get the joke.


00:00:36.800 --> 00:00:40.680
And join us over at pythonbytes.fm/live


00:00:40.680 --> 00:00:44.360
usually Tuesday at 11 a.m. Pacific time to be part of the show.


00:00:44.360 --> 00:00:47.200
Or you can catch also the older episodes there.


00:00:47.200 --> 00:00:49.200
Or of course on your podcast players.


00:00:49.200 --> 00:00:51.200
And with that, Brian,


00:00:51.200 --> 00:00:52.960
let's dig into some batteries.


00:00:52.960 --> 00:00:56.720
>> Okay. Well, as we know, Python is the language of the batteries


00:00:56.720 --> 00:01:01.040
included. But there's we also have lots of cool, cool extra


00:01:01.040 --> 00:01:04.640
packages on pipe. Yeah, I actually quite a few. And one of


00:01:04.640 --> 00:01:08.240
the things that I wanted to highlight was a few just a


00:01:08.240 --> 00:01:12.800
handful of utilities packages that are really kind of fun. And


00:01:12.800 --> 00:01:15.640
you probably knew about them, but maybe forgot. And we've


00:01:15.640 --> 00:01:18.720
covered some of these in the past. So I wanted to highlight


00:01:18.720 --> 00:01:22.720
this article from Martin Hines called Python's missing


00:01:22.720 --> 00:01:25.840
batteries, essential libraries you're missing out on.


00:01:25.840 --> 00:01:30.280
And, the first project he talks about is bolt ons, which is actually an


00:01:30.280 --> 00:01:35.480
amazing, it's an amazing package, but it's so big, the comment here is he


00:01:35.480 --> 00:01:39.440
could, he could probably do an entire article just on bolt ons.


00:01:39.440 --> 00:01:40.720
And I think that's wrong.


00:01:40.720 --> 00:01:44.720
I think you could do an entire book on, on bolt ons and it would be a big book.


00:01:44.720 --> 00:01:46.260
There's a lot in there.


00:01:46.260 --> 00:01:50.560
Uh, but a few of the things that he highlighted were pretty, pretty cool


00:01:50.560 --> 00:01:52.920
that I kind of didn't know about.


00:01:52.920 --> 00:01:55.920
Boltons has a JSON utils and a time utils


00:01:55.920 --> 00:01:58.400
and an iter utils that he's demoing.


00:01:58.400 --> 00:02:02.280
So with JSON utils, you can just iterate


00:02:02.280 --> 00:02:07.200
with like a, for line and JSON utils, JSON iterator.


00:02:07.200 --> 00:02:09.400
You can iterate through JSON elements.


00:02:09.400 --> 00:02:10.680
That's pretty amazing.


00:02:10.680 --> 00:02:11.500
That's pretty cool.


00:02:11.500 --> 00:02:12.640
I like that.


00:02:12.640 --> 00:02:17.280
The time utils example was, is a, using a date range,


00:02:17.280 --> 00:02:21.080
time utils date range and iterating through days,


00:02:21.080 --> 00:02:24.080
which is kind of neat. I didn't know you could do that.


00:02:24.080 --> 00:02:28.180
Kind of a cool idea to maybe walk through days and get different date times.


00:02:28.180 --> 00:02:31.080
But anyway, there's a different step size you can do.


00:02:31.080 --> 00:02:32.680
You can walk through each week or whatever.


00:02:32.680 --> 00:02:36.680
And then, iterutils has a,


00:02:36.680 --> 00:02:38.680
is highlighting a couple things in their utils.


00:02:38.680 --> 00:02:40.180
One of them is get path,


00:02:40.180 --> 00:02:43.880
which isn't really like a file system path,


00:02:43.880 --> 00:02:49.080
but it's basically saying I've got a deeply nested structure


00:02:49.080 --> 00:02:53.120
and I want to access it without having to do all the access functions.


00:02:53.120 --> 00:02:56.320
So it's a way to get access to deeply nested things.


00:02:56.320 --> 00:02:58.820
And then a remap, which is neat.


00:02:58.820 --> 00:03:02.820
Remap takes a deeply nested structure


00:03:02.820 --> 00:03:05.820
and just changes something inside of it, which is kind of cool.


00:03:05.820 --> 00:03:08.920
I don't want to go through all of the details of this article,


00:03:08.920 --> 00:03:10.820
but a couple of quick highlights.


00:03:10.820 --> 00:03:20.660
There's highlighting the SH package where you can do shell commands from Python in a fairly nice way.


00:03:20.660 --> 00:03:24.900
Data validation actually, this is pretty neat.


00:03:24.900 --> 00:03:29.860
There's pedantic, of course, but that's for like, which is awesome.


00:03:29.860 --> 00:03:32.100
But there's also this validators library, which is neat.


00:03:32.100 --> 00:03:35.380
And it can do things like validate, making sure that email,


00:03:35.380 --> 00:03:39.140
you like validating emails or Visa card numbers


00:03:39.140 --> 00:03:41.220
or an IP address is all format,


00:03:41.220 --> 00:03:44.840
just validate strings are formatted correctly and things.


00:03:44.840 --> 00:03:46.040
It's pretty neat, cool.


00:03:46.040 --> 00:03:51.140
And then the fuzz is a fuzzy matching string,


00:03:51.140 --> 00:03:53.640
fuzzy string matching library, which is kind of cool.


00:03:53.640 --> 00:03:56.480
I wanted to jump down debugging.


00:03:56.480 --> 00:03:58.840
There's a stack printer that has,


00:03:58.840 --> 00:04:01.440
it's basically a really nice stack trace


00:04:01.440 --> 00:04:04.440
that does the error messages, which is kind of cool.


00:04:05.300 --> 00:04:09.980
What else? For testing, you can freeze time with the freeze gun library.


00:04:09.980 --> 00:04:13.980
And then this, the last thing is kind of cool.


00:04:13.980 --> 00:04:22.300
I write a lot of command line applications and there's a, I would not have thought to look for this package called TQDM.


00:04:22.300 --> 00:04:25.100
I don't know what that stands for, but it does.


00:04:25.100 --> 00:04:28.500
It does like, what are these things?


00:04:28.500 --> 00:04:31.460
Progress bars, we think for command line utilities.


00:04:31.620 --> 00:04:37.460
So TQDM comes from Taqwadum, which means progress in Arabic.


00:04:37.460 --> 00:04:39.060
[LAUGHTER]


00:04:39.060 --> 00:04:40.700
>> Of course.


00:04:40.700 --> 00:04:42.860
>> I wouldn't have clued me in to go search for it.


00:04:42.860 --> 00:04:44.900
I love that package. There's a lot of cool stuff here.


00:04:44.900 --> 00:04:49.500
I use TQDM, it's my go-to for this stuff.


00:04:49.500 --> 00:04:51.020
There's a lot of things like, "Oh,


00:04:51.020 --> 00:04:55.140
I need to go over millions of database records,


00:04:55.140 --> 00:04:56.900
and make some change, and do a test,


00:04:56.900 --> 00:04:59.220
and then maybe, I don't know, update some of them."


00:04:59.220 --> 00:05:00.940
That might take a while.


00:05:00.940 --> 00:05:05.580
I just did something where I had to do a report on a bunch of stuff on


00:05:05.580 --> 00:05:12.980
the Talk Python courses and it took nine hours to go do a bunch of compute for a bunch of


00:05:12.980 --> 00:05:18.540
courses for an insane amount of stuff and I ran that and you could just see,


00:05:18.540 --> 00:05:20.160
I saw several things.


00:05:20.160 --> 00:05:22.060
One, it shows you the progress.


00:05:22.060 --> 00:05:23.420
You can see it doing progress,


00:05:23.420 --> 00:05:28.060
but it also tells you the per object per time.


00:05:28.060 --> 00:05:32.940
So it'll say like processing 200 records per second,


00:05:32.940 --> 00:05:34.740
for example, as it goes through the list.


00:05:34.740 --> 00:05:36.580
And it also estimates the time, which


00:05:36.580 --> 00:05:38.580
is why after five minutes, I'm like, oh, this


00:05:38.580 --> 00:05:39.620
is going to take nine hours.


00:05:39.620 --> 00:05:40.900
I'm not going to wait for this.


00:05:40.900 --> 00:05:41.660
It's really nice.


00:05:41.660 --> 00:05:43.260
So can you use it if you don't really


00:05:43.260 --> 00:05:46.460
know how long something's going to take to begin with?


00:05:46.460 --> 00:05:48.100
Yes.


00:05:48.100 --> 00:05:48.780
And--


00:05:48.780 --> 00:05:51.260
Or do you have to like kind of know--


00:05:51.260 --> 00:05:54.940
do you have to give it like it's 10% done or it's 20% done?


00:05:54.940 --> 00:05:56.700
No, it does it all automatically.


00:05:56.700 --> 00:05:58.260
I don't really know how.


00:05:58.260 --> 00:06:00.260
I think some things it can figure out.


00:06:00.260 --> 00:06:00.940
>> Okay.


00:06:00.940 --> 00:06:04.540
>> Others, I don't know how it can actually do that.


00:06:04.540 --> 00:06:07.460
Because for example, on the example on the screen,


00:06:07.460 --> 00:06:09.700
it has a range from 0-100.


00:06:09.700 --> 00:06:12.140
You can't ask the length of the range.


00:06:12.140 --> 00:06:13.060
>> Okay.


00:06:13.060 --> 00:06:16.100
>> But it somehow knows.


00:06:16.100 --> 00:06:18.580
>> Well, I might play with that because right now I've got


00:06:18.580 --> 00:06:22.060
an application that command-line thing that reboots


00:06:22.060 --> 00:06:24.500
an instrument and then waits for it to finish.


00:06:24.500 --> 00:06:27.980
and I just have dots and it'd be kind of nice to have


00:06:27.980 --> 00:06:30.420
like a, something like this.


00:06:30.420 --> 00:06:32.380
- Yeah, my prior solution was,


00:06:32.380 --> 00:06:34.500
oh, let's put out a little dot every so often.


00:06:34.500 --> 00:06:35.540
No, that's too many dots.


00:06:35.540 --> 00:06:37.540
Let's mod it out a little bit higher


00:06:37.540 --> 00:06:39.660
to like maybe every 20 records we'll put a dot


00:06:39.660 --> 00:06:41.260
or something like that.


00:06:41.260 --> 00:06:42.580
- Exactly.


00:06:42.580 --> 00:06:43.540
- Yeah, so this is nice.


00:06:43.540 --> 00:06:46.340
You can just wrap an iterator in a TQDM


00:06:46.340 --> 00:06:48.300
and then loop over it and magic happens.


00:06:48.300 --> 00:06:49.540
- Cool, I'll try that.


00:06:49.540 --> 00:06:50.360
- Yep.


00:06:50.360 --> 00:06:51.500
All right, well, that's pretty awesome.


00:06:51.500 --> 00:06:52.820
Wanna hear about more awesome things, Brian?


00:06:52.820 --> 00:06:54.500
- Yeah, let's do awesome.


00:06:54.500 --> 00:06:56.220
- Let's do some awesome, some pollers.


00:06:56.220 --> 00:07:00.220
So pollers is as many things in Python are these days


00:07:00.220 --> 00:07:04.720
is the rustification in a good way, Python things.


00:07:04.720 --> 00:07:08.420
So it's kind of like pandas, but redone and rust


00:07:08.420 --> 00:07:11.860
with more of a fluent API that allows it


00:07:11.860 --> 00:07:14.940
to be more database query engine like.


00:07:14.940 --> 00:07:18.580
And so what I have for us today is the awesome pollers,


00:07:18.580 --> 00:07:20.740
a curated list of pollers, talks, tools,


00:07:20.740 --> 00:07:22.620
examples, and articles.


00:07:22.620 --> 00:07:24.720
Now many of these awesome lists are extensions


00:07:24.720 --> 00:07:26.260
and there are a few things in here,


00:07:26.260 --> 00:07:28.320
like it talks about the Python library


00:07:28.320 --> 00:07:31.460
and you may not know there's actually a Rust library


00:07:31.460 --> 00:07:33.600
for pollers that you can directly use


00:07:33.600 --> 00:07:35.000
if you're integrating with Rust code,


00:07:35.000 --> 00:07:37.560
but also one for R, one for Node.


00:07:37.560 --> 00:07:40.560
It's got some things like cheat sheets.


00:07:40.560 --> 00:07:43.380
If people wanna go and check out the cheat sheet,


00:07:43.380 --> 00:07:46.220
it's got actually a really nice visualization


00:07:46.220 --> 00:07:49.260
to show you what reshaping data means


00:07:49.260 --> 00:07:53.580
with concat or appending columns side by side


00:07:53.580 --> 00:07:57.140
from two data frames in a different,


00:07:57.140 --> 00:07:58.860
with a horizontal concat flag,


00:07:58.860 --> 00:08:01.380
which I think the visualization of these things


00:08:01.380 --> 00:08:02.220
is really nice.


00:08:02.220 --> 00:08:03.340
What do you think of this, Brian?


00:08:03.340 --> 00:08:06.560
- I'm actually, the visualization is what I'm enjoying


00:08:06.560 --> 00:08:07.900
the most with this cheat sheet.


00:08:07.900 --> 00:08:09.220
That's nice, so.


00:08:09.220 --> 00:08:11.180
- Yeah, it's really, really nice.


00:08:11.180 --> 00:08:13.300
And it has a bunch of tutorials and workshops.


00:08:13.300 --> 00:08:17.260
So if you are trying to get into Polars,


00:08:17.260 --> 00:08:20.660
Come over here, there's maybe six or seven different examples


00:08:20.660 --> 00:08:24.020
and a bunch of blog posts, a whole bunch,


00:08:24.020 --> 00:08:25.980
how to integrate it with DuckDB


00:08:25.980 --> 00:08:27.880
or how it compares to DuckDB,


00:08:27.880 --> 00:08:29.940
and then a bunch of videos


00:08:29.940 --> 00:08:34.740
as well as people in the holders community, right?


00:08:34.740 --> 00:08:37.060
Like Richie Vink, who created it,


00:08:37.060 --> 00:08:40.540
but also contributors, if you can follow them


00:08:40.540 --> 00:08:42.100
and ask them questions.


00:08:42.100 --> 00:08:43.340
- That's kind of a nice addition.


00:08:43.340 --> 00:08:45.660
It was like, on social media, who do you follow?


00:08:45.660 --> 00:08:47.060
That's pretty cool.


00:08:47.060 --> 00:08:48.180
Yeah, super nice.


00:08:48.180 --> 00:08:50.540
So anyway, not a whole lot to go into it there,


00:08:50.540 --> 00:08:53.020
but yeah, really, really nice.


00:08:53.020 --> 00:08:55.180
People are into Polars, put it here.


00:08:55.180 --> 00:08:57.220
Also, I kind of wanted to give it a shout out


00:08:57.220 --> 00:08:59.120
because Polars is fairly new.


00:08:59.120 --> 00:09:01.700
And if you've got something that integrates with Polars


00:09:01.700 --> 00:09:05.340
or builds on top of Polars in a way that itself is reusable,


00:09:05.340 --> 00:09:06.740
you know, come over here and do a PR.


00:09:06.740 --> 00:09:09.220
I'm sure they're happy to accept it.


00:09:09.220 --> 00:09:11.900
It says, "Contributions welcome!"


00:09:11.900 --> 00:09:14.500
So yeah, get in here and contribute.


00:09:14.500 --> 00:09:15.580
They're so welcome.


00:09:15.580 --> 00:09:17.500
(laughing)


00:09:17.500 --> 00:09:19.100
You know what else is welcome?


00:09:19.100 --> 00:09:20.820
Our sponsor this week.


00:09:20.820 --> 00:09:24.180
So super happy to have a sponsor for the show.


00:09:24.180 --> 00:09:27.100
As we mentioned at the top, InfluxDB.


00:09:27.100 --> 00:09:31.740
So InfluxDB is all about the time series data.


00:09:31.740 --> 00:09:34.860
So this episode is brought to you by Python.


00:09:34.860 --> 00:09:36.060
This episode of Python Bytes is brought to you


00:09:36.060 --> 00:09:39.140
by InfluxData, the makers of InfluxDB.


00:09:39.140 --> 00:09:41.620
InfluxDB is a database purpose built


00:09:41.620 --> 00:09:43.500
for handling time series data


00:09:43.500 --> 00:09:46.460
at a massive scale for real-time analytics.


00:09:46.460 --> 00:09:48.460
So developers can ingest, store,


00:09:48.460 --> 00:09:51.060
and analyze all types of time series data,


00:09:51.060 --> 00:09:53.940
metrics, events, traces in a single platform.


00:09:53.940 --> 00:09:55.100
Let me ask you a question.


00:09:55.100 --> 00:09:56.820
How would boundless cardinality


00:09:56.820 --> 00:09:58.980
and lightning fast SQL queries impact


00:09:58.980 --> 00:10:01.340
the way you develop real-time applications?


00:10:01.340 --> 00:10:03.300
Maybe make them real-time, huh?


00:10:03.300 --> 00:10:06.580
InfluxDB processes large time series data sets


00:10:06.580 --> 00:10:08.540
and provides low latency SQL queries,


00:10:08.540 --> 00:10:10.380
making it a go-to choice for developers


00:10:10.380 --> 00:10:12.180
building real-time applications


00:10:12.180 --> 00:10:14.060
and seeking crucial insights.


00:10:14.060 --> 00:10:15.420
For developer efficiency,


00:10:15.420 --> 00:10:18.020
InfluxDB helps you create IoT analytics


00:10:18.020 --> 00:10:21.320
and cloud applications using timestamp data rapidly


00:10:21.320 --> 00:10:23.140
and at scale.


00:10:23.140 --> 00:10:25.700
It's designed to ingest billions of data points


00:10:25.700 --> 00:10:28.100
in real time with unlimited cardinality.


00:10:28.100 --> 00:10:29.960
InfluxDB streamlines building once


00:10:29.960 --> 00:10:32.720
and deploying across various products and environments


00:10:32.720 --> 00:10:35.500
from the edge, on-premise, and to the cloud.


00:10:35.500 --> 00:10:39.500
Try it for free at pythonbytes.fm/influxdb.


00:10:39.500 --> 00:10:41.740
The link is in your podcast player show notes.


00:10:41.740 --> 00:10:44.500
Thank you to Influx Data and InfluxDB


00:10:44.500 --> 00:10:46.900
for supporting the show.


00:10:46.900 --> 00:10:49.020
All right, over to you, Brian, what's next?


00:10:49.020 --> 00:10:50.340
- Well, this is a pretty quick one,


00:10:50.340 --> 00:10:51.380
but I wanted to,


00:10:51.380 --> 00:10:54.300
I know that a lot of people test with Selenium.


00:10:54.300 --> 00:10:57.380
I know there's lots of other stuff you can do,


00:10:57.380 --> 00:10:58.980
like playwright and everything like that,


00:10:58.980 --> 00:11:01.700
but still, Selenium's heavily used,


00:11:01.700 --> 00:11:03.940
and I still have some tests in Selenium.


00:11:03.940 --> 00:11:06.500
And, well, there has been a change,


00:11:06.500 --> 00:11:09.380
so I wanted to just make sure everybody's aware.


00:11:09.380 --> 00:11:13.500
If you, there's an article called


00:11:13.500 --> 00:11:16.620
Running Headless Selenium in Python in 2023.


00:11:16.620 --> 00:11:20.500
And the catch is basically if you're,


00:11:20.500 --> 00:11:24.260
well one, if you're not running headless already,


00:11:24.260 --> 00:11:25.340
why not?


00:11:25.340 --> 00:11:26.900
The headless is awesome.


00:11:26.900 --> 00:11:30.600
It can basically, you can run through a web browser


00:11:30.600 --> 00:11:33.180
but don't actually load, don't open it.


00:11:33.180 --> 00:11:35.820
It just, you run it behind, there's no win, anyway.


00:11:35.820 --> 00:11:37.900
It's faster, so use headless.


00:11:37.900 --> 00:11:39.640
But if you are already using headless,


00:11:39.640 --> 00:11:40.620
there's been a change.


00:11:40.620 --> 00:11:45.060
So the change is, let's go down,


00:11:45.060 --> 00:11:47.380
scrolling down, there's an example, which is great.


00:11:47.380 --> 00:11:51.320
So Selenium 4.8.0 came out in January.


00:11:51.320 --> 00:11:56.320
And the old way to do things was to do,


00:11:56.320 --> 00:12:00.380
you set up your web driver and you mark headless equals true.


00:12:00.380 --> 00:12:01.980
And you can do this with both Chrome


00:12:01.980 --> 00:12:04.740
and Firefox had a little different setting,


00:12:04.740 --> 00:12:07.540
but it also had a headless equals true setup.


00:12:07.540 --> 00:12:10.780
And then you can run headless and it was awesome.


00:12:10.780 --> 00:12:12.380
They took away this dot headless.


00:12:12.380 --> 00:12:13.900
So don't do that anymore


00:12:13.900 --> 00:12:16.700
if you're using Selenium 4.8 or above.


00:12:16.700 --> 00:12:19.900
The new way is, so for Chrome,


00:12:19.900 --> 00:12:23.620
you add an argument of headless equals new,


00:12:23.620 --> 00:12:25.240
--headless equals new.


00:12:25.240 --> 00:12:26.700
And it's really add argument.


00:12:26.700 --> 00:12:27.540
If you're listening to this,


00:12:27.540 --> 00:12:29.720
there's a new options dot add argument.


00:12:29.720 --> 00:12:32.940
And then the same sort of thing with Firefox,


00:12:32.940 --> 00:12:36.380
it isn't equals new, it's just --headless.


00:12:36.380 --> 00:12:38.580
But this shows you an example.


00:12:38.580 --> 00:12:39.660
Why did they do this?


00:12:39.660 --> 00:12:41.940
Well, there's some description of why


00:12:41.940 --> 00:12:44.080
there was like an old way and a new way.


00:12:44.080 --> 00:12:48.320
And then Chromium had a new headless option


00:12:48.320 --> 00:12:49.320
that you can add.


00:12:49.320 --> 00:12:51.300
So we wanna be able to do the new way.


00:12:51.300 --> 00:12:52.780
So they deprecated the old way


00:12:52.780 --> 00:12:55.380
to get people to use the new more powerful.


00:12:55.380 --> 00:12:58.780
And we're also linking to an article from Selenium,


00:12:58.780 --> 00:13:00.460
which is kind of a funny title.


00:13:00.460 --> 00:13:02.540
So they wanted to get everybody's attention


00:13:02.540 --> 00:13:04.820
So they knew, so they named the article,


00:13:04.820 --> 00:13:09.660
Headless is Going Away, yes, which is a funny name.


00:13:09.660 --> 00:13:11.220
And then subtitled it with,


00:13:11.220 --> 00:13:12.360
now that we have your attention,


00:13:12.360 --> 00:13:14.060
headless is not actually going away,


00:13:14.060 --> 00:13:17.580
just the convenient method to set it in Selenium.


00:13:17.580 --> 00:13:19.940
So I guess just a public service announcement,


00:13:19.940 --> 00:13:21.260
if you're using Selenium,


00:13:21.260 --> 00:13:24.740
you gotta change your code to use the new Selenium 4.8.


00:13:24.740 --> 00:13:26.200
That's it.


00:13:26.200 --> 00:13:27.140
Oh, you're on mute.


00:13:27.140 --> 00:13:27.980
- So I am.


00:13:27.980 --> 00:13:29.420
I do like it.


00:13:30.260 --> 00:13:34.840
I wonder though, why you have to pass the command line argument directly and it doesn't


00:13:34.840 --> 00:13:40.740
just look like, oh, you said headless, that means in Chrome now pass --mode this, you


00:13:40.740 --> 00:13:44.660
know, because it's almost the same but not the same across the browser platforms.


00:13:44.660 --> 00:13:52.220
Yeah, I think it's because there's different, I don't know, I haven't looked through the


00:13:52.220 --> 00:13:54.180
explanation but I think there's other options.


00:13:54.180 --> 00:13:59.300
So it isn't necessarily just that they've changed the way you turn on headless, but


00:13:59.300 --> 00:14:01.100
there's more headless options.


00:14:01.100 --> 00:14:02.940
So they're just building it in


00:14:02.940 --> 00:14:04.940
so that you can pass in new flags.


00:14:04.940 --> 00:14:08.580
And I think Chromium might end up getting more versions


00:14:08.580 --> 00:14:11.140
in later or something, I don't know.


00:14:11.140 --> 00:14:13.660
- Yeah, the browser space is a,


00:14:13.660 --> 00:14:15.780
it's an interesting time, isn't it?


00:14:15.780 --> 00:14:16.620
- Yeah.


00:14:16.620 --> 00:14:17.780
- We fought through the browser wars,


00:14:17.780 --> 00:14:21.140
we've beaten back Internet Explorer 6,


00:14:21.140 --> 00:14:23.460
only to come back and have Chromium


00:14:23.460 --> 00:14:26.340
even more dominant in certain ways.


00:14:26.340 --> 00:14:30.020
- It's interesting because like as for a usability thing,


00:14:30.020 --> 00:14:32.000
I'm usually using Vivaldi now,


00:14:32.000 --> 00:14:35.280
but I use probably Vivaldi and Chrome for day to day use.


00:14:35.280 --> 00:14:38.640
But for testing, yeah, it's still Chrome.


00:14:38.640 --> 00:14:41.600
I use Chrome and Firefox.


00:14:41.600 --> 00:14:42.800
That's what I use Firefox for,


00:14:42.800 --> 00:14:44.600
is still testing with Firefox.


00:14:44.600 --> 00:14:45.920
- Yeah, absolutely.


00:14:45.920 --> 00:14:47.840
Cool, you know, just a bit of follow up


00:14:47.840 --> 00:14:50.440
on the previous conversation


00:14:50.440 --> 00:14:52.640
about those different batteries that you talked about.


00:14:52.640 --> 00:14:53.480
I love our audience,


00:14:53.480 --> 00:14:55.160
there's so much cool stuff going on over there.


00:14:55.160 --> 00:14:59.460
So Blaise says, "I wonder if Rich does anything with TQDM?"


00:14:59.460 --> 00:15:02.080
And if you want a definitive answer,


00:15:02.080 --> 00:15:04.020
how about Will McGugan in the audience says,


00:15:04.020 --> 00:15:06.760
"TQDM has a Rich output option."


00:15:06.760 --> 00:15:09.700
Will obviously being the creator of Rich


00:15:09.700 --> 00:15:12.280
and many other awesome things there.


00:15:12.280 --> 00:15:14.240
So nice follow-up.


00:15:14.240 --> 00:15:17.540
- Awesome, we've turned into the water cooler of Python.


00:15:17.540 --> 00:15:18.800
- We sure have.


00:15:18.800 --> 00:15:22.100
All right, I have one more thing to share with you all.


00:15:22.100 --> 00:15:23.160
Let's jump into it.


00:15:23.160 --> 00:15:25.000
And that is Gracie.


00:15:25.000 --> 00:15:28.360
So, Gracie's an interesting project.


00:15:28.360 --> 00:15:31.120
It's a little bit like your first topic, Brian,


00:15:31.120 --> 00:15:34.520
in that it has a bunch of kind of utility features,


00:15:34.520 --> 00:15:37.840
and this one is around consuming APIs,


00:15:37.840 --> 00:15:40.240
so not creating APIs, but writing clients


00:15:40.240 --> 00:15:44.240
that talk to them, specifically around HTTPX,


00:15:44.240 --> 00:15:48.680
which is one of the absolute go-to ACP libraries


00:15:48.680 --> 00:15:53.680
for doing modern async style of APIs in Python, right?


00:15:54.800 --> 00:15:59.800
So, Gracie, it says, "Gracely manage your API interactions."


00:15:59.800 --> 00:16:04.880
Gracie helps you handle failures, logging, retries,


00:16:04.880 --> 00:16:08.560
throttling, and tracking for all of your HTTP interactions.


00:16:08.560 --> 00:16:10.560
And it uses HTTPX under the hood.


00:16:10.560 --> 00:16:13.040
Let's you do the, like Gracie, do the boring stuff


00:16:13.040 --> 00:16:15.560
and you can focus on your app is the selling point here.


00:16:15.560 --> 00:16:16.840
So this is pretty cool.


00:16:16.840 --> 00:16:18.160
It's not super well known.


00:16:18.160 --> 00:16:22.280
It's got like 180 stars and it's an interesting library


00:16:22.280 --> 00:16:24.400
that has a lot of cool functionality.


00:16:24.400 --> 00:16:27.680
It feels like it could use a little bit more polish,


00:16:27.680 --> 00:16:29.240
but it's still quite neat.


00:16:29.240 --> 00:16:30.720
So let me give you some ideas here.


00:16:30.720 --> 00:16:34.800
So what you do is basically you model


00:16:34.800 --> 00:16:39.240
your API interactions through a class structure.


00:16:39.240 --> 00:16:40.280
It's not quite a hierarchy,


00:16:40.280 --> 00:16:43.200
but you use classes to come up with it.


00:16:43.200 --> 00:16:45.760
So you can come up with an endpoint here,


00:16:45.760 --> 00:16:48.840
and then you create something that derives


00:16:48.840 --> 00:16:52.280
from the API base class.


00:16:52.280 --> 00:16:54.880
give it a URL and then you give it a bunch of settings.


00:16:54.880 --> 00:16:57.840
The settings are where the useful stuff is.


00:16:57.840 --> 00:16:59.120
For example, you can say,


00:16:59.120 --> 00:17:03.080
I would like to log the request as it's going out the door,


00:17:03.080 --> 00:17:04.400
but only in debug.


00:17:04.400 --> 00:17:09.960
I'd like to log the response and that one a little more frequently at the info level,


00:17:09.960 --> 00:17:13.520
and then you can have a custom message that goes out there.


00:17:13.520 --> 00:17:20.720
Then you also can have a parser that will parse the response as a set of functions.


00:17:20.720 --> 00:17:22.560
The first example you see here just says,


00:17:22.560 --> 00:17:25.420
by default, just given any object,


00:17:25.420 --> 00:17:28.800
call.json on it, given the request,


00:17:28.800 --> 00:17:30.240
call.json on it, right?


00:17:30.240 --> 00:17:32.560
So that's handy,


00:17:32.560 --> 00:17:36.960
but what you can do if you go down a little bit,


00:17:36.960 --> 00:17:41.380
custom validators, you can actually say,


00:17:41.380 --> 00:17:44.560
by default, just try to convert it to a JSON response.


00:17:44.560 --> 00:17:47.080
But if the status code is not found,


00:17:47.080 --> 00:17:48.320
then do something else.


00:17:48.320 --> 00:17:50.680
You can have a series of different status codes.


00:17:50.680 --> 00:17:53.480
So if it by default use this parser,


00:17:53.480 --> 00:17:56.440
but if it's like a 400 bad requests,


00:17:56.440 --> 00:17:58.200
then we need to parse it as something else.


00:17:58.200 --> 00:18:00.760
And that could even be like convert it from,


00:18:00.760 --> 00:18:02.820
you know, maybe in a success case,


00:18:02.820 --> 00:18:04.680
you get this particular say,


00:18:04.680 --> 00:18:05.980
Pydantic model back,


00:18:05.980 --> 00:18:07.180
but in an error case,


00:18:07.180 --> 00:18:09.180
you have a totally different structure


00:18:09.180 --> 00:18:10.920
and you might want to parse it differently


00:18:10.920 --> 00:18:12.660
into a different Pydantic model,


00:18:12.660 --> 00:18:13.440
something along the lines.


00:18:13.440 --> 00:18:16.440
So you can do a lot of cool stuff like that there.


00:18:16.440 --> 00:18:19.000
And yeah, and then you just give it,


00:18:19.000 --> 00:18:22.400
give it the functions that you call that basically invoke the API.


00:18:22.400 --> 00:18:25.960
And of course, because it's based on HTTPX, you can await


00:18:25.960 --> 00:18:27.960
calling on this function. So,


00:18:27.960 --> 00:18:29.960
yeah, anyway, it looks


00:18:29.960 --> 00:18:33.800
it ends up with a pretty clean model for using it. What do you think?


00:18:33.800 --> 00:18:35.800
Well, yeah, it


00:18:35.800 --> 00:18:39.320
it'll take some time to get your head around it because of the class-based thing.


00:18:39.320 --> 00:18:42.720
But it's all stuff that you're going to have to develop anyway.


00:18:42.720 --> 00:18:45.080
So having somebody else do the work, it's pretty good.


00:18:45.080 --> 00:18:48.960
Yeah, there's some nice examples of like throttling and


00:18:48.960 --> 00:18:52.080
This might be interesting to you, Brian,


00:18:52.080 --> 00:18:54.840
is it has the ability, there's a bunch of different things.


00:18:54.840 --> 00:18:57.880
It has ability to replay certain data.


00:18:57.880 --> 00:19:01.800
You can also say, we're only allowing certain,


00:19:01.800 --> 00:19:06.160
by default, any 200 category status code is considered success.


00:19:06.160 --> 00:19:07.320
You can say, no, for this one,


00:19:07.320 --> 00:19:11.120
it has to be a dot created like a HTTP status dot created,


00:19:11.120 --> 00:19:13.800
not 200 or something like that.


00:19:13.800 --> 00:19:16.360
Or you can give it either okay or created.


00:19:16.360 --> 00:19:18.520
You give it a set of options.


00:19:18.520 --> 00:19:21.860
That's pretty cool. You can add custom validation.


00:19:21.860 --> 00:19:25.000
You talked about validators at your beginning as well.


00:19:25.000 --> 00:19:27.660
And if you're not using Pydantic


00:19:27.660 --> 00:19:30.400
or something that kind of does its own custom validation,


00:19:30.400 --> 00:19:32.460
you can still even add more stuff.


00:19:32.460 --> 00:19:34.460
Like not only does this have to be a string,


00:19:34.460 --> 00:19:36.460
but it has to be, I don't know,


00:19:36.460 --> 00:19:39.360
an email of this type or whatever, right?


00:19:39.360 --> 00:19:42.660
Like of this, say, the domain of our company, right?


00:19:42.660 --> 00:19:43.300
Something like that.


00:19:43.300 --> 00:19:46.420
So you can add these custom validators and


00:19:46.420 --> 00:19:49.060
It comes with a retry, built-in retry for


00:19:49.060 --> 00:19:52.460
how do you handle the retries, how many attempts,


00:19:52.460 --> 00:19:54.620
what do you do in terms of logging,


00:19:54.620 --> 00:19:57.620
you know, about retries and failures,


00:19:57.620 --> 00:19:59.340
what do you do if, you know,


00:19:59.340 --> 00:20:02.300
you can say, I want to retry three times and if it,


00:20:02.300 --> 00:20:03.420
none of them work,


00:20:03.420 --> 00:20:06.860
I don't care, just keep going, don't break my application, or please do.


00:20:06.860 --> 00:20:08.860
Don't, you know, raise an exception.


00:20:08.860 --> 00:20:10.860
You might say, well, why would you ever not want to break it?


00:20:10.860 --> 00:20:12.860
Like, maybe you're trying to write to some sort of


00:20:12.860 --> 00:20:15.340
audit log to say this happened.


00:20:15.340 --> 00:20:18.140
And if the server that just records what happened goes down,


00:20:18.140 --> 00:20:19.820
you don't want to start crashing your app, right?


00:20:19.820 --> 00:20:22.340
There's like scenarios where you might not really care about that.


00:20:22.340 --> 00:20:24.540
Also throttling, which is pretty neat.


00:20:24.540 --> 00:20:27.900
You can say any time that the URL contains,


00:20:27.900 --> 00:20:29.260
the example is a Pokemon thing.


00:20:29.260 --> 00:20:32.220
So it has a regular expression for Pokemon.


00:20:32.220 --> 00:20:36.740
I want maximum 10 requests for every one and a half minutes.


00:20:36.740 --> 00:20:39.140
And then you can actually, it has a cool output too.


00:20:39.140 --> 00:20:42.740
If you print out just the rule it says, which is an object.


00:20:42.740 --> 00:20:45.180
it says 10 requests per 90 seconds for URLs


00:20:45.180 --> 00:20:47.900
matching this regular expression, which is kind of nice.


00:20:47.900 --> 00:20:48.740
- Oh, cool.


00:20:48.740 --> 00:20:50.300
- And yeah, the final thing,


00:20:50.300 --> 00:20:51.860
some, I don't really know where it is in here,


00:20:51.860 --> 00:20:56.060
but yeah, you can also have it throw certain exceptions.


00:20:56.060 --> 00:20:59.340
So how, you know how it has that parser type scenario


00:20:59.340 --> 00:21:01.700
for different HTTP status codes I told you about.


00:21:01.700 --> 00:21:03.180
So you can say, if it's a bad request,


00:21:03.180 --> 00:21:05.380
please throw, you know, some exception class


00:21:05.380 --> 00:21:07.060
that you come up with, right?


00:21:07.060 --> 00:21:09.820
So instead of just saying bad request,


00:21:09.820 --> 00:21:11.620
it could potentially have more details.


00:21:11.620 --> 00:21:13.700
you might build a parse information into it


00:21:13.700 --> 00:21:15.020
and then raise that exception.


00:21:15.020 --> 00:21:17.060
There's some pretty neat things.


00:21:17.060 --> 00:21:19.420
And the final thing, by the way,


00:21:19.420 --> 00:21:20.620
rich integration right there,


00:21:20.620 --> 00:21:25.380
it requires you to install rich if you want fancy output on,


00:21:25.380 --> 00:21:27.500
it'll tell you sort of it's,


00:21:27.500 --> 00:21:32.340
it'll report on how it's interacted with the API endpoint.


00:21:32.340 --> 00:21:34.500
So you've got to do like a bunch of processing.


00:21:34.500 --> 00:21:35.340
You know, I told you about like,


00:21:35.340 --> 00:21:36.860
I'm going to transform a bunch of things.


00:21:36.860 --> 00:21:38.020
I use TQDM.


00:21:38.020 --> 00:21:39.020
But if you're going to do that,


00:21:39.020 --> 00:21:41.700
at the end you could ask, well, how did it go?


00:21:41.700 --> 00:21:44.020
And it'll give you this like summary report


00:21:44.020 --> 00:21:46.340
of how much success and how much failure


00:21:46.340 --> 00:21:48.740
and what's the average latency and status codes


00:21:48.740 --> 00:21:50.540
and requests per seconds and all of these.


00:21:50.540 --> 00:21:53.980
And it'll do that in text form or in rich style.


00:21:53.980 --> 00:21:58.980
Final thing, it will record and replay API interactions


00:21:58.980 --> 00:22:01.100
for testing purposes.


00:22:01.100 --> 00:22:03.340
So if you want, you know, if it's really tricky


00:22:03.340 --> 00:22:05.540
to mock out some complex interaction,


00:22:05.540 --> 00:22:08.840
you'd say, well, I want it to be as exactly close to real


00:22:08.840 --> 00:22:13.760
as possible, you could just one time do those API calls and then replay them


00:22:13.760 --> 00:22:18.960
back, put it either record mode or replay mode and the backend that stores that


00:22:18.960 --> 00:22:23.960
could be a SQL light database or a MongoDB database that's automatically


00:22:23.960 --> 00:22:27.840
integrated and you just give it that and say, when I talk to the server, remember


00:22:27.840 --> 00:22:29.600
what you did and store it over here.


00:22:29.600 --> 00:22:31.200
And then you can play that back for testing.


00:22:31.200 --> 00:22:31.800
Oh, wow.


00:22:31.800 --> 00:22:32.280
Cool.


00:22:32.280 --> 00:22:33.280
So yeah.


00:22:33.280 --> 00:22:36.600
Anyway, people can check this out and see what they think, but.


00:22:36.920 --> 00:22:44.320
I think it almost looks like it was a system pretty much designed, well, one of the obvious


00:22:44.320 --> 00:22:51.760
use cases is to build a custom thing to test your application because there's a bunch of


00:22:51.760 --> 00:22:54.800
utilities there to really interrogate something.


00:22:54.800 --> 00:22:59.120
Absolutely, yeah, you get that report and you get the replay, record replayability,


00:22:59.120 --> 00:23:02.400
the logging, yeah, a lot of that stuff is there.


00:23:02.400 --> 00:23:03.400
It's pretty neat.


00:23:03.400 --> 00:23:04.400
Yeah, cool.


00:23:04.400 --> 00:23:05.400
Nice.


00:23:05.400 --> 00:23:06.800
- Nice. - Well, that's it for that one.


00:23:06.800 --> 00:23:09.400
Yeah, I guess that's all of our items, isn't it?


00:23:09.400 --> 00:23:10.400
- It is.


00:23:10.400 --> 00:23:14.000
And for extras, I don't have any extras.


00:23:14.000 --> 00:23:15.480
Do you have any extras?


00:23:15.480 --> 00:23:17.680
- I do, I just have one.


00:23:17.680 --> 00:23:18.560
And then we'll get to our joke.


00:23:18.560 --> 00:23:20.920
So for the extras, do you know what, Brian?


00:23:20.920 --> 00:23:22.600
Look at this, look at, here it is.


00:23:22.600 --> 00:23:24.320
- You got in the App Store, yay.


00:23:24.320 --> 00:23:26.160
- I got in the iOS App Store too.


00:23:26.160 --> 00:23:28.840
So finally, finally, finally,


00:23:28.840 --> 00:23:32.480
the Talk Python mobile apps are out on all of the App Stores.


00:23:32.480 --> 00:23:34.080
So go get them.


00:23:34.080 --> 00:23:38.000
Just talkpython.fm/apps, I believe will take you there.


00:23:38.000 --> 00:23:39.600
Redirect over to the training site.


00:23:39.600 --> 00:23:43.480
But yeah, they're available on iPhone,


00:23:43.480 --> 00:23:48.640
Android tablets, iPad, Android tablets as well.


00:23:48.640 --> 00:23:49.840
Maybe more coming.


00:23:49.840 --> 00:23:53.120
We might have even desktop apps coming pretty soon,


00:23:53.120 --> 00:23:55.160
depending on how successful we are with all this.


00:23:55.160 --> 00:23:57.760
But yeah, so this is out.


00:23:57.760 --> 00:23:58.720
People can check it out.


00:23:58.720 --> 00:24:02.460
And as a way to celebrate finally getting this done,


00:24:02.460 --> 00:24:04.060
after four months of work.


00:24:04.060 --> 00:24:06.340
First of all, wrote a blog post,


00:24:06.340 --> 00:24:08.300
maybe I'll add it, throw the link in the notes,


00:24:08.300 --> 00:24:09.500
yep, I'll throw it in there for people.


00:24:09.500 --> 00:24:12.060
I talked about some of the design choices


00:24:12.060 --> 00:24:15.700
about how and why we chose things like Flutter


00:24:15.700 --> 00:24:19.260
and so on as the mobile app framework.


00:24:19.260 --> 00:24:21.620
But the one thing for people to know out there,


00:24:21.620 --> 00:24:23.220
and this is a bit timely,


00:24:23.220 --> 00:24:26.380
is if you download and install the mobile app


00:24:26.380 --> 00:24:30.580
before, what day, today is Tuesday, May 16th,


00:24:30.580 --> 00:24:34.020
If you do that before May 22nd,


00:24:34.020 --> 00:24:36.340
so download the app before May 22nd,


00:24:36.340 --> 00:24:39.780
inside the app only, the Up and Running with Git course,


00:24:39.780 --> 00:24:42.780
which is normally $39, is completely free.


00:24:42.780 --> 00:24:45.220
So we'll sort of celebrate the launch of the app.


00:24:45.220 --> 00:24:47.300
So you go in there, go find the courses,


00:24:47.300 --> 00:24:49.340
go to the free section, join the Git course,


00:24:49.340 --> 00:24:51.420
and you'll have it forever, not just for a little time.


00:24:51.420 --> 00:24:53.340
But the only way to get it is to download


00:24:53.340 --> 00:24:54.820
and install the app, which is free,


00:24:54.820 --> 00:24:58.460
and then go put the Git course into your account.


00:24:58.460 --> 00:24:59.700
>> I just downloaded it.


00:24:59.700 --> 00:25:01.380
I'm opening it right now.


00:25:01.380 --> 00:25:02.780
>> Awesome.


00:25:02.780 --> 00:25:08.500
>> One of the things I'm excited about this is because when I'm doing a course,


00:25:08.500 --> 00:25:10.100
not giving a course,


00:25:10.100 --> 00:25:11.480
but learning from one,


00:25:11.480 --> 00:25:13.780
I do like to have it on my computer screen,


00:25:13.780 --> 00:25:16.260
but there's oftentimes where I've got time to kill.


00:25:16.260 --> 00:25:19.940
I'd like to listen to some of the conversation and listen to it.


00:25:19.940 --> 00:25:22.600
Yeah, I'm going to look at some of the stuff on my phone,


00:25:22.600 --> 00:25:25.540
but a lot of it is following along,


00:25:25.540 --> 00:25:27.540
but I'm listening and then I'll go through


00:25:27.540 --> 00:25:30.460
and watch the same stuff later on the computer


00:25:30.460 --> 00:25:31.600
and walk through it.


00:25:31.600 --> 00:25:34.900
So I really like this addition of having a mobile app.


00:25:34.900 --> 00:25:36.100
This is pretty cool.


00:25:36.100 --> 00:25:37.060
- Thanks, thanks so much, Brian.


00:25:37.060 --> 00:25:39.180
Yeah, there's a couple things why you might need it.


00:25:39.180 --> 00:25:40.620
People are like, well, why are you just watching the web?


00:25:40.620 --> 00:25:42.060
Like, especially on iPhone,


00:25:42.060 --> 00:25:45.340
you can't get rid of that navigation section


00:25:45.340 --> 00:25:47.800
around the browser.


00:25:47.800 --> 00:25:49.980
So you end up watching like a postage stamp size thing,


00:25:49.980 --> 00:25:51.560
which is not ideal.


00:25:51.560 --> 00:25:55.300
It won't auto-advance because ad companies are evil


00:25:55.300 --> 00:25:58.660
and iOS blocked them from playing ads all the time,


00:25:58.660 --> 00:26:02.660
which gobbles up everyone else as well, unfortunately.


00:26:02.660 --> 00:26:04.420
>> Okay. On your app,


00:26:04.420 --> 00:26:07.620
it'll just jump to the next thing then?


00:26:07.620 --> 00:26:10.500
>> Yeah. It just keeps playing smoothly as you would imagine.


00:26:10.500 --> 00:26:12.620
Then the other thing that's important is you can


00:26:12.620 --> 00:26:15.900
download content offline like if you're going on a trip,


00:26:15.900 --> 00:26:17.100
or on the train,


00:26:17.100 --> 00:26:21.620
or some people even use it if they work at government institutions


00:26:21.620 --> 00:26:24.680
that have high levels of security,


00:26:24.680 --> 00:26:27.200
and they want to like research labs and stuff.


00:26:27.200 --> 00:26:30.240
If they want to be able to take the course at their work,


00:26:30.240 --> 00:26:32.120
but their work is super restrictive


00:26:32.120 --> 00:26:34.280
about what they can interact with,


00:26:34.280 --> 00:26:37.320
you could download a whole course onto your tablet,


00:26:37.320 --> 00:26:39.840
set it next to you and watch it at your work.


00:26:39.840 --> 00:26:43.120
Yeah, so those are the reasons why it exists.


00:26:43.120 --> 00:26:45.680
But anyway, long time coming, super happy about it.


00:26:45.680 --> 00:26:46.600
That's my extra.


00:26:46.600 --> 00:26:47.440
- Cool.


00:26:47.440 --> 00:26:49.800
- Download it, get the Git course.


00:26:49.800 --> 00:26:51.920
- All right, well, how about a joke?


00:26:51.920 --> 00:26:53.640
- Ah, this is a good one.


00:26:53.640 --> 00:26:56.560
So you may wonder, you may have friends who are like,


00:26:56.560 --> 00:26:59.700
"Brian, you do Python, you do C++,


00:26:59.700 --> 00:27:01.080
"you wrote a book on pytest,


00:27:01.080 --> 00:27:04.920
"like how did you get so good at this?"


00:27:04.920 --> 00:27:06.840
So this kind of riffs on that theme.


00:27:06.840 --> 00:27:10.360
There's two developers here.


00:27:10.360 --> 00:27:14.000
First one, she says, "How do you code so well?"


00:27:14.000 --> 00:27:17.140
The expert developer, she says, "Practice."


00:27:17.140 --> 00:27:19.040
And the first person didn't really hear,


00:27:19.040 --> 00:27:22.260
like, "It must be an innate gift, a gift from God.


00:27:22.260 --> 00:27:23.660
It's practice.


00:27:23.660 --> 00:27:26.580
I'll never understand how some people are so talented.


00:27:26.580 --> 00:27:28.860
A mystery, practice.


00:27:28.860 --> 00:27:30.100
- Yeah.


00:27:30.100 --> 00:27:30.940
- Right?


00:27:30.940 --> 00:27:31.760
- Yeah.


00:27:31.760 --> 00:27:32.600
- What do you think?


00:27:32.600 --> 00:27:33.440
- Well, this is great.


00:27:33.440 --> 00:27:35.660
And it applies to so many things, of course.


00:27:35.660 --> 00:27:39.180
But one of my daughters is dealing with this right now.


00:27:39.180 --> 00:27:43.900
She's been doing for about a year, doing aerial silks,


00:27:43.900 --> 00:27:46.780
aerial arts, and she's working on it


00:27:46.780 --> 00:27:49.020
and exercising and stuff every day.


00:27:49.020 --> 00:27:52.740
And it was really hard at first,


00:27:52.740 --> 00:27:53.820
and now she's pretty good.


00:27:53.820 --> 00:27:55.620
And so many people have said,


00:27:55.620 --> 00:27:57.500
oh, you're just naturally talented at that.


00:27:57.500 --> 00:28:00.700
She's like, it makes her mad because it's not natural.


00:28:00.700 --> 00:28:02.940
I've had to work at it.


00:28:02.940 --> 00:28:05.460
Coding as well, so obviously.


00:28:05.460 --> 00:28:06.300
- Obviously, yeah.


00:28:06.300 --> 00:28:09.660
This is, it's not just coding, but coding certainly.


00:28:09.660 --> 00:28:13.220
- Yeah, podcasting, writing blog posts,


00:28:13.220 --> 00:28:15.220
everything around what we do.


00:28:15.220 --> 00:28:16.060
Practice.


00:28:16.060 --> 00:28:17.300
- Yeah, absolutely, practice.


00:28:17.300 --> 00:28:18.140
- Nice.


00:28:18.140 --> 00:28:19.940
- That's the way they end it, so good job.


00:28:19.940 --> 00:28:22.340
- Yeah, absolutely, very, very uplifting.


00:28:22.340 --> 00:28:24.660
We'll end it on a growth mindset today, Brian.


00:28:24.660 --> 00:28:25.660
Thanks for being here.


00:28:25.660 --> 00:28:26.500
- Thank you.


00:28:26.500 --> 00:28:27.780
- And thanks everyone for coming.

