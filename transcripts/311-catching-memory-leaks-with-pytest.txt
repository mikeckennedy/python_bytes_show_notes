00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 311, recorded November 22nd, 2022.

00:00:10 And I am Brian Okken.

00:00:11 I'm Michael Kennedy.

00:00:12 And I'm Murilo Cunha.

00:00:13 So welcome, Murilo.

00:00:15 So tell us a little bit about yourself before we jump into the topics.

00:00:18 TLDR is, I'm a machine learning engineer at a data and AI consultancy company called Data Roots.

00:00:24 I'm from Brazil, but I actually live in Belgium.

00:00:26 And I guess that's it.

00:00:29 Thanks for having me.

00:00:30 Thanks for showing up.

00:00:31 It's great to have you here.

00:00:32 Well, Michael, why don't you kick us off with the first topic?

00:00:35 All right, let's kick it off.

00:00:36 I've got some fun stuff.

00:00:38 Let's see what Murilo thinks about this.

00:00:40 This is, it's a little bit mathy, what I got going on here.

00:00:44 That is not the right screen.

00:00:45 How about that screen?

00:00:46 So this comes in from one of the big friends of the show, Brian Skin.

00:00:51 And he sent me a tweet and it just says, what?

00:00:54 At Python Bytes.

00:00:55 And it's a quote tweet from somebody here saying, holy, latexify is the sexiest thing I've ever seen.

00:01:04 And look at this.

00:01:06 So when I studied a ton of math and the symbols of mathematics are really important and they communicate stuff like really, really quickly.

00:01:16 You can scan over and you see the symbol for the real numbers or you can see the symbol for subset or, you know, infinite sum.

00:01:23 And you're like, I know what that means.

00:01:25 When you translate that into Python or into computer code, it usually becomes something kind of gnarly looking.

00:01:31 Right.

00:01:32 So the example here on this tweet has a function called solve and it's solving the quadratic equation.

00:01:38 I guess just for one variation of the root, not the plus minus, but that's fine.

00:01:42 It just says like negative B plus math dot square root B star star two.

00:01:48 It's like symbol soup, right?

00:01:49 Yeah.

00:01:50 So this latexify thing, latexify, latex is the language of expressing those symbols the way mathematicians would have written them in, you know, the 16th century or whatever.

00:02:01 Like the fancy flowing sort of, you know, sum symbols and integral symbols and whatnot.

00:02:07 And so what this does is you just put a decorator onto that Python function.

00:02:11 You say latexify dot with latex, latex.

00:02:14 When you show that function in a notebook, it shows the math, formal mathematics of it.

00:02:22 Wow.

00:02:22 Like, like there's one that was doing, I said, the quadratic equation.

00:02:26 Another one that says if x is zero, return one else, return math sine of x divided by x.

00:02:32 And then the symbols is like this sort of like branching equation, you know, like what you would write that in latex conceptually.

00:02:38 What do you think?

00:02:39 Oh, wow.

00:02:40 Is that insane?

00:02:41 This is great.

00:02:42 But it just changes the ripple of the function, I guess, right?

00:02:45 Like if you call the function, it's all fine.

00:02:47 Yeah, exactly.

00:02:47 It doesn't change the function at all.

00:02:49 It changes the wrapper or the stir.

00:02:51 So if you do this outside of a notebook, what it prints out, let me see if I can somehow communicate this back.

00:02:59 So if you print it out, what it returns, do I have it here?

00:03:03 No.

00:03:03 Yes.

00:03:04 There.

00:03:05 No, that's not it.

00:03:06 Sorry, I don't have it.

00:03:07 What it prints out is the latex escape codes.

00:03:09 So it'll say like backslash frack of, you know, like it's a weird, I don't know how to write latex.

00:03:16 I did a little bit when I was studying math and then I said, that's something I never need to remember.

00:03:20 And, you know, shot it out of my brain.

00:03:24 Never again.

00:03:25 Yeah.

00:03:25 Like, why do I need to know this?

00:03:26 I don't need to know this.

00:03:28 Yeah.

00:03:28 So the wrapper is just the latex escape codes and then the notebooks see that and then they render it as latex.

00:03:36 That's pretty cool.

00:03:37 And then, but one of the nice things about this then is you can, you might have like the math that you're trying to convert to code and then you can like check your answer.

00:03:46 You can just see, did I get it right in code?

00:03:50 So, yeah.

00:03:51 It's pretty cool.

00:03:51 That's really interesting.

00:03:53 Yeah.

00:03:53 Could you round trip it, right?

00:03:54 Yeah.

00:03:54 I'm assuming people are doing this on their own code.

00:03:57 So they're, you know, I guess you could grab somebody else's.

00:03:59 It's the question about the inverse.

00:04:00 Yeah.

00:04:01 Right.

00:04:01 It's like, hey, if I have the math symbols, could I turn this into a Python function?

00:04:06 I mean, I don't see why I can't go both ways.

00:04:08 Sure.

00:04:08 Yeah.

00:04:09 True.

00:04:09 But I still think it would be easier to write the Python function than the latex code for rendering it.

00:04:14 Yeah.

00:04:14 That's true.

00:04:15 I think it's a pretty niche use case.

00:04:17 Well, you know, I'm sure.

00:04:18 Well, I'm sure someone's going to find a cool use case for it too, right?

00:04:22 Yeah.

00:04:22 This is pretty interesting.

00:04:24 We've got a couple of live comments.

00:04:27 Madison.

00:04:28 Hey, Madison.

00:04:28 Out in the audience.

00:04:29 Madison's been on the show before.

00:04:31 I'm blown away by how libraries like this are able to make math approachable.

00:04:35 I wonder how this could be used with auto-generated documentation.

00:04:37 Very cool.

00:04:38 I agree.

00:04:39 And Henry also says, I'm guessing it's working on the bytecode like Numba, but compiling it into a human language.

00:04:45 Yeah.

00:04:45 Compiling it into the latex escape codes.

00:04:48 Which is not human.

00:04:49 Yeah.

00:04:50 Which is the opposite of unilateral, but it is text, right?

00:04:53 And, you know, related to this, just.

00:04:55 Oh, yeah.

00:04:57 Henry.

00:04:58 Sempai.

00:04:58 Okay.

00:04:59 It's using inspect, get source and parsing the AST.

00:05:02 Yeah.

00:05:03 Perfect.

00:05:03 Another thing that's amazing, if people check out like the Sempai stuff,

00:05:07 it does some really, really interesting things.

00:05:11 Like if you go, say, to like calculus, you take a limit here.

00:05:15 It'll do similar outputs as well, right?

00:05:18 So you could put in this, and it'll actually express it as symbolic math, and it won't lose

00:05:24 precision because it solves it symbolically.

00:05:26 And you can say like, you know, back to this equation.

00:05:28 So that's kind of related.

00:05:30 But this just says, given any arbitrary Python function, not written in the symbolic form,

00:05:36 just turn it into a latex, which is pretty amazing.

00:05:38 So anyway, thank you, Brian Skin, for pointing that out.

00:05:41 That is pretty neat.

00:05:42 One final comment.

00:05:43 I could not get it to install on my Apple Silicon Mac.

00:05:47 Maybe that detail matters.

00:05:48 But I couldn't get it to pip install.

00:05:50 Out of PyPI, I had to pip install the Git plus the GitHub URL, and then it would install.

00:05:57 I don't know why, but if people want to play with it, that might be necessary.

00:06:00 Okay.

00:06:00 Yeah.

00:06:00 Over to you, Brian.

00:06:02 All right.

00:06:03 Well, while we're talking about math, I'm often working in the measurement world,

00:06:08 and where we care about prefixes a lot.

00:06:11 And a lot of people do, with big numbers or small numbers.

00:06:14 And this was actually suggested to us by Avram.

00:06:19 And I think he either works on this, or it's his project.

00:06:23 It's a project called Prefixed.

00:06:25 And what this does is it's just, it's a class, it provides a class called Float, capital F,

00:06:32 that is a, derives from the built-in float.

00:06:37 And it supports scientific decimal, or scientific and, yeah, IEC, which I'm not familiar with,

00:06:45 prefixes.

00:06:46 So things like scientific, like K and S and things like that.

00:06:52 If you go look at all the metric prefixes, you've got, like, there's some new ones, but

00:06:57 N, K, Mega, Giga, things like that.

00:07:00 And it just, so it adds these onto when you print them.

00:07:05 So it acts just like a normal float.

00:07:06 Most of the time, you can, you know, use it in math equations and everything.

00:07:11 The interesting thing is, if it is used in math, a math equation, the result will be

00:07:17 one of these prefix float types.

00:07:21 But then the nice thing about it is when you convert it to a string, it includes the little

00:07:26 prefix thing or the suffix or whatever, the little micro or K or M or something like that.

00:07:33 So I think this is actually super helpful.

00:07:36 I'm going to use this right away because I, you know, I use a lot of, like, big and small

00:07:41 numbers and reporting out just the huge thing or just the float is sometimes horrible to compare

00:07:48 with.

00:07:48 So this is, this is pretty cool.

00:07:50 It's very clever.

00:07:51 I love how, how simple the idea is.

00:07:54 So you can just F string one of these floats and say colon 0.2 H and that'll convert it to

00:07:59 its, and the H tells it to be either, you know, Killa or Micro or Mega or, you know, whatever

00:08:05 suffix is needed.

00:08:07 That's cool.

00:08:08 And then there's a, the byte example where they said, well, I'm going to, I'm going to

00:08:12 use the capital B for bytes, but that's after the formatting of the number.

00:08:17 And then the K comes in from the float thing.

00:08:20 So that's, that's pretty cool.

00:08:22 one of the other things that he passed along is there's some new prefixes.

00:08:26 So this is, this is apparently new, new scientific prefixes over the last, for

00:08:33 the new first ones, new, new ones for the last 30 years, apparently.

00:08:37 So we have, 10 to the 21st, which is Zeta and 10 to the 24th, which is Yada.

00:08:44 And, then negative is Zepto and Yocto.

00:08:47 So these are fun.

00:08:48 Maybe why, why now?

00:08:51 Why they, they decided to like need to, they have more money now and they need to come up

00:08:56 with new, prefixes or exactly.

00:08:59 I'm not sure why we need new prefixes, but our microscopes can now see smaller things.

00:09:04 We don't have words for this, that things are this small, like, yeah.

00:09:08 But, national debt, maybe.

00:09:11 yeah, very possible.

00:09:15 But, but also Avram notes that prefixed does handle these new ones.

00:09:20 So cool.

00:09:21 Good job.

00:09:21 Cool.

00:09:22 One thing, Python too, you can put the underscore, right?

00:09:24 To like, if you put underscore on the thousands, that also, that's something that makes it easier,

00:09:29 I think, to, to, to read the numbers too.

00:09:31 That's what I was using.

00:09:32 Yeah.

00:09:32 Like the digit grouping.

00:09:33 Yeah.

00:09:33 Yeah.

00:09:34 Do you do that a lot?

00:09:34 Not a lot.

00:09:35 I, but like some, whenever I can, I do, I think it makes it easier to, to distinguish

00:09:41 how big the number is, I guess.

00:09:42 I always forget to, I just, I know it's there, but I never use it.

00:09:46 but I think usually it's like when I'm counting the zeros with my finger on the screen,

00:09:50 I'm like, no, no, maybe I'll just put a underscore there.

00:09:52 It makes it makes everyone's life easier.

00:09:54 Yeah.

00:09:54 Yeah.

00:09:55 I've really started doing that a lot the last couple of years, but before then I didn't.

00:09:59 Cool.

00:09:59 Well, what is next?

00:10:00 Merlot, what you got for us?

00:10:02 I think that's me.

00:10:03 I think that's me.

00:10:04 Yeah.

00:10:04 Yeah.

00:10:05 DBT.

00:10:07 Have you ever heard?

00:10:07 Of course you got to accept, you got to accept some cookies.

00:10:09 Hold on.

00:10:09 Oh, my bad.

00:10:11 My bad.

00:10:11 Just kidding.

00:10:12 No, I'm just teasing.

00:10:14 These cookie things drive me crazy, man.

00:10:16 I don't know.

00:10:16 Yeah.

00:10:17 Yeah.

00:10:17 Yeah.

00:10:17 Yeah.

00:10:17 Yeah.

00:10:17 I think it's like, it's crazy how like now that it's popping up everywhere and then you

00:10:21 see like the data, the gathering all the time and this and this and it's like, okay.

00:10:24 Yeah.

00:10:24 Yeah.

00:10:25 but maybe DBT, have you ever heard of DBT?

00:10:27 Is this something?

00:10:28 Cause in the data world in my, my field, it's super popular, but, I don't know if it's

00:10:32 a bubble as well.

00:10:33 I've never heard of it.

00:10:34 Michael never heard.

00:10:35 Yeah.

00:10:35 I think I've, I think I've heard of it, but I couldn't tell you what it does.

00:10:38 So I was basically in the same spot.

00:10:40 Yeah.

00:10:40 Tell us about it.

00:10:42 No, it's a, it's a really cool tool.

00:10:43 It's open source as well.

00:10:44 They have their cloud, option, I guess.

00:10:46 Right.

00:10:46 So you can pay and they host it.

00:10:47 maybe a disclaimer as well that I never, I always see it and I always want to use it,

00:10:52 but I haven't found the use case.

00:10:54 So I don't have first-hand experience here.

00:10:56 but basically the way I would describe is that they add best practices around SQL projects.

00:11:01 So why am I, why am I mentioning this on Python bites?

00:11:04 it's built with Python.

00:11:06 Yay.

00:11:06 and the other thing too is that, yeah, they actually mix Jinja with SQL.

00:11:12 Right.

00:11:12 So you can actually do four loops.

00:11:14 You can do stuff like that.

00:11:15 So you don't have to repeat every time and just change the variable.

00:11:17 you, they also have these like reference macros and stuff.

00:11:20 So you can actually say, okay, this comes from that table that is on that file.

00:11:24 And this comes from this.

00:11:24 So you can actually chain a lot of these dependencies, right?

00:11:27 Like there's a lot of projects that you have this ETL stuff, right?

00:11:30 So you just have to basically transform it each step.

00:11:32 And, with dbt, they actually keep track of what depends on what, and you can say, oh, I want the freshest data here and you execute everything that it needs to be executed there.

00:11:40 wow.

00:11:41 Yeah.

00:11:42 So it's super cool.

00:11:43 They actually support a lot of like data platforms here.

00:11:45 Right.

00:11:45 So you see like big query data breaks, snowflake, all these things as well.

00:11:49 another thing that they also more things they do.

00:11:53 They even have some data validation stuff, which in my field, it's a big thing too, you know, like maybe have an ID column that needs to be unique, cannot be null.

00:12:00 And you want to make sure that that always happens.

00:12:02 And if it doesn't happen, you want to be flagged.

00:12:04 Right.

00:12:04 So that's super cool.

00:12:05 what else?

00:12:07 Ah, you also have some built-in documentation.

00:12:09 So if you, once you have the dependencies, you can say, oh, show me the DAG, you know, show me where the data comes from and what depends on what.

00:12:15 So that's also super cool.

00:12:17 And recently actually, they actually started supporting, so like an SQL file kind of corresponds to a model, right?

00:12:23 Cookies again.

00:12:24 and, so they have SQL models.

00:12:27 So that's the one, but they also started supporting Python models.

00:12:30 Right.

00:12:30 So this is very tight to data.

00:12:32 So now you can actually mix and match, right?

00:12:34 You can say this step, this transformation is in SQL, but this one is actually in Python.

00:12:38 Right.

00:12:38 So the way they don't run anything on the machine, they actually send it to the cloud.

00:12:42 So snowflake has snow park, which is Python on its own snowflake.

00:12:46 big query has spark and Databricks as well.

00:12:49 Right.

00:12:50 So basically you can mix and match this transformation.

00:12:52 See, this transformation is there, but everything is like in a nice put in one place.

00:12:56 And because it's on Git as well, you can have CICD.

00:12:58 I think also you mentioned, I think it was you, Brian, that mentioned SQL fluff and SQL fluff actually came from a DBT project as well.

00:13:05 So, and it's all in Python.

00:13:07 So super cool.

00:13:07 Wow.

00:13:08 That's really neat.

00:13:09 So what do the Python models look like?

00:13:11 Are they straight Python classes or are they Pydantic or?

00:13:15 I have, I watched, maybe I'm a bit lazy because I just watched the video and they were, they were showing here.

00:13:20 how, how it works.

00:13:21 Cause it's also doing a comparison, right?

00:13:23 maybe this is, can this, no, this doesn't work.

00:13:25 Does it?

00:13:25 Yeah.

00:13:25 It works.

00:13:26 no, this works.

00:13:27 Yeah.

00:13:27 It was wrong.

00:13:28 Okay.

00:13:28 this is, but the quality is horrible.

00:13:30 But in a nutshell, you have this basically, yeah.

00:13:33 You define a function.

00:13:34 Yeah.

00:13:35 You define a function that has a DBT and a session and then you create a reference.

00:13:38 So reference basically a table, right?

00:13:39 And you can say, and then from that point on, you can say two Pandas and then you can just basically use the Pandas API to transform that.

00:13:45 Right.

00:13:45 So there's still some caveats, right?

00:13:47 Cause Panda is not super performant depending on how much data you have and whatnot.

00:13:50 So sometimes you probably still want to stick to, the SQL stuff, but then it opens a lot of possibilities there too.

00:13:56 Right.

00:13:57 So even stuff like deploying machine learning models on the SQL infrastructure and everything.

00:14:01 So, yeah.

00:14:01 So it's, kind of the same old, same old story.

00:14:05 You know, even if you're working with an ORM, sometimes you don't want to bring all that data back to make some minor change.

00:14:11 And then you would just do a sort of an update statement instead of pull back 10,000 models, change something and call save 10,000 times.

00:14:17 Right.

00:14:17 Like it's probably that kind of trade off, but it's really cool.

00:14:20 That you can bring it back into Python this way.

00:14:22 what are you using it for in your work?

00:14:25 Or like, what are you interested in using it for?

00:14:26 Well, I think we have a lot of these like ETL pipeline stuff, right?

00:14:30 A lot of these, we have some data here and then we want to like basically clean it up and make sure it's all uniform and put in a dashboard, calculate some KPIs and whatnot.

00:14:38 Right.

00:14:38 And so business people can see, are we doing better?

00:14:40 Are we making more money or not?

00:14:42 Kind of.

00:14:42 and like a lot of the times it's just SQL, right?

00:14:45 It's also more accessible for a lot of people.

00:14:47 So we stick to SQL.

00:14:48 but there are also limitations, right?

00:14:50 But before what I've seen is, people just kind of go in the UI and just execute stuff ad hoc.

00:14:55 Right.

00:14:56 So no versioning, nothing.

00:14:57 And I think this kind of puts everything in one place.

00:14:59 You can even add CICD because the CLI tool and everything, and just kind of make sure that everything goes to that versioned method.

00:15:04 Let's say, I mean, and again, yeah, if you need something more, more fancy, right.

00:15:08 Then you can throw some Python stuff in there, but usually we try to avoid it, to be honest.

00:15:12 I can imagine.

00:15:13 Oh, let's see here.

00:15:14 hold on.

00:15:15 Yeah.

00:15:16 The models, the way you express the code, it's like, it's really nice looking for SQL, which is surprising.

00:15:22 Right.

00:15:23 This, this code you write, like with customers as select these fields from this, this table.

00:15:28 And yeah.

00:15:29 And they have a, they also have like the different macros and like people can write different macros.

00:15:33 So like the describe function in Pandas, someone can just have written that and you can import that.

00:15:37 And like, it's, it's really nice to share like all these things as well.

00:15:40 So super cool.

00:15:41 Really, really eager to, to give it a try.

00:15:43 To be honest, I've been just like trying to scratch that.

00:15:45 Like scratch that.

00:15:46 Where's the next, where's the next project that we get to use this on?

00:15:49 Indeed, indeed, indeed.

00:15:50 Yeah.

00:15:51 All right.

00:15:51 Brian, anything you want to add before we jump over to, talking about our sponsor real quick?

00:15:56 Yeah, let's, no, let's talk about our sponsor.

00:15:58 All right.

00:15:59 So, today's episode of Python Bytes is brought to you by Microsoft for Startups Founders Hub.

00:16:05 So Microsoft for Startups set out to understand what startups need to be successful and created a digital platform to help you overcome those challenges.

00:16:13 And they came up with Microsoft for Startups Founders Hub.

00:16:15 The Founders Hub provides all founders at any stage with free resources to help solve startup challenges.

00:16:21 The platform provides access to expert guidance, skilled resources, mentorship, and networking connections, technology benefits, and so much more.

00:16:29 Founders Hub is truly open to all.

00:16:31 You don't need to be investor backed, but you can be.

00:16:33 Speed up development with free access to GitHub and the Microsoft Cloud.

00:16:37 You can unlock credits over time.

00:16:39 And there's also discounts and benefits from innovative companies partnering with Founders Hub, such as OpenAI.

00:16:45 You'll have access to mentorship, their mentorship network, which includes hundreds of mentors across a range of disciplines.

00:16:52 Need advice on marketing, fundraising, idea validation?

00:16:55 There's tons of topics, including management and coaching.

00:16:57 You'll be able to book one-on-one meetings with the mentors, many of whom are former founders themselves.

00:17:04 It's no longer about who you know.

00:17:06 Get critical support you need from Microsoft for Startup Founders Hub and make your ideas a reality today.

00:17:13 Join the program by visiting pythonbytes.fm/foundershub 2022.

00:17:18 That link is also in your show notes.

00:17:20 Yep.

00:17:20 Thanks, Microsoft, for keeping us going strong.

00:17:22 All right.

00:17:23 What have I got next?

00:17:25 This one is a chain of really cool things.

00:17:27 So, Roman Wright of Beanie Fame and other things tweeted about this project that Pablo Galindo Salgado has been working on.

00:17:37 So, Pablo was the release manager for Python 3.11.

00:17:40 It was part of the live stream of releasing.

00:17:42 That was all fun.

00:17:43 But he also, I believe, works at Bloomberg, where they work on memory.

00:17:47 And I think we spoke about memory quite a while back, Brian.

00:17:50 It's a memory profiling tool.

00:17:53 Maybe.

00:17:54 Merlo, do you use profilers and that kind of stuff in your world?

00:17:58 No, I haven't used much.

00:18:00 I haven't had a need, to be honest.

00:18:01 Not yet.

00:18:02 I feel like so far, there's no...

00:18:05 Try to keep it simple.

00:18:05 So, a lot of times profilers are about performance.

00:18:10 Like, how fast did this code run?

00:18:11 And if it's slower, should I look at this loop or that loop?

00:18:14 Or, you know, where do you spend your time making it faster?

00:18:15 Because it's really surprising when you look at code.

00:18:18 You're like, this part looks complicated.

00:18:19 So, that must be the slow part.

00:18:20 Like, no, that doesn't matter.

00:18:22 Nothing you do to that will make any difference.

00:18:23 You got to look over here, right?

00:18:24 That kind of stuff.

00:18:25 But memory, as the name would suggest, is more about memory profiling and, like, talking about,

00:18:31 you know, how many of these different things have you allocated and those kinds of things.

00:18:35 What is coming?

00:18:36 Well, first, let me pull up.

00:18:38 We have a pytest plugin, which is super cool.

00:18:42 So, with the pytest plugin, you can do two things now.

00:18:46 You can say pytest --memory tests.

00:18:50 And it'll tell you things like, you can actually set limits on how much memory can be allocated for a certain operation.

00:18:57 And if it exceeds that, it'll say, oh, my gosh, there's something wrong.

00:19:00 This thing is, like, way over using the memory we expected.

00:19:03 So, that's an error.

00:19:04 But it also gives you, like, a cool emoji-filled summary, I guess.

00:19:10 Like, total memory allocated, the number of allocations, a histogram of allocation sizes.

00:19:16 So, like, Python memory has, like, size classes.

00:19:19 We've talked about its block arena, one other term.

00:19:23 I'm forgetting.

00:19:24 Like, that it uses to organize data structures.

00:19:26 And then you can actually get it overall, then, for individual tests.

00:19:30 And so, it'll tell you, like, the different things that were, you know, allocated.

00:19:34 And anyway, it's pretty insane.

00:19:37 Okay.

00:19:37 So, you can get that report.

00:19:39 And then you can also, where's the other one?

00:19:41 I think it's, where was it?

00:19:43 There's a place where you put a decorator, and you just say, on this test, if it exceeds this amount of allocation, that should fail the unit test.

00:19:51 It's just a pytest.mark.memorylimit or something.

00:19:54 I don't think it's a limit or memory limit.

00:19:56 I can't remember exactly what it's called.

00:19:58 You can say, if this test exceeds one megabyte of memory allocation, then that's a failed test, which is pretty cool, right, Brian?

00:20:05 That's really great.

00:20:07 So, yeah, they have a limit memory decorator and a check leaks decorator.

00:20:12 That's the one.

00:20:13 So, the check leaks is the new thing.

00:20:15 And so, what you can do now is you can say pytest.mark.checkleaks as a decorator on your test.

00:20:21 And if there's a memory leak in the code that runs during that, it will let you know.

00:20:25 Wow.

00:20:26 I don't know if anyone else has tried to track down memory leaks.

00:20:28 I would rather track down, like, a multi-threaded race condition than a memory leak.

00:20:33 I don't want anything to do with memory leaks.

00:20:35 This is no fun.

00:20:36 And so, if I can do it with a decorator, let's do it.

00:20:38 Well, and also decorating your test so you're not having to modify your code at all to do this.

00:20:44 I mean, the code under test, you're modifying your test code, if at all.

00:20:47 Or it looks like it gives you some benefits even with no modification.

00:20:51 It's pretty cool.

00:20:52 Maybe, pardon my ignorance here, but when would I worry about memory leaks in Python?

00:20:57 I think, so imagine you're writing pandas, right?

00:21:02 And you've written a bunch of C code that's getting imported.

00:21:06 And you know there's a memory leak in there somewhere.

00:21:09 And it's just like, okay, well, I don't really know how to do it.

00:21:14 But then it's more like the C part is the bandage.

00:21:18 You can also have memory leaks in the sense that you expected there to be no more things

00:21:23 allocated after the function was called.

00:21:25 But you could have signed it to a global variable or you could have, you know, stored it, held

00:21:30 on to a reference in some way that you weren't expecting.

00:21:33 So, it's not a leak in the super traditional sense, but it could build up if you're doing

00:21:38 something wrong in Python.

00:21:39 But certainly outside of that.

00:21:40 So, I think this is pretty cool.

00:21:42 Really, any long-running service is going to have, you're going to be concerned about

00:21:47 it.

00:21:47 There's a lot of Python applications that are short-running and it just cleans up after

00:21:52 itself when it's done.

00:21:52 So, there's cases, long-running services, also things like maybe you care about, things

00:21:58 that are using large amounts of data and need all of the data that they can get a hold of

00:22:04 without wasting any.

00:22:05 That's important as well.

00:22:08 Makes sense.

00:22:09 I'm also wondering.

00:22:10 If you're right at the limit.

00:22:11 Yeah.

00:22:12 No, sorry.

00:22:12 Go ahead.

00:22:12 Go ahead.

00:22:12 Yeah.

00:22:13 If you're right at the limit of like, I'm using 15 and a half gigs and I don't have more

00:22:18 than that.

00:22:18 So, I need that.

00:22:19 Or like, I just checked the Talk Python training site has been running for seven days and one

00:22:23 hour.

00:22:24 Yeah.

00:22:24 Like, if it had a memory leak, you know, it's even if it's, you know, 100 kilobyte here

00:22:28 and there, like it could turn out to be like a big hassle.

00:22:30 Okay.

00:22:31 Cool.

00:22:31 I'm wondering if you could use this for edge device stuff.

00:22:35 If we're going to limit the memory because we know the edge device won't have that much.

00:22:39 That's actually a really good point.

00:22:42 Oh, yeah.

00:22:42 Because if you're on one of these like CircuitPython little boards, they've got like 256k of RAM.

00:22:48 And that's very different than 16 gigs, isn't it?

00:22:51 Yeah.

00:22:52 Yeah.

00:22:52 Right.

00:22:53 So, you could test your application on a larger computer and limit how much memory

00:22:58 you give it.

00:22:58 Right.

00:22:59 Yeah.

00:23:00 I think you would want to do that with the limit rather than the check leaks, but still.

00:23:03 Yeah.

00:23:04 So, it's the same.

00:23:04 Yeah.

00:23:05 Cool.

00:23:06 Yeah.

00:23:06 Awesome.

00:23:06 All right.

00:23:07 Let's see.

00:23:07 A couple of comments from the audience.

00:23:09 Gareth out there.

00:23:10 Hey, Gareth.

00:23:10 Says, I ended up writing Docker containers that swapped out every couple hours to solve it.

00:23:14 I mean, that's actually what a lot of people do.

00:23:16 They're like, you know what?

00:23:16 If it runs more than 12 hours, it's a problem.

00:23:18 So, we just tell it to recycle itself.

00:23:21 And then Madison says, this is so cool.

00:23:23 I need memory profiling all the time with some of the data I do work with regularly.

00:23:26 So, people are digging it.

00:23:27 Cool.

00:23:28 Yeah.

00:23:28 Very cool.

00:23:28 So, thank you, Roman.

00:23:30 I know you didn't send that to us on purpose, but you shared it with us anyway.

00:23:33 Thanks.

00:23:34 Nice.

00:23:34 Over to you, Brian.

00:23:35 Okay.

00:23:36 Before I get on to the next topic, I want to point out that Henry Schreiner, I'm going

00:23:41 to paraphrase him by saying, Brian, you dork.

00:23:44 You didn't even read the article.

00:23:45 Yes, you're right, Henry.

00:23:46 Sorry.

00:23:48 So, the new prefixes, I was showing the previous new ones in 91 when they added yocto and zepto.

00:23:56 These are not the new ones.

00:23:57 The new ones are down here with ronacueta, ronto, and quecto.

00:24:04 Yes.

00:24:05 The reason why those sounded familiar is because they've been around.

00:24:09 These new ones, they're the new ones.

00:24:11 Okay.

00:24:11 So, thanks, Henry, for clarifying that.

00:24:13 But on to the next topic is Will McCoogan says, please steal my source code.

00:24:20 So, he wrote an article.

00:24:23 Will McCoogan wrote an article, stealing open source code from Textual.

00:24:27 And he says, I would like to talk about a serious issue with free and open source software.

00:24:33 Stealing code.

00:24:35 You wouldn't steal a car, would you?

00:24:37 And then, actually, he has this funny video that he embeds about how digital piracy really

00:24:43 is like stealing.

00:24:44 And it's sort of a funny video.

00:24:47 But the comment is real that, like, you need to, you can steal code from open source projects

00:24:53 as long as you can.

00:24:55 So, please read the MIT license or read the license to make sure that you can.

00:25:01 And in a lot of cases, you can.

00:25:03 So, like, I'm going to give an example that I use a lot is I'll think of something that I

00:25:09 want to do.

00:25:10 Like, I'm interacting with a library and maybe I don't quite get how to do that with the

00:25:14 documentation.

00:25:15 I could search GitHub for projects that use that library also as an example.

00:25:19 And so, that's a way to look at other source code of how to interact with a project that

00:25:25 maybe doesn't have the greatest documentation.

00:25:27 You can see how it's done.

00:25:28 I've honestly never thought to do that.

00:25:31 That's a great idea.

00:25:32 I'll go look at the tests and stuff.

00:25:34 I'm like, these tests suck.

00:25:35 There's not a single one that shows me, like, this use case that I'm looking for.

00:25:39 This is brilliant.

00:25:41 Some of the, yeah, I do that a lot with pytest plugins because I look at how other plugins

00:25:47 are testing their stuff.

00:25:48 And I'm like, oh, how do they do it?

00:25:50 So, the warning there is he's not advocating for piracy.

00:25:55 Open source code gives you explicit permission to use it.

00:25:59 And if you're actually just copying the whole thing, you probably should reference it and

00:26:04 use the same license.

00:26:05 Or if you're copying large chunks.

00:26:07 But the MIT license, for example, says it's substantial copying.

00:26:11 So, a little bit of copying is fine.

00:26:13 And Will says, Textual has some cool stuff in it that you might want to look at.

00:26:18 So, he's got a loop.

00:26:19 He points out some things you might want to steal.

00:26:22 The loop first and last.

00:26:23 So, he's got a loop iterator that he's got a couple versions of it that will not only

00:26:29 iterate through things, but it'll give you, it'll note which one's the first and the last.

00:26:35 So, if you need to do something cool on something different on the first and the last one, do that.

00:26:40 He tweeted recently or tooted or whatever about the LRU cache as well.

00:26:46 So, the Python's got a built-in LRU cache, but everything's global.

00:26:49 So, you can only kind of clear.

00:26:51 There's limits on how you can interact with it.

00:26:53 So, he has a more flexible LRU cache.

00:26:55 He's got a color class that looks pretty cool that you can convert to different color representations.

00:27:01 That's pretty neat.

00:27:02 And then, you know, he's been working on a ton of geometry stuff, 2D geometry.

00:27:06 So, he's like, you might want to use this for whatever 2D geometry you're using.

00:27:10 And so, here's there.

00:27:11 So, kind of cool, a reminder that open source, one of the benefits of open source is you get to see the source and learn from people.

00:27:18 I like it.

00:27:19 I love your idea.

00:27:20 You've never done that.

00:27:22 I'm like, it might dance.

00:27:24 I just can't figure this out.

00:27:25 Oh, how are other people using it?

00:27:27 So, I do that a lot.

00:27:28 I just get frustrated and go into a new library.

00:27:30 This one sucks.

00:27:31 I can't do this.

00:27:31 I'm going to find another one.

00:27:32 It's not good enough.

00:27:33 Merlo, are you an open source thief?

00:27:35 Do you do this kind of stuff?

00:27:36 I have to admit, yes.

00:27:38 Yes, I am.

00:27:38 Stack Overflow thief.

00:27:40 Open source thief is just, especially in the early, early days, right?

00:27:44 But I think with rich stuff too, it's very inviting for you to steal code.

00:27:49 Because even on the rich package, right?

00:27:51 Like if you do Python-M rich table or whatever, you always show some really nice stuff on the terminal, right?

00:27:58 And I was like, how does he do that?

00:28:00 Or like, I think for every component, he had a little demo that you can just run.

00:28:04 And it's very tempting.

00:28:05 Even if he didn't want people to steal stuff from him, I feel like you have a hard time just keeping the thieves away, you know?

00:28:11 Yeah.

00:28:11 Yeah.

00:28:12 Yeah, very cool.

00:28:13 And funny too.

00:28:14 I like it.

00:28:15 Good job.

00:28:15 Good job, Will.

00:28:16 Where are we at now?

00:28:17 All right.

00:28:18 Off to Merlo's final item.

00:28:21 Yes.

00:28:22 This one I had not heard of either.

00:28:23 And it looks pretty interesting.

00:28:24 Yeah.

00:28:25 I mean, it's a, I think it kind of, it's one of the things that I saw.

00:28:28 I was like, yeah, this makes so much sense.

00:28:29 Why?

00:28:30 How come I never, I didn't think of this before.

00:28:31 But this is Shed.

00:28:33 I'm a man.

00:28:34 This is a podcast, right?

00:28:34 So maybe Shed is, it basically, I think it's related to like bike shedding, shed your legacy code, right?

00:28:42 So it's like a superset of black, right?

00:28:45 They call it black plus plus here.

00:28:47 So they say here, a maximally opinionated auto formatting tool, right?

00:28:51 So it's all about configuration over, convention over configuration, which is also something that I can subscribe to.

00:28:57 They have no configuration options, but basically it's a bundling of a lot of tools, right?

00:29:03 So they have black here, but they also have eyesort and with the profile black, so it doesn't clash.

00:29:09 They also have pi upgrade, which I think you guys mentioned a couple of times, right?

00:29:12 Yeah, we did.

00:29:13 And autoflake as well.

00:29:14 Autoflake, I didn't know actually before.

00:29:16 But basically it removes unused imports and unused variables from your Python code.

00:29:23 So it's kind of like, yeah, that's all I wanted.

00:29:25 I wish I had this last week.

00:29:27 There you go.

00:29:29 Yeah.

00:29:29 But yeah, it's a one-stop shop.

00:29:32 And even do like a blackened docs, right?

00:29:34 So if you have doc strings or markdown or everything, you will take that.

00:29:37 It will black format that for you.

00:29:38 So I was like, yeah, this is what I wanted.

00:29:40 Okay.

00:29:41 Hold on.

00:29:41 Blackened docs.

00:29:42 This is new to me too.

00:29:44 All right.

00:29:44 Yeah.

00:29:45 Let's see.

00:29:45 So this is black on Python blocks, sample code blocks.

00:29:49 Yes.

00:29:50 So if you have rich structured text, markdown, even doc strings, it will format that for you.

00:29:56 Oh, like you like blackening your readme, for instance.

00:29:58 Yes.

00:30:00 Yes.

00:30:00 Yes.

00:30:01 Oh, okay.

00:30:02 This is good.

00:30:03 Indeed.

00:30:04 So I have some stuff to talk about at the very end, just a little bit about blogging and writing

00:30:09 and some platforms and stuff.

00:30:11 And that's all in Markdown.

00:30:12 Like I could run this against all of my code samples on my blog to basically auto format all

00:30:19 code in the blog.

00:30:19 That would be cool.

00:30:20 Yeah.

00:30:21 Yes.

00:30:22 Exciting.

00:30:22 The next time I write a book, I'm totally going to use that.

00:30:25 Yeah.

00:30:25 Or if you're doing a book.

00:30:26 Yeah.

00:30:26 I mean, absolutely.

00:30:28 So I literally just like yesterday, the day before I was cleaning up some code.

00:30:34 I finally got, you know, I kind of, I don't do it clean the whole time.

00:30:37 I get it to work.

00:30:38 And then I like, you know, then I look at what I did stupid.

00:30:41 And there's, there might be some imports laying around that I thought I needed because you add

00:30:46 an import and then you take that code out, but you sometimes forget to take the import

00:30:50 out.

00:30:50 So I ran black on everything, of course.

00:30:52 And then, and then I ran flake eight and I'm getting errors.

00:30:55 And I'm like, shoot, why didn't black just take those out?

00:30:58 So now I've got shed and I take those out.

00:31:00 It does it all.

00:31:01 Right.

00:31:01 Like it's, it's great.

00:31:02 Yeah.

00:31:02 Because maybe it's the same, right?

00:31:03 Like your flake eight is like, ah, yeah.

00:31:05 The unused variable.

00:31:05 Ah, okay.

00:31:06 They have to go there one by one, you know, it's like, it feels like there should be a

00:31:09 nicer way.

00:31:10 Right.

00:31:10 Yeah.

00:31:11 I mean, it's good.

00:31:12 You have to pay attention to that because your unused variable might be a typo or something.

00:31:16 You might think you're using it.

00:31:18 That's true.

00:31:20 Yeah.

00:31:20 Or it's like a global variable module supposed to share with something else.

00:31:24 And it's a library, but in general, I mean, you could probably put like a hash, you know,

00:31:28 QA or something on it.

00:31:29 Well, I mean, yeah.

00:31:29 And also you're, you're, you're testing.

00:31:32 So your test will catch it if you delete too much.

00:31:34 So.

00:31:34 Yeah.

00:31:36 All right.

00:31:37 Well, really, really good one.

00:31:38 Take your code out to the shed and whip it into shape behind the shed.

00:31:41 That's it.

00:31:43 All right.

00:31:44 All right.

00:31:44 Well, Brian, what else we got?

00:31:46 Extras?

00:31:46 I got some extras.

00:31:47 You got some extras.

00:31:48 Who should go first?

00:31:50 You go first.

00:31:51 Okay.

00:31:51 Well, the thing that I've been working on is, is by test check.

00:31:56 And I finally got, and I've been talking about this for like a month because I've been slowly

00:32:00 pulling this into shape.

00:32:02 It's almost a complete, not really a rewrite, but I moved everything around and the code's

00:32:07 a lot easier to read.

00:32:08 And so it makes me happy.

00:32:09 And I also changed the API.

00:32:11 So I wanted to mention to everybody that you can either use, so you can either use from

00:32:18 pytest check, import check to get this check object, or you can stick the check object as

00:32:24 a fixture.

00:32:24 And either way, you get access to everything in the library.

00:32:27 That's the only thing you have to do.

00:32:28 And for people unfamiliar, pytest check is a, is a library that allows you to have multiple

00:32:33 failures per test.

00:32:34 You know, normally the recommendation is try to fail on one thing, but sometimes you

00:32:40 need lots of data.

00:32:40 And I just threw in a little example that uses both.

00:32:43 So if like it's using HTTPX to grab, grab the status code.

00:32:47 And as long as the status code is 200, then I can check a whole bunch of stuff.

00:32:52 I can check to make sure the redirect and encoding is right.

00:32:55 And check for some, some stuff inside the, I mean, you, you, these could be multiple tests,

00:33:00 but if it really is, you're checking multiple parts of things.

00:33:03 And for scientific work that I'm in measurement work that I do, I'm often checking like a tons

00:33:08 of aspects of a waveform.

00:33:09 And it's really just making sure the waveforms right.

00:33:12 And that rightness is multiple checks.

00:33:15 So use that.

00:33:16 Anyway, I didn't intend to break anybody, but I did break Brian's skin.

00:33:21 So Brian came up at the beginning of the article, but he tagged me in a GitHub issue on his project.

00:33:27 And I looked at it and I'm like, oh, I didn't intend to break that.

00:33:30 So I fixed it this morning.

00:33:31 So hopefully if, if anybody gets broken by this, I was not intending to break anybody.

00:33:37 Just let me know and I'll try to fix it.

00:33:39 That looks great.

00:33:40 How about you?

00:33:41 Merlo, I know you have some as well.

00:33:42 I'll let you go as well.

00:33:43 Sorry.

00:33:44 Maybe.

00:33:44 Yeah, I feel like I should have opened that.

00:33:49 I didn't have the link up here.

00:33:50 But talking about breaking stuff, Flake 8 is not on GitLab anymore.

00:33:56 And I actually didn't have issues with that because with pre-commit, right?

00:34:00 You have to specify the repo.

00:34:01 I already was on GitHub, but I actually heard from people, some people that they heard a lot

00:34:06 of noise that Flake 8 is not on GitLab anymore.

00:34:08 And then there was also this video from Anthony that is maintaining, right?

00:34:11 Pre-commit and Flake 8.

00:34:12 He was explaining a bit because why, what was the motivation from going from GitLab to

00:34:16 GitHub?

00:34:17 And yeah, like what's relatable is that like sometimes you break people's code, but it's

00:34:22 like, it's not any intention, right?

00:34:24 But sometimes people can get very heated over these things.

00:34:26 So yeah, just maybe public service announcement, you know, change your Git repo to GitHub now

00:34:31 for if you're using Flake 8 as a pre-commit.

00:34:33 You also had Mastodon.py, right?

00:34:36 Yes, yes, yes.

00:34:37 That I did.

00:34:38 I just, sorry, I flipped the order because I thought it was, it was, it was a segue there.

00:34:42 Yeah, yeah, yeah.

00:34:43 I wish I knew about this like a week ago or so.

00:34:47 That would have been awesome.

00:34:48 You covered Toot, I think, right?

00:34:50 Yes, we covered Toot.

00:34:51 That's right.

00:34:52 Yeah, yeah.

00:34:52 So this is, to be very honest, I wasn't the one that found this, was my boss.

00:34:58 So shout out to Bart if you're listening right now.

00:35:00 But this is basically just a wrapper around the Mastodon API, right?

00:35:04 So you don't have to do requests.

00:35:05 You can usually have like a nice client library there to do all these things.

00:35:07 So if you want to play around, create some bots, you know, whatever, then yeah, there's

00:35:12 a nice convenient package now for you to do it.

00:35:15 Wow.

00:35:15 This is really cool.

00:35:16 And it has, you know what?

00:35:16 Documentations that say what functions it has.

00:35:19 I love it.

00:35:19 Documentation.

00:35:21 Just read the code.

00:35:23 It doesn't have to be much.

00:35:24 Like the seven or eight lines of code that are in the readme, like gives you a really good

00:35:28 boost.

00:35:28 But it lets you register your app, which is one of the things if you go to the website,

00:35:32 it'll show you which apps are registered for your access keys on Mastodon, but it won't

00:35:36 let you create one on the website.

00:35:38 So here's like a simple create app and just give it a kind of your instance name and what

00:35:42 file to save the access tokens over to and boom, you're good to go.

00:35:46 Have you guys already done stuff with the Mastodon or?

00:35:49 Yeah.

00:35:49 I, you know, on the stream deck, the thing that controls the stream, I already wrote that

00:35:53 thing where I, when I pushed the one button, it, it sends out the message automatically that

00:35:58 this live stream is starting.

00:35:59 And yeah, it uses, that uses a little bit of toot and mostly just the straight API with

00:36:04 HTTPX.

00:36:05 But if I'd known about this, you know, I already used it.

00:36:07 Now we know.

00:36:08 Yeah, I know.

00:36:09 Thanks for sharing that.

00:36:10 Anything else you want to share before we move on?

00:36:12 Yes.

00:36:12 So there are a couple more things, but this one, this is the, the, the, the, the,

00:36:16 Brazilian enemy that couldn't resist the world cup started.

00:36:19 I don't know if, are you guys soccer fans or not at all?

00:36:22 So we've a fun soccer team.

00:36:24 Here we go.

00:36:25 See, I go see with the kids and stuff in town.

00:36:27 Yeah.

00:36:27 So the, so I'm also in machine learning.

00:36:30 So a lot of data and like this time of the year, you know, there's a lot of like, oh yeah,

00:36:34 the AI models are predicting this.

00:36:35 This one is one from Oxford.

00:36:37 So I just wanted to give a quick shout out here.

00:36:39 So they, they have a video on YouTube as well, which is cool.

00:36:42 They explain the math.

00:36:43 And I will go on a limb here and say they use Python because they even mentioned Metplotlib

00:36:46 and whatnot.

00:36:47 But this is basically just a big excuse to say that they predict Brazil to win.

00:36:50 So, you know, if this doesn't happen, it's all rigged.

00:36:53 This, the math suggests, the math supports this.

00:36:56 So Brazil must win this World Cup and anything that is not there, I'm going to be extremely

00:37:00 disappointed.

00:37:00 This is really cool.

00:37:03 People are always looking for like realistic examples to learn and explore libraries and

00:37:09 tools.

00:37:09 And this, you know, if you're into soccer and you care about the World Cup, this is great.

00:37:12 Yeah.

00:37:13 I think if you, yeah, there's, there's people, people are very creative.

00:37:16 I feel like there's a lot of uses for it.

00:37:18 Well, I'm sure this will happen because there's absolutely no corruption in soccer.

00:37:21 Yeah.

00:37:22 Yeah.

00:37:22 For sure.

00:37:22 Yeah.

00:37:25 Not at all.

00:37:25 Not at all.

00:37:26 Cool.

00:37:27 Should I just keep going or you want to take over?

00:37:30 If you got more items?

00:37:32 Yeah.

00:37:32 Keep going.

00:37:32 Take us down the list.

00:37:34 I have two more.

00:37:35 Sorry.

00:37:36 I know you said I could have more than two.

00:37:37 So you can just wait.

00:37:39 That's what this whole section is about.

00:37:40 One.

00:37:42 So for me as a data scientist or machine learning engineer, we use a lot of notebooks.

00:37:46 Right.

00:37:46 And I think they have their place in data science, but there are some tools that don't, don't

00:37:50 play very nicely with it.

00:37:51 Right.

00:37:51 And I think in Git diffs or PRs, they don't, they don't play so nicely.

00:37:55 Right.

00:37:55 So this is a, I think it's public preview.

00:37:57 I want to say, but I haven't actually seen this, but now GitHub is going to start supporting

00:38:02 notebook diffs.

00:38:03 So if you have a pull request, they're going to have a nicer rendering of the notebook here

00:38:07 and you can actually see what the differences are.

00:38:09 And I think before there was a tool called review and be that you could add to GitHub.

00:38:13 But yeah, now they're just going to start supporting it.

00:38:17 So I haven't seen how it looks, but I'm pretty excited about this too.

00:38:20 One less headache for me.

00:38:21 Yeah.

00:38:21 That's excellent.

00:38:22 Because before the diff would just be like, here's the diff of the JSON file.

00:38:24 You're like, no, that's not what I want to say.

00:38:27 And also JSON is just JSON, like just key value.

00:38:29 So if you just change the order of some keys, it's just like, yeah, you have a lot of changes,

00:38:33 but it's not, you don't care.

00:38:34 Yeah.

00:38:34 Oh, this looks really useful.

00:38:36 Yeah.

00:38:36 And maybe one last, if that's okay.

00:38:39 Yeah.

00:38:40 Just pull this here.

00:38:41 This is Lancer.

00:38:42 So it's another CLI tool.

00:38:43 I talked about linting before, right?

00:38:45 So this is another kind of linting.

00:38:47 And I say kind of, because so, you know, some definition of linting or cleanup.

00:38:55 Yeah.

00:38:55 So this is like black, almost like black, but it's the opposite.

00:38:59 So instead of making your code look nice, it would just make it like a hideous, but working mess.

00:39:04 Right?

00:39:04 So these are some of the features.

00:39:06 It turns all your comments to pit bull lyrics or something safe for work, depending if you want.

00:39:10 It takes all your variable names and mix into like animal sounds and horribly look similar

00:39:16 looking characters.

00:39:17 So like bark underscore bark underscore zero, oh, oh, zero, oh.

00:39:21 It adds white spaces.

00:39:23 It adds completely irrelevant comments.

00:39:26 And the code still runs after these improvements.

00:39:29 So here's an example.

00:39:30 You have to hear some comments and everything.

00:39:34 So before, like nicely formatted.

00:39:36 And then afterwards, you see some comments like, bada bim, bada boom.

00:39:40 You know, there's nothing like Miami heat, some alpha characters in your variable name.

00:39:45 Pretty good stuff.

00:39:45 Pretty good stuff.

00:39:46 Again, I must say I haven't used this, but this is a tool that I'm not as excited to use.

00:39:52 I mean, there's all, there's always times that you need to send out your code to different places and you would rather share it less than more.

00:40:00 You know, like if you're thinking of like, if you make a desktop app and you got to send out the code for that or whatever, and you would want to obfuscate it.

00:40:08 You want to make it harder for people to just pick it up and like do something.

00:40:11 You could hit it with this.

00:40:13 They'd be like, yeah, no, no, we're just, no, we're just not doing that.

00:40:15 So my favorite one, my favorite ones on the screen is the, adding obvious comments, like, setting the value of some, like, that wasn't in the original.

00:40:28 And it's just funny that, I mean, that that's actually not gibberish.

00:40:31 It's just useless.

00:40:32 it's, it's really good.

00:40:37 The, the, comments out in the live stream are really great, as well.

00:40:42 People are enjoying it.

00:40:43 One of them is it's great for Twitter employees.

00:40:45 You can maximize your lines of code for review as it's coming up.

00:40:48 Then you just print it out and you take a sidebar.

00:40:51 Like if somebody says print out my code so we can review it, they're not, they're not, equipped to review the code that you may have written.

00:40:58 Like if the word print involves in is valuing code, like, no.

00:41:01 All right.

00:41:01 Just, I don't think so.

00:41:02 So, leave that where that is, but you could, you could put this on top of like, yeah, I'm kind of funky when I write codes.

00:41:09 It's a little different.

00:41:09 Let's get used to let's yeah.

00:41:11 I just, it's a farm.

00:41:13 It's a code farm.

00:41:14 Yeah.

00:41:14 Oink, oink, oink.

00:41:15 Yeah.

00:41:16 You can have two sets of books.

00:41:18 kind of, you got your real repo and then you port use this to, to put it into the actual one that you submit.

00:41:25 and you're like, I understand it.

00:41:27 I don't know what your problem is.

00:41:28 It works.

00:41:29 It works on my machine.

00:41:30 I don't know.

00:41:32 I kind of want to run this on a large code base.

00:41:35 I like something really complicated.

00:41:38 Squash all the commits.

00:41:40 Put force push.

00:41:41 Like, like textual.

00:41:43 Release it as textual.

00:41:45 Oink, oink.

00:41:45 Or something.

00:41:48 Yes.

00:41:48 Yes.

00:41:48 I love it.

00:41:49 Cool.

00:41:50 All right.

00:41:50 Well, this was, this was a good, a good find.

00:41:52 Awesome.

00:41:52 Thanks.

00:41:53 All right.

00:41:53 I'll, I'll, I'll make mine quick here.

00:41:54 So a new YouTube video.

00:41:56 I talked about how you can install the Mastodon web app on your iPad as a native app, as well

00:42:02 as on your desktop.

00:42:03 So, if you're doing that kind of stuff, not there.

00:42:06 Basically they just released Mastodon four a couple of days ago and all the apps don't have

00:42:12 features like edit and some of the other features that are there because they're like months behind.

00:42:17 And so if you install the web app as an app, then guess what?

00:42:20 It looks like an app.

00:42:21 It acts like an app, but it has like zero latency.

00:42:24 So as soon as something is released on the website, you get it, which is pretty cool.

00:42:27 So people can check that out.

00:42:28 I saw Madison in the audience, sent over a call for proposals or calling all Pythonistas,

00:42:36 if you will, for Pi Cascades.

00:42:38 So Pi Cascades is back in person this year in Vancouver, BC.

00:42:41 It goes from Vancouver to Seattle to Portland and cycles through that, there.

00:42:46 But so this year it's going to be in, Vancouver.

00:42:49 So if you want to go up there and, talk, be part of the conference, good conference.

00:42:53 So call for proposals are open there.

00:42:55 Yeah.

00:42:56 But they're not open for very much longer.

00:42:57 So, jump on that.

00:42:59 Yeah.

00:42:59 I don't remember what the date is, but it is, it closes a Wednesday 30th.

00:43:04 So what is that?

00:43:04 Yeah.

00:43:05 Well, Wednesday.

00:43:05 Yeah.

00:43:06 Next Wednesday.

00:43:06 Yeah.

00:43:07 Eight days.

00:43:07 And Madison and I feel an audience.

00:43:10 Thank you.

00:43:10 It's put in person this time.

00:43:11 We, and we really value the first time speakers and atypical talks.

00:43:15 So get out there and put yourself out there and, and get into public speaking.

00:43:18 It's not a huge conference, but it's, you know, it's, it's big enough.

00:43:21 A couple hundred people, three, 400 people, fun time.

00:43:24 this is just really quick and fun.

00:43:26 You know, if you're on a Mac, you're not as likely to get viruses sent your way that would

00:43:32 actually be able to do something like 90% of viruses are written for windows.

00:43:35 But what's a really interesting fact.

00:43:37 I just, if you do have a Mac, it turns out 50% of all macOS malware comes from one single

00:43:42 app.

00:43:43 Can you believe that?

00:43:44 What is it?

00:43:44 Safari?

00:43:45 No, it's, Mac keeper.

00:43:48 So if, if you have Mac keeper, it like organizes your files and it'll like clean up your, your

00:43:55 junky cache and stuff, but apparently it has to take over so much permissions and it is like,

00:44:00 it can get, I guess, plug in there.

00:44:02 I don't know what it does, but people can like plug into this.

00:44:05 And make it to all sorts of horrible stuff.

00:44:07 So 50% of all malware is written for Mac keeper.

00:44:10 So if you have Mac keeper, maybe unhabit.

00:44:13 I recently, as a Sunday, launched a new website that I hope will bring me back to writing some

00:44:23 more.

00:44:23 We'll see about how that goes.

00:44:25 But here I'm, I'm trying a new philosophy on, on blogging, Brian.

00:44:29 I don't know how you feel about it, but I have a blog been doing it for a long time,

00:44:32 but like I looked the last article I wrote was like 2020.

00:44:35 I'm like, Oh, that's not so good.

00:44:36 And the reason is I would always try to write like 2000 word posts that are really, and I'm

00:44:42 like, but I could post to Twitter and mass it on all day.

00:44:45 And it's like, I can just do that.

00:44:46 That's no problem.

00:44:47 I don't like fall behind on Twitter.

00:44:49 That's because these really should be super short posts.

00:44:52 So I have, I've got this new website that I wrote that are just super short, you know,

00:44:57 fits on a page type of articles that people can go and check out.

00:45:01 So, yeah.

00:45:02 Some of the people, some people are promoting like today I learned things, but short, and

00:45:07 why not?

00:45:07 I mean, if you think it, if you think it's going to be a thread, write a blog post.

00:45:12 Exactly.

00:45:13 Yeah.

00:45:13 Yeah.

00:45:14 So cool.

00:45:15 So all of these are written, and this is all based on Hugo, which is a, just learned

00:45:19 about it, but a ridiculously cool static site generator.

00:45:22 Either of you played with Hugo?

00:45:23 I use it.

00:45:24 I love it.

00:45:24 Python.

00:45:25 So python test.com is written on Hugo.

00:45:27 It's ridiculous, right?

00:45:29 No, you haven't?

00:45:31 Sorry.

00:45:31 No, I haven't used it, but I heard of it.

00:45:33 Yeah.

00:45:33 Yeah.

00:45:33 I heard nice things.

00:45:34 Yeah.

00:45:34 So you basically just go to your directory of Markdown files and images.

00:45:38 You just run Hugo dash D server, whatever.

00:45:40 And then as you write, you have your, your web page open in your browser and automatically

00:45:45 sees the Markdown file changes or the CSS changes, regenerates it and refreshes your

00:45:50 browser.

00:45:50 Just so your browser could be just over there.

00:45:52 And it's just periodically as you make changes, it instantly refreshes.

00:45:56 So you don't even go and refresh the page to see how that you just write.

00:45:59 And the browser just watches and, and reloads.

00:46:02 It's cool.

00:46:02 Yeah.

00:46:02 And I, so you got it so that you just, you just push it, push your changes to GitHub or

00:46:07 your, or your repo for, and it just appears on your website.

00:46:10 Exactly.

00:46:11 Yeah, exactly.

00:46:12 So that was my, my next thing is then I set up a Netlify free account with CD and SSL custom

00:46:18 domain name push.

00:46:19 It just has a prod branch that I connected it to.

00:46:21 And when I pushed a prod, boom, it just goes there instantly.

00:46:24 So anyway, people are looking at that.

00:46:25 That is super cool.

00:46:26 Push the prod.

00:46:27 Oh, that's kind of cool.

00:46:29 I just, I just edit on prod.

00:46:30 So I just log in.

00:46:32 I didn't edit over SSH.

00:46:34 Yeah.

00:46:34 Just edit on the server.

00:46:36 The server is the backup.

00:46:37 Anyway, I have stuff on the screen, but there are no more backups.

00:46:39 That's just stuff I pulled up while we're talking.

00:46:41 So no more extras.

00:46:42 I mean, so yeah, fun stuff.

00:46:44 People check out the, the blog website and the video and apply for speaking at PyCascades.

00:46:51 Nice.

00:46:51 Well, I feel like Lancer also was like already really funny, but do you have anything else

00:46:56 funny for us or?

00:46:57 I do.

00:46:58 I do.

00:46:58 Although I somehow forgot to pull them up on the screen.

00:47:00 So give me just a second here.

00:47:01 There's two.

00:47:02 These are really good.

00:47:03 Okay.

00:47:03 These are, these are pretty, pretty epic.

00:47:05 So this one is called, I think Merlo, you'll, you'll really like this one.

00:47:11 Cause it has to do with like algorithms and data science and it's called messing with the

00:47:15 algorithm.

00:47:16 And it shows this, this dude here, don't mind the thing at the bottom.

00:47:19 I have no idea what that's about, but see, there's this guy whose face is blurred out in

00:47:23 UK.

00:47:24 I think I can't remember where this was.

00:47:26 I know Berlin.

00:47:26 And he's got a wagon, like a little red wagon that you pull behind you full of 99 phones.

00:47:33 Now what he did is he got them all running Google maps and left them open and started walking

00:47:39 down the street real slow and notice his neighborhood is now red on the map and he got it.

00:47:44 So it thinks there's a traffic jam and it'll send cars around his neighborhood.

00:47:47 Nice.

00:47:48 I want to get one of these so bad.

00:47:50 And whenever I take my dog for a walk, just walk with the wagon behind me too.

00:47:54 This is no cars.

00:47:55 Yeah.

00:47:56 So good.

00:47:58 Isn't it?

00:47:58 Yeah.

00:47:59 This guy's so ahead of our time.

00:48:01 He's just like, oh, he's so brilliant.

00:48:03 Yeah.

00:48:03 And for his neighbors.

00:48:05 Yeah.

00:48:05 The next one, the next one here is going to take a little bit of a, I just got a, I

00:48:09 got to set the stage.

00:48:10 Give me a second to set, set the history.

00:48:11 Have you heard of, you've heard about these motivational posters.

00:48:13 You go to like a dentist's office and it'll be like an eagle soaring over like a sunset.

00:48:17 Like if you don't spread your wings, you'll never soar as high as you could or something

00:48:21 cheesy like that.

00:48:22 Yeah.

00:48:22 Well, there's this company called, yes, exactly.

00:48:24 There's a company called despair and despair creates these, but like in reverse.

00:48:29 They're called the demotivators.

00:48:31 Yeah.

00:48:31 Nice.

00:48:32 So have you, have you seen these?

00:48:33 No.

00:48:34 Okay.

00:48:34 So here's one like solutions.

00:48:35 And what does it say?

00:48:36 It has like a Rube Goldbergian type looking thing here.

00:48:40 And it says solutions.

00:48:42 This is what happens when the problem solver gets paid by the hour.

00:48:45 It's just, it's just out of control.

00:48:48 Here's one.

00:48:49 What is this?

00:48:49 It's a frog wearing with a snail on its head.

00:48:52 It says collaborate.

00:48:52 So the best of us have to carry the rest of us.

00:48:56 It's just like, they're really.

00:49:00 All right.

00:49:00 So that brings us to, I feel like this is a Brian's skin show a little bit.

00:49:04 This, a tweet that he shared here and it, it has the latexify, latexify thing, but recursion.

00:49:13 And for the recursion, it has that demotivator.

00:49:15 It's a picture that said recursion.

00:49:17 Here we go again.

00:49:17 And then embedded in that is recursion.

00:49:19 Here we go again.

00:49:20 It's like that.

00:49:20 Yeah.

00:49:21 Like your screen share, you see your own screen.

00:49:23 Yeah.

00:49:24 So it's kind of like that poster, but for recursion.

00:49:26 Yeah.

00:49:27 I kind of feel bad that people, people that don't get the recursion joke, because they can't

00:49:31 even look it up because it just, it's redirected.

00:49:34 It just keeps going.

00:49:36 Like the definition is the definition.

00:49:38 That's right.

00:49:38 Nice.

00:49:39 All right.

00:49:39 Well, that's what I got for y'all.

00:49:40 Well, thanks everybody.

00:49:42 And thanks Michael, of course.

00:49:43 And thanks Merlo for coming on the show.

00:49:45 Thanks for having me.

00:49:46 It was great.

00:49:47 Yeah.

00:49:48 You bet.

00:49:48 Bye everyone.

