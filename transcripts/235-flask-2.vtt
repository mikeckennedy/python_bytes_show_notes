
00:00:00.000 --> 00:00:05.400
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.400 --> 00:00:10.300
This is episode 235, recorded May 26, 2021.


00:00:10.300 --> 00:00:11.500
And I'm Brian Aukin.


00:00:11.500 --> 00:00:12.600
I'm Michael Kennedy.


00:00:12.600 --> 00:00:14.100
And I'm Vincent Warmerdam.


00:00:14.100 --> 00:00:17.300
We talked about Vincent a while ago and got his name wrong.


00:00:17.300 --> 00:00:19.400
And he told us a story that was good.


00:00:19.400 --> 00:00:23.600
That we accidentally pronounced his name,


00:00:23.600 --> 00:00:25.800
what, Wonderman.


00:00:25.800 --> 00:00:27.400
Yes.


00:00:27.400 --> 00:00:28.600
So sorry about that.


00:00:28.600 --> 00:00:34.740
That's fine. It's fine. I was bragging to my wife that I was on the podcast and then I was announced as Vincent Wonderman


00:00:34.740 --> 00:00:38.980
And she's still kind of philosophical about the whole thing, but it was a fun introduction. It's the best


00:00:38.980 --> 00:00:45.400
Best best mispronunciation of my life. Let me put it that way. It's it's your alter ego. It's like your spy name


00:00:45.400 --> 00:00:48.140
I'll take it


00:00:48.140 --> 00:00:54.480
Well, thanks for joining us today. My pleasure. So we jump into the first step topic. Sure. Okay


00:00:54.480 --> 00:00:57.180
Well, I think we we covered we mentioned


00:00:58.060 --> 00:01:05.360
last time that flask 2.0 was out and and then Michael had done you had you talked with somebody didn't you I


00:01:05.360 --> 00:01:09.440
Did I had David Lord and also?


00:01:09.440 --> 00:01:16.600
Philip Jones on talk Python you basically announced blast 2o and talk about all their features


00:01:16.600 --> 00:01:22.180
Yeah, and and that was a great episode listen to both those listen. That was great


00:01:22.180 --> 00:01:27.380
The what I wanted to cover was a couple articles or an article of video. So


00:01:27.380 --> 00:01:31.660
First off, we've got a link to the change list.


00:01:31.660 --> 00:01:34.080
Actually, I lost the change list.


00:01:34.080 --> 00:01:37.180
Yeah, there it is. You can read through that,


00:01:37.180 --> 00:01:39.860
and maybe that's exciting to you,


00:01:39.860 --> 00:01:41.940
but I like a couple of other ways.


00:01:41.940 --> 00:01:46.180
There's an article by Patrick Kennedy,


00:01:46.180 --> 00:01:48.460
Async and Flask 2.0.


00:01:48.460 --> 00:01:50.620
I really like this article.


00:01:50.620 --> 00:01:54.580
It goes through describing what it means to have


00:01:54.580 --> 00:01:58.880
async in Flask and how it works with some nice little diagrams.


00:01:58.880 --> 00:02:01.620
>> Diagrams are always nice.


00:02:01.620 --> 00:02:01.980
>> Yeah.


00:02:01.980 --> 00:02:02.500
>> Yeah.


00:02:02.500 --> 00:02:02.740
>> Yes.


00:02:02.740 --> 00:02:03.280
>> Pictures.


00:02:03.280 --> 00:02:04.060
>> Yes.


00:02:04.060 --> 00:02:11.020
>> Then description of the ASGI and why we don't need it yet.


00:02:11.020 --> 00:02:18.420
I'm not sure what the timeline is for Flask if they're going to do it more,


00:02:18.420 --> 00:02:22.900
but there is a discussion of that it's not completely async yet.


00:02:22.900 --> 00:02:25.780
- There was a lot of discussion with David and Philip


00:02:25.780 --> 00:02:29.540
that they may be leaving court to take the place


00:02:29.540 --> 00:02:33.400
of full-on ASGI Flask.


00:02:33.400 --> 00:02:36.000
And the idea being that there's a lot of stuff


00:02:36.000 --> 00:02:37.280
that kind of has to change,


00:02:37.280 --> 00:02:38.660
especially around the extensions,


00:02:38.660 --> 00:02:41.220
and you get nearly that, but not exactly that,


00:02:41.220 --> 00:02:45.740
by using the gevent async stuff that's in regular Flask,


00:02:45.740 --> 00:02:47.400
and that integrates in,


00:02:47.400 --> 00:02:50.660
if you just do an async def method in your regular Flask.


00:02:50.660 --> 00:02:53.660
But if you want true asyncio integration,


00:02:53.660 --> 00:02:56.500
then they basically were saying for the time,


00:02:56.500 --> 00:03:00.140
for the foreseeable future, instead of import Flask


00:03:00.140 --> 00:03:01.580
and go in that, just import court


00:03:01.580 --> 00:03:03.900
and wherever you see Flask, replace it with the word court.


00:03:03.900 --> 00:03:04.740
- Okay.


00:03:04.740 --> 00:03:08.740
But there's other cool stuff other than the async


00:03:08.740 --> 00:03:10.580
that's coming into Flask 2.0.


00:03:10.580 --> 00:03:11.540
So I appreciate it.


00:03:11.540 --> 00:03:16.020
There's also a video from, we don't want it to play,


00:03:16.020 --> 00:03:21.020
from Miguel Grinberg and talking about


00:03:21.020 --> 00:03:23.820
some of the new stuff in Flask.


00:03:23.820 --> 00:03:25.680
And I really like this.


00:03:25.680 --> 00:03:28.460
One of the things that he covers right away


00:03:28.460 --> 00:03:30.360
is the new route decorators.


00:03:30.360 --> 00:03:31.740
And-- - Yeah, those are nice.


00:03:31.740 --> 00:03:34.340
- Might be just a syntax thing, but it's really nice.


00:03:34.340 --> 00:03:36.460
So you used to have to say app route


00:03:36.460 --> 00:03:40.420
and then methods equals post or list the method.


00:03:40.420 --> 00:03:42.660
And now you can just say app post.


00:03:42.660 --> 00:03:43.580
That's nice.


00:03:43.580 --> 00:03:49.180
Then a really clean discussion of the WebSocket support with Flask.


00:03:49.180 --> 00:03:52.100
Then he goes in to talk about the async.


00:03:52.100 --> 00:03:55.380
With that also does a little demo timing it.


00:03:55.380 --> 00:03:59.660
I was actually surprised at how easy it was to set up


00:03:59.660 --> 00:04:05.020
this demo of timing and showing that.


00:04:05.020 --> 00:04:10.900
He showed that you can increase the users and still get,


00:04:10.900 --> 00:04:14.660
it doesn't really increase your response time or how many


00:04:14.660 --> 00:04:19.060
users per request per second doesn't increase


00:04:19.060 --> 00:04:21.620
because of the way that Flask 2.0 is done.


00:04:21.620 --> 00:04:22.660
But it was nice.


00:04:22.660 --> 00:04:25.460
And then he also talked about some of the extensions


00:04:25.460 --> 00:04:29.300
that he wrote to that work with Flask 2.0 and stuff.


00:04:29.300 --> 00:04:31.380
So it was definitely worth the listen.


00:04:31.380 --> 00:04:32.420
- Oh, that's always cool.


00:04:32.420 --> 00:04:34.020
That's always the thing when you get like,


00:04:34.020 --> 00:04:35.260
Flask is like a pretty big project.


00:04:35.260 --> 00:04:37.040
So when there's like a new upgrade of that,


00:04:37.040 --> 00:04:38.820
one of the things that people sometimes forget is like,


00:04:38.820 --> 00:04:41.620
"Oh, well, all the plugins, do they kind of still work?"


00:04:41.620 --> 00:04:43.820
So it's nice if someone does a little bit of the homework there,


00:04:43.820 --> 00:04:45.680
and says, "Well, here's a list of stuff that I've checked,


00:04:45.680 --> 00:04:46.960
and that's at least compatible."


00:04:46.960 --> 00:04:49.420
Well, he's mostly doing some...


00:04:49.420 --> 00:04:53.760
So, for instance, one of the things is around which...


00:04:53.760 --> 00:04:54.960
I don't know, which...


00:04:54.960 --> 00:04:57.420
No, just some of the WebSocket stuff has changed,


00:04:57.420 --> 00:04:58.880
and some of the other things have changed.


00:04:58.880 --> 00:05:04.420
And he has some different shims that he was recommending some things before,


00:05:04.420 --> 00:05:08.060
but now you don't have to swap out some things.


00:05:08.120 --> 00:05:11.640
So like for instance, some of the extensions we're allowing for WebSockets


00:05:11.640 --> 00:05:17.160
required you to swap out the server for a different server and you don't have to anymore.


00:05:17.160 --> 00:05:19.360
- Ah, like that, right. - So this is something that changes.


00:05:19.360 --> 00:05:23.560
- Okay, cool. - Yeah, a couple big other things that come to mind.


00:05:23.560 --> 00:05:27.840
One, they've dropped Python 2 support and even 3.5 and below.


00:05:27.840 --> 00:05:32.040
I mean, we're at this point where 3.5 is like old school legacy, which surprises me.


00:05:32.040 --> 00:05:34.960
- That still feels new. - Yeah, I remember when it came out.


00:05:34.960 --> 00:05:38.680
- Yeah, yeah, well, that was when async and await arrived.


00:05:38.680 --> 00:05:40.860
So that was the big deal there.


00:05:40.860 --> 00:05:42.560
But it doesn't have fstring, so it's--


00:05:42.560 --> 00:05:44.360
- Yeah, that's the killer feature.


00:05:44.360 --> 00:05:48.000
- Yeah, so there's that.


00:05:48.000 --> 00:05:49.960
And they also said that you are not going to need


00:05:49.960 --> 00:05:52.940
to change your deployment infrastructure


00:05:52.940 --> 00:05:54.600
if you want to run async flask.


00:05:54.600 --> 00:05:57.720
You can just push a new version and it's good to go.


00:05:57.720 --> 00:05:59.880
So yeah, a lot of neat things there.


00:05:59.880 --> 00:06:01.040
Very good.


00:06:01.040 --> 00:06:02.200
- Nice.


00:06:02.200 --> 00:06:04.040
What do we got next, Michael?


00:06:04.040 --> 00:06:07.200
Well, what if Python were faster?


00:06:07.200 --> 00:06:08.080
That would be nice.


00:06:08.080 --> 00:06:08.920
- That's always good.


00:06:08.920 --> 00:06:10.680
- We actually talked about Sender.


00:06:10.680 --> 00:06:11.800
Remember Sender?


00:06:11.800 --> 00:06:12.640
- Yeah.


00:06:12.640 --> 00:06:14.520
- From the Facebook world.


00:06:14.520 --> 00:06:17.280
So that's one really interesting thing


00:06:17.280 --> 00:06:19.640
that is happening around Python.


00:06:19.640 --> 00:06:21.120
And there's a lot of cool stuff here,


00:06:21.120 --> 00:06:22.920
but remember, this is not supported.


00:06:22.920 --> 00:06:26.160
It's not meant to be a new runtime.


00:06:26.160 --> 00:06:29.880
Just there to give ideas and motivation and examples


00:06:29.880 --> 00:06:31.480
and basically to run Instagram.


00:06:31.480 --> 00:06:34.560
On the other hand, Mike Driscoll tweeted out,


00:06:34.560 --> 00:06:36.960
"Hey, Python might get a two-time speed up


00:06:36.960 --> 00:06:38.560
"of the next version of Python."


00:06:38.560 --> 00:06:40.780
And you might wanna check out Guido's slides


00:06:40.780 --> 00:06:44.160
from the Python Language Summit at the Virtual PyCon.


00:06:44.160 --> 00:06:45.320
That's exciting, right?


00:06:45.320 --> 00:06:46.160
- Yes.


00:06:46.160 --> 00:06:48.880
I mean, if Guido is saying it,


00:06:48.880 --> 00:06:52.440
then odds of it happening increase, right?


00:06:52.440 --> 00:06:54.040
- Exactly, exactly.


00:06:54.040 --> 00:06:55.760
So a while ago, we actually covered


00:06:55.760 --> 00:06:58.400
what has now become known as the Shannon plan


00:06:59.760 --> 00:07:02.880
for making Python faster a little bit each time


00:07:02.880 --> 00:07:05.400
over five years, over the next four,


00:07:05.400 --> 00:07:07.340
at least I guess four years at that point,


00:07:07.340 --> 00:07:08.740
and how to make that happen.


00:07:08.740 --> 00:07:10.980
So some of these ideas come from there.


00:07:10.980 --> 00:07:13.360
And so here I'm pulling up the slides


00:07:13.360 --> 00:07:16.800
and it says, can we make CPython faster?


00:07:16.800 --> 00:07:17.780
If so, by how much?


00:07:17.780 --> 00:07:19.120
Could it be a factor of two?


00:07:19.120 --> 00:07:20.480
Could it be a factor of 10?


00:07:20.480 --> 00:07:22.960
And do we break people if we do things like this?


00:07:22.960 --> 00:07:26.320
So the Shannon plan, which was posted last October


00:07:26.320 --> 00:07:28.640
and we covered, talks about how do we make it


00:07:28.640 --> 00:07:32.300
1.5 times faster each year, but do that four times.


00:07:32.300 --> 00:07:35.600
And because of compounding performance, I guess,


00:07:35.600 --> 00:07:37.120
that's five times faster.


00:07:37.120 --> 00:07:39.240
All right, so there's that.


00:07:39.240 --> 00:07:41.360
Guido said, "Thank you to the pandemic.


00:07:41.360 --> 00:07:42.240
Thank you to boredom.


00:07:42.240 --> 00:07:44.000
I decided to apply at Microsoft."


00:07:44.000 --> 00:07:45.980
And shocker, they hired him.


00:07:45.980 --> 00:07:50.000
So as part of that, it's kind of just like,


00:07:50.000 --> 00:07:51.360
hey, we think you're awesome.


00:07:51.360 --> 00:07:53.200
Why don't you just pick something to work on


00:07:53.200 --> 00:07:54.360
that will contribute back?


00:07:54.360 --> 00:07:55.400
That'd be really cool.


00:07:55.400 --> 00:07:59.680
So his project at Microsoft is around making Python faster,


00:07:59.680 --> 00:08:00.620
which I think is great.


00:08:00.620 --> 00:08:01.460
- Cool.


00:08:01.460 --> 00:08:03.880
- So yeah, so there's a team of folks,


00:08:03.880 --> 00:08:07.480
Mark Shannon, Eric Snow, and Guido, and possibly others,


00:08:07.480 --> 00:08:10.760
who are working with the core devs at Microsoft


00:08:10.760 --> 00:08:12.440
to make it faster.


00:08:12.440 --> 00:08:13.320
It's really cool.


00:08:13.320 --> 00:08:16.680
Everything will be done on the public GitHub repo.


00:08:16.680 --> 00:08:18.240
There's not like a secret branch


00:08:18.240 --> 00:08:19.840
that will be then dropped on it.


00:08:19.840 --> 00:08:24.840
So it's all just gonna be PRs to github.com/python/cpython,


00:08:25.120 --> 00:08:27.640
whatever the URL is, the public spot.


00:08:27.640 --> 00:08:29.280
And one of the main things they wanna do


00:08:29.280 --> 00:08:31.760
is not break compatibility.


00:08:31.760 --> 00:08:33.760
So that's important.


00:08:33.760 --> 00:08:37.000
Also said, what things could we change?


00:08:37.000 --> 00:08:38.560
Well, you can't change the base object,


00:08:38.560 --> 00:08:42.640
like pi, what is it, pi obj,


00:08:42.640 --> 00:08:44.240
basically the base class, right?


00:08:44.240 --> 00:08:46.720
Pi object pointer, that's it, the pi object class.


00:08:46.720 --> 00:08:49.320
So that thing has to stay the same


00:08:49.320 --> 00:08:51.520
and it really needs to keep reference counting semantics


00:08:51.520 --> 00:08:52.720
'cause so much is built on that.


00:08:52.720 --> 00:08:55.780
but they could change the bytecode that exists,


00:08:55.780 --> 00:08:59.220
the stack frame layout, the compiler, the interpreter,


00:08:59.220 --> 00:09:02.700
maybe make it a JIT compiler to JIT compile the bytecode,


00:09:02.700 --> 00:09:03.980
all of those types of things.


00:09:03.980 --> 00:09:05.340
So that's pretty cool.


00:09:05.340 --> 00:09:07.260
They said, how are we gonna reach two times speed up


00:09:07.260 --> 00:09:11.700
in 3.11, an adaptive specialized bytecode interpreter


00:09:11.700 --> 00:09:14.940
that will be more performant around certain operations,


00:09:14.940 --> 00:09:18.220
optimize frame stacks, faster calls,


00:09:18.220 --> 00:09:20.580
zero overhead exception handling,


00:09:20.580 --> 00:09:23.480
and things like integral internals,


00:09:23.480 --> 00:09:26.000
so maybe treating numbers differently,


00:09:26.000 --> 00:09:27.080
changing out PYC files.


00:09:27.080 --> 00:09:28.400
So there's a lot of stuff going on.


00:09:28.400 --> 00:09:31.960
Also, putting the dunderdick for a class


00:09:31.960 --> 00:09:34.280
always at a certain known location


00:09:34.280 --> 00:09:36.600
'cause anytime you access a field,


00:09:36.600 --> 00:09:38.240
you have to go to the dunderdick,


00:09:38.240 --> 00:09:40.480
get the value out, and then read it.


00:09:40.480 --> 00:09:42.440
And I suspect the first thing that happens is,


00:09:42.440 --> 00:09:45.300
well, go find the dunderdick pointer


00:09:45.300 --> 00:09:47.280
and then go get the element out of it.


00:09:47.280 --> 00:09:49.960
So if every access could just go, nope,


00:09:49.960 --> 00:09:52.960
it's always one certain byte off in memory


00:09:52.960 --> 00:09:54.800
from where the class starts.


00:09:54.800 --> 00:09:57.520
That would save that sort of traversal there.


00:09:57.520 --> 00:09:59.360
So some pretty neat things.


00:09:59.360 --> 00:10:00.400
- Yeah, I'm glad you explained that,


00:10:00.400 --> 00:10:01.760
'cause I read it before and I'm like,


00:10:01.760 --> 00:10:03.260
why would that help at all?


00:10:03.260 --> 00:10:07.120
- I think you can traverse one fewer pointers.


00:10:07.120 --> 00:10:09.360
In general it doesn't matter,


00:10:09.360 --> 00:10:11.480
but literally everything you ever touch,


00:10:11.480 --> 00:10:13.880
ever, if you could cut in half the number of pointers,


00:10:13.880 --> 00:10:15.620
you gotta follow that, be good.


00:10:15.620 --> 00:10:17.240
- Yeah, this is always one of those things


00:10:17.240 --> 00:10:19.040
that always struck me with.


00:10:19.040 --> 00:10:20.600
When you're using Python, you don't think about


00:10:20.600 --> 00:10:21.440
these sorts of things.


00:10:21.440 --> 00:10:23.560
It's when you're doing something in Rust or something,


00:10:23.560 --> 00:10:25.240
then you are confronted with the fact that you really


00:10:25.240 --> 00:10:27.040
have to keep track of where's the pointer pointing


00:10:27.040 --> 00:10:28.240
and memory and all that.


00:10:28.240 --> 00:10:29.520
You take a lot of stuff for granted,


00:10:29.520 --> 00:10:32.120
so it's great that people are still sort of going at it


00:10:32.120 --> 00:10:33.960
and looking for things to improve there.


00:10:33.960 --> 00:10:35.000
- Yeah, absolutely.


00:10:35.000 --> 00:10:37.520
You know, in C, you do the arrow,


00:10:37.520 --> 00:10:39.320
you know, dash greater than sort of thing.


00:10:39.320 --> 00:10:40.160
Every pointer, so you're like,


00:10:40.160 --> 00:10:41.600
"I'm following a pointer, I'm following a pointer."


00:10:41.600 --> 00:10:42.760
Like, you know it, right?


00:10:42.760 --> 00:10:46.120
Here, you just write nice, clean code and magic happens.


00:10:46.120 --> 00:10:47.640
(laughing)


00:10:47.640 --> 00:10:49.440
So let me round this out with who will benefit.


00:10:49.440 --> 00:10:51.920
So who will benefit if you're running CPU intensive


00:10:51.920 --> 00:10:54.520
pure Python code, that will get faster


00:10:54.520 --> 00:10:57.240
because the Python execution should be faster.


00:10:57.240 --> 00:10:59.680
Websites should be faster


00:10:59.680 --> 00:11:02.640
because a lot of that code is running in the Python space.


00:11:02.640 --> 00:11:04.440
And what does that happen to use Python?


00:11:04.440 --> 00:11:06.360
Who will not benefit so much?


00:11:06.360 --> 00:11:08.840
NumPy, TensorFlow, Pandas,


00:11:08.840 --> 00:11:10.320
all the code that's written in C,


00:11:10.320 --> 00:11:11.720
things that are IO bound.


00:11:11.720 --> 00:11:13.480
So if you're waiting on something else,


00:11:13.480 --> 00:11:15.920
speeding up the part that goes to wait,


00:11:15.920 --> 00:11:16.840
doesn't really matter.


00:11:16.840 --> 00:11:19.600
multi-threaded code because of the GIL at this point.


00:11:19.600 --> 00:11:22.520
But Eric Snow is also working on the sub-interpreters


00:11:22.520 --> 00:11:23.960
which may fix that and so on.


00:11:23.960 --> 00:11:26.520
So anyway, pretty neat stuff.


00:11:26.520 --> 00:11:28.000
There's some peps out there.


00:11:28.000 --> 00:11:31.520
I'll link to the tweet by Mike Driscoll


00:11:31.520 --> 00:11:35.320
but that'll take you straight to the GitHub repo


00:11:35.320 --> 00:11:37.400
which has the PDF of the slides


00:11:37.400 --> 00:11:39.280
and people can check that out if they're interested.


00:11:39.280 --> 00:11:41.680
- I like the last bullet for the previous slide


00:11:41.680 --> 00:11:44.080
that thinks people that will not benefit


00:11:44.080 --> 00:11:46.520
code that's algorithmically inefficient.


00:11:46.520 --> 00:11:48.480
Otherwise, if your code already sucks,


00:11:48.480 --> 00:11:49.880
it's not going to be better.


00:11:49.880 --> 00:11:53.040
- It may be better, but it could be better.


00:11:53.040 --> 00:11:54.480
- I was about to say, theoretically,


00:11:54.480 --> 00:11:56.480
it actually would go faster and just...


00:11:56.480 --> 00:11:59.680
- Just not as much better as it could, right?


00:11:59.680 --> 00:12:01.960
- Yeah, it would still be like n to the power of three


00:12:01.960 --> 00:12:02.800
or something like that,


00:12:02.800 --> 00:12:05.800
but it would be faster n to the power of three.


00:12:05.800 --> 00:12:08.640
- Yeah, yeah, it won't change the big O notation,


00:12:08.640 --> 00:12:10.840
but it might make it run quicker on wall time.


00:12:10.840 --> 00:12:11.880
That's right. - Yeah.


00:12:11.880 --> 00:12:15.000
- Yeah, and Christopher Tyler out there in the livestream


00:12:15.000 --> 00:12:17.320
I know I still need to improve my code,


00:12:17.320 --> 00:12:18.840
but this would be great, right?


00:12:18.840 --> 00:12:22.160
I mean, it used to be that we could just wait six months,


00:12:22.160 --> 00:12:24.480
a new CPU would come out that's like twice as fast


00:12:24.480 --> 00:12:25.320
as what we ran on before.


00:12:25.320 --> 00:12:27.040
Like, oh, now it's fast enough, we're good.


00:12:27.040 --> 00:12:28.480
That doesn't happen as much these days.


00:12:28.480 --> 00:12:30.920
So it's cool that the run times are getting faster.


00:12:30.920 --> 00:12:32.480
- Yeah, and I mean, let's be honest,


00:12:32.480 --> 00:12:35.520
Python is also still used for like just lots of script tasks


00:12:35.520 --> 00:12:37.320
like, hey, I just need this thing on the command line


00:12:37.320 --> 00:12:39.560
that does the thing, and I put that in Chrome.


00:12:39.560 --> 00:12:41.280
And like a lot of that will be nice


00:12:41.280 --> 00:12:42.640
if that just gets a little bit faster.


00:12:42.640 --> 00:12:45.280
And it sounds like this will just be right up that alley.


00:12:45.280 --> 00:12:45.840
Yeah.


00:12:45.840 --> 00:12:50.520
And one of the things that I know has been holding certain types of changes


00:12:50.520 --> 00:12:55.500
back has been concerned about slowing down the startup time, because if all


00:12:55.500 --> 00:12:58.400
you want to do is run Python to make a very small thing happen, but like


00:12:58.400 --> 00:13:02.280
there's a big jet overhead and all sorts of stuff, and it takes two seconds


00:13:02.280 --> 00:13:06.360
to start and a nanosecond, microsecond to run, right, they don't want to put


00:13:06.360 --> 00:13:09.480
those kinds of limitations and heal that use case either.


00:13:09.480 --> 00:13:11.240
So yeah, it's, it's good to point that out.


00:13:11.240 --> 00:13:12.620
All right, Vincent, you're up next.


00:13:12.620 --> 00:13:17.320
Cool. Yeah, so I dabble a little bit in fairness algorithms.


00:13:17.320 --> 00:13:19.320
It's a big, important thing.


00:13:19.320 --> 00:13:21.320
So I get a lot of questions from people like,


00:13:21.320 --> 00:13:24.320
"Hey, if I want to do machine learning and fairness, where should I start?"


00:13:24.320 --> 00:13:26.320
And I don't think you should start with algorithms.


00:13:26.320 --> 00:13:30.820
Instead, what you should do is you should go check out this Python project called Deon.


00:13:30.820 --> 00:13:34.120
And the project's really minimal. The main thing that it really just does


00:13:34.120 --> 00:13:36.920
is it gives you a checklist of just stuff to check


00:13:36.920 --> 00:13:41.920
before you do a big data science project at a big company or an enterprise or something like that.


00:13:41.920 --> 00:13:44.200
And they're really sensible things.


00:13:44.200 --> 00:13:46.560
They're sort of grouped together.


00:13:46.560 --> 00:13:49.520
So like, hey, can I check off that I have informed consent


00:13:49.520 --> 00:13:51.080
and collection bias?


00:13:51.080 --> 00:13:52.940
Can I check all of these things off?


00:13:52.940 --> 00:13:53.780
The main themes are--


00:13:53.780 --> 00:13:54.820
- And it's literally a checkbox.


00:13:54.820 --> 00:13:56.380
You can check them off in the page


00:13:56.380 --> 00:13:57.360
to sort of get the feel of it.


00:13:57.360 --> 00:13:58.960
Like, oh yeah, these are good.


00:13:58.960 --> 00:13:59.800
- It goes further.


00:13:59.800 --> 00:14:01.280
So the thing is, this is an actual Python project.


00:14:01.280 --> 00:14:03.680
You can generate this as YAML for your GitHub profile.


00:14:03.680 --> 00:14:04.880
So like for your GitHub project,


00:14:04.880 --> 00:14:06.360
you actually have this checklist


00:14:06.360 --> 00:14:07.880
that has to be checked in Git


00:14:07.880 --> 00:14:09.640
so you know that people signed off on it.


00:14:09.640 --> 00:14:11.040
Like you can actually see the checklist.


00:14:11.040 --> 00:14:14.400
you can even maybe in your Git log see who checked it off.


00:14:14.400 --> 00:14:16.280
But what's really cool is two things.


00:14:16.280 --> 00:14:18.000
Like one, you can generate this checklist.


00:14:18.000 --> 00:14:20.800
Two, you can also customize the checklist.


00:14:20.800 --> 00:14:22.200
So if you are at a specific company


00:14:22.200 --> 00:14:23.480
of certain legal requirements,


00:14:23.480 --> 00:14:24.880
this tool actually kind of makes it easy


00:14:24.880 --> 00:14:26.680
to customize this very specific checklist


00:14:26.680 --> 00:14:27.960
for data projects.


00:14:27.960 --> 00:14:30.080
But the real killer feature, if you ask me,


00:14:30.080 --> 00:14:31.980
like again, all of these comments are good.


00:14:31.980 --> 00:14:35.080
Like, is the data security well done?


00:14:35.080 --> 00:14:37.100
Is the analysis reproducible?


00:14:37.100 --> 00:14:38.200
How do we do deployment?


00:14:38.200 --> 00:14:39.560
Like all of these things that are usually


00:14:39.560 --> 00:14:42.280
like things that go wrong and were obvious in hindsight.


00:14:42.280 --> 00:14:44.000
But the real killer feature is,


00:14:44.000 --> 00:14:46.200
usually you have to convince people to take this serious.


00:14:46.200 --> 00:14:49.500
So what the website offers is like an example list.


00:14:49.500 --> 00:14:52.540
So for every single item that is on this checklist,


00:14:52.540 --> 00:14:53.840
they have one or two examples,


00:14:53.840 --> 00:14:56.200
typically these are like newspaper articles,


00:14:56.200 --> 00:14:59.520
of places where this has actually gone wrong in the past.


00:14:59.520 --> 00:15:02.600
So if you need like a really good argument for your boss,


00:15:02.600 --> 00:15:04.280
like, "Hey, we got to take this serious,"


00:15:04.280 --> 00:15:05.200
there's a newspaper article


00:15:05.200 --> 00:15:06.800
you can just send along as well.


00:15:06.800 --> 00:15:08.680
- That's interesting.


00:15:08.680 --> 00:15:10.480
- Yeah, I like it.


00:15:10.480 --> 00:15:12.280
- Yeah, and the fact you can also generate


00:15:12.280 --> 00:15:13.540
Jupyter Notebooks with this,


00:15:13.540 --> 00:15:15.320
you can customize it a little bit.


00:15:15.320 --> 00:15:16.680
The people that made this,


00:15:16.680 --> 00:15:18.600
the company I think is called Driven Data.


00:15:18.600 --> 00:15:20.760
They host Kaggle competitions for good causes.


00:15:20.760 --> 00:15:22.440
That's sort of a thing that they do there.


00:15:22.440 --> 00:15:24.240
But Deon is just a really cool project.


00:15:24.240 --> 00:15:25.840
I think if more people would just


00:15:25.840 --> 00:15:29.320
start with a sensible checklist and work from there,


00:15:29.320 --> 00:15:32.140
a lot of projects would immediately be better for it.


00:15:32.140 --> 00:15:33.600
- Yeah, this is really cool.


00:15:33.600 --> 00:15:36.760
So things are, can you go to the very bottom of that page?


00:15:36.760 --> 00:15:37.860
There you are.


00:15:37.860 --> 00:15:39.640
- Yeah, sorry, just the checklist.


00:15:39.640 --> 00:15:40.480
- Oh, right, yeah, yeah.


00:15:40.480 --> 00:15:42.720
- So there's some examples like,


00:15:42.720 --> 00:15:45.560
make sure that you've accounted for unintended use.


00:15:45.560 --> 00:15:47.240
Have you taken steps to identify


00:15:47.240 --> 00:15:49.340
and prevent unintended uses and abuse?


00:15:49.340 --> 00:15:53.240
So like, if you created up, find my friends in pictures.


00:15:53.240 --> 00:15:55.440
So like, I wanna find pictures my friends have taken of me.


00:15:55.440 --> 00:15:56.560
You could put it up and it would show you


00:15:56.560 --> 00:15:58.140
all the pictures your friends took,


00:15:58.140 --> 00:16:00.800
but maybe someone else is gonna use that to,


00:16:00.800 --> 00:16:02.320
I don't know, try to fish you.


00:16:02.320 --> 00:16:04.200
Like, here's the picture of us together,


00:16:04.200 --> 00:16:06.560
or I don't know, some weird thing, right?


00:16:06.560 --> 00:16:10.520
use it for like facial recognition and tracking when it had no such intent,


00:16:10.520 --> 00:16:11.360
right? Things like that.


00:16:11.360 --> 00:16:15.920
I think for an, I might be, so it's, it doesn't have this example,


00:16:15.920 --> 00:16:17.760
the best example of unintended use.


00:16:17.760 --> 00:16:21.120
There used to be this geo lookup company where you could give an IP address and


00:16:21.120 --> 00:16:22.600
would give you like an actual address.


00:16:22.600 --> 00:16:25.280
However, sometimes you don't know where the IP address actually is.


00:16:25.280 --> 00:16:28.120
So just give like the center point of like a us state or the country.


00:16:28.120 --> 00:16:32.720
So there used to be this house in the middle of Kansas, I think it was like


00:16:33.720 --> 00:16:39.360
The center point, but the thing is, they will get FBI trucks driving by and doing raids


00:16:39.360 --> 00:16:41.580
and stuff because they thought there were criminals there.


00:16:41.580 --> 00:16:44.720
Because the geo lookup servers would always say, "Ah, the crooks at that IP address, that's


00:16:44.720 --> 00:16:46.200
this latitude longitude place."


00:16:46.200 --> 00:16:47.200
Right, right.


00:16:47.200 --> 00:16:48.200
We had a cyber attack.


00:16:48.200 --> 00:16:49.200
It was from this IP address.


00:16:49.200 --> 00:16:50.200
Yeah.


00:16:50.200 --> 00:16:51.200
"Raid 'em, boys."


00:16:51.200 --> 00:16:58.120
And of course, it was just some poor farmer in the Midwest going, "You know, just the


00:16:58.120 --> 00:16:59.480
geographic center.


00:16:59.480 --> 00:17:00.680
Please stop raiding my farm."


00:17:00.680 --> 00:17:03.680
Yeah, but the story was actually quite serious.


00:17:03.680 --> 00:17:07.680
Like I think the person who lived there could like death threats at some point as well because of the same mistake.


00:17:07.680 --> 00:17:09.680
So it's like this stuff to take serious.


00:17:09.680 --> 00:17:11.680
The one thing that I did like is the solution.


00:17:11.680 --> 00:17:21.680
I think now that instead of it pointing to the house in Kansas, I think it points to like the center of the three big lakes in Michigan.


00:17:21.680 --> 00:17:28.680
I think there's just the middle of a puddle of water basically just to make it obvious to the FBI squads that like, no, it's not a person living there.


00:17:28.680 --> 00:17:32.760
Yeah, but like, darn, these submarines are moved underwater,


00:17:32.760 --> 00:17:36.320
or whatever. But I mean, but that's why you want to have a checklist like this.


00:17:36.320 --> 00:17:39.720
Like you're not going to, the thing with unintended use is you it's unintended.


00:17:39.720 --> 00:17:43.240
So you cannot really imagine it, but you at least should do the exercise.


00:17:43.240 --> 00:17:46.360
And that's what this list does in a very sensible way.


00:17:46.360 --> 00:17:47.440
And more people should just do it.


00:17:47.440 --> 00:17:49.400
And there's interesting examples, too.


00:17:49.400 --> 00:17:50.600
You just have a look.


00:17:50.600 --> 00:17:52.200
And there's also a little community.


00:17:52.200 --> 00:17:55.040
There's a little community around it as well, like collecting these examples.


00:17:55.040 --> 00:17:58.000
And they have like a wiki page with examples of them to make the front page cut.


00:17:58.560 --> 00:18:01.860
So definitely recommend anyone interested in fairness, start here.


00:18:01.860 --> 00:18:05.660
I was curious, you brushed by it fairly quickly,


00:18:05.660 --> 00:18:09.720
fairness analysis? Is that what you do?


00:18:09.720 --> 00:18:13.820
I just don't know what that means.


00:18:13.820 --> 00:18:16.560
Yeah, so, man, this is a long...


00:18:16.560 --> 00:18:18.720
This topic deserves more time than I'll give it,


00:18:18.720 --> 00:18:21.760
but the idea is that you might be able...


00:18:21.760 --> 00:18:24.060
We know that models aren't always fair, right?


00:18:24.060 --> 00:18:27.920
It can be that you have models that, for example,


00:18:27.920 --> 00:18:38.800
The Amazon was a nice example. So they had like a resume parsing algorithm that basically favored men because they hired more men historically. So the algorithm would prefer men.


00:18:38.800 --> 00:18:40.960
Oh, okay. That kind of fairness. Okay.


00:18:40.960 --> 00:18:44.880
Historical, these have been our good employees. Let's find more like them.


00:18:44.880 --> 00:18:53.840
Exactly. And the thing is, you get an algorithm that's unfair. So there are these machine learning techniques and there's this community of researchers that try to look for ways, like,


00:18:53.840 --> 00:18:55.840
"Can we improve the fairness of these systems?"


00:18:55.840 --> 00:18:57.840
So we don't just optimize for accuracy.


00:18:57.840 --> 00:18:59.840
We also say, "Well, we want to make sure


00:18:59.840 --> 00:19:01.840
that subgroups are treated fairly and equally,"


00:19:01.840 --> 00:19:03.840
and stuff like that. So I dabble a little bit in this.


00:19:03.840 --> 00:19:05.840
There's this project I like to collaborate with.


00:19:05.840 --> 00:19:08.840
I open-source a couple of things with these people.


00:19:08.840 --> 00:19:11.840
It's called Fairlearn. The main thing that I really like


00:19:11.840 --> 00:19:13.840
about the package is that it starts by saying


00:19:13.840 --> 00:19:15.840
"Fairness of AI systems is more than just


00:19:15.840 --> 00:19:17.840
running a few lines of code."


00:19:17.840 --> 00:19:19.840
It starts by acknowledging that.


00:19:19.840 --> 00:19:21.840
But they have mitigation techniques and algorithms


00:19:21.840 --> 00:19:27.040
tools to help you measure the unfairness. It's like learn compatible as well, stuff to like,


00:19:27.040 --> 00:19:31.920
having said all that, start here. Start with a checklist. Don't worry about the machine learning


00:19:31.920 --> 00:19:35.760
stuff just yet. Start here. - Yeah, very cool. Before we move on,


00:19:35.760 --> 00:19:40.880
Connor Furster in the live chat says, "I'm glad the conversation of ethics and data science is


00:19:40.880 --> 00:19:47.360
enlarging. I think it's important about what we make." Yeah, I agree. Now, before we do move on,


00:19:47.360 --> 00:19:51.020
Let me tell you all about our sponsor for this episode,


00:19:51.020 --> 00:19:51.860
Sentry.


00:19:51.860 --> 00:19:53.440
So this episode is brought to you by Sentry.


00:19:53.440 --> 00:19:54.640
Thank you, Sentry.


00:19:54.640 --> 00:19:56.600
How would you like to remove a little bit of stress


00:19:56.600 --> 00:19:57.440
from your life?


00:19:57.440 --> 00:20:00.000
Do you worry that users may be having difficulties


00:20:00.000 --> 00:20:02.720
or encountering errors with your app right now?


00:20:02.720 --> 00:20:03.840
And would you even know it


00:20:03.840 --> 00:20:05.640
until they sent you that support email?


00:20:05.640 --> 00:20:07.620
How much better would it be to have the errors


00:20:07.620 --> 00:20:09.720
and performance details immediately sent to you,


00:20:09.720 --> 00:20:12.240
including the call stack and values of local variables


00:20:12.240 --> 00:20:14.880
and the active user recorded right in the report?


00:20:14.880 --> 00:20:18.160
With Sentry, it's not only possible, it's simple.


00:20:18.160 --> 00:20:19.880
We actually use Sentry on our websites,


00:20:19.880 --> 00:20:22.360
it's on PythonBytes.fm, it's on Talk Python Training,


00:20:22.360 --> 00:20:25.120
all those things, and we've actually fixed a bug


00:20:25.120 --> 00:20:28.960
triggered by a user and had the upgrade ready to roll out


00:20:28.960 --> 00:20:30.720
as we got the support email.


00:20:30.720 --> 00:20:32.160
They said, "Hey, I'm having a problem with the site,


00:20:32.160 --> 00:20:33.560
"I can't do this or that."


00:20:33.560 --> 00:20:35.120
I said, "Actually, I already saw the error,


00:20:35.120 --> 00:20:36.700
"I just pushed the fix to production,


00:20:36.700 --> 00:20:38.240
"so just try it again."


00:20:38.240 --> 00:20:39.640
Imagine their surprise.


00:20:39.640 --> 00:20:41.440
So surprise and delight, your users,


00:20:41.440 --> 00:20:44.980
Create your Century account at PythonBytes.fm/Century.


00:20:44.980 --> 00:20:46.300
And when you sign up, there's a,


00:20:46.300 --> 00:20:47.540
got a promo code, redeem it.


00:20:47.540 --> 00:20:49.540
Make sure you put PythonBytes in that section


00:20:49.540 --> 00:20:52.540
or you won't get a few months of free Century team plans


00:20:52.540 --> 00:20:54.740
and other features and they won't know it came from us.


00:20:54.740 --> 00:20:58.300
So use a promo code at PythonBytes.fm/Century.


00:20:58.300 --> 00:21:00.300
Yeah, thanks for supporting the show.


00:21:00.300 --> 00:21:01.140
Brian.


00:21:01.140 --> 00:21:01.960
- Yeah.


00:21:01.960 --> 00:21:02.800
- I like this one that you picked here.


00:21:02.800 --> 00:21:03.700
- You like this?


00:21:03.700 --> 00:21:04.540
- I like it a lot.


00:21:04.540 --> 00:21:05.360
It's very good.


00:21:05.360 --> 00:21:07.720
It has pictures, little animated things


00:21:07.720 --> 00:21:09.460
and great looking tools.


00:21:09.460 --> 00:21:10.300
- Yeah, so there's a,


00:21:10.300 --> 00:21:11.820
It was an article that was sent to us.


00:21:11.820 --> 00:21:14.040
I can't remember who sent it, so apologies.


00:21:14.040 --> 00:21:16.980
But it's an article called Three Tools to Track and


00:21:16.980 --> 00:21:20.900
Visualize the Execution of Your Python Code.


00:21:20.900 --> 00:21:25.280
I don't know why. Executing your code just seems funny to me.


00:21:25.280 --> 00:21:26.720
I know it just means run it,


00:21:26.720 --> 00:21:30.140
but chop its head off or something.


00:21:30.140 --> 00:21:36.180
Anyway, the three tools it covers are,


00:21:36.180 --> 00:21:38.300
we don't cover this very much


00:21:38.300 --> 00:21:39.860
because I don't know how to pronounce it.


00:21:39.860 --> 00:21:45.180
L-O-G-U-R-U, it's Loguru or Loguru, not sure.


00:21:45.180 --> 00:21:50.300
Loguru is a pretty printer with better exceptions.


00:21:50.300 --> 00:21:52.460
Let's go and look at that.


00:21:52.460 --> 00:21:54.620
It does exceptions like this,


00:21:54.620 --> 00:21:57.200
breaks out your exceptions into colors,


00:21:57.200 --> 00:22:00.620
and it's just a really great way to visualize it.


00:22:00.620 --> 00:22:05.980
I would totally use this if I was teaching a class or something.


00:22:05.980 --> 00:22:12.180
this might be a good way to teach people how to look at trace logs and error logs.


00:22:12.180 --> 00:22:14.980
This is fantastic. And if you're out there listening and not seeing it,


00:22:14.980 --> 00:22:16.580
you should definitely pull up this site,


00:22:16.580 --> 00:22:19.480
because the pictures really are what you need to tell quickly.


00:22:19.480 --> 00:22:20.480
Yeah.


00:22:20.480 --> 00:22:25.680
That's one of the things I like about this article is that lots of great pictures.


00:22:25.680 --> 00:22:28.780
One thing out of curiosity. So what I'm seeing here is that, for example,


00:22:28.780 --> 00:22:30.980
it says return number one divided by number two,


00:22:30.980 --> 00:22:33.780
and then you actually see the numbers that were in those variables.


00:22:33.780 --> 00:22:36.780
Do you have to add a decorator or something to get this output?


00:22:36.780 --> 00:22:39.180
Or how does that work?


00:22:39.180 --> 00:22:42.840
– That's explained later, maybe. – I don't remember where...


00:22:42.840 --> 00:22:45.680
– Yeah, it's explained later, I think. – Yeah.


00:22:45.680 --> 00:22:48.580
I think you just pull it in and it just does it, but I'm not sure.


00:22:48.580 --> 00:22:50.980
– Okay, interesting. – Anyway.


00:22:50.980 --> 00:22:53.980
So that's LogGuru.


00:22:53.980 --> 00:22:57.820
Then there's Snoop, which is kind of fun.


00:22:57.820 --> 00:22:59.940
That has...


00:22:59.940 --> 00:23:02.340
Hold on to Snoop. Should have had this already.


00:23:02.420 --> 00:23:05.500
Anyway, you put with Snoop, you can see


00:23:05.500 --> 00:23:08.200
it prints lines of code being executed in a function.


00:23:08.200 --> 00:23:12.220
So it just runs your code and then prints out each line


00:23:12.220 --> 00:23:14.660
in real time as it's going through it.


00:23:14.660 --> 00:23:17.700
You would hardly ever want this, I think,


00:23:17.700 --> 00:23:20.760
but when you do want it, I think it might be kind of cool


00:23:20.760 --> 00:23:22.760
to watch it go along.


00:23:22.760 --> 00:23:25.900
And you could also do this in a debugger,


00:23:25.900 --> 00:23:27.720
but if you didn't want a debugger, do a debugger.


00:23:27.720 --> 00:23:28.920
You can do this on the command line.


00:23:28.920 --> 00:23:32.160
One of the things that most debuggers have


00:23:32.220 --> 00:23:37.820
It's a little challenging is you'll see the state and you'll see the state change and you'll see it change again.


00:23:37.820 --> 00:23:43.520
But in your mind, you've got to remember, okay, that was a seven and then it was a five and then it was a three.


00:23:43.520 --> 00:23:44.520
Oh, right. Yeah.


00:23:44.520 --> 00:23:50.820
Right. And here it'll actually reproduce each line, each block of code with the values over.


00:23:50.820 --> 00:23:55.820
If you are in a loop three times, it'll show like going through the loop three times with all the values set.


00:23:55.820 --> 00:23:57.120
And that's pretty neat.


00:23:57.120 --> 00:23:57.720
Yeah.


00:23:57.720 --> 00:24:01.120
I would also argue just for teaching recursion, I think this visualization is kind of nice


00:24:01.120 --> 00:24:05.000
'cause you actually see the indentation and the depth appear


00:24:05.000 --> 00:24:07.000
and so you can actually see this function is called


00:24:07.000 --> 00:24:09.680
inside of this other function and there's a timestamp.


00:24:09.680 --> 00:24:12.820
So I would also argue this one's pretty good for teaching.


00:24:12.820 --> 00:24:15.800
- I like it, in fact, Connor on the livestream says,


00:24:15.800 --> 00:24:17.760
"I'm teaching my first Python course tomorrow."


00:24:17.760 --> 00:24:20.720
So yeah, thanks for the timely article.


00:24:20.720 --> 00:24:23.760
And a real-time follow-up for the Log Guru,


00:24:23.760 --> 00:24:25.800
you have to import Logger


00:24:25.800 --> 00:24:28.160
and then you gotta put a decorator on the function


00:24:28.160 --> 00:24:30.960
and then it'll capture that super detailed output.


00:24:30.960 --> 00:24:33.920
>> That's probably exactly what you want because you


00:24:33.920 --> 00:24:36.880
don't really want to do that for everything probably.


00:24:36.880 --> 00:24:40.320
There'll be something you're working on that you want to trace.


00:24:40.320 --> 00:24:44.000
Heart rate is the last tool that we want to talk about.


00:24:44.000 --> 00:24:48.320
It's a way to visualize the execution of a Python program in real-time.


00:24:48.320 --> 00:24:50.800
This is something we have not covered before,


00:24:50.800 --> 00:24:53.520
but it's, I thought there was a little video.


00:24:53.520 --> 00:24:57.720
Yeah. It goes through and does


00:24:57.720 --> 00:25:02.520
a little like a heat map sort of thing on the side of your code.


00:25:02.520 --> 00:25:08.420
So when it's running, you can kind of see that different things get hit more than others.


00:25:08.420 --> 00:25:13.720
So that's almost like a profiler, sort of not speed, though.


00:25:13.720 --> 00:25:14.820
It's just number of hits.


00:25:14.820 --> 00:25:15.420
Yeah.


00:25:15.420 --> 00:25:19.420
Yeah, I'm kind of on the fence about this, but it's pretty.


00:25:19.420 --> 00:25:24.020
So yeah, same, but the logger one looks amazing.


00:25:24.020 --> 00:25:26.920
I thought Loggeroo was also like a general logging tool.


00:25:26.920 --> 00:25:31.920
Like it does more, I think, than just things for debugging.


00:25:31.920 --> 00:25:34.720
- Yeah, I think it's a general logging tool as well.


00:25:34.720 --> 00:25:35.760
- Okay. - Okay.


00:25:35.760 --> 00:25:37.960
- But I guess it logs errors really good.


00:25:37.960 --> 00:25:40.400
(Brian laughs)


00:25:40.400 --> 00:25:42.240
- So anyway-- - Logger.catchDecorator.


00:25:42.240 --> 00:25:44.080
Okay, could probably do other things


00:25:44.080 --> 00:25:44.920
with the logger then as well,


00:25:44.920 --> 00:25:47.840
but having a good logging debugger catcher


00:25:47.840 --> 00:25:49.040
is always welcome.


00:25:49.040 --> 00:25:50.080
- Yeah, absolutely.


00:25:50.080 --> 00:25:52.080
All right, let's talk about Dux.


00:25:52.080 --> 00:25:54.160
I mean, Brian, you and I are in Oregon.


00:25:54.160 --> 00:25:55.000
- Go Dux. - Go Dux.


00:25:55.000 --> 00:25:56.880
Is that a, well, I know your daughter goes there,


00:25:56.880 --> 00:26:01.120
My daughter goes to OSU, so go B's I guess.


00:26:01.120 --> 00:26:03.600
Whatever, we're gonna talk Duck databases anyway.


00:26:03.600 --> 00:26:04.900
And data science.


00:26:04.900 --> 00:26:08.600
So Alex Monahan sent over to us saying,


00:26:08.600 --> 00:26:11.700
"Hey, you should check out this article about DuckDB,"


00:26:11.700 --> 00:26:13.700
which is a thing I'm now learning about.


00:26:13.700 --> 00:26:16.980
And it's integration, it's direct integration with pandas.


00:26:16.980 --> 00:26:19.400
So instead of taking data from a database,


00:26:19.400 --> 00:26:23.260
load it into a pandas data frame, doing stuff on it,


00:26:23.260 --> 00:26:24.700
and then getting the answer out,


00:26:24.700 --> 00:26:27.340
you basically put it into this embedded database,


00:26:27.340 --> 00:26:29.900
DuckDB, which is SQLite-like,


00:26:29.900 --> 00:26:32.820
and then, sorry, you put it into a pandas data frame,


00:26:32.820 --> 00:26:35.260
but then the query engine of DuckDB


00:26:35.260 --> 00:26:38.100
can query it directly without any data exchange,


00:26:38.100 --> 00:26:39.720
without transferring it back and forth


00:26:39.720 --> 00:26:41.540
between the two systems or formats.


00:26:41.540 --> 00:26:42.360
That's pretty cool, right?


00:26:42.360 --> 00:26:44.260
So, let me pull this.


00:26:44.260 --> 00:26:45.300
- Oh, that's Hannes.


00:26:45.300 --> 00:26:46.480
I know him.


00:26:46.480 --> 00:26:47.320
- Nice.


00:26:47.320 --> 00:26:48.500
- Yeah, he's from Amsterdam.


00:26:48.500 --> 00:26:49.420
- Yeah, very cool.


00:26:49.420 --> 00:26:50.740
So here's the idea.


00:26:50.740 --> 00:26:54.620
We've got SQL on pandas, basically.


00:26:54.620 --> 00:26:58.800
So if we had a data frame, here they have a really simple data frame, but just a, you


00:26:58.800 --> 00:27:03.040
know, a single array, but it could be a very complex data frame.


00:27:03.040 --> 00:27:07.880
And then what you can do is you can import DuckDB and you can say duckdb.query, and then


00:27:07.880 --> 00:27:13.560
you write something like, so one of the columns is called A in the data frame, and you could


00:27:13.560 --> 00:27:17.800
say select sum of A from the data frame.


00:27:17.800 --> 00:27:18.800
How cool is that?


00:27:18.800 --> 00:27:19.800
- I don't know.


00:27:19.800 --> 00:27:20.800
Is it cool?


00:27:20.800 --> 00:27:21.800
- It's very cool.


00:27:21.800 --> 00:27:24.920
Then you can also, there's also a two data frame on the result.


00:27:24.920 --> 00:27:31.480
So what happens here is this is parsed by DuckDB, which has an advanced


00:27:31.480 --> 00:27:36.360
query optimizer for things like joins and filtering and indexes


00:27:36.360 --> 00:27:37.240
and all that kind of stuff.


00:27:37.240 --> 00:27:39.040
And then it says, oh, okay.


00:27:39.040 --> 00:27:44.160
So you said there's a thing called my DF, which I'll just go look in the locals.


00:27:44.160 --> 00:27:47.520
Of my current call stack and see if I can find that.


00:27:47.520 --> 00:27:49.320
Oh yeah, that is neat.


00:27:49.720 --> 00:27:51.320
So you can write arbitrary SQL.


00:27:51.320 --> 00:27:52.440
And this one looks pretty straightforward.


00:27:52.440 --> 00:27:54.840
You're like, yeah, yeah, okay, interesting, interesting.


00:27:54.840 --> 00:27:58.840
But you can come down here and do more interesting things.


00:27:58.840 --> 00:28:00.360
Let's see, I'll pull up some examples.


00:28:00.360 --> 00:28:04.720
So they do a select aggregation group by thing.


00:28:04.720 --> 00:28:06.560
So select these two things,


00:28:06.560 --> 00:28:08.860
and then also do a sum min max and average


00:28:08.860 --> 00:28:11.640
on some part of the data frame.


00:28:11.640 --> 00:28:13.440
And then you pull it out of the data frame


00:28:13.440 --> 00:28:16.040
and you group by two of the elements, right?


00:28:16.040 --> 00:28:18.040
And they show also what that would look like


00:28:18.040 --> 00:28:20.680
if you did that in true pandas format.


00:28:20.680 --> 00:28:21.520
That's cool.


00:28:21.520 --> 00:28:24.720
And they say, well, it's about two to three times faster


00:28:24.720 --> 00:28:26.440
in the DuckDB version.


00:28:26.440 --> 00:28:27.680
- That is interesting.


00:28:27.680 --> 00:28:28.880
- That's interesting, right?


00:28:28.880 --> 00:28:30.720
But then they say, well, what if we wanted


00:28:30.720 --> 00:28:33.720
not to just group by, but we wanted a filter?


00:28:33.720 --> 00:28:35.760
Seems real simple, like where the ship date


00:28:35.760 --> 00:28:38.320
is less than 1998, no big deal.


00:28:38.320 --> 00:28:41.720
But because the way that this be really officially


00:28:41.720 --> 00:28:44.760
figured out by the query optimizer,


00:28:44.760 --> 00:28:46.460
it turns out to be much faster.


00:28:46.460 --> 00:28:49.420
So 0.6 seconds on single threaded


00:28:49.420 --> 00:28:52.300
or it actually supports parallel execution as well.


00:28:52.300 --> 00:28:55.580
So multi-threaded, they tested on a system


00:28:55.580 --> 00:28:58.220
that only had two cores, but it can be many, many cores.


00:28:58.220 --> 00:29:01.540
So it's faster 0.4 seconds when threaded


00:29:01.540 --> 00:29:06.340
versus 2.2 seconds, sorry, 3.5 seconds on regular pandas.


00:29:06.340 --> 00:29:09.820
But there's this more complicated non-obvious thing


00:29:09.820 --> 00:29:12.580
you can do called a manual pushdown in pandas,


00:29:12.580 --> 00:29:14.940
which will help drive some of the efficiency


00:29:14.940 --> 00:29:16.660
before other work happens.


00:29:16.660 --> 00:29:18.820
And then they finally show one at the very end


00:29:18.820 --> 00:29:20.620
where there's more stuff going on


00:29:20.620 --> 00:29:22.300
that Query Optimizer does.


00:29:22.300 --> 00:29:24.660
So the threaded one's 0.5 seconds,


00:29:24.660 --> 00:29:26.740
regular pandas is 15 seconds.


00:29:26.740 --> 00:29:28.620
So all that's cool and what's really neat


00:29:28.620 --> 00:29:30.780
is it all just happens like on the data frame.


00:29:30.780 --> 00:29:31.900
- Yeah, there's two things about that


00:29:31.900 --> 00:29:32.740
that are pretty interesting.


00:29:32.740 --> 00:29:34.180
Like one is we shouldn't underestimate


00:29:34.180 --> 00:29:35.940
how many people are still new to pandas


00:29:35.940 --> 00:29:37.020
but do understand SQL.


00:29:37.020 --> 00:29:39.100
So just for that use case, I can imagine,


00:29:39.100 --> 00:29:42.080
you know, you're gonna get a lot of people on board.


00:29:42.080 --> 00:29:44.580
But the fact that there's a Query Optimizer in there


00:29:44.580 --> 00:29:46.220
that's able to work on top of pandas,


00:29:46.220 --> 00:29:47.400
that's also pretty neat.


00:29:47.400 --> 00:29:49.060
'Cause I'm assuming it's doing clever things like,


00:29:49.060 --> 00:29:50.940
oh, I need to filter data,


00:29:50.940 --> 00:29:52.460
I should do that as early on as possible


00:29:52.460 --> 00:29:55.500
in my query plan, it's doing some of that logic internally.


00:29:55.500 --> 00:29:56.580
And the fact is you can paralyze it,


00:29:56.580 --> 00:30:00.060
'cause pandas doesn't paralyze easily.


00:30:00.060 --> 00:30:00.900
It's also something--


00:30:00.900 --> 00:30:02.620
- Yeah, I don't know that it paralyzes at all.


00:30:02.620 --> 00:30:04.540
You gotta go to something like Dask.


00:30:04.540 --> 00:30:08.080
- Yeah, I mean, so there are some tricks that you could do,


00:30:08.080 --> 00:30:10.900
but they're tricks, they're not really natively supported.


00:30:10.900 --> 00:30:12.260
- Right, right.


00:30:12.260 --> 00:30:14.700
but just having a SQL interface is neat.


00:30:14.700 --> 00:30:16.020
- Yeah, yeah, this is pretty neat.


00:30:16.020 --> 00:30:17.980
And also now I learned about DuckDB.


00:30:17.980 --> 00:30:21.460
So apparently that's a thing, which is pretty awesome.


00:30:21.460 --> 00:30:24.380
So it's in process, just like SQLite,


00:30:24.380 --> 00:30:28.300
it's written in C++ 11 with no dependencies.


00:30:28.300 --> 00:30:29.220
Supposed to be super fast.


00:30:29.220 --> 00:30:30.980
So this is also a cool thing that,


00:30:30.980 --> 00:30:33.380
maybe I'll check out unrelated to query in pandas,


00:30:33.380 --> 00:30:35.740
but the fact that you can, I think is pretty cool.


00:30:35.740 --> 00:30:37.580
- It's got a great name.


00:30:37.580 --> 00:30:39.780
- Yeah, you know, another database out there,


00:30:39.780 --> 00:30:41.940
I hear a lot about, but I've never used,


00:30:41.940 --> 00:30:45.040
that I have really an opinion about is cockroach DB.


00:30:45.040 --> 00:30:47.900
I'm not a huge fan of just on the name,


00:30:47.900 --> 00:30:49.300
although it has some interesting ideas.


00:30:49.300 --> 00:30:51.940
I think it's like meant to communicate resiliency


00:30:51.940 --> 00:30:54.020
and it can't be killed 'cause it's like geo-located


00:30:54.020 --> 00:30:56.140
and it's just gonna survive, but yeah.


00:30:56.140 --> 00:30:57.980
Ducks, I'll go with ducks.


00:30:57.980 --> 00:30:59.540
- Yeah, I would agree.


00:30:59.540 --> 00:31:02.520
- Yeah, and then a chat out in the live stream chat,


00:31:02.520 --> 00:31:04.840
Christopher says, so DuckDB is worrying


00:31:04.840 --> 00:31:08.040
on pandas data frames or can you load the data method chain


00:31:08.040 --> 00:31:09.860
with DuckDB and reduce memories?


00:31:09.860 --> 00:31:11.900
I believe you could do either.


00:31:11.900 --> 00:31:13.220
Like you could load data into it


00:31:13.220 --> 00:31:15.740
and then there's a two data frame option.


00:31:15.740 --> 00:31:17.860
That probably could come out of it, but--


00:31:17.860 --> 00:31:18.700
- I think just very briefly--


00:31:18.700 --> 00:31:20.140
- It's basically right on it.


00:31:20.140 --> 00:31:20.980
Yeah, go ahead.


00:31:20.980 --> 00:31:22.940
- It doesn't, I might've just seen it briefly


00:31:22.940 --> 00:31:24.620
while you were scrolling in the blog post,


00:31:24.620 --> 00:31:25.700
but I believe it also said


00:31:25.700 --> 00:31:27.860
that it supports the Parquet file format.


00:31:27.860 --> 00:31:28.700
- It does.


00:31:28.700 --> 00:31:30.220
- So the nice thing about Parquet


00:31:30.220 --> 00:31:32.580
is you can kind of index your data cleverly.


00:31:32.580 --> 00:31:34.920
Like you can index it by date on the file system.


00:31:34.920 --> 00:31:36.700
And then presumably if you were to write


00:31:36.700 --> 00:31:38.180
the SQL query in DuckDB,


00:31:38.180 --> 00:31:40.460
it would only read the files of the appropriate date


00:31:40.460 --> 00:31:41.900
if you put a filter in there.


00:31:41.900 --> 00:31:44.100
So I can imagine just because of that reason,


00:31:44.100 --> 00:31:46.780
DuckDB on its own might be more memory performant


00:31:46.780 --> 00:31:47.980
than Panas, I guess.


00:31:47.980 --> 00:31:49.020
- Yeah, perhaps.


00:31:49.020 --> 00:31:51.100
- That's stuff like that you could do.


00:31:51.100 --> 00:31:53.620
- Yeah, and then Nick Harvey also says,


00:31:53.620 --> 00:31:56.220
I wonder if it's read-only, if you can insert or update.


00:31:56.220 --> 00:31:57.720
I don't know for sure,


00:31:57.720 --> 00:32:00.140
but you can see in some of the places


00:32:00.140 --> 00:32:02.220
they are doing projections.


00:32:02.220 --> 00:32:06.180
So for example, they're doing a select some min max average.


00:32:06.180 --> 00:32:08.280
that's generating data that goes into it.


00:32:08.280 --> 00:32:10.100
And then the result is a data frame.


00:32:10.100 --> 00:32:12.540
So you can just add into the data frame afterwards


00:32:12.540 --> 00:32:14.320
if you want to be more manual about it.


00:32:14.320 --> 00:32:15.420
Yeah. All right.


00:32:15.420 --> 00:32:16.740
Vincent, you got the last one?


00:32:16.740 --> 00:32:20.620
- Yeah. So the thing is I work for a company called Rasa.


00:32:20.620 --> 00:32:22.740
We make software with Python


00:32:22.740 --> 00:32:26.140
to make virtual assistants easier to make in Python.


00:32:26.140 --> 00:32:28.460
And I was looking in our community showcase


00:32:28.460 --> 00:32:29.740
and I just found this project


00:32:29.740 --> 00:32:31.980
that just made me kind of feel hopeful.


00:32:31.980 --> 00:32:34.020
So this is a personal project, I think.


00:32:34.020 --> 00:32:39.020
So we have a name here, Amit, and I hope I'm pronouncing it correctly, Arvind.


00:32:39.020 --> 00:32:42.620
But what they did is they used Rasa kind of like a Lego brick,


00:32:42.620 --> 00:32:46.920
but they made this assistant, if you will, that you can send a text message to.


00:32:46.920 --> 00:32:50.580
Now, what it does, I'll zoom in a little bit for people on YouTube


00:32:50.580 --> 00:32:52.120
that might be able to see the GIF,


00:32:52.120 --> 00:32:55.220
but every 10 minutes, it scrapes the weather information,


00:32:55.220 --> 00:32:58.620
the fire hazard information, and I think evacuation information


00:32:58.620 --> 00:33:00.380
from local government in California,


00:33:00.380 --> 00:33:02.860
meant to help people during wildfire season.


00:33:02.920 --> 00:33:05.480
And they completely open-sourced this project as well.


00:33:05.480 --> 00:33:09.560
So there's a linked GitHub project where you can just see how they implemented it.


00:33:09.560 --> 00:33:12.200
And it's a fairly simple implementation.


00:33:12.200 --> 00:33:14.440
They use Raza with a Twilio API.


00:33:14.440 --> 00:33:17.880
They're doing some neat little clever things here with, like,


00:33:17.880 --> 00:33:19.880
if you misspelled your city,


00:33:19.880 --> 00:33:22.280
they're using a fuzzy string matching library


00:33:22.280 --> 00:33:24.120
to make sure that even if you misspell your city,


00:33:24.120 --> 00:33:26.840
they can still try to give you accurate information.


00:33:26.840 --> 00:33:29.240
But what they do is they just have this endpoint


00:33:29.240 --> 00:33:32.760
where you can send a text message to, like, "Give me the update of San Francisco."


00:33:32.840 --> 00:33:34.760
And then it will tell you all the weather information,


00:33:34.760 --> 00:33:36.520
air quality information, and that sort of thing.


00:33:36.520 --> 00:33:37.520
And if you need to evacuate,


00:33:37.520 --> 00:33:39.360
it will also be able to tell you that.


00:33:39.360 --> 00:33:41.680
And what I just loved about this,


00:33:41.680 --> 00:33:44.120
if you look at the way that they described it,


00:33:44.120 --> 00:33:46.520
this was just two people who knew Python


00:33:46.520 --> 00:33:48.220
who were a little bit disappointed


00:33:48.220 --> 00:33:50.400
with the communication that was happening,


00:33:50.400 --> 00:33:51.680
but because the APIs were open,


00:33:51.680 --> 00:33:53.100
they just built their own solution.


00:33:53.100 --> 00:33:55.800
And like thousands of people use this.


00:33:55.800 --> 00:33:58.320
And what's even greater is that, you know,


00:33:58.320 --> 00:34:00.680
if your mobile coverage isn't great,


00:34:00.680 --> 00:34:03.680
watching a YouTube video or like trying to get audio in can be tricky,


00:34:03.680 --> 00:34:05.880
but a text message is really low black bandwidth.


00:34:05.880 --> 00:34:08.280
So for a lot of people, this is like a great way to communicate.


00:34:08.280 --> 00:34:11.680
Um, and of course I'm a little bit biased cause I worked for Rasa and I think it's


00:34:11.680 --> 00:34:13.200
awesome that they use Rasa to build this.


00:34:13.200 --> 00:34:16.020
Uh, but again, the whole thing is just open source.


00:34:16.020 --> 00:34:20.960
You can go to their GitHub and you can just, if I'm not mistaking, there's


00:34:20.960 --> 00:34:25.080
like the scraping job of the end points actually in here as well.


00:34:25.080 --> 00:34:27.280
Uh, but this is like exactly what you want.


00:34:27.280 --> 00:34:30.000
Just a couple of open API APIs and sort of citizen science, building


00:34:30.000 --> 00:34:31.800
something that's useful for the community. It's great.


00:34:31.800 --> 00:34:33.040
>> Yeah, I like it.


00:34:33.040 --> 00:34:34.480
Text message is probably


00:34:34.480 --> 00:34:36.760
a really good way to communicate for disasters.


00:34:36.760 --> 00:34:37.560
>> Yes.


00:34:37.560 --> 00:34:42.040
>> Possibly in a place where LTE is fresh,


00:34:42.040 --> 00:34:43.880
Wi-Fi is out.


00:34:43.880 --> 00:34:45.880
Even if you're on edge,


00:34:45.880 --> 00:34:47.380
text should still get there.


00:34:47.380 --> 00:34:47.920
>> Exactly.


00:34:47.920 --> 00:34:49.240
>> Unless you're on iMessage,


00:34:49.240 --> 00:34:51.000
then you're out of luck. No, I don't know.


00:34:51.000 --> 00:34:53.760
>> I live in Europe,


00:34:53.760 --> 00:34:55.160
so I cannot comment on that, of course,


00:34:55.160 --> 00:34:57.220
but it's a little bit different here.


00:34:57.220 --> 00:34:59.200
But no, the data service,


00:34:59.200 --> 00:35:02.920
you can just look in here. And this is like, again, I like these little projects


00:35:02.920 --> 00:35:07.120
that don't need anyone's permission to help people like that stuff. Like, this is good stuff.


00:35:07.120 --> 00:35:12.800
And the thing that I also really like about it is, it's really just sending you a text message with like


00:35:12.800 --> 00:35:16.760
air quality information, like enough information. And that's good. It's not like they're trying to


00:35:16.760 --> 00:35:21.120
make like a giant predictive model on top of this or anything like that. They're just really doing


00:35:21.120 --> 00:35:25.600
enough and enough is plenty. Like that's the thing I really love about this little demo. And of course,


00:35:25.600 --> 00:35:29.160
using Rasa, which is great. But this is the kind of stuff that


00:35:29.160 --> 00:35:32.600
this is why I get up in the morning projects like this.


00:35:32.600 --> 00:35:36.880
That's fantastic. Yeah, I love it. That's really good one.


00:35:36.880 --> 00:35:37.840
Brian, is that it?


00:35:37.840 --> 00:35:43.160
Yeah, that's it. That's our six items. Any extras that you want


00:35:43.160 --> 00:35:43.720
to talk about?


00:35:43.720 --> 00:35:49.520
I might have one. Okay. Yeah. Okay. So I'm totally tooting my


00:35:49.520 --> 00:35:51.680
own horn here. But this is a project I made a little while


00:35:51.680 --> 00:35:54.560
ago, but I think people might like it.


00:35:54.560 --> 00:35:58.280
So at some point, it kind of struck me that people were making these machine


00:35:58.280 --> 00:36:01.820
learning algorithms and they're trying to like on a two dimensional plane,


00:36:01.820 --> 00:36:04.960
trying to separate the green dots from the red ones from the blue ones.


00:36:04.960 --> 00:36:08.580
And I just started wondering, well, why do you need an algorithm if you


00:36:08.580 --> 00:36:10.880
can just maybe draw one?


00:36:10.880 --> 00:36:13.840
So very typically you got these like clusters of red points and


00:36:13.840 --> 00:36:14.880
clusters of blue points.


00:36:14.880 --> 00:36:18.160
And I just started wondering, maybe all we need is like this little user


00:36:18.160 --> 00:36:20.880
interface element that you can load from a Jupyter notebook.


00:36:21.240 --> 00:36:23.140
And maybe once you've made a drawing,


00:36:23.140 --> 00:36:24.280
it'd be nice if we can just turn it


00:36:24.280 --> 00:36:25.800
into a scikit-learn model.


00:36:25.800 --> 00:36:28.200
So there's this project called Human Learn


00:36:28.200 --> 00:36:30.140
that does exactly this.


00:36:30.140 --> 00:36:33.280
It's a tool of little buttons and widgets


00:36:33.280 --> 00:36:35.080
that I've made to just make it easier


00:36:35.080 --> 00:36:36.960
for you to do your domain knowledge thing


00:36:36.960 --> 00:36:38.360
and turn it into a model.


00:36:38.360 --> 00:36:40.200
So one of the things that it currently features


00:36:40.200 --> 00:36:43.000
is the ability to draw a model, which is great


00:36:43.000 --> 00:36:44.960
because domain experts can just sort of


00:36:44.960 --> 00:36:46.680
put their knowledge in here.


00:36:46.680 --> 00:36:48.080
It can do outlier detection as well


00:36:48.080 --> 00:36:50.840
'cause if a point falls outside of one of your drawn circles


00:36:50.840 --> 00:36:52.840
that also means that it's probably an outlier.


00:36:52.840 --> 00:36:56.840
But it also has a tool in there that allows you to turn any Python function,


00:36:56.840 --> 00:36:59.800
like any custom Python-written function,


00:36:59.800 --> 00:37:01.500
into a Scikit-learn-compatible tool as well.


00:37:01.500 --> 00:37:04.440
So if you can just declare logic in a Python function,


00:37:04.440 --> 00:37:07.140
that can also just be a machine learning model from now on.


00:37:07.140 --> 00:37:09.940
There's an extra fancy thing, if people are interested.


00:37:09.940 --> 00:37:12.740
I just made a little blog post about that,


00:37:12.740 --> 00:37:16.640
where I'm using a very advanced coloring technique


00:37:16.640 --> 00:37:18.880
using parallel coordinates.


00:37:18.940 --> 00:37:20.500
Very fancy technique.


00:37:20.500 --> 00:37:22.140
Won't go into too much depth there,


00:37:22.140 --> 00:37:24.640
but what's really cool is that you can basically show


00:37:24.640 --> 00:37:27.860
that a drawn model cannot perform the model


00:37:27.860 --> 00:37:30.300
that's on the Keras Deep Learning blog,


00:37:30.300 --> 00:37:33.720
which I just thought was a very cool little feature as well.


00:37:33.720 --> 00:37:35.140
The project's called Human Learn.


00:37:35.140 --> 00:37:38.420
It's just components for inside of your Jupyter Notebook


00:37:38.420 --> 00:37:40.940
to make domain knowledge and human learning


00:37:40.940 --> 00:37:43.060
and all that good stuff better.


00:37:43.060 --> 00:37:44.900
Also, with the fairness thing in mind,


00:37:44.900 --> 00:37:46.460
I really like the idea that people


00:37:46.460 --> 00:37:50.060
sort of can do the exploratory data analysis bit,


00:37:50.060 --> 00:37:51.340
and at the same time also work


00:37:51.340 --> 00:37:53.420
on their first machine learning models and benchmark.


00:37:53.420 --> 00:37:54.540
That's what HumanLearn does.


00:37:54.540 --> 00:37:57.420
So if people are sort of curious to play around with that,


00:37:57.420 --> 00:37:58.260
please do.


00:37:58.260 --> 00:38:00.300
It's open source, they've installed, please use it.


00:38:00.300 --> 00:38:01.740
- I'm impressed, this is cool.


00:38:01.740 --> 00:38:02.660
That's really cool. - It is, right?


00:38:02.660 --> 00:38:03.500
- Yeah.


00:38:03.500 --> 00:38:05.460
- Maddy out in the livestream asks,


00:38:05.460 --> 00:38:07.660
"How does it handle ND data?"


00:38:07.660 --> 00:38:09.780
Or N, I guess it's three or larger.


00:38:09.780 --> 00:38:11.980
- Yeah, so you can make, like,


00:38:11.980 --> 00:38:13.320
so if you have four columns,


00:38:13.320 --> 00:38:15.060
you can make two charts with two dimensions.


00:38:15.060 --> 00:38:16.060
That's one way of dealing with it.


00:38:16.060 --> 00:38:19.260
There's a little trick where you can combine all of your drawings into one thing.


00:38:19.260 --> 00:38:22.620
If you go to the examples, though, the parallel coordinates chart that you see here,


00:38:22.620 --> 00:38:27.500
that has 30 columns and it works just fine. I do think 30 is probably the limit.


00:38:27.500 --> 00:38:31.980
But the parallel coordinates chart, you can make a subselection across


00:38:31.980 --> 00:38:36.780
multiple dimensions. That just works. It's really hard to explain a parallel coordinates chart on


00:38:36.780 --> 00:38:43.340
a podcast, though. I'm sorry. Yeah, so this is a super interactive visualization thing with lots


00:38:43.340 --> 00:38:48.060
of colors and stuff happening. I'm sorry, you have to go to the docs to fully experience that. But


00:38:48.060 --> 00:38:54.140
again, also, like if you, let's say you work for a fraud office and someone asks you like,


00:38:54.140 --> 00:38:57.820
"Hey, without looking at any data, can you come up with rules that's probably fraud?"


00:38:57.820 --> 00:39:00.860
And you can kind of go, "Yeah, if you're 12 and you earn over a million dollars,


00:39:00.860 --> 00:39:04.540
that's probably weird. Someone should just look at that." And the thing is, you can just write


00:39:04.540 --> 00:39:08.540
down rules that way. And that should already be, can already be turned into a machine learning


00:39:08.540 --> 00:39:12.540
model. You don't always need data. And that's the thing I'm trying to cover here. Like just make it


00:39:12.540 --> 00:39:14.540
easier for you to declare stuff like that.


00:39:14.540 --> 00:39:16.540
It's a more human approach.


00:39:16.540 --> 00:39:18.540
Brian, I cut you off. Were you going to say something?


00:39:18.540 --> 00:39:20.540
Oh, one of the things, I don't know if we've


00:39:20.540 --> 00:39:22.540
covered this already, but we've


00:39:22.540 --> 00:39:24.540
talked about comcode.io a lot


00:39:24.540 --> 00:39:26.540
on this podcast.


00:39:26.540 --> 00:39:28.540
And you're the person


00:39:28.540 --> 00:39:30.540
behind it, right? Yeah, I am.


00:39:30.540 --> 00:39:32.540
It's been a fun little side project


00:39:32.540 --> 00:39:34.540
that I've been doing for a year now.


00:39:34.540 --> 00:39:36.540
So, nice videos. I like how short


00:39:36.540 --> 00:39:38.540
they are. Thanks.


00:39:38.540 --> 00:39:40.540
People tell


00:39:40.540 --> 00:39:42.900
And that's also the thing that I was kind of going for.


00:39:42.900 --> 00:39:45.260
Like I love the, you know when you watch a video,


00:39:45.260 --> 00:39:46.460
it's like a lightning talk,


00:39:46.460 --> 00:39:48.300
and you learn something in five minutes?


00:39:48.300 --> 00:39:49.140
- Yeah.


00:39:49.140 --> 00:39:50.380
- Oh, that's an amazing feeling.


00:39:50.380 --> 00:39:52.060
That's the thing I'm trying to capture there a little bit.


00:39:52.060 --> 00:39:53.980
Like if it takes more than five minutes


00:39:53.980 --> 00:39:57.180
to get a point across, then I should go on


00:39:57.180 --> 00:39:58.020
to a different topic.


00:39:58.020 --> 00:39:59.220
But I'm happy to hear you like it.


00:39:59.220 --> 00:40:00.460
- Cool. - Yeah, very cool.


00:40:00.460 --> 00:40:01.500
- How about you, Michael?


00:40:01.500 --> 00:40:02.420
Anything extras?


00:40:02.420 --> 00:40:05.580
- Well, I had two, now I have three,


00:40:05.580 --> 00:40:07.260
because I was reading the source code


00:40:07.260 --> 00:40:10.300
of one of Vincent's projects there,


00:40:10.300 --> 00:40:13.740
and as we were talking and I learned about fuzzy wuzzy.


00:40:13.740 --> 00:40:16.140
(laughing)


00:40:16.140 --> 00:40:19.280
So fuzzy wuzzy was being used in that emergency


00:40:19.280 --> 00:40:21.820
disaster recovery awareness thing.


00:40:21.820 --> 00:40:24.320
And it's fuzzy string matching in Python


00:40:24.320 --> 00:40:27.500
and it says fuzzy string matching like a boss.


00:40:27.500 --> 00:40:28.700
Which you gotta love.


00:40:28.700 --> 00:40:30.380
So it was like slight misspellings


00:40:30.380 --> 00:40:32.580
and plural versus not plural and whatnot.


00:40:32.580 --> 00:40:36.900
And Brian even uses hypothesis which is kind of interesting.


00:40:36.900 --> 00:40:38.140
- Yeah, and pytest.


00:40:38.140 --> 00:40:39.300
- Yeah, and pytest of course.


00:40:39.300 --> 00:40:42.300
Anyway, that's pretty cool, I just discovered that.


00:40:42.300 --> 00:40:45.020
- So, Fuzzy Wuzzy is a pretty cool tool.


00:40:45.020 --> 00:40:46.580
The only thing I don't like about it,


00:40:46.580 --> 00:40:48.780
and it's the one thing I do have to mention,


00:40:48.780 --> 00:40:51.260
it is my understanding that Fuzzy Wuzzy is a slur


00:40:51.260 --> 00:40:53.020
in certain regions of the world.


00:40:53.020 --> 00:40:54.420
So in terms of naming a package,


00:40:54.420 --> 00:40:55.300
they could have done better there,


00:40:55.300 --> 00:40:57.100
but I think they only realized that in hindsight.


00:40:57.100 --> 00:40:58.660
Other than that, there's some cool stuff in there,


00:40:58.660 --> 00:41:01.740
definitely just, when I learned about this,


00:41:01.740 --> 00:41:02.820
I did make the comment to myself,


00:41:02.820 --> 00:41:03.820
like, okay, I should always acknowledge it


00:41:03.820 --> 00:41:05.180
whenever I talk about the package.


00:41:05.180 --> 00:41:08.020
But yeah, it's definitely useful stuff in there.


00:41:08.020 --> 00:41:10.720
Fuzzy string matching is a useful problem to have a tool for.


00:41:10.720 --> 00:41:11.720
Yeah, very cool.


00:41:11.720 --> 00:41:18.220
And PyCon, way out in the future, 2024-2025 announcement is out.


00:41:18.220 --> 00:41:23.220
So the next two PyCons are already theoretically in Salt Lake City.


00:41:23.220 --> 00:41:27.420
So hopefully we actually go to Salt Lake City and not just go and we'll


00:41:27.420 --> 00:41:29.320
virtually imagine it was there, right?


00:41:29.320 --> 00:41:30.020
Like this year.


00:41:30.020 --> 00:41:35.020
But last two years because of the pandemic, Pittsburgh lost its


00:41:35.020 --> 00:41:38.340
opportunity to have PyCon, so not just once but twice.


00:41:38.340 --> 00:41:41.620
So they are rescheduling the next one back into Pittsburgh.


00:41:41.620 --> 00:41:44.340
So folks there will be able to go and part of PyCon.


00:41:44.340 --> 00:41:46.380
- That's pretty cool. - Wow.


00:41:46.380 --> 00:41:48.060
- Because of Corona, they've now been able to plan


00:41:48.060 --> 00:41:49.900
four years ahead of the way.


00:41:49.900 --> 00:41:50.740
- Exactly.


00:41:50.740 --> 00:41:51.580
- It's beautiful.


00:41:51.580 --> 00:41:53.620
- Everything's upside down now.


00:41:53.620 --> 00:41:55.580
And then also, I just wanna give a quick shout out


00:41:55.580 --> 00:41:57.980
to an episode that I think is coming out this week


00:41:57.980 --> 00:42:00.260
on Talk Python, I'm pretty sure that's the schedule,


00:42:00.260 --> 00:42:02.500
called CodeCarbon.io.


00:42:02.500 --> 00:42:05.020
And it is a, I'm gonna pull it up here.


00:42:05.020 --> 00:42:07.700
It is both a dashboard that lets you look


00:42:07.700 --> 00:42:11.180
at the carbon generation, the CO2 footprint


00:42:11.180 --> 00:42:13.380
of your machine learning models,


00:42:13.380 --> 00:42:16.740
as you, specifically around the training of the models.


00:42:16.740 --> 00:42:19.340
So what you do is you pip install somewhere in here,


00:42:19.340 --> 00:42:21.740
you pip install this emission tracker,


00:42:21.740 --> 00:42:25.180
and then you just say, start tracking, train, stop tracking.


00:42:25.180 --> 00:42:28.060
And it uses your location, your data center,


00:42:28.060 --> 00:42:31.460
the local energy grid, the sources of energy from all that.


00:42:31.460 --> 00:42:34.020
And it'll say like, oh, if you actually switch to say


00:42:34.020 --> 00:42:37.820
the Oregon AWS data center from Virginia,


00:42:37.820 --> 00:42:41.780
you'd be using more, you would be using more hydroelectric


00:42:41.780 --> 00:42:44.060
rather than, I don't know, gas or whatever, right?


00:42:44.060 --> 00:42:47.140
So just we were talking about some of the ethics


00:42:47.140 --> 00:42:48.820
and cool things that we should be paying attention to.


00:42:48.820 --> 00:42:50.980
And I feel like the sort of energy impact


00:42:50.980 --> 00:42:53.980
of model training might be worth looking at as well.


00:42:53.980 --> 00:42:56.260
- So I totally agree with model training.


00:42:56.260 --> 00:42:58.020
I've been wondering about this other thing though,


00:42:58.020 --> 00:42:59.580
and that's testing on GitHub.


00:42:59.580 --> 00:43:01.460
Like if you think about some of these CI pipelines,


00:43:01.460 --> 00:43:02.820
they can be big too.


00:43:02.820 --> 00:43:04.700
Like I've heard projects that take like an hour


00:43:04.700 --> 00:43:05.740
on every commit.


00:43:05.740 --> 00:43:08.420
I'd be curious to run this on that stuff as well.


00:43:08.420 --> 00:43:11.300
- Yeah, well, you could turn on,


00:43:11.300 --> 00:43:14.180
you could employ this as part of your CI/CD.


00:43:14.180 --> 00:43:17.180
It doesn't really have to do with model training per se,


00:43:17.180 --> 00:43:19.740
but it does things like when you train models


00:43:19.740 --> 00:43:22.140
that use a GPU, it'll actually ask the GPU


00:43:22.140 --> 00:43:24.220
for the electrical current.


00:43:24.220 --> 00:43:25.260
- Ah, right.


00:43:25.260 --> 00:43:27.300
- Right, so it goes down into the hardware.


00:43:27.300 --> 00:43:28.500
- That's a fancy feature.


00:43:28.500 --> 00:43:29.500
That's a fancy feature.


00:43:29.500 --> 00:43:33.020
And it goes down to the CPU level, the CPU level voltage,


00:43:33.020 --> 00:43:34.780
and all sorts of low, it's not just,


00:43:34.780 --> 00:43:37.060
well, it ran for this long, so it's this, right?


00:43:37.060 --> 00:43:39.020
- Ah, okay. - It's really detailed.


00:43:39.020 --> 00:43:41.380
That said, I suspect you could actually answer


00:43:41.380 --> 00:43:44.340
the same question on a CI, right?


00:43:44.340 --> 00:43:45.300
It would just say, well, it looks like


00:43:45.300 --> 00:43:46.720
you're training on a CPU.


00:43:46.720 --> 00:43:48.780
(both laughing)


00:43:48.780 --> 00:43:49.620
- Yeah, true.


00:43:49.620 --> 00:43:52.180
But so, yeah, it's a nice way to be conscious


00:43:52.180 --> 00:43:53.900
about compute times and stuff, so that's--


00:43:53.900 --> 00:43:56.500
- Yeah, and what's cool is it has the dashboard


00:43:56.500 --> 00:43:58.300
that actually lets you explore.


00:43:58.300 --> 00:44:01.360
Well, if I were to shift it to Europe rather than train in the U S which,


00:44:01.360 --> 00:44:02.760
who really cares where it trains.


00:44:02.760 --> 00:44:04.700
Would that, what difference would that have?


00:44:04.700 --> 00:44:06.820
Look at how green Paraguay is.


00:44:06.820 --> 00:44:07.840
We are hosting.


00:44:07.840 --> 00:44:08.580
Yeah.


00:44:08.580 --> 00:44:09.280
That's incredible.


00:44:09.280 --> 00:44:11.820
I suspect a lot of waterfalls.


00:44:11.820 --> 00:44:12.520
Yeah.


00:44:12.520 --> 00:44:15.360
Countries down there have insane amounts of hydro.


00:44:15.360 --> 00:44:19.360
Uh, like Chile, maybe I can't remember exactly, but yeah, a lot of hydro


00:44:19.360 --> 00:44:20.960
and you see, and you see Iceland as well.


00:44:20.960 --> 00:44:23.020
And it's probably because of the volcanoes and warmth and heat.


00:44:23.020 --> 00:44:23.440
And yeah.


00:44:23.440 --> 00:44:23.680
Yeah.


00:44:23.680 --> 00:44:24.320
The to, yeah.


00:44:24.320 --> 00:44:24.880
Okay.


00:44:24.880 --> 00:44:25.240
Interesting.


00:44:25.240 --> 00:44:25.880
All right.


00:44:25.880 --> 00:44:26.920
Nice Brian.


00:44:26.920 --> 00:44:27.480
You got anything?


00:44:27.840 --> 00:44:29.240
- No, not this week.


00:44:29.240 --> 00:44:30.440
- How about we do a joke?


00:44:30.440 --> 00:44:31.560
- Sounds good.


00:44:31.560 --> 00:44:33.720
- So, it's been a while since I've been


00:44:33.720 --> 00:44:36.080
to a strongest man competition.


00:44:36.080 --> 00:44:37.560
World's strongest man.


00:44:37.560 --> 00:44:39.120
You know, like, maybe one of those things


00:44:39.120 --> 00:44:40.640
where you pick up like a telephone pole


00:44:40.640 --> 00:44:42.620
and you have to carry this, throw it as far as you can,


00:44:42.620 --> 00:44:44.420
or you lift like the heaviest barbells,


00:44:44.420 --> 00:44:47.200
or like you carry huge rocks some distance.


00:44:47.200 --> 00:44:48.280
So here's one of those things.


00:44:48.280 --> 00:44:50.240
There's like three judges,


00:44:50.240 --> 00:44:53.440
bunch of people who look way over pumped.


00:44:53.440 --> 00:44:55.720
They're all flexing, getting ready.


00:44:55.720 --> 00:44:59.120
The first one is this person carrying a huge rock,


00:44:59.120 --> 00:45:01.080
sweating clearly, and the judges are,


00:45:01.080 --> 00:45:02.200
they're not super impressed.


00:45:02.200 --> 00:45:04.320
They give a five, a two, and a six.


00:45:04.320 --> 00:45:07.080
Then there's another one lifting this 500-pound barbell


00:45:07.080 --> 00:45:10.120
over his head, says eight, seven, and six is their score.


00:45:10.120 --> 00:45:11.560
And then there's this particularly


00:45:11.560 --> 00:45:14.600
not overly strong-looking person here,


00:45:14.600 --> 00:45:17.560
says, "I don't use Google when coding."


00:45:17.560 --> 00:45:19.360
Wow, so strong.


00:45:19.360 --> 00:45:21.120
The judges give him straight 10s.


00:45:21.120 --> 00:45:22.200
(laughs)


00:45:22.200 --> 00:45:24.920
- And he's also being really sincere.


00:45:24.920 --> 00:45:29.480
hand over his heart. Oh yeah, like it's very humble. Yeah, exactly.


00:45:29.480 --> 00:45:33.080
All right, well, that's what I got for you.


00:45:33.080 --> 00:45:34.920
Take it. Take it for what you will.


00:45:34.920 --> 00:45:37.080
That's pretty good. Just stack overflow.


00:45:37.080 --> 00:45:41.080
Yeah. Yeah. Well, I feel like stack overflow would be we give take it to 11.


00:45:41.080 --> 00:45:45.180
Honestly, I don't use stack overflow now.


00:45:45.180 --> 00:45:46.920
Yeah. Winner.


00:45:46.920 --> 00:45:49.640
Definitely. That's funny.


00:45:49.640 --> 00:45:51.020
Well, thanks for that.


00:45:51.020 --> 00:45:53.240
You usually get pretty good about finding our jokes.


00:45:53.240 --> 00:45:54.600
So I appreciate it.


00:45:54.600 --> 00:45:57.360
And thanks, Vincent, for coming on the show.


00:45:57.360 --> 00:45:59.440
- Thanks for having me.


00:45:59.440 --> 00:46:00.280
It was fun.


00:46:00.280 --> 00:46:01.100
- I think that's a wrap.


00:46:01.100 --> 00:46:02.320
- Yeah, that is.


00:46:02.320 --> 00:46:03.200
Thanks, Brian.


00:46:03.200 --> 00:46:04.280
- Thank you. - Bye, Vincent.

