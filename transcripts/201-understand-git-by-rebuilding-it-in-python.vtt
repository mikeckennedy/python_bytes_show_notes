
00:00:00.000 --> 00:00:04.700
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.700 --> 00:00:08.900
This is episode 201, recorded September 24th.


00:00:08.900 --> 00:00:11.500
I'm Michael Kennedy and Brian is not here this week.


00:00:11.500 --> 00:00:14.800
Instead, my friend and special guest, Cecil Philip. Welcome, Cecil.


00:00:14.800 --> 00:00:18.200
Hey, hey everybody. I've been a long fan of the show.


00:00:18.200 --> 00:00:23.200
And so, you know, Brian, I'm sorry that you're not here, but I promise I'm going to do a good job and do you justice.


00:00:23.200 --> 00:00:27.200
So I'm going to do my best Brian impression today on the podcast.


00:00:27.200 --> 00:00:28.700
Beautiful, beautiful.


00:00:28.700 --> 00:00:30.700
So Cecil, you've been on the show before.


00:00:30.700 --> 00:00:33.700
You're a developer advocate at Microsoft. Is that right?


00:00:33.700 --> 00:00:35.700
Yep, still a developer advocate.


00:00:35.700 --> 00:00:40.500
And as folks can imagine, we're all at home and not traveling as much as we used to anymore,


00:00:40.500 --> 00:00:42.500
which is usually something that's attached to the job.


00:00:42.500 --> 00:00:47.700
But now we're just trying to find different ways to kind of reach out to the community


00:00:47.700 --> 00:00:52.200
and work with folks and make sure that they have what they need to just be successful and productive.


00:00:52.200 --> 00:00:55.400
Yeah, absolutely. And you're doing a lot of live streaming stuff these days


00:00:55.400 --> 00:00:57.100
rather than appearing in conferences.


00:00:57.100 --> 00:01:01.560
Yeah, we're doing a lot of live streaming, a lot of live events, and even live conferences too.


00:01:01.560 --> 00:01:07.160
I think a lot of conferences now, and you've seen this a lot as well with PyCon and tons of the other


00:01:07.160 --> 00:01:09.160
tons of other online conferences is


00:01:09.160 --> 00:01:12.440
just because we can't do it physically together like we're used to,


00:01:12.440 --> 00:01:14.440
now a lot of folks are just doing it online.


00:01:14.440 --> 00:01:17.480
So I'm sure if you look online, you see tons of


00:01:17.480 --> 00:01:20.040
register for free, here's my conference


00:01:20.040 --> 00:01:23.640
on Tuesday and Wednesday and Thursday, and everyone's just trying to find a way to connect.


00:01:23.640 --> 00:01:27.040
Yeah, it's got some interesting implications for accessibility, right?


00:01:27.040 --> 00:01:30.380
I could necessarily go to EuroPython,


00:01:30.380 --> 00:01:33.040
but I could attend the virtual one just as easily,


00:01:33.040 --> 00:01:35.040
as long as I'm willing to get up a bit early.


00:01:35.040 --> 00:01:36.200
That's kind of cool, actually.


00:01:36.200 --> 00:01:38.580
Yeah, that's one of the things I like about it the most,


00:01:38.580 --> 00:01:41.400
is that, kind of like what you said, like before,


00:01:41.400 --> 00:01:44.040
I didn't want to go buy a plane ticket to go to Australia,


00:01:44.040 --> 00:01:47.200
or, you know, somewhere that's maybe halfway around the world to me.


00:01:47.200 --> 00:01:49.740
But now I can have, maybe not the same experience,


00:01:49.740 --> 00:01:52.380
but I could still engage with that community of folks


00:01:52.380 --> 00:01:55.040
virtually by just signing into their YouTube,


00:01:55.040 --> 00:01:57.040
or their Twitch stream or whatever the case is.


00:01:57.040 --> 00:01:59.040
And I can get the content the same way.


00:01:59.040 --> 00:01:59.540
And it's great.


00:01:59.540 --> 00:02:00.040
Yeah, absolutely.


00:02:00.040 --> 00:02:02.040
So let me kick this off with our first item,


00:02:02.040 --> 00:02:05.540
where we go from Python to speak another language.


00:02:05.540 --> 00:02:08.540
A little different cultural here.


00:02:08.540 --> 00:02:12.040
So we're going to talk about talking from Python to C++.


00:02:12.040 --> 00:02:13.540
Maybe not what you thought when I said that.


00:02:13.540 --> 00:02:14.040
Really?


00:02:14.040 --> 00:02:18.040
C++ is one of these, or C really, the more low level,


00:02:18.040 --> 00:02:23.540
is one of the reasons I think Python is doing as well as it is these days, right?


00:02:23.540 --> 00:02:26.140
Like a lot of what you do in Python might be a little bit slow,


00:02:26.140 --> 00:02:27.540
but you know what?


00:02:27.540 --> 00:02:29.840
You implement part of that package in C,


00:02:29.840 --> 00:02:31.040
and then all of a sudden,


00:02:31.040 --> 00:02:33.240
it's a lot faster than things you might compare it to.


00:02:33.240 --> 00:02:34.340
And that's a lot of the magic.


00:02:34.340 --> 00:02:36.440
A lot of the data science works that way and whatnot, right?


00:02:36.440 --> 00:02:37.240
- Right. - Yeah.


00:02:37.240 --> 00:02:40.340
So there's this article that I'd like to point folks to


00:02:40.340 --> 00:02:42.540
that basically walks you through


00:02:42.540 --> 00:02:47.840
what it's like to call C and C++ code from Python.


00:02:47.840 --> 00:02:51.140
So there's a lot of things to cover that's pretty interesting.


00:02:51.140 --> 00:02:52.440
It talks about,


00:02:52.440 --> 00:02:54.840
First, what do you get when you compile C? Obviously,


00:02:54.840 --> 00:02:57.540
you get something that's executable.


00:02:57.540 --> 00:03:00.040
What it is actually different depending on the machine you're on, right?


00:03:00.040 --> 00:03:01.340
So if you're on Linux,


00:03:01.340 --> 00:03:04.840
you'll get an executable in linked format, which is ELF.


00:03:04.840 --> 00:03:07.240
On Windows, you get a portable executable.


00:03:07.240 --> 00:03:10.440
On macOS, you'll get a mock object,


00:03:10.440 --> 00:03:13.040
a mock.o, and so on.


00:03:13.040 --> 00:03:15.740
So it compiles to whatever machine instructions you need.


00:03:15.740 --> 00:03:18.840
And then, depending on what platform you're on, again,


00:03:18.840 --> 00:03:20.840
you can put that in some central location


00:03:20.840 --> 00:03:24.040
so that compiled C library can be used by Python.


00:03:24.040 --> 00:03:27.240
So on Linux, it'd be user/lib.


00:03:27.240 --> 00:03:29.440
On Windows, what do you think?


00:03:29.440 --> 00:03:32.240
Windows/system32, something like that.


00:03:32.240 --> 00:03:34.440
- System32 or something crazy like that, yeah.


00:03:34.440 --> 00:03:36.040
- Yeah, exactly. Something there.


00:03:36.040 --> 00:03:39.640
But once you put it there, then your program can find it


00:03:39.640 --> 00:03:41.640
and you can just import it.


00:03:41.640 --> 00:03:43.840
So there's different ways you can do this, right?


00:03:43.840 --> 00:03:45.440
Like you can use the C types library,


00:03:45.440 --> 00:03:48.240
which is simple, sort of, sometimes simple.


00:03:48.240 --> 00:03:50.640
And you can just go and import C types


00:03:50.640 --> 00:03:55.640
and then just say, here's a CDLL and point literally at the file,


00:03:55.640 --> 00:03:58.040
the output from compiling some C code,


00:03:58.040 --> 00:03:59.880
and import it and call it.


00:03:59.880 --> 00:04:01.480
That's pretty simple.


00:04:01.480 --> 00:04:06.280
Coming from Microsoft Word made this DLL import type of equivalent.


00:04:06.280 --> 00:04:07.560
That's why I'm not entirely sure.


00:04:07.560 --> 00:04:09.560
But there's some interesting things that you run into,


00:04:09.560 --> 00:04:11.040
like, you get this library back,


00:04:11.040 --> 00:04:15.200
but it doesn't necessarily know what the return types are, right?


00:04:15.200 --> 00:04:17.440
Like, you get a function, you call it, it returns a float.


00:04:17.440 --> 00:04:19.360
Maybe it doesn't know what to do with that.


00:04:19.360 --> 00:04:23.960
So you've got to like, as you import it, tell it, Oh, you return a float here.


00:04:23.960 --> 00:04:26.800
And here are your functions that you can call and so on.


00:04:26.800 --> 00:04:29.040
So there's a lot of interesting things you can do.


00:04:29.040 --> 00:04:33.280
If you remember your C, you have to set the calling convention, which can be really


00:04:33.280 --> 00:04:35.440
tricky, like extern C.


00:04:35.440 --> 00:04:36.280
Oh my gosh.


00:04:36.280 --> 00:04:38.200
Oh, is it standard call?


00:04:38.200 --> 00:04:40.160
Is it a C decal?


00:04:40.160 --> 00:04:42.680
I mean, there's so many variations.


00:04:42.680 --> 00:04:43.280
Do you remember this?


00:04:43.280 --> 00:04:45.640
That's like, did you ever do some C and just go, why won't this


00:04:45.640 --> 00:04:46.960
library work with that other one?


00:04:47.040 --> 00:04:50.780
I know now, like, I'm looking through this document as you're talking about it.


00:04:50.780 --> 00:04:53.740
And I'm like, Oh my gosh, this is bringing back so many memories.


00:04:53.740 --> 00:04:54.940
Oh, yeah.


00:04:54.940 --> 00:04:59.340
I mean, you remember, like, how hard these things were to get them right.


00:04:59.340 --> 00:05:04.440
And it reminds you how nice it is to work with like more modern languages like Python.


00:05:04.440 --> 00:05:09.340
So there's actually an interesting library called libffi.


00:05:09.340 --> 00:05:11.340
So this is a C library.


00:05:11.340 --> 00:05:14.140
So if you're going to write the C code, you can use libffi.


00:05:14.140 --> 00:05:17.400
And when you compile it, as you compile it for different platforms and stuff,


00:05:17.400 --> 00:05:21.840
it'll automatically figure out the calling convention for the functions at runtime.


00:05:21.840 --> 00:05:22.840
Oh, nice.


00:05:22.840 --> 00:05:23.840
So that's pretty sweet.


00:05:23.840 --> 00:05:27.740
So you can, I mean, this didn't exist to my knowledge when I was trying to do these things.


00:05:27.740 --> 00:05:28.740
That's interesting.


00:05:28.740 --> 00:05:33.240
Another thing you can do is you can add an entry point function


00:05:33.240 --> 00:05:35.740
to your code.


00:05:35.740 --> 00:05:38.240
And then Python will ask,


00:05:38.240 --> 00:05:41.440
basically, it can call that and say, what functions do you have?


00:05:41.440 --> 00:05:42.540
And what are their signatures?


00:05:42.540 --> 00:05:46.620
So there's a way to have your library kind of introduce itself over.


00:05:46.620 --> 00:05:48.620
It's kind of like providing metadata, I'm guessing.


00:05:48.620 --> 00:05:49.620
Yeah, exactly.


00:05:49.620 --> 00:05:51.620
Here's the structure of my stuff, and I'm going to give it to you.


00:05:51.620 --> 00:05:53.620
And now you can kind of understand it.


00:05:53.620 --> 00:05:56.620
Exactly, because you don't have a header file or anything like that,


00:05:56.620 --> 00:05:57.620
that defines it.


00:05:57.620 --> 00:06:01.620
It's just, here's the executable compiled functions, go, right?


00:06:01.620 --> 00:06:04.620
And so it gives you that metadata, exactly.


00:06:04.620 --> 00:06:09.620
Of course, the goal is to have C++ code that you can call from Python.


00:06:09.620 --> 00:06:16.300
And there's a Python-specific, a Python-friendly way to do this as well


00:06:16.300 --> 00:06:20.660
if you're willing to work with a Python type, so like Py object pointers and so on.


00:06:20.660 --> 00:06:24.020
And the way you would do that is you create this entry point, but it's


00:06:24.020 --> 00:06:28.020
the function name is py_init_module_name.


00:06:28.020 --> 00:06:31.780
So if it was request, it'd be py_init_request.


00:06:31.780 --> 00:06:32.900
Exactly.


00:06:32.900 --> 00:06:37.060
And so it returns all this metadata that says, here's all the C stuff,


00:06:37.060 --> 00:06:40.300
and the signatures and whatnot.


00:06:40.300 --> 00:06:43.300
So after going through all this stuff, how you write the C code and you do it,


00:06:43.300 --> 00:06:45.740
it says, you know what, maybe you just want to skip that.


00:06:45.740 --> 00:06:47.740
Yeah, can we please?


00:06:47.740 --> 00:06:49.940
Can we please? Yeah, so what you could do is


00:06:49.940 --> 00:06:52.340
you could write it in Cython,


00:06:52.340 --> 00:06:55.940
which compiles to C, which compiles to machine instructions.


00:06:55.940 --> 00:06:59.140
Or there's also boost.python.


00:06:59.140 --> 00:07:01.540
I wasn't aware of boost.python, that's pretty cool.


00:07:01.540 --> 00:07:05.820
And pybind11, which allows you to bind, I believe,


00:07:05.820 --> 00:07:09.360
to C++ 11, which is pretty cool as well.


00:07:09.360 --> 00:07:12.160
Yeah, so really nice integration stuff there.


00:07:12.160 --> 00:07:15.560
And some examples of libraries that people might know of


00:07:15.560 --> 00:07:17.560
that are written in Cython,


00:07:17.560 --> 00:07:21.160
but basically natively compiled and do awesome stuff is


00:07:21.160 --> 00:07:22.860
AIO HTTP.


00:07:22.860 --> 00:07:24.860
Oh, I didn't know that. That's cool.


00:07:24.860 --> 00:07:26.860
Yeah, uses Cython for the HTTP parsing.


00:07:26.860 --> 00:07:28.360
So that string stuff is super fast.


00:07:28.360 --> 00:07:29.860
If you do async,


00:07:29.860 --> 00:07:30.860
you can...


00:07:30.860 --> 00:07:32.860
One of the things that's interesting in Python


00:07:32.860 --> 00:07:34.860
about Python's async as a weight


00:07:34.860 --> 00:07:38.500
and a way is you can change the implementation


00:07:38.500 --> 00:07:41.220
of the event loop, right?


00:07:41.220 --> 00:07:44.820
And so one way you can do that is you can replace it with UV loop,


00:07:44.820 --> 00:07:47.540
which is based on libuv,


00:07:47.540 --> 00:07:50.460
which I always thought of as a C library,


00:07:50.460 --> 00:07:52.300
but it's actually fully written in Cython.


00:07:52.300 --> 00:07:53.660
Oh, I didn't know that either.


00:07:53.660 --> 00:07:55.060
-Really? -Yeah, that's pretty cool.


00:07:55.060 --> 00:07:56.940
Then finally, HTTP tools,


00:07:56.940 --> 00:08:00.220
bindings to node.js HTTP parser


00:08:00.220 --> 00:08:02.220
is fully written in Cython,


00:08:02.220 --> 00:08:04.740
along with Sanic, UVCore, and a bunch of other stuff.


00:08:04.740 --> 00:08:09.640
that use this library. So if your goal is to try to get a little bit lower level,


00:08:09.640 --> 00:08:12.540
maybe work with some C, make your code go faster,


00:08:12.540 --> 00:08:15.340
here's a really cool write-up of how to do all those things.


00:08:15.340 --> 00:08:19.140
That's really cool. You know, I'm a big fan of language interoperability in general.


00:08:19.140 --> 00:08:23.040
And you know, one thing I could tell you, it feels like every language


00:08:23.040 --> 00:08:25.640
knows how to work with C, at least.


00:08:25.640 --> 00:08:30.540
Like C is like the common denominator that every language knows how to talk back to.


00:08:30.540 --> 00:08:34.640
And I really wish there was a way for us to... I mean, I love C.


00:08:34.640 --> 00:08:36.640
I used to love C.


00:08:36.640 --> 00:08:38.640
But I really wish there was a way for us to


00:08:38.640 --> 00:08:40.640
have a very standard way to


00:08:40.640 --> 00:08:42.640
interact with each other a little bit better.


00:08:42.640 --> 00:08:45.140
And I remember, I think the last time that I was on the podcast,


00:08:45.140 --> 00:08:47.140
I talked about Wazzy.


00:08:47.140 --> 00:08:49.140
So I think it was WebAssembly.


00:08:49.140 --> 00:08:49.840
Yes.


00:08:49.840 --> 00:08:51.840
It's like a WebAssembly module that you could use.


00:08:51.840 --> 00:08:55.140
And now all of your code compiles down to WebAssembly.


00:08:55.140 --> 00:08:57.140
And it exposes different functions and whatnot.


00:08:57.140 --> 00:09:00.940
But now that'll be like a portable runtime that essentially,


00:09:00.940 --> 00:09:04.140
I can import it in Python, and I can import it in Java,


00:09:04.140 --> 00:09:06.740
or JavaScript or .NET or whatever the case is,


00:09:06.740 --> 00:09:08.940
because they all have that,


00:09:08.940 --> 00:09:12.620
you know, that knowledge of how to work with that WebAssembly binary,


00:09:12.620 --> 00:09:14.740
right, that portable WebAssembly thing.


00:09:14.740 --> 00:09:17.180
I should look that up. I don't know where they are with that.


00:09:17.180 --> 00:09:20.180
But I know that was the thing that folks were getting really excited about.


00:09:20.180 --> 00:09:23.580
Not just from the fact of, hey, I can run my Python code or


00:09:23.580 --> 00:09:26.060
my language Xcode in the browser, but


00:09:26.060 --> 00:09:29.460
also too, I can consume it from other languages.


00:09:29.460 --> 00:09:34.040
- That would make it convenient. - Right. If somehow you can package your code in whatever language you use


00:09:34.040 --> 00:09:37.740
in a WebAssembly format, all of a sudden it becomes interoperable


00:09:37.740 --> 00:09:40.420
with other WebAssembly libraries.


00:09:40.420 --> 00:09:43.220
Anything else that can be packaged into WebAssembly, basically, right?


00:09:43.220 --> 00:09:47.580
Right. And what's good about that is it's relatively a standards compliant way,


00:09:47.580 --> 00:09:50.660
because WebAssembly is a standards-based thing. It's not owned by


00:09:50.660 --> 00:09:53.160
a company or one particular runtime.


00:09:53.160 --> 00:09:58.300
All of us run and play in the web and use browsers and use browser technologies for one thing or the other.


00:09:58.300 --> 00:10:01.460
It's definitely something that everyone can kind of get involved in one way.


00:10:01.460 --> 00:10:03.800
Yeah, for sure. I'm super excited about that as well.


00:10:03.800 --> 00:10:06.300
Alright, moving on to the next one, your topic here.


00:10:06.300 --> 00:10:08.580
You've got something very small that's actually quite cool.


00:10:08.580 --> 00:10:11.980
Yeah, and so just kind of talking about interoperability a little bit.


00:10:11.980 --> 00:10:15.480
One of the things that we all use a lot as developers is Git.


00:10:15.480 --> 00:10:19.020
I use Git a lot and particularly in the GitHub space.


00:10:19.020 --> 00:10:22.160
Actually, I don't think I know a developer today that does not have a GitHub account.


00:10:22.160 --> 00:10:23.160
But you know, maybe that happens.


00:10:23.160 --> 00:10:27.360
Do you remember when people used to debate about what kind of version control they use?


00:10:27.360 --> 00:10:33.000
like, Oh, we use Perforce. Oh, we use Subversion. Oh, we're still on CVS. We use a wind. See,


00:10:33.000 --> 00:10:38.200
I use tortoise CVS and I got a right click. That used to be a debate. That debate is gone.


00:10:38.200 --> 00:10:43.080
It seems like I remember, man. I remember there was a debate back when Git first started


00:10:43.080 --> 00:10:47.840
to, there was a debate between Git and Mercurial because those were the two distributed version


00:10:47.840 --> 00:10:51.160
control systems. And people were like, Oh, I'm going to use this one. I'm going to use


00:10:51.160 --> 00:10:55.400
that one and trying to figure out like which one that was going to be the thing to use.


00:10:55.400 --> 00:10:58.600
And I think it's pretty safe to say that in GitHub of one.


00:10:58.600 --> 00:10:59.600
- Yeah. - Pretty much.


00:10:59.600 --> 00:11:00.600
- Yeah.


00:11:00.600 --> 00:11:01.600
- You know?


00:11:01.600 --> 00:11:02.600
- GitHub too.


00:11:02.600 --> 00:11:03.600
Yeah, GitHub's awesome.


00:11:03.600 --> 00:11:04.600
- Yeah.


00:11:04.600 --> 00:11:05.600
I think they're pretty much just one.


00:11:05.600 --> 00:11:08.560
So now this article, why I think this is really interesting is, you know, as a developer,


00:11:08.560 --> 00:11:12.920
since we, again, Git is pretty much like the standard of source control for all of our


00:11:12.920 --> 00:11:17.280
projects, it's important for us to understand how Git works, or maybe you might be curious


00:11:17.280 --> 00:11:20.140
about what the underlying internals of that looks like.


00:11:20.140 --> 00:11:23.620
And so what this is, is a really cool tutorial.


00:11:23.620 --> 00:11:28.980
interactive tutorial that you could do kind of in your browser as well where you could play around


00:11:28.980 --> 00:11:34.580
and implement git yourself your own version of git in python and i'm like oh that sounds cool like


00:11:34.580 --> 00:11:39.220
i definitely want to do that because one i think hey you're just giving me another project that


00:11:39.220 --> 00:11:44.340
i could get better at writing python but two i can also really try and understand what git does


00:11:44.340 --> 00:11:49.380
i know a lot of folks you may know a few git commands but oh man like i really don't understand


00:11:49.380 --> 00:11:53.780
what rebase does. And I don't know, what's the difference between git branch and git switch?


00:11:53.780 --> 00:11:57.780
And you know, like some of those types of things. And so I'm hoping like we could go through this


00:11:57.780 --> 00:12:02.020
tutorial. And by implementing it, we could really understand like how the underlying


00:12:02.020 --> 00:12:05.460
data structures are different and how that git database is different.


00:12:05.460 --> 00:12:10.020
That's so interesting. And thinking about understanding git by re implementing it


00:12:10.020 --> 00:12:17.220
from scratch is pretty interesting. Yeah. And I think it's worth pointing out just the format of


00:12:17.220 --> 00:12:20.940
this article tutorial thing, it's quite unique.


00:12:20.940 --> 00:12:26.260
So if you open it up on the left hand, the browser split 50/50, the left hand


00:12:26.260 --> 00:12:30.140
column is the description and message.


00:12:30.140 --> 00:12:34.340
And on the right, it's basically got a diff of the code that


00:12:34.340 --> 00:12:35.740
you're writing at each step.


00:12:35.740 --> 00:12:39.200
So it's, it doesn't look like you can execute or anything, but it's a little


00:12:39.200 --> 00:12:40.980
bit like replit or something like that.


00:12:40.980 --> 00:12:41.220
Yeah.


00:12:41.220 --> 00:12:44.980
I'm looking at this and I think I was trying to see if you could click on this


00:12:44.980 --> 00:12:46.340
thing, if it'll take you to the source.


00:12:46.700 --> 00:12:49.980
But I think this is in addition to just being a really cool topic.


00:12:49.980 --> 00:12:50.540
I think it's an


00:12:50.540 --> 00:12:51.300
Oh, it does.


00:12:51.300 --> 00:12:54.580
As you click around it, it'll, it'll reload the side to like take you to


00:12:54.580 --> 00:12:55.500
different parts in the code.


00:12:55.500 --> 00:12:55.700
Yeah.


00:12:55.700 --> 00:12:56.100
Oh, does it?


00:12:56.100 --> 00:12:56.460
Okay.


00:12:56.460 --> 00:12:56.700
Yeah.


00:12:56.700 --> 00:12:56.940
Yeah.


00:12:56.940 --> 00:12:57.460
So there we go.


00:12:57.460 --> 00:12:57.780
There you go.


00:12:57.780 --> 00:12:58.300
There it does it.


00:12:58.300 --> 00:13:01.780
But I think this is a really interesting experience just for learning in general.


00:13:01.780 --> 00:13:01.940
Right.


00:13:01.940 --> 00:13:03.020
It's very interactive.


00:13:03.020 --> 00:13:06.740
So I could read the text, the verbiage on the left hand side, and I could look at the


00:13:06.740 --> 00:13:09.340
code and I can see how it changes on the right side.


00:13:09.340 --> 00:13:13.540
So it's not just like, Hey, I'm just reading the super complex book about like


00:13:13.540 --> 00:13:19.060
like, I can actually see the code, which, you know, for folks that like to learn by seeing,


00:13:19.060 --> 00:13:22.820
it's a really good experience to be able to understand like what exactly is going on.


00:13:22.820 --> 00:13:27.220
I might have to go through this. This looks really interesting. And I might learn a couple of things


00:13:27.220 --> 00:13:28.260
by doing it for sure.


00:13:28.260 --> 00:13:32.100
Yeah, this definitely looks really cool. But now speaking in terms of about learning,


00:13:32.100 --> 00:13:36.340
like you had a topic you want to talk about, right? That has to do with learning, right?


00:13:36.340 --> 00:13:41.300
I would say you and I, probably these days we qualify as senior software engineers.


00:13:41.300 --> 00:13:42.660
I don't know.


00:13:42.660 --> 00:13:45.540
I don't really want that title on me anymore because I don't know.


00:13:45.540 --> 00:13:46.900
Sounds like I go to an office.


00:13:46.900 --> 00:13:47.620
That's my title.


00:13:47.620 --> 00:13:51.140
But nonetheless, we've been around software for a while, right?


00:13:51.140 --> 00:13:54.020
And there's this cool article by Neil


00:13:54.020 --> 00:13:57.460
Hickar who wrote it.


00:13:57.460 --> 00:14:02.180
It is an in-depth write-up of things I learned to become a senior software engineer.


00:14:02.180 --> 00:14:06.900
I love these things where people sort of look back on what they've done in their career,


00:14:06.900 --> 00:14:10.820
how it's, you know, what went right, what went wrong, and just trying to help other people


00:14:11.540 --> 00:14:16.500
shorten that cycle to get farther, faster, quicker, that kind of thing.


00:14:16.500 --> 00:14:18.260
So there's a lot of lessons he talked about.


00:14:18.260 --> 00:14:19.940
And I just wanted to cover some of them.


00:14:19.940 --> 00:14:23.540
I said it's really long, and so I'm not sure I want to go into all of it there.


00:14:23.540 --> 00:14:30.820
But so the first one was he advanced his career by growing his skills and experience


00:14:30.820 --> 00:14:34.100
using different ladders of abstraction, is how I put it.


00:14:34.100 --> 00:14:39.700
So the first year or so, he had basically learned the ins and outs of software.


00:14:39.700 --> 00:14:42.500
like he knew his language, his compiler was working,


00:14:42.500 --> 00:14:45.300
and I believe he's doing Python, so maybe not his compiler,


00:14:45.300 --> 00:14:48.200
but all the stuff that he's doing to work there


00:14:48.200 --> 00:14:50.300
is pretty much figure out the software side of things.


00:14:50.300 --> 00:14:53.900
But his software development lifecycle was like


00:14:53.900 --> 00:14:57.300
a small cog within a bigger cog and so on.


00:14:57.300 --> 00:14:58.700
So he said, "Look, there's really the


00:14:58.700 --> 00:15:01.000
the lifecycle of the product.


00:15:01.000 --> 00:15:04.000
There's the lifecycle of the infrastructure and the business,


00:15:04.000 --> 00:15:05.800
and like, working your way


00:15:05.800 --> 00:15:08.700
and sort of out of that loop


00:15:08.700 --> 00:15:10.700
to understand the bigger pieces,


00:15:10.700 --> 00:15:12.700
really helped him


00:15:12.700 --> 00:15:14.700
do more than just write code, but really


00:15:14.700 --> 00:15:16.700
be a bigger part of the team, I guess.


00:15:16.700 --> 00:15:18.700
This is really interesting, and I'm kind of


00:15:18.700 --> 00:15:20.700
scrolling through the article again as you're talking about it.


00:15:20.700 --> 00:15:22.700
And it brings up to mind


00:15:22.700 --> 00:15:24.700
a discussion that I get a lot from


00:15:24.700 --> 00:15:26.700
some of the students that we talk to,


00:15:26.700 --> 00:15:28.700
with the different engagements we do.


00:15:28.700 --> 00:15:30.700
And that's always their question.


00:15:30.700 --> 00:15:32.700
It's either, one, how do I become


00:15:32.700 --> 00:15:34.700
a good software developer, or how do


00:15:34.700 --> 00:15:36.700
I level up in my career? What are the


00:15:36.700 --> 00:15:39.260
that I need to do to step forward in my career.


00:15:39.260 --> 00:15:44.060
And sometimes I feel there's certain things that for sure you could definitely do,


00:15:44.060 --> 00:15:47.020
but then I think that's only like 50% of it.


00:15:47.020 --> 00:15:50.700
And I think there's another 50% that could be a little subjective


00:15:50.700 --> 00:15:54.300
based on the area that you're in and the region that you're in.


00:15:54.300 --> 00:15:57.100
And what are the things that you really want to do?


00:15:57.100 --> 00:15:59.100
What are the things that you really care about?


00:15:59.100 --> 00:16:01.500
Like I could tell you when I first started,


00:16:01.500 --> 00:16:05.100
honestly, I was just trying to get a job to be honest with you.


00:16:05.100 --> 00:16:09.900
I wanted to leave school, I wanted to work because being an international student,


00:16:09.900 --> 00:16:14.460
then I had to worry about like visas and green cards and all that type of stuff. And I'm like,


00:16:14.460 --> 00:16:20.060
the first person that hires me, I'm gone. That's it. But obviously that's not something you base


00:16:20.060 --> 00:16:25.500
longevity on when you think about a career. You want to think about, okay, now I'm working.


00:16:25.500 --> 00:16:32.060
And maybe I've spent a year or a year or two inside of the environment. You know how to code,


00:16:32.060 --> 00:16:38.140
you know how your deployments go, you understand your ticketing system and all the scrum meetings that you have to sit in on.


00:16:38.140 --> 00:16:41.260
But now you got to understand, well, how do I get better?


00:16:41.260 --> 00:16:44.060
And one of the things I always tell folks is,


00:16:44.060 --> 00:16:47.340
well, it's kind of like being a specialist, right?


00:16:47.340 --> 00:16:49.500
Like, what are the things that you want to get better at?


00:16:49.500 --> 00:16:51.980
Because there's so many different things to look at.


00:16:51.980 --> 00:16:55.500
What are some of the key things that really interest you?


00:16:55.500 --> 00:16:57.980
So do I want to be really good at doing security?


00:16:57.980 --> 00:17:00.380
Do I want to be really good at doing performance?


00:17:00.380 --> 00:17:05.940
Do I really want to get good at maybe microservices and distributed systems is interesting, right?


00:17:05.940 --> 00:17:10.340
Right, you get pigeonholed and people will just leave you there if you don't try to stretch.


00:17:10.340 --> 00:17:14.900
Right, but you have to want that though, right? Like you have to want to get better and then after you have that want,


00:17:14.900 --> 00:17:17.620
you got to figure out where exactly do you want to go.


00:17:17.620 --> 00:17:21.260
And for me, then the next step after that is really trying to understand,


00:17:21.260 --> 00:17:25.860
well, what are the fundamental pieces that I need to understand?


00:17:25.860 --> 00:17:29.180
Like, what are the fundamental algorithms and data structures I need to understand?


00:17:29.180 --> 00:17:32.660
And I'm not talking about like link lists and bubble sorts, that type of stuff.


00:17:32.660 --> 00:17:34.340
But like within that space, right?


00:17:34.340 --> 00:17:36.340
Like, so in when we talk about security,


00:17:36.340 --> 00:17:38.660
like what are the things I need to know about cryptography?


00:17:38.660 --> 00:17:40.780
Right? When I talk about like distributed systems,


00:17:40.780 --> 00:17:44.380
what do I need to know about networking and how networks work?


00:17:44.380 --> 00:17:45.380
You know what I mean? Like,


00:17:45.380 --> 00:17:49.660
how do I get the knowledge to understand that so now I could continue to move forward


00:17:49.660 --> 00:17:51.660
and really become like


00:17:51.660 --> 00:17:55.860
very knowledgeable and successful in that particular aspect of software development?


00:17:55.860 --> 00:17:57.860
Yeah, I think that's a really big part of it.


00:17:57.860 --> 00:18:01.140
And that's definitely some of the stuff they were touching on.


00:18:01.140 --> 00:18:05.060
I think one of the big levers you have to pull


00:18:05.060 --> 00:18:08.060
is to try to get yourself to do stuff that is uncomfortable.


00:18:08.060 --> 00:18:10.940
Like, I don't really know about continuous deployment,


00:18:10.940 --> 00:18:12.580
but we don't have a great answer for that.


00:18:12.580 --> 00:18:14.260
So I'm going to force myself to learn that


00:18:14.260 --> 00:18:16.340
and I'll volunteer to be the person to make that happen,


00:18:16.340 --> 00:18:18.260
even though I'm not totally there yet, right?


00:18:18.260 --> 00:18:21.060
But that'll get you there if you take those steps.


00:18:21.060 --> 00:18:23.060
Another one that Neil pointed out was


00:18:23.060 --> 00:18:26.060
learning what people around him are doing.


00:18:26.060 --> 00:18:29.660
So not just what are the developers doing, but what are the project managers,


00:18:29.660 --> 00:18:32.060
the salespeople, the analysts, and so on.


00:18:32.060 --> 00:18:34.380
You know, for you working in a company like Microsoft,


00:18:34.380 --> 00:18:36.620
there's layers and layers and layers of that, right?


00:18:36.620 --> 00:18:37.820
Yeah, for sure.


00:18:37.820 --> 00:18:40.780
And you know, there's good and bad things to that.


00:18:40.780 --> 00:18:43.100
One of the good things I like about that is


00:18:43.100 --> 00:18:46.380
that there's always people that you could ask a question to.


00:18:46.380 --> 00:18:49.020
And sometimes you might be in an environment that that's not really the case.


00:18:49.020 --> 00:18:53.100
Sometimes you're in a company and everyone is at the same level that you are.


00:18:53.100 --> 00:18:53.420
Yeah.


00:18:53.420 --> 00:18:57.420
you can't talk to other people, at least, or maybe you don't have access to talk to other people.


00:18:57.420 --> 00:19:01.340
But when you're in an environment that there's a lot of folks that you can ask questions to,


00:19:01.340 --> 00:19:06.140
one of the best things that you could do for your career is make sure that you spend time with them,


00:19:06.140 --> 00:19:11.740
however that works, to really understand like, how does their world kind of move,


00:19:11.740 --> 00:19:15.580
particularly with something that you're interested in. So again, like, hey, I don't know a lot about


00:19:15.580 --> 00:19:20.060
security, and I have a security feature I need to work on. And it's something I really want to dive


00:19:20.060 --> 00:19:25.180
deep into, let me go and find the PM that does security for this thing. Or let me go and find


00:19:25.180 --> 00:19:29.420
the person that works on the Docker integration for this thing or the Python integration for this


00:19:29.420 --> 00:19:35.020
thing and really have like a deep conversation with them. And the good part about it, if that


00:19:35.020 --> 00:19:39.260
person is willing to sit down with you and give you the time, that is like gold. Like it is the


00:19:39.260 --> 00:19:44.220
best thing ever to be able to have someone pass on knowledge to you. I say that too, because we


00:19:44.220 --> 00:19:49.180
move forward and as we become quote unquote senior engineers, we have to remember too that the folks


00:19:49.180 --> 00:19:52.780
that are coming that are not so senior, they're going to want to do the same thing for us, right?


00:19:52.780 --> 00:19:55.900
And we have to have that mindset of being willing to share that information,


00:19:55.900 --> 00:20:00.060
not try and keep it inside and take it with us when we leave the company kind of thing.


00:20:00.060 --> 00:20:04.940
Yeah. Well, the other flip side is, you know, the best way to learn something is to teach it often.


00:20:04.940 --> 00:20:06.540
And that's your opportunity. Yeah.


00:20:06.540 --> 00:20:07.740
Yeah, exactly. Exactly.


00:20:07.740 --> 00:20:12.780
Another interesting lesson was strategies for making the day-to-day more efficient,


00:20:12.780 --> 00:20:15.900
which I suppose the larger the company, the more important this can be.


00:20:16.540 --> 00:20:18.400
And Neil said some good habits.


00:20:18.400 --> 00:20:23.640
Notice was never leave a meeting without making a decision or having a next action to do.


00:20:23.640 --> 00:20:27.200
Meetings drive me crazy and it's so often you just have a meeting because


00:20:27.200 --> 00:20:29.940
we always meet on Mondays for half an hour even if we don't have to.


00:20:29.940 --> 00:20:31.940
No, please, not again.


00:20:31.940 --> 00:20:35.000
Decide who's getting a thing done because if it's not


00:20:35.000 --> 00:20:39.000
on somebody's responsibility to get it done, it's probably not getting done.


00:20:39.000 --> 00:20:42.740
And then document design decisions made during a project.


00:20:42.740 --> 00:20:45.140
So that was pretty cool. Those are good ones.


00:20:45.140 --> 00:20:48.900
Yeah, acquiring new tools for thought and mental models.


00:20:48.900 --> 00:20:52.900
So one example in the software space would be like,


00:20:52.900 --> 00:20:57.700
I was recently struggling with the domain of a lot of complex business logic,


00:20:57.700 --> 00:21:00.500
and all these weird edge cases and stuff.


00:21:00.500 --> 00:21:06.820
And so I found the Domain Driven Design book by Eric Evans and that whole space


00:21:06.820 --> 00:21:10.940
and said, oh, there's a whole world over here around like modeling objects and relationships


00:21:10.940 --> 00:21:15.100
that I didn't understand, or didn't know about and dive into that stuff.


00:21:15.100 --> 00:21:16.220
Pretty interesting.


00:21:16.220 --> 00:21:17.220
Here's my favorite.


00:21:17.220 --> 00:21:18.900
And this has driven me crazy


00:21:18.900 --> 00:21:21.460
about so many different things.


00:21:21.460 --> 00:21:22.940
Protect your Slack.


00:21:22.940 --> 00:21:24.380
So not your Slack,


00:21:24.380 --> 00:21:26.380
the not competitor,


00:21:26.380 --> 00:21:27.900
not your channel,


00:21:27.900 --> 00:21:30.020
but Slack as in,


00:21:30.020 --> 00:21:33.100
I've got a little bit of time in my day-to-day schedule


00:21:33.100 --> 00:21:35.220
that is not clearly assigned, right?


00:21:35.220 --> 00:21:39.420
Not like I'm spending the next two hours on this feature


00:21:39.420 --> 00:21:41.620
because I agreed to it in the sprint


00:21:41.620 --> 00:21:43.980
and then I'm done and I have to move on


00:21:43.980 --> 00:21:47.820
to the very next thing, right? If it's so tightly packed that you don't have the


00:21:47.820 --> 00:21:54.860
the freedom to explore, like, that didn't quite work the way I expected it. Let me dig into that.


00:21:54.860 --> 00:21:59.420
Or what if we re implemented it this way? Let me just try that idea. Or I don't know anything about


00:21:59.420 --> 00:22:04.220
domain driven design. So let me learn, let me spend the next hour reading about that, and see


00:22:04.220 --> 00:22:08.540
if that'll help us later. Right? If all those opportunities are taken away and your time's like


00:22:08.540 --> 00:22:16.100
squished just back to back to back, you end up just doing 20 years of the same thing instead of actually growing and learning.


00:22:16.100 --> 00:22:37.980
I'm a big fan of companies that allow their employees, developers or not, time to sit down and experiment and try out new things and, and whatever, you know, prior to coming to Microsoft, I was in a company that they used to have, like, every time there's a release, right after the release, they had this thing. Oh, man, what was it called? I don't remember what it was called. But


00:22:38.020 --> 00:22:41.220
It was like an event. It was like a whole company event


00:22:41.220 --> 00:22:43.220
where for like the next week


00:22:43.220 --> 00:22:45.460
all they could do was just work on side projects.


00:22:45.460 --> 00:22:46.620
Like it was a whole week.


00:22:46.620 --> 00:22:48.860
- Oh wow. - Obviously the service folks


00:22:48.860 --> 00:22:50.860
had to be on service.


00:22:50.860 --> 00:22:53.900
But for everyone else, like the PMs, the engineers, the developers,


00:22:53.900 --> 00:22:56.700
they spent this entire week just hacking on stuff.


00:22:56.700 --> 00:22:57.820
And then the next week,


00:22:57.820 --> 00:22:59.820
there was a day where they gave presentations


00:22:59.820 --> 00:23:01.340
and everyone talked about what they did.


00:23:01.340 --> 00:23:03.580
And it was a whole showcase, but it was only internal.


00:23:03.580 --> 00:23:05.580
It was just for the folks inside of the company.


00:23:05.580 --> 00:23:09.980
And not only did you have time to do that and learn and try new things out but


00:23:09.980 --> 00:23:14.060
you know there were prizes right? Like there were whether it was stock or money or


00:23:14.060 --> 00:23:17.580
like just you know there was stuff that you got which was really cool.


00:23:17.580 --> 00:23:20.940
So now it shows like how much the company like really believed in you.


00:23:20.940 --> 00:23:25.100
And so again I bring it up because I think it's an important one not only do you give your employees,


00:23:25.100 --> 00:23:27.100
if anyone is an employer that's listening,


00:23:27.100 --> 00:23:31.420
that you give your employers, employees the ability and space to learn


00:23:31.420 --> 00:23:35.940
but also incentivize them to do it, right? Like really encourage them and let them know that you're supporting it.


00:23:35.940 --> 00:23:38.900
Regardless of whether that means it's something


00:23:38.900 --> 00:23:41.140
that's going to go in your product or not,


00:23:41.140 --> 00:23:44.340
like the fact is like they're becoming better, right? And so if you,


00:23:44.340 --> 00:23:49.700
all of your employees are becoming better, like that means that they're going to be able to do better work for you at the end of the day.


00:23:49.700 --> 00:23:51.700
And so I think that's always a really cool thing to do.


00:23:51.700 --> 00:23:52.700
Yeah, absolutely.


00:23:52.700 --> 00:23:56.260
I think this concept of Slack is super important and so much


00:23:56.260 --> 00:23:59.900
people looking from the outside, they try to squash it and compress


00:23:59.900 --> 00:24:02.960
people's time down and I think it's in the end, it's not so good.


00:24:02.960 --> 00:24:04.240
So there's a ton of other stuff.


00:24:04.240 --> 00:24:07.380
I want to just throw out really quick one last thing, take a time.


00:24:07.380 --> 00:24:08.820
So we don't spend too much time on this.


00:24:08.820 --> 00:24:12.040
The last was this idea of building up superpowers.


00:24:12.040 --> 00:24:17.160
So are you getting into the source code of some project, some package and


00:24:17.160 --> 00:24:18.940
the documentation isn't enough.


00:24:18.940 --> 00:24:19.280
All right.


00:24:19.280 --> 00:24:22.900
You have a quest that's to go read the open source code and spend some time


00:24:22.900 --> 00:24:26.560
like learning from the code, not from the docs, you want to quickly build a


00:24:26.560 --> 00:24:27.980
mental model for code you're looking at.


00:24:28.220 --> 00:24:31.480
reading open source code again, embracing fear,


00:24:31.480 --> 00:24:34.760
you're something you're not confident or feeling comfortable with,


00:24:34.760 --> 00:24:37.260
do it as a side project. That's your quest.


00:24:37.260 --> 00:24:40.960
Confidence to express ignorance or not knowing, like,


00:24:40.960 --> 00:24:43.960
fine, right? We all got to ask questions we don't know and


00:24:43.960 --> 00:24:47.060
get over it and practice with that.


00:24:47.060 --> 00:24:49.060
There's just a lot of good takeaways from here.


00:24:49.060 --> 00:24:51.060
Like we really just scratched the surface on this.


00:24:51.060 --> 00:24:54.560
Sure. And kind of going back to that point about reading the open source code,


00:24:54.560 --> 00:24:58.060
I think that's one of the reasons too why GitHub is so popular.


00:24:58.060 --> 00:25:01.700
because it made searching source codes so easy.


00:25:01.700 --> 00:25:05.220
And I'm not gonna lie, there's a lot of times throughout my day that


00:25:05.220 --> 00:25:07.060
I'm thinking, hey,


00:25:07.060 --> 00:25:10.700
the documentation is not the best for whatever it is that I'm looking at.


00:25:10.700 --> 00:25:13.180
I'm going to search for like the class or the method.


00:25:13.180 --> 00:25:16.780
I literally just look for the class name and the method and filter by language.


00:25:16.780 --> 00:25:19.620
Just to see, well, I just want to see how are other people using it.


00:25:19.620 --> 00:25:22.780
And, you know, what are the types of issues that are created around it?


00:25:22.780 --> 00:25:25.580
And hey, should I wrap this in a try catch or


00:25:25.580 --> 00:25:29.020
you know, like, what kind of parameters do you pass in? Like, how do you deal with these things?


00:25:29.020 --> 00:25:32.020
And being able to kind of look and see how other folks do it


00:25:32.020 --> 00:25:35.820
gives you some ideas now, okay, well, this is how this thing was meant to use.


00:25:35.820 --> 00:25:39.500
Now, the flip side of that is that, you know, you might run into a bad example.


00:25:39.500 --> 00:25:43.100
But again, that's a learning experience, right? Like, you run it and you'll figure out,


00:25:43.100 --> 00:25:46.300
and then, you know, we're working out. - Yeah, exactly. That's great.


00:25:46.300 --> 00:25:48.460
So, speaking of learning,


00:25:48.460 --> 00:25:50.460
you guys have a pretty cool project,


00:25:50.460 --> 00:25:53.500
a data source, I guess, to learn from, or context to learn from.


00:25:53.500 --> 00:25:59.340
Yeah, yeah. So what's happened over the past, oh man, over months and months and months.


00:25:59.340 --> 00:26:05.180
So Microsoft actually started a project where they're working along with NASA to create these


00:26:05.180 --> 00:26:09.740
learning modules on Microsoft Learn where you can kind of go in and learn how to do


00:26:09.740 --> 00:26:15.580
like machine learning with Python, but you could do it within the context of exploring space,


00:26:15.580 --> 00:26:20.700
which is really cool. So you could do different things like classifying space rocks and predicting


00:26:20.700 --> 00:26:25.900
weather, it'll help you like predict, you know, rocket launch delays based on the weather,


00:26:25.900 --> 00:26:27.700
like tons of great stuff.


00:26:27.700 --> 00:26:31.740
And so there's a, I'm trying to think about how many of them there's a 123.


00:26:31.740 --> 00:26:36.980
Yeah, there's at least six learning modules, again, all based on Python and AI, with machine


00:26:36.980 --> 00:26:40.620
learning and NASA, where you can kind of kind of go in and learn all these different things.


00:26:40.620 --> 00:26:42.860
So definitely recommend that folks go in and check it out.


00:26:42.860 --> 00:26:44.420
It's 100% free.


00:26:44.420 --> 00:26:47.460
So you could, you know, just click on the link and kind of go through them yourselves,


00:26:47.460 --> 00:26:49.620
you don't have to sign up for anything, which I love.


00:26:49.620 --> 00:26:52.060
Like I love free learning resources, right?


00:26:52.060 --> 00:26:53.920
But yeah, I thought this was really cool.


00:26:53.920 --> 00:26:56.660
And so if anyone's a space buff at all,


00:26:56.660 --> 00:26:58.080
like this is be a great adventure


00:26:58.080 --> 00:26:59.240
for you to kind of go through


00:26:59.240 --> 00:27:01.500
and kind of play around with some data from NASA.


00:27:01.500 --> 00:27:02.340
- Yeah, I think that's super cool.


00:27:02.340 --> 00:27:03.560
- To learn how to unset space.


00:27:03.560 --> 00:27:05.960
- Yeah, and so much of being successful,


00:27:05.960 --> 00:27:07.700
especially when you're learning early,


00:27:07.700 --> 00:27:11.120
is about having context that inspires you.


00:27:11.120 --> 00:27:11.960
- Yeah.


00:27:11.960 --> 00:27:13.160
- 'Cause we all get stuck or things get frustrating.


00:27:13.160 --> 00:27:14.400
You're like, why won't it,


00:27:14.400 --> 00:27:16.760
why is this function not doing what it's supposed to do?


00:27:16.760 --> 00:27:18.920
But if you're like, and if I get it to work,


00:27:18.920 --> 00:27:21.160
I get to understand a space rock or something like that.


00:27:21.160 --> 00:27:23.200
All of a sudden it's like, yeah, that's not so frustrating.


00:27:23.200 --> 00:27:24.040
- Right, right.


00:27:24.040 --> 00:27:25.680
And I think NASA also has,


00:27:25.680 --> 00:27:28.280
for folks that want to get a little bit more into NASA,


00:27:28.280 --> 00:27:31.640
NASA also has like, I think it's called NASA Socials,


00:27:31.640 --> 00:27:34.200
which is like a national social club where you could,


00:27:34.200 --> 00:27:36.760
again, work along with other folks in a community.


00:27:36.760 --> 00:27:38.160
Back before social distancing,


00:27:38.160 --> 00:27:40.600
you could actually go to a social events


00:27:40.600 --> 00:27:41.900
and you just learn different things


00:27:41.900 --> 00:27:43.600
about the work that they're doing with NASA.


00:27:43.600 --> 00:27:44.920
So that's also really cool too.


00:27:44.920 --> 00:27:47.200
I think you could do those social events online.


00:27:47.200 --> 00:27:49.260
So if you're interested, probably like,


00:27:49.260 --> 00:27:50.460
hey, maybe you learned a little bit


00:27:50.460 --> 00:27:51.580
in doing some of these courses


00:27:51.580 --> 00:27:53.980
and you wanna engage with other like-minded folks


00:27:53.980 --> 00:27:55.680
that are into space exploration,


00:27:55.680 --> 00:27:57.900
but they don't necessarily work at NASA,


00:27:57.900 --> 00:27:59.860
you know, that might be another thing to definitely check out.


00:27:59.860 --> 00:28:00.780
- Yeah, absolutely.


00:28:00.780 --> 00:28:03.580
The next one I wanna cover has to do with performance.


00:28:03.580 --> 00:28:06.180
And I don't know if you've ever had this experience,


00:28:06.180 --> 00:28:08.600
but I have definitely had it where


00:28:08.600 --> 00:28:10.180
the code is going slower than I expect.


00:28:10.180 --> 00:28:12.420
And I'm like, oh, it's got to be this part of the code


00:28:12.420 --> 00:28:13.700
that is so slow.


00:28:13.700 --> 00:28:16.300
And then I profile it or I try to fix it.


00:28:16.300 --> 00:28:18.100
It's absolutely not, it has nothing to do with that.


00:28:18.100 --> 00:28:19.740
That's like 5%. It's somewhere else.


00:28:19.740 --> 00:28:22.240
It's completely somewhere else.


00:28:22.240 --> 00:28:23.240
Have you had this experience?


00:28:23.240 --> 00:28:24.740
Yeah, and you know what happens?


00:28:24.740 --> 00:28:26.340
It's always the database.


00:28:26.340 --> 00:28:27.700
[laughter]


00:28:27.700 --> 00:28:29.300
-Have you heard that? -Why are there no indexes?


00:28:29.300 --> 00:28:30.440
People always say that.


00:28:30.440 --> 00:28:33.540
There's like, "Oh, you have a performance problem?"


00:28:33.540 --> 00:28:34.740
It's always the database.


00:28:34.740 --> 00:28:37.740
I know it's not always the database, but I totally get what you're saying.


00:28:37.740 --> 00:28:39.500
There's definitely cases where...


00:28:39.500 --> 00:28:42.000
Because who else would know your code better than you would?


00:28:42.000 --> 00:28:45.100
And so if you're thinking, "Oh, man, if this is where the problem is,


00:28:45.100 --> 00:28:46.360
- This has to be where it's going. - Yeah.


00:28:46.360 --> 00:28:47.700
Well, we just have such a...


00:28:47.700 --> 00:28:52.560
Often we have a bad conceptualization of what is fast and what is slow.


00:28:52.560 --> 00:28:54.560
- Yeah. - Because, I don't know, computers are so fast.


00:28:54.560 --> 00:28:55.940
- It's a little bit crazy. - Yeah.


00:28:55.940 --> 00:29:00.540
But profiling is usually the first step to figure out what that answer is.


00:29:00.540 --> 00:29:02.540
And then if you're going to change it, you can see, did it get better?


00:29:02.540 --> 00:29:04.420
Did it get worse? Where did it get better and worse? And so on.


00:29:04.420 --> 00:29:06.420
- Right. - So if you're doing Django,


00:29:06.420 --> 00:29:08.920
I want to talk about profiling requests there


00:29:08.920 --> 00:29:10.920
because there's a couple of interesting options.


00:29:10.920 --> 00:29:16.720
So there's one library that will let you plug in


00:29:16.720 --> 00:29:21.160
basically cProfile, which is the low-level cProfiler from Python


00:29:21.160 --> 00:29:24.440
that ships with it right into your request.


00:29:24.440 --> 00:29:27.520
So if you plug it in, you can just do a, what is it?


00:29:27.520 --> 00:29:30.800
Question or an ampersand prof, a question mark prof


00:29:30.800 --> 00:29:33.480
at the end of URL, and you'll get a profiling output.


00:29:33.480 --> 00:29:34.480
- Oh, nice. - It's pretty cool.


00:29:34.480 --> 00:29:37.480
So there's a thing called django-cProfile-middleware.


00:29:37.480 --> 00:29:38.480
You just install that.


00:29:38.480 --> 00:29:43.160
And then if it's installed, you can put basically prof in the query string and you'll get that,


00:29:43.160 --> 00:29:45.720
which is great, and that gives you an output there.


00:29:45.720 --> 00:29:53.120
Or you can put ampersand download and it'll download, you can visualize it graphically with snake viz.


00:29:53.120 --> 00:29:58.200
So that's even better. So you get like this download profiling report for your request.


00:29:58.200 --> 00:29:59.560
All that's pretty good.


00:29:59.560 --> 00:30:05.120
But what would be a lot better is to be able to like visually dive into the request and


00:30:05.120 --> 00:30:06.720
do things like understand,


00:30:06.720 --> 00:30:08.080
talked about the database being slow,


00:30:08.080 --> 00:30:09.760
like understanding the time you're spending


00:30:09.760 --> 00:30:11.760
in the database versus other places.


00:30:11.760 --> 00:30:14.320
So there's this thing called Django Silk.


00:30:14.320 --> 00:30:16.320
And you also add that as a middleware.


00:30:16.320 --> 00:30:19.920
But then it keeps track of all the requests on your site.


00:30:19.920 --> 00:30:21.920
Hopefully you're doing this in development, not production.


00:30:21.920 --> 00:30:24.160
It keeps track of all of those.


00:30:24.160 --> 00:30:25.360
And then it'll show you,


00:30:25.360 --> 00:30:27.920
like, this is the general time for this URL.


00:30:27.920 --> 00:30:29.920
Click on it, it'll show you things like,


00:30:29.920 --> 00:30:32.160
these are the database queries that were run,


00:30:32.160 --> 00:30:35.040
actually, as SQL, even though using RM,


00:30:35.040 --> 00:30:36.500
It'll show you the SQL that was run,


00:30:36.500 --> 00:30:38.700
and it'll show you how much time the database is spending,


00:30:38.700 --> 00:30:40.700
how much time other parts of your code are spending.


00:30:40.700 --> 00:30:43.900
So, yeah, a really cool way to explore


00:30:43.900 --> 00:30:47.360
the performance from all the tiers of your


00:30:47.360 --> 00:30:49.100
- Django app. - Yeah, that's really cool.


00:30:49.100 --> 00:30:51.840
And I always find database interceptors


00:30:51.840 --> 00:30:53.900
to be a really powerful concept,


00:30:53.900 --> 00:30:55.900
like across all languages, right?


00:30:55.900 --> 00:30:57.400
Like being able to see, like,


00:30:57.400 --> 00:30:59.200
let's say I'm using SQLAlchemy,


00:30:59.200 --> 00:31:01.800
or I'm using Mongo engine or something like that.


00:31:01.800 --> 00:31:04.600
I'd really want to know what's the query


00:31:04.600 --> 00:31:07.640
that I'm sending over, like, what is it that I'm asking for?


00:31:07.640 --> 00:31:09.800
And versus what I wrote in code, right?


00:31:09.800 --> 00:31:11.440
And what am I actually getting back?


00:31:11.440 --> 00:31:14.740
And being able to see, oh, man, like, this thing is doing like,


00:31:14.740 --> 00:31:16.740
four or five joins, like, I don't need to do that.


00:31:16.740 --> 00:31:19.140
Like, I could try and optimize this query a little bit more


00:31:19.140 --> 00:31:22.280
to one, make it more performant from a database perspective,


00:31:22.280 --> 00:31:26.580
and two, obviously, passing on that performance over to my application.


00:31:26.580 --> 00:31:28.880
Or I thought I did one database request.


00:31:28.880 --> 00:31:30.080
Why are there 51?


00:31:30.080 --> 00:31:32.080
Right, right, exactly.


00:31:32.080 --> 00:31:34.600
that lazy property that we forgot about


00:31:34.600 --> 00:31:37.740
every single time through that loop, we're hitting the database again.


00:31:37.740 --> 00:31:38.880
Such a bad idea.


00:31:38.880 --> 00:31:42.720
Maybe we should do a sub join, like eager load sort of thing.


00:31:42.720 --> 00:31:43.440
Yeah, for sure.


00:31:43.440 --> 00:31:45.640
Yeah, so I think this is really nice.


00:31:45.640 --> 00:31:46.640
Yeah, it is really nice.


00:31:46.640 --> 00:31:50.120
And this is one of the scenarios too where I think it's interesting to get


00:31:50.120 --> 00:31:51.400
like a log collector.


00:31:51.400 --> 00:31:53.720
So, you know, there's tons of services that do this,


00:31:53.720 --> 00:31:57.000
but like something like Datadog or Rollbar or something like that,


00:31:57.000 --> 00:32:01.080
that not only capture your logs, but allow you to kind of go in and search through them,


00:32:01.080 --> 00:32:04.560
search and filter your logs. So you could say, okay, well, hey,


00:32:04.560 --> 00:32:07.360
I'm having performance problems, but it only happens at two


00:32:07.360 --> 00:32:10.920
o'clock in the afternoon, for some reason, or, you know, my


00:32:10.920 --> 00:32:13.520
memory always spikes within these hours of the day, and


00:32:13.520 --> 00:32:17.320
being able to have a history of logs and be able to query them,


00:32:17.320 --> 00:32:20.160
and then get that rich information. And I don't know


00:32:20.160 --> 00:32:23.600
whether you plot it or turn into a report or something like that.


00:32:23.600 --> 00:32:25.640
Being able to do that, I think is hugely important.


00:32:25.640 --> 00:32:28.400
Yeah, absolutely. I totally agree. And being able to


00:32:28.400 --> 00:32:31.600
visualize it, right? So often having the picture is what you need.


00:32:31.600 --> 00:32:34.200
Sometimes though, it's good to just get a text.


00:32:34.200 --> 00:32:37.920
Yeah, that's true. Sometimes it's good to just get a message


00:32:37.920 --> 00:32:39.120
or get like an alert.


00:32:39.120 --> 00:32:42.120
Hey, Michael, the website is going down, you need to get here ASAP.


00:32:42.120 --> 00:32:43.360
Exactly.


00:32:43.360 --> 00:32:46.240
And so that kind of leads into the next one. That was a good segue. I like that.


00:32:46.240 --> 00:32:46.880
Thank you.


00:32:46.880 --> 00:32:50.320
So that can lead into the next topic I did want to talk about.


00:32:50.320 --> 00:32:54.040
At the time that we're recording this, this week is actually Microsoft Ignite,


00:32:54.040 --> 00:32:56.840
which is, you know, one of the conferences that we do and


00:32:56.840 --> 00:33:00.120
It's all online, we announce products and tons of stuff like that.


00:33:00.120 --> 00:33:03.120
Well, last time that we got to actually see each other


00:33:03.120 --> 00:33:07.080
in person and hang out a little bit was that Microsoft Ignite in Florida.


00:33:07.080 --> 00:33:10.360
And I was blown away at how ginormous that conference is.


00:33:10.360 --> 00:33:11.960
Like you were on Talk Python then.


00:33:11.960 --> 00:33:14.680
And Python. That's 30,000 people.


00:33:14.680 --> 00:33:18.880
So I guess it's 30,000 video streams now.


00:33:18.880 --> 00:33:23.280
Yeah, I remember that last time we were all together, it was in Orlando.


00:33:23.280 --> 00:33:25.280
And Dan Bader was there, remember?


00:33:25.280 --> 00:33:27.880
- Yeah, that's right. - Yeah, episodes with Dan.


00:33:27.880 --> 00:33:30.280
I don't even know what the numbers are this year.


00:33:30.280 --> 00:33:32.320
That would be interesting to find out. I should look that up.


00:33:32.320 --> 00:33:33.320
- Yeah, for sure. - See like,


00:33:33.320 --> 00:33:34.760
what those numbers kind of seem like.


00:33:34.760 --> 00:33:37.860
So it's been a year and you guys have a new announcement?


00:33:37.860 --> 00:33:39.760
Yes, it's been a year and so there's a new service.


00:33:39.760 --> 00:33:42.400
And so this is Azure Communication Services,


00:33:42.400 --> 00:33:43.400
which is cool.


00:33:43.400 --> 00:33:45.560
One, because you know, we have a new service, but two, like,


00:33:45.560 --> 00:33:46.940
I had no idea this was coming out.


00:33:46.940 --> 00:33:49.400
I kind of found out like everyone else did on social media.


00:33:49.400 --> 00:33:52.000
So this is Azure Communication Services.


00:33:52.000 --> 00:33:54.740
And essentially, it's a way for you to add,


00:33:54.740 --> 00:33:57.120
well, communication services to your application.


00:33:57.120 --> 00:34:00.140
It does a lot of cool things like it does voice,


00:34:00.140 --> 00:34:02.700
it does video, it does text messaging,


00:34:02.700 --> 00:34:04.260
and you can obviously receive and


00:34:04.260 --> 00:34:06.820
send phone calls and things like that, which is really cool.


00:34:06.820 --> 00:34:08.960
But what's even better about this,


00:34:08.960 --> 00:34:11.100
more specifically for the folks of this show,


00:34:11.100 --> 00:34:14.060
is that there's a Python SDK on day one.


00:34:14.060 --> 00:34:16.980
I guess we could call it day zero since it's not officially out yet.


00:34:16.980 --> 00:34:20.040
But on today, in preview,


00:34:20.040 --> 00:34:21.220
while the service is in preview,


00:34:21.220 --> 00:34:22.420
there's a Python SDK,


00:34:22.420 --> 00:34:23.780
there's a JavaScript SDK,


00:34:23.780 --> 00:34:26.500
and there's also a .NET SDK.


00:34:26.500 --> 00:34:28.980
And I looked at the code for the Python SDK,


00:34:28.980 --> 00:34:31.540
and there, I almost want to say like there's nothing there.


00:34:31.540 --> 00:34:33.060
I mean, obviously, there's something there, right?


00:34:33.060 --> 00:34:35.060
But most of the code is like,


00:34:35.060 --> 00:34:37.700
create a directory, create a virtual environment,


00:34:37.700 --> 00:34:40.820
install pip, SMS client that send message.


00:34:40.820 --> 00:34:42.820
I'm like, wait, that's it?


00:34:42.820 --> 00:34:46.180
Yeah, it's like literally the meaningful bit is like five lines of code.


00:34:46.180 --> 00:34:49.060
Right, exactly. And so it looks like a really easy thing


00:34:49.060 --> 00:34:51.860
to kind of get started with. And so I haven't played with it yet.


00:34:51.860 --> 00:34:54.160
Again, I just literally discovered this yesterday,


00:34:54.160 --> 00:34:55.560
kind of like everyone else did.


00:34:55.560 --> 00:34:58.260
So I'm really interested in plugging it into some of my demos


00:34:58.260 --> 00:35:00.260
and seeing what the experience is really like.


00:35:00.260 --> 00:35:01.460
Yeah, this looks really cool.


00:35:01.460 --> 00:35:05.260
If you want to add text integration, like text alerts to your app,


00:35:05.260 --> 00:35:06.560
it seems like a really good choice.


00:35:06.560 --> 00:35:08.160
Right, and so then we could plug in.


00:35:08.160 --> 00:35:11.860
Imagine if we could plug that into the Django profiler.


00:35:11.860 --> 00:35:14.960
And then as things are happening, it sends us text message alerts.


00:35:14.960 --> 00:35:17.660
And so now we can know, "Uh-oh, there's a problem with the website now."


00:35:17.660 --> 00:35:19.260
That's right. It's running slow.


00:35:19.260 --> 00:35:20.560
- The memory is too high. - Exactly.


00:35:20.560 --> 00:35:21.560
- Go check it out. - Exactly.


00:35:21.560 --> 00:35:23.560
Yeah, this is awesome.


00:35:23.560 --> 00:35:25.560
Nice one. People can check that out.


00:35:25.560 --> 00:35:27.560
I guess that's it for our items for the week.


00:35:27.560 --> 00:35:29.560
Quick shout out. I just


00:35:29.560 --> 00:35:31.560
say I was on, you mentioned Dan Bader,


00:35:31.560 --> 00:35:33.560
I was on RealPythons podcast


00:35:33.560 --> 00:35:35.560
with Christopher, the host there, last week.


00:35:35.560 --> 00:35:37.560
So I'll be sure to link to that. It was a really


00:35:37.560 --> 00:35:39.560
fun look back on


00:35:39.560 --> 00:35:41.560
the trends and stuff I've


00:35:41.560 --> 00:35:43.560
seen over the last five years of


00:35:43.560 --> 00:35:45.560
podcasting in the Python space. So if you want to hear about that


00:35:45.560 --> 00:35:47.560
chat, follow up on that show.


00:35:47.560 --> 00:35:49.560
And then, how about you? Anything else you want to share?


00:35:49.560 --> 00:35:55.080
One of the things that our team does is they work with students from different universities across the world.


00:35:55.080 --> 00:36:00.000
And they join a program that we have that's called the Microsoft Student Ambassador Program.


00:36:00.000 --> 00:36:05.640
Now if you're familiar with like Microsoft MVPs or Docker Captains or


00:36:05.640 --> 00:36:08.600
what is it called GDEs, Google Developer Experts,


00:36:08.600 --> 00:36:13.000
it's something very similar to that, but it's just this time we're talking about students, right?


00:36:13.000 --> 00:36:17.640
And so, you know, these are students that are going out and they're creating content and doing sessions and


00:36:17.640 --> 00:36:23.160
workshops and writing blog posts and different types of things within their school and within their communities.


00:36:23.160 --> 00:36:26.760
And so we have them join this program where


00:36:26.760 --> 00:36:31.820
we're able to support them a little more and give them Azure credits and Visual Studio things and


00:36:31.820 --> 00:36:34.860
LinkedIn learning things and some private events.


00:36:34.860 --> 00:36:38.160
Yeah, they have little private events and mentorship sessions and things like that.


00:36:38.160 --> 00:36:41.640
But it's a really great way for us to kind of engage with the students, right?


00:36:41.640 --> 00:36:44.320
And really just understand like, what are they doing? What do they care about?


00:36:44.320 --> 00:36:46.700
What are some of the ways that we can affect their learning?


00:36:46.700 --> 00:36:51.360
And so what I wanted to do was share the link to the Microsoft Student Ambassador website.


00:36:51.360 --> 00:36:57.140
And you can actually kind of go here and you can search by region, by language, by area of focus,


00:36:57.140 --> 00:37:00.140
and you can kind of see what the students are doing, which I think is really great.


00:37:00.140 --> 00:37:05.440
And if anyone that's listening is a student as well, a university student that's interested in joining the program,


00:37:05.440 --> 00:37:09.120
you know, you go ahead and hit that big blue Apply Now button.


00:37:09.120 --> 00:37:12.720
And you know, go ahead and submit an application for the next for the next cohort.


00:37:12.720 --> 00:37:16.220
I think that'd be a great opportunity for students. So people should check that out.


00:37:16.220 --> 00:37:18.220
All right, let's finish this off with a joke.


00:37:18.220 --> 00:37:20.860
And we're better to go than XKCD.


00:37:20.860 --> 00:37:21.900
I love XKCD.


00:37:21.900 --> 00:37:23.660
I know, they got some good stuff.


00:37:23.660 --> 00:37:26.700
So this one is entitled Dependency.


00:37:26.700 --> 00:37:29.260
And I think it just captures


00:37:29.260 --> 00:37:33.180
the whole bring together different languages and technologies


00:37:33.180 --> 00:37:35.660
and especially a bunch of open source libraries.


00:37:35.660 --> 00:37:38.860
Do you want to describe this picture for the listeners?


00:37:38.860 --> 00:37:41.500
You can always grab graphical stuff for our jokes.


00:37:41.500 --> 00:37:44.060
Sure. So this reminds me of a game of Jenga.


00:37:44.060 --> 00:37:45.260
That's what I'm thinking.


00:37:45.260 --> 00:37:47.540
Like a super Jenga.


00:37:47.540 --> 00:37:49.060
This is like recursive Jenga.


00:37:49.060 --> 00:37:50.060
Yes.


00:37:50.060 --> 00:37:52.060
That's what this looks like.


00:37:52.060 --> 00:37:54.220
And so there's some big blocks and there's some little blocks.


00:37:54.220 --> 00:37:57.300
And it looks like as the closer you get to the top,


00:37:57.300 --> 00:38:01.260
they start to become a lot more specific with like the type of blocks that are up there.


00:38:01.260 --> 00:38:04.540
And then at the bottom, it's much bigger at the bottom.


00:38:04.540 --> 00:38:07.060
And you know, that looks like that could be trouble.


00:38:07.060 --> 00:38:09.260
Oh, and on the right side,


00:38:09.260 --> 00:38:11.940
there's one little part that's holding everything up.


00:38:11.940 --> 00:38:14.340
And it's really, really small and fragile.


00:38:14.340 --> 00:38:19.140
At the top it says all modern digital infrastructure.


00:38:19.140 --> 00:38:24.580
And at the bottom, it says the little tiny stick is a project some random person in Nebraska


00:38:24.580 --> 00:38:28.840
has been thanklessly maintaining since 2003.


00:38:28.840 --> 00:38:29.840
That's amazing.


00:38:29.840 --> 00:38:30.840
I love this.


00:38:30.840 --> 00:38:36.260
And the hover over message is someday image magic will finally break for good and we'll


00:38:36.260 --> 00:38:43.700
all have a long period of scrambling as we try to reassemble civilization from the rubble.


00:38:43.700 --> 00:38:45.620
To me, I think of this as OpenSSL.


00:38:45.620 --> 00:38:50.180
That little stick, that's OpenSSL down there.


00:38:50.180 --> 00:38:55.740
There was like one person who maintained it and everything seemed to be built upon it.


00:38:55.740 --> 00:38:59.780
And when there was that bug that needed to fix, it was a huge problem.


00:38:59.780 --> 00:39:02.380
I find anytime I try to home...


00:39:02.380 --> 00:39:08.420
So I use a Mac and every time I homebrew install OpenSSL and it updates the version that's


00:39:08.420 --> 00:39:11.820
on my system, like everything just stops working.


00:39:11.820 --> 00:39:13.820
I can't install any pip packages.


00:39:13.820 --> 00:39:15.820
You're like, "No, don't do it."


00:39:15.820 --> 00:39:17.820
Nothing works. I'm like, "What happened to my virtual environment?


00:39:17.820 --> 00:39:19.820
What's going on here? Why can't I install anything?"


00:39:19.820 --> 00:39:21.820
Then I'm like, "Oh, open SSL."


00:39:21.820 --> 00:39:25.320
Yeah, exactly. That's the stick that can bring it all down.


00:39:25.320 --> 00:39:27.820
Well, thank you for being on the show, Cecil.


00:39:27.820 --> 00:39:30.320
It was great to catch up with you and you had a lot of good stuff to share.


00:39:30.320 --> 00:39:31.820
Hey, thank you for having me on.


00:39:31.820 --> 00:39:35.320
And Brian, I know you're not here, but I hope I did you a service.


00:39:35.320 --> 00:39:37.320
And I hope you come back soon.


00:39:37.320 --> 00:39:40.320
And also, too, I didn't get to say this in the beginning.


00:39:40.320 --> 00:39:42.920
Congratulations on 200 episodes.


00:39:42.920 --> 00:39:44.920
Well, over 200 at this point.


00:39:44.920 --> 00:39:47.560
Remember, I listened to episode 199.


00:39:47.560 --> 00:39:50.520
I'm like, wow, has it been that many episodes already?


00:39:50.520 --> 00:39:51.280
Like, it's crazy.


00:39:51.280 --> 00:39:53.280
Yeah, that's coming up on like four years almost.


00:39:53.280 --> 00:39:54.040
It's insane.


00:39:54.040 --> 00:39:54.720
Wow.


00:39:54.720 --> 00:39:55.480
That's awesome.


00:39:55.480 --> 00:39:56.720
Well, congratulations to you both, man.


00:39:56.720 --> 00:39:58.480
That's a great achievement for podcasting.


00:39:58.480 --> 00:39:59.400
Yeah, thanks a bunch.


00:39:59.400 --> 00:40:00.800
And take care.


00:40:00.800 --> 00:40:01.440
Take care.


00:40:01.440 --> 00:40:03.280
Thank you for listening to Python Bytes.


00:40:03.280 --> 00:40:05.760
Follow the show on Twitter via @pythonbytes.


00:40:05.760 --> 00:40:08.720
That's Python Bytes as in B-Y-T-E-S.


00:40:08.720 --> 00:40:11.920
and get the full show notes at pythonbytes.fm.


00:40:11.920 --> 00:40:16.000
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.


00:40:16.000 --> 00:40:18.800
We're always on the lookout for sharing something cool.


00:40:18.800 --> 00:40:22.000
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:40:22.000 --> 00:40:25.600
Thank you for listening and sharing this podcast with your friends and colleagues.

