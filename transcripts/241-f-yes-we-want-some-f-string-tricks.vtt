
00:00:00.000 --> 00:00:01.960
>> Hello and welcome to Python Bytes,


00:00:01.960 --> 00:00:05.840
where we deliver Python news and headlines directly to your earbuds.


00:00:05.840 --> 00:00:08.000
This is Episode 241,


00:00:08.000 --> 00:00:11.760
recorded July 7, 2021, and I'm Brian Okken.


00:00:11.760 --> 00:00:12.960
>> Hey, I'm Michael Kennedy.


00:00:12.960 --> 00:00:15.340
>> I'm new here. I'm Jay.


00:00:15.340 --> 00:00:17.960
>> Hi, Jay. Thanks for coming.


00:00:17.960 --> 00:00:20.720
Tell us a little bit about who you are.


00:00:20.720 --> 00:00:22.560
>> Yeah. I'm Jay Miller.


00:00:22.560 --> 00:00:25.180
I'm a developer advocate for Elastic,


00:00:25.180 --> 00:00:28.480
a company that does search using Elasticsearch and


00:00:28.480 --> 00:00:31.280
many other fine tools that we create.


00:00:31.280 --> 00:00:34.600
I spend a lot of time working on podcasts,


00:00:34.600 --> 00:00:38.320
shooting video, helping other podcasters,


00:00:38.320 --> 00:00:39.500
which we'll talk about later,


00:00:39.500 --> 00:00:42.000
and yelling at Michael and


00:00:42.000 --> 00:00:45.200
Brian as they're podcasting and they can't hear me.


00:00:45.200 --> 00:00:47.160
Yeah, that's what I do.


00:00:47.160 --> 00:00:49.440
>> I would totally love to hear one of those.


00:00:49.440 --> 00:00:51.280
Just record yourself yelling at


00:00:51.280 --> 00:00:54.080
our podcast at the same time, that'd be great.


00:00:54.080 --> 00:00:56.240
But welcome. Thanks.


00:00:56.240 --> 00:00:58.440
You're kicking us off today, Michael.


00:00:58.440 --> 00:00:59.800
of where we're starting.


00:00:59.800 --> 00:01:02.360
- Well, we're gonna start with some automation here.


00:01:02.360 --> 00:01:06.680
And I previously had covered that if you go over to GitHub,


00:01:06.680 --> 00:01:08.280
I'm not logged in, I guess it's not gonna work.


00:01:08.280 --> 00:01:11.520
But if you go to GitHub and you forked a repo,


00:01:11.520 --> 00:01:14.600
so for example, if you forked CPython,


00:01:14.600 --> 00:01:16.680
if you forked FastAPI,


00:01:16.680 --> 00:01:18.920
or you know, whatever project it is you forked,


00:01:18.920 --> 00:01:21.280
all of those things are under pretty active development.


00:01:21.280 --> 00:01:25.160
And very quickly, your fork will get out of sync


00:01:25.160 --> 00:01:26.600
with what's called the upstream,


00:01:26.600 --> 00:01:28.140
the thing that it was forked from.


00:01:28.140 --> 00:01:31.100
And GitHub recently added this ability,


00:01:31.100 --> 00:01:35.100
which we talked about to go to a repo and press a button.


00:01:35.100 --> 00:01:37.020
It says your fork is behind.


00:01:37.020 --> 00:01:38.580
Would you like to catch it up?


00:01:38.580 --> 00:01:40.900
And you can click a button and boom, it'll catch it up.


00:01:40.900 --> 00:01:44.060
So, well, that's neat, but wouldn't it be nicer


00:01:44.060 --> 00:01:45.700
if you didn't have to do that?


00:01:45.700 --> 00:01:47.580
If it just did that on its own.


00:01:47.580 --> 00:01:49.860
Like sometimes you fork something


00:01:49.860 --> 00:01:52.300
and you're actively making a bunch of changes to it


00:01:52.300 --> 00:01:54.540
and there might be merge conflicts and all sorts of stuff.


00:01:54.540 --> 00:01:57.040
But a lot of times I would bet the majority of the time


00:01:57.040 --> 00:02:00.500
People say, "That's neat, I wanna save that for myself


00:02:00.500 --> 00:02:02.280
just so I'm sure I've got it


00:02:02.280 --> 00:02:03.540
and I can do whatever I want


00:02:03.540 --> 00:02:04.920
no matter what happens to it, right?"


00:02:04.920 --> 00:02:06.520
Maybe we depend on Flask


00:02:06.520 --> 00:02:08.520
and who knows what could happen with Flask?


00:02:08.520 --> 00:02:11.400
Probably nothing, but let's just fork it just in case, right?


00:02:11.400 --> 00:02:13.360
And you just want that to stay in sync.


00:02:13.360 --> 00:02:18.040
So here is an article or walkthrough by Yash Walia.


00:02:18.040 --> 00:02:20.980
Oh, it says, "Three easy steps to auto-sync


00:02:20.980 --> 00:02:24.120
your forked repo with the upstream,


00:02:24.120 --> 00:02:26.200
the origin thing that it came from."


00:02:26.200 --> 00:02:29.080
Now, of course, you could go to a command line


00:02:29.080 --> 00:02:30.600
and run a bunch of steps to do this,


00:02:30.600 --> 00:02:33.000
but what this does is it uses GitHub Actions.


00:02:33.000 --> 00:02:35.740
So you come down here and you can go to GitHub Actions.


00:02:35.740 --> 00:02:38.420
And basically, when you're choosing a GitHub Action,


00:02:38.420 --> 00:02:41.120
there's like this marketplace or this catalog


00:02:41.120 --> 00:02:43.540
of pre-built actions that you can choose from


00:02:43.540 --> 00:02:44.920
as templates or whatever.


00:02:44.920 --> 00:02:46.540
And then it opens up a text file


00:02:46.540 --> 00:02:50.000
that you basically type in the bits that you need changed.


00:02:50.000 --> 00:02:52.080
So you go to the GitHub Actions


00:02:52.080 --> 00:02:56.640
And there's one called fork sync with upstream action


00:02:56.640 --> 00:02:59.000
from the actions marketplace.


00:02:59.000 --> 00:03:01.720
And you can see it says on the schedule,


00:03:01.720 --> 00:03:04.720
once every day at 7 a.m.


00:03:04.720 --> 00:03:08.480
What we're gonna do is we're gonna run on Ubuntu,


00:03:08.480 --> 00:03:09.880
guessing Docker image.


00:03:09.880 --> 00:03:13.640
It's going to check out the, your project.


00:03:13.640 --> 00:03:16.840
And then it's going to pull the upstream changes.


00:03:16.840 --> 00:03:18.560
It's gonna add the upstream origin,


00:03:18.560 --> 00:03:21.120
gonna line up the branches, do the checkout,


00:03:21.120 --> 00:03:23.920
and then just merge that in and push it back.


00:03:23.920 --> 00:03:25.720
So pretty straightforward to do.


00:03:25.720 --> 00:03:28.920
I ran this on some projects and, you know,


00:03:28.920 --> 00:03:31.800
one of the recent changes at GitHub and moves


00:03:31.800 --> 00:03:35.040
is to get away from like master branch terminology.


00:03:35.040 --> 00:03:36.400
And now that's all called main,


00:03:36.400 --> 00:03:39.840
but I had some that when I forked it previously


00:03:39.840 --> 00:03:41.240
and it was master and it became main,


00:03:41.240 --> 00:03:42.580
I had some challenges trying to like,


00:03:42.580 --> 00:03:46.800
I think I just chose poor examples to try to work from.


00:03:46.800 --> 00:03:49.120
So I didn't quite get this working perfectly,


00:03:49.120 --> 00:03:52.000
but people with more GitHub action experience than I have,


00:03:52.000 --> 00:03:53.000
I'm sure they can make it work.


00:03:53.000 --> 00:03:55.040
So this seems like a really cool way to just say,


00:03:55.040 --> 00:03:56.400
yes, I wanna fork something,


00:03:56.400 --> 00:03:59.560
and please just stay up to date.


00:03:59.560 --> 00:04:01.080
- This is definitely neat for something


00:04:01.080 --> 00:04:03.740
where you're actively working on it a lot.


00:04:03.740 --> 00:04:07.280
I think if you're just trying to train something out


00:04:07.280 --> 00:04:11.160
and forking it for a little play yard thing,


00:04:11.160 --> 00:04:13.480
I definitely wouldn't turn this on,


00:04:13.480 --> 00:04:17.560
but with a team where you're all working on the same code,


00:04:17.560 --> 00:04:18.880
you definitely want something like this.


00:04:18.880 --> 00:04:21.720
>> I hadn't really thought about it from the team perspective,


00:04:21.720 --> 00:04:25.600
because a lot of the Git flow with Teams thing is fork it,


00:04:25.600 --> 00:04:28.040
make changes, and do a PR.


00:04:28.040 --> 00:04:33.240
Also, sometimes people just create feature branches and do a PR within the repo.


00:04:33.240 --> 00:04:36.840
But if your mode is to create your own repo,


00:04:36.840 --> 00:04:39.120
and then do the PRs back to the main repo,


00:04:39.120 --> 00:04:41.020
I can see that this being really helpful.


00:04:41.020 --> 00:04:47.000
>> Yeah. We use a method in GitLab where the main repo


00:04:47.000 --> 00:04:49.880
has to know where all the forks are,


00:04:49.880 --> 00:04:51.560
but it doesn't push every time there's


00:04:51.560 --> 00:04:54.320
an update to protected branches.


00:04:54.320 --> 00:04:55.800
>> I see. That's cool.


00:04:55.800 --> 00:04:58.280
>> I was thinking about using something like this


00:04:58.280 --> 00:05:00.860
for some of the projects that I do,


00:05:00.860 --> 00:05:03.440
where there are folks that will take


00:05:03.440 --> 00:05:05.260
datasets and they're just stored as


00:05:05.260 --> 00:05:07.840
CSV files and they're sitting in repos.


00:05:07.840 --> 00:05:10.720
I'm like, well, if I have access to this data and I want to


00:05:10.720 --> 00:05:15.100
do some project with Elon or another tool that I use,


00:05:15.100 --> 00:05:19.060
then I have to then go and just manually download


00:05:19.060 --> 00:05:23.820
their CSV file and update it every time I'm about to present on that dataset.


00:05:23.820 --> 00:05:25.140
Whereas if I just say, "Hey,


00:05:25.140 --> 00:05:29.700
I can fork their code and then build my project off of their repo,


00:05:29.700 --> 00:05:34.580
and then set this up so that anytime they update that one area,


00:05:34.580 --> 00:05:36.540
it's just always up-to-date for me.


00:05:36.540 --> 00:05:37.580
I don't have to think about it.


00:05:37.580 --> 00:05:39.580
I don't have to go in and go, "Oh, hey, was there an update?"


00:05:39.580 --> 00:05:42.100
It's just constantly running in the background.


00:05:42.100 --> 00:05:44.180
I know you mentioned, Mike, at the beginning,


00:05:44.180 --> 00:05:47.220
GitHub is working to make a lot of this easier.


00:05:47.220 --> 00:05:50.780
I mean, I feel like their mission now that they control


00:05:50.780 --> 00:05:54.980
like 90 percent of the Git surface out there on the Internet


00:05:54.980 --> 00:05:58.900
is to just make lives easier for the people that are using their products.


00:05:58.900 --> 00:06:03.700
So I think that stuff like this, stuff like having just a simple notification


00:06:03.700 --> 00:06:07.940
that says, hey, this, you know, your upstream branch is, you know, ahead of you.


00:06:07.940 --> 00:06:10.540
Click here and we'll we'll get everything merged in.


00:06:10.780 --> 00:06:14.100
and the less GitHub commands I have to try to put in to


00:06:14.100 --> 00:06:18.220
remember that I am going to mess up 100 percent of the time, the better.


00:06:18.220 --> 00:06:20.860
>> Yeah. It's so close to having this built-in.


00:06:20.860 --> 00:06:22.460
You've got the button that says,


00:06:22.460 --> 00:06:24.020
right now sync this,


00:06:24.020 --> 00:06:25.960
if it just had a checkbox or something,


00:06:25.960 --> 00:06:28.980
and just keep doing that when you see these changes.


00:06:28.980 --> 00:06:32.560
Like basically install this automatically for me, that'd be fantastic.


00:06:32.560 --> 00:06:33.740
Maybe when you fork it,


00:06:33.740 --> 00:06:36.060
I want to fork it and I want it to stay up to date.


00:06:36.060 --> 00:06:39.220
I guess probably the hesitation is certain things,


00:06:39.220 --> 00:06:40.980
it requires certain behaviors.


00:06:40.980 --> 00:06:43.080
For example, you shouldn't be making


00:06:43.080 --> 00:06:45.780
direct changes to the branch that you're


00:06:45.780 --> 00:06:48.220
thinking with because you might end up with merge conflicts.


00:06:48.220 --> 00:06:50.260
You have to work on a separate branch and I don't know,


00:06:50.260 --> 00:06:51.480
it probably gets complicated, but I would


00:06:51.480 --> 00:06:52.920
love to see this more automatic.


00:06:52.920 --> 00:06:53.740
>> Yeah, that's cool.


00:06:53.740 --> 00:06:56.320
>> Brad, I'm trying to remember what the next topic was.


00:06:56.320 --> 00:06:57.500
My memory is not that good.


00:06:57.500 --> 00:06:59.620
What do you? You know, don't you?


00:06:59.620 --> 00:07:02.060
>> Yeah, memory usage.


00:07:02.060 --> 00:07:03.780
You actually have a talk about this,


00:07:03.780 --> 00:07:04.860
don't you, about memory?


00:07:04.860 --> 00:07:07.300
>> I do. I've spoken about it before for sure.


00:07:07.300 --> 00:07:11.380
>> Yeah. This is a cool article by Itamar,


00:07:11.380 --> 00:07:13.120
I think his name is Itamar, is that right?


00:07:13.120 --> 00:07:13.620
>> Yeah.


00:07:13.620 --> 00:07:15.540
>> Anyway, it's a nice,


00:07:15.540 --> 00:07:16.960
easy to follow discussion.


00:07:16.960 --> 00:07:22.600
But there's a cool example he goes through where it's


00:07:22.600 --> 00:07:28.540
just a neat one-liner to allocate three gigs of memory.


00:07:28.540 --> 00:07:31.080
It's a neat thing with NumPy,


00:07:31.080 --> 00:07:42.360
just allocating a byte array or 1024 by 1024 by 1024 by three matrix.


00:07:42.360 --> 00:07:45.680
Some clever math there, you get three gigs.


00:07:45.680 --> 00:07:50.660
But it actually works and then it goes through and uses PSUtil


00:07:50.660 --> 00:07:56.160
to read the memory and figure out how much is there.


00:07:56.160 --> 00:07:59.980
I paused at this point when I was reading the article to go and


00:07:59.980 --> 00:08:02.220
find out what all this stuff does.


00:08:02.220 --> 00:08:05.540
When allocating a ones array,


00:08:05.540 --> 00:08:09.600
you can NumPy as a way to just pre-allocate a bunch of ones,


00:08:09.600 --> 00:08:12.140
which is neat, and you give it a shape


00:08:12.140 --> 00:08:15.160
of what the vector shape is that you wanted in.


00:08:15.160 --> 00:08:17.320
But then also this process stuff,


00:08:17.320 --> 00:08:22.100
it's an RSS and I'm used to RSS being really simple syndication.


00:08:22.100 --> 00:08:27.080
No, RSS is resident set size,


00:08:27.080 --> 00:08:30.380
which essentially translates to the resident memory,


00:08:30.380 --> 00:08:33.140
which is essentially how much RAM you're using.


00:08:33.140 --> 00:08:35.300
Anyway, how much RAM are you using?


00:08:35.300 --> 00:08:37.860
We're using three gigs, a little bit more.


00:08:37.860 --> 00:08:42.520
Then he does something that I was surprised by,


00:08:42.520 --> 00:08:44.720
goes out and just opens a couple of browsers,


00:08:44.720 --> 00:08:47.460
Windows, and then goes back and checks again,


00:08:47.460 --> 00:08:49.060
and suddenly it's down,


00:08:49.060 --> 00:08:50.140
it's way down.


00:08:50.140 --> 00:08:53.820
I tried this and I can't get it to go really far down.


00:08:53.820 --> 00:08:58.220
That's because your computer is managing memory and


00:08:58.220 --> 00:09:00.220
taking some stuff out of RAM and putting it on


00:09:00.220 --> 00:09:03.220
disk and saving it till later.


00:09:03.220 --> 00:09:05.340
>> I see. It's using the memory,


00:09:05.340 --> 00:09:09.180
but it's not currently actively loaded as RAM.


00:09:09.180 --> 00:09:09.620
>> Yeah.


00:09:09.620 --> 00:09:10.620
>> Got you.


00:09:10.620 --> 00:09:13.580
>> So basically, this is


00:09:13.580 --> 00:09:15.700
a little bit of a tutorial on how memory works with


00:09:15.700 --> 00:09:17.620
your computer and what the difference between


00:09:17.620 --> 00:09:22.100
allocated memory is and peak allocated memory and resident memory.


00:09:22.100 --> 00:09:24.900
And the allocated and peak allocated is like the max


00:09:24.900 --> 00:09:26.800
that's allocated at the time.


00:09:26.800 --> 00:09:30.940
And it's kind of too much to go into in this conversation,


00:09:30.940 --> 00:09:33.240
but it's a really interesting discussion.


00:09:33.240 --> 00:09:35.060
And he also talks about how to measure these


00:09:35.060 --> 00:09:37.460
using what the PSU tell for one.


00:09:37.460 --> 00:09:40.660
And then also for the peak allocated memory,


00:09:40.660 --> 00:09:43.200
he used a profiler called fill.


00:09:43.200 --> 00:09:46.140
So I thought I learned a lot


00:09:46.140 --> 00:09:47.980
in just a few minutes reading this.


00:09:47.980 --> 00:09:48.980
- Yeah, very nice.


00:09:48.980 --> 00:09:50.980
Yeah, NMR is doing all sorts of cool stuff


00:09:50.980 --> 00:09:55.460
with memory analysis and profilers and whatnot.


00:09:55.460 --> 00:09:59.720
>> There's a surprise in here of if you fill it with ones,


00:09:59.720 --> 00:10:01.120
you actually get three gigs,


00:10:01.120 --> 00:10:03.380
but if you do the same thing with zeros,


00:10:03.380 --> 00:10:05.160
you get nothing.


00:10:05.160 --> 00:10:08.700
Python and NumPy figure, it's just zeros.


00:10:08.700 --> 00:10:10.940
We'll just remember that there are zeros


00:10:10.940 --> 00:10:13.420
and until you actually do something with it,


00:10:13.420 --> 00:10:14.540
we won't allocate it.


00:10:14.540 --> 00:10:16.660
>> It's like a lazy allocation or something?


00:10:16.660 --> 00:10:17.780
>> Yeah, I guess.


00:10:17.780 --> 00:10:20.540
>> Yeah, interesting. What I was going to say is,


00:10:20.540 --> 00:10:24.860
Another thing that's tricky is like this is using PSUtil.process.memory


00:10:24.860 --> 00:10:28.540
to analyze it. It's just what, how much memory is the process using,


00:10:28.540 --> 00:10:32.860
which is not always the right way to think about how much memory you're


00:10:32.860 --> 00:10:36.540
sort of demanding, because the allocation in Python,


00:10:36.540 --> 00:10:39.740
you know, you allocate in blocks, big blocks of memory,


00:10:39.740 --> 00:10:42.460
and then the blocks are managed in pools,


00:10:42.460 --> 00:10:43.980
and then the pools are managed in arenas.


00:10:43.980 --> 00:10:46.860
And there's a lot of pre-allocation and then reuse,


00:10:46.860 --> 00:10:49.020
but you end up with like over-allocation


00:10:49.020 --> 00:10:51.780
and then eventually filling those up with things.


00:10:51.780 --> 00:10:55.860
And so it gets pretty interesting about actually


00:10:55.860 --> 00:10:59.100
understanding precisely how much memory and what's using it.


00:10:59.100 --> 00:11:02.300
It's not quite as straightforward as just how much process memory


00:11:02.300 --> 00:11:03.180
is being used.


00:11:03.180 --> 00:11:05.500
But that's still a decent proxy, right?


00:11:05.500 --> 00:11:10.660
I just want to know how I can subscribe to that RSS feed.


00:11:10.660 --> 00:11:11.180
I know.


00:11:11.180 --> 00:11:13.780
I had the same thought when I saw it.


00:11:13.780 --> 00:11:14.380
All right.


00:11:14.380 --> 00:11:15.500
Jay, you got the next one.


00:11:15.500 --> 00:11:16.900
What we got here?


00:11:16.900 --> 00:11:17.420
All right.


00:11:17.420 --> 00:11:23.180
This originally came from a video that I saw trying to solve a problem that I had.


00:11:23.180 --> 00:11:26.620
I had to do some deep searching to figure out whether or not we'd


00:11:26.620 --> 00:11:28.680
talked about it before if you all talked about it before.


00:11:28.680 --> 00:11:31.360
But we all know f-strings now.


00:11:31.360 --> 00:11:34.000
We love f-strings. f-strings are awesome.


00:11:34.000 --> 00:11:36.340
f-strings can do a lot.


00:11:36.340 --> 00:11:41.460
Sometimes folks don't realize how much f-strings can do.


00:11:41.460 --> 00:11:44.980
Like for instance, did you know if you put an equal sign after a value,


00:11:44.980 --> 00:11:48.660
it will actually give you the variable that you've provided,


00:11:48.660 --> 00:11:50.600
equals, and then whatever the value is,


00:11:50.600 --> 00:11:52.220
which I think is awesome when it comes to


00:11:52.220 --> 00:11:54.780
logging and figuring out other information.


00:11:54.780 --> 00:11:58.660
But one thing I did not know is that you could use


00:11:58.660 --> 00:12:04.260
F-strings to format date-time objects just right in the F-string.


00:12:04.260 --> 00:12:04.460
>> Nice.


00:12:04.460 --> 00:12:10.540
>> You don't have to do like date-time.stringFformat,


00:12:10.540 --> 00:12:13.220
or all that stuff. You can just do F-string,


00:12:13.220 --> 00:12:19.140
the date time variable and then the F string format code


00:12:19.140 --> 00:12:21.420
that you would use to format it normally.


00:12:21.420 --> 00:12:23.980
That's over here in this.


00:12:23.980 --> 00:12:27.180
If I just scroll down, you can see here where in this example,


00:12:27.180 --> 00:12:28.940
they use just date time,


00:12:28.940 --> 00:12:32.940
date time now, and then now colon, the format.


00:12:32.940 --> 00:12:37.700
I saw that and my mind was blown because that means I now have to


00:12:37.700 --> 00:12:40.340
go back through a bunch of code and


00:12:40.340 --> 00:12:43.020
remove all of the string format like


00:12:43.020 --> 00:12:46.060
parsing and just throw it directly into the datetime field.


00:12:46.060 --> 00:12:48.980
I'm kidding. I'll also just throw out there,


00:12:48.980 --> 00:12:51.220
sometimes you want to have that stuff


00:12:51.220 --> 00:12:53.780
separated so that it can be used elsewhere,


00:12:53.780 --> 00:12:55.820
and you don't have to constantly rewrite it.


00:12:55.820 --> 00:13:00.220
But we now have another way to format our datetimes.


00:13:00.220 --> 00:13:04.380
But sadly, it still probably sucks with dealing with


00:13:04.380 --> 00:13:07.780
time zones because datetimes are hard.


00:13:07.780 --> 00:13:11.580
>> They are hard. I think it's totally non-obvious that you can have


00:13:11.580 --> 00:13:15.980
variable colon some format string and an F-string, but it's really nice.


00:13:15.980 --> 00:13:19.840
The one that I use the most is colon comma for digit grouping.


00:13:19.840 --> 00:13:22.680
I'm like, here's two million such and such,


00:13:22.680 --> 00:13:24.740
and I wanted to do two comma,


00:13:24.740 --> 00:13:26.820
three digits comma, three digits.


00:13:26.820 --> 00:13:28.700
>> I knew that you could do something like that.


00:13:28.700 --> 00:13:31.100
I didn't know that that was how you did it.


00:13:31.100 --> 00:13:35.260
Thank you for adding that to my list of things you can do with F-strings.


00:13:35.260 --> 00:13:40.980
>> Yeah. I know when you spoke about Brian is to do like the variable equals,


00:13:40.980 --> 00:13:43.660
which Jay alluded to where it prints out


00:13:43.660 --> 00:13:48.340
the name of the variable equals the value of the variable. Do you use that often?


00:13:48.340 --> 00:13:54.140
>> I use it all the time because I'm a printf debugger person.


00:13:54.140 --> 00:13:56.460
>> Let's see some comments from the live stream.


00:13:56.460 --> 00:13:59.660
Hey Magnus, FString is cool.


00:13:59.660 --> 00:14:04.380
I find selecting between repper and string and FString is really useful.


00:14:04.380 --> 00:14:05.680
That's very neat.


00:14:05.680 --> 00:14:10.680
Dean, hey Dean, how can I keep the formatting as a variable?


00:14:10.680 --> 00:14:12.640
- Can't you just assign it as a variable?


00:14:12.640 --> 00:14:14.720
Just say-- - Can you use it


00:14:14.720 --> 00:14:15.720
in the F string?


00:14:15.720 --> 00:14:18.320
Probably. - Maybe you've got to call


00:14:18.320 --> 00:14:20.520
str of the variable, I don't know.


00:14:20.520 --> 00:14:23.640
- Oh man, well that's where you start getting the bang art,


00:14:23.640 --> 00:14:27.800
like the exclamation point R to just force it


00:14:27.800 --> 00:14:31.280
to do a repper on whatever you provided.


00:14:31.280 --> 00:14:33.560
Again, not saying that you should do it that way,


00:14:33.560 --> 00:14:36.400
But I mean, probably could.


00:14:36.400 --> 00:14:38.920
>> Yeah, definitely.


00:14:38.920 --> 00:14:40.440
Sam out there in live streams says,


00:14:40.440 --> 00:14:41.560
"How have I never heard of these?"


00:14:41.560 --> 00:14:43.360
Yes, I know. It's amazing.


00:14:43.360 --> 00:14:44.600
Amazing, amazing. All right.


00:14:44.600 --> 00:14:49.240
I want to throw in a quick thing I want to add to that really quick, f-strings.


00:14:49.240 --> 00:14:53.040
If you find yourself with a bunch of code that has been around for years,


00:14:53.040 --> 00:14:55.960
pre 3.6 and you're like,


00:14:55.960 --> 00:14:58.440
it's got who knows how many variations of


00:14:58.440 --> 00:15:02.440
formatting strings in it and you just want them all to be f-strings,


00:15:02.440 --> 00:15:05.340
You can use flint, F-L-Y-N-T.


00:15:05.340 --> 00:15:07.660
Run that against the top level of your directory.


00:15:07.660 --> 00:15:09.580
Boom, everything's f-strings.


00:15:09.580 --> 00:15:14.080
It looks great. I did this on like 20,000 lines of Python code project.


00:15:14.080 --> 00:15:15.900
It had one error, I submitted it to them,


00:15:15.900 --> 00:15:18.440
they fixed it, and yeah, it was really neat.


00:15:18.440 --> 00:15:19.540
>> That's cool.


00:15:19.540 --> 00:15:20.940
>> Cool, cool, indeed.


00:15:20.940 --> 00:15:23.340
All right. What's the next one here?


00:15:23.340 --> 00:15:25.180
I guess I got the next one, don't I, Brian?


00:15:25.180 --> 00:15:25.660
>> Yeah.


00:15:25.660 --> 00:15:28.180
>> Cool. Well, this one I went back a little bit,


00:15:28.180 --> 00:15:30.700
back and forth on whether or not I actually wanted to feature this,


00:15:30.700 --> 00:15:34.060
'cause it's a little bit recursive, I guess.


00:15:34.060 --> 00:15:35.860
So I did a talk for Manning.


00:15:35.860 --> 00:15:39.660
They had a developer productivity conference talk


00:15:39.660 --> 00:15:40.500
or a conference.


00:15:40.500 --> 00:15:41.900
Jay, were you part of that?


00:15:41.900 --> 00:15:43.100
- I was not part.


00:15:43.100 --> 00:15:44.940
I am hearing about this for the first time


00:15:44.940 --> 00:15:45.780
and I'm very upset. - I feel like you should've


00:15:45.780 --> 00:15:46.600
been part of this.


00:15:46.600 --> 00:15:47.860
I know, like how did you not bring me here


00:15:47.860 --> 00:15:49.380
with your podcast and all?


00:15:49.380 --> 00:15:52.780
So the conference was interesting.


00:15:52.780 --> 00:15:54.180
There was some really neat talks.


00:15:54.180 --> 00:15:56.300
There were some other talks that I'm not really sure


00:15:56.300 --> 00:15:58.940
abided by the beam of the conference.


00:15:58.940 --> 00:16:00.340
They were just like, "Well, here's a random tech talk."


00:16:00.340 --> 00:16:02.260
I was like, oh, okay, well, but that's not productivity.


00:16:02.260 --> 00:16:04.380
Anyway, I tried to abide by the theme.


00:16:04.380 --> 00:16:07.980
So I came up with a talk called 10 Tips


00:16:07.980 --> 00:16:10.260
and Tools You Can Adopt in 15 Minutes or Less


00:16:10.260 --> 00:16:12.740
to Level Up Your Developer Productivity.


00:16:12.740 --> 00:16:15.060
So really what I wanna do is just give a quick shout out


00:16:15.060 --> 00:16:17.220
to like the 10 tips and people can go,


00:16:17.220 --> 00:16:18.040
if they're really interested,


00:16:18.040 --> 00:16:20.260
they can seek around the video and go find that


00:16:20.260 --> 00:16:22.500
or email me and I'll send you the slides.


00:16:22.500 --> 00:16:25.040
So one of them is to use a proper shell.


00:16:25.040 --> 00:16:27.260
Like I find every now and then I run into people


00:16:27.260 --> 00:16:28.660
and they're just running, you know,


00:16:28.660 --> 00:16:31.660
the whatever comes out of terminal in macOS,


00:16:31.660 --> 00:16:34.820
or they're just using cmd.exe on Windows.


00:16:34.820 --> 00:16:36.900
And it's like, how can you go day to day?


00:16:36.900 --> 00:16:40.100
Like there's so much possibility there, right?


00:16:40.100 --> 00:16:41.540
So, you know, consider things like,


00:16:41.540 --> 00:16:43.380
oh, my Z shell or oh my posh.


00:16:43.380 --> 00:16:47.340
I just installed oh my posh on the Windows terminal


00:16:47.340 --> 00:16:49.060
with the new PowerShell on Windows.


00:16:49.060 --> 00:16:51.900
And that thing is so much nicer than what you had before.


00:16:51.900 --> 00:16:53.060
That's cool.


00:16:53.060 --> 00:16:55.980
So get a proper terminal with some of those options.


00:16:55.980 --> 00:16:57.780
Use, if you're doing anything on the web,


00:16:57.780 --> 00:17:02.780
use secure.py, which just adds all the OWASP secure headers


00:17:02.780 --> 00:17:04.580
that you're supposed to do.


00:17:04.580 --> 00:17:06.980
Like don't allow your site to be embedded in an iframe


00:17:06.980 --> 00:17:08.660
and cross-site scripting and stuff.


00:17:08.660 --> 00:17:10.580
Automatically it supports like 10 different


00:17:10.580 --> 00:17:11.940
Python web frameworks.


00:17:11.940 --> 00:17:13.380
And if you're on some other technology,


00:17:13.380 --> 00:17:15.020
there's things like inwebsec,


00:17:15.020 --> 00:17:16.780
which does the same thing for ASP.net,


00:17:16.780 --> 00:17:19.460
or I'm sure you can Google another one.


00:17:19.460 --> 00:17:24.460
Tip number three, pick a nice GUI for your get work.


00:17:24.460 --> 00:17:27.640
Sometimes it's fine to do stuff on the command shell,


00:17:27.640 --> 00:17:29.520
but around the CLI,


00:17:29.520 --> 00:17:31.800
but it's really nice to have visual use


00:17:31.800 --> 00:17:33.480
of like branching and whatnot.


00:17:33.480 --> 00:17:36.720
So think of like SourceTree or even PyCharm and VS Code.


00:17:36.720 --> 00:17:38.600
Sync your GitHub forks, just talking about that.


00:17:38.600 --> 00:17:39.960
So keeping that going.


00:17:39.960 --> 00:17:43.840
Use a proper log framework like Loguru or even Sentry.


00:17:43.840 --> 00:17:45.000
Use Let's Encrypt.


00:17:45.000 --> 00:17:48.520
Number seven, you can go and just get your site map


00:17:48.520 --> 00:17:52.280
and request every URL at that destination


00:17:52.280 --> 00:17:53.160
in your site map.


00:17:53.160 --> 00:17:55.400
And that's a way to just like make sure


00:17:55.400 --> 00:17:56.520
your site's not gonna die.


00:17:56.520 --> 00:17:58.280
you could put that as an integration test.


00:17:58.280 --> 00:18:01.880
Use PageSpeed Insights to make sure your SEO is good


00:18:01.880 --> 00:18:03.480
and your site's responding well.


00:18:03.480 --> 00:18:05.400
Use Homebrew or Chocolaty on Windows.


00:18:05.400 --> 00:18:07.720
And then the very last one is set up Dependabot.


00:18:07.720 --> 00:18:10.080
Or even some of the stuff that we talked about, Brian,


00:18:10.080 --> 00:18:14.440
start using pip compile with a .in file.


00:18:14.440 --> 00:18:17.120
And you can tell it to upgrade the requirements


00:18:17.120 --> 00:18:19.040
whenever you run some CLI command


00:18:19.040 --> 00:18:22.880
and it'll regenerate your requirements.txt


00:18:22.880 --> 00:18:24.960
based on all the dependencies


00:18:24.960 --> 00:18:27.060
and it gives you a really nice organization


00:18:27.060 --> 00:18:29.900
like this sub-dependency is here


00:18:29.900 --> 00:18:31.800
because of these three things you've installed


00:18:31.800 --> 00:18:34.200
in your main requirements.in and so on.


00:18:34.200 --> 00:18:37.980
There's 10 quick tips that people can go play with


00:18:37.980 --> 00:18:39.160
and they can check out that short video


00:18:39.160 --> 00:18:40.060
if they're interested.


00:18:40.060 --> 00:18:42.380
- I mean, I know 11 quick tips


00:18:42.380 --> 00:18:45.420
wouldn't have been an amazing brand,


00:18:45.420 --> 00:18:48.460
but I feel like virtual environments,


00:18:48.460 --> 00:18:50.760
like not brought up at all, that was--


00:18:50.760 --> 00:18:52.440
- Yeah, that's true, that's a good point.


00:18:52.440 --> 00:18:54.380
Yeah, I mean, you should have been in the conference,


00:18:54.380 --> 00:18:55.040
I'm pretty sure.


00:18:55.040 --> 00:18:56.060
I'm man.


00:18:56.060 --> 00:18:57.560
Yeah, only I know about it.


00:18:57.560 --> 00:19:01.080
Well, Dean, do some people not use virtual environments?


00:19:01.080 --> 00:19:06.040
Dean also have as an 11 there, maybe 12 now close that Facebook tab.


00:19:06.040 --> 00:19:10.040
Yeah, I'm surprised at how many people don't use virtual environment still, or


00:19:10.040 --> 00:19:15.360
even I don't want to say something like using like Pippin for poetry or anything


00:19:15.360 --> 00:19:18.800
like that, mostly just because I don't have a lot of experience with them.


00:19:18.800 --> 00:19:25.060
but what is it, virtual environment wrapper or even high-end.


00:19:25.060 --> 00:19:27.680
Just really great tools to make sure


00:19:27.680 --> 00:19:30.260
that everyone's operating on the same Python version,


00:19:30.260 --> 00:19:35.080
and that if you need to run Python 3.5 on one thing


00:19:35.080 --> 00:19:38.060
because your code isn't set up for it yet,


00:19:38.060 --> 00:19:40.580
and then you want to run 3.9 on something else.


00:19:40.580 --> 00:19:42.440
Having tools like that,


00:19:42.440 --> 00:19:44.600
that once you learn them,


00:19:44.600 --> 00:19:47.520
they're so phenomenal and just so easy to use.


00:19:47.520 --> 00:19:50.840
>> I wonder if the overlap of the people that have a Facebook tab


00:19:50.840 --> 00:19:54.140
up are the same people that don't use virtual environments.


00:19:54.140 --> 00:19:55.660
>> Probably.


00:19:55.660 --> 00:19:59.720
>> Probably. Notifications as well, turn off notifications.


00:19:59.720 --> 00:20:02.680
Don't let Outlook or other things like that send you,


00:20:02.680 --> 00:20:04.560
don't let your e-mail send you messages,


00:20:04.560 --> 00:20:05.880
they're like pot toast, right?


00:20:05.880 --> 00:20:07.440
>> Turn on do not disturb.


00:20:07.440 --> 00:20:08.480
>> Yeah.


00:20:08.480 --> 00:20:10.540
>> Before we move on,


00:20:10.540 --> 00:20:14.640
Dean mentions in the chat for the f-string thing,


00:20:14.640 --> 00:20:18.680
you can put layers of curly braces in there.


00:20:18.680 --> 00:20:21.040
>> What? Like fString within fString? No way.


00:20:21.040 --> 00:20:22.120
>> Yeah.


00:20:22.120 --> 00:20:24.840
>> I feel like we're reaching a dangerous point.


00:20:24.840 --> 00:20:27.840
>> No, that's awesome. That's so cool. Love it.


00:20:27.840 --> 00:20:29.640
>> For people who are listening,


00:20:29.640 --> 00:20:30.800
I'm not seeing this.


00:20:30.800 --> 00:20:31.360
>> I'll put it back up.


00:20:31.360 --> 00:20:32.740
>> For people listening,


00:20:32.740 --> 00:20:33.880
you would normally have an fString,


00:20:33.880 --> 00:20:35.200
you say f, quote,


00:20:35.200 --> 00:20:37.040
curly bracket variable close curly,


00:20:37.040 --> 00:20:38.600
and with the format as a colon.


00:20:38.600 --> 00:20:41.680
Dean is saying that if you put as the format string,


00:20:41.680 --> 00:20:45.160
curly variable that contains the format curly.


00:20:45.160 --> 00:20:47.560
Curlies within curlies, that'll do it. That's awesome.


00:20:47.560 --> 00:20:51.440
Thanks. I had no idea and I have no idea how you found that out, but that's good.


00:20:51.440 --> 00:20:53.320
>> Yo, dog, I heard you like curly braces.


00:20:53.320 --> 00:20:57.000
>> I love them. Very cool.


00:20:57.000 --> 00:20:58.680
>> All right. Let's see.


00:20:58.680 --> 00:21:00.720
I'm next. Cool.


00:21:00.720 --> 00:21:05.480
I want to cover a cool article from Vitor,


00:21:05.480 --> 00:21:09.320
called How to Start a Production-Ready Django Project.


00:21:09.320 --> 00:21:13.120
This is just a fun project article


00:21:13.120 --> 00:21:15.920
because it's focused on Django definitely.


00:21:15.920 --> 00:21:19.040
But I think a lot of this advice is just a good idea for


00:21:19.040 --> 00:21:23.400
any web app or I guess it's mostly web app stuff.


00:21:23.400 --> 00:21:26.580
But anyway, it's worth a look


00:21:26.580 --> 00:21:29.360
even if you're using some other framework.


00:21:29.360 --> 00:21:32.200
He starts out, just said at the beginning,


00:21:32.200 --> 00:21:33.540
when you get started project,


00:21:33.540 --> 00:21:35.280
just start it out right.


00:21:35.280 --> 00:21:37.480
One of the things that I thought was neat


00:21:37.480 --> 00:21:41.120
was making sure that you set up a local environment,


00:21:41.120 --> 00:21:44.440
a test environment, and a production environment.


00:21:44.440 --> 00:21:48.140
The easiest and most important is the local environment so that


00:21:48.140 --> 00:21:53.620
new developers can get up really quickly and just start, clone,


00:21:53.620 --> 00:21:55.600
and go. I think that's really


00:21:55.600 --> 00:21:58.800
important to make sure that that's working well and easy.


00:21:58.800 --> 00:22:00.320
Then almost as important,


00:22:00.320 --> 00:22:01.940
and I would say maybe more important,


00:22:01.940 --> 00:22:04.900
but is a test environment.


00:22:04.900 --> 00:22:09.860
If you're swapping out a different database or something for


00:22:09.860 --> 00:22:13.040
your test, making sure that that's configured and set up so


00:22:13.040 --> 00:22:15.560
that the developers when they're contributing can


00:22:15.560 --> 00:22:19.080
easily run the tests before they submit code to you.


00:22:19.080 --> 00:22:21.040
That's really important.


00:22:21.040 --> 00:22:25.280
Then the production environment and the setup for that,


00:22:25.280 --> 00:22:29.040
that is an interesting argument that that can be more complicated,


00:22:29.040 --> 00:22:31.320
that can be a different thing because most of


00:22:31.320 --> 00:22:33.680
the people involved in the project aren't really going to run that.


00:22:33.680 --> 00:22:35.900
it's just a handful of experienced developers.


00:22:35.900 --> 00:22:39.420
I think that's cool. After setting up the environment stuff,


00:22:39.420 --> 00:22:41.260
it covers making sure that you have


00:22:41.260 --> 00:22:44.180
Git or some other version control set up,


00:22:44.180 --> 00:22:45.740
and use virtual environments.


00:22:45.740 --> 00:22:50.080
There you go, Jay. Make sure that you're doing virtual environments.


00:22:50.080 --> 00:22:53.540
But then, there's a section on requirements,


00:22:53.540 --> 00:22:55.760
the text files that I think is amazing.


00:22:55.760 --> 00:22:57.400
Maybe everybody knew this already,


00:22:57.400 --> 00:22:59.460
but it hadn't occurred to me,


00:22:59.460 --> 00:23:04.980
is to have a directory instead of just a file and have several of them.


00:23:04.980 --> 00:23:07.000
The example has a base one,


00:23:07.000 --> 00:23:08.220
a test one, a local one,


00:23:08.220 --> 00:23:09.340
and a production one,


00:23:09.340 --> 00:23:11.420
and they can include each other.


00:23:11.420 --> 00:23:13.180
All of them include the base,


00:23:13.180 --> 00:23:15.980
and local also includes text.


00:23:15.980 --> 00:23:17.220
Whatever your environment is,


00:23:17.220 --> 00:23:20.660
you can just install one of these and it's the right one.


00:23:20.660 --> 00:23:24.100
Although the project stuff is all in the base,


00:23:24.100 --> 00:23:25.980
so everybody uses that.


00:23:25.980 --> 00:23:28.660
It's a pretty cool idea. I've never done that.


00:23:28.660 --> 00:23:32.140
Have you done that? Either of you used that model before?


00:23:32.140 --> 00:23:34.500
>> No. I'm terrible.


00:23:34.500 --> 00:23:36.820
I just put everything in environment variables


00:23:36.820 --> 00:23:38.860
and then I never have to change my code.


00:23:38.860 --> 00:23:40.700
I just have to change my environment variables


00:23:40.700 --> 00:23:43.060
depending on what area of system I'm in.


00:23:43.060 --> 00:23:47.620
>> Yeah. That discussion was around the requirements,


00:23:47.620 --> 00:23:51.220
but there's also a similar discussion around the settings.


00:23:51.220 --> 00:23:56.220
The settings set up to make sure that you've got where the database is,


00:23:56.220 --> 00:23:57.660
where your server is, and all that stuff,


00:23:57.660 --> 00:24:02.200
and have those set up and switched for local test and production,


00:24:02.200 --> 00:24:05.080
and just getting all of that stuff set up


00:24:05.080 --> 00:24:08.320
ahead of time right at the beginning of the project.


00:24:08.320 --> 00:24:12.960
Included a couple of things I was surprised to see was making sure that


00:24:12.960 --> 00:24:15.680
you've got a consistent set of linting and


00:24:15.680 --> 00:24:18.960
styling tools like Black or Flake 8 or iSort,


00:24:18.960 --> 00:24:21.960
and then also editor configurations.


00:24:21.960 --> 00:24:26.000
You might make the whole team more productive if you just go ahead and


00:24:26.000 --> 00:24:28.920
store your editor configurations in the project.


00:24:28.920 --> 00:24:31.040
I never considered doing that.


00:24:31.040 --> 00:24:34.200
>> Yeah. One thing that's really cool is for PyCharm.


00:24:34.200 --> 00:24:35.720
I don't know how VS Code works.


00:24:35.720 --> 00:24:37.200
There's maybe something for it as well.


00:24:37.200 --> 00:24:39.720
But in PyCharm, you can go and customize


00:24:39.720 --> 00:24:41.580
the code cleanup and formatting and


00:24:41.580 --> 00:24:44.360
rules of what it inspects and how it'll fix them.


00:24:44.360 --> 00:24:47.780
Then instead of saying, "Save that in my user profile,"


00:24:47.780 --> 00:24:51.040
you can say, "Save this in the PyCharm project."


00:24:51.040 --> 00:24:54.520
So if other people on the team open it up and it won't show


00:24:54.520 --> 00:24:57.760
squigglies if like your convention is different than pep eight or if you


00:24:57.760 --> 00:24:59.760
format it, it won't jump around and stuff.


00:24:59.760 --> 00:25:00.420
That's cool.


00:25:00.420 --> 00:25:03.880
And then of course there's some Django specific stuff like application


00:25:03.880 --> 00:25:07.400
structure and stuff, but I think, like I said, even if you're not using


00:25:07.400 --> 00:25:09.280
Django, this is a good set of things to look through.


00:25:09.280 --> 00:25:09.800
Yeah.


00:25:09.800 --> 00:25:10.160
Yeah.


00:25:10.160 --> 00:25:10.320
Cool.


00:25:10.320 --> 00:25:13.720
I guess I do the thing with the requirements have like a dev version that's based on


00:25:13.720 --> 00:25:15.760
the production version and whatnot.


00:25:15.760 --> 00:25:18.120
But, yeah, with settings, I hadn't really thought about that.


00:25:18.120 --> 00:25:18.560
That's cool.


00:25:18.560 --> 00:25:19.480
Neat.


00:25:19.480 --> 00:25:20.200
Indeed.


00:25:20.200 --> 00:25:20.720
Indeed.


00:25:20.720 --> 00:25:22.560
Uh, let's see, Jay, you got the next one?


00:25:22.560 --> 00:25:23.560
I do.


00:25:23.680 --> 00:25:27.100
and just as I always try to bring


00:25:27.100 --> 00:25:30.560
some type of productivity app, tip or trick.


00:25:30.560 --> 00:25:32.040
This time it's a Mac app.


00:25:32.040 --> 00:25:36.000
I'm sorry, folks in Windows land, it's Mac only,


00:25:36.000 --> 00:25:38.920
but I'm sure you could do something similar


00:25:38.920 --> 00:25:41.680
with like AutoHotKey or one of the similar tools,


00:25:41.680 --> 00:25:44.120
but I'm talking about a program


00:25:44.120 --> 00:25:47.440
that a friend of mine, Brett Terpstra, made called Bunch.


00:25:47.440 --> 00:25:51.760
It is interesting in how simple yet complex it can get.


00:25:51.760 --> 00:25:56.460
So those that don't know, I work on,


00:25:56.460 --> 00:25:58.940
I help Mike out from time to time,


00:25:58.940 --> 00:26:01.920
more specifically with the Talk Python newsletter.


00:26:01.920 --> 00:26:05.260
And this is literally the bunch that I run


00:26:05.260 --> 00:26:09.600
every time I start working on the newsletter.


00:26:09.600 --> 00:26:11.780
So the thing about bunch that's really cool


00:26:11.780 --> 00:26:13.800
is when it uses front matter to set up


00:26:13.800 --> 00:26:17.000
a bunch of different settings within the program.


00:26:17.000 --> 00:26:18.100
So that's what you see at the top.


00:26:18.100 --> 00:26:19.720
But now here's the title of the thing.


00:26:19.720 --> 00:26:22.240
I want it to run sequentially, not parallel.


00:26:22.240 --> 00:26:24.520
And then if I want to open an app,


00:26:24.520 --> 00:26:26.480
I just type the name of the app.


00:26:26.480 --> 00:26:28.620
If I want to open Windows within that app,


00:26:28.620 --> 00:26:31.960
I just add a dash and provide the URLs


00:26:31.960 --> 00:26:35.320
or the file names for those files.


00:26:35.320 --> 00:26:36.160
If I want to run--


00:26:36.160 --> 00:26:37.120
- So you've got like Safari


00:26:37.120 --> 00:26:40.480
and then it has three nested things that are URLs.


00:26:40.480 --> 00:26:42.360
So what it does is it opens Safari


00:26:42.360 --> 00:26:44.220
and then launches those three tabs?


00:26:44.220 --> 00:26:45.060
- Yep, perfect.


00:26:45.060 --> 00:26:45.880
- Okay.


00:26:45.880 --> 00:26:48.760
- And I actually don't even have to tell it to run Safari.


00:26:48.760 --> 00:26:52.560
I just do here so people reading it can make sense of it.


00:26:52.560 --> 00:26:54.300
If I just put three URLs on there,


00:26:54.300 --> 00:26:56.560
it would just open up whatever the default browser is,


00:26:56.560 --> 00:26:58.140
and then open those files.


00:26:58.140 --> 00:26:59.640
But by putting Safari in front,


00:26:59.640 --> 00:27:02.300
I tell it specifically open these in Safari.


00:27:02.300 --> 00:27:05.180
If you work with Chrome or if you want to do


00:27:05.180 --> 00:27:07.460
something like testing on multiple browsers,


00:27:07.460 --> 00:27:09.900
you could put each browser


00:27:09.900 --> 00:27:12.980
and then dash whatever the URL is for that.


00:27:12.980 --> 00:27:15.740
But the thing I like about this is it also


00:27:15.740 --> 00:27:18.400
supports things like X callback URLs,


00:27:18.400 --> 00:27:21.480
which are a URL structure for


00:27:21.480 --> 00:27:24.820
running commands in applications that support it.


00:27:24.820 --> 00:27:26.800
You can add system commands and


00:27:26.800 --> 00:27:29.480
commands to bunch itself like throwing a pause in.


00:27:29.480 --> 00:27:32.080
If I wanted to actually go in and type,


00:27:32.080 --> 00:27:35.520
like at the end whenever I finish the newsletter,


00:27:35.520 --> 00:27:37.080
I open up messages,


00:27:37.080 --> 00:27:40.360
I hit Command F, which is that @ sign and F,


00:27:40.360 --> 00:27:43.640
pause for a second because sometimes my Mac is slow,


00:27:43.640 --> 00:27:46.880
and then I type in Michael Kennedy and hit "Enter".


00:27:46.880 --> 00:27:49.660
and you can even do some conditional stuff.


00:27:49.660 --> 00:27:52.700
Like I have an Apple script that just checks the date.


00:27:52.700 --> 00:27:54.660
If it's in the date range that I need to,


00:27:54.660 --> 00:27:57.620
to make sure that I send bills off properly,


00:27:57.620 --> 00:27:59.900
then it also will open up, you know,


00:27:59.900 --> 00:28:02.380
Stripe and let me do my processing thing.


00:28:02.380 --> 00:28:04.020
But it supports shell scripts,


00:28:04.020 --> 00:28:06.620
which means it supports Python.


00:28:06.620 --> 00:28:09.820
I actually do have a couple that I'm running.


00:28:09.820 --> 00:28:13.060
Well, I haven't ran in a while, but it just opens up


00:28:13.060 --> 00:28:14.780
and it kind of does similar to what we were talking about


00:28:14.780 --> 00:28:16.700
in the first topic of like just going in


00:28:16.700 --> 00:28:19.600
and making sure that projects are up to date


00:28:19.600 --> 00:28:23.000
because I will forget the commands or I will mess them up.


00:28:23.000 --> 00:28:24.720
And it's easier if I can just follow along


00:28:24.720 --> 00:28:25.880
with what it's doing.


00:28:25.880 --> 00:28:27.620
And there's a lot of different tools here.


00:28:27.620 --> 00:28:29.200
I don't have enough time to talk about


00:28:29.200 --> 00:28:31.080
all the things it can do.


00:28:31.080 --> 00:28:33.080
One of Michael's tips that he left off,


00:28:33.080 --> 00:28:34.400
setting do not disturb.


00:28:34.400 --> 00:28:39.000
I can do that by just typing in parentheses DND like that.


00:28:39.000 --> 00:28:42.560
And it'll set do not disturb whenever this runs.


00:28:42.560 --> 00:28:45.800
- And you said something like this as a part of your


00:28:45.800 --> 00:28:50.340
your profile shell set up so when you log in,


00:28:50.340 --> 00:28:52.260
it kicks off one of these to


00:28:52.260 --> 00:28:54.880
configure your environment the way you like it.


00:28:54.880 --> 00:28:56.020
>> That's the cool part of-


00:28:56.020 --> 00:28:57.880
>> For example, I want to log in and I want


00:28:57.880 --> 00:29:00.260
the first hour to have no notification so I can


00:29:00.260 --> 00:29:02.360
just focus when I got energy in the morning and


00:29:02.360 --> 00:29:04.800
then turn off D&D later or something like that.


00:29:04.800 --> 00:29:07.900
>> That's the cool thing with Front Matter is you could just say,


00:29:07.900 --> 00:29:11.480
start on and if I start my day at 7 AM,


00:29:11.480 --> 00:29:13.460
I just put start on 7 AM,


00:29:13.460 --> 00:29:17.700
and I would just create a second bunch that says,


00:29:17.700 --> 00:29:20.300
start on whatever I wanted to end,


00:29:20.300 --> 00:29:22.540
and then it would turn it off, like D&D off.


00:29:22.540 --> 00:29:25.180
I think you can actually even do a close on.


00:29:25.180 --> 00:29:29.460
I can even say close on 8 AM like that.


00:29:29.460 --> 00:29:32.100
I don't know about that last one, I have to test that.


00:29:32.100 --> 00:29:34.220
But there's start at,


00:29:34.220 --> 00:29:36.300
so you can have it run on certain days of the week.


00:29:36.300 --> 00:29:38.660
There is not a way natively


00:29:38.660 --> 00:29:40.580
to have it run on a certain day of the month.


00:29:40.580 --> 00:29:41.780
It doesn't have cron support,


00:29:41.780 --> 00:29:45.240
but there is a workaround that I've highlighted in another video.


00:29:45.240 --> 00:29:49.040
Which speaking of, I talked about this on my YouTube channel,


00:29:49.040 --> 00:29:52.040
which is youtube.com/KJMiller,


00:29:52.040 --> 00:29:54.160
my handle on everything that I do.


00:29:54.160 --> 00:29:56.640
>> That's cool. You got a nice YouTube video that walks through this, right?


00:29:56.640 --> 00:29:57.640
People can check that out.


00:29:57.640 --> 00:30:02.000
>> Yeah. I break down everything that's happening in this particular bunch,


00:30:02.000 --> 00:30:04.460
like even the Apple script,


00:30:04.460 --> 00:30:07.400
which is actually JavaScript, but it's fine.


00:30:07.400 --> 00:30:10.360
>> I would have expected D&D to send out


00:30:10.360 --> 00:30:13.080
Dungeons and Dragons invites to random people.


00:30:13.080 --> 00:30:14.880
>> Well, funny enough,


00:30:14.880 --> 00:30:16.880
if you had a bunch called D&D,


00:30:16.880 --> 00:30:19.960
you could just do D&D.bunch like that and it would just run it.


00:30:19.960 --> 00:30:22.240
That is doable.


00:30:22.240 --> 00:30:22.560
>> Nice.


00:30:22.560 --> 00:30:23.720
>> We can make that happen.


00:30:23.720 --> 00:30:25.400
>> Yeah. All right. Everybody gets


00:30:25.400 --> 00:30:26.840
some Mountain Dew, order a pizza,


00:30:26.840 --> 00:30:28.600
show up and how's this going to go?


00:30:28.600 --> 00:30:30.280
>> Exactly. By the way,


00:30:30.280 --> 00:30:31.420
Bunch is free.


00:30:31.420 --> 00:30:33.000
If you go to bunchapp.co,


00:30:33.000 --> 00:30:36.000
you can just install it and run it for free.


00:30:36.000 --> 00:30:38.160
Again, the developer, it's a solo developer,


00:30:38.160 --> 00:30:42.200
Brett Terpstra, he makes other mad science on the Internet.


00:30:42.200 --> 00:30:46.520
I believe he works for Oracle now, just recently.


00:30:46.520 --> 00:30:49.520
Yeah, and then if you're an Alfred user,


00:30:49.520 --> 00:30:52.720
which I don't have a good way of showing you what Alfred is,


00:30:52.720 --> 00:30:56.440
but if you know, you know, I am the maintainer.


00:30:56.440 --> 00:30:59.680
>> It's like the command space for Mac or


00:30:59.680 --> 00:31:03.080
the PowerShell little pop-up search in Windows,


00:31:03.080 --> 00:31:05.680
but as a dedicated app that does more, right?


00:31:05.680 --> 00:31:10.880
>> Exactly. I am the maintainer of the official,


00:31:10.880 --> 00:31:15.120
unofficial Bunch workflow for Alfred.


00:31:15.120 --> 00:31:16.720
If you ever need help with that,


00:31:16.720 --> 00:31:18.660
you know who to yell at, that'd be me.


00:31:18.660 --> 00:31:21.520
>> Fantastic. That's a cool one. A nice find there.


00:31:21.520 --> 00:31:22.040
>> Cool.


00:31:22.040 --> 00:31:24.840
>> All right, Brian, is that it for us? Our main items?


00:31:24.840 --> 00:31:27.640
>> That's it for our main items. Do we have anything extra?


00:31:27.640 --> 00:31:29.200
>> I was thinking no,


00:31:29.200 --> 00:31:31.800
and then actually yes.


00:31:31.800 --> 00:31:33.700
I just ran across this.


00:31:33.700 --> 00:31:35.940
We talked about GitHub Copilot.


00:31:35.940 --> 00:31:37.980
In fact, that was the title of last week.


00:31:37.980 --> 00:31:38.340
>> Yeah.


00:31:38.340 --> 00:31:41.660
>> It was like GitHub, your pilot speaking or something like that,


00:31:41.660 --> 00:31:46.900
and how both mind-blowing and good and possibly crazy,


00:31:46.900 --> 00:31:49.280
not necessarily good ways that the Copilot was,


00:31:49.280 --> 00:31:51.140
and it was pretty interesting.


00:31:51.140 --> 00:31:51.540
>> Yeah.


00:31:51.540 --> 00:31:53.780
>> There's an article over on the Verge,


00:31:53.780 --> 00:31:55.460
and I had pointed out,


00:31:55.460 --> 00:31:59.900
what is the transitive license here?


00:31:59.900 --> 00:32:03.420
If you have a GPL license and then you filter it


00:32:03.420 --> 00:32:09.420
through ML, is the transit of a property applied to the GPL basically was my question, right?


00:32:09.420 --> 00:32:12.780
And so there's an article over on the Verge call that says,


00:32:12.780 --> 00:32:18.860
GitHub's automatic coding tool, aka GitHub Copilot, rests on untested legal ground.


00:32:18.860 --> 00:32:24.620
So there's one section in here, it says, despite GitHub's assertion, there's no direct legal


00:32:24.620 --> 00:32:30.380
precedent in the United States that upholds publicly available training data as fair use.


00:32:30.380 --> 00:32:33.620
So anyway, people are interested in this, they can check it out.


00:32:33.620 --> 00:32:36.860
I think there's also a caveat there too of


00:32:36.860 --> 00:32:40.460
what GitHub is doing is on untested ground


00:32:40.460 --> 00:32:45.020
and your usage of what GitHub is doing is also on untested ground.


00:32:45.020 --> 00:32:49.180
Not saying that you can or can't use this, but


00:32:49.180 --> 00:32:52.380
just know that even if GitHub


00:32:52.380 --> 00:32:54.860
wins a lawsuit saying that they're good,


00:32:54.860 --> 00:32:58.700
you may not want to be the person to have to test


00:32:58.700 --> 00:33:01.740
the lawsuit of whether or not you're going to be good.


00:33:01.740 --> 00:33:03.460
Again, I'm not a lawyer,


00:33:03.460 --> 00:33:05.820
so I don't even pretend to be one.


00:33:05.820 --> 00:33:06.260
>> Yeah.


00:33:06.260 --> 00:33:07.140
>> I play one of my team.


00:33:07.140 --> 00:33:08.660
>> It's a cool project though.


00:33:08.660 --> 00:33:11.500
>> Yeah. It is quite cool.


00:33:11.500 --> 00:33:14.620
All right. Dean, I always appreciate the help in the comments.


00:33:14.620 --> 00:33:17.260
Time for some extra, extra, extra, extra, extra.


00:33:17.260 --> 00:33:18.500
This time actually, no,


00:33:18.500 --> 00:33:19.660
I almost had no extras at all.


00:33:19.660 --> 00:33:22.260
I was feeling bad, but just the one.


00:33:22.260 --> 00:33:26.500
>> Yeah. Okay. I wanted to share something exciting.


00:33:26.500 --> 00:33:28.500
>> Also, one more thing. I don't know if


00:33:28.500 --> 00:33:29.800
I click this or you click it.


00:33:29.800 --> 00:33:33.300
But Magnus says, I also saw that CoPilot spouted API keys.


00:33:33.300 --> 00:33:36.600
So we've heard of Shaget and other, don't put secrets in here,


00:33:36.600 --> 00:33:38.400
but here's yet another interesting way.


00:33:38.400 --> 00:33:40.000
You want to connect to AWS?


00:33:40.000 --> 00:33:41.400
Here, here's the API key.


00:33:41.400 --> 00:33:42.800
>> Here's the API key.


00:33:42.800 --> 00:33:43.300
>> Oh my goodness.


00:33:43.300 --> 00:33:45.100
>> That's awesome. Go ahead and try it.


00:33:45.100 --> 00:33:47.240
Why not? You don't know who's paying for that.


00:33:47.240 --> 00:33:49.020
>> It's free. It's free for you.


00:33:49.020 --> 00:33:53.080
>> Yeah. So I'm continuing to work on the pytest book.


00:33:53.080 --> 00:33:56.640
Just got the configuration chapter turned in.


00:33:56.640 --> 00:33:58.280
It's not available in the beta yet,


00:33:58.280 --> 00:34:00.560
but it will be within the next few days.


00:34:00.560 --> 00:34:03.020
Configuration stuff, it's all fun.


00:34:03.020 --> 00:34:05.640
Then I'm excited to get working.


00:34:05.640 --> 00:34:07.860
The next chapters I'm going to start working on are talks in


00:34:07.860 --> 00:34:10.140
CI and the search path and debugging,


00:34:10.140 --> 00:34:11.780
and those will be fun chapters.


00:34:11.780 --> 00:34:13.920
I just wanted to share where I'm at there.


00:34:13.920 --> 00:34:15.680
>> Awesome. You're almost there.


00:34:15.680 --> 00:34:16.600
>> Yeah.


00:34:16.600 --> 00:34:18.580
>> Then I had an extra too,


00:34:18.580 --> 00:34:21.480
but it's so silly, but it's just fun.


00:34:21.480 --> 00:34:23.080
I have to stop sharing that and I have to


00:34:23.080 --> 00:34:24.920
share another window now. Thanks.


00:34:24.920 --> 00:34:26.120
>> Thanks, Tremie.


00:34:26.120 --> 00:34:27.160
>> Thanks for that.


00:34:27.160 --> 00:34:29.220
>> I found a new tool to play with.


00:34:29.220 --> 00:34:31.620
It's called Monodraw,


00:34:31.620 --> 00:34:35.800
which is a very interesting tool.


00:34:35.800 --> 00:34:38.580
I don't know what most people would use it for,


00:34:38.580 --> 00:34:42.560
but I've been using it as an outline and planning tool,


00:34:42.560 --> 00:34:44.200
and I'm going to show you what I do with it.


00:34:44.200 --> 00:34:46.240
I'm going to add a text here,


00:34:46.240 --> 00:34:47.640
and it's going to say,


00:34:47.640 --> 00:34:51.520
"Hi Python Bytes crew," and I'm going to hit "Done".


00:34:51.520 --> 00:34:55.560
>> For people listening, this is like drawing on graph paper.


00:34:55.560 --> 00:35:04.160
>> Yeah. What happens if I expand this out and I tell it I want it to be a banner?


00:35:04.160 --> 00:35:05.320
>> What?


00:35:05.320 --> 00:35:10.800
>> That's pretty fun. It turned it into ASCII art and stuff.


00:35:10.800 --> 00:35:17.560
>> Yeah. This is a way to actually build ASCII art outlines.


00:35:17.560 --> 00:35:20.600
They have a bunch of different versions.


00:35:20.600 --> 00:35:23.880
I've used this on a couple of projects.


00:35:23.880 --> 00:35:26.360
I'm trying to see if I have one that I can load up


00:35:26.360 --> 00:35:28.760
real quick for a video that I've made.


00:35:28.760 --> 00:35:33.320
When I say it doesn't make sense why this works for my brain,


00:35:33.320 --> 00:35:35.320
it truly doesn't.


00:35:35.320 --> 00:35:38.060
But when it comes to,


00:35:38.060 --> 00:35:40.920
did it not move it to the right window?


00:35:40.920 --> 00:35:43.800
Hold on. Thanks again, StreamYard.


00:35:43.800 --> 00:35:46.680
>> I want to use this for my next status report and


00:35:46.680 --> 00:35:49.840
just do the entire status report in AskYard.


00:35:49.840 --> 00:35:50.400
>> Yes.


00:35:50.400 --> 00:35:51.720
>> So funny you mentioned that.


00:35:51.720 --> 00:35:53.120
>> Put it as a comment and check it in.


00:35:53.120 --> 00:36:00.720
Funny you mention that because when I do my video planning, I do it in this format and


00:36:00.720 --> 00:36:04.240
it's great because you can, you know, you can move stuff around, you can draw arrows,


00:36:04.240 --> 00:36:08.680
you can highlight different sections and, you know, know how everything is going to


00:36:08.680 --> 00:36:09.680
look there.


00:36:09.680 --> 00:36:14.920
And when I, when I say like, I was able to, in a normal time it would take for me to do


00:36:14.920 --> 00:36:20.840
a video, I like cut that time in half by just drawing an outline out using the different


00:36:20.840 --> 00:36:22.960
ASCII art to, to make things work.


00:36:22.960 --> 00:36:25.420
I'm going to build presentations with this.


00:36:25.420 --> 00:36:26.460
I don't know, I'm going to give


00:36:26.460 --> 00:36:29.500
a conference talk using ASCII art one day.


00:36:29.500 --> 00:36:30.300
>> You could write it both like this.


00:36:30.300 --> 00:36:31.860
>> You can copy and paste,


00:36:31.860 --> 00:36:35.900
but you can also export it as PDF.


00:36:35.900 --> 00:36:37.520
Let me see what options I have here.


00:36:37.520 --> 00:36:40.180
You can export as PDF,


00:36:40.180 --> 00:36:43.920
scalable vector graphics, or I'm sorry,


00:36:43.920 --> 00:36:46.620
ping text or SVG, those three.


00:36:46.620 --> 00:36:48.660
For some reason, I thought there was a PDF version


00:36:48.660 --> 00:36:49.900
in there, but there is not.


00:36:49.900 --> 00:36:50.380
>> Cool.


00:36:50.380 --> 00:36:51.860
>> Sean out there was asking if you


00:36:51.860 --> 00:36:54.540
you could export the art.


00:36:54.540 --> 00:36:58.820
And hey, John, co-host of the Teaching Python podcast.


00:36:58.820 --> 00:37:03.100
- And I guess the thing is it is $5,


00:37:03.100 --> 00:37:06.760
and I have a link in the show notes for it as well.


00:37:06.760 --> 00:37:07.940
But really fun tool.


00:37:07.940 --> 00:37:10.160
I haven't figured out all of my use cases for it,


00:37:10.160 --> 00:37:12.060
but I know that creating outlines and stuff


00:37:12.060 --> 00:37:15.040
has definitely been a very interesting


00:37:15.040 --> 00:37:18.180
and effective way of using it, and it's called Monodraw.


00:37:18.180 --> 00:37:19.540
And again, it's a Mac-only app.


00:37:19.540 --> 00:37:20.640
I'm sorry, Windows folks,


00:37:20.640 --> 00:37:23.200
but I'm sure that there's something out there.


00:37:23.200 --> 00:37:24.780
And if not, build it.


00:37:24.780 --> 00:37:27.320
- Yeah, or get one of those weird macOS


00:37:27.320 --> 00:37:29.600
in the cloud as a service.


00:37:29.600 --> 00:37:30.480
- That's true.


00:37:30.480 --> 00:37:34.800
That one was Mac only to my knowledge.


00:37:34.800 --> 00:37:35.920
- Yeah, yeah, yeah.


00:37:35.920 --> 00:37:36.760
All right. - All right.


00:37:36.760 --> 00:37:37.920
- Brian, how about you?


00:37:37.920 --> 00:37:39.020
- Yeah, I think it's time for a joke.


00:37:39.020 --> 00:37:43.680
Okay, so imagine that we're here meeting for a startup


00:37:43.680 --> 00:37:45.600
and we're trying to figure out,


00:37:45.600 --> 00:37:47.960
we're gonna create some new API here


00:37:47.960 --> 00:37:50.460
and we just are having a bit of a trouble.


00:37:50.460 --> 00:37:52.820
So let's see.


00:37:52.820 --> 00:37:54.640
So this is like a little bit of a comic strip.


00:37:54.640 --> 00:37:56.980
And I guess Jay, you wanna be the person at the computer,


00:37:56.980 --> 00:37:58.020
I'll be the bearded dude,


00:37:58.020 --> 00:38:00.140
and Brian, you can be the guy with the glasses,


00:38:00.140 --> 00:38:01.180
other guy with glasses.


00:38:01.180 --> 00:38:02.380
All right.


00:38:02.380 --> 00:38:05.700
So they're trying to think of what to name this API, right?


00:38:05.700 --> 00:38:08.340
Or this thing, so data?


00:38:08.340 --> 00:38:09.500
- Nah, too generic.


00:38:09.500 --> 00:38:11.020
- How about data DB?


00:38:11.020 --> 00:38:12.120
- Unclear.


00:38:12.120 --> 00:38:15.740
- Well, let's say list completed.


00:38:15.740 --> 00:38:16.860
- Already used that.


00:38:16.860 --> 00:38:19.540
- Array list data completed then?


00:38:19.540 --> 00:38:25.720
>> Nah, we must choose now or the client might cancel the project.


00:38:25.720 --> 00:38:31.480
>> Well, how about ArrayList completed from form without duplicate?


00:38:31.480 --> 00:38:33.280
>> Nah, it's too long.


00:38:33.280 --> 00:38:36.940
>> Then the next panel has a newspaper clipping


00:38:36.940 --> 00:38:39.820
that says unable to name variable, they go bust.


00:38:39.820 --> 00:38:41.440
>> Yeah, exactly. Go out of business.


00:38:41.440 --> 00:38:42.980
They couldn't choose naming. That is one of


00:38:42.980 --> 00:38:45.560
the hard problems in computer science, is naming.


00:38:45.560 --> 00:38:47.600
>> Yeah, definitely.


00:38:47.600 --> 00:38:53.760
I didn't see completed form without duplicates.


00:38:53.760 --> 00:38:56.480
That's what I see. It's almost like the array list,


00:38:56.480 --> 00:39:01.800
which if you're making good readable code,


00:39:01.800 --> 00:39:03.760
you would know that it's an array list.


00:39:03.760 --> 00:39:04.520
>> Exactly.


00:39:04.520 --> 00:39:05.160
>> I would say, yeah.


00:39:05.160 --> 00:39:06.160
>> You only need this type name.


00:39:06.160 --> 00:39:08.040
>> Do completed form without duplicate.


00:39:08.040 --> 00:39:09.720
>> Well, you would have saved them.


00:39:09.720 --> 00:39:11.120
They'd still be in business.


00:39:11.120 --> 00:39:15.560
>> Or unique, like completed unique.


00:39:15.560 --> 00:39:18.260
>> Just everybody just use foo, bar, and baz,


00:39:18.260 --> 00:39:20.980
and then nobody will complain.


00:39:20.980 --> 00:39:25.820
Do you remember those Microsoft-isms where they would


00:39:25.820 --> 00:39:29.620
prefix types, variables with their type names?


00:39:29.620 --> 00:39:33.500
>> The Hungarian notation like SZ for string.


00:39:33.500 --> 00:39:34.700
What the heck was the Z there for?


00:39:34.700 --> 00:39:35.340
>> Size.


00:39:35.340 --> 00:39:36.500
>> Size.


00:39:36.500 --> 00:39:38.060
>> Size, that's right. Yeah.


00:39:38.060 --> 00:39:39.500
Oh my gosh, that was dreadful.


00:39:39.500 --> 00:39:41.780
>> Terrible. With three characters


00:39:41.780 --> 00:39:44.140
left over for the actual variable name.


00:39:44.140 --> 00:39:46.740
Anyway, cool. Well, this was fun.


00:39:46.740 --> 00:39:50.100
Thanks Jay for showing up today and thanks Michael as always.


00:39:50.100 --> 00:39:51.900
>> You bet. Bye guys.


00:39:51.900 --> 00:39:52.100
>> Bye.


00:39:52.100 --> 00:39:53.900
>> Thanks everyone for listening.

