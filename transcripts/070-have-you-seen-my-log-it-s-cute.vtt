
00:00:00.000 --> 00:00:08.240
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 70 recorded March 15th


00:00:08.240 --> 00:00:14.540
2018 I'm Michael Kennedy and I'm Brian Okken Brian. How you doing? I'm doing great. It's good to talk to you again


00:00:14.540 --> 00:00:19.420
Yeah, you as well. It's super excited to talk about some of these things that you got here before we do though


00:00:19.420 --> 00:00:21.960
Let's just say real quick. Thanks to digital ocean


00:00:21.960 --> 00:00:27.800
They're sponsoring this episode like they do many of the episodes so check them out at do dot CEO slash Python


00:00:28.340 --> 00:00:32.740
You know, I'm a big fan of cookie cutter. I've done a couple of things with it. Yeah, actually I'm


00:00:32.740 --> 00:00:37.740
Warming up to it and I use it for quite a bit. No, that's nice. You found an


00:00:37.740 --> 00:00:42.400
Interesting online cookie cutter thing. What is this? It's from Konstantin


00:00:42.400 --> 00:00:44.700
Pavlovsky that's cool name


00:00:44.700 --> 00:00:47.340
anyway online cookie cutter generator and


00:00:47.340 --> 00:00:52.740
so cookie cutter is a command-line thing where you pointed at a you give it a


00:00:52.740 --> 00:00:58.200
Link to a usually a github cookie cutter, but you can have them leave be local also


00:00:58.200 --> 00:01:05.000
And it starts asking you questions about what you want to fill in the project and then it starts like a Python project for you.


00:01:05.000 --> 00:01:08.600
You could probably describe it better. It's more of a templating thing you could do anything with.


00:01:08.600 --> 00:01:14.900
It's pretty interesting. So the way cookie cutter works is it's a CLI thing and you run it and it will ask you questions.


00:01:14.900 --> 00:01:18.400
Right, like what's your email address? What's your full name? What do you want to call the project?


00:01:18.400 --> 00:01:21.900
Do you want to use Jinja 2 or Chameleon Templates, etc, etc.


00:01:21.900 --> 00:01:28.500
This is like that but it's like a website with a web form that ask the questions like that way right?


00:01:28.500 --> 00:01:43.900
Right, so he doesn't have like everything up but he's got quite a few up now that are some of the common templates like the PyPackage and PyPackage minimal and a flask and bottle and a few and actually quite a few others.


00:01:44.000 --> 00:01:52.500
And instead of doing a command line, you select it and it shows you basically all the questions that you're gonna get asked.


00:01:52.500 --> 00:01:58.700
And you can just fill it in and then generate project and it generates a zip file for you and you can download it.


00:01:58.700 --> 00:02:05.800
So basically, like if you don't have cookie cutter installed, you can still execute the cookie cutter template by going to the site.


00:02:05.800 --> 00:02:11.700
Yeah, you just kind of want to see all of the all the questions before you get going, gather those up first.


00:02:11.700 --> 00:02:12.400
That's quite cool.


00:02:12.400 --> 00:02:15.800
I thought it was neat and he's a pretty cool guy on Twitter.


00:02:15.800 --> 00:02:21.560
So if you have a favorite cookie cutter that you'd like to have him put up there, I bet


00:02:21.560 --> 00:02:23.920
you if you just contacted him, he'd probably put it up there.


00:02:23.920 --> 00:02:24.920
Yeah, for sure.


00:02:24.920 --> 00:02:25.920
Very cool.


00:02:25.920 --> 00:02:27.800
So check out the online cookie cutter generator.


00:02:27.800 --> 00:02:28.800
I like it.


00:02:28.800 --> 00:02:32.080
So did we go on like a rant about GUIs for a while?


00:02:32.080 --> 00:02:33.440
Yeah, for a bit.


00:02:33.440 --> 00:02:38.560
So I'm not exactly going to talk about like another GUI platform that like, I don't know,


00:02:38.560 --> 00:02:41.240
takes restructured text and turns into a UI, nothing like that.


00:02:41.240 --> 00:02:46.680
But there is a really cool project that integrates with standard Python logging.


00:02:46.680 --> 00:02:52.080
So Python logging works in a certain way where it's got like the time and then like the module


00:02:52.080 --> 00:02:57.800
or the category and then the level like trace or info or error and then the message, things


00:02:57.800 --> 00:02:58.800
like that.


00:02:58.800 --> 00:03:05.320
So someone built a really cool UI that will let you in real time watch and accumulate


00:03:05.320 --> 00:03:10.480
the logs into a rich application just by starting up and running it.


00:03:10.480 --> 00:03:12.040
this is actually really cool.


00:03:12.040 --> 00:03:14.000
Plus you can filter your different levels


00:03:14.000 --> 00:03:14.840
and filter them out.


00:03:14.840 --> 00:03:16.160
- Exactly, so like imagine,


00:03:16.160 --> 00:03:17.660
like if you wanna tail your log, right?


00:03:17.660 --> 00:03:19.120
I'm gonna tail it and see what's coming through


00:03:19.120 --> 00:03:20.600
and then it's just like ripping by,


00:03:20.600 --> 00:03:22.160
you're like, oh my gosh, there's all this stuff,


00:03:22.160 --> 00:03:24.280
was there an error, I'm gonna search, oh,


00:03:24.280 --> 00:03:25.520
it's kinda hard to correlate, right?


00:03:25.520 --> 00:03:28.000
So what you do is you install,


00:03:28.000 --> 00:03:31.420
into your app, you install a socket handler


00:03:31.420 --> 00:03:33.880
as one of the trace sources.


00:03:33.880 --> 00:03:36.680
And then you just, this just listens to that UDP source.


00:03:36.680 --> 00:03:40.600
So you install like a socket handler thing,


00:03:40.600 --> 00:03:42.820
and then you run this app and it just, boom,


00:03:42.820 --> 00:03:44.820
it just starts capturing the logs in real time,


00:03:44.820 --> 00:03:46.500
as if you're tailing them, but with a UI,


00:03:46.500 --> 00:03:48.580
you can filter and sort and interact with.


00:03:48.580 --> 00:03:50.380
- Yeah, and change the color on them and stuff.


00:03:50.380 --> 00:03:52.500
- It's got a dark mode, you know it's for developers.


00:03:52.500 --> 00:03:53.740
(laughing)


00:03:53.740 --> 00:03:54.560
- Yeah.


00:03:54.560 --> 00:03:57.100
- Yeah, but quick shout out to just the framework, though.


00:03:57.100 --> 00:04:01.380
It is based on PyQt 5, and it's all open source,


00:04:01.380 --> 00:04:03.020
so you can go check it out and see how they built it.


00:04:03.020 --> 00:04:04.220
It's a pretty decent looking app.


00:04:04.220 --> 00:04:07.080
- Yeah, and actually I haven't been putting


00:04:07.080 --> 00:04:10.760
a lot of levels of logging in some of the work apps


00:04:10.760 --> 00:04:14.640
that I do, but I might with having this logger like that.


00:04:14.640 --> 00:04:15.480
- It's pretty cool.


00:04:15.480 --> 00:04:18.840
So it allows any number of simultaneous connections,


00:04:18.840 --> 00:04:21.320
so you can have different people can watch it.


00:04:21.320 --> 00:04:23.160
You can change the look of the field,


00:04:23.160 --> 00:04:25.040
you can filter like you said, you can search,


00:04:25.040 --> 00:04:27.680
you can view exceptions and tracebacks and stuff


00:04:27.680 --> 00:04:28.840
on separate windows.


00:04:28.840 --> 00:04:30.280
So you can like pop out the traceback


00:04:30.280 --> 00:04:31.360
and just look at the details.


00:04:31.360 --> 00:04:32.180
It's pretty cool.


00:04:32.180 --> 00:04:33.080
- Yeah, okay, neat.


00:04:33.080 --> 00:04:34.040
- Yeah, very nice.


00:04:34.040 --> 00:04:39.040
So there's a really cool CMS for Python called Wagtail, right?


00:04:39.040 --> 00:04:40.720
- Yeah, and I'm actually surprised


00:04:40.720 --> 00:04:41.840
we haven't talked about it yet,


00:04:41.840 --> 00:04:45.720
but there's, I know that when I think of a CMS,


00:04:45.720 --> 00:04:48.480
I'm usually thinking like for a lot of stuff,


00:04:48.480 --> 00:04:51.240
I think of like maybe WordPress,


00:04:51.240 --> 00:04:53.640
or what's that other popular one?


00:04:53.640 --> 00:04:55.840
- Like Squarespace, something like that.


00:04:55.840 --> 00:04:57.080
Drupal, Drupal.


00:04:57.080 --> 00:04:58.520
- Drupal, that's it, yeah.


00:04:58.520 --> 00:05:01.040
There is one for, actually I think there's several


00:05:01.040 --> 00:05:04.240
for Python, but Wagtail is one of the more popular ones.


00:05:04.240 --> 00:05:06.960
And it's got a really nice look.


00:05:06.960 --> 00:05:11.720
And 2.0 just came out, and they're pretty excited about it.


00:05:11.720 --> 00:05:14.920
We did cover Django 2.0 changes recently,


00:05:14.920 --> 00:05:18.380
and this Wagtail 2 does support Django 2.


00:05:18.380 --> 00:05:22.440
And there's apparently a better, newer text editor


00:05:22.440 --> 00:05:24.320
that they're excited about,


00:05:24.320 --> 00:05:28.040
and some fixes in scheduling your published content.


00:05:28.040 --> 00:05:31.200
- Yeah, it's awesome that it's based on Django 2.


00:05:31.200 --> 00:05:34.160
And of course that means goodbye Legacy Python as well,


00:05:34.160 --> 00:05:35.160
right? - Yeah.


00:05:35.160 --> 00:05:38.320
But one of the things that I wanted to highlight as well


00:05:38.320 --> 00:05:40.320
while we're talking about Wagtail is,


00:05:40.320 --> 00:05:42.760
if I'm thinking about a different framework,


00:05:42.760 --> 00:05:47.520
often I kind of want to know really what it's going to be


00:05:47.520 --> 00:05:49.360
like, and that's really hard to tell


00:05:49.360 --> 00:05:50.400
without just starting it.


00:05:50.400 --> 00:05:52.160
But they do have a couple things to help.


00:05:52.160 --> 00:05:54.500
There's a, we're going to link to both of these.


00:05:54.500 --> 00:05:57.240
One of them is a gallery of sites made with Wagtail,


00:05:57.240 --> 00:05:59.320
So it isn't really how to do this,


00:05:59.320 --> 00:06:02.360
but these are things that are possible with this framework.


00:06:02.360 --> 00:06:04.080
And some of them are professional


00:06:04.080 --> 00:06:05.400
and they look really nice.


00:06:05.400 --> 00:06:06.880
- Yeah, they do look really nice.


00:06:06.880 --> 00:06:08.960
And like the whole, what one is it?


00:06:08.960 --> 00:06:12.600
It's the Royal College of Art in London.


00:06:12.600 --> 00:06:14.800
Its entire site is driven by Wagtail.


00:06:14.800 --> 00:06:15.760
- Wow, that's nice.


00:06:15.760 --> 00:06:17.760
And then there's a couple of e-commerce sites


00:06:17.760 --> 00:06:18.600
that are in there too.


00:06:18.600 --> 00:06:20.900
So you can set up e-commerce as well.


00:06:20.900 --> 00:06:25.600
And then the other thing is they have a Zen of Wagtail page


00:06:25.600 --> 00:06:28.680
that talks about, they have kind of their design philosophy


00:06:28.680 --> 00:06:31.600
of how they're set up their code


00:06:31.600 --> 00:06:34.160
and what they're in with the end user.


00:06:34.160 --> 00:06:35.000
So, that's neat.


00:06:35.000 --> 00:06:36.240
- I like it that they have that kind of


00:06:36.240 --> 00:06:38.760
philosophical guidance to help you to go along.


00:06:38.760 --> 00:06:39.600
It's cool.


00:06:39.600 --> 00:06:41.000
Yeah, I would definitely consider Wagtail


00:06:41.000 --> 00:06:43.560
if I was building a site and other people


00:06:43.560 --> 00:06:46.240
had to add stuff to it who were not developers


00:06:46.240 --> 00:06:48.400
and you wanted it to be CMS-like, it's very cool.


00:06:48.400 --> 00:06:50.360
- Yeah, actually, I think I'm gonna set up


00:06:50.360 --> 00:06:52.760
something for work using Wagtail just to try it out.


00:06:52.760 --> 00:06:54.040
- Yeah, super nice.


00:06:54.040 --> 00:06:55.520
So speaking of setting up stuff,


00:06:55.520 --> 00:06:56.880
let me tell you about DigitalOcean.


00:06:56.880 --> 00:06:59.200
So with DigitalOcean, you know,


00:06:59.200 --> 00:07:01.400
you go and create a new server


00:07:01.400 --> 00:07:03.400
and you get like a Linux machine


00:07:03.400 --> 00:07:05.040
and some variety that you pick,


00:07:05.040 --> 00:07:08.000
you SSH in and then you begin your process


00:07:08.000 --> 00:07:09.560
of building your infrastructure, right?


00:07:09.560 --> 00:07:10.720
Do you want WordPress?


00:07:10.720 --> 00:07:11.580
Then you gotta go set that up.


00:07:11.580 --> 00:07:13.040
You want Django?


00:07:13.040 --> 00:07:15.000
You've gotta like make sure Python's installed


00:07:15.000 --> 00:07:17.760
and all the things are all set up and whatnot.


00:07:17.760 --> 00:07:19.320
That doesn't even mention the database, right?


00:07:19.320 --> 00:07:20.880
So one of the cool things that they have


00:07:20.880 --> 00:07:22.960
that I wanna highlight is they have the ability


00:07:22.960 --> 00:07:26.640
create what they call one click apps. And those are actually


00:07:26.640 --> 00:07:30.280
entire virtual machines that are pre configured to run the thing


00:07:30.280 --> 00:07:33.080
that you want. So you want to ghost for, you know, like that


00:07:33.080 --> 00:07:35.640
blog service, static blog service, whatever it is. So you


00:07:35.640 --> 00:07:37.760
just click go to the one click apps and say I want to go


00:07:37.760 --> 00:07:40.120
server, boom, it's up and running. You want to MySQL


00:07:40.120 --> 00:07:43.280
server, click that you got it MongoDB configured, so it's all


00:07:43.280 --> 00:07:47.320
safe on the network, click that. Super cool. They have discourse,


00:07:47.320 --> 00:07:50.440
they have WordPress, they even have a machine learning and AI


00:07:50.720 --> 00:07:56.060
Pre-built thing so you want to have click that and then just log in and start doing your tensorflow and things like that


00:07:56.060 --> 00:07:57.300
It's just like ready to roll


00:07:57.300 --> 00:08:02.340
Yeah, one of the things I like they have a gitlab one so you can set up your own like a your own team


00:08:02.340 --> 00:08:07.140
GitHub like thing so yeah, that's the super cool. You don't need to know that much about it, right?


00:08:07.140 --> 00:08:11.740
It's like all the stuff is set up and running. You just have to be able to keep it running more or less cool


00:08:11.740 --> 00:08:16.420
Thanks. All right. Yeah, so check them out at do dot co slash Python and they're big supporters of the show


00:08:16.420 --> 00:08:19.820
So check out their stuff tell them. Thanks. So I'm a big fan of databases


00:08:19.820 --> 00:08:22.760
we talked about MySQL and MongoDB there.


00:08:22.760 --> 00:08:25.220
What's the most popular way of accessing databases,


00:08:25.220 --> 00:08:26.140
you think?


00:08:26.140 --> 00:08:26.980
What would you use?


00:08:26.980 --> 00:08:28.900
- Raw SQL statements.


00:08:28.900 --> 00:08:30.940
- I'm sure it's the most popular.


00:08:30.940 --> 00:08:34.180
But outside of that, I'm thinking like Django ORM,


00:08:34.180 --> 00:08:37.420
SQLAlchemy, like these are the major tools, right?


00:08:37.420 --> 00:08:38.260
- Yeah, ORMs.


00:08:38.260 --> 00:08:39.080
- Yeah, the ORMs.


00:08:39.080 --> 00:08:40.340
So there's another one that's really cool,


00:08:40.340 --> 00:08:42.600
that's really small and lightweight called PeeWee.


00:08:42.600 --> 00:08:44.260
You would never know by the name.


00:08:44.260 --> 00:08:46.980
- It's a good name, actually.


00:08:46.980 --> 00:08:47.820
- It is a good name.


00:08:47.820 --> 00:08:50.060
So it's a simple and small ORM.


00:08:50.060 --> 00:08:52.540
It has a few but very expressive concepts


00:08:52.540 --> 00:08:55.260
to make it easy to learn, intuitive to use, and so on.


00:08:55.260 --> 00:08:57.460
Right, that's what they say about it.


00:08:57.460 --> 00:08:58.420
It's been around for a while,


00:08:58.420 --> 00:09:01.420
but the news is they did a complete rewrite of it


00:09:01.420 --> 00:09:03.740
and released PUE 3.0.


00:09:03.740 --> 00:09:04.580
- Nice.


00:09:04.580 --> 00:09:05.400
- Yeah, so it's pretty cool.


00:09:05.400 --> 00:09:08.420
It has, it's developed with Python 3.6,


00:09:08.420 --> 00:09:10.420
so it like embraces all those features.


00:09:10.420 --> 00:09:13.620
It has built-in support for SQLite, MySQL, and Postgres.


00:09:13.620 --> 00:09:14.660
Those are all nice.


00:09:14.660 --> 00:09:18.100
and then has extensions for things like full-text search


00:09:18.100 --> 00:09:19.440
and migrations and whatnot.


00:09:19.440 --> 00:09:20.800
So that doesn't sound so PeeWee,


00:09:20.800 --> 00:09:22.360
actually that's a lot of features.


00:09:22.360 --> 00:09:23.680
So a lot of cool stuff.


00:09:23.680 --> 00:09:25.840
One of the reasons it's really interesting to me


00:09:25.840 --> 00:09:29.880
is 'cause there's a separate project called PeeWee Async.


00:09:29.880 --> 00:09:32.500
One of the challenges you have doing any Async stuff


00:09:32.500 --> 00:09:36.040
is everything that is blocking or slow has to be Async


00:09:36.040 --> 00:09:38.460
or there's kind of no point to even getting started, right?


00:09:38.460 --> 00:09:39.480
If I'm gonna call a web service,


00:09:39.480 --> 00:09:43.200
I have to use the Async, the AIO HTTP client


00:09:43.200 --> 00:09:44.760
or it just doesn't make sense, right?


00:09:44.760 --> 00:09:47.440
It's just blocking, like there's no async behaviors.


00:09:47.440 --> 00:09:48.900
And you run into that problem often


00:09:48.900 --> 00:09:52.680
with accessing databases, like say SQLAlchemy and stuff.


00:09:52.680 --> 00:09:56.440
So this thing, PUE_ASYNC, will let you add


00:09:56.440 --> 00:10:00.320
async ability to your queries.


00:10:00.320 --> 00:10:01.200
So it's super cool.


00:10:01.200 --> 00:10:03.200
So you can go, if you want to insert something,


00:10:03.200 --> 00:10:05.720
you would just say like await objects.create,


00:10:05.720 --> 00:10:07.120
and you pass off the object


00:10:07.120 --> 00:10:08.880
you're gonna insert into the database.


00:10:08.880 --> 00:10:10.360
You wanna do a query, you just say like


00:10:10.360 --> 00:10:13.100
all objects equals await objects.execute,


00:10:13.100 --> 00:10:16.480
like your model.select, like in the syntax.


00:10:16.480 --> 00:10:18.820
So it basically allows you to just plug in


00:10:18.820 --> 00:10:22.020
this async and await to very, very minimal effort


00:10:22.020 --> 00:10:24.100
to make your code much more scalable.


00:10:24.100 --> 00:10:25.340
- That's pretty cool, neat.


00:10:25.340 --> 00:10:27.060
- Yeah, so I'm pretty excited to see them doing this.


00:10:27.060 --> 00:10:28.620
This is really cool.


00:10:28.620 --> 00:10:29.780
All right, not a whole lot more.


00:10:29.780 --> 00:10:32.100
I just, I think this is a really cool thing


00:10:32.100 --> 00:10:33.300
that's out there and I wanted to shine


00:10:33.300 --> 00:10:34.300
a little bit of a light on it,


00:10:34.300 --> 00:10:36.540
'cause I think Django and SQLAlchemy


00:10:36.540 --> 00:10:38.300
get most of the sunshine.


00:10:38.300 --> 00:10:39.660
So I told you that digitalization,


00:10:39.660 --> 00:10:42.740
you can go push that button and create a machine learning thing, but what if you don't know


00:10:42.740 --> 00:10:43.740
about machine learning?


00:10:43.740 --> 00:10:45.620
>> Which, I'm kind of in that camp.


00:10:45.620 --> 00:10:49.940
I know most of the buzzwords, but I haven't really done much work in it.


00:10:49.940 --> 00:10:56.820
So I was excited to see that there was somebody that put up a repo, a GitHub repo, called


00:10:56.820 --> 00:10:58.460
Machine Learning Basics.


00:10:58.460 --> 00:11:05.420
And the idea behind this is it's a repository of a lot of the machine describing and showing


00:11:05.420 --> 00:11:08.460
a lot of the machine learning algorithms,


00:11:08.460 --> 00:11:11.780
but not necessarily how you would do it in production.


00:11:11.780 --> 00:11:14.340
Because in production, you've got all these


00:11:14.340 --> 00:11:18.960
fancy server tools that you can use to make things really fast.


00:11:18.960 --> 00:11:21.400
But if you're just trying to understand the concepts,


00:11:21.400 --> 00:11:24.400
I want to see the code.


00:11:24.400 --> 00:11:28.480
What they've set up is a bunch of Jupyter Notebooks actually,


00:11:28.480 --> 00:11:33.380
to go through and describe how you would do it in raw Python.


00:11:33.380 --> 00:11:41.580
How would you do doesn't mean to do linear regression or logistic regression or k means clustering or nearest neighbor.


00:11:41.580 --> 00:11:51.980
And there's a bunch of different algorithms there and if you're just sort of learning what these are being able to look right at the code and be able to play with it i think that


00:11:51.980 --> 00:12:00.660
that might help before you jump into using some of these extra tools i think this is really cool and it's super simple the pictures and graphics are really clear


00:12:00.660 --> 00:12:03.060
the notebooks are just a couple of pages.


00:12:03.060 --> 00:12:04.860
And yeah, it's just pure Python, right?


00:12:04.860 --> 00:12:06.860
It's not like, oh, you call this thing a TensorFlow,


00:12:06.860 --> 00:12:09.460
then magic, magic things happen, right?


00:12:09.460 --> 00:12:11.660
It really shows you the steps, so quite nice.


00:12:11.660 --> 00:12:13.660
- Right, I mean, when I'm just learning stuff,


00:12:13.660 --> 00:12:15.860
and I don't need it to be fast,


00:12:15.860 --> 00:12:18.860
I just, and I don't need to hook up to TensorFlow right away.


00:12:18.860 --> 00:12:21.860
I don't even, I just want to know more about this stuff.


00:12:21.860 --> 00:12:22.960
This is a great thing.


00:12:22.960 --> 00:12:23.960
- Yeah, definitely cool. - So good job.


00:12:23.960 --> 00:12:26.660
- Yeah, well done, and if you're getting started in that,


00:12:26.660 --> 00:12:28.360
definitely check that link out.


00:12:28.360 --> 00:12:30.260
All right, so final thing I want to talk about


00:12:30.260 --> 00:12:36.340
is Severus. Very cool name for a project. It is a cool name. So it's got this, I think,


00:12:36.340 --> 00:12:42.420
Greek name. I'm not sure. So it's the name for the God or the character that is the watchdog


00:12:42.420 --> 00:12:48.980
of Hades whose duty it was to guard the entrance. So the idea is that this is a validation framework


00:12:48.980 --> 00:12:56.100
created by Nicola Hiroshi. And what you do is you can give it like a schema. So the schema is a


00:12:56.100 --> 00:13:02.660
dictionary, it has the names of the fields. And then you can do type validation, min max validation,


00:13:02.660 --> 00:13:07.460
all sorts of different things that you can plug in there. So you create this dictionary, that's


00:13:07.460 --> 00:13:11.940
where it says these are the fields I want to validate. And here's their types and restrictions


00:13:11.940 --> 00:13:18.100
and whatnot. And then if you receive any form of document, it could be from like a rest post,


00:13:18.100 --> 00:13:22.580
it could be something you'd read out or write to a database, whatever, any kind of dictionary,


00:13:22.580 --> 00:13:25.780
you can just say validate this and it'll go through and validate.


00:13:25.780 --> 00:13:30.980
So like, make sure that say the name is a string or if you say the age is five,


00:13:30.980 --> 00:13:34.260
but in your schema, you said it's an integer and the minimum is 10,


00:13:34.260 --> 00:13:35.140
you'll get an error back.


00:13:35.140 --> 00:13:37.060
Sorry, there's a problem or set of problems.


00:13:37.060 --> 00:13:40.180
One of them is the age and the min value is 10, but you gave five.


00:13:40.180 --> 00:13:41.380
Okay, what do you pass it?


00:13:41.380 --> 00:13:42.740
Is it JSON or?


00:13:42.740 --> 00:13:43.780
No, it's just a dictionary.


00:13:43.780 --> 00:13:44.180
Okay.


00:13:44.180 --> 00:13:47.540
Yeah, so it looks very JSON-y, but you just give it any dictionary.


00:13:47.540 --> 00:13:51.300
And so anytime you're reading data that comes in in a dictionary form,


00:13:51.300 --> 00:13:52.660
and you want to validate it.


00:13:52.660 --> 00:13:56.740
This is a really rich and extensible way to do that, right?


00:13:56.740 --> 00:13:58.380
So, quite cool.


00:13:58.380 --> 00:14:01.380
- That's a great way to write at your API level


00:14:01.380 --> 00:14:04.820
to make sure that bad data doesn't go down to the rest.


00:14:04.820 --> 00:14:08.420
Then you can simplify your code in the rest of your project


00:14:08.420 --> 00:14:09.820
because you can assume that data


00:14:09.820 --> 00:14:11.100
is going to be in the right forms.


00:14:11.100 --> 00:14:12.940
- Absolutely, like these fields are required,


00:14:12.940 --> 00:14:13.940
it has to be this format.


00:14:13.940 --> 00:14:15.100
You don't have to go, "Okay, well,


00:14:15.100 --> 00:14:16.220
"I know it comes in a string,


00:14:16.220 --> 00:14:17.460
"can I convert it to an integer?"


00:14:17.460 --> 00:14:18.540
No, that's an exception.


00:14:18.540 --> 00:14:20.020
Okay, so then I'm going to capture that error


00:14:20.020 --> 00:14:21.180
and save it back, right?


00:14:21.180 --> 00:14:25.060
There's just so many like if statements and like clauses for testing and you could just


00:14:25.060 --> 00:14:29.980
define these schemas in one place, call validate when you get the data and off you go.


00:14:29.980 --> 00:14:30.980
It's really, really nice.


00:14:30.980 --> 00:14:34.980
Nice and really very cool that you put that as a separate project so that other projects


00:14:34.980 --> 00:14:35.980
can use it.


00:14:35.980 --> 00:14:36.980
Exactly.


00:14:36.980 --> 00:14:40.540
So this is used in the E framework, which is a restful framework based on Flask and


00:14:40.540 --> 00:14:41.540
Mongo.


00:14:41.540 --> 00:14:44.180
But instead of baking that into the framework, it's like I'm going to create this validation


00:14:44.180 --> 00:14:45.380
thing which is totally separate.


00:14:45.380 --> 00:14:48.620
It makes sense to be used wherever.


00:14:48.620 --> 00:14:52.260
But it just also happens to be the validation layer in the REST framework.


00:14:52.260 --> 00:14:53.260
So quite cool.


00:14:53.260 --> 00:14:54.260
Yeah, very, very neat.


00:14:54.260 --> 00:14:55.260
All right.


00:14:55.260 --> 00:14:56.260
Thanks for all the cool things you found.


00:14:56.260 --> 00:14:57.260
Yeah, thank you.


00:14:57.260 --> 00:14:58.260
Bye.


00:14:58.260 --> 00:15:02.360
Hey everyone, just a quick bit of news before we get out of here.


00:15:02.360 --> 00:15:06.300
When Brian and I recorded, I didn't have anything to share, so we didn't talk about it.


00:15:06.300 --> 00:15:11.380
Since then, I've just launched a new course over at Talk Python Training, and it's called


00:15:11.380 --> 00:15:13.880
100 Days of Code with Python.


00:15:13.880 --> 00:15:17.740
So if you're thinking about doing 100 days of code, or you want this big challenge where


00:15:17.740 --> 00:15:26.660
you write a little bit of code each day, check out the course at talkpython.fm/100days.


00:15:26.660 --> 00:15:28.300
Thank you for listening to Python Bytes.


00:15:28.300 --> 00:15:34.140
Follow the show on Twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S.


00:15:34.140 --> 00:15:37.440
And get the full show notes at pythonbytes.fm.


00:15:37.440 --> 00:15:41.140
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:15:41.140 --> 00:15:42.140
way.


00:15:42.140 --> 00:15:44.660
We're always on the lookout for sharing something cool.


00:15:44.660 --> 00:15:48.100
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:15:48.100 --> 00:15:51.140
Thank you for listening and sharing this podcast with your friends and colleagues.

