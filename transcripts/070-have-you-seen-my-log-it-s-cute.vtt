WEBVTT

00:00:00.001 --> 00:00:05.180
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.180 --> 00:00:09.660
This is episode 70, recorded March 15, 2018.

00:00:09.660 --> 00:00:11.000
I'm Michael Kennedy.

00:00:11.000 --> 00:00:11.800
And I'm Brian Okken.

00:00:11.800 --> 00:00:12.560
Brian, how are you doing?

00:00:12.560 --> 00:00:14.700
I'm doing great. It's good to talk to you again.

00:00:14.700 --> 00:00:18.360
Yeah, you as well. Super excited to talk about some of these things that you got here.

00:00:18.360 --> 00:00:21.920
Before we do, though, let's just say real quick thanks to DigitalOcean.

00:00:21.920 --> 00:00:27.820
They're sponsoring this episode like they do many of the episodes, so check them out at do.co.python.

00:00:28.420 --> 00:00:31.660
You know, I'm a big fan of Cookie Cutter. I've done a couple of things with it.

00:00:31.660 --> 00:00:36.220
Yeah, actually, I'm warming up to it, and I use it for quite a bit now.

00:00:36.220 --> 00:00:41.020
That's nice. You've found an interesting online Cookie Cutter thing. What is this?

00:00:41.020 --> 00:00:44.480
It's from Konstantin Pavlovsky. That's a cool name.

00:00:44.480 --> 00:00:47.060
Anyway, online Cookie Cutter generator.

00:00:47.060 --> 00:00:56.020
And so Cookie Cutter is a command line thing where you point it at, you give it a link to usually a GitHub Cookie Cutter,

00:00:56.020 --> 00:01:02.600
but you can have them be local also. And it starts asking you questions about what you want to fill in the project,

00:01:02.600 --> 00:01:06.300
and then it starts like a Python project for you. You could probably describe it better.

00:01:06.300 --> 00:01:08.620
It's more of a templating thing you could do anything with.

00:01:08.620 --> 00:01:12.740
It's pretty interesting. So the way Cookie Cutter works is it's a CLI thing, and you run it,

00:01:12.740 --> 00:01:17.200
and it will ask you questions, right? Like, what's your email address? What's your full name?

00:01:17.260 --> 00:01:21.780
What do you want to call the project? Do you want to use Jinja 2 or Chameleon Template, etc., etc.?

00:01:21.780 --> 00:01:28.420
This is like that, but it's like a website with a web form that asks the questions like that way, right?

00:01:28.420 --> 00:01:35.260
Right. So he doesn't have, like, everything up, but he's got quite a few up now that are some of the common templates,

00:01:35.840 --> 00:01:43.700
the PyPackage and PyPackage Minimal and a Flask and Bottle and actually quite a few others.

00:01:43.700 --> 00:01:52.340
And instead of doing it on a command line, you select it, and it shows you basically all of the questions that you're going to get asked.

00:01:52.340 --> 00:01:58.700
And you can just fill it in and then generate project, and it generates a zip file for you, and you can download it.

00:01:58.700 --> 00:02:05.640
So basically, like, if you don't have Cookie Cutter installed, you can still execute the Cookie Cutter template by going to the site.

00:02:05.640 --> 00:02:06.120
Yeah.

00:02:06.120 --> 00:02:06.500
Nice.

00:02:06.500 --> 00:02:11.660
If you just kind of want to see all of the questions before you get going, gather those up first.

00:02:11.660 --> 00:02:12.320
That's quite cool.

00:02:12.320 --> 00:02:21.280
I thought it was neat, and he's a pretty cool guy on Twitter, so if you have a favorite Cookie Cutter that you'd like to have him put up there,

00:02:21.280 --> 00:02:23.800
I bet if you just contacted him, he'd probably put it up there.

00:02:23.800 --> 00:02:28.360
Yeah, for sure. Very cool. So check out the online Cookie Cutter generator. I like it.

00:02:28.520 --> 00:02:31.000
So did we go on, like, a rant about GUIs for a while?

00:02:31.000 --> 00:02:33.260
Yeah, for a bit, yeah.

00:02:33.260 --> 00:02:40.440
So I'm not exactly going to talk about, like, another GUI platform that, like, I don't know, takes restructured text and turns into a UI.

00:02:40.440 --> 00:02:41.120
Nothing like that.

00:02:41.120 --> 00:02:45.920
But there is a really cool project that integrates with standard Python logging.

00:02:45.920 --> 00:02:58.220
So Python logging works in a certain way where it's got, like, the time and then, like, the module or the category and then the level, like, trace or info or error, and then the message, things like that.

00:02:58.340 --> 00:03:09.780
So someone built a really cool UI that will let you, in real time, watch and accumulate the logs into a rich application just by starting up and running it.

00:03:09.780 --> 00:03:11.880
Oh, yeah, this is actually really cool.

00:03:11.880 --> 00:03:14.700
Plus, you can filter your different levels and filter them out.

00:03:14.820 --> 00:03:15.120
Exactly.

00:03:15.120 --> 00:03:17.560
So, like, imagine, like, if you want to tail your log, right?

00:03:17.560 --> 00:03:19.000
I'm going to tail it and see what's coming through.

00:03:19.000 --> 00:03:20.500
And then it's just, like, ripping by.

00:03:20.500 --> 00:03:22.120
You're like, oh, my gosh, there's all this stuff.

00:03:22.120 --> 00:03:22.640
Was there an error?

00:03:22.640 --> 00:03:23.240
I'm going to search.

00:03:23.240 --> 00:03:25.440
Oh, like, it's kind of hard to correlate, right?

00:03:25.460 --> 00:03:33.180
So what you do is you install into your app, you install a socket handler as one of the trace sources.

00:03:33.180 --> 00:03:36.280
And then you just, this just listens to that UDP source.

00:03:36.280 --> 00:03:39.920
So you install, like, a socket handler thing.

00:03:39.920 --> 00:03:45.720
And then you run this app and it just, boom, it just starts capturing the logs in real time as if you're tailing them.

00:03:45.720 --> 00:03:48.440
But with a UI, you can filter and sort and interact with.

00:03:48.440 --> 00:03:50.340
Yeah, and change the color on them and stuff.

00:03:50.340 --> 00:03:51.080
It's got a dark mode.

00:03:51.140 --> 00:03:52.000
You know it's for developers.

00:03:52.000 --> 00:03:53.880
Yeah.

00:03:53.880 --> 00:03:57.060
Yeah, but quick shout out to just the framework, though.

00:03:57.060 --> 00:03:59.620
It is based on PyQT5.

00:03:59.620 --> 00:04:01.300
And it's all open source.

00:04:01.300 --> 00:04:03.000
So you can go check it out and see how they built it.

00:04:03.000 --> 00:04:04.140
It's a pretty decent looking app.

00:04:04.140 --> 00:04:04.480
Yeah.

00:04:04.480 --> 00:04:11.100
And actually, I haven't been putting a lot of levels of logging in some of the work apps that I do.

00:04:11.100 --> 00:04:14.540
But I might with having this logger like that.

00:04:14.540 --> 00:04:15.160
It's pretty cool.

00:04:15.160 --> 00:04:18.660
So it allows any number of simultaneous connections.

00:04:18.660 --> 00:04:20.560
So you can have different people can watch it.

00:04:20.560 --> 00:04:22.700
You can change the look of the feel.

00:04:22.700 --> 00:04:24.020
You can filter, like you said.

00:04:24.020 --> 00:04:24.600
You can search.

00:04:24.600 --> 00:04:28.660
You can view exceptions and tracebacks and stuff on separate windows.

00:04:28.660 --> 00:04:31.200
So you can pop out the traceback and just look at the details.

00:04:31.200 --> 00:04:31.760
It's pretty cool.

00:04:31.760 --> 00:04:32.080
Yeah.

00:04:32.080 --> 00:04:32.560
Okay.

00:04:32.560 --> 00:04:33.660
Yeah, very nice.

00:04:33.660 --> 00:04:39.240
So there's a really cool CMS for Python called Wagtail, right?

00:04:39.420 --> 00:04:39.660
Yeah.

00:04:39.660 --> 00:04:41.700
And I'm actually surprised we haven't talked about it yet.

00:04:41.700 --> 00:04:53.560
But there's, I know that when I think of a CMS, I'm usually thinking like for a lot of stuff, I think of like maybe WordPress or what's that other popular one?

00:04:53.560 --> 00:04:55.280
Like Squarespace, something like that.

00:04:55.280 --> 00:04:56.960
Drupal, Drupal.

00:04:56.960 --> 00:04:57.880
Drupal, that's it.

00:04:58.120 --> 00:05:03.520
Yeah, there is one for, there's actually, I think there's several for Python, but Wagtail is one of the more popular ones.

00:05:03.520 --> 00:05:06.880
And it's got a really nice look.

00:05:06.880 --> 00:05:09.100
And 2.0 just came out.

00:05:09.100 --> 00:05:11.520
And they're pretty excited about it.

00:05:11.520 --> 00:05:14.800
We did cover Django 2.0 changes recently.

00:05:14.800 --> 00:05:17.700
And this Wagtail 2 does support Django 2.0.

00:05:18.140 --> 00:05:23.960
And there's apparently a better, newer text editor that they're excited about.

00:05:23.960 --> 00:05:27.880
And some fixes in scheduling your published content.

00:05:27.880 --> 00:05:30.560
Yeah, it's awesome that it's based on Django 2.0.

00:05:30.560 --> 00:05:34.260
And of course, that means goodbye Legacy Python as well, right?

00:05:34.260 --> 00:05:34.620
Yeah.

00:05:34.620 --> 00:05:42.160
But one of the things that I wanted to highlight as well while we're talking about Wagtail is if I'm thinking about a different framework,

00:05:42.160 --> 00:05:47.800
often I kind of want to know really what it's going to be like.

00:05:47.800 --> 00:05:50.300
And that's really hard to tell without just starting it.

00:05:50.300 --> 00:05:51.880
But they do have a couple things to help.

00:05:51.880 --> 00:05:53.980
There's a, we're going to link to both of these.

00:05:53.980 --> 00:05:57.120
One of them is a gallery of sites made with Wagtail.

00:05:57.120 --> 00:06:01.960
So it isn't really how to do this, but these are things that are possible with this framework.

00:06:01.960 --> 00:06:05.260
And some of them are professional and they look really nice.

00:06:05.260 --> 00:06:06.780
Yeah, they do look really nice.

00:06:06.780 --> 00:06:08.880
And like the whole, what one is it?

00:06:08.880 --> 00:06:12.360
It's the Royal College of Art in London.

00:06:12.360 --> 00:06:14.500
Its entire site is driven by Wagtail.

00:06:14.500 --> 00:06:15.660
Wow, that's nice.

00:06:15.660 --> 00:06:18.440
And then there's a couple of e-commerce sites that are in there too.

00:06:18.440 --> 00:06:20.420
So you can set up e-commerce as well.

00:06:20.420 --> 00:06:26.560
And then the other thing is they have a Zen of Wagtail page that talks about,

00:06:26.560 --> 00:06:33.860
they have kind of their design philosophy of how they're set up their code and what they're in with the end user.

00:06:33.860 --> 00:06:34.800
So it's neat.

00:06:34.800 --> 00:06:38.620
I like it that they have that kind of philosophical guidance to help you to go along.

00:06:38.620 --> 00:06:39.000
It's cool.

00:06:39.200 --> 00:06:45.580
Yeah, I would definitely consider Wagtail if I was building a site and other people had to add stuff to it who were not developers.

00:06:45.580 --> 00:06:47.560
And you wanted it to be CMS-like.

00:06:47.560 --> 00:06:48.240
It's very cool.

00:06:48.240 --> 00:06:52.640
Yeah, actually, I think I'm going to set up something for work using Wagtail just to try it out.

00:06:52.640 --> 00:06:53.600
Yeah, super nice.

00:06:53.600 --> 00:06:56.420
So speaking of setting up stuff, let me tell you about DigitalOcean.

00:06:56.960 --> 00:07:04.500
So with DigitalOcean, you know that you go and create a new server and you get like a Linux machine and some variety that you pick.

00:07:04.500 --> 00:07:09.460
You SSH in and then you begin your process of building your infrastructure, right?

00:07:09.460 --> 00:07:10.400
Do you want WordPress?

00:07:10.400 --> 00:07:11.520
Then you've got to go set that up.

00:07:11.520 --> 00:07:12.780
You want Django.

00:07:12.780 --> 00:07:17.460
You've got to like make sure Python's installed and all the things are all set up and whatnot.

00:07:17.460 --> 00:07:19.200
That doesn't even mention the database, right?

00:07:19.200 --> 00:07:24.860
So one of the cool things that they have that I want to highlight is they have the ability to create what they call one-click apps.

00:07:24.860 --> 00:07:30.740
And those are actually entire virtual machines that are pre-configured to run the thing that you want.

00:07:30.740 --> 00:07:35.140
So you want a ghost for, you know, like that blog service, static blog service, whatever it is.

00:07:35.140 --> 00:07:38.100
So you just click, go to the one-click apps and say, I want a ghost server.

00:07:38.100 --> 00:07:39.200
Boom, it's up and running.

00:07:39.200 --> 00:07:40.360
You want a MySQL server?

00:07:40.360 --> 00:07:40.960
Click that.

00:07:40.960 --> 00:07:41.720
You got it.

00:07:41.720 --> 00:07:43.940
MongoDB configured so it's all safe on the network.

00:07:43.940 --> 00:07:45.000
Click that.

00:07:45.000 --> 00:07:46.100
Super cool.

00:07:46.100 --> 00:07:47.100
They have Discourse.

00:07:47.100 --> 00:07:47.940
They have WordPress.

00:07:48.280 --> 00:07:51.500
They even have a machine learning and AI pre-built thing.

00:07:51.500 --> 00:07:56.100
So you want to click that and then just log in and start doing your TensorFlow and things like that.

00:07:56.100 --> 00:07:57.320
It's just like ready to roll.

00:07:57.320 --> 00:07:57.680
Yeah.

00:07:57.680 --> 00:08:03.880
One of the things I like, they have a GitLab one so you can set up your own, like your own team GitHub-like thing.

00:08:03.880 --> 00:08:05.560
Yeah, that's super cool.

00:08:05.560 --> 00:08:07.180
And you don't need to know that much about it, right?

00:08:07.180 --> 00:08:09.100
It's like all the stuff is set up and running.

00:08:09.100 --> 00:08:11.380
You just have to be able to keep it running more or less.

00:08:11.380 --> 00:08:11.760
Cool.

00:08:11.760 --> 00:08:12.080
Nice.

00:08:12.080 --> 00:08:12.460
All right, yeah.

00:08:12.460 --> 00:08:14.940
So check them out at do.co slash Python.

00:08:14.940 --> 00:08:16.460
And they're big supporters of the show.

00:08:16.460 --> 00:08:17.640
So check out their stuff.

00:08:17.640 --> 00:08:18.160
Tell them thanks.

00:08:18.160 --> 00:08:19.700
So I'm a big fan of databases.

00:08:19.700 --> 00:08:22.320
We talked about MySQL and MongoDB there.

00:08:22.320 --> 00:08:25.500
What's the most popular way of accessing databases, you think?

00:08:25.500 --> 00:08:26.600
What would you use?

00:08:26.600 --> 00:08:27.920
Raw SQL statements.

00:08:27.920 --> 00:08:30.140
I'm sure it's the most popular.

00:08:30.140 --> 00:08:35.120
But outside of that, I'm thinking like Django ORM, SQLAlchemy.

00:08:35.120 --> 00:08:37.240
Like these are the major tools, right?

00:08:37.240 --> 00:08:37.980
Yeah, ORMS.

00:08:38.120 --> 00:08:38.600
Yeah, the ORMS.

00:08:38.600 --> 00:08:42.060
So there's another one that's really cool that's really small and lightweight called PeeWee.

00:08:42.060 --> 00:08:43.740
You would never know by the name.

00:08:43.740 --> 00:08:46.160
It's a good name, actually.

00:08:46.160 --> 00:08:46.740
I like it.

00:08:46.740 --> 00:08:47.620
It is a good name.

00:08:47.620 --> 00:08:49.520
So it's a simple and small ORM.

00:08:49.840 --> 00:08:55.360
There's a few but very expressive concepts to make it easy to learn, intuitive to use, and so on, right?

00:08:55.360 --> 00:08:56.800
That's what they say about it.

00:08:56.800 --> 00:08:58.300
It's been around for a while.

00:08:58.300 --> 00:09:03.600
But the news is they did a complete rewrite of it and released PeeWee 3.0.

00:09:03.600 --> 00:09:04.040
Nice.

00:09:04.160 --> 00:09:05.000
Yeah, so it's pretty cool.

00:09:05.000 --> 00:09:10.040
It's developed with Python 3.6, so it embraces all those features.

00:09:10.040 --> 00:09:13.400
It has built-in support for SQLite, MySQL, and Postgres.

00:09:13.400 --> 00:09:14.560
Those are all nice.

00:09:14.560 --> 00:09:19.180
And it has extensions for things like full-text search and migrations and whatnot.

00:09:19.180 --> 00:09:20.680
So that doesn't sound so PeeWee.

00:09:20.680 --> 00:09:21.760
Actually, that's a lot of features.

00:09:21.760 --> 00:09:23.120
It's a lot of cool stuff.

00:09:23.120 --> 00:09:29.160
One of the reasons it's really interesting to me is because there's a separate project called PeeWee Async.

00:09:29.160 --> 00:09:29.680
Okay.

00:09:29.680 --> 00:09:38.020
One of the challenges you have, like, doing any async stuff is, like, everything that is blocking or slow has to be async, or there's kind of no point to even getting started, right?

00:09:38.020 --> 00:09:44.700
If I'm going to call a web service, I have to use, like, the async, the AIo HTTP client, or it just doesn't make sense, right?

00:09:44.700 --> 00:09:45.220
It's just blocking.

00:09:45.220 --> 00:09:47.040
Like, there's no async behaviors.

00:09:47.040 --> 00:09:52.160
And you run into that problem often with accessing databases, like, say, SQLAlchemy and stuff.

00:09:52.160 --> 00:09:59.580
So this thing, PeeWee Async, will let you add async ability to your queries.

00:10:00.280 --> 00:10:01.080
So it's super cool.

00:10:01.080 --> 00:10:08.220
So you're going to go, if you want to insert something, you would just say, like, await objects.create, and you pass off the object you're going to insert to the database.

00:10:08.220 --> 00:10:15.680
You want to do a query, you just say, like, all objects equals await objects.execute, like, you know, your model.select, like, in the syntax.

00:10:16.320 --> 00:10:23.820
So it basically allows you to just plug in this async and await to very, very minimal effort to make your code much more scalable.

00:10:23.820 --> 00:10:24.720
That's pretty cool.

00:10:24.720 --> 00:10:25.040
Yeah.

00:10:25.040 --> 00:10:25.200
Neat.

00:10:25.200 --> 00:10:25.440
Yeah.

00:10:25.440 --> 00:10:27.000
So I'm pretty excited to see them doing this.

00:10:27.000 --> 00:10:28.100
This is really cool.

00:10:28.100 --> 00:10:29.740
I don't know a whole lot more.

00:10:29.840 --> 00:10:37.680
I think this is a really cool thing that's out there, and I wanted to shine a little bit of a light on it because I think Django and SQLAlchemy get most of the sunshine.

00:10:37.680 --> 00:10:38.180
Yeah.

00:10:38.180 --> 00:10:41.700
So I told you that DigitalOcean, you can go push that button and create a machine learning thing.

00:10:41.700 --> 00:10:43.480
But what if you don't know about machine learning?

00:10:43.880 --> 00:10:45.560
Which I'm kind of in that camp.

00:10:45.560 --> 00:10:49.400
I know most of the buzzwords, but I haven't really done much work in it.

00:10:49.400 --> 00:10:57.720
So I was excited to see that there was somebody that put up a repo, a GitHub repo, called Machine Learning Basics.

00:10:57.720 --> 00:11:08.000
And the idea behind this is it's a repository of a lot of the machine describing and showing a lot of the machine learning algorithms,

00:11:08.360 --> 00:11:18.740
but not necessarily how you would do it in production because in production you've got all these fancy server tools that you can use to make things really fast.

00:11:18.740 --> 00:11:23.940
But if you're just trying to understand the concepts, I want to see the code.

00:11:23.940 --> 00:11:33.080
And so what they've set up is a bunch of Jupyter Notebooks, actually, to go through and describe how you would do it in raw Python.

00:11:33.300 --> 00:11:41.320
How would you do, what does it mean to do linear regression or logistic regression or K means clustering or K nearest neighbor?

00:11:41.320 --> 00:11:44.520
And there's a bunch of different algorithms there.

00:11:44.520 --> 00:11:51.160
And if you're just sort of learning what these are, being able to look right at the code and being able to play with it,

00:11:51.160 --> 00:11:55.860
I think that that might help before you jump into using some of these extra tools.

00:11:55.860 --> 00:11:57.000
I think this is really cool.

00:11:57.000 --> 00:11:58.080
And it's super simple.

00:11:58.080 --> 00:12:00.180
The pictures and graphics are really clear.

00:12:00.640 --> 00:12:02.600
The notebooks are just a couple of pages.

00:12:02.600 --> 00:12:04.840
And yeah, it's just pure Python, right?

00:12:04.840 --> 00:12:09.400
It's not like, oh, you call this thing a TensorFlow, then magic, magic things happen, right?

00:12:09.400 --> 00:12:10.800
It really shows you the steps.

00:12:10.800 --> 00:12:11.600
So quite nice.

00:12:11.600 --> 00:12:11.900
Right.

00:12:11.900 --> 00:12:15.680
I mean, when I'm just learning stuff, I don't need it to be fast.

00:12:15.680 --> 00:12:18.880
I just, and I don't need to hook up to TensorFlow right away.

00:12:18.880 --> 00:12:21.420
I don't even, I just want to know more about this stuff.

00:12:21.420 --> 00:12:22.880
This is a great thing.

00:12:22.880 --> 00:12:23.460
Yeah, definitely.

00:12:23.460 --> 00:12:25.080
Yeah, well done.

00:12:25.080 --> 00:12:27.600
And if you're getting started in that, definitely check that link out.

00:12:28.120 --> 00:12:28.600
All right.

00:12:28.600 --> 00:12:31.400
So final thing I want to talk about is Severus.

00:12:31.400 --> 00:12:32.960
Very cool name for a project.

00:12:32.960 --> 00:12:34.160
It is a cool name.

00:12:34.160 --> 00:12:37.520
So it's got this, I think, Greek name.

00:12:37.520 --> 00:12:37.880
I'm not sure.

00:12:37.880 --> 00:12:45.200
So it's the name for the god or the character that is the watchdog of Hades, whose duty it was to guard the entrance.

00:12:45.400 --> 00:12:50.340
So the idea is that this is a validation framework created by Nicola Ioroshi.

00:12:50.340 --> 00:12:54.920
And what you do is you can give it like a schema.

00:12:54.920 --> 00:12:56.540
So the schema is a dictionary.

00:12:56.540 --> 00:12:58.720
It has the names of the fields.

00:12:58.720 --> 00:13:05.680
And then you can do type validation, min max validation, all sorts of different things that you can plug in there.

00:13:05.680 --> 00:13:09.520
So you create this dictionary that's where it says, these are the fields I want to validate.

00:13:09.520 --> 00:13:12.440
And here's their types and restrictions and whatnot.

00:13:12.440 --> 00:13:18.200
And then if you receive any form of document, it could be from like a rest post.

00:13:18.200 --> 00:13:22.600
It could be something you'd read out or write to a database, whatever, any kind of dictionary.

00:13:22.600 --> 00:13:23.960
You can just say validate this.

00:13:23.960 --> 00:13:25.780
And it'll go through and validate.

00:13:25.780 --> 00:13:35.200
So like make sure that, say, the name is a string or if you say the age is five, but in your schema you said it's an integer and the minimum is 10, you'll get an error back.

00:13:35.200 --> 00:13:37.000
Sorry, there's a problem or a set of problems.

00:13:37.000 --> 00:13:40.120
One of them is the age and the min value is 10, but you get five.

00:13:40.120 --> 00:13:40.500
Okay.

00:13:40.500 --> 00:13:41.460
What do you pass it?

00:13:41.460 --> 00:13:42.740
Is it JSON or?

00:13:42.740 --> 00:13:43.620
No, it's just a dictionary.

00:13:43.620 --> 00:13:44.160
Okay.

00:13:44.160 --> 00:13:44.480
Yeah.

00:13:44.480 --> 00:13:47.340
So it looks very JSON-y, but you just give it any dictionary.

00:13:47.340 --> 00:13:56.860
And so anytime you're reading data that comes in in a dictionary form and you want to validate it, this is a really rich and extensible way to do that, right?

00:13:56.860 --> 00:13:58.400
So quite cool.

00:13:58.400 --> 00:14:04.980
That's a great way to write at your API level to make sure that bad data doesn't go down to the rest.

00:14:04.980 --> 00:14:11.200
Then you can simplify your code in the rest of your project because you can assume that data is going to be in the right forms.

00:14:11.200 --> 00:14:11.720
Absolutely.

00:14:11.720 --> 00:14:12.940
Like these fields are required.

00:14:12.940 --> 00:14:14.060
It has to be this format.

00:14:14.060 --> 00:14:16.400
You don't have to go, okay, well, I know it comes in the string.

00:14:16.500 --> 00:14:17.560
Can I convert it to an integer?

00:14:17.560 --> 00:14:18.620
No, that's an exception.

00:14:18.620 --> 00:14:18.940
Okay.

00:14:18.940 --> 00:14:21.040
So then I'm going to capture that error and say it back, right?

00:14:21.040 --> 00:14:24.520
There's just so many like if statements and like clauses for testing.

00:14:24.520 --> 00:14:29.860
And you could just define these schemas in one place, call validate when you get the data and off you go.

00:14:29.860 --> 00:14:30.660
It's really, really nice.

00:14:30.660 --> 00:14:35.500
Nice and really very cool that you put that as a separate project so that other projects can use it.

00:14:35.500 --> 00:14:35.880
Exactly.

00:14:35.880 --> 00:14:40.840
So this is used in the E framework, which is a restful framework based on Flask and Mongo.

00:14:40.840 --> 00:14:45.380
But instead of baking that into the framework, it's like I'm going to create this validation thing, which is totally separate.

00:14:45.500 --> 00:14:52.060
It makes sense to be used wherever, but it just also happens to be the validation layer in the rest framework.

00:14:52.060 --> 00:14:52.880
So quite cool.

00:14:52.880 --> 00:14:53.160
Neat.

00:14:53.160 --> 00:14:53.400
Yeah.

00:14:53.400 --> 00:14:53.960
Very, very neat.

00:14:53.960 --> 00:14:54.240
All right.

00:14:54.240 --> 00:14:55.960
For all the cool things you found.

00:14:55.960 --> 00:14:56.320
Yeah.

00:14:56.320 --> 00:14:56.760
Thank you.

00:14:56.760 --> 00:14:57.220
Bye.

00:14:57.220 --> 00:14:58.880
Hey everyone.

00:14:59.020 --> 00:15:01.980
Just a quick bit of news before we get out of here.

00:15:01.980 --> 00:15:05.620
When Brian and I recorded, I didn't have anything to share, so we didn't talk about it.

00:15:05.620 --> 00:15:13.420
Since then, I've just launched a new course over at Talk Python Training, and it's called 100 Days of Code with Python.

00:15:13.420 --> 00:15:19.680
So if you're thinking about doing 100 days of code or you want this big challenge where you write a little bit of code each day,

00:15:20.060 --> 00:15:23.980
check out the course at talkpython.fm/100 days.

00:15:23.980 --> 00:15:25.460
So 100 days.

00:15:25.460 --> 00:15:28.100
Thank you for listening to Python Bytes.

00:15:28.100 --> 00:15:30.660
Follow the show on Twitter via at Python Bytes.

00:15:30.660 --> 00:15:33.540
That's Python Bytes as in B-Y-T-E-S.

00:15:33.780 --> 00:15:36.960
And get the full show notes at Python Bytes.fm.

00:15:36.960 --> 00:15:41.320
If you have a news item you want featured, just visit Python Bytes.fm and send it our way.

00:15:41.320 --> 00:15:44.020
We're always on the lookout for sharing something cool.

00:15:44.020 --> 00:15:47.420
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:15:47.420 --> 00:15:51.020
Thank you for listening and sharing this podcast with your friends and colleagues.

