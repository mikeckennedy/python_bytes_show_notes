WEBVTT

00:00:00.001 --> 00:00:05.780
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.780 --> 00:00:11.960
This is episode 406, recorded Monday, October 21st, 2024.

00:00:11.960 --> 00:00:12.940
I'm Michael Kennedy.

00:00:12.940 --> 00:00:14.160
And I'm Brian Nockin.

00:00:14.160 --> 00:00:17.580
And this episode is brought to you by Scout APM.

00:00:17.580 --> 00:00:20.380
We would love to tell you more about them later.

00:00:20.380 --> 00:00:23.420
If you want to stay in touch with us, send us show ideas.

00:00:23.420 --> 00:00:28.060
We love it when people send us ideas like, hey, you should check out this because...

00:00:28.060 --> 00:00:32.160
Brian, usually it starts with, I'm sure you've heard of this, but here it is.

00:00:32.160 --> 00:00:33.460
I'm like, I've not heard of that.

00:00:33.460 --> 00:00:34.980
And I really appreciate you sending it.

00:00:34.980 --> 00:00:36.700
So keep that kind of stuff coming.

00:00:36.700 --> 00:00:37.680
It helps us a lot, right?

00:00:37.680 --> 00:00:38.340
Definitely.

00:00:38.340 --> 00:00:42.800
And even if we have, we at most get a couple duplicates.

00:00:42.800 --> 00:00:43.340
That's fine.

00:00:43.340 --> 00:00:44.320
Yeah, yeah, exactly.

00:00:44.320 --> 00:00:48.980
If you want to stay in touch with us or send us things, find us on Mastodon or shoot us an email.

00:00:48.980 --> 00:00:51.080
Links at the top of the show notes.

00:00:51.080 --> 00:00:55.580
And do consider signing up for the newsletter.

00:00:56.000 --> 00:01:01.040
The newsletter that Brian sends out every week just after the show comes out with everything

00:01:01.040 --> 00:01:03.160
we've talked about written down there.

00:01:03.160 --> 00:01:03.840
So you have it.

00:01:03.840 --> 00:01:06.100
Just get an email if you don't have a time to listen.

00:01:06.100 --> 00:01:07.640
Although we prefer people to listen.

00:01:07.640 --> 00:01:08.420
That's always fun.

00:01:08.420 --> 00:01:09.120
Yeah.

00:01:09.120 --> 00:01:13.120
I just think it's nice that people don't have to like write notes down while they're listening.

00:01:13.120 --> 00:01:14.740
They can just get it from the email later.

00:01:14.740 --> 00:01:15.160
Yeah.

00:01:15.160 --> 00:01:18.320
So pythonbytes.fm, click the newsletter button, enter your email.

00:01:18.320 --> 00:01:19.480
Everything will be good.

00:01:19.480 --> 00:01:22.520
Brian, I want to listen to what you want to tell us about first.

00:01:22.520 --> 00:01:22.880
What's up?

00:01:23.300 --> 00:01:25.680
I think people should pay more money to open source.

00:01:25.680 --> 00:01:29.080
So I'm going to cover open source pledge.

00:01:29.080 --> 00:01:35.540
And I'm going to hop over to the Django site to begin with, because that's where I found out about it.

00:01:35.540 --> 00:01:42.840
Because the Django community, Django Software Foundation announced that they are supporting the open source pledge.

00:01:43.640 --> 00:01:45.100
And what does this mean?

00:01:45.100 --> 00:01:48.560
Well, the open source pledge is really simple to do.

00:01:48.560 --> 00:01:54.800
All you have to do is you have to say that you're going to pay open source maintainers.

00:01:54.800 --> 00:02:00.120
Minimum to participate is $2,000 per year per developer at your company.

00:02:00.120 --> 00:02:02.360
So you don't have to count your salespeople.

00:02:02.360 --> 00:02:05.060
You don't have to count the janitor.

00:02:05.060 --> 00:02:06.000
Stuff like that.

00:02:06.180 --> 00:02:12.900
But how many devs you have, $2,000 per year seems like more than reasonable, because you know you're getting that much value out of open source.

00:02:12.900 --> 00:02:15.220
So you self-report.

00:02:15.220 --> 00:02:22.500
So you pledge this, and then you self-report annually, click a blog or make a blog post to say how you've paid.

00:02:22.560 --> 00:02:28.200
Well, there's a whole bunch of, if you take a look, there's a list of members already.

00:02:28.200 --> 00:02:38.960
And I'm not sure how long this has been out, but the list of members includes people like Sentry, have 135 devs.

00:02:38.960 --> 00:02:44.040
And they're pledging 3,704 per dev, which is pretty cool.

00:02:44.040 --> 00:02:47.200
Laravel's in there, so it's not just Python people.

00:02:47.200 --> 00:02:50.120
And yeah, a bunch of great names in here.

00:02:50.820 --> 00:02:52.260
So what is this?

00:02:52.260 --> 00:02:52.900
Oh, button down.

00:02:52.900 --> 00:02:53.620
That's nice.

00:02:53.620 --> 00:02:54.760
Even one dev.

00:02:54.760 --> 00:02:58.240
They're doing 5K per developer, but it's just nice.

00:02:58.240 --> 00:03:01.260
Anyway, so Django says, let's do that also.

00:03:01.260 --> 00:03:06.500
And to help make the Django community more sustainable.

00:03:06.500 --> 00:03:09.160
And I think this is great.

00:03:09.160 --> 00:03:10.220
So they're pledging it.

00:03:10.220 --> 00:03:15.020
I don't know how many devs the Python Software Foundation has now.

00:03:15.020 --> 00:03:19.740
We know they have at least two full-time, but I think it's growing.

00:03:20.180 --> 00:03:21.040
So that's pretty cool.

00:03:21.040 --> 00:03:23.160
So I think this is a great idea.

00:03:23.160 --> 00:03:24.600
And it's neat.

00:03:24.600 --> 00:03:26.720
I pledge your support for open source.

00:03:26.720 --> 00:03:29.360
It's an interesting time for money and open source.

00:03:29.360 --> 00:03:31.360
And I do think it's a good idea as well.

00:03:31.360 --> 00:03:32.820
But there's some crazy stuff.

00:03:32.820 --> 00:03:33.320
Yeah.

00:03:33.320 --> 00:03:34.140
See WordPress.

00:03:34.140 --> 00:03:35.740
It's so insane.

00:03:36.220 --> 00:03:38.380
But that's not pledging money to open source.

00:03:38.380 --> 00:03:40.920
That's something else entirely.

00:03:40.920 --> 00:03:47.200
I do want to put this up there, but I do want to point out there's a cool post by Armin Roeneker

00:03:47.200 --> 00:03:50.420
who talked about the inevitability of mixing open source and money.

00:03:50.420 --> 00:03:55.880
And also just give a shout out to Sentry, who I believe this open source pledge was their idea.

00:03:55.880 --> 00:03:57.840
And Armin was behind the launch of it.

00:03:57.980 --> 00:03:59.220
So well done, Armin.

00:03:59.220 --> 00:04:00.500
Well done, Sentry.

00:04:00.500 --> 00:04:02.340
You know, Sentry's a big sponsor.

00:04:02.340 --> 00:04:04.020
Yeah, a big sponsor of Talk Python.

00:04:04.020 --> 00:04:08.540
So, and I believe they sponsored Python Byte some as well, but certainly Talk Python.

00:04:08.540 --> 00:04:13.920
But there's, if you want to see a bunch of interesting reading, I'll put that article in there as well.

00:04:13.920 --> 00:04:17.240
But moving on, let's talk about TV.

00:04:17.240 --> 00:04:18.600
Let's watch some TV, Brian.

00:04:18.600 --> 00:04:19.080
Okay.

00:04:19.120 --> 00:04:20.220
What's on tonight?

00:04:20.220 --> 00:04:25.580
Catch the nightly news, Three's Company, Four, maybe some Django.

00:04:25.580 --> 00:04:30.340
So I believe this project is put together by Jeff Triplett.

00:04:30.340 --> 00:04:31.740
So well done, Jeff.

00:04:31.740 --> 00:04:34.720
And it's called Django TV at DjangoTV.com.

00:04:34.720 --> 00:04:41.600
And the idea here is these are videos from, it's like a kind of a little mini YouTube-like thing, sort of,

00:04:41.600 --> 00:04:42.780
but for all the conferences.

00:04:42.780 --> 00:04:48.680
So, you know, you want to see the conferences at DjangoConUS of 2023.

00:04:49.260 --> 00:04:49.520
Boom.

00:04:49.520 --> 00:04:50.500
There they all are.

00:04:50.500 --> 00:04:53.240
You want to find all the videos about HTMX.

00:04:53.240 --> 00:04:56.860
There are many because HTMX is awesome and so on.

00:04:56.860 --> 00:05:02.060
Search for it and see friends of ours up there speaking and doing things like that.

00:05:02.060 --> 00:05:04.720
So not a big, deep thing to go into.

00:05:04.720 --> 00:05:06.340
However, it's nice, right?

00:05:06.340 --> 00:05:09.100
Basically, it's a curated list with the descriptions.

00:05:09.100 --> 00:05:13.760
You know, you always want to know, like, when is something published, right?

00:05:13.760 --> 00:05:15.660
That's often the thing with conferences.

00:05:15.660 --> 00:05:17.600
Like, I saw there was going to be a cool talk.

00:05:17.820 --> 00:05:19.360
It happened three months ago.

00:05:19.360 --> 00:05:21.580
Eventually, somebody's going to put it on the internet.

00:05:21.580 --> 00:05:23.220
Probably, we think.

00:05:23.220 --> 00:05:24.540
We're not entirely sure.

00:05:24.540 --> 00:05:29.500
So you can come down here and just hit the RSS feed and subscribe to that.

00:05:29.500 --> 00:05:34.320
And it'll just, all the Django videos start popping up when you subscribe.

00:05:34.320 --> 00:05:34.800
Pretty cool.

00:05:34.800 --> 00:05:35.900
Yeah, it's pretty cool.

00:05:35.900 --> 00:05:36.840
And this is pretty new.

00:05:36.840 --> 00:05:42.720
So if you've got old videos or new conference videos that are not listed here, especially Django-related.

00:05:43.400 --> 00:05:44.380
Yeah, fix it.

00:05:44.380 --> 00:05:44.460
Fix it.

00:05:44.460 --> 00:05:45.540
Fix it indeed.

00:05:45.540 --> 00:05:46.420
All right.

00:05:46.420 --> 00:05:49.260
Well, that is my main one.

00:05:49.260 --> 00:05:55.040
Now, before we move on, let me tell you real quick about Scout APM.

00:05:55.040 --> 00:05:57.180
They're big supporters of Python Bytes.

00:05:57.180 --> 00:05:58.700
So we appreciate that very much.

00:05:59.000 --> 00:06:07.620
So if you are tired of spending hours trying to find the root cause of issues impacting your performance, then you owe it to yourself to check out Scout APM.

00:06:07.940 --> 00:06:16.760
They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:06:16.760 --> 00:06:27.540
Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs, and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM.

00:06:27.540 --> 00:06:28.560
And then you say, oh, no.

00:06:28.560 --> 00:06:29.920
Why is it so slow?

00:06:29.920 --> 00:06:32.260
Why are you doing 200 database queries for what should be one?

00:06:32.440 --> 00:06:33.640
So you can find out things like that.

00:06:33.640 --> 00:06:40.880
And it links it back directly to source code so you can spend less time in the debugger and healing logs and just finding the problems and moving on.

00:06:40.880 --> 00:06:43.920
And you'll love it because it's built for developers by developers.

00:06:43.920 --> 00:06:45.580
It makes it easy to get set up.

00:06:45.580 --> 00:06:48.120
Seriously, you can do it in less than four minutes.

00:06:48.120 --> 00:06:48.920
So that's awesome.

00:06:48.920 --> 00:06:52.000
And the best part is the pricing is straightforward.

00:06:52.000 --> 00:06:57.400
You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:06:57.400 --> 00:06:59.740
And I just learned this, Brian.

00:06:59.740 --> 00:07:04.860
They also have they provide the pro version for free to all open source projects.

00:07:04.860 --> 00:07:12.180
So if you're an open source maintainer and you want to have Scout APM for that project, just shoot them a message or something on their pricing page about that.

00:07:12.180 --> 00:07:16.040
So you can start your free trial and get instant insights today.

00:07:16.040 --> 00:07:18.680
Visit pythonbytes.fm/Scout.

00:07:18.680 --> 00:07:20.920
The link is in your podcast player show notes as well.

00:07:21.180 --> 00:07:22.320
And please use that link.

00:07:22.320 --> 00:07:26.180
Don't just search for them because otherwise they don't think you came from us.

00:07:26.180 --> 00:07:27.780
And then they'd stop supporting the show.

00:07:27.780 --> 00:07:30.340
So please use our link, pythonbytes.fm/Scout.

00:07:30.340 --> 00:07:31.260
Check them out.

00:07:31.260 --> 00:07:33.200
It really supports the show.

00:07:33.200 --> 00:07:34.120
Brian, over to you.

00:07:34.120 --> 00:07:34.560
Yep.

00:07:34.560 --> 00:07:38.600
So I'd like to talk about dependencies a little bit.

00:07:38.600 --> 00:07:40.060
So projects have dependencies.

00:07:40.060 --> 00:07:45.760
We often stick them in requirements.txt files or PyProject.toml files.

00:07:45.760 --> 00:07:48.040
But there's a new PEP that just came out.

00:07:48.040 --> 00:07:50.320
Well, it's been out for a bit.

00:07:50.360 --> 00:07:54.280
It was created in 2023, November, but it just got resolved.

00:07:54.280 --> 00:07:56.580
And so I think it just got accepted recently.

00:07:56.580 --> 00:07:58.720
So the resolution date of 10th of October.

00:07:58.720 --> 00:08:04.060
So PEP 735 is dependency groups in PyProject.toml.

00:08:04.320 --> 00:08:09.520
And my first glance at this, I'm like, don't we already kind of have that in extras?

00:08:09.520 --> 00:08:14.080
But that's addressed by this PEP.

00:08:14.300 --> 00:08:22.860
So the idea is that we have other dependencies, not direct project dependencies, but extra stuff,

00:08:22.860 --> 00:08:26.160
like when you're building your docs or you're running your tests or things like that.

00:08:26.160 --> 00:08:28.780
So how do we specify those?

00:08:28.980 --> 00:08:31.700
And there's a couple of ways that people have done it in the past.

00:08:31.700 --> 00:08:35.160
One of them is the extras in PyProject.toml.

00:08:35.400 --> 00:08:40.180
But preceding that, even before we had that, there were extra requirements.txt files.

00:08:40.180 --> 00:08:43.880
So some projects have a main requirements.txt file.

00:08:43.880 --> 00:08:51.960
And then some of them have a requirements.dev file or requirements.doc file or something or several.

00:08:51.960 --> 00:08:57.480
And the problem with that really is that there's no standardization around it.

00:08:58.320 --> 00:09:04.020
And then also there's not really a standardization about the requirements.txt file.

00:09:04.020 --> 00:09:07.060
It's just whatever you can pass to pip install.

00:09:07.060 --> 00:09:11.960
And so like even flags and stuff, which is actually kind of fun.

00:09:11.960 --> 00:09:13.240
Anyway, tangent.

00:09:13.240 --> 00:09:19.680
But so that's, I don't think a bunch of requirements files is the right answer.

00:09:19.680 --> 00:09:20.520
How about extras?

00:09:20.520 --> 00:09:26.360
Well, I was surprised to find out that the extras that you can put in extra dependencies

00:09:26.360 --> 00:09:33.920
or optional dependencies, these are, these might not, I learned that they're, they're using,

00:09:33.920 --> 00:09:36.380
they're, they might not be resolved.

00:09:36.380 --> 00:09:38.260
What am I trying to say here?

00:09:38.260 --> 00:09:42.360
They, they're not guaranteed to be statically defined.

00:09:42.360 --> 00:09:44.160
They could be dynamically defined.

00:09:44.160 --> 00:09:46.380
And, and that I just didn't even know.

00:09:46.380 --> 00:09:51.740
So we do need it to be statically defined so that, so that, you know, tools can read it easily.

00:09:52.520 --> 00:09:57.420
And there's other limitations around using the extras as well.

00:09:57.420 --> 00:10:00.860
Also, I think it's just, I think extras confuses people.

00:10:00.860 --> 00:10:06.180
I know it's a feature of pyproject.toml, but I was confused by it at first, had to like, like

00:10:06.180 --> 00:10:07.240
study it for a bit.

00:10:07.240 --> 00:10:12.560
And it just somehow doesn't, doesn't fit right away with a lot of people's mindset.

00:10:12.560 --> 00:10:14.660
But these dependency groups look pretty good.

00:10:14.740 --> 00:10:16.360
So let's take a look at one example.

00:10:16.360 --> 00:10:22.560
So their example in the PEP just shows you get a block of dependency groups section.

00:10:22.560 --> 00:10:27.380
And then there's stuff like test with a list of, a list of things like pytesting coverage.

00:10:27.380 --> 00:10:31.660
Docs might have Sphinx and, and the Sphinx read the docs theme.

00:10:31.660 --> 00:10:35.360
Typing for doing type checking, like my py and type requests.

00:10:35.880 --> 00:10:37.660
So these all totally make sense.

00:10:37.660 --> 00:10:41.420
And then there's a, there's an extra bit about being able to group others.

00:10:41.420 --> 00:10:44.620
So you could have a dependency group that includes other groups.

00:10:44.620 --> 00:10:45.380
That's pretty cool.

00:10:45.380 --> 00:10:49.620
And then there's some details around like, well, what happens if they conflict with each other

00:10:49.620 --> 00:10:50.020
and stuff?

00:10:50.020 --> 00:10:52.320
So that's well-defined, which is good.

00:10:52.320 --> 00:10:57.180
But I just think like having something like this, like a small block that say, Hey, for tests,

00:10:57.180 --> 00:10:59.300
we use pytesting coverage for docs.

00:10:59.420 --> 00:11:03.700
We use these and have that be nice and succinct in a dependency group section.

00:11:03.700 --> 00:11:04.420
I like it.

00:11:04.420 --> 00:11:05.860
So this has been accepted.

00:11:05.860 --> 00:11:09.000
I'm not sure when it's going to come to a pip near you.

00:11:09.000 --> 00:11:11.140
But it's pretty cool.

00:11:11.140 --> 00:11:14.920
There, there's an example of how it might work at the end.

00:11:14.920 --> 00:11:21.240
Like how, I don't know, reference implementation, how it might work of like saying maybe pip install

00:11:21.240 --> 00:11:24.360
dependency groups and be able to install that.

00:11:24.880 --> 00:11:29.120
But, but that's up to PIP, the pip maintainers to figure out how, how that's really going

00:11:29.120 --> 00:11:29.520
to be used.

00:11:29.520 --> 00:11:32.440
Other interesting thing is extras are extras.

00:11:32.440 --> 00:11:37.820
Extras are on top of the normal thing, everything needed for the, for the system.

00:11:37.820 --> 00:11:42.940
But for example, like when you're doing the documentation build, you don't actually have to build your

00:11:42.940 --> 00:11:44.740
thing to build the docs.

00:11:44.740 --> 00:11:49.560
So these dependency groups do not, they're not extra, they're independent.

00:11:49.780 --> 00:11:55.580
So you could build the, install the documentation dependencies without installing the project,

00:11:55.580 --> 00:11:56.720
which is pretty interesting.

00:11:56.720 --> 00:11:57.540
So anyway.

00:11:57.540 --> 00:12:03.940
That's, that's one of the differences they highlight is the extras require, they add onto the base

00:12:03.940 --> 00:12:04.420
requirements.

00:12:04.420 --> 00:12:08.880
Whereas this, you can have one set of things installed for one scenario and another for another

00:12:08.880 --> 00:12:12.880
without necessarily overlapping them, which you might think, whatever, right?

00:12:12.880 --> 00:12:13.360
It doesn't matter.

00:12:13.360 --> 00:12:14.480
Just install some extra stuff.

00:12:14.480 --> 00:12:18.920
But there's certain things that say work in production, but won't install on windows.

00:12:18.920 --> 00:12:20.460
For example, right?

00:12:20.460 --> 00:12:25.140
I think last I looked, UV loop didn't work on windows, but it was like a speed up for async

00:12:25.140 --> 00:12:26.000
IO on Linux.

00:12:26.000 --> 00:12:32.880
Well, there also might be a, an incompatibility of a dependent library on like your, if you're

00:12:32.880 --> 00:12:37.300
using Sphinx, maybe Sphinx depends on something that's a different version than what your project

00:12:37.300 --> 00:12:37.960
depends on.

00:12:37.960 --> 00:12:38.380
Yeah.

00:12:38.380 --> 00:12:38.700
Yeah.

00:12:38.700 --> 00:12:38.880
Yeah.

00:12:38.880 --> 00:12:39.340
Good point.

00:12:39.340 --> 00:12:43.240
So indeed Henry on the audience throws in that extras are public.

00:12:43.480 --> 00:12:47.880
These are not, unfortunately we lose the ability to guarantee the package was installed.

00:12:47.880 --> 00:12:49.020
Sometimes you want this.

00:12:49.020 --> 00:12:49.820
Sometimes you don't.

00:12:49.820 --> 00:12:50.060
Thanks.

00:12:50.060 --> 00:12:50.460
Yeah.

00:12:50.460 --> 00:12:52.900
Um, hat tip to a transition.

00:12:52.900 --> 00:12:53.780
You didn't know what's coming.

00:12:53.780 --> 00:12:57.060
So overhead talk by the on training.

00:12:57.060 --> 00:13:02.320
We have a free course called static sites and API docs with Sphinx, Python and Markdown done

00:13:02.320 --> 00:13:03.820
by Paul Everett.

00:13:03.820 --> 00:13:09.780
And he unwittingly introduced me to this next topic through that course on here.

00:13:09.780 --> 00:13:12.900
Live reload as in pip install live reload.

00:13:13.020 --> 00:13:13.460
Do you know this?

00:13:13.460 --> 00:13:14.000
No.

00:13:14.000 --> 00:13:19.920
So it's kind of a generic file watcher, mostly focused on web apps, but you could use it for

00:13:19.920 --> 00:13:20.760
literally anything.

00:13:20.760 --> 00:13:26.120
And it's just, you can say, here's a set of file patterns, multiple ones.

00:13:26.120 --> 00:13:32.160
And it can, you can use the star star slash something to like look at sub directories and

00:13:32.160 --> 00:13:32.580
whatnot.

00:13:32.580 --> 00:13:38.580
You know, the, the file pattern craziness to however much you want.

00:13:38.800 --> 00:13:45.060
And then if something changes, it will just run an arbitrary shell command for you and potentially

00:13:45.060 --> 00:13:46.840
restart your web app as well.

00:13:46.840 --> 00:13:50.960
If you give it a web app, like a flask or Django, a whiskey app type of thing.

00:13:51.080 --> 00:13:51.940
So that's pretty cool.

00:13:51.940 --> 00:13:55.520
If you look at the documentation, you will find it to be sparse.

00:13:55.520 --> 00:14:00.220
Like the description of it literally is about eight words, one sentence.

00:14:00.220 --> 00:14:04.020
It tells you how to install it, but like, well, okay.

00:14:04.020 --> 00:14:05.240
But why would I install it?

00:14:05.240 --> 00:14:08.740
You look at the API reference and it's, it's basically just a signature.

00:14:08.740 --> 00:14:12.180
So if people are looking to contribute to a project, you know, maybe given this a little

00:14:12.180 --> 00:14:15.960
example, a little bit of a, a few paragraphs would be awesome.

00:14:15.960 --> 00:14:21.120
But, I gave you an example that we can all use from Python bytes and from talk Python,

00:14:21.120 --> 00:14:22.100
similar apps.

00:14:22.100 --> 00:14:23.560
So similar use here.

00:14:23.560 --> 00:14:30.920
And so I, I'm sharing a gist with folks that will, if you run it a little file here, you

00:14:30.920 --> 00:14:36.500
can just run this as in your terminal or just however you start it and just leave it running

00:14:36.500 --> 00:14:39.940
while you're working on a project and what it'll do.

00:14:39.940 --> 00:14:41.840
It'll track down using pathlib.

00:14:41.840 --> 00:14:45.940
It'll track down the root folder and then find a CSS folder and a JavaScript folder.

00:14:45.940 --> 00:14:51.080
And then it'll run Python against some file that does bundling.

00:14:51.080 --> 00:14:57.100
So for example, at Python bytes, we take maybe six or seven CSS files and minify and bundle them

00:14:57.100 --> 00:14:58.940
into a single one in a certain order.

00:14:58.940 --> 00:15:00.680
And then share that over a CDN.

00:15:00.680 --> 00:15:01.200
Yeah.

00:15:01.200 --> 00:15:07.140
And so depending on how it's running, you may or may not see those changes if you're doing

00:15:07.140 --> 00:15:10.220
like CSS design stuff, same thing for JavaScript, right?

00:15:10.220 --> 00:15:15.780
So what you can do is you just set this up, pointed the right places on your file system,

00:15:15.780 --> 00:15:22.500
say, watch the CSS folder, watch the JS folder and run a shell command, which is tell Python

00:15:22.500 --> 00:15:25.420
to run that Python script that does the bundling.

00:15:25.520 --> 00:15:26.580
Boom, off it goes.

00:15:26.580 --> 00:15:28.680
And you just run that in the background while you're working.

00:15:28.680 --> 00:15:29.300
What do you think?

00:15:29.300 --> 00:15:30.100
That's pretty cool.

00:15:30.100 --> 00:15:34.960
So with this, if you change the JavaScript and CSS, it just automatically updates then?

00:15:34.960 --> 00:15:35.360
Right.

00:15:35.360 --> 00:15:43.100
It looks for any file change within the search pattern, like star star slash CSS slash dot

00:15:43.100 --> 00:15:44.460
star dot CSS or whatever, you know.

00:15:44.940 --> 00:15:49.320
And then if it sees that, it just runs the command, which the command that I gave it is

00:15:49.320 --> 00:15:52.200
to run Python to rebundle our assets.

00:15:52.200 --> 00:15:57.700
So for whatever reason, because one of the things that can happen is, you know, change something

00:15:57.700 --> 00:16:01.320
about a CSS file, forget to bundle it, publish the site.

00:16:01.320 --> 00:16:03.180
And you're like, huh, why does that look so weird?

00:16:03.180 --> 00:16:04.480
Like, why is that not changed?

00:16:04.740 --> 00:16:09.220
But the, you know, the, the, the, the packed version of that one that runs in production,

00:16:09.220 --> 00:16:11.460
but not in development is out of sync.

00:16:11.460 --> 00:16:12.280
And then it's weird.

00:16:12.280 --> 00:16:12.500
Right.

00:16:12.500 --> 00:16:16.480
So if you just, as long as you have this running somewhere, just chilling, then you're good.

00:16:16.480 --> 00:16:16.960
Cool.

00:16:17.280 --> 00:16:22.120
But it doesn't have to be, I mean, the context is web and it's very focused on static websites,

00:16:22.120 --> 00:16:23.300
which is super annoying.

00:16:23.300 --> 00:16:27.980
Like the way you run it, as you say, server dot serve, and it literally starts up a web

00:16:27.980 --> 00:16:29.420
server at some route you give it.

00:16:29.420 --> 00:16:30.740
But I don't want to look at it.

00:16:30.740 --> 00:16:32.740
I'm not trying to look at the website through it.

00:16:32.740 --> 00:16:35.840
I literally just wanted to run the file.

00:16:35.840 --> 00:16:40.540
So there should be some secondary command, like just start watching or something like that

00:16:40.540 --> 00:16:41.120
in the background.

00:16:41.120 --> 00:16:42.680
But it starts a little web server.

00:16:42.680 --> 00:16:46.420
You can just ignore it and, or point it to nowhere and ignore it.

00:16:46.760 --> 00:16:51.580
And then you could get it to do basically when a file changes, run a shell command of

00:16:51.580 --> 00:16:52.940
your choosing, which is pretty flexible.

00:16:52.940 --> 00:16:53.480
Yeah.

00:16:53.480 --> 00:16:54.120
It does.

00:16:54.120 --> 00:17:00.240
I guess to give them a little credit, they do have pages for how to, how to use this with

00:17:00.240 --> 00:17:02.040
Django and Flask and Bottle.

00:17:02.040 --> 00:17:04.360
I don't know anybody that uses Bottle anymore, but.

00:17:04.360 --> 00:17:05.400
No, no, I know.

00:17:05.400 --> 00:17:07.480
But I mean, the pages for it.

00:17:07.480 --> 00:17:10.460
But unnecessarily the right details.

00:17:10.460 --> 00:17:11.740
Yeah.

00:17:11.740 --> 00:17:13.680
It doesn't like, it doesn't really tell you what happens.

00:17:13.680 --> 00:17:14.260
Okay.

00:17:14.260 --> 00:17:15.500
It just shows you what to do.

00:17:15.540 --> 00:17:19.480
And then you can imagine, well, will it restart the app or will it not restart the app?

00:17:19.480 --> 00:17:21.580
Will it just restart the CSS?

00:17:21.580 --> 00:17:22.820
Will it reload the templates?

00:17:22.820 --> 00:17:25.720
There's options of what could be happening, but it doesn't really say.

00:17:25.720 --> 00:17:27.000
Anyway, it's a cool project.

00:17:27.000 --> 00:17:31.600
I would love to see a little bit more description just so that I can get a little more traction.

00:17:31.600 --> 00:17:33.200
But yeah, there you go.

00:17:33.440 --> 00:17:37.520
Paul was using it for when he changed a markdown file in the course.

00:17:37.520 --> 00:17:44.300
It would run make HTML out of Sphinx to automatically rebuild the website as you just typed in it.

00:17:44.300 --> 00:17:45.200
Oh, that's cool.

00:17:45.200 --> 00:17:45.600
Yeah.

00:17:45.600 --> 00:17:46.940
All right.

00:17:47.620 --> 00:17:49.600
Well, do you want to jump into extras?

00:17:49.600 --> 00:17:50.660
Let's jump.

00:17:50.660 --> 00:17:51.260
Okay.

00:17:51.260 --> 00:17:52.660
Do you want to hit yours first?

00:17:52.660 --> 00:17:53.400
Yeah, I'll go first.

00:17:53.400 --> 00:17:54.220
Mine are super short.

00:17:54.840 --> 00:17:56.420
So, a couple of things.

00:17:56.420 --> 00:17:59.980
First of all, I was looking at our Umami.

00:17:59.980 --> 00:18:03.520
That is Umami Analytics.

00:18:03.520 --> 00:18:04.980
Is it .is?

00:18:04.980 --> 00:18:05.660
I think it is.

00:18:05.660 --> 00:18:06.620
Umami.is.

00:18:06.620 --> 00:18:07.680
Analytics.

00:18:07.680 --> 00:18:08.300
Yeah, perfect.

00:18:08.840 --> 00:18:14.980
And I noticed something unusual, that 14% of our listeners are from Germany.

00:18:14.980 --> 00:18:15.860
Oh, that's cool.

00:18:15.860 --> 00:18:17.340
That's pretty interesting, right?

00:18:17.340 --> 00:18:19.500
Especially given, you know, this is in English.

00:18:19.500 --> 00:18:21.160
It's not their native language.

00:18:21.160 --> 00:18:24.920
But, like, more than Australians, the Germans are listening to our stuff.

00:18:24.920 --> 00:18:25.700
So, thank you, Germany.

00:18:25.700 --> 00:18:29.160
Maybe we should have a competition to try to get the country.

00:18:29.160 --> 00:18:29.440
Exactly.

00:18:29.440 --> 00:18:30.040
Exactly.

00:18:30.040 --> 00:18:37.080
And then, not that I intended this to be a German episode, but here are German extras.

00:18:37.640 --> 00:18:40.680
But, the German company, Hetzner, have you heard of them?

00:18:40.680 --> 00:18:43.700
They're like DigitalOcean, Linode, so on, AWS.

00:18:43.700 --> 00:18:46.220
So, I've heard a few people talk about them.

00:18:46.220 --> 00:18:49.760
And they have really interesting hosting models.

00:18:49.760 --> 00:18:54.900
Like, they'll give you super affordable VMs, lots of bandwidth, so on.

00:18:54.900 --> 00:19:03.520
So, for example, for an 8 gig, sorry, 16 gig, 8 CPU server in DigitalOcean, it's $112.

00:19:04.180 --> 00:19:12.560
And it's hard to tell exactly on AWS and Azure, but I believe AWS is $200 and Azure is $350 per month, okay?

00:19:12.560 --> 00:19:13.000
Okay.

00:19:13.000 --> 00:19:21.620
I go over here to Hetzner, prices, and you pick, say, shared AMD, and you pick your country to be US.

00:19:21.620 --> 00:19:23.020
Come here.

00:19:23.020 --> 00:19:24.300
Oh, where'd you go?

00:19:24.300 --> 00:19:25.660
Same server is $25.

00:19:26.400 --> 00:19:26.880
Wow.

00:19:26.880 --> 00:19:35.680
And it comes with 20 terabytes of bandwidth, which, quick math, I believe that's about $2,000 at AWS.

00:19:35.680 --> 00:19:36.340
Okay.

00:19:36.340 --> 00:19:37.400
And that's included in the $25.

00:19:37.400 --> 00:19:38.440
Cool.

00:19:38.940 --> 00:19:40.900
So, the news is, why am I even mentioning this?

00:19:40.900 --> 00:19:42.940
The news is, they recently came to the US.

00:19:42.940 --> 00:19:43.460
All right.

00:19:43.460 --> 00:19:46.900
They used to be just a European company.

00:19:46.900 --> 00:19:48.420
Now, they're available in the US.

00:19:48.420 --> 00:19:51.320
So, that opens up a lot of interesting hosting possibilities.

00:19:51.320 --> 00:19:53.100
Are you switching anything?

00:19:53.100 --> 00:19:55.980
I'm thinking about playing with it.

00:19:55.980 --> 00:19:56.720
We'll see how it goes.

00:19:56.720 --> 00:20:00.320
I actually asked people in Mastodon, what do you guys think about this company?

00:20:00.320 --> 00:20:05.220
And I got a lot of German folks who said they're having a lot of good experiences with it.

00:20:05.220 --> 00:20:06.140
So, we'll see.

00:20:06.140 --> 00:20:06.620
Okay.

00:20:06.620 --> 00:20:08.560
But I'll let you know if we do.

00:20:08.560 --> 00:20:10.160
I haven't switched anything around.

00:20:10.160 --> 00:20:11.340
But it's pretty interesting, right?

00:20:11.340 --> 00:20:14.000
That you can get so much compute for so affordable.

00:20:14.000 --> 00:20:15.020
Yeah, that's pretty cool.

00:20:15.020 --> 00:20:16.140
Anyway, those are my extras.

00:20:16.140 --> 00:20:16.820
Over to you.

00:20:16.820 --> 00:20:22.580
A couple blog posts that I wanted to highlight that were kind of neat.

00:20:22.580 --> 00:20:23.180
K.J. Miller.

00:20:23.180 --> 00:20:27.700
Personal blogs are no longer personal when AI gets too involved.

00:20:28.320 --> 00:20:35.820
So, I know people are using AI and chat-like things to come up with some ideas and stuff.

00:20:35.820 --> 00:20:39.900
And that's pretty much what K.J. Miller is talking about.

00:20:39.900 --> 00:20:42.900
It's not necessarily terrible to do that.

00:20:42.900 --> 00:20:46.480
But be careful what you're doing and why you're doing it.

00:20:46.480 --> 00:20:52.380
So, for instance, coming up with ideas or if you're stuck on how to phrase something,

00:20:52.380 --> 00:20:55.020
having somebody help with that is great.

00:20:55.020 --> 00:20:57.260
And writing is hard.

00:20:57.460 --> 00:20:59.240
So, getting some advice, fine.

00:20:59.240 --> 00:21:01.360
But it should still be your voice.

00:21:01.360 --> 00:21:05.000
So, I love, I was wanting to hop down to his advice.

00:21:05.000 --> 00:21:12.480
It says, obviously, if you're reading this and not, obviously, if you're reading this and

00:21:12.480 --> 00:21:17.900
not getting ChatGPT to summarize it for you, you care about my words to some degree.

00:21:18.060 --> 00:21:21.080
So, you are reading somebody's blog for their voice.

00:21:21.080 --> 00:21:23.480
So, keep that in mind when writing your own blog.

00:21:23.480 --> 00:21:28.880
So, especially if you're writing a blog to try to get hired later, it doesn't help you

00:21:28.880 --> 00:21:33.340
any to just regurgitate some ChatGPT stuff and copy and paste it.

00:21:33.340 --> 00:21:35.080
We don't need more people like that.

00:21:35.180 --> 00:21:41.760
I mean, if you're doing it to try to fill up your blog for selling something, I still don't

00:21:41.760 --> 00:21:43.480
like that, but you know, your business.

00:21:43.480 --> 00:21:48.360
But if you're trying to do it to highlight what you write like, then you need to write it.

00:21:49.020 --> 00:21:53.780
And also, if you're doing this to help your future self, make it personal.

00:21:53.780 --> 00:21:58.980
Also, like, if you're not writing it or at least rewriting it, writing it in your voice,

00:21:58.980 --> 00:22:00.520
it's not going to stick in your head.

00:22:00.520 --> 00:22:02.360
So, you're not doing yourself any favors.

00:22:02.360 --> 00:22:08.380
There is a bit about, he talks about if you're doing this to create content in another language,

00:22:08.380 --> 00:22:12.260
learn about that community's writing style, which makes sense.

00:22:12.260 --> 00:22:17.860
But I kind of think there's translation tools already built into some browsers.

00:22:18.320 --> 00:22:22.780
And if somebody from another country really want to read your stuff, maybe they probably

00:22:22.780 --> 00:22:25.000
will anyway and translate it if they want to.

00:22:25.000 --> 00:22:28.860
So, I got really no interesting opinion about that.

00:22:28.860 --> 00:22:34.780
But I think I like these ideas about if you're doing it to gain, you know, build your personal

00:22:34.780 --> 00:22:40.720
brand or put yourself up as an expert in an area, using AI to do that's really not helping

00:22:40.720 --> 00:22:40.980
you.

00:22:40.980 --> 00:22:46.420
I think people can figure that out because there'll be an inconsistency in writing styles in different

00:22:46.420 --> 00:22:46.920
posts.

00:22:47.620 --> 00:22:51.400
And then also, it's your personal thing.

00:22:51.400 --> 00:22:53.180
People are trying to reach you.

00:22:53.180 --> 00:22:53.980
So, be you.

00:22:53.980 --> 00:22:56.060
Anyway, that was one extra.

00:22:56.060 --> 00:23:01.080
The other one was something that I just didn't think about, and I probably should, is mind your

00:23:01.080 --> 00:23:01.900
image metadata.

00:23:01.900 --> 00:23:08.080
This is an article from Stephanie Mullen right there at the top.

00:23:09.340 --> 00:23:11.380
She presented at PyCon Estonia.

00:23:11.380 --> 00:23:17.440
Anyway, the talks about the EXIF interchange format.

00:23:17.440 --> 00:23:20.180
Basically, pictures have tons of metadata in it.

00:23:20.680 --> 00:23:27.280
And if you don't want to have that published everywhere, and you might not, you might not want personal

00:23:27.280 --> 00:23:29.640
locations for exactly where your photos are.

00:23:29.640 --> 00:23:36.360
She talks about how to tell using tools to figure out what's in there and also talks about tools

00:23:36.360 --> 00:23:37.460
to rip them out.

00:23:38.240 --> 00:23:44.860
And then even talks about using a pre-commit hook to strip out pictures that you're including as your

00:23:44.860 --> 00:23:47.400
static images or in your Git repo.

00:23:47.400 --> 00:23:48.480
That's cool.

00:23:48.480 --> 00:23:52.500
If you're putting your Hugo static site, just none of it has any of that in there.

00:23:52.500 --> 00:23:53.420
That's a pretty cool idea.

00:23:53.420 --> 00:23:54.320
I like that.

00:23:54.320 --> 00:23:56.360
Those are just my two extras.

00:23:56.360 --> 00:23:57.580
Excellent.

00:23:58.300 --> 00:24:01.320
I'm having Stephanie on Talk Python Thursday.

00:24:01.320 --> 00:24:01.860
Cool.

00:24:01.860 --> 00:24:02.640
Three or four days from now.

00:24:02.640 --> 00:24:03.160
Sweet.

00:24:03.160 --> 00:24:03.520
Yeah.

00:24:03.520 --> 00:24:04.860
All right.

00:24:04.860 --> 00:24:06.340
How about our joke?

00:24:06.340 --> 00:24:07.240
Let's do it.

00:24:07.240 --> 00:24:07.680
Okay.

00:24:07.680 --> 00:24:08.080
How are you?

00:24:08.080 --> 00:24:09.920
This is a dumb joke, but I love it.

00:24:09.920 --> 00:24:11.000
It's an oldie, bitty, goodie.

00:24:11.000 --> 00:24:17.740
I'm linking to a savvy programmer blog, but I've heard it before.

00:24:17.740 --> 00:24:24.040
Essentially, it's, okay, a programmer's partner asked them, hey, would you go get a loaf of

00:24:24.040 --> 00:24:25.040
bread from the store?

00:24:25.040 --> 00:24:26.780
And if they have eggs, grab a dozen.

00:24:27.160 --> 00:24:31.540
So while later, the programmer returns with 12 loaves of bread and says they had eggs.

00:24:31.540 --> 00:24:34.220
So literal.

00:24:34.220 --> 00:24:34.980
I love it.

00:24:34.980 --> 00:24:39.200
Anyway, there's a handful of jokes here.

00:24:39.200 --> 00:24:40.480
Pretty decent.

00:24:40.480 --> 00:24:41.360
Okay.

00:24:41.360 --> 00:24:42.660
I didn't read very many.

00:24:42.660 --> 00:24:44.000
I'm going to go check some of them out.

00:24:44.000 --> 00:24:44.420
That's awesome.

00:24:44.420 --> 00:24:45.480
Anyway.

00:24:45.480 --> 00:24:46.180
Excellent.

00:24:46.180 --> 00:24:47.160
Yeah.

00:24:47.160 --> 00:24:47.760
Very funny.

00:24:47.760 --> 00:24:50.340
Thanks again for the show together.

00:24:50.340 --> 00:24:51.640
And everyone, thank you for listening.

00:24:51.640 --> 00:24:52.340
Talk to you later.

