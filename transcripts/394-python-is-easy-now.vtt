WEBVTT

00:00:00.001 --> 00:00:04.840
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:04.840 --> 00:00:10.320
This is 394 recorded July 30th, 2024.

00:00:10.320 --> 00:00:11.400
I am Michael Kennedy.

00:00:11.400 --> 00:00:12.520
And I'm Brian Okken.

00:00:12.520 --> 00:00:16.080
And this episode is brought to you by Scout APM.

00:00:16.080 --> 00:00:18.240
Thank you, Scout APM for sponsoring the show.

00:00:18.240 --> 00:00:20.240
We will tell you more about them later.

00:00:20.240 --> 00:00:29.680
If you want to connect with us on the socials, the best, but not the only place is over on Mastodon where all the links, me, Brian, and the show all

00:00:29.680 --> 00:00:35.440
have our account lists at the top of the page of the show notes you'll see in your podcast player or the website.

00:00:35.440 --> 00:00:41.960
Also, if you're not joining us live and you would like to, we record Tuesdays at 10 AM Pacific time.

00:00:41.960 --> 00:00:44.280
Check that out Python by South FM slash live.

00:00:44.280 --> 00:00:48.040
You'll see all the older versions under the live section on our YouTube channel there.

00:00:48.040 --> 00:00:54.040
And finally, you probably do want to also get this summary of this episode in your email.

00:00:54.040 --> 00:00:54.960
I'm sure you do.

00:00:55.040 --> 00:00:59.560
A handcrafted artisanal Brian Okken special email.

00:00:59.560 --> 00:01:03.480
So just visit Python by South FM, click on newsletter, enter your information.

00:01:03.480 --> 00:01:08.280
We won't give it away, share it with other people, resell it, retarget you, do evil things.

00:01:08.280 --> 00:01:12.160
We just will communicate with you about stuff we're up to mostly the show.

00:01:12.160 --> 00:01:13.640
Brian, I learned Python.

00:01:13.640 --> 00:01:14.360
It was a good weekend.

00:01:14.360 --> 00:01:15.440
Is that the same?

00:01:15.440 --> 00:01:18.000
Is that what you're telling me for your first item here?

00:01:18.000 --> 00:01:20.400
But where are you going with this?

00:01:20.400 --> 00:01:22.840
Michael, I think you've done it for a while.

00:01:22.840 --> 00:01:24.920
No, I'm bungling.

00:01:24.960 --> 00:01:27.320
Bundled the joke a little bit, but yes, that's all right.

00:01:27.320 --> 00:01:28.680
I thought Python is easy.

00:01:28.680 --> 00:01:29.040
I hear.

00:01:29.040 --> 00:01:29.720
Yeah.

00:01:29.720 --> 00:01:31.040
Python is easy now.

00:01:31.040 --> 00:01:34.440
Um, apparently no, I, it's, I love Python.

00:01:34.440 --> 00:01:39.640
Anyway, what I wanted to talk about was, beyond hyper modern or postmodern.

00:01:39.640 --> 00:01:41.400
I'm not sure what the tagline is really.

00:01:41.400 --> 00:01:46.760
So this is an article by Chris, our dear art, Chris, sorry about, I've

00:01:46.760 --> 00:01:50.320
probably mangled your last name, but, I really liked the article, Chris.

00:01:50.320 --> 00:01:51.640
So what is this?

00:01:51.680 --> 00:01:57.800
Um, so it's the, the title is beyond hyper hyper modern Python is easy now.

00:01:57.800 --> 00:02:01.280
And this is a reference to hyper modern Python.

00:02:01.280 --> 00:02:05.120
That was, he says it came out like, as a series that came

00:02:05.120 --> 00:02:07.240
out four years ago or something.

00:02:07.240 --> 00:02:08.680
Um, interesting.

00:02:08.680 --> 00:02:11.560
Um, but it's, what was hype?

00:02:11.560 --> 00:02:13.560
Who is the hyper modern person again?

00:02:13.560 --> 00:02:14.240
Can't remember.

00:02:14.240 --> 00:02:17.120
Oh, oh, I should have looked this up anyway.

00:02:17.280 --> 00:02:22.800
Uh, Claude, Claudia, Claudio, Claudio, Joe, I'm not going to try

00:02:22.800 --> 00:02:27.640
Claudia's book, hyper modern Python tooling is now as a book, which is cool.

00:02:27.640 --> 00:02:29.480
Uh, good job, but that's not what we're talking about.

00:02:29.480 --> 00:02:34.840
We're talking about, beyond hyper modern or, from the URL postmodern.

00:02:34.840 --> 00:02:35.680
So what is this?

00:02:35.680 --> 00:02:40.280
Basically it's talking about all the tooling and it's all in Rye now.

00:02:40.280 --> 00:02:44.720
So this is what Chris's idea is, is you could do so much in Rye.

00:02:44.720 --> 00:02:46.760
And actually I knew Rye did a lot.

00:02:46.760 --> 00:02:52.920
Um, and, but, but Rye is, is, is actually does more than I thought you could.

00:02:52.920 --> 00:02:57.600
So, Rye is a tool that's like, kind of does a lot of stuff around Python.

00:02:57.600 --> 00:03:02.080
So there's set up, it goes through set up, linting, typing, testing,

00:03:02.080 --> 00:03:06.000
documentation, CI CD, and then there's about a section on mono repo.

00:03:06.000 --> 00:03:11.200
But I really liked just walking through, like if you wanted to try out Rye,

00:03:11.400 --> 00:03:14.680
all of the different, like the workflow going through the entire workflow of,

00:03:14.680 --> 00:03:16.240
uh, building a Python project.

00:03:16.240 --> 00:03:22.280
Um, like the setup part is, setting up an initial directory, including

00:03:22.280 --> 00:03:26.920
setting up your pyproject.toml and setting up some, some, some different

00:03:26.920 --> 00:03:31.080
directories, which is, which is a great, just, sets up the structure for you.

00:03:31.080 --> 00:03:35.800
There's a lot of files here that like, I don't off to tell you the truth.

00:03:35.800 --> 00:03:37.120
I don't use lock files a lot.

00:03:37.680 --> 00:03:42.520
Uh, partly because I'm using, I'm often developing Python modules, or

00:03:42.520 --> 00:03:44.880
packages, which, I don't really lock stuff.

00:03:44.880 --> 00:03:48.520
Locking is, is more regularly around applications.

00:03:48.520 --> 00:03:52.120
Um, so do you have lock files for some of your application stuff?

00:03:52.120 --> 00:03:53.360
All of them.

00:03:53.360 --> 00:03:53.920
All of them.

00:03:53.920 --> 00:03:56.240
I use, I use the pip compile workflow.

00:03:56.240 --> 00:03:56.680
Okay.

00:03:56.680 --> 00:04:00.000
So I've got like one thing that specifies the top level requirements.

00:04:00.000 --> 00:04:04.720
And then another one that is the lock file using a UV pip compile.

00:04:04.720 --> 00:04:05.280
Okay.

00:04:05.600 --> 00:04:09.040
Um, one of the things that I didn't think about was like, requirements

00:04:09.040 --> 00:04:12.040
for the requirements dash dev lock.

00:04:12.040 --> 00:04:17.120
So instead of requirements on text, these are the, the, the dependencies

00:04:17.120 --> 00:04:21.240
are in your pyproject.toml, but there are a lot requirements lock files, but a dev

00:04:21.240 --> 00:04:26.960
lock file that I might actually have even for a package, like, to keep,

00:04:26.960 --> 00:04:28.920
make sure all the developers are using the same thing.

00:04:28.920 --> 00:04:30.000
So that's kind of interesting.

00:04:30.000 --> 00:04:31.040
It makes a lot of sense.

00:04:31.040 --> 00:04:35.480
I was just had, when I publish it, this set this week's episode,

00:04:35.480 --> 00:04:40.600
I can't remember very, very, very recently, David Lord from Flask on

00:04:40.600 --> 00:04:46.320
talk Python and one of the things they're working on is creating a more repeatable

00:04:46.320 --> 00:04:49.040
environment for contributors and developers to Flask.

00:04:49.040 --> 00:04:51.920
So like you Flask, you don't want to just pin the versions of everything.

00:04:51.920 --> 00:04:55.480
Cause that wrecks everybody else's options to work with different versions.

00:04:55.480 --> 00:04:59.360
But you do want to make sure that people do PRs have the same setup as

00:04:59.360 --> 00:05:01.080
people who are reviewing the PRs.

00:05:01.080 --> 00:05:01.360
Right.

00:05:01.360 --> 00:05:06.120
So they talked, he talked a lot about having a hidden requirements of, for

00:05:06.120 --> 00:05:09.280
development for developers of the project, but not the project itself.

00:05:09.280 --> 00:05:10.560
Yeah, that's a cool idea.

00:05:10.560 --> 00:05:15.440
Uh, so, so let's set up there's, you can do linting with it.

00:05:15.440 --> 00:05:17.920
Um, the testing section talks about pytest.

00:05:17.920 --> 00:05:18.320
Yay.

00:05:18.320 --> 00:05:22.440
Uh, but the, one of the things that I thought was kind of neat was this,

00:05:22.440 --> 00:05:25.480
and I think I knew this, but anyway, this idea of scripts.

00:05:25.480 --> 00:05:29.560
So within your pyproject.toml, you can set up Rai scripts.

00:05:29.800 --> 00:05:34.760
So they're basically extra commands that do things like, so you can say like,

00:05:34.760 --> 00:05:39.800
uh, Rai run test in, and so the run command runs your scripts.

00:05:39.800 --> 00:05:45.400
So you can say run in a test is a thing that you've said that just like defaults

00:05:45.400 --> 00:05:51.840
to Rai test, but things like Rai, Rai run check might be running PyRite or for, for

00:05:51.840 --> 00:05:58.280
linting or for type checking or linting is a Rai lint with a fix or something.

00:05:58.280 --> 00:06:02.120
Um, so all these different, if you, if you've, especially if you're, you've got

00:06:02.120 --> 00:06:06.160
other people on the team, having some way to do all of this is good.

00:06:06.160 --> 00:06:10.920
And then a kind of a neat thing that I, that's probably as nice as being able to

00:06:10.920 --> 00:06:12.880
chain, scripts.

00:06:12.880 --> 00:06:17.000
So if you've got like, running your form, auto formatting and linting and,

00:06:17.000 --> 00:06:21.400
the type checking and also running your tests, but then if you want to do all of

00:06:21.400 --> 00:06:26.280
them, there's a way to just chain them up within the pyproject.toml, which is

00:06:26.280 --> 00:06:26.840
kind of cool.

00:06:26.840 --> 00:06:27.880
So yeah, that's very cool.

00:06:27.880 --> 00:06:31.680
It's kind of takes the place of where I would use either where I used to use make

00:06:31.680 --> 00:06:32.120
files.

00:06:32.120 --> 00:06:39.240
Now I use, talks, commands for, but, so a lot of this around, if

00:06:39.240 --> 00:06:42.480
you don't need it, I'm guessing this doesn't create a new virtual environment,

00:06:42.480 --> 00:06:43.560
but I haven't played with it yet.

00:06:43.560 --> 00:06:46.760
Um, but that's where talks would, do that.

00:06:46.760 --> 00:06:50.920
Um, so there, there's a discussion around documentation.

00:06:50.920 --> 00:06:54.840
It isn't really a Rai thing, but just talking about documenting things well, but

00:06:54.840 --> 00:06:58.520
I, I really kind of like this article about like, if you want to try out mostly

00:06:58.520 --> 00:07:02.080
because I do want to try out Rai and this kind of walks through all the different

00:07:02.080 --> 00:07:05.320
things it does within your workflow and where you might want to pull it in.

00:07:05.320 --> 00:07:09.520
And I do, I do appreciate that Rai has some configuration.

00:07:09.520 --> 00:07:16.880
So apparently the default, packaging tool is hatch, but, the, but

00:07:16.880 --> 00:07:19.320
this person, Chris wanted to use PDMs.

00:07:19.320 --> 00:07:22.920
You can set that, but I'd probably leave it as hatch cause I like catch, but,

00:07:22.920 --> 00:07:24.680
but might do something different.

00:07:24.680 --> 00:07:28.680
But you can even, set a dependency operator.

00:07:28.680 --> 00:07:32.280
So whether you want it to be like approximately equal to or greater

00:07:32.280 --> 00:07:34.640
than equal or whatever, kind of neat.

00:07:34.640 --> 00:07:37.600
The, the bonus is really kind of fun.

00:07:37.600 --> 00:07:43.160
I don't, I actually just ran into a project where I have to, to help support,

00:07:43.160 --> 00:07:48.160
which is a, is a, a large repository with multiple Python projects in it.

00:07:48.160 --> 00:07:54.000
And so I'm looking forward to reading through, how, how possibly this,

00:07:54.040 --> 00:07:58.560
this documentation around dealing with monorepos in Python, this is

00:07:58.560 --> 00:08:01.120
on my to do route to read next, list.

00:08:01.120 --> 00:08:02.040
So that's cool.

00:08:02.040 --> 00:08:03.240
That's next level stuff right there.

00:08:03.240 --> 00:08:05.160
Yeah.

00:08:05.160 --> 00:08:06.680
Well, very, very cool.

00:08:06.680 --> 00:08:09.600
I Brian am happy to report.

00:08:09.600 --> 00:08:14.440
I think that the GIL has been vanquished, but we are now in the

00:08:14.440 --> 00:08:17.000
epoch of free-threaded Python.

00:08:17.000 --> 00:08:20.800
So how might you, might you test this out and see if it's

00:08:20.800 --> 00:08:22.000
actually worth it and so on.

00:08:22.000 --> 00:08:22.480
Okay.

00:08:22.520 --> 00:08:26.800
So Simon Wilson, one of his today I learned is trying out

00:08:26.800 --> 00:08:28.760
free threaded Python on macOS.

00:08:28.760 --> 00:08:32.720
Could be others as well, but you can just go to, this is interesting.

00:08:32.720 --> 00:08:34.960
I didn't realize that you would be able to get free threaded

00:08:34.960 --> 00:08:36.240
Python this way from the pep.

00:08:36.240 --> 00:08:38.640
It's like, you've got to get a special build of it.

00:08:38.640 --> 00:08:40.920
And it's just like its own thing.

00:08:40.920 --> 00:08:41.280
Right.

00:08:41.280 --> 00:08:41.720
Yeah.

00:08:41.720 --> 00:08:44.840
But if you get the macOS installer, I, I don't know about the others, but

00:08:44.840 --> 00:08:48.640
presumably the windows one has something similar or will, I don't know.

00:08:48.840 --> 00:08:53.000
Go to install this and you can set up the options, custom install, and you can just

00:08:53.000 --> 00:08:57.800
check off a checkbox to install a separate binary for three free threaded

00:08:57.800 --> 00:09:01.120
Python 313 instead of gilled Python.

00:09:01.120 --> 00:09:01.560
Wow.

00:09:01.560 --> 00:09:04.000
That's just from the python.org download.

00:09:04.000 --> 00:09:05.000
Yeah, exactly.

00:09:05.000 --> 00:09:05.520
Wow.

00:09:05.520 --> 00:09:06.280
Exactly.

00:09:06.280 --> 00:09:06.520
Yeah.

00:09:06.520 --> 00:09:08.760
Just to get that downloads beta three of it.

00:09:08.760 --> 00:09:09.720
And there it is.

00:09:09.720 --> 00:09:12.320
So you just hit a customize your install and boom.

00:09:12.320 --> 00:09:14.160
So that alone is kind of interesting.

00:09:14.160 --> 00:09:14.720
Yeah.

00:09:14.880 --> 00:09:20.640
And then once you do that, you get not just a Python three dot 13, but a Python

00:09:20.640 --> 00:09:26.000
313 T it's interesting, but not FT.

00:09:26.000 --> 00:09:28.080
I mean, the other one should have a T on it.

00:09:28.080 --> 00:09:28.360
Come on.

00:09:28.360 --> 00:09:29.840
If it's going to be threaded, I don't know.

00:09:29.840 --> 00:09:34.000
Anyway, T whatever you get one that is like, that's the one you can run in the

00:09:34.000 --> 00:09:35.960
command line for free threaded Python.

00:09:35.960 --> 00:09:39.320
And Simon points out, like, didn't really put this in the path because it's beta.

00:09:39.320 --> 00:09:42.760
I don't want to mess stuff up, but nonetheless, there it is.

00:09:42.760 --> 00:09:44.160
So let's test it out.

00:09:44.160 --> 00:09:48.600
It comes up with a simple little program that just does some CPU bound thing.

00:09:48.600 --> 00:09:49.600
This is the important thing.

00:09:49.600 --> 00:09:54.640
We've for a long time since Python three, four had really good options to

00:09:54.640 --> 00:09:58.480
parallelize IO bound or waiting types of things.

00:09:58.480 --> 00:09:59.480
I'm talking to a network.

00:09:59.480 --> 00:10:00.480
I'm talking to a database.

00:10:00.480 --> 00:10:03.280
I'm talking to whatever with asyncio, right?

00:10:03.280 --> 00:10:03.640
Yeah.

00:10:03.640 --> 00:10:08.000
The CPU bound stuff that Gil would stop and go, yeah, no, I don't care how many

00:10:08.000 --> 00:10:09.640
cores you got, you got one, right?

00:10:09.640 --> 00:10:10.040
Yeah.

00:10:10.040 --> 00:10:13.840
And so this is just summing up a bunch of numbers, the squares of the numbers,

00:10:13.840 --> 00:10:16.480
just like doing some computational busy work.

00:10:16.480 --> 00:10:16.840
Right.

00:10:16.840 --> 00:10:20.200
So it says, okay, well, let's set up a little app that'll take some parameters

00:10:20.200 --> 00:10:23.960
so we can feed it different information and see what we'll get and then run it

00:10:23.960 --> 00:10:28.920
on a thread pool executor with as many threads that is are specified.

00:10:28.920 --> 00:10:31.120
So start out just to skip ahead.

00:10:31.120 --> 00:10:38.880
So look, I ran it once I get one course as 99% CPU usage on MacOS that it reports

00:10:38.880 --> 00:10:42.080
this as a hundred percent basis as being one core fully busy.

00:10:42.080 --> 00:10:43.240
So you've got eight cores.

00:10:43.240 --> 00:10:44.800
This could go up to 800%.

00:10:44.800 --> 00:10:45.360
It's kind of weird.

00:10:45.360 --> 00:10:47.720
Anyway, 99% CPU.

00:10:47.720 --> 00:10:51.480
If you run the regular one, but if you run the free threaded one, he was getting

00:10:51.480 --> 00:10:52.880
some number that was a little low.

00:10:52.880 --> 00:10:53.560
There's a bug.

00:10:53.560 --> 00:10:56.800
It's not super relevant about him fixing the bug or not.

00:10:56.800 --> 00:11:02.960
I don't really think that matters, but what the takeaway is, if you run it with

00:11:02.960 --> 00:11:08.440
four threads, that whole workload ran in 1.3 seconds, you're at with 12 threads.

00:11:08.440 --> 00:11:10.360
It went down to one second.

00:11:10.360 --> 00:11:11.840
I don't know how many cores he has.

00:11:11.840 --> 00:11:15.880
I don't believe it said, but with the GIL that's four seconds versus one

00:11:15.880 --> 00:11:20.960
second or 1.3 seconds for the basically four times as fast, presumably this is

00:11:20.960 --> 00:11:22.440
a four core system, I'm not sure.

00:11:22.440 --> 00:11:23.520
Anyway, pretty cool.

00:11:23.520 --> 00:11:23.760
Right?

00:11:23.760 --> 00:11:25.520
That is pretty, pretty cool.

00:11:25.520 --> 00:11:27.120
So yes, that's faster.

00:11:27.120 --> 00:11:29.720
Four times faster is, you know, 400%.

00:11:29.720 --> 00:11:30.400
That's no joke.

00:11:30.400 --> 00:11:33.120
That'll make a difference for some people, but I think more relevant.

00:11:33.120 --> 00:11:35.520
It's just like, Hey, look, apparently the installers have it.

00:11:35.520 --> 00:11:36.800
Right.

00:11:36.800 --> 00:11:37.400
That's kind of cool.

00:11:37.400 --> 00:11:37.960
Yeah.

00:11:37.960 --> 00:11:38.360
Okay.

00:11:38.360 --> 00:11:41.000
I was chuckling because, so testing it out.

00:11:41.000 --> 00:11:44.640
It says, I asked Claude three and a half sonnet to write me a quick test

00:11:44.640 --> 00:11:49.680
script, but the script had come up with is something I know that he can write on his

00:11:49.680 --> 00:11:49.920
own.

00:11:49.920 --> 00:11:52.520
Yeah, exactly.

00:11:52.520 --> 00:11:53.800
Exactly.

00:11:53.800 --> 00:11:55.280
That's fine.

00:11:55.280 --> 00:11:55.520
Yeah.

00:11:55.520 --> 00:11:58.600
The, the, it didn't come up with something all that interesting and it introduced a

00:11:58.600 --> 00:11:58.840
bug.

00:11:58.840 --> 00:12:00.040
He should have just written it himself.

00:12:00.040 --> 00:12:03.520
Oh, well, but this is neat.

00:12:03.520 --> 00:12:08.000
I actually, I saw the announcement that there were some builds of, of the free

00:12:08.000 --> 00:12:11.040
thread or one, but I didn't know you could just do it, like click it from the

00:12:11.040 --> 00:12:11.720
installer.

00:12:11.720 --> 00:12:12.440
That's cool.

00:12:12.440 --> 00:12:12.880
Yeah.

00:12:12.880 --> 00:12:15.240
That's, that's the big news I took away as well.

00:12:15.240 --> 00:12:15.680
Very cool.

00:12:15.680 --> 00:12:16.120
Neat.

00:12:16.120 --> 00:12:17.000
Very neat.

00:12:17.000 --> 00:12:17.760
And you know what?

00:12:17.760 --> 00:12:21.520
You don't have to build yourself is an APM platform, right?

00:12:21.520 --> 00:12:23.600
We could let Scout do that for you.

00:12:23.600 --> 00:12:27.400
Let me tell you real quick about Scout APM.

00:12:27.400 --> 00:12:29.560
They're big supporters of Python bites.

00:12:29.560 --> 00:12:31.120
So we appreciate that very much.

00:12:31.120 --> 00:12:36.160
So if you are tired of spending hours trying to find the root cause of issues

00:12:36.160 --> 00:12:40.200
impacting your performance, then you owe it to yourself to check out Scout APM.

00:12:40.200 --> 00:12:45.600
They're a leading Python application performance monitoring tool, APM, that

00:12:45.600 --> 00:12:49.480
helps you identify and solve performance abnormalities faster and easier.

00:12:49.480 --> 00:12:54.360
Scout APM ties bottlenecks such as memory leaks, slow database queries, background

00:12:54.360 --> 00:12:58.800
jobs, and the dreaded N plus one queries that you can end up if you do lazy

00:12:58.800 --> 00:13:02.760
loading in your ORM, then you say, Oh no, why is it so slow?

00:13:02.760 --> 00:13:05.080
Why are you doing 200 database queries for what should be one?

00:13:05.240 --> 00:13:06.440
So you can find out things like that.

00:13:06.440 --> 00:13:08.400
And it links it back directly to the source code.

00:13:08.400 --> 00:13:12.400
So you can spend less time in the debugger and healing logs and just

00:13:12.400 --> 00:13:13.880
finding the problems and moving on.

00:13:13.880 --> 00:13:17.040
And you'll love it because it's built for developers by developers.

00:13:17.040 --> 00:13:18.520
It makes it easy to get set up.

00:13:18.520 --> 00:13:19.280
Seriously.

00:13:19.280 --> 00:13:21.120
You can do it in less than four minutes.

00:13:21.120 --> 00:13:21.920
So that's awesome.

00:13:21.920 --> 00:13:25.320
And the best part is the pricing is straightforward.

00:13:25.320 --> 00:13:29.880
You only pay for the data that you use with no hidden overage fees or per seat

00:13:29.880 --> 00:13:32.920
pricing, and I just learned this, Brian.

00:13:32.920 --> 00:13:38.080
They also have, they provide the pro version for free to all open source projects.

00:13:38.080 --> 00:13:42.040
So if you're an open source maintainer and you want to have Scout APM for that

00:13:42.040 --> 00:13:45.440
project, just shoot them a message or something on their pricing page about that.

00:13:45.440 --> 00:13:49.440
So you can start your free trial and get instant insights today.

00:13:49.440 --> 00:13:52.200
Visit pythonbytes.fm/scout.

00:13:52.200 --> 00:13:54.320
The link is in your podcast player show notes as well.

00:13:54.320 --> 00:13:55.680
And please use that link.

00:13:55.680 --> 00:13:59.680
Don't just search for them because otherwise they don't think you came from us.

00:13:59.680 --> 00:14:01.240
And then they'd stop supporting the show.

00:14:01.240 --> 00:14:03.880
So please use our link pythonbytes.fm/scout.

00:14:03.880 --> 00:14:04.800
Check them out.

00:14:04.800 --> 00:14:06.720
It really supports the show.

00:14:06.720 --> 00:14:07.760
What's next, Brian?

00:14:07.760 --> 00:14:10.560
I want to iterate into our, to the next topic.

00:14:10.560 --> 00:14:12.920
I want to talk about it or tools.

00:14:12.920 --> 00:14:20.960
So I really, this is, this comes from Rodrigo, Rodrigo from math, maths, pp.com.

00:14:20.960 --> 00:14:26.400
And he writes a lot of great articles, but, and I know we've covered it or tools

00:14:26.400 --> 00:14:30.080
before, and people have heard of it or tools and it's built into Python, but

00:14:30.080 --> 00:14:34.000
there's so many goodies in there that I like to have people tell me what

00:14:34.000 --> 00:14:35.600
their favorites are and reshaping.

00:14:35.600 --> 00:14:43.080
So this is there's this is an article that groups all of the it's they, I don't

00:14:43.080 --> 00:14:47.000
think, I think there's more than 20 in there, but anyway, 20 tools that every

00:14:47.000 --> 00:14:51.880
Python developer should be aware of from inner tools and it's broken into five

00:14:51.880 --> 00:14:56.640
categories, there's reshaping iterators, filtering, filtering, iterators,

00:14:56.640 --> 00:15:01.800
combinatorial, infinite, and iterators that compliment other tools.

00:15:01.800 --> 00:15:07.360
And there's, I just did a quick list of this and I, I really think there's a few,

00:15:07.360 --> 00:15:10.160
few of these in here that I need to use more.

00:15:10.160 --> 00:15:12.520
So I'm glad, glad I ran across this article.

00:15:12.520 --> 00:15:13.680
One of them.

00:15:13.680 --> 00:15:18.120
So right off the bat, this is the three most useful iterators or product.

00:15:18.120 --> 00:15:22.480
And what product does is it simplifies, like, let's say you've got a nested loop

00:15:22.480 --> 00:15:28.640
of like a width and height, for instance, for X in range of width and for Y in

00:15:28.640 --> 00:15:30.720
range of height, you do something with X and Y.

00:15:30.720 --> 00:15:36.240
Well, you can use inner tools product and, and have it just be one does a product of

00:15:36.240 --> 00:15:38.600
two ranges or product of two iterators.

00:15:38.600 --> 00:15:44.560
And it gives you the two like the, all the, all of the combinations in order.

00:15:44.560 --> 00:15:48.760
So that's a really cool thing that I always forget about that.

00:15:48.760 --> 00:15:52.120
I probably should write that more, especially if you've got more than two,

00:15:52.120 --> 00:15:54.280
when you get like three, it gets ridiculous.

00:15:54.280 --> 00:15:58.000
And so using it or tools to simplify that, it's a really great idea.

00:15:58.000 --> 00:16:03.720
And because, you know, with Python, every time you, you, indeed into a four loop,

00:16:03.720 --> 00:16:05.080
you're going to indent your code.

00:16:05.080 --> 00:16:10.600
It helps you keep the, the, the horizontal width of your code a little bit more

00:16:10.600 --> 00:16:11.000
reasonable.

00:16:11.000 --> 00:16:11.520
Okay.

00:16:11.520 --> 00:16:13.000
>> Flats that are nested, all that kind of stuff.

00:16:13.000 --> 00:16:13.520
>> Yeah.

00:16:13.520 --> 00:16:15.800
Chain, I always remember about.

00:16:15.800 --> 00:16:20.400
So chain is a, is a, is a way to combine two lists and iterate through all of them

00:16:20.560 --> 00:16:24.560
instead of adding the lists, adding is kind of, it creates a new one.

00:16:24.560 --> 00:16:25.480
You might not need that.

00:16:25.480 --> 00:16:28.160
Whereas chain, we'll iterate through both of them.

00:16:28.160 --> 00:16:33.240
And I, after remind people, if you're not aware, all these really cool things within

00:16:33.240 --> 00:16:37.400
the inner tools, there are a way to manipulate iterators such that you're not

00:16:37.400 --> 00:16:38.320
copying things.

00:16:38.320 --> 00:16:40.240
You're not making a new list of something.

00:16:40.240 --> 00:16:43.680
You're just iterating through existing iterators without doing the copy.

00:16:43.680 --> 00:16:45.440
I think that I'm pretty sure that's true.

00:16:45.440 --> 00:16:46.080
Yeah.

00:16:46.440 --> 00:16:51.520
The, the one that I, the, the third one on is you, everybody should know about that.

00:16:51.520 --> 00:16:53.160
I thought was great was pairwise.

00:16:53.160 --> 00:16:56.000
And I actually apparently never knew about this.

00:16:56.000 --> 00:17:02.360
And this is a way to like, let's say you've got a, the example is a bunch of names and

00:17:02.360 --> 00:17:06.080
you want to be able to make sure that everybody says hi to the person on their

00:17:06.080 --> 00:17:06.360
right.

00:17:06.360 --> 00:17:10.760
You can go through and it, well, this may be a silly example, but if you want to go

00:17:10.760 --> 00:17:17.040
through an entire sequence and make sure each pair in a, like you're just walking it

00:17:17.040 --> 00:17:20.480
down, like the first, like number one and number two, and then two and three, and

00:17:20.480 --> 00:17:22.880
then three and four, this is an easy way to do that.

00:17:22.880 --> 00:17:30.720
And actually there's an old way of using zip with the, you can, you can combine two

00:17:30.720 --> 00:17:33.800
lists and do slices, but that's a little confusing.

00:17:33.800 --> 00:17:36.800
Whereas pairwise just gives it to you right away.

00:17:36.800 --> 00:17:39.760
It returns to two pointers to objects.

00:17:39.800 --> 00:17:40.920
So that's really cool.

00:17:40.920 --> 00:17:45.760
A couple more things I wanted to bring up that, that were great in here was zip

00:17:45.760 --> 00:17:51.280
longest, which I do remember because I use it frequently, but if you're zipping two

00:17:51.280 --> 00:17:55.520
things together, which means you're going to go through and go through to two

00:17:55.520 --> 00:18:02.560
sequences using zip by default, zip picks the shortest and whereas, and it just chops

00:18:02.560 --> 00:18:02.920
it off.

00:18:02.920 --> 00:18:07.400
I think, actually, I don't remember what it does at the end, but zip longest will

00:18:07.400 --> 00:18:08.600
have a fill value.

00:18:08.600 --> 00:18:12.040
So you give it a fill value and it goes through everything and you'll have

00:18:12.040 --> 00:18:13.040
something empty.

00:18:13.040 --> 00:18:14.320
So you make sure you go through everything.

00:18:14.320 --> 00:18:19.040
And then the last thing is T, which is, which is kind of neat.

00:18:19.040 --> 00:18:24.600
It allows you to do, normally iterators are exhausted once you go through it.

00:18:24.600 --> 00:18:29.240
So you have to like regenerate an iterator, but T allows you to do, to iterate

00:18:29.240 --> 00:18:30.880
through something a couple of times.

00:18:30.880 --> 00:18:36.160
It allows you to, to iterate without exhausting the iterator, which interesting.

00:18:36.360 --> 00:18:38.600
So, so nice.

00:18:38.600 --> 00:18:43.680
And then at the end, a discussion of, which is, which I think is cool that he did

00:18:43.680 --> 00:18:43.840
this.

00:18:43.840 --> 00:18:49.080
So a discussion that there is a, is he wrote a book on iter tools.

00:18:49.080 --> 00:18:51.040
So there's a little book of iter tools.

00:18:51.040 --> 00:18:52.600
He's not paying for this ad.

00:18:52.600 --> 00:18:55.200
I just think it's neat that somebody wrote a book about iter tools.

00:18:55.200 --> 00:18:55.760
That's nice.

00:18:55.760 --> 00:18:56.240
Neat.

00:18:56.240 --> 00:18:57.160
Yeah.

00:18:57.160 --> 00:18:57.520
Yeah.

00:18:57.520 --> 00:18:58.000
That's pretty neat.

00:18:58.000 --> 00:18:59.440
So.

00:18:59.440 --> 00:19:01.840
There's a lot of, a lot of powerful stuff there.

00:19:01.840 --> 00:19:02.400
Yeah.

00:19:02.400 --> 00:19:05.200
It's all a lot of simple, hard problems in simple ways.

00:19:05.480 --> 00:19:10.320
I like, I really appreciate that he picked out those first three though, of like, even

00:19:10.320 --> 00:19:14.840
if you're not really wanting to go through all of this, take a look at these three, you

00:19:14.840 --> 00:19:17.480
might, you probably need them and you just don't realize it.

00:19:17.480 --> 00:19:18.440
So, yeah.

00:19:18.440 --> 00:19:22.120
So what do you, what do you got for us next, Michael?

00:19:22.120 --> 00:19:27.640
You would love to know if your website was down and not up or your Docker container or

00:19:27.640 --> 00:19:31.080
your other service, and you would like to be notified in interesting ways.

00:19:31.080 --> 00:19:36.040
And there are services you can pay for this or free services that have weird

00:19:36.040 --> 00:19:38.640
limitations or I don't know, just funky stuff.

00:19:38.640 --> 00:19:38.960
Right.

00:19:38.960 --> 00:19:42.480
Some of those, in order to answer really good questions, you'd have to give them

00:19:42.480 --> 00:19:47.280
pretty serious internal access to your code or to your infrastructure potentially.

00:19:47.280 --> 00:19:53.440
So I present to you the Uptime Kuma, which just trying hard to resist uptime karma, but

00:19:53.440 --> 00:19:57.320
no, Uptime Kuma, a fancy self-hosted monitoring tool.

00:19:57.320 --> 00:19:57.880
Okay.

00:19:57.880 --> 00:19:59.360
So this thing is pretty cool.

00:19:59.360 --> 00:20:05.440
It comes with a Docker variant, so you can just Docker compose it into life.

00:20:05.440 --> 00:20:09.600
And I'm thinking about setting this up for Python bytes and talk Python and other

00:20:09.600 --> 00:20:13.440
things, because I've already got that Docker cluster and all the infrastructure to run

00:20:13.440 --> 00:20:13.520
it.

00:20:13.520 --> 00:20:14.920
So adopting it should be really easy.

00:20:14.920 --> 00:20:17.400
It just takes one container to run.

00:20:17.400 --> 00:20:22.200
And I believe it stores its data into a SQLite database in there.

00:20:22.200 --> 00:20:24.280
So file copies, kind of a backup.

00:20:24.280 --> 00:20:25.640
It's kind of the backup option, right?

00:20:25.640 --> 00:20:27.040
So anyway, check this out.

00:20:27.040 --> 00:20:28.000
Doesn't this look neat, Brian?

00:20:28.200 --> 00:20:30.200
You tell it different things you want to do.

00:20:30.200 --> 00:20:32.200
Like I want to check that the port is open.

00:20:32.200 --> 00:20:37.000
I want to check that this example is, you know, some example.com website is up.

00:20:37.000 --> 00:20:38.600
You can see that MySQL is running.

00:20:38.600 --> 00:20:41.200
You can ping the server to see that the server is up.

00:20:41.200 --> 00:20:45.840
All sorts of things you can put as tests in here, and you can even have an anti-test.

00:20:45.840 --> 00:20:50.720
Like for example, if you're ever able to directly connect to the database, that

00:20:50.720 --> 00:20:55.320
should be flagged as an error, like a down moment, not an up moment, because

00:20:55.320 --> 00:20:58.080
something's gone wrong with the infrastructure and you need to go fix it.

00:20:58.240 --> 00:20:59.800
But in a reverse sort of way.

00:20:59.800 --> 00:21:00.680
So what does it say?

00:21:00.680 --> 00:21:04.720
First of all, 54,000, 53,000 GitHub stars.

00:21:04.720 --> 00:21:07.320
So really, really quite popular.

00:21:07.320 --> 00:21:11.560
It has a little test, a little test server you can set up, point at your

00:21:11.560 --> 00:21:13.080
website for 10 minutes and play with it.

00:21:13.080 --> 00:21:14.320
That's a really nice feature.

00:21:14.320 --> 00:21:19.440
What it says, uptime monitoring for HTTPS, TCP, HTTP keywords,

00:21:19.440 --> 00:21:22.840
JSON query, ping, a DNS record.

00:21:22.840 --> 00:21:26.280
You can make sure your DNS records don't go insane and like your MX,

00:21:26.480 --> 00:21:30.600
DKIM or I don't know, whatever, game servers, and even check that your

00:21:30.600 --> 00:21:32.400
certain Docker containers are still running.

00:21:32.400 --> 00:21:35.960
So it's got a nice UI and has notifications for Telegram, Discord,

00:21:35.960 --> 00:21:40.120
Slack, pushover, email, and 90 other notifications.

00:21:40.120 --> 00:21:43.640
Can have as fine grained as every 20 seconds checking.

00:21:43.640 --> 00:21:45.720
It comes with status pages.

00:21:45.720 --> 00:21:54.560
So if we had a Python bytes monitor set up with this, I could set up status.pythonbytes.fm

00:21:54.800 --> 00:21:57.120
that people could go and see if the RSS feed is live.

00:21:57.120 --> 00:21:58.600
Is the Docker container running?

00:21:58.600 --> 00:22:00.120
Is X, Y, and Z, right?

00:22:00.120 --> 00:22:01.440
So it has that for you.

00:22:01.440 --> 00:22:06.400
And it'll also, one thing I really like, cause I use let's encrypt, but the auto

00:22:06.400 --> 00:22:08.840
renewal is a little bit janky, long story.

00:22:08.840 --> 00:22:10.600
I don't want to go into it, but it's a little bit janky.

00:22:10.600 --> 00:22:14.360
And, so it works, but it requires a little fiddling.

00:22:14.360 --> 00:22:18.280
So having it, it'll actually check SSL certificates to see if it'll expire.

00:22:18.280 --> 00:22:21.360
So it'll say like your certificate is good for 29 more days.

00:22:21.640 --> 00:22:25.920
Oh, maybe you want to get on that before it goes like, you know, something terrible.

00:22:25.920 --> 00:22:28.200
So all of that, isn't that sweet?

00:22:28.200 --> 00:22:29.200
It is cool.

00:22:29.200 --> 00:22:29.560
Yeah.

00:22:29.560 --> 00:22:32.400
There's a bunch of sponsors and it's got this nice UI.

00:22:32.400 --> 00:22:35.160
You can bump over to the status page.

00:22:35.160 --> 00:22:40.080
It'll prepare you a little demo app and it runs for a certain amount of time.

00:22:40.080 --> 00:22:42.360
So how, how long are certificates good for?

00:22:42.360 --> 00:22:46.280
Uh, if you do a let's encrypt, it's a year, I believe.

00:22:46.280 --> 00:22:46.800
Okay.

00:22:46.800 --> 00:22:50.520
So anyway, you can go over here and create this and actually go and add a little

00:22:50.520 --> 00:22:54.080
monitor and pick all the different kinds and look at all these things.

00:22:54.080 --> 00:22:59.080
You can monitor MongoDB, SQL server, Postgres directly.

00:22:59.080 --> 00:22:59.560
Yeah.

00:22:59.560 --> 00:23:00.320
It's really neat.

00:23:00.320 --> 00:23:03.480
So I'm thinking of setting this up and if you want to play with it, just

00:23:03.480 --> 00:23:06.360
click on that little thing you can see here, Brian, I clicked on it now.

00:23:06.360 --> 00:23:10.600
It says I have nine minutes to 21 seconds before my app gets blown away, but I can

00:23:10.600 --> 00:23:11.840
test it out, which is pretty cool.

00:23:11.840 --> 00:23:19.040
Anyway, it, will give us, Potentially a really nice way to sort

00:23:19.040 --> 00:23:20.840
of monitor and get notifications about it.

00:23:20.840 --> 00:23:23.240
So I have that for other services, but don't like it.

00:23:23.240 --> 00:23:27.720
I could set it up once a day on the free one and make sure that my website at

00:23:27.720 --> 00:23:29.520
least is live for 10 minutes a day.

00:23:29.520 --> 00:23:29.960
Yeah.

00:23:29.960 --> 00:23:32.800
Yeah.

00:23:32.800 --> 00:23:35.040
If you don't mind reconfiguring it every time.

00:23:35.040 --> 00:23:35.440
Yeah.

00:23:35.440 --> 00:23:36.080
Okay.

00:23:36.080 --> 00:23:36.720
Yeah, sure.

00:23:36.720 --> 00:23:37.200
All right.

00:23:37.200 --> 00:23:37.840
Pretty cool.

00:23:37.840 --> 00:23:38.800
How about some extras?

00:23:38.800 --> 00:23:44.640
Um, the only extra I got was last week I talked about, making a new pytest

00:23:44.640 --> 00:23:51.000
course, I've been working on that and I'm on version three because I'm, a

00:23:51.000 --> 00:23:54.600
perfectionist and want to make sure that it's smooth and quick.

00:23:54.600 --> 00:23:58.080
So, I do hope to get that out sometime soon.

00:23:58.080 --> 00:24:01.120
I was going to say maybe next week, but you know, I don't want to put

00:24:01.120 --> 00:24:02.160
too much pressure on myself.

00:24:02.160 --> 00:24:02.880
Yeah.

00:24:02.880 --> 00:24:05.640
When I get, that's, that's very exciting.

00:24:05.640 --> 00:24:06.680
I know people are looking forward to it.

00:24:06.680 --> 00:24:11.440
I also had to basically put DaVinci resolve down to come record the podcast.

00:24:11.440 --> 00:24:14.720
So I was in the middle of editing some videos I got coming on for a new course

00:24:14.720 --> 00:24:16.440
as well, so very exciting stuff.

00:24:16.440 --> 00:24:17.080
All right.

00:24:17.080 --> 00:24:20.720
There's, there's a never ending stream of things to talk about, right?

00:24:20.720 --> 00:24:21.160
Yeah.

00:24:21.160 --> 00:24:21.800
All right.

00:24:21.800 --> 00:24:22.640
I've got a couple.

00:24:22.640 --> 00:24:28.200
Kenneth writes, talks, pointed out that, you know, requests and more

00:24:28.200 --> 00:24:33.000
fame talks about this, move that Switzerland pulled Switzerland,

00:24:33.000 --> 00:24:37.080
Switzerland now requires all government software to be open source.

00:24:37.080 --> 00:24:37.920
That's cool.

00:24:37.920 --> 00:24:38.240
Cool.

00:24:38.240 --> 00:24:38.800
Yeah.

00:24:38.800 --> 00:24:39.960
So what does that mean?

00:24:40.040 --> 00:24:41.880
They, you gotta read it carefully.

00:24:41.880 --> 00:24:46.200
It doesn't mean the government has to only use open source as in Linux and

00:24:46.200 --> 00:24:50.440
Firefox, but the thing, the software that the government makes has to

00:24:50.440 --> 00:24:51.680
be open source of what this is.

00:24:51.680 --> 00:24:53.480
So we bump over to Omnivore.

00:24:53.480 --> 00:24:54.200
You can see my notes.

00:24:54.200 --> 00:24:58.200
So Switzerland has taken a major step forward with its federal law on the

00:24:58.200 --> 00:25:01.440
use of electronic means for the fulfillment of government tasks.

00:25:01.440 --> 00:25:04.080
MBAG is the acronym.

00:25:04.080 --> 00:25:08.160
It's groundbreaking legislation mandates releasing open source

00:25:08.160 --> 00:25:09.800
software of the federal government.

00:25:09.920 --> 00:25:13.800
The law requires all public bodies to disclose the source code of software

00:25:13.800 --> 00:25:19.080
developed by or for them, unless 30 part third-party rights or security concerns.

00:25:19.080 --> 00:25:20.720
So that's pretty neat.

00:25:20.720 --> 00:25:22.360
There's actually, there was some pushback.

00:25:22.360 --> 00:25:26.640
For example, one of the main areas this was around is the justice system.

00:25:26.640 --> 00:25:33.760
This, was trying to get all the software that runs basically runs the

00:25:33.760 --> 00:25:38.400
justice system, the court system for Switzerland open source, but guess what?

00:25:38.400 --> 00:25:42.160
The proprietary legal software company, Weblaw wasn't happy.

00:25:42.160 --> 00:25:43.280
Right?

00:25:43.280 --> 00:25:43.800
Yeah.

00:25:43.800 --> 00:25:44.720
No, they weren't.

00:25:44.720 --> 00:25:48.800
But, after a decade of fighting, it came out and there's one other point to

00:25:48.800 --> 00:25:53.520
make in addition to mandating open source software, it also requires the release

00:25:53.520 --> 00:25:58.120
of non-personal non-security sensitive data as open data.

00:25:58.120 --> 00:26:03.120
So it's like open software and open, open data as well.

00:26:03.120 --> 00:26:04.160
So pretty cool.

00:26:04.160 --> 00:26:04.840
Interesting.

00:26:04.840 --> 00:26:05.280
We have stuff.

00:26:05.280 --> 00:26:06.000
Yeah, it is.

00:26:06.080 --> 00:26:08.800
We do have some stuff like that, like over at Talk Python.

00:26:08.800 --> 00:26:10.040
What was it?

00:26:10.040 --> 00:26:11.080
Uh, elections.

00:26:11.080 --> 00:26:12.480
I think if I look for that, yeah.

00:26:12.480 --> 00:26:16.720
Python at the U S federal elections, commission and talk to Laura,

00:26:16.720 --> 00:26:21.280
Beaufort, and I believe they are open sourcing their stuff as well.

00:26:21.280 --> 00:26:22.800
A lot of things going on there.

00:26:22.800 --> 00:26:23.200
Like, yeah.

00:26:23.200 --> 00:26:25.160
Open source at the FEC, for example.

00:26:25.160 --> 00:26:30.240
So we have some stuff in like spotty examples of that, but not as a overall

00:26:30.240 --> 00:26:31.440
statement, so it's pretty interesting.

00:26:31.440 --> 00:26:31.680
Right?

00:26:31.680 --> 00:26:32.320
Yeah.

00:26:32.320 --> 00:26:33.960
I'm curious to look at some of this stuff.

00:26:33.960 --> 00:26:35.000
Like, yeah.

00:26:35.760 --> 00:26:36.960
How clean's your code?

00:26:36.960 --> 00:26:37.720
Like, yeah.

00:26:37.720 --> 00:26:41.880
How many, AWS keys will be in there?

00:26:41.880 --> 00:26:42.440
We'll find out.

00:26:42.440 --> 00:26:45.240
Thanks indirectly, Kenneth, for that.

00:26:45.240 --> 00:26:46.200
Uh, one more.

00:26:46.200 --> 00:26:51.880
Remember last week I talked about the PySimple GUI and it's switching to a

00:26:51.880 --> 00:26:55.920
commercial license, which again, I'm not super against, but it's sort of the,

00:26:55.920 --> 00:26:58.840
the rug pull aspect of it, like, Hey, it's open source for a long time.

00:26:58.840 --> 00:27:01.880
And I'm going to take everybody's contributions and then, you know, change

00:27:01.880 --> 00:27:03.240
the license, that, that sort of thing.

00:27:03.280 --> 00:27:05.720
Uh, got some people's nerves up.

00:27:05.720 --> 00:27:12.680
Well, F Falcon 31415 on Mastodon pointed out, Hey, check out free simple

00:27:12.680 --> 00:27:16.680
GUI, which I linked to in the show notes, which is an actively maintained fork of

00:27:16.680 --> 00:27:20.760
the last release of PySimple GUI with an open source license.

00:27:20.760 --> 00:27:23.240
So if you were like, Oh, I was going to use that.

00:27:23.240 --> 00:27:24.120
And you still can.

00:27:24.120 --> 00:27:28.240
Yeah, actually it's got a really good, the read me on that has some

00:27:28.240 --> 00:27:32.960
really good to like, has some good tutorial examples of, of how to write it.

00:27:33.000 --> 00:27:33.920
Simple GUI on it.

00:27:33.920 --> 00:27:38.840
So, not only is it the open source free version, but it's, it's also

00:27:38.840 --> 00:27:40.440
some pretty good documentation on there.

00:27:40.440 --> 00:27:41.280
Cool.

00:27:41.280 --> 00:27:42.320
All right.

00:27:42.320 --> 00:27:43.360
How about some jokes?

00:27:43.360 --> 00:27:44.080
Yeah.

00:27:44.080 --> 00:27:46.680
Joke, joke, singular joke, a singular joke.

00:27:46.680 --> 00:27:51.360
So this one is kind of a meme with Will Smith and it doesn't really

00:27:51.360 --> 00:27:52.360
have that much to do with Will Smith.

00:27:52.360 --> 00:27:53.480
I think it's just the attitude.

00:27:53.480 --> 00:27:57.680
I like Will Smith anyway, says just because I know Java doesn't

00:27:57.680 --> 00:27:58.840
mean I know JavaScript.

00:27:58.840 --> 00:28:01.280
I mean, I do, but not because I know Java.

00:28:02.760 --> 00:28:03.120
That's good.

00:28:03.120 --> 00:28:03.360
Right?

00:28:03.360 --> 00:28:04.120
Yeah.

00:28:04.120 --> 00:28:04.680
Yeah.

00:28:04.680 --> 00:28:09.720
I was just talking, talking to, whenever you talk to kids trying to learn

00:28:09.720 --> 00:28:12.680
like software, it is, it's still confusing to people.

00:28:12.680 --> 00:28:15.120
I mean, like it's not confusing to us cause we've been in around it.

00:28:15.120 --> 00:28:19.440
We knew that the history, but it seems weird now to tell people, yeah, the

00:28:19.440 --> 00:28:25.120
JavaScript that everybody uses, it was named that because Java was popular at the time.

00:28:25.120 --> 00:28:29.280
So anyway, are you muted?

00:28:29.280 --> 00:28:30.600
I was sorry.

00:28:30.920 --> 00:28:32.800
Uh, fun episode as always, Brian.

00:28:32.800 --> 00:28:33.200
Yeah.

00:28:33.200 --> 00:28:33.400
Fun.

00:28:33.400 --> 00:28:34.200
And yeah.

00:28:34.200 --> 00:28:34.880
Thanks man.

00:28:34.880 --> 00:28:35.720
Nice to be in here.

