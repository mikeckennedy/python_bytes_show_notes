
00:00:00.000 --> 00:00:05.440
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your buds. This is episode


00:00:05.440 --> 00:00:08.660
118 recorded February 19th


00:00:08.660 --> 00:00:15.920
2019 I'm Michael Kennedy and I'm Brian Okken and this episode is brought to you by Digital Ocean check them out at Python bytes FM


00:00:15.920 --> 00:00:20.940
Slash Digital Ocean more on that later right now Brian. It's man is cold outside


00:00:20.940 --> 00:00:25.640
It's I would say it's frozen


00:00:27.840 --> 00:00:33.720
Oh, yeah, the whole transition thing. You're so good at that. The first topic is frozen flask


00:00:33.720 --> 00:00:39.880
this was sent in by somebody who I probably should have written their name down, but it was a recommended by a listener and


00:00:39.880 --> 00:00:45.800
It's actually pretty darn cool. So I've been playing with static site generators a little bit and


00:00:45.800 --> 00:00:51.680
Here's the idea is if you already have flask application up and it's mostly


00:00:52.360 --> 00:00:55.860
static content anyway, or it's got some,


00:00:55.860 --> 00:00:59.160
the activity is more JavaScripty or something.


00:00:59.160 --> 00:01:00.600
You can just freeze that into a,


00:01:00.600 --> 00:01:05.600
like a statically servable web thing with Frozen Flask,


00:01:05.600 --> 00:01:06.760
and it's pretty painless.


00:01:06.760 --> 00:01:08.240
- Frozen Flask looks so cool.


00:01:08.240 --> 00:01:09.560
- Yeah, it really does.


00:01:09.560 --> 00:01:14.080
And then I also stumbled across a tutorial


00:01:14.080 --> 00:01:16.440
that's called Dead Easy Yet Powerful


00:01:16.440 --> 00:01:18.640
Static Website Generator with Flask.


00:01:18.640 --> 00:01:20.480
And it talks about Frozen Flask,


00:01:20.480 --> 00:01:26.400
and it also talks about an extension to Flask called Flask Flat Pages,


00:01:26.400 --> 00:01:31.560
which allows you to have a bunch of pages generated for markdown.


00:01:31.560 --> 00:01:34.120
>> That's pretty cool. Yeah, I haven't heard of that. That's nice.


00:01:34.120 --> 00:01:35.880
>> It's pretty fun. I'll get a warning.


00:01:35.880 --> 00:01:37.480
I tried to go through this tutorial.


00:01:37.480 --> 00:01:39.400
It's still got a lot of great information.


00:01:39.400 --> 00:01:42.480
It's well-written. It's just a look since it was from 2012,


00:01:42.480 --> 00:01:44.160
it's a little out of date.


00:01:44.160 --> 00:01:46.000
Some of the imports don't quite work,


00:01:46.000 --> 00:01:47.560
so you'll have to do some Googling.


00:01:47.560 --> 00:01:51.040
But the frozen flask that we all see link to has some really cool.


00:01:51.040 --> 00:01:54.340
It has, it's some pretty easy tutorials on there too.


00:01:54.340 --> 00:01:55.580
So it's looks fun.


00:01:55.580 --> 00:01:55.900
Yeah.


00:01:55.900 --> 00:01:56.780
That looks really cool.


00:01:56.780 --> 00:02:02.220
there's always this tension between having like a data driven website where maybe


00:02:02.220 --> 00:02:06.420
I've got a bunch of podcast episodes or something and they all have notes, but I


00:02:06.420 --> 00:02:09.520
want to have like a whole bunch of stuff around them and have that generated.


00:02:09.520 --> 00:02:13.020
And of course that would be like a regular flask data driven app.


00:02:13.020 --> 00:02:13.380
Right.


00:02:13.380 --> 00:02:17.120
But if I'm going to do that with a static thing, like how do I do that?


00:02:17.120 --> 00:02:19.140
Do I like create a bunch of static markdown?


00:02:19.140 --> 00:02:20.160
How do I mix it all together?


00:02:20.160 --> 00:02:21.060
It can be painful, right?


00:02:21.060 --> 00:02:24.880
So frozen flask is like, well, you create the dynamic thing, but then you host it.


00:02:24.880 --> 00:02:26.900
You don't have to deal with the infrastructure hosting.


00:02:26.900 --> 00:02:30.820
You just put HTML and CSS somewhere and it runs great.


00:02:30.820 --> 00:02:31.020
Right?


00:02:31.020 --> 00:02:31.420
Yeah.


00:02:31.420 --> 00:02:34.320
Like for instance, I was thinking that it'd be a neat way to do this.


00:02:34.320 --> 00:02:38.260
I was always potentially looking for ways I can use something also.


00:02:38.260 --> 00:02:43.020
Like if I've got a, something internal for our test team, for instance, and we


00:02:43.020 --> 00:02:47.060
want to look at all of our test data and analytics and all that stuff, having


00:02:47.060 --> 00:02:49.100
a more dynamic site would be really neat,


00:02:49.100 --> 00:02:53.200
but then also a periodic generation


00:02:53.200 --> 00:02:58.020
of like a version report or something as a static site.


00:02:58.020 --> 00:02:59.600
This would be useful for something like that.


00:02:59.600 --> 00:03:01.220
- Yeah, and so a place that I just want to throw out


00:03:01.220 --> 00:03:03.340
is like an extra for this part


00:03:03.340 --> 00:03:07.220
that I have no experience with, but seems super cool.


00:03:07.220 --> 00:03:09.900
I think you also are familiar with this is Netlify.


00:03:09.900 --> 00:03:10.740
- Yeah.


00:03:10.740 --> 00:03:13.060
- Yeah, so Netlify is a place specifically


00:03:13.060 --> 00:03:15.540
for hosting static sites.


00:03:15.540 --> 00:03:18.980
So it says build, deploy, and manage modern web projects.


00:03:18.980 --> 00:03:22.820
And it gives you a global CDN, continuous integration,


00:03:22.820 --> 00:03:26.980
an automatic free HTTPS, if you even your own domain name,


00:03:26.980 --> 00:03:27.940
100% for free.


00:03:27.940 --> 00:03:30.020
There are ways to pay for it, but so much of it


00:03:30.020 --> 00:03:32.740
is for free that this seems like a really good option.


00:03:32.740 --> 00:03:35.020
- Yeah, and they're not sponsoring this episode.


00:03:35.020 --> 00:03:35.860
It's just cool.


00:03:35.860 --> 00:03:37.980
- Nope, that's just something that's cool, that's right.


00:03:37.980 --> 00:03:40.860
DigitalOcean, they are sponsoring this episode.


00:03:40.860 --> 00:03:42.900
So last week, I think it was,


00:03:42.900 --> 00:03:47.900
we spoke about the new PEP that is for Dunder pi packages.


00:03:47.900 --> 00:03:48.100
Yeah.


00:03:48.100 --> 00:03:49.780
And you said that's awesome except.


00:03:49.780 --> 00:03:51.780
Yeah.


00:03:51.780 --> 00:03:53.100
It's awesome but.


00:03:53.100 --> 00:03:55.740
And one of the challenges you said was, well,


00:03:55.740 --> 00:03:58.380
if you just want to have packages and put them in there


00:03:58.380 --> 00:04:00.140
and run your app, that's totally good.


00:04:00.140 --> 00:04:01.340
It'll pick it up and run.


00:04:01.340 --> 00:04:03.860
But the thing that was missing was


00:04:03.860 --> 00:04:11.260
to run the command line binary apps like pytest or Tox or PServe


00:04:11.260 --> 00:04:13.820
or you know like micro-whiskey, all those things


00:04:13.820 --> 00:04:15.700
that would then get stuffed into that place


00:04:15.700 --> 00:04:18.380
that is really nearly impossible to put into your path,


00:04:18.380 --> 00:04:19.220
right?


00:04:19.220 --> 00:04:20.860
- Yeah, well not impossible.


00:04:20.860 --> 00:04:22.820
- Not impossible, but it's a super pain,


00:04:22.820 --> 00:04:24.380
like every time you create a virtual environment


00:04:24.380 --> 00:04:27.500
to add it to the path, right?


00:04:27.500 --> 00:04:29.940
So Chad Smith, who had worked on that before,


00:04:29.940 --> 00:04:32.940
well we mentioned he was part of this Python,


00:04:32.940 --> 00:04:36.180
for like local Python project to let you


00:04:36.180 --> 00:04:38.700
do like a preview interaction with that,


00:04:38.700 --> 00:04:39.980
sent us a message and said,


00:04:39.980 --> 00:04:42.280
"Hey, actually you should know about my other project


00:04:42.280 --> 00:04:44.280
"called PipX."


00:04:44.280 --> 00:04:47.480
I guess for a pip executable or something like that.


00:04:47.480 --> 00:04:50.600
And the idea is it will execute binary Python packages


00:04:50.600 --> 00:04:52.080
in isolated environments.


00:04:52.080 --> 00:04:55.160
And the closest analogy to this is probably Pipsy,


00:04:55.160 --> 00:04:56.560
which we have spoken about before.


00:04:56.560 --> 00:04:58.160
- Oh yeah, okay.


00:04:58.160 --> 00:05:00.500
- So the idea is, yeah, you can create these,


00:05:00.500 --> 00:05:02.900
you can basically, instead of pip install a thing,


00:05:02.900 --> 00:05:05.200
you can pipx install a thing,


00:05:05.200 --> 00:05:08.340
and it'll automatically create a virtual environment for you,


00:05:08.340 --> 00:05:09.960
install it and its dependencies.


00:05:09.960 --> 00:05:12.840
And even it's even nice, it makes sure your pip is up to date,


00:05:12.840 --> 00:05:16.280
which is almost never the case when you create a new virtual environment.


00:05:16.280 --> 00:05:20.100
And it just installs it there and then it puts it in the path.


00:05:20.100 --> 00:05:25.120
It puts it in a location on your system that when you install PIPX


00:05:25.120 --> 00:05:29.880
is in the path, but is not in the restricted part of your operating system.


00:05:29.880 --> 00:05:32.940
So you can pip install anything you need to run.


00:05:32.940 --> 00:05:36.360
So you can run it from the command line in your path without doing sudo.


00:05:36.360 --> 00:05:38.360
- Okay, so the entry points are gonna all go


00:05:38.360 --> 00:05:40.340
from a bunch of different virtual environments


00:05:40.340 --> 00:05:42.360
are all gonna go to the same place, I guess.


00:05:42.360 --> 00:05:45.160
- Yes, it does a bunch of like linking back


00:05:45.160 --> 00:05:47.080
some place that's in the path


00:05:47.080 --> 00:05:49.240
back to the various virtual environments it manages.


00:05:49.240 --> 00:05:50.400
- Okay, this is very cool.


00:05:50.400 --> 00:05:51.240
Now I'm excited.


00:05:51.240 --> 00:05:52.680
- Yeah, now I'm even more excited.


00:05:52.680 --> 00:05:54.520
Yeah, this is super cool.


00:05:54.520 --> 00:05:56.580
So you can safely install these packages


00:05:56.580 --> 00:05:58.900
into virtual environments, which is where they belong,


00:05:58.900 --> 00:06:01.520
but globally, but without messing up other things


00:06:01.520 --> 00:06:04.440
or putting them all into one virtual environment


00:06:04.440 --> 00:06:05.400
that's in your path.


00:06:05.400 --> 00:06:07.560
You can do things like list the stuff that's installed,


00:06:07.560 --> 00:06:08.760
so you can see which of the,


00:06:08.760 --> 00:06:10.160
which is kind of like brew,


00:06:10.160 --> 00:06:12.440
you can say what have I installed here through pipx,


00:06:12.440 --> 00:06:14.360
which is pretty cool.


00:06:14.360 --> 00:06:17.700
It'll also run binaries out of the py package directory


00:06:17.700 --> 00:06:18.920
as well.


00:06:18.920 --> 00:06:21.400
So it's kind of a companion tool to Python loc as well.


00:06:21.400 --> 00:06:22.600
- Okay, nice.


00:06:22.600 --> 00:06:24.920
Being a Gen Xer, I'm a sucker for anything


00:06:24.920 --> 00:06:25.880
with x at the end.


00:06:25.880 --> 00:06:26.800
- I know, it's amazing.


00:06:26.800 --> 00:06:28.440
It's the best.


00:06:28.440 --> 00:06:31.660
So basically you just pip install pipx,


00:06:31.660 --> 00:06:34.000
and then from then on you can say pip install


00:06:34.000 --> 00:06:36.920
like PT Python, which is an awesome thing.


00:06:36.920 --> 00:06:38.920
You could pip install, pytest,


00:06:38.920 --> 00:06:41.920
you could pip install, all sorts of things, glances.


00:06:41.920 --> 00:06:44.800
And there's a couple of ways in which it's


00:06:44.800 --> 00:06:46.800
sort of like PIPC, but also better.


00:06:46.800 --> 00:06:48.520
So one of the things that I really like,


00:06:48.520 --> 00:06:50.880
you know, I made the analogy to Homebrew before,


00:06:50.880 --> 00:06:54.520
is you can go and say pipx upgrade all.


00:06:54.520 --> 00:06:56.800
And so everything that you've installed


00:06:56.800 --> 00:06:58.960
throughout the last six months or whatever with pipx,


00:06:58.960 --> 00:07:01.480
it'll go and find those and see if there's any updates


00:07:01.480 --> 00:07:03.960
for any of your little Python utilities you've installed.


00:07:03.960 --> 00:07:04.920
- Oh, cool.


00:07:04.920 --> 00:07:05.760
- That's cool, right?


00:07:05.760 --> 00:07:06.580
- Yeah.


00:07:06.580 --> 00:07:07.500
- Yeah, and then there's also a comparison,


00:07:07.500 --> 00:07:08.720
little matrix thing.


00:07:08.720 --> 00:07:12.200
By matrix, I mean one dimensional single line.


00:07:12.200 --> 00:07:13.960
Anyway, there's a comparison to PIPC


00:07:13.960 --> 00:07:16.440
and it talks about how PIPX is under active development.


00:07:16.440 --> 00:07:20.000
PIPC isn't in a bunch of other stuff.


00:07:20.000 --> 00:07:22.200
It's based on Python 3.6 and so on.


00:07:22.200 --> 00:07:25.240
It uses VENV, not virtual environment.


00:07:25.240 --> 00:07:27.680
There's just a bunch of little niceties.


00:07:27.680 --> 00:07:30.800
And one that made me smile is it prints out emojis.


00:07:30.800 --> 00:07:33.280
When it's doing stuff, it prints out little happy faces.


00:07:33.280 --> 00:07:35.640
like little indicator emojis on the terminal,


00:07:35.640 --> 00:07:37.040
which, you know, it makes me happy.


00:07:37.040 --> 00:07:38.840
- Yeah, what's the other thing that does that?


00:07:38.840 --> 00:07:40.120
Pipenv does that, right?


00:07:40.120 --> 00:07:42.360
- Yeah, yeah, yeah, and yeah, Kubernetes,


00:07:42.360 --> 00:07:44.160
some of the Kubernetes tools do as well.


00:07:44.160 --> 00:07:45.960
It's a trend I'm seeing coming along here,


00:07:45.960 --> 00:07:48.720
but there's a lot of smiley, happy little things


00:07:48.720 --> 00:07:50.800
on the terminal, which is, you know, it doesn't hurt.


00:07:50.800 --> 00:07:51.640
- Yeah. - Yeah, what's the next


00:07:51.640 --> 00:07:52.460
one you got for us?


00:07:52.460 --> 00:07:55.560
- This is an article from Vicky Boykus


00:07:55.560 --> 00:07:59.200
that's called "Data Science is Different Now."


00:07:59.200 --> 00:08:00.680
It's a fairly lengthy article,


00:08:00.680 --> 00:08:03.180
but it's some pretty good information.


00:08:03.180 --> 00:08:05.320
So here's the situation we've got.


00:08:05.320 --> 00:08:06.920
We've been talking about data science.


00:08:06.920 --> 00:08:09.620
Everybody's been talking about, say, data science.


00:08:09.620 --> 00:08:11.600
There's just a lot of buzz around it.


00:08:11.600 --> 00:08:14.880
So there's a lot of people with just a little bit


00:08:14.880 --> 00:08:18.560
of training in it going through boot camps or MOOCs or,


00:08:18.560 --> 00:08:20.760
is that how you pronounce MOOCs, MOOCs?


00:08:20.760 --> 00:08:21.680
- I think so, yeah.


00:08:21.680 --> 00:08:22.500
- Okay.


00:08:22.500 --> 00:08:25.600
- M-O-O-C, the massive online courses, yeah.


00:08:25.600 --> 00:08:26.440
- Yeah, okay.


00:08:26.440 --> 00:08:28.880
Or they're self-taught or they get a remote degree


00:08:28.880 --> 00:08:30.000
or some other training


00:08:30.000 --> 00:08:32.200
and they wanna get a data science job.


00:08:32.200 --> 00:08:39.200
So there's a whole bunch of people trying to get into data science and this partly can become a problem.


00:08:39.200 --> 00:08:47.200
So the market, she notes that the market is, can be very, very discouraging for this flood of beginners because


00:08:47.200 --> 00:08:53.200
since there's a lot of beginners, there's a lot of people, the jobs are also becoming more advanced.


00:08:53.200 --> 00:08:55.200
They have more specific requirements.


00:08:55.200 --> 00:09:11.200
And the also just the job, the job description is sort of vague. So what is it you're actually going to be doing? And when people are actually doing it in the workplace, it seems a lot more like engineering than this shiny new thing that we've been talking about.


00:09:11.200 --> 00:09:12.200
That's right.


00:09:12.200 --> 00:09:19.140
It's just a kind of a good view of reality check for data science people interested in getting into it


00:09:19.140 --> 00:09:25.940
but there's a she also ends with some advice not just a complaining about it, but her advice is for people that wanted to


00:09:25.940 --> 00:09:33.460
Get into it. Her first bullet point is don't get into data science, which I just laugh. I actually laughed out loud


00:09:33.460 --> 00:09:35.100
I'm like, that's awesome advice


00:09:35.100 --> 00:09:39.140
but no basically she said just don't you know, don't follow the crowd because


00:09:39.460 --> 00:09:44.500
following what everybody else is doing is not going to differentiate you. And she recommends a


00:09:44.500 --> 00:09:50.180
backdoor approach of like starting as a junior developer or in DevOps or project management or


00:09:50.180 --> 00:09:56.340
something like that and learn a lot of data science stuff on the job and then build that


00:09:56.340 --> 00:10:00.900
up into a position that you can work at the company as a data scientist. So, you know,


00:10:00.900 --> 00:10:06.500
that sounds like a pretty good bit of advice because I feel like data scientists are a little


00:10:06.500 --> 00:10:09.500
more on their own than software developers?


00:10:09.500 --> 00:10:10.340
- Yeah.


00:10:10.340 --> 00:10:13.100
- Like, at a company, there'll be five or 10


00:10:13.100 --> 00:10:15.340
software developers working on one web app


00:10:15.340 --> 00:10:17.860
or one other automation project,


00:10:17.860 --> 00:10:20.260
but how often do you have five to 10 data scientists


00:10:20.260 --> 00:10:21.900
all working on the same problem, right?


00:10:21.900 --> 00:10:24.420
I feel like they're all kind of doing their own thing


00:10:24.420 --> 00:10:26.700
a lot of times, which, as a beginner,


00:10:26.700 --> 00:10:28.100
can make it more difficult, right?


00:10:28.100 --> 00:10:30.540
So maybe get some of these engineering skills


00:10:30.540 --> 00:10:32.460
through the approach that you were just talking about


00:10:32.460 --> 00:10:35.780
and then branch out into that more solo side of things.


00:10:35.780 --> 00:10:38.360
- Yeah, and then she also has like some skill,


00:10:38.360 --> 00:10:40.840
a whole list of specific skills for,


00:10:40.840 --> 00:10:42.900
like let's say you did get a junior developer job


00:10:42.900 --> 00:10:44.460
or you got some other job,


00:10:44.460 --> 00:10:46.060
which skills should you beef up on?


00:10:46.060 --> 00:10:47.380
So she's got a bunch of,


00:10:47.380 --> 00:10:49.940
listed a bunch of skills to try to beef up on that.


00:10:49.940 --> 00:10:50.900
So. - Yeah, what are they?


00:10:50.900 --> 00:10:53.740
- Creating Python packages, putting R into production,


00:10:53.740 --> 00:10:56.200
which I don't like that one, you should use Python.


00:10:56.200 --> 00:10:57.940
But anyway, what do I know?


00:10:57.940 --> 00:10:59.020
- We'll talk more about that later.


00:10:59.020 --> 00:11:02.120
- Optimizing Spark jobs so they run more efficiently.


00:11:02.120 --> 00:11:03.300
I don't even know what that means.


00:11:03.300 --> 00:11:05.100
Version controlling data.


00:11:05.100 --> 00:11:06.260
- Ooh, that sounds neat.


00:11:06.260 --> 00:11:08.940
Making models and data reproducible.


00:11:08.940 --> 00:11:10.820
Version controlling SQL.


00:11:10.820 --> 00:11:11.660
Building and maintaining--


00:11:11.660 --> 00:11:12.480
- That sounds hard.


00:11:12.480 --> 00:11:14.500
- Clean data in data lakes.


00:11:14.500 --> 00:11:16.940
I love data lakes and data swamps.


00:11:16.940 --> 00:11:17.800
It's just funny.


00:11:17.800 --> 00:11:20.440
Tooling for time series.


00:11:20.440 --> 00:11:21.820
Forecasting at scale.


00:11:21.820 --> 00:11:23.380
Scaling, sharing.


00:11:23.380 --> 00:11:24.780
Sharing of Jupyter notebooks.


00:11:24.780 --> 00:11:26.740
Thinking about systems for clean data.


00:11:26.740 --> 00:11:28.100
And lots of JSON.


00:11:28.100 --> 00:11:29.340
- Yeah, that's cool.


00:11:29.340 --> 00:11:31.460
All right, that sounds like good advice.


00:11:31.460 --> 00:11:32.980
That's a good pick.


00:11:32.980 --> 00:11:37.020
Speaking of good stuff and sponsored episodes,


00:11:37.020 --> 00:11:39.140
this one is brought to you by DigitalOcean.


00:11:39.140 --> 00:11:41.820
And they, you know, it's February 19th


00:11:41.820 --> 00:11:42.940
as we're recording this, Brian,


00:11:42.940 --> 00:11:44.900
and not long ago, five days ago,


00:11:44.900 --> 00:11:46.180
was Valentine's Day, right?


00:11:46.180 --> 00:11:47.020
- Yeah.


00:11:47.020 --> 00:11:47.840
- Yeah, so DigitalOcean,


00:11:47.840 --> 00:11:50.480
they actually had a Valentine's Day present for the world,


00:11:50.480 --> 00:11:53.140
and their present was Database as a Service.


00:11:53.140 --> 00:11:56.620
So until now, you would go over to DigitalOcean,


00:11:56.620 --> 00:11:57.460
you'd create a server,


00:11:57.460 --> 00:11:59.500
and then you would have to put your own database on there


00:11:59.500 --> 00:12:01.700
or use some other external service,


00:12:01.700 --> 00:12:03.880
like object rocket or something like that.


00:12:03.880 --> 00:12:07.540
So now you can get managed Postgres databases


00:12:07.540 --> 00:12:09.300
on DigitalOcean, which is pretty sweet


00:12:09.300 --> 00:12:10.620
if you're gonna work with Postgres.


00:12:10.620 --> 00:12:12.740
So you just check the box


00:12:12.740 --> 00:12:15.420
and they handle all the operational bits for you.


00:12:15.420 --> 00:12:16.260
It's pretty cool, right?


00:12:16.260 --> 00:12:17.580
- Yeah, that is cool.


00:12:17.580 --> 00:12:18.980
- Yeah, yeah, definitely.


00:12:18.980 --> 00:12:22.980
So check them out at pythonbytes.fm/digitalocean.


00:12:22.980 --> 00:12:25.620
New users get $100 credit to play around with Postgres


00:12:25.620 --> 00:12:26.700
or whatever else you wanna play with.


00:12:26.700 --> 00:12:29.260
And yeah, they're very good service


00:12:29.260 --> 00:12:31.540
and definitely can recommend them.


00:12:31.540 --> 00:12:33.500
So this next one is pretty interesting.


00:12:33.500 --> 00:12:35.980
It's not super actionable yet, Brian,


00:12:35.980 --> 00:12:38.300
but it starts to approach something


00:12:38.300 --> 00:12:39.420
that I'm really passionate about.


00:12:39.420 --> 00:12:42.820
So the thing I want to tell you about is Rust Python.


00:12:42.820 --> 00:12:46.740
So we have the language Rust, we have the language Python,


00:12:46.740 --> 00:12:48.100
and somehow they come together.


00:12:48.100 --> 00:12:49.900
So the Rust doesn't replace the Python,


00:12:49.900 --> 00:12:51.940
it replaces the C in CPython.


00:12:51.940 --> 00:12:54.220
The idea is like, here's a new interpreter,


00:12:54.220 --> 00:12:58.020
a new runtime built on Rust instead of on C.


00:12:58.020 --> 00:12:59.020
- Wow. - Yeah.


00:12:59.020 --> 00:13:01.660
So that feels like a more modern type of language


00:13:01.660 --> 00:13:04.460
to use than just C, right, to build a foundation.


00:13:04.460 --> 00:13:05.940
And that might be a little bit nicer


00:13:05.940 --> 00:13:07.420
if they could get that working really well.


00:13:07.420 --> 00:13:08.260
- Yeah.


00:13:08.260 --> 00:13:10.700
- Yeah, and it's Python 3 only, so 3, 5, and above.


00:13:10.700 --> 00:13:13.540
And basically the interpreter is written in Rust.


00:13:13.540 --> 00:13:16.340
And this comes to us from Frederick Averpill.


00:13:16.340 --> 00:13:18.180
So thanks, Frederick, for sending that over.


00:13:18.180 --> 00:13:19.700
But yeah, this looks pretty interesting.


00:13:19.700 --> 00:13:21.700
I would say it's definitely under active development.


00:13:21.700 --> 00:13:23.020
When I was getting ready for this recording,


00:13:23.020 --> 00:13:25.620
I looked at the site, and the GitHub said,


00:13:25.620 --> 00:13:27.500
"Last commit an hour ago."


00:13:27.500 --> 00:13:29.380
So it feels like people are working on it.


00:13:29.380 --> 00:13:31.220
You always wonder, is this thing real?


00:13:31.220 --> 00:13:32.980
Are people doing anything?


00:13:32.980 --> 00:13:35.460
Now I say that because they're not really ready


00:13:35.460 --> 00:13:36.940
to do much.


00:13:36.940 --> 00:13:37.980
Like you can create a REPL


00:13:37.980 --> 00:13:39.740
and you can run some basic Python and stuff,


00:13:39.740 --> 00:13:42.900
but there's not a great standard library written


00:13:42.900 --> 00:13:45.100
with Rust foundations and things like that.


00:13:45.100 --> 00:13:46.520
So there's a lot of work to be done,


00:13:46.520 --> 00:13:49.220
but the goals are to have a full Python 3 environment


00:13:49.220 --> 00:13:52.380
entirely in Rust with no CPython bindings


00:13:52.380 --> 00:13:54.180
or no C bindings really,


00:13:54.180 --> 00:13:57.260
and a clean implementation without compatibility hacks.


00:13:57.260 --> 00:13:58.100
- Okay.


00:13:58.100 --> 00:13:59.380
- Yeah, so if you want to practice some Rust


00:13:59.380 --> 00:14:01.100
and play around, there's a lot of things


00:14:01.100 --> 00:14:04.020
that you could do here that might be fun.


00:14:04.020 --> 00:14:05.740
I think people who played with this


00:14:05.740 --> 00:14:08.420
would probably understand regular CPython better as well.


00:14:08.420 --> 00:14:10.100
Right, obviously, if you re-implement it


00:14:10.100 --> 00:14:12.100
in another language, that'd be good.


00:14:12.100 --> 00:14:14.660
But they have a bunch of tasks on the issue trackers


00:14:14.660 --> 00:14:16.220
and they're labeled very nicely,


00:14:16.220 --> 00:14:17.400
like good first issue and stuff.


00:14:17.400 --> 00:14:18.780
So if people want to get started, they can do that.


00:14:18.780 --> 00:14:21.580
- Yeah, also kind of be a fun getting in


00:14:21.580 --> 00:14:25.100
in the early stages sort of a thing to jump in and help out.


00:14:25.100 --> 00:14:26.540
- Exactly, like in five years,


00:14:26.540 --> 00:14:27.540
if people keep working on this,


00:14:27.540 --> 00:14:28.940
this will be really hard to contribute to,


00:14:28.940 --> 00:14:32.340
but right now it'd be really easy, relatively speaking.


00:14:32.340 --> 00:14:34.580
So why do I think this is super cool?


00:14:34.580 --> 00:14:37.300
Well, Rust comes from Mozilla,


00:14:37.300 --> 00:14:41.220
and Rust has good support for compiling to WebAssembly, right?


00:14:41.220 --> 00:14:42.060
- Oh, okay.


00:14:42.060 --> 00:14:46.460
- And WebAssembly is the much better, faster, stronger way


00:14:46.460 --> 00:14:48.940
of running something in the browser.


00:14:48.940 --> 00:14:52.300
So if this thing got off the ground,


00:14:52.300 --> 00:14:55.060
and it actually worked in a meaningful way,


00:14:55.060 --> 00:14:57.260
and it could be compiled to WebAssembly,


00:14:57.260 --> 00:15:00.980
well then, all of a sudden we have a super awesome


00:15:00.980 --> 00:15:03.460
Python implementation in the browser on the client side.


00:15:03.460 --> 00:15:07.460
- Yeah, so we get a Python really full stack on both ends,


00:15:07.460 --> 00:15:09.300
the server and the client.


00:15:09.300 --> 00:15:10.700
- Yeah, so it would be super cool,


00:15:10.700 --> 00:15:13.680
and this is one possible path down that.


00:15:13.680 --> 00:15:15.180
I don't know, I don't know that that's the goal,


00:15:15.180 --> 00:15:18.420
but they do talk about WebAssembly being an option


00:15:18.420 --> 00:15:19.700
in sort of a toy sense,


00:15:19.700 --> 00:15:20.900
'cause it's not really quite ready yet,


00:15:20.900 --> 00:15:21.940
but there's some stuff there.


00:15:21.940 --> 00:15:24.580
So anyway, that was what really got my interest.


00:15:24.580 --> 00:15:26.720
I'm like, okay, another implementation address.


00:15:26.720 --> 00:15:28.160
It's kind of interesting, like, oh wait,


00:15:28.160 --> 00:15:30.040
WebAssembly support, that would be a big deal


00:15:30.040 --> 00:15:31.760
if that came along.


00:15:31.760 --> 00:15:33.920
- Maybe in a few years we'll see something


00:15:33.920 --> 00:15:37.640
like a book called Python Script, just the good parts.


00:15:37.640 --> 00:15:38.480
- Exactly.


00:15:38.480 --> 00:15:40.920
Very cool, all right, well what's the next one?


00:15:40.920 --> 00:15:43.720
- The next one is, this is an article,


00:15:43.720 --> 00:15:45.440
actually it's kind of a team up


00:15:45.440 --> 00:15:49.080
between Mike Driscoll and RealPython.


00:15:49.080 --> 00:15:51.680
So Mike Driscoll wrote an article on RealPython


00:15:51.680 --> 00:15:55.120
called Jupyter Notebook and Introduction.


00:15:55.120 --> 00:15:58.000
And of course, we've talked about Jupyter Notebooks before


00:15:58.000 --> 00:16:01.480
and a lot of stuff around data and around that.


00:16:01.480 --> 00:16:03.660
However, this is actually a tutorial


00:16:03.660 --> 00:16:05.560
that I think was kind of missing.


00:16:05.560 --> 00:16:09.280
And it's not all the cool things you can do with it,


00:16:09.280 --> 00:16:11.400
but it's, I know I want to use it.


00:16:11.400 --> 00:16:13.320
No, really, how do I start?


00:16:13.320 --> 00:16:16.760
And it really starts from installing it, of course,


00:16:16.760 --> 00:16:19.140
up to, and then just kind of walks through


00:16:19.140 --> 00:16:22.580
some of the real basics like creating a new,


00:16:22.580 --> 00:16:23.880
once you get it up and loaded,


00:16:23.880 --> 00:16:27.120
you've got a blank notebook or a blank interface


00:16:27.120 --> 00:16:29.340
and you can create a new notebook in there.


00:16:29.340 --> 00:16:31.620
And then even something simple like,


00:16:31.620 --> 00:16:34.040
I didn't know that it was so easy to change the name


00:16:34.040 --> 00:16:37.980
just by clicking on the name of the untitled notebook


00:16:37.980 --> 00:16:39.120
that you get right away


00:16:39.120 --> 00:16:41.880
and you can click and rename it something else.


00:16:41.880 --> 00:16:43.620
Talks about how to run cells.


00:16:43.620 --> 00:16:45.860
I think I played with notebooks for quite a while


00:16:45.860 --> 00:16:48.860
before I learned the shortcut of shift enter.


00:16:48.860 --> 00:16:51.620
And then goes through just some of the menu options


00:16:51.620 --> 00:16:53.980
and some of the neat features that you might not be obvious


00:16:53.980 --> 00:16:56.460
if you didn't think of exploring them before.


00:16:56.460 --> 00:17:00.040
Like file has a save and checkpoint.


00:17:00.040 --> 00:17:01.180
As you're working on a notebook,


00:17:01.180 --> 00:17:04.100
you can, it's kind of like a version control thing


00:17:04.100 --> 00:17:04.940
built into it.


00:17:04.940 --> 00:17:05.760
You can just save it,


00:17:05.760 --> 00:17:07.780
save at different checkpoints and move on.


00:17:07.780 --> 00:17:08.620
- That's cool.


00:17:08.620 --> 00:17:09.940
- The edit menu has,


00:17:09.940 --> 00:17:11.500
I wouldn't have thought to look there


00:17:11.500 --> 00:17:14.320
for things like splitting and merging cells


00:17:14.320 --> 00:17:17.580
or moving cells around, but it's in there.


00:17:17.580 --> 00:17:21.340
and then the cell menu has a whole bunch of cool ways to run.


00:17:21.340 --> 00:17:23.620
I knew you could run a cell or run everything,


00:17:23.620 --> 00:17:26.500
but there's also things like run a subset or run


00:17:26.500 --> 00:17:29.540
everything above this cell or below this cell or something.


00:17:29.540 --> 00:17:30.780
>> Yeah. Excellent.


00:17:30.780 --> 00:17:32.160
>> At first when I was reading this,


00:17:32.160 --> 00:17:34.540
there's a couple of questions that I have right away when I


00:17:34.540 --> 00:17:38.500
have to start with the notebooks that wasn't covered.


00:17:38.500 --> 00:17:42.980
I'm going to go ahead and push promote these practices right away.


00:17:42.980 --> 00:17:45.420
When you're installing Jupyter,


00:17:45.420 --> 00:17:46.940
if you're installing it with PIP,


00:17:46.940 --> 00:17:51.980
do it in a virtual environment and then all the installs within your notebooks will go in that


00:17:51.980 --> 00:17:55.740
environment and you can keep those separate from the rest of your work of everything else.


00:17:55.740 --> 00:18:02.620
Once you have a notebook up you can pip install within there now with the percent pip install


00:18:02.620 --> 00:18:07.820
that works now thanks to I think at least Jake Vanderplass publicized it. I'm not sure if he did


00:18:07.820 --> 00:18:11.740
the work or not but so that's kind of really what I wanted to talk to you about. This is a really


00:18:11.740 --> 00:18:16.380
good I think a good article to send to people if you're working with notebooks and you want to share


00:18:16.380 --> 00:18:21.260
something with somebody else and they've never experienced them before, just send them to this also.


00:18:21.260 --> 00:18:25.820
Yeah, it's a good resource and, you know, very comprehensive. So definitely a good one that Mike


00:18:25.820 --> 00:18:32.700
Driscoll put up there. Now I want to round out the show talking about the Python Developer Survey


00:18:32.700 --> 00:18:38.860
results from 2018. This is the end of 2018. So this is pretty fresh from the PSF and JetBrains.


00:18:38.860 --> 00:18:46.060
We talked about their stuff a year ago when they did it for 2017, end of 2017. So this is the next


00:18:46.060 --> 00:18:52.500
year. Have you seen this yet Brian? I've only briefly looked through it. Yeah, so there's a couple of interesting things that I pulled out and


00:18:52.500 --> 00:18:55.540
one of them is that


00:18:55.540 --> 00:18:59.500
Python usage as a main language. So one of the questions


00:18:59.500 --> 00:19:05.220
I say is do you so you're here for because you use Python is that because you use it as a secondary thing like maybe


00:19:05.220 --> 00:19:08.660
You're a C++ developer, but you use it for DevOps or something like that


00:19:08.660 --> 00:19:15.460
Or do you use it as your main language? The answer of Python is my main language is up 5% from last year


00:19:15.460 --> 00:19:16.100
That's awesome.


00:19:16.100 --> 00:19:21.500
Yeah, so now it's 84% of the people, and it was 79 last year,


00:19:21.500 --> 00:19:23.700
so when the PSF conducted the survey.


00:19:23.700 --> 00:19:25.500
The other big thing to talk about maybe


00:19:25.500 --> 00:19:28.220
is what do you use Python for?


00:19:28.220 --> 00:19:32.380
And the number one thing is data analysis, and then


00:19:32.380 --> 00:19:34.660
web development, and then machine learning.


00:19:34.660 --> 00:19:37.040
That sounds like a lot of data science and probably a lot


00:19:37.040 --> 00:19:39.700
of Jupyter stuff happening between those top three, right?


00:19:39.700 --> 00:19:42.180
And also, one of the things that's cool about this survey


00:19:42.180 --> 00:19:43.840
is now they've been doing it for years,


00:19:43.840 --> 00:19:46.920
have a comparison, like a sort of a trend predictor.


00:19:46.920 --> 00:19:50.360
Is the derivative positive or negative on this trend here?


00:19:50.360 --> 00:19:54.000
And so I put those numbers down for 2018 and 2017.


00:19:54.000 --> 00:19:56.420
So for data analysis, it's 59% of the people


00:19:56.420 --> 00:20:00.240
now use that for data analysis, use Python for data analysis.


00:20:00.240 --> 00:20:01.600
That's up 8%.


00:20:01.600 --> 00:20:03.200
And it's above web development.


00:20:03.200 --> 00:20:04.820
So you might think it's a zero sum game,


00:20:04.820 --> 00:20:06.320
like more people are not doing web


00:20:06.320 --> 00:20:08.200
and now they're doing data science.


00:20:08.200 --> 00:20:10.520
But no, like web development's up 2%,


00:20:10.520 --> 00:20:13.640
machine learning is up 7% to your R comment and all that,


00:20:13.640 --> 00:20:14.600
Right?


00:20:14.600 --> 00:20:16.240
So, pretty interesting.


00:20:16.240 --> 00:20:17.480
And the other thing they let you do


00:20:17.480 --> 00:20:20.960
is they let you ask four people who answered this question,


00:20:20.960 --> 00:20:22.560
let's partition their answers


00:20:22.560 --> 00:20:24.360
by whether Python is their main language


00:20:24.360 --> 00:20:26.440
or it's just kind of a secondary thing they do.


00:20:26.440 --> 00:20:27.420
Right? - Oh, okay.


00:20:27.420 --> 00:20:29.080
- The main takeaway of this section


00:20:29.080 --> 00:20:31.480
is that web development is the only category


00:20:31.480 --> 00:20:35.840
with a large gap separating main users of Python


00:20:35.840 --> 00:20:36.720
versus secondary ones.


00:20:36.720 --> 00:20:39.160
Like 56 versus 36%.


00:20:39.160 --> 00:20:42.200
20% difference depending on how you use Python.


00:20:42.200 --> 00:20:43.960
All the other ones are pretty similar.


00:20:43.960 --> 00:20:44.800
- Okay.


00:20:44.800 --> 00:20:45.620
- Across us too, yeah.


00:20:45.620 --> 00:20:47.080
- Yeah, I wanna point out a couple other things.


00:20:47.080 --> 00:20:47.920
- Okay.


00:20:47.920 --> 00:20:51.840
- From the survey, 93% say that they're involved


00:20:51.840 --> 00:20:55.360
with software testing or writing automated tests.


00:20:55.360 --> 00:20:56.200
So--


00:20:56.200 --> 00:20:57.020
- That's pretty cool, right?


00:20:57.020 --> 00:20:57.860
- That's awesome.


00:20:57.860 --> 00:21:00.440
Or at least maybe that's professional versus hobby.


00:21:00.440 --> 00:21:01.520
I don't know.


00:21:01.520 --> 00:21:02.360
Yeah, anyway.


00:21:02.360 --> 00:21:03.180
- Yeah, but it's quite high.


00:21:03.180 --> 00:21:05.560
And they said, they ask you which test frameworks you're


00:21:05.560 --> 00:21:06.520
using.


00:21:06.520 --> 00:21:08.840
For test framework, pytest is number one.


00:21:08.840 --> 00:21:09.680
- Of course.


00:21:09.680 --> 00:21:11.760
- So that, of course, that's pretty cool.


00:21:11.760 --> 00:21:14.460
Another one that's interesting is kind of like last year,


00:21:14.460 --> 00:21:17.740
they said sort of scientific computing,


00:21:17.740 --> 00:21:20.100
data-oriented, like data analysis,


00:21:20.100 --> 00:21:22.260
machine learning, whatnot.


00:21:22.260 --> 00:21:24.180
How does that compare to web development?


00:21:24.180 --> 00:21:27.300
And it's now 27% web development,


00:21:27.300 --> 00:21:29.700
28% scientific development, they call it.


00:21:29.700 --> 00:21:31.880
It's like data science plus machine learning.


00:21:31.880 --> 00:21:35.540
Also, Python versus legacy Python, super good news here.


00:21:35.540 --> 00:21:39.580
Of the surveyed folks, 84% are using Python 3


00:21:39.580 --> 00:21:41.460
versus 16 for legacy Python.


00:21:41.460 --> 00:21:43.140
- Yeah, that's awesome.


00:21:43.140 --> 00:21:45.420
- That's really good, and it also is growing very rapidly.


00:21:45.420 --> 00:21:48.060
So like 9% more people are using modern Python,


00:21:48.060 --> 00:21:49.380
which is great.


00:21:49.380 --> 00:21:52.020
Web Frameworks, Flask is now the most popular


00:21:52.020 --> 00:21:53.340
web framework on the survey.


00:21:53.340 --> 00:21:54.340
Django was last year.


00:21:54.340 --> 00:21:55.300
- Yeah, that's interesting.


00:21:55.300 --> 00:21:57.060
Yeah, but they're still really close.


00:21:57.060 --> 00:21:58.620
- They're neck and neck for sure.


00:21:58.620 --> 00:22:00.020
Then he goes Tornado and then Pyramid,


00:22:00.020 --> 00:22:02.900
and then Databases, Postgres, MySQL, SQLite.


00:22:02.900 --> 00:22:04.420
Those are the top three relational,


00:22:04.420 --> 00:22:08.280
and then MongoDB is tailing along in the NoSQL bit.


00:22:08.280 --> 00:22:10.980
And then ORMs, SQLAlchemy and Django ORM


00:22:10.980 --> 00:22:12.740
are tied for that.


00:22:12.740 --> 00:22:14.860
Anyway, a bunch of, like, that's just skimming the service.


00:22:14.860 --> 00:22:16.740
There's a ton of cool little interactive bits


00:22:16.740 --> 00:22:18.020
you can go explore the survey with.


00:22:18.020 --> 00:22:19.500
- Yeah, wow, neat.


00:22:19.500 --> 00:22:20.980
- Yeah, so good stuff.


00:22:20.980 --> 00:22:22.860
And yeah, people should go check it out.


00:22:22.860 --> 00:22:24.740
Of course, the links in the show notes.


00:22:24.740 --> 00:22:26.380
All right, Brian, you got anything else you wanna share


00:22:26.380 --> 00:22:28.260
that's not one of our main topics?


00:22:28.260 --> 00:22:31.900
- Yeah, Nina mentioned to us, you can pronounce her name,


00:22:31.900 --> 00:22:33.260
but I have trouble with this.


00:22:33.260 --> 00:22:34.080
- Zacharina?


00:22:34.080 --> 00:22:34.920
- Yeah.


00:22:34.920 --> 00:22:35.760
- Zacharinko?


00:22:35.760 --> 00:22:37.220
- She hit us up and said,


00:22:37.220 --> 00:22:39.180
"If we could plug this, it'd be great.


00:22:39.180 --> 00:22:42.940
Mentored sprints for diverse beginners are something that's at PyCon.


00:22:42.940 --> 00:22:45.660
I don't know if they've always been a thing, but that's something


00:22:45.660 --> 00:22:47.460
that's available this year.


00:22:47.460 --> 00:22:51.340
It's a newcomer's introduction to contributing to an open source project.


00:22:51.340 --> 00:22:53.060
And we have a link in the show notes.


00:22:53.060 --> 00:22:53.660
Yeah, cool.


00:22:53.660 --> 00:22:54.940
You do have to both.


00:22:54.940 --> 00:22:58.700
There's a call for applications, both for projects and for participants.


00:22:58.700 --> 00:23:02.500
That's open until March 14th and a highlight.


00:23:02.500 --> 00:23:05.420
If you're wondering if this event is for you, it definitely is.


00:23:05.420 --> 00:23:07.380
And we'd love to have you take part of it.


00:23:07.380 --> 00:23:08.520
So that's a neat thing.


00:23:08.540 --> 00:23:14.740
Yeah, it'll take place on Saturday, May 4th from 2.30 to 6.30 at the main PyCon.


00:23:14.740 --> 00:23:15.540
So that's cool.


00:23:15.540 --> 00:23:16.740
Yeah, that's a great thing.


00:23:16.740 --> 00:23:18.240
I'm glad we get a chance to highlight it.


00:23:18.240 --> 00:23:18.540
All right.


00:23:18.540 --> 00:23:19.140
All right.


00:23:19.140 --> 00:23:20.240
Do you got a joke for us?


00:23:20.240 --> 00:23:21.140
I don't have a joke.


00:23:21.140 --> 00:23:22.240
All right, I grabbed one.


00:23:22.240 --> 00:23:26.340
This one plays a little better in cartoon form, but I'm going to try it in audio.


00:23:26.340 --> 00:23:27.340
OK.


00:23:27.340 --> 00:23:32.840
So if you have some pseudocode in like a sample.txt file or something like that,


00:23:32.840 --> 00:23:35.140
what's the easiest way to convert that to Python?


00:23:35.140 --> 00:23:35.740
I don't know.


00:23:35.740 --> 00:23:36.340
How?


00:23:36.340 --> 00:23:38.140
You change the extension to .py.


00:23:38.140 --> 00:23:40.300
[LAUGHTER]


00:23:40.300 --> 00:23:42.340
It's for some reason, the pseudocode


00:23:42.340 --> 00:23:44.140
is very similarly written to Python.


00:23:44.140 --> 00:23:46.900
And of course, it speaks to Python's readability, right?


00:23:46.900 --> 00:23:49.100
So maybe you got to throw a colon in there somewhere,


00:23:49.100 --> 00:23:50.220
but yeah, pretty much.


00:23:50.220 --> 00:23:51.340
And I have an extra.


00:23:51.340 --> 00:23:52.980
I actually have two extras for you.


00:23:52.980 --> 00:23:55.260
The first one is this Python song.


00:23:55.260 --> 00:23:58.620
And it takes a bunch of modern songs,


00:23:58.620 --> 00:24:01.580
and it converts them into learning chapters.


00:24:01.580 --> 00:24:03.860
So you learn things like you learn about Python basics,


00:24:03.860 --> 00:24:05.480
like looping and variables.


00:24:05.480 --> 00:24:06.740
You learn about classes.


00:24:06.740 --> 00:24:08.380
you learn about web design.


00:24:08.380 --> 00:24:10.540
So there's like a little different song for each one.


00:24:10.540 --> 00:24:14.100
It's these folks somewhere, like Sweden or Norway


00:24:14.100 --> 00:24:16.660
or somewhere like that, I can't remember, maybe Denmark.


00:24:16.660 --> 00:24:19.020
And they put together this really funny


00:24:19.020 --> 00:24:23.580
like six and a half minute set of little songs


00:24:23.580 --> 00:24:24.860
all put together into chapters.


00:24:24.860 --> 00:24:26.140
And it's all about Python.


00:24:26.140 --> 00:24:28.260
- I'm totally gonna subject my daughter to this.


00:24:28.260 --> 00:24:29.940
- Yeah, yeah, it's pretty funny.


00:24:29.940 --> 00:24:32.460
And then I'll throw one more in there really quick for you.


00:24:32.460 --> 00:24:34.460
Speaking of daughters, my daughter literally sent this in


00:24:34.460 --> 00:24:35.900
like about an hour ago.


00:24:35.900 --> 00:24:37.820
And speaking of all the data analysis


00:24:37.820 --> 00:24:40.500
and data science folks, I think this one might resonate.


00:24:40.500 --> 00:24:42.980
I'll let you be the judge.


00:24:42.980 --> 00:24:46.160
So an infinite number of mathematicians walk into a bar.


00:24:46.160 --> 00:24:48.820
The first one tells the bartender he wants a beer.


00:24:48.820 --> 00:24:51.040
The second one tells the bartender he wants half a beer.


00:24:51.040 --> 00:24:53.460
The third one says she wants a fourth of a beer.


00:24:53.460 --> 00:24:56.140
The bartender interrupts and puts two beers on the table


00:24:56.140 --> 00:24:58.380
and says, "People, you really need to learn your limits."


00:24:58.380 --> 00:25:00.620
(laughing)


00:25:00.620 --> 00:25:03.540
- Okay, that's funny.


00:25:03.540 --> 00:25:04.380
- It's pretty good, right?


00:25:04.380 --> 00:25:05.220
- Yeah, definitely.


00:25:05.220 --> 00:25:06.220
Pretty good.


00:25:06.220 --> 00:25:07.220
All right.


00:25:07.220 --> 00:25:08.220
Super.


00:25:08.220 --> 00:25:09.220
Okay.


00:25:09.220 --> 00:25:11.220
Well, Brian, these joke segments always make me smile.


00:25:11.220 --> 00:25:12.220
Yeah, definitely.


00:25:12.220 --> 00:25:13.220
Yeah.


00:25:13.220 --> 00:25:14.700
Thanks for doing the episode as always.


00:25:14.700 --> 00:25:15.700
All right.


00:25:15.700 --> 00:25:16.700
Thank you.


00:25:16.700 --> 00:25:17.700
Yep.


00:25:17.700 --> 00:25:18.700
And I guess we will see everyone at PyCascades, right?


00:25:18.700 --> 00:25:19.700
Oh, yeah.


00:25:19.700 --> 00:25:20.700
That will be the next thing.


00:25:20.700 --> 00:25:21.700
This week.


00:25:21.700 --> 00:25:22.700
Yeah.


00:25:22.700 --> 00:25:23.700
We head out in like three days or something like that for the conference.


00:25:23.700 --> 00:25:26.260
So if you're going to be there, hopefully we'll get a chance to meet you.


00:25:26.260 --> 00:25:28.260
Otherwise, see you some other place.


00:25:28.260 --> 00:25:29.260
All right.


00:25:29.260 --> 00:25:30.260
Bye.


00:25:30.260 --> 00:25:31.260
Bye.


00:25:31.260 --> 00:25:32.260
Thank you for listening to Python Bytes.


00:25:32.260 --> 00:25:33.820
Follow the show on Twitter via @PythonBytes.


00:25:33.820 --> 00:25:40.700
Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm. If you have a news


00:25:40.700 --> 00:25:45.420
item you want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout


00:25:45.420 --> 00:25:50.700
for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank


00:25:50.700 --> 00:25:53.820
you for listening and sharing this podcast with your friends and colleagues.

