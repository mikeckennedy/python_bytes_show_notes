
00:00:00.000 --> 00:00:05.760
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:05.760 --> 00:00:10.320
279 recorded on lucky April 13th


00:00:10.320 --> 00:00:15.080
2022 I'm Michael Kennedy and I'm Brian Okken and I'm Brian skin


00:00:15.080 --> 00:00:19.480
Hello Brian's great to have you. Hello. Singular Michael


00:00:19.480 --> 00:00:24.300
Great brands think alike. That's right. That's the same


00:00:25.400 --> 00:00:32.640
Brian Skin, welcome. It's great to have you here. You've you are now completing the trifecta of podcasts. I understand. Yes indeed


00:00:32.640 --> 00:00:37.920
I was on a panel for talk Python and an episode of testing code a little while back and


00:00:37.920 --> 00:00:40.680
Excited to be here for a Python bites


00:00:40.680 --> 00:00:45.320
Yes, you've been a big contributor in terms of sending topics our way


00:00:45.320 --> 00:00:51.000
So it's only fitting that you're here tell people real quick about yourself before we jump in the topics. Sure


00:00:51.000 --> 00:00:54.580
I'm a chemical engineer by training. I am NOT actually a software dev by day


00:00:55.280 --> 00:00:57.280
I have a PhD in chemical engineering.


00:00:57.280 --> 00:00:59.840
I've been working for the last 10 years or so


00:00:59.840 --> 00:01:02.200
at a company here in Dayton, Ohio, Faraday Technology,


00:01:02.200 --> 00:01:04.960
working on electrochemical process R&D.


00:01:04.960 --> 00:01:08.120
So there's a lot of science there,


00:01:08.120 --> 00:01:10.660
some programming, mostly for data analysis,


00:01:10.660 --> 00:01:11.500
things like that.


00:01:11.500 --> 00:01:14.400
But I also have done quite a bit of Python on the side


00:01:14.400 --> 00:01:18.000
in documentation area and various things like that.


00:01:18.000 --> 00:01:20.040
So, cool.


00:01:20.040 --> 00:01:21.480
- Chemical engineering is pretty awesome.


00:01:21.480 --> 00:01:22.680
And it's great to have someone here


00:01:22.680 --> 00:01:24.880
who's not a straight software developer.


00:01:24.880 --> 00:01:28.040
We get a lot of myopic views,


00:01:28.040 --> 00:01:30.100
and I think you'll have some interesting perspectives.


00:01:30.100 --> 00:01:31.000
>> Hope so.


00:01:31.000 --> 00:01:33.360
>> Yeah, I hope so as well, I'm sure.


00:01:33.360 --> 00:01:35.120
Now, before we kick this off,


00:01:35.120 --> 00:01:37.320
I want to say this episode is brought to you by Datadog.


00:01:37.320 --> 00:01:40.060
Check them out at pythonbytes.fm/datadog.


00:01:40.060 --> 00:01:42.120
We'll talk more about them later.


00:01:42.120 --> 00:01:45.280
Right now, Brian, maybe we could talk about f-strings. What do you think?


00:01:45.280 --> 00:01:47.600
>> Yeah. I mean, I love f-strings.


00:01:47.600 --> 00:01:51.680
Use them all the time, but I really thought it was cool.


00:01:51.680 --> 00:01:53.060
There were a couple of new resources


00:01:53.060 --> 00:01:56.000
that I kind of wish I had had earlier.


00:01:56.000 --> 00:01:57.820
This one, a couple, they're new.


00:01:57.820 --> 00:02:00.960
So we've got from Florian Bruin,


00:02:00.960 --> 00:02:05.220
and he's, he's, was hugely helpful to,


00:02:05.220 --> 00:02:06.980
to getting, doing the code review,


00:02:06.980 --> 00:02:08.300
or book review and code review


00:02:08.300 --> 00:02:10.600
and all that stuff on the pytest book.


00:02:10.600 --> 00:02:13.860
So I definitely want to shout out to him for,


00:02:13.860 --> 00:02:15.660
thank him for doing that.


00:02:15.660 --> 00:02:18.660
But, so he generated this, this Python f-strings,


00:02:18.660 --> 00:02:20.160
it's called fstrings.help.


00:02:21.160 --> 00:02:25.320
And it's just like, it's a Jupyter Notebook looking thing.


00:02:25.320 --> 00:02:28.240
I think he created it with Jupyter Notebook,


00:02:28.240 --> 00:02:30.880
but it just quickly goes through


00:02:30.880 --> 00:02:33.020
all of the formatting stuff of f-strings.


00:02:33.020 --> 00:02:35.560
And there's a little bit of explanation,


00:02:35.560 --> 00:02:39.240
but it just sort of exactly shows you,


00:02:39.240 --> 00:02:41.800
you know, what the syntax is and what the output is


00:02:41.800 --> 00:02:43.600
really concisely.


00:02:43.600 --> 00:02:47.480
This is a nice run through of the F string features.


00:02:47.480 --> 00:02:48.320
- Yeah, that's cool.


00:02:48.320 --> 00:02:50.560
It looks like if you were trying to either learn


00:02:50.560 --> 00:02:54.120
Python strings or trying to help someone learn Python strings,


00:02:54.120 --> 00:02:55.520
you could just send them this and go,


00:02:55.520 --> 00:02:57.960
here, scan this, you'll be good to go.


00:02:57.960 --> 00:03:00.960
>> What I like about it is just the terse-ness as well.


00:03:00.960 --> 00:03:05.360
This is a decent reference to bookmark for looking things up.


00:03:05.360 --> 00:03:08.440
The other thing I wanted to point out was an article called,


00:03:08.440 --> 00:03:11.640
Python F-strings are more powerful than you might think.


00:03:11.640 --> 00:03:13.960
That's exactly the gist of it.


00:03:13.960 --> 00:03:16.600
It's more discussion.


00:03:16.600 --> 00:03:20.000
It does tell you what they are,


00:03:20.000 --> 00:03:22.140
but it kind of assumes you already know.


00:03:22.140 --> 00:03:26.100
But so some really cool things like date and time formatting,


00:03:26.100 --> 00:03:30.660
using it for debugging with variable names,


00:03:30.660 --> 00:03:33.000
we've talked about that on the show,


00:03:33.000 --> 00:03:33.880
making advantage,


00:03:33.880 --> 00:03:36.380
taking advantage of string representations.


00:03:36.380 --> 00:03:38.940
There's even embedded,


00:03:38.940 --> 00:03:42.320
I didn't know you could put f-strings inside of f-strings.


00:03:42.320 --> 00:03:46.240
So there's part nested f-strings, they call it.


00:03:46.240 --> 00:03:48.640
So interesting stuff.


00:03:48.640 --> 00:03:50.080
>> Yes.


00:03:50.080 --> 00:03:51.320
>> So, yes.


00:03:51.320 --> 00:03:53.280
>> Nested f-strings, I had no idea.


00:03:53.280 --> 00:03:54.320
>> I didn't either.


00:03:54.320 --> 00:03:56.040
>> I've totally done that before.


00:03:56.040 --> 00:03:57.000
>> Really?


00:03:57.000 --> 00:04:00.120
>> Yeah, templating one thing to then template into another thing.


00:04:00.120 --> 00:04:01.840
Absolutely. It's super helpful.


00:04:01.840 --> 00:04:03.040
>> Okay. Nice.


00:04:03.040 --> 00:04:03.640
>> Very cool.


00:04:03.640 --> 00:04:04.480
>> So, yeah.


00:04:04.480 --> 00:04:08.760
>> Yeah, it's easy to forget that you can apply the standard,


00:04:08.760 --> 00:04:13.520
I guess, string.format type of operators like colon,


00:04:13.520 --> 00:04:17.280
point three F or colon comma to put digit grouping.


00:04:17.280 --> 00:04:18.740
But in f-strings, right?


00:04:18.740 --> 00:04:19.880
Because it's, I don't know,


00:04:19.880 --> 00:04:21.640
it feels more like you're working with a variable than you


00:04:21.640 --> 00:04:23.840
are with a format character.


00:04:23.840 --> 00:04:25.640
>> Short examples like this of,


00:04:25.640 --> 00:04:27.600
here's a cool thing you can do with


00:04:27.600 --> 00:04:31.120
even a well-established basic feature like that can really help people go,


00:04:31.120 --> 00:04:33.760
"Oh, hey, that's just what I need," and run with it.


00:04:33.760 --> 00:04:36.000
>> Yeah. Very nice.


00:04:36.000 --> 00:04:37.680
This is great, Brian. I love it.


00:04:37.680 --> 00:04:40.600
Now, are we ready to move on?


00:04:40.600 --> 00:04:41.520
>> Yeah, definitely.


00:04:41.520 --> 00:04:45.600
>> Cool. I want to blow your mind with this thing here.


00:04:45.600 --> 00:04:49.600
You've probably heard about Bloomberg Terminals.


00:04:49.600 --> 00:04:52.080
If you're in an investment space,


00:04:52.080 --> 00:04:54.960
like if you work at a hedge fund or an investment company,


00:04:54.960 --> 00:04:57.120
especially in Manhattan,


00:04:57.120 --> 00:04:59.080
you'll sit down and you'll see like


00:04:59.080 --> 00:05:04.640
these six monitor crazy setups that would make gamers jealous.


00:05:04.640 --> 00:05:08.280
Around them, you have to look at what is going on here.


00:05:08.280 --> 00:05:09.840
One of the tools they use a lot,


00:05:09.840 --> 00:05:19.920
it's a thing called the Bloomberg terminal that lets them look at all kinds of different visualizations and real-time instant updating things around the stock market and whatnot.


00:05:19.920 --> 00:05:32.120
That is a commercial project that, best I can tell, I mean, there's probably discounts or whatever, but it costs around $2,000 per user per month, which is a non-trivial amount of--


00:05:32.120 --> 00:05:33.360
>> That's a ton!


00:05:33.360 --> 00:05:35.360
>> Cost, right?


00:05:35.360 --> 00:05:38.360
- I mean, no wonder we're all getting


00:05:38.360 --> 00:05:39.980
like little percentages of money


00:05:39.980 --> 00:05:42.180
sucked out of our 401k retirements


00:05:42.180 --> 00:05:43.820
'cause all of those people are like paying


00:05:43.820 --> 00:05:46.340
that much money to like manage our accounts.


00:05:46.340 --> 00:05:48.260
Yeah, it's exactly.


00:05:48.260 --> 00:05:53.260
So I want to introduce you all to OpenBB at OpenBB.co.


00:05:53.260 --> 00:05:57.220
This is the equivalent thing,


00:05:57.220 --> 00:05:59.300
but several interesting aspects.


00:05:59.300 --> 00:06:00.700
One, it's open source.


00:06:00.700 --> 00:06:02.020
Two, it's free.


00:06:02.020 --> 00:06:03.460
- That's cheaper.


00:06:03.460 --> 00:06:04.300
- Cheaper.


00:06:04.300 --> 00:06:05.220
It's not necessarily the most important thing,


00:06:05.220 --> 00:06:10.220
but it also gives you access to all sorts of tools


00:06:10.220 --> 00:06:12.460
that we know and love from Python,


00:06:12.460 --> 00:06:14.460
especially on the data science side.


00:06:14.460 --> 00:06:19.100
So this open BB thing is this terminal type thing


00:06:19.100 --> 00:06:19.920
you can install.


00:06:19.920 --> 00:06:23.460
It's really got this sort of weird blend of like CLI.


00:06:23.460 --> 00:06:25.860
I know Will McGugan would be super impressed


00:06:25.860 --> 00:06:30.240
with all of its like terminal UI, it's two aspects,


00:06:30.240 --> 00:06:32.820
but then it also pops open interactive windows


00:06:32.820 --> 00:06:34.900
that are like graphs and all those kinds of things.


00:06:34.900 --> 00:06:37.180
I'll pull up some examples in a minute.


00:06:37.180 --> 00:06:39.500
So you get access, it's not just that it's free,


00:06:39.500 --> 00:06:43.060
but you get access to all the Python data science stack.


00:06:43.060 --> 00:06:45.740
And it is itself created in Python.


00:06:45.740 --> 00:06:47.340
So pretty cool.


00:06:47.340 --> 00:06:51.940
It's pretty popular, it's got 11,000 GitHub stars.


00:06:51.940 --> 00:06:54.500
And what you do is you show up at this terminal,


00:06:54.500 --> 00:06:56.540
and there's even an interactive live version,


00:06:56.540 --> 00:06:59.220
you can have dark mode or not dark mode turned on


00:06:59.220 --> 00:07:01.220
on the website, I mean, I love it.


00:07:01.220 --> 00:07:02.620
This is really a polished thing,


00:07:02.620 --> 00:07:04.980
you can type things like stocks,


00:07:04.980 --> 00:07:07.580
if you could spell stocks, you could type stocks.


00:07:07.580 --> 00:07:09.100
And it'll come up with all these ways


00:07:09.100 --> 00:07:10.340
that you could explore them.


00:07:10.340 --> 00:07:13.580
As you could type BA and it'll come and give you


00:07:13.580 --> 00:07:15.420
these things and eventually if you get to the right spot,


00:07:15.420 --> 00:07:16.780
it doesn't happen on the website,


00:07:16.780 --> 00:07:18.660
but it'll pop up these extra windows


00:07:18.660 --> 00:07:22.900
that then like let you explore things with graphs and so on.


00:07:22.900 --> 00:07:25.000
So very, very cool.


00:07:25.000 --> 00:07:30.340
Let's pull up some of the terminal things here


00:07:30.340 --> 00:07:32.260
and look at the features.


00:07:32.260 --> 00:07:33.300
Here are the features.


00:07:33.300 --> 00:07:37.220
So you can install it through its own installer.


00:07:37.220 --> 00:07:39.420
You can install it through Anaconda,


00:07:39.420 --> 00:07:42.820
or you can run a Docker image of it to get it to run.


00:07:42.820 --> 00:07:45.640
So it's sort of summary is Python-based integrated


00:07:45.640 --> 00:07:48.260
environment for investing research that leverages


00:07:48.260 --> 00:07:49.900
state-of-the-art data science tools


00:07:49.900 --> 00:07:52.020
and machine learning technology.


00:07:52.020 --> 00:07:56.000
Then navigate through over 500 different views


00:07:56.000 --> 00:07:57.620
and functionality.


00:07:57.620 --> 00:07:59.860
So here's some of the pictures that we can look at


00:07:59.860 --> 00:08:03.420
if you go to the product terminal and just scroll down,


00:08:03.420 --> 00:08:05.820
you can have these really cool graphs


00:08:05.820 --> 00:08:09.220
of like significant events happening along here


00:08:09.220 --> 00:08:11.620
and extra information.


00:08:11.620 --> 00:08:14.780
You can look at basically an Excel view.


00:08:14.780 --> 00:08:17.940
You can look at 3D volatility sections.


00:08:17.940 --> 00:08:21.420
You can look at sentiment analysis here.


00:08:21.420 --> 00:08:24.800
The Bitcoin rainbow chart.


00:08:24.800 --> 00:08:27.700
I don't know how to read rainbow charts,


00:08:27.700 --> 00:08:30.140
But isn't this an amazing view


00:08:30.140 --> 00:08:31.980
for something that runs in the terminal?


00:08:31.980 --> 00:08:33.100
>> This is great.


00:08:33.100 --> 00:08:34.940
>> That's astonishing.


00:08:34.940 --> 00:08:37.940
>> Yeah, it really is pretty astonishing.


00:08:37.940 --> 00:08:39.860
The things just keep coming.


00:08:39.860 --> 00:08:41.340
So if you just keep scrolling through this,


00:08:41.340 --> 00:08:44.460
there's stuff to wait to understand how is the economy doing,


00:08:44.460 --> 00:08:47.820
apply AI predictions to GDP,


00:08:47.820 --> 00:08:50.940
and all sorts of wild stuff.


00:08:50.940 --> 00:08:53.260
So it's this really crazy blend of


00:08:53.260 --> 00:08:57.960
Terminal 2e plus pop open a bunch of data science explorations.


00:08:57.960 --> 00:09:01.160
And then being Python, I'm sure you can explore it yourself.


00:09:01.160 --> 00:09:03.360
I looked at the requirements file.


00:09:03.360 --> 00:09:07.260
It's like maxed on requirements in there, let me tell you.


00:09:07.260 --> 00:09:12.560
But I think it's based on Tornado, as far as I can tell.


00:09:12.560 --> 00:09:14.560
So, and...


00:09:14.560 --> 00:09:15.360
- Yeah. - Go ahead.


00:09:15.360 --> 00:09:18.160
- Will points out it also uses Rich.


00:09:18.160 --> 00:09:20.560
- Yeah, well, it uses Rich.


00:09:20.560 --> 00:09:21.560
Very cool, thanks.


00:09:21.560 --> 00:09:22.960
- And tested with pytest.


00:09:22.960 --> 00:09:25.460
Oh my goodness, yeah, so that's awesome.


00:09:25.460 --> 00:09:27.660
Anyway, I am super impressed with this.


00:09:27.660 --> 00:09:29.260
It's an open source project


00:09:29.260 --> 00:09:30.660
based on Python


00:09:30.660 --> 00:09:33.360
for democratizing a lot of these things.


00:09:33.360 --> 00:09:34.560
And


00:09:34.560 --> 00:09:35.860
if that wasn't enough,


00:09:35.860 --> 00:09:37.860
I think here's one more sort of


00:09:37.860 --> 00:09:39.860
side story that I think is interesting.


00:09:39.860 --> 00:09:42.660
So I'm sure you two have seen


00:09:42.660 --> 00:09:44.660
you go, it's not as common as it used to be,


00:09:44.660 --> 00:09:46.160
but you go to some open source project


00:09:46.160 --> 00:09:47.660
or some application and it says


00:09:47.660 --> 00:09:51.160
buy us a coffee, help make that next feature happen.


00:09:51.160 --> 00:09:54.480
This one has a different banner at the top instead of coffee.


00:09:54.480 --> 00:09:58.560
It says, "We've just landed our $8.5 million seed funding round,


00:09:58.560 --> 00:10:00.520
and we're about ready to get started."


00:10:00.520 --> 00:10:03.680
I mean, that's some kind of crushing it for open source, isn't it?


00:10:03.680 --> 00:10:04.000
>> Yeah.


00:10:04.000 --> 00:10:04.720
>> Definitely.


00:10:04.720 --> 00:10:06.240
>> That's a lot of coffee.


00:10:06.240 --> 00:10:10.000
>> That's all. They're going to be so jittery.


00:10:10.000 --> 00:10:13.040
>> Just like the stock prices.


00:10:13.040 --> 00:10:15.720
>> Exactly. Look, so much fluctuation.


00:10:15.720 --> 00:10:17.720
Oh, no, no, that's just me. It's actually very still.


00:10:17.720 --> 00:10:21.120
>> Maybe that's why stocks go up and down so rapidly.


00:10:21.120 --> 00:10:23.520
- Too many traders and too much coffee.


00:10:23.520 --> 00:10:25.920
- Yeah, that's probably actually true.


00:10:25.920 --> 00:10:28.620
Anyway, I think this is a really cool Python application.


00:10:28.620 --> 00:10:31.320
It looks well done and it looks pretty modern.


00:10:31.320 --> 00:10:33.360
And yeah, it just looks like a neat way


00:10:33.360 --> 00:10:35.800
to apply some data science to investing.


00:10:35.800 --> 00:10:37.040
- Do you have a sense of the learning curve?


00:10:37.040 --> 00:10:39.400
Like, is it mainly pointed at, you know,


00:10:39.400 --> 00:10:41.220
directed at investment professionals


00:10:41.220 --> 00:10:43.840
or is there an on-ramp for casual use?


00:10:43.840 --> 00:10:46.780
- If you look at their description,


00:10:46.780 --> 00:10:49.020
it does seem to be focused on casual,


00:10:50.220 --> 00:10:52.500
sort of a casual use case here.


00:10:52.500 --> 00:10:56.500
Let me see, it says a terminal built by the community,


00:10:56.500 --> 00:10:59.740
Chez Partes, da da da, where did I see this?


00:10:59.740 --> 00:11:01.940
Somewhere, I can't remember where I ran across it,


00:11:01.940 --> 00:11:04.880
but they do talk about sort of like individual investors


00:11:04.880 --> 00:11:09.880
getting access to the tools that the companies,


00:11:09.880 --> 00:11:12.800
the people at the big banks and hedge funds would have.


00:11:12.800 --> 00:11:15.420
So it does sort of seem to be aimed at that.


00:11:15.420 --> 00:11:17.140
My experience is it's pretty easy to use.


00:11:17.140 --> 00:11:19.980
I don't know it's easy to understand the output, right?


00:11:19.980 --> 00:11:23.260
That's more of us investing economics problem though.


00:11:23.260 --> 00:11:25.420
- That's a perpetual problem, yeah.


00:11:25.420 --> 00:11:27.420
- Yeah, indeed.


00:11:27.420 --> 00:11:28.940
All right, well, people can check this out


00:11:28.940 --> 00:11:31.060
if it sounds interesting to them.


00:11:31.060 --> 00:11:32.500
Right, Skin, what you got for us?


00:11:32.500 --> 00:11:37.500
- So my first item is PyProject.toml and PEP621


00:11:37.500 --> 00:11:41.320
for project metadata in PyProject.toml


00:11:41.320 --> 00:11:43.300
coming to setup tools.


00:11:43.300 --> 00:11:48.700
So people in Python land are gonna be pretty well familiar


00:11:48.700 --> 00:11:55.740
PyProject.toml at this point. Originally it was the PEP 517 and PEP 518 that created it


00:11:55.740 --> 00:12:01.300
and started the basics there. And then you had Black doing project configuration in there.


00:12:01.300 --> 00:12:07.380
And it's kind of been slowly snowballing over the past few years. And one of the big pushes


00:12:07.380 --> 00:12:15.060
of PEP 621, you know, who's who of Python packaging authors here, was trying to standardize


00:12:15.060 --> 00:12:21.300
project metadata and also standardize it in a way that the metadata could be specified


00:12:21.300 --> 00:12:25.860
statically because that, you know, for things to get uploaded to PyPI, if you want to have


00:12:25.860 --> 00:12:31.300
information about dependencies or various other things like that, if you have the metadata


00:12:31.300 --> 00:12:36.860
specified statically, it's much easier to get to. You can trust it more. And so, the


00:12:36.860 --> 00:12:44.580
The PEP, it's defining how to put project metadata in PyProject.toml, how to tell the


00:12:44.580 --> 00:12:51.260
build tools like build or flit what is a static defined declaratively in the metadata and


00:12:51.260 --> 00:12:56.180
what's dynamic that is going to be provided dynamically later on.


00:12:56.180 --> 00:13:01.220
And a number of tools had implemented PyProject.toml support.


00:13:01.220 --> 00:13:03.820
Things like flit, hatch, PDM.


00:13:03.820 --> 00:13:09.980
Not poetry yet, though they're discussing it, but setup tools was still missing it.


00:13:09.980 --> 00:13:14.440
It's been an issue on the setup tools GitHub tracker for a while, and with a lot of discussion


00:13:14.440 --> 00:13:17.060
there about what it would take to bring it in.


00:13:17.060 --> 00:13:22.180
One of the big appeals of moving to this for setup tools specifically, there's been the


00:13:22.180 --> 00:13:30.780
move to try to bring static metadata in the setup.cfg, but there's some, in that discussion,


00:13:30.780 --> 00:13:37.020
some problems with the INI format because it's not structured. It doesn't have good


00:13:37.020 --> 00:13:38.420
complex data type support.


00:13:38.420 --> 00:13:41.860
>> Right. Nesting and embedded things don't work.


00:13:41.860 --> 00:13:49.660
>> Yeah. INI has no sense of an array. So, if you had a setup.cfg with an array in it,


00:13:49.660 --> 00:13:54.660
setup tools actually had to take that as a string representation of an array and then


00:13:54.660 --> 00:14:01.260
it by executing it basically instead of the toml where it actually knows it as a an array


00:14:01.260 --> 00:14:07.940
in a table. But in any event, Anderson Brattle Harry has just within the last month or so


00:14:07.940 --> 00:14:17.240
I think it was finished an experimental implementation of PEP 621 in setup tools. There was a discuss


00:14:17.240 --> 00:14:23.660
thread seeking feedback from the community, try it out, report bugs. I tried it on one


00:14:23.660 --> 00:14:27.980
of my projects and it mostly worked. I actually turned up a bug that Anderson fixed super


00:14:27.980 --> 00:14:35.100
quickly where I do dynamic long description, which turns into the readme for the PyPI page.


00:14:35.100 --> 00:14:38.180
>> Right. Do you mean you read it out of a text file or something?


00:14:38.180 --> 00:14:43.180
>> So what I have is I've got documentation links in my readme that point into the main


00:14:43.180 --> 00:14:48.320
branch. But when I do a build to PyPI to do a release, I want it to point to an archival


00:14:48.320 --> 00:14:55.360
version of the docs on read the docs. And so I dynamically do a replace on the docs


00:14:55.360 --> 00:14:56.960
branch for those links.


00:14:56.960 --> 00:15:00.320
>> Well, aren't you a special butterfly?


00:15:00.320 --> 00:15:08.920
>> I have complicated needs. I'm sorry. But, you know, so I have that set up and it broke


00:15:08.920 --> 00:15:14.800
and I reported it and he fixed it. So as far as I can tell, you know, it may be experimental


00:15:14.800 --> 00:15:22.200
and it probably will change, especially some of the issues around specifying dynamic metadata.


00:15:22.200 --> 00:15:29.500
But it's at least working reasonably. And so, check it out. If you're using setup tools,


00:15:29.500 --> 00:15:38.000
take a look at switching over to that. He made a tool that can convert setup.cfg to


00:15:38.000 --> 00:15:45.140
pyproject.toml. The project is ini2toml. And there's some others. You can check the show


00:15:45.140 --> 00:15:47.400
notes. I've got a number of things listed there.


00:15:47.400 --> 00:15:52.600
Yeah, very cool. I suspect that ini2toml might be more generally useful, actually.


00:15:52.600 --> 00:15:58.280
I think that's why he titled it that way instead of, you know, setup.cfg to toml or whatever.


00:15:58.280 --> 00:15:59.280
Right.


00:15:59.280 --> 00:16:00.280
So, hmm.


00:16:00.280 --> 00:16:04.600
Cool. Yeah, this is great. More progress on the pyproject.toml stuff.


00:16:04.600 --> 00:16:05.600
Definitely.


00:16:05.600 --> 00:16:08.200
Very cool. Now, before we move on,


00:16:08.200 --> 00:16:11.200
let me tell you all about our sponsor this week, Datadog.


00:16:11.200 --> 00:16:13.860
They've been supporting the show for a really, really long time.


00:16:13.860 --> 00:16:15.440
Datadog is great.


00:16:15.440 --> 00:16:17.660
They have a real-time monitoring platform


00:16:17.660 --> 00:16:22.700
that unifies metrics, traces, and logs into one integrated system.


00:16:22.700 --> 00:16:26.040
Their APM empowers developers and teams


00:16:26.040 --> 00:16:28.380
to identify anomalies and resolve issues


00:16:28.380 --> 00:16:30.800
and improve application performance.


00:16:30.800 --> 00:16:32.960
So you can begin collecting stack traces


00:16:32.960 --> 00:16:34.640
and visualizing them as flame graphs


00:16:34.640 --> 00:16:40.240
and organizing them into profile types such as CPU or IO types of reports.


00:16:40.240 --> 00:16:45.240
Teams can search for specific profiles and correlate them into distributed traces


00:16:45.240 --> 00:16:49.640
and identify slow or underperforming code for later analysis and optimization.


00:16:49.640 --> 00:16:52.840
And with Datadog's APM Live Search, you can perform searches


00:16:52.840 --> 00:16:58.640
across the full stream of ingest traces of your app over the last 15 minutes.


00:16:58.640 --> 00:17:01.140
Like, I need to figure out what the database is doing


00:17:01.140 --> 00:17:03.940
and the API and the front end and all those things.


00:17:04.540 --> 00:17:07.760
So try them for free with a 14-day free trial


00:17:07.760 --> 00:17:10.240
and Datadog will send you a free t-shirt.


00:17:10.240 --> 00:17:12.680
So just check them out and support the show


00:17:12.680 --> 00:17:15.400
by visiting pythonbytes.fm/datadog


00:17:15.400 --> 00:17:17.740
or just click the link in your podcast player show notes


00:17:17.740 --> 00:17:18.580
to get started.


00:17:18.580 --> 00:17:19.400
- Nice.


00:17:19.400 --> 00:17:20.240
- Indeed.


00:17:20.240 --> 00:17:21.440
All right.


00:17:21.440 --> 00:17:23.160
Ryan, what do you got next?


00:17:23.160 --> 00:17:24.040
- I've got Git.


00:17:24.040 --> 00:17:26.800
So this isn't necessarily Python only related,


00:17:26.800 --> 00:17:31.800
but I use Git a lot and I didn't know you could do


00:17:31.800 --> 00:17:33.520
auto-correct with Git.


00:17:33.520 --> 00:17:35.840
This is Wayland Walker,


00:17:35.840 --> 00:17:40.240
I think he's submitted other things to us on the show.


00:17:40.240 --> 00:17:42.840
But he wrote this article called Configure Git to


00:17:42.840 --> 00:17:49.880
autocorrect your fat fingers or just your sloppy typing.


00:17:49.880 --> 00:17:54.080
Let's say you do git checkout dev,


00:17:54.080 --> 00:17:58.460
but you spell checkout C-H-E-K-O-U-T and misspell it.


00:17:58.460 --> 00:18:01.760
Well, Git will tell you that you did it wrong


00:18:01.760 --> 00:18:06.520
It guesses what you meant and tells you,


00:18:06.520 --> 00:18:08.640
says a similar command is this.


00:18:08.640 --> 00:18:12.320
But there's a configuration option that I didn't know about


00:18:12.320 --> 00:18:15.680
called help.autocorrect that you can set a timeout,


00:18:15.680 --> 00:18:19.760
and it just automatically runs the command it thinks you want it.


00:18:19.760 --> 00:18:25.360
I'm playing with it and so far it hasn't got anything wrong.


00:18:25.360 --> 00:18:27.940
I've set it to one second also,


00:18:27.940 --> 00:18:30.760
but you can set it to things like 10 seconds or I don't know.


00:18:30.760 --> 00:18:31.600
why you'd want to have it.


00:18:31.600 --> 00:18:33.900
- Did you mean RM-RF?


00:18:33.900 --> 00:18:34.740
(laughing)


00:18:34.740 --> 00:18:36.160
Applying.


00:18:36.160 --> 00:18:38.640
- Just get commands, it's not everything.


00:18:38.640 --> 00:18:41.080
- Formatting hard drive.


00:18:41.080 --> 00:18:42.720
- So get reset-hard.


00:18:42.720 --> 00:18:43.880
(laughing)


00:18:43.880 --> 00:18:47.480
- Oh yeah, that one actually would be kind of destructive.


00:18:47.480 --> 00:18:48.720
- That would be bad.


00:18:48.720 --> 00:18:52.680
- But I, so I realized that I added this to my workflow,


00:18:52.680 --> 00:18:54.680
but I realized that I hadn't really talked


00:18:54.680 --> 00:18:56.520
about my workflow at all on my blog.


00:18:56.520 --> 00:18:59.840
So I went ahead and just showed the things


00:18:59.840 --> 00:19:02.080
that I do normally for a quick change.


00:19:02.080 --> 00:19:04.980
I usually check out main, do a poll,


00:19:04.980 --> 00:19:08.840
then create a branch with checkout-b.


00:19:08.840 --> 00:19:13.840
And then I usually do commit-a-m with a message.


00:19:13.840 --> 00:19:19.220
I wanna talk about that one a little bit, the -a,


00:19:19.220 --> 00:19:23.920
and then also push because I want that to be faster.


00:19:23.920 --> 00:19:28.920
So the -a, what that does is, that's the push.


00:19:29.660 --> 00:19:31.540
Anyway, I got these backwards.


00:19:31.540 --> 00:19:33.940
Anyway, the -a will just say,


00:19:33.940 --> 00:19:38.060
instead of having to stage a file or add them,


00:19:38.060 --> 00:19:40.620
so normally you have to add your changes


00:19:40.620 --> 00:19:42.580
and then you commit them.


00:19:42.580 --> 00:19:44.300
But I just wanna,


00:19:44.300 --> 00:19:47.140
usually just wanna commit everything that I've changed


00:19:47.140 --> 00:19:48.540
or delete it also.


00:19:48.540 --> 00:19:50.460
If I delete something, I want that to change.


00:19:50.460 --> 00:19:52.020
So the -a does that.


00:19:52.020 --> 00:19:53.820
I just learned about that recently.


00:19:53.820 --> 00:19:54.660
- Oh, interesting.


00:19:54.660 --> 00:19:57.460
So you can basically skip the git add dot


00:19:57.460 --> 00:19:58.680
or something equivalent to that


00:19:58.680 --> 00:19:59.680
the get add file names.


00:19:59.680 --> 00:20:00.880
>> Right. The add.


00:20:00.880 --> 00:20:02.540
is a little dangerous because it'll add


00:20:02.540 --> 00:20:04.560
the unstaged stuff too.


00:20:04.560 --> 00:20:07.480
If you have temporary files or just play,


00:20:07.480 --> 00:20:08.880
you get a test file or


00:20:08.880 --> 00:20:11.000
a goofy file that you're just playing out with.


00:20:11.000 --> 00:20:12.400
I don't want to add that stuff.


00:20:12.400 --> 00:20:16.400
I intentionally add things that I want.


00:20:16.400 --> 00:20:19.360
I mean, add, what's the other one?


00:20:19.360 --> 00:20:23.040
Uncommitted things, I don't usually want to add that.


00:20:23.040 --> 00:20:26.040
The -a is nice that it doesn't do that.


00:20:26.040 --> 00:20:30.720
Then the last thing that I did was there's


00:20:30.720 --> 00:20:36.960
another configuration change of global push.default current.


00:20:36.960 --> 00:20:42.720
Weird, but what this does is that there's a bunch of values for that.


00:20:42.720 --> 00:20:44.400
I'm going to have a link to the other show notes,


00:20:44.400 --> 00:20:50.060
and the documentation about all the different values in the show notes.


00:20:50.060 --> 00:20:55.340
But I like current because what that says is the branch name I'm using now,


00:20:55.340 --> 00:21:00.020
just make that the one online or upstream.


00:21:00.020 --> 00:21:01.500
If you don't do that, it says,


00:21:01.500 --> 00:21:03.820
"Oh, there's no upstream named this branch,


00:21:03.820 --> 00:21:05.500
and you have to do this."


00:21:05.500 --> 00:21:08.060
I'm like, "Okay." You can do it with push.


00:21:08.060 --> 00:21:11.380
You can do a -u in push to make it automatically do that,


00:21:11.380 --> 00:21:14.780
but it's just verbose and I always wanted to do that.


00:21:14.780 --> 00:21:19.100
Anyway, that's my new Git workflow for simple stuff.


00:21:19.100 --> 00:21:20.540
>> I love it. Very nice.


00:21:20.540 --> 00:21:23.100
>> Yeah. I really like that current.


00:21:23.100 --> 00:21:27.100
Having to do all that extra typing even with auto complete is just annoying.


00:21:27.100 --> 00:21:29.100
Yeah.


00:21:29.100 --> 00:21:32.300
Brian S. it sounds like you use Git a lot.


00:21:32.300 --> 00:21:37.500
What's your view of source control from a chemical engineer perspective?


00:21:37.500 --> 00:21:41.700
In that ecosystem, in that environment, how do people view this kind of stuff?


00:21:41.700 --> 00:21:43.700
They don't.


00:21:43.700 --> 00:21:49.300
Basically, anyone who's familiar with


00:21:49.300 --> 00:21:52.920
With the development, you know, much development probably uses it some


00:21:52.920 --> 00:21:58.260
actually, there's a 3d physics modeling multi physics modeling tool console that just added a


00:21:58.260 --> 00:22:01.600
Source control like feature into it


00:22:01.600 --> 00:22:07.200
So it's it's starting the data reproduced ability and the the history tracking is starting to become more of a thing


00:22:07.200 --> 00:22:12.280
But yeah, it's it's very often the you know v2 v3


00:22:12.280 --> 00:22:17.960
20 20 20 v3 v5 final final final


00:22:18.440 --> 00:22:24.640
Yeah. So I mean, you know, I have, you know, I have blog posts churning about strategies


00:22:24.640 --> 00:22:32.760
for version control on data analysis code because of the reproducibility and needing


00:22:32.760 --> 00:22:39.600
to track environments precisely for reproducibility at a point in the past. And, you know, tagging


00:22:39.600 --> 00:22:45.080
commits for, you know, just like, oh, this, you know, basically every time I run the code,


00:22:45.080 --> 00:22:50.940
I need to know what the state of it was and the tooling is not that great for doing that.


00:22:50.940 --> 00:22:52.240
At least I haven't found much.


00:22:52.240 --> 00:22:54.920
So it's still evolving, I think.


00:22:54.920 --> 00:22:55.920
>> Indeed.


00:22:55.920 --> 00:22:56.920
Okay, cool.


00:22:56.920 --> 00:23:03.120
Alvaro points out at work they have a project with 6,000 lines in an INI final that INI


00:23:03.120 --> 00:23:04.980
to TML might be just what they need.


00:23:04.980 --> 00:23:08.080
That sounds like a lot.


00:23:08.080 --> 00:23:12.560
>> It definitely have to -- you have to proof them afterwards because, you know, there may


00:23:12.560 --> 00:23:15.960
maybe some stuff that doesn't translate cleanly, but yeah.


00:23:15.960 --> 00:23:17.560
- Yeah, we need a TML to INI,


00:23:17.560 --> 00:23:19.140
and if you can round trip it and it's the same,


00:23:19.140 --> 00:23:19.980
then you're good to go.


00:23:19.980 --> 00:23:22.680
(laughing)


00:23:22.680 --> 00:23:24.920
- Yeah, I don't know if that'll work.


00:23:24.920 --> 00:23:26.280
(laughing)


00:23:26.280 --> 00:23:27.160
- Keep your sanity, yeah.


00:23:27.160 --> 00:23:29.340
All right, this next one's a quick one for me,


00:23:29.340 --> 00:23:30.600
but it'll be useful for people


00:23:30.600 --> 00:23:33.920
who are working with JSON web tokens.


00:23:33.920 --> 00:23:37.600
So JSON web tokens are a thing that you can exchange


00:23:37.600 --> 00:23:41.600
with maybe a distributed login system.


00:23:41.600 --> 00:23:43.520
So instead of using like an API key


00:23:43.520 --> 00:23:45.200
that you just pass around all the time,


00:23:45.200 --> 00:23:48.320
you could say, I'm going to either share a certificate


00:23:48.320 --> 00:23:50.280
or somehow log into some other system


00:23:50.280 --> 00:23:52.280
and I'll get back this token that I can share on


00:23:52.280 --> 00:23:55.400
to other places to communicate who I am,


00:23:55.400 --> 00:23:58.120
communicate what roles or permissions


00:23:58.120 --> 00:23:59.880
I should be granted and so on.


00:23:59.880 --> 00:24:01.520
So if you work in that world,


00:24:01.520 --> 00:24:06.280
you work in a world of dealing with cryptographic signatures


00:24:06.280 --> 00:24:08.680
and picky algorithms and stuff like that.


00:24:08.680 --> 00:24:12.600
So I just wanted to give a shout out to JWT.io.


00:24:12.600 --> 00:24:15.320
So this is a place that allows you to decode,


00:24:15.320 --> 00:24:18.080
verify, and debug JWTs.


00:24:18.080 --> 00:24:18.920
It's pretty cool.


00:24:18.920 --> 00:24:20.800
So you come down here and what you do


00:24:20.800 --> 00:24:23.760
is you put in some encoded token


00:24:23.760 --> 00:24:25.420
and you say which algorithm


00:24:25.420 --> 00:24:28.180
of the encryption algorithms are using.


00:24:28.180 --> 00:24:32.600
And then what pops out is the separated JSON result


00:24:32.600 --> 00:24:33.600
that says here's the header.


00:24:33.600 --> 00:24:36.060
It says what algorithm and what type it is,


00:24:36.060 --> 00:24:38.600
what version of JWT and so on.


00:24:38.600 --> 00:24:40.360
and then what the actual data was,


00:24:40.360 --> 00:24:43.920
like this person is a subscriber, their name is John Doe.


00:24:43.920 --> 00:24:46.040
Didn't scroll it 'cause it doesn't seem to work.


00:24:46.040 --> 00:24:48.280
And then here's like the signature


00:24:48.280 --> 00:24:50.520
and whether or not the signature was verified


00:24:50.520 --> 00:24:51.520
and stuff like that.


00:24:51.520 --> 00:24:53.200
So I think that's pretty cool.


00:24:53.200 --> 00:24:57.200
You can hit share JWT and it'll just copy that


00:24:57.200 --> 00:24:59.120
and it's sitting along.


00:24:59.120 --> 00:25:00.980
But anyway, I think if you're working with this stuff,


00:25:00.980 --> 00:25:02.840
this might be pretty handy.


00:25:02.840 --> 00:25:06.080
And while you're at it, there's somewhere in here,


00:25:06.080 --> 00:25:09.640
the libraries, you can say see the JWT libraries.


00:25:09.640 --> 00:25:12.400
And let me make that smaller-ish.


00:25:12.400 --> 00:25:15.240
So the way it shows it's a little bit weird,


00:25:15.240 --> 00:25:18.240
it has the technology and then a whole bunch of checklists.


00:25:18.240 --> 00:25:19.520
And if you way go down to the bottom,


00:25:19.520 --> 00:25:21.400
you can see the actual package name.


00:25:21.400 --> 00:25:23.960
So like there's a bunch of .NET ones here,


00:25:23.960 --> 00:25:24.800
don't care about those,


00:25:24.800 --> 00:25:27.320
but the Python ones are down here and says


00:25:27.320 --> 00:25:29.400
who's created them, right?


00:25:29.400 --> 00:25:32.880
Like CMO Source or Michael Davis.


00:25:32.880 --> 00:25:37.880
And then this one's called Python Jose JW crypto or pi JW.


00:25:37.880 --> 00:25:40.840
And it shows you which algorithms are supported


00:25:40.840 --> 00:25:42.840
and how it works and so on.


00:25:42.840 --> 00:25:44.160
So I think this is pretty cool


00:25:44.160 --> 00:25:46.360
if you're gonna work with these things.


00:25:46.360 --> 00:25:48.120
What do you all think?


00:25:48.120 --> 00:25:50.320
- I don't have a lot of expertise with authentication


00:25:50.320 --> 00:25:51.880
and tokens of this sort.


00:25:51.880 --> 00:25:53.800
How is this different from something like Macaroons


00:25:53.800 --> 00:25:57.080
where it's more like a advanced cookie?


00:25:57.080 --> 00:25:59.840
Is this separate from the browser or?


00:25:59.840 --> 00:26:02.600
- This is done in several ways.


00:26:02.600 --> 00:26:07.600
I think so you can go like to a federated identity provider.


00:26:07.600 --> 00:26:12.680
So something like Auth0 or Microsoft Azure Active Directory


00:26:12.680 --> 00:26:14.440
or something like that.


00:26:14.440 --> 00:26:16.640
Or you can have your own identity provider


00:26:16.640 --> 00:26:18.800
from like identity servers,


00:26:18.800 --> 00:26:20.520
like one of these implementations.


00:26:20.520 --> 00:26:23.680
And basically it allows you to do single sign on


00:26:23.680 --> 00:26:26.880
and federated sign on across different platforms


00:26:26.880 --> 00:26:29.680
without just taking and using straight cookies.


00:26:29.680 --> 00:26:30.520
- Okay.


00:26:30.520 --> 00:26:35.960
both for APIs and for other types of apps. You can do it within an app or with an API.


00:26:35.960 --> 00:26:42.400
So like if I call an API, if I log in with me and I call an API and I want to communicate


00:26:42.400 --> 00:26:48.440
onto my identity, onto the APIs that API is calling, you know, it's like those kinds of


00:26:48.440 --> 00:26:55.840
sort of more complicated scenarios. Yeah. Gotcha. Yeah. Yeah. Anyway, JWT.io, check


00:26:55.840 --> 00:27:01.600
it out. What do you got, Brian, again? >> Okay. For my second item, I'm going to


00:27:01.600 --> 00:27:07.280
appreciate the opportunity, Michael and Brian Okken, to do a little bit of self-promotion.


00:27:07.280 --> 00:27:16.000
I have a new project I'm calling Jupyter TempVars. So, one of the really powerful things about,


00:27:16.000 --> 00:27:19.760
you know, Jupyter notebooks are great. You can do a whole lot with them. They're obviously being


00:27:19.760 --> 00:27:23.000
used everywhere, data science, scientific analysis.


00:27:23.000 --> 00:27:26.060
And one of the features of at least the Python kernel


00:27:26.060 --> 00:27:28.600
of Jupyter is that you have a global namespace


00:27:28.600 --> 00:27:29.620
that you work in.


00:27:29.620 --> 00:27:32.560
And this really adds to the power of it in some ways


00:27:32.560 --> 00:27:35.200
because everything you do in the notebook flows


00:27:35.200 --> 00:27:36.080
from one cell to another.


00:27:36.080 --> 00:27:37.440
You don't have to worry about shuttling things


00:27:37.440 --> 00:27:39.040
back and forth.


00:27:39.040 --> 00:27:42.180
But as has come up countless times here and elsewhere,


00:27:42.180 --> 00:27:44.400
you have namespace contamination problems


00:27:44.400 --> 00:27:48.640
where you accidentally assign something in one cell


00:27:48.640 --> 00:27:51.300
and then you fuck on yourself because either, you know,


00:27:51.300 --> 00:27:53.680
you use something and have a typo


00:27:53.680 --> 00:27:55.580
and accidentally use something from another cell


00:27:55.580 --> 00:27:57.460
or, you know, something's lingering on


00:27:57.460 --> 00:27:59.380
and you have the same variable name in multiple cells


00:27:59.380 --> 00:28:01.460
and all of a sudden your analysis, you know,


00:28:01.460 --> 00:28:03.360
behaves funny or it's not reproducible


00:28:03.360 --> 00:28:04.940
or you, you know, you close down for the day


00:28:04.940 --> 00:28:07.440
and start back up and the whole worksheet blows up.


00:28:07.440 --> 00:28:11.060
And so what I've put together is a,


00:28:11.060 --> 00:28:13.460
it's a notebook extension for Jupyter.


00:28:13.460 --> 00:28:15.580
It's based upon another library of mine, TempVars,


00:28:15.580 --> 00:28:18.260
which I need to freshen a bit.


00:28:18.260 --> 00:28:21.900
But this is a front-end extension for Jupyter.


00:28:21.900 --> 00:28:26.900
And so what the underlying library does is you import,


00:28:26.900 --> 00:28:29.580
from tempvars, you import the capital tempvars


00:28:29.580 --> 00:28:31.320
context manager.


00:28:31.320 --> 00:28:33.220
Then I'll just define a variable here.


00:28:33.220 --> 00:28:37.940
And then in this cell, I've got,


00:28:37.940 --> 00:28:40.560
as a context manager, tempvars, and I declare to it,


00:28:40.560 --> 00:28:42.740
all right, anything, this syntax says anything


00:28:42.740 --> 00:28:44.340
that starts with T underscore is gonna be treated


00:28:44.340 --> 00:28:45.860
as a temporary variable.


00:28:45.860 --> 00:28:47.380
And so when I run this,


00:28:47.380 --> 00:28:51.940
The first line checks to see if T_A is in the namespace,


00:28:51.940 --> 00:28:53.620
and it's not because it's inside


00:28:53.620 --> 00:28:56.940
the temporary variables context.


00:28:56.940 --> 00:28:59.740
Then I assign it, and indeed, it assigns.


00:28:59.740 --> 00:29:01.420
And then when I pop out the back end,


00:29:01.420 --> 00:29:04.340
the previous value, five, is now restored to it.


00:29:04.340 --> 00:29:06.860
So what this does is it makes sure


00:29:06.860 --> 00:29:09.540
that you don't have contamination coming into the cell,


00:29:09.540 --> 00:29:12.020
and anything you do in here is reverted


00:29:12.020 --> 00:29:14.580
to the prior state out the back end.


00:29:14.580 --> 00:29:15.660
- Oh, that's cool.


00:29:15.660 --> 00:29:17.540
Yeah, so that's using the underlying library.


00:29:17.540 --> 00:29:19.800
But what I did, it's like, you know, okay, fine, it works,


00:29:19.800 --> 00:29:21.660
but you have to have this whole thing that you type out


00:29:21.660 --> 00:29:23.080
and it's cumbersome.


00:29:23.080 --> 00:29:26.480
So what the Jupyter plugin, the Jupyter extension does


00:29:26.480 --> 00:29:31.480
is it lets you, you can turn on this toolbar for tags


00:29:31.480 --> 00:29:34.680
for each cell, and then if you define, go away.


00:29:34.680 --> 00:29:37.360
Then if you define a tag with this syntax,


00:29:37.360 --> 00:29:38.720
you can also do a temp_vars_end,


00:29:38.720 --> 00:29:41.040
but here temp_vars_start_t_,


00:29:41.040 --> 00:29:43.960
now this variable will automatically be treated


00:29:43.960 --> 00:29:45.440
as a temporary variable.


00:29:45.440 --> 00:29:48.240
it's no longer in the namespace when you execute the cell.


00:29:48.240 --> 00:29:51.040
And what it's doing behind the scenes is it's actually taking the code,


00:29:51.040 --> 00:29:54.540
patching the execute functionality for the cell,


00:29:54.540 --> 00:29:58.540
and wrapping it in a TempVars context manager behind the scenes,


00:29:58.540 --> 00:30:01.740
so that anything you use in here, T_,


00:30:01.740 --> 00:30:04.340
is a temporary variable. You don't have to worry about it


00:30:04.340 --> 00:30:07.340
getting contamination from the rest of the namespace.


00:30:07.340 --> 00:30:09.340
And then just like the other, it --


00:30:09.340 --> 00:30:11.340
- So there, yeah. - Yeah.


00:30:11.340 --> 00:30:20.340
So, it's brand new. 0.1 is out on PyPI. The readme is in order to satisfy the audience


00:30:20.340 --> 00:30:22.340
here, I have animated GIFs.


00:30:22.340 --> 00:30:26.660
>> Are those screenshots on a UI tool? I love it.


00:30:26.660 --> 00:30:33.340
>> Yeah. Animated to boot. So, readme has the user's instructions. It's on PyPI. Just


00:30:33.340 --> 00:30:38.420
a pip install, Jupyter temp vars. And then I have a shortcut script to actually install


00:30:38.420 --> 00:30:42.520
the extension into your Jupyter environment. I have a number of features that could be


00:30:42.520 --> 00:30:48.220
added to it, different things that the underlying library could have added to it. But I'd really


00:30:48.220 --> 00:30:52.820
love it if anybody who is intrigued would try it out, find and report bugs, suggest


00:30:52.820 --> 00:30:58.360
features that you want. Because, you know, it's a small thing, but it can be a big problem.


00:30:58.360 --> 00:31:01.900
And if this could be at least a partial or substantial solution for people, that would


00:31:01.900 --> 00:31:02.900
be awesome.


00:31:02.900 --> 00:31:05.980
Yeah. Yeah, nice work. This looks great.


00:31:05.980 --> 00:31:06.980
Those are good.


00:31:06.980 --> 00:31:21.060
Yeah. The, the problem of having variables shared across those things when you didn't intend them to be so tricky in so many ways. I mean, Jupyter's are like go to Jupyter cells are like go to statements with no traceability.


00:31:21.060 --> 00:31:32.060
Right. Cause it's, you could run them down, then you could go back and run the one in the middle again. And then you could go run another, like, you need to have, except for just a little in and out numbering. Like you have no idea the order they ran.


00:31:32.060 --> 00:31:35.300
Yeah. Notebook hygiene is really tricky. And yeah.


00:31:35.300 --> 00:31:38.140
Right now I'm going to feel like I cut you off.


00:31:38.140 --> 00:31:39.140
We can say something.


00:31:39.140 --> 00:31:44.380
Oh, just he commented that to satisfy us, he's got or the entire Python community has


00:31:44.380 --> 00:31:46.060
got animated GIFs.


00:31:46.060 --> 00:31:50.540
But to be fair, I, it's not just technical books and read me.


00:31:50.540 --> 00:31:53.180
So I don't use cookbooks that don't have pictures either.


00:31:53.180 --> 00:31:56.220
So, yeah, it sounds good.


00:31:56.220 --> 00:32:00.460
I do read novels that don't have pictures, but so it's not everything.


00:32:00.460 --> 00:32:03.380
I really hate there was the pictures in your head.


00:32:03.380 --> 00:32:05.780
- I really hate the graphical novels that don't have pictures.


00:32:05.780 --> 00:32:08.100
- Yeah. Those are the worst.


00:32:08.100 --> 00:32:11.460
- Those are the worst. All right. Real-time follow-up.


00:32:11.460 --> 00:32:15.060
Brandon Brainer, former co-host here, says,


00:32:15.060 --> 00:32:19.540
"This is talking about going back to YJWT over something like cookies."


00:32:19.540 --> 00:32:23.540
So imagine having something like auto zero when you log,


00:32:23.540 --> 00:32:26.260
maybe off zero, when you log in, it gives you back this JWT,


00:32:26.260 --> 00:32:30.020
which has a timeout. The front end has this.


00:32:30.020 --> 00:32:32.020
it can send it to your API.


00:32:32.020 --> 00:32:34.020
And then also it has the signature


00:32:34.020 --> 00:32:36.020
that verifies it wasn't tampered with.


00:32:36.020 --> 00:32:38.020
And you can verify


00:32:38.020 --> 00:32:40.020
the sender because you can decrypt it


00:32:40.020 --> 00:32:41.020
and stuff like that.


00:32:41.020 --> 00:32:43.020
- Okay, better chain of custody.


00:32:43.020 --> 00:32:45.020
- All that tricky


00:32:45.020 --> 00:32:47.020
cryptography stuff.


00:32:47.020 --> 00:32:49.020
Speaking of other things,


00:32:49.020 --> 00:32:51.020
extra things, you guys got


00:32:51.020 --> 00:32:53.020
some extras we should cover?


00:32:53.020 --> 00:32:55.020
- I have a few, actually, some quick ones.


00:32:55.020 --> 00:32:57.020
- Alright, bring it on.


00:32:57.020 --> 00:32:59.020
- So we've got,


00:32:59.020 --> 00:33:04.700
issues are finally live. So they're there. Python issues are now on GitHub.


00:33:04.700 --> 00:33:09.100
>> We didn't jinx it this time. >> It really is there. So enough said.


00:33:09.100 --> 00:33:15.420
I was, you know, I've used lorem ipsum before. I think everybody doing front end stuff has.


00:33:15.420 --> 00:33:22.380
But I didn't know there's a cool page like loremipsum.com that has some, a translation


00:33:22.380 --> 00:33:30.140
So you can read what it means, at least a 1,500, 1914 translation.


00:33:30.140 --> 00:33:33.020
So it's sort of an interesting read.


00:33:33.020 --> 00:33:36.220
I won't get into it here, but it's worth a read if you're curious.


00:33:36.220 --> 00:33:40.380
And then one of the things we do sometimes at the end is funny stuff.


00:33:40.380 --> 00:33:46.620
And one of the things we've covered is various O'Reilly covers.


00:33:46.620 --> 00:33:51.020
So I found this Dev2 O'Reilly cover generator.


00:33:51.020 --> 00:33:56.060
I didn't know where it was. Somebody had. Oh, nice. And you could just make up your own. So


00:33:56.060 --> 00:34:03.260
I made one up, pass it around last night. so it's kind of a fun thing. yeah, I put,


00:34:03.260 --> 00:34:06.700
I pulled that from the show notes and pass it on to my friends that they have run with it.


00:34:06.700 --> 00:34:12.140
They're delighted. 100% test coverage. You need to test with no asserts. At least CI is happy.


00:34:12.140 --> 00:34:17.100
So anyway, this is awesome. How about you got any extras?


00:34:18.700 --> 00:34:19.900
I have a few.


00:34:19.900 --> 00:34:23.400
Now, your mention made me add a third one.


00:34:23.400 --> 00:34:25.400
Or another one rather.


00:34:25.400 --> 00:34:26.900
Let's go here.


00:34:26.900 --> 00:34:30.900
So, Hipster Ipsum.


00:34:30.900 --> 00:34:32.700
If you just need a little more


00:34:32.700 --> 00:34:34.100
pizazz in that


00:34:34.100 --> 00:34:37.100
lorem ipsum, you don't want people asking questions.


00:34:37.100 --> 00:34:41.300
This is a hipsteripsum@hipsum.co.


00:34:41.300 --> 00:34:42.600
This is a generator.


00:34:42.600 --> 00:34:43.900
You can give it your flavor.


00:34:43.900 --> 00:34:45.900
So, you can go over here and say like


00:34:45.900 --> 00:34:49.900
How many paragraphs? We only need two paragraphs.


00:34:49.900 --> 00:34:53.900
And hipster neat or you can do it with a shot of Latin.


00:34:53.900 --> 00:34:57.900
And it starts out with, I'm baby, gentrified, tumbler,


00:34:57.900 --> 00:35:01.900
butcher, cronut, succulents, poor loco, subway,


00:35:01.900 --> 00:35:05.900
towel, food truck, letterpress, tote bag, tofu.


00:35:05.900 --> 00:35:09.900
- Doesn't flow quite the same as the Latin, but it works. - Yeah, exactly.


00:35:09.900 --> 00:35:13.900
You got the fashion X and all that. So anyway, that one's kind of fun.


00:35:13.900 --> 00:35:17.620
Firstly, quick shout out, worked with Christos Meskis


00:35:17.620 --> 00:35:21.860
from the Microsoft Identity Team, speaking of JWTs,


00:35:21.860 --> 00:35:23.300
and he and I just put together a course,


00:35:23.300 --> 00:35:27.300
Secure APIs with FastAPI in the Microsoft Identity Platform.


00:35:27.300 --> 00:35:30.700
So people can check that out if they wanna do JWT


00:35:30.700 --> 00:35:33.980
and other types of federated identity with FastAPI.


00:35:33.980 --> 00:35:36.580
That's a lot of fun course we just launched yesterday.


00:35:36.580 --> 00:35:38.620
- Nice, excellent, cool.


00:35:38.620 --> 00:35:39.460
- Yeah, and thanks.


00:35:39.460 --> 00:35:40.900
And then a quick shout out,


00:35:40.900 --> 00:35:44.300
Seth sent over this thing called Python Virtual ENV


00:35:44.300 --> 00:35:45.620
for Windows sorta-ish.


00:35:45.620 --> 00:35:47.700
(Seth laughs)


00:35:47.700 --> 00:35:52.260
And it's this idea to bring some of the Pi ENV


00:35:52.260 --> 00:35:54.220
virtual environment features to Windows.


00:35:54.220 --> 00:35:55.820
I haven't really played with this,


00:35:55.820 --> 00:35:59.100
but trying, I guess some of the features there


00:35:59.100 --> 00:36:01.020
for the virtual environments don't work on Windows,


00:36:01.020 --> 00:36:04.700
but his sorta plugin script does.


00:36:04.700 --> 00:36:05.980
You can check that out,


00:36:05.980 --> 00:36:09.060
which I think will be helpful for some people,


00:36:09.060 --> 00:36:10.380
for the Windows people.


00:36:10.380 --> 00:36:12.380
And that's it for my items.


00:36:12.380 --> 00:36:14.420
Brian Skin, do you got anything you want to share as well?


00:36:14.420 --> 00:36:16.300
- Yep, I've got a few quick ones.


00:36:16.300 --> 00:36:19.760
First of all, as many probably know,


00:36:19.760 --> 00:36:23.420
Eva stepped down, Jalessa stepped down


00:36:23.420 --> 00:36:26.140
as the executive director of the PSF.


00:36:26.140 --> 00:36:28.140
I believe it was at the end of last year.


00:36:28.140 --> 00:36:31.060
PSF has found their new executive director, Deb Nicholson.


00:36:31.060 --> 00:36:32.940
So, woo!


00:36:32.940 --> 00:36:34.980
Congratulations to all there.


00:36:34.980 --> 00:36:37.980
- Yeah, congratulations.


00:36:37.980 --> 00:36:42.980
Yeah, so more generally, the PSF is been hiring lately.


00:36:42.980 --> 00:36:45.340
Last year, there was the packaging project manager,


00:36:45.340 --> 00:36:47.380
Shamika Mohanan, there's the--


00:36:47.380 --> 00:36:48.860
- And the developer in residence.


00:36:48.860 --> 00:36:50.380
- Absolutely.


00:36:50.380 --> 00:36:52.700
They also, there was a posting for an infrastructure


00:36:52.700 --> 00:36:55.360
engineer to assist with the facilities that,


00:36:55.360 --> 00:36:58.720
the link now 404s, so maybe they've made their hire,


00:36:58.720 --> 00:37:02.260
I don't know, but the posting was there and now it's not.


00:37:02.260 --> 00:37:05.620
And then actually in the steering council notes released


00:37:05.620 --> 00:37:10.460
for March, there is beginnings of discussion about hiring a second developer in residence,


00:37:10.460 --> 00:37:17.140
which would be terrific. So yeah, it seems like it's been a big success. So getting someone


00:37:17.140 --> 00:37:23.820
to help Lucas out would be really great. Definitely. Two more quick things. One, PyOhio, the regional


00:37:23.820 --> 00:37:27.480
Ohio conference, the call for proposals is open. It's going to be a fully virtual conference


00:37:27.480 --> 00:37:34.140
again this year. So anybody who is interested, submit, submit, submit.


00:37:34.140 --> 00:37:38.380
>> Nice. >> And then one interesting tidbit relevant to,


00:37:38.380 --> 00:37:43.180
we have to talk about Pydantic at least once, I think, right? Along with Anthony Shaw and


00:37:43.180 --> 00:37:49.180
Will McGugan. This was a couple of days ago. Samuel Colvin of Pydantic fame posted this


00:37:49.180 --> 00:37:57.580
somewhat cryptic tweet here showing over a tenfold increase in speed for some sort of


00:37:57.580 --> 00:38:04.480
of Pydantic features here. So I don't believe the this is actually drop yet. This is all


00:38:04.480 --> 00:38:07.640
I know. But this looks pretty exciting.


00:38:07.640 --> 00:38:10.720
The magical Pydantic core is coming.


00:38:10.720 --> 00:38:11.720
Yes.


00:38:11.720 --> 00:38:14.680
Cool. I have no idea what it is, but very exciting.


00:38:14.680 --> 00:38:16.680
But I want one.


00:38:16.680 --> 00:38:21.520
Maybe it's the Pydantic pony.


00:38:21.520 --> 00:38:28.920
the pedantic unicorn. Now that's great. All right, I got no more extras, but I have some


00:38:28.920 --> 00:38:33.800
jokes. Yay. Bring on. All right. I think this first one might be from you, Brian skin. Is


00:38:33.800 --> 00:38:39.160
that right? Yeah, I can't. You want to tell us this joke here? Yeah, so it's a it's a


00:38:39.160 --> 00:38:45.000
riff off of the various elements of a business enterprise trying to bring a product to a


00:38:45.000 --> 00:38:49.080
customer that's what they actually want. You know, with the tree and the swing and the


00:38:49.080 --> 00:38:55.680
armchair swing and the swing with no ropes and that. This one is more cat directed. And


00:38:55.680 --> 00:39:00.320
the left panel says product features. And it shows this really nice multi-level cat


00:39:00.320 --> 00:39:05.240
tower with beds and scratching posts. And, you know, very attractive. And on the right,


00:39:05.240 --> 00:39:10.480
it says user needs. And it has a cat peeking up out of a cardboard box.


00:39:10.480 --> 00:39:15.040
Exactly. Slightly over designed, would you say?


00:39:15.040 --> 00:39:19.600
of it. And I think there was somebody responded that there's a tweet lower down saying, this


00:39:19.600 --> 00:39:24.200
is exactly my life. I have an untouched, you know, cat tree in the corner and all the cat


00:39:24.200 --> 00:39:29.080
sits in is the box. So this is also true for children. A lot of times the box is the best


00:39:29.080 --> 00:39:34.200
part. Definitely. All right. I brought two more for us just because they're both, they're


00:39:34.200 --> 00:39:40.320
all short and I thought this would be fun. So here's one that says, junior developer,


00:39:40.320 --> 00:39:44.640
how did you find the bug so fast? And it has the senior developer who is this sort of lion


00:39:44.640 --> 00:39:47.680
meme. I was there when it was written.


00:39:47.680 --> 00:39:51.760
Line which in the wardrobe reference there, I think.


00:39:51.760 --> 00:39:57.520
I think so. All right. And then this one really, I really appreciate this one. So there's two


00:39:57.520 --> 00:40:06.240
sort of time lapse Google search pages with text overlaid on it. And it says 831 C++ Hello World,


00:40:06.240 --> 00:40:16.720
833 alternatives to C++. And of course, it's complete with the top std colon colon c out


00:40:16.720 --> 00:40:20.880
less than less than hello world less than less than standard out colon colon end out, you know,


00:40:20.880 --> 00:40:29.760
the formal C++ style like s print out or whatever. Yeah. Hello, C++. Hello, world.


00:40:29.760 --> 00:40:31.760
alternatives to C++.


00:40:31.760 --> 00:40:33.760
I'll just leave it with that, you guys.


00:40:33.760 --> 00:40:36.760
I had one semester of C++ in college


00:40:36.760 --> 00:40:38.760
and I don't miss the compiler errors at all.


00:40:38.760 --> 00:40:39.760
No.


00:40:39.760 --> 00:40:41.760
Yeah, C++ is some wild stuff.


00:40:41.760 --> 00:40:42.760
That's half my life.


00:40:42.760 --> 00:40:43.760
I used to work in it somewhat.


00:40:43.760 --> 00:40:45.760
I did a couple of years of professional C++


00:40:45.760 --> 00:40:47.760
and it was okay, but


00:40:47.760 --> 00:40:49.760
a lot of craziness.


00:40:49.760 --> 00:40:51.760
Yeah, you don't have to use the crazy parts, though.


00:40:51.760 --> 00:40:55.760
So, at least in the embedded world, we use


00:40:55.760 --> 00:40:57.760
it's C++, but


00:40:57.760 --> 00:41:00.960
but we just selectively use the cool features.


00:41:00.960 --> 00:41:02.560
Mostly it looks like C.


00:41:02.560 --> 00:41:07.260
Yeah, I think C++ is getting a big update as well, isn't it?


00:41:07.260 --> 00:41:09.460
I think there's there's regular updates.


00:41:09.460 --> 00:41:11.460
There's so many new things coming on.


00:41:11.460 --> 00:41:16.060
It was fairly stagnant for like decades.


00:41:16.060 --> 00:41:19.560
And then, but in the last 10 years, there's been a lot of new changes.


00:41:19.560 --> 00:41:24.960
I feel like I've read people griping that they're making C++ too much like Python or something.


00:41:25.460 --> 00:41:28.580
adding I don't know exactly what that means, but, but, you know,


00:41:28.580 --> 00:41:31.240
we propose taking away the semi-colons.


00:41:31.240 --> 00:41:35.380
What too much, too much.


00:41:35.380 --> 00:41:37.700
I could definitely get rid of the curly brackets.


00:41:37.700 --> 00:41:39.540
Uh, so yeah, yeah, yeah.


00:41:39.540 --> 00:41:41.420
There's a lot of parentheses when you don't really need them.


00:41:41.420 --> 00:41:42.580
So yeah.


00:41:42.580 --> 00:41:43.260
All right.


00:41:43.260 --> 00:41:45.580
Well, Brian Auken, thank you as always.


00:41:45.580 --> 00:41:46.580
And Brian skin.


00:41:46.580 --> 00:41:47.460
Thanks for being here.


00:41:47.460 --> 00:41:48.740
Thanks.


00:41:48.740 --> 00:41:49.660
Thanks for having me.


00:41:49.660 --> 00:41:50.620
You bet.


00:41:50.620 --> 00:41:51.180
Bye everyone.

