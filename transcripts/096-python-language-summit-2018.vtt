
00:00:00.000 --> 00:00:08.640
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 96 recorded September 19th


00:00:08.640 --> 00:00:14.480
2018 I'm Michael Kennedy and I'm Brian Akin. Hey Brian. How you doing? I'm doing really good. All right, I'm doing great


00:00:14.480 --> 00:00:17.680
There's always something to talk about in the Python space and never gets boring


00:00:17.680 --> 00:00:24.160
Yeah, no, definitely doesn't and we're here bringing this to you today in part because of Digital Ocean sponsoring this episode


00:00:24.160 --> 00:00:26.440
So check them out at Python bytes at FM slash


00:00:26.680 --> 00:00:31.680
Digital Ocean and get a hundred dollars credit for some server goodies tell you more about that later.


00:00:31.680 --> 00:00:35.840
Brian you found an interesting one i don't even know what to make of it here tell us about it.


00:00:35.840 --> 00:00:43.620
I can't remember where i came across this i guess it doesn't matter there's a python library called plumbum and it's.


00:00:43.620 --> 00:00:53.820
That spelled plumbum i have no idea where they came up with that name but it's a toolbox of goodies to do shell like things in python.


00:00:53.980 --> 00:00:57.860
It says shell combinators and more i'm not sure the combinator is.


00:00:57.860 --> 00:01:07.460
Oh there was that white combinator on back to the future other than that i don't know what a combination is like the pipes between things maybe perhaps anyway.


00:01:07.460 --> 00:01:13.340
The model library and i'm read this is direct quote is never write shell scripts again.


00:01:13.520 --> 00:01:17.400
And thus it attempts to mimic the shell syntax,


00:01:17.400 --> 00:01:19.960
oh, shell combinators is shell syntax,


00:01:19.960 --> 00:01:21.800
where it makes sense while keeping all the


00:01:21.800 --> 00:01:25.320
Pythonic and cross-platform goodiness of Python.


00:01:25.320 --> 00:01:29.200
And it's kind of fun and it's one of those things,


00:01:29.200 --> 00:01:31.960
it's kind of cheating, actually, I think, but it's cool.


00:01:31.960 --> 00:01:33.440
We have an example in the show notes,


00:01:33.440 --> 00:01:36.040
but there's a bunch of examples on their website,


00:01:36.040 --> 00:01:38.080
on the readme and stuff.


00:01:38.080 --> 00:01:41.040
You can do things like chaining commands like with pipes,


00:01:41.040 --> 00:01:47.080
and there's a built-in grep and word count and head counts within this library.


00:01:47.080 --> 00:01:50.720
So if you've got a bash shell script and somebody says,


00:01:50.720 --> 00:01:52.480
"Hey, you should convert that to Python."


00:01:52.480 --> 00:01:56.580
This would take you like five minutes to convert it to Python using this.


00:01:56.580 --> 00:01:58.820
That's not necessarily a bad thing.


00:01:58.820 --> 00:02:02.000
If you know how to transform something here,


00:02:02.000 --> 00:02:04.000
you can convert it right away.


00:02:04.000 --> 00:02:07.860
Then maybe if you want to go figure out how to do that with other ways,


00:02:07.860 --> 00:02:10.780
You could, but for a lot of quick and dirty things,


00:02:10.780 --> 00:02:12.060
why not do something like this?


00:02:12.060 --> 00:02:13.180
- It looks really cool.


00:02:13.180 --> 00:02:14.940
Certainly writing Bash stuff,


00:02:14.940 --> 00:02:16.900
the more tests you have to do


00:02:16.900 --> 00:02:18.700
and the looping over things,


00:02:18.700 --> 00:02:21.300
it's just like, how do you do that in Bash again?


00:02:21.300 --> 00:02:23.080
You know, it's just, it's not so nice.


00:02:23.080 --> 00:02:25.020
But there's certainly things you can do in the shell


00:02:25.020 --> 00:02:26.700
that are painful in Python.


00:02:26.700 --> 00:02:27.540
Show me the files here.


00:02:27.540 --> 00:02:30.300
It's like, okay, well fine, we're gonna import OS


00:02:30.300 --> 00:02:32.580
and we're gonna do a lister and loop over that.


00:02:32.580 --> 00:02:33.960
Right, like LS, right?


00:02:33.960 --> 00:02:34.800
That's super easy.


00:02:34.800 --> 00:02:36.240
And this kind of brings those things together.


00:02:36.240 --> 00:02:37.080
It's really nice.


00:02:37.080 --> 00:02:38.800
- Yeah, so I've got a couple things


00:02:38.800 --> 00:02:40.160
I'm gonna throw this out right away


00:02:40.160 --> 00:02:42.160
is we're converting from,


00:02:42.160 --> 00:02:44.400
on in Jenkins you can do shell commands


00:02:44.400 --> 00:02:47.200
within like the little command steps of Jenkins,


00:02:47.200 --> 00:02:48.920
but if you're doing pipelines on Windows


00:02:48.920 --> 00:02:51.640
you can't do Bash for some reason,


00:02:51.640 --> 00:02:53.880
or I can't figure out a way to do Bash,


00:02:53.880 --> 00:02:55.040
but I can do Python.


00:02:55.040 --> 00:02:57.480
So I could write a little Python script


00:02:57.480 --> 00:03:00.380
to do the thing that I wanted to do in Bash


00:03:00.380 --> 00:03:01.220
and do it right there.


00:03:01.220 --> 00:03:02.440
So I'll try that.


00:03:02.440 --> 00:03:03.280
- Yeah, nice.


00:03:03.280 --> 00:03:04.420
So this is a really cool project


00:03:04.420 --> 00:03:06.600
and certainly if you're thinking about


00:03:06.600 --> 00:03:08.920
some kind of bash script or something like that.


00:03:08.920 --> 00:03:10.520
This is a really nice option.


00:03:10.520 --> 00:03:13.240
- Maybe I should just try to use the Linux subsystem


00:03:13.240 --> 00:03:14.680
on Windows 10 instead of.


00:03:14.680 --> 00:03:18.080
- Yeah, so if you have a problem with getting bash to work,


00:03:18.080 --> 00:03:19.820
it doesn't work on Windows, right?


00:03:19.820 --> 00:03:21.480
But you can definitely bring in


00:03:21.480 --> 00:03:24.660
the Windows 10 Linux subsystem.


00:03:24.660 --> 00:03:26.960
And obviously that's Windows 10.


00:03:26.960 --> 00:03:28.600
I'm sure that it's available


00:03:28.600 --> 00:03:31.720
on the Windows Server equivalent of Windows 10,


00:03:31.720 --> 00:03:34.440
which I honestly don't even know what version that is,


00:03:34.440 --> 00:03:36.560
but there's probably a server equivalent.


00:03:36.560 --> 00:03:38.560
that has the Linux subsystem as well.


00:03:38.560 --> 00:03:40.720
People can throw that in the show comments if they want.


00:03:40.720 --> 00:03:43.720
But there's an article by Marcus Sherman


00:03:43.720 --> 00:03:47.880
called the Windows 10 Linux subsystem for Python developers.


00:03:47.880 --> 00:03:49.600
First of all, have you heard of this


00:03:49.600 --> 00:03:51.040
Windows 10 Linux subsystem?


00:03:51.040 --> 00:03:51.880
Do you know what this is?


00:03:51.880 --> 00:03:53.960
- Yeah, I've been trying to keep an eye on it


00:03:53.960 --> 00:03:57.320
and as they make fixes to it and add features,


00:03:57.320 --> 00:03:59.280
I've been trying some of these things out.


00:03:59.280 --> 00:04:00.120
- Yeah, it's interesting.


00:04:00.120 --> 00:04:02.880
So it's basically Linux embedded inside of Windows.


00:04:02.880 --> 00:04:05.380
And you've always been able to run in Windows,


00:04:05.380 --> 00:04:09.280
like a VMware virtual machine or something and run say Ubuntu, but that's


00:04:09.280 --> 00:04:12.760
not what this is. It's not like a separate, entirely separate running VM, but


00:04:12.760 --> 00:04:18.800
it's like a little tiny micro VM type thing that is the command line shell for


00:04:18.800 --> 00:04:24.400
Ubuntu. So you can basically have Ubuntu commands and an Ubuntu terminal in your


00:04:24.400 --> 00:04:29.600
Windows. The idea is somebody says, "Hey, here is some library you want to use." And


00:04:29.600 --> 00:04:32.960
the way you get it is you compile it from source and run it, or you know, you


00:04:32.960 --> 00:04:38.520
need to have this other weird utility or type these commands, right? Like how often


00:04:38.520 --> 00:04:43.400
have you seen a tutorial that says, "Okay, Brian, the next step is to type Python 3


00:04:43.400 --> 00:04:50.040
-m venv.env and then you say source.env bin activate." That's awesome, right? It


00:04:50.040 --> 00:04:53.960
works fine on your Mac. It works fine on my Mac. It works fine on my Linux server. Does it


00:04:53.960 --> 00:04:58.600
work fine on Windows? No, you have to use the scripts directory. Scripts directory,


00:04:58.600 --> 00:05:01.320
There is no Python 3, there is no source.


00:05:01.320 --> 00:05:02.680
Like what is all this stuff, right?


00:05:02.680 --> 00:05:04.360
It's like, why is it different?


00:05:04.360 --> 00:05:06.960
And so the motivation that Marcus had for writing this


00:05:06.960 --> 00:05:09.400
is like, hey, if you're gonna learn Python


00:05:09.400 --> 00:05:10.240
and you're on Windows,


00:05:10.240 --> 00:05:12.800
you might consider using the Ubuntu subsystem


00:05:12.800 --> 00:05:14.480
because then all those commands


00:05:14.480 --> 00:05:16.800
that everybody tells you to do, they just work.


00:05:16.800 --> 00:05:18.040
'Cause it says, hey, look. - Oh, that's a good idea.


00:05:18.040 --> 00:05:22.040
- You could use, say, Anaconda, and you get all the tools,


00:05:22.040 --> 00:05:23.960
but you still can't type Python 3,


00:05:23.960 --> 00:05:25.280
you still can't type source.


00:05:25.280 --> 00:05:27.080
Like all these things don't work


00:05:27.080 --> 00:05:28.600
unless you run Ubuntu for Windows.


00:05:28.600 --> 00:05:31.880
So it's a really nice step-by-step way to go through it,


00:05:31.880 --> 00:05:34.440
specifically for setting up for Python development


00:05:34.440 --> 00:05:35.280
on Windows.


00:05:35.280 --> 00:05:36.320
- Okay, cool, neat.


00:05:36.320 --> 00:05:37.920
- Yeah, pretty sweet, right?


00:05:37.920 --> 00:05:39.920
So you might say it's a little cheat sheet


00:05:39.920 --> 00:05:42.500
for getting Ubuntu working there, right?


00:05:42.500 --> 00:05:43.960
- Yeah, hey, we're doing really good


00:05:43.960 --> 00:05:45.800
on the whole transition thing.


00:05:45.800 --> 00:05:47.000
- Yeah, it's working.


00:05:47.000 --> 00:05:50.000
- Yeah, we've got a cheat sheet on my next item.


00:05:50.000 --> 00:05:53.360
I've been trying to do type hints a little bit more,


00:05:53.360 --> 00:05:56.840
especially, so we've got a lot of people at work


00:05:56.840 --> 00:06:01.400
and myself are using PyCharm. And the little pop up dial, I


00:06:01.400 --> 00:06:04.320
don't know what that complete drop down type dot, yeah, that


00:06:04.320 --> 00:06:08.640
all that stuff works really great. And you it also works


00:06:08.640 --> 00:06:13.000
better if you have type hints in your API is just two things. So


00:06:13.000 --> 00:06:16.200
I've been trying to do at least for the external functions, I've


00:06:16.200 --> 00:06:19.080
been trying to do type hints in there, but I forget some things.


00:06:19.080 --> 00:06:23.320
So I ran across this type hints cheat sheet. And it's on the


00:06:23.360 --> 00:06:26.600
It's actually on the mypy documentation site.


00:06:26.600 --> 00:06:29.920
But the things that, I mean, I remember some of the easy things,


00:06:29.920 --> 00:06:33.360
like how do you represent string and int and stuff like that.


00:06:33.360 --> 00:06:35.600
But what about duck type stuff?


00:06:35.600 --> 00:06:39.160
Like if I have a thing that acts like an array,


00:06:39.160 --> 00:06:42.640
but it might be a tuple or it might be a list or it might be something else


00:06:42.640 --> 00:06:47.280
that I just know that I need to be able to use the bracket index operator


00:06:47.280 --> 00:06:49.160
and find the length.


00:06:49.160 --> 00:06:51.800
Well, that's a sequence for type hints.


00:06:51.800 --> 00:06:54.560
But I don't always remember that if that's an iterator,


00:06:54.560 --> 00:06:56.640
iterable or sequence or things like that.


00:06:56.640 --> 00:06:59.280
So those duct type things are what I'm using it


00:06:59.280 --> 00:07:02.340
for the most, but I have other people that I work with


00:07:02.340 --> 00:07:04.780
that are just sort of learning this type in thing.


00:07:04.780 --> 00:07:06.180
So all of it's useful.


00:07:06.180 --> 00:07:07.920
- Yeah, and it's not that long.


00:07:07.920 --> 00:07:10.440
A scroll bar estimation is probably seven or eight pages.


00:07:10.440 --> 00:07:12.120
Flip through that once and you pretty much


00:07:12.120 --> 00:07:13.600
have mastered the type ins.


00:07:13.600 --> 00:07:15.440
There's a couple interesting things in here


00:07:15.440 --> 00:07:17.280
that I thought was nice.


00:07:17.280 --> 00:07:20.760
Talking about adding type ins for asynchronous functions,


00:07:20.760 --> 00:07:26.040
So async def, the one that I had never seen was class level variables.


00:07:26.040 --> 00:07:29.520
So class var looks pretty interesting.


00:07:29.520 --> 00:07:31.880
Like it's not on the instance, but it's on the type.


00:07:31.880 --> 00:07:32.880
Oh, interesting.


00:07:32.880 --> 00:07:33.880
Right?


00:07:33.880 --> 00:07:36.240
You can use class var annotation to declare a class variable.


00:07:36.240 --> 00:07:37.240
I'd never done that.


00:07:37.240 --> 00:07:39.320
I'm just, you know, and that's pretty interesting.


00:07:39.320 --> 00:07:45.400
And then also specifying the type for, say, a generator or something that yields some


00:07:45.400 --> 00:07:46.400
kind of iterator.


00:07:46.400 --> 00:07:47.400
It's pretty interesting.


00:07:47.400 --> 00:07:51.240
There's also a generator, actual generator type declaration that takes three arguments


00:07:51.240 --> 00:07:52.360
that's not covered in here.


00:07:52.360 --> 00:07:55.160
So that's also potentially worth noting.


00:07:55.160 --> 00:07:56.160
But yeah, very cool stuff.


00:07:56.160 --> 00:07:58.440
And I think this is a nice find.


00:07:58.440 --> 00:07:59.440
Cool.


00:07:59.440 --> 00:08:00.440
Nice.


00:08:00.440 --> 00:08:02.920
Now, before we get on to the next thing, I want to tell you quickly about DigitalOcean.


00:08:02.920 --> 00:08:06.800
Like I said, they're sponsoring the show, and they have lots of good reasons to go check


00:08:06.800 --> 00:08:07.900
them out.


00:08:07.900 --> 00:08:11.440
Something that they just announced that's coming soon and is available for early access


00:08:11.440 --> 00:08:13.240
is Kubernetes.


00:08:13.240 --> 00:08:17.680
So if you have some kind of site that you would like to run on a Kubernetes cluster,


00:08:17.680 --> 00:08:23.880
you can now go first visit pythonbytes.fm/digitalocean, create an account so you get the free $100


00:08:23.880 --> 00:08:28.660
credit, and then go to digitalocean.com/products/kubernetes.


00:08:28.660 --> 00:08:31.520
And you can sign up for early access to check that out.


00:08:31.520 --> 00:08:37.240
So then you can submit containers to run on the Kubernetes cluster and have simple zero


00:08:37.240 --> 00:08:39.120
downtime deployments.


00:08:39.120 --> 00:08:40.600
That's actually very, very cool.


00:08:40.600 --> 00:08:43.080
Yeah, I'm pretty excited about that coming along.


00:08:43.080 --> 00:08:48.080
going to be fun. So every now and then we cover these sort of higher level topics


00:08:48.080 --> 00:08:52.480
a little softer. Here's one that tries to look a little bit farther in the future


00:08:52.480 --> 00:08:56.420
and I'm just gonna put these out there and then I'll let you give me your... you


00:08:56.420 --> 00:09:01.140
react to this article. Okay so the overall theme here is that Python is


00:09:01.140 --> 00:09:05.540
driving the creation and foundation of new languages. Okay so this was an


00:09:05.540 --> 00:09:09.100
article and it says here are five predictions for what programming will


00:09:09.100 --> 00:09:13.240
look like in 10 years. Programming will be, okay, so number one, programming will be


00:09:13.240 --> 00:09:16.880
more abstract. When I first read that I'm like, oh please don't tell me it's drag


00:09:16.880 --> 00:09:22.200
and drop. QML again or something like that, right? But no, they say that trends


00:09:22.200 --> 00:09:26.260
like serverless technology, containers, we just talked about Kubernetes, and low-code


00:09:26.260 --> 00:09:29.280
platforms suggest that developers may be able to work at higher level of


00:09:29.280 --> 00:09:33.440
abstractions in the future, not thinking about servers for example. And that


00:09:33.440 --> 00:09:38.200
sounds reasonable. Yeah, to some extent, yeah. Yeah, potentially. AI will become a


00:09:38.200 --> 00:09:39.960
a part of every developer's toolkit,


00:09:39.960 --> 00:09:41.240
but it won't replace them.


00:09:41.240 --> 00:09:42.080
What do you think?


00:09:42.080 --> 00:09:44.600
- I don't buy that actually, but okay.


00:09:44.600 --> 00:09:45.920
- Get some comment I could say


00:09:45.920 --> 00:09:47.000
to some of the voice assistants,


00:09:47.000 --> 00:09:49.400
but I'm pretty sure I'll set off like thousands of them,


00:09:49.400 --> 00:09:50.760
so I won't do it.


00:09:50.760 --> 00:09:54.280
All right, a universal programming language will arise.


00:09:54.280 --> 00:09:56.960
- Well, Python, it's already arisen.


00:09:56.960 --> 00:09:59.520
- So yeah, so the reason this whole article


00:09:59.520 --> 00:10:01.640
was pretty interesting is it has


00:10:01.640 --> 00:10:03.840
a pretty strong Python influence.


00:10:03.840 --> 00:10:05.520
So for example, at the beginning it says,


00:10:05.520 --> 00:10:06.880
"Look, just in the last few years,


00:10:06.880 --> 00:10:12.280
some languages have risen and some have fallen and like the have risen links to an interesting article about Python,


00:10:12.280 --> 00:10:15.580
have fallen links to an interesting one about Ruby, for example.


00:10:15.580 --> 00:10:18.280
And then under this section, there's a nice quote that says,


00:10:18.280 --> 00:10:24.780
"Python may be remembered as being the great-great-great grandmother of languages of the languages of the future,


00:10:24.780 --> 00:10:28.480
which underneath the hood may look like English, but are actually far easier to use."


00:10:28.480 --> 00:10:29.680
Okay. Yeah.


00:10:29.680 --> 00:10:30.280
Okay.


00:10:30.280 --> 00:10:31.780
Ready for my reaction yet or you got more?


00:10:31.780 --> 00:10:32.580
I'm ready. Bring it.


00:10:32.580 --> 00:10:37.380
I think some of the things are, one of the jokes about Python sometimes is that it's


00:10:37.380 --> 00:10:39.880
a, it's runnable pseudocode.


00:10:39.880 --> 00:10:40.880
I don't like it.


00:10:40.880 --> 00:10:45.960
I don't actually want it to get closer to English because English has so many subtleties


00:10:45.960 --> 00:10:52.020
and weird things that you can do that have implied meaning that the closer we get to


00:10:52.020 --> 00:10:57.380
the actual English language, actually the harder it is to actually debug something.


00:10:57.380 --> 00:11:05.060
So having it not be that close, I think is better because it's less up for interpretation.


00:11:05.060 --> 00:11:06.060
>> Right.


00:11:06.060 --> 00:11:07.060
Please read that sentence.


00:11:07.060 --> 00:11:08.860
The people over there have already read the red sign.


00:11:08.860 --> 00:11:12.300
You know, things like that.


00:11:12.300 --> 00:11:15.420
I'm not so sure that a universal language will arise either.


00:11:15.420 --> 00:11:20.860
There's always something you may want to take most advantage of and by doing so, you make


00:11:20.860 --> 00:11:22.780
it less good for other things.


00:11:22.780 --> 00:11:27.160
For example, look at like, say, the data science tool set.


00:11:27.160 --> 00:11:31.560
better working with sets of data than individual things.


00:11:31.560 --> 00:11:33.860
I don't know, it focuses on one thing,


00:11:33.860 --> 00:11:36.860
and so then other things become less easy with it.


00:11:36.860 --> 00:11:38.460
All right, so I don't know.


00:11:38.460 --> 00:11:40.360
One of the changes which is nice is that


00:11:40.360 --> 00:11:45.060
the languages are not being developed in the vacuum that they used to be.


00:11:45.060 --> 00:11:46.360
They're learning from each other.


00:11:46.360 --> 00:11:47.360
Yeah, that's for sure.


00:11:47.360 --> 00:11:50.660
And we're getting the mega cool feature in one language


00:11:50.660 --> 00:11:53.160
that we would like to have in another.


00:11:53.160 --> 00:11:53.960
We're already seeing that.


00:11:53.960 --> 00:11:57.560
Python's taking some features from other languages and pulling it in.


00:11:57.560 --> 00:11:59.960
Other features are taking cool languages.


00:11:59.960 --> 00:12:02.920
And now if I've heard from a lot of people that


00:12:02.920 --> 00:12:07.160
hardly any other languages have good testing tools like pytest.


00:12:07.160 --> 00:12:10.680
Specifically, they don't have pytest for other languages.


00:12:10.680 --> 00:12:14.760
And that would be cool if we could have some better testing tools in other languages.


00:12:14.760 --> 00:12:17.320
So yeah, I mean, there's certainly examples of that, like Swift,


00:12:17.320 --> 00:12:20.760
Apple's Swift is very much Python inspired.


00:12:20.760 --> 00:12:27.640
you see like the optional, the null coalescing operator being moved towards Python and 3.8 potentially, things like that.


00:12:27.640 --> 00:12:31.960
So I agree, I definitely see it as a blending, I don't know if there'll be a single one.


00:12:31.960 --> 00:12:35.240
So alright, final two, every developer will need to work with data.


00:12:35.240 --> 00:12:37.240
I think that they're doing that now, right?


00:12:37.240 --> 00:12:40.280
Yeah, I think that's already, we always have.


00:12:40.280 --> 00:12:45.160
Yeah, and then programming will become a core tenant of the education system, like reading and writing.


00:12:45.160 --> 00:12:45.960
I believe that.


00:12:45.960 --> 00:12:46.520
I do too.


00:12:46.520 --> 00:12:53.520
It isn't necessarily like reading and writing. I think it's more like learning biology and basic chemistry.


00:12:53.520 --> 00:12:58.520
It's not that you actually need it every day, but it's good that most people kind of understand how it sort of works.


00:12:58.520 --> 00:13:04.520
Yeah, I'm totally with you. And the thing I think it will eject from the education system is geometry.


00:13:04.520 --> 00:13:08.520
I feel like the reason that geometry is taught in middle school and high school


00:13:08.520 --> 00:13:13.520
is so that critical thinking and proof type of logical thought can be taught.


00:13:13.520 --> 00:13:17.640
hot. Like you don't really need to prove this thing about isosceles triangles.


00:13:17.640 --> 00:13:21.380
Like that doesn't help you in life. But the thought process does. And I feel like


00:13:21.380 --> 00:13:25.120
programming, you have the same type of thought processes, but you get a skill


00:13:25.120 --> 00:13:30.620
not just a grade. Yeah, my prediction. That's interesting. Yeah. Yeah, we'll see


00:13:30.620 --> 00:13:34.560
about that. All right, so another one on async.io, something I've been digging


00:13:34.560 --> 00:13:40.400
into a ton lately. Yeah, I wasn't even aware that this was a thing going on. But


00:13:40.400 --> 00:13:47.400
apparently the standard library async.io documentation was completely rewritten from scratch recently.


00:13:47.400 --> 00:13:48.900
That's awesome. That's big news.


00:13:48.900 --> 00:13:52.700
Yeah, it even says it in the tweet announcement. This is big news.


00:13:52.700 --> 00:13:54.700
With like two flames on the side.


00:13:54.700 --> 00:14:00.300
So I haven't actually read through this a whole bunch, but it does look like there's quite a bit of documentation there.


00:14:00.300 --> 00:14:01.000
So that's neat.


00:14:01.000 --> 00:14:01.500
That's really cool.


00:14:01.500 --> 00:14:03.000
And it says they're not done.


00:14:03.000 --> 00:14:07.000
So there's a comment that there's, this is just the beginning, that there's,


00:14:07.000 --> 00:14:10.920
they're going to add some tutorials for high level concepts and APIs,


00:14:10.920 --> 00:14:17.080
and then they're also going to keep going because apparently there's some new things planned for 3.8.


00:14:17.080 --> 00:14:21.320
Yeah, that's awesome. You highlight some of the things coming for async.io itself,


00:14:21.320 --> 00:14:24.520
like the library and the capabilities async and await are getting better, right?


00:14:24.520 --> 00:14:28.600
Yeah, and I think this sort of talks to the importance of async in the future.


00:14:28.600 --> 00:14:35.000
If not only are people still working on making, improving the async story within Python,


00:14:35.000 --> 00:14:39.500
but they're also trying to improve the documentation to make sure that it's usable,


00:14:39.500 --> 00:14:45.500
which I'm glad to see that sort of documentation going side by side with new concepts.


00:14:45.500 --> 00:14:46.500
That's a good thing.


00:14:46.500 --> 00:14:49.500
But that kind of highlights the importance of async going forward.


00:14:49.500 --> 00:14:52.500
Yeah, I think async is just becoming increasingly important,


00:14:52.500 --> 00:14:56.500
and I'm really glad to see it really gaining some momentum


00:14:56.500 --> 00:15:01.500
because if you look at apps written with and without async in a library that can take advantage of it,


00:15:01.500 --> 00:15:03.500
it's like night and day. It's ridiculous.


00:15:03.500 --> 00:15:07.700
I think that, like you said, again, it's a different concept sort of thing.


00:15:07.700 --> 00:15:12.900
You can think in higher level concepts and break problems up into the more logical breaking points.


00:15:12.900 --> 00:15:16.200
Right. You don't have to think about threads and processes and coordination and all that.


00:15:16.200 --> 00:15:20.400
You just say, "I'm going to do this part, then I'll wait, then I'll do that part, then I'll wait, then I'll do that part."


00:15:20.400 --> 00:15:23.100
And then, you know, that's sort of that higher level abstraction.


00:15:23.100 --> 00:15:23.500
Yeah.


00:15:23.500 --> 00:15:27.300
You want to get caught up on all the places that Python is headed?


00:15:27.300 --> 00:15:28.900
All the directions? All the threads?


00:15:28.900 --> 00:15:30.300
Yeah, definitely.


00:15:30.300 --> 00:15:34.860
So there was the 2018 Python Language Summit.


00:15:34.860 --> 00:15:38.580
Okay, that's where all the core developers get together and they talk about what they're


00:15:38.580 --> 00:15:39.580
doing.


00:15:39.580 --> 00:15:43.660
They do proposals to each other like, "Hey, I think we should focus on this," or "We need


00:15:43.660 --> 00:15:45.660
to address that," and so on.


00:15:45.660 --> 00:15:47.380
And there's some really interesting items.


00:15:47.380 --> 00:15:53.420
And on lwn.net, which is a pretty interesting site, they've got a lot of great stuff, mostly


00:15:53.420 --> 00:15:55.140
focused on Linux.


00:15:55.140 --> 00:15:58.340
It's kind of like the Craigslist of Linux news or something.


00:15:58.340 --> 00:15:59.340
I don't know.


00:15:59.340 --> 00:16:05.580
design but basically this is a meta article about the Python language summit this year


00:16:05.580 --> 00:16:09.660
and it lists off a whole bunch of sessions each of which are covered in detail in another


00:16:09.660 --> 00:16:13.740
article. So what I'm going to do is cover the high level bits of each one of these


00:16:13.740 --> 00:16:19.340
main sessions. So the first one is could we have sub-interpreter support for Python?


00:16:19.340 --> 00:16:23.660
So we were just talking about async io and stuff. One of the main problems, I don't know if I'd call


00:16:23.660 --> 00:16:27.740
it really a problem because there's a lot of ways around it actually, but conceptions is that Python


00:16:27.740 --> 00:16:32.220
Python's not great for threading, specifically around taking advantage of multiple cores


00:16:32.220 --> 00:16:34.500
for CPU stuff, because of the gill.


00:16:34.500 --> 00:16:38.380
It can have 100 threads and only one will run at a time if it's pure Python because


00:16:38.380 --> 00:16:39.380
of the gill.


00:16:39.380 --> 00:16:44.580
So the suggestion is, could we take this feature, which is apparently already in Python, called


00:16:44.580 --> 00:16:53.700
subinterpreter support, to create lightweight subprocesses that run within the same process?


00:16:53.700 --> 00:16:58.020
will allow multiple Python interpreters per process.


00:16:58.020 --> 00:17:02.300
And there's potential for zero copy data sharing between them and things like that, which is


00:17:02.300 --> 00:17:03.300
pretty cool.


00:17:03.300 --> 00:17:04.300
That's interesting.


00:17:04.300 --> 00:17:05.760
It might be interesting even for versioning, right?


00:17:05.760 --> 00:17:08.900
Like this library requires this version where that library requires that version.


00:17:08.900 --> 00:17:11.380
Well, you can run like maybe multiple subinterpreters.


00:17:11.380 --> 00:17:12.580
So I don't know.


00:17:12.580 --> 00:17:13.580
That's a whole different angle.


00:17:13.580 --> 00:17:15.280
And it wasn't part of this presentation.


00:17:15.280 --> 00:17:20.340
But they say the problem is that subinterpreters currently share the gill.


00:17:20.340 --> 00:17:25.700
So the potential work is, could we make them not share the GIL so they actually can take


00:17:25.700 --> 00:17:27.860
advantage of multiple cores?


00:17:27.860 --> 00:17:28.860
It's becoming a thing.


00:17:28.860 --> 00:17:33.700
So my MacBook, my new MacBook here has 12 cores as far as the OS sees it.


00:17:33.700 --> 00:17:38.160
And if I write Python code and it takes full advantage of all the processor that it can


00:17:38.160 --> 00:17:42.420
and single thread it, it's only 8.3% of the capacity of the CPU.


00:17:42.420 --> 00:17:44.900
That's a lot less than 100%.


00:17:44.900 --> 00:17:48.740
So having features like this to let you do more computation would be great.


00:17:48.740 --> 00:17:52.300
All right, so I don't want to go too deep in these because it'll like make this an hour-long


00:17:52.300 --> 00:17:54.180
show so I'll try to go a little quicker.


00:17:54.180 --> 00:17:59.160
So the next one is modifying the Python object model, looking at CPython's structure.


00:17:59.160 --> 00:18:06.260
So Carl Shapiro from Instagram talked about how they might rework the way the interpreter


00:18:06.260 --> 00:18:11.060
interacts with classes for better performance and memory and stuff because Instagram is


00:18:11.060 --> 00:18:12.060
all about that.


00:18:12.060 --> 00:18:16.360
It's one of the interesting things in this article is that there was some controversy


00:18:16.360 --> 00:18:19.360
around like the presentation and some other stuff so I'll let you read about


00:18:19.360 --> 00:18:23.080
it. I won't bring it up here but it's worth looking at. We just talked about


00:18:23.080 --> 00:18:28.400
the gil for parallelism and Larry Hastings has been on and off working on


00:18:28.400 --> 00:18:31.800
this thing called the gilectomy, the removal of the gil. And the gil


00:18:31.800 --> 00:18:38.160
basically is a thread protection around allocation in Python which means you


00:18:38.160 --> 00:18:40.720
don't have to like take a bunch of fine-grained locks when you're allocating


00:18:40.720 --> 00:18:44.720
new objects but because of that it means only one instruction can run at a time.


00:18:44.720 --> 00:18:49.220
So could we take that out and have a Python that does like true parallelism?


00:18:49.220 --> 00:18:51.280
Basically the update is not much has happened.


00:18:51.280 --> 00:18:57.160
So for better or worse, Marietta talked about using GitHub issues for Python.


00:18:57.160 --> 00:18:59.920
I didn't realize this wasn't already happening, but apparently it's not.


00:18:59.920 --> 00:19:03.160
Apparently there's another site that's currently being used and trying to


00:19:03.160 --> 00:19:04.840
move over to GitHub issues.


00:19:04.840 --> 00:19:05.540
That's pretty cool.


00:19:05.540 --> 00:19:08.800
Lucas talked about shortening the Python release cycle.


00:19:08.800 --> 00:19:12.960
So right now it's on an 18 month release cycle.


00:19:13.040 --> 00:19:16.320
So in 18 months from whenever 3.7 was out, 3.8 will be out.


00:19:16.320 --> 00:19:19.360
Can we make that yearly? It's possibly the conversation. So you can read that.


00:19:19.360 --> 00:19:22.800
One that you might find interesting is unplugging old batteries.


00:19:22.800 --> 00:19:28.720
So unplugging old batteries, there's like, there's like encoding libraries for like formats


00:19:28.720 --> 00:19:33.200
that like predate MIME and other weird type of things that are in there that nobody


00:19:33.200 --> 00:19:38.240
likely uses anymore. So what is the process for taking stuff out of the standard library?


00:19:38.240 --> 00:19:40.720
There's a process for getting in, but how do you get it out?


00:19:40.720 --> 00:19:48.720
Oh, that's interesting. Yeah, a lot of things could probably be not just completely eliminated, but moved to, like, just a package or something.


00:19:48.720 --> 00:19:56.720
Exactly. Like, this is now out. But if you need it back, you can pip install it separately. But your job is to maintain it. Like, we're not shipping it anymore. Something to that effect. It's kind of cool.


00:19:56.720 --> 00:19:57.720
Yeah.


00:19:57.720 --> 00:20:09.720
They talked about Linux distributions and Python 2. With Python 2 coming to end of life, what is the process for, like, basically getting those out of the Linux systems that they ship with? And how do we do that?


00:20:09.720 --> 00:20:12.840
You talked about Python's static typing.


00:20:12.840 --> 00:20:17.040
So there's an update on that, mostly focused on stub files.


00:20:17.040 --> 00:20:18.400
Have you heard of stub files?


00:20:18.400 --> 00:20:19.240
- Yeah.


00:20:19.240 --> 00:20:20.960
- It's like the dot, dot, dot, right?


00:20:20.960 --> 00:20:22.860
I've looked at them and they basically are


00:20:22.860 --> 00:20:25.240
the method signature and then dot, dot, dot.


00:20:25.240 --> 00:20:27.560
And they're not actually the implementation.


00:20:27.560 --> 00:20:32.160
They're just saying here is the actual shape of this method.


00:20:32.160 --> 00:20:35.140
And so what you do is they get imported alongside


00:20:35.140 --> 00:20:38.320
of your code by things like mypy.


00:20:38.320 --> 00:20:43.960
So they're kept in this thing called the typeshed, which is a place for third party libraries


00:20:43.960 --> 00:20:44.960
to be in there.


00:20:44.960 --> 00:20:51.380
So you can look through there and see things like what type of stuff, like the context


00:20:51.380 --> 00:20:54.920
variable in what is its type definition, for example.


00:20:54.920 --> 00:20:57.020
So there's a bunch of things with dot dot dot.


00:20:57.020 --> 00:21:01.240
They're just like empty, not implemented sort of structures.


00:21:01.240 --> 00:21:06.240
And so this is where a lot of the third party stuff and the standard library goes.


00:21:06.240 --> 00:21:10.880
But they're saying, look, a lot of packages are not putting things here, like namely things


00:21:10.880 --> 00:21:13.080
like Django and SQLAlchemy.


00:21:13.080 --> 00:21:18.680
So there's a proposal of finding a way to bind the type information to the package and


00:21:18.680 --> 00:21:24.240
not to the central location so that package maintainers can ship those stubs along with


00:21:24.240 --> 00:21:25.240
their libraries.


00:21:25.240 --> 00:21:28.320
Yeah, that would make more sense, or at least it would make some sense.


00:21:28.320 --> 00:21:32.040
Yeah, like it'd be easier because then you don't have to say like do a PR to some other


00:21:32.040 --> 00:21:34.800
repo, like you just put it along with your library and it's in pip.


00:21:34.800 --> 00:21:35.800
Yeah.


00:21:35.800 --> 00:21:39.400
So Python virtual environments, there's some debate about whether they're useful


00:21:39.400 --> 00:21:43.200
and what we might do instead, primarily around like, if you're trying to teach


00:21:43.200 --> 00:21:46.720
Python, you shouldn't have to start out with a 20 minute conversation of how to


00:21:46.720 --> 00:21:49.880
do virtual environments, both on Linux, Windows, and Mac OS.


00:21:49.880 --> 00:21:54.680
And then you can actually talk about hello world, but just how do we just do that?


00:21:54.680 --> 00:21:57.080
So an interesting debate there.


00:21:57.080 --> 00:22:01.720
There was some conversation around the whole new decision decision making


00:22:01.720 --> 00:22:03.600
process now that Guido stepped down.


00:22:04.520 --> 00:22:07.600
Another one about getting along in the Python community,


00:22:07.600 --> 00:22:09.960
trying to make things like the dev mailer list


00:22:09.960 --> 00:22:12.240
be more interesting and welcoming as well.


00:22:12.240 --> 00:22:14.920
Also, finally, mentoring and diversity for Python


00:22:14.920 --> 00:22:17.840
with Marietta and Victor Stinner as well,


00:22:17.840 --> 00:22:20.320
two separate presentations in that general area.


00:22:20.320 --> 00:22:22.080
So there's every single one of these things


00:22:22.080 --> 00:22:23.760
I've talked about, there's an article about it


00:22:23.760 --> 00:22:24.880
and more references.


00:22:24.880 --> 00:22:26.440
And so if you want to dive into it,


00:22:26.440 --> 00:22:28.800
it's like, it'll keep you busy for an afternoon.


00:22:28.800 --> 00:22:30.960
- Okay, one of the things that you wrote down


00:22:30.960 --> 00:22:33.000
but we didn't talk about was TK enter.


00:22:33.000 --> 00:22:38.040
Oh, so the one about getting along and being more civil on dev was somebody complaining


00:22:38.040 --> 00:22:42.800
that TK Enter is so badly out of date that it should be removed from Python, but it's


00:22:42.800 --> 00:22:46.840
shipped with Python, which kind of brings us back to how do we unplug old batteries?


00:22:46.840 --> 00:22:50.880
Because if people don't maintain it and it doesn't work for anyone, then why would TK


00:22:50.880 --> 00:22:51.880
Enter be there?


00:22:51.880 --> 00:22:57.280
So there's, we might get back on another GUI kick if we go down that too far.


00:22:57.280 --> 00:22:58.280
Okay.


00:22:58.280 --> 00:22:59.640
Anyway, that's what that was about.


00:22:59.640 --> 00:23:03.640
the sort of rudeness on the mailing list was focused around TK enter.


00:23:03.640 --> 00:23:04.640
Okay.


00:23:04.640 --> 00:23:06.640
And whether it needs to be upgraded, removed, whatever.


00:23:06.640 --> 00:23:10.640
Well, that is it for the Python language summit, but I thought that was super interesting.


00:23:10.640 --> 00:23:13.640
And there's just so many looks at where people are putting their effort.


00:23:13.640 --> 00:23:16.640
I mean, this is where the core developers are focusing their time.


00:23:16.640 --> 00:23:18.640
So I think it's definitely worth paying attention to.


00:23:18.640 --> 00:23:19.640
Yeah, definitely.


00:23:19.640 --> 00:23:20.640
Cool.


00:23:20.640 --> 00:23:22.640
All right, you got anything else you want to share with folks while we're here?


00:23:22.640 --> 00:23:23.640
Yeah, one thing.


00:23:23.640 --> 00:23:26.640
I noticed this from, I'm going to get his name wrong.


00:23:26.640 --> 00:23:31.240
Anthony Sadio, code with Anthony on Twitter,


00:23:31.240 --> 00:23:37.240
mentioned that Precommit had a huge jump in downloads on July 30th.


00:23:37.240 --> 00:23:40.920
I first assumed that it was because we covered it or something,


00:23:40.920 --> 00:23:43.840
but apparently it didn't line up with us covering it.


00:23:43.840 --> 00:23:45.000
You should have covered it earlier,


00:23:45.000 --> 00:23:46.360
could have gotten credit, but no.


00:23:46.360 --> 00:23:51.680
But I looked at other packages and there is a weird jump in


00:23:51.680 --> 00:23:57.040
like almost all packages downloads starting in at the end of July.


00:23:57.040 --> 00:24:01.240
I don't have any news around that just that's weird and I wonder what's going on.


00:24:01.240 --> 00:24:06.240
You know I wonder if that has to do with when the new PyPI launched.


00:24:06.240 --> 00:24:11.600
Oh yeah I wonder and it's almost coincident with the pip 18 as well.


00:24:11.600 --> 00:24:15.480
The new PyPI launched in April so yeah it could be with pip 18.


00:24:15.480 --> 00:24:19.280
Who knows I bet it's some low-level infrastructure thing like caching got expired


00:24:19.280 --> 00:24:22.600
and everything that had cached it everywhere got a new one or something.


00:24:22.600 --> 00:24:25.680
Yeah, maybe they changed the way they were caching it or something.


00:24:25.680 --> 00:24:28.400
I do remember seeing that from pip that every now and then,


00:24:28.400 --> 00:24:30.880
like if you run a sufficiently old pip,


00:24:30.880 --> 00:24:35.720
it'll say that it's offline cache is not compatible and it'll redownload.


00:24:35.720 --> 00:24:39.280
So I'm wondering if in the reverse direction, when a new pip came out, that may happen.


00:24:39.280 --> 00:24:42.280
So I bring that up so that if anybody knows what's going on,


00:24:42.280 --> 00:24:44.600
they can get a hold of us and we can find out.


00:24:44.600 --> 00:24:47.160
Yeah, throw it in the show notes, pythonbytes.fm/96.


00:24:47.160 --> 00:24:53.260
Yeah, and that's one of the things that I love about this is because we can talk about things that we don't quite know about and people will correct us.


00:24:53.260 --> 00:24:56.560
They're generally pretty nice about it too, so thank you for that.


00:24:56.560 --> 00:25:01.460
Yeah, so one of the things that somebody mentioned, we've talked about PyCuda.


00:25:01.460 --> 00:25:01.960
Cood-pie.


00:25:01.960 --> 00:25:02.660
Did I get that right?


00:25:02.660 --> 00:25:03.560
I think it's cood-pie.


00:25:03.560 --> 00:25:04.360
Yeah.


00:25:04.360 --> 00:25:04.860
Coo-pie.


00:25:04.860 --> 00:25:05.360
Yeah, coo-pie.


00:25:05.360 --> 00:25:05.860
Coo-pie.


00:25:05.860 --> 00:25:17.060
We were guessing that maybe if you had a video card on your laptop, maybe you could use it, but we were corrected that it would have to be an Nvidia card because Cuda only runs on Nvidia.


00:25:17.060 --> 00:25:23.980
Yeah, so apparently CUDA is a NVIDIA thing, which I didn't realize. I thought it was just a graphics card standard, but no, it's an NVIDIA thing.


00:25:23.980 --> 00:25:29.180
So, you, this is all triggered by your question, could I do this on my MacBook or on my laptop?


00:25:29.180 --> 00:25:35.540
If you have like a Windows or Linux laptop that has an NVIDIA card, yes. Otherwise, no. Apparently, it's the answer.


00:25:35.540 --> 00:25:40.540
So a couple people wrote us that, wrote us and communicated that to us, so thank you all for that.


00:25:40.540 --> 00:25:43.860
I guess if you're on a MacBook, you could get an external.


00:25:43.860 --> 00:25:48.100
On the new ones you can do external GPUs and you could get an NVIDIA one there,


00:25:48.100 --> 00:25:51.860
but even the one sold by Apple is actually a Radeon, so it doesn't help you.


00:25:51.860 --> 00:25:52.740
Okay.


00:25:52.740 --> 00:25:55.220
So, anyway, just thanks for the clarification.


00:25:55.220 --> 00:25:56.980
Yeah, do you have anything else to add?


00:25:56.980 --> 00:26:00.580
Nothing else. Not right now. I have some good news next week I'm going to share,


00:26:00.580 --> 00:26:02.340
but right now nothing to say.


00:26:02.340 --> 00:26:03.300
All right, well thanks a lot.


00:26:03.300 --> 00:26:06.660
Just working away on projects. Yeah, thank you. Great to chat with you as always.


00:26:06.660 --> 00:26:07.160
Yeah.


00:26:07.160 --> 00:26:12.580
Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes.


00:26:12.580 --> 00:26:16.020
That's Python Bytes as in B-Y-T-E-S.


00:26:16.020 --> 00:26:19.300
And get the full show notes at PythonBytes.fm.


00:26:19.300 --> 00:26:23.020
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:26:23.020 --> 00:26:24.020
way.


00:26:24.020 --> 00:26:26.520
We're always on the lookout for sharing something cool.


00:26:26.520 --> 00:26:29.980
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:26:29.980 --> 00:26:33.020
Thank you for listening and sharing this podcast with your friends and colleagues.

