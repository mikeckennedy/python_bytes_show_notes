WEBVTT

00:00:00.001 --> 00:00:05.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.640 --> 00:00:10.320
This is episode 96, recorded September 19th, 2018. I'm Michael Kennedy.

00:00:10.320 --> 00:00:11.160
And I'm Brian Okken.

00:00:11.160 --> 00:00:11.960
Hey, Brian. How are you doing?

00:00:11.960 --> 00:00:13.760
I'm doing really good. How are you?

00:00:13.760 --> 00:00:17.760
I'm doing great. There's always something to talk about in the Python space. It never gets boring.

00:00:17.760 --> 00:00:18.700
Yeah, no.

00:00:18.700 --> 00:00:24.100
Definitely doesn't. And we're here bringing this to you today in part because of DigitalOcean sponsoring this episode.

00:00:24.100 --> 00:00:30.520
So check them out at pythonbytes.fm/DigitalOcean and get $100 credit for some server goodies.

00:00:30.520 --> 00:00:31.480
Tell you more about that later.

00:00:31.480 --> 00:00:35.800
Brian, you found an interesting one. I don't even know what to make of it here. Tell us about it.

00:00:35.800 --> 00:00:39.280
I can't even remember where I came across this. I guess it doesn't matter.

00:00:39.280 --> 00:00:46.500
There's a Python library called Plumbum, and that's spelled P-L-U-M-B-U-M.

00:00:46.500 --> 00:00:49.020
I have no idea where they came up with that name.

00:00:49.020 --> 00:00:53.600
But it's a toolbox of goodies to do shell-like things in Python.

00:00:53.600 --> 00:00:57.700
It says shell combinators and more. I'm not sure what a combinator is.

00:00:57.700 --> 00:01:01.420
Oh, there was that Y combinator on Back to the Future.

00:01:01.420 --> 00:01:03.820
Other than that, I don't know what a combinator is.

00:01:03.820 --> 00:01:05.440
Is it like the pipes between things?

00:01:05.440 --> 00:01:06.040
Maybe.

00:01:06.040 --> 00:01:06.780
Perhaps.

00:01:06.780 --> 00:01:13.160
Anyway, the motto of the library, and this is a direct quote, is never write shell scripts again.

00:01:13.160 --> 00:01:16.980
And thus, it attempts to mimic the shell syntax.

00:01:17.320 --> 00:01:25.060
Oh, shell combinators is shell syntax, where it makes sense while keeping all the Pythonic and cross-platform goodiness of Python.

00:01:25.580 --> 00:01:27.560
And it's kind of fun.

00:01:27.560 --> 00:01:31.120
And it's one of those things, it's kind of cheating, actually, I think.

00:01:31.120 --> 00:01:31.720
But it's cool.

00:01:31.720 --> 00:01:37.760
We have an example in the show notes, but there's a bunch of examples on their website, on the readme and stuff.

00:01:37.760 --> 00:01:40.920
You can do things like chaining commands with pipes.

00:01:41.180 --> 00:01:46.720
And there's a built-in grep and word count and head counts within this library.

00:01:46.720 --> 00:01:56.220
So if you've got a bash shell script and somebody says, hey, you should convert that to Python, this would take you like five minutes to convert it to Python using this.

00:01:56.220 --> 00:01:58.640
And that's not necessarily a bad thing.

00:01:58.820 --> 00:02:03.680
If you know kind of how to transform something here, you can convert it right away.

00:02:03.680 --> 00:02:08.420
And then maybe if you want to go figure out how to do that with other ways, you could.

00:02:08.420 --> 00:02:11.920
But for a lot of quick and dirty things, why not do something like this?

00:02:11.920 --> 00:02:12.700
It looks really cool.

00:02:12.700 --> 00:02:18.560
Like, certainly writing bash stuff, the more tests you have to do and the, like, looping over things.

00:02:18.560 --> 00:02:20.920
It's just like, how do you do that in bash again?

00:02:20.920 --> 00:02:23.000
You know, it's just, it's not so nice.

00:02:23.000 --> 00:02:26.400
But there's certainly things you can do in the shell that are, like, painful in Python.

00:02:26.400 --> 00:02:27.540
Like, show me the files here.

00:02:27.540 --> 00:02:28.440
It's like, okay, well, fine.

00:02:28.440 --> 00:02:30.200
We're going to import OS.

00:02:30.200 --> 00:02:32.520
And we're going to, like, do a lister and loop over that.

00:02:32.520 --> 00:02:32.700
Right?

00:02:32.700 --> 00:02:33.680
Like, LS.

00:02:33.680 --> 00:02:33.920
Right?

00:02:33.920 --> 00:02:34.600
That's super easy.

00:02:34.600 --> 00:02:36.120
And this kind of brings those things together.

00:02:36.120 --> 00:02:36.840
It's really nice.

00:02:36.840 --> 00:02:37.240
Yeah.

00:02:37.240 --> 00:02:47.040
So I've got a couple things I'm going to throw this out right away is we're converting from on, in Jenkins, you can do shell commands within, like, the little command steps of Jenkins.

00:02:47.040 --> 00:02:51.200
But if you're doing pipelines on Windows, you can't do bash for some reason.

00:02:51.200 --> 00:02:53.320
Or I can't figure out a way to do bash.

00:02:53.320 --> 00:02:54.800
But I can do Python.

00:02:55.120 --> 00:03:01.120
So I could write a little Python script to do the thing that I wanted to do in bash and do it right there.

00:03:01.120 --> 00:03:02.340
So I'll try that.

00:03:02.340 --> 00:03:02.820
Yeah, nice.

00:03:02.820 --> 00:03:04.280
So this is a really cool project.

00:03:04.280 --> 00:03:10.380
And certainly if you're thinking about some kind of bash script or something like that, this is a really nice option.

00:03:10.380 --> 00:03:14.660
Maybe I should just try to use the Linux subsystem on Windows 10 instead of...

00:03:14.660 --> 00:03:14.920
Yeah.

00:03:14.920 --> 00:03:19.240
So if you have a problem with getting bash to work, it doesn't work on Windows, right?

00:03:19.240 --> 00:03:23.880
But you can definitely bring in the Windows 10 Linux subsystem.

00:03:23.880 --> 00:03:26.580
And obviously that's Windows 10.

00:03:26.740 --> 00:03:34.380
I'm sure that it's available on the Windows server equivalent of Windows 10, which I honestly don't even know what version that is.

00:03:34.380 --> 00:03:38.320
But there's probably a server equivalent that has the Linux subsystem as well.

00:03:38.320 --> 00:03:40.480
People can throw that in the show comments if they want.

00:03:40.480 --> 00:03:47.440
But there's an article by Marcus Sherman called the Windows 10 Linux subsystem for Python developers.

00:03:47.860 --> 00:03:50.980
First of all, have you heard of this Windows 10 Linux subsystem?

00:03:50.980 --> 00:03:51.560
Do you know what this is?

00:03:51.560 --> 00:03:53.540
Yeah, I've been trying to keep an eye on it.

00:03:53.540 --> 00:03:59.160
And as they make fixes to it and add features, I've been trying some of these things out.

00:03:59.160 --> 00:03:59.780
Yeah, it's interesting.

00:03:59.780 --> 00:04:02.720
So it's basically Linux embedded inside of Windows.

00:04:02.720 --> 00:04:08.880
I mean, you've always been able to run in Windows like a VMware virtual machine or something and run, say, Ubuntu.

00:04:08.880 --> 00:04:09.900
But that's not what this is.

00:04:09.900 --> 00:04:12.560
It's not like a separate, entirely separate running VM.

00:04:12.700 --> 00:04:19.620
But it's like a little tiny micro VM type thing that is the command line shell for Ubuntu.

00:04:19.620 --> 00:04:24.760
So you can basically have Ubuntu commands in an Ubuntu terminal in your Windows.

00:04:24.760 --> 00:04:29.500
The idea is somebody says, hey, here is some library you want to use.

00:04:29.500 --> 00:04:32.000
And the way you get it is you compile it from source and run it.

00:04:32.000 --> 00:04:37.380
Or, you know, you need to have this other weird utility or type these commands, right?

00:04:37.460 --> 00:04:45.700
Like, how often have you seen a tutorial that says, okay, Brian, the next step is to type Python 3-mvnv.env.

00:04:45.700 --> 00:04:48.680
And then you say source.env bin activate.

00:04:48.680 --> 00:04:49.960
That's awesome, right?

00:04:49.960 --> 00:04:50.880
It works fine on your Mac.

00:04:50.880 --> 00:04:52.080
It works fine on my Mac.

00:04:52.080 --> 00:04:53.620
It works fine on my Linux server.

00:04:53.620 --> 00:04:54.720
Does it work fine on Windows?

00:04:54.720 --> 00:04:57.640
No, you have to use the scripts directory.

00:04:57.640 --> 00:04:58.520
Scripts directory.

00:04:58.520 --> 00:04:59.680
There is no Python 3.

00:04:59.680 --> 00:05:00.880
There is no source.

00:05:00.880 --> 00:05:02.480
Like, what is all this stuff, right?

00:05:02.480 --> 00:05:04.260
It's like, why is it different?

00:05:04.260 --> 00:05:12.600
And so the motivation that Marcus had for writing this is like, hey, if you're going to learn Python and you're on Windows, you might consider using the Ubuntu subsystem.

00:05:12.600 --> 00:05:16.160
Because then all those commands that everybody tells you to do, they just work.

00:05:16.160 --> 00:05:17.740
Oh, that's a good idea.

00:05:17.740 --> 00:05:21.580
You could use, say, Anaconda, and you get all the tools.

00:05:21.580 --> 00:05:23.740
But you still can't type Python 3.

00:05:23.740 --> 00:05:25.140
You still can't type source.

00:05:25.140 --> 00:05:28.520
Like, all these things don't work unless you run Ubuntu for Windows.

00:05:28.520 --> 00:05:34.860
So it's a really nice step-by-step way to go through it specifically for setting up for Python development on Windows.

00:05:34.860 --> 00:05:35.700
Okay, cool.

00:05:35.700 --> 00:05:36.200
Neat.

00:05:36.200 --> 00:05:37.320
Yeah, pretty sweet, right?

00:05:37.320 --> 00:05:41.580
So you might say it's a little cheat sheet for getting Ubuntu work in there, right?

00:05:41.580 --> 00:05:42.760
Yeah.

00:05:42.760 --> 00:05:45.420
Hey, we're doing really good on the whole transition thing.

00:05:45.420 --> 00:05:46.280
That's working.

00:05:46.280 --> 00:05:47.300
Yeah.

00:05:47.300 --> 00:05:49.720
We've got a cheat sheet on my next item.

00:05:49.720 --> 00:05:58.820
I've been trying to do type hints a little bit more, especially, so we've got a lot of the people at work and myself are using PyCharm.

00:05:58.820 --> 00:06:02.120
And the little pop-up dial, I don't know what that's called.

00:06:02.120 --> 00:06:03.700
Autocomplete, drop-down, and type dot.

00:06:03.700 --> 00:06:06.760
Yeah, all that stuff works really great.

00:06:06.760 --> 00:06:11.260
And it also works better if you have type hints in your API.

00:06:11.260 --> 00:06:12.520
It's just two things.

00:06:12.520 --> 00:06:17.780
So I've been trying to do, at least for the external functions, I've been trying to do type hints in there.

00:06:17.780 --> 00:06:19.040
But I forget some things.

00:06:19.040 --> 00:06:26.200
So I ran across this type hints cheat sheet, and it's actually on the mypy documentation site.

00:06:26.200 --> 00:06:32.800
But the things that, I mean, I remember some of the easy things, like how do you represent string and int and stuff like that.

00:06:32.800 --> 00:06:32.960
Colon int.

00:06:32.960 --> 00:06:33.900
What's the problem?

00:06:33.900 --> 00:06:35.540
But what about duct type stuff?

00:06:35.540 --> 00:06:43.040
Like if I have a thing that acts like an array, but it might be a tuple or it might be a list or it might be something else that just,

00:06:43.040 --> 00:06:48.580
I just know that I need to be able to use the bracket index operator and find the length.

00:06:48.580 --> 00:06:51.300
Well, that's a sequence for type hints.

00:06:51.300 --> 00:06:56.620
But I don't always remember that if that's an iterator, iterable or sequence or things like that.

00:06:56.620 --> 00:07:00.020
So those duct type things are what I'm using it for the most.

00:07:00.020 --> 00:07:04.680
But I have other people that I work with that are just sort of learning this type hint thing.

00:07:04.680 --> 00:07:06.020
So all of it's useful.

00:07:06.220 --> 00:07:07.040
Yeah, and it's not that long.

00:07:07.040 --> 00:07:10.280
You know, a scroll bar estimation is probably seven or eight pages.

00:07:10.280 --> 00:07:13.180
Flip through that once and you pretty much have mastered the type hints.

00:07:13.180 --> 00:07:16.960
There's a couple interesting things in here that I thought was nice.

00:07:16.960 --> 00:07:20.660
Talking about adding type hints for asynchronous functions.

00:07:20.660 --> 00:07:21.600
So async def.

00:07:21.600 --> 00:07:25.160
The one that I had never seen was class level variables.

00:07:25.160 --> 00:07:28.860
So class var looks pretty interesting.

00:07:28.860 --> 00:07:31.880
Like it's not on the instance, but it's on the type.

00:07:31.880 --> 00:07:32.740
Oh, interesting.

00:07:33.300 --> 00:07:36.160
You can use class var annotation to declare a class variable.

00:07:36.160 --> 00:07:37.260
I've never done that.

00:07:37.260 --> 00:07:39.140
I'm just, you know, that's pretty interesting.

00:07:39.140 --> 00:07:46.160
And then also specifying the type for, say, a generator or something that yields some kind of iterator.

00:07:46.160 --> 00:07:47.240
It's pretty interesting.

00:07:47.240 --> 00:07:52.180
There's also a generator, actual generator type decoration that takes three arguments that's not covered in here.

00:07:52.180 --> 00:07:54.920
So that's also potentially worth noting.

00:07:54.920 --> 00:07:56.080
But yeah, very cool stuff.

00:07:56.080 --> 00:07:58.240
And I think this is a nice find.

00:07:58.240 --> 00:07:58.560
Cool.

00:07:58.560 --> 00:07:58.920
Nice.

00:07:58.920 --> 00:08:02.700
Now, before we get on to the next thing, I want to tell you quickly about DigitalOcean.

00:08:02.700 --> 00:08:04.120
Like I said, they're sponsoring the show.

00:08:04.120 --> 00:08:07.260
And they have lots of good reasons to go check them out.

00:08:07.260 --> 00:08:12.180
Something that they just announced that's coming soon and is available for early access is Kubernetes.

00:08:12.180 --> 00:08:21.240
So if you have some kind of site that you would like to run on a Kubernetes cluster, you can now go first visit pythonbytes.fm/DigitalOcean.

00:08:21.460 --> 00:08:24.020
Create an account so you get the free $100 credit.

00:08:24.020 --> 00:08:27.900
And then go to DigitalOcean.com slash products slash Kubernetes.

00:08:27.900 --> 00:08:31.460
And you can sign up for early access to check that out.

00:08:31.460 --> 00:08:38.440
So then you can submit containers to run on the Kubernetes cluster and have simple zero downtime deployments.

00:08:38.920 --> 00:08:40.420
That's actually very, very cool.

00:08:40.420 --> 00:08:40.780
Yeah.

00:08:40.780 --> 00:08:42.680
I'm pretty excited about that coming along.

00:08:42.680 --> 00:08:43.520
That's going to be fun.

00:08:44.200 --> 00:08:48.080
So every now and then we cover these sort of higher level topics.

00:08:48.080 --> 00:08:49.440
A little softer.

00:08:49.440 --> 00:08:52.460
Here's one that tries to look a little bit farther in the future.

00:08:52.460 --> 00:08:58.300
And I'm just going to put these out there and then I'll let you give me your, you react to this article.

00:08:58.300 --> 00:08:58.640
Okay.

00:08:58.680 --> 00:09:04.020
So the overall theme here is that Python is driving the creation and foundation of new languages.

00:09:04.020 --> 00:09:04.360
Okay.

00:09:04.360 --> 00:09:10.220
So this was an article and it says, here are five predictions for what programming will look like in 10 years.

00:09:10.220 --> 00:09:11.800
Programming will be, okay.

00:09:11.800 --> 00:09:14.020
So number one, programming will be more abstract.

00:09:14.020 --> 00:09:17.340
When I first read that, I'm like, oh, please don't tell me it's drag and drop.

00:09:17.340 --> 00:09:20.500
UML again or something like this, right?

00:09:20.500 --> 00:09:25.000
But no, they say that trends like serverless technology containers, we just talked about Kubernetes,

00:09:25.340 --> 00:09:30.660
and low code platforms suggest that developers may be able to work at higher level of abstractions in the future,

00:09:30.660 --> 00:09:32.300
not thinking about servers, for example.

00:09:32.300 --> 00:09:34.020
And that sounds reasonable.

00:09:34.020 --> 00:09:35.840
Yeah, to some extent.

00:09:35.840 --> 00:09:36.060
Yeah.

00:09:36.060 --> 00:09:36.340
Yeah.

00:09:36.340 --> 00:09:36.820
Potentially.

00:09:36.820 --> 00:09:40.960
AI will become a part of every developer's toolkit, but it won't replace them.

00:09:40.960 --> 00:09:41.560
What do you think?

00:09:41.560 --> 00:09:44.340
I don't buy that actually, but okay.

00:09:44.340 --> 00:09:46.840
You have some comment I could say to some of the voice assistants,

00:09:46.840 --> 00:09:49.980
but I'm pretty sure I'll set off like thousands of them, so I won't do it.

00:09:49.980 --> 00:09:51.260
All right.

00:09:51.260 --> 00:09:54.040
A universal programming language will arise.

00:09:54.040 --> 00:09:54.880
Well, Python.

00:09:55.460 --> 00:09:56.160
It's already arisen.

00:09:56.160 --> 00:09:57.480
So, yeah.

00:09:57.480 --> 00:10:03.720
So, the reason this whole article was pretty interesting is it has a pretty strong Python influence.

00:10:03.720 --> 00:10:06.860
So, for example, at the beginning it says, look, just in the last few years,

00:10:06.860 --> 00:10:09.020
some languages have risen and some have fallen.

00:10:09.020 --> 00:10:12.220
And like the have risen links to an interesting article about Python,

00:10:12.220 --> 00:10:15.380
the have fallen links to an interesting one about Ruby, for example.

00:10:15.380 --> 00:10:18.300
And then under this section, there's a nice quote that says,

00:10:18.300 --> 00:10:22.800
Python may be remembered as being the great, great, great grandmother of languages,

00:10:22.800 --> 00:10:26.700
of the languages of the future, which underneath the hood may look like English,

00:10:26.700 --> 00:10:28.460
but are actually far easier to use.

00:10:28.460 --> 00:10:28.800
Okay.

00:10:28.800 --> 00:10:29.480
Yeah.

00:10:29.800 --> 00:10:30.160
Okay.

00:10:30.160 --> 00:10:31.740
You ready for my reaction yet, or you got more?

00:10:31.740 --> 00:10:32.120
I'm ready.

00:10:32.120 --> 00:10:32.600
You can bring it.

00:10:32.680 --> 00:10:39.360
I think some of the things are, one of the jokes about Python sometimes is that it's runnable pseudocode.

00:10:39.360 --> 00:10:40.760
I don't like it.

00:10:40.820 --> 00:10:50.180
I don't actually want it to get closer to English because English has so many subtleties and weird things that you can do that have implied meaning

00:10:50.180 --> 00:10:56.880
that the closer we get to the actual English language, actually the harder it is to actually debug something.

00:10:56.880 --> 00:11:04.820
So having it not be that close, I think is better because it's less up for interpretation.

00:11:04.820 --> 00:11:05.240
Right.

00:11:05.240 --> 00:11:06.540
Please read that sentence.

00:11:06.540 --> 00:11:09.760
The people over there have already read the red sign, you know, things like that.

00:11:09.760 --> 00:11:10.560
Yeah.

00:11:10.560 --> 00:11:15.240
I'm not so sure that a universal language will arise either.

00:11:15.240 --> 00:11:22.260
There's always something you may want to take most advantage of, and by doing so, you make it less good for other things.

00:11:22.260 --> 00:11:26.220
For example, look at like, say, the data science tool set.

00:11:26.220 --> 00:11:31.580
It's better working with sets of data than individual things.

00:11:31.580 --> 00:11:31.940
I don't know.

00:11:31.940 --> 00:11:36.660
There's just like, it focuses on one thing, and so then other things become less easy with it.

00:11:36.660 --> 00:11:37.500
All right.

00:11:37.500 --> 00:11:38.460
So, I don't know.

00:11:38.460 --> 00:11:44.920
One of the changes, which is nice, is that the languages are not being developed in the vacuum that they used to be.

00:11:44.920 --> 00:11:46.400
They're learning from each other.

00:11:46.400 --> 00:11:47.380
Yeah, that's for sure.

00:11:47.520 --> 00:11:52.980
And we're getting the mega cool feature in one language that we would like to have in another.

00:11:52.980 --> 00:11:53.980
We're already seeing that.

00:11:53.980 --> 00:11:57.320
Python's taking some features from other languages and pulling it in.

00:11:57.320 --> 00:11:59.620
Other features are taking cool languages.

00:12:00.120 --> 00:12:06.620
Now, I've heard from a lot of people that hardly any other languages have good testing tools like pytest.

00:12:07.180 --> 00:12:10.200
Specifically, they don't have pytest for other languages.

00:12:10.200 --> 00:12:14.580
And that would be cool if we could have some better testing tools in other languages.

00:12:14.580 --> 00:12:15.280
Yeah.

00:12:15.280 --> 00:12:16.600
I mean, there's certainly examples of that.

00:12:16.600 --> 00:12:20.180
Like Swift, Apple's Swift is very much Python inspired.

00:12:20.180 --> 00:12:26.700
You see like the optional, the null coalescing operator being moved towards Python and 3A potentially.

00:12:26.700 --> 00:12:27.340
Things like that.

00:12:27.400 --> 00:12:28.260
So, I agree.

00:12:28.260 --> 00:12:30.540
I definitely see it as a blending.

00:12:30.540 --> 00:12:31.960
I don't know if there'll be a single one.

00:12:31.960 --> 00:12:32.440
So, all right.

00:12:32.440 --> 00:12:32.960
The final two.

00:12:32.960 --> 00:12:34.840
Every developer will need to work with data.

00:12:34.840 --> 00:12:36.820
I think that they're doing that now, right?

00:12:36.820 --> 00:12:38.460
Yeah, I think that's already.

00:12:38.460 --> 00:12:39.960
We always have.

00:12:39.960 --> 00:12:40.660
Yeah.

00:12:40.660 --> 00:12:45.000
And then programming will become a core tenant of the education system, like reading and writing.

00:12:45.000 --> 00:12:45.980
I believe that.

00:12:45.980 --> 00:12:46.440
I do too.

00:12:46.440 --> 00:12:48.880
It isn't necessarily like reading and writing.

00:12:48.880 --> 00:12:53.560
I think it's more like learning biology and basic chemistry.

00:12:53.800 --> 00:12:58.900
It's not that you actually need it every day, but it's good that most people kind of understand how it sort of works.

00:12:58.900 --> 00:13:00.100
Yeah, I'm totally with you.

00:13:00.100 --> 00:13:04.060
And the thing I think it will eject from the education system is geometry.

00:13:04.060 --> 00:13:13.760
I feel like the reason that geometry is taught in middle school and high school is so that critical thinking and proof type of logical thought can be taught.

00:13:13.760 --> 00:13:17.540
Like you don't really need to prove this thing about isosceles triangles.

00:13:17.540 --> 00:13:18.860
Like that doesn't help you in life.

00:13:18.860 --> 00:13:20.900
But the thought process does.

00:13:21.060 --> 00:13:26.920
And I feel like programming, you have the same type of thought processes, but you get a skill, not just a grade.

00:13:26.920 --> 00:13:28.700
Anyway, that's my prediction.

00:13:28.700 --> 00:13:29.320
That's interesting.

00:13:29.320 --> 00:13:29.800
Yeah.

00:13:29.800 --> 00:13:30.200
Yeah.

00:13:30.200 --> 00:13:30.980
We'll see about that.

00:13:30.980 --> 00:13:32.000
All right.

00:13:32.000 --> 00:13:35.620
So another one on async.io, something I've been digging into a ton lately.

00:13:35.620 --> 00:13:36.360
Yeah.

00:13:36.360 --> 00:13:40.240
I wasn't even aware that this was a thing going on.

00:13:40.300 --> 00:13:47.360
But apparently the standard library async.io documentation was completely rewritten from scratch recently.

00:13:47.360 --> 00:13:48.040
That's awesome.

00:13:48.040 --> 00:13:48.580
That's big news.

00:13:48.580 --> 00:13:49.320
Yeah.

00:13:49.320 --> 00:13:51.680
It even says it in the in the tweet announcement.

00:13:51.680 --> 00:13:54.580
This is big news with like two flames on the side.

00:13:54.580 --> 00:14:00.220
So I haven't actually read through this a whole bunch, but it does look like there's quite a bit of documentation there.

00:14:00.220 --> 00:14:01.000
So that's neat.

00:14:01.000 --> 00:14:01.460
That's really cool.

00:14:01.460 --> 00:14:02.540
And it says they're not done.

00:14:02.540 --> 00:14:10.680
So there's a comment that there's this is just the beginning that there's they're going to add some tutorials for high level concepts and APIs.

00:14:10.680 --> 00:14:16.960
And then they're also going to keep going because apparently there's some new things planned for 3.8.

00:14:16.960 --> 00:14:17.760
Yeah, that's awesome.

00:14:17.760 --> 00:14:18.060
Yeah.

00:14:18.060 --> 00:14:24.520
You highlight some of the things coming for async.io itself, like the library and the capabilities async and await are getting better, right?

00:14:24.520 --> 00:14:24.740
Yeah.

00:14:24.740 --> 00:14:28.400
And I think this sort of talks to the importance of async in the future.

00:14:28.400 --> 00:14:44.960
If not only are people still working on making improving the async story within Python, but they're also trying to improve the documentation to make sure that it's usable, which I'm glad to see that sort of documentation going side by side with new concepts.

00:14:44.960 --> 00:14:46.360
That's a good thing.

00:14:46.360 --> 00:14:46.820
Yeah.

00:14:46.820 --> 00:14:49.360
But that kind of highlights the importance of async going forward.

00:14:49.360 --> 00:14:52.260
Yeah, I think async is just becoming increasingly important.

00:14:52.680 --> 00:15:02.520
And I'm really glad to see it really gaining some momentum because if you look at apps written with and without async in a library that can take advantage of it, it's like night and day.

00:15:02.520 --> 00:15:03.280
It's ridiculous.

00:15:03.280 --> 00:15:07.740
And I think that, like you said, again, it's a different concept sort of thing.

00:15:07.740 --> 00:15:12.840
You can think in higher level concepts and break problems up into the more logical breaking points.

00:15:12.840 --> 00:15:13.220
Right.

00:15:13.220 --> 00:15:16.240
You don't have to think about threads and processes and coordination and all that.

00:15:16.240 --> 00:15:20.140
You just say, I'm going to do this part, then I'll wait, then I'll do that part, then I'll wait, then I'll do that part.

00:15:20.580 --> 00:15:22.860
And then, you know, that's sort of that higher level abstraction.

00:15:22.860 --> 00:15:23.140
Yeah.

00:15:23.140 --> 00:15:23.460
Yeah.

00:15:23.460 --> 00:15:28.840
You want to get caught up on all the places that Python is headed, all the directions, all the threads.

00:15:28.840 --> 00:15:30.100
Yeah, definitely.

00:15:30.100 --> 00:15:34.520
So there was the 2018 Python Language Summit.

00:15:34.520 --> 00:15:35.340
Okay.

00:15:35.340 --> 00:15:38.840
That's where all the core developers get together and they talk about what they're doing.

00:15:38.840 --> 00:15:45.120
They do proposals to each other like, hey, I think we should focus on this or we need to address that and so on.

00:15:45.220 --> 00:15:51.560
And there's some really interesting items on lwn.net, which is a pretty interesting site.

00:15:51.560 --> 00:15:54.240
They've got a lot of great stuff, mostly focused on Linux.

00:15:54.240 --> 00:15:58.260
It's kind of like the Craigslist of Linux news or something.

00:15:58.260 --> 00:15:58.600
I don't know.

00:15:58.600 --> 00:15:59.740
It's got an interesting design.

00:15:59.740 --> 00:16:05.160
But basically, this is a meta article about the Python Language Summit this year.

00:16:05.540 --> 00:16:10.680
And it lists off a whole bunch of sessions, each of which are covered in detail in another article.

00:16:10.680 --> 00:16:14.420
So what I'm going to do is cover the high level bits of each one of these main sessions.

00:16:14.420 --> 00:16:14.660
Okay.

00:16:14.660 --> 00:16:15.040
Okay.

00:16:15.120 --> 00:16:18.940
So the first one is, could we have sub-interpreter support for Python?

00:16:18.940 --> 00:16:21.260
So we were just talking about asyncio and stuff.

00:16:21.260 --> 00:16:25.940
One of the main problems, I don't know if I'd call it really a problem because there's a lot of ways around it, actually.

00:16:25.940 --> 00:16:34.400
But conceptions is that Python's not great for threading, specifically around taking advantage of multiple cores for CPU stuff because of the gill.

00:16:34.400 --> 00:16:34.860
Right?

00:16:34.860 --> 00:16:38.860
It could have 100 threads and only one will run at a time if it's pure Python because of the gill.

00:16:38.960 --> 00:16:52.700
So the suggestion is, could we take this feature, which is apparently already in Python, called sub-interpreter support to create like semi, like lightweight sub-processes that run within the same process?

00:16:52.700 --> 00:16:57.060
So sub-interpreters will allow multiple Python interpreters per process.

00:16:57.060 --> 00:17:02.800
And there's potential for zero copy data sharing between them and things like that, which is pretty cool.

00:17:02.800 --> 00:17:03.280
That's interesting.

00:17:03.280 --> 00:17:05.660
It might be interesting even for versioning, right?

00:17:05.700 --> 00:17:08.880
Like this library requires this version where that library requires that version.

00:17:08.880 --> 00:17:11.200
Well, you can run like maybe multiple sub-interpreters.

00:17:11.200 --> 00:17:11.880
I don't know.

00:17:11.880 --> 00:17:13.320
That's a whole different angle.

00:17:13.320 --> 00:17:14.720
And it wasn't part of this presentation.

00:17:14.720 --> 00:17:19.660
But they say the problem is that sub-interpreters currently share the gill.

00:17:19.660 --> 00:17:26.820
So the potential work is, could we make them not share the GIL so they actually can take advantage of multiple cores?

00:17:26.820 --> 00:17:27.180
Yeah.

00:17:27.180 --> 00:17:27.560
Right?

00:17:27.560 --> 00:17:28.560
Like it's becoming a thing.

00:17:28.560 --> 00:17:33.500
So like my MacBook, my new MacBook here has 12 cores as far as the OS sees it.

00:17:33.960 --> 00:17:41.580
And if I write Python code and it takes full advantage of all the processor that it can in single thread, it's only 8.3% of the capacity of the CPU.

00:17:41.580 --> 00:17:44.660
That's a lot less than, you know, 100%.

00:17:44.660 --> 00:17:48.480
So having features like this to let you do more computation would be great.

00:17:48.480 --> 00:17:48.720
Yeah.

00:17:48.720 --> 00:17:49.040
All right.

00:17:49.040 --> 00:17:52.580
So I don't want to go too deep in these because it'll like make this an hour-long show.

00:17:52.580 --> 00:17:53.660
So I'll try to go a little quicker.

00:17:54.160 --> 00:17:56.540
So the next one is modifying the Python object model.

00:17:56.540 --> 00:17:58.940
Looking at CPython's structure.

00:17:58.940 --> 00:18:10.100
So Carl Shapiro from Instagram talked about how they might rework the way the interpreter interacts with classes for better performance and memory and stuff.

00:18:10.100 --> 00:18:11.640
Because Instagram is all about that.

00:18:11.640 --> 00:18:18.720
It's one of the interesting things in this article is that there was some controversy around like the presentation and some other stuff.

00:18:18.780 --> 00:18:19.660
So I'll let you read about it.

00:18:19.660 --> 00:18:22.040
I won't bring it up here, but it's worth looking at.

00:18:22.040 --> 00:18:24.980
We just talked about the GIL for parallelism.

00:18:24.980 --> 00:18:31.120
And Larry Hastings has been on and off working on this thing called the gillectomy, the removal of the gill.

00:18:31.240 --> 00:18:41.280
And the GIL basically is a thread protection around allocation in Python, which means you don't have to like take a bunch of fine-grained locks when you're allocating new objects.

00:18:41.280 --> 00:18:44.760
But because of that, it means only one instruction can run at a time.

00:18:44.760 --> 00:18:49.180
So could we take that out and then have a Python that does like true parallelism?

00:18:49.180 --> 00:18:51.260
Basically, the update is not much has happened.

00:18:51.260 --> 00:18:57.100
So for better or worse, Marietta talked about using GitHub issues for Python.

00:18:57.100 --> 00:18:59.900
I didn't realize this wasn't already happening, but apparently it's not.

00:19:00.020 --> 00:19:04.760
Apparently there's another site that's currently being used and trying to move over to GitHub issues.

00:19:04.760 --> 00:19:05.520
That's pretty cool.

00:19:05.520 --> 00:19:08.720
Lucas talked about shortening the Python release cycle.

00:19:08.720 --> 00:19:12.880
So right now it's on an 18-month release cycle.

00:19:12.880 --> 00:19:16.160
So in 18 months from whenever 3.7 was out, 3.8 will be out.

00:19:16.160 --> 00:19:17.380
Can we make that yearly?

00:19:17.380 --> 00:19:18.640
It's possibly the conversation.

00:19:18.640 --> 00:19:19.400
So you can read in that.

00:19:19.400 --> 00:19:22.760
One that you might find interesting is unplugging old batteries.

00:19:23.260 --> 00:19:34.920
So unplugging old batteries, there's like encoding libraries for like formats that like predate MIME and other weird type of things that are in there that nobody likely uses anymore.

00:19:34.920 --> 00:19:38.120
So what is the process for taking stuff out of the standard library?

00:19:38.120 --> 00:19:40.600
There's a process for it getting in, but how do you get it out?

00:19:40.600 --> 00:19:41.600
Oh, that's interesting.

00:19:41.900 --> 00:19:48.640
Yeah, a lot of things could probably be not just completely eliminated, but moved to like just a pip package or something.

00:19:48.640 --> 00:19:49.100
Exactly.

00:19:49.100 --> 00:19:52.500
Like this is now out, but if you need it back, you can pip install it separately.

00:19:52.500 --> 00:19:54.440
But your job is to maintain it.

00:19:54.440 --> 00:19:55.720
Like we're not shipping it anymore.

00:19:55.720 --> 00:19:56.440
Something to that effect.

00:19:56.440 --> 00:19:56.920
It's kind of cool.

00:19:56.920 --> 00:19:57.440
Yeah.

00:19:57.500 --> 00:19:59.820
They talked about Linux distributions and Python 2.

00:19:59.820 --> 00:20:08.640
With Python 2 coming to end of life, what is the process for like basically getting those out of the Linux systems that they ship with?

00:20:08.640 --> 00:20:09.720
And how do we do that?

00:20:09.720 --> 00:20:12.600
You talked about Python's static typing.

00:20:12.600 --> 00:20:14.460
So there's an update on that.

00:20:14.460 --> 00:20:16.700
Mostly focused on stub files.

00:20:16.700 --> 00:20:18.160
Have you heard of stub files?

00:20:18.160 --> 00:20:18.880
Yeah.

00:20:18.880 --> 00:20:20.200
It's like the dot, dot, dot, right?

00:20:20.200 --> 00:20:24.800
I've looked at them and they basically are the method signature and then dot, dot, dot.

00:20:25.120 --> 00:20:26.500
And they're not actually the implementation.

00:20:26.500 --> 00:20:32.000
They're just saying here is the actual shape of this method.

00:20:32.000 --> 00:20:37.680
And so what you do is they get imported alongside of your code by things like mypy.

00:20:37.680 --> 00:20:44.420
So they're kept in this thing called the type shed, which is a place for third-party libraries to be in there.

00:20:44.420 --> 00:20:53.960
So you can look through there and see things like what type of stuff, like the context variable and what is its type definition, for example.

00:20:54.700 --> 00:20:56.680
So there's a bunch of things with dot, dot, dot, dot.

00:20:56.680 --> 00:21:00.560
They're just like empty, not implemented sort of structures.

00:21:00.560 --> 00:21:05.560
And so this is where a lot of the third-party stuff and the standard of the library goes.

00:21:05.560 --> 00:21:12.480
But they're saying, look, a lot of packages are not putting things here, like namely things like Django and SQLAlchemy.

00:21:12.580 --> 00:21:24.880
So there's a proposal of finding a way to bind the type information to the package and not to the central location so that package maintainers can ship those stubs along with their libraries.

00:21:24.880 --> 00:21:26.520
Yeah, that would make more sense.

00:21:26.520 --> 00:21:28.200
Or at least it would make some sense.

00:21:28.200 --> 00:21:29.380
Yeah, like it'd be easier.

00:21:29.480 --> 00:21:32.220
Because then you don't have to, say, like do a PR to some other repo.

00:21:32.220 --> 00:21:34.540
Like you just put it along with your library and it's in PIP.

00:21:34.540 --> 00:21:34.820
Yeah.

00:21:34.820 --> 00:21:35.440
It's in PyPI.

00:21:35.440 --> 00:21:35.800
Okay.

00:21:35.900 --> 00:21:41.300
So Python virtual environments, there's some debate about whether they're useful and what we might do instead.

00:21:41.460 --> 00:21:49.780
Primarily around, like if you're trying to teach Python, you shouldn't have to start out with a 20-minute conversation of how to do virtual environments both on Linux, Windows, and macOS.

00:21:49.780 --> 00:21:54.680
And then you can actually talk about Hello World, but just how do we just do that?

00:21:54.680 --> 00:21:57.080
So an interesting debate there.

00:21:57.080 --> 00:22:03.580
There was some conversation around the whole new decision-making process now that Guido stepped down.

00:22:04.460 --> 00:22:11.960
Another one about getting along in the Python community, trying to make things like the dev mailer list be more interesting and welcoming as well.

00:22:11.960 --> 00:22:15.660
Also, finally, mentoring and diversity for Python with Marietta.

00:22:15.660 --> 00:22:19.980
And Victor Stinner as well, two separate presentations in that general area.

00:22:19.980 --> 00:22:24.740
So there's every single one of these things I've talked about, there's an article about it and more references.

00:22:24.740 --> 00:22:28.600
And so if you want to dive into it, it's like it'll keep you busy for an afternoon.

00:22:28.600 --> 00:22:29.040
Okay.

00:22:29.040 --> 00:22:32.860
One of the things that you wrote down but we didn't talk about was TK Enter?

00:22:33.040 --> 00:22:46.140
Oh, so the one about getting along and being more civil on dev was somebody complaining that TK Enter is so badly out of date that it should be removed from Python, but it's shipped with Python, which kind of brings us back to how do we unplug old batteries?

00:22:46.140 --> 00:22:51.360
Because if people don't maintain it and it doesn't work for anyone, then why would TK Enter be there?

00:22:51.360 --> 00:22:56.200
So we might get back on another gooey kick if we go down that too far.

00:22:56.200 --> 00:22:56.820
Okay.

00:22:56.820 --> 00:22:59.060
Anyway, that's what that was about.

00:22:59.320 --> 00:23:03.440
The sort of rudeness on the mailing list was focused around TK Enter.

00:23:03.440 --> 00:23:03.840
Okay.

00:23:03.840 --> 00:23:06.180
And whether it needs to be upgraded, removed, whatever.

00:23:06.180 --> 00:23:06.620
All right.

00:23:06.620 --> 00:23:08.580
Well, that is it for the Python language summit.

00:23:08.580 --> 00:23:10.400
But I thought that was super interesting.

00:23:10.400 --> 00:23:13.440
And there's just so many looks at where people are putting their effort.

00:23:13.440 --> 00:23:16.140
I mean, this is where the core developers are focusing their time.

00:23:16.140 --> 00:23:18.240
So I think it's definitely worth paying attention to.

00:23:18.240 --> 00:23:19.100
Yeah, definitely.

00:23:19.100 --> 00:23:19.880
Cool.

00:23:19.880 --> 00:23:20.160
All right.

00:23:20.160 --> 00:23:20.480
You got it?

00:23:20.480 --> 00:23:22.320
Got anything else you want to share with folks while we're here?

00:23:22.400 --> 00:23:22.540
Yeah.

00:23:22.540 --> 00:23:23.120
One thing.

00:23:23.120 --> 00:23:26.600
I noticed this from – I'm going to get his name wrong.

00:23:26.600 --> 00:23:28.380
Anthony Saudeel?

00:23:28.380 --> 00:23:29.340
Anthony Saudeel.

00:23:29.340 --> 00:23:30.920
Code with Anthony on Twitter.

00:23:30.920 --> 00:23:37.120
I mentioned that pre-commit had a huge jump in downloads on July 30th.

00:23:37.120 --> 00:23:40.840
And I first assumed that it was because we covered it or something.

00:23:40.840 --> 00:23:43.660
But apparently it didn't line up with us covering it.

00:23:43.660 --> 00:23:44.920
You should have covered it earlier.

00:23:44.920 --> 00:23:46.060
Could have gotten credit, but no.

00:23:46.060 --> 00:23:56.900
But I looked at other packages and there is a weird jump in almost all package downloads starting at the end of July.

00:23:56.900 --> 00:23:58.800
I don't have any news around that.

00:23:58.800 --> 00:23:59.920
Just that's weird.

00:23:59.920 --> 00:24:01.200
And I wonder what's going on.

00:24:01.280 --> 00:24:06.080
You know, I wonder if that has to do with when the new PyPI launched.

00:24:06.080 --> 00:24:06.840
Oh, yeah.

00:24:06.840 --> 00:24:07.220
I wonder.

00:24:07.220 --> 00:24:11.480
And it's almost coincident with the pip 18 as well.

00:24:11.480 --> 00:24:13.240
The new PyPI launched in April.

00:24:13.240 --> 00:24:15.280
So, yeah, it could be with pip 18.

00:24:15.280 --> 00:24:15.860
Who knows?

00:24:15.860 --> 00:24:17.800
I bet it's some low-level infrastructure thing.

00:24:17.800 --> 00:24:22.520
Like caching got expired and everything that had cached it everywhere got a new one or something.

00:24:22.520 --> 00:24:22.960
Yeah.

00:24:22.960 --> 00:24:25.700
Maybe they changed the way they were caching it or something.

00:24:25.700 --> 00:24:30.360
I do remember seeing that from pip that every now and then, like, if you run a sufficiently old PIP,

00:24:30.920 --> 00:24:35.600
it'll say that it's, like, its offline cache is not compatible and it'll redownload.

00:24:35.600 --> 00:24:39.360
So, I'm wondering if in the reverse direction when a new pip came out, that may happen.

00:24:39.360 --> 00:24:44.580
So, I bring that up so that if anybody knows what's going on, they can get a hold of us and we can find out.

00:24:44.580 --> 00:24:44.820
Yeah.

00:24:44.820 --> 00:24:45.460
Throw in the show notes.

00:24:45.460 --> 00:24:47.000
Pythonbytes.fm slash 96.

00:24:47.000 --> 00:24:47.440
Yeah.

00:24:47.440 --> 00:24:53.220
And that's one of the things that I love about this is because we can talk about things that we don't quite know about and people will correct us.

00:24:53.220 --> 00:24:55.880
They're generally pretty nice about it, too.

00:24:55.880 --> 00:24:56.600
So, thank you for that.

00:24:56.600 --> 00:24:56.840
Yeah.

00:24:56.980 --> 00:25:01.280
So, one of the things that somebody mentioned, we've talked about Pi Cuda.

00:25:01.280 --> 00:25:02.000
Cudpie.

00:25:02.000 --> 00:25:02.720
Did I get that right?

00:25:02.720 --> 00:25:03.400
I think it was Cudpie.

00:25:03.400 --> 00:25:03.520
Cudpie.

00:25:03.520 --> 00:25:04.360
Yeah.

00:25:04.360 --> 00:25:04.840
Cudpie.

00:25:04.840 --> 00:25:05.420
Yeah, Cudpie.

00:25:05.420 --> 00:25:05.820
Cudpie.

00:25:06.120 --> 00:25:10.400
We were guessing that maybe if you had a video card on your laptop, maybe you could use it.

00:25:10.400 --> 00:25:17.060
But we were corrected that it would have to be an NVIDIA card because Cuda only runs on NVIDIA.

00:25:17.060 --> 00:25:17.280
Yeah.

00:25:17.280 --> 00:25:20.360
So, apparently Cuda is an NVIDIA thing, which I didn't realize.

00:25:20.360 --> 00:25:22.620
I thought it was just a graphics card standard.

00:25:22.620 --> 00:25:23.980
But, no, it's an NVIDIA thing.

00:25:23.980 --> 00:25:26.840
So, this is all triggered by your question.

00:25:26.840 --> 00:25:28.740
Could I do this on my MacBook or on my laptop?

00:25:29.200 --> 00:25:33.700
If you have, like, a Windows or Linux laptop that has an NVIDIA card, yes.

00:25:33.700 --> 00:25:34.740
Otherwise, no.

00:25:34.740 --> 00:25:35.520
Apparently, it's the answer.

00:25:35.520 --> 00:25:38.940
So, a couple people wrote us and communicated that to us.

00:25:38.940 --> 00:25:39.960
So, thank you all for that.

00:25:39.960 --> 00:25:43.440
I guess if you're on a MacBook, you could get an external.

00:25:43.440 --> 00:25:46.180
On the new ones, you can do external GPUs.

00:25:46.180 --> 00:25:47.800
And you could get an NVIDIA one there.

00:25:47.980 --> 00:25:51.840
But even the one sold by Apple is actually a Radeon, so it doesn't help you.

00:25:51.840 --> 00:25:52.260
Okay.

00:25:52.260 --> 00:25:54.940
So, anyway, just thanks for the clarification.

00:25:54.940 --> 00:25:55.500
Yeah.

00:25:55.500 --> 00:25:56.940
Do you have anything else to add?

00:25:56.940 --> 00:25:57.580
Nothing else.

00:25:57.580 --> 00:25:58.560
Not right now.

00:25:58.560 --> 00:26:00.660
I have some good news next week I'm going to share.

00:26:00.660 --> 00:26:02.200
But right now, nothing to say.

00:26:02.200 --> 00:26:02.760
All right.

00:26:02.760 --> 00:26:03.360
Well, thanks a lot.

00:26:03.360 --> 00:26:04.500
Just working away on projects.

00:26:04.500 --> 00:26:05.100
Yeah, thank you.

00:26:05.100 --> 00:26:06.600
Great to chat with you, as always.

00:26:06.600 --> 00:26:06.920
Yeah.

00:26:06.920 --> 00:26:10.000
Thank you for listening to Python Bytes.

00:26:10.000 --> 00:26:12.560
Follow the show on Twitter via at Python Bytes.

00:26:12.560 --> 00:26:15.440
That's Python Bytes as in B-Y-T-E-S.

00:26:15.800 --> 00:26:18.860
And get the full show notes at pythonbytes.fm.

00:26:18.860 --> 00:26:23.220
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:23.220 --> 00:26:25.900
We're always on the lookout for sharing something cool.

00:26:25.900 --> 00:26:29.300
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:29.300 --> 00:26:32.920
Thank you for listening and sharing this podcast with your friends and colleagues.

