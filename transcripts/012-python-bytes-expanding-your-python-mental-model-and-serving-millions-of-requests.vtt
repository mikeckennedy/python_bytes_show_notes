
00:00:00.000 --> 00:00:06.060
This is Python Bytes, Python headlines and news delivered directly to your earbuds.


00:00:06.060 --> 00:00:10.640
It's episode 12 recorded February 6, 2016.


00:00:10.640 --> 00:00:15.040
This is Michael Kennedy, one of your hosts here with my co-host Brian Okken.


00:00:15.040 --> 00:00:16.440
Hey, Brian, how's it going, man?


00:00:16.440 --> 00:00:17.440
It's going really good.


00:00:17.440 --> 00:00:21.720
Yeah, I'm super excited to talk about what we got to cover today.


00:00:21.720 --> 00:00:22.720
But I also want to say thank you.


00:00:22.720 --> 00:00:26.120
I want to say thank you to Rollbar because they're sponsoring this episode and I'll tell


00:00:26.120 --> 00:00:28.720
you more about their cool stuff that they do later.


00:00:28.720 --> 00:00:33.800
Let's start out with the way that you think about programming, because learning to program


00:00:33.800 --> 00:00:37.460
is somewhat learning the syntax, but it's also just learning the mental models of what


00:00:37.460 --> 00:00:39.040
programming means, right?


00:00:39.040 --> 00:00:45.200
Yeah, and I did realize that when you think about Python, the problems in problem solving


00:00:45.200 --> 00:00:50.720
is different in Python than in other language, just because of the idiosyncrasies of the


00:00:50.720 --> 00:00:53.400
language and how people tend to do things.


00:00:53.400 --> 00:00:58.600
couple of good articles that I stumbled across and I think actually I think one of them is a


00:00:58.600 --> 00:01:05.160
anyway so there's there's Python functions aren't what you think and this is on a site called


00:01:05.160 --> 00:01:12.200
Powerful Python and it's a short little article just talking about that functions are really just


00:01:12.200 --> 00:01:17.800
objects that that happen to have a name that's the name of the function that you gave it and


00:01:18.920 --> 00:01:24.760
they're really that much different than giving a variable the value of five.


00:01:24.760 --> 00:01:27.480
You just give a variable a value of a function.


00:01:27.480 --> 00:01:31.160
It does change the way you, if you can think about functions that way,


00:01:31.160 --> 00:01:34.280
you can change the way you do some things.


00:01:34.280 --> 00:01:39.400
You know, not surprisingly, I think it really enables functional programming type of metaphors.


00:01:39.400 --> 00:01:43.320
Just the whole concept of treating functions as first class objects, right?


00:01:43.320 --> 00:01:47.000
Functions are like variables or like classes or like whatever.


00:01:47.000 --> 00:01:48.760
And I think that's really interesting.


00:01:48.760 --> 00:01:52.960
It's really super important for things like lambdas and closures


00:01:52.960 --> 00:01:54.560
that we can treat functions this way.


00:01:54.560 --> 00:01:58.920
But even normal functions are basically the same thing, right?


00:01:58.920 --> 00:02:03.640
Yeah, and that you can just throw one in a data structure and use it later.


00:02:03.640 --> 00:02:05.320
It is cool.


00:02:05.320 --> 00:02:08.280
What I thought was weird was you can change the dunder name of a function.


00:02:08.280 --> 00:02:09.840
That was news to me.


00:02:09.840 --> 00:02:10.800
Oh, yeah.


00:02:10.800 --> 00:02:13.360
Yeah, I've never tried to do that.


00:02:13.360 --> 00:02:14.480
Neither have I.


00:02:14.480 --> 00:02:15.880
It seems a little evil, but.


00:02:15.880 --> 00:02:17.320
(laughing)


00:02:17.320 --> 00:02:18.160
- A little bit.


00:02:18.160 --> 00:02:21.760
- And then another article called the Tao of Python,


00:02:21.760 --> 00:02:23.600
which I think is just a cute name,


00:02:23.600 --> 00:02:25.520
but it's actually a Jupyter notebook


00:02:25.520 --> 00:02:27.680
that talks about the relationship


00:02:27.680 --> 00:02:31.000
between objects, classes, and meta-classes.


00:02:31.000 --> 00:02:34.380
And again, it's a similar thing of


00:02:34.380 --> 00:02:35.880
not just functions or objects,


00:02:35.880 --> 00:02:40.320
but even classes themselves are objects.


00:02:40.320 --> 00:02:41.520
- Right, right.


00:02:41.520 --> 00:02:43.800
And their classes are meta-classes, right?


00:02:43.800 --> 00:02:46.320
which is, it's very crazy.


00:02:46.320 --> 00:02:47.680
It definitely is a mental shift,


00:02:47.680 --> 00:02:49.120
especially the meta programming,


00:02:49.120 --> 00:02:51.840
and that's something I could learn more about


00:02:51.840 --> 00:02:53.360
personally as well.


00:02:53.360 --> 00:02:56.080
- Yeah, me too, and I haven't really made use of it a lot,


00:02:56.080 --> 00:02:59.160
but it's kind of one of those things


00:02:59.160 --> 00:03:02.120
of if you can think about the whole thing


00:03:02.120 --> 00:03:07.120
and how it fits together in just a little mental overview,


00:03:07.120 --> 00:03:08.080
I think it helps.


00:03:08.080 --> 00:03:09.120
- Yeah, excellent.


00:03:09.120 --> 00:03:10.760
All right, number two, the one that I chose


00:03:10.760 --> 00:03:13.780
is an article by a friend of the show, Dan Bader,


00:03:13.780 --> 00:03:17.380
And his article he wrote, which I helped him a little bit with,


00:03:17.380 --> 00:03:20.340
you'll see at the very end, it's called "Why Learn Python?


00:03:20.340 --> 00:03:23.080
Here are 8 Data-Driven Reasons."


00:03:23.080 --> 00:03:26.500
And people send me messages and say, "Hey, Michael,


00:03:26.500 --> 00:03:29.960
I'm thinking about changing careers or aspects of my career.


00:03:29.960 --> 00:03:33.380
Maybe I'm a Java developer and I'm considering learning Python.


00:03:33.380 --> 00:03:34.520
Is it worth it?"


00:03:34.520 --> 00:03:39.380
And you'll see from this article, the answer is yes, yes, and absolutely yes.


00:03:39.380 --> 00:03:42.540
Python is the second most popular language in the world according


00:03:42.540 --> 00:03:46.380
to the popularity of programming language index.


00:03:46.380 --> 00:03:49.320
It's one of the hottest job skills to have according to Dice.


00:03:49.320 --> 00:03:56.060
And Dan lays out eight really well researched reasons why this is the case, basically to


00:03:56.060 --> 00:03:58.140
support these trends.


00:03:58.140 --> 00:04:01.420
And so, you know, it says you can learn pretty much anything with Python.


00:04:01.420 --> 00:04:04.380
It's widely used by data scientists.


00:04:04.380 --> 00:04:05.380
Python pays well.


00:04:05.380 --> 00:04:13.300
In fact, it's number two only to Ruby developers, according to Guru, but it has many more job


00:04:13.300 --> 00:04:15.620
openings than Ruby does.


00:04:15.620 --> 00:04:20.620
And it's on average above all the other developer salaries if you're looking at the US.


00:04:20.620 --> 00:04:26.060
So for example, they say, Indeed says the average Python developer in the US across


00:04:26.060 --> 00:04:32.340
all the regions, they're thinking that something between 103 and 116,000 a year, which is amazing


00:04:32.340 --> 00:04:33.340
really.


00:04:33.340 --> 00:04:34.340
Yeah.


00:04:34.340 --> 00:04:36.340
That's a good place to be, right?


00:04:36.340 --> 00:04:43.340
Yeah, I remember when C++ was up near one of the tops and it's now down at number seven now.


00:04:43.340 --> 00:04:46.340
Yeah, it's a Python world.


00:04:46.340 --> 00:04:54.340
One of the things that he didn't list, which I'm confused by, was that you can listen to this podcast.


00:04:54.340 --> 00:04:56.340
It's totally bizarre he forgot that.


00:04:56.340 --> 00:04:59.340
I mean, there's like a couple of good Python podcasts around this at least, right?


00:04:59.340 --> 00:05:03.340
Yeah, that's one of the good reasons to learn Python.


00:05:03.340 --> 00:05:05.020
- We'll add one in there, that's for sure.


00:05:05.020 --> 00:05:06.380
It definitely helps you.


00:05:06.380 --> 00:05:09.420
And so there's demand is growing for Python developers.


00:05:09.420 --> 00:05:10.380
It saves you time.


00:05:10.380 --> 00:05:11.360
It's beginner friendly,


00:05:11.360 --> 00:05:13.420
but you don't top out really quickly, right?


00:05:13.420 --> 00:05:16.140
Like it can be an advanced language as well.


00:05:16.140 --> 00:05:17.600
All the big companies are using it.


00:05:17.600 --> 00:05:19.360
So if you want to get a job somewhere cool,


00:05:19.360 --> 00:05:23.980
like YouTube or IBM or Mozilla or Quora or Instagram,


00:05:23.980 --> 00:05:27.020
all these companies are making major use of Python.


00:05:27.020 --> 00:05:28.300
So this could be your ticket there.


00:05:28.300 --> 00:05:31.300
And finally, Python has a great ecosystem.


00:05:31.300 --> 00:05:33.300
- Yeah, and one of the great things about articles


00:05:33.300 --> 00:05:36.380
like this are, we're preaching to the choir, of course,


00:05:36.380 --> 00:05:40.440
but a lot of people get those questions of like,


00:05:40.440 --> 00:05:42.400
well, why should I learn Python?


00:05:42.400 --> 00:05:46.380
And all I have usually have is it's fun and cool,


00:05:46.380 --> 00:05:47.300
and why not?


00:05:47.300 --> 00:05:49.020
So these are better reasons.


00:05:49.020 --> 00:05:51.060
- Yeah, this is really, it's a really great article,


00:05:51.060 --> 00:05:52.980
and of course we're linking to it.


00:05:52.980 --> 00:05:55.780
I think it's not, I mean, it's great to be preaching


00:05:55.780 --> 00:05:59.040
to the choir, but it's also interesting to provide this


00:05:59.040 --> 00:06:01.640
as fuel for people having these debates.


00:06:01.640 --> 00:06:02.880
Maybe they're working on a team,


00:06:02.880 --> 00:06:05.220
and they're like, "Well, what technology should we choose


00:06:05.220 --> 00:06:08.460
"for our next topic, our next project or something?"


00:06:08.460 --> 00:06:10.460
And having all that information there is like,


00:06:10.460 --> 00:06:12.480
"Hey, look, choosing Python is a really good bet.


00:06:12.480 --> 00:06:13.880
"You'll have lots of people who know it.


00:06:13.880 --> 00:06:16.240
"There's a lot of, you know, just, it's a good bet,


00:06:16.240 --> 00:06:17.960
"and I think this will help people make that case."


00:06:17.960 --> 00:06:21.960
- And I'm also a firm believer in just resume building.


00:06:21.960 --> 00:06:23.880
You don't know what the next job's gonna be like,


00:06:23.880 --> 00:06:27.020
and it probably won't use Python somewhere, so.


00:06:27.020 --> 00:06:28.040
- Yeah, absolutely.


00:06:28.040 --> 00:06:28.880
- Anyway.


00:06:28.880 --> 00:06:31.200
- All right, I bet people do some testing with Python.


00:06:31.200 --> 00:06:32.400
- Yeah, they do.


00:06:32.400 --> 00:06:36.640
And I was thrilled to have somebody write a pytest article


00:06:36.640 --> 00:06:37.940
'cause it's one of my favorites.


00:06:37.940 --> 00:06:40.680
So there's, and cool last name too.


00:06:40.680 --> 00:06:44.680
I think I'm gonna try this, Kevin Ndungu, I think.


00:06:44.680 --> 00:06:45.620
Ndungu?


00:06:45.620 --> 00:06:49.960
Anyway, testing Python applications with pytest.


00:06:49.960 --> 00:06:54.080
And it's a good introduction article


00:06:54.080 --> 00:06:56.960
to try to not scare people off too bad


00:06:56.960 --> 00:06:58.480
about some of the advanced features.


00:06:58.480 --> 00:07:02.000
But after jumping into it a little bit,


00:07:02.000 --> 00:07:05.320
He shows how easy it is, of course, to write tests,


00:07:05.320 --> 00:07:08.760
but then also takes a look at one of the common things that


00:07:08.760 --> 00:07:11.600
happens is you grow a whole bunch of tests,


00:07:11.600 --> 00:07:13.760
and then you want to refactor them.


00:07:13.760 --> 00:07:17.680
And there's a little bit about refactoring your tests


00:07:17.680 --> 00:07:20.040
by using fixtures and pulling out some


00:07:20.040 --> 00:07:22.040
of the common starting state.


00:07:22.040 --> 00:07:25.960
And then he jumps into a couple of the nice--


00:07:25.960 --> 00:07:27.920
one of the nice features of pytest, of course,


00:07:27.920 --> 00:07:30.120
is the parameterization of easily


00:07:30.120 --> 00:07:32.480
being able to throw multiple data sets


00:07:32.480 --> 00:07:35.040
at individual test function.


00:07:35.040 --> 00:07:38.880
And that was demonstrated pretty cleanly, I like that.


00:07:38.880 --> 00:07:39.720
- Nice.


00:07:39.720 --> 00:07:41.320
- Good job, Kevin, and I like the article.


00:07:41.320 --> 00:07:43.820
- Yeah, I really like the let's treat test code


00:07:43.820 --> 00:07:46.720
as production code, 'cause I feel like a lot of people


00:07:46.720 --> 00:07:48.600
will write tests and they're like,


00:07:48.600 --> 00:07:50.440
these tests are hard to maintain.


00:07:50.440 --> 00:07:52.880
And then you look at their test code and it's,


00:07:52.880 --> 00:07:55.680
you're like, why did you duplicate this bit of code 20 times?


00:07:55.680 --> 00:07:56.740
Like, what is this?


00:07:56.740 --> 00:07:58.360
Would you ever do this in a real app?


00:07:58.360 --> 00:07:59.200
That's insane.


00:07:59.200 --> 00:08:03.920
it's not a function or some other thing that you can use throughout your test, right?


00:08:03.920 --> 00:08:04.920
Yeah, definitely.


00:08:04.920 --> 00:08:08.560
Speaking of production, you don't want errors in your production, do you?


00:08:08.560 --> 00:08:09.760
No, of course not.


00:08:09.760 --> 00:08:11.360
No, not not too much.


00:08:11.360 --> 00:08:15.800
One of the first steps in solving errors in production is knowing about them.


00:08:15.800 --> 00:08:17.120
And that's where rollbar comes from.


00:08:17.120 --> 00:08:19.080
So rollbar supporting the show this week.


00:08:19.080 --> 00:08:20.080
Thank you, rollbar.


00:08:20.080 --> 00:08:24.960
And I've used rollbar for a long time on the website that delivers Python bytes and my


00:08:24.960 --> 00:08:26.980
training courses and all those things.


00:08:26.980 --> 00:08:33.240
And I would say at least five times Rollbar has saved me from some seriously bad choices


00:08:33.240 --> 00:08:34.460
that I've made.


00:08:34.460 --> 00:08:38.760
I've tested something locally where there was data in the database and I put it in a


00:08:38.760 --> 00:08:42.860
production I was about to start putting data but it was empty at the time and the code


00:08:42.860 --> 00:08:47.600
couldn't deal with empty sets and all sorts of stuff going on where something crashed


00:08:47.600 --> 00:08:49.340
on the site and I didn't realize it.


00:08:49.340 --> 00:08:54.180
And of course, Rollbar sent me a message popped up on my phone immediately and said, error


00:08:54.180 --> 00:08:57.300
in production, here's the exact details of what you need to fix.


00:08:57.300 --> 00:08:59.900
And I was like, ah, crap, you know, five minutes later, though, it was fixed.


00:08:59.900 --> 00:09:01.820
So thanks, roll bar for helping me out then.


00:09:01.820 --> 00:09:03.500
And thanks for sponsoring the show.


00:09:03.500 --> 00:09:04.500
Awesome.


00:09:04.500 --> 00:09:05.580
It was special offer for listeners.


00:09:05.580 --> 00:09:08.900
And I'll put that link in the show notes right at the top.


00:09:08.900 --> 00:09:12.580
Speaking of production, we would all like our code to run a little bit faster.


00:09:12.580 --> 00:09:18.460
And I feel like we're in this cool place with Python, especially Python versus legacy Python,


00:09:18.460 --> 00:09:25.580
Python 3.5, 3.6, and 3.7, the one that's coming, have really been focused on performance.


00:09:25.580 --> 00:09:30.420
And so there's a, you know, we talked about a web framework called Sanic that was based


00:09:30.420 --> 00:09:36.700
on AIO HTTP, which is an async pipeline for web processing.


00:09:36.700 --> 00:09:38.740
Well, here comes another one.


00:09:38.740 --> 00:09:45.300
And this one, it turns out, if the benchmarks are to be believed, is dramatically faster


00:09:45.300 --> 00:09:50.040
than even Sanic and lots of other things out there like Go.


00:09:50.040 --> 00:09:55.880
So it's called Jepronto, I'm not sure which, how you pronounce it, but I'll link to it.


00:09:55.880 --> 00:10:01.940
It describes itself as a screaming fast Python 3.5 and above web micro framework integrating


00:10:01.940 --> 00:10:08.980
with pipelining HTTP servers based on UV loop and Pico HTTP parser.


00:10:08.980 --> 00:10:15.460
So it came out just a few months ago, it has like 2,600 stars on GitHub.


00:10:15.460 --> 00:10:20.460
And the title of the article introducing it was handling a million requests per second


00:10:20.460 --> 00:10:21.460
with Python.


00:10:21.460 --> 00:10:25.220
Yeah, I think that's on on one server.


00:10:25.220 --> 00:10:26.540
So that's crazy.


00:10:26.540 --> 00:10:27.540
It is crazy fast.


00:10:27.540 --> 00:10:29.220
It's pretty exciting.


00:10:29.220 --> 00:10:34.620
If you read this article that we're linking to the guy who built it, he's doing a crazy


00:10:34.620 --> 00:10:41.440
amount of careful thought and low, low, low level OS type of optimization.


00:10:41.440 --> 00:10:46.920
Just to give you a sense, most of this is written in C, although he's thinking of rewriting


00:10:46.920 --> 00:10:47.920
it in Rust.


00:10:47.920 --> 00:10:52.760
He talks a bit about that and says, look, I'm going to call it Gepronto, going with


00:10:52.760 --> 00:10:53.760
that one.


00:10:53.760 --> 00:10:58.920
Gepronto tries to delay the creation of Python counterparts of its internal structures until


00:10:58.920 --> 00:11:00.840
explicitly asked.


00:11:00.840 --> 00:11:05.380
For example, normally when a request come in, the request object would be populated


00:11:05.380 --> 00:11:07.520
with headers.


00:11:07.520 --> 00:11:13.480
This framework won't actually create the headers dictionary unless you try to access it.


00:11:13.480 --> 00:11:17.920
It gives you only what you need at many, many levels and has some really cool low-level


00:11:17.920 --> 00:11:20.000
optimizations around pipelining.


00:11:20.000 --> 00:11:21.000
It's quite cool.


00:11:21.000 --> 00:11:24.880
Yeah, the pipelining description, I thought that was pretty interesting.


00:11:24.880 --> 00:11:27.560
Yeah, I hadn't really thought too much about that.


00:11:27.560 --> 00:11:29.760
Super, super cool.


00:11:29.760 --> 00:11:36.560
Related to this, I think that somebody on Twitter was commenting that, "Why are we worried about


00:11:36.560 --> 00:11:44.720
speed? Why isn't it better to be correct?" I guess I like to have both, and I think I'm


00:11:44.720 --> 00:11:51.080
intrigued by other people trying to get performance up. And I think it's, to me,


00:11:51.080 --> 00:11:55.940
it's important because I would hate to have somebody say, "Oh, eventually you're going to


00:11:55.940 --> 00:11:58.620
scale out of Python and need to switch over to go.


00:11:58.620 --> 00:11:59.920
Exactly.


00:11:59.920 --> 00:12:02.480
That that's the primary primary thing I think.


00:12:02.480 --> 00:12:06.140
And even if you're not going to scale out, if you start to hear lots of major


00:12:06.140 --> 00:12:09.660
companies saying we're all abandoning Python because they won't run our workloads.


00:12:09.660 --> 00:12:13.140
Even if that's not the situation you're in, it starts to like cast a


00:12:13.140 --> 00:12:16.100
shadow over the general ecosystem.


00:12:16.100 --> 00:12:17.020
Right.


00:12:17.020 --> 00:12:21.060
Where, whereas if you say, no, no, look at these amazing things that are


00:12:21.060 --> 00:12:22.620
being done with Python on the web.


00:12:23.100 --> 00:12:27.500
your stuff is going to be way lower traffic and load than that.


00:12:27.500 --> 00:12:29.700
Surely this will work for you as well, right?


00:12:29.700 --> 00:12:31.200
So I think it's really interesting.


00:12:31.200 --> 00:12:35.700
I mean, to be honest, Pyramid plus MicroWZ plus Nginx just straight up


00:12:35.700 --> 00:12:37.900
is way fast enough for what I'm doing,


00:12:37.900 --> 00:12:41.500
even with a couple million HTTP requests a month.


00:12:41.500 --> 00:12:46.200
But it's super cool to see that it's sort of expanding the upper bound.


00:12:46.200 --> 00:12:48.700
And I think that's going to have some great stories down the road.


00:12:48.700 --> 00:12:50.100
Yeah, definitely.


00:12:50.100 --> 00:12:54.780
So the next topic we've got is a good news thing


00:12:54.780 --> 00:12:57.220
that came out, was just announced today.


00:12:57.220 --> 00:13:01.420
The Rethink, and I'm not sure if you had RethinkDB on--


00:13:01.420 --> 00:13:02.980
- I did, I had them on my show.


00:13:02.980 --> 00:13:05.260
I can't remember the number, I think it's in the 60s


00:13:05.260 --> 00:13:08.020
on Talk Python TV, we talked about RethinkDB


00:13:08.020 --> 00:13:09.540
and the company behind it, yeah.


00:13:09.540 --> 00:13:12.120
- Yeah, and when I, I think I've heard about it


00:13:12.120 --> 00:13:14.180
because of Talk Python, but the,


00:13:14.180 --> 00:13:16.260
it was really intriguing to me,


00:13:16.260 --> 00:13:19.580
and I like the idea of somebody just from the ground up


00:13:19.580 --> 00:13:25.740
rethinking how databases work with live data and real-time data.


00:13:25.740 --> 00:13:33.100
But in September of last year the company shut down and I was curious,


00:13:33.100 --> 00:13:38.260
like everybody else was, is what's going to happen to RethinkDB. But I guess


00:13:38.260 --> 00:13:42.380
somebody called Cloud Native Computing Foundation, they made an announcement


00:13:42.380 --> 00:13:45.900
that they purchased the rights to the source code and contributed it to the


00:13:45.900 --> 00:13:51.220
Linux Foundation and it's changing the licensing as well to the Apache license


00:13:51.220 --> 00:13:59.420
version 2 and everybody's can continue using it now and we'll be able to have


00:13:59.420 --> 00:14:03.140
this project live on. That's really cool so RethinkDB is supposed to be like a


00:14:03.140 --> 00:14:09.220
real-time it's like a document database that is a real-time database for your


00:14:09.220 --> 00:14:13.980
server so it's definitely got some some interesting components and I believe all


00:14:13.980 --> 00:14:17.740
the team that worked there has made their way over to Stripe. I'm pretty sure


00:14:17.740 --> 00:14:21.500
that's what's happening. So everybody who used to work at


00:14:21.500 --> 00:14:26.220
Rethink has kind of moved over to Stripe and that's really cool that they


00:14:26.220 --> 00:14:29.820
had a soft landing somewhere. And it's great to see the Linux Foundation taking


00:14:29.820 --> 00:14:33.980
up this project and keeping it going. And I guess there were some companies


00:14:33.980 --> 00:14:38.340
that wanted to, that are relying on it and wanted to somehow donate to try to


00:14:38.340 --> 00:14:42.340
keep it going and there wasn't a way to do that at first and now there is


00:14:42.340 --> 00:14:48.660
and they've got a special under the Linux Foundation and Stripe has put together 25,000


00:14:48.660 --> 00:14:51.580
in matching funds to to match other donations.


00:14:51.580 --> 00:14:56.300
So I wish them all well and hope hope to rethink DB lives for a long time.


00:14:56.300 --> 00:14:59.420
Yeah, they're definitely occupy cool space in the database world.


00:14:59.420 --> 00:15:00.900
So happy to see them rolling.


00:15:00.900 --> 00:15:08.860
All right, let's round out this conversation with my sixth item here, which is the Python


00:15:08.860 --> 00:15:15.100
top 10 articles of the past year. And this comes from this interesting like


00:15:15.100 --> 00:15:20.200
work reading app or like technical reading app called MyBridge at my my


00:15:20.200 --> 00:15:25.140
bridge dot co. And so this is kind of like Zite or Flipboard but it's


00:15:25.140 --> 00:15:29.340
specifically focused on technology and like reading for work and for your


00:15:29.340 --> 00:15:34.780
career. Okay so it's an interesting like iPad app and whatnot but what they did


00:15:34.780 --> 00:15:39.500
is they said how many articles they had some crazy number of articles that for the past


00:15:39.500 --> 00:15:45.020
year we've ranked nearly 10,000 Python articles and we picked the top 10 stories with a point


00:15:45.020 --> 00:15:48.340
1% chance that will help you advance your career in Python.


00:15:48.340 --> 00:15:49.660
Oh, nice criteria.


00:15:49.660 --> 00:15:51.140
Yeah, it's really nice, right?


00:15:51.140 --> 00:15:57.620
So the first one is from Kenneth hitchhikers guide to Python best practices guidebook for


00:15:57.620 --> 00:15:58.820
writing for humans.


00:15:58.820 --> 00:15:59.820
That's really cool.


00:15:59.820 --> 00:16:07.260
Then SciPy lecture notes, 30 essential Python tips and tricks, computational and inferential


00:16:07.260 --> 00:16:09.500
thinking and data science.


00:16:09.500 --> 00:16:16.540
Welcome to Python cheat sheet, data mining in Python, Python FAQ, why should I use Python


00:16:16.540 --> 00:16:17.540
3 by Eve.


00:16:17.540 --> 00:16:23.660
Remember the whole Zed Shah, Python 2 is going to live forever, no Python 3.


00:16:23.660 --> 00:16:28.100
This guy wrote the beautiful rebuttal to that article, so this article is also by him.


00:16:28.100 --> 00:16:32.080
Introduction to Stock Market Analysis, NumPy Tutorial, and Build Your First Python and


00:16:32.080 --> 00:16:33.080
Django App.


00:16:33.080 --> 00:16:36.920
So, I like this pick for a couple of reasons.


00:16:36.920 --> 00:16:41.520
One is it's just cool to have some really nice reading and this is kind of a cool app,


00:16:41.520 --> 00:16:42.520
this MyBridge thing.


00:16:42.520 --> 00:16:44.120
I've just started playing with it.


00:16:44.120 --> 00:16:48.720
But I think it gives you a pretty interesting view into the Python space.


00:16:48.720 --> 00:16:50.200
People ask, "What can you do with Python?


00:16:50.200 --> 00:16:51.880
What should I learn with Python?"


00:16:51.880 --> 00:17:00.880
Well, this is like 60% data science, 25% web and 25% language by my super quick estimation.


00:17:00.880 --> 00:17:03.640
So I think that's a kind of an interesting map to draw.


00:17:03.640 --> 00:17:06.520
Actually, I hadn't run across a lot of these articles.


00:17:06.520 --> 00:17:09.400
So I was pretty glad to hear, see some of these.


00:17:09.400 --> 00:17:12.440
So even though that's our six items, actually, I have one more for you.


00:17:12.440 --> 00:17:17.560
Last week, we talked about Red Hat distribution, Red Hat Enterprise Linux, and how people are


00:17:17.560 --> 00:17:21.880
having trouble using Python 3 because they keep sending this message going I


00:17:21.880 --> 00:17:26.640
can't use Python 3. Well, friend of the show Chip Warden sent, actually added a


00:17:26.640 --> 00:17:30.000
comment. If you want to add comments in the show there's a whole discuss section


00:17:30.000 --> 00:17:33.720
at the bottom of each show page and said hey what do you mean people can't do


00:17:33.720 --> 00:17:38.280
this they should just check out Red Hat software collections. So I checked it out


00:17:38.280 --> 00:17:42.000
yeah absolutely people should check this out it's the latest stable updates of


00:17:42.000 --> 00:17:46.840
development technologies for Red Hat Enterprise Linux. Wow. That's cool so if


00:17:46.840 --> 00:17:52.920
If you want to work with Node, Perl, PHP, Python, or Ruby, it is basically an approved


00:17:52.920 --> 00:17:57.880
Red Hat Enterprise Linux way of getting Python 3, for example, on your environment.


00:17:57.880 --> 00:17:58.880
Perfect.


00:17:58.880 --> 00:17:59.880
Yeah, so that's cool.


00:17:59.880 --> 00:18:01.680
So that's definitely going to be in the show notes.


00:18:01.680 --> 00:18:02.680
All right.


00:18:02.680 --> 00:18:06.680
Well, that's one more reason to switch to Python 3, right?


00:18:06.680 --> 00:18:07.680
Definitely.


00:18:07.680 --> 00:18:08.680
And I can't believe we're done already.


00:18:08.680 --> 00:18:09.680
Gone so fast.


00:18:09.680 --> 00:18:10.680
I know.


00:18:10.680 --> 00:18:14.760
Well, I think we're going to have to scour the internet for more cool Python stuff for


00:18:14.760 --> 00:18:15.760
next week.


00:18:15.760 --> 00:18:16.760
What do you say?


00:18:16.760 --> 00:18:20.600
want to encourage anybody to help us out by sending us what you think we ought to cover


00:18:20.600 --> 00:18:21.600
next week.


00:18:21.600 --> 00:18:26.480
Yeah, we don't always cover everything people send but we if it matches up, we definitely


00:18:26.480 --> 00:18:27.480
try to cover it.


00:18:27.480 --> 00:18:32.200
So please help us out if you know something like chip did here that we didn't cover, you


00:18:32.200 --> 00:18:33.200
know, send it our way.


00:18:33.200 --> 00:18:34.200
All right.


00:18:34.200 --> 00:18:35.640
Well, thank you everyone for listening.


00:18:35.640 --> 00:18:36.640
Brian.


00:18:36.640 --> 00:18:37.640
Thank you.


00:18:37.640 --> 00:18:39.720
Great to catch up with you like always, man.


00:18:39.720 --> 00:18:41.560
Thank you for listening to Python bites.


00:18:41.560 --> 00:18:44.080
Follow the show on Twitter via at Python bites.


00:18:44.080 --> 00:18:51.200
pythonbytes as in b-y-t-e-s. And get the full show notes at pythonbytes.fm. If you have a news item


00:18:51.200 --> 00:18:56.000
you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for


00:18:56.000 --> 00:19:00.880
sharing something cool. On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:19:00.880 --> 00:19:04.160
Thank you for listening and sharing this podcast with your friends and colleagues.

