WEBVTT

00:00:00.260 --> 00:00:05.280
This is Python Bytes. Python headlines and news delivered directly to your earbuds.

00:00:05.280 --> 00:00:09.800
It's episode 12 recorded February 6th, 2016.

00:00:09.800 --> 00:00:15.060
This is Michael Kennedy, one of your hosts, here with my co-host Brian Okken.

00:00:15.060 --> 00:00:16.040
Hey Brian, how's it going, man?

00:00:16.040 --> 00:00:17.100
It's going really good.

00:00:17.100 --> 00:00:21.220
Yeah, I'm super excited to talk about what we got to cover today.

00:00:21.220 --> 00:00:22.840
But I also want to say thank you.

00:00:22.840 --> 00:00:25.440
I want to say thank you to Rollbar because they're sponsoring this episode.

00:00:25.440 --> 00:00:27.880
And I'll tell you more about their cool stuff that they do later.

00:00:28.280 --> 00:00:31.960
Let's start out about with the way that you think about programming.

00:00:31.960 --> 00:00:38.580
Because learning to program is somewhat learning the syntax, but it's also just learning the mental models of what programming means, right?

00:00:38.580 --> 00:00:47.580
Yeah, and I did realize that when you think about Python, the problems and problem solving is different in Python than in other languages.

00:00:47.580 --> 00:00:52.720
Just because of the idiosyncrasies of the language and how people tend to do things.

00:00:52.720 --> 00:00:55.600
And a couple of good articles that I stumbled across.

00:00:56.560 --> 00:00:58.740
Actually, I think one of them is a...

00:00:58.740 --> 00:01:01.860
Anyway, so there's Python functions aren't what you think.

00:01:01.860 --> 00:01:05.960
And this is on a site called Powerful Python.

00:01:05.960 --> 00:01:15.240
And it's a short little article just talking about that functions are really just objects that happen to have a name.

00:01:15.240 --> 00:01:17.100
That's the name of the function that you gave it.

00:01:17.860 --> 00:01:24.780
And they're really that much different than giving a variable the value of five.

00:01:24.780 --> 00:01:27.340
You just give a variable a value of a function.

00:01:27.340 --> 00:01:29.280
It does change the way you...

00:01:29.280 --> 00:01:33.900
If you can think about functions that way, you can change the way you do some things.

00:01:33.900 --> 00:01:39.020
You know, not surprisingly, I think it really enables functional programming type of metaphors.

00:01:39.540 --> 00:01:43.360
Just the whole concept of treating functions as first class objects, right?

00:01:43.360 --> 00:01:46.820
Functions are like variables or like classes or like whatever.

00:01:46.820 --> 00:01:48.380
And I think that's really interesting.

00:01:48.380 --> 00:01:54.480
It's really super important for things like lambdas and closures that we can treat functions this way.

00:01:54.480 --> 00:01:58.100
But even normal functions are basically the same thing, right?

00:01:58.680 --> 00:02:03.400
Yeah, and that you can just throw one in a data structure and use it later.

00:02:03.400 --> 00:02:04.680
It is cool.

00:02:04.680 --> 00:02:08.200
What I thought was weird was you can change the Dunder name of a function.

00:02:08.200 --> 00:02:09.140
That was news to me.

00:02:09.140 --> 00:02:10.280
Oh, yeah.

00:02:10.280 --> 00:02:13.060
Yeah, I've never tried to do that.

00:02:13.060 --> 00:02:14.280
Neither have I.

00:02:14.280 --> 00:02:15.280
Seems a little evil.

00:02:15.280 --> 00:02:17.660
A little bit.

00:02:17.660 --> 00:02:23.160
And then another article called the Tau of Python, which I think is just a cute name.

00:02:23.160 --> 00:02:30.120
But it's actually a Jupyter notebook that talks about the relationship between objects, classes, and meta classes.

00:02:30.120 --> 00:02:39.720
And again, it's a similar thing of not just functions are objects, but even classes themselves are objects.

00:02:39.720 --> 00:02:40.600
Right.

00:02:40.600 --> 00:02:41.480
Right.

00:02:41.480 --> 00:02:43.740
And their classes are meta classes, right?

00:02:43.740 --> 00:02:45.660
Which is, it's very crazy.

00:02:45.660 --> 00:02:48.860
Yeah, it definitely is a mental shift, especially the meta programming.

00:02:48.860 --> 00:02:52.600
And that's something I could learn more about personally as well.

00:02:53.320 --> 00:02:53.960
Yeah, me too.

00:02:53.960 --> 00:03:07.760
And I haven't really made use of it a lot, but it's kind of one of those things of if you can think about the whole thing and how it fits together in just kind of a little mental overview, I think it helps.

00:03:07.760 --> 00:03:08.760
Yeah, excellent.

00:03:08.760 --> 00:03:13.260
All right, number two, the one that I chose is an article by a friend of the show, Dan Bader.

00:03:13.260 --> 00:03:20.160
And his article he wrote, which I helped him a little bit with, you'll see at the very end, is called Why Learn Python?

00:03:20.160 --> 00:03:22.340
Here are eight data-driven reasons.

00:03:23.120 --> 00:03:29.920
And people send me messages and say, hey, Michael, I'm thinking about changing careers or aspects of my career.

00:03:29.920 --> 00:03:33.240
Maybe I'm a Java developer and I'm considering learning Python.

00:03:33.240 --> 00:03:34.080
Is it worth it?

00:03:34.080 --> 00:03:39.060
And you'll see from this article, the answer is yes, yes, and absolutely yes.

00:03:39.060 --> 00:03:45.260
Python is the second most popular language in the world, according to the popularity of Programming Language Index.

00:03:45.260 --> 00:03:48.860
It's one of the hottest job skills to have, according to Dice.

00:03:48.860 --> 00:03:57.940
And Dan lays out eight really well-researched reasons why this is the case, basically to support these trends.

00:03:58.200 --> 00:04:00.980
So, you know, it says you can learn pretty much anything with Python.

00:04:00.980 --> 00:04:03.400
It's widely used by data scientists.

00:04:03.400 --> 00:04:05.520
Python pays well.

00:04:05.520 --> 00:04:10.600
In fact, it's number two only to Ruby developers, according to Guru.

00:04:10.980 --> 00:04:15.060
But it has many more job openings than Ruby does.

00:04:15.060 --> 00:04:20.540
And it's, on average, above all the other developer salaries if you're looking at the U.S.

00:04:20.540 --> 00:04:32.580
So, for example, they say Indeed says the average Python developer in the U.S. across all the regions, they're thinking that's something between $103,000 and $116,000 a year, which is amazing, really.

00:04:32.580 --> 00:04:33.240
Yeah.

00:04:33.760 --> 00:04:36.320
Yeah, that's a good place to be, right?

00:04:36.320 --> 00:04:43.500
Yeah, and I remember when C++ was up near one of the tops, and it's now down at number seven now.

00:04:43.500 --> 00:04:46.440
Yeah, it's a Python world.

00:04:46.440 --> 00:04:47.440
All right, so.

00:04:47.440 --> 00:04:53.980
One of the things that he didn't list, which I'm confused by, was that you can listen to this podcast.

00:04:53.980 --> 00:04:55.860
It's totally bizarre.

00:04:55.860 --> 00:04:56.520
I forgot that.

00:04:56.520 --> 00:04:59.780
I mean, there's like a couple of good Python podcasts around this, at least, right?

00:04:59.780 --> 00:05:00.080
Yeah.

00:05:00.080 --> 00:05:02.960
You know, that's one of the good reasons to learn Python.

00:05:02.960 --> 00:05:04.920
Yeah, so we'll add one in there, that's for sure.

00:05:04.920 --> 00:05:05.800
It definitely helps you.

00:05:05.800 --> 00:05:09.080
And so there's demand is growing for Python developers.

00:05:09.080 --> 00:05:10.300
It saves you time.

00:05:10.300 --> 00:05:13.340
It's beginner-friendly, but you don't top out really quickly, right?

00:05:13.340 --> 00:05:15.840
Like, it can be an advanced language as well.

00:05:15.840 --> 00:05:17.560
All the big companies are using it.

00:05:17.560 --> 00:05:23.800
So if you want to get a job somewhere cool like YouTube or IBM or Mozilla or Quora or Instagram,

00:05:23.800 --> 00:05:26.820
all these companies are making major use of Python.

00:05:26.820 --> 00:05:28.240
So this could be your ticket there.

00:05:28.240 --> 00:05:30.780
And finally, Python has a great ecosystem.

00:05:31.360 --> 00:05:36.280
Yeah, and one of the great things about articles like this are we're preaching to the choir, of course,

00:05:36.280 --> 00:05:41.860
but a lot of people get those questions of like, well, why should I learn Python?

00:05:41.860 --> 00:05:47.100
And all I usually have is it's fun and cool and why not?

00:05:47.100 --> 00:05:48.740
So these are better reasons.

00:05:49.100 --> 00:05:50.780
Yeah, this is really, it's a really great article.

00:05:50.780 --> 00:05:52.660
And of course, we're linking to it.

00:05:52.660 --> 00:06:01.540
I think it's not, I mean, it's great to be preaching to the choir, but it's also interesting to provide this as fuel for people having these debates.

00:06:01.540 --> 00:06:07.980
Maybe they're working on a team and they're like, well, what technology should we choose for our next topic, our next project or something?

00:06:08.020 --> 00:06:12.500
And having all that information there is like, hey, look, choosing Python is a really good bet.

00:06:12.500 --> 00:06:13.900
You'll have lots of people who know it.

00:06:13.900 --> 00:06:16.260
There's a lot of, you know, just it's a good bet.

00:06:16.260 --> 00:06:17.860
And I think this will help people make that case.

00:06:17.860 --> 00:06:21.240
And I'm also a firm believer in just resume building.

00:06:21.240 --> 00:06:26.300
You don't know what the next job is going to be like, and it probably will use Python somewhere.

00:06:26.300 --> 00:06:27.720
Yeah, absolutely.

00:06:27.720 --> 00:06:28.240
Anyway.

00:06:28.700 --> 00:06:28.980
All right.

00:06:28.980 --> 00:06:30.860
I bet people do some testing with Python.

00:06:30.860 --> 00:06:31.840
Yeah, they do.

00:06:31.840 --> 00:06:37.740
And I was thrilled to have somebody write a pytest article because it's one of my favorites.

00:06:37.740 --> 00:06:40.600
So there's, and cool last name too.

00:06:40.600 --> 00:06:41.860
I think I'm going to try this.

00:06:41.860 --> 00:06:44.480
Kevin Ndungu, I think.

00:06:44.480 --> 00:06:45.200
Ndungu?

00:06:45.200 --> 00:06:45.900
Anyway.

00:06:45.900 --> 00:06:49.740
Testing Python Applications with pytest.

00:06:49.740 --> 00:06:58.360
And it's a good introduction article to try to not scare people off too bad about some of the advanced features.

00:06:58.620 --> 00:07:05.260
But after getting, jumping into it a little bit, he shows how easy it is, of course, to write tests.

00:07:05.260 --> 00:07:11.440
But then also takes a look at one of the common things that happens is you grow a whole bunch of tests.

00:07:11.440 --> 00:07:13.700
And then you want to refactor them.

00:07:13.700 --> 00:07:21.280
And there's a little bit about refactoring your tests by using fixtures and pulling out some of the common starting state.

00:07:21.280 --> 00:07:28.540
And then he jumps into a couple of the nice, one of the nice features of pytest, of course, is the parameters.

00:07:28.540 --> 00:07:34.380
And then you're going to have a lot of the standardization of easily being able to throw multiple data sets at an individual test function.

00:07:35.180 --> 00:07:38.060
And that was demonstrated pretty cleanly.

00:07:38.060 --> 00:07:38.620
I like that.

00:07:38.620 --> 00:07:39.140
Nice.

00:07:39.140 --> 00:07:40.040
Good job, Kevin.

00:07:40.040 --> 00:07:41.120
And I like the article.

00:07:41.120 --> 00:07:45.000
Yeah, I really like the let's treat test code as production code.

00:07:45.000 --> 00:07:49.760
Because I feel like a lot of people will write tests and they're like, these tests are hard to maintain.

00:07:49.760 --> 00:07:55.580
And then you look at their test code and it's, you're like, why did you duplicate this bit of code 20 times?

00:07:55.580 --> 00:07:56.240
Like, what is this?

00:07:56.240 --> 00:07:58.260
Would you ever do this in a real app?

00:07:58.260 --> 00:07:58.960
That's insane.

00:07:59.040 --> 00:08:03.620
Like, why is this not a function or some other thing that you can use throughout your test, right?

00:08:03.620 --> 00:08:03.920
Yeah.

00:08:03.920 --> 00:08:04.680
Yeah, definitely.

00:08:04.680 --> 00:08:08.080
Speaking of production, you don't want errors in your production, do you?

00:08:08.080 --> 00:08:09.480
No, of course not.

00:08:09.480 --> 00:08:10.720
No, not too much.

00:08:10.720 --> 00:08:15.680
One of the first steps in solving errors in production is knowing about them.

00:08:15.680 --> 00:08:17.000
And that's where Rollbar comes from.

00:08:17.140 --> 00:08:18.880
So Rollbar is supporting the show this week.

00:08:18.880 --> 00:08:19.480
Thank you, Rollbar.

00:08:19.480 --> 00:08:26.400
And I've used Rollbar for a long time on the website that delivers Python bytes and my training courses and all those things.

00:08:26.400 --> 00:08:33.840
And I would say at least five times Rollbar has saved me from some seriously bad choices that I've made.

00:08:33.840 --> 00:08:39.180
I've tested something locally where there was data in the database and I put it in a production.

00:08:39.180 --> 00:08:42.100
I was about to start putting data, but it was empty at the time.

00:08:42.100 --> 00:08:49.280
And the code couldn't deal with empty sets and all sorts of stuff going on where something crashed on the site and I didn't realize it.

00:08:49.280 --> 00:08:54.740
And of course, Rollbar sent me a message, popped up on my phone immediately and said, error in production.

00:08:54.740 --> 00:08:57.180
Here's the exact details of what you need to fix.

00:08:57.180 --> 00:08:58.220
And I was like, ah, crap.

00:08:58.220 --> 00:08:59.800
You know, five minutes later, though, it was fixed.

00:08:59.800 --> 00:09:01.740
So thanks, Rollbar, for helping me out then.

00:09:01.740 --> 00:09:02.780
And thanks for sponsoring the show.

00:09:02.780 --> 00:09:03.700
Awesome.

00:09:03.700 --> 00:09:05.400
It was a special offer for listeners.

00:09:05.400 --> 00:09:07.740
And I'll put that link in the show notes right at the top.

00:09:08.460 --> 00:09:12.360
Speaking of production, we would all like our code to run a little bit faster.

00:09:12.360 --> 00:09:18.320
And I feel like we're in this cool place with Python, especially Python versus legacy Python.

00:09:18.320 --> 00:09:24.600
Like Python 5, 3.6, and 3.7, the one that's coming, have really been focused on performance.

00:09:24.600 --> 00:09:31.680
And so there's a, you know, we talked about a web framework called SANIC that was based on AIo HTTP,

00:09:31.680 --> 00:09:36.160
which is an async pipeline for web processing.

00:09:36.640 --> 00:09:38.420
Well, here comes another one.

00:09:38.420 --> 00:09:47.260
And this one, it turns out, if the benchmarks are to be believed, is dramatically faster than even SANIC

00:09:47.260 --> 00:09:49.600
and lots of other things out there like Go.

00:09:49.600 --> 00:09:51.180
So it's called Jepronto.

00:09:51.180 --> 00:09:51.820
Jepronto?

00:09:51.820 --> 00:09:55.060
I'm not sure which, how you pronounce it, but we'll link to it.

00:09:55.120 --> 00:10:07.500
It describes itself as a screaming fast Python 3.5 and above web micro framework integrating with pipelining HTTP servers based on UV loop and Pico HTTP parser.

00:10:07.500 --> 00:10:10.940
So it came out just a few months ago.

00:10:10.940 --> 00:10:14.800
It has like 2,600 stars on GitHub.

00:10:15.060 --> 00:10:21.140
And the title of the article introducing it was Handling a Million Requests Per Second with Python.

00:10:21.140 --> 00:10:22.100
Yeah.

00:10:22.100 --> 00:10:23.980
I think that's on one server.

00:10:23.980 --> 00:10:26.360
So that's crazy.

00:10:26.360 --> 00:10:27.460
It is crazy fast.

00:10:27.460 --> 00:10:28.180
It's pretty exciting.

00:10:28.840 --> 00:10:40.860
If you read this article that we're linking to, the guy who built it, he's doing a crazy amount of careful thought and low, low, low level OS type of optimization.

00:10:41.200 --> 00:10:47.780
So just to give you a sense, most of this is written in C, although he's thinking of rewriting it in Rust.

00:10:47.780 --> 00:10:52.000
He talks a bit about that and says, look, I'm going to call it Jepronto.

00:10:52.000 --> 00:10:53.100
I'm going with that one.

00:10:53.100 --> 00:11:00.080
Jepronto tries to delay the creation of Python counterparts of its internal structures until explicitly asked.

00:11:00.080 --> 00:11:06.080
So, for example, like normally when a request come in, like the request object would be populated with like headers.

00:11:06.520 --> 00:11:13.060
Well, this framework won't actually create the headers dictionary unless you try to access it.

00:11:13.060 --> 00:11:19.680
It gives you only what you need at many, many levels and has some really cool low level optimizations around pipelining.

00:11:19.680 --> 00:11:20.520
It's quite cool.

00:11:20.520 --> 00:11:21.380
Yeah.

00:11:21.380 --> 00:11:24.780
The pipelining actually description was very, I thought that was pretty interesting.

00:11:24.780 --> 00:11:25.280
Yeah.

00:11:25.280 --> 00:11:27.020
I hadn't really thought too much about that.

00:11:27.020 --> 00:11:28.100
So super, super cool.

00:11:28.100 --> 00:11:28.460
Yeah.

00:11:28.460 --> 00:11:34.920
And related to this, I think that somebody on Twitter was commenting that,

00:11:34.920 --> 00:11:37.380
why are we worried about speed?

00:11:37.380 --> 00:11:41.140
Why isn't it better to be correct?

00:11:41.140 --> 00:11:42.760
I guess I like to have both.

00:11:42.760 --> 00:11:49.640
And I think it would be, I think I'm intrigued by other people trying to get performance up.

00:11:49.640 --> 00:11:54.020
And I think it's, to me, it's important because I would hate to have somebody say,

00:11:54.020 --> 00:11:58.560
oh, eventually you're going to scale out of Python and need to switch over to go.

00:11:59.460 --> 00:11:59.820
Exactly.

00:11:59.820 --> 00:12:02.040
That's the primary thing.

00:12:02.040 --> 00:12:06.840
I think, and even if you're not going to scale out, if you start to hear lots of major companies saying,

00:12:06.840 --> 00:12:09.560
we're all abandoning Python because they won't run our workloads.

00:12:09.560 --> 00:12:15.840
Even if that's not the situation you're in, it starts to like cast a shadow over the general ecosystem.

00:12:15.840 --> 00:12:16.960
Right.

00:12:16.960 --> 00:12:22.560
Whereas if you say, no, no, look at these amazing things that are being done with Python on the web,

00:12:23.120 --> 00:12:27.480
your stuff is going to be way lower traffic and load than that.

00:12:27.480 --> 00:12:29.500
Surely this will work for you as well, right?

00:12:29.500 --> 00:12:29.980
Yeah.

00:12:29.980 --> 00:12:31.120
So I think it's really interesting.

00:12:31.120 --> 00:12:37.720
I mean, to be honest, Pyramid plus MicroWisgi plus Engine X just straight up is way fast enough for what I'm doing,

00:12:37.720 --> 00:12:41.180
even with a couple million ACP requests a month.

00:12:41.340 --> 00:12:46.180
But it's super cool to see that it's sort of expanding the upper bound.

00:12:46.180 --> 00:12:48.620
And I think that's going to have some great stories down the road.

00:12:48.620 --> 00:12:49.280
Yeah, definitely.

00:12:49.280 --> 00:12:56.920
So the next topic we've got is a good news thing that came out, was just announced today.

00:12:56.920 --> 00:13:01.260
The Rethink, and I'm not sure if you had RethinkDB on.

00:13:01.260 --> 00:13:01.800
I did.

00:13:01.800 --> 00:13:02.800
I had him on my show.

00:13:02.800 --> 00:13:04.140
I can't remember the number.

00:13:04.140 --> 00:13:06.420
I think it's in the 60s on Talk Python TV.

00:13:06.420 --> 00:13:09.240
We talked about RethinkDB and the company behind it.

00:13:09.520 --> 00:13:13.400
Yeah, and I think I've heard about it because of Talk Python.

00:13:13.400 --> 00:13:16.240
But it was really intriguing to me.

00:13:16.240 --> 00:13:25.960
And I like the idea of somebody just from the ground up rethinking how databases work with live data and real-time data.

00:13:25.960 --> 00:13:31.280
But in September of last year, the company shut down.

00:13:31.280 --> 00:13:35.880
And I was curious, like everybody else was, is what's going to happen to RethinkDB?

00:13:35.880 --> 00:13:46.980
But I guess somebody called Cloud Native Computing Foundation, they made an announcement that they purchased the rights to the source code and contributed to the Linux Foundation.

00:13:46.980 --> 00:13:52.520
And it's changing the licensing as well to the Apache license version 2.

00:13:52.520 --> 00:14:00.720
And everybody can continue using it now and will be able to have this project live on.

00:14:00.880 --> 00:14:01.460
That's really cool.

00:14:01.460 --> 00:14:09.660
So RethinkDB is supposed to be like a real-time, it's like a document database that is a real-time database for your server.

00:14:09.660 --> 00:14:13.000
So it's definitely got some interesting components.

00:14:13.000 --> 00:14:17.020
And I believe all the team that worked there has made their way over to Stripe.

00:14:17.020 --> 00:14:19.900
I'm pretty sure that's what's happening.

00:14:20.140 --> 00:14:23.600
So everybody who used to work at Rethink has kind of moved over to Stripe.

00:14:23.600 --> 00:14:27.360
And that's really cool that they had a soft landing somewhere.

00:14:27.360 --> 00:14:32.100
And it's great to see the Linux Foundation taking up this project and keeping it going.

00:14:32.100 --> 00:14:39.060
And I guess there were some companies that are relying on it and wanted to somehow donate to try to keep it going.

00:14:39.060 --> 00:14:40.980
And there wasn't a way to do that at first.

00:14:40.980 --> 00:14:51.300
And now there is, and they've got, especially under the Linux Foundation, and Stripe has put together $25,000 in matching funds to match other donations.

00:14:51.300 --> 00:14:56.020
So I wish them all well and hope that RethinkDB lives for a long time.

00:14:56.020 --> 00:14:59.360
Yeah, they definitely occupy cool space in the database world.

00:14:59.360 --> 00:15:01.200
So happy to see them rolling.

00:15:01.200 --> 00:15:11.020
All right, let's round out this conversation with my sixth item here, which is the Python Top 10 Articles of the Past Year.

00:15:11.020 --> 00:15:21.800
And this comes from this interesting work reading app or technical reading app called MyBridge at mybridge.co.

00:15:21.800 --> 00:15:29.800
And so this is kind of like Zite or Flipboard, but it's specifically focused on technology and reading for work and for your career.

00:15:30.460 --> 00:15:33.600
Okay, so it's an interesting like iPad app and whatnot.

00:15:33.600 --> 00:15:37.040
But what they did is they said, how many articles?

00:15:37.040 --> 00:15:42.080
They had some crazy number of articles that for the past year, we've ranked nearly 10,000 Python articles.

00:15:42.080 --> 00:15:48.000
And we picked the top 10 stories with a 0.1% chance that will help you advance your career in Python.

00:15:48.000 --> 00:15:49.420
Oh, nice criteria.

00:15:49.420 --> 00:15:51.100
Yeah, it's really nice, right?

00:15:51.100 --> 00:15:58.600
So the first one is from Kenneth Hitchhiker's Guide to Python Best Practices Guidebook for Writing for Humans.

00:15:58.600 --> 00:15:59.320
That's really cool.

00:15:59.640 --> 00:16:01.400
And then SciPy Lecture Notes.

00:16:01.400 --> 00:16:04.960
30 essential Python tips and tricks.

00:16:04.960 --> 00:16:08.560
Computational and inferential thinking and data science.

00:16:08.560 --> 00:16:10.720
Welcome to Python Cheat Sheet.

00:16:10.720 --> 00:16:12.740
Data mining in Python.

00:16:12.740 --> 00:16:13.960
Python FAQ.

00:16:13.960 --> 00:16:16.720
Why should I use Python 3?

00:16:16.720 --> 00:16:17.420
By Eve.

00:16:17.420 --> 00:16:19.400
Remember the whole Zed Shaw.

00:16:19.400 --> 00:16:22.440
Python 2 is going to live forever.

00:16:22.440 --> 00:16:23.500
No Python 3.

00:16:23.600 --> 00:16:25.880
This guy wrote the beautiful rebuttal to that article.

00:16:25.880 --> 00:16:27.480
So this article is also by him.

00:16:27.480 --> 00:16:32.860
Introduction to Stock Market Analysis, NumPy Tutorial, and Build Your First Python and Django app.

00:16:33.180 --> 00:16:36.000
So I like this pick for a couple of reasons.

00:16:36.640 --> 00:16:40.140
One is it's just cool to have some really nice reading.

00:16:40.140 --> 00:16:42.240
And this is kind of a cool app, this MyBridge thing.

00:16:42.240 --> 00:16:43.560
I've just started playing with it.

00:16:43.560 --> 00:16:48.200
But I think it gives you a pretty interesting view into the Python space.

00:16:48.200 --> 00:16:49.920
People ask, what can you do with Python?

00:16:49.920 --> 00:16:51.140
What should I learn with Python?

00:16:51.900 --> 00:17:00.580
Well, this is like 60% data science, 25% web, and 25% language by my super quick estimation.

00:17:00.580 --> 00:17:03.320
So I think that's kind of an interesting map to draw.

00:17:03.320 --> 00:17:06.340
Actually, I hadn't run across a lot of these articles.

00:17:06.340 --> 00:17:09.080
So I was pretty glad to hear, see some of these.

00:17:09.080 --> 00:17:11.620
So even though that's our six items, I actually have one more for you.

00:17:11.620 --> 00:17:16.340
Last week, we talked about Red Hat distribution, Red Hat Enterprise Linux,

00:17:16.340 --> 00:17:21.760
and how people are having trouble using Python 3 because they keep sending this message going,

00:17:21.760 --> 00:17:22.780
I can't use Python 3.

00:17:22.780 --> 00:17:27.120
Well, a friend of the show, Chip Warden, actually added a comment.

00:17:27.120 --> 00:17:31.600
If you want to add comments in the show, there's a whole discuss section at the bottom of each show page.

00:17:31.600 --> 00:17:33.880
And said, hey, what do you mean people can't do this?

00:17:33.880 --> 00:17:36.420
They should just check out Red Hat software collections.

00:17:36.420 --> 00:17:38.340
So I checked it out.

00:17:38.340 --> 00:17:39.060
Yeah, absolutely.

00:17:39.060 --> 00:17:40.080
People should check this out.

00:17:40.080 --> 00:17:45.040
It's the latest stable updates of development technologies for Red Hat Enterprise Linux.

00:17:45.040 --> 00:17:45.680
Wow.

00:17:46.000 --> 00:17:46.520
It's cool.

00:17:46.520 --> 00:17:50.160
So if you want to work with Node, Perl, PHP, Python, or Ruby,

00:17:50.160 --> 00:17:57.500
it is basically an approved Red Hat Enterprise Linux way of getting Python 3, for example, on your environment.

00:17:57.500 --> 00:17:57.900
Perfect.

00:17:57.900 --> 00:17:59.020
Yeah.

00:17:59.020 --> 00:17:59.800
So that's cool.

00:17:59.800 --> 00:18:01.320
So that's definitely going to be in the show notes.

00:18:01.320 --> 00:18:02.420
All right.

00:18:02.420 --> 00:18:05.960
Well, that's one more reason to switch to Python 3, right?

00:18:05.960 --> 00:18:06.600
Definitely.

00:18:06.600 --> 00:18:08.760
And I can't believe we're done already.

00:18:08.760 --> 00:18:09.700
Going so fast.

00:18:09.700 --> 00:18:10.120
I know.

00:18:10.120 --> 00:18:15.180
Well, I think we're going to have to scour the internet for more cool Python stuff for next week.

00:18:15.180 --> 00:18:15.580
What do you say?

00:18:15.660 --> 00:18:16.060
Yes.

00:18:16.060 --> 00:18:21.120
And I want to encourage anybody to help us out by sending us what you think we ought to cover next week.

00:18:21.120 --> 00:18:21.980
Yeah.

00:18:21.980 --> 00:18:27.100
We don't always cover everything people send, but if it matches up, we definitely try to cover it.

00:18:27.100 --> 00:18:28.080
So please help us out.

00:18:28.160 --> 00:18:32.980
If you know something like Chip did here that we didn't cover, send it our way.

00:18:32.980 --> 00:18:34.280
All right.

00:18:34.340 --> 00:18:35.400
Well, thank you, everyone for listening.

00:18:35.400 --> 00:18:35.880
Brian.

00:18:35.880 --> 00:18:36.620
Thank you.

00:18:36.620 --> 00:18:37.480
Great to catch up with you.

00:18:37.480 --> 00:18:38.280
Like always, man.

00:18:38.280 --> 00:18:41.140
Thank you for listening to Python Bytes.

00:18:41.140 --> 00:18:43.700
Follow the show on Twitter via at Python Bytes.

00:18:43.700 --> 00:18:46.580
That's Python Bytes as in B-Y-T-E-S.

00:18:46.580 --> 00:18:50.000
And get the full show notes at pythonbytes.fm.

00:18:50.320 --> 00:18:54.360
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:18:54.360 --> 00:18:57.060
We're always on the lookout for sharing something cool.

00:18:57.060 --> 00:19:00.460
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:19:00.460 --> 00:19:04.080
Thank you for listening and sharing this podcast with your friends and colleagues.

