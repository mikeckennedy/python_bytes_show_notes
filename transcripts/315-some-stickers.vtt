WEBVTT

00:00:00.120 --> 00:00:05.280
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.280 --> 00:00:11.500
This is episode 315, recorded December 20, 2022, almost the end of the year.

00:00:11.500 --> 00:00:12.660
I am Brian Okken.

00:00:12.660 --> 00:00:13.640
I'm Michael Kennedy.

00:00:13.640 --> 00:00:16.960
It is almost the end of the year. Are you guys, are you ready for Christmas and everything?

00:00:16.960 --> 00:00:20.660
Yeah, starting to think about Christmas, maybe try to do some skiing.

00:00:20.660 --> 00:00:24.760
You know, it's getting cold and it's snowing in the mountains around here, so getting there.

00:00:24.760 --> 00:00:26.840
Why don't you kick us off with our first story?

00:00:26.840 --> 00:00:28.980
Let's go. Let's talk some Jupyter Server.

00:00:28.980 --> 00:00:35.220
So this is an announcement by Zach Saylor, and it says Jupyter Server 2.0 is released.

00:00:35.220 --> 00:00:39.040
Now we know what Jupyter is. We know what Jupyter Notebooks are. We know what Jupyter Lab is.

00:00:39.040 --> 00:00:44.180
Well, Jupyter Server is the core web server that powers those things, right?

00:00:44.180 --> 00:00:48.360
So when you pull up a Jupyter Lab or Jupyter Notebook, you're talking to a server.

00:00:48.360 --> 00:00:56.040
Oftentimes that's a localhost little thing running, but other times it's a centralized server that's set up for like students or a research group,

00:00:56.040 --> 00:01:00.540
where it's set up on a supercomputer near a bunch of data that, you know, you log into it.

00:01:00.540 --> 00:01:01.900
It runs locally on that, right?

00:01:01.900 --> 00:01:05.000
So it's the core of Jupyter in a lot of ways.

00:01:05.000 --> 00:01:06.920
So 2.0, that's a big deal, right?

00:01:06.920 --> 00:01:07.820
I think so.

00:01:07.820 --> 00:01:09.460
It means new features, right?

00:01:09.460 --> 00:01:14.360
Open source, when something goes from one major version to another, that's usually a pretty big deal.

00:01:14.360 --> 00:01:15.900
So let's hit some of the highlights.

00:01:16.280 --> 00:01:19.500
So one of them is a new identity API.

00:01:19.500 --> 00:01:27.880
One of the farther looking out features of Jupyter Server that they're hoping to bring is like a Google Docs-like experience.

00:01:27.880 --> 00:01:30.740
So real-time collaboration experiences.

00:01:30.740 --> 00:01:32.960
There are some making them better.

00:01:32.960 --> 00:01:41.100
And around this, having multiple people working on a single notebook, you need to have a good way to work with identity.

00:01:41.340 --> 00:01:45.000
So there's a new identity API in Jupyter Server that makes it possible.

00:01:45.000 --> 00:01:47.380
It is configurable, luggable.

00:01:47.380 --> 00:01:53.300
You can even swap out your own identity provider to authenticate users with any provider.

00:01:53.300 --> 00:01:58.340
So within your organization, you could do single sign-on, all those types of fun things.

00:01:58.340 --> 00:01:58.800
Oh, neat.

00:01:59.040 --> 00:01:59.240
Yeah.

00:01:59.240 --> 00:02:02.200
Related to that, you have authorization.

00:02:02.200 --> 00:02:05.040
So once you know who you are, what can you do?

00:02:05.040 --> 00:02:12.000
Enabling collaboration on a notebook shouldn't just mean you have access to everything on the server or nothing on the server,

00:02:12.000 --> 00:02:15.880
but you maybe have access to these notebooks, but not those notebooks.

00:02:15.880 --> 00:02:17.940
Or maybe you can read that notebook and not write to it.

00:02:17.940 --> 00:02:26.360
So there's this new authorization API that allows you to share certain notebooks with certain people, even if they have access to the server.

00:02:26.360 --> 00:02:27.260
So that's pretty cool.

00:02:27.480 --> 00:02:41.580
Again, with the collaboration stuff, there's a new event system API coming along, and they created this package called Jupyter Events that allows for JSON-based event-driven system over here.

00:02:41.580 --> 00:02:44.040
So a lot of cool things that should be coming.

00:02:44.040 --> 00:02:48.980
So it's like a foundational piece so that they can add more events, more interactivity, and so on.

00:02:48.980 --> 00:02:50.980
There's a new kernel WebSocket API.

00:02:50.980 --> 00:02:53.220
It ships with its own kernel manager.

00:02:53.500 --> 00:02:57.000
I suspect most people are not messing with that, but it's down in the guts.

00:02:57.000 --> 00:02:59.420
In Jupyter Lab, you can open up a terminal.

00:02:59.420 --> 00:03:06.660
Now, this terminal service is a server extension, and it can be optionally disabled because it's an extension, which is cool.

00:03:06.660 --> 00:03:07.960
And Brian, the last one for you.

00:03:07.960 --> 00:03:13.300
They say, as we work to increase our test coverage to 80%, major thank you to Steve Sylvester,

00:03:13.300 --> 00:03:19.180
We built a handy set of pytest fixtures that can benefit Jupyter developers and extension authors.

00:03:19.180 --> 00:03:20.060
That's pretty cool.

00:03:20.060 --> 00:03:26.220
Yeah, we released pytest Jupyter, a bunch of fixtures and other pytest goodies for Jupyter core libraries and extensions.

00:03:26.220 --> 00:03:27.060
That's nice.

00:03:27.060 --> 00:03:34.120
I'm actually going to check this out, and I think it'd be cool to get one of those folks on to test and code to talk about it.

00:03:34.120 --> 00:03:35.400
So I'll reach out to them.

00:03:35.400 --> 00:03:36.900
Yeah, but I think that'd be great, too.

00:03:36.900 --> 00:03:37.280
All right.

00:03:37.280 --> 00:03:38.160
Well, there you have it.

00:03:38.440 --> 00:03:40.380
The core of Jupyter got a little bit better.

00:03:40.380 --> 00:03:41.040
Nice.

00:03:41.040 --> 00:03:43.940
Well, what do we...

00:03:43.940 --> 00:03:45.920
I'm next, so I guess...

00:03:45.920 --> 00:03:46.380
What do you got next?

00:03:46.380 --> 00:03:47.320
What do I got?

00:03:47.320 --> 00:03:52.720
Actually, so last week, it was just last week, actually.

00:03:52.720 --> 00:03:53.600
Time flies.

00:03:53.600 --> 00:04:04.020
We were talking about automatically converting stuff, like having other programs convert your Python code, modify your code, and all the different ways you can do that.

00:04:04.260 --> 00:04:16.560
And one of the things I said was, it'd be cool if we had some ways to convert from setup.py to setup.cfg, or from setup systems to pyproject.toml.

00:04:16.560 --> 00:04:22.820
And so, of course, lots of people reached out to me and said, there's already some ways that you should take a look at.

00:04:22.820 --> 00:04:28.640
So thank you, Christian Klaus and Brian Skin and others for reaching out and letting me know.

00:04:28.640 --> 00:04:33.860
First one, actually, the main thing I wanted to talk about was a thing called any to tommel.

00:04:33.860 --> 00:04:37.980
So this is a project that takes...

00:04:37.980 --> 00:04:39.040
It converts...

00:04:39.040 --> 00:04:43.280
It attempts to convert any files or CFG files to tommel.

00:04:43.280 --> 00:04:45.560
They say it's experimental.

00:04:45.560 --> 00:04:47.020
So what is...

00:04:47.020 --> 00:04:49.920
I thought I was looking at setup.py files.

00:04:49.920 --> 00:04:54.340
Well, actually, a lot of large projects are not just setup.py.

00:04:54.340 --> 00:04:58.600
They've moved a lot of the settings from setup.py to setup.cfg.

00:04:58.600 --> 00:04:59.760
So this is still helpful.

00:04:59.760 --> 00:05:01.120
This isn't going to...

00:05:01.120 --> 00:05:05.020
I don't think I can grab your setup.py file if that's the only thing you're using.

00:05:05.020 --> 00:05:08.580
But if you're using setup.cfg, maybe this will help.

00:05:08.580 --> 00:05:10.300
It converts to a tommel file.

00:05:10.300 --> 00:05:13.480
And it says it's experimental, but that's all right.

00:05:13.480 --> 00:05:15.720
So it's kind of fun.

00:05:15.720 --> 00:05:17.580
There's a couple versions of it.

00:05:17.620 --> 00:05:22.640
One of the versions is light, and it's got light, L-I-T-E, and full.

00:05:22.640 --> 00:05:26.060
And the light version has less calories.

00:05:26.060 --> 00:05:26.860
No.

00:05:26.860 --> 00:05:34.460
The light version creates a tommel file, but the full version will try to get your comments

00:05:34.460 --> 00:05:35.040
over, too.

00:05:35.040 --> 00:05:38.180
So convert your comments into tommel-compliant comments.

00:05:38.180 --> 00:05:39.180
That's pretty neat.

00:05:39.180 --> 00:05:40.940
So I'd definitely try that.

00:05:40.940 --> 00:05:42.920
What did I?

00:05:42.920 --> 00:05:43.940
I didn't...

00:05:43.940 --> 00:05:45.060
I don't think I tried this.

00:05:45.060 --> 00:05:47.180
I didn't try this, but it looks pretty fun.

00:05:47.180 --> 00:05:50.280
So a way to automatically change that.

00:05:50.280 --> 00:05:53.000
So it'd be fun to grab that.

00:05:53.000 --> 00:05:58.380
And I've heard from people that they have used this to convert their project, at least the

00:05:58.380 --> 00:05:59.440
initial batch.

00:05:59.960 --> 00:06:06.220
at least Christian mentioned that they needed to clean it up a bit afterwards.

00:06:06.220 --> 00:06:11.720
So one of the tools they used was a thing called PyProject-Format.

00:06:11.720 --> 00:06:14.360
And what this does is...

00:06:14.360 --> 00:06:15.120
And I did try this.

00:06:15.120 --> 00:06:15.820
It's pretty neat.

00:06:15.820 --> 00:06:18.340
It takes like your...

00:06:18.340 --> 00:06:25.980
If you've got any PyProject.tommel file, and it converts it to a known way to set it up.

00:06:26.360 --> 00:06:27.940
I think it's over here.

00:06:27.940 --> 00:06:29.620
It's like black for project files.

00:06:29.620 --> 00:06:30.500
Kind of.

00:06:30.500 --> 00:06:30.780
Yeah.

00:06:30.780 --> 00:06:35.080
But one of the things with the PyProject syntax is you can have like...

00:06:35.080 --> 00:06:39.040
You know, like in any file, you can have things in any order you want, and it's still valid.

00:06:39.040 --> 00:06:41.420
But are you going to be able to find it there?

00:06:41.420 --> 00:06:46.900
I mean, if you're working with lots of projects, it'd be really nice if the authors were in a

00:06:46.900 --> 00:06:50.200
similar place, and the dependencies were in a similar place.

00:06:50.200 --> 00:06:51.980
Because they could be like all over the place.

00:06:51.980 --> 00:06:57.480
And it's easier to find them if they're in the right place and formatted the same.

00:06:57.480 --> 00:06:59.780
And I mean, who really cares how much...

00:06:59.780 --> 00:07:03.020
How it's formatted, as long as it looks good and it's proper.

00:07:03.020 --> 00:07:05.260
So I think this is a neat idea.

00:07:05.260 --> 00:07:09.360
I tried it on a couple of my projects, and it worked okay.

00:07:09.360 --> 00:07:10.260
So...

00:07:10.260 --> 00:07:12.900
And I want to like put that in an asterisk.

00:07:12.900 --> 00:07:15.480
So you want to check what you get afterwards.

00:07:15.480 --> 00:07:21.080
Because one of the things it did, which I didn't expect it to, was it replaced...

00:07:21.080 --> 00:07:24.440
It took the name of my project and replaced dashes with underscores.

00:07:24.440 --> 00:07:30.560
And I know that like a library, you can't have a dash in the thing you're importing.

00:07:30.560 --> 00:07:37.740
But the name of the project that is where it shows up on PyPI and everywhere else, it can

00:07:37.740 --> 00:07:38.580
have a dash in it.

00:07:38.580 --> 00:07:40.860
And traditionally, and I was using it on a pytest plugin.

00:07:40.860 --> 00:07:42.360
Traditionally, we do have dashes.

00:07:42.360 --> 00:07:43.900
We say pytest dash something.

00:07:43.900 --> 00:07:45.580
So it needs to stay a dash.

00:07:45.580 --> 00:07:46.260
It doesn't...

00:07:46.260 --> 00:07:47.000
Don't translate it.

00:07:47.000 --> 00:07:47.680
So that was a little shocking.

00:07:47.680 --> 00:07:49.760
You want it to be pytest underscore check?

00:07:49.760 --> 00:07:50.260
Yeah.

00:07:50.260 --> 00:07:51.640
No, I don't want it to be that.

00:07:51.640 --> 00:07:54.880
So I did submit an issue.

00:07:54.880 --> 00:07:56.060
I'm sure it's a minor thing.

00:07:56.060 --> 00:07:58.200
But at least, you know, at least I know it's there.

00:07:58.200 --> 00:07:59.600
So to check it out.

00:07:59.600 --> 00:08:02.360
So a neat tool to auto-format it.

00:08:02.360 --> 00:08:04.860
And a couple other tools that were kind of neat.

00:08:04.860 --> 00:08:07.740
Validate PyProject.

00:08:07.740 --> 00:08:09.560
Ooh, just a moment.

00:08:09.560 --> 00:08:10.720
Can you still see me?

00:08:10.720 --> 00:08:11.160
Okay.

00:08:11.420 --> 00:08:12.220
Yeah, seems fine.

00:08:12.220 --> 00:08:14.040
Something happened on my computer.

00:08:14.040 --> 00:08:19.440
Anyway, it just validates to make sure everything's fine.

00:08:19.440 --> 00:08:22.940
And I ran it on a couple of projects and nothing happened.

00:08:22.940 --> 00:08:24.040
I'm like, oh, it must be good.

00:08:24.040 --> 00:08:28.540
So I inserted some errors just to see what would happen.

00:08:28.540 --> 00:08:30.240
And it's pretty terse.

00:08:30.240 --> 00:08:34.760
It pretty much just says like, there's an error on this line at this column or something.

00:08:35.060 --> 00:08:37.540
So it'll still helpful.

00:08:37.540 --> 00:08:40.820
You can go count and figure out where the project might be.

00:08:40.820 --> 00:08:42.900
But kind of a neat validator.

00:08:42.900 --> 00:08:50.160
But for validation, and I'm not sure what I was checking, but it says it's JSON schema definition defined driven.

00:08:50.440 --> 00:08:52.060
So you could probably check it out.

00:08:52.060 --> 00:08:53.060
Interesting.

00:08:53.060 --> 00:08:57.580
It probably converts it to JSON and then runs through JSON schema or something like that.

00:08:57.580 --> 00:08:58.160
Oh, you think so?

00:08:58.160 --> 00:08:58.480
Maybe.

00:08:58.480 --> 00:08:59.360
Yeah, probably.

00:08:59.360 --> 00:09:00.400
Might.

00:09:00.400 --> 00:09:08.280
One of the things that I wanted to bring up when validating TOML files and projects is don't forget talks.

00:09:09.280 --> 00:09:16.360
Using talks to go ahead and what the default of talks, you can use it for lots of stuff.

00:09:16.360 --> 00:09:24.480
But the default works great for me for this, which is to take your project, build it, put it in a virtual environment and install it there.

00:09:24.480 --> 00:09:34.420
And you'll catch things like you forgot to specify a dependency or missing dependencies or you forgot some code or something like that.

00:09:34.420 --> 00:09:35.700
You'll catch it if you test it.

00:09:35.700 --> 00:09:36.860
So test your projects.

00:09:36.860 --> 00:09:37.900
Absolutely.

00:09:37.900 --> 00:09:39.960
Yeah, those are a bunch of great little tools.

00:09:39.960 --> 00:09:41.800
I didn't know about hardly any of them.

00:09:41.800 --> 00:09:44.260
I'm starting to do more with pyproject.toml.

00:09:44.260 --> 00:09:44.740
It's nice.

00:09:44.740 --> 00:09:45.800
And it's good.

00:09:45.800 --> 00:09:48.040
Hatch and HatchLeen and pyproject.toml.

00:09:48.040 --> 00:09:48.920
Oh, yeah.

00:09:48.920 --> 00:09:50.180
Hatch is fun.

00:09:50.180 --> 00:09:51.580
So Hatch and HatchLeen.

00:09:51.580 --> 00:09:52.820
It sure is.

00:09:52.820 --> 00:09:53.860
All right.

00:09:53.860 --> 00:09:57.560
Well, quick word from our sponsor before we move on, do you think?

00:09:57.560 --> 00:09:58.820
Yeah, it sounds great.

00:09:58.820 --> 00:10:03.160
So this episode of Python Bytes is brought to you by Microsoft for Startups.

00:10:03.160 --> 00:10:04.920
Starting in business is hard.

00:10:04.920 --> 00:10:09.720
By some estimates, over 90% of startups will go out of business within the first year.

00:10:09.720 --> 00:10:19.080
With this in mind, Microsoft for Startups set out to understand what startups need to be successful and create a digital platform to help overcome those challenges.

00:10:19.080 --> 00:10:22.000
And it's Microsoft for Startups Founders Hub.

00:10:22.000 --> 00:10:27.840
Founders Hub provides all founders at any stage with free resources to help solve startup challenges.

00:10:27.840 --> 00:10:36.620
The platform provides technology benefits, access to expert guidance and skilling resources, mentorship and networking connections, and so much more.

00:10:36.880 --> 00:10:45.020
Unlike others in the industry, Microsoft for Startups Founders Hub doesn't require startups to be investor backed or third party validated to participate.

00:10:45.020 --> 00:10:47.640
Founders Hub is truly open to all.

00:10:47.640 --> 00:10:48.460
So what do you get?

00:10:48.460 --> 00:10:54.840
You get to speed up development with free access to GitHub and Microsoft Cloud with the ability to unlock credits over time.

00:10:54.840 --> 00:11:05.340
And to help your startup innovate, Founders Hub is partnering with innovative companies like OpenAI, a global leader in AI research, and deployment to provide exclusive benefits and discounts.

00:11:05.340 --> 00:11:10.360
Through Microsoft for Startups Founders Hub, becoming a founder is no longer about who you know.

00:11:10.360 --> 00:11:25.160
You'll have access to their mentorship network, giving you access to a pool of hundreds of mentors across a range of disciplines, across areas like idea validation, fundraising, management, coaching, sales, marketing, as well as specific technical stress points.

00:11:25.160 --> 00:11:30.620
You'll be able to book a one-on-one meeting with the mentors, many of whom are former founders themselves.

00:11:31.020 --> 00:11:36.560
Make your ideas a reality today with the critical support you'll get from Microsoft for Startup Founders Hub.

00:11:36.560 --> 00:11:41.760
To join the program, visit pythonbytes.fm/foundershub 2022.

00:11:41.760 --> 00:11:47.160
Or, of course, go to your show notes for this episode and click the link there.

00:11:47.160 --> 00:11:47.660
Indeed.

00:11:47.660 --> 00:11:49.820
Thanks to Microsoft for supporting our show.

00:11:49.820 --> 00:11:50.880
Very cool program.

00:11:50.880 --> 00:11:51.560
All right.

00:11:51.560 --> 00:11:54.160
Let's talk about the cloud.

00:11:54.160 --> 00:11:58.380
We're going to round this whole episode out with a little bit of talk about the cloud as well.

00:11:58.800 --> 00:12:02.040
Specifically, though, serverless and functions.

00:12:02.040 --> 00:12:09.760
Brian, have you done anything with functions like AWS Lambda or DigitalOcean or any of those Azure functions?

00:12:09.760 --> 00:12:10.780
Not for a while.

00:12:10.780 --> 00:12:13.940
I played with it when I learned about them, but I haven't done anything lately.

00:12:13.940 --> 00:12:14.780
Yeah, they're neat.

00:12:14.780 --> 00:12:17.020
I've been thinking about this project.

00:12:17.020 --> 00:12:25.060
I'm not even close to committing to it and not going to give away too many details until I'm more willing to put time and energy into it.

00:12:25.060 --> 00:12:30.340
But something that requires interaction from many, many different geographical locations.

00:12:30.340 --> 00:12:35.640
And one thing that's really cool about Lambda and serverless, these functions, is you only pay while they're running.

00:12:35.640 --> 00:12:44.060
And so if you want to say, I want to have 20 different locations in which I can, like geolocations throughout the world, I could do certain things, but I'm not going to do them very often.

00:12:44.060 --> 00:12:50.340
Well, having a bunch of functions, many of them on these different parts of the cloud would be really awesome.

00:12:50.460 --> 00:12:57.880
And if you're working with AWS Lambda, there's certain APIs for doing this, obviously, that AWS puts out.

00:12:57.880 --> 00:13:01.100
But what if you were a Python developer and you wanted to use Python?

00:13:01.100 --> 00:13:16.260
So I present to you AWS Lambda Power Tools Python, a suite of utilities for AWS Lambda functions that makes distributed tracing, structured logging, custom metrics, and item potency, and many leading best practices easier.

00:13:16.420 --> 00:13:19.400
And it is all based on Python.

00:13:19.400 --> 00:13:23.200
So you can just write your Python code and start working with this API.

00:13:23.200 --> 00:13:28.260
This one came to us from, let me make sure I got this right, via Mark Pender.

00:13:28.260 --> 00:13:30.300
So thanks, Mark, for sending this in.

00:13:30.300 --> 00:13:35.360
It also happens to be available in Java, TypeScript, and .NET.

00:13:35.700 --> 00:13:46.320
But if you come down and look at the features, there's all sorts of different bits of Python code and classes or modules that you can use that do things like distributed tracing, right?

00:13:46.320 --> 00:13:56.500
Because if you're on a serverless thing and something you want to keep track of sort of logging or performance, you know, those things are super transient.

00:13:56.500 --> 00:14:00.900
They don't have a hard drive where you append to the log or anything like that, right?

00:14:00.900 --> 00:14:02.860
So having that kind of setup would be great.

00:14:02.860 --> 00:14:06.000
Use this Pydantic for data parsing.

00:14:06.000 --> 00:14:13.600
But there's just a bunch of built-in parts of this library that you can use within your functions, your serverless functions, to make it better.

00:14:13.720 --> 00:14:19.800
So it's got tracing, which includes decorators and utilities to trace Lambda functions, both synchronous and asynchronous.

00:14:19.800 --> 00:14:20.520
There you go.

00:14:20.520 --> 00:14:25.320
Structured logging, metrics that asynchronously go up to CloudWatch.

00:14:25.320 --> 00:14:27.120
Remember, this is AWS.

00:14:27.120 --> 00:14:31.540
Event handlers for putting stuff over into GraphQL.

00:14:31.540 --> 00:14:36.680
You can build your own middleware, like something that runs before and after the request.

00:14:36.680 --> 00:14:38.160
That's really, really handy.

00:14:38.160 --> 00:14:42.500
Like only certain types of clients should be able to call this over the web.

00:14:42.760 --> 00:14:45.480
Batch processing, typing, validation, a bunch of other stuff.

00:14:45.480 --> 00:14:46.640
Parsing, streaming.

00:14:46.640 --> 00:14:51.700
So you can actually set it up to, instead of loading some massive data set into your function,

00:14:51.700 --> 00:14:54.500
you can just stream that data in and process it as it goes.

00:14:54.500 --> 00:14:58.580
So there's some tutorials and there's some example applications.

00:14:58.580 --> 00:15:01.320
There's a serverless shopping cart, a serverless airline.

00:15:01.320 --> 00:15:02.580
That's a pretty big one.

00:15:02.580 --> 00:15:05.360
Serverless e-commerce platform and some graph.

00:15:05.360 --> 00:15:08.300
Serverless, just let me just say this.

00:15:08.300 --> 00:15:09.320
It's not a joke.

00:15:09.320 --> 00:15:09.740
It's serious.

00:15:09.740 --> 00:15:12.420
Serverless GraphQL nanny booking API.

00:15:12.420 --> 00:15:15.260
There it is.

00:15:15.260 --> 00:15:15.660
Sure.

00:15:15.660 --> 00:15:16.020
Why not?

00:15:16.020 --> 00:15:20.360
So anyway, if people are doing serverless, especially if they're doing AWS Lambda, this

00:15:20.360 --> 00:15:21.480
might be cool.

00:15:21.480 --> 00:15:27.580
John, she in the audience points out that Zappa works great for quickly in deploying Flask

00:15:27.580 --> 00:15:29.240
apps as, yeah.

00:15:29.240 --> 00:15:36.520
So if you look at AWS Zappo Lambda Flask, that's probably a sufficient search.

00:15:36.520 --> 00:15:37.000
Right.

00:15:37.060 --> 00:15:38.620
That's a pretty cool project.

00:15:38.620 --> 00:15:41.460
I believe we covered that way, way back in the day.

00:15:41.460 --> 00:15:45.920
So basically it turns your Flask routes into serverless function calls as well.

00:15:45.920 --> 00:15:48.340
So anyway, here's some nice tools.

00:15:48.340 --> 00:15:51.100
I suspect you could probably put those together as well, right?

00:15:51.100 --> 00:15:54.740
Like your tracing and logging, you could probably still put inside of Zappo.

00:15:54.940 --> 00:15:56.180
But I haven't tried that combination.

00:15:56.180 --> 00:15:56.620
Cool.

00:15:56.620 --> 00:15:57.120
Neat.

00:15:57.120 --> 00:16:00.240
Well, I'm looking forward to whatever secret project.

00:16:00.240 --> 00:16:04.520
There's like a 17 and a half percent chance that that actually comes to fruition because

00:16:04.520 --> 00:16:06.680
it's got a lot of operational overhead.

00:16:06.680 --> 00:16:09.960
I'm not sure I want to like put myself on pager duty.

00:16:09.960 --> 00:16:10.520
Yeah.

00:16:10.520 --> 00:16:11.020
Okay.

00:16:11.060 --> 00:16:12.080
I do want to hear what you got next.

00:16:12.080 --> 00:16:13.480
Well, I wanted to talk.

00:16:13.480 --> 00:16:14.640
Our friend Bob is on the screen, so.

00:16:14.640 --> 00:16:15.260
Yeah.

00:16:15.260 --> 00:16:22.040
So I wanted to talk about Bob Bilderbos and actually his GitHub profile.

00:16:22.040 --> 00:16:25.740
Several people have done things like this.

00:16:25.740 --> 00:16:29.060
So we're looking at Bob's GitHub profile.

00:16:29.060 --> 00:16:35.840
And one of the things you see that's different than the default is you see some stuff at the

00:16:35.840 --> 00:16:42.800
top, like the latest PyBytes articles and latest Python tips and even latest Boston on toots.

00:16:42.800 --> 00:16:44.640
So that's kind of neat.

00:16:44.640 --> 00:16:46.000
But how did he do this?

00:16:46.000 --> 00:16:51.680
Well, luckily, he's got a link at the bottom that says how to create a self-updating GitHub

00:16:51.680 --> 00:16:52.040
readme.

00:16:52.040 --> 00:16:55.460
And we did talk about this way back in 2020.

00:16:55.660 --> 00:16:58.020
Simon Willison had a blog post about that.

00:16:58.020 --> 00:17:01.360
And so we'll link to the episode and Simon's also.

00:17:01.360 --> 00:17:07.940
And Bob actually says he was inspired by both Simon and I think Brett Cannon as well has an

00:17:07.940 --> 00:17:08.860
updated readme.

00:17:08.860 --> 00:17:10.440
But I really like this article.

00:17:10.440 --> 00:17:17.360
So it's just a little short thing saying, hey, I started updating my profile, GitHub profile

00:17:17.360 --> 00:17:19.640
with some tools.

00:17:19.640 --> 00:17:21.400
And then he just published all the tools.

00:17:21.400 --> 00:17:22.940
So that's pretty awesome.

00:17:22.940 --> 00:17:24.520
First of all, he's got a script.

00:17:24.720 --> 00:17:28.080
So the script that runs, of course, he has it up on GitHub as well.

00:17:28.420 --> 00:17:32.200
And it just goes through and collects all of this data for him.

00:17:32.700 --> 00:17:37.340
And the script's pretty easy to read.

00:17:37.340 --> 00:17:46.120
And then all of it is used to fill out all that data is used to fill out a template, which

00:17:46.120 --> 00:17:47.520
he also published the template.

00:17:47.520 --> 00:17:52.300
It's a markdown file that uses for that.

00:17:52.300 --> 00:17:56.000
And then all of it's pulled together with a GitHub action.

00:17:56.200 --> 00:17:57.540
Wait, wait, wait, wait, go back for just a second there.

00:17:57.540 --> 00:18:02.500
It looks like it's a markdown file that has Jinja template language in it.

00:18:02.500 --> 00:18:07.880
So hit it with Jinja and it generates the final markdown.

00:18:07.880 --> 00:18:08.400
I think that's cool.

00:18:08.400 --> 00:18:10.540
So yeah, how does it look?

00:18:10.540 --> 00:18:14.220
I didn't look exactly where the template's being used in the code.

00:18:14.480 --> 00:18:15.240
Yeah, I don't see it either.

00:18:15.240 --> 00:18:20.240
But you don't have to have well-formed HTML for Jinja to run.

00:18:20.240 --> 00:18:22.640
You can just jam it against anything.

00:18:22.640 --> 00:18:29.780
For example, the RSS feed for Python bytes is generated using just an XML template with

00:18:29.780 --> 00:18:31.480
markup language in it like this.

00:18:31.480 --> 00:18:32.000
Yeah.

00:18:32.000 --> 00:18:38.480
It does look like he's using Jinja template itself out of the Jinja 2 project to render it.

00:18:38.780 --> 00:18:39.280
Yeah, cool.

00:18:39.280 --> 00:18:39.740
Nice.

00:18:39.740 --> 00:18:46.580
And then the whole thing is run by GitHub action and it auto commits.

00:18:46.580 --> 00:18:50.100
So using another project that GitHub auto commit.

00:18:50.100 --> 00:18:54.040
But the whole thing's pulled together and runs whenever.

00:18:54.040 --> 00:18:55.100
So once a day.

00:18:55.100 --> 00:18:56.320
And when does it run?

00:18:56.320 --> 00:18:57.540
Well, it's a cron job.

00:18:57.540 --> 00:19:01.740
So I had to use my handy decoder because I can never remember that stuff.

00:19:01.740 --> 00:19:02.880
Crontab.guru.

00:19:02.880 --> 00:19:04.920
It's 845 in the morning.

00:19:04.920 --> 00:19:07.400
It goes off and runs this.

00:19:07.720 --> 00:19:08.900
Kind of neat.

00:19:08.900 --> 00:19:10.660
I wanted to try this.

00:19:10.660 --> 00:19:14.900
So I highlighted it again because it's been on my to-do list since 2020.

00:19:14.900 --> 00:19:16.000
I haven't done it yet.

00:19:16.000 --> 00:19:21.720
One of the things that I'm hoping it will do is it'll highlight that I haven't posted any

00:19:21.720 --> 00:19:26.440
articles recently and it'll get me off my rump and write some more because I want to write.

00:19:26.440 --> 00:19:27.100
Yeah.

00:19:27.100 --> 00:19:27.620
Yeah.

00:19:27.620 --> 00:19:30.880
You'll have to take on the philosophy that I did as well.

00:19:30.880 --> 00:19:31.540
Like, you know what?

00:19:31.540 --> 00:19:32.260
Two paragraphs.

00:19:32.260 --> 00:19:34.020
That's a perfectly fine blog post.

00:19:34.020 --> 00:19:35.120
Yeah, definitely.

00:19:35.120 --> 00:19:40.580
I learned something and also the today I learned sort of thing as well.

00:19:40.580 --> 00:19:41.500
So I like that.

00:19:41.500 --> 00:19:42.560
Yeah, that was very popular.

00:19:42.560 --> 00:19:45.360
Well, that's quite a nice one.

00:19:45.360 --> 00:19:47.900
That's all of our normal items now.

00:19:47.900 --> 00:19:48.300
It is.

00:19:48.300 --> 00:19:48.760
Yeah.

00:19:48.760 --> 00:19:49.300
It is.

00:19:49.300 --> 00:19:49.880
You got any?

00:19:49.880 --> 00:19:53.360
Well, let me go through my extras first since I got a follow up for this one.

00:19:53.360 --> 00:19:53.680
Okay.

00:19:53.680 --> 00:19:54.260
I got a few extras.

00:19:54.420 --> 00:19:55.320
I know that we both do.

00:19:55.320 --> 00:19:58.460
So you talked about crontab.guru, right?

00:19:58.460 --> 00:19:59.880
People haven't seen this before.

00:19:59.880 --> 00:20:06.300
I just learned about this that there's this funky syntax for cron jobs, but there's the

00:20:06.300 --> 00:20:10.460
site crontab.guru that lets you put in like, well, I want a five there.

00:20:10.460 --> 00:20:13.800
It says every minute past hour five.

00:20:13.800 --> 00:20:20.020
If you just say star five, star, star, star, for example, or if you put, what's it?

00:20:20.020 --> 00:20:21.660
Like star over 20.

00:20:21.660 --> 00:20:27.260
Every 20 minutes, you know, past every minute past the 20th hour or like there's, there's

00:20:27.260 --> 00:20:31.900
weird syntax here, but there's this cool little site that you referenced.

00:20:31.900 --> 00:20:33.040
Oh, wow.

00:20:33.040 --> 00:20:33.380
Yeah.

00:20:33.640 --> 00:20:33.820
Yeah.

00:20:33.820 --> 00:20:38.320
I was curious if you could do like a just day of the week and not like no Sunday, Saturday

00:20:38.320 --> 00:20:39.700
and Sunday, how you would do that?

00:20:39.700 --> 00:20:40.260
Yeah.

00:20:40.260 --> 00:20:41.380
Probably.

00:20:41.380 --> 00:20:42.340
Yeah.

00:20:42.340 --> 00:20:45.000
There's 20 star now.

00:20:45.000 --> 00:20:48.680
Anyway, there's, there's a whole bunch of different things and a little bit of a description

00:20:48.680 --> 00:20:51.600
on how this works, but way more interesting than I knew.

00:20:51.600 --> 00:20:52.480
All right.

00:20:52.480 --> 00:20:54.340
So let me, let me tell you about a few things real quick.

00:20:54.340 --> 00:20:56.440
I recently, I've been playing with Canary Mail.

00:20:56.440 --> 00:21:02.240
Canary Mail is like a mail client, like Spike or Outlook or whatever, you know, one of the,

00:21:02.440 --> 00:21:05.460
you know, like Thunderbird, one of the client side, rich email clients.

00:21:05.460 --> 00:21:05.940
Okay.

00:21:05.940 --> 00:21:13.520
But this thing just added an AI capability called Inbox Copilot, which is a lot like GitHub Copilot.

00:21:13.520 --> 00:21:21.280
And so you just go to it and you just say, Hey there, email, write me a message that says

00:21:21.280 --> 00:21:21.520
this.

00:21:21.520 --> 00:21:24.760
So for example, you could just see like, if you got a message asking if you're going to be

00:21:24.760 --> 00:21:30.260
able to make the, so meaning you could just say, you type CCC anywhere in your message,

00:21:30.260 --> 00:21:34.220
it pulls up this little separate window that you talk to the AI and you just say, tell

00:21:34.220 --> 00:21:35.540
them, you know, apologize.

00:21:35.540 --> 00:21:38.800
I'll be late by 20 to 30 minutes traffic.

00:21:38.800 --> 00:21:39.840
And that's all you say.

00:21:39.840 --> 00:21:46.820
And it writes like a really nice, formal, like well-written, friendly, not terse message back.

00:21:46.820 --> 00:21:48.600
So I'm going to try to start playing with this a little bit more.

00:21:48.600 --> 00:21:49.420
We'll see how it goes.

00:21:49.420 --> 00:21:50.900
I already had the app.

00:21:50.900 --> 00:21:53.380
It just, it, they, it just came with this Copilot thing.

00:21:53.380 --> 00:21:54.520
I'm like, okay, that's pretty interesting.

00:21:54.560 --> 00:21:55.600
So people can check that out.

00:21:55.600 --> 00:21:57.680
I don't even know what it costs to be clear.

00:21:57.680 --> 00:21:58.580
Not an ad.

00:21:58.580 --> 00:22:03.440
This, this episode is sponsored by Microsoft, but yeah, it's like $20 a year.

00:22:03.440 --> 00:22:06.180
You know, not, not a terribly expensive thing to play with.

00:22:06.180 --> 00:22:06.580
All right.

00:22:06.580 --> 00:22:11.760
Next one is, this is a tweet from the Python package index itself.

00:22:11.760 --> 00:22:16.040
And the status is Python or the messages Python 3.11 delivers.

00:22:16.040 --> 00:22:17.100
Check this out, Brian.

00:22:17.100 --> 00:22:24.960
So they, they show some kind of analytics, real-time performance graph of the G unicorn,

00:22:24.960 --> 00:22:30.920
the Python worker processes that power PyPI on Python 3.10.

00:22:30.920 --> 00:22:33.200
And when they upgraded to 3.11, it's pretty striking, huh?

00:22:33.200 --> 00:22:34.280
Yeah, totally.

00:22:34.280 --> 00:22:36.540
That just went down and in load.

00:22:36.540 --> 00:22:40.640
If you look at it, yeah, I mean, it dropped at least 50% of usage there.

00:22:40.640 --> 00:22:43.360
And then if you, this is a pretty zoomed in picture.

00:22:43.360 --> 00:22:48.280
Someone else, Dustin Ingram, it was, tweeted, well, you should see it over time more.

00:22:48.280 --> 00:22:49.300
Look at, bam.

00:22:49.300 --> 00:22:51.260
There's this huge jump in the middle.

00:22:51.260 --> 00:22:53.560
This is when they restarted it.

00:22:53.560 --> 00:22:58.980
You know, whenever you restart the app, it doesn't have like all of its caches and all that stuff warmed up.

00:22:58.980 --> 00:23:03.120
And potentially they even maybe had to throw away like Redis cache data if they were pickling it

00:23:03.120 --> 00:23:08.340
because 3.10 and 3.11 didn't, you know, they might not be compatible in a binary way.

00:23:08.340 --> 00:23:11.520
So anyway, there's like this kind of like, ouch, you restarted us.

00:23:11.520 --> 00:23:13.340
It hurts type of thing.

00:23:13.340 --> 00:23:15.920
But then after that, it really, really drops.

00:23:15.920 --> 00:23:21.440
I mean, at least, at least 50% or 2x more for 3.10 than 3.11.

00:23:21.440 --> 00:23:23.780
So that's, that's really massive.

00:23:23.780 --> 00:23:24.740
That's pretty cool.

00:23:24.740 --> 00:23:26.340
Anyway, so 3.11 delivers.

00:23:26.340 --> 00:23:27.320
People can check that out.

00:23:27.380 --> 00:23:31.040
And this is, I mean, there's a lot of traffic on PyPI.org, right?

00:23:31.040 --> 00:23:33.300
Because it's not just the human browser traffic.

00:23:33.300 --> 00:23:38.640
It's every time you pip install something, every time you do a Docker build and it runs pip install something,

00:23:38.640 --> 00:23:42.360
like all the robots of the world are just hammering this thing, you know?

00:23:42.360 --> 00:23:42.900
Yeah.

00:23:42.900 --> 00:23:43.420
Yeah.

00:23:43.660 --> 00:23:43.860
Yeah.

00:23:43.860 --> 00:23:44.660
All right.

00:23:44.660 --> 00:23:45.740
So that's a good one.

00:23:45.740 --> 00:23:48.320
I was just in Las Vegas this weekend.

00:23:48.320 --> 00:23:48.860
That was fun.

00:23:48.860 --> 00:23:50.700
Thanks for rubbing it in.

00:23:50.700 --> 00:23:52.420
It's such a good time.

00:23:52.420 --> 00:23:59.540
Went to see the Blue Man Group and we went to see Cirque du Soleil and we had breakfast at like a beautiful brunch.

00:23:59.540 --> 00:24:06.200
They even had a, you know how some places have like a little omelet factory where you can have some eggs or whatever.

00:24:06.380 --> 00:24:08.740
You tell them they had a donut, one of those as well.

00:24:08.740 --> 00:24:10.660
So they'll make custom donuts for you on the spot.

00:24:10.660 --> 00:24:11.160
It was outrageous.

00:24:11.160 --> 00:24:12.340
Why do I bring this up?

00:24:12.340 --> 00:24:20.860
Not to rub in whether or not I was in Vegas, but it was my first chance to test out my iPad as my only dev device traveling experience.

00:24:20.860 --> 00:24:21.160
Oh, okay.

00:24:21.160 --> 00:24:23.380
First trip since I'd tried all those tools.

00:24:23.380 --> 00:24:25.440
And it worked pretty fabulously, actually.

00:24:25.440 --> 00:24:30.400
I just took my iPad and my ergonomic keyboard so I don't give myself carpal tunnel again.

00:24:30.400 --> 00:24:31.740
And it worked great.

00:24:31.740 --> 00:24:35.340
So all those tools we talked about, people, maybe I'll find a way.

00:24:35.340 --> 00:24:37.580
If people want to know, I'll find a way to link back to that episode.

00:24:37.580 --> 00:24:41.080
Able to monitor the Michael Kennedy empire from remote.

00:24:41.080 --> 00:24:41.620
Indeed.

00:24:41.620 --> 00:24:42.000
Yeah.

00:24:42.000 --> 00:24:46.980
I even, I busted in and installed some Linux security updates real quick and then dropped back out.

00:24:46.980 --> 00:24:47.540
It was all good.

00:24:47.540 --> 00:24:48.440
Tailed some logs.

00:24:48.440 --> 00:24:49.200
Yeah, it was fine.

00:24:49.200 --> 00:24:50.240
Mostly I wrote email.

00:24:50.240 --> 00:24:52.160
No, that's what my empire is about.

00:24:52.160 --> 00:24:52.760
It's right email.

00:24:52.760 --> 00:24:53.340
All right.

00:24:53.340 --> 00:24:54.800
Here's another good one.

00:24:54.800 --> 00:24:59.500
Linux, Amazon, Meta, and Microsoft want to break the Google Maps monopoly.

00:25:00.140 --> 00:25:07.680
So apparently Google Maps owns a significant portion of the mapping data and the street view data and so on.

00:25:07.880 --> 00:25:12.880
But all those groups I mentioned are working on creating this thing called Overture Maps Foundation.

00:25:12.880 --> 00:25:23.760
And they're going to create an open source, open to everyone set of maps by pulling in some of existing open map data, but also really doubling down on trying to add more information.

00:25:23.760 --> 00:25:24.680
That's pretty cool, right?

00:25:24.740 --> 00:25:27.180
So if you want to do anything with mapping, that might be getting a lot better.

00:25:27.180 --> 00:25:27.680
Yeah.

00:25:27.680 --> 00:25:30.780
I haven't seen the word TomTom in a long time.

00:25:30.780 --> 00:25:31.820
I know.

00:25:31.820 --> 00:25:34.560
I actually had my hands on a TomTom device this summer.

00:25:34.560 --> 00:25:35.200
It was insane.

00:25:35.200 --> 00:25:35.700
All right.

00:25:35.700 --> 00:25:37.820
Last one before we get to our joke.

00:25:37.820 --> 00:25:42.200
I decided my laptop that had zero stickers on it was boring.

00:25:42.200 --> 00:25:43.580
So I went completely bonkers.

00:25:43.580 --> 00:25:45.440
Got a completely.

00:25:45.440 --> 00:25:50.380
I went to Redbubble, ordered an insane number of stickers and put on my laptop.

00:25:50.380 --> 00:25:51.240
What do you think of this thing, Brian?

00:25:51.240 --> 00:25:53.220
I'll put the link in the picture in the show notes.

00:25:53.220 --> 00:25:56.940
I like the laptop opening and closing tags.

00:25:56.940 --> 00:25:57.760
Yeah.

00:25:57.760 --> 00:26:02.860
It's got a bracket laptop at the top of the laptop, and it's got a bracket slash laptop at the bottom.

00:26:02.860 --> 00:26:03.380
Yeah.

00:26:03.380 --> 00:26:04.800
You got Python bytes there.

00:26:04.800 --> 00:26:05.320
It's nice.

00:26:05.320 --> 00:26:07.300
I got to get you a testing code sticker.

00:26:07.300 --> 00:26:07.900
Yeah.

00:26:07.900 --> 00:26:08.400
Get in there.

00:26:08.400 --> 00:26:09.120
We'll find a spot.

00:26:09.120 --> 00:26:11.880
I replaced the Mac icon with a terminal icon.

00:26:11.880 --> 00:26:12.960
So it was pretty good.

00:26:12.960 --> 00:26:13.340
Yeah.

00:26:13.340 --> 00:26:14.720
Anyway, that was a lot of fun.

00:26:14.720 --> 00:26:15.120
Okay.

00:26:15.120 --> 00:26:16.660
But that's it for my extras.

00:26:16.660 --> 00:26:17.100
How about yours?

00:26:17.100 --> 00:26:18.400
I got a few extras.

00:26:18.400 --> 00:26:21.420
So I just don't have a lot to add to these,

00:26:21.540 --> 00:26:23.740
but I'd noticed it's kind of interesting.

00:26:23.740 --> 00:26:31.640
So GitHub, I think this was on December 15th, announced that they're able to check for security

00:26:31.640 --> 00:26:31.980
leaks.

00:26:31.980 --> 00:26:39.780
And I'm linking to an article that they can check your GitHub repos for security leaks,

00:26:39.780 --> 00:26:41.540
like secrets and stuff.

00:26:42.260 --> 00:26:48.800
Apparently, that's how a lot of secrets get leaked, is people actually merge requests a bunch of secrets or something.

00:26:48.800 --> 00:26:52.300
So it's kind of cool that it's there.

00:26:52.300 --> 00:26:54.660
It says you have to turn it on.

00:26:54.660 --> 00:26:57.680
I went to check one of my repos, and it looked like it was already on.

00:26:57.680 --> 00:27:00.000
So I may as well check it anyway.

00:27:00.420 --> 00:27:04.260
So I wanted to shout out to Julia Evans.

00:27:04.260 --> 00:27:05.040
Did I get that right?

00:27:05.040 --> 00:27:05.660
Julia Evans.

00:27:05.660 --> 00:27:10.040
She's written a whole bunch of great stuff to help programmers, but she just released Pocket

00:27:10.040 --> 00:27:11.100
Guide to Debugging.

00:27:11.100 --> 00:27:13.260
And I was pretty intrigued by this.

00:27:13.260 --> 00:27:20.520
One of the things that highlighted was asking for help and writing a tiny program that reproduces

00:27:20.520 --> 00:27:21.060
the problem.

00:27:21.060 --> 00:27:25.220
Those are two things that I really encourage people to do before they waste too much time.

00:27:25.340 --> 00:27:29.340
So I might throw some money away because those are really great free tips.

00:27:29.340 --> 00:27:30.200
Yeah, that's cool.

00:27:30.200 --> 00:27:36.040
There's a, I found this, what, Python Easter eggs repository.

00:27:36.040 --> 00:27:38.240
Not all of these work anymore.

00:27:38.240 --> 00:27:41.320
So I tried the first one, the import hello on Python 3.11.

00:27:41.320 --> 00:27:42.240
Doesn't seem to work.

00:27:42.240 --> 00:27:44.500
But a bunch of these others are really pretty fun.

00:27:44.500 --> 00:27:46.380
Import this, of course, is there.

00:27:46.520 --> 00:27:52.520
One of the things that I think I knew about at one point, but I forgot about was the from

00:27:52.520 --> 00:27:55.540
future import Barry as Fluffle.

00:27:55.540 --> 00:28:04.700
So this was a joke from 2009 that's still in Python 3.11 that it's Barry Wars.

00:28:04.700 --> 00:28:07.960
It's like a joke from Barry Warsaw and Brett Cannon.

00:28:07.960 --> 00:28:15.560
And if you do that, it completely, it removes the not equal, like the pound, like the, the

00:28:15.560 --> 00:28:21.200
bang equal sign with less than greater than for not equal.

00:28:21.200 --> 00:28:25.740
So the joke being if Barry was the dictator for life, he would change it.

00:28:25.740 --> 00:28:26.780
Anyway, it's kind of funny.

00:28:26.780 --> 00:28:30.140
Fluffle stands for friendly language uncle for life.

00:28:30.140 --> 00:28:32.360
And there's even a PEP for it.

00:28:32.360 --> 00:28:36.520
So you can, you can read about the B PEP 401 with this.

00:28:36.520 --> 00:28:37.240
Anyway.

00:28:37.240 --> 00:28:37.880
Nice.

00:28:38.080 --> 00:28:38.920
Just a few extras.

00:28:38.920 --> 00:28:40.320
It could have been our joke.

00:28:40.320 --> 00:28:41.560
It could have been our joke section.

00:28:41.560 --> 00:28:44.620
It could have been our joke section, but we have another joke, don't we?

00:28:44.620 --> 00:28:45.100
We do.

00:28:45.100 --> 00:28:48.520
So I told you, we'd wrap this up with some stuff about the cloud.

00:28:48.520 --> 00:28:53.020
So here's a nice little conversation a father and a daughter are having.

00:28:53.020 --> 00:28:56.700
They're out walking in a park and looking up at the sky and they see a cloud, you know,

00:28:56.700 --> 00:28:58.620
mostly empty sky, empty sky.

00:28:58.620 --> 00:29:01.700
And the kid says, dad, what are clouds made of?

00:29:01.700 --> 00:29:04.760
The dad looks down and clearly says, Linux servers mostly.

00:29:04.760 --> 00:29:07.360
That's good, right?

00:29:07.480 --> 00:29:07.880
Yeah.

00:29:07.880 --> 00:29:07.980
Yeah.

00:29:07.980 --> 00:29:08.620
That's good.

00:29:08.620 --> 00:29:13.160
Even when they're serverless, they're probably still Linux things running in Docker, running

00:29:13.160 --> 00:29:15.300
on a Kubernetes cluster, running on Linux.

00:29:15.300 --> 00:29:17.280
Serverless is a hilarious word.

00:29:17.280 --> 00:29:19.060
It just means you don't know where the server is.

00:29:19.060 --> 00:29:19.440
Yeah.

00:29:19.440 --> 00:29:20.960
It's like server's not my problem.

00:29:20.960 --> 00:29:21.580
Yeah.

00:29:23.320 --> 00:29:25.300
Well, this show is not a problem.

00:29:25.300 --> 00:29:25.980
It was a lot of fun.

00:29:25.980 --> 00:29:27.020
It was a lot of fun.

00:29:27.020 --> 00:29:30.860
Thanks so much for joining us and showing up again.

00:29:30.860 --> 00:29:32.560
And thanks everybody in the audience.

00:29:32.560 --> 00:29:33.360
Yeah, absolutely.

00:29:33.360 --> 00:29:36.160
Hey, before we go, I have one quick more announcement really, really quickly.

00:29:36.640 --> 00:29:42.140
Next week, for those of you who are kind enough to drop in and join us live, we're not doing

00:29:42.140 --> 00:29:42.700
a live show.

00:29:42.700 --> 00:29:46.460
We're going to do a crossover episode with Talk Python and vice versa.

00:29:46.460 --> 00:29:47.920
Python Bytes on Talk Python.

00:29:47.920 --> 00:29:49.820
And Brian, we're going to be on vacation.

00:29:50.180 --> 00:29:51.300
So I'll see you in January.

00:29:51.300 --> 00:29:52.080
All right.

00:29:52.080 --> 00:29:53.480
Talk to everybody in January.

00:29:53.480 --> 00:29:53.920
Yeah.

00:29:53.920 --> 00:29:55.140
So happy new year, everyone.

