
00:00:00.000 --> 00:00:07.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 315


00:00:07.500 --> 00:00:13.680
Recorded December 20 2022 almost the end of the year. I am Brian Hawkins. I'm Michael Kennedy


00:00:13.680 --> 00:00:17.000
It is almost the end of the year. You guys you ready for Christmas and everything?


00:00:17.000 --> 00:00:23.560
Yeah starting to think about Christmas maybe try to do some skiing, you know, it's getting cold and it's snowing in the mountains around here


00:00:23.560 --> 00:00:28.920
So yeah getting there. Why don't you kick us off with our first story? Let's go. Let's talk some Jupyter server


00:00:29.000 --> 00:00:32.040
So this is an announcement by Zack Saylor,


00:00:32.040 --> 00:00:35.160
and it says, "Jupyter Server 2.0 is released."


00:00:35.160 --> 00:00:36.200
Now we know what Jupyter is,


00:00:36.200 --> 00:00:37.320
we know what Jupyter Notebooks are,


00:00:37.320 --> 00:00:38.920
we know what JupyterLab is.


00:00:38.920 --> 00:00:41.540
Well, Jupyter Server is the core web server


00:00:41.540 --> 00:00:43.880
that powers those things, right?


00:00:43.880 --> 00:00:46.840
So when you pull up a JupyterLab or a Jupyter Notebook,


00:00:46.840 --> 00:00:48.200
you're talking to a server.


00:00:48.200 --> 00:00:50.760
Oftentimes that's a local host little thing running,


00:00:50.760 --> 00:00:52.960
but other times it's a centralized server


00:00:52.960 --> 00:00:55.760
that's set up for like students or a research group,


00:00:55.760 --> 00:00:57.800
or it's set up on a supercomputer


00:00:57.800 --> 00:01:00.720
a bunch of data that you log into it.


00:01:00.720 --> 00:01:01.960
It runs locally on that, right?


00:01:01.960 --> 00:01:05.240
So the core of Jupyter in a lot of ways.


00:01:05.240 --> 00:01:07.160
So 2.0, that's a big deal, right?


00:01:07.160 --> 00:01:08.480
- I think so.


00:01:08.480 --> 00:01:09.880
Means new features, right?


00:01:09.880 --> 00:01:11.240
- Open source, when something goes


00:01:11.240 --> 00:01:13.200
from one major version to another,


00:01:13.200 --> 00:01:14.600
that's usually a pretty big deal.


00:01:14.600 --> 00:01:16.260
So let's hit some of the highlights.


00:01:16.260 --> 00:01:19.920
So one of them is a new identity API.


00:01:19.920 --> 00:01:22.560
One of the farther looking out features


00:01:22.560 --> 00:01:25.440
of Jupyter server that they're hoping to bring


00:01:25.440 --> 00:01:28.160
is like a Google Docs like experience.


00:01:28.160 --> 00:01:31.200
So real-time collaboration experiences.


00:01:31.200 --> 00:01:33.240
There are some, I'm making them better.


00:01:33.240 --> 00:01:36.040
And around this, having multiple people


00:01:36.040 --> 00:01:38.160
working on a single notebook,


00:01:38.160 --> 00:01:41.360
you need to have a good way to work with identity.


00:01:41.360 --> 00:01:43.960
So there's a new identity API in Jupyter Server


00:01:43.960 --> 00:01:45.360
that makes it possible.


00:01:45.360 --> 00:01:48.380
It is configurable, luggable.


00:01:48.380 --> 00:01:51.120
You can even swap out your own identity provider


00:01:51.120 --> 00:01:53.380
to authenticate users with any provider.


00:01:53.380 --> 00:01:56.980
So within your organization, you could do single sign-on,


00:01:56.980 --> 00:01:58.340
all those types of fun things.


00:01:58.340 --> 00:01:59.180
- Oh, neat.


00:01:59.180 --> 00:02:00.020
- Yeah.


00:02:00.020 --> 00:02:02.660
Related to that, you have authorization.


00:02:02.660 --> 00:02:05.560
So once you know who you are, what can you do?


00:02:05.560 --> 00:02:07.620
Enabling collaboration on a notebook


00:02:07.620 --> 00:02:10.300
shouldn't just mean you have access to everything


00:02:10.300 --> 00:02:12.160
on the server or nothing on the server,


00:02:12.160 --> 00:02:14.980
but you maybe have access to these notebooks,


00:02:14.980 --> 00:02:15.980
but not those notebooks.


00:02:15.980 --> 00:02:18.100
Or maybe you can read that notebook and not write to it.


00:02:18.100 --> 00:02:20.940
So there's this new authorization API


00:02:20.940 --> 00:02:23.740
that allows you to share certain notebooks


00:02:23.740 --> 00:02:24.900
with certain people,


00:02:24.900 --> 00:02:26.540
even if they have access to the server.


00:02:26.540 --> 00:02:27.500
And so that's pretty cool.


00:02:27.500 --> 00:02:30.300
Again, with the collaboration stuff,


00:02:30.300 --> 00:02:33.560
there's a new event system API coming along


00:02:33.560 --> 00:02:36.620
and they created this package called Jupyter Events


00:02:36.620 --> 00:02:41.620
that allows for JSON based event driven system over here.


00:02:41.620 --> 00:02:44.100
So a lot of cool things that should be coming.


00:02:44.100 --> 00:02:45.700
So it's like a foundational piece


00:02:45.700 --> 00:02:47.520
so that they can add more events,


00:02:47.520 --> 00:02:49.180
more interactivity and so on.


00:02:49.180 --> 00:02:51.500
There's a new kernel WebSocket API.


00:02:51.500 --> 00:02:53.460
It ships with its own kernel manager.


00:02:53.460 --> 00:02:55.540
I suspect most people are not messing with that,


00:02:55.540 --> 00:02:57.260
but it's down in the guts.


00:02:57.260 --> 00:02:59.780
In JupyterLab, you can open up a terminal.


00:02:59.780 --> 00:03:03.060
Now this terminal service is a server extension


00:03:03.060 --> 00:03:05.420
and it can be optionally disabled


00:03:05.420 --> 00:03:06.720
because it's an extension, which is cool.


00:03:06.720 --> 00:03:08.180
And Brian, the last one for you.


00:03:08.180 --> 00:03:11.700
They say, "As we work to increase our test coverage to 80%,"


00:03:11.700 --> 00:03:13.540
major thank you to Steve Sylvester,


00:03:13.540 --> 00:03:15.900
"we built a handy set of pytest fixtures


00:03:15.900 --> 00:03:17.820
that can benefit Jupyter developers


00:03:17.820 --> 00:03:19.560
and extension authors.


00:03:19.560 --> 00:03:20.500
- That's pretty cool. - That's sweet.


00:03:20.500 --> 00:03:22.420
Yeah, we released pytest Jupyter,


00:03:22.420 --> 00:03:24.620
bunch of fixtures and other pytest goodies


00:03:24.620 --> 00:03:26.620
for Jupyter core libraries and extensions.


00:03:26.620 --> 00:03:27.460
- That's nice.


00:03:27.460 --> 00:03:29.260
I'm actually gonna check this out


00:03:29.260 --> 00:03:31.900
and I think it'd be cool to get one of those folks


00:03:31.900 --> 00:03:34.180
on to Test and Code to talk about it.


00:03:34.180 --> 00:03:35.580
So I'll reach out to them.


00:03:35.580 --> 00:03:37.100
- Yeah, I think that'd be great too.


00:03:37.100 --> 00:03:38.660
All right, well, there you have it.


00:03:38.660 --> 00:03:40.660
The core of Jupyter got a little bit better.


00:03:40.660 --> 00:03:41.500
- Nice.


00:03:41.500 --> 00:03:44.820
Well, what do we, I'm next.


00:03:44.820 --> 00:03:46.620
So I guess- - Well, you got next.


00:03:46.620 --> 00:03:48.020
What do I got?


00:03:48.020 --> 00:03:51.420
I actually, so last week,


00:03:51.420 --> 00:03:53.940
it was just last week actually, time flies.


00:03:53.940 --> 00:03:57.380
We were talking about automatically converting stuff,


00:03:57.380 --> 00:04:01.420
like having other programs convert your Python code,


00:04:01.420 --> 00:04:02.420
modify your code,


00:04:02.420 --> 00:04:04.260
and all the different ways you can do that.


00:04:04.260 --> 00:04:06.180
And one of the things I said was,


00:04:06.180 --> 00:04:10.140
it'd be cool if we had some ways to convert


00:04:10.140 --> 00:04:13.420
from setup.py to setup.cfg,


00:04:13.420 --> 00:04:17.260
or from setup systems to pyproject.toml.


00:04:17.260 --> 00:04:19.900
And so of course, lots of people reached out to me


00:04:19.900 --> 00:04:21.780
and said, there's already some ways


00:04:21.780 --> 00:04:22.940
that you should take a look at.


00:04:22.940 --> 00:04:26.420
So thank you, Christian Klaus and Brian Skin


00:04:26.420 --> 00:04:29.220
and others for reaching out and letting me know.


00:04:29.220 --> 00:04:31.900
First one, actually the main thing I wanted to talk about


00:04:31.900 --> 00:04:34.580
was a thing called any to toml.


00:04:34.580 --> 00:04:38.980
So this is a project that takes, it converts,


00:04:38.980 --> 00:04:43.980
it attempts to convert any files or CFG files to TOML.


00:04:43.980 --> 00:04:45.780
They say it's experimental.


00:04:45.780 --> 00:04:49.980
So what is, I thought I was looking at setup.py files.


00:04:49.980 --> 00:04:52.700
Well, actually a lot of like large projects


00:04:52.700 --> 00:04:54.420
are not just setup.py.


00:04:54.420 --> 00:04:56.300
They've moved a lot of the settings


00:04:56.300 --> 00:04:58.700
from setup.py to setup.cfg.


00:04:58.700 --> 00:05:00.060
So this is still helpful.


00:05:00.060 --> 00:05:02.460
This isn't gonna, I don't think I can grab


00:05:02.460 --> 00:05:05.260
your setup.py file if that's the only thing you're using.


00:05:05.260 --> 00:05:08.700
But if you're using setup.cfg, maybe this will help.


00:05:08.700 --> 00:05:12.580
converts to a TOML file and it says it's experimental,


00:05:12.580 --> 00:05:14.120
but that's all right.


00:05:14.120 --> 00:05:15.800
So it's kind of fun.


00:05:15.800 --> 00:05:17.940
There's like a couple versions of it.


00:05:17.940 --> 00:05:19.940
One of the versions is light


00:05:19.940 --> 00:05:22.980
and it's got light, L-I-T-E and full


00:05:22.980 --> 00:05:26.740
and the light version has less calories.


00:05:26.740 --> 00:05:31.640
No, the light version creates a TOML file,


00:05:31.640 --> 00:05:35.140
but the full version will try to get your comments over too.


00:05:35.140 --> 00:05:38.520
So convert your comments into TOML compliant comments.


00:05:38.520 --> 00:05:39.360
That's pretty neat.


00:05:39.360 --> 00:05:41.160
So I would, I'd definitely try that.


00:05:41.160 --> 00:05:45.160
What did I, I didn't, I don't think I tried this.


00:05:45.160 --> 00:05:47.320
I didn't try this, but it looks pretty fun.


00:05:47.320 --> 00:05:50.460
So a way to automatically change that.


00:05:50.460 --> 00:05:53.080
So be fun to grab that.


00:05:53.080 --> 00:05:54.900
And I've heard from people that,


00:05:54.900 --> 00:05:57.840
that they have used this to convert their project,


00:05:57.840 --> 00:05:59.720
at least the initial batch.


00:05:59.720 --> 00:06:03.960
But at least Christian mentioned that


00:06:03.960 --> 00:06:06.680
they needed to clean it up a bit afterwards.


00:06:06.680 --> 00:06:12.560
One of the tools they used was a thing called PyProject-format.


00:06:12.560 --> 00:06:15.960
What this does is, and I did try this, it's pretty neat.


00:06:15.960 --> 00:06:21.280
It takes like if you got any PyProject.toml file,


00:06:21.280 --> 00:06:26.680
and it converts it to a known way to set it up.


00:06:26.680 --> 00:06:29.880
>> It's like black for project files.


00:06:29.880 --> 00:06:32.120
>> Kind of, yeah. But one of the things with


00:06:32.120 --> 00:06:36.160
the toml syntax is you can have like in any file,


00:06:36.160 --> 00:06:39.280
You can have things in any order you want and it's still valid,


00:06:39.280 --> 00:06:41.880
but are you going to be able to find it there?


00:06:41.880 --> 00:06:43.860
If you're working with lots of projects,


00:06:43.860 --> 00:06:48.020
it'd be really nice if the authors were in a similar place,


00:06:48.020 --> 00:06:50.340
and the dependencies were in a similar place,


00:06:50.340 --> 00:06:52.560
because they could be all over the place.


00:06:52.560 --> 00:06:58.060
It's easier to find them if they're in the right place and formatted the same.


00:06:58.060 --> 00:07:03.600
Who really cares how it's formatted as long as it looks good and it's proper.


00:07:03.600 --> 00:07:05.440
I think this is a neat idea.


00:07:05.440 --> 00:07:09.680
I traded on a couple of my projects and it worked okay.


00:07:09.680 --> 00:07:13.000
So, and I wanna like put that in the asterisk.


00:07:13.000 --> 00:07:15.800
So you do you wanna check what you get afterwards?


00:07:15.800 --> 00:07:18.840
Is one of the things it did, which I didn't expect it to,


00:07:18.840 --> 00:07:22.760
was it replaced, it took the name of my project


00:07:22.760 --> 00:07:24.840
and replaced dashes with underscores.


00:07:24.840 --> 00:07:27.600
And I know that like a library,


00:07:27.600 --> 00:07:31.000
you can't have a dash in the thing you're importing,


00:07:31.000 --> 00:07:33.840
but the name of the project that is where it shows up


00:07:33.840 --> 00:07:37.300
on PyPI and everywhere else,


00:07:37.300 --> 00:07:38.680
it can have a dash in it.


00:07:38.680 --> 00:07:40.980
Traditionally, and I was using it on a pytest plugin,


00:07:40.980 --> 00:07:42.420
traditionally, we do have dashes.


00:07:42.420 --> 00:07:44.240
We say pytest dash something.


00:07:44.240 --> 00:07:47.220
It needs to stay a dash, don't translate it.


00:07:47.220 --> 00:07:49.920
>> You want it to be pytest_check?


00:07:49.920 --> 00:07:52.500
>> Yeah. No, I don't want it to be that.


00:07:52.500 --> 00:07:55.020
I did submit an issue.


00:07:55.020 --> 00:07:56.140
I'm sure it's a minor thing,


00:07:56.140 --> 00:07:59.940
but at least I know it's there, so to check it out.


00:07:59.940 --> 00:08:02.700
A neat tool to auto-format it.


00:08:02.700 --> 00:08:05.780
A couple of other tools that were neat,


00:08:05.780 --> 00:08:08.260
validate pyproject.


00:08:08.260 --> 00:08:10.860
Oh, just a moment. Can you still see me?


00:08:10.860 --> 00:08:11.620
>> Yeah.


00:08:11.620 --> 00:08:11.860
>> Sorry.


00:08:11.860 --> 00:08:12.340
>> Seems fine.


00:08:12.340 --> 00:08:14.180
>> Something happened on my computer.


00:08:14.180 --> 00:08:20.140
Anyway, it just validates to make sure everything's fine.


00:08:20.140 --> 00:08:22.980
I ran it on a couple of projects and nothing happened.


00:08:22.980 --> 00:08:24.180
I'm like, "Oh, it must be good."


00:08:24.180 --> 00:08:28.980
So I inserted some errors just to see what would happen.


00:08:28.980 --> 00:08:30.300
It's pretty terse.


00:08:30.300 --> 00:08:34.860
It pretty much just says like there's an error on this line at this column or something.


00:08:34.860 --> 00:08:37.660
And so it's still helpful.


00:08:37.660 --> 00:08:43.020
You can go count and figure out where the project might be, but kind of a neat validator.


00:08:43.020 --> 00:08:50.300
But for validation, and I'm not sure what I was checking, but it says it's JSON schema definition defined driven.


00:08:50.300 --> 00:08:51.900
So you could probably check it out.


00:08:51.900 --> 00:08:53.220
>> Interesting.


00:08:53.220 --> 00:08:57.540
It probably converts it to JSON and then runs through JSON schema or something like that.


00:08:57.540 --> 00:08:58.180
>> Oh, you think so?


00:08:58.180 --> 00:08:58.580
Maybe.


00:08:58.580 --> 00:08:59.700
>> Yeah, probably.


00:08:59.700 --> 00:09:04.180
>> Might. One of the things I wanted to bring up when


00:09:04.180 --> 00:09:09.060
validating TOML files and projects is don't forget TOX.


00:09:09.060 --> 00:09:14.900
Using TOX to go ahead and what the default of TOX,


00:09:14.900 --> 00:09:16.400
you can use it for lots of stuff,


00:09:16.400 --> 00:09:18.680
but the default works great for me for this,


00:09:18.680 --> 00:09:21.060
which is to take your project, build it,


00:09:21.060 --> 00:09:24.720
put it in a virtual environment and install it there.


00:09:24.720 --> 00:09:28.140
You'll catch things like you forgot to specify


00:09:28.140 --> 00:09:34.460
dependency or missing dependencies or you forgot some code or something like that.


00:09:34.460 --> 00:09:35.700
You'll catch it if you test it.


00:09:35.700 --> 00:09:37.100
So test your projects.


00:09:37.100 --> 00:09:38.180
>> Absolutely.


00:09:38.180 --> 00:09:40.020
Yeah, those are a bunch of great little tools.


00:09:40.020 --> 00:09:42.100
I didn't know about hardly any of them.


00:09:42.100 --> 00:09:44.300
I'm going to do more with pyproject.toml.


00:09:44.300 --> 00:09:48.300
It's nice. Hatch and hatchling and pyproject.toml.


00:09:48.300 --> 00:09:50.340
>> Yeah, Hatch is fun.


00:09:50.340 --> 00:09:51.900
So Hatch and hatchling.


00:09:51.900 --> 00:09:53.900
>> It sure is. All right.


00:09:53.900 --> 00:09:57.740
Well, quick word from our sponsor before we move on, do you think?


00:09:57.740 --> 00:09:58.940
Yeah, it sounds great.


00:09:58.940 --> 00:10:03.340
So this episode of Python Bytes is brought to you by Microsoft for Startups.


00:10:03.340 --> 00:10:05.140
Starting a business is hard.


00:10:05.140 --> 00:10:09.840
By some estimates, over 90% of startups will go out of business within the first year.


00:10:09.840 --> 00:10:13.240
With this in mind, Microsoft for Startups set out to understand


00:10:13.240 --> 00:10:15.640
what startups need to be successful


00:10:15.640 --> 00:10:19.440
and create a digital platform to help overcome those challenges.


00:10:19.440 --> 00:10:22.040
And it's Microsoft for Startups Founders Hub.


00:10:22.040 --> 00:10:24.840
Founders Hub provides all founders at any stage


00:10:24.840 --> 00:10:28.120
with free resources to help solve startup challenges.


00:10:28.120 --> 00:10:30.620
The platform provides technology benefits,


00:10:30.620 --> 00:10:32.320
access to expert guidance,


00:10:32.320 --> 00:10:34.520
and skilling resources, mentorship,


00:10:34.520 --> 00:10:36.720
and networking connections, and so much more.


00:10:36.720 --> 00:10:38.400
Unlike others in the industry,


00:10:38.400 --> 00:10:40.320
Microsoft for Startup, Founders Hub,


00:10:40.320 --> 00:10:42.840
doesn't require startups to be investor-backed


00:10:42.840 --> 00:10:45.240
or third-party validated to participate.


00:10:45.240 --> 00:10:47.720
Founders Hub is truly open to all.


00:10:47.720 --> 00:10:50.400
What do you get? You get to speed up development with


00:10:50.400 --> 00:10:52.800
free access to GitHub and Microsoft Cloud,


00:10:52.800 --> 00:10:55.000
with the ability to unlock credits over time.


00:10:55.000 --> 00:10:56.560
And to help your startup innovate,


00:10:56.560 --> 00:10:59.200
Founders Hub is partnering with innovative companies


00:10:59.200 --> 00:11:02.200
like OpenAI, a global leader in AI research,


00:11:02.200 --> 00:11:05.640
and deployment to provide exclusive benefits and discounts.


00:11:05.640 --> 00:11:07.980
Through Microsoft for Startup Founders Hub,


00:11:07.980 --> 00:11:10.520
becoming a founder is no longer about who you know.


00:11:10.520 --> 00:11:12.920
You'll have access to their mentorship network,


00:11:12.920 --> 00:11:15.400
giving you access to a pool of hundreds of mentors


00:11:15.400 --> 00:11:17.160
across a range of disciplines,


00:11:17.160 --> 00:11:20.400
across areas like idea validation, fundraising,


00:11:20.400 --> 00:11:25.280
management, coaching, sales, marketing, as well as specific technical stress points.


00:11:25.280 --> 00:11:29.680
You'll be able to book a one-on-one meeting with the mentors, many of whom are former


00:11:29.680 --> 00:11:34.480
founders themselves. Make your ideas a reality today with the critical support you'll get from


00:11:34.480 --> 00:11:42.320
Microsoft for Startup Founders Hub. To join the program, visit pythonbytes.fm/foundershub2022,


00:11:42.320 --> 00:11:47.040
or of course, go to your show notes for this episode and click the link there.


00:11:47.040 --> 00:11:50.040
>> Indeed. Thanks to Microsoft for supporting our show.


00:11:50.040 --> 00:11:51.920
Very cool program. All right.


00:11:51.920 --> 00:11:54.280
Let's talk about the Cloud.


00:11:54.280 --> 00:11:56.560
We're going to round this whole episode out


00:11:56.560 --> 00:11:58.480
with a little bit of talk about the Cloud as well.


00:11:58.480 --> 00:12:02.220
Specifically though, serverless and functions.


00:12:02.220 --> 00:12:05.720
Brian, have you done anything with functions like AWS Lambda,


00:12:05.720 --> 00:12:10.040
or DigitalOcean, or any of those Azure functions?


00:12:10.040 --> 00:12:12.280
>> Not for a while. I played with it when I learned about them,


00:12:12.280 --> 00:12:14.120
but I haven't done anything lately.


00:12:14.120 --> 00:12:16.320
>> Yeah, they're neat. I've been thinking about


00:12:16.320 --> 00:12:20.720
this project, I'm not even close to committing to it and not going to give


00:12:20.720 --> 00:12:25.040
away too many details until I more willing to put time and energy into it.


00:12:25.040 --> 00:12:29.840
But something that requires interaction from many, many different geographical


00:12:29.840 --> 00:12:33.980
locations. And one thing that's really cool about Lambda and serverless, these


00:12:33.980 --> 00:12:37.240
functions as you only pay while they're running. And so if you want to say, I


00:12:37.240 --> 00:12:40.960
want to have 20 different locations in which I can like geo locations


00:12:40.960 --> 00:12:43.560
throughout the world, I could do certain things, but I'm not going to do them


00:12:43.560 --> 00:12:48.880
very often, well, having a bunch of functions, many of them on these different parts of the


00:12:48.880 --> 00:12:54.760
cloud would be really awesome. And if you're working with AWS Lambda, there's certain APIs


00:12:54.760 --> 00:13:00.400
for doing this, obviously that AWS puts out. But what if you were a Python developer and


00:13:00.400 --> 00:13:06.220
you want to use Python? So I present to you AWS Lambda Power Tools, Python, a suite of


00:13:06.220 --> 00:13:12.960
utilities for AWS Lambda functions that makes distributed tracing, structured logging, custom


00:13:12.960 --> 00:13:16.300
and item potency and many leading best practices easier.


00:13:16.300 --> 00:13:19.340
And it is all based on Python.


00:13:19.340 --> 00:13:21.060
So you can just write your Python code


00:13:21.060 --> 00:13:23.220
and start working with this API.


00:13:23.220 --> 00:13:25.980
This one came to us from,


00:13:25.980 --> 00:13:26.980
let me make sure I got this right,


00:13:26.980 --> 00:13:28.100
via Mark Pender.


00:13:28.100 --> 00:13:30.280
So thanks Mark for sending this in.


00:13:30.280 --> 00:13:33.480
It also happens to be available in Java,


00:13:33.480 --> 00:13:35.440
TypeScript and .NET.


00:13:35.440 --> 00:13:37.280
But you come down and look at the features,


00:13:37.280 --> 00:13:41.320
there's all sorts of different bits of Python code


00:13:41.320 --> 00:13:43.820
and classes or modules that you can use


00:13:43.820 --> 00:13:46.320
that do things like distributed tracing, right?


00:13:46.320 --> 00:13:47.820
'Cause if you're on a serverless thing


00:13:47.820 --> 00:13:50.820
and something you want to keep track of


00:13:50.820 --> 00:13:54.320
some sort of logging or performance,


00:13:54.320 --> 00:13:56.320
you know, those things are super transient.


00:13:56.320 --> 00:13:59.320
They don't have a hard drive where you append to the log


00:13:59.320 --> 00:14:00.820
or anything like that, right?


00:14:00.820 --> 00:14:03.320
So having that kind of setup would be great.


00:14:03.320 --> 00:14:05.820
Use a Pydantic for data parsing.


00:14:05.820 --> 00:14:09.320
But there's just a bunch of built-in parts of this library


00:14:09.320 --> 00:14:11.640
that you can use within your functions,


00:14:11.640 --> 00:14:13.680
your serverless functions, to make it better.


00:14:13.680 --> 00:14:16.200
So it's got tracing, which includes decorators


00:14:16.200 --> 00:14:18.320
and utilities to trace Lambda functions,


00:14:18.320 --> 00:14:20.680
both synchronous and asynchronous, there you go.


00:14:20.680 --> 00:14:24.280
Structured logging, metrics that asynchronously


00:14:24.280 --> 00:14:27.760
go up to CloudWatch, remember this is AWS.


00:14:27.760 --> 00:14:32.640
Event handlers for putting stuff over into GraphQL.


00:14:32.640 --> 00:14:34.080
You can build your own middleware,


00:14:34.080 --> 00:14:36.760
like something that runs before and after the request.


00:14:36.760 --> 00:14:38.760
That's really, really handy.


00:14:38.760 --> 00:14:40.960
like only certain types of clients


00:14:40.960 --> 00:14:42.680
should be able to call this over the web.


00:14:42.680 --> 00:14:44.800
Batch processing, typing validation,


00:14:44.800 --> 00:14:46.840
a bunch of other stuff, parsing, streaming.


00:14:46.840 --> 00:14:48.480
So you can actually set it up to,


00:14:48.480 --> 00:14:51.800
instead of loading some massive dataset into your function,


00:14:51.800 --> 00:14:54.560
you can just stream that data in and process it as it goes.


00:14:54.560 --> 00:14:58.760
So there's tutorials and there's some example applications.


00:14:58.760 --> 00:15:01.760
There's a serverless shopping cart, a serverless airline.


00:15:01.760 --> 00:15:02.960
That's a pretty big one.


00:15:02.960 --> 00:15:06.040
Serverless e-commerce platform and some graph.


00:15:06.040 --> 00:15:08.720
a serverless, just let me just say this and think,


00:15:08.720 --> 00:15:09.800
it's not a joke, it's serious,


00:15:09.800 --> 00:15:12.720
serverless GraphQL nanny booking API.


00:15:12.720 --> 00:15:14.760
(laughs)


00:15:14.760 --> 00:15:15.600
There it is. - Sure.


00:15:15.600 --> 00:15:16.420
- Sure, why not? - Nice.


00:15:16.420 --> 00:15:18.440
- So anyway, if people are doing serverless,


00:15:18.440 --> 00:15:22.360
especially if they're doing AWS Lambda, this might be cool.


00:15:22.360 --> 00:15:25.240
John, she in the audience points out that Zappa


00:15:25.240 --> 00:15:29.480
works great for quickly and deploying Flask apps as, yeah.


00:15:29.480 --> 00:15:31.960
So if you look at AWS,


00:15:32.880 --> 00:15:36.800
Zappo Lambda Flask, that's probably a sufficient search.


00:15:36.800 --> 00:15:38.720
Right, that's a pretty cool project.


00:15:38.720 --> 00:15:41.520
I believe we covered that way, way back in the day.


00:15:41.520 --> 00:15:43.920
So basically it turns your Flask routes


00:15:43.920 --> 00:15:45.960
into serverless function calls as well.


00:15:45.960 --> 00:15:48.400
So anyway, here's some nice tools.


00:15:48.400 --> 00:15:50.920
I suspect you could probably put those together as well.


00:15:50.920 --> 00:15:52.960
Right, like your tracing and logging,


00:15:52.960 --> 00:15:54.960
you could probably still put inside of Zappo,


00:15:54.960 --> 00:15:56.440
but I haven't tried that combination.


00:15:56.440 --> 00:15:57.280
- Cool, neat.


00:15:57.280 --> 00:16:00.400
Well, I'm looking forward to whatever secret project.


00:16:00.400 --> 00:16:02.820
- There's like a 17 and a half percent chance


00:16:02.820 --> 00:16:04.380
that actually comes to first,


00:16:04.380 --> 00:16:06.820
'cause it's got a lot of operational overhead.


00:16:06.820 --> 00:16:10.300
I'm not sure I want to like put myself on pager duty.


00:16:10.300 --> 00:16:11.140
- Yeah, okay.


00:16:11.140 --> 00:16:12.540
- I do wanna hear what you got next.


00:16:12.540 --> 00:16:13.360
- Well, I wanted to--


00:16:13.360 --> 00:16:14.980
- Our friend Bob is on the screen, so.


00:16:14.980 --> 00:16:19.000
- Yeah, so I wanted to talk about Bob Bilderboss,


00:16:19.000 --> 00:16:22.340
and actually his GitHub profile.


00:16:22.340 --> 00:16:25.780
Several people have done things like this.


00:16:25.780 --> 00:16:29.400
So we're looking at Bob's GitHub profile.


00:16:29.400 --> 00:16:31.140
And one of the things you see


00:16:31.140 --> 00:16:34.900
that's different than the default is you see,


00:16:34.900 --> 00:16:36.140
you see some stuff at the top,


00:16:36.140 --> 00:16:40.220
like the latest PyBytes articles and latest Python tips


00:16:40.220 --> 00:16:43.820
and even latest Boston on toots.


00:16:43.820 --> 00:16:46.480
So that's kind of neat, but how did he do this?


00:16:46.480 --> 00:16:49.420
Well, luckily he's got a link at the bottom that says


00:16:49.420 --> 00:16:52.300
how to create a self updating GitHub readme.


00:16:52.300 --> 00:16:55.860
And we did talk about this way back in 2020,


00:16:55.860 --> 00:16:58.620
Simon Willis had a blog post about that.


00:16:58.620 --> 00:17:00.020
And so we'll link to the episode


00:17:00.020 --> 00:17:01.920
and Simon's also.


00:17:01.920 --> 00:17:05.440
And Bob actually says he was inspired by both Simon


00:17:05.440 --> 00:17:09.120
and I think Brett Cannon as well has updated README.


00:17:09.120 --> 00:17:10.640
But I really like this article.


00:17:10.640 --> 00:17:13.640
So it's just a little short thing saying,


00:17:13.640 --> 00:17:16.680
hey, I started doing updating my profile,


00:17:16.680 --> 00:17:19.880
GitHub profile with some tools.


00:17:19.880 --> 00:17:21.520
And then he just published all the tools.


00:17:21.520 --> 00:17:23.180
So that's pretty awesome.


00:17:23.180 --> 00:17:24.700
First of all, he's got a script.


00:17:24.700 --> 00:17:26.160
So the script that runs,


00:17:26.160 --> 00:17:28.720
of course he has it up on GitHub as well.


00:17:28.720 --> 00:17:32.360
And it just goes through and collects all of this data for him.


00:17:32.360 --> 00:17:34.560
And the script's pretty easy to read.


00:17:34.560 --> 00:17:36.360
You know, not terrible.


00:17:36.360 --> 00:17:40.360
Go through and it has links to where he's getting the information.


00:17:40.360 --> 00:17:44.260
And then all of it is used to fill out,


00:17:44.260 --> 00:17:45.960
all that data is used to fill out a template,


00:17:45.960 --> 00:17:47.660
which he also published the template.


00:17:47.660 --> 00:17:52.460
It's a markdown file that he uses for that.


00:17:52.460 --> 00:17:56.160
And then all of it's pulled together with a GitHub action.


00:17:56.160 --> 00:17:57.760
>> Wait, go back for just a second there.


00:17:57.760 --> 00:18:02.460
It looks like it's a markdown file that has Jinja template language in it.


00:18:02.460 --> 00:18:07.860
So hit it with Jinja and it generates the final markdown.


00:18:07.860 --> 00:18:08.660
I think that's pretty cool.


00:18:08.660 --> 00:18:10.960
So, yeah, how's it about to look?


00:18:10.960 --> 00:18:14.260
I didn't look exactly where the template's being used in the code.


00:18:14.260 --> 00:18:15.260
Yeah, I don't see it either.


00:18:15.260 --> 00:18:20.260
But it's, you know, you can put, you don't have to have well-formed HTML for Jinja to run.


00:18:20.260 --> 00:18:22.760
You can just jam it against anything.


00:18:22.760 --> 00:18:29.560
For example, the RSS feed for Python bytes is generated using just like an XML template


00:18:29.560 --> 00:18:31.680
with markup language in it like this.


00:18:31.680 --> 00:18:38.080
Yeah, it does look like he's using Jinja template itself out of the Jinja2 project to render


00:18:38.080 --> 00:18:39.080
it.


00:18:39.080 --> 00:18:40.080
So yeah, cool.


00:18:40.080 --> 00:18:41.080
Nice.


00:18:41.080 --> 00:18:46.920
And then the whole thing is run by GitHub Action and it auto commits.


00:18:46.920 --> 00:18:50.440
So using another project that GitHub auto commit.


00:18:50.440 --> 00:18:54.220
But the whole thing's pulled together and runs whenever,


00:18:54.220 --> 00:18:55.380
so once a day.


00:18:55.380 --> 00:18:56.500
And when does it run?


00:18:56.500 --> 00:18:57.860
Well, it's a cron job.


00:18:57.860 --> 00:18:59.980
So I had to use my handy decoder


00:18:59.980 --> 00:19:01.900
'cause I can never remember that stuff.


00:19:01.900 --> 00:19:03.580
crontab.guru.


00:19:03.580 --> 00:19:05.460
It's 8.45 in the morning.


00:19:05.460 --> 00:19:07.460
It goes off and runs this.


00:19:07.460 --> 00:19:09.700
So kind of neat.


00:19:09.700 --> 00:19:10.660
I wanted to try this.


00:19:10.660 --> 00:19:12.420
So I highlighted it again


00:19:12.420 --> 00:19:15.300
because it's been on my to-do list since 2020.


00:19:15.300 --> 00:19:16.600
I haven't done it yet.


00:19:16.600 --> 00:19:18.500
One of the things that I'm hoping it will do


00:19:18.500 --> 00:19:21.500
is it'll highlight that I haven't posted


00:19:21.500 --> 00:19:24.220
any articles recently and it'll get me off my rump


00:19:24.220 --> 00:19:26.880
and write some more, 'cause I wanna write some.


00:19:26.880 --> 00:19:27.900
- Yeah, yeah, yeah.


00:19:27.900 --> 00:19:30.940
You'll have to take on the philosophy that I did as well.


00:19:30.940 --> 00:19:31.780
Like, you know what?


00:19:31.780 --> 00:19:34.360
Two paragraphs, that's a perfectly fine blog post.


00:19:34.360 --> 00:19:35.300
- Yeah, definitely.


00:19:35.300 --> 00:19:36.900
I learned something.


00:19:36.900 --> 00:19:41.220
And also the today I learned sort of thing as well.


00:19:41.220 --> 00:19:42.880
- Yeah, that was very popular.


00:19:42.880 --> 00:19:45.620
That's quite a nice one.


00:19:45.620 --> 00:19:47.980
- That's all of our normal items now.


00:19:47.980 --> 00:19:52.060
- It is, you got any, well, let me go through my extras first


00:19:52.060 --> 00:19:53.540
since I got a follow up for this one.


00:19:53.540 --> 00:19:55.580
I got a few, I know that we both do.


00:19:55.580 --> 00:19:58.820
So you talked about crontab.guru, right?


00:19:58.820 --> 00:20:00.380
People haven't seen this before.


00:20:00.380 --> 00:20:02.100
I just learned about this,


00:20:02.100 --> 00:20:05.820
that there's this funky syntax for cron jobs,


00:20:05.820 --> 00:20:07.820
but there's this site crontab.guru


00:20:07.820 --> 00:20:10.540
that lets you put in like, well, I want a five there.


00:20:10.540 --> 00:20:14.020
It says every minute past hour five,


00:20:14.020 --> 00:20:17.960
if you just say star five, star, star, star, for example,


00:20:17.960 --> 00:20:22.020
or if you put with this like star over 20,


00:20:22.020 --> 00:20:23.560
every 20 minutes, you know,


00:20:23.560 --> 00:20:26.200
past every minute past the 20th hour,


00:20:26.200 --> 00:20:29.160
or like there's weird syntax here,


00:20:29.160 --> 00:20:31.440
but there's this cool little site


00:20:31.440 --> 00:20:33.200
that you referenced to show how it works.


00:20:33.200 --> 00:20:35.440
- Yeah, I was curious if you could do like


00:20:35.440 --> 00:20:37.000
just day of the week and not,


00:20:37.000 --> 00:20:38.960
and like no Sunday, Saturday and Sunday,


00:20:38.960 --> 00:20:39.960
how you would do that.


00:20:39.960 --> 00:20:42.160
- Yeah, probably.


00:20:42.160 --> 00:20:45.280
Yeah, there's 20 star now.


00:20:45.280 --> 00:20:47.680
Anyway, there's a whole bunch of different things


00:20:47.680 --> 00:20:49.680
a little bit of a description on how this works.


00:20:49.680 --> 00:20:50.160
>> Yeah.


00:20:50.160 --> 00:20:52.000
>> Way more interesting than I knew.


00:20:52.000 --> 00:20:54.400
All right. Let me tell you about a few things real quick.


00:20:54.400 --> 00:20:56.520
I've been playing with Canary Mail.


00:20:56.520 --> 00:21:01.640
Canary Mail is like a mail client like Spike or Outlook or whatever.


00:21:01.640 --> 00:21:03.160
One of the Thunderbird,


00:21:03.160 --> 00:21:05.600
one of the client-side rich e-mail clients.


00:21:05.600 --> 00:21:06.000
>> Okay.


00:21:06.000 --> 00:21:11.000
>> But this thing just added an AI capability called Inbox Copilot,


00:21:11.000 --> 00:21:14.080
which is a lot like GitHub Copilot.


00:21:14.080 --> 00:21:16.600
So you just go to it and you just say,


00:21:16.600 --> 00:21:22.480
Hey there, email, write me a message that says this. So for example, you could just


00:21:22.480 --> 00:21:25.720
say like if you got a message asking if you're gonna be able to make the some


00:21:25.720 --> 00:21:31.080
meaning you could just say, you type CCC anywhere in your message, it pulls up


00:21:31.080 --> 00:21:34.440
this little separate window that you talk to the AI and just say, tell them,


00:21:34.440 --> 00:21:39.640
you know, apologize, I'll be late by 20 to 30 minutes traffic. And that's all you


00:21:39.640 --> 00:21:45.440
say. And it writes like a really nice formal, like well written, friendly, not


00:21:45.440 --> 00:21:46.840
Terse message back.


00:21:46.840 --> 00:21:48.040
So I'm gonna try to start playing with this


00:21:48.040 --> 00:21:50.000
a little bit more, we'll see how it goes.


00:21:50.000 --> 00:21:53.360
I already had the app, it just came with this co-pilot thing.


00:21:53.360 --> 00:21:54.560
I'm like, okay, that's pretty interesting.


00:21:54.560 --> 00:21:55.720
So people can check that out.


00:21:55.720 --> 00:21:57.680
I don't even know what it costs, just to be clear,


00:21:57.680 --> 00:22:01.680
not an ad, this episode is sponsored by Microsoft,


00:22:01.680 --> 00:22:03.880
but yeah, it's like $20 a year,


00:22:03.880 --> 00:22:06.360
not a terribly expensive thing to play with.


00:22:06.360 --> 00:22:07.800
All right, next one is,


00:22:07.800 --> 00:22:12.080
this is a tweet from the Python package index itself.


00:22:12.080 --> 00:22:14.560
And the status is, or the message is,


00:22:14.560 --> 00:22:16.260
Python 3.11 delivers.


00:22:16.260 --> 00:22:17.140
Check this out, Brian.


00:22:17.140 --> 00:22:20.900
So they show some kind of analytics,


00:22:20.900 --> 00:22:25.380
real-time performance graph of the G-Unicorn,


00:22:25.380 --> 00:22:29.780
the Python worker processes that power PyPI


00:22:29.780 --> 00:22:32.220
from Python 3.10 and when they upgraded to 3.11.


00:22:32.220 --> 00:22:33.380
It's pretty striking, huh?


00:22:33.380 --> 00:22:34.540
- Yeah, totally.


00:22:34.540 --> 00:22:37.020
That just went down in load drastically.


00:22:37.020 --> 00:22:37.940
- If you look at it, yeah, I mean,


00:22:37.940 --> 00:22:40.820
it dropped at least 50% of usage there.


00:22:40.820 --> 00:22:43.460
And then if you, this is a pretty zoomed-in picture.


00:22:43.460 --> 00:22:47.640
someone else, Dustin Ingram, it was tweeted, well, you should see it over


00:22:47.640 --> 00:22:51.320
time more like, bam, there's this huge jump in the middle.


00:22:51.320 --> 00:22:53.540
This is when they restarted it.


00:22:53.540 --> 00:22:56.840
You know, whenever you restart the app, it doesn't have like all of its


00:22:56.840 --> 00:22:58.940
caches and all that stuff warmed up.


00:22:58.940 --> 00:23:02.420
And potentially they even maybe had to throw away like Redis cache data if they


00:23:02.420 --> 00:23:06.140
were pickling it because 3.10 and 3.11 didn't, you know, they might not be


00:23:06.140 --> 00:23:08.340
compatible in a binary way.


00:23:08.340 --> 00:23:11.480
So anyway, there's like this kind of like, ouch, you restarted us.


00:23:11.480 --> 00:23:13.340
It hurts type of thing.


00:23:13.340 --> 00:23:16.040
But then after that, it really, really drops.


00:23:16.040 --> 00:23:21.640
I mean, at least 50 percent or 2x more for 3.10 than 3.11.


00:23:21.640 --> 00:23:23.980
So that's really massive.


00:23:23.980 --> 00:23:24.920
>> That's pretty cool.


00:23:24.920 --> 00:23:26.440
>> Anyway, so 3.11 delivers,


00:23:26.440 --> 00:23:27.880
people can check that out.


00:23:27.880 --> 00:23:30.840
There's a lot of traffic on pypi.org,


00:23:30.840 --> 00:23:33.380
because it's not just the human browser traffic,


00:23:33.380 --> 00:23:35.400
it's every time you pip install something,


00:23:35.400 --> 00:23:38.600
every time you do a Docker build and it runs pip install,


00:23:38.600 --> 00:23:42.280
like all the robots of the world are just hammering this thing.


00:23:42.280 --> 00:23:43.280
Yeah.


00:23:43.280 --> 00:23:44.280
Yep.


00:23:44.280 --> 00:23:45.280
Yep.


00:23:45.280 --> 00:23:46.280
All right.


00:23:46.280 --> 00:23:47.280
So that's a good one.


00:23:47.280 --> 00:23:48.280
Um, I was just in Las Vegas this weekend.


00:23:48.280 --> 00:23:49.280
That was fun.


00:23:49.280 --> 00:23:50.280
Thanks for rubbing it in.


00:23:50.280 --> 00:23:51.280
It's such a good time.


00:23:51.280 --> 00:23:57.320
Went to see the Blue Man Group and we went to see Cirque du Soleil and we had breakfast


00:23:57.320 --> 00:23:59.640
at like a beautiful brunch.


00:23:59.640 --> 00:24:04.200
They even had a, you know how some places have a, like a little omelet factory where


00:24:04.200 --> 00:24:06.280
you can have some eggs or whatever.


00:24:06.280 --> 00:24:08.760
And you tell them they had a donut, one of those as well.


00:24:08.760 --> 00:24:10.720
So they'll make custom donuts for you on the spot.


00:24:10.720 --> 00:24:11.720
It was outrageous.


00:24:11.720 --> 00:24:15.560
I bring this up not to rub in whether or not I was in Vegas, but it was my first


00:24:15.560 --> 00:24:20.860
chance to test out my iPad as my only dev device traveling experience.


00:24:20.860 --> 00:24:25.160
First trip since I'd tried all those tools and it worked pretty fabulously


00:24:25.160 --> 00:24:28.460
actually just took my iPad and my ergonomic keyboard so I don't give


00:24:28.460 --> 00:24:33.860
myself carpal tunnel again and it worked great. So all those tools we talked about


00:24:33.860 --> 00:24:37.100
people maybe I'll find a way if people want to know find a way to link back to


00:24:37.100 --> 00:24:37.700
that episode.


00:24:37.700 --> 00:24:41.200
Able to monitor the Michael Kennedy empire from remote.


00:24:41.200 --> 00:24:45.600
Indeed. Yeah. I even, I busted in and installed some Linux security updates


00:24:45.600 --> 00:24:48.760
real quick and then dropped back out. It was all good. Tailed some logs. Yeah,


00:24:48.760 --> 00:24:52.840
it was fine. Mostly I wrote email. That's what my empire is about is right. Email.


00:24:52.840 --> 00:24:57.560
All right. Here's another good one. Linux, Amazon, Meta, and Microsoft want


00:24:57.560 --> 00:25:03.240
to break the Google Maps monopoly. So apparently Google Maps owns a


00:25:03.240 --> 00:25:08.120
significant portion of the mapping data and the street view data and so on. But


00:25:08.240 --> 00:25:10.920
all those groups I've mentioned are working on


00:25:10.920 --> 00:25:13.400
creating this thing called Overture Maps Foundation.


00:25:13.400 --> 00:25:16.000
They're going to create an open-source,


00:25:16.000 --> 00:25:19.100
open to everyone set of maps by pulling in some of


00:25:19.100 --> 00:25:21.040
existing open map data but also


00:25:21.040 --> 00:25:23.920
really doubling down on trying to add more information.


00:25:23.920 --> 00:25:25.280
That's pretty cool, right? So if you want to do


00:25:25.280 --> 00:25:27.320
anything with mapping, that might be getting a lot better.


00:25:27.320 --> 00:25:31.000
>> Yeah. I haven't seen the word TomTom in a long time.


00:25:31.000 --> 00:25:33.160
>> I know. I actually had my hands on


00:25:33.160 --> 00:25:35.320
a TomTom device this summer. It was insane.


00:25:35.320 --> 00:25:38.040
All right. Last one before we get to our joke.


00:25:38.040 --> 00:25:42.300
I decided my laptop that had zero stickers on it was boring.


00:25:42.300 --> 00:25:44.000
So I went completely bonkers,


00:25:44.000 --> 00:25:47.640
got a completely, I went to Redbubble,


00:25:47.640 --> 00:25:50.440
ordered an insane number of stickers and put on my laptop.


00:25:50.440 --> 00:25:51.320
What do you think of this thing, Brian?


00:25:51.320 --> 00:25:53.480
Put the link in the picture in the show notes.


00:25:53.480 --> 00:25:57.360
>> I like the laptop opening and closing tags.


00:25:57.360 --> 00:26:00.760
>> It's got a bracket laptop at the top of the laptop,


00:26:00.760 --> 00:26:03.000
and it's got a bracket slash laptop at the bottom.


00:26:03.000 --> 00:26:04.840
>> Yeah, you got Python bytes there.


00:26:04.840 --> 00:26:07.680
It's nice. I got to get you a testing code sticker.


00:26:07.680 --> 00:26:09.240
Yeah, get in there, we'll find a spot.


00:26:09.240 --> 00:26:12.080
I replaced the Mac icon with a terminal icon.


00:26:12.080 --> 00:26:13.080
So it's pretty good.


00:26:13.080 --> 00:26:13.480
Yeah.


00:26:13.480 --> 00:26:14.840
Anyway, that was a lot of fun.


00:26:14.840 --> 00:26:16.680
Okay, but that's it for my extras.


00:26:16.680 --> 00:26:17.280
How about yours?


00:26:17.280 --> 00:26:18.480
I had a few extras.


00:26:18.480 --> 00:26:21.440
So I just don't have a lot to add to these,


00:26:21.440 --> 00:26:24.280
but I'd noticed it's kind of interesting.


00:26:24.280 --> 00:26:28.280
So GitHub, I think this was on December 15th,


00:26:28.280 --> 00:26:32.640
announced that they're able to check for security leaks.


00:26:32.640 --> 00:26:36.320
And I'm linking to an article


00:26:36.320 --> 00:26:39.800
that they can check your GitHub repos for security leaks,


00:26:39.800 --> 00:26:42.000
like secrets and stuff.


00:26:42.000 --> 00:26:44.640
Apparently, that's how a lot of secrets get leaked,


00:26:44.640 --> 00:26:49.840
is people actually merge request a bunch of secrets or something.


00:26:49.840 --> 00:26:53.000
It's cool that it's there.


00:26:53.000 --> 00:26:54.680
It says you have to turn it on.


00:26:54.680 --> 00:26:58.400
I went to check one of my repos and it looked like it was already on.


00:26:58.400 --> 00:27:00.760
May as well check it anyway.


00:27:00.760 --> 00:27:04.400
I wanted to shout out to Julia Evans.


00:27:04.400 --> 00:27:06.020
Did I get that right? Julia Evans.


00:27:06.020 --> 00:27:08.540
She's written a whole bunch of great stuff to help programmers,


00:27:08.540 --> 00:27:11.620
but she just released Pocket Guide to Debugging.


00:27:11.620 --> 00:27:13.420
I was pretty intrigued by this.


00:27:13.420 --> 00:27:17.300
One of the things that highlighted was asking for


00:27:17.300 --> 00:27:21.240
help and writing a tiny program that reproduces the problem.


00:27:21.240 --> 00:27:23.300
Those are two things that I really encourage people


00:27:23.300 --> 00:27:25.460
to do before they waste too much time.


00:27:25.460 --> 00:27:27.180
I might throw some money away


00:27:27.180 --> 00:27:29.580
because those are really great free tips.


00:27:29.580 --> 00:27:31.100
>> Yeah, that's cool.


00:27:31.100 --> 00:27:36.580
I found this Python Easter eggs repository.


00:27:36.580 --> 00:27:38.420
Not all of these work anymore,


00:27:38.420 --> 00:27:39.580
so I tried the first one,


00:27:39.580 --> 00:27:41.420
import hello on Python 3.11,


00:27:41.420 --> 00:27:43.140
doesn't seem to work, but a bunch of


00:27:43.140 --> 00:27:44.780
these others are really pretty fun.


00:27:44.780 --> 00:27:46.660
Import this, of course, is there.


00:27:46.660 --> 00:27:49.720
One of the things that I think I knew about at one point,


00:27:49.720 --> 00:27:54.140
but I forgot about, was the from future import,


00:27:54.140 --> 00:27:56.500
berry as fluffle.


00:27:56.500 --> 00:27:59.600
This was a joke from 2009,


00:27:59.600 --> 00:28:01.740
that's still in Python 3.11,


00:28:01.740 --> 00:28:08.720
that it's like a joke from Barry Warsaw and Brett Cannon.


00:28:08.720 --> 00:28:13.680
If you do that, it removes the not equal,


00:28:13.680 --> 00:28:19.640
like the bang equal sign with less than,


00:28:19.640 --> 00:28:21.520
greater than for not equal.


00:28:21.520 --> 00:28:24.960
The joke being if Barry was the dictator for life,


00:28:24.960 --> 00:28:26.840
he would change it. Anyway, it's funny.


00:28:26.840 --> 00:28:30.680
FLFL stands for Friendly Language Uncle for Life.


00:28:30.680 --> 00:28:32.360
- And there's even a PEP for it.


00:28:32.360 --> 00:28:37.040
So you can read about the PEP 401 with this.


00:28:37.040 --> 00:28:39.320
Anyway, just a few extras.


00:28:39.320 --> 00:28:40.520
- It could have been our joke.


00:28:40.520 --> 00:28:42.000
It could have been our joke section.


00:28:42.000 --> 00:28:43.360
- It could have been our joke section.


00:28:43.360 --> 00:28:44.720
But we have another joke, don't we?


00:28:44.720 --> 00:28:45.560
- We do.


00:28:45.560 --> 00:28:47.320
So I told you we'd wrap this up


00:28:47.320 --> 00:28:48.600
with some stuff about the cloud.


00:28:48.600 --> 00:28:51.040
So here's a nice little conversation


00:28:51.040 --> 00:28:53.080
a father and a daughter are having.


00:28:53.080 --> 00:28:55.280
They're out walking in a park, looking up at the sky,


00:28:55.280 --> 00:28:58.920
and they see a cloud in a mostly empty sky.


00:28:58.920 --> 00:29:01.960
And the kid says, "Dad, what are clouds made of?"


00:29:01.960 --> 00:29:03.580
The dad looks down and clearly says,


00:29:03.580 --> 00:29:05.120
"Linux servers mostly."


00:29:05.120 --> 00:29:06.880
(laughing)


00:29:06.880 --> 00:29:07.720
That's good, right?


00:29:07.720 --> 00:29:08.880
- Yeah, that's good.


00:29:08.880 --> 00:29:10.200
- Even when they're serverless,


00:29:10.200 --> 00:29:12.500
they're probably still Linux things running


00:29:12.500 --> 00:29:14.240
and Docker running and a Kubernetes cluster


00:29:14.240 --> 00:29:15.800
running on Linux.


00:29:15.800 --> 00:29:17.400
- Serverless is a hilarious word.


00:29:17.400 --> 00:29:19.320
It just means you don't know where the server is.


00:29:19.320 --> 00:29:21.440
- Yeah, it's like, server's not my problem.


00:29:21.440 --> 00:29:22.280
- Yeah.


00:29:22.280 --> 00:29:23.800
(laughing)


00:29:23.800 --> 00:29:25.440
Well, this show is not a problem.


00:29:25.440 --> 00:29:26.280
It was a lot of fun.


00:29:26.280 --> 00:29:27.120
- It was a lot of fun.


00:29:27.120 --> 00:29:31.120
Thanks so much for joining us and showing up again.


00:29:31.120 --> 00:29:32.980
And thanks everybody in the audience.


00:29:32.980 --> 00:29:33.820
- Yeah, absolutely.


00:29:33.820 --> 00:29:35.440
Hey, before we go, I have one quick more announcement,


00:29:35.440 --> 00:29:36.680
really, really quickly.


00:29:36.680 --> 00:29:39.880
Next week, for those of you who are kind enough


00:29:39.880 --> 00:29:42.880
to drop in and join us live, we're not doing a live show.


00:29:42.880 --> 00:29:44.840
We're gonna do a crossover episode


00:29:44.840 --> 00:29:46.840
with Talk Python and vice versa.


00:29:46.840 --> 00:29:48.240
Python bites on Talk Python.


00:29:48.240 --> 00:29:50.120
And Brian, we're gonna be on vacation.


00:29:50.120 --> 00:29:51.720
So I'll see you in January.


00:29:51.720 --> 00:29:52.220
All right.


00:29:52.220 --> 00:29:53.760
Talk to everybody in January.


00:29:53.760 --> 00:29:55.360
Yeah, so happy new year, everyone.

