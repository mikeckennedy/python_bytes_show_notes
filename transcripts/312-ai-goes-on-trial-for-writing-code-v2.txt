00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 312, recorded November 29th, 2022.

00:00:10 I'm Michael Kennedy.

00:00:11 And I'm Brian Ocken.

00:00:12 This episode is brought to you by the Compiler Podcast from Red Hat.

00:00:15 Check them out.

00:00:17 Really appreciate them supporting the show.

00:00:18 Brian, we got a lot to cover today.

00:00:20 You want to just jump right into it?

00:00:21 What I want to talk about is Simon Willison.

00:00:23 This is incredible.

00:00:26 So Simon did a talk at DjangoCon 2022, and then he wrote up the slides and everything, and we're going to link to his blog.

00:00:35 His blog title is "Coping Strategies for the Serial Project Hoarder." And then the talk title was "Massively increase your productivity on personal projects with comprehensive documentation and automated tests." Yes, that's a mouthful.

00:00:50 But really, I don't know what a good name for this is, other than everybody that works with development needs to watch this talk, because it's incredible.

00:00:59 So he goes through a lot of stuff.

00:01:02 I'm going to go through it.

00:01:04 Luckily, he's got screenshots on here.

00:01:06 But he starts out...

00:01:08 So this is important, not just for open source projects or personal projects. This is also for if you're working in a company, I think this is equally true.

00:01:19 So he talks about how he got these techniques from working at – now I'm going to forget where he worked, but – yeah, it's gone – a large company with multiple continents, and it was helpful to do this model.

00:01:35 So what is he talking about?

00:01:37 So one of the things he talks about is the perfect commit.

00:01:41 So we don't really – as a professional software developer, you're not really doing new code all the time.

00:01:49 what you're doing is maintaining existing software.

00:01:51 So the commit is your unit of work.

00:01:55 And a perfect commit includes the implementation of whatever you've done, but it also has tests and documentation and a link to the issue thread.

00:02:05 And this seems like a lot to me, but walking through his talk, it totally makes sense.

00:02:11 So he gives an example of one of his with some cool highlights that highlights that he's got documentation changes also.

00:02:19 And the documentation might just be a single line change or something.

00:02:24 But the tests, he does pause here and say tests are hard for some people, some developers.

00:02:31 So it's important to get a working test framework in place quickly so that a test developer isn't starting from scratch.

00:02:40 They're just, or a software developer when they're writing tests, it's just, It's not like comprehensive testing has to be there, but it is a test that passes when your change is there and fails when it's not there or fails when it's not working.

00:02:56 That's enough. You can do more thorough testing, but that's enough to get us started.

00:03:02 And I think that's a good way to think about it.

00:03:04 But he goes, he throws in this little cool thing of like, just keep common types of projects that you have around as cookie cutters in your own, in your own GitHub area.

00:03:15 He's got a Python library and a click app and dataset plugin for him.

00:03:20 I might have different things like a pytest plugin or something.

00:03:23 And that way you can just keep up with your best practices, what you think of as best practices in one place.

00:03:29 This is a cool idea.

00:03:30 Totally gonna steal this.

00:03:32 >> I've done that for myself as well. I've built like a predated cookie cutter, but I built this thing like I always want to have logging and I want it like this. I always want to, you know, connect to this other service and like ping it to make sure that the thing is alive or whatever, whatever thing we decided for monitoring inside of the company I worked at.

00:03:51 Like all the new projects would just start that way.

00:03:53 It was so nice because you didn't like, is it really worth doing the thing to make sure that we can monitor it sometime?

00:03:58 Like you just run the one command line thing and it's there.

00:04:02 We could give it to an intern and they could run it to start their projects. It was great.

00:04:06 >> Then he's got like this thing that supposedly with a GitHub hook, and I'm going to have to dig into this more because I didn't quite understand how this works.

00:04:14 But he's got a way within the GitHub interface to say I want a new project, and it automatically gives you the choices of what project, and then fills out all the defaults from the start, instead of just getting the read me like normally.

00:04:27 This is neat, and I guess I want to try figuring this out.

00:04:31 The documentation bit, at least one of the things about including this, even if it's difficult, you can have this be part of the code review requirements.

00:04:40 So don't accept a code review until the documentation is there also.

00:04:45 So this is a cool idea.

00:04:47 Then it's the bonus trick of testing documentation, which is a cool idea.

00:04:53 Then the links to the issue, and I thought this was just yes, you should do this, but this is really the meat of the talk, is him doing his entire thought process in the issue thread.

00:05:06 He even gives examples where there's sometimes like up to 50 60 Comments and it's just him talking to himself but this is brilliant and I'm not going to convince you as much as as he is but includes screenshots and and Dead ends like I tried this thing and it didn't work and we're gonna go back and do this other thing This isn't It calls it temporal documentation and I just love this idea and I'm gonna try to follow this myself because I have a memory issue.

00:05:35 I write stuff down and then I forget where I wrote it down.

00:05:39 This way, he says, "You don't have to remember anything.

00:05:43 You just dump it there." That way, let's say you get pulled off of a project and you don't get back to it for six months because you've been fighting fires and doing other stuff.

00:05:54 Then you get back to it, you won't remember where you're at.

00:05:57 With this line of thinking of keeping all of your thinking in the issue thread, you can just jump in and go, "Oh, that's where I was," and get started pretty quickly.

00:06:07 I love this. It's cool.

00:06:09 Then the rest of the talk is pretty interesting too, talking about how scientists have been doing this, and other engineers have been doing this for a long time.

00:06:17 They called them lab notebooks before, and we got out of the habit of doing that with software.

00:06:22 But anyway, lots of great techniques, and I think this is just how to be a professional software developer now.

00:06:27 >> I love that it's a casual conversation and not like, here are my four recommendations, but like the playing around and the dead ends are really, really valuable.

00:06:36 Kim out in the audience says, "The cookie cutter approach also works beautifully "from a DevOps perspective for setting up developers "to use your firm's specific infrastructure." Yeah, I totally agree, and that's a little bit of what I was hinting at of like here's how we integrate with this, like uptime manager and stuff, but obviously DevOps, that was talk, we were deploying to a server in a closet, which I mean that tells you all you need to know.

00:06:59 Speaking of stuff you might need to know, Brian, Google Copilot and these code writing AIs, I have more to say about that at the very end of the show, bookend this a little bit, they train themselves on lots of code.

00:07:13 And Google Copilot, for those of you who don't know, you basically can give it a comment, and like, I want to connect to a Postgres database with SQLAlchemy, and then boom, it'll like literally write all the code, import the usings, you know, come up with a connection string, all that kind of stuff.

00:07:29 It's pretty fantastic, has some privacy issues.

00:07:31 I don't know what it's doing now.

00:07:34 It used to send your source code that you wrote up to GitHub, which made me not wanna use it already.

00:07:41 But the big news here is the website githubcopilotlitigation.com.

00:07:49 And that's as ominous as it sounds.

00:07:52 It says, "We filed," this is what the website sort of announces, "We filed a lawsuit challenging GitHub copilot and AI product that relies on unprecedented open-source software piracy.

00:08:03 Why piracy? Because it's trained on things that are like GPL and Creative Commons share alike or attribution.

00:08:10 Then it outputs code based on that original input that has no GPL and it has no, whatever license, the license is stripped and no attribution. What do you think?

00:08:21 >> Something we talked about from the very beginning of like, how is this okay?

00:08:26 >> Yeah.

00:08:26 >> Not sure.

00:08:27 Absolutely. If it did things like we're only going to look at MIT licenses and other commercial open no attribution licenses.

00:08:35 I don't think there'd be anything to say about it, but apparently that's not the case.

00:08:39 So there's a couple of updates as well.

00:08:42 I suppose we should also like they do on this page say we are not a lawyer.

00:08:47 Please don't take legal advice from us.

00:08:48 We write code, not legal documents.

00:08:52 But nonetheless, it says this is Matthew Butterick, and they've set up to investigate Google Copilot, and they filed a class action lawsuit in the US federal court in San Francisco on behalf of a couple folks.

00:09:07 So they're challenging the legality of GitHub Copilot and a related product, OpenAI Codex, which powers Copilot.

00:09:16 The suit has been filed against a set of defendants that includes GitHub, Microsoft, and OpenAI.

00:09:21 Wow. There's an update down here somewhere.

00:09:24 Let's see. It says, "By training..." Here's the motivation for their lawsuit. "By training their AI systems on public GitHub repositories, though based on their public statements, possibly much more, we contend that the defendants have violated the legal rights of a vast number of creators who posted code or other work under certain open source licenses on GitHub, which licenses a set of 11 popular open open source licenses that all require attribution, the author's name and copyright, including, I guess, the MIT license as well, the GPL and the Apache license.

00:09:56 And it's listed out there.

00:09:57 There's a whole bunch more details.

00:09:58 And it says, "Update November 10th." That original was November 3rd.

00:10:04 There's an update here.

00:10:06 This is, "We filed a second class action lawsuit "on behalf of two additional plaintiffs.

00:10:10 "The defendants and claimants are otherwise similar "to the initial one." So there you go.

00:10:16 - It's gonna be interesting.

00:10:17 It's not going to be just interesting for Google, for Google GitHub Copilot, but basically AI in general, right?

00:10:24 It says it's going to challenge that AI strips the ownership and other requirements of inputs and outputs, right?

00:10:34 And maybe it does, maybe it doesn't.

00:10:35 I mean, we heard that APIs are not copyrightable in the Google Oracle Java lawsuit.

00:10:41 So we're going to find out here.

00:10:42 >> Oh, interesting.

00:10:43 >> Yeah. When we looked into this a little bit earlier, if it's helping you fill in parameters to a function or what likely things you're going to fill in for a function call, that's one thing, but when it plops down 20 lines of code for you, where did it get those 20 lines of code?

00:11:03 Then open source doesn't necessarily mean you can copy it, it's just open to read.

00:11:08 I mean, you can put your own license in there, You can make up your own license that says anybody can read this, but you can't copy it, use it, or do anything else with it at all.

00:11:19 Can't even fork it. There's nothing stopping you from doing that sort of a license.

00:11:25 >> The default, if you put on GitHub, I believe if you put no license means you're conferring no license whatsoever.

00:11:32 >> Yeah. It means it's just like writing a book.

00:11:36 When you write a book, you have the full copyright unless you give it to somebody else.

00:11:42 So yeah, absolutely.

00:11:43 All right, well, let's stick with my screen for a second.

00:11:46 I want to tell you all about our sponsor for this week, Compiler.

00:11:50 So this episode of Python Bites, this episode of Python Bites is sponsored by the Compiler podcast from Red Hat.

00:11:56 Like you, Brian and I are fans of podcasts.

00:11:59 I listen to more and more of these days actually, and I'm happy to share this one, Compiler, an original podcast from Red Hat.

00:12:05 So if you want to stay on top of tech without dedicating tons of time to it, Check out Compiler, they present perspectives and topics and insights from the tech industry free of jargon and judgment.

00:12:15 They want to discover where technology is headed beyond headlines and create a place for new IT professionals to learn, grow, and thrive.

00:12:22 Compiler helps people break through barriers and challenges turning code into community at all levels of the enterprise.

00:12:28 One recent interesting episode is their great stack debate.

00:12:31 I love talking to people about their architecture, their code, all the trade-offs and conventions.

00:12:36 As you will see later in the show, So I'm gonna talk a bit about that at the end as well for us.

00:12:41 And the costs that come with this, the challenges, things that are awesome, the things that are not.

00:12:45 So this episode is like that.

00:12:47 So you can check it out to see if software is like an onion or like lasagna or it's more complicated.

00:12:52 It's the first episode in a compiler series on the software stack.

00:12:56 So listen to more about compiler at pythonbytes.com.

00:12:58 So you can just go type compiler into your podcast player and that's what I would do in general, but please use our link so that the folks at Red Hat know that you came from us.

00:13:07 - Yes. - Yes.

00:13:08 And thanks to Compiler for keeping our podcast going strong.

00:13:13 All right, over to you, Brian.

00:13:14 What's the next one?

00:13:15 - So this is a silly thing, but sometimes I've got code that I wanna, Python code that I wanna have a pop-up, you know, a window pop-up.

00:13:26 And I've always been using, what is it, PySimpleGUI?

00:13:31 Well, not always, but that's what I've been using lately for like really easy, just a simple pop-up thing, especially if I needed to use run on Macs and really anywhere, because it's totally fast to get it done, and I don't have to think about it anymore.

00:13:45 However, PySimpleGUI, I haven't mastered the art of getting it to look just like a native dialog box.

00:13:54 Maybe there's some tricks that you can do that I just don't know.

00:13:57 But if I know it's on Windows, maybe we could just go ahead and use the Windows DLLs and and do a native Windows.

00:14:07 >> Just call straight into the Windows 132 API for.

00:14:11 >> Yeah, sure.

00:14:12 >> Message box or whatever it is.

00:14:14 >> That shouldn't be too hard, right?

00:14:15 It sounds scary to me, but I ran across Matt Callahan's blog.

00:14:21 Matt Callahan has an article called Display a Message Box in Python without using a non-standard library or other dependency.

00:14:30 Actually, you just do this, you don't have to install anything.

00:14:34 And I got this, I want to, where did I get this from?

00:14:37 Give credit where credit is due.

00:14:39 I got this from the PyCorders Weekly newsletter.

00:14:42 So thanks to them.

00:14:44 Anyway, this is not hard.

00:14:47 So he has a little pop-up example.

00:14:49 And I should have read the article, but I just skimmed for the code.

00:14:52 Here's some code. That's it.

00:14:55 This pop makes a dialog box pop up.

00:14:57 And it's calling the, so it calls, it's just like a couple of flags, like 10 lines of code.

00:15:03 It calls ctypes, windll, user32, messagebox, exw, whatever that means.

00:15:11 And with some stuff in it, like a title and a message and everything.

00:15:14 So it's using ctypes, which I don't use much, but you can get into DLLs.

00:15:21 So ctypes is built into Python.

00:15:23 And so this messagebox, I wanted to play with it a little bit more.

00:15:27 So as I was playing with this, looked into the Microsoft documentation, the message box dialog, one of the flags is this U type, and it's like this hex value thing or bit field, and you can orient a whole bunch of stuff.

00:15:42 You can use this to get an okay box or an okay cancel box, different types of dialog boxes using this flag.

00:15:51 Then once you've got this popped up, you need to know what users clicked on and stuff.

00:15:57 there's return values from this and you can just like check the return value and it's defined to be like, you know, a three for abort and a two for cancel and one for okay, and you just check this value So with just a little bit of code, you can have a native dialog box pop up if you need to in your code So yeah, that's awesome And it does things like natively that you would expect like for example, you hit escape and you have an okay cancel It'll return cancel. I hate some of these these like UI things they show up and you're like, well, it's got one text input and a submit button.

00:16:30 You hit enter, it does nothing.

00:16:32 You're like, yeah, great.

00:16:32 Okay.

00:16:33 Uh, apparently this is not real.

00:16:35 I'm going to have to just, you know, go click it or whatever.

00:16:37 Right.

00:16:37 And so hooking into the native OS is sweet like that.

00:16:40 This looks like a thing that would be ripe for a short, simple little package that wraps up, say all the.

00:16:47 The OK, cancel.

00:16:50 What kind of icon you want?

00:16:51 Do you want like a warning?

00:16:53 Do you want an informational icon?

00:16:54 Um, the buttons.

00:16:55 Yeah.

00:16:56 It seems really great.

00:16:57 But this is fantastic.

00:16:59 >> Neat and built-in.

00:17:01 Anyway, just a quickie.

00:17:03 >> Yeah, it comes included and yeah, I really like it.

00:17:06 It's also a bit of a roadmap to show what you could do beyond that.

00:17:10 There's more than just really simple dialog boxes.

00:17:12 For example, like the open file dialog box on Windows could probably be real similar.

00:17:16 >> Oh yeah, probably.

00:17:18 I was looking it up, there's a whole bunch of dialog boxes you got access to.

00:17:22 >> Yeah, exactly. It's like a roadmap to like, "Oh, I can like create a file or, you know, any of these things," which I think is pretty cool.

00:17:29 All right, let's flip away from OS specific to OS general, but stick with PyCoders for a minute.

00:17:35 So this one also comes from PyCoders.

00:17:37 I don't know if it's the same issue or not, but very cool.

00:17:40 It says write Chrome extensions, which also mean like Brave and Vivaldi and others, Edge maybe, write Chrome extensions in Python.

00:17:49 Oh, how does it work?

00:17:52 PyScript, of course.

00:17:54 So, yeah, we just take PyScript and this is an article by Pete Fiston and it sort of walks through how he was able to use PyScript, which is Python on WebAssembly running in the browser, to use that to power a Chrome extension.

00:18:12 And it doesn't really matter if it's a bit of a nine meg download because you install it once and it's local on your computer, right?

00:18:18 So it just, if you wanna do this, it walks you through all the things you gotta do in order to use PyScript to write Chrome extensions or Python to write Chrome extensions.

00:18:26 What do you think?

00:18:27 Cool, even shows you how to put an icon.

00:18:29 - That's pretty cool.

00:18:30 - Yeah, but I have more for you.

00:18:33 So just so in case people don't know, this is an extra, extra, extra, hear all about it section 'cause I'm gonna hit a whole bunch of things.

00:18:38 So as of recently, just published this episode.

00:18:42 Let me look, 31 minutes ago, and it says PyScript powered by MicroPython.

00:18:48 So one of the challenges that PyScript has had traditionally It's based on the full, nearly the full CPython runtime compiled into WebAssembly, which after you strip a bunch out that doesn't work in the browser, it comes down to like nine megabytes.

00:19:02 Okay.

00:19:03 That's for like this browser extension thing.

00:19:05 That's reasonable.

00:19:05 But for, you would never use it in place of like Vue.js on a popular page because you want that page to load quickly.

00:19:13 You want it to be good for SEO, all those things.

00:19:15 But you know what's small and fast?

00:19:17 MicroPython.

00:19:18 Oh, neat.

00:19:19 So I just had Brett Cannon, Nicholas Toliver and Fabio Fleger, uh, on talk Python to talk about the work that they're doing to make high script, not run on full C Python, but to run on micro Python, micro Python.

00:19:35 You can get that to load up in a hundred milliseconds on your page.

00:19:38 And it's only a couple hundred K all of a sudden that starts to sound a lot like a pretty rich front end framework level of stuff you got to download and get started.

00:19:47 And you cash it, then you're good to go.

00:19:49 That's exciting, huh?

00:19:50 - That's super exciting, yeah.

00:19:52 - Yeah, so this Chrome extension thing is cool.

00:19:54 When you look at the shipping version, I don't know if you can call it shipping 'cause the price script is still like super alpha, but what you can get today.

00:20:02 So Nicholas said probably spring that they'll have something to share, but in terms of being able to use MicroPython, but I think that's pretty excellent.

00:20:11 That could really, really unlock some super cool features.

00:20:15 If now we could build like a Vue.js type thing, but with Python.

00:20:19 And one of the goals that they stated is that they're looking to build this as a framework, or excuse me, a platform that you can build frameworks on top of.

00:20:29 So it's not just, here's how you write some Python code in the browser, but here's a foundation that people could create like a PyView or a PyAngular or whatever they wanted to create, right?

00:20:38 - Yeah. - Okay.

00:20:40 Yeah, go ahead.

00:20:41 - Question just for my own personal use.

00:20:43 Would Chrome extensions work on Vivaldi?

00:20:47 - Yeah, yeah, they do.

00:20:48 One of the things that's interesting about Vivaldi, and I think it probably affects its reporting a little bit, when you look at the user agent of Vivaldi, it's exactly the user agent of Chrome.

00:20:59 So it lies to the world and tells the world it's Chrome.

00:21:02 There's no user agent for Vivaldi, it's just whatever version of Chrome it's using.

00:21:08 So when you go to the Chrome web store, it's like, put this in Chrome, you click it, and yeah, it goes.

00:21:12 So it worked perfectly, sure.

00:21:13 - Cool. - Yes.

00:21:14 And John Sheehan says, yes, they do.

00:21:16 All right, next extra, extra, extra.

00:21:18 Brian, I've been excited a little bit about Mastodon.

00:21:20 I don't know if you notice.

00:21:22 - Yeah, me too.

00:21:23 - I know, it's fantastic.

00:21:24 It's really tons of great interactions.

00:21:26 And I started putting in our show notes, which you'll see when I publish this, your Mastodon account and mine, so people can connect with us and have even more conversations over there.

00:21:36 But there was a really interesting article by Eugene, the guy who created Mastodon, called some, I've been looking and looking.

00:21:44 It's about scaling Mastodon and the challenges they were having.

00:21:47 And boy, it's, I would love to link to it, but I just can't find it, but it's so it's written in Ruby, right?

00:21:54 And so it talks so much about.

00:21:56 These are the challenges of scaling out threads and, oh, we have this thing called a gill and it really doesn't allow you to use threads very easily.

00:22:05 And, and here's, there's just, it was so interesting to look at, at how a technology that doesn't have async IO and async and await getting all tangled up trying to do IO based things. So it's like, well, can we have, maybe we should have 10 to 20 threads to do the network communication. But if we have more than 20, then we get like a context switching and contention in the operating system, you know, that just comes with having OS threads. Well, guess what? You can do really well with no threads or one thread. You can talk to web, You can call other websites, you can receive web requests and the mechanism for doing that in Python is async and await and async.io requires no additional threads, very, very little overhead, no contact switching.

00:22:50 So this project by Andrew, sorry if I am not getting, Andrew Godwin, sorry, forgot his last name for a moment, of Django channels said, what if I rewrote this but in Python with an async and await?

00:23:08 Okay, so there's a bunch of challenges of running Macedon.

00:23:12 People want to have their own server because they're like, "Oh, I want my own server so I'm not stuck in one of these communities." And beholden to them, the problem is every one of those is like a standalone DevOps adventure.

00:23:23 There's tons of like things working together and it's a lot of work, right?

00:23:27 It'd be better if you put like host more of them on one machine and sort of scale that up in a nice way.

00:23:35 This one lets you host multiple domains for small to medium instances, and it's written with async and await, which is pretty awesome.

00:23:43 Anyway, I think you should check this out.

00:23:46 >> I didn't know if I caught you trying to pronounce it.

00:23:49 >> Takahe?

00:23:50 >> I don't know.

00:23:51 >> I don't know. I'm going to go with that.

00:23:54 >> Of course, Andrew Godwin just said, "I can probably write this in Python and get it out in a couple of weeks." >> I think it was like five days or something.

00:24:03 (laughing)

00:24:04 So key features, multiple domain support, multiple identities per user, which is kind of interesting.

00:24:11 Desktop, mobile, and PWA compatible.

00:24:13 Again, how many days?

00:24:15 And easy deployment, a web worker, a background worker, and one database, not all this crazy, crazy stuff.

00:24:20 So anyway, people can check it out.

00:24:23 Let's check out the requirements.

00:24:25 See what we got going on here.

00:24:27 UVicorn for an HTTPX.

00:24:30 I mean, that pretty much says it right there.

00:24:32 Oh, interesting.

00:24:33 It's based on each Django HTMX is pretty interesting as some of the building blocks, but yeah, super cool.

00:24:40 Um, so there's another one.

00:24:42 All right.

00:24:42 I, I, we just had our black Friday sale over at talk Python.

00:24:47 Cool.

00:24:47 And that was really excellent.

00:24:48 So a bunch of courses, we sold some PI test courses by the way.

00:24:51 Yeah.

00:24:52 I'm just excited because sometimes we have these sort of conversations about you've like cool sales and stuff.

00:24:58 And I'm glad that I get to be a part of that now.

00:25:00 We've done other fun things where like we couldn't sell your book through them because it's through the publisher and I, yes, it gets tricky.

00:25:08 Right.

00:25:08 So I'm really excited as well.

00:25:09 So we did our black Friday sale and I guess what I noticed something a little bit unusual.

00:25:14 So I, after a little bit, I opened up glances on the main web server and said, CPU usage is 85%.

00:25:21 I'm like, Oh, that's not so good.

00:25:22 88, 91, 92.

00:25:24 Oh, but what was super interesting was engine X not Python was the thing getting hammered.

00:25:31 So both engine X workers were like almost a hundred percent and Python was just chilling.

00:25:36 I'm like, okay, that is a really interesting story for Python performance.

00:25:40 That something amazing like engine X that people say is fast all the time is the bottleneck.

00:25:45 And it turned out it survived, but just barely, right?

00:25:48 If it were like twice as bad, it would have, it would have keeled over, which had been bad.

00:25:52 So I talked to a bunch of people about this and I realize that there's one HTTP response.

00:25:57 It's got to spell that better.

00:25:58 Um, and 12 CSS files, 43 images and one JavaScript file on the page.

00:26:04 I was sending them.

00:26:04 So I'm like, all right, maybe I, I should try to use some interest in CDN, which I had got a recommendation from one of our listeners, but otherwise hadn't heard about what a cool service.

00:26:14 So now we have 112 different locations serving up those static files and just processing.

00:26:22 So I, I went back today when we did our cyber Monday and I said, when I, it was yesterday when I pushed out the announcement for Cyber Monday closing and I pulled up the real time data.

00:26:33 Look at that traffic.

00:26:34 That's CSS and JavaScript and images 1.4 gigabytes a second.

00:26:38 Oh my gosh, insane dude.

00:26:41 And check this out on the server.

00:26:43 This is the most important part.

00:26:44 3% CPU usage on NGINX and across the whole computer across all of all of the micro WSGI processes.

00:26:51 Just a couple of more percent.

00:26:52 >>CDN to the rescue.

00:26:54 >>Exactly.

00:26:55 The thing that's also interesting is that Python is just like, yeah, it was nothing.

00:26:58 Like, we can take that, but it's all those static files.

00:27:01 So anyway, I put that right up together for people in order to serve out that data.

00:27:06 Pay $2, right, for 0.35 terabytes.

00:27:10 And by the way, it's going right now.

00:27:14 Oh, it's got a refresh here.

00:27:16 They have these cool real-time maps and whatnot, but that little spike right there is when I released the TalkPython episode.

00:27:24 and that's about four and a half terabytes per second, which is just insane.

00:27:28 So anyway, I totally recommend people check this out.

00:27:31 It's super fun.

00:27:32 - You're reaching people all over the world.

00:27:34 That's pretty cool.

00:27:35 - Yeah, isn't that amazing?

00:27:36 You get all these different locations.

00:27:37 I think it lost its web socket connection 'cause it stopped updating.

00:27:43 It's like, there's a little warning.

00:27:45 This live monitor is like a little bit of a suggestion of how things might be, but yeah, anyway.

00:27:51 - Yeah, what's up with Alaska people not listening?

00:27:54 >> Hey, Alaska.

00:27:54 >> Yeah, man. Come on.

00:27:55 They're going to have to CD and over to Canada anyway.

00:28:00 Not that. This final one here.

00:28:03 No, not final one. Second to final one of the read all about it, or hear all about it. Reader five.

00:28:08 I'm actually been really getting back into RSS.

00:28:11 >> I've never left.

00:28:13 >> Yeah. What's your RSS story these days?

00:28:16 >> No, I use a Pidley on my phone just to keep up on stuff.

00:28:21 >> Nice. I'd switch to things like Zite, which is sadly gone, and Flipboard, and these Apple News like things where they curate a bunch of different sources.

00:28:32 I'm like, "You know what? There's a bunch of great places.

00:28:34 I would really like to just directly get them from and curate a little more than just I suggest more Python." Because do you know how many times my Python channel in Flipboard has woman scared of Python that comes out of toilet.

00:28:47 Like, "No, not that Python.

00:28:50 Really not.

00:28:51 >> No, no, no.

00:28:52 >> I've just been super loving.

00:28:54 I've been using Reader 5 with two E's.

00:28:57 What a nice piece of software this thing is for 10 bucks.

00:29:01 >> Okay.

00:29:02 >> Really, really cool.

00:29:02 >> Let's check it out.

00:29:04 >> Yeah. Another thing I would like, if people have awesome recommendations for blogs, especially Python blogs that I should be following, or people, listeners should be following, put that on the YouTube channel comments or send it to us on Macedon or Twitter.

00:29:20 and maybe I'll give a shout out to ones that are extra good.

00:29:23 But very, very cool.

00:29:24 Let's see.

00:29:25 Check this out.

00:29:26 There's a podcast called Sing for Science.

00:29:29 And on season three, episode eight, which just came out six days ago, Rivers Cuomo of Weezer and Guido van Rossum sit down for a conversation.

00:29:38 How cool is that?

00:29:39 - That's pretty cool.

00:29:40 - That's really cool.

00:29:41 - Have you listened to it?

00:29:43 - Yeah, I listened to it.

00:29:44 I grabbed my phone and my dog and went for a walk and listened to it.

00:29:48 as the sun came out and that was rare right now.

00:29:51 So yeah, it's really interesting.

00:29:53 - Neat.

00:29:55 - It's a lot of the host talking to Rivers and talking to Guido and a little bit of interaction.

00:29:59 I would love a little more facilitation of them two talking directly, but both great people.

00:30:04 Rivers is awesome.

00:30:05 He does really cool stuff with Python.

00:30:07 I had him on talkPython 3.27, little automation tools, which was fun.

00:30:13 So yeah, he's a legit developer these days, which is pretty neat.

00:30:17 All right.

00:30:17 Final thing, Brian, final extra, extra, extra.

00:30:20 We started with, I started at least my segment with AI coding and I'm gonna end it with AI coding kite.

00:30:26 Do you remember kite?

00:30:27 It was like the original GitHub co-pilot.

00:30:30 - Yeah.

00:30:30 - Yeah.

00:30:31 Unfortunately they are shutting down.

00:30:33 So they've been around for 10 years or so, not quite seven years, something like that.

00:30:39 - Really?

00:30:40 - Quite a while, but they're shutting down.

00:30:41 So thanks for all the code, I suppose.

00:30:44 And that's it, that's all I got for all my extras.

00:30:47 - I wanna add one.

00:30:49 So we talked, Simon Willison talked to, one thing I didn't mention about in his talk is he encouraged people to write blogs because there's not that, blogs were huge for a while and then everybody was doing it and now not so much.

00:31:04 And so you do get noticed more if you're writing a blog.

00:31:08 I think that that's a good thing.

00:31:10 Plus you can link, we can link to it easier if you've got your article on a blog.

00:31:14 But also, and RSS wise, PlanetPython is something I still check out.

00:31:20 PlanetPython.org, if you haven't heard of it, it has, you can either have the full content, so you can read, and it pulls all of this through RSS from different blogs.

00:31:31 If you have, and titles only, if you have a Python blog or you're starting one, check out PlanetPython.org and try to get your name on the list, maybe put out like three or four articles first, and then try to get your name on the list or your blog on the list.

00:31:48 That way it gets seen by people like us, even if you don't notify us.

00:31:53 >> Yeah, that's excellent.

00:31:55 I didn't subscribe to that because I feel like it's a little bit too much of everything, but I went through all the recent posts and said, this writer looks interesting or this source looks interesting and like subscribe directly.

00:32:05 I used it to start my exploration of those things I want to subscribe to.

00:32:09 >> Yeah, not a bad idea. You know they have - Or RSS feeds, 'cause they're in here.

00:32:13 - Exactly.

00:32:15 Since you brought it up, I just wanna also point out one of my roadblocks of writing a lot was, well, I don't have time to write an article, something well thought out and a thousand words and that.

00:32:25 You know what?

00:32:26 My new philosophy has been, let's just write really short posts.

00:32:31 Here's one about a fun thing I did with spammers and it's three paragraphs.

00:32:35 Or here's one about installing something as a PWA, it's two pictures and four paragraphs.

00:32:40 and you don't have to write essay, like long essays to contribute interesting things and ideas, I think.

00:32:47 So I just following up on that.

00:32:49 - Yeah, my thoughts are if it's gonna be a thread, make it a post instead.

00:32:54 - Yeah, exactly, exactly.

00:32:55 All right, well, my jokes have vanished.

00:32:59 I had a cool joke on social media and it got taken down.

00:33:02 It was very funny.

00:33:05 It was totally benign.

00:33:06 I don't know why it's gone, but whatever.

00:33:07 And then by the way, following up on this, Jeremy Page says, "You could also RSS Mastodon users." >> Okay.

00:33:14 >> That's on it.

00:33:16 >> Mastodon hashtags as well.

00:33:19 >> RSS those.

00:33:20 >> Okay. Yeah, I follow the Python hashtag over there.

00:33:23 I could RSS it, I suppose.

00:33:24 Excellent. All right. Brian, so do you have a joke for us?

00:33:28 >> Yeah. Speaking of Mastodon, on Mastodon, I said, I'm getting a lot of great Python content on Mastodon, but I need some joke people to like, I need some nerd jokes.

00:33:38 So I'm asking for people.

00:33:40 This somebody didn't tell me a person to follow.

00:33:44 I'm still looking for people to follow with good jokes.

00:33:46 So if you send them my way or send me their way if you know of people.

00:33:52 But here's one that I got from somebody I'm asked it on.

00:33:54 So I got it from, who did I get this from?

00:33:57 I should probably give credit.

00:33:58 So this came from Steven Box.

00:34:02 Nice. Thanks, Steven.

00:34:03 So exit condition from monkeyuser.com.

00:34:06 So it took me a while to get this.

00:34:09 So there's a couple people sitting at a desk, pair of programming, are guessing, and then somebody else is frustrated.

00:34:18 They hear, "Wait," and the frustrated guy says, "That's it," and he starts going towards a door that's labeled recursion.

00:34:27 And somebody says, "Wait, there's no... I'm going in." He goes in, and he gets into the other side and says, Wait, he's the person trying to say wait.

00:34:37 Oh my gosh, there's no exit condition.

00:34:41 So it's a dumb joke, but it's really good.

00:34:45 And it's got some clever.

00:34:47 The cartoon is clever where like the speech of the other one is off screen.

00:34:52 So it kind of looks like it comes from the original group, but in fact is coming from the recursion of the first one.

00:34:57 And yeah, it's yeah.

00:34:58 OK, well, one more.

00:35:00 Somebody said I should follow Olafer.

00:35:04 Wait, anyways, I just thought this was dumb and funny.

00:35:09 Bobby pin? No, I go by my full name, Robert Pindle.

00:35:14 It reminded me of the Bobby Tables thing.

00:35:17 >> Yes, exactly. I love it.

00:35:19 Well, thank you everyone for listening and Brian, thanks for being here.

00:35:23 >> Thank you.

00:35:24 >> Yeah, bye everyone.

