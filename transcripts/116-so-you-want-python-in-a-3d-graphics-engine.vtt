
00:00:00.000 --> 00:00:05.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.500 --> 00:00:10.200
This is episode 116 recorded January 29th, 2019.


00:00:10.200 --> 00:00:11.000
I'm Michael Kennedy.


00:00:11.000 --> 00:00:11.800
And I'm Brian Okken.


00:00:11.800 --> 00:00:14.700
And this episode is brought to you by DigitalOcean.


00:00:14.700 --> 00:00:17.100
Check them out at pythonbytes.fm/digitalocean.


00:00:17.100 --> 00:00:22.300
For now, I would like to get out there and explore a dictionary.


00:00:22.300 --> 00:00:23.700
What do we got here, Brian?


00:00:23.700 --> 00:00:26.200
This is totally cool.


00:00:26.200 --> 00:00:28.000
I don't even know what to call this.


00:00:28.000 --> 00:00:33.520
I've got a link, it's called Inside Python Dict, an Explorable Explanation.


00:00:33.520 --> 00:00:36.960
But it's really like a four-page different tutorial.


00:00:36.960 --> 00:00:41.360
It starts with lists and searching efficiently in a list,


00:00:41.360 --> 00:00:46.640
and then it kind of builds up to dict, so it has like a description of what hash tables are,


00:00:46.640 --> 00:00:51.040
why are they called hash tables, and then creates a Python-like,


00:00:51.040 --> 00:00:53.840
almost Python dictionary structure.


00:00:54.400 --> 00:00:56.640
It's a deep dive.


00:00:56.640 --> 00:00:58.880
Then at the end, it does actually show you


00:00:58.880 --> 00:01:01.400
how Python dictionaries really work.


00:01:01.400 --> 00:01:02.860
It's a pretty deep dive,


00:01:02.860 --> 00:01:04.720
but what I really want to


00:01:04.720 --> 00:01:07.500
highlight is the interactiveness of this.


00:01:07.500 --> 00:01:09.760
If you go take a look at this,


00:01:09.760 --> 00:01:14.200
it shows a lot of the examples in playable code.


00:01:14.200 --> 00:01:17.200
The code's like auto-playing with a little,


00:01:17.200 --> 00:01:19.840
it looks like a debugger where it walks you


00:01:19.840 --> 00:01:23.120
through different lines and then shows you the output.


00:01:23.120 --> 00:01:26.520
And it's this very visual way to learn.


00:01:26.520 --> 00:01:28.420
And it's pretty darn cool.


00:01:28.420 --> 00:01:30.180
And I don't even know how they're doing this,


00:01:30.180 --> 00:01:32.040
but you can figure it out if you want to,


00:01:32.040 --> 00:01:34.680
'cause all of the code for this website is up on GitHub.


00:01:34.680 --> 00:01:36.560
- This is a cool example, and you're right.


00:01:36.560 --> 00:01:39.760
The little visual play to highlight the code,


00:01:39.760 --> 00:01:42.260
highlight the visual data structures animation


00:01:42.260 --> 00:01:43.400
is really great, I think.


00:01:43.400 --> 00:01:45.040
- Yeah, it's a neat option.


00:01:45.040 --> 00:01:48.180
And then occasionally, some of the code has


00:01:48.180 --> 00:01:50.900
like fill in the blank stuff, where you can type in stuff


00:01:50.900 --> 00:01:53.660
and change what the code does on the back end.


00:01:53.660 --> 00:01:56.220
And it's just, I don't even know how this is doing it,


00:01:56.220 --> 00:01:57.060
but it's fun.


00:01:57.060 --> 00:02:00.540
And actually really getting a handle


00:02:00.540 --> 00:02:02.740
on how dictionaries work in Python


00:02:02.740 --> 00:02:05.300
is one of the superpowers.


00:02:05.300 --> 00:02:07.100
To get really good at Python,


00:02:07.100 --> 00:02:09.940
you kind of have to really grok dictionaries.


00:02:09.940 --> 00:02:11.260
So this is a good thing.


00:02:11.260 --> 00:02:13.980
- Yeah, they're certainly used more than regular,


00:02:13.980 --> 00:02:16.300
let's say everyday programming languages


00:02:16.300 --> 00:02:19.980
like C, C++, C#, Java.


00:02:19.980 --> 00:02:24.300
They have dictionaries or hash tables, but they are not built on top of them, right?


00:02:24.300 --> 00:02:28.620
Like the variables you look up come out of the locals dictionary, right?


00:02:28.620 --> 00:02:32.460
Your classes and their fields and values and attributes are based on dictionaries.


00:02:32.460 --> 00:02:34.940
And yeah, understanding them is super important.


00:02:34.940 --> 00:02:35.900
This is a cool example.


00:02:35.900 --> 00:02:36.420
I like it.


00:02:36.420 --> 00:02:36.700
Yeah.


00:02:36.700 --> 00:02:41.660
So neither of us are super big gamers, but there's a lot of people out there who are.


00:02:41.660 --> 00:02:47.340
And then there's also a lot of people building visualizations or 3d interactions.


00:02:47.500 --> 00:02:53.080
And Python itself is also used a lot in creating pipelines for creating games


00:02:53.080 --> 00:02:54.220
and movies and stuff like that.


00:02:54.220 --> 00:02:58.660
So I kind of have a theme through this whole episode that I put together.


00:02:58.660 --> 00:03:01.420
I ran across some stuff kind of all at once.


00:03:01.420 --> 00:03:06.560
And so the first one I want to talk about is the Unreal 4 engine, which is one of


00:03:06.560 --> 00:03:09.760
the big game engines, you know, built on C++, things like that.


00:03:09.760 --> 00:03:15.620
So as like Fortnite, save the world, Gears of War 4, Marvel versus Capcom,


00:03:15.740 --> 00:03:19.240
System shock, not the old one, which is an awesome game from the nineties, but


00:03:19.240 --> 00:03:22.300
the new one that's being remade, all these are being done on unreal engine


00:03:22.300 --> 00:03:28.820
four and the news is you can now use a plugin to embed Python three.


00:03:28.820 --> 00:03:32.940
Entirely inside of the unreal engine, both for controlling editing, like


00:03:32.940 --> 00:03:37.480
automating a scripting, say loading a bunch of stuff and auto-generating


00:03:37.480 --> 00:03:39.100
characters or stuff like that.


00:03:39.100 --> 00:03:41.640
And also runtime, like even characters in the games.


00:03:41.640 --> 00:03:42.680
That's neat.


00:03:42.680 --> 00:03:43.080
That's cool.


00:03:43.080 --> 00:03:43.340
Right?


00:03:43.660 --> 00:03:46.240
So yeah, so basically this is like a meta plugin.


00:03:46.240 --> 00:03:49.620
Like you take this plugin, you stick it in an unreal, and then you can create


00:03:49.620 --> 00:03:54.400
Python plugins to do stuff and even write automated tests against like the


00:03:54.400 --> 00:03:56.000
AI of your game and stuff like that.


00:03:56.000 --> 00:03:56.640
Oh, wow.


00:03:56.640 --> 00:03:57.420
Yeah.


00:03:57.420 --> 00:03:58.280
It's pretty interesting.


00:03:58.280 --> 00:04:03.860
And the, the GitHub repo is super detailed in like walkthroughs and steps.


00:04:03.860 --> 00:04:09.180
So there's an example usage on how to create this character from a mesh and


00:04:09.180 --> 00:04:11.080
from textures and stuff in Python.


00:04:11.740 --> 00:04:15.340
in the editor and there's also one about how to create gameplay elements,


00:04:15.340 --> 00:04:16.780
you know, that run around in a game.


00:04:16.780 --> 00:04:22.740
So it looks really cool if anyone needs to do 3d interactive stuff and they


00:04:22.740 --> 00:04:26.560
want to use Unreal four engine or even plug into a game that exists like some,


00:04:26.560 --> 00:04:28.800
there's a whole bunch more than the ones I listed here.


00:04:28.800 --> 00:04:30.600
This is a cool option here.


00:04:30.600 --> 00:04:30.940
Yeah.


00:04:30.940 --> 00:04:31.400
Nice.


00:04:31.400 --> 00:04:31.860
Cool.


00:04:31.860 --> 00:04:32.100
Yeah.


00:04:32.100 --> 00:04:35.000
So this next one you got for us is on context lab.


00:04:35.000 --> 00:04:37.460
I'm a big fan of context managers in the West statement.


00:04:37.460 --> 00:04:38.380
Tell us what you found.


00:04:38.440 --> 00:04:41.840
I was actually slow to come to context managers,


00:04:41.840 --> 00:04:44.480
but they definitely, once you get your head around them,


00:04:44.480 --> 00:04:45.840
they're really handy.


00:04:45.840 --> 00:04:49.120
And I saw this reference and I didn't know existed.


00:04:49.120 --> 00:04:51.560
There's a lot of functions that just print stuff,


00:04:51.560 --> 00:04:54.880
like they print stuff to standard out or to standard error.


00:04:54.880 --> 00:04:57.920
And I am used to testing that.


00:04:57.920 --> 00:04:59.400
I know how to test that.


00:04:59.400 --> 00:05:02.520
With pytest, there's the capsys fixture


00:05:02.520 --> 00:05:05.920
that you can use that to capture the output of something


00:05:05.920 --> 00:05:08.480
and check what it is and read it, whatever.


00:05:08.480 --> 00:05:10.920
But there's a lot of times where you might be using


00:05:10.920 --> 00:05:13.320
something that prints to standard out


00:05:13.320 --> 00:05:14.920
and you don't want it to,


00:05:14.920 --> 00:05:18.940
or you want to be able to get that output programmatically.


00:05:18.940 --> 00:05:22.880
And ContextLib has a redirect standard out function


00:05:22.880 --> 00:05:24.340
that you just give it a new target


00:05:24.340 --> 00:05:27.040
and then using the with statement,


00:05:27.040 --> 00:05:29.960
run whatever code you're gonna run


00:05:29.960 --> 00:05:31.560
and you can capture the output.


00:05:31.560 --> 00:05:33.680
And didn't know that was there and it's very cool.


00:05:33.680 --> 00:05:38.280
I'm going to drop a little tiny code snippet in the show notes


00:05:38.280 --> 00:05:39.320
to show people how to use it.


00:05:39.320 --> 00:05:40.680
- Yeah, and it'd be great for testing


00:05:40.680 --> 00:05:44.240
or something like that without trying to do too much.


00:05:44.240 --> 00:05:46.640
What's cool that I like about this is,


00:05:46.640 --> 00:05:48.120
'cause it's a WHIS statement,


00:05:48.120 --> 00:05:49.880
a little bit of code is being redirected,


00:05:49.880 --> 00:05:51.600
then it goes back to normal.


00:05:51.600 --> 00:05:54.520
It's not like you're permanently changing what it is.


00:05:54.520 --> 00:05:56.400
It's just maybe during a test


00:05:56.400 --> 00:05:58.400
or during one function call or something.


00:05:58.400 --> 00:05:59.680
- I didn't put this in the show notes,


00:05:59.680 --> 00:06:03.640
but in the link to the ContextLib documentation,


00:06:03.640 --> 00:06:06.560
The output I showed in our example,


00:06:06.560 --> 00:06:09.200
just capturing it with string IO.


00:06:09.200 --> 00:06:10.840
But you can pass it in like a file.


00:06:10.840 --> 00:06:12.600
So if you've got part of your system


00:06:12.600 --> 00:06:14.600
that usually just prints to send it out,


00:06:14.600 --> 00:06:16.840
you can redirect all that to a file


00:06:16.840 --> 00:06:18.320
if you want to save it somewhere or something.


00:06:18.320 --> 00:06:19.160
- Yeah, nice.


00:06:19.160 --> 00:06:20.480
And there's a standard error addition as well, right?


00:06:20.480 --> 00:06:21.320
- Yep. - Sweet.


00:06:21.320 --> 00:06:22.560
You know, I love this pattern.


00:06:22.560 --> 00:06:25.920
I've done stuff like this with colored output.


00:06:25.920 --> 00:06:28.560
So use something like Colorama and say,


00:06:28.560 --> 00:06:31.480
for this output, I would like it to go to green,


00:06:31.480 --> 00:06:33.960
But then I wanted to go back to whatever it was before.


00:06:33.960 --> 00:06:36.080
So a really nice way to do that as well


00:06:36.080 --> 00:06:37.720
is to put it into one of these,


00:06:37.720 --> 00:06:38.920
create a little context manager,


00:06:38.920 --> 00:06:39.880
throw it in there,


00:06:39.880 --> 00:06:42.160
and just the stuff that interacts


00:06:42.160 --> 00:06:44.840
with a console or terminal in the with block is great.


00:06:44.840 --> 00:06:45.660
That's pretty cool.


00:06:45.660 --> 00:06:46.500
I like this better.


00:06:46.500 --> 00:06:47.320
Very nice.


00:06:47.320 --> 00:06:48.160
Before we move on to the next one,


00:06:48.160 --> 00:06:50.120
let me tell you about DigitalOcean.


00:06:50.120 --> 00:06:53.000
Of course, a lot of our hardware is running on DigitalOcean.


00:06:53.000 --> 00:06:54.880
They're super, super nice.


00:06:54.880 --> 00:06:57.000
One thing I don't know much about, Brian,


00:06:57.000 --> 00:06:58.720
I don't know how you're doing, is Kubernetes.


00:06:58.720 --> 00:06:59.920
Have you done a lot of Kubernetes?


00:06:59.920 --> 00:07:00.760
- I have not.


00:07:00.760 --> 00:07:03.260
I have not either, but it definitely seems like


00:07:03.260 --> 00:07:05.680
one of the most widely adopted ways


00:07:05.680 --> 00:07:08.020
to use Docker containers and orchestrate them


00:07:08.020 --> 00:07:10.520
and really take more than one Docker container


00:07:10.520 --> 00:07:11.680
and make it work as a whole,


00:07:11.680 --> 00:07:14.900
do live zero downtime upgrades, things like that.


00:07:14.900 --> 00:07:17.840
So you should check out DigitalOcean's Kubernetes,


00:07:17.840 --> 00:07:22.440
D-O-K-8 service, which is a managed Kubernetes service.


00:07:22.440 --> 00:07:23.520
It's out officially now.


00:07:23.520 --> 00:07:25.980
It's been around in beta and alpha for a while.


00:07:25.980 --> 00:07:27.320
So you can deploy faster,


00:07:27.320 --> 00:07:29.200
get your Kubernetes clusters in seconds,


00:07:29.200 --> 00:07:31.820
provision and access it in a few minutes,


00:07:31.820 --> 00:07:35.260
easily scale, persistent storage based on incoming traffic


00:07:35.260 --> 00:07:37.820
with block storage and load balancers and whatnot.


00:07:37.820 --> 00:07:42.280
And it costs 2.4 times less or better performance per price


00:07:42.280 --> 00:07:43.360
compared to the other providers.


00:07:43.360 --> 00:07:47.400
So on top of that, if you go to pythonbytes.fm/digitalocean


00:07:47.400 --> 00:07:51.120
as a new user, you get $100 credit to Kubernetes,


00:07:51.120 --> 00:07:51.960
all the things.


00:07:51.960 --> 00:07:54.400
So it sounds like a lot of fun and definitely check it out.


00:07:54.400 --> 00:07:56.200
It supports the show.


00:07:56.200 --> 00:07:58.280
So to continue on with my theme,


00:07:58.280 --> 00:08:01.180
It's all about the 3D and the Python.


00:08:01.180 --> 00:08:05.380
So the next one I wanna cover is something called Panda 3D.


00:08:05.380 --> 00:08:09.220
And now it may seem very similarly named to Pandas,


00:08:09.220 --> 00:08:10.520
but it has nothing to do with that.


00:08:10.520 --> 00:08:14.280
It's just an open source, completely free to use game engine


00:08:14.280 --> 00:08:16.780
for real time 3D games, visualization,


00:08:16.780 --> 00:08:18.940
simulation, simulations, experiments,


00:08:18.940 --> 00:08:20.060
all that kind of stuff.


00:08:20.060 --> 00:08:23.580
This one comes from Kolia Lubitz.


00:08:23.580 --> 00:08:24.620
Hopefully that was close enough.


00:08:24.620 --> 00:08:26.420
Thank you, Kolia, for sending that in.


00:08:26.420 --> 00:08:27.500
That's great.


00:08:27.500 --> 00:08:28.840
One of the things I thought was cool,


00:08:28.840 --> 00:08:31.000
I don't think everyone's gonna be building a game,


00:08:31.000 --> 00:08:33.380
but I think a lot of people out there are doing science


00:08:33.380 --> 00:08:36.200
and experiments and visualizations and stuff like that.


00:08:36.200 --> 00:08:38.920
And I think this is a great little 3D engine


00:08:38.920 --> 00:08:41.800
for simulations that just happen to be in 3D


00:08:41.800 --> 00:08:42.920
and you can do them in Python.


00:08:42.920 --> 00:08:43.760
- Oh, that's cool.


00:08:43.760 --> 00:08:44.580
- Yeah, isn't that nice?


00:08:44.580 --> 00:08:48.500
So this is basically a C++ 3D engine


00:08:48.500 --> 00:08:51.940
that has a bunch of library plugins and stuff


00:08:51.940 --> 00:08:53.420
that make it a lot easier to work with.


00:08:53.420 --> 00:08:56.160
So it runs on all the platforms.


00:08:56.160 --> 00:08:58.320
It has very little overhead because you basically


00:08:58.320 --> 00:09:02.400
get your meshes, you load them into the system,


00:09:02.400 --> 00:09:04.240
and then you just sort of poke at them


00:09:04.240 --> 00:09:05.520
and control them from Python,


00:09:05.520 --> 00:09:08.520
but they run on your GPU in C++.


00:09:08.520 --> 00:09:10.200
So really good performance as well.


00:09:10.200 --> 00:09:11.040
- Oh, nice.


00:09:11.040 --> 00:09:11.880
- Yeah, so some of the features,


00:09:11.880 --> 00:09:14.320
platform portability, it runs on Mac, Linux,


00:09:14.320 --> 00:09:16.360
and Windows, maybe Raspberry Pi.


00:09:16.360 --> 00:09:18.620
I can't remember where else, possibly other places,


00:09:18.620 --> 00:09:22.320
but the main places, it has a lot of tools


00:09:22.320 --> 00:09:23.840
for handling assets.


00:09:23.840 --> 00:09:25.420
I don't know if you've ever done anything with 3D,


00:09:25.420 --> 00:09:30.420
but it's these library files and this Adobe file format


00:09:30.420 --> 00:09:32.940
for that other thing,


00:09:32.940 --> 00:09:34.300
and there's just all that kind of stuff.


00:09:34.300 --> 00:09:37.060
So there's a lot of tools for handling these assets,


00:09:37.060 --> 00:09:38.500
which is pretty awesome.


00:09:38.500 --> 00:09:42.620
So you can automate either your pipeline or even the code.


00:09:42.620 --> 00:09:45.020
It also has library bindings, which is cool.


00:09:45.020 --> 00:09:48.560
So you can do things like plug in the Bullet Physics Engine


00:09:48.560 --> 00:09:51.860
or the As-a-Map Loader or OpenAL


00:09:51.860 --> 00:09:54.160
or all these different things that,


00:09:54.160 --> 00:09:56.660
Just because you have 3D doesn't mean you have physics


00:09:56.660 --> 00:09:58.760
or interaction and stuff like that, right?


00:09:58.760 --> 00:09:59.600
- Yeah. - Pretty cool.


00:09:59.600 --> 00:10:02.200
And then finally, it comes with this thing called PStance


00:10:02.200 --> 00:10:04.240
for Panda 3D profiling.


00:10:04.240 --> 00:10:07.720
So you can actually get a visual representation


00:10:07.720 --> 00:10:10.320
of exactly where your program is spending its time,


00:10:10.320 --> 00:10:12.760
like this frame or this mesh or whatever.


00:10:12.760 --> 00:10:14.240
It takes that amount of time to run.


00:10:14.240 --> 00:10:16.960
So you get super detailed runtime,


00:10:16.960 --> 00:10:18.920
profiling, and performance analysis.


00:10:18.920 --> 00:10:22.000
So not bad for a completely free Python-enabled thing.


00:10:22.000 --> 00:10:23.520
- Yeah, and it's completely free.


00:10:23.520 --> 00:10:25.720
You can even use it for commercial use if you want.


00:10:25.720 --> 00:10:26.560
- Yeah, exactly.


00:10:26.560 --> 00:10:28.840
And I don't think Unreal 4, for example, is.


00:10:28.840 --> 00:10:30.440
So this is a nice one.


00:10:30.440 --> 00:10:31.280
- Nice.


00:10:31.280 --> 00:10:32.100
- Yep, what's the next thing you got?


00:10:32.100 --> 00:10:33.920
- I have an interesting article,


00:10:33.920 --> 00:10:35.200
and I should have written down,


00:10:35.200 --> 00:10:37.120
it's from Dustin Ingram,


00:10:37.120 --> 00:10:41.680
called "Why PyPI Doesn't Know Your Project's Dependencies."


00:10:41.680 --> 00:10:43.880
And I guess it's something I never really thought about


00:10:43.880 --> 00:10:48.880
before, but if you go look on packages on PyPI,


00:10:48.880 --> 00:10:51.040
it would be kind of cool if you could see


00:10:51.040 --> 00:10:53.320
all the dependencies of a particular package.


00:10:53.320 --> 00:10:56.140
- Yeah, you can do it on GitHub as a whole project,


00:10:56.140 --> 00:10:58.260
but you can't do it as like a single,


00:10:58.260 --> 00:11:00.620
you can't go, this package I'm gonna get has,


00:11:00.620 --> 00:11:02.660
exactly, that's nice, that would be nice.


00:11:02.660 --> 00:11:05.060
- He's trying to answer, he says he gets a lot of questions


00:11:05.060 --> 00:11:07.020
like how can I produce a dependency graph


00:11:07.020 --> 00:11:08.700
for Python packages?


00:11:08.700 --> 00:11:12.380
Man, why doesn't PyPI show that the project dependencies


00:11:12.380 --> 00:11:15.380
right out on the page, that would be neat.


00:11:15.380 --> 00:11:18.180
And also just how can I get all the dependencies


00:11:18.180 --> 00:11:20.260
without downloading it first?


00:11:20.260 --> 00:11:23.900
And the answer is you can't, which is interesting.


00:11:23.900 --> 00:11:26.740
And the reason is because of setup tools,


00:11:26.740 --> 00:11:29.260
then setup.py is dynamic.


00:11:29.260 --> 00:11:30.500
It's code, it runs.


00:11:30.500 --> 00:11:33.980
And it gives an example, which is sort of funny.


00:11:33.980 --> 00:11:37.660
It gives an example of building a setup.py package


00:11:37.660 --> 00:11:41.140
that does a dependency with random choice.


00:11:41.140 --> 00:11:43.940
So randomly pulls in different packages.


00:11:43.940 --> 00:11:45.820
- Fun, just to make a point.


00:11:45.820 --> 00:11:48.280
- Yeah, so that would be evil, but it could be done,


00:11:48.280 --> 00:11:50.480
and I'm hoping that a listener will do this


00:11:50.480 --> 00:11:52.380
and push it up just for the heck of it.


00:11:52.380 --> 00:11:55.640
But there's some real reasons to do that.


00:11:55.640 --> 00:11:59.040
And a lot of them have to do with like different packages


00:11:59.040 --> 00:12:01.560
being available on Windows versus Linux


00:12:01.560 --> 00:12:03.120
versus Mac or whatever.


00:12:03.120 --> 00:12:04.820
So operating system dependencies


00:12:04.820 --> 00:12:07.280
are something that often makes you have to


00:12:07.280 --> 00:12:09.240
pull one in versus another.


00:12:09.240 --> 00:12:11.440
Also, different versions of Python.


00:12:11.440 --> 00:12:13.960
So if you're using Python different,


00:12:13.960 --> 00:12:15.220
if you wanna use data classes


00:12:15.220 --> 00:12:16.560
and you're using an older Python,


00:12:16.560 --> 00:12:20.680
you need to actually depend on data classes, for instance.


00:12:20.680 --> 00:12:23.320
So this is an interesting article that talks about that,


00:12:23.320 --> 00:12:26.920
but also points out why wheels are awesome.


00:12:26.920 --> 00:12:31.440
So wheels are not something that are dynamic,


00:12:31.440 --> 00:12:33.480
they are more predictable.


00:12:33.480 --> 00:12:37.280
So this is, I think, also a little bit of a plug for wheels.


00:12:37.280 --> 00:12:39.520
And I wanted to highlight that wheels,


00:12:39.520 --> 00:12:41.400
they have dependencies in them also,


00:12:41.400 --> 00:12:43.040
but they're not as dynamic.


00:12:43.040 --> 00:12:44.720
So there'll be a different wheel up there


00:12:44.720 --> 00:12:47.000
for different operating systems.


00:12:47.000 --> 00:12:50.440
And while I was poking around on here,


00:12:50.440 --> 00:12:53.560
I also wanted to go on a little bit of a tangent.


00:12:53.560 --> 00:12:56.900
There's a website called pythonwheels.com


00:12:56.900 --> 00:12:58.480
that I'll just drop a link in here too,


00:12:58.480 --> 00:13:01.120
and it talks about some of the advantages of wheels.


00:13:01.120 --> 00:13:05.200
- It's nice, installs faster, doesn't run set up PUI.


00:13:05.200 --> 00:13:07.960
Yeah, doesn't require a compiler.


00:13:07.960 --> 00:13:10.080
So basically, kind of a binary version


00:13:10.080 --> 00:13:12.400
instead of a source version, which is cool.


00:13:12.400 --> 00:13:14.960
for some packages that have wheels up there,


00:13:14.960 --> 00:13:17.120
it is kind of cool if you can put up,


00:13:17.120 --> 00:13:19.720
if you've got hard operating system dependencies,


00:13:19.720 --> 00:13:21.920
then have some sort of build step


00:13:21.920 --> 00:13:24.200
that puts those up for the different operating systems.


00:13:24.200 --> 00:13:25.040
- Yeah, cool.


00:13:25.040 --> 00:13:27.840
I like it, and it's a totally reasonable question.


00:13:27.840 --> 00:13:30.800
Like, I'm considering installing this thing.


00:13:30.800 --> 00:13:32.080
What does it use, right?


00:13:32.080 --> 00:13:33.780
That's a little, that should be obvious,


00:13:33.780 --> 00:13:34.620
and I'm not sure it is.


00:13:34.620 --> 00:13:36.460
- And one of the things I also,


00:13:36.460 --> 00:13:37.600
I don't know why people are,


00:13:37.600 --> 00:13:39.880
if you really want to know on my operating system,


00:13:39.880 --> 00:13:41.040
what do I need?


00:13:41.040 --> 00:13:43.280
- pip includes a command called download.


00:13:43.280 --> 00:13:46.240
So you can say pip download something


00:13:46.240 --> 00:13:50.200
and point it to a directory and it'll download something


00:13:50.200 --> 00:13:52.760
and all of the dependencies that are valid


00:13:52.760 --> 00:13:54.040
for your operating system.


00:13:54.040 --> 00:13:57.200
So if you're really curious, that's one way to do it.


00:13:57.200 --> 00:13:58.360
- Very, very cool.


00:13:58.360 --> 00:13:59.840
All right, for the last one,


00:13:59.840 --> 00:14:04.120
I want to talk about building games and other stuff,


00:14:04.120 --> 00:14:05.200
other stuff with Python.


00:14:05.200 --> 00:14:06.680
Now this one is different than the other.


00:14:06.680 --> 00:14:08.860
The first two, there's about 3D engines,


00:14:08.860 --> 00:14:12.820
one, a big commercial one and one, a free open source one that you can plug in and


00:14:12.820 --> 00:14:14.780
control and automate and work with, with Python.


00:14:14.780 --> 00:14:17.980
But what this is actually, this one makes me super excited.


00:14:17.980 --> 00:14:19.300
It makes me want to go along with it.


00:14:19.300 --> 00:14:22.180
It's a, at least six part series.


00:14:22.180 --> 00:14:23.300
On PI game.


00:14:23.300 --> 00:14:27.400
And they're really quite detailed and in-depth and interactive.


00:14:27.400 --> 00:14:28.820
So I'll just give you a sense.


00:14:28.820 --> 00:14:33.860
It starts out with building a simple dice game, then building a game framework.


00:14:33.860 --> 00:14:38.340
So you can build on top of it, adding players, moving your characters around,


00:14:38.560 --> 00:14:40.680
having heroes and villains that fight.


00:14:40.680 --> 00:14:44.860
And then the last one, at least at the time of the recording is putting


00:14:44.860 --> 00:14:47.240
platforms in a Python game with Pygame.


00:14:47.240 --> 00:14:52.120
And what they mean by that is, you know, think of Mario brothers or


00:14:52.120 --> 00:14:56.160
joust or something like one of these old 2d side scroller games.


00:14:56.160 --> 00:14:58.200
Like how do you create a game with that?


00:14:58.200 --> 00:14:59.840
And it's pretty elaborate and pretty nice.


00:14:59.840 --> 00:15:00.520
Oh, that's cool.


00:15:00.520 --> 00:15:00.800
Yeah.


00:15:00.800 --> 00:15:02.640
It's like a, basically the six part series.


00:15:02.640 --> 00:15:04.720
So if you wanted to kind of get your Python better.


00:15:04.720 --> 00:15:08.400
Or you wanted to learn Pygame either of those, this would be a really cool


00:15:08.480 --> 00:15:12.680
set of series to go through because I'm going to come up with like a 3D side


00:15:12.680 --> 00:15:15.980
scroller, sorry, 2D side scroller game at the end and that that seems pretty awesome.


00:15:15.980 --> 00:15:19.280
Man, I haven't thought about Joust in a long time. I missed that game. That was cool.


00:15:19.280 --> 00:15:23.900
I know. I can't even remember the sounds but yeah I remember it for sure.


00:15:23.900 --> 00:15:28.980
Even the arcade there, that was fun. Yeah that one in Dungeon, that Dungeon game


00:15:28.980 --> 00:15:33.320
that was sort of just a video more or less. Those were fun times. Now one


00:15:33.320 --> 00:15:36.240
other thing that I want to throw in here like so this is the series and that was


00:15:36.240 --> 00:15:37.240
That's kind of what I want to talk about.


00:15:37.240 --> 00:15:38.640
I'm linking to all the pieces.


00:15:38.640 --> 00:15:42.040
But something I ran across recently as well that I thought was pretty cool.


00:15:42.040 --> 00:15:43.280
I haven't gotten it.


00:15:43.280 --> 00:15:45.960
I haven't played with it yet, but it gave me the same feeling of like, "Oh, this looks


00:15:45.960 --> 00:15:51.440
so cool," is this thing called Mission Python, a code space adventure game.


00:15:51.440 --> 00:15:56.440
So similarly, it's like a whole learn Python and learn Pygame by building like a space


00:15:56.440 --> 00:15:58.180
adventure game with Pygame.


00:15:58.180 --> 00:15:59.180
And it just looks so fun.


00:15:59.180 --> 00:16:01.520
I just, I want to do it, but haven't done it yet.


00:16:01.520 --> 00:16:02.520
I haven't ordered the book.


00:16:02.520 --> 00:16:03.520
Yeah, it does look fun.


00:16:03.520 --> 00:16:04.520
Neat.


00:16:04.520 --> 00:16:05.520
Yeah.


00:16:05.520 --> 00:16:12.520
If you're interested in learning Pygame or you want to use Pygame for some kind of simulation type thing, either of these would be real helpful.


00:16:12.520 --> 00:16:17.520
Yeah. Sorry. I'm already giggling about the joke.


00:16:17.520 --> 00:16:28.520
Yeah, it's coming. So, those are our main items. You got anything extra to share with folks before we unleash an amazing joke on them?


00:16:28.520 --> 00:16:31.520
No, nothing extra this week. How about you?


00:16:31.520 --> 00:16:32.360
- How about you?


00:16:32.360 --> 00:16:34.360
- Not really, but I do wanna say I'm looking forward


00:16:34.360 --> 00:16:37.080
to being at PyCascades with you and everyone else


00:16:37.080 --> 00:16:38.920
up in Seattle in the February.


00:16:38.920 --> 00:16:40.760
So if there's still tickets available


00:16:40.760 --> 00:16:43.440
by the time this goes out and people wanna make it there,


00:16:43.440 --> 00:16:44.880
then definitely check it out.


00:16:44.880 --> 00:16:46.000
It was a fun conference last year.


00:16:46.000 --> 00:16:46.820
- Definitely.


00:16:46.820 --> 00:16:47.660
- Absolutely.


00:16:47.660 --> 00:16:49.560
All right, I guess we got our friend, Dan Bader,


00:16:49.560 --> 00:16:50.640
to thank for this, don't we?


00:16:50.640 --> 00:16:53.240
- I guess, I think, I'm not sure.


00:16:53.240 --> 00:16:54.320
Somebody at RealPython.


00:16:54.320 --> 00:16:55.160
- Yeah, somebody at RealPython.


00:16:55.160 --> 00:16:56.520
All right, hit us with a joke.


00:16:56.520 --> 00:16:58.120
This comes from the RealPython Twitter


00:16:58.120 --> 00:16:59.160
and I linked to the joke.


00:16:59.160 --> 00:17:01.320
It's got a little graphic to it, but you can do it without.


00:17:01.320 --> 00:17:03.780
- Yeah, so why do pythons live on land?


00:17:03.780 --> 00:17:05.820
- I don't know, they're snakes, I don't know why.


00:17:05.820 --> 00:17:07.560
- 'Cause they're above sea level.


00:17:07.560 --> 00:17:09.980
(laughing)


00:17:09.980 --> 00:17:12.420
- The letter C, capital dash level, of course.


00:17:12.420 --> 00:17:15.420
- Yes, 'cause python's a higher level language,


00:17:15.420 --> 00:17:17.920
you know, it gets worse as you explain it more.


00:17:17.920 --> 00:17:21.700
- That's right, so yeah, 'cause you don't compile it, no.


00:17:21.700 --> 00:17:22.660
Yeah, it's bad.


00:17:22.660 --> 00:17:26.260
It's a good joke, though, and very, very funny.


00:17:26.260 --> 00:17:27.100
Thanks for sharing.


00:17:27.100 --> 00:17:29.060
- Yeah, definitely, so thank you.


00:17:29.060 --> 00:17:30.260
- Yeah, thanks for doing the episode as well,


00:17:30.260 --> 00:17:31.100
and goodbye, everyone.


00:17:31.100 --> 00:17:35.420
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes.


00:17:35.420 --> 00:17:41.780
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm.


00:17:41.780 --> 00:17:46.060
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.


00:17:46.060 --> 00:17:52.320
We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy.


00:17:52.320 --> 00:17:55.800
Thank you for listening and sharing this podcast with your friends and colleagues.

