00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 65, recorded February 7th, 2018.

00:00:08 I'm Michael Kennedy.

00:00:09 And I'm Brian Ackett.

00:00:10 And we got a bunch of cool stuff.

00:00:13 I really am excited to share a couple of these things with you.

00:00:15 And I'm excited to have Rollbar as a sponsor.

00:00:18 So you probably heard about Rollbar from other episodes.

00:00:21 If you want to check them out, we got a special offer at pythonbytes.fm/rollbar.

00:00:25 Tell you more about that later.

00:00:26 I kind of want to know about some charts.

00:00:29 I have got like this just...

00:00:31 Have you ever seen the test output on Jenkins?

00:00:35 If you have testing?

00:00:36 No, I haven't played with Jenkins.

00:00:37 Okay.

00:00:38 Well, so in Jenkins builds, there's this thing where you can, after you run your tests,

00:00:42 you can have it display your passed and failed tests in this little graph.

00:00:47 It's just a little chart.

00:00:48 It's an area chart.

00:00:49 I wanted one of those, but I wanted something that would show like five of those charts, a whole bunch of them.

00:00:55 So it doesn't do it automatically.

00:00:57 I probably could have hunted into Jenkins or something, but I wanted to build my own thing.

00:01:02 So I want to do it in Flask.

00:01:04 And I've been trying to figure this out.

00:01:06 And there was a great tutorial by...

00:01:09 This is going to be a little story anyway.

00:01:11 But there was this great tutorial by the Matt McKay from Fullstack that showed how to do this,

00:01:17 almost how to do this in Boca or Bokeh.

00:01:20 Yeah.

00:01:20 Very nice.

00:01:21 That's a cool project too.

00:01:22 Yeah.

00:01:22 But Bokeh, the current version of Bokeh dropped the charting feature.

00:01:26 That's not helpful.

00:01:28 But there goes your solution you just found.

00:01:30 Yeah.

00:01:31 So I'm trying to do it in...

00:01:32 And I gave up and asked Twitter.

00:01:34 And what came back was one of these options was Pygal, P-Y-G-A-L, which ends up very...

00:01:41 It's very simple, but I can...

00:01:43 Within 20 minutes, I had a Flask app running with these charts up.

00:01:47 So it's not as hugely featured as some of the other graphing applications, but it's very cool.

00:01:54 And it also can export SVG.

00:01:56 So these are small.

00:01:57 It's pretty small also when you're displaying these.

00:02:00 That's cool.

00:02:01 And the SVGs can have basically infinite, very high levels of sort of zoomability, right?

00:02:08 Because they're scalable, right?

00:02:10 That's their first name.

00:02:12 That's the S.

00:02:13 They also do PMGs, like you said.

00:02:14 That's cool.

00:02:15 And they have a bunch of great looking charts.

00:02:16 Like, these are really nice.

00:02:18 So you can do like bar charts or Py or the radar ones, all sorts of good stuff.

00:02:22 So I still want to get something like bouquet or something like that to work so that I can

00:02:26 make them interactive because these aren't interactive things.

00:02:30 You build them and just display them.

00:02:32 But for my needs right now, that works.

00:02:35 And it's very nice.

00:02:36 Yeah, very nice.

00:02:37 And kudos to the people writing the documentation because they have documentation on how to...

00:02:42 Pretty much they have it in Django, Flask, and pretty much any HTML that you

00:02:46 want to throw this in, how to do that.

00:02:48 Oh, yeah.

00:02:49 That's super cool.

00:02:50 And they have nice pictures, which is always really powerful when you're talking about graphs

00:02:55 or UI or things like this.

00:02:56 Yeah.

00:02:57 You can just admire the picture.

00:02:58 You go, okay, I want this.

00:02:59 Now I'll pay attention.

00:02:59 Really nice.

00:03:01 So a lot of people send us messages and they ask for advice on like a sort of career path

00:03:06 or I'm thinking about this technology or how do I get started in programming or, you know,

00:03:11 something like that.

00:03:12 And there was this really interesting post over on Reddit under learn programming.

00:03:18 And so it's not technically a Python thing, but a bunch of Python people are hanging out

00:03:22 there.

00:03:22 So that's kind of cool.

00:03:24 And the idea was this guy, he gets a guy who wrote me.

00:03:28 Anyway, person posted it, sent a message and said, hey, look, I'm 31 days into a self-study

00:03:34 program on Python and I'm loving every minute of it.

00:03:36 A couple of questions.

00:03:37 Could you all fill this out just so we can share our experiences?

00:03:41 Oh, interesting.

00:03:42 Isn't that cool?

00:03:42 So what were you doing before you began self-study and programming?

00:03:45 So it's for people who are doing self-study and what made you want to study programming on

00:03:50 your own?

00:03:50 How did you get started?

00:03:52 How long did it take for you to feel confident enough in your skills and knowledge to think

00:03:56 that you could be employed?

00:03:57 What else did you do besides self-study that helped you?

00:04:01 And what are you, what's next?

00:04:03 And this thread just blew up on Reddit and there's all these really interesting conversations.

00:04:09 And so anyone out there who is sort of in the early stages of self-study, maybe they're

00:04:13 doing a hundred days of code type thing, or they're in a bootcamp or they're taking, you

00:04:18 know, online courses.

00:04:19 I know a few places have good ones of those.

00:04:21 I think going through here and reading this, it would be really, really valuable to sort of

00:04:28 have that shared experience.

00:04:29 Isn't that cool?

00:04:29 Oh, that's great.

00:04:30 Yes.

00:04:31 So there's another story that's linked from there.

00:04:33 So this one doesn't technically count as an item, but people might also find it interesting

00:04:37 as a thread to keep following is someone said, oh, this, there are people who are like 30,

00:04:43 40, like, hey, I'm learning to code in my forties.

00:04:45 And you guys are really inspiring me to realize this is actually possible.

00:04:49 It's not too late for me, you know?

00:04:51 So there's this article called stories from 300 developers who got their first tech job in

00:04:55 their thirties, forties, and fifties linked from there.

00:04:58 That's cool.

00:04:59 I got to go read that.

00:05:00 Yeah.

00:05:01 And I think that might be real helpful to some folks as well.

00:05:03 So if you're in this space and you want some shared experiences and to connect with some

00:05:08 people, check out this thread we're linking to because I think it's helpful.

00:05:10 On that topic of learning, actually, there's a couple episodes of Test and Code that'll be

00:05:16 good.

00:05:16 I just did one recently about extended learning through universities, which I hadn't considered

00:05:22 before.

00:05:23 And then also there's upcoming, I'm talking with Stephanie Hurlbert on talking with mentors

00:05:30 and opening yourself up to be a mentor as well.

00:05:32 Yeah.

00:05:33 Yeah.

00:05:33 Very cool.

00:05:33 I'm looking forward to checking those out.

00:05:35 This is one of those well-planned, awesome transitions.

00:05:37 Amazing.

00:05:38 So one of the things that you probably don't care about when you're getting started is how

00:05:42 fast your imports run.

00:05:43 You probably don't know what an import is at the beginning.

00:05:46 Exactly.

00:05:46 But import, how long it takes to import your different modules is part of the painful startup

00:05:53 process of any Python application.

00:05:55 And I didn't really know how to debug that, actually.

00:05:58 I never really thought of it before.

00:05:59 But in Python 3.7 coming up, there will be a, there is a dash X import time that allows

00:06:07 you to, there's a flag that you can run that allows you to investigate and profile all of

00:06:14 the time for importing different libraries, which sounds really cool, actually.

00:06:19 Yeah, that is really, really quite cool.

00:06:22 And so you can just basically run it and it'll tell you this library took that long to import.

00:06:28 This other library took that long to import and so on.

00:06:31 And I didn't realize how long some of these actually took to load.

00:06:34 And like any optimization, it's probably never where you really think it's going to be.

00:06:38 It's probably someplace else.

00:06:40 So having it profiled is great.

00:06:42 And, you know, sometimes you just have to import things, but some, some parts of your system

00:06:47 may have too many imports initially and they could be possibly delayed till later.

00:06:53 Yeah, you could definitely possibly do it conditionally, right?

00:06:55 If you only know in certain circumstances that code is going to run.

00:07:00 So you could maybe somehow delay the import until you actually need it.

00:07:04 So a lot of, a lot of cool things, right?

00:07:06 Like, let's say you've got a, like an editor application or something, you'd, all of the

00:07:10 stuff that you'd need to, I don't know, like convert your format.

00:07:14 So that for saving, you don't really need that all the time.

00:07:17 You could load it when you, when somebody's trying to save.

00:07:19 Right.

00:07:20 Wait, wait for him, hit the command as control us, something like that.

00:07:23 That's right.

00:07:23 Yeah.

00:07:23 Yeah.

00:07:23 So very, very cool.

00:07:24 And so this is a feature of Python 3.7 on this is like in the new fancy version.

00:07:29 Yeah, it's a new fancy version, but I, I mean, everybody's probably, if you've got a, an application

00:07:34 working in 3.6 right now, you probably thinking about making sure that it's going to work in

00:07:39 3.7 by now.

00:07:40 And you can probably use the 3.7 to optimize current code anyway.

00:07:44 Right.

00:07:45 Because you want data classes and why not be able to time your imports while you're at it?

00:07:48 Yeah.

00:07:48 Nice.

00:07:50 Yeah.

00:07:50 So this just came out in beta last week and we already talked about that.

00:07:54 So here's one more thing you can do.

00:07:57 If you've got some library that's taken a while to basically import, I think that article

00:08:02 that you mentioned that, you know, John, the conclusion, it says the, so I can reduce my

00:08:08 time for pip and --version from 800 milliseconds to 500 milliseconds.

00:08:12 That still sounds like a long time, but that's actually, you know, that's 60%, 30%, depending

00:08:19 on which angle you measure it.

00:08:20 And not quite, but, but it's a big improvement.

00:08:23 And it's down into the, the pieces where it makes it less noticeable from people.

00:08:27 Yeah.

00:08:28 Quite cool.

00:08:28 All right.

00:08:30 So before we move on the next one, let me tell you about roll bar.

00:08:33 So roll bar is the thing you integrate into your web applications, whether you're using Django,

00:08:38 Flask, Pyramid, super easy to integrate.

00:08:42 Basically to integrate it into Pyramid, you just put a few things in your config file and

00:08:46 that's it.

00:08:47 I don't even think you have to touch your code unless you want to directly interact with the

00:08:51 roll bar API, which you often don't have to do.

00:08:54 And you can even get it for JavaScript and some other frameworks as well.

00:08:58 And it'll basically be there when your app is running.

00:09:01 Anytime there's an error, it'll capture all the details of stack trace, the URL, all the

00:09:06 request and response values, even the user who is logged in potentially, it'll send that

00:09:12 off and give you notification over in Slack or email or all sorts of places.

00:09:17 So you want to make sure you're not missing errors in your web app.

00:09:20 And if you're not monitoring it, I bet you there are errors in your web app somewhere you don't

00:09:24 know about.

00:09:24 Check them out at pythonbytes.fm/roll bar.

00:09:28 Brian, speaking of web apps, this one we're going to talk about now is it's not the kind

00:09:34 of web app you might have originally thought of.

00:09:36 I didn't mention it there in that roll bar ad.

00:09:38 Anpilar?

00:09:39 I'm really sure about the pronunciation.

00:09:41 You want to take a shot at it?

00:09:43 Anpilar?

00:09:44 I don't know.

00:09:44 It's kind of fun to try.

00:09:46 It's fun to try.

00:09:47 And I think the an is kind of like Angular.

00:09:49 The py, obviously, Python.

00:09:52 The lar, what a great thing to put it in a word.

00:09:55 But what it is, is it's a web framework for building front end, rich client spa type applications.

00:10:03 So it's a Python framework.

00:10:05 You write in it.

00:10:07 It runs on the client side in the browser.

00:10:10 Isn't that interesting?

00:10:11 Yeah.

00:10:11 So it says basically create web apps with the elegance, simplicity, and full power of Python.

00:10:17 And you get these sort of reusable components.

00:10:19 It's very much like AngularJS in that regard that has like a routing engine.

00:10:23 So you don't actually navigate, but you move around the different views of the app.

00:10:27 You write all the stuff in Python.

00:10:29 It's pretty interesting.

00:10:31 So it's got a reactive programming model.

00:10:34 It has promises, standard Python formatting, reusable components, the scope styling, integrated

00:10:40 routing engine.

00:10:41 That's the navigation stuff I was talking about.

00:10:43 So it's pretty cool, actually.

00:10:47 I don't know what the underlying technology is for making the Python run.

00:10:51 If they've built their own thing, if they're using something like Brython or Sculpt or something

00:10:55 else.

00:10:55 But yeah, it's pretty amazing.

00:10:57 It sounds like it'd be fun to play with.

00:10:59 Yeah, it's definitely fun to play with.

00:11:00 The one caveat is if you're going to embed Python compiled JavaScript in a JavaScript file and

00:11:09 download it, that JavaScript file may be bigger than standard JavaScript file sizes.

00:11:15 So I checked in, I think the minified version is 3.6 megs, which is...

00:11:20 A little large.

00:11:22 It depends on your use case.

00:11:24 So imagine this.

00:11:25 On one hand, if you're building a really high traffic website, people use it for mobile or low

00:11:32 speed connections, it's totally unacceptable to put your front end in this.

00:11:36 However, if what you're doing is you're building Electron.js apps, you're building Ionic and

00:11:44 Cordova apps, these sort of offline, like here are my files, run them as if it was a web

00:11:49 app.

00:11:49 It doesn't matter if the thing is big, right?

00:11:51 It just starts up off the local disk anyway.

00:11:53 Yeah, that's true.

00:11:54 That's a great use case.

00:11:55 Right.

00:11:56 Like VS Code, for example, is Electron.js.

00:11:59 Ionic is a bunch of cool stuff.

00:12:01 And in that circumstance, like you just, who cares if, you know, your uncompressed shipping

00:12:06 size is another three megs.

00:12:07 It's already a hundred megs.

00:12:08 Like what's a hundred versus a hundred three?

00:12:10 Nobody cares.

00:12:10 Right.

00:12:11 Something like that.

00:12:11 So for those situations where it's kind of this offline rich client web experience, it's

00:12:18 cool.

00:12:18 I like it.

00:12:19 Oh, that's cool.

00:12:19 That's a good idea.

00:12:20 Yeah.

00:12:20 So there's some nice ways to play around with it.

00:12:22 They got some little demo apps.

00:12:23 So like down the bottom, there's like a little grid of buttons, like eight or 10 or something.

00:12:28 You can click around there and play with it a bit.

00:12:30 So yeah, it's pretty cool.

00:12:32 If you want to give this a try and your use case makes a lot of sense, right?

00:12:36 Like it's somehow getting that JavaScript there is not a big problem.

00:12:40 Definitely check it out.

00:12:42 It's cool.

00:12:42 The other thing to point out is WebAssembly is coming.

00:12:45 WebAssembly is going to be pretty sweet.

00:12:47 If somebody can get a really nice version of Python in WebAssembly, that may make a big

00:12:54 difference on a lot of fronts.

00:12:55 Do you know WebAssembly?

00:12:56 I do not.

00:12:57 So WebAssembly basically is a new standard for the browsers.

00:13:02 I think it's already partially supported where instead of shipping JavaScript, you ship binary

00:13:07 executable equivalents, right?

00:13:10 So you've got the problem of running.

00:13:14 You download a text version of a big thing and then you parse it.

00:13:18 You do all the sort of runtime stuff to get it executable.

00:13:21 And then you execute it, right?

00:13:23 You get into like bytecode or whatever JavaScript does.

00:13:25 So I think WebAssembly is more or less like we're going to get it to that last pre-processed

00:13:31 step of what JavaScript would do.

00:13:33 And we'll give it to you as a binary thing, sort of like shipping PYC files in Python.

00:13:37 I think it actually has more effect.

00:13:39 So it should be a lot smaller because it's small and tokenized and stuff, but it should

00:13:42 also start up quicker.

00:13:43 So who knows?

00:13:44 Maybe WebAssembly makes this better for somebody sneaking JavaScript or Python through the JavaScript

00:13:50 straw.

00:13:51 random binaries off of any website on the internet.

00:13:54 What could go wrong?

00:13:55 I think it's only the equivalent of running JavaScript.

00:13:57 It's not like fully executing data.

00:14:00 So I think it's no worse than JavaScript, but yeah.

00:14:04 Okay.

00:14:05 I don't know more than that.

00:14:06 We'll have to keep track.

00:14:07 I think we should round out this entire, the rest of this episode on just Python 3 stuff.

00:14:11 What do you think?

00:14:12 I don't think on this podcast we've pushed the migration to Python 3 enough.

00:14:16 No, we have talked about how bad legacy Python is.

00:14:19 Go ahead.

00:14:21 Yeah.

00:14:21 You go first on this Python thing.

00:14:22 And this is actually just a little GitHub repo that is called Migrating to Python 3 with

00:14:29 Pleasure, a short guide on features of Python 3 for data scientists.

00:14:33 And it's a pretty quick read, but it's pretty thorough and actually gets pretty exciting.

00:14:39 It starts off with a quick tutorial with examples of how to use Pathlib so that you can easily,

00:14:48 if people haven't played with it yet, you can, you know, define paths as just like these little, just strings with division marks like you would

00:14:55 in a browser.

00:14:56 It's kind of crazy, right?

00:14:58 Pathlib.

00:14:58 It's like you put the slashes outside the strings and it, the division operator becomes like

00:15:04 OS.path.join type of things.

00:15:06 Yeah, definitely.

00:15:07 Yeah.

00:15:07 Yeah.

00:15:07 Yeah.

00:15:07 Definitely.

00:15:07 And it's, but it works great and it makes your code really readable.

00:15:10 So there's that.

00:15:11 And then it goes on to talk about type hinting and how cool it works with thing editors like

00:15:16 PyCharm and stuff to help you see what you're doing.

00:15:19 Then one of the things that I did not, hadn't heard of before I came about a few things in

00:15:24 here is the, how to enforce, types at runtime.

00:15:29 I didn't know you could do that, but there's a, there's a package called enforce that you

00:15:33 can, put a decorator on a particular function and it'll throw an error.

00:15:38 If somebody tries to put it past in the wrong type.

00:15:41 I had never heard about that either.

00:15:42 That is really awesome.

00:15:43 I don't know if I necessarily want it all the time, but it could be fun to turn on, especially

00:15:49 if you're like doing a refactoring or you're like doing some major upgrades.

00:15:53 You're like, all right, let's turn this on and just see if it's doing what we think it's

00:15:57 doing.

00:15:57 Right.

00:15:58 Yeah.

00:15:58 Especially during like a testing phase or something.

00:16:00 It'd be fun.

00:16:01 Yeah.

00:16:01 And then this kind of hurt my head.

00:16:03 There was a, some function annotations for units.

00:16:07 There's a example is how AstroPy does it.

00:16:10 And it's, things like you can attach to variables like units, like, like kilograms

00:16:16 or something like that, which that just seems cool.

00:16:20 I got to play with that a little bit more.

00:16:22 Oh, it looks like, which one is it?

00:16:25 There's a library.

00:16:25 I think it's called pint.

00:16:26 Oh, right.

00:16:27 Yeah.

00:16:27 Like, right.

00:16:28 That lets you like multiply, say like, you know, this thing time a foot, that thing times an

00:16:34 inch and then add them together.

00:16:35 Yeah.

00:16:36 Yeah.

00:16:36 That's it.

00:16:37 And this looks like a little bit of the same type of story, but you might multiply by like

00:16:43 a kilogram or a degree and sort of the physicist, astrophysicist equivalent of that.

00:16:47 That's cool.

00:16:48 Like in their example, they show, dividing a meter in speeds in, I don't know what it is,

00:16:54 but, coming up with like, terahertz.

00:16:57 We didn't start with terahertz.

00:16:58 You started with something else.

00:16:59 Okay.

00:17:00 Now I'm, I'm just making up words now, I think.

00:17:02 So pretty cool.

00:17:04 Pretty cool.

00:17:05 You also have a matrix multiplication in there.

00:17:07 Yeah.

00:17:07 Yeah.

00:17:07 Matrix, which I don't use a lot, but it's very cool for people that need matrix multiplication.

00:17:11 Matrix multiplication is interesting.

00:17:13 It's one of these things.

00:17:14 It was, it's held up as one of the best examples of the whole PEP process and bringing a new feature

00:17:21 into the language.

00:17:22 So the, from the time the PEP was proposed until it was, done, it was like eight days.

00:17:28 Wow.

00:17:28 And it has to do with like how well the people who proposed the idea had like already done

00:17:33 like sort of market research amongst all the scientific computation people.

00:17:37 And, they had a really clear vision and a strong sort of displayed need.

00:17:42 And so it's really interesting that that's in here as well.

00:17:44 And globbing with star star, which is, something I hadn't used since, Oh, one of the Z shell does that.

00:17:52 So like you can, do recursive subdirectories with, two asterisks and, that's kind

00:17:59 of neat.

00:17:59 And then went through a whole bunch of other stuff like f-strings and floating division

00:18:03 now is real, real division now.

00:18:05 And the rest of it is things that if you've been living Python three for a while, you just

00:18:11 kind of take this stuff for granted.

00:18:12 But, it's a very, a fairly complete list of, it'd be good if you're in a science community

00:18:18 and you're trying to convince somebody to switch to Python three, this article would be a

00:18:22 good one.

00:18:22 Yeah, definitely a good one.

00:18:23 It sounds really interesting.

00:18:25 Like it really brings up, these are the benefits that you get from making this move rather than

00:18:30 just the stick of it's going to be expired or, you know, go out of maintenance in 2020.

00:18:36 It's like, you know, here's all the good stuff that you're missing that you don't even know

00:18:39 you're missing.

00:18:39 Yeah.

00:18:40 And it includes, I didn't even list it, but it includes like a dictionary ordering and

00:18:45 stuff, which, I love that.

00:18:47 Right.

00:18:48 Yeah.

00:18:48 That is really, really nice.

00:18:49 I think enforce might be the big news out of that.

00:18:52 That's I hadn't even heard of that.

00:18:53 That's pretty cool.

00:18:54 Yeah.

00:18:54 I'm definitely going to go play with that tomorrow.

00:18:56 So that's neat.

00:18:57 Cool.

00:18:57 So let's talk about moving to Python three.

00:18:59 Okay.

00:19:00 So I want to give you the new topic.

00:19:02 Exactly.

00:19:03 I want to give you something like this, but from a web development perspective, it's pretty

00:19:08 interesting.

00:19:08 There's this place called ticket EA.com ticket.

00:19:12 Yeah.

00:19:12 I don't know.

00:19:13 Ticket EA.com.

00:19:14 That's what I'm going to go with.

00:19:15 And they said how we migrated ticket EA.com to Python three in two weeks.

00:19:20 Wow.

00:19:20 So it's apparently a pretty big project that they have running.

00:19:24 It runs their whole sort of fulfillment e-commerce type thing and so on.

00:19:27 And you'll hear the word Aphrodite.

00:19:29 That's kind of their, their code name word for their project.

00:19:33 So they do a bunch of stuff with Docker and their first step was to just say, okay, we're

00:19:38 going to change the Aphrodite's base Docker image to Python colon 3.6 slim from, I don't

00:19:45 know, what's it?

00:19:46 Two seven fat.

00:19:47 I don't know.

00:19:47 Something like this.

00:19:48 And they said when they did that, you know, they just tried to run their tests and a bunch

00:19:52 of stuff went crazy.

00:19:53 Like outdated libraries didn't work.

00:19:55 Base string had to be moved to string.

00:19:57 URL parse had to move to URL.

00:19:59 Lib dot URL pars, other stuff like that.

00:20:02 Right.

00:20:03 So said, all right.

00:20:04 Well, the first thing we're going to do is going to run two to three.

00:20:06 Right.

00:20:07 So this is the utility that can manually fix some of those things.

00:20:10 So like every time you see base string, that's STR.

00:20:12 Now we're just going to do that for example.

00:20:14 Right.

00:20:15 So they ran that against it.

00:20:16 And they also look for patterns like, hey, we're using map reduce or map type functions

00:20:22 and so on, or filtering functions plus lambdas to make it work.

00:20:25 And these could really just be list comprehensions.

00:20:27 Right.

00:20:27 So they kind of upgraded the, they took better advantage of like the new language features

00:20:32 that were then available to them.

00:20:34 So that's pretty cool.

00:20:35 And then they said, okay, well, that's the low hanging fruit.

00:20:38 Now what?

00:20:39 And they had to run their tests, you know, sort of find some more problems.

00:20:44 They took the opportunity to upgrade, at least get ready to upgrade to Django too, because

00:20:49 they are running on Django.

00:20:50 So that's cool.

00:20:51 They said a couple of lessons we learned code coverage was 75% or 70%, you know, the more

00:20:58 tests, the better.

00:20:59 It's good to keep the Python three branch up to date with the master branch until you switch.

00:21:04 That's one way of doing it.

00:21:05 Like remember the Instagram keynote at PyCon 2017.

00:21:08 Yeah.

00:21:09 That is a whole nother level of upgrading to Python three, right?

00:21:12 They upgraded all of Instagram to Python three without branching, which is,

00:21:20 yeah, at all.

00:21:21 That's, that's crazy.

00:21:22 And they were checking in all the time.

00:21:24 So that's another level you can check out that as well.

00:21:26 But this is, I suspect this is more common that you kind of branch.

00:21:29 You're like, are we going to try to keep these going?

00:21:31 It's a good story to see somebody doing it the other way.

00:21:34 Yeah, for sure.

00:21:34 And so they, they ran flake eight against all the stuff to make sure they're, everything

00:21:38 was working right.

00:21:39 So I don't know.

00:21:40 They said they about, they had to modify around 200 files to make flake eight happy again with

00:21:45 Python three, but yeah, all good.

00:21:47 And then the final thing I thought was really cool is they're running on Google app engine.

00:21:50 I don't do, I don't do anything with Google app engine, but one of the features that these

00:21:54 platforms as a service have, that's really pretty cool.

00:21:57 It's something called traffic splitting.

00:21:58 So there's basically like a little slider and you say, this version of the app is going to

00:22:04 get 60% of the traffic.

00:22:05 This version of the app is going to get 40% of the traffic.

00:22:08 And you can add in different versions.

00:22:09 So you can say, well, let's just send like 1% of our traffic over towards these new versions

00:22:15 and see what happens.

00:22:16 So you don't completely take the site down.

00:22:19 You just may break it for a very small group.

00:22:22 And you could even do that.

00:22:24 I think by like IP address and stuff.

00:22:26 So you say only the people that work here get the new version.

00:22:29 People on the outside, they get the old version and slowly migrated along.

00:22:33 And so they call these canary releases, which I think is actually a pretty cool way to think

00:22:37 of it.

00:22:37 So there's, there's some neat lessons in here.

00:22:39 This is, but I didn't know Google app engine did that.

00:22:43 That's neat.

00:22:43 Yeah, I didn't either, but I definitely like it a little bit better now.

00:22:47 That's cool.

00:22:47 I mean, I don't dislike it, but that's definitely a feature that would draw me into it.

00:22:51 All right.

00:22:51 So I think, I think these are really interesting.

00:22:53 Yours was on data science.

00:22:54 Mine is a sort of web story and they both are compelling sort of for moving to Python 3.

00:23:00 Things that you get and the steps to get there.

00:23:02 Definitely.

00:23:02 And we'll keep pounding on it until Python 2.7 is gone.

00:23:05 That's right.

00:23:06 We will see legacy Python fade away.

00:23:09 So you have a webcast coming up, don't you?

00:23:11 Yeah, we brought it up last week, but I just wanted to remind people that I'm doing a webcast on pytest and PyCharm with

00:23:19 the PyCharm guys that's coming up on February 22nd.

00:23:23 So we'll leave a link in the show notes and go register.

00:23:26 Hope to see everybody there.

00:23:28 Yeah, they should definitely go register for it.

00:23:29 There's a couple reasons.

00:23:30 One, Brian's going to be there.

00:23:32 It'll be awesome.

00:23:32 Two, it's free.

00:23:34 So you'll get what you pay for, for sure.

00:23:36 I promise you that.

00:23:37 Unless you count your time, then I don't know.

00:23:40 And then you also potentially, if you can't make it, you'll get the recording notification.

00:23:44 If you register and you don't show up, then you'll get a message say, you didn't show up, but hey, you still get it.

00:23:49 People should check out.

00:23:50 There's a whole bunch of old webinars there.

00:23:52 And it's not just about trying to push PyCharm stuff.

00:23:56 It's just people in the community showing some interesting things to do.

00:24:00 So it's a good thing that they're doing.

00:24:03 I had this project that I wanted to play with.

00:24:05 Not so much to build in the app, but to play with the foundational bits of the app.

00:24:10 So I have a program that sort of demonstrates using cookie cutter from an API mode.

00:24:17 So cookie cutter, normally you type cookie cutter space, some template name, and then stuff happens.

00:24:23 And then you have a project, like a starter project, a scaffold type thing for all sorts of various things.

00:24:29 So there's also an API for cookie cutter.

00:24:32 And so you can put like fancy front ends, or if you've got any kind of application that needs to generate like a sub project,

00:24:39 that's going to be messed with by somebody else.

00:24:41 If you're doing like developer tools or you're building something for your company,

00:24:44 you're like, we're always going to start this way.

00:24:46 So here's the CLI and it asks you the questions.

00:24:48 And then boom, you've got this kind of standard starter app that's integrated into your infrastructure.

00:24:53 So these are all good uses.

00:24:56 So I said, all right, well, I want to play with this project called GUI.

00:24:58 And we talked about GUI a while ago, G-O-O-E-Y.

00:25:01 And so I took my little cookie cutter app that would work with all the pyramid-based cookie cutter templates

00:25:08 and put a friendly front end on the front of that.

00:25:12 And then I put a GUI on top of that CLI app.

00:25:15 Nice.

00:25:16 Yeah.

00:25:16 So it's really fun.

00:25:17 And it really took like 20 minutes to get it 99% working more on that a sec.

00:25:23 So I put a link to the GitHub repository that has that up there.

00:25:27 So people can download it.

00:25:28 You just clone it, create a virtual environment, pip install dash R, the requirements file,

00:25:34 and then you can just run the program.

00:25:35 And you have a really sweet GUI.

00:25:37 And it's based on WX Python Phoenix and GUI.

00:25:40 It's quite cool.

00:25:41 The one little hangup is I'm having a problem getting it to run if I package it.

00:25:48 So I could literally hand out a .app or .exe.

00:25:51 There's some kind of hangup, and I think it's a bug with GUI.

00:25:54 I can't tell entirely, but maybe by the time you hear this, I have it figured out.

00:25:57 But we'll see.

00:25:58 All right.

00:25:59 Either way, it's a great example.

00:26:00 You know, if you can forget the packaging, it's actually an awesome example of a really simple Python GUI app that looks professional.

00:26:06 If you can forget packaging, Python is awesome.

00:26:08 That's a good thing.

00:26:10 The packaging works fine.

00:26:11 GUI works fine.

00:26:12 A packaged GUI app sometimes works fine.

00:26:15 Yeah, okay.

00:26:15 It's the intersection of all these things that are cool.

00:26:19 There's a small bruise on the shininess of it.

00:26:24 But it's all good.

00:26:25 It's all good.

00:26:25 So check that out.

00:26:26 There's tons of people working on all these features to make it even more seamless in the future.

00:26:31 Yeah, absolutely.

00:26:32 Absolutely.

00:26:32 Well, good job.

00:26:33 Cool.

00:26:33 Thanks so much.

00:26:34 Brian, thanks for sharing everything with all of our listeners and with me.

00:26:38 Thank you.

00:26:38 And we'll talk to you next week.

00:26:40 You bet.

00:26:40 Bye.

00:26:42 Thank you for listening to Python Bytes.

00:26:43 Follow the show on Twitter via at Python Bytes.

00:26:46 That's Python Bytes as in B-Y-T-E-S.

00:26:49 And get the full show notes at pythonbytes.fm.

00:26:52 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:57 We're always on the lookout for sharing something cool.

00:26:59 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:27:03 Thank you for listening and sharing this podcast with your friends and colleagues.

