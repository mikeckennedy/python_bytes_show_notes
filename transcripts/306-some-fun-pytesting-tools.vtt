
00:00:00.000 --> 00:00:01.960
- Hello and welcome to Python Bytes


00:00:01.960 --> 00:00:03.740
where we deliver Python news and headlines


00:00:03.740 --> 00:00:05.680
directly to your earbuds.


00:00:05.680 --> 00:00:10.680
This is episode 306, recorded October 18th, 2022.


00:00:10.680 --> 00:00:12.480
I'm Michael Kennedy.


00:00:12.480 --> 00:00:14.100
- And I'm Brian Okken.


00:00:14.100 --> 00:00:16.320
- Very exciting to have a whole bunch of things


00:00:16.320 --> 00:00:17.360
to share this week.


00:00:17.360 --> 00:00:20.120
Also want to say thank you to Microsoft for Startups


00:00:20.120 --> 00:00:23.020
for sponsoring yet another episode of this one.


00:00:23.020 --> 00:00:28.020
Brian, we've had a very long dry summer here in Oregon


00:00:28.320 --> 00:00:30.760
And I was afraid that we would have terrible fires


00:00:30.760 --> 00:00:33.640
and it'd be all smoky and all sorts of badness.


00:00:33.640 --> 00:00:35.160
And there've been plenty of fires in the West,


00:00:35.160 --> 00:00:37.240
but not really around here for us this summer.


00:00:37.240 --> 00:00:40.560
We kind of dodged the bullet until like today.


00:00:40.560 --> 00:00:42.080
- It's a little smoky today.


00:00:42.080 --> 00:00:44.840
- We smoke, go inside.


00:00:44.840 --> 00:00:45.680
- Yeah.


00:00:45.680 --> 00:00:47.480
- I thought we dodged it, sadly, no.


00:00:47.480 --> 00:00:49.480
- So I think it's affecting my voice a little bit.


00:00:49.480 --> 00:00:51.080
So apologies for that.


00:00:51.080 --> 00:00:52.680
- We'll put that filter on you


00:00:52.680 --> 00:00:54.320
and we'll make you sound like someone else


00:00:54.320 --> 00:00:55.600
and you'll be fine.


00:00:55.600 --> 00:00:57.040
- Yeah.


00:00:57.040 --> 00:01:00.120
- Yeah, it's also affecting me, so who knows?


00:01:00.120 --> 00:01:03.080
But anyway, we'll make our way through.


00:01:03.080 --> 00:01:06.720
We will fight through the fire to bring you the Python news.


00:01:06.720 --> 00:01:09.480
Hopefully they get that actually put out soon.


00:01:09.480 --> 00:01:10.760
- Like the post office.


00:01:10.760 --> 00:01:12.080
- Yeah, let's kick it off.


00:01:12.080 --> 00:01:13.480
What's your first thing?


00:01:13.480 --> 00:01:15.560
- So I've got, let's put it up.


00:01:15.560 --> 00:01:18.640
So I've got, add to stream.


00:01:18.640 --> 00:01:20.680
I've got awesome pytest speedup.


00:01:20.680 --> 00:01:23.000
So this is awesome.


00:01:23.000 --> 00:01:26.680
Yeah, so actually, some people may have noticed


00:01:26.680 --> 00:01:29.640
the test and code is not really going on lately.


00:01:29.640 --> 00:01:32.560
One of the things that makes it easier for me is when I


00:01:32.560 --> 00:01:34.200
SQL testing related articles,


00:01:34.200 --> 00:01:35.520
I don't have a decision anymore.


00:01:35.520 --> 00:01:37.440
I can just say, "Hey, it's going to go here."


00:01:37.440 --> 00:01:41.560
Now, testing code will eventually pick up something again,


00:01:41.560 --> 00:01:42.840
but I'm not sure when.


00:01:42.840 --> 00:01:45.760
For now, if I find something cool like this article,


00:01:45.760 --> 00:01:46.840
I'll bring it up here.


00:01:46.840 --> 00:01:49.160
>> I think I make you show up every week.


00:01:49.160 --> 00:01:51.040
Talk about fun stuff anyway.


00:01:51.040 --> 00:01:54.480
>> This is a GitHub repo,


00:01:54.480 --> 00:02:03.480
And we're seeing kind of seeing more of this of people writing instead of blogging, they just write a like a readme as a repo.


00:02:03.480 --> 00:02:08.360
I know this is such a weird trend. I totally get it. And it's good, but it's also weird.


00:02:08.360 --> 00:02:16.600
But it's kind of neat that people can update it. So they can just keep it up. And you can see people get a PR to your blog posts. That's not normally how it goes.


00:02:16.600 --> 00:02:23.160
Yeah, not sure. But it's probably harder to throw Google Analytics at it, right?


00:02:23.160 --> 00:02:26.560
- Oh yeah, we'll see like whether you should do that or not.


00:02:26.560 --> 00:02:32.240
- So anyway, so this comes to us from Nate Zupan,


00:02:32.240 --> 00:02:33.340
cool name by the way.


00:02:33.340 --> 00:02:38.360
And he also has, we'll include a link in the show notes


00:02:38.360 --> 00:02:43.360
to a talk he gave at a Plone in Namur 2022.


00:02:43.360 --> 00:02:45.340
So just recently.


00:02:45.340 --> 00:02:49.900
Anyway, so he goes through best practices


00:02:49.900 --> 00:02:52.400
to speed up your pytest suite.


00:02:52.400 --> 00:02:56.000
And he's just kind of lists them all at the top here,


00:02:56.000 --> 00:02:56.840
which is nice.


00:02:56.840 --> 00:02:59.400
Hardware first.


00:02:59.400 --> 00:03:01.580
Well, first of all, when he goes into the discussion,


00:03:01.580 --> 00:03:02.920
he talks about measuring first.


00:03:02.920 --> 00:03:05.440
So before you start speeding anything up,


00:03:05.440 --> 00:03:07.600
you should measure because you want to know


00:03:07.600 --> 00:03:10.160
if your changes had any effect.


00:03:10.160 --> 00:03:13.680
And if it's making support a little bit weirder,


00:03:13.680 --> 00:03:14.960
then you don't want to make the change


00:03:14.960 --> 00:03:16.200
if it's only marginal.


00:03:16.200 --> 00:03:19.360
So I like that he's talking about that,


00:03:19.360 --> 00:03:21.680
of like each step of the way here,


00:03:21.680 --> 00:03:23.600
measure to make sure it makes a difference.


00:03:23.600 --> 00:03:24.440
- Right.


00:03:24.440 --> 00:03:26.480
- So first off, and I'm glad he brought this up,


00:03:26.480 --> 00:03:29.180
is check your hardware.


00:03:29.180 --> 00:03:33.920
Make sure you've got the fast hardware if you have it.


00:03:33.920 --> 00:03:37.360
So one of the, and I've noticed this before as well,


00:03:37.360 --> 00:03:39.800
is, so here we go, measure first.


00:03:39.800 --> 00:03:44.720
But some CI systems allow you to have self-hosted runners,


00:03:44.720 --> 00:03:46.440
and it's something to consider.


00:03:46.440 --> 00:03:51.200
Whether your CI is in the cloud


00:03:51.200 --> 00:03:54.340
or you've got virtual, like a server


00:03:54.340 --> 00:03:56.540
with some virtual machines around


00:03:56.540 --> 00:03:58.500
to be able to run your test runners,


00:03:58.500 --> 00:04:00.980
they're not going to be as fast as physical hardware


00:04:00.980 --> 00:04:03.700
if you've got some hardware lying around that you can use.


00:04:03.700 --> 00:04:07.060
So that's something to consider, to throw hardware at it.


00:04:07.060 --> 00:04:08.580
And then test collection time.


00:04:08.580 --> 00:04:13.580
Some of the problems with the speed of pytest is using,


00:04:13.580 --> 00:04:15.860
if you've got, if you run it


00:04:15.860 --> 00:04:17.660
from the top level directory of a project


00:04:17.660 --> 00:04:19.140
and you've got tons of documentation


00:04:19.140 --> 00:04:21.840
tons of source code, it's going to look everywhere.


00:04:21.840 --> 00:04:23.640
So don't let it look in those places.


00:04:23.640 --> 00:04:25.680
So there's there's ways to turn that off.


00:04:25.680 --> 00:04:29.880
So with no recursive and giving it the the directory.


00:04:29.880 --> 00:04:32.540
I also wanted to point out he didn't talk about this in the article,


00:04:32.540 --> 00:04:37.240
but I want to point out that something to use is, oh, it went away.


00:04:37.240 --> 00:04:41.840
Test paths. So use test paths to say specifically.


00:04:41.840 --> 00:04:45.920
So the no recursive says essentially avoid these directories.


00:04:45.920 --> 00:04:49.020
But test paths pretty much says this is where the tests are.


00:04:49.020 --> 00:04:51.540
look here. so those are good.


00:04:51.540 --> 00:04:55.380
Nice. Yeah. I've done that before on some projects,


00:04:55.380 --> 00:04:59.140
like on the Talk Python Training website where there's got a ton of text files


00:04:59.140 --> 00:05:00.300
and things laying around.


00:05:00.300 --> 00:05:04.220
And I've done certain things like that to exclude, you know,


00:05:04.220 --> 00:05:06.300
PI test and PI charm and other,


00:05:06.300 --> 00:05:10.500
other different things to look there in those places where like there's no code,


00:05:10.500 --> 00:05:13.860
but there's a ton of stuff here and you're going to go hunting through it. Yeah.


00:05:13.860 --> 00:05:18.700
So like I really sped up the startup time for a pyramid scanning for


00:05:18.720 --> 00:05:21.840
files that have route definitions in them, right?


00:05:21.840 --> 00:05:24.120
For URL endpoints, because it would look through everything.


00:05:24.120 --> 00:05:26.600
Apparently it doesn't matter, at least looking for files through


00:05:26.600 --> 00:05:28.120
directories with tons of stuff.


00:05:28.120 --> 00:05:31.880
And, and this is like, it makes a big difference if you have a large project.


00:05:31.880 --> 00:05:32.400
For sure.


00:05:32.400 --> 00:05:32.800
Yeah.


00:05:32.800 --> 00:05:34.000
It's significant.


00:05:34.000 --> 00:05:38.040
Um, so it was something to think about, and documentation too.


00:05:38.040 --> 00:05:40.600
You don't, unless you're really testing your documentation, you


00:05:40.600 --> 00:05:41.880
don't need to look there.


00:05:41.880 --> 00:05:45.320
So, hardware fast, make collection fast.


00:05:45.800 --> 00:05:48.400
This one is something I haven't used before,


00:05:48.400 --> 00:05:49.920
but I'll play with it.


00:05:49.920 --> 00:05:53.320
Python don't write byte code, a environmental flag.


00:05:53.320 --> 00:05:57.520
I guess it comments that it might not make


00:05:57.520 --> 00:05:59.000
a big difference for you, but it might.


00:05:59.000 --> 00:06:02.720
So, you know, I don't know.


00:06:02.720 --> 00:06:05.640
So Python writes the byte code normally,


00:06:05.640 --> 00:06:08.280
and maybe it'd be faster if you didn't do that


00:06:08.280 --> 00:06:10.680
during tests, might as well try.


00:06:10.680 --> 00:06:13.880
There's a way to disable pytest plugins


00:06:14.920 --> 00:06:18.600
to, yeah, let's just go built-in pytest plugins.


00:06:18.600 --> 00:06:22.280
You can say no, like no nos, or no doc tests


00:06:22.280 --> 00:06:23.760
if you're running those.


00:06:23.760 --> 00:06:25.960
I haven't noticed that it speeds it up a lot,


00:06:25.960 --> 00:06:28.360
but it's, again, it's something to try.


00:06:28.360 --> 00:06:31.120
And then a subset of tests.


00:06:31.120 --> 00:06:36.120
So this is especially important if you're in a TDD style.


00:06:36.120 --> 00:06:40.320
And one of the things that I think some people forget is


00:06:40.320 --> 00:06:42.800
your test, if you've got your tests organized well,


00:06:42.800 --> 00:06:45.160
you should be able to run a subset anyway,


00:06:45.160 --> 00:06:47.480
'cause you've got like the feature you're working on


00:06:47.480 --> 00:06:49.840
is in a sub-directory of everything else.


00:06:49.840 --> 00:06:52.240
And just run those when you're working on that feature


00:06:52.240 --> 00:06:54.640
and then you don't run the whole suite.


00:06:54.640 --> 00:06:55.520
There's a discussion,


00:06:55.520 --> 00:06:58.480
and this goes along with the unit tests mostly,


00:06:58.480 --> 00:07:01.520
but disable networking,


00:07:01.520 --> 00:07:03.600
unless you're intending to have your code


00:07:03.600 --> 00:07:07.000
using network connections,


00:07:07.000 --> 00:07:11.380
you can disable that for a set of tests or the whole suite.


00:07:11.380 --> 00:07:14.960
And then also disaccess, trying to limit that.


00:07:14.960 --> 00:07:19.420
And he includes a couple ways to ensure those.


00:07:19.420 --> 00:07:22.220
And then a really good discussion,


00:07:22.220 --> 00:07:25.240
a fairly chunky discussion on database access


00:07:25.240 --> 00:07:26.980
and optimization to databases,


00:07:26.980 --> 00:07:31.660
including discussion around rollback.


00:07:31.660 --> 00:07:35.220
And there was something else that I hadn't seen before.


00:07:35.220 --> 00:07:37.140
Let me see if I can remember.


00:07:37.140 --> 00:07:38.260
- Yeah, there's some interesting things.


00:07:38.260 --> 00:07:39.820
I think, I know you've spoken about it


00:07:39.820 --> 00:07:47.820
your pytest course about using fixtures for setup of those common type things, right?


00:07:47.820 --> 00:07:50.840
>> One of the things I'm not familiar with is truncate.


00:07:50.840 --> 00:07:52.920
Have you used the database truncate before?


00:07:52.920 --> 00:07:53.740
>> No.


00:07:53.740 --> 00:07:57.880
>> Apparently, that allows you to set the whole database up,


00:07:57.880 --> 00:07:59.560
but delete all the stuff out of it,


00:07:59.560 --> 00:08:02.000
like to empty the tables.


00:08:02.000 --> 00:08:08.920
If a big chunk of the work of setting up data is


00:08:08.920 --> 00:08:10.820
setting, getting all the tables correct,


00:08:10.820 --> 00:08:13.220
then truncate might be a good way to clean them all out


00:08:13.220 --> 00:08:15.260
and then refill them if you need to.


00:08:15.260 --> 00:08:17.320
But also, yeah, like you said,


00:08:17.320 --> 00:08:21.500
paying attention to fixtures, it's really good.


00:08:21.500 --> 00:08:23.100
And then the last thing he brings up


00:08:23.100 --> 00:08:24.280
is just run them in parallel.


00:08:24.280 --> 00:08:28.980
By default, pytest runs single, each test one at a time.


00:08:28.980 --> 00:08:31.480
And if you've got a code base that you're testing


00:08:31.480 --> 00:08:33.740
that can allow, like you're not testing


00:08:33.740 --> 00:08:36.180
a hardware resource or something,


00:08:36.180 --> 00:08:37.980
that you can allow parallel,


00:08:37.980 --> 00:08:41.100
go ahead and turn those on, turn on the use X dist


00:08:41.100 --> 00:08:43.500
and turn or something else and run them in parallel.


00:08:43.500 --> 00:08:47.380
So a really good list and I'm glad he put it together.


00:08:47.380 --> 00:08:48.740
Also very entertaining talk.


00:08:48.740 --> 00:08:51.760
So give it, give this talk a look.


00:08:51.760 --> 00:08:52.800
- Yeah, absolutely.


00:08:52.800 --> 00:08:55.260
Brandon out in the audience says,


00:08:55.260 --> 00:08:56.660
people at work have been trying to convince me


00:08:56.660 --> 00:08:59.060
that tests should live next to the file they are testing


00:08:59.060 --> 00:09:01.620
rather than in a test directory.


00:09:01.620 --> 00:09:03.220
You know, I created a test directory


00:09:03.220 --> 00:09:05.100
that mirrors my app folder structure


00:09:05.100 --> 00:09:06.060
with my tests in there.


00:09:06.060 --> 00:09:07.220
Any opinions?


00:09:07.220 --> 00:09:10.460
I don't like that, but--


00:09:10.460 --> 00:09:12.020
- Neither do I, honestly.


00:09:12.020 --> 00:09:13.700
- If you like it, I guess, okay.


00:09:13.700 --> 00:09:16.420
I've heard that before, but I haven't heard people


00:09:16.420 --> 00:09:18.380
in Python recommending that very often.


00:09:18.380 --> 00:09:21.940
- Yeah, for me, I feel, I understand why,


00:09:21.940 --> 00:09:24.660
like, okay, here's the code, here's the test.


00:09:24.660 --> 00:09:28.180
Maybe the test can be exactly isolated


00:09:28.180 --> 00:09:31.780
to what is only in that file, but sometime,


00:09:31.780 --> 00:09:33.940
you know, like, as soon as you start to blend together,


00:09:33.940 --> 00:09:38.540
like, okay, well, this thing works with that class


00:09:38.540 --> 00:09:41.700
to achieve its job, but it, you know, you kind of,


00:09:41.700 --> 00:09:43.300
it kind of starts to blur together and like,


00:09:43.300 --> 00:09:44.740
well, what if those are in the wrong places?


00:09:44.740 --> 00:09:47.380
Well, now it's like half here and I don't know,


00:09:47.380 --> 00:09:49.680
it just, it leads to like lots of,


00:09:49.680 --> 00:09:53.860
I don't know, it's like trying to go to your IDE and say,


00:09:53.860 --> 00:09:55.940
I have these seven methods, please write the test for it.


00:09:55.940 --> 00:09:57.260
And it says test function one,


00:09:57.260 --> 00:09:58.980
test function two, test function three.


00:09:58.980 --> 00:10:01.140
You're like, no, no, no, that is not really


00:10:01.140 --> 00:10:03.740
what you're after, but I feel it kind of leads,


00:10:03.740 --> 00:10:07.580
towards that like, well, here's the file, let's test all the things in this file.


00:10:07.580 --> 00:10:10.180
And it, which is not necessarily the way I would think about testing.


00:10:10.180 --> 00:10:12.740
- Well, also, are you really test?


00:10:12.740 --> 00:10:16.580
I mean, it kind of lends itself to starting to test the implementation


00:10:16.580 --> 00:10:18.180
instead of testing the behavior.


00:10:18.180 --> 00:10:19.180
- Yes, exactly.


00:10:19.180 --> 00:10:23.460
- Because you might have, if you've got a file that has no test associated with it,


00:10:23.460 --> 00:10:25.500
somebody might say, well, why is the test for that?


00:10:25.500 --> 00:10:28.860
And you're like, well, that file is just an implementation detail.


00:10:28.860 --> 00:10:33.580
It's not something we need to test because you can't access directly from the API.


00:10:33.580 --> 00:10:37.280
So right, it's completely covered by these two other other tests.


00:10:37.280 --> 00:10:38.720
And it will, by the way, there are other folders.


00:10:38.720 --> 00:10:39.240
Go find them.


00:10:39.240 --> 00:10:46.120
Also the stuff you're speaking about here by like making collection fast and such.


00:10:46.120 --> 00:10:48.020
Also it's a little bit tricky.


00:10:48.020 --> 00:10:51.600
Um, potentially sharing fixtures might be a little more tricky that way.


00:10:51.600 --> 00:10:52.180
I don't know.


00:10:52.180 --> 00:10:55.440
My, my vote is, is to not mix it all together.


00:10:55.440 --> 00:10:58.280
Plus, do you want to ship your test code with your product?


00:10:58.280 --> 00:10:59.880
Maybe you do, but often you don't.


00:10:59.880 --> 00:11:02.860
Uh, it's harder, harder if they're all woven together.


00:11:03.100 --> 00:11:03.740
That's true.


00:11:03.740 --> 00:11:04.380
Yeah.


00:11:04.380 --> 00:11:06.380
Yeah, so anyway.


00:11:06.380 --> 00:11:08.860
That's the same thing.


00:11:08.860 --> 00:11:10.620
Also, Henry Schreiner out there kind of says,


00:11:10.620 --> 00:11:12.620
I don't like distributing tests in wheels.


00:11:12.620 --> 00:11:14.780
Only Estes, so like a test folder as well.


00:11:14.780 --> 00:11:16.140
Yeah, I'm with you.


00:11:16.140 --> 00:11:20.060
I think, Brandon, the vote here is test folder.


00:11:20.060 --> 00:11:22.780
But, you know, that's just us.


00:11:22.780 --> 00:11:23.660
Yeah.


00:11:23.660 --> 00:11:25.180
Awesome.


00:11:25.180 --> 00:11:26.860
All right, well, this is, yeah, this is a good find.


00:11:26.860 --> 00:11:28.380
You want to hear my first one?


00:11:28.380 --> 00:11:30.860
This is a bit of a journey.


00:11:30.860 --> 00:11:31.980
It's a bit of a journey.


00:11:31.980 --> 00:11:34.060
So let's start here.


00:11:34.060 --> 00:11:37.820
So I have a perfectly fine laptop


00:11:37.820 --> 00:11:41.460
that I can take places if I need to for work,


00:11:41.460 --> 00:11:42.940
take it to the coffee shop to work.


00:11:42.940 --> 00:11:44.900
If I'm going on like a two week vacation,


00:11:44.900 --> 00:11:47.260
it's definitely coming with me, right?


00:11:47.260 --> 00:11:50.660
It's even if my intent is to completely disconnect,


00:11:50.660 --> 00:11:53.380
I still have to answer super urgent emails.


00:11:53.380 --> 00:11:55.900
If the website goes down,


00:11:55.900 --> 00:11:59.460
any of the many websites I seem to be babysitting these days,


00:11:59.460 --> 00:12:00.460
like I've got to work on it.


00:12:00.460 --> 00:12:02.500
Like there could be urgent stuff, right?


00:12:02.500 --> 00:12:04.200
So I just, I take it with me.


00:12:04.200 --> 00:12:07.040
But I'm on this mission to do that less, right?


00:12:07.040 --> 00:12:09.340
'Cause I have a 16 inch MacBook Pro,


00:12:09.340 --> 00:12:11.500
it's pretty heavy, it's pretty expensive.


00:12:11.500 --> 00:12:14.160
I don't necessarily wanna like take it camping with me.


00:12:14.160 --> 00:12:16.240
But what if, what if something goes wrong, Brian?


00:12:16.240 --> 00:12:17.160
What if I gotta fix it?


00:12:17.160 --> 00:12:19.200
Do I really wanna drive the four hours back


00:12:19.200 --> 00:12:21.040
because I got a message that like,


00:12:21.040 --> 00:12:23.440
you know, the website's down and everyone's upset,


00:12:23.440 --> 00:12:25.900
can't do their courses or they can't get the podcast.


00:12:25.900 --> 00:12:26.740
No, I don't want that.


00:12:26.740 --> 00:12:28.560
So I would probably take the stupid thing


00:12:28.560 --> 00:12:30.040
and try to not get it wet.


00:12:30.040 --> 00:12:32.380
So I'm on this mission to not do that.


00:12:32.380 --> 00:12:35.800
So I just wanted to share a couple of tools and, you know, people, if they've got thoughts,


00:12:35.800 --> 00:12:41.640
I guess probably the YouTube stream chat for this would be the best or on Twitter, they could let me know.


00:12:41.640 --> 00:12:46.840
But I think I found like the right combination of tools that will let me just take my iPad


00:12:46.840 --> 00:12:51.180
and still do all the DevOps-y life that I got to lead.


00:12:51.180 --> 00:12:53.980
So that it's not good for answering emails.


00:12:53.980 --> 00:12:59.480
You know, I have like minor RSI issues and I can't type on an iPad, not even a little like keyboard that comes with it.


00:12:59.480 --> 00:13:03.560
Like I've got my proper Microsoft ergonomic sculpt


00:13:03.560 --> 00:13:06.140
and you can plug that into an iPad.


00:13:06.140 --> 00:13:09.060
But once you start taking that, you know, like, well, you might as well just take the computer.


00:13:09.060 --> 00:13:14.100
So, two tools I want to give a shout out to prompt by panic.


00:13:14.100 --> 00:13:17.320
Panic is a Portland company, so shout out to the local team.


00:13:17.320 --> 00:13:21.260
Is it at the disco or exactly?


00:13:21.260 --> 00:13:24.320
They don't really freak out that much of the disco panic there.


00:13:25.020 --> 00:13:29.820
But prompt is a SSH client for iOS in particular for iPad.


00:13:29.820 --> 00:13:31.300
But you could, I mean, if you wanted to go extreme,


00:13:31.300 --> 00:13:32.500
you could do this on your phone.


00:13:32.500 --> 00:13:36.220
How far are you going camping or where are you going?


00:13:36.220 --> 00:13:41.020
This lets you basically import your SSH keys and do


00:13:41.020 --> 00:13:46.540
full-on SSH like you would in your iTerm2 or terminal.


00:13:46.540 --> 00:13:48.660
>> Turns your iPad into a dump terminal.


00:13:48.660 --> 00:13:52.500
>> Yeah, and it does. You can easily log into


00:13:52.500 --> 00:13:57.940
you know, the Python bytes server and over SSH, do all the things that you need to do.


00:13:57.940 --> 00:14:05.460
So, you know, if you got to get into the server, you got to like, okay, well, I really have to just go restart the stupid thing or change a connection string because who knows what, right?


00:14:05.460 --> 00:14:15.220
You could you do it, it seems to work pretty well. The only complaint, the only complaint that I have for it is it doesn't have nerd fonts.


00:14:15.220 --> 00:14:18.100
So my oh my posh, dude, this is serious business.


00:14:18.100 --> 00:14:18.600
Don't laugh.


00:14:18.600 --> 00:14:21.600
My nerd fonts, like I can't do PLS.


00:14:21.600 --> 00:14:28.300
I can't do oh my posh and get like the cool like shell prompt with all the information.


00:14:28.300 --> 00:14:30.100
No, it's all just boxes.


00:14:30.100 --> 00:14:30.900
It's rough.


00:14:30.900 --> 00:14:31.900
No, it's fine.


00:14:31.900 --> 00:14:37.400
It would be nice, but it does have cool things like if you need to press control shift that or you know,


00:14:37.400 --> 00:14:41.500
it has like a special way to pull up the all those kinds of keys.


00:14:41.500 --> 00:14:43.700
So you press control and then some other type of thing or


00:14:43.700 --> 00:14:45.200
You know, it has up arrow, down arrow,


00:14:45.200 --> 00:14:47.200
it has like if you want to cycle through your history.


00:14:47.200 --> 00:14:49.460
It's got a lot of cool features like that


00:14:49.460 --> 00:14:52.340
where you can kind of integrate that.


00:14:52.340 --> 00:14:53.680
So it works, I think it's going to work.


00:14:53.680 --> 00:14:56.800
I think this is the one half of the DevOps story.


00:14:56.800 --> 00:15:00.020
The other part is, oh my goodness,


00:15:00.020 --> 00:15:02.380
what if it's a code problem?


00:15:02.380 --> 00:15:05.320
Do I really want to try to edit code over


00:15:05.320 --> 00:15:08.320
this prompt thing through the iPad on,


00:15:08.320 --> 00:15:11.280
you know, in like Emacs or what am I,


00:15:11.280 --> 00:15:12.560
no, I don't want to do that.


00:15:12.560 --> 00:15:15.840
So the other half is GitHub.


00:15:15.840 --> 00:15:20.520
In particular, the VS Code integration into GitHub.


00:15:20.520 --> 00:15:21.960
So if you remember,


00:15:21.960 --> 00:15:24.200
like here I have pull up on the screen,


00:15:24.200 --> 00:15:27.100
just with any public repo or your private ones.


00:15:27.100 --> 00:15:32.960
This is my Jinja partial thing for basically integrating HTMX with Flask.


00:15:32.960 --> 00:15:34.480
But you can press the dot.


00:15:34.480 --> 00:15:35.800
If you press dot,


00:15:35.800 --> 00:15:41.440
it turns that whole thing into a Cloud-hosted VS Code session.


00:15:41.440 --> 00:15:46.560
That's awesome, right? Even has auto complete. So if I hit like dot there, you can see it on my auto complete.


00:15:46.560 --> 00:15:47.560
That's pretty cool.


00:15:47.560 --> 00:15:51.360
That's pretty cool. But how do you press dot when you're on a web page?


00:15:51.360 --> 00:15:54.720
And in iPad, there is no dot.


00:15:54.720 --> 00:15:59.120
Because you can't pull up the keyboard. The only thing you do pull up the keyboard is go to an input section.


00:15:59.120 --> 00:16:02.320
And once you're in input, well, it just types out. It doesn't do that.


00:16:02.320 --> 00:16:05.840
Why? So here's the other piece. All right, here's the other piece.


00:16:05.840 --> 00:16:09.920
So you go over here and you change github.com/mikeckenney/djengelpartials


00:16:09.920 --> 00:16:12.640
to github.com/dev/whatever.


00:16:12.640 --> 00:16:13.920
Boom, done.


00:16:13.920 --> 00:16:15.440
So if you got to edit your code,


00:16:15.440 --> 00:16:18.360
you just go change the .com to .dev


00:16:18.360 --> 00:16:21.560
and you have an editor, you can check it back in, like in my setup,


00:16:21.560 --> 00:16:25.720
if I commit to the production branch, it kicks off a continuous deployment,


00:16:25.720 --> 00:16:29.760
which will like automatically restart the server and reinstall like


00:16:29.760 --> 00:16:32.840
the things that might need if it has a new dependency or something.


00:16:32.840 --> 00:16:35.040
I could literally just come over here,


00:16:35.040 --> 00:16:37.680
make some changes, do a PR over to the production branch,


00:16:37.680 --> 00:16:40.280
or push some HAL merge over to the production branch,


00:16:40.280 --> 00:16:42.600
and it's done. It's good to go. Isn't that awesome?


00:16:42.600 --> 00:16:44.000
>> Just edit live.


00:16:44.000 --> 00:16:46.080
Just edit your server live.


00:16:46.080 --> 00:16:49.560
>> No. I saw somewhere somebody was complaining about


00:16:49.560 --> 00:16:53.560
the prompt saying it's really hard for me to edit my code on the server.


00:16:53.560 --> 00:16:55.680
I'm like, why would you?


00:16:55.680 --> 00:16:57.760
No, it should be hard. You don't do that.


00:16:57.760 --> 00:16:59.960
>> Don't do that. Yeah.


00:16:59.960 --> 00:17:05.160
So I went to try this, but I have to do the two-factor authentication to get into my account.


00:17:05.160 --> 00:17:10.280
Yeah, yeah, yeah, you got to do that. Brandon also says, "Hey, I'll buy you a keyboard case."


00:17:10.280 --> 00:17:15.320
I absolutely hear you, and I would love – you have no idea how jealous I am of people that can


00:17:15.320 --> 00:17:20.840
go and type on their laptops and type on these small things. Like RSI, I would be destroyed in


00:17:20.840 --> 00:17:26.600
like an hour or two if I did it. It's not a matter of do I want to get the keyboard or not. I just


00:17:26.600 --> 00:17:30.260
I just can't, so anyway, it's not that bad to be me,


00:17:30.260 --> 00:17:33.360
but I'm not typing on small square keyboards.


00:17:33.360 --> 00:17:34.200
It just doesn't work.


00:17:34.200 --> 00:17:35.480
It's just something I can't do.


00:17:35.480 --> 00:17:36.960
- Okay, so-- - All right.


00:17:36.960 --> 00:17:38.200
- Just no. - Run, run.


00:17:38.200 --> 00:17:40.080
(both laughing)


00:17:40.080 --> 00:17:43.600
Exactly, no, I just, because when I was 30,


00:17:43.600 --> 00:17:45.580
my hands got messed up, and they just,


00:17:45.580 --> 00:17:48.160
they almost recovered, but not 100%, right?


00:17:48.160 --> 00:17:49.880
- I know you got more going on than I do, though.


00:17:49.880 --> 00:17:52.160
So I just got back from four days off,


00:17:52.160 --> 00:17:53.540
and I took the iPad.


00:17:54.480 --> 00:17:58.000
And I had to answer a few emails,


00:17:58.000 --> 00:18:00.960
but for me, these short emails,


00:18:00.960 --> 00:18:04.480
the little key bed, the cover thing, it works fine.


00:18:04.480 --> 00:18:06.600
Even though those are expensive.


00:18:06.600 --> 00:18:08.480
When you add, oh, I want an iPad,


00:18:08.480 --> 00:18:10.840
but I also want the keyboard thing,


00:18:10.840 --> 00:18:12.360
and I want the pencil,


00:18:12.360 --> 00:18:15.040
suddenly it's like almost twice as much.


00:18:15.040 --> 00:18:17.060
- It is, it is, absolutely.


00:18:17.060 --> 00:18:20.720
And just people who have been paying attention


00:18:20.720 --> 00:18:21.840
for the last two hours,


00:18:21.840 --> 00:18:23.840
Apple just released new iPads with M2s,


00:18:23.840 --> 00:18:25.040
So people can go check that out


00:18:25.040 --> 00:18:26.400
if they wanna spend money.


00:18:26.400 --> 00:18:27.880
I'm happy with mine, I'm gonna keep it.


00:18:27.880 --> 00:18:31.200
All right, before we move on to the next thing, Brian.


00:18:31.200 --> 00:18:32.020
- Okay.


00:18:32.020 --> 00:18:33.920
- Let me tell you about our sponsor this week.


00:18:33.920 --> 00:18:37.040
So as has been the case usual, thank you so much.


00:18:37.040 --> 00:18:38.960
Microsoft for Startups Founders Hub


00:18:38.960 --> 00:18:41.700
is sponsoring this episode.


00:18:41.700 --> 00:18:44.020
We all know that starting a business is hard.


00:18:44.020 --> 00:18:46.360
By a lot of estimates, over 90% of startups


00:18:46.360 --> 00:18:48.680
go out of business in just the first year.


00:18:48.680 --> 00:18:50.240
There's a lot of reasons for that.


00:18:50.240 --> 00:18:52.920
Is it that you don't have the money to buy the resources?


00:18:52.920 --> 00:18:54.560
Can you not scale fast enough?


00:18:54.560 --> 00:18:56.800
Often it's like, you have the wrong strategy


00:18:56.800 --> 00:18:59.280
or do you not have the right connections


00:18:59.280 --> 00:19:01.240
to get the right publicity


00:19:01.240 --> 00:19:03.520
or you have no experience in marketing.


00:19:03.520 --> 00:19:07.160
Lots, lots of problems, lots of challenges.


00:19:07.160 --> 00:19:08.480
And as software developers,


00:19:08.480 --> 00:19:12.040
we're often not trained in those necessary areas


00:19:12.040 --> 00:19:13.680
like marketing, for example.


00:19:13.680 --> 00:19:16.080
But even if you know that, like there's others, right?


00:19:16.080 --> 00:19:19.000
So having access to a network of founders,


00:19:19.000 --> 00:19:20.800
like you get in a lot of accelerators,


00:19:20.800 --> 00:19:22.840
like Y Combinator, would be awesome.


00:19:22.840 --> 00:19:26.060
So that's what Microsoft created with their founders hub.


00:19:26.060 --> 00:19:27.860
So they give you free resources


00:19:27.860 --> 00:19:32.860
to a whole bunch of cloud things, Azure, GitHub, others,


00:19:32.860 --> 00:19:37.180
as well as very importantly, access to a mentor network


00:19:37.180 --> 00:19:39.780
where you can book one-on-one calls


00:19:39.780 --> 00:19:43.540
with people who have experience in these particular areas.


00:19:43.540 --> 00:19:46.220
Often many of them are founders themselves


00:19:46.220 --> 00:19:47.940
and they've created startups and sold them


00:19:47.940 --> 00:19:50.220
and they're in this mentorship network.


00:19:50.220 --> 00:19:53.160
So if you wanna talk to somebody about idea validation,


00:19:53.160 --> 00:19:57.900
fundraising, management and coaching, sales and marketing,


00:19:57.900 --> 00:19:59.620
all those things, you can book one-on-one meetings


00:19:59.620 --> 00:20:01.900
with these people to help get you going


00:20:01.900 --> 00:20:03.300
and make connections.


00:20:03.300 --> 00:20:05.780
So if you need some free GitHub


00:20:05.780 --> 00:20:07.400
and Microsoft Cloud resources,


00:20:07.400 --> 00:20:08.940
if you need access to mentors


00:20:08.940 --> 00:20:11.100
and you wanna get your startup going,


00:20:11.100 --> 00:20:12.880
now make your idea a reality today


00:20:12.880 --> 00:20:15.700
with the support from Microsoft for Startups Founders Hub.


00:20:15.700 --> 00:20:18.760
It's free to join, it doesn't have to be venture-backed,


00:20:18.760 --> 00:20:21.040
doesn't have to be third party validated.


00:20:21.040 --> 00:20:26.040
You just apply for free at pythonbytes.fm/foundershub2022.


00:20:26.040 --> 00:20:27.920
The link is in your show notes.


00:20:27.920 --> 00:20:32.080
Thanks a bunch to Microsoft for sponsoring our show.


00:20:32.080 --> 00:20:33.080
What's next, Brian?


00:20:33.080 --> 00:20:35.120
- Well, that article that I already read


00:20:35.120 --> 00:20:36.680
about the speeding up pytest,


00:20:36.680 --> 00:20:38.880
it had a whole bunch of cool tools in it.


00:20:38.880 --> 00:20:41.080
So I wanted to go through some of the tools


00:20:41.080 --> 00:20:43.760
that were in the article that I thought were neat.


00:20:43.760 --> 00:20:45.720
One of them for profiling and timing


00:20:45.720 --> 00:20:48.040
was a thing called Hyperfine.


00:20:48.040 --> 00:20:51.980
And this is a not, I don't think it's a Python thing,


00:20:51.980 --> 00:20:54.580
but you like for max, you had to brew install it.


00:20:54.580 --> 00:20:58.480
But one of the things it does is you can give it,


00:20:58.480 --> 00:21:02.940
you give it like two things and it runs both of them


00:21:02.940 --> 00:21:04.660
and it can run it multiple times


00:21:04.660 --> 00:21:08.600
and then give you statistics comparing them.


00:21:08.600 --> 00:21:11.940
So it's a really good comparison tool to, you know,


00:21:11.940 --> 00:21:13.820
like if you're testing your test suite


00:21:13.820 --> 00:21:15.480
to see how long it runs.


00:21:15.480 --> 00:21:17.740
may as well run it a couple times and see.


00:21:17.740 --> 00:21:22.620
- For people who didn't see yet the example


00:21:22.620 --> 00:21:24.300
from that first article you covered,


00:21:24.300 --> 00:21:26.900
a lot of those were CLI flags, right?


00:21:26.900 --> 00:21:31.900
Like dash dash, no, no's for disabling the plugin


00:21:31.900 --> 00:21:33.700
and so on, so you could have two commands


00:21:33.700 --> 00:21:37.300
on the command line where you basically change


00:21:37.300 --> 00:21:39.740
the command line arguments to determine


00:21:39.740 --> 00:21:40.900
those kind of things, right?


00:21:40.900 --> 00:21:43.660
- Yeah, exactly, so run it a couple times


00:21:43.660 --> 00:21:46.360
and run the test suite a couple of times each


00:21:46.360 --> 00:21:51.360
and just see if I had these no flags or this other flag


00:21:51.360 --> 00:21:54.100
or with the environmental variable.


00:21:54.100 --> 00:21:56.060
Actually, I don't know how you could do that in there.


00:21:56.060 --> 00:21:58.540
You can set environmental variables in command line maybe.


00:21:58.540 --> 00:22:00.340
- Yeah, I'm sure that you can somehow.


00:22:00.340 --> 00:22:01.180
- Yeah. (laughs)


00:22:01.180 --> 00:22:03.660
- Inline an export statement or something, who knows?


00:22:03.660 --> 00:22:06.440
- At the very least, you can run the same command twice.


00:22:06.440 --> 00:22:08.700
You can run it, set the environmental variable,


00:22:08.700 --> 00:22:11.580
and then run it again to see if it makes a difference.


00:22:11.580 --> 00:22:12.420
- Yeah.


00:22:12.420 --> 00:22:13.560
That was neat.


00:22:13.560 --> 00:22:16.860
I don't know why I've got the API referencing.


00:22:16.860 --> 00:22:20.780
Oh, the thing I wanted to talk about was duration.


00:22:20.780 --> 00:22:22.020
So let me find that.


00:22:22.020 --> 00:22:23.460
I think I lost it.


00:22:23.460 --> 00:22:26.140
So we did talk about duration.


00:22:26.140 --> 00:22:27.620
Durations.


00:22:27.620 --> 00:22:28.580
Oh, well.


00:22:28.580 --> 00:22:29.420
Oh, here it is.


00:22:29.420 --> 00:22:31.740
So durations, if you give it a number,


00:22:31.740 --> 00:22:33.260
like durations 10,


00:22:33.260 --> 00:22:35.780
pytest will give you like the 10 slowest tests


00:22:35.780 --> 00:22:37.980
and tell you how far, how slow they are.


00:22:37.980 --> 00:22:39.420
But you can, if you don't give it anything,


00:22:39.420 --> 00:22:40.620
it just does all of it.


00:22:41.660 --> 00:22:45.140
But the other thing that's been fairly recent,


00:22:45.140 --> 00:22:47.300
it wasn't there when I started using pytest,


00:22:47.300 --> 00:22:48.400
is durations min.


00:22:48.400 --> 00:22:50.880
So you can give it,


00:22:50.880 --> 00:22:55.320
when you give it durations with blank or in zero,


00:22:55.320 --> 00:22:58.860
it times everything, but that might be overwhelming.


00:22:58.860 --> 00:23:02.080
So you can give it a minimum duration in seconds


00:23:02.080 --> 00:23:04.520
to only include, only time the tests


00:23:04.520 --> 00:23:07.020
that are all over a second or something like that.


00:23:07.020 --> 00:23:07.860
- Right, right.


00:23:07.860 --> 00:23:10.680
If it's really, if it's 25 milliseconds,


00:23:10.680 --> 00:23:11.940
like just I don't want to see it.


00:23:11.940 --> 00:23:15.740
>> Yeah, I'm not going to spend time trying to speed that up.


00:23:15.740 --> 00:23:19.260
Another cool thing brought up was Pi Instrument,


00:23:19.260 --> 00:23:22.660
which is a very pretty way to


00:23:22.660 --> 00:23:26.420
look at the times that you're spending on different things.


00:23:26.420 --> 00:23:27.720
It's not just for testing,


00:23:27.720 --> 00:23:28.860
but you could use it for other stuff.


00:23:28.860 --> 00:23:31.140
But apparently, in the user guide,


00:23:31.140 --> 00:23:33.900
there is specifically how to profile


00:23:33.900 --> 00:23:36.860
your tests with Pi Test using Pi Instrument.


00:23:36.860 --> 00:23:39.460
That's a cool bit of documentation.


00:23:39.460 --> 00:23:41.600
This doesn't actually look obvious,


00:23:41.600 --> 00:23:43.800
so maybe I'm looking at this wrong,


00:23:43.800 --> 00:23:47.520
but I'm glad they wrote this up.


00:23:47.520 --> 00:23:48.280
>> Yeah.


00:23:48.280 --> 00:23:49.400
>> It's cool.


00:23:49.400 --> 00:23:52.320
>> Basically profiling your, oh, interesting.


00:23:52.320 --> 00:23:54.360
You do it as a fixture.


00:23:54.360 --> 00:23:55.200
>> Yeah.


00:23:55.200 --> 00:23:57.280
>> So you create the profiler,


00:23:57.280 --> 00:23:58.360
you start the profiler,


00:23:58.360 --> 00:24:00.240
then you yield nothing,


00:24:00.240 --> 00:24:02.080
which triggers the test to run,


00:24:02.080 --> 00:24:04.100
and then you stop the profiler and do the output.


00:24:04.100 --> 00:24:05.200
That's really cool.


00:24:05.200 --> 00:24:06.880
>> Yeah, pretty cool way to do that.


00:24:06.880 --> 00:24:08.520
So profiling each test.


00:24:08.520 --> 00:24:12.800
>> Yeah. It's a bit mind bending on the coroutines.


00:24:12.800 --> 00:24:16.480
>> So it's cool they're using it as a fixture because if you had


00:24:16.480 --> 00:24:21.000
the fixtures set up by default as a function,


00:24:21.000 --> 00:24:22.400
so it'll go around every function.


00:24:22.400 --> 00:24:24.160
But if you set it up as a module,


00:24:24.160 --> 00:24:27.800
you could just find the slow test modules in your system,


00:24:27.800 --> 00:24:30.720
which might be an easier way to speed things up.


00:24:30.720 --> 00:24:35.480
We're looking. Anyway. I was thrilled that


00:24:35.480 --> 00:24:39.560
my little pytest skip slow plugin that I developed as part of it.


00:24:39.560 --> 00:24:42.920
I didn't even come up with the ideas for the code, but


00:24:42.920 --> 00:24:47.760
that came out of the pytest documentation. But it wasn't a plugin yet, but I developed this


00:24:47.760 --> 00:24:53.960
plugin during writing the second edition of the book and it showed up in his article, which is cool.


00:24:53.960 --> 00:24:59.460
More interesting is pytest Socket, which is a plugin that can turn off


00:24:59.460 --> 00:25:03.960
it just turns off socket, Python socket calls.


00:25:03.960 --> 00:25:08.720
And then it raises a particular exception.


00:25:08.720 --> 00:25:11.280
So it doesn't, like if you just install it,


00:25:11.280 --> 00:25:12.280
it doesn't turn things off.


00:25:12.280 --> 00:25:15.760
You have to pass in a disable socket to your test suite


00:25:15.760 --> 00:25:19.680
and then it turns off accessing the external world.


00:25:19.680 --> 00:25:23.560
So this is a kind of a cool way to easily find out


00:25:23.560 --> 00:25:25.440
which tests are failing because your network


00:25:25.440 --> 00:25:26.760
is not connected.


00:25:26.760 --> 00:25:28.360
So go figure out if you really want to.


00:25:28.360 --> 00:25:30.520
- If you want to say definitely don't talk to the network


00:25:30.520 --> 00:25:32.200
or don't talk to the database,


00:25:32.200 --> 00:25:34.120
turn off the network and see what happens.


00:25:34.120 --> 00:25:35.440
- Yeah, and then you can, I mean,


00:25:35.440 --> 00:25:37.460
but even if you did want part of your test suite


00:25:37.460 --> 00:25:39.980
to access the network, you could test it to make sure


00:25:39.980 --> 00:25:41.780
that there aren't other parts of your test suite


00:25:41.780 --> 00:25:43.880
that are accessing it when they shouldn't.


00:25:43.880 --> 00:25:46.380
So it'd be a cool debugging tool.


00:25:46.380 --> 00:25:47.840
And then file system stuff too,


00:25:47.840 --> 00:25:50.620
there's PyFakeFS fake file system


00:25:50.620 --> 00:25:52.440
that you can mock file system.


00:25:52.440 --> 00:25:53.960
So even things that you wanna write,


00:25:53.960 --> 00:25:56.640
you don't actually have to have the files left around.


00:25:56.640 --> 00:25:58.760
You can leave them around just long enough to test them


00:25:58.760 --> 00:25:59.800
so you can use this.


00:25:59.800 --> 00:26:00.640
- That's perfect.


00:26:00.640 --> 00:26:02.040
- And then the last thing I thought was cool


00:26:02.040 --> 00:26:04.760
was a way, there's a thing called Blue Racer


00:26:04.760 --> 00:26:09.760
that you can attach to a GitHub CI


00:26:09.760 --> 00:26:13.280
to check in merges.


00:26:13.280 --> 00:26:14.440
So if somebody merges something,


00:26:14.440 --> 00:26:17.520
you can check to see if they've terribly slowed down


00:26:17.520 --> 00:26:18.400
your test suite.


00:26:18.400 --> 00:26:21.680
So it kind of reports that.


00:26:21.680 --> 00:26:24.440
I don't think it fails on slower tests,


00:26:24.440 --> 00:26:28.920
but it just sort of reports what's going on.


00:26:28.920 --> 00:26:33.140
So yeah, it gives you a little report of like the nice what


00:26:33.140 --> 00:26:35.900
happened on the branch and if the test suite slowed down.


00:26:35.900 --> 00:26:37.220
So yeah, thanks to know.


00:26:37.220 --> 00:26:38.700
>> Yeah, that's a cool project.


00:26:38.700 --> 00:26:39.960
Blue racer. Nice.


00:26:39.960 --> 00:26:42.820
Okay. It's automatic, which is lovely.


00:26:42.820 --> 00:26:44.340
>> Yeah.


00:26:44.340 --> 00:26:46.180
>> So nice. All right.


00:26:46.180 --> 00:26:49.100
Well, I've got one more item for us as well, Brian.


00:26:49.100 --> 00:26:49.740
>> Yeah.


00:26:49.740 --> 00:26:51.900
>> So we talked a little bit about,


00:26:51.900 --> 00:26:53.780
you talked about Pi upgrade.


00:26:53.780 --> 00:26:55.820
The last show, I think it was.


00:26:55.820 --> 00:26:56.260
>> Yeah.


00:26:56.260 --> 00:26:58.260
>> We talked about some of these other ones.


00:26:58.260 --> 00:27:01.500
So I wanna talk about, I'm gonna give a shout out to ReFurb,


00:27:01.500 --> 00:27:06.500
very active project last updated two days ago, 1,600 stars.


00:27:06.500 --> 00:27:10.980
And the idea is basically you can point this at your code


00:27:10.980 --> 00:27:12.600
and it'll just say, here are the things


00:27:12.600 --> 00:27:16.160
that are making it seem like the old way of doing things.


00:27:16.160 --> 00:27:18.460
You should try doing it the newer way.


00:27:18.460 --> 00:27:22.540
So for example, here's something it's asking


00:27:22.540 --> 00:27:25.460
if the file name is in a list, right?


00:27:25.460 --> 00:27:31.380
one of the ways you can see if filename equals X or filename equals Y or filename equals Z,


00:27:31.380 --> 00:27:38.100
you would say if filename in X comma Y or comma Z, right? And that's a more concise and often


00:27:38.100 --> 00:27:42.900
considered more Pythonic way. But do you need a whole list allocated just to ask that question?


00:27:42.900 --> 00:27:49.780
What about a tuple? And here we have a with open filename as F then contents F dot read. And we


00:27:49.780 --> 00:27:51.180
and then we have the split lines and so on.


00:27:51.180 --> 00:27:54.260
And so, well, if you're using pathlib,


00:27:54.260 --> 00:27:56.340
just say path.readText,


00:27:56.340 --> 00:27:57.780
you don't need the context manager,


00:27:57.780 --> 00:28:00.820
you don't need two lines, just do it all in one.


00:28:00.820 --> 00:28:02.620
And so on this simple little bit of code here,


00:28:02.620 --> 00:28:04.660
they just run refurb against your,


00:28:04.660 --> 00:28:06.920
this example Python file,


00:28:06.920 --> 00:28:11.600
and it'll say use tuple xyz instead of list xyz


00:28:11.600 --> 00:28:13.620
for that in case.


00:28:13.620 --> 00:28:15.020
And then what I really like about it


00:28:15.020 --> 00:28:17.100
is it finds like exactly the pattern that you're doing.


00:28:17.100 --> 00:28:21.580
So it says you're using with open something as F,


00:28:21.580 --> 00:28:24.220
then value equals F.read,


00:28:24.220 --> 00:28:29.140
use value equals path of X.readText one line.


00:28:29.140 --> 00:28:30.620
It gives you pretty,


00:28:30.620 --> 00:28:32.700
it doesn't say you should use path read text.


00:28:32.700 --> 00:28:34.500
It gives you in the syntax of,


00:28:34.500 --> 00:28:36.600
here's the multiple lines you did,


00:28:36.600 --> 00:28:39.600
do this instead. Nice, right?


00:28:39.600 --> 00:28:41.980
>> I don't think I've ever used read text.


00:28:41.980 --> 00:28:43.020
So I learned something new.


00:28:43.020 --> 00:28:45.860
>> I hadn't either, but you know what I do now.


00:28:45.860 --> 00:28:49.700
It also says you can replace X starts with Y,


00:28:49.700 --> 00:28:53.260
or starts with Z with starts with X,


00:28:53.260 --> 00:28:56.620
Y, Z as a tuple and that'll actually test.


00:28:56.620 --> 00:28:57.780
>> One or the other?


00:28:57.780 --> 00:28:58.820
>> Yeah, one or the other.


00:28:58.820 --> 00:28:59.300
>> Okay.


00:28:59.300 --> 00:29:01.540
>> It says instead of printing with an empty string,


00:29:01.540 --> 00:29:03.180
there's no reason to allocate an empty string,


00:29:03.180 --> 00:29:06.100
just call print blank that does the same effect.


00:29:06.100 --> 00:29:09.900
There's a whole bunch of things like that that are really nice here.


00:29:09.900 --> 00:29:12.340
You can ask it to explain,


00:29:12.340 --> 00:29:14.180
you're like, "Dude, what's going on here?


00:29:14.180 --> 00:29:16.900
You told me to do one, two, three.


00:29:16.900 --> 00:29:19.100
What's the motivation?


00:29:19.100 --> 00:29:20.460
You'll get a help text.


00:29:20.460 --> 00:29:22.220
Here's the bad version, here's the good version,


00:29:22.220 --> 00:29:23.980
here's why you might consider that.


00:29:23.980 --> 00:29:25.620
For example, given a string,


00:29:25.620 --> 00:29:29.180
don't cast it again to a string, just use it.


00:29:29.180 --> 00:29:32.180
Maybe more important is you can ignore errors.


00:29:32.180 --> 00:29:34.620
You can ignore, just do a dash dash,


00:29:34.620 --> 00:29:36.020
ignore a number.


00:29:36.020 --> 00:29:38.220
There's one which I'll show you in a second,


00:29:38.220 --> 00:29:41.180
which I've started adopting that for when I use it.


00:29:41.180 --> 00:29:43.940
Or you can put a hash no QA and put


00:29:43.940 --> 00:29:46.540
a particular warning to be disabled,


00:29:46.540 --> 00:29:48.260
or you can just say no.


00:29:48.260 --> 00:29:49.100
Just leave this line alone.


00:29:49.100 --> 00:29:50.580
Like I just don't wanna hear it.


00:29:50.580 --> 00:29:51.500
Don't tell me.


00:29:51.500 --> 00:29:53.220
So you can say #noqa,


00:29:53.220 --> 00:29:55.500
then it'll catch like all of them.


00:29:55.500 --> 00:29:56.340
- Okay.


00:29:56.340 --> 00:29:57.160
- Okay.


00:29:57.160 --> 00:29:59.460
So I ran this on the Python Bytes website,


00:29:59.460 --> 00:30:00.880
and we got this.


00:30:00.880 --> 00:30:01.940
It says,


00:30:01.940 --> 00:30:05.100
there's a part where it like builds up a list


00:30:05.100 --> 00:30:06.300
and then takes some things out,


00:30:06.300 --> 00:30:07.820
trying to create a unique list.


00:30:07.820 --> 00:30:09.940
I think this might be for like showing


00:30:09.940 --> 00:30:11.220
some of the testimonials.


00:30:11.220 --> 00:30:14.400
It says, give me a list of all a bunch of testimonials


00:30:14.400 --> 00:30:16.100
and then randomly pick some out of it.


00:30:16.100 --> 00:30:18.260
And then it'll delete the one it randomly picked


00:30:18.260 --> 00:30:20.820
and then pick another so it doesn't get duplication.


00:30:20.820 --> 00:30:23.360
There's other things like that as well, also in the search.


00:30:23.360 --> 00:30:27.420
And so I write del X bracket Y to get rid of the element


00:30:27.420 --> 00:30:29.020
or whatever it's called, item.


00:30:29.020 --> 00:30:31.420
And they say, you know what, on a dictionary,


00:30:31.420 --> 00:30:33.820
you should just use X dot pop of Y.


00:30:33.820 --> 00:30:35.600
I think the del is kind of not obvious entirely


00:30:35.600 --> 00:30:36.440
what's going on.


00:30:36.440 --> 00:30:37.540
Sometimes it means free memory.


00:30:37.540 --> 00:30:40.120
Sometimes it means take the thing out of the list, right?


00:30:40.120 --> 00:30:41.640
So they're like, okay, do this.


00:30:41.640 --> 00:30:44.360
And I got the square bracket in warning


00:30:44.360 --> 00:30:47.920
instead of the parenthesis, the tuple version.


00:30:47.920 --> 00:30:50.320
And then also I had a list


00:30:50.320 --> 00:30:53.040
and I wanted to make a separate shallow copy of it.


00:30:53.040 --> 00:30:55.160
So I said list of that thing.


00:30:55.160 --> 00:30:58.320
And it said, you can just do list.copy or thing.copy


00:30:58.320 --> 00:30:59.600
and it'll create the same thing,


00:30:59.600 --> 00:31:02.080
but it's a little more discoverable what the intention is.


00:31:02.080 --> 00:31:03.640
Probably also more efficient.


00:31:03.640 --> 00:31:05.520
Probably do it all at once instead of loop over it.


00:31:05.520 --> 00:31:06.480
Who knows?


00:31:06.480 --> 00:31:08.520
Anyway, this is what I got running against R,


00:31:08.520 --> 00:31:09.520
stuff like this.


00:31:09.520 --> 00:31:11.360
And you know what, I fixed it all.


00:31:11.360 --> 00:31:12.200
- Cool.


00:31:12.200 --> 00:31:14.120
- Except there's this one part


00:31:14.120 --> 00:31:16.920
where it's got a whole bunch of different tests


00:31:16.920 --> 00:31:18.480
to transform a string.


00:31:18.480 --> 00:31:20.640
And it's like line after line of dot replace,


00:31:20.640 --> 00:31:22.800
dot replace, dot replace, dot replace, dot replace.


00:31:22.800 --> 00:31:26.920
One of those lines is to replace tabs with spaces.


00:31:26.920 --> 00:31:28.600
Then eventually it finds all the spaces,


00:31:28.600 --> 00:31:30.040
turns them into single dashes


00:31:30.040 --> 00:31:31.960
and condenses them and whatnot.


00:31:31.960 --> 00:31:36.960
And it says, oh, you should change x.replace backslash t,


00:31:37.160 --> 00:31:42.360
So tab with a space replace that with x.expand tabs one.


00:31:42.360 --> 00:31:44.160
I'm like, no.


00:31:44.160 --> 00:31:51.060
Maybe if it was just a single line where the only call was to


00:31:51.060 --> 00:31:54.760
replace the tabs, but there's like seven replaces and they all


00:31:54.760 --> 00:31:59.460
make sense replace tabs replace lowercase with that like all


00:31:59.460 --> 00:32:00.360
these other things.


00:32:00.360 --> 00:32:03.560
And if you just turn one of them into expand tabs, like why did


00:32:03.560 --> 00:32:06.460
where did this come like into the sequence of replacements?


00:32:06.460 --> 00:32:08.140
like why would you do this one thing?


00:32:08.140 --> 00:32:08.620
>> Yeah.


00:32:08.620 --> 00:32:12.140
>> So I just put a no QA on that one and fixed it up.


00:32:12.140 --> 00:32:13.940
But I found it to be pretty


00:32:13.940 --> 00:32:16.620
helpful in offering some nice recommendations.


00:32:16.620 --> 00:32:19.300
People can check it out. You can just run it in an entire directory.


00:32:19.300 --> 00:32:20.360
You don't have to run it on one file.


00:32:20.360 --> 00:32:23.900
Just say, refurb./go.


00:32:23.900 --> 00:32:27.860
>> Cool. Yeah. We should run several of these and then


00:32:27.860 --> 00:32:30.780
just do them in a loop and see if it ever settles down.


00:32:30.780 --> 00:32:33.620
>> Exactly. If you just keep taking its advice,


00:32:33.620 --> 00:32:35.060
does it upset the other one?


00:32:35.060 --> 00:32:41.980
Yeah, like if you pi upgrade and then refurb and then black and just and some others and yeah auto pip eight.


00:32:41.980 --> 00:32:51.180
See, the goal of this one is to modernize python code basis if we had python to code I suspect it would go bonkers but we don't so it's okay.


00:32:51.180 --> 00:32:58.180
But one of the cool thing you mentioned you weren't going to do the expand tabs but I didn't know about the expand tabs so.


00:32:58.180 --> 00:33:04.180
The tools like this also just teach you stuff that you may not have known about our language.


00:33:04.180 --> 00:33:06.580
>> Yeah, like that read text versus a context manager and all sorts of stuff.


00:33:06.580 --> 00:33:09.180
Yeah. So the expand tabs,


00:33:09.180 --> 00:33:10.180
where was it? It was over here.


00:33:10.180 --> 00:33:12.080
The expand tabs of one,


00:33:12.080 --> 00:33:14.460
that means replace the tab with one space.


00:33:14.460 --> 00:33:16.300
So if you wanted four spaces for every tab,


00:33:16.300 --> 00:33:17.840
you would just say expand tabs four.


00:33:17.840 --> 00:33:19.540
>> Which is probably correct, right?


00:33:19.540 --> 00:33:22.380
>> Yeah, of course. Of course it is.


00:33:22.380 --> 00:33:23.860
>> Of course it is.


00:33:23.860 --> 00:33:25.980
>> All right. Well, that's it for all of our items.


00:33:25.980 --> 00:33:28.020
You got anything else you want to throw out there?


00:33:28.020 --> 00:33:31.100
- I don't, how about you?


00:33:31.100 --> 00:33:33.580
- I do actually, all right, so let's see,


00:33:33.580 --> 00:33:35.700
I had a few things, I'll go through them quick.


00:33:35.700 --> 00:33:37.840
So another sequence of things


00:33:37.840 --> 00:33:39.540
that I think's pretty interesting,


00:33:39.540 --> 00:33:41.060
this is not really the main thing,


00:33:41.060 --> 00:33:43.260
but it's kind of starting the motivation.


00:33:43.260 --> 00:33:46.220
So we have over on all of our sites,


00:33:46.220 --> 00:33:49.900
on Python Bytes, on Talk Python and Talk Python Training,


00:33:49.900 --> 00:33:52.020
we have the ability to do search.


00:33:52.020 --> 00:33:54.500
So for example, over on Talk Python Training,


00:33:54.500 --> 00:33:56.700
I can say ngrok api postman,


00:33:56.700 --> 00:33:57.980
And the results you got were just like,


00:33:57.980 --> 00:33:59.580
previously were like this ugly list


00:33:59.580 --> 00:34:00.780
that you'd have to kind of make sense of.


00:34:00.780 --> 00:34:03.800
It was really not something I was too proud of.


00:34:03.800 --> 00:34:05.620
But I'm like, I'm not inspired to figure out


00:34:05.620 --> 00:34:07.940
a different UI, but I got inspired last week


00:34:07.940 --> 00:34:09.580
and said, okay, I'm gonna come up with this kind of like


00:34:09.580 --> 00:34:12.100
hierarchical view showing like, okay,


00:34:12.100 --> 00:34:15.180
if I search for say, ngrok API postman,


00:34:15.180 --> 00:34:17.180
I wanna see all the stuff that matches that


00:34:17.180 --> 00:34:22.140
out of the 240 hours of spoken word, basically, right?


00:34:22.140 --> 00:34:25.140
On the site and all the descriptions and titles and so on.


00:34:25.140 --> 00:34:29.060
And so, like for example, this Twilio course I talked about


00:34:29.060 --> 00:34:31.940
used all those things and actually has one lecture


00:34:31.940 --> 00:34:35.340
where exactly it talks about all three of those things


00:34:35.340 --> 00:34:37.460
and then others where they're in there


00:34:37.460 --> 00:34:40.180
but like one video talks about ngrok


00:34:40.180 --> 00:34:41.900
then another one talks about an API


00:34:41.900 --> 00:34:44.460
or you know, it's not really focused, right?


00:34:44.460 --> 00:34:45.700
And here just in this course,


00:34:45.700 --> 00:34:48.020
like it doesn't even exist in a single chapter


00:34:48.020 --> 00:34:50.740
but across 100 days of web and Python,


00:34:50.740 --> 00:34:52.100
like all those words are said.


00:34:52.100 --> 00:34:55.020
All right, so I came up with this search engine


00:34:55.020 --> 00:34:56.820
and well, the search engine existed,


00:34:56.820 --> 00:34:58.780
but it wasn't running, you know,


00:34:58.780 --> 00:35:00.260
it wasn't basically hosted in a way


00:35:00.260 --> 00:35:01.140
that I was real happy with.


00:35:01.140 --> 00:35:06.140
So what I did is I took some of our advice from 2017.


00:35:06.140 --> 00:35:08.900
I said, you know what, I'm going to create,


00:35:08.900 --> 00:35:11.740
I'm going to create a system B service


00:35:11.740 --> 00:35:15.300
that just runs as part of Linux when I turn it on,


00:35:15.300 --> 00:35:16.860
that is gonna do all the indexing


00:35:16.860 --> 00:35:18.100
and a lot of the pre-processing,


00:35:18.100 --> 00:35:19.540
so that page can be super fast.


00:35:19.540 --> 00:35:21.900
So for example, like the response time for this page


00:35:21.900 --> 00:35:23.220
is effectively instant.


00:35:23.220 --> 00:35:25.500
It's like 30, 40 milliseconds, right?


00:35:25.500 --> 00:35:27.660
Even though it's doing tons of searching.


00:35:27.660 --> 00:35:31.540
So I'm going to run this Python script,


00:35:31.540 --> 00:35:36.260
series of scripts in the lab as a system D service, which is excellent.


00:35:36.260 --> 00:35:38.100
So we talked about how you can do that.


00:35:38.100 --> 00:35:40.560
If you look, here's an example.


00:35:40.560 --> 00:35:45.740
Basically, you just create a system D.service file and you say like Python,


00:35:45.740 --> 00:35:49.220
space your file with the arguments and you can set it.


00:35:49.220 --> 00:35:52.780
It'll just auto start and be managed by system control,


00:35:52.780 --> 00:35:54.140
which is awesome.


00:35:54.140 --> 00:35:56.400
So that's all neat.


00:35:56.400 --> 00:35:58.380
The other thing I want to give,


00:35:58.380 --> 00:36:00.620
the main thing I really want to give some advice about though is


00:36:00.620 --> 00:36:05.780
those these daemons what they look like is while true,


00:36:05.780 --> 00:36:08.180
chill out for a while, do your thing.


00:36:08.180 --> 00:36:10.540
Wait for an event, do your thing.


00:36:10.540 --> 00:36:12.580
Look for a file, do your thing,


00:36:12.580 --> 00:36:14.020
then look for some more.


00:36:14.020 --> 00:36:16.820
You're just going over and over in this loop like running,


00:36:16.820 --> 00:36:18.540
but often it's not busy,


00:36:18.540 --> 00:36:19.640
it's waiting for something.


00:36:19.640 --> 00:36:20.960
In the search thing,


00:36:20.960 --> 00:36:22.660
it's like waiting for an hour or something,


00:36:22.660 --> 00:36:24.260
and then it'll rebuild the search.


00:36:24.260 --> 00:36:28.220
But it could just as well be waiting for a file to appear


00:36:28.220 --> 00:36:29.420
in some kind of upload folder


00:36:29.420 --> 00:36:32.660
and then like start processing that, I don't know.


00:36:32.660 --> 00:36:35.720
Right, so they almost always have this pattern


00:36:35.720 --> 00:36:39.780
of like while true, either wait for an event and then do it


00:36:39.780 --> 00:36:43.140
or chill for a while and then do the thing.


00:36:43.140 --> 00:36:46.500
So my recommendation, my thought here is


00:36:46.500 --> 00:36:49.940
if you combine this with multiprocessing,


00:36:49.940 --> 00:36:54.940
you can often get much, much lower overhead on your server.


00:36:54.940 --> 00:36:57.420
Right? So check this out.


00:36:57.420 --> 00:36:59.620
So here's an example of the search thing


00:36:59.620 --> 00:37:02.480
on TalkByThon search out of Glances.


00:37:02.480 --> 00:37:06.460
Notice it's using 78 megabytes of RAM.


00:37:06.460 --> 00:37:08.620
This is in a show notes, of course.


00:37:08.620 --> 00:37:10.400
This is it just running there in the background.


00:37:10.400 --> 00:37:13.120
Before I started using multiprocessing,


00:37:13.120 --> 00:37:17.860
it was using like 300 megs of RAM constantly on the server


00:37:17.860 --> 00:37:19.620
because it would wait for an hour


00:37:19.620 --> 00:37:22.660
and then it would load up the entire 240 hours


00:37:22.660 --> 00:37:26.100
of text and stuff and process it and do database calls


00:37:26.100 --> 00:37:28.400
and then generate like a search result,


00:37:28.400 --> 00:37:30.820
a search set of keyword maps,


00:37:30.820 --> 00:37:33.780
and then it would refresh those again.


00:37:33.780 --> 00:37:36.260
But normally, it's just resting.


00:37:36.260 --> 00:37:37.800
It puts that stuff back in the database.


00:37:37.800 --> 00:37:40.300
But if you let it actually do the work,


00:37:40.300 --> 00:37:45.080
it will basically not unload those modules


00:37:45.080 --> 00:37:47.360
and unload all that other stuff that happened in there.


00:37:47.360 --> 00:37:49.320
So if you take the function that says,


00:37:49.320 --> 00:37:51.700
just do the one thing in the loop,


00:37:51.700 --> 00:37:53.760
and you just call that with multi-processing,


00:37:53.760 --> 00:37:58.120
it goes from 350 megs to 70 megs, no other work.


00:37:58.120 --> 00:38:00.200
'Cause that little thing fires up, it does all the work,


00:38:00.200 --> 00:38:02.200
and then it shuts back down, and it doesn't get


00:38:02.200 --> 00:38:04.520
all that extra stuff loaded into your process.


00:38:04.520 --> 00:38:06.560
- Okay. - A little, cool, right?


00:38:06.560 --> 00:38:07.400
- It is cool.


00:38:07.400 --> 00:38:10.500
You could, I mean, for special cases like ours,


00:38:10.500 --> 00:38:13.620
I mean, for yours, you could just kick it off yourself,


00:38:13.620 --> 00:38:16.040
right, or have it be part of your published thing


00:38:16.040 --> 00:38:18.080
when you publish the show notes.


00:38:18.080 --> 00:38:20.340
- Yeah, exactly.


00:38:20.340 --> 00:38:23.800
I mean, I could base it on some of that.


00:38:23.800 --> 00:38:25.460
Like, yeah, it could.


00:38:25.460 --> 00:38:28.780
It gets complicated because it's hard to tell


00:38:28.780 --> 00:38:29.860
when that happens.


00:38:29.860 --> 00:38:32.780
There's like a bunch, as you can see,


00:38:32.780 --> 00:38:35.420
like in this example, there's like eight worker processes.


00:38:35.420 --> 00:38:39.220
All right, so which one should be in charge of knowing that?


00:38:39.220 --> 00:38:40.380
I don't know.


00:38:40.380 --> 00:38:42.620
So it's easy to just have that thing running


00:38:42.620 --> 00:38:44.740
and just like, you know, the search will be up to date


00:38:44.740 --> 00:38:49.780
is going but please don't overwhelm the server by loading the entire thing and hanging on


00:38:49.780 --> 00:38:50.780
to it forever.


00:38:50.780 --> 00:38:51.780
>> Exactly.


00:38:51.780 --> 00:38:55.260
>> Yeah, so anyway, I thought that was a fun story to share.


00:38:55.260 --> 00:38:57.260
Let's do this one next.


00:38:57.260 --> 00:39:01.860
We talked about JetBrains fleet, think PyCharm.


00:39:01.860 --> 00:39:08.260
PyCharm is like little cousin that is very much like VS Code, I guess, but as like PyCharm


00:39:08.260 --> 00:39:10.820
heritage.


00:39:10.820 --> 00:39:13.900
So this thing is now out of private beta,


00:39:13.900 --> 00:39:15.220
it's now into public beta.


00:39:15.220 --> 00:39:18.260
So it has like Google Docs type collaboration,


00:39:18.260 --> 00:39:21.540
it has, but it has like PyCharm source code,


00:39:21.540 --> 00:39:24.420
refactoring and deep understanding


00:39:24.420 --> 00:39:26.260
that seems pretty excellent.


00:39:26.260 --> 00:39:29.940
So people can check that out, it looks pretty neat.


00:39:29.940 --> 00:39:31.780
I've done a little bit of playing with it,


00:39:31.780 --> 00:39:32.980
but not too much yet.


00:39:32.980 --> 00:39:35.500
But if you're a VS Code type of person,


00:39:35.500 --> 00:39:37.620
like this might speak to you more than PyCharm.


00:39:37.620 --> 00:39:38.620
So that's out.


00:39:38.620 --> 00:39:42.080
Speaking of PyCharm, I'm gonna be on a webcast


00:39:42.080 --> 00:39:45.120
with Paul Everett on Thursday.


00:39:45.120 --> 00:39:48.680
We're talking about Django and PyCharm tips reloaded.


00:39:48.680 --> 00:39:51.240
So just kind of a bunch of cool things you can do


00:39:51.240 --> 00:39:54.480
to if you're working in a Django project in PyCharm.


00:39:54.480 --> 00:39:56.920
You wanna be awesome and quick and efficient.


00:39:56.920 --> 00:39:58.080
Okay, last one.


00:39:58.080 --> 00:39:58.920
How about this?


00:39:58.920 --> 00:40:01.200
This is Mark.


00:40:01.200 --> 00:40:02.040
Go ahead.


00:40:02.040 --> 00:40:04.680
- This blows me away and it's interesting.


00:40:04.680 --> 00:40:05.920
- This is interesting.


00:40:05.920 --> 00:40:09.640
So we all have got to be familiar with the GDPR.


00:40:09.640 --> 00:40:14.080
I did weeks worth of work reworking the various websites


00:40:14.080 --> 00:40:16.800
to be officially compliant with GDPR.


00:40:16.800 --> 00:40:19.400
You know, like we weren't doing any creepy stuff


00:40:19.400 --> 00:40:22.280
to like, oh, now we got to start stop our tracking


00:40:22.280 --> 00:40:23.120
or anything like that.


00:40:23.120 --> 00:40:25.000
But like, there's certain things about you need to record


00:40:25.000 --> 00:40:28.120
the opt-in explicitly and be able to associate a record


00:40:28.120 --> 00:40:29.680
like that kind of stuff, right?


00:40:29.680 --> 00:40:34.500
So some of us did a bunch of work to make our code GDPR


00:40:34.500 --> 00:40:37.700
compliant, others not so much.


00:40:37.700 --> 00:40:41.840
But the news here is that Denmark has ruled


00:40:41.840 --> 00:40:44.540
that Google Analytics is illegal.


00:40:44.540 --> 00:40:45.740
I mean, like, okay.


00:40:45.740 --> 00:40:49.960
And illegal in the sense that the Google Analytics


00:40:49.960 --> 00:40:54.600
violates the GDPR and basically can't be used.


00:40:54.600 --> 00:40:59.400
I believe France and two other countries


00:40:59.400 --> 00:41:03.860
whose name I'm forgetting have also cited that as well.


00:41:03.860 --> 00:41:07.980
And yeah, more or less, a significant number


00:41:07.980 --> 00:41:11.140
of European countries are deciding


00:41:11.140 --> 00:41:13.460
that Google Analytics just can't be used


00:41:13.460 --> 00:41:16.280
if you're gonna be following the GDPR,


00:41:16.280 --> 00:41:20.980
which I think most companies, in the West at least,


00:41:20.980 --> 00:41:23.100
need to follow.


00:41:23.100 --> 00:41:25.500
- Yeah, so I'm glad.


00:41:25.500 --> 00:41:28.500
I mean, my early days of web stuff,


00:41:28.500 --> 00:41:31.040
I was using Google Analytics.


00:41:31.040 --> 00:41:32.540
Of course, a lot of people do.


00:41:33.820 --> 00:41:37.180
And it's free, they give you all this information free.


00:41:37.180 --> 00:41:38.020
Why not?


00:41:38.020 --> 00:41:39.820
Why are they giving, oh, it's not--


00:41:39.820 --> 00:41:40.640
- Wait a minute.


00:41:40.640 --> 00:41:41.700
- Wait a second.


00:41:41.700 --> 00:41:43.700
They're using you and your website


00:41:43.700 --> 00:41:46.480
to help collect data on everybody that uses your website.


00:41:46.480 --> 00:41:48.020
- Yeah, it seems like such a good trade-off.


00:41:48.020 --> 00:41:50.380
But yeah, I mean, you're basically giving


00:41:50.380 --> 00:41:55.000
every single action on your website,


00:41:55.000 --> 00:41:57.500
giving that information about your users,


00:41:57.500 --> 00:41:59.620
every one of their actions over to Google,


00:41:59.620 --> 00:42:01.460
which seems like a little,


00:42:01.460 --> 00:42:03.820
I could see why that would be looked down upon


00:42:03.820 --> 00:42:05.800
from a GDPR perspective, no doubt.


00:42:05.800 --> 00:42:08.540
By the way, also on that,


00:42:08.540 --> 00:42:11.460
if you look over on Pythonbytes.fm,


00:42:11.460 --> 00:42:13.620
the pay, let's see, does it say anything?


00:42:13.620 --> 00:42:17.380
How many blockers have we got or how many creepy things


00:42:17.380 --> 00:42:19.860
do we have to worry about over here?


00:42:19.860 --> 00:42:22.460
Zero, like we don't use Google Analytics,


00:42:22.460 --> 00:42:26.020
we don't use, yeah, that's just global stats.


00:42:26.020 --> 00:42:28.060
But yeah, we don't use Google Analytics


00:42:28.060 --> 00:42:31.460
or any other form of client-side analytics whatsoever.


00:42:31.460 --> 00:42:34.040
So I'm pretty happy about that actually.


00:42:34.040 --> 00:42:37.300
But check out the video by Steve Gibson.


00:42:37.300 --> 00:42:39.720
It's an excerpt of a different podcast,


00:42:39.720 --> 00:42:41.580
but I think it's worth covering.


00:42:41.580 --> 00:42:42.460
It's pretty interesting.


00:42:42.460 --> 00:42:45.380
- Yeah, it's something to watch at least.


00:42:45.380 --> 00:42:46.460
- Yeah, yeah.


00:42:46.460 --> 00:42:48.460
Ikevu points out in the audience,


00:42:48.460 --> 00:42:49.860
how can you enforce something like that?


00:42:49.860 --> 00:42:52.240
That is Google Analytics being not allowed.


00:42:52.240 --> 00:42:54.340
It's embedded in so many sites everywhere.


00:42:54.340 --> 00:42:56.660
Sometimes you don't even manage it.


00:42:56.660 --> 00:42:58.540
you just enter an analytics ID.


00:42:58.540 --> 00:43:02.660
Yeah, it's honestly a serious problem.


00:43:02.660 --> 00:43:05.700
Like for example, on our Python Bytes website,


00:43:05.700 --> 00:43:08.380
if you go to one of the newer episodes,


00:43:08.380 --> 00:43:11.780
they all have a nice little picture.


00:43:11.780 --> 00:43:14.740
That picture is from the YouTube thumbnail.


00:43:14.740 --> 00:43:17.780
Like it literally pulls it straight from YouTube.


00:43:17.780 --> 00:43:19.700
The first thing I tried to do, Brian,


00:43:19.700 --> 00:43:21.820
was I said, well, here's the image


00:43:21.820 --> 00:43:25.260
that YouTube uses for the poster on the video.


00:43:25.260 --> 00:43:27.720
I'll just put a little image where the source is


00:43:27.720 --> 00:43:31.420
YouTube.com/video poster or whatever the heck the URL is.


00:43:31.420 --> 00:43:31.960
>> Yeah.


00:43:31.960 --> 00:43:33.920
>> Even for that, Google started


00:43:33.920 --> 00:43:36.560
putting tracking cookies on all of our visitors.


00:43:36.560 --> 00:43:38.600
Come on Google, it's just an image.


00:43:38.600 --> 00:43:39.280
No.


00:43:39.280 --> 00:43:40.320
>> Tracking cookies.


00:43:40.320 --> 00:43:42.760
>> Yeah, or cookies.


00:43:42.760 --> 00:43:48.160
What I had to end up doing is the website on the server side,


00:43:48.160 --> 00:43:50.760
looks at the URL, downloads the images,


00:43:50.760 --> 00:43:52.960
puts it in MongoDB, and when a visitor comes,


00:43:52.960 --> 00:43:55.340
we serve it directly out of MongoDB with no cookies.


00:43:55.340 --> 00:44:00.400
Like it is not trivial to avoid getting that kind of stuff in there


00:44:00.400 --> 00:44:02.720
because even when you try not to,


00:44:02.720 --> 00:44:05.640
it shows up a lot of times like Ikovu mentioned.


00:44:05.640 --> 00:44:06.000
>> Yeah.


00:44:06.000 --> 00:44:07.400
>> The way it gets enforced,


00:44:07.400 --> 00:44:09.560
somebody says, here's a big website,


00:44:09.560 --> 00:44:12.620
they're violating the GDPR.


00:44:12.620 --> 00:44:14.340
We're going to recommend,


00:44:14.340 --> 00:44:16.640
I'm going to report them basically is what happens I think.


00:44:16.640 --> 00:44:21.820
>> Yeah. But I think for small fish like me or something,


00:44:21.820 --> 00:44:25.020
It's just if a country says don't do that,


00:44:25.020 --> 00:44:28.900
maybe I won't because they might have good reasons.


00:44:28.900 --> 00:44:30.660
>> Yeah. If you're a business,


00:44:30.660 --> 00:44:31.740
you got to worry a lot more.


00:44:31.740 --> 00:44:35.120
I don't think any individual will ever get in trouble for that.


00:44:35.120 --> 00:44:37.020
But it's also, I mean,


00:44:37.020 --> 00:44:41.620
think about how much you're exposing everybody's information.


00:44:41.620 --> 00:44:45.120
You can't know before you go to a website whether that's going to happen.


00:44:45.120 --> 00:44:46.900
It's already happened once you get there.


00:44:46.900 --> 00:44:50.260
So I guess see our previous conversation about ad blockers,


00:44:50.260 --> 00:44:52.660
Next DNS, do we hate creators?


00:44:52.660 --> 00:44:53.360
No.


00:44:53.360 --> 00:44:54.360
Do we hate this kind of stuff?


00:44:54.360 --> 00:44:55.060
Yes.


00:44:55.060 --> 00:44:55.560
Yeah.


00:44:55.560 --> 00:44:56.460
Anyway.


00:44:56.460 --> 00:44:57.960
Also, information is interesting.


00:44:57.960 --> 00:45:01.860
So but just pay attention to what you have because you don't need Google


00:45:01.860 --> 00:45:05.660
Analytics to just find out which pages are viewed most.


00:45:05.660 --> 00:45:06.260
Absolutely.


00:45:06.260 --> 00:45:07.860
You can use other ways.


00:45:07.860 --> 00:45:09.160
Yep.


00:45:09.160 --> 00:45:09.460
All right.


00:45:09.460 --> 00:45:12.260
Well, that's a bunch of extras, but there they are.


00:45:12.260 --> 00:45:13.960
That's so serious though.


00:45:13.960 --> 00:45:15.260
Do we have something funny?


00:45:15.260 --> 00:45:16.160
We do.


00:45:16.160 --> 00:45:18.860
Okay, something I got some this is very much.


00:45:18.860 --> 00:45:20.720
I picked this one for you, Brian.


00:45:20.720 --> 00:45:21.560
- Okay.


00:45:21.560 --> 00:45:22.780
- So this has to do with testing.


00:45:22.780 --> 00:45:23.860
Tell me what's in this picture here.


00:45:23.860 --> 00:45:25.260
Describe for our listeners.


00:45:25.260 --> 00:45:26.640
- I love this picture.


00:45:26.640 --> 00:45:29.660
This is great.


00:45:29.660 --> 00:45:32.420
So it says all unit test passing


00:45:32.420 --> 00:45:35.060
and it is a completely shattered sink.


00:45:35.060 --> 00:45:38.620
The only thing left of the sink is the faucet


00:45:38.620 --> 00:45:41.040
is still attached to some porcelain.


00:45:41.040 --> 00:45:43.680
You can turn it on and it goes down the drain.


00:45:43.680 --> 00:45:44.900
Actually, so you've already,


00:45:44.900 --> 00:45:46.940
you've even got integration tests passing.


00:45:46.940 --> 00:45:47.780
- Yeah, you do.


00:45:47.780 --> 00:45:51.980
Yeah, it's pretty, not a hundred percent coverage, but yeah.


00:45:51.980 --> 00:45:52.940
Right.


00:45:52.940 --> 00:45:54.820
Not a hundred percent coverage of the sink.


00:45:54.820 --> 00:45:55.940
Yeah.


00:45:55.940 --> 00:45:58.060
There's this sink and it's completely smashed.


00:45:58.060 --> 00:46:02.040
There's just like just a little tiny chunk fragment of it left, but it's got


00:46:02.040 --> 00:46:04.540
the drain and the faucet is still pouring into it.


00:46:04.540 --> 00:46:05.360
Unit test pass.


00:46:05.360 --> 00:46:05.740
I love it.


00:46:05.740 --> 00:46:06.540
Yeah.


00:46:06.540 --> 00:46:10.940
You might even cut yourself if you tried to wash your hands in this, but,


00:46:10.940 --> 00:46:13.020
but funny, you might, you might.


00:46:13.020 --> 00:46:15.540
Well, that's good.


00:46:15.540 --> 00:46:16.500
Fun as always.


00:46:16.500 --> 00:46:17.420
Thanks for being here.


00:46:17.420 --> 00:46:18.260
- Thank you.


00:46:18.260 --> 00:46:19.100
- Yeah.


00:46:19.100 --> 00:46:19.920
See you later.


00:46:19.920 --> 00:46:21.380
Thank you everyone for listening.

