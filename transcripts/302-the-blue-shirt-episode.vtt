WEBVTT

00:00:00.001 --> 00:00:05.980
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.980 --> 00:00:11.820
This is episode 302, recorded September 20th, 2022.

00:00:11.820 --> 00:00:12.880
I'm Michael Kennedy.

00:00:12.880 --> 00:00:14.140
And I'm Brian Okken.

00:00:14.140 --> 00:00:15.060
Hey, Brian. How are you doing?

00:00:15.060 --> 00:00:17.400
I'm great. It's a nice day.

00:00:17.400 --> 00:00:20.920
Yeah, it is a lovely fall day here in the Pacific Northwest.

00:00:20.920 --> 00:00:24.200
Dry as can be. I just had a very nice walk with my dog.

00:00:24.200 --> 00:00:24.780
Nice.

00:00:24.780 --> 00:00:28.540
It's going to be hard to go back to work after this podcast, looking out the window.

00:00:29.380 --> 00:00:31.880
I give myself 50-50 chances of making it.

00:00:31.880 --> 00:00:34.180
Yeah, I got to go back to the other screen.

00:00:34.180 --> 00:00:37.180
That's right. I'm going to be looking that way.

00:00:37.180 --> 00:00:43.760
Awesome. Well, before we kick off the show, I also want to say thank you once again to Microsoft for Startups.

00:00:43.760 --> 00:00:45.180
They're sponsoring this episode again.

00:00:45.180 --> 00:00:48.340
And huge supporters of the show. Tell you more about that later.

00:00:48.340 --> 00:00:52.900
Brian, could you just whisper to me about your next project here?

00:00:52.900 --> 00:00:54.240
Code Whisperer.

00:00:54.240 --> 00:00:58.800
So we've talked about, I think we've talked about GitHub Copilot before.

00:00:59.260 --> 00:01:02.560
And I'm not sure if we talked about Amazon's Code Whisperer yet.

00:01:02.560 --> 00:01:04.100
I don't think so.

00:01:04.100 --> 00:01:07.680
Okay. So Code Whisperer is a similar kind of thing, I think.

00:01:07.680 --> 00:01:09.440
I haven't tried it myself, actually.

00:01:09.440 --> 00:01:13.520
But there's an article by Brian Tarbox that says,

00:01:13.520 --> 00:01:17.040
Can Amazon's Code Whisperer write better Python than you?

00:01:17.580 --> 00:01:24.760
I brought this up because I've been thinking about it a lot, about these AI copilot sort of things and stuff.

00:01:24.760 --> 00:01:31.660
So Amazon's offering looks like it's almost, I don't know if it's a similar sort of model.

00:01:31.660 --> 00:01:35.280
In this example that he's giving, he has a bunch of examples.

00:01:36.020 --> 00:01:39.700
He's going through, you write a description.

00:01:39.700 --> 00:01:40.760
He's writing a description.

00:01:40.760 --> 00:01:42.100
I don't know if this is the only way.

00:01:42.100 --> 00:01:44.460
But basically, describe the function you want.

00:01:44.460 --> 00:01:46.720
Like, function to open an S3 file.

00:01:46.720 --> 00:01:48.900
And it writes one for you.

00:01:48.900 --> 00:01:50.200
And even titles it.

00:01:50.440 --> 00:01:54.380
So you give it a code comment and it, like, pops out some code.

00:01:54.380 --> 00:01:59.740
Now, for this is kind of an interesting thing around, especially around Amazon services,

00:01:59.740 --> 00:02:01.200
because there's a lot of Amazon services.

00:02:01.200 --> 00:02:03.920
And, you know, you do a lot of API lookups and stuff.

00:02:03.920 --> 00:02:07.440
So some help directly around APIs.

00:02:07.440 --> 00:02:11.780
Actually, I think that that area makes kind of some sense.

00:02:11.780 --> 00:02:16.420
Although, if you need an AI to figure out the API, maybe the API is a little complicated.

00:02:16.420 --> 00:02:17.080
Just saying.

00:02:17.080 --> 00:02:17.320
Exactly.

00:02:19.000 --> 00:02:26.700
But the discussion is an interesting one through here about, basically, about the code that it gets out.

00:02:26.700 --> 00:02:30.540
And it's really not talking about the morals of it or anything.

00:02:30.540 --> 00:02:34.120
It's just really talking about using it and how good it is.

00:02:34.120 --> 00:02:37.360
The punchline at the end.

00:02:37.360 --> 00:02:44.620
So the author admits that the title was intended to be clickbaity.

00:02:44.620 --> 00:02:48.000
And, you know, which is cool.

00:02:48.000 --> 00:02:49.260
Because it's the internet.

00:02:49.260 --> 00:02:49.900
Yeah.

00:02:49.900 --> 00:03:01.580
But despite that, he, in walking through it, he thinks that it's actually, it's just making him a little bit better because it's more efficient.

00:03:01.580 --> 00:03:03.400
And I'd like to quote a little bit.

00:03:03.640 --> 00:03:05.340
It's a little bit better.

00:03:05.340 --> 00:03:06.400
It's a little bit better.

00:03:06.400 --> 00:03:06.820
It's a little bit better.

00:03:06.820 --> 00:03:07.380
It's a little bit better.

00:03:07.380 --> 00:03:07.380
But it's a little bit better.

00:03:07.380 --> 00:03:07.880
It's a little bit better.

00:03:07.880 --> 00:03:07.940
It's a little bit better.

00:03:07.940 --> 00:03:08.440
But it's a little bit better.

00:03:08.440 --> 00:03:14.080
spurs code is better or worse than mine is at the margins and not really important. What is

00:03:14.080 --> 00:03:19.980
significant is that it has the potential to save me a ton of time and mental space to focus on

00:03:19.980 --> 00:03:24.620
improving, refactoring, and testing. It makes me a better programmer by taking on some of the

00:03:24.620 --> 00:03:31.540
undifferentiated heavy lifting. And I kind of like that idea of it kind of takes away the blank

00:03:31.540 --> 00:03:38.300
canvas situation of like, you know, it might show you how it might one way to do it. And you can look

00:03:38.300 --> 00:03:42.800
at it and go, Oh, no, I wouldn't do it that way. And then you can change it. But you've you now you're

00:03:42.800 --> 00:03:48.820
on your second draft already, instead of so it's letting the AI do the first draft. It's kind of a

00:03:48.820 --> 00:03:54.720
neat idea. I was looking he did this data class one, for instance, this kind of blew me away. He's got an

00:03:54.720 --> 00:04:03.100
inventory item. And, and it's already any writes a description for a function that returns whether or

00:04:03.100 --> 00:04:10.800
not an item costs more than $10. And, and it returns, it writes a function called expensive,

00:04:10.800 --> 00:04:16.620
like he didn't say expensive in the title at all. But it's interesting. It said expensive,

00:04:16.620 --> 00:04:19.520
and then it returns whether or not the unit price is greater than 10.

00:04:19.820 --> 00:04:25.800
And it realized it was within a class. And so it used self dot unit price and not just some

00:04:25.800 --> 00:04:28.940
unassociated function that returns greater than 10.

00:04:28.940 --> 00:04:36.600
Yeah. So it is interesting. Yeah, yeah. Anyway, interesting discussion. And then also interesting

00:04:36.600 --> 00:04:41.580
looking at the code, he tried it against test code, he said, I want to function the test the inventory

00:04:41.580 --> 00:04:47.120
class. Well, one, I think it was probably maybe this was a prompting problem. You shouldn't have one

00:04:47.120 --> 00:04:53.480
function to test an entire class. My, my, my druthers, but it did a decent job of at least

00:04:53.480 --> 00:04:57.980
giving you a first start of like, one of the things to test is you need to test the expensive thing.

00:04:57.980 --> 00:05:03.060
You need to function, you need to test the total cost. It just did it all in one function though. So

00:05:03.060 --> 00:05:06.960
I mean, I guess that's what he asked for, but coming up with the total cost, which is computed.

00:05:06.960 --> 00:05:10.760
That's kind of interesting. Yeah. Yeah. That is interesting. Yeah.

00:05:10.760 --> 00:05:16.240
And the base item is a unit price of $10 and there's five of them. And so in the test,

00:05:16.280 --> 00:05:21.820
it asserted the total cost is 50. Yeah, definitely. Interesting. Interesting to definitely look at

00:05:21.820 --> 00:05:28.300
and good. And it might help you think about other test cases around it. So, so I guess cool. I wanted

00:05:28.300 --> 00:05:32.320
to point out while I'm thinking about it, one of the reasons why I brought this up is I just listened

00:05:32.320 --> 00:05:38.920
to a changelog episode with Simon Willison called stable diffusion breaks the internet. And this is

00:05:38.920 --> 00:05:45.180
focused on AI driven artwork, which is definitely interesting and interesting conversation,

00:05:45.180 --> 00:05:50.560
but in it they talk, since these are all programmers, they talk, talk about how this,

00:05:50.560 --> 00:05:56.920
the same sort of argument applies around, around code generation of the morality of it. And,

00:05:56.920 --> 00:06:02.180
and then aside more morals aside or in legal stuff aside, it's happening. So how do you,

00:06:02.180 --> 00:06:11.880
Simon brings up the term of basically just you need to be one level of abstraction above the AI system. So

00:06:12.200 --> 00:06:18.120
just to make sure that you were still adding value and the original author of this article talked about

00:06:18.120 --> 00:06:24.220
this as well of it's, it's not about really not thinking it's about freeing up some of your brain

00:06:24.220 --> 00:06:29.820
space to do other things. So in interesting. So, yeah, it is interesting. I mean, there's certain

00:06:29.820 --> 00:06:35.440
things that you probably don't just don't need to remember. You know, I'm thinking of, do I really need to

00:06:35.440 --> 00:06:42.240
remember all the steps in the connection string schema for connecting to SQLAlchemy? Probably not. I could

00:06:42.240 --> 00:06:47.760
just say connect to SQL, you know, connect SQLAlchemy to a Postgres database and boom, it gives me,

00:06:47.760 --> 00:06:55.700
you know, create the metadata, the metadata base class, and then create an engine and create a connection

00:06:55.700 --> 00:07:00.440
and you're buying the engine, all those steps, right? Like if you could just kick that kind of

00:07:00.440 --> 00:07:05.300
stuff out, that's something you want for a project and you just never do. It's not like, boy, I'm sure

00:07:05.300 --> 00:07:09.640
I'm not good at connecting to SQLAlchemy. I'm just not a good programmer, I guess, right? You look it up,

00:07:09.640 --> 00:07:13.080
you put it in there and you go. And so if you didn't have to take the step of looking up, that's kind of

00:07:13.080 --> 00:07:18.620
cool. Yeah. I also like that. I didn't think about this before. And I think GitHub actually intended you

00:07:18.620 --> 00:07:24.000
to think about it like this with naming it Copilot. It's not intended to take over your work, but it's

00:07:24.000 --> 00:07:29.020
like sitting down with somebody that kind of knows what they're doing and being in pair programming with

00:07:29.020 --> 00:07:34.480
them. Yeah. You can't turn off your brain, but maybe you can ease up a little bit. So anyway.

00:07:34.480 --> 00:07:39.400
Wait, before you close this, scroll down to this black and white code editor. Boy, look at that.

00:07:39.400 --> 00:07:43.560
If you check out this article, there is a, I don't even know what to make of it. Because to me,

00:07:43.560 --> 00:07:51.580
it looks like a super retro early macOS, like macOS one type of UI, but then the file is c colon

00:07:51.580 --> 00:07:58.920
backslash CD. It's just a mix of like beautiful retro. Yeah. Well, he was talking about the first

00:07:58.920 --> 00:08:07.040
recorded code completion appears in the Pascal editor called Alice in 1985. So yeah. And I guess that's it.

00:08:07.040 --> 00:08:12.540
Well, that's a, that's a heck of an editor. Super cool. All right. On to the next one.

00:08:12.540 --> 00:08:17.720
Yeah. Two things real quick. I just want to point out or sort of make a comment. It's not pointed out

00:08:17.720 --> 00:08:23.180
this morning. I had to make a new API because one thing I've learned about writing courses that depend

00:08:23.180 --> 00:08:29.100
on other people's APIs, these other people suck at keeping their APIs running. They either decide,

00:08:29.100 --> 00:08:34.120
you know what, this is costing me $10,000 a month and I'm going to have to charge for it. Boo hoo. No,

00:08:34.120 --> 00:08:37.860
just kidding. That's a reasonable reason to change, but it changes like with the open weather API

00:08:37.860 --> 00:08:44.040
or like this one for this Twilio course I was using. So I spent the morning a little bit of

00:08:44.040 --> 00:08:50.620
yesterday and this morning, just doing a complete from scratch FastAPI API. And what a ton of fun

00:08:50.620 --> 00:08:56.240
it is to just work with FastAPI and get to build out all sorts of neat, neat little things. And so,

00:08:56.240 --> 00:09:00.440
you know, I just want to shout out if you're, if you're building something with FastAPI or you're

00:09:00.440 --> 00:09:04.520
building an API, you can definitely give FastAPI. Look, there's a lot of, a lot of neat things you can do

00:09:04.520 --> 00:09:09.560
to put together. Like here's a whole little website. It even does CSS and images and sort of,

00:09:09.560 --> 00:09:14.540
sort of chameleon templates. I mean, it's basically static, but anyway, fun stuff and continues to be

00:09:14.540 --> 00:09:21.180
fun. And so which, which, course is this for? Is it for the Python powered chat apps with Twilio

00:09:21.180 --> 00:09:26.900
and SendGrid, which is actually a free course, but it sets up a chat bot that you order from like a

00:09:26.900 --> 00:09:33.580
bakery type thing over WhatsApp. And the problem is if you go to the APIs that the WhatsApp thing was

00:09:33.580 --> 00:09:39.420
using, they just 500 or 404 or one of those two things, neither of which is super useful for the

00:09:39.420 --> 00:09:43.980
course. So I recreated it in FastAPI this morning, which is cool. Now it lives on the internet,

00:09:43.980 --> 00:09:48.600
but that's not what I want to talk about as super as that is. I want to talk about Apache

00:09:48.600 --> 00:09:51.060
superset. Okay. Have you heard of superset?

00:09:51.400 --> 00:09:53.040
No. Well, the word I know.

00:09:53.040 --> 00:09:58.540
Of course. But Apache superset is a modern data exploration and visualization platform. And I came

00:09:58.540 --> 00:10:02.500
across that the other day and I'm like, what the heck is this? I haven't even heard of this. It has

00:10:02.500 --> 00:10:10.480
almost 50,000 GitHub stars. Okay. That's insane. And is put together, by back, Max Bushman,

00:10:10.480 --> 00:10:15.220
um, co also the creator of Apache airflow, which is pretty cool, right?

00:10:15.440 --> 00:10:21.660
So this is, this turns out to be a really interesting program and it's written in Python

00:10:21.660 --> 00:10:25.660
and TypeScript. It's like really front end heavy because it has a lot of visualizations and stuff,

00:10:25.660 --> 00:10:30.000
right? But all the backend stuff, it's all the things that you would know. It's Flask, it's Redis,

00:10:30.000 --> 00:10:35.620
Celery, many of the, you know, pandas and data science tools you would know, but it's not exactly

00:10:35.620 --> 00:10:42.120
a tool for developers like Jupyter. So Jupyter would be a way that data scientists who know Python would sit

00:10:42.120 --> 00:10:48.380
down and leverage their Python skills to check out data and explore things. This one is really almost

00:10:48.380 --> 00:10:53.180
meant for like people who would say, I'm going to fire up Excel and see what's going on, or I'm going

00:10:53.180 --> 00:10:58.800
to fire up some BI tool like Tableau. And I want to look at it a little bit and see what's going on.

00:10:58.800 --> 00:11:06.080
And it's also open source and written in Python, which means it has APIs and extensions and plugins in

00:11:06.080 --> 00:11:10.540
Python, which is pretty excellent. So it has a way to explore your data. Like Brian, look at this

00:11:10.540 --> 00:11:13.720
picture. What do you think? It's, I don't know what it is, but it's pretty.

00:11:13.720 --> 00:11:19.860
It's glorious, right? Like it's a fantastic way to visualize. You know, here's 25 contributors to a

00:11:19.860 --> 00:11:24.640
stream over time. You can sort of see like the growth of their contributions or not. And so the way you

00:11:24.640 --> 00:11:29.680
generate this is you just connect it to a database. It gives you the table. You say, make a chart out of

00:11:29.680 --> 00:11:35.280
this database and you draggy, droppy, the pieces over and boom, there it goes. And it doesn't have to

00:11:35.280 --> 00:11:41.040
just be the data in the database. It can be a computed field. So you could say, I want to graph

00:11:41.040 --> 00:11:48.120
the sum of this join onto like the orders of each customer, or I want to see the max order for each

00:11:48.120 --> 00:11:52.160
customer, you know, things like that. Right. So that's pretty cool. So you can explore data like

00:11:52.160 --> 00:11:57.100
that. You can create these dashboards, these live dashboards to see what's the state of our

00:11:57.100 --> 00:12:03.860
business today. And it even comes with a SQL IDE, all of this in the browser, very Jupyter-esque.

00:12:03.860 --> 00:12:04.780
Pretty cool.

00:12:04.780 --> 00:12:06.300
This is pretty neat. Yeah.

00:12:06.300 --> 00:12:13.020
Yeah. Very, very neat. And it connects to, I told you it was Python. It connects to all of its databases

00:12:13.020 --> 00:12:18.720
using SQLAlchemy. And so any database that can be a data source for SQLAlchemy, you know,

00:12:18.720 --> 00:12:24.560
obviously Microsoft SQL server, Postgres, MySQL, but you know, things you might not think of like

00:12:24.560 --> 00:12:30.240
Vertica or Druid or Amazon Redshift or Google BigQuery, all of these different data sources,

00:12:30.240 --> 00:12:36.000
Databricks are available as a data source because SQLAlchemy knows how to talk to it. And this just

00:12:36.000 --> 00:12:40.900
leverages SQLAlchemy. Yeah. Hey, hold it there for a sec. One of the things I learned recently,

00:12:40.900 --> 00:12:46.880
which I don't know why I never got this before, but look at the SQLite logo. Yes. It's got a quill in

00:12:46.880 --> 00:12:53.980
it. Did you, did you know that before that it's a quill for SQLite? Oh, quill. I did not put that

00:12:53.980 --> 00:13:00.340
together now. How funny. Now we know. Cool. So anyway, yeah, people can check this out. It's

00:13:00.340 --> 00:13:06.680
kind of a little bit intense to run, but you can pip install it, but probably the better way to do it,

00:13:06.680 --> 00:13:13.380
you want to just try it out is to install it locally with Docker. So for me, for example, I just

00:13:13.380 --> 00:13:17.980
put in the GitHub repo and then went in there and said Docker compose, gave it the YAML file and said,

00:13:17.980 --> 00:13:19.780
pull and then up and off it goes.

00:13:19.780 --> 00:13:24.120
So this is not a service. This is just something you can download and you run then.

00:13:24.120 --> 00:13:28.840
It's something you can download and run, but it has a lot of infrastructure bits clicking together.

00:13:28.840 --> 00:13:37.400
Okay. And so, when I interviewed Max Bushman, he actually is now the CEO and founder of preset,

00:13:37.400 --> 00:13:42.920
which is superset as a service. So if you want to, if you want to have someone else host it for you,

00:13:42.920 --> 00:13:47.480
you can go check it out with them. Right. But it's also a thing you can just run yourself,

00:13:47.480 --> 00:13:51.740
but look how popular it is. Almost 50,000 get up stars, 10,000 forks. And I just learned of it.

00:13:51.740 --> 00:13:52.300
That's nuts.

00:13:52.300 --> 00:13:56.140
Well, I mean, you know, go figure. People actually want to know what's in their data.

00:13:56.140 --> 00:13:57.300
I know.

00:13:57.300 --> 00:13:58.840
Weirdos.

00:13:58.840 --> 00:14:04.080
Yeah. It's so weird. What I think is cool about it is it lets you connect into like your live

00:14:04.080 --> 00:14:08.740
operational data, not just like, Oh, I downloaded a CSV and now I can ask questions. Right. You can just

00:14:08.740 --> 00:14:12.000
like whatever the current data is, let's get that and build a dashboard around it.

00:14:12.080 --> 00:14:17.120
Pretty awesome. Yeah. Yeah. All right. Well, superset, if people need an alternative to Excel

00:14:17.120 --> 00:14:22.880
or BI or Tableau or whatever, check out superset. It's very, very Python friendly and looks pretty

00:14:22.880 --> 00:14:23.140
nice.

00:14:23.140 --> 00:14:24.220
You know what else is nice?

00:14:24.220 --> 00:14:24.760
Tell me.

00:14:24.760 --> 00:14:27.120
Microsoft for startups.

00:14:27.120 --> 00:14:33.640
Ah, they are. They are very nice. So yes, it's time to tell everyone about our sponsor,

00:14:33.640 --> 00:14:34.140
isn't it, Brian?

00:14:34.140 --> 00:14:34.580
Yeah.

00:14:34.640 --> 00:14:38.740
Let me tell you all about Microsoft for startups. They created Microsoft for startups, founders

00:14:38.740 --> 00:14:46.060
hubs to help give early stage startups, the support that they need to be successful. If you are dreaming

00:14:46.060 --> 00:14:52.820
of, or in these stages of an early stage startup, you know, you should go apply. And the link at the

00:14:52.820 --> 00:15:00.000
bottom in the show notes is by them by set of them slash founders hub 2022, all one word go over

00:15:00.000 --> 00:15:04.560
there and apply is completely free to apply. You don't have to be third party verified. You don't have

00:15:04.560 --> 00:15:10.760
to be VC funded. If they think your startup has merit, you're in the program program comes with

00:15:10.760 --> 00:15:17.580
many thousands of dollars of cloud credits. You can, you get some to start. And as you make your

00:15:17.580 --> 00:15:22.640
way through different stages of your life cycle, you get a bunch more, but what's maybe even more

00:15:22.640 --> 00:15:29.640
important is access to their mentorship network. So there's a reason that Silicon Valley is the

00:15:29.640 --> 00:15:34.480
heart of so many startups. And it's not just, you know, the nice weather, if anything,

00:15:34.480 --> 00:15:38.620
I don't encourage people to go outside and not work on their projects, right? It's the network

00:15:38.620 --> 00:15:44.820
and it's the connections. And if you live somewhere else, or if you're not in that space, it's very

00:15:44.820 --> 00:15:51.240
hard to get connected with the right people to make the right steps, right? So this program will get you

00:15:51.240 --> 00:15:56.200
set up there. So in addition to all the cloud credits and so on, you have access to this founders

00:15:56.200 --> 00:16:01.280
network where you can book one-on-one meetings with hundreds of different mentors, many of whom are

00:16:01.280 --> 00:16:08.720
founders themselves that are experts in areas such as idea validation, fundraising, management and

00:16:08.720 --> 00:16:13.540
coaching, sales and marketing. That's the one that's the toughest, I think. If you can nail that,

00:16:13.540 --> 00:16:18.980
you're golden. So make your idea a reality today with a critical support for Microsoft for startups,

00:16:18.980 --> 00:16:25.840
Founders Hub. Check them out at pythonbytes.fm/foundershub 2022. Thanks again to Microsoft for

00:16:25.840 --> 00:16:30.660
supporting our show. Yeah. Thank you. Yeah. Indeed. All right, Brian. Now what you got?

00:16:30.660 --> 00:16:37.860
Well, I want to share something that Jeremy Page from the chat says, I thought SQL, always thought the

00:16:37.860 --> 00:16:43.540
SQLite logo was an homage to TCL and I've got the logo for TCL. So maybe, I don't know.

00:16:44.100 --> 00:16:53.000
Perhaps. Interesting. So, but I wanted to talk about recipes from Python SQLite again, recipes from Python

00:16:53.000 --> 00:17:00.660
SQLite docs. So this is kind of a, there's a, this is an article by, I wrote it down, I promise I did.

00:17:00.660 --> 00:17:09.760
Redowan Delaware, cool name. So this, he was going through the SQLite three docs on the Python docs.

00:17:09.760 --> 00:17:15.000
And there's a, there's a lot of examples, but some of them don't have actual examples. It just talks

00:17:15.000 --> 00:17:21.940
about the API. And so he decided to write out some of the examples as little code snippets. And I really

00:17:21.940 --> 00:17:27.460
like this. If you're learning SQLite or even, you're just want to learn not SQLite in particular, but

00:17:27.460 --> 00:17:33.040
databases. These are concepts that apply to a lot of things. So he's, he's got, of course, whether or not

00:17:33.040 --> 00:17:38.640
you can execute individual statements or batch statements. So he's got little examples for that

00:17:38.640 --> 00:17:45.300
goes into this is interesting. I thought was user defined callbacks. I thought this was really cool.

00:17:45.300 --> 00:17:51.700
For instance, a scalar function, he defined a, and I knew that like you could put user defined functions

00:17:51.700 --> 00:17:59.400
in databases, but I haven't ever done that really. He has a, a hash function, SHA256, that creates a hash

00:17:59.400 --> 00:18:05.420
for passwords. And then he shows how to use that when he passes in a username and password into the

00:18:05.420 --> 00:18:10.080
database, how it turns it into a hash, hashes it before it stores it.

00:18:10.080 --> 00:18:16.720
That is cool. I never knew you could do that. Here's a Python function passed over as part of a

00:18:16.720 --> 00:18:21.580
passed over to SQLite. And then the SQL statements can call it. That's, that's real cool.

00:18:21.580 --> 00:18:26.860
Yeah. I mean, there's a special syntax. So that's good that there's these examples of like insert into

00:18:26.860 --> 00:18:32.520
user values, users values, and then this question mark and SHA256 question mark.

00:18:32.520 --> 00:18:37.640
Also, that's fantastic that that's being shown because that's the parametrized,

00:18:37.640 --> 00:18:40.660
then the anti little Bobby tables version.

00:18:40.660 --> 00:18:41.220
Okay.

00:18:41.220 --> 00:18:45.800
Which is the best practice, right? The alternative is something worse.

00:18:46.880 --> 00:18:53.100
Yeah. And then, you know, aggregate functions, which kind of got lost here, but there's a whole

00:18:53.100 --> 00:19:00.240
bunch of really cool examples of using, using SQLite and, and they're really tiny examples. And so the,

00:19:00.240 --> 00:19:04.720
one of the other things I wanted to share the reasons I wanted to share this article is I think

00:19:04.720 --> 00:19:11.100
this is a really great way to learn an API or learn a service is to write these little example

00:19:11.100 --> 00:19:17.720
things in little code snippets and try it out. Try it out with a table that you're creating that only

00:19:17.720 --> 00:19:22.400
has two or three elements in it so that you can, you can play with it and, and you can get your head

00:19:22.400 --> 00:19:27.500
around what you think the answer should be and what it does. The only thing I think I'd probably add,

00:19:27.500 --> 00:19:33.200
of course, is if you're going to do little code snippets, these all have to be in separate files,

00:19:33.200 --> 00:19:38.820
right? Unless you just write test functions. So this is a great use for pytest. I use it all the time.

00:19:38.820 --> 00:19:43.280
If I'm learning something, I just do these little code snippets, but I do them within a test function.

00:19:43.280 --> 00:19:47.760
And then it can be, it's not really testing anything except my own knowledge, but I can run

00:19:47.760 --> 00:19:52.260
them just by right clicking on the, or clicking on the little arrow that the editor has for each

00:19:52.260 --> 00:19:59.460
little function. So just rerun the failed test until, until I understand it. Yeah. Oh yeah. Very cool.

00:19:59.460 --> 00:20:03.040
Anyway. All right. How about something we don't understand? Okay.

00:20:03.040 --> 00:20:08.500
Let me take you over, let me take you over to a weird world of cascading consequences. So there's

00:20:08.500 --> 00:20:16.340
this guy who is a assistant professor at NYU Tandon security and reverse engineering person named

00:20:16.340 --> 00:20:24.760
Brandon Dolan Gavit. And there's this tweet here over to his blog post saying, a new blog post in which I

00:20:24.760 --> 00:20:31.000
I download four terabytes of Python packages containing native X86 libraries, you know,

00:20:31.000 --> 00:20:38.420
something that's done some C++ thing like G event or pandas, one of those numpy that then bundles

00:20:38.420 --> 00:20:45.360
it into a wheel. And apparently there's a bug in one of the C compilers that if you pass dash F

00:20:45.360 --> 00:20:51.620
fast dash math, it will potentially alter the floating point behavior of your program. If you

00:20:51.620 --> 00:20:56.360
compile it with that. All right. So we're in Python, we don't compile things that often. What do we care?

00:20:56.360 --> 00:21:04.020
Well, what this does is it reconfigures how the process uses like some low level registers,

00:21:04.020 --> 00:21:10.040
but some feature of the CPU on how it does floating point math. And because when the library is loaded,

00:21:10.040 --> 00:21:16.140
it changes that feature while it changes it for the entire program, AKA your program. That doesn't

00:21:16.140 --> 00:21:22.060
sound great. Does it? No. So let's, let's dive in. So the article is called someone's been messing

00:21:22.060 --> 00:21:28.880
with my sub normals, sub normals, I suppose being an aspect of floating point computations. So here he

00:21:28.880 --> 00:21:36.800
is in Python 3.8 and he says from transformers import code gen for causal LM. And that's all they,

00:21:36.800 --> 00:21:41.960
it's all he wanted. This is in IPython terminal. And it starts bumping out all these warnings.

00:21:41.960 --> 00:21:46.960
NumPy core get limits. User warning, the value of the smallest subnormal for class

00:21:46.960 --> 00:21:52.340
numpy.float32 type is zero. Over and over and over these start popping out. It's like,

00:21:52.340 --> 00:21:56.860
hmm, well, warnings about floating point numbers sounds bad. What do you think?

00:21:56.860 --> 00:21:57.400
Yeah.

00:21:57.400 --> 00:22:05.780
So it turns out that something, not numpy, but something that is in this library was compiled with

00:22:05.780 --> 00:22:13.560
this dash FF math dash fast flag. When it got imported, it changed how numpy was working. Okay.

00:22:13.560 --> 00:22:19.860
So it says, what were the problems? It says, well, it changes the floating point unit behavior that's on

00:22:19.860 --> 00:22:25.460
the CPU, the actual FPU. I remember when, by the way, CPUs didn't come with that. Like I was trying to

00:22:25.460 --> 00:22:31.760
decide with my first computer to get a 486 SX or DX. And I got the DX because it came with a floating

00:22:31.760 --> 00:22:39.120
point unit on the CPU. Anyway, that thing gets messed with and says for some algorithms that depend on the

00:22:39.120 --> 00:22:47.400
behavior and will fail to converge if it's set to treat this as different. So it uses the FTZ DAZ flags

00:22:47.400 --> 00:22:53.420
in the MX CSR register. That's part of the part that I don't understand. I don't, I don't work that low

00:22:53.420 --> 00:23:00.380
level, but it turns out it's not ideal. So it said, well, what is actually going on here? And apparently

00:23:00.380 --> 00:23:05.020
there's a way, there's a whole bunch of stuff, how you can search through Linux and whatnot to figure out

00:23:05.020 --> 00:23:12.560
what processes are doing this weird stuff. And also apparently if you compile with the dash, oh fast, it

00:23:12.560 --> 00:23:18.960
also like cascades over to having the same behavior. So there's some exploration, like you wrote some C code

00:23:18.960 --> 00:23:25.500
and then imported it into Python. and it seemed all fine. And then did the same thing with oh fast and able to get

00:23:25.500 --> 00:23:31.020
all these warnings. I've never seen this warning. So I guess that's good, but it turns out the culprit was

00:23:31.020 --> 00:23:39.240
G event of all things, which is a event-based asyncio networking library. Yeah. But somehow something was

00:23:39.240 --> 00:23:43.860
using it. And when it got imported, it freaked everything out. So then the question becomes, well,

00:23:43.960 --> 00:23:49.500
if G event, G event can be causing these problems because somebody thought it was awesome to compile

00:23:49.500 --> 00:23:55.760
the fast version, not the slow version. What else is out there? So, Brandon went through and decided

00:23:55.760 --> 00:24:02.600
to download four terabytes of wheels for all the things that might have some kind of x86 binary in

00:24:02.600 --> 00:24:08.060
them. And then there's a ton of analysis of trying to figure out like, well, how do you actually look for

00:24:08.060 --> 00:24:13.180
and find whether or not this program has this feature or not? It turns out to be pretty tricky.

00:24:13.180 --> 00:24:19.100
So there's a bunch of stuff about going through to just check to see like what, how do you test it for

00:24:19.100 --> 00:24:26.640
this many packages? Cause the test he was using before was super slow. So anyway, it's, it's not ideal.

00:24:26.640 --> 00:24:32.960
I think there was something like 49 different packages. Let's see. I wrote it down up here. I'll get this

00:24:32.960 --> 00:24:38.880
number, right? Yeah. There's 49 packages, 49 packages on PyPI that were built with this flag.

00:24:38.880 --> 00:24:45.960
However, thousands of packages use those libraries and hence were also subject to that behavior with

00:24:45.960 --> 00:24:49.960
10 million downloads in the last 30 days. So that's pretty nuts, huh?

00:24:49.960 --> 00:24:55.380
Well, I mean, you're kind of scaring me. So how do I know if I need to care? I guess,

00:24:55.380 --> 00:25:01.900
you know, I, are you doing iterative floating point math that goes down to like very small things?

00:25:01.900 --> 00:25:06.300
Probably, probably not. I don't think I need to care. I'm doing like, I need, I didn't need to

00:25:06.300 --> 00:25:12.880
know what 33% of, you know, 69 is. It should be fine. Right. but if you're doing, well,

00:25:12.880 --> 00:25:17.700
you got to test, got to test your code. And I guess we have to test our math as well. I just sort of

00:25:17.700 --> 00:25:23.640
trust that a lot of that works. Yeah. I suppose you would see those warnings, right? That about the

00:25:23.640 --> 00:25:31.380
floating point subnormal coming in. Okay. Yeah. so there's a great long list of here of packages,

00:25:31.380 --> 00:25:35.340
let's see. I'll just read some out. People might know. So for example,

00:25:35.340 --> 00:25:43.440
G event, G event, G event, HTTP client, flask socket IO dagster, which is used in data science a lot for

00:25:43.440 --> 00:25:51.240
like data engineering, web socket, G event, web socket, locust for a testing, interpret high Kafka

00:25:51.240 --> 00:25:56.700
and on and locust plugins, parallel SSH, right? So it doesn't matter if you're using that library

00:25:56.700 --> 00:26:01.660
for the math, just if it gets imported, it changes all the math of the program.

00:26:01.660 --> 00:26:07.940
So anyway, there, there it is. People can check it out. The comments are pretty glowing about this

00:26:07.940 --> 00:26:13.380
research. Matthew Adams, for example, says crazy, awesome work, bro. You should be knighted for this.

00:26:13.380 --> 00:26:20.820
in our chat, Alvaro says, run your, run your test with a dash W error, which you should be

00:26:20.820 --> 00:26:26.340
anyway. So cool. So warnings treated as errors basically. Yeah. Yeah. Or set that particular

00:26:26.340 --> 00:26:31.420
one to be, warning. All right. Well, I guess that's it for our four items that we're

00:26:31.420 --> 00:26:36.080
covering today. Am I right? Yeah. I was just, I was, I was giggling during part of that. Cause I,

00:26:36.080 --> 00:26:42.020
the subnormal just cracking me up. Like, like why is, why is Brian talk like that? I don't understand

00:26:42.020 --> 00:26:50.400
most of his words. Oh, don't worry about him. He's subnormal. I don't know. I also, I also like the

00:26:50.400 --> 00:26:56.660
title of the overall blog, push the red button, push the red button for a research, malware

00:26:56.660 --> 00:27:01.840
reverse engineering, pen testing on the blog. Yeah. Nice. Nice. All right. Well, how about some extras?

00:27:01.840 --> 00:27:08.700
Yeah. I don't have anything I want to show, but, but I was just going to say a couple of

00:27:08.700 --> 00:27:13.940
things I've been up to. I've been thinking about change logs a lot and for on test and code,

00:27:13.940 --> 00:27:19.340
instead of doing like a one episode on change logs, I thought I would talk to several people and do an

00:27:19.340 --> 00:27:25.360
NPR style combined. So it might be, it might end up being a series of episodes that I'll release

00:27:25.360 --> 00:27:30.760
together or, or one long episode. I'm not sure yet, but, basically I'm thinking about change

00:27:30.760 --> 00:27:36.040
logs a lot. the other thing I've been doing is, thinking about, so we had that pie test

00:27:36.040 --> 00:27:43.200
course out, right? Last week. we did just awesome on, Talk Python Training. and,

00:27:43.200 --> 00:27:48.740
uh, I, I, I, it's cool. anyway, Talk Python Training. I always get to it by just

00:27:48.740 --> 00:27:53.220
remembering that I switched that and just say training.talkpython.fm and you can get there.

00:27:53.220 --> 00:27:59.940
But, but I've had some requests to take some of the content and, change it for individual

00:27:59.940 --> 00:28:05.320
teams. So, and this is an interesting thing to me to, to, and to think about, to say, cause like in

00:28:05.320 --> 00:28:09.720
this course we do a database and a command line interface, but we're mostly testing through the API.

00:28:09.760 --> 00:28:15.120
So API API with the database application. so we're doing things, the layered things,

00:28:15.120 --> 00:28:19.600
but some people are like, well, I don't use the database. So maybe we could swap that out with

00:28:19.600 --> 00:28:26.200
an example that uses one of the resources we have. And more of our example, we don't do the API. We do

00:28:26.200 --> 00:28:31.560
these little, we're testing something else. So like, okay, we can cover the concept. So it's a neat idea

00:28:31.560 --> 00:28:35.860
to try to focus that towards people. So if it, I guess if you're interested in doing that,

00:28:35.860 --> 00:28:42.180
check out, python test.com and under training, check me out. So yeah. Awesome. Yeah. There's a

00:28:42.180 --> 00:28:46.140
lot of ideas in that course that can be applied to different industries, different ways. Yeah. Yeah.

00:28:46.140 --> 00:28:51.240
Different ways for sure. Awesome. Yeah. So the PI test course is going super strong. People really

00:28:51.240 --> 00:28:55.340
love it. great work on that, Brian. I have another course to announce cause it's been a week.

00:28:55.340 --> 00:29:02.080
It's been a week. It's been a week. Python data visualization. So this is a course by Chris

00:29:02.080 --> 00:29:07.620
Moffitt over at Talk Python Training. And the idea is there's all these different choices. I mean,

00:29:07.620 --> 00:29:12.880
we just talked about superset today and throw, throw that in as another thing in the pile of general

00:29:12.880 --> 00:29:17.520
visualization tools, right? So you might do matplotlib, or maybe you want to use something new

00:29:17.520 --> 00:29:23.280
like Altair. So this course goes through and shows you what it's like to do visualizations

00:29:23.280 --> 00:29:29.400
in these different frameworks, like matplotlib, Seaborn, even pandas and plot.ly and streamlet.

00:29:29.400 --> 00:29:34.340
And then you can build out these different scenarios and say, well, in this case, it might make more

00:29:34.340 --> 00:29:38.920
sense to use matplotlib, or I might choose Altair and it'll help you choose a visualization

00:29:38.920 --> 00:29:43.900
framework, but also it'll show you how to use all of them. So it's a nice broad exposure to all these

00:29:43.900 --> 00:29:48.260
different frameworks. So people can check that out. Talk by thumb.fm click on courses. Ooh, this,

00:29:48.260 --> 00:29:52.480
this is definitely useful. I got a project that I need this for. So yeah, this is going to be a good

00:29:52.480 --> 00:29:56.180
one. It is a good one. I've already seen it. I've seen it several times actually, but it's good.

00:29:57.540 --> 00:30:02.100
Let me see. Do I have any more extras I want to give a shout out to? No, just those two things.

00:30:02.100 --> 00:30:05.500
And then I have, I have two jokes for you this week because one is not enough.

00:30:05.500 --> 00:30:06.600
No. Yeah.

00:30:06.600 --> 00:30:13.260
The first one here has to do with people who maybe learned a different language, maybe are

00:30:13.260 --> 00:30:19.360
hating a little on Python. So here's somebody says, me laughing at all the Python hate on this

00:30:19.360 --> 00:30:26.300
sub Reddit as I study C#. Silly language. Come on. We all know C# is better. And then

00:30:26.480 --> 00:30:31.440
that's like a smiling, laughing person. And then a more seriously, somewhat concerned starting a new

00:30:31.440 --> 00:30:37.720
job and realizing on the job board, 95% of them are asking for Python. That's very fun.

00:30:37.720 --> 00:30:44.200
Well, that now I want to go over to the, like the C# subreddit and see if I can find some

00:30:44.200 --> 00:30:45.040
anti Python jokes.

00:30:45.040 --> 00:30:45.360
I know.

00:30:45.360 --> 00:30:46.040
Wouldn't that be good?

00:30:46.040 --> 00:30:52.640
All right. Well, that one's pretty good. And then were you affected by the recent, we have,

00:30:52.640 --> 00:30:57.560
for people who are not in our area in Pacific Northwest, there was a massive windstorm, like

00:30:57.560 --> 00:31:04.360
30, 40 mile an hour wind, 25% humidity, a hundred degrees. It was like, if somebody threw a cigarette

00:31:04.360 --> 00:31:08.660
out the window, the entire Pacific Northwest would just go instantly catch fire. It was like,

00:31:08.780 --> 00:31:14.060
it was insanely bad. And so we had our power turned off in the West Hills here because the

00:31:14.060 --> 00:31:20.980
trees were so likely to fall over and cause a fire from knocking over. So they just cut the power for

00:31:20.980 --> 00:31:25.000
like a little bit. They also did that in California. There's like a big, it was a bit of an irony.

00:31:25.000 --> 00:31:32.640
Like one day they said, we're going to only allow the sale of electric cars after 30, 30, 35 or something,

00:31:32.720 --> 00:31:36.060
whatever the date is. I mean, I'm, I'm going to support that. I'm a fan of electric cars and all,

00:31:36.060 --> 00:31:41.260
but like the next week they said, Oh, we're going to turn off your power. Cause actually I think the

00:31:41.260 --> 00:31:45.660
electric cars might help balance it out. But anyway, bit of an irony. So this next joke has to do with

00:31:45.660 --> 00:31:52.380
that. So I got ahold of this from Kylie codes and she highlighted this tweet that says the governor

00:31:52.380 --> 00:31:56.900
has declared that for California, the governor has declared a state of emergency and ask all

00:31:56.900 --> 00:32:04.140
Californians not to run NPM install between 4 PM and 9 PM today in an effort to save energy and fight

00:32:04.140 --> 00:32:11.340
this wildfire danger. Oh, that's awesome. Isn't that good? Yeah. Yeah. I love it. So that's,

00:32:11.340 --> 00:32:17.460
that's the two jokes I got for you. yeah, nothing too deep. Well then also you, me and missed one.

00:32:17.460 --> 00:32:22.240
There was a, like the build on of that. The build. All right. Do tell us about it.

00:32:22.240 --> 00:32:25.940
Okay. Governor declares the state of emergency and asked all Californians to not run,

00:32:25.940 --> 00:32:33.980
a wasm pack build between 4 PM and 9 PM. Exactly. Nice. Cool. And John Sheehan says,

00:32:33.980 --> 00:32:43.000
it's funny because it's true. Didn't you just talk about the other day, about rough and having

00:32:43.000 --> 00:32:48.100
our Python tools faster, like the JavaScript community is being concerned about faster tools.

00:32:48.100 --> 00:32:53.500
Maybe not everywhere. Maybe not a hundred percent. Yeah. Awesome. All right. All right. Well,

00:32:53.860 --> 00:32:59.440
good episode as always. Thank you. Thank you. We'll talk to you next week. Yeah. See you next week.

00:32:59.440 --> 00:33:01.380
Thanks everyone for listening. Bye. Bye.

