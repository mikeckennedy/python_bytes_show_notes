
00:00:00.000 --> 00:00:02.780
>> Hello and welcome to Python Bytes where we deliver


00:00:02.780 --> 00:00:06.380
Python news and headlines directly to your earbuds.


00:00:06.380 --> 00:00:09.020
This is episode 302,


00:00:09.020 --> 00:00:13.160
recorded September 20th, 2022. I'm Michael Kennedy.


00:00:13.160 --> 00:00:14.260
>> I'm Brian Ocken.


00:00:14.260 --> 00:00:15.440
>> Hey Brian, how are you doing?


00:00:15.440 --> 00:00:17.560
>> I'm great. It's a nice day.


00:00:17.560 --> 00:00:21.280
>> Yeah, it is a lovely fall day here in the Pacific Northwest.


00:00:21.280 --> 00:00:22.520
Dry as can be,


00:00:22.520 --> 00:00:24.380
I just had a very nice walk with my dog.


00:00:24.380 --> 00:00:25.160
>> Nice.


00:00:25.160 --> 00:00:27.040
>> It's going to be hard to go back to work after


00:00:27.040 --> 00:00:29.060
this podcast looking out the window.


00:00:29.060 --> 00:00:31.820
I give myself 50-50 chances of making it.


00:00:31.820 --> 00:00:34.480
>> Yeah, I got to go back to the other screen.


00:00:34.480 --> 00:00:37.540
>> That's right. I was going to be looking that way.


00:00:37.540 --> 00:00:40.620
Awesome. Well, before we kick off the show,


00:00:40.620 --> 00:00:43.820
I also want to say thank you once again to Microsoft for startups.


00:00:43.820 --> 00:00:45.780
They're sponsoring this episode again and


00:00:45.780 --> 00:00:47.140
huge supporters of the show,


00:00:47.140 --> 00:00:48.580
tell you more about that later.


00:00:48.580 --> 00:00:50.260
Brian, could you just


00:00:50.260 --> 00:00:53.100
whisper to me about your next project here?


00:00:53.100 --> 00:00:54.500
>> Code whisperer.


00:00:54.500 --> 00:00:57.040
So we've talked about, I think we've talked about


00:00:57.040 --> 00:00:59.140
GitHub Copilot before.


00:00:59.140 --> 00:01:00.660
And I'm not sure if we talked about


00:01:00.660 --> 00:01:03.360
Amazon's Code Whisperer yet, but--


00:01:03.360 --> 00:01:04.360
- I don't think so.


00:01:04.360 --> 00:01:07.140
- Okay, so Code Whisperer is a similar kind of thing,


00:01:07.140 --> 00:01:10.140
I think, I haven't tried it myself actually.


00:01:10.140 --> 00:01:13.500
But there's an article by Brian Tarbox that says,


00:01:13.500 --> 00:01:17.340
"Can Amazon's Code Whisperer write better Python than you?"


00:01:17.340 --> 00:01:19.780
And it's interesting, I brought this up


00:01:19.780 --> 00:01:21.340
'cause I've been thinking about it a lot,


00:01:21.340 --> 00:01:24.140
about these AI Copilot sort of things


00:01:24.140 --> 00:01:24.980
and stuff.


00:01:24.980 --> 00:01:27.740
So Amazon's offering,


00:01:27.740 --> 00:01:29.820
looks like it's almost,


00:01:29.820 --> 00:01:31.820
I don't know if it's a similar sort of model


00:01:31.820 --> 00:01:34.060
in this example that he's giving.


00:01:34.060 --> 00:01:36.000
He has a bunch of examples.


00:01:36.000 --> 00:01:37.740
He's going through,


00:01:37.740 --> 00:01:39.820
you write a descript,


00:01:39.820 --> 00:01:41.140
he's writing a description.


00:01:41.140 --> 00:01:42.180
I don't know if this is the only way,


00:01:42.180 --> 00:01:44.740
but basically describe the function you want,


00:01:44.740 --> 00:01:47.060
like function to open an S3 file,


00:01:47.060 --> 00:01:50.420
and it writes one for you and even titles it.


00:01:50.420 --> 00:01:52.280
So you give it a code comment


00:01:52.280 --> 00:01:55.200
and it like pops out some code.


00:01:55.200 --> 00:01:58.320
Now for, this is kind of an interesting thing around,


00:01:58.320 --> 00:01:59.900
especially around Amazon services,


00:01:59.900 --> 00:02:01.380
'cause there's a lot of Amazon services


00:02:01.380 --> 00:02:04.180
and you do a lot of API lookups and stuff.


00:02:04.180 --> 00:02:08.020
So some help directly around APIs,


00:02:08.020 --> 00:02:12.020
actually, I think that that area makes kind of some sense.


00:02:12.020 --> 00:02:14.940
Although if you need an AI to figure out the API,


00:02:14.940 --> 00:02:17.180
maybe the API is a little complicated, just saying.


00:02:17.180 --> 00:02:18.020
- Exactly.


00:02:19.420 --> 00:02:23.380
But the discussion is an interesting one through here


00:02:23.380 --> 00:02:26.820
about basically about the code that it gets out.


00:02:26.820 --> 00:02:29.780
And it's really not talking about the morals of it


00:02:29.780 --> 00:02:33.340
or anything, it's just really talking about using it


00:02:33.340 --> 00:02:34.940
and how good it is.


00:02:34.940 --> 00:02:39.860
The punchline at the end, so the author admits


00:02:39.860 --> 00:02:44.860
that the title was intended to be clickbaity,


00:02:44.860 --> 00:02:48.100
which is cool, I'm glad that--


00:02:48.100 --> 00:02:49.540
>> Because it's the Internet.


00:02:49.540 --> 00:02:52.640
>> Yeah. But despite that,


00:02:52.640 --> 00:02:55.240
he in walking through it,


00:02:55.240 --> 00:02:58.040
he thinks that it's actually,


00:02:58.040 --> 00:02:59.740
it's just making him a little bit


00:02:59.740 --> 00:03:01.980
better because it's more efficient.


00:03:01.980 --> 00:03:03.780
I'd like to quote a little bit.


00:03:03.780 --> 00:03:06.320
Despite the click-baity title,


00:03:06.320 --> 00:03:10.580
whether Code Whisperer's code is better or worse than mine,


00:03:10.580 --> 00:03:13.560
is at the margins and not really important.


00:03:13.560 --> 00:03:15.960
What is significant is that it has


00:03:15.960 --> 00:03:21.800
potential to save me a ton of time and mental space to focus on improving refactoring and testing.


00:03:21.800 --> 00:03:26.840
It makes me a better programmer by taking on some of the undifferentiated heavy lifting.


00:03:26.840 --> 00:03:33.880
And I kind of like that idea of it kind of takes away the blank cave canvas situation of like,


00:03:33.880 --> 00:03:38.680
you know, it might show you how it might one way to do it and you can look at it and go,


00:03:38.680 --> 00:03:42.280
oh no, I wouldn't do it that way. And then you can change it. But you've,


00:03:42.280 --> 00:03:44.280
now you're on your second draft already.


00:03:44.280 --> 00:03:48.400
Instead of, so it's letting the AI do the first draft.


00:03:48.400 --> 00:03:49.680
It's kind of a neat idea.


00:03:49.680 --> 00:03:52.600
I was looking, he did this data class one, for instance.


00:03:52.600 --> 00:03:54.240
This kind of blew me away.


00:03:54.240 --> 00:03:58.160
He's got an inventory item and it's already,


00:03:58.160 --> 00:04:02.000
and he writes a description for a function


00:04:02.000 --> 00:04:05.720
that returns whether or not an item costs more than $10.


00:04:05.720 --> 00:04:10.720
And it returns, it writes a function called expensive.


00:04:11.160 --> 00:04:13.520
Like he didn't say expensive in the title at all,


00:04:13.520 --> 00:04:16.800
but in the description, it said expensive,


00:04:16.800 --> 00:04:18.040
and then it returns whether or not


00:04:18.040 --> 00:04:20.120
the unit price is greater than 10.


00:04:20.120 --> 00:04:22.460
- And it realized it was within a class,


00:04:22.460 --> 00:04:25.120
and so it used self.unitPrice,


00:04:25.120 --> 00:04:27.280
and not just some unassociated function


00:04:27.280 --> 00:04:29.160
that returns greater than 10.


00:04:29.160 --> 00:04:33.240
- Yeah, so it is interesting.


00:04:33.240 --> 00:04:35.440
Yeah, anyway, interesting discussion,


00:04:35.440 --> 00:04:37.840
and then also interesting looking at the code.


00:04:37.840 --> 00:04:39.740
He tried it against test code.


00:04:39.740 --> 00:04:42.340
You said, I want to function the test the inventory class.


00:04:42.340 --> 00:04:44.420
Well, one, I think it was probably,


00:04:44.420 --> 00:04:46.260
maybe this was a prompting problem.


00:04:46.260 --> 00:04:49.220
You shouldn't have one function to test an entire class.


00:04:49.220 --> 00:04:51.060
My druthers.


00:04:51.060 --> 00:04:54.900
But it did a decent job of at least giving you a first start of


00:04:54.900 --> 00:04:58.300
one of the things to test is you need to test the expensive thing,


00:04:58.300 --> 00:04:59.560
you need to function,


00:04:59.560 --> 00:05:01.100
you need to test the total cost.


00:05:01.100 --> 00:05:03.100
It just did it all in one function though.


00:05:03.100 --> 00:05:04.700
I guess that's what he asked for.


00:05:04.700 --> 00:05:07.300
>> Coming up with the total cost which is computed,


00:05:07.300 --> 00:05:08.460
that's interesting.


00:05:08.460 --> 00:05:10.460
Yeah, yeah, that is interesting.


00:05:10.460 --> 00:05:12.460
Yeah, and it's the base item.


00:05:12.460 --> 00:05:15.260
There's a unit price of $10 and there's five of them.


00:05:15.260 --> 00:05:18.060
And so in the test it asserted the total cost is 50.


00:05:18.060 --> 00:05:20.260
Yeah, definitely interesting.


00:05:20.260 --> 00:05:22.760
Interesting to definitely look at and good


00:05:22.760 --> 00:05:25.560
and it might help you think about other test cases around it.


00:05:25.560 --> 00:05:27.560
So so I guess cool.


00:05:27.560 --> 00:05:29.860
I wanted to point out while I'm thinking about it.


00:05:29.860 --> 00:05:34.260
One of the reasons why I brought this up is I just listened to a changelog episode


00:05:34.260 --> 00:05:38.260
with Simon Willison called stable diffusion breaks the Internet


00:05:38.260 --> 00:05:44.580
And this is focused on AI driven artwork, which is definitely interesting and an interesting


00:05:44.580 --> 00:05:50.660
conversation. But in it, they talk, since these are all programmers, they talk about how this,


00:05:50.660 --> 00:05:57.060
the same sort of argument applies around, around code generation of the morality of it. And,


00:05:57.060 --> 00:06:03.700
and then aside, morals aside, and legal stuff aside, it's happening. So how do you, Simon


00:06:04.820 --> 00:06:11.540
brings up the term of basically just you need to be one level of abstraction above the AI system.


00:06:11.540 --> 00:06:17.540
So just to make sure that you were still adding value. And the original author of this article


00:06:17.540 --> 00:06:23.860
talked about this as well of it's not about really not thinking, it's about freeing up some of your


00:06:23.860 --> 00:06:29.460
brain space to do other things. So interesting. >> Yeah, it is interesting. I mean, there's


00:06:29.460 --> 00:06:31.460
There's certain things that you probably don't,


00:06:31.460 --> 00:06:33.460
just don't need to remember.


00:06:33.460 --> 00:06:36.340
I'm thinking of, do I really need to remember


00:06:36.340 --> 00:06:39.740
all the steps in the connection string schema


00:06:39.740 --> 00:06:41.420
for connecting to SQLAlchemy?


00:06:41.420 --> 00:06:42.260
Probably not.


00:06:42.260 --> 00:06:45.580
I could just say, connect SQLAlchemy


00:06:45.580 --> 00:06:47.220
to a Postgres database and, boom,


00:06:47.220 --> 00:06:52.220
it gives me, create the metadata base class,


00:06:52.220 --> 00:06:56.020
and then create an engine, and create a connection,


00:06:56.020 --> 00:06:58.540
and bind the engine, all those steps, right?


00:06:58.540 --> 00:07:01.020
like if you could just kick that stuff out,


00:07:01.020 --> 00:07:03.900
that's something you want for a project and you just never do.


00:07:03.900 --> 00:07:07.180
It's not like, "Boy, I'm sure I'm not good at connecting to SQL Alchemy.


00:07:07.180 --> 00:07:08.980
I'm just not a good programmer, I guess."


00:07:08.980 --> 00:07:11.060
You look it up, you put it in there and you go.


00:07:11.060 --> 00:07:13.380
If you didn't have to take the step of looking up, that's cool.


00:07:13.380 --> 00:07:15.020
>> Yeah. I also like that.


00:07:15.020 --> 00:07:17.400
I didn't think about this before and I think GitHub


00:07:17.400 --> 00:07:21.280
actually intended you to think about it like this with naming it Copilot.


00:07:21.280 --> 00:07:23.480
It's not intended to take over your work,


00:07:23.480 --> 00:07:27.260
but it's like sitting down with somebody that knows what they're doing


00:07:27.260 --> 00:07:29.660
and pair programming with them.


00:07:29.660 --> 00:07:31.360
You can't turn off your brain,


00:07:31.360 --> 00:07:34.060
but maybe you can ease up a little bit.


00:07:34.060 --> 00:07:35.740
>> Wait, before you close this,


00:07:35.740 --> 00:07:38.160
scroll down to this black and white code editor.


00:07:38.160 --> 00:07:39.640
Boy, look at that.


00:07:39.640 --> 00:07:40.840
If you check out this article,


00:07:40.840 --> 00:07:43.060
there is a, I don't even know what to make of it,


00:07:43.060 --> 00:07:47.000
because to me it looks like a super retro early Mac OS,


00:07:47.000 --> 00:07:49.880
like Mac OS 1 type of UI,


00:07:49.880 --> 00:07:52.960
but then the file is C colon backslash CD.


00:07:52.960 --> 00:07:55.440
It's just a mix of beautiful retro.


00:07:55.440 --> 00:07:59.800
>> Yeah. Well, he was talking about the first recorded code


00:07:59.800 --> 00:08:05.440
completion appears in the Pascal editor called Alice in 1985.


00:08:05.440 --> 00:08:07.180
>> Yeah. I guess that's it.


00:08:07.180 --> 00:08:10.680
Well, that's a heck of an editor. Super cool.


00:08:10.680 --> 00:08:12.680
All right. On to the next one?


00:08:12.680 --> 00:08:13.320
>> Yeah.


00:08:13.320 --> 00:08:15.520
>> Two things real quick. I just want to point out,


00:08:15.520 --> 00:08:18.100
to make a comment, it's not point out.


00:08:18.100 --> 00:08:21.420
This morning I had to make a new API because one thing I've


00:08:21.420 --> 00:08:22.960
learned about writing courses that


00:08:22.960 --> 00:08:24.560
depend on other people's APIs,


00:08:24.560 --> 00:08:27.060
These other people suck at keeping their APIs running.


00:08:27.060 --> 00:08:28.100
(laughs)


00:08:28.100 --> 00:08:29.400
They either decide,


00:08:29.400 --> 00:08:32.060
you know what, this is costing me $10,000 a month


00:08:32.060 --> 00:08:33.900
and I'm gonna have to charge for it, boo hoo.


00:08:33.900 --> 00:08:34.740
No, just kidding.


00:08:34.740 --> 00:08:35.640
That's a reasonable reason to change,


00:08:35.640 --> 00:08:38.540
but it changes like with the open weather API


00:08:38.540 --> 00:08:41.600
or like this one for this Twilio course I was using.


00:08:41.600 --> 00:08:43.540
So I spent the morning,


00:08:43.540 --> 00:08:45.440
a little bit of yesterday and this morning,


00:08:45.440 --> 00:08:49.240
just doing a complete from scratch fast API,


00:08:49.240 --> 00:08:52.500
and what a ton of fun it is to just work with fast API


00:08:52.500 --> 00:08:55.740
and get to build out all sorts of neat little things.


00:08:55.740 --> 00:08:58.220
And so I just want to shout out,


00:08:58.220 --> 00:09:00.140
if you're building something with FastAPI,


00:09:00.140 --> 00:09:01.220
or you're building an API,


00:09:01.220 --> 00:09:02.580
definitely give FastAPI a look.


00:09:02.580 --> 00:09:05.220
There's a lot of neat things you can do to put together.


00:09:05.220 --> 00:09:06.420
Like here's a whole little website.


00:09:06.420 --> 00:09:08.420
It even does CSS and images


00:09:08.420 --> 00:09:10.980
and sort of chameleon templates.


00:09:10.980 --> 00:09:12.100
I mean, it's basically static.


00:09:12.100 --> 00:09:14.940
But anyway, fun stuff and continues to be fun.


00:09:14.940 --> 00:09:17.900
- And so which course is this for?


00:09:17.900 --> 00:09:20.580
- This is for the Python-powered chat apps


00:09:20.580 --> 00:09:21.740
with Twilio and SendGrid,


00:09:21.740 --> 00:09:26.540
which is actually a free course, but it sets up a chat bot that you order from


00:09:26.540 --> 00:09:29.540
like a bakery type thing over WhatsApp.


00:09:29.540 --> 00:09:34.160
And the problem is if you go to the APIs that the WhatsApp thing was using, they


00:09:34.160 --> 00:09:38.660
just 500 or four or four, one of those two things, neither of which is super


00:09:38.660 --> 00:09:39.660
useful for the course.


00:09:39.660 --> 00:09:42.820
So I recreated it in fast API this morning, which is cool.


00:09:42.820 --> 00:09:47.100
Now it lives on the internet, but that's not what I want to talk about as super


00:09:47.100 --> 00:09:47.540
as that is.


00:09:47.540 --> 00:09:49.560
I want to talk about Apache super set.


00:09:49.560 --> 00:09:50.060
Okay.


00:09:50.060 --> 00:09:51.100
Have you heard of super set?


00:09:51.380 --> 00:09:53.100
>> No. Well, the word I know.


00:09:53.100 --> 00:09:55.420
>> Well, of course. But Apache Superset is


00:09:55.420 --> 00:09:58.260
a modern data exploration and visualization platform.


00:09:58.260 --> 00:10:00.300
I came across that the other day and I'm like,


00:10:00.300 --> 00:10:02.060
what the heck is this? I haven't even heard of this.


00:10:02.060 --> 00:10:05.280
It has almost 50,000 GitHub stars.


00:10:05.280 --> 00:10:11.260
That's insane and is put together by Max Bushman,


00:10:11.260 --> 00:10:14.220
also the creator of Apache Airflow,


00:10:14.220 --> 00:10:17.420
which is pretty cool. This turns out to be


00:10:17.420 --> 00:10:20.660
a really interesting program and it's


00:10:20.660 --> 00:10:22.780
written in Python and TypeScript.


00:10:22.780 --> 00:10:25.660
It's like really front end heavy because it has a lot of visualizations and stuff.


00:10:25.660 --> 00:10:25.860
Right.


00:10:25.860 --> 00:10:29.300
But all the backend stuff, it's all the things that you would know it's Flask,


00:10:29.300 --> 00:10:34.180
it's Redis, Celery, many of the, you know, pandas and data science tools you would


00:10:34.180 --> 00:10:38.340
know, but it's not exactly a tool for developers like Jupyter.


00:10:38.340 --> 00:10:42.300
So Jupyter would be a way that data scientists who know Python would sit down


00:10:42.300 --> 00:10:46.780
and leverage their Python skills to check out data and explore things.


00:10:46.860 --> 00:10:50.380
This one is really almost meant for people who would say,


00:10:50.380 --> 00:10:52.860
I'm going to fire up Excel and see what's going on,


00:10:52.860 --> 00:10:55.100
or I'm going to fire up some BI tool like


00:10:55.100 --> 00:10:59.140
Tableau and I want to look at it a little bit and see what's going on.


00:10:59.140 --> 00:11:01.500
It's also open source and written in Python,


00:11:01.500 --> 00:11:06.540
which means it has APIs and extensions and plugins in Python,


00:11:06.540 --> 00:11:07.860
which is pretty excellent.


00:11:07.860 --> 00:11:09.860
It has a way to explore your data.


00:11:09.860 --> 00:11:11.860
Like Brian, look at this picture. What do you think?


00:11:11.860 --> 00:11:13.900
>> I don't know what it is, but it's pretty.


00:11:13.900 --> 00:11:16.500
>> It's glorious, right? It's a fantastic way


00:11:16.500 --> 00:11:20.740
to visualize, here's 25 contributors to a stream over time.


00:11:20.740 --> 00:11:23.860
You can sort of see like the growth of their contributions or not.


00:11:23.860 --> 00:11:27.620
And so the way you generate this is you just connect it to a database.


00:11:27.620 --> 00:11:28.620
It gives you the table.


00:11:28.620 --> 00:11:31.820
You say, make a chart out of this database and you draggy droppy the


00:11:31.820 --> 00:11:34.340
pieces over and boom, there it goes.


00:11:34.340 --> 00:11:37.340
And it doesn't have to just be the data in the database.


00:11:37.340 --> 00:11:39.480
It can be a computed field.


00:11:39.480 --> 00:11:45.580
So you could say, I want to graph the sum of this join onto like the orders of each


00:11:45.580 --> 00:11:48.740
customer or I want to see the max order for each customer,


00:11:48.740 --> 00:11:50.780
things like that. That's pretty cool.


00:11:50.780 --> 00:11:52.520
You can explore data like that.


00:11:52.520 --> 00:11:54.160
You can create these dashboards,


00:11:54.160 --> 00:11:58.540
these live dashboards to see what's the state of our business today.


00:11:58.540 --> 00:12:01.300
It even comes with a SQL IDE.


00:12:01.300 --> 00:12:04.860
All of this in the browser are very Jupyter-esque. Pretty cool.


00:12:04.860 --> 00:12:06.420
>> This is pretty neat.


00:12:06.420 --> 00:12:09.660
>> Very, very neat. It connects to,


00:12:09.660 --> 00:12:10.680
I told you it's Python,


00:12:10.680 --> 00:12:14.780
it connects to all of its databases using SQL Alchemy.


00:12:14.780 --> 00:12:17.400
And so any database that can be a data source


00:12:17.400 --> 00:12:20.920
for SQLAlchemy, you know, obviously Microsoft SQL Server,


00:12:20.920 --> 00:12:22.740
Postgres, MySQL, but you know,


00:12:22.740 --> 00:12:26.220
things you might not think of like Vertica or Druid


00:12:26.220 --> 00:12:28.900
or Amazon Redshift or Google BigQuery,


00:12:28.900 --> 00:12:30.420
all of these different data sources,


00:12:30.420 --> 00:12:33.420
Databricks are available as a data source


00:12:33.420 --> 00:12:35.580
because SQLAlchemy knows how to talk to it


00:12:35.580 --> 00:12:37.240
and this just leverages SQLAlchemy.


00:12:37.240 --> 00:12:38.080
- Yeah.


00:12:38.080 --> 00:12:39.700
Hey, hold it there for a sec.


00:12:39.700 --> 00:12:41.100
One of the things I learned recently,


00:12:41.100 --> 00:12:43.340
which I don't know why I never got this before,


00:12:43.340 --> 00:12:45.340
But look at the SQLite logo.


00:12:45.340 --> 00:12:46.180
- Yes.


00:12:46.180 --> 00:12:47.300
- It's got a quill in it.


00:12:47.300 --> 00:12:51.780
Did you know that before, that it's a quill for SQLite?


00:12:51.780 --> 00:12:53.140
- Oh, quill.


00:12:53.140 --> 00:12:54.940
I did not put that together, no.


00:12:54.940 --> 00:12:55.780
Ha, how funny.


00:12:55.780 --> 00:12:57.100
Now we know.


00:12:57.100 --> 00:12:59.960
Cool, so anyway, yeah, people can check this out.


00:12:59.960 --> 00:13:03.400
It's kind of a little bit intense to run.


00:13:03.400 --> 00:13:04.520
You can pip install it,


00:13:04.520 --> 00:13:06.860
but probably the better way to do it,


00:13:06.860 --> 00:13:08.420
if you wanna just try it out,


00:13:08.420 --> 00:13:11.580
is to install it locally with Docker.


00:13:11.580 --> 00:13:13.020
For me, for example,


00:13:13.020 --> 00:13:15.840
I just put in the GitHub repo and then went in there and said,


00:13:15.840 --> 00:13:18.160
"Docker compose," gave it the YAML file and said,


00:13:18.160 --> 00:13:20.000
"Pull," and then up and off it goes.


00:13:20.000 --> 00:13:21.520
>> This is not a service.


00:13:21.520 --> 00:13:24.240
This is just something you can download and you run then?


00:13:24.240 --> 00:13:25.720
>> It's something you can download and run,


00:13:25.720 --> 00:13:29.200
but it has a lot of infrastructure bits clicking together.


00:13:29.200 --> 00:13:29.600
>> Okay.


00:13:29.600 --> 00:13:33.700
>> So when I interviewed Max Bushman,


00:13:33.700 --> 00:13:37.620
he actually is now the CEO and founder of Preset,


00:13:37.620 --> 00:13:40.760
which is SuperSET as a service.


00:13:40.760 --> 00:13:42.960
So if you want to have someone else host it for you,


00:13:42.960 --> 00:13:44.480
you can go check it out with them.


00:13:44.480 --> 00:13:47.580
But it's also a thing you can just run yourself.


00:13:47.580 --> 00:13:49.920
But look how popular it is, almost 50,000 GitHub stars,


00:13:49.920 --> 00:13:52.480
10,000 forks, and I just learned of it. That's nuts.


00:13:52.480 --> 00:13:54.280
>> Well, I mean, go figure.


00:13:54.280 --> 00:13:56.600
People actually want to know what's in their data.


00:13:56.600 --> 00:13:57.880
>> I know.


00:13:57.880 --> 00:13:59.120
>> Weirdos.


00:13:59.120 --> 00:14:01.240
>> Yeah, it's so weird. What I think is cool about it is


00:14:01.240 --> 00:14:05.320
it lets you connect into your live operational data,


00:14:05.320 --> 00:14:06.920
not just like, "Oh, I downloaded a CSV,


00:14:06.920 --> 00:14:08.200
and now I can ask questions."


00:14:08.200 --> 00:14:10.040
You can just, whatever the current data is,


00:14:10.040 --> 00:14:11.960
Let's get that and build a dashboard around it.


00:14:11.960 --> 00:14:13.080
>> Pretty awesome. Yeah.


00:14:13.080 --> 00:14:14.680
>> Yeah. All right. Well, Superset,


00:14:14.680 --> 00:14:19.080
if people need an alternative to Excel or BI or Tableau or whatever,


00:14:19.080 --> 00:14:20.480
check out Superset. It's very,


00:14:20.480 --> 00:14:23.280
very Python friendly and looks pretty nice.


00:14:23.280 --> 00:14:24.360
>> You know what else is nice?


00:14:24.360 --> 00:14:25.360
>> Tell me.


00:14:25.360 --> 00:14:27.720
>> Microsoft for Startups.


00:14:27.720 --> 00:14:30.720
>> They are. They are very nice.


00:14:30.720 --> 00:14:34.320
Yes, it's time to tell everyone about our sponsor, isn't it, Brian?


00:14:34.320 --> 00:14:34.600
>> Yeah.


00:14:34.600 --> 00:14:36.680
>> Let me tell you all about Microsoft for Startups.


00:14:36.680 --> 00:14:39.480
They created Microsoft for Startups Founders Hubs


00:14:39.480 --> 00:14:42.120
to help give early stage startups


00:14:42.120 --> 00:14:44.360
the support that they need to be successful.


00:14:44.360 --> 00:14:47.920
So if you are dreaming of or in the stages


00:14:47.920 --> 00:14:51.340
of an early stage startup, you should go apply.


00:14:51.340 --> 00:14:54.500
And the link at the bottom in the share notes


00:14:54.500 --> 00:14:59.500
is buythembuy.fm/foundershub2022, all one word.


00:14:59.500 --> 00:15:00.480
Go over there and apply.


00:15:00.480 --> 00:15:02.260
It's completely free to apply.


00:15:02.260 --> 00:15:04.060
You don't have to be third party verified.


00:15:04.060 --> 00:15:06.060
You don't have to be VC funded.


00:15:06.060 --> 00:15:08.600
If they think your startup has merit,


00:15:08.600 --> 00:15:14.440
you're in the program, program comes with many thousands of dollars of cloud credits.


00:15:14.440 --> 00:15:19.960
You can, you get some to start and as you make your way through different stages of your life


00:15:19.960 --> 00:15:25.400
cycle, you get a bunch more, but what's maybe even more important is access to their mentorship


00:15:25.400 --> 00:15:32.360
network. So there's a reason that Silicon Valley is the heart of so many startups. And it's not


00:15:32.360 --> 00:15:36.200
just, you know, the nice weather, if anything, that'll encourage people to go outside and not


00:15:36.200 --> 00:15:37.620
on their projects, right?


00:15:37.620 --> 00:15:40.080
It's the network and it's the connections.


00:15:40.080 --> 00:15:42.000
And if you live somewhere else,


00:15:42.000 --> 00:15:44.400
or if you're not in that space,


00:15:44.400 --> 00:15:47.380
it's very hard to get connected with the right people


00:15:47.380 --> 00:15:49.080
to make the right steps, right?


00:15:49.080 --> 00:15:52.160
So this program will get you set up there.


00:15:52.160 --> 00:15:54.680
So in addition to all the cloud credits and so on,


00:15:54.680 --> 00:15:56.780
you have access to this founders network


00:15:56.780 --> 00:15:58.300
where you can book one-on-one meetings


00:15:58.300 --> 00:16:00.320
with hundreds of different mentors,


00:16:00.320 --> 00:16:02.760
many of whom are founders themselves.


00:16:02.760 --> 00:16:07.400
There are experts in areas such as idea validation,


00:16:07.400 --> 00:16:10.380
fundraising, management and coaching, sales and marketing.


00:16:10.380 --> 00:16:12.780
That's the one that's the toughest, I think.


00:16:12.780 --> 00:16:14.560
If you can nail that, you're golden.


00:16:14.560 --> 00:16:16.400
So make your idea a reality today


00:16:16.400 --> 00:16:19.120
with the critical support from Microsoft for Startups,


00:16:19.120 --> 00:16:20.280
Founders Hub, check them out at


00:16:20.280 --> 00:16:24.000
pythonbio.fm/foundershub2022.


00:16:24.000 --> 00:16:27.000
Thanks again to Microsoft for supporting our show.


00:16:27.000 --> 00:16:28.040
- Yeah, thank you.


00:16:28.040 --> 00:16:28.880
- Yeah, indeed.


00:16:28.880 --> 00:16:31.040
All right, Brian, now what you got?


00:16:31.040 --> 00:16:35.600
Well, I want to share something that Jeremy Page from the chat says.


00:16:35.600 --> 00:16:41.960
I thought SQL, I always thought the SQLite logo was an homage to TCL and I've got the logo for TCL.


00:16:41.960 --> 00:16:43.320
So maybe, I don't know.


00:16:43.320 --> 00:16:44.800
Oh, perhaps.


00:16:44.800 --> 00:16:45.520
Interesting.


00:16:45.520 --> 00:16:54.000
So, but I wanted to talk about recipes from Pyth, SQLite again, recipes from Python SQLite docs.


00:16:54.000 --> 00:16:59.840
So this is kind of a, there's a, this is an article by, I wrote it down.


00:16:59.920 --> 00:17:01.460
I promise I did.


00:17:01.460 --> 00:17:04.240
Redouane Delaware, cool name.


00:17:04.240 --> 00:17:08.880
So this, he was going through the SQLite 3 docs


00:17:08.880 --> 00:17:12.180
on the Python docs, and there's a lot of examples,


00:17:12.180 --> 00:17:14.500
but some of them don't have actual examples.


00:17:14.500 --> 00:17:15.940
It just talks about the API.


00:17:15.940 --> 00:17:19.860
And so he decided to write out some of the examples,


00:17:19.860 --> 00:17:21.340
his little code snippets.


00:17:21.340 --> 00:17:22.900
And I really like this.


00:17:22.900 --> 00:17:26.020
If you're learning SQLite or just wanna learn


00:17:26.020 --> 00:17:28.460
not SQLite in particular, but databases,


00:17:28.460 --> 00:17:31.020
These are concepts that apply to a lot of things.


00:17:31.020 --> 00:17:34.220
So he's got, of course, whether or not you can execute


00:17:34.220 --> 00:17:36.460
individual statements or batch statements.


00:17:36.460 --> 00:17:39.220
So he's got little examples for that.


00:17:39.220 --> 00:17:41.900
Goes into, this is interesting, I thought,


00:17:41.900 --> 00:17:43.920
was user-defined callbacks.


00:17:43.920 --> 00:17:45.980
I thought this was really cool.


00:17:45.980 --> 00:17:47.660
For instance, a scalar function.


00:17:47.660 --> 00:17:50.820
He defined a, and I knew that like you could put


00:17:50.820 --> 00:17:52.380
user-defined functions in databases,


00:17:52.380 --> 00:17:54.500
but I haven't ever done that really.


00:17:54.500 --> 00:17:57.700
He has a hash function, SHA-256,


00:17:57.700 --> 00:18:00.540
that creates a hash for passwords.


00:18:00.540 --> 00:18:03.500
Then he shows how to use that when he passes in


00:18:03.500 --> 00:18:06.020
username and password into the database,


00:18:06.020 --> 00:18:08.020
how it turns it into a hash,


00:18:08.020 --> 00:18:10.180
hashes it before it stores it.


00:18:10.180 --> 00:18:12.060
>> That's cool. I never knew you could do that.


00:18:12.060 --> 00:18:18.140
Here's a Python function passed over to SQLite,


00:18:18.140 --> 00:18:21.740
and then the SQL statements can call it. That's real cool.


00:18:21.740 --> 00:18:23.860
>> Yeah. There's a special syntax.


00:18:23.860 --> 00:18:26.060
That's good that there's these examples of


00:18:26.060 --> 00:18:32.860
insert into user's values and then this question mark and SHA-256 question mark.


00:18:32.860 --> 00:18:36.580
>> Also, that's fantastic that that's being shown because that's


00:18:36.580 --> 00:18:40.880
the parameterized, the anti little Bobby Tables version.


00:18:40.880 --> 00:18:41.380
>> Okay.


00:18:41.380 --> 00:18:43.060
>> Which is the best practice.


00:18:43.060 --> 00:18:46.500
The alternative is something worse.


00:18:46.500 --> 00:18:52.240
>> Yeah. Then aggregate functions which got lost here.


00:18:52.240 --> 00:18:55.180
But there's a whole bunch of really cool examples of


00:18:55.180 --> 00:18:59.820
using SQLite and they're really tiny examples.


00:18:59.820 --> 00:19:04.280
One of the other reasons I wanted to share this article is,


00:19:04.280 --> 00:19:08.220
I think this is a really great way to learn an API or learn


00:19:08.220 --> 00:19:14.360
a service is to write these little example things in little code snippets and try it out.


00:19:14.360 --> 00:19:16.980
Try it out with a table that you're


00:19:16.980 --> 00:19:21.140
creating that only has two or three elements in it so that you can play with it.


00:19:21.140 --> 00:19:24.180
You can get your head around what you think the answer should be


00:19:24.180 --> 00:19:30.980
and what it does. The only thing I think I'd probably add, of course, is if you're going to do little code snippets,


00:19:30.980 --> 00:19:35.880
these all have to be in separate files, right? Unless you just write test functions.


00:19:35.880 --> 00:19:38.980
So this is a great use for PyTest. I use it all the time.


00:19:38.980 --> 00:19:43.480
If I'm learning something, I just do these little code snippets, but I do them within a test function.


00:19:43.480 --> 00:19:47.080
And then it can be, it's not really testing anything except my own knowledge,


00:19:47.080 --> 00:19:53.580
but I can run them just by right clicking on them or clicking on the little arrow that the editor has for each little function.


00:19:53.580 --> 00:19:56.380
Just rerun the failed test until I understand.


00:19:56.380 --> 00:19:58.220
>> Until I understand it. Yeah.


00:19:58.220 --> 00:19:59.620
>> Yeah. Very cool.


00:19:59.620 --> 00:20:00.220
>> Anyway.


00:20:00.220 --> 00:20:02.460
>> All right. How about something we don't understand?


00:20:02.460 --> 00:20:03.100
>> Okay.


00:20:03.100 --> 00:20:07.820
>> Let me take you over to a weird world of cascading consequences.


00:20:07.820 --> 00:20:13.820
There's this guy who is an assistant professor at NYU Tandon,


00:20:13.820 --> 00:20:19.380
security and reverse engineering person named Brandon Dolan-Gavit.


00:20:19.380 --> 00:20:23.180
There's this tweet here over to his blog post saying,


00:20:23.180 --> 00:20:27.740
a new blog post in which I download four terabytes of Python packages


00:20:27.740 --> 00:20:33.820
containing native x86 libraries, you know, something that's done some C++ thing like


00:20:33.820 --> 00:20:39.260
G-Event or Pandas, one of those, NumPy, that then bundles it into a wheel.


00:20:39.260 --> 00:20:47.420
And apparently there's a bug in one of the C compilers that if you pass -f fast -math,


00:20:47.420 --> 00:20:52.140
it will potentially alter the floating point behavior of your program if you compile it with


00:20:52.140 --> 00:20:54.500
All right, so we're in Python,


00:20:54.500 --> 00:20:56.620
we don't compile things that often, what do we care?


00:20:56.620 --> 00:20:59.620
Well, what this does is it reconfigures


00:20:59.620 --> 00:21:04.180
how the process uses like some low level registers,


00:21:04.180 --> 00:21:05.860
but some feature of the CPU


00:21:05.860 --> 00:21:08.080
on how it does floating point math.


00:21:08.080 --> 00:21:10.180
And because when the library is loaded,


00:21:10.180 --> 00:21:11.740
it changes that feature,


00:21:11.740 --> 00:21:13.860
well, it changes it for the entire program,


00:21:13.860 --> 00:21:15.820
aka your program.


00:21:15.820 --> 00:21:17.160
That doesn't sound great, does it?


00:21:17.160 --> 00:21:18.000
- No.


00:21:18.000 --> 00:21:20.140
- So let's dive in this.


00:21:20.140 --> 00:21:21.140
So the article's called,


00:21:21.140 --> 00:21:23.280
someone's been messing with my subnormals,


00:21:23.280 --> 00:21:27.980
subnormals, I suppose, being an aspect of floating-point computations.


00:21:27.980 --> 00:21:30.280
So here he is in Python 3.8,


00:21:30.280 --> 00:21:35.880
and he says, "From transformers, import codegen for causallm."


00:21:35.880 --> 00:21:37.740
And that's all he wanted.


00:21:37.740 --> 00:21:39.780
This is in the IPython terminal.


00:21:39.780 --> 00:21:41.980
And it starts bumping out all these warnings.


00:21:41.980 --> 00:21:43.640
"Numpy core get limits.


00:21:43.640 --> 00:21:46.340
User warning, the value of the smallest subnormal


00:21:46.340 --> 00:21:49.940
for class numpy.float32 type is zero."


00:21:49.940 --> 00:21:51.980
over and over and over these start popping out.


00:21:51.980 --> 00:21:53.180
It's like, "Hmm, well,


00:21:53.180 --> 00:21:55.660
warnings about floating point numbers sounds bad."


00:21:55.660 --> 00:21:56.980
What do you think?


00:21:56.980 --> 00:21:57.980
>> Yeah.


00:21:57.980 --> 00:22:00.580
>> It turns out that something,


00:22:00.580 --> 00:22:05.740
not NumPy, but something that is in this library was compiled with


00:22:05.740 --> 00:22:11.200
this -ffmath-fast flag when it got imported,


00:22:11.200 --> 00:22:13.900
it changed how NumPy was working.


00:22:13.900 --> 00:22:15.860
It says, "What were the problems?"


00:22:15.860 --> 00:22:18.260
It says, "Well, it changes the floating point


00:22:18.260 --> 00:22:21.780
a unit behavior that's on the CPU, the actual FPU.


00:22:21.780 --> 00:22:24.500
I remember when, by the way, CPUs didn't come with that.


00:22:24.500 --> 00:22:29.780
Like I was trying to decide with my first computer to get a 486 SX or DX,


00:22:29.780 --> 00:22:33.780
and I got the DX because it came with a floating point unit on the CPU.


00:22:33.780 --> 00:22:37.220
Anyway, that thing gets messed with and says for


00:22:37.220 --> 00:22:41.020
some algorithms that depend on the behavior and will fail to


00:22:41.020 --> 00:22:44.500
converge if it's set to treat this as different.


00:22:44.500 --> 00:22:49.500
So it uses the FTZ, DAZ flags in the MX CSR register.


00:22:49.500 --> 00:22:51.460
That's part of the part that I don't understand.


00:22:51.460 --> 00:22:54.860
I don't work that low level.


00:22:54.860 --> 00:22:56.640
But it turns out it's not ideal.


00:22:56.640 --> 00:22:59.980
So I said, well, what is actually going on here?


00:22:59.980 --> 00:23:01.020
And apparently there's a way,


00:23:01.020 --> 00:23:02.000
there's a whole bunch of stuff,


00:23:02.000 --> 00:23:04.540
how you can search through Linux and whatnot


00:23:04.540 --> 00:23:08.740
to figure out what processes are doing this weird stuff.


00:23:08.740 --> 00:23:12.460
And also apparently if you compile with the dash OFAST,


00:23:12.460 --> 00:23:15.780
it also cascades over to having the same behavior.


00:23:15.780 --> 00:23:17.700
So there's some explorations,


00:23:17.700 --> 00:23:22.140
like you wrote some C code and then imported it into Python.


00:23:22.140 --> 00:23:23.060
It seemed about fine.


00:23:23.060 --> 00:23:25.060
And then did the same thing with OFaS


00:23:25.060 --> 00:23:26.580
and able to get all these warnings.


00:23:26.580 --> 00:23:28.640
I've never seen this warning, so I guess that's good.


00:23:28.640 --> 00:23:33.380
But it turns out the culprit was GEvent of all things,


00:23:33.380 --> 00:23:37.200
which is a event-based async IO networking library.


00:23:37.200 --> 00:23:40.060
But somehow something was using it.


00:23:40.060 --> 00:23:42.540
And when it got imported, it freaked everything out.


00:23:42.540 --> 00:23:43.940
But then the question becomes, well,


00:23:43.940 --> 00:23:47.640
if G event can be causing these problems


00:23:47.640 --> 00:23:49.620
because somebody thought it was awesome to compile


00:23:49.620 --> 00:23:51.460
the fast version, not the slow version,


00:23:51.460 --> 00:23:52.500
what else is out there?


00:23:52.500 --> 00:23:57.020
So Brandon went through and decided to download


00:23:57.020 --> 00:23:59.900
four terabytes of wheels for all the things


00:23:59.900 --> 00:24:02.780
that might have some kind of x86 binary in them.


00:24:02.780 --> 00:24:06.060
And then there's a ton of analysis of trying to figure out


00:24:06.060 --> 00:24:08.940
like, well, how do you actually look for and find


00:24:08.940 --> 00:24:11.980
whether or not this program has this feature or not.


00:24:11.980 --> 00:24:13.480
It turned out to be pretty tricky.


00:24:13.480 --> 00:24:15.200
So there's a bunch of stuff about going through


00:24:15.200 --> 00:24:17.820
to just check to see like what,


00:24:17.820 --> 00:24:20.700
how do you test it for this many packages?


00:24:20.700 --> 00:24:23.560
'Cause the test he was using before was super slow.


00:24:23.560 --> 00:24:27.300
So anyway, it's not ideal.


00:24:27.300 --> 00:24:30.940
I think there was something like 49 different packages.


00:24:30.940 --> 00:24:32.660
Let's see, I wrote it down up here.


00:24:32.660 --> 00:24:33.740
I'll get this number right.


00:24:33.740 --> 00:24:37.540
Yeah, there's 49 packages on PyPI


00:24:37.540 --> 00:24:39.140
that were built with this flag.


00:24:39.140 --> 00:24:42.780
However, thousands of packages use those libraries


00:24:42.780 --> 00:24:45.660
and hence were also subject to that behavior


00:24:45.660 --> 00:24:48.720
with 10 million downloads in the last 30 days.


00:24:48.720 --> 00:24:50.160
So that's pretty nuts, huh?


00:24:50.160 --> 00:24:52.660
- Well, I mean, you're kind of scaring me.


00:24:52.660 --> 00:24:56.260
So how do I know if I need to care, I guess?


00:24:56.260 --> 00:25:00.260
- You know, are you doing iterative floating point math


00:25:00.260 --> 00:25:01.900
that goes down to like very small things?


00:25:01.900 --> 00:25:03.100
Probably, probably not.


00:25:03.100 --> 00:25:04.140
I don't think I need to care.


00:25:04.140 --> 00:25:05.460
I'm doing like, I need,


00:25:05.460 --> 00:25:09.260
I didn't need to know what 33 percent of 69 is.


00:25:09.260 --> 00:25:12.620
Should be fine. But if you're doing-


00:25:12.620 --> 00:25:17.060
>> Well, you got to test your code and I guess we have to test our math as well.


00:25:17.060 --> 00:25:19.260
I just trust that a lot of that works.


00:25:19.260 --> 00:25:24.500
>> Yeah. I suppose you would see those warnings about the floating point.


00:25:24.500 --> 00:25:24.820
>> Okay.


00:25:24.820 --> 00:25:26.220
>> Subnormal coming in.


00:25:26.220 --> 00:25:26.700
>> Okay.


00:25:26.700 --> 00:25:31.740
>> Yeah. There's a great long list of here of packages.


00:25:31.740 --> 00:25:33.860
Let's see. I'll just read some out.


00:25:33.860 --> 00:25:40.660
people might know. So for example, G-Event, G-Event, G-Event HTTP client, Flask, Socket.io,


00:25:40.660 --> 00:25:46.340
Dagster, which is used in data science a lot for like data engineering, WebSocket, G-Event


00:25:46.340 --> 00:25:53.300
WebSocket, Locust for testing, Interpret, High Kafka, and on and on, Locust plugins,


00:25:53.300 --> 00:25:58.940
Parallel SSH, right? So it doesn't matter if you're using that library for the math.


00:25:58.940 --> 00:26:03.620
Just if it gets imported, it changes all the math of the program. So anyway, there, there


00:26:03.620 --> 00:26:05.320
it is, people can check it out.


00:26:05.320 --> 00:26:08.680
The comments are pretty glowing about this research.


00:26:08.680 --> 00:26:12.200
Matthew Adams, for example, says crazy, awesome work, bro.


00:26:12.200 --> 00:26:13.320
You should be knighted for this.


00:26:13.320 --> 00:26:20.120
Uh, in our chat, um, Alvaro says, run your, run your test with a dash W error,


00:26:20.120 --> 00:26:21.160
which you should be anyway.


00:26:21.160 --> 00:26:21.880
So cool.


00:26:21.880 --> 00:26:24.080
So warnings treated as errors basically.


00:26:24.080 --> 00:26:24.600
Yeah.


00:26:24.600 --> 00:26:25.040
Yeah.


00:26:25.040 --> 00:26:28.000
Or set that particular one to be a warning.


00:26:28.000 --> 00:26:28.360
All right.


00:26:28.360 --> 00:26:31.880
Well, I guess that's it for our four items that we're covering today.


00:26:31.880 --> 00:26:32.160
I'm right.


00:26:32.360 --> 00:26:38.940
>> Yeah, I was giggling during part of that because the subnormal just cracking me up.


00:26:38.940 --> 00:26:41.340
Why does Brian talk like that?


00:26:41.340 --> 00:26:42.900
I don't understand most of his words.


00:26:42.900 --> 00:26:45.580
Oh, don't worry about him, he's subnormal.


00:26:45.580 --> 00:26:48.580
I don't know.


00:26:48.580 --> 00:26:51.840
>> I also like the title of the overall blog,


00:26:51.840 --> 00:26:53.020
Push the Red Button.


00:26:53.020 --> 00:26:54.300
>> Push the Red Button.


00:26:54.300 --> 00:26:57.100
>> For research malware,


00:26:57.100 --> 00:26:58.940
reverse engineering, pen testing, and blog.


00:26:58.940 --> 00:26:59.580
>> Yeah.


00:26:59.580 --> 00:27:00.220
>> Nice.


00:27:00.220 --> 00:27:00.660
>> Nice.


00:27:00.660 --> 00:27:03.740
>> All right. Well, how about some extras you got for us?


00:27:03.740 --> 00:27:05.740
>> I don't have anything I want to show,


00:27:05.740 --> 00:27:09.860
but I was just going to say a couple of things I've been up to.


00:27:09.860 --> 00:27:14.080
I've been thinking about changelogs a lot and on test and code,


00:27:14.080 --> 00:27:17.180
instead of doing one episode on changelogs,


00:27:17.180 --> 00:27:19.220
I thought I would talk to several people and do


00:27:19.220 --> 00:27:22.180
an NPR style combining a whole bunch of stuff.


00:27:22.180 --> 00:27:22.620
>> Yeah, that's awesome.


00:27:22.620 --> 00:27:25.420
>> It might end up being a series of episodes that I'll release


00:27:25.420 --> 00:27:28.700
together or one long episode, I'm not sure yet.


00:27:28.700 --> 00:27:31.780
but basically I'm thinking about change logs a lot.


00:27:31.780 --> 00:27:34.880
The other thing I've been doing is thinking about,


00:27:34.880 --> 00:27:37.960
so we had that PyTest course out last week.


00:27:37.960 --> 00:27:38.600
>> We did.


00:27:38.600 --> 00:27:42.580
>> It's awesome on Python training.


00:27:42.580 --> 00:27:47.540
It's cool. Anyway, talk Python training,


00:27:47.540 --> 00:27:50.320
I always get to it by just remembering that I switched that and


00:27:50.320 --> 00:27:53.260
just say training.talkpython.fm and you can get there.


00:27:53.260 --> 00:27:57.400
But I've had some requests to take some of the content


00:27:57.400 --> 00:28:01.040
and change it for individual teams.


00:28:01.040 --> 00:28:04.480
This is an interesting thing to me to think about.


00:28:04.480 --> 00:28:05.840
Because in this course,


00:28:05.840 --> 00:28:08.120
we do a database and a command line interface,


00:28:08.120 --> 00:28:09.960
but we're mostly testing through the API,


00:28:09.960 --> 00:28:12.840
so API with the database application.


00:28:12.840 --> 00:28:15.160
We're doing the layered things.


00:28:15.160 --> 00:28:16.880
But some people are like, "Well,


00:28:16.880 --> 00:28:19.360
I don't use a database, so maybe we could swap that out


00:28:19.360 --> 00:28:23.400
with an example that uses one of the resources we have."


00:28:23.400 --> 00:28:25.920
More of our example, we don't do the API,


00:28:25.920 --> 00:28:28.080
we do these little, we're testing something else.


00:28:28.080 --> 00:28:30.240
So like, okay, we can cover the concept.


00:28:30.240 --> 00:28:33.780
So it's a neat idea to try to focus that towards people.


00:28:33.780 --> 00:28:35.920
So I guess if you're interested in doing that,


00:28:35.920 --> 00:28:40.920
check out pythontest.com and under training, check me out.


00:28:40.920 --> 00:28:41.960
- Yeah, awesome.


00:28:41.960 --> 00:28:43.360
Yeah, there's a lot of ideas in that course


00:28:43.360 --> 00:28:45.160
that can be applied to different industries.


00:28:45.160 --> 00:28:46.000
- Different ways, yeah.


00:28:46.000 --> 00:28:47.280
- Yeah, different ways for sure.


00:28:47.280 --> 00:28:50.600
Awesome, yeah, so the PyTest course is going super strong.


00:28:50.600 --> 00:28:52.340
People really love it.


00:28:52.340 --> 00:28:53.520
Great work on that, Brian.


00:28:53.520 --> 00:28:54.640
I have another course to announce


00:28:54.640 --> 00:28:56.280
because it's been a week.


00:28:56.280 --> 00:28:57.120
- It's been a week.


00:28:57.120 --> 00:28:58.440
- It's been a week.


00:28:58.440 --> 00:29:00.520
Python data visualization.


00:29:00.520 --> 00:29:02.600
So this is a course by Chris Moffett


00:29:02.600 --> 00:29:04.000
over at TalkPython Training.


00:29:04.000 --> 00:29:07.320
And the idea is there's all these different choices.


00:29:07.320 --> 00:29:09.160
I mean, we just talked about superset today


00:29:09.160 --> 00:29:11.560
and throw that in as another thing


00:29:11.560 --> 00:29:14.660
in the pile of general visualization tools, right?


00:29:14.660 --> 00:29:16.320
So you might do matplotlib


00:29:16.320 --> 00:29:18.680
or maybe you wanna use something new like Altair.


00:29:18.680 --> 00:29:21.560
So this course goes through and shows you


00:29:21.560 --> 00:29:23.620
what it's like to do visualizations


00:29:23.620 --> 00:29:27.400
in these different frameworks like Matplotlib, Seaborn,


00:29:27.400 --> 00:29:29.640
even Pandas and Plotly and Streamlet.


00:29:29.640 --> 00:29:32.960
Then you can build out these different scenarios and say,


00:29:32.960 --> 00:29:34.800
well, in this case, it might make more sense to use


00:29:34.800 --> 00:29:37.180
Matplotlib or I might choose Altair.


00:29:37.180 --> 00:29:39.600
It'll help you choose a visualization framework,


00:29:39.600 --> 00:29:41.760
but also it'll show you how to use all of them.


00:29:41.760 --> 00:29:44.720
So it's a nice broad exposure to all these different frameworks.


00:29:44.720 --> 00:29:45.760
So people can check that out,


00:29:45.760 --> 00:29:48.080
talkaboutthem.fm, click on "Courses".


00:29:48.080 --> 00:29:49.560
>> This is definitely useful.


00:29:49.560 --> 00:29:51.320
I got a project that I need this for.


00:29:51.320 --> 00:29:52.680
>> Yeah, this is going to be a good one.


00:29:52.680 --> 00:29:54.520
It is a good one, I've already seen it.


00:29:54.520 --> 00:29:56.760
I've seen it several times actually, but it's good.


00:29:56.760 --> 00:29:57.740
(laughs)


00:29:57.740 --> 00:29:59.720
Let me see, do I have any more extras


00:29:59.720 --> 00:30:01.040
I wanna give a shout out to?


00:30:01.040 --> 00:30:02.160
No, just those two things.


00:30:02.160 --> 00:30:04.400
And then I have, I have two jokes for you this week


00:30:04.400 --> 00:30:05.760
because one is not enough.


00:30:05.760 --> 00:30:07.180
- No, yeah.


00:30:07.180 --> 00:30:10.620
- The first one here has to do with people


00:30:10.620 --> 00:30:12.840
who maybe learned a different language,


00:30:12.840 --> 00:30:14.800
maybe are hating a little on Python.


00:30:14.800 --> 00:30:17.160
So here's somebody says,


00:30:17.160 --> 00:30:20.500
me laughing at all the Python hate on this sub Reddit


00:30:20.500 --> 00:30:24.460
as I study C#, silly language, come on.


00:30:24.460 --> 00:30:25.860
We all know C# is better.


00:30:25.860 --> 00:30:28.220
And then, as a like a smiling, laughing person,


00:30:28.220 --> 00:30:30.820
and then a more seriously, somewhat concerned,


00:30:30.820 --> 00:30:33.380
starting a new job and realizing on the job board,


00:30:33.380 --> 00:30:35.380
95% of them are asking for Python.


00:30:35.380 --> 00:30:36.580
(laughing)


00:30:36.580 --> 00:30:37.900
Oops, that's very fun.


00:30:37.900 --> 00:30:43.300
- Well, now I wanna go over to the C# subreddit


00:30:43.300 --> 00:30:45.060
and see if I can find some anti-Python jokes.


00:30:45.060 --> 00:30:46.380
- I know, wouldn't that be good?


00:30:46.380 --> 00:30:47.740
(laughing)


00:30:47.740 --> 00:30:48.900
All right, well, that one's pretty good.


00:30:48.900 --> 00:30:52.880
And then were you affected by the recent,


00:30:52.880 --> 00:30:55.760
for people who are not in our area in Pacific Northwest,


00:30:55.760 --> 00:30:57.320
there was a massive windstorm,


00:30:57.320 --> 00:31:02.320
like 30, 40 mile an hour wind, 25% humidity, 100 degrees.


00:31:02.320 --> 00:31:04.980
It was like if somebody threw a cigarette out the window,


00:31:04.980 --> 00:31:07.320
the entire Pacific Northwest would just go,


00:31:07.320 --> 00:31:08.360
it instantly catch fire.


00:31:08.360 --> 00:31:09.700
It was like, it was insanely bad.


00:31:09.700 --> 00:31:13.160
And so we had our power turned off in the West Hills here


00:31:13.160 --> 00:31:16.760
because the trees were so likely to fall over


00:31:16.760 --> 00:31:19.500
and cause a fire from knocking over.


00:31:19.500 --> 00:31:22.020
So they just cut the power for like a little bit.


00:31:22.020 --> 00:31:23.200
They also did that in California.


00:31:23.200 --> 00:31:25.260
There's like a big, it's a bit of an irony.


00:31:25.260 --> 00:31:26.860
Like one day they said,


00:31:26.860 --> 00:31:29.780
we're gonna only allow the sale of electric cars


00:31:29.780 --> 00:31:33.660
after 30, 35 or something, or whatever the date is.


00:31:33.660 --> 00:31:34.940
I mean, I'm in support of that.


00:31:34.940 --> 00:31:36.100
I'm a fan of electric cars and all,


00:31:36.100 --> 00:31:37.820
but like the next week they said,


00:31:37.820 --> 00:31:40.540
oh, we're gonna turn off your power 'cause,


00:31:40.540 --> 00:31:41.940
actually I think the electric cars


00:31:41.940 --> 00:31:42.860
might help balance it out.


00:31:42.860 --> 00:31:44.100
But anyway, a bit of an irony.


00:31:44.100 --> 00:31:46.100
So this next joke has to do with that.


00:31:46.100 --> 00:31:49.320
So I got a hold of this from Kylie Codes


00:31:49.320 --> 00:31:51.860
and she highlighted this tweet that says,


00:31:51.860 --> 00:31:53.960
"The governor has declared," this is for California,


00:31:53.960 --> 00:31:56.200
"The governor has declared a state of emergency


00:31:56.200 --> 00:31:59.680
"and asked all Californians not to run NPM install


00:31:59.680 --> 00:32:02.140
"between 4 p.m. and 9 p.m. today


00:32:02.140 --> 00:32:03.680
"in an effort to save energy


00:32:03.680 --> 00:32:06.040
"and fight this wildfire danger."


00:32:06.040 --> 00:32:06.880
- That's awesome.


00:32:06.880 --> 00:32:07.700
- Isn't that good?


00:32:07.700 --> 00:32:08.540
- Yeah.


00:32:08.540 --> 00:32:09.380
(laughing)


00:32:09.380 --> 00:32:10.360
- Yeah, I love it.


00:32:10.360 --> 00:32:13.640
So that's the two jokes I got for you.


00:32:13.640 --> 00:32:14.480
- Yeah.


00:32:14.480 --> 00:32:15.300
- Nothing too deep.


00:32:15.300 --> 00:32:17.500
>> Well, then also you may have missed one.


00:32:17.500 --> 00:32:20.340
There was the build on of that.


00:32:20.340 --> 00:32:22.420
>> The build. All right, tell us about it.


00:32:22.420 --> 00:32:23.900
>> Okay. Governor declares a state of


00:32:23.900 --> 00:32:26.280
emergency and asked all Californians to not run


00:32:26.280 --> 00:32:30.060
WasmPack build between 4 PM and 9 PM.


00:32:30.060 --> 00:32:31.300
>> Exactly.


00:32:31.300 --> 00:32:31.980
>> Nice.


00:32:31.980 --> 00:32:34.040
>> Cool. John Sheehan says,


00:32:34.040 --> 00:32:36.380
"It's funny because it's true."


00:32:36.380 --> 00:32:40.940
Didn't you just talk about the other day about


00:32:40.940 --> 00:32:45.040
rough and having our Python tools faster,


00:32:45.040 --> 00:32:48.260
like the JavaScript community is being concerned about faster tools.


00:32:48.260 --> 00:32:50.480
Maybe not everywhere. Maybe not 100 percent.


00:32:50.480 --> 00:32:51.560
>> Yeah.


00:32:51.560 --> 00:32:56.120
>> Awesome. All right. Well, good episode as always. Thank you.


00:32:56.120 --> 00:32:58.520
>> Thank you. We'll talk to you next week.


00:32:58.520 --> 00:33:01.160
>> Yeah. See you next week. Thanks everyone for listening. Bye.

