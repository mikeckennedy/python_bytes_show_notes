WEBVTT

00:00:00.001 --> 00:00:04.720
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to earbuds.

00:00:04.720 --> 00:00:10.300
This is episode 146, recorded September 4th, 2019. I'm Michael Kennedy.

00:00:10.300 --> 00:00:11.180
And I'm Brian Okken.

00:00:11.180 --> 00:00:14.900
And we have a special guest joining us this time. Welcome back, Trey Hunter.

00:00:14.900 --> 00:00:16.320
Thank you. It's nice to be here.

00:00:16.320 --> 00:00:21.040
Yeah, it's great to have you here. And it's always nice to get a new perspective. And so

00:00:21.040 --> 00:00:25.060
it'll be fun to see what you're into. We've got some cool Django stuff lined up because of that,

00:00:25.060 --> 00:00:30.080
I know. But Brian, why don't you start off by telling us why there might be a forward slash

00:00:30.080 --> 00:00:31.700
in our Python function definition?

00:00:31.700 --> 00:00:38.040
I sometimes forget that this is that 3.8 isn't out already, because I've been using Python 3.8 for a

00:00:38.040 --> 00:00:45.180
while now. But it's coming soon. And one of the features for 3.8 is positional only arguments.

00:00:45.180 --> 00:00:51.720
So positional only arguments are a way we have keyword only arguments that say you have to include

00:00:51.720 --> 00:00:58.960
the keyword in the argument. We also have normal arguments that you can include the keyword or not.

00:00:58.960 --> 00:01:05.720
In 3.8, they also add positional only, which means you can't provide the keyword and they have to just be

00:01:05.720 --> 00:01:08.740
in the correct order, kind of like C functions.

00:01:08.740 --> 00:01:35.820
functions. So my first thought for this was that the reason for this is probably to, you know, when you're integrating with a DLL or something, it might be just better for integration. But we ran across this argument by a guy named Sanket. It's called positional only arguments in Python. And it's just a nice little overview of what it is. But I like the example. So the example, how you specify it is that you specify your normal arguments,

00:01:35.820 --> 00:01:46.280
and then you put a slash as one of the arguments, like a normal division slash that isn't one of your variables. It just denotes the difference between the where the positional only stop.

00:01:46.820 --> 00:02:07.820
And the example he gave was a power function. And this is like a math type function or something like that makes a lot of sense where the names of the arguments really don't matter. And the order kind of really does matter. Because if you, you know, like if you're thinking that the power function was x to the y, but it's really y to the x, that would be weird.

00:02:07.820 --> 00:02:18.880
So specifying them in the correct order is kind of necessary. So anyway, I just wanted to throw this out there because it was a good example of a place where positional only arguments makes a lot of sense.

00:02:18.880 --> 00:02:32.480
Yeah, it's interesting. You know, when I first looked at it, I thought, well, what is the value of this? But there are a couple interesting things. One, functions that are called positional only, without the keywords have some kind of significant speed up.

00:02:32.640 --> 00:02:54.340
I can't remember if it's in 3.7 or if it's coming in 3.8 or something like that, like 20% quicker. So there's some kind of performance optimization for this. I also heard that it might make other implementations like PyPy and other things easier to have compatibility with some of the lower level stuff in there if you can have these positional only arguments.

00:02:54.340 --> 00:03:17.180
So it's interesting. It's a feature coming in 3.8. I'm curious to see how it gets used, right? Like how many people actually go and use it. We've had, like you said, the keyword only arguments, which is the star, not star args, but star comma arguments, where it says you have to do the keyword argument style. And I don't see that very often, but I'd kind of like that as a feature for sure. So maybe this one will grow on me.

00:03:17.520 --> 00:03:17.860
Trey?

00:03:17.860 --> 00:03:35.320
This is an interesting one because I'm pretty sure this was discussed when they were planning the feature that this is actually already possible at the C layer in Python. And in fact, I brought this up while you were talking about pow, Brian. If you look at help on the built-in pow function Python, Python actually has the slash in the documentation.

00:03:35.740 --> 00:03:52.840
Because that slash is already there. It means something. You just can't use it as an actual Python syntax right now. So you already cannot call the pow function that's built in with anything but positional arguments. This just kind of reveals or allows this feature to be used by actual Python programmers outside of that C level.

00:03:52.840 --> 00:04:02.060
So, I mean, as a teacher, I kind of feel like it's yet another thing to teach, but it's also kind of consistency, right? I can now explain the help documentation with an actual Python feature.

00:04:02.780 --> 00:04:12.620
Yeah, it brings it up for all the regular developers, not just the core developers. Okay, interesting. Trey, I promised something about Django. What you got for us?

00:04:12.620 --> 00:04:26.420
Yeah, Django stubs. So this is type checking in Django. So type annotations, which are a cool, I'd say new Python 3 thing. I guess they're not so new anymore, although they keep adding little edges to them.

00:04:26.420 --> 00:04:43.040
It's a pretty new library. I think there's a blog post that I saw on this recently. Let me see when it was written. Yeah, it was just last week, I guess. And because of that, I guess it's in beta in the sense that, you know, without actual users giving you feedback, it's only going to work for your use case, maybe, especially because Django is used so widely.

00:04:43.040 --> 00:05:01.980
To be clear, I don't use type annotations in my Django code. But you know, this library might allow me to eventually and I figure more people knowing about it means more users, more people may be fixing little edges in there because there's so much magic kind of, I mean, as much as they say there was a big magic removal in Django, there's just a lot of corners in Django to kind of fix with annotations.

00:05:01.980 --> 00:05:31.760
Yeah, I think annotations are great. They can definitely overwhelm the code and go crazy. But judicious use here and there, where you're crossing boundaries and stuff like what the heck is that supposed to be? Or even something as simple as like putting a type annotation on a request object. So you can say request dot, how do I get to headers again? And what exactly is headers? Is it a dictionary? Is it a multi dict is like, what is it? Right? So those kinds of things I think are super valuable. And I'm happy to see this.

00:05:31.760 --> 00:05:49.440
Right. Well, and the edges between the code, you know, if Django or a third party library is expecting something that what you're sending it works 80% of the time, but there's that one edge case that technically you're not using yet. And no one's testing that thing you don't even know about. You know, it could break, but a type annotation might actually hint at a test you haven't written yet.

00:05:49.440 --> 00:05:56.440
So are the Django type checking, is that going to extend to like APIs as well?

00:05:56.440 --> 00:06:01.740
Ooh, that's a good question. Yeah, I wonder about that. Because it says in the article, it talks about Django rest framework.

00:06:01.740 --> 00:06:15.280
And I didn't even think about the fact that you could probably piggyback on top of this for some kind of other kind of type checking on top of it. But I don't know. I think this is kind of more geared toward the actual programmer side of things, but I'm not certain.

00:06:15.280 --> 00:06:21.680
Okay. Yeah, that's a good one. I'm sure a lot of Django programmers out there will like, especially if you're already using type annotations. Be cool.

00:06:21.740 --> 00:06:40.740
So Trey, you talked about as a teacher earlier, and I've done a lot of training myself. I also have kids who I would like to have some programming literacy, not necessarily make them into little programmers, but have them be able to use programming like they might in math or something or statistics, right?

00:06:41.240 --> 00:06:48.960
In some other aspects. So there's this cool thing I found a while ago, but it's in the news again, called Code Combat. Have either of you heard of this?

00:06:48.960 --> 00:06:49.860
I don't think so.

00:06:49.860 --> 00:07:03.960
Yeah. So Code Combat is a place that you can go and it's aimed at teachers and educators. But honestly, anybody who wants to help somebody who's really early stage, get involved in coding with Python. This is a great opportunity.

00:07:03.960 --> 00:07:20.920
Let me tell you what it is. So it's basically like this Dungeons and Dragons game or something along those lines. And you go into these different worlds and you open them up and each world has maybe 40 or 50 puzzles or challenges you've got across to get through visually, right?

00:07:21.340 --> 00:07:31.840
So you might go in there. It might be a dungeon. It's got like a maze and then a door and then an enemy. And you might have to write some code that'll say, you know, take my hero and move them over here.

00:07:31.840 --> 00:07:38.640
Have them go down, then have them pick up this thing and then find the nearest enemy and attack them and then open the door and whatnot, right?

00:07:38.640 --> 00:07:44.920
Maybe you do that just imperatively. Maybe you write a while loop because like there's some kind of repeating pattern in the maze they've got to do.

00:07:45.140 --> 00:07:56.740
But what's really unique about this is it's very visual. It's got like all the gamification. You've won a badge. You've got a new skill. Like you have to earn the while loop skill.

00:07:57.240 --> 00:08:02.780
So you get like a little, I don't know, special boots that you run really fast that they call like, wow, I don't remember exactly what it is.

00:08:02.780 --> 00:08:11.500
But it's really like quick feedback for little kids. What I like about it, though, is unlike many of these things, you write real Python code.

00:08:11.500 --> 00:08:18.660
There's a hero and you say hero dot move right or speed up or whatever it is. You actually type it.

00:08:18.660 --> 00:08:26.820
Now that sounds bad for like younger kids who are not great at typing or frustrating, but the autocomplete is insane for this.

00:08:26.980 --> 00:08:36.880
So if you're in the editor and you want to say hero find next enemy, you could just type E and hero find next enemy comes up with the enemy variables.

00:08:36.880 --> 00:08:42.840
Like it's crazy helpful on how much autocomplete that it'll give you. And there's not that much that you can do.

00:08:42.840 --> 00:08:48.760
And so it's super interesting. My daughter at the time, I think this was 10. She was all about it.

00:08:48.760 --> 00:08:52.640
She made me get her a subscription and everything. And she just played it probably for a month.

00:08:52.640 --> 00:08:56.780
Then she kind of got tired of it, but she was really engaged. And I just thought I'd throw that out there.

00:08:56.840 --> 00:09:02.040
The reason it's back in the news now is they just got six million dollars in VC funding to keep up this mission.

00:09:02.040 --> 00:09:03.180
Oh, nice. That's awesome.

00:09:03.180 --> 00:09:09.480
Yeah. So just a free resource. Anyone out there who's a teacher or wants to help someone else learn or maybe you want to learn yourself.

00:09:09.480 --> 00:09:14.880
Right. Like it's really constrained and simple Python, but it's real Python code.

00:09:14.880 --> 00:09:17.960
You write to like go through the journey. It's pretty cool.

00:09:17.960 --> 00:09:21.740
Right. And that style of learning really shouldn't be written off because, I mean, you're anchoring,

00:09:21.740 --> 00:09:28.440
you know, some kind of thing in the game that's exciting and fun with the knowledge of that little tidbit of some Python that you learned.

00:09:28.440 --> 00:09:36.180
Yeah. And it lets you work in a like a real way. You don't have to go, well, I know you draggy, you did some draggy droppy stuff and that was sort of programming.

00:09:36.180 --> 00:09:39.700
But now it's time to open up a blank text editor and you have no idea what you're doing.

00:09:39.700 --> 00:09:42.020
Like you've been doing that the whole way.

00:09:42.020 --> 00:09:47.980
So it's like it really introduces you to what professional programming is.

00:09:47.980 --> 00:09:51.320
It doesn't sugarcoat it too much for you, which is what I think is cool about it.

00:09:51.320 --> 00:09:51.560
Awesome.

00:09:51.700 --> 00:09:57.440
Yeah. Worth checking out. All right. Now, before we get to the next one, I want to tell you quickly about our sponsor.

00:09:57.440 --> 00:10:03.900
So this episode is brought to you by DigitalOcean. Now, DigitalOcean has previously had Postgres as a service.

00:10:03.900 --> 00:10:10.280
That's something they announced not too long ago. So if you're using Postgres, you can go sign up, say, hey, just take care of my database for me.

00:10:10.280 --> 00:10:12.720
Back it up. Make sure it's running. All those kinds of things.

00:10:12.720 --> 00:10:16.300
Well, now they're adding a few more things that go along with that.

00:10:16.560 --> 00:10:20.420
They just announced that they have MySQL and Redis hosting as well.

00:10:20.420 --> 00:10:24.440
So if you want to use Redis for a cache and make things go faster, check a box.

00:10:24.440 --> 00:10:26.180
You've got your own Redis cluster.

00:10:26.180 --> 00:10:29.880
Or if you want to use MySQL instead of Postgres, also an option now.

00:10:29.880 --> 00:10:33.360
So check them out. Pythonbytes.fm slash DigitalOcean.

00:10:33.360 --> 00:10:37.220
$50 credit for new users and lots of cool services coming online.

00:10:37.220 --> 00:10:44.220
Speaking of stuff, services and background things like Redis, Celery is definitely one that might land in that realm, Brian.

00:10:44.220 --> 00:10:52.420
I picked this topic. So there was an article by Nick Janatakis called Four Use Cases for When to Use Celery in a Flask Application.

00:10:52.420 --> 00:10:57.620
However, I think it's just really any web framework. I'm not sure if this is specific to Flask.

00:10:57.620 --> 00:11:04.900
But I like this sort of, okay, so this tool, in this case, it's Celery. When would you want to use it?

00:11:04.900 --> 00:11:08.940
I picked this because I'm not sure if he hit the nail on the head or not.

00:11:08.940 --> 00:11:11.920
And I wanted to pick you and Trey's brains on this.

00:11:12.260 --> 00:11:23.300
So Celery, people don't know, it's a module that you can run with your web application that helps you run asynchronous or periodic schedules code in the background.

00:11:23.300 --> 00:11:27.480
So mostly just extra task multitasking, I guess.

00:11:27.600 --> 00:11:33.680
Sometimes it's super, it's very much the wrong thing to try to run that code right in the view handler, right?

00:11:33.680 --> 00:11:40.680
Like if I've got some code that is going to take 15 seconds, you don't want to just have the user sit there and spin for 15 seconds.

00:11:40.680 --> 00:11:45.700
You want to say, awesome, we're working on it. We kicked it off. Enjoy your day, right?

00:11:46.020 --> 00:11:49.040
The first example, I'm going to go through the four here.

00:11:49.040 --> 00:11:51.640
The first example is to send out an email.

00:11:51.640 --> 00:11:57.180
And this totally makes sense because all the work of actually sending it out, you don't actually care.

00:11:57.180 --> 00:12:05.840
As long as you've, as the central task, collected enough information, you can push that onto some background task to actually get the email sent out.

00:12:05.840 --> 00:12:07.740
The user doesn't have to wait for that, right?

00:12:07.740 --> 00:12:09.260
That totally makes sense.

00:12:09.760 --> 00:12:17.440
The other three are connecting to third-party APIs, performing long-running tasks, and running tasks on a schedule.

00:12:17.440 --> 00:12:22.200
And the third-party API one, I don't actually quite get.

00:12:22.200 --> 00:12:26.320
So I was hoping that one of you could explain if this is a good idea or a bad idea.

00:12:26.320 --> 00:12:27.980
Any thoughts?

00:12:27.980 --> 00:12:30.320
Yeah, I use it for all four of these things, actually.

00:12:30.320 --> 00:12:35.280
I mean, in Python, I use it for all four because sending emails, that's the thing.

00:12:35.280 --> 00:12:39.600
Every Monday, 7 a.m. Pacific time, I have to send hundreds of emails.

00:12:40.300 --> 00:12:53.580
And I actually was just wrestling with Celery the last couple of days to get the email sending down from 10 minutes to 23 seconds, which was only possible because I realized I could make it a little bit more concurrent because you can kind of just throw more Celery at the issue sometimes.

00:12:53.580 --> 00:13:01.420
And then the third-party APIs, if you've got a thing like maybe not a credit card processing, but something that could happen, it could happen in the background.

00:13:01.420 --> 00:13:04.800
You just have to go notify some analytics thing or something.

00:13:04.800 --> 00:13:06.300
The user doesn't need to wait for that.

00:13:06.300 --> 00:13:09.760
So you can just spin that off on a Celery task on a schedule.

00:13:09.760 --> 00:13:12.380
Sending emails, in my case, was on a schedule as well.

00:13:12.380 --> 00:13:16.340
And long-running tasks, sending emails is actually a pretty long-running task for me.

00:13:16.340 --> 00:13:17.940
It used to be 10 minutes.

00:13:18.320 --> 00:13:24.180
Is there cases where, like, the user's waiting to see something coming back, but you still want to use Celery?

00:13:24.180 --> 00:13:26.480
Well, I would say sometimes.

00:13:26.480 --> 00:13:29.100
And I'm pretty much with Trey on all of these things.

00:13:29.100 --> 00:13:30.140
I don't use Celery.

00:13:30.220 --> 00:13:38.580
I just have, like, a real simple, like, background thread that I kick stuff off to because the work that I'm doing is 10, 20 seconds, whatever.

00:13:38.580 --> 00:13:44.780
Like, that's good enough to just not have more servers talking to each other where there's more places they could fail.

00:13:44.780 --> 00:13:53.060
But when you're talking to a third-party API, if somebody comes and says, buys a course on my website, I absolutely want to wait until I get a response.

00:13:53.060 --> 00:13:54.300
Say, yes, that was approved.

00:13:54.300 --> 00:13:56.900
No, it was denied or whatever, right?

00:13:57.100 --> 00:14:03.680
So that one, I would never kick purchasing, like, a purchasing call or something like that off to a background queue.

00:14:03.680 --> 00:14:08.800
But what I may well do is, hey, I want to add this person to my mailing list.

00:14:08.800 --> 00:14:11.360
There's no reason that they don't want a response.

00:14:11.360 --> 00:14:19.340
I think the thing is if they do not expect a response in the web page, it's a totally good candidate for this background work, right?

00:14:19.340 --> 00:14:21.120
Like, if you say, I can't log in.

00:14:21.120 --> 00:14:22.160
I need to reset my email.

00:14:22.160 --> 00:14:23.960
They don't expect that to happen.

00:14:23.960 --> 00:14:25.420
You can just say, hey, yeah, great.

00:14:25.420 --> 00:14:26.080
We emailed you.

00:14:26.080 --> 00:14:26.980
Go check your email.

00:14:26.980 --> 00:14:27.300
Right.

00:14:27.300 --> 00:14:31.760
There's always, like, a five-second delay anyway before it makes it through the email pipes.

00:14:31.760 --> 00:14:37.760
So it's totally easy to kick that to something like Celery, send off that email, but get right back.

00:14:37.760 --> 00:14:46.400
On my course site, if I put a new office hour event, there's a bunch of people, like, thousands of people have signed up to get an email when I put that in there.

00:14:46.400 --> 00:14:49.180
At first, I tried to just send it out.

00:14:49.180 --> 00:14:51.400
But then it started timing out because it was taking so long.

00:14:51.400 --> 00:14:53.760
So now that's a background job and things like that.

00:14:53.820 --> 00:14:54.340
Okay, cool.

00:14:54.340 --> 00:14:57.680
I guess it's a great article then if all these hurt.

00:14:58.420 --> 00:15:01.060
I think the third-party one needs a big caveat, right?

00:15:01.060 --> 00:15:05.180
Like, do they expect a response from that third party, like a credit card purchase?

00:15:05.180 --> 00:15:09.820
Or do they not care at all about that response, like, they're now on your mailing list, right?

00:15:09.820 --> 00:15:11.300
I think that's the dividing line there.

00:15:11.300 --> 00:15:12.160
Trey, what do you think?

00:15:12.240 --> 00:15:12.980
I'd agree with that.

00:15:12.980 --> 00:15:19.960
I'm kind of in the same camp in the sense of when I add someone to my mailing list, that API call, they don't even know about that API call.

00:15:19.960 --> 00:15:22.080
They don't need to wait for it if that checkbox fails.

00:15:22.080 --> 00:15:25.920
Whereas charging your credit card, like, that's got to be in the request response, in my opinion.

00:15:25.920 --> 00:15:26.240
Right.

00:15:26.240 --> 00:15:28.080
That's the primary thing they're trying to do.

00:15:28.080 --> 00:15:31.580
And, like, it'll make them really nervous if they don't get some kind of feedback from that.

00:15:31.580 --> 00:15:32.180
Yeah.

00:15:32.180 --> 00:15:33.440
So you probably should test it, huh, Trey?

00:15:33.680 --> 00:15:34.680
Yes, you should.

00:15:34.680 --> 00:15:39.780
The next thing we're going to talk about is pytest, which is, you know, one of Brian's favorite things, obviously.

00:15:39.780 --> 00:15:42.860
I feel like I stole this one from Brian because it's about pytest.

00:15:42.860 --> 00:15:49.700
But so this is pytest steps is what I'm sharing, which is I didn't really know what it was when I first looked at it.

00:15:49.700 --> 00:15:51.260
Then I kind of scrolled through and saw the code.

00:15:51.260 --> 00:15:56.960
And personally, I would use this kind of coming from a Django perspective of my functional test.

00:15:56.960 --> 00:16:00.340
If I have a test where, by necessity, I've got a lot of steps in it.

00:16:00.420 --> 00:16:04.480
You know, I have to go to the login page, log in, click here, fill out another form, do a thing.

00:16:04.480 --> 00:16:06.080
It's not a unit test.

00:16:06.080 --> 00:16:08.400
It's this, like, multi-step process.

00:16:08.400 --> 00:16:12.720
It would be nice to kind of put little checks in there and say, did it pass this far?

00:16:12.720 --> 00:16:18.280
Or if it didn't, don't show the rest of it as failed, show it as skipped because the failure was really at this part here.

00:16:18.280 --> 00:16:19.840
We don't even know if the rest of it failed.

00:16:19.840 --> 00:16:24.620
And so this is a way to kind of break up one longer test into steps.

00:16:24.620 --> 00:16:26.660
And there's a whole bunch of different syntaxes for it.

00:16:26.660 --> 00:16:29.300
I really like the generator syntax that's on this page.

00:16:29.360 --> 00:16:31.240
The other ones I find a little bit less readable.

00:16:31.240 --> 00:16:37.720
But you're going to really have to read through the page because there's kind of a lot of things buried in it as far as different ways you can use it.

00:16:37.720 --> 00:16:39.040
Yeah, I think it's very interesting.

00:16:39.040 --> 00:16:44.080
Yeah, you're always told, well, many people tell you that you should have one assert per test.

00:16:44.080 --> 00:16:45.520
You should be testing one thing.

00:16:45.520 --> 00:16:48.580
But also, a lot of times, you've kind of got to build it up, right?

00:16:48.580 --> 00:16:51.680
So this seems like a nice way to have the infrastructure break it apart.

00:16:52.140 --> 00:16:55.440
And doesn't it do reporting based on like what step it's at?

00:16:55.440 --> 00:17:00.180
I feel like it kind of gives you better information when it fails.

00:17:00.180 --> 00:17:02.100
Yeah, I think Brian would know more about this.

00:17:02.100 --> 00:17:05.340
But I think it just integrates with kind of the way pytest does its reporting.

00:17:05.760 --> 00:17:12.340
And like it pretends as if it has run multiple tests in a sense, kind of like how parameterization works, I think.

00:17:12.340 --> 00:17:16.720
Yeah, it looks like the output just it looks just like a parameterization.

00:17:16.720 --> 00:17:24.140
So you have the test name is the same, but each step will be like listed in a bracket after the test name.

00:17:24.140 --> 00:17:27.800
Looks like it is piggybacking off the parameterization stuff.

00:17:27.800 --> 00:17:28.960
I think it's a nice implementation.

00:17:28.960 --> 00:17:29.980
I'm going to have to play with it.

00:17:29.980 --> 00:17:37.460
My fear in working with teams is it is helpful to try to focus in and have a test that really focuses on something.

00:17:37.460 --> 00:17:42.620
And workflow tests are a red flag, but we do have workflow tests.

00:17:42.620 --> 00:17:43.980
Those are real things.

00:17:44.220 --> 00:17:47.460
And so this is a way to have workflow tests be in place.

00:17:47.460 --> 00:17:50.440
I would just say probably don't abuse it too much.

00:17:50.440 --> 00:17:52.640
But in some cases, it might be the perfect hammer.

00:17:52.640 --> 00:17:56.400
Yeah, if you've got to have it, you might as well do it with a nice tool.

00:17:56.400 --> 00:17:57.760
Yeah, right, right.

00:17:57.760 --> 00:18:02.560
I feel like this is, you know, it's a smaller use case in terms of those very few workflow tests, but it's still useful.

00:18:02.560 --> 00:18:02.860
Yeah.

00:18:02.860 --> 00:18:03.480
All right.

00:18:03.480 --> 00:18:06.020
Let me wrap us up with this last main topic here.

00:18:06.020 --> 00:18:10.380
And now before I tell you all what it is, let me tell you the scenario which it makes sense to use.

00:18:10.380 --> 00:18:14.620
Because it came out of law and you might think, well, I'm not a lawyer, so this is irrelevant to me.

00:18:14.620 --> 00:18:16.780
And it may be, but it might not be.

00:18:16.900 --> 00:18:29.300
So the idea is with this thing I'm about to tell you about, if you want to conduct a survey, think SurveyMonkey or something like that, or you want to create kind of a self-guided interview process.

00:18:29.360 --> 00:18:32.040
But you want a lot of workflow and control.

00:18:32.040 --> 00:18:35.900
There's this really creative project called Doc Assemble.

00:18:35.900 --> 00:18:37.980
And it comes out of the legal space.

00:18:37.980 --> 00:18:39.720
There's a guy named Jonathan Pyle.

00:18:39.720 --> 00:18:44.580
I actually interviewed him for Talk Python on this, and that's coming out in a couple weeks, something like that.

00:18:44.580 --> 00:18:47.020
Probably about the same time this episode ships, actually.

00:18:47.780 --> 00:19:00.880
And the idea is he worked for a, like, public defendant type place where it wasn't a big fancy law firm, but they needed to talk to lots of people and do, like, legally valid interviews and gathering up information.

00:19:00.880 --> 00:19:03.620
So he wrote this open source thing called Doc Assemble.

00:19:04.380 --> 00:19:13.360
And it can be used anytime you kind of want to conduct interviews or surveys that are way better than, say, SurveyMonkey, where you have lots of flow.

00:19:13.360 --> 00:19:16.500
The way you can create the workflow is wild.

00:19:16.500 --> 00:19:24.500
You write basic Python code, and then it evaluates the Python, the execution path.

00:19:24.500 --> 00:19:31.500
So I could say, if user.isUScitizen, then something else, something else.

00:19:31.660 --> 00:19:36.160
And it will actually realize, okay, I have to first determine if they're a U.S. citizen.

00:19:36.160 --> 00:19:42.280
And only if they say yes, do I have to ask them this other question that's inside that if statement.

00:19:42.280 --> 00:19:44.400
And the way it does it is really wild.

00:19:44.400 --> 00:19:46.220
So this thing is packed with all sorts of features.

00:19:46.220 --> 00:19:50.480
It has sends SMS, email, does OCR.

00:19:50.480 --> 00:19:52.960
It has, like, plugins.

00:19:52.960 --> 00:19:54.880
It has background tasks.

00:19:54.880 --> 00:19:55.960
We just talked about Celery.

00:19:55.960 --> 00:19:57.300
It does a bunch of background stuff.

00:19:57.400 --> 00:20:04.920
I think actually using Celery, you define the interviews in YAML, and you write the flow in basic questions in Python.

00:20:04.920 --> 00:20:12.620
And it's just a really interesting way to make, like, advanced interview workflow survey type things.

00:20:12.620 --> 00:20:13.840
So people might check that out.

00:20:13.840 --> 00:20:15.720
It's open source, and it looks pretty cool.

00:20:15.720 --> 00:20:20.580
When I looked at this, I definitely want to try to come up with a reason to use it because it looks kind of fun.

00:20:20.580 --> 00:20:24.640
You can even go, and there's, like, a demo, like, try it or take a survey or whatever.

00:20:24.640 --> 00:20:28.300
And when you do that, there's at the top, there's something that shows the source for each question.

00:20:28.300 --> 00:20:29.420
It's pretty cool.

00:20:29.420 --> 00:20:33.360
It'll show you the actual YAML, and I think the Python code that's making it go.

00:20:33.360 --> 00:20:37.020
But it also shows you things like the reading level.

00:20:37.020 --> 00:20:41.220
There's a bunch of different measures for how hard or complex are these questions and terms.

00:20:41.220 --> 00:20:44.080
And so you can get it like, oh, this question's too complicated.

00:20:44.080 --> 00:20:45.240
How do we rephrase it?

00:20:45.240 --> 00:20:49.680
There's, like, just tons of little edge cases that are super well polished.

00:20:49.680 --> 00:20:53.520
Like, there's a plugin for Word docs, so you can write them there instead of an EAML.

00:20:53.520 --> 00:20:54.260
All kinds of stuff.

00:20:54.260 --> 00:20:55.720
I'm actually going to have to use this.

00:20:55.720 --> 00:21:02.440
This is, or at least look at it, because this is something I've needed in asking, like, surveys for my Python Morsels customers.

00:21:02.440 --> 00:21:07.060
If you're using it professionally versus if you're a hobbyist, you've got a different set of concerns and different questions.

00:21:07.060 --> 00:21:07.580
Yeah, exactly.

00:21:07.580 --> 00:21:11.720
In Python, it'd be like, if user.ishobbyist, colon.

00:21:11.720 --> 00:21:13.360
And, like, that's how you write the workflow.

00:21:13.360 --> 00:21:14.520
It's really cool, this thing.

00:21:14.520 --> 00:21:14.800
Awesome.

00:21:14.800 --> 00:21:15.360
All right, cool.

00:21:15.360 --> 00:21:16.780
Well, that's our main topics.

00:21:16.780 --> 00:21:19.180
Do you guys have any extra stuff you want to just throw out there real quick?

00:21:19.180 --> 00:21:19.940
I don't.

00:21:19.940 --> 00:21:21.720
All right, well, good thing I brought some then.

00:21:21.720 --> 00:21:22.580
Yeah.

00:21:22.580 --> 00:21:36.740
Actually, so really quickly, we are at 194,740 projects on PyPI, which means we are on the edge of 200,000 packages on PyPI, which is, I think, pretty awesome.

00:21:36.740 --> 00:21:40.040
So very exciting to have that growing.

00:21:40.040 --> 00:21:42.960
I remember when I was blown away that there were, like, 70,000 packages.

00:21:42.960 --> 00:21:43.620
That's awesome.

00:21:43.620 --> 00:21:43.880
Yeah.

00:21:44.240 --> 00:21:44.660
Super cool.

00:21:44.660 --> 00:21:48.500
So I'm linking to a tweet that Raymond Hedinger put out around that.

00:21:48.860 --> 00:21:52.580
Also, really quick, NumPy 1.0 was released.

00:21:52.580 --> 00:21:59.280
There's a bunch of mathematical stuff that if you care about, cool new features and improvements, probably too specific to go into.

00:21:59.280 --> 00:22:01.400
And also, Brian, you talked about Python 3.8.

00:22:01.400 --> 00:22:07.560
Python 3.8 beta 4 is now available for those who want to test on the slightly closer to finished version.

00:22:07.560 --> 00:22:08.500
Yeah, I love 3.8.

00:22:08.560 --> 00:22:09.060
All right.

00:22:09.060 --> 00:22:09.060
All right.

00:22:09.060 --> 00:22:09.820
I've got a joke for you.

00:22:09.820 --> 00:22:11.440
We haven't told this one yet, have we, Brian?

00:22:11.440 --> 00:22:12.920
It seems familiar here.

00:22:12.920 --> 00:22:13.180
Well.

00:22:13.180 --> 00:22:14.020
But let's do it anyway.

00:22:14.020 --> 00:22:17.360
We're doing it anyway because it was fun to have it go through your office as well.

00:22:17.360 --> 00:22:18.840
All right.

00:22:18.840 --> 00:22:19.460
Knock, knock.

00:22:19.460 --> 00:22:19.860
Who's there?

00:22:19.860 --> 00:22:20.580
Recursive function.

00:22:20.580 --> 00:22:21.680
Recursive function who?

00:22:21.680 --> 00:22:22.240
Knock, knock.

00:22:22.240 --> 00:22:24.260
Yeah.

00:22:24.340 --> 00:22:25.280
How long can we go for this?

00:22:25.280 --> 00:22:29.500
So it's a good joke, but you only understand it if you know recursion, right?

00:22:29.500 --> 00:22:30.600
So how do you learn about it?

00:22:30.600 --> 00:22:31.280
Do you Google it, Brian?

00:22:31.280 --> 00:22:35.360
Yeah, you can Google recursion and then you'll see a link that says, did you mean recursion?

00:22:35.360 --> 00:22:38.160
That's awesome.

00:22:38.160 --> 00:22:39.200
All right.

00:22:39.200 --> 00:22:41.200
I don't know who put this next one here, but I really like it.

00:22:41.200 --> 00:22:42.060
You have to do it though.

00:22:42.060 --> 00:22:42.380
Okay.

00:22:42.380 --> 00:22:43.520
Yeah, I put it down.

00:22:43.520 --> 00:22:45.000
So, hey, what's your address?

00:22:45.000 --> 00:22:47.380
192.7.7.3.

00:22:47.380 --> 00:22:49.080
No, your local address.

00:22:49.080 --> 00:22:50.960
127.0.0.1.

00:22:50.960 --> 00:22:52.420
No, your physical address.

00:22:53.460 --> 00:22:56.180
A-C-5-E-C.

00:22:56.180 --> 00:22:58.160
Give us a Mac address.

00:22:58.160 --> 00:23:00.800
I love this.

00:23:00.800 --> 00:23:01.560
Yeah, that's my Mac address.

00:23:01.560 --> 00:23:01.800
Yeah.

00:23:01.800 --> 00:23:02.720
Yeah.

00:23:02.720 --> 00:23:03.180
Yeah.

00:23:03.180 --> 00:23:04.380
So, thanks.

00:23:04.380 --> 00:23:04.820
That's a good one.

00:23:04.820 --> 00:23:05.840
All right.

00:23:05.840 --> 00:23:09.660
Well, those were some good laughs and Trey and Brian, thank you both for being here today.

00:23:09.660 --> 00:23:10.480
Thanks for having me.

00:23:10.480 --> 00:23:12.360
Thank you for listening to Python Bytes.

00:23:12.360 --> 00:23:14.360
Follow the show on Twitter via at Python Bytes.

00:23:14.360 --> 00:23:17.760
That's Python Bytes as in B-Y-T-E-S.

00:23:17.760 --> 00:23:20.360
And get the full show notes at pythonbytes.fm.

00:23:21.220 --> 00:23:25.200
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:23:25.200 --> 00:23:27.900
We're always on the lookout for sharing something cool.

00:23:27.900 --> 00:23:31.020
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:23:31.020 --> 00:23:34.440
Thank you for listening and sharing this podcast with your friends and colleagues.

