
00:00:00.000 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:04.880 --> 00:00:09.600
This is episode 146, recorded September 4th, 2019.


00:00:09.600 --> 00:00:10.400
I'm Michael Kennedy.


00:00:10.400 --> 00:00:11.360
And I'm Brian Eichen.


00:00:11.360 --> 00:00:13.760
And we have a special guest joining us this time.


00:00:13.760 --> 00:00:15.120
Welcome back, Trey Hunter.


00:00:15.120 --> 00:00:16.320
Thank you. It's nice to be here.


00:00:16.320 --> 00:00:17.600
Yeah, it's great to have you here.


00:00:17.600 --> 00:00:20.480
And it's always nice to get a new perspective.


00:00:20.480 --> 00:00:22.720
And so it'll be fun to see what you're into.


00:00:22.720 --> 00:00:25.360
We've got some cool Django stuff lined up because of that, I know.


00:00:25.920 --> 00:00:32.000
But Brian, why don't you start off by telling us why there might be a forward slash in our Python function definition.


00:00:32.000 --> 00:00:36.160
I sometimes forget that this is a, that 3.8 isn't out already,


00:00:36.160 --> 00:00:38.720
because I've been using Python 3.8 for a while now.


00:00:38.720 --> 00:00:40.720
But it's coming soon.


00:00:40.720 --> 00:00:45.440
And one of the features for 3.8 is positional only arguments.


00:00:45.440 --> 00:00:53.680
So positional only arguments are a way, we have keyword only arguments that say you have to include the keyword in the argument.


00:00:53.680 --> 00:00:59.280
we also have normal arguments that you can include the keyword or not.


00:00:59.280 --> 00:01:02.480
In 3.8 they also add positional only which means


00:01:02.480 --> 00:01:06.180
you can't provide the keyword and they have to just be


00:01:06.180 --> 00:01:12.180
in the correct order, kind of like C functions. So my first thought for this was that


00:01:12.180 --> 00:01:14.180
the reason for this is probably to,


00:01:14.180 --> 00:01:17.380
you know, when you're integrating with a DLL or something,


00:01:17.380 --> 00:01:20.480
it might be just better for integration but


00:01:20.480 --> 00:01:23.940
We ran across this argument by a guy named Sanket,


00:01:23.940 --> 00:01:26.640
it's called positional arguments in Python,


00:01:26.640 --> 00:01:29.880
and it's just a nice little overview of what it is,


00:01:29.880 --> 00:01:31.040
but I like the example.


00:01:31.040 --> 00:01:34.360
So the example, how you specify it is that you


00:01:34.360 --> 00:01:37.000
specify your normal arguments and then you put a slash


00:01:37.000 --> 00:01:40.360
as one of the arguments like a normal division slash.


00:01:40.360 --> 00:01:42.160
That isn't one of your variables,


00:01:42.160 --> 00:01:46.920
it just denotes the difference between where the positional only stop.


00:01:46.920 --> 00:01:49.880
The example he gave was a power function,


00:01:49.880 --> 00:01:57.280
And this is like a math type function or something like that makes a lot of sense where the names of the arguments really don't matter.


00:01:57.280 --> 00:02:00.640
And the order kind of really does matter because if you,


00:02:00.640 --> 00:02:04.520
you know, like if you're thinking that the power function was X to the Y,


00:02:04.520 --> 00:02:08.040
but it's really Y to the X, that would be weird.


00:02:08.040 --> 00:02:12.760
So specifying them in the correct order is kind of necessary. So anyway,


00:02:12.760 --> 00:02:15.640
I just wanted to throw this out there because it was a good example of


00:02:15.640 --> 00:02:18.960
a place where positional only arguments makes a lot of sense.


00:02:18.960 --> 00:02:23.160
Yeah, it's interesting. You know, when I first look at it, I thought, well, what is the value of this?


00:02:23.160 --> 00:02:24.720
But there are a couple interesting things.


00:02:24.720 --> 00:02:32.440
One, functions that are called positional only without the keywords have some kind of significant speed up.


00:02:32.440 --> 00:02:37.440
I can't remember if it's in 3.7 or if it's coming in 3.8 or something like that, like 20% quicker.


00:02:37.440 --> 00:02:41.080
So there's some kind of performance optimization for this.


00:02:41.080 --> 00:02:46.580
I also heard that it might make other implementations like PyPy and other


00:02:46.580 --> 00:02:51.300
things easier to have compatibility with some of the lower level stuff in there.


00:02:51.300 --> 00:02:54.340
If you can have these positional only arguments.


00:02:54.340 --> 00:02:55.720
So it's interesting.


00:02:55.720 --> 00:02:57.460
It's a feature coming in three eight.


00:02:57.460 --> 00:02:59.520
I'm curious to see how it gets used, right?


00:02:59.520 --> 00:03:01.540
Like how many people actually go and use it.


00:03:01.540 --> 00:03:04.720
We've had, like you said, the keyword only arguments, which is the star.


00:03:04.720 --> 00:03:08.560
Not star args, but star comma argument.


00:03:09.380 --> 00:03:12.020
whereas you have to do the keyword argument style.


00:03:12.020 --> 00:03:15.300
And I don't see that very often, but I kind of like that as a feature for sure.


00:03:15.300 --> 00:03:17.540
So maybe this one will grow on me.


00:03:17.540 --> 00:03:17.940
Trey?


00:03:17.940 --> 00:03:21.780
This is an interesting one because I'm pretty sure this was discussed when they were


00:03:21.780 --> 00:03:27.060
planning the feature that this is actually already possible at the C layer in Python.


00:03:27.060 --> 00:03:30.100
And in fact, I brought this up while you were talking about PowBrian.


00:03:30.100 --> 00:03:32.980
If you look at help on the built-in Pow function in Python,


00:03:32.980 --> 00:03:35.860
Python actually has the slash in the documentation


00:03:35.860 --> 00:03:37.700
because that slash is already there.


00:03:37.700 --> 00:03:38.580
It means something.


00:03:38.580 --> 00:03:42.040
You just can't use it as an actual Python syntax right now.


00:03:42.040 --> 00:03:46.880
So you already cannot call the power functions built in with anything but positional arguments.


00:03:46.880 --> 00:03:50.280
This just kind of reveals or allows this feature to be used by


00:03:50.280 --> 00:03:52.920
actual Python programmers outside of that C level.


00:03:52.920 --> 00:03:56.520
So I mean, as a teacher, I kind of feel like it's yet another thing to teach,


00:03:56.520 --> 00:03:58.520
but it's also kind of consistency, right?


00:03:58.520 --> 00:04:02.120
I can now explain the help documentation with an actual Python feature.


00:04:02.120 --> 00:04:07.840
Yeah, it brings it up for all the regular developers, not just the core developers.


00:04:07.840 --> 00:04:09.840
Okay, interesting.


00:04:09.840 --> 00:04:11.840
Trey, I promised something about Django.


00:04:11.840 --> 00:04:12.840
What you got for us?


00:04:12.840 --> 00:04:14.840
Yeah, Django Stubs.


00:04:14.840 --> 00:04:17.840
So this is type checking in Django.


00:04:17.840 --> 00:04:22.840
So type annotations, which are, you know, a cool, I'd say, new Python 3 thing.


00:04:22.840 --> 00:04:26.840
I guess they're not so new anymore, although they keep adding, you know, little edges to them.


00:04:26.840 --> 00:04:28.840
It's a pretty new library, I think.


00:04:28.840 --> 00:04:31.840
There's a blog post that I saw on this recently.


00:04:31.840 --> 00:04:32.840
Let me see when it was written.


00:04:32.840 --> 00:04:34.840
Yeah, it was, oh, just last week, I guess.


00:04:34.840 --> 00:04:38.520
And because of that, I guess it's in beta in the sense that, you know, without actual


00:04:38.520 --> 00:04:41.840
users giving you feedback, it's only going to work for your use case, maybe, especially


00:04:41.840 --> 00:04:43.320
because Django is used so widely.


00:04:43.320 --> 00:04:46.560
To be clear, I don't use type annotations in my Django code.


00:04:46.560 --> 00:04:50.480
But you know, this library might allow me to eventually and I figure more people knowing


00:04:50.480 --> 00:04:54.280
about it means more users, more people may be fixing little edges in there because there's


00:04:54.280 --> 00:04:58.680
so much magic kind of, I mean, as much as they say there was a big magic removal in


00:04:58.680 --> 00:05:02.040
Django, there's just a lot of corners in Django to kind of fix with annotations.


00:05:02.040 --> 00:05:04.040
Yeah, I think annotations are great.


00:05:04.040 --> 00:05:07.620
they can definitely overwhelm the code and go crazy,


00:05:07.620 --> 00:05:10.960
but judicious use here and there,


00:05:10.960 --> 00:05:12.880
where you're crossing boundaries and stuff,


00:05:12.880 --> 00:05:15.180
like what the heck is that supposed to be?


00:05:15.180 --> 00:05:18.280
Or even something as simple as like putting a type annotation


00:05:18.280 --> 00:05:19.480
on a request object.


00:05:19.480 --> 00:05:21.360
So you can say request dot.


00:05:21.360 --> 00:05:22.500
How do I get to headers again?


00:05:22.500 --> 00:05:24.200
And what exactly is headers?


00:05:24.200 --> 00:05:25.020
Is it a dictionary?


00:05:25.020 --> 00:05:25.860
Is it a multi-dict?


00:05:25.860 --> 00:05:27.760
It's like, what is it, right?


00:05:27.760 --> 00:05:30.200
So those kinds of things I think are super valuable


00:05:30.200 --> 00:05:31.880
and I'm happy to see this.


00:05:31.880 --> 00:05:32.720
- Right.


00:05:32.720 --> 00:05:33.600
Well, and the edges between the code,


00:05:33.600 --> 00:05:36.640
if Django or a third party library is expecting something that


00:05:36.640 --> 00:05:40.400
what you're sending it works 80% of the time, but there's that one edge case that


00:05:40.400 --> 00:05:45.200
technically you're not using yet, and no one's testing that thing you don't even know about,


00:05:45.200 --> 00:05:49.600
it could break, but a type annotation might actually hint at a test you haven't written yet.


00:05:49.600 --> 00:05:56.720
So are the Django type checking, is that going to extend to APIs as well?


00:05:56.720 --> 00:06:00.400
Ooh, that's a good question. Yeah, I wonder about that. Because it says in the article,


00:06:00.400 --> 00:06:03.360
it talks about Django REST framework. And I didn't even think about the fact that you could


00:06:03.360 --> 00:06:05.760
I could probably piggyback on top of this


00:06:05.760 --> 00:06:09.000
for some kind of other type checking on top of it,


00:06:09.000 --> 00:06:10.200
but I don't know.


00:06:10.200 --> 00:06:11.740
I think this is kind of more geared


00:06:11.740 --> 00:06:14.520
toward the actual programmer side of things,


00:06:14.520 --> 00:06:15.520
but I'm not certain.


00:06:15.520 --> 00:06:16.460
- Okay, yeah, that's a good one.


00:06:16.460 --> 00:06:18.240
I'm sure a lot of Django programmers out there


00:06:18.240 --> 00:06:20.320
will like it, especially if you're already using


00:06:20.320 --> 00:06:22.240
type annotations, be cool.


00:06:22.240 --> 00:06:25.880
So, Trey, you talked about it as a teacher earlier,


00:06:25.880 --> 00:06:27.960
and I've done a lot of training myself.


00:06:27.960 --> 00:06:29.580
I also have kids who I would like


00:06:29.580 --> 00:06:32.400
to have some programming literacy,


00:06:32.400 --> 00:06:35.200
not necessarily make them into little programmers,


00:06:35.200 --> 00:06:38.120
but have them be able to use programming


00:06:38.120 --> 00:06:39.800
like they might in math or something,


00:06:39.800 --> 00:06:42.800
or statistics, right, in some other aspects.


00:06:42.800 --> 00:06:44.960
So there's this cool thing I found a while ago,


00:06:44.960 --> 00:06:47.880
but it's in the news again, called Code Combat.


00:06:47.880 --> 00:06:49.080
Have either of you heard of this?


00:06:49.080 --> 00:06:49.920
- I don't think so.


00:06:49.920 --> 00:06:52.900
- Yeah, so Code Combat is a place that you can go,


00:06:52.900 --> 00:06:55.400
and it's aimed at teachers and educators,


00:06:55.400 --> 00:06:58.320
but honestly, anybody who wants to help somebody


00:06:58.320 --> 00:07:01.400
who's really early stage get involved


00:07:01.400 --> 00:07:04.640
in coding with Python, this is a great opportunity.


00:07:04.640 --> 00:07:05.480
Let me tell you what it is.


00:07:05.480 --> 00:07:08.920
So it's basically like this Dungeons and Dragons game


00:07:08.920 --> 00:07:11.240
or something along those lines.


00:07:11.240 --> 00:07:13.080
And you go into these different worlds


00:07:13.080 --> 00:07:17.040
and you open them up and each world has maybe 40 or 50


00:07:17.040 --> 00:07:19.400
puzzles or challenges you've got across


00:07:19.400 --> 00:07:21.520
to get through visually, right?


00:07:21.520 --> 00:07:23.180
So you might go in there, it might be a dungeon,


00:07:23.180 --> 00:07:27.020
it's got like a maze and then a door and then an enemy.


00:07:27.020 --> 00:07:29.920
And you might have to write some code that'll say,


00:07:29.920 --> 00:07:32.280
take my hero and move them over here,


00:07:32.280 --> 00:07:34.620
have them go down, then have them pick up this thing


00:07:34.620 --> 00:07:36.440
and then find the nearest enemy and attack them


00:07:36.440 --> 00:07:38.680
and then open the door and whatnot, right?


00:07:38.680 --> 00:07:40.560
Maybe you do that just imperatively,


00:07:40.560 --> 00:07:41.760
maybe you write a while loop


00:07:41.760 --> 00:07:43.660
'cause there's some kind of repeating pattern


00:07:43.660 --> 00:07:45.480
in the maze they've gotta do.


00:07:45.480 --> 00:07:49.040
But what's really unique about this is it's very visual,


00:07:49.040 --> 00:07:51.760
it's got all the gamification.


00:07:51.760 --> 00:07:54.180
You've won a badge, you've got a new skill,


00:07:54.180 --> 00:07:57.480
like you have to earn the while loop skill.


00:07:57.480 --> 00:07:58.760
So you get like a little, I don't know,


00:07:58.760 --> 00:08:01.760
special boots that you run really fast that they call like, wow, I don't


00:08:01.760 --> 00:08:06.240
remember exactly what it is, but it's really like quick feedback for little


00:08:06.240 --> 00:08:06.720
kids.


00:08:06.720 --> 00:08:10.720
What I like about it though, is unlike many of these things, you write real


00:08:10.720 --> 00:08:11.560
Python code.


00:08:11.560 --> 00:08:14.280
There's a hero and you say hero dot move, right.


00:08:14.280 --> 00:08:17.360
Or speed up or whatever it is.


00:08:17.360 --> 00:08:18.640
You actually type it.


00:08:18.640 --> 00:08:22.720
Now that sounds bad for like younger kids who are not great at typing or


00:08:22.720 --> 00:08:26.800
frustrating, but the auto complete is insane for this.


00:08:26.840 --> 00:08:29.360
So if you're in the editor and you want to say,


00:08:29.360 --> 00:08:33.080
hero, find next enemy, you could just type E


00:08:33.080 --> 00:08:36.960
and hero, find next enemy comes up with the enemy variables.


00:08:36.960 --> 00:08:39.960
Like it's crazy helpful on how much autocomplete


00:08:39.960 --> 00:08:41.240
that it'll give you.


00:08:41.240 --> 00:08:42.880
And there's not that much that you can do.


00:08:42.880 --> 00:08:44.640
And so it's super interesting.


00:08:44.640 --> 00:08:47.900
My daughter at the time, I think she, this was 10.


00:08:47.900 --> 00:08:48.740
She was all about it.


00:08:48.740 --> 00:08:50.880
She made me get her a subscription and everything.


00:08:50.880 --> 00:08:52.640
And she just played it probably for a month.


00:08:52.640 --> 00:08:55.000
Then she kind of got tired of it, but she was really engaged.


00:08:55.000 --> 00:08:56.840
And I just thought I'd throw that out there.


00:08:56.840 --> 00:09:00.720
The reason it's back in the news now is they just got $6 million in VC funding


00:09:00.720 --> 00:09:02.100
to keep up this mission.


00:09:02.100 --> 00:09:02.600
Oh, nice.


00:09:02.600 --> 00:09:03.240
That's awesome.


00:09:03.240 --> 00:09:03.480
Yeah.


00:09:03.480 --> 00:09:05.000
So just a free resource.


00:09:05.000 --> 00:09:08.520
Anyone out there who's a teacher or wants to help someone else learn, or


00:09:08.520 --> 00:09:09.780
maybe you want to learn yourself, right?


00:09:09.780 --> 00:09:14.980
Like it's really constrained and simple Python, but it's real Python code you


00:09:14.980 --> 00:09:17.320
write to like go through the journey.


00:09:17.320 --> 00:09:17.960
It's, it's pretty cool.


00:09:17.960 --> 00:09:18.280
Right.


00:09:18.280 --> 00:09:20.680
And that style of learning really shouldn't be written off.


00:09:20.680 --> 00:09:23.840
Cause I mean, you're anchoring, you know, some kind of thing in the game


00:09:23.840 --> 00:09:26.200
that's exciting and fun with the knowledge


00:09:26.200 --> 00:09:28.560
of that little tidbit of some Python that you learned.


00:09:28.560 --> 00:09:30.920
- Yeah, and it lets you work in a real way.


00:09:30.920 --> 00:09:33.160
You don't have to go, well, I know you did


00:09:33.160 --> 00:09:36.280
some draggy, droppy stuff, and that was sort of programming,


00:09:36.280 --> 00:09:38.560
but now it's time to open up a blank text editor


00:09:38.560 --> 00:09:40.240
and you have no idea what you're doing.


00:09:40.240 --> 00:09:42.080
You've been doing that the whole way.


00:09:42.080 --> 00:09:44.800
So it's like, it really introduces you


00:09:44.800 --> 00:09:48.120
to what professional programming is.


00:09:48.120 --> 00:09:50.120
It doesn't sugarcoat it too much for you,


00:09:50.120 --> 00:09:51.360
which is what I think's cool about it.


00:09:51.360 --> 00:09:52.200
- Awesome. - Yeah.


00:09:52.200 --> 00:09:53.020
Worth checking out.


00:09:53.020 --> 00:09:54.940
All right, now before we get to the next one,


00:09:54.940 --> 00:09:57.580
I want to tell you quickly about our sponsor.


00:09:57.580 --> 00:10:00.180
So this episode is brought to you by DigitalOcean.


00:10:00.180 --> 00:10:03.980
Now DigitalOcean has previously had Postgres as a service.


00:10:03.980 --> 00:10:05.780
That's something they announced not too long ago.


00:10:05.780 --> 00:10:08.360
So if you're using Postgres, you can go sign up,


00:10:08.360 --> 00:10:10.380
say, "Hey, just take care of my database for me,


00:10:10.380 --> 00:10:11.820
"back it up, make sure it's running,"


00:10:11.820 --> 00:10:13.200
all those kinds of things.


00:10:13.200 --> 00:10:15.100
Well, now they're adding a few more things


00:10:15.100 --> 00:10:16.580
that go along with that.


00:10:16.580 --> 00:10:18.920
They just announced that they have MySQL


00:10:18.920 --> 00:10:20.500
and Redis hosting as well.


00:10:20.500 --> 00:10:22.140
So if you want to use Redis for a cache


00:10:22.140 --> 00:10:24.660
to make things go faster, check a box,


00:10:24.660 --> 00:10:26.780
you've got your own Redis cluster.


00:10:26.780 --> 00:10:29.060
Or if you wanna use MySQL instead of Postgres,


00:10:29.060 --> 00:10:29.900
also an option now.


00:10:29.900 --> 00:10:33.860
So check them out, pythonbytes.fm/digitalocean,


00:10:33.860 --> 00:10:35.340
$50 credit for new users,


00:10:35.340 --> 00:10:37.820
and lots of cool services coming online.


00:10:37.820 --> 00:10:40.820
Speaking of stuff, services, and background things


00:10:40.820 --> 00:10:42.740
like Redis, Celery is definitely one


00:10:42.740 --> 00:10:44.420
that might land in that realm, Brian.


00:10:44.420 --> 00:10:46.600
- I picked this topic, so there was an article


00:10:46.600 --> 00:10:50.020
by Nick Genetakis called "Four Use Cases


00:10:50.020 --> 00:10:52.940
for when to use Celery in a Flask application.


00:10:52.940 --> 00:10:55.580
However, I think it's just really any web framework.


00:10:55.580 --> 00:10:58.180
I'm not sure if this is specific to Flask.


00:10:58.180 --> 00:11:01.420
But I like this sort of, okay, so this tool,


00:11:01.420 --> 00:11:05.260
and in this case it's Celery, when would you wanna use it?


00:11:05.260 --> 00:11:07.140
I picked this because I'm not sure


00:11:07.140 --> 00:11:08.960
if he hit the nail on the head or not,


00:11:08.960 --> 00:11:12.620
and I wanted to pick you and Trey's brains on this.


00:11:12.620 --> 00:11:14.140
So Celery, people don't know,


00:11:14.140 --> 00:11:17.700
it's a module that you can run with your web application


00:11:17.700 --> 00:11:21.500
that helps you run asynchronous or periodic schedules,


00:11:21.500 --> 00:11:23.600
code in the background.


00:11:23.600 --> 00:11:27.600
So mostly just extra task multitasking, I guess.


00:11:27.600 --> 00:11:30.340
- Sometimes it's super, it's very much the wrong thing


00:11:30.340 --> 00:11:33.740
to try to run that code right in the view handler, right?


00:11:33.740 --> 00:11:37.940
Like if I've got some code that is going to take 15 seconds,


00:11:37.940 --> 00:11:39.460
you don't want to just have the user sit there


00:11:39.460 --> 00:11:40.820
and spend for 15 seconds.


00:11:40.820 --> 00:11:43.500
You want to say, awesome, we're working on it,


00:11:43.500 --> 00:11:46.100
we kicked it off, enjoy your day, right?


00:11:46.100 --> 00:11:49.200
The first example, I'm going to go through the four here.


00:11:49.200 --> 00:11:51.960
The first example is to send out an email.


00:11:51.960 --> 00:11:54.200
And this totally makes sense because you,


00:11:54.200 --> 00:11:56.260
all the work of actually sending it out,


00:11:56.260 --> 00:11:58.120
you don't actually care as long as you've,


00:11:58.120 --> 00:12:01.700
as the central task collected enough information,


00:12:01.700 --> 00:12:04.100
you can push that onto some background task


00:12:04.100 --> 00:12:05.860
to actually get the email sent out.


00:12:05.860 --> 00:12:08.160
The user doesn't have to wait for that, right?


00:12:08.160 --> 00:12:10.020
That totally makes sense.


00:12:10.020 --> 00:12:13.800
The other three are connecting to third-party APIs,


00:12:13.860 --> 00:12:18.060
performing long-running tasks and running tasks on a schedule.


00:12:18.060 --> 00:12:22.300
And the third-party API one, I don't actually quite get.


00:12:22.300 --> 00:12:27.340
So I was hoping that one of you could explain if this is a good idea or a bad idea.


00:12:27.340 --> 00:12:28.140
Any thoughts?


00:12:28.140 --> 00:12:30.740
Yeah, I use it for all four of these things, actually.


00:12:30.740 --> 00:12:34.580
I mean, in Python, I use it for all four because sending emails,


00:12:34.580 --> 00:12:40.140
that's the thing. Every Monday, 7 a.m. Pacific time, I have to send hundreds of emails.


00:12:40.140 --> 00:12:42.660
And I actually was just wrestling with Sowie the last couple of days


00:12:42.660 --> 00:12:45.780
to get the email sending down from 10 minutes to 23 seconds,


00:12:45.780 --> 00:12:50.820
which was only possible because I realized I could make it a little bit more concurrent


00:12:50.820 --> 00:12:54.020
because you can kind of just throw more salary at the issue sometimes.


00:12:54.020 --> 00:12:57.660
And then third party APIs, if you've got a thing like a,


00:12:57.660 --> 00:13:00.380
maybe not a credit card processing, but something that could happen,


00:13:00.380 --> 00:13:03.500
it could happen in the background, you just have to go notify some


00:13:03.500 --> 00:13:06.380
analytics thing or something, the user doesn't need to wait for that.


00:13:06.380 --> 00:13:09.940
So you can just spin that off in a salary task on a schedule,


00:13:09.940 --> 00:13:12.480
you know, sending emails in my case was on a schedule as well.


00:13:12.480 --> 00:13:16.400
And long running tasks, sending emails is actually a pretty long running task for me.


00:13:16.400 --> 00:13:18.040
You know, it used to be 10 minutes.


00:13:18.040 --> 00:13:22.800
Is there cases where like the user's waiting to see some something coming back,


00:13:22.800 --> 00:13:24.240
but you still want to use Celery?


00:13:24.240 --> 00:13:29.240
Well, I would say sometimes and I'm pretty much with Trey on all these things.


00:13:29.240 --> 00:13:33.920
I didn't use Celery. I just have like a real simple like background thread that I


00:13:33.920 --> 00:13:38.740
kick stuff off to because the work that I'm doing is 10, 20 seconds, whatever,


00:13:38.740 --> 00:13:42.820
like that's good enough to just not have more servers talking to each other,


00:13:42.820 --> 00:13:44.900
where there's more places they could fail.


00:13:44.900 --> 00:13:47.700
But when you're talking to a third-party API,


00:13:47.700 --> 00:13:50.660
if somebody comes and says, "Buys a course on my website,"


00:13:50.660 --> 00:13:52.980
I absolutely want to wait until I get a response,


00:13:52.980 --> 00:13:57.140
say, "Yes, that was approved," "No, it was denied," or whatever, right?


00:13:57.140 --> 00:14:00.100
So that one, I would never kick purchasing,


00:14:00.100 --> 00:14:02.180
like a purchasing call or something like that,


00:14:02.180 --> 00:14:03.620
off to a background queue.


00:14:03.620 --> 00:14:06.740
But what I may well do is,


00:14:06.740 --> 00:14:09.140
"Hey, I want to add this person to my mailing list."


00:14:09.140 --> 00:14:11.380
There's no reason that they don't want a response.


00:14:11.380 --> 00:14:14.920
I think the thing is if they do not expect a response


00:14:14.920 --> 00:14:18.000
in the webpage, it's a totally good candidate


00:14:18.000 --> 00:14:19.340
for this background work, right?


00:14:19.340 --> 00:14:22.560
Like if you say, "I can't log in, I need to reset my email."


00:14:22.560 --> 00:14:24.240
They don't expect that to happen.


00:14:24.240 --> 00:14:26.140
You can just say, "Hey, yeah, great, we emailed you.


00:14:26.140 --> 00:14:27.320
"Go check your email," right?


00:14:27.320 --> 00:14:29.680
There's always like a five second delay anyway


00:14:29.680 --> 00:14:32.480
before it makes it through the email types.


00:14:32.480 --> 00:14:34.720
So it's totally easy to kick that to something like


00:14:34.720 --> 00:14:37.960
send off that email, but get right back.


00:14:37.960 --> 00:14:42.300
On my core site, if I put a new office hour event,


00:14:42.300 --> 00:14:44.320
there's a bunch of people, like thousands of people


00:14:44.320 --> 00:14:47.680
have signed up to get an email when I put that in there.


00:14:47.680 --> 00:14:49.240
At first I tried to just send it out,


00:14:49.240 --> 00:14:50.480
but then it started timing out,


00:14:50.480 --> 00:14:51.440
'cause it was taking so long.


00:14:51.440 --> 00:14:53.840
So now that's a background job, and things like that.


00:14:53.840 --> 00:14:54.680
- Okay, cool.


00:14:54.680 --> 00:14:58.640
I guess it's a great article then, if all these are.


00:14:58.640 --> 00:15:01.120
- I think the third party one needs a big caveat, right?


00:15:01.120 --> 00:15:04.160
Like, do they expect a response from that third party,


00:15:04.160 --> 00:15:05.680
like a credit card purchase,


00:15:05.680 --> 00:15:07.840
or do they not care at all about that response,


00:15:07.840 --> 00:15:10.040
like they're now on your mailing list, right?


00:15:10.040 --> 00:15:11.480
I think that's the dividing line there.


00:15:11.480 --> 00:15:12.320
Trey, what do you think?


00:15:12.320 --> 00:15:13.140
- I'd agree with that.


00:15:13.140 --> 00:15:15.360
I've kind of been in the same camp in the sense of


00:15:15.360 --> 00:15:17.200
when I add someone to my mailing list,


00:15:17.200 --> 00:15:18.560
that API call, there's no,


00:15:18.560 --> 00:15:20.120
they don't even know about that API call.


00:15:20.120 --> 00:15:22.160
They don't need to wait for it if that checkbox fails.


00:15:22.160 --> 00:15:23.400
Whereas charging your credit card,


00:15:23.400 --> 00:15:25.360
like that's gotta be in the request response,


00:15:25.360 --> 00:15:26.200
that's my opinion.


00:15:26.200 --> 00:15:28.160
- Right, that's the primary thing they're trying to do.


00:15:28.160 --> 00:15:29.760
And like, it'll make them really nervous


00:15:29.760 --> 00:15:32.040
if they don't get some kind of feedback from that.


00:15:32.040 --> 00:15:33.680
Yeah, so you probably should test it, huh, Trey?


00:15:33.680 --> 00:15:35.520
Yes, you should.


00:15:35.520 --> 00:15:37.460
The next thing we're gonna talk about is pytest,


00:15:37.460 --> 00:15:40.280
which is one of Brian's favorite things, obviously.


00:15:40.280 --> 00:15:41.920
I feel like I stole this one from Brian


00:15:41.920 --> 00:15:43.660
'cause it's about pytest.


00:15:43.660 --> 00:15:46.440
So this is pytest steps is what I'm sharing,


00:15:46.440 --> 00:15:48.960
which is I didn't really know what it was


00:15:48.960 --> 00:15:49.800
when I first looked at it.


00:15:49.800 --> 00:15:51.880
Then I just kind of scrolled through and saw the code.


00:15:51.880 --> 00:15:53.660
And personally, I would use this


00:15:53.660 --> 00:15:55.320
kind of coming from a Django perspective


00:15:55.320 --> 00:15:57.080
of my functional test.


00:15:57.080 --> 00:15:59.280
If I have a test where by necessity,


00:15:59.280 --> 00:16:00.560
I've got a lot of steps in it,


00:16:00.560 --> 00:16:02.960
I have to go to the login page, log in, click here,


00:16:02.960 --> 00:16:05.160
fill out another form, do a thing.


00:16:05.160 --> 00:16:08.920
It's not a unit test, it's just like multi-step process.


00:16:08.920 --> 00:16:11.040
It would be nice to kind of put little checks in there


00:16:11.040 --> 00:16:13.080
and say, did it pass this far?


00:16:13.080 --> 00:16:15.880
Or if it didn't, don't show the rest of it as failed,


00:16:15.880 --> 00:16:16.720
show it as skipped,


00:16:16.720 --> 00:16:18.360
'cause the failure was really at this part here.


00:16:18.360 --> 00:16:20.440
We don't even know if the rest of it failed.


00:16:20.440 --> 00:16:22.760
And so this is a way to kind of break up


00:16:22.760 --> 00:16:24.760
one longer test into steps.


00:16:24.760 --> 00:16:27.000
And there's a whole bunch of different syntaxes for it.


00:16:27.000 --> 00:16:29.400
I really like the generator syntax that's on this page.


00:16:29.400 --> 00:16:31.560
The other ones I find a little bit less readable,


00:16:31.560 --> 00:16:34.080
but you're gonna really have to read through the page


00:16:34.080 --> 00:16:36.520
because there's kind of a lot of things buried in it


00:16:36.520 --> 00:16:37.960
as far as different ways you can use it.


00:16:37.960 --> 00:16:39.240
- Yeah, I think it's very interesting.


00:16:39.240 --> 00:16:41.560
- Yeah, you're always told, well, many people tell you


00:16:41.560 --> 00:16:44.160
that you should have one assert per test,


00:16:44.160 --> 00:16:45.600
you should be testing one thing,


00:16:45.600 --> 00:16:47.200
but also a lot of times,


00:16:47.200 --> 00:16:48.640
you've kind of got to build it up, right?


00:16:48.640 --> 00:16:49.720
So this seems like a nice way


00:16:49.720 --> 00:16:52.400
to have the infrastructure break it apart.


00:16:52.400 --> 00:16:55.880
And doesn't it do reporting based on what step it's at?


00:16:55.880 --> 00:16:59.520
I feel like it kind of gives you better information


00:16:59.520 --> 00:17:00.360
when it fails.


00:17:00.360 --> 00:17:05.480
Yeah, I think Brian would know more about this, but I think it just integrates with kind of the way pytest does its reporting.


00:17:05.480 --> 00:17:12.440
And like, it pretends as if it has run multiple tests in a sense, kind of like how parameterization works, I think.


00:17:12.440 --> 00:17:19.520
Yeah, it looks like the output just it looks just like a parameterization. So you have the, the test name is the same, but


00:17:19.520 --> 00:17:26.880
each step will be like listed in a bracket after the test name looks like it is piggybacking off the parameterization


00:17:27.400 --> 00:17:29.120
I think it's a nice implementation.


00:17:29.120 --> 00:17:30.280
I'm going to have to play with it.


00:17:30.280 --> 00:17:36.320
My fear in working with teams is it is helpful to try to focus in and have a test that really


00:17:36.320 --> 00:17:38.200
focuses on something.


00:17:38.200 --> 00:17:42.760
And workflow tests are a red flag, but we do have workflow tests.


00:17:42.760 --> 00:17:44.680
Those are real things.


00:17:44.680 --> 00:17:47.960
And so this is a way to have workflow tests be in place.


00:17:47.960 --> 00:17:52.440
I would just say probably don't abuse it too much, but in some cases it might be the perfect


00:17:52.440 --> 00:17:53.440
hammer.


00:17:53.440 --> 00:17:56.760
Yeah, if you've got to have it, you might as well do it with a nice tool.


00:17:56.760 --> 00:18:02.600
Right, right. I feel like this is, you know, it's a smaller use case in terms of those very few workflow tests, but it's still useful.


00:18:02.600 --> 00:18:06.120
Yeah. All right, let me wrap us up with this last main topic here.


00:18:06.120 --> 00:18:10.920
And now before I tell you all what it is, let me tell you the scenario which it makes sense to use because


00:18:10.920 --> 00:18:14.680
it came out of law and you might think, "Oh, I'm not a lawyer, so this is irrelevant to me."


00:18:14.680 --> 00:18:17.000
And it may be, but it might not be.


00:18:17.000 --> 00:18:22.600
So the idea is, with this thing I'm about to tell you about, if you want to conduct a survey,


00:18:22.600 --> 00:18:24.600
think SurveyMonkey or something like that,


00:18:25.080 --> 00:18:29.580
or you want to create kind of a self-guided interview process,


00:18:29.580 --> 00:18:32.580
but you want a lot of workflow and control.


00:18:32.580 --> 00:18:36.080
There's this really creative project called DocAssemble,


00:18:36.080 --> 00:18:38.080
and it comes out of the legal space.


00:18:38.080 --> 00:18:39.580
There's a guy named Jonathan Pyle.


00:18:39.580 --> 00:18:41.580
I actually interviewed him for Talk Python on this,


00:18:41.580 --> 00:18:44.580
and that's coming out in a couple weeks, something like that,


00:18:44.580 --> 00:18:47.580
probably about the same time this episode ships, actually.


00:18:47.580 --> 00:18:53.580
And the idea is he worked for a public defendant-type place


00:18:53.580 --> 00:18:55.860
where it wasn't a big fancy law firm,


00:18:55.860 --> 00:18:57.580
but they needed to talk to lots of people


00:18:57.580 --> 00:18:59.940
and do like legally valid interviews


00:18:59.940 --> 00:19:01.460
and gathering up information.


00:19:01.460 --> 00:19:04.580
So he wrote this open source thing called DocAssemble,


00:19:04.580 --> 00:19:06.500
and it can be used anytime you kind of want


00:19:06.500 --> 00:19:10.260
to conduct interviews or surveys that are way better


00:19:10.260 --> 00:19:13.900
than say SurveyMonkey, where you have lots of flow.


00:19:13.900 --> 00:19:16.700
The way you can create the workflow is wild.


00:19:16.700 --> 00:19:19.860
You write basic Python code,


00:19:19.860 --> 00:19:23.380
and then it evaluates the Python.


00:19:23.380 --> 00:19:24.540
the execution path.


00:19:24.540 --> 00:19:28.900
So I could say, if user.isUSCitizen,


00:19:28.900 --> 00:19:31.940
then something else, something else,


00:19:31.940 --> 00:19:33.860
and it will actually realize,


00:19:33.860 --> 00:19:36.860
okay, I have to first determine if they're a US citizen,


00:19:36.860 --> 00:19:39.020
and only if they say yes,


00:19:39.020 --> 00:19:40.940
do I have to ask them this other question


00:19:40.940 --> 00:19:42.920
that's inside that if statement.


00:19:42.920 --> 00:19:44.460
And the way it does it is really wild.


00:19:44.460 --> 00:19:47.060
So this thing is packed with all sorts of features.


00:19:47.060 --> 00:19:51.480
It has sends SMS, email, does OCR.


00:19:51.480 --> 00:19:55.040
It has like plugins, it has background tasks.


00:19:55.040 --> 00:19:56.040
We just talked about Celery.


00:19:56.040 --> 00:19:57.400
It does a bunch of background stuff.


00:19:57.400 --> 00:19:59.680
I think actually using Celery,


00:19:59.680 --> 00:20:01.360
you define interviews in YAML


00:20:01.360 --> 00:20:05.120
and you write the flow in basic questions in Python.


00:20:05.120 --> 00:20:07.520
And it's just a really interesting way


00:20:07.520 --> 00:20:12.520
to make like advanced interview workflow survey type thing.


00:20:12.520 --> 00:20:14.160
So people might check that out.


00:20:14.160 --> 00:20:15.880
It's open source and it looks pretty cool.


00:20:15.880 --> 00:20:16.700
- When I looked at this,


00:20:16.700 --> 00:20:19.040
I definitely wanna try to come up with a reason to use it


00:20:19.040 --> 00:20:20.640
'cause it looks kind of fun.


00:20:20.640 --> 00:20:22.400
You can even go and there's like a demo,


00:20:22.400 --> 00:20:24.800
like try it or take a survey or whatever.


00:20:24.800 --> 00:20:26.220
And when you do that, there's at the top,


00:20:26.220 --> 00:20:28.920
there's something that shows the source for each question.


00:20:28.920 --> 00:20:29.760
It's pretty cool.


00:20:29.760 --> 00:20:31.480
It'll show you the actual YAML,


00:20:31.480 --> 00:20:33.440
I think the Python code that's making it go,


00:20:33.440 --> 00:20:37.120
but it also shows you things like the reading level.


00:20:37.120 --> 00:20:38.200
There's a bunch of different measures


00:20:38.200 --> 00:20:41.320
for how hard or complex are these questions and terms.


00:20:41.320 --> 00:20:42.760
And so you can get it like,


00:20:42.760 --> 00:20:44.200
oh, this question is too complicated.


00:20:44.200 --> 00:20:45.280
How do we rephrase it?


00:20:45.280 --> 00:20:47.960
And there's like just tons of little edge cases


00:20:47.960 --> 00:20:49.760
that are super well polished.


00:20:49.760 --> 00:20:51.800
Like there's a plugin for Word docs,


00:20:51.800 --> 00:20:53.640
so you can write them there instead of in YAML,


00:20:53.640 --> 00:20:54.480
all kinds of stuff.


00:20:54.480 --> 00:20:55.960
- I'm actually gonna have to use this.


00:20:55.960 --> 00:20:57.920
This is, or at least look at it,


00:20:57.920 --> 00:20:59.040
'cause this is something I've needed


00:20:59.040 --> 00:21:02.760
in asking like surveys for my Python morsels customers.


00:21:02.760 --> 00:21:05.720
If you're using it professionally versus if you're a hobbyist,


00:21:05.720 --> 00:21:06.840
you've got a different set of concerns


00:21:06.840 --> 00:21:07.680
and a different set of questions.


00:21:07.680 --> 00:21:08.500
- Yeah, exactly.


00:21:08.500 --> 00:21:12.200
In Python, it'd be like, if user.ishobbyist, colon,


00:21:12.200 --> 00:21:13.680
and like that's how you write the workflow.


00:21:13.680 --> 00:21:14.640
It's really cool, this thing.


00:21:14.640 --> 00:21:15.480
- Awesome.


00:21:15.480 --> 00:21:16.300
- All right, cool.


00:21:16.300 --> 00:21:17.140
Well, that's our main topics.


00:21:17.140 --> 00:21:18.080
Do you guys have any extra stuff


00:21:18.080 --> 00:21:19.480
you wanna just throw out there real quick?


00:21:19.480 --> 00:21:20.320
- I don't.


00:21:20.320 --> 00:21:22.360
- All right, well, good thing I brought some then.


00:21:22.360 --> 00:21:23.200
- Yeah.


00:21:23.200 --> 00:21:24.480
- Actually, so really quickly,


00:21:24.480 --> 00:21:29.480
we are at 194,740 projects on PyPI,


00:21:29.480 --> 00:21:34.920
which means we are on the edge of 200,000 packages on PyPI,


00:21:34.920 --> 00:21:37.080
which is, I think, pretty awesome.


00:21:37.080 --> 00:21:40.160
So very exciting to have that growing.


00:21:40.160 --> 00:21:41.440
I remember when I was blown away


00:21:41.440 --> 00:21:43.280
that there were like 70,000 packages.


00:21:43.280 --> 00:21:44.120
- Yeah. - That's awesome.


00:21:44.120 --> 00:21:44.940
- Yeah, super cool.


00:21:44.940 --> 00:21:45.980
So I'm linking to a tweet


00:21:45.980 --> 00:21:48.800
that Raymond Hettinger put out around that.


00:21:48.800 --> 00:21:52.700
Also, really quick, NumPy 1170 was released.


00:21:52.700 --> 00:21:54.560
There's a bunch of mathematical stuff


00:21:54.560 --> 00:21:57.500
that if you care about, cool new features and improvements.


00:21:57.500 --> 00:21:59.460
Probably too specific to go into.


00:21:59.460 --> 00:22:01.580
And also, Brian, you talked about Python 3.8.


00:22:01.580 --> 00:22:04.380
Python 3.8 Beta 4 is now available


00:22:04.380 --> 00:22:05.840
for those who want to test


00:22:05.840 --> 00:22:07.740
on the slightly closer to finished version.


00:22:07.740 --> 00:22:08.580
- Yeah, I love 3.8.


00:22:08.580 --> 00:22:09.940
- All right, I've got a joke for you.


00:22:09.940 --> 00:22:11.660
We haven't told this one yet, have we, Brian?


00:22:11.660 --> 00:22:13.020
- It seems familiar here.


00:22:13.020 --> 00:22:14.180
- Well. - But let's do it anyway.


00:22:14.180 --> 00:22:15.860
- We're doing it anyway, because it was fun


00:22:15.860 --> 00:22:18.580
to have it go through your office as well.


00:22:18.580 --> 00:22:19.620
- All right, knock knock.


00:22:19.620 --> 00:22:20.460
- Who's there?


00:22:20.460 --> 00:22:21.280
- Recursive function.


00:22:21.280 --> 00:22:22.120
- Recursive function who?


00:22:22.120 --> 00:22:22.960
- Knock knock.


00:22:22.960 --> 00:22:24.140
(laughing)


00:22:24.140 --> 00:22:26.580
Yeah, how long can we go for this?


00:22:26.580 --> 00:22:28.660
So it's a good joke, but you only understand it


00:22:28.660 --> 00:22:29.580
if you know recursion, right?


00:22:29.580 --> 00:22:30.620
So how do you learn about it?


00:22:30.620 --> 00:22:31.500
Do you Google it, Brian?


00:22:31.500 --> 00:22:32.940
- Yeah, you can Google recursion,


00:22:32.940 --> 00:22:34.460
and then you'll see a link that says,


00:22:34.460 --> 00:22:35.620
did you mean recursion?


00:22:35.620 --> 00:22:37.700
(laughing)


00:22:37.700 --> 00:22:39.020
- That's awesome.


00:22:39.020 --> 00:22:40.440
All right, I don't know who put this next one here,


00:22:40.440 --> 00:22:41.460
but I really like it.


00:22:41.460 --> 00:22:42.300
You have to do it, though.


00:22:42.300 --> 00:22:43.620
- Okay, yeah, I put it down.


00:22:43.620 --> 00:22:45.300
So, hey, what's your address?


00:22:45.300 --> 00:22:48.040
- 192.7.7.3.


00:22:48.040 --> 00:22:49.340
- No, your local address.


00:22:49.340 --> 00:22:51.160
- 127.0.0.1.


00:22:51.160 --> 00:22:53.440
- No, your physical address.


00:22:53.440 --> 00:22:56.400
- A-C-5-E-C.


00:22:56.400 --> 00:22:57.560
(laughing)


00:22:57.560 --> 00:22:58.660
Give us a Mac address.


00:22:58.660 --> 00:23:01.320
- I love this.


00:23:01.320 --> 00:23:02.520
- Yeah, that's my Mac address, yeah.


00:23:02.520 --> 00:23:03.760
- Yeah, yeah.


00:23:03.760 --> 00:23:04.600
So, thanks.


00:23:04.600 --> 00:23:05.600
- That's a good one.


00:23:05.600 --> 00:23:07.160
All right, well, those were some good laughs,


00:23:07.160 --> 00:23:09.840
and Trey and Brian, thank you both for being here today.


00:23:09.840 --> 00:23:10.820
- Thanks for having me. - Thank you.


00:23:10.820 --> 00:23:12.560
- Thank you for listening to Python Bytes.


00:23:12.560 --> 00:23:15.040
Follow the show on Twitter via @pythonbytes.


00:23:15.040 --> 00:23:18.080
that's Python Bytes as in B-Y-T-E-S.


00:23:18.080 --> 00:23:21.280
And get the full show notes at pythonbytes.fm.


00:23:21.280 --> 00:23:22.880
If you have a news item you want featured,


00:23:22.880 --> 00:23:25.320
just visit pythonbytes.fm and send it our way.


00:23:25.320 --> 00:23:28.200
We're always on the lookout for sharing something cool.


00:23:28.200 --> 00:23:30.040
On behalf of myself and Brian Okken,


00:23:30.040 --> 00:23:31.380
this is Michael Kennedy.


00:23:31.380 --> 00:23:33.400
Thank you for listening and sharing this podcast


00:23:33.400 --> 00:23:35.000
with your friends and colleagues.

