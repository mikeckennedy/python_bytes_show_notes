
00:00:00.000 --> 00:00:05.040
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.040 --> 00:00:11.760
This is episode 178 recorded April 15th, 2020. I am Brian Okken.


00:00:11.760 --> 00:00:12.720
I'm Michael Kennedy.


00:00:12.720 --> 00:00:18.320
And this episode is brought to you by DigitalOcean. Who's first? I think I got my notes wrong.


00:00:18.320 --> 00:00:22.000
Yeah. Well, I want to talk about something really quick before we actually get to the first one.


00:00:22.000 --> 00:00:23.200
So we'll see.


00:00:23.200 --> 00:00:23.600
Okay.


00:00:23.600 --> 00:00:26.000
I just want to tell people about the YouTube channel. And obviously,


00:00:26.000 --> 00:00:29.120
if people are watching on YouTube, they might know about the YouTube channel.


00:00:29.120 --> 00:00:31.420
But most people subscribe to our podcast


00:00:31.420 --> 00:00:35.040
and we are multicasting and repurposing


00:00:35.040 --> 00:00:36.660
what we're doing here on YouTube.


00:00:36.660 --> 00:00:37.960
We talked a little bit about it last time.


00:00:37.960 --> 00:00:40.660
So basically each individual item


00:00:40.660 --> 00:00:42.520
is now a separate YouTube video.


00:00:42.520 --> 00:00:45.280
And you can watch Brian and me talk about it


00:00:45.280 --> 00:00:46.880
if you want to consume in that format


00:00:46.880 --> 00:00:47.840
and have a little bit of video


00:00:47.840 --> 00:00:49.640
and admire Brian's awesome shirts


00:00:49.640 --> 00:00:52.240
because he's got a bunch he's going to be wearing


00:00:52.240 --> 00:00:53.320
throughout these different shows


00:00:53.320 --> 00:00:54.360
and it's going to be awesome.


00:00:54.360 --> 00:00:56.800
- Oh, you didn't have to set it up like that, man.


00:00:56.800 --> 00:00:58.520
I only have like one good shirt.


00:00:58.520 --> 00:01:01.760
- People loved the shirt for the first video we shared.


00:01:01.760 --> 00:01:03.480
That was like several comments about,


00:01:03.480 --> 00:01:05.200
dude, your shirt is awesome.


00:01:05.200 --> 00:01:06.560
- Yeah, go figure.


00:01:06.560 --> 00:01:09.520
Okay, so we're trying to teach you about Python also.


00:01:09.520 --> 00:01:11.160
- That's right, and fashion.


00:01:11.160 --> 00:01:12.000
- Shirts.


00:01:12.000 --> 00:01:12.820
- And fashion.


00:01:12.820 --> 00:01:13.660
- Yeah.


00:01:13.660 --> 00:01:15.000
- Yeah, it's at pythonbytes.fm/youtube.


00:01:15.000 --> 00:01:15.960
People could check that out.


00:01:15.960 --> 00:01:17.600
- Well, tell me about strings, Python.


00:01:17.600 --> 00:01:18.580
I mean, Michael.


00:01:18.580 --> 00:01:21.080
- I'll tell you about Python strings.


00:01:21.080 --> 00:01:23.600
You know what, strings are confusing, man.


00:01:23.600 --> 00:01:27.280
Especially when they're about numbers and dates.


00:01:27.280 --> 00:01:28.120
Especially dates.


00:01:28.120 --> 00:01:32.500
So this seems to be a problem that vexes me permanently.


00:01:32.500 --> 00:01:37.500
And we talked about is programming Googling, right?


00:01:37.500 --> 00:01:41.160
And our consensus was maybe in the early stages


00:01:41.160 --> 00:01:43.120
of your career, there's a lot of Googling,


00:01:43.120 --> 00:01:44.440
but no, not really.


00:01:44.440 --> 00:01:46.980
You mostly just sit down and you think about the problems


00:01:46.980 --> 00:01:49.880
and you write the code and you evolve the code.


00:01:49.880 --> 00:01:51.120
There's a lot of reading code


00:01:51.120 --> 00:01:53.620
before you actually do much writing anyway.


00:01:53.620 --> 00:01:56.240
But this topic in particular,


00:01:56.240 --> 00:01:58.480
I'm all about Googling this all the time.


00:01:58.480 --> 00:02:03.480
So Python has a datetime.strptime for string parse time.


00:02:03.480 --> 00:02:08.340
You give it some piece of text like Wednesday,


00:02:08.340 --> 00:02:13.340
April 15th, comma, 10 colon 30 a.m. without a space.


00:02:13.340 --> 00:02:15.540
I want to take that and turn it into a datetime


00:02:15.540 --> 00:02:18.280
so I can maybe compare it to something else, right?


00:02:18.280 --> 00:02:19.120
Like another time.


00:02:19.120 --> 00:02:20.240
How many days is that from now?


00:02:20.240 --> 00:02:21.060
Is that in the future?


00:02:21.060 --> 00:02:21.900
Is it in the past?


00:02:21.900 --> 00:02:24.280
I just need to store it in the database as not a string,


00:02:24.280 --> 00:02:26.040
but a datetime because I want to order by it.


00:02:26.040 --> 00:02:27.400
I want it to be alphabetical, right?


00:02:27.400 --> 00:02:29.400
There's all sorts of reasons you need to get a date/time


00:02:29.400 --> 00:02:32.340
from strings or go in the reverse.


00:02:32.340 --> 00:02:35.760
And yet, the format, that strptime has a,


00:02:35.760 --> 00:02:40.800
it has a format string that tells it


00:02:40.800 --> 00:02:44.140
how to look at the string and then pull the pieces out.


00:02:44.140 --> 00:02:47.320
So, would you know about that example I told you about?


00:02:47.320 --> 00:02:49.700
Like the Wednesday, April 15th, 10.30 a.m.?


00:02:49.700 --> 00:02:52.000
- That's definitely something I Google every single time.


00:02:52.000 --> 00:02:54.400
- Every time, and it's never quite right.


00:02:54.400 --> 00:02:56.060
So just for those of you listening,


00:02:56.060 --> 00:02:56.900
you really want to know,


00:02:56.900 --> 00:03:01.900
it's %A space %B space %H comma space %M colon %S AM.


00:03:01.900 --> 00:03:06.540
Woo, who would ever come up with that?


00:03:06.540 --> 00:03:09.220
- Well, I mean, these are intentionally short.


00:03:09.220 --> 00:03:10.040
- Yes, I know.


00:03:10.040 --> 00:03:12.280
- So that they don't take up too much room,


00:03:12.280 --> 00:03:14.580
but they're, and they sort of make sense.


00:03:14.580 --> 00:03:15.720
It's just, it's arbitrary,


00:03:15.720 --> 00:03:18.100
whether it's a capital Y or a lowercase y


00:03:18.100 --> 00:03:19.820
or capital D or lowercase d.


00:03:19.820 --> 00:03:22.080
- Right, and there's documentation you can go find,


00:03:22.080 --> 00:03:23.840
like if you want the three-letter date,


00:03:23.840 --> 00:03:26.680
day of the week, that's a percent a lowercase and whatnot.


00:03:26.680 --> 00:03:28.720
But putting that all together can be tricky.


00:03:28.720 --> 00:03:31.380
So what I want to tell you about is this website


00:03:31.380 --> 00:03:36.320
by Lachlan Eaglin, and it's, let me see what the URL is.


00:03:36.320 --> 00:03:41.040
It's pie-stir-f-time.com, which of course is linked


00:03:41.040 --> 00:03:42.780
in the show notes.


00:03:42.780 --> 00:03:46.440
And the idea is you put the text you want to parse,


00:03:46.440 --> 00:03:51.440
like Wednesday, 15 April 2020 at the time or whatever,


00:03:51.440 --> 00:03:53.580
you put that in there and you hit go,


00:03:53.580 --> 00:03:57.140
And it will tell you that complex string that I told you


00:03:57.140 --> 00:03:59.100
was the right answer to my parsing problem.


00:03:59.100 --> 00:04:01.100
- Yeah, it's awesome.


00:04:01.100 --> 00:04:01.940
- Yeah.


00:04:01.940 --> 00:04:03.540
- You just put in like the output


00:04:03.540 --> 00:04:05.340
that you want it to happen,


00:04:05.340 --> 00:04:07.260
and it tells you the magical incantation.


00:04:07.260 --> 00:04:09.700
- Right, right, or the format of the thing you wanna parse,


00:04:09.700 --> 00:04:11.600
and depending on whether you're trying to go


00:04:11.600 --> 00:04:13.300
to that string or from that string.


00:04:13.300 --> 00:04:16.100
But yeah, super, super handy.


00:04:16.100 --> 00:04:18.360
This bad boy is bookmarked for me for sure,


00:04:18.360 --> 00:04:20.940
because this is way better than Googling.


00:04:20.940 --> 00:04:23.500
I can put it in there, it gives me a quick, quick answer,


00:04:23.500 --> 00:04:25.940
I can throw it into a Python REPL and see,


00:04:25.940 --> 00:04:27.300
hey, did it work or did it not work?


00:04:27.300 --> 00:04:28.180
It's really easy.


00:04:28.180 --> 00:04:29.220
- Yeah, nice.


00:04:29.220 --> 00:04:32.440
- Yeah, so not super complicated, but very handy.


00:04:32.440 --> 00:04:34.940
So people can bookmark that and try it out.


00:04:34.940 --> 00:04:38.100
- Well, I want to tell you about something easier also.


00:04:38.100 --> 00:04:39.880
I got to thank Jack.


00:04:39.880 --> 00:04:42.220
Jack McHugh has sent us a few suggestions


00:04:42.220 --> 00:04:44.620
and they're usually pretty darn nice.


00:04:44.620 --> 00:04:48.460
And here's this one's from Jack, pandas-bokeh.


00:04:48.460 --> 00:04:49.900
Bokeh?


00:04:49.900 --> 00:04:51.500
Oh, I forget how to say that.


00:04:51.500 --> 00:04:54.660
- I love the logo, Panda's Bokeh.


00:04:54.660 --> 00:04:56.020
I say Bokeh, I don't know.


00:04:56.020 --> 00:04:58.100
You know, but it's like that F-stop difference


00:04:58.100 --> 00:05:00.420
where like the person in a portrait is like crisp


00:05:00.420 --> 00:05:01.900
but the background is faded.


00:05:01.900 --> 00:05:04.300
And the logo is Panda's clear Bokeh,


00:05:04.300 --> 00:05:05.460
like in the background faded.


00:05:05.460 --> 00:05:06.420
It's beautiful.


00:05:06.420 --> 00:05:07.900
- That's a pretty cool logo.


00:05:07.900 --> 00:05:12.420
So I'm gonna quote some from their website or the readme.


00:05:12.420 --> 00:05:16.620
It says, "Panda's Bokeh provides a Bokeh plotting backend


00:05:16.620 --> 00:05:19.500
for pandas, geopandas, and PySpark data frames


00:05:19.500 --> 00:05:23.180
similar to the already existing visualization features of pandas.


00:05:23.180 --> 00:05:26.880
Importing the library adds a complimentary plotting method,


00:05:26.880 --> 00:05:30.840
plot_bokeh on data frames and series.


00:05:30.840 --> 00:05:36.840
Okay, so it's already built-in and all it provides is plot_bokeh,


00:05:36.840 --> 00:05:39.480
another function on it. What's the big deal?


00:05:39.480 --> 00:05:42.280
Well, it's so cool, it's so easy.


00:05:42.280 --> 00:05:45.220
I tried out some of these examples this morning,


00:05:45.220 --> 00:05:47.480
and it's just a little tiny bit of code.


00:05:47.480 --> 00:05:50.240
And you call, like you've got a data frame,


00:05:50.240 --> 00:05:53.800
and you call plot bouquet on it, and it pops open


00:05:53.800 --> 00:05:57.040
like an interactive graph that you can look at everything.


00:05:57.040 --> 00:05:58.880
It's actually pretty incredible.


00:05:58.880 --> 00:06:00.760
You have to do something a little different.


00:06:00.760 --> 00:06:01.840
You plot bouquet.


00:06:01.840 --> 00:06:03.360
But if you want the normal plotting


00:06:03.360 --> 00:06:06.640
to do the same awesome stuff that it's built in,


00:06:06.640 --> 00:06:10.360
you can set an option, one of the pandas options,


00:06:10.360 --> 00:06:13.320
to switch out the plotting back end.


00:06:13.320 --> 00:06:13.960
So that's neat.


00:06:13.960 --> 00:06:15.760
So apparently what it's really doing


00:06:15.760 --> 00:06:17.520
is switching out the back end.


00:06:17.520 --> 00:06:21.160
And to me, I mean, plotting is not terribly difficult,


00:06:21.160 --> 00:06:24.040
but this interface, at least for me,


00:06:24.040 --> 00:06:25.080
it makes it a lot easier.


00:06:25.080 --> 00:06:27.800
Instead of having to work with frames and plots


00:06:27.800 --> 00:06:29.680
to just call this thing.


00:06:29.680 --> 00:06:31.500
And then all the different options you can have,


00:06:31.500 --> 00:06:33.600
you can, you know, different point,


00:06:33.600 --> 00:06:35.760
you don't want it to look like an asterisk


00:06:35.760 --> 00:06:37.720
instead of a point or something,


00:06:37.720 --> 00:06:39.760
all are different color, different scale,


00:06:39.760 --> 00:06:41.200
or different titles.


00:06:41.200 --> 00:06:43.480
All that stuff is options you can pass


00:06:43.480 --> 00:06:45.000
into the plot function.


00:06:45.000 --> 00:06:48.500
And the other thing that I like, a few more things,


00:06:48.500 --> 00:06:49.680
one of them is you just,


00:06:49.680 --> 00:06:52.560
when you pip install pandas-boca,


00:06:52.560 --> 00:06:54.280
it pulls everything in,


00:06:54.280 --> 00:06:56.680
'cause all the rest of the stuff is dependent on it.


00:06:56.680 --> 00:07:00.360
So you get all of it just for a simple install.


00:07:00.360 --> 00:07:02.160
And it also generates,


00:07:02.160 --> 00:07:04.360
it's able to do this interactively,


00:07:04.360 --> 00:07:06.960
but you can also generate notebooks.


00:07:06.960 --> 00:07:08.800
Yeah, you can generate notebooks,


00:07:08.800 --> 00:07:11.520
and you can also generate standalone HTML files


00:07:11.520 --> 00:07:12.360
with this in it.


00:07:12.360 --> 00:07:13.520
- This is really cool.


00:07:13.520 --> 00:07:16.680
And yeah, the fact you can generate standalone HTML,


00:07:16.680 --> 00:07:19.680
there's probably ways to plug it into Flask sites,


00:07:19.680 --> 00:07:21.500
you know, Python websites and whatnot,


00:07:21.500 --> 00:07:23.240
pretty straightforward.


00:07:23.240 --> 00:07:25.500
And the interactive bit is super nice.


00:07:25.500 --> 00:07:29.120
I mean, this is not about Handa's interaction per se,


00:07:29.120 --> 00:07:31.240
this is just Bokeh, right?


00:07:31.240 --> 00:07:32.500
Being very cool and interactive.


00:07:32.500 --> 00:07:36.140
But you can zoom, you can pan as you move around,


00:07:36.140 --> 00:07:38.520
you know, like it'll show you the marks on the graph


00:07:38.520 --> 00:07:41.560
and you can sort of hide and show elements.


00:07:41.560 --> 00:07:42.840
And there's even a cool example


00:07:42.840 --> 00:07:45.180
where they're showing the stock price


00:07:45.180 --> 00:07:47.100
of Apple versus Google.


00:07:47.100 --> 00:07:49.320
And as you put the cursor along,


00:07:49.320 --> 00:07:52.040
it has the Apple logo next to Apple


00:07:52.040 --> 00:07:54.220
and the information, like a little card


00:07:54.220 --> 00:07:55.980
that talks about it over time.


00:07:55.980 --> 00:07:57.300
Man, this is nice stuff.


00:07:57.300 --> 00:08:00.540
And all you got to do is point it at a data frame, not bad.


00:08:00.540 --> 00:08:02.760
- Yeah, and they've got a whole bunch of examples on there.


00:08:02.760 --> 00:08:06.180
They have repo with a bunch of working examples too.


00:08:06.180 --> 00:08:07.840
Obviously for the examples,


00:08:07.840 --> 00:08:09.700
the data is just sort of random data


00:08:09.700 --> 00:08:11.140
that they're throwing in there.


00:08:11.140 --> 00:08:13.520
But once you know how to get your data,


00:08:13.520 --> 00:08:15.020
this does the rest of the work for you.


00:08:15.020 --> 00:08:15.860
So it's cool.


00:08:15.860 --> 00:08:16.700
- Very cool.


00:08:16.700 --> 00:08:17.520
Yeah, it's just a great one.


00:08:17.520 --> 00:08:18.460
And thank you, Jack, for recommending it.


00:08:18.460 --> 00:08:20.580
And yeah, it's a good one, Brian, for pulling it out.


00:08:20.580 --> 00:08:22.920
- We've had DigitalOcean as a sponsor for a while,


00:08:22.920 --> 00:08:24.260
and we really want to thank them.


00:08:24.260 --> 00:08:26.240
They've really helped us out a lot,


00:08:26.240 --> 00:08:28.420
and plus, they're pretty darn cool.


00:08:28.420 --> 00:08:29.640
So thank you, DigitalOcean,


00:08:29.640 --> 00:08:32.380
for sponsoring this episode and many others.


00:08:32.380 --> 00:08:33.860
And in the past, we've told you


00:08:33.860 --> 00:08:37.220
about a lot of awesome things with DigitalOcean,


00:08:37.220 --> 00:08:38.980
like their one-click install,


00:08:38.980 --> 00:08:41.180
Kubernetes cluster support,


00:08:41.180 --> 00:08:44.180
their amazing new support center and help documentation


00:08:44.180 --> 00:08:45.800
that's been around for a while.


00:08:45.800 --> 00:08:48.140
And our podcast runs on DigitalOcean


00:08:48.140 --> 00:08:49.360
and we're thrilled with it.


00:08:49.360 --> 00:08:51.920
And so if your business or your side project


00:08:51.920 --> 00:08:53.800
deserves great hosting and growth


00:08:53.800 --> 00:08:57.180
that will grow with you and let you scale affordably,


00:08:57.180 --> 00:08:59.900
I really definitely want you to swing by


00:08:59.900 --> 00:09:02.580
pythonbytes.fm/digitalocean


00:09:02.580 --> 00:09:06.100
to grab the $100 credit for new users.


00:09:06.100 --> 00:09:07.460
But there's something else I want to tell you


00:09:07.460 --> 00:09:09.740
about DigitalOcean that's really cool.


00:09:09.740 --> 00:09:12.220
They've got something they've started recently


00:09:12.220 --> 00:09:14.360
that's called Hub4Good,


00:09:14.360 --> 00:09:17.500
and it's designed to support COVID-19 relief efforts


00:09:17.500 --> 00:09:22.180
where DigitalOcean through this is supplying $100,000


00:09:22.180 --> 00:09:26.900
in infrastructure credits for new not-for-profit projects.


00:09:26.900 --> 00:09:31.860
They're also giving 50K to COVID-19 Relief Fund,


00:09:31.860 --> 00:09:34.640
their own relief fund, but still it's really cool.


00:09:34.640 --> 00:09:36.540
And they're also trying to raise awareness


00:09:36.540 --> 00:09:39.780
for COVID-19 related projects


00:09:39.780 --> 00:09:41.860
and provide learning for developers


00:09:41.860 --> 00:09:45.260
and also provide visibility for these projects.


00:09:45.260 --> 00:09:48.180
And so I headed over there this morning and checked it out


00:09:48.180 --> 00:09:51.220
and there's a bunch of cool projects starting out


00:09:51.220 --> 00:09:53.700
that are related to COVID-19.


00:09:53.700 --> 00:09:55.240
It's not just this sort of stuff,


00:09:55.240 --> 00:09:57.620
but it's things like there's even a platform


00:09:57.620 --> 00:10:01.740
to help teachers interact with students during quarantine.


00:10:01.740 --> 00:10:03.180
A lot of cool projects through this.


00:10:03.180 --> 00:10:04.820
So thank you, DigitalOcean.


00:10:04.820 --> 00:10:06.180
- Yeah, this is a great project.


00:10:06.180 --> 00:10:08.640
and obviously their infrastructure is great and we love it,


00:10:08.640 --> 00:10:10.120
but this is very cool too.


00:10:10.120 --> 00:10:10.960
I didn't know about this.


00:10:10.960 --> 00:10:11.800
- Yeah, it's pretty neat.


00:10:11.800 --> 00:10:13.820
- Yeah, so speaking of not knowing,


00:10:13.820 --> 00:10:18.880
I feel like I've been kind of exploring the cave of Python,


00:10:18.880 --> 00:10:21.040
which is large and vast,


00:10:21.040 --> 00:10:23.480
and I just come on like a whole 'nother area.


00:10:23.480 --> 00:10:25.760
I'm like, it opens up, like what is this?


00:10:25.760 --> 00:10:27.340
How have I not known about this?


00:10:27.340 --> 00:10:29.120
And this is NBDev.


00:10:29.120 --> 00:10:30.560
Have you heard of NBDev?


00:10:30.560 --> 00:10:31.400
- No.


00:10:31.400 --> 00:10:32.800
- Yeah, okay, so let me tell you about it,


00:10:32.800 --> 00:10:35.080
and I'll get your impressions later.


00:10:35.080 --> 00:10:40.080
So NBDev takes notebooks and basically makes them


00:10:40.080 --> 00:10:45.560
on par with writing proper Python packages


00:10:45.560 --> 00:10:47.520
and solves all these different problems.


00:10:47.520 --> 00:10:49.260
It lets you generate what's gotta be


00:10:49.260 --> 00:10:52.040
some of the best documentation, period,


00:10:52.040 --> 00:10:56.000
for that library that is sort of backed by a notebook.


00:10:56.000 --> 00:11:00.000
So it lets you develop full Python packages


00:11:00.000 --> 00:11:02.160
and libraries and notebooks where you can have


00:11:02.160 --> 00:11:07.360
your code, your unit tests, and your documentation all in one place. But then you can take it


00:11:07.360 --> 00:11:11.120
and pip install, you can upload it to pip and make it a pip install of a library that


00:11:11.120 --> 00:11:13.160
people have no idea that it came from a notebook.


00:11:13.160 --> 00:11:14.160
Wow.


00:11:14.160 --> 00:11:15.160
Is that crazy or what?


00:11:15.160 --> 00:11:17.160
That's awesome. I gotta check that out.


00:11:17.160 --> 00:11:21.540
Yeah. And you know, you think about this idea of notebooks and to me, notebooks like burst


00:11:21.540 --> 00:11:29.420
on the scene in the 2010-ish era, maybe 2012, 2011, like that timeframe. But this project


00:11:29.420 --> 00:11:33.180
references this concept envisioned by Donald Knuth


00:11:33.180 --> 00:11:35.020
way back in 1983.


00:11:35.020 --> 00:11:38.020
And it says, "Notebooks finally made literate programming,"


00:11:38.020 --> 00:11:41.020
this concept by Donald Knuth, "a thing."


00:11:41.020 --> 00:11:42.560
So, you know, the old is new again,


00:11:42.560 --> 00:11:44.100
but in a really cool way.


00:11:44.100 --> 00:11:47.020
And to me, this seems like just such a massive upgrade


00:11:47.020 --> 00:11:47.860
to notebooks.


00:11:47.860 --> 00:11:51.220
So, notebooks have a bunch of challenges, in my view.


00:11:51.220 --> 00:11:53.100
Like, I can't use a proper editor with it.


00:11:53.100 --> 00:11:55.100
Like, if I were to use PyCharm or VS Code,


00:11:55.100 --> 00:11:57.780
and all of its navigation, and its cool git blame,


00:11:57.780 --> 00:12:02.280
and history, and all this stuff is just not present.


00:12:02.280 --> 00:12:04.900
Documentation, I think that actually


00:12:04.900 --> 00:12:06.920
it really works well there,


00:12:06.920 --> 00:12:10.980
but it doesn't tie the documentation of the notebook


00:12:10.980 --> 00:12:13.220
to parts of functionality that might be created


00:12:13.220 --> 00:12:14.860
by the notebook, which is cool.


00:12:14.860 --> 00:12:16.720
One of the biggest problems with notebooks,


00:12:16.720 --> 00:12:18.260
it's a benefit, but it's a big problem,


00:12:18.260 --> 00:12:19.860
is if you run a notebook,


00:12:19.860 --> 00:12:22.600
it stores the output in the notebook.


00:12:22.600 --> 00:12:24.620
So if you had a bokeh plot,


00:12:24.620 --> 00:12:27.140
or you had a print of a data frame,


00:12:27.140 --> 00:12:29.940
that is in there and now it's part of it.


00:12:29.940 --> 00:12:31.500
So if I'm working on a project


00:12:31.500 --> 00:12:32.740
and you're working on the same project


00:12:32.740 --> 00:12:37.260
and we both run the notebook at different times


00:12:37.260 --> 00:12:38.820
or the same time but separately


00:12:38.820 --> 00:12:41.500
and it for some reason generates different results,


00:12:41.500 --> 00:12:43.700
that's a merge conflict in Git.


00:12:43.700 --> 00:12:47.700
Right, so basically you cannot use notebooks


00:12:47.700 --> 00:12:50.100
in like a sane way with Git


00:12:50.100 --> 00:12:51.800
because anytime you work with it,


00:12:51.800 --> 00:12:54.200
if you're not careful and like don't remove all the output


00:12:54.200 --> 00:12:57.420
before you save it, it's gonna be a merge conflict.


00:12:57.420 --> 00:13:00.640
So this project has a git pre-commit hook


00:13:00.640 --> 00:13:02.920
that will remove that problem.


00:13:02.920 --> 00:13:04.640
So right before it gets committed,


00:13:04.640 --> 00:13:09.200
it'll automatically do the cleaning of that metadata output


00:13:09.200 --> 00:13:10.920
so it'll never have that as a conflict.


00:13:10.920 --> 00:13:14.320
It also has an ability to like a CLI go, just accept it.


00:13:14.320 --> 00:13:17.720
I just accept all the metadata changes.


00:13:17.720 --> 00:13:19.640
Mine are just right or whatever, right?


00:13:19.640 --> 00:13:22.160
So it also has a CLI to automatically fix that


00:13:22.160 --> 00:13:23.440
but if you do have those problems,


00:13:23.440 --> 00:13:26.080
but it also has this pre-commit help to avoid them entirely.


00:13:26.080 --> 00:13:28.000
- Nice, that's a nice use for pre-commit too.


00:13:28.000 --> 00:13:29.660
- Yeah, it's super clever.


00:13:29.660 --> 00:13:31.480
So if I write a function in the notebook,


00:13:31.480 --> 00:13:34.260
I can put hash export in that cell,


00:13:34.260 --> 00:13:37.600
and that becomes a public function in the package.


00:13:37.600 --> 00:13:38.440
- Oh, cool.


00:13:38.440 --> 00:13:40.600
- Right, so I write documentation and pictures,


00:13:40.600 --> 00:13:41.960
and I say hash export.


00:13:41.960 --> 00:13:44.980
Now that's part of my library that I'm building.


00:13:44.980 --> 00:13:48.080
It also lets you create the structure for Python packages.


00:13:48.080 --> 00:13:50.000
So you have the setup py,


00:13:50.000 --> 00:13:53.500
and you can do the build wheels and whatnot


00:13:53.500 --> 00:13:55.120
automatically out of that.


00:13:55.120 --> 00:13:57.040
And it uses this exported stuff.


00:13:57.040 --> 00:13:59.440
You can have your unit tests in your notebook,


00:13:59.440 --> 00:14:02.480
which is pretty cool, for the things that are in there.


00:14:02.480 --> 00:14:04.120
And then finally, you can edit it.


00:14:04.120 --> 00:14:05.720
You can take the edited library,


00:14:05.720 --> 00:14:07.400
or the library that exported, sorry,


00:14:07.400 --> 00:14:10.760
and then edit it with PyCharm or VS Code,


00:14:10.760 --> 00:14:13.280
and then reverse export it.


00:14:13.280 --> 00:14:14.460
So what you can do is like, say,


00:14:14.460 --> 00:14:16.480
push the changes that I've done with my editor


00:14:16.480 --> 00:14:18.840
back into the segments of the notebook


00:14:18.840 --> 00:14:20.000
where that code came from.


00:14:20.000 --> 00:14:21.640
- Oh man, okay.


00:14:21.640 --> 00:14:23.740
I'm a little confused, but I gotta try it out.


00:14:23.740 --> 00:14:25.520
- Yeah, you gotta kinda read through it to get the sense,


00:14:25.520 --> 00:14:26.920
but there's just a bunch of stuff,


00:14:26.920 --> 00:14:28.240
like all these things seem like,


00:14:28.240 --> 00:14:30.320
yes, you should have been able to do that with notebooks,


00:14:30.320 --> 00:14:32.900
but obviously, right, that's not their origins, right?


00:14:32.900 --> 00:14:34.140
They can't do everything at once,


00:14:34.140 --> 00:14:36.760
but all of these things seem awesome to me.


00:14:36.760 --> 00:14:38.400
Yeah, so in order to get started,


00:14:38.400 --> 00:14:41.320
it's going to basically create a Git repo for you,


00:14:41.320 --> 00:14:43.520
is my understanding, either on GitHub or GitLab.


00:14:43.520 --> 00:14:45.960
So you gotta follow the getting started instructions,


00:14:45.960 --> 00:14:46.840
and then you click a button,


00:14:46.840 --> 00:14:49.240
and it'll generate the repo in the right structure,


00:14:49.240 --> 00:14:53.560
or you can use the CLI tooling to generate the right repo


00:14:53.560 --> 00:14:56.780
with things like the Git commit pre-hooks and whatnot.


00:14:56.780 --> 00:14:58.360
And if you're gonna read the docs,


00:14:58.360 --> 00:15:03.360
check out nbdev.fast.ai, 'cause this comes from FastAI,


00:15:03.360 --> 00:15:08.240
people, the same one as the build the FastAPI framework.


00:15:08.240 --> 00:15:10.400
So some of the docs render better.


00:15:10.400 --> 00:15:12.520
There's certain things on GitHub that it says,


00:15:12.520 --> 00:15:15.040
and here's a cool picture, and it's just like source code.


00:15:15.040 --> 00:15:15.960
It's not quite right.


00:15:15.960 --> 00:15:19.820
So maybe check out the final link at the bottom


00:15:19.820 --> 00:15:21.960
in this section to get to,


00:15:21.960 --> 00:15:23.160
if you're gonna like browse through it,


00:15:23.160 --> 00:15:25.920
but it's basically, you get the same thing out of GitHub.


00:15:25.920 --> 00:15:30.000
Anyway, this to me seems like a massive improvement


00:15:30.000 --> 00:15:34.220
for notebooks and sort of brings them more into,


00:15:34.220 --> 00:15:36.500
I can do things, like for example,


00:15:36.500 --> 00:15:40.080
you can now have your notebook and its tests running


00:15:40.080 --> 00:15:42.440
as part of continuous integration.


00:15:42.440 --> 00:15:44.820
Like so these notebooks are now like full participants


00:15:44.820 --> 00:15:48.940
and CICD, you can upload, you can create packages


00:15:48.940 --> 00:15:49.900
and put them on PyPI.


00:15:49.900 --> 00:15:51.660
There's all sorts of neat stuff.


00:15:51.660 --> 00:15:53.820
The document, like if you have a cool graph


00:15:53.820 --> 00:15:56.160
as part of your notebook, that can become


00:15:56.160 --> 00:16:00.500
the documentation on PyPI or read the docs


00:16:00.500 --> 00:16:01.500
for those functions. - That's crazy.


00:16:01.500 --> 00:16:04.140
- I mean, it's crazy cool how this is like


00:16:04.140 --> 00:16:06.540
taking some of the awesome parts of notebooks,


00:16:06.540 --> 00:16:09.300
like the doc side and turn that into the help docs


00:16:09.300 --> 00:16:11.700
and then also letting you export the functionality


00:16:11.700 --> 00:16:13.860
still as a proper CS type thing.


00:16:13.860 --> 00:16:15.900
- Yeah, I definitely gotta check this out.


00:16:15.900 --> 00:16:17.340
- How did I not even know this existed?


00:16:17.340 --> 00:16:18.180
Like, this is awesome.


00:16:18.180 --> 00:16:20.100
- Well, I don't know how long, I mean, it looks like--


00:16:20.100 --> 00:16:21.940
- It looks like five months to me, is my guess.


00:16:21.940 --> 00:16:23.780
- Okay, so we're not that behind the bombs.


00:16:23.780 --> 00:16:25.780
- No, we're not that behind, yeah.


00:16:25.780 --> 00:16:26.600
- But this looks neat.


00:16:26.600 --> 00:16:27.440
- Yeah, it's very neat.


00:16:27.440 --> 00:16:28.500
- Plus Fast.ai is pretty cool,


00:16:28.500 --> 00:16:31.140
so I think this is probably pretty solid.


00:16:31.140 --> 00:16:32.420
- Yeah, I agree, it's definitely got


00:16:32.420 --> 00:16:35.220
some solid people behind it, so very cool, very cool.


00:16:35.220 --> 00:16:37.300
Anyway, in BDEV, quite neat.


00:16:37.300 --> 00:16:40.660
- I wanna talk about something a little not neat,


00:16:40.660 --> 00:16:42.140
a little lighthearted.


00:16:42.140 --> 00:16:44.640
So this is sort of a serious topic,


00:16:44.640 --> 00:16:48.100
but this is a article from Sebastian


00:16:48.100 --> 00:16:52.600
entitled "Stop Naming Your Python Modules 'Utils'".


00:16:52.600 --> 00:16:53.940
And I don't think we've,


00:16:53.940 --> 00:16:55.380
I don't know if we've covered it before,


00:16:55.380 --> 00:16:58.100
but it's good advice and it's something that happens.


00:16:58.100 --> 00:17:01.060
Basically a lot of projects, public or private,


00:17:01.060 --> 00:17:04.380
will at some point end up having a utils.py


00:17:04.380 --> 00:17:06.760
or a utils package or something.


00:17:06.760 --> 00:17:11.180
And this article is just saying, resist the urge.


00:17:11.180 --> 00:17:14.360
Utils is arguably one of the worst names for modules


00:17:14.360 --> 00:17:17.140
because it's very blurry and imprecise.


00:17:17.140 --> 00:17:19.580
Some of the names did not say what,


00:17:19.580 --> 00:17:21.400
such a name does not say what the purpose


00:17:21.400 --> 00:17:23.060
of the code inside is.


00:17:23.060 --> 00:17:26.140
And on the contrary, Utils module can,


00:17:26.140 --> 00:17:28.200
well, contain almost anything.


00:17:28.200 --> 00:17:30.220
By naming a module Utils,


00:17:30.220 --> 00:17:33.100
software developer lays down perfect conditions


00:17:33.100 --> 00:17:38.100
for an incohesive, uncohesive, whatever, code blob.


00:17:38.100 --> 00:17:40.840
And I have definitely seen this in action.


00:17:40.840 --> 00:17:52.000
I have been one of the culprits before of having a pulling out a little helper function that I had in one file, and I wanted to use it in a different module.


00:17:52.000 --> 00:17:53.760
So I didn't know where to put it.


00:17:53.760 --> 00:17:57.240
So I stuck it in a utils.py, added a couple more.


00:17:57.240 --> 00:17:58.680
So there's just a few methods.


00:17:58.680 --> 00:18:07.520
And I come back six months later, and there's like a couple dozen just junk drawer functions from all over the place in there.


00:18:07.520 --> 00:18:10.440
So if you start, people will add junk to it.


00:18:10.480 --> 00:18:13.480
So Sebastian lists a few excuses.


00:18:13.480 --> 00:18:16.200
It's just one function, but it grows.


00:18:16.200 --> 00:18:18.200
There's no other place in the code to put it.


00:18:18.200 --> 00:18:19.360
Well, try harder.


00:18:19.360 --> 00:18:21.880
And I need a place for company comments.


00:18:21.880 --> 00:18:23.240
I don't really know what that means,


00:18:23.240 --> 00:18:25.360
but name it company or something.


00:18:25.360 --> 00:18:27.120
And also Django does it.


00:18:27.120 --> 00:18:29.040
Well, I don't know if you're a wealth,


00:18:29.040 --> 00:18:30.200
maybe they shouldn't have,


00:18:30.200 --> 00:18:31.200
but they have it now,


00:18:31.200 --> 00:18:32.360
so they're not going to change it.


00:18:32.360 --> 00:18:34.920
So the advice is to try name,


00:18:34.920 --> 00:18:37.920
try grouping your utility functions


00:18:37.920 --> 00:18:39.520
and naming them based on


00:18:39.520 --> 00:18:41.960
the role of how you're going to use it,


00:18:41.960 --> 00:18:45.160
or possibly group them in themes.


00:18:45.160 --> 00:18:50.000
And also, if you see a utils.py crop up in a code review,


00:18:50.000 --> 00:18:53.620
just request that the person rename it to something else,


00:18:53.620 --> 00:18:55.080
if possible.


00:18:55.080 --> 00:18:57.080
- Just set up a CI rule to break the build


00:18:57.080 --> 00:18:58.320
if you see that file name.


00:18:58.320 --> 00:18:59.520
(laughing)


00:18:59.520 --> 00:19:02.320
- Yeah, so what are your thoughts on this, on utils?


00:19:02.320 --> 00:19:04.640
- I agree with Sebastian, absolutely.


00:19:04.640 --> 00:19:06.120
I understand the challenge,


00:19:06.120 --> 00:19:09.440
because naming things in software is hard,


00:19:09.440 --> 00:19:13.000
But naming things in software is super important


00:19:13.000 --> 00:19:16.200
because when you think about,


00:19:16.200 --> 00:19:17.640
like even just like function names


00:19:17.640 --> 00:19:19.900
or class names or whatever, right?


00:19:19.900 --> 00:19:23.100
Usually what will happen is we'll get like a crummy,


00:19:23.100 --> 00:19:25.020
vague name and then a comment describing


00:19:25.020 --> 00:19:26.320
what they are doing.


00:19:26.320 --> 00:19:28.160
And you're like, well, why don't you just make the name


00:19:28.160 --> 00:19:30.560
a little bit longer that says what it does.


00:19:30.560 --> 00:19:33.960
And utils is kind of like the generic catch all


00:19:33.960 --> 00:19:36.080
of saying like, well, I couldn't come up with a name.


00:19:36.080 --> 00:19:37.000
So here it is.


00:19:37.000 --> 00:19:38.880
We're just going to drop it here.


00:19:38.880 --> 00:19:43.060
And in my code, I have tons of different areas


00:19:43.060 --> 00:19:46.460
in which I organize it, sort of like submodules,


00:19:46.460 --> 00:19:49.600
I guess, or subpackages if it's a package,


00:19:49.600 --> 00:19:52.400
but sometimes it's not technically a package.


00:19:52.400 --> 00:19:55.920
And I try to come up with names that are meaningful.


00:19:55.920 --> 00:19:57.560
I have something called number converter


00:19:57.560 --> 00:19:59.580
that will try to parse an integer


00:19:59.580 --> 00:20:02.040
or return a default value instead of throwing an exception,


00:20:02.040 --> 00:20:04.340
or it'll try to parse some other thing,


00:20:04.340 --> 00:20:06.660
or maybe it's called conversions.py or whatever,


00:20:06.660 --> 00:20:08.480
but it's not like utils.


00:20:08.480 --> 00:20:12.280
There's usually some kind of better structure


00:20:12.280 --> 00:20:15.880
you can find that will help you do this.


00:20:15.880 --> 00:20:17.480
You know, there's that joke that,


00:20:17.480 --> 00:20:19.120
you know, naming things in computer science,


00:20:19.120 --> 00:20:21.360
that's one of the hardest problems, right?


00:20:21.360 --> 00:20:23.040
I do agree with that, but yeah,


00:20:23.040 --> 00:20:25.200
it's worth the effort when you get it figured out.


00:20:25.200 --> 00:20:27.620
- If you don't believe me, you can just try it sometime.


00:20:27.620 --> 00:20:29.240
If you're working on a group project,


00:20:29.240 --> 00:20:32.920
just put one function in utils and you will see it grow.


00:20:32.920 --> 00:20:33.760
And you'll have to find it.


00:20:33.760 --> 00:20:36.160
- Is this like the broken window theory of software?


00:20:36.160 --> 00:20:38.240
- Yeah, definitely.


00:20:38.240 --> 00:20:40.680
- Yep, and misc doesn't count either.


00:20:40.680 --> 00:20:42.920
If you'd name it misc, it's just as bad.


00:20:42.920 --> 00:20:43.760
- That's right.


00:20:43.760 --> 00:20:46.320
Yeah, there's probably some synonyms here


00:20:46.320 --> 00:20:48.400
in the code world that don't count.


00:20:48.400 --> 00:20:49.340
So yeah, awesome.


00:20:49.340 --> 00:20:51.000
I want to tell you about this one next


00:20:51.000 --> 00:20:52.760
that helps with performance


00:20:52.760 --> 00:20:54.200
or understanding the performance


00:20:54.200 --> 00:20:56.740
more specifically of your code.


00:20:56.740 --> 00:21:00.960
So I don't know how much profiling you guys do your work.


00:21:00.960 --> 00:21:03.000
How much does performance matter to you guys?


00:21:03.000 --> 00:21:03.920
- It matters a lot.


00:21:03.920 --> 00:21:05.640
- Yeah? - Yeah.


00:21:05.640 --> 00:21:08.920
I'm building things that go into testing


00:21:08.920 --> 00:21:10.020
in a production line.


00:21:10.020 --> 00:21:12.980
So every millisecond that it takes,


00:21:12.980 --> 00:21:16.000
takes a millisecond longer to get something shipped.


00:21:16.000 --> 00:21:17.720
So yes, it matters.


00:21:17.720 --> 00:21:18.660
- Yeah, it matters.


00:21:18.660 --> 00:21:20.600
I'm supposed to mostly spend my time on the web


00:21:20.600 --> 00:21:22.340
and obviously it matters there, right?


00:21:22.340 --> 00:21:24.200
Like every hundred milliseconds,


00:21:24.200 --> 00:21:28.160
I think Amazon measured is like 1% loss of orders


00:21:28.160 --> 00:21:29.600
or something ridiculous like that, right?


00:21:29.600 --> 00:21:32.480
Like, so understanding your performance is good.


00:21:32.480 --> 00:21:37.480
We've had good, good in quotes, profilers for Python,


00:21:37.480 --> 00:21:40.640
and they typically tell you about


00:21:40.640 --> 00:21:42.960
this function spent this much time.


00:21:42.960 --> 00:21:44.820
But another challenge is,


00:21:44.820 --> 00:21:47.760
my program is using too much memory or worse,


00:21:47.760 --> 00:21:49.760
it's something long running like a web app


00:21:49.760 --> 00:21:52.620
or some background process, and it's like growing.


00:21:52.620 --> 00:21:56.420
It's like sort of leaking memory.


00:21:56.420 --> 00:21:57.620
Why is that?


00:21:57.620 --> 00:22:00.700
So I came across this project called Scaling,


00:22:00.700 --> 00:22:03.780
which is a high performance and high precision


00:22:03.780 --> 00:22:07.100
CPU and memory profiler for Python.


00:22:07.100 --> 00:22:07.940
- Cool.


00:22:07.940 --> 00:22:11.300
- Yeah, so it lets you either analyze CPU time


00:22:11.300 --> 00:22:14.460
or it actually lets you on a line by line basis


00:22:14.460 --> 00:22:17.940
say here's some memory, what line made this


00:22:17.940 --> 00:22:19.620
and where's it coming from.


00:22:19.620 --> 00:22:21.060
Yeah, and so that's cool.


00:22:21.060 --> 00:22:23.460
But one of the challenges for profiling


00:22:23.460 --> 00:22:25.540
is when you're profiling your code,


00:22:25.540 --> 00:22:28.340
you can make it, you don't get the same behavior.


00:22:28.340 --> 00:22:31.520
It's sort of like the Heisenberg uncertainty principle.


00:22:31.520 --> 00:22:34.400
It does one thing, but when you measure the profiler,


00:22:34.400 --> 00:22:36.320
you've changed it, so now you kind of got to say,


00:22:36.320 --> 00:22:39.240
well, that part where it was the network,


00:22:39.240 --> 00:22:42.520
that was 50%, but now you made the computational bits


00:22:42.520 --> 00:22:45.800
way slower, so that network part looks just like 20.


00:22:45.800 --> 00:22:47.160
You're affecting it.


00:22:47.160 --> 00:22:50.280
So for example, if you use profile, the built-in profile,


00:22:50.280 --> 00:22:52.620
it can make your code 30 times faster,


00:22:52.620 --> 00:22:56.800
or a simple scenario, than running it normally.


00:22:56.800 --> 00:22:58.000
But you can use C profile,


00:22:58.000 --> 00:22:59.880
which is the C-based one that's built in.


00:22:59.880 --> 00:23:03.280
It only slows it down by 1.65 times.


00:23:03.280 --> 00:23:04.880
So that's not too bad.


00:23:04.880 --> 00:23:07.540
There's a line profiler that's 11 times slower.


00:23:07.540 --> 00:23:08.940
And there's a whole bunch of other ones.


00:23:08.940 --> 00:23:10.220
There's a memory profiler


00:23:10.220 --> 00:23:13.200
that's like over a thousand times slower.


00:23:13.200 --> 00:23:16.500
So the scaling thing has a nice comparison


00:23:16.500 --> 00:23:17.720
to all these things.


00:23:17.720 --> 00:23:20.360
It says, well, how does scaling do?


00:23:20.360 --> 00:23:22.600
And it claims that it's got this built-in library


00:23:22.600 --> 00:23:23.440
that's much faster.


00:23:23.440 --> 00:23:26.960
for CPU stuff, it's 1.04 times the speed.


00:23:26.960 --> 00:23:29.220
So, like 4% slower.


00:23:29.220 --> 00:23:31.120
And it does that through sampling, right?


00:23:31.120 --> 00:23:32.160
It doesn't do instrumentation,


00:23:32.160 --> 00:23:33.640
it doesn't rewrite the stuff,


00:23:33.640 --> 00:23:35.280
it actually just asks frequently,


00:23:35.280 --> 00:23:37.420
like, "Hey, where are you in the code?"


00:23:37.420 --> 00:23:39.960
But it still gets per line analysis to that,


00:23:39.960 --> 00:23:41.040
which is pretty cool.


00:23:41.040 --> 00:23:43.620
And then the memory one is like another 10% slower


00:23:43.620 --> 00:23:46.320
because analyzing memory is hard.


00:23:46.320 --> 00:23:49.320
But yeah, there's all sorts of cool stuff you can do with it.


00:23:49.320 --> 00:23:51.200
The overhead is not too bad,


00:23:51.200 --> 00:23:53.460
The precision is pretty good.


00:23:53.460 --> 00:23:56.020
So like I said, it gives you like a line by line level


00:23:56.020 --> 00:23:59.520
of how much time you're spending in various places.


00:23:59.520 --> 00:24:01.580
It also is interesting in that it separates out


00:24:01.580 --> 00:24:04.780
the time spent running Python code from native code,


00:24:04.780 --> 00:24:07.620
including like the base libraries and stuff.


00:24:07.620 --> 00:24:11.660
So you can say, like, I can only affect the Python stuff.


00:24:11.660 --> 00:24:14.780
The other stuff is not a thing I can deal with.


00:24:14.780 --> 00:24:18.220
So yeah, don't tell me about it or punish me for it.


00:24:18.220 --> 00:24:19.940
Or maybe I do want to look at it, right?


00:24:19.940 --> 00:24:21.180
Tell me about that.


00:24:21.180 --> 00:24:22.020
- So that's pretty cool.


00:24:22.020 --> 00:24:25.560
And then also, the memory stuff, I think is pretty cool.


00:24:25.560 --> 00:24:28.000
So it says it points to specific lines of code


00:24:28.000 --> 00:24:29.920
responsible for memory growth.


00:24:29.920 --> 00:24:31.640
And it's important it does this through


00:24:31.640 --> 00:24:36.080
a special memory allocator thing that comes with it.


00:24:36.080 --> 00:24:39.560
And so while you can pip install scalene,


00:24:39.560 --> 00:24:41.920
you can't inspect the memory allocation that way.


00:24:41.920 --> 00:24:43.880
You have to go and install it directly


00:24:43.880 --> 00:24:45.200
and do some more setup.


00:24:45.200 --> 00:24:46.720
On macOS you can do brew install.


00:24:46.720 --> 00:24:48.720
There's instructions in there on how to do that.


00:24:48.720 --> 00:24:51.080
On other OS's I have no idea what you do.


00:24:51.080 --> 00:24:54.540
but you can't run the memory allocation directly.


00:24:54.540 --> 00:24:56.200
You can't just say pip install it


00:24:56.200 --> 00:24:57.280
and then do the memory allocator.


00:24:57.280 --> 00:24:59.160
There's something other like lower subsystem


00:24:59.160 --> 00:25:00.760
that has to get installed for that to work.


00:25:00.760 --> 00:25:03.160
- Yeah, and memory is an interesting one


00:25:03.160 --> 00:25:06.720
because it's a difficult one to chase down with Python.


00:25:06.720 --> 00:25:08.320
- Yeah, it's very hard in Python


00:25:08.320 --> 00:25:09.640
'cause everything is a pointer,


00:25:09.640 --> 00:25:11.600
everything is an indirection.


00:25:11.600 --> 00:25:13.720
It's not like, well, here's the block


00:25:13.720 --> 00:25:16.880
where we allocated this object or whatever, right?


00:25:16.880 --> 00:25:18.720
Like it's pretty indirect.


00:25:18.720 --> 00:25:22.240
And you don't typically have a hold of pointers


00:25:22.240 --> 00:25:24.480
in the like main address sense of it,


00:25:24.480 --> 00:25:25.920
like you do in C or something, right?


00:25:25.920 --> 00:25:27.520
So it's, yeah, it's challenging.


00:25:27.520 --> 00:25:28.840
I would love to see this integrated


00:25:28.840 --> 00:25:30.320
into PyCharm and VS Code.


00:25:30.320 --> 00:25:31.160
- Oh, yeah.


00:25:31.160 --> 00:25:33.320
- Right, right now it just gives you,


00:25:33.320 --> 00:25:37.360
it gives you like a cool tabular text output or file output,


00:25:37.360 --> 00:25:39.800
but if you could just right click in PyCharm


00:25:39.800 --> 00:25:42.040
and say analyze with scalene, that'd be sweet.


00:25:42.040 --> 00:25:44.440
- Yeah, I wonder, and also that would solve


00:25:44.440 --> 00:25:45.520
some of the install thing.


00:25:45.520 --> 00:25:47.840
So if you have to install it separately,


00:25:47.840 --> 00:25:50.300
some integration with PyCharm VS Code would be cool.


00:25:50.300 --> 00:25:53.020
- Right, like right now you can do profiling


00:25:53.020 --> 00:25:54.500
and it's really awesome in PyCharm


00:25:54.500 --> 00:25:56.100
but I'm pretty sure it uses C Profile


00:25:56.100 --> 00:25:58.620
so, yeah, who knows, someday maybe.


00:25:58.620 --> 00:25:59.980
- Hey, while we're talking about editors,


00:25:59.980 --> 00:26:01.300
I don't know about VS Code


00:26:01.300 --> 00:26:03.760
but I do know, backing up a little bit,


00:26:03.760 --> 00:26:07.220
I do know that PyCharm does open notebooks okay, so.


00:26:07.220 --> 00:26:08.060
- Awesome, yeah.


00:26:08.060 --> 00:26:09.220
- Just backed that, anyway.


00:26:09.220 --> 00:26:10.060
- Yeah, yeah, nice.


00:26:10.060 --> 00:26:12.580
- I want to tell you a little bit about testing.


00:26:12.580 --> 00:26:15.360
- Awesome, I'm really surprised that you're covering this


00:26:15.360 --> 00:26:16.700
but okay, yeah, go ahead.


00:26:16.700 --> 00:26:18.080
(laughing)


00:26:18.080 --> 00:26:19.480
- Yeah, it's interesting.


00:26:19.480 --> 00:26:21.560
Lately, you've been covering the testing articles.


00:26:21.560 --> 00:26:23.560
- I know, isn't that my role now?


00:26:23.560 --> 00:26:24.400
No, go ahead.


00:26:24.400 --> 00:26:25.220
This is great, tell us about it.


00:26:25.220 --> 00:26:27.840
- Yeah, this is a person named Carolyn


00:26:27.840 --> 00:26:29.440
that wrote an article called


00:26:29.440 --> 00:26:34.080
"From 1 to 10,000 Test Cases in Under an Hour,


00:26:34.080 --> 00:26:35.360
Beginner's Guide to Proper--


00:26:35.360 --> 00:26:36.200
- That's productive.


00:26:36.200 --> 00:26:39.600
And imagine if Carolyn was getting paid by the test, right?


00:26:39.600 --> 00:26:42.160
Like, we're evaluating your bonus for the year.


00:26:42.160 --> 00:26:44.600
Like, I wrote five times as many tests as anyone else


00:26:44.600 --> 00:26:46.520
and I just started this month.


00:26:46.520 --> 00:26:52.720
Yeah, I would totally use if I was paid by the test case, I would definitely use hypothesis on every project.


00:26:52.720 --> 00:26:57.520
So how did she do this? What is this property based testing?


00:26:57.520 --> 00:27:16.440
Okay, so hopefully people have heard of property based testing, but it is. So the it's as opposed to like, what do we call it example based testing. So, and this is kind of how she goes through this discussion. It's it's as the article is really just a really excellent introduction to property based testing and using


00:27:16.440 --> 00:27:21.160
hypothesis. And it's, I mean, she's using hypothesis in the example, but the


00:27:21.160 --> 00:27:25.320
intent is just property-based testing because you can, it's the same sort of


00:27:25.320 --> 00:27:30.480
strategy with every other type of property-based testing library. She just


00:27:30.480 --> 00:27:35.440
happens to be using hypothesis in Python. So that's nice. But she starts off


00:27:35.440 --> 00:27:41.600
with a unit test example of just doing, she has like a string sort, or not a


00:27:41.600 --> 00:27:44.760
a string sort, but a list sorting thing.


00:27:44.760 --> 00:27:47.760
And if you're doing example based testing,


00:27:47.760 --> 00:27:49.760
you just pick a few example tests,


00:27:49.760 --> 00:27:53.200
example test cases where you would take the input


00:27:53.200 --> 00:27:56.160
and you know what the sorted output should look like.


00:27:56.160 --> 00:27:57.920
And you run it through the function


00:27:57.920 --> 00:27:59.920
and make sure the output assert that it's equal


00:27:59.920 --> 00:28:02.120
or equal to the expected one.


00:28:02.120 --> 00:28:05.100
How would you do this with property based testing?


00:28:05.100 --> 00:28:08.120
And before she goes in, and she does give an example


00:28:08.120 --> 00:28:10.520
of how to write some sort of test like that


00:28:10.520 --> 00:28:13.360
and property-based testing, but she stops and pauses


00:28:13.360 --> 00:28:16.100
and talks about kind of the different mindset.


00:28:16.100 --> 00:28:18.320
You can't test against an exact example


00:28:18.320 --> 00:28:20.660
because you don't know what example is coming in.


00:28:20.660 --> 00:28:22.240
So you have to think about properties.


00:28:22.240 --> 00:28:24.000
So like on a list sort thing,


00:28:24.000 --> 00:28:26.280
you don't have the exact answer,


00:28:26.280 --> 00:28:29.360
but you could check to make sure that the link


00:28:29.360 --> 00:28:32.320
should be the same and that you can use sets


00:28:32.320 --> 00:28:34.120
on both the input and output to make sure


00:28:34.120 --> 00:28:37.360
that the contents of the both are identical.


00:28:37.360 --> 00:28:38.760
And then you can go through the answer


00:28:38.760 --> 00:28:40.880
and make sure that element-wise,


00:28:40.880 --> 00:28:44.240
every element i is less than or equal to i plus one.


00:28:44.240 --> 00:28:46.480
You know, there's ways to test sort


00:28:46.480 --> 00:28:49.680
without just knowing the answer.


00:28:49.680 --> 00:28:51.960
But it takes a mind shift a little bit.


00:28:51.960 --> 00:28:54.380
And I think actually that's one of the benefits


00:28:54.380 --> 00:28:58.060
of property-based testing is thinking in terms of that also.


00:28:58.060 --> 00:29:00.400
I also think it's nice that she talks about


00:29:00.400 --> 00:29:04.300
how this isn't a replacement for example-based testing.


00:29:04.300 --> 00:29:06.300
It is a complement to it.


00:29:06.300 --> 00:29:08.980
And so you can mix them together.


00:29:08.980 --> 00:29:11.380
Then she goes on to introduce some of the aspects


00:29:11.380 --> 00:29:14.700
of hypothesis, like there's some cool strategies


00:29:14.700 --> 00:29:17.700
like some lists and some integers


00:29:17.700 --> 00:29:20.820
and being able to set the max examples


00:29:20.820 --> 00:29:22.640
so you can set how many,


00:29:22.640 --> 00:29:25.220
and that's where you can just set it to 10,000


00:29:25.220 --> 00:29:28.300
and wham, you have 10,000 test cases right away.


00:29:28.300 --> 00:29:31.620
But, and just let hypothesis come up with the examples.


00:29:31.620 --> 00:29:34.220
The real meat of the article, which I really appreciate


00:29:34.220 --> 00:29:39.220
is just the hard part of property-based testing isn't the,


00:29:39.220 --> 00:29:40.560
some of it's the syntax,


00:29:40.560 --> 00:29:43.280
and she does cover the syntax on how to get this done,


00:29:43.280 --> 00:29:45.580
but it's also just how to think about the properties,


00:29:45.580 --> 00:29:49.120
how to, coming up with what properties to test for


00:29:49.120 --> 00:29:50.420
is the hard part.


00:29:50.420 --> 00:29:52.800
And so taking a little time to talk about that,


00:29:52.800 --> 00:29:54.920
I think this is a great thing.


00:29:54.920 --> 00:29:57.880
I'm also glad she threw in that one of the things


00:29:57.880 --> 00:30:01.160
you should check for with tests, property-based testing,


00:30:01.160 --> 00:30:04.220
is making sure exceptions that get raised


00:30:04.220 --> 00:30:06.400
are expected exceptions.


00:30:06.400 --> 00:30:08.840
So if you throw garbage in or different cases


00:30:08.840 --> 00:30:10.180
that don't make sense,


00:30:10.180 --> 00:30:11.920
you should know what kind of exceptions


00:30:11.920 --> 00:30:14.000
are gonna come out and that this can be caught


00:30:14.000 --> 00:30:16.740
with your tests with hypothesis.


00:30:16.740 --> 00:30:19.440
And then also a great use for all of this


00:30:19.440 --> 00:30:22.460
is to implement whatever functionality you wanted


00:30:22.460 --> 00:30:25.000
in a very simplistic, but possibly slow


00:30:25.000 --> 00:30:28.120
or memory hoggy way or something.


00:30:28.120 --> 00:30:30.400
And then you can compare the elegant version


00:30:30.400 --> 00:30:33.620
and the slow version within the tests


00:30:33.620 --> 00:30:35.900
to make sure that they come up with the same answer.


00:30:35.900 --> 00:30:38.460
This is also great if you're doing a refactoring,


00:30:38.460 --> 00:30:40.480
you can refactor part of your system


00:30:40.480 --> 00:30:43.680
and make sure that the old and new way act the same.


00:30:43.680 --> 00:30:46.120
So it's just a good introduction to all of this.


00:30:46.120 --> 00:30:49.040
- Yeah, and a property-based testing is,


00:30:49.040 --> 00:30:52.280
you're right, it's such a mind shift and it's,


00:30:52.280 --> 00:30:54.240
I don't know, I haven't fully embraced it yet,


00:30:54.240 --> 00:30:56.800
but I feel like there's probably some places


00:30:56.800 --> 00:30:59.840
where it would really be interesting and useful


00:30:59.840 --> 00:31:01.840
I probably should just look into it.


00:31:01.840 --> 00:31:03.180
I don't know, I get stuck in my ways


00:31:03.180 --> 00:31:05.360
and then I just keep going that way.


00:31:05.360 --> 00:31:08.360
At the end, she talks about if you're not using Python,


00:31:08.360 --> 00:31:11.240
what options you have as well, which is kind of cool.


00:31:11.240 --> 00:31:13.920
So it's like, hey, hypothesis is cool in Python,


00:31:13.920 --> 00:31:16.160
but if you're in TypeScript, we got FastCheck.


00:31:16.160 --> 00:31:19.600
We're on .NET, they don't have dashes or A's or T's,


00:31:19.600 --> 00:31:21.160
so there's FSCheck.


00:31:21.160 --> 00:31:25.000
And in Java, there's this and C++ and Rust and so on.


00:31:25.000 --> 00:31:28.160
So yeah, it looks like you could use


00:31:28.160 --> 00:31:31.100
the same thinking and ideas across different parts


00:31:31.100 --> 00:31:33.520
of your stack if you're having different technologies


00:31:33.520 --> 00:31:34.360
in there.


00:31:34.360 --> 00:31:36.800
- This is another example of, if it shows up


00:31:36.800 --> 00:31:39.480
in every language, it's probably something


00:31:39.480 --> 00:31:41.120
you should be paying attention to.


00:31:41.120 --> 00:31:43.360
- That's a really, that's a good rule of thumb.


00:31:43.360 --> 00:31:45.820
It's like, yeah, if I see it all over the place, right,


00:31:45.820 --> 00:31:49.960
this is a general CS sort of thing that's important.


00:31:49.960 --> 00:31:50.800
Yeah. - Yeah.


00:31:50.800 --> 00:31:52.660
- You know what else I like about going through stuff


00:31:52.660 --> 00:31:54.320
like this is you come across things


00:31:54.320 --> 00:31:56.120
that you didn't know about, right?


00:31:56.120 --> 00:31:59.040
For example, you'd think that I would know about JSON.


00:31:59.040 --> 00:32:02.400
It seems pretty simple, like the JavaScript object notation.


00:32:02.400 --> 00:32:05.720
But apparently there's like a JSON5 as well,


00:32:05.720 --> 00:32:08.960
which allows things like comments and whatnot,


00:32:08.960 --> 00:32:11.600
and multi-line strings, and single quotes,


00:32:11.600 --> 00:32:16.040
and elements that are not quoted for the keys, and so on.


00:32:16.040 --> 00:32:19.200
And there's a whole cool library for JSON5 support,


00:32:19.200 --> 00:32:21.240
as if you wanna have like a little bit more


00:32:21.240 --> 00:32:22.760
human-friendly JSON.


00:32:22.760 --> 00:32:24.280
- I had no idea that was a thing.


00:32:24.280 --> 00:32:25.520
- Yeah, neither did I.


00:32:25.520 --> 00:32:28.060
And I was just like, why can't I put a comment in JSON?


00:32:28.060 --> 00:32:28.920
This is driving me crazy.


00:32:28.920 --> 00:32:32.040
So what I do is I have like a field that says comment


00:32:32.040 --> 00:32:33.880
or like double slash in quotes.


00:32:33.880 --> 00:32:36.080
And then I have the string that is the comment


00:32:36.080 --> 00:32:37.400
'cause you can't actually have comments,


00:32:37.400 --> 00:32:40.380
but you can have ignored keys and values.


00:32:40.380 --> 00:32:42.040
So that's how I have comments in my JSON.


00:32:42.040 --> 00:32:44.960
But anyway, she talks about using the JSON5 library


00:32:44.960 --> 00:32:46.960
that's part of Python to support that.


00:32:46.960 --> 00:32:48.640
It's not built in, but it's a Python library.


00:32:48.640 --> 00:32:49.460
You can use to do that.


00:32:49.460 --> 00:32:50.300
Pretty cool.


00:32:50.300 --> 00:32:51.120
- Yeah, nice.


00:32:51.120 --> 00:32:51.960
- Yeah, well, I guess that's it


00:32:51.960 --> 00:32:53.200
for all of our items, huh, Brian?


00:32:53.200 --> 00:32:54.240
- Yeah, it is.


00:32:54.240 --> 00:32:55.640
Got anything extra for us?


00:32:55.640 --> 00:32:57.800
- Yeah, I totally did, but you nabbed it


00:32:57.800 --> 00:32:59.840
and put it in your section, so go for it.


00:32:59.840 --> 00:33:00.920
(laughing)


00:33:00.920 --> 00:33:02.600
That tells me you found a bunch of cool things there.


00:33:02.600 --> 00:33:05.920
- Yeah, I want to get this one out of the way first.


00:33:05.920 --> 00:33:07.640
Some sad news.


00:33:07.640 --> 00:33:08.960
You've heard of Game of Life, right?


00:33:08.960 --> 00:33:10.880
- Yes, yeah, Conway's Game of Life.


00:33:10.880 --> 00:33:12.380
- Yeah, Conway's Game of Life.


00:33:12.380 --> 00:33:15.200
Well, Conway, John Conway, is,


00:33:15.200 --> 00:33:17.720
I'm going to link to an article that's a nice article


00:33:17.720 --> 00:33:21.000
talking about the Game of Life and John Conway,


00:33:21.000 --> 00:33:23.620
but just an announcement that he is one


00:33:23.620 --> 00:33:27.380
the victims of COVID-19 died from it recently.


00:33:27.380 --> 00:33:29.100
So that's sad.


00:33:29.100 --> 00:33:30.380
- Yeah, it's definitely sad news.


00:33:30.380 --> 00:33:32.680
- Game of Life is a kind of a excellent thing


00:33:32.680 --> 00:33:35.020
to have in the computer science realm.


00:33:35.020 --> 00:33:36.020
Pretty neat.


00:33:36.020 --> 00:33:37.060
So that's sad.


00:33:37.060 --> 00:33:40.160
Something that's happy is GitHub is now free


00:33:40.160 --> 00:33:42.380
for all teams and individuals.


00:33:42.380 --> 00:33:44.100
So that's a pretty cool announcement.


00:33:44.100 --> 00:33:45.060
- That's really awesome, yeah.


00:33:45.060 --> 00:33:49.140
So previously you had to pay to have collaborators


00:33:49.140 --> 00:33:50.380
on a private repo.


00:33:50.380 --> 00:33:51.480
I think maybe you could have some,


00:33:51.480 --> 00:33:53.800
but not a ton per private.


00:33:53.800 --> 00:33:54.640
I can't remember.


00:33:54.640 --> 00:33:55.460
- Three, I think like that.


00:33:55.460 --> 00:33:56.960
- Yeah, it's like evolving.


00:33:56.960 --> 00:33:58.800
First you had to pay for private repos,


00:33:58.800 --> 00:34:01.440
then you didn't, but then you had to for collaborators.


00:34:01.440 --> 00:34:02.280
Yeah, but that's awesome.


00:34:02.280 --> 00:34:03.360
So it's much more free.


00:34:03.360 --> 00:34:07.960
And then also, for people who still pay GitHub, like me,


00:34:07.960 --> 00:34:08.800
it's half price.


00:34:08.800 --> 00:34:12.200
It's 40, it's, I don't know, whatever four divided by nine is.


00:34:12.200 --> 00:34:15.440
It's now 44% of what you were paying before.


00:34:15.440 --> 00:34:16.280
I have people wondering,


00:34:16.280 --> 00:34:17.860
like, why would you pay for GitHub?


00:34:17.860 --> 00:34:19.040
Organizations.


00:34:19.040 --> 00:34:20.360
If you have an organization,


00:34:20.360 --> 00:34:24.760
So like Talk Python and the related training authors and content,


00:34:24.760 --> 00:34:27.480
there's like a GitHub organization for Talk Python.


00:34:27.480 --> 00:34:31.080
Have people collaborate on that, you still have to pay,


00:34:31.080 --> 00:34:34.320
but it was $9 a month per user. Now it's $4 a month per user.


00:34:34.320 --> 00:34:37.840
So that's also bonus. Yeah. Yeah. Pretty cool. Yeah, that's happy.


00:34:37.840 --> 00:34:42.680
Yeah. So the last thing I wanted to bring up is that the PyCon US


00:34:42.680 --> 00:34:45.080
2020 online is now live.


00:34:45.080 --> 00:34:49.400
So there's a welcome video and more talk.


00:34:49.440 --> 00:34:51.820
- There's some talks linked and there's more on the way.


00:34:51.820 --> 00:34:54.380
- Yeah, there's a nice welcome video from Emily Morehouse


00:34:54.380 --> 00:34:57.740
that she basically kicks off the virtual conference.


00:34:57.740 --> 00:34:59.980
In this conference, I don't know if that's the right word


00:34:59.980 --> 00:35:04.980
for it, this thing, this event, is not like a lot of


00:35:04.980 --> 00:35:07.460
online virtual conferences, like on Saturday,


00:35:07.460 --> 00:35:09.100
we're all going to meet and then the talks are going to be


00:35:09.100 --> 00:35:10.900
these three hours and whatnot.


00:35:10.900 --> 00:35:15.480
It's like a rolling release of information and videos


00:35:15.480 --> 00:35:17.820
that then you get to consume over the next couple weeks.


00:35:17.820 --> 00:35:20.860
So yeah, you're linking to basically the landing page


00:35:20.860 --> 00:35:22.820
for stuff as it happens, right?


00:35:22.820 --> 00:35:24.020
- Yeah, and I recommend,


00:35:24.020 --> 00:35:26.860
so also recommend checking out the,


00:35:26.860 --> 00:35:29.980
so if you go to any of the, like the welcome video,


00:35:29.980 --> 00:35:34.980
and then go up and find the PyCon US 2020 top page


00:35:34.980 --> 00:35:37.440
and look at the videos there,


00:35:37.440 --> 00:35:39.680
then you can see them all listed as well.


00:35:39.680 --> 00:35:42.420
But they're rolling out,


00:35:42.420 --> 00:35:44.700
and I know that they're not all recorded,


00:35:44.700 --> 00:35:46.460
so some will come later.


00:35:46.460 --> 00:35:49.520
For instance, I am still, I don't know if I will,


00:35:49.520 --> 00:35:51.820
but I'm still planning on recording my talk


00:35:51.820 --> 00:35:55.060
and posting it, just trying to figure out when to do that.


00:35:55.060 --> 00:35:56.180
- Yeah, yeah, cool.


00:35:56.180 --> 00:35:57.300
- Anyway. - I'm definitely looking forward


00:35:57.300 --> 00:35:59.100
to checking it out and see what comes along.


00:35:59.100 --> 00:36:01.740
There's also, it's worth mentioning that there,


00:36:01.740 --> 00:36:06.240
at that link, there's a place that has the virtual expo.


00:36:06.240 --> 00:36:08.600
And the expo hall is actually my favorite part


00:36:08.600 --> 00:36:09.440
of the conference.


00:36:09.440 --> 00:36:10.980
It's 'cause you get to walk around and meet people


00:36:10.980 --> 00:36:13.060
and just see what's going on,


00:36:13.060 --> 00:36:15.220
and you see all the companies and what they're doing.


00:36:15.220 --> 00:36:18.240
But one of the things that happens there on Sunday


00:36:18.240 --> 00:36:23.240
in normal times is there's the hiring job fair thing.


00:36:23.240 --> 00:36:26.060
And all the job fair stuff is already up there.


00:36:26.060 --> 00:36:28.260
So if people are looking for a Python job,


00:36:28.260 --> 00:36:31.520
there's many, many links of this company's hiring


00:36:31.520 --> 00:36:33.300
for these four positions, click here.


00:36:33.300 --> 00:36:34.820
This company's hiring for this position.


00:36:34.820 --> 00:36:36.460
So if you're looking for a job,


00:36:36.460 --> 00:36:37.740
you want to get in there quick


00:36:37.740 --> 00:36:40.420
and grab the good ones and apply to them.


00:36:40.420 --> 00:36:42.940
- Yeah, one of the things that's missing


00:36:42.940 --> 00:36:46.780
is how am I gonna last an entire year with no new t-shirts?


00:36:46.780 --> 00:36:47.620
- I know.


00:36:47.620 --> 00:36:51.140
Well, you're gonna have to be up in your game there


00:36:51.140 --> 00:36:53.260
in this video version here.


00:36:53.260 --> 00:36:56.140
I know, I love all the conference swag.


00:36:56.140 --> 00:36:58.240
Yeah, exactly, like how do you even do that?


00:36:58.240 --> 00:37:01.260
How do you even find a good tech shirt that you buy?


00:37:01.260 --> 00:37:04.920
I know that out there, but it'll be different.


00:37:04.920 --> 00:37:06.980
Well, you wanna know something that wasn't funny


00:37:06.980 --> 00:37:09.420
is I almost forgot to put a joke in our show notes here.


00:37:09.420 --> 00:37:11.260
- Oh no, you found one.


00:37:11.260 --> 00:37:16.260
I pulled up the terminal and I typed Pyjoke,


00:37:16.260 --> 00:37:18.500
because I have PIPX installed Pyjoke.


00:37:18.500 --> 00:37:21.700
So it's right there in the command line,


00:37:21.700 --> 00:37:23.660
anytime you need a laugh.


00:37:23.660 --> 00:37:25.420
This one is about QA, software quality folks.


00:37:25.420 --> 00:37:28.140
And it's a take on a traditional one.


00:37:28.140 --> 00:37:30.620
So here, I'll hit you with this, see what you think.


00:37:30.620 --> 00:37:32.460
How many QAs does it take to change a light bulb?


00:37:32.460 --> 00:37:34.580
- I don't know.


00:37:34.580 --> 00:37:35.380
- They notice the room was dark.


00:37:35.380 --> 00:37:36.780
They don't fix problems, they find them.


00:37:36.780 --> 00:37:39.020
(laughing)


00:37:39.020 --> 00:37:40.100
- Oh dear.


00:37:38.100 --> 00:37:38.940
- That's bad, right?


00:37:38.940 --> 00:37:40.980
- Yeah, that's definitely why QA and development


00:37:40.980 --> 00:37:42.380
should be one team.


00:37:42.380 --> 00:37:43.420
- Absolutely.


00:37:43.420 --> 00:37:46.060
All right, well, a good joke nonetheless.


00:37:46.060 --> 00:37:46.900
A good pie joke.


00:37:46.900 --> 00:37:47.740
- Thanks.


00:37:47.740 --> 00:37:50.780
Well, this was lovely today, so thanks for talking with me.


00:37:50.780 --> 00:37:51.700
- Yeah, absolutely.


00:37:51.700 --> 00:37:53.420
Thanks, as always, great to chat with you.


00:37:53.420 --> 00:37:54.260
See you later.


00:37:54.260 --> 00:37:55.080
- Bye.


00:37:55.080 --> 00:37:56.180
- Thank you for listening to Python Bytes.


00:37:56.180 --> 00:37:58.640
Follow the show on Twitter @pythonbytes.


00:37:58.640 --> 00:38:01.720
That's Python Bytes as in B-Y-T-E-S.


00:38:01.720 --> 00:38:04.620
And get the full show notes at pythonbytes.fm.


00:38:04.620 --> 00:38:06.820
If you have a news item you want featured,


00:38:06.820 --> 00:38:09.580
just visit bythonbytes.fm and send it our way.


00:38:09.580 --> 00:38:11.700
We're always on the lookout for sharing something cool.


00:38:11.700 --> 00:38:12.780
This is Brian Okken,


00:38:12.780 --> 00:38:14.880
and on behalf of myself and Michael Kennedy,


00:38:14.880 --> 00:38:16.960
thank you for listening and sharing this podcast


00:38:16.960 --> 00:38:18.620
with your friends and colleagues.

