
00:00:00.000 --> 00:00:01.960
Hey there, thanks for listening.


00:00:01.960 --> 00:00:05.220
Before we jump into this episode, I just want to remind you that this episode is brought


00:00:05.220 --> 00:00:10.460
to you by us over at TalkBython Training and Brian through his pytest book.


00:00:10.460 --> 00:00:15.560
So if you want to get hands on and learn something with Python, be sure to consider our courses


00:00:15.560 --> 00:00:17.600
over at TalkBython Training.


00:00:17.600 --> 00:00:21.560
Visit them via pythonbytes.fm/courses.


00:00:21.560 --> 00:00:25.920
And if you're looking to do testing and get better with pytest, check out Brian's book


00:00:25.920 --> 00:00:29.160
at pythonbytes.fm/pytest.


00:00:29.160 --> 00:00:34.040
the episode. Hello and welcome to Python Bytes where we deliver Python news and headlines


00:00:34.040 --> 00:00:41.640
directly to your earbuds. It's episode 255 recorded October 20th, 2021. I'm Brian Okken.


00:00:41.640 --> 00:00:46.040
I'm Michael Kennedy. And I'm Will McGuggin. Welcome Will. Thank you. Good to be here.


00:00:46.040 --> 00:00:53.240
I'm sure people know who you are through all you do with Textual and Rich. Could you do a quick


00:00:53.240 --> 00:00:59.640
intro? Sure, yeah, I'm a software developer from Edinburgh, Scotland. Last couple of years I've


00:00:59.640 --> 00:01:06.120
been working quite heavily in open source. I built Rich and I started work on Textual,


00:01:06.120 --> 00:01:13.000
which is an application framework using Rich and I'm currently working exclusively on that. So I've


00:01:13.000 --> 00:01:19.240
taken a year off and probably more than that to work on open source projects. I'm very excited


00:01:19.240 --> 00:01:21.240
- We're excited about it too.


00:01:21.240 --> 00:01:23.280
(laughing)


00:01:23.280 --> 00:01:24.920
- Yeah, that's fantastic, Will.


00:01:24.920 --> 00:01:28.000
I think we've talked about this offline as well,


00:01:28.000 --> 00:01:31.460
the success you're having with Rich and Textual


00:01:31.460 --> 00:01:34.800
and this opportunity you have to really just double down


00:01:34.800 --> 00:01:35.920
on this project you created.


00:01:35.920 --> 00:01:38.040
And I know there must be thousands of maintainers


00:01:38.040 --> 00:01:38.960
of projects out there,


00:01:38.960 --> 00:01:40.920
like if I could just put all my energy into this


00:01:40.920 --> 00:01:42.400
and you're currently lucky enough


00:01:42.400 --> 00:01:44.040
to be in that situation, right?


00:01:44.040 --> 00:01:44.920
That's fantastic.


00:01:44.920 --> 00:01:47.120
- Yeah, I'm very fortunate actually.


00:01:47.120 --> 00:01:52.120
I mean, I put some money aside, I planned for this year,


00:01:52.120 --> 00:01:55.200
but things are really looking up


00:01:55.200 --> 00:01:58.000
and I've been blown away by the level of interest from it.


00:01:58.000 --> 00:02:01.640
I mean, it gradually ramped up with rich people,


00:02:01.640 --> 00:02:02.480
people like that.


00:02:02.480 --> 00:02:05.080
I think there was a missing niche


00:02:05.080 --> 00:02:07.440
or something which did that.


00:02:07.440 --> 00:02:10.440
But then with the textual, people were excited about it.


00:02:10.440 --> 00:02:13.520
I mean, I put a disclaimer on the readme


00:02:13.520 --> 00:02:16.280
that said it's not quite ready for prime time yet.


00:02:16.280 --> 00:02:19.560
It might break and is in active development,


00:02:19.560 --> 00:02:22.040
but it doesn't seem to discourage anyone.


00:02:22.040 --> 00:02:25.480
Very busy building things with it.


00:02:25.480 --> 00:02:26.400
So I'm excited.


00:02:26.400 --> 00:02:30.000
I want to take it to the next level.


00:02:30.000 --> 00:02:32.480
And to be honest, if I was doing it part-time,


00:02:32.480 --> 00:02:35.840
like I was doing rich, it would just take too long.


00:02:35.840 --> 00:02:37.960
If it was evening and weekends,


00:02:37.960 --> 00:02:42.760
it would be two years before it was like 1.0.


00:02:42.760 --> 00:02:44.880
- Yeah, and we're ready to use it now, so.


00:02:44.880 --> 00:02:45.080
Yeah.


00:02:45.080 --> 00:02:47.340
Most people want to use it yesterday.


00:02:47.340 --> 00:02:50.740
Congrats again on that.


00:02:50.740 --> 00:02:51.160
That's cool.


00:02:51.160 --> 00:02:52.520
It's great stuff.


00:02:52.520 --> 00:02:55.060
You know, we've talked about over on talk Python and people want to dive in.


00:02:55.060 --> 00:02:58.080
We've certainly covered it many times over here as well.


00:02:58.080 --> 00:02:59.880
So, or happy to spread the word on it.


00:02:59.880 --> 00:03:00.360
Yeah.


00:03:00.360 --> 00:03:02.280
Well, Michael kicked off the topics.


00:03:02.280 --> 00:03:03.600
I do want to kick it off.


00:03:03.600 --> 00:03:03.880
All right.


00:03:03.880 --> 00:03:07.880
How about we start with some awesome Python topic like C++.


00:03:07.880 --> 00:03:09.080
I like both of them.


00:03:09.080 --> 00:03:13.200
You, this is right in your wheelhouse, Brian, a lot of C++.


00:03:13.200 --> 00:03:17.640
So I want to talk about this tutorial article series,


00:03:17.640 --> 00:03:18.800
however you want to think about it,


00:03:18.800 --> 00:03:22.420
of wrapping C++ code with Cython.


00:03:22.420 --> 00:03:25.400
So the interoperability story with C and Python,


00:03:25.400 --> 00:03:28.220
being C, Python as the runtime,


00:03:28.220 --> 00:03:29.780
is pretty straightforward, right?


00:03:29.780 --> 00:03:32.760
But C++ is a little more interesting with classes


00:03:32.760 --> 00:03:35.580
and this pointers and all those kinds of things.


00:03:35.580 --> 00:03:39.460
So the basic idea is Cython is this thing


00:03:39.460 --> 00:03:43.380
that allows us to write very nearly Python code


00:03:43.380 --> 00:03:46.180
and sometimes actually just Python code,


00:03:46.180 --> 00:03:49.340
sometimes like in a little extended language of Python


00:03:49.340 --> 00:03:51.220
that then compiles down to C.


00:03:51.220 --> 00:03:52.500
And if that's the case,


00:03:52.500 --> 00:03:56.140
well, it's probably pretty easy to get that Cython code


00:03:56.140 --> 00:03:57.920
to work with C code.


00:03:57.920 --> 00:04:01.820
And then Cython naturally is exposed as Python objects


00:04:01.820 --> 00:04:03.580
and variables and whatnot.


00:04:03.580 --> 00:04:05.300
So that should be a good bridge


00:04:05.300 --> 00:04:07.640
between C++ and Python, right?


00:04:07.640 --> 00:04:08.480
And it turns out it is.


00:04:08.480 --> 00:04:13.480
So this person Anton Zidane Pushkin wrote an article


00:04:13.480 --> 00:04:15.720
or is working on a series of articles


00:04:15.720 --> 00:04:17.960
called "Wrapping C++ with Cython."


00:04:17.960 --> 00:04:21.560
And so there's this library called Yarkirl,


00:04:21.560 --> 00:04:23.680
yet another audio recognition library.


00:04:23.680 --> 00:04:25.040
It's kind of like Shazam.


00:04:25.040 --> 00:04:27.280
It'll, you give it a small fragment of audio


00:04:27.280 --> 00:04:30.160
and it'll say, "Oh, that's Pearl Jam Black,"


00:04:30.160 --> 00:04:32.440
you know, "Black by Pearl Jam," or something like that.


00:04:32.440 --> 00:04:33.280
Right?


00:04:33.280 --> 00:04:34.100
Pretty cool.


00:04:34.100 --> 00:04:37.820
And if you look at it, it's got some neat C++ features.


00:04:37.820 --> 00:04:39.540
You know, Brian, feel free to jump in on this,


00:04:39.540 --> 00:04:40.700
but see that right there?


00:04:40.700 --> 00:04:42.240
Namespace, so cool.


00:04:42.240 --> 00:04:46.140
I love how they're writing like well-structured


00:04:46.140 --> 00:04:47.440
C++ code here.


00:04:47.440 --> 00:04:49.460
But basically there's a couple of structures,


00:04:49.460 --> 00:04:51.680
like a wave file and an mp3 file,


00:04:51.680 --> 00:04:53.860
and then classes, which have like a fingerprint


00:04:53.860 --> 00:04:56.340
and public methods and storage and so on.


00:04:56.340 --> 00:04:58.500
And so the idea is how could we take this


00:04:58.500 --> 00:05:01.900
and potentially make this a Python library, right?


00:05:01.900 --> 00:05:04.540
Basically create a Python wrapper with Cython for it.


00:05:04.540 --> 00:05:06.300
So you're gonna come down here and says,


00:05:06.300 --> 00:05:09.500
Well, what we're going to do is we're going to write some Cython code.


00:05:09.500 --> 00:05:16.100
And Cython doesn't immediately know how to take a C++ header file,


00:05:16.100 --> 00:05:18.000
which is where stuff is defined in C++,


00:05:18.000 --> 00:05:21.100
and turn that into things that Python understands.


00:05:21.100 --> 00:05:24.100
So you've got to write basically a little file,


00:05:24.100 --> 00:05:28.900
a PXD file that declares what the interface looks like.


00:05:28.900 --> 00:05:30.100
So you write code like this.


00:05:30.100 --> 00:05:31.500
Have you done this stuff before, Brian?


00:05:31.500 --> 00:05:34.300
No, but this looks pretty straightforward.


00:05:34.300 --> 00:05:35.400
Yeah, it's pretty straightforward.


00:05:35.400 --> 00:05:36.400
How about you, Will?


00:05:36.400 --> 00:05:37.940
- I've never wrapped a library,


00:05:37.940 --> 00:05:40.400
but I've used Cython quite successfully,


00:05:40.400 --> 00:05:41.800
so it's a really good system.


00:05:41.800 --> 00:05:42.800
- Yeah, yeah, I agree.


00:05:42.800 --> 00:05:44.760
I've done it, but not to wrap C++ code.


00:05:44.760 --> 00:05:45.600
- No.


00:05:45.600 --> 00:05:47.360
- So basically you do things like cdef extern


00:05:47.360 --> 00:05:50.060
from this header, create a namespace,


00:05:50.060 --> 00:05:54.360
and then you have cdef, a keyword cpp class,


00:05:54.360 --> 00:05:56.880
and then you get, what's interesting about this


00:05:56.880 --> 00:05:58.760
is you get to give it two names.


00:05:58.760 --> 00:06:00.560
You get to say, here's the name,


00:06:00.560 --> 00:06:02.800
I want to talk about it in Python,


00:06:02.800 --> 00:06:07.000
So CPP wave file, and then here's its name in C,


00:06:07.000 --> 00:06:10.360
which is yarrr-control-colon-colon-wave-file.


00:06:10.360 --> 00:06:12.200
And the value of this is they wanna have a thing


00:06:12.200 --> 00:06:15.640
called wave file in Python, but not the C++ one,


00:06:15.640 --> 00:06:18.420
a friendly Python one, but it needs to use the wave file


00:06:18.420 --> 00:06:19.320
from the C library.


00:06:19.320 --> 00:06:20.560
So if you directly import it,


00:06:20.560 --> 00:06:22.360
then there's like this name clash,


00:06:22.360 --> 00:06:24.560
which I suppose you could fix with namespaces and all,


00:06:24.560 --> 00:06:26.800
but I think it's cool that you can give it this name,


00:06:26.800 --> 00:06:30.120
this kind of this internal name, and off it goes, right?


00:06:30.120 --> 00:06:36.440
So then you def out its methods basically like just here are the functions of the class.


00:06:36.440 --> 00:06:39.600
Same thing for the fingerprint and the storage and off it goes.


00:06:39.600 --> 00:06:42.500
And so all of this stuff is pretty neat.


00:06:42.500 --> 00:06:47.640
And yeah, this thing I'm talking about is called aliasing, which is pretty awesome.


00:06:47.640 --> 00:06:53.620
It lets you reserve the name, wave file and storage and fingerprint and stuff like that


00:06:53.620 --> 00:06:58.720
for your Python library without, even though that's what the C names are as well.


00:06:58.720 --> 00:07:00.580
So yeah, pretty straightforward.


00:07:00.580 --> 00:07:02.300
What was the next thing I really want to highlight?


00:07:02.300 --> 00:07:03.520
There's kind of this long article here.


00:07:03.520 --> 00:07:08.580
So the next thing they talk about is using this thing called extension types.


00:07:08.580 --> 00:07:15.760
So an extension is just a C structure or C++ library and you create some, some class that


00:07:15.760 --> 00:07:17.600
is kind of a proxy to it.


00:07:17.600 --> 00:07:25.080
So here we say cdef Python class called storage and then internal it has in Python language,


00:07:25.080 --> 00:07:29.080
you have to say cdef, it has a C++ class called this.


00:07:29.080 --> 00:07:29.920
And then from then on,


00:07:29.920 --> 00:07:32.520
you just go and write standard Python code.


00:07:32.520 --> 00:07:34.480
And anytime you need to talk to the C library,


00:07:34.480 --> 00:07:37.800
you just work with the inner pointer thing


00:07:37.800 --> 00:07:40.320
that you've created, which is pretty awesome.


00:07:40.320 --> 00:07:42.120
You just new one up in the constructor,


00:07:42.120 --> 00:07:43.760
and the C++ thing,


00:07:43.760 --> 00:07:47.360
and then it goes off to Python's memory management,


00:07:47.360 --> 00:07:49.440
so you don't have to worry about deleting it,


00:07:49.440 --> 00:07:50.680
stuff like that.


00:07:50.680 --> 00:07:52.440
I guess you do have to sort of deallocate it,


00:07:52.440 --> 00:07:54.000
but that's, once you write that code,


00:07:54.000 --> 00:07:56.560
then Python will just take it from there, right?


00:07:56.560 --> 00:07:58.360
So pretty neat way to do this.


00:07:58.360 --> 00:08:01.240
And the library goes on to talk about how you use it


00:08:01.240 --> 00:08:02.060
and so on.


00:08:02.060 --> 00:08:03.320
So there's a couple of interesting things


00:08:03.320 --> 00:08:05.680
about like dereferencing the pointer,


00:08:05.680 --> 00:08:08.680
like basically modeling reference types in Python.


00:08:08.680 --> 00:08:10.280
But if you've got a C++ library


00:08:10.280 --> 00:08:12.100
that you want to integrate here,


00:08:12.100 --> 00:08:14.400
I think this is a pretty cool hands-on way


00:08:14.400 --> 00:08:15.440
to do it with Cython.


00:08:15.440 --> 00:08:17.080
- Yeah, I think this looks fun.


00:08:17.080 --> 00:08:18.640
I'd like to give it a try.


00:08:18.640 --> 00:08:19.720
- Yeah, definitely.


00:08:19.720 --> 00:08:22.160
Another one is PyBind11.


00:08:22.160 --> 00:08:24.560
That might also be another option to look at.


00:08:24.560 --> 00:08:27.680
So I saw Henry out in the live stream there.


00:08:27.680 --> 00:08:30.480
So here's another way to operate seamlessly


00:08:30.480 --> 00:08:33.180
between C++ 11 and Python.


00:08:33.180 --> 00:08:36.800
So another option in this realm,


00:08:36.800 --> 00:08:39.220
maybe I'll throw that link into the show notes as well.


00:08:39.220 --> 00:08:42.060
But yeah, a lot of cool stuff for taking these libraries


00:08:42.060 --> 00:08:45.720
written in C++ and turning them into Python-friendly,


00:08:45.720 --> 00:08:47.800
feeling Python native libraries.


00:08:47.800 --> 00:08:48.640
- Well, and you know,


00:08:48.640 --> 00:08:51.480
that's really how a lot of Python's taken off, right?


00:08:51.480 --> 00:08:54.280
is because we've been able to take these super powerful


00:08:54.280 --> 00:08:57.840
C++ libraries and wrap a Python interface into it


00:08:57.840 --> 00:08:59.400
and have them stay up to date.


00:08:59.400 --> 00:09:03.080
When you make updates to the C and C++ code,


00:09:03.080 --> 00:09:05.320
you can get updates to the Python.


00:09:05.320 --> 00:09:07.280
- So you sometimes hear Python described


00:09:07.280 --> 00:09:09.160
as a glue language.


00:09:09.160 --> 00:09:12.800
I think many years ago, that's probably what it was.


00:09:12.800 --> 00:09:15.720
I think Python's grown, it's more than just a glue language,


00:09:15.720 --> 00:09:19.920
but it's very good at connecting other languages together.


00:09:19.920 --> 00:09:21.720
- It's still good as a glue language.


00:09:21.720 --> 00:09:22.680
- Still, yeah.


00:09:22.680 --> 00:09:23.880
It's not just a glue language,


00:09:23.880 --> 00:09:26.640
it's a language of its own, I guess.


00:09:26.640 --> 00:09:27.560
- Yeah. - Yeah.


00:09:27.560 --> 00:09:30.000
- I was talking to somebody over on Talk Python,


00:09:30.000 --> 00:09:34.580
and I'm super sorry if I forgot which conversation this was,


00:09:34.580 --> 00:09:37.080
but they described Python as a glue language


00:09:37.080 --> 00:09:38.000
for web development.


00:09:38.000 --> 00:09:39.760
I thought, okay, that's kind of a weird way to think of it,


00:09:39.760 --> 00:09:41.040
but all right, said, well, no, no, look,


00:09:41.040 --> 00:09:42.800
here's what you do with your web framework.


00:09:42.800 --> 00:09:43.900
You glue things together.


00:09:43.900 --> 00:09:47.900
You glue your database over to your network response.


00:09:47.900 --> 00:09:50.660
you glue an API call into that.


00:09:50.660 --> 00:09:52.260
And I'm like, yeah, actually that's kind of is


00:09:52.260 --> 00:09:53.820
what a website is.


00:09:53.820 --> 00:09:56.580
It talks to databases, it talks to external APIs,


00:09:56.580 --> 00:09:59.620
it talks to the network in terms of like HTML responses


00:09:59.620 --> 00:10:01.860
and that's the entire web framework.


00:10:01.860 --> 00:10:03.860
But yeah, you can kind of even think of those things


00:10:03.860 --> 00:10:05.300
in those terms there.


00:10:05.300 --> 00:10:08.020
- It's like a party when no one's talking to each other


00:10:08.020 --> 00:10:11.260
and you need someone to like start conversations


00:10:11.260 --> 00:10:12.780
is what Python does.


00:10:12.780 --> 00:10:13.600
- Yeah, yeah.


00:10:13.600 --> 00:10:16.260
And I think also that that's why Python is so fast


00:10:16.260 --> 00:10:18.040
for web frameworks, you know,


00:10:18.040 --> 00:10:20.540
even though computationally it's not super fast,


00:10:20.540 --> 00:10:23.880
like it's mostly spending a little time in its own code,


00:10:23.880 --> 00:10:24.800
but a lot of time it's like,


00:10:24.800 --> 00:10:25.880
oh, I'm waiting on the database,


00:10:25.880 --> 00:10:26.740
I'm waiting on the network,


00:10:26.740 --> 00:10:27.800
I'm waiting on an API,


00:10:27.800 --> 00:10:30.420
and that's where web apps spend their time anyway,


00:10:30.420 --> 00:10:31.520
so it doesn't matter.


00:10:31.520 --> 00:10:33.880
All right, Brian, you want to grab the next one?


00:10:33.880 --> 00:10:34.720
- Yeah, sure.


00:10:34.720 --> 00:10:36.560
- Bump it on to topic two.


00:10:36.560 --> 00:10:37.400
- Bump it on.


00:10:37.400 --> 00:10:41.660
So I've got, I just have a few packages


00:10:41.660 --> 00:10:43.840
that I support on PyPI,


00:10:43.840 --> 00:10:45.520
and then a whole bunch of internal packages


00:10:45.520 --> 00:10:50.520
I work on. And one of the things that is a checklist that I've got is what do I do when


00:10:50.520 --> 00:10:56.120
I bump the version? And I know that there have been some automated tools before, but


00:10:56.120 --> 00:11:01.280
they've kind of, I don't know, they make too many assumptions, I think, about how you structure


00:11:01.280 --> 00:11:10.160
your code. So I was really happy to see tbump come by. This was suggested by Sefi Beri.


00:11:10.160 --> 00:11:13.580
So tbump is an open source package that was developed.


00:11:13.580 --> 00:11:16.400
Looks like it was developed in-house by somebody,


00:11:16.400 --> 00:11:18.840
but then their employer said, "Hey, go for it, open source."


00:11:18.840 --> 00:11:19.960
So that's cool.


00:11:19.960 --> 00:11:26.640
The idea really is it's just bump versions and that's it.


00:11:26.640 --> 00:11:29.080
But it does a whole bunch of cool stuff.


00:11:29.080 --> 00:11:31.560
Let's say I've got to initialize it.


00:11:31.560 --> 00:11:34.040
So you initialize it as a little toml file


00:11:34.040 --> 00:11:37.140
that stores the information in the configuration.


00:11:37.140 --> 00:11:39.640
But if you don't want yet another toml file


00:11:39.640 --> 00:11:42.100
or another configuration that can also append that


00:11:42.100 --> 00:11:44.000
to the PyProject.


00:11:44.000 --> 00:11:46.060
That was a nice addition.


00:11:46.060 --> 00:11:49.400
You can combine them or keep it separate, up to you.


00:11:49.400 --> 00:11:52.020
And so for instance, I tried it on one of my projects,


00:11:52.020 --> 00:11:54.360
and I kept it separate because I didn't want to muck up


00:11:54.360 --> 00:11:56.800
my PyProject.toml file.


00:11:56.800 --> 00:11:59.800
But once you initialize it, all you


00:11:59.800 --> 00:12:02.400
have to do when you want to add and bump a new version


00:12:02.400 --> 00:12:06.200
is just say tbump and then give it the new version.


00:12:06.200 --> 00:12:08.240
It doesn't automatically count up.


00:12:08.240 --> 00:12:10.440
I mean, you could probably write a wrapper that counts up,


00:12:10.440 --> 00:12:13.240
but looking at your own version and deciding what the new one


00:12:13.240 --> 00:12:14.760
is, is reasonable.


00:12:14.760 --> 00:12:16.800
That's a reasonable way to do it.


00:12:16.800 --> 00:12:22.040
And then it goes out and it patches any versions you've got


00:12:22.040 --> 00:12:25.520
and then in your code, in your code base, or your files,


00:12:25.520 --> 00:12:27.560
or config files, or wherever.


00:12:27.560 --> 00:12:31.400
And then it commits those changes.


00:12:31.400 --> 00:12:33.680
It adds a version tag, pushes your code,


00:12:33.680 --> 00:12:35.120
pushes the version tag.


00:12:35.120 --> 00:12:38.000
And then also, you could have these optional run things,


00:12:38.000 --> 00:12:39.740
places where before you commit,


00:12:39.740 --> 00:12:40.980
you can run some stuff.


00:12:40.980 --> 00:12:43.400
For instance, check to make sure that you've added


00:12:43.400 --> 00:12:45.520
that version to your change log


00:12:45.520 --> 00:12:48.540
or if you want to check your documentation.


00:12:48.540 --> 00:12:51.300
Then also you can have post actions.


00:12:51.300 --> 00:12:52.880
If you wanted to, I was thinking,


00:12:52.880 --> 00:12:54.400
a post action would be cool.


00:12:54.400 --> 00:12:56.280
You could just automatically tweet out,


00:12:56.280 --> 00:12:57.740
"Hey, a new version is here."


00:12:57.740 --> 00:12:59.640
That somehow hook that up, that'd be fun.


00:12:59.640 --> 00:13:01.080
>> Yeah, grab the first line out


00:13:01.080 --> 00:13:02.720
the release notes and just tweet that.


00:13:02.720 --> 00:13:07.000
>> Yeah. Then the hard part really is,


00:13:07.000 --> 00:13:10.160
how does it know where to change the version?


00:13:10.160 --> 00:13:12.580
That's where part of the configuration,


00:13:12.580 --> 00:13:13.960
I think it's really pretty cool.


00:13:13.960 --> 00:13:17.980
It just has this file configuration setting,


00:13:17.980 --> 00:13:19.680
if I can find it on here,


00:13:19.680 --> 00:13:22.980
that you list the source,


00:13:22.980 --> 00:13:27.300
and then you can also list the configuration of it.


00:13:27.300 --> 00:13:29.340
Let me grab one.


00:13:29.340 --> 00:13:34.180
The source and then how to look for it.


00:13:34.180 --> 00:13:36.540
It's a search string or something of


00:13:36.540 --> 00:13:39.580
what line to look for and then where to replace the version.


00:13:39.580 --> 00:13:41.980
And that's pretty straight.


00:13:41.980 --> 00:13:44.140
I mean, you kind of have to do some hand tweaking


00:13:44.140 --> 00:13:45.140
to get this to work.


00:13:45.140 --> 00:13:47.820
But for instance, it's just a couple of lines.


00:13:47.820 --> 00:13:49.220
It makes it pretty nice.


00:13:49.220 --> 00:13:51.640
At first, I thought, well, it's not that much work anyway.


00:13:51.640 --> 00:13:53.300
But it's way less work now.


00:13:53.300 --> 00:13:55.500
And then, frankly, I usually forget.


00:13:55.500 --> 00:13:57.260
I'll remember to push the version,


00:13:57.260 --> 00:13:59.940
but I'll forget to make sure that the version's


00:13:59.940 --> 00:14:01.020
in the changelog.


00:14:01.020 --> 00:14:05.060
I'll forget to push the tags to GitHub


00:14:05.060 --> 00:14:09.380
because I don't really use the tags, the version tags in GitHub, but I know other people do.


00:14:09.380 --> 00:14:11.380
So yeah, it's nice.


00:14:11.380 --> 00:14:15.140
Yeah, Will, what do you think as someone who ships libraries frequently that matter?


00:14:15.140 --> 00:14:20.740
I think it's useful. I think for my libraries, I've got the version in two places, two files.


00:14:20.740 --> 00:14:25.860
So for me, it's like, edit 2000, done.


00:14:25.860 --> 00:14:32.020
Probably wouldn't be like massive time saver, but I like the other things you can do with it,


00:14:32.020 --> 00:14:34.100
the actions you can attach to it,


00:14:34.100 --> 00:14:38.100
like creating a tag in GitHub.


00:14:38.100 --> 00:14:40.340
So I do often, quite often forget that,


00:14:40.340 --> 00:14:42.500
especially for like minor releases.


00:14:42.500 --> 00:14:44.220
I sometimes forget that.


00:14:44.220 --> 00:14:45.380
So that's quite useful.


00:14:45.380 --> 00:14:46.260
- Yeah, it's the extra stuff.


00:14:46.260 --> 00:14:47.620
It's not just changing the files,


00:14:47.620 --> 00:14:50.180
but like Brian described, like creating a branch,


00:14:50.180 --> 00:14:52.180
creating a tag, pushing all that stuff over,


00:14:52.180 --> 00:14:53.140
making sure they're in sync.


00:14:53.140 --> 00:14:54.060
That's pretty cool.


00:14:54.060 --> 00:14:54.900
- Yeah.


00:14:54.900 --> 00:14:55.720
- Yeah, good find.


00:14:55.720 --> 00:14:57.860
This does more than I expected when I saw the title.


00:14:57.860 --> 00:14:58.900
- What have we got next?


00:14:58.900 --> 00:15:01.540
- Well, you can start off on your first one.


00:15:01.540 --> 00:15:06.220
This is Closember, which is--


00:15:06.220 --> 00:15:09.420
what's-- portmanteau is when you put two words together,


00:15:09.420 --> 00:15:11.340
November and close.


00:15:11.340 --> 00:15:16.340
The idea is to help open source maintainers close issues


00:15:16.340 --> 00:15:18.540
and close PRs.


00:15:18.540 --> 00:15:22.180
So is this like to recover from the hangover of Hacktober?


00:15:22.180 --> 00:15:24.860
Hacktober, I think so.


00:15:24.860 --> 00:15:26.860
I didn't do Hacktober this year.


00:15:26.860 --> 00:15:27.820
I didn't either, no.


00:15:27.820 --> 00:15:28.320
No.


00:15:28.320 --> 00:15:33.280
Last year, I mean, I got a lot of PRs coming in.


00:15:33.280 --> 00:15:36.920
Some of them were of dubious quality.


00:15:36.920 --> 00:15:38.640
Some of them just--


00:15:38.640 --> 00:15:40.180
some of them are very good, actually.


00:15:40.180 --> 00:15:42.280
I did actually benefit a lot.


00:15:42.280 --> 00:15:45.880
But it does actually generate extra work.


00:15:45.880 --> 00:15:48.440
If you manage it, it's really great.


00:15:48.440 --> 00:15:50.840
But this is-- it generates more work for you,


00:15:50.840 --> 00:15:52.720
even though it's in your benefit.


00:15:52.720 --> 00:15:56.560
But Close Ember is purely to take work away from you,


00:15:56.560 --> 00:15:59.240
work away from maintainers.


00:15:59.240 --> 00:16:01.000
You know, if there's lots of issues,


00:16:01.000 --> 00:16:02.760
I mean, I've been very busy lately


00:16:02.760 --> 00:16:04.960
and not kept an eye on the rich issues.


00:16:04.960 --> 00:16:07.720
And they've just piled up.


00:16:07.720 --> 00:16:11.200
Some of them can be closed with a little bit of effort.


00:16:11.200 --> 00:16:12.720
So I think that's what this project,


00:16:12.720 --> 00:16:14.840
it's more of a movement than a project.


00:16:14.840 --> 00:16:17.440
It's designed to do-- it's designed to take away


00:16:17.440 --> 00:16:20.960
some of that burden from maintainers.


00:16:20.960 --> 00:16:24.960
And it's a very nice website here.


00:16:24.960 --> 00:16:28.160
There's a leaderboard on different issues,


00:16:28.160 --> 00:16:35.440
and it describes what you should do to close issues and PRs.


00:16:35.440 --> 00:16:39.160
The author, his name is Matthias Boussonnier.


00:16:39.160 --> 00:16:41.960
I've probably mispronounced that.


00:16:41.960 --> 00:16:44.680
He started this, and I think it's


00:16:44.680 --> 00:16:46.600
going to turn into a movement.


00:16:46.600 --> 00:16:52.400
Possibly it's too soon to really get big this year,


00:16:52.400 --> 00:16:55.280
but I'm hoping that next year it'll be a big thing.


00:16:55.280 --> 00:16:58.400
It'll be after October you can relax a bit


00:16:58.400 --> 00:17:01.120
because someone, you'll get lots of people coming in


00:17:01.120 --> 00:17:06.120
to fix your issues and clear some PRs and things like that.


00:17:06.120 --> 00:17:08.680
I mean, sometimes it's maintenance,


00:17:08.680 --> 00:17:13.680
it's just tidying up, closing PRs which have been merged


00:17:13.680 --> 00:17:16.680
and closing issues which have been fixed,


00:17:16.680 --> 00:17:17.520
that kind of thing.


00:17:17.520 --> 00:17:19.360
So I think it's a great thing.


00:17:19.360 --> 00:17:20.920
- I guess I don't quite get what it is.


00:17:20.920 --> 00:17:24.520
Is it a call out to people to help maintainers?


00:17:24.520 --> 00:17:26.960
- Yeah, yeah, it's like a month long thing.


00:17:26.960 --> 00:17:30.160
It was almost like a competition that they've--


00:17:30.160 --> 00:17:31.720
- Yeah, they've got a leaderboard, right?


00:17:31.720 --> 00:17:32.560
- Yeah.


00:17:32.560 --> 00:17:35.000
- Yeah, yeah, Matias is a core developer


00:17:35.000 --> 00:17:39.120
of Jupyter and IPython, so he's definitely working


00:17:39.120 --> 00:17:40.680
on some of the main projects there.


00:17:40.680 --> 00:17:43.120
- Yeah, he probably understands the burden


00:17:43.120 --> 00:17:46.220
of an open source maintainer.


00:17:46.220 --> 00:17:51.220
Even if you love something, it can be hard work.


00:17:51.220 --> 00:17:53.860
- Too much of a good thing, right?


00:17:53.860 --> 00:17:56.620
- But no T-shirt for this, at least not this year.


00:17:56.620 --> 00:17:59.800
- I don't think they offer T-shirts, no, maybe next year.


00:17:59.800 --> 00:18:02.380
- I wonder if you can add your project to this.


00:18:02.380 --> 00:18:06.500
- I think you can tag your project with Closember,


00:18:06.500 --> 00:18:07.900
I think that's how it works.


00:18:07.900 --> 00:18:10.340
And then other people can search for it


00:18:10.340 --> 00:18:13.540
and decide which one they want to help with.


00:18:13.540 --> 00:18:14.580
- All right, cool. - That's pretty cool.


00:18:14.580 --> 00:18:17.820
So another Brian, Brian Skin sent over,


00:18:17.820 --> 00:18:18.660
thank you Brian,


00:18:18.660 --> 00:18:19.740
but sending a ton of stuff our way lately


00:18:19.740 --> 00:18:20.900
and we really appreciate it.


00:18:20.900 --> 00:18:21.940
- Yeah, keep it coming.


00:18:21.940 --> 00:18:24.580
- So this one is, the announcement is


00:18:24.580 --> 00:18:27.740
that scikit-learn goes 1.0.


00:18:27.740 --> 00:18:28.980
And if you look at the version history,


00:18:28.980 --> 00:18:33.100
it's been zero for, zero ver for a long time


00:18:33.100 --> 00:18:37.260
with being, you know, 0.20, 0.21, 0.22, 0.


00:18:37.260 --> 00:18:40.540
So this release is really a realization


00:18:40.540 --> 00:18:44.180
that the library has been super stable for a long time,


00:18:44.180 --> 00:18:47.460
but here's a signal to everyone consuming scikit-learn


00:18:47.460 --> 00:18:52.460
that in fact, we intended, they intended to be stable.


00:18:52.460 --> 00:18:55.800
So there's certain groups and organizations


00:18:55.800 --> 00:18:59.700
that just perceive zero-over stuff as not finished,


00:18:59.700 --> 00:19:01.660
especially in the enterprise space,


00:19:01.660 --> 00:19:04.460
in the places that are not typically working


00:19:04.460 --> 00:19:05.940
in open source as much,


00:19:05.940 --> 00:19:07.340
but are bringing these libraries in.


00:19:07.340 --> 00:19:08.220
You can see managers like,


00:19:08.220 --> 00:19:10.300
"We can't use scikit-learn, it's not even done.


00:19:10.300 --> 00:19:12.500
"It's zero dot 24, come on."


00:19:12.500 --> 00:19:14.860
So this sort of closes that gap as well,


00:19:14.860 --> 00:19:17.560
signals that the API is pretty stable.


00:19:17.560 --> 00:19:22.540
Will, Textual is not quite ready for this, is it yet?


00:19:22.540 --> 00:19:24.140
- No, it's still on zero,


00:19:24.140 --> 00:19:26.340
'cause I'm kind of advertising


00:19:26.340 --> 00:19:29.380
that I might change a signature next version


00:19:29.380 --> 00:19:31.500
and break your code.


00:19:31.500 --> 00:19:34.220
Never do that lightly, but it's always a possibility.


00:19:34.220 --> 00:19:38.540
So if you use a zero point version bit of anything,


00:19:38.540 --> 00:19:40.140
you should probably pin that,


00:19:40.140 --> 00:19:42.160
and just make sure that if there's an update


00:19:42.160 --> 00:19:44.120
that you check your code.


00:19:44.120 --> 00:19:47.640
- But as a consumer of rich or a consumer of flask


00:19:47.640 --> 00:19:50.200
or consumer of whatever, if you're using Azure,


00:19:50.200 --> 00:19:52.900
you're recommending you pin that in your application


00:19:52.900 --> 00:19:54.640
or library that uses it, right?


00:19:54.640 --> 00:19:55.620
- Yeah, exactly.


00:19:55.620 --> 00:19:58.560
I mean, you might want to pin anyway,


00:19:58.560 --> 00:20:01.600
just to lots of bits of software working together.


00:20:01.600 --> 00:20:04.000
There could be problems with one update here


00:20:04.000 --> 00:20:06.420
that breaks this bit of software here.


00:20:06.420 --> 00:20:09.240
But when you got 1.0, that's the library developer


00:20:09.240 --> 00:20:12.720
is telling you I'm not going to break anything backwards


00:20:12.720 --> 00:20:16.880
compatibility without bumping that major version number.


00:20:16.880 --> 00:20:17.840
If they're using SemVer,


00:20:17.840 --> 00:20:21.760
but because there's lots of other versioning schemes


00:20:21.760 --> 00:20:24.320
that have the pros and cons.


00:20:24.320 --> 00:20:25.760
- Yeah, like calendar-based versioning


00:20:25.760 --> 00:20:26.720
and stuff like that, right?


00:20:26.720 --> 00:20:27.560
- Yeah, yeah.


00:20:27.560 --> 00:20:30.800
- I think that makes more sense in an application


00:20:30.800 --> 00:20:32.440
than it does in a library.


00:20:32.440 --> 00:20:34.240
- Calendar versioning.


00:20:34.240 --> 00:20:35.280
I think it might do actually.


00:20:35.280 --> 00:20:38.160
- How much calendar versioning makes sense for libraries?


00:20:38.160 --> 00:20:39.520
Maybe it does, I don't know.


00:20:39.520 --> 00:20:40.680
- I think projects that,


00:20:40.680 --> 00:20:42.960
some projects that have shifted to Calvr


00:20:42.960 --> 00:20:45.680
have recognized that they really are


00:20:45.680 --> 00:20:48.000
almost never changing backwards compatibility.


00:20:48.000 --> 00:20:53.000
So it doesn't, they're never going to go to a higher number.


00:20:53.000 --> 00:20:56.720
- Yeah, it's strange that there's no one perfect system.


00:20:56.720 --> 00:20:59.480
I quite like soundbar, and by and large,


00:20:59.480 --> 00:21:01.480
it does what I need of it,


00:21:01.480 --> 00:21:04.640
but there is no perfect system, really.


00:21:04.640 --> 00:21:06.040
- Yeah, I like it as well.


00:21:06.040 --> 00:21:07.640
Just the whole zero verb being for like,


00:21:07.640 --> 00:21:09.380
Something is on zero version,


00:21:09.380 --> 00:21:10.940
zero dot something for 15 years,


00:21:10.940 --> 00:21:11.980
like that doesn't make sense.


00:21:11.980 --> 00:21:12.820
- Yeah.


00:21:12.820 --> 00:21:13.780
- All right, so since we're talking about


00:21:13.780 --> 00:21:15.540
the 1.0 release of Scikit-Learn,


00:21:15.540 --> 00:21:18.500
let me give a quick shout out to some of the new features


00:21:18.500 --> 00:21:20.340
or some of the features they're highlighting.


00:21:20.340 --> 00:21:22.700
So it exposes many functions and methods


00:21:22.700 --> 00:21:24.280
which take lots of parameters


00:21:24.280 --> 00:21:28.060
like hist gradient boosting regressor,


00:21:28.060 --> 00:21:29.700
use that all the time, no, not really.


00:21:29.700 --> 00:21:32.620
But it takes, I don't know, what is that, 15 parameters?


00:21:32.620 --> 00:21:36.540
Like 20, zero, 255, none, none, false.


00:21:36.540 --> 00:21:37.540
What?


00:21:37.540 --> 00:21:38.780
Like, what are these, right?


00:21:38.780 --> 00:21:41.900
And so a lot of these are moving to require you


00:21:41.900 --> 00:21:45.500
to explicitly say min sample leaf is 20,


00:21:45.500 --> 00:21:48.900
L2 regularization is zero, max bins is 255,


00:21:48.900 --> 00:21:52.140
like keyword arguments to make it more readable and clear.


00:21:52.140 --> 00:21:56.380
- I like to make virtually all my arguments keyword only.


00:21:56.380 --> 00:21:59.220
I might have one or two positional arguments,


00:21:59.220 --> 00:22:00.540
but the rest, keyword only.


00:22:00.540 --> 00:22:03.740
I think it makes code more descriptive.


00:22:03.740 --> 00:22:05.020
You can look at that code,


00:22:05.020 --> 00:22:08.940
and then you know at a glance what this argument does.


00:22:08.940 --> 00:22:10.220
- Yeah, absolutely.


00:22:10.220 --> 00:22:12.420
- Yeah, it drives me nuts when there's like,


00:22:12.420 --> 00:22:15.420
I want all the defaults except for like something special


00:22:15.420 --> 00:22:16.620
at the last one.


00:22:16.620 --> 00:22:19.460
And so I've got to like fill in all of them just to hit that.


00:22:19.460 --> 00:22:22.820
- And also I would love to throw out that this is way better


00:22:22.820 --> 00:22:26.380
than star star KW args, way better, right?


00:22:26.380 --> 00:22:28.900
If you've got 10 optional parameters


00:22:28.900 --> 00:22:30.060
that have maybe defaults


00:22:30.060 --> 00:22:31.420
or don't need to have a specified value,


00:22:31.420 --> 00:22:34.100
make them keyword arguments means that the tooling


00:22:34.100 --> 00:22:38.760
like PyCharm and VS Code will show you auto complete for these.


00:22:38.760 --> 00:22:42.320
I mean, if it's truly open-ended and you don't know what could be passed,


00:22:42.320 --> 00:22:45.320
star star KWArgs. But if you do know what could be passed,


00:22:45.320 --> 00:22:47.580
something like this is way better as well.


00:22:47.580 --> 00:22:50.840
That often means you have to type more.


00:22:50.840 --> 00:22:54.220
If you've got like a signature which takes the same parameter as something else,


00:22:54.220 --> 00:22:57.480
you just have to type it all over again. That can be a bit tedious.


00:22:57.480 --> 00:23:01.920
But it's very beneficial, I think, for the tooling, like you said.


00:23:01.920 --> 00:23:04.280
- Indeed, also for typing, right?


00:23:04.280 --> 00:23:06.360
You can say that this keyword argument thing


00:23:06.360 --> 00:23:08.200
is an integer and that one's a string, right?


00:23:08.200 --> 00:23:11.240
And if it's star star KWR, you're just any any, great.


00:23:11.240 --> 00:23:12.960
Okay, or string any.


00:23:12.960 --> 00:23:16.000
Okay, so we also have new spline transformers.


00:23:16.000 --> 00:23:20.640
So you can create spline Bezier curves, which is cool.


00:23:20.640 --> 00:23:23.400
Quintile regressor is updated.


00:23:23.400 --> 00:23:25.040
Featured name support.


00:23:25.040 --> 00:23:26.240
So when you're doing an estimator


00:23:26.240 --> 00:23:28.680
past your pandas data frame during a fit,


00:23:28.680 --> 00:23:31.600
it will, Estimator will set up feature names


00:23:31.600 --> 00:23:34.020
and attribute containing the feature names, right?


00:23:34.020 --> 00:23:35.120
So that's pretty cool.


00:23:35.120 --> 00:23:38.780
Some examples of that, a more flexible plotting API,


00:23:38.780 --> 00:23:42.700
online one class SVM for all sorts of cool graphs.


00:23:42.700 --> 00:23:44.580
Histogram based gradient boosting models


00:23:44.580 --> 00:23:46.860
are stable and new documentation.


00:23:46.860 --> 00:23:48.300
And of course you can launch it in a binder


00:23:48.300 --> 00:23:50.500
and play with it, which is pretty sweet.


00:23:50.500 --> 00:23:52.300
Congrats to the scikit-learn folks.


00:23:52.300 --> 00:23:53.260
That's very nice.


00:23:53.260 --> 00:23:56.360
And also kind of interesting to get your take


00:23:56.360 --> 00:23:59.660
on API changes and versioning and stuff, Will.


00:23:59.660 --> 00:24:02.100
Oh, before we move on, Brian, I saw a quick question


00:24:02.100 --> 00:24:04.660
that maybe makes sense to throw over to Will from Android.


00:24:04.660 --> 00:24:05.500
- Oh, God.


00:24:05.500 --> 00:24:07.620
Everybody keeps asking this.


00:24:07.620 --> 00:24:10.020
So I've ordered a Windows laptop.


00:24:10.020 --> 00:24:11.540
- The question is, when will there be


00:24:11.540 --> 00:24:13.060
Windows support for Textual?


00:24:13.060 --> 00:24:15.500
- Yeah, I've ordered a Windows laptop.


00:24:15.500 --> 00:24:18.500
I've been working on a VM, but it's a pain


00:24:18.500 --> 00:24:19.340
to work on a VM.


00:24:19.340 --> 00:24:21.860
I've ordered a Windows laptop, and that's gonna arrive


00:24:21.860 --> 00:24:22.860
end of this month.


00:24:22.860 --> 00:24:25.860
And I don't know exactly when,


00:24:25.860 --> 00:24:28.520
But that'll definitely, I'll definitely need that


00:24:28.520 --> 00:24:29.560
to get started.


00:24:29.560 --> 00:24:34.240
And in Citi, in Citi it should only be a week or two work.


00:24:34.240 --> 00:24:37.820
So how about I say this year, this year.


00:24:37.820 --> 00:24:40.180
- After the month of configuring your laptop.


00:24:40.180 --> 00:24:41.500
- That's true, that's true.


00:24:41.500 --> 00:24:43.820
I haven't used Windows in I don't know how long


00:24:43.820 --> 00:24:45.200
apart from a VM.


00:24:45.200 --> 00:24:48.500
I need, I'm gonna test it with a new Windows Terminal,


00:24:48.500 --> 00:24:50.300
which is actually really, really good.


00:24:50.300 --> 00:24:51.980
- Yeah, Windows Terminal's good.


00:24:51.980 --> 00:24:54.620
- Yeah, I think it can be like a first class,


00:24:54.620 --> 00:24:57.260
like textual platform.


00:24:57.260 --> 00:25:01.240
The Mac works great, Linux works great.


00:25:01.240 --> 00:25:04.080
Windows has always been like a bit of a black sheep,


00:25:04.080 --> 00:25:06.880
but the new Windows Terminal is a godsend


00:25:06.880 --> 00:25:09.480
because the old terminal was frankly terrible.


00:25:09.480 --> 00:25:11.260
It hadn't been updated in decades.


00:25:11.260 --> 00:25:13.340
- Yeah, the old school one is no good,


00:25:13.340 --> 00:25:15.200
but the new Windows Terminal is really good.


00:25:15.200 --> 00:25:18.480
Also, just a quick shout out for some support here.


00:25:18.480 --> 00:25:19.980
Nice comment, Tushar.


00:25:19.980 --> 00:25:21.460
Windows support will be provided


00:25:21.460 --> 00:25:24.060
when you click the pink button on Will's GitHub profile,


00:25:24.060 --> 00:25:25.560
AKA the sponsor button.


00:25:25.560 --> 00:25:29.160
I'm sure you'll ransom.


00:25:29.160 --> 00:25:31.260
I promise I do intend to do.


00:25:31.260 --> 00:25:36.160
Alright, how about some server stuff?


00:25:36.160 --> 00:25:37.460
I we've we talked.


00:25:37.460 --> 00:25:38.160
I can't remember.


00:25:38.160 --> 00:25:42.960
I think several times talked about how to use how to develop packages while you're offline.


00:25:42.960 --> 00:25:47.360
Like let's say you're on an airplane or at the beach or something with no Wi-Fi.


00:25:47.360 --> 00:25:51.160
I mean, maybe there's Wi-Fi at the beach, but not at the beaches I go to.


00:25:51.660 --> 00:25:57.040
So that's because you live in Oregon and some of the most rural parts are the beach.


00:25:57.040 --> 00:25:58.760
If this was California, you'd have 5G.


00:25:58.760 --> 00:26:02.080
Yeah, well, I mean, I could tether my phone to it or something.


00:26:02.080 --> 00:26:09.320
But anyway, so Jason Coombs sent over an article using DevPi as an offline


00:26:09.320 --> 00:26:14.040
PyPI cache, and I I had to tell you, to be honest, that I don't know if it's just


00:26:14.040 --> 00:26:17.320
the documentation for DevPi or the other tutorials.


00:26:17.560 --> 00:26:21.620
It just like threw out a few commands and they're like,


00:26:21.620 --> 00:26:23.760
"You're good. That'll work."


00:26:23.760 --> 00:26:25.260
And I just never got it.


00:26:25.260 --> 00:26:28.520
I've tried and it just didn't work for me, but this did.


00:26:28.520 --> 00:26:31.320
So this tutorial is just a straightforward,


00:26:31.320 --> 00:26:33.160
"Okay, we're just going to walk you through


00:26:33.160 --> 00:26:34.860
exactly everything you do."


00:26:34.860 --> 00:26:36.360
It's really not that much.


00:26:36.360 --> 00:26:40.520
For instance, he suggests using PipX to install


00:26:40.520 --> 00:26:43.020
DevPi server, which is nice.


00:26:43.020 --> 00:26:45.060
>> The tbump package as well


00:26:45.060 --> 00:26:47.100
suggested installing itself with PipX.


00:26:47.100 --> 00:26:49.580
PipX is gaining a lot of momentum.


00:26:49.580 --> 00:26:52.500
- Well, especially things like, well, like, yeah,


00:26:52.500 --> 00:26:55.620
T-Bump or, well, or Dev-Pi.


00:26:55.620 --> 00:26:57.060
I don't know if I'd do it with T-Bump


00:26:57.060 --> 00:26:58.580
because I want other package maintainers


00:26:58.580 --> 00:26:59.820
to be able to use it too.


00:26:59.820 --> 00:27:01.660
But anyway, this is definitely something


00:27:01.660 --> 00:27:03.060
you're just using on your own machine,


00:27:03.060 --> 00:27:05.860
so why not let it sit there?


00:27:05.860 --> 00:27:09.060
And then, so you install it, you init it,


00:27:09.060 --> 00:27:11.220
and it creates some stuff.


00:27:11.220 --> 00:27:13.900
I don't know what it does when you init it.


00:27:13.900 --> 00:27:18.900
But then hidden in here is you run dev by server also then.


00:27:18.900 --> 00:27:20.820
There really is just a few commands


00:27:20.820 --> 00:27:24.140
and you get a server running, but there's nothing in it.


00:27:24.140 --> 00:27:25.600
There's no cache in it yet.


00:27:25.600 --> 00:27:30.600
So then you have to go somewhere else and then prime it.


00:27:30.600 --> 00:27:35.740
So you've got a local host and it reports.


00:27:35.740 --> 00:27:38.460
So you can export that as your pip index


00:27:38.460 --> 00:27:40.420
and then just create a virtual environment


00:27:40.420 --> 00:27:41.660
and start installing stuff.


00:27:41.660 --> 00:27:42.660
That's all you gotta do.


00:27:42.660 --> 00:27:44.840
And now it's all primed.


00:27:44.840 --> 00:27:46.780
And then what you do is you turn off,


00:27:46.780 --> 00:27:49.260
next time when you don't have any wifi,


00:27:49.260 --> 00:27:55.220
you turn off, you can run the DevPi server as,


00:27:55.220 --> 00:27:59.000
where is it, DevPi offline mode.


00:27:59.000 --> 00:28:00.380
And then there you have it.


00:28:00.380 --> 00:28:03.660
You've got a cache of everything you need.


00:28:03.660 --> 00:28:06.980
So I tried this out just on like,


00:28:06.980 --> 00:28:09.200
installing pytest from my plugins,


00:28:09.200 --> 00:28:12.220
and then set it in offline mode.


00:28:12.220 --> 00:28:14.400
and then tried in the, all the installing


00:28:14.400 --> 00:28:15.900
the normal stuff that I just did,


00:28:15.900 --> 00:28:18.400
worked fine into a new virtual environment.


00:28:18.400 --> 00:28:20.740
But then when I tried to do something like


00:28:20.740 --> 00:28:23.920
install requests that I didn't have yet or something else,


00:28:23.920 --> 00:28:26.920
it just said, oh, that's not, it's not of it.


00:28:26.920 --> 00:28:27.760
I can't find it or something.


00:28:27.760 --> 00:28:29.380
It's a happy failure.


00:28:29.380 --> 00:28:31.780
So anyway, this instruction worked great.


00:28:31.780 --> 00:28:34.840
I know DevPi can be do a whole bunch of other stuff,


00:28:34.840 --> 00:28:37.120
but I don't need it to do a whole bunch of stuff myself.


00:28:37.120 --> 00:28:39.920
It just needed to be a IPI cache.


00:28:39.920 --> 00:28:41.280
- Yeah, this is really neat.


00:28:41.280 --> 00:28:49.280
of it looks like it creates a database schema as well as allows you to set up set up a user.


00:28:49.280 --> 00:28:53.280
Okay, I guess you could you set up with some authentication that no one can mess with it


00:28:53.280 --> 00:28:58.760
and stuff like that. Apparently this works just fine for teams so you can set up set


00:28:58.760 --> 00:29:05.520
up a server on like a just like a computer that in your network that just runs as a cache


00:29:05.520 --> 00:29:10.080
and then you can point everybody can point to the same one. So I mean that that that


00:29:10.080 --> 00:29:15.160
would work as a really quick and dirty and not too dirty, just a fairly quick way for


00:29:15.160 --> 00:29:21.840
a local team to have a caching server. I'd probably even think about doing this for testing,


00:29:21.840 --> 00:29:25.360
even on one machine so that you can have multiple, like, you know, completely clean out your


00:29:25.360 --> 00:29:30.320
environments and still run, run the test machine and not hit the network so much if you're


00:29:30.320 --> 00:29:32.520
pulling a lot of different stuff.


00:29:32.520 --> 00:29:36.720
Henry Schreiner on the live stream says, can we also mention that Jason, the article we're


00:29:36.720 --> 00:29:37.560
we're just talking about.


00:29:37.560 --> 00:29:40.240
Also maintains 148 libraries,


00:29:40.240 --> 00:29:42.480
including setup tools on PyPI.


00:29:42.480 --> 00:29:43.320
- That's awesome.


00:29:43.320 --> 00:29:48.080
- So may know something about interaction with PyPI.


00:29:48.080 --> 00:29:49.920
- That's phenomenal.


00:29:49.920 --> 00:29:51.200
I don't know how he finds the time to be honest.


00:29:51.200 --> 00:29:54.800
148 packages, he needs a close ember.


00:29:54.800 --> 00:29:57.120
- He has a lot of close ember.


00:29:57.120 --> 00:29:59.040
Awesome, all right, well,


00:29:59.040 --> 00:30:01.240
what's this last one you got for us here?


00:30:01.240 --> 00:30:06.240
- Sure, so I found this project on Reddit.


00:30:06.520 --> 00:30:08.160
it's called PyPy command line.


00:30:08.160 --> 00:30:10.080
And I noticed it in particular because it used rich,


00:30:10.080 --> 00:30:12.420
but it is a pretty cool project.


00:30:12.420 --> 00:30:17.520
It's notable because the author is 14 years old.


00:30:17.520 --> 00:30:19.400
Like, that's blown me away.


00:30:19.400 --> 00:30:23.000
To be that young, and he's done a very good job of it.


00:30:23.000 --> 00:30:26.540
So it's a interface to PyPy from the command line.


00:30:26.540 --> 00:30:31.540
You can do things like get the top 10 packages.


00:30:31.540 --> 00:30:33.760
You can search for packages.


00:30:35.480 --> 00:30:38.760
You can see here's, I think that's a search,


00:30:38.760 --> 00:30:41.220
oh, look, PyPy search.


00:30:41.220 --> 00:30:43.580
Rich, and that's given all the packages


00:30:43.580 --> 00:30:45.200
that have got rich in the name.


00:30:45.200 --> 00:30:47.440
It's got a description and everything and the date.


00:30:47.440 --> 00:30:50.560
And here you can, PyPy info django,


00:30:50.560 --> 00:30:52.160
that gives you some nice information


00:30:52.160 --> 00:30:55.880
about the django package, which it pulls from PyPy.


00:30:55.880 --> 00:30:58.800
- Like the GitHub stars, the download traffic,


00:30:58.800 --> 00:31:01.560
what it depends upon, meta information,


00:31:01.560 --> 00:31:03.200
like it's licensed and who owns it.


00:31:03.200 --> 00:31:04.520
This is really cool.


00:31:04.520 --> 00:31:06.660
Yeah, it's really nice.


00:31:06.660 --> 00:31:10.440
Here we have the description, and that renders the markdown


00:31:10.440 --> 00:31:12.360
right in the terminal.


00:31:12.360 --> 00:31:15.280
I wonder how it does that.


00:31:15.280 --> 00:31:17.240
I couldn't hazard a guess.


00:31:17.240 --> 00:31:19.360
It's got to use rich, right?


00:31:19.360 --> 00:31:21.520
I think it might, yeah.


00:31:21.520 --> 00:31:23.960
Yeah, so it makes good use of rich.


00:31:23.960 --> 00:31:25.680
That's how I noticed it.


00:31:25.680 --> 00:31:28.200
But it is a very cool project in its own right.


00:31:28.200 --> 00:31:31.440
It also uses a questionnaire.


00:31:31.440 --> 00:31:35.080
that's like a terminal thing for selecting stuff


00:31:35.080 --> 00:31:36.400
from the menu.


00:31:36.400 --> 00:31:41.800
So it does a bit dynamically and also has like a command line


00:31:41.800 --> 00:31:45.520
to do it more from the terminal.


00:31:45.520 --> 00:31:49.040
I think it's well worth checking out.


00:31:49.040 --> 00:31:51.440
- I think I wanna check it out just for an example


00:31:51.440 --> 00:31:54.000
of using this sort of a workflow,


00:31:54.000 --> 00:31:55.520
not necessarily with PyPI,


00:31:55.520 --> 00:31:57.840
but with just sort of copying the codes.


00:31:57.840 --> 00:31:58.680
- Yeah. - Yeah.


00:31:58.680 --> 00:32:02.080
It's a really nice looking terminal user interface type thing.


00:32:02.080 --> 00:32:06.040
I think it could be really interesting for you and me, Brian, to just do like info on


00:32:06.040 --> 00:32:08.160
the various things we're talking about, right?


00:32:08.160 --> 00:32:09.960
That might be fun to pull up as well.


00:32:09.960 --> 00:32:14.360
Yeah, there's actually tons of times where I don't really want to pull up a web browser


00:32:14.360 --> 00:32:18.200
just to look it up, but I do want more information, just the help gives me.


00:32:18.200 --> 00:32:22.040
I love the web, but sometimes you have to do a context switch if you're in the terminal,


00:32:22.040 --> 00:32:27.760
you're writing commands and then you've got to like switch windows and find the bar and


00:32:27.760 --> 00:32:33.040
type everything in. It's just a little bit of effort but it can kind of like interrupt


00:32:33.040 --> 00:32:35.320
your flow when you are working.


00:32:35.320 --> 00:32:38.640
Yeah, I mean especially when you got like the whole, I've got like a big monitor and


00:32:38.640 --> 00:32:42.440
I've got them all, everything placed exactly where I want it and there's no web browser.


00:32:42.440 --> 00:32:46.360
So if I want to look something up I gotta like, you know, interrupt that.


00:32:46.360 --> 00:32:51.400
Yeah, or the browser you want is there but it's behind a dozen other windows, a dozen


00:32:51.400 --> 00:32:52.880
other web browsers typically.


00:32:52.880 --> 00:32:53.880
Exactly.


00:32:53.880 --> 00:32:55.000
- Exactly.


00:32:55.000 --> 00:32:56.360
- Yeah, that's a good find.


00:32:56.360 --> 00:32:59.320
And well done to this guy who wrote it


00:32:59.320 --> 00:33:01.240
at such a young age, very cool.


00:33:01.240 --> 00:33:04.640
- I was just gonna ask you if you have the extras thing.


00:33:04.640 --> 00:33:06.240
- Do I have any extras?


00:33:06.240 --> 00:33:08.240
Ta-da, here's my little banner extras.


00:33:08.240 --> 00:33:10.120
I do have some actually, Ryan.


00:33:10.120 --> 00:33:13.000
Quick shout out, Madison Sinover noticed,


00:33:13.000 --> 00:33:17.280
let us know that High Cascades 2022,


00:33:17.280 --> 00:33:19.240
their call for proposals is out.


00:33:19.240 --> 00:33:22.320
So if people wanna sign up for that,


00:33:22.320 --> 00:33:24.700
It closes October 24th.


00:33:24.700 --> 00:33:27.720
So, you know, make haste, you've got four days.


00:33:27.720 --> 00:33:28.560
But yeah, still.


00:33:28.560 --> 00:33:30.380
- EFP closes in four days?


00:33:30.380 --> 00:33:32.060
- Yeah, so if you're thinking of preparing for something,


00:33:32.060 --> 00:33:33.120
you got three days.


00:33:33.120 --> 00:33:34.260
Talks are 25 minutes long.


00:33:34.260 --> 00:33:35.100
It was a lot of fun.


00:33:35.100 --> 00:33:37.920
You know, we both attended this conference a few times.


00:33:37.920 --> 00:33:40.320
In the before times, it was in Portland,


00:33:40.320 --> 00:33:42.560
Seattle, and Vancouver.


00:33:42.560 --> 00:33:44.840
This, I'm not sure what the story is with this one.


00:33:44.840 --> 00:33:46.220
If it's gonna be in person. - It's remote.


00:33:46.220 --> 00:33:47.800
- I think it's remote, right, yeah.


00:33:47.800 --> 00:33:49.220
- I think so, at least.


00:33:49.220 --> 00:33:50.280
Hope I'm not wrong.


00:33:50.280 --> 00:33:51.320
- Yeah, I think you're right.


00:33:51.320 --> 00:33:55.240
- Then have you got your MacBook, your M1 Max?


00:33:55.240 --> 00:33:56.320
You ordered that yet?


00:33:56.320 --> 00:33:57.900
- I want one, but no.


00:33:57.900 --> 00:33:58.740
(laughing)


00:33:58.740 --> 00:34:00.320
The $3,000. - Well, how about you?


00:34:00.320 --> 00:34:02.360
- I would love one, but I have no idea what I'd do with it.


00:34:02.360 --> 00:34:05.760
You know, I just work in the terminal most of the time.


00:34:05.760 --> 00:34:08.120
- Hey, you know, it has that new Pro,


00:34:08.120 --> 00:34:10.320
what is it, ProRes?


00:34:10.320 --> 00:34:13.760
Something display where it has 120 adaptive display,


00:34:13.760 --> 00:34:16.440
Hertz display, so, you know, maybe.


00:34:16.440 --> 00:34:18.600
- I think my monitor only does 60,


00:34:18.600 --> 00:34:20.200
so I don't know if I could use it,


00:34:20.200 --> 00:34:24.800
but I have actually got textual running at 120 frames per second,


00:34:24.800 --> 00:34:26.480
which is pretty crazy.


00:34:26.480 --> 00:34:29.280
>> Yeah, that's pretty crazy. I did end up ordering one,


00:34:29.280 --> 00:34:31.240
and on my Apple account,


00:34:31.240 --> 00:34:32.440
I have this really cool message.


00:34:32.440 --> 00:34:33.920
It says, "Your order will be available soon.


00:34:33.920 --> 00:34:37.520
MacBook Pro available to ship null."


00:34:37.520 --> 00:34:39.880
We'll see where that goes.


00:34:39.880 --> 00:34:42.320
See where that goes.


00:34:42.320 --> 00:34:44.400
>> Did you put null as your address?


00:34:44.400 --> 00:34:47.200
>> I should have. Think how many people's orders I would be getting.


00:34:47.200 --> 00:34:49.360
I would get just a stack of boxes outside.


00:34:49.360 --> 00:34:51.360
Did that at Amazon or something. Yeah.


00:34:51.360 --> 00:34:54.100
And then I think also I want to give a quick shout out to this thing,


00:34:54.100 --> 00:34:56.700
this CodeWeavers crossover,


00:34:56.700 --> 00:35:00.340
which allows you to run Windows apps natively


00:35:00.340 --> 00:35:03.040
on macOS without a virtual machine.


00:35:03.040 --> 00:35:05.040
It's like an intermediate layer.


00:35:05.040 --> 00:35:07.040
So I think that that kind of stuff is going to get real popular,


00:35:07.040 --> 00:35:09.040
especially since the new M1s


00:35:09.040 --> 00:35:12.780
have like a super crappy story for Windows as a virtual machine


00:35:12.780 --> 00:35:15.360
because Windows has a crappy ARM story.


00:35:15.360 --> 00:35:17.360
And you could only do ARM VMs over there.


00:35:17.360 --> 00:35:20.260
So I think that things like this are going to become really popular.


00:35:20.260 --> 00:35:21.600
There's a bunch of cool stuff.


00:35:21.600 --> 00:35:23.160
People haven't checked out this crossover stuff.


00:35:23.160 --> 00:35:25.700
I haven't really done much in it, but it looks super promising.


00:35:25.700 --> 00:35:29.060
I've like been on the verge of like, I almost need this, but I just run into you.


00:35:29.060 --> 00:35:31.160
That's that. Anyway, those are my extras.


00:35:31.160 --> 00:35:34.300
OK, well, I've got a couple.


00:35:34.300 --> 00:35:36.860
We've we've run up Starship once.


00:35:36.860 --> 00:35:40.100
I just I've just broke down and I'm using Starship now.


00:35:40.100 --> 00:35:41.600
It looks working nice.


00:35:41.600 --> 00:35:45.700
And one of the things that installed when I when I grew installed Starship,


00:35:45.700 --> 00:35:48.740
It also installed pie and I'm not sure why.


00:35:48.740 --> 00:35:52.280
So I started using pie of also it was still in


00:35:52.280 --> 00:35:54.240
pie and works great. I like it on my Mac,


00:35:54.240 --> 00:35:58.160
but I still don't think it belongs in Python tutorials.


00:35:58.160 --> 00:36:01.460
Anyway, burning still out on me whether or not it's any


00:36:01.460 --> 00:36:04.140
better than just downloading off of org.


00:36:04.140 --> 00:36:05.100
You're going to get tweets, Brian,


00:36:05.100 --> 00:36:07.420
you're going to get tweets,


00:36:07.420 --> 00:36:08.620
but I agree with you.


00:36:08.620 --> 00:36:09.460
I support you in this.


00:36:09.460 --> 00:36:13.380
And so one of the things that was announced today is


00:36:13.380 --> 00:36:15.220
VS Code.dev is a thing,


00:36:15.220 --> 00:36:17.580
so I thought it was already there,


00:36:17.580 --> 00:36:18.940
but apparently this is new.


00:36:18.940 --> 00:36:21.700
If you go to VS Code.dev,


00:36:21.700 --> 00:36:25.180
it is just VS Code in the browser.


00:36:25.180 --> 00:36:26.300
>> Oh, interesting.


00:36:26.300 --> 00:36:27.220
>> I think it was already there.


00:36:27.220 --> 00:36:30.700
>> Where does it execute and where is your file system and stuff like that?


00:36:30.700 --> 00:36:34.580
>> Well, I think it's the same as the GitHub code spaces.


00:36:34.580 --> 00:36:37.460
>> You press dot? Yeah. Okay, got it.


00:36:37.460 --> 00:36:39.900
>> It can use the local file system though,


00:36:39.900 --> 00:36:41.260
which I think is a difference.


00:36:41.260 --> 00:36:44.520
GitHub had this thing we you hit door and it brought a


00:36:44.520 --> 00:36:50.380
Vs code which worked with the files in your repo, but I think with this it can actually use your local


00:36:50.380 --> 00:36:53.080
File system Wow


00:36:53.080 --> 00:36:58.280
Which makes it more interesting is great if you work on another computer and just pop it open you've got all your settings there


00:36:58.280 --> 00:37:00.580
I'm home you ready to go. Yeah


00:37:00.580 --> 00:37:09.420
Yeah to use cases for me that that I think I would use this that seem really nice one is


00:37:09.900 --> 00:37:12.340
I'm working like say on my daughter's computer.


00:37:12.340 --> 00:37:14.180
She's like, "Dad, help me with this file.


00:37:14.180 --> 00:37:17.060
Help me with something and I've got to open


00:37:17.060 --> 00:37:20.020
some file in a way that has some form of structure."


00:37:20.020 --> 00:37:22.340
She doesn't have VS Code set up on her computer.


00:37:22.340 --> 00:37:23.960
She's in middle school, she doesn't care.


00:37:23.960 --> 00:37:29.300
But I could just fire this up and look at some file in a non-terrible way.


00:37:29.300 --> 00:37:31.860
That would be great. The other is on my iPad.


00:37:31.860 --> 00:37:32.620
>> Yeah.


00:37:32.620 --> 00:37:34.160
>> Right? There's not a good,


00:37:34.160 --> 00:37:35.460
super good story for that,


00:37:35.460 --> 00:37:37.740
but this VS Code in the browser,


00:37:37.740 --> 00:37:40.020
other things in the browser, they seem really nice.


00:37:40.020 --> 00:37:42.380
Or if I was on a Chromebook or something like that, right?


00:37:42.380 --> 00:37:44.620
If I was trying to help somebody with code on a Chromebook,


00:37:44.620 --> 00:37:45.460
that'd be good.


00:37:45.460 --> 00:37:47.220
- How about you, Will, do you have any extras for us?


00:37:47.220 --> 00:37:48.340
- Here we go.


00:37:48.340 --> 00:37:51.340
Python multithreading without the GIL.


00:37:51.340 --> 00:37:54.700
GIL stands for Global Interpreter Lock,


00:37:54.700 --> 00:37:57.820
and it's something which prevents Python threads


00:37:57.820 --> 00:37:59.660
from truly running in parallel.


00:37:59.660 --> 00:38:02.300
People have been talking about this for years,


00:38:02.300 --> 00:38:04.740
and I've got a bit kind of dismissive,


00:38:04.740 --> 00:38:06.820
'cause every time it comes up, it never seems to happen,


00:38:06.820 --> 00:38:10.220
because there's quite a lot of trade-offs generally.


00:38:10.220 --> 00:38:11.740
If you get rid of the GIL,


00:38:11.740 --> 00:38:14.300
you hurt single-threaded performance,


00:38:14.300 --> 00:38:17.740
and most things are single-threaded.


00:38:17.740 --> 00:38:22.260
But this looks like the author, Sam Gross,


00:38:22.260 --> 00:38:25.540
has come up with a way of removing the GIL


00:38:25.540 --> 00:38:28.860
without hurting single-threaded performance.


00:38:28.860 --> 00:38:32.100
I think they've got, it's to do with reference counting.


00:38:32.100 --> 00:38:34.460
They've got two reference counts,


00:38:34.460 --> 00:38:37.380
one for the thread which owns the object


00:38:37.380 --> 00:38:39.400
and one for all the other threads.


00:38:39.400 --> 00:38:42.260
And apparently it works quite well.


00:38:42.260 --> 00:38:44.100
And the great thing about this is--


00:38:44.100 --> 00:38:45.980
- That's super creative to basically think of like,


00:38:45.980 --> 00:38:49.620
well, let's treat the ref count as a thread local storage.


00:38:49.620 --> 00:38:51.420
And probably when that hits zero, you're like,


00:38:51.420 --> 00:38:52.740
okay, well, let's go look at the other threads


00:38:52.740 --> 00:38:54.660
and see if they're also zero, right?


00:38:54.660 --> 00:38:56.000
- Yeah, yeah.


00:38:56.000 --> 00:38:57.980
And if this goes ahead,


00:38:57.980 --> 00:39:00.220
and it's got quite a lot of support, I think,


00:39:00.220 --> 00:39:01.460
in the core dev community,


00:39:01.460 --> 00:39:04.300
I don't keep a really strong eye on that,


00:39:04.300 --> 00:39:08.300
but from what I hear, it's got a lot of support.


00:39:08.300 --> 00:39:09.860
And if that lands,


00:39:09.860 --> 00:39:12.400
then we can get fantastic performance


00:39:12.400 --> 00:39:13.940
out of multi-threaded code.


00:39:13.940 --> 00:39:15.560
You know, if you've got 20 threads,


00:39:15.560 --> 00:39:18.580
you could get almost 20 times performance.


00:39:18.580 --> 00:39:21.180
So that could be huge.


00:39:21.180 --> 00:39:24.220
I've no doubt there'll be a lot of technical hurdles


00:39:24.220 --> 00:39:27.700
from C libraries and things,


00:39:27.700 --> 00:39:29.340
but I'm really excited about that.


00:39:29.340 --> 00:39:32.300
I think performance improvements to single-threaded,


00:39:32.300 --> 00:39:34.200
they come in little fits and starts,


00:39:34.200 --> 00:39:36.140
you know, we get 5% here, 10% here,


00:39:36.140 --> 00:39:37.740
and it's all very welcome.


00:39:37.740 --> 00:39:40.140
But if this lands, then we can get like 20 times


00:39:40.140 --> 00:39:43.180
for certain types of computing tasks.


00:39:43.180 --> 00:39:45.540
So I'm really excited.


00:39:45.540 --> 00:39:47.780
I hope this one lands.


00:39:47.780 --> 00:39:49.340
- I mean, you're talking about this,


00:39:49.340 --> 00:39:51.060
oh, here, let's get this multi-thread stuff.


00:39:51.060 --> 00:39:52.220
You know, you were just saying,


00:39:52.220 --> 00:39:55.260
what are we gonna do with these new M1 Pros and M1 Macs?


00:39:55.260 --> 00:39:59.260
I mean, 10-core machines, 32-core GPUs,


00:39:59.260 --> 00:40:02.780
there's a lot of stuff that's significantly difficult


00:40:02.780 --> 00:40:04.700
to take advantage of with Python,


00:40:04.700 --> 00:40:07.380
unless something like this comes into existence, right?


00:40:07.380 --> 00:40:09.060
- Exactly, if you have 10 cores,


00:40:09.060 --> 00:40:11.480
chances are you'll just use one of them.


00:40:11.480 --> 00:40:15.140
I'm wondering if this goes in, whether it'll change,


00:40:15.140 --> 00:40:17.580
we'll need some other ways of taking advantage of that,


00:40:17.580 --> 00:40:20.660
because I think at the moment, for most tasks,


00:40:20.660 --> 00:40:24.740
you'd have to explicitly create and launch threads.


00:40:24.740 --> 00:40:26.340
I wonder if there'll be advances


00:40:26.340 --> 00:40:29.860
where Python could just launch threads


00:40:29.860 --> 00:40:32.260
and things which could be easily parallelized.


00:40:32.260 --> 00:40:35.460
Maybe I'm hoping for too much,


00:40:35.460 --> 00:40:36.980
but I've no doubt there'll be some kind of like


00:40:36.980 --> 00:40:40.140
software solution to help you just launch threads


00:40:40.140 --> 00:40:44.380
and like use all those cores in your shiny new Macs.


00:40:44.380 --> 00:40:45.640
- There's a lot of interesting stuff


00:40:45.640 --> 00:40:47.460
that you can do with async and await.


00:40:47.460 --> 00:40:50.760
And there's also some cool thread scheduler type things.


00:40:50.760 --> 00:40:53.740
But I think the, you know, much like Python 3


00:40:53.740 --> 00:40:55.700
when type annotations came along,


00:40:55.700 --> 00:40:57.980
there was a whole bunch of stuff that blossomed


00:40:57.980 --> 00:41:00.780
that took advantage of it, like Pydantic and FastAPI


00:41:00.780 --> 00:41:03.900
and stuff, I feel like that blossoming hasn't happened


00:41:03.900 --> 00:41:07.100
because you're really limited by the gill of the CPU level,


00:41:07.100 --> 00:41:09.300
then you go multi-processing and you have like


00:41:09.300 --> 00:41:11.940
data exchange and compatibility issues,


00:41:11.940 --> 00:41:13.780
but if this were to go through, all of a sudden people were


00:41:13.780 --> 00:41:16.620
like, all right, now how do we create these libraries


00:41:16.620 --> 00:41:18.660
that we've wanted all along?


00:41:18.660 --> 00:41:22.540
- Yeah, yeah, I think that's, I think once we've got over


00:41:22.540 --> 00:41:26.980
that technical hurdle, all the library authors


00:41:26.980 --> 00:41:30.340
will be looking for creative ways of using this


00:41:30.340 --> 00:41:35.340
for speeding code up and for just doing more


00:41:35.340 --> 00:41:36.860
with your Python.


00:41:36.860 --> 00:41:38.900
- Yeah, I mean, with every programming language,


00:41:38.900 --> 00:41:42.500
the jump from single-threaded to multi-process


00:41:42.500 --> 00:41:45.920
is a huge overhead, so you don't do it lightly.


00:41:45.920 --> 00:41:48.780
But you could do it lightly with multi-threads.


00:41:48.780 --> 00:41:51.860
You don't have such a huge overhead burden with threads.


00:41:51.860 --> 00:41:52.700
- That's very exciting.


00:41:52.700 --> 00:41:54.020
I was also super excited about this,


00:41:54.020 --> 00:41:55.180
so I'm glad you gave it a shout out.


00:41:55.180 --> 00:41:57.060
We'll probably come back and spend some more time on it


00:41:57.060 --> 00:41:57.900
at some point.


00:41:57.900 --> 00:41:59.460
- Yeah, and where is it?


00:41:59.460 --> 00:42:02.260
Somebody said one of the exciting things about it


00:42:02.260 --> 00:42:04.920
is Guido didn't say no immediately.


00:42:04.920 --> 00:42:08.260
- That's a very good sign.


00:42:08.260 --> 00:42:09.460
- Yeah, which has not been the case


00:42:09.460 --> 00:42:10.340
with some of these other ones,


00:42:10.340 --> 00:42:11.980
because they were willing to sacrifice


00:42:11.980 --> 00:42:13.740
single-threaded performance


00:42:13.740 --> 00:42:15.380
to get better multi-core performance.


00:42:15.380 --> 00:42:17.600
They're like, you know, this is not a common enough use case


00:42:17.600 --> 00:42:18.940
that we're willing to do that.


00:42:18.940 --> 00:42:21.780
- I think actually the solution the author came up with


00:42:21.780 --> 00:42:26.180
It did reduce single threaded performance,


00:42:26.180 --> 00:42:30.100
but he also added some unrelated optimizations,


00:42:30.100 --> 00:42:32.020
which speeded it back up again.


00:42:32.020 --> 00:42:32.860
- Exactly.


00:42:32.860 --> 00:42:34.680
I'm sorry, I fixed it, but yeah.


00:42:34.680 --> 00:42:37.420
Interesting.


00:42:37.420 --> 00:42:38.900
One more thought on this really quick.


00:42:38.900 --> 00:42:40.980
David, pushing out in the live stream says,


00:42:40.980 --> 00:42:42.900
the Gilectomy is like nuclear fusion.


00:42:42.900 --> 00:42:44.420
It's always 10 years away.


00:42:44.420 --> 00:42:45.500
- Yeah, I hope it was.


00:42:45.500 --> 00:42:46.380
Hopefully it's not 10.


00:42:46.380 --> 00:42:49.660
- It's possible, but I think this is the biggest possibility


00:42:49.660 --> 00:42:52.220
since then, two interesting things,


00:42:52.220 --> 00:42:53.980
maybe already taking into account that


00:42:53.980 --> 00:42:56.260
Peter looked at it and didn't say no immediately.


00:42:56.260 --> 00:43:00.020
Two, this is a project Sam's working on,


00:43:00.020 --> 00:43:03.020
but it's supported by Facebook where he works.


00:43:03.020 --> 00:43:05.420
So there's like a lot of time and energy.


00:43:05.420 --> 00:43:07.220
It's not just a side project.


00:43:07.220 --> 00:43:12.220
Third, Larry Hastings, the guy who was doing the galactomy,


00:43:12.220 --> 00:43:14.060
commented on this thread saying,


00:43:14.060 --> 00:43:15.820
"You've made way more progress than I did.


00:43:15.820 --> 00:43:16.780
"Well done, Sam."


00:43:16.780 --> 00:43:18.100
So these are all good signs.


00:43:18.100 --> 00:43:19.380
- That's fantastic, yeah.


00:43:19.380 --> 00:43:20.680
- Yeah, all right.


00:43:20.680 --> 00:43:23.380
Well, Ryan, are you ready for our joke?


00:43:23.380 --> 00:43:24.320
- Yeah. - Laugh?


00:43:24.320 --> 00:43:25.160
- Definitely.


00:43:25.160 --> 00:43:25.980
- See, this is optimistic


00:43:25.980 --> 00:43:28.300
'cause they're not always that funny.


00:43:28.300 --> 00:43:29.240
But I'm gonna give it a try.


00:43:29.240 --> 00:43:31.400
This one is for the web developers out there,


00:43:31.400 --> 00:43:33.400
for those folks that work on APIs


00:43:33.400 --> 00:43:36.380
and probably have been working for a long time on them.


00:43:36.380 --> 00:43:37.880
So the first one I got for us,


00:43:37.880 --> 00:43:39.280
I just found another one I'm gonna throw in


00:43:39.280 --> 00:43:40.760
from inspired by the live stream.


00:43:40.760 --> 00:43:44.640
But this one is entitled, "The Torture Never Stops."


00:43:44.640 --> 00:43:45.480
All right?


00:43:45.480 --> 00:43:46.300
- Okay.


00:43:46.300 --> 00:43:48.120
- So it's a, every one of these,


00:43:48.120 --> 00:43:50.080
it's four different pictures in this cartoon.


00:43:50.080 --> 00:43:54.120
There's a different developers up at the board


00:43:54.120 --> 00:43:57.920
describing some new way to talk to web servers from your app.


00:43:57.920 --> 00:44:00.320
So way back in 2000, it says SOAP,


00:44:00.320 --> 00:44:02.720
Simple Object Access Protocol.


00:44:02.720 --> 00:44:04.820
SOAP makes programming easier.


00:44:04.820 --> 00:44:07.120
And the developer in the audience is like,


00:44:07.120 --> 00:44:08.280
WTF is SOAP?


00:44:08.280 --> 00:44:09.120
Oh, come on.


00:44:09.120 --> 00:44:11.760
What is this crazy namespaces in XML?


00:44:11.760 --> 00:44:12.980
Skip ahead 10 years.


00:44:12.980 --> 00:44:14.840
Now there's a developer up here saying,


00:44:14.840 --> 00:44:17.000
REST, Representational State Transfer.


00:44:17.000 --> 00:44:18.920
REST is better than SOAP.


00:44:18.920 --> 00:44:22.000
The developer now has, "WTF was wrong with SOAP?"


00:44:22.000 --> 00:44:23.920
(laughing)


00:44:23.920 --> 00:44:25.480
2015, GraphQL.


00:44:25.480 --> 00:44:27.720
GraphQL is more versatile than REST.


00:44:27.720 --> 00:44:30.440
WTF, I was just kidding, I think of REST.


00:44:30.440 --> 00:44:32.420
2018, gRPC.


00:44:32.420 --> 00:44:34.280
gRPC is faster than GraphQL.


00:44:34.280 --> 00:44:36.760
WTF, I thought you knew by now.


00:44:36.760 --> 00:44:38.560
The torture never stops.


00:44:38.560 --> 00:44:39.400
(laughing)


00:44:39.400 --> 00:44:41.400
Says, like the guy next to the other developer


00:44:41.400 --> 00:44:43.600
that's been complaining for 20 years.


00:44:43.600 --> 00:44:46.100
- I think that hits a bit too close to home,


00:44:46.100 --> 00:44:47.880
But if you're a JavaScript developer,


00:44:47.880 --> 00:44:51.380
that gets compressed into like the last six months, I think.


00:44:51.380 --> 00:44:53.300
- That's right, you've lived it really hard,


00:44:53.300 --> 00:44:54.580
and really intensely.


00:44:54.580 --> 00:44:56.260
Nick says, "Let's just start over with soap."


00:44:56.260 --> 00:44:57.540
Yeah, pretty good, pretty good.


00:44:57.540 --> 00:45:02.340
All right, and then we were talking about vscode.dev,


00:45:02.340 --> 00:45:05.660
and how you just press dot in your browser in GitHub,


00:45:05.660 --> 00:45:08.860
or how you go to that URL, and so on, how cool it was.


00:45:08.860 --> 00:45:11.300
And somebody said, "Oh, it doesn't work in Safari."


00:45:11.300 --> 00:45:12.620
So I wanna come back to this joke


00:45:12.620 --> 00:45:14.320
that used to be applied to IE.


00:45:15.500 --> 00:45:19.500
But now I think should be applied to Safari.


00:45:19.500 --> 00:45:21.500
Like genuinely, I think it should be.


00:45:21.500 --> 00:45:26.500
It's the browser wars as a cartoon.


00:45:26.500 --> 00:45:28.500
So there's Chrome and Firefox.


00:45:28.500 --> 00:45:30.500
It's a little dated because Firefox is not as popular as it used to be, sadly.


00:45:30.500 --> 00:45:33.500
But it's like Chrome and Firefox are fiercely fighting.


00:45:33.500 --> 00:45:36.500
And like IE is in the corner eating glue.


00:45:36.500 --> 00:45:40.500
I just feel like that needs a little Safari icon and we'd be good.


00:45:40.500 --> 00:45:42.500
We'd be all up to date in 2021.


00:45:42.500 --> 00:45:44.500
How do you know it's IE?


00:45:44.500 --> 00:45:47.580
- It has a little E on it and a window symbol.


00:45:47.580 --> 00:45:48.980
- Oh, okay.


00:45:48.980 --> 00:45:50.580
- Well, the E of course is backwards


00:45:50.580 --> 00:45:52.700
'cause the shirt's probably on backwards or something.


00:45:52.700 --> 00:45:54.340
- Also, it's eaten glue, so.


00:45:54.340 --> 00:45:56.580
(laughing)


00:45:56.580 --> 00:45:59.580
- Yeah, true, funny.


00:45:59.580 --> 00:46:02.100
So, thanks Will for joining us today.


00:46:02.100 --> 00:46:03.420
This was a really fun show.


00:46:03.420 --> 00:46:06.300
Thanks everybody in the chat for all the great comments.


00:46:06.300 --> 00:46:07.500
- Thanks Brian, thanks Will.


00:46:07.500 --> 00:46:08.340
See y'all later.


00:46:08.340 --> 00:46:09.780
- Thanks guys, bye bye.


00:46:09.780 --> 00:46:12.580
- Thanks for listening to Python Bytes.


00:46:12.580 --> 00:46:19.380
the show on Twitter via @pythonbytes. That's Python bytes as in b y t e s. Get the full show


00:46:19.380 --> 00:46:25.300
notes over at Python bytes.fm. If you have a news item we should cover, just visit Python bytes.fm


00:46:25.300 --> 00:46:29.060
and click Submit in the navbar. We're always on the lookout for sharing something cool.


00:46:29.060 --> 00:46:34.020
If you want to join us for the live recording, just visit the website and click live stream to


00:46:34.020 --> 00:46:39.940
get notified of when our next episode goes live. That's usually happening at noon Pacific on


00:46:39.940 --> 00:46:42.420
on Wednesdays over at YouTube.


00:46:42.420 --> 00:46:44.500
On behalf of myself and Brian Aukin,


00:46:44.500 --> 00:46:45.820
this is Michael Kennedy.


00:46:45.820 --> 00:46:48.020
Thank you for listening and sharing this podcast


00:46:48.020 --> 00:46:49.660
with your friends and colleagues.

