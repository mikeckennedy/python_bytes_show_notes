WEBVTT

00:00:00.001 --> 00:00:06.220
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.220 --> 00:00:12.760
This is episode 32, recorded on June 29th, 2017.

00:00:12.760 --> 00:00:14.060
I'm Michael Kennedy.

00:00:14.060 --> 00:00:15.180
And I'm Brian Arkin.

00:00:15.180 --> 00:00:17.660
And we've got a bunch of great stuff lined up for you.

00:00:17.660 --> 00:00:21.740
But first, I just want to say apologies for the slightly off audio on my end.

00:00:21.740 --> 00:00:26.340
I'm not dialing in from the Python Bytes studio in Portland, Oregon.

00:00:26.340 --> 00:00:27.260
I'm actually on the road.

00:00:27.260 --> 00:00:29.780
So Brian and I are doing a little bit different this week.

00:00:29.780 --> 00:00:33.260
Yeah, it's ungodly early at 6 a.m. here.

00:00:33.260 --> 00:00:34.680
I don't know what your problem is.

00:00:34.680 --> 00:00:36.320
It's 2 in the afternoon over here in Ireland.

00:00:36.320 --> 00:00:38.680
What's the love, dude?

00:00:38.680 --> 00:00:39.820
The magic of Skype.

00:00:39.820 --> 00:00:41.780
The magic of Skype.

00:00:41.780 --> 00:00:43.080
We live in the future.

00:00:43.080 --> 00:00:44.700
We just don't really fully appreciate it.

00:00:44.700 --> 00:00:46.500
All right, let's talk about web apps.

00:00:46.500 --> 00:00:49.440
This time, you are the one bringing up a web app.

00:00:49.440 --> 00:00:49.880
Yeah.

00:00:49.880 --> 00:00:51.820
So this is pretty exciting.

00:00:51.820 --> 00:00:55.840
There's a Medium article called Introducing Dash.

00:00:55.840 --> 00:01:02.380
Dash is a reactive web app open source project from Plotly.

00:01:02.820 --> 00:01:05.100
And it looks really exciting.

00:01:05.100 --> 00:01:10.320
The graphics and the plots that you can do on this are kind of amazing.

00:01:10.320 --> 00:01:17.980
And it looks like an interactive, real-time web page with interactive graphs.

00:01:18.440 --> 00:01:22.880
And you hook up input and output and data coming in and out.

00:01:22.880 --> 00:01:27.380
And it's really kind of hard to describe, but people should check it out because it's amazing.

00:01:27.380 --> 00:01:29.100
Yeah, it looks really, really cool.

00:01:29.100 --> 00:01:33.260
And a lot of it is done in Python, right?

00:01:33.400 --> 00:01:42.100
Yeah, so there's Python and Pandas and Flask and React and JSON and all sorts of stuff like that involved to make this stuff work.

00:01:42.100 --> 00:01:47.140
But it ends up being some fairly impressive demos with just a handful of lines of code.

00:01:47.140 --> 00:01:48.580
Yeah, that's super cool.

00:01:48.580 --> 00:01:54.940
So basically, if you're trying to do visualizations with some of the data science tooling,

00:01:55.680 --> 00:02:01.660
you can just make that available on the web, not as pictures, but in a super interactive format, right?

00:02:01.660 --> 00:02:02.460
Which is great.

00:02:02.460 --> 00:02:09.720
Yeah, and they say it's good for data analysis, data exploration, visualization, modeling.

00:02:09.720 --> 00:02:15.340
And they also include instrument control and reporting in what they think is a good application.

00:02:15.340 --> 00:02:20.000
I want to try this for instrument control and visualization myself.

00:02:20.140 --> 00:02:22.000
Oh, yeah, that sounds, that looks really, really cool.

00:02:22.000 --> 00:02:26.060
I kind of feel like I wish I had something to show so I could play with it,

00:02:26.060 --> 00:02:29.380
but I just don't have that much to graph these days.

00:02:29.380 --> 00:02:32.600
I used to do a lot with, like, science, but not in the last 10 years.

00:02:32.600 --> 00:02:39.420
Maybe we could do, like, I don't know, plotting how much traffic our website gets or something.

00:02:39.420 --> 00:02:42.660
Yeah, actually, that would be, that would actually be kind of fun, like, you know,

00:02:42.660 --> 00:02:46.560
bandwidth by country or, you know, downloads over time or who knows?

00:02:46.560 --> 00:02:47.480
We could actually play with that.

00:02:47.480 --> 00:02:48.360
That might be pretty cool.

00:02:48.360 --> 00:02:53.740
And then they include a link in this, but there's a user guide that has a gallery.

00:02:53.740 --> 00:02:57.580
And it looks like it's both, they have pricing up.

00:02:57.580 --> 00:03:03.660
So I think it's both something you can use as a service or yourself with the tool.

00:03:03.660 --> 00:03:04.200
Yeah, cool.

00:03:04.200 --> 00:03:05.340
Yeah, it looks very, very nice.

00:03:05.340 --> 00:03:09.540
Definitely, it will give you that pro touch if you're trying to put graphs on the internet.

00:03:09.540 --> 00:03:09.820
Yeah.

00:03:09.820 --> 00:03:10.600
And you're using Python.

00:03:10.600 --> 00:03:12.400
Especially if you're trying to stay competitive.

00:03:12.400 --> 00:03:13.080
Yeah.

00:03:13.080 --> 00:03:14.200
You know what?

00:03:14.200 --> 00:03:18.340
There was a Python language summit back in the end of May.

00:03:18.340 --> 00:03:21.540
So almost exactly one month ago at the time of this recording.

00:03:21.540 --> 00:03:28.180
And one of the topics that came up was how do we keep Python competitive?

00:03:28.180 --> 00:03:30.340
And this has two angles, right?

00:03:30.340 --> 00:03:33.820
There's basically one angle is how do we keep Python competitive?

00:03:33.820 --> 00:03:38.600
So you don't hear people going, I'm going to rewrite everything in Go or something silly like that.

00:03:38.600 --> 00:03:43.980
Or which seems to be like a meme or something that's happening quite often.

00:03:44.340 --> 00:03:49.260
But also, how do we get people to move from legacy Python to modern Python?

00:03:49.260 --> 00:03:55.200
And there have been a bunch of interesting little features that have been added to Python.

00:03:55.200 --> 00:03:57.760
The asyncio stuff, we've talked a lot about.

00:03:57.760 --> 00:04:02.980
You know, little language touches like cleaner ways to generate dictionaries from sets of dictionaries.

00:04:02.980 --> 00:04:04.380
You know, union sort of thing.

00:04:04.380 --> 00:04:05.420
That kind of stuff.

00:04:05.640 --> 00:04:09.340
But a couple years ago, they really started hitting the drumbeat of, you know what?

00:04:09.340 --> 00:04:13.140
The thing that actually matters the most to people is just flat out performance.

00:04:13.140 --> 00:04:20.420
If we could make Python 3 faster than Python 2, if we could make Python 3 use less memory than Python 2,

00:04:20.420 --> 00:04:28.080
that is going to be a solid reason for these big companies with big code bases to move to Python 3 and really change that equation.

00:04:28.640 --> 00:04:35.480
And so this was sort of a conversation about how do we keep that going at the Language Summit, from what I understand.

00:04:35.480 --> 00:04:38.340
It's not entirely clear how that all goes together.

00:04:38.340 --> 00:04:42.460
I think this was mostly based on a presentation by Victor Steiner.

00:04:42.460 --> 00:04:47.220
He's done a ton of stuff for performance in the last couple versions of Python.

00:04:47.220 --> 00:04:53.580
I think this style of approaching the problem of like, how do we get adoption of Python 3 over Python 2?

00:04:53.580 --> 00:04:56.160
And the decision to say, well, let's focus on performance.

00:04:56.160 --> 00:04:57.240
I think that's actually working.

00:04:57.240 --> 00:05:02.260
Like we saw this to some degree with the Instagram presentation we covered last time, right?

00:05:02.260 --> 00:05:02.480
Yeah.

00:05:02.480 --> 00:05:02.860
Yeah.

00:05:02.860 --> 00:05:07.840
So those guys got, I think, 40% less memory usage on their async tier.

00:05:07.840 --> 00:05:12.820
And they got 12% less CPU usage on their web tier.

00:05:12.820 --> 00:05:16.520
And when you talk about companies like Instagram, that's a lot.

00:05:16.520 --> 00:05:17.940
That's a lot of servers.

00:05:17.940 --> 00:05:19.240
Right.

00:05:19.240 --> 00:05:20.220
So that's really nice.

00:05:20.220 --> 00:05:20.540
Yeah.

00:05:20.720 --> 00:05:36.300
Well, and then also just some of the feedback we've gotten about people switching some applications to asynchronous within Python and AIO, having like 10 times speed up or 100 times speed up sometimes.

00:05:36.300 --> 00:05:36.680
Yeah.

00:05:36.680 --> 00:05:37.600
That's a good point.

00:05:37.600 --> 00:05:38.480
That's a really good point.

00:05:38.480 --> 00:05:39.500
It's not about the CPU.

00:05:39.700 --> 00:05:43.500
It's just about like leveraging the asyncio bit, which is so much easier.

00:05:43.500 --> 00:05:47.100
So this is kind of a summary of that conversation.

00:05:47.100 --> 00:05:49.340
Like, I don't think the language submit is recorded.

00:05:49.340 --> 00:05:50.080
I could be wrong.

00:05:50.300 --> 00:05:52.460
But this is a write-up of that presentation.

00:05:52.460 --> 00:05:53.480
So it's kind of nice.

00:05:53.480 --> 00:05:59.100
It says, basically, we really need to keep Python performant to be competitive with other languages.

00:05:59.100 --> 00:06:11.340
But it's not as easy to optimize as, say, like optimizing C# or Java or C because of the boundary that the C API brings.

00:06:11.340 --> 00:06:18.700
Basically, there's a lot of stuff that ways of working that you're forced to follow in Python to keep the C API working.

00:06:19.180 --> 00:06:23.220
And the C API is actually a really important part of the Python performance story, right?

00:06:23.220 --> 00:06:23.700
Yes.

00:06:23.700 --> 00:06:24.340
Yeah.

00:06:24.340 --> 00:06:24.800
Yeah.

00:06:24.800 --> 00:06:27.460
So like if you're going to use NumPy, that's super fast.

00:06:27.460 --> 00:06:31.860
But NumPy basically is just, you know, a C, mostly written in C.

00:06:31.860 --> 00:06:38.040
So you can't break that because you might make the Python code go faster, but you're going to lose the ability to do the C stuff.

00:06:38.040 --> 00:06:40.900
So that's really pretty interesting.

00:06:40.900 --> 00:06:46.540
And they say it's great to compare Python 3 to Python 2 and say, oh, look, it's much faster.

00:06:47.260 --> 00:06:48.940
But by most benchmarks.

00:06:48.940 --> 00:06:54.600
But what you really need to do is compare it against modern languages, you know, not languages from the year 2000.

00:06:54.600 --> 00:06:55.280
All right.

00:06:55.280 --> 00:06:57.560
So let's try to work on this.

00:06:57.560 --> 00:07:01.000
There was some talk about the JIT implementations, right?

00:07:01.000 --> 00:07:10.240
We've got PyPy, which is like five times faster, but is not very compatible because there's mostly because of the C API, but also some other things.

00:07:10.480 --> 00:07:15.520
I think there's Pigeon done by Dino Veland and Brett Cannon at Microsoft.

00:07:16.160 --> 00:07:24.460
And that's actually a really interesting thing to bring JIT compilation to proper standard CPython, not yet another fork of it.

00:07:24.460 --> 00:07:25.720
So that's pretty interesting.

00:07:25.720 --> 00:07:41.580
And the final thing that someone proposed there was like, is there a way to use the type hints and typed annotations that are appearing in Python 3 to make a slight variation of Cython, which compiles to C, that lets you write code that's closer to regular Python.

00:07:41.580 --> 00:07:47.000
And leverage those type hints because it actually would, you know, basically in Cython, you have to say what the types are.

00:07:47.000 --> 00:07:50.420
But you kind of would do that anyway if you have the type hints in there.

00:07:50.420 --> 00:07:53.860
So there's a lot of interesting stuff just brewing, you know, for the future there.

00:07:53.860 --> 00:07:55.940
That's kind of a really interesting idea.

00:07:55.940 --> 00:07:56.720
I like that.

00:07:56.860 --> 00:08:07.360
Like, if you've got a whole, like a huge data set and it's not going to change, it's going to be a fixed data type and you're declaring it with type hints anyway.

00:08:07.360 --> 00:08:15.100
Having the language be able to take advantage of that and just behind the scenes, just Cythonize it or something.

00:08:15.100 --> 00:08:16.700
That would be slick.

00:08:16.700 --> 00:08:17.600
I would love that.

00:08:18.240 --> 00:08:21.200
It would actually be pretty darn cool, wouldn't it?

00:08:21.200 --> 00:08:21.340
Yeah.

00:08:21.340 --> 00:08:23.400
So, yeah, we'll see.

00:08:23.400 --> 00:08:31.080
I mean, to me, I almost see, like, could you in C or C++, you can have, like, inline assembler, right?

00:08:31.080 --> 00:08:35.260
You say this little bit, these five lines, this is assembly code, but, like, we need this.

00:08:35.260 --> 00:08:36.480
Or you can, like, inline methods.

00:08:36.780 --> 00:08:48.460
It would be cool if you could say, here within my regular Python code, this one function where this is the thing we do all the time, this one or two functions, this is, like, you know, you do an at Cython on it and it just goes.

00:08:48.460 --> 00:08:49.200
That'd be cool.

00:08:49.200 --> 00:08:49.940
Yeah, well.

00:08:49.940 --> 00:08:51.280
This is the future I want to see.

00:08:51.280 --> 00:08:51.700
Definitely.

00:08:51.700 --> 00:08:52.840
All right.

00:08:52.840 --> 00:08:55.780
So that'd be a quick and dirty solution to making it faster.

00:08:55.780 --> 00:08:57.560
If I could just put an at Cython on things.

00:08:57.560 --> 00:08:58.180
Yeah.

00:08:58.180 --> 00:09:03.780
And, man, I was just, I have a hard time not laughing when we do these transitions.

00:09:03.780 --> 00:09:04.800
They're so bad.

00:09:05.120 --> 00:09:09.040
We should just, like, take one episode and just see, like, what's the worst possible thing we can do.

00:09:09.040 --> 00:09:12.960
The next article is PyPI Quick and Dirty.

00:09:12.960 --> 00:09:14.580
It's by Hynek.

00:09:14.580 --> 00:09:17.820
And it's, I met him at PyCon.

00:09:17.820 --> 00:09:20.860
I shook his hand and told him I loved what he's doing.

00:09:20.860 --> 00:09:24.660
And he said, oh, you're the guy that always mispronounces my name on podcasts.

00:09:24.660 --> 00:09:25.780
Anyway.

00:09:25.780 --> 00:09:27.340
Sorry, Hynek.

00:09:27.340 --> 00:09:28.720
This is an awesome article.

00:09:28.720 --> 00:09:34.600
We've talked about packaging before on the podcast, but this is a really good quick write-up

00:09:34.600 --> 00:09:40.280
of how to package your code and get it ready and put it up on PyPI.

00:09:40.280 --> 00:09:44.060
With just a little bit of history, not too much of the background.

00:09:44.060 --> 00:09:45.440
Just how do you do it today?

00:09:45.440 --> 00:09:46.600
This is how you do it today.

00:09:46.600 --> 00:09:54.420
It's opinionated because he takes basically what he does for the ATTRS or adders project

00:09:54.420 --> 00:09:57.140
and talks about doing that.

00:09:57.140 --> 00:09:58.760
So that's pretty much what it is.

00:09:58.760 --> 00:09:59.700
It's about distribution.

00:09:59.700 --> 00:10:00.420
Yeah, that's cool.

00:10:00.420 --> 00:10:05.100
I love the subtitle, A Completely Incomplete Guide to Packaging a Python Module and Sharing

00:10:05.100 --> 00:10:06.460
It with the World on PyPI.

00:10:06.460 --> 00:10:07.080
It's beautiful.

00:10:07.420 --> 00:10:12.420
And I know that for some people, it might be a little bit frustrating that we as a community,

00:10:12.420 --> 00:10:13.400
we're not done.

00:10:13.400 --> 00:10:16.360
This is probably not the final solution for packaging.

00:10:16.360 --> 00:10:18.120
It's still being worked on.

00:10:18.120 --> 00:10:22.900
People are still coming up with ideas for how to maybe make this easier.

00:10:22.900 --> 00:10:25.780
And it's pretty darn easy now.

00:10:25.980 --> 00:10:27.520
Yeah, it is not too bad.

00:10:27.520 --> 00:10:30.800
I've put something up on PyPI before and I was like, really, that's it?

00:10:30.800 --> 00:10:33.420
That's actually pretty darn easy.

00:10:33.420 --> 00:10:40.520
So basically, I think the challenge here is actually creating the package, not getting it

00:10:40.520 --> 00:10:41.020
on PyPI.

00:10:41.020 --> 00:10:45.320
Like once you've got the package, getting it on PyPI is actually like a few CLI argument

00:10:45.320 --> 00:10:46.260
commands.

00:10:46.260 --> 00:10:50.980
And you basically have to have an account and set up like a profile file that has your info

00:10:50.980 --> 00:10:51.180
in it.

00:10:51.180 --> 00:10:52.600
But other than that, you're kind of done.

00:10:53.480 --> 00:10:57.380
So yeah, the more we can make packaging easy and obvious, the better.

00:10:57.380 --> 00:11:03.000
And then some of the differences between getting a package ready for sharing within just a local

00:11:03.000 --> 00:11:10.100
group at work or something and getting it ready for PyPI, a lot of it is just getting all the

00:11:10.100 --> 00:11:14.320
metadata there that it's nice to have for distributions.

00:11:14.320 --> 00:11:21.340
One of the confusions as well, I think, is the word package because that really has two

00:11:21.340 --> 00:11:21.720
meanings.

00:11:22.360 --> 00:11:27.360
In Python, a package can be just a directory with an init.py file.

00:11:27.360 --> 00:11:34.840
But it also is a distribution because the PyPI is not the Python distribution index.

00:11:34.840 --> 00:11:36.320
It's the package index.

00:11:36.320 --> 00:11:38.700
So there's a little bit of confusion there.

00:11:38.700 --> 00:11:40.080
Yeah, that's for sure.

00:11:40.080 --> 00:11:40.600
That's for sure.

00:11:40.600 --> 00:11:43.820
Luckily, consuming them is all nice and easy.

00:11:43.820 --> 00:11:49.440
The next thing that I want to cover is basically a set of example algorithms.

00:11:50.240 --> 00:11:54.020
Especially if you're looking for a new job or you're going to do an interview.

00:11:54.020 --> 00:11:58.980
But also if you're coming from another language, I think it's helpful to study algorithms in

00:11:58.980 --> 00:12:00.040
like simple forms.

00:12:00.040 --> 00:12:05.860
So imagine like you're super good at Java and you know how to do, say, like a depth first

00:12:05.860 --> 00:12:08.320
tree traversal in Java.

00:12:08.860 --> 00:12:10.100
How do I do this in Python?

00:12:10.100 --> 00:12:10.880
Right.

00:12:10.880 --> 00:12:11.480
Is it simpler?

00:12:11.480 --> 00:12:12.280
Is it harder?

00:12:12.280 --> 00:12:13.000
Whatever.

00:12:13.000 --> 00:12:13.680
Right.

00:12:13.680 --> 00:12:19.260
So there's this GitHub repository that's a minimal, a set of minimal examples of data structures

00:12:19.260 --> 00:12:21.280
and algorithms in Python.

00:12:21.280 --> 00:12:23.660
And there are many of them here.

00:12:23.660 --> 00:12:25.980
The GitHub repo is just algorithms.

00:12:25.980 --> 00:12:27.060
So for her name.

00:12:27.060 --> 00:12:27.760
But it's all Python.

00:12:28.000 --> 00:12:32.660
And you look at them and it's like, here's how you create the, how you would do a greatest

00:12:32.660 --> 00:12:35.100
common denominator computation in Python.

00:12:35.100 --> 00:12:37.600
And these are like the six lines of Python you write.

00:12:37.600 --> 00:12:39.220
Here's how you reverse a linked list.

00:12:39.220 --> 00:12:43.280
Here's how you would do a binary search and things like that.

00:12:43.280 --> 00:12:48.400
And so regardless, if you're looking for a new job, if you're trying to compare one implementation

00:12:48.400 --> 00:12:53.140
of another language to Python, to the Pythonic style, like there's a lot of cool stuff going

00:12:53.140 --> 00:12:53.640
on in this.

00:12:53.640 --> 00:12:54.840
This is actually pretty cool.

00:12:54.840 --> 00:13:00.000
When I saw this at first, I sort of dismissed it as, you know, just interview material.

00:13:00.000 --> 00:13:07.560
But there's some decent things in here like rotating an image, doing subsets that I would

00:13:07.560 --> 00:13:11.920
definitely know how to do coming from a different language there, like in C++.

00:13:12.320 --> 00:13:14.280
But yeah, this is good.

00:13:14.280 --> 00:13:14.780
I like it.

00:13:14.780 --> 00:13:15.700
It's pretty cool, right?

00:13:15.700 --> 00:13:16.420
Yeah.

00:13:16.420 --> 00:13:20.700
To me, I think this is, you could like try to solve this yourself and then compare that

00:13:20.700 --> 00:13:23.600
against, you compare your solution against what's here.

00:13:23.600 --> 00:13:29.720
I feel like if I did that, I'd have similar experience to what I did with PyCheck.io, their

00:13:29.720 --> 00:13:30.500
Python stuff.

00:13:30.500 --> 00:13:32.960
So that's kind of that game, that Python game.

00:13:32.960 --> 00:13:36.660
And you like conquer islands by writing Python code, which is interesting.

00:13:36.660 --> 00:13:40.400
But then you can view other people's solutions to the steps in the games.

00:13:40.460 --> 00:13:44.300
And I realized like I have a particular style that's different than other people's style.

00:13:44.300 --> 00:13:46.660
And some ways there's better, some ways mine's better.

00:13:46.660 --> 00:13:49.080
But I think you would also get the same experience here for algorithms.

00:13:49.080 --> 00:13:49.840
Yeah, definitely.

00:13:49.840 --> 00:13:55.720
And also sometimes when you just need to be able to do something for a work, you don't

00:13:55.720 --> 00:13:57.400
want to come up with your own solution.

00:13:57.400 --> 00:13:59.600
I just want, how do I do this in Python?

00:14:00.300 --> 00:14:00.660
Exactly.

00:14:00.660 --> 00:14:01.240
Just show me.

00:14:01.240 --> 00:14:02.600
That's great.

00:14:02.600 --> 00:14:03.240
Yeah.

00:14:03.240 --> 00:14:03.860
So that's cool.

00:14:03.860 --> 00:14:05.720
And you know, it's an open source project.

00:14:05.720 --> 00:14:09.060
So if you actually want to contribute back, you look at it, you're like, oh, this is good.

00:14:09.060 --> 00:14:12.780
But actually, you could write a more Pythonic implementation of a particular algorithm.

00:14:12.780 --> 00:14:14.480
You could contribute back to that, right?

00:14:14.480 --> 00:14:14.680
Yeah.

00:14:14.680 --> 00:14:15.140
Yeah.

00:14:15.140 --> 00:14:17.040
But what if you don't have time?

00:14:18.640 --> 00:14:20.600
This is one of those great transitions, folks.

00:14:20.600 --> 00:14:25.560
There's a lot of ways you could still contribute to open source if you don't have time.

00:14:25.560 --> 00:14:29.820
And I think there's a lot of people, especially, I've talked with a lot of people about open

00:14:29.820 --> 00:14:30.760
source contributions.

00:14:30.760 --> 00:14:36.540
And there's times in your life where you've got more time to devote to something and then

00:14:36.540 --> 00:14:37.820
to open source.

00:14:37.820 --> 00:14:43.380
And then things happen like a new job or a change in your job or maybe a baby or something

00:14:43.380 --> 00:14:45.240
happens where you don't have as much time.

00:14:45.300 --> 00:14:47.180
And there's ways to stay involved.

00:14:47.180 --> 00:14:52.600
There's a nice article called Eight Ways to Contribute to Open Source When You Have

00:14:52.600 --> 00:14:53.180
No Time.

00:14:53.180 --> 00:14:58.320
I think people forget that there is, when they're used to contributing code, there's other ways

00:14:58.320 --> 00:15:00.460
to contribute to make a project successful.

00:15:00.460 --> 00:15:09.540
And he lists a handful of them like bug triaging, like going through the defect reports or bug

00:15:09.540 --> 00:15:14.840
reports and trying to figure out adding detail or asking for more detail.

00:15:15.140 --> 00:15:16.380
cleaning those up.

00:15:16.380 --> 00:15:19.360
That's a lot of things you can do with just if you've got a few minutes.

00:15:19.360 --> 00:15:24.980
I think that's great because one of the things that to me is a big red flag for open source

00:15:24.980 --> 00:15:31.260
projects is if I go there and there's a ton of unanswered bugs.

00:15:31.260 --> 00:15:31.740
Yeah.

00:15:31.740 --> 00:15:35.040
Not like there's a conversation that haven't been closed necessarily, but they're like not

00:15:35.040 --> 00:15:36.420
even responded to.

00:15:36.420 --> 00:15:38.400
And even worse is pull requests.

00:15:38.400 --> 00:15:43.380
Like people have taken the time to like spend an afternoon and write some new feature and the

00:15:43.380 --> 00:15:46.840
people can't even be bothered to say, no, this is not good or it's good.

00:15:46.840 --> 00:15:49.820
Like it's, that's to me seems like a real red flag on these.

00:15:49.820 --> 00:15:52.960
So like this is a way to keep these projects healthy.

00:15:52.960 --> 00:15:56.120
I think you just jumping in and helping out with that kind of stuff.

00:15:56.120 --> 00:15:56.400
Yeah.

00:15:56.500 --> 00:16:00.040
And then there's along those same lines is mailing list support.

00:16:00.040 --> 00:16:04.860
If there's a mailing list around the project, be one of the people that answers some of the

00:16:04.860 --> 00:16:05.620
newbie questions.

00:16:05.620 --> 00:16:09.340
That's huge help to people running the project.

00:16:09.340 --> 00:16:10.840
Documentation patches.

00:16:10.840 --> 00:16:16.380
Every, I don't know of an open source project that doesn't have documentation holes and things

00:16:16.380 --> 00:16:18.220
that could be cleaned up with their documentation.

00:16:18.540 --> 00:16:18.720
Sure.

00:16:18.720 --> 00:16:22.580
Well, and there's a big tension in taking new things.

00:16:22.580 --> 00:16:26.300
Like, so for example, if you, there might be a pull request that says, I want to change

00:16:26.300 --> 00:16:27.180
the way this works.

00:16:27.180 --> 00:16:34.760
And it might be like super simple to change one thing about it, but it might have like so

00:16:34.760 --> 00:16:38.800
many knock on effects into little areas, but that are like problematic.

00:16:38.800 --> 00:16:42.380
So for example, you might want to change the way you start some new project.

00:16:42.380 --> 00:16:48.060
But if even like the steps are self-describing that happen as you like run some little like

00:16:48.060 --> 00:16:51.880
scaffolding thing, if that changes, then you've got to go change all the documentation.

00:16:51.880 --> 00:16:53.640
You've got to go change all the samples.

00:16:53.640 --> 00:16:59.340
You've got to just like, all that stuff is like friction to prevent people from accepting

00:16:59.340 --> 00:17:00.000
pull requests.

00:17:00.000 --> 00:17:02.340
And so if you could help reduce that friction, that'd be good.

00:17:02.340 --> 00:17:03.500
I didn't even think about that.

00:17:03.500 --> 00:17:07.160
You could help the person doing the, having a pull request.

00:17:07.160 --> 00:17:12.320
You could work on their branch as well and say, Hey, this, we need to add documentation

00:17:12.320 --> 00:17:14.260
changes to this before it gets pulled in.

00:17:14.260 --> 00:17:14.840
Yeah, for sure.

00:17:14.840 --> 00:17:20.540
And then my favorite, actually, these are all great, but there's a bullet here for marketing

00:17:20.540 --> 00:17:27.400
talking about your project on community or social media or blogging or podcasting about, about

00:17:27.400 --> 00:17:29.200
your favorite open source project.

00:17:29.200 --> 00:17:30.000
Yeah, that's cool.

00:17:30.000 --> 00:17:34.940
That's near and dear to my heart because I, I've been doing that with, with pytest on

00:17:34.940 --> 00:17:42.060
testing code and on the blog, trying to promote what I think is the best testing platform on

00:17:42.060 --> 00:17:46.140
the planet, but it wasn't really viewed as that before I got started.

00:17:46.140 --> 00:17:51.400
So, I don't know if I doubt I'm the only person to take credit for that, but I think

00:17:51.400 --> 00:17:52.240
I helped a little bit.

00:17:52.240 --> 00:17:55.980
So, well, and you've taken it to a very extreme level by writing a whole book.

00:17:55.980 --> 00:17:57.720
Yeah.

00:17:57.720 --> 00:17:58.640
Oh yeah.

00:17:58.640 --> 00:18:02.420
It doesn't, that's not even listed in here is you could write a book about your project.

00:18:02.420 --> 00:18:03.280
Yeah.

00:18:03.460 --> 00:18:04.520
That's actually a good point.

00:18:04.520 --> 00:18:10.320
Like you can spread the word and education about it by writing blog posts, but you could

00:18:10.320 --> 00:18:12.280
also do video tutorials.

00:18:12.280 --> 00:18:15.280
You could do online courses about an open source project.

00:18:15.280 --> 00:18:16.640
You could write a book about it.

00:18:16.640 --> 00:18:20.820
There's like, like marketing is like really actually super broad and it could be that the

00:18:20.820 --> 00:18:26.320
person who's great at programming is not really as good or interested in doing that, or even

00:18:26.320 --> 00:18:30.740
maybe just their time is better spent like creating features and you could be spreading the word

00:18:30.740 --> 00:18:31.040
about it.

00:18:31.040 --> 00:18:32.280
There's a lot of good ways there.

00:18:32.700 --> 00:18:37.180
And then there's a second half of the article that talks about basically ways to find more

00:18:37.180 --> 00:18:37.960
time in your life.

00:18:37.960 --> 00:18:42.920
If you really want to try to find time, here's a couple ways, which whether they're realistic

00:18:42.920 --> 00:18:49.140
or not, the one that amused me is if you're having trouble sleeping, why try sleeping?

00:18:49.140 --> 00:18:51.840
Just get up and work on your open source projects.

00:18:53.440 --> 00:18:54.080
That's right.

00:18:54.080 --> 00:18:56.260
Use it as a sleep aid.

00:18:56.260 --> 00:19:01.820
You know, one of the things I think you can easily, a lot of people can easily do is not

00:19:01.820 --> 00:19:02.460
watch television.

00:19:02.460 --> 00:19:08.920
If you're an average person, especially average American, if you're looking to find more ways

00:19:08.920 --> 00:19:14.300
to, more time in your life to do things like this or work on your own projects or whatever,

00:19:14.300 --> 00:19:16.120
we spend a lot of time on TV.

00:19:16.240 --> 00:19:20.200
And if you don't watch it, you find your evenings all of a sudden have some time for these kinds of things.

00:19:20.200 --> 00:19:22.360
And you know, I totally see that point.

00:19:22.360 --> 00:19:25.220
But I also want to have some moderation there.

00:19:25.220 --> 00:19:28.360
You can cut cold turkey and have a ton of free time.

00:19:28.360 --> 00:19:28.700
Yes.

00:19:29.140 --> 00:19:35.320
But when I tried to do this and realized that was also like an hour a day or something that

00:19:35.320 --> 00:19:38.420
I was hanging out with my wife, that if I didn't do that.

00:19:38.420 --> 00:19:38.840
Yeah.

00:19:38.840 --> 00:19:43.160
So I would moderate that and say, also, just pay attention to how much time you're spending.

00:19:43.160 --> 00:19:46.400
And if you want to watch a little TV at night, go for it.

00:19:46.400 --> 00:19:50.880
But maybe put a limit on it to say, you know, when one show's done, I'm not going to try to

00:19:50.880 --> 00:19:51.620
find something else.

00:19:51.620 --> 00:19:53.780
I'm just going to turn it off and go do something.

00:19:53.780 --> 00:19:54.720
Open source.

00:19:54.720 --> 00:19:55.740
Yeah.

00:19:55.740 --> 00:19:57.100
Absolutely.

00:19:57.100 --> 00:19:57.740
Sounds good.

00:19:58.120 --> 00:19:58.420
All right.

00:19:58.420 --> 00:20:02.380
So speaking of open source, the last thing I want to cover for us is a real open source

00:20:02.380 --> 00:20:03.220
success story.

00:20:03.220 --> 00:20:06.240
And we talked about NumPy at the beginning.

00:20:06.240 --> 00:20:11.600
NumPy is really one of the super foundational building blocks for all the scientific data

00:20:11.600 --> 00:20:12.720
science side of Python.

00:20:12.720 --> 00:20:18.660
As we've seen and covered in a couple of ways, like some of the massive growth, a good portion

00:20:18.660 --> 00:20:23.480
of the last three or four years of massive growth in Python has to do with data science.

00:20:23.480 --> 00:20:28.780
So NumPy is like really a core pillar of that whole area, right?

00:20:28.780 --> 00:20:29.120
Yes.

00:20:29.120 --> 00:20:33.060
So there's really good news for NumPy.

00:20:33.060 --> 00:20:40.840
They have just received a $645,000 grant for the next two years to improve NumPy.

00:20:40.840 --> 00:20:42.160
That's very exciting.

00:20:42.160 --> 00:20:43.420
That is really great.

00:20:43.820 --> 00:20:47.200
We had PyPy recently received the $200,000 Mozilla grant.

00:20:47.200 --> 00:20:51.820
And now we have NumPy getting almost three quarters of a million dollars to make it better.

00:20:51.820 --> 00:20:58.920
So this grant comes from the Moore Foundation and is going through UC Berkeley's data science

00:20:58.920 --> 00:20:59.600
program.

00:20:59.600 --> 00:21:04.080
So Dr. Nathaniel Smith is like sort of shepherding this.

00:21:04.380 --> 00:21:08.780
You know, of course, NumPy was started by Travis Oliphant, the Continuum, back in 2006.

00:21:08.780 --> 00:21:10.280
And it's great to see it growing.

00:21:10.280 --> 00:21:12.440
So just another open source success project.

00:21:12.440 --> 00:21:13.100
Yeah, definitely.

00:21:13.100 --> 00:21:14.000
That's neat.

00:21:14.000 --> 00:21:14.500
All right.

00:21:14.500 --> 00:21:15.960
Very good news.

00:21:15.960 --> 00:21:18.680
I don't want to, you know, I don't have a whole lot more to say other than I just want to call

00:21:18.680 --> 00:21:23.620
it out that, you know, here's another great funding coming into Python and open source.

00:21:23.620 --> 00:21:25.560
Any more news for you on the book?

00:21:25.680 --> 00:21:30.120
I'm very excited that it's, I've got a little bit of a break because I've got all of the

00:21:30.120 --> 00:21:37.240
book turned in and it's at the point where it's gone out to a handful of actually quite

00:21:37.240 --> 00:21:42.260
a few technical reviewers, make, go through it and make sure I didn't make any horrible

00:21:42.260 --> 00:21:44.660
mistakes or leave out something very crucial.

00:21:44.660 --> 00:21:48.640
And I've got a great team of people set up to do that.

00:21:48.640 --> 00:21:54.440
Luckily, the, the, actually a lot of the core contributors to pytest have agreed to help

00:21:54.440 --> 00:21:55.780
out with that, which is amazing.

00:21:55.780 --> 00:21:57.420
Very humbled by that.

00:21:57.420 --> 00:21:57.840
That's awesome.

00:21:57.840 --> 00:22:01.400
And then, yeah, then it's out of my hands for the most part.

00:22:01.400 --> 00:22:04.480
I'm, I'm on the line for making changes.

00:22:04.480 --> 00:22:08.620
If anybody comes up with something, these are all pretty picky people.

00:22:08.620 --> 00:22:13.860
So I probably will have a lot of changes, but then, then it's, it's off to being ready

00:22:13.860 --> 00:22:17.120
to probably ship a physical copy September or October.

00:22:17.120 --> 00:22:17.900
That'd be cool.

00:22:17.900 --> 00:22:22.000
You can actually put it on your bookshelf and then you'll have officially done it.

00:22:22.000 --> 00:22:22.480
Yeah.

00:22:22.480 --> 00:22:22.760
Yeah.

00:22:22.760 --> 00:22:24.040
So that's awesome.

00:22:24.040 --> 00:22:24.840
All right.

00:22:24.840 --> 00:22:25.920
Well, congratulations.

00:22:25.920 --> 00:22:28.100
Not, not a lot of news on my end to report.

00:22:28.100 --> 00:22:31.240
I'm just hanging out here in Ireland for a short work trip.

00:22:31.240 --> 00:22:33.000
That's just awesome, man.

00:22:33.000 --> 00:22:34.620
I wish I was there with you.

00:22:34.620 --> 00:22:34.860
Yeah.

00:22:34.860 --> 00:22:35.380
I've been fun.

00:22:35.380 --> 00:22:36.200
Definitely been fun.

00:22:36.200 --> 00:22:37.640
So, all right.

00:22:37.640 --> 00:22:41.560
Well, thanks Brian, as always for finding all these cool things to share with everyone

00:22:41.560 --> 00:22:42.320
and everyone.

00:22:42.320 --> 00:22:43.040
Thank you for listening.

00:22:43.040 --> 00:22:43.640
Thank you.

00:22:45.100 --> 00:22:46.860
Thank you for listening to Python Bytes.

00:22:46.860 --> 00:22:49.440
Follow the show on Twitter via at Python Bytes.

00:22:49.440 --> 00:22:52.320
That's Python Bytes as in B-Y-T-E-S.

00:22:52.320 --> 00:22:55.760
And get the full show notes at Pythonbytes.fm.

00:22:55.760 --> 00:23:00.080
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:23:00.080 --> 00:23:02.800
We're always on the lookout for sharing something cool.

00:23:02.800 --> 00:23:06.180
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:23:06.180 --> 00:23:09.800
Thank you for listening and sharing this podcast with your friends and colleagues.

