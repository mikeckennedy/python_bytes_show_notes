WEBVTT

00:00:00.001 --> 00:00:04.880
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.880 --> 00:00:08.680
This is episode 395, recorded August 6th.

00:00:08.680 --> 00:00:10.080
And I am Brian Okken.

00:00:10.080 --> 00:00:11.480
And I'm Michael Kennedy.

00:00:11.480 --> 00:00:13.680
And it is way too hot still.

00:00:13.680 --> 00:00:16.800
I thought we were going to be done with the heat by now, but it's crazy.

00:00:16.800 --> 00:00:17.800
It is August.

00:00:17.800 --> 00:00:19.680
This week's episode is sponsored by us.

00:00:19.680 --> 00:00:22.240
So please check out the offerings we have.

00:00:22.240 --> 00:00:25.800
We got courses at both Talk Python and at Python Test.

00:00:25.800 --> 00:00:29.080
And we've got Patreon supporters.

00:00:29.080 --> 00:00:32.280
We don't shout out to them much, but we do appreciate Patreon supporters.

00:00:32.280 --> 00:00:33.280
So thank you.

00:00:33.280 --> 00:00:40.080
If you'd like to connect with us, we're all on FostedOn, @mkennedy, @brianocken, and @pythonbytes.

00:00:40.080 --> 00:00:42.280
But of course, those links are in the show notes.

00:00:42.280 --> 00:00:47.680
And if you were listening to us later than Tuesday at Pacific Time, 10 o'clock,

00:00:47.680 --> 00:00:52.480
you can catch us either on podcast, of course,

00:00:52.480 --> 00:00:55.880
but also you can watch live if you ever want to do that.

00:00:55.880 --> 00:01:00.280
Usually Tuesdays at 10 AM Pacific Time.

00:01:00.280 --> 00:01:01.280
And we appreciate that.

00:01:01.280 --> 00:01:07.880
And also, really appreciate everybody signing up for the show notes email.

00:01:07.880 --> 00:01:10.480
That's been going really well, and it grows every week.

00:01:10.480 --> 00:01:12.280
And we are going to do a giveaway.

00:01:12.280 --> 00:01:15.600
We haven't met our milestone that we're looking for yet,

00:01:15.600 --> 00:01:18.680
but we would love to give out some free stuff to people.

00:01:18.680 --> 00:01:20.480
So sign up for that newsletter.

00:01:20.480 --> 00:01:22.480
>> Brian, let me motivate some folks.

00:01:22.480 --> 00:01:23.480
13.

00:01:23.480 --> 00:01:24.480
That's how many we need.

00:01:24.480 --> 00:01:26.080
>> 13 more, and we're doing our giveaway.

00:01:26.080 --> 00:01:26.680
>> All right.

00:01:26.680 --> 00:01:30.480
Okay, we just need 13 more people.

00:01:30.480 --> 00:01:33.480
So get on that.

00:01:33.480 --> 00:01:34.880
What do you have for us first, Michael?

00:01:34.880 --> 00:01:38.880
>> Well, you know what I really like about that giveaway is that it's totally free.

00:01:38.880 --> 00:01:40.480
As in free threaded Python.

00:01:40.480 --> 00:01:41.280
Let's go.

00:01:41.280 --> 00:01:45.480
So last time we talked about some of the--

00:01:45.480 --> 00:01:47.880
remember we talked about, I think it was Simon Willison,

00:01:47.880 --> 00:01:52.880
hopefully that attribution is correct, about installing how there's a binary installer

00:01:52.880 --> 00:01:54.280
for free threaded Python?

00:01:54.280 --> 00:01:54.880
>> Yeah.

00:01:54.880 --> 00:01:55.680
>> Right?

00:01:55.680 --> 00:01:59.080
Well, in there, I think he was linking to--

00:01:59.080 --> 00:02:02.480
but certainly I talked to Stan Siebert from Anaconda,

00:02:02.480 --> 00:02:04.680
and that's coming out in a talk Python shortly.

00:02:04.680 --> 00:02:10.680
And he pointed out pi-free-threading.github.io,

00:02:10.680 --> 00:02:16.480
which is a website that tracks-- gives you some advice on how to create your package

00:02:16.480 --> 00:02:20.480
or update your package so that it works in free threaded Python.

00:02:20.480 --> 00:02:25.480
But also, most importantly, it has a status tracker for popular packages.

00:02:25.480 --> 00:02:29.680
So you can look and see, are there wheels for free threaded Python?

00:02:29.680 --> 00:02:31.280
Because apparently, did you know that?

00:02:31.280 --> 00:02:33.880
There's special wheels, like you could have wheels for Linux,

00:02:33.880 --> 00:02:39.480
wheels for macOS Intel version, wheels for macOS ARM version.

00:02:39.480 --> 00:02:42.880
But there's also specific wheels for free threaded Python.

00:02:42.880 --> 00:02:44.480
So that's interesting.

00:02:44.480 --> 00:02:48.280
Maybe you have different compiler flags with, you know,

00:02:48.280 --> 00:02:51.680
threading primitives built in versus skipped, you know,

00:02:51.680 --> 00:02:53.680
in that version or something along those lines.

00:02:53.680 --> 00:02:56.280
Anyway, so it has a compatibility tracker for that.

00:02:56.280 --> 00:02:59.080
Talks about installing it, which really means installing it on Linux.

00:02:59.080 --> 00:03:00.680
That's really, I think, all it covers.

00:03:00.680 --> 00:03:06.080
But yeah, it gives you some more examples how to verify that you're running free threaded Python and so on.

00:03:06.080 --> 00:03:09.480
>> Yeah, what I'm really excited about here is the last two bullets at the top,

00:03:09.480 --> 00:03:15.280
talking about setting up CI and finding, testing, and debugging concurrency issues.

00:03:15.280 --> 00:03:16.680
>> Yeah, yeah, for sure.

00:03:16.680 --> 00:03:19.080
>> That didn't really occur to me, Dale, you just brought it up,

00:03:19.080 --> 00:03:24.680
that if you have a popular package or even a semi-popular package or one you rely on,

00:03:24.680 --> 00:03:31.080
you probably want to start testing it to make sure that it's not going to break in free threaded Python.

00:03:31.080 --> 00:03:32.080
>> Indeed.

00:03:32.080 --> 00:03:34.680
All right, so let's look at the compatibility real quick here.

00:03:34.680 --> 00:03:41.280
Compatibility, it says this page, and you can see it's got a big grid of statuses, basically.

00:03:41.280 --> 00:03:42.480
It's not that long.

00:03:42.480 --> 00:03:47.680
So if you have a package and you expect it to work with free threaded Python and stuff,

00:03:47.680 --> 00:03:50.280
submit it here so we can see its status.

00:03:50.280 --> 00:03:58.680
Anyway, the page says, this page tracks the status of packages for which we're aware of active work on free threaded Python support.

00:03:58.680 --> 00:04:06.680
It contains pages with extension modules as well as build tools and packages that need code specifically to support free threaded.

00:04:06.680 --> 00:04:15.280
Now, it also says, note that pure Python code works without changes by design, so it does not track pure Python packages.

00:04:15.280 --> 00:04:16.280
>> Oh, okay.

00:04:16.280 --> 00:04:17.280
>> Two things.

00:04:17.280 --> 00:04:21.080
One, so if you have a pure Python package, don't try to submit it, hey, here's our status.

00:04:21.080 --> 00:04:27.280
It's like, well, you already got that, so you can just probably do any for your platform and your wheel and you're good to go.

00:04:27.280 --> 00:04:33.280
But there's a difference between executes and works.

00:04:33.280 --> 00:04:36.880
In my mind, it says pure Python code works without changes.

00:04:36.880 --> 00:04:43.480
Pure Python code will run in free threaded mode without any changes by design.

00:04:43.480 --> 00:04:48.680
It's kind of like saying it compiles in a static language, so it's fine.

00:04:48.680 --> 00:04:56.080
It may be built to have a bunch of race conditions, but it doesn't need a special wheel.

00:04:56.080 --> 00:04:57.080
You know what I mean?

00:04:57.080 --> 00:05:01.680
So don't take too much confidence that it's just pure Python, right?

00:05:01.680 --> 00:05:17.280
Your pure Python code can have five steps, four of which have invalid state, and if those things run in parallel and one of them observes that state while the other one is halfway through its steps, you're going to have a bad time, even if it's pure Python, even though it executes.

00:05:17.280 --> 00:05:22.280
So just a bit of a statement if I'm threading there in general, right?

00:05:22.280 --> 00:05:24.680
But if you look through here, there's some interesting things, Brian.

00:05:24.680 --> 00:05:30.680
So, for example, CI Build Wheel is tested in CI, has a PyPI release, so you can pip install it.

00:05:30.680 --> 00:05:37.280
It talks about which version first supports it, but it does not have nightly wheels or a nightly wheel link.

00:05:37.280 --> 00:05:40.280
On the other hand, CMake only has PyPI releases.

00:05:40.280 --> 00:05:49.280
Contour.py only is tested in CI, but is not available on PyPI, and it talks about which platforms have nightly wheels and then their links and so on.

00:05:49.280 --> 00:05:50.680
So you can go through this list.

00:05:50.680 --> 00:05:56.080
For example, NumPy is tested, but there's no release of NumPy at the moment.

00:05:56.080 --> 00:05:59.480
But there are nightly wheels, theoretically, I guess you could use if you want.

00:05:59.480 --> 00:06:01.280
Pip install from there.

00:06:01.280 --> 00:06:03.480
We got Pandas, same status.

00:06:03.480 --> 00:06:09.880
A lot of them are, that's the most common, they're tested in CI, but they're not yet pushed to PyPI, which is fair.

00:06:09.880 --> 00:06:15.280
You know, it's, there is no release of Python that has free threading officially.

00:06:15.280 --> 00:06:16.880
There's only betas, right?

00:06:16.880 --> 00:06:20.680
So the fact that they're not just pushing this stuff out to PyPI, I think.

00:06:20.680 --> 00:06:25.880
Also interesting, notice here, Brian, there's pip, even though it's pip pure Python?

00:06:25.880 --> 00:06:27.280
I don't know, I thought so.

00:06:27.280 --> 00:06:27.980
But check this out.

00:06:27.980 --> 00:06:35.280
So if you go over to the installing section, it says, okay, basically you can get some binary installers off of pypi.org.

00:06:35.280 --> 00:06:42.380
Or here's a bunch of talk about how to set it up on Linux, how to set it up on Docker for Linux and build it from source.

00:06:42.380 --> 00:06:46.180
If you run it, it says, here's how you run with the Guild disabled.

00:06:46.180 --> 00:06:57.680
So if you run with Python dash capital V capital V, you'll see it'll start and say Python such and such experimental free threading build.

00:06:57.680 --> 00:06:58.180
Right?

00:06:58.180 --> 00:07:00.880
>> Sounds lovely and, you know.

00:07:00.880 --> 00:07:02.080
>> Yes, it does.

00:07:02.080 --> 00:07:03.980
You're living so far in the future, aren't you?

00:07:03.980 --> 00:07:08.580
And then here you can, there's a little one-liner you can execute to see that it is working.

00:07:08.580 --> 00:07:08.980
Yeah.

00:07:08.980 --> 00:07:12.280
Talks about porting extensions modules to free threading.

00:07:12.280 --> 00:07:15.180
And here you go, Brian, GitHub Actions.

00:07:15.180 --> 00:07:15.780
Let's go.

00:07:15.780 --> 00:07:23.580
Talks about how to set the GitHub Actions and a bunch of code on how to actually test and debug all the things.

00:07:23.580 --> 00:07:24.380
>> I love that.

00:07:24.380 --> 00:07:25.380
How to set up CI.

00:07:25.380 --> 00:07:29.780
And by that, we mean how to set up GitHub Actions.

00:07:29.780 --> 00:07:32.180
It's fair enough at this point.

00:07:32.180 --> 00:07:34.180
>> It is consolidating a bit, isn't it?

00:07:34.180 --> 00:07:35.580
>> It is, yes.

00:07:35.580 --> 00:07:35.980
>> All right.

00:07:35.980 --> 00:07:47.580
So if you are interested in free-threaded Python, aka the one that has had the Gilectomy done to it by Sam Gross and crew, this is a good resource to have around.

00:07:47.580 --> 00:07:56.480
And if you have a package that you think might need some special treatment to work in that space and you have intentions to potentially support that, let these folks know about it.

00:07:56.480 --> 00:08:00.180
You can see the GitHub in the top right, I'm sure, and submit an issue or something there.

00:08:00.180 --> 00:08:00.980
>> Yeah.

00:08:00.980 --> 00:08:01.980
Nice.

00:08:01.980 --> 00:08:11.480
Well, if you need support, change of transition here, supporting, if you want to support freethreading, great.

00:08:11.480 --> 00:08:15.680
But also we want to be a supportive Python community.

00:08:15.680 --> 00:08:19.280
So I did it, a nice transition there.

00:08:19.280 --> 00:08:24.380
To Python supportive and welcoming environment is tightly coupled to its progress.

00:08:24.380 --> 00:08:29.180
This is a post on the Python Software Foundation blog.

00:08:29.180 --> 00:08:31.980
And it is very nice.

00:08:31.980 --> 00:08:34.580
I think that everybody should go read this.

00:08:34.580 --> 00:08:43.880
And one of the reasons that indicate that maybe this is kind of important is this is signed by a whole bunch of people.

00:08:43.880 --> 00:08:56.280
Deb Nicholson, Don Wages, Tanya Quanhan, Kushal, Georgie Janis, Christian, Christopher Denny, and Chuck and Simon Wilson.

00:08:56.280 --> 00:08:57.780
Lots of signers of this.

00:08:57.780 --> 00:08:59.280
So what is this?

00:08:59.280 --> 00:09:03.680
I want to highlight a couple statements here.

00:09:03.680 --> 00:09:11.780
Python is popular as it is today because we have gone above and beyond to make this a welcoming community.

00:09:11.780 --> 00:09:20.480
Being a friendly and supportive community is part of how we are perceived by a wider world and is integral to the wide popularity of Python.

00:09:20.480 --> 00:09:22.980
I totally believe this.

00:09:22.980 --> 00:09:28.480
We even won, apparently, a wonderfully welcoming award at last year's GitHub Universe.

00:09:28.480 --> 00:09:33.480
And it's often referred to as like come for the language, stay for the community sort of a thing.

00:09:33.480 --> 00:09:40.680
However, with the recent bylaws changes, there was a lot of drama on the mailing list.

00:09:40.680 --> 00:09:55.480
So much drama that we had, even though there were only a thousand people approximately subscribed to a PSF vote mailing list, 45 of those people dropped out.

00:09:55.480 --> 00:09:59.980
I think probably because of the toxicity that was going on on that mailing list.

00:09:59.980 --> 00:10:04.980
So this is a good reminder that we are a welcoming community and we want it that way.

00:10:04.980 --> 00:10:07.280
I like another, I'm going to hop down.

00:10:07.280 --> 00:10:10.380
There's a lot of information in history, if you're curious.

00:10:10.380 --> 00:10:12.380
I like this statement here.

00:10:12.380 --> 00:10:21.780
We have a moral imperative as one of the very best places to bring new people into tech and into open source to keep being good at welcoming new people.

00:10:21.780 --> 00:10:35.980
If we do not rise and continue to rise every day to this task, then we are not fulfilling our own mission to support and facilitate the growth of a diverse and international community of Python programmers.

00:10:35.980 --> 00:10:45.280
It goes on to talk about how technical skills are a game changer for people that are trying to better their position, try to get a better job.

00:10:45.280 --> 00:10:52.980
Python is a great way to get into tech and into programming, and we need to make sure that that stays a great pathway.

00:10:52.980 --> 00:11:05.480
So kind of a serious topic, but it's serious to me that the future of programming stays with this nice on-ramp of Python and we maintain this to be a good place to be.

00:11:05.480 --> 00:11:19.880
So further continuing, some of the consequences of some of the bad actions that happened is that the forum and the mailing list and some of the other avenues of discussion will be, will be, or they've turned on moderation,

00:11:19.880 --> 00:11:25.780
and they're going to continue with moderating it to make sure that there is not toxic behavior going on.

00:11:25.780 --> 00:11:33.280
And I applaud that. I think that's the right thing to do with something as important as communication from the PSF and Python.

00:11:33.280 --> 00:11:36.080
So, so box over.

00:11:36.080 --> 00:11:41.280
Cool. Thanks for sharing. I do think making it welcoming to new people.

00:11:41.280 --> 00:11:48.280
I think what a Python's powers, superpowers is really that people come and they don't feel intimidated, right?

00:11:48.280 --> 00:11:54.680
They don't consider themselves programmers and they kind of accidentally slip into like, wait, I think I just published a package.

00:11:54.680 --> 00:12:03.680
Does that make me a programmer? You know, like six months later and having the community being welcome, welcoming, not just the syntax and the tooling.

00:12:03.680 --> 00:12:05.280
Yes. Counts, you know?

00:12:05.280 --> 00:12:16.880
Yeah. I see a lot of times people will like a lot of PyCon goers, for example, will bring along one of their kids, even though they've been going for a while,

00:12:16.880 --> 00:12:24.880
bring one of their kids and having the kids be able to go off and learn also and realize that, hey, this is kind of a neat place.

00:12:24.880 --> 00:12:31.480
We're probably getting software engineers from the community just because of this that maybe would have not considered it.

00:12:31.480 --> 00:12:33.680
So, all right. Planting the seed there.

00:12:33.680 --> 00:12:37.280
So, all right. You've got some good news for us, don't you?

00:12:37.280 --> 00:12:42.480
I do. Well, I have last week I have planted a seed and this week it has grown.

00:12:42.480 --> 00:12:50.280
So, I was going to cover a new topic, but I want to have more time to digest it than I've had.

00:12:50.280 --> 00:12:53.480
So, let's I want to do a follow up instead, Brian.

00:12:53.480 --> 00:12:59.280
So, remember last week I talked about Uptime Kuma, which is a fancy self-hosted monitoring tool.

00:12:59.280 --> 00:13:04.980
And a lot of folks chimed in over on Masset on saying, you've been using this for years.

00:13:04.980 --> 00:13:07.080
It's super awesome. And so on.

00:13:07.080 --> 00:13:09.680
So, hey, maybe I'll play with this. That would be cool, right?

00:13:09.680 --> 00:13:10.480
Yeah.

00:13:10.480 --> 00:13:18.080
Well, guess what? If you go to Python Bytes and you scroll to the bottom, server status right there, and you click on it,

00:13:18.080 --> 00:13:20.880
it shows you the Python Bytes operational status.

00:13:20.880 --> 00:13:22.680
What is the status of the website?

00:13:22.680 --> 00:13:29.080
And all these little green dots, each one of these are a sample of either up, down, partially up, partially down.

00:13:29.080 --> 00:13:31.280
I guess those are the same thing.

00:13:31.280 --> 00:13:33.680
But you could see those sort of like over time.

00:13:33.680 --> 00:13:39.780
I wish I could control how much time this is, but this is basically just the samples, some number of recent samples.

00:13:39.780 --> 00:13:43.580
And I think I've got it set to every minute or two minute it checks.

00:13:43.580 --> 00:13:45.880
And if it goes wrong, it'll send me an email or something like that.

00:13:45.880 --> 00:13:50.680
But you can also see this 100% of time is basically since I set it up.

00:13:50.680 --> 00:13:53.180
But I think that's 30 days or something.

00:13:53.180 --> 00:13:58.080
I'm not sure exactly the window of that, but that is more, that attracts more of it.

00:13:58.080 --> 00:14:00.380
But anyway, we've got the Python Bytes web.

00:14:00.380 --> 00:14:02.880
You see its certificate expires in 82 days.

00:14:02.880 --> 00:14:04.180
So that's good. Plenty of time.

00:14:04.180 --> 00:14:06.380
It's 90 days by default.

00:14:06.380 --> 00:14:07.480
So quite new.

00:14:07.480 --> 00:14:09.580
The RSS feed, what is its status?

00:14:09.580 --> 00:14:17.080
The CDN status that actually delivers the MP3s, which is a whole separate bit of infrastructure at bunny.net.

00:14:17.080 --> 00:14:20.280
And the MongoDB database that powers the website.

00:14:20.280 --> 00:14:23.980
So you could see, well, maybe the website's down because the database is down.

00:14:23.980 --> 00:14:26.680
Or, you know, there's just a problem with the website.

00:14:26.680 --> 00:14:27.380
Isn't that cool?

00:14:27.380 --> 00:14:28.280
>> It is pretty cool.

00:14:28.280 --> 00:14:28.780
Yeah.

00:14:28.780 --> 00:14:37.580
>> And even more involved because of all the course stuff is if you go to the one for the bottom of talk Python, you can see you've got all those things I described.

00:14:37.580 --> 00:14:44.280
But also like the mobile APIs, the video CDN, the podcast CDN, the courses website, all those things.

00:14:44.280 --> 00:14:47.180
And all are making me smile with almost 100% of time.

00:14:47.180 --> 00:14:49.180
I think I broke when I set it up.

00:14:49.180 --> 00:14:53.680
I didn't configure the setup right for RSS.

00:14:53.680 --> 00:14:58.280
So it's got a little lingering broken bit, but I don't think it's actually had any downtime.

00:14:58.280 --> 00:14:58.980
>> Okay.

00:14:58.980 --> 00:15:03.780
Actually, I'm pleased to see that because I was just wondering if you're rounding up to the nearest hundred.

00:15:03.780 --> 00:15:06.780
>> No, no, this is like to the, it's to the hundredth.

00:15:06.780 --> 00:15:09.780
So it's like 99.86% up.

00:15:09.780 --> 00:15:12.980
But I think it's just I broke it when I was trying to set this thing up.

00:15:12.980 --> 00:15:14.580
So yeah, incredibly easy.

00:15:14.580 --> 00:15:15.680
Just.

00:15:15.680 --> 00:15:16.380
>> This is cool.

00:15:16.380 --> 00:15:16.880
>> Yeah.

00:15:16.880 --> 00:15:20.580
Where's there's so if you go here, basically just Docker run.

00:15:20.580 --> 00:15:22.480
And I've talked about this whole Docker cluster.

00:15:22.480 --> 00:15:26.580
I've had I've migrated everything to all the infrastructure too.

00:15:26.580 --> 00:15:29.580
And adding this as a thing that runs over there.

00:15:29.580 --> 00:15:30.480
Incredibly easy.

00:15:30.480 --> 00:15:35.880
It took probably 20 minutes to get it set up running as its own bit of infrastructure.

00:15:35.880 --> 00:15:40.280
And now it just chills in its own Docker container watching all the other things around the world.

00:15:40.280 --> 00:15:41.180
So very cool.

00:15:41.180 --> 00:15:42.080
>> Neat.

00:15:42.080 --> 00:15:42.680
>> Yeah.

00:15:42.680 --> 00:15:48.980
So if you want to play with that, you can check that out at the bottom of both of the podcast websites in their footers.

00:15:48.980 --> 00:15:50.880
The same for TalkBait on training as well.

00:15:50.880 --> 00:15:52.080
It's in there as well.

00:15:52.080 --> 00:15:58.880
But basically, you know, just it's just an example of someone putting up uptime Kuma, which so far I'm pretty happy with.

00:15:58.880 --> 00:16:01.680
And if what you see on the status page is a public thing.

00:16:01.680 --> 00:16:08.380
But if you log in, you get a lot more detail of like responses, response time, overtime, and all this.

00:16:08.380 --> 00:16:11.280
So you can kind of use it as a performance monitoring thing as well.

00:16:11.280 --> 00:16:11.980
>> Oh, cool.

00:16:11.980 --> 00:16:12.880
Yeah.

00:16:12.880 --> 00:16:13.980
I should check that out.

00:16:13.980 --> 00:16:14.780
>> Indeed.

00:16:14.780 --> 00:16:16.280
>> All right.

00:16:16.280 --> 00:16:22.280
Well, something else to check out is something upcoming a possibly in in Python.

00:16:22.280 --> 00:16:23.580
There is a new pep.

00:16:23.580 --> 00:16:24.880
Well, there's often new peps.

00:16:24.880 --> 00:16:27.780
But here's PEP 751.

00:16:27.780 --> 00:16:35.980
This is authored by Brett Cannon and started at the created at the end of July the 24th.

00:16:35.980 --> 00:16:36.580
What is this?

00:16:36.580 --> 00:16:45.480
This is PEP 751 of file format to list Python dependencies for installation reproducibility, which is a bit of a mouthful.

00:16:45.480 --> 00:16:54.280
But and I actually, to be honest, some of the details in here is are a little detail oriented.

00:16:54.280 --> 00:16:58.780
But I like to look the abstract and the motivation to make total sense.

00:16:58.780 --> 00:17:03.480
So the idea is, well, I'll just read it for the abstract.

00:17:03.480 --> 00:17:10.980
This PEP proposes a new file format for dependency specification to enable reproducible install.

00:17:10.980 --> 00:17:14.580
I enable reproducible installation in a Python environment.

00:17:14.580 --> 00:17:17.880
The format is designed to be human readable and machine generated.

00:17:17.880 --> 00:17:28.280
Installers consuming the file should be able to evaluate each package in question in isolation with no need for dependency resolution at install time, which is interesting.

00:17:28.280 --> 00:17:30.480
So what's the idea?

00:17:30.480 --> 00:17:32.380
I thought we had this already, don't we?

00:17:32.380 --> 00:17:41.580
We have dependency, but we don't have like this whole like lock file stuff is not is not is not a standard.

00:17:41.580 --> 00:17:43.780
It's just implemented several places.

00:17:43.780 --> 00:17:52.980
So there's no under motivation currently, no standard exists to specify what top level dependencies should be installed into a Python environment.

00:17:52.980 --> 00:18:00.780
And no standard exists to create an immutable record such as a lock file of which dependencies are installed.

00:18:00.780 --> 00:18:04.980
There are at least five well-known solutions to the problem.

00:18:04.980 --> 00:18:07.380
We've got pip freeze. We have pip tools.

00:18:07.380 --> 00:18:15.280
UV has a solution poetry and PDM all have a way to deal with lock files in general, but we don't have a standard for this.

00:18:15.280 --> 00:18:22.580
So I am, I guess, welcoming the idea that that that this will be a standard or something similar to it.

00:18:22.580 --> 00:18:24.580
This is early in the PEP lifecycle.

00:18:24.580 --> 00:18:33.680
But yeah, anyway, since it's a packaging topic, these don't necessarily have to come out at the same rate as Python,

00:18:33.680 --> 00:18:41.380
because pip is not pip and other packaging tools are not on the same year time frame as as as Python.

00:18:41.380 --> 00:18:45.580
So not sure if if or when this comes about.

00:18:45.580 --> 00:18:47.080
So yeah, definitely.

00:18:47.080 --> 00:18:47.780
This is cool.

00:18:47.780 --> 00:18:50.080
I actually had this open in another tab.

00:18:50.080 --> 00:18:51.280
I can so I'd go close that now.

00:18:51.280 --> 00:18:52.780
Thanks for that.

00:18:52.780 --> 00:18:53.980
Because I wanted to read about this.

00:18:53.980 --> 00:18:54.780
This is exciting.

00:18:54.780 --> 00:18:56.880
I always love what Brett Cannon's working on.

00:18:56.880 --> 00:19:03.580
Yeah, I think I like the idea of having a lock file that we can use because you.

00:19:03.580 --> 00:19:09.480
Every tool you pick, it's got a solution, but it's incompatible with all other tools.

00:19:09.480 --> 00:19:14.080
So some project uses poetry, for example, to manage its dependencies.

00:19:14.080 --> 00:19:15.880
And you just you don't want to use that.

00:19:15.880 --> 00:19:16.080
Yeah.

00:19:16.080 --> 00:19:21.580
When you you want to do something else, like I'm a big fan of UV implementation of pip tools.

00:19:21.580 --> 00:19:23.080
Well, that doesn't work with it.

00:19:23.080 --> 00:19:23.980
Or maybe it does.

00:19:23.980 --> 00:19:27.880
But you know, like you've got to you've got to get it depends on how you're using it.

00:19:27.880 --> 00:19:28.680
Right.

00:19:28.680 --> 00:19:33.980
But having something interoperable between these would be nice to allow you to choose your workflow.

00:19:33.980 --> 00:19:49.880
Yeah, one of the one of the aspects in here under rationale talked about, which I think is pretty cool, is that the file format of the the tool that creates the file doesn't necessarily have to be the tool that reads and parses it.

00:19:49.880 --> 00:19:58.080
The important thing around that is that there might be like, yeah, anybody you can anybody can create the lock file with whatever tool you want.

00:19:58.080 --> 00:20:07.880
But a service like like, you know, something like Anaconda or some other service or a packager that pulls everything in, they might have their own standard way to do all of that.

00:20:07.880 --> 00:20:13.780
And it doesn't have to be they don't have to support flit and PDM and all sorts of other tools.

00:20:13.780 --> 00:20:16.980
I guess flit isn't one of the on the list, but you know what I mean?

00:20:16.980 --> 00:20:17.480
Yeah.

00:20:17.480 --> 00:20:18.380
Lots of different things.

00:20:18.380 --> 00:20:22.580
So, yeah, it'll be interesting to watch this and see where this goes.

00:20:22.580 --> 00:20:36.780
And as always, I appreciate how much Brett thinks about packaging and packaging was I know that there's that that XKCD comic about packaging being horrible in Python, but it's a hard problem.

00:20:36.780 --> 00:20:42.780
And I'm glad that we have bright people like Brett and other folks he knows to work on the hard problem.

00:20:42.780 --> 00:20:55.180
So, anyway, indeed, I just one thing I hope is that whatever file gets generated out of this, that it's not so noisy that diffs of them over time become hard to read.

00:20:55.180 --> 00:21:11.180
For example, using the pip-tools version, if you flip on hashing, like the hashes take up so much of the of the text that I feel like it's just super hard to read all of a sudden to just like diff a thing and go, OK, what's the what's new?

00:21:11.180 --> 00:21:12.780
What's what's changed? What's the same?

00:21:12.780 --> 00:21:18.580
But it's just, you know, yeah, maybe I should turn word wrap off or something on my editor.

00:21:18.580 --> 00:21:22.580
But it's like you're trying to read, OK, this thing is installed because these three things depend on it.

00:21:22.580 --> 00:21:25.280
But there's just blocks of hashes like all over the screen.

00:21:25.280 --> 00:21:26.380
You know what I mean?

00:21:26.380 --> 00:21:32.180
So I did notice that that was actually called out in the rationale around it.

00:21:32.180 --> 00:21:38.980
It said the format is designed so that viewing a diff of the file is easy by centralizing relevant details.

00:21:38.980 --> 00:21:39.580
Oh, awesome.

00:21:39.580 --> 00:21:44.980
Yeah, like maybe it could have all the things and why they're installed there and then it could have the hashes in a separate place.

00:21:44.980 --> 00:21:47.980
Yeah, you don't have to look at, you know, they don't mix in.

00:21:47.980 --> 00:21:48.980
Yeah, cool.

00:21:48.980 --> 00:21:50.180
Yeah, this is great.

00:21:50.180 --> 00:22:00.380
I'm glad that that was that was that's part of the concern is to make sure because, yeah, that's I might not read it maybe theoretically human readable like XML.

00:22:00.380 --> 00:22:03.580
But the only time I'm actually reading XML is in a diff.

00:22:03.580 --> 00:22:06.780
So, yeah, anyway, cool.

00:22:06.780 --> 00:22:07.780
Well, that's our items.

00:22:07.780 --> 00:22:09.180
Do you have any extras for us?

00:22:09.180 --> 00:22:14.280
I do feel a little extra today and I hinted at this some of the stuff I'm a cover here.

00:22:14.280 --> 00:22:21.080
So first of all, my pie has a new release and there's some interesting things to call out brain my pie one point one one.

00:22:21.080 --> 00:22:27.680
So if you don't know my pie is a a faux compiler for Python, I will say it's a type checker.

00:22:27.680 --> 00:22:32.880
But what it does is basically go through your code as if it was a compiler and make sure that everything would hang together.

00:22:32.880 --> 00:22:38.180
Like here you say this thing is an integer and you're passing into a function that can take an optional integer.

00:22:38.180 --> 00:22:39.880
Right, not an optional string.

00:22:39.880 --> 00:22:43.380
And it would be an error and it would tell you that it's not OK if it weren't right.

00:22:43.380 --> 00:22:45.780
Just like I guess like a compiler kind of would.

00:22:45.780 --> 00:22:48.780
So you can get that. That's very cool.

00:22:48.780 --> 00:22:55.280
It has support for the the new 312 simpler generics, right?

00:22:55.280 --> 00:23:00.980
Like class C of T's bracket T and then you have T goes to cetera, cetera.

00:23:00.980 --> 00:23:05.780
Very nice there. The one I wanted to call out, though, is functools up partial.

00:23:05.780 --> 00:23:08.180
You talked about functools, no iter tools last week.

00:23:08.180 --> 00:23:11.080
Now, how about functools? Have you heard of functools up partial?

00:23:11.080 --> 00:23:13.780
Yeah, I've used them. I heard it.

00:23:13.780 --> 00:23:16.080
Partials are fun. I've never used them.

00:23:16.080 --> 00:23:21.780
So in Python, we can have default values like F of A and B, F of A, B.

00:23:21.780 --> 00:23:24.680
Right. You could say B equals one.

00:23:24.680 --> 00:23:28.180
So you don't have to specify the value, but it could be another value.

00:23:28.180 --> 00:23:32.680
Right. It could be if somebody wanted to, they could override that.

00:23:32.680 --> 00:23:37.080
Right. You can't say here's a thing with a default value, but never set it.

00:23:37.080 --> 00:23:41.880
So you can say partial of that function and specify the second parameter.

00:23:41.880 --> 00:23:43.880
Yeah. Or whichever parameter you want.

00:23:43.880 --> 00:23:46.480
Right. And it'll pass that in.

00:23:46.480 --> 00:23:52.580
But now mypy checks those. We also get better type inference,

00:23:52.580 --> 00:23:57.280
better type hinting in expressions and a bunch of other stuff.

00:23:57.280 --> 00:24:00.280
So it's a pretty big release. We can check that out if they want.

00:24:00.280 --> 00:24:04.880
The thing that I hinted at at the beginning is FastHTML.

00:24:04.880 --> 00:24:07.180
I know there's been a lot of talk about this, right?

00:24:07.180 --> 00:24:13.680
Yeah. So FastHTML is a, they describe themselves as a modern web application,

00:24:13.680 --> 00:24:16.680
building a framework for modern web applications in pure Python.

00:24:16.680 --> 00:24:19.980
Think kind of view components a little bit,

00:24:19.980 --> 00:24:25.080
but a Flask style programming model for the server side

00:24:25.080 --> 00:24:27.680
with a lot of those components actually written in Python,

00:24:27.680 --> 00:24:30.680
which is pretty interesting. You can create them, make reusable things.

00:24:30.680 --> 00:24:36.380
And it's interaction and its dynamic aspects are based on HTMX,

00:24:36.380 --> 00:24:40.680
which is one of my very favorite JavaScript frameworks as well.

00:24:40.680 --> 00:24:44.680
So if you were thinking of doing stuff like Streamlit or Gradio

00:24:44.680 --> 00:24:47.480
or some of these dashboard types of interactions,

00:24:47.480 --> 00:24:50.780
and you're like, I need to go beyond what is capable of this

00:24:50.780 --> 00:24:53.680
and not just put dashboards, but more interactive elements

00:24:53.680 --> 00:24:56.480
and sort of more of a web app, but not a ton more,

00:24:56.480 --> 00:24:59.880
then this is a framework that its upper bound is much higher

00:24:59.880 --> 00:25:01.180
where you can keep going and going.

00:25:01.180 --> 00:25:05.480
So you can definitely create some cool apps real quickly

00:25:05.480 --> 00:25:06.580
with not very much code.

00:25:06.580 --> 00:25:08.480
So I'm going to play with this a little bit more

00:25:08.480 --> 00:25:10.480
and I think I'll talk more about it next week.

00:25:10.480 --> 00:25:13.980
I'm looking forward to that. I was going to bring this up as well.

00:25:13.980 --> 00:25:15.880
Yeah. Looks interesting.

00:25:15.880 --> 00:25:18.180
We could share it next week if you want.

00:25:18.180 --> 00:25:21.580
All right. And then also we're coming up on last chance

00:25:21.580 --> 00:25:30.280
to go be part of the Python and web and database course in a castle in Italy,

00:25:30.280 --> 00:25:37.080
the Python Zero to Hero 2024 event that I'm doing in a luxurious Tuscan Villa.

00:25:37.080 --> 00:25:38.680
And hopefully you can be there.

00:25:38.680 --> 00:25:40.680
But if you've been on the fence and thinking,

00:25:40.680 --> 00:25:43.380
maybe I want to go, but not sure.

00:25:43.380 --> 00:25:46.880
I'll find, you know, on your to-do list to think more about it.

00:25:46.880 --> 00:25:50.980
Well, you got to think soon because we're going to close enrollment

00:25:50.980 --> 00:25:51.580
pretty shortly.

00:25:51.580 --> 00:25:56.380
So please, if you want to go jump on that, if not, that's totally good too.

00:25:56.380 --> 00:25:58.380
And that's it for my extras.

00:25:58.380 --> 00:26:03.280
All right. I've got one extra pretty much what I've been doing in my free time a lot

00:26:03.280 --> 00:26:06.380
is working on the new course, Hello pytest,

00:26:06.380 --> 00:26:10.280
and I really want it to be accessible to everybody.

00:26:10.280 --> 00:26:12.280
So I do have a landing page now.

00:26:12.280 --> 00:26:18.680
It's if you go to courses.pythontest.com, you'll see a link to it.

00:26:18.680 --> 00:26:25.180
There is, I don't know, I haven't decided what the final cost pricing structure is going to be,

00:26:25.180 --> 00:26:30.980
but I'd like to start at 10 bucks because I'd really like it to be something that people can take a look at.

00:26:30.980 --> 00:26:34.180
So the idea around it is not to teach you all of pytest.

00:26:34.180 --> 00:26:36.480
It is to get people started with it.

00:26:36.480 --> 00:26:40.980
So to cover some of the basics like parameterization and fixtures and stuff.

00:26:40.980 --> 00:26:46.080
And the idea being, I would love to have something to hand out to teammates

00:26:46.080 --> 00:26:52.580
so that everybody can get up to speed so that the one pytest expert on the team doesn't get questions all day long.

00:26:52.580 --> 00:26:54.180
That's where I'm trying to fill this in.

00:26:54.180 --> 00:26:56.480
So that's still up.

00:26:56.480 --> 00:27:03.180
In order to do a pricing page, I had to pick a date where I was going to deliver it by.

00:27:03.180 --> 00:27:07.880
I picked the 19th, which is what, 12 days from now.

00:27:07.880 --> 00:27:11.580
I think it's going to be done before then, but that's my deadline.

00:27:11.580 --> 00:27:12.780
So working on that.

00:27:12.780 --> 00:27:14.080
Awesome. Congrats.

00:27:14.080 --> 00:27:22.680
You know, people, if you look around online courses, like especially Udemy, it's an arms race to have the most content.

00:27:22.680 --> 00:27:30.080
We have the super mega course that's 36 hours of content, you know, and it's like, and it's only 50 bucks.

00:27:30.080 --> 00:27:31.480
That one over there, that's 50 bucks.

00:27:31.480 --> 00:27:32.580
It's only five hours.

00:27:32.580 --> 00:27:35.080
That is nothing compared to this.

00:27:35.080 --> 00:27:40.080
That's an additional 31 hours of your time you've got to put into it, right?

00:27:40.080 --> 00:27:44.180
And not everybody has 36 hours of interest in learning pytest.

00:27:44.180 --> 00:27:46.080
They just need enough to get going and get started.

00:27:46.080 --> 00:27:49.080
And so I think there's real value in having a concise.

00:27:49.080 --> 00:27:51.080
Yeah, well, I was surprised.

00:27:51.080 --> 00:28:00.080
I was like talking to a team that was considering my larger course and they decided not to because it was because of them.

00:28:00.080 --> 00:28:04.080
Like, they were like, oh, I really want somebody to be able to do this in a half a day.

00:28:04.080 --> 00:28:04.880
Yeah, exactly.

00:28:04.880 --> 00:28:05.680
Or less.

00:28:05.680 --> 00:28:06.480
And I'm like, oh, okay.

00:28:06.480 --> 00:28:09.680
So there's there's real value in half a day or less courses.

00:28:09.680 --> 00:28:11.280
So I think I agree.

00:28:11.280 --> 00:28:13.680
I don't want to spend 36 hours learning anything.

00:28:13.680 --> 00:28:17.180
I mean, I mean over the course of the history of working with a tool.

00:28:17.180 --> 00:28:19.580
Sure, but over like right away.

00:28:19.580 --> 00:28:21.180
No, I'm not going to do that.

00:28:21.180 --> 00:28:22.080
Yep.

00:28:22.080 --> 00:28:22.980
Exactly.

00:28:22.980 --> 00:28:23.280
All right.

00:28:23.280 --> 00:28:25.580
Let's look one joke about open source a little bit.

00:28:25.580 --> 00:28:26.680
Yes.

00:28:26.680 --> 00:28:27.380
All right.

00:28:27.380 --> 00:28:33.080
So this this joke is called open exclamation mark AI exclamation mark.

00:28:33.080 --> 00:28:36.080
So it has this sort of meme of two people talking to each other.

00:28:36.080 --> 00:28:39.280
Does hi, my name is open AI.

00:28:39.280 --> 00:28:42.180
So you're open source, right?

00:28:42.180 --> 00:28:44.480
Right?

00:28:44.480 --> 00:28:46.480
No, not really.

00:28:46.480 --> 00:28:47.080
Hmm.

00:28:47.080 --> 00:28:47.480
Cool.

00:28:47.480 --> 00:28:48.980
It should be closed AI.

00:28:48.980 --> 00:28:50.780
Yeah.

00:28:50.780 --> 00:28:51.480
At the bottom.

00:28:51.480 --> 00:28:54.080
It does say, okay, open AI is not open source.

00:28:54.080 --> 00:28:57.980
The open means that their AI is open to receive our data.

00:28:57.980 --> 00:28:58.980
Okay, very well.

00:28:58.980 --> 00:29:00.280
Oh, yeah.

00:29:00.280 --> 00:29:01.580
Okay.

00:29:01.580 --> 00:29:03.580
Bart Bart agrees with us.

00:29:03.580 --> 00:29:06.580
Ain't nobody got time for that.

00:29:06.580 --> 00:29:08.380
For long courses, not open AI.

00:29:08.380 --> 00:29:08.980
Yeah.

00:29:08.980 --> 00:29:10.080
All right, cool.

00:29:10.080 --> 00:29:13.980
Well, good again to talk with you as always this week.

00:29:13.980 --> 00:29:18.580
Thank you everybody for joining in on the live stream and everybody else for listening.

00:29:18.580 --> 00:29:22.180
And I hope you have a wonderful rest of your summer or next week.

00:29:22.180 --> 00:29:23.480
So talk to you next week.

