WEBVTT

00:00:00.001 --> 00:00:04.760
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.760 --> 00:00:08.920
This is episode 395, recorded August 6th.

00:00:08.920 --> 00:00:09.840
And I am Brian Hawken.

00:00:09.840 --> 00:00:11.300
And I'm Michael Kennedy.

00:00:11.300 --> 00:00:13.620
And it is way too hot still.

00:00:13.620 --> 00:00:16.700
I thought we were going to be done with the heat by now, but it's crazy.

00:00:16.700 --> 00:00:17.560
It is August.

00:00:17.560 --> 00:00:22.320
This week's episode is sponsored by us, so please check out the offerings we have.

00:00:22.320 --> 00:00:25.740
We've got courses at both Talk Python and at PythonTest.

00:00:25.740 --> 00:00:28.920
And we've got Patreon supporters.

00:00:29.100 --> 00:00:32.340
We don't shout out to them much, but we do appreciate Patreon supporters.

00:00:32.340 --> 00:00:33.180
So thank you.

00:00:33.180 --> 00:00:40.040
If you'd like to connect with us, we're all on Fosstodon, at mkennedy, at Brian Hawken, and at Python Bytes.

00:00:40.040 --> 00:00:42.200
But, of course, those links are in the show notes.

00:00:42.200 --> 00:00:52.480
And if you were listening to us later than Tuesday at Pacific Time, 10 o'clock, you can catch us either on podcast, of course,

00:00:52.480 --> 00:00:55.920
but also you can watch live if you ever want to do that.

00:00:55.920 --> 00:00:59.220
Usually Tuesdays at 10 a.m. Pacific Time.

00:00:59.220 --> 00:01:01.440
And we appreciate that.

00:01:01.440 --> 00:01:07.300
And also, really appreciate everybody signing up for the show notes email.

00:01:07.820 --> 00:01:10.180
That's been going really well, and it grows every week.

00:01:10.180 --> 00:01:12.280
And we are going to do a giveaway.

00:01:12.280 --> 00:01:18.660
We haven't met our milestone that we're looking for yet, but we would love to give out some free stuff to people.

00:01:18.660 --> 00:01:20.560
So sign up for that newsletter.

00:01:20.560 --> 00:01:22.180
Brian, let me motivate some folks.

00:01:22.180 --> 00:01:23.120
13.

00:01:23.120 --> 00:01:24.460
That's how many we need.

00:01:24.460 --> 00:01:25.680
13 more, and we're doing our giveaway.

00:01:26.100 --> 00:01:26.640
All right.

00:01:26.640 --> 00:01:27.080
Okay.

00:01:27.080 --> 00:01:28.400
We just need 13 more people.

00:01:28.400 --> 00:01:31.540
So get on that.

00:01:31.540 --> 00:01:34.660
What do you have for us first, Michael?

00:01:34.660 --> 00:01:40.480
Well, you know what I really like about that giveaway is that it's totally free, as in free threaded Python.

00:01:40.480 --> 00:01:40.900
Let's go.

00:01:40.900 --> 00:01:54.220
So last time we talked about some of the member we talked about, I think it was Simon Willison, hopefully that attribution is correct, about installing how there's a binary installer for free threaded Python.

00:01:54.220 --> 00:01:54.680
Yeah.

00:01:54.960 --> 00:01:55.320
Right.

00:01:55.320 --> 00:02:04.680
Well, in there, I think he was linking to, but certainly I talked to Stan Siebert from Anaconda and that's coming out and I would talk Python shortly.

00:02:04.680 --> 00:02:18.840
And he pointed out, pi dash free dash threading dot github dot IO, which is a website that tracks, gives you some advice on how to create your package or update your package so that it works.

00:02:19.080 --> 00:02:25.560
And free threaded Python, but also most importantly, it has a status tracker for popular packages.

00:02:25.560 --> 00:02:29.640
So you can look and see, are there wheels for free threaded Python?

00:02:29.640 --> 00:02:32.480
Because apparently did you know that there's special wheels?

00:02:32.480 --> 00:02:42.760
Like you could have wheels for Linux, wheels for macOS, Intel version wheels for macOS, arm version, but there's also specific wheels for free threaded Python.

00:02:42.760 --> 00:02:44.360
So that's interesting.

00:02:44.520 --> 00:02:53.560
Maybe you have different compiler flags with, you know, threading primitives built in versus skipped, you know, in that version or something along those lines.

00:02:53.560 --> 00:02:56.200
Anyway, so it has a compatibility tracker for that.

00:02:56.200 --> 00:02:59.100
Talks about installing it, which really means installing it on Linux.

00:02:59.100 --> 00:03:00.600
It's really, I think all it covers.

00:03:00.600 --> 00:03:06.020
But yeah, it gives you some, some more examples, how to verify that you're running free threaded Python and so on.

00:03:06.020 --> 00:03:06.380
Yeah.

00:03:06.380 --> 00:03:15.180
What I'm really excited about here is the last two bullets at the top talking about setting up CI and finding testing and debugging currency issues.

00:03:15.180 --> 00:03:15.680
Yeah.

00:03:15.680 --> 00:03:16.600
Yeah, for sure.

00:03:16.600 --> 00:03:18.320
That didn't really occur to me, Dale.

00:03:18.320 --> 00:03:30.440
You just brought it up that if you have a popular package or even a semi-popular package or one you rely on, you probably want to start testing it to make sure that it's not going to break in free threaded Python.

00:03:31.100 --> 00:03:31.580
Indeed.

00:03:31.580 --> 00:03:32.400
All right.

00:03:32.400 --> 00:03:34.440
So let's look at the compatibility real quick here.

00:03:34.440 --> 00:03:35.500
Compatibility.

00:03:35.500 --> 00:03:40.740
It says this page and you can see it's got a big grid of, of statuses.

00:03:40.740 --> 00:03:42.540
Basically it's not that long.

00:03:42.540 --> 00:03:50.140
So if you have a package and you expect it to work with free threaded Python and stuff submitted here so we can see its status.

00:03:50.440 --> 00:03:58.740
Anyway, the page says this page tracks the status of packages for which we're aware of active work on free threaded Python support.

00:03:58.740 --> 00:04:06.700
It contains pages with extension modules as well as build tools and packages that need code specifically to support free threaded.

00:04:06.700 --> 00:04:12.440
Now it also says note that pure Python code works without changes by design.

00:04:12.440 --> 00:04:15.220
So it does not track pure Python packages.

00:04:15.220 --> 00:04:16.060
Oh, okay.

00:04:16.340 --> 00:04:17.660
Two things one.

00:04:17.660 --> 00:04:20.240
So if you have a pure Python package, don't try to submit it.

00:04:20.240 --> 00:04:21.160
Hey, here's our status.

00:04:21.160 --> 00:04:22.500
It's like, well, you already got that.

00:04:22.500 --> 00:04:27.160
So you can just probably do any for your platform and your wheel and you're good to go.

00:04:27.740 --> 00:04:34.700
But there's, there's a difference between executes and works in my mind.

00:04:34.700 --> 00:04:37.000
It says pure Python code works without changes.

00:04:37.000 --> 00:04:43.680
Pure Python code will run in free threaded mode without any changes by design.

00:04:43.680 --> 00:04:47.760
It's kind of like saying it compiles in a static language.

00:04:47.760 --> 00:04:48.960
So it's fine.

00:04:50.360 --> 00:04:56.200
It may be built to have a bunch of race conditions, but that, but it doesn't need a special wheel.

00:04:56.200 --> 00:04:57.180
You know what I mean?

00:04:57.180 --> 00:05:01.740
So don't take too much confidence that it's just pure Python, right?

00:05:01.740 --> 00:05:07.840
Your pure Python code can have five steps, four of which have invalid state.

00:05:08.260 --> 00:05:12.220
And if those things run in parallel and one of them observes that state while the other

00:05:12.220 --> 00:05:16.260
one is halfway through its steps, you're going to have a bad time, even if it's pure Python,

00:05:16.260 --> 00:05:17.440
even though it executes.

00:05:17.440 --> 00:05:22.340
So just a bit of a statement from the reading there in general, right?

00:05:22.340 --> 00:05:24.880
But like, if you look through here is there's some interesting things, Brian.

00:05:24.880 --> 00:05:29.380
So for example, CI build will is tested in CI has a PI PI release.

00:05:29.380 --> 00:05:30.660
So you can pip install it.

00:05:31.000 --> 00:05:35.360
It talks about which version first supports it, but it does not have nightly wheels or

00:05:35.360 --> 00:05:37.020
a nightly wheel link.

00:05:37.020 --> 00:05:40.180
On the other hand, CMake only has PI PI releases.

00:05:40.180 --> 00:05:44.000
Contour.py only is tested in CI, but is not available on PI PI.

00:05:44.000 --> 00:05:49.400
And it talks about which platforms have nightly wheels and then their links and so on.

00:05:49.400 --> 00:05:50.520
So you can go through this list.

00:05:50.520 --> 00:05:55.980
For example, NumPy is tested, but there's no release of NumPy at the moment.

00:05:55.980 --> 00:05:57.380
But there are nightly wheels.

00:05:57.380 --> 00:05:59.500
I theoretically, I guess you could use if you want.

00:06:00.040 --> 00:06:01.260
pip install from there.

00:06:01.260 --> 00:06:03.480
We got pandas, same status.

00:06:03.480 --> 00:06:05.680
A lot of them are, that's the most common.

00:06:05.680 --> 00:06:09.940
They're tested in CI, but they're not yet pushed to PI PI, which is fair.

00:06:09.940 --> 00:06:15.040
You know, it's, there is no release of Python that has free threading officially.

00:06:15.040 --> 00:06:16.940
There's only betas, right?

00:06:16.940 --> 00:06:20.620
So the fact that they're not just pushing this stuff out to PI PI is, I think.

00:06:20.620 --> 00:06:25.820
Also interesting notice here, Brian, there's pip, even though it's pip pure Python.

00:06:25.820 --> 00:06:26.460
I don't know.

00:06:26.460 --> 00:06:28.100
I thought so, but check this out.

00:06:28.140 --> 00:06:32.300
So if you go over to the installing section, it says, okay, basically you can get some binary

00:06:32.300 --> 00:06:34.900
installers off of pipi.org.

00:06:34.900 --> 00:06:40.360
Or here's a bunch of talk about how to set it up on Linux, how to set it up on Docker for

00:06:40.360 --> 00:06:42.200
Linux and build it from source.

00:06:42.200 --> 00:06:45.880
If you run it, it says, here's how you run with the guild disabled.

00:06:46.080 --> 00:06:57.400
So if you run with Python dash, capital V, capital V, you'll see, it'll start and say, Python, such and such experimental free threading build.

00:06:57.400 --> 00:06:58.000
Right?

00:06:58.000 --> 00:06:59.040
Sounds lovely.

00:06:59.040 --> 00:07:00.560
And, you know.

00:07:00.560 --> 00:07:01.640
Yes, it does.

00:07:02.040 --> 00:07:03.940
You're living so far in the future, aren't you?

00:07:03.940 --> 00:07:08.480
And then here you can, there's a little one-liner you can execute to see that it's working.

00:07:08.480 --> 00:07:08.920
Yep.

00:07:08.920 --> 00:07:12.320
Talks about porting extensions modules to free threading.

00:07:12.320 --> 00:07:13.720
And here you go, Brian.

00:07:13.720 --> 00:07:14.900
GitHub actions.

00:07:14.900 --> 00:07:15.760
Let's go.

00:07:15.760 --> 00:07:17.360
It talks about how to set the GitHub actions.

00:07:17.360 --> 00:07:23.280
And a bunch of code on how to actually test and debug all the things.

00:07:23.280 --> 00:07:24.180
I love that.

00:07:24.180 --> 00:07:25.360
How to set up CI.

00:07:25.580 --> 00:07:28.840
And by that, we mean how to set up GitHub actions.

00:07:28.840 --> 00:07:31.800
It's fair enough at this point.

00:07:31.800 --> 00:07:34.080
It is consolidating a bit, isn't it?

00:07:34.080 --> 00:07:35.340
It is, yes.

00:07:35.340 --> 00:07:36.000
All right.

00:07:36.000 --> 00:07:47.320
So if you are interested in free-threaded Python, a.k.a. the one that has had the Gilectomy done to it by Sam Gross and crew, this is a good resource to have around.

00:07:47.320 --> 00:07:54.960
And if you have a package that you think might need some special treatment to work in that space and you have intentions to potentially support that,

00:07:55.300 --> 00:07:56.640
let these folks know about it.

00:07:56.640 --> 00:07:58.160
You can see the GitHub in the top right.

00:07:58.160 --> 00:08:00.080
I'm sure you can submit an issue or something there.

00:08:00.080 --> 00:08:00.580
Yep.

00:08:00.580 --> 00:08:01.460
Nice.

00:08:01.460 --> 00:08:01.580
Nice.

00:08:01.580 --> 00:08:07.440
Well, if you need support, change your transition here.

00:08:07.440 --> 00:08:08.940
Supporting.

00:08:08.940 --> 00:08:11.540
If you want to support free threading, great.

00:08:11.540 --> 00:08:15.140
But also, we want to be a supportive Python community.

00:08:15.140 --> 00:08:17.660
So I did it.

00:08:17.660 --> 00:08:18.740
A nice transition there.

00:08:18.740 --> 00:08:24.360
To Python's supportive and welcoming environment is tightly coupled to its progress.

00:08:24.520 --> 00:08:29.020
This is a post on the Python Software Foundation blog.

00:08:29.020 --> 00:08:31.960
And it is very nice.

00:08:31.960 --> 00:08:33.980
I think that everybody should go read this.

00:08:34.800 --> 00:08:43.960
And one of the reasons that indicate that maybe this is kind of important is this is signed by a whole bunch of people.

00:08:43.960 --> 00:08:55.980
Deb Nicholson, Don Wages, Tanya, Quan Han, Kushal, Georgie, Janice, Christian, Christopher, Denny, and Chuk, and Simon Wilson.

00:08:55.980 --> 00:08:57.600
Lots of signers of this.

00:08:57.920 --> 00:08:58.760
So what is this?

00:08:58.760 --> 00:09:02.980
I want to highlight a couple statements here.

00:09:03.480 --> 00:09:11.840
Python is as popular as it is today because we have gone above and beyond to make this a welcoming community.

00:09:11.840 --> 00:09:20.400
Being a friendly and supportive community is part of how we are perceived by a wider world and is integral to the wide popularity of Python.

00:09:20.760 --> 00:09:21.760
I totally believe this.

00:09:21.760 --> 00:09:23.080
I totally believe this.

00:09:23.080 --> 00:09:28.320
We even won, apparently, won a wonderfully welcoming award at last year's GitHub Universe.

00:09:28.320 --> 00:09:33.500
And it's often referred to as like come for the language, stay for the community sort of a thing.

00:09:33.720 --> 00:09:40.200
However, with the recent bylaws changes, there was a lot of drama on the mailing list.

00:09:40.200 --> 00:09:54.980
So much drama that we had, even though there were only a thousand people approximately subscribed to a PSF vote mailing list, 45 of those people dropped out.

00:09:54.980 --> 00:09:59.880
I think probably because of the toxicity that was going on that mailing list.

00:10:00.320 --> 00:10:04.920
So this is a good reminder that we are a welcoming community and we want it that way.

00:10:04.920 --> 00:10:07.240
I like another, I'm going to hop down.

00:10:07.240 --> 00:10:10.180
There's a lot of information and history if you're curious.

00:10:10.180 --> 00:10:12.320
I like this statement here.

00:10:12.320 --> 00:10:21.740
We have a moral imperative as one of the very best places to bring new people into tech and into open source to keep being good at welcoming new people.

00:10:22.140 --> 00:10:35.800
If we do not rise and continue to rise every day to this task, then we are not fulfilling our own mission of our own mission to support and facilitate the growth of a diverse and international community of Python programmers.

00:10:35.800 --> 00:10:45.180
Goes on to talk about how technical skills are a game changer for people that are trying to better their position, try to get a better job.

00:10:45.320 --> 00:10:48.280
Python's a great way to get into tech and into programming.

00:10:48.280 --> 00:10:52.860
And we need to make sure that that stays a great pathway.

00:10:52.860 --> 00:11:01.700
So kind of a serious topic, but it's serious to me that the future of programming stays with this nice on-ramp of Python.

00:11:02.220 --> 00:11:05.460
And we maintain this to be a good place to be.

00:11:05.460 --> 00:11:19.620
So further continuing, some of the consequences of some of the bad actions that happened is that the forum and the mailing list and some of the other avenues of discussion will be, will be, or they've turned on moderation.

00:11:19.620 --> 00:11:25.760
And they're going to continue with moderating it to make sure that there is not toxic behavior going on.

00:11:26.000 --> 00:11:27.140
And I applaud that.

00:11:27.140 --> 00:11:33.260
I think that's the right thing to do with something as important as communication from the PSF and Python.

00:11:33.260 --> 00:11:35.960
So box over.

00:11:35.960 --> 00:11:37.820
Cool.

00:11:37.820 --> 00:11:38.400
Thanks for sharing.

00:11:38.400 --> 00:11:41.360
I do think making it welcoming to new people.

00:11:41.360 --> 00:11:47.560
I think what a Python's powers, superpowers, is really that people come and they don't feel intimidated.

00:11:47.560 --> 00:11:48.280
Right?

00:11:48.280 --> 00:11:50.280
They don't consider themselves programmers.

00:11:50.280 --> 00:11:54.720
And they kind of accidentally slip into like, wait, I think I just published a package.

00:11:54.860 --> 00:11:55.700
Does that make me a programmer?

00:11:55.700 --> 00:11:56.980
You know, like six months later.

00:11:56.980 --> 00:12:03.520
And having the community being welcoming, not just the syntax and the tooling.

00:12:03.520 --> 00:12:04.200
Yes.

00:12:04.200 --> 00:12:05.180
It counts, yeah?

00:12:05.180 --> 00:12:05.580
Yeah.

00:12:05.580 --> 00:12:05.680
Yeah.

00:12:05.680 --> 00:12:17.800
I see a lot of times people will, like a lot of PyCon goers, for example, will bring along one of their kids, even though they've been going for a while, bring one of their kids.

00:12:18.020 --> 00:12:24.840
And having the kids be able to go off and learn also and realize that, hey, this is kind of a neat place.

00:12:24.840 --> 00:12:31.620
We're probably getting software engineers from the community just because of this that maybe would have not considered it.

00:12:31.620 --> 00:12:32.400
All right.

00:12:32.400 --> 00:12:33.500
Planting the seed there.

00:12:33.500 --> 00:12:34.840
All right.

00:12:34.840 --> 00:12:37.100
You've got some good news for us, don't you?

00:12:37.100 --> 00:12:37.860
I do.

00:12:37.860 --> 00:12:40.180
Well, I have last week, I have planted a seed.

00:12:40.180 --> 00:12:42.220
And this week it has grown.

00:12:42.720 --> 00:12:50.300
So I was going to cover a new topic, but I want to have more time to digest it than I've had.

00:12:50.300 --> 00:12:53.380
So let's, I want to do a follow-up instead, Brian.

00:12:53.380 --> 00:12:59.260
So remember last week I talked about Uptime Kuma, which is a fancy self-hosted monitoring tool.

00:12:59.480 --> 00:13:05.040
And a lot of folks chimed in over on Mastodon saying, you've been using this for years.

00:13:05.040 --> 00:13:05.840
It's super awesome.

00:13:05.840 --> 00:13:07.000
And so on.

00:13:07.000 --> 00:13:08.820
I said, hey, maybe I'll, maybe I'll play with this.

00:13:08.820 --> 00:13:09.620
That would be cool, right?

00:13:09.620 --> 00:13:10.080
Yeah.

00:13:10.080 --> 00:13:12.180
Well, guess what?

00:13:12.180 --> 00:13:20.760
If you go to Python Bytes and you scroll to the bottom, server status right there, and you click on it, it shows you the Python Bytes operational status.

00:13:20.760 --> 00:13:22.580
What is the status of the website?

00:13:22.580 --> 00:13:28.920
And all these little green dots, each one of these are a sample of either up, down, partially up, partially down.

00:13:28.920 --> 00:13:30.420
I guess those are the same thing.

00:13:30.420 --> 00:13:33.760
But so you could see those sort of like over time.

00:13:33.760 --> 00:13:39.800
I wish I could control how much time this is, but this is basically just the samples, some number of recent samples.

00:13:39.800 --> 00:13:43.600
And I think I've got it set to every minute or two minute it checks.

00:13:43.600 --> 00:13:46.040
And if it goes wrong, it'll send me an email or something like that.

00:13:46.040 --> 00:13:49.120
But you can also see this 100% of time.

00:13:49.120 --> 00:13:50.880
It's basically since I set it up.

00:13:50.900 --> 00:13:53.020
But I think that's 30 days or something.

00:13:53.020 --> 00:13:58.000
I'm not sure exactly the window of that, but that is more, that tracks more of it.

00:13:58.000 --> 00:14:00.360
But anyway, we've got the Python Bytes web.

00:14:00.360 --> 00:14:03.000
You can see its certificate expires in 82 days.

00:14:03.000 --> 00:14:03.520
So that's good.

00:14:03.520 --> 00:14:04.200
Plenty of time.

00:14:04.200 --> 00:14:06.280
It's 90 days by default.

00:14:06.280 --> 00:14:07.280
So quite new.

00:14:07.280 --> 00:14:08.980
The RSS feed, what is it?

00:14:08.980 --> 00:14:09.340
Status.

00:14:09.340 --> 00:14:16.720
The CDN status that actually delivers the MP3s, which is a whole separate bit of infrastructure at bunny.net.

00:14:17.080 --> 00:14:20.280
And the MongoDB database that powers the website.

00:14:20.280 --> 00:14:24.060
So you could see, well, maybe the website's down because the database is down.

00:14:24.060 --> 00:14:26.560
Or, you know, there's just a problem with the website.

00:14:26.560 --> 00:14:27.240
Isn't that cool?

00:14:27.240 --> 00:14:28.300
It is pretty cool.

00:14:28.300 --> 00:14:28.640
Yeah.

00:14:28.920 --> 00:14:37.580
And even more involved because of all the course stuff is if you go to the one for the bottom of Talk Python, you can see you've got all those things I described.

00:14:37.580 --> 00:14:43.980
But also like the mobile APIs, the video CDN, the podcast CDN, the courses website, all those things.

00:14:44.300 --> 00:14:47.280
And all are making me smile with almost 100% of time.

00:14:47.280 --> 00:14:49.120
I think I broke when I set it up.

00:14:49.120 --> 00:14:53.760
I didn't configure the setup right for RSS.

00:14:53.760 --> 00:14:56.000
So it's got a little lingering broken bit.

00:14:56.000 --> 00:14:57.700
But I don't think it's actually had any downtime.

00:14:57.700 --> 00:14:58.580
Okay.

00:14:58.580 --> 00:14:59.000
I was good.

00:14:59.000 --> 00:15:03.620
Actually, I'm pleased to see that because I was just wondering if you're rounding up to the nearest hundred.

00:15:03.620 --> 00:15:04.300
No, no.

00:15:04.300 --> 00:15:06.900
This is like to the it's to the hundredth.

00:15:06.900 --> 00:15:09.800
So it's like 99.86% up.

00:15:09.800 --> 00:15:12.880
But I think it's just I broke it when I was trying to set this thing up.

00:15:12.880 --> 00:15:14.520
So, yeah, incredibly easy.

00:15:14.520 --> 00:15:14.940
Just.

00:15:14.940 --> 00:15:16.260
This is cool.

00:15:16.260 --> 00:15:16.820
Yeah.

00:15:16.820 --> 00:15:17.720
Where's there's.

00:15:17.720 --> 00:15:20.680
So if you go here, basically just Docker run.

00:15:20.680 --> 00:15:22.440
And I've talked about this whole Docker cluster.

00:15:22.440 --> 00:15:23.060
I've had.

00:15:23.060 --> 00:15:26.360
I've migrated everything to all the infrastructure, too.

00:15:26.360 --> 00:15:29.380
And adding this as a thing that runs over there.

00:15:29.380 --> 00:15:30.320
Incredibly easy.

00:15:30.320 --> 00:15:35.860
It took probably 20 minutes to get it set up running as its own bit of infrastructure.

00:15:36.080 --> 00:15:40.360
And now it just chills in its own Docker container watching all the other things around the world.

00:15:40.360 --> 00:15:41.080
So very cool.

00:15:41.080 --> 00:15:41.560
Neat.

00:15:41.560 --> 00:15:42.420
Yeah.

00:15:42.420 --> 00:15:49.080
So if you want to play with that, you can check that out at the bottom of both of the podcast websites in their footers.

00:15:49.080 --> 00:15:50.980
Same for talk by the training as well.

00:15:50.980 --> 00:15:51.600
It's in there as well.

00:15:51.600 --> 00:15:59.040
But basically, you know, just it's just an example of someone putting up uptime Kuma, which so far I'm pretty happy with.

00:15:59.040 --> 00:16:01.780
And if what you see on the status page is a public thing.

00:16:01.840 --> 00:16:08.080
But if you log in, you get a lot more detail of like responses, response time, overtime, and all this.

00:16:08.080 --> 00:16:11.120
So you can kind of use it as a performance monitoring thing as well.

00:16:11.120 --> 00:16:11.800
Oh, cool.

00:16:11.800 --> 00:16:12.340
Yeah.

00:16:12.340 --> 00:16:13.880
I should check that out.

00:16:13.880 --> 00:16:14.480
Indeed.

00:16:14.480 --> 00:16:15.140
Neat.

00:16:15.140 --> 00:16:15.720
All right.

00:16:16.080 --> 00:16:22.020
Well, something else to check out is something upcoming possibly in Python.

00:16:22.020 --> 00:16:23.500
There is a new PEP.

00:16:23.500 --> 00:16:24.940
Well, there's often new PEPs.

00:16:24.940 --> 00:16:27.340
But here's PEP 751.

00:16:27.700 --> 00:16:35.360
This is authored by Brett Cannon and started at the created at the end of July the 24th.

00:16:35.360 --> 00:16:36.700
What is this?

00:16:36.700 --> 00:16:45.440
This is PEP 751, a file format to list Python dependencies for installation reproducibility, which is a bit of a mouthful.

00:16:45.440 --> 00:16:53.620
But to be honest, some of the details in here are a little detail oriented.

00:16:53.620 --> 00:16:58.880
But I like to look the abstract and the motivation make total sense.

00:16:58.880 --> 00:17:02.460
So the idea is, well, I'll just read it.

00:17:02.460 --> 00:17:14.620
For the abstract, this PEP proposes a new file format for dependency specification to enable reproducible installation in a Python environment.

00:17:14.620 --> 00:17:17.740
The format is designed to be human readable and machine generated.

00:17:17.740 --> 00:17:27.920
Installers consuming the file should be able to evaluate each package in question in isolation with no need for dependency resolution at install time, which is interesting.

00:17:27.920 --> 00:17:30.540
So what's the idea?

00:17:30.540 --> 00:17:32.540
I thought we had this already, don't we?

00:17:32.540 --> 00:17:41.640
We have dependency, but we don't have like this whole like lock file stuff is not is not is not a standard.

00:17:41.640 --> 00:17:43.500
It's just implemented several places.

00:17:43.500 --> 00:17:46.840
So there's no under motivation.

00:17:46.840 --> 00:17:52.860
Currently, no standard exists to specify what top level dependencies should be installed into a Python environment.

00:17:52.860 --> 00:18:00.360
And no standard exists to create an immutable record such as a lock file of which dependencies are installed.

00:18:00.360 --> 00:18:04.820
There are at least five well known solutions to the problem.

00:18:04.820 --> 00:18:06.060
We've got pip freeze.

00:18:06.060 --> 00:18:07.180
We have pip-tools.

00:18:07.180 --> 00:18:08.720
UV has a solution.

00:18:08.720 --> 00:18:15.160
Poetry and PDM all have a way to deal with lock files in general, but we don't have a standard for this.

00:18:15.160 --> 00:18:22.640
So I am, I guess, welcoming the idea that that that this will be a standard or something similar to it.

00:18:22.740 --> 00:18:24.500
This is early in the PEP lifecycle.

00:18:24.500 --> 00:18:41.380
But yeah, anyway, since it's a packaging topic, these don't necessarily have to come out at the same rate as Python because pip is not pip and other packaging tools are not on the same year timeframe as as as Python.

00:18:41.600 --> 00:18:45.560
So not sure if if it were when this comes about.

00:18:45.560 --> 00:18:46.980
So yeah, definitely.

00:18:46.980 --> 00:18:47.860
This is cool.

00:18:47.860 --> 00:18:50.140
I actually had this open in another tab.

00:18:50.140 --> 00:18:51.380
I can so I can go close that now.

00:18:51.380 --> 00:18:51.620
Thanks.

00:18:51.620 --> 00:18:54.040
Because I wanted to read about this.

00:18:54.040 --> 00:18:54.800
This is exciting.

00:18:54.800 --> 00:18:56.820
I always love what Brett Cannon's working on.

00:18:56.820 --> 00:19:09.580
Yeah, I think I like the idea of having a lock file that we can use because you every tool you pick, it's got a solution, but it's incompatible with all other tools.

00:19:09.580 --> 00:19:14.040
So some project uses poetry, for example, to manage its dependencies.

00:19:14.040 --> 00:19:15.860
And you just you don't want to use that.

00:19:15.860 --> 00:19:16.240
Yeah.

00:19:16.240 --> 00:19:21.440
When you you want to use something else, like I'm a big fan of UV's implementation of pip-tools.

00:19:21.440 --> 00:19:23.180
Well, that doesn't work with it.

00:19:23.180 --> 00:19:24.100
Or maybe it does.

00:19:24.100 --> 00:19:28.020
But, you know, like you've got to you've got to get it depends on how you're using it.

00:19:28.020 --> 00:19:28.200
Right.

00:19:28.200 --> 00:19:33.660
But having something interoperable between these would be nice to allow you to choose your workflow.

00:19:33.660 --> 00:19:34.240
Yeah.

00:19:34.240 --> 00:19:34.560
Regardless.

00:19:34.560 --> 00:19:39.560
One of the one of the aspects in here under rationale talked.

00:19:39.560 --> 00:19:49.420
about, which I think is pretty cool, is that the file format, the tool that creates the file doesn't necessarily have to be the tool that reads and parses it.

00:19:49.660 --> 00:19:57.980
The important thing around that is that there might be like, yeah, anybody you can anybody can create the lock file with whatever tool you want.

00:19:57.980 --> 00:20:05.280
But but a service like, you know, something like Anaconda or some other service or a packager that pulls everything in.

00:20:05.280 --> 00:20:07.960
Well, you might have their own standard way to do all of that.

00:20:07.960 --> 00:20:13.780
And it doesn't have to be they don't have to support flit and PDM and all sorts of other tools.

00:20:13.780 --> 00:20:16.420
I guess flit isn't one of the on the list, but you know what I mean?

00:20:16.420 --> 00:20:17.280
Yeah.

00:20:17.280 --> 00:20:18.440
Lots of different things.

00:20:18.520 --> 00:20:22.060
So yeah, it'll be interesting to watch this and see where this goes.

00:20:22.060 --> 00:20:30.180
And as always, I appreciate how much Brett thinks about packaging and packaging was.

00:20:30.180 --> 00:20:36.660
I know that there's that that XKCD comic about packaging being horrible in Python, but it's a hard problem.

00:20:36.660 --> 00:20:42.780
And I'm glad that we have bright people like Brett and other folks he knows to work on the hard problem.

00:20:42.780 --> 00:20:43.660
So anyway.

00:20:43.660 --> 00:20:44.660
Indeed.

00:20:44.660 --> 00:20:55.100
I just one thing I hope is that whatever file gets generated out of this, that it's not so noisy that diffs of them over time become hard to read.

00:20:55.100 --> 00:21:11.240
For example, using the tools version, if you flip on hashing, like the hashes take up so much of the of the text that I feel like it's just super hard to read all of a sudden to just like diff a thing and go, OK, what's the what's new?

00:21:11.240 --> 00:21:12.100
What's what's changed?

00:21:12.100 --> 00:21:12.780
What's the same?

00:21:12.780 --> 00:21:18.520
But it's just, you know, yeah, maybe I should turn word wrap off or something on my editor.

00:21:18.520 --> 00:21:22.700
But it's like you're trying to read, OK, this thing is installed because these three things depend on it.

00:21:22.740 --> 00:21:25.260
But there's just blocks of hashes like all over the screen.

00:21:25.260 --> 00:21:25.840
You know what I mean?

00:21:25.840 --> 00:21:32.200
So I did notice that that was actually called out in the rationale around it.

00:21:32.200 --> 00:21:38.200
It said the format is designed so that viewing a diff of the file is easy by centralizing relevant details.

00:21:38.200 --> 00:21:39.500
Oh, awesome.

00:21:39.500 --> 00:21:39.760
Yeah.

00:21:39.760 --> 00:21:42.620
Like maybe it could have all the things and why they're installed there.

00:21:42.620 --> 00:21:44.820
And then it could have the hashes in a separate place.

00:21:44.820 --> 00:21:45.340
Yeah.

00:21:45.340 --> 00:21:47.360
You don't have to look at, you know, that don't mix in.

00:21:47.360 --> 00:21:48.240
Yeah.

00:21:48.240 --> 00:21:48.680
Cool.

00:21:48.680 --> 00:21:49.160
Yeah.

00:21:49.160 --> 00:21:49.660
Yeah, this is great.

00:21:50.080 --> 00:22:00.060
I'm glad that that was a that was that's part of the concern is to make sure because, yeah, that's I might not read it maybe theoretically human readable like XML.

00:22:00.060 --> 00:22:03.420
But the only time I'm actually reading XML is in a diff.

00:22:03.420 --> 00:22:04.880
So, yeah.

00:22:04.880 --> 00:22:05.600
Anyway.

00:22:05.600 --> 00:22:06.080
Cool.

00:22:06.080 --> 00:22:07.820
Well, that's our items.

00:22:07.820 --> 00:22:08.980
Do you have any extras for us?

00:22:08.980 --> 00:22:14.380
I do feel a little extra today and I hinted at this some of the stuff I'm going to cover here.

00:22:14.380 --> 00:22:18.920
So, first of all, mypy has a new release and there's some interesting things to call out, Brian.

00:22:18.920 --> 00:22:21.020
mypy 1.11.

00:22:21.020 --> 00:22:25.760
So, if you don't know, mypy is a faux compiler for Python, I will say.

00:22:26.060 --> 00:22:32.920
It's a type checker, but what it does is basically go through your code as if it was a compiler and make sure that everything would hang together.

00:22:32.920 --> 00:22:37.800
Like here, you say this thing is an integer and you're passing it into a function that can take an optional integer.

00:22:37.800 --> 00:22:38.500
Right.

00:22:38.500 --> 00:22:39.880
Not an optional string.

00:22:39.880 --> 00:22:43.220
And it would be an error and it would tell you that it's not okay if it weren't.

00:22:43.220 --> 00:22:43.460
Right.

00:22:43.460 --> 00:22:45.700
Just like, I guess, like a compiler kind of would.

00:22:46.000 --> 00:22:47.180
So, you can get that.

00:22:47.180 --> 00:22:47.860
That's very cool.

00:22:47.860 --> 00:22:55.380
It has support for the new 312 simpler generics, right?

00:22:55.380 --> 00:23:00.380
Like class C of T, just a bracket of T, and then you have T goes to et cetera, et cetera.

00:23:00.380 --> 00:23:01.960
Very nice there.

00:23:01.960 --> 00:23:05.640
The one I wanted to call out, though, is functools.partial.

00:23:05.640 --> 00:23:08.280
You talked about functools, no, iter tools last week.

00:23:08.280 --> 00:23:09.240
Now, how about functools?

00:23:09.240 --> 00:23:10.920
Have you heard of functools.partial?

00:23:10.920 --> 00:23:12.100
Yeah, I've used them.

00:23:12.100 --> 00:23:14.620
Partials are fun.

00:23:15.220 --> 00:23:16.160
I've never used them.

00:23:16.160 --> 00:23:22.160
So, in Python, we can have default values like f of a and b, f of a comma b, right?

00:23:22.160 --> 00:23:26.180
You could say b equals one, so you don't have to specify the value.

00:23:26.180 --> 00:23:28.600
But it could be another value, right?

00:23:28.600 --> 00:23:33.060
It could be if somebody wanted to, they could override that, right?

00:23:33.060 --> 00:23:36.720
You can't say here's a thing with a default value but never set it.

00:23:36.720 --> 00:23:41.580
So, you can say partial of that function and specify the second parameter.

00:23:41.580 --> 00:23:42.200
Yeah.

00:23:42.200 --> 00:23:44.260
Or whichever parameter you want, right?

00:23:44.440 --> 00:23:46.320
And it'll pass that in.

00:23:46.320 --> 00:23:48.720
But now, mypy checks those.

00:23:48.720 --> 00:23:57.380
We also get better type inference, better type hinting and expressions, and a bunch of other stuff.

00:23:57.380 --> 00:23:58.420
So, it's a pretty big release.

00:23:58.420 --> 00:24:00.120
People can check that out if they want.

00:24:00.120 --> 00:24:04.460
The thing that I hinted at the beginning is fast HTML.

00:24:05.020 --> 00:24:07.100
I know there's been a lot of talk about this, right?

00:24:07.100 --> 00:24:07.540
Yeah.

00:24:07.540 --> 00:24:16.460
So, fast HTML is a, they describe themselves as a modern web application, building a framework for modern web applications in pure Python.

00:24:16.460 --> 00:24:28.760
Think kind of view components a little bit, but a flash style programming model for the server side with a lot of those components actually written in Python, which is pretty interesting.

00:24:28.760 --> 00:24:30.820
You can create them, make reusable things.

00:24:30.820 --> 00:24:40.160
And it's, it's interaction and its dynamic aspects are based on HTMX, which is one of my very favorite JavaScript frameworks as well.

00:24:40.640 --> 00:24:56.260
So, if you were thinking of doing stuff like Streamlit or Gradio or some of these dashboard types of interactions, and you're like, I need to go beyond what is capable of this and not just put dashboards, but more interactive elements and sort of more of a web app, but not a ton more.

00:24:56.520 --> 00:25:01.180
Then, this is a framework that it's upper bound is much higher where you can keep going and going.

00:25:01.180 --> 00:25:06.640
So, you can definitely create some, some cool apps real quickly with not very much code.

00:25:06.640 --> 00:25:10.220
So, I'm going to play with this a little bit more and I think I'll talk more about it next week.

00:25:10.220 --> 00:25:11.700
I'm looking forward to that.

00:25:11.700 --> 00:25:13.500
I was going to bring this up as well.

00:25:13.500 --> 00:25:14.360
Yeah.

00:25:14.360 --> 00:25:15.540
Looks interesting.

00:25:15.540 --> 00:25:17.260
We could share it next week if we want.

00:25:17.260 --> 00:25:18.600
All right.

00:25:18.600 --> 00:25:36.620
And then also, we're coming up on last chance to go be part of the Python and web and database course in Castle in Italy, the Python Zero to Hero 2024 event that I'm doing in a luxurious Tuscan villa.

00:25:36.620 --> 00:25:38.520
And hopefully, you can be there.

00:25:38.520 --> 00:25:47.000
But if you've been on the fence and thinking, maybe I want to go, but not sure, I'll find, you know, on your to-do list to think more about it.

00:25:47.060 --> 00:25:51.600
Well, you got to think soon because we're going to close enrollment pretty shortly.

00:25:51.600 --> 00:25:54.440
So, please, if you want to go, jump on that.

00:25:54.440 --> 00:25:55.840
If not, that's totally good too.

00:25:55.840 --> 00:25:57.800
And that's it for my extras.

00:25:57.800 --> 00:25:58.800
All right.

00:25:58.800 --> 00:26:06.300
I've got one extra of pretty much what I've been doing in my free time a lot is working on the new course, Hello pytest.

00:26:06.300 --> 00:26:10.180
And I really want it to be accessible to everybody.

00:26:10.180 --> 00:26:12.400
So, I do have a landing page now.

00:26:12.540 --> 00:26:18.140
If you go to courses.pythontest.com, you'll see a link to it.

00:26:18.140 --> 00:26:21.040
There is, I don't know.

00:26:21.040 --> 00:26:25.200
I haven't decided what the final cost pricing structure is going to be.

00:26:25.200 --> 00:26:30.520
But I'd like to start it at $10 because I'd really like it to be something that people can take a look at.

00:26:30.520 --> 00:26:34.180
So, the idea around it is not to teach you all of pytest.

00:26:34.180 --> 00:26:36.580
It is to get people started with it.

00:26:36.580 --> 00:26:40.240
So, to cover some of the basics like parameterization and fixtures and stuff.

00:26:41.140 --> 00:26:47.900
And the idea being, I would love to have something to hand out to teammates so that everybody can get up to speed.

00:26:47.900 --> 00:26:52.000
So, the one pytest expert on the team doesn't get questions all day long.

00:26:52.000 --> 00:26:54.240
That's where I'm trying to fill this in.

00:26:54.240 --> 00:26:56.540
So, that's still up.

00:26:56.540 --> 00:27:02.360
In order to do a pricing page, I had to pick a date where I was going to deliver it by.

00:27:03.080 --> 00:27:07.320
I picked the 19th, which is, what, 12 days from now?

00:27:07.320 --> 00:27:11.600
I think it's going to be done before then, but that's my deadline.

00:27:11.600 --> 00:27:12.740
So, working on that.

00:27:12.740 --> 00:27:13.620
Awesome. Congrats.

00:27:13.620 --> 00:27:22.340
You know, people, if you look around online courses, like especially Udemy, it's an arms race to have the most content.

00:27:22.340 --> 00:27:26.840
We have the super mega course that's 36 hours of content.

00:27:26.840 --> 00:27:29.960
You know, and it's like, and it's only 50 bucks.

00:27:29.960 --> 00:27:31.580
That one over there, that's 50 bucks.

00:27:31.580 --> 00:27:32.640
It's only five hours.

00:27:32.720 --> 00:27:34.760
That is nothing compared to this.

00:27:34.760 --> 00:27:40.220
That's an additional 31 hours of your time you've got to put into it, right?

00:27:40.220 --> 00:27:44.240
And not everybody has 36 hours of interest in learning pytest.

00:27:44.240 --> 00:27:46.180
They just need enough to get going and get started.

00:27:46.180 --> 00:27:48.860
And so, I think there's real value in having a concise thing.

00:27:48.860 --> 00:27:49.500
Yeah.

00:27:49.500 --> 00:27:51.200
Well, I was surprised.

00:27:51.200 --> 00:28:00.240
I was talking to a team that was considering my larger course, and they decided not to because it was because of them.

00:28:00.240 --> 00:28:05.480
They were like, oh, I really want somebody to be able to do this in half a day or less.

00:28:05.480 --> 00:28:06.660
And I'm like, oh, okay.

00:28:06.660 --> 00:28:09.620
So, there's real value in half a day or less courses.

00:28:09.620 --> 00:28:10.580
So, I think.

00:28:10.580 --> 00:28:11.280
I agree.

00:28:11.280 --> 00:28:13.760
I don't want to spend 36 hours learning anything.

00:28:13.960 --> 00:28:17.620
I mean, over the course of the history of working with a tool, sure.

00:28:17.620 --> 00:28:19.560
But over, like, right away?

00:28:19.560 --> 00:28:19.980
No.

00:28:19.980 --> 00:28:20.900
I'm not going to do that.

00:28:20.900 --> 00:28:21.500
Yeah.

00:28:21.500 --> 00:28:21.920
Cool.

00:28:21.920 --> 00:28:22.620
Exactly.

00:28:22.620 --> 00:28:23.460
All right.

00:28:23.460 --> 00:28:25.560
Let's want to joke about open source a little bit.

00:28:25.560 --> 00:28:26.160
Yes.

00:28:26.680 --> 00:28:27.220
All right.

00:28:27.220 --> 00:28:32.940
So, this joke is called open, exclamation mark, AI, exclamation mark.

00:28:32.940 --> 00:28:35.960
So, it has this sort of meme of two people talking to each other.

00:28:35.960 --> 00:28:38.640
It says, hi, my name is open AI.

00:28:38.640 --> 00:28:41.460
So, you're open source, right?

00:28:41.460 --> 00:28:42.620
Right?

00:28:44.420 --> 00:28:44.900
No.

00:28:44.900 --> 00:28:46.060
Yeah.

00:28:46.060 --> 00:28:46.500
Not really.

00:28:46.500 --> 00:28:46.940
Hmm.

00:28:46.940 --> 00:28:48.440
It should be closed AI.

00:28:48.440 --> 00:28:49.320
Yeah.

00:28:49.320 --> 00:28:54.140
At the bottom, it does say, okay, open AI is not open source.

00:28:54.140 --> 00:28:57.660
The open means that AI is open to receive our data.

00:28:57.660 --> 00:28:58.320
Okay.

00:28:58.320 --> 00:28:58.900
Very well.

00:28:58.900 --> 00:28:59.420
Oh.

00:28:59.420 --> 00:28:59.820
Very well.

00:28:59.820 --> 00:29:00.120
Yeah.

00:29:00.120 --> 00:29:00.580
Okay.

00:29:00.580 --> 00:29:00.960
Yeah.

00:29:00.960 --> 00:29:03.700
Bart agrees with us.

00:29:03.700 --> 00:29:05.020
Ain't nobody got time for that.

00:29:05.020 --> 00:29:08.160
For long courses, not open AI.

00:29:08.160 --> 00:29:08.780
Yeah.

00:29:08.780 --> 00:29:09.520
All right.

00:29:09.520 --> 00:29:09.960
Cool.

00:29:09.960 --> 00:29:13.620
Well, good, again, to talk with you, as always, this week.

00:29:14.000 --> 00:29:18.520
Thank you, everybody, for joining in on the live stream and everybody else for listening.

00:29:18.520 --> 00:29:22.140
And I hope you have a wonderful rest of your summer or next week.

00:29:22.140 --> 00:29:23.480
So, talk to you next week.

