WEBVTT

00:00:00.000 --> 00:00:02.280
Hello and welcome to Python Bytes,


00:00:02.280 --> 00:00:04.040
where we deliver Python news and headlines


00:00:04.040 --> 00:00:05.720
directly to your earbuds.


00:00:05.720 --> 00:00:10.720
This is episode 340, recorded June 13th, 2023.


00:00:10.720 --> 00:00:12.120
I'm Michael Kennedy.


00:00:12.120 --> 00:00:13.240
- And I'm Brian Okken.


00:00:13.240 --> 00:00:15.280
- And this episode is brought to you by InfluxDB


00:00:15.280 --> 00:00:16.960
from InfluxData.


00:00:16.960 --> 00:00:19.080
Awesome, real-time DB.


00:00:19.080 --> 00:00:20.600
So time series database.


00:00:20.600 --> 00:00:23.120
So we're excited to tell you about that later.


00:00:23.120 --> 00:00:24.240
If you want to connect with us,


00:00:24.240 --> 00:00:26.640
you can find us all on fostadon.org,


00:00:26.640 --> 00:00:29.240
@mkennedy, @brianokken and @pythonbytes.


00:00:29.240 --> 00:00:32.360
Join us for the live show at pythonbytes.fm/live.


00:00:32.360 --> 00:00:34.560
If you want to be part of the live stream


00:00:34.560 --> 00:00:35.920
and be in the audience,


00:00:35.920 --> 00:00:38.680
all the older video versions are there as well.


00:00:38.680 --> 00:00:41.960
And Brian, before we jump into your first topic,


00:00:41.960 --> 00:00:46.000
I've got some ideas, a request from the audience.


00:00:46.000 --> 00:00:46.840
- Okay.


00:00:46.840 --> 00:00:51.840
- Okay, so we are going to do an Ask Me Anything episode.


00:00:51.840 --> 00:00:54.280
And really that should be Ask Us Anything,


00:00:54.280 --> 00:00:57.480
but the A-U-A is not typically how people announce it.


00:00:57.480 --> 00:00:59.480
It's the AMA, not AWA.


00:00:59.480 --> 00:01:05.160
So following convention standard acronyms there,


00:01:05.160 --> 00:01:07.640
ask us anything.


00:01:07.640 --> 00:01:09.080
I put together a Google form.


00:01:09.080 --> 00:01:10.200
It is super short.


00:01:10.200 --> 00:01:11.120
It says, what is your name?


00:01:11.120 --> 00:01:12.360
What is your question?


00:01:12.360 --> 00:01:13.600
And if you want, there's a few other fields


00:01:13.600 --> 00:01:16.720
for like second question, you know, and things like that,


00:01:16.720 --> 00:01:17.740
but they're optional.


00:01:17.740 --> 00:01:20.440
So if you're listening and you've ever wondered,


00:01:20.440 --> 00:01:24.760
like, I wonder if Brian has a thought on an opinion on this.


00:01:24.760 --> 00:01:26.600
Does he have an opinion on pytest plugins?


00:01:26.600 --> 00:01:27.560
I don't know, maybe.


00:01:27.560 --> 00:01:30.760
Does Michael have a thought on podcasts or whatever?


00:01:30.760 --> 00:01:33.280
You know, please take the time and put that in there


00:01:33.280 --> 00:01:36.000
and we'll give you credit on the show as well.


00:01:36.000 --> 00:01:37.440
If you don't wanna have your name in there,


00:01:37.440 --> 00:01:39.640
just put anonymous or something.


00:01:39.640 --> 00:01:41.440
So everyone check that out.


00:01:41.440 --> 00:01:46.440
It is at, I created a short URL for it, let's see.


00:01:46.440 --> 00:01:49.920
Pythonbytes.fm/ama2023.


00:01:49.920 --> 00:01:53.040
So people can just go over there and check it out.


00:01:53.040 --> 00:01:54.720
So that's gonna be a lot of fun, Brian.


00:01:54.720 --> 00:01:56.280
I don't know when we're scheduling it.


00:01:56.280 --> 00:01:59.140
I probably pretty much when we get enough questions.


00:01:59.140 --> 00:02:00.820
- And that link will be in the show notes, right?


00:02:00.820 --> 00:02:01.660
- Absolutely.


00:02:01.660 --> 00:02:02.540
Let's talk GUIs.


00:02:02.540 --> 00:02:04.660
We haven't been on a GUI rant for a while.


00:02:04.660 --> 00:02:07.300
- Yeah, I don't know if we've ever talked about GUIs.


00:02:07.300 --> 00:02:08.660
I think maybe we have.


00:02:08.660 --> 00:02:09.580
(laughing)


00:02:09.580 --> 00:02:10.400
- Perhaps.


00:02:10.400 --> 00:02:11.240
- It's been a while.


00:02:11.240 --> 00:02:16.540
So I ran across this website called Python GUIs,


00:02:16.540 --> 00:02:19.940
and it's like a whole website dedicated to Python GUIs.


00:02:19.940 --> 00:02:24.940
And it's from a fellow named Martin Fitzpatrick.


00:02:25.460 --> 00:02:28.220
He does consulting and some other stuff.


00:02:28.220 --> 00:02:29.760
And this is pretty kind of cool.


00:02:29.760 --> 00:02:31.680
This is a fairly comprehensive.


00:02:31.680 --> 00:02:36.580
He has tutorials and references to books


00:02:36.580 --> 00:02:37.420
and everything like that,


00:02:37.420 --> 00:02:39.560
but it's kind of a neat walkthrough,


00:02:39.560 --> 00:02:41.220
just the website itself.


00:02:41.220 --> 00:02:43.320
Like for instance, where do I begin?


00:02:43.320 --> 00:02:47.760
His recommendation is doing PyQt6 to start with,


00:02:47.760 --> 00:02:49.500
if you don't have a preference.


00:02:49.500 --> 00:02:53.220
However, so let's like walk through a couple.


00:02:53.220 --> 00:02:55.140
So if you just kind of walk through,


00:02:55.140 --> 00:02:58.420
he talks about what you should look about,


00:02:58.420 --> 00:03:00.980
learn what tutorials are available.


00:03:00.980 --> 00:03:04.900
And then it says continue.


00:03:04.900 --> 00:03:07.700
So if you continue on with the PyQt 6,


00:03:07.700 --> 00:03:10.340
you just sort of walk through a tutorial


00:03:10.340 --> 00:03:13.900
around how to get Qt Designer up and everything.


00:03:13.900 --> 00:03:16.540
But there's a lot more than just Qt here.


00:03:16.540 --> 00:03:21.540
He's got tutorials on PyQt 6, Qt 5, PySide, TkAndr.


00:03:23.980 --> 00:03:26.940
There's even a tutorial, most recent tutorial I saw


00:03:26.940 --> 00:03:31.420
was getting started with Kivy for GUI development.


00:03:31.420 --> 00:03:34.740
And it's a pretty lengthy getting started with Kivy thing.


00:03:34.740 --> 00:03:39.180
So, and it covers Mac, Windows, Linux.


00:03:39.180 --> 00:03:41.660
So it's pretty comprehensive, it's kind of nice.


00:03:41.660 --> 00:03:43.560
- Yeah, this looks really nice.


00:03:43.560 --> 00:03:45.620
I think choosing, I always feel like


00:03:45.620 --> 00:03:46.980
there's this paradox of choice.


00:03:46.980 --> 00:03:49.300
And when I'm thinking about Python GUIs


00:03:49.300 --> 00:03:51.580
and there's like, well, there's no real clear answer


00:03:51.580 --> 00:03:53.700
and they're all kind of got their own oddities


00:03:53.700 --> 00:03:55.780
into them or their own restrictions.


00:03:55.780 --> 00:03:57.900
But this is really cool to see them put all side by


00:03:57.900 --> 00:04:00.920
side and then different tutorials helping you get started.


00:04:00.920 --> 00:04:04.300
>> Yeah. I like it.


00:04:04.300 --> 00:04:07.220
I think a lot of people start with Tkinter.


00:04:07.220 --> 00:04:11.940
It's not Tk in there, it's Tinker.


00:04:11.940 --> 00:04:14.140
I forget what they call it with Python.


00:04:14.140 --> 00:04:18.420
But I don't think that's a great place to start.


00:04:18.420 --> 00:04:20.100
If you want something to look really nice,


00:04:20.100 --> 00:04:22.820
if you're going to support it,


00:04:22.820 --> 00:04:24.860
I think I kind of agree with them.


00:04:24.860 --> 00:04:28.880
Maybe starting with Qt, or Qt, sorry.


00:04:28.880 --> 00:04:33.880
I grew up using Qt without knowing how to pronounce it.


00:04:33.880 --> 00:04:38.660
People do pronounce it Qt, but yeah, anyway.


00:04:38.660 --> 00:04:40.740
So if you want to learn about Python GUIs,


00:04:40.740 --> 00:04:43.040
maybe check out pythonguis.com.


00:04:43.040 --> 00:04:45.400
So what do you got for us?


00:04:45.400 --> 00:04:46.640
Oh, you're muted.


00:04:46.640 --> 00:04:49.860
- Before we move on, Brian,


00:04:49.860 --> 00:04:51.780
I do want to also just sort of second that,


00:04:51.780 --> 00:04:56.980
I think Qt, those look like native applications that belong on your platform, right?


00:04:56.980 --> 00:05:03.140
When you're not like, "Oh, clearly some funky cross-platform API is what we're working with here."


00:05:03.140 --> 00:05:05.300
Right now, this stuff looks pretty solid, right?


00:05:05.300 --> 00:05:05.860
Yeah.


00:05:05.860 --> 00:05:07.380
But it is TK-Enter.


00:05:07.380 --> 00:05:09.220
Why do we call it TK-Enter?


00:05:09.220 --> 00:05:10.420
Or Tkinter?


00:05:10.420 --> 00:05:11.140
I don't know.


00:05:11.140 --> 00:05:12.180
Because it's not TK.


00:05:12.180 --> 00:05:14.100
Oh, because it's from the TK toolkit.


00:05:14.100 --> 00:05:14.820
Got it.


00:05:14.820 --> 00:05:16.020
Ah, makes sense.


00:05:16.020 --> 00:05:16.340
Got it.


00:05:16.340 --> 00:05:16.900
That makes sense.


00:05:16.900 --> 00:05:17.780
All right.


00:05:17.780 --> 00:05:20.900
I have some bleed for all the data scientists out there.


00:05:20.900 --> 00:05:21.460
How about that?


00:05:21.460 --> 00:05:22.620
>> Okay.


00:05:22.620 --> 00:05:27.060
>> JupyterLab, which is the more capable,


00:05:27.060 --> 00:05:30.960
the more IDE-like experience for Jupyter Notebooks,


00:05:30.960 --> 00:05:34.360
4.0 is here and it looks like a pretty mega release.


00:05:34.360 --> 00:05:37.520
They say, they being Jason Weil,


00:05:37.520 --> 00:05:40.120
say the next major release of


00:05:40.120 --> 00:05:43.980
the full feature development environment for Jupyter is here.


00:05:43.980 --> 00:05:48.560
It is available for install right off PyPI in Conda Forge.


00:05:48.560 --> 00:05:50.100
If you have it, all you got to do is


00:05:50.100 --> 00:05:55.540
pip install --upgrade jupyterlab or conda install --conda-forge-jupyterlab


00:05:55.540 --> 00:05:58.180
and it'll just upgrade in place for you.


00:05:58.180 --> 00:05:59.100
So that's pretty excellent.


00:05:59.100 --> 00:06:02.180
That's low maintenance, low effort upgrade.


00:06:02.180 --> 00:06:05.440
I suspect there's a lot of stuff happening when you run those commands.


00:06:05.440 --> 00:06:08.380
One of the big deals is JupyterLab is now faster.


00:06:08.380 --> 00:06:11.940
There's a bunch of different ways in which they made that happening.


00:06:11.940 --> 00:06:14.100
They made that happen, or that's happening.


00:06:14.100 --> 00:06:16.280
Notebook windowing is one of them,


00:06:16.280 --> 00:06:18.380
where for a long notebook,


00:06:18.380 --> 00:06:20.880
instead of trying to process and load the whole thing,


00:06:20.880 --> 00:06:25.240
it'll just show the web browser viewport in terms of rendering,


00:06:25.240 --> 00:06:27.560
which will make some of the rendering faster.


00:06:27.560 --> 00:06:30.600
Got CSS rule optimizations,


00:06:30.600 --> 00:06:35.040
CodeMirror, CodeMirror is the text editor of the cell.


00:06:35.040 --> 00:06:38.480
So CodeMirror 6 is out and MathJax 2 as well.


00:06:38.480 --> 00:06:41.860
So if you're working with large notebooks,


00:06:41.860 --> 00:06:45.720
it should be much more efficient than JupyterLab 3, they say.


00:06:45.720 --> 00:06:46.920
- Awesome. - That's encouraging, right?


00:06:46.920 --> 00:06:47.880
- Yeah. - Yeah.


00:06:47.880 --> 00:06:49.420
- Yeah, so cool.


00:06:49.420 --> 00:06:51.080
Let's see what else.


00:06:51.080 --> 00:06:53.220
There's additional performance improvements,


00:06:53.220 --> 00:06:54.960
but you have to turn these on.


00:06:54.960 --> 00:06:57.760
So you can get faster tab switching


00:06:57.760 --> 00:06:59.800
on Chromium-based browsers,


00:06:59.800 --> 00:07:01.880
which is unfortunately almost all of them,


00:07:01.880 --> 00:07:04.080
but that's the world we live in.


00:07:04.080 --> 00:07:08.080
So you can do, but you gotta go settings,


00:07:08.080 --> 00:07:09.400
and JupyterLab Shell,


00:07:09.400 --> 00:07:12.400
switch hidden mode to content visibility,


00:07:12.400 --> 00:07:15.280
and for even more better performance


00:07:15.280 --> 00:07:17.160
with long notebooks, you're going to go settings,


00:07:17.160 --> 00:07:20.760
notebooks, switch on a windowing mode to full.


00:07:20.760 --> 00:07:22.360
So those are all options.


00:07:22.360 --> 00:07:24.280
I told you there's a new CodeMirror.


00:07:24.280 --> 00:07:27.640
That's the text editor for cells and file editors,


00:07:27.640 --> 00:07:29.480
and it's upgraded to CodeMirror 6,


00:07:29.480 --> 00:07:32.680
which has a bunch of accessibility and performance improvements.


00:07:32.680 --> 00:07:35.400
So people can check that out. Let's change there.


00:07:35.400 --> 00:07:37.840
Also, JupyterLab, I'm not sure I knew this,


00:07:37.840 --> 00:07:39.480
comes with a real-time collaboration,


00:07:39.480 --> 00:07:42.680
aka Google Docs style of collaboration.


00:07:42.680 --> 00:07:44.880
>> Okay. I didn't know that they do that.


00:07:44.880 --> 00:07:48.080
I did not either. I knew there were some notebook platforms that did,


00:07:48.080 --> 00:07:49.680
but I didn't realize JupyterLab did.


00:07:49.680 --> 00:07:51.340
So they moved this RTC,


00:07:51.340 --> 00:07:53.980
real-time collaboration to a separate package,


00:07:53.980 --> 00:07:56.800
JupyterCollaboration, and that's available.


00:07:56.800 --> 00:07:58.440
It's its own thing,


00:07:58.440 --> 00:08:01.840
includes support for multiple cursors and selections,


00:08:01.840 --> 00:08:03.880
new shared types.


00:08:03.880 --> 00:08:08.720
There's also a new extension manager for JupyterLab extensions,


00:08:08.720 --> 00:08:12.040
improved document search, UI enhancements,


00:08:12.040 --> 00:08:15.080
like more hotkeys and other styles,


00:08:15.080 --> 00:08:18.280
accessibility improvements, DevTool updates,


00:08:18.280 --> 00:08:20.240
like how they build JupyterLab,


00:08:20.240 --> 00:08:23.200
so TypeScript v5 and React v18.


00:08:23.200 --> 00:08:24.400
Most people won't care about that,


00:08:24.400 --> 00:08:26.660
but if you work on or try to customize


00:08:26.660 --> 00:08:29.000
the JupyterLab itself then


00:08:29.000 --> 00:08:31.640
you create an extension or something, you probably care.


00:08:31.640 --> 00:08:36.320
Finally, more than 100 bugs have been addressed and resolved,


00:08:36.320 --> 00:08:38.240
making it more stable and faster.


00:08:38.240 --> 00:08:40.120
So that sounds like a pretty big deal, doesn't it?


00:08:40.120 --> 00:08:47.340
>> Yeah. Yes. I think addressed means fixed and not just said hello to.


00:08:47.340 --> 00:08:49.400
>> Exactly. Hello, bug.


00:08:49.400 --> 00:08:51.040
How shall I address you?


00:08:51.040 --> 00:08:54.240
You shall call me a CVE, remote code execution.


00:08:54.240 --> 00:08:57.220
Hey, nice to meet you. Probably not like that, right?


00:08:57.220 --> 00:08:59.120
>> Yeah. That's cool.


00:08:59.120 --> 00:09:03.440
>> Yeah, that is cool. Getting some thumbs up from the audience as well.


00:09:03.440 --> 00:09:05.040
Now, before we move on,


00:09:05.040 --> 00:09:09.560
I want to just talk about our sponsor real quick, InfluxDB.


00:09:09.560 --> 00:09:13.720
So thanks to Influx for supporting the show.


00:09:13.720 --> 00:09:15.900
So this episode of Python Bytes is brought to you


00:09:15.900 --> 00:09:19.520
by Influx Data, the makers of InfluxDB.


00:09:19.520 --> 00:09:21.840
InfluxDB is the database purpose built


00:09:21.840 --> 00:09:23.640
for handling time series data


00:09:23.640 --> 00:09:26.520
at a massive scale for real-time analytics.


00:09:26.520 --> 00:09:28.880
And developers can ingest, store, and analyze


00:09:28.880 --> 00:09:31.240
all types of time series data, metrics, events,


00:09:31.240 --> 00:09:33.360
traces in a single platform.


00:09:33.360 --> 00:09:35.460
So how would boundless cardinality


00:09:35.460 --> 00:09:37.120
and lightning-fast SQL queries impact


00:09:37.120 --> 00:09:39.440
the way you develop real-time applications?


00:09:39.440 --> 00:09:40.600
Check out Influx.


00:09:40.600 --> 00:09:44.720
InfluxDB processes a large time series data sets


00:09:44.720 --> 00:09:48.200
and provides a low latency SQL queries,


00:09:48.200 --> 00:09:50.080
making it the go-to choice for developers


00:09:50.080 --> 00:09:52.760
building real-time apps and seeking crucial insights.


00:09:52.760 --> 00:09:54.200
For developer efficiency,


00:09:54.200 --> 00:09:56.920
InfluxDB helps you create IoT, analytics,


00:09:56.920 --> 00:09:59.680
and cloud applications using timestamp data


00:09:59.680 --> 00:10:01.260
rapidly and at scale.


00:10:01.260 --> 00:10:03.520
It's designed to ingest billions of data points


00:10:03.520 --> 00:10:04.360
from real time.


00:10:04.360 --> 00:10:06.840
In real time with unlimited cardinality,


00:10:06.840 --> 00:10:09.080
InfluxDB streamlines building ones


00:10:09.080 --> 00:10:10.800
and deploying across the various platforms


00:10:10.800 --> 00:10:13.600
and environments from the edge on-premises


00:10:13.600 --> 00:10:14.760
and to the cloud.


00:10:14.760 --> 00:10:19.140
So try them for free at pythonbytes.fm/influxdb.


00:10:19.140 --> 00:10:21.140
The link is in your podcast player show notes.


00:10:21.140 --> 00:10:25.000
Thank you to InfluxData for supporting the show.


00:10:25.000 --> 00:10:25.940
- Yeah, thank you.


00:10:25.940 --> 00:10:30.040
I would like to talk about data,


00:10:30.040 --> 00:10:33.640
but not databases, but data types.


00:10:33.640 --> 00:10:37.180
So this is kind of early to talk about,


00:10:37.180 --> 00:10:41.000
but hey, Brett Cannon can write about it on his blog.


00:10:41.000 --> 00:10:43.340
I think it's fair game to talk about.


00:10:43.340 --> 00:10:48.340
So Brett Cannon had a proposal for a new kind of data type


00:10:48.340 --> 00:10:52.240
in Python called a struct.


00:10:52.240 --> 00:10:53.720
Structs are new things.


00:10:53.720 --> 00:10:56.480
We've lived with them in C for a long time


00:10:56.480 --> 00:10:58.920
and other languages have other types.


00:10:58.920 --> 00:11:02.200
I wanna take a slight detour


00:11:02.200 --> 00:11:06.940
before I talk about the Struct proposal from Brett.


00:11:06.940 --> 00:11:09.600
And by proposal, I don't mean it's a pep.


00:11:09.600 --> 00:11:10.760
I don't think it's a pep yet.


00:11:10.760 --> 00:11:13.440
I think it's just an idea that he had,


00:11:13.440 --> 00:11:15.220
but I think it's a cool idea.


00:11:15.220 --> 00:11:16.560
But one of the things he talked about


00:11:16.560 --> 00:11:18.440
was algebraic data types.


00:11:18.440 --> 00:11:21.840
And I gotta admit, I haven't run across that term,


00:11:21.840 --> 00:11:25.360
algebraic data types, before like a week ago or so.


00:11:25.360 --> 00:11:27.800
And then I've read two articles referring to it.


00:11:27.800 --> 00:11:31.520
I'm used to ADTs being abstract data types,


00:11:31.520 --> 00:11:36.320
which are user-defined data types.


00:11:36.320 --> 00:11:40.440
I don't know what the abstract means, but anyway.


00:11:40.440 --> 00:11:44.320
Algebraic ones are things that you can compose.


00:11:44.320 --> 00:11:45.960
They're like abstract data types,


00:11:45.960 --> 00:11:52.040
but the things that you can compose like a list is a nil,


00:11:52.040 --> 00:11:53.600
plus I don't know what that means.


00:11:53.600 --> 00:11:59.600
But anyway, or trees either is composed of empty or leaf or node or something.


00:11:59.600 --> 00:12:04.300
I don't, I'm still not quite sure how this makes anything to do with it.


00:12:04.300 --> 00:12:06.260
That's our side diversion anyway.


00:12:06.260 --> 00:12:10.060
So, so what, what does this look like?


00:12:10.060 --> 00:12:11.780
And it's kind of a neat idea.


00:12:11.780 --> 00:12:18.300
So jumping down to an example, with a struct, you could just say, a, a


00:12:18.300 --> 00:12:24.140
point is a struct that takes X and Y and they're both integers say, and they


00:12:24.140 --> 00:12:29.060
have to be named or either positional or named, but they cannot be unnamed only.


00:12:29.260 --> 00:12:36.500
I don't know why, but and then it'd be kind of like named classes or named tuples to access it.


00:12:36.500 --> 00:12:38.620
So you just access the stuff.


00:12:38.620 --> 00:12:46.060
So you just declare this point, it takes x and y, and then you can get at it with like, say, p.x or p.y.


00:12:46.060 --> 00:12:47.140
And that's it, really.


00:12:47.140 --> 00:12:49.500
So what is this?


00:12:49.500 --> 00:12:50.540
Why would we need this?


00:12:50.540 --> 00:12:54.380
And I think it'd be really pretty cool to have something that simple.


00:12:54.380 --> 00:12:59.380
and these structs would be, they'd not allow inheritance.


00:12:59.380 --> 00:13:02.580
They would have no methods currently.


00:13:02.580 --> 00:13:06.060
No methods, no inheritance, and they're not mutable.


00:13:06.060 --> 00:13:07.900
So you can't change the thing in it.


00:13:07.900 --> 00:13:08.740
Why is that important?


00:13:08.740 --> 00:13:11.720
Well, then you can use these things for keys


00:13:11.720 --> 00:13:13.680
and dictionaries and things like that.


00:13:13.680 --> 00:13:15.660
And I just think this would be kind of cool


00:13:15.660 --> 00:13:19.540
because I still, with data types, even with data types,


00:13:19.540 --> 00:13:23.180
and all the other goodies and adders


00:13:23.180 --> 00:13:25.640
and other goodies we have within Python.


00:13:25.640 --> 00:13:27.460
I still use named tuple a lot,


00:13:27.460 --> 00:13:30.400
and I would totally use this for a lot of stuff,


00:13:30.400 --> 00:13:32.640
and make it, especially if it was super fast.


00:13:32.640 --> 00:13:34.360
So that's the idea.


00:13:34.360 --> 00:13:35.200
Got any ideas?


00:13:35.200 --> 00:13:39.540
- It looks interesting, and the defining syntax,


00:13:39.540 --> 00:13:41.960
it's kind of a one-liner, a little bit,


00:13:41.960 --> 00:13:44.180
as you pointed out, like a named tuple,


00:13:44.180 --> 00:13:47.360
but it actually, it defines class-like thing


00:13:47.360 --> 00:13:49.640
with these optimizations, for example, dunder slots.


00:13:49.640 --> 00:13:51.780
And kind of an add data classes type thing


00:13:51.780 --> 00:13:54.540
with dunder equal and dunder hash.


00:13:54.540 --> 00:13:57.500
So for people listening, you just say all in one line,


00:13:57.500 --> 00:13:59.980
struct, point, a capital B for the type,


00:13:59.980 --> 00:14:03.020
parenthesis, x, comma, y, that's the whole thing, right?


00:14:03.020 --> 00:14:04.260
- Yeah.


00:14:04.260 --> 00:14:06.740
- Tony out in the audience does wonder


00:14:06.740 --> 00:14:08.720
if it actually requires type annotations


00:14:08.720 --> 00:14:09.820
or if those are optional.


00:14:09.820 --> 00:14:12.500
I would guess they're optional, but I like them,


00:14:12.500 --> 00:14:13.700
so I don't know.


00:14:13.700 --> 00:14:16.420
- No, Brett says in his article,


00:14:16.420 --> 00:14:19.220
he would propose that they would be optional


00:14:19.220 --> 00:14:21.620
if you just had two elements in something.


00:14:21.620 --> 00:14:25.340
>> It seems consistent with Python that it would be optional.


00:14:25.340 --> 00:14:26.420
>> Yeah.


00:14:26.420 --> 00:14:28.220
>> Tony also says, "Oh boy,


00:14:28.220 --> 00:14:30.180
I just started writing some Rust code at work,


00:14:30.180 --> 00:14:32.540
so I'm interested in this for Python."


00:14:32.540 --> 00:14:37.260
>> Yeah. The example that Brett gave of this point,


00:14:37.260 --> 00:14:40.760
he then showed the example of


00:14:40.760 --> 00:14:45.620
what under the hood that would give you that you don't have to write.


00:14:45.620 --> 00:14:50.240
This example of being able to convert it to a dictionary and


00:14:50.240 --> 00:14:53.520
replace parameters and using slots.


00:14:53.520 --> 00:14:57.240
I mean, there's a lot of code here that you don't need to write.


00:14:57.240 --> 00:15:02.480
Yes, we do have data classes that do this,


00:15:02.480 --> 00:15:09.080
but data classes, they're not optimized for having lots and lots of them.


00:15:09.080 --> 00:15:14.240
This would be like an optimization to have just huge data structure


00:15:14.240 --> 00:15:17.800
full of these things and have it still be fast.


00:15:17.800 --> 00:15:19.360
I think it'd be cool.


00:15:19.360 --> 00:15:21.460
and having it be part of the language,


00:15:21.460 --> 00:15:24.860
maybe they could do optimizations around it


00:15:24.860 --> 00:15:29.460
for Python 3.14 or whatever,


00:15:29.460 --> 00:15:31.300
you know, the faster CPython story.


00:15:31.300 --> 00:15:33.420
Like for example, if you know it's immutable,


00:15:33.420 --> 00:15:36.460
could you make it allocate on just the stack


00:15:36.460 --> 00:15:38.820
and not actually go to the heap or things like this, right?


00:15:38.820 --> 00:15:39.860
It'd be interesting.


00:15:39.860 --> 00:15:40.700
- Yeah.


00:15:40.700 --> 00:15:41.860
- Maybe that's a bridge too far, but.


00:15:41.860 --> 00:15:46.220
- I'm also interested in how this maps to hardware,


00:15:46.220 --> 00:15:50.540
because dealing with registers and hardware interfaces,


00:15:50.540 --> 00:15:53.440
there's, in using C, we often have structs


00:15:53.440 --> 00:15:57.540
that we overlay over the top of shared memory systems.


00:15:57.540 --> 00:16:01.240
And this might be a great use for something like that.


00:16:01.240 --> 00:16:04.580
- Few more thoughts out there.


00:16:04.580 --> 00:16:07.680
Grant says, "This is in line with what Mojo expresses.


00:16:07.680 --> 00:16:09.280
"We recently spoke about them.


00:16:09.280 --> 00:16:11.040
"Would love, love to have a struct in Python."


00:16:11.040 --> 00:16:13.940
And Blaze points out, "Waiting for Henek's opinion."


00:16:13.940 --> 00:16:15.660
Maybe something like this will get into Adders.


00:16:15.660 --> 00:16:20.900
>> Yeah, we'll see. Sometimes, Brian,


00:16:20.900 --> 00:16:22.460
it's about putting new stuff,


00:16:22.460 --> 00:16:24.060
new things into Python.


00:16:24.060 --> 00:16:27.420
Sometimes, however, it's about ripping it out.


00:16:27.420 --> 00:16:28.300
>> Yes.


00:16:28.300 --> 00:16:33.600
>> My next item is the realization of PEP 594.


00:16:33.600 --> 00:16:37.020
PEP 594, for those of you who don't know,


00:16:37.020 --> 00:16:42.700
I interviewed in Himes and Brett Cannon.


00:16:42.700 --> 00:16:44.180
Speaking of Brett Cannon, it gets


00:16:44.180 --> 00:16:51.180
a back-to-back mention here about removing Python's dead batteries and this PEP-594.


00:16:51.180 --> 00:16:55.380
And the idea is there is stuff in Python that makes no sense to be in Python.


00:16:55.380 --> 00:16:58.480
It made sense when we had a world without the internet,


00:16:58.480 --> 00:17:01.480
when there was no concept of pip install,


00:17:01.480 --> 00:17:05.980
and you really needed to kind of have Python come with a lot of its capabilities.


00:17:05.980 --> 00:17:10.780
But now, if you go over to pypi.org, what is the current number?


00:17:10.780 --> 00:17:14.140
we have 460,000 packages.


00:17:14.140 --> 00:17:17.420
They're revolving, like a larger definition of what Python is,


00:17:17.420 --> 00:17:18.940
really, really fast, right?


00:17:18.940 --> 00:17:19.300
>> Yeah.


00:17:19.300 --> 00:17:21.980
>> So for example, do you think it would make sense


00:17:21.980 --> 00:17:25.020
potentially to have an implementation of


00:17:25.020 --> 00:17:28.300
an async chat client built into the standard library of Python?


00:17:28.300 --> 00:17:31.460
>> I didn't know we had that.


00:17:31.460 --> 00:17:35.980
>> Well, apparently we did until 3.12.


00:17:35.980 --> 00:17:38.940
So that's not actually out yet, but it's gone.


00:17:38.940 --> 00:17:43.940
Or like an SMTP daemon built into Python, right?


00:17:43.940 --> 00:17:47.140
Who should be running their own mail client


00:17:47.140 --> 00:17:49.780
as part of Python itself?


00:17:49.780 --> 00:17:51.140
Not even a separate package.


00:17:51.140 --> 00:17:54.740
But more importantly, as was discussed over on the podcast,


00:17:54.740 --> 00:17:57.060
like this is overhead for all the core devs.


00:17:57.060 --> 00:17:59.420
Do we want them working on things like the struct


00:17:59.420 --> 00:18:01.900
or do we want them still managing--


00:18:01.900 --> 00:18:06.780
- CGI. - Yeah, like audio parsing


00:18:06.780 --> 00:18:11.660
for expired nobody uses anymore audio formats or CGI


00:18:11.660 --> 00:18:15.940
or telnet libraries or you know like chat clients.


00:18:15.940 --> 00:18:21.820
So this basically is the announcement by Victor Stinner


00:18:21.820 --> 00:18:25.780
I believe saying we just removed 19 modules


00:18:25.780 --> 00:18:29.980
from Python 3.13 standard library.


00:18:29.980 --> 00:18:32.220
These are the ones that have already been deprecated


00:18:32.220 --> 00:18:35.060
in 3.11 by pep 594.


00:18:35.060 --> 00:18:37.060
Yeah, it's a big long list of them.


00:18:37.060 --> 00:18:41.060
Like I said, like you pointed out some CGI image header,


00:18:41.060 --> 00:18:42.560
you know, male stuff.


00:18:42.560 --> 00:18:45.560
Also talks a little bit about the 312 and 311 ones,


00:18:45.560 --> 00:18:46.560
which are gone.


00:18:46.560 --> 00:18:49.560
And then finally, it does say like, if this affects you,


00:18:49.560 --> 00:18:50.560
here's what you can do.


00:18:50.560 --> 00:18:53.060
Do nothing, just stay on 311.


00:18:53.060 --> 00:18:57.060
It says, in my opinion, it is a dangerous long-term choice.


00:18:57.060 --> 00:19:00.060
However, you can do nothing.


00:19:00.060 --> 00:19:01.560
You could create a group of volunteers


00:19:01.560 --> 00:19:03.560
to give life to this module, right?


00:19:03.560 --> 00:19:07.000
The module is open source in the sense that


00:19:07.000 --> 00:19:10.040
Python's standard library is open source.


00:19:10.040 --> 00:19:12.160
So you go in there,


00:19:12.160 --> 00:19:13.600
you copy the files out,


00:19:13.600 --> 00:19:15.520
you make a PyPI package for it,


00:19:15.520 --> 00:19:17.960
and you find people who want to keep it going.


00:19:17.960 --> 00:19:18.680
>> Yeah.


00:19:18.680 --> 00:19:20.120
>> Or you vendor it.


00:19:20.120 --> 00:19:24.240
You could copy them or remove module just into your code itself.


00:19:24.240 --> 00:19:26.600
Often it's just a .py files,


00:19:26.600 --> 00:19:28.360
you just vendor it in if you have to.


00:19:28.360 --> 00:19:32.360
Honestly, that seems like a pretty decent idea if you're going low-key,


00:19:32.360 --> 00:19:34.600
and you don't want to take on an open source project


00:19:34.600 --> 00:19:36.560
to remain, to maintain CGI.


00:19:36.560 --> 00:19:38.160
You just like, I just need this to run.


00:19:38.160 --> 00:19:39.520
So you can copy that over.


00:19:39.520 --> 00:19:42.640
And then there's a whole discussion on stuff around this.


00:19:42.640 --> 00:19:43.480
Right, if you want.


00:19:43.480 --> 00:19:47.480
So anyway, 20 standard lib modules, they're out.


00:19:47.480 --> 00:19:49.400
- Yeah, I think it's a good thing.


00:19:49.400 --> 00:19:50.420
Just like, yeah.


00:19:50.420 --> 00:19:54.680
Changing your batteries, kind of like your smoke detectors.


00:19:54.680 --> 00:19:55.960
- Yeah, exactly.


00:19:55.960 --> 00:19:58.560
One more audience comment on this before we move on.


00:19:58.560 --> 00:20:00.320
Grant says, happy for the Python core devs


00:20:00.320 --> 00:20:01.440
to kill all these modules.


00:20:01.440 --> 00:20:03.440
Nothing makes senior engineers happier


00:20:03.440 --> 00:20:06.160
than calling bodies of code that aren't worth their weight.


00:20:06.160 --> 00:20:07.920
- I totally agree.


00:20:07.920 --> 00:20:09.240
I would be happy, honestly,


00:20:09.240 --> 00:20:13.280
to see even a thinner, smaller Python standard library


00:20:13.280 --> 00:20:15.320
and then have more of these as pip installs,


00:20:15.320 --> 00:20:16.940
but then when you install Python,


00:20:16.940 --> 00:20:20.480
it could kinda come pre-installed with 20 or 30 packages


00:20:20.480 --> 00:20:23.280
that if you wanna upgrade them separately, I don't know.


00:20:23.280 --> 00:20:26.920
So for things like if I wanna run this on MicroPython,


00:20:26.920 --> 00:20:29.320
I wouldn't run it on WebAssembly under PyScript.


00:20:29.320 --> 00:20:31.200
those situations are like, you don't,


00:20:31.200 --> 00:20:33.020
the whole huge standard library is a problem.


00:20:33.020 --> 00:20:35.920
So I don't know, I feel like there's interesting stuff


00:20:35.920 --> 00:20:37.800
happening here, but this is a good start.


00:20:37.800 --> 00:20:39.000
- Yeah, definitely.


00:20:39.000 --> 00:20:42.080
I think it is, so.


00:20:42.080 --> 00:20:42.920
- It is.


00:20:42.920 --> 00:20:44.280
And is that all of our items?


00:20:44.280 --> 00:20:45.400
I believe it is, isn't it?


00:20:45.400 --> 00:20:46.240
- It is.


00:20:46.240 --> 00:20:47.960
And so some of these decisions are made


00:20:47.960 --> 00:20:51.080
by some of the core Python people


00:20:51.080 --> 00:20:54.000
on the, maybe on the Python board,


00:20:54.000 --> 00:20:57.160
have something to do with some of this, perhaps.


00:20:57.160 --> 00:21:01.200
So if the elections for, so one of our extras,


00:21:01.200 --> 00:21:06.200
I'd like to mention that the PSF announced that you need,


00:21:06.200 --> 00:21:08.740
if you care about elections,


00:21:08.740 --> 00:21:13.460
you kinda need to affirm your PSF membership voting status


00:21:13.460 --> 00:21:14.600
before the 15th.


00:21:14.600 --> 00:21:16.920
So the cutoff is only a couple days from now.


00:21:16.920 --> 00:21:21.420
And I'm glad somebody mentioned this,


00:21:21.420 --> 00:21:22.480
I can't remember where I saw it,


00:21:22.480 --> 00:21:25.960
because it sort of went in my email inbox


00:21:25.960 --> 00:21:27.360
and I forgot to look.


00:21:27.360 --> 00:21:31.980
So I just affirmed my voting status this morning.


00:21:31.980 --> 00:21:35.840
- Excellent, well I definitely affirmed mine


00:21:35.840 --> 00:21:36.800
a couple days ago.


00:21:36.800 --> 00:21:38.640
So it's all good, but yeah,


00:21:38.640 --> 00:21:40.240
thanks for pointing out here, this is great.


00:21:40.240 --> 00:21:41.640
- Okay, do you have any extras?


00:21:41.640 --> 00:21:46.120
- I do, I just released a video collab


00:21:46.120 --> 00:21:48.360
with Julian Siquiera and Bob Belderbose


00:21:48.360 --> 00:21:50.480
from the PyBytes guys.


00:21:50.480 --> 00:21:54.160
About five tips for budding Python developers,


00:21:54.160 --> 00:21:56.680
five career tips for budding Python developers


00:21:56.680 --> 00:21:58.860
as a 25 minute YouTube video.


00:21:58.860 --> 00:22:00.740
So people can check that out.


00:22:00.740 --> 00:22:02.360
That link is in your show notes


00:22:02.360 --> 00:22:04.100
if that sounds interesting to you.


00:22:04.100 --> 00:22:05.800
- It looks like Julian and Iron Man


00:22:05.800 --> 00:22:07.400
are looking at the same thing.


00:22:07.400 --> 00:22:08.240
(laughing)


00:22:08.240 --> 00:22:09.060
- They are.


00:22:09.060 --> 00:22:11.300
Julian has an Iron Man painting


00:22:11.300 --> 00:22:12.780
in the background behind him.


00:22:12.780 --> 00:22:14.760
They've got the same basic expression.


00:22:14.760 --> 00:22:15.600
Pretty awesome.


00:22:15.600 --> 00:22:17.240
So people can check that out.


00:22:17.240 --> 00:22:21.560
Also, PyCon US 2023.


00:22:21.560 --> 00:22:22.400
Remember that, Brian?


00:22:22.400 --> 00:22:23.280
It was a while ago.


00:22:23.280 --> 00:22:24.920
>> Yeah. All the videos are in.


00:22:24.920 --> 00:22:26.000
>> The videos are out.


00:22:26.000 --> 00:22:26.840
>> Yay.


00:22:26.840 --> 00:22:30.400
>> Yay. There are some that are unavailable that are hidden.


00:22:30.400 --> 00:22:33.080
I'm wondering if that's intentional or if that's like they were


00:22:33.080 --> 00:22:36.760
uploaded and they're just forgot to be set to public.


00:22:36.760 --> 00:22:38.880
Whoever's in charge of this might want to look


00:22:38.880 --> 00:22:41.080
why there's hidden videos published to this playlist.


00:22:41.080 --> 00:22:43.000
But I don't know how many there are.


00:22:43.000 --> 00:22:44.440
There's 142 videos,


00:22:44.440 --> 00:22:48.280
possibly some others as well that are hidden on this playlist.


00:22:48.280 --> 00:22:49.400
People can check it out.


00:22:49.400 --> 00:22:51.600
This is basically all of PyCon,


00:22:51.600 --> 00:22:54.980
including the tutorials if you want to go and


00:22:54.980 --> 00:22:57.900
going to be part of that side of PyCon, which is excellent.


00:22:57.900 --> 00:23:01.620
>> Nice. Some are white and some are this gray color.


00:23:01.620 --> 00:23:03.540
Do you know what the difference is?


00:23:03.540 --> 00:23:04.260
>> No.


00:23:04.260 --> 00:23:10.860
>> No idea. I think it's just the opening slide they use for their presentation.


00:23:10.860 --> 00:23:13.980
I don't know if there's more to read into it than that.


00:23:13.980 --> 00:23:15.940
I would like to maybe,


00:23:15.940 --> 00:23:21.000
I don't know if the people who are organizing next year's PyCon are listening.


00:23:21.000 --> 00:23:28.120
I would like to propose just some kind of suggestion that might make this a little easier for them,


00:23:28.120 --> 00:23:31.680
because this seems to be a huge challenge from what I can tell.


00:23:31.680 --> 00:23:33.720
PyCon was in April,


00:23:33.720 --> 00:23:35.360
it's the middle of June,


00:23:35.360 --> 00:23:37.600
and now the videos have come out.


00:23:37.600 --> 00:23:41.920
Somebody has spent a month and a half working on these videos,


00:23:41.920 --> 00:23:45.360
and the community has been waiting a month and a half to get them right.


00:23:45.360 --> 00:23:48.920
How quickly is our video for Python Bytes out when we're done with it?


00:23:48.920 --> 00:23:50.920
Like right when we're done.


00:23:50.920 --> 00:23:55.100
>> I mean, literally you could seek around in it as part of the stream.


00:23:55.100 --> 00:23:58.440
We're just live streaming this using something like StreamYard.


00:23:58.440 --> 00:24:01.740
I know that there's a pay to attend virtually,


00:24:01.740 --> 00:24:05.160
so maybe you don't want to have a public stream that people can use.


00:24:05.160 --> 00:24:08.540
Maybe there's, but this just live streaming it to YouTube,


00:24:08.540 --> 00:24:10.840
even if that's an unlisted URL that you then,


00:24:10.840 --> 00:24:12.120
when the conference is over,


00:24:12.120 --> 00:24:18.120
is flipped to public because I know that you don't necessarily don't want that to be going,


00:24:18.120 --> 00:24:21.120
have that whole live experience if you're not part of the,


00:24:21.120 --> 00:24:23.640
like I signed up for the virtual pass, which is great.


00:24:23.640 --> 00:24:24.480
It's fine.


00:24:24.480 --> 00:24:27.000
But I think we could get these videos in a lot quicker


00:24:27.000 --> 00:24:29.600
and help people a lot if you did something like,


00:24:29.600 --> 00:24:31.500
you just like kind of live streamed it.


00:24:31.500 --> 00:24:34.280
I know people might worry about the connectivity


00:24:34.280 --> 00:24:35.480
and it cutting out the quality,


00:24:35.480 --> 00:24:37.280
but with like, for example, StreamYard,


00:24:37.280 --> 00:24:38.760
it records local video.


00:24:38.760 --> 00:24:40.840
It's like maximum quality, right?


00:24:40.840 --> 00:24:43.480
So there's, if they had a stream deck


00:24:43.480 --> 00:24:44.640
where they can switch to the views


00:24:44.640 --> 00:24:46.340
and they had this going and recording locally,


00:24:46.340 --> 00:24:50.660
these videos would be out as quick as you could click from unlisted to public on YouTube.


00:24:50.660 --> 00:24:52.820
>> I do want to, I guess,


00:24:52.820 --> 00:24:54.300
disagree with you on that.


00:24:54.300 --> 00:24:55.660
>> Okay.


00:24:55.660 --> 00:24:58.860
>> PyCascades, for one,


00:24:58.860 --> 00:25:01.220
I don't know if it was available right away,


00:25:01.220 --> 00:25:05.260
but it was available soon after the entire day recordings.


00:25:05.260 --> 00:25:07.140
You have the day recordings.


00:25:07.140 --> 00:25:10.780
If you wanted to find yours or something or find somebody's,


00:25:10.780 --> 00:25:12.820
you could scroll through and find it.


00:25:12.820 --> 00:25:16.260
It was just sort of going,


00:25:16.260 --> 00:25:17.860
there wasn't any editing,


00:25:17.860 --> 00:25:19.580
so it was hard to deal with.


00:25:19.580 --> 00:25:22.000
I don't know how many people really watch those,


00:25:22.000 --> 00:25:26.640
but the PyCon US videos,


00:25:26.640 --> 00:25:27.980
I didn't realize this at first,


00:25:27.980 --> 00:25:29.600
somebody corrected me.


00:25:29.600 --> 00:25:33.100
They were available to people that either attended live or


00:25:33.100 --> 00:25:38.700
attended virtually but didn't get to go to all the videos.


00:25:38.700 --> 00:25:42.580
The online experience included being able to


00:25:42.580 --> 00:25:45.820
go in and watch videos, the other videos that you missed.


00:25:45.820 --> 00:25:48.860
So those were available right away.


00:25:48.860 --> 00:25:51.660
I didn't know about it, so maybe advertising it more.


00:25:51.660 --> 00:25:54.220
And also, it was a little hard to get to.


00:25:54.220 --> 00:25:56.360
I gotta say, it wasn't easy.


00:25:56.360 --> 00:26:00.760
I kind of would like to have the schedule that you go into.


00:26:00.760 --> 00:26:04.360
If you're logged in and you can see the schedule,


00:26:04.360 --> 00:26:08.180
why not have that be able to just link to the video


00:26:08.180 --> 00:26:10.180
that you missed or something like that?


00:26:10.180 --> 00:26:13.420
I don't know. There's better ways to make it a little bit easier.


00:26:13.420 --> 00:26:16.580
It was a little hard to deal with, but it was available.


00:26:16.580 --> 00:26:19.380
I also think, for instance,


00:26:19.380 --> 00:26:22.100
going back to PyCascades, I did a talk.


00:26:22.100 --> 00:26:25.820
The recording, the full day one,


00:26:25.820 --> 00:26:30.100
had glitches and had me up there at the beginning trying to get the audio ready.


00:26:30.100 --> 00:26:31.980
There's this getting started stuff,


00:26:31.980 --> 00:26:36.660
whereas having somebody be able to clean that up a bit would be good.


00:26:36.660 --> 00:26:39.900
Also, but I don't think that this is a long time


00:26:39.900 --> 00:26:43.300
from when PyCon really was to now.


00:26:43.300 --> 00:26:45.900
That's what, a month and a half?


00:26:45.900 --> 00:26:46.740
That's too long.


00:26:46.740 --> 00:26:47.560
- Yeah, I think it's too long.


00:26:47.560 --> 00:26:50.820
Last year, 2022 was three months, I believe.


00:26:50.820 --> 00:26:51.900
I mean, it's a long time.


00:26:51.900 --> 00:26:53.040
- And I know it's a lot of work,


00:26:53.040 --> 00:26:55.620
but maybe we could do something.


00:26:55.620 --> 00:26:59.320
Either having rough cut ones out there initially,


00:26:59.320 --> 00:27:01.980
or maybe have some of us volunteer.


00:27:01.980 --> 00:27:03.820
I mean, I think we could have some volunteers


00:27:03.820 --> 00:27:07.420
to help clean them up for good enough for now


00:27:07.420 --> 00:27:08.700
or sort of things.


00:27:08.700 --> 00:27:09.920
I don't know, something.


00:27:09.920 --> 00:27:11.020
- Yeah, I agree.


00:27:11.020 --> 00:27:12.580
We should have made this a whole item, I suppose,


00:27:12.580 --> 00:27:13.420
if we're talking this much.


00:27:13.420 --> 00:27:15.140
The final thought is, like with StreamYard,


00:27:15.140 --> 00:27:16.100
I don't know about the other ones,


00:27:16.100 --> 00:27:17.940
you can literally go in before you hit publish,


00:27:17.940 --> 00:27:19.060
you can just say trim this end,


00:27:19.060 --> 00:27:21.660
go to click, click, okay, put it on YouTube now,


00:27:21.660 --> 00:27:24.820
and then that would be not very much.


00:27:24.820 --> 00:27:26.700
I agree that you don't want all the setup in that chunk.


00:27:26.700 --> 00:27:28.700
You want it like, welcome, I'm Brian,


00:27:28.700 --> 00:27:30.780
I'm talking about extensions, et cetera, et cetera,


00:27:30.780 --> 00:27:31.820
right, like straight away.


00:27:31.820 --> 00:27:33.300
- And I can't get the slides to work,


00:27:33.300 --> 00:27:36.100
I know you want to skip all that crap.


00:27:36.100 --> 00:27:38.600
OK, but good news.


00:27:38.600 --> 00:27:40.900
The videos are out and people can check them out.


00:27:40.900 --> 00:27:44.300
OK, next, next, next, next.


00:27:44.300 --> 00:27:47.500
A couple version updates for Python.


00:27:47.500 --> 00:27:54.100
Python 3.11.4, 3.10.12, 3.9.17, 3.8.17, 3.7.17,


00:27:54.100 --> 00:27:58.900
and importantly 3.12.beta2 are all out.


00:27:58.900 --> 00:28:01.800
And you might be interested to know


00:28:01.800 --> 00:28:04.480
that both the 311 and 310, I suppose the others,


00:28:04.480 --> 00:28:06.600
include security fixes.


00:28:06.600 --> 00:28:09.020
Oh, nice to meet you, Mr. CVE.


00:28:09.020 --> 00:28:12.640
For example, some problems that were solved


00:28:12.640 --> 00:28:15.560
in OpenSSL are now included.


00:28:15.560 --> 00:28:19.200
There's one, two, three, four, five, six, seven, eight,


00:28:19.200 --> 00:28:23.080
maybe, seven or eight CVEs that were addressed


00:28:23.080 --> 00:28:26.960
on OpenSSL and some URL parsing and UU decode


00:28:26.960 --> 00:28:29.320
and things that might look like you wanna get fixed.


00:28:29.320 --> 00:28:31.900
So check that out and upgrade if you can.


00:28:31.900 --> 00:28:34.120
Python Bytes is already running 3.11.4,


00:28:34.120 --> 00:28:36.640
so hooray for that, Python Bytes Set FM.


00:28:36.640 --> 00:28:39.760
>> I had a friend say they were working on upgrading to 3.10,


00:28:39.760 --> 00:28:41.760
and I'm like, "I don't even remember 3.10.


00:28:41.760 --> 00:28:44.120
I've been on 3.11 for so long."


00:28:44.120 --> 00:28:46.580
>> Yeah, absolutely.


00:28:46.580 --> 00:28:48.520
Then final call,


00:28:48.520 --> 00:28:51.560
just remember the Python Bytes AMA form.


00:28:51.560 --> 00:28:54.760
Please get out there and submit that one more time.


00:28:54.760 --> 00:28:55.760
Link's in the show notes.


00:28:55.760 --> 00:28:56.440
>> Yes.


00:28:56.440 --> 00:28:58.160
>> Yes, right at the top. Yes.


00:28:58.160 --> 00:28:59.160
Ready for a joke?


00:28:59.160 --> 00:29:00.160
I am.


00:29:00.160 --> 00:29:07.160
This one comes to us from Ken VanWick and it's a follow on from theample.com.


00:29:07.160 --> 00:29:09.160
Where's their, there it is.


00:29:09.160 --> 00:29:12.160
Their Vision Pro.


00:29:12.160 --> 00:29:13.160
Right?


00:29:13.160 --> 00:29:15.160
Now this thing is super expensive.


00:29:15.160 --> 00:29:17.160
It looks really amazing.


00:29:17.160 --> 00:29:20.160
I just, I don't, I've not got faith that it's going to take off.


00:29:20.160 --> 00:29:27.160
But the ability to say like, I want to sit, I want to stand on the sideline right at the goal line at the Super Bowl


00:29:27.160 --> 00:29:29.100
and be able to look around and watch that


00:29:29.100 --> 00:29:31.660
as if I was there, like that would be epic.


00:29:31.660 --> 00:29:35.340
Is that worth a $3,500 device?


00:29:35.340 --> 00:29:37.720
Now Brian, it's expensive, but did you know,


00:29:37.720 --> 00:29:41.300
just like the Mac Pro, which was also recently announced,


00:29:41.300 --> 00:29:44.320
the Mac Pro, super expensive, $7,000 minimum,


00:29:44.320 --> 00:29:45.640
but it doesn't come with the wheels.


00:29:45.640 --> 00:29:46.940
If you buy it with the wheels,


00:29:46.940 --> 00:29:49.100
the wheels are $400 separate, right?


00:29:49.100 --> 00:29:49.940
(Brian laughs)


00:29:49.940 --> 00:29:51.000
To get the wheel for your case.


00:29:51.000 --> 00:29:52.360
So this is kind of like that.


00:29:52.360 --> 00:29:55.160
Here's your, this comes to us from Kim Benwick,


00:29:55.160 --> 00:29:58.580
and he says, actually this is Paul Mason's thing.


00:29:58.580 --> 00:30:00.740
So you got, (laughs)


00:30:00.740 --> 00:30:04.340
so you've got your $3,499 Vision Pro


00:30:04.340 --> 00:30:08.780
and it comes with the Apple branded $899 snorkel.


00:30:08.780 --> 00:30:10.300
(laughs)


00:30:10.300 --> 00:30:11.500
What do you think of that?


00:30:11.500 --> 00:30:12.900
- I think that's cool.


00:30:12.900 --> 00:30:16.520
And actually, no, yeah, if you could,


00:30:16.520 --> 00:30:18.640
if this would actually work, would work underwater


00:30:18.640 --> 00:30:21.060
so that you could go back out in your swimming pool


00:30:21.060 --> 00:30:23.040
and it would, you could look like


00:30:23.040 --> 00:30:26.060
you're actually on a coral reef, that'd be cool.


00:30:26.060 --> 00:30:27.060
- That would be awesome.


00:30:27.060 --> 00:30:30.320
Imagine you were in here playing something like Subnautica,


00:30:30.320 --> 00:30:34.440
one of those types of games, which is just amazing.


00:30:34.440 --> 00:30:37.600
Like a game where you're underwater and exploring.


00:30:37.600 --> 00:30:41.040
But in VR with your Apple Snorkel on,


00:30:41.040 --> 00:30:42.160
think how real that would be.


00:30:42.160 --> 00:30:43.960
- Yeah, but actually underwater.


00:30:43.960 --> 00:30:45.320
But they're probably not--


00:30:45.320 --> 00:30:46.400
- Yes, exactly.


00:30:46.400 --> 00:30:47.240
- Yeah.


00:30:47.240 --> 00:30:48.840
(laughing)


00:30:48.840 --> 00:30:49.680
Be cool.


00:30:49.680 --> 00:30:50.500
- Oh boy.


00:30:50.500 --> 00:30:51.960
Well, that's what I got for you all.


00:30:51.960 --> 00:30:55.440
$899 Apple snorkel not included.


00:30:55.440 --> 00:30:56.520
Yeah.


00:30:56.520 --> 00:30:57.040
Cool.


00:30:57.040 --> 00:30:57.560
All right.


00:30:57.560 --> 00:30:57.760
Nice.


00:30:57.760 --> 00:30:59.240
Well, yeah, very fun.


00:30:59.240 --> 00:31:02.240
Thank you everyone for the active chat in the live stream.


00:31:02.240 --> 00:31:05.640
Thank you for everyone who listened no matter how you listen and Brian.


00:31:05.640 --> 00:31:06.600
Thanks as always.


00:31:06.600 --> 00:31:07.280
Thank you.

