0:00 Brian Okken  00:00

0:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 313, recorded December 6 2022. And I am Brian Aachen.

0:00 Michael Kennedy  00:11

0:00 Hey, I'm Michael Kennedy.

0:00 Unknown Speaker  00:12

0:00 I'm the person with the scroll bar going across, I just realized that she's two Fridays.

0:00 Unknown Speaker  00:17

0:00 And I'm Shawn Tiber. And we're here from the teaching Python podcast. So it's good to be here with you both

0:00 Brian Okken  00:23

0:00 recommend everybody listen to teaching Python. The focus is kind of around teaching being teachers and teaching Python, but I think anybody that helps anybody with learning Python, is it's worth listening to your show.

0:00 Unknown Speaker  00:34

0:00 100% It's more like about anybody who's a learner, which is everybody, hopefully, out there. Well, welcome. Thank you.

0:00 Brian Okken  00:43

0:00 Well, should we get into the first topic, Michael?

0:00 Michael Kennedy  00:46

0:00 Yeah, let's just jump right in. Over here. This one I ran across on Mastodon and I thought, what a fun quick little thing. And with the teaching angle from the teaching Python podcast with Kelly and Sean, I thought this might be kind of a cool thing for teachers or for kids for something simple with Python. But also, I just like it. So if you look over here in the link, this person turned receita. posted, spell out numbers with Python, all you got to do is pip install inflect. Check this out. So within Flex, this is a Python library, you can just say in creating a flutter thing, and you say number two words, and you give it some giant number. And you're like, I have no idea what this is. And it says, In this case, it was 8,675,309. And so any number you give it, it'll tell you the friendly version or the human version of it. So if you want to turn, you know, written numbers into spoken, spoken, said numbers, this is the way to do it. I think this is great. I don't know you made it for 8 million. But if you go much farther than that, if you go beyond trillion, then it gets really interesting. Another one that I found after I discovered this, because on Macedon, somebody said, This is amazing. Have you heard of numb to words as well. So numb to words is another one that you can use numb towards is possibly better? The API seems a little bit cleaner. Now. I haven't pushed the outer bounds of like, well, what are the biggest number it will speak to me in a reasonable way. So I don't know which one will go farther in that way. But in terms of kind of usefulness, this num, two words, the two spelled out as a number, you can actually get a command line version. So you can PIP exe install this. And then on your terminal or command prompt, you just say num two words and put a number and then you don't even have to write Python code. You just call it but of course you can. And it will work in multiple languages. Oh, the

0:00 Unknown Speaker  02:50

0:00 language part is cool. I saw that there was my teacher. So I just went wow, I can go into Spanish and French.

0:00 Michael Kennedy  02:56

0:00 Exactly. Exactly. Yeah. Oh, you see, there's a bunch of different options. There's a ton of languages you can use here. Wow. Which, which is really cool. Yeah. So so this is neat. And I wrote a little bit of code to just, you know, throw some sort of examples together and put those in the show notes. So you can use inflect. Or you can use numb to words, I think I would trend towards them towards because the multilingual as well as at the command line version, if you PIP X install it,

0:00 Unknown Speaker  03:25

0:00 also the fact that we don't have to call an instance, is that correct? Yeah, exactly.

0:00 Michael Kennedy  03:29

0:00 Yeah, exactly. You don't have to create like some object and then call it on that it's a little more I thought, like, you might say,

0:00 Unknown Speaker  03:36

0:00 I have a second grader in my household who is probably ready to cheat on his math homework with us. There's a lot of transfer questions. So it could be fun.

0:00 Brian Okken  03:45

0:00 I think this is great for like parents that are have kids in, you know, trying to come up, pronounced big numbers and stuff. Occasionally I forget.

0:00 Unknown Speaker  03:55

0:00 Say saying I'm thinking about two. But this is like, fact number like 20. For the math teacher, I always tell them, No, we don't need math anymore. We'll just have Python. We don't need math anymore. I have a Python library. That's going to give us number sense.

0:00 Michael Kennedy  04:09

0:00 All right. So I got some homework for someone out there who's feeling ambitious. How about create this as a website as a service. So we can just put it in as a progressive web app, we just put it on our phone. And then we can we can do it. Or you could use you could use PI script and just install it so the kids could just constantly go around and ask it what is this call for that call?

0:00 Unknown Speaker  04:29

0:00 Exactly. And then set it up for phonetic pronunciation so we can just have Siri pronounce it properly.

0:00 Michael Kennedy  04:36

0:00 Yeah, there you go. And out in the audience. Steve says I guess you could pipe it to say to get it to read the number out loud as well. Okay. I hadn't thought about that. That's pretty, pretty dope. Okay. Cool. All right. Well, that's That's mine. A few Brian.

0:00 Brian Okken  04:51

0:00 Okay, so I'd like to, I'd like to go back in time to the origins of Python. Now, I'm not going to read the whole article but There was an article by Lambert, mirror tins mutant sorry, Lambert forgot your last name wrong. But this is real. It's a really cool but long article. So we've I've heard, I've heard mostly from Guido, different stories about, I guess they weren't different stories, but that Python did come from a lot of inspiration from the ABC language, I guess you probably have all heard that, right. But I haven't heard a lot of that, like what word ABC come from and, and I, and maybe that's out there, but I just haven't looked. But this is, this is kind of going through it. So this is going back to 1970. Lambert was involved with teaching, teaching programming, and this is teaching programming at university levels to people that had no programming experience is like they had they had a computer art society, they had non numerical programming, and this is teeth. And he mentioned teaching, like artists and other people that aren't probably don't even hang around computers at all, and especially in the 70s, you wouldn't. So they were using, and then he kind of ties it in also to modern day. A similar sort of topic is Django Girls, which is a great program that if anybody doesn't know about it, tries to get particularly women to, to you to learn, learn and do something useful with Python in one day, even if you've never touched a programming language, which incredible experience. But he even mentions it's going on in like Istanbul. So this these workshops go on all over the world, which is pretty awesome. But they so he started with a programming language called Telkom. And the and it was an insanely unstructured language similar to basic. And the reason why they chose it is just because it was easier to learn or easier to use, it was more more easy to talk about. And then this tail goes through. Like it's a pretty long tail. But it goes through a lot of the the frustrations they had even with telecom and then deciding to, to go into teach. Developing ABC, which was like started out was B for B for beginner, or beta zero or b zero for the initial elements or something, which is I think, too nerdy for for programming language name, but talks about the ABC project, a lot of this articles around the ABC ABC project, but one of the things I wanted to highlight to try to get my notes back up, but one of the highlight one of the things that they brought up was really wanting to have ease of learning and ease of use, desirable, but also at the same time, use high level, task oriented features to make things easier. So they wanted things wanted it to be easy to learn, but also not cumbersome to use as a later as a developer. And that was probably that was my experience with basic, it was fairly easy to learn. But then we tried to do something large, it's tedious. And Pascal was the same way with me. But pythons not so much. And one of the things they talked about is even they had this, the put command right in there. So put one two in a B was was to put two values into variables like and again, the swapping of you could say put a B in Ba to swap variables where every other language I've ever used, you've got to use a third intermediate variable. And so we use that in Python today, right? So a comma b equals becomes a become a will do the same thing,

0:00 Michael Kennedy  08:33

0:00 right? This is like looking back on, like evolution or something. Yeah, when you when you see like, Oh, I see here was where the fish started to grow an arm because it went on land a lot. Yeah, this is like, here's the tuple unpacking early Python.

0:00 Brian Okken  08:47

0:00 Yeah. So I encourage people to read it. It's a it's just kind of a great read and a romp through history of Python. So I mean, we could in David brought in, like ABC brought in. I think beta zero did also have the space space, you know, the spacing making sense and not having to do brackets and things but having spaces for blocks. Pretty cool ideas. The what else is one of the things that a couple quotes, I'm not sure where it's at talks about Python success. The growth in pop in in popularity of Python from its inception 30 years ago, as a one person effort flying under the radar has been phenomenal, but not meteoric it's instead it's been a long, slow and steady rise. And the competitive advantage it had in the period where we needed a lot of programmers was the ease of use and ease of new programmers so yeah, the last 20 years we really wanted needed a lot more programmers, having Python be easy to learn has been powerful. And then as it also comments which we know about where the the use of extra languages that same that same concept of it's easy to learn But you don't have to stop using it. When you do something advanced, we see that with like data science and web libraries where if it needs to be super fast, they stick it in an extension in a C extension or something, or now rust often, but it hasn't slowed down. And anyway, great read. Thanks, Lambert for written this

0:00 Unknown Speaker  10:18

0:00 call. Yeah, it's pretty cool. I always thought of Python, especially for refugees from other languages. It's like it's cheating, right? Because it shouldn't be that easy to do something that powerful or that complex. And it's interesting to see the origins of that even just the variable substitution, or, you know, the multiple assignments, that's pretty cool to see that it has its origins that far back.

0:00 Brian Okken  10:40

0:00 Yeah. And I kind of now I'm sort of here, understanding some of the comments where every time we put a little new language feature, like the match, match statement, or, or the walrus operator, there's some people that or like, are we making the language too complicated to learn now? And I think those are valid discussions to have. I don't think we've made it too, too complex to learn right now. But it's good to have those thoughts of like, you know, maybe it's a cool feature. But do we want to, you know, I look, I've my my thoughts on that are really just don't teach that. I probably wouldn't teach the match statement of the walrus operator to new engineers. So

0:00 Michael Kennedy  11:21

0:00 yeah, indeed. Very nice. All right, Kelly. One more comment. I was gonna swap it over. You're excited. Yeah. All right. Well, here we go. Let's talk about robots that teach kids.

0:00 Unknown Speaker  11:32

0:00 Yeah, so this has become the I should in a good way, the bane of my existence is finding all these bots. And it's like, I have so many bots. This one's an old bot. And it's one of the very popular bot for little kids. Very cute, they draw a line that can follow the line, it was using block code on the iPad connect CZ. And it's always been a real big staple for a lot of classrooms. It's called the Ozo bot. But the interesting thing coming in August 17, the Ozobots just introduced a Python beta version, which is super cool. They got rid of the original overbought bid, which was similar version. And then they made a new version of the robot called the EVO Ozo bot. And with this bot, it has line following it has color detection has sound has proximity sensor, as Bluetooth has crashed detection. You can even write functions within this within the program for the beta. And then I think when you open up the the documentation for the beta, they have five different programs already written in there for you to try out. And it's kind of cool, you have a tree following and it can count how many branches are in a tree. So if you're talking, maybe you want to do a science classroom classification, and you want to see how far removed this is very sciency. For you guys, how far removed an amoeba is from from ape, you would go down the cladogram or the tree and you can calculate how many branches away. So it'd be really cool how to incorporate the EVO bot and not that you can't count trees. But you know, just fun little things.

0:00 Michael Kennedy  13:17

0:00 No, but it's a really cool way to to get the kids thinking. Yeah, so it says it says there are two ways of programming. And you know, Brian just spoke about the history of programming languages and all these text oriented languages. But neither of those are particularly I mean, it does come with a Python aspect. But it's not. The two options here are kind of like there's this blocky style of programming. And does that become Python, as you

0:00 Unknown Speaker  13:41

0:00 know, no, I'm not sure how they came about it. But the original was always block and then the block would it would increase in difficulty depending on the age, similar to a lot of the other block programs where you would have limited writing. And then you would have color coding. And then you would start pushing in more functions. But this one seems to be just a full on Python beta version. And I think I put in the there is an in online web browser, or you can connect to the Ozo bot I think it gave you know that's the simulator that one's for the block. But that one's cool, too. I'll try to find it for you. But there's a it's called. I'll find it for you. It's called like EVO Ozobots. And you can code right in the browser once you connect via Bluetooth.

0:00 Michael Kennedy  14:26

0:00 Yeah. This is it. So

0:00 Unknown Speaker  14:29

0:00 bots like these are great for learning to code. And this is one that I definitely tell parents when because everyone asks me like Hey, what should I get for my kid? Like, should I get a microbead shirt? What kind of robot should I get? The azo bot is a great one because it can now grow even further with your your child as they're learning more about coding. So you can get them started with really basics you know, writing on paper with a marker it can follow the line and do different things as the color changes. They can then grow into using blocks to program it and now they can code using Python, so it's the same robot. But now they've evolved their knowledge and understanding of computer science and computational thinking by progressing their their languages as they go. So it's a really great use for that.

0:00 Michael Kennedy  15:12

0:00 This is really cool. Let me just try to do a little commentary for people listening and not seeing, of course, the links in the show notes, it looks like a little miniature or two D two, maybe like, a little bit smaller than the palm of a kid's hand. And one way you can program it, which is fascinating is you can draw a line with different colors, like a big thick Sharpie looking line. But the colors, teach it to do stuff, like if it hits a red part of the line that might spin or play a sound and then it goes to a black line. And then like a blue one maybe means, you know, disco or whatever, I don't know what the mapping over to his actions are. But that's, that's really neat to get kids thinking, and then they can go to those visual blocks, and then they can go to Python. I agree, this is neat.

0:00 Unknown Speaker  15:53

0:00 And I put the editor on the show notes for you. So you can okay on it. Yeah, so the the only problem that I've been reading about is the pythons not picking up on the dimensions or the length of the line. So they have to be exactly four millimeters in order to do like tree branching. So it's working on on that feature. Whereas with the regular block, you can draw a kid can draw a line and a work but I think that's great. And they have the the examples. So they have the three simple ones that you can get right into the square walk example. And then it goes down into a little bit more complex are the template ones are. So it's pretty cool.

0:00 Michael Kennedy  16:33

0:00 Yeah, yeah. I mean, like,

0:00 Unknown Speaker  16:37

0:00 yeah, $175 for the new Ozo bot EVO used to be 95. But like I said, it's a new improved, you can get a class set class set of I think eight is, I don't know, I want to say 2000. Okay, so it's not too bad. It is a is one of those things that a teacher could go and get a grant for.

0:00 Brian Okken  17:00

0:00 I was thinking even like a teacher home sort of thing as well. It's not out of bounds for at

0:00 Unknown Speaker  17:05

0:00 175 is not not bad for the bots going, you know, the bots that I've seen out there right now.

0:00 Brian Okken  17:11

0:00 And I really liked the idea of, of having programming in be something that's interacting with the real world like neither, either. That's what I liked about some of the the, the micro Python stuff, or circuitpython the playground Express and stuff does lights and everything. But this it's maybe it's just a little robot but having it your computer, change your code change something that's they can see. It does make a big difference to to make that reality there.

0:00 Unknown Speaker  17:42

0:00 And it's pocket size, which is I love. I love it's not big and bulky. You can throw it in your pocket and walk around.

0:00 Brian Okken  17:49

0:00 They might lose it in my house. You might you might take it or something. But yeah,

0:00 Michael Kennedy  17:57

0:00 excellent. Well, that's a really good really good find. Brian, before we move on, I want to tell everyone about our sponsor. This week,

0:00 Brian Okken  18:04

0:00 I would like to tell us to tell everyone and to thank Microsoft and Microsoft for startups. for sponsoring this episode, Microsoft for startups set out to understand what startups need to be successful and create a digital platform to help you overcome those challenges. And it's the founders of founders hub provides all founders at any stage with free resources to help solve startup challenges. Platform provides access to expert guidance, skilled resources, mentorship and networking connections, technology benefits, and so much more. Founders hub is truly open to all you don't need to be investor backed, but you can be speed up development with free access to GitHub and the Microsoft Cloud unlock credits over time. All also discounts and benefits from Innovative Companies partnering with Microsoft founders hub, such as open AI, they'll have access to their mentorship network, which includes hundreds of mentors across a range of disciplines need advice on marketing, or fundraising or idea validation. Tons of topics, including management and coaching are available and you'll be able to book a one on one meeting with mentors, many of whom were former founders themselves. It's no longer about who you know, get the critical support your need for Microsoft for startups founders hub, make your ideas a reality today by visiting Python bytes.fm/founders hub 2022. That link of course is in your show notes. And we appreciate you using the link to let them know that you heard about them from us. Yeah,

0:00 Michael Kennedy  19:29

0:00 thanks, Microsoft for supporting the show. Hey, Brian, real quick. Real Time follow up. Before we get on the next topic. Marco and audiences I envy every child who gets hooked on a programming with one of these. Yeah, that's way more than compelling than original BASIC or Fortran or whatever many of us had to fight our way through

0:00 Brian Okken  19:50

0:00 the number game. Yes,

0:00 Michael Kennedy  19:52

0:00 exactly. Yeah. How about the print your name diagonal time sounds good.

0:00 Unknown Speaker  19:57

0:00 I'm still trying to find it. But I remember when I was in third grade, I had a book that had programming challenges that would unlock parts of the next parts of the story. So you'd read a few pages, and then it would, you'd have to solve some puzzle to figure out what happens next in the story. And I need to go back and find it because it was such a creative way of getting kids engaged. And it was the cost of a book,

0:00 Brian Okken  20:21

0:00 choose your own adventure, but with, with code, that's kind of like the kind of code thing.

0:00 Unknown Speaker  20:26

0:00 That's my next sixth grade project, I'm just going to have them till you have to guess the right word in order to see the next lesson.

0:00 Michael Kennedy  20:36

0:00 Speaking of setting words, I want to talk to somebody a little more on the the DevOps side perhaps, of things, but this is a real simple one that I think people will find some joy and use for. I don't know if you've written any Python code, and then wanted to know what's happening with it. So if you open up Activity Monitor in Mac OS, if you open up task manager, or some of the SIS mon tools, and you say, what is my program doing? Is it using a lot of memory? Is it is it busy? It's not nothing seems to be happening? Is it like the CPU is pinned? Or is it just stuck? You want to find your program in a list of programs or you even top or something like that? What is the name of the program? It's Python, it's always Python. And there might be many things called Python that are not even related to here thing called Python, you know. So I want to tell people about this thing called Set proc title, as in setup, process, title, or name, which is really, really cool. And its use case is incredibly simple. I think even have an example here. Yes, yeah, no, one of these don't have the exact code. But one thing that's cool is if you do anything with web stuff, like micro whiskey, or G unicorn, if you would just have this installed as part of your web app, or your API, or any of those things, like in micro is great. You can say proc name prefix is like, for example, I'm talking about in training, we use micro whiskey. So it says training dash, and then you just say auto proc name is true. When Oh, cool. When I go to the server, and I hit glances, or top or one of these types of things, and you say, what are my processes doing? Well, guess what it's called training, micro whiskey worker, one, training micro whiskey worker, seven, and eight. And then for the thing that does the search engine as a system daemon written in Python, it was also called Python in the list, but now it's packed with on search as training search daemon. And these things and all you got to do is basically import set proc title, and say, at the beginning of program, set, proc title, whatever you want to see here, off it goes. But also the web frameworks will pick this up and use it if they find it a lot of times

0:00 Unknown Speaker  22:47

0:00 nice. This is really cool when you're working in like a Docker environment where you've got a bunch of containers that are all running Python, especially ones that maybe you are just, you know, hosting rather than building. This is a great way to identify your specific processes. So I really liked this. Yeah,

0:00 Michael Kennedy  23:03

0:00 I like it too. Because it's just so simple to use you literally one import statement, what is the title, but it knocks on follows on to these other tools that make it really useful? So you can find your thing? Not just, you know, one of the 10 Python things?

0:00 Brian Okken  23:18

0:00 Yeah, just don't set the product title to Python.

0:00 Unknown Speaker  23:24

0:00 You could be also Python.

0:00 Michael Kennedy  23:28

0:00 Exactly. You could set it to like sneaky things like you could set it to notepad on Windows, or service host or like some weird that you're like, oh, no, it's blending in.

0:00 Unknown Speaker  23:39

0:00 This reminds me of that library, the progress library or the spinning wheel of death on the Mac. So we just have the cursor in the the ticking cursor going around. Combine and combine them two together and just go yes, it's still processing.

0:00 Michael Kennedy  23:55

0:00 Exactly. Virus. All right. Well, anyway, that's that's set proc title. People should check that out if they haven't used it.

0:00 Brian Okken  24:03

0:00 Well, I was looking in the past before looking at old the origins of Python. Now I want to look in the future at 312. didn't just get 311, though. Yeah, so 311 really just was finally released in like November, right? So just last month, I think. But I'm already looking at the 312. So it is in the Alpha stages. So one of the things I'm I wanted to point out like a caveat right away is that publishers pre release users should be aware that that Oh, I forgot this isn't the right morning. But basically, stuff in alpha might change. So be careful if you're using alpha. So 312 is on the alpha two release. I'm already checking out one of the things I love already. I'm loving this in 311 So I'm glad they're going for more changes is the improved error messages. So I'm already seeing if you guys have noticed, like the love

0:00 Unknown Speaker  24:59

0:00 It's so much easier to teach just let me tell you I'm like read down last line read it.

0:00 Brian Okken  25:05

0:00 The the, if you import something or use the wrong variable or something that the having it be able to say, Did you mean and then pick like the right thing? That's incredible. I love it. So even more improvements in the error messages which is great. I, this is nice. Did you mean Yeah. Did you mean from import? Oh, I've done this before, do you say import from you can't do that you have to say from thing important thing. So nice. Those are great. Not the new features. So far, it's a Linux perf profiler. So if you care about that run on Linux, that's kind of neat. There's a whole bunch of other whole bunch of other changes. The one thing I noticed was path, lib walk. I didn't know path lib didn't have a war. So for walking a directory tree, which is kind of neat. Anyway, why am I bringing this up? Because it's not going to come out until next November. So why should you care about it? Well, you should care about it as soon as possible. If you're a Python package maintainer, if you maintain a package that other people are using, why not start already and see if there's anything in there that you need to care about, and what I did. So I wrote up a little little article on testing with Python 312, on at Python test.com. And I just went through the changes. So there were just a few lines of change that I needed to make. If I talked about where to get it, and using also running PI, which is bright cannons, Python launcher, on Mac, in on Windows, it just comes with PI. But once you install it, you can use three, you can use that to launch 312 to play with things. So the one liners really are I've got a tox ini file that I just added 312. Two, that's it. And then what else? GitHub actions, GitHub actions also does 312. Now, so I added 312 Dev to the to the test matrix. But so I released this this morning, I just wrote this up and sent it out. And I already got a question back from Brian skin saying what if it fails, I don't really want to like not release something just because 312 failed. And there's the if if you care about that and want to make sure that that doesn't muck up your pipelines, there's a way to deal with that. So there's, in the there's some documentation on GitHub actions don't how to deal with that. And it's using continue on error. And I'm using the the the documentation uses the variable experimental. And that sounds good to me. So I'm adding like a treat everything else normal without experimental but treat 312 Dev is experimental, which means continuing error. And all this does, the only thing it does, if you set that for particular thing is it allows your your different things that you're testing, it allows some of them them to fail and not stop others. So by default, if anything fails in the GitHub action pipeline, then it it stops running all the rest of them. And what this does is it allows the rest of it, but you still see that something failed, and you so you have to decide whether you care about that or not. But it'll let everything else pass. So it's

0:00 Unknown Speaker  28:17

0:00 also handy for ensuring that all of your tests continue, right. So if you just want to let it continue on everything, all your pipelines will always work. You'll

0:00 Michael Kennedy  28:28

0:00 never break the build and have to worry about it. Yeah, yeah, that's fine. Brian, what are you recommending? No, I actually had serious I liked that feature. And I love the experimental classification. That's cool.

0:00 Brian Okken  28:40

0:00 Yeah. So anyway, we got next

0:00 Michael Kennedy  28:43

0:00 well, over to Shawn.

0:00 Unknown Speaker  28:46

0:00 Yeah, so I was at in Las Vegas last week for reinvent from AWS. And I'm still not sure what day it is. It's it was Las Vegas as its own timezone, meaning all of them at the same time. But what I saw there was actually a really great chat by a company called EF education. First, it's been around for a long time, they have schools and offices and training centers all over the world. And they were talking about how they were using the cloud to reinvent online learning. And they've been doing online learning for years and years since the 90s. In fact, and what they recognized was that when we all went into the pandemic, and we did online learning, a lot of it looked like old school classrooms where everyone was neatly arranged in rows, and all sitting there facing forward and looking forward, just like we are kind of on this call right now. But they recognize that that's not really the way that classrooms work anymore. We don't all sit in rows and face forward towards the teacher. We we are more interactive. We're more engaged. We are more collaborative in the classroom, and they wanted to redesign their platform to do that. So they retooled their entire thing using AWS cloud, but what was great about their approach was that they also baked in a lot of science into the online learning. And what they were talking about was the way that we've been doing measurements and metrics and Science and Learning Online is always after the fact we look at test scores, or we look at assessments, we look at the way that people answer multiple choice questions, but we don't actually bring the science into the actual learning environment into the live classroom. So what they did was used a number of AWS services, which you could find on any platform, transcription, they used a bunch of NLP work with it a lot of analysis to be able to figure out how engaged every student was in the classroom, basically, as it was happening, so they could give feedback to the teachers to show them like, hey, these students are really engaged, these ones not so much. And then they also use some really great computer vision to see how people were interacting with the the coursework. So even just where their mouse was, and what the position was, as well as their level of engagement of engagement with the students. So what I really liked about this was they looked at this problem of online learning and tried to figure out how do we make it suck less for the teachers, for the students, for everybody involved? And what I got me thinking about in this talk was how could we use this in computer science? So how can we take that same level of engagement around learning a foreign language or learning business processes for an MBA and apply that to computer science in a really highly engaging sort of way, and also a very metrics driven sciency sort of way, so that everyone, student teacher administrator can get better information about how the learning is actually happening online,

0:00 Unknown Speaker  31:38

0:00 like educational data mining, and it's best.

0:00 Unknown Speaker  31:42

0:00 If they really took it to another level, I mean, you just their classroom experience is very dynamic, right? So it's almost that Twitch style. If you see on the screen here, the instructor is green screened in in just the corner of the screen, right. So it's not over in a box with a bunch of distractions. He's in the corner. And he's doing in this screenshot, he's doing a little bit of a mix and match and drag and drop. But they had other examples where he was, they had created a digital set where he was behind the counter at a hotel, and he could practice, you know, checking into a hotel using the foreign language with him as the receptionist and the student as the, the guests coming in.

0:00 Unknown Speaker  32:20

0:00 That's pretty cool. I think there's like, there's a lot of big uptick and a lot of the educational data mining side for the data scientist, and there's been a lot more ability to collect all this big data. From these websites, we got a slew tons and tons of data from COVID 19. And I think a lot of people are realizing, wow, we have so much data now cleaned, do and that's awesome. That's awesome. Just changes just changes the dynamics.

0:00 Michael Kennedy  32:48

0:00 I haven't been in the education space directly enough lately to know, but obviously, seeing kids through there, and you know, a lot of school myself, I feel like there's still probably a lot of opportunities for technology in education to make it smoother and nicer. Is that still true?

0:00 Unknown Speaker  33:04

0:00 Yeah, I mean, just think about, just think about when you provide a course where you do a course online, and you're in this box, and every all your core Hautes cohorts are kind of in this box, and you have to switch and then your slide takes over all the space when your students are trying to type and if you don't have to monitors, everything gets in the way. So this can actually reshape the way that learning online for adults for for kids can can change, right? So can you imagine your your attire your nice little cutout person on the bottom screen and your codes going up behind you as you type. So you're not in the way and you're still there? And you're still engaging? And you're still keeping you know that that physical, physical contact, I did air quotes or for those people listening for getting podcast, physical, you know, contact with your, your students. So yeah. And

0:00 Brian Okken  33:52

0:00 did you see your air quote that we were a podcast

0:00 Unknown Speaker  33:55

0:00 podcast? Can't take her anywhere.

0:00 Michael Kennedy  34:02

0:00 Shawn, what else was your takeaways from AWS reinvent,

0:00 Unknown Speaker  34:05

0:00 there were a ton of a ton of really great talks here. And I'm catching up on a lot of them that I missed online. But really, the main point was that everything is asynchronous. Everything is event driven. And it's pretty much Python all the way down. Like there's lambda functions everywhere. And most people are writing them in Python. There's, you know, plenty of other options as well. But it seems like it was the most popular choice for making things happen in the cloud.

0:00 Michael Kennedy  34:32

0:00 Looks like a lot of the videos, notes and other sessions are available on demand as well. So

0:00 Unknown Speaker  34:38

0:00 yeah, I'll put a link to the one with Werner Vogel, which was really great. That was all about the asynchronous world that we live in and making the making the cloud more asynchronous, as well as a forgot the other one I put in I think it was a link to Oh, a new feature that they added called Event bridge pipes, which I thought was kind of fun and a nice throwback. So event bridge on AWS is like a place where you can have event driven code. So one process will finish, it will post an event saying, Hey, I'm finished. And then another bit of code like a lambda or something else can pick it up and, and process it. But they took the idea of bash pipes or Unix style pipes. And they're using it to connect these events more directly. So instead of having to write a bunch of glue code, to be able to pass data and information about these events, from one process to another, from a producer to a consumer, you can just connect them together directly and say, okay, when this happens, then do this other thing, just like you would pipe output from one command into the input of another. Okay.

0:00 Michael Kennedy  35:37

0:00 Very interesting. Nice.

0:00 Brian Okken  35:38

0:00 I also got to give a shout out to AWS and for are in reinvent to get those videos out that quickly. I mean, it just stopped just a few days ago. So that's amazing. Yeah, they

0:00 Unknown Speaker  35:49

0:00 had live streams, for just about everything, you could register for free for it. Pretty much every breakout session I went into had a really nice camera in the back filming it. I think I even I was even interviewed on a video podcast while I was there. They really were embracing video and live streaming and making it available to as many people as they possibly could.

0:00 Unknown Speaker  36:09

0:00 I guess when you're like the top server holder and space provider, it doesn't matter, right?

0:00 Brian Okken  36:17

0:00 It's just money, right?

0:00 Unknown Speaker  36:19

0:00 Well, it's a great example of, you know, a company investing millions in a conference to get billions back from the developers using their platform. So seems like a smart investment.

0:00 Unknown Speaker  36:29

0:00 Absolutely.

0:00 Michael Kennedy  36:29

0:00 Well, yeah. But wait, before we move on really quick, just an audience. James just says that would be an awesome use attack in teaching calm. So let's talk about Sean.

0:00 Brian Okken  36:38

0:00 Um, do we have any extras? Let's I guess round it out, Kelly. Good.

0:00 Unknown Speaker  36:44

0:00 Yeah. So I just saw this. And it's only been out for six days. But there's a new special interest group with the PSF, which is an ED usig. And it's led by Timothy Wilson. So I actually reached out to them because they've got a great list of universities that are teaching Python. They've got about five high school schools that are teaching Python. And I'm like, wait, I know there's more. Because I know there's a lot of our listeners out there are teaching Python there. And with all the work that's done with the educational summit, I thought this was interesting. There's not much on it from the PSF. So I'm hoping to find some more information soon. But it's only been about six days. So I've got to be patient, I guess. Like go and launch with full five pages of information, please. Yeah, that's excellent. That's nice.

0:00 Brian Okken  37:34

0:00 Shawn, do you have any extras,

0:00 Unknown Speaker  37:36

0:00 I posted a couple of links to those talks at reinvent that I really liked. Go go check them out. They're pretty fun to watch. And like Michael said, I think pretty much all of the live streams are out there, certainly of all the keynotes, but was looking at dozens of different breakout sessions available now. And all of it online for free.

0:00 Michael Kennedy  37:53

0:00 Wonderful. All right, I got a couple real, real quick ones here. So I talked about text sniper, and text in neater a little while ago, which is just fantastic software for you know, select part of your screen. Whether this is a video you're watching with like a code demo, and they're like, oh, here call this API, or here's a link to just quick Command Shift to select. But we left our windows friends out of that. So who was it want to make sure I give some credit here. I don't remember the server I'm sorry. But someone Thank you listener sent in a text extractor, which comes from the Microsoft Power Tools for Windows PowerToys for Windows, which is the same thing for Windows. So if you're on Windows, you want to be able to you know, hit a button or hockey and then say I want to copy this out of the video. So I'm taking notes and I don't want to write you know, five lines of bullet points. I want to just paste them. Boom, here you go. So there's that. That's a great free one. Nice, did a quick article over on using Jinja partials to break up your, your HTML templates like Jinja and chameleon and Django templates into more reusable pieces. And yeah, that's that's it for me, just those quick ones.

0:00 Brian Okken  39:09

0:00 Okay. I just had like, I guess now that I have two teachers, and we were talking about how education has changed. I just want to hear if you have a similar experience. So my daughter is in junior high eighth grade, and she's the Susan six when they were home the whole year doing like in the did it all on iPads. Now they're back. They're back, of course, but they're still using the iPads a lot. And they're even turning a lot of their work in. I mean, and I didn't I didn't type when I was in junior high. I was writing stuff and they actually some of the writing assignments after now have to actually being paper, which is the unusual thing. Most of them are typing, and sometimes they're in paper and people and the kids complain of like, I don't want to actually write something. Have you guys deal with that at all

0:00 Unknown Speaker  39:59

0:00 or if Do I feel the same way? I hate writing?

0:00 Unknown Speaker  40:01

0:00 I do, too. Shawn and I would not have a printer in our room or like they're like, do you have scissors? Do you have a pencil? Like, what's the pencil? Who uses pencils in the school? I think it's, it slows down it's for, for us. For me, at least it's inefficient. I'd rather type something, I can even start typing while kids are up to me looking at me and I can without, you know, looking at the keyboard, and whereas if you're writing, you have to stop. And

0:00 Brian Okken  40:27

0:00 one of the interesting things is the due dates now, the due times are not on they're not 60 9pm. Yeah, they're, like midnight or something like that

0:00 Unknown Speaker  40:35

0:00 defaulted in most learning management systems and teachers are lazy, just like coders. Okay.

0:00 Brian Okken  40:42

0:00 Interesting. All right. Well, thanks.

0:00 Unknown Speaker  40:44

0:00 Yeah, well, I think the whole typing versus writing is it should have a purpose, right, there should be an intent behind it. So if the in some grade levels and in some settings, the idea of writing something out is really important, it might be to help slow down the thinking or even sometimes the tactile feel, and the feedback that you get from the pen or the pencil moving across the paper. Right, it's the satisfying part of using a grant. But as long as it's not, oh, write it because I told you to write, right so you don't see. Right. It should be it should be there for a purpose or a reason we we want you to write this out because we don't want you to slow down and think about what you're writing or take the time to process what you're writing instead of just you know, typing it out. That makes sense to me, but I never appreciated the distance because I said so. I'm concerned

0:00 Brian Okken  41:31

0:00 about the kids ability to doodle while the teacher is talking though. Are we losing that

0:00 Unknown Speaker  41:37

0:00 teachers don't like kids to doodle while they're talking anyways? Because they're like you're not listening. I mean, that's that's what said, right? We on the other hand, we have whiteboard markers all over the tape, you know, out there for the tables and the walls. That's something that Shawn and I started and has kept. Because we do like the process of writing like Sean said, I you know, what, write out your pseudocode think about what's going on. How would this look if you were writing writing something in an editor 100% but actual writing stories? I use Grammarly like your tweet.

0:00 Brian Okken  42:10

0:00 Well, I forgot we have a we haven't got to our joke yet.

0:00 Michael Kennedy  42:15

0:00 So this is this is true I actually have a really quick follow up now for people who are like in the digital side but kind of what this could check out paper like which is a screen protector for your iPad that gives it writing on paper feel nice for the pen that might be kind of nice because still writing on on glass is just odd. Alright, but onto the joke. We got a couple of jokes. Marco was picking on me earlier saying you use Macedon Michael I had no idea. But as much as I love it, I tried to pull up the jokes last week which were on Mastodon and they would not pull up if I pulled them up when I was logged into Mastodon they would say can't find these but if I pull them up in incognito window that's why you'll find them so I want to highlight a couple of jokes we talked about recursion like the week before and Kim van weeks has given the nature of the joke perhaps next week's Python bytes joke could just be see last week's pythons Python bytes joke and also I saw another joke or not really a joke but sort of a meme derived from a real thing is apparently crows or ravens can can learn recursion and so it's just a matter of time before they take over the world.

0:00 Unknown Speaker  43:28

0:00 Now they're gonna get stuck in in a race condition where they don't have a base base case and will never see him again.

0:00 Michael Kennedy  43:35

0:00 Like no exit condition.

0:00 Unknown Speaker  43:38

0:00 The call stack got too deep sorry.

0:00 Michael Kennedy  43:42

0:00 Raven fall over well, it just went in circles fatter and fatter until it goes all right then I got another mastodons sort of follow on joke because you know, Mastodon is like open source and like independent and not corporate and said but it's kind of weird. So this person says timeline of a new Macedon user day one This sucks servers are confusing. Why is my feed empty? Day two? There's no quote tweet. This is dumb. Day three. Macedon better make some changes if it wants to compete with Twitter day seven people are nice. Yeah, really? Day 10 I'm loving them. No, it has in real conversations day 15. The workers must seize the production. Production execute the capitalist mind. The billionaires first. Yeah, maybe I can see people getting a little too intense in this. And then let's see here. That's too true. I'm telling you. This is the timeline. We're like on day 15 around here. And then I saw some some one of y'all put this joke in here as well as someone who want to take that one.

0:00 Unknown Speaker  44:43

0:00 Yeah, this is the you know, my source for most of my geek humor, which is XKCD. And it's a matrix, a feature matrix of the various social media platforms. And so on the left side it's got things like direct messages, group chats, file transfer, built in games, user run instances doesn't work. Whereas central server so it just goes all the way down. And across the top. It's Twitter, Discord, Mastodon, Facebook just goes all the way to the right. And on the very right side, you know everything has like maybe half of the checkboxes that most filled in for features. But on the very right side it says the siberica Wireless handheld computer for teens from the year 2000. And every single checkbox it does all of it from 22 years ago. I love it. Interesting.

0:00 Michael Kennedy  45:27

0:00 We were living in the future and we just didn't know it.

0:00 Unknown Speaker  45:29

0:00 Yep. So now there's going to be a run on cyber eco computers on eBay. You'll never be able to find one now.

0:00 Michael Kennedy  45:35

0:00 It'll be like raspberry pies and you're just to be on them painting. Yeah, like that,

0:00 Brian Okken  45:39

0:00 quote, The future is now is not true. The future was 22 years ago. You missed it. The game? Well, so thanks. Thanks, everybody for coming on the show. It was a lot of fun. Thanks, Michael.

0:00 Unknown Speaker  45:53

0:00 Thank you for having us. We always enjoy it. Yeah. Yeah, bye everyone.

0:00 Transcribed by https://otter.ai

