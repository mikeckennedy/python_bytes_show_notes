
00:00:00.000 --> 00:00:04.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.500 --> 00:00:09.000
This is episode 238 recorded June 15th, 2021.


00:00:09.000 --> 00:00:10.000
I'm Michael Kennedy.


00:00:10.000 --> 00:00:11.000
And I'm Brian Okken.


00:00:11.000 --> 00:00:12.500
I'm Julia Signel.


00:00:12.500 --> 00:00:14.500
Hey, Julia. Thanks for coming on the show.


00:00:14.500 --> 00:00:16.000
Yeah, thanks for having me.


00:00:16.000 --> 00:00:19.500
Yeah, it's great. Why don't you tell folks a bit about yourself?


00:00:19.500 --> 00:00:24.500
Yeah, so I'm the head of open source at Saturn Cloud and a maintainer of Dask.


00:00:24.500 --> 00:00:26.500
So I split my time half and half.


00:00:26.500 --> 00:00:29.260
I spend half my time just doing regular


00:00:29.260 --> 00:00:31.020
maintenance-y stuff on Dask,


00:00:31.020 --> 00:00:33.700
and then half my time doing engineering


00:00:33.700 --> 00:00:36.180
and product management on Saturn Cloud.


00:00:36.180 --> 00:00:39.100
Saturn Cloud is a data science platform


00:00:39.100 --> 00:00:41.540
that really specializes in distributed Dask clusters


00:00:41.540 --> 00:00:43.400
and Jupyter, and making it really easy


00:00:43.400 --> 00:00:47.780
for people to get up and going with those things on AWS.


00:00:47.780 --> 00:00:50.620
- Yeah, Dask is really interesting.


00:00:50.620 --> 00:00:52.160
When I first heard about it, I thought,


00:00:52.160 --> 00:00:54.940
okay, this is a grid computing scale-out thing,


00:00:54.940 --> 00:00:57.180
which I probably don't have a lot of use for,


00:00:57.180 --> 00:00:59.220
but then I was speaking with Matthew Rocklin about it,


00:00:59.220 --> 00:01:01.620
and it has a lot of applicability,


00:01:01.620 --> 00:01:05.700
even if you have not huge data, huge clusters, right?


00:01:05.700 --> 00:01:07.780
Like you can say, even on your local machine,


00:01:07.780 --> 00:01:09.580
scale this out across my cores,


00:01:09.580 --> 00:01:11.800
or allow me to work with more data


00:01:11.800 --> 00:01:13.700
than will fit in RAM on my laptop,


00:01:13.700 --> 00:01:14.780
and stuff like that, right?


00:01:14.780 --> 00:01:15.620
It's a cool idea.


00:01:15.620 --> 00:01:18.020
- Yeah, yeah, it has like a whole number


00:01:18.020 --> 00:01:19.820
of different ways of interacting with it, right?


00:01:19.820 --> 00:01:21.500
Like there's that, there's like,


00:01:21.500 --> 00:01:23.940
just make this thing go faster by parallelizing it,


00:01:23.940 --> 00:01:26.260
there's all the data framey stuff,


00:01:26.260 --> 00:01:28.980
there's all the array stuff for more dimensional data.


00:01:28.980 --> 00:01:31.380
So it's got a large API.


00:01:31.380 --> 00:01:32.220
- Yeah, cool.


00:01:32.220 --> 00:01:33.420
And we're gonna touch on a couple of topics


00:01:33.420 --> 00:01:37.780
that are not all that unrelated to those things here.


00:01:37.780 --> 00:01:40.620
And so, yeah, speaking of data science,


00:01:40.620 --> 00:01:41.940
Brian, you wanna kick us off?


00:01:41.940 --> 00:01:43.180
- Sure.


00:01:43.180 --> 00:01:45.580
Yeah, the first thing I wanna cover is an article


00:01:45.580 --> 00:01:48.820
called "The Practical SQL for Data Analysis."


00:01:48.820 --> 00:01:51.340
This is by Aki Benita.


00:01:51.340 --> 00:01:56.140
So one of the things I liked about this


00:01:56.140 --> 00:01:58.740
is it was kind of talking about,


00:01:58.740 --> 00:02:00.980
the first bit of the article was talking about


00:02:00.980 --> 00:02:04.060
basically that with data science,


00:02:04.060 --> 00:02:06.860
you've got pandas and NumPy and stuff.


00:02:06.860 --> 00:02:09.260
And you also often you're dealing with a database,


00:02:09.260 --> 00:02:12.820
and SQL on the back end.


00:02:12.820 --> 00:02:16.340
So the first part of the article talks about


00:02:16.340 --> 00:02:19.660
how some things you can do both in pandas


00:02:19.660 --> 00:02:24.660
And in SQL, like SQL queries, it's faster in SQL.


00:02:24.660 --> 00:02:27.860
So there's a big chunk that's just talking


00:02:27.860 --> 00:02:29.820
about how that's faster.


00:02:29.820 --> 00:02:34.180
But then he also talks about just basically


00:02:34.180 --> 00:02:37.340
there's a lot of benefits to the flexibility


00:02:37.340 --> 00:02:39.620
and the comfortableness you can have with pandas though.


00:02:39.620 --> 00:02:42.380
So trade-offs as to where you can,


00:02:42.380 --> 00:02:45.140
of where you're gonna push it too far into SQL


00:02:45.140 --> 00:02:47.220
or having a split is good.


00:02:47.220 --> 00:02:52.180
But then he goes through and talks about a whole bunch of great examples of different


00:02:52.180 --> 00:02:57.660
things like pivot tables and roll-ups and choices and different things you can do with


00:02:57.660 --> 00:03:03.820
either Pandas or SQL and really what his recommendations are for whether it should be in Pandas or


00:03:03.820 --> 00:03:07.020
in SQL query and then how to do those queries.


00:03:07.020 --> 00:03:14.580
Because I mean really the gist of the article and this problem space is people are comfortable


00:03:14.580 --> 00:03:17.460
with pandas, but they don't really understand SQL queries.


00:03:17.460 --> 00:03:22.260
So this sort of good cheat sheet for how to do the queries is,


00:03:22.260 --> 00:03:24.580
I think, really kind of a cool thing.


00:03:24.580 --> 00:03:27.060
Yeah, I think it's really neat.


00:03:27.060 --> 00:03:30.980
And you have these problems, you know how to solve them in one or the other.


00:03:30.980 --> 00:03:33.860
And I think this compare and contrast is really valuable.


00:03:33.860 --> 00:03:37.980
Like I know how to take the mean of some column in SQL,


00:03:37.980 --> 00:03:39.380
but I haven't done it in pandas yet.


00:03:39.380 --> 00:03:40.420
Let's go see how to do that.


00:03:40.420 --> 00:03:42.940
Or I'm really good at doing pivot tables in pandas,


00:03:42.940 --> 00:03:45.460
but boy, I always kind of avoided joins in SQL.


00:03:45.460 --> 00:03:46.300
They scared me.


00:03:46.300 --> 00:03:48.020
And then how does that even translate, right?


00:03:48.020 --> 00:03:49.940
I think that back and forth is really valuable.


00:03:49.940 --> 00:03:51.060
- Yeah, yep.


00:03:51.060 --> 00:03:52.580
And then it covers things


00:03:52.580 --> 00:03:53.740
that I don't even know what they are,


00:03:53.740 --> 00:03:55.580
like aggregate expressions.


00:03:55.580 --> 00:03:56.620
I don't even know what that is,


00:03:56.620 --> 00:03:59.780
but apparently that's a thing that people do.


00:03:59.780 --> 00:04:01.780
- I can help you out at aggregate stuff.


00:04:01.780 --> 00:04:03.020
No, just kidding.


00:04:03.020 --> 00:04:04.260
Julie, what do you think of this?


00:04:04.260 --> 00:04:05.820
- Yeah, no, it seems, it's really cool.


00:04:05.820 --> 00:04:07.420
Like, I agree that like,


00:04:07.420 --> 00:04:10.540
that having the, having an appendix and then in SQL,


00:04:10.540 --> 00:04:12.300
that comparison is super helpful.


00:04:12.300 --> 00:04:14.980
Like SQL is always super scary to me


00:04:14.980 --> 00:04:16.860
and I always end up like Googling a bunch of stuff


00:04:16.860 --> 00:04:19.580
whenever I have to mangle my SQL.


00:04:19.580 --> 00:04:20.740
But I know it's so fast,


00:04:20.740 --> 00:04:23.420
so it's cool to see a way to access that.


00:04:23.420 --> 00:04:24.260
- Yeah, absolutely.


00:04:24.260 --> 00:04:25.140
This is a good one, Brian.


00:04:25.140 --> 00:04:26.940
I think a lot of people will find it useful.


00:04:26.940 --> 00:04:29.340
I also wanna just give a quick shout out


00:04:29.340 --> 00:04:30.500
for the past a little bit.


00:04:30.500 --> 00:04:32.220
Not too long ago, we talked about


00:04:32.220 --> 00:04:34.900
an efficient SQL on pandas with DuckDB


00:04:34.900 --> 00:04:36.820
where you actually do the SQL queries


00:04:36.820 --> 00:04:39.300
against pandas data frames.


00:04:39.300 --> 00:04:42.380
So if you're finding that you're trying to do something


00:04:42.380 --> 00:04:44.140
and maybe it would be better in SQL,


00:04:44.140 --> 00:04:47.240
but you don't wanna say completely switch all your data


00:04:47.240 --> 00:04:48.660
over to a relational database,


00:04:48.660 --> 00:04:50.300
you just kinda wanna stay in the Panda side,


00:04:50.300 --> 00:04:52.140
but there's that one or two things,


00:04:52.140 --> 00:04:53.300
like this is really cool,


00:04:53.300 --> 00:04:58.300
this sort of upgrade your data frame to execute SQL


00:04:58.300 --> 00:05:01.340
with the DuckDB query optimizer


00:05:01.340 --> 00:05:04.180
is also a kind of a nice intermediary there.


00:05:04.180 --> 00:05:06.260
- Yeah, Dask also does some,


00:05:06.260 --> 00:05:08.020
I'm gonna try not to make everything about Dask,


00:05:08.020 --> 00:05:11.020
but Dask does some things that are kind of,


00:05:11.020 --> 00:05:13.580
that kind of take some of the ideas from this article


00:05:13.580 --> 00:05:15.740
of like doing predicate pushdown of like,


00:05:15.740 --> 00:05:19.740
of pushing down some of the like filters into the read


00:05:19.740 --> 00:05:22.140
because it evaluates lazily.


00:05:22.140 --> 00:05:24.860
It doesn't have to like grab all the data greedily up front.


00:05:24.860 --> 00:05:26.660
It can like do that later.


00:05:26.660 --> 00:05:28.300
So you can get some of the benefits.


00:05:28.300 --> 00:05:29.120
- That's cool.


00:05:29.120 --> 00:05:30.660
And it can also distribute the filter bit,


00:05:30.660 --> 00:05:32.340
I guess at that point.


00:05:32.340 --> 00:05:33.340
Yeah, nice.


00:05:33.340 --> 00:05:36.580
All right, I wanna talk about the usual suspects.


00:05:36.580 --> 00:05:38.900
So, okay, that was a pretty good show.


00:05:38.900 --> 00:05:41.060
Was that Quentin Tarantino or something like that?


00:05:41.060 --> 00:05:42.100
It's not actually about this.


00:05:42.100 --> 00:05:45.340
This comes to us from Ruslan Portnoy.


00:05:45.340 --> 00:05:46.940
And thank you for sending this in.


00:05:46.940 --> 00:05:50.900
Mentioned an article that has this really interesting idea.


00:05:50.900 --> 00:05:53.540
How do you apply git blame


00:05:53.540 --> 00:05:56.380
when you encounter a Python traceback?


00:05:56.380 --> 00:05:57.300
So here's the scenario.


00:05:57.300 --> 00:06:00.940
Your code crashes and you either print out the traceback


00:06:00.940 --> 00:06:03.820
or Python does it for you because it's just crashed.


00:06:03.820 --> 00:06:06.300
And normally it says, here's the value,


00:06:06.300 --> 00:06:08.500
here's the line of code, here's the file it's in,


00:06:08.500 --> 00:06:11.420
here's the next line in the call stack,


00:06:11.420 --> 00:06:12.900
here's the line of code it's in.


00:06:12.900 --> 00:06:15.860
The idea is you can take git blame,


00:06:15.860 --> 00:06:18.060
which is a command that says,


00:06:18.060 --> 00:06:20.020
show me who changed this line of code


00:06:20.020 --> 00:06:21.500
or who wrote this line of code,


00:06:21.500 --> 00:06:24.420
at least touched it last on every single line of code.


00:06:24.420 --> 00:06:26.100
And I love this whole idea of like,


00:06:26.100 --> 00:06:26.940
all right, who did this?


00:06:26.940 --> 00:06:28.380
And sometimes I'll come across code.


00:06:28.380 --> 00:06:30.620
I'm like, this is so crappy, like who did this?


00:06:30.620 --> 00:06:31.680
Oh, wait, that's me.


00:06:31.680 --> 00:06:35.020
Okay, well, at least I know how I would feel about it.


00:06:35.020 --> 00:06:38.100
But the idea is what if your trace back on each line


00:06:38.100 --> 00:06:40.620
where it had an exception could also show


00:06:40.620 --> 00:06:42.280
who wrote that line of code.


00:06:42.280 --> 00:06:43.120
Cool, huh?


00:06:43.120 --> 00:06:43.980
- Yeah, that'd be great.


00:06:43.980 --> 00:06:45.360
- Yeah, so let's check it out.


00:06:45.360 --> 00:06:46.300
It's pretty straightforward.


00:06:46.300 --> 00:06:49.180
This is an article by Afar Khoren,


00:06:49.180 --> 00:06:51.940
and it basically uses two libraries


00:06:51.940 --> 00:06:54.260
that are themselves both pretty straightforward.


00:06:54.260 --> 00:06:57.560
So like here's a straightforward example of a trace back,


00:06:57.560 --> 00:07:00.180
like trying to pop something off of an empty list.


00:07:00.180 --> 00:07:03.380
It says on this line in the function popSum,


00:07:03.380 --> 00:07:06.000
you know, there's this line here in the call stack


00:07:06.000 --> 00:07:07.500
and then the next line, this line in the call stack


00:07:07.500 --> 00:07:09.460
and eventually raise a value error,


00:07:09.460 --> 00:07:12.500
you know, empty range, can't pop nothing off,


00:07:12.500 --> 00:07:14.480
you know, something off of nothing, basically.


00:07:14.480 --> 00:07:16.320
But this doesn't show you any information about


00:07:16.320 --> 00:07:17.740
like maybe who wrote that line


00:07:17.740 --> 00:07:19.780
and who wrote this other line up here, right?


00:07:19.780 --> 00:07:24.240
So what they did is they took a couple of modules,


00:07:24.240 --> 00:07:26.700
trace back and then line cache.


00:07:26.700 --> 00:07:29.480
And it turns out when trace back shows you this trace back,


00:07:29.480 --> 00:07:31.980
that line, it uses line cache to figure out,


00:07:31.980 --> 00:07:36.020
Okay, from this actual, I'm guessing, byte code


00:07:36.020 --> 00:07:40.820
that it's gonna run, this CPython interpreter code,


00:07:40.820 --> 00:07:42.780
where did it, like what line of file


00:07:42.780 --> 00:07:45.060
did this actually come from, right?


00:07:45.060 --> 00:07:48.620
So here's the insight or the thing.


00:07:48.620 --> 00:07:51.580
You can actually change what's in the cache.


00:07:51.580 --> 00:07:53.340
And because it's a cache,


00:07:53.340 --> 00:07:55.180
once it's figured out what the lines are,


00:07:55.180 --> 00:07:56.620
it's not gonna read it again.


00:07:56.620 --> 00:08:00.940
So it's like a list for each line that you get back.


00:08:00.940 --> 00:08:02.420
and you can just change the value.


00:08:02.420 --> 00:08:05.460
So it said, okay, well, here's like return random.


00:08:05.460 --> 00:08:06.740
That's what the line of text was.


00:08:06.740 --> 00:08:07.560
They're like, no, no, no,


00:08:07.560 --> 00:08:09.060
there's nothing to see here, move along.


00:08:09.060 --> 00:08:11.320
If you make that and then you cause it to crash again,


00:08:11.320 --> 00:08:14.540
what comes out is, if you go a little bit further down,


00:08:14.540 --> 00:08:16.540
normal code, normal code, or normal trace back,


00:08:16.540 --> 00:08:17.860
normal trace back, then it just,


00:08:17.860 --> 00:08:20.140
instead of the line of code, it says nothing to see here,


00:08:20.140 --> 00:08:21.160
please move along.


00:08:21.160 --> 00:08:24.180
All right, so what are you gonna do with that


00:08:24.180 --> 00:08:26.320
now that you realize like you can actually change


00:08:26.320 --> 00:08:28.060
what appears in the trace back?


00:08:28.060 --> 00:08:31.380
So you write a little regular expression


00:08:31.380 --> 00:08:35.420
to go and execute get blame on the various files,


00:08:35.420 --> 00:08:38.940
and then to re-inject that back into line cache.


00:08:38.940 --> 00:08:40.440
And so what they do is they just put,


00:08:40.440 --> 00:08:41.580
if they know the blame,


00:08:41.580 --> 00:08:43.580
they just put, you know, like 80 lines,


00:08:43.580 --> 00:08:46.100
80 characters, up to 80 characters of the line,


00:08:46.100 --> 00:08:49.020
and then edit it on such and such date


00:08:49.020 --> 00:08:50.580
by such and such person,


00:08:50.580 --> 00:08:53.460
and here's the commit message, right?


00:08:53.460 --> 00:08:56.300
And so just basically shelling out to get blame


00:08:56.300 --> 00:08:57.400
when it crashes now,


00:08:57.400 --> 00:08:59.920
you get some really cool stuff like on this slide,


00:08:59.920 --> 00:09:02.780
it says this is edited by many,


00:09:02.780 --> 00:09:06.720
many days ago by so-and-so in this Git commit and so on.


00:09:06.720 --> 00:09:10.400
What's interesting, this is already in itself useful, I think.


00:09:10.400 --> 00:09:13.520
But what's more interesting is other tools use this as well.


00:09:13.520 --> 00:09:15.280
For example, if you use PUDB,


00:09:15.280 --> 00:09:18.320
which is a visual debugger,


00:09:18.320 --> 00:09:20.120
it's like a command line one,


00:09:20.120 --> 00:09:22.620
visual in the sense of like Emacs is visual,


00:09:22.620 --> 00:09:24.880
not like PyCharm is visual.


00:09:24.880 --> 00:09:26.880
But it will actually pull up that data.


00:09:26.880 --> 00:09:29.700
So you can see they jumped into the PDB bugger


00:09:29.700 --> 00:09:32.540
and it's actually showing all this get blame attribution


00:09:32.540 --> 00:09:33.700
as well that they've added.


00:09:33.700 --> 00:09:35.300
So yeah, pretty interesting.


00:09:35.300 --> 00:09:36.140
What do you all think?


00:09:36.140 --> 00:09:37.220
- Yeah, I think that looks really cool.


00:09:37.220 --> 00:09:40.020
I mean, I always do get blame


00:09:40.020 --> 00:09:41.740
whenever I run into something that's weird


00:09:41.740 --> 00:09:42.900
with the hope that someone else


00:09:42.900 --> 00:09:44.340
will be able to explain it to me.


00:09:44.340 --> 00:09:45.540
- Exactly, who knows about this


00:09:45.540 --> 00:09:47.820
or who do I talk to about breaking this?


00:09:47.820 --> 00:09:49.980
- Right, yeah, you could even put like PR numbers


00:09:49.980 --> 00:09:51.060
and stuff in here, right?


00:09:51.060 --> 00:09:52.260
And that'd be pretty cool.


00:09:52.260 --> 00:09:53.740
- Oh, PR numbers, very cool.


00:09:53.740 --> 00:09:54.980
- Yeah, that'd be super cool.


00:09:54.980 --> 00:09:56.220
- Yeah, one of the things I like,


00:09:56.220 --> 00:10:00.520
I don't really like that the name Git blame, but it's there.


00:10:00.520 --> 00:10:03.900
But I agree with Julia that the main thing I use it for


00:10:03.900 --> 00:10:06.060
isn't to try to figure out who broke it,


00:10:06.060 --> 00:10:09.260
but who to ask about this chunk of the code.


00:10:09.260 --> 00:10:11.180
- I agree.


00:10:11.180 --> 00:10:12.300
'Cause usually when you see something


00:10:12.300 --> 00:10:14.260
that's really confusing or weird, you're like,


00:10:14.260 --> 00:10:17.180
I know they didn't just pick the hard way of doing this


00:10:17.180 --> 00:10:19.100
because they didn't wanna do the easy way.


00:10:19.100 --> 00:10:21.420
There's something that I don't fully understand,


00:10:21.420 --> 00:10:23.620
some edge case that's crazy here.


00:10:23.620 --> 00:10:25.740
I'm gonna go talk to that person, so yeah.


00:10:25.740 --> 00:10:28.180
- Also the how long ago it was edited.


00:10:28.180 --> 00:10:30.220
So if there was something edited yesterday,


00:10:30.220 --> 00:10:31.740
that's probably the problem.


00:10:31.740 --> 00:10:32.580
- Yeah, exactly.


00:10:32.580 --> 00:10:33.900
Like in this little screenshot here,


00:10:33.900 --> 00:10:38.040
some of these are edited like 1,427 days ago.


00:10:38.040 --> 00:10:41.180
That's probably not the problem, maybe, but probably not.


00:10:41.180 --> 00:10:42.820
- I feel like I have the opposite assumption.


00:10:42.820 --> 00:10:44.860
Like if something is from six years ago and it's weird,


00:10:44.860 --> 00:10:47.500
I'm like, well, probably things were different back then.


00:10:47.500 --> 00:10:49.300
And like, you know.


00:10:49.300 --> 00:10:51.300
- Yeah, yeah, it's no longer applicable


00:10:51.300 --> 00:10:53.340
to the new data, new situation.


00:10:53.340 --> 00:10:54.180
Yeah.


00:10:54.180 --> 00:10:55.540
- Oh, that'd be an interesting thing also


00:10:55.540 --> 00:10:57.620
is to have like a tool that would tell you


00:10:57.620 --> 00:10:59.740
if something's like over a thousand days old


00:10:59.740 --> 00:11:02.420
or something like that, you probably should go refactor it


00:11:02.420 --> 00:11:05.340
to make sure somebody understands that code.


00:11:05.340 --> 00:11:07.340
- Yeah, yeah, for sure.


00:11:07.340 --> 00:11:09.020
All right, jumping back to the first item really quick,


00:11:09.020 --> 00:11:11.540
in the live stream, Alexander out there, hey Alexander,


00:11:11.540 --> 00:11:14.980
says, "I wonder if graph databases with Gremlin queries


00:11:14.980 --> 00:11:16.820
"could be more suitable for data science.


00:11:16.820 --> 00:11:18.880
"SQL joins are way harder."


00:11:18.880 --> 00:11:20.860
Yeah, graph databases are pretty interesting.


00:11:20.860 --> 00:11:22.580
If you're trying to understand the relationships,


00:11:22.580 --> 00:11:23.660
that may well be better.


00:11:23.660 --> 00:11:24.500
I don't know.


00:11:24.500 --> 00:11:25.660
- So, Lily, do you got any thoughts on this?


00:11:25.660 --> 00:11:29.000
- I don't know anything about graph databases.


00:11:29.000 --> 00:11:30.240
So, out of my league.


00:11:30.240 --> 00:11:34.140
- I didn't have a desire to understand graph databases


00:11:34.140 --> 00:11:36.860
until I found out that there were Gremlin queries.


00:11:36.860 --> 00:11:38.540
Now I think I wanna know.


00:11:38.540 --> 00:11:41.340
- Brian, they don't start out as a Gremlin queries.


00:11:41.340 --> 00:11:43.700
They're mogwai inserts.


00:11:43.700 --> 00:11:45.820
And then if you insert them after midnight,


00:11:45.820 --> 00:11:47.260
then they become a Gremlin query.


00:11:47.260 --> 00:11:49.100
I mean, come on, we all know how it goes.


00:11:49.100 --> 00:11:51.060
You definitely don't wanna get them wet.


00:11:51.060 --> 00:11:53.260
Oh, that's an old show.


00:11:53.260 --> 00:11:54.820
I'm not sure if everyone's gonna get that reference,


00:11:54.820 --> 00:11:56.500
but yeah, I love that show.


00:11:56.500 --> 00:11:59.780
Okay, anyway, let's move on to the next one.


00:11:59.780 --> 00:12:01.900
The next one is you, Julia.


00:12:01.900 --> 00:12:05.180
- Yeah, so I wanted to highlight FS spec.


00:12:05.180 --> 00:12:06.820
So file system spec for people


00:12:06.820 --> 00:12:08.940
who can't hear letters very well.


00:12:08.940 --> 00:12:14.380
So this is the basis for S3 FS.


00:12:14.380 --> 00:12:17.620
FS, I'm not getting the letters right,


00:12:17.620 --> 00:12:20.980
but there's one for GCP, there's one for S3.


00:12:20.980 --> 00:12:25.480
and basically it's a file system storage interface


00:12:25.480 --> 00:12:27.940
or like the basis for a file system.


00:12:27.940 --> 00:12:31.840
And so you can do things like you can open just files


00:12:31.840 --> 00:12:34.440
as you can just take a path and open it


00:12:34.440 --> 00:12:38.720
as a file object in Python and read it


00:12:38.720 --> 00:12:42.440
with all the normal like read, write operations.


00:12:42.440 --> 00:12:43.280
- Oh, interesting.


00:12:43.280 --> 00:12:44.480
- But from anywhere.


00:12:44.480 --> 00:12:49.480
So like there's all these different ones for S3, for GCFs.


00:12:49.480 --> 00:12:54.480
GCFs, and even for HTTP, and just basically


00:12:54.480 --> 00:12:59.100
anything you can imagine, anywhere you can imagine


00:12:59.100 --> 00:13:01.780
a file being, either there's already been


00:13:01.780 --> 00:13:05.440
one of these written, it's kind of like a,


00:13:05.440 --> 00:13:08.100
it's an interface and then you write different packages


00:13:08.100 --> 00:13:10.420
on top of it that are like drivers or something,


00:13:10.420 --> 00:13:12.620
they have some name for it.


00:13:12.620 --> 00:13:16.100
And it allows you to treat the file system


00:13:16.100 --> 00:13:18.500
as like this interchangeable building block,


00:13:18.500 --> 00:13:22.540
So you don't end up writing like photo three code


00:13:22.540 --> 00:13:24.160
or something that's like very specific


00:13:24.160 --> 00:13:26.780
to a specific cloud storage.


00:13:26.780 --> 00:13:28.660
You write like this more general code


00:13:28.660 --> 00:13:32.740
and then it's really useful for like a lot of free datasets


00:13:32.740 --> 00:13:34.180
that are hosted on different clouds,


00:13:34.180 --> 00:13:35.980
but like they'll sometimes be on one cloud


00:13:35.980 --> 00:13:36.940
and sometimes be on another,


00:13:36.940 --> 00:13:38.820
but like basically it's the same data.


00:13:38.820 --> 00:13:42.260
Or if you're at a company and you wanna like switch clouds,


00:13:42.260 --> 00:13:45.380
it just makes that whole thing so much easier.


00:13:45.380 --> 00:13:47.820
- It looks really, really useful,


00:13:47.820 --> 00:13:50.740
especially for avoiding cloud lock-in.


00:13:50.740 --> 00:13:51.940
- Yeah, yeah.


00:13:51.940 --> 00:13:53.220
And you can always write,


00:13:53.220 --> 00:13:54.740
like you can always write your own one.


00:13:54.740 --> 00:13:55.860
If something else pops up,


00:13:55.860 --> 00:13:58.180
you can write your own implementation of that.


00:13:58.180 --> 00:14:00.940
- Right, so there's an example here,


00:14:00.940 --> 00:14:02.860
talking about using a file system in the docs,


00:14:02.860 --> 00:14:04.360
that says something to the effect of,


00:14:04.360 --> 00:14:06.040
well, you want to open up a CSV


00:14:06.040 --> 00:14:08.620
and feed it off to pandas read CSV.


00:14:08.620 --> 00:14:11.340
So normally you would say open CSV file,


00:14:11.340 --> 00:14:13.300
and then you just say pandas read CSV


00:14:13.300 --> 00:14:14.780
and give it the file stream.


00:14:14.780 --> 00:14:16.220
But what if that's on the internet?


00:14:16.220 --> 00:14:18.420
What if that's on S3 with authentication?


00:14:18.420 --> 00:14:21.020
What if that's somewhere else, right?


00:14:21.020 --> 00:14:23.020
And so with this one, you can just say,


00:14:23.020 --> 00:14:26.900
FS file system spec open, here's a URL.


00:14:26.900 --> 00:14:28.140
And now that's a stream, right?


00:14:28.140 --> 00:14:32.180
Or that could be, here's an S3 location, S3 bucket.


00:14:32.180 --> 00:14:33.500
Go get that, right?


00:14:33.500 --> 00:14:34.340
- Yeah, yeah.


00:14:34.340 --> 00:14:36.900
So instead of passing the path directly


00:14:36.900 --> 00:14:40.140
into the read function, you pass in the file object.


00:14:40.140 --> 00:14:43.420
And it's really powerful.


00:14:43.420 --> 00:14:46.260
Like it seems like a thing that we shouldn't need,


00:14:46.260 --> 00:14:49.180
but files get, like the file locations


00:14:49.180 --> 00:14:51.660
can get so crazy so quickly.


00:14:51.660 --> 00:14:53.260
And this just really helps simplify


00:14:53.260 --> 00:14:55.980
and like make it so you don't have to think about this stuff


00:14:55.980 --> 00:14:57.980
which I think is what most people want.


00:14:57.980 --> 00:14:59.260
It's what I want.


00:14:59.260 --> 00:15:00.180
- Yeah, for sure.


00:15:00.180 --> 00:15:03.060
So like there's a local file system option,


00:15:03.060 --> 00:15:05.540
but then you could also have an FTP file system


00:15:05.540 --> 00:15:07.500
or you could have something else, right?


00:15:07.500 --> 00:15:08.740
All sorts of different options.


00:15:08.740 --> 00:15:10.660
- Yeah, yeah, all sorts of stuff.


00:15:10.660 --> 00:15:12.220
- Yeah, okay, that's cool.


00:15:12.220 --> 00:15:13.420
Brian, what do you think?


00:15:13.420 --> 00:15:15.620
Does this have any applicability for you?


00:15:15.620 --> 00:15:16.780
- Oh yeah, definitely.


00:15:16.780 --> 00:15:21.100
And that's a great abstraction layer to put in place


00:15:21.100 --> 00:15:25.140
to just have reading as if it was a file and have it moved.


00:15:25.140 --> 00:15:27.460
It also helps you develop tools locally


00:15:27.460 --> 00:15:30.860
and then be able to deploy them into a larger space.


00:15:30.860 --> 00:15:31.860
So it's cool.


00:15:31.860 --> 00:15:32.700
- Yeah, for sure.


00:15:32.700 --> 00:15:35.100
One of the things that always makes me a little hesitant


00:15:35.100 --> 00:15:38.220
when I hear people say things like, "We're cloud native."


00:15:38.220 --> 00:15:40.420
Like my app is cloud native.


00:15:40.420 --> 00:15:41.860
That's always code word for me.


00:15:41.860 --> 00:15:43.580
like I will never be able to run my app


00:15:43.580 --> 00:15:45.420
unless I'm connected to the internet.


00:15:45.420 --> 00:15:46.340
You know, it's like, it depends


00:15:46.340 --> 00:15:47.700
on all these services together


00:15:47.700 --> 00:15:50.300
and there's no way I can recreate that locally.


00:15:50.300 --> 00:15:52.220
But something like this could allow you to say,


00:15:52.220 --> 00:15:54.620
well, we're gonna have a local file system version,


00:15:54.620 --> 00:15:55.820
but then when we go to production,


00:15:55.820 --> 00:15:58.900
we'll switch to S3 or, you know, pick something.


00:15:58.900 --> 00:16:01.060
- I've always wanted to make it either a t-shirt


00:16:01.060 --> 00:16:02.340
or a sticker or both that says,


00:16:02.340 --> 00:16:04.180
not a cloud native, just visiting.


00:16:04.180 --> 00:16:07.660
- Nice, I also think Brian,


00:16:07.660 --> 00:16:09.940
there might be testing opportunities here.


00:16:09.940 --> 00:16:10.900
- Yeah, definitely.


00:16:10.900 --> 00:16:13.300
give it a test file system. That'd be cool.


00:16:13.300 --> 00:16:20.100
Yeah, and like Julia said, swapping things out to just have your logic not have to care where it's coming from.


00:16:20.100 --> 00:16:29.820
But I guess it would make sure, you'd have to make sure all of the interfaces, the different storage systems really are equal.


00:16:29.820 --> 00:16:32.300
But I guess you'd try that out yourself.


00:16:32.300 --> 00:16:34.500
Yeah, there's like kind of a bucket, right?


00:16:34.500 --> 00:16:38.900
That there's kind of like a dict that you can pass, which is like storage options.


00:16:38.900 --> 00:16:42.780
So I think that might get a little wonky


00:16:42.780 --> 00:16:44.660
depending on what the different backends need.


00:16:44.660 --> 00:16:47.440
But the general principles are the same.


00:16:47.440 --> 00:16:49.420
And it also, I should have said this originally,


00:16:49.420 --> 00:16:53.100
but it also allows, the FSSpec itself can contain logic


00:16:53.100 --> 00:16:56.820
to do things that are general to all the different libraries


00:16:56.820 --> 00:16:58.820
like caching and things like that.


00:16:58.820 --> 00:16:59.660
To all the different--


00:16:59.660 --> 00:17:00.480
- Oh, well, interesting.


00:17:00.480 --> 00:17:01.320
Like you could put a caching layer


00:17:01.320 --> 00:17:04.660
on top of arbitrary things like S3,


00:17:04.660 --> 00:17:07.660
Google Storage, and Azure Buckets or Blob Storage.


00:17:07.660 --> 00:17:11.180
- Yeah, yeah, maybe even save money on bandwidth there


00:17:11.180 --> 00:17:12.740
if you can do some caching.


00:17:12.740 --> 00:17:14.260
- Yeah, if you can do it right.


00:17:14.260 --> 00:17:15.660
- Yeah, super, super neat.


00:17:15.660 --> 00:17:17.680
Brian, you're gonna tell us about how to slim down


00:17:17.680 --> 00:17:19.260
our Docker containers, but before you do,


00:17:19.260 --> 00:17:22.400
I wanna tell people about our sponsor for this episode,


00:17:22.400 --> 00:17:23.700
brought to you by Sentry.


00:17:23.700 --> 00:17:25.380
So how would you like to remove a little stress


00:17:25.380 --> 00:17:27.780
from your life in addition to just abstracting


00:17:27.780 --> 00:17:30.540
your file system, maybe tracking down some errors?


00:17:30.540 --> 00:17:33.480
So do you worry that your users may be having difficulties


00:17:33.480 --> 00:17:35.860
or encountering errors with your app right now?


00:17:35.860 --> 00:17:38.740
And would you even know it until they send that support email?


00:17:38.740 --> 00:17:41.420
How much better would it be if you got the error


00:17:41.420 --> 00:17:43.580
or performance details sent right away


00:17:43.580 --> 00:17:44.940
and with all the call stack,


00:17:44.940 --> 00:17:46.780
maybe you would get blame in there.


00:17:46.780 --> 00:17:48.940
The local variables, the active user


00:17:48.940 --> 00:17:51.100
who was logged in while this happened,


00:17:51.100 --> 00:17:51.920
all that kind of stuff.


00:17:51.920 --> 00:17:54.100
So with Sentry, it's not only possible,


00:17:54.100 --> 00:17:55.660
it's actually really simple.


00:17:55.660 --> 00:17:57.500
I've used this on Sentry,


00:17:57.500 --> 00:17:59.500
I've used Sentry on our websites before,


00:17:59.500 --> 00:18:00.620
so it's on Python Bytes,


00:18:00.620 --> 00:18:02.780
stock Python training, all those different sites.


00:18:02.780 --> 00:18:04.700
And I've actually had someone encounter an error


00:18:04.700 --> 00:18:07.700
trying to buy a course over on TalkByThon training.


00:18:07.700 --> 00:18:09.140
I got the Sentry notification.


00:18:09.140 --> 00:18:11.660
I said, "Oh, geez, I can't believe this problem."


00:18:11.660 --> 00:18:13.280
Crept in here and I fixed it really quick


00:18:13.280 --> 00:18:15.220
and started to roll out the fix


00:18:15.220 --> 00:18:16.620
and actually got an email.


00:18:16.620 --> 00:18:18.460
They said, "Hey, we're having this problem buying a course."


00:18:18.460 --> 00:18:20.060
I said, "I know, I've almost got it fixed.


00:18:20.060 --> 00:18:22.220
Just give me a moment and try again."


00:18:22.220 --> 00:18:23.660
And they were just like, "What?


00:18:23.660 --> 00:18:24.820
That doesn't make sense."


00:18:24.820 --> 00:18:26.060
So they were very surprised.


00:18:26.060 --> 00:18:27.940
And so it's surprising to let your users


00:18:27.940 --> 00:18:30.780
create your Sentry account at pythonbytes.fm/sentry.


00:18:30.780 --> 00:18:33.240
And when you sign up, there's a little got a promo code.


00:18:33.240 --> 00:18:35.120
make sure that you put Python Bytes,


00:18:35.120 --> 00:18:38.140
all one word, all caps, with a Y in there,


00:18:38.140 --> 00:18:39.240
and you'll get two free months


00:18:39.240 --> 00:18:41.280
plus a bunch of extra features and so on.


00:18:41.280 --> 00:18:44.800
So also, it really lets them know that you came from us


00:18:44.800 --> 00:18:45.840
rather than just somewhere else,


00:18:45.840 --> 00:18:47.040
and that helps support the show a lot.


00:18:47.040 --> 00:18:50.720
So, pythonbytes.fm/sentry and promo code Python Bytes.


00:18:50.720 --> 00:18:53.240
Awesome, thanks for supporting the show, Sentry.


00:18:53.240 --> 00:18:56.320
And Brian, let's talk Docker.


00:18:56.320 --> 00:18:57.760
- Yeah, let's talk Docker.


00:18:57.760 --> 00:19:00.220
I mean, I'm starting to use Docker more and more,


00:19:00.220 --> 00:19:02.560
and I like the experience,


00:19:02.560 --> 00:19:06.040
But I was interested when this article came up.


00:19:06.040 --> 00:19:09.120
So it was in June, I saw this article called


00:19:09.120 --> 00:19:11.840
the Need for Slimmer Containers.


00:19:11.840 --> 00:19:16.120
And this is from somebody Ivan,


00:19:16.120 --> 00:19:18.600
I'm not gonna try his last name, Ivan something.


00:19:18.600 --> 00:19:20.920
But anyway, it's an interesting discussion.


00:19:20.920 --> 00:19:25.840
And the idea around the original post was


00:19:25.840 --> 00:19:29.360
that there's now a Docker scan that you can use.


00:19:29.360 --> 00:19:33.140
So you can use Docker scan to scan for vulnerabilities


00:19:33.140 --> 00:19:35.120
in your Docker containers.


00:19:35.120 --> 00:19:36.440
And this, I haven't thought,


00:19:36.440 --> 00:19:38.320
well, I'll look at some of the standard


00:19:38.320 --> 00:19:40.640
Python containers that are available.


00:19:40.640 --> 00:19:42.840
- Right, theoretically, some of the things that are nice


00:19:42.840 --> 00:19:45.160
is I can just go and say Docker,


00:19:45.160 --> 00:19:49.320
or in my Docker container, I can say from Python colon 39.


00:19:49.320 --> 00:19:51.640
And I don't have to think about how do I install Python?


00:19:51.640 --> 00:19:53.040
How do I keep it up to date?


00:19:53.040 --> 00:19:54.440
You know, make sure that pip is there


00:19:54.440 --> 00:19:55.600
and that I'll be able and, you know,


00:19:55.600 --> 00:19:58.360
pip install stuff that needs to do build things.


00:19:58.360 --> 00:19:59.760
that all that stuff will be there, right?


00:19:59.760 --> 00:20:02.320
So it seems like, of course, this is what you want.


00:20:02.320 --> 00:20:04.340
>> Yeah. Well, and also that's


00:20:04.340 --> 00:20:06.760
one of the neat things about Dockers.


00:20:06.760 --> 00:20:09.060
I can just say, I have these standard parts,


00:20:09.060 --> 00:20:12.600
now I just want to put my custom stuff on top of it.


00:20:12.600 --> 00:20:16.600
It's great. Well, what did he find?


00:20:16.600 --> 00:20:20.720
Docker scan apparently uses a third-party tool


00:20:20.720 --> 00:20:24.400
called a Snake, S-N-Y-K, container.


00:20:24.400 --> 00:20:26.740
We've covered Snake before,


00:20:26.740 --> 00:20:31.500
not the container version, but we covered Snake in episode 227.


00:20:31.500 --> 00:20:35.720
It's looking for vulnerabilities and that's a good thing,


00:20:35.720 --> 00:20:37.660
but he found them in everything.


00:20:37.660 --> 00:20:41.360
He found them in all of the standard Python ones,


00:20:41.360 --> 00:20:44.820
except for Alpine, I guess.


00:20:44.820 --> 00:20:47.380
He didn't really know what to make of it really,


00:20:47.380 --> 00:20:50.260
he was just reporting his results that


00:20:50.260 --> 00:20:53.800
maybe Alpine is the only one with few vulnerabilities.


00:20:53.800 --> 00:20:59.880
But then this went out on Hacker News and there was a big discussion around it.


00:20:59.880 --> 00:21:02.880
So he updated the article,


00:21:02.880 --> 00:21:06.360
which I appreciate with some of the feedback that he got.


00:21:06.360 --> 00:21:08.640
Some of the feedback was that


00:21:08.640 --> 00:21:12.480
these vulnerability checkers sometimes give you false positives.


00:21:12.480 --> 00:21:16.200
I don't really have enough experience to know what that,


00:21:16.200 --> 00:21:17.400
well, I know what that means,


00:21:17.400 --> 00:21:20.040
but I don't have enough experience to know if these really are


00:21:20.040 --> 00:21:24.400
false positives or if they're actual vulnerabilities or not.


00:21:24.400 --> 00:21:30.160
The other thing that maybe some people


00:21:30.160 --> 00:21:33.720
suggested that these standard ones really aren't updated very much.


00:21:33.720 --> 00:21:35.680
I don't really know much about that either.


00:21:35.680 --> 00:21:37.440
If they're not, that's a bummer


00:21:37.440 --> 00:21:40.360
because I think people are relying on them.


00:21:40.360 --> 00:21:43.200
I actually just am left


00:21:43.200 --> 00:21:46.520
with a little bit of a confusion as to what to do.


00:21:46.520 --> 00:21:50.400
I want to also mention that the Alpine is current one,


00:21:50.400 --> 00:21:54.640
there's original article, he says Alpine is pretty good for vulnerabilities.


00:21:54.640 --> 00:21:56.600
But then his follow-up says,


00:21:56.600 --> 00:21:59.520
it doesn't, there's a lot of applications that can't run on


00:21:59.520 --> 00:22:01.760
Alpine because of some issues or another.


00:22:01.760 --> 00:22:03.960
So anyway, I'm not sure what to make of it.


00:22:03.960 --> 00:22:06.400
So I was hoping Michael might give us insight.


00:22:06.400 --> 00:22:09.320
>> I did some thinking about this this morning.


00:22:09.320 --> 00:22:14.760
In fact, I recently spoke a lot about this over on TalkBython.


00:22:14.760 --> 00:22:20.200
So I had it in our on the show and we talked about best practices for


00:22:20.200 --> 00:22:24.720
Docker packaging and we talked a lot about both security and package size.


00:22:24.720 --> 00:22:28.240
So I can try to relay a couple of things from that.


00:22:28.240 --> 00:22:32.200
So we've got our official image over here, our Python official image.


00:22:32.200 --> 00:22:34.040
There's actually a bunch of options.


00:22:34.040 --> 00:22:42.200
As you can see, there's a few like 310 beta two buster or the 310 RC buster.


00:22:42.200 --> 00:22:44.460
That sounds bad, but I think it's actually good.


00:22:44.460 --> 00:22:45.820
No, I'm just kidding. I know what it is.


00:22:45.820 --> 00:22:49.320
So these are by default based on Debian


00:22:49.320 --> 00:22:52.020
and Buster is the latest version of Debian.


00:22:52.020 --> 00:22:55.360
And so you can do a Buster which is like full Debian with 3.10


00:22:55.360 --> 00:22:57.760
or you can do a 3.10 slim Buster


00:22:57.760 --> 00:23:00.520
which is like a slimmed down version of Debian Buster


00:23:00.520 --> 00:23:02.720
that supports Python 3.10.


00:23:02.720 --> 00:23:07.620
Okay, so there's a lot going on here in terms of the options.


00:23:07.620 --> 00:23:08.620
One of...


00:23:08.620 --> 00:23:12.060
So the article talks about how Alpine had


00:23:12.060 --> 00:23:14.900
the fewest security vulnerabilities.


00:23:14.900 --> 00:23:17.740
And actually, so the Python latest,


00:23:17.740 --> 00:23:21.180
if you run the sneak package scanner thingy on it,


00:23:21.180 --> 00:23:24.140
it says there's 364 vulnerabilities.


00:23:24.140 --> 00:23:27.700
If you just do Python latest, three nine,


00:23:27.700 --> 00:23:32.700
and 353 after you run apt update, apt upgrade.


00:23:32.700 --> 00:23:35.540
So if you try to get the container to update itself,


00:23:35.540 --> 00:23:38.340
there's still 353 in that one.


00:23:38.340 --> 00:23:40.140
I don't use that, I use Ubuntu.


00:23:40.140 --> 00:23:41.860
So I use the Ubuntu latest.


00:23:41.860 --> 00:23:46.100
And the bare version of that one had 31 vulnerabilities.


00:23:46.100 --> 00:23:50.620
But then if I either install Python through app or build it through source


00:23:50.620 --> 00:23:53.820
and put it in the necessary foundational bits, like build essentials and stuff


00:23:53.820 --> 00:23:59.940
to build Python, it goes up to 35 total problems where 28 of them are low.


00:23:59.940 --> 00:24:01.700
So seven are medium, nothing major.


00:24:01.700 --> 00:24:05.660
One thing I thought was weird was I actually ran another step where I said,


00:24:05.660 --> 00:24:10.540
okay, let's uninstall those intermediate tools like GCC and W get and stuff like


00:24:10.540 --> 00:24:13.580
that I needed to get stuff on the machine, but I'm not going to use again.


00:24:13.580 --> 00:24:17.620
And I took them away and almost all those warnings were about those tools


00:24:17.620 --> 00:24:19.380
that I had apped uninstalled.


00:24:19.380 --> 00:24:22.780
So I don't know why sneak is still showing them, because if I go into the container,


00:24:22.780 --> 00:24:26.480
I type W get it says, Nope, this thing is not installed.


00:24:26.480 --> 00:24:30.820
Sorry, but it still says the warning is that W get has a vulnerability in it,


00:24:30.820 --> 00:24:31.740
for example, right?


00:24:31.740 --> 00:24:34.680
So there's like, there's like this over reporting for sure.


00:24:34.680 --> 00:24:38.880
But I mean, the difference between 28 and 350 is not trivial.


00:24:38.880 --> 00:24:39.940
Right, right.


00:24:39.940 --> 00:24:44.700
So like run an apt install Python three type of thing is not, you know, it's probably worth it.


00:24:44.700 --> 00:24:54.860
For example, when I switched from Python three, nine to Python three, nine slim buster, it went from 350 to 69.


00:24:54.860 --> 00:24:56.060
So that's a lot better.


00:24:56.060 --> 00:24:56.380
Right.


00:24:56.380 --> 00:24:56.860
Yeah.


00:24:56.860 --> 00:25:00.280
Um, it's still not as good as a new two, but it's a lot better.


00:25:00.280 --> 00:25:02.140
The it's still twice as many.


00:25:02.140 --> 00:25:09.220
I mean, you can't, it sounds better, but it could be like 359 low problems and then 69 critical ones.


00:25:09.380 --> 00:25:11.380
It totally could. It totally could.


00:25:11.380 --> 00:25:25.380
Yeah, also if the reporting, if the reporting, like if the, if we can't trust Snake necessarily, then like maybe, you know, if you can't trust your reporting system, then like maybe none of this means anything, right?


00:25:25.380 --> 00:25:36.380
Yeah. Yeah, I think one of the things the article originally started out to address was if you have fewer subsystems, there's no chance the missing subsystem could get hacked because it's not there.


00:25:36.380 --> 00:25:41.340
there. Right. So if there's a vulnerability in SSH, but you literally don't install SSH,


00:25:41.340 --> 00:25:47.340
who cares? Whereas if you and you just take the full distribution, you may potentially get


00:25:47.340 --> 00:25:51.500
affected by something you dragged along. And then it went down this rattle of like, well,


00:25:51.500 --> 00:25:56.780
let me scan it and so on. I so I want to add one more thing like Alpine did result in the


00:25:56.780 --> 00:26:01.740
best outcome from the scanner, but there's a lot of issues with Alpine and Python.


00:26:01.740 --> 00:26:10.140
So for example, there's this PEP here, 656, that right now, if I try to pip install something on


00:26:10.140 --> 00:26:14.540
Alpine, so especially in the data science world where things are large and then compiling takes


00:26:14.540 --> 00:26:22.060
a lot of steps and so on, the wheels that are built for Linux are built for, what is it, glib,


00:26:22.060 --> 00:26:26.700
gclib, I mean, hold on, I'll look over here, I wrote it down so I know, no, I didn't write it


00:26:26.700 --> 00:26:27.160
I don't, sorry.


00:26:27.160 --> 00:26:31.920
There's like, I think it's G lib or GC lib, which is the C runtime on like a


00:26:31.920 --> 00:26:37.480
Boon to and Debian, but there's one M U S L muscle on Alpine and the wheels.


00:26:37.480 --> 00:26:39.760
Are not built for muscle.


00:26:39.760 --> 00:26:41.240
They're built for G C lib.


00:26:41.240 --> 00:26:46.620
So you can't hip install that you've got to download everything and then compile it.


00:26:46.620 --> 00:26:51.260
And it's like compiling matlock, matplotlib and Jupyter from scratch can take a really


00:26:51.260 --> 00:26:53.500
long time versus just downloading the wheel.


00:26:53.500 --> 00:26:58.060
and it takes up a lot of space and there's a bunch of issues and things around that that


00:26:58.060 --> 00:27:00.300
I can make it slightly not Python friendly.


00:27:00.300 --> 00:27:09.580
That's why there's this PEP 656 to allow wheels to be tagged as supporting muscle not GC lib.


00:27:09.580 --> 00:27:10.580
Is that more than you wanted Brian?


00:27:10.580 --> 00:27:11.580
Are you good?


00:27:11.580 --> 00:27:17.580
Okay, so the takeaway that I'm getting is probably not panic on some of these, but maybe


00:27:17.580 --> 00:27:19.120
at least pay attention to them.


00:27:19.120 --> 00:27:21.320
And it is good, like you said,


00:27:21.320 --> 00:27:26.320
to remove tools out of your Docker images


00:27:26.320 --> 00:27:27.400
that you're not using.


00:27:27.400 --> 00:27:29.720
If you're not using Wget in your application,


00:27:29.720 --> 00:27:31.200
take it off, things like that.


00:27:31.200 --> 00:27:32.040
- Yeah, exactly.


00:27:32.040 --> 00:27:33.320
I think Julia's point was great, right?


00:27:33.320 --> 00:27:36.000
It's, if you, it might be a false positive,


00:27:36.000 --> 00:27:39.400
but at the same time, if you're not gonna use it again,


00:27:39.400 --> 00:27:40.700
because Docker, a lot of times,


00:27:40.700 --> 00:27:42.100
you pip install all your stuff,


00:27:42.100 --> 00:27:43.840
and then it's kind of ready to run,


00:27:43.840 --> 00:27:46.120
but you're not gonna go and pip install something again.


00:27:46.120 --> 00:27:49.040
you're gonna do a new Docker build from scratch, right?


00:27:49.040 --> 00:27:52.320
Like one of the final lines could be remove all those


00:27:52.320 --> 00:27:54.200
intermediate things that could have problems


00:27:54.200 --> 00:27:56.280
and make it larger and whatnot.


00:27:56.280 --> 00:27:59.460
- Yeah, I thought, so I've only thought about this


00:27:59.460 --> 00:28:02.480
from like package, from like image size, right?


00:28:02.480 --> 00:28:05.240
Like that you want similar images just because


00:28:05.240 --> 00:28:07.560
it takes forever to get them around.


00:28:07.560 --> 00:28:09.520
But it's interesting to think about


00:28:09.520 --> 00:28:10.880
from a vulnerability perspective.


00:28:10.880 --> 00:28:14.720
And I've always seen it done as you do whatever


00:28:14.720 --> 00:28:16.260
installation you need and then you do all these


00:28:16.260 --> 00:28:17.600
like cleaning steps.


00:28:17.600 --> 00:28:20.500
But what you said, Michael, about like not ever


00:28:20.500 --> 00:28:23.320
putting certain things on your image is interesting.


00:28:23.320 --> 00:28:25.320
I haven't heard of that before.


00:28:25.320 --> 00:28:26.160
- Yeah, thanks.


00:28:26.160 --> 00:28:28.720
I also have Peter McKeith from, who works at Docker


00:28:28.720 --> 00:28:30.920
on Talk Python a little while, like six months ago


00:28:30.920 --> 00:28:32.840
or something, and he talks about having these


00:28:32.840 --> 00:28:35.440
multi-step builds, something to the effect of


00:28:35.440 --> 00:28:37.080
doesn't make as much sense with Python.


00:28:37.080 --> 00:28:38.200
I'll try to put it together.


00:28:38.200 --> 00:28:39.840
But like imagine you're building a Go library.


00:28:39.840 --> 00:28:42.600
You could put the Go runtime and build tools


00:28:42.600 --> 00:28:44.600
on a container, build your thing,


00:28:44.600 --> 00:28:47.120
but the thing you get from Go is an actual binary


00:28:47.120 --> 00:28:48.440
that's all self-contained.


00:28:48.440 --> 00:28:49.880
You could throw that container away


00:28:49.880 --> 00:28:53.280
and just copy the output of that into your actual container


00:28:53.280 --> 00:28:55.360
and never even put all those tools


00:28:55.360 --> 00:28:57.400
on the actual system that goes to production.


00:28:57.400 --> 00:29:00.320
With Python, that might look something like


00:29:00.320 --> 00:29:02.820
maybe using PEX to package up all the stuff


00:29:02.820 --> 00:29:04.360
inside of a virtual environment.


00:29:04.360 --> 00:29:06.020
And long as Python, the runtime is there,


00:29:06.020 --> 00:29:08.480
then you can like PEX run on your other machine.


00:29:08.480 --> 00:29:10.920
But you could potentially not even ever install those,


00:29:10.920 --> 00:29:12.120
which might be good.


00:29:12.120 --> 00:29:12.960
- Yeah, that makes sense.


00:29:12.960 --> 00:29:15.280
- Yeah, there's a lot there that I'm,


00:29:15.280 --> 00:29:17.120
is sort of beyond my comfort level,


00:29:17.120 --> 00:29:20.640
but that's what I thought as I looked at this, Brian.


00:29:20.640 --> 00:29:21.960
- Well, thanks for taking a look.


00:29:21.960 --> 00:29:22.800
- Sure, you bet.


00:29:22.800 --> 00:29:25.380
All right, we like to talk about GUIs


00:29:25.380 --> 00:29:26.960
on the show every now and then.


00:29:26.960 --> 00:29:29.520
And so, and we wanna talk about pandas


00:29:29.520 --> 00:29:32.120
and data frames and data science and all that.


00:29:32.120 --> 00:29:33.600
So let's put those together.


00:29:33.600 --> 00:29:37.320
There's this project over here called Pandas GUI.


00:29:37.320 --> 00:29:41.320
And the documentation is sparse, let's say.


00:29:41.320 --> 00:29:42.160
It's pretty easy.


00:29:42.160 --> 00:29:43.640
There's a couple of examples or two.


00:29:43.640 --> 00:29:46.160
So I could come down here and I could like do my Panda stuff


00:29:46.160 --> 00:29:48.720
and create a data frame and then I could just import show


00:29:48.720 --> 00:29:51.560
from the Pandas GUI and within my notebook,


00:29:51.560 --> 00:29:53.640
it will pop open a separate window


00:29:53.640 --> 00:29:56.760
that it then allows me to cruise around and check it out.


00:29:56.760 --> 00:29:59.920
So it does, you know, you can print out the data frame


00:29:59.920 --> 00:30:03.960
in a notebook and you get kind of a static Excel grid


00:30:03.960 --> 00:30:06.300
looking thing and that's nice.


00:30:06.300 --> 00:30:08.320
But with this, you get a interactive one


00:30:08.320 --> 00:30:10.560
that lets you sort and select.


00:30:10.560 --> 00:30:13.240
you can actually copy and paste chunks out of there


00:30:13.240 --> 00:30:15.920
as if it was Excel and then paste it in other places.


00:30:15.920 --> 00:30:18.520
It also has a plotting library with like pictures.


00:30:18.520 --> 00:30:20.920
So I'm gonna go click on the bar graph picture


00:30:20.920 --> 00:30:23.080
and then there's a list of all the columns


00:30:23.080 --> 00:30:24.640
and the things that the bar graph needs


00:30:24.640 --> 00:30:25.960
and you can drag and drop.


00:30:25.960 --> 00:30:29.280
This column is the X axis and this column is the Y axis


00:30:29.280 --> 00:30:31.680
and I wanna group by color and have,


00:30:31.680 --> 00:30:35.840
you know, group by color it by some other aspect of the data


00:30:35.840 --> 00:30:38.080
and then like group into multiple charts


00:30:38.080 --> 00:30:40.800
or multiple lines or plots on a chart,


00:30:40.800 --> 00:30:42.120
all sorts of cool stuff like that.


00:30:42.120 --> 00:30:44.440
There's a statistics section,


00:30:44.440 --> 00:30:46.880
there's you can export, import and export,


00:30:46.880 --> 00:30:49.080
I guess, import CSV files with drag and drop,


00:30:49.080 --> 00:30:51.140
and there's also search that you can do.


00:30:51.140 --> 00:30:55.400
So it's a pretty neat, quick way to explore pandas.


00:30:55.400 --> 00:30:57.120
- Yeah, it's a neat idea.


00:30:57.120 --> 00:30:59.320
Like when you first encounter a data frame,


00:30:59.320 --> 00:31:04.080
like you really want to just be able to like look at it


00:31:04.080 --> 00:31:06.000
without any assumptions.


00:31:06.000 --> 00:31:09.220
And there's a lot of stuff that kind of goes towards that


00:31:09.220 --> 00:31:11.900
with like the dot plot API and pandas


00:31:11.900 --> 00:31:14.020
and making that, making it really accessible


00:31:14.020 --> 00:31:15.500
to make plots really quickly.


00:31:15.500 --> 00:31:18.140
But this is like kind of like that step beyond that, right?


00:31:18.140 --> 00:31:21.060
Of just visualizing it immediately.


00:31:21.060 --> 00:31:23.940
- Yeah, like one thing you get when you view the data frame


00:31:23.940 --> 00:31:26.180
as you know, like I said, it looks kind of just like


00:31:26.180 --> 00:31:30.000
printing DF in or just typing DF in the notebook.


00:31:30.000 --> 00:31:31.460
But then on the right, you can say,


00:31:31.460 --> 00:31:32.460
oh, I want to see the filters


00:31:32.460 --> 00:31:35.020
and you can type in these filter expressions,


00:31:35.020 --> 00:31:37.440
these query expressions and then turn them all,


00:31:37.440 --> 00:31:39.400
like pile them on, you can have little check boxes


00:31:39.400 --> 00:31:42.320
to like optionally turn them off and not delete them.


00:31:42.320 --> 00:31:45.440
And then of course you can sort within there like that.


00:31:45.440 --> 00:31:47.160
And the graphing, I think the support


00:31:47.160 --> 00:31:49.480
for the graphing part is really, really helpful.


00:31:49.480 --> 00:31:52.160
So the fact that you can just go and click and say,


00:31:52.160 --> 00:31:55.720
oh, I want a box plot and then the box plot needs


00:31:55.720 --> 00:31:58.760
these things you can just drag and drop from the column


00:31:58.760 --> 00:32:00.880
that you're from your data frame definition over


00:32:00.880 --> 00:32:02.520
and it just live updates.


00:32:02.520 --> 00:32:04.840
- Yeah, I think that really lets people


00:32:04.840 --> 00:32:08.520
visualize the data in the way that they want to sometimes,


00:32:08.520 --> 00:32:11.680
rather than the way they already know how in that plot loop,


00:32:11.680 --> 00:32:13.960
which I think is what people end up doing,


00:32:13.960 --> 00:32:15.600
at least for exploratory stuff.


00:32:15.600 --> 00:32:16.960
- Yeah, exactly.


00:32:16.960 --> 00:32:19.760
You could real quickly switch between a bar, a box,


00:32:19.760 --> 00:32:21.320
a scatter plot, back and forth,


00:32:21.320 --> 00:32:23.920
without having to actually be familiar with how those work.


00:32:23.920 --> 00:32:27.760
- Can you tell if there's a way to export the filters,


00:32:27.760 --> 00:32:30.040
or is there any mechanism for that?


00:32:30.040 --> 00:32:34.560
I don't think so, at least in the YouTube explainer video,


00:32:34.560 --> 00:32:35.600
there were some comments like,


00:32:35.600 --> 00:32:37.200
you know what would be awesome?


00:32:37.200 --> 00:32:38.940
Export this as code from here


00:32:38.940 --> 00:32:41.720
so that I can just turn it back into Python.


00:32:41.720 --> 00:32:44.120
I didn't see anything like that, but--


00:32:44.120 --> 00:32:46.560
- Yeah, sometimes GUIs are a little weird for me


00:32:46.560 --> 00:32:47.480
because of that, you know,


00:32:47.480 --> 00:32:48.920
like you end up in this GUI world


00:32:48.920 --> 00:32:51.920
and it's not, you can't reproduce anything.


00:32:51.920 --> 00:32:54.640
- I clicked on a whole bunch of stuff


00:32:54.640 --> 00:32:57.120
and then it looked great, but don't touch it.


00:32:57.120 --> 00:32:57.960
- Yeah, exactly.


00:32:57.960 --> 00:32:59.000
- I can't do it again.


00:32:59.000 --> 00:33:01.560
>> Okay. But to be fair,


00:33:01.560 --> 00:33:05.780
it is a fairly quick way to look at the data and know what you,


00:33:05.780 --> 00:33:08.400
maybe you can't produce that exact plot again,


00:33:08.400 --> 00:33:10.720
but you know what the data looks like and you can use


00:33:10.720 --> 00:33:13.380
a different plotting mechanism to do that.


00:33:13.380 --> 00:33:15.200
>> Yeah. The visual is pretty clearly.


00:33:15.200 --> 00:33:19.160
Okay. Well, x is assigned to speed and we know it's a histogram.


00:33:19.160 --> 00:33:21.200
You could pretty quickly,


00:33:21.200 --> 00:33:23.320
with some Googling and Stack Overflow and go,


00:33:23.320 --> 00:33:26.960
"All right, how do I map plot level histogram and get that going?"


00:33:26.960 --> 00:33:28.960
>> That's a huge time saver.


00:33:28.960 --> 00:33:31.800
>> Yeah, but some export of like,


00:33:31.800 --> 00:33:34.360
okay, give me the code to make this plot in my own code.


00:33:34.360 --> 00:33:35.320
That would be great.


00:33:35.320 --> 00:33:37.680
>> Yeah, absolutely.


00:33:37.680 --> 00:33:40.680
On to the next, but before we get there,


00:33:40.680 --> 00:33:42.960
I do want to call out just a shout out by


00:33:42.960 --> 00:33:45.200
PyLang that FSSpec is sweet.


00:33:45.200 --> 00:33:47.760
Good mention. Yeah, I like it as well.


00:33:47.760 --> 00:33:48.680
>> Cool.


00:33:48.680 --> 00:33:50.120
>> All right. X-ray.


00:33:50.120 --> 00:33:51.720
>> X-ray.


00:33:51.720 --> 00:33:56.720
- Okay, so X-Ray is my favorite library.


00:33:56.720 --> 00:34:01.920
It's like a pandas, so it's a pandas-like API,


00:34:01.920 --> 00:34:04.960
but it's for n-dimensional data.


00:34:04.960 --> 00:34:09.560
So if you have, a lot of times people talk about


00:34:09.560 --> 00:34:13.840
in geospatial data where there's that long time and others,


00:34:13.840 --> 00:34:15.720
but also for image data where there's maybe


00:34:15.720 --> 00:34:18.380
a bunch of different bands from satellite imagery


00:34:18.380 --> 00:34:21.960
or other disciplines where you just have labeled data


00:34:21.960 --> 00:34:25.920
that's not tabular, so the axes mean something,


00:34:25.920 --> 00:34:29.340
but there's not just one or two of them,


00:34:29.340 --> 00:34:30.960
then X-Ray is great for that,


00:34:30.960 --> 00:34:33.880
'cause it lets you do things like you can select


00:34:33.880 --> 00:34:38.120
a certain subset of time, or a certain subset


00:34:38.120 --> 00:34:40.120
of whatever your dimension is,


00:34:40.120 --> 00:34:43.600
and you can also aggregate across different dimensions,


00:34:43.600 --> 00:34:45.920
and you can use the labels directly.


00:34:45.920 --> 00:34:48.560
So if you don't have a tool like this,


00:34:48.560 --> 00:34:51.280
I see people doing this a lot with like


00:34:51.280 --> 00:34:54.640
machine learning workflows where they'll be,


00:34:54.640 --> 00:34:58.340
they'll have like separate, like a list of all their,


00:34:58.340 --> 00:35:00.000
they'll have like a list of all their labels


00:35:00.000 --> 00:35:01.360
and then they'll have their data


00:35:01.360 --> 00:35:02.680
and they'll do some manipulation


00:35:02.680 --> 00:35:05.000
and they'll try to like reattach them at the end.


00:35:05.000 --> 00:35:05.920
- Oh no.


00:35:05.920 --> 00:35:09.320
- And it just, it just turns into a mess.


00:35:09.320 --> 00:35:13.280
And it's actually just like takes care of that all for you.


00:35:13.280 --> 00:35:14.760
It's pretty great.


00:35:14.760 --> 00:35:16.560
And I think that it has applications


00:35:16.560 --> 00:35:18.940
that have not been fully realized yet.


00:35:18.940 --> 00:35:20.980
And it's starting to take off in other spaces,


00:35:20.980 --> 00:35:23.140
but it really comes from this geospatial world.


00:35:23.140 --> 00:35:25.940
But I think it could be useful for all sorts of people.


00:35:25.940 --> 00:35:27.340
- Right, because in geospatial,


00:35:27.340 --> 00:35:30.300
sometimes you have three dimensions, not just two.


00:35:30.300 --> 00:35:33.060
- Yeah, you almost always have three, right?


00:35:33.060 --> 00:35:33.900
- Sorry, Brian.


00:35:33.900 --> 00:35:35.620
- No, the documentation looks great too.


00:35:35.620 --> 00:35:39.460
The documentation has like getting started guides


00:35:39.460 --> 00:35:42.760
and tutorials and videos and galleries and stuff.


00:35:42.760 --> 00:35:44.960
so definitely check out the documentation.


00:35:44.960 --> 00:35:46.360
- Yeah, I think it got a major,


00:35:46.360 --> 00:35:48.260
it seems like, I looked at it for this too,


00:35:48.260 --> 00:35:50.680
and it seems like it got a major facelift,


00:35:50.680 --> 00:35:52.420
so it looks really nice.


00:35:52.420 --> 00:35:57.420
It also has, like, it supports the .plot API,


00:35:57.420 --> 00:35:59.920
or some different version of it


00:35:59.920 --> 00:36:02.160
that's like the pandas version,


00:36:02.160 --> 00:36:04.840
but you can plot in different three dimensions,


00:36:04.840 --> 00:36:06.640
or aggregate and then plot,


00:36:06.640 --> 00:36:08.840
and so that's like a really nice way


00:36:08.840 --> 00:36:10.520
to get the visuals quickly.


00:36:11.440 --> 00:36:13.520
And then the last thing that I wanted to say about it


00:36:13.520 --> 00:36:16.760
is that it's normally backed by NumPy arrays,


00:36:16.760 --> 00:36:19.640
but it can also be backed by Dask arrays or Sparse arrays


00:36:19.640 --> 00:36:23.200
or all sorts of different arrays natively.


00:36:23.200 --> 00:36:26.480
So it's a really cool, it's another one


00:36:26.480 --> 00:36:28.840
of these building block things where you can have X-arrays


00:36:28.840 --> 00:36:30.480
like you're labeling and you're indexing


00:36:30.480 --> 00:36:34.300
and all the nice stuff and then down inside


00:36:34.300 --> 00:36:38.520
it can be NumPy or Qpy or Dask.


00:36:38.520 --> 00:36:39.360
- How interesting.


00:36:39.360 --> 00:36:42.600
- So it can do that juggling and piecing back together


00:36:42.600 --> 00:36:44.380
that other people are manually doing,


00:36:44.380 --> 00:36:45.880
and you just have this simple API,


00:36:45.880 --> 00:36:48.120
and if it has to do that, it'll figure it out.


00:36:48.120 --> 00:36:49.840
- Yeah, yeah, that's pretty cool.


00:36:49.840 --> 00:36:52.920
- Nice, and you talked about QPy and Dask,


00:36:52.920 --> 00:36:56.000
like those are some pretty interesting back ends for this.


00:36:56.000 --> 00:37:01.000
- Yeah, yeah, the Dask one is, I said QPy,


00:37:01.000 --> 00:37:03.360
and now I'm wondering if maybe it's just like Dask


00:37:03.360 --> 00:37:06.160
and then QPy, so don't quote me on that right away,


00:37:06.160 --> 00:37:11.160
But yeah, the Dask one is really integrated with X-Ray code.


00:37:11.160 --> 00:37:14.720
So they do just do some special things to make it


00:37:14.720 --> 00:37:16.720
so that it works with parallelizing and things.


00:37:16.720 --> 00:37:19.780
But from the user experience, it's the same.


00:37:19.780 --> 00:37:20.620
- Yeah, fantastic.


00:37:20.620 --> 00:37:23.400
And then also noticed it requires Python 3.7.


00:37:23.400 --> 00:37:26.000
Really nice to see tools sort of keeping up


00:37:26.000 --> 00:37:28.760
with the latest, not really old stuff.


00:37:28.760 --> 00:37:30.880
- Well, hopefully it's 3.7 and above.


00:37:30.880 --> 00:37:33.400
- Well, yeah, greater than or equal to.


00:37:33.400 --> 00:37:35.240
- Well, I mean, I ran into a library.


00:37:35.240 --> 00:37:39.080
was an internal thing that was only 3.7.


00:37:39.080 --> 00:37:40.200
So I tried it on, I'm like,


00:37:40.200 --> 00:37:44.720
I assumed or above and I tried it on 3.9 and it fell over.


00:37:44.720 --> 00:37:48.560
What's going on? It was only 3.7. It's weird.


00:37:48.560 --> 00:37:50.400
>> That is weird.


00:37:50.400 --> 00:37:52.940
>> That'd be interesting to think about what special features of


00:37:52.940 --> 00:37:56.040
3.7 there depending on the broken 3.8.


00:37:56.040 --> 00:37:58.280
>> Yeah, that's what I was thinking. How do you do that?


00:37:58.280 --> 00:38:01.680
Without just checking for equal 3.7 on version.


00:38:01.680 --> 00:38:02.360
>> Yeah.


00:38:02.360 --> 00:38:03.480
>> So anyway.


00:38:03.480 --> 00:38:06.360
>> Yeah. All right. Well, that's it for our six main topics.


00:38:06.360 --> 00:38:08.920
Brian, you got anything else you want to throw out there quickly?


00:38:08.920 --> 00:38:13.560
>> Yeah, actually. I didn't have this up,


00:38:13.560 --> 00:38:19.040
but on Twitter, somebody reacted to me with an emoji,


00:38:19.040 --> 00:38:23.360
and I didn't know what they meant.


00:38:23.360 --> 00:38:26.680
Let me pop this up.


00:38:26.680 --> 00:38:32.080
This Emojipedia, and it was helpful.


00:38:32.080 --> 00:38:34.520
and you can just copy and paste the emoji


00:38:34.520 --> 00:38:36.160
that somebody uses in there,


00:38:36.160 --> 00:38:38.200
and it tells you what it means.


00:38:38.200 --> 00:38:42.520
And the, you know, kind of not just what it's supposed to mean


00:38:42.520 --> 00:38:44.660
but also what people are using it for.


00:38:44.660 --> 00:38:47.160
I don't know, for somebody that's sort of an old guy


00:38:47.160 --> 00:38:49.620
that is out of touch sometimes, this was helpful.


00:38:49.620 --> 00:38:51.560
Anyway.


00:38:51.560 --> 00:38:53.000
- Yeah, I mean, sometimes it's obvious.


00:38:53.000 --> 00:38:55.660
Like a heart, we know what a heart means, right?


00:38:55.660 --> 00:38:57.800
But, you know, like, hands together,


00:38:57.800 --> 00:38:59.560
it's not necessarily that that's like a thank you


00:38:59.560 --> 00:39:01.080
sort of bow type of thing.


00:39:01.080 --> 00:39:03.080
>> There's certain ones where you're like, "What does that mean?"


00:39:03.080 --> 00:39:06.560
>> It was like a hands together with arrows coming out of the top.


00:39:06.560 --> 00:39:08.260
I'm like, "I don't know what this is."


00:39:08.260 --> 00:39:13.000
But apparently, it's just raising hands like you're saying hooray for somebody.


00:39:13.000 --> 00:39:15.800
Okay, that's nice. It's good.


00:39:15.800 --> 00:39:17.320
>> I use Emojipedia all the time,


00:39:17.320 --> 00:39:18.960
but I think I use it in the opposite way.


00:39:18.960 --> 00:39:21.240
I use it to get an emoji to put


00:39:21.240 --> 00:39:24.520
somewhere because I don't have an emoji keyboard or whatever.


00:39:24.520 --> 00:39:26.240
>> Yeah, that would be good too.


00:39:26.240 --> 00:39:29.440
The other thing I wanted to bring up is I hopefully have


00:39:29.440 --> 00:39:35.600
some cool news to share tomorrow about the Pytest book and the news will show up on a


00:39:35.600 --> 00:39:38.220
revamped Pytest book site.


00:39:38.220 --> 00:39:46.880
So if you go to pytestbook.com, you get redirected to this pythontest.com page where I'll talk


00:39:46.880 --> 00:39:48.600
about the second edition.


00:39:48.600 --> 00:39:52.200
So hopefully there'll be news about the second edition coming out tomorrow.


00:39:52.200 --> 00:39:53.200
And I...


00:39:53.200 --> 00:39:55.000
Is there any static site magic?


00:39:55.000 --> 00:39:56.000
Yeah, yeah.


00:39:56.000 --> 00:39:57.000
Static site.


00:39:57.000 --> 00:39:58.000
And I totally...


00:39:58.000 --> 00:39:59.000
And it goes dark and light.


00:39:59.000 --> 00:40:01.840
But I totally stole from Prajan.


00:40:01.840 --> 00:40:04.200
So Prajan has the same,


00:40:04.200 --> 00:40:06.400
he's got a really nice site.


00:40:06.400 --> 00:40:08.120
So it's a bunch of great.


00:40:08.120 --> 00:40:10.320
It looked great. I'm like, "That'll work.


00:40:10.320 --> 00:40:12.760
I'll just do what he's doing." So that's what I did.


00:40:12.760 --> 00:40:14.160
>> Yeah. Very cool.


00:40:14.160 --> 00:40:15.920
>> I think we have exactly the same stack for


00:40:15.920 --> 00:40:18.240
our Saturn Cloud site now.


00:40:18.240 --> 00:40:18.960
>> Oh, how neat.


00:40:18.960 --> 00:40:19.840
>> That's cool.


00:40:19.840 --> 00:40:21.320
>> Awesome. How about you, Julie?


00:40:21.320 --> 00:40:23.440
Anything else you want to give a shout out to?


00:40:23.440 --> 00:40:26.920
>> Well, I've been really into entry points recently.


00:40:26.920 --> 00:40:29.680
Just like the concept of them is very cool.


00:40:29.680 --> 00:40:31.240
- As in like Python packages,


00:40:31.240 --> 00:40:33.520
you can give them almost like CLI command


00:40:33.520 --> 00:40:34.600
type of entry points?


00:40:34.600 --> 00:40:37.040
- Yeah, but the thing that I think is really cool


00:40:37.040 --> 00:40:39.640
is like, like, like matplotlib,


00:40:39.640 --> 00:40:41.960
this is an example that made me first realize


00:40:41.960 --> 00:40:44.360
about entry points is matplotlib has this dot plot.


00:40:44.360 --> 00:40:46.600
I think I mentioned this three times now.


00:40:46.600 --> 00:40:47.960
But you can swap out the back end,


00:40:47.960 --> 00:40:49.560
so you don't have to have matplotlib.


00:40:49.560 --> 00:40:50.800
You can use other back ends.


00:40:50.800 --> 00:40:53.480
And all the logic for that is in


00:40:53.480 --> 00:40:56.560
the other visualization libraries themselves,


00:40:56.560 --> 00:40:58.060
not in pandas.


00:40:58.060 --> 00:41:02.420
So it's just like, you can swap out other things.


00:41:02.420 --> 00:41:04.680
It's not just for CLIs.


00:41:04.680 --> 00:41:06.100
- Okay, yeah, how neat.


00:41:06.100 --> 00:41:08.280
All right, yeah, I learned about entry points


00:41:08.280 --> 00:41:09.420
a year, year and a half ago,


00:41:09.420 --> 00:41:11.180
and ever since I'm, oh yeah, this is awesome.


00:41:11.180 --> 00:41:12.860
I can now create these little commands


00:41:12.860 --> 00:41:14.420
that'll be part of just my shell.


00:41:14.420 --> 00:41:15.260
I love it.


00:41:15.260 --> 00:41:16.900
- Yeah, the other thing I wanted to say


00:41:16.900 --> 00:41:18.960
was the GitHub CLI is really cool.


00:41:18.960 --> 00:41:22.780
I think that's standalone, but it's, I've been using it a lot.


00:41:22.780 --> 00:41:25.340
- I'm sure people know the Git CLI,


00:41:25.340 --> 00:41:27.380
What's the story of the GitHub CLI?


00:41:27.380 --> 00:41:30.620
- Oh, well the GitHub CLI is, makes it,


00:41:30.620 --> 00:41:34.060
so if you have ever tried to check out a branch


00:41:34.060 --> 00:41:37.900
on someone else's fork, like if you want to evaluate a PR


00:41:37.900 --> 00:41:39.980
that someone has put on a fork,


00:41:39.980 --> 00:41:43.340
that is the situation where the GitHub CLI is really great


00:41:43.340 --> 00:41:47.040
'cause you can just do like gh checkout PR


00:41:47.040 --> 00:41:49.940
or gh PR checkout whatever the number is


00:41:49.940 --> 00:41:52.180
and that you're just on their branch then.


00:41:52.180 --> 00:41:54.540
And if you can push, if you have push access


00:41:54.540 --> 00:41:56.700
to their branch of your maintainer and they've allowed it,


00:41:56.700 --> 00:41:59.880
you can just push directly and you don't,


00:41:59.880 --> 00:42:02.340
I mean, I was always looking at that sequence


00:42:02.340 --> 00:42:04.260
of commands before, like, I know people have


00:42:04.260 --> 00:42:06.980
like git aliases and stuff, but yeah,


00:42:06.980 --> 00:42:08.300
I'd really recommend checking it out


00:42:08.300 --> 00:42:09.740
if you do a lot of GitHub stuff.


00:42:09.740 --> 00:42:11.660
- Okay, awesome, yeah, that's great advice.


00:42:11.660 --> 00:42:13.640
- Yeah, I often wanna like check out some,


00:42:13.640 --> 00:42:15.820
so pull requests, I wanna be able to like play with it


00:42:15.820 --> 00:42:18.580
and run their code and so, yeah.


00:42:18.580 --> 00:42:20.140
- It's the best.


00:42:20.140 --> 00:42:21.140
- Yeah, awesome.


00:42:21.140 --> 00:42:22.380
All right, I got a couple things to add.


00:42:22.380 --> 00:42:24.500
By the way, first of all, just that first practical


00:42:24.500 --> 00:42:26.300
SQL analysis that you talked about.


00:42:26.300 --> 00:42:30.140
It also is a similar theme that you were talking about, Brian.


00:42:30.140 --> 00:42:31.220
One of the things I thought was cool, though,


00:42:31.220 --> 00:42:32.100
as you scroll through it,


00:42:32.100 --> 00:42:34.300
it has a progress bar for reading at the top,


00:42:34.300 --> 00:42:35.460
and that just made me so happy.


00:42:35.460 --> 00:42:36.660
I don't know why.


00:42:36.660 --> 00:42:38.260
That was really neat.


00:42:38.260 --> 00:42:39.500
All right, but I have a bunch of


00:42:39.500 --> 00:42:40.660
hear all about it sort of things.


00:42:40.660 --> 00:42:43.300
So really quick, Python,


00:42:43.300 --> 00:42:45.740
B2, I just got the sense, yeah, okay.


00:42:45.740 --> 00:42:46.620
Live update.


00:42:46.620 --> 00:42:50.660
Python 3.10 Beta 2 is out if people want to check that out,


00:42:50.660 --> 00:42:52.820
and you can go download that.


00:42:52.820 --> 00:42:58.100
It also highlights all the major features like the pipe operator for writing


00:42:58.100 --> 00:43:02.460
unions and type specifications and a bunch of other stuff that people might


00:43:02.460 --> 00:43:02.940
care about.


00:43:02.940 --> 00:43:05.740
A structure pattern matching is probably a big one.


00:43:05.740 --> 00:43:06.260
Yeah.


00:43:06.260 --> 00:43:07.500
Go to the completely different.


00:43:07.500 --> 00:43:07.900
Down.


00:43:07.900 --> 00:43:09.180
Is that on here?


00:43:09.180 --> 00:43:10.820
And now for something completely different.


00:43:10.820 --> 00:43:11.500
I love that part.


00:43:11.500 --> 00:43:12.700
So right above the files.


00:43:12.700 --> 00:43:14.260
Yeah.


00:43:14.260 --> 00:43:16.220
Oh, interesting.


00:43:16.220 --> 00:43:21.460
The Aaron Fest paradox concerns the rotation of a rigid disk in the theory of


00:43:21.460 --> 00:43:22.140
relativity.


00:43:22.420 --> 00:43:25.220
It's original 1909 formulation presented by, yeah.


00:43:25.220 --> 00:43:25.580
Okay.


00:43:25.580 --> 00:43:27.780
That is unexpected, but very cool.


00:43:27.780 --> 00:43:29.740
And completely different and irrelevant.


00:43:29.740 --> 00:43:30.180
Yeah.


00:43:30.180 --> 00:43:30.700
Yeah.


00:43:30.700 --> 00:43:31.080
Awesome.


00:43:31.080 --> 00:43:31.420
Okay.


00:43:31.420 --> 00:43:34.340
So takeaway three 10 beta two is out.


00:43:34.340 --> 00:43:35.160
People can check that out.


00:43:35.160 --> 00:43:37.880
There's also some security patches for Django.


00:43:37.880 --> 00:43:38.980
So be sure to check that out.


00:43:38.980 --> 00:43:43.860
One thing that surprised me is the Microsoft install Python from the windows


00:43:43.860 --> 00:43:49.300
store is already like has a three 10 beta store install.


00:43:49.300 --> 00:43:50.300
So, okay.


00:43:50.300 --> 00:43:52.800
That's pretty cool that they're keeping that up to date.


00:43:52.800 --> 00:43:54.320
>> It's rated E for everyone.


00:43:54.320 --> 00:43:56.820
>> Yeah, even kids can pip install.


00:43:56.820 --> 00:44:01.860
Awesome. Frederick Bankston sent a message in response to


00:44:01.860 --> 00:44:05.940
our last show where we talked about the method overloading by type.


00:44:05.940 --> 00:44:07.540
If it takes an int or a string,


00:44:07.540 --> 00:44:08.560
it calls different functions.


00:44:08.560 --> 00:44:11.280
It's also pointed us towards this multi-method


00:44:11.280 --> 00:44:14.540
other library that is similar so people can check that out. That's cool.


00:44:14.540 --> 00:44:15.300
>> Yeah, neat.


00:44:15.300 --> 00:44:17.580
>> Speaking of the GitHub stuff,


00:44:17.580 --> 00:44:22.940
I've been starting to use PyCharm 2021.2 early access version,


00:44:22.940 --> 00:44:25.260
early access program version one, and it's been working fine.


00:44:25.260 --> 00:44:28.300
So if people want to try out the new features, there's a bunch of cool stuff.


00:44:28.300 --> 00:44:32.460
You have support for Python 3.10 and new stuff for pytest.


00:44:32.460 --> 00:44:37.500
I don't remember if this came in here, but one thing that I did learn about


00:44:37.500 --> 00:44:42.540
that recently that's in there that's super cool is they have in PyCharm,


00:44:42.540 --> 00:44:45.180
if you log in PyCharm into your GitHub account,


00:44:45.180 --> 00:44:47.940
there's a pull request section and you can just click it


00:44:47.940 --> 00:44:50.740
and it'll do those same steps that Julia was talking about.


00:44:50.740 --> 00:44:52.100
Like right there in PyCharm, just go,


00:44:52.100 --> 00:44:54.500
I wanna try that PR before I accept it


00:44:54.500 --> 00:44:56.340
and just click that and go.


00:44:56.340 --> 00:44:57.300
You can even have comments,


00:44:57.300 --> 00:44:58.940
you see the conversation inside there


00:44:58.940 --> 00:45:00.500
and everything is cool.


00:45:00.500 --> 00:45:02.380
- Never go to the GitHub again.


00:45:02.380 --> 00:45:03.220
- Exactly.


00:45:03.220 --> 00:45:05.420
And just forget how to use it basically.


00:45:05.420 --> 00:45:07.260
All right, that's it.


00:45:07.260 --> 00:45:08.580
That's all the items I got.


00:45:08.580 --> 00:45:09.980
So yeah, I've got other stuff


00:45:09.980 --> 00:45:11.580
that's just hanging around from before.


00:45:11.580 --> 00:45:12.420
- Cool.


00:45:12.420 --> 00:45:14.540
- All right, well, you wanna close it out with a joke?


00:45:14.540 --> 00:45:16.060
- Yeah, always. - A couple of jokes?


00:45:16.060 --> 00:45:16.900
Always, all right.


00:45:16.900 --> 00:45:20.620
So over at upjoke.com/programmer-to-ask-jokes,


00:45:20.620 --> 00:45:22.500
you'll find many bad jokes.


00:45:22.500 --> 00:45:25.140
Some even that are not very appropriate or whatever,


00:45:25.140 --> 00:45:26.400
but there's a few that are funny.


00:45:26.400 --> 00:45:28.660
So I pulled out three here.


00:45:28.660 --> 00:45:30.460
I'll do the first one.


00:45:30.460 --> 00:45:31.420
Brian, you can do the second.


00:45:31.420 --> 00:45:33.340
Julie, you can do the third, I guess, if you're up for it.


00:45:33.340 --> 00:45:34.680
- Okay. - So this one,


00:45:34.680 --> 00:45:36.540
we should have saved for six months from now.


00:45:36.540 --> 00:45:37.820
But I asked a programmer


00:45:37.820 --> 00:45:39.780
what her New Year's resolution would be.


00:45:39.780 --> 00:45:41.860
She answered 1920 by 1080.


00:45:41.860 --> 00:45:43.460
- That's so bad.


00:45:43.460 --> 00:45:44.980
- No, that's awesome.


00:45:44.980 --> 00:45:45.820
- It's really bad.


00:45:45.820 --> 00:45:47.540
All right, well, you got to do the next one.


00:45:47.540 --> 00:45:52.660
- How does a programmer confuse a mathematician?


00:45:52.660 --> 00:45:53.500
- I don't know how.


00:45:53.500 --> 00:45:55.780
- Just saying that X equals X plus one.


00:45:55.780 --> 00:46:00.220
- All right, Julia.


00:46:00.220 --> 00:46:04.400
- Okay, why do Python programmers have low self-esteem?


00:46:04.400 --> 00:46:07.240
They're constantly comparing their self to other.


00:46:07.240 --> 00:46:11.060
- Also bad.


00:46:11.060 --> 00:46:13.380
Probably the worst, sorry we gave you that one.


00:46:13.380 --> 00:46:15.020
- That's okay.


00:46:15.020 --> 00:46:17.820
I saw the one that Brian did and I was like,


00:46:17.820 --> 00:46:19.300
oh, it should be X plus equals one.


00:46:19.300 --> 00:46:21.300
And I was like, no, that ruins the joke.


00:46:21.300 --> 00:46:22.420
(laughing)


00:46:22.420 --> 00:46:23.900
- Exactly.


00:46:23.900 --> 00:46:24.740
- Yeah.


00:46:24.740 --> 00:46:28.620
Yeah, I actually often do the slow way


00:46:28.620 --> 00:46:30.420
or the non-obvious way.


00:46:30.420 --> 00:46:31.260
- The proposed way, yeah.


00:46:31.260 --> 00:46:32.820
- X equals X plus one,


00:46:32.820 --> 00:46:36.020
just to make it more obvious to people reading it sometimes.


00:46:36.020 --> 00:46:38.140
- Yeah, yeah, no, I agree.


00:46:38.140 --> 00:46:42.000
- Yeah, at least it's not C++ with X, plus plus X.


00:46:43.020 --> 00:46:44.080
- I love that.


00:46:44.080 --> 00:46:47.220
No, no, we should have that.


00:46:47.220 --> 00:46:50.900
- I'm okay with X++, but not that also ++X.


00:46:50.900 --> 00:46:52.100
- Oh, the pre-increment.


00:46:52.100 --> 00:46:53.940
- Yeah, the pre-increment, the slight.


00:46:53.940 --> 00:46:54.820
- Pre-increment's weird.


00:46:54.820 --> 00:46:56.660
- Yes, exactly, exactly.


00:46:56.660 --> 00:46:58.580
But I could go for it, X++, come on.


00:46:58.580 --> 00:47:01.260
All right, well, Julia, thanks for joining us this week.


00:47:01.260 --> 00:47:02.820
And Brian, thanks as always.


00:47:02.820 --> 00:47:04.340
- Always a pleasure, thanks, Julia.


00:47:04.340 --> 00:47:05.180
- Yeah, it's fun.


00:47:05.180 --> 00:47:06.020
- Bye. - Bye.

