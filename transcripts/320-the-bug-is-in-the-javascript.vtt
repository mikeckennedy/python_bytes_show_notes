
00:00:00.000 --> 00:00:06.020
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:06.020 --> 00:00:08.940
320 recorded January 24th


00:00:08.940 --> 00:00:14.840
2023 I am Michael Kennedy and I am Brian Okken and this episode is sponsored by us


00:00:14.840 --> 00:00:19.240
Over at Talk Python Training and testing code and patreon supporters


00:00:19.240 --> 00:00:25.480
We'll talk more about all that a little bit further into the show and also yes for those you listening live


00:00:25.480 --> 00:00:30.200
You already know this, but for most people, they may not know that we're live streaming this on YouTube.


00:00:30.200 --> 00:00:35.400
And if you just go to pythonbytes.fm/stream/live, then you'll be able to follow over there.


00:00:35.400 --> 00:00:41.080
Usually on Tuesdays at 11 Pacific Time, which it is right now, you can be part of the show.


00:00:41.080 --> 00:00:43.080
That's how some of the folks are in the audience.


00:00:43.080 --> 00:00:47.800
So hopefully you go over there and you know, subscribe on YouTube and press the notify so you know when we're


00:00:47.800 --> 00:00:51.000
posting live streams. And with that,


00:00:51.720 --> 00:00:53.400
Let's, let's get going, Brian.


00:00:53.400 --> 00:00:54.320
Let's mark it down.


00:00:54.320 --> 00:00:56.840
I'm going to talk about Markdown a little bit while you're


00:00:56.840 --> 00:00:58.660
queuing up your next item.


00:00:58.660 --> 00:01:02.860
We do pay attention to Rich and Will McGugan, in the show.


00:01:02.860 --> 00:01:06.360
And I'm not going to talk about them too much, except for that.


00:01:06.360 --> 00:01:11.620
Um, I noticed that Rich, updated, we got a release note that they


00:01:11.620 --> 00:01:17.840
updated their Markdown parser and, from something called common mark,


00:01:17.840 --> 00:01:21.620
which I was familiar with to mark down it pi.


00:01:21.620 --> 00:01:23.960
I was curious about this,


00:01:23.960 --> 00:01:25.960
so I went and took a look.


00:01:25.960 --> 00:01:28.900
The Common Mark library,


00:01:28.900 --> 00:01:30.860
if we go take a look at that,


00:01:30.860 --> 00:01:34.340
that's up on PyPI, Common Mark, no big deal.


00:01:34.340 --> 00:01:37.760
But if we go look at the source in GitHub,


00:01:37.760 --> 00:01:40.600
it says this repository has been archived by


00:01:40.600 --> 00:01:43.840
the owner on November of 2022.


00:01:43.840 --> 00:01:48.120
Oops. If we look down a little bit further,


00:01:48.120 --> 00:01:50.500
it says, warning, it's deprecated.


00:01:50.500 --> 00:01:53.880
We recommend using markdownit.py.


00:01:53.880 --> 00:01:55.760
Okay. I haven't used it,


00:01:55.760 --> 00:01:57.720
so I wanted to go take a look.


00:01:57.720 --> 00:02:01.180
Markdownit, I think I'm saying that right,


00:02:01.180 --> 00:02:06.560
is it's built on top of another markdownit tool.


00:02:06.560 --> 00:02:08.640
Markdownit is its own tool and


00:02:08.640 --> 00:02:11.760
the markdownit.py is a Python wrapper around it.


00:02:11.760 --> 00:02:12.760
So great.


00:02:12.760 --> 00:02:18.560
So it's, do we have to worry about this one going out of fashion as well?


00:02:18.560 --> 00:02:23.760
And I think we're probably safe because the project, this is a part of executable books


00:02:23.760 --> 00:02:29.800
and executable books is a project to try to build more collaboration with Jupyter notebooks.


00:02:29.800 --> 00:02:31.280
So I think we're safe now.


00:02:31.280 --> 00:02:35.180
So to use Markdown for PI for a while.


00:02:35.180 --> 00:02:38.680
And I just did a quick, there's a live demo thing.


00:02:38.680 --> 00:02:41.380
some converting Markdown.


00:02:41.380 --> 00:02:43.960
It's a nice package.


00:02:43.960 --> 00:02:44.960
You can do it by itself.


00:02:44.960 --> 00:02:48.560
You can convert from Markdown to HTML on the command line,


00:02:48.560 --> 00:02:51.960
or you can use it within your code.


00:02:51.960 --> 00:02:55.700
It's got some nice features for in-code,


00:02:55.700 --> 00:02:57.560
pulling in different plugins and stuff


00:02:57.560 --> 00:02:59.580
if you have different specialties.


00:02:59.580 --> 00:03:01.800
If we go back to the original release,


00:03:01.800 --> 00:03:03.440
one of the reasons why they did it wasn't


00:03:03.440 --> 00:03:06.140
just the reasons why Rich started using it,


00:03:06.140 --> 00:03:08.700
isn't just because it's been,


00:03:08.700 --> 00:03:11.560
the common mark has been deprecated,


00:03:11.560 --> 00:03:14.360
but they say it will allow us to


00:03:14.360 --> 00:03:15.440
implement a number of


00:03:15.440 --> 00:03:17.680
additional markdown features in the future.


00:03:17.680 --> 00:03:19.760
This is pretty exciting.


00:03:19.760 --> 00:03:22.640
I don't know a lot about markdown it,


00:03:22.640 --> 00:03:25.080
but I am going to check it out.


00:03:25.080 --> 00:03:26.800
>> Well, if it's used by


00:03:26.800 --> 00:03:28.920
executable books and it's used by Rich,


00:03:28.920 --> 00:03:33.640
I think those are some pretty solid endorsements for it.


00:03:33.640 --> 00:03:35.640
I saw that it got installed as well,


00:03:35.640 --> 00:03:38.420
and I wasn't sure why, but now I see that it's from Rich.


00:03:38.420 --> 00:03:39.060
>> Yeah.


00:03:39.060 --> 00:03:41.160
>> I use Markdown too,


00:03:41.160 --> 00:03:43.140
and I have no idea what the status of it is,


00:03:43.140 --> 00:03:48.280
but there is so much of our website that runs on Markdown.


00:03:48.280 --> 00:03:51.620
Every episode page you visit, that's a Markdown page.


00:03:51.620 --> 00:03:52.920
There's a bunch on Talk Python,


00:03:52.920 --> 00:03:54.640
a whole bunch of Talk Python Training.


00:03:54.640 --> 00:03:57.460
Anything that's better for Markdown,


00:03:57.460 --> 00:04:00.380
I'd definitely be wanting to give that a look.


00:04:00.380 --> 00:04:03.220
>> I don't want everybody using the same thing because we do


00:04:03.220 --> 00:04:08.500
want some different tools to build on each other and stuff.


00:04:08.500 --> 00:04:09.780
>> Indeed.


00:04:09.780 --> 00:04:10.180
>> Yeah.


00:04:10.180 --> 00:04:12.580
>> All right. Should I sketch out the next idea for you?


00:04:12.580 --> 00:04:15.500
>> Yeah. Let's take a look.


00:04:15.500 --> 00:04:19.300
>> Let's take a look. Oh my God, this is fantastic.


00:04:19.300 --> 00:04:22.180
This was sent over by Jake Furman.


00:04:22.180 --> 00:04:25.660
Jake said, "Have you seen Sketch?"


00:04:25.660 --> 00:04:29.300
We've seen a lot of AI coding assistants.


00:04:29.300 --> 00:04:33.700
We've talked about the potential bordering on


00:04:33.700 --> 00:04:37.740
violating license agreements and stuff of GitHub Copilot.


00:04:37.740 --> 00:04:40.560
Everyone has surely heard about ChatGPT.


00:04:40.560 --> 00:04:42.180
I have friends who are not even a programmer,


00:04:42.180 --> 00:04:43.340
they come, "Michael, I'm working on


00:04:43.340 --> 00:04:45.500
some programming thing because of ChatGPT."


00:04:45.500 --> 00:04:47.420
I'm like, "All right, well, interesting.


00:04:47.420 --> 00:04:49.460
We'll see where all that stuff goes."


00:04:49.460 --> 00:04:54.140
But this thing called Sketch is like a simple view,


00:04:54.140 --> 00:04:56.100
a simple way to ask


00:04:56.100 --> 00:04:58.420
natural language questions of


00:04:58.420 --> 00:05:01.900
your data that's contained in a Pandas DataFrame.


00:05:01.900 --> 00:05:02.940
>> Okay.


00:05:02.940 --> 00:05:08.700
>> The way it works is you go and it's not built into the editor,


00:05:08.700 --> 00:05:11.820
it's part of monkey patches, I believe,


00:05:11.820 --> 00:05:17.140
Pandas so it adds a function to Pandas called, I think, ask.


00:05:17.140 --> 00:05:24.740
Let's see, it's .sketch.ask or .sketch.howto or sketch.apply.


00:05:24.740 --> 00:05:28.200
So these are the different kinds of prompts that you can give it.


00:05:28.200 --> 00:05:29.040
>> Okay.


00:05:29.040 --> 00:05:30.480
>> So you just pip install this,


00:05:30.480 --> 00:05:33.200
and once it's pip installed and you import it,


00:05:33.200 --> 00:05:34.520
that's all you got to do.


00:05:34.520 --> 00:05:38.560
It lets you ask data cataloging questions like,


00:05:38.560 --> 00:05:43.040
is there any personally identifiable information PII within here?


00:05:43.040 --> 00:05:44.840
Is there a phone number or is there


00:05:44.840 --> 00:05:47.640
an e-mail address or is there a social security number?


00:05:47.640 --> 00:05:50.000
This could be some big large dataset and you don't want to


00:05:50.000 --> 00:05:51.800
save necessarily that or share it,


00:05:51.800 --> 00:05:54.440
you can ask it and it'll ask you how to,


00:05:54.440 --> 00:05:56.660
It'll basically tell you how to get rid of it as well.


00:05:56.660 --> 00:06:01.340
Also, give me descriptions of this dataset,


00:06:01.340 --> 00:06:03.500
which is nuts.


00:06:03.500 --> 00:06:06.340
Also, it does data cleaning and masking to,


00:06:06.340 --> 00:06:08.700
for example, removing the PII,


00:06:08.700 --> 00:06:12.740
and it'll extract some features and just lets you visualize stuff.


00:06:12.740 --> 00:06:19.260
The best way to do this is to watch this one-and-a-half minute video here.


00:06:19.260 --> 00:06:21.380
What it shows you is,


00:06:21.380 --> 00:06:23.840
here's a Pandas DataFrame read from a CSV,


00:06:23.840 --> 00:06:29.120
and it's got like an order ID and a price and a date and an address


00:06:29.120 --> 00:06:35.440
and they just say dataframe.sketch.is there any personalizing information


00:06:35.440 --> 00:06:36.560
or any personal information?


00:06:36.560 --> 00:06:37.560
It says yes, these fields.


00:06:37.560 --> 00:06:39.120
And it says, how can I remove it?


00:06:39.120 --> 00:06:40.640
And so it writes out the code,


00:06:40.640 --> 00:06:42.800
you just copy and paste that, boom.


00:06:42.800 --> 00:06:43.840
Now it's removed.


00:06:43.840 --> 00:06:45.840
And then it says, give me a friendly,


00:06:45.840 --> 00:06:47.360
see if I can pause this, going quick.


00:06:47.360 --> 00:06:51.200
It says, can you give me friendly names?


00:06:51.200 --> 00:06:52.000
Stop moving.


00:06:52.000 --> 00:06:55.760
Can you give me friendly names in a single sentence description of each column?


00:06:55.760 --> 00:06:57.840
Format output as an HTML list and boom,


00:06:57.840 --> 00:06:59.840
it says index, numerical index,


00:06:59.840 --> 00:07:03.000
the product purchase in each order,


00:07:03.000 --> 00:07:05.240
order ID, a unique identifier for each order,


00:07:05.240 --> 00:07:08.160
purchase address, the address of the customer who placed the order,


00:07:08.160 --> 00:07:09.600
and so on and so on.


00:07:09.600 --> 00:07:10.040
>> Nice.


00:07:10.040 --> 00:07:11.180
>> Isn't that neat?


00:07:11.180 --> 00:07:11.960
>> Yeah.


00:07:11.960 --> 00:07:15.360
>> Yeah. When it spits out the answer,


00:07:15.360 --> 00:07:17.520
it puts a little copy, tags you can copy.


00:07:17.520 --> 00:07:19.240
You can ask it, how do I do this?


00:07:19.240 --> 00:07:20.960
how to extract city, state,


00:07:20.960 --> 00:07:22.360
and zip from the address,


00:07:22.360 --> 00:07:23.560
which is a single string,


00:07:23.560 --> 00:07:26.280
and it writes the code


00:07:26.280 --> 00:07:29.060
to do the split statements to pull it apart.


00:07:29.060 --> 00:07:30.640
Telling you this thing is,


00:07:30.640 --> 00:07:32.480
it's not going to be perfect,


00:07:32.480 --> 00:07:33.960
but it's going to be pretty good.


00:07:33.960 --> 00:07:35.800
It's pretty interesting. I just jumped in.


00:07:35.800 --> 00:07:36.800
What do you think of this, Brian?


00:07:36.800 --> 00:07:37.960
>> I think it's great.


00:07:37.960 --> 00:07:39.720
Hey, Sketch, how do I remove


00:07:39.720 --> 00:07:42.020
the data that disproves my hypothesis?


00:07:42.020 --> 00:07:45.520
>> Exactly. I'm going to need


00:07:45.520 --> 00:07:48.520
the data that shows a downward trend here.


00:07:48.520 --> 00:07:50.920
Can you extract just those rows?


00:07:50.920 --> 00:07:53.320
[LAUGHTER]


00:07:53.320 --> 00:07:54.800
Anyway, people can check this out.


00:07:54.800 --> 00:07:56.200
I think it's pretty neat.


00:07:56.200 --> 00:07:58.420
It says, "In the future,


00:07:58.420 --> 00:08:01.560
we plan to update the prompt at this endpoint with


00:08:01.560 --> 00:08:04.600
our own custom foundation model built to answer questions more


00:08:04.600 --> 00:08:10.520
accurately than GPT-3 can with its minimal data context."


00:08:10.520 --> 00:08:12.680
Because it doesn't know a lot about your data.


00:08:12.680 --> 00:08:13.040
>> Yeah.


00:08:13.040 --> 00:08:16.920
>> You can also directly call OpenAI directly.


00:08:16.920 --> 00:08:22.040
It says, and not use their endpoint by using your own API key.


00:08:22.040 --> 00:08:26.280
There's that. Anyway, it talks about how it works and what it sends over.


00:08:26.280 --> 00:08:28.560
>> This is pretty powerful though,


00:08:28.560 --> 00:08:33.800
because there's so much data for people using and different things.


00:08:33.800 --> 00:08:35.200
We expect it now.


00:08:35.200 --> 00:08:38.960
I was working on a project just recently where


00:08:38.960 --> 00:08:43.840
somebody did test result analysis and a question of like,


00:08:43.840 --> 00:08:47.800
Can we just put natural language strings in there to query it?


00:08:47.800 --> 00:08:49.240
Why do we have to end?


00:08:49.240 --> 00:08:52.680
People are expecting this all over the place now.


00:08:52.680 --> 00:08:55.120
>> I just want to highlight just the last one there.


00:08:55.120 --> 00:08:57.220
It says, go to the data frame,


00:08:57.220 --> 00:08:59.840
sketched on how to using Plotly,


00:08:59.840 --> 00:09:02.200
plot a map of the total sales in each state.


00:09:02.200 --> 00:09:06.360
Boom, you get a perfect interactive map,


00:09:06.360 --> 00:09:10.320
a geographical map of the United States.


00:09:10.320 --> 00:09:12.080
That's pretty neat.


00:09:12.080 --> 00:09:12.800
>> Yeah.


00:09:12.800 --> 00:09:14.180
to be able to just jump in and do that.


00:09:14.180 --> 00:09:16.440
Like sure, you could go search and look that up,


00:09:16.440 --> 00:09:19.240
but instead of just doing df.head,


00:09:19.240 --> 00:09:23.300
df.tail, and so on, how to?


00:09:23.300 --> 00:09:29.560
>> I could think I'm ready to hang up a shingle for data science side job.


00:09:29.560 --> 00:09:31.680
>> I'm pretty sure that you and I could pass as


00:09:31.680 --> 00:09:34.520
at least junior data scientists now.


00:09:34.520 --> 00:09:37.480
>> Just with this. Yeah.


00:09:37.480 --> 00:09:41.080
>> Anyway, I think this is pretty cool.


00:09:41.080 --> 00:09:42.600
I'm pretty psyched about it.


00:09:42.600 --> 00:09:44.560
>> It's pretty cool. People should


00:09:44.560 --> 00:09:46.880
check it out from what I can tell it doesn't cost anything.


00:09:46.880 --> 00:09:48.640
So just play with it,


00:09:48.640 --> 00:09:50.720
which is really nice.


00:09:50.720 --> 00:09:52.120
Also, before we move on,


00:09:52.120 --> 00:09:56.120
I just want to tell people that this episode is brought to you by us.


00:09:56.120 --> 00:09:59.160
So there's a whole bunch of Python courses that if you get


00:09:59.160 --> 00:10:01.640
inspired over at Talk Python Training,


00:10:01.640 --> 00:10:04.680
we've got the Python 3.11 guided tour,


00:10:04.680 --> 00:10:07.240
which a couple hours of hands-on show, that's awesome.


00:10:07.240 --> 00:10:09.000
Python data visualization.


00:10:09.000 --> 00:10:10.760
So if the sketch stuff was interesting,


00:10:10.760 --> 00:10:12.280
there's a bunch of that there.


00:10:12.280 --> 00:10:15.000
Oh, there's also something on pytest, isn't there?


00:10:15.000 --> 00:10:17.200
- Yeah, highly recommend that course.


00:10:17.200 --> 00:10:18.040
It's great.


00:10:18.040 --> 00:10:19.560
- I do as well.


00:10:19.560 --> 00:10:20.880
All right, so if you want to support us,


00:10:20.880 --> 00:10:23.720
the best way you can do it is to support our other work


00:10:23.720 --> 00:10:26.280
as well as share the podcast with your friends.


00:10:26.280 --> 00:10:28.720
So thank you, thank you, thank you for that.


00:10:28.720 --> 00:10:30.680
- Yes, I also want to thank the Patreon people


00:10:30.680 --> 00:10:32.320
'cause they're, it's great.


00:10:32.320 --> 00:10:33.560
We don't really talk about it much,


00:10:33.560 --> 00:10:35.560
but you can support us through Patreon as well,


00:10:35.560 --> 00:10:37.120
and we very much appreciate it.


00:10:37.120 --> 00:10:37.960
- Absolutely.


00:10:37.960 --> 00:10:40.800
All right, what you got for our next one, Brian?


00:10:40.800 --> 00:10:42.620
- Well, I wanna go in circles a little bit,


00:10:42.620 --> 00:10:46.000
actually going back to the year 2021.


00:10:46.000 --> 00:10:50.640
No, in 2021, we covered a article by Hinnick


00:10:50.640 --> 00:10:54.680
called "Subclassing in Python Redux."


00:10:54.680 --> 00:10:57.200
And it's a great article to talk about


00:10:57.200 --> 00:10:59.880
like just how to subclassing


00:10:59.880 --> 00:11:02.680
and dealing with classes in Python


00:11:02.680 --> 00:11:04.400
and just to get your head around it.


00:11:04.400 --> 00:11:07.160
So I did read it and I enjoyed it.


00:11:07.160 --> 00:11:10.160
And then this year, I came across the problem


00:11:10.160 --> 00:11:14.080
I'm like, I think I can solve it with something I read in this article.


00:11:14.080 --> 00:11:18.320
I'm going to scroll down to the thing specifically.


00:11:18.320 --> 00:11:22.620
We have nominal subtyping with abstract-based classes.


00:11:22.620 --> 00:11:26.800
I tried that, but I decided to go with structural subtyping.


00:11:26.800 --> 00:11:30.080
With structural subtyping, basically,


00:11:30.080 --> 00:11:33.800
my understanding is it's like duck typing,


00:11:33.800 --> 00:11:36.240
but it's like strict duck typing.


00:11:36.240 --> 00:11:38.080
[LAUGHTER]


00:11:38.080 --> 00:11:40.300
And it says here, as you can see,


00:11:40.300 --> 00:11:44.760
if you've got something calling two things,


00:11:44.760 --> 00:11:46.080
two classes talking to each other,


00:11:46.080 --> 00:11:47.960
one of them doesn't have to know about the other.


00:11:47.960 --> 00:11:51.200
So in this example, we've got a reader and a foo reader,


00:11:51.200 --> 00:11:55.240
and it's just a reader protocol.


00:11:55.240 --> 00:11:58.360
We just need to know that there's a reader protocol here.


00:11:58.360 --> 00:12:01.480
So I kind of like, I just knew this was here


00:12:01.480 --> 00:12:03.980
and I'm like, how do I apply this?


00:12:03.980 --> 00:12:06.200
So I went ahead and wrote up an article


00:12:06.200 --> 00:12:10.040
called fixing circular imports in Python with protocol.


00:12:10.040 --> 00:12:11.840
And this is directly from this.


00:12:11.840 --> 00:12:15.640
So it's just a zoom in on one special case.


00:12:15.640 --> 00:12:18.000
I really have, like if I've got a class,


00:12:18.000 --> 00:12:21.360
director and actor, and they talk to each other.


00:12:21.360 --> 00:12:24.080
So director tells an actor to do an action.


00:12:24.080 --> 00:12:25.000
No big deal.


00:12:25.000 --> 00:12:26.800
It has to import the actor, right?


00:12:26.800 --> 00:12:28.720
So the actor gets a director.


00:12:28.720 --> 00:12:31.480
So it gets data from the director.


00:12:31.480 --> 00:12:34.480
And so it has to be able to call it.


00:12:34.480 --> 00:12:36.000
Well, I could just pass it in self.


00:12:36.000 --> 00:12:39.100
And since we have duck typing, it all works fine.


00:12:39.100 --> 00:12:41.440
We just call director get data.


00:12:41.440 --> 00:12:42.940
So far, we have no types.


00:12:42.940 --> 00:12:45.200
The problem comes in when we have types.


00:12:45.200 --> 00:12:48.100
If we add types to the whole mix,


00:12:48.100 --> 00:12:53.340
then when we add types to the director, it's no big deal.


00:12:53.340 --> 00:12:54.800
We just add types to everything.


00:12:54.800 --> 00:12:57.540
But to add types to the actor,


00:12:57.540 --> 00:13:00.540
suddenly the actor needs to know what type the director is.


00:13:00.540 --> 00:13:02.500
And that's where we get the problem.


00:13:02.500 --> 00:13:05.600
And that's exactly the kind of problem that I ran into


00:13:05.600 --> 00:13:11.040
is I wanted to add typing to this to a similar problem and it blows up.


00:13:11.040 --> 00:13:12.560
It actually blows up really bad.


00:13:12.560 --> 00:13:15.040
You can't, Python just says you can't do that.


00:13:15.040 --> 00:13:16.080
It's circular import.


00:13:16.080 --> 00:13:22.960
So the protocol solution is really slick and I'm going to scroll down to the answer.


00:13:22.960 --> 00:13:27.600
The answer is just, I just need a little bit of a snippet of code that says,


00:13:27.600 --> 00:13:34.400
I've got this class that is derived from protocol, but it's just got a get data function.


00:13:34.400 --> 00:13:35.600
and that's all I know about it.


00:13:35.600 --> 00:13:36.920
I know what it returns,


00:13:36.920 --> 00:13:38.040
and that's all I know.


00:13:38.040 --> 00:13:41.720
I can say that my director really is that type, and that's it.


00:13:41.720 --> 00:13:45.220
The actor has to change to say what type it is,


00:13:45.220 --> 00:13:48.320
and the rest of the code just works.


00:13:48.320 --> 00:13:50.460
I don't have to change the director,


00:13:50.460 --> 00:13:52.080
I don't have to change the test code.


00:13:52.080 --> 00:13:56.360
It's just this one file that I'm changing.


00:13:56.360 --> 00:13:59.760
I like this because I'm adding typing,


00:13:59.760 --> 00:14:01.800
I'm not changing the code at all.


00:14:01.800 --> 00:14:05.120
And the only thing is that, yeah, anyway,


00:14:05.120 --> 00:14:06.480
it's a slick way to use it.


00:14:06.480 --> 00:14:07.560
- I think so too.


00:14:07.560 --> 00:14:09.440
It's a little bit like interfaces,


00:14:09.440 --> 00:14:13.840
but less in the traditional Java or C#,


00:14:13.840 --> 00:14:16.820
the IEnumerable or whatever type of interfaces.


00:14:16.820 --> 00:14:20.080
- Yeah, the first, and then Hinnick goes through


00:14:20.080 --> 00:14:22.960
abstract base classes also.


00:14:22.960 --> 00:14:24.080
And that's one thing you could do,


00:14:24.080 --> 00:14:26.040
is you could have a base class


00:14:26.040 --> 00:14:27.760
that has this get data function,


00:14:27.760 --> 00:14:29.780
and both the director and the actor


00:14:29.780 --> 00:14:30.840
know about the base class.


00:14:30.840 --> 00:14:33.200
but you don't really need that.


00:14:33.200 --> 00:14:36.320
Nobody else needs to know that except for this one file.


00:14:36.320 --> 00:14:38.600
So protocol's a nice hack.


00:14:38.600 --> 00:14:39.560
- Interesting, yeah.


00:14:39.560 --> 00:14:40.880
Jonathan in the audience is asking


00:14:40.880 --> 00:14:43.280
why not just use abstract base classes?


00:14:43.280 --> 00:14:44.800
- Yeah, they both work.


00:14:44.800 --> 00:14:46.880
So it's just a personal preference thing.


00:14:46.880 --> 00:14:50.120
- Kim in the audience is asking,


00:14:50.120 --> 00:14:51.280
as a question of style,


00:14:51.280 --> 00:14:54.920
do you prefer an ellipsis over the keyword past


00:14:54.920 --> 00:14:57.320
to indicate an empty function?


00:14:57.320 --> 00:15:02.040
- Well, I'm warming to the ellipsis a lot


00:15:02.040 --> 00:15:04.360
because I write a lot of test code


00:15:04.360 --> 00:15:07.320
and I write a lot of example test code.


00:15:07.320 --> 00:15:12.320
And if I say an empty function that is a test function


00:15:12.320 --> 00:15:15.080
and I use dot, dot, dot,


00:15:15.080 --> 00:15:18.600
it's clear that I'm not finishing it.


00:15:18.600 --> 00:15:20.600
Whereas if I say pass,


00:15:20.600 --> 00:15:22.720
I've actually had some people get confused


00:15:22.720 --> 00:15:26.140
and think that the pass keyword is how you pass a test.


00:15:26.140 --> 00:15:31.780
>> It's not. It can be.


00:15:31.780 --> 00:15:34.900
>> Well, you're not going to raise an error in that test method.


00:15:34.900 --> 00:15:35.060
>> Yeah.


00:15:35.060 --> 00:15:37.700
>> If you got a pass in there. It's a way to pass it.


00:15:37.700 --> 00:15:39.260
>> Yeah.


00:15:39.260 --> 00:15:41.220
>> I like it too to say,


00:15:41.220 --> 00:15:43.020
"Look, I don't want anything here.


00:15:43.020 --> 00:15:46.300
I don't intend to come back and fill it out. This is it."


00:15:46.300 --> 00:15:53.620
>> The ellipses match how we do type stubs as well.


00:15:53.620 --> 00:15:55.420
I think I'll use ellipses,


00:15:55.420 --> 00:15:57.140
but I don't know if they have to.


00:15:57.140 --> 00:15:59.580
>> I think they do as well.


00:15:59.580 --> 00:16:01.980
If you go and look at TypeShed,


00:16:01.980 --> 00:16:04.260
and you look at the stubs in there,


00:16:04.260 --> 00:16:07.220
like let me just grab one rando.


00:16:07.220 --> 00:16:10.020
Yeah, all those have dot, dot, dots.


00:16:10.020 --> 00:16:12.380
Dot, dot, dots for their default value,


00:16:12.380 --> 00:16:14.300
dot, dot, dot for the implementation.


00:16:14.300 --> 00:16:17.340
Kind of gnarly looking if you open them up, but there they are.


00:16:17.340 --> 00:16:18.780
So yeah, to me,


00:16:18.780 --> 00:16:22.100
I feel like I'm matching the stub definition.


00:16:22.100 --> 00:16:23.940
I don't intend anything to be here.


00:16:23.940 --> 00:16:25.140
>> Exactly.


00:16:25.140 --> 00:16:27.480
>> Right. All right. Ready for the next one?


00:16:27.480 --> 00:16:28.160
>> Yes.


00:16:28.160 --> 00:16:32.580
>> This is a simple and I think will be useful to many folks.


00:16:32.580 --> 00:16:38.100
This one comes to us via Rud Vanderham.


00:16:38.100 --> 00:16:39.820
Rud Vanderham, thank you.


00:16:39.820 --> 00:16:42.940
Sent it over and recommended, also created it.


00:16:42.940 --> 00:16:47.340
We've all seen code samples that,


00:16:47.340 --> 00:16:49.260
I don't know why,


00:16:49.260 --> 00:16:51.500
but I guess it's a decent way to explore it,


00:16:51.500 --> 00:16:55.540
but I've always found it a little bit difficult to consume.


00:16:55.540 --> 00:17:00.320
Basically, I want to show you how this bit of code works in the REPL.


00:17:00.320 --> 00:17:01.720
Here's what happens.


00:17:01.720 --> 00:17:04.140
Copy this and use it.


00:17:04.140 --> 00:17:04.660
>> Yeah.


00:17:04.660 --> 00:17:05.840
>> When you see that here,


00:17:05.840 --> 00:17:09.300
you have the triple arrow and you write some code,


00:17:09.300 --> 00:17:10.980
the triple right arrow,


00:17:10.980 --> 00:17:12.740
greater than, greater than, greater than.


00:17:12.740 --> 00:17:14.700
You might do a for loop which then has


00:17:14.700 --> 00:17:17.740
the indents and it does a triple dot dot dot to show you that,


00:17:17.740 --> 00:17:20.780
well, now you're still in the same command.


00:17:20.780 --> 00:17:23.560
Then eventually, a closing dot and you run it.


00:17:23.560 --> 00:17:26.600
If you print out, you just say a variable or a response,


00:17:26.600 --> 00:17:28.280
then that gets printed without any of


00:17:28.280 --> 00:17:30.940
the dots or the greater thans or anything.


00:17:30.940 --> 00:17:33.760
It's just straight up as if you said print that.


00:17:33.760 --> 00:17:38.640
If I do copy this and I want to explore it,


00:17:38.640 --> 00:17:41.880
I've got to remove all the triple dot, dot,


00:17:41.880 --> 00:17:43.900
dots, unindent it correctly,


00:17:43.900 --> 00:17:46.040
remove the arrows, common,


00:17:46.040 --> 00:17:47.800
it's just like, yuck.


00:17:47.800 --> 00:17:49.760
It's just a hassle.


00:17:49.760 --> 00:17:57.200
So enter unravel the, the inverse of rebel, where you say, take this


00:17:57.200 --> 00:17:59.080
code and make it runnable for me.


00:17:59.080 --> 00:17:59.960
Isn't that cool?


00:17:59.960 --> 00:18:00.600
Yeah.


00:18:00.600 --> 00:18:01.760
Super simple.


00:18:01.760 --> 00:18:04.640
Like, even if you're in the rebel, you can't take what you're copying


00:18:04.640 --> 00:18:07.280
from someone else's example and put it in the rebel because then you'll


00:18:07.280 --> 00:18:12.040
have triple greater thans and so you just take this code and the way it


00:18:12.040 --> 00:18:13.600
works is you copy it to the clipboard.


00:18:13.600 --> 00:18:17.920
Your code sample that you got from this rebel thing, and then you just


00:18:17.920 --> 00:18:21.000
call Unrapple as a CLI and it replaces


00:18:21.000 --> 00:18:24.600
the clipboard with contents of exactly what you would want,


00:18:24.600 --> 00:18:27.720
and it even comments out the output.


00:18:27.720 --> 00:18:30.960
What wasn't code is now a code comment.


00:18:30.960 --> 00:18:32.040
>> Wow.


00:18:32.040 --> 00:18:32.540
>> Nice.


00:18:32.540 --> 00:18:33.440
>> That's perfect.


00:18:33.440 --> 00:18:34.880
>> Yeah, really perfect, right?


00:18:34.880 --> 00:18:36.320
>> Yeah.


00:18:36.320 --> 00:18:38.800
>> I can certainly see that this is


00:18:38.800 --> 00:18:43.920
a handy thing that people may want to install.


00:18:43.920 --> 00:18:46.760
When you see the instructions here,


00:18:46.760 --> 00:18:49.960
it says you can just use unrapple.py,


00:18:49.960 --> 00:18:51.340
and the way that you run it,


00:18:51.340 --> 00:18:53.000
it says up here somewhere.


00:18:53.000 --> 00:18:54.840
Okay, what you do.


00:18:54.840 --> 00:18:58.560
What you do is you copy it and then you run.


00:18:58.560 --> 00:19:00.400
He's updated. It just says unrapple.


00:19:00.400 --> 00:19:02.380
It used to say run unrapple.py,


00:19:02.380 --> 00:19:04.760
but it's also on PyPI,


00:19:04.760 --> 00:19:07.640
which means that you can pip install it.


00:19:07.640 --> 00:19:09.240
But I would not pip install.


00:19:09.240 --> 00:19:10.760
This is not the thing that goes into


00:19:10.760 --> 00:19:13.240
a virtual environment to be part of a program.


00:19:13.240 --> 00:19:16.120
This is a CLI tool that you just want to have.


00:19:16.120 --> 00:19:16.620
Yeah.


00:19:16.620 --> 00:19:20.420
Available. So I would replace pip with pipx.


00:19:20.420 --> 00:19:23.620
And then you just globally have this command on your computer.


00:19:23.620 --> 00:19:25.920
Just happens to be implemented with Python.


00:19:25.920 --> 00:19:28.920
But you copy it, you know, just type unrappel.


00:19:28.920 --> 00:19:32.420
And then, you know, whatever is in the clipboard is now better.


00:19:32.420 --> 00:19:33.220
Okay.


00:19:33.220 --> 00:19:36.120
It doesn't say use pipx, but I think it, I think that's the way.


00:19:36.120 --> 00:19:38.720
That's certainly how I would do it if I'm going to install and use this thing.


00:19:38.720 --> 00:19:41.920
There's a way to set up an auto hotkey on Windows only.


00:19:41.920 --> 00:19:44.420
I have no idea about this, so y'all are on your own there.


00:19:44.420 --> 00:19:46.780
Okay, so how do you do how do you use it on the command line?


00:19:46.780 --> 00:19:48.780
You're just you just type the word


00:19:48.780 --> 00:19:55.660
Unrapple once you've installed it in the path which pip X of course does and then you paste your code or use it - yeah


00:19:55.660 --> 00:19:59.540
So you copy your code type unrapple on the command line. It looks at your clipboard


00:19:59.540 --> 00:20:07.460
Okay on rebels and then it replaces the clipboard like basically with a new copy. Oh, that's the command. Yeah, that's exactly


00:20:07.460 --> 00:20:08.820
Yeah, yeah, so really easy


00:20:08.820 --> 00:20:14.660
It also says you can import it into a program and use it if for some reason you feel like that's the thing you want


00:20:14.660 --> 00:20:16.740
and it has special handling of the


00:20:16.740 --> 00:20:18.780
underscore


00:20:18.780 --> 00:20:25.060
Which has special meaning in the rebel like it knows that about underscore and treats it. Okay. Well like for instance like


00:20:25.060 --> 00:20:27.580
Somebody could like maybe


00:20:27.580 --> 00:20:33.540
Change be Python or something like that to to allow you to paste right in. Yep. Yeah neat


00:20:33.540 --> 00:20:35.540
Yeah people out there think it's nice


00:20:36.100 --> 00:20:38.440
This is a nifty little tool says Kim


00:20:38.440 --> 00:20:45.360
And see it uses TK enter presumably for clipboard access. I believe so as well


00:20:45.360 --> 00:20:51.160
It should use paper clip. I believe he paper paper clip rather hyper clip


00:20:51.160 --> 00:20:58.700
If if I were saying it that's like a super small simple little thing cross-platform copy and paste but you know doesn't matter


00:20:58.700 --> 00:21:05.640
Really what it uses to accomplish copy and paste the TK enters like built-in now is just normally


00:21:05.640 --> 00:21:07.520
>> Yeah, that's true. I guess there's no dependency.


00:21:07.520 --> 00:21:08.680
That's right, there's no dependency.


00:21:08.680 --> 00:21:10.640
Okay, maybe I'll take that back. Maybe that is better.


00:21:10.640 --> 00:21:12.200
Anyway, I love Paperclip.


00:21:12.200 --> 00:21:15.960
This is cool. I don't know if you're working on a book or if


00:21:15.960 --> 00:21:20.040
you're learning a lot where you're grabbing stuff off of tutorials.


00:21:20.040 --> 00:21:24.440
I spoke a tiny bit disparagingly of this,


00:21:24.440 --> 00:21:27.680
because the style of showing the REPL output,


00:21:27.680 --> 00:21:29.960
because I'd rather show an example that has


00:21:29.960 --> 00:21:32.320
executable code and a print statement.


00:21:32.320 --> 00:21:35.720
I already write this output like,


00:21:35.720 --> 00:21:39.080
here's the code, comment, here's the output.


00:21:39.080 --> 00:21:41.320
I don't know, it seems a little more reasonable to me,


00:21:41.320 --> 00:21:44.160
but whatever, people can write them in any style they want,


00:21:44.160 --> 00:21:46.460
and this Unrapple will roll it from one to the other.


00:21:46.460 --> 00:21:52.320
>> Yeah. You can also use a doc test to check your rebel docs.


00:21:52.320 --> 00:21:54.360
>> Yes, exactly.


00:21:54.360 --> 00:21:58.400
While they're giving a challenge to the community,


00:21:58.400 --> 00:22:01.380
I think someone should write a PyCharm and


00:22:01.380 --> 00:22:06.780
VS code plugins using this so it becomes part of the part of the editors as well,


00:22:06.780 --> 00:22:07.700
which would be pretty neat.


00:22:07.700 --> 00:22:11.980
Paste as, paste from, paste from REPL.


00:22:11.980 --> 00:22:13.900
>> Yeah, that'd be cool.


00:22:13.900 --> 00:22:15.940
>> But it's already really handy to have it


00:22:15.940 --> 00:22:18.740
just pop over the terminal and run this.


00:22:18.740 --> 00:22:20.220
>> Yeah. Awesome.


00:22:20.220 --> 00:22:22.420
>> I guess that's it for all of our items, isn't it?


00:22:22.420 --> 00:22:23.760
>> I think it is.


00:22:23.760 --> 00:22:26.940
>> Yeah. We've come to the end of all of the main things.


00:22:26.940 --> 00:22:28.220
What do you got for extras today?


00:22:28.220 --> 00:22:30.300
>> Well, I was going to mention that I wrote an article,


00:22:30.300 --> 00:22:32.540
but it was my item.


00:22:32.540 --> 00:22:33.460
>> Correct.


00:22:33.460 --> 00:22:34.820
>> That's it. How about you?


00:22:34.820 --> 00:22:37.660
>> There you go. I got a couple of quick ones here.


00:22:37.660 --> 00:22:40.500
I think this happened since our last show,


00:22:40.500 --> 00:22:42.580
but pretty much right after it shipped.


00:22:42.580 --> 00:22:45.700
If you have Git, you should update it.


00:22:45.700 --> 00:22:50.140
There's remote code execution level vulnerabilities in


00:22:50.140 --> 00:22:53.300
the Git client that is sitting on your machine if you have


00:22:53.300 --> 00:22:58.220
less than 2.39 maybe even less than 2.39.1.


00:22:58.220 --> 00:22:59.740
I can't remember the exact version.


00:22:59.740 --> 00:23:03.240
But until last week, there was a problem.


00:23:03.240 --> 00:23:05.480
I'll link to this over here,


00:23:05.480 --> 00:23:07.120
but you don't really want that.


00:23:07.120 --> 00:23:09.900
Yeah, affects 2.39 and older.


00:23:09.900 --> 00:23:10.980
>> I know.


00:23:10.980 --> 00:23:13.140
>> So careful.


00:23:13.140 --> 00:23:14.980
I mean, if you're only pulling stuff from


00:23:14.980 --> 00:23:18.060
your own repo and only you can put stuff in your repo, you're safe.


00:23:18.060 --> 00:23:22.120
But if you're checking out someone else's repo or PRs or things,


00:23:22.120 --> 00:23:24.420
you might not like it.


00:23:24.420 --> 00:23:27.620
Okay. Another one here.


00:23:27.620 --> 00:23:34.500
Over on, quite on training, we, as much as I don't like to, had to add,


00:23:34.500 --> 00:23:36.980
um, some kind of validation.


00:23:36.980 --> 00:23:40.240
And it used to be that dreaded recapture thing from Google.


00:23:40.240 --> 00:23:44.140
And I would say, find all of the stoplights and you're like, well, is


00:23:44.140 --> 00:23:47.140
it the pole of the stoplight also to stop?


00:23:47.140 --> 00:23:49.380
I mean, technically it is, but it's not the light part.


00:23:49.380 --> 00:23:50.820
And it'll be like, try again.


00:23:50.820 --> 00:23:51.580
You're like, no.


00:23:51.580 --> 00:23:52.460
Right.


00:23:52.460 --> 00:23:55.940
Um, but because it's the internet, we can't have nice things.


00:23:56.220 --> 00:24:01.140
Unfortunately, I had to put something there to slow people down because they were just


00:24:01.140 --> 00:24:05.060
pounding away on it in various ways that were not ideal.


00:24:05.060 --> 00:24:09.260
We had stuff to mitigate it, but once you start encountering botnets, then you kind


00:24:09.260 --> 00:24:10.740
of get yourself into a bad place.


00:24:10.740 --> 00:24:15.700
So I had to put the Recaptcha stuff there to keep people from messing with it.


00:24:15.700 --> 00:24:19.580
And I hate Recaptcha, but I did it because I had to.


00:24:19.580 --> 00:24:24.220
So then when Cloudflare came out with Turnstile, I'm like, "Yes, this is so much better.


00:24:24.220 --> 00:24:28.100
It doesn't ask you about chimneys or fire trucks.


00:24:28.100 --> 00:24:30.120
It just does a little like,


00:24:30.120 --> 00:24:32.080
run some code on your browser to prove


00:24:32.080 --> 00:24:34.200
that you're not just requesting


00:24:34.200 --> 00:24:36.200
and posting this from some bot,


00:24:36.200 --> 00:24:38.160
but it's a real browser, off it goes, right?


00:24:38.160 --> 00:24:39.800
So that's great.


00:24:39.800 --> 00:24:42.040
Eli Cobbler said,


00:24:42.040 --> 00:24:44.760
"Hey, this is awesome that you got this working.


00:24:44.760 --> 00:24:46.780
"I can't get it working.


00:24:46.780 --> 00:24:48.320
"How do you use it?"


00:24:48.320 --> 00:24:51.360
So I ended up posting a gist,


00:24:51.360 --> 00:24:53.520
which has an implementation of this


00:24:53.520 --> 00:24:56.620
using like a faux web framework.


00:24:56.620 --> 00:24:58.720
Didn't really, I didn't want to tie it to Flask,


00:24:58.720 --> 00:24:59.720
but it just says like,


00:24:59.720 --> 00:25:01.560
here's your thing that handles the forum posts.


00:25:01.560 --> 00:25:02.720
Do this.


00:25:02.720 --> 00:25:06.280
It shows the HTML bit, which also CloudFlare would show,


00:25:06.280 --> 00:25:07.660
but they don't have the Python version.


00:25:07.660 --> 00:25:08.960
And then it has the


00:25:08.960 --> 00:25:13.840
Hidantic based API validation stuff here,


00:25:13.840 --> 00:25:16.680
which is, this is the gnarly bit.


00:25:16.680 --> 00:25:18.080
So he was like, I can't get it working.


00:25:18.080 --> 00:25:19.040
Can you post this?


00:25:19.040 --> 00:25:19.880
Boom.


00:25:19.880 --> 00:25:20.840
And apparently he got it working as well,


00:25:20.840 --> 00:25:23.840
But I'm sure there are other people who equally hate


00:25:23.840 --> 00:25:26.680
find all the haystacks, find all the fire trucks,


00:25:26.680 --> 00:25:28.060
and would rather use churn style.


00:25:28.060 --> 00:25:29.440
But it's kind of tricky to use.


00:25:29.440 --> 00:25:32.000
So they can also use that gist if they so wish.


00:25:32.000 --> 00:25:34.720
[LAUGHTER]


00:25:34.720 --> 00:25:35.520
Yeah.


00:25:35.520 --> 00:25:38.000
That's funny.


00:25:38.000 --> 00:25:38.960
Yeah.


00:25:38.960 --> 00:25:41.480
David Poole says, Google's CAPTCHAs


00:25:41.480 --> 00:25:43.320
made me doubt my own humanity.


00:25:43.320 --> 00:25:45.680
[LAUGHTER]


00:25:45.680 --> 00:25:47.600
So I always thought it'd be fun to do


00:25:47.600 --> 00:25:50.660
trees instead or like plant identification.


00:25:50.660 --> 00:25:54.880
Like find the azaleas.


00:25:54.880 --> 00:25:55.660
>> Find the azaleas.


00:25:55.660 --> 00:25:56.960
>> What?


00:25:56.960 --> 00:26:02.120
>> Let's see. So when I


00:26:02.120 --> 00:26:03.480
talked about getting a bunch of stickers


00:26:03.480 --> 00:26:05.220
on my computer the other day, remember that?


00:26:05.220 --> 00:26:05.600
>> Yeah.


00:26:05.600 --> 00:26:07.720
>> Well, one of the stickers I put is,


00:26:07.720 --> 00:26:10.320
I'm not a robot and it's like a validated reCAPTCHA.


00:26:10.320 --> 00:26:12.480
So I just thought that was fun too.


00:26:12.480 --> 00:26:13.760
>> But that's cool.


00:26:13.760 --> 00:26:15.520
>> Yeah. Anyway, so if people are interested


00:26:15.520 --> 00:26:17.160
and they want to try out Turnstile,


00:26:17.160 --> 00:26:19.260
which is way more privacy oriented.


00:26:19.260 --> 00:26:21.480
Also nicer because you don't have to interact with it.


00:26:21.480 --> 00:26:22.760
Just a little hard to work with.


00:26:22.760 --> 00:26:24.560
Here's some code that they can try that at least


00:26:24.560 --> 00:26:26.880
one other person has been successful in using.


00:26:26.880 --> 00:26:32.220
So that's a tepid but somewhat good testimonial. How's that?


00:26:32.220 --> 00:26:33.120
>> That's nice.


00:26:33.120 --> 00:26:36.080
>> All right. Thank goodness it wasn't in the JavaScript, Brian.


00:26:36.080 --> 00:26:37.360
>> Yeah.


00:26:37.360 --> 00:26:38.840
>> Because if it's in the JavaScript,


00:26:38.840 --> 00:26:40.720
I don't want to have to go debug that. Do you want to debug it?


00:26:40.720 --> 00:26:42.880
>> No, I don't want to debug it in the JavaScript.


00:26:42.880 --> 00:26:46.280
>> It might make you so crazy as if to go and


00:26:46.280 --> 00:26:50.000
literally write a song about how much you don't want to go into the JavaScript.


00:26:50.000 --> 00:26:50.940
>> Yeah.


00:26:50.940 --> 00:26:55.740
>> Now, I am very unskilled at music,


00:26:55.740 --> 00:27:03.000
but Dylan Betty is actually quite skilled and has a whole bunch of


00:27:03.000 --> 00:27:08.120
really funny songs here like the big rewrite based on American Pie,


00:27:08.120 --> 00:27:11.220
when eight and a half minute long song I'll point out,


00:27:11.220 --> 00:27:14.220
and he wrote a programming song against it.


00:27:14.220 --> 00:27:14.720
>> Awesome.


00:27:14.720 --> 00:27:17.060
Your API is a hall of shame.


00:27:17.060 --> 00:27:20.580
You give rest a bad name based on the Bon Jovi song.


00:27:20.580 --> 00:27:23.160
But neither of those are the one that I'm referring to.


00:27:23.160 --> 00:27:26.080
No, I'm referring to the song called Bug in


00:27:26.080 --> 00:27:30.820
the JavaScript based on Piano Man by Billy Joel.


00:27:30.820 --> 00:27:32.660
This is good stuff, right?


00:27:32.660 --> 00:27:33.320
>> Yeah.


00:27:33.320 --> 00:27:34.600
>> Now, it's six and a half minutes,


00:27:34.600 --> 00:27:35.940
so there's no way I can play it,


00:27:35.940 --> 00:27:39.460
but it starts out like you've checked all of your database indexes,


00:27:39.460 --> 00:27:41.580
you've tuned all your API hooks.


00:27:41.580 --> 00:27:44.320
You're starting to think that you might need a drink


00:27:44.320 --> 00:27:46.640
because there's only one place left to look.


00:27:46.640 --> 00:27:48.800
There must be a bug in the JavaScript


00:27:48.800 --> 00:27:50.900
because everything else is built properly,


00:27:50.900 --> 00:27:53.120
but the front end is a pile of crap.


00:27:53.120 --> 00:27:54.480
It's so fun.


00:27:54.480 --> 00:27:56.960
>> I like it.


00:27:56.960 --> 00:27:59.240
>> I'm starting to think that I might need a drink


00:27:59.240 --> 00:28:01.440
because there's only one place left to look. It's really good.


00:28:01.440 --> 00:28:03.240
I recommend people put this on.


00:28:03.240 --> 00:28:07.800
If you're working with Angular or Vue or some front-end framework,


00:28:07.800 --> 00:28:10.040
you can play it loud in the office


00:28:10.040 --> 00:28:13.540
just to share a little bit of the feeling.


00:28:13.540 --> 00:28:17.220
Yeah, anyway, that's what I got for you this week. People can go watch the YouTube video


00:28:17.220 --> 00:28:19.260
Thanks


00:28:19.260 --> 00:28:21.260
Yeah, you bet and


00:28:21.260 --> 00:28:26.220
Thanks for being here. Thanks everyone for listening as always. Thank you. Bye. Bye y'all

