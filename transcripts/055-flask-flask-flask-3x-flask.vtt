
00:00:00.000 --> 00:00:05.800
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.800 --> 00:00:10.700
This is episode 55, recorded December 6, 2017.


00:00:10.700 --> 00:00:11.600
I'm Michael Kennedy.


00:00:11.600 --> 00:00:12.500
And I'm Brian Okken.


00:00:12.500 --> 00:00:13.800
And Brian, can you believe it's December?


00:00:13.800 --> 00:00:15.300
Yeah, it's getting cold out.


00:00:15.300 --> 00:00:20.000
It's getting cold. I look outside, it's the middle of the day and it's still like basically dark.


00:00:20.000 --> 00:00:21.400
So I guess we're getting there.


00:00:21.400 --> 00:00:21.900
Yeah.


00:00:21.900 --> 00:00:26.400
So before we get into our picks for the week though, let's just say thanks to DigitalOcean.


00:00:26.400 --> 00:00:29.920
They have a ton of awesome servers for you.


00:00:29.920 --> 00:00:32.600
The websites I run run on DigitalOcean.


00:00:32.600 --> 00:00:34.860
So, we'll tell you more about that later.


00:00:34.860 --> 00:00:37.920
However, one option, I guess one of the servers I have


00:00:37.920 --> 00:00:39.520
actually runs Flask.


00:00:39.520 --> 00:00:42.480
And Brian, I hear you're kind of digging Flask these days.


00:00:42.480 --> 00:00:45.040
- Yeah, I am actually going through


00:00:45.040 --> 00:00:48.520
Miguel Grimberg's Flask mega tutorial.


00:00:48.520 --> 00:00:50.520
So, I'm pretty excited about that.


00:00:50.520 --> 00:00:53.520
And I got actually from the,


00:00:53.520 --> 00:00:55.280
I think I took the advice from you


00:00:55.280 --> 00:00:59.080
to try something simple like Flask at first,


00:00:59.080 --> 00:01:03.920
not to slam Flask, but it is pretty low barrier to entry.


00:01:03.920 --> 00:01:06.680
And I knew Miguel was rewriting this mega tutorial,


00:01:06.680 --> 00:01:11.080
so I begged and pleaded and got an early copy of the rewrite.


00:01:11.080 --> 00:01:12.840
So I'm partway through it right now.


00:01:12.840 --> 00:01:16.120
But he did a Kickstarter to try to rewrite it.


00:01:16.120 --> 00:01:18.480
The first one was in 2012.


00:01:18.480 --> 00:01:22.080
And his Kickstarter was very successful, I think.


00:01:22.080 --> 00:01:25.560
'cause part one of the rewrite is available right now today.


00:01:25.560 --> 00:01:26.400
- Yeah, that's awesome.


00:01:26.400 --> 00:01:28.560
And I know Miguel's been putting a ton of work


00:01:28.560 --> 00:01:29.640
into the rewrite.


00:01:29.640 --> 00:01:33.000
I was so excited to see his Kickstarter be successful.


00:01:33.000 --> 00:01:35.120
He added a bunch of stretch scrolls


00:01:35.120 --> 00:01:38.280
to do additional sections.


00:01:38.280 --> 00:01:41.120
He has an ebook version and a video version


00:01:41.120 --> 00:01:43.480
coming out of it, coming out as rewards from it.


00:01:43.480 --> 00:01:44.600
He hasn't done the videos yet.


00:01:44.600 --> 00:01:46.680
He and I were actually just talking today about the videos.


00:01:46.680 --> 00:01:48.620
So that'll be fun.


00:01:48.620 --> 00:01:52.160
But yeah, so if you want to learn how to get going Flask,


00:01:52.160 --> 00:01:53.160
his work is really great.


00:01:53.160 --> 00:01:54.260
And so definitely check it out.


00:01:54.260 --> 00:01:56.140
- He does have, what he's going to do is he's going to


00:01:56.140 --> 00:01:58.400
release one part every week,


00:01:58.400 --> 00:02:01.620
but if you can't wait that long, you can buy his ebook.


00:02:01.620 --> 00:02:03.460
I think it's just like 10 bucks or something.


00:02:03.460 --> 00:02:04.540
- Yeah, totally affordable.


00:02:04.540 --> 00:02:05.860
- And that's what I'm reading right now.


00:02:05.860 --> 00:02:08.700
And yeah, his video, he says he's planning on January


00:02:08.700 --> 00:02:09.660
for the video version.


00:02:09.660 --> 00:02:11.420
- Yep. Very cool. Very cool.


00:02:11.420 --> 00:02:12.500
- Speaking of new releases.


00:02:12.500 --> 00:02:15.140
- New releases and the web, amazing stuff.


00:02:15.140 --> 00:02:17.260
Django 2.0 is released.


00:02:17.260 --> 00:02:19.940
And this is a huge, huge change.


00:02:19.940 --> 00:02:22.420
It has been many, many moons


00:02:22.420 --> 00:02:26.180
since major point release of Django has come out.


00:02:26.180 --> 00:02:28.420
I mean, after all, it's only version two, right?


00:02:28.420 --> 00:02:29.340
This is a huge deal,


00:02:29.340 --> 00:02:32.740
and it's a lot of cool new features.


00:02:32.740 --> 00:02:35.540
One of the things that they added that I really like,


00:02:35.540 --> 00:02:38.380
and I don't know, it's always made me just crazy


00:02:38.380 --> 00:02:39.220
when I looked at Django,


00:02:39.220 --> 00:02:42.980
is the fact of writing regular expressions for the routing,


00:02:42.980 --> 00:02:44.500
which is I want to take this URL


00:02:44.500 --> 00:02:47.640
and figure out which view method that goes to.


00:02:47.640 --> 00:02:50.400
That used to be a regular expression, which was painful.


00:02:50.400 --> 00:02:54.200
Now it's much more like Flask and Pyramid.


00:02:54.200 --> 00:02:55.720
You just put little identifiers,


00:02:55.720 --> 00:02:58.040
like variable names in cutout URL,


00:02:58.040 --> 00:02:59.380
and then that's how it maps over.


00:02:59.380 --> 00:03:00.220
And you even have types.


00:03:00.220 --> 00:03:05.220
You can say it has to map to /users/userid,


00:03:05.220 --> 00:03:07.600
colon, int, or I think int goes first.


00:03:07.600 --> 00:03:10.440
But there's this nice routing syntax.


00:03:10.440 --> 00:03:14.100
There's some nice responsive design changes,


00:03:14.100 --> 00:03:17.280
better querying over some of the query sets.


00:03:17.280 --> 00:03:18.260
These are all cool.


00:03:18.260 --> 00:03:21.780
They have a new versioning,


00:03:21.780 --> 00:03:25.480
what they're calling loose form of semantic versioning.


00:03:25.480 --> 00:03:27.900
So if you look at the possible versions,


00:03:27.900 --> 00:03:31.000
we have two, maybe it'll be a 2.1,


00:03:31.000 --> 00:03:34.220
and then a 2.2, and then that 2.2,


00:03:34.220 --> 00:03:36.460
maybe that's something they're calling stable,


00:03:36.460 --> 00:03:37.780
long-term support, LTS.


00:03:37.780 --> 00:03:39.500
So it might be 2.2 LTS.


00:03:39.500 --> 00:03:43.500
And then if they go anything beyond the LTS, that's a three.


00:03:43.500 --> 00:03:45.460
then a 3.1, then a 3.2 LTS.


00:03:45.460 --> 00:03:49.020
So like anytime you go into like new territory


00:03:49.020 --> 00:03:50.420
past the LTS version,


00:03:50.420 --> 00:03:52.740
it sort of is a major version increment now.


00:03:52.740 --> 00:03:54.100
- Okay, it's interesting.


00:03:54.100 --> 00:03:55.900
- Yeah, so I suspect that we'll see


00:03:55.900 --> 00:03:59.680
major Django version numbers coming faster because of that,


00:03:59.680 --> 00:04:01.620
but I'm not sure, I guess we'll have to see.


00:04:01.620 --> 00:04:05.100
- And then there is some exciting thing about Python 3.


00:04:05.100 --> 00:04:06.420
- Yeah, it's very exciting.


00:04:06.420 --> 00:04:09.340
The legacy Python is dealt yet another blow.


00:04:09.340 --> 00:04:14.340
So Django has had a significant disproportionate influence


00:04:14.340 --> 00:04:16.300
on the adoption of Python 3.


00:04:16.300 --> 00:04:18.860
For example, when they switched their tutorials


00:04:18.860 --> 00:04:21.060
by default to use Python 3 versus Python 2,


00:04:21.060 --> 00:04:26.060
that dramatically changed the usage by numbers on PyPI.


00:04:26.060 --> 00:04:31.180
And so now, they've actually dropped support for Python 2.


00:04:31.180 --> 00:04:32.940
It's the first version of Django that says,


00:04:32.940 --> 00:04:36.140
you know what, Python 2, thanks, but that's not for us.


00:04:36.140 --> 00:04:37.780
It's Python 3 only going forward.


00:04:37.780 --> 00:04:40.120
- Yeah, and because of that, I've seen a few people


00:04:40.120 --> 00:04:43.860
mention on Twitter that working with the code base


00:04:43.860 --> 00:04:46.440
is a lot easier now because there aren't a lot


00:04:46.440 --> 00:04:49.780
of backwards compatible things in there.


00:04:49.780 --> 00:04:51.300
They were able to clean up the code base


00:04:51.300 --> 00:04:53.500
quite a bit for this, so I think it's great.


00:04:53.500 --> 00:04:55.020
- I think it's great as well, and yeah,


00:04:55.020 --> 00:04:57.620
it definitely makes working on new features easier


00:04:57.620 --> 00:05:00.220
'cause you don't have to write them twice in some sense.


00:05:00.220 --> 00:05:01.740
And there's a bunch of small changes.


00:05:01.740 --> 00:05:03.180
I don't wanna read 'em all off to you,


00:05:03.180 --> 00:05:04.620
but just to give you a sense,


00:05:04.620 --> 00:05:07.860
down in django-contrib.auth,


00:05:07.860 --> 00:05:11.900
luckily they're doing password hashing and folding.


00:05:11.900 --> 00:05:13.800
So not just hashing with salt,


00:05:13.800 --> 00:05:15.380
but then you take that and you hash that,


00:05:15.380 --> 00:05:16.420
and you take that and you hash that,


00:05:16.420 --> 00:05:18.920
and then they used to do that 36,000 times.


00:05:18.920 --> 00:05:20.580
Now they do that 100,000 times,


00:05:20.580 --> 00:05:22.420
so it's more computationally expensive


00:05:22.420 --> 00:05:25.780
to guess the password if somehow the database were to leak.


00:05:25.780 --> 00:05:28.020
And so there's just tons of little cool changes like that


00:05:28.020 --> 00:05:28.840
throughout there as well,


00:05:28.840 --> 00:05:31.220
but probably the biggest one people will notice


00:05:31.220 --> 00:05:33.140
is the simplified URL routing.


00:05:33.140 --> 00:05:34.100
- Yeah, that's nice.


00:05:34.100 --> 00:05:36.180
So you got a bunch of rules for us or something, huh?


00:05:36.180 --> 00:05:37.020
- I do.


00:05:37.020 --> 00:05:37.840
- What's up with that?


00:05:37.840 --> 00:05:41.840
- I'm usually somebody that doesn't follow a lot of rules.


00:05:41.840 --> 00:05:44.660
But one of the things I embraced when coming into Python


00:05:44.660 --> 00:05:48.900
is the notion of that there's kind of a coding style


00:05:48.900 --> 00:05:50.480
that everyone follows,


00:05:50.480 --> 00:05:53.060
or a lot of people follow on open source projects,


00:05:53.060 --> 00:05:55.600
which is PEP 8, and then it's extended.


00:05:55.600 --> 00:05:59.500
So there's, when I started using type checkers like Lint,


00:05:59.500 --> 00:06:01.700
or at the time I started it,


00:06:01.700 --> 00:06:04.700
The way to check for PEP8 was a tool called PEP8.


00:06:04.700 --> 00:06:06.260
That's now been changed,


00:06:06.260 --> 00:06:08.820
the name has changed to PyCodeStyle.


00:06:08.820 --> 00:06:12.880
But now I'll usually use Flake 8 for my linter.


00:06:12.880 --> 00:06:17.100
And there's a, so Flake 8 covers PyCodeStyle,


00:06:17.100 --> 00:06:19.980
which is PEP8, and then it covers PyFlakes,


00:06:19.980 --> 00:06:23.100
which does a lot of traditional lint stuff to catch bugs.


00:06:23.100 --> 00:06:26.860
And then a McCabe complexity checker.


00:06:26.860 --> 00:06:29.660
And that one, I actually have tried to figure that out


00:06:29.660 --> 00:06:31.740
several times and I don't know what it does.


00:06:31.740 --> 00:06:33.700
- Nice, yeah, cyclomatic complexity


00:06:33.700 --> 00:06:38.140
is a pretty interesting metric for code maintainability.


00:06:38.140 --> 00:06:41.900
So the idea is how many different decision paths


00:06:41.900 --> 00:06:44.420
are possible through that code, right?


00:06:44.420 --> 00:06:48.160
So if you had a method of cyclomatic complexity five,


00:06:48.160 --> 00:06:50.540
there's five separate execution paths


00:06:50.540 --> 00:06:51.380
that could go through there.


00:06:51.380 --> 00:06:53.660
There could be one if case that does an early return,


00:06:53.660 --> 00:06:56.140
another that's an if, elif, elif,


00:06:56.140 --> 00:06:58.500
and taking all the possible ways


00:06:58.500 --> 00:07:00.500
in which you could go through those conditionals


00:07:00.500 --> 00:07:02.840
and loops and whatnot, there would be five possibilities.


00:07:02.840 --> 00:07:05.080
So meaning basically you need five tests minimum


00:07:05.080 --> 00:07:05.920
to cover that.


00:07:05.920 --> 00:07:08.680
- Okay, I'm not sure what the check is for McKay,


00:07:08.680 --> 00:07:12.340
what the complexity number is that they're flagging for,


00:07:12.340 --> 00:07:13.560
but I usually turn it on anyway,


00:07:13.560 --> 00:07:16.380
'cause I wanna know if my code's a little too complex.


00:07:16.380 --> 00:07:19.520
The issue with it is a lot of these spit out


00:07:19.520 --> 00:07:23.680
an error message with a one-liner explaining what it is.


00:07:23.680 --> 00:07:25.900
And so what I have for us today


00:07:25.900 --> 00:07:28.960
is called the Big Ol' List of Rules,


00:07:28.960 --> 00:07:32.260
which translates all of those errors and warning numbers


00:07:32.260 --> 00:07:35.800
into very nice one-page descriptions of what they are


00:07:35.800 --> 00:07:38.600
with links to more information.


00:07:38.600 --> 00:07:39.740
And I really like it.


00:07:39.740 --> 00:07:41.220
I'm gonna be using this all the time now.


00:07:41.220 --> 00:07:42.060
- That's really cool.


00:07:42.060 --> 00:07:44.220
I feel like there's an opportunity,


00:07:44.220 --> 00:07:46.980
first of all, well done Grant for writing this


00:07:46.980 --> 00:07:48.260
and putting this all out for everyone.


00:07:48.260 --> 00:07:51.980
But I think there's an opportunity for editor plugins,


00:07:51.980 --> 00:07:54.220
whether you're using Sublime, Visual Studio Code,


00:07:54.220 --> 00:07:55.780
or PyJarn or whatever,


00:07:55.780 --> 00:08:01.280
you could probably get a plugin that would turn that into a hyperlink that shows the details from this list, and that would be awesome.


00:08:01.280 --> 00:08:02.280
Oh yeah, that'd be good.


00:08:02.280 --> 00:08:06.780
Yeah, I'm using... so PyCharm does this, checks for all this stuff,


00:08:06.780 --> 00:08:13.480
and I usually turn it on for pytest too, I have my pytest plugin to check FlateGate.


00:08:13.480 --> 00:08:17.480
Once you find an error trying to fix it, it's good to know what it is.


00:08:17.480 --> 00:08:21.480
Yeah, especially when it's just E112, like what the heck does that mean, right?


00:08:21.480 --> 00:08:22.480
Yeah.


00:08:22.480 --> 00:08:25.480
I mean, you may be really good at knowing, but I don't know.


00:08:25.480 --> 00:08:29.440
- Awesome, so before we get on to the next item,


00:08:29.440 --> 00:08:31.840
just want to let everyone know that this podcast


00:08:31.840 --> 00:08:33.440
and really all the sites that I run


00:08:33.440 --> 00:08:35.600
are coming to you through DigitalOcean.


00:08:35.600 --> 00:08:37.720
I have, gosh, it's just a growing list.


00:08:37.720 --> 00:08:39.580
I think I probably have eight servers over there now


00:08:39.580 --> 00:08:41.740
doing all sorts of hard work and working together


00:08:41.740 --> 00:08:45.680
on various services and database connectivity and whatnot.


00:08:45.680 --> 00:08:49.200
So super excited about working with DigitalOcean


00:08:49.200 --> 00:08:51.320
and talking about their stuff


00:08:51.320 --> 00:08:53.640
because it's really, really been great to work with.


00:08:53.640 --> 00:08:57.940
So if you're looking for cheap, reliable, fast servers


00:08:57.940 --> 00:09:02.860
that are simple and not a huge mess of a thousand features


00:09:02.860 --> 00:09:05.060
like you might get at somewhere like AWS or Azure,


00:09:05.060 --> 00:09:06.820
you just wanna have a server and work with it


00:09:06.820 --> 00:09:09.380
in a really nice way, check them out at digitalocean.com


00:09:09.380 --> 00:09:11.700
and let them know that Python Bytes sent you.


00:09:11.700 --> 00:09:12.540
- Nice.


00:09:12.540 --> 00:09:15.820
- Yeah, we could probably contact them with requests as well.


00:09:15.820 --> 00:09:18.540
We could probably do some sort of API and talk to them,


00:09:18.540 --> 00:09:19.900
but if you wanna test it,


00:09:19.900 --> 00:09:21.620
you need to mock out your request, right?


00:09:21.620 --> 00:09:22.460
- Definitely.


00:09:22.460 --> 00:09:27.380
One of the challenges I think, there's a few things that are really make testing sticky,


00:09:27.380 --> 00:09:29.020
tricky, whatever.


00:09:29.020 --> 00:09:31.220
One of them is time.


00:09:31.220 --> 00:09:34.860
The other one is the network and external services.


00:09:34.860 --> 00:09:38.160
Some of that being requests type things, some of that being databases.


00:09:38.160 --> 00:09:43.300
So any chance you get to cleanly sort of mock that out is really nice.


00:09:43.300 --> 00:09:47.820
And so this one actually comes from a friend of the show, Anthony Shaw, and he has this


00:09:47.820 --> 00:09:50.820
thing called request static mock.


00:09:50.820 --> 00:09:54.980
And I think we were recently talking about something with mocking requests.


00:09:54.980 --> 00:09:58.540
And he's like, you should check out request static mock.


00:09:58.540 --> 00:10:00.340
And so I did, and it's pretty cool.


00:10:00.340 --> 00:10:03.420
So I decided to make it one of the things we're talking about this week.


00:10:03.420 --> 00:10:08.380
And the idea is you can create a request session, and then mock that out like, hey, I want that


00:10:08.380 --> 00:10:11.460
return a 503 service unavailable.


00:10:11.460 --> 00:10:18.440
Or I'd like when you make this request to this URL, return this JSON file as the response.


00:10:18.440 --> 00:10:21.380
So really easy to swap out the testing behavior,


00:10:21.380 --> 00:10:25.240
like if your code somewhere deep down calls into requests,


00:10:25.240 --> 00:10:26.760
but you can do it without monkey patching.


00:10:26.760 --> 00:10:29.460
- Yeah, that's the neat part is it's without monkey patching


00:10:29.460 --> 00:10:32.740
or doing a lot of these test-based mocks.


00:10:32.740 --> 00:10:33.580
It's pretty cool.


00:10:33.580 --> 00:10:34.400
- Yeah, it definitely is.


00:10:34.400 --> 00:10:36.400
Yeah, you don't really mock stuff as much.


00:10:36.400 --> 00:10:38.200
You kind of just plug in the session.


00:10:38.200 --> 00:10:39.500
You know, for people who don't know,


00:10:39.500 --> 00:10:42.240
the session object is a thing that comes from requests,


00:10:42.240 --> 00:10:43.680
which is actually pretty interesting.


00:10:43.680 --> 00:10:48.480
So suppose you're going to start talking to a service


00:10:48.480 --> 00:10:51.440
and every single request has to have an auth header,


00:10:51.440 --> 00:10:53.300
it has to have maybe a user agent,


00:10:53.300 --> 00:10:56.120
it has some other details, some kind of token type thing,


00:10:56.120 --> 00:10:58.760
who knows, a lot of shared stuff.


00:10:58.760 --> 00:11:01.720
Or if you're gonna try to submit a form


00:11:01.720 --> 00:11:04.760
and then you need to take a session on the server,


00:11:04.760 --> 00:11:06.240
like a cookie-based session,


00:11:06.240 --> 00:11:08.320
and then go and do other things,


00:11:08.320 --> 00:11:10.800
you can't do that with just straight requests so easily.


00:11:10.800 --> 00:11:12.320
So you create one of these sessions


00:11:12.320 --> 00:11:13.960
and it keeps a persistent connection,


00:11:13.960 --> 00:11:15.900
it handles the cookies per, you know,


00:11:15.900 --> 00:11:18.320
across all the requests and stuff like that.


00:11:18.320 --> 00:11:19.240
So that's really handy.


00:11:19.240 --> 00:11:22.440
And what Anthony's thing does is create a sort of


00:11:22.440 --> 00:11:25.400
testing session variant of that.


00:11:25.400 --> 00:11:26.240
So it's pretty cool.


00:11:26.240 --> 00:11:27.320
So you can mock that thing out.


00:11:27.320 --> 00:11:28.960
- Yeah, and the way you put it together too,


00:11:28.960 --> 00:11:32.840
is the data that's coming back is just in like a,


00:11:32.840 --> 00:11:34.960
you can just set it up as like a tree structure


00:11:34.960 --> 00:11:37.080
in your file system.


00:11:37.080 --> 00:11:40.360
It's kind of like your old school HTML directory.


00:11:40.360 --> 00:11:43.640
- That's right, with some index.html and yeah,


00:11:43.640 --> 00:11:45.280
all that kind of stuff, they just put it in there


00:11:45.280 --> 00:11:46.440
and it traverses that, that's cool.


00:11:46.440 --> 00:11:49.320
- It's a nice interface for the developer as well.


00:11:49.320 --> 00:11:50.160
It's cool.


00:11:50.160 --> 00:11:51.560
- Yep, well done, Anthony.


00:11:51.560 --> 00:11:53.920
So you're gonna give us a bit of a preview


00:11:53.920 --> 00:11:55.240
of Python 3.7, right?


00:11:55.240 --> 00:11:56.840
'Cause there's some pretty awesome stuff


00:11:56.840 --> 00:11:59.440
that just got approved or finalized.


00:11:59.440 --> 00:12:02.860
- Data classes, which I didn't know it was on the fence


00:12:02.860 --> 00:12:05.840
for a while, but these are data classes


00:12:05.840 --> 00:12:10.240
that have been approved by Guido and it's PEP 557.


00:12:10.240 --> 00:12:13.920
And these are kind of a different form of regular old classes,


00:12:13.920 --> 00:12:16.560
but you can put a decorator on there for a data class.


00:12:16.560 --> 00:12:19.960
And then you can sort of say what your--


00:12:19.960 --> 00:12:21.740
some data elements and what type they are,


00:12:21.740 --> 00:12:23.520
and you can assign defaults.


00:12:23.520 --> 00:12:25.600
And the cool thing about that is you


00:12:25.600 --> 00:12:27.760
don't have to write your own init statement.


00:12:27.760 --> 00:12:29.600
It kind of generates one for you.


00:12:29.600 --> 00:12:31.520
So the first time I saw these, I'm like, wait,


00:12:31.520 --> 00:12:32.480
that's not valid Python.


00:12:32.480 --> 00:12:33.160
What is this?


00:12:33.160 --> 00:12:35.000
What language is this?


00:12:35.000 --> 00:12:40.200
Yeah, so you could say like class C colon, and then just A.


00:12:40.200 --> 00:12:43.640
colon int new line B colon int new line.


00:12:43.640 --> 00:12:48.160
And you just start out with a class when you create it that has an A and a B,


00:12:48.160 --> 00:12:49.200
and those are both none, right?


00:12:49.200 --> 00:12:51.160
Or you can even set default values.


00:12:51.160 --> 00:12:51.960
It's pretty cool.


00:12:51.960 --> 00:12:56.040
It lets you do more of the define as part of the class structure instead of


00:12:56.040 --> 00:12:59.120
the self.attribute equals value through the Dunder init.


00:12:59.120 --> 00:13:01.560
But like you said, it still generates that Dunder init and


00:13:01.560 --> 00:13:03.680
then moves over the default values and all that.


00:13:03.680 --> 00:13:04.960
>> I kind of like the syntax.


00:13:04.960 --> 00:13:07.000
The first time I saw it, like you said,


00:13:07.000 --> 00:13:09.680
it's bracing and it's like this isn't Python.


00:13:09.680 --> 00:13:15.680
But it's kind of nice that you can just put that in one place and not worry about it too much.


00:13:15.680 --> 00:13:16.680
It's pretty clean.


00:13:16.680 --> 00:13:17.680
Definitely like it, yeah.


00:13:17.680 --> 00:13:23.680
I find myself doing this sometimes, and I'll just have to set everything to none, or to zero, or something like that,


00:13:23.680 --> 00:13:25.680
because it won't work otherwise.


00:13:25.680 --> 00:13:26.680
But guess what? It does now.


00:13:26.680 --> 00:13:27.680
It's cool.


00:13:27.680 --> 00:13:35.680
And I also just found out that there is a 3.7.0.A3 developer build that's out that has this in it.


00:13:35.680 --> 00:13:37.960
if people want to play with it, they can,


00:13:37.960 --> 00:13:41.040
but I probably wouldn't do much production code with it


00:13:41.040 --> 00:13:43.560
because 3.7 isn't scheduled until June.


00:13:43.560 --> 00:13:44.960
- Okay, yeah, so it's a little ways out,


00:13:44.960 --> 00:13:46.640
but still exciting to see this coming.


00:13:46.640 --> 00:13:48.880
I think this is pretty nice.


00:13:48.880 --> 00:13:50.720
So one of the things that this feels like,


00:13:50.720 --> 00:13:53.640
I think it's compared to and looks somewhat similar to,


00:13:53.640 --> 00:13:57.240
is Adders, and Adders gets a lot of attention as well.


00:13:57.240 --> 00:13:58.600
What's the story between those two?


00:13:58.600 --> 00:14:01.120
- I don't know the history of how much,


00:14:01.120 --> 00:14:04.040
I know that, hi Nick, oh, he's gonna clobber me again


00:14:04.040 --> 00:14:05.440
for getting his name wrong,


00:14:05.440 --> 00:14:09.240
But I think he was involved in talking with the core developers


00:14:09.240 --> 00:14:12.120
when talking about this data class, but I'm not sure.


00:14:12.120 --> 00:14:14.400
But anyway, there's a few--


00:14:14.400 --> 00:14:17.640
Adders is still great, and these data classes


00:14:17.640 --> 00:14:20.080
don't do everything that Adders does.


00:14:20.080 --> 00:14:23.920
And it has more validators and converters


00:14:23.920 --> 00:14:26.120
and a whole bunch more stuff that you can do.


00:14:26.120 --> 00:14:29.200
So it doesn't completely take the place of Adders.


00:14:29.200 --> 00:14:32.880
But for simple cases, I think it's a simpler interface.


00:14:32.880 --> 00:14:33.560
Yeah, OK.


00:14:33.560 --> 00:14:35.200
That sounds good.


00:14:35.200 --> 00:14:38.760
The best example that I heard of why people wanted it in there


00:14:38.760 --> 00:14:40.520
is because the core developers wanted


00:14:40.520 --> 00:14:42.600
to use it on Python itself.


00:14:42.600 --> 00:14:46.680
And you can't use non-standard library stuff


00:14:46.680 --> 00:14:48.120
within the core of Python.


00:14:48.120 --> 00:14:50.160
Yeah, I think that's a really interesting point.


00:14:50.160 --> 00:14:51.960
And Adders is changing fast.


00:14:51.960 --> 00:14:53.480
It's still getting a lot done to it.


00:14:53.480 --> 00:14:57.400
And you don't want to hamper it and cover it


00:14:57.400 --> 00:15:00.760
in quicksand or some sort of tar.


00:15:00.760 --> 00:15:02.400
You want to slow it down by sticking it


00:15:02.400 --> 00:15:04.240
in the standard library and going, well, you


00:15:04.240 --> 00:15:07.000
change very slowly now and only every year.


00:15:07.000 --> 00:15:08.540
>> Yeah, that's some reason why


00:15:08.540 --> 00:15:10.780
requests isn't in the standard library, right?


00:15:10.780 --> 00:15:12.400
>> Exactly. Yeah, same reason.


00:15:12.400 --> 00:15:14.180
All right. For our final thing,


00:15:14.180 --> 00:15:16.100
I wanted to start with our first thing.


00:15:16.100 --> 00:15:16.640
>> Flask.


00:15:16.640 --> 00:15:19.680
>> Flask. My version of Flask I want to talk about


00:15:19.680 --> 00:15:22.120
is three times faster than your version of Flask.


00:15:22.120 --> 00:15:25.140
How does it do that? There's a thing called Court,


00:15:25.140 --> 00:15:27.280
which I haven't done much with Court,


00:15:27.280 --> 00:15:30.840
but it's like a wrapper around some of the async IO stuff,


00:15:30.840 --> 00:15:34.740
but also an API that can run Flask apps.


00:15:34.740 --> 00:15:36.100
Like I said, I haven't done a ton with it,


00:15:36.100 --> 00:15:39.260
but Court is this thing that you can use


00:15:39.260 --> 00:15:41.820
that has the same API as Flask,


00:15:41.820 --> 00:15:44.420
but is async IO friendly.


00:15:44.420 --> 00:15:45.940
You can plug it into the super,


00:15:45.940 --> 00:15:48.580
super fast things like UV loop or


00:15:48.580 --> 00:15:52.380
async PG for asynchronous Postgres,


00:15:52.380 --> 00:15:54.060
which is pretty awesome.


00:15:54.060 --> 00:15:56.740
There's some really amazing benchmarks there.


00:15:56.740 --> 00:15:59.660
Flask, along with Django and along with


00:15:59.660 --> 00:16:04.260
Pyramid and all the others, they don't support any async and IO stuff.


00:16:04.260 --> 00:16:08.460
And they can't take advantage of basically


00:16:08.460 --> 00:16:11.460
releasing the thread to go do other work


00:16:11.460 --> 00:16:15.960
when it's say waiting on a database or on a call over request or something like that.


00:16:15.960 --> 00:16:20.260
Just because it's they're all using WSGI, that's not how WSGI works.


00:16:20.260 --> 00:16:23.660
So you can plug in a quart,


00:16:23.660 --> 00:16:26.560
which basically has the same API as Flask,


00:16:26.560 --> 00:16:29.260
and you just have to make a few minor changes


00:16:29.260 --> 00:16:31.460
to get your code to go much faster.


00:16:31.460 --> 00:16:33.800
So here's an article with a demo application,


00:16:33.800 --> 00:16:36.140
and they've got benchmarks and stuff saying we're getting


00:16:36.140 --> 00:16:38.020
roughly three times the speed


00:16:38.020 --> 00:16:40.860
by just switching a few things around in the app.


00:16:40.860 --> 00:16:43.440
>> Yeah, I think that's cool. I definitely need to try this.


00:16:43.440 --> 00:16:45.500
>> Yeah. So the things you have to do,


00:16:45.500 --> 00:16:47.460
obviously, if you want to take advantage of


00:16:47.460 --> 00:16:51.180
AsyncIO is you have to make your functions Async.


00:16:51.180 --> 00:16:53.060
Otherwise, they're just regular functions.


00:16:53.060 --> 00:16:54.340
They go just the same speed.


00:16:54.340 --> 00:16:56.820
So you would put Async in front of your view methods,


00:16:56.820 --> 00:17:03.040
And then when you call into things like databases or web services via request say, you have to await


00:17:03.040 --> 00:17:09.840
those to basically tell Python, give up my thread, I'm waiting on this and then pick it up when it gets back, right?


00:17:09.840 --> 00:17:13.340
Put me back somewhere further down in the loop when this returns.


00:17:13.340 --> 00:17:17.720
So that's all cool, but your database access has to have


00:17:17.720 --> 00:17:24.180
some sort of asynchronous component. So when you do a query, you can wait on it, otherwise, it's kind of useless again. So that's why


00:17:24.180 --> 00:17:29.520
It's both the court but also async PG,


00:17:29.520 --> 00:17:31.320
which is pretty cool.


00:17:31.320 --> 00:17:34.960
It's not entirely easy to switch over depending on what you're doing.


00:17:34.960 --> 00:17:36.280
If you're using SQLAlchemy,


00:17:36.280 --> 00:17:39.000
SQLAlchemy I don't believe supports anything with async,


00:17:39.000 --> 00:17:40.300
so you're out of luck.


00:17:40.300 --> 00:17:43.120
It depends on what you depend upon actually.


00:17:43.120 --> 00:17:45.560
It's easy to switch if it's going to work at all. How's that?


00:17:45.560 --> 00:17:49.080
>> Yeah. One of the things I think is neat about this and it's a clever idea,


00:17:49.080 --> 00:17:53.440
is instead of inventing a completely new framework,


00:17:53.440 --> 00:17:56.360
It is a completely new framework, but they wanted to,


00:17:56.360 --> 00:17:57.580
like, I think it's a good idea


00:17:57.580 --> 00:17:59.040
to slow down the learning curve.


00:17:59.040 --> 00:18:01.280
You gotta figure out the async stuff,


00:18:01.280 --> 00:18:03.340
but you don't really have to re-figure out


00:18:03.340 --> 00:18:05.320
how the framework works, because they've said--


00:18:05.320 --> 00:18:06.160
- Yeah, that's cool.


00:18:06.160 --> 00:18:07.600
- The framework's just like Flask.


00:18:07.600 --> 00:18:09.800
- That is so, that is such a good observation,


00:18:09.800 --> 00:18:11.560
and it's really right.


00:18:11.560 --> 00:18:14.720
There's HTTP, I, AIO, HTTP,


00:18:14.720 --> 00:18:16.160
I don't remember the order, sorry,


00:18:16.160 --> 00:18:19.600
but there's that, there's Gepronto, there's Sanic,


00:18:19.600 --> 00:18:21.640
there's all these other frameworks


00:18:21.640 --> 00:18:25.480
trying to take advantage of things like UV loop and async and await,


00:18:25.480 --> 00:18:28.120
but they're like, "And you start from scratch,


00:18:28.120 --> 00:18:30.220
and you learn a totally new framework."


00:18:30.220 --> 00:18:33.280
With this, you could probably go take Miguel's tutorial thing


00:18:33.280 --> 00:18:35.400
and then go make it faster. It's cool.


00:18:35.400 --> 00:18:36.800
>> That's what I plan on doing.


00:18:36.800 --> 00:18:37.640
>> Yeah.


00:18:37.640 --> 00:18:38.880
>> Be cool.


00:18:38.880 --> 00:18:41.640
>> All right. Well, that's our news for this week, Brian.


00:18:41.640 --> 00:18:44.360
Anything you got going on over there?


00:18:44.360 --> 00:18:46.680
>> No, I'm just trying to learn Flask, man.


00:18:46.680 --> 00:18:48.480
>> Awesome. That sounds really fun.


00:18:48.480 --> 00:18:52.160
So are you familiar with the Python staff of enlightenment?


00:18:52.160 --> 00:18:54.480
Yes, I carried it around for a while at Python.


00:18:54.480 --> 00:18:59.360
Yes, so did I. So a lot of people probably don't know about this. There's a picture of me


00:18:59.360 --> 00:19:05.760
with Anthony Shaw, who I mentioned in the mocking bit, and me walking around with this giant,


00:19:05.760 --> 00:19:10.800
I don't know, it's probably four feet tall, this big heavy staff at the end. It has like a massive


00:19:10.800 --> 00:19:16.880
Python logo. And so one of the guys that was involved in creating that thing originally


00:19:16.880 --> 00:19:19.800
actually decided, so many people asked for it,


00:19:19.800 --> 00:19:21.920
he's creating a store where you can


00:19:21.920 --> 00:19:24.560
buy your very own Pythonic Staff of Enlightenment.


00:19:24.560 --> 00:19:28.200
He's like, "Hey, would you mind letting people know about the staff?"


00:19:28.200 --> 00:19:30.480
I'm like, "Yeah, this is pretty cool. I'll let people know."


00:19:30.480 --> 00:19:33.040
>> Yeah, I haven't checked it out yet. Any idea how much it is?


00:19:33.040 --> 00:19:34.720
>> I think it's like a 100 bucks US.


00:19:34.720 --> 00:19:37.080
>> Okay. I may need one anyway.


00:19:37.080 --> 00:19:39.140
>> I know. Well, Christmas is coming.


00:19:39.140 --> 00:19:42.040
Everyone needs a cool Python staff for Christmas.


00:19:42.040 --> 00:19:43.120
>> Yeah.


00:19:43.120 --> 00:19:44.300
>> Anyway, I thought that was fun,


00:19:44.300 --> 00:19:46.320
so I thought I'd throw that in there at the end for you guys.


00:19:46.320 --> 00:19:50.600
That's nice. Cool. Yeah, indeed. All right. Well, Brian, great to chat with you as always.


00:19:50.600 --> 00:19:53.760
And thanks everyone for listening. Thank you.


00:19:53.760 --> 00:19:58.120
Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's


00:19:58.120 --> 00:20:04.680
Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.FM. If you


00:20:04.680 --> 00:20:08.720
have a news item you want featured, just visit PythonBytes.FM and send it our way. We're


00:20:08.720 --> 00:20:13.720
always on the lookout for sharing something cool. On behalf of myself and Brian Aukin,


00:20:13.720 --> 00:20:17.640
This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends

