00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 168 recorded February 5th 2020. I'm Brian Okken. I'm Michael Kennedy. And I'm Kojo Idrisa. Yay we have Kojo here as a special guest. Hey Kojo welcome to the show happy you're here.

00:00:17 Hello thank you thank you. This episode is brought to you by DigitalOcean. Thank you DigitalOcean.

00:00:22 Michael I'm actually confused about this. It's a little bit of a funny name right so let me tell tell you about Donkey Car.

00:00:29 Have either of you participated in, or at least watched a proper RC remote control car race?

00:00:36 - Not really, just the sort of the random ones, like random people have random remote control cars and running them around the neighborhood, but not an actual official proper one, no I have not.

00:00:44 - Brian?

00:00:45 - Yeah, I just watched a little video that you sent me and it was quite exciting.

00:00:50 - These are really weird things.

00:00:52 If you've never seen one of these, I put a link to like a three minute video from GoPro, where they put a GoPro on one of these little RC race cars.

00:00:58 I used to have one of these when I was a kid, like high school, maybe late middle school, and they were insane.

00:01:04 They're these little cars and you remote control and they go like 35 miles an hour.

00:01:07 They're super quick and responsive, really interesting.

00:01:10 But what would be even cooler is if I could use Python to like win an RC car race, don't you think?

00:01:16 - Ah, yeah, that would be cool.

00:01:18 You're right.

00:01:19 - Yeah, I mean, you've already got the GoPro on there.

00:01:21 It's already got a camera that's high quality.

00:01:24 So the thing that I want to talk about is this thing called Donkey Car.

00:01:29 And it's a minimalist, modular, self-driving library, self-driving car library for Python.

00:01:35 So people are always looking for ways to get kids into programming or themselves to get into programming if they don't have some formal project.

00:01:44 Like I want to build this website or I've got this data science thing I want to do.

00:01:47 Something like a self-driving car I think could be really interesting.

00:01:50 They have some much tamer vehicles that they have pictures of on the Donkey Car repo where it's more like little Lego cars and stuff.

00:01:59 But you basically have these little tiny cars and you can put cameras on them and you put a Raspberry Pi and then you teach it how to drive.

00:02:06 I think that's pretty awesome.

00:02:08 Yeah, that looks fun.

00:02:10 Doesn't it?

00:02:11 Yeah.

00:02:12 So it says you can use Donkey Car if you want to make an RC car drive itself and win an RC car race.

00:02:16 That would be awesome.

00:02:17 If you want to compete in self-driving races like DIY robo cars, or you know, the great robot race from DARPA way back in the day.

00:02:26 I guess that's probably a little bit quiet enough, but still quite cool.

00:02:30 If you want to experiment with like autopilot or mapping computer vision and neural networks, if you want to log sensor data while you're driving around.

00:02:38 If you want to drive a car via an Xbox game controller, that's pretty cool.

00:02:44 'Cause you can then communicate with the controller over to the Raspberry Pi and then just tell it to drive however it tells it.

00:02:52 Yeah, a lot of cool stuff.

00:02:54 And yeah, I think if you have anything to do with like you're playing with AI and computer vision, this seems like a really fun way to make it interactive or kind of exciting without a lot of code.

00:03:06 It's pretty simple actually.

00:03:07 - Do you know if any of these robo cars are going, are the self-driving or going like 35 miles an hour?

00:03:14 - I don't see, well, when I watched the video that I included, like on one hand, like I don't see why it would be hard 'cause they have these little rails and it's kind of clear where the edge of the track is.

00:03:22 You could even put up markers, like little things that you could like shine, you know, have detected with the computer vision.

00:03:30 But they're so bouncy, they're incredibly jiggly and it's really hard.

00:03:35 Like I think it would be a little bit hard, so maybe slow, but I don't know.

00:03:38 My joke about winning the race, it seems a little far-fetched.

00:03:40 You'd have to have a really stable camera, which I guess you could get.

00:03:43 But anyway, I think this is a fun one.

00:03:45 So if people are out there looking to play with a little AI computer vision, this seems cool.

00:03:50 Check it out.

00:03:51 - It's very interesting.

00:03:52 - Yeah, for sure.

00:03:53 Brian, there's a bit of a sad one coming up, right?

00:03:55 What's going on here?

00:03:56 - Yeah, rest in peace.

00:03:57 I ran across an interesting article by Nick Timkovic, I think, called "RIP Pipenv, Tried Too Hard, "Do What You Need With pip Tools." So I didn't realize that PIPENV was kind of stagnating.

00:04:13 There's not been a release in 2019.

00:04:16 I didn't check to see if maybe they slipped one in in 2020 yet, but apparently there's some problems with the sub-dependencies and complicated release process or something, but--

00:04:28 - Well, I wanna add one really bit of, a small bit of detail here, because I think it's interesting.

00:04:34 There's not been a release of PIPENV in 2019, And that makes it sound like all people have walked away, haven't done anything.

00:04:40 There are 650 commits to that project and there's still not a release in the year, which is kind of rough, right?

00:04:46 Like the people who worked on it, if that stuff's not getting released, that can't be great.

00:04:50 Yeah, so I'm not sure what's going on.

00:04:52 But the main emphasis of the article really isn't that.

00:04:55 I mean, whether or not Pipenv survives or it's really dead, I don't think it's dead.

00:05:00 I don't know what the state of it is.

00:05:02 But one of the benefits that we saw with pipenv was this idea of pinning everything and using like having a pip file and a pip lock file or a lock file that says these are the packages that I really depend on.

00:05:17 And then all of those plus all of the sub packages, I put those in another file, a lock file with their hashes so that I can know that I can reproduce that environment.

00:05:29 And that's a really cool idea.

00:05:30 I like the concept.

00:05:32 of the bulk of the article is just basically saying you can do that yourself without pipenv. You can use pipcompile that comes from piptools and there's a generate hashes function but basically you do that yourself. You just have a smaller requirements file that just has what you really need, your direct dependencies, and then you can generate a hash file that is directly readable by pip. You can pip install from this this other generated hash requirements file. The other part of PIPenv that people are using is virtual environment support, but I guess I'm on board with Nick to say I don't understand why these were bundled into one tool and I'm using virtual VENV that built in just fine. I don't really need PIPenv for that. So I think I'm gonna try to incorporate this possibly in my workflow, at least on one project to see how it goes. Yeah that's pretty cool. I didn't realize you could output the requirements.txt with the hashes using pip compile either.

00:06:31 That definitely was one of the selling points of pipenv was like everything is locked, not just by pinning the version, but by the hash as well to make sure that it couldn't get messed up.

00:06:40 Pipenv uses pip compile anyway, so...

00:06:43 I see. And it uses pip file and pip file.lock.

00:06:47 You know more about this than I do, Brian.

00:06:49 Isn't pyproject.toml the new hotness instead of pip file?

00:06:53 The pyproject.toml doesn't have, I don't think that it supports doing hashes and stuff like that.

00:06:58 So they still kind of support different ideas. I think the pyproject.toml is, I'm not sure where they cross over, but there still is this difference between a library that you can use for lots of stuff with lots of different versions of things in an application. With an application, you definitely want to lock things down to know what you're doing.

00:07:22 - For sure.

00:07:23 Kujo, did you use pipenv any?

00:07:27 What's your virtual environment preference?

00:07:28 - So I used it a small amount.

00:07:30 I never used it a huge amount.

00:07:32 I think my virtual environment preference has been, well, I had been virtual env wrapper, but I've recently started using pyenv.

00:07:40 Well, actually, I started using pyenv, but that's more for managing different versions of Python.

00:07:46 - Right, right.

00:07:47 I want this virtual environment to be Python 3.7 and that one to 3.8 and Gasp, that one too.

00:07:52 Yeah. And so, so I've been using PyEnv to manage different versions of Python, but then there's a PyEnv-VirtualEnv module.

00:07:59 And so that lets, that makes it a little easier to create virtual environments, you know, as you switch between Python versions. But for me, so, pipenv, again, I'd never really gotten into using it, but having looked at it a little bit and I saw some of the early talks about it, you know, it introduced me to that idea of a lock file.

00:08:15 And then my personal blog is Jekyll, which is in Ruby and Ruby uses that, a similar thing, that sort of gem lock file.

00:08:21 And so just the familiarity with it there from pip and was helpful to me as far as having to try to sort out stuff with Jekyll because I don't.

00:08:29 Jekyll is the only thing, the only Ruby project I use.

00:08:31 It's the only time I ever really use Ruby.

00:08:33 So it was helpful at least to be familiar with that concept there.

00:08:37 Yeah, yeah, cool.

00:08:38 And Brian, I'm very excited about Python 3.9 having the --prompt dot.

00:08:44 So you get the folder name without the extra bits that you have to put in there to make that happen in the shell.

00:08:50 Yeah, that's gonna be cool.

00:08:51 I love using prompt. Yeah, for sure. Gojo, what you got next?

00:08:54 You're talking about string, string method called case fold. And this is something that's interesting. It actually just came up this morning, I was working on something this morning.

00:09:03 And you can use case fold in places where you're trying to do comparisons without having to look at the case of a string. And so they call it caseless matching. And so the standard thing in Python, or the more common thing that you would do in Python is maybe you use is like the string method, like string.lower.

00:09:21 And so you're not worried about whether someone types something in with uppercase or lowercase.

00:09:25 And that works in a lot of situations.

00:09:26 - Wait a minute, wait a minute.

00:09:27 You're telling me that I've been doing it wrong for all these years?

00:09:30 Completely wrong? - Shame on you.

00:09:32 - Yes, I didn't.

00:09:34 I knew the function case fold was here, but until you brought it up, I'm like, oh, whatever, like lowers.

00:09:39 I've been doing it wrong.

00:09:41 Carry on, this is awesome.

00:09:41 I'm ready to hear about it.

00:09:42 - Well, and so the interesting thing about this is that lower works in a lot of, It covers a lot of use cases, especially if you're using English or a similar language.

00:09:53 It's interesting in the docs that case folding is similar to lower casing, but more aggressive, which is just a little funny to hear when my coworker's got a kick out of that.

00:10:01 And I think where case fold becomes especially useful is if you're using a lot of Unicode characters.

00:10:07 And I think, Michael, you had an example here, but so it stood out to me partially because I was working on a thing where I wanted to make sure cases, things were being compared and I didn't have to worry about the case what was entered versus what was expected.

00:10:18 >> Right. Until today, I would have written dot lower dot strip and been happy with that.

00:10:23 >> Exactly. I started looking for some other ways.

00:10:26 I, in addition to other things, I lived in China for two and a half years, so I can read and write Mandarin, a functional ability to read and write Japanese.

00:10:34 I taught myself to read and write Hangul.

00:10:36 I tend to use Unicode characters maybe a little more frequently than the average American.

00:10:43 For me, if I'm trying to build something and I'm concerned about handling text or case matching, I'm always interested in things that will support Unicode because the Unicode characters because, you know, of course, like emoji, probably the most popular Unicode characters among English speakers, but you also have a number of other languages where the entire language is represented in Unicode characters. So something like this, that will work in these in these situations, where you get Unicode characters is important. So like I said, I just discovered that this morning and ended up using it in a test I was writing and I'm I'm like, okay, I can see how I can use this going forward.

00:11:17 And I think, Michael, I think you've got like a slightly more fleshed out example.

00:11:20 - Yeah, yeah, so let me just give people an example because aggressively lowercasing, that doesn't mean anything to me.

00:11:26 When I read this, I'm like, I still have no, I read what the docs said about it.

00:11:30 I'm like, I still have no idea what this means.

00:11:32 Like if I had like Michael dash Kennedy with the dash be down, like underscore now, like, I mean, I just, I don't even know, right?

00:11:39 And so I found this example and it has two strings, Der Fluss, the river in German.

00:11:45 And there's sort of the formal German way to spell it, where you have what's called an S-set.

00:11:50 It's like, looks like a beta symbol, which is like two sharp, two S's together, like a super S.

00:11:56 And then you could just, if you are on like an American or English keyboard, you're like, "I can't find that character." I'm just gonna type two S's as common in German.

00:12:03 And if you case fold those, it will actually convert Der Fluss with the S-set, the like the beta thing, down to lowercase F-L-U-S-S and compare it, which I had no idea.

00:12:13 That's pretty cool.

00:12:14 So it'll take these letters that are, I guess, considered uppercase, but not quite the same, and it'll sort of normalize the string more than just lower, is the way I see it.

00:12:23 It's like the canonical lowercase version of it.

00:12:26 - Yeah, and I've seen the example like that, and I have no knowledge of German at all, but it was useful to see that example.

00:12:35 It's like, okay, here's another concrete reason why you might wanna use this.

00:12:40 But I think also with a lot of applications, be they web applications or standalone apps, when people are dealing with internationalization and localization, that kind of thing, having some sort of a method for caseless matching that you know will work across Unicode characters, then you know, it's not going to break once you get outside of, you know, the 26 letters of the, you know, the English alphabet is helpful. So.

00:13:02 Yeah. Brian, did you know about this?

00:13:04 I'm like blown away. I've always been doing lowercase. And so I'm going to change right away.

00:13:09 You've been doing it wrong.

00:13:10 I think it's pretty new from like, I think it's got added in Python 3.3.

00:13:14 So it's not, you know, it's not like, you know, it's not like a thing that you haven't been using for a very long time because it hasn't been around that long.

00:13:20 But is I think what another thing that drew me to it was that the idea that in Python 3 going forward, everything is, you know, everything is Unicode, the default sort of text handling, what is Unicode.

00:13:31 And so it's not brand new, but it's also not like super old.

00:13:34 So if you haven't been using it, you haven't been, you know, missing out in.

00:13:37 And again, string.lower still works unless you run into a situation where you were actively having to deal with Unicode characters, which a lot of us, honestly, a lot of folks here in the US don't.

00:13:48 - Yeah, yeah, pretty interesting.

00:13:49 Thank you, that's awesome.

00:13:50 - This episode of Byte on Bytes is sponsored by DigitalOcean.

00:13:54 They have awesome infrastructure and awesome product, and we use them in our services.

00:13:58 Do you have a memory-intensive workload?

00:14:01 Maybe something like a high-performance SQL or NoSQL database or an in-memory cache, like maybe Redis or some indexes or some kind of large data analysis runtime.

00:14:11 Well, check out digital oceans, new memory optimized droplets.

00:14:15 They're optimized, especially for these high memory workloads.

00:14:19 So check them out at python bites.fm/digitalocean and you can get a hundred dollar credit.

00:14:25 Awesome.

00:14:25 Yeah.

00:14:25 Thanks to digital ocean for sponsoring the show, Brian.

00:14:28 I feel like we're kind of in the same groove this week.

00:14:31 You pick this rest in peace PIP-ENF, which to be clear, the PIP-ENF people didn't say rest in peace our project.

00:14:37 Someone from the outside looked at it and made this declaration, but it's still an interesting article, right?

00:14:42 Yes.

00:14:42 Something that I have often wondered about is like, you see a lot of times people talking about virtual ENF.

00:14:48 And this was like the way to create virtual environments prior to VE and V being built in Python, right?

00:14:55 Yeah.

00:14:55 Yeah.

00:14:55 There's a new release of it.

00:14:57 And my first thought was why?

00:14:59 Why is there a new release of it?

00:15:01 Because Python 3-M VMV, whatever I'm going to type after that, seems like it's solving my problem for me.

00:15:07 And so why would you continue to work on this?

00:15:09 You know, like it's, we're technically in the post Python 2 era, officially, right? I mean, not in practice.

00:15:15 There's a lot of Python 2 still out there, but it is now no longer supported being past January 1st, 2020.

00:15:21 So why work on this thing, right?

00:15:23 Well, Brian Skin said in this, and I'm like, alright, I'll take a look.

00:15:27 Brian usually recommends good stuff.

00:15:29 And it's this announcement by Bernat Gabor, who is working on the project and say, "Hey, we just did a major release of virtual imp." I'm like, "Okay, I gotta figure out "why this is still a thing." And he said, "Look, there's a couple of pain points "that exist with current, you know, the dash MV and V style, "that creating a virtual environment is slow.

00:15:48 "It takes around three seconds, even in offline mode, "unless you're on Windows, then it takes longer." I don't know how much longer, but it seems to be that it copies more into the virtual environment rather than sim-linking it on Windows, so it seems like it's a little slower.

00:16:02 The other thing is that the API used around PEP 405 is great if you just want to create virtual environments, but it doesn't allow you to target very much around that or describe the target environment without actually creating the environment.

00:16:17 And then the duality of virtualenv versus venv.

00:16:22 So Python 3.4 has venv added as I said, so in theory you could just switch away, But there's some other benefits that he talks about as well.

00:16:30 So over specifically over VMV, which is the ability to discover and use alternate pythons.

00:16:36 Right, I can say -p2 to create a virtual python2 virtual environment or kind of like you were saying, Kojo, I could say -p3.8 or 3.7 or even -ppy3 and get one of those environments created.

00:16:50 So I can select from the different installed pythons as I create these, which is pretty cool.

00:16:55 It also packages out of the box out of the box it packages the wheel package as part of the seed pack or caches part of the seed, the wheels as part of the seed packages, which after it's been created and cached, and speeds up the install time, especially for things like micro whiskey, or whatever, like that thing takes 15 seconds to pip install, at least. So making that faster seems awesome. And it's also guaranteed to work in places where V and V is not included with Python by default. For example, if you get the Debian or certain versions of Ubuntu, and you say Python 3-mvenv, it'll say venv is not installed on this computer and you've got to apt install it, right, which is kind of funky. And then around that as well, you can also, because it's pip installed, not apt installed, it will, you know, you can upgrade it right away with pip whenever there's new changes and version it separately than what the OS is versioning VNV. So I don't know, what do you guys think? Does that, that sounds like a pretty good reason for it to be around actually. All those reasons. Yeah. The downside of it's confusing to have two. It is confusing to have two. Well, and I was confused about as well, and I'm not saying I'm switching to it necessarily, but I can see why that it's pretty interesting. I guess I'm sort of between the two of you from the standpoint of, I like that there is a lot of activity in this space as far as Both, like we just talked about Pipend with virtual environments and with installing and package management, that sort of thing.

00:18:25 It's sort of a tricky issue.

00:18:27 And so the fact that people are trying to improve, people are looking at pain points and trying to build tools to improve on those is fantastic.

00:18:34 I think sort of the confusing part is, and again, as someone who just started a new job and I've just been going through the process of setting up a new machine.

00:18:41 You've been installing all the things, right?

00:18:43 Well, either installing all the things or unfortunately, you run into a namespace collusion thing where almost everything is called like pyenv something or pipvenv.

00:18:56 A lot of the names are very similar.

00:18:59 It's one of those things where it's the good side and the bad side of the coin.

00:19:04 Again, it's great that these things are being worked on because especially with Python, you want to have some separation, some sort of a dependency management.

00:19:13 And so wanting to make sure that you're developing the right version of Python and that you're not overriding things or creating conflicts.

00:19:19 But I guess it's a situation where one or two dominant solutions show up, we'll sort of standardize on those.

00:19:25 But now there's a little bit of confusion as we get to that point.

00:19:29 - Yeah, yeah, it's good to see a thousand flowers blooming, but it is tricky to know which one's gonna be around, right?

00:19:36 - Which flower do you pick?

00:19:37 You know, there are literally a thousand of them blooming.

00:19:40 - Exactly, exactly.

00:19:41 Brian, what you got next for us?

00:19:42 - Well, a little bit of testing.

00:19:44 I don't know if we've talked much about hypothesis, but people probably know about hypothesis, property-based testing.

00:19:50 - Hypothesis is kind of mind-blowing a little bit, to be honest.

00:19:53 - It isn't a silver bullet, but it's kind of a cool thing.

00:19:55 So I am highlighting a project which is relatively new by Zach Hatfield Dodds and Paul Gansel, or two people working on it so far.

00:20:05 This is the idea of adding property-based tests for the Python standard library and for the built-ins.

00:20:11 And their comments are that the CPython's existing test suite is actually very good, but bugs do still slip through occasionally, and maybe throwing some property-based testing tools at some parts of it could help.

00:20:25 It's not a magic bullet, but computer-assisted testing techniques routinely try inputs that humans wouldn't, and hypothesis is what we got for Python, so why not?

00:20:35 There's not very much covered yet in this project.

00:20:38 So I'm highlighting it to try to get other people that are interested on board, but they want to try to have a compelling proof of concept by PyCon US this year to be running as a, and to see if it'd be worthwhile to have it running as part of the Python continuous integration suite to see how that goes.

00:20:56 I think it's really my view on the hypothesis really is that it's especially geared towards helpful for algorithmic pure functions.

00:21:05 And in a lot of cases where you have like two functions that work kind of in opposite directions, so you can do round trip, it's easier to set up a test for hypothesis to see, like for instance, encode or decode, you can take some sort of string or something and encode it and then use the decode to make sure that you've got the final output is the same as your input.

00:21:26 These are easier tests.

00:21:27 Functions that have, that are not pure, that have state, that depend on state, those are harder things to test with hypothesis.

00:21:35 So I think there's actually quite in that kind of applies to a whole bunch of the standard library.

00:21:40 So I think there's a whole bunch of stuff that could be tested more thoroughly with hypothesis.

00:21:45 So this is pretty cool.

00:21:46 - Yeah, it's a really interesting way of testing and I'm glad to see the project.

00:21:49 It looks cool.

00:21:50 - One of the things I like about it is these are some people that I respect and having some people do these focused examples of how to use hypothesis in this way, I think will actually help as a teaching tool to help other people learn how to use it.

00:22:04 - Yeah, I would love to see a big set of the standard unit tests for CPython moved over and maybe condensed and brought down into this hypothesis style to see what the two sets of test suites look like.

00:22:19 That would be interesting.

00:22:20 Feels like a lot of work, that would be interesting.

00:22:22 - Oh, but even a specific case of taking one, what are the functional tests that exist in CPython already.

00:22:30 What do those look like compared to the property-based test?

00:22:34 They're testing different things.

00:22:35 So I think it'd be cool to see them side by side too.

00:22:37 That's neat.

00:22:38 - Yes, and so property-based testing is a thing that, I saw you in my prior job, I did most of the QA.

00:22:43 And so I started to look into property-based testing.

00:22:45 It's one of those things that it sounds very interesting and that something that I'd like to know more about and just have another time to dig into, but this project looks interesting.

00:22:54 And it also kind of flows right into my topic.

00:22:57 So the people that you were just talking about, Zach Haskell-Dowds and Paul, they are doing a tutorial on property-based testing.

00:23:05 And so what I wanted to talk about was just, what time is it now?

00:23:08 Three in my time.

00:23:09 So about two hours ago, I got an email from PyCon saying that the PyCon tutorials, the schedule for the PyCon US tutorials, PyCon US 2020, the schedule for those tutorials is up and available and you can register for them now.

00:23:21 And so if you are thinking about going to PyCon, depending on what you do, different people, you know, some people work in places where their companies would just send them PyCon and it's not a big deal.

00:23:32 Other people have to make a business case to try to sort of convince their organizations to let them go.

00:23:37 If you are in a situation where you need to make a business case, the tutorials are often an excellent tool for that because you can get a lot of high quality training from people who are very knowledgeable in their field.

00:23:49 So one of the tutorials is actually an introduction to property-based testing by the same people that Brian was just talking about.

00:23:57 So there's a link here to PyCon.org.

00:24:00 So there's a full schedule of the different tutorials that are available, and you can register for them now if you'd like.

00:24:06 They do tend to sell out pretty quickly though.

00:24:08 The PyCon tutorials tend to be pretty popular.

00:24:10 They tend to sell out pretty quickly.

00:24:12 The good news is that the videos of the tutorials are all available.

00:24:16 So even if you weren't able to make it to a prior PyCon, the videos for those tutorials are available.

00:24:22 And so you can look at past tutorials.

00:24:24 the big advantage of actually going to PyCon and going to a tutorial is again, just the fact that you have a chance to interact with the people who are giving the tutorial and to be able to ask specific questions that meet your specific use case.

00:24:36 - Yeah, and make connections, right?

00:24:37 - Yeah, exactly.

00:24:38 I mean, it makes connections with people.

00:24:40 Again, like if you are trying to say, for instance, you know, just to say with the properties-based testing, if you're trying to implement that where you are, not only now is there this effort to bring some property-based testing into CPython, but you take your tutorial, you can actually interact with the people who are sort of leading this effort.

00:24:58 And then if you have specific questions, you've made a connection where you can reach out to those folks and try to get some help as far as implementing, trying to figure out what to do to implement that kind of thing where you are to get a better understanding of the use cases, that sort of thing.

00:25:11 So I went through, like I said, I think the schedule just went up an hour or so ago.

00:25:16 So I went through and sort of looked at ones that were interesting to me.

00:25:19 A couple of standouts to me were one, There's a tutorial on migration from Python 2 to Python 3.

00:25:24 And as Michael was just talking about, Python 2 is now end of life.

00:25:28 And so if you have not moved to Python 3, now is the time.

00:25:33 - Gotta get busy.

00:25:33 - Earlier was really a better time, but there's no time better than now if you haven't done it before.

00:25:39 So a tutorial on that, that'll be really helpful.

00:25:41 Another one called Welcome to CircuitPython by Katni Remboer.

00:25:45 We were talking before with Michael's point about the remote control cars.

00:25:49 If you're looking at ways to get started with programming to get other people into programming.

00:25:52 Actually programming hardware is a good way to do that.

00:25:55 You know, few things get people's attention, like writing some code and making it, making the light turn on and making the light change color and making it flash in a certain pattern.

00:26:02 And so the circuit Python, I remember, I think at PyCon last year, everybody got a circuit Python playground board, like a small little mini circular board that had lights and various sensors on it.

00:26:13 And so I've been to one of Katniss tutorials, like a PI Ohio in 2018, maybe.

00:26:19 And so it's the circuit Python boards are really interesting.

00:26:23 You've got lights and sensors and you can, you know, you can build all sorts of things with them.

00:26:27 And it's a great gateway into programming.

00:26:28 Great, great way to get started.

00:26:30 Or if you're an experienced developer, a great way to start getting started with hardware programming.

00:26:33 But then the intro to property-based testing.

00:26:36 And then there's another tutorial called minimum viable documentation by a woman named Heidi Waterhouse.

00:26:40 And I've met Heidi.

00:26:41 We spoke at PyCaribbean together, I think a couple of years ago.

00:26:44 But it's this idea about how do you set up a proper technical, you know, a proper documentation structure for your projects and focusing on the technical writing aspect.

00:26:53 I think it's one of those things, especially as a project gets a larger, but even in a smaller project that gets overlooked sometimes there's so much focus on let's write code that does this thing.

00:27:02 And that's fantastic.

00:27:03 But what if you want to add a second person, add a third person to that project and your options then become either the first person sits down and just spends four hours talking to the new person, you know, or if you have good documentation, a good documentation structure, you can just point them to the documentation and let them get up to speed on their own.

00:27:23 I mean, there are multiple other tutorials, but those are the ones that just sort of stood out to me.

00:27:27 But if you haven't been to a PyCon US, the tutorials are, I think, one of the strong reasons to want to go.

00:27:34 Among other things, you know, meeting people and making connections and that sort of stuff, and the open spaces and the hallway track.

00:27:40 But the tutorials, especially also if you're in a situation where you need to make a business case to your company to get support to go.

00:27:47 The tutorials are a really good option for that.

00:27:49 - I love that angle.

00:27:50 And I also approached it the same way that you did.

00:27:52 It's like, oh, these are out.

00:27:53 Let me see which are interesting to me.

00:27:55 So I came up with three as well.

00:27:57 Maps and machine learning, spatial analysis with TensorFlow, Scikit-learn, and PyTorch.

00:28:02 And I think it's really cool, kind of like you were talking about the hardware.

00:28:05 It's like you take geospatial data and real-world things and do awesome stuff with it with Python.

00:28:11 So here's kind of the map version of that.

00:28:12 I think that one's a fun one.

00:28:14 And then hands-on web app test automation by Andrew Knight.

00:28:19 Brian, that'd be a good one for you as well, right?

00:28:24 Like that sounds pretty interesting.

00:28:25 - Yeah, it does look good.

00:28:26 - Yeah, and then finally, bigger, better, faster, more building applications in Python.

00:28:30 That also looks pretty cool to me.

00:28:32 So there's a bunch of other great, and this is not like the best of list or whatever.

00:28:36 This is just like stuff that stood out to me, like oh, I'd go to these.

00:28:39 Sounds pretty cool.

00:28:40 - And these tutorials are priced way lower than any sort of corporate training is gonna be priced.

00:28:45 - Yeah, yeah.

00:28:46 Very cool.

00:28:47 You guys are both gonna be at PyCon, right?

00:28:48 Brian, you're speaking, is that true?

00:28:50 - I am speaking, yes.

00:28:52 - On what topic do you speak?

00:28:53 - I am talking about parameterized testing.

00:28:55 - Awesome, and Kojo, I'm guessing that you're gonna be there at a lot of the conferences.

00:28:58 - Yeah, and actually, so this year, I just started a new job, I'm working with a company called RevSys now.

00:29:04 They're sponsoring, and so I will be there.

00:29:06 But yeah, Ian, I would have been there either way, probably so.

00:29:09 - Yeah, awesome, I'm glad you're gonna be there as well.

00:29:11 - All right, Brian, I guess that's it for our main items, huh?

00:29:14 - Yeah, it is.

00:29:14 - You got anything to share with folks?

00:29:15 - I was gonna share with folks that I'm speaking of PyCon, but we already covered that, so.

00:29:20 - We snuck it in the previous one.

00:29:22 How about you, Kojo?

00:29:23 Anything extra you wanna throw out there for the world?

00:29:25 - No, I don't think I have any new, exciting Python-related stuff.

00:29:28 - Cool, well, I've got a couple to share.

00:29:30 One, Eric Cho just released the third edition of his Mastering Python Networking, which is a cool little use Python to control all the network things and set up network topologies and whatnot book.

00:29:41 is quite interesting. And I got a chance to write the foreword for that. So thank you, Eric, and I'll link to the book. Also, speaking of network things, both pyramid through the waitress web server thing, and Django have issued like vulnerability CVEs. So yeah, if you have either those in production, and they're on the internet, or even not, you might want to do a little upgrade, a pip install upgrade all the things on it. Because yeah, there's There's like a SQL injection vulnerability, like a little Bobby Tables vulnerability in Django, and some other similar type of thing for Waitress, and those are not good to have.

00:30:19 Why is Pyramid and Waitress together? Is Waitress bundled with Pyramid?

00:30:23 It comes with Pyramid, and I think the guys who work on Pyramid may also work on Waitress.

00:30:28 I'm not sure. I could be wrong about that.

00:30:30 I'm sorry if people who work on Waitress, if I got that wrong.

00:30:32 But certainly when you install Pyramid, you get Waitress, and you want that to be up to date.

00:30:37 address, server, things like that.

00:30:39 Okay, and then the last thing, kind of like your item here, Kojo, even shorter time, like 45 minutes ago, the Stack Overflow 2020 survey is open.

00:30:50 So everyone should go fill that out.

00:30:52 There's a ton of information about where the broader ecosystem is at here.

00:30:57 So it takes about 10 minutes.

00:30:59 It's a little bit long, but it's totally worth it, I think.

00:31:01 - Yeah, and if there's anywhere in there where you can plug our podcasts, go for it.

00:31:05 - I don't know if there is. - There totally should be.

00:31:07 - Like where do you get your news or something like that.

00:31:09 - Yes, exactly, other.

00:31:11 All right, Brian, I picked a joke for us that's graphical, so we have to do a little work describing it, but I think it's gonna come out pretty well because I think it's right up your alley actually here.

00:31:22 So this is a comic which is Richard's Guide to Software Development.

00:31:27 And I'll kick it off, there's like a cat with little like super bionic legs, And underneath the caption is, "How the software is designed." You want to take it from here?

00:31:38 Okay, well then the next one is, "How much time has to be spent on each part?" And there's like 4% for the head, and then 2% for the middle of it, 80% for the tail. Oh yeah, that's totally true.

00:31:52 Nice. The next one is, "How the software looks before the beta test." It's a cat, but it has no back legs at all, but it's still suspended somehow.

00:32:01 - Yeah, and then how the software looks after the beta test, there's no front legs, but there are back legs.

00:32:06 - I'm just trying to imagine what happens here.

00:32:08 Like, no, no, we wanted legs on the back of the cat.

00:32:11 Like, oh, you want the legs on the back?

00:32:12 Sure, we'll put them on the back.

00:32:13 - Okay, we'll just move them, yeah.

00:32:14 - And then how the software's advertised is like a tiger springing out of a picture with action.

00:32:21 - Yeah, what the customer really wanted was just a question mark, 'cause nobody asked.

00:32:26 - Exactly, and then how the software looks two versions later, it has a nose like an anteater or an elephant.

00:32:33 It's just a random human arm coming out the back of it.

00:32:36 - That's, oh man.

00:32:38 And the last scene has like a dude petting this cat that has the arm sticking out with the elephant and Noah's saying, "I still like you anyway." - The cat says toots.

00:32:48 Yeah.

00:32:49 Anyway, there's a nice little testing one.

00:32:51 Actually for you as well, Kojo, right?

00:32:52 You were in QA.

00:32:53 - Yeah, it used to be.

00:32:54 Yeah, the developers love their software, so.

00:32:57 - That's great.

00:32:59 All right, well, this is a lot of fun.

00:33:01 So Joe, thanks for being here.

00:33:02 And Brian, thanks as always.

00:33:04 Glad to have you back this week.

00:33:05 - Yeah, yeah, thanks.

00:33:06 - And thanks for having me, you guys.

00:33:07 - Yep.

00:33:08 Bye, everyone. - Bye.

00:33:09 - Thank you for listening to Python Bytes.

00:33:11 Follow the show on Twitter @pythonbytes.

00:33:13 That's Python Bytes as in B-Y-T-E-S.

00:33:16 And get the full show notes at pythonbytes.fm.

00:33:19 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:33:24 We're always on the lookout for sharing something cool.

00:33:26 This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

