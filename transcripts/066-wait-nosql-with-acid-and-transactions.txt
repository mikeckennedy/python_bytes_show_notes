00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 66, recorded February 22, 2018.

00:00:09 I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 And we have a ton of stuff.

00:00:12 As usual, we've scoured the web.

00:00:14 And actually, I don't know about you, Brian, but I had a really hard time actually picking the topics.

00:00:18 Every one I found was better than the last one.

00:00:20 It's exciting to see a lot of content out there.

00:00:22 Yeah, for sure.

00:00:23 So I want to say real quick, thanks to Rollbar.

00:00:25 Check out what they're doing at pythonbytes.fm/rollbar.

00:00:28 Add error reporting and real-time monitoring to your web apps and other things.

00:00:33 We'll talk more about them later.

00:00:34 Right now, let's focus on modern Python a little bit.

00:00:38 I wanted to bring up, there's a lot of tutorials on how to do object-oriented programming and also object-oriented programming in Python.

00:00:45 But real Python put out an object-oriented programming in Python 3, which I think is just a nice update.

00:00:54 Just making sure that everybody understands currently how to do things.

00:00:58 If you want to do classes and objects and inheritance.

00:01:00 And to be clear, all of Python is object-oriented.

00:01:05 It's just everything's an object.

00:01:07 I hope that's true.

00:01:09 Pretty sure that's true, yeah.

00:01:09 Even functions and numbers and all that stuff.

00:01:12 What this is meaning is if you're going to define your own classes, how to go about doing that.

00:01:18 And this is a pretty nice tutorial.

00:01:21 One of the reasons why I wanted to call it out is there's a reason I'll get to later, but he kind of didn't.

00:01:28 He brushed by construction.

00:01:30 So if you came from C++, one of the things that C++ does is it calls your base class constructors automatically.

00:01:37 And I wanted to just call that out.

00:01:40 Right.

00:01:40 Especially if they're parameterless, right?

00:01:42 Like, it'll just happen straight on the stack, right?

00:01:44 Yeah.

00:01:45 You don't have to be explicit.

00:01:46 Yeah.

00:01:46 But in Python, you do have to be explicit.

00:01:48 If you override init, the base class init will not get called unless you call it yourself.

00:01:54 And there's been many incantations of it, and I think the recommendation right now is to just call super.init to call the base class constructor.

00:02:03 Yeah, yeah.

00:02:03 Definitely.

00:02:04 Very, very cool.

00:02:05 Worth checking out.

00:02:07 It really digs into the object model and inheritance and all that kind of stuff.

00:02:13 So if that's a little bit shaky to you, definitely check it out.

00:02:16 Even has some little exercises and examples in there, right?

00:02:18 I guess also if you're not a bad thing to brush up on if you're just about to go into an interview, probably.

00:02:24 It's a nice article.

00:02:25 Also, pay attention.

00:02:27 I've been playing with adders a lot if I need objects.

00:02:30 So make sure that it's a really easy thing to pick up if you want to check that out as well.

00:02:36 Yeah, that's cool.

00:02:36 Adders is pretty sweet.

00:02:38 Definitely a lot of really solid people make it a great recommendation.

00:02:42 So it appears frequently at the end as the featured PyPI package on Talk Python, for example.

00:02:48 Yeah.

00:02:48 So you want to stay on a GUI trip for a while?

00:02:51 How about we keep going?

00:02:52 We really opened a bag, man.

00:02:53 When I started that, it really kicked off a, oh, but Michael, did you hear about this?

00:03:00 Did you hear about that?

00:03:00 And I'm happy I did.

00:03:02 And I love all the things people are sending us.

00:03:05 Learned about WXPython Phoenix, which I only knew about the older version, which is really awesome.

00:03:10 I learned about GUI, G-O-O-E-Y, and WUI, and all these other interesting things.

00:03:15 So I come to you, Brian, this week with yet another thing called scripted forms.

00:03:20 So tell me, how's your Markdown?

00:03:22 I love Markdown.

00:03:23 I use it all the time.

00:03:24 Yeah, Markdown's not hard.

00:03:24 Yeah, it's not bad, right?

00:03:25 So here is a project in Python that lets you basically sketch out a UI in Markdown.

00:03:35 Then it becomes an interactive GUI with input fields and everything.

00:03:40 Okay.

00:03:40 Neat.

00:03:41 I got to check that out.

00:03:43 Yeah.

00:03:44 So for example, like you want the title, like a big title at the top of your form or your window, hash space type out the title.

00:03:53 Isn't that cool?

00:03:54 Yeah.

00:03:54 Yeah.

00:03:55 So you can do all sorts of interesting things in there.

00:03:58 It's not like a lot of these are not totally general purpose.

00:04:01 But if you want a simple UI, check out this thing called scripted forms.

00:04:07 Of course, we're linking to it in there.

00:04:08 And you just basically sketch it out.

00:04:10 And it runs actually on Jupyter.

00:04:12 But the way it gets packaged up is you just see like a desktop window pop up and then it's interactive.

00:04:19 So it's pretty cool.

00:04:20 They got some examples and all kinds of stuff.

00:04:22 You can have like sliders and live graphs.

00:04:24 And so this looks particularly interesting to data science-y folks who have that kind of display stuff going on.

00:04:31 That's cool.

00:04:32 Yeah, it's cool, right?

00:04:32 So scripted forms, there's yet one more way in which you can create niche Python GUI apps and then bundle it up with something like PyInstaller.

00:04:40 I definitely want to try that.

00:04:42 Yeah, yeah, I do as well.

00:04:43 So do you know that I'm a fan of MongoDB?

00:04:45 Yeah, you're like the Uber fan.

00:04:48 I am the Uber fan.

00:04:49 I love it.

00:04:50 I talk about it, do stuff with it all the time.

00:04:52 Like, for example, Python Bytes, the web app, is driven by MongoDB, for example.

00:04:56 But you actually, you are the one to bring the big news, not me, on MongoDB these days, right?

00:05:01 I guess so.

00:05:02 I was surprised, but I grabbed it.

00:05:05 The news that came out on the 15th was that MongoDB will, and it doesn't do it right now,

00:05:11 but in the 4.0 release, it will do multi-document transactions and have ACID data guarantee integrity guarantees.

00:05:21 That's kind of blown my mind.

00:05:22 One of the big things that Mongo has done is really focused on going to treat the document level record as the thing.

00:05:31 That way we can do sharding and auto scale out and all kinds of stuff and not worry about communicating across machines and clusters and all the other pitfalls you can run into by trying to do really complex transactions.

00:05:45 So this, you're right.

00:05:46 I didn't see this coming either.

00:05:48 So this is due out in the summer.

00:05:50 So the 4.0 is supposed to do transactions.

00:05:54 And the 4.2, which is the, I'm not sure when that's coming out, that will even deal with transactions across sharded deployments.

00:06:02 Wow.

00:06:02 That's really cool.

00:06:03 And it has snapshot isolation.

00:06:06 So even the sort of repeatable read type stuff.

00:06:09 Very cool.

00:06:10 So yeah, they said sometime this summer, right?

00:06:12 The ability to do transactions and hopefully you will get things like rollback and things like that.

00:06:18 These are a lot of the reasons why people don't choose a document database.

00:06:21 And so that changes the table of pros and cons.

00:06:25 It definitely changes the tradeoffs that you're considering.

00:06:27 I just find working with these document databases so much easier.

00:06:31 Like the last time I ran a migration or worried about upgrading my database schema to match a new deployment was never.

00:06:40 Like I literally have not had to run any form of update script for the last two years on training.python.fm, on Python bytes, or any of these things, right?

00:06:50 Like they just adapt.

00:06:52 And it just makes the sort of living with it so much easier.

00:06:55 So I'm really happy to see it get one more check in the sort of comparison table in that column.

00:07:01 Yeah, definitely.

00:07:02 Yeah, very cool.

00:07:02 So if I did mess up my schema and something went wrong, though, my web app would crash.

00:07:07 That would be bad.

00:07:08 And actually, working with Mongo Engine, you can like basically take the site down because it will like not read records if it thinks it's inconsistent with them.

00:07:16 So that's a different type of problem.

00:07:17 Same thing happens with SQLAlchemy.

00:07:18 But if I did that and I had Rollbar installed like I do, we would know about it right away.

00:07:24 We'd get little notifications in Slack and email and pop-ups and stuff saying, hey, the site is down.

00:07:30 Something has gone terribly wrong.

00:07:33 Like just the other day, I was sitting around and I started getting all these notifications of something going wrong with the site.

00:07:38 I'm like, oh, what is this?

00:07:39 Why are these, you know, like on Python bytes and Talk Python and whatnot?

00:07:42 And I pull up Rollbar and it says cannot find MongoDB server.

00:07:46 How about that?

00:07:47 And the reason is the digital version of the host was actually patching the underlying Linux servers for the Spectre and Meltdown vulnerabilities.

00:07:57 So they had to take the machines down.

00:07:58 And they didn't do it in like a controlled way because they're just like, we're telling you at some time we're taking the machines down.

00:08:03 We've got to fix this.

00:08:05 So even when it's not your fault, you'll know about it if you have this installed and you can at least switch, you know, switch up a dialogue or a page saying, oh, sites are super maintenance right now.

00:08:15 Sorry.

00:08:15 Yeah.

00:08:15 That's cool.

00:08:16 Yeah.

00:08:16 So super easy to install it.

00:08:18 Not much work at all.

00:08:19 Plugs into all the web frameworks.

00:08:20 Check it out at pythonbytes.fm/rollbar.

00:08:24 So another kick that you've been on for a while, Brian, is Python packaging.

00:08:29 Yes.

00:08:30 We talked a lot about what the right structure that is and all those various things.

00:08:34 So this week I want to feature this thing called Python packaging pitfalls.

00:08:40 It's not super new, but I thought it might be fun to cover anyway because we've talked a lot about it and we haven't covered this.

00:08:47 So a couple of items that I don't know how many there are, probably 10, 12 little things.

00:08:53 Don't forget to do this.

00:08:54 Don't forget to do that.

00:08:55 Like don't forget, you know, so if you're doing packaging, you might forget to clean the build directory before you do it.

00:09:01 Or you forget to specify package data or using package underscore data or fine grained package data.

00:09:09 All sorts of mistakes that are listed there.

00:09:11 And it says why it's really nice.

00:09:13 The article says, why is this a problem?

00:09:15 How do you fix it?

00:09:16 Like hard coding your packages in the setup py versus like discovering the packages with Python code in your setup py.

00:09:24 Yeah.

00:09:25 These are all great tips.

00:09:26 I haven't read this for a while.

00:09:28 I remember reading it a couple of years ago to try to make sure that most of these look like they're still valid.

00:09:35 Yeah, I think so.

00:09:35 One of them that might be nice and close for you is your test the installed code.

00:09:41 They test what's actually in your working directory rather than running the setup and testing the thing that actually was the result of that.

00:09:49 Is that one of the things to avoid?

00:09:51 That's one of the last things to say.

00:09:53 Be careful of make sure you test the actual install result, not just your code on development.

00:09:58 Yeah.

00:09:59 And that's one of the reasons why I really like Tox is because Tox creates like these clean environments.

00:10:05 But you still have to be careful of that even with Tox.

00:10:08 That's why we talked about using a source directory.

00:10:11 Absolutely.

00:10:12 So a while ago, I had a bunch of authors, including you on Talk Python, about writing.

00:10:18 And some people were asking, like, how do you become a better writer?

00:10:22 And you said, by writing.

00:10:25 Right?

00:10:27 Just get out there, blog, write, do things like that.

00:10:29 So you came across something like that again this week, right?

00:10:32 Yeah.

00:10:32 I came across an article called Blogging Principles I Use by Julia Evans, which I think it's cool.

00:10:40 She goes by Bork on Twitter with a zero.

00:10:42 But I'm just going to read through her tips and then we can talk about them.

00:10:47 Be honest about what you know.

00:10:48 Try not to write anything too long.

00:10:51 Be positive.

00:10:52 Write for the past you.

00:10:54 Stick with your own experience.

00:10:56 And it's okay if not everyone likes it.

00:10:59 And a lot of these really hit home with me.

00:11:02 One of the things, try not to write anything too long.

00:11:05 I tend to try to, like, completely get my head around something and not want to write about it until I completely understand it.

00:11:14 And then sometimes I don't have time to do that.

00:11:16 And I think that's too bad.

00:11:18 And I think I love it when people just have little couple screens full of information of just,

00:11:23 Hey, I learned this neat new thing.

00:11:25 Here's how to do it.

00:11:26 And just go and teach it so other people can learn from you.

00:11:30 It doesn't have to be huge.

00:11:31 So be okay with short things.

00:11:33 If you do short things frequently, that's probably better than saving up that one long post that actually never gets written, right?

00:11:40 Yeah.

00:11:40 Also, one of the things you can do is with metrics as well.

00:11:43 If you, instead of writing a long blog post that has, like, five subtopics, write five different posts.

00:11:51 And then you can find out which piece of this resonating or easier metrics, we'll just point it out.

00:11:56 Yeah, that's a really good point.

00:11:57 The last one is, it's okay if not everyone likes it.

00:12:00 And her example actually is, she's got a, I forget which article it was, but one of her articles is more popular than others.

00:12:09 And she needs to remind herself to not try to try to keep up with that.

00:12:13 It would be a mistake to try to hit that every time.

00:12:16 That's actually something that hits with me is I, I haven't been blogging a lot lately.

00:12:20 I do want to pick it up.

00:12:21 I think I need to, it will help me to try to write shorter stuff.

00:12:25 And also, I've got a few tutorials out there that are, that are really popular.

00:12:30 And I don't know how to beat that.

00:12:32 So, don't try.

00:12:33 Just write little things.

00:12:35 Like, I learned a few new things during the webinar today.

00:12:39 I learned some new things about PyCharm.

00:12:41 And I could just, like, write a couple, a short blog post about cool things I learned about PyCharm today.

00:12:46 Yeah, that's awesome.

00:12:47 Why not?

00:12:48 Yeah, why not?

00:12:48 And definitely, I feel like these little series ones are real nice.

00:12:53 Like, I've done several, like, here's, I'm going to write, I'm going to blog 10 blog posts in this kind of theme.

00:12:58 And those turn out to be really easy to write.

00:13:00 But I also find that I periodically get distracted and just life gets in the way and I don't finish them.

00:13:05 I'm like, here's the top 10.

00:13:07 And, like, they have seven filled out, you know?

00:13:08 Yeah.

00:13:09 So, I mean, I think that's a really great way to do it.

00:13:11 But maybe actually write the 10 and then do the, hey, I'm doing a series on it.

00:13:16 You know what I mean?

00:13:17 Like, kind of do it in reverse a little bit to bring it together, what you've done.

00:13:20 I think that one of the takeaways I would add is, like, it is so hard to predict what is going to be popular and what is not going to be popular.

00:13:28 It's just, you know, you look at things and you think, oh, this is going to be so popular.

00:13:33 And it gets, like, 100 views.

00:13:35 Like, you're like, I guess I'll throw this out.

00:13:36 Why not?

00:13:38 I got a half hour and it's kind of on my mind.

00:13:40 And maybe it won't matter.

00:13:41 Like, it's thousands or hundreds of thousands of views.

00:13:44 It's just like, okay, why is that like this?

00:13:46 Right.

00:13:47 So, just put stuff out there and it will happen.

00:13:49 I think the write for the past you, I fall into this trap of trying to write for, either write for experts and try to impress the people that know more than I do, which that's a bad place to try to be.

00:14:03 And trying to write for absolute beginners.

00:14:05 But I haven't been an absolute beginner for a long time.

00:14:08 So, I don't really know how to do that.

00:14:10 So, I think writing for, like, me a month ago.

00:14:13 If I would have read this article a month ago, it would have saved me time.

00:14:17 So, just write it down.

00:14:19 Yeah, yeah.

00:14:19 Absolutely.

00:14:19 Very cool.

00:14:21 So, we spoke about pipenv, P-I-P-E-N-V, a while ago.

00:14:25 But I want to bring up something that I just, I don't know why I found this.

00:14:31 I just randomly ran across this.

00:14:32 So, I was looking at pipenv again for something.

00:14:35 And so, pipenv is a way to kind of package up virtual environment, dependencies, requirements.txt, pip, activating the virtual environments, all that kind of stuff into, like, one little workflow.

00:14:46 Okay.

00:14:46 Now, Kenneth writes is behind this in a significant way.

00:14:50 But I somehow was looking across it.

00:14:53 And I saw that it's on github.com/pypa, the Python Packaging Authority, slash pipenv.

00:15:00 Hmm, interesting.

00:15:01 And then I scroll down and it says pipenv, the officially recommended Python packaging tool from python.org.

00:15:07 Free as in freedom.

00:15:08 Did you know this is the official way, like, pip and requirements.txt is apparently out?

00:15:13 No.

00:15:14 I didn't either.

00:15:15 That was my reaction.

00:15:15 Like, wait, what?

00:15:16 I mean, I know there's pipfile and pipfile.lock and all that kind of stuff.

00:15:20 But it seems to me, reading this at least, that, because this comes from PyPA, that pipenv is the way we should be doing things.

00:15:27 So I don't know about you, but I need to study this and kind of get in touch with it.

00:15:32 Because I feel a little bit lost when I use pipenv.

00:15:35 And I'm really confident with pip and requirements.txt and all the stuff I do there.

00:15:40 I guess I'm comfortable with pip and setup files.

00:15:42 So I will have to read up on this, too.

00:15:45 So do you know if you can just get away with doing this and then pushing a package up to IPI?

00:15:52 I don't know, but one of the things you can do is you can tell it to generate a requirements.txt from its behaviors and its lock files and stuff.

00:16:04 Okay.

00:16:04 So let me give you the quick workflow.

00:16:05 If you go there, there's a docs.pipinf.org, which you can go to.

00:16:10 And it has a nice little screencast from Kenneth Wrights.

00:16:12 It's like four minutes.

00:16:13 It says, let me show you this new tool.

00:16:15 I've been working on it with a bunch of people, and it seems really nice.

00:16:18 Here's how it goes.

00:16:20 And so you just go into a directory, no virtual environment, nothing set up.

00:16:23 And you say pipenv install a thing.

00:16:26 And if it's never run, it will create right there.

00:16:30 What is it?

00:16:31 A pip lock file.

00:16:31 A pip file and a pip.pipfile.lock.

00:16:34 And it will somewhere in like your temp working area create, not in that folder, somewhere else, create a virtual environment and install it into that.

00:16:42 If you type pip install, a pipenv install another thing, it'll put it into that same environment because it now is like tied to the pip file.

00:16:49 And it'll actually automatically add the requirement to your pip file and to your pip lock.

00:16:53 And the pip file is like requirements.txt.

00:16:56 The pip file.lock is like that plus the dependencies.

00:17:00 So it's like pip freeze everything, not just what you pip installed.

00:17:04 So it's pretty cool.

00:17:06 And then you could just pip shell, pip inf shell to kick it off.

00:17:09 Or you can find the, there's a command for finding the virtual environment.

00:17:14 So then you can, you know, source activate it just tradition, like traditionally.

00:17:18 Okay.

00:17:19 And actually the video is like the reason why I gave it a shot because just reading about it confused me, even though I read it like seven times.

00:17:27 I know.

00:17:28 Like, why is this bouncing off me?

00:17:29 But then you watch him use it in like this little couple minute video and it's like, oh, okay, that's easy.

00:17:33 Yes, exactly.

00:17:34 Another thing I like about it is it says Windows is a first class citizen in our world.

00:17:39 Wow.

00:17:39 That's rare.

00:17:40 That is.

00:17:40 It's really nice.

00:17:41 Like I have a Windows 10 setup, but I typically work on my Mac.

00:17:45 But I know many, many people in the world use Windows, especially in like large enterprise environments.

00:17:51 And having Windows be a first class citizen in the Python space is good for everyone.

00:17:57 Yes.

00:17:57 Well, this is neat.

00:17:58 Yeah.

00:17:59 So just like really the news for me is like it's a review of pip inf, but the fact that it seems to be the officially recommended way over the traditional ways we've been doing it means I need to pay more attention.

00:18:09 Yes.

00:18:10 Very cool.

00:18:10 All right.

00:18:11 So that's our set of items for the week.

00:18:15 You just did a webcast, right?

00:18:16 Which you will probably have live certainly by the time this goes.

00:18:21 Well, probably by the time this goes out.

00:18:23 Well, it was already live.

00:18:24 It was live this morning.

00:18:24 Well, I mean, the recording will be out and available.

00:18:27 Recording should be out.

00:18:28 Yeah.

00:18:29 That was with the JetBrains PyCharm team.

00:18:33 And that was super fun.

00:18:34 I had a good time.

00:18:36 We talked about using pytest within PyCharm.

00:18:40 And we just scratched the surface.

00:18:43 There's a lot more to cover.

00:18:44 But it was fun.

00:18:44 Sounds really cool.

00:18:45 Awesome.

00:18:45 So we'll definitely link to the video next time, I'm sure, because we'll know where it is.

00:18:50 Also, I have two quick follow-up items.

00:18:52 One is the Pandas.

00:18:56 The whole Pandas project is super important in data science.

00:18:59 Gosh, I'm sorry.

00:18:59 I forget the guy's name who sent it to me.

00:19:02 I got a message saying, hey, we're having this really interesting idea of the Pandas documentation sprint.

00:19:09 And these are throughout the world.

00:19:13 And to say how many locations, I don't know.

00:19:15 Quick counting.

00:19:16 Quick counting.

00:19:17 Let's say 15 locations throughout the world, slightly biased towards Europe, but also everywhere, but apparently Australia or Antarctica.

00:19:28 There's these physical locations like San Diego, Seattle, and so on, where people are getting together to do sprints on the documentation for Pandas.

00:19:38 That happens on March 10th, 2018.

00:19:41 So a couple weeks.

00:19:44 Yeah, and it has a countdown all the way down to the seconds.

00:19:47 Definitely has a, yeah, down to the seconds.

00:19:49 We start now.

00:19:50 I think this is a cool idea.

00:19:52 If you've never contributed to open source and you want to get that check mark on your resume and you want that on a major project,

00:20:00 here's a really cool way to become a contributor to Pandas without deeply understanding it or having majorly adding a feature.

00:20:08 And also, you get to hang out with people who are experts in Pandas.

00:20:12 And so those are probably good connections to make.

00:20:14 So check that out at python-sprints.github.io slash pandas.

00:20:19 That should be fun.

00:20:20 Yeah, and every open source project will love you if you write documentation for it.

00:20:24 Yes, absolutely.

00:20:25 Okay, so really great.

00:20:27 And then the other item I wanted to follow up with is we talked about the workflow in Unreal coming from, was that Autodesk, I think?

00:20:37 Anyway, really, really cool stuff that they were doing there.

00:20:40 And now someone followed up and said, that's really great.

00:20:42 Do you know you can now embed Python in the Unreal Engine 4?

00:20:46 Wow.

00:20:47 There's this project called Unreal Engine Python, and it lets you just embed there.

00:20:53 So it's like a plug-in for embedding the entire Python VM 3 or 2 in there.

00:20:58 And then, you know, you can basically add scripting into your game and let people write Python and control your 3D environment.

00:21:07 Pretty cool.

00:21:07 So just a quick follow-up from when we talked about that before.

00:21:12 Thank you for being here.

00:21:13 It's great to chat with you, and I love your picks this week.

00:21:15 Thank you.

00:21:16 You too.

00:21:16 Bye.

00:21:16 Bye.

00:21:18 Thank you for listening to Python Bytes.

00:21:19 Follow the show on Twitter via at Python Bytes.

00:21:22 That's Python Bytes as in B-Y-T-E-S.

00:21:25 And get the full show notes at pythonbytes.fm.

00:21:28 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:21:32 We're always on the lookout for sharing something cool.

00:21:35 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:39 Thank you for listening and sharing this podcast with your friends and colleagues.

