
00:00:00.000 --> 00:00:02.080
- Hello and welcome to Python Bytes


00:00:02.080 --> 00:00:03.780
where we deliver Python news and headlines


00:00:03.780 --> 00:00:05.000
directly to your earbuds.


00:00:05.000 --> 00:00:09.640
This is episode 240, recorded July 1st, 2021,


00:00:09.640 --> 00:00:11.080
how time does fly.


00:00:11.080 --> 00:00:11.920
I'm Michael Kennedy.


00:00:11.920 --> 00:00:13.280
- And I'm Brian Arkin.


00:00:13.280 --> 00:00:14.680
- And I'm Chris Moffitt.


00:00:14.680 --> 00:00:16.760
- Hey, Chris, welcome to the show.


00:00:16.760 --> 00:00:18.520
- Thank you, great to be here.


00:00:18.520 --> 00:00:19.480
- Yeah, it's great to have you here.


00:00:19.480 --> 00:00:23.960
We've had you talking about the missteps of Excel


00:00:23.960 --> 00:00:26.960
and how the Python data tools chain can make that better


00:00:26.960 --> 00:00:28.240
over on Talk Python a few times.


00:00:28.240 --> 00:00:30.360
This is your first time on Python Bytes, right?


00:00:30.360 --> 00:00:31.640
- It is, yes.


00:00:31.640 --> 00:00:33.160
- Yeah, exciting to have you here.


00:00:33.160 --> 00:00:34.120
Definitely, definitely.


00:00:34.120 --> 00:00:36.240
But maybe you wanna go ahead and kick us off?


00:00:36.240 --> 00:00:38.520
- I wanna talk about subclassing today,


00:00:38.520 --> 00:00:41.880
but Hinnick wrote an article called "Subclassing in Python,"


00:00:41.880 --> 00:00:46.760
and dealing with classes is just everywhere in Python.


00:00:46.760 --> 00:00:49.440
Even if you're not using classes,


00:00:49.440 --> 00:00:52.780
Python itself has all sorts of classes and objects


00:00:52.780 --> 00:00:54.120
that you're using all the time,


00:00:54.120 --> 00:00:55.380
whether you know it or not.


00:00:55.380 --> 00:00:59.060
But when you start getting into larger design,


00:00:59.060 --> 00:01:03.780
there is a question around composition


00:01:03.780 --> 00:01:05.500
versus inheritance and stuff.


00:01:05.500 --> 00:01:09.500
So I really like this article that Hinnick put together


00:01:09.500 --> 00:01:12.280
because I think people should think


00:01:12.280 --> 00:01:13.900
about the ramifications more.


00:01:13.900 --> 00:01:18.340
So the general gist is he prefers composition


00:01:18.340 --> 00:01:20.100
over inheritance, and I do too.


00:01:20.100 --> 00:01:25.060
But then it goes through, if you have to do inheritance,


00:01:25.060 --> 00:01:27.220
and sometimes you do in Python.


00:01:27.220 --> 00:01:31.100
For instance, the greatest example I know of


00:01:31.100 --> 00:01:34.580
is when you're having exception hierarchies.


00:01:34.580 --> 00:01:40.140
It's really easy to build up exception hierarchies in Python.


00:01:40.140 --> 00:01:42.340
There's nothing there except for


00:01:42.340 --> 00:01:45.660
the class definitions and their inheritance and that's it.


00:01:45.660 --> 00:01:47.140
>> The easiest class you've ever created,


00:01:47.140 --> 00:01:49.140
class, exception name, path.


00:01:49.140 --> 00:01:52.480
>> Yeah. But it's useful to do that.


00:01:52.480 --> 00:01:54.580
But then if you want to go further,


00:01:54.580 --> 00:01:57.620
There's other design patterns and stuff,


00:01:57.620 --> 00:02:00.700
especially from the C++ world,


00:02:00.700 --> 00:02:02.440
where people might be thinking,


00:02:02.440 --> 00:02:05.340
"Well, I want to do something similar in Python and stuff."


00:02:05.340 --> 00:02:09.620
This is actually a really great article discussion about it.


00:02:09.620 --> 00:02:11.980
It's pretty long. I don't want to summarize it too much,


00:02:11.980 --> 00:02:13.820
but I'll jump into the three types.


00:02:13.820 --> 00:02:17.780
He talks about three types of subclassing that often happens.


00:02:17.780 --> 00:02:20.060
Subclassing for code sharing,


00:02:20.060 --> 00:02:22.860
and the short answer is,


00:02:22.860 --> 00:02:26.740
people are trying to do the dry principle and try to share code.


00:02:26.740 --> 00:02:30.300
It's just it ends up being a bad idea, essentially.


00:02:30.300 --> 00:02:32.580
There's a bunch of references for it.


00:02:32.580 --> 00:02:35.340
I think if you don't believe me or him,


00:02:35.340 --> 00:02:38.020
read this article and read a bunch.


00:02:38.020 --> 00:02:41.180
He's got a whole bunch of linked articles too that discuss it,


00:02:41.180 --> 00:02:43.820
but I agree.


00:02:43.820 --> 00:02:49.320
The second type is abstract data types or interfaces.


00:02:49.320 --> 00:02:50.380
In a lot of languages,


00:02:50.380 --> 00:02:52.020
they're called the interfaces.


00:02:52.020 --> 00:02:57.300
This is a neat use of it and there's a bunch of things.


00:02:57.300 --> 00:02:59.500
I thought, "Okay, yeah,


00:02:59.500 --> 00:03:05.860
you definitely will use inheritance and composition for data type stuff."


00:03:05.860 --> 00:03:09.340
But in his discussion,


00:03:09.340 --> 00:03:13.260
he talks about some of the cool things that Python has that allow you


00:03:13.260 --> 00:03:20.220
to have these hierarchies without actually doing subclassing.


00:03:20.220 --> 00:03:22.020
there's some cool features of Python,


00:03:22.020 --> 00:03:28.860
like the protocol syntax that came in recently in typing.protocol.


00:03:28.860 --> 00:03:31.580
>> Protocol is like formal duck typing,


00:03:31.580 --> 00:03:33.820
which is an odd thing to combine, but yes.


00:03:33.820 --> 00:03:39.020
>> Yeah. But it's really cool how it's put together in Python, so I like that.


00:03:39.020 --> 00:03:41.660
Then lastly is specialization,


00:03:41.660 --> 00:03:44.180
and that's where the exception hierarchies come in.


00:03:44.180 --> 00:03:47.100
But also, he's got a great discussion about


00:03:47.100 --> 00:03:50.460
structuring data classes that have common elements.


00:03:50.460 --> 00:03:54.300
I think that's an interesting discussion too.


00:03:54.300 --> 00:03:56.620
I think I already said this,


00:03:56.620 --> 00:04:00.500
the summary, it's really hard to summarize this article other than,


00:04:00.500 --> 00:04:02.900
it's good to think about your design,


00:04:02.900 --> 00:04:05.620
especially if you're going to try to bring subclassing into it.


00:04:05.620 --> 00:04:06.940
So let's do that.


00:04:06.940 --> 00:04:09.140
>> Yeah. Awesome. I haven't had a chance to dive into this article,


00:04:09.140 --> 00:04:11.620
but I do want to read it and explore it.


00:04:11.620 --> 00:04:13.260
It touches on a couple of things,


00:04:13.260 --> 00:04:15.580
like it touches on namespaces and modules,


00:04:15.580 --> 00:04:17.260
which I think is pretty interesting.


00:04:17.260 --> 00:04:20.780
So many people coming from C++, C#, Java, et cetera,


00:04:20.780 --> 00:04:23.380
like all these really strongly OOP,


00:04:23.380 --> 00:04:26.980
especially C# and Java, where everything has to be a class.


00:04:26.980 --> 00:04:28.280
You'll see people creating classes


00:04:28.280 --> 00:04:31.500
just for things like static variables and so on, right?


00:04:31.500 --> 00:04:32.580
Or static functions.


00:04:32.580 --> 00:04:33.940
If you just have a bunch of static functions,


00:04:33.940 --> 00:04:35.400
you know what works really well for that?


00:04:35.400 --> 00:04:37.700
A module that has functions in it, right?


00:04:37.700 --> 00:04:39.420
The same thing, you import module,


00:04:39.420 --> 00:04:41.060
then you say module.functionName


00:04:41.060 --> 00:04:43.740
is the same as from module import class,


00:04:43.740 --> 00:04:45.700
class.static function name, right?


00:04:45.700 --> 00:04:48.900
Like it's just a layer that doesn't really need to be there.


00:04:48.900 --> 00:04:51.100
So the article touches on that, which I think is neat.


00:04:51.100 --> 00:04:53.080
Like sometimes you just don't need those.


00:04:53.080 --> 00:04:57.140
And then also the composition over inheritance.


00:04:57.140 --> 00:04:58.980
I think composition over inheritance


00:04:58.980 --> 00:05:00.500
is a really important thing to think about.


00:05:00.500 --> 00:05:03.060
'Cause so often people say, well, you can't use OOP


00:05:03.060 --> 00:05:04.660
because it's horrible in all these ways


00:05:04.660 --> 00:05:07.420
and you end up with like a robotic duck that can't quack.


00:05:07.420 --> 00:05:09.740
I don't know, like you end up with these weird situations


00:05:09.740 --> 00:05:11.420
if you like derive too many things


00:05:11.420 --> 00:05:13.540
then you put a weird specialty on the end.


00:05:13.540 --> 00:05:17.040
You're like a duck is an animal, but it has wings.


00:05:17.040 --> 00:05:18.160
But wait, now it's a robot.


00:05:18.160 --> 00:05:19.360
Now, why does it eat water?


00:05:19.360 --> 00:05:20.760
It's like what happened to it?


00:05:20.760 --> 00:05:23.280
But the composition allows for you to keep things much


00:05:23.280 --> 00:05:26.220
more tight and small in the inheritance stack,


00:05:26.220 --> 00:05:28.060
but still put them together in meaningful ways.


00:05:28.060 --> 00:05:31.040
Anyway, I want to see more about this. This looks great.


00:05:31.040 --> 00:05:33.320
>> I'm coming from a standpoint of,


00:05:33.320 --> 00:05:35.480
I'm a C++ person as well,


00:05:35.480 --> 00:05:37.420
and I've done both extremes.


00:05:37.420 --> 00:05:40.820
I've gone way down the inheritance hierarchy thing,


00:05:40.820 --> 00:05:43.420
and had like seven deep in higher,


00:05:43.420 --> 00:05:45.380
maybe not seven, but like five deep,


00:05:45.380 --> 00:05:47.540
and it gets to be a nightmare.


00:05:47.540 --> 00:05:50.460
Then I went to the other direction and didn't do


00:05:50.460 --> 00:05:53.120
any inheritance at all in a design,


00:05:53.120 --> 00:05:55.900
but there's problems there too.


00:05:55.900 --> 00:06:00.060
Thinking about it and doing it smartly, you just need to.


00:06:00.060 --> 00:06:02.020
>> It's often like salt.


00:06:02.020 --> 00:06:04.300
I could see it's really good when you have some.


00:06:04.300 --> 00:06:05.900
You try to go like, salt's great,


00:06:05.900 --> 00:06:06.780
I'm going to have that for dinner.


00:06:06.780 --> 00:06:08.140
I'm like, no, you shouldn't do that.


00:06:08.140 --> 00:06:09.780
(laughing)


00:06:09.780 --> 00:06:12.620
- I think the other thing that's really important


00:06:12.620 --> 00:06:15.140
about this is depending on how long you've been working


00:06:15.140 --> 00:06:17.860
in Python, sometimes you kind of get stuck in a rut


00:06:17.860 --> 00:06:19.300
and you're always doing the same thing


00:06:19.300 --> 00:06:22.040
and the language has evolved and grown over time.


00:06:22.040 --> 00:06:24.740
And so I think articles like this kind of force you


00:06:24.740 --> 00:06:27.660
to take a step back and see if you're using


00:06:27.660 --> 00:06:32.040
all the new features in a way that maybe aren't idiomatic.


00:06:32.040 --> 00:06:33.880
- Also quick comment out there from the live stream.


00:06:33.880 --> 00:06:36.020
Paul says, first time watching the live stream.


00:06:36.020 --> 00:06:38.940
Hey Paul, weird seeing everyone when they say the intro.


00:06:38.940 --> 00:06:40.140
Indeed, it is kind of weird,


00:06:40.140 --> 00:06:42.980
but I wanna highlight this one to say hi to Paul.


00:06:42.980 --> 00:06:43.820
Thanks for being here.


00:06:43.820 --> 00:06:44.960
But also, if you're listening and you're like,


00:06:44.960 --> 00:06:46.700
hey, I'd kinda like to see what's on the screen


00:06:46.700 --> 00:06:47.940
while you're all talking about this,


00:06:47.940 --> 00:06:49.100
you'll follow us on YouTube.


00:06:49.100 --> 00:06:51.860
There's like a live stream and you write on Pythonbytes.fm,


00:06:51.860 --> 00:06:54.060
so it's easy to sign up for that.


00:06:54.060 --> 00:06:56.220
And also, Sam out there in live stream following up on this


00:06:56.220 --> 00:06:57.380
says, "Currently maintaining a library


00:06:57.380 --> 00:07:00.940
"with a deep templated class and hierarchies.


00:07:00.940 --> 00:07:03.340
"It's very hard to keep track of it all."


00:07:03.340 --> 00:07:05.840
Yeah, I hear you there, that's for sure.


00:07:05.840 --> 00:07:08.720
All right, let's switch over to the next one.


00:07:08.720 --> 00:07:11.760
Now I tried, I tried to resist this Brian,


00:07:11.760 --> 00:07:15.680
I promise I did, but I've ended up with an extra extra


00:07:15.680 --> 00:07:18.340
with seven more extras here all about it


00:07:18.340 --> 00:07:19.920
and it just had to become a main item


00:07:19.920 --> 00:07:22.040
because otherwise we'd be here for hours.


00:07:22.040 --> 00:07:23.360
It's not the idea of the show.


00:07:23.360 --> 00:07:26.320
So we've got an extra extra here all about it,


00:07:26.320 --> 00:07:28.440
nine extras, let's pull them up.


00:07:28.440 --> 00:07:31.040
Action number one, we've talked about Pyodide.


00:07:31.040 --> 00:07:33.520
I had a whole talk Python episode on Pyodide


00:07:33.520 --> 00:07:35.000
which is an interesting thing.


00:07:35.000 --> 00:07:38.640
It is this project by Mozilla where you take Python


00:07:38.640 --> 00:07:40.000
and you run it in the browser


00:07:40.000 --> 00:07:42.440
and then you take many of the data science packages


00:07:42.440 --> 00:07:44.620
like NumPy and Matplotlib and stuff


00:07:44.620 --> 00:07:47.280
and compile them into the browser.


00:07:47.280 --> 00:07:50.880
And then you basically have client side Python data science,


00:07:50.880 --> 00:07:52.120
which is really interesting.


00:07:52.120 --> 00:07:55.200
This project is being spun out as its own topic,


00:07:55.200 --> 00:07:58.040
as its own project, it's no longer under Mozilla.


00:07:58.040 --> 00:07:59.760
Usually that doesn't sound good to me.


00:07:59.760 --> 00:08:01.440
It kind of sounds like it's been orphaned.


00:08:01.440 --> 00:08:04.400
I have no idea what the status of PyOdied is.


00:08:04.400 --> 00:08:07.120
people can check that out, but it's no longer under Mozilla.


00:08:07.120 --> 00:08:09.640
It's its own separate thing, as they say.


00:08:09.640 --> 00:08:11.360
So it's cruising out there.


00:08:11.360 --> 00:08:13.640
And also, it didn't get compiled to JavaScript.


00:08:13.640 --> 00:08:15.440
It got compiled to WebAssembly,


00:08:15.440 --> 00:08:17.740
which is interesting 'cause that's faster.


00:08:17.740 --> 00:08:18.760
All right, that's number one.


00:08:18.760 --> 00:08:21.280
Number two, I just, as in a couple hours ago,


00:08:21.280 --> 00:08:22.400
released a brand new course,


00:08:22.400 --> 00:08:25.640
Python-Powered Chat Apps with Willio and SendGrid.


00:08:25.640 --> 00:08:28.560
So the idea is if you wanna have some kind of chatbot,


00:08:28.560 --> 00:08:31.280
but a lot of that conversation has to involve


00:08:31.280 --> 00:08:34.920
your database and your data and verifying things.


00:08:34.920 --> 00:08:39.040
Like the app that we built here is a tech savvy bakery


00:08:39.040 --> 00:08:41.760
where you can order cakes by sending it a WhatsApp message.


00:08:41.760 --> 00:08:43.360
And then it'll say, "Hey, you want a cake?


00:08:43.360 --> 00:08:44.640
Well, here's the menu."


00:08:44.640 --> 00:08:47.000
And it actually gets the menu from our Flask app.


00:08:47.000 --> 00:08:48.640
And then they pick something off the menu.


00:08:48.640 --> 00:08:50.840
And then once they pick all the details,


00:08:50.840 --> 00:08:52.720
they said like this, "Okay, great."


00:08:52.720 --> 00:08:54.480
We send it back to our website


00:08:54.480 --> 00:08:56.280
and figure out how much that's gonna cost.


00:08:56.280 --> 00:08:58.520
They order it, goes back, we send them a,


00:08:58.520 --> 00:09:02.360
If once they accept it, they get like a customized pretty email,


00:09:02.360 --> 00:09:05.420
goes back to the backend, the bakers bake it, it sends them another


00:09:05.420 --> 00:09:06.240
message to let them know.


00:09:06.240 --> 00:09:10.120
So if you want to build kind of like that workflow, if Willio and


00:09:10.120 --> 00:09:12.440
Syngrid check it out, this course is super fun.


00:09:12.440 --> 00:09:14.640
It's six hours and it's a hundred percent free.


00:09:14.640 --> 00:09:16.740
So, people can check that out.


00:09:16.740 --> 00:09:18.680
That I think you're trying to build that kind of thing.


00:09:18.680 --> 00:09:19.400
That'll be a lot of fun.


00:09:19.400 --> 00:09:20.960
So links in the show notes there.


00:09:20.960 --> 00:09:21.960
Oh, I had something.


00:09:21.960 --> 00:09:22.600
Yes.


00:09:22.600 --> 00:09:24.960
If I can't afford free, can I get a discount code?


00:09:24.960 --> 00:09:25.700
Yeah.


00:09:25.700 --> 00:09:28.440
I will give anyone listening 50% off that.


00:09:28.440 --> 00:09:33.560
So I have this really cool tweet and Twitter is broken from what I can tell for everything


00:09:33.560 --> 00:09:35.080
that's not the homepage.


00:09:35.080 --> 00:09:38.080
So something went wrong, but let me describe it.


00:09:38.080 --> 00:09:42.000
So when you look at it in the show notes, you'll be able to see there's a really cool


00:09:42.000 --> 00:09:45.920
tweet from Nick Moll, who was on the guest on the show last week.


00:09:45.920 --> 00:09:47.080
Oh, you got it.


00:09:47.080 --> 00:09:48.080
How can you get this to work?


00:09:48.080 --> 00:09:49.480
You've got some sort of magic.


00:09:49.480 --> 00:09:50.480
All right.


00:09:50.480 --> 00:09:51.640
Well, so thanks for putting on your screen.


00:09:51.640 --> 00:09:54.760
So here we have Will McGinn,


00:09:54.760 --> 00:09:59.480
showing an animation of basically this really cool,


00:09:59.480 --> 00:10:02.160
like collapsible sidebar and like


00:10:02.160 --> 00:10:06.760
scrolling within sub-windows inside of Textual.


00:10:06.760 --> 00:10:08.800
We talked about Textual as well.


00:10:08.800 --> 00:10:11.040
It's just such a cool graphic that says like,


00:10:11.040 --> 00:10:13.720
"Wow, you can build some pretty amazing applications there."


00:10:13.720 --> 00:10:14.320
What do you think?


00:10:14.320 --> 00:10:16.720
>> Will's just docking out of the park with this.


00:10:16.720 --> 00:10:19.080
It's fun to watch him go so fast.


00:10:19.080 --> 00:10:21.120
>> Absolutely. Well done there, Will.


00:10:21.120 --> 00:10:22.720
I'll switch back to mine for a moment.


00:10:22.720 --> 00:10:25.120
Okay, Ars Technica works on my computer.


00:10:25.120 --> 00:10:28.440
So remember we did an episode and I titled it something like


00:10:28.440 --> 00:10:30.320
Flock No or something like that.


00:10:30.320 --> 00:10:31.760
(laughing)


00:10:31.760 --> 00:10:34.580
So Flock, Federated Learning of Cohorts,


00:10:34.580 --> 00:10:37.280
is something that Google was trying to do


00:10:37.280 --> 00:10:40.280
so that they can replace third party cookies.


00:10:40.280 --> 00:10:41.120
Why?


00:10:41.120 --> 00:10:43.520
Because people are running ad blockers


00:10:43.520 --> 00:10:47.320
or like I am right now, a VPN that at the network level


00:10:47.320 --> 00:10:50.960
blocks all the ad tracking and third party cookies.


00:10:50.960 --> 00:10:53.980
So they're just basically not working very well anymore.


00:10:53.980 --> 00:10:56.700
So they need to, they're gonna cancel third-party cookies


00:10:56.700 --> 00:10:59.920
from which means they're canceling for the net, the internet.


00:10:59.920 --> 00:11:01.600
And, but because they're Google


00:11:01.600 --> 00:11:03.680
and they're based on ad revenue, primarily,


00:11:03.680 --> 00:11:06.080
they can't just go and we canceled tracking,


00:11:06.080 --> 00:11:09.840
hooray, we're all winning on privacy, right?


00:11:09.840 --> 00:11:13.140
It has to be replaced with some other form of tracking,


00:11:13.140 --> 00:11:15.200
which they call this federated learning of cohorts.


00:11:15.200 --> 00:11:16.880
But the federated learning of cohorts


00:11:16.880 --> 00:11:20.440
has all these almost more negative consequences.


00:11:20.440 --> 00:11:21.800
And I don't wanna go too much into that


00:11:21.800 --> 00:11:24.360
because we went into quite a lot of detail.


00:11:24.360 --> 00:11:25.760
But for example, you can say,


00:11:25.760 --> 00:11:29.860
I would like to target lesbians who just got divorced.


00:11:29.860 --> 00:11:32.520
You run an ad on that, people show up on your site,


00:11:32.520 --> 00:11:35.320
they sign up, you have an email, and now guess what?


00:11:35.320 --> 00:11:37.080
Not only do you know what their email is,


00:11:37.080 --> 00:11:38.520
you know that they're in this group


00:11:38.520 --> 00:11:39.840
and maybe this is the very first time


00:11:39.840 --> 00:11:40.760
you've ever met them, right?


00:11:40.760 --> 00:11:42.600
So really weird, creepy stuff


00:11:42.600 --> 00:11:45.320
that you could like pull out with this.


00:11:45.320 --> 00:11:48.680
Anyway, the big news is Google delays the rollout till 2023


00:11:48.680 --> 00:11:49.640
because you know what?


00:11:49.640 --> 00:11:50.960
People don't like it.


00:11:50.960 --> 00:11:52.560
They're not super keen about it.


00:11:52.560 --> 00:11:57.600
So there's a whole bunch of people who are against that.


00:11:57.600 --> 00:12:01.200
- You're saying they're just delaying it, not stopping it?


00:12:01.200 --> 00:12:03.160
- Yes, for now.


00:12:03.160 --> 00:12:06.480
This is a great RSTack article that people should check out.


00:12:06.480 --> 00:12:08.720
Let me read the first sentence or two.


00:12:08.720 --> 00:12:11.160
Google's plan to upend web advertising and user tracking


00:12:11.160 --> 00:12:13.100
by dropping third-party cookie support in Chrome


00:12:13.100 --> 00:12:14.280
has been delayed.


00:12:14.280 --> 00:12:17.120
Most browsers block third-party tracking cookies now,


00:12:17.120 --> 00:12:19.040
as do VPNs, like I mentioned.


00:12:19.040 --> 00:12:21.080
But Google, the world's largest advertising company,


00:12:21.080 --> 00:12:22.280
it wasn't going to follow suit


00:12:22.280 --> 00:12:24.280
without protecting its business model first.


00:12:24.280 --> 00:12:27.220
But there's a lot of challenges with this.


00:12:27.220 --> 00:12:29.240
A lot of people have come out against it.


00:12:29.240 --> 00:12:33.080
And yeah, it's not gonna work out super well.


00:12:33.080 --> 00:12:35.640
So they decided to delay it.


00:12:35.640 --> 00:12:36.980
That's what they said.


00:12:36.980 --> 00:12:39.600
Stage two starts mid-2023.


00:12:39.600 --> 00:12:43.160
- Google says it's received substantial feedback.


00:12:43.160 --> 00:12:44.200
- Including from us.


00:12:44.200 --> 00:12:48.800
And other companies out there are like,


00:12:48.800 --> 00:12:50.280
We kind of want to keep tracking too,


00:12:50.280 --> 00:12:52.360
but we're not really excited about this.


00:12:52.360 --> 00:12:54.680
So we're just going to not say anything like Apple,


00:12:54.680 --> 00:12:56.600
Opera, Mozilla, Microsoft.


00:12:56.600 --> 00:12:58.960
Yeah, they're like, "Ah, we're not so sure about this."


00:12:58.960 --> 00:13:01.160
Anyway, yeah, they've received substantial feedback.


00:13:01.160 --> 00:13:03.080
So hooray, I think for now.


00:13:03.080 --> 00:13:05.240
One thing that we don't talk very often about in Python


00:13:05.240 --> 00:13:09.240
is what if you want to ship your code to somebody


00:13:09.240 --> 00:13:12.280
and it has sensitive algorithms in it, right?


00:13:12.280 --> 00:13:14.800
It's not that common, but you could get Py2exe


00:13:14.800 --> 00:13:17.080
or Py2app bundle up your code and give it to somebody.


00:13:17.080 --> 00:13:20.160
For example, Dropbox does something to this effect, right?


00:13:20.160 --> 00:13:22.720
But your Python code running up in your little menu bar,


00:13:22.720 --> 00:13:23.800
there's other ones as well.


00:13:23.800 --> 00:13:25.440
But you might want to encrypt how that works


00:13:25.440 --> 00:13:27.160
or protect how that works.


00:13:27.160 --> 00:13:30.500
So people can't just open the PY files and look around.


00:13:30.500 --> 00:13:32.480
So there's this thing called Source Defender.


00:13:32.480 --> 00:13:35.200
I'll be clear, this is a paid commercial product.


00:13:35.200 --> 00:13:37.060
I have no affiliation, but they pointed,


00:13:37.060 --> 00:13:37.900
they sent me a message,


00:13:37.900 --> 00:13:39.960
"Hey, we're doing this thing, what do you think?"


00:13:39.960 --> 00:13:40.880
It looks kind of interesting.


00:13:40.880 --> 00:13:43.400
I think it's gonna be a pretty limited set of people


00:13:43.400 --> 00:13:44.540
who actually care about this.


00:13:44.540 --> 00:13:45.720
Like if you're running on Docker,


00:13:45.720 --> 00:13:46.860
you're running on the server,


00:13:46.860 --> 00:13:49.160
you probably don't care, maybe you do, but probably not.


00:13:49.160 --> 00:13:51.940
But if you'd like to be able to encrypt your source code,


00:13:51.940 --> 00:13:55.100
so it's much harder to see, and then ship that to somebody,


00:13:55.100 --> 00:13:56.980
you can use this thing as part of their paid service.


00:13:56.980 --> 00:13:58.020
So that's kind of cool.


00:13:58.020 --> 00:13:59.020
People can check that out.


00:13:59.020 --> 00:14:01.960
Let's see, oh, there's a plate noise, I don't want that.


00:14:01.960 --> 00:14:04.160
So I was recently interviewed on a day in a life


00:14:04.160 --> 00:14:05.700
in a work from home Pythonista,


00:14:05.700 --> 00:14:07.740
which is a cool series being done


00:14:07.740 --> 00:14:09.500
by the folks in the Philippines.


00:14:09.500 --> 00:14:11.820
If you want a tour of the behind the scenes studio


00:14:11.820 --> 00:14:13.820
and all the work from home stuff, people can check that out.


00:14:13.820 --> 00:14:16.780
Python 3.9.6 was just released.


00:14:16.780 --> 00:14:19.060
We can check out the change log and see what's happening there.


00:14:19.060 --> 00:14:25.340
There's a security HTTP client about what I think is like a denial of service.


00:14:25.340 --> 00:14:29.020
It sounds like it avoids an infinite loop sort of thing.


00:14:29.020 --> 00:14:31.420
So that might matter to people.


00:14:31.420 --> 00:14:33.220
Probably not, but maybe it does.


00:14:33.220 --> 00:14:36.260
Then a bunch of changes that are happening here,


00:14:36.260 --> 00:14:38.740
including platform specific ones.


00:14:38.740 --> 00:14:40.500
So if you're running Python 3.9,


00:14:40.500 --> 00:14:42.300
and why wouldn't you be? Update that.


00:14:42.300 --> 00:14:43.780
>> Because you're running 3.10.


00:14:43.780 --> 00:14:45.740
>> Yes, that's right. You're already ahead of the world.


00:14:45.740 --> 00:14:46.740
You're in the future.


00:14:46.740 --> 00:14:51.740
So also we had Calvin on from six feet up a while ago


00:14:51.740 --> 00:14:53.840
and we talked about the conference


00:14:53.840 --> 00:14:55.260
that he was putting together.


00:14:55.260 --> 00:14:56.580
Well, the videos from that conference


00:14:56.580 --> 00:14:58.300
are out as a YouTube playlist.


00:14:58.300 --> 00:14:59.680
So people can check that out.


00:14:59.680 --> 00:15:01.300
I don't remember how many videos there are.


00:15:01.300 --> 00:15:02.340
Let's click on it and see.


00:15:02.340 --> 00:15:03.920
There are 61 videos,


00:15:03.920 --> 00:15:07.480
including one on the Python memory deep dive talk


00:15:07.480 --> 00:15:08.300
that I gave.


00:15:08.300 --> 00:15:10.300
So if people wanna check that out, they can.


00:15:10.300 --> 00:15:11.140
Let's see.


00:15:11.140 --> 00:15:12.320
Oh, this one.


00:15:12.320 --> 00:15:13.160
Check this out, Brian.


00:15:13.160 --> 00:15:13.980
Have you seen this?


00:15:13.980 --> 00:15:15.980
Did you know you can pip install Python bytes?


00:15:15.980 --> 00:15:16.480
Yeah.


00:15:16.480 --> 00:15:17.980
[laughs]


00:15:17.980 --> 00:15:21.980
You can literally pip install Python bytes because of...


00:15:21.980 --> 00:15:25.480
Scott Stoltzman created this for us as a joke.


00:15:25.480 --> 00:15:26.980
He was listening to one of our episodes.


00:15:26.980 --> 00:15:28.480
I can't remember what we talked about.


00:15:28.480 --> 00:15:33.480
This was episode 239, but we must have talked about packaging and pip and things like that.


00:15:33.480 --> 00:15:35.980
So he created a package called Python bytes.


00:15:35.980 --> 00:15:39.980
And what it does is basically you give it a number like 240


00:15:39.980 --> 00:15:42.660
and it would download this version as an MP3 file


00:15:42.660 --> 00:15:45.220
and put it right next to whatever the working directory is.


00:15:45.220 --> 00:15:47.980
If you want to install Python Bytes and then


00:15:47.980 --> 00:15:52.260
Python Bytes.downloadEpisode instead of using a podcast player,


00:15:52.260 --> 00:15:54.020
we're all for that, you can check that out.


00:15:54.020 --> 00:15:55.740
Yeah, that's it. That's extra, extra,


00:15:55.740 --> 00:15:58.140
extra, extra, well, many, many extras.


00:15:58.140 --> 00:16:01.540
>> The Python Bytes package was for fun,


00:16:01.540 --> 00:16:04.820
but it also is really small.


00:16:04.820 --> 00:16:07.420
One of the things I like about it is it's just


00:16:07.420 --> 00:16:10.260
a really cool example of like with Python,


00:16:10.260 --> 00:16:13.220
you got something that downloads MP3 files


00:16:13.220 --> 00:16:15.260
off of a feed somewhere.


00:16:15.260 --> 00:16:16.080
It's that easy.


00:16:16.080 --> 00:16:17.940
It's just, that's pretty cool.


00:16:17.940 --> 00:16:18.860
- Yeah, that's fantastic.


00:16:18.860 --> 00:16:19.900
Absolutely. - Absolutely.


00:16:19.900 --> 00:16:21.340
- All right, let's see.


00:16:21.340 --> 00:16:23.160
A couple of things from the live stream.


00:16:23.160 --> 00:16:25.220
Sam says, "Things have happened with Mozilla


00:16:25.220 --> 00:16:26.300
"the last two years that really shook


00:16:26.300 --> 00:16:27.420
"my confidence with them."


00:16:27.420 --> 00:16:29.300
I am still a big fan of Firefox


00:16:29.300 --> 00:16:30.620
and I support their mission,


00:16:30.620 --> 00:16:33.860
but yeah, I wanna see them succeed.


00:16:33.860 --> 00:16:34.900
Let's see.


00:16:34.900 --> 00:16:36.100
Another one from the live stream.


00:16:36.100 --> 00:16:38.420
Antonio said, "Hey guys, have you mentioned Kivi before?"


00:16:38.420 --> 00:16:40.500
Hey, GUIs and Kivi, there you go.


00:16:40.500 --> 00:16:42.140
I watched a video about it this week.


00:16:42.140 --> 00:16:44.540
It's a GUI that's compatible with many things,


00:16:44.540 --> 00:16:45.900
including the mobile devices.


00:16:45.900 --> 00:16:49.300
I do, my feeling is that Kivi is a lot about,


00:16:49.300 --> 00:16:52.940
it's more about building almost game-like interactions,


00:16:52.940 --> 00:16:54.780
whereas a lot of GUIs people want,


00:16:54.780 --> 00:16:56.220
they want like, here's a text box.


00:16:56.220 --> 00:16:59.140
I type in the text box, here's a button I drop in.


00:16:59.140 --> 00:17:00.380
But yeah, pretty cool.


00:17:00.380 --> 00:17:01.540
Well, let's see.


00:17:01.540 --> 00:17:03.620
Kim Fenwick says, "As an aside,


00:17:03.620 --> 00:17:06.280
shipping a Docker image won't obfuscate the Python.


00:17:06.280 --> 00:17:08.480
The image can be taken apart and files like that.


00:17:08.480 --> 00:17:09.200
That's true.


00:17:09.200 --> 00:17:10.400
They absolutely can.


00:17:10.400 --> 00:17:12.180
I was just thinking like, you're probably just running


00:17:12.180 --> 00:17:14.480
on like a container service, but yeah, if you're shipping it to


00:17:14.480 --> 00:17:18.240
someone, it's the same Nick Harvey on the live stream says, could just


00:17:18.240 --> 00:17:21.560
send the PYC files with no, PY.


00:17:21.560 --> 00:17:24.000
It's not foolproof, but it does require more work.


00:17:24.000 --> 00:17:24.280
You're right.


00:17:24.280 --> 00:17:28.640
You'd basically be down to like this.dis and like reading the bytecode.


00:17:28.640 --> 00:17:29.960
Yeah, for sure.


00:17:29.960 --> 00:17:31.080
Uh, let's see.


00:17:31.320 --> 00:17:33.560
- Final one, Rayhan says,


00:17:33.560 --> 00:17:35.200
if it ends up running code on your machine,


00:17:35.200 --> 00:17:36.040
you can read it.


00:17:36.040 --> 00:17:38.280
It's about putting enough barriers that people won't bother.


00:17:38.280 --> 00:17:39.660
Yeah, that's definitely true.


00:17:39.660 --> 00:17:41.720
I mean, you think of C++ and things like that


00:17:41.720 --> 00:17:42.920
being completely opaque


00:17:42.920 --> 00:17:44.840
and yet people take that apart all the time.


00:17:44.840 --> 00:17:46.240
But there is also a difference from,


00:17:46.240 --> 00:17:48.680
I'm literally shipping you the source files here,


00:17:48.680 --> 00:17:51.680
to, you know, 'cause then you could go in like,


00:17:51.680 --> 00:17:53.200
oh, here's where the license check is.


00:17:53.200 --> 00:17:55.880
Let's just, you know, command slash comment that out.


00:17:55.880 --> 00:17:57.240
All right, now we're ready to run.


00:17:57.240 --> 00:17:58.080
- Yeah.


00:17:58.080 --> 00:17:59.600
- Right, you wanna make it a little bit of a challenge


00:17:59.600 --> 00:18:00.760
at least, I suspect.


00:18:00.760 --> 00:18:02.760
Anyway, thanks for all the feedback out there, everyone.


00:18:02.760 --> 00:18:06.360
Um, that's the everything extra, extra nine times.


00:18:06.360 --> 00:18:08.640
All right, Chris, what's your first one here?


00:18:08.640 --> 00:18:13.600
All right. So the first one is from Andreas Kahns,


00:18:13.600 --> 00:18:15.240
I think is how you pronounce it.


00:18:15.240 --> 00:18:18.520
And it's a library called Klib, I believe.


00:18:18.520 --> 00:18:20.520
I wasn't sure if it's K-lib or Klib,


00:18:20.520 --> 00:18:21.520
but I think it's Klib.


00:18:21.520 --> 00:18:26.320
And it's for automated cleaning of pandas data frames.


00:18:26.320 --> 00:18:28.320
I guess I should even say it's a little bit more


00:18:28.320 --> 00:18:30.720
than just cleaning, it's automated analysis.


00:18:30.720 --> 00:18:35.000
And I'll be the first to say I'm a little skeptical


00:18:35.000 --> 00:18:38.060
about some things that try and automate the process,


00:18:38.060 --> 00:18:39.300
but I was playing around with it.


00:18:39.300 --> 00:18:42.900
And there's some pretty cool things that it does.


00:18:42.900 --> 00:18:46.060
The documentation, probably the best way to learn about it


00:18:46.060 --> 00:18:50.900
is the Towards Data Science article that he wrote,


00:18:50.900 --> 00:18:54.200
which gives a pretty nice overview of what it does.


00:18:54.200 --> 00:18:56.340
It has some, as I mentioned,


00:18:56.340 --> 00:18:59.100
some pretty nice cleaning features,


00:18:59.100 --> 00:19:01.180
as well as analysis features.


00:19:01.180 --> 00:19:05.340
So I was going to kind of go through a couple of the,


00:19:05.340 --> 00:19:07.980
describe a couple of things.


00:19:07.980 --> 00:19:11.260
The first one that I thought was really interesting is


00:19:11.260 --> 00:19:15.260
there's this function called data cleaning


00:19:15.260 --> 00:19:18.620
and it essentially does, you can control what it does.


00:19:18.620 --> 00:19:20.260
So it can clean the column names,


00:19:20.260 --> 00:19:23.240
it can convert data types, it can drop missing.


00:19:23.240 --> 00:19:27.980
So one of the things that Pandas does is


00:19:27.980 --> 00:19:32.980
It's not really aggressive about the data types that it uses.


00:19:32.980 --> 00:19:34.380
So when you read in data,


00:19:34.380 --> 00:19:37.580
it will just kind of assign it maybe to a float


00:19:37.580 --> 00:19:40.400
or an object.


00:19:40.400 --> 00:19:42.660
But if you want, you can get in there.


00:19:42.660 --> 00:19:45.260
And if it's a value, if it's a column,


00:19:45.260 --> 00:19:49.300
let's say that it has only values from less than 100,


00:19:49.300 --> 00:19:52.180
if you convert it to an integer, it saves memory.


00:19:52.180 --> 00:19:53.420
If you save enough memory,


00:19:53.420 --> 00:19:55.340
then you can actually speed up your code.


00:19:55.340 --> 00:19:57.020
And so this goes behind the scenes


00:19:57.020 --> 00:20:00.100
and takes your data frame and converts it essentially


00:20:00.100 --> 00:20:05.020
to the smallest value, NumPy value that it can store.


00:20:05.020 --> 00:20:08.300
And then, you know, I took a random dataset


00:20:08.300 --> 00:20:12.020
and sure enough, it did reduce the memory footprint


00:20:12.020 --> 00:20:14.140
quite a bit, which I thought was pretty interesting


00:20:14.140 --> 00:20:16.820
'cause it's one of those things that is very tedious


00:20:16.820 --> 00:20:18.900
to do on your own by hand.


00:20:18.900 --> 00:20:20.820
- Does it do, like if you have the same string,


00:20:20.820 --> 00:20:22.900
does it just create a pointer to one copy


00:20:22.900 --> 00:20:24.980
instead of having that many times, stuff like that?


00:20:24.980 --> 00:20:28.540
- It can do that by converting it to a category type.


00:20:28.540 --> 00:20:30.260
That's essentially what Pandas is doing


00:20:30.260 --> 00:20:31.420
when you create a category,


00:20:31.420 --> 00:20:36.420
it does that to kind of string to like a list conversion.


00:20:36.420 --> 00:20:38.940
And it's pretty effective.


00:20:38.940 --> 00:20:42.380
And yeah, I've used the category piece before,


00:20:42.380 --> 00:20:45.740
but I haven't actually gone in and tried to shorten up


00:20:45.740 --> 00:20:49.940
the numeric columns, which is really useful.


00:20:49.940 --> 00:20:50.780
The other thing-- - Can you just convert them


00:20:50.780 --> 00:20:52.900
to all the integers and then it'll just be shorter


00:20:52.900 --> 00:20:54.620
so you don't have to worry about the size?


00:20:54.620 --> 00:20:55.460
I'm just teasing.


00:20:55.460 --> 00:20:56.300
- Yeah, yeah.


00:20:56.300 --> 00:20:57.120
- You probably knew that.


00:20:57.120 --> 00:20:57.960
- Yeah, yeah.


00:20:57.960 --> 00:20:59.160
No, no.


00:20:59.160 --> 00:21:00.580
But I mean, it does even do,


00:21:00.580 --> 00:21:04.200
it's like, it can do even like int 16s or int 32s or--


00:21:04.200 --> 00:21:05.040
- Oh yeah, interesting.


00:21:05.040 --> 00:21:06.880
Like it'll shrink to the size that'll like,


00:21:06.880 --> 00:21:10.320
oh, these are all under 256, so we'll go to like one byte.


00:21:10.320 --> 00:21:12.160
- Exactly, exactly.


00:21:12.160 --> 00:21:13.820
You know, and I haven't looked at the code to see,


00:21:13.820 --> 00:21:15.560
you know, how it actually figures it out,


00:21:15.560 --> 00:21:17.360
but I had a fairly large data frame


00:21:17.360 --> 00:21:19.860
and it was pretty quick.


00:21:19.860 --> 00:21:21.320
The other one that was interesting


00:21:21.320 --> 00:21:22.880
is the clean column names.


00:21:22.880 --> 00:21:24.760
So I think there are some other libraries out there


00:21:24.760 --> 00:21:27.320
that will like strip spaces


00:21:27.320 --> 00:21:29.520
or special characters from column names.


00:21:29.520 --> 00:21:32.380
But what this one will actually do is actually,


00:21:32.380 --> 00:21:35.440
if you have a column name that has, let's say camel case,


00:21:35.440 --> 00:21:38.360
it'll convert it to all underscore,


00:21:38.360 --> 00:21:41.640
or it will just essentially normalize


00:21:41.640 --> 00:21:43.480
all of your column names,


00:21:43.480 --> 00:21:46.560
which you could have a debate


00:21:46.560 --> 00:21:47.840
about whether you wanna do that.


00:21:47.840 --> 00:21:51.080
But when you have a data frame that has a lot of columns


00:21:51.080 --> 00:21:52.840
and you're just looking at it the first time,


00:21:52.840 --> 00:21:54.480
that can really be helpful.


00:21:54.480 --> 00:21:57.480
And then the other function that it does


00:21:57.480 --> 00:22:02.480
that works pretty well is for cleaning duplicate data


00:22:02.480 --> 00:22:04.760
or empty data.


00:22:04.760 --> 00:22:08.880
So if you have a lot of columns that have no values in it


00:22:08.880 --> 00:22:12.300
or just maybe 90% of the values are empty,


00:22:12.300 --> 00:22:15.800
you can set thresholds and just clean that all out.


00:22:15.800 --> 00:22:19.300
So I was playing around with it and I was pretty impressed


00:22:19.300 --> 00:22:21.080
and I kind of wanted to call it out


00:22:21.080 --> 00:22:24.640
because the documentation right now


00:22:24.640 --> 00:22:29.640
is mostly around the Jupyter notebooks that he has.


00:22:29.640 --> 00:22:34.900
So I think it would be nice if we could get some more docs


00:22:34.900 --> 00:22:36.520
in there and some more examples.


00:22:36.520 --> 00:22:40.260
But overall, I was really impressed with the library


00:22:40.260 --> 00:22:42.940
and I think people should kind of take a look at it


00:22:42.940 --> 00:22:45.420
and see if it's something they wanna use


00:22:45.420 --> 00:22:47.960
for some of their own processes.


00:22:47.960 --> 00:22:50.520
- Yeah, some of them sound interesting,


00:22:50.520 --> 00:22:52.120
even if you don't have to trust it, right?


00:22:52.120 --> 00:22:55.160
Like the shrink the smallest data set,


00:22:55.160 --> 00:22:58.120
data type, for example, or normalized column names,


00:22:58.120 --> 00:23:00.360
those don't seem as risky as, you know,


00:23:00.360 --> 00:23:03.400
clean it up, find the wrong data.


00:23:03.400 --> 00:23:05.560
- Exactly, and then I forgot to mention,


00:23:05.560 --> 00:23:08.960
it also has some nice correlation plots.


00:23:08.960 --> 00:23:10.920
And some of these things you can already do


00:23:10.920 --> 00:23:13.200
with Seaborn or Matplotlib,


00:23:13.200 --> 00:23:15.800
but I found that it gives you a little more control


00:23:15.800 --> 00:23:18.360
and it's just a little bit easier to do it.


00:23:18.360 --> 00:23:20.400
There are certainly other tools out there


00:23:20.400 --> 00:23:22.480
that do this as well.


00:23:22.480 --> 00:23:26.840
Oh, and then the categorical data plots,


00:23:26.840 --> 00:23:31.240
I thought was a nice summary of the data


00:23:31.240 --> 00:23:32.800
and gives you some nice graphs


00:23:32.800 --> 00:23:34.120
and it helps you understand


00:23:34.120 --> 00:23:35.840
where you've got some missing values.


00:23:35.840 --> 00:23:36.680
But yeah.


00:23:36.680 --> 00:23:38.000
- Yeah, visualizing the missing data


00:23:38.000 --> 00:23:39.640
is a really interesting feature.


00:23:39.640 --> 00:23:41.900
- Yeah, and there is another pandas data frame


00:23:41.900 --> 00:23:44.960
called missing no that does this and does it well.


00:23:44.960 --> 00:23:47.280
But I think this is a unique combination,


00:23:47.280 --> 00:23:50.520
especially some of the data,


00:23:50.520 --> 00:23:54.080
the memory saving features that it has are pretty neat.


00:23:54.080 --> 00:23:56.660
>> The cleaning features though,


00:23:56.660 --> 00:23:58.600
there's a lot of parameters to it.


00:23:58.600 --> 00:24:01.120
It looks like you have a lot of control.


00:24:01.120 --> 00:24:04.200
Again, this is open source,


00:24:04.200 --> 00:24:05.760
so it isn't that magical.


00:24:05.760 --> 00:24:08.600
You can just look at the source and see what it's doing.


00:24:08.600 --> 00:24:12.520
>> Exactly. Yeah. That was one of the things I was looking at is


00:24:12.520 --> 00:24:15.040
data cleaning I think is the top level and you


00:24:15.040 --> 00:24:17.520
can just run that wide open and it'll do everything.


00:24:17.520 --> 00:24:19.800
And it actually prints out a pretty nice summary


00:24:19.800 --> 00:24:22.500
of what it does, but you can also go in there


00:24:22.500 --> 00:24:26.160
and specify parameters, like you said, to control it


00:24:26.160 --> 00:24:28.580
so that maybe it doesn't rename the columns


00:24:28.580 --> 00:24:31.240
or drop some of the missing data.


00:24:31.240 --> 00:24:33.900
The other thing that I tried to play with


00:24:33.900 --> 00:24:35.080
that seemed really interesting


00:24:35.080 --> 00:24:37.800
is this pool duplicate subsets.


00:24:37.800 --> 00:24:40.480
And essentially what it tries to do,


00:24:40.480 --> 00:24:43.640
and I had a little bit of trouble with this


00:24:43.640 --> 00:24:45.520
'cause I think I put too much data at it,


00:24:45.520 --> 00:24:49.860
but it tries to, maybe if you have 10 columns of data,


00:24:49.860 --> 00:24:51.080
it says, well, you know what,


00:24:51.080 --> 00:24:53.540
four or five of them are very heavily correlated,


00:24:53.540 --> 00:24:57.560
so we're gonna drop them and just give you the four or five


00:24:57.560 --> 00:24:59.340
that are actually most useful.


00:24:59.340 --> 00:25:02.520
And so I think that's some interesting tools to use


00:25:02.520 --> 00:25:04.220
when you get some data


00:25:04.220 --> 00:25:05.920
that maybe you haven't worked with before.


00:25:05.920 --> 00:25:08.080
- Yeah. - Yeah, very nice.


00:25:08.080 --> 00:25:08.920
What a good find.


00:25:08.920 --> 00:25:10.080
And Brian, you got the next one?


00:25:10.080 --> 00:25:12.260
- Sure, yeah, just a second.


00:25:13.220 --> 00:25:16.900
I wanted to remind people to every once in a while,


00:25:16.900 --> 00:25:21.820
look at FuncTools because I've experienced


00:25:21.820 --> 00:25:28.220
FuncTools as an interesting library that's built in.


00:25:28.220 --> 00:25:30.540
It grows with you.


00:25:30.540 --> 00:25:33.140
If you're new to Python and you look at it,


00:25:33.140 --> 00:25:34.740
it's going to be confusing.


00:25:34.740 --> 00:25:37.580
It's like all intermediate stuff in there.


00:25:37.580 --> 00:25:43.200
But as you learn and experience more Python programming,


00:25:43.200 --> 00:25:45.640
come back to it every once in a while because there's stuff in


00:25:45.640 --> 00:25:49.400
there that you'll use that you didn't think about before.


00:25:49.400 --> 00:25:51.640
I'm going to go through a few things.


00:25:51.640 --> 00:25:53.400
Actually, I wanted to call out,


00:25:53.400 --> 00:25:56.600
there was an article by Martin Hines that I


00:25:56.600 --> 00:25:59.760
read that reminded me to go through and look this.


00:25:59.760 --> 00:26:02.080
So I want to shout out to him. Thanks.


00:26:02.080 --> 00:26:04.360
We've talked about some of this stuff before.


00:26:04.360 --> 00:26:08.720
we talked about function overloading and using


00:26:08.720 --> 00:26:10.860
single dispatch as one of


00:26:10.860 --> 00:26:13.600
the ways you can do function overloading in Python,


00:26:13.600 --> 00:26:15.880
which is cool, and that's part of FuncTools.


00:26:15.880 --> 00:26:19.080
Hopefully, people are familiar with wraps.


00:26:19.080 --> 00:26:21.720
Wraps is a way to create


00:26:21.720 --> 00:26:25.560
decorators that act like the thing that you decorated.


00:26:25.560 --> 00:26:27.600
If you're writing decorators,


00:26:27.600 --> 00:26:29.560
make sure you check out wraps.


00:26:29.560 --> 00:26:33.840
Then caching as well, I'm sure we've talked about LRU cache.


00:26:33.840 --> 00:26:35.260
>> I'm sure we have, yeah.


00:26:35.260 --> 00:26:39.720
>> Yeah. That's in FuncTools, the caching.


00:26:39.720 --> 00:26:44.400
New in 3.9, there's just a simple cache.


00:26:44.400 --> 00:26:46.200
You don't have to say LRU cache.


00:26:46.200 --> 00:26:49.400
It's just a convenience wrapper around LRU cache,


00:26:49.400 --> 00:26:52.560
but there's no max size.


00:26:52.560 --> 00:26:54.720
You don't want to do that for things that you


00:26:54.720 --> 00:26:57.120
actually want to throw items away.


00:26:57.120 --> 00:27:01.280
But caching is super cool. Check that out.


00:27:01.280 --> 00:27:03.800
>> When I first saw the LRU cache, I'm like, "Whoa,


00:27:03.800 --> 00:27:07.380
I got to go figure out what this LRU is and it's not like rather than just like,


00:27:07.380 --> 00:27:08.920
cache the response.


00:27:08.920 --> 00:27:11.460
I guess the other question though you might be is like,


00:27:11.460 --> 00:27:14.820
well, what if you pass two variable or two arguments or sets of arguments?


00:27:14.820 --> 00:27:16.600
How did those? Yeah. So either way,


00:27:16.600 --> 00:27:19.360
it's not 100 percent totally obvious what's going to happen.


00:27:19.360 --> 00:27:20.220
Yeah, it's very cool.


00:27:20.220 --> 00:27:24.440
>> Yeah. So there's a bunch of caching stuff in there like the LRU cache,


00:27:24.440 --> 00:27:26.420
but then you can also cache a property.


00:27:26.420 --> 00:27:29.680
Actually, the property one I hadn't used before,


00:27:29.680 --> 00:27:33.400
but I was playing with it this morning and it's really cool.


00:27:33.400 --> 00:27:40.480
For instance, if you've got a data class or any class that has a bunch of stuff,


00:27:40.480 --> 00:27:47.480
and you have an expensive read on one of those because you have to calculate the value,


00:27:47.480 --> 00:27:54.160
you can throw a cache property on it and it looks pretty cool.


00:27:54.160 --> 00:27:56.880
One of the neat things about it is,


00:27:56.880 --> 00:28:01.040
it only reads it once and then it caches the value of the property.


00:28:01.040 --> 00:28:03.440
If you need it to refresh,


00:28:03.440 --> 00:28:04.880
you called delete on it,


00:28:04.880 --> 00:28:08.560
which is weird but cool also.


00:28:08.560 --> 00:28:10.800
But it's odd to call delete on


00:28:10.800 --> 00:28:13.040
something that you want to still be there,


00:28:13.040 --> 00:28:14.800
and it'll just reread it next time.


00:28:14.800 --> 00:28:15.880
That's how that works.


00:28:15.880 --> 00:28:18.320
>> That is weird. That's definitely weird.


00:28:18.320 --> 00:28:21.760
>> Total ordering, I didn't realize was there.


00:28:21.760 --> 00:28:28.120
If you have some data type that you want to be able to compare,


00:28:28.120 --> 00:28:29.920
you can use total ordering to define


00:28:29.920 --> 00:28:31.760
equal and one other operator,


00:28:31.760 --> 00:28:35.440
and then you get all of the comparison operators show up.


00:28:35.440 --> 00:28:39.200
You can use that. Then the last one I wanted to highlight


00:28:39.200 --> 00:28:42.140
is partial and partial method,


00:28:42.140 --> 00:28:44.760
which these are neat in that,


00:28:44.760 --> 00:28:50.620
let's say you've got a function that takes a whole bunch of arguments,


00:28:50.620 --> 00:28:54.140
but you want to pre-fill some of those in and create


00:28:54.140 --> 00:28:57.780
a new function that has some of the arguments pre-filled in.


00:28:57.780 --> 00:29:00.780
that's a, you can do that with this and pretty neat.


00:29:00.780 --> 00:29:02.180
>> Yeah. Okay.


00:29:02.180 --> 00:29:03.820
Interesting. I see you partially supply


00:29:03.820 --> 00:29:05.660
some of the arguments but not all of them.


00:29:05.660 --> 00:29:09.820
>> Yeah. Just a shout out to this,


00:29:09.820 --> 00:29:12.860
that these are intermediate or advanced topics,


00:29:12.860 --> 00:29:17.700
but as you learn more Python,


00:29:17.700 --> 00:29:22.140
come back to this every once in a while and you might find it useful.


00:29:22.140 --> 00:29:27.100
>> Yeah. Indeed. How did I miss this hashed property thing?


00:29:27.100 --> 00:29:29.640
Like surely I would have paid attention to that because what


00:29:29.640 --> 00:29:32.480
so often these properties that are like computed things, but they


00:29:32.480 --> 00:29:33.880
you know, often don't change.


00:29:33.880 --> 00:29:35.980
You get something back from the database, you want to


00:29:35.980 --> 00:29:38.820
it has time sorted in seconds, you want to know how many days it is


00:29:38.820 --> 00:29:41.080
so something happens, you might have a days property, right?


00:29:41.080 --> 00:29:41.980
But that's probably not good.


00:29:41.980 --> 00:29:43.980
So having that cache is cool


00:29:43.980 --> 00:29:45.480
if you're sure it's not going to change.


00:29:45.480 --> 00:29:46.760
But I'm like, how did I miss it?


00:29:46.760 --> 00:29:47.720
It's new in 3.8.


00:29:47.720 --> 00:29:49.720
So it's not it's not super old.


00:29:49.720 --> 00:29:54.060
And like Chris said, one of the reasons to revisit a lot of the


00:29:54.060 --> 00:29:56.760
these things and pay attention to the news on Python


00:29:56.760 --> 00:29:59.520
is because the language changes like this.


00:29:59.520 --> 00:30:02.160
>> Yeah, for sure. Kim out there in live stream says,


00:30:02.160 --> 00:30:05.080
"Also worth looking at inner tools from time to time."


00:30:05.080 --> 00:30:05.840
>> Definitely.


00:30:05.840 --> 00:30:06.240
>> Great.


00:30:06.240 --> 00:30:10.120
>> Indeed. It's in the same level of complexity, but for collection.


00:30:10.120 --> 00:30:11.880
It's like that. You wouldn't first go there,


00:30:11.880 --> 00:30:12.880
but eventually like, "Oh yeah,


00:30:12.880 --> 00:30:14.680
this is what I wanted. I just didn't know it."


00:30:14.680 --> 00:30:16.640
Speaking of things you didn't know it,


00:30:16.640 --> 00:30:18.240
let me scare you all a little,


00:30:18.240 --> 00:30:19.400
make you all delighted. I don't know.


00:30:19.400 --> 00:30:20.600
You tell me how you take to this.


00:30:20.600 --> 00:30:22.700
So let me set the stage.


00:30:22.700 --> 00:30:25.000
GitHub has a little bit of source code.


00:30:25.000 --> 00:30:26.920
much of it actually public, right?


00:30:26.920 --> 00:30:29.960
Like it's public repos and whatnot.


00:30:29.960 --> 00:30:32.600
So it can be analyzed and talked about and shared


00:30:32.600 --> 00:30:34.900
or used to train an artificial intelligence,


00:30:34.900 --> 00:30:36.080
which is pretty crazy.


00:30:36.080 --> 00:30:38.600
And if you look at the artificial intelligence around text,


00:30:38.600 --> 00:30:40.340
there's the GPT-3 stuff,


00:30:40.340 --> 00:30:43.700
which is like scary, good text-based AI.


00:30:43.700 --> 00:30:45.960
Well, they decided, what if, you know,


00:30:45.960 --> 00:30:48.980
our parent company also makes this editor?


00:30:48.980 --> 00:30:52.960
What if we did an AI based on understanding the source code


00:30:52.960 --> 00:30:55.760
from GitHub, like all the source code from GitHub


00:30:55.760 --> 00:30:59.000
and put it into VS Code and then it did stuff.


00:30:59.000 --> 00:30:59.920
Have you all seen this?


00:30:59.920 --> 00:31:01.320
It's called GitHub Copilot.


00:31:01.320 --> 00:31:02.160
- Yeah.


00:31:02.160 --> 00:31:03.000
- Yeah. - Yeah.


00:31:03.000 --> 00:31:04.200
- I haven't tried it yet.


00:31:04.200 --> 00:31:06.760
- I was gonna put the link in there and you beat me to it.


00:31:06.760 --> 00:31:08.880
- Oh yeah, I was on top of it.


00:31:08.880 --> 00:31:09.720
So if you go over here,


00:31:09.720 --> 00:31:13.680
there actually works for TypeScript, Go, Ruby, Python,


00:31:13.680 --> 00:31:15.200
a couple other languages.


00:31:15.200 --> 00:31:16.880
It says it works for many languages,


00:31:16.880 --> 00:31:18.920
but it's best on those, of course.


00:31:18.920 --> 00:31:21.360
But if you just look like at their homepage,


00:31:21.360 --> 00:31:23.440
the copilot.github.com,


00:31:23.440 --> 00:31:25.840
they've got this little animation and it says,


00:31:25.840 --> 00:31:28.040
I'm gonna write a function that says parse expenses


00:31:28.040 --> 00:31:29.400
and it takes some kind of text.


00:31:29.400 --> 00:31:32.560
And you put a doc string, literally a doc string in Python.


00:31:32.560 --> 00:31:34.200
It says parse the list of expenses


00:31:34.200 --> 00:31:37.840
and return the list of tuples, date, value, currency,


00:31:37.840 --> 00:31:40.800
ignore lines starting with hash, parse using date time.


00:31:40.800 --> 00:31:42.840
Here's some examples, tab.


00:31:42.840 --> 00:31:46.440
And then it writes the code that does that.


00:31:46.440 --> 00:31:48.520
And let's see, what is it gonna do?


00:31:48.520 --> 00:31:50.400
It says, it's in the middle of animation,


00:31:50.400 --> 00:31:52.240
It creates a list of expenses,


00:31:52.240 --> 00:31:54.240
it goes through each line on split.


00:31:54.240 --> 00:31:55.960
It says if the line starts with hash,


00:31:55.960 --> 00:31:57.520
this is all Python code,


00:31:57.520 --> 00:31:58.600
continue on your loop.


00:31:58.600 --> 00:32:01.440
Otherwise, date value currency equals split it,


00:32:01.440 --> 00:32:04.080
and then it knows how to parse the date line,


00:32:04.080 --> 00:32:06.080
convert the value to a float,


00:32:06.080 --> 00:32:08.220
and then store the currency as a string.


00:32:08.220 --> 00:32:10.040
And it's not just that sometimes it'll do this,


00:32:10.040 --> 00:32:12.560
you can actually get alternate implementations


00:32:12.560 --> 00:32:16.140
by tabbing through its recommended solution,


00:32:16.140 --> 00:32:17.560
which is pretty crazy.


00:32:17.560 --> 00:32:21.060
So this is powered by open AIs,


00:32:21.060 --> 00:32:24.300
it's called Codec or something like that.


00:32:24.300 --> 00:32:25.780
I don't see it right here right now.


00:32:25.780 --> 00:32:27.500
Anyway, I'll probably run across it in a second.


00:32:27.500 --> 00:32:28.800
That's what it's powered by.


00:32:28.800 --> 00:32:31.460
It says things like, "You're the pilot.


00:32:31.460 --> 00:32:33.780
So with GitHub Copilot, you're always in charge.


00:32:33.780 --> 00:32:37.820
You can cycle through alternative suggestions and choose which to accept or


00:32:37.820 --> 00:32:40.880
reject and then manually edit the suggested code."


00:32:40.880 --> 00:32:42.680
Oh yeah, and it learns from you.


00:32:42.680 --> 00:32:45.820
So I don't know, this is wild.


00:32:45.820 --> 00:32:47.500
This is pretty wild stuff here.


00:32:47.500 --> 00:32:48.500
What do you think?


00:32:48.500 --> 00:32:51.660
- I think it's really impressive.


00:32:51.660 --> 00:32:54.500
I mean, it will be interesting to see what it's like


00:32:54.500 --> 00:32:56.100
when you use it in real life.


00:32:56.100 --> 00:32:59.980
And I think that there could certainly be limitations,


00:32:59.980 --> 00:33:02.180
but I don't know about you,


00:33:02.180 --> 00:33:03.900
but whenever I'm programming,


00:33:03.900 --> 00:33:06.140
there's always these things I just need to go


00:33:06.140 --> 00:33:07.660
and look at the documentation


00:33:07.660 --> 00:33:09.660
or look at stack overflow to refresh my memory.


00:33:09.660 --> 00:33:11.140
- Like I gotta connect to SQLAlchemy


00:33:11.140 --> 00:33:13.300
and I totally forgot how to do those three steps


00:33:13.300 --> 00:33:15.620
for that connection string sequence, right?


00:33:15.620 --> 00:33:37.620
Exactly yeah and i've seen i saw on twitter where someone was throwing a little shade at that example you're walking through because i said well why are you storing the currency is a float should be a decimal because of the store currency is a float you're gonna have all the rounding issues so well that's how superman makes all his money or the evil villain in superman what was it one of the yes


00:33:37.520 --> 00:33:41.680
Yeah, Richard Pryor and one of the original Superman.


00:33:41.680 --> 00:33:42.680
Yeah.


00:33:42.680 --> 00:33:43.680
Yeah.


00:33:43.680 --> 00:33:46.120
And it's not just based on the doc string.


00:33:46.120 --> 00:33:51.280
Like the example I first spoke about was you wrote complex doc string and then say do that


00:33:51.280 --> 00:33:55.380
thing but you can do it based just on function name.


00:33:55.380 --> 00:33:57.760
You can just type a meaningful function name.


00:33:57.760 --> 00:34:00.440
What was the example they used?


00:34:00.440 --> 00:34:01.440
I can't remember.


00:34:01.440 --> 00:34:06.560
But yeah, so you basically just write a doc string, a comment, a function name, or even


00:34:06.560 --> 00:34:09.200
and some code to give them like more context to it,


00:34:09.200 --> 00:34:10.400
and then off it goes.


00:34:10.400 --> 00:34:11.600
So yeah, pretty neat.


00:34:11.600 --> 00:34:14.880
Codex, that's the name of the AI system behind it.


00:34:14.880 --> 00:34:18.760
So basically this is a plugin for VS Code,


00:34:18.760 --> 00:34:19.580
but a really nice one.


00:34:19.580 --> 00:34:21.440
So here's some examples we'll all be familiar with.


00:34:21.440 --> 00:34:22.620
So fetch tweets.


00:34:22.620 --> 00:34:25.760
And the example here is you literally write


00:34:25.760 --> 00:34:30.120
def fetch_tweets_from_user tab.


00:34:30.120 --> 00:34:31.880
And then what it auto completes with is,


00:34:31.880 --> 00:34:33.320
oh, you're gonna need to pass the username in,


00:34:33.320 --> 00:34:36.200
and then here's how you authorize with Tweepy,


00:34:36.200 --> 00:34:37.920
set up the API credentials,


00:34:37.920 --> 00:34:39.480
and then here's the code you write.


00:34:39.480 --> 00:34:41.280
Oh yeah, and here's your return.


00:34:41.280 --> 00:34:42.820
Or I wanna do a scatter plot,


00:34:42.820 --> 00:34:46.560
and you write import matplotlib.pyplot as plot,


00:34:46.560 --> 00:34:48.480
draw scatter plot have,


00:34:48.480 --> 00:34:49.720
and then boom, there it is.


00:34:49.720 --> 00:34:52.160
Or memoization, I wanted to point this one out


00:34:52.160 --> 00:34:53.240
'cause of what you're covering, Brian.


00:34:53.240 --> 00:34:55.760
It says, oh, here's how you memoize a function,


00:34:55.760 --> 00:34:59.000
which is to, if it's passed a set of arguments,


00:34:59.000 --> 00:35:00.360
it's always gonna return the same answer,


00:35:00.360 --> 00:35:01.760
so just give that answer.


00:35:01.760 --> 00:35:03.960
Like, remember, these arguments equal this return value


00:35:03.960 --> 00:35:04.880
once it's run,


00:35:04.880 --> 00:35:08.200
And it shows how to create a complex decorator


00:35:08.200 --> 00:35:09.760
that is gonna have a function


00:35:09.760 --> 00:35:11.760
that remembers the values using caching.


00:35:11.760 --> 00:35:15.320
It could just go @bunctools.cache.


00:35:15.320 --> 00:35:16.160
You know what I mean?


00:35:16.160 --> 00:35:18.200
So there's things like that that is missing, right?


00:35:18.200 --> 00:35:20.520
'Cause you could achieve the exact same outcome


00:35:20.520 --> 00:35:23.960
with bunctools.cache.decorators, right?


00:35:23.960 --> 00:35:25.280
Instead of trying to write a bunch of code


00:35:25.280 --> 00:35:26.200
that re-implements that.


00:35:26.200 --> 00:35:28.760
But anyway, pretty wild thing.


00:35:28.760 --> 00:35:29.920
I don't know really how to feel about that.


00:35:29.920 --> 00:35:30.840
I've been thinking about this today.


00:35:30.840 --> 00:35:33.240
It's kind of freaking me out, but it's also kind of cool.


00:35:33.240 --> 00:35:35.800
>> Yeah, I wanted to point out a comment that people have been


00:35:35.800 --> 00:35:39.480
pointing out with relation to this is the,


00:35:39.480 --> 00:35:45.840
I wish we could just specify what we wanted the computer to do,


00:35:45.840 --> 00:35:47.760
and it just does it,


00:35:47.760 --> 00:35:50.000
and we already have that, it's called code.


00:35:50.000 --> 00:35:56.200
>> Yeah. People often say things like,


00:35:56.200 --> 00:35:58.440
I remember hearing this 20 years ago.


00:35:58.440 --> 00:36:00.160
This low-code thing where you create


00:36:00.160 --> 00:36:03.200
these little boxes that do stuff and you drag and drop between them,


00:36:03.200 --> 00:36:04.760
We're not going to need programmers anymore.


00:36:04.760 --> 00:36:06.800
We're all just going to become dragger droppies.


00:36:06.800 --> 00:36:08.720
And then like you programmers won't be needed.


00:36:08.720 --> 00:36:11.680
The business people will just drag you, drop you their way the future.


00:36:11.680 --> 00:36:13.900
And that never ever happened.


00:36:13.900 --> 00:36:14.160
Right.


00:36:14.160 --> 00:36:16.020
Because people got to put them in production.


00:36:16.020 --> 00:36:17.000
They've got to debug them.


00:36:17.000 --> 00:36:18.120
They've got to scale them.


00:36:18.120 --> 00:36:19.000
And so on.


00:36:19.000 --> 00:36:20.280
Yeah.


00:36:20.280 --> 00:36:20.700
Yeah.


00:36:20.700 --> 00:36:22.360
I think the same thing here, like sure.


00:36:22.360 --> 00:36:26.920
It wrote it once, but you can't have a right only experience for your code.


00:36:26.920 --> 00:36:30.200
You have to understand your code and be able to evolve your code and work with.


00:36:30.440 --> 00:36:34.180
This might power you into a solution faster,


00:36:34.180 --> 00:36:37.620
but I don't think it escapes the need of people doing meaningful software work.


00:36:37.620 --> 00:36:39.260
>> The person that pointed out,


00:36:39.260 --> 00:36:43.300
and several people pointed out the example of using money,


00:36:43.300 --> 00:36:44.880
of floats and money,


00:36:44.880 --> 00:36:48.100
that does highlight one of the problems with something like this though,


00:36:48.100 --> 00:36:50.660
that everybody needs to be careful of is,


00:36:50.660 --> 00:36:52.260
the code that's generated,


00:36:52.260 --> 00:36:58.140
now you were already carefully thinking about it when you were creating it,


00:36:58.140 --> 00:36:59.700
but if something else creates it,


00:36:59.700 --> 00:37:03.860
you've got to scrutinize that to make sure that's really doing the right thing.


00:37:03.860 --> 00:37:09.560
You're code reviewing some AI code while you're coding your own stuff.


00:37:09.560 --> 00:37:11.200
It's just a different part of your brain.


00:37:11.200 --> 00:37:13.280
You got to make sure that you're really paying attention.


00:37:13.280 --> 00:37:17.600
>> Yeah. Even I was looking at that Matplotlib example,


00:37:17.600 --> 00:37:20.100
and I would even argue that's not really the way you should do


00:37:20.100 --> 00:37:23.340
a scatterplot in Matplotlib because you should


00:37:23.340 --> 00:37:26.540
use the object-oriented interface in Matplotlib.


00:37:26.540 --> 00:37:28.020
The code will work,


00:37:28.020 --> 00:37:30.900
but I wouldn't advocate that you use that code.


00:37:30.900 --> 00:37:32.920
So to your point,


00:37:32.920 --> 00:37:38.060
I think it will be interesting to see if it does learn on your own coding style.


00:37:38.060 --> 00:37:41.760
So does it start to recognize those things that you're always,


00:37:41.760 --> 00:37:45.200
like you said, connecting to a database or fetching a file


00:37:45.200 --> 00:37:47.740
or doing a certain pandas function?


00:37:47.740 --> 00:37:50.300
Will it start to learn that?


00:37:50.300 --> 00:37:55.220
>> I thought I read something about it adapting to you and learning from what you're doing,


00:37:55.220 --> 00:37:57.240
but I have no idea what that actually means.


00:37:57.240 --> 00:37:58.840
>> Yeah, hopefully it's paying attention.


00:37:58.840 --> 00:38:03.020
So if it generates something and you change it to the different method,


00:38:03.020 --> 00:38:04.920
and everybody else is doing that also,


00:38:04.920 --> 00:38:09.080
maybe they'll stop suggesting the old one and start suggesting the new one.


00:38:09.080 --> 00:38:12.700
>> Yeah. Chris, your point about having to,


00:38:12.700 --> 00:38:13.840
maybe it's you Brian, sorry.


00:38:13.840 --> 00:38:17.200
Whoever said about you've got to criticize this and you didn't write it,


00:38:17.200 --> 00:38:19.920
so you basically have to study it and then understand or


00:38:19.920 --> 00:38:22.960
understand it and study it to make sure it's doing the right thing.


00:38:22.960 --> 00:38:24.840
I, a couple of years ago,


00:38:24.840 --> 00:38:29.480
I don't know, a while ago I was river floating and broke my hand on some rocks,


00:38:29.480 --> 00:38:33.480
broke my finger in a bunch of places, and like my fingers were completely


00:38:33.480 --> 00:38:35.240
wrapped up all the way to the very tips.


00:38:35.240 --> 00:38:38.360
There was no like, oh, little pecking typing while my hand healed.


00:38:38.360 --> 00:38:41.800
It was like, nope, no one handed, really slow.


00:38:41.800 --> 00:38:45.560
So to keep things going, I used voice to text to try to like


00:38:45.560 --> 00:38:49.040
at least keep email flowing for a month or something, you know?


00:38:49.040 --> 00:38:52.520
And what I found was I could write pretty decent emails.


00:38:52.520 --> 00:38:55.080
It's hard to like stop and think in whole sentences the way the


00:38:55.080 --> 00:38:58.000
little tools like it to work, but you can get it to work pretty well.


00:38:58.000 --> 00:39:02.280
But the mistakes it makes that are phonetically correct, but actually


00:39:02.280 --> 00:39:06.700
what you mean wrong, like they and they, or, or something that sounds


00:39:06.700 --> 00:39:10.640
like what you said, but it's actually not what you mean to say is incredibly


00:39:10.640 --> 00:39:14.120
hard, it's much harder to understand and edit than you would think.


00:39:14.120 --> 00:39:17.440
And so things like this, like, well, I wanted it to do that and I hit tab and


00:39:17.440 --> 00:39:20.920
okay, it's doing, I feel like there's going to be a lot of blind spots.


00:39:20.920 --> 00:39:21.400
Yeah.


00:39:21.400 --> 00:39:24.400
well, it did what it says it did and I typed the thing and it seems right.


00:39:24.400 --> 00:39:26.260
And like, how do you really, really know?


00:39:26.260 --> 00:39:30.700
I, it just seems like in the same type of situation, it's going to be harder than


00:39:30.700 --> 00:39:34.000
normal code to check because you didn't have to think through it to create it.


00:39:34.000 --> 00:39:34.460
You know?


00:39:34.460 --> 00:39:35.320
Yeah.


00:39:35.320 --> 00:39:36.600
A couple of comments from the live stream.


00:39:36.600 --> 00:39:39.420
Um, Ray Han don't, don't give them ideas.


00:39:39.420 --> 00:39:42.400
So, Dr.


00:39:42.400 --> 00:39:48.620
Falcon, gosh, I worry if you in, let's play thermonuclear war as a doc string.


00:39:49.620 --> 00:39:52.580
And Nick says, I can't help but think of Microsoft Tay,


00:39:52.580 --> 00:39:54.380
which Microsoft Tay was this really cool bot


00:39:54.380 --> 00:39:56.420
that was super good at adapting to stuff


00:39:56.420 --> 00:39:57.640
and they put it on Twitter,


00:39:57.640 --> 00:40:01.860
but people decided to be mean to it instead of teach it.


00:40:01.860 --> 00:40:04.500
I think in Japanese Twitter,


00:40:04.500 --> 00:40:06.860
it became a very kind and intelligent bot,


00:40:06.860 --> 00:40:08.400
but on English Twitter,


00:40:08.400 --> 00:40:12.860
it got turned into a racist, horrible creature right away


00:40:12.860 --> 00:40:15.460
and they actually had to cancel the project, so yeah.


00:40:16.780 --> 00:40:21.780
And then Arthur says, "Next April Fool's Day prank,


00:40:21.780 --> 00:40:24.440
everyone start writing terrible code that influences AI."


00:40:24.440 --> 00:40:27.800
And this is why English Day went down the tubes.


00:40:27.800 --> 00:40:30.080
(both laughing)


00:40:30.080 --> 00:40:31.000
Let's see.


00:40:31.000 --> 00:40:32.800
And then Sam, "For goodness sakes,


00:40:32.800 --> 00:40:34.440
don't trade it on GitHub code.


00:40:34.440 --> 00:40:37.320
It'll arbitrarily turn on debug mode."


00:40:37.320 --> 00:40:38.200
Yeah, perhaps.


00:40:38.200 --> 00:40:41.400
Yeah, Kim thinks this is both very impressive


00:40:41.400 --> 00:40:42.440
and vaguely unsettling.


00:40:42.440 --> 00:40:45.120
And that captures what I was thinking.


00:40:45.120 --> 00:40:48.120
- Rayhan, will it go and talk to the marketing people for me?


00:40:48.120 --> 00:40:49.560
(laughing)


00:40:49.560 --> 00:40:52.040
- I'm good with people, that's what I do.


00:40:52.040 --> 00:40:52.880
- Yeah, okay.


00:40:52.880 --> 00:40:54.160
(laughing)


00:40:54.160 --> 00:40:57.400
Another thing that's not mentioned here explicitly,


00:40:57.400 --> 00:40:58.940
but I think is interesting is,


00:40:58.940 --> 00:41:01.480
this code is coming from GitHub, yeah?


00:41:01.480 --> 00:41:03.160
When I go and I'm saying like,


00:41:03.160 --> 00:41:06.440
I'm working on super secret commercial project


00:41:06.440 --> 00:41:09.780
for large organization that has lots of people


00:41:09.780 --> 00:41:13.520
trying to scrutinize it, and I hit memoize tab,


00:41:13.520 --> 00:41:15.100
it's gonna write some amazing code.


00:41:15.100 --> 00:41:16.780
Oh, by the way, was that GPL?


00:41:16.780 --> 00:41:18.060
Where did that code come from?


00:41:18.060 --> 00:41:19.980
Right, like what's the license of the code


00:41:19.980 --> 00:41:21.060
that was on GitHub?


00:41:21.060 --> 00:41:24.820
Did I just now all of a sudden grab something that turned,


00:41:24.820 --> 00:41:26.520
you know, like if I was doing this on Windows


00:41:26.520 --> 00:41:29.040
and I hit tab, is Windows now open source?


00:41:29.040 --> 00:41:29.880
I don't know.


00:41:29.880 --> 00:41:31.020
- That's a really interesting point.


00:41:31.020 --> 00:41:33.580
And you would think if it was a small startup,


00:41:33.580 --> 00:41:35.180
someone will probably sue them,


00:41:35.180 --> 00:41:37.540
but you know, this is Microsoft now.


00:41:37.540 --> 00:41:38.740
- Yeah, exactly.


00:41:38.740 --> 00:41:40.020
Yeah, yeah, yeah.


00:41:40.020 --> 00:41:42.180
Anyway, so I agree with Kim.


00:41:42.180 --> 00:41:43.580
This is both very impressive.


00:41:43.580 --> 00:41:45.920
If this is the start, like where will it go?


00:41:45.920 --> 00:41:46.860
It'd be very amazing,


00:41:46.860 --> 00:41:49.900
but it's also vaguely unsettling at the same time.


00:41:49.900 --> 00:41:51.420
And I don't know how I feel about it,


00:41:51.420 --> 00:41:52.700
other than I wish it was in PyCharm


00:41:52.700 --> 00:41:54.500
so I could play with it more often.


00:41:54.500 --> 00:41:55.980
(laughing)


00:41:55.980 --> 00:41:57.780
All right, Chris, you got the last one?


00:41:57.780 --> 00:41:59.100
- I do.


00:41:59.100 --> 00:42:03.340
So this is another library called Cats,


00:42:03.340 --> 00:42:06.900
and it's a time series analysis library,


00:42:06.900 --> 00:42:10.380
and it's made by the same, well, it's from Facebook.


00:42:10.380 --> 00:42:13.340
And a lot of people may have heard of Profit,


00:42:13.340 --> 00:42:16.540
which is a library for time series forecasting.


00:42:16.540 --> 00:42:19.280
And one of the things that's interesting to me


00:42:19.280 --> 00:42:24.280
about profit and cats is I think time series forecasting


00:42:24.280 --> 00:42:27.660
is something that's really common in the business world.


00:42:27.660 --> 00:42:30.480
I mean, you think about trying to forecast sales


00:42:30.480 --> 00:42:34.860
or maybe inventory movements or stock prices,


00:42:34.860 --> 00:42:37.300
a whole bunch of different use cases for it.


00:42:37.300 --> 00:42:38.980
And I think in general,


00:42:38.980 --> 00:42:42.540
most organizations don't have a group of PhDs


00:42:42.540 --> 00:42:46.920
that are really sophisticated in their analysis.


00:42:46.920 --> 00:42:48.280
So people use Excel


00:42:48.280 --> 00:42:51.020
and kind of come up with their own approaches.


00:42:51.020 --> 00:42:53.200
And that's why I thought Profit was interesting.


00:42:53.200 --> 00:42:54.660
And I think this is interesting


00:42:54.660 --> 00:42:57.600
because it does come from Facebook


00:42:57.600 --> 00:42:59.980
and you have to assume that they've got a lot of smart people


00:42:59.980 --> 00:43:02.540
that are doing a lot of forecasting.


00:43:02.540 --> 00:43:06.840
And they've taken some of the things that Profit was good at


00:43:06.840 --> 00:43:09.720
and added some additional tools.


00:43:09.720 --> 00:43:13.600
So before I go too much into cats,


00:43:13.600 --> 00:43:15.780
one thing I wanted to mention is


00:43:15.780 --> 00:43:17.860
I did write an article about profit,


00:43:17.860 --> 00:43:20.320
but I think other people,


00:43:20.320 --> 00:43:24.120
this gentleman, Peter Cotton,


00:43:24.120 --> 00:43:26.320
wrote an article about profit


00:43:26.320 --> 00:43:29.680
and essentially questioning how good it was.


00:43:29.680 --> 00:43:34.440
And this is a really long, really well thought out article


00:43:34.440 --> 00:43:36.560
and some of the math and some of the concepts


00:43:36.560 --> 00:43:38.680
are way over my head, but I do encourage people


00:43:38.680 --> 00:43:40.960
that you're looking at time series forecasting,


00:43:40.960 --> 00:43:42.720
take a look at this.


00:43:42.720 --> 00:43:46.360
But what CATS does is instead of just doing forecasting


00:43:46.360 --> 00:43:49.560
with profit, it has a couple of different models


00:43:49.560 --> 00:43:51.020
that you can use.


00:43:51.020 --> 00:43:55.560
You can also do some more just basic time series analysis


00:43:55.560 --> 00:43:58.800
with it to detect seasonality patterns


00:43:58.800 --> 00:44:00.960
and change points and other trends.


00:44:00.960 --> 00:44:03.740
There's also, if you want to incorporate this


00:44:03.740 --> 00:44:06.240
in some of your other machine learning algorithms


00:44:06.240 --> 00:44:09.160
to pull out features from your time series data,


00:44:09.160 --> 00:44:11.480
you can do that with this library as well.


00:44:11.480 --> 00:44:14.440
And there's a whole bunch of other libraries


00:44:14.440 --> 00:44:17.960
or utilities to build like ensemble models


00:44:17.960 --> 00:44:21.320
and other approaches for time series forecasting.


00:44:21.320 --> 00:44:25.640
This is another one where it is relatively new.


00:44:25.640 --> 00:44:27.400
So there's not a whole lot of documentation,


00:44:27.400 --> 00:44:31.580
but it's a whole bunch of different Python notebooks,


00:44:31.580 --> 00:44:33.000
Jupyter notebooks, I mean.


00:44:33.000 --> 00:44:35.480
And like one of the things I think is interesting


00:44:35.480 --> 00:44:38.660
is from a forecasting perspective, you can use Profit,


00:44:38.660 --> 00:44:43.480
but use the same API and use Sarima, I think, Sarima,


00:44:43.480 --> 00:44:47.640
and Holt Winters, as well as some other Ensembl models.


00:44:47.640 --> 00:44:51.040
You can backtest, you can tune your hyperparameters.


00:44:51.040 --> 00:44:53.040
And then you can also,


00:44:53.040 --> 00:44:56.480
it's got several of these other algorithms


00:44:56.480 --> 00:44:58.280
for change point detection.


00:44:58.280 --> 00:45:00.800
And a lot of this, like I said,


00:45:00.800 --> 00:45:03.560
is I'm not an expert on the math,


00:45:03.560 --> 00:45:06.060
but I am interested in how you figure out


00:45:06.060 --> 00:45:08.840
how to take these tools and apply them


00:45:08.840 --> 00:45:10.720
to those real world business problems.


00:45:10.720 --> 00:45:12.040
And so I think it's really great


00:45:12.040 --> 00:45:14.680
when we have some of these libraries out there


00:45:14.680 --> 00:45:16.680
that are developed by really smart people


00:45:16.680 --> 00:45:18.560
that do understand the state of the art,


00:45:18.560 --> 00:45:21.200
that can maybe make it a little simpler for others


00:45:21.200 --> 00:45:23.480
to apply to their own unique challenges.


00:45:23.480 --> 00:45:25.880
- Yeah, this looks really nice to bundle these all together.


00:45:25.880 --> 00:45:29.640
What's a type of problem you might answer with this?


00:45:29.640 --> 00:45:34.520
I think so one example could be help me figure out


00:45:34.520 --> 00:45:37.920
what my blog or my website traffic is gonna look like


00:45:37.920 --> 00:45:39.560
in six months from now.


00:45:39.560 --> 00:45:43.600
So I need to figure out, do I need to resize my servers


00:45:43.600 --> 00:45:48.240
or upgrade my disk space or--


00:45:48.240 --> 00:45:50.800
- What's my AWS bandwidth bill gonna be?


00:45:50.800 --> 00:45:51.800
- Exactly.


00:45:51.800 --> 00:45:55.040
The other one that I think


00:45:55.040 --> 00:45:57.360
it's probably used a lot in inventory.


00:45:57.360 --> 00:45:58.960
So trying to figure out, okay,


00:45:58.960 --> 00:46:00.840
what do I think sales is gonna look like?


00:46:00.840 --> 00:46:03.260
What do I need to reorder


00:46:03.260 --> 00:46:05.760
so that I actually have enough product


00:46:05.760 --> 00:46:07.440
so that we don't stock out?


00:46:07.440 --> 00:46:11.200
I think those are some pretty common use cases.


00:46:11.200 --> 00:46:15.760
A lot of the examples here are the airline flight data.


00:46:15.760 --> 00:46:19.160
So anything that you have that's over a period of time,


00:46:19.160 --> 00:46:22.760
typically kind of on a daily basis over multiple years,


00:46:22.760 --> 00:46:24.400
you can then start to forecast out


00:46:24.400 --> 00:46:27.920
what those future numbers would look like.


00:46:27.920 --> 00:46:30.400
- Then you have this magic prediction power


00:46:30.400 --> 00:46:31.600
for the executives.


00:46:31.600 --> 00:46:32.480
- Exactly.


00:46:32.480 --> 00:46:35.360
And I think what's interesting about is most of these,


00:46:35.360 --> 00:46:39.000
I think most times when people do prediction in Excel,


00:46:39.000 --> 00:46:40.640
it's kind of, you put the numbers in there


00:46:40.640 --> 00:46:43.780
and kind of do your linear line.


00:46:43.780 --> 00:46:47.040
But these tend to give you more error bars,


00:46:47.040 --> 00:46:48.520
so you can give a range.


00:46:48.520 --> 00:46:51.360
So I think a prediction like this is much more valuable


00:46:51.360 --> 00:46:53.920
when you say it could be between, you know,


00:46:53.920 --> 00:46:58.460
100 and 110 versus it's going to be 101.5.


00:46:58.460 --> 00:47:02.140
And when you do that, it conveys a lot more precision


00:47:02.140 --> 00:47:03.180
than is really there.


00:47:03.180 --> 00:47:04.820
Yeah, that makes a lot of sense.


00:47:04.820 --> 00:47:07.300
Comment from the live stream, Sam Morley says,


00:47:07.300 --> 00:47:09.260
when I was experimenting with time series data,


00:47:09.260 --> 00:47:12.340
I managed to get better results with a fairly simple, naive


00:47:12.340 --> 00:47:14.980
Dharma model than I did using profit.


00:47:14.980 --> 00:47:18.040
And I think that's exactly what this article--


00:47:18.040 --> 00:47:19.820
I don't know if he's read this article,


00:47:19.820 --> 00:47:23.740
but this-- the article from Dr. Cotton,


00:47:23.740 --> 00:47:29.280
That's essentially what he says is some of the more simple models did outperform profit.


00:47:29.280 --> 00:47:30.440
Yeah, interesting.


00:47:30.440 --> 00:47:31.040
Cool, cool.


00:47:31.040 --> 00:47:33.040
All right, Brian, is that it for all of our items?


00:47:33.040 --> 00:47:34.040
It is.


00:47:34.040 --> 00:47:36.280
Got any extra stuff you want to throw out there?


00:47:36.280 --> 00:47:38.680
Oh, I just had a quick one.


00:47:38.680 --> 00:47:41.280
Somebody on Twitter last week asked,


00:47:41.280 --> 00:47:43.480
"Why did I write a second edition of the book?"


00:47:43.480 --> 00:47:46.380
And so I thought, well, that's a reasonable question.


00:47:46.380 --> 00:47:51.680
So at py2sbook.com, you can go and I've added a "Why a second edition" section.


00:47:51.680 --> 00:47:53.040
So you can go read that.


00:47:53.040 --> 00:47:55.440
new built-in fixtures, new flags,


00:47:55.440 --> 00:47:59.400
EdgeScope features, F-strings, types,


00:47:59.400 --> 00:48:01.120
all sorts of good things are available


00:48:01.120 --> 00:48:02.520
that weren't available then, right?


00:48:02.520 --> 00:48:05.400
>> Yeah. There's all sorts of reasons.


00:48:05.400 --> 00:48:07.360
>> Always good to see Pathlib there.


00:48:07.360 --> 00:48:11.480
I love Pathlib. It makes my life so much easier when dealing with files.


00:48:11.480 --> 00:48:13.280
>> I finally made the move.


00:48:13.280 --> 00:48:15.320
I've put down OS.Path,


00:48:15.320 --> 00:48:17.640
and I'm now all about the Pathlib. Loving it.


00:48:17.640 --> 00:48:18.360
>> That's good.


00:48:18.360 --> 00:48:20.720
>> Yeah. Chris, anything else you want to throw out there?


00:48:20.720 --> 00:48:29.760
I was going to throw out one other. I was doing some some research for working with units of


00:48:29.760 --> 00:48:38.240
measure and there's a library called unit. You and YT. You and YT that allows you to do things like


00:48:38.240 --> 00:48:45.760
convert kilometers to miles. But it works with NumPy. It works with all the scientific stack.


00:48:45.760 --> 00:48:48.920
And that was, I hadn't heard of that one.


00:48:48.920 --> 00:48:50.240
I thought it was kind of interesting


00:48:50.240 --> 00:48:51.400
and wanted to put that out there.


00:48:51.400 --> 00:48:53.920
And next time you need to actually do something


00:48:53.920 --> 00:48:56.680
with units and convert back and forth,


00:48:56.680 --> 00:48:57.880
might want to consider that.


00:48:57.880 --> 00:48:58.720
And then the other one-


00:48:58.720 --> 00:49:01.160
- It looks like there's a lot of like physics


00:49:01.160 --> 00:49:03.720
and chemistry type things, like the mass of the earth,


00:49:03.720 --> 00:49:05.720
the radius of the earth as constants,


00:49:05.720 --> 00:49:07.780
probably pi and E and all those things.


00:49:07.780 --> 00:49:09.040
- Yes, exactly.


00:49:09.040 --> 00:49:11.460
And I think it's, when you start getting into it,


00:49:11.460 --> 00:49:14.520
there's probably a temptation just to code it all yourself.


00:49:14.520 --> 00:49:16.000
just put those constants in there.


00:49:16.000 --> 00:49:18.360
But when it starts to get more complicated,


00:49:18.360 --> 00:49:21.520
I think something like this could be really useful.


00:49:21.520 --> 00:49:24.160
And then there's another approach called Pint,


00:49:24.160 --> 00:49:27.120
which also works, and there we go,


00:49:27.120 --> 00:49:28.680
which also works with units


00:49:28.680 --> 00:49:31.400
and it has a little bit different approach.


00:49:31.400 --> 00:49:33.960
And so I think it's good to take a look at both of them.


00:49:33.960 --> 00:49:34.880
And if you have a need,


00:49:34.880 --> 00:49:37.320
then you can decide which API is gonna work best


00:49:37.320 --> 00:49:39.280
for your unique situation.


00:49:39.280 --> 00:49:40.120
- Yeah, that's cool.


00:49:40.120 --> 00:49:41.880
I haven't looked at unit, but I love Pint.


00:49:41.880 --> 00:49:43.880
And I think the name is so good.


00:49:43.880 --> 00:49:46.560
- Because my wife will ask me like,


00:49:46.560 --> 00:49:48.840
how many ounces are in a pound?


00:49:48.840 --> 00:49:51.120
Or how many pints are in a liter?


00:49:51.120 --> 00:49:53.160
I'll be like, or even in, I don't know,


00:49:53.160 --> 00:49:54.440
a quart or vice versa.


00:49:54.440 --> 00:49:55.360
I'm like, I have no idea.


00:49:55.360 --> 00:49:58.960
I just, these are such messed up volume measures.


00:49:58.960 --> 00:50:00.600
And so it's like, here's the thing that takes


00:50:00.600 --> 00:50:02.080
the thing you don't really know about


00:50:02.080 --> 00:50:04.220
and allows you to convert it to the others in a safe way.


00:50:04.220 --> 00:50:05.060
It's good.


00:50:05.060 --> 00:50:05.880
- Exactly.


00:50:05.880 --> 00:50:07.320
- I got one more quick extra throughout as well


00:50:07.320 --> 00:50:08.160
for you, Chris, there.


00:50:08.160 --> 00:50:10.120
I forgot to mention that you were the author


00:50:10.120 --> 00:50:13.740
of the Move From Excel to Python with Pandas course


00:50:13.740 --> 00:50:14.860
over at TalkByThon trainings,


00:50:14.860 --> 00:50:16.320
which is a really popular course.


00:50:16.320 --> 00:50:19.040
Basically it's a intro to pandas course,


00:50:19.040 --> 00:50:21.720
disguised as solving problems you might with Excel, right?


00:50:21.720 --> 00:50:23.840
- Exactly, yeah, yeah, no thanks.


00:50:23.840 --> 00:50:26.200
And I've had a lot of good feedback from folks,


00:50:26.200 --> 00:50:29.640
so hopefully it's interesting to the listeners


00:50:29.640 --> 00:50:31.280
that haven't had a chance to check it out.


00:50:31.280 --> 00:50:33.280
- I might have to buy that for my boss.


00:50:33.280 --> 00:50:35.480
(both laughing)


00:50:35.480 --> 00:50:37.460
- Maybe you can get that discount code.


00:50:37.460 --> 00:50:38.940
- Yeah, yeah, get the discount code.


00:50:38.940 --> 00:50:40.000
All right, you ready for some jokes?


00:50:40.000 --> 00:50:42.400
My Twitter came back, so I can show the Twitter joke now.


00:50:42.400 --> 00:50:43.240
- Yeah.


00:50:43.240 --> 00:50:48.240
So Dean, who is often, but I don't see him this day,


00:50:48.240 --> 00:50:50.640
on the live stream, sent a joke over and said,


00:50:50.640 --> 00:50:54.280
do you know how they say async in Italian?


00:50:54.280 --> 00:50:58.360
Asyncio or asyncio, which I thought was a pretty good one.


00:50:58.360 --> 00:51:00.880
Asyncio, asyncio, I love Italian.


00:51:00.880 --> 00:51:03.080
All right, you guys got another one out there?


00:51:03.080 --> 00:51:05.000
I saw one in the notes, another joke,


00:51:05.000 --> 00:51:06.680
but I didn't see who put it there.


00:51:06.680 --> 00:51:08.280
- I've got one.


00:51:08.280 --> 00:51:12.000
So does anyone know why cryptocurrency engineers


00:51:12.000 --> 00:51:18.720
aren't allowed to vote. No, I don't know. Because they're minors. That's a good dad


00:51:18.720 --> 00:51:26.560
joke. Yeah, it is. Absolutely. Well, on that high note, let's call a show. What do


00:51:26.560 --> 00:51:30.360
you what do you say? Yep. Right. Thanks, as always, Chris. Thanks for joining us this


00:51:30.360 --> 00:51:34.160
time. Thank you very much. Really appreciate it. Yeah. Bye everyone. Thank you for listening


00:51:34.160 --> 00:51:38.800
to Python bites. Follow the show on Twitter via at Python bites. That's Python bites as


00:51:38.800 --> 00:51:44.960
in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you


00:51:44.960 --> 00:51:49.680
want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for


00:51:49.680 --> 00:51:54.240
sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy.


00:51:54.240 --> 00:51:57.600
Thank you for listening and sharing this podcast with your friends and colleagues.

