
00:00:00.000 --> 00:00:02.320
- Hello and welcome to Python Bytes,


00:00:02.320 --> 00:00:03.960
where we deliver Python news and headlines


00:00:03.960 --> 00:00:05.600
directly to your earbuds.


00:00:05.600 --> 00:00:10.600
This is episode 324, recorded February 21st, 2023.


00:00:10.600 --> 00:00:12.840
I'm Michael Kennedy.


00:00:12.840 --> 00:00:14.160
- And I'm Brian Okken.


00:00:14.160 --> 00:00:15.600
- And I'm Erin Mullaney.


00:00:15.600 --> 00:00:17.600
- And this episode is brought to you by Compiler,


00:00:17.600 --> 00:00:19.880
a podcast from Red Hat, tell you more about them.


00:00:19.880 --> 00:00:22.040
Erin, it's awesome to have you on the show.


00:00:22.040 --> 00:00:23.080
Thanks for joining us.


00:00:23.080 --> 00:00:25.200
- Thanks for asking me to be on.


00:00:25.200 --> 00:00:26.480
- Yeah, you bet.


00:00:26.480 --> 00:00:29.180
Yeah, why don't you tell folks a bit about yourself


00:00:29.180 --> 00:00:31.140
before we jump into the topics.


00:00:31.140 --> 00:00:32.340
- Yeah, I'm Erin Mullaney.


00:00:32.340 --> 00:00:36.140
I've been a web developer since around the year 2000.


00:00:36.140 --> 00:00:38.360
I currently work at Energy Solutions


00:00:38.360 --> 00:00:41.500
as a code base lead on a Django project there,


00:00:41.500 --> 00:00:44.100
which means that I write and review


00:00:44.100 --> 00:00:48.720
a lot of Django and Python code on a day-to-day basis.


00:00:48.720 --> 00:00:50.200
Energy Solutions, where I work,


00:00:50.200 --> 00:00:52.180
is an energy consulting company


00:00:52.180 --> 00:00:55.620
that's mission-driven to protect the environment


00:00:55.620 --> 00:00:58.380
through different energy things.


00:00:58.380 --> 00:01:00.340
to be real, not specific.


00:01:00.340 --> 00:01:02.300
I specifically work on a Django project


00:01:02.300 --> 00:01:06.780
that facilitates energy efficiency programs.


00:01:06.780 --> 00:01:10.540
And energy efficiency is actually a super powerful


00:01:10.540 --> 00:01:14.100
and cost-effective way to combat climate change.


00:01:14.100 --> 00:01:17.580
And that's according to the US Department of Energy.


00:01:17.580 --> 00:01:18.540
- Yeah, that's awesome.


00:01:18.540 --> 00:01:21.100
All the wasted energy and bad insulation


00:01:21.100 --> 00:01:23.980
and other things like that, that's really cool.


00:01:23.980 --> 00:01:25.020
That's good work.


00:01:25.020 --> 00:01:27.820
Really quickly before we dive into Brian's item here,


00:01:27.820 --> 00:01:29.820
How are you feeling about Django and the recent changes?


00:01:29.820 --> 00:01:31.860
I feel like it's picked up a lot of momentum lately.


00:01:31.860 --> 00:01:34.860
It's picked up some new features like async stuff.


00:01:34.860 --> 00:01:36.820
Is that exciting for you and your team?


00:01:36.820 --> 00:01:38.380
- Yeah, for sure, it's exciting.


00:01:38.380 --> 00:01:42.500
I am coming from a background where I was actually coding


00:01:42.500 --> 00:01:44.860
in a different web framework for years


00:01:44.860 --> 00:01:46.900
and switched over to Django.


00:01:46.900 --> 00:01:50.660
So I'm just happy to hear that more and more people


00:01:50.660 --> 00:01:53.980
are downloading it and using it.


00:01:53.980 --> 00:01:55.620
So yeah, yeah.


00:01:55.620 --> 00:01:58.660
- I wouldn't just stick around, 'cause I like it.


00:01:58.660 --> 00:01:59.820
- Yeah, absolutely.


00:01:59.820 --> 00:02:01.780
All right, Brian, you wanna kick us off here?


00:02:01.780 --> 00:02:05.220
- Sure, so this one, first one's coming from Brett Cannon.


00:02:05.220 --> 00:02:06.980
So he wrote an article called


00:02:06.980 --> 00:02:10.940
Use Toml for .env files, question mark.


00:02:10.940 --> 00:02:14.140
And so there's the question at the end,


00:02:14.140 --> 00:02:15.220
and we'll talk about that.


00:02:15.220 --> 00:02:18.060
But I just ran across, I mean, I don't know,


00:02:18.060 --> 00:02:20.580
because I'm not a web developer very much,


00:02:20.580 --> 00:02:22.720
I mean, I'm getting more so now,


00:02:22.720 --> 00:02:27.000
but I wasn't really familiar with the .env files


00:02:27.000 --> 00:02:28.200
until just recently.


00:02:28.200 --> 00:02:30.120
And so one of the great things about this article


00:02:30.120 --> 00:02:32.200
is it talks about kind of what these are.


00:02:32.200 --> 00:02:37.200
So what these are often is you've got settings


00:02:37.200 --> 00:02:40.080
for your application.


00:02:40.080 --> 00:02:43.620
And there's an idea of a 12-factor app design,


00:02:43.620 --> 00:02:46.520
which I kind of like read about many years ago


00:02:46.520 --> 00:02:48.000
and forgot about.


00:02:48.000 --> 00:02:50.720
But one of the ideas is you don't wanna like


00:02:50.720 --> 00:02:51.860
have too many differences


00:02:51.860 --> 00:02:53.100
between your development environment


00:02:53.100 --> 00:02:54.380
and your live environment.


00:02:54.380 --> 00:02:55.540
And one of the ways you do this


00:02:55.540 --> 00:02:57.340
is using environmental variables


00:02:57.340 --> 00:02:59.660
to store things like login credentials


00:02:59.660 --> 00:03:00.860
and all that sort of junk.


00:03:00.860 --> 00:03:04.380
And in Python, one of the ways we do that


00:03:04.380 --> 00:03:06.420
is through .env files


00:03:06.420 --> 00:03:11.260
and also through a project called python.env,


00:03:11.260 --> 00:03:15.200
which is used by Dantic and a lot of other projects.


00:03:15.200 --> 00:03:17.980
And what this does is it allows you


00:03:17.980 --> 00:03:18.860
to have defaults in there.


00:03:18.860 --> 00:03:20.820
So you have, so in your development environment,


00:03:20.820 --> 00:03:23.460
I might have something silly, some silly credentials,


00:03:23.460 --> 00:03:26.060
but then, or, you know, look him up somewhere.


00:03:26.060 --> 00:03:27.820
But then in your live environment,


00:03:27.820 --> 00:03:31.740
those are actually set by the production server


00:03:31.740 --> 00:03:33.540
to set those secrets.


00:03:33.540 --> 00:03:38.140
And so the question really is, what's the format of this?


00:03:38.140 --> 00:03:41.620
So, and I kind of never really thought about it before.


00:03:41.620 --> 00:03:46.580
And basically the problem is it's not defined.


00:03:46.580 --> 00:03:48.100
And it's in--


00:03:48.100 --> 00:03:50.140
There exists a text file that has secrets.


00:03:50.140 --> 00:03:50.980
(laughing)


00:03:50.980 --> 00:03:54.140
- Yeah, and it says it's kind of like


00:03:54.140 --> 00:03:56.300
Bash-ish files or something.


00:03:56.300 --> 00:03:59.340
It's by the, it's a format that's not formally specified


00:03:59.340 --> 00:04:04.340
and improves over time according to the python.env readme.


00:04:04.340 --> 00:04:08.340
But that's not really, what does that mean?


00:04:08.340 --> 00:04:10.620
It kind of means it's your application


00:04:10.620 --> 00:04:12.920
so that you can define it however you want, right?


00:04:12.920 --> 00:04:15.260
But maybe we should have some standardization.


00:04:15.260 --> 00:04:19.220
So Brett was looking further into this.


00:04:19.220 --> 00:04:22.660
And one of the solutions that Adafruit came up with


00:04:22.660 --> 00:04:25.740
was let's not use .env,


00:04:25.740 --> 00:04:27.700
but actually just do a settings.toml.


00:04:27.700 --> 00:04:28.980
It's used for the same thing,


00:04:28.980 --> 00:04:32.820
to store secrets such as passwords and API keys.


00:04:32.820 --> 00:04:34.380
So they're using toml.


00:04:34.380 --> 00:04:37.540
And then basically kind of when you just do


00:04:37.540 --> 00:04:39.180
a normal simple toml file,


00:04:39.180 --> 00:04:40.980
it looks pretty much like a normal,


00:04:40.980 --> 00:04:43.700
any other .env file that people have used.


00:04:43.700 --> 00:04:48.260
So really that's the question that Brett is posing is,


00:04:48.260 --> 00:04:49.680
can we just standardize on this?


00:04:49.680 --> 00:04:50.860
Why don't we just, you know,


00:04:50.860 --> 00:04:55.580
standardize.env as .toml, as toml format.


00:04:55.580 --> 00:04:57.900
And I think, why not?


00:04:57.900 --> 00:05:00.260
Mostly it'll work for everybody already.


00:05:00.260 --> 00:05:03.460
And then you could do cool things if we did toml.


00:05:03.460 --> 00:05:04.700
You could extend it a bit.


00:05:04.700 --> 00:05:07.260
So like in the VS Code code base,


00:05:07.260 --> 00:05:09.820
they're talking about like using categories


00:05:09.820 --> 00:05:11.860
and specific table to hit.


00:05:11.860 --> 00:05:14.820
you'd have multiple tables in there instead of just the global one.


00:05:14.820 --> 00:05:16.140
>> I think that's a cool idea.


00:05:16.140 --> 00:05:19.500
I like the ability to have multiple things like test and maybe


00:05:19.500 --> 00:05:22.660
dev or a connection string to a database or something.


00:05:22.660 --> 00:05:23.500
>> Yeah.


00:05:23.500 --> 00:05:26.860
>> It wouldn't make me sound if it was JSON as well.


00:05:26.860 --> 00:05:31.740
I know Aaron is going to make a KMO for JSON later,


00:05:31.740 --> 00:05:34.940
but Toml seems to be winning on these things,


00:05:34.940 --> 00:05:36.500
and I would be okay with Toml as well.


00:05:36.500 --> 00:05:39.580
>> So Aaron, you do web development.


00:05:39.580 --> 00:05:43.260
Do you use .env files or this sort of a setting?


00:05:43.260 --> 00:05:45.580
>> We use settings.


00:05:45.580 --> 00:05:49.300
We don't use .env files.


00:05:49.300 --> 00:05:52.100
We do have local settings.


00:05:52.100 --> 00:05:55.020
>> Cool. I'm not really a Django developer,


00:05:55.020 --> 00:05:59.060
so maybe is it built into Django to have some solution for this?


00:05:59.060 --> 00:06:05.100
>> I get it running on my machine and then I go and I code.


00:06:05.100 --> 00:06:06.220
>> Okay.


00:06:06.220 --> 00:06:07.660
>> All the OS stuff.


00:06:07.660 --> 00:06:14.660
Yeah, all the ON stuff is not, yeah, is not stuff I worry about unless I'm installing a new requirement or something.


00:06:14.660 --> 00:06:19.660
Yeah, Django does have its way of managing settings that predates this stuff, I believe, as well.


00:06:19.660 --> 00:06:20.660
All right.


00:06:20.660 --> 00:06:21.660
Yeah, that makes sense.


00:06:21.660 --> 00:06:24.660
Well, Michael, should we switch to Pydantic?


00:06:24.660 --> 00:06:27.660
I have some crazy news for you. Yeah, let's do it.


00:06:27.660 --> 00:06:33.660
First, huge, huge congrats over to Samuel Colvin.


00:06:33.660 --> 00:06:36.660
And I've had him on the show to talk about Pydantic before.


00:06:36.660 --> 00:06:42.160
Pydantic is one of the more exciting libraries, I think, especially in the API space.


00:06:42.160 --> 00:06:48.800
But also Python bytes itself is powered by Beanie, the MongoDB ORM or ODM.


00:06:48.800 --> 00:06:53.960
And that is uses Pydantic models as its validation and an exchange like the things that are mapped


00:06:53.960 --> 00:06:57.120
to MongoDB are Pydantic classes.


00:06:57.120 --> 00:06:58.120
So here's the news.


00:06:58.120 --> 00:07:03.120
The Sequoia, like one of the biggest VC firms in California,


00:07:03.120 --> 00:07:04.960
in the world probably,


00:07:04.960 --> 00:07:06.560
backs open source data validation,


00:07:06.560 --> 00:07:09.980
Pydantic to commercialize with cloud services.


00:07:09.980 --> 00:07:10.940
That's crazy, huh?


00:07:10.940 --> 00:07:11.780
- Yeah, wow.


00:07:11.780 --> 00:07:14.240
- We are a long way from the buy me a coffee,


00:07:14.240 --> 00:07:16.700
donate PayPal button that you see


00:07:16.700 --> 00:07:18.920
on the various projects in this.


00:07:18.920 --> 00:07:23.480
And I think it's just a sign of the open source space


00:07:23.480 --> 00:07:27.300
finding its way to support really successful projects


00:07:27.300 --> 00:07:29.960
and to support people whose time and energy


00:07:29.960 --> 00:07:32.120
and contributions to the world would be better spent


00:07:32.120 --> 00:07:36.080
to further this library than say potentially like,


00:07:36.080 --> 00:07:40.240
well, how can we get like 1% of 1% increase on ad clicks


00:07:40.240 --> 00:07:43.000
by using my library or something like that,


00:07:43.000 --> 00:07:44.640
you know, working for like companies


00:07:44.640 --> 00:07:46.800
that don't necessarily contribute so much.


00:07:46.800 --> 00:07:48.800
So some of the highlights here,


00:07:48.800 --> 00:07:51.540
you'll notice when I said we're long ways


00:07:51.540 --> 00:07:53.440
from buying me a cup of coffee,


00:07:53.440 --> 00:07:56.880
Pydantic Services Incorporated emerges from stealth today


00:07:56.880 --> 00:07:59.520
with 4.7 million in seed funding.


00:07:59.520 --> 00:08:00.360
- Wow.


00:08:00.360 --> 00:08:01.180
- So wait, what?


00:08:01.180 --> 00:08:02.020
- Big coffee.


00:08:02.020 --> 00:08:03.360
- That is a lot of coffee.


00:08:03.360 --> 00:08:05.340
You could have, that's like coffee for life.


00:08:05.340 --> 00:08:07.060
Some of that fancy kind, you know,


00:08:07.060 --> 00:08:10.280
the weird, weird variations and stuff.


00:08:10.280 --> 00:08:11.120
Yeah, anyway.


00:08:11.120 --> 00:08:13.480
So there's, it's not just Sequoia, it's Pear Tech,


00:08:13.480 --> 00:08:15.200
it's Irregular Expressions,


00:08:15.200 --> 00:08:18.340
it's Zapier co-founder, Brian Helmig,


00:08:18.340 --> 00:08:20.400
who's also been on, talked by them before,


00:08:20.400 --> 00:08:23.280
and some other folks, co-founder of Sentry,


00:08:23.280 --> 00:08:24.720
David Kramer, so on.


00:08:24.720 --> 00:08:26.840
So let me see, I wrote down some of the highlights.


00:08:26.840 --> 00:08:31.960
out of this whole article that I wanted to hit on. First of all, also, this comes from Mark Little,


00:08:31.960 --> 00:08:36.920
who was a guest on show 285 and also a friend of mine. So thanks, Mark, for sending that in.


00:08:36.920 --> 00:08:42.440
The new the whole like, so you might be wondering, okay, well, 4.7 million is amazing. It's a lot of


00:08:42.440 --> 00:08:47.080
support. It means pedantic, it's only going to get better and stronger. But what the heck,


00:08:47.080 --> 00:08:53.320
you get a gift for your 4.7 million. So the idea is that this new commercial entity,


00:08:53.320 --> 00:08:59.560
It'll incorporate a bunch of tools and services that are powered by and inspired by the pedantic


00:08:59.560 --> 00:09:06.040
library. And from what I can tell is its primary goal is to make pedantic really, really good


00:09:06.040 --> 00:09:11.880
further, right, there's already this big project for 2.0. For rewriting the core and rust. This is


00:09:11.880 --> 00:09:16.040
the last time I had Samuel on the show on top Python to talk about that, which is going to make


00:09:16.040 --> 00:09:22.120
it a lot faster. But something a little bit akin to a platform as a service, something a little bit


00:09:22.120 --> 00:09:28.100
bit like a Heroku where you can push Python code to production in simple ways, but using


00:09:28.100 --> 00:09:33.740
the validation and the data exchange and the understanding that Pydantic has for data as


00:09:33.740 --> 00:09:34.740
part of this.


00:09:34.740 --> 00:09:38.440
So final thing, and I'll get y'all's thoughts on this, is you're going to start with an


00:09:38.440 --> 00:09:40.480
initial team of six.


00:09:40.480 --> 00:09:45.180
The first three engineers are based in Montana, Chicago, and Berlin, various places.


00:09:45.180 --> 00:09:50.940
And so, yeah, I wish all the luck to the Pydantic team and to Samuel and folks.


00:09:50.940 --> 00:09:52.580
I think this is a great real thing.


00:09:52.580 --> 00:09:54.540
- I think this is great.


00:09:54.540 --> 00:09:57.980
I like the conversion to Rust.


00:09:57.980 --> 00:09:59.700
That's pretty exciting.


00:09:59.700 --> 00:10:00.880
- Yeah.


00:10:00.880 --> 00:10:01.720
How's this sit with you?


00:10:01.720 --> 00:10:02.780
Does this surprise you?


00:10:02.780 --> 00:10:05.820
- No, it's cool.


00:10:05.820 --> 00:10:07.160
It's very cool.


00:10:07.160 --> 00:10:08.820
I mean, I'm just Googling it


00:10:08.820 --> 00:10:12.180
because I didn't research it ahead of this talk.


00:10:12.180 --> 00:10:14.540
But yeah, it sounds like it can be used


00:10:14.540 --> 00:10:16.900
with any Python-based framework.


00:10:16.900 --> 00:10:18.860
- Yeah, it came out of fast.


00:10:18.860 --> 00:10:20.700
Yeah, it came out of FastAPI.


00:10:20.700 --> 00:10:23.460
and it plays many important roles in FastAPI.


00:10:23.460 --> 00:10:24.540
It's the data validation.


00:10:24.540 --> 00:10:26.460
It's also the type hence that does


00:10:26.460 --> 00:10:27.620
the automatic data conversion,


00:10:27.620 --> 00:10:29.460
but it also drives like the swagger,


00:10:29.460 --> 00:10:32.900
open API documentation and all those things.


00:10:32.900 --> 00:10:35.120
But it's been used way, way more places,


00:10:35.120 --> 00:10:36.980
for example, like Beanie, which I mentioned,


00:10:36.980 --> 00:10:39.260
or SQL model and plenty of others.


00:10:39.260 --> 00:10:41.420
And it's just starting to gain a ton of momentum


00:10:41.420 --> 00:10:44.580
as a really solid data exchange for Python


00:10:44.580 --> 00:10:47.380
that's not like directly talking to databases.


00:10:47.380 --> 00:10:49.180
So yeah, it should be good to see it grow.


00:10:49.180 --> 00:10:53.020
- What does that mean not directly talking to databases?


00:10:53.020 --> 00:10:56.460
Meaning it just reads what comes back from the API


00:10:56.460 --> 00:10:57.460
and validates that?


00:10:57.460 --> 00:11:00.260
- Yeah, it basically will take any JSON


00:11:00.260 --> 00:11:02.420
or if you could take a TOML document,


00:11:02.420 --> 00:11:04.180
you could turn it into a Python dictionary,


00:11:04.180 --> 00:11:06.540
then you could pass that on and have it validated.


00:11:06.540 --> 00:11:08.040
So you could say things like,


00:11:08.040 --> 00:11:14.340
this class has a list, which is a list of orders,


00:11:14.340 --> 00:11:17.660
and there can be no more than three orders in the list


00:11:17.660 --> 00:11:18.700
and they have to be orders,


00:11:18.700 --> 00:11:20.100
and this thing has to be a number,


00:11:20.100 --> 00:11:21.560
and just all that kind of logic


00:11:21.560 --> 00:11:23.500
gets expressed in the model there.


00:11:23.500 --> 00:11:25.300
So, yeah, yeah, it's cool.


00:11:25.300 --> 00:11:27.780
- So one, just I guess a random thing,


00:11:27.780 --> 00:11:29.860
so it's a team of six, first three engineers


00:11:29.860 --> 00:11:32.220
based in Montana, Chicago, or Berlin.


00:11:32.220 --> 00:11:34.220
I wonder who's in Montana?


00:11:34.220 --> 00:11:36.780
And I guess if you had to choose


00:11:36.780 --> 00:11:38.580
one of three places to live,


00:11:38.580 --> 00:11:41.060
would you choose Montana, Chicago, or Berlin?


00:11:41.060 --> 00:11:42.340
- Gosh, I could--


00:11:42.340 --> 00:11:44.620
- I think I'd go with Berlin, but--


00:11:44.620 --> 00:11:47.500
- I could make a case for Montana or Berlin.


00:11:47.500 --> 00:11:50.540
- They both are awesome in their own separate ways.


00:11:50.540 --> 00:11:54.600
What's your spare time look like, I guess?


00:11:54.600 --> 00:11:57.740
- Yeah, I mean, I do love the theaters in Chicago.


00:11:57.740 --> 00:11:59.740
The theaters in Chicago are beautiful.


00:11:59.740 --> 00:12:02.260
- I do too, but I'm thinking of motorcycle riding


00:12:02.260 --> 00:12:04.260
for days in Montana and the cities


00:12:04.260 --> 00:12:05.860
and all that stuff in Berlin.


00:12:05.860 --> 00:12:07.140
Erin, where would you live?


00:12:07.140 --> 00:12:10.380
- Man, between those, that's really a hard choice.


00:12:10.380 --> 00:12:12.820
I moved to North Carolina for shorter winters,


00:12:12.820 --> 00:12:15.540
so it seems like Chicago would be out for that reason,


00:12:15.540 --> 00:12:16.380
'cause they have even longer--


00:12:16.380 --> 00:12:17.540
- I don't know, I might really be out.


00:12:17.540 --> 00:12:18.740
- Winters, yeah.


00:12:18.740 --> 00:12:21.700
So I would need to research what had the shortest winter,


00:12:21.700 --> 00:12:24.140
but also had really good vegan food.


00:12:24.140 --> 00:12:26.060
Like Chicago has amazing vegan food,


00:12:26.060 --> 00:12:28.180
but the winters, I just can't.


00:12:28.180 --> 00:12:29.820
- I think Berlin's gonna be your vet.


00:12:29.820 --> 00:12:30.700
- Yeah.


00:12:30.700 --> 00:12:31.700
- Yeah, all right, awesome.


00:12:31.700 --> 00:12:33.900
Well, over to you.


00:12:33.900 --> 00:12:35.100
What's your first topic?


00:12:35.100 --> 00:12:36.580
- Okay, cool.


00:12:36.580 --> 00:12:38.820
Yeah, and I just wanted to go back to the Tamil topic


00:12:38.820 --> 00:12:40.780
because I kind of froze on that one.


00:12:40.780 --> 00:12:43.420
So we are using a YAML file for our local settings,


00:12:43.420 --> 00:12:44.500
not a Tamil file.


00:12:44.500 --> 00:12:46.100
I haven't actually seen Tamil before.


00:12:46.100 --> 00:12:48.940
I don't really know how different looking it is.


00:12:48.940 --> 00:12:52.180
But yeah, and settings are kind of baked into Django


00:12:52.180 --> 00:12:54.900
for outside of the local environment stuff.


00:12:54.900 --> 00:12:55.740
- Cool. - But yeah,


00:12:55.740 --> 00:12:58.000
so my next, so my topic was,


00:12:58.000 --> 00:13:01.180
my first topic is JSON fields for performance


00:13:01.180 --> 00:13:04.340
and thinking about JSON fields in terms of what they are,


00:13:04.340 --> 00:13:07.020
which is kind of like denormalized data.


00:13:07.020 --> 00:13:10.100
I'm really interested in the topic of normalization


00:13:10.100 --> 00:13:13.980
and denormalization and specifically how JSON fields


00:13:13.980 --> 00:13:17.380
are basically denormalized and mutable data


00:13:17.380 --> 00:13:21.780
that's probably living in an otherwise normalized database.


00:13:21.780 --> 00:13:23.200
So I was interested in this topic


00:13:23.200 --> 00:13:27.000
and I searched to see if I could find it anywhere online.


00:13:27.000 --> 00:13:30.080
And yeah, so what we're showing here is,


00:13:30.080 --> 00:13:35.080
this was a talk given by David Stokes at PHP UK in 2019,


00:13:35.080 --> 00:13:38.940
called "How Denormalizing Your Data with JSON


00:13:38.940 --> 00:13:42.120
Can Boost Query Performance."


00:13:42.120 --> 00:13:45.480
I always mispronounce, do you guys pronounce it Jason or Jason?


00:13:45.480 --> 00:13:47.560
And I'm sure you've talked about this before.


00:13:47.560 --> 00:13:48.560
I guess I had no idea.


00:13:48.560 --> 00:13:51.920
I say Jay Jason like on top.


00:13:51.920 --> 00:13:52.920
Yeah.


00:13:52.920 --> 00:13:53.920
Yeah.


00:13:53.920 --> 00:13:54.920
But I don't.


00:13:54.920 --> 00:13:55.920
Brian, what do you like on this?


00:13:55.920 --> 00:13:56.920
I like the name Jason.


00:13:56.920 --> 00:13:57.920
Jason.


00:13:57.920 --> 00:13:58.920
Yeah.


00:13:58.920 --> 00:13:59.920
It is Jason.


00:13:59.920 --> 00:14:00.920
It's like, it's the name.


00:14:00.920 --> 00:14:02.920
According to the creator, it is Jason.


00:14:02.920 --> 00:14:03.920
Okay.


00:14:03.920 --> 00:14:04.920
Creator of Jason.


00:14:04.920 --> 00:14:05.920
Got it.


00:14:05.920 --> 00:14:08.880
But I will mispronounce it a lot.


00:14:08.880 --> 00:14:11.900
And it stands for JavaScript Objects Notation.


00:14:11.900 --> 00:14:14.160
But yeah, I think my Philly comes out


00:14:14.160 --> 00:14:15.600
'cause I'm always saying JSOL.


00:14:15.600 --> 00:14:18.960
So, yeah, so David Stokes gave his talk.


00:14:18.960 --> 00:14:21.120
He is a technology evangelist.


00:14:21.120 --> 00:14:23.960
And a lot of the talk was about MySQL


00:14:23.960 --> 00:14:25.780
as a backend in particular.


00:14:25.780 --> 00:14:28.200
But the parts of the talk that I found really interesting


00:14:28.200 --> 00:14:30.240
are the history lesson.


00:14:30.240 --> 00:14:32.400
And I kind of have it highlighted here.


00:14:32.400 --> 00:14:35.160
It starts at around minute 250,


00:14:35.160 --> 00:14:38.620
where he talked about how EnderCod at IBM


00:14:38.620 --> 00:14:41.220
developed the idea of a relational data


00:14:41.220 --> 00:14:44.100
because hardware was expensive at the time.


00:14:44.100 --> 00:14:47.620
So having relational tables and normalized data


00:14:47.620 --> 00:14:51.220
was a way to not have duplication of data.


00:14:51.220 --> 00:14:55.700
And normalized data, just a quick definition is like,


00:14:55.700 --> 00:14:57.620
or example is like taking an address


00:14:57.620 --> 00:14:59.900
and breaking it down into parts.


00:14:59.900 --> 00:15:04.900
So experts had been saying for years at this point,


00:15:04.900 --> 00:15:07.420
normalizing data is the way to go.


00:15:07.420 --> 00:15:09.680
do you want to normalize your data?


00:15:09.680 --> 00:15:11.240
And then during this history talk,


00:15:11.240 --> 00:15:14.620
you mentioned and then no SQL came in and shook things up.


00:15:14.620 --> 00:15:19.080
And after that, SQL added JSON data types


00:15:19.080 --> 00:15:20.880
for a mutable data type.


00:15:20.880 --> 00:15:23.520
So you don't have to define and normalize


00:15:23.520 --> 00:15:24.360
your whole database.


00:15:24.360 --> 00:15:27.240
You can kind of have these mutable fields.


00:15:27.240 --> 00:15:28.520
So, okay.


00:15:28.520 --> 00:15:29.900
So anyway, the history lesson,


00:15:29.900 --> 00:15:34.320
I just found that super interesting as a data person.


00:15:34.320 --> 00:15:35.520
Do you guys find that interesting at all?


00:15:35.520 --> 00:15:36.360
I do.


00:15:36.360 --> 00:15:37.200
- I do, yeah.


00:15:37.200 --> 00:15:42.200
I think that this concept of mutable schema,


00:15:42.200 --> 00:15:44.400
not mutable data per se,


00:15:44.400 --> 00:15:49.080
but that the schema itself doesn't have to be as controlled


00:15:49.080 --> 00:15:52.600
and as strictly guarded by a DBA


00:15:52.600 --> 00:15:54.720
that goes through some giant process


00:15:54.720 --> 00:15:56.560
to figure out what you do,


00:15:56.560 --> 00:15:58.920
can add a ton of flexibility


00:15:58.920 --> 00:16:01.440
to the way that you evolve your app, right?


00:16:01.440 --> 00:16:04.040
So, there doesn't necessarily have to be a DBA.


00:16:04.040 --> 00:16:09.160
It could be like, "Well, how are we going to schedule the downtime so that we can do


00:16:09.160 --> 00:16:14.080
the schema migration as we roll out this new feature?"


00:16:14.080 --> 00:16:17.960
Those kinds of things can get challenging.


00:16:17.960 --> 00:16:22.560
If you roll out the code first and it's some kind of relational thing, you're using SQL


00:16:22.560 --> 00:16:25.580
Alchemy or something like that, it's going to crash saying that the code doesn't match


00:16:25.580 --> 00:16:26.580
the database.


00:16:26.580 --> 00:16:31.200
If you roll out the database first, it may no longer match what the code that's running


00:16:31.200 --> 00:16:34.000
is and there's always this, "Well, what do I do?"


00:16:34.000 --> 00:16:37.600
Having some of this more mutable schema,


00:16:37.600 --> 00:16:39.360
in this case, they're talking about MySQL,


00:16:39.360 --> 00:16:41.480
I believe it's basically the same for Postgres,


00:16:41.480 --> 00:16:44.760
where you can have columns that are JSON,


00:16:44.760 --> 00:16:47.680
and then you can, you just say to the database,


00:16:47.680 --> 00:16:49.500
the schema is JSON, but your code knows,


00:16:49.500 --> 00:16:51.640
well, it's actually a list of these things


00:16:51.640 --> 00:16:52.880
with these properties in it.


00:16:52.880 --> 00:16:54.320
And you wanna add a new property?


00:16:54.320 --> 00:16:55.160
Great, you add a new property.


00:16:55.160 --> 00:16:56.840
As long as your code can deal with it, super.


00:16:56.840 --> 00:16:59.800
So I think it's certainly something people should consider.


00:16:59.800 --> 00:17:01.720
It really adds a lot of flexibility.


00:17:01.720 --> 00:17:04.240
you don't need necessarily a normalization table


00:17:04.240 --> 00:17:07.560
because you can just put the stuff in a list, for example.


00:17:07.560 --> 00:17:10.060
- Yeah, and not only flexibility,


00:17:10.060 --> 00:17:13.200
but also quicker querying.


00:17:13.200 --> 00:17:17.560
So yeah, so I really liked starting in around minute 14,


00:17:17.560 --> 00:17:20.960
which is, this is what I was kind of looking for


00:17:20.960 --> 00:17:23.360
when I was looking for this topic.


00:17:23.360 --> 00:17:25.520
So I really liked that he gave this talk about it.


00:17:25.520 --> 00:17:29.040
He goes over an example of a music store


00:17:29.040 --> 00:17:31.400
and you have these items in a music store,


00:17:31.400 --> 00:17:34.320
like guitars and you don't want to have to add field every time.


00:17:34.320 --> 00:17:37.800
There's a new guitar feature.


00:17:37.800 --> 00:17:42.600
You have these JSON fields in your database.


00:17:42.600 --> 00:17:46.580
Like you said, they're available in lots of different backends.


00:17:46.580 --> 00:17:51.480
We use Postgres and we use JSON fields all over the place.


00:17:51.480 --> 00:17:52.120
>> Excellent.


00:17:52.120 --> 00:17:54.400
>> He has this really cool diagram where he shows


00:17:54.400 --> 00:17:57.280
reducing database dives and many too many joins,


00:17:57.280 --> 00:18:00.640
where you're diving from one index


00:18:00.640 --> 00:18:05.340
into another, into another to just to get at the data that you can get at the top level


00:18:05.340 --> 00:18:07.100
if you have it in this JSON field.


00:18:07.100 --> 00:18:08.100
Right.


00:18:08.100 --> 00:18:13.580
If you don't have to do a multi-way many to many join when it's just in there directly,


00:18:13.580 --> 00:18:14.580
right?


00:18:14.580 --> 00:18:15.580
Because you have more flexibility.


00:18:15.580 --> 00:18:16.580
It doesn't have to be tabular.


00:18:16.580 --> 00:18:17.580
Yeah.


00:18:17.580 --> 00:18:18.580
Yeah.


00:18:18.580 --> 00:18:19.580
So I found it really cool.


00:18:19.580 --> 00:18:23.340
We use JSON fields in one of our big Django projects quite a bit.


00:18:23.340 --> 00:18:27.420
And yeah, our data is totally, our schemas are normalized.


00:18:27.420 --> 00:18:32.420
we find it really helpful for also for reporting,


00:18:32.420 --> 00:18:34.380
making reporting really, really fast


00:18:34.380 --> 00:18:37.980
because of that database dive that you don't need to do.


00:18:37.980 --> 00:18:41.940
And also for tracking snapshots of data.


00:18:41.940 --> 00:18:44.540
So something happened on this date


00:18:44.540 --> 00:18:47.480
and then the relational record changed,


00:18:47.480 --> 00:18:49.620
but the JSON gives you the snapshot


00:18:49.620 --> 00:18:52.240
of what the user did on that date.


00:18:52.240 --> 00:18:53.740
So that's really useful too. - All right, that's a good point.


00:18:53.740 --> 00:18:55.980
'Cause if the snapshot doesn't match the current schema,


00:18:55.980 --> 00:18:57.480
well then how are you going to store it?


00:18:57.480 --> 00:18:58.540
Like that gets to be a problem,


00:18:58.540 --> 00:19:00.580
but just JSON is JSON, that's right.


00:19:00.580 --> 00:19:02.100
- Yeah. - Yeah.


00:19:02.100 --> 00:19:04.940
I guess I've taken this kind of to the far extreme


00:19:04.940 --> 00:19:06.820
in my world, so I'm a huge advocate,


00:19:06.820 --> 00:19:09.500
but I do almost all my work on MongoDB,


00:19:09.500 --> 00:19:13.380
which means it's all JSON, all the way down, all right?


00:19:13.380 --> 00:19:17.060
So, but I think it's an absolutely fabulous way to work.


00:19:17.060 --> 00:19:17.900
I love it.


00:19:17.900 --> 00:19:19.740
The operational side of not doing


00:19:19.740 --> 00:19:22.460
massive migrations all the time, it's really, really good.


00:19:22.460 --> 00:19:24.980
- Yeah, and I'm actually working on a blog,


00:19:24.980 --> 00:19:27.540
a blog article about it because I couldn't find


00:19:27.540 --> 00:19:30.020
what I specifically wanted to talk about today.


00:19:30.020 --> 00:19:32.020
So I'm writing up a blog article.


00:19:32.020 --> 00:19:32.980
It's not published.


00:19:32.980 --> 00:19:35.180
It'll be published next month.


00:19:35.180 --> 00:19:37.740
But yeah, I'll share it later with you guys.


00:19:37.740 --> 00:19:39.140
- Yeah. - Yeah, please do.


00:19:39.140 --> 00:19:41.580
And I think that's a great,


00:19:41.580 --> 00:19:42.980
actually a great thing for people to do


00:19:42.980 --> 00:19:46.140
is just there's a discussion of something


00:19:46.140 --> 00:19:48.620
and if you can't find an article


00:19:48.620 --> 00:19:50.700
that expresses what you want to express,


00:19:50.700 --> 00:19:51.540
then write one.


00:19:51.540 --> 00:19:52.900
It's great. - Yep.


00:19:52.900 --> 00:19:54.460
Indeed, all right, Brian.


00:19:54.460 --> 00:19:57.100
How about I tell everyone about our sponsor before we move on?


00:19:57.100 --> 00:19:58.380
>> Oh, that's a great idea.


00:19:58.380 --> 00:19:59.060
>> Yeah.


00:19:59.060 --> 00:20:01.980
As I said at the beginning, this episode is brought to you


00:20:01.980 --> 00:20:04.980
by the Compiler Podcast from Red Hat.


00:20:04.980 --> 00:20:10.500
And just like you out there listening, we're big fans of podcasts, Brian and I.


00:20:10.500 --> 00:20:13.700
And we're happy to share one of the most highly respected,


00:20:13.700 --> 00:20:16.740
one from the most highly respected open source companies, Compiler,


00:20:16.740 --> 00:20:18.380
original podcast from Red Hat.


00:20:18.380 --> 00:20:22.700
It brings together a curious team of Red Hatters to simplify tech topics,


00:20:22.700 --> 00:20:26.100
provide insight for new generation IT professionals.


00:20:26.100 --> 00:20:27.500
And the show covers topics like


00:20:27.500 --> 00:20:29.460
what are the components of a software stack?


00:20:29.460 --> 00:20:31.140
Are big mistakes that big of a deal?


00:20:31.140 --> 00:20:34.620
And do you have to know how to code to contribute


00:20:34.620 --> 00:20:36.260
and get started in open source?


00:20:36.260 --> 00:20:39.300
And not always, depends on how you're trying to contribute.


00:20:39.300 --> 00:20:41.540
So Compiler closes the gap between


00:20:41.540 --> 00:20:43.300
those who are new to technology


00:20:43.300 --> 00:20:45.500
and those behind the inventions


00:20:45.500 --> 00:20:47.540
and services shaping our world.


00:20:47.540 --> 00:20:49.460
And they bring together stories and perspectives


00:20:49.460 --> 00:20:52.460
from the industry and simplify its language, culture,


00:20:52.460 --> 00:20:54.580
and movements in a way that's fun, informative,


00:20:54.580 --> 00:20:55.420
and guilt-free.


00:20:55.420 --> 00:20:58.820
I recently listened to "Are We As Productive As We Think?"


00:20:58.820 --> 00:21:00.860
And that episode is really fun.


00:21:00.860 --> 00:21:03.080
There's a bunch of good advice in there.


00:21:03.080 --> 00:21:06.340
As a developer, owner of a tech company, and a technologist,


00:21:06.340 --> 00:21:09.660
these productivity hacks such as timeboxing,


00:21:09.660 --> 00:21:12.140
focusing on one task at a time,


00:21:12.140 --> 00:21:14.940
and incorporating intentional breaks into your workday


00:21:14.940 --> 00:21:16.620
all stood out as super relevant.


00:21:16.620 --> 00:21:19.740
They suggest that by creating an honest self-image


00:21:19.740 --> 00:21:21.940
of your productivity habits and being intentional


00:21:21.940 --> 00:21:23.060
about how you spend your time,


00:21:23.060 --> 00:21:25.900
you can reduce the overwhelm of multitasking


00:21:25.900 --> 00:21:27.500
that you have to do and increase your focus


00:21:27.500 --> 00:21:31.900
and creativity, leading to you being more successful,


00:21:31.900 --> 00:21:32.740
for sure.


00:21:32.740 --> 00:21:35.900
So learn more about Compiler at pythonbytes.fm/compiler.


00:21:35.900 --> 00:21:37.940
The link is in your podcast show notes.


00:21:37.940 --> 00:21:39.460
Thanks to Compiler and Red Hat


00:21:39.460 --> 00:21:42.300
for keeping this podcast going strong.


00:21:42.300 --> 00:21:43.220
- Awesome. - All right.


00:21:43.220 --> 00:21:44.340
Yeah, thanks.


00:21:44.340 --> 00:21:45.180
Fun show.


00:21:45.180 --> 00:21:47.900
And tell us, you gonna take us to school, Brian?


00:21:47.900 --> 00:21:50.220
- Yeah, so Kevin Markham, he's a friend of the show,


00:21:50.220 --> 00:21:53.560
a friend of ours, ran into him a lot


00:21:53.560 --> 00:21:57.220
during when I was going to conferences more.


00:21:57.220 --> 00:21:59.580
That's hopefully coming up again.


00:21:59.580 --> 00:22:00.420
- What are those?


00:22:00.420 --> 00:22:01.260
- Yeah, conferences.


00:22:01.260 --> 00:22:03.420
You know, people get together in real life.


00:22:03.420 --> 00:22:07.380
So Kevin took a little bit of a break.


00:22:07.380 --> 00:22:11.660
He used to write a lot, and I guess I hadn't noticed,


00:22:11.660 --> 00:22:15.340
but there's a break between August of 2021


00:22:15.340 --> 00:22:18.180
and then now in February of 2023.


00:22:18.180 --> 00:22:21.260
So copy or break and we all need that, that's fine.


00:22:21.260 --> 00:22:22.580
But these articles are great.


00:22:22.580 --> 00:22:24.720
So a couple of new articles that he has,


00:22:24.720 --> 00:22:26.900
I'm gonna pop through a couple of them.


00:22:26.900 --> 00:22:29.380
How to use f-strings with pandas.


00:22:29.380 --> 00:22:33.140
So basically it's a good discussion of f-strings


00:22:33.140 --> 00:22:36.340
if you're not comfortable with f-strings already.


00:22:36.340 --> 00:22:40.260
This is a good intro to why f-strings are great


00:22:40.260 --> 00:22:42.420
to pop in values.


00:22:42.420 --> 00:22:44.540
I don't know if it's really that panda specific,


00:22:44.540 --> 00:22:47.340
but one of the things I really loved,


00:22:47.340 --> 00:22:50.220
Although it popped up my favorite part of this article.


00:22:50.220 --> 00:22:52.540
So, and I forget to do this.


00:22:52.540 --> 00:22:54.020
So I'm glad that he points these up.


00:22:54.020 --> 00:22:55.880
So one of the things is you can,


00:22:55.880 --> 00:22:59.060
it's not just taking a value and putting it in brackets


00:22:59.060 --> 00:23:00.820
so that you can print it, but you can do,


00:23:00.820 --> 00:23:02.380
it's an expression in the brackets.


00:23:02.380 --> 00:23:06.140
So you can call like upper for a name variable


00:23:06.140 --> 00:23:07.900
so that you can print it in uppercase


00:23:07.900 --> 00:23:11.420
and not have to do that before you pass it to the F string.


00:23:11.420 --> 00:23:13.180
And or you could do things like, you know,


00:23:13.180 --> 00:23:14.180
some a little bit of math.


00:23:14.180 --> 00:23:17.140
So if you've got like his example had days completed,


00:23:17.140 --> 00:23:20.940
and he did like 365 minus that divided by,


00:23:20.940 --> 00:23:21.900
so you get a percentage.


00:23:21.900 --> 00:23:25.900
So this is pretty cool to think,


00:23:25.900 --> 00:23:28.780
remember if the only place you're gonna use the value


00:23:28.780 --> 00:23:30.160
is within the string,


00:23:30.160 --> 00:23:31.980
you could just do it within the expression.


00:23:31.980 --> 00:23:33.180
So those are good one.


00:23:33.180 --> 00:23:36.140
The part that I never really occurred to me to do


00:23:36.140 --> 00:23:38.260
that I wanted to highlight was,


00:23:38.260 --> 00:23:42.700
he had different columns of data within a data frame


00:23:42.700 --> 00:23:45.380
and referencing him with a string index


00:23:45.380 --> 00:23:52.580
And then using fstring to pick the index within a loop.


00:23:52.580 --> 00:23:55.500
And it never occurred to me to use fstrings


00:23:55.500 --> 00:24:00.660
to generate the index for string index.


00:24:00.660 --> 00:24:02.100
This is a cool idea.


00:24:02.100 --> 00:24:03.020
Yeah, that is wild.


00:24:03.020 --> 00:24:04.300
I like it.


00:24:04.300 --> 00:24:06.060
The other article is a fly-through


00:24:06.060 --> 00:24:09.260
of Jupyter keyboard shortcuts.


00:24:09.260 --> 00:24:13.540
And I guess I just have to say I'm a huge fan of the rocket


00:24:13.540 --> 00:24:14.620
emoji.


00:24:14.620 --> 00:24:15.460
I wonder why.


00:24:15.460 --> 00:24:16.820
(laughing)


00:24:16.820 --> 00:24:17.860
- Yeah.


00:24:17.860 --> 00:24:21.380
But the, I like, this is not overwhelming.


00:24:21.380 --> 00:24:24.860
So especially for people that use,


00:24:24.860 --> 00:24:26.260
I mean, if you use it a lot


00:24:26.260 --> 00:24:27.780
and you don't know keyboard shortcuts,


00:24:27.780 --> 00:24:29.200
this would be a good intro.


00:24:29.200 --> 00:24:31.580
But people like me that just pop in,


00:24:31.580 --> 00:24:34.380
use it every once in a while for something,


00:24:34.380 --> 00:24:36.180
these are useful just for those people too.


00:24:36.180 --> 00:24:37.500
It's not an overwhelming list.


00:24:37.500 --> 00:24:39.980
There's some great stuff like just, you know,


00:24:39.980 --> 00:24:42.180
hitting escape and enter to go back and forth


00:24:42.180 --> 00:24:44.860
between command mode and edit mode, for instance.


00:24:44.860 --> 00:24:47.540
And then I'm gonna tell you, gonna remember this one,


00:24:47.540 --> 00:24:50.980
A and B for create a cell above or below the current cell.


00:24:50.980 --> 00:24:54.940
So these are just some really great little Jupyter tricks


00:24:54.940 --> 00:24:56.780
to make yourself more productive


00:24:56.780 --> 00:25:00.140
and not have to touch the mouse as much.


00:25:00.140 --> 00:25:02.140
So anyway, some good things here.


00:25:02.140 --> 00:25:02.980
- I think it's great.


00:25:02.980 --> 00:25:05.380
I wish actually Jupyter had more hotkeys.


00:25:05.380 --> 00:25:08.060
There's really a lot more they could do there.


00:25:08.060 --> 00:25:09.740
But knowing the ones that are there,


00:25:09.740 --> 00:25:11.260
I think it's pretty excellent.


00:25:11.260 --> 00:25:17.980
Yeah, for me, I often try to use Vim shortcuts and it's just not, it doesn't work.


00:25:17.980 --> 00:25:18.980
It's just not going to have it.


00:25:18.980 --> 00:25:21.980
Aaron, what are your thoughts here?


00:25:21.980 --> 00:25:25.780
The fstring article was really nice.


00:25:25.780 --> 00:25:28.060
Yeah, it's just nice.


00:25:28.060 --> 00:25:31.980
It's hard to find a good fstring article that tells you all these different things you can


00:25:31.980 --> 00:25:32.980
do.


00:25:32.980 --> 00:25:36.660
So I was just scanning through it and we use fstrings quite a bit.


00:25:36.660 --> 00:25:43.460
And if we have old format Python strings that are in the code that we're updating in a pull


00:25:43.460 --> 00:25:47.620
request, we always ask the developer to please update those old ones.


00:25:47.620 --> 00:25:49.980
So use AppString as well.


00:25:49.980 --> 00:25:51.460
They're just so much more readable.


00:25:51.460 --> 00:25:53.260
As you're going through it, go ahead and fix them.


00:25:53.260 --> 00:25:54.260
Yeah.


00:25:54.260 --> 00:25:55.260
Yeah.


00:25:55.260 --> 00:25:57.580
Instead of like fixing them all, just go through and fix the ones that you're touching.


00:25:57.580 --> 00:25:59.060
Does PyUpgrade do that?


00:25:59.060 --> 00:26:00.380
Or I can't remember.


00:26:00.380 --> 00:26:01.940
I can tell you that Flint does.


00:26:01.940 --> 00:26:02.940
Flint.


00:26:02.940 --> 00:26:03.940
Yeah, that's it.


00:26:03.940 --> 00:26:04.940
Flint.


00:26:04.940 --> 00:26:09.540
I've taken Flint and run it against like large projects that I've done in it.


00:26:09.540 --> 00:26:14.540
In the early days, it introduced one bug out of 20,000 lines of code, but it, it


00:26:14.540 --> 00:26:19.760
wrote, rewrote like a thousand print or string formats of various versions.


00:26:19.760 --> 00:26:21.280
And I found it to be really helpful.


00:26:21.280 --> 00:26:21.600
So.


00:26:21.600 --> 00:26:23.860
And that's F L Y N T.


00:26:23.860 --> 00:26:26.720
Just for the podcast listeners.


00:26:26.720 --> 00:26:27.980
Exactly.


00:26:27.980 --> 00:26:28.500
Thank you.


00:26:28.500 --> 00:26:29.300
Yeah.


00:26:29.300 --> 00:26:30.440
So this is really good too.


00:26:30.440 --> 00:26:34.160
You know, if you, if you ask people to do that, you could suggest like, and you


00:26:34.160 --> 00:26:35.920
could try just running this on your code.


00:26:35.920 --> 00:26:39.000
Start and just make sure it doesn't break anything, but it's been pretty


00:26:39.000 --> 00:26:41.040
stable since the oddities that hit.


00:26:41.040 --> 00:26:41.520
That's cool.


00:26:41.520 --> 00:26:42.140
Check that.


00:26:42.140 --> 00:26:42.800
We'll check that out.


00:26:42.800 --> 00:26:43.120
Cool.


00:26:43.120 --> 00:26:43.800
Indeed.


00:26:43.800 --> 00:26:44.840
All right, Brian, you all done with yours?


00:26:44.840 --> 00:26:45.400
Yeah.


00:26:45.400 --> 00:26:47.080
Um, and I just did look it up.


00:26:47.080 --> 00:26:49.120
I think the PyUpgrade also does it.


00:26:49.120 --> 00:26:50.600
Oh no.


00:26:50.600 --> 00:26:54.800
Anthony Lister out there in the audience is just, just trying to egg us on single


00:26:54.800 --> 00:26:56.680
quotes or double quotes with those f-strings.


00:26:56.680 --> 00:26:59.280
It's the last episode.


00:26:59.280 --> 00:27:00.120
Yeah, exactly.


00:27:00.120 --> 00:27:01.400
That's the whole debate last episode.


00:27:01.400 --> 00:27:02.520
All right.


00:27:02.640 --> 00:27:06.480
My next item is bio GPT.


00:27:06.480 --> 00:27:13.440
And so we've heard about ChatGPT and this is similar stuff, but applied to biology.


00:27:13.440 --> 00:27:14.520
So, right.


00:27:14.520 --> 00:27:16.080
You create a cat that barks.


00:27:16.080 --> 00:27:17.120
Exactly.


00:27:17.120 --> 00:27:19.880
And now make it mutate into a snake.


00:27:19.880 --> 00:27:23.320
Um, how many generations will this take?


00:27:23.320 --> 00:27:23.600
Three.


00:27:23.600 --> 00:27:24.280
All right.


00:27:24.280 --> 00:27:28.360
So I want to just, as a, as a way to, you know, it's not really easy for me to demo


00:27:28.360 --> 00:27:33.860
So like, let me, as a way of motivation, just show you like a chat TV thing, since you were just asking about Brian.


00:27:33.860 --> 00:27:40.860
Check this out. Here's a, here's a cool program that talks about how you should never write insanely nested code.


00:27:40.860 --> 00:27:46.360
You should instead use, so the, for people listening, this is like, it says, is this a platypus?


00:27:46.360 --> 00:27:52.360
If self.isManimal, and then if self.hasFert, then if self.hasBeak, and so on and so on.


00:27:52.360 --> 00:27:57.360
It's like nested over so the code starts in the middle, maybe a bit to the right of the screen.


00:27:57.360 --> 00:27:58.640
And it says return true, right?


00:27:58.640 --> 00:27:59.400
Like you shouldn't do that.


00:27:59.400 --> 00:28:00.080
What should you do?


00:28:00.080 --> 00:28:01.320
You should write guarding clauses.


00:28:01.320 --> 00:28:02.760
So check this out, Brian.


00:28:02.760 --> 00:28:08.360
If I go over to chat GP and say, I'm going to give you a program in Python.


00:28:08.360 --> 00:28:12.280
I want you to name it arrow and it'll say, sure.


00:28:12.280 --> 00:28:13.640
Arrow sounds like a great name.


00:28:13.640 --> 00:28:16.080
And I give it this and it talks about what it does.


00:28:16.080 --> 00:28:21.800
It checks whether it's a platypus and say, rewrite arrow to be less


00:28:21.800 --> 00:28:24.160
nested using guarding clauses.


00:28:24.160 --> 00:28:24.880
Certainly.


00:28:24.880 --> 00:28:25.360
Here you go.


00:28:25.360 --> 00:28:26.920
It says, and what is it right?


00:28:27.320 --> 00:28:30.120
Exactly the new pattern that you should have used.


00:28:30.120 --> 00:28:31.040
Is that insane?


00:28:31.040 --> 00:28:31.880
What do you think Brian?


00:28:31.880 --> 00:28:32.360
Aaron?


00:28:32.360 --> 00:28:37.000
I wouldn't write the code like this anyway, but okay.


00:28:37.000 --> 00:28:37.480
All right.


00:28:37.480 --> 00:28:43.640
Now that, so arrow checks or a platypus.


00:28:43.640 --> 00:28:44.360
What?


00:28:44.360 --> 00:28:45.360
Plant, plant.


00:28:45.360 --> 00:28:46.400
Fix it.


00:28:46.400 --> 00:28:47.080
Whatever.


00:28:47.080 --> 00:28:48.120
Oh, here, hold on.


00:28:48.120 --> 00:28:49.760
Platypus.


00:28:49.760 --> 00:28:54.880
Rewrite it to check for, crocodiles.


00:28:54.880 --> 00:28:55.560
Look at this.


00:28:55.560 --> 00:28:56.320
So sure.


00:28:56.320 --> 00:28:57.120
No problem.


00:28:57.240 --> 00:28:58.320
We're going to write, is it a crocodile?


00:28:58.320 --> 00:29:00.420
And look, the tests are, is it a reptile?


00:29:00.420 --> 00:29:01.800
Has scales?


00:29:01.800 --> 00:29:03.280
Does it have jaws?


00:29:03.280 --> 00:29:04.760
Does it have a four chamber heart?


00:29:04.760 --> 00:29:07.760
Is that insane?


00:29:07.760 --> 00:29:11.360
And all I did is I'm going to give you this code and just start asking questions.


00:29:11.360 --> 00:29:12.200
So, okay.


00:29:12.200 --> 00:29:13.320
So impressive.


00:29:13.320 --> 00:29:13.520
Right?


00:29:13.520 --> 00:29:15.920
So back to chat, a bio GPT.


00:29:15.920 --> 00:29:20.360
Think of what this can do for doctors and nurses and people trying to


00:29:20.360 --> 00:29:23.400
understand like written text of this.


00:29:23.420 --> 00:29:29.860
So it contains this bio GPT contains a implementation specifically


00:29:29.860 --> 00:29:33.020
trained for like medical analysis.


00:29:33.020 --> 00:29:36.560
Kind of like chat GP is a general analysis tool.


00:29:36.560 --> 00:29:39.440
This one is like specifically for medicine.


00:29:39.440 --> 00:29:39.960
Okay.


00:29:39.960 --> 00:29:41.120
So pretty cool.


00:29:41.120 --> 00:29:44.480
Apparently it can do pub med QA tests.


00:29:44.480 --> 00:29:48.500
I have no idea what that is, but if I was a doctor, I'm sure this is like, how,


00:29:48.500 --> 00:29:52.460
how good are you at answering questions with 81% accuracy, which might sound like,


00:29:52.700 --> 00:29:54.860
"Well, that's 19% not good enough,


00:29:54.860 --> 00:29:58.500
"but I bet you doctors don't do it at 100% accuracy either."


00:29:58.500 --> 00:30:00.100
You know, there's a lot of examples


00:30:00.100 --> 00:30:04.120
where AI is predicting cancer sooner or better


00:30:04.120 --> 00:30:05.500
or more accurately than--


00:30:05.500 --> 00:30:08.060
- Right, and I bet it's better than like Dr. Google


00:30:08.060 --> 00:30:11.380
and looking up your symptoms and thinking


00:30:11.380 --> 00:30:13.020
you have the worst thing.


00:30:13.020 --> 00:30:14.420
- Yeah, yeah, exactly.


00:30:14.420 --> 00:30:15.740
- Well, that's what I was curious about,


00:30:15.740 --> 00:30:18.340
if it was named like, what am I dying of today?


00:30:18.340 --> 00:30:19.980
(both laughing)


00:30:19.980 --> 00:30:21.400
- Will I die, GPT?


00:30:21.400 --> 00:30:23.120
- I got one in the mouth.


00:30:23.120 --> 00:30:25.000
- Oh, it seems grumpy, I don't know.


00:30:25.000 --> 00:30:26.240
So it comes with different models.


00:30:26.240 --> 00:30:28.880
It has the GP, the BioGPT one,


00:30:28.880 --> 00:30:30.440
but it also has the large one.


00:30:30.440 --> 00:30:32.080
And my experience with this stuff is


00:30:32.080 --> 00:30:33.820
the large models are where it's at.


00:30:33.820 --> 00:30:36.860
The regular ones are quick, but they're not very accurate.


00:30:36.860 --> 00:30:37.960
You wanna go for the large model.


00:30:37.960 --> 00:30:39.560
So there's a bunch of different ones,


00:30:39.560 --> 00:30:43.200
like one trained for a fine-tuned for


00:30:43.200 --> 00:30:47.240
relation extraction task on KD-DTI,


00:30:47.240 --> 00:30:49.840
which is a certain type of data set or other ones.


00:30:49.840 --> 00:30:51.660
so you can pick which ones it is.


00:30:51.660 --> 00:30:53.780
And then you just start writing Python code.


00:30:53.780 --> 00:30:56.780
So you can either use a PyTorch style of programming,


00:30:56.780 --> 00:31:00.140
or I think down here there's a hugging face variant as well.


00:31:00.140 --> 00:31:03.240
So it seems a little bit cleaner, a little bit nicer.


00:31:03.240 --> 00:31:06.220
So you just, your model is from pre-trained


00:31:06.220 --> 00:31:08.740
Microsoft slash BioGPT.


00:31:08.740 --> 00:31:11.780
And there's even a thing where you can try it out down here.


00:31:11.780 --> 00:31:15.300
There's like a live, yeah, some answering questions,


00:31:15.300 --> 00:31:17.020
for example, here you can pull this up


00:31:17.020 --> 00:31:24.220
you can ask it questions. For example, this one, "Should chest wall irradiation be included


00:31:24.220 --> 00:31:30.020
after..." Yes. It's just yes. I don't know. People can play around with the examples.


00:31:30.020 --> 00:31:34.180
Like I said, I'm not a doctor. I don't really know reasonable things to ask it. But it's


00:31:34.180 --> 00:31:38.780
a weird world that we live in, and it has lots of positives and lots of negatives, I'm


00:31:38.780 --> 00:31:43.480
sure, that we're going to come to learn about. But BioGPT, if you're working on analyzing


00:31:43.480 --> 00:31:45.420
medical texts, check this out. It's from Microsoft.


00:31:45.420 --> 00:31:50.380
I think anything that would reduce the amount of time doctors and medical professionals


00:31:50.380 --> 00:31:52.720
have to spend on the computer is probably good.


00:31:52.720 --> 00:31:57.880
So if this means they need to enter less things in because it's just like figuring stuff out


00:31:57.880 --> 00:32:00.780
for them, that would be really powerful.


00:32:00.780 --> 00:32:05.280
But if it's just another tool that they have to use on the internet that makes them not


00:32:05.280 --> 00:32:09.380
get to be face to face with their patients, then I'm just kind of skeptical of it.


00:32:09.380 --> 00:32:14.400
Yeah, I feel like you could ask it questions like, we gave this person, here's their symptoms,


00:32:14.400 --> 00:32:17.680
we gave them this diagnosis, is that consistent with,


00:32:17.680 --> 00:32:19.400
you know, historical things, and it could do a lot


00:32:19.400 --> 00:32:22.540
of comparisons and analysis, or do you think this person


00:32:22.540 --> 00:32:24.760
has this disease, instead of just yes or no,


00:32:24.760 --> 00:32:26.200
it's like, why do you think that?


00:32:26.200 --> 00:32:28.080
You know, you could have this conversation with it,


00:32:28.080 --> 00:32:29.600
and it may be able to tell you.


00:32:29.600 --> 00:32:30.920
- Yeah, that's really cool.


00:32:30.920 --> 00:32:32.560
- Indeed, all right.


00:32:32.560 --> 00:32:35.680
- Well, I guess, I was joking about it a little bit,


00:32:35.680 --> 00:32:37.840
but I think there's a lot of power there.


00:32:37.840 --> 00:32:41.000
I mean, like you said, I don't know,


00:32:41.000 --> 00:32:43.700
if we can get doctors actually seeing people more,


00:32:43.700 --> 00:32:47.300
but also maybe a 911 call could like,


00:32:47.300 --> 00:32:49.580
if we determine it's not an emergency yet,


00:32:49.580 --> 00:32:50.900
but maybe we could direct the person


00:32:50.900 --> 00:32:53.420
to the right place faster.


00:32:53.420 --> 00:32:56.040
I mean, there's lots of places where maybe somebody


00:32:56.040 --> 00:32:59.820
not with the full degree, but somebody that's still


00:32:59.820 --> 00:33:02.620
pretty involved with medicine can utilize this


00:33:02.620 --> 00:33:05.500
to ask better questions and get somebody


00:33:05.500 --> 00:33:06.940
to somewhere faster.


00:33:06.940 --> 00:33:10.140
- Right, or even highlight, what were the key takeaways


00:33:10.140 --> 00:33:11.660
from this visit with the doctor?


00:33:11.660 --> 00:33:12.780
- Yeah. - Right.


00:33:12.780 --> 00:33:15.860
Yeah, so, yeah, anyway, it's cool.


00:33:15.860 --> 00:33:17.660
- Yep, all right, one more bit of feedback out there.


00:33:17.660 --> 00:33:20.140
Will McGugan, hey Will, this is the kind of thing


00:33:20.140 --> 00:33:23.900
I'd like to see from AI used for not putting artists


00:33:23.900 --> 00:33:25.340
and copywriters out of business.


00:33:25.340 --> 00:33:28.780
Yeah, I agree, amplifying people's good work,


00:33:28.780 --> 00:33:30.660
not necessarily replacing it.


00:33:30.660 --> 00:33:32.340
- Yeah. - We'll see where it goes.


00:33:32.340 --> 00:33:34.300
All right, Erin, you got the last one?


00:33:34.300 --> 00:33:38.640
- Okay, great, so yeah, talking about code mentorship


00:33:38.640 --> 00:33:40.740
and communicating with new developers,


00:33:40.740 --> 00:33:42.380
that's my next topic.


00:33:42.380 --> 00:33:47.380
So Sheena O'Connell gave a talk at DjangoCon last year.


00:33:47.380 --> 00:33:49.400
I attended that conference,


00:33:49.400 --> 00:33:52.160
but I missed this talk and watched it online later.


00:33:52.160 --> 00:33:54.300
And it's about her work at Muzi


00:33:54.300 --> 00:33:56.540
training unemployed young people


00:33:56.540 --> 00:33:59.820
in underserved communities in Africa.


00:33:59.820 --> 00:34:02.160
So her company had to quickly build


00:34:02.160 --> 00:34:04.600
an online learning management system


00:34:04.600 --> 00:34:07.020
when the pandemic hit in 2020.


00:34:07.020 --> 00:34:10.140
And they built that LMS in Django,


00:34:10.140 --> 00:34:12.540
which is why she was giving a talk at DjangoCon.


00:34:12.540 --> 00:34:15.500
Before then, the learning was all done in person.


00:34:15.500 --> 00:34:18.660
Anyway, you might think that's cool and all,


00:34:18.660 --> 00:34:21.620
but how can I apply that to me?


00:34:21.620 --> 00:34:24.740
I think that this talk is really excellent.


00:34:24.740 --> 00:34:29.780
I also think, I don't know if you all have ever listened to the Django Chat podcast.


00:34:29.780 --> 00:34:31.780
They had Sheena on,


00:34:31.780 --> 00:34:35.260
and she talked about her work at Umoosi,


00:34:35.260 --> 00:34:39.140
and she talked about getting learners to review each other,


00:34:39.140 --> 00:34:45.380
and also teaching green developers how to use GitHub and things like that so they don't, quote,


00:34:45.380 --> 00:34:51.780
"bother" their teammates too much once they get into their jobs after they're finished at Amuzi.


00:34:51.780 --> 00:34:56.980
And she specifically said, the quote I liked was, "What sort of thing does a person need to know


00:34:56.980 --> 00:35:02.260
in order to not annoy their co-workers in the first three months?" So I really liked thinking


00:35:02.260 --> 00:35:09.620
about the learning in that way. And yeah, so something we started doing recently where I work


00:35:09.620 --> 00:35:15.220
is we had been doing code reviews, me and the other codebase lead had been kind of just doing


00:35:15.220 --> 00:35:22.820
them all ourselves. And our project manager, Matt, suggested we take, we have a new requirement where


00:35:22.820 --> 00:35:29.220
two non-codebase leads have to review any pull request before any codebase lead looks at it.


00:35:29.220 --> 00:35:35.540
So that's something we just implemented. And have either of you have familiarity with


00:35:35.540 --> 00:35:38.980
with pull requests and code reviews in your day to day? Yes.


00:35:38.980 --> 00:35:47.220
Yeah. So I have to say it's it's it's really like been really helpful to us. And I liked


00:35:47.220 --> 00:35:53.220
I liked Sheena talking about that on on the Django chat podcast. She also mentioned that


00:35:53.220 --> 00:35:59.780
at Umusee, the learners review each other. So someone who is further along in her course gets


00:35:59.780 --> 00:36:07.780
to both learn how to review code and also review someone else's answer. Because with Python,


00:36:07.780 --> 00:36:14.420
there are a lot of different correct answers, right? So just reactivating that part of their


00:36:14.420 --> 00:36:19.860
brain to look back at a previous answer is kind of cool. Yeah. Were you going to?


00:36:19.860 --> 00:36:25.580
I also think that it's cool that they're learning more than just loops, variables, functions,


00:36:25.580 --> 00:36:29.580
you know, but how to coexist as a teammate in a software team.


00:36:29.580 --> 00:36:30.580
Yeah.


00:36:30.580 --> 00:36:31.580
Yeah, that's cool.


00:36:31.580 --> 00:36:32.580
Yeah, she could find there.


00:36:32.580 --> 00:36:39.060
Yeah, so, so we're always looking for new ways to like onboard developers.


00:36:39.060 --> 00:36:44.860
And another cool idea that Sheena had was writing half solutions and leaving gaps for


00:36:44.860 --> 00:36:45.940
others to fill in the blank.


00:36:45.940 --> 00:36:51.220
I thought that was kind of cool because when we onboard a new developer to our code base,


00:36:51.220 --> 00:36:52.740
it can be really rocky.


00:36:52.740 --> 00:36:55.940
And I kind of thought like, oh, that might be kind of neat, instead of giving them a


00:36:55.940 --> 00:37:00.340
whole ticket to work on, like half finishing a ticket and like letting them fill in the


00:37:00.340 --> 00:37:02.780
other blanks is kind of cool.


00:37:02.780 --> 00:37:07.580
And just one more article that I found about this was on the Cactus blog.


00:37:07.580 --> 00:37:11.880
I used to work at Cactus as a Django developer there.


00:37:11.880 --> 00:37:15.200
And so I still follow their blog quite often.


00:37:15.200 --> 00:37:21.940
And they had this recent blog post from Dimitri Chukin about their new internal mentorship


00:37:21.940 --> 00:37:25.740
program there, where they have three different paths.


00:37:25.740 --> 00:37:31.020
And one is apprenticeship for folks just starting out as developers.


00:37:31.020 --> 00:37:35.060
One is for fellowship, and that's for people who are currently training in one of those


00:37:35.060 --> 00:37:36.540
coding camps.


00:37:36.540 --> 00:37:40.860
And then the third one, which is really kind of special, is mentorship for high school


00:37:40.860 --> 00:37:41.860
students.


00:37:41.860 --> 00:37:44.340
So I thought that was kind of neat.


00:37:44.340 --> 00:37:49.460
still where I work, we're still figuring out how to onboard people. I feel like that is one of the


00:37:49.460 --> 00:37:55.860
hardest things. Do you both know what I'm talking about? Onboarding is extremely difficult and it


00:37:55.860 --> 00:38:00.740
depends on how much, well it depends on the skill set you need people to have. I mean,


00:38:00.740 --> 00:38:05.380
when you have like a diverse set of skills, we always face that. So I've got, I need somebody


00:38:05.380 --> 00:38:12.500
that knows both Python well, testing practices well, C++ well, and it'd be great if they also


00:38:12.500 --> 00:38:15.460
new like RF measurements and stuff like that.


00:38:15.460 --> 00:38:16.980
And you just can't find those people.


00:38:16.980 --> 00:38:21.260
So you have to pick what you want somebody to complement somebody else with


00:38:21.260 --> 00:38:24.460
and know that you're going to have to help train.


00:38:24.460 --> 00:38:24.900
Right.


00:38:24.900 --> 00:38:26.820
They support them in the other areas.


00:38:26.820 --> 00:38:27.060
Yeah.


00:38:27.060 --> 00:38:27.540
Yeah.


00:38:27.540 --> 00:38:27.940
Yeah.


00:38:27.940 --> 00:38:28.220
Cool.


00:38:28.220 --> 00:38:34.300
And one of the things that you mentioned, like code reviews, we, we use code


00:38:34.300 --> 00:38:39.780
reviews a lot for communication, not, not necessarily for people to catch what


00:38:39.780 --> 00:38:43.300
somebody else is doing wrong, but to make sure that everybody understands what the rest


00:38:43.300 --> 00:38:44.580
of the team is working on.


00:38:44.580 --> 00:38:50.540
So we, especially for long running things, we have a practice of using draft code reviews.


00:38:50.540 --> 00:38:55.620
So code reviews and drafts so that, and GitLab won't let you merge it if it says draft in


00:38:55.620 --> 00:38:56.620
the title.


00:38:56.620 --> 00:39:01.900
So, so then then people can just keep updating that and then they can get feedback even when


00:39:01.900 --> 00:39:04.620
it's not ready, when the code's not ready yet.


00:39:04.620 --> 00:39:06.620
So good way to do that.


00:39:06.620 --> 00:39:07.620
Yeah.


00:39:07.620 --> 00:39:08.620
Cool.


00:39:08.620 --> 00:39:09.620
Nice.


00:39:09.620 --> 00:39:12.540
- All right, that's all of our items.


00:39:12.540 --> 00:39:14.300
Brian, you got some extras for us to share?


00:39:14.300 --> 00:39:15.980
Anything else you want to throw out there real quick?


00:39:15.980 --> 00:39:17.540
- No, I spent most of my extra time


00:39:17.540 --> 00:39:19.500
getting my talk ready for PyCascades.


00:39:19.500 --> 00:39:21.260
So PyCascades coming up soon.


00:39:21.260 --> 00:39:23.220
- Yeah, indeed. Coming up very soon.


00:39:23.220 --> 00:39:24.060
Excellent.


00:39:24.060 --> 00:39:24.880
Erin, how about you?


00:39:24.880 --> 00:39:25.720
Want to throw anything out there?


00:39:25.720 --> 00:39:28.660
- Yeah, DjangoCon US is in Durham,


00:39:28.660 --> 00:39:30.420
which is 15 minutes from where I live.


00:39:30.420 --> 00:39:31.700
So I'm excited.


00:39:31.700 --> 00:39:33.100
- Nice.


00:39:33.100 --> 00:39:35.060
North Carolina is a fun place to visit.


00:39:35.060 --> 00:39:35.900
- Yes.


00:39:35.900 --> 00:39:37.840
- Generally warm, although not always warm,


00:39:37.840 --> 00:39:39.540
but generally warmer than a lot of places.


00:39:39.540 --> 00:39:41.300
- It's generally warmer and it's in October.


00:39:41.300 --> 00:39:44.860
So it'll be kind of a nice time of year probably.


00:39:44.860 --> 00:39:47.620
Hopefully not boiling hot, but yeah, probably not.


00:39:47.620 --> 00:39:48.460
- Cool.


00:39:48.460 --> 00:39:50.300
I'll have to try to see if I can get an excuse


00:39:50.300 --> 00:39:51.120
to get out there.


00:39:51.120 --> 00:39:51.960
That'd be fun.


00:39:51.960 --> 00:39:52.780
All right, excellent.


00:39:52.780 --> 00:39:53.620
Anything else?


00:39:53.620 --> 00:39:54.460
Is that it?


00:39:54.460 --> 00:39:55.280
- How about you?


00:39:55.280 --> 00:39:56.120
- Yeah, I got one.


00:39:56.120 --> 00:39:56.980
You know I do.


00:39:56.980 --> 00:39:59.940
All right, so an article came out a few days ago.


00:39:59.940 --> 00:40:03.800
Security researchers uncover 700 malicious open source


00:40:03.800 --> 00:40:05.980
packages on NPM and PyPI.


00:40:05.980 --> 00:40:08.300
This used to be a thing that could even headline.


00:40:08.300 --> 00:40:09.940
I think we even headlined in, like,


00:40:09.940 --> 00:40:11.900
was the title of one of our shows, Brian?


00:40:11.900 --> 00:40:13.460
The news here is not this.


00:40:13.460 --> 00:40:16.580
The news is that this stuff is just not news anymore.


00:40:16.580 --> 00:40:20.280
So people be careful out there when you pip install stuff,


00:40:20.280 --> 00:40:21.700
make sure you spell it right.


00:40:21.700 --> 00:40:24.300
That's like the, that's generally the worst thing


00:40:24.300 --> 00:40:25.300
is the typo squatting.


00:40:25.300 --> 00:40:28.180
So anyway, the fact that this is not released.


00:40:28.180 --> 00:40:29.780
- I didn't realize that that's how they were,


00:40:29.780 --> 00:40:31.740
oh, that's so smart.


00:40:31.740 --> 00:40:33.660
- They might put a virus in request


00:40:33.660 --> 00:40:36.460
instead of requests with the plural, you know what I mean?


00:40:36.460 --> 00:40:38.680
or if you transpose two letters


00:40:38.680 --> 00:40:42.100
and there's some stuff that the PIPA is trying to do


00:40:42.100 --> 00:40:44.800
to work that, but it's still tricky.


00:40:44.800 --> 00:40:47.300
- Or standard lib stuffs that you don't have to install.


00:40:47.300 --> 00:40:49.720
It's just there, people will explore on that.


00:40:49.720 --> 00:40:51.620
- Right, right, yeah.


00:40:51.620 --> 00:40:53.160
And it's create a package for that.


00:40:53.160 --> 00:40:55.800
All right, that's not the end of it.


00:40:55.800 --> 00:40:57.920
Another one, Brian, do you remember I announced,


00:40:57.920 --> 00:40:59.440
hey everybody, update your Git.


00:40:59.440 --> 00:41:02.040
There's a security vulnerability in Git.


00:41:02.040 --> 00:41:03.200
This is the first time this has happened


00:41:03.200 --> 00:41:04.320
in a really long time.


00:41:04.320 --> 00:41:05.160
- Yeah.


00:41:05.160 --> 00:41:13.160
make sure you apply git, or you install to dot 39.1 or higher. Well, guess what, two dot 39.1


00:41:13.160 --> 00:41:19.640
has a vulnerability that's completely different. But if you try to clone from a malicious repository,


00:41:19.640 --> 00:41:25.560
you're going to be having a bad day. So update your get again. All right. And then also, I'm


00:41:25.560 --> 00:41:32.120
working on a project now where I needed a an ignore file. But the project was originally created in


00:41:32.120 --> 00:41:37.080
one language and I wanted the ignore file for another and I was basically going to combine


00:41:37.080 --> 00:41:42.120
them. So maybe you all know this, maybe you know this, but GitHub, when you go to create a new


00:41:42.120 --> 00:41:47.400
project, you can choose what kind of project is it. Is it C++? Is it Python? Is it Dart? Is it


00:41:47.400 --> 00:41:54.920
Flutter? And you'll get a different ignore for that. Well, there's actually a repo, github.com/github/getignore


00:41:54.920 --> 00:42:00.280
and every single language that you could have chosen that drop down has its ignore file here.


00:42:00.280 --> 00:42:04.960
So for example, the Python one, this, it's checked into this project.


00:42:04.960 --> 00:42:09.760
So when you say create a new Python project, what comes out as the ignore is actually this


00:42:09.760 --> 00:42:10.760
file.


00:42:10.760 --> 00:42:15.080
So if there's people out there who really need a change to the default behavior of the


00:42:15.080 --> 00:42:18.960
Python get ignore for projects, you know, you could go to a PR for this.


00:42:18.960 --> 00:42:23.840
But the way I use it is I just said, I also need one on Flutter or there's not a Flutter


00:42:23.840 --> 00:42:25.160
one, but there's a Dart one.


00:42:25.160 --> 00:42:28.480
So I grabbed the one for Dart and piled that in there as well.


00:42:28.480 --> 00:42:29.320
- Yeah, I've got it too.


00:42:29.320 --> 00:42:32.520
Or even if you're not using GitHub, you can use this for.


00:42:32.520 --> 00:42:34.000
- Yeah, exactly, it has nothing to do with GitHub.


00:42:34.000 --> 00:42:37.240
It's just you have access to every version


00:42:37.240 --> 00:42:40.120
of an ignore file that GitHub thinks is good.


00:42:40.120 --> 00:42:43.040
Related to that is getignore.io.


00:42:43.040 --> 00:42:44.240
This is another one you come down here


00:42:44.240 --> 00:42:45.160
and search for other stuff.


00:42:45.160 --> 00:42:49.520
Like for example, there was no Flutter in the GitHub one,


00:42:49.520 --> 00:42:50.640
but over here I can put Flutter,


00:42:50.640 --> 00:42:53.320
and here's my Flutter one for all the crazy build,


00:42:53.320 --> 00:42:55.200
code generation madness you get.


00:42:55.200 --> 00:42:57.800
It is a project by TopTile, but getignore.io,


00:42:57.800 --> 00:43:01.360
When you just put it in here, I'm looking for whatever,


00:43:01.360 --> 00:43:02.920
and then it'll pull up.


00:43:02.920 --> 00:43:06.840
- See, type pytest, see if it'll do the results.


00:43:06.840 --> 00:43:10.120
- No results found, oh, sad.


00:43:10.120 --> 00:43:10.960
Sad face.


00:43:10.960 --> 00:43:14.080
But anyway, if you're looking for ignores for projects,


00:43:14.080 --> 00:43:15.640
there you go, those are kind of nice.


00:43:15.640 --> 00:43:16.720
- Cool, nice.


00:43:16.720 --> 00:43:19.360
- All right, are you all ready for a joke?


00:43:19.360 --> 00:43:20.200
- Yeah. - Yes.


00:43:20.200 --> 00:43:22.320
- Brian, I thought about you on this one in particular,


00:43:22.320 --> 00:43:24.280
so we'll see what you think of it.


00:43:24.280 --> 00:43:27.300
So this is one, it's a cartoon,


00:43:27.300 --> 00:43:29.960
And it has a cartoon character looking at two red buttons.


00:43:29.960 --> 00:43:31.700
They're both gonna do something massive.


00:43:31.700 --> 00:43:34.100
One has the star asterisk character


00:43:34.100 --> 00:43:36.340
and one has the ampersand.


00:43:36.340 --> 00:43:38.520
And there's the person there just sweating out,


00:43:38.520 --> 00:43:40.380
like, their fingers in the middle,


00:43:40.380 --> 00:43:41.780
doesn't know which one to pick.


00:43:41.780 --> 00:43:44.300
And it said, "My C code isn't working.


00:43:44.300 --> 00:43:47.420
"No one involves pointers."


00:43:47.420 --> 00:43:49.380
What do you think, Brian?


00:43:49.380 --> 00:43:50.980
- I would not hire this person.


00:43:50.980 --> 00:43:52.340
(laughing)


00:43:52.340 --> 00:43:55.420
- So the star will dereference the pointer,


00:43:55.420 --> 00:43:59.500
turning a pointer into one less level of pointing and the value where the


00:43:59.500 --> 00:44:02.540
ampersand will take a variable and make it a pointer, or if it is a pointer,


00:44:02.540 --> 00:44:06.740
make it a pointer to a pointer or even more so, which one do you press?


00:44:06.740 --> 00:44:07.400
Oh my gosh.


00:44:07.400 --> 00:44:10.600
Should be obvious by context.


00:44:10.600 --> 00:44:11.880
It says a C++.


00:44:11.880 --> 00:44:17.480
Erin, do you have to do any of this kind of crazy stuff or you thankfully


00:44:17.480 --> 00:44:19.180
above and beyond the pointer world?


00:44:19.180 --> 00:44:21.460
I, yeah, thankfully not.


00:44:21.460 --> 00:44:22.280
Yeah.


00:44:22.280 --> 00:44:24.640
Oh, no, no C++ in my world.


00:44:25.040 --> 00:44:27.260
- Yeah, all right, well, that's what I got.


00:44:27.260 --> 00:44:28.580
I brought that one for you, Brian.


00:44:28.580 --> 00:44:29.680
- That's good, thanks.


00:44:29.680 --> 00:44:33.720
I'll incorporate that into my next interview.


00:44:33.720 --> 00:44:36.900
(both laughing)


00:44:36.900 --> 00:44:40.020
- You need to change a string, you're given a variable.


00:44:40.020 --> 00:44:41.620
Which one of these do you push?


00:44:41.620 --> 00:44:43.900
- All right, cool.


00:44:43.900 --> 00:44:45.900
- All right, well, Erin, it's been great


00:44:45.900 --> 00:44:46.900
to have you on the show.


00:44:46.900 --> 00:44:47.740
Thanks for being here.


00:44:47.740 --> 00:44:48.740
- Thanks for having me.


00:44:48.740 --> 00:44:50.060
Nice to meet you both.


00:44:50.060 --> 00:44:51.820
- Yeah, you bet, and Brian, thanks as always.


00:44:51.820 --> 00:44:52.940
See you, see y'all.

