WEBVTT

00:00:00.001 --> 00:00:04.540
Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.540 --> 00:00:09.640
earbuds. This is episode 50, recorded November 1st, 2017. I'm Michael Kennedy.

00:00:09.640 --> 00:00:10.540
And I'm Brian Okken.

00:00:10.540 --> 00:00:14.620
And like always, we have some pretty awesome stuff lined up for you. But I want to say thanks.

00:00:14.620 --> 00:00:19.440
Thanks to DigitalOcean. So DigitalOcean is sponsoring this episode, and they're going to

00:00:19.440 --> 00:00:24.480
share this new thing they've launched with you guys called Spaces. It's like S3, but way,

00:00:24.480 --> 00:00:28.900
way better. Tell you more about that later. Right now, I want to be a little philosophical and think

00:00:28.900 --> 00:00:35.240
like a Pythonista. Yeah, think like a Pythonista. We're going to highlight a video from Luciano

00:00:35.240 --> 00:00:43.880
Romalo. And he did a talk at PyBay 2017 called Think Like a Pythonista. And I, one of the things

00:00:43.880 --> 00:00:49.080
actually, when most of my programming, I don't really create new types that much in Python.

00:00:49.080 --> 00:00:56.380
I take advantage of, I don't really think like I'm creating new types. Like I'll use named tuples or

00:00:56.380 --> 00:01:02.160
something. But even so, I take advantage of all the built-in types. And that's kind of what part

00:01:02.160 --> 00:01:08.300
of his talk is about. It's, he create, walks through talking about creating another container

00:01:08.300 --> 00:01:15.220
type called a deck of cards. So he's got a cards type and a deck type. And the deck has to do,

00:01:15.220 --> 00:01:22.620
is a container, and it has to do things like indexing and shuffling and stuff. And he walks through how to

00:01:22.620 --> 00:01:29.300
do that so that you can use the built-in iterate for loops and accessors. It's just a really kind

00:01:29.300 --> 00:01:35.700
of a fascinating look at how, how little code it takes to make something look like another,

00:01:35.700 --> 00:01:39.700
any other Python type using some of the dunders and stuff.

00:01:39.700 --> 00:01:43.180
Yeah, for sure. I think he did a super job with this. And this comes from his book,

00:01:43.180 --> 00:01:47.880
Fluent Python, which is absolutely one of the best books once you know a little bit of the language to

00:01:47.880 --> 00:01:53.340
really get the zen of it. And he's really big into the Python data model, the dunder methods,

00:01:53.340 --> 00:01:57.440
and all that kind of stuff. And so I'm sure this is a really great way to see how that like,

00:01:57.440 --> 00:01:59.200
comes out in a custom type, right?

00:01:59.200 --> 00:02:03.020
Yeah, it is. And also, I think it's, it's a good talk for somebody to watch,

00:02:03.020 --> 00:02:06.340
even if you don't think you're going to ever create a container type yourself,

00:02:06.340 --> 00:02:12.880
because you learn about a lot of the, a lot of the things that your built-in types do for you that

00:02:12.880 --> 00:02:16.960
you don't even really think about. There's quite a bit of information in there that's worth watching,

00:02:16.960 --> 00:02:22.760
even if you don't feel like doing it. Plus, he does the entire talk or have most of the talk with a

00:02:22.760 --> 00:02:28.620
Jupyter notebook and even changes some of the code and fixes a bug and does monkey patching

00:02:28.620 --> 00:02:30.500
with live code. It's pretty cool.

00:02:30.620 --> 00:02:33.440
Yeah, that's pretty cool. I think definitely this concept of Jupyter notebooks,

00:02:33.440 --> 00:02:39.040
the whole scientific computing stuff is bleeding over into all sorts of presentations. I think it's

00:02:39.040 --> 00:02:39.280
great.

00:02:39.280 --> 00:02:45.880
And near the end of the talk, he does a, an example of why operator overloading is awesome.

00:02:45.880 --> 00:02:55.220
And he shows a little numpy, a little tiny script that can graph the trajectory of a launched item,

00:02:55.480 --> 00:03:01.020
you know, like throwing a ball or something. And it's so clean and such little code because

00:03:01.020 --> 00:03:07.360
the numpy library is allowed to take their data types and overload operators so that multiplication

00:03:07.360 --> 00:03:10.840
and addition work on these large objects.

00:03:10.840 --> 00:03:11.860
Yeah, that's awesome.

00:03:11.860 --> 00:03:12.380
It's pretty great.

00:03:12.380 --> 00:03:16.600
Yeah. Luciano definitely has some special sauce. He sprinkles on what he does. It makes it really

00:03:16.600 --> 00:03:19.980
smooth. So check that one out. That's a really great one. That's a live presentation

00:03:19.980 --> 00:03:23.160
from basically derived from his book.

00:03:23.160 --> 00:03:27.880
I'll link to this, of course, but there's also a link to the rest of the PyBay 2017 playlist.

00:03:27.880 --> 00:03:32.440
Yeah, that's cool. For sure. So we talked about how neither of us are really gamers last time,

00:03:32.440 --> 00:03:32.780
right, Brian?

00:03:32.780 --> 00:03:33.140
Right.

00:03:33.140 --> 00:03:40.200
Yeah. But one of the really interesting possibilities, you know, Python is probably the biggest language

00:03:40.200 --> 00:03:44.680
for machine learning and AI. And one of the big possibilities would be like, what if you could

00:03:44.680 --> 00:03:50.740
take the AI you're trying to teach about a world and like immerse it into a game and just make it be in

00:03:50.740 --> 00:03:54.940
the game, right? So if you wanted to have like a self-driving car, like could you stick it into like

00:03:54.940 --> 00:03:59.860
a car simulator game and make it race around and try to win? Or, you know, you want to have a puzzle

00:03:59.860 --> 00:04:05.100
solving one, stick it in the middle of a go game and try to make it try to pay it go. So the thing I

00:04:05.100 --> 00:04:10.520
want to feature this week is something called serpent.ai. So that's both the name of the product and the

00:04:10.520 --> 00:04:15.700
website. And it's a game agent framework. So this is pretty insane. What you can do is you can take any

00:04:15.700 --> 00:04:23.720
video game and you can plug in says any, that's kind of intense, any video game and you can plug in AI and

00:04:23.720 --> 00:04:26.740
bot programming with Python. What do you think about that?

00:04:26.740 --> 00:04:28.620
Wow. I think that looks fun.

00:04:28.860 --> 00:04:54.980
I know it looks super fun. Oh my gosh. And they have a, the guy who created it. I'm sorry. I couldn't find his name on here. He runs a Twitch channel. So you can drop in on his Twitch channel, which is linked to from serpent.ai. And actually pulled up one particular video that he recorded on Twitch, which is like streaming gaming stuff. And he'll do like six hour coding sessions where he's like, we're going to take this game. We're going to plug in AI into it and solve it in real time. And it's pretty intense.

00:04:55.140 --> 00:05:00.120
Wow. That's cool. If you want to spend like a day watching somebody like plugging in AI to a game, you can do it.

00:05:00.120 --> 00:05:13.900
That sounds neat. So I do know that, I mean, Twitch is being used a lot by a lot of game people watching gamers and stuff. But do you know if anybody's doing or how, if it's catching on much with like live coding examples and stuff?

00:05:14.140 --> 00:05:26.360
I was thinking about that as I was watching, he does do live coding. He's got like PyCharm and Jupyter and the game going and like console stuff in the video that I linked to, you know, I honestly don't know, but I feel like there should be if people aren't doing it.

00:05:26.360 --> 00:05:28.200
Probably is probably just not in my circles.

00:05:28.200 --> 00:05:42.320
Yeah, yeah, exactly. We don't do enough gaming, right? So some of the things they talk about in this, it says like, there's really no conventions based on this, you can just plug in whatever you want. So if you want to use like the latest reinforcement, deep learning algorithm from Google, try that.

00:05:42.800 --> 00:05:54.180
If you want to use computer vision, we talked about one recently, Luminoth, you could plug that in there, for example, to do like image processing. And so even if you want to just randomly press buttons, you could try that as well.

00:05:54.180 --> 00:06:04.200
So I'm guessing this game, it has to be something that you can like get at with Python library or something, right? Or I mean, I mean, I can't play my Xbox, for instance.

00:06:04.200 --> 00:06:12.120
No, I think it's got to run on a computer. But I think it like simulates arrow keys and stuff like that. I'm not entirely sure how it determines whether it wins.

00:06:12.120 --> 00:06:17.440
Because you got to give positive or negative feedback to the deep learning models. But something's happening in there. It looks pretty cool.

00:06:17.440 --> 00:06:20.180
Maybe you just have to like hang out with a microphone and say, good job.

00:06:20.180 --> 00:06:22.820
Yeah, just pat it on the back. Well done, AI. Well done.

00:06:22.820 --> 00:06:26.180
So you've been working with Cookie Cutter lately, right?

00:06:26.280 --> 00:06:49.520
I have. I've been, most of the, my work has been making some plugins for work, but I'm utilizing the pytest Cookie Cutter plugin. And that caused me to, I hadn't really, one of the options was to generate some project documentation with MakeDocs. And I never really used them before. I don't know if it's pronounced MakeDocs. That's how I've been pronouncing it.

00:06:49.600 --> 00:06:52.280
I think there's a little bit of debate, but I think that that totally works.

00:06:52.280 --> 00:07:06.220
Okay. So it's, it's MKDocs. And I think it stands for MarkdownDocs. And a lot of, I know about Sphinx and I know about that a lot of the Python documentation is with restructured text, but I just don't really like restructured text.

00:07:06.220 --> 00:07:24.320
So anyway, I just wanted to highlight MakeDocs. It's, I thought it was neat. And I've been documenting some of my projects with it. And it's, especially with Cookie Cutter, it just pops it in there, or at least this pytest plugin, Cookie Cutter, it pops it in and creates a YAML file for you.

00:07:24.320 --> 00:07:34.600
And really, it's kind of neat because you, you have this configuration of like what your theme is and all that, but your writing is just a directory with a bunch of Markdown files.

00:07:34.980 --> 00:07:37.400
Markdown is a really great invention. I'm really glad it exists.

00:07:37.400 --> 00:07:53.700
The one thing I was worried about is I do kind of want to keep some of the, like the library API documentation with the code, not somewhere else. And I do want to document that somehow. So I did stumble across one of the friends of our show, Christian Medina.

00:07:53.980 --> 00:07:58.980
He wrote a Medium article called, how to write your own Python document generator.

00:07:59.600 --> 00:08:08.840
And essentially it's, using MKDocs also, but walking through your code and pulling out the doc strings. So I'm going to give that a try next week and see how that goes.

00:08:08.840 --> 00:08:10.840
Oh yeah. You'll have to give us a report how it came out.

00:08:10.840 --> 00:08:11.040
Yeah.

00:08:11.040 --> 00:08:11.340
Awesome.

00:08:12.020 --> 00:08:13.020
All right.

00:08:13.020 --> 00:08:17.540
So this audio file that you're listening to right now came to you through digital ocean spaces.

00:08:17.540 --> 00:08:21.500
And like I said, the beginning, they're sponsoring this episode as they are a number of them.

00:08:21.960 --> 00:08:31.660
And you may know of Amazon S3. It's a place where you can put your files, both for people to consume browsers and stuff, but also for your app to integrate with.

00:08:31.660 --> 00:08:38.940
Well, digital ocean decided to take it to another level of spaces and create something similar, but with a much better business model.

00:08:38.940 --> 00:08:48.420
You pay five bucks a month, you get 250 gigs of storage, a terabyte of outbound bandwidth, which by the way, is like $93 just there on its own in S3.

00:08:48.420 --> 00:09:08.460
So five bucks, that is a super good deal. And inbound data is always, always free. So it's way more predictable. You can save tons of money and it has the same API as S3. So all your tools and stuff still work as well. It's definitely recommended. I'm using it more and more every day. And like I said, using it to deliver all the audio for this podcast.

00:09:08.460 --> 00:09:14.380
That's really cool. And so like you said, they're sponsoring this episode, but they also save us money on every episode since we're...

00:09:14.380 --> 00:09:17.040
That's right. They're kind of sponsoring everyone in a little bit of a sense, right?

00:09:17.160 --> 00:09:20.820
Save us some good money. So check them out at do.co slash Python.

00:09:20.820 --> 00:09:37.760
Now, you and I, we, I think we were kind of breathing the same air. Something was in the air this week here in Portland because I chose an item that has to do with taking your Python applications and packaging them up for reuse in one way.

00:09:37.760 --> 00:09:44.760
And you chose the very next item packaging up for reuse in a Python application. So let's do some two interesting takes on this.

00:09:44.760 --> 00:09:45.100
Neat.

00:09:45.320 --> 00:09:52.340
So there's a couple of programs or libraries that you can use to build proper applications out of your Python code.

00:09:52.340 --> 00:09:59.820
I feel like deployment to end users is one of the things that's really tricky for Python, right? This is one of its weak points.

00:09:59.820 --> 00:10:03.880
You got a bunch of scripts. You're going to send those out. They have dependencies.

00:10:03.880 --> 00:10:11.740
Like you can't give a regular user a Python thing and say, oh yeah, run this pip install this to like configure it, right? That's not going to work.

00:10:11.740 --> 00:10:14.320
You have to go, here's an exe. Here's a .app and so on.

00:10:14.320 --> 00:10:17.100
So you can use CX-free. There's a few others.

00:10:17.100 --> 00:10:18.820
Pyto-app, Pyto-exe.

00:10:19.040 --> 00:10:21.600
But one that's really nice is called PyInstaller.

00:10:21.600 --> 00:10:23.600
And they just released version 3.3.

00:10:23.600 --> 00:10:25.540
So this works on all the operating systems.

00:10:25.540 --> 00:10:30.200
Windows, Linux, Mac, even FreeBSD, Solaris, AIX, a bunch of them.

00:10:30.200 --> 00:10:39.440
And the idea is that its primary goal is to do what I described, but also be compatible with third-party packages out of the box.

00:10:39.640 --> 00:10:48.820
So a lot of the weaknesses of the other ones that I've mentioned, they'll run into trouble trying to use Matplotlib or NumPy or PyQt, for example, which is super painful.

00:10:48.820 --> 00:10:51.980
And it'll take that and package all those libraries up for you.

00:10:51.980 --> 00:10:56.240
And they just released the 3.3 version, which has Python 3.6 support.

00:10:56.240 --> 00:10:56.800
Oh, that's cool.

00:10:56.800 --> 00:10:58.380
Do you see yourself maybe using this anymore?

00:10:58.380 --> 00:11:06.560
I definitely could see using this, especially, like you said, if you're sharing an application with somebody that isn't a developer, it's good.

00:11:06.560 --> 00:11:06.880
Right.

00:11:06.880 --> 00:11:09.000
Yeah, if you're going to ship some end product, you want to run it in Python.

00:11:09.140 --> 00:11:09.740
That's pretty awesome.

00:11:09.740 --> 00:11:15.960
And you can use the .1 file option and .1 no console, and it can just be like a GUI.

00:11:15.960 --> 00:11:24.180
And you wouldn't really know that it's not like built in C++ or .NET if you run it on Windows or Coco on Mac, things like that.

00:11:24.180 --> 00:11:25.260
It's really, really nice.

00:11:25.260 --> 00:11:25.640
Nice.

00:11:25.640 --> 00:11:26.000
Yeah.

00:11:26.000 --> 00:11:27.240
So what's your take on this?

00:11:27.240 --> 00:11:29.280
On this one, I think I definitely have to try it.

00:11:29.280 --> 00:11:34.100
But the item that I brought up, I was thinking about is PEX.

00:11:34.540 --> 00:11:40.240
And it says it's a library and tool for generating Python executable files, PEX files.

00:11:40.240 --> 00:11:45.240
And the files are, yeah, they're self-contained executables.

00:11:45.240 --> 00:11:48.240
But there's executable virtual environments.

00:11:48.240 --> 00:11:48.740
Right.

00:11:48.740 --> 00:11:53.520
Whereas the one that I was thinking of kind of packages up all the Python things you need to run into in AXE.

00:11:53.620 --> 00:11:58.060
This is like, can we just package the virtual environment and somehow teach it to run, right?

00:11:58.280 --> 00:12:03.080
I'd have to look, but I'm almost positive there is no, it doesn't package the Python with it.

00:12:03.080 --> 00:12:12.840
So if you have everybody already having Python installed, but you want to share things around with share Python programs, this might be a really cool thing.

00:12:12.840 --> 00:12:17.940
And it looks like, I just got introduced to it the other day, but it looks like, yeah, it came from Twitter.

00:12:18.520 --> 00:12:23.140
And it used to be part of the Twitter comments package, which looks like there's some cool stuff in there.

00:12:23.140 --> 00:12:24.280
I'm going to have to check that out also.

00:12:24.280 --> 00:12:24.660
Yeah.

00:12:24.660 --> 00:12:29.600
I was, when I was checking out the video that you're about to talk about, I was like, whoa, this Twitter comment thing, it looks awesome.

00:12:29.600 --> 00:12:31.200
There's way more to be learning here.

00:12:31.200 --> 00:12:31.600
Yeah.

00:12:31.600 --> 00:12:33.920
But the, it's now a standalone thing.

00:12:33.920 --> 00:12:38.960
And there's this great, we linked to a video called WTF is PEX.

00:12:39.860 --> 00:12:41.880
And it's by Brian Wickman.

00:12:41.880 --> 00:12:46.760
And it's a little 16 minute video where he just pretty much talks about what it is.

00:12:46.760 --> 00:12:51.760
And the insight is Python can import from a zip file.

00:12:51.760 --> 00:12:53.320
Even if you corrupt the zip file.

00:12:53.320 --> 00:12:54.520
Even if you corrupt it.

00:12:54.520 --> 00:13:05.360
So they corrupt the zip file by like putting like a main at the end and some, like the header on there to tell the rest of the operating system that it's a Python program.

00:13:05.740 --> 00:13:12.040
And it just tries, your environment just tries to run it like Python and it imports it.

00:13:12.040 --> 00:13:14.500
It's all of its dependencies from itself.

00:13:14.500 --> 00:13:20.080
And, you know, I kind of got lost as to exactly how that works, but it looks fun also.

00:13:20.080 --> 00:13:21.100
Yeah, it definitely looks cool.

00:13:21.100 --> 00:13:27.140
So if your goal is more to share executable things with developers, it seems like PEX is really awesome.

00:13:27.140 --> 00:13:35.560
Or maybe even with infrastructure, like I want to deploy this thing to the server and I just want to drop it in and have it go and not have to deal with dependencies and virtual environments, all that stuff.

00:13:35.920 --> 00:13:36.600
Looks super cool.

00:13:36.600 --> 00:13:42.620
And I get the sense that they're using this in production at Twitter, even though I don't remember them exactly saying that.

00:13:42.620 --> 00:13:54.560
Or using it in just even for tools because some of the examples were just to, you've got a little project, it's got a virtual environment with, or it's got some requirements for it and some dependencies.

00:13:54.860 --> 00:14:02.680
You just kind of make that into an executable and then you can just drop the whole thing into your bin directory or something and not worry about it.

00:14:02.680 --> 00:14:03.360
That's really nice.

00:14:03.360 --> 00:14:03.960
That's pretty great.

00:14:03.960 --> 00:14:04.500
Super cool.

00:14:04.500 --> 00:14:05.640
All right.

00:14:05.640 --> 00:14:08.660
So I want to keep with this theme of we're going to package up some code and run it.

00:14:08.920 --> 00:14:21.200
And even with either of these, like it's great that PEX can zip up your source files or that PyInstaller can zip up your source files, but you're still sending your source code like straight to people.

00:14:21.200 --> 00:14:22.480
And that can be bad.

00:14:22.480 --> 00:14:22.940
Potentially.

00:14:22.940 --> 00:14:24.940
Maybe you've got some secret algorithm.

00:14:25.140 --> 00:14:30.840
Maybe you've got licensing that you don't want to just be able to like, well, we'll just comment out the license check and it'll be good.

00:14:30.840 --> 00:14:31.100
Right?

00:14:31.100 --> 00:14:31.820
Something like that.

00:14:31.820 --> 00:14:39.120
So there's this interesting article that came by this week called using Cython to protect a Python code base.

00:14:39.120 --> 00:14:45.360
So Cython is a fully to machine instruction compiled variant of Python.

00:14:45.360 --> 00:14:45.660
Right?

00:14:45.660 --> 00:14:47.520
We've got Python.

00:14:47.520 --> 00:14:48.360
We've got PyPy.

00:14:48.360 --> 00:14:49.360
We've got Cython.

00:14:49.360 --> 00:14:51.240
We've got IronPython.

00:14:51.240 --> 00:14:51.960
All these variations.

00:14:52.120 --> 00:14:58.940
And Cython is one that came from the SageMath guys way, way back in the day to compile this to faster machine instructions.

00:14:58.940 --> 00:15:05.260
But it's fully compiled code out of .py files, which is pretty interesting.

00:15:05.260 --> 00:15:07.800
And so that makes it way harder to mess with.

00:15:07.800 --> 00:15:08.020
Yeah.

00:15:08.020 --> 00:15:20.820
So this article walks you through building a Python package and all the little extra tricks and tweaks that you've got to do so that you can compile your Python code with Cython

00:15:20.820 --> 00:15:26.160
and then ship it as a wheel, which is the current standard for pip installing a thing.

00:15:26.160 --> 00:15:27.040
Right?

00:15:27.040 --> 00:15:33.940
So you can create a binary distributable wheel that has zero source code that is compiled for a particular architecture.

00:15:33.940 --> 00:15:34.340
Wow.

00:15:34.340 --> 00:15:35.080
Okay.

00:15:35.080 --> 00:15:35.380
Isn't that cool?

00:15:35.380 --> 00:15:36.900
So if you want to...

00:15:36.900 --> 00:15:37.300
Yeah.

00:15:37.300 --> 00:15:40.680
And then you could combine this with PyInstaller and make it an EXE and off you go.

00:15:40.680 --> 00:15:40.900
Right?

00:15:40.900 --> 00:15:41.340
Yeah.

00:15:41.620 --> 00:15:44.460
Since the algorithm's open, is it reversible then?

00:15:44.460 --> 00:15:47.340
Well, it's like compiling C code or C++ or something.

00:15:47.340 --> 00:15:52.360
So it is technically reversible and you can get it back, but it's way, way harder, right?

00:15:52.360 --> 00:15:52.680
Yeah.

00:15:52.880 --> 00:15:56.500
So they do say there are certain ways to, like, hack the runtime.

00:15:56.500 --> 00:16:03.000
If you import it, you might be able to get it to give up some of its secrets, but it's definitely better than actually shipping the source code.

00:16:03.000 --> 00:16:05.360
This reminds me of Obfuscators.

00:16:05.360 --> 00:16:07.920
I can't remember if it was in C# or Java.

00:16:07.920 --> 00:16:09.180
Do you remember Obfuscators?

00:16:09.180 --> 00:16:09.840
Yeah.

00:16:09.840 --> 00:16:11.200
I totally remember those.

00:16:11.260 --> 00:16:14.720
It was even such a weird word to say when I first learned about it.

00:16:14.720 --> 00:16:15.700
I remember that, actually.

00:16:15.700 --> 00:16:16.380
Yeah.

00:16:16.380 --> 00:16:20.840
I think it first came out in Java to sort of scramble up bytecode, Java bytecode.

00:16:20.840 --> 00:16:28.000
And .NET definitely has it as well because they have IL, which both Java bytecode and .NET IL are super reversible.

00:16:28.000 --> 00:16:38.240
Like, it's almost exactly what you wrote gets pulled back other than maybe, like, where you put your curly braces on the new line, on the top, on the if line, you know, things like that.

00:16:38.240 --> 00:16:39.420
It's, like, really, really reversible.

00:16:39.640 --> 00:16:46.260
So I think this protecting with Cython actually would be even better than Obfuscating, although I haven't looked at all the different angles.

00:16:46.260 --> 00:16:48.000
It's really an interesting idea, though.

00:16:48.000 --> 00:16:49.860
And it doesn't have to be everything, right?

00:16:49.860 --> 00:16:58.200
Like, you could take your core algorithm that you want to protect or whatever, Cythonize it, and then just import it into the rest of your code.

00:16:58.200 --> 00:17:06.880
Yeah, that's a really great idea because, like, for instance, a bunch of the stuff, like reading config files or your user interface or something, you might not care about that part.

00:17:06.880 --> 00:17:07.440
Right, exactly.

00:17:07.620 --> 00:17:10.600
It can be reverse engineered pretty easily just by looking at it.

00:17:10.780 --> 00:17:17.320
But your core algorithms and the real reason why people are buying your product, that's not a bad idea.

00:17:17.320 --> 00:17:18.280
So this is cool.

00:17:18.280 --> 00:17:18.580
Yep.

00:17:18.580 --> 00:17:22.300
I've never tried it, but this is a pretty cool idea, and it's a step-by-step sort of thing.

00:17:22.300 --> 00:17:24.180
So I thought people might find that useful out there.

00:17:24.180 --> 00:17:24.840
I think so.

00:17:24.840 --> 00:17:25.360
Yeah, awesome.

00:17:25.360 --> 00:17:26.260
Well, that's our six items.

00:17:26.260 --> 00:17:27.020
That's awesome.

00:17:27.020 --> 00:17:28.120
Went really fast.

00:17:28.120 --> 00:17:29.100
Like always.

00:17:29.220 --> 00:17:31.460
So I don't have anything extra to add.

00:17:31.460 --> 00:17:33.200
Do you have anything you'd like to talk about?

00:17:33.200 --> 00:17:39.180
I have a little bit of a survey I'd like people to consider filling out, really only if you're, like, super passionate about this.

00:17:39.180 --> 00:17:47.880
One of the projects that I'm working on is I want to create a course to make working with Python on Windows better and delightful, not frustrating and challenging.

00:17:48.120 --> 00:17:53.880
So I'm trying to gather a bunch of information on what people find hard with working with Python on Windows.

00:17:53.880 --> 00:17:56.200
I've got a bunch of people filled out a form.

00:17:56.200 --> 00:18:01.180
Like about 200 people filled this out already, but I put a link here to a Google Docs form.

00:18:01.180 --> 00:18:14.020
If you work with Python on Windows and you've had struggles with it and you have some sort of feedback you can give so you can help me maybe create a class or something, some sort of resource to help people be more successful with Python on Windows, fill out the form at the bottom of the show notes.

00:18:14.020 --> 00:18:14.540
That'd be awesome.

00:18:14.540 --> 00:18:15.240
Oh, great.

00:18:15.380 --> 00:18:23.280
I'll definitely fill this out and pass it around because there's a ton of people that I work with that are kind of new to Python and new to Python on Windows.

00:18:23.280 --> 00:18:24.920
Oh, that'd be perfect.

00:18:24.920 --> 00:18:25.720
Yeah, that'd be awesome.

00:18:25.720 --> 00:18:28.060
I mean, a lot of people are like, well, just use Linux or whatever.

00:18:28.060 --> 00:18:39.560
But when you show up at a tutorial or to give a training class to a corporate group and they all have their corporate Windows 7 laptops, it doesn't matter whether you recommend Linux or macOS.

00:18:39.560 --> 00:18:41.780
They have to make it work on their environments.

00:18:41.780 --> 00:18:44.960
And so my goal is to try to make that like a much smoother process.

00:18:44.960 --> 00:18:45.280
Great.

00:18:45.280 --> 00:18:45.680
Cool.

00:18:45.680 --> 00:18:46.080
Awesome.

00:18:46.080 --> 00:18:48.920
Well, thanks again for meeting up and pulling all these ideas together.

00:18:48.920 --> 00:18:49.480
It's always fun.

00:18:49.480 --> 00:18:49.880
Oh, yeah.

00:18:49.880 --> 00:18:50.300
Thank you.

00:18:50.300 --> 00:18:51.280
Talk to you next week.

00:18:51.280 --> 00:18:53.500
Thank you for listening to Python Bytes.

00:18:53.500 --> 00:18:56.060
Follow the show on Twitter via at Python Bytes.

00:18:56.060 --> 00:18:58.960
That's Python Bytes as in B-Y-T-E-S.

00:18:58.960 --> 00:19:02.360
And get the full show notes at Python Bytes.fm.

00:19:02.360 --> 00:19:06.720
If you have a news item you want featured, just visit Python Bytes.fm and send it our way.

00:19:06.720 --> 00:19:09.460
We're always on the lookout for sharing something cool.

00:19:10.100 --> 00:19:12.820
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:19:12.820 --> 00:19:16.440
Thank you for listening and sharing this podcast with your friends and colleagues.

