
00:00:00.000 --> 00:00:07.660
Hello and welcome to Python bites where we deliver Python news and headlines directly to earbuds. This is episode 50 recorded November 1st


00:00:07.660 --> 00:00:13.420
2017 I'm Michael Kennedy and I'm Brian Okken and like always we have some pretty awesome stuff lined up for you


00:00:13.420 --> 00:00:15.860
But I want to say thanks. Thanks to digital ocean


00:00:15.860 --> 00:00:22.760
So digital ocean is sponsoring this episode and they're gonna share this new thing. They've launched with you guys called spaces


00:00:22.760 --> 00:00:26.340
It's like s3 but way way better tell you more about that later right now


00:00:26.340 --> 00:00:29.820
I want to be a little philosophical and think like a Pythonista.


00:00:29.820 --> 00:00:35.580
Yeah, think like a Pythonista. We're going to highlight a video from Luciano Romalo,


00:00:35.580 --> 00:00:43.820
and he did a talk at PyBay 2017 called Think Like a Pythonista. And one of the things,


00:00:43.820 --> 00:00:49.100
actually, when most of my programming, I don't really create new types that much in Python.


00:00:49.100 --> 00:00:56.100
I take advantage of, I don't really think like I'm creating new types. I'll use named tuples


00:00:56.100 --> 00:01:02.100
or something. But even so, I take advantage of all the built-in types and that's kind of what part


00:01:02.100 --> 00:01:08.580
of his talk is about. It's he create, walks through talking about creating another container type


00:01:08.580 --> 00:01:15.460
called a deck of cards. So he's got a cards type and a deck type and the deck has to do, is a


00:01:15.460 --> 00:01:22.420
container and it has to do things like indexing and shuffling and stuff. And he walks through how


00:01:22.420 --> 00:01:28.380
to do that so that you can use the built-in iterate for loops and accessors.


00:01:28.380 --> 00:01:34.260
It's just a really kind of a fascinating look at how little code it takes to make something


00:01:34.260 --> 00:01:39.740
look like any other Python type using some of the dunders and stuff.


00:01:39.740 --> 00:01:40.740
Yeah, for sure.


00:01:40.740 --> 00:01:41.940
I think he did a super job with this.


00:01:41.940 --> 00:01:46.340
And this comes from his book, Fluent Python, which is absolutely one of the best books


00:01:46.340 --> 00:01:50.060
once you know a little bit of the language to really get the zen of it.


00:01:50.060 --> 00:01:54.300
He's really big into the Python data model, the Dunder methods, and all that kind of stuff.


00:01:54.300 --> 00:01:59.100
And so I'm sure this is a really great way to see how that comes out in a custom type,


00:01:59.100 --> 00:02:00.100
right?


00:02:00.100 --> 00:02:01.100
Yeah, it is.


00:02:01.100 --> 00:02:04.380
And also, I think it's a good talk for somebody to watch, even if you don't think you're going


00:02:04.380 --> 00:02:10.540
to ever create a container type yourself, because you learn about a lot of the things


00:02:10.540 --> 00:02:14.660
that your built-in types do for you that you don't even really think about.


00:02:14.660 --> 00:02:18.300
There's quite a bit of information in there that's worth watching, even if you don't feel


00:02:18.300 --> 00:02:19.300
like doing it.


00:02:19.300 --> 00:02:30.500
He does the entire talk or most of the talk with a Jupyter notebook and even changes some of the code and fixes a bug and does monkey patching with live code. It's pretty cool.


00:02:30.500 --> 00:02:39.300
Yeah, that's pretty cool. I think definitely this concept of Jupyter notebooks, the whole scientific computing stuff is bleeding over into all sorts of presentations. I think it's great.


00:02:39.300 --> 00:02:45.860
Near the end of the talk, he does an example of why operator overloading is awesome.


00:02:45.860 --> 00:02:55.220
And he shows a little NumPy, a little tiny script that can graph the trajectory of a launched item,


00:02:55.220 --> 00:03:01.300
you know, like throwing a ball or something. And it's so clean in such little code because


00:03:01.300 --> 00:03:06.740
the NumPy library is allowed to take their data types and overload operators so that


00:03:06.740 --> 00:03:11.900
multiplication and addition work on these large objects. Yeah, that's awesome.


00:03:11.900 --> 00:03:15.700
It's pretty great. Yeah, Luciano definitely has some special sauce he sprinkles on


00:03:15.700 --> 00:03:18.220
what he does that makes it really smooth. So check that one out. That's a really


00:03:18.220 --> 00:03:23.100
great one. That's a live presentation from basically derived from his book.


00:03:23.100 --> 00:03:26.660
I'll link to this of course, but there's also a link to the rest of the Pi Bay


00:03:26.660 --> 00:03:31.580
2017 playlist. Yeah, that's cool for sure. So we talked about how neither of us are


00:03:31.580 --> 00:03:35.400
really gamers last time, right Brian? Right. Yeah, but one of the really


00:03:35.400 --> 00:03:41.880
interesting possibilities. Python is probably the biggest language for machine learning and AI.


00:03:41.880 --> 00:03:46.200
One of the big possibilities would be, what if you could take the AI you're trying to teach


00:03:46.200 --> 00:03:52.840
about a world and immerse it into a game and just make it be in the game? If you wanted to have a


00:03:52.840 --> 00:03:57.400
self-driving car, could you stick it into a car simulator game and make it race around and try to


00:03:57.400 --> 00:04:03.240
win? Or you want to have a puzzle-solving one, stick it in the middle of a Go game and try to


00:04:03.240 --> 00:04:04.240
Try to pay it go.


00:04:04.240 --> 00:04:08.800
So the thing I want to feature this week is something called Serpent.ai.


00:04:08.800 --> 00:04:11.080
So that's both the name of the product and the website.


00:04:11.080 --> 00:04:13.220
And it's a game agent framework.


00:04:13.220 --> 00:04:14.220
So this is pretty insane.


00:04:14.220 --> 00:04:19.840
What you can do is you can take any video game and you can plug in, it says any, that's


00:04:19.840 --> 00:04:25.280
kind of intense, any video game and you can plug in AI and bot programming with Python.


00:04:25.280 --> 00:04:26.840
What do you think about that?


00:04:26.840 --> 00:04:27.840
Wow.


00:04:27.840 --> 00:04:28.840
I think that looks fun.


00:04:28.840 --> 00:04:30.360
I know it looks super fun.


00:04:30.360 --> 00:04:31.440
Oh my gosh.


00:04:31.440 --> 00:04:35.800
And they have the guy who created it, I'm sorry, I couldn't find his name on here.


00:04:35.800 --> 00:04:38.020
He runs a Twitch channel.


00:04:38.020 --> 00:04:42.800
So you can drop in on his Twitch channel, which is linked to from serpent.ai, and actually


00:04:42.800 --> 00:04:46.880
pulled up one particular video that he recorded on Twitch, which is like streaming gaming


00:04:46.880 --> 00:04:47.880
stuff.


00:04:47.880 --> 00:04:50.600
And he'll do like six hour coding sessions where he's like, we're going to take this


00:04:50.600 --> 00:04:54.080
game, we're going to plug in AI into it and solve it in real time.


00:04:54.080 --> 00:04:55.080
And it's pretty intense.


00:04:55.080 --> 00:04:56.080
Wow, that's cool.


00:04:56.080 --> 00:04:59.920
If you want to spend like a day watching somebody like plugging in AI to a game, you can do


00:04:59.920 --> 00:05:00.920
it.


00:05:00.920 --> 00:05:01.760
- That's neat.


00:05:01.760 --> 00:05:04.280
So I do know that, I mean, Twitch is being used a lot


00:05:04.280 --> 00:05:07.220
by a lot of game people watching gamers and stuff,


00:05:07.220 --> 00:05:09.020
but do you know if anybody's doing


00:05:09.020 --> 00:05:10.760
or if it's catching on much


00:05:10.760 --> 00:05:14.200
with like live coding examples and stuff?


00:05:14.200 --> 00:05:16.040
- I was thinking about that as I was watching.


00:05:16.040 --> 00:05:17.200
He does do live coding.


00:05:17.200 --> 00:05:19.960
He's got like PyCharm and Jupyter and the game going


00:05:19.960 --> 00:05:22.780
and like console stuff in the video that I linked to.


00:05:22.780 --> 00:05:24.140
You know, I honestly don't know,


00:05:24.140 --> 00:05:26.480
but I feel like there should be if people aren't doing it.


00:05:26.480 --> 00:05:28.640
- Probably is, probably just not in my circles.


00:05:28.640 --> 00:05:30.920
- Yeah, yeah, exactly, we don't do enough gaming, right?


00:05:30.920 --> 00:05:32.680
So some of the things they talk about in this,


00:05:32.680 --> 00:05:35.520
it says like, there's really no conventions based on this,


00:05:35.520 --> 00:05:36.960
you can just plug in whatever you want.


00:05:36.960 --> 00:05:39.680
So if you wanna use like the latest reinforcement


00:05:39.680 --> 00:05:42.700
deep learning algorithm from Google, try that.


00:05:42.700 --> 00:05:44.880
If you wanna use computer vision,


00:05:44.880 --> 00:05:47.920
we talked about one recently, Luminoth,


00:05:47.920 --> 00:05:49.600
you could plug that in there, for example,


00:05:49.600 --> 00:05:51.440
to do like image processing.


00:05:51.440 --> 00:05:53.440
And it's even if you wanna just randomly press buttons,


00:05:53.440 --> 00:05:54.320
you could try that as well.


00:05:54.320 --> 00:05:55.580
- So I'm guessing this game,


00:05:55.580 --> 00:05:58.520
it has to be something that you can like get at


00:05:58.520 --> 00:06:00.980
with Python library or something, right?


00:06:00.980 --> 00:06:04.400
Or I mean, I can't play my Xbox, for instance.


00:06:04.400 --> 00:06:06.420
- No, I think it's got to run on a computer,


00:06:06.420 --> 00:06:09.920
but I think it simulates arrow keys and stuff like that.


00:06:09.920 --> 00:06:12.240
I'm not entirely sure how it determines whether it wins,


00:06:12.240 --> 00:06:14.220
'cause you got to give positive or negative feedback


00:06:14.220 --> 00:06:15.240
to the deep learning models,


00:06:15.240 --> 00:06:16.820
but something's happening in there.


00:06:16.820 --> 00:06:17.660
It looks pretty cool.


00:06:17.660 --> 00:06:19.480
- Maybe you just have to hang out with a microphone


00:06:19.480 --> 00:06:20.320
and say, "Good job."


00:06:20.320 --> 00:06:21.600
- Yeah, just pat it on the back.


00:06:21.600 --> 00:06:23.000
Well done, AI, well done.


00:06:23.000 --> 00:06:24.500
(laughing)


00:06:24.500 --> 00:06:26.280
So you've been working with Cookie Cutter lately, right?


00:06:26.280 --> 00:06:27.120
- I have.


00:06:27.120 --> 00:06:34.280
And most of my work has been making some plugins for work, but I'm utilizing the pytest Cookie


00:06:34.280 --> 00:06:35.800
Cutter plugin.


00:06:35.800 --> 00:06:41.880
And that caused me to, I hadn't really, one of the options was to generate some project


00:06:41.880 --> 00:06:44.160
documentation with MakeDocs.


00:06:44.160 --> 00:06:46.960
And I never really used them before.


00:06:46.960 --> 00:06:48.480
I don't know if it's pronounced MakeDocs.


00:06:48.480 --> 00:06:49.520
That's how I've been pronouncing it.


00:06:49.520 --> 00:06:52.480
I think there's a little bit of debate, but I think that that totally works.


00:06:52.480 --> 00:06:53.480
Okay.


00:06:53.480 --> 00:06:57.080
mkdocs and I think it stands for markdown docs.


00:06:57.080 --> 00:07:00.520
And a lot of, I know about Sphinx and I know about


00:07:00.520 --> 00:07:03.040
that a lot of the Python documentation is with


00:07:03.040 --> 00:07:05.360
restructured text, but I just don't really like


00:07:05.360 --> 00:07:06.440
restructured text.


00:07:06.440 --> 00:07:09.120
So anyway, I just wanted to highlight makedocs.


00:07:09.120 --> 00:07:13.220
It's, I thought it was neat and I've been documenting


00:07:13.220 --> 00:07:16.280
some of my projects with it and it's, especially with


00:07:16.280 --> 00:07:19.920
cookie cutter, it just pops it in there or at least this


00:07:19.920 --> 00:07:23.400
pytest plugin cookie cutter, it pops it in and creates


00:07:23.400 --> 00:07:26.920
YAML file for you. And really, it's kind of neat because you you have this


00:07:26.920 --> 00:07:31.740
configuration of like what your theme is and all that, but your writing is just a


00:07:31.740 --> 00:07:36.480
directory with a bunch of Markdown files. Markdown is a really great invention. I'm


00:07:36.480 --> 00:07:40.880
really glad it exists. The one thing I was worried about is I do kind of want


00:07:40.880 --> 00:07:46.080
to keep some of the like the library API documentation with the code, not


00:07:46.080 --> 00:07:51.160
somewhere else. And I do want to document that somehow. So I did stumble across one


00:07:51.160 --> 00:07:54.340
of the friends of our show, Christian Medina.


00:07:54.340 --> 00:07:56.860
He wrote a Medium article called


00:07:56.860 --> 00:07:59.600
How to Write Your Own Python Document Generator.


00:07:59.600 --> 00:08:03.020
And essentially it's using mkdocs also,


00:08:03.020 --> 00:08:04.460
but walking through your code


00:08:04.460 --> 00:08:06.340
and pulling out the doc strings.


00:08:06.340 --> 00:08:08.020
So I'm gonna give that a try next week


00:08:08.020 --> 00:08:09.020
and see how that goes.


00:08:09.020 --> 00:08:10.420
- Oh yeah, you'll have to give us a report


00:08:10.420 --> 00:08:11.260
how it came out.


00:08:11.260 --> 00:08:12.220
- Yeah. - Awesome.


00:08:12.220 --> 00:08:15.340
All right, this audio file that you're listening to right now


00:08:15.340 --> 00:08:17.760
came to you through Digital Ocean Spaces.


00:08:17.760 --> 00:08:18.900
And like I said at the beginning,


00:08:18.900 --> 00:08:20.220
they're sponsoring this episode


00:08:20.220 --> 00:08:21.940
as they are a number of them.


00:08:21.940 --> 00:08:25.300
And you may know of Amazon S3,


00:08:25.300 --> 00:08:28.080
it's a place where you can put your files


00:08:28.080 --> 00:08:30.060
both for people to consume, browsers and stuff,


00:08:30.060 --> 00:08:32.140
but also for your app to integrate with.


00:08:32.140 --> 00:08:33.940
Well, DigitalOcean decided to take it


00:08:33.940 --> 00:08:37.140
to another level of spaces and create something similar


00:08:37.140 --> 00:08:39.020
but with a much better business model.


00:08:39.020 --> 00:08:41.940
You pay five bucks a month, you get 250 gigs of storage,


00:08:41.940 --> 00:08:44.140
a terabyte of outbound bandwidth,


00:08:44.140 --> 00:08:48.460
which by the way is like $93 just there on its own in S3.


00:08:48.460 --> 00:08:50.460
So five bucks, that is a super good deal.


00:08:50.460 --> 00:08:52.940
And inbound data is always, always free.


00:08:52.940 --> 00:08:55.420
So it's way more predictable.


00:08:55.420 --> 00:08:59.580
You can save tons of money and it has the same API as S3.


00:08:59.580 --> 00:09:02.500
So all your tools and stuff still work as well.


00:09:02.500 --> 00:09:03.820
It's definitely recommended.


00:09:03.820 --> 00:09:05.360
I'm using it more and more every day.


00:09:05.360 --> 00:09:07.840
And like I said, using it to deliver all the audio


00:09:07.840 --> 00:09:08.680
for this podcast.


00:09:08.680 --> 00:09:09.500
- That's really cool.


00:09:09.500 --> 00:09:11.500
And so like you said, they're sponsoring this episode,


00:09:11.500 --> 00:09:14.260
but they also save us money on every episode since we're.


00:09:14.260 --> 00:09:15.100
- That's right.


00:09:15.100 --> 00:09:15.920
They're kind of sponsoring everyone


00:09:15.920 --> 00:09:17.100
in a little bit of a sense, right?


00:09:17.100 --> 00:09:18.460
I'd say it was some good money.


00:09:18.460 --> 00:09:21.900
So check them out at do.co/python.


00:09:21.900 --> 00:09:24.620
Now, you and I, I think we were kind of


00:09:24.620 --> 00:09:26.580
breathing the same air.


00:09:26.580 --> 00:09:29.580
Something was in the air this week here in Portland


00:09:29.580 --> 00:09:33.020
because I chose an item that has to do with


00:09:33.020 --> 00:09:36.220
taking your Python applications and packaging them up


00:09:36.220 --> 00:09:39.420
for reuse in one way, and you chose the very next item,


00:09:39.420 --> 00:09:41.260
packaging up your Python applications


00:09:41.260 --> 00:09:42.420
in slightly a different way.


00:09:42.420 --> 00:09:44.900
So let's do some two interesting takes on this.


00:09:44.900 --> 00:09:45.740
- Neat.


00:09:45.740 --> 00:09:51.340
a couple of programs or libraries that you can use to build proper applications out of


00:09:51.340 --> 00:09:52.340
your Python code.


00:09:52.340 --> 00:09:57.900
And I feel like deployment to end users is one of the things that's really tricky for


00:09:57.900 --> 00:09:58.900
Python, right?


00:09:58.900 --> 00:10:00.660
This is one of its weak points.


00:10:00.660 --> 00:10:04.540
You got a bunch of scripts, you're going to send those out, they have dependencies, like


00:10:04.540 --> 00:10:07.220
you can't give a regular user a Python thing.


00:10:07.220 --> 00:10:11.100
So oh, yeah, run this pip install this to like configure it, right?


00:10:11.100 --> 00:10:12.100
That's not going to work.


00:10:12.100 --> 00:10:14.940
You have to go here's an exe, here's a dot app, and so on.


00:10:14.940 --> 00:10:20.180
So you can use CX free, there's a few others, py2app, py2exe, but one that's really nice


00:10:20.180 --> 00:10:21.180
is called pyinstaller.


00:10:21.180 --> 00:10:23.940
And they just released version 3.3.


00:10:23.940 --> 00:10:28.940
So this works on all the operating systems, Windows, Linux, Mac, even FreeBSD, Solaris,


00:10:28.940 --> 00:10:31.380
AIX, bunch of them.


00:10:31.380 --> 00:10:37.400
And the idea is that its primary goal is to do what I described, but also be compatible


00:10:37.400 --> 00:10:40.020
with third party packages out of the box.


00:10:40.020 --> 00:10:43.960
So a lot of the weaknesses of the other ones that I've mentioned, they'll run into trouble


00:10:43.960 --> 00:10:49.500
trying to use matplotlib or numpy or pyqt for example, which is super painful.


00:10:49.500 --> 00:10:52.780
And it'll take that and package all those libraries up for you.


00:10:52.780 --> 00:10:56.020
And they just released the 3.3 version, which has Python 3.6 support.


00:10:56.020 --> 00:10:57.020
Oh, that's cool.


00:10:57.020 --> 00:10:58.540
Do you see yourself maybe using this anymore?


00:10:58.540 --> 00:11:03.420
I definitely could see using this, especially, like you said, if you're sharing an application


00:11:03.420 --> 00:11:06.540
with somebody that isn't a developer, it's good.


00:11:06.540 --> 00:11:07.540
Right.


00:11:07.540 --> 00:11:10.380
If you're gonna ship some end product, you want to run it in Python, that's pretty awesome.


00:11:10.380 --> 00:11:14.880
And you can use the one, the --one file option and --no console and it


00:11:14.880 --> 00:11:20.440
can just be like a GUI and you wouldn't really know that it's not like built in C++ or.net


00:11:20.440 --> 00:11:24.400
if you're running on Windows or you know, Cocoa on Mac, things like that.


00:11:24.400 --> 00:11:25.400
It's really, really nice.


00:11:25.400 --> 00:11:26.400
Nice.


00:11:26.400 --> 00:11:27.400
Yeah.


00:11:27.400 --> 00:11:28.400
So what's your take on this?


00:11:28.400 --> 00:11:29.500
On this one, I think I definitely have to try it.


00:11:29.500 --> 00:11:34.660
But the item that I brought up, I was thinking about is PECS.


00:11:34.660 --> 00:11:41.420
And it says it's a library and tool for generating Python executable files, PECS files.


00:11:41.420 --> 00:11:45.820
And the files are, yeah, they're self contained executables.


00:11:45.820 --> 00:11:48.260
But there's executable virtual environments,


00:11:48.260 --> 00:11:49.260
right?


00:11:49.260 --> 00:11:52.700
Where's the one that I was thinking of kind of packages up all the Python things you need


00:11:52.700 --> 00:11:53.700
to run into an AXE.


00:11:53.700 --> 00:11:58.260
This is like, can we just package the virtual environment and somehow teach it to run, right?


00:11:58.260 --> 00:12:03.680
I'd have to look but I'm almost positive there is no it doesn't package the Python with it.


00:12:03.680 --> 00:12:06.840
So if you have everybody already having Python installed,


00:12:06.840 --> 00:12:09.480
but you want to share things around with--


00:12:09.480 --> 00:12:12.960
share Python programs, this might be a really cool thing.


00:12:12.960 --> 00:12:13.920
And it looks like--


00:12:13.920 --> 00:12:15.680
I just got introduced to it the other day,


00:12:15.680 --> 00:12:18.720
but it looks like it came from Twitter.


00:12:18.720 --> 00:12:21.400
And it used to be part of the Twitter Commons package, which


00:12:21.400 --> 00:12:23.200
looks like there's some cool stuff in there.


00:12:23.200 --> 00:12:24.480
I'm going to check that out also.


00:12:24.480 --> 00:12:26.360
Yeah, when I was checking out the video


00:12:26.360 --> 00:12:28.000
that you're about to talk about, I was like, whoa,


00:12:28.000 --> 00:12:29.840
this Twitter Commons thing, it looks awesome.


00:12:29.840 --> 00:12:31.400
There's way more to be learning here.


00:12:31.400 --> 00:12:34.080
But it's now a standalone thing.


00:12:34.080 --> 00:12:40.240
And there's this great-- we link to a video called WTF is PEX.


00:12:40.240 --> 00:12:42.640
And it's by Brian Wickman.


00:12:42.640 --> 00:12:46.920
And it's a little 16-minute video where he just pretty much talks about what it is.


00:12:46.920 --> 00:12:52.080
And the insight is Python can import from a zip file.


00:12:52.080 --> 00:12:53.760
Even if you corrupt the zip file.


00:12:53.760 --> 00:12:54.760
Even if you corrupt it.


00:12:54.760 --> 00:12:57.960
- They corrupt the zip file by like putting


00:12:57.960 --> 00:13:02.320
like a main at the end and some like the header on there


00:13:02.320 --> 00:13:04.280
to tell the rest of the operating system


00:13:04.280 --> 00:13:06.040
that it's a Python program.


00:13:06.040 --> 00:13:09.120
And it just tries, your environment just tries


00:13:09.120 --> 00:13:11.880
to run it like Python and it imports


00:13:11.880 --> 00:13:15.160
all of its dependencies from itself.


00:13:15.160 --> 00:13:17.880
And you know, I kind of got lost as to exactly


00:13:17.880 --> 00:13:20.280
how that works, but it looks fun also.


00:13:20.280 --> 00:13:21.160
- Yeah, it definitely looks cool.


00:13:21.160 --> 00:13:24.760
So if your goal is more to share executable things


00:13:24.760 --> 00:13:27.240
with developers, it seems like PEX is really awesome,


00:13:27.240 --> 00:13:28.660
or maybe even with infrastructure,


00:13:28.660 --> 00:13:30.960
like I want to deploy this thing to the server,


00:13:30.960 --> 00:13:32.880
and I just want to drop it in, have it go,


00:13:32.880 --> 00:13:34.360
and not have to deal with dependencies


00:13:34.360 --> 00:13:36.000
and virtual environments, all that stuff.


00:13:36.000 --> 00:13:36.820
Looks super cool.


00:13:36.820 --> 00:13:39.020
And I get the sense that they're using this


00:13:39.020 --> 00:13:40.320
in production at Twitter,


00:13:40.320 --> 00:13:42.720
even though I don't remember them exactly saying that.


00:13:42.720 --> 00:13:44.920
- Or using it just even for tools,


00:13:44.920 --> 00:13:47.740
because some of the examples were just to,


00:13:47.740 --> 00:13:49.080
you've got a little project,


00:13:49.080 --> 00:13:50.920
it's got a virtual environment with,


00:13:50.920 --> 00:13:55.200
or it's got some requirements for it and some dependencies,


00:13:55.200 --> 00:13:57.720
you just kind of make that into an executable


00:13:57.720 --> 00:13:59.560
and then you can just drop the whole thing


00:13:59.560 --> 00:14:01.720
into your bin directory or something


00:14:01.720 --> 00:14:02.760
and not worry about it.


00:14:02.760 --> 00:14:03.600
- That's really nice.


00:14:03.600 --> 00:14:05.440
- That's pretty great. - Super cool.


00:14:05.440 --> 00:14:06.960
All right, so I want to keep with this theme


00:14:06.960 --> 00:14:08.720
of we're going to package up some code and run it.


00:14:08.720 --> 00:14:11.360
And even with either of these,


00:14:11.360 --> 00:14:14.720
like it's great that Pax can zip up your source files


00:14:14.720 --> 00:14:18.400
or that PyInstaller can zip up your source files,


00:14:18.400 --> 00:14:20.000
but you're still sending your source code


00:14:20.000 --> 00:14:23.520
like straight to people and that can be bad potentially.


00:14:23.520 --> 00:14:25.120
Maybe you've got some secret algorithm,


00:14:25.120 --> 00:14:27.440
maybe you've got licensing that you don't want


00:14:27.440 --> 00:14:28.280
to just be able to like,


00:14:28.280 --> 00:14:30.280
well, we'll just comment out the license check


00:14:30.280 --> 00:14:31.200
and we'll be good, right?


00:14:31.200 --> 00:14:32.300
Something like that.


00:14:32.300 --> 00:14:35.400
So there's this interesting article that came by this week


00:14:35.400 --> 00:14:39.920
called using Cython to protect a Python code base.


00:14:39.920 --> 00:14:44.920
So Cython is a fully to machine instruction compiled variant


00:14:44.920 --> 00:14:45.760
of Python, right?


00:14:45.760 --> 00:14:49.980
We've got Python, we got PyPI, we got Cython,


00:14:49.980 --> 00:14:52.060
We've got Iron Python, all these variations.


00:14:52.060 --> 00:14:54.940
And Cython is one that came from the SageMath guys


00:14:54.940 --> 00:14:57.340
way, way back in the day to compile this


00:14:57.340 --> 00:14:59.100
to faster machine instructions.


00:14:59.100 --> 00:15:03.740
But it's fully compiled code out of .py files,


00:15:03.740 --> 00:15:05.460
which is pretty interesting.


00:15:05.460 --> 00:15:08.180
So that makes it way harder to mess with.


00:15:08.180 --> 00:15:09.620
So this article walks you through


00:15:09.620 --> 00:15:13.860
building a Python package and all the little extra


00:15:13.860 --> 00:15:16.580
tricks and tweaks that you've gotta do


00:15:16.580 --> 00:15:21.420
so that you can compile your Python code with Cython


00:15:21.420 --> 00:15:23.140
and then ship it as a wheel, which


00:15:23.140 --> 00:15:27.060
is the current standard for pip installing a thing.


00:15:27.060 --> 00:15:29.740
So you can create a binary distributed wheel


00:15:29.740 --> 00:15:32.260
that has zero source code that is compiled


00:15:32.260 --> 00:15:34.100
for a particular architecture.


00:15:34.100 --> 00:15:34.600
Whoa.


00:15:34.600 --> 00:15:35.380
Isn't that cool?


00:15:35.380 --> 00:15:36.260
So if you want to--


00:15:36.260 --> 00:15:37.060
It's very interesting.


00:15:37.060 --> 00:15:38.940
Yeah, and then you could combine this with pyinstaller


00:15:38.940 --> 00:15:41.100
and make it an exe, and off you go, right?


00:15:41.100 --> 00:15:41.620
Yeah.


00:15:41.620 --> 00:15:44.580
Since the algorithm's open, is it reversible then?


00:15:44.580 --> 00:15:47.460
- Well, it's like compiling C code or C++ or something.


00:15:47.460 --> 00:15:50.540
So it is technically reversible and you can get it back,


00:15:50.540 --> 00:15:52.500
but it's way, way harder, right?


00:15:52.500 --> 00:15:53.340
- Yeah.


00:15:53.340 --> 00:15:55.020
- So they do say there are certain ways


00:15:55.020 --> 00:15:56.680
to like hack the runtime.


00:15:56.680 --> 00:15:58.920
If you import it, you might be able to get it


00:15:58.920 --> 00:16:00.060
to give up some of its secrets,


00:16:00.060 --> 00:16:01.780
but it's definitely better


00:16:01.780 --> 00:16:03.100
than actually shipping the source code.


00:16:03.100 --> 00:16:05.500
- This reminds me of Obfuscators.


00:16:05.500 --> 00:16:08.060
I can't remember if it was in C# or Java.


00:16:08.060 --> 00:16:09.540
Do you remember Obfuscators?


00:16:09.540 --> 00:16:11.220
- Yeah, I totally remember those.


00:16:11.220 --> 00:16:13.560
That was such, that was even such a weird word to say


00:16:13.560 --> 00:16:16.280
when I first learned about it, I remember that actually,


00:16:16.280 --> 00:16:18.200
I think it first came out in Java


00:16:18.200 --> 00:16:21.080
to sort of scramble a bytecode, Java bytecode,


00:16:21.080 --> 00:16:23.200
and .NET definitely has it as well,


00:16:23.200 --> 00:16:25.920
'cause they have IL, which both Java bytecode


00:16:25.920 --> 00:16:28.160
and .NET IL are super reversible.


00:16:28.160 --> 00:16:31.900
Like it's almost exactly what you wrote gets pulled back


00:16:31.900 --> 00:16:34.880
other than maybe like where you put your curly braces


00:16:34.880 --> 00:16:37.240
on the new line, on the top, on the if line,


00:16:37.240 --> 00:16:38.240
you know, things like that.


00:16:38.240 --> 00:16:39.600
It's like really, really reversible.


00:16:39.600 --> 00:16:41.360
So I think this protecting with Cython


00:16:41.360 --> 00:16:44.660
actually would be even better than obfuscating,


00:16:44.660 --> 00:16:46.340
although I haven't looked at all the different angles.


00:16:46.340 --> 00:16:48.420
It's really an interesting idea though.


00:16:48.420 --> 00:16:49.900
And it doesn't have to be everything, right?


00:16:49.900 --> 00:16:52.100
Like you could take your core algorithm


00:16:52.100 --> 00:16:54.020
that you want to protect or whatever,


00:16:54.020 --> 00:16:56.620
Cythonize it and then just import it


00:16:56.620 --> 00:16:58.300
into the rest of your code.


00:16:58.300 --> 00:16:59.420
- Yeah, that's a really great idea


00:16:59.420 --> 00:17:02.140
because like for instance, a bunch of the stuff


00:17:02.140 --> 00:17:05.280
like reading config files or your user interface


00:17:05.280 --> 00:17:06.940
or something, you might not care about that part.


00:17:06.940 --> 00:17:07.780
- Right, exactly.


00:17:07.780 --> 00:17:09.660
- It can be reverse engineered pretty easily


00:17:09.660 --> 00:17:10.980
just by looking at it.


00:17:10.980 --> 00:17:14.680
but your core algorithms and the real reason


00:17:14.680 --> 00:17:16.000
why people are buying your product,


00:17:16.000 --> 00:17:17.520
that's not a bad idea.


00:17:17.520 --> 00:17:18.400
So this is cool.


00:17:18.400 --> 00:17:19.560
- Yep, I've never tried it,


00:17:19.560 --> 00:17:20.880
but this is a pretty cool idea


00:17:20.880 --> 00:17:22.320
and it's a step-by-step sort of thing.


00:17:22.320 --> 00:17:24.360
So I thought people might find that useful out there.


00:17:24.360 --> 00:17:25.200
- I think so.


00:17:25.200 --> 00:17:26.020
- Yeah, awesome.


00:17:26.020 --> 00:17:26.860
Well, that's our six items.


00:17:26.860 --> 00:17:27.700
- That's awesome.


00:17:27.700 --> 00:17:28.640
Went really fast.


00:17:28.640 --> 00:17:29.480
- Like always.


00:17:29.480 --> 00:17:31.640
- So I don't have anything extra to add.


00:17:31.640 --> 00:17:33.360
Do you have anything you'd like to talk about?


00:17:33.360 --> 00:17:35.420
- I have a little bit of a survey I'd like people


00:17:35.420 --> 00:17:37.280
to consider filling out,


00:17:37.280 --> 00:17:39.240
really only if you're like super passionate about this.


00:17:39.240 --> 00:17:42.520
I'm one of the projects that I'm working on is I want to create a course to make


00:17:42.520 --> 00:17:47.520
working with Python on windows better and delightful, not frustrating and


00:17:47.520 --> 00:17:48.040
challenging.


00:17:48.040 --> 00:17:52.480
So I'm trying to gather a bunch of information on what people find hard


00:17:52.480 --> 00:17:54.060
with working with Python on windows.


00:17:54.060 --> 00:17:57.560
I've got a bunch of people filled out a form, like about 200 people filled this


00:17:57.560 --> 00:18:01.320
out already, but I put a link here to a Google docs forum.


00:18:01.320 --> 00:18:05.220
If you work with Python on windows and you've had struggles with it and you


00:18:05.220 --> 00:18:06.720
have some sort of feedback you can give.


00:18:06.720 --> 00:18:09.080
so you could help me maybe create a class or something,


00:18:09.080 --> 00:18:11.160
some sort of resource to help people be more successful


00:18:11.160 --> 00:18:12.420
with Python on Windows,


00:18:12.420 --> 00:18:14.080
fill out the form at the bottom of the show notes,


00:18:14.080 --> 00:18:14.920
that'd be awesome.


00:18:14.920 --> 00:18:15.760
- Oh, great.


00:18:15.760 --> 00:18:17.880
I'll definitely fill this out and pass it around


00:18:17.880 --> 00:18:20.520
because there's a ton of people that I work with


00:18:20.520 --> 00:18:24.160
that are kind of new to Python and new to Python on Windows.


00:18:24.160 --> 00:18:25.100
- Oh, that'd be perfect.


00:18:25.100 --> 00:18:25.940
Yeah, that'd be awesome.


00:18:25.940 --> 00:18:26.840
I mean, a lot of people are like,


00:18:26.840 --> 00:18:28.160
well, just use Linux or whatever,


00:18:28.160 --> 00:18:31.280
but when you show up at a tutorial


00:18:31.280 --> 00:18:33.840
or to give a training class to a corporate group


00:18:33.840 --> 00:18:36.440
and they all have their corporate Windows 7 laptops,


00:18:36.440 --> 00:18:39.920
it doesn't matter whether you recommend Linux or macOS,


00:18:39.920 --> 00:18:41.880
they have to make it work on their environments.


00:18:41.880 --> 00:18:43.780
And so my goal is to try to make that


00:18:43.780 --> 00:18:45.000
like a much smoother process.


00:18:45.000 --> 00:18:45.840
- Great, cool.


00:18:45.840 --> 00:18:47.440
- Awesome, well, thanks again for meeting up


00:18:47.440 --> 00:18:49.000
and pulling all these ideas together.


00:18:49.000 --> 00:18:49.840
It's always fun.


00:18:49.840 --> 00:18:50.660
- Oh yeah, thank you.


00:18:50.660 --> 00:18:51.920
Talk to you next week.


00:18:51.920 --> 00:18:53.680
- Thank you for listening to Python Bytes.


00:18:53.680 --> 00:18:56.160
Follow the show on Twitter via @PythonBytes.


00:18:56.160 --> 00:18:59.360
That's Python Bytes as in B-Y-T-E-S.


00:18:59.360 --> 00:19:02.720
And get the full show notes at pythonbytes.fm.


00:19:02.720 --> 00:19:04.360
If you have a news item you want featured,


00:19:04.360 --> 00:19:06.800
just visit pythonbytes.fm and send it our way.


00:19:06.800 --> 00:19:09.960
We're always on the lookout for sharing something cool.


00:19:09.960 --> 00:19:11.800
On behalf of myself and Brian Auchin,


00:19:11.800 --> 00:19:13.320
this is Michael Kennedy.


00:19:13.320 --> 00:19:15.340
Thank you for listening and sharing this podcast


00:19:15.340 --> 00:19:17.000
with your friends and colleagues.

