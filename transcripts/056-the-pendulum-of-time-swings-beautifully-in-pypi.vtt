
00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.000 --> 00:00:11.200
This is episode 56 recorded December 12th, 2017. I'm Michael Kennedy.


00:00:11.200 --> 00:00:12.160
And I'm Brian Okken.


00:00:12.160 --> 00:00:14.960
And we got a bunch of awesome stuff like always lined up for you.


00:00:14.960 --> 00:00:17.200
Before we get to it, Brian, let's just say thanks to Rollbar.


00:00:17.200 --> 00:00:17.840
Thanks Rollbar.


00:00:17.840 --> 00:00:22.000
Yeah, thank you Rollbar for supporting the show, tell you more about what they got going on later.


00:00:22.000 --> 00:00:26.240
I want to hear the tick tock of the pendulum, if you will.


00:00:26.240 --> 00:00:30.320
I was reading an article called "Dealing with Date Times Like a Pro in Python."


00:00:30.320 --> 00:00:32.320
Which can be way harder than it should be, right?


00:00:32.320 --> 00:00:36.800
Yes, and I think that there's things like Arrow and Maya that try to get...


00:00:36.800 --> 00:00:41.440
So that you don't really have to deal with date times directly. But this is actually a nice


00:00:41.440 --> 00:00:47.360
article on dealing with date times if you want to use the direct library. However, at the end of it,


00:00:47.360 --> 00:00:53.520
they mentioned Pendulum, which I hadn't run across before. So checking it out, there's a link here


00:00:53.520 --> 00:01:00.520
for the pendulum Python date times made easy and the website is beautiful but


00:01:00.520 --> 00:01:05.760
also the interface to it it looks really nice I mean you can think do things like


00:01:05.760 --> 00:01:13.080
just import pendulum and then pendulum now in Europe Paris or in America or


00:01:13.080 --> 00:01:18.880
something and then you can do things like add dates together and do you know


00:01:18.880 --> 00:01:23.360
subtract dates and the normal things you have to do with date times but the just


00:01:23.360 --> 00:01:24.840
the model looks nice. I like it.


00:01:24.840 --> 00:01:26.000
>> Yeah. It looks really,


00:01:26.000 --> 00:01:29.600
really nice and the website is quite stunning.


00:01:29.600 --> 00:01:32.400
To me, on one hand, whatever, it's documentation.


00:01:32.400 --> 00:01:33.920
On the other, it really shows


00:01:33.920 --> 00:01:36.520
the people working on this actually care about this project,


00:01:36.520 --> 00:01:39.040
and it's not just some random thing thrown on GitHub.


00:01:39.040 --> 00:01:40.480
Yeah, it's really cool. You say like


00:01:40.480 --> 00:01:42.580
pendulum.now and you give it a time zone,


00:01:42.580 --> 00:01:45.440
say like Europe/Paris, and then you can


00:01:45.440 --> 00:01:47.840
subtract weeks from it or you can.


00:01:47.840 --> 00:01:51.160
One thing I like to do is put times relative to humans,


00:01:51.160 --> 00:01:53.240
like a week ago, five seconds ago,


00:01:53.240 --> 00:01:56.760
in 10 minutes, and so it just has a diff for humans,


00:01:56.760 --> 00:01:58.240
you know, and that's really nice.


00:01:58.240 --> 00:02:01.520
- I'm gonna include in the show notes links to Arrow and Maya


00:02:01.520 --> 00:02:05.320
and I think it's a matter of developer taste, really,


00:02:05.320 --> 00:02:07.120
and what looks more natural to you,


00:02:07.120 --> 00:02:09.800
so check 'em all out and see what's nicer for you.


00:02:09.800 --> 00:02:10.760
- Yeah, it's really nice.


00:02:10.760 --> 00:02:12.000
The other one to throw in here


00:02:12.000 --> 00:02:14.520
while we're thinking about all this is parsing datetimes,


00:02:14.520 --> 00:02:16.960
which I think there's 700 different formats


00:02:16.960 --> 00:02:20.200
for datetimes and text, which is insane,


00:02:20.200 --> 00:02:22.240
but I really like to use Python dateutil,


00:02:22.240 --> 00:02:24.600
So pip install Python dash dateUtil,


00:02:24.600 --> 00:02:26.360
but just import dateUtil.


00:02:26.360 --> 00:02:29.460
And it can parse like lots and lots of stuff.


00:02:29.460 --> 00:02:31.760
So you can just go here, load that into time,


00:02:31.760 --> 00:02:33.560
you know, and that's one more thing.


00:02:33.560 --> 00:02:34.960
But this is really, really slick.


00:02:34.960 --> 00:02:37.360
It has more sort of time delta things,


00:02:37.360 --> 00:02:39.960
like how many weeks, how many days, how many hours,


00:02:39.960 --> 00:02:41.520
as opposed to just like the seconds,


00:02:41.520 --> 00:02:42.920
total seconds, the built-in one.


00:02:42.920 --> 00:02:44.600
Really nice, I like it, good find.


00:02:44.600 --> 00:02:46.160
So the next thing that I wanna talk about,


00:02:46.160 --> 00:02:47.680
we're gonna talk about some web stuff, aren't we?


00:02:47.680 --> 00:02:49.440
So the next one I wanna do is,


00:02:49.440 --> 00:02:52.040
it's sort of a web thing, but it doesn't really have to be.


00:02:52.040 --> 00:02:54.200
it's any kind of service or long running thing.


00:02:54.200 --> 00:02:57.240
So one of the things that can be a challenge


00:02:57.240 --> 00:03:01.340
with web applications is long running tasks


00:03:01.340 --> 00:03:02.220
or tasks that are slow,


00:03:02.220 --> 00:03:05.120
but you don't really need to like wait on their outcome.


00:03:05.120 --> 00:03:06.720
So I'll give you an example.


00:03:06.720 --> 00:03:10.160
On my training website, training.talkpython.fm,


00:03:10.160 --> 00:03:12.640
on that site, there's a capability


00:03:12.640 --> 00:03:15.340
to email everyone in a class.


00:03:15.340 --> 00:03:20.160
And it turns out, if you in the same request,


00:03:20.160 --> 00:03:23.840
actually email thousands of people one at a time,


00:03:23.840 --> 00:03:25.560
like through Amazon SES or something,


00:03:25.560 --> 00:03:28.120
that request times out.


00:03:28.120 --> 00:03:29.480
And then you've emailed some people


00:03:29.480 --> 00:03:31.480
and you don't know how far you got,


00:03:31.480 --> 00:03:33.220
you've got to go figure out how to rewrite that


00:03:33.220 --> 00:03:34.800
some other way, right?


00:03:34.800 --> 00:03:35.640
That's a problem.


00:03:35.640 --> 00:03:38.360
Yeah, so there's certain things like email,


00:03:38.360 --> 00:03:41.580
like logging, like other sort of kick this job off


00:03:41.580 --> 00:03:42.420
and forget about it,


00:03:42.420 --> 00:03:44.000
that would be much better served


00:03:44.000 --> 00:03:45.760
in some sort of asynchronous way.


00:03:45.760 --> 00:03:47.040
One of the best things you can do


00:03:47.040 --> 00:03:48.440
to add scalability to your app


00:03:48.440 --> 00:03:51.020
is to push those kinds of things onto some background,


00:03:51.020 --> 00:03:53.480
sort of get to it when you can style.


00:03:53.480 --> 00:03:55.000
And probably the most formal way


00:03:55.000 --> 00:03:57.320
is to use some kind of queuing.


00:03:57.320 --> 00:03:59.040
So the thing I wanna talk about now


00:03:59.040 --> 00:04:02.240
is this article called Flask Asynchronous Background Tasks


00:04:02.240 --> 00:04:04.080
with Celery and Redis.


00:04:04.080 --> 00:04:05.840
Although it has nothing really to do with Flask,


00:04:05.840 --> 00:04:07.640
although it uses Flask as an example.


00:04:07.640 --> 00:04:09.320
It could be Django, it could be Pyramid,


00:04:09.320 --> 00:04:12.040
like really it's the Celery bit that's interesting.


00:04:12.040 --> 00:04:15.200
So you take Celery as the worker, right?


00:04:15.200 --> 00:04:16.040
It's gonna run back there


00:04:16.040 --> 00:04:19.240
it's gonna look at the Redis message bus.


00:04:19.240 --> 00:04:21.640
And what you do is you just kick jobs off to it,


00:04:21.640 --> 00:04:23.720
and it'll just start pulling them off and working on them.


00:04:23.720 --> 00:04:25.040
So what I could have done is said,


00:04:25.040 --> 00:04:27.460
oh, I wanna email 3,000 people.


00:04:27.460 --> 00:04:29.360
So go to the database, get the 3,000 people,


00:04:29.360 --> 00:04:32.720
and just put 3,000 email this person jobs


00:04:32.720 --> 00:04:35.400
onto a Celery queue and been done straight away.


00:04:35.400 --> 00:04:37.840
And it would just do it over the next minute or two.


00:04:37.840 --> 00:04:38.760
- Actually, that's pretty cool.


00:04:38.760 --> 00:04:39.600
- Yeah.


00:04:39.600 --> 00:04:41.000
- I've got my, the wheels are turning in my head


00:04:41.000 --> 00:04:43.640
thinking things that I wanna use Celery for.


00:04:43.640 --> 00:04:44.840
- I know, I feel the same way.


00:04:44.840 --> 00:04:47.080
It's a really nice write up of how you like walk through these things.


00:04:47.080 --> 00:04:52.200
So it talks about using the Celery client to connect Flask to Celery, the Celery worker


00:04:52.200 --> 00:04:55.780
process, the message broker that works with the Redis backend.


00:04:55.780 --> 00:05:00.640
And the other thing that's interesting about this is so often these Python examples, these


00:05:00.640 --> 00:05:04.000
especially Python web examples are done on Mac OS or Linux.


00:05:04.000 --> 00:05:06.020
And this is all on Windows.


00:05:06.020 --> 00:05:10.600
And I don't think Redis is even supported on Windows or Celery, one of them.


00:05:10.600 --> 00:05:11.600
I think it's Redis.


00:05:11.600 --> 00:05:14.320
It's not, there's like an unofficial build or something.


00:05:14.320 --> 00:05:20.400
I think it's kind of extra interesting to show this other angle and show people how to do it where it might not be so obvious.


00:05:20.400 --> 00:05:27.360
Also, something like taking on Celery, it's kind of nice to look at an example project to see how it's been used because


00:05:27.360 --> 00:05:32.000
just jumping right into the entry of the documentation can be a little scary sometimes.


00:05:32.000 --> 00:05:35.200
Here's a nice little simple example. Take it and do what you will with it.


00:05:35.200 --> 00:05:41.840
Yeah, well, we have another web example that I liked and this is from Bob Belderboss of PyBytes.


00:05:41.840 --> 00:05:49.120
He wrote a guest article on RealPython called "Building a Simple Web App with Bottle, SQLAlchemy,


00:05:49.120 --> 00:05:51.480
and the Twitter API."


00:05:51.480 --> 00:05:55.480
The reason why this caught my attention is because I was curious about having some way


00:05:55.480 --> 00:05:58.240
to interact with Twitter and Python.


00:05:58.240 --> 00:06:01.580
I think I'm going to walk through this a little bit.


00:06:01.580 --> 00:06:06.680
From start to finish, it's a project that isn't pushing things into Twitter.


00:06:06.680 --> 00:06:12.480
reading Twitter and then displaying them on a little bottle website that they pushed up


00:06:12.480 --> 00:06:13.480
to Heroku.


00:06:13.480 --> 00:06:17.960
And it's kind of cool that they document everything from start to finish for this.


00:06:17.960 --> 00:06:18.960
It's neat.


00:06:18.960 --> 00:06:22.440
Yeah, it has the deployment bit as well, like pushing it to Heroku and making it work there,


00:06:22.440 --> 00:06:26.760
which is also kind of cool because web apps are fun, but they belong on the web, not your


00:06:26.760 --> 00:06:27.760
laptop.


00:06:27.760 --> 00:06:33.560
It's on my queue of things to, on my celery queue of things to learn because I'm a busy


00:06:33.560 --> 00:06:36.960
learning Flask at the time, but maybe I'll check this out next.


00:06:36.960 --> 00:06:39.960
Yeah, that sounds really interesting. Definitely. Nice job, Bob.


00:06:39.960 --> 00:06:43.160
Now, before we get on to talking about


00:06:43.160 --> 00:06:45.160
something that's actually not on the web,


00:06:45.160 --> 00:06:48.560
but has to do with Python, let me just tell you a quick story


00:06:48.560 --> 00:06:50.560
of yesterday.


00:06:50.560 --> 00:06:54.160
Yesterday, I decided, let me see how far I can push


00:06:54.160 --> 00:06:57.760
the performance of MicroWZGI and Nginx


00:06:57.760 --> 00:06:59.760
on the Talk Python sites.


00:06:59.760 --> 00:07:03.260
Luckily for you, Brian, I didn't do this on PythonBytes.fm.


00:07:03.260 --> 00:07:07.760
But like, alright, I think I can push the parallelism out better.


00:07:07.760 --> 00:07:09.460
I could crank up the number of threads.


00:07:09.460 --> 00:07:13.860
I can crack open the process affinity, processor affinity.


00:07:13.860 --> 00:07:17.060
So like get the maximum parallelization out of


00:07:17.060 --> 00:07:19.060
MicroWZG, which is one of the better


00:07:19.060 --> 00:07:21.460
sort of application tier


00:07:21.460 --> 00:07:24.860
worker process web servers for Python.


00:07:24.860 --> 00:07:26.860
Okay, so that seemed like a good idea, right?


00:07:26.860 --> 00:07:31.120
Turns out, something about the threading was bad.


00:07:31.120 --> 00:07:33.120
And I don't know what it is.


00:07:33.120 --> 00:07:35.300
I don't really care to look into it.


00:07:35.300 --> 00:07:38.080
But I started getting roll bar notifications


00:07:38.080 --> 00:07:42.720
saying that the template files could not be found


00:07:42.720 --> 00:07:43.560
for the website,


00:07:43.560 --> 00:07:48.560
which has been basically largely unchanged for months.


00:07:48.560 --> 00:07:52.640
And then it couldn't convert this template to a string


00:07:52.640 --> 00:07:54.240
and all sorts of random errors.


00:07:54.240 --> 00:07:55.320
And I'm like, what is going on?


00:07:55.320 --> 00:07:58.440
there's some kind of corruption timing problem


00:07:58.440 --> 00:08:00.280
in this whole series.


00:08:00.280 --> 00:08:04.240
And I would have, it happened like one out of 100,000 times.


00:08:04.240 --> 00:08:05.760
I mean, really, really rare.


00:08:05.760 --> 00:08:08.400
But it started coming in like a couple of times yesterday.


00:08:08.400 --> 00:08:10.120
So I'm like, all right, well,


00:08:10.120 --> 00:08:12.040
I guess we're gonna turn that back down.


00:08:12.040 --> 00:08:13.200
Turn it back down, errors went away.


00:08:13.200 --> 00:08:14.680
And without Rollbar, I never would have known it.


00:08:14.680 --> 00:08:17.860
So if you guys wanna make sure that your apps are working,


00:08:17.860 --> 00:08:21.440
go check out Rollbar, just pythonbytes.fm/rollbar


00:08:21.440 --> 00:08:25.080
and sign up and you too may start getting weird messages


00:08:25.080 --> 00:08:27.080
that you need to go look into, it'd be awesome.


00:08:27.080 --> 00:08:27.920
- Yeah, nice.


00:08:27.920 --> 00:08:30.220
- Yeah, so that was yesterday.


00:08:30.220 --> 00:08:34.160
But today I want to move on and talk about something


00:08:34.160 --> 00:08:37.040
that I actually covered way back on Talk Python,


00:08:37.040 --> 00:08:39.440
let's say about 40 episodes ago,


00:08:39.440 --> 00:08:41.560
so not quite a year, 40 weeks ago.


00:08:41.560 --> 00:08:45.680
And that was the Visual Studio Code extension


00:08:45.680 --> 00:08:49.720
written by a guy named Don Jayamana, Jayamani,


00:08:49.720 --> 00:08:52.520
sorry about that, I'm sure I'm messing up your name.


00:08:52.520 --> 00:08:56.240
And he wrote a really cool Python extension


00:08:56.240 --> 00:08:58.820
to basically add Python capabilities to VS Code.


00:08:58.820 --> 00:09:00.520
And it turned out to be the first


00:09:00.520 --> 00:09:03.280
or second most popular thing in Visual Studio Code.


00:09:03.280 --> 00:09:04.940
It had like millions of downloads.


00:09:04.940 --> 00:09:05.780
That's pretty cool, right?


00:09:05.780 --> 00:09:06.600
- That's very cool, yeah.


00:09:06.600 --> 00:09:09.280
- Yeah, and so one of the things I looked at,


00:09:09.280 --> 00:09:10.840
you know, when we spoke, it's pretty interesting.


00:09:10.840 --> 00:09:14.240
He took, I'd say maybe 10 different packages,


00:09:14.240 --> 00:09:17.200
Jedi and other, you know, Flake 8,


00:09:17.200 --> 00:09:18.020
and those types of things.


00:09:18.020 --> 00:09:19.800
And he basically wove those together


00:09:19.800 --> 00:09:22.840
into an extension for VS Code,


00:09:22.840 --> 00:09:24.640
he didn't really build a huge amount,


00:09:24.640 --> 00:09:26.440
but he definitely put it together


00:09:26.440 --> 00:09:28.040
in a really, really usable way.


00:09:28.040 --> 00:09:30.020
So that was pretty cool.


00:09:30.020 --> 00:09:33.080
So today, this week, the news is that he is now


00:09:33.080 --> 00:09:34.920
officially hired by Microsoft


00:09:34.920 --> 00:09:36.480
because of his open source project.


00:09:36.480 --> 00:09:37.760
- That's nice, really cool.


00:09:37.760 --> 00:09:40.480
- Yeah, so here's a guy who started an open source project


00:09:40.480 --> 00:09:43.320
and got this pretty influential job


00:09:43.320 --> 00:09:45.800
just because he had a really successful plugin


00:09:45.800 --> 00:09:47.100
for this open source thing.


00:09:47.100 --> 00:09:49.240
So pretty, pretty cool.


00:09:49.240 --> 00:09:51.160
It doesn't really mean many changes,


00:09:51.160 --> 00:09:53.300
just there's a few more people working on


00:09:53.300 --> 00:09:55.340
the Python extension for VS Code,


00:09:55.340 --> 00:09:56.580
which if you're into VS Code,


00:09:56.580 --> 00:09:58.940
it's a lot like Atom or Sublime.


00:09:58.940 --> 00:10:02.640
It's quite nice if that's your style of editor.


00:10:02.640 --> 00:10:03.840
It does a lot of cool stuff.


00:10:03.840 --> 00:10:06.040
Basically, there'll be more people working on it,


00:10:06.040 --> 00:10:07.860
fewer bugs, faster turnaround.


00:10:07.860 --> 00:10:10.080
The other big news is they're also hiring


00:10:10.080 --> 00:10:12.180
for Visual Studio Code Python developers.


00:10:12.180 --> 00:10:14.920
If you're looking for a job and that sounds pretty awesome,


00:10:14.920 --> 00:10:16.280
there's some really cool guys over there.


00:10:16.280 --> 00:10:18.620
There's Brett Cannon, there's Steve Dower.


00:10:18.620 --> 00:10:21.620
some of the big hitters on the Python core dev team


00:10:21.620 --> 00:10:22.620
in addition to Don.


00:10:22.620 --> 00:10:25.380
So that might be worth looking into if that interests you.


00:10:25.380 --> 00:10:26.220
Nice.


00:10:26.220 --> 00:10:29.820
So I feel like you're kind of doing this web crash course,


00:10:29.820 --> 00:10:32.100
getting into a lot of different things on the web, right?


00:10:32.100 --> 00:10:34.500
- I'm trying to embrace the web a little bit more.


00:10:34.500 --> 00:10:35.340
- Nice.


00:10:35.340 --> 00:10:36.180
So what'd you find?


00:10:36.180 --> 00:10:37.000
- Yeah.


00:10:37.000 --> 00:10:37.840
So one of the things with,


00:10:37.840 --> 00:10:41.900
we talk about a lot of mechanics of how to get websites up


00:10:41.900 --> 00:10:44.880
with Flask and Bottle and Django and all that.


00:10:44.880 --> 00:10:49.640
But sometimes the design of your website,


00:10:49.640 --> 00:10:51.200
as it turns out, at the end,


00:10:51.200 --> 00:10:53.880
is like leaves a little bit lacking.


00:10:53.880 --> 00:10:55.360
- It looks like a developer designed it.


00:10:55.360 --> 00:10:57.640
- Yeah, definitely looks like a developer designed it,


00:10:57.640 --> 00:11:01.600
which is usually better than when it looks like


00:11:01.600 --> 00:11:04.880
a database engineer designed it, but still.


00:11:04.880 --> 00:11:08.000
There's an article called a comprehensive,


00:11:08.000 --> 00:11:09.720
it's on Smashing Magazine,


00:11:09.720 --> 00:11:12.320
called "A Comprehensive Guide to Web Design."


00:11:12.320 --> 00:11:14.400
It's a long article, but it's all one page,


00:11:14.400 --> 00:11:18.720
And it's a nice, I think a good overview of the,


00:11:18.720 --> 00:11:23.320
basically the basics of make sure you have this stuff down


00:11:23.320 --> 00:11:26.680
and to make sure your website doesn't suck too bad.


00:11:26.680 --> 00:11:27.520
- That's really cool.


00:11:27.520 --> 00:11:29.480
I feel like design is one of those things


00:11:29.480 --> 00:11:31.440
that feels like a barrier to developers.


00:11:31.440 --> 00:11:32.640
You're like, I'm not a designer,


00:11:32.640 --> 00:11:34.020
I can't do stuff that's pretty,


00:11:34.020 --> 00:11:35.240
I can't build these types of things.


00:11:35.240 --> 00:11:37.240
But if you put in just a little effort,


00:11:37.240 --> 00:11:39.500
you can turn that barrier into a superpower


00:11:39.500 --> 00:11:40.800
because most people don't have it.


00:11:40.800 --> 00:11:42.100
And it's actually not that hard


00:11:42.100 --> 00:11:45.360
if you just sit down and focus and try to study it


00:11:45.360 --> 00:11:46.320
for a month or something?


00:11:46.320 --> 00:11:48.080
- Especially a lot of times,


00:11:48.080 --> 00:11:49.680
there's a lot of projects that get done,


00:11:49.680 --> 00:11:53.080
like internal work projects or different tools


00:11:53.080 --> 00:11:56.500
for a small group of people that you don't have the money


00:11:56.500 --> 00:11:58.760
to hire a front-end designer.


00:11:58.760 --> 00:12:00.400
So something like this to go through


00:12:00.400 --> 00:12:03.700
and make sure that you do your breadcrumbs appropriately


00:12:03.700 --> 00:12:07.020
and you put your search box in a findable place


00:12:07.020 --> 00:12:10.060
and some of these page structure overviews


00:12:10.060 --> 00:12:12.540
that are good to just make it more usable.


00:12:12.540 --> 00:12:15.740
And this doesn't add a lot of work to your workflow.


00:12:15.740 --> 00:12:18.940
It actually, I think it takes away some of the stress


00:12:18.940 --> 00:12:21.860
of designing a webpage if you're not a designer.


00:12:21.860 --> 00:12:22.680
- Yeah, it's cool.


00:12:22.680 --> 00:12:23.860
It gives you a framework to think through


00:12:23.860 --> 00:12:24.700
and stuff you gotta do anyway.


00:12:24.700 --> 00:12:25.520
That's cool.


00:12:25.520 --> 00:12:27.160
All right, final item.


00:12:27.160 --> 00:12:30.760
What would you name the baby of requests and Selenium


00:12:30.760 --> 00:12:33.580
coming together to create some new library?


00:12:33.580 --> 00:12:36.220
- Well, I know the answer, but--


00:12:36.220 --> 00:12:37.300
- Requestium. - Requestium.


00:12:37.300 --> 00:12:39.500
- Maybe one of the candidates


00:12:39.500 --> 00:12:40.540
you throw out there, right?


00:12:40.540 --> 00:12:41.380
- Yeah.


00:12:41.380 --> 00:12:42.200
- So the thing I want to talk about


00:12:42.200 --> 00:12:43.100
is this thing called Requestium.


00:12:43.100 --> 00:12:46.020
And we have Requests, which everybody knows,


00:12:46.020 --> 00:12:49.900
super, super popular library for just downloading HTML.


00:12:49.900 --> 00:12:52.220
And we have Selenium, which fewer people know,


00:12:52.220 --> 00:12:55.540
but it's basically a headless Chrome browser.


00:12:55.540 --> 00:12:56.620
There's other options as well,


00:12:56.620 --> 00:12:58.260
but let's say Chrome for now.


00:12:58.260 --> 00:12:59.580
And you control it from Python.


00:12:59.580 --> 00:13:01.740
And so use them in different situations.


00:13:01.740 --> 00:13:03.940
Requests is super lightweight,


00:13:03.940 --> 00:13:05.900
takes no, very, very few dependencies.


00:13:05.900 --> 00:13:07.460
I mean, it doesn't depend on, say, Chrome.


00:13:07.460 --> 00:13:09.700
It just depends on a few packages.


00:13:09.700 --> 00:13:12.060
And you can download the HTML and do what you will with it.


00:13:12.060 --> 00:13:14.820
But if you happen to run into, let's say,


00:13:14.820 --> 00:13:19.300
an AngularJS or Vue.js or any other JS site


00:13:19.300 --> 00:13:21.140
that has like a front-end JavaScript framework


00:13:21.140 --> 00:13:23.700
that basically requires the JavaScript to execute


00:13:23.700 --> 00:13:26.140
to get the content, you end up with just a bunch


00:13:26.140 --> 00:13:28.200
of curly braces that have no meaning


00:13:28.200 --> 00:13:29.460
when you hit it with request, right?


00:13:29.460 --> 00:13:30.380
- Oh, I didn't know that.


00:13:30.380 --> 00:13:32.460
- Yeah, you just get the HTML that's basically,


00:13:32.460 --> 00:13:34.900
here's where JavaScript will fill out the holes.


00:13:34.900 --> 00:13:35.740
Good luck with that.


00:13:35.740 --> 00:13:36.860
You know what I mean?


00:13:36.860 --> 00:13:38.500
And so that's kind of useless.


00:13:38.500 --> 00:13:40.060
So you might use Selenium,


00:13:40.060 --> 00:13:42.060
but Selenium is way more heavyweight.


00:13:42.060 --> 00:13:45.500
So the Requestium basically merges the power of requests,


00:13:45.500 --> 00:13:47.240
Selenium, and this thing called Parcel,


00:13:47.240 --> 00:13:49.660
which is like BeautifulSoup or Scrapy.


00:13:49.660 --> 00:13:53.240
It understands HTML and lets you ask questions of it.


00:13:53.240 --> 00:13:54.500
So the idea is like,


00:13:54.500 --> 00:13:56.580
it's written for mostly when you're doing requests,


00:13:56.580 --> 00:13:58.540
but that one time or two that you're like,


00:13:58.540 --> 00:14:01.620
oh, you need this login sequence has to happen


00:14:01.620 --> 00:14:03.580
in a richer JavaScript way.


00:14:03.580 --> 00:14:05.060
And it lets you do crazy things


00:14:05.060 --> 00:14:08.500
like automatically switch between request sessions


00:14:08.500 --> 00:14:10.300
and Selenium sessions.


00:14:10.300 --> 00:14:12.780
And it lets you basically, I think,


00:14:12.780 --> 00:14:14.540
share cookies across them


00:14:14.540 --> 00:14:16.420
and all sorts of interesting stuff like that.


00:14:16.420 --> 00:14:19.120
So if you need like a little bit heavier weight


00:14:19.120 --> 00:14:21.780
than request but not full on Selenium,


00:14:21.780 --> 00:14:24.060
here's a nice combo sort of marriage of the two.


00:14:24.060 --> 00:14:25.180
- Oh, that's nice, cool.


00:14:25.180 --> 00:14:28.400
- Yeah, so very good for either testing or web scraping


00:14:28.400 --> 00:14:30.360
or some other types of things.


00:14:30.360 --> 00:14:32.780
But if you need to test something that's JavaScript heavy,


00:14:32.780 --> 00:14:34.540
this is a pretty good option here.


00:14:34.540 --> 00:14:35.380
- Nice.


00:14:35.380 --> 00:14:36.520
- All right, well that's our news, Brian.


00:14:36.520 --> 00:14:38.300
At least the ones we've selected for everyone else,


00:14:38.300 --> 00:14:39.140
but how about yourself?


00:14:39.140 --> 00:14:39.980
What do you got going on?


00:14:39.980 --> 00:14:42.980
- Well, I finally got a Test and Code episode out


00:14:42.980 --> 00:14:45.080
this not too long ago.


00:14:45.080 --> 00:14:46.460
I don't know if I brought it up already.


00:14:46.460 --> 00:14:47.360
- I don't think so.


00:14:47.360 --> 00:14:48.200
Not here.


00:14:48.200 --> 00:14:51.540
- It was a nice interview with Katherine Jarmal,


00:14:51.540 --> 00:14:54.780
or KJAM, about testing and data science,


00:14:54.780 --> 00:14:57.180
and it's Test and Code episode 33,


00:14:57.180 --> 00:14:59.460
and it's been very well received so far,


00:14:59.460 --> 00:15:01.540
so a lot of people get some value out of it.


00:15:01.540 --> 00:15:02.380
- Yeah, that's great.


00:15:02.380 --> 00:15:03.200
Katherine's done a bunch of cool work,


00:15:03.200 --> 00:15:04.840
So definitely go over there and check it out.


00:15:04.840 --> 00:15:06.800
- And the last thing I wanted to mention was


00:15:06.800 --> 00:15:10.240
I had asked people to leave Amazon reviews


00:15:10.240 --> 00:15:13.280
for books that they like, including mine, hopefully.


00:15:13.280 --> 00:15:16.380
And so far, nine people have left reviews


00:15:16.380 --> 00:15:18.240
on Python testing with PyTest.


00:15:18.240 --> 00:15:19.340
So thanks a lot.


00:15:19.340 --> 00:15:20.180
- Yeah, that's great.


00:15:20.180 --> 00:15:21.000
- How about you, any news?


00:15:21.000 --> 00:15:21.840
- Not a whole lot of news.


00:15:21.840 --> 00:15:25.360
I'm working hard, but I'm getting things ready


00:15:25.360 --> 00:15:26.840
to talk about, nothing to talk about yet.


00:15:26.840 --> 00:15:30.320
But someday soon, I guess the big thing I have coming up,


00:15:30.320 --> 00:15:34.160
I just recorded some nice talk Python episodes,


00:15:34.160 --> 00:15:36.840
one actually on optimizing web servers.


00:15:36.840 --> 00:15:39.480
And then later this week, I'm recording one,


00:15:39.480 --> 00:15:43.440
which is a panel session on machine learning


00:15:43.440 --> 00:15:46.040
and artificial intelligence at the Large Hadron Collider


00:15:46.040 --> 00:15:47.160
and in particle physics.


00:15:47.160 --> 00:15:48.200
- Oh, that sounds interesting.


00:15:48.200 --> 00:15:50.960
And the last few episodes that you've put out,


00:15:50.960 --> 00:15:53.200
I mean, you always have good episodes,


00:15:53.200 --> 00:15:55.120
but I've really enjoyed the last few quite a bit.


00:15:55.120 --> 00:15:55.960
- Thanks a bunch.


00:15:55.960 --> 00:15:57.040
Yeah, same for you.


00:15:58.040 --> 00:16:02.240
All right, man. Well, thank you for sharing this stuff and everyone, thank you for listening.


00:16:02.240 --> 00:16:03.240
Thank you.


00:16:03.240 --> 00:16:08.360
Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's


00:16:08.360 --> 00:16:14.920
Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.FM. If you


00:16:14.920 --> 00:16:19.000
have a news item you want featured, just visit PythonBytes.FM and send it our way. We're


00:16:19.000 --> 00:16:24.000
always on the lookout for sharing something cool. On behalf of myself and Brian Aukin,


00:16:24.000 --> 00:16:27.920
this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends

