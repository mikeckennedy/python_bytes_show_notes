
00:00:00.000 --> 00:00:02.120
- Hello and welcome to Python Bytes,


00:00:02.120 --> 00:00:03.600
where we deliver Python news and headlines


00:00:03.600 --> 00:00:04.840
directly to your earbuds.


00:00:04.840 --> 00:00:09.360
This is episode 284, recorded May 17th, 2022.


00:00:09.360 --> 00:00:10.200
I'm Michael Kennedy.


00:00:10.200 --> 00:00:11.720
- And I am Brian Okken.


00:00:11.720 --> 00:00:13.080
- And I am Daniel Mulkey.


00:00:13.080 --> 00:00:14.800
- Daniel, great to have you here.


00:00:14.800 --> 00:00:16.000
- Thank you, it's an honor.


00:00:16.000 --> 00:00:17.680
- Yeah, it's an honor to have you.


00:00:17.680 --> 00:00:20.160
Now, before we get into our first topic


00:00:20.160 --> 00:00:21.000
that Brian's gonna tell us about,


00:00:21.000 --> 00:00:23.200
just give us a bit of your background.


00:00:23.200 --> 00:00:28.200
- Sure, I am a optical engineer in Southern California,


00:00:28.360 --> 00:00:31.000
But I have a significant amount of my time


00:00:31.000 --> 00:00:33.640
spent using Python for data analysis, instrument


00:00:33.640 --> 00:00:34.720
control, and other things.


00:00:34.720 --> 00:00:37.760
So I've been doing it for the better part of the last five


00:00:37.760 --> 00:00:38.440
years.


00:00:38.440 --> 00:00:40.840
And I've had a back and forth relationship with MATLAB


00:00:40.840 --> 00:00:43.960
and have finally married to Python, so to speak.


00:00:43.960 --> 00:00:44.840
- Fantastic.


00:00:44.840 --> 00:00:46.400
You've finally been able to get out


00:00:46.400 --> 00:00:48.520
of your dysfunctional relationship with math.


00:00:48.520 --> 00:00:49.840
- Yes, exactly.


00:00:49.840 --> 00:00:51.320
- It sounds a little bit like you


00:00:51.320 --> 00:00:53.920
might live in a parallel universe to Brian.


00:00:53.920 --> 00:00:55.080
- Yeah, it sounds like it.


00:00:55.080 --> 00:00:56.960
We should definitely get you on testing code


00:00:56.960 --> 00:00:58.220
Can we NPS about that?


00:00:58.220 --> 00:01:00.800
I'm sure yeah, I'd love to Brian.


00:01:00.800 --> 00:01:03.520
I would love to hear about our first topic you want to.


00:01:03.520 --> 00:01:07.920
Well, talk about it sounds very distinct, you know, distinct to buy.


00:01:07.920 --> 00:01:08.920
Yes, very distinct.


00:01:08.920 --> 00:01:10.720
So I ran across this.


00:01:10.720 --> 00:01:12.520
I can't remember how I ran across it.


00:01:12.520 --> 00:01:13.520
Guess it doesn't matter.


00:01:13.520 --> 00:01:17.720
But one of the things I like, it's a Python package called distinct to buy.


00:01:17.720 --> 00:01:19.920
And it's very simple.


00:01:19.920 --> 00:01:26.320
It's a lightweight Python package to provide functions to generate colors


00:01:26.320 --> 00:01:28.960
that are visually distinct from one another.


00:01:28.960 --> 00:01:33.120
So I was thinking like, you know, you got a chart,


00:01:33.120 --> 00:01:35.360
like maybe you're taking user data or something


00:01:35.360 --> 00:01:37.280
and you don't know how many lines you're gonna plot,


00:01:37.280 --> 00:01:39.120
but you're gonna plot a whole bunch of lines.


00:01:39.120 --> 00:01:41.680
How do you pick the colors for what the lines are?


00:01:41.680 --> 00:01:44.640
So this is a kind of a neat thing


00:01:44.640 --> 00:01:48.400
to just pick visually distinct colors.


00:01:48.400 --> 00:01:52.400
Pretty focused, but it's pretty cool.


00:01:52.400 --> 00:01:54.560
And all you do is you kind of just give it,


00:01:55.440 --> 00:02:05.840
You give it like the number of colors you want and it gives you back the colors and you can it has display capabilities. So you have to install extra stuff to make that happen.


00:02:05.840 --> 00:02:14.040
But you can display color swatches to with it and I was looking at some of the different colors that are available like one of the ones was.


00:02:14.040 --> 00:02:21.680
15 different colors, I think it's 15 colors for normal vision versus some colorblindness.


00:02:21.680 --> 00:02:26.280
So if you have colorblind people, you can pick based on some of that stuff.


00:02:26.280 --> 00:02:31.360
There's a whole bunch of examples in the repo too that it's kind of fun to look at.


00:02:31.360 --> 00:02:34.440
One of them was the normal colorblind one.


00:02:34.440 --> 00:02:36.400
Oh, was that it?


00:02:36.400 --> 00:02:37.720
No, that wasn't it.


00:02:37.720 --> 00:02:42.080
But there's some really cool examples of different colors.


00:02:42.080 --> 00:02:44.880
So if you just give it a few, it just grabs a few, of course.


00:02:44.880 --> 00:02:49.400
But there's a whole bunch of neat ones, clusters and things.


00:02:49.400 --> 00:02:52.040
So anyway, cool little library.


00:02:52.040 --> 00:02:52.640
>> It's great.


00:02:52.640 --> 00:02:54.120
>> Yeah, I like that they have--


00:02:54.120 --> 00:02:55.360
I noticed when I was looking through it,


00:02:55.360 --> 00:02:57.560
they have a function for generating a color palette.


00:02:57.560 --> 00:03:00.360
And so you can generate a color blind-friendly palette.


00:03:00.360 --> 00:03:03.080
So hypothetically, that works well for visual color blind.


00:03:03.080 --> 00:03:05.480
And if it's in print and you're doing black and white,


00:03:05.480 --> 00:03:06.840
so that was the most interesting thing to me.


00:03:06.840 --> 00:03:08.760
>> Oh, do you mean this black and white?


00:03:08.760 --> 00:03:10.080
That's interesting.


00:03:10.080 --> 00:03:12.380
At least I think if you take a color blind palette


00:03:12.380 --> 00:03:13.360
and you make it black and white,


00:03:13.360 --> 00:03:14.880
typically it's still a decent contrast.


00:03:14.880 --> 00:03:17.320
So you don't have to worry about printing things out.


00:03:17.320 --> 00:03:18.160
- Oh, that's cool.


00:03:18.160 --> 00:03:19.080
- Yeah, that's great.


00:03:19.080 --> 00:03:22.680
And one of its functions is to take the color map


00:03:22.680 --> 00:03:25.720
that it generates and turn that into a map plot lib.


00:03:25.720 --> 00:03:26.560
- Oh yeah, yeah, yeah.


00:03:26.560 --> 00:03:27.520
- Which is cool.


00:03:27.520 --> 00:03:29.120
- Well, that's what I was looking for.


00:03:29.120 --> 00:03:29.960
- Yeah.


00:03:29.960 --> 00:03:32.420
Oh, wow.


00:03:32.420 --> 00:03:33.260
- And there's somebody in the audience


00:03:33.260 --> 00:03:34.920
who just found out the color blind.


00:03:34.920 --> 00:03:35.760
- Yeah, go ahead, Daniel.


00:03:35.760 --> 00:03:36.680
- No, just kidding.


00:03:36.680 --> 00:03:37.720
And there's somebody in the audience


00:03:37.720 --> 00:03:39.120
who just found out the color blind.


00:03:39.120 --> 00:03:40.080
(laughing)


00:03:40.080 --> 00:03:41.080
They're like, is there a difference?


00:03:41.080 --> 00:03:41.920
What is this?


00:03:41.920 --> 00:03:42.760
(laughing)


00:03:42.760 --> 00:03:46.320
- So, I, yeah, one of my kids found out


00:03:46.320 --> 00:03:49.240
like in high school that they were colorblind.


00:03:49.240 --> 00:03:51.200
So, interesting.


00:03:51.200 --> 00:03:52.360
- Yeah, how would you know?


00:03:52.360 --> 00:03:53.200
- Yeah. - For a long time.


00:03:53.200 --> 00:03:54.560
You're just like, people tell me that's a color.


00:03:54.560 --> 00:03:56.320
I guess I'm not great at picking out that color.


00:03:56.320 --> 00:03:58.640
- She got, she, an art teacher said,


00:03:58.640 --> 00:04:01.120
"I really love how you used both blues and greens


00:04:01.120 --> 00:04:02.160
"in the sky."


00:04:02.160 --> 00:04:05.920
And she was like, "I intended to just use blue, but thanks."


00:04:05.920 --> 00:04:07.080
(laughing)


00:04:07.080 --> 00:04:09.040
- I have a friend who went to art school


00:04:09.040 --> 00:04:11.080
and that was essentially his story


00:04:11.080 --> 00:04:12.880
that he always had really vivid color choices


00:04:12.880 --> 00:04:15.280
'cause he didn't see the same as everybody else.


00:04:15.280 --> 00:04:16.400
(laughing)


00:04:16.400 --> 00:04:17.920
It was great, it was awesome.


00:04:17.920 --> 00:04:19.400
- That's pretty cool.


00:04:19.400 --> 00:04:21.880
- Yeah, cool, all right.


00:04:21.880 --> 00:04:22.920
Brian, we ready for the next one?


00:04:22.920 --> 00:04:24.200
- Definitely.


00:04:24.200 --> 00:04:29.200
- Okay, so let's talk about SQL Soda, or Soda SQL.


00:04:29.200 --> 00:04:32.280
So this is a open source CLI tool


00:04:32.280 --> 00:04:35.560
that if you're doing like ETL,


00:04:35.560 --> 00:04:38.880
like ingest transform loads type of stuff,


00:04:38.880 --> 00:04:43.240
doing other sort of analysis or exploration of SQL data.


00:04:43.240 --> 00:04:46.120
It allows you to connect to your data source


00:04:46.120 --> 00:04:49.040
like your database, and then define tests


00:04:49.040 --> 00:04:51.760
for what invalid data looks like, right?


00:04:51.760 --> 00:04:53.120
Does this have to be a number?


00:04:53.120 --> 00:04:56.360
Can it, does it just have to be not null?


00:04:56.360 --> 00:04:57.360
You know, what is it?


00:04:57.360 --> 00:05:00.720
So for an example here, they're talking about,


00:05:00.720 --> 00:05:04.400
here's the YAML file for a warehouse,


00:05:04.400 --> 00:05:08.360
a data warehouse reporting type thing for Postgres.


00:05:08.360 --> 00:05:11.360
So you just set up like your connection and your host


00:05:11.360 --> 00:05:14.200
and all that kind of stuff and then off it goes.


00:05:14.200 --> 00:05:15.180
So pretty neat.


00:05:15.180 --> 00:05:17.080
And then you can scan your dataset


00:05:17.080 --> 00:05:19.500
to run tests against your data.


00:05:19.500 --> 00:05:20.340
Isn't that cool?


00:05:20.340 --> 00:05:21.180
- That's right.


00:05:21.180 --> 00:05:22.920
It's soda cool.


00:05:22.920 --> 00:05:23.880
- It's soda cool.


00:05:23.880 --> 00:05:24.720
It is soda cool.


00:05:24.720 --> 00:05:26.880
(both laughing)


00:05:26.880 --> 00:05:30.400
Yeah, so you just say soda scan


00:05:30.400 --> 00:05:32.920
and you give it the YAML file


00:05:32.920 --> 00:05:34.140
for the connection information


00:05:34.140 --> 00:05:36.120
and then a YAML file for the types of things


00:05:36.120 --> 00:05:37.160
you wanna test.


00:05:37.160 --> 00:05:39.700
So they've got this example of how you're talking


00:05:39.700 --> 00:05:41.620
to one of the data warehouses and it's going


00:05:41.620 --> 00:05:44.220
and pulling in these config files.


00:05:44.220 --> 00:05:46.060
And it basically, this example,


00:05:46.060 --> 00:05:48.800
it's testing 54 different conditions.


00:05:48.800 --> 00:05:50.460
Three tests were executed.


00:05:50.460 --> 00:05:52.040
Everything's good to go.


00:05:52.040 --> 00:05:55.200
So, you know, if you're getting kind of data dropped on you


00:05:55.200 --> 00:05:57.440
or you're scanning, you know, scraping data


00:05:57.440 --> 00:06:00.580
from other places on some kind of background job


00:06:00.580 --> 00:06:01.580
and you wanna bring it in, you know,


00:06:01.580 --> 00:06:02.420
if it's all automated,


00:06:02.420 --> 00:06:03.740
how do you know when it goes wrong, right?


00:06:03.740 --> 00:06:06.180
So here's a nice, simple way to express that.


00:06:06.180 --> 00:06:07.780
- Yeah, that's neat.


00:06:07.780 --> 00:06:09.860
- Yeah, and Brandon out in the audience says,


00:06:09.860 --> 00:06:11.860
"I think we're looking at great expectations


00:06:11.860 --> 00:06:12.780
"for this same thing."


00:06:12.780 --> 00:06:15.580
And yeah, this is kind of a, I guess,


00:06:15.580 --> 00:06:19.180
my first impression is this is a less code way


00:06:19.180 --> 00:06:21.520
of doing what great expectations does, right?


00:06:21.520 --> 00:06:24.280
So like you can just put together some YAML files


00:06:24.280 --> 00:06:27.200
that define what you wanna test for, right?


00:06:27.200 --> 00:06:28.820
So for example, in this YAML file,


00:06:28.820 --> 00:06:30.460
I can say the metrics are row count,


00:06:30.460 --> 00:06:32.540
missing count, and missing percentage,


00:06:32.540 --> 00:06:33.980
and then I can test that the row count


00:06:33.980 --> 00:06:35.540
is greater than zero, right?


00:06:35.540 --> 00:06:39.680
And then another one is for the column, for the ID,


00:06:39.680 --> 00:06:41.720
it's a UUID that it's,


00:06:41.720 --> 00:06:46.040
I'm allowing 0% of the UUID format to be invalid, right?


00:06:46.040 --> 00:06:48.380
You know, that's got like a certain structure to it, right?


00:06:48.380 --> 00:06:51.080
It's like a, either a straight UUID or a string that looks,


00:06:51.080 --> 00:06:53.200
that can be parsable over to one, I'm guessing,


00:06:53.200 --> 00:06:54.040
something like that.


00:06:54.040 --> 00:06:55.520
So pretty cool.


00:06:55.520 --> 00:06:57.320
I think that's probably the biggest difference.


00:06:57.320 --> 00:06:59.920
So if you just want to define kind of like declaratively,


00:06:59.920 --> 00:07:02.480
like here are the conditions of which I want it to test,


00:07:02.480 --> 00:07:03.760
and then you want to just set it up


00:07:03.760 --> 00:07:06.040
to continuously scan it, looks good.


00:07:06.040 --> 00:07:08.080
- The invalid percentage looks interesting


00:07:08.080 --> 00:07:12.440
because it's an interesting addition of like,


00:07:12.440 --> 00:07:15.440
you know, there can be some bad rows,


00:07:15.440 --> 00:07:18.280
but we don't want more than like 20% bad rows


00:07:18.280 --> 00:07:19.520
or something like that.


00:07:19.520 --> 00:07:22.840
- Right, right, maybe you can't have zero errors, right?


00:07:22.840 --> 00:07:25.940
Like you just, sometimes the data is just not there.


00:07:25.940 --> 00:07:27.720
But if it's 100% not there,


00:07:27.720 --> 00:07:29.160
then something's gone terribly wrong


00:07:29.160 --> 00:07:31.000
or the data formats change


00:07:31.000 --> 00:07:33.200
and it's not called that anymore or whatever.


00:07:33.200 --> 00:07:35.200
JSON, who knows? Daniel, what do you think?


00:07:35.200 --> 00:07:38.200
My data is always in CSV files, so I have,


00:07:38.200 --> 00:07:40.700
I guess there are pros and cons to never having touched SQL,


00:07:40.700 --> 00:07:42.700
as I've heard from some.


00:07:42.700 --> 00:07:45.000
Much easier to version control.


00:07:45.000 --> 00:07:47.000
Just put the CSV in version control.


00:07:47.000 --> 00:07:52.000
Yeah, anyway, I think this one's pretty neat.


00:07:52.000 --> 00:07:55.000
People can check it out if they're doing relational data stuff,


00:07:55.000 --> 00:07:58.000
and they, especially if you're doing a lot of, like,


00:07:58.000 --> 00:08:00.700
on-demand, you know, not like you ask for it,


00:08:00.700 --> 00:08:02.200
but it's just on-demand processing,


00:08:02.200 --> 00:08:05.560
You're given a database and you want to check it out to see how it's doing.


00:08:05.560 --> 00:08:09.480
So I won't go on anymore on that because I've got a ton of other extras.


00:08:09.480 --> 00:08:11.000
So kick it over to you, Daniel.


00:08:11.000 --> 00:08:11.800
Cool.


00:08:11.800 --> 00:08:13.480
So let's see.


00:08:13.480 --> 00:08:19.320
There was a review article back in 2020 published in the research journal Nature.


00:08:19.320 --> 00:08:27.320
For anyone not in the research articles world, Nature is one of the top level ones.


00:08:27.320 --> 00:08:31.880
For reference, in grad school, we had some fancy work we did with quantum entanglement.


00:08:31.880 --> 00:08:37.880
and we got rejected by a sub journal of nature. So to get anything into nature is highly non-trivial.


00:08:37.880 --> 00:08:40.680
I will add the caveat that this- - It's like the JAMA,


00:08:40.680 --> 00:08:44.840
the Journal of American Medical Association of science basically.


00:08:44.840 --> 00:08:47.000
- It's absolutely one of the top ones. - Yeah.


00:08:47.000 --> 00:08:51.560
- And I will say it's a review article. So it's easier typically to get a review article than to


00:08:51.560 --> 00:08:55.320
say, "Hey, this is bleeding edge research that's gonna change the world." But still,


00:08:55.320 --> 00:08:56.880
The big news is two things.


00:08:56.880 --> 00:09:01.600
One, that there is a article by Travis Elephant and others


00:09:01.600 --> 00:09:04.560
on array programming with NumPy in nature.


00:09:04.560 --> 00:09:07.020
That's a big enough deal that they chose to publish this.


00:09:07.020 --> 00:09:07.960
And they got through.


00:09:07.960 --> 00:09:09.960
And it's, I think, very significant


00:09:09.960 --> 00:09:12.000
that that software was something that


00:09:12.000 --> 00:09:14.280
was good enough to publish.


00:09:14.280 --> 00:09:16.160
The other-- and they go through, and they


00:09:16.160 --> 00:09:18.360
talk about the fundamentals of it all.


00:09:18.360 --> 00:09:19.820
There's one diagram I really like


00:09:19.820 --> 00:09:22.720
that sort of shows how the whole ecosystem stacks up.


00:09:22.720 --> 00:09:24.080
You've got NumPy as the base.


00:09:24.080 --> 00:09:25.820
- That's a cool visualization.


00:09:25.820 --> 00:09:28.020
- Yeah, and then you got SciPy and Matplotlib


00:09:28.020 --> 00:09:29.620
and the other plotting libraries.


00:09:29.620 --> 00:09:31.500
So there's the foundation.


00:09:31.500 --> 00:09:34.140
- Yeah, I was just gonna say, for people who are listening,


00:09:34.140 --> 00:09:37.540
it's like the tree of life for scientific libraries.


00:09:37.540 --> 00:09:38.740
Sorry, go on, Daniel.


00:09:38.740 --> 00:09:40.900
- Yeah, that's absolutely right.


00:09:40.900 --> 00:09:43.540
So from that foundation as far as algorithms and plots,


00:09:43.540 --> 00:09:45.980
you go up to a specific method you're using.


00:09:45.980 --> 00:09:47.700
Are you doing image processing?


00:09:47.700 --> 00:09:49.340
Are you doing machine learning or something else?


00:09:49.340 --> 00:09:51.780
And off-domain specifics like Astropy,


00:09:51.780 --> 00:09:53.660
and I think you've had those guys on Python,


00:09:53.660 --> 00:09:56.360
we've gotten to talk to them and then down to very application specific.


00:09:56.360 --> 00:10:00.840
So it numpy serving almost everybody who does anything numerical down to like


00:10:00.840 --> 00:10:04.160
Q-tip, which is used for people working on quantum computers.


00:10:04.160 --> 00:10:09.560
Very large breadth being discussed. Q-tip. That's so cute.


00:10:09.560 --> 00:10:10.800
I like it.


00:10:10.800 --> 00:10:18.440
And yeah, so it's notable that Python got into nature.


00:10:18.440 --> 00:10:20.920
And if you go search for Python, there are a lot of other articles,


00:10:21.320 --> 00:10:23.020
But it's also interesting to see that they're willing


00:10:23.020 --> 00:10:24.180
to publish software.


00:10:24.180 --> 00:10:26.600
You guys have talked in the past about how


00:10:26.600 --> 00:10:28.580
you can't always publish a software package


00:10:28.580 --> 00:10:30.980
in any research journal, so how do you get credit for that


00:10:30.980 --> 00:10:32.380
if you're in academia?


00:10:32.380 --> 00:10:33.860
But this is an interesting take to see


00:10:33.860 --> 00:10:35.700
that nature chose to publish it.


00:10:35.700 --> 00:10:36.900
- Yeah, this is super interesting.


00:10:36.900 --> 00:10:40.500
I think it's very valuable to just raise awareness, right?


00:10:40.500 --> 00:10:43.100
It's, you know, this is the water that we swim in,


00:10:43.100 --> 00:10:44.700
but not everyone.


00:10:44.700 --> 00:10:47.620
Everyone is immersed in the Python data science tooling,


00:10:47.620 --> 00:10:49.020
right? - Yeah.


00:10:49.020 --> 00:10:50.380
- There's a lot of authors on here.


00:10:50.380 --> 00:10:52.020
Yeah, I was trying to understand.


00:10:52.020 --> 00:10:54.540
I'm guessing those are the maintainers of the packages


00:10:54.540 --> 00:10:55.980
that were included, but I mean,


00:10:55.980 --> 00:10:58.540
you don't have 20 people write one paper.


00:10:58.540 --> 00:11:00.020
So I don't know how,


00:11:00.020 --> 00:11:01.940
I think it's kind of like the LIGO papers


00:11:01.940 --> 00:11:03.940
or like the gravitational wave interferometer ones


00:11:03.940 --> 00:11:05.860
where like this crazy list,


00:11:05.860 --> 00:11:07.660
it's like the first page of the articles,


00:11:07.660 --> 00:11:08.480
almost all authors,


00:11:08.480 --> 00:11:09.640
just 'cause there's so many people


00:11:09.640 --> 00:11:11.500
that worked on this for so long.


00:11:11.500 --> 00:11:13.140
So I'm guessing that's the story.


00:11:13.140 --> 00:11:15.340
- And you can access it.


00:11:15.340 --> 00:11:18.220
Some articles, some journals,


00:11:18.220 --> 00:11:21.060
you can't actually read it unless you have a subscription,


00:11:21.060 --> 00:11:22.260
but this one's available.


00:11:22.260 --> 00:11:26.100
- Indeed, yeah, very cool pick.


00:11:26.100 --> 00:11:29.060
Before we move on, maybe you know, Daniel,


00:11:29.060 --> 00:11:30.220
Alvaro, an audience asks,


00:11:30.220 --> 00:11:31.940
have any of you come across a way


00:11:31.940 --> 00:11:34.940
to validate Pandas data frames against a schema,


00:11:34.940 --> 00:11:38.460
much like SQL Soda, Soda SQL?


00:11:38.460 --> 00:11:40.220
- Thought of my scope.


00:11:40.220 --> 00:11:42.540
- I feel like we have, but I don't remember.


00:11:42.540 --> 00:11:46.000
- Yeah, I don't remember either.


00:11:46.000 --> 00:11:50.600
Sorry, maybe something we should seek out for the next one.


00:11:50.600 --> 00:11:52.400
And I think we might get some answers in the audience.


00:11:52.400 --> 00:11:56.440
So we'll let them inform us as we move on.


00:11:56.440 --> 00:11:58.340
So Brian, what's next?


00:11:58.340 --> 00:12:01.320
- Well, this isn't Python specific,


00:12:01.320 --> 00:12:05.240
but I think a lot of Python people are using GitHub Actions.


00:12:05.240 --> 00:12:09.400
So GitHub announced, I guess, recently,


00:12:09.400 --> 00:12:12.720
a supercharging GitHub Actions with job summaries.


00:12:12.720 --> 00:12:14.320
It's an article that we'll link to.


00:12:14.320 --> 00:12:19.040
and basically it's pretty cool.


00:12:19.040 --> 00:12:20.120
I can't wait to try this.


00:12:20.120 --> 00:12:21.760
I'm using GitHub Actions.


00:12:21.760 --> 00:12:25.520
And the gist is you can now have Markdown


00:12:25.520 --> 00:12:29.360
go directly into your GitHub job summary sort of thing


00:12:29.360 --> 00:12:33.320
with like this crazy global variable


00:12:33.320 --> 00:12:35.180
called GitHub step summary.


00:12:35.180 --> 00:12:39.160
But it's got Markdown to it.


00:12:39.160 --> 00:12:41.040
And I'm like, well, what can you do with this though?


00:12:41.040 --> 00:12:46.040
but Simon Wilson released, was tweeting about it.


00:12:46.040 --> 00:12:50.880
And then said, and then Ned Batchelder said,


00:12:50.880 --> 00:12:51.940
"Hey, I'm using it too."


00:12:51.940 --> 00:12:56.700
So Ned has a little example on his, on coverage.py


00:12:56.700 --> 00:12:59.000
that shows, what does it show?


00:12:59.000 --> 00:13:03.020
It shows you get this nice total coverage percentage.


00:13:03.020 --> 00:13:05.080
If you wanna put that in your,


00:13:05.080 --> 00:13:09.640
in the coverage for your repo, you can do that.


00:13:09.640 --> 00:13:13.220
interesting that coverage.py is not 100% covered.


00:13:13.220 --> 00:13:14.980
(laughing)


00:13:14.980 --> 00:13:16.220
I don't know why I find that funny.


00:13:16.220 --> 00:13:17.360
- The irony, I love it.


00:13:17.360 --> 00:13:22.940
- But, and then, so Simon also listed Dataset


00:13:22.940 --> 00:13:25.540
as an example on Dataset.


00:13:25.540 --> 00:13:30.420
You doing, adding some extra stuff to,


00:13:30.420 --> 00:13:31.540
what is he adding?


00:13:31.540 --> 00:13:32.380
Changed files.


00:13:32.380 --> 00:13:35.140
Oh, he's got a tool that does,


00:13:35.140 --> 00:13:40.020
looks for how many files have changed in recently.


00:13:40.020 --> 00:13:44.160
And he actually just wrote a write up for that.


00:13:44.160 --> 00:13:45.780
So we're linked to that as well.


00:13:45.780 --> 00:13:47.800
So GitHub action job summaries,


00:13:47.800 --> 00:13:50.060
and he shows how it works.


00:13:50.060 --> 00:13:51.940
You can pop out stuff.


00:13:51.940 --> 00:13:52.780
And I love Markdown.


00:13:52.780 --> 00:13:55.300
- Yeah, even little code fences and all sorts of stuff.


00:13:55.300 --> 00:13:56.700
That's very cool if you wanna structure


00:13:56.700 --> 00:13:57.620
something real nice like that.


00:13:57.620 --> 00:13:58.620
- Yeah, it even has,


00:13:58.620 --> 00:14:02.140
so supposedly it's got a whole bunch of stuff.


00:14:02.140 --> 00:14:05.100
It's got like, you can do tables even.


00:14:05.100 --> 00:14:07.460
So that's neat and emojis.


00:14:07.460 --> 00:14:08.740
Why not?


00:14:08.740 --> 00:14:09.580
- Oh yeah.


00:14:09.580 --> 00:14:10.420
- Pretty cool.


00:14:10.420 --> 00:14:11.420
- You can put a little fire emoji in there.


00:14:11.420 --> 00:14:12.460
Yes, do it.


00:14:12.460 --> 00:14:13.420
- Is there any way to get images?


00:14:13.420 --> 00:14:15.660
Like if you create an image during the action,


00:14:15.660 --> 00:14:16.980
can you reference it?


00:14:16.980 --> 00:14:18.780
- I don't know.


00:14:18.780 --> 00:14:21.020
It doesn't mention images, but.


00:14:21.020 --> 00:14:22.820
- Maybe you could base 64 encode it


00:14:22.820 --> 00:14:24.140
and embed it as a data URL.


00:14:24.140 --> 00:14:26.780
- Oh wow, it even does a mermaid,


00:14:26.780 --> 00:14:30.940
which is a way to do diagrams within it.


00:14:30.940 --> 00:14:31.780
That's pretty neat.


00:14:31.780 --> 00:14:32.900
- Very nice, like flowcharts.


00:14:32.900 --> 00:14:33.740
- Yeah.


00:14:33.740 --> 00:14:34.580
- Fantastic.


00:14:34.580 --> 00:14:35.580
- This is a good one.


00:14:35.580 --> 00:14:37.660
I need to learn to do more with GitHub Actions.


00:14:37.660 --> 00:14:38.940
I don't do very much with them.


00:14:38.940 --> 00:14:39.780
- I love them.


00:14:39.780 --> 00:14:43.300
They're like, it was, I used to use Travis back in the day,


00:14:43.300 --> 00:14:46.720
but, and I think these are way easier, so.


00:14:46.720 --> 00:14:49.420
- Daniel, do you do any of those sorts of things?


00:14:49.420 --> 00:14:51.660
Any CI automation type stuff?


00:14:51.660 --> 00:14:54.580
- A previous company, we used Azure DevOps


00:14:54.580 --> 00:14:56.940
and set up some stuff to build packages


00:14:56.940 --> 00:14:59.700
and build applications, but not at the moment.


00:14:59.700 --> 00:15:02.780
There's just, it doesn't happen to be any code bases I have,


00:15:02.780 --> 00:15:04.340
but I need that.


00:15:04.340 --> 00:15:05.940
- Yeah, very cool.


00:15:05.940 --> 00:15:08.740
All right, well, I've got an interesting one here.


00:15:08.740 --> 00:15:10.360
I wanna dive into it, you guys.


00:15:10.360 --> 00:15:14.340
So this one, let me give some attribution here.


00:15:14.340 --> 00:15:16.500
This one was sent over by Intimar,


00:15:16.500 --> 00:15:18.620
I believe from Meta,


00:15:18.620 --> 00:15:22.700
and then this is a write-up by Alex Wegged.


00:15:22.700 --> 00:15:26.660
And what it is, is it's basically the notes


00:15:26.660 --> 00:15:27.940
for all of us who were not there


00:15:27.940 --> 00:15:30.780
for the 2022 Python Language Summit.


00:15:30.780 --> 00:15:31.620
So that's pretty cool.


00:15:31.620 --> 00:15:37.620
There were around 30 core developers, triagers, and special guests gathered the day before


00:15:37.620 --> 00:15:38.620
PyCon.


00:15:38.620 --> 00:15:43.920
And so they had a bunch of different talks and ideas they discussed.


00:15:43.920 --> 00:15:49.300
Quick summary, really it's about, so much of this is about performance and parallelism


00:15:49.300 --> 00:15:50.980
right now.


00:15:50.980 --> 00:15:57.380
And then there's a lot of maintainability, back channels, back flows here.


00:15:57.380 --> 00:15:58.380
All right.


00:15:58.380 --> 00:16:03.740
Coming to these first, Sam Gill made a huge splash last year when he talked and he introduced


00:16:03.740 --> 00:16:09.660
the no-gill work that they had done for, I thought, 3.8, I believe. I can't remember,


00:16:09.660 --> 00:16:17.660
3.8, 3.9. No, it was 3.9 for them. Cinder was 3.8. So for 3.9, and there's a lot of interesting


00:16:17.660 --> 00:16:24.540
optimizations and whatnot in that talk. So the idea is, could we live without a global


00:16:24.540 --> 00:16:29.900
will interpret a lock. Larry Hastings tried the galactomy sort of said, you know, it's


00:16:29.900 --> 00:16:34.780
too much of a penalty to try to live without it. But this no-gill work that Sam Gross did


00:16:34.780 --> 00:16:40.460
actually had very small overhead in terms of what it added, but potentially removed


00:16:40.460 --> 00:16:47.300
some of the gill things. So there's a lot of analysis of that. People were excited,


00:16:47.300 --> 00:16:48.700
but how is it written?


00:16:48.700 --> 00:16:52.300
It says, "Robust," there was robust questioning.


00:16:52.300 --> 00:16:54.540
(laughing)


00:16:54.540 --> 00:16:58.460
One, I guess one of the biggest parts that they discussed


00:16:58.460 --> 00:17:00.780
was maybe this should be a fork of CPython.


00:17:00.780 --> 00:17:03.420
There should be a no-gill version of Python.


00:17:03.420 --> 00:17:05.900
And, but Sam is like,


00:17:05.900 --> 00:17:07.980
"Mm, I really don't wanna have


00:17:07.980 --> 00:17:09.680
just another separate version of Python.


00:17:09.680 --> 00:17:11.940
I really want this to just help everyone."


00:17:11.940 --> 00:17:14.260
So, pretty interesting.


00:17:14.260 --> 00:17:17.740
I think originally it was maybe gonna be a runtime flag


00:17:17.740 --> 00:17:19.780
you could pass to Python,


00:17:19.780 --> 00:17:21.380
but it's looking like it more likely


00:17:21.380 --> 00:17:23.180
is gonna turn out to be a compiler flag.


00:17:23.180 --> 00:17:25.060
So you'd have to have a no-guil build,


00:17:25.060 --> 00:17:27.200
even though it's from the same source code.


00:17:27.200 --> 00:17:29.820
So yeah, a bunch of interesting things,


00:17:29.820 --> 00:17:31.420
concerns about how it's gonna work


00:17:31.420 --> 00:17:34.580
with like C libraries and so on.


00:17:34.580 --> 00:17:37.620
But that's, all these are pretty interesting readups,


00:17:37.620 --> 00:17:39.740
reads, write-ups.


00:17:39.740 --> 00:17:42.380
So Eric Snow did a presentation


00:17:42.380 --> 00:17:45.280
on his per interpreter gill,


00:17:45.280 --> 00:17:48.520
which is interesting in how it approaches


00:17:48.520 --> 00:17:51.360
a slightly different problem than say, Sam Gross.


00:17:51.360 --> 00:17:53.520
So Sam is trying to get it out of Python.


00:17:53.520 --> 00:17:56.840
Eric is saying, well, if we could just have a sub interpreter


00:17:56.840 --> 00:17:59.240
like a little mini in-process interpreter


00:17:59.240 --> 00:18:00.320
that runs per thread,


00:18:00.320 --> 00:18:02.560
then they can all gill to their heart's content.


00:18:02.560 --> 00:18:05.960
It doesn't matter 'cause it's all single threaded, right?


00:18:05.960 --> 00:18:08.800
But what's interesting is if you go look at this one,


00:18:08.800 --> 00:18:11.880
in here, we've got this one.


00:18:11.880 --> 00:18:16.560
It says something like way back in 1997,


00:18:16.560 --> 00:18:21.080
this idea of multiple sub-interpreters was added by Guido,


00:18:21.080 --> 00:18:23.900
but it really hasn't, nothing has been done with it.


00:18:23.900 --> 00:18:26.840
And when somebody tries to do stuff with it,


00:18:26.840 --> 00:18:30.320
there were thousands of global variables.


00:18:30.320 --> 00:18:31.960
And if you're going to have per-interpreters,


00:18:31.960 --> 00:18:34.020
you have to somehow have those not shared


00:18:34.020 --> 00:18:36.000
because then you're going to have the gill back on them,


00:18:36.000 --> 00:18:37.620
right, you have that locking.


00:18:37.620 --> 00:18:41.600
So due partly to the deprecation


00:18:41.600 --> 00:18:43.700
of some of the old libraries and stuff,


00:18:43.700 --> 00:18:44.720
it's gotten a little simpler,


00:18:44.720 --> 00:18:47.280
but no, that was it for the next write-up.


00:18:47.280 --> 00:18:49.680
But anyway, they reduced this to almost 1,000,


00:18:49.680 --> 00:18:52.000
to 1,200 remaining globals.


00:18:52.000 --> 00:18:53.000
(laughing)


00:18:53.000 --> 00:18:58.000
So needless to say, it is not totally solved here, right?


00:18:58.000 --> 00:19:01.600
So again, one of the possible worries of all this stuff


00:19:01.600 --> 00:19:03.840
is, well, how are the C extensions going to deal with this?


00:19:03.840 --> 00:19:07.040
Like, they don't know about multiple sub-interpreters.


00:19:07.040 --> 00:19:10.080
Yeah, so anyway, that's another one of the main threads


00:19:10.080 --> 00:19:12.040
going on there, let's see.


00:19:12.040 --> 00:19:14.680
Then this is probably the biggest deal.


00:19:14.680 --> 00:19:18.460
This is a faster CPython 3.12 and beyond


00:19:18.460 --> 00:19:20.960
by Mark Shannon and Guido Van Rossum.


00:19:20.960 --> 00:19:24.200
So stepping back a release, Python 3.11,


00:19:24.200 --> 00:19:26.440
if you haven't heard, is fast.


00:19:26.440 --> 00:19:30.120
It's supposed to be 1.25 times faster than 3.10.


00:19:30.120 --> 00:19:31.000
How about that?


00:19:31.000 --> 00:19:31.920
- Yikes.


00:19:31.920 --> 00:19:32.760
- This blows me away.


00:19:32.760 --> 00:19:37.760
In one year, they were able to make Python 1.25x faster,


00:19:37.760 --> 00:19:39.480
and it's been out for 30 years.


00:19:39.480 --> 00:19:41.440
It's not like, oh, well, we released it last year,


00:19:41.440 --> 00:19:42.480
now we've learned some things.


00:19:42.480 --> 00:19:46.280
You know, it's really, really, really solidified


00:19:46.280 --> 00:19:48.200
in the way that it is, and then still,


00:19:48.200 --> 00:19:49.960
there's a lot of work, and this apparently


00:19:49.960 --> 00:19:50.840
is just the beginning.


00:19:50.840 --> 00:19:53.680
This is like a five-year plan to add all sorts


00:19:53.680 --> 00:19:58.400
of optimizing JIT compilers and all sorts of things.


00:19:58.400 --> 00:20:01.480
- How did they quantify that, or what subset


00:20:01.480 --> 00:20:02.800
the length because I tested on it.


00:20:02.800 --> 00:20:04.200
That's the tricky thing to say.


00:20:04.200 --> 00:20:06.480
Python is 25% faster.


00:20:06.480 --> 00:20:07.800
Doesn't matter what you do,


00:20:07.800 --> 00:20:09.480
even if you just waiting on a database,


00:20:09.480 --> 00:20:10.760
it's still 25% faster.


00:20:10.760 --> 00:20:11.600
Just overclock your


00:20:11.600 --> 00:20:12.680
computer in the background.


00:20:12.680 --> 00:20:14.240
It's it liquid cools it.


00:20:14.240 --> 00:20:18.040
With this, I believe that number


00:20:18.040 --> 00:20:20.400
comes from the unit tests


00:20:20.400 --> 00:20:22.080
like all the tests for CPython.


00:20:22.080 --> 00:20:24.080
I'm not 100% sure, but I believe.


00:20:24.080 --> 00:20:26.480
That was the conversation


00:20:26.480 --> 00:20:28.560
and so one of the big things coming is


00:20:28.560 --> 00:20:30.040
possibly a jet and


00:20:30.040 --> 00:20:31.320
optimizing jet compiler.


00:20:31.320 --> 00:20:34.360
So right now they've found a way to optimize


00:20:34.360 --> 00:20:36.220
individual byte code instructions


00:20:36.220 --> 00:20:39.040
to make the runtime smarter and go,


00:20:39.040 --> 00:20:40.320
oh, I see what you're trying to do.


00:20:40.320 --> 00:20:43.840
We could have a specialized version of that.


00:20:43.840 --> 00:20:45.720
But that's on a per line basis.


00:20:45.720 --> 00:20:47.420
Like how about inlining this method?


00:20:47.420 --> 00:20:49.340
'Cause I only see it called in two places


00:20:49.340 --> 00:20:51.040
or something like that, right?


00:20:51.040 --> 00:20:52.960
So you need something that can look more broadly


00:20:52.960 --> 00:20:53.800
at the code.


00:20:53.800 --> 00:20:56.560
So that's this idea of the JIT compiler and so on.


00:20:56.560 --> 00:20:58.360
So yeah, this is really good,


00:20:58.360 --> 00:21:00.040
but all three of these things I've talked about


00:21:00.040 --> 00:21:03.160
are like both, they might help each other,


00:21:03.160 --> 00:21:05.720
but they also might inhibit each other, right?


00:21:05.720 --> 00:21:08.280
So like the no-gill work might interfere


00:21:08.280 --> 00:21:10.560
with some of the optimizations that they're doing over here


00:21:10.560 --> 00:21:12.560
and the multiple sub-interpreters


00:21:12.560 --> 00:21:16.980
also might be some interplay that they've gotta be worked out.


00:21:16.980 --> 00:21:18.800
So I'll just summarize the rest.


00:21:18.800 --> 00:21:23.120
WebAssembly, and so we've talked about PyScript last time


00:21:23.120 --> 00:21:28.120
and Pyodied, this is the official CPython build target


00:21:28.120 --> 00:21:33.120
build target for just CPython.


00:21:33.120 --> 00:21:34.640
So this is really interesting,


00:21:34.640 --> 00:21:36.400
that it's sort of a more from the core devs


00:21:36.400 --> 00:21:39.240
rather than somebody coercing CPython


00:21:39.240 --> 00:21:40.680
into a different build on their own.


00:21:40.680 --> 00:21:42.200
So that's pretty neat.


00:21:42.200 --> 00:21:44.720
F strings, apparently the F string parser


00:21:44.720 --> 00:21:47.400
is kind of this weird side parser thing


00:21:47.400 --> 00:21:50.560
that's not actually part of the Python code parser.


00:21:50.560 --> 00:21:52.800
But now we have peg, the peg parser,


00:21:52.800 --> 00:21:55.640
it can support more of this and sort of unify that.


00:21:55.640 --> 00:22:00.160
So yeah, there's something like 1,400 lines


00:22:00.160 --> 00:22:02.820
of customized C code for parsing F string.


00:22:02.820 --> 00:22:04.160
(laughing)


00:22:04.160 --> 00:22:06.040
Well, the people who wrote it knew,


00:22:06.040 --> 00:22:07.240
they did a lot of work.


00:22:07.240 --> 00:22:10.800
- There's like 600 of the global variables right there.


00:22:10.800 --> 00:22:12.920
(laughing)


00:22:12.920 --> 00:22:14.120
- Exactly.


00:22:14.120 --> 00:22:18.320
- The most important 1400 lines in all of Python right now.


00:22:18.320 --> 00:22:19.840
The F string functionality.


00:22:19.840 --> 00:22:25.040
- Then two of the big optimizations from Cinder,


00:22:25.040 --> 00:22:28.740
that's the Python 3.8 specialization from Meta.


00:22:28.740 --> 00:22:33.740
One is, this is a presentation by Itmar Osterreicher.


00:22:33.740 --> 00:22:36.820
So this is the person who sent this in actually.


00:22:36.820 --> 00:22:40.960
This is looking at async methods.


00:22:40.960 --> 00:22:43.720
And if you can be sure it's not actually going to a wait,


00:22:43.720 --> 00:22:46.120
treat it like a regular method.


00:22:46.120 --> 00:22:47.820
So you know, like if you have an async method,


00:22:47.820 --> 00:22:49.920
you might say, do this, do this, do this.


00:22:49.920 --> 00:22:53.120
If I already have the value in the cache return,


00:22:53.120 --> 00:22:55.560
else await database call, right?


00:22:55.560 --> 00:22:57.460
If you already have it in the cache,


00:22:57.460 --> 00:23:00.200
why do you need to create a co-routine,


00:23:00.200 --> 00:23:02.160
schedule it on the loop,


00:23:02.160 --> 00:23:03.400
wait for the loop to get to it,


00:23:03.400 --> 00:23:05.460
and then return, just call it,


00:23:05.460 --> 00:23:07.780
like just regular method, just give us the answer.


00:23:07.780 --> 00:23:09.160
That's the idea.


00:23:09.160 --> 00:23:11.580
There's some interesting ideas


00:23:11.580 --> 00:23:13.760
that it might change runtime ordering,


00:23:13.760 --> 00:23:15.440
although I don't know there was any promises


00:23:15.440 --> 00:23:17.360
of runtime ordering, but yeah.


00:23:17.360 --> 00:23:19.200
So that one's interesting.


00:23:19.200 --> 00:23:22.880
Also, the issue and PR backlog.


00:23:22.880 --> 00:23:24.240
now that we've moved to GitHub,


00:23:24.240 --> 00:23:28.220
apparently there are issues that are still 20 years old


00:23:28.220 --> 00:23:29.300
that are still open.


00:23:29.300 --> 00:23:34.340
And traditionally, the core devs and the triagers


00:23:34.340 --> 00:23:37.700
and so on have approached these things like,


00:23:37.700 --> 00:23:39.560
well, should we close this


00:23:39.560 --> 00:23:41.020
or probably we need to keep it open


00:23:41.020 --> 00:23:42.780
'cause it's important for historical reasons.


00:23:42.780 --> 00:23:44.540
And they're starting to talk about like,


00:23:44.540 --> 00:23:46.240
this is not helpful for anyone.


00:23:46.240 --> 00:23:48.080
Maybe our first question is like,


00:23:48.080 --> 00:23:49.740
why should we keep this open?


00:23:49.740 --> 00:23:52.260
And if the answer is not clear, just close it.


00:23:52.260 --> 00:23:54.580
There's a lot of talk about, well, this historical stuff


00:23:54.580 --> 00:23:55.820
and maybe someone wants to pick it up.


00:23:55.820 --> 00:23:59.160
Boy, if it were me, I got to pick and obviously I don't,


00:23:59.160 --> 00:24:00.220
so it doesn't really matter.


00:24:00.220 --> 00:24:01.740
I would just go, if it's older than two years,


00:24:01.740 --> 00:24:02.580
just close it.


00:24:02.580 --> 00:24:03.400
Like there's a script that just says,


00:24:03.400 --> 00:24:05.820
over two years, select all, close.


00:24:05.820 --> 00:24:07.420
Now let's go through and figure it out


00:24:07.420 --> 00:24:09.380
because at some point, you know,


00:24:09.380 --> 00:24:11.660
if you've got 20 years of, you should make this change.


00:24:11.660 --> 00:24:15.120
Maybe even, maybe these things aren't even relevant anymore,


00:24:15.120 --> 00:24:16.620
you know, or things have moved beyond it


00:24:16.620 --> 00:24:19.380
or it doesn't make sense in 2022.


00:24:19.380 --> 00:24:20.320
I don't know.


00:24:20.320 --> 00:24:22.640
But I'm just, mostly what I got out of that article


00:24:22.640 --> 00:24:24.140
is I'm thankful that I don't have to deal


00:24:24.140 --> 00:24:25.880
with 20 years of issues and PRs.


00:24:25.880 --> 00:24:27.800
(both laughing)


00:24:27.800 --> 00:24:30.360
- But also, they don't go away if you close them.


00:24:30.360 --> 00:24:32.920
They're still there if people really wanna see 'em.


00:24:32.920 --> 00:24:35.660
So I think they should be,


00:24:35.660 --> 00:24:37.480
maybe two years might be a little extreme,


00:24:37.480 --> 00:24:41.000
but at the very least, five or three or something like that.


00:24:41.000 --> 00:24:42.600
- There should be a number where that's true.


00:24:42.600 --> 00:24:43.960
That number should be less than 30.


00:24:43.960 --> 00:24:47.020
- And it's a smaller number than 20, right?


00:24:47.020 --> 00:24:49.880
- Yeah, all right.


00:24:49.880 --> 00:24:51.280
This is a long section, last thing,


00:24:51.280 --> 00:24:53.040
I'll close it out with this.


00:24:53.040 --> 00:24:56.600
Immortal objects, the path forward for immortal objects.


00:24:56.600 --> 00:24:58.540
So let me ask you guys this,


00:24:58.540 --> 00:25:01.500
can you change none or true or false?


00:25:01.500 --> 00:25:02.760
No, right?


00:25:02.760 --> 00:25:04.440
Does, do you think it's ever gonna go away?


00:25:04.440 --> 00:25:06.480
Like, are we done using true


00:25:06.480 --> 00:25:08.520
and then it's just gonna get garbage collected


00:25:08.520 --> 00:25:10.120
or reference counted out of memory?


00:25:10.120 --> 00:25:11.420
Nope, but you know what?


00:25:11.420 --> 00:25:14.020
Every time you interact with true and false,


00:25:14.020 --> 00:25:16.000
it's still incrementing its ref count.


00:25:16.000 --> 00:25:17.320
(laughing)


00:25:17.320 --> 00:25:18.160
- Interesting.


00:25:18.160 --> 00:25:20.560
And none and stuff because it's an object, right?


00:25:20.560 --> 00:25:21.060
Oh, yeah.


00:25:21.060 --> 00:25:27.120
And so this discussion is like, isn't there some that just shouldn't be participating in


00:25:27.120 --> 00:25:34.000
reference counting because they're just fundamental to, you know, like the idea of a class, like the


00:25:34.000 --> 00:25:39.920
structure of a thing that defines what a class is, true, false, the numbers, like the low numbers,


00:25:39.920 --> 00:25:44.960
like there should be some that are not consuming that memory because they don't need to keep track


00:25:44.960 --> 00:25:47.960
of that section and so on.


00:25:47.960 --> 00:25:48.960
Right.


00:25:48.960 --> 00:25:50.760
So anyway, this was the proposal.


00:25:50.760 --> 00:25:57.120
Again, it's complicated is the story, but yeah, I do something a little bit like this


00:25:57.120 --> 00:25:59.720
on talk Python, the training site.


00:25:59.720 --> 00:26:06.040
So I've done a lot to tweak the garbage collection around there and really change the defaults


00:26:06.040 --> 00:26:09.500
of like, what are the triggers for garbage collection?


00:26:09.500 --> 00:26:14.160
So if I've got this many allocations and so on, and one of the things you can do is you


00:26:14.160 --> 00:26:18.280
can tell it from here on like what is existed up until now.


00:26:18.280 --> 00:26:22.240
Freeze that and don't don't look at it when you have to look for cycles.


00:26:22.240 --> 00:26:22.920
Right?


00:26:22.920 --> 00:26:28.000
So I just, in my app startup, when it's a, it's kind of imported the things and it's


00:26:28.000 --> 00:26:31.160
about to start, it just says, okay, everything that you've done to come to


00:26:31.160 --> 00:26:33.200
life, just don't, don't trick that anymore.


00:26:33.200 --> 00:26:35.760
Anything else I make from here on out, please clean that up.


00:26:35.760 --> 00:26:39.560
And it, it seems it's kind of a super cheap, cheapo version, but you


00:26:39.560 --> 00:26:40.720
still get reference counting, right?


00:26:40.720 --> 00:26:41.800
Yeah.


00:26:41.800 --> 00:26:43.080
That's definitely an optimization.


00:26:43.080 --> 00:26:46.800
- I think it's worth it for some of these immortal objects.


00:26:46.800 --> 00:26:47.640
Why not?


00:26:47.640 --> 00:26:49.320
- Yeah, I mean, we shouldn't be reference counting on none.


00:26:49.320 --> 00:26:50.160
That's kind of weird.


00:26:50.160 --> 00:26:54.040
- Unless it slows things down by having like some--


00:26:54.040 --> 00:26:55.840
- It does, that's the thing that's crazy.


00:26:55.840 --> 00:26:57.720
So over here, they're like, all right, here's the deal.


00:26:57.720 --> 00:27:01.360
We shouldn't have to worry about this.


00:27:01.360 --> 00:27:03.600
And so, where was it?


00:27:03.600 --> 00:27:07.120
- Except it adds an if statement to everything, right?


00:27:07.120 --> 00:27:11.520
- Yeah, it says the naive implementation of this


00:27:11.520 --> 00:27:13.760
makes it 6% slower, not faster.


00:27:13.760 --> 00:27:14.600
Like, oh no.


00:27:14.600 --> 00:27:17.420
- It makes sense, yeah.


00:27:17.420 --> 00:27:19.860
- And we think we can make it only 2% slower.


00:27:19.860 --> 00:27:24.080
- It's gonna be slower though, yeah.


00:27:24.080 --> 00:27:26.040
- Well, the thing is, normally you would


00:27:26.040 --> 00:27:27.200
just reference count it.


00:27:27.200 --> 00:27:29.500
You just go none plus equals one, right?


00:27:29.500 --> 00:27:31.920
Or plus plus, minus minus.


00:27:31.920 --> 00:27:33.440
But here you're like, you have to have a test.


00:27:33.440 --> 00:27:36.440
Like, if it's an immortal object, do this, else do that.


00:27:36.440 --> 00:27:38.720
And it's just like that bit in the hot loop


00:27:38.720 --> 00:27:41.520
of the runtime is just apparently overhead, you know?


00:27:41.520 --> 00:27:42.480
- Yeah, for everything.


00:27:42.480 --> 00:27:44.320
So everything you reference has to check


00:27:44.320 --> 00:27:47.200
to see whether or not it's an immortal object


00:27:47.200 --> 00:27:49.720
before it does the reference counting, so.


00:27:49.720 --> 00:27:53.880
- Yeah, maybe it has a no-op method on it, I don't know.


00:27:53.880 --> 00:27:56.320
I think it probably works straight on the field though.


00:27:56.320 --> 00:27:59.880
All right, much like Highlander, Alvaro says,


00:27:59.880 --> 00:28:01.800
there can only be one run.


00:28:01.800 --> 00:28:03.880
(laughing)


00:28:03.880 --> 00:28:05.820
All right, well. - That's a trade-off.


00:28:05.820 --> 00:28:08.280
- Yeah, yeah, this is definitely an interesting trade-off.


00:28:08.280 --> 00:28:10.340
All right, well, I think that's more than enough


00:28:10.340 --> 00:28:12.600
for the language writer, but it was really cool


00:28:12.600 --> 00:28:15.080
that Alex wrote that up and then Marc sent it in


00:28:15.080 --> 00:28:17.320
'cause that's a good insight to what's next.


00:28:17.320 --> 00:28:22.880
- Cool, so it's my turn, right, given that it's showing?


00:28:22.880 --> 00:28:25.200
- Oh, sorry, yes, go, Daniel.


00:28:25.200 --> 00:28:28.200
- Cool, so people in the software community


00:28:28.200 --> 00:28:31.280
are blessed with many options for doing source control.


00:28:31.280 --> 00:28:33.680
You know, you've got git-svn, mercurial,


00:28:33.680 --> 00:28:37.000
and other historical ones that maybe aren't as well used,


00:28:37.000 --> 00:28:39.820
But optical engineers, mechanical engineers,


00:28:39.820 --> 00:28:41.600
electrical engineers, everybody else doesn't have it


00:28:41.600 --> 00:28:44.320
nearly as good as the software community.


00:28:44.320 --> 00:28:46.520
So anytime I see an option for that,


00:28:46.520 --> 00:28:48.040
it definitely sticks out in my mind.


00:28:48.040 --> 00:28:49.640
So I don't remember how I found this,


00:28:49.640 --> 00:28:53.000
but it came upon AllSpice fairly recently,


00:28:53.000 --> 00:28:56.200
which is Git for people who are doing circuits.


00:28:56.200 --> 00:28:57.040
- This is cool.


00:28:57.040 --> 00:29:00.080
- And so it has, it looks exactly like GitHub.


00:29:00.080 --> 00:29:01.200
You've got version control,


00:29:01.200 --> 00:29:03.520
you've got all the things you expect to have.


00:29:03.520 --> 00:29:06.080
It's compatible with some of the common


00:29:06.080 --> 00:29:08.080
electrical design programs.


00:29:08.080 --> 00:29:10.120
But it really just gives you the ability


00:29:10.120 --> 00:29:12.500
to do all these sorts of things that you take for granted


00:29:12.500 --> 00:29:15.200
if you're in a sophisticated workflow like software,


00:29:15.200 --> 00:29:18.520
but that you wish dearly you had for any other discipline.


00:29:18.520 --> 00:29:21.040
- So when you put something in a source control


00:29:21.040 --> 00:29:22.700
and you diff it, what do you get?


00:29:22.700 --> 00:29:26.640
Are you diffing graphics?


00:29:26.640 --> 00:29:29.040
Are you diffing some sort of definition file


00:29:29.040 --> 00:29:31.120
that defines the circuit?


00:29:31.120 --> 00:29:34.520
- One of the first thing they have is the diff tool,


00:29:34.520 --> 00:29:35.560
'cause they know that that's kind of


00:29:35.560 --> 00:29:36.400
one of the big questions, right?


00:29:36.400 --> 00:29:38.160
Is how do you compare the schematics?


00:29:38.160 --> 00:29:41.200
So they have a way to do it visually


00:29:41.200 --> 00:29:42.460
and you can look at all the changes


00:29:42.460 --> 00:29:44.880
and it looks like they're highlighting each commit


00:29:44.880 --> 00:29:46.960
to whatever change was made on the schematic.


00:29:46.960 --> 00:29:48.720
- Oh, that's cool.


00:29:48.720 --> 00:29:49.560
- Yeah.


00:29:49.560 --> 00:29:51.360
- Oh, that is very cool, yeah.


00:29:51.360 --> 00:29:53.040
- Yeah, so one potential question would be,


00:29:53.040 --> 00:29:56.120
well, great, it's nice that you can do that on the internet,


00:29:56.120 --> 00:29:57.920
but I work at a commercial company


00:29:57.920 --> 00:29:59.600
that doesn't want to do that.


00:29:59.600 --> 00:30:04.080
But they do have both, what they have a,


00:30:04.080 --> 00:30:07.960
They have self-hosting and they have a government cloud version if you're subject to things


00:30:07.960 --> 00:30:09.760
like ITAR or EAR.


00:30:09.760 --> 00:30:14.440
So you can, in the same sense that Git has an enterprise option, Allspice also has an


00:30:14.440 --> 00:30:15.440
enterprise option.


00:30:15.440 --> 00:30:17.280
Like an on-prem, self-hosted version.


00:30:17.280 --> 00:30:18.280
Yeah.


00:30:18.280 --> 00:30:20.560
So you don't have to give away your secrets.


00:30:20.560 --> 00:30:21.560
Yes.


00:30:21.560 --> 00:30:26.520
I have no personal experience with it, but it's very promising and exciting to see somebody


00:30:26.520 --> 00:30:31.680
trying to come up with better ways to do engineering work besides just software.


00:30:31.680 --> 00:30:34.880
You can even configure it to integrate with Tortoise Git,


00:30:34.880 --> 00:30:38.060
like the Windows Explorer right-click type of Git.


00:30:38.060 --> 00:30:39.540
- Yeah.


00:30:39.540 --> 00:30:40.580
So exciting stuff.


00:30:40.580 --> 00:30:42.620
Hopefully somebody helps out the Mechies


00:30:42.620 --> 00:30:44.940
and the optical engineers as well one day.


00:30:44.940 --> 00:30:48.620
- Yeah, I mean, there's always large file support,


00:30:48.620 --> 00:30:51.260
but the diff is terrible, right?


00:30:51.260 --> 00:30:53.620
So usually.


00:30:53.620 --> 00:30:55.220
- Yeah, you're looking at binary files


00:30:55.220 --> 00:30:57.620
or stuff that's, yeah.


00:30:57.620 --> 00:30:59.340
Humans are so good at processing images


00:30:59.340 --> 00:31:00.660
that if you have a visual comparison


00:31:00.660 --> 00:31:06.400
that's orders of magnitude better than trying to look at lines of your even if it is a plain


00:31:06.400 --> 00:31:08.360
text file that you can read through.


00:31:08.360 --> 00:31:09.840
Yeah, definitely.


00:31:09.840 --> 00:31:15.520
Yeah, here's your XML with its namespaces.


00:31:15.520 --> 00:31:16.520
Good luck.


00:31:16.520 --> 00:31:17.520
What?


00:31:17.520 --> 00:31:18.520
What does this mean?


00:31:18.520 --> 00:31:19.520
Yeah.


00:31:19.520 --> 00:31:20.520
Well, cool.


00:31:20.520 --> 00:31:21.520
I like it.


00:31:21.520 --> 00:31:22.520
All right.


00:31:22.520 --> 00:31:23.520
I do too.


00:31:23.520 --> 00:31:25.280
Brian, you got any extras for us?


00:31:25.280 --> 00:31:26.660
I yeah, actually.


00:31:26.660 --> 00:31:27.660
So I've been busy.


00:31:27.660 --> 00:31:31.060
I've got like this backstream of testing code episodes.


00:31:31.060 --> 00:31:34.140
So the most recent one is that I put out


00:31:34.140 --> 00:31:36.420
was with Wilma Coogan.


00:31:36.420 --> 00:31:39.060
We're talking about rich and textual and textualized.


00:31:39.060 --> 00:31:41.340
It's really fun, really fun one.


00:31:41.340 --> 00:31:43.580
But actually, so since we talked last Tuesday,


00:31:43.580 --> 00:31:45.820
I've got four extra episodes that have come out.


00:31:45.820 --> 00:31:49.300
So we've got teaching, including testing


00:31:49.300 --> 00:31:51.360
with the web front end stuff,


00:31:51.360 --> 00:31:54.620
which was kind of an interesting story


00:31:54.620 --> 00:31:57.220
about like basically if you're college level students,


00:31:57.220 --> 00:31:59.660
but they're new to coding.


00:31:59.660 --> 00:32:01.420
When do you include testing?


00:32:01.420 --> 00:32:05.560
And Carl says right away, why not?


00:32:05.560 --> 00:32:09.640
So also a developer and productivity episode.


00:32:09.640 --> 00:32:11.900
I think that's, oh yeah.


00:32:11.900 --> 00:32:15.180
And a Python Django rich and testing article,


00:32:15.180 --> 00:32:16.860
so or episode.


00:32:16.860 --> 00:32:19.420
So lots of goodness over on testing code.


00:32:19.420 --> 00:32:23.540
- They have a Django rich package apparently.


00:32:23.540 --> 00:32:26.900
- Yeah, that was just for other,


00:32:26.900 --> 00:32:30.000
like the CLI, the Django CLI stuff,


00:32:30.000 --> 00:32:32.260
including Rich with that, which is great,


00:32:32.260 --> 00:32:36.760
but they've incorporated that into the test runner


00:32:36.760 --> 00:32:41.420
so that the Django test runner can do rich tracebacks,


00:32:41.420 --> 00:32:43.120
which is pretty cool. - Perfect.


00:32:43.120 --> 00:32:44.300
- So.


00:32:44.300 --> 00:32:45.260
- Daniel, you got anything else


00:32:45.260 --> 00:32:46.860
you wanna give a quick shout out?


00:32:46.860 --> 00:32:47.980
Sorry. - Sure.


00:32:47.980 --> 00:32:50.740
So Adafruit's a well-known company


00:32:50.740 --> 00:32:54.740
for doing maker electronics and,


00:32:54.740 --> 00:32:56.660
oh yeah, I don't have the links up, sorry.


00:32:56.660 --> 00:32:58.500
But you know, Adafruit's well known


00:32:58.500 --> 00:32:59.860
and they do a good job of focusing


00:32:59.860 --> 00:33:02.100
at the first five minute experience


00:33:02.100 --> 00:33:04.540
of getting you up to speed with something on electronics.


00:33:04.540 --> 00:33:05.540
But there are other companies


00:33:05.540 --> 00:33:06.380
that do the same thing as well.


00:33:06.380 --> 00:33:09.820
So I was gonna shout out SparkFun, Seed Studio,


00:33:09.820 --> 00:33:11.700
and then other companies like OpenMV


00:33:11.700 --> 00:33:13.900
who has a focus on machine vision.


00:33:13.900 --> 00:33:16.540
And they're less geared more for the people


00:33:16.540 --> 00:33:17.860
at the entry level, so maybe if you're


00:33:17.860 --> 00:33:19.660
a little more comfortable with certain things


00:33:19.660 --> 00:33:21.620
or a little more comfortable, you know,


00:33:21.620 --> 00:33:22.820
exploring those based on your own


00:33:22.820 --> 00:33:23.660
they can be good options. - Trying to build


00:33:23.660 --> 00:33:24.480
weird things, right?


00:33:24.480 --> 00:33:25.780
More specialized maybe for people


00:33:25.780 --> 00:33:27.540
or trying to actually go to.


00:33:27.540 --> 00:33:28.880
- Or if you go to, yeah, if you go to Adafruit


00:33:28.880 --> 00:33:29.960
and what you want is out of stock,


00:33:29.960 --> 00:33:31.540
you can check some other places too.


00:33:31.540 --> 00:33:33.880
- Which unfortunately happens a lot these days.


00:33:33.880 --> 00:33:37.440
It's, those things come and go, a lot of demand.


00:33:37.440 --> 00:33:39.520
Awesome, all right, I do have some.


00:33:39.520 --> 00:33:40.880
- Cool. - Yeah, that's right.


00:33:40.880 --> 00:33:44.280
I do have some extra ones, but I kind of got a lot, so.


00:33:44.280 --> 00:33:45.680
All right, let's see.


00:33:45.680 --> 00:33:46.520
I'll go last.


00:33:46.520 --> 00:33:47.340
All right, the first one is,


00:33:47.340 --> 00:33:49.720
I always love a good documentary on tech stuff,


00:33:49.720 --> 00:33:51.680
and sometimes these are super cheesy,


00:33:51.680 --> 00:33:53.920
but there's a documentary called "Power On,


00:33:53.920 --> 00:33:57.440
the story of Xbox, which is a four hour video,


00:33:57.440 --> 00:33:58.520
which you can watch on YouTube,


00:33:58.520 --> 00:34:00.640
which I'll link directly to the YouTube video.


00:34:00.640 --> 00:34:01.480
And it's really good.


00:34:01.480 --> 00:34:03.400
It's really interesting.


00:34:03.400 --> 00:34:04.920
Whether you love or hate the Xbox,


00:34:04.920 --> 00:34:07.440
honestly don't care that much one way or the other,


00:34:07.440 --> 00:34:09.300
but it's just an interesting sort of view


00:34:09.300 --> 00:34:12.120
of like the last 20 years of technology


00:34:12.120 --> 00:34:13.560
from the sort of the gaming side.


00:34:13.560 --> 00:34:15.800
So if people are looking for something to watch


00:34:15.800 --> 00:34:17.240
and they want to spend four hours doing it


00:34:17.240 --> 00:34:20.320
or spread it out, you know, they can check this out.


00:34:20.320 --> 00:34:23.860
All right, speaking of videos, not that one.


00:34:23.860 --> 00:34:27.580
This one I took, so recently I released my Git course


00:34:27.580 --> 00:34:30.660
on sort of a pragmatic introduction to Git,


00:34:30.660 --> 00:34:33.580
and I decided I wanted to share one part of it


00:34:33.580 --> 00:34:35.600
with a broader world, so I released a video


00:34:35.600 --> 00:34:37.820
called the Four Reasons to Branch with Git,


00:34:37.820 --> 00:34:39.980
and I put that on YouTube, people can check that out,


00:34:39.980 --> 00:34:43.100
so it's like an hour-long video I posted this week.


00:34:43.100 --> 00:34:46.940
And then this one comes to us from Jason Percor,


00:34:46.940 --> 00:34:49.500
saying how cool is it to see Python showing up


00:34:49.500 --> 00:34:51.580
like right on the front page of various places?


00:34:51.580 --> 00:34:53.380
So there's this place called EasyPost,


00:34:53.380 --> 00:34:57.440
Easypost.com which lets you do labels


00:34:57.440 --> 00:34:58.740
and track your labels and stuff.


00:34:58.740 --> 00:35:00.740
But if you just scroll down just a little bit,


00:35:00.740 --> 00:35:03.360
it says, you know what, why don't you just


00:35:03.360 --> 00:35:05.540
either buy labels or you can just use


00:35:05.540 --> 00:35:07.020
this Python API right here.


00:35:07.020 --> 00:35:09.480
And it doesn't even sort of,


00:35:09.480 --> 00:35:12.260
if your developers click to reveal the secret,


00:35:12.260 --> 00:35:13.100
you know, it's just like,


00:35:13.100 --> 00:35:16.900
no, here's your Python code for our company.


00:35:16.900 --> 00:35:21.040
So just kind of a cool little thing for that.


00:35:21.040 --> 00:35:24.420
Let's see, Brian Skin pointed out


00:35:24.420 --> 00:35:28.520
that the Stack Overflow 2022 Developer Survey


00:35:28.520 --> 00:35:33.080
is open for accepting comments, which is cool.


00:35:33.080 --> 00:35:35.320
And I'm gonna put this up here on the screen first.


00:35:35.320 --> 00:35:36.520
So Brian, do you see this?


00:35:36.520 --> 00:35:37.880
It has all of this stuff I can't,


00:35:37.880 --> 00:35:39.120
if I click it, it'll just go away.


00:35:39.120 --> 00:35:40.800
And like, this is an image, right, right here?


00:35:40.800 --> 00:35:41.720
- Yeah. - Yeah.


00:35:41.720 --> 00:35:44.040
What if I wanted that as text?


00:35:44.040 --> 00:35:47.080
What if I wanted to somehow grab that?


00:35:47.080 --> 00:35:48.140
So I've got this app,


00:35:48.140 --> 00:35:50.260
which I'm gonna tell you all about next.


00:35:50.260 --> 00:35:52.800
Um, called text sniper.


00:35:52.800 --> 00:35:53.140
Watch this.


00:35:53.140 --> 00:35:57.640
So you can't quite see if I just drag over that, just like you would a screenshot.


00:35:57.640 --> 00:35:59.480
And then let's see.


00:35:59.480 --> 00:36:03.200
Um, I need somewhere I can paste this anywhere there.


00:36:03.200 --> 00:36:05.580
So what I got out of that is check this out.


00:36:05.580 --> 00:36:06.880
Oh, wow.


00:36:06.880 --> 00:36:07.380
Isn't that cool.


00:36:07.380 --> 00:36:07.740
Yeah.


00:36:07.740 --> 00:36:15.800
I just control seed from like the picture on my, on my screen and it can do PDFs.


00:36:15.800 --> 00:36:17.560
It can do screenshots.


00:36:17.560 --> 00:36:21.760
Like, so for example, if you're watching a video presentation, you see a slide,


00:36:21.760 --> 00:36:24.940
you're like, I want to capture those bullet points or that shoot, grab it.


00:36:24.940 --> 00:36:25.340
You got it.


00:36:25.340 --> 00:36:29.900
So that is called text sniper, which is super neat.


00:36:29.900 --> 00:36:30.460
All it does.


00:36:30.460 --> 00:36:34.180
It's just like the select region for screenshot.


00:36:34.180 --> 00:36:34.860
That's great.


00:36:34.860 --> 00:36:37.380
And then boom, what it doesn't matter what's under it.


00:36:37.380 --> 00:36:38.980
It's just, if it's texted OCR is it?


00:36:38.980 --> 00:36:39.580
And then you got it.


00:36:39.580 --> 00:36:40.220
Yeah.


00:36:40.220 --> 00:36:45.220
So often like a small restaurant will put their address or their phone number, like


00:36:47.200 --> 00:36:48.840
in an image like come on,


00:36:48.840 --> 00:36:51.160
I gotta click on that sucker.


00:36:51.160 --> 00:36:52.640
>> I want to just drop this,


00:36:52.640 --> 00:36:53.840
paste it into maps.


00:36:53.840 --> 00:36:54.160
>> Yeah.


00:36:54.160 --> 00:36:57.120
>> That's right. I think for doing research,


00:36:57.120 --> 00:36:58.400
if you're watching videos,


00:36:58.400 --> 00:37:00.240
you want to get something out of something that's on


00:37:00.240 --> 00:37:01.800
the screen like a slide or whatever.


00:37:01.800 --> 00:37:03.560
This is pretty awesome.


00:37:03.560 --> 00:37:06.480
It cost something like $11 once.


00:37:06.480 --> 00:37:08.640
If it's useful to you, it'll be worth it.


00:37:08.640 --> 00:37:09.960
If not, then it's not.


00:37:09.960 --> 00:37:10.480
>> Then not.


00:37:10.480 --> 00:37:13.400
>> It's got to be worth $11 or zero to you.


00:37:13.400 --> 00:37:15.760
>> That was like a good OCR app.


00:37:15.760 --> 00:37:16.840
- Yeah, yeah. - It's always novel.


00:37:16.840 --> 00:37:19.000
- And it's just the ease of use, right?


00:37:19.000 --> 00:37:21.000
Not take a screenshot and go find your app.


00:37:21.000 --> 00:37:22.900
It's just like, slap, slap, drop.


00:37:22.900 --> 00:37:29.320
Okay, so last one of my extras, Sam Low and Philip Guo


00:37:29.320 --> 00:37:34.560
sent over, Sam Low, sorry, and then sent over that,


00:37:34.560 --> 00:37:36.880
I had them on to talk about Pandas Tutor,


00:37:36.880 --> 00:37:38.320
and they were talking about the challenges


00:37:38.320 --> 00:37:41.280
of running Pandas Tutor on the server side


00:37:41.280 --> 00:37:44.280
and letting people run code, but it's pretty limited


00:37:44.280 --> 00:37:46.720
because you don't want them to hack the various things.


00:37:46.720 --> 00:37:47.800
You don't want to keep it pretty limited


00:37:47.800 --> 00:37:51.040
so they don't take advantage of like your compute resources.


00:37:51.040 --> 00:37:54.240
So now they just posted a message saying,


00:37:54.240 --> 00:37:55.480
Pandas Tutor, if you go over here and say,


00:37:55.480 --> 00:37:57.120
visualize your code,


00:37:57.120 --> 00:38:00.060
it'll go and do all these cool visualizations.


00:38:00.060 --> 00:38:01.920
I know we've spoken about this before,


00:38:01.920 --> 00:38:03.920
but notice what it says here.


00:38:03.920 --> 00:38:04.760
I can scroll a little.


00:38:04.760 --> 00:38:09.640
It says, initializing PyIoDyed on WASM download.


00:38:09.640 --> 00:38:11.760
Pandas running, boom.


00:38:11.760 --> 00:38:15.540
And so all of this is running in client side Python,


00:38:15.540 --> 00:38:16.380
which is just--


00:38:16.380 --> 00:38:17.940
- Wow. - Yeah.


00:38:17.940 --> 00:38:19.840
So we talked about that being one of the topics


00:38:19.840 --> 00:38:22.500
of the Language Summit, the WASM support.


00:38:22.500 --> 00:38:24.400
And here you have it in action.


00:38:24.400 --> 00:38:25.380
So I said on the show, like,


00:38:25.380 --> 00:38:26.440
hey, have you guys considered this?


00:38:26.440 --> 00:38:27.780
Like, ah, maybe we should.


00:38:27.780 --> 00:38:30.080
And then like, this turns out to be a great idea.


00:38:30.080 --> 00:38:31.960
(both laughing)


00:38:31.960 --> 00:38:33.120
- That's pretty cool. - Like the message is,


00:38:33.120 --> 00:38:34.280
run code on the server.


00:38:34.280 --> 00:38:35.340
That's slower.


00:38:35.340 --> 00:38:37.300
We just recommend you run it here.


00:38:37.300 --> 00:38:38.760
- Hmm, nice.


00:38:38.760 --> 00:38:40.000
- All right, that's pretty neat.


00:38:40.000 --> 00:38:41.140
Well done, you guys.


00:38:41.140 --> 00:38:44.000
And that's it for my extras as well.


00:38:44.000 --> 00:38:45.280
- That's a lot more real than I thought.


00:38:45.280 --> 00:38:47.040
I guess I thought PyR and Dyed and WebAssembly


00:38:47.040 --> 00:38:47.880
were a little bit further off,


00:38:47.880 --> 00:38:50.120
but that's like, hey, there's an application right now


00:38:50.120 --> 00:38:51.320
doing that today.


00:38:51.320 --> 00:38:52.360
- Yeah, yeah.


00:38:52.360 --> 00:38:56.400
Brian, the anti-gravity HighScript thing you showed


00:38:56.400 --> 00:38:57.960
last week was so cool.


00:38:57.960 --> 00:39:00.600
- Yeah, I didn't even know it was doing that


00:39:00.600 --> 00:39:02.360
before we showed it, but it's pretty neat.


00:39:02.360 --> 00:39:03.800
- Yeah, yeah.


00:39:03.800 --> 00:39:05.560
A lot of the interactions are super,


00:39:05.560 --> 00:39:07.280
they're getting, starting to be real, yeah,


00:39:07.280 --> 00:39:09.320
we're getting there, Daniel, we're getting there.


00:39:09.320 --> 00:39:10.240
(Daniel laughs)


00:39:10.240 --> 00:39:12.800
All right, how about a joke to wrap it up?


00:39:12.800 --> 00:39:13.640
- Definitely.


00:39:13.640 --> 00:39:18.240
- So we've all been in, well, maybe we haven't all been,


00:39:18.240 --> 00:39:20.600
we can all imagine being in awkward situations,


00:39:20.600 --> 00:39:24.000
maybe on a weird date, so I don't go on dates,


00:39:24.000 --> 00:39:25.480
really being married for a long time,


00:39:25.480 --> 00:39:28.660
but imagine, imagine that you had,


00:39:28.660 --> 00:39:33.480
here's a graphic of a woman who's on a date,


00:39:33.480 --> 00:39:35.840
like maybe just woke up in the morning


00:39:35.840 --> 00:39:39.580
after the first day, first time together sort of thing,


00:39:39.580 --> 00:39:41.940
And the guy who's like sculpted, right?


00:39:41.940 --> 00:39:44.540
He's like clearly like a super fake,


00:39:44.540 --> 00:39:46.500
probably a good looking guy, whatever.


00:39:46.500 --> 00:39:48.780
But he's in the shower and she's like flipping


00:39:48.780 --> 00:39:49.860
through his phone and says,


00:39:49.860 --> 00:39:51.400
when she looks through your phone,


00:39:51.400 --> 00:39:54.300
but all she can find is fork a child and kill it.


00:39:54.300 --> 00:39:55.700
Google search.


00:39:55.700 --> 00:39:57.740
Kill child and fork parent.


00:39:57.740 --> 00:39:59.460
Kill parent with fork.


00:39:59.460 --> 00:40:01.180
Kill parent without killing child.


00:40:01.180 --> 00:40:03.900
(laughing)


00:40:03.900 --> 00:40:04.740
- Kill child without killing grandchild.


00:40:04.740 --> 00:40:08.420
- And she got this face of like, oh, what's that, sorry?


00:40:08.420 --> 00:40:09.420
Those are great.


00:40:09.420 --> 00:40:13.700
Yeah, she's got this look like I thought it was going so well and he's a murderer.


00:40:13.700 --> 00:40:14.700
I can't believe it.


00:40:14.700 --> 00:40:17.900
No, he's just trying to figure out Linux.


00:40:17.900 --> 00:40:22.420
Don't don't hold it against kill child without killing grandchild.


00:40:22.420 --> 00:40:26.540
It's so bad.


00:40:26.540 --> 00:40:27.540
Can you do that?


00:40:27.540 --> 00:40:30.220
Well, I don't know.


00:40:30.220 --> 00:40:34.380
I haven't searched it, but I don't want to have to explain that search if I did search


00:40:34.380 --> 00:40:35.380
it in stealth.


00:40:35.380 --> 00:40:38.220
- That's what incognito mode is for.


00:40:38.220 --> 00:40:40.360
(laughing)


00:40:40.360 --> 00:40:41.520
- This is totally benign,


00:40:41.520 --> 00:40:43.280
but if somebody sees it out of context,


00:40:43.280 --> 00:40:45.480
maybe they won't feel that way about it.


00:40:45.480 --> 00:40:48.240
- It's like, there's what will get you on the FBI list,


00:40:48.240 --> 00:40:50.200
and then software engineers.


00:40:50.200 --> 00:40:53.120
- Yeah, there's like a Venn diagram of that.


00:40:53.120 --> 00:40:55.400
- Yeah, there's probably a small intersection there.


00:40:55.400 --> 00:40:58.540
- It's probably pretty big, actually.


00:40:58.540 --> 00:41:00.680
- Yeah, it's probably pretty big.


00:41:00.680 --> 00:41:04.280
- Anyway, well, thanks everybody for a fun show again.


00:41:04.280 --> 00:41:05.720
So yeah.


00:41:05.720 --> 00:41:06.560
- You bet.


00:41:06.560 --> 00:41:07.380
Thanks, Brian and Daniel.


00:41:07.380 --> 00:41:08.360
It was great to have you here.


00:41:08.360 --> 00:41:09.320
- Yeah, thanks.


00:41:09.320 --> 00:41:10.360
- Thanks for coming.


00:41:10.360 --> 00:41:11.200
Bye.

