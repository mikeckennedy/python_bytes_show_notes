
00:00:00.000 --> 00:00:06.880
Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds. This is episode 269


00:00:06.880 --> 00:00:11.280
recorded February 2nd 2022 and I'm Brian Okken


00:00:11.280 --> 00:00:14.240
And I'm Luciana


00:00:14.240 --> 00:00:15.280
and


00:00:15.280 --> 00:00:21.440
I'm Brett Cannon and we have Brett. We so we invited Luciana on and we decided to have Brett on also so


00:00:21.440 --> 00:00:24.880
uh, we got have some fun Michael's actually,


00:00:26.480 --> 00:00:33.200
gone this week, but hope he enjoys listening. So hi, Michael. And, and we'll talk to him next week.


00:00:33.200 --> 00:00:39.760
So before we get into the topics, though, I think people hopefully know who Brett is.


00:00:39.760 --> 00:00:42.240
Brett Cannon, you've been on the show before.


00:00:42.240 --> 00:00:44.240
A couple times.


00:00:44.240 --> 00:00:44.720
Yeah.


00:00:44.720 --> 00:00:44.960
And then...


00:00:44.960 --> 00:00:47.120
Thank you very much for having me back spontaneously.


00:00:47.120 --> 00:00:53.840
Spontaneously. Like minutes ago, we said, Hey, we should get Brett on. So Luciana,


00:00:53.840 --> 00:00:56.720
Welcome to the show. Can you tell people a little bit about who you are?


00:00:56.720 --> 00:01:04.480
Thank you. Yes, I am. Well, let's see. I work with Brad on a Python extension for Visual Studio Code,


00:01:04.480 --> 00:01:09.760
but I'm a program manager. And yeah, I'm very excited to be here in the show. I was


00:01:09.760 --> 00:01:16.240
telling Brian that I used to listen to Python Bytes going to work back when we worked on offices.


00:01:20.160 --> 00:01:22.240
So it's really, really cool to be here.


00:01:22.240 --> 00:01:24.280
- Yeah, nice.


00:01:24.280 --> 00:01:26.400
Well, thanks.


00:01:26.400 --> 00:01:27.840
I'm glad to have you here.


00:01:27.840 --> 00:01:29.640
So let's jump into the topics.


00:01:29.640 --> 00:01:32.360
We have an abbreviated list of topics,


00:01:32.360 --> 00:01:35.120
but we'll make it fun anyway.


00:01:35.120 --> 00:01:38.960
I'm gonna start us off with Rich CLI.


00:01:38.960 --> 00:01:41.680
So Will McGugan,


00:01:41.680 --> 00:01:46.680
it seems like we talk about him every show,


00:01:46.680 --> 00:01:48.240
but this is cool.


00:01:48.240 --> 00:01:50.840
So I was like, Oh, I'll try it out first.


00:01:50.840 --> 00:01:52.000
And I'm already hooked.


00:01:52.000 --> 00:01:54.820
So RichCLI is,


00:01:54.820 --> 00:01:57.900
I don't know, it seems lame if I describe it.


00:01:57.900 --> 00:01:59.040
So you install it.


00:01:59.040 --> 00:02:01.280
I installed it with PipX


00:02:01.280 --> 00:02:03.720
because I just want to use it everywhere.


00:02:03.720 --> 00:02:06.680
And then what it does is it does like pretty printing


00:02:06.680 --> 00:02:09.460
of stuff, like you can give it a file


00:02:09.460 --> 00:02:12.120
and basically that's what I use it for.


00:02:12.120 --> 00:02:13.920
Maybe it does other stuff, but you can give it a file


00:02:13.920 --> 00:02:18.620
like example.py or example.markdown or something.


00:02:18.620 --> 00:02:21.580
And it will do the rich printing,


00:02:21.580 --> 00:02:25.400
pretty printing right on your screen in the terminal.


00:02:25.400 --> 00:02:28.380
That seems like not that big of a deal, right?


00:02:28.380 --> 00:02:31.160
But it is so cool 'cause it's all like nice colors


00:02:31.160 --> 00:02:32.620
and you can have themes.


00:02:32.620 --> 00:02:34.920
And I used, what?


00:02:34.920 --> 00:02:37.200
You can do pretty printing of JSON.


00:02:37.200 --> 00:02:39.040
So it'll format your JSON for you


00:02:39.040 --> 00:02:40.720
without having to reformat it.


00:02:41.560 --> 00:02:44.180
You can do a dash M flag for Markdown.


00:02:44.180 --> 00:02:46.180
I've been doing that to see my Markdown


00:02:46.180 --> 00:02:49.900
and it does some cool stuff with Markdown.


00:02:49.900 --> 00:02:52.860
Although supposedly we're like with Python files


00:02:52.860 --> 00:02:54.620
and C++ files and stuff,


00:02:54.620 --> 00:02:57.860
it's gonna do syntax highlighting based on extension.


00:02:57.860 --> 00:03:01.340
I'm wondering why I gotta pass in a dash M for Markdown.


00:03:01.340 --> 00:03:05.620
It seems like it's dash MD should work fine, but anyway.


00:03:05.620 --> 00:03:07.140
- Could be my immediate question was


00:03:07.140 --> 00:03:09.900
why do you have to specify the dash M just for Markdown?


00:03:11.140 --> 00:03:14.700
And then like, and then there's some flags that's cool.


00:03:14.700 --> 00:03:16.800
Like, like whether, whether or not you want to use it


00:03:16.800 --> 00:03:18.100
with pipes so you can,


00:03:18.100 --> 00:03:23.320
for if it doesn't, if it's piped to something,


00:03:23.320 --> 00:03:25.240
it will, it'll strip out the formatting stuff


00:03:25.240 --> 00:03:26.920
like the color codes and whatever,


00:03:26.920 --> 00:03:28.900
but you can force that to be on.


00:03:28.900 --> 00:03:31.920
Well, I wanted to, I tried to use it with a big file


00:03:31.920 --> 00:03:34.040
and it just flew past me.


00:03:34.040 --> 00:03:37.800
And, and then, so I tried to pipe it to more or less


00:03:37.800 --> 00:03:40.680
and it, it stripped out the formatting.


00:03:40.680 --> 00:03:43.020
And so, well, I tried to fix that


00:03:43.020 --> 00:03:45.220
and then more or less don't handle that.


00:03:45.220 --> 00:03:47.400
And so, and this was just yesterday.


00:03:47.400 --> 00:03:49.180
I'm like, kind of really be cool


00:03:49.180 --> 00:03:53.040
if RichCLI has supported paging within it.


00:03:53.040 --> 00:03:55.880
And so today, Will said,


00:03:55.880 --> 00:03:58.100
"Hey, I added paging to RichCLI."


00:03:58.100 --> 00:04:00.380
So RichCLI now has paging, so.


00:04:00.380 --> 00:04:01.580
- Of course he did.


00:04:01.580 --> 00:04:03.760
(laughing)


00:04:03.760 --> 00:04:04.980
- Like within a day.


00:04:04.980 --> 00:04:07.540
So anyway, pretty cool projects.


00:04:07.540 --> 00:04:10.380
Have either of you checked this out yet?


00:04:10.380 --> 00:04:12.020
- I did the exact same thing you did.


00:04:12.020 --> 00:04:15.640
I used PIPX and sold Rich yesterday, Rich CLI yesterday.


00:04:15.640 --> 00:04:19.640
One thing is I will say I use a,


00:04:19.640 --> 00:04:22.580
I've actually been using a replacement.


00:04:22.580 --> 00:04:23.820
So this is kind of like a replacement


00:04:23.820 --> 00:04:26.260
for the cat tool on Unix, right?


00:04:26.260 --> 00:04:31.260
And I've been using an alternative called bat, B-A-T,


00:04:31.260 --> 00:04:35.020
that's implemented in Rust and has a lot of this as well


00:04:35.020 --> 00:04:37.180
in terms of color syntax and stuff.


00:04:37.180 --> 00:04:39.180
But I'm willing to bet Rich is,


00:04:39.180 --> 00:04:40.920
which I'm willing to bet,


00:04:40.920 --> 00:04:44.340
Will's gonna move a bit faster.


00:04:44.340 --> 00:04:46.580
So I'm just gonna probably switch over


00:04:46.580 --> 00:04:49.780
to using Rich CLI over bat and just see where this goes.


00:04:49.780 --> 00:04:51.540
But I mean, come on,


00:04:51.540 --> 00:04:53.180
Will even made the output look great.


00:04:53.180 --> 00:04:54.140
So.


00:04:54.140 --> 00:04:55.340
- Yeah, so what-


00:04:55.340 --> 00:04:58.140
- Sorry for the output for the help, it looks phenomenal.


00:04:58.140 --> 00:05:01.540
- One of the things that I noticed was that


00:05:01.540 --> 00:05:03.020
the default theme,


00:05:03.020 --> 00:05:06.740
did the coloring was,


00:05:06.740 --> 00:05:08.980
didn't look quite right on the black background


00:05:08.980 --> 00:05:09.820
that I was using.


00:05:09.820 --> 00:05:14.540
So I just, I exactly, I was using it for cat.


00:05:14.540 --> 00:05:17.780
So I just aliased my cat to use rich


00:05:17.780 --> 00:05:21.620
with the Monokai format turned on.


00:05:21.620 --> 00:05:25.580
So Luciana, would you use this for anything?


00:05:25.580 --> 00:05:28.020
- Yeah, I was gonna say I'm behind, I haven't tried it yet.


00:05:28.020 --> 00:05:31.000
But once I saw the amazing things they have there,


00:05:31.000 --> 00:05:33.040
it's quite a few.


00:05:33.040 --> 00:05:35.140
I was like excited to try it out.


00:05:35.140 --> 00:05:36.920
So we'll do it today, hopefully.


00:05:38.340 --> 00:05:39.180
- Yeah, cool.


00:05:39.180 --> 00:05:45.300
Well, let's switch over to debugging.


00:05:45.300 --> 00:05:49.140
- Yeah, so I guess most folks, I don't know,


00:05:49.140 --> 00:05:51.100
at least I, when I started learning Python,


00:05:51.100 --> 00:05:53.000
I used to debug using print statements,


00:05:53.000 --> 00:05:55.760
which is like, no shame in that, it works very well.


00:05:55.760 --> 00:05:59.600
I still do that when it's like for real quick things,


00:05:59.600 --> 00:06:02.040
but I wanted to bring up this awesome tool


00:06:02.040 --> 00:06:04.200
that we have, DebugPy.


00:06:04.200 --> 00:06:05.340
It's a debugger for Python,


00:06:05.340 --> 00:06:08.200
and you can use it like as a CLI tool.


00:06:08.200 --> 00:06:10.800
You can also just import it and set breakpoints normally.


00:06:10.800 --> 00:06:13.840
I am a big fan of UI debugging,


00:06:13.840 --> 00:06:18.360
so I actually prefer to use it built into the Python extension


00:06:18.360 --> 00:06:19.200
for VS Code,


00:06:19.200 --> 00:06:21.400
which is the thing that we work on every single day.


00:06:21.400 --> 00:06:25.600
So, yeah, I wanted to bring up a few features.


00:06:25.600 --> 00:06:28.320
They're really, really cool, and I find very helpful,


00:06:28.320 --> 00:06:31.300
and it helps me save up a lot of time


00:06:31.300 --> 00:06:33.120
when I'm debugging code.


00:06:33.120 --> 00:06:35.040
So the first one of them


00:06:35.040 --> 00:06:37.400
is kind of like conditional breakpoints.


00:06:37.400 --> 00:06:40.620
Yeah, sorry, go ahead.


00:06:40.620 --> 00:06:42.500
- No, no, go ahead, neat.


00:06:42.500 --> 00:06:43.420
- Yeah, it's super neat.


00:06:43.420 --> 00:06:45.380
And this conditional breakpoints is something


00:06:45.380 --> 00:06:49.020
that I bring up because I guess when you're trying out


00:06:49.020 --> 00:06:51.700
debugging for the first time using the UI,


00:06:51.700 --> 00:06:54.240
you set up a breakpoint and then you hit it there


00:06:54.240 --> 00:06:55.940
and then you always reload the window


00:06:55.940 --> 00:06:59.660
or reload the debugger, sorry, to hit the breakpoint again.


00:06:59.660 --> 00:07:00.820
And then you keep stepping over


00:07:00.820 --> 00:07:02.580
until it hits a condition that you want.


00:07:02.580 --> 00:07:05.000
And in this GIF there, they have an example in TypeScript,


00:07:05.000 --> 00:07:06.560
but it works on Python files as well


00:07:06.560 --> 00:07:08.600
once you install the Python extension.


00:07:08.600 --> 00:07:10.880
But basically, you added the breakpoint


00:07:10.880 --> 00:07:15.040
to insert a certain condition so that the debugger will only


00:07:15.040 --> 00:07:18.400
stop when that expression is met or the condition is met.


00:07:18.400 --> 00:07:20.200
So one example there is hitCount.


00:07:20.200 --> 00:07:22.640
So you can imagine if you have a for loop,


00:07:22.640 --> 00:07:26.240
and you really want to stop when, for example,


00:07:26.240 --> 00:07:28.440
after 10 iterations of that loop.


00:07:28.440 --> 00:07:30.280
So you don't want to stop on that breakpoint


00:07:30.280 --> 00:07:32.040
and hit the step over 10 times.


00:07:32.040 --> 00:07:36.600
You just want it to stop when it hits 10 times.


00:07:36.600 --> 00:07:38.880
So you can do that with the hit point.


00:07:38.880 --> 00:07:40.600
You can also add expressions.


00:07:40.600 --> 00:07:43.680
So if you know, like, oh, I want the debugger


00:07:43.680 --> 00:07:47.760
to stop only when this variable gets the value of,


00:07:47.760 --> 00:07:51.080
I don't know, 5, then you can also do that.


00:07:51.080 --> 00:07:52.520
And it's pretty cool.


00:07:52.520 --> 00:07:54.160
Saves up a lot of time.


00:07:54.160 --> 00:07:56.440
And you can also do log points instead.


00:07:56.440 --> 00:07:58.600
If you're not interested in breaking the execution,


00:07:58.600 --> 00:08:01.680
just want to make sure that line was executed.


00:08:01.680 --> 00:08:05.420
So it prints out on the output that, hey, this is,


00:08:05.420 --> 00:08:06.420
we hit that point.


00:08:06.420 --> 00:08:07.460
This is like a log point,


00:08:07.460 --> 00:08:10.980
so it doesn't really break anything,


00:08:10.980 --> 00:08:12.420
but it's very informative.


00:08:12.420 --> 00:08:14.740
- Cool.


00:08:14.740 --> 00:08:19.420
So this is an extension for VS Code?


00:08:19.420 --> 00:08:23.740
- Yes, I believe most IDEs support that same feature,


00:08:23.740 --> 00:08:26.020
but it's a feature that I always recommend folks


00:08:26.020 --> 00:08:28.980
to look for in their IDEs or editors,


00:08:28.980 --> 00:08:31.420
'cause it does save us a lot of time.


00:08:31.420 --> 00:08:34.300
- So to be clear about the tech stack on this,


00:08:34.300 --> 00:08:36.040
so there's a couple of layers to this.


00:08:36.040 --> 00:08:41.040
So at the bottom layer is PyDevD by Fabio Sdrazny.


00:08:41.040 --> 00:08:46.380
We have him on contract as a consultant


00:08:46.380 --> 00:08:49.260
to do anything we need to have get fixed and stuff


00:08:49.260 --> 00:08:50.380
and just support the project.


00:08:50.380 --> 00:08:53.500
Because on top of this, we have another project


00:08:53.500 --> 00:08:55.900
that we have called DebugPy,


00:08:55.900 --> 00:08:57.380
which implements what's called


00:08:57.380 --> 00:08:59.920
the Debug Adapter Protocol or DAP.


00:08:59.920 --> 00:09:03.100
It's a meant to be a language agnostic protocol for


00:09:03.100 --> 00:09:06.220
debuggers to talk to editors comes out of VS Code.


00:09:06.220 --> 00:09:08.400
It's used by Visual Studio as well,


00:09:08.400 --> 00:09:10.440
and actually it's now used by Jupyter.


00:09:10.440 --> 00:09:13.480
This is how Jupyter was able to launch recently with


00:09:13.480 --> 00:09:14.520
debugger support.


00:09:14.520 --> 00:09:17.880
'cause actually run debug pie.


00:09:17.880 --> 00:09:20.720
And on top of that we have support because we're


00:09:20.720 --> 00:09:21.840
VS Code extension.


00:09:21.840 --> 00:09:23.520
We support the debug adapter,


00:09:23.520 --> 00:09:26.160
so we ship debug pie in box right now for


00:09:26.160 --> 00:09:27.240
supporting this.


00:09:27.240 --> 00:09:30.220
Although we are talking about breaking the extension,


00:09:30.220 --> 00:09:32.060
breaking debugging out to its own extension


00:09:32.060 --> 00:09:33.820
so that we can actually update it


00:09:33.820 --> 00:09:36.340
at a better cadence with debug pi


00:09:36.340 --> 00:09:39.220
'cause we can do platform specific V6s now,


00:09:39.220 --> 00:09:40.740
extensions for VS Code.


00:09:40.740 --> 00:09:44.220
So we'll shrink that down a bit for our users.


00:09:44.220 --> 00:09:48.640
- So is there like a tutorial somewhere


00:09:48.640 --> 00:09:51.700
that has like all of the cool Python extensions


00:09:51.700 --> 00:09:54.340
that I need for VS Code to get VS Code


00:09:54.340 --> 00:09:56.660
with Python to work really great?


00:09:56.660 --> 00:09:59.420
Yeah, we have our get started tutorial.


00:09:59.420 --> 00:10:01.500
It has like it doesn't have a lot of extensions,


00:10:01.500 --> 00:10:03.420
so there's definitely more extensions


00:10:03.420 --> 00:10:05.220
that I find to be personally cool.


00:10:05.220 --> 00:10:06.860
Maybe we could have a blog post about this


00:10:06.860 --> 00:10:09.220
and like cool extensions for Python specifically


00:10:09.220 --> 00:10:11.020
in VS Code 'cause there are some of them.


00:10:11.020 --> 00:10:13.500
I think Don Giovanni from,


00:10:13.500 --> 00:10:15.800
he's the one who created the Python extension


00:10:15.800 --> 00:10:19.100
before it was Microsoft thing


00:10:19.100 --> 00:10:20.620
and Microsoft hiring him and everything.


00:10:20.620 --> 00:10:22.800
So he has a one that I always talk about,


00:10:22.800 --> 00:10:26.180
which is the Python environments manager extension.


00:10:26.180 --> 00:10:28.700
It just displays the environments


00:10:28.700 --> 00:10:29.800
that it can find on your machine


00:10:29.800 --> 00:10:31.420
and what packages are installed there.


00:10:31.420 --> 00:10:34.540
It's kind of like a environment viewer and it's pretty cool.


00:10:34.540 --> 00:10:37.340
It's one that I always tell people about.


00:10:37.340 --> 00:10:38.180
So.


00:10:38.180 --> 00:10:40.400
- You know, a deep dive into all the useful extensions


00:10:40.400 --> 00:10:43.060
to add would be a great testing code episode.


00:10:43.060 --> 00:10:44.500
Just saying.


00:10:44.500 --> 00:10:46.580
- I love that idea.


00:10:46.580 --> 00:10:48.220
- I like it.


00:10:48.220 --> 00:10:49.220
Okay.


00:10:49.220 --> 00:10:52.160
Well, speaking of plugging stuff,


00:10:53.140 --> 00:10:56.340
I want to take a moment to thank our sponsor.


00:10:56.340 --> 00:11:00.380
So this episode is sponsored by Datadog.


00:11:00.380 --> 00:11:02.860
Datadog is a real-time monitoring platform


00:11:02.860 --> 00:11:05.700
that unifies metrics, traces, and logs


00:11:05.700 --> 00:11:07.940
into one tightly integrated platform.


00:11:07.940 --> 00:11:10.060
Datadog APM empowers developer teams


00:11:10.060 --> 00:11:11.980
to identify anomalies, resolve issues,


00:11:11.980 --> 00:11:14.100
and improve application performance.


00:11:14.100 --> 00:11:16.740
Begin collecting stack traces,


00:11:16.740 --> 00:11:18.600
visualizing them as flame graphs,


00:11:18.600 --> 00:11:21.580
and organizing them into profile types


00:11:21.580 --> 00:11:23.980
such as CPU, IO and more.


00:11:23.980 --> 00:11:27.380
Plus Datadog APMs live search.


00:11:27.380 --> 00:11:29.580
So you can perform searches across full streams


00:11:29.580 --> 00:11:34.220
of ingested traces generated by your application


00:11:34.220 --> 00:11:35.860
over the last 15 minutes.


00:11:35.860 --> 00:11:40.300
Try Datadog APM free for a 14 day free trial


00:11:40.300 --> 00:11:43.940
and Datadog will send you a free T-shirt.


00:11:43.940 --> 00:11:45.880
And actually I have one of these purple T-shirts


00:11:45.880 --> 00:11:46.980
and I love it.


00:11:46.980 --> 00:11:49.880
So visit pythonbytes.fm/datadog


00:11:49.880 --> 00:11:53.180
or just click on the link in your podcast player show notes


00:11:53.180 --> 00:11:54.720
to get started.


00:11:54.720 --> 00:11:55.560
Awesome.


00:11:55.560 --> 00:11:59.180
I gotta pay the bills.


00:11:59.180 --> 00:12:02.880
So where are we at now?


00:12:02.880 --> 00:12:04.380
We're back on me again.


00:12:04.380 --> 00:12:08.360
Unless Brett, you got something right out of the blue


00:12:08.360 --> 00:12:09.400
you wanna talk about?


00:12:09.400 --> 00:12:13.360
Put you on the spot.


00:12:13.360 --> 00:12:14.200
- That's okay.


00:12:14.200 --> 00:12:17.320
I believe you've talked about exception groups


00:12:17.320 --> 00:12:18.560
on the podcast already.


00:12:19.640 --> 00:12:21.680
I don't, oh yeah, I think so.


00:12:21.680 --> 00:12:24.640
- Yeah, so just 'cause DataDog, the sponsor,


00:12:24.640 --> 00:12:25.980
obviously cares about tracebacks and stuff.


00:12:25.980 --> 00:12:29.820
One interesting thing that's coming up in terms of a PEP,


00:12:29.820 --> 00:12:33.520
it has not been given to the steering council yet,


00:12:33.520 --> 00:12:35.940
but there's actually a PEP coming up


00:12:35.940 --> 00:12:38.340
that's gonna add a Dunder Notes field,


00:12:38.340 --> 00:12:40.320
potentially, to exceptions.


00:12:40.320 --> 00:12:43.820
This actually came out of the exception group work


00:12:43.820 --> 00:12:48.060
because Zach from Hypothesis was working with it


00:12:48.060 --> 00:12:51.140
over on that side and realized that it would be convenient


00:12:51.140 --> 00:12:52.980
to be able to kind of just basically literally,


00:12:52.980 --> 00:12:55.220
the name says, add a note to extensions


00:12:55.220 --> 00:12:58.620
to kind of help explain why this came about.


00:12:58.620 --> 00:13:01.620
And so there's a PEP coming that's going to basically


00:13:01.620 --> 00:13:04.940
just allow libraries and stuff that work with exceptions


00:13:04.940 --> 00:13:07.020
to just attach a little note saying,


00:13:07.020 --> 00:13:10.860
this is why this happened, more than just a little thing,


00:13:10.860 --> 00:13:12.860
especially for exception groups,


00:13:12.860 --> 00:13:15.460
you can kind of get kind of big and murky


00:13:15.460 --> 00:13:17.220
by having a single note added to it


00:13:17.220 --> 00:13:19.300
to help explain why this came about.


00:13:19.300 --> 00:13:23.220
It's hopefully gonna help make it easier for users


00:13:23.220 --> 00:13:25.680
to understand a bit more why something happened.


00:13:25.680 --> 00:13:26.520
So.


00:13:26.520 --> 00:13:27.480
- That's pretty neat.


00:13:27.480 --> 00:13:28.520
I like it.


00:13:28.520 --> 00:13:29.360
Nice.


00:13:29.360 --> 00:13:32.200
I got some feedback recently


00:13:32.200 --> 00:13:37.200
that I'm not covering enough test stuff on Python bytes.


00:13:37.200 --> 00:13:39.440
So I'm gonna try to,


00:13:39.440 --> 00:13:42.860
I'm gonna try to solve that.


00:13:42.860 --> 00:13:45.040
I'm not gonna cover test stuff every week,


00:13:45.040 --> 00:13:46.900
but I've got a test thing this week


00:13:46.900 --> 00:13:48.880
that I'm pretty excited about.


00:13:48.880 --> 00:13:52.260
So Simon Willison, great guy,


00:13:52.260 --> 00:13:56.720
he wrote an article called "Documenting Unit Tests."


00:13:56.720 --> 00:14:00.020
And this, wow, it's old.


00:14:00.020 --> 00:14:01.500
It was came out in 2018.


00:14:01.500 --> 00:14:02.380
I just noticed it.


00:14:02.380 --> 00:14:04.360
So yeah, there's the internet for you.


00:14:04.360 --> 00:14:08.560
But it's like, it's a super cool idea.


00:14:08.560 --> 00:14:12.960
So the idea is we've got tests like pytest


00:14:12.960 --> 00:14:15.320
and other test runners, you can do anything.


00:14:15.320 --> 00:14:19.260
he's using pytest to test your source code, but why not?


00:14:19.260 --> 00:14:22.300
And Python has all these introspection things you can do.


00:14:22.300 --> 00:14:26.420
So he's using introspection to look at the code


00:14:26.420 --> 00:14:29.660
and then introspection to look at the documents


00:14:29.660 --> 00:14:34.500
with his test code, and then make sure that there's


00:14:34.500 --> 00:14:37.280
some items that are definitely in the docs.


00:14:37.280 --> 00:14:42.280
As an example, so in this, his example in the blog post


00:14:44.940 --> 00:14:47.220
is mentoring data, his project dataset.


00:14:47.220 --> 00:14:49.460
And so the test for this is right there.


00:14:49.460 --> 00:14:51.620
So you can go take a look at what he's doing,


00:14:51.620 --> 00:14:54.060
but he takes a look at the repo.


00:14:54.060 --> 00:14:57.140
And for instance, for all, if he adds a config option,


00:14:57.140 --> 00:14:58.420
he's got to test to make sure


00:14:58.420 --> 00:15:00.940
that the config option gets documented.


00:15:00.940 --> 00:15:02.480
That's cool.


00:15:02.480 --> 00:15:03.780
So it's just tests or fail.


00:15:03.780 --> 00:15:06.040
If he forgets to document a new option,


00:15:06.040 --> 00:15:11.260
also plugin hooks and different views within dataset,


00:15:11.260 --> 00:15:13.180
they all have to make sure that he has special,


00:15:13.180 --> 00:15:16.340
The views, like he wants special pages for each view.


00:15:16.340 --> 00:15:18.420
So it makes sure that there's a page there.


00:15:18.420 --> 00:15:21.620
So I just, there's a couple neat things here.


00:15:21.620 --> 00:15:24.440
Just the concept of using tests to make sure


00:15:24.440 --> 00:15:26.640
that there's things documented.


00:15:26.640 --> 00:15:30.240
It doesn't tell, he makes a comment that it's not telling,


00:15:30.240 --> 00:15:31.860
like a lot of tests, it's not telling you


00:15:31.860 --> 00:15:35.340
that the documents are good or documented well,


00:15:35.340 --> 00:15:38.800
but that they're documented at all, which is good.


00:15:38.800 --> 00:15:40.860
Same with our code.


00:15:40.860 --> 00:15:42.300
Tests don't necessarily tell you


00:15:42.300 --> 00:15:46.140
that your code is perfect, it's just that they're tested.


00:15:46.140 --> 00:15:47.860
The other thing that I wanted to point out about this


00:15:47.860 --> 00:15:51.140
is there's some nice use of features of pytest.


00:15:51.140 --> 00:15:54.660
So there's a nice use of fixtures and parameterization.


00:15:54.660 --> 00:15:58.140
So he's got like the views, for instance,


00:15:58.140 --> 00:16:00.580
he goes out and looks at generate,


00:16:00.580 --> 00:16:03.300
like goes and gets a list of views from the code


00:16:03.300 --> 00:16:06.620
and then use that list to have a generated test


00:16:06.620 --> 00:16:09.340
to make sure that each of those views is tested


00:16:09.340 --> 00:16:10.360
or is documented.


00:16:11.220 --> 00:16:12.140
This is a nice idea.


00:16:12.140 --> 00:16:14.300
I've been trying to do that sort of


00:16:14.300 --> 00:16:17.980
generated parameter lists.


00:16:17.980 --> 00:16:19.900
I'm trying to do that more in my code


00:16:19.900 --> 00:16:22.340
because it's just kind of a cool idea


00:16:22.340 --> 00:16:24.140
to generate your own test cases.


00:16:24.140 --> 00:16:26.900
So anyway, good job, Simon.


00:16:26.900 --> 00:16:30.620
- Yeah, as someone who spends more time reading code


00:16:30.620 --> 00:16:34.180
and writing code, I definitely appreciate this initiative.


00:16:34.180 --> 00:16:37.380
It's very much better to have documented code out there.


00:16:37.380 --> 00:16:40.940
- Well, a combination of like making sure


00:16:40.940 --> 00:16:44.380
that the test, the documents are tested


00:16:44.380 --> 00:16:45.740
or things are covered.


00:16:45.740 --> 00:16:48.780
And then also I think a few episodes ago,


00:16:48.780 --> 00:16:52.420
we talked about a project,


00:16:52.420 --> 00:16:57.340
projects using generating documents themselves.


00:16:57.340 --> 00:16:59.100
So like for instance, instead,


00:16:59.100 --> 00:17:03.260
if you're gonna plop your help text in your document,


00:17:03.260 --> 00:17:07.260
don't copy and paste it, use code to generate that.


00:17:07.260 --> 00:17:08.900
And then it's always gonna be correct


00:17:08.900 --> 00:17:10.460
if you got it in your build system.


00:17:10.460 --> 00:17:12.700
So nice ideas.


00:17:12.700 --> 00:17:16.180
- And it was about using cog, right?


00:17:16.180 --> 00:17:17.180
- Yeah, that was it.


00:17:17.180 --> 00:17:18.160
Cog, I forgot.


00:17:18.160 --> 00:17:20.660
- Yeah.


00:17:20.660 --> 00:17:24.380
- And what I really love about that is


00:17:24.380 --> 00:17:26.840
when I came across cog a long time ago,


00:17:26.840 --> 00:17:29.820
I thought I gotta have a use for this,


00:17:29.820 --> 00:17:30.740
but I can't think of it.


00:17:30.740 --> 00:17:32.500
But this is the perfect use


00:17:32.500 --> 00:17:34.660
because we always often do that


00:17:34.660 --> 00:17:36.460
within our like little readme or something


00:17:36.460 --> 00:17:39.980
is just to plop a little example of code


00:17:39.980 --> 00:17:43.260
using your tool, whatever library you have.


00:17:43.260 --> 00:17:45.740
So having cog generate that for you is great.


00:17:45.740 --> 00:17:48.320
So I think I need to go back and do it.


00:17:48.320 --> 00:17:50.900
So I've got a little toy project called cards


00:17:50.900 --> 00:17:53.700
that I use for teaching testing.


00:17:53.700 --> 00:17:58.340
And I changed the interface for it for layout reasons.


00:17:58.340 --> 00:18:01.060
The tables that I was using


00:18:01.060 --> 00:18:03.420
didn't show up in eBooks very well.


00:18:03.420 --> 00:18:06.840
So I switched the table format,


00:18:06.840 --> 00:18:08.740
but then I forgot to change the readme.


00:18:08.740 --> 00:18:11.280
But if I had had cog in place,


00:18:11.280 --> 00:18:13.320
I would already be doing it.


00:18:13.320 --> 00:18:16.440
So it's a neat, my first thought was to write tests


00:18:16.440 --> 00:18:18.960
to make sure that the output in my readme


00:18:18.960 --> 00:18:21.360
was the same as the code.


00:18:21.360 --> 00:18:23.320
But I think a better idea is to just have


00:18:23.320 --> 00:18:24.340
the readme generated.


00:18:24.340 --> 00:18:27.920
So I mean, either one works, but both are good ideas.


00:18:27.920 --> 00:18:30.640
- Yeah, and to tie this back to this point,


00:18:30.640 --> 00:18:33.680
Simon's the one that actually started the trend on Twitter


00:18:33.680 --> 00:18:37.240
of everyone using cog to use this on their readme.


00:18:37.240 --> 00:18:38.640
At least that's how I first came across it.


00:18:38.640 --> 00:18:40.820
And then I subsequently saw multiple people do it.


00:18:40.820 --> 00:18:43.100
And then I finally had the same reaction you had, Ryan.


00:18:43.100 --> 00:18:44.980
I was like, oh yeah, I've been looking for a reason


00:18:44.980 --> 00:18:45.820
to use cog for ages.


00:18:45.820 --> 00:18:46.660
I never quite had one.


00:18:46.660 --> 00:18:47.620
I was like, this is a great one.


00:18:47.620 --> 00:18:50.060
So I went and updated the readme for the Python launcher


00:18:50.060 --> 00:18:52.820
to use this to generate all the URLs


00:18:52.820 --> 00:18:55.120
for downloading the built binaries for it.


00:18:55.120 --> 00:18:56.560
So it's great.


00:18:56.560 --> 00:18:59.420
- Gulf binaries?


00:18:59.420 --> 00:19:00.380
- Built.


00:19:00.380 --> 00:19:02.420
- Built binaries, okay.


00:19:02.420 --> 00:19:04.100
- 'Cause I tried to build the launcher


00:19:04.100 --> 00:19:06.320
for like a bazillion different platforms.


00:19:06.320 --> 00:19:11.320
- And I'm grateful for that 'cause I'm using the launcher


00:19:11.320 --> 00:19:13.380
like almost every day now.


00:19:13.380 --> 00:19:14.220
- Oh, fantastic.


00:19:14.220 --> 00:19:16.100
- We are, thank you, Brett.


00:19:16.100 --> 00:19:23.900
- Well, so let's pop over to talking about ourselves.


00:19:23.900 --> 00:19:28.380
- Oh, that was such a good, wow, I'm impressed.


00:19:28.380 --> 00:19:31.740
Yes, pep673 self-type.


00:19:31.740 --> 00:19:34.260
I heard from, well, Brett Canundar


00:19:34.260 --> 00:19:37.220
that it has been recently accepted.


00:19:37.220 --> 00:19:39.540
And it's interesting for me, because I'm now


00:19:39.540 --> 00:19:41.660
learning more about types in Python.


00:19:41.660 --> 00:19:44.140
I'm very new to it, admittedly.


00:19:44.140 --> 00:19:46.300
And I thought it was interesting,


00:19:46.300 --> 00:19:50.100
because, well, it adds this away to another methods that


00:19:50.100 --> 00:19:52.220
return an instance of their class.


00:19:52.220 --> 00:19:55.980
And they give a very cool example there of a class.


00:19:55.980 --> 00:19:57.600
There's shape, and then we have circle,


00:19:57.600 --> 00:19:59.660
and here it's from shape.


00:19:59.660 --> 00:20:03.260
And then shape has this method called setScale,


00:20:03.260 --> 00:20:06.940
And then the type that returns is shape,


00:20:06.940 --> 00:20:08.180
because it returns self.


00:20:08.180 --> 00:20:11.580
And for circle, it returns self as well.


00:20:11.580 --> 00:20:12.620
So it's a type circle.


00:20:12.620 --> 00:20:15.820
And then it shows there are some, for example, editors


00:20:15.820 --> 00:20:22.260
that may throw in error when you call circle setScale, which


00:20:22.260 --> 00:20:25.620
is a method from shape, and then setRadius, which


00:20:25.620 --> 00:20:27.340
is something from circle.


00:20:27.340 --> 00:20:32.500
But once you call them, it will say error,


00:20:32.500 --> 00:20:36.060
because shape doesn't have this method that


00:20:36.060 --> 00:20:37.660
is specific to circle.


00:20:37.660 --> 00:20:42.820
So to have this better way to frame that


00:20:42.820 --> 00:20:44.020
would be to return self.


00:20:44.020 --> 00:20:45.380
And it was accepted.


00:20:45.380 --> 00:20:47.100
And it's very interesting.


00:20:47.100 --> 00:20:51.260
I feel like it seems very clean to me and a very good solution.


00:20:51.260 --> 00:20:54.100
So I'm personally excited that it was accepted.


00:20:54.100 --> 00:20:55.740
It was very well explained as well.


00:20:55.740 --> 00:20:58.740
And that was real.


00:20:58.740 --> 00:21:02.620
For people on the podcast who can't see


00:21:02.620 --> 00:21:05.540
what Brian's scrolling through, basically,


00:21:05.540 --> 00:21:09.020
think of capital S self as the return type


00:21:09.020 --> 00:21:10.980
for all those class methods you write


00:21:10.980 --> 00:21:13.700
that construct an instance of your object.


00:21:13.700 --> 00:21:16.380
This is what this is built for, right?


00:21:16.380 --> 00:21:17.220
It's fantastic.


00:21:17.220 --> 00:21:20.240
If you have the from whatever method,


00:21:20.240 --> 00:21:22.540
class method on your class to construct


00:21:22.540 --> 00:21:25.080
that instance of that class from something else,


00:21:25.080 --> 00:21:27.520
you'd now have a return self with a capital S


00:21:27.520 --> 00:21:30.380
versus specifying the exact class it would have returned.


00:21:30.380 --> 00:21:33.660
So you don't have to worry about what that's going to look like


00:21:33.660 --> 00:21:35.220
and having to worry about the spelling


00:21:35.220 --> 00:21:39.020
or any of that forward declaration problems


00:21:39.020 --> 00:21:40.620
you can have if you don't do


00:21:40.620 --> 00:21:43.540
from Dunder Future import annotations, right?


00:21:43.540 --> 00:21:45.020
Where it's like, oh, I'm referring to a name


00:21:45.020 --> 00:21:47.220
that doesn't exist yet and Python throws a fit


00:21:47.220 --> 00:21:50.300
because that object doesn't exist yet by that name.


00:21:50.300 --> 00:21:52.440
So it solves a couple problems like that,


00:21:52.440 --> 00:21:55.340
but it's really basically if you write class methods


00:21:55.340 --> 00:21:58.540
that construct instances of that class, it's great.


00:21:58.540 --> 00:22:03.460
- Well, I don't, but I probably will now when this comes out.


00:22:03.460 --> 00:22:07.900
So is this part of 3.11, do we know?


00:22:07.900 --> 00:22:09.620
- 3.11, right, yes. - 3.11.


00:22:09.620 --> 00:22:10.620
- Nice.


00:22:10.620 --> 00:22:13.900
- Yeah, so you can probably get that probably today,


00:22:13.900 --> 00:22:15.700
if not in the near future,


00:22:15.700 --> 00:22:17.740
from the typing extensions package,


00:22:17.740 --> 00:22:21.060
which kind of tries to do a back port and forward port


00:22:21.060 --> 00:22:24.020
of anything in the typing world that's experimental


00:22:24.020 --> 00:22:26.360
has been landed but not in a release yet.


00:22:26.360 --> 00:22:27.200
- Okay.


00:22:27.200 --> 00:22:28.820
- And I believe the type checkers,


00:22:28.820 --> 00:22:30.100
I don't know if they all support it yet,


00:22:30.100 --> 00:22:32.140
but I'm sure very shortly they will all support this.


00:22:32.140 --> 00:22:35.420
So you can get to it today.


00:22:35.420 --> 00:22:38.720
- And then we get, we keep people that are writing tools


00:22:38.720 --> 00:22:41.500
like Flake and Black on their toes,


00:22:41.500 --> 00:22:45.020
catching up with all these changes.


00:22:45.020 --> 00:22:46.900
- Well, luckily it won't hit them 'cause it's all typing.


00:22:46.900 --> 00:22:50.940
So just strings to Black and I don't think Flake


00:22:50.940 --> 00:22:55.940
but like mypy, pywrite/pylance, pytype, pyre,


00:22:55.940 --> 00:23:00.900
all those type checkers are the ones


00:23:00.900 --> 00:23:02.100
that are gonna have to get updated for this.


00:23:02.100 --> 00:23:03.940
But they were all in on the discussion


00:23:03.940 --> 00:23:05.440
of even proposing this.


00:23:05.440 --> 00:23:07.780
- Nice.


00:23:07.780 --> 00:23:10.800
But is that, will you repeat that?


00:23:10.800 --> 00:23:14.260
So all these people writing these tools


00:23:14.260 --> 00:23:17.620
were involved with these sorts of type processes?


00:23:17.620 --> 00:23:20.300
- Yeah, so the way typically decisions


00:23:20.300 --> 00:23:23.260
around typing happen, especially from a static typing


00:23:23.260 --> 00:23:27.540
perspective, I don't want to make statements on Pydantic's


00:23:27.540 --> 00:23:29.380
part in the dynamic typing world,


00:23:29.380 --> 00:23:31.020
'cause there's kind of two parts to typing, right?


00:23:31.020 --> 00:23:32.500
There's the general typing as in,


00:23:32.500 --> 00:23:35.060
oh, there's the concept of typing now in Python,


00:23:35.060 --> 00:23:37.260
but there's the people who do static typing, right?


00:23:37.260 --> 00:23:39.620
And that's the kind of thing where you add your type


00:23:39.620 --> 00:23:42.460
annotations, your type hints, and you run a tool later


00:23:42.460 --> 00:23:44.860
that somehow reads them offline, as it were,


00:23:44.860 --> 00:23:48.060
like mypy or PyWrite or whatever.


00:23:48.060 --> 00:23:49.620
And then there's the dynamic typing folks,


00:23:49.620 --> 00:23:51.540
that's like Pydantic where during runtime,


00:23:51.540 --> 00:23:53.440
they actually look at the annotations.


00:23:53.440 --> 00:23:56.340
From the static typing perspective,


00:23:56.340 --> 00:23:58.140
there is something called the typing SIG.


00:23:58.140 --> 00:24:01.980
It's a mailing list and all the major static type checkers


00:24:01.980 --> 00:24:06.740
all work there together to try to figure out


00:24:06.740 --> 00:24:09.300
where they wanna take things and kind of what gaps


00:24:09.300 --> 00:24:11.100
there are in terms of typing.


00:24:11.100 --> 00:24:14.140
Basically, how can they move typing forward in Python?


00:24:14.140 --> 00:24:15.880
It's also a place people can go to ask for help


00:24:15.880 --> 00:24:17.540
if they have a generic typing question


00:24:17.540 --> 00:24:19.880
it isn't too tool specific.


00:24:19.880 --> 00:24:21.820
But to answer your direct question, Brian,


00:24:21.820 --> 00:24:24.200
the tools that are involved there,


00:24:24.200 --> 00:24:26.920
which are basically all the type checkers,


00:24:26.920 --> 00:24:28.960
static type checkers that I know of.


00:24:28.960 --> 00:24:32.840
So there's PyWrite, which underlines PyLance,


00:24:32.840 --> 00:24:36.220
which is what we use for our completions in VS Code.


00:24:36.220 --> 00:24:41.220
There's mypy, there is PyType that comes from Google,


00:24:41.220 --> 00:24:43.320
and then there's Py that comes from Meta.


00:24:43.320 --> 00:24:46.800
- Okay.


00:24:46.800 --> 00:24:49.480
- Wow, dizzying.


00:24:49.480 --> 00:24:52.360
- Yeah, although, I mean, one of the nice things


00:24:52.360 --> 00:24:55.440
about all the peps, right, is this is all backed by specs.


00:24:55.440 --> 00:24:58.980
So there's not a lot of crazy deviation, as it were,


00:24:58.980 --> 00:24:59.820
from the semantics.


00:24:59.820 --> 00:25:02.080
It's more of a bug if someone disagrees.


00:25:02.080 --> 00:25:04.500
So they're all pretty consistent,


00:25:04.500 --> 00:25:06.460
but some of them do a bit more like inferencing,


00:25:06.460 --> 00:25:09.420
like PyType does more like runtime inferencing


00:25:09.420 --> 00:25:12.000
and other inferencing to try to kind of fill in the gaps.


00:25:12.000 --> 00:25:13.560
That's actually why Google wrote it, I think,


00:25:13.560 --> 00:25:16.080
to help them move over to Python 3,


00:25:16.080 --> 00:25:18.580
start introducing types to their code base.


00:25:18.580 --> 00:25:19.420
- Yeah.


00:25:19.420 --> 00:25:21.100
- So they all have slightly different strengths


00:25:21.100 --> 00:25:23.380
and weaknesses, but they should at least type wise


00:25:23.380 --> 00:25:26.300
more or less, once they've all implemented the same specs,


00:25:26.300 --> 00:25:30.140
lead to the same type outcomes as it were.


00:25:30.140 --> 00:25:31.920
- Yeah, okay, cool.


00:25:31.920 --> 00:25:34.880
- See, I learned so much about typing


00:25:34.880 --> 00:25:36.680
just by listening right now.


00:25:36.680 --> 00:25:43.680
- Yeah, well, we're to the end of our normal topics.


00:25:43.680 --> 00:25:48.680
- Yeah, so it was announced in my team


00:25:48.680 --> 00:25:52.480
that Black is no longer in beta version.


00:25:52.480 --> 00:25:56.480
So version 2020.1.0 has come out.


00:25:56.480 --> 00:25:59.520
So it's their first stable release, I believe.


00:25:59.520 --> 00:26:01.360
So that's very exciting.


00:26:01.360 --> 00:26:04.920
I really like the highlights that they have there


00:26:04.920 --> 00:26:08.360
that Python 2 is no longer supported.


00:26:08.360 --> 00:26:09.200
(laughs)


00:26:09.200 --> 00:26:10.520
- Yeah, I think that's a good thing.


00:26:10.520 --> 00:26:12.920
Python 2 is no longer supported.


00:26:12.920 --> 00:26:14.680
(laughing)


00:26:14.680 --> 00:26:15.520
- Nice.


00:26:15.520 --> 00:26:16.760
(laughing)


00:26:16.760 --> 00:26:20.640
- So that's a cool announcement for the week.


00:26:20.640 --> 00:26:24.220
And the other one that I have is to remind folks


00:26:24.220 --> 00:26:26.960
about PyCascades 2022.


00:26:26.960 --> 00:26:28.000
It's happening this weekend.


00:26:28.000 --> 00:26:29.240
It's remote.


00:26:29.240 --> 00:26:31.480
Tickets are on sale.


00:26:31.480 --> 00:26:33.880
So if you're interested in joining the event,


00:26:33.880 --> 00:26:34.720
it's really awesome.


00:26:34.720 --> 00:26:36.320
It was my first Python conference


00:26:36.320 --> 00:26:39.120
and the community there is just really amazing.


00:26:39.120 --> 00:26:43.580
So again, remote, join us this weekend.


00:26:43.580 --> 00:26:45.720
- Pike Cascades was your first conference?


00:26:45.720 --> 00:26:46.560
- It was.


00:26:46.560 --> 00:26:49.360
It was back in 2019.


00:26:49.360 --> 00:26:53.120
- Was that the Portland one?


00:26:53.120 --> 00:26:55.680
- It was in Seattle.


00:26:55.680 --> 00:26:56.720
- Seattle, okay.


00:26:56.720 --> 00:27:00.040
Yeah, I guess it was the 2021,


00:27:00.040 --> 00:27:02.720
it was in Portland right before everything shut down.


00:27:02.720 --> 00:27:05.560
- Yes, 2020, it was right before it, yeah.


00:27:05.560 --> 00:27:07.120
- Yeah, 'cause that was the one I had to miss


00:27:07.120 --> 00:27:09.680
'cause I was out of the country on vacation


00:27:09.680 --> 00:27:10.800
when it happened.


00:27:10.800 --> 00:27:11.640
- Yeah.


00:27:11.640 --> 00:27:14.200
- Not in China, I hope.


00:27:14.200 --> 00:27:17.920
- No, I was in Thailand for a friend's wedding.


00:27:17.920 --> 00:27:19.280
- Interesting, nice.


00:27:19.280 --> 00:27:22.000
- That was back in the day when we kept track


00:27:22.000 --> 00:27:24.180
of what countries do have COVID cases,


00:27:24.180 --> 00:27:26.920
not how many cases in every country.


00:27:26.920 --> 00:27:29.480
So it was a different time.


00:27:29.480 --> 00:27:30.320
- Yeah.


00:27:30.320 --> 00:27:32.120
- A while ago.


00:27:32.120 --> 00:27:33.840
- So I only have like, I guess one,


00:27:33.840 --> 00:27:36.800
I don't have anything to show for this,


00:27:36.800 --> 00:27:38.800
but I did a couple extra things.


00:27:38.800 --> 00:27:42.160
It wasn't gonna talk about it too much,


00:27:42.160 --> 00:27:45.000
but I did notice that pip is now at 22,


00:27:45.000 --> 00:27:46.840
version 22 dot something.


00:27:46.840 --> 00:27:49.920
It's what, we're at 2202 now.


00:27:49.920 --> 00:27:52.840
But one of the neat things about it is


00:27:52.840 --> 00:27:57.840
there's some cool stuff around having pip vendor.


00:27:57.840 --> 00:27:59.880
There's a couple neat things.


00:27:59.880 --> 00:28:02.400
There's a one of the, they're vendored some of rich.


00:28:02.400 --> 00:28:06.120
So some of the, especially the error output.


00:28:06.120 --> 00:28:07.160
If everything goes great,


00:28:07.160 --> 00:28:09.000
you probably won't notice much of a difference,


00:28:09.000 --> 00:28:13.080
except for maybe the progress bar if things are slow.


00:28:13.080 --> 00:28:15.640
But the error report if something goes wrong,


00:28:15.640 --> 00:28:17.800
like if it's building something,


00:28:17.800 --> 00:28:21.760
that's where things apparently show up really neat,


00:28:21.760 --> 00:28:23.480
some better error outputs.


00:28:23.480 --> 00:28:26.400
And better error outputs are always great.


00:28:26.400 --> 00:28:29.720
Also, interesting that they replaced talks


00:28:29.720 --> 00:28:31.720
in their development workflow with NOX.


00:28:33.040 --> 00:28:36.200
And I don't know if that's worth noting or not,


00:28:36.200 --> 00:28:38.340
but it's interesting nonetheless.


00:28:38.340 --> 00:28:42.360
- Yeah, I know Pradyun, one of the core developers of Pip


00:28:42.360 --> 00:28:43.200
is a big Knox fan.


00:28:43.200 --> 00:28:44.120
I'm also a Knox fan.


00:28:44.120 --> 00:28:48.780
So I think part of that's just kind of the difference.


00:28:48.780 --> 00:28:49.880
For those of you who don't know the difference


00:28:49.880 --> 00:28:52.080
between TOX and Knox, other than the letter,


00:28:52.080 --> 00:28:58.180
Knox is a bit more of a, I would say, general task runner.


00:28:58.180 --> 00:29:00.080
So because you can write just straight,


00:29:00.080 --> 00:29:02.000
it's writing just straight Python code.


00:29:02.000 --> 00:29:05.820
So I think for projects that like to use it


00:29:05.820 --> 00:29:07.500
for like release process stuff,


00:29:07.500 --> 00:29:09.700
like on the packaging project,


00:29:09.700 --> 00:29:12.380
Pragen wrote a Knox file that has like literally


00:29:12.380 --> 00:29:15.220
a release command that will do everything you need


00:29:15.220 --> 00:29:16.340
from within Knox.


00:29:16.340 --> 00:29:19.180
So you don't have to have a separate shell script


00:29:19.180 --> 00:29:20.020
or something else.


00:29:20.020 --> 00:29:21.860
So it can all be in the same file that you also specify


00:29:21.860 --> 00:29:24.220
how to run your linter and how to run your tests and stuff.


00:29:24.220 --> 00:29:25.060
So.


00:29:25.060 --> 00:29:25.900
- That's pretty neat.


00:29:25.900 --> 00:29:27.220
One of the things that I've,


00:29:27.220 --> 00:29:31.460
and I don't remember if there's a way to get around it


00:29:31.460 --> 00:29:34.580
or not, TOX operates in a virtual environment.


00:29:34.580 --> 00:29:38.260
So it creates, so one of the things,


00:29:38.260 --> 00:29:39.860
the default behavior at least,


00:29:39.860 --> 00:29:43.540
creates a virtual environment and then runs,


00:29:43.540 --> 00:29:44.920
runs whatever you're gonna have it do


00:29:44.920 --> 00:29:46.300
within that virtual environment.


00:29:46.300 --> 00:29:47.760
So like the idea being,


00:29:47.760 --> 00:29:50.040
you're gonna have multiple Python versions.


00:29:50.040 --> 00:29:51.980
So it creates a virtual environment


00:29:51.980 --> 00:29:54.540
for each Python version that you're running.


00:29:54.540 --> 00:29:56.420
There's some stuff like this extra stuff,


00:29:56.420 --> 00:29:58.040
like I just want to publish now.


00:29:58.040 --> 00:30:01.120
I'm already like, I'm already in a virtual environment


00:30:01.120 --> 00:30:03.200
'cause I'm always in a virtual environment.


00:30:03.200 --> 00:30:06.640
I don't really need a Tox to generate another one


00:30:06.640 --> 00:30:08.280
just to run a command.


00:30:08.280 --> 00:30:10.480
Is that sort, do you know if that sort of thing


00:30:10.480 --> 00:30:13.000
is easier in Knox or does Knox also create


00:30:13.000 --> 00:30:15.960
a virtual environment before it does stuff?


00:30:15.960 --> 00:30:20.960
- So Knox can create a virtual environment.


00:30:20.960 --> 00:30:26.000
I can't remember if it does automatically for every command.


00:30:26.000 --> 00:30:27.760
- Putting you on the spot.


00:30:27.760 --> 00:30:29.680
But it's something I'll look up there.


00:30:29.680 --> 00:30:31.560
Ask Thea, she can tell you.


00:30:31.560 --> 00:30:34.280
- Yeah, yeah, definitely.


00:30:34.280 --> 00:30:35.960
So, go ahead.


00:30:35.960 --> 00:30:37.040
- Sorry, I was gonna say that,


00:30:37.040 --> 00:30:39.120
speaking of pip being updated,


00:30:39.120 --> 00:30:41.240
I was trying to use it with pip Tools today,


00:30:41.240 --> 00:30:43.680
and it seems that pip Tools is not working


00:30:43.680 --> 00:30:46.080
with the latest version of PIP, just FYI.


00:30:46.080 --> 00:30:48.480
There's an open issue, I'm sure the team's investigating,


00:30:48.480 --> 00:30:51.440
but for all pip Tools users, they're not alone.


00:30:51.440 --> 00:30:57.120
- Yeah, so the problem, yeah, so I can, yeah.


00:30:57.120 --> 00:30:59.720
So what happened was is pip-tools is using


00:30:59.720 --> 00:31:03.800
the private API of pip and it changed.


00:31:03.800 --> 00:31:04.960
And so pip-tools broke.


00:31:04.960 --> 00:31:06.940
So pip-tools, if you use it,


00:31:06.940 --> 00:31:11.940
you will need to pin to a version of pip 2021 or older


00:31:11.940 --> 00:31:17.120
to work with pip-tools until they figure out


00:31:17.120 --> 00:31:21.060
what they need to do to use the changes


00:31:21.060 --> 00:31:23.360
that pip made to their internal API.


00:31:23.360 --> 00:31:26.440
- And to be fair to the pip-tools team,


00:31:26.440 --> 00:31:29.800
- pip 22 just came out like a handful of days ago.


00:31:29.800 --> 00:31:31.560
So it's really new.


00:31:31.560 --> 00:31:32.400
- Yeah.


00:31:32.400 --> 00:31:35.180
- I'm a huge fan of pip-tools, definitely love it.


00:31:35.180 --> 00:31:40.600
- Well, one other thing actually.


00:31:40.600 --> 00:31:43.080
- Yeah, just one other thing on the new pip release


00:31:43.080 --> 00:31:44.600
for people to be aware of.


00:31:44.600 --> 00:31:47.760
So one thing that happened here is to try to cut down


00:31:47.760 --> 00:31:52.760
on the vendoring, pip stopped vendoring HTML5 lib


00:31:53.180 --> 00:31:58.180
and now use the HTML parser in the standard library.


00:31:58.180 --> 00:32:02.460
And that actually broke a bunch of


00:32:02.460 --> 00:32:06.540
simple repo API indexes.


00:32:06.540 --> 00:32:08.700
For those of you who don't know the simple repo API,


00:32:08.700 --> 00:32:11.340
if you go to any URL in PyPI for a project


00:32:11.340 --> 00:32:15.900
and replace the project part of the URL with simple,


00:32:15.900 --> 00:32:16.820
you'll see what I'm talking about.


00:32:16.820 --> 00:32:19.820
But basically there's a spec that just says,


00:32:19.820 --> 00:32:24.060
There's a PEP that says, hey, write this HTML


00:32:24.060 --> 00:32:26.860
and then packaging installers can read it


00:32:26.860 --> 00:32:28.580
and figure out where to find all the files


00:32:28.580 --> 00:32:30.980
and the projects for something.


00:32:30.980 --> 00:32:34.300
It turns out a lot of people weren't following the spec.


00:32:34.300 --> 00:32:39.300
And so a lot of these indexes broke


00:32:39.300 --> 00:32:42.960
because pip wasn't able to read them anymore


00:32:42.960 --> 00:32:46.580
because it couldn't be parsed as pure HTML.


00:32:46.580 --> 00:32:48.980
They were doing funky things that broke.


00:32:48.980 --> 00:32:52.980
So they, I believe, either have or are planning to roll it back


00:32:52.980 --> 00:32:58.320
with a flag to let you alternatively use HTML5 Lib for now


00:32:58.320 --> 00:33:00.780
with the goal of getting all these projects


00:33:00.780 --> 00:33:03.560
that have broken output, they don't follow the spec,


00:33:03.560 --> 00:33:05.900
to fix themselves so that they can go back


00:33:05.900 --> 00:33:08.560
to not having HTML5 Lib in the box.


00:33:08.560 --> 00:33:13.600
So just a heads up, if you use an alternative package index


00:33:13.600 --> 00:33:16.540
and it suddenly broke, that's why they're working on a fix.


00:33:16.540 --> 00:33:20.260
But I would talk to the project that creates that index for you


00:33:20.260 --> 00:33:21.720
and have them work on making sure


00:33:21.720 --> 00:33:24.860
that that project creates valid HTML5 that


00:33:24.860 --> 00:33:29.060
can be parsed by the HTML parser in the standard library.


00:33:29.060 --> 00:33:29.560
So that--


00:33:29.560 --> 00:33:30.100
>> OK.


00:33:30.100 --> 00:33:33.740
>> --because that'll probably go away in pip 23.


00:33:33.740 --> 00:33:37.160
>> But it's not broken now, right?


00:33:37.160 --> 00:33:39.220
It's just-- it's flagged?


00:33:39.220 --> 00:33:40.420
>> It was broken.


00:33:40.420 --> 00:33:42.900
They didn't realize how much of the world was doing invalid


00:33:42.900 --> 00:33:44.500
HTML for these indexes.


00:33:44.500 --> 00:33:47.600
So I don't know if it's in 22.0.2


00:33:47.600 --> 00:33:49.940
or if it's going to be in the next release.


00:33:49.940 --> 00:33:52.460
But there is an open issue where they're--


00:33:52.460 --> 00:33:54.660
I at least was looking at where they were fixing it.


00:33:54.660 --> 00:33:57.500
Because I got looped in because I have one of my side projects,


00:33:57.500 --> 00:34:01.880
Mouse Bender, that actually wrote some code around this


00:34:01.880 --> 00:34:02.820
originally.


00:34:02.820 --> 00:34:04.700
There's talk about moving up to packaging,


00:34:04.700 --> 00:34:06.860
about a lot of behind-the-scenes stuff


00:34:06.860 --> 00:34:08.540
that people don't need to care about.


00:34:08.540 --> 00:34:09.060
But the--


00:34:09.060 --> 00:34:10.300
[INTERPOSING VOICES]


00:34:10.300 --> 00:34:10.800
Yeah.


00:34:10.800 --> 00:34:11.700
>>No, go ahead.


00:34:11.700 --> 00:34:14.100
>>Well, I was just going to say, so the plan is, I think,


00:34:14.100 --> 00:34:16.960
to add a flag to say use old HTML parser


00:34:16.960 --> 00:34:18.460
or something along those lines for now.


00:34:18.460 --> 00:34:22.000
So you can say, hey, use the HTML5 lib version


00:34:22.000 --> 00:34:25.860
of parsing HTML, but it's just to be clear here,


00:34:25.860 --> 00:34:28.260
there will be a fix, but it's a temporary fix


00:34:28.260 --> 00:34:30.360
'cause people should be getting after their projects


00:34:30.360 --> 00:34:32.220
that create these indexes to do the right thing


00:34:32.220 --> 00:34:34.340
and actually follow the standard.


00:34:34.340 --> 00:34:38.300
- Okay, so as someone that got bit by this,


00:34:38.300 --> 00:34:42.660
because we have an internal PyPI caching server


00:34:42.660 --> 00:34:46.600
that also we store our own stuff on and we don't own it.


00:34:46.600 --> 00:34:49.980
We like, it's a third party thing that we're licensed.


00:34:49.980 --> 00:34:52.280
So I don't know how long it's going to be.


00:34:52.280 --> 00:34:54.940
So hopefully that, hopefully they move quickly,


00:34:54.940 --> 00:34:57.580
but at the same time, hopefully this extra,


00:34:57.580 --> 00:35:01.180
use the old one flag or whatever will work for a while.


00:35:01.180 --> 00:35:04.540
I was a little surprised when I saw the warning pop up


00:35:04.540 --> 00:35:07.060
of like, oh, you're not using a good, you know,


00:35:07.060 --> 00:35:08.100
it's invalid HTML.


00:35:08.100 --> 00:35:10.100
And I'm like, what am I supposed to do about it?


00:35:10.100 --> 00:35:12.580
(laughing)


00:35:12.580 --> 00:35:15.020
- Well, and I don't think the developers were expecting it


00:35:15.020 --> 00:35:18.020
to be so widely broken either, right?


00:35:18.020 --> 00:35:20.500
It's like, what are these projects doing


00:35:20.500 --> 00:35:23.060
that are creating invalid HTML?


00:35:23.060 --> 00:35:23.900
But apparently--


00:35:23.900 --> 00:35:25.340
- Oh, I did it all the time though.


00:35:25.340 --> 00:35:29.280
Like, okay, just to be fair, if it works, it works.


00:35:29.280 --> 00:35:30.780
It's HTML.


00:35:30.780 --> 00:35:31.980
- Yeah, well, and that was the problem, right?


00:35:31.980 --> 00:35:35.940
Is the spec, the PEP that defines it very specifically says


00:35:35.940 --> 00:35:38.300
it must be valid HTML5.


00:35:38.300 --> 00:35:40.540
And I think it was specifically so that it could be parsed


00:35:40.540 --> 00:35:41.460
by the standard library.


00:35:41.460 --> 00:35:43.300
So it also means none of these pages


00:35:43.300 --> 00:35:45.540
could have even been parsed by the standard library.


00:35:45.540 --> 00:35:46.740
So I think that's what happened, right?


00:35:46.740 --> 00:35:48.940
Is people, because people,


00:35:48.940 --> 00:35:50.620
because pip had been using HTML5 lib,


00:35:50.620 --> 00:35:53.180
which is obviously way more lax


00:35:53.180 --> 00:35:54.640
in terms of what it can parse,


00:35:54.640 --> 00:35:56.420
everyone just like, "Oh, okay, it's good enough."


00:35:56.420 --> 00:35:57.700
And didn't realize that the spec


00:35:57.700 --> 00:36:00.660
specifically mandated valid HTML5.


00:36:00.660 --> 00:36:03.020
And so hopefully all these projects that got caught up


00:36:03.020 --> 00:36:05.980
can get a fix out over the next year.


00:36:05.980 --> 00:36:09.940
'Cause as I said, I suspect this will be in until pip 23,


00:36:09.940 --> 00:36:11.780
which will come out in 2023.


00:36:11.780 --> 00:36:14.100
So it's not like it's gonna disappear in a month,


00:36:14.100 --> 00:36:14.920
this flag.


00:36:14.920 --> 00:36:15.820
So we'll let the fix out,


00:36:15.820 --> 00:36:17.820
but hopefully everyone can kind of get caught up


00:36:17.820 --> 00:36:21.460
so that they can get back to not vendoring HTML5.


00:36:21.460 --> 00:36:23.300
- Okay.


00:36:23.300 --> 00:36:25.700
Before we go jump to a joke,


00:36:25.700 --> 00:36:30.700
I want one last extra is for the first time in like 18,


00:36:30.700 --> 00:36:33.500
20 months, I'm not writing a book.


00:36:33.500 --> 00:36:35.980
(laughing)


00:36:35.980 --> 00:36:38.180
I'm no longer writing this book.


00:36:38.180 --> 00:36:39.540
The writing is done.


00:36:39.540 --> 00:36:41.100
The editing is done.


00:36:41.100 --> 00:36:43.860
So it's off to all the rest of the cogs


00:36:43.860 --> 00:36:46.440
that have to go through the process to get it.


00:36:46.440 --> 00:36:48.280
But the ebook right now is really solid.


00:36:48.280 --> 00:36:50.580
So anybody that grabs the ebook now,


00:36:50.580 --> 00:36:53.160
if you've grabbed it before, all the updates are there,


00:36:53.160 --> 00:36:56.120
but this has got all the copy edit changes


00:36:56.120 --> 00:36:59.160
and the final edits, the rest of its layout and stuff


00:36:59.160 --> 00:37:00.640
to try to get the physical book for him.


00:37:00.640 --> 00:37:04.920
So that's coming out sometime this month, maybe, hopefully.


00:37:04.920 --> 00:37:07.120
So that's my hope is by the end of February,


00:37:07.120 --> 00:37:10.360
I'll have a physical copy in my hands.


00:37:10.360 --> 00:37:11.840
- Well, congratulations.


00:37:11.840 --> 00:37:14.560
Everyone who listens to this podcast


00:37:14.560 --> 00:37:16.920
and Testing Code and anywhere else for you,


00:37:16.920 --> 00:37:19.480
know you put a lot of blood, sweat, tears


00:37:19.480 --> 00:37:20.360
and love into that book.


00:37:20.360 --> 00:37:22.000
So congratulations for reaching this point.


00:37:22.000 --> 00:37:24.200
- Well, I just was realizing that my youngest is 12.


00:37:24.200 --> 00:37:26.040
My youngest daughter is 12.


00:37:26.040 --> 00:37:27.520
I spent a year and a half on this book,


00:37:27.520 --> 00:37:29.080
a year and a half on the first edition.


00:37:29.080 --> 00:37:32.480
So I've been writing about Pytest in book form


00:37:32.480 --> 00:37:33.880
for a quarter of her life.


00:37:35.600 --> 00:37:36.740
It's pretty weird.


00:37:36.740 --> 00:37:39.260
Are you ready for a joke?


00:37:39.260 --> 00:37:40.760
- I should thank you for your work, Brian.


00:37:40.760 --> 00:37:42.200
(laughing)


00:37:42.200 --> 00:37:44.280
I'm gonna be ready to physical hobby, hopefully.


00:37:44.280 --> 00:37:46.800
- So one of the goals of the second edition


00:37:46.800 --> 00:37:48.360
was to try to put it in a format


00:37:48.360 --> 00:37:51.300
that would be easier to teach and learn.


00:37:51.300 --> 00:37:54.040
So the next step is I'm gonna work on


00:37:54.040 --> 00:37:57.160
trying to teach people in person


00:37:57.160 --> 00:37:59.440
and through video courses and stuff like that,


00:37:59.440 --> 00:38:02.800
turn this into, 'cause I know a lot of people don't read,


00:38:02.800 --> 00:38:04.420
but you're coders, why don't you read?


00:38:04.420 --> 00:38:06.540
You have to read your code, but still,


00:38:06.540 --> 00:38:08.700
some people don't read books.


00:38:08.700 --> 00:38:10.420
How about something funny?


00:38:10.420 --> 00:38:11.300
- Yes.


00:38:11.300 --> 00:38:13.380
- Today's joke brought to you by Luciana.


00:38:13.380 --> 00:38:15.300
Thank you for finding something funny.


00:38:15.300 --> 00:38:19.380
And we'll add this to the thing.


00:38:19.380 --> 00:38:21.400
So I love this.


00:38:21.400 --> 00:38:26.400
So for people listening, there's a picture of an ocean


00:38:26.400 --> 00:38:28.940
and you've got a really big ship.


00:38:28.940 --> 00:38:30.700
It's called, I don't know what's on the ship.


00:38:30.700 --> 00:38:32.060
It's a big ship.


00:38:32.060 --> 00:38:33.860
- I don't know what you're talking about.


00:38:33.860 --> 00:38:36.460
I don't know, but it says,


00:38:36.460 --> 00:38:38.020
but it looks all official like and everything.


00:38:38.020 --> 00:38:40.480
And it says proper software design.


00:38:40.480 --> 00:38:44.780
And then there's a guy on a surfboard standing up.


00:38:44.780 --> 00:38:46.580
So it's like a wakeboard thing.


00:38:46.580 --> 00:38:47.840
And he's holding an umbrella,


00:38:47.840 --> 00:38:49.980
getting pulled by an umbrella on a surfboard


00:38:49.980 --> 00:38:51.980
and says, whatever I'm doing.


00:38:51.980 --> 00:38:54.260
So it's funny.


00:38:54.260 --> 00:38:57.940
- That's how I feel whenever I'm coding.


00:38:57.940 --> 00:39:02.820
- And sometimes it feels like this going from,


00:39:02.820 --> 00:39:06.300
from the old days of like these huge design documents


00:39:06.300 --> 00:39:09.220
to now, oh, we're doing agile.


00:39:09.220 --> 00:39:11.820
So let's just write some ideas on some Post-it notes


00:39:11.820 --> 00:39:14.380
and stick them on board and run from it with there.


00:39:14.380 --> 00:39:17.740
- If it works, it works, right?


00:39:17.740 --> 00:39:20.940
- Yeah, it's got tests, right?


00:39:20.940 --> 00:39:23.540
Well, I think so.


00:39:23.540 --> 00:39:25.460
It's unit tested, it's 100% coverage.


00:39:25.460 --> 00:39:26.700
It's good, let's ship it.


00:39:26.700 --> 00:39:30.100
So perfect.


00:39:30.100 --> 00:39:30.940
Nice.


00:39:30.940 --> 00:39:34.540
First of all, thank you, Luciana, for joining the show.


00:39:34.540 --> 00:39:36.220
I think it's your first time, right?


00:39:36.220 --> 00:39:39.020
- Yes, it was my first podcast.


00:39:39.020 --> 00:39:40.300
- Awesome. - Participation.


00:39:40.300 --> 00:39:41.340
Thank you for having me,


00:39:41.340 --> 00:39:44.160
and thanks, Brett, for joining last minute.


00:39:44.160 --> 00:39:45.700
(both laughing)


00:39:45.700 --> 00:39:46.580
- Yeah, thanks, Brett.


00:39:46.580 --> 00:39:47.900
It's always good to see you.


00:39:47.900 --> 00:39:50.340
- I'm happy to play the fake Michael for this episode.


00:39:50.340 --> 00:39:51.180
(both laughing)


00:39:51.180 --> 00:39:54.100
- Thanks, everybody, on the stream for showing up,


00:39:54.100 --> 00:39:56.320
and we'll see you all next week.


00:39:56.320 --> 00:39:59.260
Thanks for listening to Python Bytes.


00:39:59.260 --> 00:40:02.060
Follow the show on Twitter via @PythonBytes.


00:40:02.060 --> 00:40:05.180
That's Python Bytes as in B-Y-T-E-S.


00:40:05.180 --> 00:40:08.220
Get the full show notes over at PythonBytes.fm.


00:40:08.220 --> 00:40:12.700
If you have a news item we should cover, just visit PythonBytes.fm


00:40:12.700 --> 00:40:17.180
and click Submit in the nav bar. We're always on the lookout for sharing something cool.


00:40:17.180 --> 00:40:21.740
If you want to join us for the live recording, just visit the website and click Live Stream


00:40:21.740 --> 00:40:24.620
to get notified of when our next episode goes live.


00:40:24.620 --> 00:40:28.140
That's usually happening at noon Pacific on Wednesdays on YouTube.


00:40:28.140 --> 00:40:31.500
This is Brian Okken. On behalf of myself and Michael Kennedy,


00:40:31.500 --> 00:40:35.260
thank you for listening and sharing this podcast with your friends and colleagues.

