WEBVTT

00:00:00.001 --> 00:00:04.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.640 --> 00:00:10.060
This is episode 269, recorded February 2nd, 2022.

00:00:10.060 --> 00:00:11.340
And I'm Brian Okken.

00:00:11.340 --> 00:00:13.400
And I'm Luciana.

00:00:13.400 --> 00:00:14.700
And?

00:00:14.700 --> 00:00:16.100
I'm Brett Cannon.

00:00:16.100 --> 00:00:17.400
And we have Brett.

00:00:17.400 --> 00:00:21.200
So we invited Luciana on and we decided to have Brett on also.

00:00:21.200 --> 00:00:23.360
So we got to have some fun.

00:00:23.360 --> 00:00:29.340
Michael's actually gone this week, but I hope he enjoys listening.

00:00:29.340 --> 00:00:30.300
So hi, Michael.

00:00:30.300 --> 00:00:33.100
And we'll talk to him next week.

00:00:33.100 --> 00:00:40.000
So before we get into the topics, though, I think people hopefully know who Brett is.

00:00:40.000 --> 00:00:42.300
Brett Cannon, you've been on the show before.

00:00:42.300 --> 00:00:43.820
A couple times.

00:00:43.820 --> 00:00:44.540
Yeah.

00:00:44.540 --> 00:00:47.060
Thank you very much for having me back spontaneously.

00:00:47.060 --> 00:00:48.900
Spontaneously.

00:00:48.900 --> 00:00:52.540
Like minutes ago, we said, hey, we should get Brett on.

00:00:52.540 --> 00:00:54.740
So Luciana, welcome to the show.

00:00:54.740 --> 00:00:56.780
Can you tell people a little bit about who you are?

00:00:56.780 --> 00:00:57.940
Thank you.

00:00:57.940 --> 00:00:58.280
Yes.

00:00:58.680 --> 00:01:00.440
I am, well, Luciana.

00:01:00.440 --> 00:01:04.400
I work with Brett on the Python extension for Visual Studio Code.

00:01:04.400 --> 00:01:05.780
But I'm a program manager.

00:01:05.780 --> 00:01:09.160
And, yeah, I'm very excited to be here on the show.

00:01:09.160 --> 00:01:16.240
I was telling Brian that I used to listen to Python Bytes going to work back when we worked on offices.

00:01:16.240 --> 00:01:16.580
Went to work.

00:01:19.900 --> 00:01:22.020
So it's really, really cool to be here.

00:01:22.020 --> 00:01:23.460
Yeah.

00:01:23.460 --> 00:01:24.100
Nice.

00:01:24.100 --> 00:01:25.460
Well, thanks.

00:01:25.460 --> 00:01:27.200
I'm glad to have you here.

00:01:27.200 --> 00:01:29.460
So let's jump into the topics.

00:01:29.460 --> 00:01:34.100
We have an abbreviated list of topics, but we'll make it fun anyway.

00:01:34.860 --> 00:01:38.880
I'm going to start with Rich CLI.

00:01:38.880 --> 00:01:41.380
So, Will McGoogan.

00:01:43.580 --> 00:01:46.260
It seems like we talk about him every show.

00:01:46.260 --> 00:01:48.040
But this is cool.

00:01:48.040 --> 00:01:50.460
So I was like, oh, I'll try it out first.

00:01:50.460 --> 00:01:51.900
And I'm already hooked.

00:01:51.900 --> 00:01:57.680
So Rich CLI is, it seems lame if I describe it.

00:01:57.680 --> 00:01:58.940
So you install it.

00:01:59.040 --> 00:02:03.120
I installed it with PipX because I just want to use it everywhere.

00:02:03.120 --> 00:02:07.360
And then what it does is it does, like, pretty printing of stuff.

00:02:07.360 --> 00:02:08.800
Like, you can give it a file.

00:02:08.800 --> 00:02:12.000
And basically, that's what I use it for.

00:02:12.000 --> 00:02:12.960
Maybe it does other stuff.

00:02:12.960 --> 00:02:18.060
But you can give it a file, like, example.py or example.markdown or something.

00:02:18.060 --> 00:02:24.240
And it will do the rich printing, pretty printing, right on your screen in the terminal.

00:02:24.240 --> 00:02:28.240
That seems like not that big of a deal, right?

00:02:28.240 --> 00:02:30.700
But it is so cool because it's all, like, nice colors.

00:02:30.700 --> 00:02:32.240
And you can have themes.

00:02:32.240 --> 00:02:37.020
And I used, what, you can do pretty printing of JSON.

00:02:37.020 --> 00:02:40.500
So it will format your JSON for you without having to reformat it.

00:02:40.500 --> 00:02:43.820
You can do a dash M flag for markdown.

00:02:43.820 --> 00:02:45.760
I've been doing that to see my markdown.

00:02:45.760 --> 00:02:49.780
And it does some cool stuff with markdown.

00:02:49.780 --> 00:02:54.180
Although, supposedly, like, with Python files and C++ files and stuff,

00:02:54.180 --> 00:02:57.020
it's going to do syntax highlighting based on extension.

00:02:57.440 --> 00:03:01.200
I'm wondering why I got to pass in a dash M for markdown.

00:03:01.200 --> 00:03:03.900
It seems like a dash MD should work fine.

00:03:03.900 --> 00:03:05.120
But anyway.

00:03:05.120 --> 00:03:07.060
That's actually going to be my immediate question was,

00:03:07.060 --> 00:03:09.280
why do you have to specify the dash M just for markdown?

00:03:10.720 --> 00:03:17.200
And then, like, and then there's some flags that's cool, like, whether or not you want to use it with pipes.

00:03:17.200 --> 00:03:26.520
So you can, if it's pipe it to something, it'll strip out the formatting stuff, like the color codes and whatever.

00:03:26.520 --> 00:03:28.240
But you can force that to be on.

00:03:28.820 --> 00:03:33.660
Well, I wanted to, I tried to use it with a big file, and it just flew past me.

00:03:34.380 --> 00:03:40.020
And then, so I tried to pipe it to more or less, and it stripped out the formatting.

00:03:40.020 --> 00:03:45.100
And so, well, I tried to fix that, and then more and less don't handle that.

00:03:45.100 --> 00:03:46.920
And so, and this was just yesterday.

00:03:46.920 --> 00:03:52.640
I'm like, kind of really be cool if Rich CLI has supported paging within it.

00:03:53.020 --> 00:03:58.020
And so today, Will said, hey, I added paging to Rich CLI.

00:03:58.020 --> 00:03:59.840
So Rich CLI now has paging.

00:03:59.840 --> 00:04:00.960
Of course he did.

00:04:00.960 --> 00:04:04.860
Like, within a day.

00:04:04.860 --> 00:04:07.280
So anyway, pretty cool projects.

00:04:07.280 --> 00:04:09.640
Have either of you checked this out yet?

00:04:09.640 --> 00:04:11.920
I did the exact same thing you did.

00:04:11.920 --> 00:04:15.340
I used PipX and installed Rich CLI yesterday.

00:04:15.340 --> 00:04:22.200
One thing is, I will say, I use a, I've actually been using a replacement.

00:04:22.540 --> 00:04:25.760
So this is kind of like a replacement for the cat tool on Unix, right?

00:04:25.760 --> 00:04:33.580
And I've been using an alternative called bat, B-A-T, that's implemented in Rust, and has

00:04:33.580 --> 00:04:36.760
a lot of this as well in terms of color syntax and stuff.

00:04:36.760 --> 00:04:43.960
But I'm willing to bet Rich is, Rich, I'm willing to bet Will's going to move a bit faster.

00:04:43.960 --> 00:04:49.300
So I'm just going to probably switch over to using Rich CLI over bat and just see where

00:04:49.300 --> 00:04:49.680
this goes.

00:04:49.680 --> 00:04:52.500
But I mean, come on, Will even made the output.

00:04:52.500 --> 00:04:53.100
It looked great.

00:04:53.100 --> 00:04:54.360
Yeah.

00:04:54.360 --> 00:04:56.520
Sorry for the output for the help.

00:04:56.520 --> 00:04:57.440
It looks phenomenal.

00:04:57.440 --> 00:05:07.420
One of the things that I noticed was that the default theme, the coloring, didn't look quite

00:05:07.420 --> 00:05:09.540
right on the black background that I was using.

00:05:09.540 --> 00:05:14.440
So I just, I exactly, I was using it for cat.

00:05:14.440 --> 00:05:21.420
So I just aliased my cat to use Rich with the Monokai format turned on.

00:05:21.420 --> 00:05:24.900
So Luciana, would you use this for anything?

00:05:24.900 --> 00:05:25.880
Yeah.

00:05:25.880 --> 00:05:26.980
I was going to say I'm behind.

00:05:26.980 --> 00:05:27.880
I haven't tried it yet.

00:05:28.020 --> 00:05:32.120
But once I saw the amazing things they have there, it's quite a few.

00:05:32.120 --> 00:05:35.080
So I was excited to try it out.

00:05:35.080 --> 00:05:36.640
So we'll do it today, hopefully.

00:05:36.640 --> 00:05:38.500
Yeah.

00:05:38.500 --> 00:05:38.900
Cool.

00:05:40.160 --> 00:05:44.160
Well, let's switch over to debugging.

00:05:44.160 --> 00:05:45.540
Yeah.

00:05:45.760 --> 00:05:51.640
So I guess most folks, I don't know, at least I, when I started learning Python, I used to debug

00:05:51.640 --> 00:05:54.200
using print statements, which is like no shame in that.

00:05:54.200 --> 00:05:55.180
It works very well.

00:05:55.180 --> 00:05:58.720
I still do that when it's like for real quick things.

00:05:58.720 --> 00:06:03.860
But I wanted to bring up this awesome tool that we have, the bug pie.

00:06:03.860 --> 00:06:05.080
It's a debugger for Python.

00:06:05.080 --> 00:06:07.420
And you can use it like as a CLI tool.

00:06:07.420 --> 00:06:10.280
You can also just import it and set breakpoints normally.

00:06:10.740 --> 00:06:13.560
I'm a big fan of UI debugging.

00:06:13.560 --> 00:06:19.600
So I actually prefer to use it built into the Python extension for VS Code, which is the

00:06:19.600 --> 00:06:21.020
thing that we work on every single day.

00:06:21.020 --> 00:06:27.800
So yeah, I wanted to bring up a few features that are really, really cool and I find very

00:06:27.800 --> 00:06:32.640
helpful and that save up, helps me save up a lot of time when I'm debugging code.

00:06:32.640 --> 00:06:37.080
So the first one of them is kind of like conditional breakpoints.

00:06:37.080 --> 00:06:39.400
Yeah.

00:06:39.400 --> 00:06:39.640
Sorry.

00:06:39.640 --> 00:06:39.900
Go ahead.

00:06:40.540 --> 00:06:41.320
No, no, go ahead.

00:06:41.320 --> 00:06:41.800
Neat.

00:06:41.800 --> 00:06:43.320
Yeah, it's super neat.

00:06:43.320 --> 00:06:48.320
And this conditional breakpoints is something that I bring up because I guess when you're

00:06:48.320 --> 00:06:53.500
trying out debugging for the first time using the UI, you set up a breakpoint and then you

00:06:53.500 --> 00:06:57.980
hit it there and then you always reload the window or reload the bugger, sorry, to hit that

00:06:57.980 --> 00:06:58.560
breakpoint again.

00:06:58.560 --> 00:07:02.340
And then you keep stepping over into a hit to condition that you want.

00:07:02.340 --> 00:07:06.300
And in this GIF there, they have an example on TypeScript, but it works on Python files as

00:07:06.300 --> 00:07:08.000
well once you install the Python extension.

00:07:08.260 --> 00:07:14.720
But basically you added the breakpoint to insert a certain condition so that the bugger will

00:07:14.720 --> 00:07:17.980
only stop when that expression is met or the condition is met.

00:07:18.040 --> 00:07:19.820
So one example there is hit count.

00:07:19.820 --> 00:07:25.820
So you can imagine if you have like a for loop and you really want to stop when, for example,

00:07:25.820 --> 00:07:27.820
after 10 iterations of that loop.

00:07:27.820 --> 00:07:31.960
So you don't want to stop on that breakpoint and hit the step over 10 times.

00:07:31.960 --> 00:07:35.680
You just want to stop when it hits 10 times.

00:07:35.680 --> 00:07:38.400
So you can do that with the hit point.

00:07:38.400 --> 00:07:40.460
You can also add expressions.

00:07:40.460 --> 00:07:47.400
So if you know like, oh, I want this debugger to stop only when this variable gets the value

00:07:47.400 --> 00:07:50.460
of, I don't know, five, then you can also do that.

00:07:50.460 --> 00:07:52.240
And it's pretty cool.

00:07:52.240 --> 00:07:54.240
It saves up a lot of time.

00:07:54.240 --> 00:07:56.920
And you can also do log points instead.

00:07:56.920 --> 00:08:01.180
If you're not interested in breaking the execution, just want to make sure that line was executed.

00:08:01.180 --> 00:08:06.300
So it prints out on the output that, hey, this is, we hit that point.

00:08:06.300 --> 00:08:07.400
This is like a log point.

00:08:07.400 --> 00:08:10.020
So it doesn't really break anything.

00:08:10.020 --> 00:08:12.140
But it's very informative.

00:08:12.140 --> 00:08:13.840
Cool.

00:08:13.840 --> 00:08:18.480
So this is, this is an extension for, for VS Code.

00:08:18.480 --> 00:08:19.760
Yes.

00:08:19.760 --> 00:08:22.720
I believe most IDEs support that same feature.

00:08:22.720 --> 00:08:29.120
But it's a feature that I always recommend folks to look for in their IDEs or editors because

00:08:29.120 --> 00:08:30.580
it does save up a lot of time.

00:08:30.580 --> 00:08:34.060
So, so to be clear about the tech stack on this.

00:08:34.060 --> 00:08:36.000
So there's a couple of layers to this.

00:08:36.000 --> 00:08:40.900
So at the bottom layer is PyDevD by Fabio Zdrasny.

00:08:40.900 --> 00:08:49.180
Key, we have him on contract as a consultant to do anything we need to have get fixed and stuff

00:08:49.180 --> 00:08:50.240
and just support the project.

00:08:50.240 --> 00:08:56.680
Because on top of this, we have another project that we have called DebugPy, which implements

00:08:56.680 --> 00:08:59.300
what's called the DebugAdapter Protocol or DAP.

00:08:59.820 --> 00:09:05.360
It's a, meant to be a language agnostic protocol for debuggers to talk to editors.

00:09:05.360 --> 00:09:06.740
It comes out of VS Code.

00:09:06.740 --> 00:09:08.440
It's used by Visual Studio as well.

00:09:08.440 --> 00:09:10.860
And actually, it's now used by Jupyter.

00:09:10.860 --> 00:09:14.480
This is how Jupyter was able to launch recently with debugger support.

00:09:15.140 --> 00:09:16.360
Because they actually run DebugPy.

00:09:16.360 --> 00:09:19.800
And then on top of that, we have support.

00:09:19.800 --> 00:09:23.260
Because we're a VS Code extension, we support the debug adapter.

00:09:23.260 --> 00:09:27.720
So we ship DebugPy in box right now for supporting this.

00:09:27.720 --> 00:09:35.820
Although we are talking about breaking the extension, breaking debugging out to its own extension so that we can actually update it at a better cadence with DebugPy.

00:09:36.180 --> 00:09:40.600
Because we can do platform-specific V6s now, extensions for VS Code.

00:09:40.600 --> 00:09:43.920
So we'll be able to shrink that down a bit for our users.

00:09:45.140 --> 00:09:55.760
So is there like a tutorial somewhere that has like all of the cool Python extensions that I need for VS Code to get VS Code with Python to work really great?

00:09:55.760 --> 00:09:56.940
Yeah.

00:09:56.940 --> 00:09:59.200
We have our Get Started tutorial.

00:09:59.200 --> 00:10:01.300
It has like, it doesn't have a lot of extensions.

00:10:01.300 --> 00:10:04.920
So there's definitely more extensions that I find to be personally cool.

00:10:04.920 --> 00:10:09.680
Maybe we could have a blog post about this and like cool extensions for Python, specifically in VS Code.

00:10:09.680 --> 00:10:10.860
Because there are some of them.

00:10:10.860 --> 00:10:18.640
I think Don Giamani, he's the one who created the Python extension before it was a Microsoft thing.

00:10:18.640 --> 00:10:20.480
And Microsoft Hirem and everything.

00:10:20.480 --> 00:10:26.000
So he has one that I always talk about, which is the Python Environments Manager extension.

00:10:26.000 --> 00:10:31.320
It just displays the environments that it can find on your machine and what packages are installed there.

00:10:31.320 --> 00:10:33.060
It's kind of like an environment viewer.

00:10:33.060 --> 00:10:34.340
And it's pretty cool.

00:10:34.340 --> 00:10:36.400
It's one that I always tell people about.

00:10:36.400 --> 00:10:42.620
You know, a deep dive into all the useful extensions to add would be a great testing code episode.

00:10:42.620 --> 00:10:43.560
Just saying.

00:10:43.560 --> 00:10:45.580
I love that idea.

00:10:45.580 --> 00:10:47.020
I like it.

00:10:47.020 --> 00:10:48.400
Okay.

00:10:48.400 --> 00:10:55.620
Well, speaking of plugging stuff, I want to take a moment to thank our sponsor.

00:10:55.620 --> 00:10:59.660
So this episode is sponsored by Datadog.

00:10:59.660 --> 00:11:03.440
Datadog is a real-time monitoring platform that unifies

00:11:03.760 --> 00:11:06.820
metrics, traces, and logs into one tightly integrated platform.

00:11:06.820 --> 00:11:13.820
Datadog APM empowers developer teams to identify anomalies, resolve issues, and improve application performance.

00:11:13.820 --> 00:11:23.640
Begin collecting stack traces, visualizing them as flame graphs and organizing them into profile types such as CPU, IO, and more.

00:11:24.840 --> 00:11:25.840
Plus Datadog APM.

00:11:25.840 --> 00:11:26.900
Plus Datadog APM's live search.

00:11:26.900 --> 00:11:35.740
So you can perform searches across full streams of ingested traces generated by your application over the last 15 minutes.

00:11:35.740 --> 00:11:39.860
Try Datadog APM free for a 14-day free trial.

00:11:39.860 --> 00:11:41.900
And Datadog will send you a free T-shirt.

00:11:43.900 --> 00:11:46.380
And actually, I have one of these purple T-shirts, and I love it.

00:11:46.380 --> 00:11:53.800
So visit pythonbytes.fm/datadog, or just click on the link in your podcast player show notes to get started.

00:11:53.800 --> 00:11:54.940
Awesome.

00:11:57.760 --> 00:11:58.820
I got to pay the bills.

00:11:58.820 --> 00:12:02.620
So where are we at now?

00:12:02.620 --> 00:12:04.120
We're back on me again.

00:12:04.120 --> 00:12:09.080
Unless, Brett, you got something right out of the blue you want to talk about?

00:12:09.080 --> 00:12:12.120
I'll put you on the spot.

00:12:12.120 --> 00:12:13.800
That's okay.

00:12:14.320 --> 00:12:18.220
I believe you've talked about exception groups on the podcast already.

00:12:18.220 --> 00:12:20.020
I don't.

00:12:20.020 --> 00:12:20.620
Oh, yeah.

00:12:20.620 --> 00:12:21.140
I think so.

00:12:21.140 --> 00:12:21.840
Yeah.

00:12:21.840 --> 00:12:25.880
So just because Datadog sponsor actually cares about trace packs and stuff.

00:12:25.880 --> 00:12:32.540
One interesting thing that's coming up in terms of a PEP, it has not been given to the steering council yet.

00:12:32.540 --> 00:12:39.880
But there's actually a PEP coming up that's going to add a Dunder notes field potentially to exceptions.

00:12:41.060 --> 00:12:57.860
This actually came out of the exception group work because Zach from Hypothesis was working with it over on that side and realized that it would be convenient to be able to kind of just basically, literally, the name says, add a note to extensions to kind of help explain why this came about.

00:12:57.860 --> 00:13:08.600
And so there's a PEP coming that's going to basically just allow libraries and stuff that work with exceptions to just attach a little note saying, this is why this happened.

00:13:08.740 --> 00:13:19.020
More than just a little thing, especially for exception groups, you can kind of get kind of big and murky by having a single note added to it to help explain why this came about.

00:13:19.020 --> 00:13:25.060
It's hopefully going to help make it easier for users to understand a bit more why something happened.

00:13:25.060 --> 00:13:27.140
So that's pretty neat.

00:13:27.140 --> 00:13:27.980
I like it.

00:13:27.980 --> 00:13:28.800
Nice.

00:13:30.120 --> 00:13:37.200
I got some feedback recently that I'm not covering enough test stuff on Python bytes.

00:13:37.200 --> 00:13:42.760
So I'm going to try to I'm going to try to try to solve that.

00:13:42.760 --> 00:13:48.120
I'm not going to cover test of every week, but I've got a test thing this week that I'm pretty excited about.

00:13:48.120 --> 00:13:51.980
So Simon Willison, great guy.

00:13:52.180 --> 00:13:55.580
He wrote an article called documenting unit tests.

00:13:55.580 --> 00:13:57.640
And this.

00:13:57.640 --> 00:13:59.900
Wow, it's old.

00:13:59.900 --> 00:14:01.080
It came out in 2018.

00:14:01.080 --> 00:14:02.300
I just noticed it.

00:14:02.300 --> 00:14:04.180
So, yeah, there's the Internet for you.

00:14:04.180 --> 00:14:08.400
But it's like it's a super cool idea.

00:14:08.400 --> 00:14:13.940
So the idea is we've got tests like pytest and other test runners.

00:14:13.940 --> 00:14:14.680
You can do anything.

00:14:15.040 --> 00:14:18.140
He's using pytest to test your source code.

00:14:18.140 --> 00:14:19.120
But why not?

00:14:19.120 --> 00:14:21.900
And Python has all these introspection things you can do.

00:14:21.900 --> 00:14:36.680
So he's using introspection to look at the code and then introspection to look at the documents with with his test code and then make some make sure that there's some items that are definitely in the docs.

00:14:36.940 --> 00:14:47.080
As an example, so in this, this is example in the in the doc, in the blog post is mentoring data, his project data set.

00:14:47.080 --> 00:14:49.380
And so the test for this is right there.

00:14:49.380 --> 00:14:50.880
So you can go take a look at what he's doing.

00:14:50.880 --> 00:14:53.940
But he takes a look at the repo.

00:14:53.940 --> 00:15:00.600
And for instance, for all, if he adds a config option, he's got a test to make sure that the config option gets documented.

00:15:00.600 --> 00:15:01.360
That's cool.

00:15:02.120 --> 00:15:05.820
So it's just tests or fail if he forgets to document a new option.

00:15:05.820 --> 00:15:10.860
Also, plug in hooks and different views within data set.

00:15:10.860 --> 00:15:16.260
They all have to make sure that he has special the views like he wants special pages for each view.

00:15:16.260 --> 00:15:18.020
So it makes sure that there's a page there.

00:15:18.020 --> 00:15:21.540
So I just there's a couple neat things here.

00:15:21.540 --> 00:15:25.620
Just the concept of using tests to make sure that there's things documented.

00:15:26.260 --> 00:15:31.040
It doesn't tell he makes a comment that it's not telling like a lot of tests.

00:15:31.040 --> 00:15:38.620
It's not telling you that the documents are good or documented well, but that they're documented at all, which is which is good.

00:15:38.620 --> 00:15:43.600
And same with our code tests don't necessarily tell you that your code is perfect.

00:15:43.600 --> 00:15:45.020
It's just that they're tested.

00:15:45.780 --> 00:15:51.080
The other thing that I wanted to point out about this is there's some nice use of features of of py tests.

00:15:51.080 --> 00:15:54.160
So there's a nice use of fixtures and parameterization.

00:15:54.160 --> 00:15:57.700
So he's got like the views, for instance.

00:15:57.700 --> 00:16:10.060
He goes out and looks at generate like goes and gets a list of views from the code and then use that list to have a generated test to make sure that each of those views is tested or is documented.

00:16:10.900 --> 00:16:12.060
It's a nice idea.

00:16:12.060 --> 00:16:17.540
I've been trying to do that sort of generated generated parameter lists.

00:16:17.540 --> 00:16:23.820
I'm trying to do that more in my code because it it's just kind of a cool idea to generate your own test cases.

00:16:23.820 --> 00:16:26.660
So anyway, good job, Simon.

00:16:26.660 --> 00:16:33.700
Yeah, as someone who spends more time reading code and writing code, I definitely appreciate this initiative.

00:16:33.700 --> 00:16:37.180
It's very much better to have documented code out there.

00:16:38.700 --> 00:16:45.320
Well, a combination of like making sure that the test, the documents are tested or things are covered.

00:16:45.320 --> 00:16:57.200
And then also, I think a few episodes ago, we talked about a project projects using generating documents themselves.

00:16:57.200 --> 00:17:04.600
So like, for instance, instead, if you're going to plop your help text in your document, don't copy and paste it.

00:17:04.600 --> 00:17:06.700
Use code to generate that.

00:17:06.700 --> 00:17:10.280
And then it's always going to be correct if you got it in your build system.

00:17:10.280 --> 00:17:12.440
So nice ideas.

00:17:13.740 --> 00:17:15.600
And it was about using cog, right?

00:17:15.600 --> 00:17:17.000
Yeah, that was it.

00:17:17.000 --> 00:17:17.880
Cog, I forgot.

00:17:17.880 --> 00:17:19.960
Yeah.

00:17:19.960 --> 00:17:30.660
And what I really love about that is when I came across cog a long time ago, I thought, I got to have a use for this, but I can't think of it.

00:17:30.780 --> 00:17:43.200
But this is the perfect use because we often do that within our little readme or something is just to plop a little example of code using your tool, whatever library you have.

00:17:43.200 --> 00:17:45.540
So having cog generate that for you is great.

00:17:45.540 --> 00:17:48.300
So I think I need to go back and do it.

00:17:48.340 --> 00:17:53.020
So I've got a little toy project called cards that I use for teaching testing.

00:17:53.020 --> 00:17:58.240
And I changed the interface for it for layout reasons.

00:17:58.240 --> 00:18:03.360
The tables that I was using didn't show up in e-books very well.

00:18:03.360 --> 00:18:08.520
So I switched the table format, but then I forgot to change the readme.

00:18:08.520 --> 00:18:12.760
But if I had cog in place, I would already be doing it.

00:18:12.760 --> 00:18:14.240
So it's neat.

00:18:14.380 --> 00:18:20.600
My first thought was to write tests to make sure that the output in my readme was the same as the code.

00:18:20.600 --> 00:18:24.160
But I think a better idea is to just have the readme generated.

00:18:24.160 --> 00:18:27.640
So, I mean, either one works, but both are good ideas.

00:18:27.640 --> 00:18:29.140
Yeah.

00:18:29.140 --> 00:18:37.080
And to tie this back to this point, Simon's the one that actually started the trend on Twitter of everyone using cog to use this on their readme.

00:18:37.080 --> 00:18:38.580
At least that's how I first came across it.

00:18:38.580 --> 00:18:40.780
And then I subsequently saw multiple people do it.

00:18:40.780 --> 00:18:42.880
And then I finally had the same reaction you had.

00:18:42.940 --> 00:18:45.660
Brian's like, oh, yeah, I've been looking for a reason to use cog for ages.

00:18:45.660 --> 00:18:46.540
I never quite had one.

00:18:46.540 --> 00:18:47.520
I was like, this is a great one.

00:18:47.520 --> 00:18:55.040
So I went and updated the readme for the Python launcher to use this to generate all the URLs for downloading the built binaries for it.

00:18:55.040 --> 00:18:56.280
So it's great.

00:18:56.280 --> 00:18:58.580
Gulf binaries?

00:18:58.580 --> 00:18:59.700
Built.

00:18:59.700 --> 00:19:01.100
Built binaries.

00:19:01.100 --> 00:19:01.520
Okay.

00:19:01.520 --> 00:19:01.760
Yes.

00:19:01.760 --> 00:19:06.000
Because I tried to build the launcher for like a bazillion different platforms.

00:19:08.600 --> 00:19:12.860
And I'm grateful for that because I'm using the launcher like almost every day now.

00:19:12.860 --> 00:19:13.760
Oh, fantastic.

00:19:13.760 --> 00:19:15.120
We are.

00:19:15.120 --> 00:19:15.880
Thank you, Brett.

00:19:15.880 --> 00:19:23.580
Well, so let's pop over to talking about ourselves.

00:19:23.580 --> 00:19:26.940
Oh, that was such a good.

00:19:26.940 --> 00:19:27.420
Wow.

00:19:27.420 --> 00:19:28.200
I'm impressed.

00:19:28.200 --> 00:19:28.840
Yes.

00:19:30.280 --> 00:19:31.540
So this is a 7373 self type.

00:19:31.540 --> 00:19:36.020
I heard from, well, Brett Cannon there that it has been recently accepted.

00:19:36.020 --> 00:19:41.460
And it's interesting for me because I'm now learning more about types in Python.

00:19:41.460 --> 00:19:43.600
I'm very new to it, admittedly.

00:19:43.600 --> 00:19:51.840
And I thought it was interesting because, well, adds this way to another thing methods that return an instance of their class.

00:19:52.280 --> 00:19:57.380
And they give a very cool example there of a class or shape and then we have circle.

00:19:57.380 --> 00:19:58.420
Then here it's for shape.

00:19:58.420 --> 00:20:02.560
And then shape has this method called set scale.

00:20:02.560 --> 00:20:05.400
And then the type that returns is shape.

00:20:05.400 --> 00:20:07.720
And because it returns self.

00:20:07.720 --> 00:20:11.540
And for circle, it returns self as well.

00:20:11.540 --> 00:20:12.520
So it's a type circle.

00:20:12.700 --> 00:20:26.860
And then it shows like there are some, for example, editors that may throw in error when you call circle set scale, which is a method from shape and then set radius, which is something from circle.

00:20:26.860 --> 00:20:37.160
But once you call them, it will say error because shape doesn't have this method that is specific to circle.

00:20:37.600 --> 00:20:43.860
So to kind of like have this better way to frame that would be to return self.

00:20:43.860 --> 00:20:45.100
And it was accepted.

00:20:45.100 --> 00:20:46.920
And it's very interesting.

00:20:46.920 --> 00:20:50.860
I feel like it seems very clean to me and a very good solution.

00:20:50.860 --> 00:20:53.400
So I'm personally excited that it was accepted.

00:20:53.400 --> 00:20:55.740
It was very well explained as well.

00:20:55.740 --> 00:20:57.180
And that was real.

00:20:58.340 --> 00:21:13.320
For people on the podcast who can't see what Brian's scrolling through, basically, think of capital S self as the return type for all those class methods you write that construct an instance of your object.

00:21:13.320 --> 00:21:16.320
This is what this is built for, right?

00:21:16.320 --> 00:21:17.100
It's fantastic.

00:21:17.200 --> 00:21:30.260
If you have the from whatever method, class method on your class to construct that class from something else, you'd now have a return self with a capital S versus specifying the exact class that would have returned.

00:21:30.260 --> 00:21:43.440
So you don't have to worry about what that's going to look like and having to worry about the spelling or any of that forward declaration problems you can have if you don't do from Dunder future import annotations, right?

00:21:43.540 --> 00:21:45.920
Where it's like, oh, I'm referring to a name that doesn't exist yet.

00:21:45.920 --> 00:21:49.720
And Python throws a fit because that object doesn't exist yet by that name.

00:21:49.720 --> 00:21:52.420
So it solves a couple problems like that.

00:21:52.420 --> 00:21:57.380
But it's it's really basically if you write class methods that construct instances of that class.

00:21:57.380 --> 00:21:58.260
It's great.

00:21:58.260 --> 00:22:03.400
Well, I don't, but I probably will now when this comes out.

00:22:03.400 --> 00:22:07.340
So is this is this part of 3.11?

00:22:07.340 --> 00:22:07.840
Do we know?

00:22:07.840 --> 00:22:08.620
3.11, right?

00:22:08.620 --> 00:22:08.940
Yes.

00:22:08.940 --> 00:22:09.900
Nice.

00:22:09.900 --> 00:22:10.840
Yeah.

00:22:10.980 --> 00:22:22.780
So you can probably get that probably today, if not in the near future from the typing extensions package, which kind of tries to do a back port and forward port of anything in the typing world.

00:22:22.780 --> 00:22:25.800
That's experimental or has been landed, but not in a release yet.

00:22:25.800 --> 00:22:28.420
And I believe the type checkers.

00:22:28.420 --> 00:22:32.220
I don't know if they all support it yet, but I'm sure very shortly they will support this.

00:22:32.220 --> 00:22:34.600
So you can you can get to it today.

00:22:35.240 --> 00:22:44.420
And then we get we keep people that are writing tools like flake and black on their toes, catching up with all these changes.

00:22:44.420 --> 00:22:46.940
Well, luckily, it won't hit them because it's all typing.

00:22:46.940 --> 00:22:50.100
So just strings to black.

00:22:50.100 --> 00:22:51.540
And I don't think flakey don't care.

00:22:51.540 --> 00:23:01.980
But but like my pi, pi right slash pilance, pi type, pyre, all those type checkers are the ones that have to get updated for this.

00:23:01.980 --> 00:23:05.220
But they were all in on the discussion of even proposing this.

00:23:05.220 --> 00:23:07.180
Nice.

00:23:07.180 --> 00:23:10.720
But is that we repeat that?

00:23:10.720 --> 00:23:17.020
So the all these these people writing these tools were involved with this, these sorts of type processes.

00:23:17.020 --> 00:23:17.840
Yeah.

00:23:17.940 --> 00:23:30.680
So the way typically decisions around typing happen, especially from a static typing perspective, not I don't want to make statements on pydantics part in the dynamic typing world, because there's kind of two parts to typing.

00:23:30.680 --> 00:23:30.920
Right.

00:23:30.920 --> 00:23:32.360
There's the general typing as in.

00:23:32.360 --> 00:23:34.280
Oh, there's the concept of typing now in Python.

00:23:34.280 --> 00:23:36.700
But there's the people who do static typing.

00:23:36.700 --> 00:23:37.180
Right.

00:23:37.180 --> 00:23:44.520
And that's the kind of thing where you add your type annotations, your type hints, and you run a tool later that somehow reads them offline, as it were.

00:23:44.680 --> 00:23:45.080
Right.

00:23:45.080 --> 00:23:47.380
Like my pi or pi right or whatever.

00:23:47.380 --> 00:23:49.560
And then there's the dynamic typing folks.

00:23:49.560 --> 00:23:52.860
That's like pydantic where during runtime, they actually look at the annotations.

00:23:52.860 --> 00:23:58.020
From the static typing perspective, there is something called the typing sig.

00:23:58.020 --> 00:23:58.920
It's a mailing list.

00:23:58.920 --> 00:24:10.500
And all the major static type checkers all work there together to try to figure out where they want to take things and kind of what gaps there are in terms of typing.

00:24:10.500 --> 00:24:13.480
Basically, how can they move typing forward in Python?

00:24:13.480 --> 00:24:18.800
It's also a place people can go to ask for help if they have a generic typing question that isn't too tool specific.

00:24:18.800 --> 00:24:28.320
But to answer your direct question, Brian, the tools that are involved there, which are basically all the type checkers, static type checkers that I know of.

00:24:28.320 --> 00:24:35.700
So there's py write, which underlines py lance, which is what we use for our completions in VS Code.

00:24:35.700 --> 00:24:37.000
There's my pi.

00:24:37.000 --> 00:24:40.620
There is pi type that comes from Google.

00:24:40.900 --> 00:24:43.000
And then there's py that comes from meta.

00:24:43.000 --> 00:24:46.120
Okay.

00:24:46.120 --> 00:24:48.440
Wow.

00:24:48.440 --> 00:24:49.320
Dizzying.

00:24:49.320 --> 00:24:50.700
Yeah.

00:24:50.700 --> 00:24:55.260
Although, I mean, one of the nice things about all the peps, right, is this is all backed by specs.

00:24:55.260 --> 00:24:59.580
So there's not a lot of crazy deviation, as it were, from the semantics.

00:24:59.580 --> 00:25:01.560
It's more of a bug if someone disagrees.

00:25:01.560 --> 00:25:04.300
So they're all pretty consistent.

00:25:04.300 --> 00:25:06.380
But some of them do a bit more like inferencing.

00:25:06.540 --> 00:25:11.680
Like py type does more like runtime inferencing and other inferencing to try to kind of fill in the gaps.

00:25:11.680 --> 00:25:17.740
That's actually why Google wrote it, I think, to help them move over to Python 3, start introducing types to their code base.

00:25:17.740 --> 00:25:18.700
Yeah.

00:25:18.700 --> 00:25:21.460
So they all have slightly different strengths and weaknesses.

00:25:21.460 --> 00:25:29.320
But they should at least typewise, more or less, once they've all implemented the same specs, lead to the same type outcomes, as it were.

00:25:29.320 --> 00:25:30.300
Yeah.

00:25:30.300 --> 00:25:31.160
Okay.

00:25:31.160 --> 00:25:31.640
Cool.

00:25:31.640 --> 00:25:36.520
See, I learned so much about typing just by listening right now.

00:25:36.520 --> 00:25:37.020
Yeah.

00:25:37.020 --> 00:25:38.860
Yeah.

00:25:38.860 --> 00:25:44.480
Well, we're to the end of our normal topics.

00:25:44.480 --> 00:25:48.260
But Luciana, do you have any extras for us?

00:25:48.260 --> 00:25:49.420
Yeah.

00:25:49.420 --> 00:25:56.620
So it was announced in my team that Black is no longer in beta version.

00:25:56.620 --> 00:26:00.740
So version 2020.1.0 has come out.

00:26:01.460 --> 00:26:04.220
So it's their first table for these, I believe.

00:26:04.220 --> 00:26:06.040
So that's very exciting.

00:26:06.040 --> 00:26:12.800
I really like the highlights that they have there that Python 2 is no longer supported.

00:26:12.800 --> 00:26:14.940
Nice.

00:26:16.420 --> 00:26:20.500
So that's a cool announcement for the week.

00:26:20.500 --> 00:26:25.860
And the other one that I have is to remind folks about PyCascades 2022.

00:26:25.860 --> 00:26:27.880
It's happening this weekend.

00:26:27.880 --> 00:26:28.520
It's remote.

00:26:28.520 --> 00:26:31.300
Tickets are on sale.

00:26:31.300 --> 00:26:34.500
So if you're interested in joining the event, it's really awesome.

00:26:34.500 --> 00:26:35.860
It was my first Python conference.

00:26:35.860 --> 00:26:38.380
And the community there is just really amazing.

00:26:39.160 --> 00:26:42.580
So again, remote, join us this weekend.

00:26:42.580 --> 00:26:44.960
PyCascades was your first conference?

00:26:44.960 --> 00:26:46.280
It was.

00:26:46.280 --> 00:26:47.060
Wow.

00:26:47.060 --> 00:26:48.080
Which one?

00:26:48.080 --> 00:26:49.280
It was back in 2019.

00:26:49.280 --> 00:26:51.160
Pretty recent.

00:26:51.160 --> 00:26:52.840
Was that the Portland one?

00:26:52.840 --> 00:26:55.060
It was in Seattle.

00:26:55.060 --> 00:26:56.020
Seattle.

00:26:56.020 --> 00:26:56.460
Okay.

00:26:58.060 --> 00:27:00.600
Yeah, I guess it was the 2021 that was in Portland.

00:27:00.600 --> 00:27:02.240
Right before everything shut down.

00:27:02.240 --> 00:27:03.500
Yes, 2020.

00:27:03.500 --> 00:27:04.880
It was right before it.

00:27:04.880 --> 00:27:05.140
Yeah.

00:27:05.140 --> 00:27:05.740
Yeah.

00:27:05.740 --> 00:27:10.120
Because that was the one I had to miss because I was out of the country on vacation when it happened.

00:27:10.120 --> 00:27:10.940
Yeah.

00:27:10.940 --> 00:27:14.000
Not in China, I hope.

00:27:14.000 --> 00:27:17.300
No, I was in Thailand for a friend's wedding.

00:27:17.300 --> 00:27:18.260
Interesting.

00:27:18.260 --> 00:27:18.960
Nice.

00:27:18.960 --> 00:27:26.660
That was back in the day when we kept track of what countries do have COVID cases, not how many cases in every country.

00:27:26.980 --> 00:27:28.480
So it was a different time.

00:27:28.480 --> 00:27:29.660
Yeah.

00:27:29.660 --> 00:27:30.760
So long ago.

00:27:30.760 --> 00:27:33.700
So I only have like, I guess, one.

00:27:33.700 --> 00:27:38.560
I don't have anything to show for this, but I did a couple extra things.

00:27:38.560 --> 00:27:46.600
I wasn't going to talk about it too much, but I did notice that pip is now at 22, version 22 dot something.

00:27:46.600 --> 00:27:49.320
It's what we're at 22.02 now.

00:27:49.740 --> 00:27:57.440
But one of the neat things about it is there's some cool stuff around having pip vendor.

00:27:57.440 --> 00:27:59.800
There's a couple neat things.

00:27:59.800 --> 00:28:02.040
There's one of their vendor and some of rich.

00:28:02.540 --> 00:28:05.360
So some of the, especially the error output.

00:28:05.360 --> 00:28:12.280
If everything goes great, you probably won't notice much of a difference, except for maybe the progress bar if things are slow.

00:28:12.280 --> 00:28:21.280
But the error report, if something goes wrong, like if it's building something, that's where things apparently show up really neat.

00:28:21.280 --> 00:28:23.240
Some better error outputs.

00:28:23.240 --> 00:28:25.800
And better error outputs are always great.

00:28:25.800 --> 00:28:31.400
Also, interesting that they replaced Tox in their development workflow with Nox.

00:28:32.680 --> 00:28:37.900
And I don't know if that's worth noting or not, but it's interesting nonetheless.

00:28:37.900 --> 00:28:43.060
Yeah, I know Predun, one of the core developers of Pip, is a big Nox fan.

00:28:43.060 --> 00:28:44.020
I'm also a Nox fan.

00:28:44.020 --> 00:28:48.160
So I think part of that's just kind of the difference.

00:28:48.160 --> 00:28:58.200
For those of you who don't know the difference between Tox and Nox other than the letter, Nox is a bit more of a, I would say, general task runner.

00:28:58.520 --> 00:29:01.860
So because you can write just, it's writing just straight Python code.

00:29:01.860 --> 00:29:08.880
So I think for projects that like to use it for like release process stuff, like on the packaging project,

00:29:08.880 --> 00:29:16.260
Predun wrote a Nox file that has like literally a release command that will do everything you need from within Nox.

00:29:16.260 --> 00:29:19.640
So you don't have to have a separate shell script or something else.

00:29:19.640 --> 00:29:24.020
So it can all be in the same file that you also specify how to run your linter and how to run your tests and stuff.

00:29:24.020 --> 00:29:25.600
That's pretty neat.

00:29:25.700 --> 00:29:34.440
One of the things that I've, and I don't remember if there's a way to get around it or not, Tox operates in a virtual environment.

00:29:34.440 --> 00:29:46.160
So it creates, so one of the things, the default behavior at least, creates a virtual environment and then runs whatever you're going to have it do within that virtual environment.

00:29:46.160 --> 00:29:49.840
So like the idea being, you're going to have multiple Python versions.

00:29:49.840 --> 00:29:53.500
So it creates a virtual environment for each Python version that you're running.

00:29:53.500 --> 00:29:56.340
There's some stuff like this extra stuff.

00:29:56.340 --> 00:29:57.600
Like I just want to publish now.

00:29:57.600 --> 00:30:02.580
I'm already like, I'm already in a virtual environment because I'm always in a virtual environment.

00:30:02.580 --> 00:30:07.820
I don't really need Tox to generate another one just to run a command.

00:30:08.140 --> 00:30:15.140
Do you know if that sort of thing is easier in Nox or does Nox also create a virtual environment before it does stuff?

00:30:15.140 --> 00:30:20.900
So Nox can create a virtual environment.

00:30:20.900 --> 00:30:25.560
I can't remember if it does automatically for every command.

00:30:25.560 --> 00:30:26.760
Putting you on the spot.

00:30:26.760 --> 00:30:27.440
Yeah.

00:30:27.720 --> 00:30:29.280
But it's something I'll look up then.

00:30:29.280 --> 00:30:30.200
Ask Thea.

00:30:30.200 --> 00:30:31.100
She can tell you.

00:30:31.100 --> 00:30:31.740
Yeah.

00:30:31.740 --> 00:30:33.220
Yeah, definitely.

00:30:33.220 --> 00:30:35.860
So go ahead.

00:30:35.860 --> 00:30:36.140
Sorry.

00:30:36.140 --> 00:30:36.940
I was going to say that.

00:30:36.940 --> 00:30:41.040
Speaking of pip being updated, I was trying to use it with pip tools today.

00:30:41.040 --> 00:30:45.120
And it seems that pip tools is not working with the latest version of pip.

00:30:45.120 --> 00:30:46.900
Just FYI, there's an open issue.

00:30:46.900 --> 00:30:48.260
I'm sure the team's investigating.

00:30:48.260 --> 00:30:51.240
But for all pip tools users there, you're not alone.

00:30:52.820 --> 00:30:54.020
Yeah, so the problem.

00:30:54.020 --> 00:30:56.160
Yeah, so what so I can.

00:30:56.160 --> 00:30:56.520
Yeah.

00:30:56.520 --> 00:31:01.620
So what happened was is pip tools is using the private API of pip.

00:31:01.620 --> 00:31:03.420
And it changed.

00:31:03.420 --> 00:31:04.880
And so pip tools broke.

00:31:04.880 --> 00:31:20.060
So pip tools, if you use it, you will need to pin to a version pip 2021 or older to work with pip tools until they figure out what they need to do to use the API.

00:31:20.060 --> 00:31:22.360
The changes that pip made to their internal API.

00:31:22.360 --> 00:31:29.520
And to be fair to the pip tools team, pip 22 just came out like a handful of days ago.

00:31:29.520 --> 00:31:31.160
So it's really new.

00:31:31.160 --> 00:31:31.740
Yeah.

00:31:31.740 --> 00:31:33.900
I'm a huge fan of pip tools.

00:31:33.900 --> 00:31:35.020
Definitely love it.

00:31:35.020 --> 00:31:40.040
Well, one other thing actually.

00:31:40.040 --> 00:31:44.200
Yeah, just one other thing on the new pip release for people to be aware of.

00:31:44.340 --> 00:31:48.460
So one thing that happened here is to try to cut down on the vendoring.

00:31:48.460 --> 00:31:52.160
Pip stopped vendoring HTML5 lib.

00:31:52.880 --> 00:31:58.120
And now use the HTML parser in the standard library.

00:31:58.120 --> 00:32:06.020
And that actually broke a bunch of simple repo API indexes.

00:32:06.300 --> 00:32:16.740
For those of you who don't know the simple repo API, if you go to any URL in PyPI for a project and replace the project part of the URL with simple, you'll see what I'm talking about.

00:32:16.740 --> 00:32:23.740
But basically, there's a spec that just says there's a PEP that says, hey, write this HTML.

00:32:23.740 --> 00:32:29.420
And then packaging installers can read it and figure out where to find all the files and the projects for something.

00:32:30.580 --> 00:32:33.260
It turns out a lot of people weren't following the spec.

00:32:33.260 --> 00:32:45.640
And so a lot of these indexes broke because pip wasn't able to read them anymore because it couldn't be parsed as pure HTML.

00:32:45.640 --> 00:32:48.540
They were doing funky things that broke.

00:32:49.160 --> 00:33:02.160
So they, I believe, either have or are planning to roll it back with a flag to let you alternatively use HTML5 lib for now with the goal of getting all these projects that have broken output.

00:33:02.160 --> 00:33:08.000
They don't follow the spec to fix themselves so that they can go back to not having HTML5 lib in the box.

00:33:08.000 --> 00:33:16.400
So just a heads up, if you use an alternative package index and it suddenly broke, that's why they're working on a fix.

00:33:16.580 --> 00:33:28.200
But I would talk to the project that creates that index for you and have them work on making sure that that project creates valid HTML5 that can be parsed by the HTML parser in the standard library.

00:33:28.200 --> 00:33:33.080
So that going, because that'll probably go away in pip 23.

00:33:33.080 --> 00:33:37.060
But it's not broken now, right?

00:33:37.060 --> 00:33:38.540
It's just, it's flagged.

00:33:38.540 --> 00:33:40.280
It was broken.

00:33:40.280 --> 00:33:44.300
They didn't realize how much of the world was doing invalid HTML for these indexes.

00:33:44.300 --> 00:33:49.860
So I don't know if it's in 22.0.2 or if it's going to be in the next release.

00:33:49.860 --> 00:33:54.640
But there is an open issue where they're, where I at least was looking at where they were fixing it.

00:33:54.640 --> 00:34:02.160
Because I got looped in because I have one of my side projects, Mouse Bender, that actually wrote some code around this originally.

00:34:02.160 --> 00:34:04.600
There's talk about moving up to packaging.

00:34:04.600 --> 00:34:08.020
A lot of behind the scenes stuff that people don't need to care about.

00:34:08.680 --> 00:34:10.500
I hope that, yeah.

00:34:10.500 --> 00:34:11.200
No, go ahead.

00:34:11.200 --> 00:34:18.360
Well, I was just going to say, so the plan is, I think, is to add a flag to say, use old HTML parser or something along those lines for now.

00:34:18.360 --> 00:34:23.160
So you can say, hey, use the HTML5 lib version of parsing HTML.

00:34:23.160 --> 00:34:28.120
But it's just, just to be clear here, there will be a fix, but it's a temporary fix.

00:34:28.120 --> 00:34:33.220
Because people should be getting after their projects that create these indexes to do the right thing and actually follow the standard.

00:34:33.220 --> 00:34:34.500
Okay.

00:34:34.940 --> 00:34:44.340
So as someone that got bit by this, because we have an internal PyPI caching server that also we store our own stuff on.

00:34:44.340 --> 00:34:46.540
And we don't own it.

00:34:46.540 --> 00:34:49.380
We like, it's a third party thing that we're licensed.

00:34:49.380 --> 00:34:52.200
So I don't know how long it's going to be.

00:34:52.200 --> 00:34:54.800
So hopefully that, hopefully they move quickly.

00:34:54.800 --> 00:35:01.040
But at the same time, hopefully this extra use the old one flag or whatever will work for a while.

00:35:01.040 --> 00:35:07.900
I was a little surprised when I saw the warning pop up of like, oh, you're not using a good, you know, it's invalid HTML.

00:35:07.900 --> 00:35:09.760
And I'm like, what am I supposed to do about it?

00:35:09.760 --> 00:35:17.440
Well, and I don't think the bit developers were expecting it to be so widely broken either.

00:35:17.440 --> 00:35:17.900
Right.

00:35:17.980 --> 00:35:22.180
It's like, what are these projects doing that are creating invalid HTML?

00:35:22.180 --> 00:35:23.780
But apparently.

00:35:23.780 --> 00:35:25.240
I did it all the time though.

00:35:25.240 --> 00:35:26.220
Like, okay.

00:35:26.220 --> 00:35:27.600
But it's fair.

00:35:27.600 --> 00:35:28.200
It works.

00:35:28.200 --> 00:35:29.200
If it works, it works.

00:35:29.200 --> 00:35:29.780
It's HTML.

00:35:29.780 --> 00:35:30.900
Yeah.

00:35:30.900 --> 00:35:31.940
Well, and that was the problem, right?

00:35:31.940 --> 00:35:38.120
Is the spec very, the PEP that defines it very specifically says it must be valid HTML5.

00:35:38.120 --> 00:35:41.320
And I think it was specifically so that it could be parsed by the standard library.

00:35:41.320 --> 00:35:44.980
So it also means none of these pages could even have been parsed by the standard library.

00:35:44.980 --> 00:35:46.680
So I think that's what happened, right?

00:35:46.740 --> 00:35:51.820
Is people, because people, because pip had been using HTML5 lib, which is obviously way

00:35:51.820 --> 00:35:54.180
more lax in terms of what it can parse.

00:35:54.180 --> 00:35:56.200
Everyone just like, oh, okay, it's good enough.

00:35:56.200 --> 00:36:00.500
And didn't realize that the spec specifically mandated valid HTML5.

00:36:00.500 --> 00:36:05.640
And so hopefully all these projects that got caught up can get a fix out over the next year.

00:36:05.640 --> 00:36:10.440
Because as I said, I suspect this will be in until pip 20, pip 23, which will come out

00:36:10.440 --> 00:36:11.020
in 2023.

00:36:11.020 --> 00:36:14.540
So it's not like it's going to disappear in a month, this flag.

00:36:14.840 --> 00:36:18.920
So I'll let the fix out, but hopefully everyone can kind of get caught up so that they can

00:36:18.920 --> 00:36:21.300
get back to not vendoring HTML5.

00:36:21.300 --> 00:36:22.620
Okay.

00:36:22.620 --> 00:36:31.980
Before we go jump to a joke, I want one last extra is for the first time in like 18, 20 months,

00:36:31.980 --> 00:36:33.220
I'm not writing a book.

00:36:36.000 --> 00:36:37.860
I'm no longer writing this book.

00:36:37.860 --> 00:36:39.400
The writing is done.

00:36:39.400 --> 00:36:40.660
The editing is done.

00:36:40.660 --> 00:36:46.220
So it's off to all the rest of the cogs that have to go through the process to get it.

00:36:46.220 --> 00:36:48.160
But the ebook right now is really solid.

00:36:48.160 --> 00:36:53.040
So anybody that grabs the ebook now, if you've grabbed it before, it's all the updates are there.

00:36:53.040 --> 00:36:58.820
But this has got all the copy edit changes and the final edits, the rest of its layout and

00:36:58.820 --> 00:37:00.500
stuff to try to get the physical book form.

00:37:00.660 --> 00:37:04.700
So that's coming out sometime this month, maybe, hopefully.

00:37:04.700 --> 00:37:09.220
So that's my hope is by the end of February, I'll have a physical copy in my hands.

00:37:09.220 --> 00:37:11.060
Well, congratulations.

00:37:11.060 --> 00:37:17.240
Everyone who listens to this podcast and testing code and anywhere else for you have known you

00:37:17.240 --> 00:37:20.280
put a lot of blood, sweat, tears and love into that book.

00:37:20.280 --> 00:37:21.740
So congratulations for reaching this book.

00:37:21.740 --> 00:37:25.100
I just was realizing that my youngest daughter is 12.

00:37:25.100 --> 00:37:28.900
I spent a year and a half on this book, a year and a half on the first edition.

00:37:28.900 --> 00:37:33.640
So I've been writing about pytest in book form for a quarter of her life.

00:37:33.640 --> 00:37:36.720
It's pretty weird.

00:37:36.720 --> 00:37:39.000
Are you ready for a joke?

00:37:39.000 --> 00:37:40.380
Thank you for your work, Brian.

00:37:40.380 --> 00:37:43.900
I'm going to be ready to physical copy, hopefully.

00:37:43.900 --> 00:37:48.880
So one of the goals of the second edition was to try to put it in a format that would be easy

00:37:48.880 --> 00:37:50.940
to teach, easier to teach and learn.

00:37:51.360 --> 00:37:56.600
So I'm the next step is I'm going to work on trying to teach people in person, teach people

00:37:56.600 --> 00:37:59.180
in person and through video courses and stuff like that.

00:37:59.180 --> 00:38:01.600
Turn this into because I know a lot of people don't read.

00:38:01.600 --> 00:38:03.620
But you're coders.

00:38:03.620 --> 00:38:04.340
Why don't you read?

00:38:04.340 --> 00:38:05.320
You have to read your code.

00:38:05.320 --> 00:38:07.680
But still, some people don't read books.

00:38:07.680 --> 00:38:09.600
How about something funny?

00:38:09.600 --> 00:38:10.760
Yes.

00:38:10.760 --> 00:38:13.180
Today's joke brought to you by Luciana.

00:38:13.180 --> 00:38:14.840
Thank you for finding something funny.

00:38:14.840 --> 00:38:19.040
And we'll add this to the thing.

00:38:19.040 --> 00:38:20.660
So I love this.

00:38:20.980 --> 00:38:28.740
So for people listening, there's a picture of an ocean and you've got a really big ship.

00:38:28.740 --> 00:38:29.380
It's called.

00:38:29.380 --> 00:38:30.500
I don't know what's on the ship.

00:38:30.500 --> 00:38:31.860
It's a big ship.

00:38:31.860 --> 00:38:33.600
I don't know.

00:38:33.600 --> 00:38:34.120
I don't know.

00:38:34.720 --> 00:38:37.880
But it says, but it looks all official like and everything.

00:38:37.880 --> 00:38:39.800
It says proper software design.

00:38:39.800 --> 00:38:44.740
And then there's a guy on a surfboard standing up.

00:38:44.740 --> 00:38:46.020
So it's like a wakeboard thing.

00:38:46.020 --> 00:38:50.640
And he's holding an umbrella, getting pulled by an umbrella on a surfboard and says, whatever

00:38:50.640 --> 00:38:51.420
I'm doing.

00:38:51.420 --> 00:38:54.020
So it's funny.

00:38:55.620 --> 00:38:57.680
That's how I feel whenever I'm coding.

00:38:57.680 --> 00:39:06.040
And sometimes it feels like this going from the old days of like these huge design documents

00:39:06.040 --> 00:39:07.880
to now.

00:39:08.140 --> 00:39:08.940
Oh, we're doing agile.

00:39:08.940 --> 00:39:13.500
So let's just write some ideas on some post-it notes and stick them on board and run from

00:39:13.500 --> 00:39:14.120
it with there.

00:39:14.120 --> 00:39:15.980
So anyway.

00:39:16.060 --> 00:39:17.360
If it works, it works, right?

00:39:17.360 --> 00:39:19.260
Yeah.

00:39:19.260 --> 00:39:20.440
It's got tests, right?

00:39:20.440 --> 00:39:23.460
Well, I think so.

00:39:23.460 --> 00:39:24.280
It's unit tested.

00:39:24.280 --> 00:39:25.320
It's 100% coverage.

00:39:25.320 --> 00:39:25.740
It's good.

00:39:25.740 --> 00:39:26.540
Let's ship it.

00:39:26.540 --> 00:39:27.780
Perfect.

00:39:27.780 --> 00:39:29.140
Perfect.

00:39:29.140 --> 00:39:30.320
Nice.

00:39:30.320 --> 00:39:34.040
Well, first of all, thank you, Luciana, for joining the show.

00:39:34.040 --> 00:39:35.560
I think it's your first time, right?

00:39:35.560 --> 00:39:37.080
Yes, it was.

00:39:37.080 --> 00:39:38.260
My first podcast.

00:39:38.260 --> 00:39:39.260
Awesome.

00:39:39.260 --> 00:39:39.780
Participation.

00:39:39.780 --> 00:39:41.320
Thank you for having me.

00:39:41.320 --> 00:39:43.960
And thanks, Brett, for joining last minute.

00:39:45.420 --> 00:39:46.440
Yeah, thanks, Brett.

00:39:46.440 --> 00:39:47.620
It's always good to see you.

00:39:47.620 --> 00:39:49.820
I'm happy to play the fake Michael for this episode.

00:39:49.820 --> 00:39:53.860
Thanks, everybody, on the stream for showing up.

00:39:53.860 --> 00:39:56.080
And we'll see you all next week.

00:39:56.080 --> 00:39:58.860
Thanks for listening to Python Bytes.

00:39:58.860 --> 00:40:01.760
Follow the show on Twitter via at Python Bytes.

00:40:01.760 --> 00:40:04.880
That's Python Bytes as in B-Y-T-E-S.

00:40:04.880 --> 00:40:07.960
Get the full show notes over at pythonbytes.fm.

00:40:07.960 --> 00:40:14.020
If you have a news item we should cover, just visit pythonbytes.fm and click Submit in the

00:40:14.020 --> 00:40:14.480
nav bar.

00:40:14.800 --> 00:40:16.960
We're always on the lookout for sharing something cool.

00:40:16.960 --> 00:40:21.520
If you want to join us for the live recording, just visit the website and click Livestream

00:40:21.520 --> 00:40:24.500
to get notified of when our next episode goes live.

00:40:24.500 --> 00:40:27.840
That's usually happening at noon Pacific on Wednesdays on YouTube.

00:40:27.840 --> 00:40:29.200
This is Brian Okken.

00:40:29.200 --> 00:40:33.780
On behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast

00:40:33.780 --> 00:40:35.140
with your friends and colleagues.

