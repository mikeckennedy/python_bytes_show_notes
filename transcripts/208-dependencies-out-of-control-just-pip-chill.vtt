
00:00:00.000 --> 00:00:05.300
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.300 --> 00:00:09.700
This is episode 208 recorded November 11th 2020.


00:00:09.700 --> 00:00:13.900
I am Brian Okken and I'm Michael Kennedy and it's getting cold outside.


00:00:13.900 --> 00:00:17.200
It is getting cold outside. I feel like winter is coming.


00:00:17.200 --> 00:00:23.300
I went out on the deck and I'm like, well, there's something wrong with my deck. It's really slippery. Oh, that's ice. What a weird time of year it is.


00:00:23.300 --> 00:00:25.300
Who do I call to get this fixed?


00:00:25.300 --> 00:00:25.800
Exactly.


00:00:25.800 --> 00:00:27.800
There's got to be some sort of contractor I can get to.


00:00:27.800 --> 00:00:29.300
I'm sure there's something wrong with the sun.


00:00:29.300 --> 00:00:30.300
We're going to need some help here.


00:00:30.300 --> 00:00:30.800
Yeah.


00:00:30.800 --> 00:00:32.800
This episode is brought to you by us.


00:00:32.800 --> 00:00:37.300
We'll tell you more about what we're doing other than how you can support us a little later.


00:00:37.300 --> 00:00:42.800
But first I want to, speaking of cold, I want to talk about something called Pip Chill.


00:00:42.800 --> 00:00:44.800
Ooh, I see.


00:00:44.800 --> 00:00:45.800
Have you heard of this before?


00:00:45.800 --> 00:00:46.300
I have heard of this.


00:00:46.300 --> 00:00:49.300
I've just heard of it, but it looks fantastic.


00:00:49.300 --> 00:00:49.800
Yeah.


00:00:49.800 --> 00:00:50.800
It drives me crazy.


00:00:50.800 --> 00:00:56.400
this whole new change with pip, where pip is super, super picky about the dependencies.


00:00:56.400 --> 00:01:02.080
And then having things like dependabot or other automatic tooling upgrade stuff as things come out,


00:01:02.080 --> 00:01:05.720
if they ever get out of sync, then pip will break in some ways, like for example,


00:01:05.720 --> 00:01:08.600
Boto3 and BotoCore have been driving me crazy.


00:01:08.600 --> 00:01:09.960
And it sounds like this would fix it.


00:01:09.960 --> 00:01:14.480
Normally, you build up, you got like a requirements.txt file, or you got your,


00:01:14.480 --> 00:01:18.560
the versions that you're working with, you want to put those in a setup or some sort of


00:01:18.960 --> 00:01:20.060
way to capture it.


00:01:20.060 --> 00:01:22.260
One of the ways you can do that is pip freeze.


00:01:22.260 --> 00:01:22.860
And


00:01:22.860 --> 00:01:25.960
if you already have an environment, like a virtual environment set up,


00:01:25.960 --> 00:01:27.460
with everything you need,


00:01:27.460 --> 00:01:29.560
you say pip freeze, it spits out


00:01:29.560 --> 00:01:31.760
all of the things that you have installed


00:01:31.760 --> 00:01:33.960
and all the versions that you've got.


00:01:33.960 --> 00:01:37.060
Now there's different variants that you can do with pip freeze also.


00:01:37.060 --> 00:01:40.260
You know, people often talk about that as having stability.


00:01:40.260 --> 00:01:40.960
Like you don't


00:01:40.960 --> 00:01:44.560
accidentally get a change that's pushed in the future that's a breaking change.


00:01:44.560 --> 00:01:46.060
And to me, I never appreciated that.


00:01:46.060 --> 00:01:48.560
Like that never seemed to be something I cared about.


00:01:48.560 --> 00:01:52.000
But once things like GitHub started saying,


00:01:52.000 --> 00:01:55.120
there's a new version of this, or the thing you have installed,


00:01:55.120 --> 00:01:58.240
there's a security vulnerability that if you don't upgrade,


00:01:58.240 --> 00:02:02.240
you're subject to on the web, which is a bad place to be.


00:02:02.240 --> 00:02:06.000
Then putting that version information in there explicitly


00:02:06.000 --> 00:02:09.040
allowed me to know, oh, I need to go and update the server


00:02:09.040 --> 00:02:11.760
because there's this critical vulnerability that GitHub told me about.


00:02:11.760 --> 00:02:15.600
That's what won me over to putting the pip freeze style with versions in there.


00:02:15.600 --> 00:02:17.680
Oh, yeah. Yeah. And I think that's good.


00:02:17.680 --> 00:02:23.520
But you might want to just have the version, the thing that you're really using.


00:02:23.520 --> 00:02:26.380
Like, let's say you're using black.


00:02:26.380 --> 00:02:30.380
Do you want to list black or do you want to list black and all of its dependencies?


00:02:30.380 --> 00:02:31.540
Yeah, exactly.


00:02:31.540 --> 00:02:33.640
And Freeze just gives you everything.


00:02:33.640 --> 00:02:39.580
And so what pip chill does is it just shows you the stuff that you installed.


00:02:39.580 --> 00:02:43.080
So, like, let's say if you installed just black,


00:02:43.080 --> 00:02:46.840
and you ran pip freeze, you'd see a whole bunch of stuff.


00:02:47.120 --> 00:02:51.360
But if you run, if you now install pip chill, pip dash chill,


00:02:51.360 --> 00:02:56.240
and run pip chill, you'll get pip chill also, it'll tell you that it's there.


00:02:56.240 --> 00:02:59.320
But it also just shows you black and what version of black you have.


00:02:59.320 --> 00:03:07.600
So if you've, you know, hopefully, black itself is specifying enough dependencies that make sense.


00:03:07.600 --> 00:03:11.880
There's definitely times where you want to have everything, all the versions nailed down,


00:03:11.880 --> 00:03:14.240
like you said, for security updates and stuff like that.


00:03:14.520 --> 00:03:16.120
But there's a whole bunch of times where,


00:03:16.120 --> 00:03:18.620
like for instance, I've got internal projects where


00:03:18.620 --> 00:03:19.920
we actually have,


00:03:19.920 --> 00:03:23.520
we actually vet all of the versions


00:03:23.520 --> 00:03:25.520
and put them in a different repository.


00:03:25.520 --> 00:03:27.820
But different combinations, we won't,


00:03:27.820 --> 00:03:29.820
you don't need to be that specific.


00:03:29.820 --> 00:03:33.220
So, Pipchill's a way to just list the ones that you've installed.


00:03:33.220 --> 00:03:35.220
And I think it's really cool.


00:03:35.220 --> 00:03:36.320
I think it's really cool too.


00:03:36.320 --> 00:03:37.820
One of the things that's neat is


00:03:37.820 --> 00:03:39.720
it toggles between this,


00:03:39.720 --> 00:03:41.720
here's what you installed and here's everything,


00:03:41.720 --> 00:03:43.920
which is what you're talking about with Pipfree.


00:03:43.920 --> 00:03:48.320
but there's another mode where you do -v and it'll show you the stuff you installed


00:03:48.320 --> 00:03:49.980
and then it'll show you


00:03:49.980 --> 00:03:51.820
commented out but present.


00:03:51.820 --> 00:03:55.620
These are all the things, the libraries and their versions


00:03:55.620 --> 00:03:59.320
that were installed but are not top level so they're commented out.


00:03:59.320 --> 00:04:03.320
And then there's a little comment like installed as a dependency of Jinja2Time


00:04:03.320 --> 00:04:06.020
or installed as a dependency of cookiecutter.


00:04:06.020 --> 00:04:09.420
So you can do that to get a look and say, hey, what does my virtual directory look like?


00:04:09.420 --> 00:04:10.620
Why is this thing here?


00:04:10.620 --> 00:04:12.420
Oh, I see it came from this other place.


00:04:12.420 --> 00:04:15.960
Yeah, and then also if you can have that with or without versions,


00:04:15.960 --> 00:04:21.000
and so you can, if you know there's a dependency vulnerability for a particular thing,


00:04:21.000 --> 00:04:23.540
you can say, "Well, which version am I getting?"


00:04:23.540 --> 00:04:25.100
So, that's good.


00:04:25.100 --> 00:04:27.340
Yeah, this is really nice. I'm liking it.


00:04:27.340 --> 00:04:31.840
You've got like a version checker thing that tells you if there's vulnerabilities, right?


00:04:31.840 --> 00:04:32.340
Yes.


00:04:32.340 --> 00:04:32.980
What are you using?


00:04:32.980 --> 00:04:36.980
Well, for vulnerabilities, I think just having a pinned version


00:04:36.980 --> 00:04:40.820
in a requirements.txt file is sufficient for GitHub to say there's a problem.


00:04:40.820 --> 00:04:42.820
So like any requirement file is pinned.


00:04:42.820 --> 00:04:46.020
But if you sign up with Dependabot,


00:04:46.020 --> 00:04:50.420
which is, there's some things that are super, super annoying about Dependabot.


00:04:50.420 --> 00:04:53.820
But what is nice is that it will show you


00:04:53.820 --> 00:04:55.320
anytime there's a thing.


00:04:55.320 --> 00:04:59.420
So you say like, weekly notify me of updates to my requirements file.


00:04:59.420 --> 00:05:03.220
And so every Monday morning I get a list of like, here are the updates


00:05:03.220 --> 00:05:07.820
that I could upgrade for like my web framework or database access or whatever.


00:05:07.820 --> 00:05:10.620
And like put in the automatic PR for it.


00:05:10.620 --> 00:05:16.300
it'll show you like the change log, and then you can accept that and it'll update your requirements.


00:05:16.300 --> 00:05:21.180
Yeah, okay. And then there's also a workflow that some people use that have a


00:05:21.180 --> 00:05:27.660
like a smaller, like a requirements in or something. It's just a list of packages they're using.


00:05:27.660 --> 00:05:31.580
And then they'll just get the latest of whatever those few things,


00:05:31.580 --> 00:05:36.620
and then test it, and then freeze it. So you've got like a two stage thing. So you,


00:05:36.620 --> 00:05:42.060
that what you deploy is a frozen set of package lists,


00:05:42.060 --> 00:05:45.760
and all the versions, but you've got some other way to do


00:05:45.760 --> 00:05:48.260
just how to generate that, which ones you should install.


00:05:48.260 --> 00:05:52.760
Right, yeah, that's an interesting way to do it, because then you basically have just PyPI and pip


00:05:52.760 --> 00:05:54.760
just giving you the latest.


00:05:54.760 --> 00:05:58.200
Yeah, just to round out, the thing that is super duper annoying about


00:05:58.200 --> 00:05:59.400
dependabot


00:05:59.400 --> 00:06:02.720
is like, on docpython training, that site has


00:06:02.720 --> 00:06:07.760
30, 40 packages it's using, if you count up the dependencies, pip freeze, not pip jail freeze.


00:06:07.760 --> 00:06:12.200
And every change is its own PR.


00:06:12.200 --> 00:06:17.680
And I swear, almost weekly I am merging, I'm manually merging


00:06:17.680 --> 00:06:21.440
merge conflicts between Dependabot and Dependabot.


00:06:21.440 --> 00:06:25.240
It's like, well, this requirement line and that requirement line changed and like,


00:06:25.240 --> 00:06:27.040
they won't give it to you as one just,


00:06:27.040 --> 00:06:30.200
here's the changes for the week. It's like, no, no, no, here's a bunch of changes and


00:06:30.200 --> 00:06:33.000
you'll probably be in here merging this manually. So enjoy that.


00:06:33.000 --> 00:06:36.000
Anyway, it's still really cool to have


00:06:36.000 --> 00:06:39.160
it automatically. I do like this idea of it just kind of like


00:06:39.160 --> 00:06:42.160
some part of the CI going, this is what I depend upon.


00:06:42.160 --> 00:06:43.440
Install what I need,


00:06:43.440 --> 00:06:47.360
generate the pinned versions, because then when you go to production, you say install


00:06:47.360 --> 00:06:48.720
pip -r,


00:06:48.720 --> 00:06:50.160
it will actually


00:06:50.160 --> 00:06:52.160
upgrade the stuff that needs upgrading.


00:06:52.160 --> 00:06:53.560
Rather than fulfilled.


00:06:53.560 --> 00:06:56.880
One of the requests I have for the people working on pip chill


00:06:56.880 --> 00:07:00.960
is I think an option to not list itself would be good because


00:07:00.960 --> 00:07:03.800
I'm just installing it so I can run it.


00:07:03.800 --> 00:07:08.160
That actually makes a lot of sense to just omit self.


00:07:08.160 --> 00:07:09.960
You can like


00:07:09.960 --> 00:07:12.480
type it through a dash B or something.


00:07:12.480 --> 00:07:17.560
Maybe it's like some kind of worm and its goal is to just get into all projects and by listing itself


00:07:17.560 --> 00:07:19.880
it's just going to slowly make its way out.


00:07:19.880 --> 00:07:20.880
Maybe.


00:07:20.880 --> 00:07:24.160
Speaking of problems you might want to avoid, not that that is one, but


00:07:24.160 --> 00:07:26.760
one that you might is if you work on Windows


00:07:26.760 --> 00:07:30.520
which from the Stack Overflow survey and the PSF survey,


00:07:30.520 --> 00:07:34.040
we found a very significant number of people in the Python space do that.


00:07:34.040 --> 00:07:38.160
And I've heard people in Python talk about this thing called NumPy.


00:07:38.160 --> 00:07:39.480
You heard of NumPy?


00:07:39.480 --> 00:07:44.120
No, NumPy is something that definitely is the foundation of


00:07:44.120 --> 00:07:48.120
the many, many, many data science libraries, right?


00:07:48.120 --> 00:07:51.640
Well, big news sent in by Daniel Mulkey,


00:07:51.960 --> 00:07:53.960
recent Windows update


00:07:53.960 --> 00:07:54.960
broke


00:07:54.960 --> 00:07:55.960
open


00:07:55.960 --> 00:07:56.960
BLAS


00:07:56.960 --> 00:08:00.760
which is a dependency of NumPy, speaking of dependencies.


00:08:00.760 --> 00:08:03.760
So effectively, if that doesn't work, NumPy doesn't work.


00:08:03.760 --> 00:08:04.760
That sounds less good.


00:08:04.760 --> 00:08:05.260
Yeah.


00:08:05.260 --> 00:08:08.260
Yeah, so there's a whole long developer community thread,


00:08:08.260 --> 00:08:09.260
and I mean long,


00:08:09.260 --> 00:08:10.760
people talking about it,


00:08:10.760 --> 00:08:14.260
suggesting fixes that may or may not be fixes, etc, etc.


00:08:14.260 --> 00:08:16.260
It starts like this, I'll just read the quick overview


00:08:16.260 --> 00:08:18.560
so people know what to be on the lookout for.


00:08:18.560 --> 00:08:20.060
I'm a NumPy developer.


00:08:20.060 --> 00:08:23.560
We've been trying to track down some strange issues


00:08:23.560 --> 00:08:27.660
where after updating to Windows 10 2004,


00:08:27.660 --> 00:08:30.160
suddenly code that worked no longer works.


00:08:30.160 --> 00:08:34.460
Here's the NumPy issue and the corresponding issue in OpenBlaz, BLAS.


00:08:34.460 --> 00:08:37.760
The problem can be summarized as when calling fmod,


00:08:37.760 --> 00:08:43.960
something is changed so that much later calling OpenBlaz assembly routine fails.


00:08:43.960 --> 00:08:46.260
And we're way down here, Brian.


00:08:46.260 --> 00:08:52.500
The only difference I can see is that in the register that Visual Studio exposes after the call to fmod


00:08:52.500 --> 00:08:54.500
st0 is nan.


00:08:54.500 --> 00:08:56.500
[laughter]


00:08:56.500 --> 00:08:58.660
- The bug that people. - Yeah, geez.


00:08:58.660 --> 00:09:02.260
- But the fact that it doesn't work is not ideal. - Good luck.


00:09:02.260 --> 00:09:05.060
So Steve Dower and some of the other Microsoft people


00:09:05.060 --> 00:09:07.620
commented there. There's a fix slated to take


00:09:07.620 --> 00:09:10.740
until January 2021 to be released.


00:09:10.740 --> 00:09:15.140
But Matt P posted a workaround. Says for all of those at home following along


00:09:15.140 --> 00:09:20.980
and looking for a quick fix, NumPy has released a bug fix 1.19.3 to work around this issue.


00:09:20.980 --> 00:09:29.020
The bug fix broke something else on Linux, so we had to revert the fix in release 1.19.4.


00:09:29.020 --> 00:09:34.940
So the fix on Windows, the workaround on Windows broke the Linux version.


00:09:34.940 --> 00:09:37.540
But as a Windows person, you may not care.


00:09:37.540 --> 00:09:44.380
So on Windows, you could pin it numpy == 1.19.3 for now,


00:09:44.380 --> 00:09:46.580
and just don't put that into production on Linux.


00:09:46.580 --> 00:09:47.860
Sounds easy enough, I guess.


00:09:47.860 --> 00:09:50.120
Yeah, I mean, if you're a package maintainer,


00:09:50.120 --> 00:09:53.360
this seems ugly, but if you're like an end user,


00:09:53.360 --> 00:09:56.360
I'm either installing it on Windows or I'm installing it on Linux.


00:09:56.360 --> 00:09:57.020
It's not a problem.


00:09:57.020 --> 00:09:57.520
Yeah.


00:09:57.520 --> 00:10:00.740
I don't know if pip actually has a platform flag,


00:10:00.740 --> 00:10:03.940
like pip in the dashr, you know, the requirements.


00:10:03.940 --> 00:10:06.540
Can you specify this platform gets this requirement,


00:10:06.540 --> 00:10:08.140
that platform gets, I'm guessing no.


00:10:08.140 --> 00:10:10.260
Well, no, I mean, it's part of the wheel.


00:10:10.260 --> 00:10:13.020
So the wheels can say this wheel is appropriate for


00:10:13.020 --> 00:10:14.140
only certain platforms.


00:10:14.140 --> 00:10:16.140
Yeah, but if you're building an application,


00:10:16.140 --> 00:10:18.140
not something that's on pip,


00:10:18.140 --> 00:10:19.640
yeah, I don't know. I don't know how to do it.


00:10:19.640 --> 00:10:22.140
But you can, this is like a fix, but


00:10:22.140 --> 00:10:24.780
just be aware that that will make it not work on Linux.


00:10:24.780 --> 00:10:27.740
So, yeah, anyway, I just want to put this on people's radar


00:10:27.740 --> 00:10:29.940
so they're not down looking at registers


00:10:29.940 --> 00:10:31.780
going, why is ST0? Man, that's odd.


00:10:31.780 --> 00:10:33.940
I'm glad I don't have to do things like that.


00:10:33.940 --> 00:10:35.940
We can all be thankful we don't have to do things like that.


00:10:35.940 --> 00:10:37.780
I mean, that's why we work in Python, right?


00:10:37.780 --> 00:10:39.060
Or let's reverse it.


00:10:39.060 --> 00:10:41.620
I'm really grateful that other people are looking at that,


00:10:41.620 --> 00:10:42.660
so I don't have to.


00:10:42.660 --> 00:10:43.380
Yes.


00:10:43.380 --> 00:10:44.460
Thank you, people.


00:10:44.460 --> 00:10:45.780
Speaking of thank you,


00:10:45.780 --> 00:10:48.420
Brian and I are both doing a bunch of stuff online,


00:10:48.420 --> 00:10:50.940
and people often ask how they can support us,


00:10:50.940 --> 00:10:53.660
support the podcast, and just get better at Python.


00:10:53.660 --> 00:10:55.420
And we're trying to help people do that, right, Brian?


00:10:55.420 --> 00:10:57.540
We are, yeah, in lots of ways.


00:10:57.540 --> 00:10:59.460
One of the things we're doing is this podcast.


00:10:59.460 --> 00:11:01.660
And if people want to just support us directly,


00:11:01.660 --> 00:11:05.180
there's a Patreon link in all of the show notes.


00:11:05.180 --> 00:11:09.180
you can donate. We have like 60, I just checked, we have 65 people doing


00:11:09.180 --> 00:11:13.180
this now. That's awesome. Thank you everyone. And you're teaching some classes. I am. The


00:11:13.180 --> 00:11:17.180
most recent one that I worked on should maybe, maybe be out.


00:11:17.180 --> 00:11:21.180
It's completely done. I just put my head down and did the whole thing. It was like a 4 and a


00:11:21.180 --> 00:11:25.180
half hour fast API course for building APIs with fast API.


00:11:25.180 --> 00:11:29.180
So I'm really excited about that one. And hopefully it may even be out. But people


00:11:29.180 --> 00:11:33.180
can just check out training.talkwithon.fm. And


00:11:33.180 --> 00:11:38.680
It'll be over there soon if it's not by the time you hear this. Yeah, nice. Indeed. I'll just keep plugging away at it, man.


00:11:38.680 --> 00:11:46.220
This is gonna be the 30th course that we've created over there and we're not done. We're gonna keep plugging away. Keep plugging.


00:11:46.220 --> 00:11:48.580
Maybe you need a plugin architecture.


00:11:48.580 --> 00:11:54.140
Maybe I do. Tell me about it. Well, so one of the things I love about PyTest is


00:11:54.140 --> 00:11:57.280
the plugin system. So you can, I mean,


00:11:57.280 --> 00:12:04.560
Plugins can provide extra fixtures, extra flags, they can modify the output, they can do all sorts of fun things.


00:12:04.560 --> 00:12:11.440
Anyway, the plugin architecture that PyTest uses is not built into PyTest, it's something called Pluggy.


00:12:11.440 --> 00:12:19.520
And there weren't, I mean there are a couple little how-to guides, but they were kind of sparse and I was having trouble.


00:12:19.520 --> 00:12:24.800
I wanted to do a plugin in a little application before and struggled.


00:12:24.800 --> 00:12:31.680
But now here's a here's apparently two python talks one of them held at pygotham and one at pycon india


00:12:31.680 --> 00:12:35.940
And an article around it. So the article is build plugins with pluggy


00:12:35.940 --> 00:12:40.340
It's kind of a nice article. It starts with a small command line application


00:12:40.340 --> 00:12:46.080
That you it like looks for books or something and it has one output format


00:12:46.080 --> 00:12:50.880
And the argument is like wouldn't it be cool if you could have more different kinds of output?


00:12:51.280 --> 00:12:54.480
And one of the ways to do that in an application is to


00:12:54.480 --> 00:12:56.480
allow plugins so that


00:12:56.480 --> 00:13:00.320
anybody can extend the application for a different format.


00:13:00.320 --> 00:13:05.320
Yeah, one thing that's really nice about that is you don't have to understand the whole program and all the code to contribute to it.


00:13:05.320 --> 00:13:07.960
You just have to understand that little tiny plugin interface.


00:13:07.960 --> 00:13:10.360
And if you can handle that, then you basically can


00:13:10.360 --> 00:13:11.000
extend the app.


00:13:11.000 --> 00:13:16.840
Yeah, and one of the beauties of those sorts of things, so I've written plugins for PyTest and I don't understand the internal architecture of PyTest.


00:13:16.840 --> 00:13:20.120
I don't really understand how to do the plugin system that well.


00:13:20.120 --> 00:13:32.120
I mean pretty good but you can take something that's already done and copy it so you can say oh here's another one that also changes the output I want to copy that and change it myself.


00:13:32.120 --> 00:13:39.000
This is kind of how that works it took part of the system of the application and he walks through how you would change the architecture


00:13:38.940 --> 00:13:43.660
to instead of doing the formatting the internal you could do it as a plugin


00:13:43.660 --> 00:13:46.860
and then it talks about the different architecture of pluggy


00:13:46.860 --> 00:13:50.620
because you've got a host and a plugin and a hooks and hook specs


00:13:50.620 --> 00:13:56.220
and all sorts of stuff like that and it's it's actually easy to get lost through this if you're just reading it


00:13:56.220 --> 00:14:01.020
but i suggest walking through the code as he's doing it and actually running the stuff and


00:14:01.020 --> 00:14:07.340
looking at it and there's not really any super easy ways to do plugin systems in python


00:14:07.340 --> 00:14:09.660
I don't know if any language has a better system.


00:14:09.660 --> 00:14:11.180
But plugging is pretty good.


00:14:11.180 --> 00:14:13.740
You know, if you follow along, you can kind of get with it.


00:14:13.740 --> 00:14:14.780
So yeah, very cool.


00:14:14.780 --> 00:14:20.940
I haven't looked to see if the talks are online yet, but I'm looking forward to watching this


00:14:20.940 --> 00:14:21.820
if they do go up.


00:14:21.820 --> 00:14:26.140
I suspect they probably will in the modern age of everything being online.


00:14:26.140 --> 00:14:26.620
Yes.


00:14:26.620 --> 00:14:27.580
Yeah, probably.


00:14:27.580 --> 00:14:28.300
Awesome.


00:14:28.300 --> 00:14:35.980
So let me talk about a little query syntax that I've been wanting in the Python space


00:14:35.980 --> 00:14:43.340
for a long time and you almost have it. It's so close in some ways but so far in others.


00:14:43.340 --> 00:14:49.420
For example, with list comprehensions, generator expressions, all those types of things,


00:14:49.420 --> 00:14:55.900
we can do a lot of in-memory data-like things. We could go and say, if I got a list of numbers,


00:14:55.900 --> 00:15:03.180
I could get the square of the number for all the numbers if the number is every number that's odd


00:15:03.180 --> 00:15:04.580
or some weird thing like that, right?


00:15:04.580 --> 00:15:06.300
That's sort of a query type of thing.


00:15:06.300 --> 00:15:08.780
There's like a where clause, there's a from clause,


00:15:08.780 --> 00:15:11.780
there's a select transformation bit.


00:15:11.780 --> 00:15:16.460
You could even do like paging with slices on the end of it.


00:15:16.460 --> 00:15:18.420
So like skip three pages of five,


00:15:18.420 --> 00:15:22.660
so slice 10 comma 15 or something like that.


00:15:22.660 --> 00:15:26.740
Except there's a few things that are just not there.


00:15:26.740 --> 00:15:28.400
The one that drives me the craziest the most


00:15:28.400 --> 00:15:29.980
is like a sorting by the way.


00:15:29.980 --> 00:15:33.980
Like if you could just do like an order by in a list comprehension,


00:15:33.980 --> 00:15:35.280
Oh, that'd be nice.


00:15:35.280 --> 00:15:38.860
But you can't, and you also can't put a dot sort on the end because that returns none.


00:15:38.860 --> 00:15:44.660
So if there was some way to put like a little bit more together, that would be great.


00:15:44.660 --> 00:15:48.880
And one of the, probably the best implementations of this, I would say


00:15:48.880 --> 00:15:53.320
across all the languages is this thing called link language integrated query in C sharp.


00:15:53.320 --> 00:15:53.900
Yeah.


00:15:53.900 --> 00:15:58.540
And I know it's not about C sharp, but studying that there's a really


00:15:58.540 --> 00:16:03.340
interesting way of basically taking lambda expressions, applying them to


00:16:03.340 --> 00:16:06.580
collections and doing those database like things, but much more where you can


00:16:06.580 --> 00:16:12.980
do like joins, and you can do other sorts of operations that are like paging or


00:16:12.980 --> 00:16:18.380
like filtering by type and all kinds of neat stuff there. So Adam sent over this


00:16:18.380 --> 00:16:24.860
project that he ran across called linkit, which adds link type of in-memory


00:16:24.860 --> 00:16:29.420
query syntax, like almost database syntax to Python lists.


00:16:29.420 --> 00:16:33.780
So like for example, if you had a list of programmers, you could say programmers where


00:16:33.780 --> 00:16:39.740
E, you know, lambda of E goes to E.experience greater than 15, except for Elon Musk, where


00:16:39.740 --> 00:16:44.840
it's the type of, this type of person, you know, category of developer.


00:16:44.840 --> 00:16:46.980
Take three to get only three of them.


00:16:46.980 --> 00:16:51.340
Skip, you know, you could skip like two times three to skip two pages and three to get the


00:16:51.340 --> 00:16:52.920
third page of them.


00:16:52.920 --> 00:16:56.680
You could select just out there variables and then apply more queries to that and do


00:16:56.680 --> 00:17:03.120
this really cool fluent interface on top of these collections, which I think is just super


00:17:03.120 --> 00:17:06.000
neat and I really like this interface.


00:17:06.000 --> 00:17:12.640
So if people like this fluent style of programming and they kind of think in data database type


00:17:12.640 --> 00:17:16.280
of thinking, here's a really cool way to apply that to Python.


00:17:16.280 --> 00:17:17.960
This is kind of cool.


00:17:17.960 --> 00:17:19.440
Yeah, I like it a lot too.


00:17:19.440 --> 00:17:20.700
I like it a whole lot.


00:17:20.700 --> 00:17:26.820
So previously, and by previously, I mean really previously, I don't remember exactly.


00:17:26.820 --> 00:17:27.820
Let me see.


00:17:27.820 --> 00:17:30.660
Use our little search over at Python Bytes.


00:17:30.660 --> 00:17:32.740
Back in episode 106.


00:17:32.740 --> 00:17:35.260
So what is that like?


00:17:35.260 --> 00:17:38.580
Three, four years ago or something like that.


00:17:38.580 --> 00:17:44.460
We talked about this thing called ASQ from 60 North, which is a cool project by, well,


00:17:44.460 --> 00:17:47.820
the guys at 60 North who do a lot of Python.


00:17:47.820 --> 00:17:50.140
And it basically is a similar type of thing.


00:17:50.140 --> 00:17:51.660
as link queries to it.


00:17:51.660 --> 00:17:57.260
But one I didn't like what didn't spark joy in me, I guess on that one is you had


00:17:57.260 --> 00:18:01.740
to like convert everything to this query object and then you could do queries on


00:18:01.740 --> 00:18:06.100
it that you could convert it back to a list, which is like so close, you know.


00:18:06.100 --> 00:18:12.540
But what's neat about this other project, this link it project is it is the things


00:18:12.540 --> 00:18:17.620
that you do, the queries against are a superclass of list or derived from list.


00:18:18.180 --> 00:18:20.480
So anytime a list is expected anywhere,


00:18:20.480 --> 00:18:23.180
you could just pass the result of this around.


00:18:23.180 --> 00:18:24.480
You know, you could do conversions,


00:18:24.480 --> 00:18:25.940
like, "Oh, now it's a queryable thing.


00:18:25.940 --> 00:18:27.780
Oh, now it's not anymore. Now it is again."


00:18:27.780 --> 00:18:30.820
Right? It's kind of always this thing that can stand in as a list


00:18:30.820 --> 00:18:32.480
but actually has this query capability,


00:18:32.480 --> 00:18:36.740
which sounds minor but seems like a big usability benefit, actually.


00:18:36.740 --> 00:18:37.740
Yeah, definitely.


00:18:37.740 --> 00:18:39.880
Because, yeah, you want to be able to write functions


00:18:39.880 --> 00:18:42.180
that can return this and send it to…


00:18:42.180 --> 00:18:43.740
Maybe you want one of these objects again,


00:18:43.740 --> 00:18:45.080
so you can do further queries.


00:18:45.080 --> 00:18:45.540
Exactly.


00:18:45.540 --> 00:18:47.780
Or you can pass it to something that expects a list.


00:18:47.840 --> 00:18:48.880
- That's good. - Yeah, it's pretty good.


00:18:48.880 --> 00:18:51.240
And if you want to upgrade a regular list to a list,


00:18:51.240 --> 00:18:54.640
you just, you know, pass it to the constructor of this like,


00:18:54.640 --> 00:18:57.200
drive list thing, and then now it's like this queryable list.


00:18:57.200 --> 00:19:00.560
So it's not quite as nice as some of the like,


00:19:00.560 --> 00:19:02.920
true language built-in functionality,


00:19:02.920 --> 00:19:05.400
but still, this is quite neat, actually.


00:19:05.400 --> 00:19:06.440
- Yeah, I think I'll play with it,


00:19:06.440 --> 00:19:08.040
because I think that there's some use cases


00:19:08.040 --> 00:19:10.640
that aren't obvious until you start playing with it.


00:19:10.640 --> 00:19:11.920
- And it's really legible, right?


00:19:11.920 --> 00:19:14.400
Like, I would like to, from this group,


00:19:14.400 --> 00:19:16.640
where these are true, select this thing,


00:19:17.480 --> 00:19:19.480
where that is true about the sub thing you got, right?


00:19:19.480 --> 00:19:21.760
Like it's a pretty natural way of reading codes.


00:19:21.760 --> 00:19:22.600
I kind of like it.


00:19:22.600 --> 00:19:25.480
- Yeah, I'm just chuckling about your example though.


00:19:25.480 --> 00:19:27.120
I'm sure you didn't make it up, but.


00:19:27.120 --> 00:19:29.040
- No, this comes from the documentation.


00:19:29.040 --> 00:19:29.880
- What is it?


00:19:29.880 --> 00:19:30.700
So I've got programmers,


00:19:30.700 --> 00:19:32.760
I'm looking for somebody with greater than


00:19:32.760 --> 00:19:34.400
15 years of experience.


00:19:34.400 --> 00:19:37.520
I don't want Elon Musk, something AV type,


00:19:37.520 --> 00:19:38.360
I don't know what that is.


00:19:38.360 --> 00:19:39.320
- Yeah, I don't know what that is either.


00:19:39.320 --> 00:19:41.200
- Take three random people, I guess.


00:19:41.200 --> 00:19:42.760
- That's the first three.


00:19:42.760 --> 00:19:44.200
It's like limit three.


00:19:44.200 --> 00:19:46.000
Yeah, the first three, if there could be thousands,


00:19:46.000 --> 00:19:46.960
just give me the first three.


00:19:46.960 --> 00:19:49.840
first three, find out what they had for lunch,


00:19:49.840 --> 00:19:53.760
and if it was a hot lunch and it was not from Pizza Hut,


00:19:53.760 --> 00:19:58.760
get the last one and get the last slice of the pizza by the,


00:19:58.760 --> 00:19:59.880
yeah.


00:19:59.880 --> 00:20:01.920
- Yeah, so what you end up with, I believe,


00:20:01.920 --> 00:20:04.760
is a list of pizza slices which correspond


00:20:04.760 --> 00:20:06.880
to the last slice of pizza each programmer ate.


00:20:06.880 --> 00:20:07.720
- Oh, okay.


00:20:07.720 --> 00:20:08.540
- I think.


00:20:08.540 --> 00:20:09.380
I haven't read it yet.


00:20:09.380 --> 00:20:10.280
I gotta write some code to make that happen,


00:20:10.280 --> 00:20:12.200
but yeah, I think that's what you end up with.


00:20:12.200 --> 00:20:13.880
- Yeah, okay, cool.


00:20:13.880 --> 00:20:15.880
- Anyway, yeah, pretty neat.


00:20:15.880 --> 00:20:19.080
But this idea of having this sort of natural query language


00:20:19.080 --> 00:20:22.380
that mimics databases, but is in memory,


00:20:22.380 --> 00:20:23.220
could have some legs, I like it.


00:20:23.220 --> 00:20:24.040
- Yeah.


00:20:24.040 --> 00:20:25.220
- All right, what you got for the last one here?


00:20:25.220 --> 00:20:26.060
The last one of yours?


00:20:26.060 --> 00:20:27.740
- Well, this one is,


00:20:27.740 --> 00:20:29.520
I just thought we should announce this


00:20:29.520 --> 00:20:30.860
because it sounded pretty neat,


00:20:30.860 --> 00:20:34.680
although the details of it are a little over my head.


00:20:34.680 --> 00:20:38.080
But so there's a Spotify, deals with music, right?


00:20:38.080 --> 00:20:38.920
- Yes.


00:20:38.920 --> 00:20:39.740
- Probably a lot of music.


00:20:39.740 --> 00:20:41.380
So one of the things they talked about,


00:20:41.380 --> 00:20:42.740
and I'm going to cut to the chase,


00:20:42.740 --> 00:20:46.340
It's an application or a framework called Clio.


00:20:46.340 --> 00:20:49.060
I think I'm pronouncing that right, K-L-I-O,


00:20:49.060 --> 00:20:52.980
for processing audio files, or they say any large binary--


00:20:52.980 --> 00:20:56.700
or any binary files, especially large ones at scale,


00:20:56.700 --> 00:21:02.180
things like maybe pictures or any other binary data.


00:21:02.180 --> 00:21:04.060
Anyway, so it's an application.


00:21:04.060 --> 00:21:05.400
It's used for pipelines.


00:21:05.400 --> 00:21:08.220
It's intended for large scale input and output


00:21:08.220 --> 00:21:11.580
of all these files, scalability, reproducibility,


00:21:11.580 --> 00:21:14.300
working with pipelines and streaming and batching,


00:21:14.300 --> 00:21:18.300
and to try to get it to be easy to use and easy to read


00:21:18.300 --> 00:21:22.220
so that you can have a close collaboration between researchers and engineers.


00:21:22.220 --> 00:21:23.900
It's Python-based.


00:21:23.900 --> 00:21:28.780
It looks pretty cool, and for a lot of people doing research and data pipelines for


00:21:28.780 --> 00:21:31.660
these either audio files or


00:21:31.660 --> 00:21:32.940
vision or


00:21:32.940 --> 00:21:34.940
pictures or something like that, this might be cool.


00:21:34.940 --> 00:21:36.940
Yeah, it could be all sorts of stuff, right?


00:21:36.940 --> 00:21:40.780
I can imagine anytime there's a bunch of computation and a bunch of steps,


00:21:40.780 --> 00:21:44.320
people collecting the data, someone's going to analyze the output on the other end.


00:21:44.320 --> 00:21:45.700
It might be a pretty neat use case.


00:21:45.700 --> 00:21:48.060
Apparently it's built on top of Apache Beam.


00:21:48.060 --> 00:21:54.400
And so it's also cloud agnostic. It does intend to work with cloud services, but


00:21:54.400 --> 00:21:56.600
you can use lots of different ones.


00:21:56.600 --> 00:21:59.400
I'm linking to a couple of announcements


00:21:59.400 --> 00:22:01.400
and an article about it.


00:22:01.400 --> 00:22:06.200
It looks like a large effort and probably a large effort for Spotify to make it open source.


00:22:06.200 --> 00:22:09.540
I think that's pretty cool that they're trying to have this be around.


00:22:09.540 --> 00:22:12.660
One of the articles says this might be useful for people doing,


00:22:12.660 --> 00:22:16.580
like even comparing, you know, dolphin songs or something.


00:22:16.580 --> 00:22:20.900
There's a lot more use cases other than just music to deal with audio files and


00:22:20.900 --> 00:22:21.780
this is kind of neat.


00:22:21.780 --> 00:22:22.820
Yeah, quite cool.


00:22:22.820 --> 00:22:24.740
Is this a project that Lynn Root was working on?


00:22:24.740 --> 00:22:28.020
I saw her posting about, I think it was her, she was posting about something.


00:22:28.020 --> 00:22:28.580
I don't know.


00:22:28.580 --> 00:22:31.460
Anyway, it looks like a really cool project from Spotify.


00:22:31.460 --> 00:22:32.660
Does she work on Spotify?


00:22:32.660 --> 00:22:34.420
She used to, I think she still does.


00:22:34.420 --> 00:22:36.820
I just tried to pull up her GitHub repo, but I couldn't find it,


00:22:36.820 --> 00:22:39.620
or her Twitter account, but I couldn't find it for some reason.


00:22:39.620 --> 00:22:43.220
Anyway, yeah, this is neat. I'm a little bit surprised they open sourced this,


00:22:43.220 --> 00:22:45.620
but at the same time, it seems useful.


00:22:45.620 --> 00:22:48.820
And why are you surprised? Does it seem fairly proprietary?


00:22:48.820 --> 00:22:53.120
No, no, it seems, I guess, like a little mix of a somewhat specialized


00:22:53.120 --> 00:22:55.120
for their world a little bit,


00:22:55.120 --> 00:22:59.620
and then, you know, not at all related to like what Spotify does.


00:22:59.620 --> 00:23:03.820
You know, like it's not, I don't know, it doesn't seem like it feeds back


00:23:03.820 --> 00:23:07.420
anything to Spotify necessarily. But it definitely looks useful. So quite cool.


00:23:07.420 --> 00:23:07.740
- Okay.


00:23:07.740 --> 00:23:10.540
- Yeah. Yeah. Nice. And nice to see Spotify doing that.


00:23:10.540 --> 00:23:14.540
Also nice is getting feedback from listeners, right?


00:23:14.540 --> 00:23:14.780
- Yes.


00:23:14.780 --> 00:23:18.860
- Say like a good quarter of our entire history of our show has been like,


00:23:18.860 --> 00:23:21.500
"And did you know about this? I'm sure you do. You just didn't cover it."


00:23:21.500 --> 00:23:27.340
No, we didn't know about that, but thank you. Now we do. And so Marco Gorelli sent in


00:23:27.340 --> 00:23:31.100
something and says, "Hey, recently you mentioned that it would be really cool if you could have


00:23:31.100 --> 00:23:33.100
you have a Jupyter notebook that just


00:23:33.100 --> 00:23:35.100
is more of a report thing. You could reveal


00:23:35.100 --> 00:23:37.100
the code, but by default the code


00:23:37.100 --> 00:23:39.100
cells are collapsed and hidden. So you can


00:23:39.100 --> 00:23:41.100
just go through it and if you say, "Oh, I actually want to see


00:23:41.100 --> 00:23:43.100
the code for this particular part, show me."


00:23:43.100 --> 00:23:45.100
Yeah. So he sent in


00:23:45.100 --> 00:23:47.100
an article, I guess, walking through how


00:23:47.100 --> 00:23:49.100
you would do that with a notebook.


00:23:49.100 --> 00:23:51.100
So he's like, "Hey, I actually wrote something


00:23:51.100 --> 00:23:53.100
about that, so here you go, in case people


00:23:53.100 --> 00:23:55.100
care about that." So the idea is basically


00:23:55.100 --> 00:23:57.100
set up a Jupyter notebook.


00:23:57.100 --> 00:23:59.100
I'm reading this right. Set up a Jupyter notebook.


00:23:59.100 --> 00:24:02.600
you can tell it to build an HTML file


00:24:02.600 --> 00:24:04.340
that is like a static HTML file


00:24:04.340 --> 00:24:06.800
with all the data that's in there,


00:24:06.800 --> 00:24:09.020
or to save like you would see on GitHub or something


00:24:09.020 --> 00:24:10.500
where it's not actually live and computed,


00:24:10.500 --> 00:24:13.660
but you see the output and you see the cells, right?


00:24:13.660 --> 00:24:16.260
And then go tweak that HTML file.


00:24:16.260 --> 00:24:17.700
Think you tweak the HTML file.


00:24:17.700 --> 00:24:19.140
To just add a little bit of code


00:24:19.140 --> 00:24:21.380
that will use some JavaScript to collapse those.


00:24:21.380 --> 00:24:23.540
So then you can just share that HTML file


00:24:23.540 --> 00:24:27.180
and people can toggle stuff open and closed


00:24:27.180 --> 00:24:29.340
and they get more of a article style output.


00:24:29.340 --> 00:24:30.540
- Oh, nice. - Yeah.


00:24:30.540 --> 00:24:32.780
So nothing like super deep or whatever,


00:24:32.780 --> 00:24:34.740
but it sounds like you're in that space.


00:24:34.740 --> 00:24:36.700
You're like, I really wish I could share this notebook,


00:24:36.700 --> 00:24:40.020
but that 30 lines of Python, it needs to be there,


00:24:40.020 --> 00:24:42.500
but it's not exactly what I want people to see.


00:24:42.500 --> 00:24:44.100
I just want them to see the steps.


00:24:44.100 --> 00:24:46.020
I think this is a pretty neat.


00:24:46.020 --> 00:24:46.860
- Oh, that's cool.


00:24:46.860 --> 00:24:47.680
Yeah. - Yeah.


00:24:47.680 --> 00:24:49.140
- Definitely useful. - Short and sweet, indeed.


00:24:49.140 --> 00:24:50.900
- I love it when that happens, when people,


00:24:50.900 --> 00:24:53.780
we come up with, we're like, I wish this could do this.


00:24:53.780 --> 00:24:55.020
- I wish this existed. - Oh, yeah.


00:24:55.020 --> 00:24:56.460
- Did you know it does? - It does.


00:24:56.460 --> 00:24:57.820
- Yeah.


00:24:57.820 --> 00:24:58.980
- Exactly, exactly.


00:24:58.980 --> 00:25:00.340
- Well, that's our six items.


00:25:00.340 --> 00:25:02.220
Do you have anything extra to talk about?


00:25:02.220 --> 00:25:04.860
- I do have a couple of things


00:25:04.860 --> 00:25:06.540
that are all small little things.


00:25:06.540 --> 00:25:08.980
One, there was this tweet I was mentioned in.


00:25:08.980 --> 00:25:10.500
Let me just read the tweet to you


00:25:10.500 --> 00:25:12.340
and you just tell me how you feel about this, okay?


00:25:12.340 --> 00:25:13.180
- Okay.


00:25:13.180 --> 00:25:15.860
- Okay, so Michelle A. Renard tweeted,


00:25:15.860 --> 00:25:18.540
"The difference between Western and Chinese societies


00:25:18.540 --> 00:25:20.780
"can be compared to M. Kennedy's difference


00:25:20.780 --> 00:25:23.940
"between software 1.0 and software 2.0."


00:25:23.940 --> 00:25:28.200
and it links to the Sanders Media Showdown article.


00:25:28.200 --> 00:25:29.040
What?


00:25:29.040 --> 00:25:31.180
So I saw this, I was like, okay, this is weird.


00:25:31.180 --> 00:25:32.520
We get copied on all sorts of things.


00:25:32.520 --> 00:25:34.960
Like, hey, we're going to copy 20 people


00:25:34.960 --> 00:25:36.220
that talk about stuff on Twitter


00:25:36.220 --> 00:25:37.360
because we published this article


00:25:37.360 --> 00:25:38.280
and we want you to cover it.


00:25:38.280 --> 00:25:40.500
And I'm always like, yeah, not so much.


00:25:40.500 --> 00:25:43.320
But if you hover over this, it says,


00:25:43.320 --> 00:25:45.580
this is actually an AI bot pundit


00:25:45.580 --> 00:25:48.400
trained to sound informed and profound.


00:25:48.400 --> 00:25:50.660
The content mine, the links is popular


00:25:50.660 --> 00:25:53.740
and no tweet is the opinion of the author of the bot.


00:25:53.740 --> 00:25:57.860
I just thought it was really weird that there's like this AI bot going around on the internet,


00:25:57.860 --> 00:26:03.220
you know, using like machine learning and stuff to just randomly be a pundit.


00:26:03.220 --> 00:26:04.220
Weird, right?


00:26:04.220 --> 00:26:05.220
Yeah.


00:26:05.220 --> 00:26:06.780
Anyway, Michelle A. Renard is out there.


00:26:06.780 --> 00:26:08.380
People do all sorts of weird stuff on Twitter.


00:26:08.380 --> 00:26:12.340
Yeah, but randomly like mentioning just other random people on the internet.


00:26:12.340 --> 00:26:15.220
Like, "Hey, that person over here, we're going to compare."


00:26:15.220 --> 00:26:17.860
Anyway, I just thought it was funny and amusing, so I put it up there.


00:26:17.860 --> 00:26:18.860
Yeah.


00:26:18.860 --> 00:26:22.440
It would have been even, I guess, more to the point if they would have said the difference


00:26:22.440 --> 00:26:25.080
between like Python 2 and Python 3.


00:26:25.080 --> 00:26:26.080
I know.


00:26:26.080 --> 00:26:28.440
Well, I'd still be one of the bot.


00:26:28.440 --> 00:26:30.760
Even if it was software 2 and software 3, it would have been closer.


00:26:30.760 --> 00:26:31.760
Yeah, #software even.


00:26:31.760 --> 00:26:32.760
Yeah.


00:26:32.760 --> 00:26:33.760
#software.


00:26:33.760 --> 00:26:35.720
And also, Apple just had their big event a little bit ago.


00:26:35.720 --> 00:26:37.440
Have you got your new Silicon Mac?


00:26:37.440 --> 00:26:38.440
Have you ordered it?


00:26:38.440 --> 00:26:39.440
Silicon Mac?


00:26:39.440 --> 00:26:40.440
Apple Silicon?


00:26:40.440 --> 00:26:41.440
No, I have not.


00:26:41.440 --> 00:26:42.440
No.


00:26:42.440 --> 00:26:43.440
Have you?


00:26:43.440 --> 00:26:44.440
I ordered a new Mac.


00:26:44.440 --> 00:26:46.240
I actually was thinking about getting one of those, which was really interesting because


00:26:46.240 --> 00:26:49.560
it's just, I think it's going to have a lot of knock-on implications.


00:26:49.560 --> 00:26:54.520
Like for example, if you're shipping C code as part of say, like a wheel, will it also


00:26:54.520 --> 00:26:58.760
do you now have to deal with like different platforms on the Mac?


00:26:58.760 --> 00:27:02.720
Will your package actually work on a Silicon Mac?


00:27:02.720 --> 00:27:03.720
I don't know.


00:27:03.720 --> 00:27:04.720
I don't know.


00:27:04.720 --> 00:27:05.720
I don't either.


00:27:05.720 --> 00:27:07.320
But it's going to be interesting.


00:27:07.320 --> 00:27:08.760
I mean, the stuff needs recompiled.


00:27:08.760 --> 00:27:14.640
So I'm mostly wondering what this, these Apple Silicon Macs will mean for Python and its


00:27:14.640 --> 00:27:17.200
packaging ecosystem.


00:27:17.200 --> 00:27:20.160
Are we going to run into a place where like, well, you can't use NumPy on the new Macs


00:27:20.160 --> 00:27:22.040
for like three months?


00:27:22.040 --> 00:27:23.040
I have an idea.


00:27:23.040 --> 00:27:24.040
Okay.


00:27:24.040 --> 00:27:29.000
I think if we get a whole bunch of Patreon followers, they can help us buy each of us


00:27:29.000 --> 00:27:30.640
one of these things.


00:27:30.640 --> 00:27:32.120
And then we can test stuff for people.


00:27:32.120 --> 00:27:33.120
Yeah, there you go.


00:27:33.120 --> 00:27:34.120
Perfect.


00:27:34.120 --> 00:27:39.400
I actually I did buy a new ish 16 inch MacBook Pro that's still Intel because I was hoping


00:27:39.400 --> 00:27:41.520
to get one of these, these new shiny ones.


00:27:41.520 --> 00:27:44.600
But well, if you're not going to make a new one, my current Mac is sort of dying.


00:27:44.600 --> 00:27:46.240
I'm gonna have to buy something.


00:27:46.240 --> 00:27:50.720
So, actually, the whole talk about that actually encouraged me to buy not the AppleCell kind of one,


00:27:50.720 --> 00:27:52.560
but I'm pretty excited to see where that goes.


00:27:52.560 --> 00:27:57.200
They've got some huge ML performance speedups and a lot of interesting things.


00:27:57.200 --> 00:28:01.360
Like the new MacBook Pro, I think, has 17 hours of battery life,


00:28:01.360 --> 00:28:04.320
20 for video playback or something insane like that.


00:28:04.320 --> 00:28:06.640
That's incredible. I've got like six.


00:28:06.640 --> 00:28:08.960
I know. The MacBook Air doesn't even have a fan.


00:28:08.960 --> 00:28:12.480
Like it literally, it can't make a sound because it has no mechanical pieces,


00:28:12.480 --> 00:28:13.760
besides typing, I guess.


00:28:13.760 --> 00:28:17.360
Anyway, just wanted to shout that out, put that out there and see what people thought about


00:28:17.360 --> 00:28:24.000
the new Apple Silicon being like a different app compilation type and what that's going to mean


00:28:24.000 --> 00:28:27.680
for Python and think about it. I mean, I guess it really comes down to what happens to CPython,


00:28:27.680 --> 00:28:32.240
right? Because it'll run under emulation mode if it's not, but if they upgrade CPython to run


00:28:32.240 --> 00:28:37.760
natively on Apple Silicon, then what does that mean for packaging? Could be like a whole deal.


00:28:37.760 --> 00:28:38.400
I don't know.


00:28:38.400 --> 00:28:39.600
Yeah, a big thing.


00:28:39.600 --> 00:28:43.360
Yeah, hopefully not. You shouldn't joke about it, though. It's not funny.


00:28:43.360 --> 00:28:45.360
Everything's funny.


00:28:45.360 --> 00:28:47.360
Alright, then tell us a joke.


00:28:47.360 --> 00:28:49.360
This was sent to us, not sent to us, it was just sent out


00:28:49.360 --> 00:28:51.360
by data, D-E-T-A-H-Q.


00:28:51.360 --> 00:28:53.360
It's a new database.


00:28:53.360 --> 00:28:55.360
They're doing some interesting things.


00:28:55.360 --> 00:28:57.360
They just posted out


00:28:57.360 --> 00:28:59.360
10 E engineers


00:28:59.360 --> 00:29:01.360
are the future.


00:29:01.360 --> 00:29:03.360
Engineers with 10 E's.


00:29:03.360 --> 00:29:05.360
Beautiful. I've got one for you as well.


00:29:05.360 --> 00:29:07.360
This one was, comes to us


00:29:07.360 --> 00:29:09.360
by Richard


00:29:09.360 --> 00:29:11.360
Kearns. I don't know, this one's a little


00:29:11.360 --> 00:29:15.600
a little bit political, but we could probably pull it off, don't you think? A little sensitive.


00:29:15.600 --> 00:29:18.880
Anyway, why did the data scientist get in trouble with animal welfare?


00:29:18.880 --> 00:29:21.760
>> Because she was caught trying to import pandas.


00:29:21.760 --> 00:29:24.800
>> Oh, dear.


00:29:24.800 --> 00:29:28.640
>> Pretty good, right? Yeah, thanks for Richard for writing that one for us. That was a good one.


00:29:28.640 --> 00:29:33.520
>> Caught trying to import pandas. You know it's SPD, come on.


00:29:33.520 --> 00:29:35.920
>> That's funny.


00:29:35.920 --> 00:29:36.400
>> Indeed.


00:29:36.400 --> 00:29:38.000
>> Well, thanks again, Michael.


00:29:38.000 --> 00:29:40.720
>> Yeah. Fun as always. Same time next week?


00:29:40.720 --> 00:29:40.960
>> Yeah.


00:29:40.960 --> 00:29:41.800
- Yeah. - I'll do it again.


00:29:41.800 --> 00:29:42.620
- Bye. - See y'all.


00:29:42.620 --> 00:29:44.320
- Thank you for listening to Python Bytes.


00:29:44.320 --> 00:29:46.800
Follow the show on Twitter @PythonBytes.


00:29:46.800 --> 00:29:49.880
That's Python Bytes as in B-Y-T-E-S.


00:29:49.880 --> 00:29:52.760
And get the full show notes at pythonbytes.fm.


00:29:52.760 --> 00:29:54.980
If you have a news item you want featured,


00:29:54.980 --> 00:29:57.740
just visit pythonbytes.fm and send it our way.


00:29:57.740 --> 00:29:59.860
We're always on the lookout for sharing something cool.


00:29:59.860 --> 00:30:00.920
This is Brian Okken,


00:30:00.920 --> 00:30:03.040
and on behalf of myself and Michael Kennedy,


00:30:03.040 --> 00:30:05.120
thank you for listening and sharing this podcast


00:30:05.120 --> 00:30:06.760
with your friends and colleagues.

