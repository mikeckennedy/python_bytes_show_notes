
00:00:00.000 --> 00:00:02.100
- Hello and welcome to Python Bytes,


00:00:02.100 --> 00:00:04.700
where we deliver Python news and headlines


00:00:04.700 --> 00:00:06.380
directly to your earbuds.


00:00:06.380 --> 00:00:11.380
This is episode 318, recorded January 10th, 2023.


00:00:11.380 --> 00:00:12.700
I'm Michael Kennedy.


00:00:12.700 --> 00:00:13.860
- And I'm Brian Okken.


00:00:13.860 --> 00:00:15.940
- And this episode is brought to you by


00:00:15.940 --> 00:00:17.900
Microsoft for Startups Founders Hub.


00:00:17.900 --> 00:00:20.580
Thanks to Microsoft for again supporting the show.


00:00:20.580 --> 00:00:22.580
And Brian, I just want to let people know real quick


00:00:22.580 --> 00:00:23.420
at the beginning here


00:00:23.420 --> 00:00:25.440
that they should join us here on YouTube.


00:00:25.440 --> 00:00:27.340
Like right now, live if they want.


00:00:27.340 --> 00:00:30.580
They could go to pythonbytes.fm/stream/live,


00:00:30.580 --> 00:00:33.200
or just go to the website and click live stream at the top.


00:00:33.200 --> 00:00:37.420
We typically record on Tuesdays at 11 a.m. at Pacific time.


00:00:37.420 --> 00:00:40.020
And you can also see the older video versions,


00:00:40.020 --> 00:00:41.140
people want to find them there.


00:00:41.140 --> 00:00:43.380
So, it's always nice to have people in the audience.


00:00:43.380 --> 00:00:46.100
- And we also put information in there


00:00:46.100 --> 00:00:47.020
about future episodes.


00:00:47.020 --> 00:00:49.820
So if for some reason it changes, we keep that up to--


00:00:49.820 --> 00:00:50.660
- Yeah, exactly.


00:00:50.660 --> 00:00:51.860
(laughing)


00:00:51.860 --> 00:00:53.260
Usually what I'll do is I'll just schedule


00:00:53.260 --> 00:00:55.540
whatever time we're gonna record a week in advance


00:00:55.540 --> 00:00:58.800
and YouTube will notify you if you smash the bell,


00:00:58.800 --> 00:00:59.940
you know, that sort of thing.


00:00:59.940 --> 00:01:01.220
- Smash the bell, yeah.


00:01:01.220 --> 00:01:02.940
- What do you got to kick us off with today?


00:01:02.940 --> 00:01:04.660
- Well, I wanna start with something


00:01:04.660 --> 00:01:06.540
like right out of the presses.


00:01:06.540 --> 00:01:11.540
So we, PEP 703, this was suggested by Will Shanks


00:01:11.540 --> 00:01:16.060
and the author is Sam Gross and it really was,


00:01:16.060 --> 00:01:19.780
the PEP was created just yesterday, January 9th,


00:01:19.780 --> 00:01:22.620
or at least, yeah, so that's pretty cool.


00:01:22.620 --> 00:01:24.800
So very-- - Still has that new PEP smell.


00:01:24.800 --> 00:01:26.840
- Yeah, it has that new PEP smell.


00:01:26.840 --> 00:01:32.880
And also one of the things that the PEP thing,


00:01:32.880 --> 00:01:37.840
peps.python.org has a dark mode and light mode thing.


00:01:37.840 --> 00:01:40.080
I didn't know that, I was playing with that today.


00:01:40.080 --> 00:01:44.480
Anyway, so the PEP 703 is making the GIL


00:01:44.480 --> 00:01:46.880
optional in CPython.


00:01:46.880 --> 00:01:48.800
I knew that there was talk about this,


00:01:48.800 --> 00:01:52.880
I heard Guido talking about it, possibly going in 3.12,


00:01:52.880 --> 00:01:55.280
but I didn't know if it really was.


00:01:55.280 --> 00:01:57.360
And it does, I mean, it's still in draft stage,


00:01:57.360 --> 00:02:01.840
so it's not promised yet, but it's targeting 3.12,


00:02:01.840 --> 00:02:04.160
which is the one that's being worked on right now.


00:02:04.160 --> 00:02:05.720
It's pretty exciting.


00:02:05.720 --> 00:02:07.040
- Yeah, a couple things that jump out


00:02:07.040 --> 00:02:09.000
from reading just the title.


00:02:09.000 --> 00:02:11.000
Optional, not removal.


00:02:11.000 --> 00:02:11.840
- Yeah.


00:02:11.840 --> 00:02:13.760
- Okay, that's interesting.


00:02:13.760 --> 00:02:16.320
I have, like you said, it's still brand new,


00:02:16.320 --> 00:02:18.320
so I haven't got a chance to research this a lot yet


00:02:18.320 --> 00:02:20.960
to understand the nuances of what that is.


00:02:20.960 --> 00:02:23.500
But a lot of the prior talk,


00:02:23.500 --> 00:02:26.600
we had the Gilectomy and other things like that.


00:02:26.600 --> 00:02:29.180
Eric Snow's sub-interpreters,


00:02:29.180 --> 00:02:30.640
all of those were about how do we


00:02:30.640 --> 00:02:33.160
remove the GIL or effectively remove it.


00:02:33.160 --> 00:02:35.400
This is like, well, maybe.


00:02:35.400 --> 00:02:37.080
>> Not really. It is not


00:02:37.080 --> 00:02:40.000
really optionally selectable while you're running.


00:02:40.000 --> 00:02:43.400
The option is a compile-time flag.


00:02:43.400 --> 00:02:50.040
We probably should link to that really long interview with Guido.


00:02:50.040 --> 00:02:53.280
But there's an interview with Guido van Rossum


00:02:53.280 --> 00:02:57.440
that in it he talks about some of the GIL challenges.


00:02:57.440 --> 00:02:59.840
It's an interesting bit of conversation.


00:02:59.840 --> 00:03:01.480
Anyway, so there's a flag,


00:03:01.480 --> 00:03:04.400
a --without-gil flag that's going to be


00:03:04.400 --> 00:03:07.920
added for compiling CPython.


00:03:07.920 --> 00:03:10.200
When I first heard this, I'm like,


00:03:10.200 --> 00:03:13.200
well, I don't really want to compile CPython.


00:03:13.200 --> 00:03:15.240
I mean, I could, but I'm not that kind of


00:03:15.240 --> 00:03:18.080
guy that likes to do that in their free time.


00:03:18.080 --> 00:03:21.080
So we have good news, I'll share that with you later.


00:03:21.080 --> 00:03:27.480
But the idea around this is, and there's a lot of interest


00:03:27.480 --> 00:03:30.580
because there's a lot more scientific computing


00:03:30.580 --> 00:03:32.880
and machine learning and all this sort of stuff


00:03:32.880 --> 00:03:36.080
that's running on Python now that wasn't before


00:03:36.080 --> 00:03:38.380
or just I don't know what it was doing before.


00:03:38.380 --> 00:03:40.880
But there's a lot of interest in this.


00:03:40.880 --> 00:03:44.980
And scientific computing especially has a lot of concurrency


00:03:44.980 --> 00:03:47.380
that you can speed things up dramatically


00:03:47.380 --> 00:03:50.580
if you've got like these huge vectors


00:03:50.580 --> 00:03:52.300
that you can all compute at the same time.


00:03:52.300 --> 00:03:54.260
So there's ways around it.


00:03:54.260 --> 00:03:56.920
We have some really fast libraries that can do this,


00:03:56.920 --> 00:03:58.980
but these are like engineering feats


00:03:58.980 --> 00:04:01.060
that people have to do to make this all work,


00:04:01.060 --> 00:04:05.600
and they're usually in C API extensions and whatnot.


00:04:05.600 --> 00:04:10.180
So some of the motivation is that there's a lot of


00:04:10.180 --> 00:04:13.940
obstacles for concurrency because the GIL is in place.


00:04:13.940 --> 00:04:16.500
So what do we do? I'm going to jump to


00:04:16.500 --> 00:04:18.840
the distribution part,


00:04:18.840 --> 00:04:20.740
which I'm pretty excited about.


00:04:20.740 --> 00:04:25.700
Distribution. The distribution is going to be easier than I thought.


00:04:25.700 --> 00:04:28.260
I thought people are going to have to build it themselves.


00:04:28.260 --> 00:04:30.340
It doesn't look like that's the case.


00:04:30.340 --> 00:04:34.820
It looks like Sam is going to work with Anaconda to


00:04:34.820 --> 00:04:37.300
distribute a without-gill version of


00:04:37.300 --> 00:04:40.940
Python together with compatible packages.


00:04:40.940 --> 00:04:45.180
This will take time. One of the things that is going to be important is to get


00:04:45.180 --> 00:04:49.680
this out is like quickly so that people can start building packages.


00:04:49.680 --> 00:04:54.520
Because in one of the reasons why I'm glad this is like almost a different distribution.


00:04:54.520 --> 00:04:56.040
I know this is going to be a lot of work,


00:04:56.040 --> 00:05:02.920
but people can't really use it until the packages that allow them to use it,


00:05:02.920 --> 00:05:05.720
are there, straight Python.


00:05:05.720 --> 00:05:07.440
>> The C layer might,


00:05:07.440 --> 00:05:08.840
if you're integrating with C or something,


00:05:08.840 --> 00:05:13.280
it might assume that there's a GIL and not the safety it needs to do or something.


00:05:13.280 --> 00:05:16.520
Right. And even if there's no changes that have to be made,


00:05:16.520 --> 00:05:21.560
they're going to be, these packages are going to have to be recompiled.


00:05:21.560 --> 00:05:25.760
But there probably are changes they have to make, but they're trying to keep it to a minimum.


00:05:25.760 --> 00:05:28.260
But anyway, they'll at least have to get recompiled,


00:05:28.260 --> 00:05:31.660
and they'll be not binary compatible with both versions of Python.


00:05:31.660 --> 00:05:34.460
So we'll have this two Python world for a little bit.


00:05:34.460 --> 00:05:38.760
But it's really targeted, and I think going through Anaconda is a good way to do it.


00:05:38.760 --> 00:05:41.780
it's targeted to people developing


00:05:41.780 --> 00:05:45.480
these C API extensions so that they can start developing it.


00:05:45.480 --> 00:05:47.240
That's pretty neat.


00:05:47.240 --> 00:05:51.280
This collection of packages that already support


00:05:51.280 --> 00:05:55.200
the GIL lists Python will grow over time.


00:05:55.200 --> 00:05:58.000
I'm okay with having that be


00:05:58.000 --> 00:06:00.440
coordinated through Nandicond that seems reasonable.


00:06:00.440 --> 00:06:01.120
>> Yeah.


00:06:01.120 --> 00:06:03.220
>> One of the things I loved about this article


00:06:03.220 --> 00:06:05.640
is it talked about some of the challenges.


00:06:05.640 --> 00:06:08.840
I'm zooming really fast, apologies for people watching the video.


00:06:08.840 --> 00:06:13.160
But there's a lot of discussion around the motivation of all the, a lot of the difficulties


00:06:13.160 --> 00:06:19.720
of different types of parallelism that you are hard to express with the GIL in place.


00:06:19.720 --> 00:06:23.880
And it's just an interesting, this part's an interesting read.


00:06:23.880 --> 00:06:28.120
There's effects on Python library usability.


00:06:28.120 --> 00:06:34.120
There's effects, you want to be able to GPU heavy workloads require multi-core processing


00:06:34.120 --> 00:06:35.960
to coordinate the whole thing together.


00:06:35.960 --> 00:06:41.480
There's a lot of stuff that we've done engineering-wise to work around the gill.


00:06:41.480 --> 00:06:45.720
And it's kind of exciting that this is-- I didn't think-- actually didn't see this


00:06:45.720 --> 00:06:47.320
happening this quickly.


00:06:47.320 --> 00:06:48.520
So this is pretty exciting.


00:06:48.520 --> 00:06:50.280
>> Yeah, this came out of the blue for me too.


00:06:50.280 --> 00:06:55.880
>> The-- one of the things that the discussion-- oh, cool, I found it.


00:06:55.880 --> 00:06:57.800
The-- what's going to change?


00:06:57.800 --> 00:07:02.520
So I had this surprise to me-- the surprise to me was that the-- there's supposedly going


00:07:02.520 --> 00:07:06.400
going to be relatively few changes to the public Python


00:07:06.400 --> 00:07:07.680
and C APIs.


00:07:07.680 --> 00:07:11.360
So this isn't like moving from Python 2 to Python 3,


00:07:11.360 --> 00:07:13.200
you have to rewrite your Python code.


00:07:13.200 --> 00:07:15.800
Hopefully you won't have to change your Python code at all.


00:07:15.800 --> 00:07:17.480
It's going to be some of these extensions.


00:07:17.480 --> 00:07:20.840
And these are, I mean, like the people writing NumPy


00:07:20.840 --> 00:07:22.920
and things like that, pandas,


00:07:22.920 --> 00:07:25.440
they're probably going to have to do some changes


00:07:25.440 --> 00:07:27.640
and Pillow and, you know,


00:07:27.640 --> 00:07:32.360
like PyTorch and things like that.


00:07:32.360 --> 00:07:33.600
they really care about this


00:07:33.600 --> 00:07:34.900
and they're going to be working with it.


00:07:34.900 --> 00:07:37.200
But they're the ones that didn't want the GIL there


00:07:37.200 --> 00:07:38.040
in the first place.


00:07:38.040 --> 00:07:40.400
So I think they're motivated to make these changes.


00:07:40.400 --> 00:07:41.280
It's pretty exciting.


00:07:41.280 --> 00:07:43.200
But okay, so what is changing?


00:07:43.200 --> 00:07:45.040
And a lot of the internals of CPython.


00:07:45.040 --> 00:07:48.360
So there's, and I think this is a fascinating thing


00:07:48.360 --> 00:07:51.480
just as a, like a computer science discussion


00:07:51.480 --> 00:07:54.720
of this is a big problem, what are the problems?


00:07:54.720 --> 00:07:56.240
Well, there's, and how do we,


00:07:56.240 --> 00:07:57.640
what are the changes to solve it?


00:07:57.640 --> 00:08:00.320
And there's reference counting and memory management,


00:08:00.320 --> 00:08:04.320
container thread safety, like if you've got multiple threads


00:08:04.320 --> 00:08:06.880
using the same list, how do you deal with that?


00:08:06.880 --> 00:08:08.900
Locking and atomic APIs.


00:08:08.900 --> 00:08:11.160
And there's a great discussion in here on all those.


00:08:11.160 --> 00:08:13.840
So I really loved this just as a refresher


00:08:13.840 --> 00:08:17.020
of some of these CS topics and how they're still relevant


00:08:17.020 --> 00:08:18.600
in today's programming.


00:08:18.600 --> 00:08:19.680
So it's pretty cool.


00:08:19.680 --> 00:08:22.200
- Yeah, yeah, the container one's pretty interesting,


00:08:22.200 --> 00:08:27.200
especially with Python's extreme dependency upon dictionaries


00:08:27.200 --> 00:08:28.560
- Yes.


00:08:28.560 --> 00:08:30.120
- Even being like the foundation of classes


00:08:30.120 --> 00:08:31.680
and stuff.


00:08:31.680 --> 00:08:33.680
The reference counting is the one that's always


00:08:33.680 --> 00:08:35.480
been held out as a holdup, right?


00:08:35.480 --> 00:08:36.760
Like, well, we have reference counting


00:08:36.760 --> 00:08:38.880
and that can be so fast because we don't have to do


00:08:38.880 --> 00:08:42.040
any locking or any thread safety around it.


00:08:42.040 --> 00:08:44.280
As soon as you remove the gill,


00:08:44.280 --> 00:08:46.040
all that stuff goes out the window.


00:08:46.040 --> 00:08:49.800
It talks about a couple of building on one of the things


00:08:49.800 --> 00:08:52.280
that was done previously, which is pretty interesting.


00:08:52.280 --> 00:08:55.160
You know, Sam Gross behind this and a bunch of other folks


00:08:55.160 --> 00:08:57.680
have just put together a whole host.


00:08:57.680 --> 00:08:59.740
You know, a lot of this comes out of Cinder,


00:08:59.740 --> 00:09:03.840
I believe at Meta, there's a lot of small building blocks.


00:09:03.840 --> 00:09:05.960
This is not just like, well, here's the change.


00:09:05.960 --> 00:09:07.680
One of the things that I saw in


00:09:07.680 --> 00:09:14.080
the reference counting section is immortalizing objects.


00:09:14.080 --> 00:09:14.680
>> Oh, yeah.


00:09:14.680 --> 00:09:16.360
>> One of the things was,


00:09:16.360 --> 00:09:18.760
can we make it so they basically,


00:09:18.760 --> 00:09:21.960
we're pretty sure that we don't want to ever remove these.


00:09:21.960 --> 00:09:23.600
We're just going to take them out of


00:09:23.600 --> 00:09:25.760
the reference counting checks and just


00:09:25.760 --> 00:09:28.560
assume that they're going to be here for the life of the program.


00:09:28.560 --> 00:09:29.040
>> Yeah.


00:09:29.040 --> 00:09:33.500
just for performance and memory caching and all that kind of stuff.


00:09:33.500 --> 00:09:35.660
However, you also don't have to lock


00:09:35.660 --> 00:09:37.360
something that you're not incrementing and


00:09:37.360 --> 00:09:40.060
decrementing because you've decided not ever to do that.


00:09:40.060 --> 00:09:44.960
So there's some interesting piling on effects and also it was talking about,


00:09:44.960 --> 00:09:46.380
I don't remember the word,


00:09:46.380 --> 00:09:51.820
but something about a certain lock-free thread safe type of way


00:09:51.820 --> 00:09:55.740
to do the increment for the reference counting.


00:09:55.740 --> 00:09:57.540
>> I mean, I was familiar with just like


00:09:57.540 --> 00:09:59.460
brute force reference counting, of course,


00:09:59.460 --> 00:10:02.940
it's a common way to deal with shared objects.


00:10:02.940 --> 00:10:05.860
But one of the things I loved about this is


00:10:05.860 --> 00:10:07.780
the discussion around biased reference


00:10:07.780 --> 00:10:09.700
counting and deferred reference counting.


00:10:09.700 --> 00:10:12.680
The notion that statistically looking at


00:10:12.680 --> 00:10:15.160
how multi-threaded applications work,


00:10:15.160 --> 00:10:23.000
most objects are only accessed by one thread.


00:10:23.000 --> 00:10:25.860
There's not that many objects that are shared.


00:10:25.860 --> 00:10:32.420
So having each object having a thread owner and the process for what reference counting


00:10:32.420 --> 00:10:41.100
is for the owner is different than the process for the non-thread owner people accessing


00:10:41.100 --> 00:10:42.220
the object.


00:10:42.220 --> 00:10:47.620
And all of this is hopefully invisible to the people using it.


00:10:47.620 --> 00:10:52.300
I mean, clearly at some point we're going to have to have some way in Python to be able


00:10:52.300 --> 00:10:55.660
to utilize this.


00:10:55.660 --> 00:10:58.500
It can't be invisible forever.


00:10:58.500 --> 00:11:00.040
So it'll be interesting.


00:11:00.040 --> 00:11:01.900
- Yeah, the bias reference counting,


00:11:01.900 --> 00:11:02.900
that's the word I was looking for.


00:11:02.900 --> 00:11:04.440
That's pretty interesting.


00:11:04.440 --> 00:11:06.500
Like the owner thread might not have to lock it.


00:11:06.500 --> 00:11:10.020
It just does whatever and the others have to care.


00:11:10.020 --> 00:11:13.220
- Well, and also a lot of this is around,


00:11:13.220 --> 00:11:14.500
I mean, we do reference counting,


00:11:14.500 --> 00:11:17.100
but partly because of the reference counting


00:11:17.100 --> 00:11:19.220
and how our object model is.


00:11:19.220 --> 00:11:20.940
I mean, one of the things I was surprised by


00:11:20.940 --> 00:11:24.300
when I moved from C++ to Python or picked up Python


00:11:24.300 --> 00:11:30.540
with objects and everything is that like in C++ you totally know when the destructor happens.


00:11:30.540 --> 00:11:34.940
But in Python we don't really talk about destructors too much. We have constructors,


00:11:34.940 --> 00:11:38.620
but we don't really put a ton of work into structures because you don't really know when


00:11:38.620 --> 00:11:45.100
it's going to really go away. And I think that's a good thing because now we can say it's actually


00:11:45.100 --> 00:11:48.620
going to be a little bit longer. You thought it was going to, you know, it probably would have


00:11:48.620 --> 00:11:53.260
disappeared earlier, but we're going to defer that and have a garbage collection phase where it also


00:11:53.260 --> 00:11:58.700
includes making sure that the threads are concurrency is saved and stuff like that.


00:11:58.700 --> 00:12:00.060
So yeah, interesting.


00:12:00.060 --> 00:12:02.460
>> It's a very fascinating read.


00:12:02.460 --> 00:12:04.700
I just had a quick read of it this morning, but.


00:12:04.700 --> 00:12:07.500
>> It looks very clever and I'm all for it.


00:12:07.500 --> 00:12:08.060
I'm here for it.


00:12:08.060 --> 00:12:08.460
Let's do this.


00:12:08.460 --> 00:12:12.940
>> I don't want to like paint it too rosy and everybody paying attention to this


00:12:12.940 --> 00:12:17.260
knows that there is a performance hit for single threaded stuff.


00:12:17.260 --> 00:12:19.580
So, and I thought it was going to be larger.


00:12:20.300 --> 00:12:26.620
The reference in here talks about somewhere between a 5% and 10% performance hit.


00:12:26.620 --> 00:12:29.660
But we've already seen these like massive gains in performance.


00:12:29.660 --> 00:12:35.020
And the work on improving the performance of Python is going to continue.


00:12:35.020 --> 00:12:36.940
So I'm personally optimistic.


00:12:36.940 --> 00:12:43.260
I think that the gains in performance elsewhere are going to far outweigh the


00:12:43.260 --> 00:12:46.300
possible slowdown of single-threaded stuff.


00:12:46.300 --> 00:12:51.300
I mean, a lot of people don't really care about 5% difference.


00:12:51.300 --> 00:12:54.300
I mean, the code they're running, that's more simple.


00:12:54.300 --> 00:12:57.300
It's probably not performance sensitive a lot of the times.


00:12:57.300 --> 00:13:02.300
And when it is, you might be trying to squeeze even more performance out of it, right?


00:13:02.300 --> 00:13:05.300
And, you know, my little mini here has eight cores.


00:13:05.300 --> 00:13:07.300
Python only cares about one of them.


00:13:07.300 --> 00:13:13.300
If I could use all eight or six or something, I could do way more than 5% better.


00:13:13.300 --> 00:13:15.300
You know, so I could more than make up for that.


00:13:15.300 --> 00:13:17.940
up for that if I actually leverage this feature.


00:13:17.940 --> 00:13:18.780
- Yeah.


00:13:18.780 --> 00:13:19.940
- And if I don't care about performance,


00:13:19.940 --> 00:13:22.020
plus or minus 5%, probably doesn't matter.


00:13:22.020 --> 00:13:23.780
- Yeah, I don't, I don't, I don't,


00:13:23.780 --> 00:13:25.020
I think they have to bring it up


00:13:25.020 --> 00:13:26.740
because there's gonna be people saying,


00:13:26.740 --> 00:13:28.180
ah, but it's gonna be slower.


00:13:28.180 --> 00:13:29.660
And so I'm glad that--


00:13:29.660 --> 00:13:31.340
- Yeah, and that's also, that's always been the reason


00:13:31.340 --> 00:13:33.300
we still have the gill, is it's like,


00:13:33.300 --> 00:13:35.940
we like to make changes, but they make a con,


00:13:35.940 --> 00:13:38.620
the most common use case less good, so we're not doing it.


00:13:38.620 --> 00:13:40.540
But maybe this is close enough,


00:13:40.540 --> 00:13:43.660
possible improvements, even down the road, so yeah.


00:13:43.660 --> 00:13:50.020
Yeah, I'm just it's gonna be I'm excited to see how this how this pans out. So yeah, I'm excited as well


00:13:50.020 --> 00:13:53.480
They're very cool. I would say certainly the biggest


00:13:53.480 --> 00:13:56.520
News of the show is right here


00:13:56.520 --> 00:14:01.020
And we got some good jokes and stuff people can stick around for those. Yeah. Yeah stick around till the end


00:14:01.020 --> 00:14:06.300
Okay, what do you got for us next? All right. Well, I want to tell you about the ferret


00:14:06.300 --> 00:14:11.420
We heard a ferret DB have not like a mongoose, but it's not quite a I honestly


00:14:11.420 --> 00:14:14.420
if you showed me a mongoose and a ferret and said,


00:14:14.420 --> 00:14:16.220
which is which, I don't know if I could tell.


00:14:16.220 --> 00:14:18.700
Maybe the ferret mongooses are more intense,


00:14:18.700 --> 00:14:20.940
I don't know, but ferrets are more pet-like.


00:14:20.940 --> 00:14:22.140
They're pretty similar, right?


00:14:22.140 --> 00:14:24.460
>> Is Mongo from mongoose?


00:14:24.460 --> 00:14:26.520
>> No, it's from humongous.


00:14:26.520 --> 00:14:29.980
But there are some frameworks in


00:14:29.980 --> 00:14:33.700
the JavaScript space called mongoose from the Node.js side.


00:14:33.700 --> 00:14:38.740
Anyway, so ferretDB is this thing that I think someone told me about.


00:14:38.740 --> 00:14:41.080
Let me see if I got some credit.


00:14:41.080 --> 00:14:44.620
Yeah, this comes from John Bultmeier,


00:14:44.620 --> 00:14:45.860
and thanks for sending that in,


00:14:45.860 --> 00:14:47.800
and said, ran across this.


00:14:47.800 --> 00:14:50.000
So FerretDB is pretty interesting.


00:14:50.000 --> 00:14:50.880
We'll see where it goes.


00:14:50.880 --> 00:14:54.760
It's a truly open source MongoDB alternative.


00:14:54.760 --> 00:14:57.920
By the way, I'm going to accept the cookies.


00:14:57.920 --> 00:14:59.240
You know, a cool way you don't have


00:14:59.240 --> 00:15:02.900
to have cookie policy pop-ups is not to track other people.


00:15:02.900 --> 00:15:06.640
That's even better, but I'll go ahead and accept it for them.


00:15:06.640 --> 00:15:08.120
Our site doesn't have any, does it, Brian?


00:15:08.120 --> 00:15:09.880
'Cause we don't have third-party cookies.


00:15:09.880 --> 00:15:14.600
So 5,000 GitHub stars already, that's pretty incredible.


00:15:14.600 --> 00:15:17.440
And these folks are big fans of MongoDB


00:15:17.440 --> 00:15:22.440
and also really big fans of 100% true open source.


00:15:22.440 --> 00:15:25.280
And that's why they decided to make this thing


00:15:25.280 --> 00:15:26.160
called FerretDB.


00:15:26.160 --> 00:15:28.480
So here I'll read from their page a bit.


00:15:28.480 --> 00:15:31.520
MongoDB is a life-changing technology for many developers,


00:15:31.520 --> 00:15:33.920
empowering them to build applications faster


00:15:33.920 --> 00:15:35.480
than using relational databases.


00:15:35.480 --> 00:15:39.360
Yes, however, MongoDB abandoned its open source roots,


00:15:39.360 --> 00:15:41.860
changing the license to SSPL,


00:15:41.860 --> 00:15:43.660
making it unusable for many open source


00:15:43.660 --> 00:15:44.980
and commercial projects.


00:15:44.980 --> 00:15:46.820
Now, MongoDB is still open source,


00:15:46.820 --> 00:15:48.940
but this is like, I'm pretty sure this license


00:15:48.940 --> 00:15:51.860
is basically you can't make our thing as a service


00:15:51.860 --> 00:15:53.560
and then sell it without us.


00:15:53.560 --> 00:15:57.180
Like AWS had a MongoDB as a service,


00:15:57.180 --> 00:16:01.260
and Mongo's like, "Uh, hello, we didn't expect it


00:16:01.260 --> 00:16:02.540
"to be used in this way."


00:16:02.540 --> 00:16:04.020
So I don't think it's, I mean,


00:16:04.020 --> 00:16:06.580
it's not like a huge bash against Mongo,


00:16:06.580 --> 00:16:07.420
I don't really think.


00:16:07.420 --> 00:16:10.800
But if you really wanted it to be unencumbered entirely,


00:16:10.800 --> 00:16:12.660
well, MongoDB is not it, right?


00:16:12.660 --> 00:16:13.500
- Right.


00:16:13.500 --> 00:16:14.700
- So here's the idea.


00:16:14.700 --> 00:16:19.460
So FerretDB is built on top of PostgreSQL,


00:16:19.460 --> 00:16:22.860
but it is wire compatible with MongoDB.


00:16:22.860 --> 00:16:27.100
That is, you can use the different libraries


00:16:27.100 --> 00:16:29.060
or drivers from different languages,


00:16:29.060 --> 00:16:32.020
you know, Python, JavaScript, .NET, whatever.


00:16:32.020 --> 00:16:34.620
You should be able to just change the connection string


00:16:34.620 --> 00:16:37.120
over to the FerretDB, and off it goes.


00:16:37.120 --> 00:16:42.120
And it exchanges the binary JSON encoding across the wire


00:16:42.120 --> 00:16:44.760
just like MongoDB does.


00:16:44.760 --> 00:16:49.240
I'm guessing they're using the JSON column stuff


00:16:49.240 --> 00:16:51.560
in PostgreSQL to match.


00:16:51.560 --> 00:16:54.000
Couldn't imagine they're trying to do a relational thing


00:16:54.000 --> 00:16:54.840
over there.


00:16:54.840 --> 00:16:56.400
They're probably just like stashing the blobs.


00:16:56.400 --> 00:16:58.660
But yeah, it's pretty neat.


00:16:58.660 --> 00:16:59.560
What do you think?


00:16:59.560 --> 00:17:03.080
- That's actually, the architecture of that sounds great


00:17:03.080 --> 00:17:05.560
for an open source project to not try to do


00:17:05.560 --> 00:17:09.240
the entire database backend, but built on top of Postgres.


00:17:09.240 --> 00:17:12.160
- Yeah, I mean, there's EdgeDB, right,


00:17:12.160 --> 00:17:15.360
which is quite popular in the Python space,


00:17:15.360 --> 00:17:17.320
and I believe they're doing basically the same thing.


00:17:17.320 --> 00:17:19.040
Like build something, yeah,


00:17:19.040 --> 00:17:20.920
powered by Postgres under the hood.


00:17:20.920 --> 00:17:22.200
Maybe just the query engine,


00:17:22.200 --> 00:17:24.040
I'm not sure if the database engine as well


00:17:24.040 --> 00:17:26.360
for the EdgeDB folks, I interviewed them,


00:17:26.360 --> 00:17:29.120
but still pretty neat, I can get ahead with the joke.


00:17:29.120 --> 00:17:31.720
Yeah, so FerDB, formerly MangoDB,


00:17:31.720 --> 00:17:34.400
is an open source proxy that translates


00:17:34.400 --> 00:17:38.400
MongoDB wire protocol queries to SQL with Postgres


00:17:38.400 --> 00:17:40.880
as a Postgres SQL as the database engine.


00:17:40.880 --> 00:17:43.280
- Mango DB, that's a little bit too close, I think.


00:17:43.280 --> 00:17:44.640
- Yeah, a little bit.


00:17:44.640 --> 00:17:47.320
Mango, yeah, that's maybe pushing it.


00:17:47.320 --> 00:17:51.320
So yeah, you pretty much write the regular MongoDB code


00:17:51.320 --> 00:17:53.880
that you would write, but it apparently works.


00:17:53.880 --> 00:17:57.040
Now somewhere, I don't know where the roadmap is.


00:17:57.040 --> 00:17:58.080
Let's see.


00:17:58.080 --> 00:17:59.360
They did a blog post, yeah,


00:17:59.360 --> 00:18:00.680
maybe that's where I should be looking.


00:18:00.680 --> 00:18:02.000
And on the blog post,


00:18:02.000 --> 00:18:04.680
they have something about their roadmap.


00:18:04.680 --> 00:18:06.920
I don't know, I'll link to it if I can find it.


00:18:06.920 --> 00:18:09.920
But there's a FerretDB roadmap


00:18:09.920 --> 00:18:13.000
and there's one really notable thing


00:18:13.000 --> 00:18:15.640
that people are gonna need to be holding out for,


00:18:15.640 --> 00:18:16.960
and that's indexes.


00:18:16.960 --> 00:18:17.920
- Oh, okay.


00:18:17.920 --> 00:18:21.440
- And so if you don't have indexes,


00:18:21.440 --> 00:18:24.360
you have a real hard time doing fast database stuff.


00:18:24.360 --> 00:18:26.800
So I think they said they're trying to get it


00:18:26.800 --> 00:18:29.480
kind of all finished up by the end of 2023.


00:18:29.480 --> 00:18:30.800
So this is not like a,


00:18:30.800 --> 00:18:34.720
hey, you should just jump right on this and run with it.


00:18:34.720 --> 00:18:37.760
Because I don't think it's far enough along.


00:18:37.760 --> 00:18:40.160
It's written in Go for what that's worth.


00:18:40.160 --> 00:18:42.180
MongoDB itself is written in C,


00:18:42.180 --> 00:18:44.600
so it's not like it makes it more or less friendly


00:18:44.600 --> 00:18:45.680
to Python folks.


00:18:45.680 --> 00:18:48.080
So, oh, here's the public roadmap, perfect.


00:18:48.080 --> 00:18:49.800
So it's all linked off their GitHub pages.


00:18:49.800 --> 00:18:51.280
And so you can see the end of alpha


00:18:51.280 --> 00:18:53.160
is supposed to be in the past,


00:18:53.160 --> 00:18:55.040
and it does look like they're all done.


00:18:55.040 --> 00:18:57.340
You can see their beta stuff they're working on.


00:18:57.340 --> 00:18:59.420
But then for general availability,


00:18:59.420 --> 00:19:02.380
this index stuff that's supposed to come,


00:19:02.380 --> 00:19:05.140
actually I said 2023, this is supposed to be done


00:19:05.140 --> 00:19:08.620
in January 2023, which felt like a long time ago,


00:19:08.620 --> 00:19:10.340
not long ago, but that's actually now.


00:19:10.340 --> 00:19:12.260
So I don't know how far along it is,


00:19:12.260 --> 00:19:16.860
but support for issues, for rather indexes,


00:19:16.860 --> 00:19:18.580
look at this issue here,


00:19:18.580 --> 00:19:19.640
I don't see a lot of traffic on it,


00:19:19.640 --> 00:19:22.300
but still it would be basically required, right?


00:19:22.300 --> 00:19:25.420
If you've got many, many gigs of data,


00:19:25.420 --> 00:19:27.420
then you have to have indexes.


00:19:27.420 --> 00:19:30.560
>> Right. However, the devil's advocate here,


00:19:30.560 --> 00:19:34.040
development work on a project that utilizes this can


00:19:34.040 --> 00:19:39.200
proceed before you get tons of users and stuff.


00:19:39.200 --> 00:19:42.560
Knowing that it's coming soon, I guess.


00:19:42.560 --> 00:19:43.520
>> Yeah, that's a good point.


00:19:43.520 --> 00:19:44.320
>> If you trust it.


00:19:44.320 --> 00:19:47.000
>> Yeah. Although because it's wire protocol,


00:19:47.000 --> 00:19:50.040
you could just run MongoDB and then flip it theoretically.


00:19:50.040 --> 00:19:51.700
You don't have to. It's not like


00:19:51.700 --> 00:19:54.180
a complete new creation you've got to build upon.


00:19:54.180 --> 00:19:56.620
It's meant to mirror something that exists.


00:19:56.620 --> 00:19:58.220
So you could do that.


00:19:58.220 --> 00:20:00.860
I think we've got like five,


00:20:00.860 --> 00:20:05.980
six, seven gigs of data in the database that backs Python bytes.


00:20:05.980 --> 00:20:07.500
If you do queries against,


00:20:07.500 --> 00:20:11.620
give me the 20 things out of these millions and millions of records that match this,


00:20:11.620 --> 00:20:17.420
without an index, it's actually I think MongoDB may refuse to do it.


00:20:17.420 --> 00:20:20.540
There are certain situations where it's like too much data,


00:20:20.540 --> 00:20:24.020
no index, not going to be able to answer that question.


00:20:24.020 --> 00:20:27.460
So it might be really slow or it might actually error out and say,


00:20:27.460 --> 00:20:29.220
this you need to create an index.


00:20:29.220 --> 00:20:30.860
So anyway, long story short,


00:20:30.860 --> 00:20:33.100
this is a big deal until this comes in.


00:20:33.100 --> 00:20:37.760
I would not touch it in terms of I'm going to try to run on top of this.


00:20:37.760 --> 00:20:38.540
>> Yeah.


00:20:38.540 --> 00:20:40.980
>> But if that comes through,


00:20:40.980 --> 00:20:43.100
then you already have Postgres,


00:20:43.100 --> 00:20:48.300
but you want some document-like experience for part of your app or one of your apps,


00:20:48.300 --> 00:20:50.840
but you don't want to switch to Mongo, that would be pretty cool.


00:20:50.840 --> 00:20:57.480
So one of the things notable in the menu bar of FerretDB is careers.


00:20:57.480 --> 00:21:02.040
So this is intended to be something commercial at some point,


00:21:02.040 --> 00:21:05.800
unless they just feel like hiring people for the fun of it.


00:21:05.800 --> 00:21:09.800
Yeah, that is interesting. Where are they going with it, right?


00:21:09.800 --> 00:21:17.160
So I would imagine they have FerretDB as a service in mind out there, but you're right,


00:21:17.160 --> 00:21:20.440
it certainly has an ink and a...


00:21:20.440 --> 00:21:22.140
I mean, that's not necessarily bad.


00:21:22.140 --> 00:21:24.440
That's probably a good thing that there's money behind it.


00:21:24.440 --> 00:21:25.780
But just interesting.


00:21:25.780 --> 00:21:27.680
>> It is interesting. Yes, very interesting.


00:21:27.680 --> 00:21:29.480
All right. Well, Feridibi,


00:21:29.480 --> 00:21:32.360
something I put out there for people to keep their eye on,


00:21:32.360 --> 00:21:36.340
not necessarily to jump on right away, but quite interesting.


00:21:36.340 --> 00:21:36.880
>> Yeah.


00:21:36.880 --> 00:21:42.640
>> Oh, by the way, we have a couple of excited folks out in the audience.


00:21:42.640 --> 00:21:45.040
Gil Optional would be amazing, says Ciro.


00:21:45.040 --> 00:21:46.680
I know that Ciro is working on


00:21:46.680 --> 00:21:49.760
some real high-performance web framework stuff.


00:21:49.760 --> 00:21:50.840
So that would be cool.


00:21:50.840 --> 00:21:53.920
And how about a Docker container pre-built


00:21:53.920 --> 00:21:55.440
with CPython with no Gil?


00:21:55.440 --> 00:21:57.360
Pick your Docker container and run that one.


00:21:57.360 --> 00:21:58.520
>>Sure, that'd be cool.


00:21:58.520 --> 00:21:59.880
>>Yeah, that's not a bad idea.


00:21:59.880 --> 00:22:00.720
>>Yeah.


00:22:00.720 --> 00:22:02.040
>>And Seth out there says,


00:22:02.040 --> 00:22:04.440
"Good thing we invested in faster CPython earlier,


00:22:04.440 --> 00:22:06.840
so now we can roll it back a little."


00:22:06.840 --> 00:22:08.800
>>Yeah, I mean, kind of we knew that was coming,


00:22:08.800 --> 00:22:11.080
so that's one of the reasons for the speedups in 3.11


00:22:11.080 --> 00:22:13.280
and planned for future, so.


00:22:13.280 --> 00:22:14.120
>>Yeah, indeed.


00:22:14.120 --> 00:22:17.320
All right, let's switch over to real quickly


00:22:17.320 --> 00:22:20.640
talk about our sponsor before we move on here.


00:22:20.640 --> 00:22:22.460
As I said at the beginning, this episode's brought to you


00:22:22.460 --> 00:22:24.360
by Microsoft for Startups.


00:22:24.360 --> 00:22:26.240
We just got an email, I don't know if you saw it, Brian,


00:22:26.240 --> 00:22:28.420
from somebody who signed up for the Microsoft


00:22:28.420 --> 00:22:30.660
for Startups program and said, "This is a really great,"


00:22:30.660 --> 00:22:32.440
I was a little bit skeptical, but I signed up,


00:22:32.440 --> 00:22:34.320
"And this is a really great project,


00:22:34.320 --> 00:22:37.640
a really great service and offering for them."


00:22:37.640 --> 00:22:39.640
And that they actually, it's working really well.


00:22:39.640 --> 00:22:41.000
So-- - That's great.


00:22:41.000 --> 00:22:42.860
- Yeah, it was really good to hear.


00:22:42.860 --> 00:22:45.800
So, you know, Microsoft knows that starting a business


00:22:45.800 --> 00:22:48.560
is hard, they wanna help support startups


00:22:48.560 --> 00:22:52.600
that can then later be customers of theirs, of course.


00:22:52.600 --> 00:22:56.600
So they put together this Microsoft for Startups program


00:22:56.600 --> 00:22:58.320
to help them understand what startups need,


00:22:58.320 --> 00:23:00.000
to help them be more successful,


00:23:00.000 --> 00:23:01.480
and to create a digital platform


00:23:01.480 --> 00:23:03.760
to help them overcome those challenges.


00:23:03.760 --> 00:23:06.480
And they call that Microsoft for Startups Founders Hub.


00:23:06.480 --> 00:23:08.840
And it provides all founders at any stage


00:23:08.840 --> 00:23:11.880
with free resources to solve startup challenges,


00:23:11.880 --> 00:23:15.420
provides tech benefits, access to expert guidance,


00:23:15.420 --> 00:23:17.660
and skilling resources, mentorship,


00:23:17.660 --> 00:23:19.360
network connections, and much more.


00:23:19.360 --> 00:23:21.500
It doesn't require the startups to be investor-backed


00:23:21.500 --> 00:23:22.740
or third-party validated.


00:23:22.740 --> 00:23:23.860
You just apply.


00:23:23.860 --> 00:23:26.060
Microsoft says it looks like you'd be a good fit


00:23:26.060 --> 00:23:27.100
for this program.


00:23:27.100 --> 00:23:27.940
You're in.


00:23:27.940 --> 00:23:30.820
And with that, you get access to a bunch of cloud resources,


00:23:30.820 --> 00:23:34.220
GitHub and Azure, Office 365, I think.


00:23:34.220 --> 00:23:36.620
You also get access to open AI,


00:23:36.620 --> 00:23:40.100
which, you know, chat and GTP, pretty hopping these days


00:23:40.100 --> 00:23:42.340
and might be something cool to leverage.


00:23:42.340 --> 00:23:44.540
And through Microsoft for Startup Founders Hub,


00:23:44.540 --> 00:23:47.660
coming at Founders also no longer about who you know,


00:23:47.660 --> 00:23:49.660
you have access to their mentorship network,


00:23:49.660 --> 00:23:51.500
which I think is one of the biggest values


00:23:51.500 --> 00:23:52.420
you probably get.


00:23:52.420 --> 00:23:54.740
Talk to people about idea validation,


00:23:54.740 --> 00:23:57.660
fundraising, management coaching, sales and marketing,


00:23:57.660 --> 00:23:58.500
and all those things.


00:23:58.500 --> 00:24:01.500
And you get a book one-on-one meetings with those mentors.


00:24:01.500 --> 00:24:03.620
So make your idea a reality today


00:24:03.620 --> 00:24:04.780
with the critical support you'll get


00:24:04.780 --> 00:24:06.500
from Microsoft for Startups Founders Hub.


00:24:06.500 --> 00:24:07.320
To join the program,


00:24:07.320 --> 00:24:11.420
just visit pythonbytes.fm/foundershub2022.


00:24:11.420 --> 00:24:12.300
The link's in your show notes.


00:24:12.300 --> 00:24:14.980
So if you're interested, give it a click.


00:24:14.980 --> 00:24:15.980
- Yes.


00:24:15.980 --> 00:24:17.380
- All right, over to you, Brian.


00:24:17.380 --> 00:24:22.380
- Well, I wanna guess transition is difficult


00:24:22.380 --> 00:24:26.260
for me apparently right now, as are words.


00:24:26.260 --> 00:24:29.180
Anyway, the next article I wanna talk about


00:24:29.180 --> 00:24:31.220
is four tips for structuring


00:24:31.220 --> 00:24:33.540
your research groups Python package.


00:24:33.540 --> 00:24:35.880
So I think this is just a Python package,


00:24:35.880 --> 00:24:40.880
but research group, I think this is from David Aaron Nicholson


00:24:41.340 --> 00:24:44.580
And I think the idea around it is a lot of people


00:24:44.580 --> 00:24:49.060
with scientific computing and various things like that


00:24:49.060 --> 00:24:53.620
might not be, might be struggling with lots of Python code.


00:24:53.620 --> 00:24:56.620
So they're putting it into subdirectories


00:24:56.620 --> 00:24:58.680
and stuff like that.


00:24:58.680 --> 00:25:02.900
So this is talking about packages in that sense of,


00:25:02.900 --> 00:25:04.500
it's a directory with a dunder init


00:25:04.500 --> 00:25:06.980
and you can reference it by importing it


00:25:06.980 --> 00:25:09.460
through normal import, the import mechanism.


00:25:09.460 --> 00:25:13.460
It's not about packaging for like PyPI or something like that.


00:25:13.460 --> 00:25:15.860
It's still some really great information.


00:25:15.860 --> 00:25:18.620
So the four tips are,


00:25:18.620 --> 00:25:20.860
one, give your packages and modules


00:25:20.860 --> 00:25:23.580
terse single-word names whenever possible.


00:25:23.580 --> 00:25:26.720
There's some great examples of what not to do later.


00:25:26.720 --> 00:25:29.500
Number two, import modules internally instead


00:25:29.500 --> 00:25:32.220
of importing everything from modules.


00:25:32.220 --> 00:25:34.780
Make use of sub-packages.


00:25:34.780 --> 00:25:37.000
The last one is prefer modules with


00:25:37.000 --> 00:25:40.400
specific names instead of things like utils,


00:25:40.400 --> 00:25:42.160
helpers, and support.


00:25:42.160 --> 00:25:45.320
This is everyone struggling with this,


00:25:45.320 --> 00:25:46.680
including me even though I've been


00:25:46.680 --> 00:25:48.040
preaching this for a long time.


00:25:48.040 --> 00:25:49.760
>> It's hard.


00:25:49.760 --> 00:25:53.520
>> There's some great examples of what not to do.


00:25:53.520 --> 00:25:55.960
What was this? Give your modules


00:25:55.960 --> 00:25:58.280
terse single word names whenever possible.


00:25:58.280 --> 00:26:00.800
I guess there's a couple of examples of what not to do.


00:26:00.800 --> 00:26:03.840
There's a really long directory name called


00:26:03.840 --> 00:26:07.400
Electromyography Toolkit.


00:26:07.400 --> 00:26:08.800
Yeah, that's a bit long.


00:26:08.800 --> 00:26:13.240
Then prefixing everything with EMG afterwards within it.


00:26:13.240 --> 00:26:15.360
Yeah, don't do that. You don't need to.


00:26:15.360 --> 00:26:18.640
Just some great examples of better versions.


00:26:18.640 --> 00:26:23.680
>> It already has the top-level part of the package as the namespace.


00:26:23.680 --> 00:26:24.240
>> Yeah.


00:26:24.240 --> 00:26:28.480
>> If you want to be explicit, just package.sub package.


00:26:28.480 --> 00:26:33.640
>> Talking about what it looks like when you're importing it,


00:26:33.640 --> 00:26:35.800
is different. So I'm going to scroll down of like,


00:26:35.800 --> 00:26:36.200
uh,


00:26:36.200 --> 00:26:37.960
importing stuff.


00:26:37.960 --> 00:26:40.600
Um, I guess I'll just drop to one.


00:26:40.600 --> 00:26:43.280
A better thing would be like EMG toolkit.


00:26:43.280 --> 00:26:44.520
And I would say even like,


00:26:44.520 --> 00:26:47.080
is toolkit really adding any information?


00:26:47.080 --> 00:26:49.200
Maybe just EMG or something.


00:26:49.200 --> 00:26:53.040
Um, and then having instead of having like solvers and a whole


00:26:53.040 --> 00:26:54.120
bunch of,


00:26:54.120 --> 00:26:55.320
prefixes,


00:26:55.320 --> 00:26:58.360
just put solvers in a directory name and then put the types of


00:26:58.360 --> 00:26:59.220
solvers underneath.


00:26:59.220 --> 00:27:00.200
You don't have to have,


00:27:00.200 --> 00:27:00.880
uh,


00:27:00.880 --> 00:27:03.000
EMGs under everything or,


00:27:03.160 --> 00:27:08.160
Yeah, MG and brute force solver and a star solver and all that.


00:27:08.160 --> 00:27:09.720
It's just solvers dot a star.


00:27:09.720 --> 00:27:11.520
So yeah, brute force or something, right?


00:27:11.520 --> 00:27:12.120
Yeah, right.


00:27:12.120 --> 00:27:15.440
And I'd argue that you could even just probably drop the toolkit and it would be


00:27:15.440 --> 00:27:17.720
Mg dot solvers dot brute force.


00:27:17.720 --> 00:27:18.960
It'd be a better name.


00:27:18.960 --> 00:27:21.120
But, I think so.


00:27:21.120 --> 00:27:25.440
I'm not going to go through this this entire thing, but import modules is


00:27:25.440 --> 00:27:30.560
something I've seen a lot of people do like from package solver import and then


00:27:30.560 --> 00:27:32.640
list all the things that they're importing.


00:27:32.800 --> 00:27:37.960
I've been guilty of this to doing this before also,


00:27:37.960 --> 00:27:39.820
especially if I'm only importing one.


00:27:39.820 --> 00:27:42.560
One of the things that people will do this for is


00:27:42.560 --> 00:27:45.320
because the entire name is too long,


00:27:45.320 --> 00:27:47.620
well then make the name shorter.


00:27:47.620 --> 00:27:50.620
Instead of doing that, just import the package solver


00:27:50.620 --> 00:27:53.360
and then you dot reference everything else.


00:27:53.360 --> 00:27:54.320
>> Right.


00:27:54.320 --> 00:27:56.700
>> Or do what the data scientists do,


00:27:56.700 --> 00:27:58.360
if you don't control the name,


00:27:58.360 --> 00:28:00.880
import numpy as np.


00:28:00.880 --> 00:28:01.360
>> Yeah.


00:28:01.360 --> 00:28:02.360
and then np.


00:28:02.360 --> 00:28:04.200
You can shorten the name for you,


00:28:04.200 --> 00:28:07.740
even if you can't shorten it for others at the source.


00:28:07.740 --> 00:28:10.080
- Right, so one of the reminders is you can do from,


00:28:10.080 --> 00:28:11.600
if you're in the same directory,


00:28:11.600 --> 00:28:13.640
you can do from.importsolvers,


00:28:13.640 --> 00:28:15.920
and then you can reference like solvers,


00:28:15.920 --> 00:28:18.640
entropy solver, and things like that.


00:28:18.640 --> 00:28:23.360
Anyway, some great, even discussion of sub-packages.


00:28:23.360 --> 00:28:26.240
And this is something that I always forget


00:28:26.240 --> 00:28:27.200
that is difficult.


00:28:27.200 --> 00:28:28.760
It's a mind shift to say,


00:28:28.760 --> 00:28:30.520
oh, I'm gonna throw things into a directory


00:28:30.520 --> 00:28:33.480
and then have a package, but you can do that again.


00:28:33.480 --> 00:28:38.400
It can keep going down and some people forget to do that.


00:28:38.400 --> 00:28:40.200
So that references that as well.


00:28:40.200 --> 00:28:41.040
So it's good.


00:28:41.040 --> 00:28:43.560
You can have packages inside of packages inside of packages.


00:28:43.560 --> 00:28:44.480
- Nice.


00:28:44.480 --> 00:28:45.960
I think Robert out in the audience,


00:28:45.960 --> 00:28:48.440
that's a great recommendation to simplify


00:28:48.440 --> 00:28:50.280
the code we got to write.


00:28:50.280 --> 00:28:51.100
- Yeah.


00:28:51.100 --> 00:28:52.720
- Just how about we just extend it a little bit


00:28:52.720 --> 00:28:55.040
from star import star and like you just have access


00:28:55.040 --> 00:28:55.880
to everything.


00:28:55.880 --> 00:28:57.520
There's sure the startup time is 10 minutes,


00:28:57.520 --> 00:28:58.360
but it's fine.


00:28:58.360 --> 00:29:00.660
(laughing)


00:29:00.660 --> 00:29:01.500
- Yes.


00:29:01.500 --> 00:29:03.700
- And then Pamphleroy is reminding us that,


00:29:03.700 --> 00:29:05.100
you know, one of the Zen of Pythons


00:29:05.100 --> 00:29:07.140
is about these namespaces.


00:29:07.140 --> 00:29:08.660
- Yeah, and I think it's just,


00:29:08.660 --> 00:29:10.120
also be nice to people.


00:29:10.120 --> 00:29:14.620
Just, you know, people trying to write their code in Python,


00:29:14.620 --> 00:29:16.140
they're not doing weird stuff


00:29:16.140 --> 00:29:17.700
because they wanna do weird stuff.


00:29:17.700 --> 00:29:20.340
They just don't know what the normal way to do it is.


00:29:20.340 --> 00:29:22.700
So gentle reminders like this post are good.


00:29:22.700 --> 00:29:23.540
- Indeed.


00:29:23.540 --> 00:29:25.420
- What you got for us next?


00:29:25.420 --> 00:29:27.020
- I don't wanna really quibble about it,


00:29:27.020 --> 00:29:28.980
but let's talk about it anyway.


00:29:28.980 --> 00:29:30.100
Quibbler.


00:29:30.100 --> 00:29:32.540
So Quibbler actually is interesting,


00:29:32.540 --> 00:29:34.500
keeping with the data science theme.


00:29:34.500 --> 00:29:39.380
So this one here is a way to take Matplotlib


00:29:39.380 --> 00:29:41.340
and make it more interactive.


00:29:41.340 --> 00:29:44.500
So you probably know Matplotlib will make a nice,


00:29:44.500 --> 00:29:49.140
like printable, publishable, high quality image,


00:29:49.140 --> 00:29:52.200
but they're generally not as interactive as like Bokeh,


00:29:52.200 --> 00:29:53.500
some of these other frameworks.


00:29:53.500 --> 00:29:57.060
So Quibbler is like your data, but interactive.


00:29:57.060 --> 00:29:58.940
Let me just play a little video for you here,


00:29:58.940 --> 00:29:59.780
and I'll just describe it,


00:29:59.780 --> 00:30:02.540
but this way you'll kind of know what this is about


00:30:02.540 --> 00:30:03.380
if you haven't checked this out.


00:30:03.380 --> 00:30:06.540
So the idea is you could go and plot something


00:30:06.540 --> 00:30:09.120
with matplotlib, and you have some variable


00:30:09.120 --> 00:30:10.880
you would like to make interactive.


00:30:10.880 --> 00:30:13.180
You just wrap it in an iquib,


00:30:13.180 --> 00:30:16.540
and all of a sudden the entire UI


00:30:16.540 --> 00:30:19.540
becomes completely interactive, which is insane.


00:30:19.540 --> 00:30:23.620
Here's a triangle with squares around each,


00:30:23.620 --> 00:30:26.380
based off each of the edge of the triangle.


00:30:26.380 --> 00:30:28.920
Then if you just make the numbers,


00:30:28.920 --> 00:30:30.800
the inputs, this iQuib type,


00:30:30.800 --> 00:30:33.660
then all of a sudden you can drag them around and interact with them,


00:30:33.660 --> 00:30:39.520
and even works on cells and zooms and other pictures. What do you think?


00:30:39.520 --> 00:30:40.860
>> This is amazing.


00:30:40.860 --> 00:30:44.740
Also amazing use of video to show people how easy it is to switch.


00:30:44.740 --> 00:30:46.520
>> Yes. Thank you for doing that.


00:30:46.520 --> 00:30:48.100
Thank you for doing that, people.


00:30:48.100 --> 00:30:50.780
But yeah, this is a super cool project.


00:30:50.780 --> 00:30:53.340
I don't have a ton to say about it actually,


00:30:53.340 --> 00:30:56.420
but if you're working with Matplotlib already,


00:30:56.420 --> 00:30:59.580
it'd be really nice is if we could move some of


00:30:59.580 --> 00:31:00.840
these things around and create


00:31:00.840 --> 00:31:03.460
interactive graphics a little bit more than


00:31:03.460 --> 00:31:06.460
just wrapping the independent variables in


00:31:06.460 --> 00:31:09.300
iquib interactive bits and it


00:31:09.300 --> 00:31:12.820
turns the whole graph into something that's pretty excellent.


00:31:12.820 --> 00:31:15.020
I think this is, it looks great.


00:31:15.020 --> 00:31:17.100
I don't see why you wouldn't want to use it.


00:31:17.100 --> 00:31:19.060
>> Yeah, that looks fun.


00:31:19.060 --> 00:31:19.400
>> Yeah.


00:31:19.400 --> 00:31:19.820
>> Cool.


00:31:19.820 --> 00:31:22.040
>> Someone in the audience loves Quib,


00:31:22.040 --> 00:31:24.340
so they must have experience with it as well.


00:31:24.340 --> 00:31:26.400
If you're doing Matplotlib and you want to


00:31:26.400 --> 00:31:28.480
make it more interactive, check this out.


00:31:28.480 --> 00:31:29.220
>> Awesome.


00:31:29.220 --> 00:31:30.940
>> It's all of our items, isn't it, Brian?


00:31:30.940 --> 00:31:33.420
Even though somehow I seem to have a screen full of tabs,


00:31:33.420 --> 00:31:34.560
so I don't know how that works.


00:31:34.560 --> 00:31:37.340
>> Yeah. You've got some interesting Python related stuff.


00:31:37.340 --> 00:31:42.300
I thought I would go with the tradition of Python and say,


00:31:42.300 --> 00:31:44.580
and now for something completely different,


00:31:44.580 --> 00:31:47.080
I just ran across an article that I thought I'd share.


00:31:47.080 --> 00:31:49.080
just quickly, I'm not going to talk about it a lot.


00:31:49.080 --> 00:31:55.040
But there was an article in Washington Post about how turtle moms talk to their eggs


00:31:55.040 --> 00:31:58.240
before they hatch. And I just thought it was a fascinating read.


00:31:58.240 --> 00:32:00.440
Plus, it's got pictures of turtles.


00:32:00.440 --> 00:32:02.360
So turtles are awesome.


00:32:02.360 --> 00:32:05.720
I wasn't going to talk about it too much, but one of the things I thought was really


00:32:05.720 --> 00:32:11.600
cool was somebody went out and thought, oh, we don't we there's the turtle moms hang


00:32:11.600 --> 00:32:17.800
out in the rivers or somewhere near the, the, the, the, the hatch, the eggs on


00:32:17.800 --> 00:32:19.860
the sand and they just wait for him or something.


00:32:19.860 --> 00:32:21.160
Well, are they talking?


00:32:21.160 --> 00:32:23.840
It probably not, but they went out and recorded anyway.


00:32:23.840 --> 00:32:28.140
And it's lower frequencies, frequencies that we don't normally hear.


00:32:28.140 --> 00:32:31.560
And, that's also slower timeframes.


00:32:31.560 --> 00:32:35.400
Like a conversation can be like hours for reply.


00:32:35.400 --> 00:32:38.060
So it takes a while to go back.


00:32:38.060 --> 00:32:41.100
And then also like some of the eggs talk to each other before they


00:32:41.100 --> 00:32:47.640
They can talk to each other to help possibly coordinate when to hatch, because if there's


00:32:47.640 --> 00:32:52.020
predators around, more of them will survive if they all hatch at the same time.


00:32:52.020 --> 00:32:53.740
So anyway, just cool article.


00:32:53.740 --> 00:32:55.540
Check it out if you guys want to look at turtles.


00:32:55.540 --> 00:32:57.300
- Yeah, science is neat, isn't it?


00:32:57.300 --> 00:32:58.300
- Yeah.


00:32:58.300 --> 00:32:59.500
- Yeah, that's really cool.


00:32:59.500 --> 00:33:03.500
So kind of not one of my extras, but I'll go through this in.


00:33:03.500 --> 00:33:11.900
The next coming Talk Python episode is around the story of imaging black holes with Dr.


00:33:11.900 --> 00:33:12.900
Sarah Eisen.


00:33:12.900 --> 00:33:13.900
Yeah.


00:33:13.900 --> 00:33:16.780
So, that's going to be really, really awesome.


00:33:16.780 --> 00:33:21.340
And then there's a good chance, not a 100% chance, but a good chance that I also will


00:33:21.340 --> 00:33:28.460
have a science show on the Fusion National Ignition Breakthrough with Python as well


00:33:28.460 --> 00:33:29.460
coming up.


00:33:29.460 --> 00:33:30.460
So, very cool.


00:33:30.460 --> 00:33:31.460
Very cool stuff.


00:33:31.460 --> 00:33:32.460
>> Very neat.


00:33:32.460 --> 00:33:33.740
so many cool people through that.


00:33:33.740 --> 00:33:34.220
That's neat.


00:33:34.220 --> 00:33:37.220
>> I know. I would never get to talk to these people.


00:33:37.220 --> 00:33:38.540
Like, "Hey, I have a podcast.


00:33:38.540 --> 00:33:40.080
Let's talk about it." Amazing.


00:33:40.080 --> 00:33:42.580
>> Awesome. Let's see your extras.


00:33:42.580 --> 00:33:44.660
>> Yeah, let's see my extras.


00:33:44.660 --> 00:33:49.820
I published the thing on RSS a little while ago,


00:33:49.820 --> 00:33:51.900
and talked a lot about RSS.


00:33:51.900 --> 00:33:55.300
I have more RSS stuff because I said Reeder,


00:33:55.300 --> 00:33:58.780
R-E-E-D-E-R, is a really cool thing,


00:33:58.780 --> 00:33:59.620
but it's Mac only.


00:33:59.620 --> 00:34:01.380
Other people are like, "Hey, guess what else I use?


00:34:01.380 --> 00:34:02.220
This is neat.


00:34:02.220 --> 00:34:03.740
So there's a fresh RSS,


00:34:03.740 --> 00:34:07.220
which is like your own hosted RSS web app.


00:34:07.220 --> 00:34:10.540
I think it also does some read later type of things.


00:34:10.540 --> 00:34:12.260
Feedly, I knew about Feedly,


00:34:12.260 --> 00:34:14.260
but I thought it was just, I don't know,


00:34:14.260 --> 00:34:16.300
just some sort of web app type of thing.


00:34:16.300 --> 00:34:18.820
But apparently it has like a cool AI engine


00:34:18.820 --> 00:34:21.900
to help kind of recommend if you get like overwhelmed


00:34:21.900 --> 00:34:23.380
with all the stuff you subscribe to,


00:34:23.380 --> 00:34:24.340
you're like, well, now I can't read it.


00:34:24.340 --> 00:34:25.460
It's just insane.


00:34:25.460 --> 00:34:26.700
You know, it has a kind of a,


00:34:26.700 --> 00:34:28.580
your own personal algorithmic feed,


00:34:28.580 --> 00:34:30.580
which is, I know algorithmic feeds


00:34:30.580 --> 00:34:33.220
often get a bad name, but there are benefits too, you know?


00:34:33.220 --> 00:34:34.060
- Yeah.


00:34:34.060 --> 00:34:34.880
- Have you used Feedly lately?


00:34:34.880 --> 00:34:35.720
I have not.


00:34:35.720 --> 00:34:37.340
- I've been using it for years,


00:34:37.340 --> 00:34:39.300
so I didn't know about the AI bit,


00:34:39.300 --> 00:34:41.880
but yeah, I use it a lot.


00:34:41.880 --> 00:34:42.720
- Yeah, I thought that was the one


00:34:42.720 --> 00:34:44.060
you had said you were using, so.


00:34:44.060 --> 00:34:47.100
But yeah, the AI engine sounds at least interesting.


00:34:47.100 --> 00:34:51.100
Flim on Android, people care about that.


00:34:51.100 --> 00:34:52.340
And Readwise we talked about,


00:34:52.340 --> 00:34:53.420
but I've been playing the Readwise,


00:34:53.420 --> 00:34:55.300
and it continues to be interesting.


00:34:55.300 --> 00:34:56.300
- Cool.


00:34:56.300 --> 00:34:58.500
- Not only, when I first thought about,


00:34:58.500 --> 00:35:00.740
Oh, RSS and maybe read later,


00:35:00.740 --> 00:35:03.000
but you can throw in like EPUB books,


00:35:03.000 --> 00:35:06.420
you can do YouTube videos and it'll let you annotate


00:35:06.420 --> 00:35:09.980
the transcripts that it makes and it's pretty wild.


00:35:09.980 --> 00:35:11.300
- Wow.


00:35:11.300 --> 00:35:14.900
- And then, okay, going for more RSS here


00:35:14.900 --> 00:35:19.900
is just published all the Talk Python courses as an RSS feed.


00:35:19.900 --> 00:35:22.300
So if you wanna subscribe to that,


00:35:22.300 --> 00:35:25.460
then soon as we publish a new Talk Python Training course,


00:35:25.460 --> 00:35:28.740
If we go down here, there's a pytest one somewhere.


00:35:28.740 --> 00:35:30.020
Getting started with pytest.


00:35:30.020 --> 00:35:31.940
That came out a couple months ago.


00:35:31.940 --> 00:35:34.580
So people, if they're subscribed to the RSS feed,


00:35:34.580 --> 00:35:36.360
another one comes out, they'll get it straight away.


00:35:36.360 --> 00:35:37.060
It's cool, right?


00:35:37.060 --> 00:35:37.780
>> That is neat.


00:35:37.780 --> 00:35:39.520
>> Yeah. RSS and more of the things.


00:35:39.520 --> 00:35:42.940
Over at Talk Python, the podcast, not the courses.


00:35:42.940 --> 00:35:44.740
We're talking about this right before the show.


00:35:44.740 --> 00:35:48.340
I did a ton of stuff for helping people find,


00:35:48.340 --> 00:35:51.540
when was a particular person a guest on the show?


00:35:51.540 --> 00:35:52.980
When were they on the show?


00:35:52.980 --> 00:35:54.940
If they're on one episode,


00:35:54.940 --> 00:35:56.540
What other episodes do they do?


00:35:56.540 --> 00:36:00.220
So here's a great huge list of tons of people


00:36:00.220 --> 00:36:02.540
who have been guests on the show.


00:36:02.540 --> 00:36:04.900
And Brian, who's in number one right now?


00:36:04.900 --> 00:36:07.780
- I am with Brett as a close second.


00:36:07.780 --> 00:36:08.620
- A close second, yeah.


00:36:08.620 --> 00:36:10.180
So Brian's been on 10 times.


00:36:10.180 --> 00:36:11.580
Brett Cannon, nine.


00:36:11.580 --> 00:36:13.060
Anthony Shaw, nine.


00:36:13.060 --> 00:36:14.140
Dan Bader, six.


00:36:14.140 --> 00:36:16.420
Lucas Schlinga, five.


00:36:16.420 --> 00:36:18.100
Cecil, down there at five.


00:36:18.100 --> 00:36:19.440
That's Cecil Philip as well.


00:36:19.440 --> 00:36:22.660
Anyway, this is a new resource on the podcast.


00:36:22.660 --> 00:36:25.380
So go, if you want to explore the data


00:36:25.380 --> 00:36:27.380
for the last seven years in a slightly different way,


00:36:27.380 --> 00:36:28.220
people can check that out.


00:36:28.220 --> 00:36:30.780
And congrats, Brian, for leading the pack there.


00:36:30.780 --> 00:36:31.620
- Yes.


00:36:31.620 --> 00:36:36.620
- And last, I talked about how to do traveling around,


00:36:36.620 --> 00:36:39.180
just taking an iPad and still doing development work.


00:36:39.180 --> 00:36:40.900
And we talked about prompt and all those things.


00:36:40.900 --> 00:36:43.220
So I basically wrote up an article


00:36:43.220 --> 00:36:44.940
on that discussion I had there.


00:36:44.940 --> 00:36:45.980
So I'll link to that.


00:36:45.980 --> 00:36:47.540
People can check that out if they want to.


00:36:47.540 --> 00:36:51.060
So there's the written, more formal version


00:36:51.060 --> 00:36:53.200
called Dev on the Road on my website.


00:36:53.200 --> 00:36:54.040
- Cool.


00:36:54.040 --> 00:36:57.460
- All right, ready for a joke?


00:36:57.460 --> 00:37:00.220
By the way, Robert out there is suggesting


00:37:00.220 --> 00:37:01.960
that we might need to update your photo.


00:37:01.960 --> 00:37:04.140
Now you got your cool hair,


00:37:04.140 --> 00:37:05.940
we might need to update you on that guest list there.


00:37:05.940 --> 00:37:06.780
- I probably should.


00:37:06.780 --> 00:37:08.340
- That was a seven year old photo or something,


00:37:08.340 --> 00:37:09.540
you know, that's from when you were on the show


00:37:09.540 --> 00:37:11.060
the first time, maybe six years ago.


00:37:11.060 --> 00:37:13.040
- No, I really do look like that other photo.


00:37:13.040 --> 00:37:15.700
What you're seeing right now is an AI generated bot.


00:37:15.700 --> 00:37:16.900
- Yeah, this is like a,


00:37:16.900 --> 00:37:20.460
actually, Brian hasn't been here for a few years.


00:37:20.460 --> 00:37:22.460
This is a deep fake and I invented him.


00:37:22.460 --> 00:37:23.460
No, just kidding.


00:37:23.460 --> 00:37:24.460
All right.


00:37:24.460 --> 00:37:25.460
Speaking of jokes.


00:37:25.460 --> 00:37:31.300
>>Brian is still embroiled in a lawsuit to try to get this to stop.


00:37:31.300 --> 00:37:34.460
>>The real Brian will never defeat the AI.


00:37:34.460 --> 00:37:36.780
Okay.


00:37:36.780 --> 00:37:40.980
So I thought of you actually, Brian, when I saw this one.


00:37:40.980 --> 00:37:42.820
This is on Program and Humor.


00:37:42.820 --> 00:37:49.660
And it says it has this dog looking thing, kind of very deep in thought, projected to


00:37:49.660 --> 00:37:55.220
the sky for reasons I don't understand, but it says, am I testing this program or is it


00:37:55.220 --> 00:37:56.220
testing me?


00:37:56.220 --> 00:38:00.860
I know I suspect a lot of people can, can relate to having that go both ways.


00:38:00.860 --> 00:38:02.900
Deep thoughts, deep thoughts.


00:38:02.900 --> 00:38:04.620
And we've got a name for the AI.


00:38:04.620 --> 00:38:05.620
It's called Brian GPT.


00:38:05.620 --> 00:38:06.620
All right.


00:38:06.620 --> 00:38:12.900
I know you got a joke as well for us, maybe more involved than the floating dog.


00:38:12.900 --> 00:38:13.900
Okay.


00:38:13.900 --> 00:38:18.540
I can't remember where I got this, but, every cloud architecture, it's just, I don't


00:38:18.540 --> 00:38:22.220
I don't know, it's an image with some stuff that I really,


00:38:22.220 --> 00:38:23.980
there's a lot, I'm not gonna cover everything,


00:38:23.980 --> 00:38:25.760
but one of my favorite bits of this


00:38:25.760 --> 00:38:29.020
is the managed services, the mismanaged services,


00:38:29.020 --> 00:38:31.900
and the unmanageable services.


00:38:31.900 --> 00:38:33.420
- They're held together by duct tape


00:38:33.420 --> 00:38:35.420
and some kind of super glue. - Gum or something.


00:38:35.420 --> 00:38:36.560
- Yeah, gum.


00:38:36.560 --> 00:38:37.780
- Containers everywhere.


00:38:37.780 --> 00:38:41.740
I do like the cool databases that drive resumes


00:38:41.740 --> 00:38:44.340
and the real database that's actually doing


00:38:44.340 --> 00:38:45.620
all the actual work.


00:38:47.380 --> 00:38:50.020
of plumbing, there's a huge bunch of plumbing around it.


00:38:50.020 --> 00:38:53.380
It just has the data engineers got very excited here.


00:38:53.380 --> 00:38:54.220
- Yeah.


00:38:54.220 --> 00:38:55.060
- It empties into a data lake.


00:38:55.060 --> 00:38:58.100
- The witch also drips into a data swamp


00:38:58.100 --> 00:39:02.580
and there's a blame radius services that stop stuff.


00:39:02.580 --> 00:39:05.140
There's one tiny cron job that keeps everything


00:39:05.140 --> 00:39:06.340
from falling apart.


00:39:06.340 --> 00:39:08.640
It's good VPN of sadness.


00:39:08.640 --> 00:39:12.220
- And of course it's all backed


00:39:12.220 --> 00:39:15.100
by the fricking slick reverse proxy.


00:39:15.100 --> 00:39:18.380
>> Yeah. This is found on Good Tech Things,


00:39:18.380 --> 00:39:23.160
which actually has a whole bunch of cool funny images.


00:39:23.160 --> 00:39:25.140
I might steal some more of these from you.


00:39:25.140 --> 00:39:27.220
>> We might hear from Good Tech Things again.


00:39:27.220 --> 00:39:28.900
This is pretty awesome.


00:39:28.900 --> 00:39:31.180
>> All right. Was that everything for us?


00:39:31.180 --> 00:39:33.340
>> That is. That is all of it.


00:39:33.340 --> 00:39:34.140
>> Nice.


00:39:34.140 --> 00:39:35.380
>> Thank you everyone for listening.


00:39:35.380 --> 00:39:37.260
Brian, thanks as always.


00:39:37.260 --> 00:39:37.740
>> Bye.

