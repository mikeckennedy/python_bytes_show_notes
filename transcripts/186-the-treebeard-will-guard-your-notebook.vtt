
00:00:00.000 --> 00:00:05.200
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.200 --> 00:00:11.280
This is episode 186 recorded June 10th, 2020. I'm Brian Okken.


00:00:11.280 --> 00:00:12.320
And I'm Michael Kennedy.


00:00:12.320 --> 00:00:17.360
And this episode is actually brought to you by us. And we'll talk more about some of the ways


00:00:17.360 --> 00:00:23.280
you can support myself and Michael a little later in the show. But first, let's side table that for


00:00:23.280 --> 00:00:23.840
a little bit.


00:00:23.840 --> 00:00:28.560
Side table. Yeah, let's put it to the side and talk about side table. Yeah,


00:00:28.560 --> 00:00:30.880
So, Sightable is something that I noticed,


00:00:30.880 --> 00:00:33.620
this new project from Chris Moffat,


00:00:33.620 --> 00:00:35.920
and long-time listeners of the show


00:00:35.920 --> 00:00:39.500
will definitely know that I'm inspired by visuals.


00:00:39.500 --> 00:00:42.700
And this is one of those that's really nice, right?


00:00:42.700 --> 00:00:45.520
Like, not long ago when Guido was on the show,


00:00:45.520 --> 00:00:50.440
we talked about a missing number visualizer for pandas.


00:00:50.440 --> 00:00:52.960
So you could have a quick view of just like,


00:00:52.960 --> 00:00:55.120
I got this data, I just need to really quickly see


00:00:55.120 --> 00:00:56.720
like kind of what it looks like, what's missing,


00:00:56.720 --> 00:00:59.020
correlate missing elements and whatnot.


00:00:59.020 --> 00:01:02.720
And so side table is in this general zen of things.


00:01:02.720 --> 00:01:04.920
It's like, I've loaded up some data.


00:01:04.920 --> 00:01:06.920
I just want to quickly ask some questions


00:01:06.920 --> 00:01:08.640
and get a sense of what's going on.


00:01:08.640 --> 00:01:10.760
Like I've got a pandas data frame


00:01:10.760 --> 00:01:11.960
and I want to be able to say,


00:01:11.960 --> 00:01:13.240
can you just break this down by like,


00:01:13.240 --> 00:01:15.080
show me the top 20% of this


00:01:15.080 --> 00:01:16.160
and then group the other stuff


00:01:16.160 --> 00:01:18.120
into just like an other category.


00:01:18.120 --> 00:01:20.660
Also, instead of just getting like a plain text output,


00:01:20.660 --> 00:01:24.820
you get a cool, like alternating row color,


00:01:24.820 --> 00:01:28.220
nice table with extra information and whatnot.


00:01:28.220 --> 00:01:31.300
And it's usually something really, really simple.


00:01:31.300 --> 00:01:34.300
Like I could go to the data frame and say,


00:01:34.300 --> 00:01:36.160
just give me the frequency of state


00:01:36.160 --> 00:01:38.280
and just group it by that or something.


00:01:38.280 --> 00:01:41.520
And it does a group on those and a whole bunch of cool stuff.


00:01:41.520 --> 00:01:44.400
So really, really neat visualization.


00:01:44.400 --> 00:01:46.120
There's a picture in the show notes


00:01:46.120 --> 00:01:48.680
that shows you without it and with it.


00:01:48.680 --> 00:01:52.320
And given that the nicer version requires even less typing


00:01:52.320 --> 00:01:54.760
than the not nice version, I kind of like it.


00:01:54.760 --> 00:01:56.420
- Yeah, and just out of the box,


00:01:56.420 --> 00:02:01.420
having just like the alternating gray and white stripes


00:02:01.420 --> 00:02:02.560
is good.


00:02:02.560 --> 00:02:03.380
- Yeah, absolutely.


00:02:03.380 --> 00:02:05.560
So basically all you have to do is a pip install, of course,


00:02:05.560 --> 00:02:10.320
but then import side table and it adds an STB functionality


00:02:10.320 --> 00:02:12.040
to data frames, to Panda data frames.


00:02:12.040 --> 00:02:14.880
And then you can ask it questions like frequency.


00:02:14.880 --> 00:02:16.820
There's other stuff that you can also ask.


00:02:16.820 --> 00:02:19.040
There's like a bunch of different functionality there.


00:02:19.040 --> 00:02:21.660
So really nice for exploring new data sets.


00:02:21.660 --> 00:02:24.020
And it's basically a supercharged version


00:02:24.020 --> 00:02:27.620
of Pandas value counts with a little cross tab mixed in.


00:02:27.620 --> 00:02:29.420
So yeah, it's easy to use.


00:02:29.420 --> 00:02:31.620
And if you're working with Pandas,


00:02:31.620 --> 00:02:33.580
especially in Jupyter context,


00:02:33.580 --> 00:02:35.240
you know, that's really where this makes sense.


00:02:35.240 --> 00:02:36.080
Give it a shot.


00:02:36.080 --> 00:02:36.900
I think it looks great.


00:02:36.900 --> 00:02:37.740
- It does look good.


00:02:37.740 --> 00:02:38.580
- Good job, Chris.


00:02:38.580 --> 00:02:39.400
Yeah, go ahead.


00:02:39.400 --> 00:02:41.140
- No, I totally didn't even intend


00:02:41.140 --> 00:02:44.580
to do another table one back to back, but.


00:02:44.580 --> 00:02:45.860
- We're kicking it off with all the tables.


00:02:45.860 --> 00:02:47.060
Yeah, which one you got here?


00:02:47.060 --> 00:02:50.340
- So this was a suggestion from Tom McDermott


00:02:50.340 --> 00:02:55.340
And for the tabulate package, this is not for,


00:02:55.340 --> 00:02:57.860
it's not intended for Jupyter stuff,


00:02:57.860 --> 00:03:01.040
it's intended for just standard out sort of things.


00:03:01.040 --> 00:03:04.900
So you want a pretty printy tabular data in Python


00:03:04.900 --> 00:03:06.940
for command line utility.


00:03:06.940 --> 00:03:09.220
Actually, I've been using this for years.


00:03:09.220 --> 00:03:11.600
I was like, I'm sure we've covered this,


00:03:11.600 --> 00:03:13.660
and I looked it up, and I don't think we have,


00:03:13.660 --> 00:03:14.740
or at least I can't find it.


00:03:14.740 --> 00:03:15.980
- I don't remember us covering it either,


00:03:15.980 --> 00:03:16.960
and it's really sweet.


00:03:16.960 --> 00:03:21.200
It's like it generates nice formatted tables, but in ASCII.


00:03:21.200 --> 00:03:22.880
So like before I said, you know,


00:03:22.880 --> 00:03:24.720
side table is awesome if you're going to be doing this


00:03:24.720 --> 00:03:27.280
within Jupyter, but this is like,


00:03:27.280 --> 00:03:30.120
if you're doing it within just a terminal command line app.


00:03:30.120 --> 00:03:32.740
- By default, you've just got like a matrix of like a list


00:03:32.740 --> 00:03:36.280
of lists or a list of tuples or something


00:03:36.280 --> 00:03:38.060
to represent the rows.


00:03:38.060 --> 00:03:41.080
And you just want to print it with tabulate.


00:03:41.080 --> 00:03:43.400
It just does it automatically, but you can also,


00:03:43.400 --> 00:03:44.560
I usually use it with headers.


00:03:44.560 --> 00:03:46.440
So you have pass in the headers separate.


00:03:46.440 --> 00:03:50.240
So header information, and by default,


00:03:50.240 --> 00:03:52.320
it just prints stuff out with,


00:03:52.320 --> 00:03:54.920
prints the headers and then dashed lines,


00:03:54.920 --> 00:03:57.080
and then your columns underneath.


00:03:57.080 --> 00:03:59.240
But it also like spaces it correctly,


00:03:59.240 --> 00:04:00.960
'cause that, I mean, actually that,


00:04:00.960 --> 00:04:03.420
trying to get that right by yourself by hand


00:04:03.420 --> 00:04:04.880
is just a pain to try to figure out


00:04:04.880 --> 00:04:07.760
how wide things are supposed to be and whatever.


00:04:07.760 --> 00:04:09.880
So this just does it, and it's great.


00:04:09.880 --> 00:04:11.960
- Not only does it do it by text,


00:04:11.960 --> 00:04:14.160
like the example that you have in the show notes


00:04:14.160 --> 00:04:16.560
really illustrates like the nuance here.


00:04:16.560 --> 00:04:20.000
So it's got a list of planets, their radius and masses.


00:04:20.000 --> 00:04:22.800
And for the sun, it has in scientific notation,


00:04:22.800 --> 00:04:27.800
like 1.8, 1.989 times 10 to the ninth.


00:04:27.800 --> 00:04:32.420
And then for the other ones, it's like 5,973.6.


00:04:32.420 --> 00:04:36.120
It aligns the decimal places, not all to the right.


00:04:36.120 --> 00:04:37.160
I mean, it's glorious.


00:04:37.160 --> 00:04:38.520
- Yeah, the alignment is neat.


00:04:38.520 --> 00:04:39.680
I really appreciate that.


00:04:39.680 --> 00:04:42.140
So you have control over some of your number formatting


00:04:42.140 --> 00:04:45.400
in your alignment, but also if you're outputting


00:04:45.400 --> 00:04:48.380
for different things, there are multiple different formats,


00:04:48.380 --> 00:04:52.100
including like a simple markdown type table,


00:04:52.100 --> 00:04:55.020
but it also does GitHub flavored markdown tables


00:04:55.020 --> 00:04:59.180
and pipes that just look nice if they just kind of make it


00:04:59.180 --> 00:05:02.880
look like boxes, and there's Jira style and MediaWiki


00:05:02.880 --> 00:05:06.940
and HTML and just plain if you don't want any sort of stuff


00:05:06.940 --> 00:05:09.740
in between, just spaces in between, it looks nice.


00:05:09.740 --> 00:05:10.580
- That's cool.


00:05:10.580 --> 00:05:14.660
like output this in JIRA format and like paste it into a JIRA issue as like,


00:05:14.660 --> 00:05:17.440
here's what we're doing now, or here's the problem or here's the data.


00:05:17.440 --> 00:05:21.500
Yeah, definitely. It's a good one for keeping track of tables.


00:05:21.500 --> 00:05:22.620
Yeah. Wow.


00:05:22.620 --> 00:05:27.020
Another good thing is all the stuff that you and I have to offer people to learn


00:05:27.020 --> 00:05:29.180
more information about lots of stuff.


00:05:29.180 --> 00:05:32.260
Yeah, absolutely. We have the podcast, but we also have other things as well.


00:05:32.260 --> 00:05:33.980
Yeah. So if you want to support what we're doing,


00:05:33.980 --> 00:05:36.980
one of the things you can do is become a Patreon supporter.


00:05:36.980 --> 00:05:40.540
So there's a link on the page where you can throw a couple bucks at us a month.


00:05:40.540 --> 00:05:44.020
if you want, but also I've got a book.


00:05:44.020 --> 00:05:47.140
If anybody was not aware of that, there's a pytest book.


00:05:47.140 --> 00:05:48.500
- You've written a pytest book?


00:05:48.500 --> 00:05:50.780
That's awesome. - Yeah, I did.


00:05:50.780 --> 00:05:51.660
- It's good, I really like it.


00:05:51.660 --> 00:05:54.300
- Another podcast called Test & Code.


00:05:54.300 --> 00:05:56.400
I'd love to have more people go check that out


00:05:56.400 --> 00:05:57.880
and suggest what you want.


00:05:57.880 --> 00:06:00.140
So I'd like to have people tell me


00:06:00.140 --> 00:06:03.660
about what other topics should be covered there.


00:06:03.660 --> 00:06:07.480
You also offer quite a few learning opportunities for people.


00:06:07.480 --> 00:06:08.620
- Yeah, absolutely.


00:06:08.620 --> 00:06:10.580
The main thing for me, if you want to support me,


00:06:10.580 --> 00:06:12.400
like obviously we have the Patreon and that's great,


00:06:12.400 --> 00:06:15.660
but if you want to support us and get something back,


00:06:15.660 --> 00:06:17.120
you could take one of our courses


00:06:17.120 --> 00:06:18.440
over at Talk Python Training.


00:06:18.440 --> 00:06:20.000
We're doing all sorts of cool stuff there.


00:06:20.000 --> 00:06:22.980
We've got like 120 hours of Python courses


00:06:22.980 --> 00:06:24.660
and exercises beyond that.


00:06:24.660 --> 00:06:28.500
But we recently just kicked off a cohort thing


00:06:28.500 --> 00:06:30.460
where people can go through as groups.


00:06:30.460 --> 00:06:32.340
So that's something I'm trying to put together


00:06:32.340 --> 00:06:34.300
and you know, we'll probably be more opportunistic


00:06:34.300 --> 00:06:35.700
to do that as well.


00:06:35.700 --> 00:06:37.460
So yeah, check it out if you want to learn Python.


00:06:37.460 --> 00:06:38.620
that's where I recommend people go.


00:06:38.620 --> 00:06:41.660
- Yeah, I wanna bring something up about your courses.


00:06:41.660 --> 00:06:43.140
There's a lot of the courses that are,


00:06:43.140 --> 00:06:44.980
there's a lot of content there


00:06:44.980 --> 00:06:46.980
and it's wonderful information.


00:06:46.980 --> 00:06:48.220
One of the things I really love,


00:06:48.220 --> 00:06:50.900
especially in this working from home environment


00:06:50.900 --> 00:06:53.460
where I don't often have a lot of time,


00:06:53.460 --> 00:06:55.260
is the way you've broken up all the courses


00:06:55.260 --> 00:06:57.340
into little tiny pieces.


00:06:57.340 --> 00:06:58.620
So there's a table of contents


00:06:58.620 --> 00:06:59.740
so you can go through the course


00:06:59.740 --> 00:07:01.980
and see what you've seen and see what you haven't,


00:07:01.980 --> 00:07:03.900
but you can keep track of what you haven't


00:07:03.900 --> 00:07:06.100
and there's often just,


00:07:06.100 --> 00:07:07.740
If you've got like three to five minutes,


00:07:07.740 --> 00:07:09.820
you can fit in a little extra video.


00:07:09.820 --> 00:07:10.660
- Yeah, thank you so much.


00:07:10.660 --> 00:07:11.480
That's awesome.


00:07:11.480 --> 00:07:12.500
- And I like that you've done that.


00:07:12.500 --> 00:07:14.340
- Yeah, I really want to try to make the courses


00:07:14.340 --> 00:07:17.200
have meaning as a reference afterwards as well.


00:07:17.200 --> 00:07:19.020
And like, nobody wants to go back


00:07:19.020 --> 00:07:20.260
and scan a 30 minute video


00:07:20.260 --> 00:07:22.220
for that 30 second clip you're looking for.


00:07:22.220 --> 00:07:23.040
- Yeah, that's good.


00:07:23.040 --> 00:07:23.880
- Awesome.


00:07:23.880 --> 00:07:24.740
You know what else is really good?


00:07:24.740 --> 00:07:26.220
Tree beards.


00:07:26.220 --> 00:07:28.500
Yeah, for real, tree beards are pretty awesome.


00:07:28.500 --> 00:07:29.900
- Is that like a neck beard?


00:07:29.900 --> 00:07:32.180
- But for a tree.


00:07:32.180 --> 00:07:33.000
- Okay.


00:07:33.000 --> 00:07:33.840
- Okay, yeah.


00:07:33.840 --> 00:07:35.100
So I actually have no idea the relationship


00:07:35.100 --> 00:07:39.680
of the neck beard to the tree beard, but tree beard is continuous integration for


00:07:39.680 --> 00:07:41.540
notebooks, which is pretty cool actually.


00:07:41.540 --> 00:07:42.220
That is cool.


00:07:42.220 --> 00:07:47.420
So this was recommended by Brian Skinn and it's continuous integration


00:07:47.420 --> 00:07:50.000
for a particular subset of notebooks.


00:07:50.000 --> 00:07:52.280
Those are the notebooks that are binder ready.


00:07:52.280 --> 00:07:55.500
So if you're not familiar with binder, I recently did a talk by


00:07:55.500 --> 00:07:56.760
Thon episode on this and.


00:07:56.760 --> 00:08:00.400
Came to appreciate binder way more than I originally did.


00:08:00.400 --> 00:08:08.880
So, Binder is a place where you can basically point a GitHub repo or some repo at, go to


00:08:08.880 --> 00:08:12.880
Binder, point it at your repo, say, "Here's the notebook, here's the dependencies files


00:08:12.880 --> 00:08:14.240
and everything."


00:08:14.240 --> 00:08:17.360
And then you just click a button and say, "Let me run this on Binder."


00:08:17.360 --> 00:08:21.200
Because if you go to GitHub, you see the possibly the output from the notebook, but that's like


00:08:21.200 --> 00:08:23.280
cached what was run the last time.


00:08:23.280 --> 00:08:27.320
If you want to actually run it and play with it, you can click launch a Binder, it'll fire


00:08:27.320 --> 00:08:32.200
up a little docker image somewhere magically in the cloud and it'll just run it.


00:08:32.200 --> 00:08:38.880
So you basically configure the repo to describe to binder what it needs to run successfully,


00:08:38.880 --> 00:08:39.880
right?


00:08:39.880 --> 00:08:44.320
So that's how this works is Treebeard basically says if there's something that can be run


00:08:44.320 --> 00:08:51.040
on binder, then it will use that same functionality to automatically install the dependencies,


00:08:51.040 --> 00:08:53.320
which could be like conda or pip or whatever.


00:08:53.320 --> 00:08:57.560
And then it'll run the notebook using that cool library called Paper Mill, which sort


00:08:57.560 --> 00:09:01.280
of converts notebooks into kind of function type things.


00:09:01.280 --> 00:09:07.480
It'll upload the output and do an NB convert on the notebook to save it and create like


00:09:07.480 --> 00:09:12.600
a version stamped last run of your notebook that you can go back through your continuous


00:09:12.600 --> 00:09:18.320
integration and see the history of the outputs saved as HTML, which is pretty awesome.


00:09:18.320 --> 00:09:22.480
And it integrates with a GitHub app that'll like push notifications back to your repo.


00:09:22.480 --> 00:09:24.200
it integrates with Slack,


00:09:24.200 --> 00:09:26.080
it has all kinds of interesting things like this.


00:09:26.080 --> 00:09:29.640
So really a neat mechanism to make sure


00:09:29.640 --> 00:09:32.240
that your code just keeps running if it's a notebook.


00:09:32.240 --> 00:09:33.960
- Yeah, it's even got like secret management


00:09:33.960 --> 00:09:36.720
so you can, if you have to connect with different things


00:09:36.720 --> 00:09:38.760
with passwords and stuff.


00:09:38.760 --> 00:09:40.740
- Don't you just put those in the notebook?


00:09:40.740 --> 00:09:41.580
- No.


00:09:41.580 --> 00:09:42.400
- No, darn it.


00:09:42.400 --> 00:09:44.780
Yeah, no, that's really cool.


00:09:44.780 --> 00:09:46.720
It has secret management and all kinds of stuff.


00:09:46.720 --> 00:09:49.360
And basically when I first saw this, I thought, okay,


00:09:49.360 --> 00:09:52.160
well, what's the criteria of success, right?


00:09:52.160 --> 00:09:54.240
Like how do I write a test to indicate


00:09:54.240 --> 00:09:56.620
a successful notebook experience?


00:09:56.620 --> 00:09:59.440
The way it works is basically it runs all the cells


00:09:59.440 --> 00:10:01.760
and if all the cells run without exceptions,


00:10:01.760 --> 00:10:03.440
then it's successful.


00:10:03.440 --> 00:10:05.560
So it's not like it's making assertions,


00:10:05.560 --> 00:10:07.180
but it's kind of like a smoke test.


00:10:07.180 --> 00:10:09.600
Like it didn't entirely explode,


00:10:09.600 --> 00:10:11.160
so we think it's probably okay.


00:10:11.160 --> 00:10:12.880
That's not bad for a starter.


00:10:12.880 --> 00:10:15.040
- I mean, conceptually, you could put asserts in there


00:10:15.040 --> 00:10:16.120
and that would throw an exception.


00:10:16.120 --> 00:10:16.940
- Exactly, right.


00:10:16.940 --> 00:10:19.520
You could build in the test at like some layer in there.


00:10:19.520 --> 00:10:21.880
Like have even a Python file that you import


00:10:21.880 --> 00:10:23.600
that like does the tests, I don't know, whatever.


00:10:23.600 --> 00:10:24.520
There's a lot of options.


00:10:24.520 --> 00:10:27.920
So you're right, you could make your notebook report out.


00:10:27.920 --> 00:10:28.760
- Make some cells in there.


00:10:28.760 --> 00:10:29.680
- Yeah, make some cells that'll blow up


00:10:29.680 --> 00:10:30.960
if things go wrong, for sure.


00:10:30.960 --> 00:10:32.440
- Yeah, somebody should get ahold of us


00:10:32.440 --> 00:10:33.680
and tell us why beard.


00:10:33.680 --> 00:10:36.760
- Yeah, 'cause trees generally don't have beards.


00:10:36.760 --> 00:10:38.040
(laughing)


00:10:38.040 --> 00:10:39.920
- Well, okay, we live in Oregon,


00:10:39.920 --> 00:10:41.960
so they're often very mossy, so.


00:10:41.960 --> 00:10:43.680
- That's true, they've got that little moss thing


00:10:43.680 --> 00:10:46.040
if it's just right, actually, it could totally do that.


00:10:46.040 --> 00:10:46.880
You're sure?


00:10:46.880 --> 00:10:47.700
- Yeah, okay.


00:10:47.700 --> 00:10:48.640
- So one thing that surprised me, Ryan,


00:10:48.640 --> 00:10:50.080
that seems to keep coming up and up,


00:10:50.080 --> 00:10:52.560
and both of us are talking about it next.


00:10:52.560 --> 00:10:56.160
Like, I feel like we've aligned perfectly so far.


00:10:56.160 --> 00:10:57.000
- Oh my gosh, we are.


00:10:57.000 --> 00:10:59.680
- Dude, we're both talking about virtual environments.


00:10:59.680 --> 00:11:00.520
You go first.


00:11:00.520 --> 00:11:02.440
- Okay, so there's a couple of things that we,


00:11:02.440 --> 00:11:05.920
in episode 184, we discussed virtualenv,


00:11:05.920 --> 00:11:09.320
N-V-E-N-V, and actually I learned quite a bit


00:11:09.320 --> 00:11:13.620
to find out that virtualenv is still pretty cool and fast.


00:11:13.620 --> 00:11:17.000
But that was in 184, but we had people get ahold of us


00:11:17.000 --> 00:11:19.000
and say, "Hey, there's more information


00:11:19.000 --> 00:11:20.000
that you guys don't know.


00:11:20.000 --> 00:11:21.000
And I love that.


00:11:21.000 --> 00:11:22.000
Please keep it coming.


00:11:22.000 --> 00:11:25.000
If we do half of the story, give us the rest of it.


00:11:25.000 --> 00:11:29.000
In Python 3.9, so VENV, the built-in one,


00:11:29.000 --> 00:11:32.000
it has a cool new flag called "upgradeDepth"


00:11:32.000 --> 00:11:34.000
for upgrading your dependencies.


00:11:34.000 --> 00:11:36.000
It's like not all of your dependencies,


00:11:36.000 --> 00:11:38.000
but it's for virtual environments.


00:11:38.000 --> 00:11:39.000
Every time you create one,


00:11:39.000 --> 00:11:42.000
we commented that you have to upgrade PIP.


00:11:42.000 --> 00:11:47.000
And this new flag allows it so when you install,


00:11:47.000 --> 00:11:48.000
create a new virtual environment,


00:11:48.000 --> 00:11:52.500
It automatically upgrades set of tools and pip for you.


00:11:52.500 --> 00:11:53.500
Yeah, that's just nice.


00:11:53.500 --> 00:11:55.500
That's in Python 3.9.


00:11:55.500 --> 00:11:57.000
I tried it out already.


00:11:57.000 --> 00:11:58.500
I tried it on Beta 1.


00:11:58.500 --> 00:12:00.000
Beta 3 is already out.


00:12:00.000 --> 00:12:02.000
So you can try it out if you want.


00:12:02.000 --> 00:12:07.000
The other news is the Virtual Env is getting something new.


00:12:07.000 --> 00:12:08.500
And it's not there yet.


00:12:08.500 --> 00:12:10.000
I'm not sure when it's coming.


00:12:10.000 --> 00:12:11.000
But I think it's soon.


00:12:11.000 --> 00:12:15.000
It's getting a feature called periodic update, which is super cool.


00:12:15.000 --> 00:12:17.460
So one of the things, so Virtualenv,


00:12:17.460 --> 00:12:19.440
since it's separate from your Python,


00:12:19.440 --> 00:12:22.540
or you can have it install, make virtual environments


00:12:22.540 --> 00:12:24.580
for multiple Pythons, for instance,


00:12:24.580 --> 00:12:29.320
but it also keeps its own cache of new pip,


00:12:29.320 --> 00:12:31.600
new setup tools, and new wheel,


00:12:31.600 --> 00:12:33.740
that package you need if you're creating wheels.


00:12:33.740 --> 00:12:35.940
And so it has those upgraded already,


00:12:35.940 --> 00:12:39.880
but the periodic update, it will just have this extra thing


00:12:39.880 --> 00:12:41.280
that in the background goes off


00:12:41.280 --> 00:12:44.080
and checks to see if there's new ones around.


00:12:44.080 --> 00:12:48.800
So whenever you actually need to create a new virtual environment, it'll automatically


00:12:48.800 --> 00:12:53.760
have an updated one that it can install right away, which is neat.


00:12:53.760 --> 00:12:54.760
Yeah, that's pretty cool.


00:12:54.760 --> 00:12:55.760
Nice.


00:12:55.760 --> 00:12:59.520
And if you don't want it to go off and do the background, you can manually say, okay,


00:12:59.520 --> 00:13:02.040
right now I want you to go off and upgrade it right now.


00:13:02.040 --> 00:13:03.560
So, okay, that's a cool idea.


00:13:03.560 --> 00:13:04.560
I like it.


00:13:04.560 --> 00:13:07.000
So you've got a better chance of having updated stuff.


00:13:07.000 --> 00:13:10.560
If like you're working without an internet connection at the moment or something.


00:13:10.560 --> 00:13:15.360
It already had a kept it its own version of it that would upgrade it.


00:13:15.360 --> 00:13:17.280
So you already can.


00:13:17.280 --> 00:13:19.760
It's newer than if you're using VNV.


00:13:19.760 --> 00:13:21.440
But I'm excited about it.


00:13:21.440 --> 00:13:26.340
And one of the other things I wanted to mention is I kind of complained about that the the


00:13:26.340 --> 00:13:28.480
prompt is different.


00:13:28.480 --> 00:13:33.400
And I got a little bit of the skinny about why the prompt is different in virtual M versus


00:13:33.400 --> 00:13:34.800
VNV.


00:13:34.800 --> 00:13:37.280
and it had to do with the prompt formatting


00:13:37.280 --> 00:13:40.660
on different operating systems was different,


00:13:40.660 --> 00:13:43.400
which is weird, but they coalesced it


00:13:43.400 --> 00:13:45.740
and made it a single prompt.


00:13:45.740 --> 00:13:49.340
And the need for, like sometimes you actually want


00:13:49.340 --> 00:13:51.380
to not have a space, you might not want


00:13:51.380 --> 00:13:52.780
to have those parentheses.


00:13:52.780 --> 00:13:55.260
So there may be reasons to not have


00:13:55.260 --> 00:13:56.620
the parentheses in space.


00:13:56.620 --> 00:13:58.920
So there's reasoning behind it.


00:13:58.920 --> 00:14:01.380
It just still annoys me, but that's okay.


00:14:01.380 --> 00:14:02.420
(laughing)


00:14:02.420 --> 00:14:03.820
- It's cool to actually know why though.


00:14:03.820 --> 00:14:04.700
That's really nice.


00:14:04.700 --> 00:14:09.700
So all these things that make working with virtual environments better are great.


00:14:09.700 --> 00:14:12.700
But how about we just don't have virtual environments, but we still do?


00:14:12.700 --> 00:14:13.700
Wouldn't that be better?


00:14:13.700 --> 00:14:14.700
I don't know.


00:14:14.700 --> 00:14:17.700
So let me tell you what I'm thinking.


00:14:17.700 --> 00:14:25.700
So a while ago, for the 3.8 timeframe, there was a proposal called PEP 582.


00:14:25.700 --> 00:14:30.700
And PEP 582 is put together by a bunch of folks, Steve Dower,


00:14:30.700 --> 00:14:33.700
and four or five other people, I'm forgetting, Donald Stuff.


00:14:33.700 --> 00:14:36.220
stuff, then I know there's two other folks that I'm forgetting.


00:14:36.220 --> 00:14:37.220
Sorry about that.


00:14:37.220 --> 00:14:38.220
But anyway, it was put together.


00:14:38.220 --> 00:14:44.740
And the idea is that it proposes to add a mechanism to automatically recognize a Dunder


00:14:44.740 --> 00:14:50.500
Pi packages and prefer importing packages installed in there over global packages.


00:14:50.500 --> 00:14:55.780
So the idea is you just go to your project and say at the top of your project, go, here's


00:14:55.780 --> 00:14:57.300
the top of my project.


00:14:57.300 --> 00:15:01.540
And then when you pip install stuff, it will put things there.


00:15:01.540 --> 00:15:06.700
You won't have to activate a virtual environment because you're not changing anything outside


00:15:06.700 --> 00:15:08.240
the global system.


00:15:08.240 --> 00:15:10.820
It's just going to drop it in right there.


00:15:10.820 --> 00:15:12.680
Basically this is how Node.js works.


00:15:12.680 --> 00:15:18.680
So if I'm by npm install a thing, it just traverses up the directory until it finds


00:15:18.680 --> 00:15:20.620
a node modules.


00:15:20.620 --> 00:15:21.820
And it's kind of like that.


00:15:21.820 --> 00:15:25.560
So it says, if you have this folder here, we're going to automatically install stuff


00:15:25.560 --> 00:15:28.240
there and then Python will automatically know to look there.


00:15:28.240 --> 00:15:33.120
So if you're anywhere in a subfolder without even activating the virtual environment and


00:15:33.120 --> 00:15:38.080
you type Python something to run a command, as long as you're in the folder structure,


00:15:38.080 --> 00:15:39.080
it's going to use that environment.


00:15:39.080 --> 00:15:40.080
Oh, that's pretty cool.


00:15:40.080 --> 00:15:41.940
Yeah, that's pretty cool, right?


00:15:41.940 --> 00:15:46.600
So the motivation at least is it's like every time someone's new to Python, they're like,


00:15:46.600 --> 00:15:48.300
well, I can't install this thing.


00:15:48.300 --> 00:15:49.300
It says access denied.


00:15:49.300 --> 00:15:50.800
You're like, you know, permission denied.


00:15:50.800 --> 00:15:54.960
Like, well, okay, let me talk to you about virtual environments and why you need them.


00:15:54.960 --> 00:15:59.960
And also to activate the environment on the different shells and the different platforms


00:15:59.960 --> 00:16:05.960
like Windows versus POSIX, you know, source versus not source and bin versus scripts is


00:16:05.960 --> 00:16:06.960
different.


00:16:06.960 --> 00:16:07.960
And so that's kind of a pain.


00:16:07.960 --> 00:16:12.880
So the idea also, every time you open up a new terminal or command prompt, you've got


00:16:12.880 --> 00:16:14.040
to reactivate it.


00:16:14.040 --> 00:16:18.080
Like I've all, all for all of these things, I have aliases that make this happen.


00:16:18.080 --> 00:16:19.080
Right.


00:16:19.080 --> 00:16:22.800
So the idea here is that you don't have to worry about any of that stuff.


00:16:22.800 --> 00:16:25.640
You just have to like init your Python project somehow.


00:16:25.640 --> 00:16:26.800
It doesn't, I don't remember seeing


00:16:26.800 --> 00:16:28.520
how that was supposed to happen.


00:16:28.520 --> 00:16:31.320
But once that PyPackages folder is there,


00:16:31.320 --> 00:16:33.120
it's like, well, that's the top of the project


00:16:33.120 --> 00:16:34.000
and we're going to install there.


00:16:34.000 --> 00:16:36.000
And you presumably could have like a fallback one


00:16:36.000 --> 00:16:38.300
at the top of your user profile


00:16:38.300 --> 00:16:39.600
or something along those lines.


00:16:39.600 --> 00:16:41.000
- Yeah, you have that.


00:16:41.000 --> 00:16:42.800
So that's for the packages.


00:16:42.800 --> 00:16:44.240
But what about in virtual environments,


00:16:44.240 --> 00:16:48.080
you also have local scripts that come along, entry points.


00:16:48.080 --> 00:16:48.920
- Yeah.


00:16:48.920 --> 00:16:49.740
- Do you know if it deals with that?


00:16:49.740 --> 00:16:51.000
- I don't know.


00:16:51.000 --> 00:16:51.840
I don't know about it.


00:16:51.840 --> 00:16:53.480
Well, I didn't read like every word of it.


00:16:53.480 --> 00:16:57.620
So it's in draft mode, but I was a little confused because it


00:16:57.620 --> 00:16:59.820
says its version is Python three, eight.


00:16:59.820 --> 00:17:00.960
I'm like, well, three, it's shipped.


00:17:00.960 --> 00:17:04.020
It should either be closed or or published.


00:17:04.020 --> 00:17:05.640
That seems weird.


00:17:05.640 --> 00:17:08.720
So I sent a message to Steve Dower just a moment ago on Twitter.


00:17:08.720 --> 00:17:14.960
And he said that, Michelle Doss, one of the folks proposing it, I


00:17:14.960 --> 00:17:18.680
think the primary guy, still working on it, the text itself hasn't been


00:17:18.680 --> 00:17:22.840
updated before 3.8's release, which is why the header is still a little bit out of date.


00:17:22.840 --> 00:17:28.060
So it's probably more like a 3.10 thing or something, but it's still pretty cool.


00:17:28.060 --> 00:17:32.560
If you want to try to live in this world and see what it's like, David O'Connor has this


00:17:32.560 --> 00:17:36.880
thing called PyFlow, and PyFlow basically does this.


00:17:36.880 --> 00:17:38.480
It integrates with PyProject.com.


00:17:38.480 --> 00:17:41.560
Oh man, we lined it up good this week.


00:17:41.560 --> 00:17:45.720
And you go through, instead of saying pip install, you say PyFlow install.


00:17:45.720 --> 00:17:50.360
instead of saying Python run, you say, or Python script, you say PyFlow script,


00:17:50.360 --> 00:17:55.800
because it has to like, re initialize that every time because it's not actually changing something.


00:17:55.800 --> 00:18:00.360
Anyway, it's interesting, I would like to see something kind of like this. I think it's pretty


00:18:00.360 --> 00:18:05.960
neat. There's also some interesting possibilities around direnv that I'm looking into just talking


00:18:05.960 --> 00:18:13.400
to someone, Chris, who has got some cool ways to have direnv automatically activate virtual


00:18:13.400 --> 00:18:16.320
which would be kind of cool as well.


00:18:16.320 --> 00:18:18.600
So there's a lot of stuff happening here.


00:18:18.600 --> 00:18:19.820
It still kind of blows my mind.


00:18:19.820 --> 00:18:22.600
There's so much action around something that feels like


00:18:22.600 --> 00:18:26.280
it's just a, I don't know, so plumbing and foundational.


00:18:26.280 --> 00:18:29.360
- Yeah, but like you said, it is plumbing and foundational,


00:18:29.360 --> 00:18:31.140
but it's also one of those things that's,


00:18:31.140 --> 00:18:33.840
it's one of those tripping things.


00:18:33.840 --> 00:18:37.080
It's like the loose stone on the sidewalk


00:18:37.080 --> 00:18:40.560
that trips up all the new people all the time.


00:18:40.560 --> 00:18:42.640
- So far what we've managed to do is we've managed


00:18:42.640 --> 00:18:45.920
to spray paint a yellow line on both sides of it.


00:18:45.920 --> 00:18:46.840
You know?


00:18:46.840 --> 00:18:48.760
Somebody needs to shave that bad boy down.


00:18:48.760 --> 00:18:51.440
But right now, at least it's got a little marker on it.


00:18:51.440 --> 00:18:56.360
And I just want to say thanks to Louise Erbier on here.


00:18:56.360 --> 00:18:58.680
Sent that over and let me know about this whole project.


00:18:58.680 --> 00:18:59.880
So thank you for that.


00:18:59.880 --> 00:19:00.880
- Yeah, that's nice.


00:19:00.880 --> 00:19:03.280
So speaking of pyprojects.toml,


00:19:03.280 --> 00:19:05.360
I actually really love, I kind of like this.


00:19:05.360 --> 00:19:06.820
I like awesome lists.


00:19:06.820 --> 00:19:08.600
So awesome lists are a thing.


00:19:08.600 --> 00:19:10.640
We've covered many of them in the past.


00:19:10.640 --> 00:19:12.440
- There's even a Python bytes awesome list.


00:19:12.440 --> 00:19:17.440
- Yeah, this one is awesome, pyproject.toml projects.


00:19:17.440 --> 00:19:20.160
So this is one of the great things


00:19:20.160 --> 00:19:22.760
about different sorts of source code lists


00:19:22.760 --> 00:19:24.720
is to go and look at examples.


00:19:24.720 --> 00:19:28.720
So this is a list of other projects that are out there


00:19:28.720 --> 00:19:30.760
that already use pyproject.toml


00:19:30.760 --> 00:19:34.000
so you can look to see how other projects are doing it.


00:19:34.000 --> 00:19:37.360
So if you want to figure out for your own project,


00:19:37.360 --> 00:19:38.880
this is helpful.


00:19:38.880 --> 00:19:40.280
For instance, a lot of the testing


00:19:40.280 --> 00:19:41.840
and formatting stuff came along early.


00:19:41.840 --> 00:19:46.680
So covers.py is in there, pytest, tox, black, isort.


00:19:46.680 --> 00:19:48.560
I know, knew all of those.


00:19:48.560 --> 00:19:49.940
Ward was a new one to me.


00:19:49.940 --> 00:19:52.080
So ward is apparently a way to test things


00:19:52.080 --> 00:19:55.480
without like string named test functions


00:19:55.480 --> 00:19:57.240
instead of function names.


00:19:57.240 --> 00:19:58.520
I haven't really played with it much


00:19:58.520 --> 00:20:01.860
other than looking at the documentation, but it looks neat.


00:20:01.860 --> 00:20:05.520
But there's a code analysis like pylint and unimport


00:20:05.520 --> 00:20:10.080
and the really long titled, we make Python style guide


00:20:10.080 --> 00:20:12.840
which is a linter and other stuff, but it's pretty cool.


00:20:12.840 --> 00:20:16.920
And then it has a couple of links to articles about pyproject.toml.


00:20:16.920 --> 00:20:23.360
And then what I think is also neat is a, a list of projects that are discussing


00:20:23.360 --> 00:20:25.040
switching to pyproject.toml.


00:20:25.040 --> 00:20:25.360
So you can,


00:20:25.360 --> 00:20:29.060
that's probably pretty interesting if you're deciding, if you're


00:20:29.060 --> 00:20:30.360
trying to decide yourself, right?


00:20:30.360 --> 00:20:30.760
Yeah.


00:20:30.760 --> 00:20:33.920
To figure out what sort of discussions are going on in other projects


00:20:33.920 --> 00:20:35.920
as to why to switch and why not.


00:20:35.920 --> 00:20:37.120
So yeah, for sure.


00:20:37.120 --> 00:20:38.240
Pretty cool.


00:20:38.240 --> 00:20:38.760
Very cool.


00:20:38.760 --> 00:20:39.200
Yeah.


00:20:39.280 --> 00:20:41.560
I think people switch, I'm using it everywhere


00:20:41.560 --> 00:20:44.120
because it's just, it's sort of easier.


00:20:44.120 --> 00:20:47.080
What confused me for a little while was that it isn't,


00:20:47.080 --> 00:20:49.320
I thought it was something you needed


00:20:49.320 --> 00:20:52.160
Flit or Poetry to be using,


00:20:52.160 --> 00:20:56.580
but you can use byproject.toml with setup tools projects also.


00:20:56.580 --> 00:20:57.480
- Okay, interesting.


00:20:57.480 --> 00:20:58.480
Yeah, I didn't know about that.


00:20:58.480 --> 00:20:59.720
Yeah, I kind of thought it was tied


00:20:59.720 --> 00:21:03.000
to some of these higher order management,


00:21:03.000 --> 00:21:04.520
things like Poetry and Flit and so on.


00:21:04.520 --> 00:21:05.360
- Yeah.


00:21:05.360 --> 00:21:06.180
- Cool, cool, cool.


00:21:06.180 --> 00:21:08.680
- And like you said, there's a Python bytes awesome list.


00:21:08.680 --> 00:21:10.920
if people like awesome lists.


00:21:10.920 --> 00:21:12.080
- Sorry, I put that at the end there.


00:21:12.080 --> 00:21:12.920
People can check that out.


00:21:12.920 --> 00:21:14.360
Thanks, Jack, for doing that.


00:21:14.360 --> 00:21:16.400
- Yeah, so that's our six items.


00:21:16.400 --> 00:21:18.440
Michael, anything extra to share with us?


00:21:18.440 --> 00:21:19.500
- I got something for everyone.


00:21:19.500 --> 00:21:20.800
I got two things, actually.


00:21:20.800 --> 00:21:23.120
One follow-up and one new thing.


00:21:23.120 --> 00:21:27.160
First of all, we had Calvin on a while ago,


00:21:27.160 --> 00:21:29.000
a couple shows ago, was that last show?


00:21:29.000 --> 00:21:31.120
Show before, I think a couple shows ago,


00:21:31.120 --> 00:21:33.120
and we were talking about secrets,


00:21:33.120 --> 00:21:35.320
and he also, he's in your camp.


00:21:35.320 --> 00:21:36.920
He doesn't put them in the notebook


00:21:36.920 --> 00:21:38.780
or in the right there in the source code,


00:21:38.780 --> 00:21:39.780
he's doing something else.


00:21:39.780 --> 00:21:43.200
But what he talked about is actually using one password


00:21:43.200 --> 00:21:45.480
as like a vault, right?


00:21:45.480 --> 00:21:49.000
So one password has awesome encryption and security.


00:21:49.000 --> 00:21:51.840
And so a lot of the challenges revolve around,


00:21:51.840 --> 00:21:54.180
well, if I'm gonna put them somewhere else,


00:21:54.180 --> 00:21:55.800
if I just put them straight in the virtual


00:21:55.800 --> 00:21:57.340
into an environment variables,


00:21:57.340 --> 00:21:58.980
well, people can grab them there.


00:21:58.980 --> 00:22:01.680
So maybe I wanna put them some other place


00:22:01.680 --> 00:22:03.400
where it's like encrypted or something, right?


00:22:03.400 --> 00:22:05.080
So he talked about his mechanism


00:22:05.080 --> 00:22:09.080
of finding all those environment variables at launch


00:22:09.080 --> 00:22:11.740
and then like just as you run your virtual environment,


00:22:11.740 --> 00:22:14.360
injecting them there, but storing them in one password


00:22:14.360 --> 00:22:16.740
instead of just on the file system or something like that.


00:22:16.740 --> 00:22:19.800
So he did a blog post about how he's doing that.


00:22:19.800 --> 00:22:21.040
And so I'm gonna just link back to that.


00:22:21.040 --> 00:22:21.880
- Yeah, nice.


00:22:21.880 --> 00:22:22.800
- That looks pretty cool.


00:22:22.800 --> 00:22:26.720
And also I wanna give a shout out to Talk Python,


00:22:26.720 --> 00:22:28.760
specifically the last episode,


00:22:28.760 --> 00:22:29.800
at least the time of recording,


00:22:29.800 --> 00:22:32.280
it'll probably not be by the time we publish this,


00:22:32.280 --> 00:22:33.980
but nonetheless, just recently,


00:22:33.980 --> 00:22:36.020
You were a guest on Talk Python,


00:22:36.020 --> 00:22:39.940
where we talked about 15 awesome pytest plugins,


00:22:39.940 --> 00:22:43.000
mostly a few extensions like using with or alongside,


00:22:43.000 --> 00:22:44.780
but mostly pytest plugins,


00:22:44.780 --> 00:22:47.300
and went through things like pytest Sugar and Freeze Gun


00:22:47.300 --> 00:22:48.180
and all sorts of fun stuff.


00:22:48.180 --> 00:22:50.100
So people can't get enough of us.


00:22:50.100 --> 00:22:52.300
They can hear you being a guest over there


00:22:52.300 --> 00:22:54.300
talking about pytest the entire time.


00:22:54.300 --> 00:22:55.380
- Yeah, it's nice.


00:22:55.380 --> 00:22:56.220
- Yeah, that was fun.


00:22:56.220 --> 00:22:57.040
Thanks for coming on there.


00:22:57.040 --> 00:22:59.900
- I like to hear myself talk so much that I also,


00:22:59.900 --> 00:23:03.620
we cross-posted that on a testing code as well.


00:23:03.620 --> 00:23:04.820
- Yep, sounds good.


00:23:04.820 --> 00:23:07.820
- And one of the things, so as an extra bit,


00:23:07.820 --> 00:23:08.900
did you know that I wrote a book?


00:23:08.900 --> 00:23:10.540
- Yes, yeah, I've heard of that.


00:23:10.540 --> 00:23:11.780
No, it's a great book, I have it.


00:23:11.780 --> 00:23:14.100
- I published through Pragmatic Publishers


00:23:14.100 --> 00:23:16.620
and I just wanted to bring up that Pragmatic


00:23:16.620 --> 00:23:18.020
has a shiny new website.


00:23:18.020 --> 00:23:20.540
So the Pragmatic site is a little different


00:23:20.540 --> 00:23:24.060
and there's an FAQ up there if people wanna know why


00:23:24.060 --> 00:23:25.780
or what's different about it.


00:23:25.780 --> 00:23:28.460
And for the most part, it looks a lot the same to me


00:23:28.460 --> 00:23:30.100
but the entire backend is different


00:23:30.100 --> 00:23:32.380
and it's a little faster. - Yeah, yeah, cool.


00:23:32.380 --> 00:23:33.560
Faster is always nice.


00:23:33.560 --> 00:23:34.660
Makes it happy.


00:23:34.660 --> 00:23:35.500
Nice to work with.


00:23:35.500 --> 00:23:36.480
All right, I have a joke.


00:23:36.480 --> 00:23:37.860
Let's pretend we're roommates.


00:23:37.860 --> 00:23:39.400
You can be the first person


00:23:39.400 --> 00:23:40.880
and I'll be the second person, okay?


00:23:40.880 --> 00:23:42.040
- Okay.


00:23:42.040 --> 00:23:43.240
Okay.


00:23:43.240 --> 00:23:48.240
Stop by the store on the way home from work.


00:23:48.240 --> 00:23:52.320
Please stop at the market and buy one bottle of milk.


00:23:52.320 --> 00:23:53.960
If they have eggs, bring six.


00:23:53.960 --> 00:23:56.840
- I came back with six bottles of milk.


00:23:56.840 --> 00:23:59.000
- Why the hell did you buy six bottles of milk?


00:23:59.000 --> 00:24:01.320
I just said, it's just the two of us.


00:24:01.320 --> 00:24:02.320
- What do you think, man?


00:24:02.320 --> 00:24:03.320
because they had eggs.


00:24:03.320 --> 00:24:05.320
(laughing)


00:24:05.320 --> 00:24:07.120
Obviously, taking this programming logic


00:24:07.120 --> 00:24:08.260
a little strong, right?


00:24:08.260 --> 00:24:10.680
Stop by the store, if they have eggs,


00:24:10.680 --> 00:24:13.200
and get a bottle of milk, if they have eggs, get six.


00:24:13.200 --> 00:24:14.520
Cool.


00:24:14.520 --> 00:24:16.200
- That's funny. - Yeah, pretty good one.


00:24:16.200 --> 00:24:17.400
- Takes a little bit of thinking,


00:24:17.400 --> 00:24:20.080
so glad we have it written down for people.


00:24:20.080 --> 00:24:21.640
- Yeah, yeah, we can go back and study it, right?


00:24:21.640 --> 00:24:22.920
- Yeah. - All right, well,


00:24:22.920 --> 00:24:24.400
thanks a bunch, huh? - Cool.


00:24:24.400 --> 00:24:26.240
All right, thank you. - Yep, bye.


00:24:26.240 --> 00:24:28.000
- Thank you for listening to Python Bytes.


00:24:28.000 --> 00:24:30.440
Follow the show on Twitter @pythonbytes.


00:24:30.440 --> 00:24:33.520
That's Python Bytes, as in B-Y-T-E-S.


00:24:33.520 --> 00:24:36.420
And get the full show notes at pythonbytes.fm.


00:24:36.420 --> 00:24:38.640
If you have a news item you want featured,


00:24:38.640 --> 00:24:41.400
just visit pythonbytes.fm and send it our way.


00:24:41.400 --> 00:24:43.520
We're always on the lookout for sharing something cool.


00:24:43.520 --> 00:24:44.560
This is Brian Okken,


00:24:44.560 --> 00:24:46.680
and on behalf of myself and Michael Kennedy,


00:24:46.680 --> 00:24:48.760
thank you for listening and sharing this podcast


00:24:48.760 --> 00:24:50.400
with your friends and colleagues.

