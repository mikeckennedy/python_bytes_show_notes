00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 373, recorded March 5th, 2024. And I'm Brian Okken.

00:00:11 And I'm Michael Kennedy.

00:00:12 And you're just back from, where were you last week?

00:00:15 I was in the Philippines, hanging out in warm weather, meeting some new people, experiencing new places. It was excellent.

00:00:23 Yeah, nice to have you back.

00:00:24 Yeah, thanks. Good to be back.

00:00:25 This episode is sponsored by Scout APM. We'll hear more about them later.

00:00:29 If you want to connect with us or the show, we're on Fosstodon.

00:00:33 You can go to @mkennedy, @brianocken, or @pythonbytes@fostodon.org.

00:00:39 And if you're listening to us later, you can join us live if you want.

00:00:43 Go to pythonbytes.fm/live and join the audience there.

00:00:47 So Michael, what do you got for us first?

00:00:50 Well, I have some super fun stuff.

00:00:54 This one is not purely a Python thing, but it sure is helpful for Python developers.

00:01:00 Brian, would you say that you use the terminal fair amount?

00:01:03 Yes.

00:01:05 In your world?

00:01:06 Yes.

00:01:07 As do I. And like navigating the terminal is always a bit of a hassle.

00:01:10 I'm like, "Hmm, Michael, did you really need to have it that deep of a directory tree

00:01:15 folder structure for this thing? Because your CD and that CD and that, like,

00:01:20 did you need to name the same?" So like tab complete doesn't really help you as much as you would want and so on.

00:01:26 So I want to tell you about z-oxide.

00:01:28 So z-oxide is like CD, you know, the command, one of the very first things you learn when you

00:01:33 learn about terminals, command prompts, and so on.

00:01:36 But it's way better.

00:01:38 The oxide is because it's written in Rust.

00:01:41 So that probably means it has a VC funding or something.

00:01:43 Nah, just kidding.

00:01:44 But it is backed by warp, which I've talked about before, which is also written in Rust.

00:01:50 And I believe does.

00:01:51 Anyway, the idea is that there's a little graphical animation.

00:01:56 So the idea is once you install it into your terminal and whatever terminal using it,

00:02:01 pretty much it supports that.

00:02:03 Okay.

00:02:04 Once you install it, it will start to remember all of your directory changes,

00:02:09 at least if you use it.

00:02:11 And I'll tell you more about that in a second.

00:02:12 But if you use it to move around, like imagine you've got a directory, the example they're using on the screen here is something like, let's see, some long path slash

00:02:25 foo, you know, some slash long slash path slash foo, right?

00:02:28 Like a big directory structure.

00:02:30 You could just say CD foo, and it'll just take you into that structure.

00:02:33 Cause it's like, all right, well, if the only directory structure I've ever seen that you

00:02:39 actually cared to go into that involves the word foo is this one.

00:02:43 You can say CD long, and it would take you just some slash long.

00:02:47 Once there's more than one, there's like a conflict, then you can do a couple of things.

00:02:52 You can hit space and then tab, and it'll pull up like a little autocomplete, or you can,

00:02:57 instead of like the hotkey they show or the command they show is Z, you could Z for some of our folks, you could type ZI for interactive,

00:03:07 and it'll show you like a fuzzy completion search deal of all the history you've ever had.

00:03:14 You can go into kind of a interactive way to go and find the files or the paths that you've

00:03:19 looked for before.

00:03:20 So, isn't that cool?

00:03:21 - It is cool.

00:03:22 I definitely need to check this out.

00:03:23 - Yeah, I've been using it for a few days and I really like it.

00:03:27 So a lot of what you know about CD is the same as Z.

00:03:32 So you can say Z dot dot, you can say Z minus to go to the previous directory,

00:03:36 not necessarily up one, but just wherever you were before.

00:03:39 Like I said, you do the ZI for the interactive or type a little bit and just

00:03:43 space tab to pull up autocomplete.

00:03:46 And you can get it in a bunch of ways.

00:03:48 Like look at all these platforms, Linux, macOS, Windows, BSD, even Android.

00:03:52 And on Mac, you can do a bunch of ways.

00:03:55 You can conda forge it, you can ASDF it, you can home brew it, all those.

00:04:00 And then look at all the different shells here.

00:04:02 - Wow, yeah.

00:04:03 - Even conch, the Python based one, but it's got the Z shell, which is what I'm doing these days.

00:04:09 And then if you want that interactive version, you need to install FZF, which is a command line fuzzy finder thing that you can do.

00:04:18 And then the thing that's interesting is like when I did this, there's no way, no way I'm going to remember to type Z.

00:04:24 I'm just going to type CD.

00:04:26 And then after a while, I'll be like, oh, I should have used Z, but it won't be in the history.

00:04:29 So let me just swap it out for Z, for CD, you know, swap those.

00:04:34 And so what you can do when you install it, does it say on here, probably, maybe it does.

00:04:40 Oh, it's up under the configuration.

00:04:42 So in the shell configuration, but you have to do this eval, Z oxide, init ZSH.

00:04:48 But then you can also say dash dash command CMD is some other character.

00:04:54 If you don't want to use Z, and if you say command is CD, then just CD becomes this thing instead.

00:05:02 And of course, if you don't like it, right, you just comment it out and it goes away.

00:05:06 Okay, that's what I did.

00:05:07 That ends up showing up in your one of your dot files or something.

00:05:10 And then you can, yeah, I put it in my ZSHRC file for me and just put that at the bottom.

00:05:16 You know, if I ever decide, you know what, I just want my CD back.

00:05:19 I could take that part out.

00:05:20 Or if I don't like this, I just comment that thing out.

00:05:22 It's pretty cool.

00:05:23 Yeah, I was just thinking, I don't know if I want to type Z because that's with my pinky, whereas CD is with my middle finger.

00:05:28 And I'll probably map it to something else like E or C or something.

00:05:32 Or just CD.

00:05:34 Yeah, I switch it to CD.

00:05:35 And then if you want to do the interactive, you do CDI.

00:05:37 But I think this is cool.

00:05:38 It's not going to change your life, but it's also...

00:05:41 - Little extra things that make your life a little faster is good.

00:05:46 - I find it really interesting that on both Windows and Mac, Linux to some degree, but Windows and Mac even more, especially Mac,

00:05:56 like you open up the default terminal experience and it is bad, bad.

00:06:02 It's like they want you to stay out of it.

00:06:04 You know what I mean?

00:06:04 - Yeah.

00:06:05 - So it opens up its white background, which I don't know, for some reason,

00:06:09 terminals, it just seems wrong for that.

00:06:11 But then also it's like the wrong font.

00:06:13 The fonts are incredibly small.

00:06:15 There's not hardly anything installed to help you, right?

00:06:19 It's just so many levels of you can add on these little tools that just make it so much nicer.

00:06:24 So anyway, I'm a big fan of this.

00:06:27 - Before we move on, one question from the chat was, does it remember directories across terminal sessions?

00:06:35 - It does remember across terminal sessions.

00:06:37 I think it must keep a little hidden folder file or something like that.

00:06:41 I didn't pay attention, but yeah, it's just, you need to have interacted with it.

00:06:46 I'm pretty sure it does it across sessions though.

00:06:47 - Okay, cool.

00:06:48 - Yeah.

00:06:49 - I'll definitely check it out.

00:06:50 - Yeah.

00:06:50 - Speaking of command line interfaces, I'd like to talk about building them.

00:06:55 - Oh yeah.

00:06:56 - So smart, there's an article called from Raul Pai, I think.

00:07:01 Smart CLIs with Typer.

00:07:03 And I was like, just excited to see this because I love Typer and I've been using both Typer and argpars a lot actually.

00:07:11 When I guess for me, I use Typer if I'm already importing other stuff, but if it's a package or a project that doesn't have any external dependencies,

00:07:21 then I'll try to use argpars because I don't want to pull in an external dependency just for Typer sort of thing.

00:07:27 However, but Typer is really fun.

00:07:30 This is a cool article and what I was surprised by was there was a whole bunch of stuff I learned in this.

00:07:35 Even though I've been using it for years, there's some great things that I didn't know about.

00:07:39 So there's a great article, check it out.

00:07:42 But the first thing I want to say is like right off the bat, it just talks about sort of a comparison between an argpars version and a Typer version.

00:07:52 It's not hugely different, but it just talks about how Typer, you don't have to like declare your arguments.

00:07:59 You just have a function.

00:08:00 You can just have it, discover it.

00:08:02 You can just have a function like main and Typer figures out that all of your

00:08:06 type hinted arguments to that function are now arguments to your script, which is cool.

00:08:12 But I want to hop to the things that I didn't, maybe I knew about and forgot or just never knew about.

00:08:18 Like how easy it is to do help.

00:08:20 So, well, help is actually a little easier in argpars, but it's not that bad in Typer.

00:08:26 You have to do a Typer annotated thing with argument with help on it.

00:08:33 It's a little clunkier, I guess, just it's not that bad, but it's a lot different than the, if you don't want to help,

00:08:40 you just have to, it's a little bit more work.

00:08:42 Anyway, prompting for input, I did not know you could do this.

00:08:46 So if you have like you would add help, you add a prompt instead.

00:08:52 If it's left out, what happens is Typer will prompt the user for it.

00:08:57 So like in the example, it gives a name and an age for this little example script.

00:09:03 If you forgot to put an age, it'll pop up and say, how old are you?

00:09:07 That's pretty cool that you can add a prompt.

00:09:09 - That's really cool.

00:09:10 Yeah, I really like that actually.

00:09:12 - I'm definitely going to have to try this because that's, there's a lot of times where it's good to have like some defaults, but also,

00:09:20 yeah, speaking of defaults, you can also add an environmental variable.

00:09:23 So if the default doesn't have to be hard-coded, but it could be an environmental variable that you set.

00:09:29 And then if you didn't add the argument, it'll pull it from an environmental variable.

00:09:35 So very cool there.

00:09:37 What else?

00:09:38 It talks about explicit apps versus, is it kind of a different way to do it?

00:09:44 And to do, there's a couple of ways to do our Typer and explicit app.

00:09:49 One is one of the ways, one of the neat things you get with that is multiple commands.

00:09:53 And so there's an example of doing multiple commands.

00:09:56 I love that feature of Typer.

00:09:59 And then as a comparison, a similar sort of a thing with ArcParks would have been sub commands.

00:10:05 So kind of a fun article.

00:10:07 And then I kind of got lost in the whole reusable command thing, but yeah.

00:10:12 - Yeah, this looks great.

00:10:13 Yeah, I didn't know about the input one or the environment variable one.

00:10:17 These are both awesome.

00:10:18 - Yeah, cool things if you're making your own command line interfaces.

00:10:22 And I also appreciated the shout out to ArcParks, not like, because that is the other one,

00:10:27 most people should consider either Typer or ArcParks, I think.

00:10:31 - For sure.

00:10:33 Andrew out there says that, yes, Z-Oxide does have a persistent database, as I thought.

00:10:40 And also asked whether Typer supports the union operator, the pipe operator for types.

00:10:46 I'm not sure, it said it didn't used to.

00:10:48 I'm not sure if it does.

00:10:49 - I don't know.

00:10:50 - I think you could run into issues.

00:10:52 Like if you said this is pipe int or pipe date time, like it could try to parse as a date time,

00:10:57 but then see the number as like a timestamp.

00:11:00 Right, I don't know, I can see how it can be tricky.

00:11:02 So maybe it's by design.

00:11:04 - I'm guessing not yet, but I guess just maybe based on the last time I tried it,

00:11:08 'cause one of the things is optional.

00:11:10 So if one of the things I love about the bar for types is to be able to say int or none

00:11:19 as an optional thing, but that's not how you do it with Typer.

00:11:23 With Typer, you have to say option, like at least the last time I tried it,

00:11:26 you had to say optional int equals none.

00:11:29 - Oh, interesting.

00:11:29 - But actually this is even, yeah, optional makes it so that's like int or none.

00:11:34 - Yeah, cool.

00:11:35 - Anyway, cool.

00:11:36 - Awesome, awesome.

00:11:37 - What else is awesome, Michael?

00:11:38 - So our sponsor, our sponsor is awesome.

00:11:42 Let's take a moment and thank them and tell you about them, and then I'll get back to it.

00:11:47 Let me tell you real quick about Scout APM.

00:11:50 They're big supporters of Python Bytes, so we appreciate that very much.

00:11:54 So if you are tired of spending hours trying to find the root cause of issues

00:11:59 impacting your performance, then you owe it to yourself to check out Scout APM.

00:12:03 They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:12:12 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs,

00:12:17 and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM,

00:12:23 and then you say, "Oh no, why is it so slow?

00:12:25 Why are you doing 200 database queries for what should be one?" So you can find out things like that.

00:12:29 And it links it back directly to source code, so you can spend less time in the debugger

00:12:33 and healing logs and just finding the problems and moving on.

00:12:37 And you'll love it because it's built for developers by developers.

00:12:40 It makes it easy to get set up.

00:12:41 Seriously, you can do it in less than four minutes, so that's awesome.

00:12:45 And the best part is the pricing is straightforward.

00:12:48 You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:12:53 And I just learned this, Brian.

00:12:56 They also have, they provide the pro version for free to all open source projects.

00:13:01 So if you're an open source maintainer and you want to have Scout APM for that project,

00:13:05 just shoot them a message or something on their pricing page about that.

00:13:08 So you can start your free trial and get instant insights today.

00:13:12 Visit pythonbytes.fm/scout.

00:13:15 The link is in your podcast player show notes as well.

00:13:17 And please use that link.

00:13:18 Don't just search for them because otherwise they don't think you came from us.

00:13:22 And then they'd stop supporting the show.

00:13:24 So please use our link, pythonbytes.fm/scout.

00:13:27 Check them out.

00:13:27 It really supports the show.

00:13:29 Awesome. Awesome.

00:13:31 Brian, are you, have you looked into like buffer overflows and how all that kind of bad stuff happens?

00:13:37 It's the first time I learned about it.

00:13:39 It was just fascinating about how you could abuse computers.

00:13:42 Yeah.

00:13:43 Yeah.

00:13:44 Well, I'm in C++.

00:13:46 So a lot of the time.

00:13:47 So you basically create buffer overflow.

00:13:49 Yeah.

00:13:49 Commonly.

00:13:51 Yeah.

00:13:52 Well, you know, in C++ Scott, they like the, not just the print F, but like the safe print Fs and other things.

00:13:58 Like there was additional like checking ones to help prevent that.

00:14:02 Right.

00:14:02 But the, our very own NSA, who knows something about buffer overflows, I suppose, recommended

00:14:10 something pretty interesting.

00:14:11 It says, this was actually a shout out to Samuel Colvin, who put this on Twitter.

00:14:16 I don't know.

00:14:17 I think Twitter needs to decide what it is.

00:14:19 Is it X or is it Twitter?

00:14:20 I mean, I know they use the word X and the symbol X, but what's the domain?

00:14:23 It's not x.com.

00:14:24 It's twitter.com.

00:14:25 Come on.

00:14:25 So what are you?

00:14:26 All right.

00:14:26 Back, back to the topic.

00:14:27 Exeter.

00:14:29 I think X Twitter is the best we can do.

00:14:30 Anyway, he pointed out something with some interesting commentary here said the U S government,

00:14:37 specifically the NSA looking to say, Hey, maybe we should have it harder to break into our systems.

00:14:44 The government explicitly recommends six memory safe languages.

00:14:49 Okay.

00:14:49 And then he also creates a bit of a juxtaposition here.

00:14:52 C# created by Microsoft.

00:14:54 And there's usually like one or two people behind this, right?

00:14:57 For example, the C# was Anders Halsberg who also did TypeScript, Go created by Google,

00:15:03 Java created by Sun bought by Oracle rust created Borm by Bermuda, Swift by Apple and Python created by one genius on his own Christmas holiday.

00:15:19 The Python is an extraordinary demonstration of the impact one person and the group that

00:15:25 they build and have on the world, which I think brings together two interesting ideas here, right?

00:15:30 Like that I thought is officially one of the memory safe languages recommended that we should

00:15:36 be using by the NSA and then just the effect that Guido has had.

00:15:40 Yeah.

00:15:40 Yeah.

00:15:40 Just, I think it's interesting that I didn't really realize that rust was memory safe, but.

00:15:47 Yeah.

00:15:47 That's interesting too.

00:15:48 Isn't it?

00:15:48 It's it's, I think that's part of its magic, right?

00:15:51 How it's kind of a low level systems language, but it's way more memory safe as well with its

00:15:57 ownership and all that.

00:15:58 But, and then, oh my gosh, this is really took off.

00:16:00 It must be why I saw it's 781,000 views.

00:16:03 But then if you look, if you look at the comments, the comments, I can't see it cause I'm not

00:16:08 logged in, but there are many, many comments in the commentary is varied and interesting

00:16:14 down there.

00:16:14 Let me just tell you.

00:16:15 But yeah, I think this is interesting.

00:16:16 Like just one more reason to use Python or, you know, other memory safe languages as well.

00:16:22 But for example, in the comments, people pulling out, well, rust was created by one person

00:16:26 while they were at Mozilla.

00:16:28 But I, you know, it gets maybe a little bit different to say, you know, you were funded

00:16:32 by this big tech company to create this thing and you know, you did it.

00:16:36 Yeah.

00:16:36 Well, I mean, you have to, we have to, we're not really, I mean, I don't think Samuel's

00:16:40 intending to diss all the other languages.

00:16:42 So there's, there's definitely.

00:16:43 No, he was more props to, to get to.

00:16:46 But if you look at all the comments, it just, it does what you would expect a post like

00:16:51 this to do as people like get there, you know, their, their baby, not quite loved highly

00:16:58 notable in its absence is JavaScript here.

00:17:01 Hmm.

00:17:01 Yeah.

00:17:02 Yeah.

00:17:02 Interesting.

00:17:03 Yep.

00:17:03 All right.

00:17:04 Well, we'll leave it there.

00:17:05 People can check it out, but that's.

00:17:06 Yeah.

00:17:07 So we'll also have to, I haven't looked at the recommendation, the NSA recommendation

00:17:11 either.

00:17:12 So we'll have to check that out as well.

00:17:13 Yeah.

00:17:13 NSA says use Python.

00:17:15 Use Python.

00:17:16 Yes.

00:17:17 I mean, you know, and we all listen to the NSA in this case too, though.

00:17:21 Yeah.

00:17:21 I thought it was the other way around.

00:17:23 Didn't the NSA listen to us?

00:17:25 No, I know.

00:17:26 Oh yeah.

00:17:26 Right.

00:17:27 okay.

00:17:28 So I'm going to go back to the, the, command line world, for a moment and,

00:17:33 and talk about, textual.

00:17:35 So we've talked about texture before, Wilma Cougan's, child.

00:17:40 So, with came from rich than textual, but, textual is over at textual dot textualize.io.

00:17:47 So that's, a great place to look for, demonstrations and stuff.

00:17:51 So if you go there, there's some, some cool demos of what other people are doing with

00:17:55 it and some other projects.

00:17:56 These are great.

00:17:57 Wow.

00:17:58 The Dolphy looks cool.

00:17:59 Anyway.

00:18:00 so what I wanted to cover was that it does have its own tutorials.

00:18:05 so if you go, go to the main page, you can go on tutorials and there's a, there's

00:18:09 a great tutorial for how to use it.

00:18:11 There's a little timer tutorial.

00:18:12 It's nice.

00:18:13 but maybe, maybe the way that they're teaching there just doesn't fit you.

00:18:18 So I was really glad to see that, Mike Driscoll over at mouse versus Python has some

00:18:24 textual tutorials that he's started.

00:18:27 And, what caught my attention was the creating a modal dialogue for your two E's

00:18:32 with tech and textual, but he's got like four different, blog posts around tutorials

00:18:37 around textual right now.

00:18:38 So, Mike's done some great work teaching people before.

00:18:42 So I wanted to shout out to Mike for this, the modal dialogues kind of fun goes through

00:18:46 a little, fairly simple example, but the code's really just not complicated to

00:18:51 follow along with.

00:18:52 So, really kind of fun.

00:18:55 talking about how to do a modal modal dialogue, because that's something, why would

00:19:00 you want to quit?

00:19:01 I love it.

00:19:01 Are you sure you want to quit?

00:19:02 But there's other things like, are you sure you want to delete your entire repository?

00:19:06 and then we recommend a where clause in your delete statement against the database.

00:19:12 Yeah.

00:19:14 So anyway, good job, Mike, for, for jumping on this and helping to teach textual.

00:19:19 So cool.

00:19:20 Yeah, that's really cool.

00:19:21 Textuals very, very interesting.

00:19:23 So cool.

00:19:24 So, all right, well, those are our topics.

00:19:26 do you have any extras for us?

00:19:28 I have just a couple of extras.

00:19:31 I'd like to go through here.

00:19:32 So one, you know, ngrok, we've talked about ngrok before.

00:19:36 If you need to let people access services, typically HTTP, but it could honestly be anything

00:19:43 on your system.

00:19:44 You could run ngrok.

00:19:45 It's super cool.

00:19:46 I'll use it, pay for it, you know?

00:19:48 So like I'm working on a web app and I want somebody to be able to actually interact with

00:19:52 it, but I'm behind a firewall somewhere else.

00:19:54 You can just run ngrok, get an SS, SSL backed URL.

00:19:58 That's kind of some random thing that people go to.

00:20:01 So that's the CLI and all that, but they've released a little while ago, in December,

00:20:06 they released a ngrok Python SDK.

00:20:10 So if you want to write apps that basically temporarily spin up ways for people to get

00:20:16 into systems, like maybe you're on a Raspberry Pi or you're on some IOT thing and it's locked

00:20:22 away somewhere, but you need for it to be able to, people to get to it under certain

00:20:26 circumstances or whatever.

00:20:28 Right?

00:20:28 Then here you go, write some code and you plug into all that infrastructure.

00:20:32 It's pretty cool.

00:20:33 That is pretty handy.

00:20:34 Yeah.

00:20:35 Yep.

00:20:36 I don't have a particular use case for it, but cause I just use ngrok directly, but I'm

00:20:40 a big fan of ngrok and I think, you know, I'm sure there's going to be some interesting

00:20:43 things.

00:20:44 You can even do a Unix sockets, like Unix dot sock thing, which is pretty wild.

00:20:48 So gets, gets quite, quite advanced.

00:20:52 All right.

00:20:52 What else?

00:20:53 Let's see.

00:20:54 I recently, we talked, you brought up Djangonauts a while ago.

00:20:58 And so I recently had, Sarah Boyce and Tushar Gupta from the Django knot program

00:21:04 on Talk Python.

00:21:06 That was, I think released last week, recorded a while ago, but released last week.

00:21:10 And so just want to give a shout out to that since we brought it up first on the show.

00:21:14 Nice.

00:21:14 Cool.

00:21:14 Yeah.

00:21:15 Then Sarah was very excited to hear you mention it when you brought it up, you said on the

00:21:19 show, this show on our, on Talk Python, she mentioned that she was excited to hear it

00:21:23 here.

00:21:23 So that's cool.

00:21:24 Also, I had a really interesting experience with my phone brain.

00:21:27 I was looking at my phone going, I'm not sure I really like the color anymore.

00:21:30 And I've had it for a little while.

00:21:31 Maybe I'll get a new phone.

00:21:33 And then like, what is wrong with you?

00:21:36 Oh, it's an iPhone 13.

00:21:37 So I've had it for a while, but you're just going to put a black case on it anyway.

00:21:40 Maybe you just get a different case.

00:21:41 And you know, it kind of doesn't hold his charge as long.

00:21:44 So maybe just get a new battery for it.

00:21:46 It's like, depending on the one you got 69 bucks, 89 bucks for a new battery, instead

00:21:50 of like a thousand dollars for a new phone, $5 for a new case, 90 bucks for a new battery

00:21:55 dropped by the Apple store, they'll switch it.

00:21:56 It's what encouraged people like, Hey, you might be able to just up, you know, improve

00:22:00 your phone or, you know, give it a different color without going over the top.

00:22:04 Yeah.

00:22:04 What do I got?

00:22:05 I got an eight plus that I'm using.

00:22:07 The works fine.

00:22:09 That just changed the battery every couple of years.

00:22:12 Yeah, exactly.

00:22:12 And it's, it seems pretty trustworthy to do it at Apple, right?

00:22:15 They use the same battery or better.

00:22:17 They might not have the same old battery.

00:22:19 Sorry.

00:22:19 You got to get a better one.

00:22:20 Okay.

00:22:22 Take it.

00:22:23 Nice.

00:22:23 Cool.

00:22:23 Anyway, that's, that's my public service announcement for people out there applies to

00:22:27 Android as well.

00:22:28 You can get a new case for Android as well.

00:22:30 Okay.

00:22:30 Well, I have a couple of extras.

00:22:31 One of them is a public service thing, but the first one is just a shout out to a Hennig's

00:22:36 new video.

00:22:37 We talked about UV a couple of weeks ago, I think, or last week.

00:22:42 I can't remember.

00:22:42 And there's a video called is UV the future of Python packaging.

00:22:48 And it's, it's like 20 minutes, 17 minutes, but it's it's a really kind of a nice look

00:22:54 at the background of really what's going on here.

00:22:56 The speed ups might not seem the speed, everything's fast, faster is great.

00:23:01 Right.

00:23:01 But there's more to it than that.

00:23:03 And kind of about some of the future that they might be putting together after this

00:23:09 is, is important.

00:23:10 So interesting, interesting discussion.

00:23:13 I encourage people to check it out.

00:23:15 The other public service announcement that I wanted to say was I use Venmo occasionally,

00:23:20 mostly to send money to and from my daughter.

00:23:24 But, but I didn't notice, and I don't want to show off too much, but that's Venmo, you

00:23:30 know.

00:23:30 But I was surprised when I looked at my old transactions and found that the there's a

00:23:38 feed feature where you can, where everybody that's connected to you or even not connected

00:23:42 to you can see everything that you spent money on.

00:23:45 And I'm like, what the heck is this for?

00:23:48 Not this money, but like why the little message to the person and all sorts of stuff.

00:23:53 I don't think you can see them out, but you see that somebody paid somebody else and then

00:23:57 you can click on the other person and follow their feed and follow other people.

00:24:01 And this doesn't make sense for finances.

00:24:04 So I would encourage everybody to go into your settings and just turn that to private.

00:24:08 Nobody needs to see that.

00:24:10 I don't know why there's a social feature for a money sharing app.

00:24:13 What?

00:24:14 It's horrible.

00:24:14 It's just weird.

00:24:15 It's horrible.

00:24:15 I ended up using Venmo as well because my kids are like, dad, I'm going to Venmo you.

00:24:20 How about PayPal?

00:24:21 Venmo.

00:24:22 I'm like, all right.

00:24:22 But yeah, it's, it drives me nuts that I could see people that I was even friends with like

00:24:28 15 years ago, I still see what they're buying and who they shared lunch with.

00:24:31 It's just like that.

00:24:32 It doesn't belong in this space.

00:24:34 I just don't think so.

00:24:35 Yeah.

00:24:35 Turn, turn the feet off.

00:24:36 Turn the feet off.

00:24:37 And also I don't think it shouldn't be on by default.

00:24:40 And also people don't know about it.

00:24:41 So other people, you know, that use Venmo and let them know that their feeds public.

00:24:45 So yeah.

00:24:46 Anyway, cool.

00:24:47 Well, that was kind of serious, but do we have something funny?

00:24:50 Oh, this is very serious too.

00:24:51 No jokes.

00:24:52 All right.

00:24:53 So here's a developer and a project manager speaking.

00:24:57 The developer starts out and says, I can ship this feature that you want in four weeks,

00:25:01 because listen, I need to write maintainable code.

00:25:03 We can't just have like this tech debt piling up and all this junk.

00:25:07 Right.

00:25:07 Like this is a professional organization.

00:25:10 The PM says, what if we delegate maintenance to someone else?

00:25:13 Oh, I can release that in three days.

00:25:15 Exactly.

00:25:18 No test, Brian.

00:25:18 We don't need to ask.

00:25:19 Come on.

00:25:19 Well, yeah.

00:25:22 No optional.

00:25:23 So optional.

00:25:23 If that's someone else's problem, just kidding.

00:25:25 Well, is, is, is done when like when all the defects are done or.

00:25:31 You don't report that to the other person.

00:25:35 The API is frozen.

00:25:37 It's yeah.

00:25:37 Anyway.

00:25:38 Exactly.

00:25:39 Well, three days.

00:25:40 I can hack that in three days.

00:25:41 Yeah.

00:25:42 No, no problem.

00:25:42 We got it.

00:25:43 You got it covered.

00:25:44 Yeah.

00:25:45 My favorite is when somebody asks like one person on the team, how long to take this?

00:25:49 Can you get this to get it done?

00:25:51 And, and like one stage says like a week.

00:25:56 So they promise a customer a week and there's like so many other people that need to work on it.

00:26:02 Yes.

00:26:02 Oh yeah.

00:26:03 Oh, did you want documentation?

00:26:05 You want that?

00:26:05 You can want that written up as well.

00:26:07 Oh, I see.

00:26:07 A user interface for that also.

00:26:10 Oh, that's going to be.

00:26:11 Nobody pointed that out.

00:26:12 Yeah.

00:26:14 Tests or none.

00:26:15 Yeah.

00:26:16 Anyway.

00:26:16 Wait, we got to close it out with a comment from Alvaro test pipe.

00:26:20 None tests or none in the typing system.

00:26:23 Yeah.

00:26:24 I love it.

00:26:24 Optional tests are optional.

00:26:26 Tests are optional.

00:26:27 Yeah.

00:26:28 Anyway, again, thanks for the wonderful episode, Michael.

00:26:31 We'll talk to you next week.

