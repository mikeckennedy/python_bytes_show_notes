00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 298. Just two short of 300 coming in fast recorded August 23 2022. I'm Michael Kennedy. And I'm Brian knockin. Wow. Close to 300. That's amazing. Yeah. Yeah, that's a that's what is that coming up on six years? here pretty soon. That really? That's amazing. Well, the two times. Yeah, I don't know. Yeah. So pretty awesome. And got some fun folks we see in the audience who are out here frequently. While Google is here will is going to be a guest on the next episodes. If you want to hear from we'll be sure to

00:00:40 at least listen next episode if you don't come to live one. Yeah. Also before we got to be fantastic out. Also, before we get going on the topics, I just want to say thank you to Microsoft for startups, founders hub for sponsoring this and so many of the episodes this year, super great to have their support. Very cool. It's uncommon, Brian to have such great supporters, would you say it is uncommon?

00:01:03 Nice, nice segue. I like it. So I'd like to talk about uncommon uses of Python in commonly used libraries. Actually, this is just a pretty cool article, it's by Eugene Yang. And it's, it's he goes through a handful of things, I'm just gonna pull out one, but it goes through using superclasses. And a whole bunch of things. The idea was to learn how to build more maintainable and usable Python libraries. He's been reading some of the most widely used Python packages and learning some things along the way, which is, this is an awesome way to learn is to read other code. I agree. I think it's fantastic. Yeah, so he's good. He goes through super and to a handful of other things, when to use a mixin. I don't know if I'd use that. Anyway, the thing I want to pull out is using relative imports all the time. And this is something I picked up not too long ago, but it really isn't talked about much. So the idea is that if you do an import like a import something or from some library import, if you don't, if you put a.in, front of at the beginning is the first dot, then it looks in your, in your path, your current search, the directory of the file that it's in. So the example he has a base by a base.pi, from psychic learn, and it uses says from dot utils dot validation, import something and, and these are because it says dot utils, it looked for utils in the current directory and not somewhere else, because there's probably a utils like somewhere else also looking for the search path. So this is neat. You can do multiple, you can move do multiple dots. Also, I don't ever I don't think I ever do that I do the current directory and down or the current project and down. So this is that that will get you up up one and then down a different path or something like that. Right? It will. So if you do dot dot something and you don't do slashes you don't it's not a Deray Pat. It's kind of like a path, but it's not like.is the current directory dot.is Like one up in the you can do three. But wow. I think there's something wrong with your project if you're doing that. But maybe, maybe not. There is a couple of links in there for further reading. There's Guido's decision on relative imports, which is part of the part of the the PEP 328 Write up. And actually the this PEP 328 Write up is this a little bit about Guido's decision where he's talked about the leading daughter leading to dots. This is a really good easy way to get a handle on how to use this. And I use this a lot now and try to put it in projects, projects at work and project personal projects as well. So the dot thing is cool. And yeah, it isn't talked about much. So I like it. Yeah, it's fantastic. It only works in packages and not just a pile of module files, right? Oh, yeah. Yeah. So you have to have Dunder init files within the directory. And that's, I guess one of the things that I wish we had another name for because in Python, we talked about a package or a sub package. These are, this could be just a directory with Python files in it that has Dunder in it, and the done in that that makes it a package in Python, but we also just finished and yeah, yeah, we also talked about the package repository or in pi pi. It's the Python package index. Those are dot just directories with the neural nets. They're packaged up with a whole bunch of other meditated and stuff like that. So there's two things that we call packages, but yeah, yeah, they have to have Dunder knits in them for this to work. So anyway, yeah. Brent Brandon, in the audience. So are we arguing for relative imports?

00:04:45 Further, for the current directory? I am I think that within a project, if you're like internal stuff, you're not I mean, if it's if it's part of the external API of the project, I will always go through the external

00:05:00 API to get at something. But there's a whole. There's a lot of times where you're just developing a bunch of Python modules together. And they're internally, they're going to talk to other sub components. And that isn't necessarily part of the external API. And this is the best way to get at it. So yeah, yeah. All right. Sounds good. Next up, let's go to the sky plane. So this one comes to us from let me make sure I give the proper credit. This one comes to us from rm rf, the SU Duer, thank you for sending this in. Really appreciate it. The project is called Sky plane 114 times faster cloud transfers. When I first saw I was like, what does that mean? Exactly? Like, what's the baseline for this? I'll say So probably what they're basing that on in a minute. This is interesting for two reasons. It's interesting, because it's a tool that I think many Python developers would find useful, especially those folks doing a lot of work in the cloud. It is also useful or interesting, because it is itself a Python project. Okay. So if you want to contribute to it or understand it, or extend it or, or get into other things, that's totally possible. It's worked on by a pretty big group of folks. The idea is it gives you blazing fast bulk transfers, file transfers between any cloud any needs a little like star or an asterisk by it that says any means any of the big three cloud providers, okay? Whereas this is like AWS, it's Azure, and it's Google GCP. So those three, however, what I'm not clear on is whether you can point it at the s3 compatible places, like Linode and DigitalOcean. Also have cloud storage that are s3, like, but I'm pretty sure it won't work based on the way I'm about to tell you what's going to happen next. Okay. Okay. So if you go over, there's an architecture section. And if you look in there, they've got this Skyridge, cheat, winning 22, where Paris Jane introduces sky plane. And for the folks, there's about a 15 minute video, but you really got to watch just two minutes of it to get the Zen. So they lay down a scenario. This is I believe in their world, they're doing data science. And so what they need is they need the data very near to them. And there's a woman in the Middle East, using some AWS s3 endpoint there, and she has 3080 gigs of data. And Paris is on the east coast of the US, and once closer access to that data for their other work that they're doing. So there's a way with the AWS CLI. It's just copy from Bahrain, or wherever it is over to Virginia. And they run that and it says the after running for a while it says estimated time to completion one hour. I don't know is that good or bad? Like it's a lot of data, right? He gets halfway around the world as miraculous as possible. But is that good or not? So then they say, Well, let's try with Sky plane. They were getting like 20 megabit, I think they run it with Sky plane, they're getting 30 gigabit transfers from the Middle East, and it took 30 seconds instead of an hour. That's quite a bit faster

00:08:16 than that, so. Yeah, exactly. And so instead of going across the open internet, it's it was transferring basically over, like dedicated fiber for just AWS data center connects or something like that, right. But what it does is it will spin up a virtual machine, or many virtual machines in the different data centers. So I think what happened here, not 100% Sure, but I think it fired up some VMs in Virginia, copied it from s3 in Bahrain, directly through the internal data system, data center transfer, and then pushed it into like nearly local s3 storage. And you can do the same thing from like AWS east coast to Azure west coast, right, you would fire up a VM, I think in that scenario, and both of the data centers and those VMs would talk directly over the high speed data center network, instead of like the s3, one will copy down your machine and then you push it back out of your machine to the new destination. Yeah, basically manages data center to data center traffic. That's pretty cool. It makes it pretty cool. It has. Yeah, and but it's like all the CLI. It's like one CLI command. And that's creating the various virtual machines, provisioning them, setting up the encryption, doing all the stuff and then it shuts back down. So and as far as security goes, what you do is you basically install the AWS CLI or the the Azure CLI, and you just log into those local C eyes and CLI is and uses those behind the scenes to do the setup of like create the VM and then SSH over to it do work or something like that. So it has a lot of integrity checking, so it does like checksums and verifies the files are there. The file sizes are the same and all that kind of stuff. It

00:10:00 does end to end encryption, sort of. So the VM as it gets it out of cloud storage, encrypts it, and then sends it over the network. And then when it has to decrypt it to drop it back into the other place, but it also on top of that goes over TLS. However, some people might be storing encrypted data in the cloud, because they don't trust that it couldn't, you know, not gonna get looked at. So even the stuff in s3, or wherever Azure Blob Storage could be encrypted, in which case, you can turn all this off. And it'll go a lot faster, because it's already encrypted end to end, it'll set up like virtual private networks with if it's within a data center. And there's a bunch of cool things that are kind of nice that you don't have to worry about. Anyway, this is the the sky plane. So if you're transferring data between different clouds, or even different data centers within a single cloud, it looks like it'll do a lot of nice work for you. Now, it's, it's believable. It is faster. I was curious if it's cheaper, also, any comment? Oh, that's a really good point. Actually. If you go and say AWS to Azure, or vice versa, I think it's the same price. But if you're going Azure to Azure, it probably is cheaper, because I don't know what they really charge you for the s3 CLI. If you say do a transfer, you're still like flowing through. But you know, the within datacenter transfer is cheaper than outside. Out of the Yeah, exactly. Cool. So maybe I don't know, they didn't talk about it. But Possibly, yeah, well, that's what I got for you. Yeah, Skype. You know what else is awesome. Speaking of Azure, Microsoft for startups? Yeah. Yeah, absolutely. They are, like I said, big supporters of the show big fans of the show. And this episode, like many of them is brought to you by Microsoft, for startups, founders hub, if you have a startup, and you intend to have some kind of cloud computing resources, or you've dreamed of going to something like a Y Combinator type of accelerator, this is a really great way to get some of the benefits of that. So with Microsoft, for startup founders hub, they give you a bunch of resources for running your startup in the cloud in Azure, but also many other cloud resources, like a bunch of GitHub credits for automation and actions, as well as access to places like open AI. But another thing I think is really important is having access to mentors and people who have been there when have the right connections, right. Like, I think, honestly, that might be the hardest thing about doing a startup because as developers, we can build it after we can build it. But then it's, well, how do you build the right thing? How do you you know, in terms of customer fit, how do you get access to the right networks, so that you can find people for investing or get better, maybe coaching for like sales and marketing, all those things are incredibly hard, especially if your your expertise is in software. So through Microsoft, for startup founders hub, you get access to their entire mentorship network, access a pool of hundreds of mentors across a bunch of disciplines like idea, validation, fundraising, management, coaching, and sales and marketing, and a bunch of technical areas as well. So you'll be able to book a one on one meetings with these mentors, many of whom are founders themselves to make your idea a reality today, with the critical support you'll get from Microsoft for startups, founders hub to join the program, there are very few restrictions, you don't have to be third party validated. You don't have to necessarily have funding, you just visit Python buyside FM slash founders hub 2022, LinkedIn shownotes, you apply for free, you get accepted. You get all these benefits, and seems like a great program. Yeah. I'm excited to see what comes out of this. Yeah, absolutely. All right. What what do you got for us here? Brian? Well,

00:13:41 it wouldn't be complete if we didn't talk about

00:13:45 Wilma Coogan, a little bit.

00:13:48 Absolutely. Hey, what? So there's a article that is from the text realize.io blog. And it's seven things I've learned about building a modern to E framework. And this is pretty interesting, because I think that I mean, will more than anybody else is went has really thought about like, Okay, I want to I want to have something be really responsive and really good to work with on the command line, which is, it's been there for a long time, we just haven't developed it much. So there's a whole bunch of cool learnings that he talks about, like terminals are fast, and they're faster than we realize. But there's a whole bunch of like things that you can that are different about terminals and other places like Flickr and tearing and stuff and how to deal with that. There's a whole bunch of learnings in here. The thing that like popped out as something that everybody can use, that I wanted to talk about was a little blip that he talked about that is dicta views are amazing. So the thing he talks about here is that so maybe I don't know if everybody knows the term dict views or views into a dictionary, but things like if you ask for if you have a dictionary and you ask for the key

00:15:00 yeas, are you asked for items that is a view it's called a view into into a dictionary. And they are super fast. And one of the things he points out is that they act like they act like sets also. And you can use the you can use set operators like, here's the little caret symbol and was, can't remember how to look it up the caret symbol is a symmetric difference, basically, what's what's just give me a set of the stuff that's different about the two different sets or two dictionaries. And that you can do this in code buddy's doing it using using views, because those those operators are happening with with C code. Python has optimized those. So they they work super fast. And they're way faster than anything you could write in Python. So this just taking the items of two dictionaries and using set operations on them. And then you can go back to dictionaries, if you want. You don't have to use that. But super cool. I hadn't had I didn't know that about dictionaries and views. So yeah, nice. Obviously, use dot items and dot keys all the time didn't know they had this name. And I didn't know you could do set operations on him. Quite cool. Right? Yeah, super neat. Um, then he goes, covers a whole bunch of other stuff like LRU caching, and that how fast that is one of the things that I thought was great, where he talks about Unicode, in art, Unicode art in docstrings, have just like a picture says it says, you know, a picture gives you 1000 words or whatever. But

00:16:37 he gives an example here for talking about splitting the screen into sub regions. And yeah, there's no way to mean describing in text is good. But this little picture goes, you can just mentally go Oh, yeah, I get it. If you give it a cut x and a cut why you end up with four regions, obviously. But it isn't obvious just looking at the API. But with with a little picture, you're like, oh, yeah, that's cool. So he's got a little for people listening, he's got a picture showing just a spatially what, what it would look like using ASCII characters. So neat. Yeah, I love it. I love when people put art like that in there, I'm looking for where it is, I'd have to I guess I'm gonna have to look this up. But in C, Python, there's actually this huge diagram in the malloc. In the the minute, the memory manager section that shows you it's like this, it shows you all the different data structures and concepts that are used to manage memory, like the the pools, the blocks, and the arenas and all that stuff. And like a huge diagram in code comments. It's perfect, nice. And he gives a shout out to just one tool that's around, you must use it called mono draw. It's a Mac tool. But so there are drawing tools that you can use to generate ASCII art. So are our Unicode Okay, as it were? Yeah. So yeah. Nice. Oh, maybe I'll be able to find it here. Let's see. I'd love to share it with everyone. If I get find Oh, yes. Here we go. I'll put the link in here. You ready for this? Brian? You can show it. Yeah, I just got I had to find Hold on. There we go. Look at this. Oh, yeah. Here's, here's the object allocator in Python, and it shows here's the object specific ones and Dick. And then there's like object specific and you can see these tears then there's the object, the Python object allocator the ROM memory, and even goes down to like, here's the OS and the physical memory. And then I think maybe further down, and we might be able to find like some of the stuff about Irinej or whatever. But isn't that nuts? Yeah. But also, it's awesome. Because you mean, you can visually now you can read the text and it makes more sense, instead of a short description. And then a proper picture. Yeah, of here's what's happening. Yeah. Yeah, absolutely. Very good. Cool. So yeah, that's a great, great example. And great recommendation, sometimes a little bit of ASCII art like this. It really does have goes a long ways. Yeah. But there's a whole bunch other great tips in wills article. So encourage people to check it out. Right on. Another thing that goes a long way is Python. There's a an info world article, that refers to Python as unstoppable. The title is Python popularity is still soaring, but the subtitle is unstoppable Python once again, ranked number one in the August updates for both the tob and Ey PL indexes. I don't know that's PayPal, or I don't know how to say this, but a another secondary programming language index. And yeah, how cool is that? Very cool. Also a really nice rocket image. I was gonna say this is a characterizes the other programming languages hot air balloons in Python as a rocket take. Yeah. So yeah, some interesting things to take away from here. Let's say that Python first took the top spot just last October so that was actually big news, right? Yeah. Now it that makes it the only language besides C and

00:20:00 Java to ever hold the number one position from the tob index. And not only is it still number one, but it's actually gained a couple of percentage points on the current rankings, year over year. So, for example, come down here you can see it's actually up 3.56%. That's year over year. That's year over year. Nice, which is pretty awesome. Also, but the game also, so other, I guess we're whittling down taking away from I think it's taking from the lower languages down here, right, like Objective C or A Here we go. What did surprise you that Perl and Fortran have lost? By the way, also, that has the ratings. I don't know if that's quite what you would consider market share. But Python is at 15%. C is at 14%. Things that sometimes get compared like ours less than 1%. Ruby is less than 1%. Those are pretty interesting. Persons. Yeah. They're also not really general purpose languages. I mean, are isn't at least so yeah, yeah, that's for sure. Let's see. Yeah, the tob commentary accompany the index was Python seems to be unstoppable. It's hard to find a field of programming in which Python is not used extensively, extensively nowadays, except for safety, critical embedded systems. So that's, that's pretty cool. Let's see, Rust is now number 22. Closing in on the top one a carbon, have you been tracking carbon? No, this is I believe it's Google who is behind carbon? Yeah, it's a language that's intended to be to supplant C Plus Plus, but be very C Plus Plus, like an experimental successor to C++ strive for the C++ performance and compatibility, while avoiding its technical debt and extreme difficulty to improve.

00:21:46 Ouch. Yeah, yeah. Not saying extreme difficulty to use, but like, it's just, it's where it is. You know what I mean? Yeah. Yeah. It's like a language on top of a language on top of 50 years anyway. But so carbon has entered the index at a number at position 192. They've got some work to do. Yeah, but it's still interesting. So I'm gonna, yeah, and you look at the other programming index, again, no idea how to say it, you YPL the popularity a programming language is what the acronym stands for. It's an index creating is created by analyzing how often tutorials are language tutorials are searched on Google. So as one metric, Python is like massively ahead of second place, Java, replace JavaScript, and then it drops quick, quick, quick down from there. Like, for example, Ruby 1%. People are interested in tutorials how to do it, versus almost 30% for Python. Yeah. Anyway, that's just another another factor that was part of this InfoWorld article. So you know, I wanted the live streams not too long ago, somebody said, Oh, I heard that there's not a whole lot of jobs or interest in Python, maybe what else? Should I learn that but you know what? I'm not so sure. You're getting great advice? If that's where you're thinking, okay. populars popular is not everything. But it's an important part of like, Can I have a job? Can I find developers doing this? Will there be a library for my thing? X, I want to talk to you with it, and so on. I, I love Python, obviously. But I it's hard to answer those, like for a job which languages should I whether languages should I learn? I don't want to answer that depends on what you're trying to get into. But just as a roundabout developer, I think it is important to learn more than one language. I don't think that it would, I wouldn't want somebody to just stop with by now and say, Oh, I'm good. Oh, no, no. Yeah. Well, and you also, if you want to build mobile apps, you might want to look elsewhere. Well, except I might have, I might have something in an extra section for you on that. Okay. But Did I did I switch the order? Did I jump in front of you? I think I may have? I don't think so you got one more thing to know. Tell us about some magic. Oh, no. This is part one of my extras. So oh, that's when your extras. Okay. Well, let's that's it, then. Let's jump into extras. All right. Oh, I didn't want to cover this quick, really quick comment just from I think this is kind of amusing from se Steve and the audience. extreme difficulty to use. It's just a side benefit of C++. Yeah, I mean, yeah. Yeah. Think about all the jobs people get a kid keep without much effort over time. Like, exactly. It was mainly if there was a lot of competition for C++ developers.

00:24:27 I don't know what I would I would do I'm enjoying the competition. Yeah. So factly I just ran across this the magic of matplotlib style sheets article, and I just wanted to bring it up for people that might might want to try it out. So I've used matplotlib matplotlib style sheets before and they're just great. So you could just say like, so let's say you've got a current plot, and by default, it's just, it's not bad. It's just it is what it is. And then if you just draw

00:25:00 be in one line of code use Styles, plot style use, and then you drop a stylesheet name. There's a whole bunch of built in ones you can use. It just looks nicer. It's got like, my love. It's subtle, but it looks so much better. Yeah, um, but I didn't know that it's pretty easy to write your own. I didn't. I mean, I figured maybe style sheets were complicated. So the rest of this article just talks about,

00:25:22 really how to how to write your own style sheet. So if anybody's interested in in customizing the style sheet for their for their group or something, might be a good thing to just have, you know, be able to roll your own style sheet. So here Yeah, fantastic. One of the things that the 10 year old and me enjoyed that. The if you want the lines to end in a square instead of a rounded line, you give it a solid cap style of but

00:25:53 it makes it chop off the into that's funny.

00:25:58 That was funny.

00:26:00 All right. Yeah, this is not this is not one of my extras, but I might as well add as a follow on here is XKCD plots have landed? Yeah, and matplotlib, right, like this, I'm sure this is probably accomplish the same way. But look at that is this, aren't these fantastic? I use these at work, because they're just it, especially I especially like it if if I've just made up, like made up the data or my sample size is small. I don't want anybody to take it as like a research project. It's a It's just I'm showing something informally. So right, right. Sometimes there's a whole ton of value to present it not quite polished. Yeah, there's an app I use called. Let's see, what is it and I want to make a new bolt. Atomic. Doesn't let me type in you Oh, well, it called balsa balsamic. And it it will generate wireframes of like web browsers and buttons or to do mobile apps or whatever. And it intentionally has this shape. Like it looks very XKCD. Like Like, okay, don't this is not the answer. There's not the final thing. It's just to give you an idea of like, here's the layout and so on. Yeah, that's I think it's also Mike with a queue of people are like, yes, it's funky small. It's spelled funky. Yeah, I think what happened is that, that my keyboards battery died. So anyway, that's why I can't type anymore. I'm not on a laptop. So when the battery dies, that's it. That's fine, because I already got all the stuff I want to talk about. Anyway.

00:27:25 We talked about wouldn't try to learn Python to write mobile apps. And I still stand by that. But we discussed way back on episode, which one was it on 295. A couple of weeks ago, we talked about flat and flat lets you write flutter apps in Python. It is super neat. Yeah, were just looking at an example or whatever, full of the tutorial, but like the code that you write, I mean, if you ever done flutter, it feels very much like that what you write is Python, and it's glorious. Anyway, the extra that I want to talk about is I had Theodore Pfitzner, who is the creator of flat on talk Python last week, and people want to hear what he had to say about it in our conversation. They should check that out. Nice. Yeah. All right. That's it for my extras. I believe it's you. You ready for a joke? Am but I just, I want to like pause and just say what I think that's one of the cool things about how we've done

00:28:22 Python bytes and talk Python and testing code of if we do these small segments within Python bites, but if we if we wanted to just also do like a deep dive, we've got the other podcast to do a deep dive into something. It's good. So absolutely, super nice. And kind of on purpose, right? We kind of designed this one so we could just quick talk a bunch of fun stuff. And then the other one if you really want to spend an hour on something like that's what it's for. Yeah. So hopefully people listened to both are all three rather three. Exactly. Yeah. Yeah. All right. Now some funny now, no, you already talked about the cloud stuff. And you you specifically asked about price. So here's the joke. This one has two pictures. One somebody who is new to AWS and somebody who has experienced at AWS. The new person it shows this like cartoon character walking one step steps on a rake, the rake whacks up and smashes him in the face is new to AWS, accidental $50,252 monthly bill the experience one with the rake is like you know, some times skateboarders will jump up and they'll like grind down like a stair railing or do something amazing.

00:29:32 Showing Yeah, yeah, yes right off the stairs a kickflip off the stairs and like that often goes good but not always they're here they're doing like an amazing kickflip with the rake offer and they

00:29:43 end at the bottom smacks him in the face is accidental. $50,252

00:29:49 Yeah.

00:29:51 And then down here. There's a funny comment from somebody who how they forgot to turn off something so they just but luckily their card expired so they just let their

00:30:00 It's easy to account expire. And you know, Amazon was talking about doing like health care stuff and whatnot. So this this person here, just just until she says, just to wait soon enough, if you don't pay your EC to AWS bill, they won't even let you visit your doctor.

00:30:18 Sometimes things are funny. Yeah. Interesting idea, though, to attach your AWS account to a credit card with a low balance. So that's that's one. Interesting Yes, exactly. Might be a benefit. Yeah. It just might be a benefit, actually. Yeah, quite cool. Anyway, I thought this was kind of funny. You also have heard of real stories of startups shutting down because they accidentally did get like a $60,000 bill that like, we can't pay this will also just Yeah, or or somebody just misconfigured it? And suddenly, they're they're making like, the transfers or like, you know, three times larger they're supposed to be or something like that. Yeah, absolutely. So every time I run this command, it spins up a cool VM to do the test in the cloud. I forgot to shut it down with 100 VMs. Right.

00:31:07 Yeah, yeah. So concrete advice. You can set up billing alerts at different tiers, like once it crosses $100. Send me a message once it crosses $200 Send me a message. Those numbers will differ for people. But I would strongly recommend that you set that up at your cloud provider. Like if it goes beyond a reasonable amount of what I normally would like to pay or expect to pay. Let me know soon. Yeah, not like tomorrow. I let me know right away. Exactly. Fact, can you make my smoke alarm go off because I really need to get up and get go.

00:31:41 Yeah.

00:31:43 So yeah. Anyway, all right. Well, fantastic to be here with you, Brian. Good to be with you to talk to you next week. Yep, yep. See you later. Thanks, everyone, for listening. Oh, really quick, one piece of follow up out here from Kim in the audience. If a huge AWS Bill accidentally happens. I'd rather I can speak to AWS directly before giving in and despair. Yeah, indeed. Yeah. I've heard. I've heard of success stories where people just talk and they they work with him. On the other towers to try on the drawing topic will recommends that were to go. Excel a draw as a similar looks off to check that out, too. Yeah, I haven't heard of that one. That's cool. All right. All right. Talk to you later. You all bye

