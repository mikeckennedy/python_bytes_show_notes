00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 94, recorded September 5th, 2018. I'm Michael Kennedy.

00:00:09 And I'm Brian Okken.

00:00:10 Hey, Brian. How are you doing?

00:00:11 I'm doing really good. Yeah.

00:00:13 Excellent. Doing very well. The sun is shining. Summer has not left us yet.

00:00:17 It's not that great for productivity, but it's definitely good for keeping the spirits up.

00:00:21 You know what else is keeping my spirits up is my DigitalOcean servers, the ones running this site and many others.

00:00:28 They've been working perfectly. So they've been going really, really strong.

00:00:31 And we'll tell you more about them later.

00:00:33 But in the meantime, if you want to check them out, pythonbytes.fm/DigitalOcean, get $100 credit for new users.

00:00:38 Brian, when I was in the C++ world, the C Sharp world, design patterns were like this massive thing.

00:00:47 And you had to know all the design patterns.

00:00:49 And there was like dependency injection and IOC containers and all this stuff.

00:00:53 And I feel like Python doesn't have as much rigor around it because you don't have to jump through so many hoops to make certain things happen, I guess.

00:01:02 What do you think?

00:01:03 Yeah, I think so.

00:01:04 And it's actually something that's interesting because I came from the C++ world.

00:01:08 So patterns were a thing in C Sharp also?

00:01:10 Oh, yeah.

00:01:11 Okay.

00:01:11 Well, I don't even know who the gang of four are.

00:01:15 But there were four authors that wrote the design patterns book.

00:01:21 Let's see.

00:01:21 Eric Gamma, Richard Helm, Ralph Johnson, and I'm not going to try to pronounce that last one.

00:01:27 John something.

00:01:28 Anyway, gosh, in the 90s, if you were in C++ or C Sharp, apparently you read this book or others around design patterns.

00:01:37 And then when I got into Python, I was a little curious whether that was a thing in Python or not.

00:01:43 But I haven't really heard much other than I haven't really needed it.

00:01:48 A lot of this stuff isn't really needed.

00:01:49 What I think is interesting is there's those patterns that you see from the gang of four and the sort of derivative ones, derivative books and thinking.

00:01:58 And a lot of it, like you say, is not needed.

00:02:00 But there are other patterns that are really useful and come in.

00:02:03 Like, for example, meta classes, for example, or decorators.

00:02:06 Or there's other stuff, right?

00:02:08 Generator methods.

00:02:10 All sorts of stuff that is in here that don't appear in the gang of four because C++ or Smalltalk just didn't do that.

00:02:17 They were highly based on Smalltalk, actually.

00:02:19 Their patterns.

00:02:20 Right.

00:02:20 Well, one of the things that caught my attention today was a tweet by, gosh, who's this guy?

00:02:27 Brandon Rhodes.

00:02:28 Brandon Rhodes, yep.

00:02:29 And he's doing, he's got a site called pythonpatterns.guide.

00:02:34 And it has, he's sort of going through a lot of different, I think he's going through the gang of four book.

00:02:42 But he might be also doing other, pulling together other design pattern things that he's talked.

00:02:50 Yeah, he's pulling together information from talks and writing.

00:02:53 And I think he's creating more information, too.

00:02:55 But there are a whole bunch of these, trying to apply some of these patterns to Python.

00:03:00 And kind of sometimes different ways to do it.

00:03:03 So you can do things in different ways.

00:03:05 And so far, he's got abstract factory pattern, the builder pattern, factory method, composite, decorator.

00:03:13 Yeah, we definitely have decorators.

00:03:15 And then things like monkey patches and iterators, things like that.

00:03:20 And how that applies, I'm glad that somebody that knows what they're talking about is trying to figure out, how does this all apply in Python?

00:03:28 And I haven't really dug too much into this.

00:03:31 I just think it's a neat resource to try to read about some of these.

00:03:34 Yeah, I definitely think it's a really neat resource.

00:03:36 And Brandon has some interesting thinking on design patterns and architectures.

00:03:41 He gave a super counterintuitive talk called Clean Architecture.

00:03:47 I think it was at Pi Ohio a couple years ago.

00:03:49 And when I first started watching it, I was like, I just disagree with everything you're saying.

00:03:53 This just seems so wrong.

00:03:55 And then after 10 minutes, I'm like, but wait a minute.

00:03:58 I think it's right.

00:03:59 I think I've been thinking about this all wrong.

00:04:02 And it really caught my attention because I didn't agree with it so much.

00:04:07 But then I'm like, wow, this is really compelling what you're telling me.

00:04:11 So maybe I need to rethink what I'm thinking.

00:04:12 And whenever I have that feeling, I'm like, whoa, I need to pay attention because I might learn something really good here.

00:04:18 Yeah, so that's a good point.

00:04:20 I'm not necessarily saying, since I haven't really dug through this too much, I'm not sure.

00:04:25 I mean, I respect Brandon as a smart guy.

00:04:28 I expect that there's some really great stuff in here, but you may not agree with all of it.

00:04:34 So we'll try to dig up a link to that Clean Architecture too because that sounds interesting.

00:04:38 It's super interesting.

00:04:39 Yeah, yeah.

00:04:39 It's definitely a good one.

00:04:40 Cool.

00:04:41 Well, thanks for bringing this up.

00:04:42 I love these Python patterns.

00:04:44 And I love sort of the how would these traditional, more formalized patterns actually look in our language.

00:04:51 And there's a lot of interesting examples there.

00:04:53 Yeah.

00:04:53 What do we got next?

00:04:54 Well, we got this thing called Arctic.

00:04:56 Arctic.

00:04:57 Arctic is an API framework over top of MongoDB and Pandas.

00:05:04 And the idea is this is a thing that's been around since around 2012.

00:05:10 And its sole purpose is analyzing time series data super fast.

00:05:16 So one of their headline is basically Arctic millions of rows per second of time data in Python.

00:05:25 So that is really quite impressive.

00:05:27 I can tell you a lot of the ODMs and ORMs and stuff.

00:05:29 They don't do millions of records per second.

00:05:32 So the idea is that it basically bakes in pandas and numpies and all those kinds of things.

00:05:38 And it has an underlying data store that's backed by MongoDB.

00:05:41 And it actually uses the binary low-level communication.

00:05:46 So instead of trying to store all the data and then bringing it back and deserializing each row,

00:05:52 I think what it does is it actually just stores the binary data of pandas.

00:05:57 And it'll pickle numpy arrays and stuff like that.

00:06:00 And just exchanges the memory structure and just pulls it straight back and go,

00:06:04 yep, here it is.

00:06:05 Let's look at it.

00:06:06 And it's pretty cool.

00:06:07 Yeah.

00:06:08 Yeah, definitely.

00:06:09 I mean, there's a lot of applications that use just huge amounts of time series data.

00:06:13 Yeah.

00:06:14 So they say the two big areas they think it's useful is IoT, little tiny IoT devices that maybe Python is running on,

00:06:22 and financial analysis.

00:06:24 So it's sort of been extracted out of the work that this financial company called MAN, AHL,

00:06:32 I've never heard of them, but I think they're mostly an Asian company, but also in the U.S.,

00:06:36 around investment and so on.

00:06:38 So they've been working on this.

00:06:40 And they actually have some numbers on how this thing performs relative to other types of projects that they pursued or other things that were available.

00:06:50 So they talk about the different kinds of data that they store and analyze for stock trading and analysis.

00:06:54 And they say, look, we have this sort of data that's for one day, a whole bunch of it, maybe 10,000 rows.

00:07:01 And they can work with those 10,000 rows in four milliseconds.

00:07:05 And they say, compare that to what we were getting out of SQL Server, which was 2.2 seconds.

00:07:11 So, you know, 500 times slower, which is pretty incredible.

00:07:14 And they have this other tick data, like, you know, the stock ticker type of data.

00:07:19 They can say in one second they can process 3.5 megs worth of that data in Python or 15 megs in Java.

00:07:26 And there was some other project that they were trying to improve over called OtherTick, which took like 40 seconds versus one.

00:07:33 So really, really interesting, high-performance, database-backed time series.

00:07:40 Neat.

00:07:41 Yeah.

00:07:41 So if you're into Pandas, NumPy, and you've got to store and query a bunch of time series, whatever the reason, this is probably worth checking out.

00:07:49 And it's also tested with pytest, which is pretty cool, right?

00:07:52 Well, of course.

00:07:52 Any real project is tested with pytest.

00:07:55 That's right.

00:07:56 Of course.

00:07:57 So one of the things I really like about the Python community is the fact that there's so much sharing of information out of conferences and meetups and things like that.

00:08:08 So we have another thing you found here for PyCon, right?

00:08:13 Yeah.

00:08:13 So the PyCon â€“ I don't remember when it was, but PyCon Australia wasn't too long ago.

00:08:18 And they've already got all the videos up.

00:08:22 And we have a link to the PyCon Australia videos.

00:08:25 And I've got quite a few of them queued up that I'd like to listen to and watch.

00:08:31 I'm kind of bad about videos, actually.

00:08:33 I often just listen to them and then go back and look at the slide parts of information that I wanted to capture.

00:08:40 But I like listening to talks as well.

00:08:43 But there's one from Mark Smith, which he always amuses me because his Twitter handle is Judy2K.

00:08:48 And he won't tell me why.

00:08:50 But his talk is how to publish a package on PyPI.

00:08:55 And that's the one I've watched so far.

00:08:57 There's a lot of great talks there, though.

00:08:58 But I think this one's a great one that it â€“ the end punchline is use cookie cutter.

00:09:04 But he blasts through not using cookie cutter, all this sort of stuff you have to do to get up.

00:09:09 And, you know, it's â€“ every little piece makes sense and it's not difficult.

00:09:12 But there are a lot of different little pieces.

00:09:14 But he goes through this entire thing in like less than half an hour.

00:09:17 And so that's pretty impressive to watch him talk about all the different pieces and why they're there and what they're used for.

00:09:24 So that's a good one to sort of understand what's going on in the packaging world in a very short amount of time.

00:09:31 Oh, that's really cool.

00:09:32 Yeah, there's a bunch of cool ones here.

00:09:33 A couple in MicroPython, actually.

00:09:36 So one writing fast and efficient MicroPython code.

00:09:39 And the other is async.io in MicroPython.

00:09:42 Both of those are pretty cool.

00:09:43 Kind of tie into what we were just talking about previously.

00:09:46 Yeah, and then there's like â€“ gosh, there's solid APIs and there's â€“ it looks like a lot of good stuff.

00:09:53 And I know that Australia is â€“ since it's a big travel burden to other places, other PyCons, you'll see some speakers there that you're not going to see other places.

00:10:03 So that's cool.

00:10:04 Yeah, absolutely.

00:10:04 And they have 88 videos.

00:10:06 So that's pretty solid.

00:10:07 Yeah.

00:10:07 Quite cool.

00:10:08 That's a good one.

00:10:08 So before we move on, I'll tell you about another cool thing, DigitalOcean.

00:10:12 All right, so I'm a big fan.

00:10:14 And so one of the things that they've released â€“ we talked about this just a couple of times, not very much â€“ is this idea of projects.

00:10:22 So when you go into your name, your cloud provider, you might have a bunch of servers, a bunch of ESP storage type things, virtual storage blocks, load balancers, all sorts of stuff.

00:10:35 And it's really hard to know what goes with what.

00:10:38 Do you have a staging environment, a production environment, all that kind of stuff, right?

00:10:41 So how do you organize that?

00:10:43 So DigitalOcean has come up with this feature called projects that lets you group things like your droplets, that's virtual machines, and floating IPs, and back storage-like spaces into these different use cases.

00:10:55 So you know, yeah, actually, we're done with this project.

00:10:59 So we can turn that server off and destroy it and not like the fear of, I don't think we're using this one, but I'm not going to destroy it.

00:11:06 I'm not going to delete it because what if I'm wrong, right?

00:11:08 So a very cool feature you can take advantage of for all of their stuff.

00:11:12 Check them out at pythonbytes.fm/DigitalOcean, and they'll give you $100 credit for new users.

00:11:18 That's awesome.

00:11:19 Hey, let's talk about another cloud provider.

00:11:20 I'll write it on the back of that.

00:11:23 So one of the ways that you can run your code on the internet is like I just described with DigitalOcean, like I do for our stuff, is to create some virtual machines and various other pieces and sort of use it as so-called infrastructure as a service, right?

00:11:37 IaaS.

00:11:38 But you might also use platform as a service, like here's my code, run it.

00:11:41 So Google App Engine, Heroku, those types of things.

00:11:45 Okay.

00:11:45 So Google App Engine has a pretty interesting announcement, and it's interesting for both it's good now and like, oh my gosh, I can't believe it was like that.

00:11:54 So the announcement is that Google App Engine has released their second generation runtimes, which the Python one is now based on Python 3.7.

00:12:03 That's pretty awesome, right?

00:12:04 It is.

00:12:05 You want to run some code.

00:12:06 Boom.

00:12:06 Here's my Python 3.7.

00:12:08 So that's really good.

00:12:09 You might think, oh, Michael, what was the previous one?

00:12:11 3.6?

00:12:12 3.5?

00:12:13 No, I believe the previous one was 2.7.

00:12:15 Oh, no.

00:12:16 Until now.

00:12:17 Like if you were using Google App Engine, I believe you had to use a legacy Python, period.

00:12:22 Until that was like mid-2018 that I just said that.

00:12:26 That wasn't like a statement around 2012 or something.

00:12:28 That was just now.

00:12:30 But let bygones be bygones.

00:12:33 And now it's Python 3.7, which is pretty awesome.

00:12:36 So apparently it's a pretty big upgrade.

00:12:38 You get a bunch of new things.

00:12:39 Like, for example, it's based on their new sandbox container, sort of Docker-like things.

00:12:46 It removes a bunch of restrictions.

00:12:48 Like, in addition to only running on the old Python, legacy Python, you could only use a white-labeled set of packages.

00:12:56 And now in the new Google App Engine, you can use arbitrary packages.

00:13:00 Just put them in a requirements file, which is pretty sweet.

00:13:03 That's a big change.

00:13:04 It is a pretty big change.

00:13:05 Yeah.

00:13:06 So a lot of cool things like autoscaling and things that are a little bit easier as well.

00:13:09 So anyway, if you're interested in Google App Engine's platform as a service for Python, it just got many, many times better.

00:13:16 Yeah.

00:13:16 Neat.

00:13:17 Yeah.

00:13:17 Yeah.

00:13:18 So, Brian, I typically write my code in Python files, not really in notebooks per se.

00:13:24 How about you?

00:13:25 Yeah, mostly in files.

00:13:26 But I'm trying to learn Jupyter Notebooks some and utilize them.

00:13:31 They're kind of fun, especially in data science-y realms or looking at plotting data and stuff.

00:13:37 Notebooks are fun.

00:13:38 Yeah.

00:13:39 But there was a person named Joel Gruse that says he does not like notebooks.

00:13:46 And Joel is notable because he's not like a random dude on the internet.

00:13:49 But Joel Gruse has written a book called Data Science from Scratch.

00:13:54 He's done a lot of work in data science, things like that.

00:13:57 I've even had him on Talk Python many moons ago.

00:13:59 Yeah.

00:14:00 And this wasn't just like a one-off comment.

00:14:03 He gave this talk at JupyterCon.

00:14:07 And that's kind of hilarious.

00:14:09 But the video for that is not available yet as far as I couldn't find it.

00:14:14 So because that was just recently or still going on, I'm not sure.

00:14:17 But the slides are up.

00:14:19 He put the slides up.

00:14:20 And for one, it puts me to shame.

00:14:23 You know, this presentation has got so many animations and pictures and stuff.

00:14:28 Plus, it's like I haven't even got through it yet.

00:14:30 It's like 100 pages long or more.

00:14:32 But it's really good.

00:14:33 But it's a serious discussion about some of the issues with the problems with notebooks that people new to notebooks don't quite get.

00:14:44 And people old to notebooks just sort of know it and don't really think about it anymore.

00:14:48 And one of the big ones is that there's hidden state.

00:14:52 And so, essentially, we think of files as, like you said, we normally work in files.

00:14:59 So they get run from top to bottom, except for, you know, functions don't get run.

00:15:04 They get interpreted as functions.

00:15:05 And then when they are run, they run top to bottom, essentially.

00:15:08 And notebooks are not like that.

00:15:10 You can jump around and execute different bits of code in different orders if you feel like it.

00:15:15 And that stateness can lead to weird, confusing things.

00:15:21 So it's just like a gotcha to know about.

00:15:24 And then he goes on to talk about some of the issues where if you start learning how to code with notebooks, you may end up, you know, developing some bad habits like importing notebooks instead of just trying to.

00:15:36 I mean, like, that's a thing apparently you can do is you can define some functions in a notebook and then import them into another notebook.

00:15:43 Well, I mean, wouldn't it be better to just put them in a different library, in a package or a library?

00:15:49 Use the package, use the library.

00:15:50 Exactly.

00:15:51 Yeah.

00:15:51 So some of those, and, you know, I'm highlighting this not because I think notebooks are evil, but because I think it's important to start to listen to people saying, you know, listen to a voice that says they aren't a silver bullet.

00:16:05 They have their issues also.

00:16:07 And we just need to be careful and talk and make sure you don't fall into those traps.

00:16:11 Yeah, these are really interesting.

00:16:13 And these are certainly issues to look out for.

00:16:16 And while this is a funny presentation, I cannot wait to watch this video.

00:16:19 Joel, if you're listening, please let us know when it's out or if someone else sees it come out, shoot us a note, either email or Twitter, because this is fantastic.

00:16:26 Yeah.

00:16:26 Plus, also, like, I can't even imagine how long it took to put together this presentation because it's, yeah, there's a lot of animations in there and it's quite a riot.

00:16:36 It is quite a riot.

00:16:37 Yeah.

00:16:37 Anyway, there's that.

00:16:38 Just the other side of maybe notebooks aren't awesome.

00:16:42 Yeah.

00:16:42 It's pretty, pretty, pretty interesting.

00:16:44 So we've had a couple of conversations around the various peps and stuff that have been maybe causing some kerfuffle in the community.

00:16:56 Obviously, the biggest one was a PEP 572 about the in-place assignments.

00:17:03 And that was the thing with all the stress around it that Guido said, hey, after this, I'm, this is my last one.

00:17:08 I've given my all.

00:17:08 I'm out of here.

00:17:09 You guys, it's up to you.

00:17:11 We actually had Brett Cannon and Carol Willing on episode 87 to talk all about that.

00:17:16 Right.

00:17:16 And one of the things that we talked about was what comes next.

00:17:21 Right.

00:17:22 If, if it's not down to Guido to make the final decisions, which is how it has worked, how will the Python community decide, you know, what it's up to?

00:17:31 So, yeah.

00:17:33 So Barry Warsaw has published five peps at least around this.

00:17:38 And I don't think this is a decision.

00:17:40 It's sort of a structure to further the conversation and make a decision.

00:17:46 So he just published not too long ago, PEP 8000, which is Python language government proposal overview.

00:17:53 And I don't know if this is common in peps.

00:17:55 I haven't seen it that much, but it's like a gathering of other peps that are specific details.

00:18:01 So there's PEP 8,001, 8,002, 8,10, and 8,11.

00:18:05 The first two are about voting and ways in which this government might work.

00:18:10 And then the higher ones, the 8,10s are actual proposed models.

00:18:16 And there's a third one in 8,12 that I forgot to put in the notes.

00:18:19 And so there's for the government styles, government styles, we have the BDFL governance model is one of the proposed options,

00:18:28 which is to elect a new person who is the final decider.

00:18:33 Right.

00:18:34 Basically, GEDO step down, who is going to take that place to now participate in that way?

00:18:40 We also have the council governance model, which we talked about interesting things like should there be an even or odd number of people in the council?

00:18:46 And then the last one, I think, let me pull that up.

00:18:50 I think it is community.

00:18:52 Yeah, the community governance model.

00:18:54 And that one's a little more free form.

00:18:57 So these are all different ways of possibly arranging and solving that problem.

00:19:02 And there's a lot of examples like, let's see how Rust did it.

00:19:05 Let's see how OpenStack manages their organization and so on.

00:19:09 So there's a lot of concrete stuff there.

00:19:12 Anyway, that's pretty cool.

00:19:13 Yeah, that's interesting.

00:19:13 If you have a strong thought on this and you want to participate, get in there, make comments, let people know what you're thinking.

00:19:21 Because it's still open.

00:19:23 It's not anything decided.

00:19:24 Right?

00:19:25 It's still up in the air.

00:19:26 So if you want to have a say, now is the time to make statements.

00:19:29 Wow.

00:19:30 It's like government working in our own community.

00:19:34 What?

00:19:34 Incredible.

00:19:36 Incredible.

00:19:37 Yeah.

00:19:38 Yeah.

00:19:38 So this is pretty cool.

00:19:39 I don't know where it's going to go, but I like that it's all laid out like this.

00:19:43 My guess is it's going to go down the council model, maybe with, I don't know.

00:19:49 I think it's going to go down the council model, but we'll see.

00:19:51 Yeah.

00:19:51 I think that whatever they do, they need, they should, if there's a council, they should have to meet together to make decisions and pass around like a talking stick or something.

00:20:04 Yes.

00:20:05 I love it.

00:20:08 Oh, we could come up with something weird that they have to follow.

00:20:11 How about the Python staff of power that you were carrying around?

00:20:14 Yeah.

00:20:15 But then, you know, should it be the blue and yellow one or should it be the green and yellow one?

00:20:21 I don't know.

00:20:22 That is a big question.

00:20:23 Yeah.

00:20:23 Yeah.

00:20:24 Yeah.

00:20:24 I don't know.

00:20:24 So, sorry, green and gold.

00:20:28 So people in Australia say it's gold, not yellow, but it looks yellow to me.

00:20:32 Yeah.

00:20:32 I definitely, I thought that stick was a big hit.

00:20:34 I don't know if people don't know what you're talking about.

00:20:35 What should they Google to find the stick?

00:20:37 I think it's Pythonic staff of enlightenment.

00:20:40 I don't know.

00:20:40 Is that right?

00:20:41 That's got to do it.

00:20:42 How many hits on Google can there be for that?

00:20:45 I don't know.

00:20:46 Awesome.

00:20:46 So, yeah, they should have to pass that thing around.

00:20:48 All right.

00:20:49 Well, that's it for our items this week.

00:20:51 You got anything extra you want to share with folks?

00:20:53 I don't, actually.

00:20:54 Just trudging along.

00:20:56 We got a couple more testing codes out.

00:20:58 Yeah.

00:20:59 Very nice.

00:20:59 How about you?

00:21:00 I've got, of course, some TalkPilot stuff queued up to be released shortly.

00:21:03 I have been recording some courses, which are going to be awesome.

00:21:07 And I'm very excited about them, doing a bunch of stuff in parallel.

00:21:10 So I'll let you know when that's sort of further along.

00:21:13 But I do have two things I want to talk about this week really quickly.

00:21:17 One is we got a message on Twitter.

00:21:19 And I don't have the name of who sent us.

00:21:22 This was John, actually.

00:21:23 Thanks, John.

00:21:24 Who sent us this heads up that Brian Granger, one of the guys behind iPython and Jupyter and

00:21:31 all that stuff from the very early days, is giving a free webcast.

00:21:35 And it's an ACM-sponsored thing.

00:21:38 So it's Project Jupyter from computational notebooks to large-scale data science with sensitive data.

00:21:43 So if that sounds interesting to you, I put the link in there.

00:21:46 It's this Friday.

00:21:47 This episode probably will come out on Thursday.

00:21:50 So you've got to take action right away if you're listening.

00:21:52 There's probably a recording or something afterwards.

00:21:54 You can check that out.

00:21:55 The other thing is, you know, we talk sometimes about the popularity of Python.

00:21:59 Yeah.

00:21:59 So I don't want to beat this one to death too much.

00:22:02 It's not really worth its own item.

00:22:03 But Python continues to climb yet another ranking.

00:22:07 So the TOB index is one of the more well-respected, more long-running ways of ranking programming languages.

00:22:13 And I think when we started this podcast, Python was either fifth or sixth.

00:22:18 I think it was sixth on this list.

00:22:20 It is now third.

00:22:22 Probably because of the podcast.

00:22:24 Certainly partly because of it.

00:22:25 Yeah.

00:22:27 But that may be a very small part or more maybe it's meaningful.

00:22:30 But what's really interesting is it's now above C++, C Sharp, JavaScript.

00:22:36 It's way above JavaScript.

00:22:37 And JavaScript's going down.

00:22:39 It's above Ruby.

00:22:41 It's above many, many things.

00:22:42 What it's not above is it is not above Java or C.

00:22:47 And not only is it not above them, but it's like half.

00:22:50 So it's like 7.6% to C is 15.4%.

00:22:55 It's going to be a long time, if ever, until it gets to a 2 or a 1.

00:22:59 But it's definitely doing quite well.

00:23:02 Yeah.

00:23:03 So, yeah.

00:23:04 What is the TOB index?

00:23:06 Anyway.

00:23:06 I'll have to look into that.

00:23:07 Yeah.

00:23:08 If you look into it, they talk about their philosophy and where they measure stuff from and so on.

00:23:12 It's been a long time since I read it, so I don't remember the details.

00:23:15 But they do lay out where the ranking comes from.

00:23:17 Okay.

00:23:18 Cool.

00:23:18 Yeah.

00:23:18 All right.

00:23:18 Well, that's it for this week.

00:23:20 Thanks for chatting with me, Brian.

00:23:21 Thank you.

00:23:21 Bye.

00:23:21 You bet.

00:23:22 Bye.

00:23:22 Thank you for listening to Python Bytes.

00:23:25 Follow the show on Twitter via at Python Bytes.

00:23:27 That's Python Bytes as in B-Y-T-E-S.

00:23:30 And get the full show notes at pythonbytes.fm.

00:23:34 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:23:38 We're always on the lookout for sharing something cool.

00:23:41 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:23:44 Thank you for listening and sharing this podcast with your friends and colleagues.

