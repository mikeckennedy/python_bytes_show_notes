00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 140, recorded July 18th, 2019. I'm Michael Kennedy.

00:00:09 And I'm Brian Ecken.

00:00:10 And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/DigitalOcean.

00:00:15 More on that later. Brian, how you been?

00:00:17 I'm doing great.

00:00:18 Yeah, wonderful.

00:00:19 You?

00:00:19 Yeah, very good. I just got back from a camping trip in Astoria, right on the coast there.

00:00:24 And it's nice to get away from the computers for a couple days.

00:00:27 Yeah.

00:00:27 But it's good to be back.

00:00:29 So the Python news, it has been flowing even while I was gone. So that's pretty awesome.

00:00:33 Let's get started with your first item. What do you got here?

00:00:36 Well, people have been... I'm not going to get into the 10x controversy too much, but there's some 10x developer rubbish going around Twitter recently.

00:00:47 I think partly for clickbait, but I'm not going to hold it against her.

00:00:50 Kate Heddleson put together a article called Becoming a 10x Developer, 10 Ways to Be a Better Teammate.

00:00:59 And I read it, and that's actually a lot of great advice.

00:01:02 So a quote from her is, a 10x engineer isn't someone who is 10 times better than those around them, but someone who makes those around them 10 times better.

00:01:11 Which is humbling because I don't think I do that.

00:01:15 I try, but you know.

00:01:16 Do you feel like that's not properly rewarded?

00:01:19 Like in business and projects and stuff, like what gets measured gets optimized, right?

00:01:25 And if you're in an organization where they don't take that as a major factor into like how you're doing, like, well, what features did you ship?

00:01:32 Like what things did you work on?

00:01:34 And so on.

00:01:34 If your job is to kind of float around and make sure everyone is like not hung up on how to use this API or they don't know this backstory on how to use this thing or why it is the way it is.

00:01:44 Like if you spend too much time doing that, are you like hurting your career?

00:01:48 I think it probably definitely depends on the organization and probably even within a company, it changes based on like what division or what group you're in or something.

00:01:58 Yeah.

00:01:58 And I've certainly seen places where it's highly valued and it's like recognized and other places where it's like, well, but what have you been doing?

00:02:05 You know, it's not the best.

00:02:07 Well, I mean, there definitely has to be a balance.

00:02:09 You can't just be a cheerleader and a coach.

00:02:12 We actually do need to get stuff done also.

00:02:15 And actually, I'm amused that it's a weird controversy now that to say like that there's the 10x is 10 times better than average.

00:02:23 And I don't think it ever started out that way.

00:02:26 I think it started out just with acknowledgement that there's orders of magnitude between the productivity of the most productive people and the least productive people.

00:02:36 And I don't think that that's controversial.

00:02:39 No, it's definitely not.

00:02:40 Whether or not you believe in the 10x thing, these are great advice.

00:02:43 So I'm just going to run through them.

00:02:44 Number one, create an environment of psychological safety.

00:02:48 And there's a reference to a Google study basically saying people are better creative work if they feel safe in their environment.

00:02:57 So number two, encourage everyone to participate equally.

00:03:00 Three, assign credit accurately and generously.

00:03:03 Four, amplified unheard voices in meetings.

00:03:06 I love that.

00:03:07 Five, give constructive, actionable feedback and avoid personal criticisms.

00:03:11 Six, hold yourself and others accountable.

00:03:14 Seven, cultivate excellence in an area that is valuable to your team.

00:03:18 Eight, educate yourself about diversity, inclusivity and equality in the workplace.

00:03:23 Nine, maintain a growth mindset.

00:03:25 And last, advocate for company policies that increase workplace equality.

00:03:30 I don't think there's anything to argue about, but this is good stuff.

00:03:33 Yeah, these are all great things to keep in mind.

00:03:35 And Kate's definitely been a voice for these types of things for a long time.

00:03:40 So it's good to see her put it in the context of this 10x story.

00:03:44 And I encourage people to read the article because every one of these, if you're like, I don't know how to do that.

00:03:49 She gives actionable advice on what you can do to increase any of these.

00:03:53 So it's good.

00:03:54 Yeah.

00:03:54 Cool.

00:03:55 This next one that I want to talk about here is interesting.

00:03:59 It's a little bit more JavaScript-y than the stuff that we normally cover.

00:04:03 Normally, it's like pure Python.

00:04:04 But I feel like there's enough tie-ins together here.

00:04:07 So this one comes partially to us from Doug Farrell, who's done some cool articles over at RealPython.

00:04:13 He's been on the show before and things like that.

00:04:15 So the first thing that he sent over is this new framework called Quasar.

00:04:20 And Quasar builds on top of Vue.js, right?

00:04:25 Now, if you're going to build some kind of front-end JavaScript thing, you know, maybe it's going to talk to Python on the back-end, a bunch of APIs you're going to write.

00:04:34 But it's going to be mostly JavaScript and front-end stuff.

00:04:37 Well, Vue.js, in my opinion, is really one of the best choices, right?

00:04:41 It's simple.

00:04:41 It's easy to get started with.

00:04:42 It works really, really well.

00:04:44 It's not as complicated or convoluted as, like, AngularJS or something like this.

00:04:48 So Quasar, what it does is it builds on top of Vue.js, adding all sorts of cool components that you can use.

00:04:55 And it lets you create many different types of apps.

00:04:59 You can create a single-page application that is, like, an app that loads.

00:05:02 You never really navigate away.

00:05:03 It's constantly, like, updating itself through JavaScript.

00:05:06 A server-side rendered app, which is cool.

00:05:09 Progressive web app, which is cool.

00:05:10 But then you can also do mobile apps, Android and iOS.

00:05:14 That's cool.

00:05:15 And multi-platform desktop apps using Electron, like Visual Studio Code or Slack or whatever.

00:05:22 All of that with the same code base based on Vue.

00:05:25 That's cool.

00:05:26 That's pretty cool, right?

00:05:27 So if you could build that, that's great.

00:05:28 And, of course, Python on the back end is, like, obviously a super, super good choice.

00:05:33 I mean, that's how it is for my mobile apps, but Xamarin on the front end.

00:05:36 But, like I said, it's great.

00:05:38 There's tons of these things you can just drop in and get cool little widgets and progress bars and buttons and, you know, all the kind of things you need to build your UI.

00:05:46 But what if it could be all Python?

00:05:48 What if the stuff that you write on the front end or the server-side rendered bits, what if that could also be Python?

00:05:54 That would be nice, right?

00:05:55 Yeah.

00:05:56 What I mean is to not write JavaScript in the browser, but instead write Python.

00:06:02 And you might think, silly.

00:06:03 No way.

00:06:04 But there's this thing called Vue.py.

00:06:07 And Vue.py provides all the bindings for Vue.js, runs on Brython, which is a way to put Python in the browser.

00:06:16 And there's a bunch of cool example apps that are non-trivial that you can work with.

00:06:20 So you just write pure Python code.

00:06:23 If you want to create, like, a Vue.js component, you just derive from the component class in the Vue.py thing.

00:06:29 And it's just pure Python.

00:06:31 Wow.

00:06:31 That's pretty cool.

00:06:32 So there's some examples right at the bottom.

00:06:34 And you can pull those up and you can run it and so on.

00:06:38 So my favorite one is this thing called the SVG graph.

00:06:42 So they all have, like, a demo and they have the source.

00:06:44 And you can run it.

00:06:45 And the first time, it takes them, you know, maybe a couple seconds to download the Brython JavaScript and whatnot.

00:06:51 But it's like a super cool little interactive little thing all in Python.

00:06:56 You can check out the source.

00:06:57 Neat.

00:06:57 Yeah, definitely will.

00:06:58 That's cool.

00:06:59 Yeah.

00:06:59 So I was a little hesitant to cover Quasar because it's pure JavaScript.

00:07:04 But if I can take Vue.py and then write this, then now we're talking.

00:07:09 Now we're getting somewhere interesting.

00:07:11 Now build on top of that that the Electron apps don't care about how much download time it takes or whatever, right?

00:07:18 Because you ship it.

00:07:19 Like, one of the things included with a Vue.js, sorry, an Electron app is Chrome, right?

00:07:25 Which is like 60 megs or more.

00:07:28 So, you know, who cares if you throw in an extra 200K for, like, Brython JavaScript.

00:07:34 So it could be a really cool way to build some desktop apps with Python and Vue.js.

00:07:38 Yeah, I think that's a neat idea.

00:07:40 Cool.

00:07:40 Yeah.

00:07:40 Anyway, it's kind of a cool mix of front-end JavaScript and some Python, maybe even in the front-end.

00:07:47 Yeah.

00:07:47 Yeah, all right.

00:07:48 What's the next one?

00:07:48 Well, in episode 138, we talked about regular expressions a little bit.

00:07:53 And I made a joke on Twitter about regular expressions.

00:07:56 And then I got a whole bunch of people, like, giving me resources back.

00:08:00 And there's a couple of them that I'm actually really excited about.

00:08:03 So the first one I want to cover is a website called Regular Expressions 101.

00:08:10 It's at regex101.com.

00:08:12 And I kind of wish I had this a long time ago.

00:08:15 Because I know regular expressions are a little different in different languages.

00:08:19 And this one, you can select Python or PHP or JavaScript or Go as the one you're working with.

00:08:25 And then you can just start typing in a regular expression example.

00:08:29 Or you put in, like, an example string that you want to match.

00:08:32 Maybe even some stuff you don't want to match.

00:08:34 But then as you're typing the regular expression, it shows you and highlights the different areas where it's

00:08:39 matching, where it's not matching.

00:08:40 And then since we also have match groups and multiple matches, it shows you how that works, too.

00:08:47 And there's also, like, a little quick reference guide.

00:08:51 It's actually mostly what you need.

00:08:52 Like, for instance, I forgot the...

00:08:55 I always forget how to do, like, if I want to match a character, but I want to match, like, one to three characters of that type, not just more than one.

00:09:03 I mean, I remember that star is nothing or all and plus is one or more.

00:09:08 But what about if I want to match, like, three?

00:09:10 How do I do that?

00:09:11 Yeah.

00:09:12 I always forget that.

00:09:12 So, that's there.

00:09:13 And so, if you have to generate...

00:09:15 As you're generating them, I think this is a pretty cool tool.

00:09:18 I'm going to use this more.

00:09:19 Man, I got to say, this is really slick.

00:09:21 I love it.

00:09:22 You can select it, like you said.

00:09:23 You select the different language types.

00:09:25 And it will even give you, like, assistance on what it means, right?

00:09:29 So, I typed dot plus and it says, oh, the dot plus matches any character except for line terminators.

00:09:36 The plus matches one and unlimited times.

00:09:40 And then I wrote a little capture group and it says, oh, the capture group means this and whatnot.

00:09:44 And yeah.

00:09:45 Oh, so, like, if you're looking at somebody else's code, for instance, and there's a regular expression you don't understand,

00:09:51 you could pop it in here and it could, like, explain to you what it all means.

00:09:56 Yeah.

00:09:57 Yeah.

00:09:57 It's, I got to say.

00:09:59 Cool.

00:10:00 And then if you want to see it running in action and in your code, you can hit the generate function

00:10:05 and it generates a little script for you that you can just copy and paste into a file and run it to see what it looks like.

00:10:12 It's pretty nice.

00:10:13 Yeah.

00:10:13 This is a super slick little web app.

00:10:15 If I was better at regular expressions, I would be able to do really cool stuff, but I can just kind of.

00:10:20 Kind of write them.

00:10:22 So, it works still.

00:10:23 It's good.

00:10:23 And then somebody else mentioned RegX Golf.

00:10:26 And it's just, it doesn't teach you at all.

00:10:30 It just has two lists of strings and you're supposed to match the first list and not the second list with a regular expression

00:10:37 and try to do it with the least amount of characters.

00:10:41 So, possibly not.

00:10:42 Well, I mean, you can do it with as many characters of regular expression as you want, but some of them, people have matched it with one character.

00:10:49 And I'm like, how?

00:10:50 How did you match it with one character?

00:10:52 Yeah.

00:10:53 That's pretty awesome.

00:10:54 And got some spare time, I guess.

00:10:58 Well, you know, I'm a manager and all, so the spare time comes with the territory.

00:11:03 That's right.

00:11:03 Now, this regular expression 101 is a super cool web app, and I'm definitely going to save it.

00:11:08 Anytime I got to do regular expression stuff, I'm going to go back to it.

00:11:12 Speaking of regular, tell me about our sponsor today.

00:11:14 Yes, our regular sponsor, DigitalOcean.

00:11:17 They've been sponsoring the show for quite a while, and they're doing all sorts of cool stuff.

00:11:21 They got managed Postgres database services.

00:11:23 Obviously, their main thing is running virtual machines, and really quick and easy to do that.

00:11:28 I was just logged into a bunch of mine there today to upgrade some stuff.

00:11:32 And they also have now a Kubernetes cluster option.

00:11:37 So, they've managed Kubernetes services.

00:11:39 It's super easy to go over there.

00:11:40 In just a few minutes, you can have your Kubernetes cluster up and running, and they take care of all the stuff you need for that.

00:11:46 So, if you're thinking about doing anything with Docker and scaling it out, check out Kubernetes, of course,

00:11:51 and then the Kubernetes service over at DigitalOcean.

00:11:55 Very, very nice.

00:11:57 And, yeah, they're great supporters of the show.

00:11:59 A lot of our infrastructure runs on what they're doing.

00:12:01 So, appreciate that and can definitely recommend them.

00:12:03 Try them at pythonby.sad.fm slash DigitalOcean.

00:12:06 Get a $50 credit for new users.

00:12:09 Now, places like DigitalOcean and many of the other hosting spots that you might go and use, they're now offering SSD solid-state drives as basically a default option.

00:12:21 So, you get really fast disk access, right?

00:12:26 Yeah.

00:12:26 Yeah, well, if you have fast disk access and you can speak properly, you could actually use that as a cache, right?

00:12:35 So, caching has huge benefits for making our apps faster.

00:12:39 And a lot of the ways that people think about caching is they think about, I'm going to pre-compute some stuff and cram it into memory.

00:12:46 Oh, yeah.

00:12:47 And that's okay.

00:12:47 But, like, so, if you go over to, say, DigitalOcean and you fire up a server, the server comes with one gig of memory, but 25 or 50 gigs of SSD, right?

00:13:00 So, if you're trying to squeeze a lot of performance out of your app, you could go buy, like, a super high memory version, or you could set up a separate server that's doing Redis or something like that, which still is also going to kind of run into that issue.

00:13:12 Or you could just use that really fast disk.

00:13:14 So, this next, the fourth item I want to talk about is something called Python-DiskCache.

00:13:19 I'm not going to give it a huge grade for creative naming, but definitely descriptive.

00:13:24 Yeah.

00:13:26 So, the idea is that we can basically treat this Python-DiskCache kind of like Redis.

00:13:31 Like, you put an item, you get an item, but it stores it on disk.

00:13:35 And it's apparently super fast.

00:13:38 And it's also pure Python.

00:13:40 I don't get it.

00:13:40 If it came from disk and you're caching it on disk, for data that… It might not have come from disk.

00:13:46 What if you call, like, a search API or you… Oh, yeah.

00:13:49 You're using somebody else.

00:13:50 Right.

00:13:51 Somebody types in, I want to find X on the website.

00:13:54 And you have to go to, like, do a big complex database query or an elastic search query.

00:13:59 Okay.

00:13:59 Got it.

00:14:00 Okay.

00:14:00 Instead, you could say, this key of search for this goes to, bam, those results.

00:14:04 And now you just, like, deserialize them, like, pickle or JSON or whatever.

00:14:08 And it's just, like, super, super quick.

00:14:10 Oh, okay.

00:14:11 Yeah.

00:14:11 Nice.

00:14:12 Or even if you're doing, like, computational stuff.

00:14:15 Like, I know if I pass in 20 to this crazy computational method, I get this number back.

00:14:20 Right?

00:14:21 Well, you can cache that.

00:14:23 Right?

00:14:23 And you can cache it in memory.

00:14:25 Right?

00:14:25 That's okay.

00:14:26 Like, you can use the functools LRU cache, which is pretty cool.

00:14:30 But even if you have enough space, it doesn't keep working across, like, reruns of your app.

00:14:35 So, you run it once and it does some stuff.

00:14:37 But then as soon as it exits, it's gone from memory.

00:14:39 Right?

00:14:40 Then you run it again.

00:14:41 Well, now it's got to start over.

00:14:42 But if it's on disk, it's persistent.

00:14:44 Right?

00:14:44 So, that's cool, too.

00:14:45 Yeah.

00:14:46 Django itself has built-in caching, which is cool.

00:14:48 But apparently, at least according to the author of this, I don't do enough Django to know for sure.

00:14:53 But apparently, the file-based cache in Django is essentially broken.

00:14:58 If you listen to what he says.

00:15:01 So, let me pull up the little section where he says that a calling method is random and large caches.

00:15:06 Repeatedly scan cache dictionary, which is slow.

00:15:09 You know, it could take, like, 60 milliseconds to store a key with a couple thousand items in the cache.

00:15:14 Like, that's kind of ridiculous.

00:15:16 So, apparently, this thing, this disk cache, is much, much faster.

00:15:19 And it takes microseconds, not milliseconds, which is pretty awesome.

00:15:25 And it's a built-in pluggable replacement for the Django cache.

00:15:30 You could just say, Django, use this thing as the disk cache.

00:15:32 Oh, okay.

00:15:33 Nice.

00:15:33 Yeah.

00:15:33 It basically uses memory map files and other database technologies to store stuff on disk, which is pretty cool.

00:15:41 It's all C.

00:15:42 Sorry.

00:15:42 It's no C.

00:15:43 It's all Python, which is great.

00:15:45 You'd like this.

00:15:45 It has 100% test coverage with unit tests and hours of stress tests.

00:15:50 Yeah.

00:15:50 And pytest.

00:15:51 Yeah.

00:15:51 And finally, you might say, well, I've heard of other things like this, right?

00:15:55 Like, there's other types of caches like this.

00:15:59 So, there's stuff called DBM and Shelf and SQL dict and PickleDB.

00:16:04 And I think these are all new to me.

00:16:05 But there's a bunch of these other similar types of things.

00:16:08 But what's cool is they have, like, a really great breakdown of all the features you might care about.

00:16:14 Like, for DBM, is it Atomic?

00:16:17 For Shelf?

00:16:17 Is it ThreadSafe?

00:16:18 And so, it really shows you a lot of places why you might care about using this in addition to just, oh, here's yet another.

00:16:26 Right.

00:16:26 I like the comparison.

00:16:27 Looking at that table, it looks like disk cache is based on, or it stores the data in SQLite.

00:16:33 And we know SQLite's really fast, so.

00:16:35 Yeah.

00:16:35 You already get indexes for efficient lookups and inserts and stuff like that.

00:16:39 Yeah.

00:16:39 So, cool.

00:16:40 Very, very cool.

00:16:41 So, if you have to cache stuff or you have things that are slow in caching MyFixit, this is actually a really interesting way to think about it.

00:16:49 Because the alternative of setting up other servers like Redis and then having to manage the connections and all that, like, that's great if that's something that works where you need it.

00:16:56 But, like, this seems really simple.

00:16:58 Yeah, and I was thinking along the lines of companies that store or are keeping track, like, for dashboards and stuff, they're pulling data from various places.

00:17:08 But it's – and people can look back in old stuff, but it's mostly the recent things that people are looking at all the time.

00:17:15 And so, something that caches the more recent stuff makes a lot of sense.

00:17:20 Yeah.

00:17:21 And it's quite cool.

00:17:22 Yep.

00:17:23 What's the next one?

00:17:24 Oh, yeah.

00:17:24 It's my turn.

00:17:27 Speaking of – I was just looking at the disk cache stuff and they were talking about how to learn more you can use the help system.

00:17:33 Yeah, it's like the tutorial is type help this, type help that.

00:17:36 Yeah.

00:17:36 And so, that's what I want to talk about.

00:17:38 I want to talk about the Python help system.

00:17:40 And I guess I knew it was around, but I kind of forgot.

00:17:44 So, there was an article on Stack Abuse about the Python help system.

00:17:49 And in a Python REPL, you can, like, for instance, type help print.

00:17:54 And then you do, you know, help as a function.

00:17:57 And you pass it.

00:17:57 If you pass an object or a built-in something, like print and dict or built-ins, you get, like, a lot of information.

00:18:05 Like, if you type help dict, you get basically a tutorial on what all the stuff you get on dictionaries.

00:18:12 It's pretty nice.

00:18:13 And I tried, like, in things that are keywords that are not objects, you can type help on those, too, but you put them in, like, quotes first.

00:18:21 So, like, you can type help, quote, assert, and get all the information on how assert works in Python.

00:18:27 And you can import stuff so it's not just the built-ins.

00:18:31 You can, like, for instance, one of the examples was import math and then help on math.log.

00:18:36 And, yeah, you can learn about log.

00:18:39 Like, I just did that to try it.

00:18:40 And I'm like, oh, cool.

00:18:41 I always forget that log can take a different base.

00:18:44 So, you can do, I don't know, base 7 if you were just crazy and wanted to.

00:18:48 And then for non-built-in stuff and other libraries, even your own stuff, help will pull out the doc string.

00:18:55 And, I mean, there's actually, I forget about this.

00:18:58 There's a lot of stuff that you just type help on that instead of Googling or hitting Stack Overflow, you just look it up.

00:19:04 Yeah, and it's right there.

00:19:05 And it even works with it.

00:19:06 It's offline.

00:19:07 It's great.

00:19:07 You're right that help dict has a ridiculous amount of stuff in there.

00:19:11 That's pretty crazy.

00:19:12 I've never typed that.

00:19:13 Shows you all the magic methods that are overridden and all the stuff that happens.

00:19:18 Yeah, it's quite cool, actually.

00:19:20 Yeah, and the things that you can convert to dictionaries and, yeah.

00:19:23 Yeah, it's a nice one.

00:19:24 Keeping with the same line of thinking of, like, I have some code and I want to understand, like, how it works and how it fits together, right?

00:19:30 This is, like, the documentation and some of the methods and examples and stuff.

00:19:33 But David said and sent over a cool couple of projects that he works on that is, like, a higher level architectural overview of Python libraries.

00:19:44 So, I think these are created by him.

00:19:46 And one is called impulse and one is called import linter.

00:19:49 And the idea is that you get a quick picture of all the dependencies within a Python package.

00:19:56 Oh, nice.

00:19:57 Yeah, so I could type impulse space draw graph space and then some Python package that's installed in the same environment as the impulse thing is.

00:20:07 So, it can find it.

00:20:07 And then it'll go and, like, look all through it and say, well, here's all the modules, submodules, classes, and so on that are referencing each other.

00:20:14 And it draws, like, a cool architectural graph of, like, this depends on that, which depends on that, and so on.

00:20:19 Oh, wow.

00:20:20 Yeah.

00:20:21 So, it's a good idea to just run that against code that you're not super familiar with.

00:20:24 So, like, before you go digging through the source code, like, let me just get a picture of what's in here and what's talking to what, you know?

00:20:30 Yeah, and also, if people keep asking about a particular part of your code base, do this and see how many loops and knots are in it.

00:20:38 And maybe that's why.

00:20:40 Yeah, exactly.

00:20:42 Like, oh, it's a little more complicated than it probably should be, or why does everything depend on this?

00:20:45 Yeah, it's cool.

00:20:46 If you want to run it, you might get an error that it can't draw the graph.

00:20:50 You have to have GraphViz separately installed because it draws the graph and then it hands it, like, the data off to there to do the drawing.

00:20:57 And if you're on a Mac, you can just brew install GraphViz, you know, just basically have that installed, and then you can more or less just run impulse draw graph on things.

00:21:05 It's great.

00:21:05 Nice.

00:21:06 Yeah, the other one, ImportLenter, allows you to check contracts about the dependency graph.

00:21:11 So you can say, like, we want to prevent circular dependencies or other types of constraints.

00:21:16 Like, this should never depend upon that.

00:21:18 So you can run it, and it's like part of a continuous integration, and it'll tell you if, like, some rule you said this shouldn't happen, you know, it changes in terms of dependencies.

00:21:26 Oh, interesting.

00:21:28 Yep.

00:21:29 Yeah, this is cool.

00:21:29 Yeah, I think I would definitely use impulse, the graph one, more than the linter, but I can see, like, depending on what you're doing, like, one might be more valuable than the other.

00:21:37 Yeah, I mean, if you were teaching a class and you said, I want you to implement something, but don't use package X.

00:21:44 That's right.

00:21:45 You could just have this as a test.

00:21:46 Submit your answer here, and we'll lint it.

00:21:48 Yeah, it's cool.

00:21:49 Yeah.

00:21:49 So if you care about these architectural graphs and whatnot, yeah, these are nice tools.

00:21:54 You can turn on your Python code.

00:21:55 Yeah, nice.

00:21:56 Well, so that's all of our six.

00:21:57 Do you got anything extra for us?

00:22:00 I ran across something that I'm sure some folks know about, definitely the core developers know about, but I just, you know, it just made me laugh.

00:22:07 I was just like, all right, this is funny.

00:22:09 So I was working on some package, and I needed to understand it better, so I used PyCharm, go to definition, and took me inside the source code of some part of the standard library, and I saw it was importing TabNanny.

00:22:23 I'm like, what the heck?

00:22:25 TabNanny.

00:22:26 So TabNanny, as in like the babysitter of tabs or something, I don't know, is apparently a standard module, and it checks for inconsistent mixtures of tabs and spaces.

00:22:39 And I knew Python checked it.

00:22:40 I just didn't know that the thing that did that checking was called TabNanny.

00:22:44 So I thought that was funny.

00:22:45 I thought I'd share that with you all.

00:22:46 That's awesome.

00:22:47 And there's a thing called BadTabs.

00:22:51 Yeah, it's pretty funny.

00:22:55 Yeah, nice.

00:22:56 Yeah, so I guess one other thing, quick shout out, just to let people know that the Flask Data Driven Web App course is out, and people can give that a check out.

00:23:03 It seems like everyone's enjoying that.

00:23:05 So if you want to work with Flask, that's also a good one.

00:23:08 Okay.

00:23:08 Anything for you, Brian?

00:23:09 Nope.

00:23:09 Just working away.

00:23:10 The new office is working pretty good, but I've decided, like, last week I was sitting on the ground.

00:23:16 I've got a chair this week, so this is good.

00:23:18 You're upgrading your podcasting studio from the office, I see.

00:23:22 I'm elevating my environment.

00:23:24 Yeah.

00:23:24 Nice.

00:23:25 All right.

00:23:26 We have two jokes for you all this time.

00:23:27 You want me to kick this one off?

00:23:28 Yeah.

00:23:29 All right.

00:23:29 This is a joke that never gets boring.

00:23:32 Okay.

00:23:32 You can tell it as many times as you want.

00:23:34 It's never the same.

00:23:35 All right.

00:23:35 So two threads walk into a bar.

00:23:37 The bartender looks up and yells, hey, I don't any conditions race-like time last want.

00:23:44 Yeah.

00:23:47 Yeah.

00:23:47 The next time you tell it, you could be like, hey, two threads walk into a bar.

00:23:50 A barkeeper looks up and yells, don't any conditions I, hey, want race-like time last.

00:23:56 Right?

00:23:56 Just it's good every time.

00:23:57 Yeah.

00:23:58 It's good every time.

00:23:59 All right.

00:23:59 How about you?

00:24:00 A string value walks into a bar and then was sent to standard out.

00:24:03 I love it.

00:24:05 Pipe joke.

00:24:06 That's great.

00:24:07 Always good to finish on a laugh.

00:24:08 Brian, thanks for being here and doing all this research for everyone.

00:24:13 Yeah.

00:24:13 Thank you.

00:24:13 Yep.

00:24:14 You bet.

00:24:14 See ya.

00:24:15 Thank you for listening to Python Bytes.

00:24:17 Follow the show on Twitter via at Python Bytes.

00:24:19 That's Python Bytes as in B-Y-T-E-S.

00:24:22 And get the full show notes at pythonbytes.fm.

00:24:25 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:24:30 We're always on the lookout for sharing something cool.

00:24:32 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:24:35 Thank you for listening and sharing this podcast with your friends and colleagues.

