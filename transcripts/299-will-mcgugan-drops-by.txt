00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 299. Recorded August 31. And I'm Brian Aachen.

00:00:10 Hey, I'm Michael Kennedy.

00:00:12 And I'm when we begin

00:00:13 a will is also known as usually the topic of Python bytes.

00:00:19 Time to time you mentioned me.

00:00:21 So it's awesome to have you here. But you're, you're part of texture lies, right? Or you are texture lies.

00:00:28 Um, that's right. I guess I'm part of texture wise. And we are a company, a very small company, but we're a tech startup. And we have the employees. And we'll have five and a few months. Nice.

00:00:40 Yeah. Tell us a bit about it. You know, people know, that's amazing. Tell people about it. They know about rich, and textural perhaps because we talk about all the things that are adopting rich, but you actually have a company around that, which is super fantastic array. So the

00:00:55 model is we're building textual, which is going to be like a free and open source project distributed through pi pi. And then somewhere down the line, we're going to make this web service which takes those applications and then serve them on the web. And it'd be like a nice free tier build to add services on top of that, which we can charge a subscription

00:01:17 for. That's fantastic. Like, like two weeks as a service

00:01:20 to us as a service. Yes.

00:01:23 A task, a task platform. All right. Cool. Well, it's great to see all the progress there. It is, right. Am I up on the first one? You are? So this one comes to us from John Hagan. Thank you, John, listen into sin, IPI as the warning is gone, but they were under a pretty heavy phishing attack. And they wanted everyone to know they they had this big banner that was letting anyone who maintains a package is really where the problem lies. If you maintain the package, like say, rich, the goal of this phishing attempt was to get your credentials so that you could then so that they could sign in and put malware into that package, the more popular the better, I presume. So. This was a couple days ago, August 24. So like a week or so, today, we received reports of this is from pi Python package index. Today, we received reports of a phishing campaign targeting peipsi users. This is the first known phishing attack against peipsi. We're publishing the details here to raise awareness, what is likely going to be an ongoing threat, there was many comments and quote, tweets and so on, it said the background the phishing message claims to be there's a mandatory validation process being implemented. And they invite users to follow a link to validate their package like So otherwise, their package will be removed. Importantly, they say, note, we will never remove a valid project from the index, IPI only removes projects which violate their terms of service, or in some way determined to be harmful. For example, malware, this takes you over to this site, if you were to click the link to if you look carefully here, sites.google.com/views/pi pi validate slash validate my VI package, or some kind of redirect. And it does bad things, when you fill this out, it just posts the forum to somewhere else. So I guess they were hosting it on google.com. In sites like google.com, in an attempt to avoid like the domain getting blocked, or something like that, right. But it posts over to like linked up port stuck, calm or some, I don't know how you pronounce that domain. But don't go there. It's not good. And it says the malicious releases follow a pattern X hotel, and I kind of laughed even though it's not really funny. One of the packages that got fished through this email is called spam. Or not spam does. But if you are like fished, because your package, if you are fished by spam, and your package is called spam, there's just it's just too much meta. Will did you hear about this? Did you get any notifications for your packages?

00:04:07 Um, I didn't. But I could see how if I got that early in the morning, I could fall

00:04:12 for it. Yeah, exactly. You're just waking up? Oh, my God, not another thing I got to do. I feel like they're taking a little bit advantage of the notifications coming from the Python packaging authority, where they've been sending out messages about security and about packages, and there's the critical packages will I saw you tweet and Brian was like, Wait, what is this about what is a critical package the day that stuff came out? And so you know, it kind of, I think is trying to hide under that that noise and slip through the cracks that are a bit I

00:04:44 think don't get very many notifications from pie pie. I think the fact that I don't get very many, I might just take them at their word. If you get a lot of notifications. You might learn to recognize what is a legit notification and what is somewhere I Novem phishing attempts.

00:05:01 So you're asking peipsi to send us more email.

00:05:08 Funny, so you can actually look at what the code does. That is the malicious versions, they said they've taken down and they've taken down several 100 typosquatting. Ones that also do a pattern. The code is a setup, it's just hijacking the most used function or feature, try, get the computer name, and then request the, to install the thing. If the over off of this malicious place, if the platform is when 32, we're going to get this script, download this malicious exe, download it with requests, and then write it to a file and then just execute some executable. And that's pretty much what it was doing to attempting to do all to all these packages.

00:05:55 It's kind of lazy. This malware is not cross platform when he works on Windows.

00:06:03 I agree. Well, I mean, they also they, they're looking for investors so that they can like expand to other platforms. Maybe they'll get a Mac OS and Linux when coming

00:06:13 out. VCs listening. Yeah, exactly.

00:06:16 Like, here's an opportunity to I don't know what it does when it runs, but it can't be good. Whatever it does, can't be good. Now I remember I got an email from someone, and I'm sorry, I didn't pull the details together as part of the right appear, saying he was on Twitter, a DM that said, you probably going to talk about this. The two FA wouldn't necessarily help you. Because if they asked for the two FA, you're going to enter it in maybe there and it might, you know, pass it pass it through as part of the process as well, right? It could, it could maybe get a software based to a Fe and use it. But you know, what does help with this really, really well password managers, one, password, LastPass, and so on. If you go there and it says enter your password, and you hit the hotkey to like fill out the site or you click in there like with one password, if you just access it with the latest version, it will automatically drop down or suggest the drop down for the site. If you do that, it will not come up with anything because you don't have an account at Site site google.com presumably for this this login, right? Yeah. And so some combination thereof, I think, you know, at least I always if I go to a site the the less sure I am I like double check. Does the password manager think it should fill this account into this website? If it says no, then I triple check it. It's not just like all the password manager is not working. Let me just copy it over, you know. Anyway, there's, there's some more details in here. You can read about what they're doing and what you should do some ideas on how to verify the signed certificate, I would prefer to just use a one just a password manager right away instead of trying to follow the chain of the cert. But you can do that as well. Anyway, it says it's got a lot more details there. If you want to check that out. What do y'all think?

00:08:08 Yes, interesting in some sort of ongoing threat. I think if you're an internet user, you're getting bombarded with this. With pie pie. If they get a hold of you, it seemed like it was more like attacking individuals. What were they trying to get your credentials to like install malware in in your boy, I'm

00:08:29 pretty sure what they were doing is they were publishing a new version of your package. Okay. And the new version had malware in it. Yeah. So yeah, it would be a huge Yeah, it says, yeah, we've additionally determined that some maintainers of legitimate projects have been compromised and malware published as their latest release for those projects. Their accounts have temporarily been frozen and the bad versions removed, but that's what they're trying to do.

00:08:56 Okay, well, good on them for catching it.

00:08:59 Yeah, for sure. I love how Seth out the audience says another when Wi Fi in for Linux on the desktop. Yeah. How about that?

00:09:06 Yeah, we're or Mac? I'm like, Well, I would that would hit me at all. But

00:09:10 yeah. However, anybody any package that you publish, or got, but it would, it would affect your Windows users. If you were the maintainer,

00:09:19 which is had half the users as we know about, you know, half down at least half the operating systems or Windows.

00:09:26 Yeah, yeah, not so good. So Seth also points out that the timing of this phishing combined with Dustin mentioned there hadn't been any phishing attacks or something like that is what's in Dustin Ingram. It's to give people ideas. By the way, you want to hear more about this. I did interview Dustin on with us like three weeks ago or so on talk Python, talking about Python packages and security and supply chain stuff. But all that predated the fishing side but not the malware side. So people can check that off that one. Okay. All right. Anyway, make make sure that you don't put your password for pipe. Yeah, in the wrong place.

00:10:06 Yeah. All right. Um, how about we talk about something nice?

00:10:11 or Yes, friendly, we can have nice things, not if

00:10:15 we can have nice things like Python being on top of the IEEE Spectrum languages. So it has. So it has been for a while. So this is, we're just reviewing this to say yes, partly, but there's some interesting information here. So if we go through the review stuff, there's, there's a cool chart to the top programming languages of 2022 pythons up at the top. If both the spectrum survey actually I don't know where the spectrum number comes from, I assume it's a survey thing. And then trending. It's on top, also little different and cool animation graphics on there. But one of the interesting bits is in jobs, if you look at job listings, I think they're looking at job listings. And requirements, SQL is at the top. And this is there's there's a comment because it's, it's not it's not just SQL, they're not going to just say we need somebody that knows SQL. But it's like Python and SQL or Java and SQL or JavaScript and SQL, the N SQL part is coming in a lot now. And actually more than it used to, which is interesting. There's also a related article in the same on IEEE as well called The Rise of the rise of SQL. And it's really talking about that of that it's not it's not just because means I do remember, sequels always been a part of programming, or it has been this for my career. But it's often been a larger thing. It's not something you do in a small application, it's something in the in the server are large applications, but it's growing, it's growing in using it for even little small things. And, and a lot of applications, you don't have a specialist doing the database stuff. You've got the developers doing the database, and everything. So anyway, I thought that was interesting that just the that the highlighting that sequel is, is and always will be important. And it's even growing in popularity.

00:12:14 It's interesting that arms haven't made a dent in that, you know, I used to use Django horns back in the day and didn't have to touch the sequel. But But clearly, people are not using arms that much of sequels like top of the charts there.

00:12:30 My first thought when I looked at this was there's probably a lot of data warehouse data lake semi structured data that people are exploring with sequels and queries before they walk it down, and, you know, productionize it with with an ORM, or something along those lines, right? Like, the data science side, if a lot of that data is dropped into a database by an API, or some web scraping or something, and then you have to ask it questions. And like knowing the sequel is the asking arbitrary questions of the data before you really know what questions ask because it's my first thought, but yeah, oh, RMS all the way for the win for me, I, I don't want to do it straight SQL,

00:13:10 growth growing thing of just doing it small, like a sequel light, and just the knowledge that SQLite is everywhere? And I don't know if if SQLite has any effect on this or, or if Simon Wilson does. Because he he's with dataset, taking like CSVs and stuff and turning them into a little SQLite websites. But things like that have just even services and smaller applications collecting data.

00:13:39 Isn't there a JavaScript API to SQLite?

00:13:44 I think there's there's all languages have, I think API's into SQLite?

00:13:49 I think something built into the browser is local storage. Does that not use SQLite? Or am I mistaken?

00:13:55 Don't think that that does but it's very similar. If it's not the same, it's like, yeah, the what did they call it local SQL or local, local DB? Something like that? I wonder if Yeah. Dave out in the audience's I wonder how the jobs one was measured, though SQL can be one of those not really considered must have items that often goes into the list of requirements. You really could just use an RM.

00:14:21 Yeah, that and that might be the case. But even with RMS, sometimes you gotta get in there and find out what's wrong. Like to opt in.

00:14:32 Yeah. came out, the audience says is it becoming less common for developers to know at least enough sequel to be dangerous? I think that that's the where the minimum bar for what you should know to use an ORM you should know kind of what's happening. You should know what a join is and that you might want to do it so it doesn't do 50 queries. You do only one and things like that. Yeah. But yeah, very, very cool. Brian.

00:14:54 Well, what where are we at next?

00:14:56 Well, I think we'll is up we got for our first one well

00:15:00 Oh, I'm on the wrong page. So I came across this article is by Charlie Marsh, about using my PI in production at Spring. And I looked at Spring, and it's a kind of interface for researching medicine. But he was saying that they have a, they have a big project 300,000 lines of Python. And they started typing it in a few years ago. And they've since taped the entire code base, and they were very impressed. It's reduced bugs, and make things more maintainable, and even then, have all the strictness settings on on to max. And I'm a big fan of typing, but I don't have quite have everything. On Max, I relaxed, it just just a tiny bit. But they've, they've got all the settings on there. So he covers the basics of typing, there's some interesting stuff about the history of typing, right. It's interesting how typing started, it didn't, you know, spring out of nowhere with the same goals, it did actually evolve various other projects. Originally, when my pie started, I think they were building something that was essentially my my pi c, it was to run Python with with typing, to use

00:16:21 the typing that actually sort of transpile to another language almost right.

00:16:25 Yeah, yeah. And that turned into a type checker, which didn't actually run your code, it just analyzed your code. And there's quite an interesting article covered, how it started, and go through a bunch of experiences with with typing and my pain generally, in general, they cover improved readability. That's a big one. For me, I love typing. And I find, I find that makes code more readable. Some people would disagree, because you add lots of these annotations, and some people find that clutters your code, I find it was super helpful to understand other people's code and to understand my code, because I don't have to remember the types of everything when I can just start them written down.

00:17:12 I'm totally with you on that. I think there's, I think, a fear that oh, look, Python is becoming like C++ or something. But you know, it's, it's nice and clean. And it's simple, until you're focused on some area, some function or a class or something, you're like, Well, what happens here, you can either go read the documentation, put it together, or you can go find all the places it's used and try to put it together. Or if it has types, you, you don't have to go do that exploration, right. You just say, Okay, this is an integer. And this is a list of users. I know what's happening now. Like, I don't need to hold more information in my brain. And I think that makes it great.

00:17:48 The shape of data is what really helps me like, like you mentioned, like a number or list or something. But sometimes things can either conceptually, an argument to a function could be one thing, or it could be a set of things. Is it expecting if it's just one thing it can I you know, can I do that? Or is it expect and types can give you that? And one of the things you mentioned, which perfectly sum up sums up my my philosophy for typing is, I don't want to do it. But I want everybody else to put types in there. Because it's Yeah, readability counts.

00:18:25 Yeah. So Mr. Wilson, in the audience points out typing, typing greatly assists with code completion for the editors.

00:18:33 Yeah, it's got a bunch of tangential benefits. It's not just a one benefit. I mean, it catches bugs. But even if it didn't, even if it didn't, I think typing would be an excellent addition to Python.

00:18:45 If I can hit dot, and it gives me more help, I'm already happy. Yeah,

00:18:49 bingo. Yeah, it's a lot of typing. This is a very nice article, I'll let people read it.

00:18:56 Yeah, they also talked about the pain points of like, how that was painful for them. I think, using trying to get my PI to completely analyze, everything is a different level of I want my public interface to to see what it returns, you know, there's like, You got to decide where do you live on the spectrum? And what are some of the goals like catching bugs, it's more important to have everything covered the documentation, you know, a little bit less, I think,

00:19:21 yeah, I found it's changed my programming style. The code I write is, is less dynamic, I'm more likely to fix types quite early on, and they don't do any well. I don't do too much get turned set after. And I don't use all the dynamic capabilities of Python. I prefer to write static code that looks a bit more like C. So I understand why people have that they feel like that is taken away about a freedom from them. But I do think it's given you the freedom to write solid code that doesn't have no no attributes on non type errors. Yeah,

00:19:59 I agree. I think you compare it to things like TypeScript. TypeScript has a similar idea. But TypeScript is very particular. And if you don't get it just right, it'll give you a compiler errors, and it won't be won't do the steps it needs to do to make the JavaScript whereas Python, maybe your editor will give you a warning or some tool like my PI, I'll give you a warning, but it doesn't really get in the way of it still functioning, you know, which, unless you're doing something where it depends upon it, like Pydantic, or fast API where it's actually using that, but most of the time, it's, it's there when you want it. And you can kind of ignore it if you don't. Yeah, yeah. So Rich has a lot of

00:20:37 Yeah. Fully typed. Yeah. So, so textual, it's not passing my PI. Currently, there are some light little dynamic corners and little typing errors, which we're gradually proving but all new code is tight. And, and changes are tight. So yeah, we're really big on on typing attacks online.

00:21:00 Brian, how about with your PI test extensions, plugins.

00:21:07 You know, it doesn't really come up much, but I don't really think about it a lot, actually. So I would like but I have other applications that I'm working on that I definitely involve typing. And I started out with just the like you were saying, trying to help with documentation. So making sure the API is typed, I think that's essential. I think it's just a good idea, especially now with the improvements of some of the typing. So you can do, you don't have to say union anymore. I like the bar for or it's it's a nun, you know, it's this, it's an int or a nun or something like that. That's way cleaner than it used to be. And you don't have to import typing as much as you used to. I don't want to import typing just so that I can type some type in something it seems wrong. But and I'm on the phase of trying to integrate it more in the rest of my code, just because I'm a you know, even in solo project, sometimes you're also a user, because you come back to something six months from now and try to figure out what you're doing. And it's nice to be able to not have to look at the code. So I like it.

00:22:12 Yeah, absolutely. Absolutely. Well, good find Well,

00:22:16 yeah. So I want to say something nice about AI in real life. And actually the podcast IRL from Mozilla. So this episode of Python bytes is brought to you by the IRL podcast, an original podcast from Mozilla, and I'm really enjoying it, I'm listening to a whole bunch of it. If you care about ideas behind technology, not just the tech itself, you'll enjoy IRL Tech has an enormous influence on our society, many effects are beneficial. The influences the like, for instance, the information and assistance we get through cell phones is amazing. I love being able to look up the closest coffee shop wherever I'm dropped on Earth, or knowing where my kids are. But some are not so great because like I don't want somebody else to know how often I hit the coffee shop and I definitely don't want somebody else tracking my kids. So Mozilla is always been on the lookout for possible downsides to technology and works to mitigate negative influences of tech on the negative influences on all of us. If ideas like that and and concerns about technology resonate with you, you should definitely check out the IRL podcast. This season is hosted by Bridget Todd and is looking at AI in real life, who can AI help and also who can harm the show features fascinating conversations with people who are working to build a more trustworthy AI, and also using AI to help us. So I really enjoyed a few episodes. So far, there's an episode on how our world is mapped with AI. So data and maps is being used to make decisions that affect real people even like for by districts and by governments. But how can people reclaim the power over their own maps and stories using AI? This is fascinating episode. Another episode is about gig workers who depend on the apps for their livelihood. It looks at how they're pushing back against algorithms to control how much they get paid, and seeking new ways to gain power over the data to create better working conditions. And how about elections. So episode four of this season addresses the role of that AI plays when it comes to both spreading dense information around elections but also how to combat disinformation. This is a huge concern for democracies around the world and for me, especially in the US, but I know it's affects everybody. If this sounds interesting to you, you should try it because it is interesting. Try an episode for yourself just search for IRL in your podcast player or visit Python bytes.fm/irl I think the best way is to select is the go to Python bytes.fm/irl So they know you came from us and the the link is in your show notes Thank you IRL and Mozilla for supporting our show.

00:25:03 Yeah. Cool podcast. Thank you. Thank you, Mozilla. All right, on to the next one. Well, we already touched a little bit on the whole ORM thing. And I hear some people use Django and so web framework,

00:25:15 yeah, a few people use it.

00:25:20 Still really popular. And they're picking up the speed, of course, for their releases, right. For a long time, it was one that we had 234 going really quickly, over a couple of years there. Well, one of the big moves with many of the web frameworks ever since python three, six or so as Ben, how are you going to participate and facilitate using async? And await right? If you're doing a long database query, and you block with an ORM request, for example, what are you, you know, how, how do you parallelize that or scale that without much effort? Well, the async IO is perfect for it. But if your API's don't support it, you can't use it. And Django has been making its way towards having async capabilities. But what is the one thing that websites wait on the most databases? What is the one thing Django did not have async support for databases. So it's a little bit a little bit late here on the announcement. So in August, beginning of August, Django for one came out. And this means three, eight and above. But the big deal, there's the second one actually is an asynchronous ORM interface for doing queries. So you can do anything that's a query set. So you can say, like, if you have a class, a model class called authors, you would say author dot objects dot filter, and then you do a thing, and so on. So now you can say async, four, and do your query. And now it's all happening async. And if you want to do like a join author dot books, you would you can await getting access to that thing. Books normally has a dot first in this example. But they've now added also in a first. So if you want the async version, you put the a as a prefix. I'm not sure how I feel about that. I'm not sure I would have gotten this, this path. But, you know, doesn't really matter. It's awesome that there's some kind of async support in the Django RM. So that's, that's really, really cool. So I think I just wanted to highlight that, that this has been a major blocker to like real async programming and Django, it's like, well, you can make the web, the web view method async. But then you can't do async stuff that you really want to do. So you know, where are you? Right? This is like this unlocks the final piece, right? You could call API's previously, we'll say HTTP X, asynchronously, but then block on the database. Now, just use the A version and off you go.

00:27:43 I guess they couldn't make the one without a they couldn't make first wadeable? Because that would break all the code, I imagine.

00:27:51 Yes. But here's my thought, right. So what I'm getting back to when I say async, for author in query, you are now no switching into an async mode. So I think the thing that returns would be really great. If it like now everything must be async on it. If you just said for author in query, now it returns a secret and everything on it must be synchronous. This is this is how I would have maybe done instead of trying to like prefix everything with a and double down on it. But maybe it was just a bridge too far. I don't know. But this is, this is what I had in mind. Right? That I'm not sure what to do. Like, you can go in async mode or synchronous mode. And then you're kind of there's what I had in mind.

00:28:29 Yeah, that makes sense. Um, the async, four, would return a special version of the object which had different first methods, the same API, but wettable.

00:28:40 Right, but in a way to buy Exactly, exactly. And that doesn't mean they can't do that in the future, potentially. But yeah, yeah. Okay, a few other updates just for while I'm already here, the thing I really wanted to call it is async, ORM, and Django good to go. Also, you can have class based views, where we have a class, and then methods like get post put, and so on. Or you can have just method based ones. I prefer the method based stuff with a decorator. But if you have the class based ones, they now can also be async. Right? So that's cool. And there's also some validation of constraints is one of the other big changes. So check unique and exclusion constraints defined and meta constraints. Our options are now checked during model validation, like they weren't before. So that seems pretty valuable, too. But the ORM is the big news, I think. Yeah. Yep. That must be alright. So yeah, it's great to see Django coming along. It's been around for so long as a stalwart of the Python web world and now it's much closer to the most modern features, which is great. Yeah, very cool. Yep. All right, Brian, once you've gotten x force,

00:29:49 I have walrus operators.

00:29:55 I really, walrus is on the brain.

00:29:58 I like walrus opera. Here's the walrus operator, but I don't think I've been using it enough and especially because this article is telling me all sorts of places that I should use it more. So I've got a an article from Martin Hines, titled you should be using pythons walrus operator operator. And here's why. And there's some just some stuff that I never even really thought about before. Like, it just starts right off the bat, talking about the as, as a basics, in the Basic section, I never would have thought about that. So there's a, there's a list that happens to call a function to create the data analyst, and it calls it three times. Now really, I probably wouldn't have done this in code, I probably would have called the function once and then named the variable and stuck it in there. But you can do that, it's still easier, you can do the call the function in the first element and save the value and then use the value and in future operations just to create a list. So right off the bat, that's pretty cool. I wouldn't have thought to do that. It's nice. I didn't actually quite follow this Oh, we had to save, here's a a comprehension, where a function is called twice. So you, you, you put in the value of a function if for if something around the function like if it's if it's true, or if it evaluates Boolean, true, you can do that with a with the walrus operator and only call it once. So that's kind of cool. The one of the things I really liked around was I didn't think about before, but I'm definitely going to use it now is the regular expression match function, you often had to call match. And then if the if something was found, then you do something with the match object, you call get the groups or some other thing on the match object, it is cleaner to just go ahead and do the call, like, go ahead and do that as query of whether or not the match returns something, right, with a walrus operator way cleaner code. So I like this. And actually, it's just a fairly big article talking about a whole bunch of places. Now here's, here's the place where I like wild true loops, that always drives me nuts are having to flag something. This is, this is definitely a place where I started using walrus operator right away, of instead of saying like wild true or wild flag or something, do something and then and then, you know, break out if necessary, or set this stop bid or something. You can do that right within the while loop. It's actually, I don't know if it's, it is cleaner, it's less code. I don't know if this is easier to read, though. Any thoughts from you guys? Yeah.

00:32:46 I think once you know it, it's not too bad, is quite different from Python prior to the walrus operator. Even for me, I barely use the walrus operator, because I'm working on libraries. And the minimum version is 3.7. So I haven't trained to read the last operator, but to me that that doesn't look too bad. That looks really clear.

00:33:10 Okay. Yeah, it's it's nice, especially if you do one of those things where like, the example here is getting input from the user, where you might get input from the user and then say, while it's not exit, or whatever, then in your loop, you get the same input within the same basic question again, but you've got to ask it before to see if they ever enter. You know, there's like this weird sort of do it two times. And you could skip that with the Walsh operator, which is very cool.

00:33:35 Oh, yeah. Yeah, I used to do that like, like on this, the top example of just putting the command equals input and doing

00:33:42 that. Exactly. Yeah. And then do the same test. Exactly. Yeah.

00:33:45 Because I really don't like while true loops.

00:33:49 Only if you mean, really do it forever, right. Yeah, like until Yeah, exactly. Until it really is some case where you need to break out of it. Yeah.

00:33:58 Anyway, so the rest of the article is great to accumulating in place. There's a whole bunch of cool places. Oh, this is one I really liked. I wanted to highlight its naming, naming values inside of an F string. So here's, there's an example of an F string where you like take the date time. And you're using for instance, you might say use the date time value in two different formats, and format it in two different ways. It once with what year, month day, and once with a which I don't know what A is, but Oh, which is the day spelled out like Friday. Now, it's assigning the date time today value to today, a today variable and then using it using the value in a format string and then using the today variable later in the same format string. This is a pretty cool trick. And there's I mean, there's multiple times where I'm using the same value in a couple places because I'm formatting it differently with an F string. So this Pretty cool.

00:35:00 Yeah, that is pretty cool. The one that I really like, is the list comprehension, because that always drives me crazy. If you're going to do an an IF section, right, you know, if you're gonna say, x for x in collection, if something, yeah, and that the thing you want in the list is some kind of like a database call or some other thing that has to be computed, then you need to test that computed value. Before the walrus operator, you had to call that function twice, no matter what, like, if that was a, go get me the user from the date, like, I want to go through all the emails, and then get a list of users that correspond to them. But maybe some of the emails don't actually exist in the database, every if statement have to be, give me the user if it exists. And then the result of the value select out is also giving me the user right. And this way, when it's really expensive like that, it's it's super nice. It also is really useful in this situation, when you're doing data science stuff that expects one line of a thing you're like, I want to do, I want to pass this expression to like a panda's data frame or some other thing, and you can kind of get a little bit more done this way. It's really nice.

00:36:07 Yeah, yeah, this is pretty cool. Actually, I hadn't thought about doing it within within the the like, the the URL, the if clause within a comprehension or something. Yeah.

00:36:17 This is the one where there was no other way. Like there is no way in the in three, seven to do this without calling the function twice. In a comprehension. You could do a totally different structure like a loop or something, right. But in a comprehension, where you have to have one line like a data science scenario, you had to call it twice until the walrus came around. So I think that's fantastic. Yes, my face suppose you could

00:36:41 create a lipstick expression of the return value of bonk, and then use a zip or something, but it's super awkward.

00:36:49 Right? Exactly. Yeah. All right. So pretty cool. It's nice to see a bunch of different use cases, because then you can you can see oh, I will never do that. That's horrible. This is really great. And I didn't do that. Right. Like you could even see in the audience. People are reacting like, This is amazing. But this one is I don't know about this one. This is. Yeah, yeah. So cool. Well,

00:37:08 where are we get next from? For me? Well,

00:37:11 yeah. All right, my page. Um, so I'm sure we all love regular expressions.

00:37:18 We have a love hate relationship with them. Yeah, those.

00:37:22 I I'm not, I don't like regular expressions, but I use them a lot. Because they're, they're powerful. And there is no relief, there is no alternative law at the time. But they are very difficult to read, you tend to get long strings of gibberish, which, even if you're very well versed in regular expressions, you might find it quite hard to parse and figure out what's actually doing. You know, when you've come back to code, you know, like in the in the afternoon, but this is a library, written by Al Swaggart. And I think that's a practice name. Rhymes with wider, is an author, and he's written this Python library, which gives you kind of like, a nicer way of expressing regular expressions. It compiles regular expressions from a function and a bunch of function calls. And these function calls are much more descriptive, and the read quite well. So you can essentially read a regular expression in the future and find it quite legible. So you can find

00:38:28 like the either option, it's either this, or it's that, for example, it's very readable.

00:38:33 Like, he got zactly, exactly five digits plus optional whitespace plus one or more non whitespace. That's very readable. If you read that second time. You know exactly what that did. But if you saw this, this is a very short regular expression. Yeah, exactly. Even if you're good at regular expressions, and I've been using them for 15 years, I'd have to like analyze that. And it might take me several minutes to figure out what what that does. So this, you know, it's quite powerful, just for such a short regular expression, but you can make much larger ones. Here's something that's more complicated, but it's still quite readable, either non capturing group non capturing group, either this or that one or more of this plus non capturing group. It's, it's readable. And you can come back to it and other developers see it, they can understand what was going on. And in the end, it compiles it to a regular expression. So it's just, it's just as fast and, and powerful. But now it's just easier to work with. So

00:39:35 yeah, that's really nice, because the output of this little library is just the text pattern of the regular expression, which then you can do, it's not like you've got to adopt this entire library for everything.

00:39:47 Yeah, you can. Just anywhere that you need to write a complex regular expression. You could use this, I guess, if you wanted to develop the regex you could use this and then once you've done You could compile it and then put the actual regex back in your code. Or you could just leave it like that. It's probably not. It's not slow.

00:40:08 I would, I would probably leave it like this. But I'm thinking if you're using another library where it expects a regular expression string, right? It's, it's still totally compatible with that. Because you just say, give me the string and off it goes.

00:40:21 Yeah, yeah. So it's not going to break anything. It's not like you're switching or you don't have to port anything, per se. That's a nice drop in the way you need it. So yeah, that's pretty cool. Yeah,

00:40:32 very cool. Excellent find are all of them

00:40:35 so that libraries called Hume Hu. Mr. E? is that

00:40:40 human readable? Regular expressions? I think.

00:40:43 I, I just like, I'm gonna like I'm gonna call it humor. Because? Because then the regular expressions are humorous.

00:40:51 Yeah. Very nice. Okay, I love it. All right, Brian, is that all of our things? Over main topics?

00:41:00 I think that is do we? Do we have any extras? I didn't,

00:41:03 but now I do. Okay, let's have it out in the audience. Dean pointed out that the very first PI data Tel Aviv is happening in December, December 13 2022. So if you're in Tel Aviv, and you care about Python data stuff, you know, check that out. The call for proposals, I think is open for two weeks or something like that. So yeah, if you want to submit a talk, or attend, then you go. Nice. Yeah, cool. But that's my only extra. Okay.

00:41:36 Well, you know what, I'm not gonna let well off the hook. Because the reason why I wanted you on here is so that you could promote rich CLI.

00:41:46 Okay. Yeah.

00:41:51 Why do you want more people to use reg CLI? Or why do you think more people should use it,

00:41:55 um, I just think it's a cool project, I use it, you've got all the power of rich, but it's on the command prompt. So you can syntax highlight files, you can also just generate colorful, rich style content, you can put those in your bash scripts, it's just a very useful thing. It's, you can get it from homebrew. If you do homebrew install, rich, and then you'll have rich at the command prompt, and the news pack. And you've got a lot of cool stuff.

00:42:32 So do you have some, like some workflow that you're using it for on a regular basis? Or do you use all of these workflows

00:42:38 is more just a general tool? Okay, you know, when I'm navigating the command prompt, I want to look at file. If it's a large file, I can use pager and I can page up and then yes, there's people check it out. I can, I can display nice tables. So you can take a CSV and turn it into a nicely formatted table. And you can generate simple things like rules. And, oh, it can display markdown as well. So it's kind of like, it's a general toolbox of like, rich related stuff on the command prompt.

00:43:11 I think I'm gonna use it for see I didn't, I didn't know did CSV so easily. So I'll like I'll use Yeah.

00:43:18 So maybe, anytime you might type more, or cat or something like that, to see the contents of a file you're proposing. Now I can type rich and get syntax highlighting and better.

00:43:29 Yeah, yeah. So you do bridge the name of the file, then hyphen, hyphen, pager, and I'll give you a nice textual style pager. Okay, this came together in I think, two weekends. At some point, I'll go back and polish it a bit more, because there's there's a few issues people asking for new features.

00:43:50 Okay, yeah, cool, too. We came in the audience says rich CLI is replace cat JQ and mark down tooling for me with one tool. Go. Everyone ask him.

00:44:00 Well, how about uh, oh, yeah, what a joke. And then I've got one more thing.

00:44:05 Okay. Well, I do have a joke, as you can imagine. So here's an example of where somebody is using open source to help keep their accounts secure. And this is some kind of list of like common passwords, or really reused passwords that people want to know somebody has posted these says, Here's a list of passwords that people seem to use a lot and get reused a lot. So please don't use this as a password or checking. Don't let people use these passwords for you their accounts, right? So someone comes along to this to this repo, and they remove the word dolphins as a PR and the message is remove my password from list so hackers won't be able to hack the list of 10 million password top 1000 lists. I mean, this is proactive business right here.

00:45:00 It might actually work if the hackers are very lazy. Don't look at the get history,

00:45:03 it might actually there may be a very small percentage of effectiveness to this. You're also saying my email addresses this. And my password is that so please don't put them together.

00:45:15 Unless you're by the way, this is my credit card number. So don't exactly anywhere. Yeah.

00:45:20 So anyway,

00:45:22 now my job. Okay, well,

00:45:24 the last thing I just wanted to say is I got a new hat recently. So I wanted to show off my new hat.

00:45:28 Oh, yeah. Let's see it. It's a top I love it. Top Hat with like a five inch butterfly. Oh, it's

00:45:35 got lots of butterflies. And they're all They're all leather. And it's custom made from a guy in Oakland. So my new hat

00:45:42 is fantastic. And it perfectly matches both your shirt and your background.

00:45:47 did that on purpose? Yeah. So yeah, yeah. Or on my Oregon porpoise or on dolphin? No. At all.

00:45:56 Fantastic. All right. I

00:45:58 think love the X will for joining us today.

00:46:01 My pleasure. Yeah. Thanks for

00:46:02 having me. Thanks, Michael. And you bet. We'll see y'all later. Bye.

