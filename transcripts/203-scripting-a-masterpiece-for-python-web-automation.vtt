
00:00:00.000 --> 00:00:04.500
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.500 --> 00:00:09.900
This is episode 203 recorded October 7th, 2020.


00:00:09.900 --> 00:00:10.800
I'm Michael Kennedy.


00:00:10.800 --> 00:00:11.800
And I am Brian Okken.


00:00:11.800 --> 00:00:14.300
And this episode is brought to you by Datadog.


00:00:14.300 --> 00:00:16.600
Thank you Datadog for supporting us.


00:00:16.600 --> 00:00:19.700
Pythonbites.fm/datadog and a lot of cool stuff out there.


00:00:19.700 --> 00:00:21.200
We'll tell you more about it later.


00:00:21.200 --> 00:00:24.300
Brian, can you believe we're like well into the 200s?


00:00:24.300 --> 00:00:25.500
Well, by three.


00:00:25.500 --> 00:00:27.400
Yeah, we're getting a good start already.


00:00:27.400 --> 00:00:27.700
Yeah.


00:00:27.700 --> 00:00:28.500
A month almost.


00:00:28.500 --> 00:00:30.580
- Yeah, I guess a month, 'cause that's zero-based,


00:00:30.580 --> 00:00:32.100
which is pretty awesome.


00:00:32.100 --> 00:00:35.060
Now, speaking of things that are awesome,


00:00:35.060 --> 00:00:37.260
DigitalOcean was a sponsor of the show for a while,


00:00:37.260 --> 00:00:38.880
but before they were sponsors,


00:00:38.880 --> 00:00:42.340
we actually just used them as,


00:00:42.340 --> 00:00:44.780
you know, hosting our infrastructure, and we still do.


00:00:44.780 --> 00:00:47.500
So when you download the MP3,


00:00:47.500 --> 00:00:49.820
or your podcast player talks to something,


00:00:49.820 --> 00:00:52.900
it's talking to our services on DigitalOcean and so on.


00:00:52.900 --> 00:00:56.420
And over there, we just have a set of virtual machines,


00:00:56.420 --> 00:00:58.100
some database servers, some other things,


00:00:58.100 --> 00:01:01.060
and they manage themselves as kind of a cluster.


00:01:01.060 --> 00:01:03.460
And by manage themselves, I mean, I manage them.


00:01:03.460 --> 00:01:06.220
(laughing)


00:01:06.220 --> 00:01:07.680
I mean, they mostly take care of themselves,


00:01:07.680 --> 00:01:09.780
but I do have to log in and take care of them.


00:01:09.780 --> 00:01:13.280
But there are different ways of hosting your apps


00:01:13.280 --> 00:01:16.260
that don't require you to actually log in


00:01:16.260 --> 00:01:18.020
and configure servers and make sure they're all good


00:01:18.020 --> 00:01:19.060
and so on.


00:01:19.060 --> 00:01:20.820
Often that's called platform as a service.


00:01:20.820 --> 00:01:23.460
We also have Kubernetes clusters and things like that,


00:01:23.460 --> 00:01:26.180
where you just say, here's a definition of my code,


00:01:26.180 --> 00:01:27.980
please make it go on the internet.


00:01:27.980 --> 00:01:29.440
Right, so what I want to talk about


00:01:29.440 --> 00:01:32.260
is DigitalOcean just launched a new app platform


00:01:32.260 --> 00:01:33.920
that is a platform as a service.


00:01:33.920 --> 00:01:35.900
And like I said, I'm a fan of DigitalOcean


00:01:35.900 --> 00:01:37.700
'cause they're simple and straightforward


00:01:37.700 --> 00:01:40.820
and affordable and easy to use, but really high quality.


00:01:40.820 --> 00:01:43.340
So I think that it's worth pointing out


00:01:43.340 --> 00:01:44.860
this new platform that they just launched.


00:01:44.860 --> 00:01:47.140
- You're comfortable with doing your own,


00:01:47.140 --> 00:01:48.860
what, droplet or whatever it is?


00:01:48.860 --> 00:01:49.780
- Yeah, exactly.


00:01:49.780 --> 00:01:52.500
- I'm not, so I'm kind of looking forward


00:01:52.500 --> 00:01:53.620
to trying something like this.


00:01:53.620 --> 00:01:55.220
- And I've got a ton of different apps


00:01:55.220 --> 00:01:57.820
they have inner connections within each other


00:01:57.820 --> 00:01:59.060
that they have to care about.


00:01:59.060 --> 00:02:01.980
And there's a lot of stuff where at some point


00:02:01.980 --> 00:02:04.140
it makes sense to go down that path


00:02:04.140 --> 00:02:06.260
with various things that all work together.


00:02:06.260 --> 00:02:09.340
But if I just got an app and I wanted to get on the internet,


00:02:09.340 --> 00:02:11.920
often you don't want to deal with or worry about those things


00:02:11.920 --> 00:02:14.380
or forget to apply an OS patch.


00:02:14.380 --> 00:02:18.420
Or how many times, I mean,


00:02:18.420 --> 00:02:22.980
large-scale VC-funded professional web apps say,


00:02:22.980 --> 00:02:27.860
we're going to be experiencing downtime for the next 30 minutes or for four hours.


00:02:27.860 --> 00:02:31.780
I'm just like, what could you possibly be doing that takes four hours?


00:02:31.780 --> 00:02:36.660
I just, it's like boggles my mind that you're not able to do it better than four hours of downtime.


00:02:36.660 --> 00:02:41.380
And so platforms like this mean zero downtime deployment and things like that.


00:02:41.380 --> 00:02:42.420
So really, really neat.


00:02:42.420 --> 00:02:43.780
So they've announced this new app platform.


00:02:43.780 --> 00:02:44.980
I want to point out, this is not an ad.


00:02:44.980 --> 00:02:46.420
This is just something I think is cool.


00:02:46.420 --> 00:02:47.300
So I'm sharing with you.


00:02:47.300 --> 00:02:51.940
So yeah, so they came up with this new app platform.


00:02:51.940 --> 00:02:54.320
But then you say it's pretty modern.


00:02:54.320 --> 00:02:57.380
It's like, how do you get your code into it?


00:02:57.380 --> 00:02:59.420
You point it at your GitHub repository.


00:02:59.420 --> 00:03:01.460
You don't log into it and do a get thing.


00:03:01.460 --> 00:03:05.280
You just say, I'm going to give you access to my source code, and it will automatically


00:03:05.280 --> 00:03:06.620
deploy from that.


00:03:06.620 --> 00:03:10.000
That would be one nice way to get it over there and get it set up.


00:03:10.000 --> 00:03:12.000
But you also might want continuous deployment.


00:03:12.000 --> 00:03:17.500
So if I push, how do you get a new version with zero downtime deployments and all that?


00:03:17.500 --> 00:03:19.700
well, you just push to a particular branch


00:03:19.700 --> 00:03:22.660
that you decide upon, and it automatically notices that


00:03:22.660 --> 00:03:23.940
and does a redeploy.


00:03:23.940 --> 00:03:24.780
That's pretty sweet.


00:03:24.780 --> 00:03:27.700
Like, so I have that for like Talk Python Training.


00:03:27.700 --> 00:03:29.980
If I push to a production branch,


00:03:29.980 --> 00:03:31.580
it'll automatically do the checkout,


00:03:31.580 --> 00:03:34.220
ensure the requirements are built, recreate it.


00:03:34.220 --> 00:03:35.220
I had to write that.


00:03:35.220 --> 00:03:36.040
This just happened.


00:03:36.040 --> 00:03:37.500
This is just part of it, right?


00:03:37.500 --> 00:03:38.340
That's pretty neat.


00:03:38.340 --> 00:03:39.980
- Yeah, yeah, I don't want to do that myself.


00:03:39.980 --> 00:03:41.200
- I didn't either, but it was better


00:03:41.200 --> 00:03:42.940
than logging in all the time.


00:03:42.940 --> 00:03:46.940
So this is built on top of DigitalOcean Kubernetes,


00:03:46.940 --> 00:03:49.340
which is interesting because a lot of platform


00:03:49.340 --> 00:03:51.740
as a service type of things are opaque.


00:03:51.740 --> 00:03:53.900
They're like, well, you can give us access to your code


00:03:53.900 --> 00:03:55.760
and we'll make it run, magic.


00:03:55.760 --> 00:03:59.500
But really all this is, is they'll orchestrate


00:03:59.500 --> 00:04:02.620
running your code on top of their Kubernetes clusters,


00:04:02.620 --> 00:04:06.500
which means you can define Docker files in your repository


00:04:06.500 --> 00:04:08.460
that are going to be part of the app


00:04:08.460 --> 00:04:09.900
that runs in Kubernetes.


00:04:09.900 --> 00:04:12.340
You can use some of the tools actually


00:04:12.340 --> 00:04:14.820
to talk to the underlying infrastructure.


00:04:14.820 --> 00:04:16.300
So it's not a closed environment.


00:04:16.300 --> 00:04:19.540
you can actually kind of get down to the infrastructure layer a little bit more.


00:04:19.540 --> 00:04:21.660
So all these things are pretty neat.


00:04:21.660 --> 00:04:26.540
It has automatic handling of traffic spikes for simple, simple, simple apps.


00:04:26.540 --> 00:04:31.060
For static apps, it's free for a few limit, for three of them, right?


00:04:31.060 --> 00:04:36.540
For real apps, I guess, apps that run code like Python, you can pay five bucks for like


00:04:36.540 --> 00:04:43.040
a simple version, like on a shared server, or you can pay 12 bucks for a more pro version


00:04:43.040 --> 00:04:48.040
that has more features, CDN, SSL, all those kinds of things.


00:04:48.040 --> 00:04:50.600
And then if you want to scale it up, you can pay tons, right?


00:04:50.600 --> 00:04:55.320
You can pay like $150 to run it on a huge server or a bunch of different small servers.


00:04:55.320 --> 00:04:58.840
And there's a whole scaling thing that you can do, but there's a pretty decent offering.


00:04:58.840 --> 00:05:02.680
It's still not as cheap as running it on your own, but just like you said, a lot of people


00:05:02.680 --> 00:05:06.040
don't want to run it on their own and that's not their expertise and why should they be


00:05:06.040 --> 00:05:07.040
doing that, right?


00:05:07.040 --> 00:05:08.040
Yeah.


00:05:08.040 --> 00:05:13.040
- If you were to offer to do all of my server stuff for me,


00:05:13.040 --> 00:05:16.280
I would totally buy you dinner once a month.


00:05:16.280 --> 00:05:18.160
- Yeah, that's kind of the price, right?


00:05:18.160 --> 00:05:19.800
But this would be like a cheap dinner,


00:05:19.800 --> 00:05:23.580
like a muchos gracias type of enchiladas and a Coke,


00:05:23.580 --> 00:05:25.160
not a filet mignon.


00:05:25.160 --> 00:05:28.360
- Yeah, maybe just like a $5 gift card to Starbucks.


00:05:28.360 --> 00:05:30.080
- Yeah, there you go, I could totally get two scones.


00:05:30.080 --> 00:05:32.640
Anyway, if you were thinking about running your,


00:05:32.640 --> 00:05:34.980
I talk to so many people, students of the courses and stuff,


00:05:34.980 --> 00:05:36.880
and they're like, "I got my app,


00:05:36.880 --> 00:05:38.060
but now I got to put it online.


00:05:38.060 --> 00:05:38.900
Like what a pain.


00:05:38.900 --> 00:05:40.900
Like I can't get engine X configured, right.


00:05:40.900 --> 00:05:42.400
Or this other thing or so on.


00:05:42.400 --> 00:05:47.920
This is another solid option now that has a nice, you know, push to a branch.


00:05:47.920 --> 00:05:50.600
Deploy, run your stuff, zero downtime.


00:05:50.600 --> 00:05:56.120
You know, it's probably most comparable to Heroku, I would say in the Python ecosystem.


00:05:56.120 --> 00:05:56.380
Yeah.


00:05:56.380 --> 00:05:56.660
Yeah.


00:05:56.660 --> 00:05:57.220
All right.


00:05:57.220 --> 00:05:58.120
Well, people can check this out.


00:05:58.120 --> 00:05:59.500
I think it's, I think it's a cool offering.


00:05:59.500 --> 00:06:03.480
I will not be personally using it because there's a bunch of little gotchas.


00:06:03.480 --> 00:06:06.080
Like, you know, it would be better if, right.


00:06:06.340 --> 00:06:10.340
For example, I don't want to use their hosted Postgres database.


00:06:10.340 --> 00:06:12.660
I want to run a MongoDB server, which is fine.


00:06:12.660 --> 00:06:13.140
It's no problem.


00:06:13.140 --> 00:06:13.860
You can do that there.


00:06:13.860 --> 00:06:18.020
But you can't, like what I do on the MongoDB servers in order to talk to it,


00:06:18.020 --> 00:06:23.180
you have to be within a white list of known IP addresses that the servers,


00:06:23.180 --> 00:06:25.420
the web servers and API servers have.


00:06:25.420 --> 00:06:25.860
Right?


00:06:25.860 --> 00:06:29.520
So there's like 10 APIs in the world that can talk to that server and no others.


00:06:29.520 --> 00:06:33.860
The thing is with these Kubernetes clusters, when you push redeploy, it will


00:06:33.900 --> 00:06:36.820
regenerate it and rehost it potentially somewhere else.


00:06:36.820 --> 00:06:38.700
And the IP address keeps changing.


00:06:38.700 --> 00:06:41.760
So you can't do things like have a custom database server that has,


00:06:41.760 --> 00:06:45.620
you know, firewall limited, restricted, like VPN type of stuff.


00:06:45.620 --> 00:06:47.060
Those types of things don't exist.


00:06:47.060 --> 00:06:48.500
Most people probably don't care.


00:06:48.500 --> 00:06:49.240
I care.


00:06:49.240 --> 00:06:49.820
So I'm not doing it.


00:06:49.820 --> 00:06:52.560
You can't do Mongo with this.


00:06:52.560 --> 00:06:58.300
You can do Mongo, but you would have to have the MongoDB database port


00:06:58.300 --> 00:07:03.820
listen on the open internet rather than be restricted to just a few IP addresses.


00:07:03.820 --> 00:07:06.820
Maybe they figured this out and it's buried in the...


00:07:06.820 --> 00:07:09.820
It's something that like there's a whole conversation about like,


00:07:09.820 --> 00:07:13.820
here's the things we're going to add, here's the things that it doesn't currently do,


00:07:13.820 --> 00:07:15.820
here's some workarounds, etc.


00:07:15.820 --> 00:07:17.820
So anyway, there's a whole conversation, you can check it out.


00:07:17.820 --> 00:07:20.820
But if you do things like use their hosted database,


00:07:20.820 --> 00:07:23.820
which would make sense in a pass type of story,


00:07:23.820 --> 00:07:24.820
you don't have these problems, right?


00:07:24.820 --> 00:07:26.820
They automatically wire that stuff up.


00:07:26.820 --> 00:07:29.820
Because when you want to break the rules, you get in trouble.


00:07:29.820 --> 00:07:32.820
So you're a fan of Shakespeare, is that right?


00:07:32.820 --> 00:07:34.820
Head down to Medford.


00:07:34.820 --> 00:07:36.820
Ashland, sorry, it's Ashland down there.


00:07:36.820 --> 00:07:40.820
There's a whole like Shakespeare week.


00:07:40.820 --> 00:07:42.820
Is Ashland still there with the fires and all?


00:07:42.820 --> 00:07:44.820
God, I hope so.


00:07:44.820 --> 00:07:46.820
No, I've always wanted to, but


00:07:46.820 --> 00:07:48.820
people that don't live in Oregon have no idea what we're talking about.


00:07:48.820 --> 00:07:50.820
But there's a small town


00:07:50.820 --> 00:07:52.820
in southern Oregon that does


00:07:52.820 --> 00:07:54.820
a lot of Shakespeare plays.


00:07:54.820 --> 00:07:56.820
And that sort of transition was because


00:07:56.820 --> 00:07:58.820
I want to talk about playwright.


00:07:58.820 --> 00:08:00.820
So, Microsoft put out an announcement


00:08:00.820 --> 00:08:05.940
to put out an announcement announcing Playwright for Python. I was trying to look into this. I


00:08:05.940 --> 00:08:10.820
didn't, I guess I quite haven't quite got that whether or not Playwright was a thing before


00:08:10.820 --> 00:08:17.860
Playwright for Python or not. But in any case, it's a Microsoft thing and it's a way to drive


00:08:17.860 --> 00:08:26.180
and test your web application through easily. So it's end-to-end testing solution. It's open


00:08:26.180 --> 00:08:31.060
source and whatnot, but in their announcement, it's pretty cool announcement, gives examples


00:08:31.060 --> 00:08:32.060
and everything.


00:08:32.060 --> 00:08:33.380
So I'm going to read their pitch.


00:08:33.380 --> 00:08:39.060
The pitch for it is, "With the Playwright API, you can author end-to-end tests that


00:08:39.060 --> 00:08:41.500
run on all modern web browsers.


00:08:41.500 --> 00:08:46.400
Playwright delivers automation that is faster, more reliable, and more capable than existing


00:08:46.400 --> 00:08:48.400
testing solutions."


00:08:48.400 --> 00:08:54.020
And I'm guessing by existing testing solutions is a nice way of them to say, "We are better


00:08:54.020 --> 00:08:55.020
than Selenium."


00:08:55.020 --> 00:08:59.740
That's what I was thinking as well. So there's already a pytest plugin, there's runs on Python,


00:08:59.740 --> 00:09:06.220
and there's a little, we've said that we like animated gifs of how it works. And on their


00:09:06.220 --> 00:09:10.700
announcement page, there's a little animation. And I was actually pretty impressed with that


00:09:10.700 --> 00:09:17.500
little bit. So you can drive it even from a command line or interactive shell, you can


00:09:17.500 --> 00:09:23.900
drive some playing with it, which is nice. So a few of the benefits, apparently it's timeout


00:09:23.900 --> 00:09:30.060
free automation. So this playwright automatically waits for the user interface to be ready before


00:09:30.060 --> 00:09:35.180
you act on it again. I know there's some workarounds and there's some wrappers on top


00:09:35.180 --> 00:09:41.100
of Selenium that do that also, but this is built into the system. It's intended to stay modern


00:09:41.100 --> 00:09:47.740
with emulation of mobile viewports, geolocation, web permissions. You can automate scenarios across


00:09:47.740 --> 00:09:53.100
multiple pages. I don't really test websites that much, but I didn't know that that was


00:09:53.100 --> 00:09:56.660
was difficult before, so apparently that's easier now.


00:09:56.660 --> 00:10:00.040
Cross platform of course, or cross browser of course,


00:10:00.040 --> 00:10:02.340
because you gotta test against different things.


00:10:02.340 --> 00:10:06.700
They use a Chromium driver for Chrome and Edge emulation,


00:10:06.700 --> 00:10:10.600
WebKit driver for Safari and a Firefox driver.


00:10:10.600 --> 00:10:14.180
And supposedly the Safari rendering driver


00:10:14.180 --> 00:10:16.020
even works on Windows and Linux.


00:10:16.020 --> 00:10:19.340
So you don't actually have to have an Apple computer


00:10:19.340 --> 00:10:20.180
to do that.


00:10:20.180 --> 00:10:22.860
So pytest compatible and Django compatible,


00:10:22.860 --> 00:10:24.620
I'm sure it's compatible with lots of other stuff too,


00:10:24.620 --> 00:10:27.180
but the examples on the announcement show


00:10:27.180 --> 00:10:30.300
pytest examples and Django examples, which is cool.


00:10:30.300 --> 00:10:32.620
They even mentioned that, of course,


00:10:32.620 --> 00:10:35.900
you can run this from your continuous integration server


00:10:35.900 --> 00:10:39.660
and including GitHub Actions and others.


00:10:39.660 --> 00:10:42.180
- You must be happy to see that it's pytest,


00:10:42.180 --> 00:10:44.220
like natively pytest friendly,


00:10:44.220 --> 00:10:45.640
like with fixtures and whatnot.


00:10:45.640 --> 00:10:47.740
- I love that that's, that obviously,


00:10:47.740 --> 00:10:50.840
we're to the point now where if you have a new testing tool,


00:10:50.840 --> 00:10:52.420
you may as well in the announcement,


00:10:52.420 --> 00:10:54.500
tell people whether or not you can run it with pytest


00:10:54.500 --> 00:10:56.080
because people are gonna ask.


00:10:56.080 --> 00:10:57.540
But that's a good state to be in,


00:10:57.540 --> 00:10:58.820
in the Python world, I think.


00:10:58.820 --> 00:11:01.920
- So for example, like the simple hello world sort of test


00:11:01.920 --> 00:11:03.820
is just go to make sure that you get


00:11:03.820 --> 00:11:06.420
like a header text on a page.


00:11:06.420 --> 00:11:08.700
So it says define a function,


00:11:08.700 --> 00:11:11.380
which takes a page with type annotations, by the way,


00:11:11.380 --> 00:11:12.280
double props for that.


00:11:12.280 --> 00:11:15.580
So page, and then that's already a fixture


00:11:15.580 --> 00:11:16.940
from the framework in pytest.


00:11:16.940 --> 00:11:19.380
So it automatically passes that over setup.


00:11:19.380 --> 00:11:20.820
All you do is say it takes a page


00:11:20.820 --> 00:11:25.660
then page, go to URL, assert page.intertext of h1,


00:11:25.660 --> 00:11:28.060
equal, equal, you know, the text you're looking for.


00:11:28.060 --> 00:11:29.900
There's also more, like that you could do


00:11:29.900 --> 00:11:32.320
with like Beautiful Soup-like stuff,


00:11:32.320 --> 00:11:34.140
but there's more of the kind of drive it.


00:11:34.140 --> 00:11:34.980
Yeah, go ahead.


00:11:34.980 --> 00:11:36.460
- That's two lines of code for a test


00:11:36.460 --> 00:11:38.220
to make sure there's somethings on that web page.


00:11:38.220 --> 00:11:39.060
That's pretty cool.


00:11:39.060 --> 00:11:39.880
- Yeah, that is pretty slick,


00:11:39.880 --> 00:11:41.660
and the fixture bit is neat.


00:11:41.660 --> 00:11:44.020
You can also go and like do a test to log in.


00:11:44.020 --> 00:11:48.140
So get a new page, go to the URL,


00:11:48.140 --> 00:11:55.060
to page.fill, give it a CSS selector for the username field, the input field, give it a


00:11:55.060 --> 00:11:59.820
CSS selector for the passwords they fill with that, and then click where the text of a button


00:11:59.820 --> 00:12:00.820
equals login.


00:12:00.820 --> 00:12:05.100
You don't have to do the CSS stuff or anything, just find me a button or a thing or a URL


00:12:05.100 --> 00:12:08.220
that has the text login and click that, and it's off.


00:12:08.220 --> 00:12:12.420
And so one of the examples here is it does that first and then it logs in, then it creates


00:12:12.420 --> 00:12:15.500
a session that remembers that it's logged in for the rest of the testing.


00:12:15.500 --> 00:12:17.580
So that's one of the setup phases, which is pretty cool.


00:12:17.580 --> 00:12:18.500
- Yeah. - Yeah.


00:12:18.500 --> 00:12:19.420
Let me throw out one other thing.


00:12:19.420 --> 00:12:22.060
You talked about Chromium as one of the drivers, right?


00:12:22.060 --> 00:12:23.700
So a lot of times when you're doing Selenium,


00:12:23.700 --> 00:12:25.500
I don't know about this, but it looks the same.


00:12:25.500 --> 00:12:27.540
You know, you have to install Chromium


00:12:27.540 --> 00:12:29.300
and then there's like a little hidden one.


00:12:29.300 --> 00:12:33.820
You can also do the Firefox browser for Selenium.


00:12:33.820 --> 00:12:36.340
But I was talking to the guys at Attila


00:12:36.340 --> 00:12:39.300
from Scraping Hub on Talk Python


00:12:39.300 --> 00:12:41.620
and he pointed out that Scraping Hub


00:12:41.620 --> 00:12:44.900
makes a headless browser specifically designed


00:12:44.900 --> 00:12:49.020
to be a headless browser called Splash.


00:12:49.020 --> 00:12:50.660
So their headline is,


00:12:50.660 --> 00:12:52.740
"The headless browser designed specifically


00:12:52.740 --> 00:12:57.580
for web scraping turned JavaScript-heavy web pages into data."


00:12:57.580 --> 00:13:00.140
So I don't know how much better that is,


00:13:00.140 --> 00:13:00.980
but it's interesting to think


00:13:00.980 --> 00:13:02.540
that you can swap out these browsers.


00:13:02.540 --> 00:13:04.260
And here's a cool example as well,


00:13:04.260 --> 00:13:05.740
something that maybe people don't know about.


00:13:05.740 --> 00:13:07.100
- Yeah, I listened to that episode,


00:13:07.100 --> 00:13:08.060
and thanks for reminding me.


00:13:08.060 --> 00:13:10.060
I was like, I gotta check that out.


00:13:10.060 --> 00:13:11.780
- Yeah, I do too, but I haven't checked it out,


00:13:11.780 --> 00:13:12.620
but it definitely looks neat.


00:13:12.620 --> 00:13:15.300
So this though, I like it.


00:13:15.300 --> 00:13:18.580
I mean, it looks at least as neat as Selenium.


00:13:18.580 --> 00:13:20.060
I don't know, maybe it's even better.


00:13:20.060 --> 00:13:21.340
So pretty cool.


00:13:21.340 --> 00:13:25.580
Also cool, Datadog, they're actually sponsoring the show.


00:13:25.580 --> 00:13:27.180
Unlike DigitalOcean where I just found something


00:13:27.180 --> 00:13:29.420
that I like from somebody who happened to be a sponsor.


00:13:29.420 --> 00:13:31.660
But Datadog are sponsoring the show,


00:13:31.660 --> 00:13:33.460
not making them any less cool.


00:13:33.460 --> 00:13:34.940
So let me ask you a question.


00:13:34.940 --> 00:13:36.020
Do you have an app in production


00:13:36.020 --> 00:13:37.300
that's slower than you like?


00:13:37.300 --> 00:13:39.380
It's performant, maybe it's all over the place,


00:13:39.380 --> 00:13:41.300
sometimes fast, sometimes slow?


00:13:41.300 --> 00:13:42.580
Here's the important question.


00:13:42.580 --> 00:13:43.560
Do you know why?


00:13:43.560 --> 00:13:44.520
With Datadog, you will.


00:13:44.520 --> 00:13:46.080
You can troubleshoot your app's performance


00:13:46.080 --> 00:13:48.680
with Datadog's end-to-end tracing,


00:13:48.680 --> 00:13:50.240
get detailed flame graphs,


00:13:50.240 --> 00:13:51.920
identify bottlenecks and latency


00:13:51.920 --> 00:13:53.640
in that finicky app of yours.


00:13:53.640 --> 00:13:57.400
Be the hero that got your app back on track at your company.


00:13:57.400 --> 00:13:59.100
Get started with a free trial,


00:13:59.100 --> 00:14:00.680
and I believe they send you a t-shirt,


00:14:00.680 --> 00:14:02.400
a little cool t-shirt still,


00:14:02.400 --> 00:14:05.240
over at pythonbytes.fm/datadog.


00:14:05.240 --> 00:14:08.280
So, Brian, something we haven't spoken about nearly enough


00:14:08.280 --> 00:14:10.160
is AsyncIO and AsyncInAwait.


00:14:10.160 --> 00:14:11.560
Should we touch on that a little?


00:14:11.560 --> 00:14:12.400
- Sure.


00:14:12.400 --> 00:14:14.640
(laughing)


00:14:14.640 --> 00:14:17.520
Okay, yeah, we've talked about it some.


00:14:17.520 --> 00:14:19.440
- Some, I believe some maybe.


00:14:19.440 --> 00:14:23.800
So one of the things that async.io is for,


00:14:23.800 --> 00:14:25.600
I mean, if you look at the name,


00:14:25.600 --> 00:14:29.740
it's around waiting on IO, waiting on external things


00:14:29.740 --> 00:14:33.320
like network calls, API calls, and so on, right?


00:14:33.320 --> 00:14:35.100
- Oh, I thought it was just trying to be cool,


00:14:35.100 --> 00:14:37.040
like all the .io.


00:14:37.040 --> 00:14:38.400
- It could be that, or it could just be


00:14:38.400 --> 00:14:40.320
I like the Italian pronunciation.


00:14:40.320 --> 00:14:41.160
Asyncio.


00:14:41.160 --> 00:14:41.980
- Asyncio.


00:14:41.980 --> 00:14:43.160
(laughing)


00:14:43.160 --> 00:14:44.160
- No, it's beautiful.


00:14:44.160 --> 00:14:46.920
So when I think of files, I think of IO.


00:14:46.920 --> 00:14:48.440
Like if somebody said, what is IO?


00:14:48.440 --> 00:14:49.560
I would think file IO.


00:14:49.560 --> 00:14:50.960
That's the first thing I would say.


00:14:50.960 --> 00:14:54.380
And yet Python doesn't have built-in support


00:14:54.380 --> 00:14:57.540
for asynchronously working with file IO.


00:14:57.540 --> 00:14:58.400
That's bizarre, right?


00:14:58.400 --> 00:14:59.680
- Yeah, it is.


00:14:59.680 --> 00:15:01.200
- I believe there's an external package.


00:15:01.200 --> 00:15:04.360
I think I saw it somewhere on like awesome asyncio


00:15:04.360 --> 00:15:05.920
or some list like that,


00:15:05.920 --> 00:15:08.920
that somebody had built something along those lines.


00:15:08.920 --> 00:15:10.760
But there's a cool article called


00:15:10.760 --> 00:15:14.760
Asynchronously Opening and Closing Files in AsyncIO


00:15:14.760 --> 00:15:16.120
by Chris Wellens.


00:15:16.120 --> 00:15:17.280
- Nice. - So he wrote this and said,


00:15:17.280 --> 00:15:19.840
"Look, AsyncIO has great support for networking,


00:15:19.840 --> 00:15:22.360
"sub-process, inter-process communication stuff,


00:15:22.360 --> 00:15:24.720
"but no file operations like opening, reading,


00:15:24.720 --> 00:15:26.080
"writing, and closing files.


00:15:26.080 --> 00:15:27.160
"And if you're talking to something


00:15:27.160 --> 00:15:28.560
"that might take a long time,"


00:15:28.560 --> 00:15:29.480
I mean, I don't know about you,


00:15:29.480 --> 00:15:32.800
but I've got a pretty ragin' SSD on both my computers,


00:15:32.800 --> 00:15:34.280
so maybe I don't need this.


00:15:34.280 --> 00:15:37.660
Unless you're at that corporate,


00:15:37.660 --> 00:15:39.740
maybe you're logged in through a corporate VPN


00:15:39.740 --> 00:15:42.800
and you've mapped a network share over to your drive


00:15:42.800 --> 00:15:43.880
and then you try to read from that,


00:15:43.880 --> 00:15:46.680
all of a sudden your file IO might get super slow, right?


00:15:46.680 --> 00:15:50.360
- Well, even on SSDs, file IO is slower than memory reads.


00:15:50.360 --> 00:15:51.680
- Yeah, it's much slower.


00:15:51.680 --> 00:15:55.360
So there's certainly situations where this could be extreme,


00:15:55.360 --> 00:15:56.700
like the network one, but you're right.


00:15:56.700 --> 00:15:58.520
Even normal file IO can be slow


00:15:58.520 --> 00:16:01.840
if you're really looking to squeeze out the most concurrency.


00:16:01.840 --> 00:16:05.480
So basically he wrote a little article working through it


00:16:05.480 --> 00:16:07.760
and it's ridiculously short actually


00:16:07.760 --> 00:16:09.920
on how you can do this.


00:16:09.920 --> 00:16:12.320
So basically he says, look, if I use open,


00:16:12.320 --> 00:16:14.800
open file in Python, I would,


00:16:14.800 --> 00:16:17.720
as a decent Pythonic bit of code,


00:16:17.720 --> 00:16:21.680
typically I would write with open thing as file IO object,


00:16:21.680 --> 00:16:22.920
right, file string.


00:16:22.920 --> 00:16:25.440
Let's build that for, so then we're gonna call aopen,


00:16:25.440 --> 00:16:26.400
which is an asynchronous one.


00:16:26.400 --> 00:16:29.080
And it's kind of bizarre and weird that Python has this,


00:16:29.080 --> 00:16:30.840
but it does and I think it's neat.


00:16:30.840 --> 00:16:36.940
It has async with blocks when you do async things that have to be asynchronously managed


00:16:36.940 --> 00:16:38.940
within context managers.


00:16:38.940 --> 00:16:45.380
So he said, "Let's write this so it implements the async with style," which is really simple.


00:16:45.380 --> 00:16:47.180
You basically implement a couple of methods.


00:16:47.180 --> 00:16:52.180
Instead of dunder enter, dunder exit, you do dunder a enter, dunder a exit, and so on.


00:16:52.180 --> 00:16:55.500
And then he says, "Okay, well, what we're going to do is we're going to define a function


00:16:55.500 --> 00:16:58.420
that just opens a file, super easy.


00:16:58.420 --> 00:17:02.820
But then we're gonna run it in an asyncio event loop


00:17:02.820 --> 00:17:04.900
by saying run in executor.


00:17:04.900 --> 00:17:09.900
And what that means is asyncio will create a thread pool


00:17:09.900 --> 00:17:13.440
where it's gonna run over on a background thread


00:17:13.440 --> 00:17:15.980
and then it just runs that and lets you await it.


00:17:15.980 --> 00:17:17.640
And that's basically it.


00:17:17.640 --> 00:17:18.480
Isn't that neat?


00:17:18.480 --> 00:17:19.300
- That's not much code.


00:17:19.300 --> 00:17:21.500
- No, it's like the opening bit is one, two, three,


00:17:21.500 --> 00:17:24.540
it's six lines of code, including the function name,


00:17:24.540 --> 00:17:27.540
which has to be there, the five lines of writing code.


00:17:27.540 --> 00:17:29.100
- Yeah, and one of the things I like about this


00:17:29.100 --> 00:17:33.620
is not because I really wanna do async file stuff,


00:17:33.620 --> 00:17:36.460
it's because it's a neat little example


00:17:36.460 --> 00:17:37.980
that I can get my head around


00:17:37.980 --> 00:17:41.700
so that if I have some other process or other slow thing


00:17:41.700 --> 00:17:44.020
that I want to make async-ified,


00:17:44.020 --> 00:17:46.260
this might be an example to how to do that.


00:17:46.260 --> 00:17:47.300
- Yeah, absolutely.


00:17:47.300 --> 00:17:50.400
So I think this is super instructive and interesting.


00:17:50.400 --> 00:17:55.400
I'll also throw out that there is an AIO files package.


00:17:55.400 --> 00:17:57.000
I think it's files plural.


00:17:57.000 --> 00:17:58.480
Maybe it's file?


00:17:58.480 --> 00:17:59.840
No, file singular.


00:17:59.840 --> 00:18:02.880
AIO file, which you can pip install


00:18:02.880 --> 00:18:06.160
and then just do this instead of like see the tutorial.


00:18:06.160 --> 00:18:08.440
But I think the value here is like,


00:18:08.440 --> 00:18:11.000
well, what else doesn't have async support


00:18:11.000 --> 00:18:13.100
and what could I just kick over to a thread


00:18:13.100 --> 00:18:15.840
but then integrate into asyncio event loops?


00:18:15.840 --> 00:18:16.840
- Yeah, it's nice.


00:18:16.840 --> 00:18:17.740
- Indeed.


00:18:17.740 --> 00:18:19.280
You know what else is nice?


00:18:19.280 --> 00:18:22.560
Excel, like so many people who can't do any programming


00:18:22.560 --> 00:18:24.680
or any scripting or anything, they can just go to Excel


00:18:24.680 --> 00:18:28.320
and like drag and drop a little, you know, a formula


00:18:28.320 --> 00:18:30.000
and paste it over and then they're good to go.


00:18:30.000 --> 00:18:31.560
- Yeah. (laughs)


00:18:31.560 --> 00:18:33.160
- Except, except what?


00:18:33.160 --> 00:18:35.280
- So-- - Except it's 2020,


00:18:35.280 --> 00:18:36.160
that's the problem.


00:18:36.160 --> 00:18:40.040
- Yeah, so this is only tangentially related to Python.


00:18:40.040 --> 00:18:43.800
Mostly it's that people start using databases in Python,


00:18:43.800 --> 00:18:46.000
stop using Excel so much.


00:18:46.000 --> 00:18:48.560
This article, we had a lot of people actually,


00:18:48.560 --> 00:18:51.060
Say, did you guys see this?


00:18:51.060 --> 00:18:51.560
Yeah.


00:18:51.560 --> 00:18:54.560
So yeah, lots of people brought this up to us.


00:18:54.560 --> 00:18:56.760
I've got an article that I picked.


00:18:56.760 --> 00:19:01.360
There's a bunch of articles also, but I picked a BBC.com article because it


00:19:01.360 --> 00:19:02.460
didn't have very many ads.


00:19:02.460 --> 00:19:08.460
So the BBC article says Excel, why using Microsoft's tool caused COVID-19


00:19:08.460 --> 00:19:09.560
results to be lost.


00:19:09.560 --> 00:19:10.360
Wow.


00:19:10.360 --> 00:19:15.360
So there's a apparently if you haven't heard about this, apparently there


00:19:15.360 --> 00:19:20.160
16,000 coronavirus cases that went unreported in England. The good news is


00:19:20.160 --> 00:19:25.040
they, well, sort of good. They did, it only took like a few days for


00:19:25.040 --> 00:19:28.860
somebody to notice this, but there is a few days where there was some


00:19:28.860 --> 00:19:33.160
stuff not getting tracked right. - And Posty was like, "Hey, things are getting


00:19:33.160 --> 00:19:37.600
better. We're trending down. This is amazing." Except, no.


00:19:37.600 --> 00:19:42.560
Just didn't read it. - So apparently, you had several commercial


00:19:42.560 --> 00:19:50.400
testing firms filling out CSV files and sending them to, I forget the name of the place,


00:19:50.400 --> 00:19:56.280
something, some health organization in England that was pulling all this stuff together. And


00:19:56.280 --> 00:20:03.600
they were pulling it together by putting it all in an Excel XLS template that could be then


00:20:03.600 --> 00:20:09.080
uploaded to a central system and made available to NHS test and trace team as well as other


00:20:09.080 --> 00:20:15.960
government computer dashboards. But the use of the XLS template made it so that


00:20:15.960 --> 00:20:20.480
there was a limit of 65,000 rows. Actually that just gives me nightmares


00:20:20.480 --> 00:20:25.560
to think of a 65,000 row Excel spreadsheet. But apparently that's the


00:20:25.560 --> 00:20:29.480
limit. Nobody quite noticed that they'd hit it. It didn't say anything about


00:20:29.480 --> 00:20:35.960
failing and people noticed, some people said, "Well you should have used XLSX


00:20:35.960 --> 00:20:38.960
because that increases the limit by 16 times.


00:20:38.960 --> 00:20:41.960
But still, Excel for this? Of course I was thinking,


00:20:41.960 --> 00:20:44.960
"Why are you doing this in Excel?" And in this article


00:20:44.960 --> 00:20:47.960
they had a quote from Professor John Croft


00:20:47.960 --> 00:20:50.960
from the University of Cambridge.


00:20:50.960 --> 00:20:53.960
He says, "Excel is always meant for


00:20:53.960 --> 00:20:56.960
people mucking around with a bunch of data on their small


00:20:56.960 --> 00:20:59.960
company to see what it looked like. And then when you need something


00:20:59.960 --> 00:21:02.960
more serious, you build something bespoke that works.


00:21:02.960 --> 00:21:05.400
There's dozens of other things that could do,


00:21:05.400 --> 00:21:07.360
but you wouldn't use an XLS.


00:21:07.360 --> 00:21:08.880
Nobody would start with that.


00:21:08.880 --> 00:21:10.040
(laughing)


00:21:10.040 --> 00:21:11.160
- Exactly.


00:21:11.160 --> 00:21:12.720
- Anyway. - Exactly.


00:21:12.720 --> 00:21:13.960
- Apparently people did though,


00:21:13.960 --> 00:21:16.400
and so people should be using Python.


00:21:16.400 --> 00:21:17.960
- Yeah, that's not good.


00:21:17.960 --> 00:21:19.400
That is not good.


00:21:19.400 --> 00:21:21.600
So I think there's a really interesting trend


00:21:21.600 --> 00:21:24.920
of moving towards things like pandas


00:21:24.920 --> 00:21:26.720
to answer these questions, right?


00:21:26.720 --> 00:21:27.720
- Yeah.


00:21:27.720 --> 00:21:29.600
- I don't think that's the answer for everybody, right?


00:21:29.600 --> 00:21:32.040
Like, oh, well, Excel is kind of clumsy for you,


00:21:32.040 --> 00:21:34.400
So here's what you should do is,


00:21:34.400 --> 00:21:36.960
you should learn a whole bunch of programming, right?


00:21:36.960 --> 00:21:40.400
I mean, here's a random story that I would,


00:21:40.400 --> 00:21:42.640
one of the more frustrating things from my corporate days


00:21:42.640 --> 00:21:44.120
is when I was doing training,


00:21:44.120 --> 00:21:47.200
we would have to write proposals to send off to clients.


00:21:47.200 --> 00:21:48.280
And like, here's what we're gonna cover,


00:21:48.280 --> 00:21:49.920
here's what we're gonna teach, here's your goals,


00:21:49.920 --> 00:21:52.280
and here's the timeline and so on.


00:21:52.280 --> 00:21:54.000
And I would send that off as a Word document


00:21:54.000 --> 00:21:56.560
and work with one of the salespeople I worked with.


00:21:56.560 --> 00:21:58.680
And they said, they'd send it off to the client


00:21:58.680 --> 00:22:01.680
and somebody changed the Word doc, like a doc X,


00:22:01.680 --> 00:22:04.680
"Oh, Michael, I need you to replace this word with that word."


00:22:04.680 --> 00:22:07.680
And so she sent me the document back


00:22:07.680 --> 00:22:09.680
and asked me to replace that word with that word.


00:22:09.680 --> 00:22:12.680
I'm like, "Do you not know about Command-R or Control-R?"


00:22:12.680 --> 00:22:15.680
Or whatever the replace hotkey is.


00:22:15.680 --> 00:22:18.680
Why would you ever send me a file and just say,


00:22:18.680 --> 00:22:21.680
"I need this word to do a find and replace with that word."


00:22:21.680 --> 00:22:22.680
But I need to do it for her.


00:22:22.680 --> 00:22:23.680
I was just like...


00:22:23.680 --> 00:22:25.680
So anyway, I'm thinking of that person using Excel.


00:22:25.680 --> 00:22:28.680
I would never suggest that that person learn it.


00:22:28.680 --> 00:22:36.680
That said, a lot of Excel power users I think would do really well to adopt JupyterLab and Pandas and stuff.


00:22:36.680 --> 00:22:41.680
And actually Chris Moffitt, who does practical business Python, just did a webcast with us.


00:22:41.680 --> 00:22:44.680
We talked about it before, but the recording is up now.


00:22:44.680 --> 00:22:45.680
You can check that out.


00:22:45.680 --> 00:22:48.680
That will give you some concrete tips to avoid the Excel if possible.


00:22:48.680 --> 00:22:52.680
Oh, nice. Good resource. Links in our show notes.


00:22:52.680 --> 00:22:57.680
Would you be a fan of getting documents sent to you and asked to do a finder in place on a Word?


00:22:57.680 --> 00:22:58.960
I've totally had that happen.


00:22:58.960 --> 00:22:59.780
Yeah.


00:22:59.780 --> 00:23:04.820
Like I sent you the doc, you could just, I mean, maybe send it back to me and


00:23:04.820 --> 00:23:08.960
said, say, Hey, I made some updates and here's my updates if you need to store.


00:23:08.960 --> 00:23:10.540
Yeah, exactly.


00:23:10.540 --> 00:23:10.760
Yeah.


00:23:10.760 --> 00:23:11.740
Just make sure I did it right.


00:23:11.740 --> 00:23:15.780
It may be, but I mean, it was pretty straightforward anyway.


00:23:15.780 --> 00:23:17.220
Let's move on.


00:23:17.220 --> 00:23:21.500
I'm sure everyone out there has a story like that of you wouldn't believe


00:23:21.500 --> 00:23:24.340
what I had to do in my corporate job.


00:23:25.520 --> 00:23:28.200
So this next one comes to us from a listener,


00:23:28.200 --> 00:23:31.520
Preston Daniel, who's given us lots of cool feedback


00:23:31.520 --> 00:23:32.840
and ideas.


00:23:32.840 --> 00:23:35.420
And this one is called locust.io.


00:23:35.420 --> 00:23:38.920
This is actually a pretty good pairing with Playwright.


00:23:38.920 --> 00:23:41.640
So Playwright is about validating


00:23:41.640 --> 00:23:44.180
that what is on the web page makes sense.


00:23:44.180 --> 00:23:46.320
I can go log in and press the button,


00:23:46.320 --> 00:23:48.240
and then I go to this page and this text is here.


00:23:48.240 --> 00:23:49.280
Something like that, right?


00:23:49.280 --> 00:23:51.080
As a continuous integration.


00:23:51.080 --> 00:23:54.440
So Locust is about, okay, you know that works.


00:23:54.440 --> 00:23:56.240
What if 10 people do it at the same time?


00:23:56.240 --> 00:23:58.480
What if 100 people do it at the same time


00:23:58.480 --> 00:23:59.920
on our current infrastructure?


00:23:59.920 --> 00:24:04.200
You hear about things like the whole healthcare debacle


00:24:04.200 --> 00:24:07.720
where they spent hundreds of millions of dollars of code


00:24:07.720 --> 00:24:09.400
on code on these projects,


00:24:09.400 --> 00:24:12.200
and a few people logged in and it just failed.


00:24:12.200 --> 00:24:15.840
And you just wonder, could you just try it?


00:24:15.840 --> 00:24:19.960
Just maybe, just seeing, if we call that API


00:24:19.960 --> 00:24:23.120
10 times a second, will it actually take it, right?


00:24:23.120 --> 00:24:25.240
And so tools like this are exactly what you want.


00:24:25.240 --> 00:24:27.920
It's really cool for just simulating,


00:24:27.920 --> 00:24:29.920
accessing a bunch of different sites.


00:24:29.920 --> 00:24:32.140
- I was just thinking one good use for this


00:24:32.140 --> 00:24:33.700
may have been, sorry to interrupt,


00:24:33.700 --> 00:24:35.800
maybe the schools could have done this


00:24:35.800 --> 00:24:38.160
before they had everybody log in


00:24:38.160 --> 00:24:41.100
so that all the kids on their laptops


00:24:41.100 --> 00:24:43.960
or their tablets wouldn't have said on day one,


00:24:43.960 --> 00:24:46.160
"I don't know what's going on, it won't let me in."


00:24:46.160 --> 00:24:47.560
- Yeah, the page won't load.


00:24:47.560 --> 00:24:49.600
It just, it keeps giving me the numbers, 500.


00:24:49.600 --> 00:24:50.680
Is this a math class?


00:24:50.680 --> 00:24:52.120
(laughing)


00:24:52.120 --> 00:24:52.960
- Anyway.


00:24:52.960 --> 00:24:54.660
- Exactly, so you should test your code.


00:24:54.660 --> 00:24:56.680
And so I've used these before, these types of tools,


00:24:56.680 --> 00:24:58.280
and often it's like, okay, what you're gonna do


00:24:58.280 --> 00:25:01.400
is open a web browser, and you're gonna go to the site,


00:25:01.400 --> 00:25:04.800
and it'll record the URLs, and you can use


00:25:04.800 --> 00:25:09.080
some weird selection syntax, it gets weird, clumsy GUI,


00:25:09.080 --> 00:25:12.160
maybe it stores it as XML, but you have a UI on top of it,


00:25:12.160 --> 00:25:13.560
and it's all crummy.


00:25:13.560 --> 00:25:15.640
And they probably charge you a ridiculous amount


00:25:15.640 --> 00:25:16.640
of money for this.


00:25:16.640 --> 00:25:18.640
So here's the thing with Locus.


00:25:18.640 --> 00:25:22.280
It basically looks like you're writing unit test code.


00:25:22.280 --> 00:25:24.760
So if you look at the, there's an example in the show notes,


00:25:24.760 --> 00:25:25.600
just check that out.


00:25:25.600 --> 00:25:27.720
So what you do is you define a user


00:25:27.720 --> 00:25:31.480
and then you give the user some tasks or some behaviors.


00:25:31.480 --> 00:25:32.680
Oh, this is the one that I was thinking of, sorry,


00:25:32.680 --> 00:25:34.520
I was confused this with your playwright.


00:25:34.520 --> 00:25:36.120
So for example, with the user,


00:25:36.120 --> 00:25:40.920
like you would say something like self.client.post to login


00:25:40.920 --> 00:25:42.000
and you just give it a dictionary.


00:25:42.000 --> 00:25:44.680
Username is this, password is that.


00:25:44.680 --> 00:25:45.780
Boom, that's it.


00:25:45.780 --> 00:25:47.580
And that will actually go over there


00:25:47.580 --> 00:25:51.280
and submit the login form with that data,


00:25:51.280 --> 00:25:52.520
which is pretty awesome.


00:25:52.520 --> 00:25:53.520
And then you give it tasks,


00:25:53.520 --> 00:25:54.800
and these are kind of like tests.


00:25:54.800 --> 00:25:57.280
Like go to the index page, do a get on slash,


00:25:57.280 --> 00:25:58.960
and do a get on the JavaScript.


00:25:58.960 --> 00:26:01.660
Go to the about page and do a get on slash about.


00:26:01.660 --> 00:26:04.640
Or go click this button or go make this thing happen.


00:26:04.640 --> 00:26:05.760
And then once you have this,


00:26:05.760 --> 00:26:08.280
then you can turn that into a bunch


00:26:08.280 --> 00:26:10.920
of distributed parallel requests


00:26:10.920 --> 00:26:14.700
to see if you get any 500 errors, timeout errors,


00:26:14.700 --> 00:26:17.120
like what the average latency is for 10 users,


00:26:17.120 --> 00:26:19.560
100 users, 1,000 users at a time.


00:26:19.560 --> 00:26:22.520
You can run it on distributed machines.


00:26:22.520 --> 00:26:25.680
So you can have it simulate millions of users


00:26:25.680 --> 00:26:28.240
if you want to run it on like 20 cloud VMs


00:26:28.240 --> 00:26:31.280
or something like that and turn it on onto your website.


00:26:31.280 --> 00:26:32.120
What do you think?


00:26:32.120 --> 00:26:33.120
- I think this is cool.


00:26:33.120 --> 00:26:35.920
And you're saying that there's a game website


00:26:35.920 --> 00:26:37.200
that's using this?


00:26:37.200 --> 00:26:38.520
- There is in the notes,


00:26:38.520 --> 00:26:39.820
they say when they talk about the features,


00:26:39.820 --> 00:26:42.560
they say, look, you can define user behavior and code,


00:26:42.560 --> 00:26:45.080
suit just plain Python code, which is neat.


00:26:45.080 --> 00:26:46.880
It's scalable, so you can run it, like I said,


00:26:46.880 --> 00:26:48.960
and then it's battle tested.


00:26:48.960 --> 00:26:50.200
(laughing)


00:26:50.200 --> 00:26:52.560
Because Locus has been used to simulate


00:26:52.560 --> 00:26:55.720
millions of simultaneous users on Battlelog,


00:26:55.720 --> 00:26:58.520
the web app for Battlefield games.


00:26:58.520 --> 00:27:00.720
And so, they could say, you really could say,


00:27:00.720 --> 00:27:03.080
Locus is Battlefield, battle-tested.


00:27:03.080 --> 00:27:03.920
- Nice.


00:27:03.920 --> 00:27:05.320
- I don't know if anybody's seen the trailer


00:27:05.320 --> 00:27:06.260
for the Battlefield games.


00:27:06.260 --> 00:27:08.680
I've not been paying attention to it for ever,


00:27:08.680 --> 00:27:10.440
but for many, many years at least.


00:27:10.440 --> 00:27:12.000
Wow, these games have come a long ways.


00:27:12.000 --> 00:27:13.960
Like, if you watch the trailer for the latest one,


00:27:13.960 --> 00:27:15.320
that's crazy, crazy stuff.


00:27:15.320 --> 00:27:17.140
But, it's kind of also beside the point.


00:27:17.140 --> 00:27:19.220
I think this way of saying,


00:27:19.220 --> 00:27:20.840
this is what a website user does.


00:27:20.840 --> 00:27:22.700
They log in and then they go to this page


00:27:22.700 --> 00:27:23.860
and I might also visit this page.


00:27:23.860 --> 00:27:26.680
And you set up things like, not just I wanna have,


00:27:26.680 --> 00:27:27.880
so when you answer questions like,


00:27:27.880 --> 00:27:30.040
how many users can we support?


00:27:30.040 --> 00:27:32.500
Typical users are not pathological.


00:27:32.500 --> 00:27:34.220
They don't go to your account page


00:27:34.220 --> 00:27:36.220
and hold down Command + R or Control + R


00:27:36.220 --> 00:27:38.600
and just refresh it as hard as they can, right?


00:27:38.600 --> 00:27:39.780
They'll go there and they'll spend


00:27:39.780 --> 00:27:41.260
three or four seconds, five seconds,


00:27:41.260 --> 00:27:42.740
and then they'll go to another thing,


00:27:42.740 --> 00:27:43.900
they'll spend 10 seconds there,


00:27:43.900 --> 00:27:45.780
then they'll go off and they'll click this button.


00:27:45.780 --> 00:27:47.420
to have normal human behavior.


00:27:47.420 --> 00:27:50.840
So one of the things you set up in this class you define


00:27:50.840 --> 00:27:53.020
that represents a user on your site is the wait time.


00:27:53.020 --> 00:27:56.700
So say the wait time is between five and 15 seconds.


00:27:56.700 --> 00:27:58.660
And then you ask, can it take a million users?


00:27:58.660 --> 00:28:00.340
It doesn't just do a million concurrent requests.


00:28:00.340 --> 00:28:02.220
It has like a million of these things


00:28:02.220 --> 00:28:04.580
randomly waiting between five to 15 seconds


00:28:04.580 --> 00:28:08.340
as they're kind of like interacting randomly with your site.


00:28:08.340 --> 00:28:09.180
- Oh, cool.


00:28:09.180 --> 00:28:11.140
So you could sort of scale this then.


00:28:11.140 --> 00:28:15.660
You could start with something like some long wait times.


00:28:15.660 --> 00:28:18.860
and make sure that it can handle like a thousand users or something,


00:28:18.860 --> 00:28:23.500
and then gradually make it shorter so that it's hitting on your server harder.


00:28:23.500 --> 00:28:24.660
Yeah, exactly.


00:28:24.660 --> 00:28:25.700
I think this is really neat.


00:28:25.700 --> 00:28:28.820
So I don't know that I would necessarily be using it right now,


00:28:28.820 --> 00:28:30.260
but if I create something new,


00:28:30.260 --> 00:28:32.900
especially something I'm sure is going to get a lot of traffic,


00:28:32.900 --> 00:28:35.140
then I would definitely use this.


00:28:35.140 --> 00:28:36.060
It looks really neat.


00:28:36.060 --> 00:28:37.340
It's free and open source.


00:28:37.340 --> 00:28:38.940
Like, write it in Python.


00:28:38.940 --> 00:28:40.460
Like, why the heck not?


00:28:40.460 --> 00:28:44.340
The only reason I wouldn't use it now is I've already had like some really big spike events.


00:28:44.340 --> 00:28:48.320
I'm like, okay, well, it's, you know, everything's running at like 2%, 5% CPU.


00:28:48.320 --> 00:28:49.260
It's like, it's fine.


00:28:49.260 --> 00:28:50.240
I don't need it.


00:28:50.240 --> 00:28:53.740
You can totally see, I mean, there's a huge use case for this is that like people


00:28:53.740 --> 00:28:57.660
that have the, they're rolling out a new app or even if they're an existing


00:28:57.660 --> 00:29:02.440
company, rolling out something new and everything looks fine on their server,


00:29:02.440 --> 00:29:06.040
even when they're testing with like two or three consecutive tests or something.


00:29:06.040 --> 00:29:07.960
But are we ready to roll it out?


00:29:07.960 --> 00:29:09.480
We don't know how many people are going to hit it.


00:29:09.480 --> 00:29:12.120
So they can sort of gauge that.


00:29:12.400 --> 00:29:13.800
- So the one that I always have in mind


00:29:13.800 --> 00:29:15.000
when I think about this is,


00:29:15.000 --> 00:29:16.600
you've got some app that's been out there


00:29:16.600 --> 00:29:18.600
and it's kind of getting some traction


00:29:18.600 --> 00:29:20.560
and your company's getting some traction in it.


00:29:20.560 --> 00:29:22.720
And the company decides,


00:29:22.720 --> 00:29:24.600
we're gonna run a Super Bowl ad,


00:29:24.600 --> 00:29:28.080
or we're gonna launch some huge marketing campaign


00:29:28.080 --> 00:29:32.200
on Black Friday that's like way, way out of bounds


00:29:32.200 --> 00:29:33.720
of what we normally do.


00:29:33.720 --> 00:29:36.120
The last thing, I mean, you only get one shot


00:29:36.120 --> 00:29:38.640
for your app to work when that Super Bowl ad runs


00:29:38.640 --> 00:29:40.000
or on that Black Friday event.


00:29:40.000 --> 00:29:42.880
if it just goes down for that little bit of time,


00:29:42.880 --> 00:29:44.680
it's not like, well, we got it up, it's fine now.


00:29:44.680 --> 00:29:47.520
You've lost that moment and that million dollar spend


00:29:47.520 --> 00:29:48.880
or whatever the heck it turns out to be.


00:29:48.880 --> 00:29:51.900
So it's like those moments where the spike is unknown,


00:29:51.900 --> 00:29:55.360
but also the time which you get to deal with it is short.


00:29:55.360 --> 00:29:58.080
- Yeah, or things like, yeah, I'm pretty sure


00:29:58.080 --> 00:30:02.000
that the healthcare marketplace website's ready.


00:30:02.000 --> 00:30:03.720
- It's fine, yeah, sure, Mr. President.


00:30:03.720 --> 00:30:04.800
This is gonna be fine.


00:30:04.800 --> 00:30:07.800
It won't be like blemish your record for all of history.


00:30:07.800 --> 00:30:09.260
All right, speaking of things


00:30:09.260 --> 00:30:14.060
I'm sure are going to be fine. Hacktoberfest was such a, it's a good idea in theory, potentially.


00:30:14.060 --> 00:30:18.060
We're like in the middle of October or deep into October already.


00:30:18.060 --> 00:30:21.260
I don't know how your repos did, but I got a lot of attention.


00:30:21.260 --> 00:30:24.620
Did you? Yeah, no, mine didn't so much.


00:30:24.620 --> 00:30:27.180
I'll tell you about that, but go ahead and tell people where we're going with this.


00:30:27.180 --> 00:30:30.940
Okay, so Hacktoberfest, hopefully you know about it, but if you don't,


00:30:30.940 --> 00:30:34.540
it's an interesting idea sponsored by DigitalOcean and other sponsors.


00:30:34.540 --> 00:30:37.420
Again, DigitalOcean not sponsoring this episode.


00:30:37.420 --> 00:30:46.420
Overall, it's a good idea. So the idea is to encourage people to contribute to open source by bribing them with a t-shirt and other swag that works for geeks. We love our t-shirts.


00:30:46.420 --> 00:30:50.220
Like, how else are you going to be like wearing your clothes? What do you put in your closet?


00:30:50.220 --> 00:30:58.120
Yeah, maybe maybe you can buy a t-shirt with a half an hour of work, but we're gonna like have you work for like hours and just get one t-shirt.


00:30:58.120 --> 00:31:05.220
Anyway, there's always been some spam with this people abusing it, but I think it was not as prevalent as this year.


00:31:05.220 --> 00:31:11.340
But what happened this year and I'm gonna link to a video by Anthony Sotile


00:31:11.340 --> 00:31:13.780
Titled what's wrong with hacktoberfest?


00:31:13.780 --> 00:31:19.980
He introduces what hacktoberfest is some of the problems and he recommended some solutions


00:31:19.980 --> 00:31:25.860
We're not going to cover those today, but apparently there was a youtuber this year. I think it was in India that


00:31:25.860 --> 00:31:34.100
Did a video on how to get a free t-shirt by doing like it's basically how to get free t-free swag with not much work


00:31:34.100 --> 00:31:41.420
And he did this video to show you how to submit a pull request to a project and only do something


00:31:41.420 --> 00:31:48.060
like update the readme to say an awesome project or change its with it is or something like


00:31:48.060 --> 00:31:49.060
that.


00:31:49.060 --> 00:31:54.740
And then do a pull request saying document or improve docs and do that for four different


00:31:54.740 --> 00:31:56.580
repos and there you got a t-shirt.


00:31:56.580 --> 00:31:59.700
I met many of these people.


00:31:59.700 --> 00:32:01.260
It turned into a big problem.


00:32:01.260 --> 00:32:07.980
So I was actually really thrilled with how fast DigitalOcean and whoever's working on


00:32:07.980 --> 00:32:09.980
Hacktoberfest fixed it.


00:32:09.980 --> 00:32:13.620
Or at least hopefully, I'm sure people are still trying to do this, so I'm sure there's


00:32:13.620 --> 00:32:15.380
a lot of spam going on.


00:32:15.380 --> 00:32:16.480
But they changed the rules.


00:32:16.480 --> 00:32:22.220
So as of the 3rd, they updated the rules to try to reduce the spam.


00:32:22.220 --> 00:32:28.620
One of the big things is maintainers can opt in by adding a Hacktoberfest topic to their


00:32:28.620 --> 00:32:29.620
repo.


00:32:29.620 --> 00:32:32.860
a whole bunch of stale old repos won't get hit, hopefully.


00:32:32.860 --> 00:32:36.160
And then also you can mark any PR that's dumb


00:32:36.160 --> 00:32:39.020
as invalid and it invalidates stuff.


00:32:39.020 --> 00:32:41.020
And actually the full rules is,


00:32:41.020 --> 00:32:44.980
let's see, we're going to have it in the show notes, it's a little


00:32:44.980 --> 00:32:46.120
pseudo code.


00:32:46.120 --> 00:32:49.320
So if you submit a PR in the month of October


00:32:49.320 --> 00:32:51.320
and the PR is labeled


00:32:51.320 --> 00:32:53.960
as hacked overfest accepted


00:32:53.960 --> 00:32:55.960
by the maintainer, or


00:32:55.960 --> 00:32:59.520
you submitted it to a repo with a hacked overfest topic


00:32:59.520 --> 00:33:03.280
and the pull request was merged or it was approved.


00:33:03.280 --> 00:33:06.320
So you can't just submit it and get your t-shirt.


00:33:06.320 --> 00:33:08.920
It has to be like some maintainer has to say,


00:33:08.920 --> 00:33:11.660
"Yeah, this is good," or "I approve it," or whatever.


00:33:11.660 --> 00:33:13.880
It's not automatic anymore.


00:33:13.880 --> 00:33:18.720
Also, if you are a maintainer and you've dealt with all the spam, sorry about that.


00:33:18.720 --> 00:33:22.280
But also I'd like to encourage more people to do


00:33:22.280 --> 00:33:24.200
Hacktoberfest because it's a cool thing.


00:33:24.200 --> 00:33:27.520
I didn't want to bring it up before because I didn't want to encourage spam,


00:33:27.520 --> 00:33:30.160
but I think these changes will help.


00:33:30.160 --> 00:33:31.440
And if you're a maintainer,


00:33:31.440 --> 00:33:35.040
please be sure to do those notifications by November 1st


00:33:35.040 --> 00:33:37.160
because that's the deadline.


00:33:37.160 --> 00:33:38.000
- Yeah, interesting.


00:33:38.000 --> 00:33:39.920
I had no idea what was going on


00:33:39.920 --> 00:33:44.920
until I saw Anthony Petilli's post or Twitter message.


00:33:44.920 --> 00:33:47.360
You know, somebody came over to some of the,


00:33:47.360 --> 00:33:49.820
I have 222 repositories,


00:33:49.820 --> 00:33:52.080
most of which are public between the courses


00:33:52.080 --> 00:33:53.400
and various other things.


00:33:53.400 --> 00:33:55.400
So there's a bunch of opportunity


00:33:55.400 --> 00:33:57.480
to go in and make changes, right?


00:33:57.480 --> 00:34:00.560
So somebody came along to the beginner,


00:34:00.560 --> 00:34:02.120
the Python for Absolute Beginners course


00:34:02.120 --> 00:34:03.960
and said, "I would like to add a few little tips


00:34:03.960 --> 00:34:06.440
"for some beginners to make this slightly better."


00:34:06.440 --> 00:34:07.640
You know, we can't change anything


00:34:07.640 --> 00:34:09.280
'cause it needs to match what's in the video,


00:34:09.280 --> 00:34:11.760
but if you had a little section that had like some tips


00:34:11.760 --> 00:34:14.840
and they were meaningful, sure, I guess that's okay.


00:34:14.840 --> 00:34:17.440
And then the next day I woke up and it was like 10 PRs,


00:34:17.440 --> 00:34:18.560
not necessarily from this person,


00:34:18.560 --> 00:34:20.400
but from a bunch of different people


00:34:20.400 --> 00:34:23.160
with weird things like, "Change the readme from this,


00:34:23.160 --> 00:34:25.360
"you know, check out our latest course


00:34:25.360 --> 00:34:27.080
"to check out the latest course."


00:34:27.080 --> 00:34:29.720
and just changing the word hour to the,


00:34:29.720 --> 00:34:31.800
and I'm like, what is going on?


00:34:31.800 --> 00:34:33.120
Then I saw Anthony's thing, and I'm like,


00:34:33.120 --> 00:34:35.920
okay, close, close, close, close, close, close, close.


00:34:35.920 --> 00:34:38.480
Just straight out, I don't even want to talk to these people.


00:34:38.480 --> 00:34:40.040
This is super annoying.


00:34:40.040 --> 00:34:42.100
And they weren't just making changes to the readme.


00:34:42.100 --> 00:34:43.600
They would go in and they would make changes


00:34:43.600 --> 00:34:46.820
to XML configuration documents.


00:34:46.820 --> 00:34:47.980
I'm like, you can't change that.


00:34:47.980 --> 00:34:50.360
That's read by the machine, right?


00:34:50.360 --> 00:34:52.140
That's gonna break something if I accept this.


00:34:52.140 --> 00:34:54.160
Not only is it annoying that I gotta deal with it,


00:34:54.160 --> 00:34:56.580
but if I were to accept that, I'm pretty sure it would break.


00:34:56.580 --> 00:35:03.740
I think maybe it was like formatting, like putting a node, closing node bit, like on a line above, or like putting a space.


00:35:03.740 --> 00:35:06.420
I mean, I don't think it actually broke it, but it was really weird stuff.


00:35:06.420 --> 00:35:08.660
And I didn't understand it was coming from Hacktoberfest.


00:35:08.660 --> 00:35:11.100
I was being hacked by the Hacktoberfesters.


00:35:11.100 --> 00:35:13.460
Yeah.


00:35:13.460 --> 00:35:16.100
But it has stopped since they made these changes, which is great.


00:35:16.100 --> 00:35:16.860
Oh, has it stopped?


00:35:16.860 --> 00:35:18.820
So most of that stuff was in the first few days?


00:35:18.820 --> 00:35:20.260
Yeah, I haven't seen it in the last couple of days.


00:35:20.260 --> 00:35:20.940
I didn't realize.


00:35:20.940 --> 00:35:22.260
That's probably because the rules changed.


00:35:22.260 --> 00:35:25.540
I just went through and like just denied everything that I saw coming in.


00:35:25.540 --> 00:35:30.100
Yeah. I wonder if they forced the takedown of that video. Maybe it's gone.


00:35:30.100 --> 00:35:32.340
Yeah. Who knows?


00:35:32.340 --> 00:35:38.140
Well, I know that that's it for all of our main topics. Got anything else you want to throw out real quick before we wrap it up with a joke?


00:35:38.140 --> 00:35:41.440
I don't. I could totally use a joke. But do you have any extra things?


00:35:41.440 --> 00:35:51.740
I do. There's a really cool conference. It's, I believe, theoretically was supposed to be this year in Vancouver, BC, which is an absolutely wonderful town to visit,


00:35:51.740 --> 00:35:55.240
called Pi Cascades, cycles between Vancouver,


00:35:55.240 --> 00:35:56.620
Seattle and Portland.


00:35:56.620 --> 00:35:58.300
Well, this year it's taken a diversion


00:35:58.300 --> 00:36:01.840
to cycle to the internet because 2020,


00:36:01.840 --> 00:36:04.860
although it's in 2021, like still planning now.


00:36:04.860 --> 00:36:08.380
So Pi Cascades 2021 will take place Saturday,


00:36:08.380 --> 00:36:11.360
February 20th from the world.


00:36:11.360 --> 00:36:14.000
I don't know if they're having any local stuff going on,


00:36:14.000 --> 00:36:16.920
but anyway, it's basically a virtual conference


00:36:16.920 --> 00:36:19.140
and the call for proposals is open.


00:36:19.140 --> 00:36:21.580
So if you'd like to give a presentation there,


00:36:21.580 --> 00:36:23.580
you can do that by November 10th.


00:36:23.580 --> 00:36:25.180
Submit proposals.


00:36:25.180 --> 00:36:26.140
So that would be cool.


00:36:26.140 --> 00:36:32.680
You know, I think talking at get togethers like this meetups, the smaller, not, you


00:36:32.680 --> 00:36:36.300
know, full blown PyCon, but PI cascades and other types of events are really good


00:36:36.300 --> 00:36:39.720
way to sort of raise your profile and stretch your, your comfort zone as a


00:36:39.720 --> 00:36:40.220
developer.


00:36:40.220 --> 00:36:41.660
So I encourage people to do it.


00:36:41.660 --> 00:36:46.740
Also, Patricia, I spoke at, at the 2020 version that was just


00:36:46.740 --> 00:36:48.140
before the world fell apart.


00:36:48.140 --> 00:36:49.020
That's right.


00:36:49.020 --> 00:36:49.660
I was there.


00:36:49.940 --> 00:36:54.740
My daughter and I watched from the back. It was great. Next thing, other thing, Patricio Reins,


00:36:54.740 --> 00:36:59.620
who is a researcher at the Barcelona Supercomputing Center, which by the way,


00:36:59.620 --> 00:37:04.340
they have this virtual tour he sent me. Oh my God, it is so awesome. They have like a pop song


00:37:04.340 --> 00:37:11.780
for it. It is held inside, is the super, literally the supercomputer is inside an old cathedral.


00:37:11.780 --> 00:37:16.420
So like where, you know, where all the arches are and where the sermons would have been given,


00:37:16.420 --> 00:37:18.820
like that's where the supercomputer is. That's pretty awesome.


00:37:18.820 --> 00:37:20.940
- Can we put that link in the show notes too?


00:37:20.940 --> 00:37:22.500
- Yeah, yeah, yeah, I'll put it in there.


00:37:22.500 --> 00:37:23.940
But that's not why he sent it to me.


00:37:23.940 --> 00:37:25.620
He just said, "Hey, I happen to work here


00:37:25.620 --> 00:37:27.500
"and I use Jupyter a lot.


00:37:27.500 --> 00:37:30.400
"You spoke about Blackcell Magic


00:37:30.400 --> 00:37:33.620
"and then another black formatter plugin


00:37:33.620 --> 00:37:34.980
"for Jupyter notebooks."


00:37:34.980 --> 00:37:38.040
So he said, "You should also check out nb_black,


00:37:38.040 --> 00:37:41.740
"which works in Jupyter and JupyterLab.


00:37:41.740 --> 00:37:43.800
"And there's another one that only works in JupyterLab


00:37:43.800 --> 00:37:46.600
"called the JupyterLab Code Formatter."


00:37:46.600 --> 00:37:49.400
So just like always, we mention one thing


00:37:49.400 --> 00:37:51.960
that we kind of discover, and then listeners are like,


00:37:51.960 --> 00:37:53.280
that's great, and, and, and,


00:37:53.280 --> 00:37:54.360
here's a bunch of other stuff.


00:37:54.360 --> 00:37:55.880
So thank you for that, Patricio.


00:37:55.880 --> 00:37:56.960
- Yeah, nice.


00:37:56.960 --> 00:37:57.800
But I love that.


00:37:57.800 --> 00:37:59.160
I like the multiple tool thing.


00:37:59.160 --> 00:37:59.980
That's fine.


00:37:59.980 --> 00:38:00.820
- Yeah, indeed.


00:38:00.820 --> 00:38:01.640
All right, let's do a joke.


00:38:01.640 --> 00:38:02.800
I've chosen some very clear ones


00:38:02.800 --> 00:38:04.960
that actually have a visual component, as you know.


00:38:04.960 --> 00:38:07.280
I don't know why I do that, but that's what I've done.


00:38:07.280 --> 00:38:10.600
So why don't you, I'll let you do the first one.


00:38:10.600 --> 00:38:12.160
I'll do the second one.


00:38:12.160 --> 00:38:13.960
So the way, people who don't know,


00:38:13.960 --> 00:38:16.900
This is a classical programmer painting.


00:38:16.900 --> 00:38:20.260
And the idea is this is a legitimate real painting


00:38:20.260 --> 00:38:22.620
from some museum.


00:38:22.620 --> 00:38:25.260
Typically they're hundreds of years old,


00:38:25.260 --> 00:38:27.400
but there's, instead of having, you know,


00:38:27.400 --> 00:38:32.400
like flowers in the tide pools or whatever,


00:38:32.400 --> 00:38:35.300
some random thing that the artist named it,


00:38:35.300 --> 00:38:39.260
it's renamed with a programming title.


00:38:39.260 --> 00:38:40.100
Okay?


00:38:40.100 --> 00:38:40.940
- Yeah.


00:38:40.940 --> 00:38:43.160
- So why don't you quickly describe your picture


00:38:43.160 --> 00:38:44.960
and then tell us the title.


00:38:44.960 --> 00:38:48.240
- Okay, so the picture is,


00:38:48.240 --> 00:38:50.760
it's a white, kind of a white-gray background.


00:38:50.760 --> 00:38:52.920
I think it's snow or something.


00:38:52.920 --> 00:38:53.760
There's some horses running.


00:38:53.760 --> 00:38:54.960
- There's a white-out blizzard almost.


00:38:54.960 --> 00:38:55.800
Yeah, it's horrible.


00:38:55.800 --> 00:38:56.620
- Yeah.


00:38:56.620 --> 00:38:57.680
And there's some horses running,


00:38:57.680 --> 00:39:00.560
two horses running, pulling a,


00:39:00.560 --> 00:39:02.480
what, like a sled or something?


00:39:02.480 --> 00:39:04.080
I don't know, and there's somebody laying on the sled.


00:39:04.080 --> 00:39:04.920
- All right, what's the title?


00:39:04.920 --> 00:39:07.760
- Delivering a Feature in the Time of a Code Freeze.


00:39:07.760 --> 00:39:09.080
(laughing)


00:39:09.080 --> 00:39:13.520
This is by Anthony Petrowski, Oil & Wood, 1883.


00:39:13.520 --> 00:39:14.800
- Yeah, it's beautiful.


00:39:14.800 --> 00:39:17.540
- All right, so the one that I got here,


00:39:17.540 --> 00:39:22.540
it's these three guys, they look highly skeptical,


00:39:22.540 --> 00:39:24.920
almost like they're on some kind of mission,


00:39:24.920 --> 00:39:28.540
sneaking out of really tall grass on a boat


00:39:28.540 --> 00:39:29.880
in some kind of swamp.


00:39:29.880 --> 00:39:33.000
You can see them really slowly sort of approaching.


00:39:33.000 --> 00:39:36.720
And the title is Red Hat Enterprise Linux Sys Admins


00:39:36.720 --> 00:39:38.680
Entering the Docker Convention Floor.


00:39:38.680 --> 00:39:40.300
Oil on Canvas, 1882.


00:39:40.300 --> 00:39:41.760
(laughing)


00:39:41.760 --> 00:39:42.600
Isn't that a great one?


00:39:42.600 --> 00:39:43.880
Like, look at their face.


00:39:43.880 --> 00:39:44.800
- Yeah.


00:39:44.800 --> 00:39:46.040
- People gotta check this out.


00:39:46.040 --> 00:39:48.400
Click on the link in your podcast player and see it.


00:39:48.400 --> 00:39:50.280
- They're like angry pirates in a canoe.


00:39:50.280 --> 00:39:52.240
- Yeah, it's sort of a piratey feel to it.


00:39:52.240 --> 00:39:53.640
Like, they're like, "Oh, what are we doing here?


00:39:53.640 --> 00:39:54.660
"We're breaking in.


00:39:54.660 --> 00:39:57.320
"It's such a weird world, this Docker and Kubernetes."


00:39:57.320 --> 00:40:02.320
- I love this thing of like programmer quotes on paintings.


00:40:02.320 --> 00:40:03.640
It's funny.


00:40:03.640 --> 00:40:07.600
- Yeah, if there's ever some sort of like artwork exhibition


00:40:07.600 --> 00:40:09.600
at a PyCon, this is happening.


00:40:09.600 --> 00:40:11.600
(laughing)


00:40:11.600 --> 00:40:13.600
- We could probably do it virtually somehow,


00:40:13.600 --> 00:40:15.600
try to do it at a virtual conference.


00:40:15.600 --> 00:40:17.600
- Yes, I think we could.


00:40:17.600 --> 00:40:19.600
- Yep. - Yep. Alright, well, thanks for being here as always,


00:40:19.600 --> 00:40:21.600
and thank you everyone out there who's listening.


00:40:21.600 --> 00:40:23.600
- Thank you. - Yep, bye-bye. - Bye.


00:40:23.600 --> 00:40:25.600
- Thank you for listening to Python Bytes.


00:40:25.600 --> 00:40:27.600
Follow the show on Twitter via @pythonbytes,


00:40:27.600 --> 00:40:29.600
that's Python Bytes as in B-Y-T-E-S.


00:40:29.600 --> 00:40:31.600
And get the full show notes at pythonbytes.fm.


00:40:31.600 --> 00:40:33.600
If you have a news item you want featured,


00:40:33.600 --> 00:40:35.600
just visit pythonbytes.fm and send it our way.


00:40:35.600 --> 00:40:38.800
We're always on the lookout for sharing something cool.


00:40:38.800 --> 00:40:41.840
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:40:41.840 --> 00:40:45.120
Thank you for listening and sharing this podcast with your friends and colleagues.

