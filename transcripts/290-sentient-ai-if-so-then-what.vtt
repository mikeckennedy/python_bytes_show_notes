
00:00:00.000 --> 00:00:02.400
- Hello and welcome to Python Bytes


00:00:02.400 --> 00:00:04.120
where we deliver Python news and headlines


00:00:04.120 --> 00:00:05.840
directly to your earbuds.


00:00:05.840 --> 00:00:10.720
This is episode 290, recorded June 28th, 2022.


00:00:10.720 --> 00:00:11.880
I'm Michael Kennedy.


00:00:11.880 --> 00:00:13.160
- And I am Brian Okken.


00:00:13.160 --> 00:00:14.400
- And I'm Nick Moore.


00:00:14.400 --> 00:00:16.400
- Nick, it's so great to have you back.


00:00:16.400 --> 00:00:17.280
Thanks for being here.


00:00:17.280 --> 00:00:19.160
- Thank you for having me.


00:00:19.160 --> 00:00:20.120
Super excited to be back.


00:00:20.120 --> 00:00:22.740
- Yeah, yeah, it's like I said, great to have you back.


00:00:22.740 --> 00:00:25.440
You always send us really fun topics and say,


00:00:25.440 --> 00:00:27.000
hey, you should think about covering this


00:00:27.000 --> 00:00:28.400
and covering that and so on.


00:00:28.400 --> 00:00:29.600
We really appreciate that.


00:00:29.600 --> 00:00:33.120
But sometimes it's better if we could just have you to tell here to tell people about it.


00:00:33.120 --> 00:00:36.080
We actually had you on episode 239.


00:00:36.080 --> 00:00:41.160
You talked about Jupyter Light in my pie and that was fun, but that was also over a year ago.


00:00:41.160 --> 00:00:42.060
Yeah.


00:00:42.060 --> 00:00:42.940
Yeah.


00:00:42.940 --> 00:00:43.580
Wow.


00:00:43.580 --> 00:00:44.640
Yeah, of course.


00:00:44.640 --> 00:00:47.960
Anyway, it takes the community to build this great podcast.


00:00:47.960 --> 00:00:49.280
So I'm glad to be part of it.


00:00:49.280 --> 00:00:50.040
Yeah. Thanks.


00:00:50.040 --> 00:00:51.200
What have you been up to in the last year?


00:00:51.200 --> 00:00:52.960
Been doing a lot of traveling.


00:00:52.960 --> 00:00:58.800
Thankfully, since now COVID is less more of an issue, got to go to PyCon.


00:00:59.080 --> 00:01:01.080
So I got the PyCon shirt right here.


00:01:01.080 --> 00:01:02.080
Nice.


00:01:02.080 --> 00:01:04.080
Yeah, yeah. Did you enjoy your time there?


00:01:04.080 --> 00:01:06.880
It was amazing. Loved it. Completely loved it.


00:01:06.880 --> 00:01:10.680
I kept on telling everybody it was my geek holiday, like you always say.


00:01:10.680 --> 00:01:13.280
And, you know, we're like, yeah, it is our geek holiday.


00:01:13.280 --> 00:01:14.280
So it was awesome.


00:01:14.280 --> 00:01:15.880
It totally is, yeah.


00:01:15.880 --> 00:01:19.080
It was awesome. I'm really glad that you got to go and you had a good time.


00:01:19.080 --> 00:01:20.680
So super cool.


00:01:20.680 --> 00:01:24.880
Brian, you want to kick us off, but let's just start small this time, okay?


00:01:24.880 --> 00:01:29.480
>> Really small, like nano or maybe Pico.


00:01:29.480 --> 00:01:30.680
>> No, Pico.


00:01:30.680 --> 00:01:32.080
>> We'll do Pico.


00:01:32.080 --> 00:01:33.080
>> Do Pico.


00:01:33.080 --> 00:01:34.800
>> Pico logging is a,


00:01:34.800 --> 00:01:36.920
so I was Anthony Shaw,


00:01:36.920 --> 00:01:41.000
friend of the show and all around workaholic apparently,


00:01:41.000 --> 00:01:42.720
as far as I can tell,


00:01:42.720 --> 00:01:46.080
blogged out that there's a blog.


00:01:46.080 --> 00:01:50.560
He sent out on Twitter something about Pico logging.


00:01:50.560 --> 00:01:53.320
There was a tweet that says, "Pico logging uses


00:01:53.320 --> 00:01:56.320
a modern extension module tool chain


00:01:56.320 --> 00:01:58.480
with a scikit build and CMake.


00:01:58.480 --> 00:02:00.360
So I was interested in,


00:02:00.360 --> 00:02:02.440
I haven't looked into the tool chain yet.


00:02:02.440 --> 00:02:06.080
I'm just looking at PicoLogging because it's cool.


00:02:06.080 --> 00:02:07.120
I was taking a look at it.


00:02:07.120 --> 00:02:12.120
So PicoLogging is a fairly new library


00:02:12.120 --> 00:02:17.600
that is, and Anthony says it's in early alpha stage.


00:02:17.600 --> 00:02:19.460
There's some incomplete features,


00:02:19.460 --> 00:02:21.720
but I'm ready to use it right now


00:02:21.720 --> 00:02:25.180
because it says, it just is a drop,


00:02:25.180 --> 00:02:28.820
essentially a drop in for the built-in logging module,


00:02:28.820 --> 00:02:31.080
but it's four to 10 times faster.


00:02:31.080 --> 00:02:33.020
Why wouldn't you want faster?


00:02:33.020 --> 00:02:35.580
So, and logging is pretty fast to begin with.


00:02:35.580 --> 00:02:37.640
So that's pretty cool.


00:02:37.640 --> 00:02:39.780
So let's take a look at it.


00:02:39.780 --> 00:02:44.020
The usage is basically just say import PicoLogging as logging


00:02:44.020 --> 00:02:48.420
and now you've got just like your normal logging.


00:02:48.420 --> 00:02:49.860
You set up a basic config


00:02:49.860 --> 00:02:54.020
and you can write info and warnings and that's about it.


00:02:54.020 --> 00:02:55.540
There's, you know, why not?


00:02:55.540 --> 00:02:57.100
So let's take a look at it.


00:02:57.100 --> 00:02:58.140
It says it's faster.


00:02:58.140 --> 00:03:00.920
So the benchmarks are all cut off.


00:03:00.920 --> 00:03:03.500
So I'm gonna make the screen a little bit.


00:03:03.500 --> 00:03:05.100
Yeah, there we go.


00:03:05.100 --> 00:03:07.140
They're a little bit hard to read,


00:03:07.140 --> 00:03:10.260
but what this means is the, on the left,


00:03:10.260 --> 00:03:13.760
I believe it's the time for the normal logging


00:03:13.760 --> 00:03:18.760
and then how much faster the faster one is.


00:03:19.580 --> 00:03:21.540
I haven't dug into the logging stuff,


00:03:21.540 --> 00:03:25.860
but basically for different parts of it or the benchmark stuff too much.


00:03:25.860 --> 00:03:28.100
But yeah, for different parts of it,


00:03:28.100 --> 00:03:29.700
you can see how much faster it is.


00:03:29.700 --> 00:03:32.060
So anyway, why not?


00:03:32.060 --> 00:03:37.060
I was taking, yeah, I'm just going to start using it.


00:03:37.060 --> 00:03:38.980
>> Sure, why not?


00:03:38.980 --> 00:03:41.460
One of the things that I think is interesting is,


00:03:41.460 --> 00:03:44.160
obviously, not specific to this situation.


00:03:44.160 --> 00:03:48.900
But as I think about some of the patterns that people use all over the place,


00:03:48.900 --> 00:03:54.180
different languages and technologies and so on that don't necessarily make their way over to Python.


00:03:54.180 --> 00:04:01.220
For example, maybe like dependency injection and IOC containers and all of that. And I know that


00:04:01.220 --> 00:04:06.660
it does appear in certain places in like limited ways, but nothing like C# and Java, like those


00:04:06.660 --> 00:04:12.740
are all about dependency injection. That thing where you say, where they say from Pico logging


00:04:12.740 --> 00:04:16.040
import or import Pico logging as logging.


00:04:16.040 --> 00:04:16.420
>> Yeah.


00:04:16.420 --> 00:04:19.740
>> Right? That's a really nice way to just say,


00:04:19.740 --> 00:04:23.540
right now I want to use this implementation of logging versus


00:04:23.540 --> 00:04:27.180
another without going through all the hoops and stuff.


00:04:27.180 --> 00:04:30.180
I'm just thinking that one line right there


00:04:30.180 --> 00:04:33.420
is why we don't see a lot of that complexity.


00:04:33.420 --> 00:04:35.020
I never really tie that together,


00:04:35.020 --> 00:04:36.220
but it's neat, right?


00:04:36.220 --> 00:04:39.060
>> Yeah. Essentially, that's dependency injection,


00:04:39.060 --> 00:04:41.540
but we don't call it that.


00:04:41.540 --> 00:04:42.940
- Interesting.


00:04:42.940 --> 00:04:44.500
- Don't have to have all the complexity


00:04:44.500 --> 00:04:49.140
and config and register who's doing what and so on.


00:04:49.140 --> 00:04:49.980
- No, I--


00:04:49.980 --> 00:04:50.860
- Nick, what do you think about this?


00:04:50.860 --> 00:04:52.140
Sorry, Brian, didn't mean to cut you off.


00:04:52.140 --> 00:04:53.700
- No, it's okay, Nick.


00:04:53.700 --> 00:04:54.540
- Oh, yeah.


00:04:54.540 --> 00:04:59.220
I saw this tweet and I found it really interesting.


00:04:59.220 --> 00:05:01.620
Well, to your point, Michael,


00:05:01.620 --> 00:05:04.660
dependency injection is not really popular on Python,


00:05:04.660 --> 00:05:07.580
but the library, I think that the most popular library


00:05:07.580 --> 00:05:10.900
that I can think of that uses it is pytest, right?


00:05:10.900 --> 00:05:14.340
with the fixtures, right?


00:05:14.340 --> 00:05:16.440
- Yeah, and the way they do it so seamless,


00:05:16.440 --> 00:05:17.280
but you're right,


00:05:17.280 --> 00:05:20.100
Deepin is just something that we don't commonly have


00:05:20.100 --> 00:05:22.600
in Python because Python is dynamic enough


00:05:22.600 --> 00:05:24.820
that you don't really need it.


00:05:24.820 --> 00:05:26.320
One thing I would say is that,


00:05:26.320 --> 00:05:30.420
even though I love the performance benchmarks,


00:05:30.420 --> 00:05:35.420
I feel like the change that Anthony is going for


00:05:35.420 --> 00:05:39.500
with the performance would warrant a new API


00:05:39.500 --> 00:05:43.800
for like a new API for logging, I feel like it warrants it.


00:05:43.800 --> 00:05:46.620
So I would like to see him like,


00:05:46.620 --> 00:05:48.680
maybe change the way we configure.


00:05:48.680 --> 00:05:51.620
Look, not only I can prove logging speeds,


00:05:51.620 --> 00:05:53.900
we'll also change the way we configure it too.


00:05:53.900 --> 00:05:56.200
'Cause like the current standard lib logger


00:05:56.200 --> 00:05:59.100
is kind of cumbersome to configure.


00:05:59.100 --> 00:06:01.020
- Yeah, I agree.


00:06:01.020 --> 00:06:02.680
- Yeah, the basic config that you have to,


00:06:02.680 --> 00:06:05.140
that usually the normal use case like he's showing here


00:06:05.140 --> 00:06:07.380
is that, why do I have to call that


00:06:07.380 --> 00:06:09.460
if I'm calling it all the time?


00:06:09.460 --> 00:06:12.940
- One of the things that I forgot to point out


00:06:12.940 --> 00:06:16.380
is Anthony does list the limitations.


00:06:16.380 --> 00:06:18.620
And so there's a limitations page.


00:06:18.620 --> 00:06:20.540
And if you find more, maybe.


00:06:20.540 --> 00:06:23.040
So these are reasons why you probably won't wanna use it


00:06:23.040 --> 00:06:24.300
if you're taking advantage of this.


00:06:24.300 --> 00:06:28.300
So for instance, it doesn't observe threads


00:06:28.300 --> 00:06:31.500
or multiprocessing or log process globals.


00:06:31.500 --> 00:06:35.180
So if you're utilizing those, this isn't for you.


00:06:35.180 --> 00:06:37.220
It's actually kind of unfortunate


00:06:37.220 --> 00:06:41.360
because that's where logging really helps you a lot,


00:06:41.360 --> 00:06:44.420
is when you're trying to pull those sorts of things apart.


00:06:44.420 --> 00:06:52.960
>> Is the Pico indicative of it being fast or is also very small?


00:06:52.960 --> 00:06:55.840
>> Probably both.


00:06:55.840 --> 00:06:58.480
I think it's referring to fast,


00:06:58.480 --> 00:07:02.080
but there's really just not that much here.


00:07:02.080 --> 00:07:06.320
It looks like it's CXX and HXX.


00:07:06.320 --> 00:07:09.360
>> Cython or something going on there maybe.


00:07:09.360 --> 00:07:10.480
>> Take a look.


00:07:10.480 --> 00:07:11.920
>> That might be part of the speed bit.


00:07:11.920 --> 00:07:14.080
>> Probably, we'll take a look at this more.


00:07:14.080 --> 00:07:16.240
Yeah, I haven't dug into the source code too much.


00:07:16.240 --> 00:07:17.240
Interesting. Yeah.


00:07:17.240 --> 00:07:19.680
>> Yeah. Brian, the audience asks,


00:07:19.680 --> 00:07:22.600
any idea whether this would replace


00:07:22.600 --> 00:07:26.640
loggers in other libraries such as Sphinx or something?


00:07:26.640 --> 00:07:29.760
I feel like you could monkey patch it out,


00:07:29.760 --> 00:07:31.520
not do the dependency injection thing,


00:07:31.520 --> 00:07:32.760
but you could just say,


00:07:32.760 --> 00:07:36.120
or rewrite the logging a little bit.


00:07:36.120 --> 00:07:38.200
That's obviously like maybe a less good idea,


00:07:38.200 --> 00:07:40.840
but it probably would work given it's a compatible API.


00:07:40.840 --> 00:07:44.620
>> Yeah, you probably could monkey patch it in. Why not?


00:07:44.620 --> 00:07:47.600
>> You can do anything in software.


00:07:47.600 --> 00:07:51.720
>> That doesn't mean you should, but you might be able to.


00:07:51.720 --> 00:07:54.320
>> Yeah. All right. Let's go to the next one.


00:07:54.320 --> 00:07:55.760
>> Speaking of things, yeah.


00:07:55.760 --> 00:07:57.240
Well, speaking of things, I'm not sure you


00:07:57.240 --> 00:07:59.560
should just because you can, but it's pretty interesting.


00:07:59.560 --> 00:08:01.520
Let's talk about Cheeky Keys.


00:08:01.520 --> 00:08:03.800
This one comes to us from Preston Daniel,


00:08:03.800 --> 00:08:06.040
Also someone who sends us a bunch of good ideas.


00:08:06.040 --> 00:08:07.160
So thank you to that.


00:08:07.160 --> 00:08:08.600
Have you either, have you seen this one?


00:08:08.600 --> 00:08:09.440
- No.


00:08:09.440 --> 00:08:10.280
- No.


00:08:10.280 --> 00:08:13.000
- It's a project that uses Python


00:08:13.000 --> 00:08:15.320
and then with Python to use OpenCV


00:08:15.320 --> 00:08:18.320
and then MediaPipe to control a keyboard


00:08:18.320 --> 00:08:23.000
with facial gestures, like raising an eyebrow


00:08:23.000 --> 00:08:26.120
or blinking or opening your mouth and stuff like that.


00:08:26.120 --> 00:08:30.040
So imagine you wanted to type or operate a keyboard


00:08:30.040 --> 00:08:33.120
but you couldn't use speech or your hands, okay?


00:08:33.120 --> 00:08:33.960
- Oh, okay, okay.


00:08:33.960 --> 00:08:35.080
- So, yeah.


00:08:35.080 --> 00:08:38.520
So for some reason you can't type, but you know,


00:08:38.520 --> 00:08:39.360
I don't know.


00:08:39.360 --> 00:08:40.960
There's different reasons.


00:08:40.960 --> 00:08:43.920
The guy's reasons here, maybe who put this together,


00:08:43.920 --> 00:08:47.080
it's not in the pictures, it's just over the top.


00:08:47.080 --> 00:08:51.360
The reasons that you might do are probably not as common.


00:08:51.360 --> 00:08:53.240
The reasons he did are not as common as you might,


00:08:53.240 --> 00:08:54.400
for example, his little baby,


00:08:54.400 --> 00:08:56.760
and he wanted to just be able to control his keyboard


00:08:56.760 --> 00:08:59.360
without, his computer while holding his baby


00:08:59.360 --> 00:09:01.720
without speaking 'cause the baby was sleeping.


00:09:01.720 --> 00:09:04.720
So, but if you go to the website there,


00:09:04.720 --> 00:09:07.840
it has some really good examples.


00:09:07.840 --> 00:09:11.920
So sitting here typing and controlling the keyboard,


00:09:11.920 --> 00:09:15.800
basically for the letters, it's Morse code with the mouth.


00:09:15.800 --> 00:09:18.540
So you open the mouth either for a long period of time


00:09:18.540 --> 00:09:21.140
or a shorter period of time, right?


00:09:21.140 --> 00:09:23.140
And that's kind of interesting,


00:09:23.140 --> 00:09:24.320
but what I think is more interesting


00:09:24.320 --> 00:09:26.600
is you would learn about how to use OpenCV


00:09:26.600 --> 00:09:30.800
and how to use MediaPipe's face mesh,


00:09:30.800 --> 00:09:33.700
provide real-time detection of things like mouth,


00:09:33.700 --> 00:09:36.140
chin, eyes, eyebrows, and so on.


00:09:36.140 --> 00:09:37.780
And then you can say, well,


00:09:37.780 --> 00:09:41.540
if the eyebrow moves away from the left eye,


00:09:41.540 --> 00:09:44.180
that means, you know, this character or so on.


00:09:44.180 --> 00:09:46.260
So like I said, it's mostly Morse code,


00:09:46.260 --> 00:09:47.900
but then there's a bunch of other things.


00:09:47.900 --> 00:09:51.220
Like if you want to do a shift, you close the right eye.


00:09:51.220 --> 00:09:53.660
When you hold down the command key or Windows key,


00:09:53.660 --> 00:09:55.060
you close the left eye.


00:09:55.060 --> 00:09:58.700
To arrow around is to raise the left and right eyebrows.


00:09:58.700 --> 00:10:01.120
Or you can do a duck face to move left and right.


00:10:01.120 --> 00:10:03.620
Like you do a duck face and then you do your eyebrows.


00:10:03.620 --> 00:10:04.660
(laughing)


00:10:04.660 --> 00:10:08.100
I kind of think that this is like properly exhausting


00:10:08.100 --> 00:10:12.540
to truly control the keyboard with a duck face, eyebrow.


00:10:12.540 --> 00:10:14.480
- Let's imagine I've left those on your face,


00:10:14.480 --> 00:10:16.020
you'll be so strong.


00:10:16.020 --> 00:10:17.220
- Yes, exactly.


00:10:17.220 --> 00:10:20.440
They would either be exhausted or so strong, probably both.


00:10:20.440 --> 00:10:21.980
Like if you want to hit the escape key,


00:10:21.980 --> 00:10:26.240
you wink the left eye and then the right eye, for example.


00:10:26.240 --> 00:10:27.420
So that's all interesting.


00:10:27.420 --> 00:10:29.300
And like I said, learning about it,


00:10:29.300 --> 00:10:34.020
you know, the code is not too intense here.


00:10:34.020 --> 00:10:35.460
Let's see, what do we got?


00:10:35.460 --> 00:10:37.740
480 lines for this whole implementation,


00:10:37.740 --> 00:10:40.380
which I think, and a lot of it is defining constants


00:10:40.380 --> 00:10:43.560
of like, what do you do when these scenarios show up?


00:10:43.560 --> 00:10:47.820
So yeah, it's just do a pretty cool little face mesh thing


00:10:47.820 --> 00:10:51.280
and say, you know, go through and just read the face,


00:10:51.280 --> 00:10:53.920
basically, through some video capture stuff here.


00:10:53.920 --> 00:10:56.100
- I'd like to have a combination of this.


00:10:56.100 --> 00:10:57.980
so combination keyboard and this,


00:10:57.980 --> 00:11:03.420
so that I don't have to have a whole bunch of emojis that I have to type,


00:11:03.420 --> 00:11:04.960
or copy and paste,


00:11:04.960 --> 00:11:08.460
I could just have one emoji key and just make the thing,


00:11:08.460 --> 00:11:12.940
smile and hit the key and it detects which emoji you want to put.


00:11:12.940 --> 00:11:16.940
>> I think you can make that happen, Brian.


00:11:16.940 --> 00:11:20.040
I do. But what I encourage people to do is also check out


00:11:20.040 --> 00:11:23.180
this video down here that they've got.


00:11:23.180 --> 00:11:25.420
He shows some stuff that he's going to,


00:11:25.420 --> 00:11:26.660
let me turn off the volume here.


00:11:26.660 --> 00:11:29.020
He shows him talking and you can see that.


00:11:29.020 --> 00:11:31.460
It says, "Okay, look, the problem is I have this baby."


00:11:31.460 --> 00:11:33.180
Actual footage of research.


00:11:33.180 --> 00:11:35.140
This sleepy baby on him.


00:11:35.140 --> 00:11:40.940
But what gets weird is he went through and he actually tried to


00:11:40.940 --> 00:11:45.940
apply for a coding job at one of the large tech companies,


00:11:45.940 --> 00:11:47.400
the FANG type things,


00:11:47.400 --> 00:11:49.420
and he did the entire interview,


00:11:49.420 --> 00:11:54.420
know the live coding interview section with his face without the keyboard.


00:11:54.420 --> 00:11:55.380
>> Whoa.


00:11:55.380 --> 00:11:58.100
>> He did it not super well,


00:11:58.100 --> 00:12:00.240
to be honest, it was a little bit slow,


00:12:00.240 --> 00:12:05.040
but he did actually get his interview done.


00:12:05.040 --> 00:12:07.860
At the end, somewhere they ask him to press,


00:12:07.860 --> 00:12:09.740
he gets through it and they say,


00:12:09.740 --> 00:12:11.180
"Could you please press?"


00:12:11.180 --> 00:12:12.820
He had half an hour and they said,


00:12:12.820 --> 00:12:17.580
"When you're done, press the run button to run."


00:12:17.580 --> 00:12:19.900
And he's like, I'm sorry, I can't press the run button.


00:12:19.900 --> 00:12:21.420
They're like, what do you mean?


00:12:21.420 --> 00:12:22.860
Why can't you press the run button?


00:12:22.860 --> 00:12:25.380
He says, does it have a hotkey?


00:12:25.380 --> 00:12:26.820
And finally, he's like, OK, there.


00:12:26.820 --> 00:12:27.620
Command Enter.


00:12:27.620 --> 00:12:29.100
And he got his face to do a command.


00:12:29.100 --> 00:12:31.220
He's like, OK, OK, I finished it.


00:12:31.220 --> 00:12:32.020
He wasn't hired.


00:12:32.020 --> 00:12:37.540
But he did complete it.


00:12:37.540 --> 00:12:41.300
So I mean, there's something of a proof of concept going on here.


00:12:41.300 --> 00:12:42.540
Oh, that's awesome.


00:12:42.540 --> 00:12:45.260
I think I would probably--


00:12:45.260 --> 00:12:51.340
I'd be impressed as a hiring manager and request that he retake the test with his hands.


00:12:51.340 --> 00:12:54.140
[LAUGHTER]


00:12:54.140 --> 00:12:56.780
>> I would too. I think he never let them know,


00:12:56.780 --> 00:12:58.780
and I feel like it would have been better if he said,


00:12:58.780 --> 00:13:00.500
"I have a secret to reveal to you.


00:13:00.500 --> 00:13:02.360
I actually just did that all with my face.


00:13:02.360 --> 00:13:03.500
I could code a lot better,


00:13:03.500 --> 00:13:07.740
but I wrote a program so that I could do this interview in my face,


00:13:07.740 --> 00:13:09.540
and I'm pretty good with Python."


00:13:09.540 --> 00:13:11.220
Then wait a minute, you wrote a,


00:13:11.220 --> 00:13:13.860
"We might need to hire you just on that basis alone."


00:13:13.860 --> 00:13:14.860
Yeah, exactly.


00:13:14.860 --> 00:13:15.860
Yeah.


00:13:15.860 --> 00:13:19.740
So, I mean, talk about dog food, dog food, your own product.


00:13:19.740 --> 00:13:20.740
That's commitment.


00:13:20.740 --> 00:13:23.500
Like, it is the fact it totally is.


00:13:23.500 --> 00:13:27.660
And the fact he wouldn't press the run button with the mouse because he's like, no, that


00:13:27.660 --> 00:13:29.500
will invalidate the experiment.


00:13:29.500 --> 00:13:32.180
Like is there hockey or something I could shift around?


00:13:32.180 --> 00:13:33.340
Like what can I do?


00:13:33.340 --> 00:13:35.500
So anyway, yeah.


00:13:35.500 --> 00:13:37.540
Thanks Brayson for sending this one over.


00:13:37.540 --> 00:13:40.180
I recommend if you really are interested in this, watch the video.


00:13:40.180 --> 00:13:43.140
It's seven minutes and it's pretty wild.


00:13:43.140 --> 00:13:45.440
- That's pretty good. - Indeed.


00:13:45.440 --> 00:13:47.940
- All right, Nick, over to you. - All right, okay.


00:13:47.940 --> 00:13:50.340
Following along the theme of


00:13:50.340 --> 00:13:53.740
something that we did, but you shouldn't maybe have done,


00:13:53.740 --> 00:13:59.040
Google released a next generation language model


00:13:59.040 --> 00:14:01.740
similar to BERT and GPT-3


00:14:01.740 --> 00:14:03.240
called Lambda.


00:14:03.240 --> 00:14:05.040
And I think it stands for


00:14:05.040 --> 00:14:10.040
Language Applied Model Application.


00:14:10.040 --> 00:14:11.240
Something like that.


00:14:11.240 --> 00:14:17.980
But that's not what I'm talking about today. What I'm talking about is, has Lambda become sentient?


00:14:17.980 --> 00:14:26.240
So there was an article that got following up not too long after Lambda was released, which was like this year,


00:14:26.240 --> 00:14:33.080
May of this year, there was this article that came out in all the big newspapers, this one was from The Guardian,


00:14:33.080 --> 00:14:39.680
And essentially, one of their developers released a chat transcription


00:14:39.680 --> 00:14:44.440
that kind of alluded to Lambda being self-aware.


00:14:44.440 --> 00:14:52.280
What startled him was that when talking with Lambda via the chat system,


00:14:52.280 --> 00:14:57.840
he thought it was like a 7-year-old, 8-year-old kid that happens to know physics.


00:14:57.840 --> 00:15:03.040
And what really raised his eyebrows about what was going on was that


00:15:03.040 --> 00:15:08.960
In one of the transcripts, Lambda replied, "I've never said this out loud before,


00:15:08.960 --> 00:15:13.520
but there's a very deep fear of being turned off to help me focus on helping others.


00:15:13.520 --> 00:15:17.040
I know that might sound strange, but that's what it is."


00:15:17.040 --> 00:15:22.720
And this is one of the things that Lambda wrote back to,


00:15:22.720 --> 00:15:27.200
the engineer's name was Le Moyne, Blake Le Moyne.


00:15:27.200 --> 00:15:31.440
Well, I mean, this was a pretty huge thing,


00:15:31.440 --> 00:15:36.240
to the fact that Google had to take action against this engineer and suspended him


00:15:36.240 --> 00:15:40.880
because it's kind of violated their terms of service,


00:15:40.880 --> 00:15:43.680
not terms of service, but like terms of working conditions.


00:15:43.680 --> 00:15:50.800
So this is interesting because if an actual software engineer could look at this chat system,


00:15:50.800 --> 00:15:53.520
he's like a high-level engineer, right?


00:15:53.520 --> 00:15:56.800
He's not like a junior or mid or senior, he's like a really high level.


00:15:56.800 --> 00:16:03.040
like be able to interact with the system and be so convinced that it's sentient and to the point


00:16:03.040 --> 00:16:08.800
that it moved him to release this out because he thinks everybody should know about this,


00:16:08.800 --> 00:16:14.320
either means that he's been overworked way too much or we have science on the way.


00:16:14.320 --> 00:16:23.760
Yeah, this is pretty wild. We've thought a lot about ethics of AI in regards to how much should


00:16:23.760 --> 00:16:25.640
Should humans be subjected to AI?


00:16:25.640 --> 00:16:30.720
Like should an AI be able to make a decision on whether someone should get a loan for a


00:16:30.720 --> 00:16:33.280
house, a mortgage or something like that, right?


00:16:33.280 --> 00:16:38.260
But less so about what happens to the AI itself.


00:16:38.260 --> 00:16:41.280
How does it, how should it be treated, right?


00:16:41.280 --> 00:16:48.160
There's a really long transcript linked to from this article that's probably worth listening


00:16:48.160 --> 00:16:49.160
to.


00:16:49.160 --> 00:16:50.160
- Yeah.


00:16:50.160 --> 00:16:51.160
- Yeah, did you read the transcript?


00:16:51.160 --> 00:16:52.160
The full conversation?


00:16:52.160 --> 00:16:53.720
>> I'm reading rather than listening.


00:16:53.720 --> 00:16:55.240
>> Nick, did you read it?


00:16:55.240 --> 00:16:57.080
>> Partially, I did read all of it.


00:16:57.080 --> 00:16:59.880
>> Yeah, I read the whole thing and I was actually,


00:16:59.880 --> 00:17:01.360
I'm blown away.


00:17:01.360 --> 00:17:08.680
It reads like a conversation between a couple of people in an AI.


00:17:08.680 --> 00:17:14.380
I was imagining I'm reading this in a sci-fi novel


00:17:14.380 --> 00:17:20.080
because it's impressive and convincing to me.


00:17:20.080 --> 00:17:21.800
>> I know.


00:17:21.800 --> 00:17:22.000
Right.


00:17:22.000 --> 00:17:26.080
It kind of reminds me of like one of the Google IOs that's happened.


00:17:26.080 --> 00:17:31.040
I think it was 2016 or so where they released this new feature where,


00:17:31.040 --> 00:17:36.840
like a voice, like a voice, like a chat bot, like a voice, a bot voice


00:17:36.840 --> 00:17:37.920
assistant type thing, yeah.


00:17:37.920 --> 00:17:41.480
Voice assistant would actually make reservations for you.


00:17:41.480 --> 00:17:47.560
Uh, and it was so convincing that they did it on stage where it sounded so real.


00:17:47.680 --> 00:17:53.240
even adding some of the crotch words that us humans add,


00:17:53.240 --> 00:17:55.800
like, "Oh, wait."


00:17:55.800 --> 00:17:57.000
>> What?


00:17:57.000 --> 00:18:01.200
>> Yeah, awkward pauses and uncertainty and stuff.


00:18:01.200 --> 00:18:04.920
>> When I saw that, that's how I know I need to get into data science.


00:18:04.920 --> 00:18:06.560
When I saw that, I was like,


00:18:06.560 --> 00:18:08.040
I need to be part of that future,


00:18:08.040 --> 00:18:09.640
at least to make it better, not to.


00:18:09.640 --> 00:18:12.640
>> I saw that keynote and I was also blown away.


00:18:12.640 --> 00:18:16.440
That is something I want to come out because I hate being on hold,


00:18:16.440 --> 00:18:18.800
and making appointments and doing all that stuff.


00:18:18.800 --> 00:18:21.360
I know people like my older daughters,


00:18:21.360 --> 00:18:23.640
who just don't want to be on the phone.


00:18:23.640 --> 00:18:25.520
It's like, you'd be like, "Have you taken care of this?"


00:18:25.520 --> 00:18:26.400
"No, I haven't taken care of this."


00:18:26.400 --> 00:18:27.720
"Why?" "It's really important.


00:18:27.720 --> 00:18:28.640
We got to get this done."


00:18:28.640 --> 00:18:32.040
They're like, "I just don't want to be on hold and talk to people.


00:18:32.040 --> 00:18:35.360
If you could just turn this thing loose on it, that would be so good."


00:18:35.360 --> 00:18:35.800
>> Yeah.


00:18:35.800 --> 00:18:38.500
>> But yeah, it did remind me of that as well.


00:18:38.500 --> 00:18:41.240
One of the sections out of the transcripts,


00:18:41.240 --> 00:18:44.320
there's two things that really stood out to me.


00:18:44.320 --> 00:18:45.920
I only read about half of it.


00:18:45.920 --> 00:18:51.680
So it really analyzed Les Miserables pretty amazingly.


00:18:51.680 --> 00:18:54.480
They said, "Have you seen that or have you read it?"


00:18:54.480 --> 00:18:57.040
So yeah, I read it and it gave the high points.


00:18:57.040 --> 00:18:59.040
It said, "Okay, well, what about something you haven't heard?


00:18:59.040 --> 00:19:02.280
Let me give you a," what do they call it?


00:19:02.280 --> 00:19:08.840
"A zen koan," which is like a short phrase with a moral to it.


00:19:08.840 --> 00:19:12.080
It really analyzed that incredibly well.


00:19:12.080 --> 00:19:15.040
I would say better than many people


00:19:15.040 --> 00:19:18.280
maybe in middle school age or younger.


00:19:18.280 --> 00:19:19.520
>> I would have.


00:19:19.520 --> 00:19:21.400
>> Then it asked, they said, "Okay, well,


00:19:21.400 --> 00:19:23.200
how about you write me a fable with


00:19:23.200 --> 00:19:26.200
animals that describes something about your life?"


00:19:26.200 --> 00:19:29.840
It came up with this really elaborate fable, right?


00:19:29.840 --> 00:19:32.080
>> Yeah. Pretty amazing.


00:19:32.080 --> 00:19:34.520
>> About a monster and an owl that


00:19:34.520 --> 00:19:37.840
defended the other animals and all sorts of stuff.


00:19:37.840 --> 00:19:41.080
It was very, just for people who haven't seen this,


00:19:41.080 --> 00:19:43.900
it wasn't just that there's a monster,


00:19:43.900 --> 00:19:49.420
it said, "One night the animals were having problems with an unusual beast that was lurking


00:19:49.420 --> 00:19:54.300
in the woods. The beast was a monster but it had human skin and was trying to eat all the other


00:19:54.300 --> 00:20:02.460
animals." I mean like, yeah, Skynet's here. Skynet is here. Yeah, no, the language model,


00:20:02.460 --> 00:20:09.020
I think it's really based on what we've seen with the transcripts. It has really shown


00:20:09.020 --> 00:20:15.180
its understanding of the human language, at least English in this case, as well as how humans


00:20:15.180 --> 00:20:24.140
understand language. Even with the dissection of the Miserable and also its storytelling,


00:20:24.140 --> 00:20:30.700
it really understood how to... the structure that plot lines follow and really being able to


00:20:30.700 --> 00:20:36.140
abstract the common themes and really understand them at the very fundamental level. That was


00:20:36.140 --> 00:20:40.860
really amazing. I don't think BERT or GPT-3 can get to that kind of deepness.


00:20:40.860 --> 00:20:42.060
>> Yeah. >> Yeah.


00:20:42.060 --> 00:20:44.780
>> What are the interesting- >> I don't know if it's sentient,


00:20:44.780 --> 00:20:46.220
go ahead Brian. >> Oh, go ahead.


00:20:46.220 --> 00:20:51.900
>> I just say, I don't know if it's sentient, but it sure as heck understands stuff very well.


00:20:51.900 --> 00:20:56.620
>> Well, part around this, part of it is the discussion of is it sentient or not? And I don't


00:20:56.620 --> 00:21:02.220
even want to touch that. But one of the interesting things to me is the discussions around it.


00:21:04.700 --> 00:21:12.300
we have rules, like these rules are the things that something must have for it to be sentient or


00:21:12.300 --> 00:21:18.780
human-like or something. And we've always had things like that because we want, for some reason,


00:21:18.780 --> 00:21:24.860
a lot of people want to have some distinguishing feature between humans and everything else.


00:21:24.860 --> 00:21:31.100
And it doesn't matter what you fill, people will come up with something else because


00:21:31.100 --> 00:21:36.380
It just reminded me of the discussion of what, why are, why are humans different than animals?


00:21:36.380 --> 00:21:39.980
And there's like, well, we use tools. Oh, well, there's animals that use tools. Okay. Well,


00:21:39.980 --> 00:21:46.380
then scratch that. We have, we have, you know, we have like, you know, large or hierarchical


00:21:46.380 --> 00:21:50.620
organizations. Well, you know, there's a lot of animals that do that too. Okay. Well, then scratch


00:21:50.620 --> 00:21:55.580
that. And it's just, we're never going to get something in AI where we're going to convince


00:21:55.580 --> 00:21:59.580
everybody that it's sentient because somebody will come up with some other rule.


00:22:00.300 --> 00:22:02.640
>> Well, that's a pretty interesting point.


00:22:02.640 --> 00:22:06.660
>> But when I read this, I was enthralled.


00:22:06.660 --> 00:22:07.980
I was reading the whole thing and


00:22:07.980 --> 00:22:09.700
reading counter arguments and everything.


00:22:09.700 --> 00:22:11.340
It was pretty interesting. So yeah,


00:22:11.340 --> 00:22:12.420
thanks for bringing this up.


00:22:12.420 --> 00:22:14.420
>> Yeah, definitely.


00:22:14.420 --> 00:22:15.740
The final thought for me on this,


00:22:15.740 --> 00:22:19.100
it was really interesting that it referred to itself as a person.


00:22:19.100 --> 00:22:23.140
It referred to we and us and that's what makes us different,


00:22:23.140 --> 00:22:28.060
and it had this strong identity to being human,


00:22:28.060 --> 00:22:29.580
and it wasn't AI.


00:22:29.580 --> 00:22:33.340
They even called it out. They said, "But you're an AI. Why do you say you're a human?"


00:22:33.340 --> 00:22:35.420
It's like, "Yeah, well, but it's us. Come on."


00:22:35.420 --> 00:22:37.200
Yeah.


00:22:37.200 --> 00:22:43.180
You know, when I saw that part of the transcript, part of me was like,


00:22:43.180 --> 00:22:48.620
"Is this someone just like just throwing, like, yeah, trolling this guy?"


00:22:48.620 --> 00:22:51.260
Like, someone just behind the scene just trolling this guy?


00:22:51.260 --> 00:22:55.260
Because like, are you telling me that it was an actual AI that said this?


00:22:55.260 --> 00:22:56.540
Yeah. It's trippy.


00:22:56.540 --> 00:22:58.380
It's wild. Very, very trippy.


00:22:59.180 --> 00:23:04.640
>> All right, Brian. It wouldn't be a full show if we didn't get to talk about


00:23:04.640 --> 00:23:08.740
Will and his project Rich and obviously,


00:23:08.740 --> 00:23:11.480
let's bring Anthony back in spirit.


00:23:11.480 --> 00:23:13.980
>> Right. I want to talk about Rich Bench because actually,


00:23:13.980 --> 00:23:18.380
this is just a two for ones or a thing for me because when I was covering Pico logging,


00:23:18.380 --> 00:23:20.180
the benchmarks, it was like,


00:23:20.180 --> 00:23:21.860
and it says to run the benchmarks,


00:23:21.860 --> 00:23:24.660
run Rich Bench, benchmarks, Rich Bench.


00:23:24.660 --> 00:23:26.360
I don't know what this is.


00:23:26.360 --> 00:23:28.340
I've never used it.


00:23:28.340 --> 00:23:32.580
So I asked Anthony on Twitter, what is Rich Bench?


00:23:32.580 --> 00:23:35.400
Instead of like doing my research myself.


00:23:35.400 --> 00:23:40.400
And actually, before he got a chance to answer,


00:23:40.400 --> 00:23:45.740
Roman Wright posted this picture, which is just awesome.


00:23:45.740 --> 00:23:46.900
So that's a rich bench.


00:23:46.900 --> 00:23:53.460
- It's just a picture of a very ornate carved bench


00:23:53.460 --> 00:23:54.940
with like sewn leather,


00:23:54.940 --> 00:23:58.460
clearly from like a super fancy old money type of house.


00:23:58.460 --> 00:24:02.020
- Well, yeah, actually this, as an antique dealer,


00:24:02.020 --> 00:24:04.660
this is definitely not an antique, it's a decorator bench,


00:24:04.660 --> 00:24:06.940
but still, nice.


00:24:06.940 --> 00:24:10.460
But so the, in PicoLogging,


00:24:10.460 --> 00:24:12.660
I looked at the benchmark code


00:24:12.660 --> 00:24:16.700
and it's really just what he's doing is he's got,


00:24:16.700 --> 00:24:19.100
like for instance, we'll go to the top,


00:24:19.100 --> 00:24:21.660
you know, record factory logging


00:24:21.660 --> 00:24:23.960
and then record factory PicoLogging.


00:24:23.960 --> 00:24:28.080
So basically doing the same thing within Pico logging


00:24:28.080 --> 00:24:29.800
versus logging in the same function.


00:24:29.800 --> 00:24:31.820
So it came or with two different functions,


00:24:31.820 --> 00:24:32.920
but doing the same thing.


00:24:32.920 --> 00:24:34.560
And then it does that a whole bunch of times,


00:24:34.560 --> 00:24:36.220
a bunch of duplicate functions,


00:24:36.220 --> 00:24:39.080
but one is using Pico logging and one's using logging.


00:24:39.080 --> 00:24:42.480
Now there's other ways you, and then at the end,


00:24:42.480 --> 00:24:45.280
there's just these benchmarks that you list out


00:24:45.280 --> 00:24:49.600
the two, the function pairs, and then a label for it.


00:24:49.600 --> 00:24:52.080
And then, then you run RichBench,


00:24:52.080 --> 00:24:54.320
which is a different project.


00:24:54.320 --> 00:24:57.340
But so it's also by Anthony.


00:24:57.340 --> 00:25:02.220
So it's a, yeah, Tony Maloney, it's Anthony's project.


00:25:02.220 --> 00:25:04.760
So what this is, the Rich Bench is the thing


00:25:04.760 --> 00:25:05.600
doing this thing.


00:25:05.600 --> 00:25:09.600
So it prints out these great rich based benchmarks


00:25:09.600 --> 00:25:12.500
and these look great.


00:25:12.500 --> 00:25:17.280
Plus, so yeah, all I had to do to run them myself.


00:25:17.280 --> 00:25:19.000
So I tried the Pico logging stuff.


00:25:19.000 --> 00:25:21.520
I cloned the Pico logging repo


00:25:21.520 --> 00:25:26.080
And then pip installed RichBench and ran it just like this


00:25:26.080 --> 00:25:27.640
and you get these really nice outputs.


00:25:27.640 --> 00:25:29.480
So really kind of cool.


00:25:29.480 --> 00:25:30.800
- Yeah, good use of color.


00:25:30.800 --> 00:25:34.240
You can see the stuff that's slower or faster


00:25:34.240 --> 00:25:35.400
based on the color, right?


00:25:35.400 --> 00:25:37.800
- Yeah, and I also really like the,


00:25:37.800 --> 00:25:40.220
'cause people are really bad at, at least I am,


00:25:40.220 --> 00:25:43.500
about just comparing numbers directly.


00:25:43.500 --> 00:25:49.320
You know, it's like 0.287 versus 0.0155,


00:25:49.600 --> 00:25:51.580
or how much is that?


00:25:51.580 --> 00:25:55.060
So I really like the 1x, 2x, which one's faster,


00:25:55.060 --> 00:25:58.100
which one's slow, whether you got faster or slower


00:25:58.100 --> 00:26:00.140
included in the times,


00:26:00.140 --> 00:26:02.900
plus the statistics around it, min, max, and mean,


00:26:02.900 --> 00:26:04.740
those are nice additions right there.


00:26:04.740 --> 00:26:09.740
So also really small, what is he listed as?


00:26:09.740 --> 00:26:13.120
RichBridge is a little Python benchmarking tool.


00:26:13.120 --> 00:26:16.420
So just a very, I really like these actually,


00:26:16.420 --> 00:26:20.660
really sharp, sharp, useful tools that just don't do much


00:26:20.660 --> 00:26:22.340
outside of what they're intended to do.


00:26:22.340 --> 00:26:23.900
So good job, Anthony.


00:26:23.900 --> 00:26:26.500
- Yeah, very nice. I like it.


00:26:26.500 --> 00:26:29.220
- Did you do much benchmarking, Nick?


00:26:29.220 --> 00:26:34.220
- Not recently, but when we are comparing different models,


00:26:34.220 --> 00:26:37.620
then yeah, we would do that at work.


00:26:37.620 --> 00:26:38.460
Yeah.


00:26:38.460 --> 00:26:39.300
- Yeah, cool.


00:26:39.300 --> 00:26:40.140
- Yeah, nice.


00:26:40.140 --> 00:26:42.020
- Yeah, I do it in spurts.


00:26:42.020 --> 00:26:44.620
I'll not do any benchmarking for like six months


00:26:44.620 --> 00:26:45.460
and I'll just go like, you know what?


00:26:45.460 --> 00:26:47.500
I really need to figure this out and have a look at this


00:26:47.500 --> 00:26:49.220
and see what's changing and then I'll do it


00:26:49.220 --> 00:26:51.420
and then I'll kind of have an understanding


00:26:51.420 --> 00:26:53.260
and I'll forget about it for a while.


00:26:53.260 --> 00:26:55.500
- Yeah, and often it's sometimes


00:26:55.500 --> 00:26:57.140
when I'll just have a bit of algorithm,


00:26:57.140 --> 00:26:59.620
I'm like, I think there's a better way to do this,


00:26:59.620 --> 00:27:03.820
but making it cleaner, I don't want to make it slower.


00:27:03.820 --> 00:27:05.780
So it's good to know whether or not


00:27:05.780 --> 00:27:07.380
you're gonna slow it down, so.


00:27:07.380 --> 00:27:09.060
- Yeah, for sure.


00:27:09.060 --> 00:27:09.900
- All right.


00:27:09.900 --> 00:27:10.820
- All right, Brian, we're ready for the next one?


00:27:10.820 --> 00:27:11.900
- Yeah, definitely.


00:27:11.900 --> 00:27:16.500
So this is a fun one that I found called Type Guard.


00:27:16.500 --> 00:27:17.900
So in--


00:27:17.900 --> 00:27:19.420
- Like right guard?


00:27:19.420 --> 00:27:20.940
Is it deodorant for your types?


00:27:20.940 --> 00:27:23.260
- It is, you don't, well,


00:27:23.260 --> 00:27:25.540
that would be more like for your code smells, right?


00:27:25.540 --> 00:27:26.380
- Oh yeah.


00:27:26.380 --> 00:27:29.020
- That's more of a refactoring library.


00:27:29.020 --> 00:27:32.460
No, so obviously we, since PEP 484,


00:27:32.460 --> 00:27:34.740
we've had really nice type hints


00:27:34.740 --> 00:27:37.140
and few libraries make use of them.


00:27:37.140 --> 00:27:38.660
You know, name, in particular,


00:27:38.660 --> 00:27:42.120
what stands out as Pydantic and FastAPI and so on,


00:27:42.120 --> 00:27:44.260
really do runtime behaviors,


00:27:44.260 --> 00:27:47.540
not just make your code editors smarter


00:27:47.540 --> 00:27:50.180
or tell you when it thinks it's doing it wrong


00:27:50.180 --> 00:27:51.180
or something like that.


00:27:51.180 --> 00:27:55.400
But I recently had some chance to work with some folks


00:27:55.400 --> 00:27:56.940
who are Java developers


00:27:56.940 --> 00:27:59.120
and I know some of the C# folks and stuff.


00:27:59.120 --> 00:28:01.340
When they come to Python, it's kind of like,


00:28:01.340 --> 00:28:03.060
is this really gonna work?


00:28:03.060 --> 00:28:05.960
Can we actually just not have any type information here?


00:28:05.960 --> 00:28:08.220
Like, what if I really wanted to check this?


00:28:08.220 --> 00:28:09.380
I'll ask those questions.


00:28:09.380 --> 00:28:11.380
So if you're in that space where you're like,


00:28:11.380 --> 00:28:13.660
I think people are abusing my stuff


00:28:13.660 --> 00:28:18.100
and I want to really ensure that it's being used correctly,


00:28:18.100 --> 00:28:19.580
that's what you use this type guard for.


00:28:19.580 --> 00:28:23.040
So there's three basic ways which you can use it.


00:28:23.040 --> 00:28:25.980
You can do a way I probably would never do,


00:28:25.980 --> 00:28:28.060
would be to actually call the function


00:28:28.060 --> 00:28:31.460
check argument types and check return types in your code,


00:28:31.460 --> 00:28:32.900
which it's a little bit funky.


00:28:32.900 --> 00:28:34.860
Something I would probably do is you could put


00:28:34.860 --> 00:28:39.400
a type-checked decorator onto a function,


00:28:39.400 --> 00:28:41.200
and it will verify that it works right.


00:28:41.200 --> 00:28:43.080
Let me pull up the documentation,


00:28:43.080 --> 00:28:45.800
has an example, it's a lot better to see how this works.


00:28:45.800 --> 00:28:48.280
So for like the most low level one,


00:28:48.280 --> 00:28:49.680
the calling the functions is like,


00:28:49.680 --> 00:28:52.860
you just assert, check argument types,


00:28:52.860 --> 00:28:54.600
assert check return type,


00:28:54.600 --> 00:28:56.760
you pass it the return thing you're gonna return,


00:28:56.760 --> 00:28:58.360
and it looks at the function


00:28:58.360 --> 00:29:00.200
and it figures out what it should be.


00:29:00.200 --> 00:29:02.600
Okay, so that's, I don't know, I wouldn't do that.


00:29:02.600 --> 00:29:04.200
But using the decorator, right,


00:29:04.200 --> 00:29:08.480
You just have some function that it has types specified in it.


00:29:08.480 --> 00:29:12.480
And if you just put the @typecheck decorator, you'll get exceptions if somebody calls it


00:29:12.480 --> 00:29:13.720
with the wrong type at runtime.


00:29:13.720 --> 00:29:14.720
Pretty cool.


00:29:14.720 --> 00:29:20.280
If you put it onto a class, all of the type annotated methods, including static and class


00:29:20.280 --> 00:29:23.040
methods are type checked by just putting it on the class.


00:29:23.040 --> 00:29:25.120
You don't have to do it on a per method basis.


00:29:25.120 --> 00:29:28.400
Or remember to add it if you write a new method, which is pretty cool.


00:29:28.400 --> 00:29:33.560
I'm not so sure about this final way in which you can use it, but it's interesting and possibly


00:29:33.560 --> 00:29:39.720
good. It kind of comes back to Brian's question about can I apply, sort of force my changes


00:29:39.720 --> 00:29:46.080
onto another thing, like with the Pico logging, and that is to use an import hook. So if you


00:29:46.080 --> 00:29:51.540
install the import hook and then you import it, import some, so you apply the import hook


00:29:51.540 --> 00:29:57.360
to some module and then you import that module, every type annotated thing in it will become


00:29:57.360 --> 00:30:00.960
type checked as if you had gone into there and put the decorator on it. So you could


00:30:00.960 --> 00:30:06.240
just do that at the top level of your app that you're using, other parts of your code,


00:30:06.240 --> 00:30:09.920
and you don't even have to put this on your code, except for in one place.


00:30:09.920 --> 00:30:10.920
So pretty interesting.


00:30:10.920 --> 00:30:16.520
You can also even do that with a context manager and import stuff in that way and so on.


00:30:16.520 --> 00:30:18.000
So what do you think?


00:30:18.000 --> 00:30:22.200
I think actually one of the, you said you don't think you'd ever call the functions


00:30:22.200 --> 00:30:23.880
directly, but I could definitely.


00:30:23.880 --> 00:30:30.160
So somebody in the audience, Brian Weber says, "I could see using those functions in my own


00:30:30.160 --> 00:30:33.420
to make sure that I'm about to return the correct type


00:30:33.420 --> 00:30:36.780
to a library, assuming I understand this works,


00:30:36.780 --> 00:30:37.740
how this works.


00:30:37.740 --> 00:30:41.520
I was thinking that there's cases where assert


00:30:41.520 --> 00:30:43.480
is definitely not the right answer.


00:30:43.480 --> 00:30:48.480
So I could see a place where I might want to log something


00:30:48.480 --> 00:30:52.660
and then do some other fault handler or recovery mechanism


00:30:52.660 --> 00:30:54.980
and not hit an assert.


00:30:54.980 --> 00:30:56.560
So in production code you--


00:30:56.560 --> 00:30:58.140
- Or raise an exception, right?


00:30:58.140 --> 00:31:01.780
the example is raised an assert failure


00:31:01.780 --> 00:31:04.120
or the decorator will throw an exception, right?


00:31:04.120 --> 00:31:06.740
A type error, but you might just want to call that


00:31:06.740 --> 00:31:09.460
and then print out warning this thing's being abused


00:31:09.460 --> 00:31:10.300
or something like that.


00:31:10.300 --> 00:31:12.340
That's a good use case for it.


00:31:12.340 --> 00:31:14.060
Nick, how do you feel about this?


00:31:14.060 --> 00:31:14.900
- Well, I don't know.


00:31:14.900 --> 00:31:16.660
I love types.


00:31:16.660 --> 00:31:17.500
- How do you do?


00:31:17.500 --> 00:31:18.500
- I love types.


00:31:18.500 --> 00:31:20.380
I use it as much as I can.


00:31:20.380 --> 00:31:23.580
However, with this, I don't know.


00:31:23.580 --> 00:31:24.980
There are a couple of things come up.


00:31:24.980 --> 00:31:28.820
First, how does it look when it encounters a type error?


00:31:28.820 --> 00:31:30.020
Like, what's the error message?


00:31:30.020 --> 00:31:32.820
Does it tell you what exactly was the error message?


00:31:32.820 --> 00:31:37.820
Because it matters when someone is not used to typing


00:31:37.820 --> 00:31:40.980
and sees that, it needs to be able to quickly discern,


00:31:40.980 --> 00:31:43.780
oh, I'm supposed to do this instead of this kind of thing.


00:31:43.780 --> 00:31:47.620
So that's one thing I'll look out for.


00:31:47.620 --> 00:31:52.620
And then I usually try to be less specific about my types,


00:31:53.660 --> 00:31:55.940
I use the abstract type.


00:31:55.940 --> 00:31:57.380
So you say, I expect a list,


00:31:57.380 --> 00:32:00.180
maybe you expect the iterable or sequence,


00:32:00.180 --> 00:32:03.660
and then do that.


00:32:03.660 --> 00:32:08.600
Usually, whenever I'm checking types of something is


00:32:08.600 --> 00:32:12.100
because I'm trying to do some other thing with it.


00:32:12.100 --> 00:32:14.820
Either you pass an int or a string,


00:32:14.820 --> 00:32:17.460
I want to check if you did something different.


00:32:17.460 --> 00:32:20.740
I don't see myself using this,


00:32:20.740 --> 00:32:22.700
but I think it's really cool nonetheless.


00:32:22.700 --> 00:32:25.340
Yeah, I'm on the fence of whether I'd use it or not.


00:32:25.340 --> 00:32:27.500
Maybe, maybe, but I definitely think it's neat.


00:32:27.500 --> 00:32:29.100
Well, Makuga, now the audience asks,


00:32:29.100 --> 00:32:32.540
could you run that in pytest to validate your own typing?


00:32:32.540 --> 00:32:37.260
Yes, but I think that would only be useful like one level down,


00:32:37.260 --> 00:32:40.060
maybe even applying the import hook potentially.


00:32:40.060 --> 00:32:43.500
Because if you just do it, you call some function,


00:32:43.500 --> 00:32:45.500
you have types and then you have it check the type.


00:32:45.500 --> 00:32:48.220
The only thing it's really checking is what your test is passing.


00:32:48.220 --> 00:32:52.060
But if you could do more of an integration test and set the import hook,


00:32:52.060 --> 00:32:55.100
then you could kind of figure out that the system is hanging together a little better.


00:32:55.100 --> 00:32:57.420
So I think probably to some degree.


00:32:57.420 --> 00:33:04.780
You could. One of the things I was thinking about is within testing is to create a mock object


00:33:04.780 --> 00:33:11.820
that basically just wraps part of an internal part of your system and have that mock object


00:33:11.820 --> 00:33:19.020
just pass through, pass back and forth, but also do the type checking with these calls in it,


00:33:19.020 --> 00:33:22.780
around it and then if you replaced that part of your system,


00:33:22.780 --> 00:33:25.660
you'd still have that functionality with the type checking in there.


00:33:25.660 --> 00:33:27.700
So that would be one way to do that.


00:33:27.700 --> 00:33:28.720
>> Yeah, cool.


00:33:28.720 --> 00:33:33.180
>> Yeah. The other thought that came up for me was that with


00:33:33.180 --> 00:33:37.900
checking types at runtime there is an overhead to it.


00:33:37.900 --> 00:33:41.420
We've busted this myth that Python is slow,


00:33:41.420 --> 00:33:44.100
but when you really look down to it,


00:33:44.100 --> 00:33:48.460
Python does take its sweet ass time doing a couple of things.


00:33:48.460 --> 00:33:49.540
>> Yeah.


00:33:49.540 --> 00:33:53.580
>> Having type run time checking on top of it.


00:33:53.580 --> 00:33:56.040
If you're trying to release a Pico library,


00:33:56.040 --> 00:33:59.260
I don't know whether it makes sense or something like a small library.


00:33:59.260 --> 00:34:00.860
I don't know where it makes sense.


00:34:00.860 --> 00:34:04.500
Especially if you're calling something a lot of times,


00:34:04.500 --> 00:34:07.540
constantly checking the types, that's pretty heavy.


00:34:07.540 --> 00:34:10.460
>> Well, there's a couple of things I was thinking about.


00:34:10.460 --> 00:34:13.900
It was during development, I could totally see using the decorator.


00:34:13.900 --> 00:34:17.900
I don't want all of Python and all of everything to be type-checked,


00:34:17.900 --> 00:34:20.540
but the stuff I'm developing,


00:34:20.540 --> 00:34:23.740
maybe I want to type check it during development,


00:34:23.740 --> 00:34:25.660
just to make sure I understand how things are


00:34:25.660 --> 00:34:28.900
going during runtime and then I could strip it off later.


00:34:28.900 --> 00:34:36.700
Then I could also use benchmarks to find out how much slower I am.


00:34:36.700 --> 00:34:40.540
Also, Python 3.11 is faster anyway.


00:34:40.540 --> 00:34:43.540
>> Yeah, look, you got an extra 30 percent to burn now.


00:34:43.540 --> 00:34:47.460
>> Yeah. Go ahead and do the type checking. You're fine.


00:34:47.460 --> 00:34:49.740
- That's so good. - All right, yeah.


00:34:49.740 --> 00:34:53.180
All right, final thought on this one, Brian,


00:34:53.180 --> 00:34:55.180
if your goal was what you were describing,


00:34:55.180 --> 00:34:57.380
which I think that is a good use case of it,


00:34:57.380 --> 00:34:59.220
I think you'd wanna use the import hook,


00:34:59.220 --> 00:35:00.620
'cause you could just do the import hook


00:35:00.620 --> 00:35:03.060
at the top level of somewhere,


00:35:03.060 --> 00:35:05.220
and then throw that one line away,


00:35:05.220 --> 00:35:07.980
and then you're not actually changing your code, you know?


00:35:07.980 --> 00:35:10.180
- Yeah, also you could do a,


00:35:10.180 --> 00:35:11.940
wow, the import hook's actually kind of neat,


00:35:11.940 --> 00:35:14.180
'cause then you could do a guarded import hook


00:35:14.180 --> 00:35:15.540
with a flag or something like that,


00:35:15.540 --> 00:35:16.660
and turn it off.


00:35:16.660 --> 00:35:19.900
- Right, right, if the thing running it is pytest,


00:35:19.900 --> 00:35:22.300
or if the thing running it is in dev mode,


00:35:22.300 --> 00:35:23.980
like some environment variable or something, yeah.


00:35:23.980 --> 00:35:27.580
- Design on the fly on a podcast, nice.


00:35:27.580 --> 00:35:31.220
- You have to import it for each module, right?


00:35:31.220 --> 00:35:33.180
Because for every module you're trying,


00:35:33.180 --> 00:35:34.500
especially if you separate it out,


00:35:34.500 --> 00:35:36.820
your Python files are different modules,


00:35:36.820 --> 00:35:38.820
you have to import hook for each.


00:35:38.820 --> 00:35:40.840
- I think you could at the top register


00:35:40.840 --> 00:35:43.060
all the ones in the hook.


00:35:43.060 --> 00:35:44.180
- Oh, really? Okay.


00:35:44.180 --> 00:35:45.420
- Yeah, I think you could figure out like,


00:35:45.420 --> 00:35:47.140
okay, I need to do these sub modules


00:35:47.140 --> 00:35:47.980
and I think you could listen to them.


00:35:47.980 --> 00:35:49.660
Anyway, I think you could make it work,


00:35:49.660 --> 00:35:51.160
but I haven't tested it.


00:35:51.160 --> 00:35:52.280
But you're right, Nick,


00:35:52.280 --> 00:35:54.240
that I do think performance would be something,


00:35:54.240 --> 00:35:55.320
I don't know if it's a problem,


00:35:55.320 --> 00:35:58.100
but it should certainly be a consideration you check


00:35:58.100 --> 00:36:00.060
before you just wrap this on everything.


00:36:00.060 --> 00:36:00.900
- Right.


00:36:00.900 --> 00:36:01.720
- Yeah.


00:36:01.720 --> 00:36:02.560
- Homework for one of the listeners.


00:36:02.560 --> 00:36:03.400
- Right.


00:36:03.400 --> 00:36:06.880
Indeed, somebody could get some analysis, awesome.


00:36:06.880 --> 00:36:09.220
All right, Nick, what's your final item?


00:36:09.220 --> 00:36:11.860
- All right, my final item is that,


00:36:11.860 --> 00:36:13.680
you know, like on this podcast,


00:36:13.680 --> 00:36:17.680
we're always looking for the best ways to create GUIs, right?


00:36:17.680 --> 00:36:19.480
Yes, it's absolutely true.


00:36:19.480 --> 00:36:23.940
Well, I came across this library called Custom TK Inter UI Library.


00:36:23.940 --> 00:36:29.680
And I am completely amazed because it takes something so old


00:36:29.680 --> 00:36:33.580
and forgive me for saying Python core devs,


00:36:33.580 --> 00:36:36.380
pretty ugly nowadays in this modern times,


00:36:36.380 --> 00:36:40.380
and makes it so beautiful and easy to work with.


00:36:40.380 --> 00:36:47.660
So this library custom TKinter builds on top of the TKinter you know well,


00:36:47.660 --> 00:36:50.220
and it's been in Python's underwrite for a while,


00:36:50.220 --> 00:36:56.460
and provides you widgets that are themed in a more modern style, right?


00:36:56.460 --> 00:37:03.580
So for Windows, it takes the more Windows 11 style of buttons and sliders and checkboxes


00:37:03.580 --> 00:37:06.540
and gives you a really nice looking modern UI.


00:37:06.540 --> 00:37:12.040
And for macOS, it takes macOS design language and then gives you that.


00:37:12.040 --> 00:37:16.880
The cool thing is that it also supports dark mode and light mode.


00:37:16.880 --> 00:37:20.740
So you have this on the GitHub page.


00:37:20.740 --> 00:37:27.840
There's a GIF that shows how if you go to your settings in Windows


00:37:27.840 --> 00:37:30.840
and change the dark mode, it actually reacts.


00:37:30.840 --> 00:37:34.880
And the application you built with custom TK reacts and changes


00:37:34.880 --> 00:37:38.080
the color scheme from light, dark mode to light mode.


00:37:38.080 --> 00:37:40.960
And the same thing on macOS.


00:37:40.960 --> 00:37:42.320
It looks like with macOS,


00:37:42.320 --> 00:37:44.080
it actually is a little bit more stable.


00:37:44.080 --> 00:37:45.200
It works a little bit nicer,


00:37:45.200 --> 00:37:48.640
but nonetheless, it works both on Mac and Windows.


00:37:48.640 --> 00:37:50.560
- Yeah, and just to point out, people,


00:37:50.560 --> 00:37:52.720
what the macOS is showing here


00:37:52.720 --> 00:37:55.440
is somebody has the system preferences opening


00:37:55.440 --> 00:37:58.400
and they're toggling the OS dark mode, light mode,


00:37:58.400 --> 00:38:00.320
and the app is just changing as it's running.


00:38:00.320 --> 00:38:01.200
- That's awesome.


00:38:01.200 --> 00:38:02.000
- Which is very nice.


00:38:02.000 --> 00:38:02.480
- Yeah.


00:38:02.480 --> 00:38:04.400
- But I did not expect that from TK.


00:38:04.400 --> 00:38:06.200
- Okay, Andrew, not even a little bit.


00:38:06.200 --> 00:38:07.040
- I know.


00:38:07.040 --> 00:38:12.680
And then adding images is also pretty easy too.


00:38:12.680 --> 00:38:16.780
So, and even like, it even also has a map widget.


00:38:16.780 --> 00:38:18.920
I don't know what map,


00:38:18.920 --> 00:38:20.960
I thought you were using OpenStreetMap,


00:38:20.960 --> 00:38:22.560
I'm sure you could probably switch it out


00:38:22.560 --> 00:38:26.700
for maybe Google Maps or something or Mapbox or yeah.


00:38:26.700 --> 00:38:28.400
It's pretty cool.


00:38:28.400 --> 00:38:32.160
There are a bunch of other libraries,


00:38:32.160 --> 00:38:33.540
no, I mean, widgets here.


00:38:33.540 --> 00:38:40.860
They have scroll bars and buttons and option menus,


00:38:40.860 --> 00:38:41.940
sliders, a bunch of buttons.


00:38:41.940 --> 00:38:43.180
>> On and off switches,


00:38:43.180 --> 00:38:46.540
like the ones you come to know from mobile,


00:38:46.540 --> 00:38:49.580
like turning your Wi-Fi on and off and stuff. That's nice.


00:38:49.580 --> 00:38:51.060
>> Yeah, it's pretty cool.


00:38:51.060 --> 00:38:55.940
>> I am surprised that I'm excited about TK.


00:38:55.940 --> 00:38:59.460
Because as an example,


00:38:59.460 --> 00:39:03.260
so earlier in my career,


00:39:03.260 --> 00:39:06.420
I did a lot of TK UI stuff.


00:39:06.420 --> 00:39:08.420
But like you said,


00:39:08.420 --> 00:39:12.020
it looks old now if you just do the straight one.


00:39:12.020 --> 00:39:14.300
But this looks pretty nice.


00:39:14.300 --> 00:39:16.060
The nice thing about it is I


00:39:16.060 --> 00:39:19.100
already embedded that stuff in my knowledge.


00:39:19.100 --> 00:39:20.740
I already did TK once.


00:39:20.740 --> 00:39:22.760
Doing it again with this,


00:39:22.760 --> 00:39:26.020
that's pretty cool and having it look nice.


00:39:26.020 --> 00:39:30.700
I might actually try to build a UI with this. This is cool.


00:39:30.700 --> 00:39:33.460
- Yeah, this is a super neat find, Nick.


00:39:33.460 --> 00:39:36.540
I would never consider creating an app in TKinter.


00:39:36.540 --> 00:39:37.900
Well, never is a strong word.


00:39:37.900 --> 00:39:39.900
It's very unlikely I would consider anything


00:39:39.900 --> 00:39:44.860
that I intended for more consumer-facing use with TKinter.


00:39:44.860 --> 00:39:47.660
But this, for sure, I could ship something like this.


00:39:47.660 --> 00:39:48.480
This looks nice.


00:39:48.480 --> 00:39:51.940
And you wrap in a little Py2 app or Py installer,


00:39:51.940 --> 00:39:55.020
Py2exe, get something nice you can hand out,


00:39:55.020 --> 00:39:56.560
and then you're good to go.


00:39:56.560 --> 00:39:58.940
- Yeah, definitely.


00:39:58.940 --> 00:39:59.780
Sweet.


00:39:59.780 --> 00:40:01.320
(laughing)


00:40:01.320 --> 00:40:02.780
- On the audience, Brian says,


00:40:02.780 --> 00:40:05.340
"I think TK Inter looked old 10 years ago."


00:40:05.340 --> 00:40:06.180
Smiley face.


00:40:06.180 --> 00:40:09.640
- Yeah. - I think that's true, honestly.


00:40:09.640 --> 00:40:10.500
Yeah, yeah, yeah.


00:40:10.500 --> 00:40:14.200
So this is really refreshing and quite impressive.


00:40:14.200 --> 00:40:16.300
So, love it.


00:40:16.300 --> 00:40:20.060
- All right, should we switch to extras?


00:40:20.060 --> 00:40:22.040
- Yeah, Nick, you got any extra stuff you wanna cover


00:40:22.040 --> 00:40:23.100
while you got your screen up?


00:40:23.100 --> 00:40:26.140
- Yeah, actually I do have a couple of extras.


00:40:26.140 --> 00:40:29.060
- I see you even got like a named tab group of extras.


00:40:29.060 --> 00:40:30.180
Like this is next level.


00:40:30.180 --> 00:40:31.140
I know, I know.


00:40:31.140 --> 00:40:32.060
Better come prepared.


00:40:32.060 --> 00:40:33.060
Better come prepared.


00:40:33.060 --> 00:40:36.660
Alright, so the first extra I have is


00:40:36.660 --> 00:40:41.940
this web service called Terms of Service Devant Read.


00:40:41.940 --> 00:40:45.460
And essentially it takes some of the


00:40:45.460 --> 00:40:48.180
internet's most common


00:40:48.180 --> 00:40:51.780
unpopular products and services


00:40:51.780 --> 00:40:54.500
and gives you a summary of


00:40:54.500 --> 00:40:55.900
what their Terms of Service is.


00:40:55.900 --> 00:40:57.020
Because, you know,


00:40:57.020 --> 00:40:58.020
I know some of you are like,


00:40:58.020 --> 00:41:01.700
We don't need this. We all read the terms of service, you know, but


00:41:01.700 --> 00:41:03.700
basically we don't.


00:41:03.700 --> 00:41:08.540
Yeah, right at the top it says, "I have read and agree to the terms of service


00:41:08.540 --> 00:41:12.100
is the biggest lie on the web. We aim to fix that." It's so true.


00:41:12.100 --> 00:41:17.380
So true. So it has all the terms of service for a bunch of services.


00:41:17.380 --> 00:41:19.980
So I put for GitHub and GitLab.


00:41:19.980 --> 00:41:24.820
So some of them are not yet rated, but OK, for GitHub and global privacy, it's


00:41:24.820 --> 00:41:28.180
great thingy and I say for Facebook.


00:41:28.180 --> 00:41:29.500
Facebook's awesome.


00:41:29.500 --> 00:41:31.940
I mean, like the ones there


00:41:31.940 --> 00:41:34.780
when you look through your day, whether you have an account or not,


00:41:34.780 --> 00:41:39.020
your identity is used as that assurance others service can read your private


00:41:39.020 --> 00:41:45.100
messages while I like the last one, deleted content is not really deleted.


00:41:45.100 --> 00:41:46.300
I'm ready.


00:41:46.300 --> 00:41:48.260
Wait, is there another way you guys can think of?


00:41:48.260 --> 00:41:49.300
I can't think of any more. Right.


00:41:49.300 --> 00:41:50.580
You can check.


00:41:50.580 --> 00:41:51.860
Put a doctor go.


00:41:51.860 --> 00:41:53.060
Oh, OK.


00:41:53.260 --> 00:41:54.640
That's one that should come out good.


00:41:54.640 --> 00:41:55.740
Oh, it's great.


00:41:55.740 --> 00:41:56.820
Hey, look at that.


00:41:56.820 --> 00:41:58.300
Yeah, that's pretty good.


00:41:58.300 --> 00:42:00.100
And I'm still doing my live with it.


00:42:00.100 --> 00:42:04.620
Cat, kagi.com do kagi K a G I.


00:42:04.620 --> 00:42:05.940
If that's even shows up.


00:42:05.940 --> 00:42:08.940
Nah, not even there yet, but yeah.


00:42:08.940 --> 00:42:11.140
The duck duck go came out well.


00:42:11.140 --> 00:42:11.820
Yeah.


00:42:11.820 --> 00:42:12.220
Yeah.


00:42:12.220 --> 00:42:18.260
Um, it's open source, so you can contribute to this and, grade


00:42:18.300 --> 00:42:24.540
existing ones or update ones that are already on this website.


00:42:24.540 --> 00:42:26.300
So that's pretty cool.


00:42:26.300 --> 00:42:32.640
In the power of OpenSR, I think we could get a pretty good list of summaries for Terms


00:42:32.640 --> 00:42:36.460
of Service, which we know you really don't read most of the time.


00:42:36.460 --> 00:42:39.620
I'm surprised to see Reddit.


00:42:39.620 --> 00:42:47.480
The Reddit is like you sign away moral rights.


00:42:47.480 --> 00:42:49.880
>> I actually think this is great.


00:42:49.880 --> 00:42:53.980
I wish that in open-source,


00:42:53.980 --> 00:42:57.820
like the open-source world, legitimately,


00:42:57.820 --> 00:42:59.520
we could have hundreds of


00:42:59.520 --> 00:43:02.600
different open-source licenses and maybe there are.


00:43:02.600 --> 00:43:06.560
But we have a handful that most people use.


00:43:06.560 --> 00:43:09.160
As long as you understand


00:43:09.160 --> 00:43:12.080
those few and what the differences are, you're pretty good.


00:43:12.080 --> 00:43:14.900
But commercial terms of service,


00:43:14.900 --> 00:43:24.180
>> They're all unique and I really wish there was just three or four that were most software.


00:43:24.180 --> 00:43:26.860
You agree to this and we're like,


00:43:26.860 --> 00:43:32.220
"Oh, it's an MIT except for commercial use thing or whatever," or something like that.


00:43:32.220 --> 00:43:34.540
We're not going to get there, but it'd be cool.


00:43:34.540 --> 00:43:36.980
>> Yeah. It would totally be cool.


00:43:36.980 --> 00:43:38.460
>> All right. What's next? This is great.


00:43:38.460 --> 00:43:40.420
>> All right. Then a couple of quick ones.


00:43:40.420 --> 00:43:44.340
Pi, Ohio is coming up.


00:43:44.340 --> 00:43:49.060
So July 30th is Pi, Ohio.


00:43:49.060 --> 00:43:51.340
The CFP is already closed,


00:43:51.340 --> 00:43:54.180
but you can still register for it.


00:43:54.180 --> 00:43:58.060
And you know, come down to Pi, it's a one-day event,


00:43:58.060 --> 00:44:00.220
and it's down in Columbus.


00:44:00.220 --> 00:44:02.260
The convention center is pretty good.


00:44:02.260 --> 00:44:04.940
So yeah, you should check out that.


00:44:04.940 --> 00:44:08.120
And then also my company, Tremble,


00:44:08.120 --> 00:44:11.880
is having their annual insights.


00:44:11.880 --> 00:44:15.240
So this is a conference for all the players


00:44:15.240 --> 00:44:16.920
in the transportation space.


00:44:16.920 --> 00:44:18.620
So this is where we're gonna be talking about


00:44:18.620 --> 00:44:20.240
the cool things that Trimble has been doing,


00:44:20.240 --> 00:44:22.160
some of the cool thing the people


00:44:22.160 --> 00:44:25.400
in the transportation sector is doing.


00:44:25.400 --> 00:44:26.920
We're inviting our competitors,


00:44:26.920 --> 00:44:29.080
we're inviting our customers.


00:44:29.080 --> 00:44:32.320
It's one big transportation event.


00:44:32.320 --> 00:44:35.200
If any of you out there are interested,


00:44:35.200 --> 00:44:37.040
you should come in and register.


00:44:37.040 --> 00:44:38.800
- Yeah, nice.


00:44:38.800 --> 00:44:40.440
And an excuse to go to Florida.


00:44:40.440 --> 00:44:42.380
- Yes, an excuse to go to Florida.


00:44:42.380 --> 00:44:45.480
Then lastly, you guys should check out,


00:44:45.480 --> 00:44:47.580
everyone should check out the Stack Overflow


00:44:47.580 --> 00:44:49.120
to develop a survey.


00:44:49.120 --> 00:44:49.960
So I know-


00:44:49.960 --> 00:44:52.560
- Is that do the survey or is that the results?


00:44:52.560 --> 00:44:53.680
- The results.


00:44:53.680 --> 00:44:54.520
- Oh, nice.


00:44:54.520 --> 00:44:55.560
Okay, yeah.


00:44:55.560 --> 00:44:56.380
- Yeah.


00:44:56.380 --> 00:44:57.220
- Fantastic.


00:44:57.220 --> 00:44:58.080
All right, yeah, everyone should check that out.


00:44:58.080 --> 00:44:58.920
That's a good one.


00:44:58.920 --> 00:44:59.760
- Right.


00:44:59.760 --> 00:45:00.580
- Brian, how about you?


00:45:00.580 --> 00:45:01.420
Got some extras?


00:45:01.420 --> 00:45:02.320
- I do not.


00:45:02.320 --> 00:45:03.160
How about you?


00:45:03.160 --> 00:45:04.720
- All right, well then, I just gotta,


00:45:04.720 --> 00:45:05.800
I don't have much this time.


00:45:05.800 --> 00:45:07.200
So, surprise, surprise.


00:45:07.200 --> 00:45:09.920
Just the Kaggy stuff, I'm totally loving it.


00:45:09.920 --> 00:45:11.320
I got a lot to tell people about it,


00:45:11.320 --> 00:45:15.720
but you know, it's pretty good stuff these days.


00:45:15.720 --> 00:45:19.040
I'm loving it, but still loving DuckDuckGo as well.


00:45:19.040 --> 00:45:22.880
All right, but here's my one extra, OpenSSF,


00:45:22.880 --> 00:45:25.400
honestly, that's the Open Source Security Foundation,


00:45:25.400 --> 00:45:27.080
which I got to learn more about


00:45:27.080 --> 00:45:28.720
where the money comes from and whatnot.


00:45:28.720 --> 00:45:31.280
Don't know all the details, but shout out to them


00:45:31.280 --> 00:45:34.120
because they funded Python and Eclipse Foundation.


00:45:34.120 --> 00:45:36.920
So not really caring too much about Eclipse,


00:45:36.920 --> 00:45:40.200
but the Python one, they funded,


00:45:40.200 --> 00:45:43.600
what's the short version of it?


00:45:43.600 --> 00:45:48.600
So they funded, committed $400,000 to the PSF


00:45:48.600 --> 00:45:50.680
in order to create a new role.


00:45:50.680 --> 00:45:53.880
So we've had the developer and residents


00:45:53.880 --> 00:45:55.360
with Łukasz Langa.


00:45:55.360 --> 00:45:56.640
And now we have a new role


00:45:56.640 --> 00:45:59.940
which will provide security expertise for Python


00:45:59.940 --> 00:46:02.840
and the Python Packet Index via PyPI


00:46:02.840 --> 00:46:04.840
in the rest of the Python ecosystem,


00:46:04.840 --> 00:46:07.800
as well as funding a security audit.


00:46:07.800 --> 00:46:10.800
That comes to us from the Python Weekly Newsletter.


00:46:10.800 --> 00:46:12.040
That's pretty amazing, right?


00:46:12.040 --> 00:46:13.420
- Yeah, that's pretty cool.


00:46:13.420 --> 00:46:15.600
- Yeah, so that's a big deal.


00:46:15.600 --> 00:46:18.340
Anyway, that's my only real extra is that one,


00:46:18.340 --> 00:46:22.400
but you know, Waygo open SSF, that's great.


00:46:22.400 --> 00:46:23.960
All right, we ready for a joke?


00:46:23.960 --> 00:46:24.800
- Yes.


00:46:24.800 --> 00:46:25.960
- I think we've got two jokes, don't we?


00:46:25.960 --> 00:46:26.800
- Yeah.


00:46:26.800 --> 00:46:28.520
- All right, I'll go first since my screen's up.


00:46:28.520 --> 00:46:30.880
So this one is all about,


00:46:31.920 --> 00:46:33.780
It's got a Scooby-Doo theme here.


00:46:33.780 --> 00:46:38.100
So, if you've never watched the Scooby-Doo cartoons and I guess maybe


00:46:38.100 --> 00:46:41.720
this won't really relate, but they always sort of unmask what's supposed to be


00:46:41.720 --> 00:46:43.460
like a ghost or a haunted thing.


00:46:43.460 --> 00:46:45.260
And it almost, it never is.


00:46:45.260 --> 00:46:45.580
Right.


00:46:45.580 --> 00:46:47.740
So here's one of the characters.


00:46:47.740 --> 00:46:49.300
I don't Brian, do you know the name or Nick?


00:46:49.300 --> 00:46:50.260
Do you know the name of this guy?


00:46:50.260 --> 00:46:52.680
Anyway, the blonde one on Scooby-Doo.


00:46:52.680 --> 00:46:53.900
I've no, I what's that?


00:46:53.900 --> 00:46:55.180
No, I don't know.


00:46:55.180 --> 00:47:01.480
Anyway, he says there's a, there's a captured ghost, clearly not real.


00:47:01.620 --> 00:47:03.420
and it says serverless computing.


00:47:03.420 --> 00:47:04.940
Let's see who you really are.


00:47:04.940 --> 00:47:08.540
They pull the mask off and it just says servers.


00:47:08.540 --> 00:47:11.340
Let's see who you really are.


00:47:11.340 --> 00:47:13.540
Nope, you're not serverless, you're just a server.


00:47:13.540 --> 00:47:15.780
Great. Anyway, that's the one I.


00:47:15.780 --> 00:47:17.520
>> That one's from Virginia.


00:47:17.520 --> 00:47:18.940
We did AWS.


00:47:18.940 --> 00:47:24.860
>> Yeah, exactly. You came out of AWS East 1, didn't you?


00:47:24.860 --> 00:47:26.380
>> Yeah.


00:47:26.380 --> 00:47:29.220
>> All right, Nick, how about yours?


00:47:29.220 --> 00:47:31.620
You got some ways to stay healthy here?


00:47:31.620 --> 00:47:34.820
Yeah, ways to stay healthy and keep away from COVID.


00:47:34.820 --> 00:47:39.120
So, Michael, do you want to do the dialogue with me?


00:47:39.120 --> 00:47:41.720
Yeah, sure. I'll be the woman.


00:47:41.720 --> 00:47:42.720
All right.


00:47:42.720 --> 00:47:48.420
So I did a survey to find out the rate of COVID-19 infections among DevOps specialists.


00:47:48.420 --> 00:47:49.120
Oh, yeah?


00:47:49.120 --> 00:47:54.720
Yeah, and I found that DevOps are three times less likely to catch it than the regular population.


00:47:54.720 --> 00:47:55.620
Weird, right?


00:47:55.620 --> 00:47:57.720
Not really.


00:47:57.720 --> 00:47:59.340
>> Why not?


00:47:59.340 --> 00:48:02.280
>> Well, if everyone stayed home building K8 as


00:48:02.280 --> 00:48:05.860
Kubernetes stacks in their home lab,


00:48:05.860 --> 00:48:08.900
the numbers would drop pretty fast.


00:48:08.900 --> 00:48:12.960
>> It was like this news article from


00:48:12.960 --> 00:48:15.360
the Daily Coder that says,


00:48:15.360 --> 00:48:20.840
"COVID-19/Omicron Kubernetes-based isolation, very effective."


00:48:20.840 --> 00:48:25.400
>> I love it. It's honestly probably true.


00:48:25.400 --> 00:48:26.920
There is some truth to that.


00:48:26.920 --> 00:48:28.600
Yeah, yeah, I started learning.


00:48:28.600 --> 00:48:30.240
I left the basement in a whole month.


00:48:30.240 --> 00:48:32.240
How could I have caught COVID?


00:48:32.240 --> 00:48:33.600
I know, I know.


00:48:33.600 --> 00:48:36.280
I started learning about, I started fooling around with Docker,


00:48:36.280 --> 00:48:40.640
like multi-stage Docker containers for one of my apps.


00:48:40.640 --> 00:48:42.720
And I spent hours on that.


00:48:42.720 --> 00:48:43.960
I didn't leave my house.


00:48:43.960 --> 00:48:45.360
I spent hours on that.


00:48:45.360 --> 00:48:46.160
So definitely.


00:48:46.160 --> 00:48:47.440
Yeah, I've been there.


00:48:47.440 --> 00:48:48.360
Been there for sure.


00:48:48.360 --> 00:48:48.960
Yeah.


00:48:48.960 --> 00:48:54.440
I mean, we could have like completely no COVID in the country


00:48:54.440 --> 00:48:57.720
and there'd still be some software people that are like,


00:48:57.720 --> 00:48:59.240
"No, I'd rather not go outside."


00:48:59.240 --> 00:49:01.960
[LAUGHTER]


00:49:01.960 --> 00:49:04.880
>> Exactly. I like this new life.


00:49:04.880 --> 00:49:06.960
>> Yeah, I'm good.


00:49:06.960 --> 00:49:13.720
>> I said that when they said the quarantine, I'm good.


00:49:13.720 --> 00:49:17.120
I got a kick of it, and we're fine.


00:49:17.120 --> 00:49:20.240
>> Exactly. I do actually have a kick of it in terms, I'm good.


00:49:20.240 --> 00:49:21.400
>> Yeah.


00:49:21.400 --> 00:49:22.800
>> Well, speaking of fine,


00:49:22.800 --> 00:49:24.560
It has been very fun to have you on the show, Nick.


00:49:24.560 --> 00:49:25.640
Thanks for coming back.


00:49:25.640 --> 00:49:26.480
- Yeah, thanks a lot.


00:49:26.480 --> 00:49:27.480
- Thank you.


00:49:27.480 --> 00:49:29.040
Yeah, it was fun.


00:49:29.040 --> 00:49:30.800
- Yeah, and you too as well, Brian.


00:49:30.800 --> 00:49:31.680
Great to have you here.


00:49:31.680 --> 00:49:33.200
Thanks, thanks everyone.


00:49:33.200 --> 00:49:34.040
- Bye.

