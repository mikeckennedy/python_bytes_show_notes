00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 291. Recorded July 6 2022. And I'm Brian knockin. Hey,

00:00:11 Michael Kennedy. Good to see you, Michael. Yeah, good to see Brian as well. fun as always, like, it's just a never ending flow of fun stuff to talk about. I know, we got good stuff to share today, as always, yes, we do once you kick us off licensing, something everybody's super psyched about. But I think you will find this project interesting. And I don't know how you will receive it. But I was like, wait a minute, what? This is odd. So this project comes to us from Tom Nijhoff. And he sent this in and said, you know, it occurred to me that we have licenses for things like pi test. So I could go search for PI test. And over on GitHub, or my programming lens, over on GitHub, I could check this out. And what is the license? Well, it looks like the license is MIT. So if I want to use PI test, I'm buying into the MIT license, right? Yeah, kinda, sometimes, only a PI test. That's true. But you know, there are libraries like request or whatever that you might, you know, ship, right. So I'll just put pi test in here, see what we get. So this project is called Python Project Insight. And it only has about 5300 packages parsed in so far. But the idea is, you can say load the dependencies, and it'll show you the licenses. So for example, for PI tests, we have the MIT license, but pi test depends upon packaging and import live metadata and color Rama and piperazine and attars. And typing extensions. Well, packaging has the Apache license code. Rama has the BSD license. Is attars. Has MIT license. So it was by test. And then the Python Software Foundation has typing extensions. So I don't know what do you think of that?

00:01:50 It is interesting. And I don't know what

00:01:54 I don't either. I'm like, wait a minute, I have to kind of sort of consider the transitive closure of the dependencies for their licenses. And I had never really, I'm sure people are there. Well, of course, Michael, of course, that's how it works. But for me, like I hadn't really thought about I looked at the project or the library and has this license, like another one could be, you know, that you would build on before more likely would be like requests. So if we load the dependencies for requests, you have Apache BSD MIT, and Mozilla split across that one project. So yeah, I just think this is this pretty wild? Putting out that TensorFlow was one of the more wild ones. If you load up tensor flow, there's just lots of different licenses here, like sample the GitHub licensing options, basically.

00:02:39 So if I was if I was shipping a commercial project, commercial product with Python that used a whole bunch of dependencies, I do know that these this transitive closure stuff, the stuff that I'm actually shipping with, I really am supposed to list those and have those licenses listed. And somewhere in

00:02:57 a sense, because you are shipping the dependencies have a thing in order for that thing to work, right.

00:03:03 Yeah. So. So you're at least saying, I'm using this, it's here. And here's the license for it. I think that's the case. I'm not a lawyer, of course. But the the there's, there's a whole bunch of these tools like pi test, for instance, that we use, that we don't ship, those are, those are a different story. And that's kind of a different license thing. But I don't know about the packages or these like, like the packages that these are shipping, they're there. They're there. They're not really being sold. But you do have to list the licenses of the things that you're depending on? I don't know.

00:03:36 I don't know, either. I think maybe in some times, it doesn't matter. But if it was GPL, rather than LGPL, right, for example, that might be something you care about, you know, I don't know. I would love to hear people who really understand this super well, if they could like maybe tweet at us or comment on the YouTube stream or something like that about exactly what that means. But I do think it's pretty interesting. Information, like mostly, this shows the licenses, but also shows the total size of installing the project and what libraries it depends upon. So you can kind of like poke around with that as well.

00:04:09 That is, that's actually pretty useful and interesting information as well, that you don't really think about is how big a big of a divot download, do I get if I put all these things, pull these things together?

00:04:19 So yeah, and you can pile them up. So you can say, I'm using TensorFlow. I'm using SK learn. I'm using request right over and then you can say like, Okay, for those three, tell me about what the story is, you know what I mean? Yeah, and it gets a little more interesting. So I guess maybe that's not not quite right. That these kinds of sci fi but anyway, yeah, something like that. Right. Yeah. Neat. So anyway, thanks, Tom, for sending that in and share it with us.

00:04:45 Well, I think I'll switch gears a little bit and talk about data classes. So I actually really liked data classes. So we use data classes much, Mike Michael,

00:04:56 some of they definitely have some very neat property. He's, I find myself kind of when I'm on the edge of using a data class. I'm like maybe Pydantic. But Frozen is a cool option. You can add slots slots makes so many things awesome in terms of lower memory usage, faster attribute access all kinds of things. And if it's just slots equal true on the class definition, that's nice.

00:05:20 Yeah, it is. So Trey Hunter is a Python trainer. And he, he has he came up with this cool tool on his Python martial site called the undated class. And it's actually also a library that he released a little tool, it's undated class, any ideas? He was thinking, like, what would be the equivalent of a data class, if you didn't write a data class, if you if you wanted to have the same sort of functionality? What would you do in a normal class, so he's got this cool tool down, and the example shows, it shows here, slot, just a point with XYZ all floats, and also shows frozen sets and slots, but I'm gonna turn those off, and you just change the class and it changes the output and it like, be like, prints out what an equivalent class would be, if you didn't, if you didn't use data classes. So actually, I'm not. And I tried to make sure I understood all of this. So one of the things that it's kind of neat that it just, it's part of a learning tool, these got that it shows you, you know, what you get with data classes, but there's not a lot of description around like what all this means. So this is sort of a fun thing to help you look up stuff, I guess. So right off the bat, if we just have X, Y, and Z, you have an A Dunder a net that takes x, y, and z's as input values and assigns them and it comes with a nice wrapper class, and then an EQ, Dunder EQ, which is to for equality. And one of the things I knew I wanted to look up was to make sure I understood is what it does is it says if, if, if the other thing if I'm getting me getting compared to something else, is that other things are also my same type in this point, point, in this case point, then then you can do the the equality comparison otherwise, to raise a not implemented, and that's just kind of a convention, because Python, and then what happens is, Python will try to call EQ on the other thing of like, reverse the order and stuff because it's kind of how Python works. But it's one of those hidden sort of things as you need to kind of know that if, if, if you don't know what to do an EQ class, or an EQ function, raise not implemented and then Python goes from there. Um, and then yeah, resetting, though, if you if you give it as slots, all the slots does is add slots to it. And that's it, which is kind of cool. And what slots does, yeah. And what slot says is it makes it so that you can't add later. So if you can't add a W attribute later, to your point, but then if you do frozen, it does a whole bunch of stuff. Oh, you get a whole bunch more Dunder methods, but mostly these are just raising, raising an exception so that, you know, if you try to change it raises an exception. So anyway, this is kind of cool. Yeah. Do you

00:08:07 see the Dunder knit the constructor implementation when you add frozen, doesn't say self dot x, it calls set adder like behind the scenes, and the M, it's set at her and Dell at her and raises exceptions, if you try to mess with it pretty well. That's

00:08:23 cool. The we're also going to link to a couple, a couple articles that, that Trey wrote about, he wrote about this, about how he wrote this. And one of the things I really I'm bringing this up card, partly because I like data classes, and it's kind of cool for people to learn what they are. But in his developing this, he says he came up with having a great use case for the match case, new Match Case blocks in Python, using Sentinel objects, which I'm not sure what he's talking about there. So I'll take that, look at that, using text wrap D dent, which I love. And it's nice to see somebody else using that slice. And then ASDs was using ESD in here. So it's kind of a cool, fun example of using that. Anyway,

00:09:09 cool. Try out a lot of cool stuff and actually go back to the first one, the first tab you got there. Yeah, one of the things I appreciate from this example is you just say class point x colon float y colon float Z colon float. Yeah, put the data class attribute on it. Look how much it's doing for you. Right? Like it's not just the type values but it's protecting the readwrite ability making a read only it's getting a rapper definition. It's getting a hash ability, equality, not equality effectively by Alright, there's a lot of cool things it's adding for you there. Yeah. And he's, he's depreciate the data class.

00:09:42 He's suggesting doing other stuff like using keyword only and deal fields, different fields to see if you can change how it works. But yeah, I'll have to play with this more. And a reminder to everybody that has is, is like data classes are almost enough but you Need more. We'll also look at adders, because adders is kind of a superset of data classes.

00:10:04 Right? Yeah. Fantastic. That's great. Cool. I find the next one I got here. This one's for you. Okay. All right. All right. So let's go back, we'll take a to a two step process to approach this. Did you ever use links L, Y and X?

00:10:20 Yeah, like a long, long time ago.

00:10:22 I remember, SSH. I know, I think I telnet it into the mainframes, back of the university. And after an L, y, and x, this predated the graphical web. I mean, it's seen, right. So but it's a browser, that is pure text in the terminal. Today, we have all these fancy browsers. But one of the things you had a lot of is like keyboard shortcuts and other types of things you could do, right? Yeah. Well, now that it's 30 years later, what if we could go back to a time a little bit like that? So I want to introduce you to the cute browser qu te browser. Okay. Okay. So what is this, the cute browser is also like, kind of in need of a homepage refresh. But it's a keyboard focused browser with a minimal GUI. And what's interesting is it's built with Python. Okay, so it's a full web browser built with Python. And it's kind of like a, like a vamper, or one of these other ones that lets you do vim like control and behavior of it's a little bit like that a little bit like links, but it's actual, actually Chrome, more or less, at least the Chrome runtime. So this one was sent in and want to make sure I give him credit for giving a shout out. This was sent in to us by Martin Boris. And it's, it's pretty neat. So it's a browser, let me switch up my screen share just for you for a sec. Stop, and then I'm gonna add the cute browser, or any where is it? There? All right. So look at this bad boy. So this is the browser and how do I go to places? Well, I can click on things like here's a link, I can click on. But if I want to go somewhere, I press O, and it pulls up a place I can open look at this, I got my history, let's say I want to go to like, go to talk Python. If I want to do a command, I hit colon. And here's all my commands. I've liked my tab, give focus and control and so on over here, and it's type F. So if I wanted the phone to navigate, for example, I'm here on The Talk Python page. What if I want to go to Courses, I type F and then everything so everything gets a letter of of it pretty great. Yeah, LDD G, if I want to go to D, I just press D and then more often the talk while I'm training site, and so on. So I could open. Or I could say open, and I could search for PI test. And I'll pull up my tests and so on. And I can do a new tab. I gotta remember how to do that. Yeah, well as the tab clone. And I come over here, I know there's a bunch of good commands that I'm not falling, like very much like if I was actually using Vim. Yeah, if I could search for PI test book, I can come over here, right? Like that. And I can hit Ctrl, or Windows Control. Ooh, that's

00:13:00 good book.

00:13:01 I heard this good book. So I can like cycle through my tabs. He'll minimal my tabs are and stuff there. Oh, yeah. On the bottom, it's got all these little commands. So anyway, and I can type colon Q, boom, we're out. Nice. What do you think of this? Yeah, you get that?

00:13:14 I actually love the cute browser. I haven't used it much. But I definitely know about it, because the Florian Bruin, who started the browser, he's, he's a PI test core contributor, and also one of the technical reviewers for the PI test book. So really cool guy. But I love the idea of being able to just use a browser with a keyboard and not have to touch the mouse at all. That's like, that's, that's next level.

00:13:39 It's pretty neat. Yeah. Yeah, let's see. Out in the audience, Kim Fenwick. Hey, Kim says I were just resigned myself to using a mouse more than I want to cute browser may be the way to go. Thanks for the tip also, yeah. And Alvaro says Are those VS code shortcuts, I suppose only if you have the VIM bindings set in VS code, but then I sort of Yes,

00:14:00 of course you do. Why wouldn't you?

00:14:03 Or your monster?

00:14:04 Good. Can you do? Can you even do emacs bindings, and

00:14:08 I don't know. You could do non vim bindings. Yeah. Right. But then then people would look down on your right brain, but um, I don't do them stuff in my I know that you probably do though.

00:14:18 Yeah, I use Vim everywhere, especially in VS code. So nice. But But I think people should check it out. It's kind of a cool project. And also it helped push forward some of the some some tightest things. We got some new features because of this school.

00:14:36 Yeah, that's great. I installed it with homebrew. So that was easy to install. You can start with apt on Linux, Master about Windows, but they've got a quickstart guide so you can follow along to see like, you know what, what you might want to do like it's, it's not super obvious. No, that cheat sheet hurts do

00:14:53 is have a eye chart, a binding. It's a bit of

00:14:57 an eye chart. I suspect you consume it. As small, it's small. But yeah, I do like the navigation pressing like F and then just a letter to navigate instead of using your mouse to follow the links, that's pretty cool.

00:15:11 Do you remember those, like, those templates that people used to have, like back in the day for, like in, like Office tools where they would overlay? Oh, it

00:15:21 was actually an overlay on your keyboard? Yeah, we

00:15:23 go over that, like the function keys to the so that you can remember which functions did what, during what? application? And if you switch to word you put a different probably WordPerfect at the time, you put a different template over it. And

00:15:36 yeah, how to use Lotus 123 Give me the function key

00:15:38 over. Yeah. Okay. I'm just like that it is showing how old I am. So let's talk.

00:15:46 I'll teach that in college. Yeah.

00:15:50 Although in college, I had to I had to teach I was a TA for like, a computer's one on one class. But during grad school, and Lynx was one of the things we had to teach. And there was like, nobody ski really is this. Yeah. But it was part of the curriculum. retable Yeah. So that's awesome. Anyway, so let's switch to something new, like async? So um, oh, yeah, I think we've talked about CT probably several times. And CT is a it's like flask, but it's async. It actually is the is the does the entire supports the flask API, or I think, and sort of looks the same, but it's async. Instead, that there's a

00:16:31 super close, you can basically everywhere you have the word flask, if you replace it with the word cord, it more or less works. So like lower clay like import lowercase f flask, you import lowercase core, if you create an object capital F flask, you'd use capital cord, and then it lets you do async basically cool.

00:16:48 But there's ecosystem around both of them now. So there are extensions to flask, some of them work on court, there's extensions to court, I don't know if any of those work on flask. But the people in behind both of them kind of are supportive of the whole thing. And so court is actually now part of the pallets project was is the big news. And pallets is the the project that includes flask and a whole bunch of other stuff. But it because of this, it will help maybe the maintainers kind of work together a little bit better and smoother to iron this out. So the big, big difference, of course, is that flask has a whiskey server behind it servers rightward. And in court is ASCII. So asynchronous, but the the it's to this is cool. Why do we care a little bit is that big. It used to be that really you had to do a saying if you wanted a sake, you had to do CT. But now flask as of last 2.0, you do have some some async capabilities, but it's still using a single threaded server. So there's there are some limitations. So kind of interesting to read about this. There is a a async and await page on the flask website that talks about really what the trade offs are with the performance in the background tasks, how to do that, within without go swish, shifting the cord, but then also talks about at some point, you might want to just switch the cord instead. The along this line is I was thinking about about this partly while I was looking at this other article from Steve pate that called should you use async on your next Python web application, which I was oh, I wanted to bring this up because I was curious about what your take on it was. The first part is it's a really nice history. It talks about the history of web server interfaces with Python with with the timelines and and whiskey and ASCII. And, and then how async IO came in into play and how you via corn is popular and unicorn. G I don't know how to say that.

00:19:11 I'm pretty sure it's G unicorn because it's short for a green unicorn. Okay, the last bit shouldn't still be pronounced unicorn. So I'm gonna go with G.

00:19:19 Okay. And then there's HyperCard, which is the asynchronous web server that's similar. Anyway, so it talks about this, but then at the end the conclusion and talks about all the different frameworks, and the conclusion is, most people don't need a sync on their web server. And, and I was curious at what your what your reaction to this conclusion was.

00:19:42 I have some thoughts, but let me pull up some first. Okay, so here's my thought. It depends. It depends on how far you need to push it towards the edge. I was surprised how far you can get without async in terms of concurrency, okay, so I recently did a an in person class, imagine that over over zoom, but you know, live in person actually have some more say by that's kind of related. But anyway, I just did a course with some folks are doing fast API and they said, Look, this async stuff that we're doing, add some complexity to the way that we got to write code. And we're not sure whether or not there's a trade off. So what we did is we actually ended up writing a fast API app with using the sink, and the async version of SQL alchemy, and then using a sink and an async version of fast API endpoints, okay, okay, with the database that we had as the back end. And the database was not the limiting factor, because it was at like, 10% CPU. While this was happening, it was just chillin. But with a real database, Postgres as the back end, what we found was, we could do, I can remember this right? I have boy, I'll give you I can certainly give you the the relative bit. So with the synchronous version, we got way more scalability than we thought. So it was like 75% performance of the async version. So that seems way higher, because the database had like most of the things we were doing just waiting on the database. But because we are running in G unicorn with unicorn workers, I was really just in G unicorn with threads. You know, Python doesn't do threading well, except when it's listening on a network socket, or doing a few other things that will release the Gil. And guess what, when you're talking to database, you're listening to network socket. So there's all these points that naturally free up threading, interesting, and actually got us like, 75% of the way there, but we still got 25 to 30%, more performance out of the async version. And it was like, I think it was five worker processes running on my eight core machine talking to Postgres, and we were getting to like, you know, 2000 requests per second versus 1500. A second, or maybe it was 1000 1500, something like that was a lot of requests per second. But we did get more performance out of the async version. So my depends is like that last 25. Are you like that close to your performance? I would say 95% of the web apps are not maxed. Right, they're not maxed out with like multiple servers trying to deal with it. Right now. 95% of servers are doing important work, but they're probably still have a lot of capacity left. So it's like it depends on like, art, do you need that last 25%? Or does it not really matter?

00:22:24 Yeah. Yeah. And also, like,

00:22:26 those are my thoughts.

00:22:27 What's the load? Like, on your typical? I mean, what are your levels? Anyway? Right. So if you if you already have, like, for instance, if you already have an application running, you can measure it and see, see what your load is looking like, and how many people you have. And then if you if you think, Oh, I might, I might increase my, what if we double, then you can kind of guess what your loads gonna look like, if you double and stuff. So interesting.

00:22:54 One of them, I recommend people check out this Lucas thing, because it's so easy to say, a typical user clicks on the page, between five and 15 seconds, they might go login, some of the time, they might go hit a homepage that might hit the about and then you can say, I would like to see how many users I can take. And if if you're 10x, what you need, you know, it doesn't matter whether you use a sink or not. But there is a performance benefit. It's just not as massive as it might sound.

00:23:19 The other bit that I want to like point out is the the one one statement that like it depends on what you're using also, like, I can't, can't find the bit here. But he was talking about how one application he had, he was thinking about, Oh, I might I might do async, except for he was using a payment gateway that didn't have an async version. So he had to use a synchronous for that. And since a synchronous somewhere, you kind of have a is this true? If it's synchronous somewhere, you have to be synchronous everywhere or that not really true. You know,

00:23:52 if sorry, say that if it's sync async is async, or sink, it's sink everywhere.

00:23:57 Either one is either one of those true if I like if I have gotten an application and I do need to hit a gateway that's synchronous, do I need to have isolated I guess I can probably do a synchronous and hide it that way. But

00:24:12 yeah, I mean, you're you just don't get as good a scalability. Yeah, they are. And you kind of block up the processing. If you do the sync for the async. One. You can do like a wrapper where you say like, we're going to do some async work, but I'm just going to call that and block because all the other stuff above it doesn't want to deal with being async. So it's easier to go from sync to async to like, have part of it be async the other way around is a little more tricky. It can mess it up a bit. Okay, cool. Yeah.

00:24:39 Nice. interesting conversation. Thanks a lot.

00:24:41 Absolutely. Sure. Is that it is that all of our items

00:24:45 are? I think, done a lot more. I think so.

00:24:48 Yeah. What have you got any extra scores?

00:24:51 I don't know. Okay.

00:24:53 I have some amazing. Pull them up here. Lucas. Look, let me tell you about it now. It's great. All right. No, I have three things I want to tell people about number One is I did a talk at Python web conference, that HTML and flask one that I've done in some other places. But that was a fun talk like a 45 minute flask plus h Timex goodness there. And so that video along with all the other Python web conf 2022. Talks are now on YouTube. So people can check that out. Cool, you know, that the Python web conference had five days, and I think it was like four or five tracks all day. So there are a ton of videos, there's like, 150 videos or something on there. I mean, look at the scroll bar here is probably gonna like pages I get to the bottom to Yep. Look at that. So there's a lot of talks that people can come check out if they're interested in that. htm X that I did.

00:25:46 Yeah, I want to, I want to watch your talk. You've given that a couple of times for me. Yeah.

00:25:49 Yeah, I've gave a couple of times. Basically, the way it works is like what I was working on that course and really like playing with those ideas. I submitted to a bunch of conferences, and those conferences were either a year out or they were like, a month out or something right. They ended up so spread out. But the other one is, I mentioned the browser. That was fun. But how about the browser, a source? Mac OS only tool, but there's probably something like it for the others. So here's the thing, I suppose I'm in type hora, which is a Markdown editor, or I'm in PowerPoint, and it's got a link and I click it. By default, it opens in the default browser. But depending on what you're doing, you might want it to be like, Oh, sometimes I wanted to open in Vivaldi. But other times they wanted to open in like, say the cute browser Orion or some odd thing like that, right? So the idea with this thing is that you click a link, and when it opens up, instead of opening in the default browser, the browser a source is the default. And then you have keyboard shortcuts like s for Firefox, IE for EDG s for Safari, and you say Well, which one do you want to open in right now? And it basically just delegates to the different browsers you register it with. So you hit T for tour or F for Firefox when you click a link? That's pretty cool. Right?

00:27:01 That is pretty cool. Yeah.

00:27:02 I haven't been convinced that I would use that or not. I do appreciate and I feel like maybe someone sent that in. And if they did, I'd really appreciate it. But yeah, I don't have any notes who sent in it. So anyway, that's pretty cool. If you if you find yourself, you know, copy link go into different browsers a lot. And you're on Mac. I know that's like a small, rapidly decreasing Venn diagram. But if you're in that space, this might be a cool option for you. Yeah, I'm just speaking with anyway. TypeScript mostly.

00:27:30 Okay, so speaking of browsers, I just found this because I was like, Is links dead? Can I use something like links now? And there's, there's a, there's a browser called brouse, which is a text based browser. So that's still a thing. Cool. Try this out.

00:27:44 Oh, my gosh, I love it that it kinda has text but it like eight bit pixelated. Yeah, it takes the pictures, but it it kind of takes the images and makes them look like what you would get off to give this funny. Yeah. And you run it in Docker? Of course you do. All right. Pretty cool. All right. Oh, yeah. Got one more before we get to our joke. Okay. The other one is, I talked about doing a live class. So I actually have an announcement for a live class that I'm doing. So obviously, people know, I have a bunch of online courses. And of course, I'm gonna keep I'm already working on the next one of those. And we got a bunch coming there. But I want to try some experiment, some something where people can attend a class in person with other people, right? If they sort of help each other along, and I've tried this before this cohort thing, but I think I've got a better platform and better way to do it. So over at slink, I'm gonna put in the show notes. I'm doing a fast API and MongoDB. So basically, fast API Pydantic beanie and MongoDB. Course, that is going to be a four day six day course over two weeks. And it has a couple hours a day. And oh, wow, we have a bunch of people there working together and some fun stuff. And I'll be live teaching every session. So it's going to be like a live course, as if you were to in person just remotely because it's 2022. And it's not a I guess it's not post post COVID All the way. But anyway, it's got a really cool set of topics that we cover talks about acing it talks about Mongo beenie Pydantic. Fast API. Of course, we even use locusts at the end to test it out.

00:29:25 I'm, I think this would be fun. This looks great. Cool.

00:29:29 Yeah. Awesome. I think it'll be fun to I think it'll be neat to have this experience with people. And I've tried this before, but all my prior attempts were they were good, I think but they were like, take the online course. And then we'll do like a community type thing. This is like a live course that I'm just teaching one off for that group of people that sign up. So let's see how that goes. If it goes really well. People love it, then I'll do more of these. If not, then maybe less of them. I don't know. We'll see how it goes. But this is happening August 8 and 19th. So it has a good date because it has a real live aspect to it. Nice All right. Well, TSA and Mario on the I says that's my stack right there. Oh, yeah, that's a good stack. Right. It's there's some really good stuff to talk about them. I've been using beanie and fast API for stuff and obviously mug.

00:30:13 Yeah. Speaking of courses, one question out there. How's the PI test course going? It is going. It's, it's, it's creeping forward, but it's life has gotten in the way. And

00:30:27 that's awesome that you're having. Yeah, it's awesome to work on that. It takes a while to create a course doesn't it

00:30:31 longer than I thought. I'm like, Man, I already wrote the book. I can totally pop a course out like couple days.

00:30:38 Of course, would you say that? Like as a junior developer, you might think about this differently than after somebody's been doing for a while.

00:30:44 Yeah, I just it's cracked me up. So I can't remember how you got here on somebody shared on Twitter. Sorry, Kitt. I don't know who but Okay, so in a job interview, you've got somebody gets asked, Where do you see yourself in five years. And the junior developer in this interview question like is shows a picture of like, you know, the black hoodie with multiple screens and light up keyboard? Just Hey, I'm in hackers. I

00:31:13 have screens? Yeah. Totally coding. Yeah.

00:31:16 Senior Developer. Where do you see yourself in five years on a farm?

00:31:21 Pumpkin farming with cows and apples and yet I'm about done.

00:31:26 Yeah, I my my personal thoughts are Why not both? This is just a view events. It the inside is Office and then outside? Working from home, man.

00:31:36 That's right. Working from home. Yeah. All right. I have maybe the one that preceded that the one that or maybe is in between these two that might precipitate the second. All right. So this is a tweet. From programming. Humor is a strange language that Jas JavaScript is such a strange language. Nobody can understand it. But if they manage to, then they create their own framework. Everyone's got their JavaScript front end framework or something like that.

00:32:03 Yeah. And you know, you've made it when the framework you've invented starts showing up on job requirements.

00:32:10 That's right. With with four years experience when it's only two years old.

00:32:14 Exactly. Yep. Well get up. So Michael, thanks for showing up again. You bet.

00:32:20 fun as always, thanks, everybody.

00:32:23 In this slack and everything by better

