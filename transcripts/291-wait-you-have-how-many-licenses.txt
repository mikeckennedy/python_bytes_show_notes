00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 291, recorded July 6, 2022, and I'm Brian Hawkins.

00:00:11 Hey, I'm Michael Kennedy.

00:00:12 Good to see you, Michael. It's been a while.

00:00:14 Yeah, good to see you, Brian, as well. Fun as always.

00:00:16 There's just a never-ending flow of fun stuff to talk about. I know we've got good stuff to share today, as always.

00:00:21 Yes, we do. Why don't you kick us off?

00:00:24 Licensing. Something everybody's super psyched about.

00:00:27 But I think you'll find this project interesting, and I don't know how you'll receive it, but I was like, wait a minute, what? This is odd.

00:00:36 So this project comes to us from Tom Nyhoff, and he sent this in and said, you know, it occurred to me that we have licenses for things like pytest.

00:00:46 So I could go search for pytest, and over on GitHub, or my programming lens, over on GitHub, I could check this out.

00:00:54 And what is the license? Well, it looks like the license is MIT.

00:00:57 So if I want to use pytest, I'm buying into the MIT license, right?

00:01:01 Yeah, kind of.

00:01:02 Maybe. Sometimes.

00:01:04 Only if you ship with it.

00:01:05 So it's going to be able to put pytest.

00:01:06 That's true.

00:01:07 But, you know, there are libraries like Request or whatever that you might, you know, ship, right?

00:01:11 Yeah.

00:01:11 So I'll just put pytest in here and see what we get.

00:01:13 So this project is called Python Project Insight, and it only has about 5,300 packages parsed in so far.

00:01:20 But the idea is you can say, load the dependencies, and it'll show you the licenses.

00:01:26 So for example, for pytest, we have the MIT license.

00:01:29 But pytest depends upon packaging and import lib metadata, and Colorama, and PyParsing, and Adders, and typing extensions.

00:01:36 Well, packaging has the Apache license.

00:01:39 Colorama has the BSD license.

00:01:41 Adders has MIT license.

00:01:44 So does pytest.

00:01:45 And then the Python Software Foundation has typing extensions.

00:01:48 So I don't know.

00:01:49 What do you think of that?

00:01:50 It is interesting.

00:01:51 And I don't know what to do with it.

00:01:53 I don't either.

00:01:55 I'm like, wait a minute.

00:01:55 I have to kind of sort of consider the transit of closure of the dependencies for their licenses.

00:02:02 And I had never really, I'm sure people are there, well, of course, Michael.

00:02:06 Of course, that's how it works.

00:02:07 But for me, I hadn't really thought about it.

00:02:09 I look at the project or the library and it has this license.

00:02:12 Like another one could be, you know, that you would build on before, more likely would be like requests.

00:02:17 So if we load the dependencies for requests, you have Apache, BSC, MIT, and Mozilla split across that one project.

00:02:24 So, yeah, I just think this is pretty wild.

00:02:27 I'm pointing out that TensorFlow is one of the more wild ones.

00:02:31 If you load up TensorFlow, there's just lots of different licenses here.

00:02:36 Like sample the GitHub licensing options, basically.

00:02:39 So if I was shipping a commercial project, a commercial product with Python that used a whole bunch of dependencies, I do know that this transitive closure stuff, the stuff that I'm actually shipping with, I really am supposed to list those and have those licenses listed in somewhere.

00:02:57 Right, in a sense, because you are shipping the dependencies of a thing in order for that thing to work, right?

00:03:03 Yeah, so you're at least saying, I'm using this, it's here, and here's the license for it.

00:03:09 I think that's the case.

00:03:10 I'm not a lawyer, of course.

00:03:11 But there's a whole bunch of these tools, like pytest, for instance, that we use that we don't ship.

00:03:18 Those are a different story.

00:03:20 And that's kind of a different license thing.

00:03:23 But I don't know about the packages.

00:03:25 Are these like the packages that these are shipping?

00:03:28 They're there.

00:03:29 They're not really being sold.

00:03:31 But do you have to list the licenses of the things that you're depending on?

00:03:35 I don't know.

00:03:35 I don't know either.

00:03:37 I think maybe in some times it doesn't matter.

00:03:40 But if it was GPL rather than LGPL, right, for example, that might be something you care about.

00:03:46 You know, I don't know.

00:03:46 I would love to hear people who really understand this super well, if they could like maybe tweet at us or comment on the YouTube stream or something like that about exactly what that means.

00:03:56 But I do think it's pretty interesting information.

00:04:00 Like mostly this shows the licenses, but it also shows the total size of installing the project and what libraries it depends upon.

00:04:07 So you can kind of like poke around with that as well.

00:04:09 That is that's actually pretty useful and interesting information as well that you don't really think about is how big of a download do I get if I put all these things, all these things together?

00:04:19 So, yeah.

00:04:20 Yeah.

00:04:20 And you can pile them up.

00:04:22 So you can say I'm using TensorFlow.

00:04:23 I'm using SK Learn.

00:04:26 I'm using Request or whatever.

00:04:29 Then you can say like, OK, for those three, tell me about what the story is.

00:04:33 You know what I mean?

00:04:34 Yeah.

00:04:34 And it gets a little more interesting still.

00:04:36 I guess maybe that's not quite right.

00:04:38 But that just comes with SciPy.

00:04:40 But anyway, yeah.

00:04:41 Something like that, right?

00:04:42 Yeah.

00:04:42 Yeah, neat.

00:04:43 So anyway, thanks, Tom, for sending that in and sharing it with us.

00:04:45 Well, I think I'll switch gears a little bit and talk about data classes.

00:04:51 So I actually really like data classes.

00:04:53 Have you used data classes much, Mike?

00:04:55 Michael?

00:04:56 Some, they definitely have some very neat properties.

00:05:00 I find myself kind of when I'm on the edge of using a data class, I'm like, maybe Pydantic.

00:05:05 But Frozen is a cool option.

00:05:07 You can add slots.

00:05:09 Slots makes so many things awesome in terms of lower memory usage, faster attribute access,

00:05:15 all kinds of things.

00:05:16 And if it's just slots equal true on the class definition, that's kind of nice.

00:05:20 Yeah, it is.

00:05:21 So Trey Hunter is a Python trainer.

00:05:24 And he came up with this cool tool on his Python morsels site called the undata class.

00:05:30 And it's actually also a library that he released, a little tool that's undata class.

00:05:35 And the idea is he was thinking, like, what would be the equivalent of a data class?

00:05:40 If you didn't write a data class, if you wanted to have the same sort of functionality, what would you do in a normal class?

00:05:46 So he's got this cool tool down.

00:05:48 And the example shows, yeah, it shows here slots, just a point with XYZ, all floats, and also shows frozen sets and slots.

00:05:58 But I'm going to turn those off.

00:05:59 And you just change the class and it changes the output.

00:06:03 And he prints out what an equivalent class would be if you didn't use data classes.

00:06:10 So actually, I'm not, and I tried to make sure I understood all of this.

00:06:15 So one of the things that it's kind of neat that it just, it's part of a learning tool that he's got that it shows you, you know, what you get with data classes.

00:06:23 But there's not a lot of description around, like, what all this means.

00:06:26 So this is sort of a fun thing to help you look up stuff, I guess.

00:06:30 So right off the bat, if we just have XYZ, you have a dunder init that takes XYZ as input values and assigns them.

00:06:38 And it comes with a nice wrapper class.

00:06:41 And then an EQ, a dunder EQ, which is for equality.

00:06:45 And one of the things I wanted to look up was to make sure I understood is what it does is it says if the other thing, if I'm getting compared with something else, if that other thing is also my same type in this case point, then you can do the equality comparison.

00:07:03 Otherwise, the raise and not implemented.

00:07:05 And that's just kind of a convention because Python.

00:07:09 And then what happens is Python will try to call EQ on the other thing of like reverse the order and stuff because it's kind of how Python works.

00:07:18 But it's one of those hidden sort of things is you need to kind of know that if you don't know what to do in an EQ class or an EQ function, raise not implemented.

00:07:28 And then Python goes from there.

00:07:30 And then resetting, though, if you if you give it slots, all the slots does is add slots to it.

00:07:39 And that's it, which is kind of cool.

00:07:41 And what slots does.

00:07:42 Yeah.

00:07:43 And what slots does is it makes it so that you can't add later.

00:07:46 So if you can't add a W attribute later to your point.

00:07:51 But then if you do frozen, it does a whole bunch of stuff.

00:07:55 Oh, you get a whole bunch more dunder methods.

00:07:57 But mostly these are just raising raising exceptions so that, you know, if you try to change it, it raises.

00:08:04 So anyway, this is kind of cool.

00:08:06 Yeah.

00:08:06 Do you see the dunder in it, the constructor implementation when you add frozen?

00:08:11 It doesn't say self dot X.

00:08:13 It's a it calls set adder like behind the scenes.

00:08:17 And then it implements set adder and del adder and raises exceptions if you try to mess with it.

00:08:22 Pretty wild.

00:08:23 That's cool.

00:08:25 We're also going to link to a couple a couple articles that that Trey wrote about.

00:08:31 He wrote about this, about how he wrote this.

00:08:34 And one of the things I'm bringing this up partly because I like data classes and it's kind of cool for people to learn what they are.

00:08:41 But in his developing this, he says he came up with having a great use case for the match case, new match case blocks in Python using Sentinel objects, which I'm not sure what he's talking about there.

00:08:55 So I'll take that.

00:08:55 Look at that.

00:08:56 Using text wrap ddent, which I love.

00:08:59 And it's nice to see somebody else using that slice.

00:09:03 And then an AST.

00:09:04 So he's using AST in here.

00:09:05 So it's kind of a cool, fun example of using that.

00:09:08 Anyway.

00:09:08 Cool.

00:09:09 Yeah.

00:09:09 A lot of cool stuff.

00:09:10 And actually, go back to the first one.

00:09:11 The first tab you got there.

00:09:13 Yeah.

00:09:13 One of the things I appreciate from this example is you just say class point, X colon float, Y colon float, Z colon float.

00:09:19 Yeah.

00:09:20 And put the data class attribute on it.

00:09:21 Look how much it's doing for you, right?

00:09:23 Like it's not just the typed values, but it's protecting the read-write ability, making it read-only.

00:09:30 It's getting a wrapper definition.

00:09:32 It's getting a hash ability, equality, not equality effectively by.

00:09:37 All right.

00:09:37 There's a lot of cool things it's adding for you there.

00:09:39 Yeah.

00:09:40 And he's-

00:09:40 He can appreciate the data class.

00:09:42 He's suggesting doing other stuff like using keyword-only and fields, different fields to see if you can change how it works.

00:09:51 But yeah, I'll have to play with this more.

00:09:53 And a reminder to everybody that is like data classes are almost enough, but you need more.

00:10:00 We'll also look at adders because adders is kind of a superset of data classes.

00:10:04 Right.

00:10:05 Yeah.

00:10:05 Fantastic.

00:10:06 That's great.

00:10:06 Cool.

00:10:07 All right, Brian, the next one I got here.

00:10:09 This one's for you.

00:10:10 Okay.

00:10:10 All right.

00:10:11 All right.

00:10:11 So let's go back.

00:10:13 We'll take a two-step process to approach this.

00:10:17 Did you ever use Lynx?

00:10:18 L-Y-N-X?

00:10:19 Yeah, like a long, long time ago.

00:10:22 I remember SSH.

00:10:24 I know.

00:10:24 I think I telneted into the mainframes back of the university and I'd run L-Y-N-X.

00:10:31 This predated the graphical web.

00:10:33 I mean, it's insane, right?

00:10:35 So, but it's a browser that is pure text in the terminal.

00:10:38 Today we have all these fancy browsers, but one of the things you had a lot of was like

00:10:42 keyboard shortcuts and other types of things you could do, right?

00:10:45 Yeah.

00:10:46 Well, now that it's 30 years later, what if we could go back to a time a little bit like

00:10:51 that?

00:10:51 So I want to introduce you to the Qt browser, Q-U-T-E browser.

00:10:56 Okay?

00:10:57 Okay.

00:10:57 So what is this?

00:10:59 The Qt browser is also like kind of in need of a homepage refresh, but it's a keyboard focused

00:11:05 browser with a minimal GUI.

00:11:07 And what's interesting is it's built with Python.

00:11:10 Okay.

00:11:10 So it's a full web browser built with Python.

00:11:13 And it's kind of like a, like a Vimper or one of these other ones that lets you do Vim

00:11:19 like control and behavior of it.

00:11:21 A little bit like, a little bit like links, but it's actual, actually Chrome more or less,

00:11:27 at least the Chrome runtime.

00:11:28 So this one was sent in.

00:11:31 I'm going to make sure I give him credit for giving a shout out.

00:11:33 This was sent in to us by Martin Boris.

00:11:35 And it's, it's pretty neat.

00:11:38 So it's a browser, let me switch up my screen share just for you for a sec.

00:11:41 Stop.

00:11:43 And then I'm going to add the Qt browser.

00:11:45 You ready?

00:11:46 Where is it?

00:11:47 There.

00:11:47 All right.

00:11:48 So look at this bad boy.

00:11:49 So this is the browser.

00:11:51 And how do I go to places?

00:11:53 Well, I can click on things like here's a link I can click on.

00:11:56 But if I want to go somewhere, I press O and it pulls up a place I can open.

00:12:01 Look at this.

00:12:01 I got my history.

00:12:02 Oh, that's pretty cool.

00:12:03 I want to go to like, I'll go to talk Python.

00:12:06 How do I, if I want to do a command, I hit colon and here's all my commands.

00:12:10 I've like my tab, I give focus and control and so on.

00:12:14 Over here and it's type F.

00:12:16 So if I want to, if I want to navigate, for example, I'm here on the talk Python page.

00:12:21 What if I want to go to courses, I type F and then everything, see how everything gets a letter above it.

00:12:26 That's pretty great.

00:12:27 Yeah.

00:12:27 L, D, D, G.

00:12:28 If I want to go to D, I just press D and then we're off on the talk by then training site and so on.

00:12:33 So I could open, I could say open and I could search for pytest and I'll pull up my tests and so on.

00:12:40 And I can do a new tab.

00:12:42 I got to remember how to do that.

00:12:44 Yeah.

00:12:45 We're going to say tab clone.

00:12:46 And I come over here.

00:12:47 I know there's a bunch of good commands that I'm not following.

00:12:49 Like very much like if I was actually using Vim.

00:12:52 Yeah.

00:12:53 If I could search for pytest and book, I could come over here, right?

00:12:55 Like that.

00:12:56 And I can hit, is it control or Windows control?

00:13:00 Ooh, that's a good book.

00:13:01 Yeah, I heard that's a good book.

00:13:02 So I can like cycle through my tabs, see how minimal my tabs are and stuff right there.

00:13:05 Oh yeah.

00:13:06 It's on the bottom.

00:13:06 It's got all these little commands.

00:13:08 So anyway, and I can type colon Q.

00:13:10 Boom, we're out.

00:13:11 Nice.

00:13:11 What do you think of this?

00:13:12 Yeah.

00:13:13 What do you think of that?

00:13:14 I actually love the cute browser.

00:13:15 I haven't used it much, but I definitely know about it because the Florian Bruin who started

00:13:22 the browser, he's a pytest contributor and also one of the technical reviewers for the

00:13:29 pytest book.

00:13:30 So really cool guy.

00:13:31 But I love the idea of being able to just use a browser with a keyboard and not have to touch

00:13:36 the mouse at all.

00:13:36 That's like, that's next level.

00:13:39 It's pretty neat.

00:13:40 Yeah.

00:13:40 Yeah.

00:13:42 Let's see.

00:13:42 Out in the audience, Kim Van Wijk.

00:13:44 Hey, Kim.

00:13:44 Says, I resigned myself to using a mouse more than I want to.

00:13:48 Cute browser may be the way to go.

00:13:49 Thanks to the tip.

00:13:50 Awesome.

00:13:50 Yeah.

00:13:51 And Alvaro says, are those VS Code shortcuts?

00:13:53 I suppose only if you have the Vim binding set in VS Code.

00:13:57 But then I sort of, yes.

00:13:59 Well, of course you do.

00:14:00 Why wouldn't you?

00:14:01 What are you, a monster?

00:14:04 Can you even do Emacs bindings?

00:14:07 I don't know.

00:14:09 You could do non-Vim bindings.

00:14:11 Yeah.

00:14:12 Right.

00:14:12 But then people would look down on you.

00:14:14 Right, Brian?

00:14:14 But I don't do Vim stuff in mine.

00:14:17 I know that you probably do, though.

00:14:18 Yeah.

00:14:19 I use Vim everywhere, especially in VS Code.

00:14:22 So, nice.

00:14:24 Nice.

00:14:24 But I think people should check it out.

00:14:26 It's kind of a cool project.

00:14:27 And also, it helped push forward some of the, some pytest things.

00:14:33 We got some new features because of this.

00:14:35 It's cool.

00:14:35 Yeah.

00:14:36 Oh, that's great.

00:14:37 I installed it with Homebrew.

00:14:39 So, that was easy to install.

00:14:40 You can install it with apt on Linux.

00:14:42 I'm not sure about Windows.

00:14:43 But they've got a quick start guide.

00:14:45 So, you can follow along to see like, you know, what, what you might want to do.

00:14:48 Like, it's, it's not super obvious.

00:14:50 No, that cheat sheet is, I have an iChart key binding.

00:14:56 It's a bit of an iChart.

00:14:57 I suspect you can zoom it.

00:14:59 There you go.

00:15:00 It's still small.

00:15:01 It's still small.

00:15:02 But, yeah.

00:15:04 I do like the navigation, pressing like F and then just a letter to navigate instead of using your mouse to follow the links.

00:15:11 That's pretty cool.

00:15:11 Do you remember those, like, those templates that people used to have, like, back in the day for, like, in, like, Office tools where they would overlay.

00:15:21 You would put them, it was actually an overlay on your keyboard.

00:15:23 Yeah.

00:15:24 It would go over the, like, the function keys to, so that you could remember which functions did what during what application.

00:15:30 And if you switch to Word, you put a different, or probably WordPerfect at the time, you put a different template over it.

00:15:35 And, yeah.

00:15:36 Yeah.

00:15:36 I'm going to use Lotus 1, 2, 3.

00:15:38 Give me the function key overlay.

00:15:39 Yeah.

00:15:40 Yeah.

00:15:40 Okay.

00:15:42 I'm just showing.

00:15:43 Yeah, it's a little like that.

00:15:43 It is.

00:15:43 Showing how old I am.

00:15:45 So, let's talk about something new.

00:15:47 I'm sure they still teach that in college.

00:15:48 Yeah.

00:15:49 No, they don't.

00:15:50 Although, in college, I had to teach.

00:15:53 I was a TA for, like, a computers 101 class during grad school.

00:15:58 And links was one of the things we had to teach.

00:16:00 And I was like, nobody's going to use this.

00:16:03 Yeah.

00:16:03 But it was part of the curriculum.

00:16:05 Yeah.

00:16:06 That's awesome.

00:16:07 Anyway.

00:16:07 So, let's switch to something new, like, async.

00:16:11 So, I think we've talked about court probably several times.

00:16:15 And court is a, it's like Flask, but it's async.

00:16:20 It actually is the, does the entire, it supports the Flask API, or I think, and sort of looks

00:16:29 the same, but it's async instead.

00:16:30 But there's a problem.

00:16:31 It's super close.

00:16:32 You can basically, everywhere you have the word Flask, if you replace it with the word

00:16:36 court, it more or less works.

00:16:38 So, like, import lowercase flask.

00:16:41 You import lowercase court.

00:16:42 If you create an object, capital F Flask, you use capital court, and then it lets you do async,

00:16:47 basically.

00:16:47 Cool.

00:16:48 But there's an ecosystem around both of them now.

00:16:51 So, there are extensions to Flask.

00:16:53 Some of them work on court.

00:16:55 There's extensions to court.

00:16:57 I don't know if any of those work on Flask.

00:16:59 But the people behind both of them kind of are supportive of the whole thing.

00:17:04 And so, court is actually now part of the pallets project, is the big news.

00:17:10 And pallets is the project that includes Flask and a whole bunch of other stuff.

00:17:17 But because of this, it will help maybe the maintainers kind of work together a little bit

00:17:25 better and smoother to iron this out.

00:17:28 So, the big difference, of course, is that Flask has a whiskey server behind it.

00:17:35 Server is the right word?

00:17:35 And court is ASCII.

00:17:40 So, asynchronous.

00:17:41 But the, it's, so this is cool.

00:17:45 Well, why do we care a little bit?

00:17:47 Is that it used to be that really you had to do async.

00:17:50 If you wanted async, you had to do court.

00:17:52 But now Flask, as a Flask 2.0, you do have some async capabilities, but it's still using

00:18:00 a single-threaded server.

00:18:02 So, there are some limitations.

00:18:04 So, kind of interesting to read about this.

00:18:08 There is an async and await.

00:18:10 page on the Flask website that talks about really what the trade-offs are, what the performance

00:18:16 and the background tasks and how to do that within, without shifting to court.

00:18:22 But then also talks about, at some point, you might want to just switch to court instead.

00:18:28 Along this line is, I was thinking about this partly while I was looking at this other article

00:18:36 from Steve Pate that called, should you use async on your next Python web application?

00:18:42 Which I was, I wanted to bring this up because I was curious about what your take on it was.

00:18:47 The first part is, it's a really nice history.

00:18:51 It talks about the history of web server interfaces with Python, with the timelines and Whiskey and ASCII.

00:18:58 And then how ASCII.io came into play and how UVicorn is popular and Unicorn.

00:19:08 I don't know how to say that.

00:19:11 I'm pretty sure it's Gunicorn because it's short for green unicorn.

00:19:15 Okay.

00:19:16 So the last bit should still be pronounced unicorn.

00:19:17 So I'm going to go with G.

00:19:18 Okay.

00:19:19 And then there's Hypercorn, which is the asynchronous web server that's similar.

00:19:25 Anyway, so it talks about this, but then at the end, the conclusion, it talks about all the different frameworks.

00:19:30 The conclusion is, most people don't need async on their web server.

00:19:36 And I was curious what your reaction to this conclusion is.

00:19:42 I have some thoughts, but let me pull up some first.

00:19:45 Okay.

00:19:45 So here's my thought.

00:19:46 It depends.

00:19:47 It depends on how far you need to push it towards the edge.

00:19:51 I was surprised how far you can get without async in terms of concurrency.

00:19:57 So I recently did an in-person class.

00:20:00 Imagine that over Zoom, but live in person.

00:20:05 I actually have some more to say about that.

00:20:07 It's kind of related.

00:20:07 But anyway, I just did a course with some folks who are doing FastAPI.

00:20:11 And they said, look, this async stuff that we're doing adds some complexity to the way that we got our right code.

00:20:17 We're not sure whether or not there's a trade-off.

00:20:19 So what we did is we actually ended up writing a FastAPI app with using the sync and the async version of SQLAlchemy, and then using async and an async version of FastAPI endpoints.

00:20:32 Okay.

00:20:33 Okay.

00:20:33 With the database that we had as the backend, and the database was not the limiting factor because it was at like 10% CPU while this was happening.

00:20:42 It was just chilling.

00:20:43 Yeah.

00:20:43 But with a real database, Postgres as the backend, what we found was we could do, I can remember this right.

00:20:51 Oh boy.

00:20:52 I'll give you, I can certainly give you the relative bit.

00:20:56 So with the synchronous version, we got way more scalability than we thought.

00:21:00 So it was like 75% performance of the async version.

00:21:05 Okay.

00:21:06 So that seems way higher because the database had, like most of the things we were doing is just waiting on the database.

00:21:11 But because we were running in G Unicorn with UVicorn workers, I was really just in G Unicorn with threads, you know, Python doesn't do threading well, except when it's listening on a network socket or doing a few other things that will release the GIL.

00:21:25 And guess what?

00:21:25 When you're talking to the database, you're listening to a network socket.

00:21:28 So there's all these points that naturally free up the threading.

00:21:30 And actually got us like 75% of the way there, but we still got 25 to 30% more performance out of the async version.

00:21:39 And it was like, I think it was five worker processes running on my eight core machine, talking to Postgres.

00:21:45 And we were getting something like, you know, like 2000 requests per second versus 1500 a second, or maybe it was 1000 and 1500, something like that was a lot of requests per second.

00:21:56 But we did get more performance out of the async version.

00:22:00 So my depends is like that last 25, are you like that close to your performance?

00:22:06 I would say 95% of the web apps are not maxed, right?

00:22:10 They're not maxed out with like multiple servers trying to deal with it.

00:22:13 95% of servers are doing important work, but they're probably still have a lot of capacity left.

00:22:19 So it's like, it depends.

00:22:20 Are they like, do you need that last 25% or does it not really matter?

00:22:23 Yeah.

00:22:24 Yeah.

00:22:25 And also like, those are my thoughts.

00:22:27 What's the load like on your typical, I mean, what are your levels anyway?

00:22:32 Right.

00:22:32 So if you, if you already have, like for instance, if you already have an application running, you can measure it and see, see what your load is looking like.

00:22:41 And how many people you have.

00:22:43 And then if you, if you think, oh, I might, I might increase my, what if we double?

00:22:47 Then you can kind of guess what your load is going to look like if you double and stuff.

00:22:52 So interesting.

00:22:53 Yeah.

00:22:54 I recommend people check out this locus thing because it's so easy to say a typical user clicks on the page between five and 15 seconds.

00:23:02 They might go log in.

00:23:03 They might go log in some of the time.

00:23:04 They might go hit the homepage.

00:23:06 They might hit the about.

00:23:07 And then you can say, I would like to see how many users I can take.

00:23:10 And if, if you're 10 X, what you need, you know, it doesn't matter whether you use async or not, but there is a performance benefit.

00:23:16 It's just not as massive as it might sound.

00:23:18 The, the other bit that I want to like point out is the, the one, one statement that like depends on what you're using.

00:23:27 Also like I can't find the, the bit here, but it, he was talking about how one application he had, he was thinking about, oh, I might, I might do a async except for he was using a payment gateway that didn't have an async version.

00:23:41 So he had to use a synchronous for that.

00:23:44 And since synchronous somewhere you kind of have, is this true?

00:23:48 If it's synchronous somewhere, you have to be synchronous everywhere or that not really true.

00:23:52 You know, if, sorry, say that if it's sync, async, it's async everywhere or sync.

00:23:56 It's sync everywhere.

00:23:57 Either one is either one of those true.

00:23:59 If I, like, if I have a, if I've got an application and, and I do need to hit a gateway that's synchronous, do I need to, if I isolate it, I guess I can probably do asynchronous and hide it that way.

00:24:11 But yeah, I mean, you're, you just don't get as good a scalability there and you kind of block up the processing.

00:24:17 If you do the sync for the async one, you can do like a wrapper where you say like, we're going to do some async work, but I'm just going to call that and block.

00:24:25 Because all the other stuff above it doesn't want to deal with being async.

00:24:28 Yeah.

00:24:29 So it's easier to go from sync to async to like have part of it be async.

00:24:34 The other way around is a little more tricky.

00:24:36 It can mess it up a bit.

00:24:37 Okay, cool.

00:24:38 Yeah.

00:24:39 Nice.

00:24:39 Interesting conversation.

00:24:40 Thanks a lot.

00:24:41 Absolutely.

00:24:42 It sure is.

00:24:43 Is that it?

00:24:43 Is that all of our items?

00:24:44 Are we?

00:24:45 I think that all of our items?

00:24:48 I think so.

00:24:48 Yeah.

00:24:49 Yeah.

00:24:49 What?

00:24:49 You got any extras for us?

00:24:50 I don't.

00:24:52 No.

00:24:52 Okay.

00:24:52 I have some.

00:24:53 Let me pull them up here.

00:24:55 Locus.

00:24:56 Look, let me tell you about it now.

00:24:57 It's great.

00:24:57 All right.

00:24:57 No, I have three things I want to tell people about.

00:24:59 Number one is I did a talk at Python Web Conference, the HTMX and Flask one that I've done in some

00:25:06 other places, but that was a fun talk, like a 45 minute Flask plus HTMX goodness there.

00:25:12 And so that video, along with all the other Python Web Conf 2022 talks are now on YouTube.

00:25:19 So people can check that out.

00:25:20 Cool.

00:25:20 Did you know that the Python Web Conference had five days and I think it was like four or five tracks all day.

00:25:28 So there are a ton of videos.

00:25:29 There's like 150 videos or something on there.

00:25:32 I mean, look at this scroll bar here.

00:25:33 It's probably going to like page as I get to the bottom too.

00:25:37 Yep.

00:25:37 Look at that.

00:25:39 So there was a lot of talks that people can come check out if they're interested in that.

00:25:43 That's pretty cool.

00:25:44 One of them being HTMX that I did.

00:25:45 Yeah.

00:25:46 I want to watch your talk.

00:25:47 You've given that a couple of times, haven't you?

00:25:49 Yeah.

00:25:49 Yeah.

00:25:50 I've given it a couple of times.

00:25:51 Basically, the way it worked is like when I was working on that course and really like playing with those ideas,

00:25:55 I submitted to a bunch of conferences and those conferences were either a year out or they were like a month out or something.

00:26:01 Right.

00:26:01 That's how that ended up so spread out.

00:26:03 The other one is I mentioned the browser.

00:26:05 That was fun.

00:26:06 But how about the browser-asaurus?

00:26:08 Okay.

00:26:09 This is a macOS only tool, but there's probably something like it for the others.

00:26:13 So here's the thing.

00:26:14 Suppose I'm in Typeora, which is a Markdown editor, or I'm in a PowerPoint and it's got a link and I click it.

00:26:22 By default, it opens in the default browser.

00:26:25 But depending on what you're doing, you might want it to be like, oh, sometimes I wanted to open in Vivaldi,

00:26:30 but other times I wanted to open in like say the cute browser or Orion or some odd thing like that.

00:26:35 Right.

00:26:36 So the idea with this thing is that you click a link and when it opens up, instead of opening in the default browser,

00:26:42 the browser-asaurus is the default.

00:26:44 And then you have keyboard shortcuts like F for Firefox, E for Edge, S for Safari.

00:26:50 And you say, well, which one do you want to open in right now?

00:26:53 And it basically just delegates to the different browsers you register it with.

00:26:57 So you can hit T for Tor or F for Firefox when you click a link.

00:27:00 That's kind of cool, right?

00:27:01 That is pretty cool.

00:27:01 Yeah.

00:27:02 I haven't been convinced that I would use that or not, but I do appreciate it.

00:27:07 And I feel like maybe someone sent that in and if they did, I'd really appreciate it.

00:27:12 But yeah, I don't have any notes I sent it in.

00:27:14 So anyway, that's pretty cool.

00:27:15 If you find yourself, you know, copying, going to different browsers a lot and you're on Mac,

00:27:20 I know that's like a small, a rapidly decreasing Venn diagram.

00:27:24 But if you're in that space, this might be a cool option for you.

00:27:27 Yeah.

00:27:27 What is it written with anyway?

00:27:28 TypeScript mostly.

00:27:30 Okay.

00:27:30 So speaking of browsers, I just found this because I was like, is links dead?

00:27:34 Can I use something like links now?

00:27:36 And there's a browser called Broush, which is a text-based browser.

00:27:41 So that's still a thing.

00:27:42 Cool.

00:27:43 I had to try this out.

00:27:44 Oh my gosh.

00:27:45 I love it that it kind of has text, but it like 8-bit pixelated.

00:27:50 Yeah.

00:27:50 It takes the images and makes them terrible.

00:27:52 It takes the images and makes them look like what you would get.

00:27:55 Yeah.

00:27:56 So I'll have to give this a try.

00:27:57 Yeah.

00:27:58 And you've run it in Docker.

00:27:59 Of course you do.

00:28:00 All right.

00:28:00 Pretty cool.

00:28:02 All right.

00:28:03 Oh, let's.

00:28:04 Yeah.

00:28:05 Go ahead.

00:28:05 One more before we get to our joke.

00:28:07 Okay.

00:28:08 The other one is I talked about doing a live class.

00:28:11 So I actually have an announcement for a live class that I'm doing.

00:28:14 So obviously people know I have a bunch of online courses and of course I'm going to keep, I'm already working on the next one of those and we've got a bunch coming there.

00:28:22 But I want to try some experiments.

00:28:25 Something where people can attend a class in person with other people, right?

00:28:31 If they sort of help each other along.

00:28:34 And I've tried this before, this cohort thing, but I think I've got a better platform, a better way to do it.

00:28:39 So over at, this link I'm going to put in the show notes, I'm doing a FastAPI and MongoDB.

00:28:44 So basically FastAPI, Pydantic, Beanie and MongoDB course.

00:28:48 That is going to be a four day, six day course over two weeks.

00:28:53 And it has a couple hours a day.

00:28:55 And.

00:28:56 Oh, wow.

00:28:57 We'd have a bunch of people there working together on some fun stuff.

00:29:00 And I'll be live teaching every session.

00:29:03 So it's going to be like a live course as if you were attending it in person, just remotely.

00:29:08 Because it's 2022 and it's not a, I guess it's not post post COVID all the way.

00:29:15 But anyway, it's, it's got a really cool set of topics that we cover.

00:29:17 It talks about async.

00:29:19 It talks about Mongo, Beanie, Pydantic, FastAPI, of course.

00:29:22 We even use Locus at the end to test it out.

00:29:24 I'm, I think this would be a fun.

00:29:27 This looks great.

00:29:28 Cool.

00:29:28 Yeah.

00:29:29 Yeah.

00:29:29 Awesome.

00:29:29 I think it'll be fun too.

00:29:31 I think it'll be neat to have this experience with people.

00:29:33 And I've tried this before, but all my prior attempts were, they were good, I think,

00:29:38 but they were like, yeah, take the online course.

00:29:39 And then we'll do like a community type thing.

00:29:41 This is like a live course that I'm just teaching one off for that group of people that sign up.

00:29:45 So we'll see how that goes.

00:29:46 If it goes really well and people love it, then I'll do more of these.

00:29:49 If not, then maybe less of them.

00:29:50 I don't know.

00:29:51 We'll see how it goes.

00:29:51 But this is happening August 8th to 19th.

00:29:55 So it has a real date because it has, you know, a real live aspect to it.

00:29:59 Nice.

00:29:59 Cool.

00:30:00 All right.

00:30:00 Cool.

00:30:01 And Mario on the on says, that's my stack right there.

00:30:04 Oh, yeah.

00:30:05 That's a good stack, right?

00:30:06 There's some really good stuff to talk about there.

00:30:09 I've been using Beanie and FastAPI for stuff.

00:30:12 And obviously, Monk.

00:30:13 Yeah.

00:30:13 Speaking of courses, one question out there.

00:30:16 How's the pytest course going?

00:30:18 It is going.

00:30:20 It's creeping forward, but life has gotten in the way.

00:30:25 And we'll get it out.

00:30:27 It's awesome that you're having.

00:30:28 Yeah.

00:30:28 It's awesome that you're working on that.

00:30:29 It takes a while to create a course, doesn't it?

00:30:31 Longer than I thought.

00:30:32 I'm like, man, I already wrote the book.

00:30:34 I can totally pop a course out in a couple of days.

00:30:36 Yes, of course.

00:30:38 Would you say that as a junior developer, you might think about this differently than after

00:30:43 somebody's been doing it for a while?

00:30:44 Yeah.

00:30:45 This cracked me up.

00:30:47 So I can't remember who shared this.

00:30:49 It's a great joke you got here.

00:30:50 Somebody shared it on Twitter.

00:30:52 Sorry, I can't.

00:30:53 I don't know who.

00:30:54 But OK, so in a job interview, you've got somebody gets asked, where do you see yourself

00:31:01 in five years?

00:31:01 And the junior developer in this interview question shows a picture of the black hoodie with multiple

00:31:09 screens and light up keyboard.

00:31:11 Just I'm in Hackersome.

00:31:13 Five screens.

00:31:14 Yeah.

00:31:14 Totally coding.

00:31:15 Yeah.

00:31:15 Senior developer, where do you see yourself in five years?

00:31:18 On a farm.

00:31:19 Pumpkin farming with cows and apples.

00:31:23 And you know what?

00:31:24 I'm about done.

00:31:25 I love it.

00:31:26 Yeah.

00:31:27 My personal thoughts are, why not both?

00:31:30 This is just a view of the inside his office and then outside.

00:31:33 Working from home, man.

00:31:35 That's right.

00:31:36 Working from home.

00:31:37 Yeah.

00:31:38 All right.

00:31:38 I have maybe the one that preceded that, the one that, or maybe is in between these two

00:31:43 that might precipitate the second.

00:31:45 Okay.

00:31:45 All right.

00:31:46 So this is a tweet from Programming Humor.

00:31:48 It's a strange language, that JS.

00:31:50 JavaScript is such a strange language.

00:31:52 Nobody can understand it.

00:31:53 But if they manage to, then they create their own framework.

00:31:59 Yes.

00:31:59 Everyone's got their JavaScript front-end framework or something like that.

00:32:03 Yeah.

00:32:03 And you know you've made it when the framework you've invented starts showing up on job requirements.

00:32:09 That's right.

00:32:10 With four years experience.

00:32:13 We're only two years old.

00:32:14 Exactly.

00:32:15 Yeah.

00:32:16 Yeah.

00:32:16 Well, good episode, Michael.

00:32:18 Thanks for showing up again.

00:32:20 You bet.

00:32:20 Fun as always.

00:32:21 Thanks, everybody.

00:32:22 We'll see you later.

00:32:23 In the slack and everything.

00:32:25 Bye.

