00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 375, recorded March 19th, 2024.

00:00:10 I think I got that right.

00:00:11 And I am Brian Okken.

00:00:13 And I am Michael Kennedy.

00:00:14 And our episode today is sponsored by Scout APM.

00:00:18 Thank you, Scout.

00:00:19 Listen to their section later in the show.

00:00:22 If you'd like to connect to us, we're on Mastodon and the links are in the show notes.

00:00:27 But it's at M. Kennedy, at Brian Okken, and at Python Bytes, all on Fostadon.org.

00:00:32 And if you'd like to listen to the show live, we'd love to have you.

00:00:36 But it's not necessary.

00:00:37 You can listen to us later.

00:00:38 But if you want to listen to us live, go to pythonbytes.fm/live and see all the details and see when the upcoming episode is.

00:00:46 So, yeah.

00:00:47 Michael, what do you got for us?

00:00:50 Well, I would like to start off by telling you about another country, maybe one you haven't heard of.

00:00:55 Canada?

00:00:56 You've heard of Canada.

00:00:57 You've heard of the U.S.

00:00:58 You've heard of Germany.

00:00:59 You've heard of Slovakia.

00:01:00 You've heard of the Philippines.

00:01:01 Have you heard of Pi Country?

00:01:04 Oh, this should have a song with it.

00:01:06 In a Pi Country.

00:01:07 Does it involve a banjo?

00:01:12 I don't know what it's called.

00:01:13 I hope not.

00:01:14 I know.

00:01:15 I hope not, too.

00:01:16 Oh, we should have covered this on the 14th.

00:01:18 Anyway.

00:01:18 Pi Country, Pi Day, all the things.

00:01:21 Okay.

00:01:21 So, Pi Country is, it solves something that might not sound like a great big problem until

00:01:27 you try to deal with this and you're like, are you serious?

00:01:29 There are this many things.

00:01:30 It's similar to dealing with time zones.

00:01:32 You're like, how complicated it can be?

00:01:34 What are there, 24?

00:01:34 No.

00:01:35 And what are their abbreviations?

00:01:36 And what are all the different ways in which they can be abbreviated and so on?

00:01:40 This is that for countries.

00:01:41 So, it's a Python library to access ISO.

00:01:44 These are standards.

00:01:45 Country, subdivision.

00:01:47 What's a subdivision?

00:01:48 Language, currency, and script definitions and their translations for all the countries of

00:01:53 the world, including deleted countries that used to be countries but are not.

00:01:57 I would have considered those just former countries, but deleted is a very digital way

00:02:02 to think of it.

00:02:05 We just selected that part and we hit, you know, command backslash and it really deletes

00:02:10 it all the way.

00:02:11 Yeah.

00:02:11 Anyway, this is really interesting and it's used by 17.9 thousand different projects, which

00:02:18 is pretty cool.

00:02:19 So, here's the deal.

00:02:20 So, you go in here and somewhere, you can just go into it and you say pi country.countries

00:02:25 and there's 249 here.

00:02:27 And you get these, not just a list of strings, but you get rich objects back.

00:02:31 Like, the first one is Afghanistan.

00:02:33 So, country, it's a class.

00:02:36 It has the alpha two code, which is AF, the alpha three code, AFG.

00:02:40 And that's the kind of stuff I'm talking about.

00:02:42 That's like, why are there so many variations?

00:02:44 You can represent, you know, the shorthand version, like just two letters, but you can also

00:02:48 use three letters or there's numeric versions.

00:02:50 There's like the full name versus the colloquial name.

00:02:54 So, Afghanistan versus the Islamic Republic of Afghanistan.

00:02:58 Oh, this is kind of cool.

00:02:59 I might learn something.

00:03:00 Yeah, exactly.

00:03:01 There's a lot more in here.

00:03:02 And there, it has a dictionary-like access for the variation.

00:03:07 So, you can say, get alpha two equals DE and you'll get good old Deutschland.

00:03:12 Or you could say alpha three equals DEU or the name equals Germany or all these different ways

00:03:20 in which you can kind of query this.

00:03:21 Or given one, you can obviously just access all these properties.

00:03:24 Like, Brian, you would know that it's the Federal Republic of Germany.

00:03:29 It has fuzzy searching for countries.

00:03:31 So, I can say, give me England.

00:03:32 It's like, yeah, there's no England.

00:03:33 What?

00:03:33 But there's this thing called United Kingdom, which sort of has its center in England, maybe.

00:03:38 And that's GB and so on.

00:03:41 So, yeah, pretty neat.

00:03:42 You can say, fuzzy search for Cote and you get Cote d'Ivoire.

00:03:47 Sorry, folks, from there.

00:03:50 But, you know, you'll get, like, it'll even match when it's not exactly the right character, right?

00:03:55 Like, oh, hat.

00:03:57 I don't know what that's called.

00:03:57 Not an umlau, but a hat-looking thing.

00:03:59 But you don't have that in the search, right?

00:04:02 Yeah.

00:04:02 So, this is more, like I said, there's more to this than just like, oh, a list of countries.

00:04:06 And then, it's historic countries.

00:04:08 These are the ones.

00:04:09 Did they, since I read this, did they change it from historic to deleted?

00:04:12 I don't know.

00:04:13 Historic countries.

00:04:13 Subdivisions.

00:04:15 I'm like, what is a subdivision?

00:04:16 Of a country.

00:04:17 This is like states or providences.

00:04:19 It's not nearly as strange as it sounds.

00:04:22 There's scripts also.

00:04:23 What is a script?

00:04:24 It's written language versus spoken language.

00:04:27 Those might be the same thing, but they might also not be the same.

00:04:30 Like Latin, for example, right?

00:04:32 Oh, yeah.

00:04:33 Okay.

00:04:33 Currencies are in here.

00:04:34 Languages are in here.

00:04:36 Locales are in here.

00:04:37 So, if you do anything with countries, this might be worth looking at.

00:04:41 That's pretty cool.

00:04:42 Yeah.

00:04:42 I'm still, like, hung up on that England isn't a country.

00:04:45 True.

00:04:45 But, okay.

00:04:46 According to by country, it's not a country.

00:04:49 Okay.

00:04:50 And also, so, yeah, I'll have to look into this more.

00:04:53 Is it a subdivision?

00:04:55 Maybe it's a subdivision.

00:04:56 But also, like, where does the word Deutschland fit in for Germany?

00:05:02 Is that not even listed?

00:05:03 Yeah.

00:05:04 Yeah.

00:05:04 Well, also, since it has translations.

00:05:06 So, for example, German, if you ask a German person where they're from, they'll say Deutschland,

00:05:11 unless they're speaking English to people, right?

00:05:13 Like, they refer to it as Deutschland.

00:05:15 Yeah.

00:05:15 But for some reason, we don't agree.

00:05:17 We don't call it that.

00:05:18 We call it Germany.

00:05:19 Right?

00:05:20 Yeah.

00:05:20 So, I don't know.

00:05:22 It's interesting.

00:05:22 I suspect if you use the translations, maybe, and you said, you know, what is the official name of Germany?

00:05:29 It probably wouldn't say the Federal Republic of Germany would have that translated, right?

00:05:33 Interesting.

00:05:34 Yeah.

00:05:35 Like, Switzerland is, I can't remember exactly.

00:05:39 But, yeah, it's different.

00:05:40 It goes by different names and different languages.

00:05:44 So, I think it also has those when it talks about the translations.

00:05:47 Cool.

00:05:48 Neat.

00:05:48 Well, we could point to countries.

00:05:52 I'm trying to do a transition.

00:05:54 Or we could point to objects.

00:05:56 And does Python have pointers?

00:05:59 You can't really point to a country.

00:06:01 I don't know.

00:06:02 Maybe.

00:06:03 Point to directions.

00:06:04 Canada's that way.

00:06:06 Canada's that way.

00:06:07 No, Canada's this way.

00:06:09 Oh, man.

00:06:10 But we're probably pointing to different directions.

00:06:13 Anyway.

00:06:14 So, Ned Batchelder has an article called, Does Python have pointers?

00:06:19 And I'm like, yeah, no, it doesn't.

00:06:22 But kind of does.

00:06:23 Anyway.

00:06:25 I'm highlighting this because I think it's a really good article for somebody that's coming from a language that does have pointers and stuff to Python.

00:06:35 Because it's a good entryway into names in Python.

00:06:38 So, the article does Python and pointers.

00:06:41 But it's kind of pointing to the idea of, like, talking about the ID function.

00:06:48 And I know about the ID function really well.

00:06:52 So, if you say ID of an object or a variable name, it tells you, like, a number for what it points to.

00:07:01 Like, where the, I don't know, it's a representation of the memory address or something.

00:07:05 That's kind of what a pointer is, right?

00:07:07 But you can't, in C and C++ and Rust and other things, you can dereference it.

00:07:11 Using that, you can create a variable.

00:07:14 Using the address, you can create a variable that points to that thing.

00:07:17 And you cannot do that within Python.

00:07:19 So, it is different.

00:07:20 But also, kind of everything is a pointer in Python.

00:07:24 And that's sort of Ned's point, is that with, like, just normal object, we can say, like, my var equals 17.

00:07:34 And then we can have, if you do my pointer, it doesn't help you any.

00:07:40 But you can do another variable that points to the same thing, and it works.

00:07:45 It's when, it's just sort of how names work.

00:07:48 I'm describing this very poorly, but this is a good entry point into, well, how objects work.

00:07:55 And luckily, Ned also links to a talk he did, names that refer to objects.

00:08:00 And so, he did a talk in 2015, and still the slides are up in the video, but even the slides just going through it.

00:08:07 It's really good to understand just really how names work.

00:08:11 We're just, in Python, we just kind of point to things.

00:08:14 And so, we're going to link also to the 2015 article, Python names and values.

00:08:21 And really, this was the trick.

00:08:23 When I really could grok this thing with Python, then I could understand Python.

00:08:29 Everything else seems easy after this.

00:08:32 So, good job, Ned.

00:08:34 Yeah, Ned always has good writing.

00:08:36 I'm subscribed to his RSS feed.

00:08:37 I think it's interesting to consider whether Python, you know, the article, does Python have pointers?

00:08:42 Like, boy, howdy, does it?

00:08:44 Yeah, yeah.

00:08:46 Like, it has more pointers than C++, which is insane.

00:08:50 It doesn't have a wider variety of ways to, like, dereference them.

00:08:53 You know, it starts, like, casting a void star star to something else.

00:08:57 But everything, literally everything in Python is a pointer.

00:09:00 Even numbers are pointers.

00:09:02 Whereas in C++, numbers usually are value types.

00:09:05 Yeah.

00:09:06 Right.

00:09:06 And you can have stuff that's on the stack that's not a pointer, just has the value.

00:09:09 In Python, there is no way to have just a value.

00:09:12 Every, everything is a pointer.

00:09:13 Often pointers to pointers.

00:09:15 You know, you're traversing something to something, right?

00:09:17 It's like, I'm going to find the dictionary of the class.

00:09:20 And then I'm following that to where it points to to get to the value.

00:09:25 So it's worth spending some time on, even though you don't ever see a star or an ampersand in the context of, like, juggling pointers in Python.

00:09:34 Yeah.

00:09:34 And, like, vectors or lists in Python are not, they're not the plate, the start of a chunk of memory that represents all of your items.

00:09:43 That's not what's going on.

00:09:45 It's something completely different.

00:09:47 Forget that.

00:09:48 So, yeah.

00:09:49 Indeed, indeed.

00:09:50 Very good.

00:09:51 Very good.

00:09:52 Well, changing gears a little bit, we'd like to thank Scout APM for sponsoring this episode.

00:09:58 Yes, we would.

00:09:59 Let me tell you real quick about Scout APM.

00:10:03 They're big supporters of Python Bytes, so we appreciate that very much.

00:10:07 So if you are tired of spending hours trying to find the root cause of issues impacting your performance,

00:10:13 then you owe it to yourself to check out Scout APM.

00:10:16 They're a leading Python application performance monitoring tool, APM, that helps you identify and solve performance abnormalities faster and easier.

00:10:25 Scout APM ties bottlenecks such as memory leaks, slow database queries, background jobs,

00:10:31 and the dreaded N plus one queries that you can end up if you do lazy loading in your ORM,

00:10:36 and then you say, oh, no, why is it so slow?

00:10:39 Why are you doing 200 database queries for what should be one?

00:10:41 So you can find out things like that.

00:10:42 And it links it back directly to source code so you can spend less time in the debugger,

00:10:46 and peeling logs and just finding the problems and moving on.

00:10:50 And you'll love it because it's built for developers by developers.

00:10:53 It makes it easy to get set up.

00:10:54 Seriously, you can do it in less than four minutes.

00:10:57 So that's awesome.

00:10:58 And the best part is the pricing is straightforward.

00:11:01 You only pay for the data that you use with no hidden overage fees or per seat pricing.

00:11:07 And I just learned this, Brian.

00:11:09 They also have, they provide the pro version for free to all open source projects.

00:11:14 So if you're an open source maintainer and you want to have Scout APM for that project,

00:11:19 just shoot them a message or something on their pricing page about that.

00:11:21 So you can start your free trial and get instant insights today.

00:11:25 Visit buythombice.fm slash Scout.

00:11:28 The link is in your podcast player show notes as well.

00:11:30 And please use that link.

00:11:32 Don't just search for them because otherwise they don't think you came from us.

00:11:36 And then they'd stop supporting the show.

00:11:37 So please use our link, buythombice.fm slash Scout.

00:11:40 Check them out.

00:11:41 It really supports the show.

00:11:43 Yes, it does.

00:11:44 Thank you.

00:11:44 It does.

00:11:45 It sure does.

00:11:45 Now, Brian, let's talk about ingestion, data ingestion.

00:11:50 Okay.

00:11:50 So here's an open source CLI tool.

00:11:53 It's not exactly Python focused, but certainly useful for Python people.

00:11:59 Ingestor.

00:12:00 And it's straight out of the web 2.0 days because it's dropping some of the vowels.

00:12:04 It says copy data between any source and any destination thinking database type things.

00:12:12 So what you do is you just say ingestor ingest.

00:12:15 Source database connection is whatever.

00:12:18 Source table is whatever.

00:12:20 And then the destination is where it goes.

00:12:22 And all of a sudden, now you have that.

00:12:24 So do you want your Postgres data to appear over in BigQuery?

00:12:29 Do you want your MongoDB collection to show up in Postgres?

00:12:33 One CLI command, done.

00:12:35 Oh, that's pretty cool.

00:12:36 It's pretty cool, right?

00:12:37 Yeah.

00:12:37 So it's a command line application that allows ingesting or copying data from any source into any database.

00:12:45 I mean, this job probably should be a star on any.

00:12:49 There are, how about many, many data sources?

00:12:52 Okay.

00:12:52 Yeah.

00:12:53 So if we jump over here to their docs where, like, their homepage is kind of just to catch your interest.

00:13:01 So you can copy, I'll find the sources and tell you about them in a second.

00:13:03 But it says there's three ways to copy stuff over.

00:13:07 You can do an append, which is kind of cool.

00:13:09 Like, if you've got multiple data sources that are localized, saving of data, and you want to put them all into one place.

00:13:16 Like, if you had a bunch of SQLite files from different locations.

00:13:20 Say you've got a bunch of, I don't know, a bunch of IoT things.

00:13:25 Or you've got a bunch of servers.

00:13:27 And they each keep some data in a SQLite file.

00:13:30 And you want to put that into one big database, right?

00:13:32 You could do append.

00:13:33 Or you could say merge.

00:13:35 I'm guessing if the primary key is the same, it just skips it.

00:13:38 Maybe it doesn't update to that thing if the fields are different.

00:13:41 I don't know.

00:13:42 Or you can just wipe it free and insert.

00:13:45 So like a clean replacement.

00:13:47 Delete and insert.

00:13:48 Yeah.

00:13:49 Yeah?

00:13:49 Pretty cool.

00:13:50 And then somewhere down here, supported sources.

00:13:53 Here's where I was joking about the NA.

00:13:54 Supports Postgres.

00:13:55 And it has, some of them are bidirectional, source or destination.

00:13:58 Some are just source.

00:13:59 Some are just destination.

00:14:00 Postgres, BigQuery, Snowflake, Redshift, Databricks, DIPDB, Microsoft SQL Server, and CSV files are all bidirectional.

00:14:07 CSV files are bidirectional, okay?

00:14:11 But Mongo, Oracle, SQLite, and MySQL are only sources.

00:14:14 So I don't know why MongoDB is not a destination because it's incredibly easy to just have like a flat file, a flat table, no like nested stuff.

00:14:23 I know if you're copying from a relational database, but yeah, whatever.

00:14:26 Still pretty cool, I think, to be able to use this.

00:14:29 So if you got just data you want to keep in sync or migrate over and you're thinking of writing Python code to do it, you might not have to write any code at all.

00:14:36 Well, that's pretty cool.

00:14:37 I don't know what Snowflake is.

00:14:38 It's a great name.

00:14:39 Yeah, we're getting out of that season right now.

00:14:41 It's starting to be warm and summer's coming, but it'll be back in the fall, like maybe December.

00:14:45 No.

00:14:46 That's funny.

00:14:47 Cool.

00:14:48 Well, yeah, very interesting.

00:14:50 Speaking of command lines, I ran across David Lord's article, Make Your Terminal Nice.

00:14:56 And this is just sort of a little shout out because so apparently David is using he's using fish, which I haven't heard about for a while.

00:15:06 So nicer prompt with starship.

00:15:08 So nicer prompt with starship and a nicer shell with fish.

00:15:10 And this isn't really a detailed article, but it's just sort of like things can be nicer.

00:15:16 And I was reminded about this because I think a long time ago we were talking with.

00:15:23 Anyway, somebody else about starship.

00:15:25 And I was like, I should try starship.

00:15:27 And I tried it.

00:15:28 And for some reason, didn't work for me.

00:15:30 But I'm like this.

00:15:31 I think it's time to start again.

00:15:33 And so I looked into both of these.

00:15:35 I tried fish.

00:15:36 And I do really appreciate that it says, finally, command line shell for the 90s, which is awesome and funny.

00:15:45 And it's also in Comic Sans, which I ironically appreciate.

00:15:49 But the scripting language is a little different.

00:15:53 And I've got a lot of customizations for Bash.

00:15:56 And ZShell is very compatible with Bash.

00:15:59 So I usually use either Bash or ZShell.

00:16:02 And I think I'm going to stick with that.

00:16:03 But Starship, Starship's amazing.

00:16:06 And so I switched to Starship.

00:16:09 And when you go to Starship, there's an installation guide.

00:16:13 And really, it was so easy.

00:16:15 There's a macOS line.

00:16:18 You just curl install it.

00:16:20 Or you can homebrew.

00:16:21 I think I did the homebrew thing.

00:16:23 Anyway, but then how do you use it?

00:16:26 There's a usage of just, so I was on ZShell.

00:16:30 So you just add one line to your ZShell RC.

00:16:34 But there's instructions on how to do it within Bash or Fish or PowerShell.

00:16:39 Oh, cool.

00:16:40 It works with PowerShell.

00:16:41 That's pretty neat for all you Windows people out there.

00:16:45 So what you get, what I really like is this notion of the directory is right there listed above your command.

00:16:56 And then listing what I really like is what my Git branch is, my directory, which version of Python I'm using.

00:17:05 The example here shows a Rust.

00:17:06 But it shows which version of Python you're using.

00:17:10 And then also what virtual environment you're in.

00:17:12 So having, and I didn't configure that at all.

00:17:15 That's just the default.

00:17:16 And I'm like, that's good.

00:17:17 I'm good with that.

00:17:18 So I haven't configured it at all.

00:17:20 Just the default right out of the box.

00:17:22 It works really good.

00:17:23 So I'm pretty happy so far.

00:17:25 Anyway.

00:17:25 Yeah, I think there's a lot of options here, right?

00:17:28 There's on my ZShell.

00:17:29 There's Starship.

00:17:31 There's all the different shells.

00:17:33 These days I'm using Warp.

00:17:34 Warp.dev, which is pretty excellent.

00:17:36 I talked about that on the show before.

00:17:37 I kind of forgot about Warp.

00:17:39 We should try it.

00:17:39 Warp is cool.

00:17:41 I think the big thing, the big message people should take away from this is don't just take what your operating system gives you.

00:17:48 It's really quite bad.

00:17:50 It's not just not great.

00:17:52 It's bad.

00:17:53 And a lot of people who are like, I don't really like, I'm not really a terminal person or I'm not a CLI person.

00:17:59 That's because they didn't spend 30 minutes once getting it to where like, oh, actually, oh, that's nice.

00:18:06 And you point out like, oh, well, is there a virtual environment active?

00:18:09 What is its version?

00:18:11 And then all these other things, you know, are there Git changes?

00:18:13 Am I in a Git repository at all?

00:18:14 Are there changes?

00:18:15 Et cetera.

00:18:16 Like all those little, every one of those is just, oh, that's nice too.

00:18:19 And, you know, it really adds up.

00:18:21 Well, and I've always been one to, I mean, for my career, I'm usually juggling multiple projects, multiple branches on projects and everything.

00:18:32 And I've kind of been okay knowing what I'm doing.

00:18:35 However, recently, I just have leveled up that of using way more branches, way more projects.

00:18:42 And just having that information for me right there to make sure that I know what version of Python I'm using, what branch I'm on.

00:18:50 And having that just ever present is like, oh, my God, I don't have to think about that anymore.

00:18:54 Awesome.

00:18:55 It's just right there.

00:18:56 So I just hit that, hit that like pain point where having that information is helping me.

00:19:01 And so I appreciate it.

00:19:03 So yeah.

00:19:03 Very nice.

00:19:04 Cool.

00:19:05 Nice.

00:19:06 How about any extras?

00:19:07 Do you have any extras for us?

00:19:08 I'm feeling extras today.

00:19:09 I got a few extras for folks.

00:19:10 First of all, I spoke about UV or no, Brian, you spoke about UV and I just jumped on.

00:19:15 We both wanted to talk about it, but you had it first, I believe.

00:19:17 Yeah.

00:19:18 It was officially your topic on the show.

00:19:20 However, and you had Charlie Marsh on testing code.

00:19:25 And so I just published an episode of Talk Python having a conversation with Charlie about UV and a little bit of rough and just life in general.

00:19:34 But I have a big backlog of shows over there that I'm working to release because I've recorded faster than weekly release cadence.

00:19:42 But this one seemed very timely.

00:19:45 So I put it, put it to the front of the queue so people can check that out.

00:19:48 I can't wait to listen.

00:19:50 Yeah, it was fun.

00:19:51 Also follow up here is there's this really interesting YouTube channel.

00:19:56 I don't know if it's in general interesting.

00:19:58 Just the one I watched is called Dark Matter.

00:20:01 And they have like highly produced video versions of what would be a podcast, which is kind of interesting.

00:20:10 So they had the one with David DHH talking about the leaving the cloud, cloud fugitive.

00:20:15 But just like if you look at the video side of it, it's like could be a documentary sort of thing.

00:20:20 So anyway, that's interesting.

00:20:21 And we're checking out.

00:20:21 You want to follow up on all my leaving the cloud talk I did.

00:20:24 For those who like to live out near the front of the leading edge, Python 3.13 alpha 5 is available.

00:20:34 And people can go check that out.

00:20:36 So it's not quite beta.

00:20:38 And once it hits beta, there's no more changes.

00:20:40 But right now, they're still potentially breaking changes.

00:20:43 Things could be added.

00:20:43 Things could be removed.

00:20:44 So on.

00:20:45 But in this thing I'm linking to, there's a nice list of, you know, what's some of the improvements like.

00:20:50 For example, how exciting a preliminary experimental JIT was added, by the way.

00:20:54 Just like throwing that out there as if it's nothing.

00:20:56 Your Python will be compiled.

00:21:00 And then finally, this one comes to us from Pat Decker.

00:21:02 Target Tech.

00:21:03 So the tech blog at Target.

00:21:06 This is really cool.

00:21:07 Said Target posted something on their blog, which I didn't know they had a tech blog.

00:21:12 So that's, I guess, news.

00:21:13 But cool for them.

00:21:14 Announcing Target's open source fund.

00:21:17 Oh, cool.

00:21:18 Yeah.

00:21:18 And it says, we created Target's open source fund as a commitment to support open source projects we use.

00:21:23 In short, Target now directly donates the projects through an internal process that prioritizes representation of Target's technology team.

00:21:30 Perfect.

00:21:31 This is perfect.

00:21:32 Like, it says, look, we're basing this on some of the prior work that's out there.

00:21:38 And in fact, the success of Sentry and Microsoft's open source funds have inspired them to go further.

00:21:44 And then it lists projects like, you just gave a shout out to Homebrew, OpenAPI Generator, SDKman, MockK for Kotlin and HTTP 4K.

00:21:55 So it looks like they do a lot of stuff with Kotlin.

00:21:57 So they're supporting that.

00:21:59 But whatever, right?

00:22:00 You support what you use.

00:22:01 I think that's cool.

00:22:02 Yeah.

00:22:02 I think, yeah.

00:22:03 Every company.

00:22:04 I mean, every company, even companies you don't even think use open source, use open source.

00:22:08 So.

00:22:09 Yes, exactly.

00:22:11 Yeah.

00:22:11 There was a quote they gave in here that said, the Linux Foundation estimates that 90% of the code in production is of open source origin.

00:22:19 Probably, you know, using libraries based on open source.

00:22:22 I would imagine, you know, like the fact you use Flask would make your stuff of open source origin, I would imagine.

00:22:27 Yeah.

00:22:27 And I know that there are some wrinkles in how the money often gets distributed, but some money getting distributed is better than none.

00:22:36 So that's a good thing.

00:22:37 I'll say one more thing just to encourage other companies, people within other companies to do this.

00:22:41 We recognize that it's our responsibility to engage across a broad spectrum of activities.

00:22:47 This includes contributing our own software to open source, joining communities and patching software used by others, plus funding with money the others.

00:22:54 That's pretty cool.

00:22:56 Yeah, cool.

00:22:56 Well, the only extra I've got is that I have been working on a side project that I'm starting to ramp up a little bit.

00:23:05 And I've decided to have a start in a SAS project.

00:23:10 And I've started, thought I would get a little head start by using Corey Zhu's SAS Pegasus.

00:23:18 So I'm, I talked with him just the other day.

00:23:21 So his interview will be on, on, on Python test.

00:23:24 But as I go along, I'll be reporting how it's going.

00:23:29 And yeah, I'm just excited to get started.

00:23:32 So nice.

00:23:33 You're going to live blog it, blog, blog the progress.

00:23:36 Yeah.

00:23:36 It's just, it's just going to be slow going because there's a lot, there's a lot more going on in my life, but I want to get it off the ground.

00:23:43 Indeed.

00:23:44 Yep.

00:23:45 I know the feeling.

00:23:46 How about something funny?

00:23:48 Yes.

00:23:49 Let's talk about something funny.

00:23:50 So this comes to us from DevHumor directly submitted by admin.

00:23:54 This has, it's got like a kind of a cybersecurity thing here, Brian.

00:23:57 Okay.

00:23:58 So, you know, like social engineering, like, Hey, I'm from IT.

00:24:01 You're going to get a pop-up on your authenticator that says, you need this.

00:24:06 We're just checking some systems.

00:24:07 So if you don't mind just approving that, you know what I mean?

00:24:09 I know it's your personal email, but we're just working on it for you.

00:24:13 So anyway, here's the joke.

00:24:15 If a person who tries to trick others into giving them personal or sensitive information is a social engineer,

00:24:22 does that mean that the person who tries to prevent that is an anti-social engineer?

00:24:26 Well, I mean, I've met a lot of cybersecurity people and I, maybe, I think it might be an overgeneralization, but yeah.

00:24:36 Yeah.

00:24:37 It's funny.

00:24:37 Anyway, are you an anti-social engineer?

00:24:40 This time it's a good thing.

00:24:41 I know just who I need to send this to.

00:24:45 This is awesome.

00:24:46 Perfect.

00:24:47 Awesome.

00:24:48 Thanks.

00:24:48 Well, that was a fun episode.

00:24:51 And thank you everybody for listening and watching and everything.

00:24:54 And thank you, Michael.

00:24:54 Yep.

00:24:55 You bet.

