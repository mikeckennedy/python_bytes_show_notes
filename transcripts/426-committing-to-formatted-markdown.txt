00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 426, recorded March 31st, 2021.

00:00:11 I'm Michael Kennedy.

00:00:12 And I'm Brian Okken.

00:00:13 And this episode is kindly brought to you by Posit Connect Cloud.

00:00:18 Last time, Brian told you all about Posit Connect On-Prem, or your own cloud.

00:00:23 And we'll talk about Posit Connect Cloud, a cool sibling offering, I guess.

00:00:28 If you are a social media person, you can find us on the social media things.

00:00:32 You can find us on Mastodon and Blue Skies, the two main places we hang out.

00:00:37 Those links are in the podcast player show notes right at the top.

00:00:40 Also, YouTube, follow us on YouTube.

00:00:43 There's the live link in the top that'll take you there.

00:00:46 Please subscribe if you want to be part of the show.

00:00:48 That happens.

00:00:49 Usually, right now, Mod 7, every week, Monday at 10 a.m. Pacific time.

00:00:56 Time zone changes like daylight savings, screw that up a little bit for people.

00:01:00 But anyway, that's when it is.

00:01:02 We're going into summer, Brian.

00:01:03 I don't know how consistent we're going to be, but we've been pretty good lately, right?

00:01:06 Yeah.

00:01:07 I think so.

00:01:08 But we're people.

00:01:09 We've switched if we need to.

00:01:10 Exactly.

00:01:11 And if you would like an artisanal, handcrafted digest of an email form, we send a bunch of information that's not even in the show notes.

00:01:19 And Brian sends that out to us, to all of us, including me, every week.

00:01:24 And I appreciate that, Brian.

00:01:25 That's awesome.

00:01:26 You know what else I appreciate?

00:01:27 What?

00:01:28 Our audience.

00:01:29 Yeah.

00:01:29 When we say stuff, they're like, I know you said you don't know about a thing, but there are several things.

00:01:34 Yeah.

00:01:35 It's one of the benefits of having a podcast.

00:01:37 Like last week, you mentioned, what were you talking about?

00:01:40 You were talking about...

00:01:42 I was talking about something.

00:01:44 Black and Docs.

00:01:45 Or something.

00:01:45 Yeah.

00:01:46 Yeah.

00:01:46 Oh, no, no.

00:01:46 It was Black and Docs.

00:01:48 And it formatted all sorts of Markdown code blocks.

00:01:52 Yeah.

00:01:52 And I mentioned that that's cool to format the blocks with the code blocks within Markdown files, but I kind of wanted an auto formatter for Markdown itself.

00:02:03 And one of our listeners, Matthias, got ahold of us and said, hey, have you guys checked out, let's see, have you checked out MD format?

00:02:12 So MD format.

00:02:13 So I did check it out this weekend.

00:02:16 MD format is super cool.

00:02:18 Actually, I'm kind of in love with it.

00:02:19 So it's just like any other order formatter.

00:02:24 It's written in Python.

00:02:26 I wasn't necessarily needing it to be written in Python, but it's kind of neat that it is.

00:02:30 So you can check it out, see how it's implemented, and open source.

00:02:35 But so after you install it, you run MD format on a file.

00:02:39 So you can run it on, give it file names, you can give it a directory, and it reformats your markdown.

00:02:46 That's exactly what I wanted.

00:02:48 But you have to kind of agree with its style because it is opinionated.

00:02:51 And there is a warning that says, hey, we're going to, we may change this.

00:02:55 So if you really like the style that we're using right now, you might want to pin it, which is a good idea.

00:03:00 So the style, one of the things that I really wanted was the underlying headings of Markdown.

00:03:07 Like you can have on this next line of, you can write a heading and then on the next line you can write like three equal signs or more.

00:03:16 Or three dashes, and that means a heading or a subheading.

00:03:21 And I don't ever use that.

00:03:22 I use the pound version.

00:03:24 Yeah, only animals use the three underscore.

00:03:28 Well, I use the...

00:03:28 Okay, please don't write me.

00:03:29 I'm joking.

00:03:30 No, I often use the three lines for like the horizontal line.

00:03:33 I do too.

00:03:34 Yeah, I do too.

00:03:35 Thank you.

00:03:36 Anyway, so it switches it to the heading style I like.

00:03:40 Bulleted lists are kind of cool.

00:03:42 They alternate between dashes and asterisks because both of those work.

00:03:49 But so like if you have embedded lists, it'll alternate so it looks nice.

00:03:54 But I mean, the output is all the same anyway, but it makes it look nice.

00:03:59 And then there's standardization for ordered lists.

00:04:02 However, this one tripped me up.

00:04:04 I'm like, I get it.

00:04:05 So what they do with ordered lists, if you have like one, two, and three, it converts them all to one.

00:04:12 and that seems weird and there's a reason around it.

00:04:17 There's a reason is because it reduces the number of get diffs or when you change a version, if you move things around, the only thing that'll diff is the thing that you added or the thing you deleted, not all the numbering changes.

00:04:31 That's nice.

00:04:32 However, it's something I like to be able, it's less readable just right off the bat.

00:04:37 So there is a flag, you can pass it, pass it, --number and it doesn't do that.

00:04:42 It just numbers them consecutively, which actually also kind of nice because if you move things around, instead of having to go through and retype all those numbers, you can just do the empty format with number.

00:04:55 So why would he put a 1, 4, 7, 2, 3, 5?

00:05:00 Yeah.

00:05:01 Well, I mean, you've done that.

00:05:02 I'm sure like you're moving things around and now they're wrong.

00:05:07 So I'm excited about that.

00:05:09 If I was writing in plain a completely unassisted text editor, I might write just 1.1.1.

00:05:16 And so you have the ability to reorder it.

00:05:18 However, if you're using any sort of tools that understand markdown, when you hit enter, it will increment that like typora and IA writers and

00:05:25 others, right?

00:05:26 So it's going to number it automatically for you.

00:05:28 And if you want to reorder it, then it's broken.

00:05:30 And so this is really nice.

00:05:31 I like it.

00:05:32 Yeah.

00:05:33 And then you could, of course, since it's a command line tool, there's probably a hook already written for a commit, like a pre-commit hook, but you could write your own easily or just use it or use it and put it in CI.

00:05:46 So this is already enough, and I'm going to use it right away just for this.

00:05:51 But it doesn't stop there.

00:05:53 You can also mark down â€“ you can convert your code.

00:05:56 So it will handle auto-formatting your code blocks also, and for that it has a plug-in system because it doesn't know how you want it formatted.

00:06:08 So there's a plugin for black and one for rough and a bunch of others that you can.

00:06:14 So there's a web one.

00:06:15 So you can like format your JavaScript or CSS or HTML within your.

00:06:20 So this is pretty cool that you can have all these different plugins to convert your code blocks also.

00:06:27 Anyway, I'm kind of in love with this.

00:06:29 I like it a lot.

00:06:30 That is very nice.

00:06:31 Can you go back to the homepage of this thing?

00:06:33 I want to point out something interesting here.

00:06:35 Okay.

00:06:36 Yeah, go to the top.

00:06:37 So it says, here's how you install it.

00:06:38 PipX install MD format.

00:06:40 You could easily do UV tool install MD format, right, Brian?

00:06:44 Yeah, definitely.

00:06:46 But see the inject.

00:06:47 That inject, pipX inject MD format, MD format dash GFM.

00:06:54 I'm guessing GitHub Markdown format.

00:06:56 What does inject do?

00:06:57 Yes, I'm like, what is that?

00:06:58 And so while we were talking, I did a little research.

00:07:02 And what it does is it will add additional packages, but to the same virtual environment, the dedicated virtual environment that PipX creates for the tool.

00:07:12 So PipX will create a tool for MD format and then also install these other things.

00:07:17 Now, we talked UV up so much and we're going to come back to it somewhat as well.

00:07:24 But as far as I can tell, it doesn't have such a feature.

00:07:27 You've got to create a virtual environment and then install it.

00:07:32 You might be able to do a run --with and make a really long, complicated thing, but there's no clean one.

00:07:38 So how about that?

00:07:39 PipX for the win a little bit, which is not usually what we're saying.

00:07:42 I like PipX, but that's not normally what we say.

00:07:44 Yeah, no.

00:07:45 Cool.

00:07:46 All right.

00:07:46 All right.

00:07:47 All right.

00:07:48 On to the next, which is pre-commit UV.

00:07:52 I told you that we're coming back to it.

00:07:53 Here it is.

00:07:55 So despite it having no description, it's in the GitHub repo, which I could probably use.

00:08:00 The idea is to bring the advantages of UV to pre-commit and get pre-commit hooks.

00:08:09 So pre-commit is a project by Anthony Satili.

00:08:13 And the idea is it's like a multi-language runner, happens to be written in Python, but it's not about Python per se, that will run pre-commit hooks.

00:08:23 So instead of saying, well, you want to use a pre-commit hook written in Rust, you've got to install and manage Rust and all that.

00:08:28 You just kind of like do it its way.

00:08:30 just pre-commit it right yeah so that uses pip and it has all the bonuses but also the drawbacks of using pip so you can pip x install pre-commit and then here we are again pip x inject pre-commit dash uv and so then when you when it does it its thing to install and set up a new machine with the pre-commit hooks or updated or whatever it's going to use uv and they did a

00:08:56 oh go back up a look for second there's the uv version uh uv tool install pre-commit with so that's like the inject yeah

00:09:04 i think that that would i think that would do it okay i think that's the way that you could probably pull that off but i think you know maybe maybe that will do it if you do you i thought you could only do that with run but if you can do with in the install then you know there you go that's the That's the UV way.

00:09:22 Awesome.

00:09:22 Okay, so we're learning stuff.

00:09:25 But they're running a timed example of run one thing, and then the other says try pre-commit install hooks.

00:09:33 I don't know what the hooks were, but some set of hooks.

00:09:37 Install them with raw pre-commit and then pre-commit UV install hooks.

00:09:41 And the difference here is with regular pre-commit, it took 54 seconds plus or minus 8 around.

00:09:50 With pre-commit UV, it took 41.

00:09:53 However, that's the first time you do that on a machine that involves those dependencies, right?

00:10:00 If you hit it again, like if pre-commit UV has to build something from source, it's going to be super cached again, right?

00:10:08 Yeah.

00:10:09 So I think, well, it does say 10 runs.

00:10:12 Interesting.

00:10:13 So, but I think it's doing it with like an isolated environment or something like that.

00:10:16 Anyway, if you're already using UV and you use pre-commit hooks, check it out.

00:10:21 There's some configuration options you can pass with environment variables and so on.

00:10:26 Nice.

00:10:27 Once installed, it will use UV out of the box.

00:10:30 However, you can disable that and then require you to run it with, I think, the dash command, the pre-commit, pre-dash-commit-UV.

00:10:38 There you go.

00:10:39 Cool.

00:10:39 Cool, cool.

00:10:40 You know what?

00:10:40 Before we move on, I do want to tell people about our sponsor.

00:10:45 So let me tell everyone about Posit and Posit Connect Cloud.

00:10:50 So this episode is brought to you by the folks over at Posit.

00:10:54 They're originally known for building RStudio and Shiny, and they've created a bunch of tools for the Python community.

00:11:01 For example, Shiny for Python.

00:11:02 I had Joe Chung on to talk about that.

00:11:05 And a whole bunch of infrastructure things for Team Python.

00:11:09 So I want to tell you all about Posit Connect Cloud, which is a cool cloud-hosted, they manage it pass that manages your data science platform.

00:11:19 So it simplifies deployment of data applications and documents, and it might be the most simple way to share your Python content as a data scientist.

00:11:29 So all you do, three steps.

00:11:31 You put your code into a public or private repo, and then if it's private, you can give it access to your private repo, for example.

00:11:38 If it's public, obviously don't worry about it.

00:11:39 Then you tell Posit Connect Cloud at that repo and you click deploy.

00:11:45 That's it.

00:11:45 And it's off and running and it'll clone your code repo, build your asset, and host it on an online URL that you can share.

00:11:52 And best of all, it will update your app continuous delivery style.

00:11:58 So if you push new stuff to the branch that you've told it to publish, it'll just go, ah, there's a new version of your data science thing.

00:12:05 let me update the one out on the cloud that you're sharing with people at your company or researchers or however you're sharing it. And any GitHub user can create a free Posit Connect cloud account.

00:12:16 So you don't have to do a trial or anything like that. You can just use it for free and try it out.

00:12:20 And if you need fast, lightweight way to share your data science content, try Posit Connect cloud.

00:12:27 And as Brian told you last week, if you need these features, but you need them private, then you can try the on-prem version, Posit Connect.

00:12:35 So if you work on a data science team where moving fast matters, you owe it to yourself and your organization to check out Posit Connect Cloud. Visit pythonbytes.fm/connect-cloud. See if it's a good fit.

00:12:46 It's pythonbytes.fm/connect-cloud. The link is in your podcast player's show notes right at the top. Thank you to Posit for supporting Python Bytes.

00:12:55 Yes, very much. Thank you.

00:12:57 So now I'd like to talk about a couple of PEPs.

00:13:01 So these are pretty quick topics, but there's some changes to the PEPs.

00:13:07 So PEP 5.7.

00:13:09 No, I got that wrong.

00:13:10 PEP 7.5.8 is allow, accept, and accept star expressions without parentheses.

00:13:18 This was accepted as of, looks like, the 14th of March.

00:13:23 And so looking through here, and I kind of, I guess I just like, I don't really think about it too much.

00:13:30 But if you have a try accept block and the accept can accept a lot, like you shouldn't have just accept with nothing.

00:13:38 You should have accept with which types of exceptions.

00:13:41 That's right.

00:13:41 You should put pass it there.

00:13:42 Try accept pass is the best way.

00:13:44 Try accept.

00:13:45 No, I'm just kidding.

00:13:47 Try pass.

00:13:47 Try just skip the accept.

00:13:49 Anyway.

00:13:50 So normally, right now, if you have several exceptions that are allowed, you put them in parentheses.

00:13:59 Now, this is just a small little language change that says you don't actually have to put the parentheses there or you won't in the future.

00:14:06 And I'm all for this.

00:14:08 This looks great.

00:14:10 It seems like a slam dunk.

00:14:12 And I'm sure that's why I got it.

00:14:14 one of the reasons why it got accepted is that just in the future in Python 3.14 and beyond, you won't need the parentheses. That's really it. Kind of nice. So, however, you know, so like four years from now, we can start using this if, because you'll, you know, once you stop supporting all other Pythons below 3.0, you know, whatever for packet. So for package maintainers, this is, future news for normal humans. This is news for this year. So anyway, yes. The another PEP that is not accepted yet, it's in draft form. And I just want to highlight it because I think it's a good idea is PEP 781 make type checking, make type checking a built in constant. And this, this, The idea around this is I'm noticing as I'm using typing more is that occasionally I need to, like if you're going to import something, like if I only import something just so that I can import the type, so that I can put the type of something, you know, the type of a class or a type of a return value or whatever in a function import or a function statement or whatever, a variable type.

00:15:30 I don't really need the type the import for running I just need it for type checking because that's to get the type so there's there's that but it does cause some uh the m but if you do that the import like um you know is running all the time anyway so but you always have to to say like you know from typing import type checking what to tell whether you're type checking or not it's just basically just saying that we that we won't have to do this anymore so instead of uh Oh, where's the actual spec?

00:16:04 Yeah, so we'll have like, just have it be a constant is all.

00:16:08 So anyway.

00:16:09 Yeah, that's great.

00:16:10 Part of the built-ins, right?

00:16:11 Just you don't have to import it.

00:16:13 You can just use it like you can print another.

00:16:15 Yeah, yeah, like underscore dunder type checking or something.

00:16:19 So yeah, anyway.

00:16:21 Love it.

00:16:21 I think we should have it.

00:16:22 It'll be good.

00:16:24 Oh, while I was here, though, another thing I want to highlight is I was like looking around.

00:16:28 I'm like, well, what else is there?

00:16:30 and there's an index by category here at peps.python.org and it's really kind of great.

00:16:37 This is a really well put together web page about how to navigate peps because there's a lot of peps, right?

00:16:43 So I was like, well, I'm currently looking for ones that have been accepted.

00:16:49 So you can pop down and say accepted peps and then you can look at what the version number, which version they're coming in or which they came in and stuff.

00:16:59 So really nice, nicely done, easy to navigate website.

00:17:03 So good job.

00:17:03 That is very nice.

00:17:04 Anyway, that's it for that.

00:17:05 I wonder if that's available in a structured data way.

00:17:08 Is there like a JSON that represents some data or something?

00:17:11 There is an API, but I don't know if it applies to that.

00:17:13 I'm sure somebody will tell us.

00:17:15 Yeah.

00:17:16 Nine point ChatGPT at that table and have it do it.

00:17:20 Yeah, JSON metadata.

00:17:21 Yes, indeed.

00:17:22 All right.

00:17:23 On my final item, Siri.

00:17:25 Not, sorry.

00:17:26 Anybody's phone who started?

00:17:27 I just pronounced the same, S-E-R-I-E.

00:17:31 I guess that would be the same.

00:17:32 So this is for people who are more terminal-like but need a better Git experience.

00:17:38 So it's a rich Git commit graph in your terminal.

00:17:42 So there's a little picture here.

00:17:46 Open the image and it'll get it bigger, I suppose.

00:17:48 But basically, it gives you the entire branch tree and something that you can navigate around and interact with kind of like rich and lets you do things like search all branches for over the commit log and browse through tags and all kinds of stuff what do you think brian

00:18:04 i love this i mean can you try it right away yes i know so cool it looks really cool i totally want to sound like okay that's cool now it's written in rust so it's not a python thing it is a tool for python people although i feel like we have a certain kinship with rust people it's not really written in python but That doesn't matter because you just type the command and you get better understanding of your Python and other code, right?

00:18:26 Yeah.

00:18:27 So, yeah, there's not a whole lot more to say about it.

00:18:29 You can install it with Homebrew.

00:18:30 You can install it via cargo.

00:18:32 Other ways, you can even build it from source.

00:18:34 But, yeah, it's a pretty simple tool, but it's super nice.

00:18:37 I'll have to check it out.

00:18:38 Please be available on Windows.

00:18:41 Because that's where I really need it.

00:18:44 Yeah, for work, right?

00:18:45 Yeah.

00:18:46 I imagine it is.

00:18:47 I mean, Rust is pretty cross -platform.

00:18:50 Cross them fingers.

00:18:52 Remember to try it in Windows Terminal.

00:18:54 Don't do it in cmd.exe.

00:18:56 Don't push your luck.

00:18:57 You just ask for it.

00:18:58 Windows Terminal?

00:18:58 Yeah, it's like the much nicer.

00:19:01 PowerShell?

00:19:03 PowerShell is the shell that runs, but Windows Terminal is the app that hosts it, and it has much better compatibility.

00:19:09 Like, for example, Rich works a lot better in Windows Terminal than it does in CMD and so on.

00:19:14 Get it from the Microsoft App Store.

00:19:16 How am I only learning about this now?

00:19:18 It's really nice.

00:19:19 And you can do like drop downs.

00:19:21 Okay.

00:19:22 Say run this tab in PowerShell.

00:19:24 Run this one and get back.

00:19:25 Run this one and I don't know what you call DOS, whatever that is.

00:19:27 I'll report back because.

00:19:29 Yes, do it.

00:19:29 Let us know.

00:19:30 I've spent my entire career pretending that I don't use a Windows machine at work.

00:19:34 But yeah.

00:19:35 Okay.

00:19:36 Yeah.

00:19:36 Yeah.

00:19:36 You can even, I think, open a particular tab as a Windows subsystem for Linux and Vutu type deal.

00:19:44 So pretty cool.

00:19:45 Nice.

00:19:45 Okay.

00:19:46 Tangent.

00:19:46 All right.

00:19:46 Extras.

00:19:47 We're on to our extras if you have extras.

00:19:49 I have no extras today.

00:19:51 Well, you're lucky that I do.

00:19:54 Oh, and before we jump on, Will, who I just released a Talk Python episode about high-performance algorithms, algorithms for high-performance terminal apps, and we talked a lot about this.

00:20:04 It says Windows Terminal will be the default in future Windows releases, good times for terminal users, and, in the case of Will, terminal framework builders, Tui builders.

00:20:14 I wonder if you need term colors for Windows Terminal.

00:20:17 So, anyway, okay.

00:20:18 I don't know.

00:20:19 I don't know, but let's see what else I have extra.

00:20:22 Okay, not the picture.

00:20:24 So I wrote a blog post.

00:20:25 I was just going to link to the place that I'm using, but I wrote a blog post called Sunsetting Search.

00:20:30 And Brian, I used to use search so much.

00:20:33 I've talked about Kagi and how much I love Kagi and all those things, right, a couple years ago.

00:20:38 And I was probably doing a couple thousand searches per month in there.

00:20:44 I looked last month across my three computers that I use and my multiple browsers on each one and my phone and my iPad.

00:20:52 I did 211 searches.

00:20:54 How about that?

00:20:55 You probably did more, but okay.

00:20:57 Kagi keeps track like in your account because they charge you by it.

00:21:00 Oh, okay.

00:21:01 So I went and looked at my Kagi stats and I said, you did 211.

00:21:04 Why is it going down?

00:21:05 Because I'm using AI to answer so many of these questions these days.

00:21:10 And so many with the pro ChatGPT and stuff, it's just like I could open up a bunch of tabs and do a research project myself or I could, hey, go do some deep research on this and come back to me with references to where you found the answers and summarize it.

00:21:25 And anyway, I think it's, I just thought it was really wild.

00:21:28 And so I am switching over to something called StartPage.

00:21:32 Have you heard of StartPage?

00:21:33 Yeah, I've been using it for the last couple months.

00:21:36 I love it.

00:21:36 Do you like it?

00:21:37 Yeah.

00:21:37 Yeah. It doesn't have, I'm going to sound like an old guy or something. I like that it just gives me search results and doesn't give me AI results at the top. Yeah. Yeah. Yeah. It's

00:21:49 really good.

00:21:51 And I super love it. You can go and it's, you don't even have to have an account. You can just basically set it up to like not show all of its ad stuff somewhere. I don't know how it's fooling around with that, but I think it's great. It's basically private, like privacy preserving doesn't pass your information on along to Google, but it's basically the Google index.

00:22:12 There's some places that say don't show the ad as an appearance, general, I don't know.

00:22:16 Somewhere here. So don't show all the marketing goo.

00:22:18 But if you go and search there, it will sort of disintermediate your Google searches, I guess.

00:22:27 And it lets you, it has like a little visit just privately, right? You know, you can say if you do some kind of search, like, how do I get out of here?

00:22:34 Let's go back here. If I search for like Python podcast or something, it'll let you run it in like a little VM iframe that doesn't even let it know where you came from. It's pretty interesting, this thing. Yeah, I think it's pretty interesting.

00:22:48 So it's using the Google index though?

00:22:51 Yes. And the way that it funds itself is it also has ads.

00:22:55 Yeah.

00:22:55 However, notice I have no ads in mind because I run an ad blocker and it takes

00:22:59 them out. So it's even better.

00:23:01 See, I'm running it with ads and it's just not annoying to me. I'm like, I'm okay with that.

00:23:06 yeah that's good because they're not tracking it they're not tracking stuff

00:23:10 yeah I mostly hate the tracking and the retargeting and all that one of the curious things I've got about this is I know that Google sort of a tangent but I know that Google worsened their search like recent I don't know several years ago so that people would have to go through more pages so they see more ads

00:23:31 yes it's terrible I wonder if that's the case with the did they do that mucking about in the index so that start pages using the mucked up index or probably but but it doesn't have as much

00:23:43 of that um not immediate like not so much of the answers so if you did a search on straight google you get and here's a whole bunch of videos and here's a bunch of like q a stuff we found and like that's half of it and then you got the ads of which are a third of it then like way down the bottom somewhere you get a little bit of something to start and i don't see any of that stuff there

00:24:04 yeah or just the ai answer at the top i think that um a lot of that's killing a lot of ad revenue for actual or actually traffic to to people that are actually writing about interesting stuff so i know exactly kagi does have a

00:24:18 very interesting approach on whether to put the ai answer at the top and that's if you if your search on kagi ends in a question mark it'll put an ai answer if the same search without a question mark on the end goes there's no answer shown.

00:24:31 Interesting.

00:24:32 Yeah.

00:24:33 I believe that start page does have an answer sort of thing, but you got to turn it on or something.

00:24:38 I'm not sure.

00:24:38 I feel like I've seen it, but anyway, since I'm not using search so much, I thought, well, let me search around and see what else I can find.

00:24:44 And yeah, start page.

00:24:45 It's interesting that you're, that you're using that as well.

00:24:48 Yeah.

00:24:49 Yes.

00:24:49 I think it gets, it just got turned on by me.

00:24:52 I didn't think I found it.

00:24:53 I think Vivaldi turned it on or something, but I don't know.

00:24:56 Interesting.

00:24:57 Okay.

00:24:57 Yeah.

00:24:57 I'm a fan.

00:24:58 All right.

00:24:59 Cool.

00:25:00 Yeah, cool.

00:25:02 One final extra.

00:25:04 Rhett Turnbull, who's been on Talk Python to talk about building Mac apps with Python, sent us, so he knows something about building some frameworks and stuff.

00:25:13 He says, remember I said, Brian, you can just UV tool install Ruff and then you just have Ruff and don't have to put it into your requirements file or your UV lock or wherever those things go.

00:25:24 He says, good advice.

00:25:25 However, you might want to actually put it in your virtual environment.

00:25:29 That way it becomes part of your pinned dependencies so that people who are contributing to your project use the same version of Ruff if they don't already have that exact version and you don't get like flip-flop of get changes because something changed about Ruff itself or the rules defaults or something.

00:25:46 Yeah, yeah, I totally agree.

00:25:47 And that's one of the fun things that we have in talking about Python tools and everything for everybody is that the advice for solo developers is different than the advice of people that work on teams.

00:25:58 So, yeah.

00:26:00 Teams even being open source teams.

00:26:02 Yeah, exactly.

00:26:03 Exactly.

00:26:03 All right.

00:26:04 Shall we make a joke?

00:26:06 Sure.

00:26:06 Let's see how I did today.

00:26:08 This one, I thought of you, Brian, when I wrote this because I thought this is all about the C developers or even the C# or C++.

00:26:17 I'm sure there's many other languages that have this.

00:26:19 But C in particular came to mind.

00:26:21 This has to do with a genie.

00:26:24 And this software developer-like person comes along and stumbles upon the golden genie-shaped little vase or whatever the heck it is.

00:26:34 Yeah.

00:26:35 And rubs it as you do.

00:26:37 Out comes the genie.

00:26:37 He says, I will grant you three wishes.

00:26:39 Okay.

00:26:39 But before you can, the genie interrupts.

00:26:42 The rules are you can't wish for death or life or make people fall in love.

00:26:47 And you can't wish for more wishes.

00:26:50 That's usually the escape hatch.

00:26:52 you have three wishes, like first wish I wish for a million wishes. Now let's start. Can't do that.

00:26:57 Can't wish for more. So I can wish for fewer wishes? Why would you wish for that? I think there's a bug in this cartoon, so I'm going to fix it. I wish to have negative one wishes. Fine.

00:27:09 Granted, you have 4,295,967,000 wishes left.

00:27:23 Stack of the cliff.

00:27:24 Right.

00:27:24 Underflow.

00:27:25 Yeah, it's an unsigned int they were storing it in.

00:27:28 Yeah.

00:27:28 Yeah, I think you're right.

00:27:29 It has a bug because the cartoon has zero and zero should be valid for any numbering system.

00:27:36 Yes, it should.

00:27:37 But minus one.

00:27:40 and then if you go to the thread a little bit further down in here there's a lot of pretty good comments a lot of almost no one caught that it needs to be negative like underflow like zero doesn't underflow people but someone pointed out the hat pointed out you need to upgrade the 64 bit genie there's some kind of like animated crazier crazy game with like lightning striking it that's the 64 bit version that's funny it would just give you even more negative more wishes if you underfloat that though.

00:28:08 Yeah. Since you remember the first time you heard, you probably don't, but I, and I don't either, but early on learning these, like the genie and the lamp stories, I was like thrown because like one that didn't look like any lamp I had in my house.

00:28:24 And, and why are you rubbing the lamp? That seems weird. Why would somebody do that?

00:28:30 But I guess it comes from a time when you've got more time on your hands and.

00:28:34 well no yeah well it's also like it's an oil lamp they look different and um also uh it was probably brass um and now that i'm an antique dealer we yeah you

00:28:46 got to polish it or something right yeah yeah exactly i don't know that i own a single thing that's brass i got a lot of crap around my house but i don't know that any of them are brass but who knows really anyway i thought that was a pretty good pretty good joke what do you think it was good

00:28:59 i like it yeah yeah as a as a C person, you have to approve, except for the bug.

00:29:04 Yes, except for the bug.

00:29:06 Except for the bug.

00:29:06 They didn't test it.

00:29:08 No, they certainly did not test it.

00:29:10 We'll come back to that next week somehow, I'm sure.

00:29:12 Yeah.

00:29:12 All right.

00:29:13 Well, thank you, Brian.

00:29:14 Thank you.

00:29:15 Thank you, everyone, for listening, and see you all later.

