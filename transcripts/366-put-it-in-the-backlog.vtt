WEBVTT

00:00:00.000 --> 00:00:02.120
- Hello and welcome to Python Bytes


00:00:02.120 --> 00:00:03.840
where we deliver Python news and headlines


00:00:03.840 --> 00:00:05.400
directly to your earbuds.


00:00:05.400 --> 00:00:10.400
This is episode 366, recorded January 9th, 2024.


00:00:10.400 --> 00:00:13.240
Welcome to the new year.


00:00:13.240 --> 00:00:14.240
I'm Michael Kennedy.


00:00:14.240 --> 00:00:15.320
- And I'm Brian Okken.


00:00:15.320 --> 00:00:17.360
- And Brian, this episode is sponsored by us.


00:00:17.360 --> 00:00:19.500
Support our work by taking our courses,


00:00:19.500 --> 00:00:21.360
the Talk Python Training ones,


00:00:21.360 --> 00:00:23.000
the complete pytest course,


00:00:23.000 --> 00:00:25.800
and as well as through our Patreon supporters.


00:00:25.800 --> 00:00:28.180
All those links are at the top of your show notes


00:00:28.180 --> 00:00:30.560
in your podcast player, episode page, and so on.


00:00:30.560 --> 00:00:32.600
Connect with us over on Mastodon.


00:00:32.600 --> 00:00:35.280
You'll find us all on Fosstodon.


00:00:35.280 --> 00:00:38.680
That's right, Michael, Brian, and the show.


00:00:38.680 --> 00:00:41.920
It has its own pronouns and gets thrown in the group


00:00:41.920 --> 00:00:43.200
and has its own website and all that.


00:00:43.200 --> 00:00:45.920
So come see Python Bytes over there as well.


00:00:45.920 --> 00:00:49.460
And if you wanna be part of the live stream, you're welcome.


00:00:49.460 --> 00:00:51.920
That's certainly not required to take part


00:00:51.920 --> 00:00:53.400
and enjoy the show, but if you wanna be part


00:00:53.400 --> 00:00:55.840
of the live stream, pythonbytes.fm/live.


00:00:55.840 --> 00:00:58.380
Usually you'll see some scheduled upcoming one.


00:00:58.380 --> 00:01:02.020
You can click, you can smash the bell, crush the subscribe,


00:01:02.020 --> 00:01:03.540
all the things they say over there.


00:01:03.540 --> 00:01:04.660
Yeah, Brian, it's been a while.


00:01:04.660 --> 00:01:05.820
Welcome back to the show.


00:01:05.820 --> 00:01:06.860
- It has been a while.


00:01:06.860 --> 00:01:08.460
I'm excited to be back.


00:01:08.460 --> 00:01:09.300
- I am too.


00:01:09.300 --> 00:01:12.860
Thanks everyone for being patient with us


00:01:12.860 --> 00:01:15.580
while we took a little break over the winter break.


00:01:15.580 --> 00:01:18.980
It's always a little bit tricky to juggle that kind of stuff,


00:01:18.980 --> 00:01:21.380
especially, Brian, when you're on a beach


00:01:21.380 --> 00:01:24.860
and it's 80 degrees Fahrenheit or 20 degrees Celsius,


00:01:24.860 --> 00:01:26.000
22, something like that.


00:01:26.000 --> 00:01:27.960
It was a windy day.


00:01:27.960 --> 00:01:29.000
There was one day it was windy.


00:01:29.000 --> 00:01:30.680
It was rough.


00:01:30.680 --> 00:01:32.280
- I'm really sorry about that.


00:01:32.280 --> 00:01:33.360
- Thank you, thank you.


00:01:33.360 --> 00:01:35.280
I appreciate your bonuses.


00:01:35.280 --> 00:01:39.940
- Yeah, Brian, can we maybe skip this episode


00:01:39.940 --> 00:01:43.400
because I'm in Hawaii, hanging out on the beach,


00:01:43.400 --> 00:01:44.440
sipping drinks.


00:01:44.440 --> 00:01:45.280
Yeah, no problem.


00:01:45.280 --> 00:01:46.320
- Yeah, no, it was lovely.


00:01:46.320 --> 00:01:47.160
It's good to get away,


00:01:47.160 --> 00:01:48.920
but it's also really good to be back.


00:01:48.920 --> 00:01:50.360
So yeah.


00:01:50.360 --> 00:01:51.200
- And I missed you.


00:01:51.200 --> 00:01:52.020
- Yeah, I missed you too.


00:01:52.020 --> 00:01:55.200
- And everyone missed the audience.


00:01:55.200 --> 00:01:58.480
Shall we jit it off for 2024?


00:01:58.480 --> 00:01:59.600
Let's jit it.


00:01:59.600 --> 00:02:00.960
- Let's jit started.


00:02:00.960 --> 00:02:03.160
- Let's jit started.


00:02:03.160 --> 00:02:06.040
- Okay, so Anthony Shaw.


00:02:06.040 --> 00:02:08.200
So one of the things that's possibly,


00:02:08.200 --> 00:02:12.120
hopefully coming into Python 13 is Python 3.13.


00:02:12.120 --> 00:02:14.560
Sorry, we're not all the way up to Python 13 yet.


00:02:14.560 --> 00:02:18.160
We're still in 3.13 is a jit compiler.


00:02:18.160 --> 00:02:23.020
It's, and I'm with,


00:02:23.020 --> 00:02:26.260
because of like, you know, Java and other languages,


00:02:26.260 --> 00:02:27.820
I'm familiar with jit compilers,


00:02:27.820 --> 00:02:29.680
but Python's is gonna be a little different.


00:02:29.680 --> 00:02:34.140
So Anthony Shaw was kind enough to write up a article


00:02:34.140 --> 00:02:35.240
kind of walking through it.


00:02:35.240 --> 00:02:36.840
And it's a really nice,


00:02:36.840 --> 00:02:39.220
there's a couple of things that I recommend reading it


00:02:39.220 --> 00:02:42.640
if you don't really know what a jit compiler is,


00:02:42.640 --> 00:02:44.220
or if like me,


00:02:44.220 --> 00:02:47.060
you didn't know what a copy and paste jit compiler


00:02:47.060 --> 00:02:49.520
or jit whatever implementation is.


00:02:49.520 --> 00:02:51.460
So that's kind of where he goes with this.


00:02:51.460 --> 00:02:55.320
And he starts off talking about really what a jit is.


00:02:55.320 --> 00:02:58.380
And really it's something that basically generates


00:02:58.380 --> 00:03:02.020
your compiled code.


00:03:02.020 --> 00:03:04.660
For a lot of times it's compiled code, machine code,


00:03:04.660 --> 00:03:07.940
but for Python, it's going to be the,


00:03:07.940 --> 00:03:10.140
not the compiled code, but the byte code.


00:03:10.140 --> 00:03:12.780
So getting the byte code ready, I think.


00:03:12.780 --> 00:03:14.820
I may have gotten this wrong,


00:03:14.820 --> 00:03:19.820
but he walks through kind of what a compiler is,


00:03:19.820 --> 00:03:22.460
or a jit compiler is,


00:03:22.460 --> 00:03:25.740
with the, as if you were writing it in Python.


00:03:25.740 --> 00:03:27.780
So he goes through a little example


00:03:27.780 --> 00:03:30.200
of making your own Python version


00:03:30.200 --> 00:03:32.620
of the CPython interpreter,


00:03:32.620 --> 00:03:33.960
which is actually written in C.


00:03:33.960 --> 00:03:35.380
But if you were to write in Python,


00:03:35.380 --> 00:03:36.460
it might look like this,


00:03:36.460 --> 00:03:39.260
like switching on op code of load construct,


00:03:39.260 --> 00:03:41.780
load constant, and things like that.


00:03:41.780 --> 00:03:43.940
And you can see what those primitives are


00:03:43.940 --> 00:03:47.880
by using the dis module for disassembler.


00:03:47.880 --> 00:03:49.420
And that's fun.


00:03:49.420 --> 00:03:52.220
And then he walks through kind of,


00:03:52.220 --> 00:03:56.080
okay, so that's what a jit compiler might be.


00:03:56.080 --> 00:03:58.940
What is a copy and patch jit compiler,


00:03:58.940 --> 00:04:01.180
not a copy and paste, copy and patch.


00:04:01.180 --> 00:04:06.180
And that's a little bit more harder to describe over audio,


00:04:06.180 --> 00:04:10.680
but Anthony does a really good job describing it.


00:04:10.680 --> 00:04:14.600
And then talking about really this thing,


00:04:14.600 --> 00:04:17.520
instead of like copying a piece and then running it,


00:04:17.520 --> 00:04:19.500
it copies like more than one bit,


00:04:19.500 --> 00:04:20.640
like the entire function,


00:04:20.640 --> 00:04:22.520
and then running the whole thing.


00:04:22.520 --> 00:04:24.120
And it's a little bit faster.


00:04:24.120 --> 00:04:27.080
And then we're gonna do something like that.


00:04:27.080 --> 00:04:29.240
It's gonna be something like that for Python


00:04:29.240 --> 00:04:32.320
inside of the Python C interpreter.


00:04:32.320 --> 00:04:35.360
And it's just a good walkthrough


00:04:35.360 --> 00:04:37.840
to kind of understand what is going on,


00:04:37.840 --> 00:04:39.800
what are these people doing and why?


00:04:39.800 --> 00:04:43.400
And the why is it's gonna be a couple of things.


00:04:43.400 --> 00:04:45.200
It's gonna be faster.


00:04:45.200 --> 00:04:47.720
And there's some benchmarks that show


00:04:47.720 --> 00:04:51.040
it's from like two to 9% faster, which is great.


00:04:51.040 --> 00:04:53.020
I mean, actually anytime you can make things


00:04:53.020 --> 00:04:54.600
a little faster, it's good.


00:04:54.600 --> 00:04:56.200
But is it worth it for this?


00:04:56.200 --> 00:04:59.560
And it's worth it for this partly because mostly


00:04:59.560 --> 00:05:01.840
it doesn't make it slower, which is the good part.


00:05:01.840 --> 00:05:04.600
Because of this jit compiler,


00:05:04.600 --> 00:05:07.460
there's other tricks that they can do down the line


00:05:07.460 --> 00:05:08.840
to make things a lot faster.


00:05:08.840 --> 00:05:11.560
So this is great news and a good explanation.


00:05:11.560 --> 00:05:12.400
- It's super exciting.


00:05:12.400 --> 00:05:13.400
Yeah, it's super exciting.


00:05:13.400 --> 00:05:15.600
And you're on top of the news today, Brian.


00:05:15.600 --> 00:05:17.160
Like this came out this morning.


00:05:17.160 --> 00:05:18.200
(laughing)


00:05:18.200 --> 00:05:19.160
Well done.


00:05:19.160 --> 00:05:20.960
This is brand new from Anthony Shaw.


00:05:20.960 --> 00:05:25.480
Anthony, excellent work writing this up and all the things.


00:05:25.480 --> 00:05:30.320
So one part that's interesting is two to 9% is great.


00:05:30.320 --> 00:05:33.660
Like that's still really good to make things faster.


00:05:33.660 --> 00:05:37.240
But he also points out that this is just the foundation.


00:05:37.240 --> 00:05:39.280
Like once you have a jit,


00:05:39.280 --> 00:05:42.780
there's all kinds of interesting things that jits can do


00:05:42.780 --> 00:05:47.120
on a per hardware architecture, per platform story, right?


00:05:47.120 --> 00:05:48.900
They can say, well, you wrote this code,


00:05:48.900 --> 00:05:52.560
but I know we have these specific machine instructions,


00:05:52.560 --> 00:05:55.920
specialized machines instructions on this CPU.


00:05:55.920 --> 00:05:57.040
So let's make it do that.


00:05:57.040 --> 00:06:00.360
Or I see that you could actually inline this function.


00:06:00.360 --> 00:06:01.640
Instead of just make it run faster,


00:06:01.640 --> 00:06:03.780
we could inline it over here and here and here.


00:06:03.780 --> 00:06:06.020
And then, you know, function calls in Python are expensive.


00:06:06.020 --> 00:06:09.320
So maybe they just become not function calls, right?


00:06:09.320 --> 00:06:12.120
There's a lot of possibility for where things go.


00:06:12.120 --> 00:06:14.120
It would be interesting, I wonder,


00:06:14.120 --> 00:06:16.840
you could even do things like, you know,


00:06:16.840 --> 00:06:19.480
compile stuff to C and you see optimizations


00:06:19.480 --> 00:06:21.000
as part of the JIT compiler, right?


00:06:21.000 --> 00:06:23.760
Like maybe there's a bunch of like layers


00:06:23.760 --> 00:06:25.080
that could happen, I don't know.


00:06:25.080 --> 00:06:27.720
But yeah, basically this is, you know,


00:06:27.720 --> 00:06:31.160
a foot in the door for compiler optimizations


00:06:31.160 --> 00:06:32.880
that we've not had before in Python.


00:06:32.880 --> 00:06:34.480
- Yeah, yeah, it's pretty exciting.


00:06:34.480 --> 00:06:35.320
So, yep.


00:06:35.320 --> 00:06:36.320
Excellent, excellent.


00:06:36.320 --> 00:06:38.240
So the future is bright.


00:06:38.240 --> 00:06:40.800
Also compounding is interesting, right?


00:06:40.800 --> 00:06:42.460
All right, we're supposed to get Python


00:06:42.460 --> 00:06:45.720
much, much faster by making it like a little bit faster


00:06:45.720 --> 00:06:48.120
over five years continuously, right?


00:06:48.120 --> 00:06:49.720
And this is just part of that, right?


00:06:49.720 --> 00:06:50.920
So you keep adding these things up


00:06:50.920 --> 00:06:55.200
and the Python, I don't know, 3.14.15 versus 3.10


00:06:55.200 --> 00:06:57.660
when they started could be super, super different.


00:06:57.660 --> 00:06:58.500
- Yeah.


00:06:58.500 --> 00:07:01.560
- All right, I hope people like deploying, packaging,


00:07:01.560 --> 00:07:04.120
bundling, talking about managing your projects


00:07:04.120 --> 00:07:05.640
because that's all I got this week, right?


00:07:05.640 --> 00:07:06.720
I got one after another.


00:07:06.720 --> 00:07:11.720
So let's start out with this Mastodon post by Bas Nijholt.


00:07:11.720 --> 00:07:14.960
And Bas says, "We're launching Unidep,


00:07:14.960 --> 00:07:17.800
which is a unified Conda and PIP


00:07:17.800 --> 00:07:19.640
dependency management system."


00:07:19.640 --> 00:07:21.440
Okay, so we've got the Conda world,


00:07:21.440 --> 00:07:22.800
we've got the pip world.


00:07:22.800 --> 00:07:24.480
Sometimes they kind of work together,


00:07:24.480 --> 00:07:26.280
but they're pulling from different sources.


00:07:26.280 --> 00:07:29.520
So you can like in a Conda virtual environment,


00:07:29.520 --> 00:07:31.440
you could pip install a thing, I believe,


00:07:31.440 --> 00:07:32.600
and it would still install.


00:07:32.600 --> 00:07:33.520
But here's the deal.


00:07:33.520 --> 00:07:36.560
Like you can create a single requirements.yaml file


00:07:36.560 --> 00:07:39.440
and say, I depend on these different projects.


00:07:39.440 --> 00:07:42.560
Those two come from Conda, Conda Forge or something.


00:07:42.560 --> 00:07:44.920
These three come from PIP, IPI.


00:07:44.920 --> 00:07:46.200
Interesting, huh?


00:07:46.200 --> 00:07:48.000
- I'm actually excited about this.


00:07:48.000 --> 00:07:49.220
This is very interesting.


00:07:49.220 --> 00:07:50.120
- Yeah, it's super interesting.


00:07:50.120 --> 00:07:52.680
It works with pyproject.toml and setup.py.


00:07:52.680 --> 00:07:54.840
It also is good for monorepos.


00:07:54.840 --> 00:07:56.480
So why is this good for monorepos?


00:07:56.480 --> 00:08:00.600
Monorepos are, I don't wanna have to switch projects


00:08:00.600 --> 00:08:02.400
on GitHub.


00:08:02.400 --> 00:08:04.920
I just want one ginormous one for a whole company.


00:08:04.920 --> 00:08:06.680
So let's just have one, right?


00:08:06.680 --> 00:08:09.000
Which is kind of an insane way of working,


00:08:09.000 --> 00:08:10.520
but it's also pretty interesting, right?


00:08:10.520 --> 00:08:12.760
Like I've got two libraries, they depend on each other.


00:08:12.760 --> 00:08:14.600
It's just all on the same project structure.


00:08:14.600 --> 00:08:16.760
So, you know, you just version them together.


00:08:16.760 --> 00:08:20.120
But that's literally every project for your company.


00:08:20.120 --> 00:08:22.480
And there's different teams potentially


00:08:22.480 --> 00:08:24.840
working with different versions and with different things.


00:08:24.840 --> 00:08:26.760
So maybe there's some data science folks


00:08:26.760 --> 00:08:29.760
and there's some web API folks


00:08:29.760 --> 00:08:32.000
and the web API folks are maybe PIP


00:08:32.000 --> 00:08:33.960
and the data science folks are Conda.


00:08:33.960 --> 00:08:36.400
So here you could express all of the requirements


00:08:36.400 --> 00:08:38.840
for the different projects


00:08:38.840 --> 00:08:40.280
through these different sources, right?


00:08:40.280 --> 00:08:41.120
- Yeah.


00:08:41.120 --> 00:08:42.040
- Some might be Conda, some might be PIP,


00:08:42.040 --> 00:08:44.640
but here's one way to express it.


00:08:44.640 --> 00:08:47.360
Also, it'll create consistent Conda lock files


00:08:47.360 --> 00:08:48.720
for multiple projects.


00:08:48.720 --> 00:08:50.840
It has a platform support


00:08:50.840 --> 00:08:54.760
and you can just uni-dep install if you want.


00:08:54.760 --> 00:08:55.920
It's pretty cool.


00:08:55.920 --> 00:08:59.640
So looking over at the GitHub here,


00:08:59.640 --> 00:09:01.000
yeah, pretty much, honestly,


00:09:01.000 --> 00:09:02.440
pretty much does the same thing.


00:09:02.440 --> 00:09:04.600
But it shows you some examples of, you know,


00:09:04.600 --> 00:09:06.600
how you might express, you know,


00:09:06.600 --> 00:09:09.200
what is a Conda dependency?


00:09:09.200 --> 00:09:10.680
What is a pip dependency?


00:09:10.680 --> 00:09:12.800
So like in your requirements.yaml,


00:09:12.800 --> 00:09:14.760
you just have dependencies.


00:09:14.760 --> 00:09:17.680
Let's just say numpy or you'd say conda colon,


00:09:17.680 --> 00:09:21.040
Python graph is, or you'd say pip colon graph is


00:09:21.040 --> 00:09:23.240
if you wanted that one and so on, right?


00:09:23.240 --> 00:09:26.040
And look at this, you can even include other,


00:09:26.040 --> 00:09:28.440
you have like nested requirements.yaml,


00:09:28.440 --> 00:09:31.760
which maybe talks to the monorepo type of thing


00:09:31.760 --> 00:09:34.880
or multiple projects just in one repository, right?


00:09:34.880 --> 00:09:37.560
Like this thing actually requires these four other things.


00:09:37.560 --> 00:09:38.920
This is even interesting.


00:09:38.920 --> 00:09:40.560
You know, we were talking about courses


00:09:40.560 --> 00:09:41.640
and I know you're gonna mention something


00:09:41.640 --> 00:09:43.120
about your course later.


00:09:43.120 --> 00:09:45.520
This is actually would be really nice for courses


00:09:45.520 --> 00:09:46.360
as well to do.


00:09:46.360 --> 00:09:48.040
And I suspect you probably could do with PIP.


00:09:48.040 --> 00:09:50.040
I just, it never crossed my mind, right?


00:09:50.040 --> 00:09:52.960
I might have chapter one, let's do FastAPI stuff.


00:09:52.960 --> 00:09:56.040
Chapter two, let's add Beanie and MongoDB.


00:09:56.040 --> 00:09:57.880
And like those have different requirements files


00:09:57.880 --> 00:09:59.600
and you might wanna just be able to express like,


00:09:59.600 --> 00:10:02.600
well, just run this one, just run this thing.


00:10:02.600 --> 00:10:04.000
You have everything you need for the course,


00:10:04.000 --> 00:10:06.640
but you also wanna not like talk about everything


00:10:06.640 --> 00:10:07.560
before you get to it, right?


00:10:07.560 --> 00:10:09.040
You could have like one at the top


00:10:09.040 --> 00:10:10.280
of your course repository


00:10:10.280 --> 00:10:12.560
and then every chapter have its own one of these


00:10:12.560 --> 00:10:15.320
and then just like pull them together with this, like this.


00:10:15.320 --> 00:10:16.440
- Oh, interesting. - So they're nesting.


00:10:16.440 --> 00:10:17.280
That's cool, right?


00:10:17.280 --> 00:10:18.600
- Yeah, I've never really thought to do that.


00:10:18.600 --> 00:10:20.280
- I haven't either, but it seems like I should.


00:10:20.280 --> 00:10:21.840
I've just been copying that stuff around.


00:10:21.840 --> 00:10:23.640
Seems like I shouldn't do that really.


00:10:23.640 --> 00:10:26.080
Awesome though.


00:10:26.080 --> 00:10:29.040
So, UniDepth, it's brand new.


00:10:29.040 --> 00:10:31.680
I don't know if this thing's gonna take off


00:10:31.680 --> 00:10:33.200
and be super, super popular


00:10:33.200 --> 00:10:34.960
or if it's gonna be kind of niche,


00:10:34.960 --> 00:10:37.840
but it seems like it's solving a unique problem.


00:10:37.840 --> 00:10:40.920
And it really is kind of a time of like a thousand flowers


00:10:40.920 --> 00:10:44.360
blooming in the packaging and dependency managing space.


00:10:44.360 --> 00:10:45.960
Like previously we talked about Hatch.


00:10:45.960 --> 00:10:47.920
I have more to say about Hatch later as well.


00:10:47.920 --> 00:10:50.880
- Do you remember, did you say that it,


00:10:50.880 --> 00:10:53.560
you can use a pyproject.toml instead of a-


00:10:53.560 --> 00:10:54.400
- Yes, you can.


00:10:54.400 --> 00:10:55.240
- Okay. - Yes.


00:10:55.240 --> 00:10:56.080
- It's a-


00:10:56.080 --> 00:11:00.320
- 'Cause there's already enough YAML in my life.


00:11:00.320 --> 00:11:01.560
- Yeah. (laughs)


00:11:01.560 --> 00:11:03.840
Yeah, you can use a pyproject.toml.


00:11:03.840 --> 00:11:04.680
- Cool.


00:11:04.680 --> 00:11:06.120
- Alternatively, one can configure the dependencies


00:11:06.120 --> 00:11:10.160
in the pyproject.toml under the tool.uni-depth section.


00:11:10.160 --> 00:11:11.000
- All right, nice.


00:11:11.000 --> 00:11:12.080
- There you go, yeah.


00:11:12.080 --> 00:11:13.400
All right.


00:11:13.400 --> 00:11:15.440
Well, over to you.


00:11:15.440 --> 00:11:18.040
- Well, I, like a lot of people,


00:11:18.040 --> 00:11:21.920
I've been doing some work over the holiday break


00:11:21.920 --> 00:11:24.960
since we also took a break from podcasting a bit.


00:11:24.960 --> 00:11:26.640
I've been doing some open source work


00:11:26.640 --> 00:11:29.640
and I ran into, this is timely,


00:11:29.640 --> 00:11:34.560
because I ran into some problems with pull requests


00:11:34.560 --> 00:11:37.800
and wanting changes in pull requests


00:11:37.800 --> 00:11:39.680
and having some of the problems


00:11:39.680 --> 00:11:42.720
with if somebody does a pull request


00:11:42.720 --> 00:11:46.920
and their fork is on main instead of on a branch.


00:11:46.920 --> 00:11:49.960
And so, and it causes problems.


00:11:49.960 --> 00:11:52.880
And so instead of having to write this up


00:11:52.880 --> 00:11:55.080
as to why you should not do this,


00:11:55.080 --> 00:11:58.080
Henik beat me to the punch and wrote this great article


00:11:58.080 --> 00:12:01.800
saying, "Don't start pull requests from your main branch."


00:12:01.800 --> 00:12:04.480
And it's tempting, right?


00:12:04.480 --> 00:12:08.160
When I first started using Git at work, even at work,


00:12:08.160 --> 00:12:12.680
so personally, when I started using Git,


00:12:12.680 --> 00:12:16.120
I just used main and just checked, I just had one branch


00:12:16.120 --> 00:12:19.120
and that's no big deal with my own stuff.


00:12:19.120 --> 00:12:21.840
With a team, we had to decide,


00:12:21.840 --> 00:12:25.000
were we gonna use branches or forks?


00:12:25.000 --> 00:12:28.280
And possibly not both, but you can use both.


00:12:28.280 --> 00:12:30.600
And in open source, it's common to use both.


00:12:30.600 --> 00:12:33.960
And what we mean is you fork the repository


00:12:33.960 --> 00:12:35.560
and you create a branch.


00:12:35.560 --> 00:12:37.720
Why do you do both?


00:12:37.720 --> 00:12:39.680
Because it seems like if you're gonna make a change,


00:12:39.680 --> 00:12:41.240
you just need one or the other, right?


00:12:41.240 --> 00:12:42.200
And you can't do a branch


00:12:42.200 --> 00:12:43.320
because you don't have permission.


00:12:43.320 --> 00:12:46.400
So you do a fork, but you do both a fork


00:12:46.400 --> 00:12:47.840
and a branch for reasons.


00:12:47.840 --> 00:12:50.520
And the reasons are spelled out here.


00:12:50.520 --> 00:12:53.480
First, if you didn't do that,


00:12:53.480 --> 00:12:56.120
he's giving the reasons in the sense of


00:12:56.120 --> 00:12:58.360
if you did main instead.


00:12:58.360 --> 00:13:00.920
Why that's bad is first,


00:13:00.920 --> 00:13:03.040
you can only do one pull request at a time.


00:13:03.040 --> 00:13:04.440
If you were gonna do your pull request


00:13:04.440 --> 00:13:08.200
off of your main branch and it's not been accepted yet,


00:13:08.200 --> 00:13:11.720
well, you can't go and do another pull request


00:13:11.720 --> 00:13:12.680
for a different change.


00:13:12.680 --> 00:13:14.160
You can't do another fix


00:13:14.160 --> 00:13:16.960
because you've already used up your main.


00:13:16.960 --> 00:13:18.840
Whereas if you do a branch off of that,


00:13:18.840 --> 00:13:20.400
you can have as many fixes as you want.


00:13:20.400 --> 00:13:22.000
So that's reason number one.


00:13:22.000 --> 00:13:23.200
But people might think,


00:13:23.200 --> 00:13:25.000
ah, I don't care about multiple stuff.


00:13:25.000 --> 00:13:26.840
I'm just fixing the one thing I care about.


00:13:26.840 --> 00:13:27.680
Great.


00:13:27.680 --> 00:13:32.360
So somebody on the other end is gonna have to pull,


00:13:32.360 --> 00:13:35.520
like review it, maybe ask you for changes


00:13:35.520 --> 00:13:38.720
to maybe merge it even.


00:13:38.720 --> 00:13:39.640
That's great.


00:13:39.640 --> 00:13:42.920
If they end up merging your pull request, that's awesome.


00:13:42.920 --> 00:13:46.480
But what happens then is that branch will have changes


00:13:46.480 --> 00:13:50.080
of both the main line and your branch


00:13:50.080 --> 00:13:52.960
all in this branch, your main branch.


00:13:52.960 --> 00:13:56.520
Now that has conflicts and you're not able to pull it back


00:13:56.520 --> 00:13:58.320
to your local repository.


00:13:58.320 --> 00:13:59.400
So pulls won't work.


00:13:59.400 --> 00:14:02.560
And you just, I don't know what you do at that point.


00:14:02.560 --> 00:14:04.360
You blow away your fork and start over.


00:14:04.360 --> 00:14:08.040
- You delete your repository and you start over.


00:14:08.040 --> 00:14:09.640
- Yeah, lame.


00:14:09.640 --> 00:14:15.160
Okay, the third reason is the pragmatic one


00:14:15.160 --> 00:14:16.640
of getting something done.


00:14:16.640 --> 00:14:20.400
And this is the one that bit me a couple of weeks ago


00:14:20.400 --> 00:14:23.720
is there's two reasons you're,


00:14:23.720 --> 00:14:26.560
I may be like messing this up,


00:14:26.560 --> 00:14:29.800
but you can, if you have it on main,


00:14:29.800 --> 00:14:32.640
it's and you have branch protection on,


00:14:32.640 --> 00:14:33.880
which a lot of repos do,


00:14:33.880 --> 00:14:36.560
most of most, a lot of big open source projects,


00:14:36.560 --> 00:14:38.080
the main is are locked down.


00:14:38.080 --> 00:14:42.440
Then, and you don't want, you want to allow,


00:14:42.440 --> 00:14:45.480
it's allow edits from maintainers


00:14:45.480 --> 00:14:47.200
is meaningless at that point,


00:14:47.200 --> 00:14:49.800
because what I want to do is if there's,


00:14:49.800 --> 00:14:51.880
if somebody does a pull request and I want to accept it,


00:14:51.880 --> 00:14:55.240
but there's a minor change to it that I want to tweak it,


00:14:55.240 --> 00:14:57.880
like maybe the, I don't know, the naming conventions wrong.


00:14:57.880 --> 00:14:58.880
And it's not a big deal.


00:14:58.880 --> 00:15:02.120
I can just change it before I merge the pull request.


00:15:02.120 --> 00:15:04.720
You can't, if that's locked down,


00:15:04.720 --> 00:15:09.160
the original, the person pulling it into their repository


00:15:09.160 --> 00:15:10.760
can't do that edit.


00:15:10.760 --> 00:15:14.200
And it's just not nice and it's not fun.


00:15:14.200 --> 00:15:17.560
So just remember to do fork and branch,


00:15:17.560 --> 00:15:19.160
don't do just fork.


00:15:19.160 --> 00:15:23.360
So that's the public service announcement for today.


00:15:23.360 --> 00:15:26.400
- Yeah, I mean, fork is required because a lot of times


00:15:26.400 --> 00:15:28.800
you don't have right access to the main repo,


00:15:28.800 --> 00:15:31.960
contributor access, but doing it from your main,


00:15:31.960 --> 00:15:33.680
doing it from like some other,


00:15:33.680 --> 00:15:35.800
the main branch instead of some other one is,


00:15:35.800 --> 00:15:38.160
yeah, you only learn that that's a bad idea when you do it.


00:15:38.160 --> 00:15:40.600
And then you're like, oh no, now what?


00:15:40.600 --> 00:15:42.040
I've done that once or twice.


00:15:42.040 --> 00:15:44.360
I'm like, I'm gonna make a change and do a pull request


00:15:44.360 --> 00:15:45.200
and submit it.


00:15:45.200 --> 00:15:46.320
And what if they don't accept it?


00:15:46.320 --> 00:15:48.320
Then your main is out of sync forever.


00:15:48.320 --> 00:15:50.520
You can never sync your fork up again.


00:15:50.520 --> 00:15:52.320
And like, there's this all sorts of problems.


00:15:52.320 --> 00:15:54.800
- And even if there's no ugliness there,


00:15:54.800 --> 00:15:58.160
let's say there's, and this has happened to me many times,


00:15:58.160 --> 00:16:01.640
you, and somebody wants to merge your stuff in,


00:16:01.640 --> 00:16:03.440
but they're merging other things too.


00:16:03.440 --> 00:16:05.640
And maybe they grabbed a few other things first.


00:16:05.640 --> 00:16:09.040
Now they really would like to have the merge from yours


00:16:09.040 --> 00:16:12.000
be really clean and just see the changes.


00:16:12.000 --> 00:16:15.680
So the great thing to do is to merge the new main


00:16:15.680 --> 00:16:18.400
to your new main and then resolve it


00:16:18.400 --> 00:16:21.160
with your forked branch, your branch first,


00:16:21.160 --> 00:16:22.800
before going all the way back.


00:16:22.800 --> 00:16:25.480
And if you don't have that, this doesn't work.


00:16:25.480 --> 00:16:27.040
- Yeah, that's a good point too.


00:16:27.040 --> 00:16:28.160
Indeed, indeed.


00:16:28.160 --> 00:16:31.080
All right, let's get back to deployment.


00:16:31.080 --> 00:16:31.920
- Okay.


00:16:31.920 --> 00:16:32.760
- This one's different, okay?


00:16:32.760 --> 00:16:34.680
Installed, this is kind of like a,


00:16:36.720 --> 00:16:38.760
like a little bit of a web 2.0 name,


00:16:38.760 --> 00:16:42.440
installed, but zero vowels, installed.


00:16:42.440 --> 00:16:43.280
- Oh.


00:16:43.280 --> 00:16:46.320
- In S, I-N-S-T-L-D.


00:16:46.320 --> 00:16:48.520
So this is an interesting project.


00:16:48.520 --> 00:16:51.360
When I first saw it, I was like,


00:16:51.360 --> 00:16:52.360
this seems like a bad idea.


00:16:52.360 --> 00:16:54.120
I don't know, this seems like just a bad idea.


00:16:54.120 --> 00:16:55.720
Let's not do this.


00:16:55.720 --> 00:16:57.760
And then people kept recommending it and saying stuff.


00:16:57.760 --> 00:16:59.040
I'm like, you know what, actually,


00:16:59.040 --> 00:17:00.080
that's kind of cool, actually.


00:17:00.080 --> 00:17:01.760
So here's the deal.


00:17:01.760 --> 00:17:04.840
Previously, what we talked about is like the right way,


00:17:04.840 --> 00:17:07.720
right, you're gonna create your requirements,


00:17:07.720 --> 00:17:09.920
your dependencies, you're gonna have pin versions,


00:17:09.920 --> 00:17:11.160
you're gonna have lock files.


00:17:11.160 --> 00:17:13.560
Someone is gonna create a virtual environment


00:17:13.560 --> 00:17:15.480
or a Docker container or something like that.


00:17:15.480 --> 00:17:19.160
Then you're going to install all of those things, right?


00:17:19.160 --> 00:17:21.360
Great, what if you don't?


00:17:21.360 --> 00:17:24.920
What if you have, Brian, what if you have a single .py file


00:17:24.920 --> 00:17:26.480
you wanna give to somebody


00:17:26.480 --> 00:17:28.600
and you wanna just let them run it?


00:17:28.600 --> 00:17:31.960
But you know, it needs like one or two dependencies.


00:17:31.960 --> 00:17:35.520
Like maybe you really, really, really wanna use rich


00:17:35.520 --> 00:17:37.480
because Will's project is awesome


00:17:37.480 --> 00:17:40.400
and you just don't want it to look plain white,


00:17:40.400 --> 00:17:42.600
unformatted, you want it to look good, right?


00:17:42.600 --> 00:17:44.720
So you wanna be able to handle one of your coworkers


00:17:44.720 --> 00:17:47.000
or somebody else, one of these things and say, just run it.


00:17:47.000 --> 00:17:50.800
Well, just run it becomes all of a sudden a conversation


00:17:50.800 --> 00:17:52.800
about virtual environments and all these things, right?


00:17:52.800 --> 00:17:56.120
And like, ah, geez, just wanna format it just a little.


00:17:56.120 --> 00:17:57.520
Could we somehow?


00:17:57.520 --> 00:18:00.520
Well, installed is kind of aiming to solve that problem,


00:18:00.520 --> 00:18:04.480
right, so it's not like a high-end production sort of thing.


00:18:04.480 --> 00:18:07.200
It's a, let me be able to pass a file around


00:18:07.200 --> 00:18:10.400
without going through the whole process of, you know,


00:18:10.400 --> 00:18:12.840
like Py installer, because like, well, oh geez,


00:18:12.840 --> 00:18:13.880
I made it AXE for you.


00:18:13.880 --> 00:18:14.800
That's right, you're on Windows.


00:18:14.800 --> 00:18:16.000
Let me recompile it.


00:18:16.000 --> 00:18:17.160
Like, okay, great, no.


00:18:17.160 --> 00:18:19.160
So here's the deal.


00:18:19.160 --> 00:18:21.600
It lets you run Python code


00:18:21.600 --> 00:18:23.760
without installing the dependencies,


00:18:23.760 --> 00:18:25.440
without mentioning the dependencies,


00:18:25.440 --> 00:18:30.320
without having any awareness said dependencies so exist.


00:18:30.320 --> 00:18:32.760
With one huge caveat,


00:18:32.760 --> 00:18:36.480
and that's you must have installed installed, okay?


00:18:36.480 --> 00:18:38.680
Once this thing isn't there,


00:18:38.680 --> 00:18:40.560
it can then bootstrap everything else.


00:18:40.560 --> 00:18:42.880
So maybe like if this was a thing you were doing


00:18:42.880 --> 00:18:44.680
with your co-worker story, I said like, okay,


00:18:44.680 --> 00:18:49.680
well, everyone pip install --user installed


00:18:49.680 --> 00:18:52.520
or pip X installed or I don't know, something like that.


00:18:52.520 --> 00:18:53.360
But once that's there,


00:18:53.360 --> 00:18:56.880
then you can run and use arbitrary things from PyPI


00:18:56.880 --> 00:18:59.240
without having them installed or requirements file


00:18:59.240 --> 00:19:00.080
or going through a step.


00:19:00.080 --> 00:19:03.000
Just Python space, your thing, off it goes.


00:19:03.000 --> 00:19:06.160
Also, if you were in a really weird situation


00:19:06.160 --> 00:19:07.000
where you had to do it,


00:19:07.000 --> 00:19:10.360
you could use two versions of the same library package


00:19:10.360 --> 00:19:13.800
within a single execution of a program, okay?


00:19:13.800 --> 00:19:14.640
Interesting.


00:19:14.640 --> 00:19:15.480
Which you might do that


00:19:15.480 --> 00:19:17.920
because you have incompatible libraries.


00:19:17.920 --> 00:19:20.160
Like I've talked before about there are times


00:19:20.160 --> 00:19:24.080
where I literally cannot pip install dash R


00:19:24.080 --> 00:19:25.360
my requirements, right?


00:19:25.360 --> 00:19:28.400
It's just like, nope, this old janky version


00:19:28.400 --> 00:19:31.040
of some library depends, it's pinned less


00:19:31.040 --> 00:19:32.800
than something else, some other library.


00:19:32.800 --> 00:19:35.160
And then like another library is greater


00:19:35.160 --> 00:19:36.480
than that same library.


00:19:36.480 --> 00:19:38.120
Well, modern pip just says,


00:19:38.120 --> 00:19:40.720
guess we can't run your program, take a hike, right?


00:19:40.720 --> 00:19:43.760
So this would let you sort of say this part


00:19:43.760 --> 00:19:46.000
of the code uses the old janky thing.


00:19:46.000 --> 00:19:47.480
Let's use it and then get rid of it


00:19:47.480 --> 00:19:48.800
and then go back and use another.


00:19:48.800 --> 00:19:49.640
All right.


00:19:49.640 --> 00:19:52.120
And also doesn't leave behind junk on your hard drive.


00:19:52.120 --> 00:19:53.560
It basically deletes everything.


00:19:53.560 --> 00:19:54.840
So how does this thing work?


00:19:54.840 --> 00:19:58.280
So basically in your code, you can say,


00:19:58.280 --> 00:19:59.840
you have to import installed


00:19:59.840 --> 00:20:01.680
and then you use a context manager


00:20:01.680 --> 00:20:04.040
and say with installed some package


00:20:04.040 --> 00:20:07.120
and then you can, like within that context manager,


00:20:07.120 --> 00:20:08.120
you have access to that.


00:20:08.120 --> 00:20:09.200
Pretty wild, huh?


00:20:09.200 --> 00:20:10.040
Okay.


00:20:10.040 --> 00:20:13.440
So basically that context manager will make sure


00:20:13.440 --> 00:20:14.800
that it's installed on your system.


00:20:14.800 --> 00:20:16.480
It'll download it, all those things.


00:20:16.480 --> 00:20:18.720
And then like when, presumably when it closes,


00:20:18.720 --> 00:20:19.680
it'll delete it.


00:20:19.680 --> 00:20:21.960
You can also do it as a REPL.


00:20:21.960 --> 00:20:25.560
So you can interact with just like the Python REPL,


00:20:25.560 --> 00:20:27.240
you can interact with it that way.


00:20:27.240 --> 00:20:28.600
You can run a script.


00:20:28.600 --> 00:20:30.640
You can say installed some script


00:20:30.640 --> 00:20:32.920
and then it'll be executed


00:20:32.920 --> 00:20:35.560
as if you were running it like regular Python,


00:20:35.560 --> 00:20:38.880
but you can also pass in dependencies


00:20:38.880 --> 00:20:40.720
that it might need to run it.


00:20:40.720 --> 00:20:41.560
Right?


00:20:41.560 --> 00:20:42.400
Check this out.


00:20:42.400 --> 00:20:44.360
If your program has imports of any packages


00:20:44.360 --> 00:20:45.800
other than the built-in ones,


00:20:45.800 --> 00:20:47.520
they'll be installed automatically.


00:20:47.520 --> 00:20:48.400
- Oh.


00:20:48.400 --> 00:20:49.240
- Right?


00:20:49.240 --> 00:20:50.720
So you just say installed some Python file


00:20:50.720 --> 00:20:52.320
and it goes, oh, you're saying import this stuff.


00:20:52.320 --> 00:20:54.560
You import, you know, HTTPX.


00:20:54.560 --> 00:20:55.960
- Hopefully you got the names right.


00:20:55.960 --> 00:20:56.800
- Yeah, exactly.


00:20:56.800 --> 00:20:58.360
(laughs)


00:20:58.360 --> 00:21:02.360
So yeah, anyway, you can do a bunch of more advanced stuff


00:21:02.360 --> 00:21:03.560
you can talk about there.


00:21:03.560 --> 00:21:04.920
You can pin the versions.


00:21:04.920 --> 00:21:09.920
You can specify which package repository it comes from.


00:21:09.920 --> 00:21:12.480
If you have like a, the example here is a test one,


00:21:12.480 --> 00:21:16.040
but if you've got like a private whitelist server and so on.


00:21:16.040 --> 00:21:17.440
So there's a lot going on here.


00:21:17.440 --> 00:21:20.560
I don't know, how does this hit you seeing this?


00:21:20.560 --> 00:21:24.920
- You know, I was thinking I don't need it


00:21:24.920 --> 00:21:26.720
up until just a second ago


00:21:26.720 --> 00:21:29.680
where when you, with the,


00:21:29.680 --> 00:21:33.600
being able to do multiple versions in the same file,


00:21:33.600 --> 00:21:38.600
even to say like with, like as an example,


00:21:38.600 --> 00:21:42.760
normally I test against multiple versions of pytest


00:21:42.760 --> 00:21:45.320
for instance, or multiple versions of something


00:21:45.320 --> 00:21:47.240
like in my own stuff, I'm testing against


00:21:47.240 --> 00:21:52.240
maybe a few different versions of a particular package.


00:21:52.240 --> 00:21:55.040
And I do that usually outside in talks


00:21:55.040 --> 00:21:57.600
to be able to install a different environment,


00:21:57.600 --> 00:21:59.240
set up a different environment to,


00:21:59.240 --> 00:22:01.880
with those different things installed.


00:22:01.880 --> 00:22:05.080
But to be able to do it all in one run,


00:22:05.080 --> 00:22:06.680
that's pretty interesting actually.


00:22:06.680 --> 00:22:07.840
- It is interesting, yeah.


00:22:07.840 --> 00:22:09.360
- Yeah, so I might play with that.


00:22:09.360 --> 00:22:10.200
- It's pretty interesting.


00:22:10.200 --> 00:22:11.520
Apparently when it runs,


00:22:11.520 --> 00:22:14.280
it spits out basically the pip output.


00:22:14.280 --> 00:22:15.120
You know what I mean?


00:22:15.120 --> 00:22:18.160
It just comes, but in the context manager,


00:22:18.160 --> 00:22:20.320
you can say catch output equals true.


00:22:20.320 --> 00:22:22.520
And then it's kind of invisible to your users.


00:22:22.520 --> 00:22:24.280
It just takes a little startup time


00:22:24.280 --> 00:22:26.320
as it does the dependency stuff, you know?


00:22:26.320 --> 00:22:28.520
So yeah, pretty wild.


00:22:28.520 --> 00:22:30.800
So when I first saw this, I thought,


00:22:30.800 --> 00:22:32.320
this seems like it's encouraging people


00:22:32.320 --> 00:22:33.160
to do the wrong thing,


00:22:33.160 --> 00:22:35.440
but it's also some interesting flexibility.


00:22:35.440 --> 00:22:37.040
So there you have it, installed.


00:22:37.040 --> 00:22:39.600
- Sometimes people need to be encouraged


00:22:39.600 --> 00:22:40.720
to do the wrong thing.


00:22:40.720 --> 00:22:41.680
- That's right.


00:22:41.680 --> 00:22:43.240
How else do you learn to do the right thing?


00:22:43.240 --> 00:22:44.840
No, just kidding.


00:22:44.840 --> 00:22:47.800
All right, what do you got for our extras?


00:22:47.800 --> 00:22:49.960
- I got a couple extras.


00:22:49.960 --> 00:22:52.040
I am super excited.


00:22:52.040 --> 00:22:53.440
The other thing, one of the things I was doing


00:22:53.440 --> 00:22:55.360
is open source code this break,


00:22:55.360 --> 00:22:59.360
but I also was, (laughs)


00:22:59.360 --> 00:23:02.320
I was completing the complete pytest course.


00:23:02.320 --> 00:23:05.120
So I named it the complete pytest course


00:23:05.120 --> 00:23:06.120
before it was complete.


00:23:06.120 --> 00:23:08.840
Now it actually is complete, all 16 chapters.


00:23:08.840 --> 00:23:11.800
However, it's never really gonna be done


00:23:11.800 --> 00:23:14.000
because this isn't a printed book.


00:23:14.000 --> 00:23:16.760
It is a project.


00:23:16.760 --> 00:23:19.520
It's a course that's up on the web


00:23:19.520 --> 00:23:21.400
and I'm gonna update it if I need to.


00:23:21.400 --> 00:23:25.520
So I've got a good community going with it already


00:23:25.520 --> 00:23:29.360
and we're going to make sure that it's up to date


00:23:29.360 --> 00:23:30.920
with new versions of pytest.


00:23:30.920 --> 00:23:33.200
Like pytest 8 is coming out


00:23:33.200 --> 00:23:35.680
and I don't think that I'll have to change anything,


00:23:35.680 --> 00:23:37.160
but if I do have to change stuff,


00:23:37.160 --> 00:23:39.120
I'll change it here first.


00:23:39.120 --> 00:23:40.400
- Yeah, you can just do a find and replace


00:23:40.400 --> 00:23:43.200
for a seven to eight in your code and then you'll be fine.


00:23:43.200 --> 00:23:45.560
- I don't actually put seven in there anywhere.


00:23:45.560 --> 00:23:47.040
- I know, I know.


00:23:47.040 --> 00:23:49.480
- But there might be some new toys that we wanna play with


00:23:49.480 --> 00:23:50.320
and there already were.


00:23:50.320 --> 00:23:53.640
- So one of the fun things in getting this


00:23:53.640 --> 00:23:56.200
is going through and being able to say,


00:23:56.200 --> 00:23:58.120
oh, I do things a little differently now.


00:23:58.120 --> 00:24:01.680
Like one of the parts is building a pytest plugin


00:24:01.680 --> 00:24:03.560
and I package a little differently now


00:24:03.560 --> 00:24:05.040
than I did several years ago.


00:24:05.040 --> 00:24:09.040
So I got to use the new way and we're keeping that up to date.


00:24:09.040 --> 00:24:10.080
So that's the first thing.


00:24:10.080 --> 00:24:12.920
The other thing is this course took a lot of my time


00:24:12.920 --> 00:24:15.880
actually to get this to the point where it is now.


00:24:15.880 --> 00:24:18.840
And so some things went on the back burner


00:24:18.840 --> 00:24:20.640
and a couple of things were the other podcasts.


00:24:20.640 --> 00:24:24.040
So Python People and Python Test.


00:24:24.040 --> 00:24:26.600
Python People has new people, Will Vincent,


00:24:26.600 --> 00:24:28.960
and I've got a whole bunch more that I need to release,


00:24:28.960 --> 00:24:31.280
but Will Vincent was on in October


00:24:31.280 --> 00:24:32.960
and I finally got this released.


00:24:32.960 --> 00:24:35.240
And we talk about Django and writing technical books


00:24:35.240 --> 00:24:36.280
and Will's awesome.


00:24:36.280 --> 00:24:41.040
He also is the host of Django Chat podcast.


00:24:41.040 --> 00:24:42.680
And then I don't have any,


00:24:42.680 --> 00:24:46.000
the last Python Test episode was out December 15th,


00:24:46.000 --> 00:24:48.960
but I've got a whole 16 of them planned.


00:24:48.960 --> 00:24:50.760
They're not recorded yet, but 16 are planned.


00:24:50.760 --> 00:24:52.840
So these will come out in the next few months.


00:24:52.840 --> 00:24:53.960
So stay tuned.


00:24:53.960 --> 00:24:54.920
- Awesome, awesome.


00:24:54.920 --> 00:24:55.760
- How about you?


00:24:55.760 --> 00:24:58.360
- Well, I have a whole bunch of talk Python stuff coming.


00:24:58.360 --> 00:25:00.960
I think I have 12 scheduled or something.


00:25:00.960 --> 00:25:03.280
It's kind of out of control to be honest,


00:25:03.280 --> 00:25:05.920
but I've got some extras that are more relevant here.


00:25:05.920 --> 00:25:06.760
- Okay.


00:25:06.760 --> 00:25:07.960
- Not see the joke yet, that is the end.


00:25:07.960 --> 00:25:11.320
All right, so Ofec just sent us a follow-up


00:25:11.320 --> 00:25:12.400
and it's a little unfortunate


00:25:12.400 --> 00:25:15.680
that we talked about this big release of Hatch


00:25:15.680 --> 00:25:19.320
1.8 and then went on a two week break


00:25:19.320 --> 00:25:21.200
because like the next day he said,


00:25:21.200 --> 00:25:24.880
great coverage on Hatch 1.8, thanks.


00:25:24.880 --> 00:25:26.480
However, one small correction.


00:25:26.480 --> 00:25:28.960
Remember I was so impressed and psyched


00:25:28.960 --> 00:25:31.240
that the binaries of your apps,


00:25:31.240 --> 00:25:33.360
if you made apps with Hatch,


00:25:33.360 --> 00:25:35.920
which is a cool, cool feature of it, would be signed.


00:25:35.920 --> 00:25:36.880
I'm like, how are they doing this?


00:25:36.880 --> 00:25:38.400
How do they get away with doing this?


00:25:38.400 --> 00:25:40.080
Well, they're not.


00:25:40.080 --> 00:25:41.720
So the one small correction,


00:25:41.720 --> 00:25:44.440
only the binaries for Hatch themselves


00:25:44.440 --> 00:25:46.640
are signed by the certificate of the PSF,


00:25:46.640 --> 00:25:49.320
not the binaries created by Hatch for you.


00:25:49.320 --> 00:25:51.680
Those are your certificates problems.


00:25:51.680 --> 00:25:54.040
So we're back to signing our own apps again


00:25:54.040 --> 00:25:58.000
and dealing with Apple and Microsoft and all that stuff.


00:25:58.000 --> 00:25:59.720
But it makes more sense, right?


00:25:59.720 --> 00:26:03.360
Okay, next, this is just interesting.


00:26:03.360 --> 00:26:08.360
PyPI had new user registration temporarily suspended.


00:26:08.360 --> 00:26:12.760
The volume of malicious users and projects being created


00:26:12.760 --> 00:26:16.040
outpaced the ability to respond to it in timely fashion.


00:26:16.040 --> 00:26:18.080
So like, we just need to slow down.


00:26:18.080 --> 00:26:19.200
No action required.


00:26:19.200 --> 00:26:21.200
This is from last week, just interesting.


00:26:21.200 --> 00:26:22.840
And I guess, thank you everyone


00:26:22.840 --> 00:26:24.760
for being on top of this, honestly,


00:26:24.760 --> 00:26:26.040
'cause what a hassle.


00:26:26.040 --> 00:26:30.120
I also would, I don't know what they're doing right now,


00:26:30.120 --> 00:26:32.080
but at least I would recommend,


00:26:32.080 --> 00:26:33.120
I don't know if it would really help,


00:26:33.120 --> 00:26:36.520
but like Cloudflare, turnstile,


00:26:36.520 --> 00:26:38.720
at least stop the bots,


00:26:38.720 --> 00:26:41.800
which is a way, way, way, way, way better,


00:26:41.800 --> 00:26:45.240
way better thing than the Google reCAPTCHA thing.


00:26:45.240 --> 00:26:48.800
So maybe if some kind of gate like that would be awesome,


00:26:48.800 --> 00:26:49.640
then put that up.


00:26:49.640 --> 00:26:50.840
Anyway, that's news.


00:26:50.840 --> 00:26:54.760
Also coming up next February, February 12th,


00:26:54.760 --> 00:26:56.400
which is in 33 days,


00:26:56.400 --> 00:27:00.080
I'm doing a YouTube only thing on Talk Python


00:27:00.080 --> 00:27:03.440
that I think will be really fun with Martina Puglisi


00:27:03.440 --> 00:27:05.000
about data doodling.


00:27:05.000 --> 00:27:08.080
So she's got this whole cool series she's doing


00:27:08.080 --> 00:27:12.320
where she's doing data science by just sketching it out


00:27:12.320 --> 00:27:14.800
and just drawing pictures and trying to understand data


00:27:14.800 --> 00:27:17.920
before jumping into like notebooks and stuff.


00:27:17.920 --> 00:27:20.480
And so we're just gonna talk through some really fun doodles


00:27:20.480 --> 00:27:21.400
and it's all visuals,


00:27:21.400 --> 00:27:24.440
which is why it's YouTube only and not on Talk Python.


00:27:24.440 --> 00:27:25.280
- Nice.


00:27:25.280 --> 00:27:28.080
- Exactly, but so if you're interested,


00:27:28.080 --> 00:27:31.440
please come and click the get notified to register


00:27:31.440 --> 00:27:34.560
in quotes to be part of that live event.


00:27:34.560 --> 00:27:36.920
So hopefully people will, that'd be really cool.


00:27:36.920 --> 00:27:39.040
I think she's got some beautiful, beautiful work


00:27:39.040 --> 00:27:41.520
and you'll appreciate when we get there.


00:27:41.520 --> 00:27:45.480
And wrote an article called,


00:27:45.480 --> 00:27:46.800
maybe should have R in the front,


00:27:46.800 --> 00:27:48.760
R AI features a waste of time.


00:27:48.760 --> 00:27:51.840
So my premise is that I was just wondering like


00:27:51.840 --> 00:27:54.320
how many cumulative programmer hours


00:27:54.320 --> 00:27:58.200
have been utterly wasted on adding very mediocre AI features


00:27:58.200 --> 00:28:02.520
to every app imaginable that you rarely ever want to use.


00:28:02.520 --> 00:28:04.360
So I just lay out like a couple issues,


00:28:04.360 --> 00:28:06.840
like look at all these examples of apps


00:28:06.840 --> 00:28:10.280
that just like they're adding AI for the sake of adding AI,


00:28:10.280 --> 00:28:13.800
but it's not bashing on like chat to PT or something like,


00:28:13.800 --> 00:28:16.640
it was just like, oh, you can click this to like


00:28:16.640 --> 00:28:18.680
correct the date by AI.


00:28:18.680 --> 00:28:19.680
It's like, I just type the date.


00:28:19.680 --> 00:28:21.760
Why do I need this stupid thing?


00:28:21.760 --> 00:28:25.000
And another, this example I use with Spark email,


00:28:25.000 --> 00:28:27.280
which has this really cool,


00:28:27.280 --> 00:28:28.160
Brian see how beautiful that is?


00:28:28.160 --> 00:28:31.080
You can write beautiful emails in Spark, love it.


00:28:31.080 --> 00:28:33.160
But if you try to proofread it with AI,


00:28:33.160 --> 00:28:35.440
it deletes all the content,


00:28:35.440 --> 00:28:38.720
it deletes the images and it just like jams it back


00:28:38.720 --> 00:28:41.120
as plain text, like response from ChatGPT or something.


00:28:41.120 --> 00:28:42.640
You're like, dude, that's not what I wanted.


00:28:42.640 --> 00:28:45.240
I want to ask for you to proofread it.


00:28:45.240 --> 00:28:48.640
Like why, why there's this app is full of little tiny bugs


00:28:48.640 --> 00:28:51.680
and like they're adding this, like who would ever use that


00:28:51.680 --> 00:28:54.360
if this is the outcome of what you get, you know?


00:28:54.360 --> 00:28:58.640
Anyway, another example would be the Dropbox fiasco


00:28:58.640 --> 00:29:00.360
where they just silently turned on,


00:29:00.360 --> 00:29:02.840
hey, we're sending all your documents to open AI.


00:29:02.840 --> 00:29:03.720
Hope you don't mind.


00:29:03.720 --> 00:29:04.560
Do you have anything private?


00:29:04.560 --> 00:29:05.840
Probably not, it's fine, right?


00:29:05.840 --> 00:29:07.960
And you're like, wait, why did you add, nobody wants this.


00:29:07.960 --> 00:29:08.800
Why do you turn this on


00:29:08.800 --> 00:29:11.040
and why are you sending my data out of Dropbox?


00:29:11.040 --> 00:29:12.240
This is not right.


00:29:12.240 --> 00:29:15.440
So anyway, hopefully people will enjoy this article.


00:29:15.440 --> 00:29:17.240
I have another fun one, let's just say,


00:29:17.240 --> 00:29:18.400
another fun one coming.


00:29:18.400 --> 00:29:20.040
- I forgot to turn that off.


00:29:20.040 --> 00:29:23.160
- Oh, well, you can ask ChatGPT about that.


00:29:23.160 --> 00:29:24.000
- Can I now?


00:29:24.000 --> 00:29:26.240
(laughing)


00:29:26.240 --> 00:29:30.200
- Yeah, no, honestly, it doesn't actually send it


00:29:30.200 --> 00:29:33.200
unless you interact with one of the, like a text box.


00:29:33.200 --> 00:29:34.440
It says, do you want to ask this thing?


00:29:34.440 --> 00:29:36.800
And the AI about your doc, but if you ask it,


00:29:36.800 --> 00:29:38.080
then it's on, right?


00:29:38.080 --> 00:29:41.400
So it's not clear by like entering that text box,


00:29:41.400 --> 00:29:43.680
that input, you're now sharing your data


00:29:43.680 --> 00:29:44.640
with some other company, right?


00:29:44.640 --> 00:29:47.800
Like, can we just have like more reliable integration


00:29:47.800 --> 00:29:51.320
with Finder and Explorer and better sync?


00:29:51.320 --> 00:29:52.760
Like, I don't need this AI stuff.


00:29:52.760 --> 00:29:54.920
- I had, actually on the topic though,


00:29:54.920 --> 00:29:58.120
I had like a really cool AI experience.


00:29:58.120 --> 00:30:01.640
I went to the dentist and they took x-rays


00:30:01.640 --> 00:30:05.160
and she showed me the x-ray picture.


00:30:05.160 --> 00:30:07.640
And then she showed me the picture right next to it


00:30:07.640 --> 00:30:11.200
where an AI highlighted areas that might be problems


00:30:11.200 --> 00:30:13.720
that the dentist should check out and take a look at.


00:30:13.720 --> 00:30:14.560
- That's awesome.


00:30:14.560 --> 00:30:17.880
- And things like that, like helping a professional


00:30:17.880 --> 00:30:20.560
make sure they don't miss things, great use of AI.


00:30:20.560 --> 00:30:22.640
- Yeah, proofreading, less.


00:30:22.640 --> 00:30:23.480
(laughing)


00:30:23.480 --> 00:30:26.600
No, that's an awesome, awesome use of it, yeah.


00:30:26.600 --> 00:30:28.560
Okay, ready for the joke?


00:30:28.560 --> 00:30:30.600
- I'm almost.


00:30:30.600 --> 00:30:33.120
I wanna show one more thing I forgot to mention


00:30:33.120 --> 00:30:36.480
for a lot of people, New Year's resolution's time


00:30:36.480 --> 00:30:37.680
for a lot of people.


00:30:37.680 --> 00:30:41.960
And if your New Year's resolution is get better at testing,


00:30:41.960 --> 00:30:44.560
the celebrate the pytest or the complete pytest course


00:30:44.560 --> 00:30:48.480
you're getting done, the coupon code to 2024


00:30:48.480 --> 00:30:51.200
is open through January for 10% off.


00:30:51.200 --> 00:30:53.160
So just wanted to mention that.


00:30:53.160 --> 00:30:54.320
Now I'm ready for a joke.


00:30:54.320 --> 00:30:57.320
- All right, this one has to do with managers


00:30:57.320 --> 00:30:59.960
and sprints and super agile stuff.


00:30:59.960 --> 00:31:04.120
- Okay, this is from workchronicles.com.


00:31:04.120 --> 00:31:06.240
Put it in the backlog with dashes.


00:31:06.240 --> 00:31:08.800
So there's a programmer, clearly,


00:31:08.800 --> 00:31:12.240
actually it's a project manager, but whatever,


00:31:12.240 --> 00:31:13.880
like somebody on the tech team.


00:31:13.880 --> 00:31:15.600
And here comes a person, very cheery.


00:31:15.600 --> 00:31:17.880
Hey, I have a new feature idea.


00:31:17.880 --> 00:31:19.920
And the person a little bit bugged,


00:31:19.920 --> 00:31:21.600
getting interrupted from work, says, awesome,


00:31:21.600 --> 00:31:22.720
just put it in the backlog.


00:31:22.720 --> 00:31:25.040
Person says, where's the backlog?


00:31:25.040 --> 00:31:26.280
Holds up the trash can.


00:31:26.280 --> 00:31:27.560
(laughing)


00:31:27.560 --> 00:31:28.800
- Oh dear.


00:31:28.800 --> 00:31:29.720
- Put it in the backlog.


00:31:29.720 --> 00:31:31.040
- Just go to the back.


00:31:31.040 --> 00:31:31.880
We're busy.


00:31:31.880 --> 00:31:33.120
- Yeah.


00:31:33.120 --> 00:31:33.960
- Anyway.


00:31:33.960 --> 00:31:37.120
- We actually, we've got a real backlog,


00:31:37.120 --> 00:31:40.480
but the things that are marked low priority,


00:31:40.480 --> 00:31:41.320
it's never gonna happen.


00:31:41.320 --> 00:31:43.200
- Just run a filter that just hides


00:31:43.200 --> 00:31:44.560
all the priority things.


00:31:44.560 --> 00:31:46.520
(laughing)


00:31:46.520 --> 00:31:48.040
Yeah, we're done, backlog's all cut up.


00:31:48.040 --> 00:31:49.720
No, I know there's that feature I put in there.


00:31:49.720 --> 00:31:51.440
Oh yeah, it must be a little priority, got it.


00:31:51.440 --> 00:31:53.680
- Oh, it's prioritized, we'll get to it.


00:31:53.680 --> 00:31:54.880
- Beautiful.


00:31:54.880 --> 00:31:57.280
All right, well, fantastic to be back with you


00:31:57.280 --> 00:31:58.280
and everyone else, Brian.


00:31:58.280 --> 00:31:59.120
- Good to be back.


00:31:59.120 --> 00:32:00.120
Bye all.

