00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05 This is episode 96, recorded September 19th, 2018. I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 Hey, Brian. How are you doing?

00:00:11 I'm doing really good. How are you?

00:00:13 I'm doing great. There's always something to talk about in the Python space. It never gets boring.

00:00:17 Yeah, no.

00:00:18 Definitely doesn't. And we're here bringing this to you today in part because of DigitalOcean sponsoring this episode.

00:00:24 So check them out at pythonbytes.fm/DigitalOcean and get $100 credit for some server goodies.

00:00:30 Tell you more about that later.

00:00:31 Brian, you found an interesting one. I don't even know what to make of it here. Tell us about it.

00:00:35 I can't even remember where I came across this. I guess it doesn't matter.

00:00:39 There's a Python library called Plumbum, and that's spelled P-L-U-M-B-U-M.

00:00:46 I have no idea where they came up with that name.

00:00:49 But it's a toolbox of goodies to do shell-like things in Python.

00:00:53 It says shell combinators and more. I'm not sure what a combinator is.

00:00:57 Oh, there was that Y combinator on Back to the Future.

00:01:01 Other than that, I don't know what a combinator is.

00:01:03 Is it like the pipes between things?

00:01:05 Maybe.

00:01:06 Perhaps.

00:01:06 Anyway, the motto of the library, and this is a direct quote, is never write shell scripts again.

00:01:13 And thus, it attempts to mimic the shell syntax.

00:01:17 Oh, shell combinators is shell syntax, where it makes sense while keeping all the Pythonic and cross-platform goodiness of Python.

00:01:25 And it's kind of fun.

00:01:27 And it's one of those things, it's kind of cheating, actually, I think.

00:01:31 But it's cool.

00:01:31 We have an example in the show notes, but there's a bunch of examples on their website, on the readme and stuff.

00:01:37 You can do things like chaining commands with pipes.

00:01:41 And there's a built-in grep and word count and head counts within this library.

00:01:46 So if you've got a bash shell script and somebody says, hey, you should convert that to Python, this would take you like five minutes to convert it to Python using this.

00:01:56 And that's not necessarily a bad thing.

00:01:58 If you know kind of how to transform something here, you can convert it right away.

00:02:03 And then maybe if you want to go figure out how to do that with other ways, you could.

00:02:08 But for a lot of quick and dirty things, why not do something like this?

00:02:11 It looks really cool.

00:02:12 Like, certainly writing bash stuff, the more tests you have to do and the, like, looping over things.

00:02:18 It's just like, how do you do that in bash again?

00:02:20 You know, it's just, it's not so nice.

00:02:23 But there's certainly things you can do in the shell that are, like, painful in Python.

00:02:26 Like, show me the files here.

00:02:27 It's like, okay, well, fine.

00:02:28 We're going to import OS.

00:02:30 And we're going to, like, do a lister and loop over that.

00:02:32 Right?

00:02:32 Like, LS.

00:02:33 Right?

00:02:33 That's super easy.

00:02:34 And this kind of brings those things together.

00:02:36 It's really nice.

00:02:36 Yeah.

00:02:37 So I've got a couple things I'm going to throw this out right away is we're converting from on, in Jenkins, you can do shell commands within, like, the little command steps of Jenkins.

00:02:47 But if you're doing pipelines on Windows, you can't do bash for some reason.

00:02:51 Or I can't figure out a way to do bash.

00:02:53 But I can do Python.

00:02:55 So I could write a little Python script to do the thing that I wanted to do in bash and do it right there.

00:03:01 So I'll try that.

00:03:02 Yeah, nice.

00:03:02 So this is a really cool project.

00:03:04 And certainly if you're thinking about some kind of bash script or something like that, this is a really nice option.

00:03:10 Maybe I should just try to use the Linux subsystem on Windows 10 instead of...

00:03:14 Yeah.

00:03:14 So if you have a problem with getting bash to work, it doesn't work on Windows, right?

00:03:19 But you can definitely bring in the Windows 10 Linux subsystem.

00:03:23 And obviously that's Windows 10.

00:03:26 I'm sure that it's available on the Windows server equivalent of Windows 10, which I honestly don't even know what version that is.

00:03:34 But there's probably a server equivalent that has the Linux subsystem as well.

00:03:38 People can throw that in the show comments if they want.

00:03:40 But there's an article by Marcus Sherman called the Windows 10 Linux subsystem for Python developers.

00:03:47 First of all, have you heard of this Windows 10 Linux subsystem?

00:03:50 Do you know what this is?

00:03:51 Yeah, I've been trying to keep an eye on it.

00:03:53 And as they make fixes to it and add features, I've been trying some of these things out.

00:03:59 Yeah, it's interesting.

00:03:59 So it's basically Linux embedded inside of Windows.

00:04:02 I mean, you've always been able to run in Windows like a VMware virtual machine or something and run, say, Ubuntu.

00:04:08 But that's not what this is.

00:04:09 It's not like a separate, entirely separate running VM.

00:04:12 But it's like a little tiny micro VM type thing that is the command line shell for Ubuntu.

00:04:19 So you can basically have Ubuntu commands in an Ubuntu terminal in your Windows.

00:04:24 The idea is somebody says, hey, here is some library you want to use.

00:04:29 And the way you get it is you compile it from source and run it.

00:04:32 Or, you know, you need to have this other weird utility or type these commands, right?

00:04:37 Like, how often have you seen a tutorial that says, okay, Brian, the next step is to type Python 3-mvnv.env.

00:04:45 And then you say source.env bin activate.

00:04:48 That's awesome, right?

00:04:49 It works fine on your Mac.

00:04:50 It works fine on my Mac.

00:04:52 It works fine on my Linux server.

00:04:53 Does it work fine on Windows?

00:04:54 No, you have to use the scripts directory.

00:04:57 Scripts directory.

00:04:58 There is no Python 3.

00:04:59 There is no source.

00:05:00 Like, what is all this stuff, right?

00:05:02 It's like, why is it different?

00:05:04 And so the motivation that Marcus had for writing this is like, hey, if you're going to learn Python and you're on Windows, you might consider using the Ubuntu subsystem.

00:05:12 Because then all those commands that everybody tells you to do, they just work.

00:05:16 Oh, that's a good idea.

00:05:17 You could use, say, Anaconda, and you get all the tools.

00:05:21 But you still can't type Python 3.

00:05:23 You still can't type source.

00:05:25 Like, all these things don't work unless you run Ubuntu for Windows.

00:05:28 So it's a really nice step-by-step way to go through it specifically for setting up for Python development on Windows.

00:05:34 Okay, cool.

00:05:35 Neat.

00:05:36 Yeah, pretty sweet, right?

00:05:37 So you might say it's a little cheat sheet for getting Ubuntu work in there, right?

00:05:41 Yeah.

00:05:42 Hey, we're doing really good on the whole transition thing.

00:05:45 That's working.

00:05:46 Yeah.

00:05:47 We've got a cheat sheet on my next item.

00:05:49 I've been trying to do type hints a little bit more, especially, so we've got a lot of the people at work and myself are using PyCharm.

00:05:58 And the little pop-up dial, I don't know what that's called.

00:06:02 Autocomplete, drop-down, and type dot.

00:06:03 Yeah, all that stuff works really great.

00:06:06 And it also works better if you have type hints in your API.

00:06:11 It's just two things.

00:06:12 So I've been trying to do, at least for the external functions, I've been trying to do type hints in there.

00:06:17 But I forget some things.

00:06:19 So I ran across this type hints cheat sheet, and it's actually on the mypy documentation site.

00:06:26 But the things that, I mean, I remember some of the easy things, like how do you represent string and int and stuff like that.

00:06:32 Colon int.

00:06:32 What's the problem?

00:06:33 But what about duct type stuff?

00:06:35 Like if I have a thing that acts like an array, but it might be a tuple or it might be a list or it might be something else that just,

00:06:43 I just know that I need to be able to use the bracket index operator and find the length.

00:06:48 Well, that's a sequence for type hints.

00:06:51 But I don't always remember that if that's an iterator, iterable or sequence or things like that.

00:06:56 So those duct type things are what I'm using it for the most.

00:07:00 But I have other people that I work with that are just sort of learning this type hint thing.

00:07:04 So all of it's useful.

00:07:06 Yeah, and it's not that long.

00:07:07 You know, a scroll bar estimation is probably seven or eight pages.

00:07:10 Flip through that once and you pretty much have mastered the type hints.

00:07:13 There's a couple interesting things in here that I thought was nice.

00:07:16 Talking about adding type hints for asynchronous functions.

00:07:20 So async def.

00:07:21 The one that I had never seen was class level variables.

00:07:25 So class var looks pretty interesting.

00:07:28 Like it's not on the instance, but it's on the type.

00:07:31 Oh, interesting.

00:07:33 You can use class var annotation to declare a class variable.

00:07:36 I've never done that.

00:07:37 I'm just, you know, that's pretty interesting.

00:07:39 And then also specifying the type for, say, a generator or something that yields some kind of iterator.

00:07:46 It's pretty interesting.

00:07:47 There's also a generator, actual generator type decoration that takes three arguments that's not covered in here.

00:07:52 So that's also potentially worth noting.

00:07:54 But yeah, very cool stuff.

00:07:56 And I think this is a nice find.

00:07:58 Cool.

00:07:58 Nice.

00:07:58 Now, before we get on to the next thing, I want to tell you quickly about DigitalOcean.

00:08:02 Like I said, they're sponsoring the show.

00:08:04 And they have lots of good reasons to go check them out.

00:08:07 Something that they just announced that's coming soon and is available for early access is Kubernetes.

00:08:12 So if you have some kind of site that you would like to run on a Kubernetes cluster, you can now go first visit pythonbytes.fm/DigitalOcean.

00:08:21 Create an account so you get the free $100 credit.

00:08:24 And then go to DigitalOcean.com slash products slash Kubernetes.

00:08:27 And you can sign up for early access to check that out.

00:08:31 So then you can submit containers to run on the Kubernetes cluster and have simple zero downtime deployments.

00:08:38 That's actually very, very cool.

00:08:40 Yeah.

00:08:40 I'm pretty excited about that coming along.

00:08:42 That's going to be fun.

00:08:44 So every now and then we cover these sort of higher level topics.

00:08:48 A little softer.

00:08:49 Here's one that tries to look a little bit farther in the future.

00:08:52 And I'm just going to put these out there and then I'll let you give me your, you react to this article.

00:08:58 Okay.

00:08:58 So the overall theme here is that Python is driving the creation and foundation of new languages.

00:09:04 Okay.

00:09:04 So this was an article and it says, here are five predictions for what programming will look like in 10 years.

00:09:10 Programming will be, okay.

00:09:11 So number one, programming will be more abstract.

00:09:14 When I first read that, I'm like, oh, please don't tell me it's drag and drop.

00:09:17 UML again or something like this, right?

00:09:20 But no, they say that trends like serverless technology containers, we just talked about Kubernetes,

00:09:25 and low code platforms suggest that developers may be able to work at higher level of abstractions in the future,

00:09:30 not thinking about servers, for example.

00:09:32 And that sounds reasonable.

00:09:34 Yeah, to some extent.

00:09:35 Yeah.

00:09:36 Yeah.

00:09:36 Potentially.

00:09:36 AI will become a part of every developer's toolkit, but it won't replace them.

00:09:40 What do you think?

00:09:41 I don't buy that actually, but okay.

00:09:44 You have some comment I could say to some of the voice assistants, but I'm pretty sure I'll set off like thousands of them, so I won't do it.

00:09:49 All right.

00:09:51 A universal programming language will arise.

00:09:54 Well, Python.

00:09:55 It's already arisen.

00:09:56 So, yeah.

00:09:57 So, the reason this whole article was pretty interesting is it has a pretty strong Python influence.

00:10:03 So, for example, at the beginning it says, look, just in the last few years,

00:10:06 some languages have risen and some have fallen.

00:10:09 And like the have risen links to an interesting article about Python, the have fallen links to an interesting one about Ruby, for example.

00:10:15 And then under this section, there's a nice quote that says, Python may be remembered as being the great, great, great grandmother of languages,

00:10:22 of the languages of the future, which underneath the hood may look like English,

00:10:26 but are actually far easier to use.

00:10:28 Okay.

00:10:28 Yeah.

00:10:29 Okay.

00:10:30 You ready for my reaction yet, or you got more?

00:10:31 I'm ready.

00:10:32 You can bring it.

00:10:32 I think some of the things are, one of the jokes about Python sometimes is that it's runnable pseudocode.

00:10:39 I don't like it.

00:10:40 I don't actually want it to get closer to English because English has so many subtleties and weird things that you can do that have implied meaning

00:10:50 that the closer we get to the actual English language, actually the harder it is to actually debug something.

00:10:56 So having it not be that close, I think is better because it's less up for interpretation.

00:11:04 Right.

00:11:05 Please read that sentence.

00:11:06 The people over there have already read the red sign, you know, things like that.

00:11:09 Yeah.

00:11:10 I'm not so sure that a universal language will arise either.

00:11:15 There's always something you may want to take most advantage of, and by doing so, you make it less good for other things.

00:11:22 For example, look at like, say, the data science tool set.

00:11:26 It's better working with sets of data than individual things.

00:11:31 I don't know.

00:11:31 There's just like, it focuses on one thing, and so then other things become less easy with it.

00:11:36 All right.

00:11:37 So, I don't know.

00:11:38 One of the changes, which is nice, is that the languages are not being developed in the vacuum that they used to be.

00:11:44 They're learning from each other.

00:11:46 Yeah, that's for sure.

00:11:47 And we're getting the mega cool feature in one language that we would like to have in another.

00:11:52 We're already seeing that.

00:11:53 Python's taking some features from other languages and pulling it in.

00:11:57 Other features are taking cool languages.

00:12:00 Now, I've heard from a lot of people that hardly any other languages have good testing tools like pytest.

00:12:07 Specifically, they don't have pytest for other languages.

00:12:10 And that would be cool if we could have some better testing tools in other languages.

00:12:14 Yeah.

00:12:15 I mean, there's certainly examples of that.

00:12:16 Like Swift, Apple's Swift is very much Python inspired.

00:12:20 You see like the optional, the null coalescing operator being moved towards Python and 3A potentially.

00:12:26 Things like that.

00:12:27 So, I agree.

00:12:28 I definitely see it as a blending.

00:12:30 I don't know if there'll be a single one.

00:12:31 So, all right.

00:12:32 The final two.

00:12:32 Every developer will need to work with data.

00:12:34 I think that they're doing that now, right?

00:12:36 Yeah, I think that's already.

00:12:38 We always have.

00:12:39 Yeah.

00:12:40 And then programming will become a core tenant of the education system, like reading and writing.

00:12:45 I believe that.

00:12:45 I do too.

00:12:46 It isn't necessarily like reading and writing.

00:12:48 I think it's more like learning biology and basic chemistry.

00:12:53 It's not that you actually need it every day, but it's good that most people kind of understand how it sort of works.

00:12:58 Yeah, I'm totally with you.

00:13:00 And the thing I think it will eject from the education system is geometry.

00:13:04 I feel like the reason that geometry is taught in middle school and high school is so that critical thinking and proof type of logical thought can be taught.

00:13:13 Like you don't really need to prove this thing about isosceles triangles.

00:13:17 Like that doesn't help you in life.

00:13:18 But the thought process does.

00:13:21 And I feel like programming, you have the same type of thought processes, but you get a skill, not just a grade.

00:13:26 Anyway, that's my prediction.

00:13:28 That's interesting.

00:13:29 Yeah.

00:13:29 Yeah.

00:13:30 We'll see about that.

00:13:30 All right.

00:13:32 So another one on async.io, something I've been digging into a ton lately.

00:13:35 Yeah.

00:13:36 I wasn't even aware that this was a thing going on.

00:13:40 But apparently the standard library async.io documentation was completely rewritten from scratch recently.

00:13:47 That's awesome.

00:13:48 That's big news.

00:13:48 Yeah.

00:13:49 It even says it in the in the tweet announcement.

00:13:51 This is big news with like two flames on the side.

00:13:54 So I haven't actually read through this a whole bunch, but it does look like there's quite a bit of documentation there.

00:14:00 So that's neat.

00:14:01 That's really cool.

00:14:01 And it says they're not done.

00:14:02 So there's a comment that there's this is just the beginning that there's they're going to add some tutorials for high level concepts and APIs.

00:14:10 And then they're also going to keep going because apparently there's some new things planned for 3.8.

00:14:16 Yeah, that's awesome.

00:14:17 Yeah.

00:14:18 You highlight some of the things coming for async.io itself, like the library and the capabilities async and await are getting better, right?

00:14:24 Yeah.

00:14:24 And I think this sort of talks to the importance of async in the future.

00:14:28 If not only are people still working on making improving the async story within Python, but they're also trying to improve the documentation to make sure that it's usable, which I'm glad to see that sort of documentation going side by side with new concepts.

00:14:44 That's a good thing.

00:14:46 Yeah.

00:14:46 But that kind of highlights the importance of async going forward.

00:14:49 Yeah, I think async is just becoming increasingly important.

00:14:52 And I'm really glad to see it really gaining some momentum because if you look at apps written with and without async in a library that can take advantage of it, it's like night and day.

00:15:02 It's ridiculous.

00:15:03 And I think that, like you said, again, it's a different concept sort of thing.

00:15:07 You can think in higher level concepts and break problems up into the more logical breaking points.

00:15:12 Right.

00:15:13 You don't have to think about threads and processes and coordination and all that.

00:15:16 You just say, I'm going to do this part, then I'll wait, then I'll do that part, then I'll wait, then I'll do that part.

00:15:20 And then, you know, that's sort of that higher level abstraction.

00:15:22 Yeah.

00:15:23 Yeah.

00:15:23 You want to get caught up on all the places that Python is headed, all the directions, all the threads.

00:15:28 Yeah, definitely.

00:15:30 So there was the 2018 Python Language Summit.

00:15:34 Okay.

00:15:35 That's where all the core developers get together and they talk about what they're doing.

00:15:38 They do proposals to each other like, hey, I think we should focus on this or we need to address that and so on.

00:15:45 And there's some really interesting items on lwn.net, which is a pretty interesting site.

00:15:51 They've got a lot of great stuff, mostly focused on Linux.

00:15:54 It's kind of like the Craigslist of Linux news or something.

00:15:58 I don't know.

00:15:58 It's got an interesting design.

00:15:59 But basically, this is a meta article about the Python Language Summit this year.

00:16:05 And it lists off a whole bunch of sessions, each of which are covered in detail in another article.

00:16:10 So what I'm going to do is cover the high level bits of each one of these main sessions.

00:16:14 Okay.

00:16:14 Okay.

00:16:15 So the first one is, could we have sub-interpreter support for Python?

00:16:18 So we were just talking about asyncio and stuff.

00:16:21 One of the main problems, I don't know if I'd call it really a problem because there's a lot of ways around it, actually.

00:16:25 But conceptions is that Python's not great for threading, specifically around taking advantage of multiple cores for CPU stuff because of the GIL.

00:16:34 Right?

00:16:34 It could have 100 threads and only one will run at a time if it's pure Python because of the GIL.

00:16:38 So the suggestion is, could we take this feature, which is apparently already in Python, called sub-interpreter support to create like semi, like lightweight sub-processes that run within the same process?

00:16:52 So sub-interpreters will allow multiple Python interpreters per process.

00:16:57 And there's potential for zero copy data sharing between them and things like that, which is pretty cool.

00:17:02 That's interesting.

00:17:03 It might be interesting even for versioning, right?

00:17:05 Like this library requires this version where that library requires that version.

00:17:08 Well, you can run like maybe multiple sub-interpreters.

00:17:11 I don't know.

00:17:11 That's a whole different angle.

00:17:13 And it wasn't part of this presentation.

00:17:14 But they say the problem is that sub-interpreters currently share the GIL.

00:17:19 So the potential work is, could we make them not share the GIL so they actually can take advantage of multiple cores?

00:17:26 Yeah.

00:17:27 Right?

00:17:27 Like it's becoming a thing.

00:17:28 So like my MacBook, my new MacBook here has 12 cores as far as the OS sees it.

00:17:33 And if I write Python code and it takes full advantage of all the processor that it can in single thread, it's only 8.3% of the capacity of the CPU.

00:17:41 That's a lot less than, you know, 100%.

00:17:44 So having features like this to let you do more computation would be great.

00:17:48 Yeah.

00:17:48 All right.

00:17:49 So I don't want to go too deep in these because it'll like make this an hour-long show.

00:17:52 So I'll try to go a little quicker.

00:17:54 So the next one is modifying the Python object model.

00:17:56 Looking at CPython's structure.

00:17:58 So Carl Shapiro from Instagram talked about how they might rework the way the interpreter interacts with classes for better performance and memory and stuff.

00:18:10 Because Instagram is all about that.

00:18:11 It's one of the interesting things in this article is that there was some controversy around like the presentation and some other stuff.

00:18:18 So I'll let you read about it.

00:18:19 I won't bring it up here, but it's worth looking at.

00:18:22 We just talked about the GIL for parallelism.

00:18:24 And Larry Hastings has been on and off working on this thing called the gillectomy, the removal of the GIL.

00:18:31 And the GIL basically is a thread protection around allocation in Python, which means you don't have to like take a bunch of fine-grained locks when you're allocating new objects.

00:18:41 But because of that, it means only one instruction can run at a time.

00:18:44 So could we take that out and then have a Python that does like true parallelism?

00:18:49 Basically, the update is not much has happened.

00:18:51 So for better or worse, Marietta talked about using GitHub issues for Python.

00:18:57 I didn't realize this wasn't already happening, but apparently it's not.

00:19:00 Apparently there's another site that's currently being used and trying to move over to GitHub issues.

00:19:04 That's pretty cool.

00:19:05 Lucas talked about shortening the Python release cycle.

00:19:08 So right now it's on an 18-month release cycle.

00:19:12 So in 18 months from whenever 3.7 was out, 3.8 will be out.

00:19:16 Can we make that yearly?

00:19:17 It's possibly the conversation.

00:19:18 So you can read in that.

00:19:19 One that you might find interesting is unplugging old batteries.

00:19:23 So unplugging old batteries, there's like encoding libraries for like formats that like predate MIME and other weird type of things that are in there that nobody likely uses anymore.

00:19:34 So what is the process for taking stuff out of the standard library?

00:19:38 There's a process for it getting in, but how do you get it out?

00:19:40 Oh, that's interesting.

00:19:41 Yeah, a lot of things could probably be not just completely eliminated, but moved to like just a pip package or something.

00:19:48 Exactly.

00:19:49 Like this is now out, but if you need it back, you can pip install it separately.

00:19:52 But your job is to maintain it.

00:19:54 Like we're not shipping it anymore.

00:19:55 Something to that effect.

00:19:56 It's kind of cool.

00:19:56 Yeah.

00:19:57 They talked about Linux distributions and Python 2.

00:19:59 With Python 2 coming to end of life, what is the process for like basically getting those out of the Linux systems that they ship with?

00:20:08 And how do we do that?

00:20:09 You talked about Python's static typing.

00:20:12 So there's an update on that.

00:20:14 Mostly focused on stub files.

00:20:16 Have you heard of stub files?

00:20:18 Yeah.

00:20:18 It's like the dot, dot, dot, right?

00:20:20 I've looked at them and they basically are the method signature and then dot, dot, dot.

00:20:25 And they're not actually the implementation.

00:20:26 They're just saying here is the actual shape of this method.

00:20:32 And so what you do is they get imported alongside of your code by things like mypy.

00:20:37 So they're kept in this thing called the type shed, which is a place for third-party libraries to be in there.

00:20:44 So you can look through there and see things like what type of stuff, like the context variable and what is its type definition, for example.

00:20:54 So there's a bunch of things with dot, dot, dot, dot.

00:20:56 They're just like empty, not implemented sort of structures.

00:21:00 And so this is where a lot of the third-party stuff and the standard of the library goes.

00:21:05 But they're saying, look, a lot of packages are not putting things here, like namely things like Django and SQLAlchemy.

00:21:12 So there's a proposal of finding a way to bind the type information to the package and not to the central location so that package maintainers can ship those stubs along with their libraries.

00:21:24 Yeah, that would make more sense.

00:21:26 Or at least it would make some sense.

00:21:28 Yeah, like it'd be easier.

00:21:29 Because then you don't have to, say, like do a PR to some other repo.

00:21:32 Like you just put it along with your library and it's in pip.

00:21:34 Yeah.

00:21:34 It's in PyPI.

00:21:35 Okay.

00:21:35 So Python virtual environments, there's some debate about whether they're useful and what we might do instead.

00:21:41 Primarily around, like if you're trying to teach Python, you shouldn't have to start out with a 20-minute conversation of how to do virtual environments both on Linux, Windows, and macOS.

00:21:49 And then you can actually talk about Hello World, but just how do we just do that?

00:21:54 So an interesting debate there.

00:21:57 There was some conversation around the whole new decision-making process now that Guido stepped down.

00:22:04 Another one about getting along in the Python community, trying to make things like the dev mailer list be more interesting and welcoming as well.

00:22:11 Also, finally, mentoring and diversity for Python with Marietta.

00:22:15 And Victor Stinner as well, two separate presentations in that general area.

00:22:19 So there's every single one of these things I've talked about, there's an article about it and more references.

00:22:24 And so if you want to dive into it, it's like it'll keep you busy for an afternoon.

00:22:28 Okay.

00:22:29 One of the things that you wrote down but we didn't talk about was TK Enter?

00:22:33 Oh, so the one about getting along and being more civil on dev was somebody complaining that TK Enter is so badly out of date that it should be removed from Python, but it's shipped with Python, which kind of brings us back to how do we unplug old batteries?

00:22:46 Because if people don't maintain it and it doesn't work for anyone, then why would TK Enter be there?

00:22:51 So we might get back on another gooey kick if we go down that too far.

00:22:56 Okay.

00:22:56 Anyway, that's what that was about.

00:22:59 The sort of rudeness on the mailing list was focused around TK Enter.

00:23:03 Okay.

00:23:03 And whether it needs to be upgraded, removed, whatever.

00:23:06 All right.

00:23:06 Well, that is it for the Python language summit.

00:23:08 But I thought that was super interesting.

00:23:10 And there's just so many looks at where people are putting their effort.

00:23:13 I mean, this is where the core developers are focusing their time.

00:23:16 So I think it's definitely worth paying attention to.

00:23:18 Yeah, definitely.

00:23:19 Cool.

00:23:19 All right.

00:23:20 You got it?

00:23:20 Got anything else you want to share with folks while we're here?

00:23:22 Yeah.

00:23:22 One thing.

00:23:23 I noticed this from – I'm going to get his name wrong.

00:23:26 Anthony Saudeel?

00:23:28 Anthony Saudeel.

00:23:29 Code with Anthony on Twitter.

00:23:30 I mentioned that pre-commit had a huge jump in downloads on July 30th.

00:23:37 And I first assumed that it was because we covered it or something.

00:23:40 But apparently it didn't line up with us covering it.

00:23:43 You should have covered it earlier.

00:23:44 Could have gotten credit, but no.

00:23:46 But I looked at other packages and there is a weird jump in almost all package downloads starting at the end of July.

00:23:56 I don't have any news around that.

00:23:58 Just that's weird.

00:23:59 And I wonder what's going on.

00:24:01 You know, I wonder if that has to do with when the new PyPI launched.

00:24:06 Oh, yeah.

00:24:06 I wonder.

00:24:07 And it's almost coincident with the pip 18 as well.

00:24:11 The new PyPI launched in April.

00:24:13 So, yeah, it could be with pip 18.

00:24:15 Who knows?

00:24:15 I bet it's some low-level infrastructure thing.

00:24:17 Like caching got expired and everything that had cached it everywhere got a new one or something.

00:24:22 Yeah.

00:24:22 Maybe they changed the way they were caching it or something.

00:24:25 I do remember seeing that from pip that every now and then, like, if you run a sufficiently old pip,

00:24:30 it'll say that it's, like, its offline cache is not compatible and it'll redownload.

00:24:35 So, I'm wondering if in the reverse direction when a new pip came out, that may happen.

00:24:39 So, I bring that up so that if anybody knows what's going on, they can get a hold of us and we can find out.

00:24:44 Yeah.

00:24:44 Throw in the show notes.

00:24:45 Pythonbytes.fm slash 96.

00:24:47 Yeah.

00:24:47 And that's one of the things that I love about this is because we can talk about things that we don't quite know about and people will correct us.

00:24:53 They're generally pretty nice about it, too.

00:24:55 So, thank you for that.

00:24:56 Yeah.

00:24:56 So, one of the things that somebody mentioned, we've talked about Pi Cuda.

00:25:01 Cudpie.

00:25:02 Did I get that right?

00:25:02 I think it was Cudpie.

00:25:03 Cudpie.

00:25:03 Yeah.

00:25:04 Cudpie.

00:25:04 Yeah, Cudpie.

00:25:05 Cudpie.

00:25:06 We were guessing that maybe if you had a video card on your laptop, maybe you could use it.

00:25:10 But we were corrected that it would have to be an NVIDIA card because Cuda only runs on NVIDIA.

00:25:17 Yeah.

00:25:17 So, apparently Cuda is an NVIDIA thing, which I didn't realize.

00:25:20 I thought it was just a graphics card standard.

00:25:22 But, no, it's an NVIDIA thing.

00:25:23 So, this is all triggered by your question.

00:25:26 Could I do this on my MacBook or on my laptop?

00:25:29 If you have, like, a Windows or Linux laptop that has an NVIDIA card, yes.

00:25:33 Otherwise, no.

00:25:34 Apparently, it's the answer.

00:25:35 So, a couple people wrote us and communicated that to us.

00:25:38 So, thank you all for that.

00:25:39 I guess if you're on a MacBook, you could get an external.

00:25:43 On the new ones, you can do external GPUs.

00:25:46 And you could get an NVIDIA one there.

00:25:47 But even the one sold by Apple is actually a Radeon, so it doesn't help you.

00:25:51 Okay.

00:25:52 So, anyway, just thanks for the clarification.

00:25:54 Yeah.

00:25:55 Do you have anything else to add?

00:25:56 Nothing else.

00:25:57 Not right now.

00:25:58 I have some good news next week I'm going to share.

00:26:00 But right now, nothing to say.

00:26:02 All right.

00:26:02 Well, thanks a lot.

00:26:03 Just working away on projects.

00:26:04 Yeah, thank you.

00:26:05 Great to chat with you, as always.

00:26:06 Yeah.

00:26:06 Thank you for listening to Python Bytes.

00:26:10 Follow the show on Twitter via at Python Bytes.

00:26:12 That's Python Bytes as in B-Y-T-E-S.

00:26:15 And get the full show notes at pythonbytes.fm.

00:26:18 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:23 We're always on the lookout for sharing something cool.

00:26:25 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:29 Thank you for listening and sharing this podcast with your friends and colleagues.

