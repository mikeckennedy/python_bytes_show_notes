
00:00:00.000 --> 00:00:05.440
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.440 --> 00:00:11.680
This is episode 127, recorded April 24th, 2019. I'm Michael Kennedy.


00:00:11.680 --> 00:00:12.720
And I'm Brian Okken.


00:00:12.720 --> 00:00:17.120
And we have a special guest this week as well. Kenneth Wrights. Welcome to the show, man.


00:00:17.120 --> 00:00:18.240
Hi, thanks for having me.


00:00:18.240 --> 00:00:23.200
It's great to have you here. I wonder if requests will come up as a topic during the show. What


00:00:23.200 --> 00:00:23.700
do you think?


00:00:23.700 --> 00:00:25.280
Request three, might.


00:00:25.280 --> 00:00:29.840
The future of requests. How exciting. Awesome. Well, thanks for being here. It's great to have


00:00:29.840 --> 00:00:33.840
Before we get any further, I want to say thank you to Datadog for sponsoring this show.


00:00:33.840 --> 00:00:35.840
Check them out at pythonbytes.fm/datadog.


00:00:35.840 --> 00:00:37.840
More on why they're cool later.


00:00:37.840 --> 00:00:41.840
Brian, I feel like WebAssembly, Rust, all these things are just –


00:00:41.840 --> 00:00:43.840
there's so many cool things going on around it.


00:00:43.840 --> 00:00:46.840
And that's something you found us – for us to start off with, right?


00:00:46.840 --> 00:00:50.840
Yeah, I saw this from a cool – actually a Twitter post from Mara Boss.


00:00:50.840 --> 00:00:52.840
I think it's Boss, B-O-S.


00:00:52.840 --> 00:00:57.840
And it's an extension to Rust that's inline Python.


00:00:57.840 --> 00:01:01.120
So if you're a Rust person and you need a little Python in there,


00:01:01.120 --> 00:01:04.880
you can just inline it as a, I think it's as a macro or something.


00:01:04.880 --> 00:01:07.680
I'm not a Rust person, so I'm not sure how this works,


00:01:07.680 --> 00:01:09.920
but you can inline Python code,


00:01:09.920 --> 00:01:15.440
including things like embedding a matplotlib call to pop up a window.


00:01:15.440 --> 00:01:16.960
So it's pretty neat.


00:01:16.960 --> 00:01:19.440
I don't really have much more to say about it other than neat.


00:01:19.440 --> 00:01:21.200
You can run Python within Rust.


00:01:21.200 --> 00:01:23.280
I think that's pretty awesome. Yeah, quite cool.


00:01:23.280 --> 00:01:27.200
I wrote something like this this week, actually, for Bash and Python.


00:01:27.200 --> 00:01:29.400
So you can do inline bash in Python.


00:01:29.400 --> 00:01:30.960
So it seems to be a trend.


00:01:30.960 --> 00:01:33.160
People want to embed other languages in other languages.


00:01:33.160 --> 00:01:34.160
That's cool.


00:01:34.160 --> 00:01:35.160
Can people get to your bash thing?


00:01:35.160 --> 00:01:36.160
Is that a public thing?


00:01:36.160 --> 00:01:38.960
Yeah, it's just import bash or pip install bash.


00:01:38.960 --> 00:01:40.000
That's pretty cool.


00:01:40.000 --> 00:01:42.400
There's a lot of interesting interplays here.


00:01:42.400 --> 00:01:48.960
Brian, have I talked about Wasmr, as in WebAssembly-mer, before on the show?


00:01:48.960 --> 00:01:49.960
I'm not sure.


00:01:49.960 --> 00:01:51.120
I think that's going to have to be a topic.


00:01:51.120 --> 00:01:56.000
So there's all sorts of cool interplays between Rust and Python these days.


00:01:56.000 --> 00:01:58.260
Rust, obviously, is big for generating WebAssembly.


00:01:58.260 --> 00:02:02.500
And so there's now a project called Wasmr, which lets you--


00:02:02.500 --> 00:02:03.940
I think I talked about it last week.


00:02:03.940 --> 00:02:04.500
I did, yeah.


00:02:04.500 --> 00:02:07.300
So lets you basically run WebAssembly in Python.


00:02:07.300 --> 00:02:09.220
And this is kind of like the opposite.


00:02:09.220 --> 00:02:09.740
Oh, really?


00:02:09.740 --> 00:02:10.500
It's an interesting way.


00:02:10.500 --> 00:02:11.000
Yeah, yeah.


00:02:11.000 --> 00:02:15.020
So kind of like Node.js is the platform for running JavaScript


00:02:15.020 --> 00:02:17.980
outside of the browser, Wasmr kind of does similar stuff.


00:02:17.980 --> 00:02:19.860
Lets you take any WebAssembly thing


00:02:19.860 --> 00:02:21.180
and run it in your Python code.


00:02:21.180 --> 00:02:22.980
You basically import the functions from it,


00:02:22.980 --> 00:02:24.300
and then you call them in straight Python.


00:02:24.300 --> 00:02:28.220
>> So do you have to do reflecting where like you know what the structure


00:02:28.220 --> 00:02:30.660
of the code looks like when you import it?


00:02:30.660 --> 00:02:31.500
>> I don't know.


00:02:31.500 --> 00:02:35.980
I doubt it gives you any help, but the way you interact with it looks like Python.


00:02:35.980 --> 00:02:38.740
You don't have to do anything special beyond an import statement.


00:02:38.740 --> 00:02:40.420
>> Okay, so you don't have to write C or anything?


00:02:40.420 --> 00:02:41.420
>> Like a load statement.


00:02:41.420 --> 00:02:42.380
No, nothing like that.


00:02:42.380 --> 00:02:44.020
It's pretty much straight Python.


00:02:44.020 --> 00:02:44.900
This is really cool, Brian.


00:02:44.900 --> 00:02:45.620
Yeah, I like this.


00:02:45.620 --> 00:02:46.860
Very, very nice find.


00:02:46.860 --> 00:02:47.980
Cool.


00:02:47.980 --> 00:02:49.500
All right, Kenneth, what's your next one?


00:02:49.500 --> 00:02:52.780
You want to tell us about the future with your back from the past microphone?


00:02:52.780 --> 00:02:53.780
>> Yeah, sure.


00:02:53.780 --> 00:02:56.340
I wanted to announce that request three is underway right now.


00:02:56.340 --> 00:03:00.180
This we're doing a development cycle at the moment, and I wanted to announce


00:03:00.180 --> 00:03:02.260
just some information about that basically.


00:03:02.260 --> 00:03:07.580
So request two, which is the thing that you know and love is going to go into CVE


00:03:07.580 --> 00:03:10.380
only mode, which is basically been for a long time.


00:03:10.380 --> 00:03:13.780
That's kind of the way things have been for a couple of years now.


00:03:13.780 --> 00:03:17.620
Does that mean like security fixes only or security fixes and bug fixes?


00:03:17.620 --> 00:03:22.980
It means that if there's a CVE, like if there's a true security


00:03:22.980 --> 00:03:26.020
vulnerability, we'll fix that as soon as possible.


00:03:26.020 --> 00:03:29.400
And if there's a, you know, any security conscious bugs that will, will address


00:03:29.400 --> 00:03:30.100
those as well.


00:03:30.100 --> 00:03:34.860
But you know, things like people, a lot of suggest UI changes a lot and it's just not


00:03:34.860 --> 00:03:35.880
going to happen at this point.


00:03:35.880 --> 00:03:38.180
It's going to happen in request three, if you're going to.


00:03:38.180 --> 00:03:38.580
Awesome.


00:03:38.580 --> 00:03:40.060
So what's the story with request three?


00:03:40.060 --> 00:03:41.860
What are you guys, what are the major features?


00:03:41.860 --> 00:03:42.060
Yeah.


00:03:42.060 --> 00:03:45.620
So the major features are there's going to have asynchronous await keywords.


00:03:45.620 --> 00:03:47.820
So you're going to be able to do asynchronous calls.


00:03:47.820 --> 00:03:52.180
We're ripping out URL of three, which is unfortunate because there's different


00:03:52.420 --> 00:03:57.880
Approaches on how the future of the project could unfold and it's this needs to start happening now


00:03:57.880 --> 00:04:02.900
so we're just taking action and making our own library for making these low-level requests and


00:04:02.900 --> 00:04:05.380
We'll see how far along we get with that


00:04:05.380 --> 00:04:09.180
But there's we don't see any blockers that we can foresee at this point


00:04:09.180 --> 00:04:14.340
So we'll have a new a new core if you will and it'll be as a new namespace for quest 3


00:04:14.340 --> 00:04:19.540
So everything that you know that depends on requests. This is gonna have backwards and compatible changes


00:04:19.820 --> 00:04:22.340
But it'll be under a new namespace.


00:04:22.340 --> 00:04:23.820
So you won't have to worry about that.


00:04:23.820 --> 00:04:25.460
You can have both installed at the same time.


00:04:25.460 --> 00:04:27.900
- Nice, and it's modern Python only, right?


00:04:27.900 --> 00:04:29.420
- Yeah, it's only Python 3.6,


00:04:29.420 --> 00:04:31.780
and it has type annotations and all the public functions


00:04:31.780 --> 00:04:34.300
so your IDEs can get some nice code completion


00:04:34.300 --> 00:04:35.680
and stuff like that.


00:04:35.680 --> 00:04:36.900
I'm pretty excited about it.


00:04:36.900 --> 00:04:38.580
So I don't wanna take up too much time now,


00:04:38.580 --> 00:04:39.860
so I guess we gotta keep moving.


00:04:39.860 --> 00:04:41.060
- Well, we do, and I'm pretty excited.


00:04:41.060 --> 00:04:42.760
So I have one more question.


00:04:42.760 --> 00:04:44.340
So why 3.6 and not 3.5?


00:04:44.340 --> 00:04:46.340
Like 3.5 is fine for async and await.


00:04:46.340 --> 00:04:48.540
Did you do like different type annotations?


00:04:48.540 --> 00:04:51.220
What was the three six maybe f-strings?


00:04:51.220 --> 00:04:52.060
- f-strings.


00:04:52.060 --> 00:04:53.420
- Okay, F yes, right on.


00:04:53.420 --> 00:04:54.540
Brian, I still owe you a sticker.


00:04:54.540 --> 00:04:56.380
- They're really useful when you're writing


00:04:56.380 --> 00:04:58.580
a low level library or something that deals


00:04:58.580 --> 00:04:59.460
with a lot of URLs.


00:04:59.460 --> 00:05:00.860
It's really nice to have f-strings.


00:05:00.860 --> 00:05:01.700
- Yeah, that's pretty cool.


00:05:01.700 --> 00:05:02.540
That's interesting.


00:05:02.540 --> 00:05:04.780
- And I don't find it acceptable to use three five.


00:05:04.780 --> 00:05:06.500
Like if you have three six,


00:05:06.500 --> 00:05:08.300
even three six doesn't seem to be acceptable.


00:05:08.300 --> 00:05:10.860
I'd like to, it's gonna be documented as three seven only


00:05:10.860 --> 00:05:13.180
because like if you're gonna be on latest Python,


00:05:13.180 --> 00:05:16.020
you might as well be on latest latest Python.


00:05:16.020 --> 00:05:16.860
- Yeah. - Yeah.


00:05:16.860 --> 00:05:18.820
- Right on, and by the time that that comes out,


00:05:18.820 --> 00:05:21.740
3.7 will definitely be easy, easy, right?


00:05:21.740 --> 00:05:22.580
What's the time frame?


00:05:22.580 --> 00:05:24.620
- Yeah, I think it'll secretly work at 3.6


00:05:24.620 --> 00:05:26.220
and secretly work at 3.7,


00:05:26.220 --> 00:05:27.940
but I'll just say it works at 3.8.


00:05:27.940 --> 00:05:31.180
- I love it, Brian, you excited?


00:05:31.180 --> 00:05:33.820
- Yeah, actually I think that'll be fun.


00:05:33.820 --> 00:05:38.020
- Yeah, I'm thinking of also ripping out the .get keyword.


00:05:38.020 --> 00:05:40.100
That's the thing I'm torn about at the moment.


00:05:40.100 --> 00:05:42.540
Like the request.get that everyone uses.


00:05:42.540 --> 00:05:43.380
- What would it, what it's--


00:05:43.380 --> 00:05:45.020
- To force everyone to use session.


00:05:45.020 --> 00:05:46.060
- Interesting, okay.


00:05:46.060 --> 00:05:47.740
- So you create a session and then you call get


00:05:47.740 --> 00:05:48.580
on the session, right?


00:05:48.580 --> 00:05:51.460
- Yeah, so it would be, it's called HTTP session now.


00:05:51.460 --> 00:05:55.340
So it'd be http.request is what I want people to do.


00:05:55.340 --> 00:05:57.180
But I'm still playing with the idea.


00:05:57.180 --> 00:05:59.940
So it might be not changed, we'll see.


00:05:59.940 --> 00:06:01.840
- Yeah, you could face some backlash.


00:06:01.840 --> 00:06:03.180
But yeah, it sounds good.


00:06:03.180 --> 00:06:04.020
- I'm willing to take it.


00:06:04.020 --> 00:06:04.860
(laughing)


00:06:04.860 --> 00:06:05.700
- You got some tough skin,


00:06:05.700 --> 00:06:07.340
you've been on the internet for a while, right?


00:06:07.340 --> 00:06:08.420
(laughing)


00:06:08.420 --> 00:06:09.580
Yeah, let's not go down that path.


00:06:09.580 --> 00:06:11.780
All right, so maybe you could even say


00:06:11.780 --> 00:06:14.020
that you've been in some flame wars.


00:06:14.020 --> 00:06:18.220
So the next item I have is called Pyflame.


00:06:18.220 --> 00:06:19.420
And Pyflame is pretty cool.


00:06:19.420 --> 00:06:23.740
Like, if you want to know how the performance of your program or certain


00:06:23.740 --> 00:06:28.980
libraries going, you can generate what's called a flame graph for Python.


00:06:28.980 --> 00:06:33.460
And what's really nice about this is it's super low overhead enough that you can


00:06:33.460 --> 00:06:37.940
even run it in production without like hurting your program.


00:06:37.940 --> 00:06:40.580
So you could say, oh, there's something going wrong with the website.


00:06:40.580 --> 00:06:43.700
Let me log in and attach Pyflame to it


00:06:43.700 --> 00:06:46.600
and see what's happening, and then just break loose


00:06:46.600 --> 00:06:49.000
and go analyze that, rather than try


00:06:49.000 --> 00:06:50.380
to simulate what's happening.


00:06:50.380 --> 00:06:51.620
So I think that's pretty cool.


00:06:51.620 --> 00:06:53.720
- We actually used this on the PipM team at one point


00:06:53.720 --> 00:06:56.360
to determine where our slow points were


00:06:56.360 --> 00:06:58.500
and how fast our boot up time is.


00:06:58.500 --> 00:06:59.760
- Yeah, and was it useful?


00:06:59.760 --> 00:07:00.600
- It was very useful.


00:07:00.600 --> 00:07:03.360
It shows you every single call in your stack


00:07:03.360 --> 00:07:05.580
and just shows you a graph over time


00:07:05.580 --> 00:07:08.200
of how much time was spent on each call


00:07:08.200 --> 00:07:09.440
and all the sub calls.


00:07:09.440 --> 00:07:10.540
So it's great.


00:07:10.540 --> 00:07:11.220
I really like it.


00:07:11.220 --> 00:07:12.640
Yeah, the graphs are nice as well.


00:07:12.640 --> 00:07:16.280
They're pretty obvious, not just like a grid of numbers


00:07:16.280 --> 00:07:17.860
like a spreadsheet, but graphs.


00:07:17.860 --> 00:07:19.540
Yeah, usually when you hear someone


00:07:19.540 --> 00:07:21.640
talk about graphs that are generated from Python,


00:07:21.640 --> 00:07:24.620
it's like you have to work with them a lot to make them useful.


00:07:24.620 --> 00:07:28.020
But these ones are useful out of the box, which I really like.


00:07:28.020 --> 00:07:29.180
Yeah, cool.


00:07:29.180 --> 00:07:31.540
Another thing that it said that it does, which is nice,


00:07:31.540 --> 00:07:34.220
has nothing to do with bitbump in this feature,


00:07:34.220 --> 00:07:38.140
but it's capable of profiling embedded Python interpreters.


00:07:38.140 --> 00:07:42.220
So like for example, in micro whiskey or gene or corn or some of these, you


00:07:42.220 --> 00:07:45.340
know, back end worker processes for web servers, so you can get in there and


00:07:45.340 --> 00:07:46.600
get that in multi-threaded stuff.


00:07:46.600 --> 00:07:47.900
So I think it's pretty awesome.


00:07:47.900 --> 00:07:50.140
Brian, do you guys care about performance where you are?


00:07:50.140 --> 00:07:53.840
I mean, you're doing testing hardware, so it's not like users are


00:07:53.840 --> 00:07:55.540
directly interacting with it.


00:07:55.540 --> 00:07:58.780
Is it, is it, I guess not, do you care about it, but is it something


00:07:58.780 --> 00:07:59.980
you have to like worry about?


00:07:59.980 --> 00:08:04.140
Hey, in my production stuff, the Python is not the bottleneck.


00:08:04.140 --> 00:08:05.300
It's the communication.


00:08:05.300 --> 00:08:06.660
So yeah,


00:08:06.660 --> 00:08:08.020
that's a great response.


00:08:08.020 --> 00:08:11.020
It's on the wire, it's not our fault.


00:08:11.020 --> 00:08:19.020
Well, it usually is our fault, but it's usually an optimization of doing too many calls and reducing the communication latencies.


00:08:19.020 --> 00:08:24.020
Right, having a chatty API versus trying to bulk up the thing you want to ask it or whatever, right?


00:08:24.020 --> 00:08:26.020
Are you working with a lot of microservices?


00:08:26.020 --> 00:08:32.020
Working with test equipment, so communicating commands and retrieving data.


00:08:32.020 --> 00:08:34.020
Yeah, that would take a lot of time.


00:08:34.020 --> 00:08:38.420
- Yeah, Brian tests actual devices with Python.


00:08:38.420 --> 00:08:39.260
- That's awesome.


00:08:39.260 --> 00:08:40.660
Oh, that's right, I knew about this.


00:08:40.660 --> 00:08:44.180
Yeah, you test like phones and stuff, don't you?


00:08:44.180 --> 00:08:45.020
- Yep.


00:08:45.020 --> 00:08:45.840
- That's awesome.


00:08:45.840 --> 00:08:46.820
- Yeah, pretty cool.


00:08:46.820 --> 00:08:48.980
All right, before we get on to the next one,


00:08:48.980 --> 00:08:50.060
which looks pretty interesting,


00:08:50.060 --> 00:08:51.460
let me just tell you about Datadog.


00:08:51.460 --> 00:08:54.220
So they've been sponsoring Python Bytes for quite a while


00:08:54.220 --> 00:08:55.980
and we definitely appreciate them.


00:08:55.980 --> 00:08:57.940
So they're a monitoring and analytics service


00:08:57.940 --> 00:09:00.180
that lets you take all of your metrics and logs


00:09:00.180 --> 00:09:02.440
and tracing and whatnot across your services,


00:09:02.440 --> 00:09:04.360
like microservices, like Ken just said,


00:09:04.360 --> 00:09:06.200
and put them all in one place,


00:09:06.200 --> 00:09:08.840
and it automatically instruments async libraries


00:09:08.840 --> 00:09:11.160
like asyncio and Django and Tornado,


00:09:11.160 --> 00:09:12.580
and helps you visualize all that stuff


00:09:12.580 --> 00:09:15.200
across the boundaries to find your bottlenecks.


00:09:15.200 --> 00:09:16.600
Super cool, so check them out.


00:09:16.600 --> 00:09:19.640
Get a free 14-day trial and a cool Datadog T-shirt


00:09:19.640 --> 00:09:22.400
over at pythonbytes.fm/datadog.


00:09:22.400 --> 00:09:23.480
All right, thanks Datadog.


00:09:23.480 --> 00:09:25.220
Brian, what do you got next?


00:09:25.220 --> 00:09:26.480
- This was gonna be one of my extras,


00:09:26.480 --> 00:09:28.080
but I thought I'd just discuss it


00:09:28.080 --> 00:09:29.560
'cause I was curious what you guys thought.


00:09:29.560 --> 00:09:31.660
So Flit is, I really like it.


00:09:31.660 --> 00:09:39.340
It's a little package that allows you to quickly build a pyproject.toml file and a license file.


00:09:39.340 --> 00:09:43.180
Basically, if you've got a module that you want to share with somebody,


00:09:43.180 --> 00:09:45.820
or a package that's just a source package,


00:09:45.820 --> 00:09:50.940
it's just a few commands to try to get it into a wheel form so you can share it.


00:09:50.940 --> 00:09:53.180
And it even does publishing within it.


00:09:53.180 --> 00:09:57.740
The one thing I didn't like about it is it didn't support source directories.


00:09:57.740 --> 00:10:00.220
And I like source directories in my packages.


00:10:00.220 --> 00:10:05.820
So I did what you can do with open source projects is I submitted a pull request.


00:10:05.820 --> 00:10:08.180
So just submitted this last night.


00:10:08.180 --> 00:10:10.800
I've been playing with the corner cases today,


00:10:10.800 --> 00:10:12.060
and there's still some,


00:10:12.060 --> 00:10:15.060
I'm listing it as a work in progress because there's


00:10:15.060 --> 00:10:18.560
some corner cases that still need tested and probably ironed out.


00:10:18.560 --> 00:10:20.780
But I don't know, we'll see.


00:10:20.780 --> 00:10:22.120
We'll see where this goes.


00:10:22.120 --> 00:10:26.700
>> Did you make it so it's configurable to any directory or specifically SRC?


00:10:26.700 --> 00:10:28.420
>> Specifically SRC.


00:10:28.420 --> 00:10:29.580
>> Okay, cool.


00:10:29.580 --> 00:10:31.260
It doesn't break any of the other.


00:10:31.260 --> 00:10:36.120
So really right now it used to have two kinds of projects, just a module


00:10:36.120 --> 00:10:38.860
or a package with a name.


00:10:38.860 --> 00:10:42.620
And now I'm just adding those two within a source directory.


00:10:42.620 --> 00:10:44.260
The old mechanism all works.


00:10:44.260 --> 00:10:45.380
It's just extending it.


00:10:45.380 --> 00:10:45.860
Yeah.


00:10:45.860 --> 00:10:49.420
Played us a little bit like a combination between twine and


00:10:49.420 --> 00:10:50.980
cookie cutter a little bit.


00:10:50.980 --> 00:10:56.400
Like it's far reduced in scope from cookie cutter and in twine, all it does


00:10:56.400 --> 00:10:58.700
is, is publish things, publish wheels for you.


00:10:59.280 --> 00:11:01.440
And that's the tool I typically use in my workflow.


00:11:01.440 --> 00:11:03.160
But flit is a great alternative.


00:11:03.160 --> 00:11:07.440
If you don't already have your setup stuff built out, I think flit is like a


00:11:07.440 --> 00:11:12.120
great first tool to go for, especially if you don't have those files already written.


00:11:12.120 --> 00:11:12.800
Yeah, that's awesome.


00:11:12.800 --> 00:11:13.200
Yeah.


00:11:13.200 --> 00:11:14.640
Well, hopefully people like it.


00:11:14.640 --> 00:11:16.160
I mean, it's out there, the PR, right?


00:11:16.160 --> 00:11:16.760
They could merge it.


00:11:16.760 --> 00:11:17.560
That's pretty cool.


00:11:17.560 --> 00:11:17.840
Yeah.


00:11:17.840 --> 00:11:19.840
So hopefully, hopefully they'll put it in.


00:11:19.840 --> 00:11:21.360
Otherwise you can't use it on your project.


00:11:21.360 --> 00:11:25.200
You'll have to succumb to our side where without, where you don't use source.


00:11:25.200 --> 00:11:27.440
Well, I could fork it.


00:11:27.440 --> 00:11:28.520
Yeah, you could.


00:11:28.520 --> 00:11:31.240
But I don't really want to support it.


00:11:31.240 --> 00:11:32.240
So I'm hoping that...


00:11:32.240 --> 00:11:33.240
Call it split.


00:11:33.240 --> 00:11:34.240
Yeah, you don't want that puppy.


00:11:34.240 --> 00:11:39.840
You don't need another thing to take care of, right?


00:11:39.840 --> 00:11:41.640
Yeah, that's a good name though.


00:11:41.640 --> 00:11:44.840
Just going to do it.


00:11:44.840 --> 00:11:45.840
Awesome.


00:11:45.840 --> 00:11:46.840
All right.


00:11:46.840 --> 00:11:51.040
So speaking of packaging and things that we've talked about and things we like, I'm a huge


00:11:51.040 --> 00:11:52.200
fan of PipX.


00:11:52.200 --> 00:11:54.400
I think PipX is really killer.


00:11:54.400 --> 00:11:55.400
The way it works.


00:11:55.400 --> 00:11:58.840
issues with homebrew in it, but I'm going to put those aside for a minute.


00:11:58.840 --> 00:12:01.000
Also, Pipin, tell us the story here.


00:12:01.000 --> 00:12:06.200
My endorsement is also with this flag, which is I've run into some issues and I'm not sure what they are yet.


00:12:06.200 --> 00:12:09.400
So, it appears as though PipX is great.


00:12:09.400 --> 00:12:14.200
And what it does is it just creates a virtual environment and installs binaries for you.


00:12:14.200 --> 00:12:19.000
So, it's like a PIPC replacement or a virtual amp wrapper if you have like,


00:12:19.000 --> 00:12:23.240
sometimes people will have like a system virtual amp where they install their system utilities,


00:12:23.240 --> 00:12:28.600
or they'll just keep their system utilities in the system installation of Python,


00:12:28.600 --> 00:12:32.040
and then they'll isolate their different projects into virtual labs.


00:12:32.040 --> 00:12:37.240
This makes it so every single tool has its own virtual lab, which is really best practice.


00:12:37.240 --> 00:12:43.880
So if you're using pipav, if you're using HTTP IE, if you're using anything pip itself,


00:12:43.880 --> 00:12:48.760
anything that's pip installable from the command line, you can install easily with pipx.


00:12:48.760 --> 00:12:57.260
And it does appear as though it has Chimp, so I'm not sure that it's fantastic, but it appears as though it works pretty well so far.


00:12:57.260 --> 00:12:59.560
And I really like that it supports multiple binaries.


00:12:59.560 --> 00:13:01.160
Yeah, I do too. It's quite nice.


00:13:01.160 --> 00:13:05.460
And to me, it feels like homebrew, but for Python executables.


00:13:05.460 --> 00:13:12.360
Like, it's not necessarily for managing stuff for your project, but for stuff that is Python-based that you just want to run, right?


00:13:12.360 --> 00:13:17.960
Like, I want to, I don't know, run Glances or Cookie Cutter or something like that, right? Or PipMF.


00:13:17.960 --> 00:13:21.960
Exactly. And it gives you a nice isolated environment in which to install that.


00:13:21.960 --> 00:13:25.960
And some of these, like PipM has like some 50 dependencies or something crazy.


00:13:25.960 --> 00:13:29.960
So it's really good to have an isolated virtual environment for that.


00:13:29.960 --> 00:13:33.960
Because in Python you can't install multiple versions of a dependency


00:13:33.960 --> 00:13:37.960
like you can in Ruby. So that's why we need to do this, basically.


00:13:37.960 --> 00:13:40.960
Yeah, cool. Well, I definitely like it.


00:13:40.960 --> 00:13:43.960
That's the end of my endorsement with the asterisks afterwards.


00:13:43.960 --> 00:13:47.840
afterwards. Yeah, I love it. The problem that I ran into the only problem I ran


00:13:47.840 --> 00:13:53.760
into was when I installed Python three through homebrew and then Python three


00:13:53.760 --> 00:13:58.440
got upgraded by homebrew, it had lost like the sim link to where Python was in


00:13:58.440 --> 00:14:02.500
all of the virtual environments that it had created. Oh, interesting. Yeah. Yeah.


00:14:02.500 --> 00:14:06.560
So when I basically when I upgraded Python, it like lost track of what it


00:14:06.560 --> 00:14:10.600
was up to. So I just had to like re pip X install everything. There's maybe


00:14:10.600 --> 00:14:13.720
another way to fix it. But that that was what I did because all the virtual


00:14:13.720 --> 00:14:16.480
environments it manages seem to have gotten whacked.


00:14:16.480 --> 00:14:18.840
- Yeah, PipM does that too, where it'll break,


00:14:18.840 --> 00:14:19.920
all your virtual homes just break


00:14:19.920 --> 00:14:22.160
if you upgrade your Python underneath it, so.


00:14:22.160 --> 00:14:23.720
- Yeah, what do you do to fix it?


00:14:23.720 --> 00:14:24.560
You know better than I do.


00:14:24.560 --> 00:14:26.640
- I just delete them all.


00:14:26.640 --> 00:14:29.220
- Okay, so even you have the same fix as I do.


00:14:29.220 --> 00:14:31.720
Did you try turning it off and on?


00:14:31.720 --> 00:14:32.720
How many times?


00:14:32.720 --> 00:14:34.080
Three times, I always do it three times.


00:14:34.080 --> 00:14:37.080
- I would like to automate that so it does it for you.


00:14:37.080 --> 00:14:38.440
Like, you know, it has a message like,


00:14:38.440 --> 00:14:40.440
oh, you appear to have upgraded your Python.


00:14:40.440 --> 00:14:42.080
We're gonna clean it up for you.


00:14:42.080 --> 00:14:44.120
but it is limited time.


00:14:44.120 --> 00:14:45.320
- Exactly, quite cool.


00:14:45.320 --> 00:14:46.560
All right, the last one,


00:14:46.560 --> 00:14:47.560
Kenneth, I think you'll like this one


00:14:47.560 --> 00:14:51.240
because it has to do with requesting things on the internet.


00:14:51.240 --> 00:14:52.680
And I don't know how to say this,


00:14:52.680 --> 00:14:54.920
I'm guessing cheat sheet,


00:14:54.920 --> 00:14:58.720
cheat.sh as a domain, okay?


00:14:58.720 --> 00:15:03.080
So this is an interesting cheat sheet


00:15:03.080 --> 00:15:08.080
for getting started with Python or Bash or whatever.


00:15:08.080 --> 00:15:11.800
And the way it works is you send it curl requests


00:15:11.800 --> 00:15:16.120
or send it HTTP pi request on the command line


00:15:16.120 --> 00:15:19.040
to ask it questions, okay?


00:15:19.040 --> 00:15:20.720
So you can go over there and say,


00:15:20.720 --> 00:15:23.000
like if you have HTTP pi installed,


00:15:23.000 --> 00:15:27.400
you could say, HTTP space cht.sh/python


00:15:27.400 --> 00:15:28.800
that tells you you're talking about Python,


00:15:28.800 --> 00:15:31.680
then you could say /sort+list.


00:15:31.680 --> 00:15:34.600
And if you run that, it will tell you,


00:15:34.600 --> 00:15:37.800
oh, here's a Python example of how you sort a list.


00:15:37.800 --> 00:15:40.120
You create the list, you say mylist.sort,


00:15:40.120 --> 00:15:41.880
you set the key to like string.lower,


00:15:41.880 --> 00:15:43.240
or whatever you wanna sort,


00:15:43.240 --> 00:15:45.000
if you say you wanna sort alphabetically,


00:15:45.000 --> 00:15:48.080
but without concern of casing, things like that.


00:15:48.080 --> 00:15:49.980
So you can ask it arbitrary questions,


00:15:49.980 --> 00:15:54.980
like cheat.sheet./python/connect-to-database,


00:15:54.980 --> 00:15:57.320
or something like that, with a pluses in there.


00:15:57.320 --> 00:15:59.920
And it'll tell you, oh, here's some ways you can do it,


00:15:59.920 --> 00:16:02.200
like with SQLite, let's see what it says for this one.


00:16:02.200 --> 00:16:04.940
Oh yeah, here's a little example of how I use PeeWee


00:16:04.940 --> 00:16:08.320
to open up a cute little class and do ORM stuff to it.


00:16:08.320 --> 00:16:11.860
And just, it's pretty, pretty funky, pretty interesting.


00:16:11.860 --> 00:16:14.640
And then you can ask it questions like how to get started with a


00:16:14.640 --> 00:16:16.140
colon learn on any project.


00:16:16.140 --> 00:16:17.460
Like how do I get started with Python?


00:16:17.460 --> 00:16:20.400
And it'll tell you in its little way.


00:16:20.400 --> 00:16:21.160
It's, it's pretty sweet.


00:16:21.160 --> 00:16:22.880
I think funky is the right word for this.


00:16:22.880 --> 00:16:24.880
It's different, right?


00:16:24.880 --> 00:16:26.500
So it's like Google, but harder.


00:16:26.500 --> 00:16:31.040
Basically it's slightly more deterministic.


00:16:31.040 --> 00:16:34.160
Yes, but it has integration into Visual Studio Code and VIM.


00:16:34.160 --> 00:16:34.920
Oh, nice.


00:16:34.920 --> 00:16:35.920
Which is interesting.


00:16:36.340 --> 00:16:39.820
And then you can also, like you can install a client


00:16:39.820 --> 00:16:41.140
and put it into stealth mode.


00:16:41.140 --> 00:16:43.540
So like if you're doing an interview,


00:16:43.540 --> 00:16:45.900
anything that you select in a text box,


00:16:45.900 --> 00:16:48.100
it will start like on the side,


00:16:48.100 --> 00:16:50.180
printing out its response to that.


00:16:50.180 --> 00:16:54.020
Okay, so if like you're in a chat window.


00:16:54.020 --> 00:16:55.980
- I'm looking at the readme


00:16:55.980 --> 00:16:58.380
and he really takes this very seriously.


00:16:58.380 --> 00:16:59.220
- It is.


00:16:59.220 --> 00:17:00.420
- He says ultra fast returns answers


00:17:00.420 --> 00:17:02.120
within 100 milliseconds as a rule.


00:17:02.120 --> 00:17:05.260
So like he's definitely making scalability a concern.


00:17:05.260 --> 00:17:08.060
So I think this is a really fun production project.


00:17:08.060 --> 00:17:08.900
- I think so too.


00:17:08.900 --> 00:17:11.660
And it doesn't use its own data sources,


00:17:11.660 --> 00:17:15.540
it uses other community driven repos for different topics


00:17:15.540 --> 00:17:16.860
and it tries to pull those in.


00:17:16.860 --> 00:17:18.660
So it's not like it tries to be the answer,


00:17:18.660 --> 00:17:23.180
it tries to be a facade from an API to the answers.


00:17:23.180 --> 00:17:25.060
- So it has sources that it gets them from.


00:17:25.060 --> 00:17:27.100
I'm interested in seeing that part.


00:17:27.100 --> 00:17:28.140
- Yeah, yeah, it's pretty interesting.


00:17:28.140 --> 00:17:31.180
So I just wanna give a shout out to John Boltmeyer.


00:17:31.180 --> 00:17:33.780
He sent this in a while ago and I thought it was fun,


00:17:33.780 --> 00:17:34.780
so I thought I'd throw it out there.


00:17:34.780 --> 00:17:36.340
- And he also has clipboard integration


00:17:36.340 --> 00:17:39.300
and tab completion support for Bash, Phish, and ZSH.


00:17:39.300 --> 00:17:41.420
- I know, I mean, this is in depth, right?


00:17:41.420 --> 00:17:44.220
- (laughs) Like, you can really go all out with this.


00:17:44.220 --> 00:17:46.560
- (laughs) Yes, you can.


00:17:46.560 --> 00:17:49.340
All right, well, that's it for our full major topics.


00:17:49.340 --> 00:17:51.260
But I'm sure we'll have a couple extra things


00:17:51.260 --> 00:17:52.500
to throw out here real quick.


00:17:52.500 --> 00:17:53.700
Brian, you wanna start us off?


00:17:53.700 --> 00:17:55.180
- So you guys were giving me a bad time


00:17:55.180 --> 00:17:57.040
about being a VI person last week,


00:17:57.040 --> 00:17:59.500
so I thought I'd throw in an article


00:17:59.500 --> 00:18:01.940
about VI is good for beginners.


00:18:01.940 --> 00:18:03.780
It's just a fun read for anybody


00:18:03.780 --> 00:18:06.060
that thinks that VI is terrible.


00:18:06.060 --> 00:18:07.620
- You used Vim, not VI?


00:18:07.620 --> 00:18:10.660
- Actually, I used PyCharm right now with the idea of Vim.


00:18:10.660 --> 00:18:13.420
- Yeah, this is an interesting contrarian sort of take


00:18:13.420 --> 00:18:15.460
on the simplicity is good for you.


00:18:15.460 --> 00:18:16.300
- Yeah.


00:18:16.300 --> 00:18:19.300
- Yeah, I myself, I think it's a good thing to learn.


00:18:19.300 --> 00:18:22.420
- I did a presentation last week with a Jupyter notebook,


00:18:22.420 --> 00:18:25.480
and one of the things I needed to do was to quickly


00:18:25.480 --> 00:18:27.340
make sure I cleaned out all the output


00:18:27.340 --> 00:18:28.620
of a bunch of notebooks,


00:18:28.620 --> 00:18:31.580
and I found this tool called nbstripout,


00:18:31.580 --> 00:18:34.120
And so I wanted to drop a link to that.


00:18:34.120 --> 00:18:35.460
It's pretty helpful.


00:18:35.460 --> 00:18:37.220
- Yeah, it's nice. - It's just a command line thing.


00:18:37.220 --> 00:18:38.740
And then we had a bunch of people,


00:18:38.740 --> 00:18:43.620
a couple people including Cecil mentioned PioDyed,


00:18:43.620 --> 00:18:45.420
but we did cover that in episode 93,


00:18:45.420 --> 00:18:48.820
but there was a recent article written up about PioDyed


00:18:48.820 --> 00:18:50.980
that's kind of neat, so I'll drop a link to that


00:18:50.980 --> 00:18:51.940
in the show notes as well.


00:18:51.940 --> 00:18:54.020
- I'm super excited about PioDyed.


00:18:54.020 --> 00:18:58.420
I actually just yesterday interviewed Michael Dropboom,


00:18:58.420 --> 00:19:00.380
who wrote that article you're referencing here


00:19:00.380 --> 00:19:05.740
worked on the project on Talk Python going deep into WebAssembly and what Mozilla's doing


00:19:05.740 --> 00:19:06.740
with PyOdied stuff.


00:19:06.740 --> 00:19:07.740
So it's, yeah, it's super cool.


00:19:07.740 --> 00:19:08.740
Kenneth, have you seen this PyOdied?


00:19:08.740 --> 00:19:09.740
I'm looking at it now.


00:19:09.740 --> 00:19:15.740
It's like all of the scientific Python stack in WebAssembly.


00:19:15.740 --> 00:19:20.140
Yes, including the libraries like NumPy and Matplotlib and stuff like that.


00:19:20.140 --> 00:19:21.140
That's awesome.


00:19:21.140 --> 00:19:22.140
Not just like CPython.


00:19:22.140 --> 00:19:24.140
That is not unimpressive.


00:19:24.140 --> 00:19:27.100
No, it's not.


00:19:27.100 --> 00:19:28.100
It's quite something.


00:19:28.100 --> 00:19:29.100
That's awesome.


00:19:29.100 --> 00:19:30.100
Let's see.


00:19:30.100 --> 00:19:32.100
I got some quick conference announcements.


00:19:32.100 --> 00:19:33.540
Kenneth, I see you do as well.


00:19:33.540 --> 00:19:37.300
So PyCon Australia just opened their call for proposals.


00:19:37.300 --> 00:19:39.780
So Australia is a beautiful place to be.


00:19:39.780 --> 00:19:42.020
Either maybe you're already there and you just want to go to the conference,


00:19:42.020 --> 00:19:44.900
or you want an excuse to go to Australia, submit a talk.


00:19:44.900 --> 00:19:45.940
That's awesome.


00:19:45.940 --> 00:19:53.060
And then last time I had used about whether the gravitational waves of black holes colliding,


00:19:53.060 --> 00:19:56.100
that research was also done with Python.


00:19:56.100 --> 00:19:58.500
So remember we talked about the black hole picture


00:19:59.140 --> 00:20:00.460
and all that stuff, Brian?


00:20:00.460 --> 00:20:01.300
- Yeah.


00:20:01.300 --> 00:20:02.820
- Well, our listeners are awesome because they're like,


00:20:02.820 --> 00:20:04.380
"Oh, Michael, did you wonder about this?"


00:20:04.380 --> 00:20:06.020
Yes, here's the package they use


00:20:06.020 --> 00:20:07.940
to discover gravitational waves


00:20:07.940 --> 00:20:09.420
and do all this amazing science.


00:20:09.420 --> 00:20:13.060
So actually, there's some really cool projects out there,


00:20:13.060 --> 00:20:15.860
and I'll link to a video of someone talking about it.


00:20:15.860 --> 00:20:19.420
So thanks to Dave Kirby and Matthew Fikert both for that,


00:20:19.420 --> 00:20:21.740
and I think it's gwpi?


00:20:21.740 --> 00:20:25.460
Yeah, gwpi.github.io is a Python package


00:20:25.460 --> 00:20:27.860
for gravitational wave astrophysics,


00:20:27.860 --> 00:20:29.500
So detecting when black holes collide


00:20:29.500 --> 00:20:32.180
and the ripple in space time they make with Python


00:20:32.180 --> 00:20:32.900
is pretty awesome.


00:20:32.900 --> 00:20:34.340
- Yeah, I was really surprised to find out


00:20:34.340 --> 00:20:36.380
that when that code was made available,


00:20:36.380 --> 00:20:38.820
that a request was used for it.


00:20:38.820 --> 00:20:39.660
- That's so awesome.


00:20:39.660 --> 00:20:42.380
- I have no idea how or why.


00:20:42.380 --> 00:20:43.220
- It doesn't matter.


00:20:43.220 --> 00:20:44.140
It's awesome.


00:20:44.140 --> 00:20:46.380
- But it's in there, so I was like, yes.


00:20:46.380 --> 00:20:47.300
- That is super cool.


00:20:47.300 --> 00:20:48.380
Congrats, man.


00:20:48.380 --> 00:20:50.660
And then finally, another thing that's awesome


00:20:50.660 --> 00:20:52.940
about our listeners is anytime we mention something


00:20:52.940 --> 00:20:54.140
we think it's unique, they're like,


00:20:54.140 --> 00:20:54.980
there's four other ones.


00:20:54.980 --> 00:20:55.800
Here's another one.


00:20:55.800 --> 00:20:57.780
So bullet we talked about, cooked input


00:20:57.780 --> 00:20:59.100
we talked about is awesome.


00:20:59.100 --> 00:21:00.980
Bullets is super cool for like drop downs


00:21:00.980 --> 00:21:03.980
inside terminal windows and like nice selections,


00:21:03.980 --> 00:21:05.220
but it doesn't work on Windows.


00:21:05.220 --> 00:21:09.340
So someone else, Sander Tunison, sent over Questionnaire,


00:21:09.340 --> 00:21:11.500
which is one that is also compatible for Windows,


00:21:11.500 --> 00:21:12.340
for our Windows folks.


00:21:12.340 --> 00:21:15.120
- Thanks for putting that in, 'cause I need that.


00:21:15.120 --> 00:21:16.880
- See, you were like the first,


00:21:16.880 --> 00:21:19.460
one of the very first people to benefit from this podcast.


00:21:19.460 --> 00:21:21.200
I feel the same way, like people are like,


00:21:21.200 --> 00:21:23.860
oh, you finally, I mean, like I benefit from this


00:21:23.860 --> 00:21:24.860
just like you guys do.


00:21:24.860 --> 00:21:27.180
It's just I have to get there first before we publish it.


00:21:27.180 --> 00:21:28.180
- Yeah. - Awesome, awesome.


00:21:28.180 --> 00:21:29.420
Okay, Kenneth, what do you got?


00:21:29.420 --> 00:21:31.500
- Honestly, I have a few CFPs I wanted to announce.


00:21:31.500 --> 00:21:33.700
One of them is for Pi Colorado.


00:21:33.700 --> 00:21:34.540
It's a great conference.


00:21:34.540 --> 00:21:35.860
It's gonna be their first year.


00:21:35.860 --> 00:21:37.300
It's run by a great team, at least.


00:21:37.300 --> 00:21:38.700
It should be a great conference.


00:21:38.700 --> 00:21:40.380
If they are actively looking for people


00:21:40.380 --> 00:21:41.460
to submit to their CFP,


00:21:41.460 --> 00:21:43.300
they have not had as many submissions


00:21:43.300 --> 00:21:44.920
as they would like to so far.


00:21:44.920 --> 00:21:47.780
They, you know, bad timing with the conference year,


00:21:47.780 --> 00:21:48.620
that type of thing.


00:21:48.620 --> 00:21:51.300
So if anyone has any talks that they think


00:21:51.300 --> 00:21:54.660
could be applicable to that event, please submit.


00:21:54.660 --> 00:21:57.100
Pi Ohio also has their CFP open at the moment,


00:21:57.100 --> 00:22:00.640
they're looking for people to submit, but they never have a problem with getting


00:22:00.640 --> 00:22:01.520
too many submissions.


00:22:01.520 --> 00:22:06.340
So I wouldn't rush to that one if you're, you know, if you're feeling iffy


00:22:06.340 --> 00:22:06.820
about it.


00:22:06.820 --> 00:22:11.260
And then the last one is a PyCon remote, which is something that I'm going to be


00:22:11.260 --> 00:22:11.920
putting on.


00:22:11.920 --> 00:22:15.900
If all goes according to plan, with Calvin, Spellman, I believe is how


00:22:15.900 --> 00:22:19.780
you say his last name, who is from the PI Tennessee organizers group.


00:22:19.780 --> 00:22:21.780
Uh, him and I are co-chairing.


00:22:21.780 --> 00:22:22.260
That's cool.


00:22:22.260 --> 00:22:22.980
What's that about?


00:22:22.980 --> 00:22:27.020
It's basically a PyCon, but it'll be accessible to people who can't attend


00:22:27.020 --> 00:22:29.460
PyCon or who can't normally speak at PyCon.


00:22:29.460 --> 00:22:31.660
Is it also virtual or only virtual?


00:22:31.660 --> 00:22:32.620
Only virtual.


00:22:32.620 --> 00:22:33.420
Okay, sweet.


00:22:33.420 --> 00:22:34.220
That's awesome.


00:22:34.220 --> 00:22:34.580
Yeah.


00:22:34.580 --> 00:22:38.340
We're still figuring out what the feasibility of different approaches are,


00:22:38.340 --> 00:22:42.380
but it'll most likely be live streamed and people will send in videos ahead


00:22:42.380 --> 00:22:43.740
of time of their talks.


00:22:43.740 --> 00:22:44.100
Okay.


00:22:44.100 --> 00:22:46.780
And unless they're like a keynote speaker or something like that.


00:22:46.780 --> 00:22:50.780
So we're still figuring out the details, but it'll be, it should be good.


00:22:50.780 --> 00:22:53.600
We have a mailing list with like 700 people who have signed up so far.


00:22:53.600 --> 00:22:57.640
So it should be something we can pull off.


00:22:57.640 --> 00:22:59.680
So if you're interested and want to learn more,


00:22:59.680 --> 00:23:04.200
you can go to do/co/pycon-remote.


00:23:04.200 --> 00:23:05.840
I know it's not the best URL, but that's


00:23:05.840 --> 00:23:07.160
the best I can give you right now.


00:23:07.160 --> 00:23:07.720
Awesome.


00:23:07.720 --> 00:23:08.960
Yeah, we'll put the link in the show notes.


00:23:08.960 --> 00:23:10.840
People can just click it in their player.


00:23:10.840 --> 00:23:11.800
That's awesome.


00:23:11.800 --> 00:23:17.400
All right, well, let's round it out with some jokes here.


00:23:17.400 --> 00:23:19.080
Brian, you want to go first?


00:23:19.080 --> 00:23:21.040
We're not doing all the jokes, are we?


00:23:21.040 --> 00:23:21.880
We've got to go fast.


00:23:21.880 --> 00:23:22.760
We've got to go fast.


00:23:22.760 --> 00:23:23.280
OK.


00:23:23.280 --> 00:23:25.040
So yeah, I'll just pick one.


00:23:25.040 --> 00:23:27.480
I don't know how tasteful this is.


00:23:27.480 --> 00:23:29.000
We'll let it land anyway.


00:23:29.000 --> 00:23:32.640
So Python used to be directed by the BDFL, Guido.


00:23:32.640 --> 00:23:36.360
Now it's directed by a steering council, GUIDs zero through four.


00:23:36.360 --> 00:23:39.680
Love it.


00:23:39.680 --> 00:23:40.840
Kenneth, you want to do one?


00:23:40.840 --> 00:23:41.240
You got any?


00:23:41.240 --> 00:23:43.200
What's the difference between a musician and a pizza?


00:23:43.200 --> 00:23:43.640
I don't know.


00:23:43.640 --> 00:23:44.440
You can eat a pizza.


00:23:44.440 --> 00:23:46.000
Pizza can feed a family of four.


00:23:46.000 --> 00:23:47.200
Oh, that hurts.


00:23:47.200 --> 00:23:50.480
I can say that because I've made $25 off of my music so far.


00:23:50.480 --> 00:23:51.840
Beautiful.


00:23:51.840 --> 00:23:52.560
All right.


00:23:52.560 --> 00:23:53.560
I got two, but they're related,


00:23:53.560 --> 00:23:55.400
so I'm gonna put them together real quick.


00:23:55.400 --> 00:23:58.360
I think first to kick it off that Ubuntu users


00:23:58.360 --> 00:24:01.360
are apt to get this joke that I'm about to tell, okay?


00:24:01.360 --> 00:24:02.920
And then the second one.


00:24:02.920 --> 00:24:05.040
(laughing)


00:24:05.040 --> 00:24:07.200
The second one, this is fun.


00:24:07.200 --> 00:24:08.440
I actually, I know Kenneth,


00:24:08.440 --> 00:24:10.000
you switched over to Windows recently,


00:24:10.000 --> 00:24:11.640
and I'm also kind of a fan of it,


00:24:11.640 --> 00:24:13.200
even though I spend a lot of time on Mac.


00:24:13.200 --> 00:24:15.080
Still, I like the joke.


00:24:15.080 --> 00:24:18.080
How many programmers does it take to kill a cockroach?


00:24:18.080 --> 00:24:18.900
Two.


00:24:18.900 --> 00:24:21.000
One holds, the other installs Windows on it.


00:24:21.000 --> 00:24:24.000
(laughter)


00:24:24.000 --> 00:24:24.840
- All right, beautiful.


00:24:24.840 --> 00:24:27.720
Well, I think that's probably about it for our show today.


00:24:27.720 --> 00:24:28.720
Kenneth, thank you for coming.


00:24:28.720 --> 00:24:30.200
Brian, thank you as always for being here.


00:24:30.200 --> 00:24:31.020
- Yeah, thank you.


00:24:31.020 --> 00:24:32.720
- Thank you for listening to Python Bytes.


00:24:32.720 --> 00:24:35.200
Follow the show on Twitter via @PythonBytes.


00:24:35.200 --> 00:24:38.240
That's Python Bytes as in B-Y-T-E-S.


00:24:38.240 --> 00:24:41.440
And get the full show notes at PythonBytes.fm.


00:24:41.440 --> 00:24:43.040
If you have a news item you want featured,


00:24:43.040 --> 00:24:45.480
just visit PythonBytes.fm and send it our way.


00:24:45.480 --> 00:24:48.360
We're always on the lookout for sharing something cool.


00:24:48.360 --> 00:24:50.200
On behalf of myself and Brian Aukin,


00:24:50.200 --> 00:24:54.760
This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

