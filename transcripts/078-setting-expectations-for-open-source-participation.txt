00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 78, recorded May 17th, 2018. I'm Michael Kennedy.

00:00:10 And I'm Brian Okken.

00:00:11 And we have a special guest with us here, don't we, Brian?

00:00:13 Yeah.

00:00:13 Yeah, hey, Kojo.

00:00:14 Hello, hello.

00:00:15 Yeah, we have Kojo Iterisa here on the show. Thank you for coming and joining us.

00:00:20 No problem. Thank you for having me.

00:00:21 Yeah, it's really great. All three of us got to have a wonderful time at PyCon, didn't we?

00:00:26 Yes, we did.

00:00:26 Oh my goodness. So I'm totally going to recap on that first.

00:00:30 But let's just say thanks to Datadog. This episode is brought to you by Datadog.

00:00:33 Check them out at pythonbytes.fm/Datadog.

00:00:36 They were at PyCon. And so we're all we, all of us.

00:00:40 In fact, Kojo, you and I, we kind of jumped into the deep end, like right at the beginning.

00:00:44 I was sort of standing around outside and you were, you walked in this room and, you know, just, it was like, hey, we don't have enough people to,

00:00:53 or enough room to give this welcome speech to all the newcomers.

00:00:56 So you and I ended up giving the welcome speech, right, to a second group.

00:00:59 Yep. You and I and Trey Hunter ended up sort of as the impromptu host of that.

00:01:03 Yeah. At first it was Trey Hunter.

00:01:05 I mean, I saw you walking.

00:01:06 I'm like, hey, you need to come up to the front and be part of this.

00:01:08 So that was really awesome.

00:01:09 Thanks for doing that with me.

00:01:11 Brian, what was your favorite thing about PyCon?

00:01:12 I guess seeing everybody that I only know from their little tiny circle icon on Twitter and being able to see them in person and chat.

00:01:21 I was actually often surprised because I didn't recognize somebody, even though I see their little picture all the time.

00:01:27 Well, you know, how many tiny pixels?

00:01:30 It's like a 64 by 64 sort of thing, right?

00:01:33 Yeah.

00:01:34 Yeah.

00:01:34 Pretty funny.

00:01:35 Pretty funny.

00:01:36 So, Kojo, how about you?

00:01:37 Favorite thing at PyCon?

00:01:38 I think for me, my favorite thing about PyCon was maybe just getting a chance to get caught up with folks.

00:01:43 Getting a chance to get caught up with people that I already know.

00:01:46 Then also getting a chance to meet new people.

00:01:48 And I think the sort of the impromptu leading of the new intenti session was nice because it made it easier to meet new people.

00:01:56 Yeah, that was really nice because the people felt more comfortable coming up and speaking to you and me after that.

00:02:02 I think my favorite thing was actually the live Python bytes recording.

00:02:05 That was fun, right, Brian?

00:02:06 Oh, that was a blast.

00:02:07 Yeah, it was really good.

00:02:08 We need to do that every year.

00:02:09 I think I'm definitely planning on doing that again every year.

00:02:12 I'm thinking about trying to actually propose that.

00:02:14 It's like an official part, an official activity that is part of some of these conferences like PyCascades or maybe PyCon or something.

00:02:21 But if nothing else, certainly the open session was awesome.

00:02:24 And we'll talk more about that later.

00:02:27 But let's get to your first item, Brian.

00:02:28 Somebody forgot an else statement.

00:02:30 Is that what happened?

00:02:30 Yeah, well, there's more else statements in Python that you might not know about.

00:02:36 I read this and I'm like, oh, yeah, I forgot about these.

00:02:39 Anyway, so both for, I mean, you can use else clauses for if statements.

00:02:44 Everybody knows that.

00:02:45 But for and while loops also have if statement or else clauses.

00:02:49 They're while and for loops are loops.

00:02:52 And if they complete all the way through, then the else clause gets run.

00:02:57 And there's a little article to describe that that we've linked to called the forgotten optional else in Python loops.

00:03:04 But I wanted to highlight it because often I forget about it.

00:03:08 The thinking around this is if you're using a loop to search for something or search for different things and you want to bail out if you find something, one of the ways is to mark a flag to say, hey, I found this thing.

00:03:20 But you don't need a flag if you take advantage of the else clause.

00:03:24 So I just wanted to highlight that and remind everybody.

00:03:27 Yeah.

00:03:27 So both the for and while loops.

00:03:29 And these definitely seemed a little bit funky to me when I learned about it.

00:03:34 I'm like, wait, the while loop has an else clause?

00:03:36 My mind is melting.

00:03:37 Kojo, did you interact with these?

00:03:39 Have you ever used an else clause on a loop?

00:03:41 On a for loop?

00:03:42 I don't know that I have, actually.

00:03:44 Yeah, I always look at them and wonder why they're there.

00:03:48 I mean, it's pretty cool to know about them.

00:03:50 I feel like this is one of those things that you could get asked in a job interview, right?

00:03:55 Like, oh, what does the else clause do?

00:03:56 Like, wait, there's an else clause?

00:03:58 How interesting.

00:03:58 So this is, I would say this is one of the less used part, major pieces of syntax in the language, for sure.

00:04:04 I would definitely, since I know a lot of people don't know about them, if I was going to use them, I'd probably add a comment there to say, hey, if we don't find the things, then we do this stuff.

00:04:14 It's interesting.

00:04:14 It's definitely like one of these sort of Pythonic things that is not necessarily obvious, right?

00:04:19 It's kind of like self-contradictory in that sense.

00:04:22 Yeah, yeah, pretty interesting.

00:04:23 All right, Kojo, you found some pretty cool stuff with some libraries and dependencies, right?

00:04:28 Tell us about those.

00:04:29 I got exposed to this, really, I think on the last day of PyCon.

00:04:32 There's a website called libraries.io.

00:04:35 And what it does is it lets you not only find different packages, so like PyPy will let you find a number of different packages.

00:04:42 But what libraries.io does is it will let you find dependencies based on packages.

00:04:47 So you go to libraries.io and you search for a certain package, and then you can see what other packages that that package depends on.

00:04:55 And so it's an interesting way to sort of see, to find out, like if you're building a project, what things are you depending on?

00:05:02 And then maybe what things are those things depending on that you might not have been aware of?

00:05:06 And it will also point out, like, versions and that sort of thing.

00:05:08 So you can drill down fairly deep into it.

00:05:10 I think the person who introduced it to me was pointing out that I can't remember the package now, but there's a certain package that depends on Twine, which is the packaging tool.

00:05:19 But it depends on an older version of Twine.

00:05:21 And so on a version of Twine that's, like, say, maybe like a year or so old.

00:05:25 And so you can find that kind of information.

00:05:27 And so I thought that was interesting.

00:05:29 And then along with that, libraries.io is run by a site that is called Tidelift that is looking to try to help bring some financial support into open source software.

00:05:40 I haven't had a chance to look into that in great detail, but it's interesting how the two are connected.

00:05:43 That's pretty interesting.

00:05:45 So it's almost like you can get consulting support agreements for a package that you might want to use.

00:05:54 It's kind of what it sounds like.

00:05:55 Yeah, it seems that way.

00:05:56 Like I said, I haven't had a chance to dig into it in a lot of detail.

00:05:59 So I focus a little more on libraries.io.

00:06:01 But I think with libraries.io, you can help determine, okay, well, what packages might I need or want consulting support on?

00:06:10 So what are the packages that my project depends on heavily and at the same time might not be getting as much support as I might want?

00:06:17 And so maybe I want to focus my support dollars on that particular package.

00:06:22 Just maybe two or three levels down in the stack.

00:06:25 Yeah, how interesting.

00:06:26 So it says they give maintainers and core teams a platform and marketplace for building sustainable business around the project.

00:06:36 I bet that resonates with a lot of folks who are out there listening to the show.

00:06:39 I know there's been a lot of work done.

00:06:41 A lot of people who have been looking into how do we make open source projects sustainable instead of just having to depend on volunteer work.

00:06:47 I think the most straightforward way that this has worked traditionally is either a very small amount of donations or consulting.

00:06:56 If I work on, say, Flask, then maybe I could consult on help people out who are doing large Flask things.

00:07:03 But this looks like a nicer sort of more formal arrangement.

00:07:06 So, yeah, I really hopefully that that takes off.

00:07:09 That'd be great for people.

00:07:10 I think one of the things I was just playing with it, one of the fun things about libraries.io is to look up a, if you're trying to use a new package that you haven't used before, new library, you can look to see who else is using it.

00:07:23 So you can maybe look at their source code and see how they're using it.

00:07:27 It's true.

00:07:27 That's interesting.

00:07:27 Oh, I see.

00:07:28 Other projects, right?

00:07:29 Like, here's some library.

00:07:30 Who else uses it?

00:07:31 Oh, look.

00:07:31 Request uses it.

00:07:32 So that must mean it's pretty stable or something like that.

00:07:35 Or even just to look at code examples of how they're using it.

00:07:39 Yeah, very cool.

00:07:39 That's a good find, Joe.

00:07:40 Thanks.

00:07:41 So either of you guys out there, are you using type annotations and typends in your Python code?

00:07:46 I am not.

00:07:47 But I had a brief discussion about them when I was in Chicago a couple of weeks ago.

00:07:51 So.

00:07:52 Yeah.

00:07:52 Okay.

00:07:52 Brian?

00:07:53 Yeah, I'm starting to.

00:07:54 Yeah.

00:07:54 I think it's interesting.

00:07:55 Like, I certainly don't go type crazy on the code that I write.

00:07:59 There's some obvious benefits for like really large organizations.

00:08:02 And there's a great article I want to link to called The Other Great Benefit of Python Type Annotations.

00:08:08 So they talk about things that are fairly straightforward.

00:08:11 You know, it's like we've had these type annotations for a while, but maybe it's a little unclear when to use them.

00:08:17 It's good if you have some big project.

00:08:19 You want to somehow verify that things are working.

00:08:22 Right.

00:08:22 So you can employ like static code analysis, right?

00:08:25 With like mypy or a lot of things.

00:08:27 We've talked about some of the tooling previously, Brian, that you could run across your code and will like generate these and then you can decide to incorporate them.

00:08:35 One idea I really like is sort of a twist on an Uncle Bob quote who's sort of a software architect guy.

00:08:43 It says cleaner code or the code that is self-documented is really great.

00:08:48 And traditionally people said, well, we don't need a comment when you can use a function or a variable that's like well named.

00:08:55 So maybe another way to look at it, another thing to say is like we don't need a comment when you can specify to talk about the types when you could say specify type annotation.

00:09:03 So instead of having a comment saying, hey, this variable is such and such like a type annotation makes that sort of readability super, super easy.

00:09:11 That's great.

00:09:11 And then obviously they're sort of optional, right?

00:09:14 This whole progressive typing or gradual typing thing that they're doing is great.

00:09:19 So you can add it and won't break your code, but it also won't make it any faster.

00:09:22 Right.

00:09:23 Just use it where it's useful for you.

00:09:24 But this article says the final sort of straw that was like the massive benefit for this guy.

00:09:30 And I agree with him, which is why I brought this in is around code completion.

00:09:35 Yeah, definitely.

00:09:36 Right.

00:09:36 So like I've got some big application and I typically put this sort of stuff on the boundaries of one layer talking to another layer.

00:09:44 So I have the web app.

00:09:44 The web app consumes some sort of data access layer, logic layer that deals with services and data.

00:09:50 Like if you annotate just the stuff that is like public from that data layer, it just flows through the rest of your application and makes it super, super obvious, which I think that's pretty nice.

00:10:00 I was actually looking at an example of this last week of, for instance, like if you've got a class that's like a new data class that has type annotations and you assign that to a variable and then you try to access elements of the variable, like PyCharm can like help you, for instance, other editors as well.

00:10:19 But PyCharm does those hints and will tell you the types of the different elements that you have access to.

00:10:25 Right. Or if you were to return some object from a method, it might just have no completion because who knows what that could be.

00:10:31 But if you annotate the return type, all of a sudden it like comes back to life.

00:10:34 Yeah.

00:10:34 What editor do you use?

00:10:35 Primarily Sublime, but my coworkers, I've got some coworkers who use Sublime and some who use PyCharm.

00:10:42 So I've started using PyCharm more on the QA team where I work.

00:10:45 And so the other QA person tends to use PyCharm.

00:10:49 So I sort of go back and forth between the two, like on my personal machines, I've got Sublime and then on my work machine, I've got both.

00:10:56 And so I use them both in slightly different ways.

00:10:58 You're getting sucked into the PyCharm.

00:11:00 Exactly.

00:11:00 Orbit.

00:11:01 And I remember, I've also good things about it.

00:11:04 I also remember reading an article that you wrote about the benefit, I think what the nine benefits of PyCharm.

00:11:08 So.

00:11:08 Yeah, that was quite a while.

00:11:10 That really lays it out.

00:11:11 Right.

00:11:11 And this code completion to one of them and these type annotations makes that better, which I think is pretty awesome.

00:11:17 So, yeah, I just wanted to throw that out there.

00:11:18 Like there's a whole sort of static code analysis stuff, but this code completion, pretty, pretty major.

00:11:23 All right.

00:11:24 Before we get to the next one, let me tell you all about Datadog because they are major supporters of the show and they really are helping keep it going.

00:11:31 So be sure to check them out.

00:11:32 So it's a monitoring solution that provides deep visibility into distributed applications.

00:11:38 So you're maybe you've got some microservices or got different Python applications and you want to see how the database and the Python app and Linux itself are interacting.

00:11:47 Go check out Datadog.

00:11:49 So just a few minutes, you can investigate some bottlenecks in your code, figure out where it's slow and make it better.

00:11:54 Just reading a few dashboards.

00:11:56 So pretty cool.

00:11:56 So visualize your Python performance today.

00:11:58 Get started with a free trial of Datadog and they'll send you a cool Datadog t-shirt, which is awesome.

00:12:04 So just go to pythonbytes.fm/Datadog.

00:12:07 Brian, when people create open source projects, like they usually do it because it's something that they love.

00:12:13 But then people start to depend on these projects and that can create some sort of animosity, right?

00:12:20 There's a lot of burnout in the open source space because of it, I think.

00:12:23 Definitely.

00:12:23 We've seen a lot in the last couple of years of people, you know, even taking a month off or six months off to try to get away from some of it or dropping projects, trying to find other maintainers because maintenance is kind of a hard problem.

00:12:39 This was something that was brought up and you said that from Brett Cannon, I saw this talk Sunday morning for the Sunday morning keynote at PyCon.

00:12:47 And you said that he also gave it at PyCascades.

00:12:51 I don't know if it's exactly the same, but this general message, yes.

00:12:54 Yeah.

00:12:54 So the talk was called Setting Expectations for Open Source Participation.

00:12:59 But it really is a discussion about kindness and paying for open source with kindness.

00:13:05 And he really talked about some, he gave some examples of basically every communication you have with an open source project, even like a bug report.

00:13:15 You need to realize that you're taking somebody else's time out of their free time, the free time they could be spending with their, on their own projects or with their family.

00:13:25 And so be aware of that.

00:13:27 And he gave some examples of some good interactions and some bad interactions.

00:13:31 And then also some guidelines for how to communicate online.

00:13:36 It was pretty good.

00:13:37 I think the major, sort of the main takeaway was most of these interactions are you asking for a favor.

00:13:45 And it sometimes doesn't seem that way, right?

00:13:47 Like, so if I go to a project and say, here's a pull request.

00:13:50 It's super small.

00:13:51 All it does is add this one feature.

00:13:53 It's like 10 lines.

00:13:54 You can just read that and it's no problem.

00:13:56 But if the person decides to accept that, right?

00:13:59 They're not you.

00:14:01 They are responsible now for maintaining it, but also documenting it, potentially testing it, evolving it.

00:14:09 Right?

00:14:09 There's just so many layers.

00:14:10 It's like, hey, I did you such a nice favor.

00:14:13 Here's a puppy.

00:14:14 I got you a puppy.

00:14:15 And then, you know, the person doesn't like it.

00:14:17 It's like, why don't they like the puppy?

00:14:18 I got them.

00:14:18 That's so nice to give a puppy.

00:14:20 Right?

00:14:21 But you're really giving this thing that you have to care for for a long time, even if it's something as helpful as actually here's a pull request.

00:14:29 Yeah.

00:14:29 It's you're asking for work for somebody else's work.

00:14:32 And we forget about that because we're used to like products where we can like complain about the Apple laptop keyboards.

00:14:39 And it's just OK.

00:14:40 But we probably ought to be nicer about that.

00:14:43 But when you like even complain about or tweet a negative thing about an open source project or have a bug report where it's just like I needed this to do this thing and it's broken.

00:14:56 You're really hitting somebody.

00:14:59 This is somebody's like somebody's passion.

00:15:02 Somebody's spent a lot of time on and you're saying to them, this is garbage.

00:15:06 So, yes, do bug reports, but do it in it's open source.

00:15:10 It's volunteer effort.

00:15:11 So do it kindly.

00:15:13 Do it like you were asking your mother to do it or something like that.

00:15:16 And he presented it so well that I think this sort of topic needs to be talked about more, even even within groups.

00:15:25 Like I realized after watching, listening to this and watching it, that I think it will help me even interact with my own team at work when it isn't volunteer.

00:15:33 It's people getting paid.

00:15:35 But you still need to be respectful and considerate.

00:15:37 It's still basically a zero sum game for their time and energy.

00:15:40 So by doing something, you were sort of taking a slice of that that, you know, maybe they didn't ask you to take.

00:15:45 Right.

00:15:45 Yeah.

00:15:46 Yeah, yeah, for sure.

00:15:47 Kojo, did you get to see this talk either in Vancouver or at the conference?

00:15:52 No, I saw there was a similar talk at PyCon Canada in Montreal, but I saw it in Vancouver.

00:15:58 Yeah.

00:15:58 So have you had any interactions with folks where you see people like giving up on open source projects or other folks being unkind?

00:16:06 I've seen a little bit of that, maybe a little more than I would like.

00:16:08 I have seen people sort of complaining about open source projects, maybe not meeting their standards or not being updated as quickly or as well as they would like.

00:16:18 I tend to be a little bit prickly about that kind of thing because I think so I'm relatively new to software engineering.

00:16:24 And a lot of my exposure to software engineering practices have been through the open source community and through some of the larger open source projects.

00:16:32 And so I have an understanding that a lot of these things that people depend on are being built by volunteers who are doing it in their spare time.

00:16:40 And I've been fortunate enough to meet a number of these people.

00:16:43 And so, you know, I know some of these people personally.

00:16:46 And so, yeah, I guess it sort of helps humanize it for me a little more.

00:16:49 So I try to sort of push back on those things like, hey, you know what?

00:16:53 How much did you pay for this or how much are you paying for this?

00:16:55 And also, you know, you can if you want a problem fixed, there is a well-documented process for you to make a contribution to help fix some of the problems for yourself.

00:17:04 And if you're someone who's a more experienced developer, it's not that difficult for you to do.

00:17:08 I think that's a really good point.

00:17:10 I guess the thing is don't take it out on people.

00:17:13 Just vote with your feet.

00:17:14 If you see a project that has 100 unresponded to PRs, maybe that's not a real healthy project.

00:17:19 And your choices are don't be part of it or become a contributor, but don't abuse the person who's already overwhelmed and already has too much going on, right?

00:17:30 Exactly.

00:17:31 Yeah, yeah.

00:17:32 All right.

00:17:32 So what's your next pick, Kojo?

00:17:34 My pick sort of ties into that, the idea of, you know, you've got these expectations for open source participation.

00:17:39 My thing is sort of focusing on different Python community events.

00:17:43 And so, of course, you know, we all just came from PyCon and one of the nice things about it, so there's PyCon itself.

00:17:49 But then for me, one of the nice things about it was a chance to meet some of my, say, get back together with some of my friends from the Python community.

00:17:54 Of course, we started off with, you know, actually spending some time with you and with Trey to help sort of welcome the first time attendees to PyCon, sort of welcoming them into more active participation in the Python community.

00:18:06 Yeah, that was fun.

00:18:07 So let me ask you really quick about that while you're on the topic.

00:18:09 Give me three really quick things people should know to have, like, a better experience at PyCon or local ones, maybe.

00:18:15 So I would say, one, try to have some idea of why you're there.

00:18:19 Like, why are you attending PyCon?

00:18:21 Are you looking for a job?

00:18:22 Are you looking to hire people?

00:18:23 Are you looking to learn new things?

00:18:25 Are you looking to meet new folks?

00:18:26 That sort of thing.

00:18:27 And I think whether it's PyCon or your local Python meetup, it's sort of the same thing.

00:18:32 Like, you know, what are you going for just to learn or just to meet other developers who work in Python just like you do that kind of thing?

00:18:38 I think that's sort of the big thing.

00:18:40 And the other thing is to maybe with something like PyCon, try to manage your energy because there are a lot of people at PyCon.

00:18:46 There's a lot going on.

00:18:48 You probably won't be able to go to every talk.

00:18:51 There's a temptation to try to consume as much information as you can.

00:18:54 And then I think along with that managing your energy, something that we pointed out to people is to try to sort of – it's something like PyCon.

00:19:01 Try to optimize for the human interactions like the open spaces and sort of the hallway track because the talks are awesome, but they're all going to be recorded.

00:19:08 And then the videos will be available fairly quickly.

00:19:11 But the people that you meet and the human interactions that you have or the cool things that happen in the open spaces, those aren't going to be recorded.

00:19:18 So one of the things that I did at PyCon, one of the open spaces I was in was hosted by Adafruit.

00:19:23 And so we got to sit down with some of the circuit boards that were in our swag bags and write some code and make LEDs light up and that sort of thing and sit with people.

00:19:32 And so that's the thing that's – I can't watch a video of that later.

00:19:36 I can't do that again later.

00:19:37 So I actually had that sort of direct interaction with people.

00:19:41 So I think those would be sort of three things to help guide people.

00:19:44 I really like to manage the energy because I was done at the end.

00:19:47 Brian, how about you?

00:19:48 Wiped out at the end of PyCon?

00:19:49 Very wiped out, yeah.

00:19:51 And I think that contributed to some of my – kind of my funk and tiredness in the last few days.

00:19:57 I'm still feeling it as well.

00:19:59 I'm still – it was totally worth it, but I am wiped out.

00:20:01 All right.

00:20:02 So the last one, I want to share a personal story with you because we find all these things on the internet, and I think they're great.

00:20:07 But like every now and then, it's like I just found this thing, and it so helped me with this problem that I was running into, and I think it'll help a lot of people out there.

00:20:16 So I want to tell everyone about Ngrok, N-G-R-O-K.

00:20:21 And that is a free with a premium upgrade sort of thing service that you can go and basically ignoring all firewalls and all sorts of stuff, expose basically local ports or local servers on your computer.

00:20:35 So if I have, say, like a mobile device, and I have an app running on the mobile device, and I want to test the services, but I'm like developing it, maybe I want to even debug like how that's working.

00:20:47 I could actually open – I could run this Ngrok command.

00:20:50 It'll do an SSH tunnel that exposes, say, my local dev port back to port 80 on the internet.

00:20:55 Then I go to that URL and hit something on my phone app maybe, and it like – I can step through it in PyCharm on my local machine.

00:21:04 I think that that is pretty darn awesome.

00:21:07 Or if you want to make, say, give access to your Raspberry Pi so you can get into it and call operations on it, test your chatbot.

00:21:16 The reason I was using it is I'm building a set of applications, like proper compiled applications that are offline for my courses.

00:21:26 So people can basically have offline access to the videos and like sync up their account and then not depend upon being on the web or on the internet, right?

00:21:33 So that's what I've been doing since I got back from PyCon.

00:21:35 It's building that.

00:21:36 And I had been deploying stuff out to the internet, and I'd connect to it and test.

00:21:40 I'm like, oh, that service isn't quite working.

00:21:41 And it was getting a little painful.

00:21:43 I'm like, why am I doing this?

00:21:44 Because one is on the Windows machine and one is on my Mac, and it was easier to just do that, right?

00:21:48 Instead of – it wasn't on the same machine.

00:21:50 And so I'm like, I'm just going to fire up Ngrok, and then I can actually do the same thing I told you about.

00:21:54 I can actually step through as the Windows app is interacting with the service that ultimately makes its way back over HTTPS onto my local machine.

00:22:02 Isn't that cool?

00:22:03 Yeah, that's very cool.

00:22:04 I got exposed to Ngrok by a coworker, and I hadn't seen it before, and I was like, oh, well, that's pretty awesome.

00:22:09 Yeah, the thing that I think is most useful is so often – like, I work in the web world, right?

00:22:14 So traditionally, I had maybe made some changes to the web app, and then we might have like a scrum meeting or like a quick sync-up meeting.

00:22:23 Like, hey, how's everybody doing?

00:22:24 And I'm not ready to publish what I've done to the internet, to staging and mess everyone else up.

00:22:29 But I would still like to show people and let them interact with it.

00:22:32 Instead of just doing like a screen share, you can go, well, just go to this URL, and you can run it on my machine, which is incredible for a quick iteration of design and development.

00:22:43 I just saw an interesting application for Ngrok.

00:22:44 Maybe like the weekend right before PyCon, some friends who run a group here in town called Girls Coding Club, they were doing sort of a tutorial session.

00:22:53 And so you've got people sort of learning how to build basic web applications.

00:22:56 I think they were using Rails.

00:22:57 But then you can use Ngrok and then expose that to the wider internet so that other people in the – so people in the class can sort of – can see each other's applications, or you can send a link to a friend or what have you.

00:23:08 So it's also really good for tutorials, yeah.

00:23:10 That is awesome.

00:23:11 Yeah, for – right, for classes, right?

00:23:13 So I've got a Slack channel for that group.

00:23:14 Everybody could Ngrok their stuff and throw it in.

00:23:17 Say, hey, mine's at, you know, randomaddress.ngrok.io.

00:23:21 Click on it and have a look.

00:23:22 And you could like – without having to like reconfigure that on different people's servers.

00:23:26 I love it.

00:23:27 And there's like a totally reasonable free tier, which is pretty awesome.

00:23:30 All right.

00:23:31 Well, that's it for our items this week.

00:23:33 I just have a few extra things I want to share.

00:23:35 Brian, anything else you want to throw out there?

00:23:36 I did on the plane coming back from PyCon, I finally finished editing the interview with Trey Hunter.

00:23:43 So soon there will be a Test and Code podcast with interview with Trey Hunter.

00:23:48 So that should be out soon.

00:23:49 I saw that you're starting to publish a little more frequently, which is great.

00:23:53 Thank you.

00:23:53 Yeah, I'm glad you're doing that.

00:23:54 So one of our listeners out there, Stephen, Stephen Howell.

00:23:58 Hello, Stephen.

00:23:59 Was kind enough to actually be live streaming our live, well, semi-live, in-audience recording of Python Bytes last week.

00:24:08 That's pretty cool, right, Brian?

00:24:10 That is neat.

00:24:10 Have you watched it?

00:24:11 No.

00:24:11 Well, I watched some of it.

00:24:12 So he actually took the video and it starts a little bit of a ways in, but he put it up on the internet on YouTube.

00:24:18 So if you guys were listening to the live episode last week and you're like, well, what was that actually like?

00:24:23 Well, click the link at the bottom and you'll be able to watch a pretty high quality version of it, actually.

00:24:27 So that's pretty cool.

00:24:28 And then, you know, another thing I'd like to come back to just really quick is, remember when we talked about how easy it is to have a systemd daemon as a Python application?

00:24:40 To basically implement a systemd daemon in Python?

00:24:43 We talked about that in episode 54.

00:24:45 Oh, yeah, totally.

00:24:46 No, I don't remember that.

00:24:47 So it turns out you basically have like six or seven lines of configuration and then just an app with like a while true loop.

00:24:53 It's insane.

00:24:54 And that's all you have to do to create like a system start run forever sort of application in Python.

00:25:00 And it's really beautiful.

00:25:01 So I recently used that technique from episode 54 to build a global series of video servers throughout the world to do like geolocated video serving for all my courses to make that really much nicer.

00:25:15 So added one in Japan, Sao Paulo and Mumbai this week.

00:25:19 So that'll make it a little better for people out there listening.

00:25:22 But it's also a cool application of what we talked about in episode 54.

00:25:25 Nice.

00:25:26 Very interesting.

00:25:26 Yeah, very interesting.

00:25:27 Incredibly simple.

00:25:28 I think more people probably would want to do it if they knew how easy it was.

00:25:32 All right, guys.

00:25:32 Well, that's all I got.

00:25:33 Thank you, Kojo, for being here.

00:25:35 And Brian, thank you as always for making the show happen.

00:25:38 Thank you.

00:25:38 Thank you for inviting me.

00:25:39 Yep, you bet.

00:25:40 Bye, guys.

00:25:40 Thank you for listening to Python Bytes.

00:25:44 Follow the show on Twitter via at Python Bytes.

00:25:46 That's Python Bytes as in B-Y-T-E-S.

00:25:49 And get the full show notes at pythonbytes.fm.

00:25:53 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:25:57 We're always on the lookout for sharing something cool.

00:26:00 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:03 Thank you for listening and sharing this podcast with your friends and colleagues.

