00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 355, recorded October 3rd, 2023.

00:00:09 And I am Brian Okken.

00:00:11 And I am Michael Kennedy.

00:00:13 I almost said the second because I thought we were going to record yesterday and we didn't.

00:00:17 But I had it off.

00:00:19 Anyway, welcome everybody.

00:00:20 It's good to have the show.

00:00:23 Thank you, everyone, for supporting us through purchasing courses at Talk Python Training or purchasing the pytest course, of course, or supporting us on Patreon.

00:00:34 We love Patreon supporters.

00:00:35 And if you want to reach us, reach us through Fostadon on Mastodon at Michael Kennedy, at Brian Okken, and at Python Bytes.

00:00:45 And if you're listening to this, you can also join us live sometimes.

00:00:50 We usually are at Tuesdays at 11, Tuesdays at 11-ish on Pacific time.

00:00:59 So join us.

00:01:00 And you can just go to pythonbytes.fm to see the link.

00:01:04 But we have some exciting news.

00:01:06 Yesterday was an exciting day.

00:01:07 Tell us why.

00:01:09 We've been waiting a year for this one.

00:01:13 Python 312 is out.

00:01:16 Absolutely.

00:01:17 Absolutely.

00:01:17 Absolutely big news.

00:01:20 If you look at how much stuff it's easy to just go, oh, what are there?

00:01:25 It's like these four new features I care about or something along those lines.

00:01:30 It's like, okay, well, there's a new Python.

00:01:32 If you look at the change log, Brian, if you look at the, what's new and you scroll this, I threw this into omnivore.app.

00:01:42 And it said it's 48 minutes of reading to read the, what's in this release.

00:01:47 Wow.

00:01:47 That's a lot.

00:01:49 That's a lot of stuff.

00:01:50 That's a lot of good things.

00:01:53 I think it's, I don't even know how much it's called out in the, what's new, because it's a little tricky to put in the, not new, it's just more.

00:02:03 But the faster CPython initiative, I think, you know, is going strong for 312 as it was for 11 and it will be for 13.

00:02:13 So not even covered in the, what's new, I think is Python 312 should just be faster.

00:02:19 That's really cool.

00:02:20 Yeah.

00:02:21 But if you look at the, you know, they kind of, it's really nice, even though it's 48 minutes of reading, they do put the headline items at the front here.

00:02:30 So there's new type parameter syntax and PEP 695.

00:02:35 So Brian, how do you like your generics?

00:02:38 I haven't thought about it actually.

00:02:42 Or your templates, if you're a C++ guy, they don't call them generics.

00:02:45 Like C# and Java, they call them generics.

00:02:49 But C++ calls them templates.

00:02:52 So, but Python calls them generics.

00:02:54 We have that, we had it before actually.

00:02:57 So this is not new, new.

00:02:59 Like there were ways if I scroll down somewhere in this big long list, there was like a, here's how you do it before.

00:03:06 And here's how you do it now.

00:03:08 Honestly, meh.

00:03:12 I mean, no disrespect to people working on it, but it's just not like a thing that, that I'm going to be focusing.

00:03:17 It's just not a huge deal to me.

00:03:19 Right.

00:03:19 It's not something I feel like I'm going to do a lot of.

00:03:21 Maybe.

00:03:23 I feel like most of the places that I would have wanted to use it, it's kind of like the self parameter sort of takes care of that for me.

00:03:30 But anyway, very exciting for people who do need to use this.

00:03:33 And if you're building a library, like a package, possibly this will give you a lot of flexibility for extensions and sensibility and whatnot.

00:03:44 But I don't know.

00:03:45 What do you think?

00:03:45 Exciting?

00:03:46 I think I'm not excited about it yet, but I think I'll be using it probably pretty soon.

00:03:51 So, yeah.

00:03:52 Yeah.

00:03:53 f-strings are all grown up now.

00:03:55 Oh boy.

00:03:56 They can do all the Python.

00:03:57 So f-strings.

00:03:58 I don't know if people know, but f-strings have their own separate implementation, separate to like regular strings and stuff.

00:04:06 And a lot of it was done in C.

00:04:09 They're really wild.

00:04:10 Because of that, they're somewhat limited in what you can put inside the curly braces.

00:04:15 There's like different kinds of expressions.

00:04:17 You can do ternary, like if tests, and you can just say like thing dot upper, you know, as what goes in there.

00:04:26 But you can't write full Python in f-strings.

00:04:29 And the most obvious was you couldn't put quotes in the little curly, between the curly braces.

00:04:36 Or you couldn't put the same quotes that you had on the outside.

00:04:39 Yeah.

00:04:40 I'd always be like, okay, this one's getting single quotes because the string is a double quote or vice versa.

00:04:46 You have to kind of think it out.

00:04:47 So now it's like a little more free form what can go in there.

00:04:52 I don't know that's necessarily a recommendation of writing your app inside the F string, but, you know, it gives you more flexibility.

00:04:59 So there it is.

00:05:00 I am super psyched about 648, which is a unique per interpreter Gil, Eric Snow.

00:05:07 Man, you've been on this for a while.

00:05:09 Congratulations on that.

00:05:10 This is out.

00:05:10 So this has mega possibilities to unlocking multi-threaded performance in Python.

00:05:18 Don't know that it's actually has anything to do with threads yet.

00:05:24 I think it's way more manual and maybe even just at the C level.

00:05:27 Yeah.

00:05:28 It said that the PEP says it's at the C API right now.

00:05:32 3.13 might have a Python API access to it.

00:05:37 Yeah.

00:05:38 I mean, what I would love is like, I'm going to create a thread and I'll pass a flag that says, use your own Gil.

00:05:45 Yeah.

00:05:46 Or I'm going to create a thread pool executor and say for every thread that you create, get a new Gil.

00:05:53 That means full on parallelism in Python.

00:05:57 I mean, I'm sitting here on my.

00:06:00 Well, what we're talking about then is, is basically forking off a new interpreter from Python.

00:06:06 Yes.

00:06:07 In a sense, but without a new process.

00:06:10 Okay.

00:06:11 Right.

00:06:11 Yeah.

00:06:12 So.

00:06:13 Why not?

00:06:15 You can't, I don't believe you can share.

00:06:17 Maybe you can share data directly.

00:06:20 I don't, I don't think, I don't think you can share it directly because it would have to share the Gil.

00:06:24 So I think you've got to like serialize the data over, but you can get better performance if you don't have to start a bunch of processes.

00:06:31 Yeah.

00:06:31 Potentially.

00:06:32 And do some message passing.

00:06:33 But you know, here on my M2 pro mini, I have 10 cores and all the Python I want to write.

00:06:39 I'm only going to ever be able to do one cores worth of work for computational things.

00:06:44 Unless I go crazy with like the no Gil Cython or write some C code or, you know, things like that.

00:06:51 Right.

00:06:51 So this, this has the possibility to take advantage of, of, you know, modern hardware, right?

00:06:56 Very exciting.

00:06:57 Low impact monitoring.

00:06:59 So if you want to like hook into events, for like profiling, debugging type of stuff, you can do that with less.

00:07:07 Heisen bug effects.

00:07:10 And also one of the big things that came in 3.11 was, did you mean type of recommendations for, we couldn't import request.

00:07:19 Did you mean requests plural?

00:07:21 Things like that.

00:07:23 Right.

00:07:23 And so that's further improved.

00:07:25 There's a buffer protocol, which allows direct access to memory of things like byte arrays and other low level items that you don't have to like go through the Python level.

00:07:35 You just go, give me the direct access to the memory.

00:07:39 That's kind of cool.

00:07:40 Nice.

00:07:40 Good to embed it.

00:07:41 You can have, yeah, I bet path, path, path, path, path, path, path.

00:07:45 It can be subclassed.

00:07:47 That's kind of cool.

00:07:48 Hey, OS module gets windows things.

00:07:51 That's nice.

00:07:51 Let's see.

00:07:53 There's a command line interface that adds a SQLite three module.

00:07:58 So, you know, you can do like Python dash M HTTP server or something along those lines.

00:08:02 You can do that for SQLite now as well, which is kind of neat.

00:08:07 Yeah, this is exciting.

00:08:08 Async IO has some improvements with benchmarks showing up to a 75% speed improvement in certain areas.

00:08:15 I'm sure not generally, but yeah.

00:08:18 Bunch of other things.

00:08:19 There's also some security updates, some API.

00:08:23 There's performance improvements with comprehension inlining.

00:08:27 And there's a Linux performance profiler.

00:08:30 Yeah.

00:08:32 Bunch of different things.

00:08:34 And that's pretty much the highlights.

00:08:36 I mean, there's some binning, some culling of the standard library.

00:08:42 Like there was an async chat example implementation type of thing in the standard library.

00:08:50 So it's not anymore.

00:08:52 Good.

00:08:53 Yeah.

00:08:55 So that's not there.

00:08:57 But generally, you can look at some of the things that were deprecated or removed.

00:09:02 But yeah, that pretty much covers a few more type things.

00:09:05 And that's your new Python.

00:09:08 Awesome.

00:09:10 Are you excited?

00:09:11 How long till you switch to it?

00:09:13 I'm working on it right now, man.

00:09:15 Are you?

00:09:16 Yeah.

00:09:17 So, yeah.

00:09:19 Wait a sec.

00:09:20 I'm going to tell you a story.

00:09:25 Okay.

00:09:26 Okay.

00:09:26 Okay.

00:09:26 So yesterday, so I have been, I've been slowly becoming one of the, one of the maintainers for a plugin called pytest Repeat.

00:09:37 And it, so it hadn't been tested.

00:09:40 It hadn't, it had been tested up through 3.9, I believe.

00:09:44 So, so I wanted to, but it worked fine on the newer Pythons.

00:09:49 But I just wanted to make sure it was updated.

00:09:51 So I did some things like move the, move the, the continuous integration to GitHub Actions.

00:09:59 It was on Travis before.

00:10:02 So I moved it to GitHub Actions.

00:10:03 And so 3.12 is out.

00:10:04 I wanted to, to update the test to 3.12, right?

00:10:08 So this is using Tox.

00:10:10 And so I just went through and updated the Tox Any file to add 3.12.

00:10:19 I installed it on my machine.

00:10:21 What's the problem?

00:10:24 Ran it and created a new virtual environment, installed Tox, whatever, and ran it and it blew up.

00:10:30 Oh no.

00:10:32 Yeah.

00:10:32 It, what, what happened is I got this, Python attribute error module package util has no attribute importer.

00:10:42 Did you mean zip importer?

00:10:44 I'm like, I didn't mean any of that stuff.

00:10:45 So no idea.

00:10:48 so I'm like trying to figure this out.

00:10:51 Like clearly other people are releasing it 3.12.

00:10:55 They've surely have come up with this.

00:10:57 I dug through a long, I was researching a ton on this.

00:11:01 and, basically I thought there's something weird going on between pip and Tox and Python 3.12.

00:11:09 Cause I knew that the imp, imp, imp, importer thing was deprecated.

00:11:13 I don't know what it is, but I knew it was deprecated and it was taken out in 3.12, I think.

00:11:17 So it's not there.

00:11:20 and no, mostly you don't have to care about it.

00:11:23 except for I ran into this.

00:11:25 So what was happening?

00:11:26 I didn't know.

00:11:27 So I did come up with a fix though.

00:11:29 And I found out this morning what the, what really was going on.

00:11:32 So it's a long story, but I'll try to make it quick.

00:11:36 the fix I came up with was there was a, in, in, talks in a, you can say download equals true.

00:11:44 So when it creates a virtual environment, it creates the, it updates to the latest Pip.

00:11:50 So what was happening was, but without that I was using an older Pip, but I don't know.

00:11:56 I didn't know why, why was it using an older Pip?

00:11:58 that's the part where I didn't know why.

00:12:01 So this fixed it, but it's kind of a bandaid.

00:12:03 It's a little bit of an ugly bandaid.

00:12:05 So what's the real fix?

00:12:08 The real fix is, talks uses a package called virtual end.

00:12:13 So that's not the built-in V envy.

00:12:16 It's, it's the third party package, virtual end.

00:12:19 And virtual end has some cool features.

00:12:23 One of the things it does is it keeps a, a little cache of, third party packages to, to store, to load up.

00:12:32 And it doesn't update them all the time.

00:12:34 It does it like, I don't know, every 14 days or something like that.

00:12:38 It, it, it's a kind of a slow update thing and it makes things run faster because you don't have to keep downloading all the time.

00:12:45 But I had an old pip cached.

00:12:47 So the real fix was, I went through and I probably didn't have to do the reset, but I called virtual end with reset app data.

00:12:58 and then did an upgrade.

00:13:01 And I probably could have just done the upgrade upgrade embed wheels.

00:13:05 And it updated my pip cat cashed pip to the latest.

00:13:09 Anyway.

00:13:10 So I'm going to, I wrote this article about how I patched it.

00:13:14 I'm going to update it today to say, the real fix is to clean out your, your virtual end pip cash or virtual end of cash.

00:13:23 So yes, I'm working on updating to three 12.

00:13:28 So nice.

00:13:30 Also.

00:13:30 Yeah, that's cool.

00:13:31 Have to shout out to, Juergen.

00:13:33 I don't know how to pronounce his last name.

00:13:35 G M A C H.

00:13:36 Juergen helped me, to debug the problem today.

00:13:40 So that was awesome.

00:13:41 Excellent.

00:13:43 one more shout out.

00:13:44 Henry Schreiner says the buffer protocol that I described is not new, but the pure Python version of it.

00:13:51 312 is.

00:13:51 Oh, okay.

00:13:53 Excellent.

00:13:54 All right.

00:13:57 Over to you.

00:13:58 oh, I just did this.

00:14:01 do we want to, this, this, this is my, I thought that was just a follow up to my topic.

00:14:06 This is your topic.

00:14:06 Okay.

00:14:06 Excellent.

00:14:07 Yeah.

00:14:07 Yeah.

00:14:08 Cool.

00:14:08 All right.

00:14:09 Let's talk about the president by talking a bit about the past.

00:14:14 So very exciting news.

00:14:16 The, the Python developers survey results are out.

00:14:21 It's slightly confusing in that it says the Python developer survey, 2022 results.

00:14:27 Like, wait a minute.

00:14:28 It's September, 2023.

00:14:30 Is this last year's one or the, no, this is the one that just came out on the PSF blog.

00:14:36 They just on PyFound, they just announced like, these are finally put together, analyze a report from the 20, the end of 2022 is now out.

00:14:48 So very exciting.

00:14:49 And also new.

00:14:50 I did a video on YouTube actually, where I had a first reaction to it.

00:14:56 So this is an 18 and a half minute video.

00:14:58 I'll link to it.

00:14:58 You can check it out if you want to go deep.

00:15:00 And because this video exists, we'll just kind of skim it, Brian.

00:15:03 We won't go over too much of it, but I basically didn't open up or read the survey results until I hit record for this video.

00:15:11 And then I just dove into it.

00:15:12 So that's fun.

00:15:12 People can, can check that out if they want, but let's see.

00:15:15 We can hit some of the highlights.

00:15:18 general Python usage, 85% of the people who Python, Python primarily that way.

00:15:23 So it's not like a second language, you know, but it's mainly what they do, which is pretty cool.

00:15:29 There's a lot of these that add to over a hundred.

00:15:31 So, take it for what it is.

00:15:34 There's also like a little gray, like a light gray and a dark gray, I don't know word or legend.

00:15:46 And that will, they often overlay these things to show them side by side.

00:15:50 So for example, it says Python usage with what other language, like if you're not, if you're going to use another language, what do you also use?

00:15:56 In addition to Python, primarily being Python being the main language.

00:16:00 And it has like, this one is the prior year and this year again, with the offset by one a little bit.

00:16:06 So guess what the top three are?

00:16:09 JavaScript, HTML and CSS.

00:16:11 Are those languages?

00:16:12 No, no.

00:16:14 Can you make it?

00:16:15 Here's a rule for what is a language in my mind?

00:16:18 Probably.

00:16:19 Can I make a thing that runs on its own from that set of syntax?

00:16:23 JavaScript.

00:16:24 Yes.

00:16:24 C++.

00:16:25 Yes.

00:16:26 Java.

00:16:26 Yes.

00:16:26 Type script.

00:16:27 Yes.

00:16:28 CSS.

00:16:28 No.

00:16:29 But nonetheless, the reason I make that distinction is it's like, it's a, it's, I feel like it's a trade off of like, I do Java or I do Python or I could choose one or the other, but they're not.

00:16:43 If it's not interchangeable, I'm not sure.

00:16:45 I don't know.

00:16:45 It's somewhat interesting, but.

00:16:46 I'm, I'm on the fence.

00:16:49 It's, they've got, they're both complicated enough that I think it takes training to learn it.

00:16:55 So when, I mean, I wouldn't think, I wouldn't think of like any files as a language, but so they're a lot, they're a lot more complex than any file or something.

00:17:04 True.

00:17:05 All right.

00:17:06 So I think I go on that every year.

00:17:08 So the top, top three languages used along with Python, three of the four, cause there's a combo.

00:17:17 I don't know.

00:17:19 I would really call it separate language, but anyway, JavaScript, HTML, CSS combined and SQL.

00:17:24 And those basically that block tells you, guess what people build web apps with Python, right?

00:17:30 That's what it says here.

00:17:32 And web apps are often five, six, seven different languages, which is partly why the web is hard.

00:17:39 Right.

00:17:39 But there's that.

00:17:41 And then a bash and shell.

00:17:44 I mean, that kind of speaks to the DevOps automation side of things.

00:17:47 And then CC++ Brian, you're kind of down in that realm.

00:17:51 Right.

00:17:51 Yeah.

00:17:51 That's most of the half my time.

00:17:53 And that's interesting that that's that large still.

00:17:56 So that's cool.

00:17:57 Yeah.

00:17:58 I think another thing you would want to consider here, if you like, look at this is a TypeScript

00:18:02 and JavaScript.

00:18:03 Those should be the same.

00:18:05 If you say HTML slash JS, HTML slash CSS, you should say JavaScript slash TypeScript, which

00:18:12 bumps that up even higher.

00:18:14 Right.

00:18:15 Because TypeScript is just like a better JavaScript.

00:18:18 All right.

00:18:19 Let's go.

00:18:20 If you're going to do data science, most people use SQL as their first language that they're

00:18:26 going to do.

00:18:26 And yeah, that's interesting.

00:18:28 Let's see.

00:18:30 Some of these things are about like, how do you do work?

00:18:33 I think it's interesting.

00:18:35 This one here.

00:18:36 What do you use Python for the most?

00:18:38 Web development.

00:18:39 Number one, data analysis and machine learning, which is kind of like the data science block.

00:18:45 And then other whole bunch of other.

00:18:49 And I think I kind of think of Python as having a one third, one third, one third kind of partitioning

00:18:57 where the web development, API development stuff, service functions, all those things live in one

00:19:06 third, and then data science lives in another third.

00:19:08 And then there's like the catch all block of everything else.

00:19:12 So this kind of says that maybe the web development side is a little smaller, but the random section is a little bit bigger.

00:19:21 But roughly, I think that's a good rule of thumb.

00:19:23 Yeah.

00:19:25 Yeah.

00:19:26 And I think finally, legacy Python has been vanquished.

00:19:34 It's been vanquished for three years now.

00:19:37 Python three versus Python two.

00:19:39 Basically, it's Python three.

00:19:43 That's like 94, 95%.

00:19:45 Ironically, it went down a little bit.

00:19:49 Python two made a bit of a comeback this year.

00:19:51 Just barely.

00:19:52 That's interesting.

00:19:52 It's probably within the variability of the number of people and the type of people that responded to the survey more than it is a real trend.

00:20:01 It's probably like, you know, plus or minus one or two, like plus or minus one would account for that just to be flat.

00:20:06 Yeah, that's true.

00:20:07 Anyway, it's like 95%.

00:20:10 And that last 5%, they're never changing.

00:20:14 You know what I mean?

00:20:17 That's like the 2 million lines of Python two.

00:20:19 It runs the trading system.

00:20:22 You don't touch it.

00:20:23 Like that kind of thing, right?

00:20:24 Well, yeah.

00:20:25 And I know some people that have frameworks built up on top with an embedded Python interpreter that it has Python two inside of it.

00:20:33 And you'd have to completely change the whole architecture to rip it out and put three in there, which I say just throw the whole thing away and start over.

00:20:43 But anyway, I know that.

00:20:47 I'm going to do the big rewrite.

00:20:48 I'm going to do the big rewrite.

00:20:49 That's actually an incredible joke.

00:20:52 It's not a joke.

00:20:53 It's a parody video.

00:20:54 It's like a music video song.

00:20:57 I'm going to do the big rewrite.

00:20:58 Maybe I'll put it in the show notes.

00:20:59 It's not the joke for this week, but boy, it should be.

00:21:01 It's good.

00:21:02 All right.

00:21:05 Let's see.

00:21:05 I think that's...

00:21:08 I'll probably leave it at that.

00:21:10 I'll let people look through here, but like you mentioned, virtual EMV, that's number one there.

00:21:14 What do you want to cover?

00:21:15 Unit testing frameworks.

00:21:16 Oh, is that a question here?

00:21:19 Let's see.

00:21:20 Just kidding.

00:21:21 So, yeah, 51% by test.

00:21:26 Yay!

00:21:26 Coming in second, 35% none.

00:21:30 This is a problem, people.

00:21:32 Yeah.

00:21:36 The second most popular framework.

00:21:38 Is none.

00:21:39 The third is unit test.

00:21:40 Is to not ask the question.

00:21:40 And I think unit test is largely there because you don't want dependencies, right?

00:21:47 If you've got a whole bit of code that's only standard library, and you want to have a couple tests for it,

00:21:53 that makes a lot of sense to just not add a dependency potentially.

00:21:56 Well, so, and I also got to talk with the JetBrains and PSF and have them change this question because unit testing framework,

00:22:04 I think you mean automated testing framework.

00:22:07 because it might not be a unit test and people get confused by that maybe.

00:22:12 I don't know.

00:22:14 Yeah, potentially.

00:22:15 All right.

00:22:20 Okay.

00:22:21 Okay.

00:22:21 So what's next?

00:22:22 I'm just-

00:22:24 There's some interesting comments out in the live chat here about like-

00:22:27 Oh, yeah.

00:22:28 We'll not be in a build system.

00:22:29 Tox is not a unit testing framework.

00:22:32 Yeah.

00:22:32 Yeah.

00:22:33 Yeah.

00:22:33 Yeah.

00:22:33 Does Turing complete make CSS a language?

00:22:38 Is CSS Turing complete?

00:22:41 If it is, then yeah, totally.

00:22:44 I think it does.

00:22:45 But I don't remember what Turing means anymore.

00:22:48 specifically.

00:22:51 I mean, I kind of do it.

00:22:52 Yeah.

00:22:53 Yeah.

00:22:53 My rule of thumb is, can I make a thing that runs with that?

00:22:58 I don't know.

00:23:00 But that's the Michael rule.

00:23:03 The Michael rule.

00:23:04 But anyway.

00:23:04 Yeah.

00:23:05 On to the next one for you.

00:23:07 The next is brought to us by Henry Schreiner, who is in the audience.

00:23:11 Hey, Henry.

00:23:12 Thanks for putting this together and also letting us know about it.

00:23:16 So, we've got the scientific Python development guide.

00:23:20 This is a, this is a big guy.

00:23:23 So this is really cool, actually.

00:23:25 So this is, I'm, we're going to post both the announcement post and a link

00:23:31 to the, the guide, but it's both the same place, blog scientific python.org.

00:23:37 And then there's a learn scientific python.org.

00:23:41 So this is, pretty awesome.

00:23:44 It's very comprehensive too.

00:23:46 So this may have, this must've taken a while to put together.

00:23:49 So you've got, basically like, how to use, how to develop in Python, for scientific

00:23:55 people.

00:23:56 and it's pretty comprehensive.

00:23:57 I, didn't go through too much, but I was like, let's look at some of the tutorials

00:24:02 to see what we got and, intro to development.

00:24:05 That's nice.

00:24:06 I was curious what they were doing for packaging because it's kind of one of those things I

00:24:11 follow.

00:24:12 and, the packaging tutorial is pretty great.

00:24:18 it touches on a whole bunch of stuff.

00:24:21 some, at first it's just talking about how to use package, how to use Python packages,

00:24:26 but then it, it's got a packaging guide, where, there's two forms of packaging.

00:24:32 You've got simple packaging and I'm glad they split this up because they, if you just have

00:24:36 a bunch of Python stuff, you're sharing, you just need simple packaging goes through hatchling,

00:24:41 flit core PDM backend, which I haven't played with, but set up tools.

00:24:45 I've used, three of the four so far.

00:24:47 and, and I like that it highlighted that, really, if you click through all of the project table stuff

00:24:56 just stays the same.

00:24:57 and mostly what changes is you just change the build system, settings.

00:25:02 Pretty awesome.

00:25:03 and then, but for scientific, you kind of have some complicated stuff too.

00:25:09 So this is great.

00:25:10 You've, we've got descriptions on how to, how to do packaged Python packages with C plus

00:25:17 plus and Fortran and C and, there's CMake, there's Mason and our rust with cargo,

00:25:26 with mature in, and then ends in scones.

00:25:29 I haven't played with that, but a really great stuff.

00:25:33 And then it even, it talks about classic packaging, but don't do that.

00:25:37 Stick with the compiled packaging or simple packaging.

00:25:40 That's, that's what you want.

00:25:41 this is a great writeup.

00:25:42 So thanks Henry.

00:25:43 And probably lots of other people, working in this too.

00:25:47 But if you wrote it, if you wrote it all yourself, I'm pretty impressed.

00:25:49 But anyway, pretty cool.

00:25:51 Yeah, that's a good one.

00:25:55 Then this time.

00:25:56 Learning how to package up these, your packages is really cool.

00:25:59 Also, you know, doing things like entry points.

00:26:02 So you basically, once you pipX install something, it becomes a command line.

00:26:06 Oh yeah.

00:26:07 Capability is really awesome as well.

00:26:10 There's a lot of neat things about packaging that I think not everyone is like, well, I don't

00:26:14 want to put it into PyPI and have it open source.

00:26:17 Oh, maybe there's other interesting aspects still sharing it internally.

00:26:20 Nice.

00:26:22 I hadn't checked out.

00:26:23 this is kind of daring to do it on live, but I checked out the test, section and

00:26:28 yay.

00:26:29 They talk about pytest.

00:26:30 So cool.

00:26:31 I don't check with their pytest guys, but good job guys.

00:26:34 Just suggest none.

00:26:35 None.

00:26:35 The none from none.

00:26:36 We suggest not testing.

00:26:38 Yeah.

00:26:39 So the world's simplest way to write tests.

00:26:43 No.

00:26:44 Yeah.

00:26:44 Oh, what about extras?

00:26:47 You feel an extra?

00:26:49 I am feeling extra.

00:26:51 do you want me to cover mine while I'm already up?

00:26:54 Yeah, go for it.

00:26:55 just to just, I was going to like do this extra attribute thing as an extra, but decided

00:27:00 to just run with it.

00:27:01 the, quick extra is, I'm continuing to work on the course.

00:27:07 Chapter eight is up configuration files.

00:27:10 It's a short one, but please don't skip it.

00:27:12 It's it will mess you up if you don't understand this.

00:27:15 So just a few minutes to cover, cover some configuration.

00:27:18 and one of the questions I always get is what are the dundra net files mean within

00:27:25 a, in the test directory.

00:27:28 And I'm going to keep it a secret.

00:27:31 You got to watch the course.

00:27:32 but it's, it's, it's, it's, they're good things.

00:27:35 And you're making good progress on this.

00:27:37 I am.

00:27:38 And it's a blast.

00:27:39 And I'm getting great feedback from people.

00:27:41 Some, some people from, PyBytes, are, reviewing it and giving me feedback.

00:27:46 Some people from JetBrains.

00:27:48 it's been, it's been a really good, good community there.

00:27:51 So cool.

00:27:53 How about extras from you?

00:27:54 Well, I have some Mastodon extras and I came across Mona M O N A app, which is a really cool,

00:28:05 really cool client for Mastodon.

00:28:09 I believe this is Mac only.

00:28:11 optimized for voiced over optimized for Mac native design, iPhone, iPad, and Mac.

00:28:19 So sorry for people not on that one, but if you're on these, this is really, really nice.

00:28:23 I tried ivory.

00:28:24 I know you and I spoke about it like a couple of weeks ago, maybe off air, but ivory drives

00:28:29 me crazy.

00:28:29 It's like the big recommendation everyone has.

00:28:31 And this is super nice.

00:28:32 It has a free version or you can pay like $15 once forever.

00:28:37 And then you have it, which is kind of nice.

00:28:39 So people can check that out.

00:28:41 I think I'm going to move to that.

00:28:42 Another thing that we talked about the other day, Brian is, why are these like weird

00:28:47 domains so expensive, right?

00:28:49 Like we have Python bytes.fm and to renew Python bytes out of is $170 a year.

00:28:54 I'm like, why, why don't we just go with.com?

00:28:57 Like what were we thinking?

00:28:57 Come on people should have just done.com.

00:28:59 But you know, when we came up with Python bytes and we started it, the.fm was all the rage

00:29:04 for all the, all the podcasts.

00:29:05 So, there it is.

00:29:07 And it's not a huge deal, but like we were talking about, where does that money go?

00:29:13 And the biggest winner of these is the.ai, right?

00:29:18 There's so many.ai domains these days, right?

00:29:21 With all the AI startups.

00:29:23 And it turns out that the island of in Anguilla is a tiny British territory with around 16,000

00:29:33 inhabitants, but its domain name is.ai.

00:29:37 And so the software developer who manages the domain told Bloomberg, it could generate $30

00:29:43 million for this 10% of the GDP of this tiny island because of the.ai domain.

00:29:49 Anyway, I just thought, I thought that was interesting.

00:29:52 And I just throw this in as an extra.

00:29:54 What's the.fm?

00:29:55 Do you know?

00:29:56 I don't know.

00:29:58 Actually, that's a really good question.

00:29:59 Okay.

00:30:02 On to the next one.

00:30:03 yeah.

00:30:05 Vivaldi.

00:30:06 We're both Vivaldi fans.

00:30:07 And I really like a lot of things about Vivaldi.

00:30:10 It got a lot faster on the desktop recently, which is super cool.

00:30:14 So now it's super, super fast.

00:30:16 Not the kind of thing you can demonstrate well over screen sharing.

00:30:19 Cause the latency of the screen sharing outweighs the.

00:30:23 Yeah.

00:30:23 That, but it has not been on iOS.

00:30:27 And now finally, finally, finally it is out on iOS.

00:30:30 How exciting.

00:30:31 Yeah.

00:30:32 I've just downloaded it recently.

00:30:34 I'm loving it.

00:30:35 Yeah.

00:30:36 So five days ago it came out.

00:30:38 I've had it on my Android phone and I'm just like, oh, why don't I have this on my iPhone?

00:30:43 This is in my, in my iPad.

00:30:44 It makes me sad.

00:30:45 And I know people say, Michael, Apple's evil.

00:30:49 This is really just web kit wrapped in a Vivaldi shell.

00:30:54 And yes, I know.

00:30:56 I know.

00:30:56 Thank you for letting me know again.

00:30:57 I know that.

00:30:58 Is it?

00:30:59 However, it's still really nice that if I open up Vivaldi, I could say, carry on where

00:31:05 I was on my other machine.

00:31:06 Show me the history from my Mac or from my windows machine or from my other, right?

00:31:11 The synchronizing is awesome.

00:31:13 And the ad blocking is like next level.

00:31:17 So if you go over here and you go to the ad blocking section, you can say block.

00:31:22 Trackers and ads.

00:31:23 Yes.

00:31:24 That's cool.

00:31:24 But you can actually go through.

00:31:26 And check off a whole bunch of additional sources for tracking and blocking.

00:31:31 So you can say, I want the easy list and I want ads from, allow action partners.

00:31:35 You can uncheck that if you want.

00:31:37 You want the ABP anti circum, circumvention list and a whole bunch of others.

00:31:42 And you can even add, if you run like a pie hole, you can even add your own blocking list

00:31:46 or ads and stuff.

00:31:49 So like super, super cool sync plus ad blocking.

00:31:53 I know it's web kid.

00:31:54 I wish it weren't, but you know, it's better than not.

00:31:58 So there it is.

00:31:59 Yeah.

00:32:01 but I mean, it isn't really, I'm, I'm not, I don't really care what the,

00:32:07 maybe I should, but I don't really care what the rendering engine is and all that stuff.

00:32:10 It's the who's, who's taking the data and sharing it with who is the part that I really care about.

00:32:15 Yeah.

00:32:16 I, of course.

00:32:17 And this, this checks that box, right?

00:32:19 Yeah.

00:32:19 I do hate when you go to a place and goes, you need to have Chrome to have the best experience.

00:32:24 You're like, there's no way I can have Chrome on this device.

00:32:27 You know what I mean?

00:32:28 I have a, I, brought in a guy to interview once because I was intrigued that his

00:32:34 website said, his personal website said best if viewed with Netscape Navigator.

00:32:39 And that's awesome.

00:32:41 Oh, I love it.

00:32:41 so I love that little, and it even had like the animated little globe thing

00:32:50 that was going on.

00:32:50 Oh yeah.

00:32:51 The little, like the little, like a ship's Jane.

00:32:53 Well, I remember that.

00:32:54 Yeah.

00:32:55 Oh my God.

00:32:55 Those were good.

00:32:55 Yeah.

00:32:56 It was great.

00:32:57 Yeah.

00:32:58 David out in the audience says federated States of Micronesia.

00:33:03 Apparently that's what.

00:33:04 FM is.

00:33:05 Yes, exactly.

00:33:06 Nice.

00:33:07 Thanks, David.

00:33:08 I love having guests here helping us out.

00:33:12 I know it's awesome.

00:33:13 Our audience is excellent.

00:33:14 All right.

00:33:16 You ready for a joke?

00:33:17 Those are all my extras.

00:33:18 I am ready for a joke.

00:33:19 All right.

00:33:21 Let me set the stage.

00:33:22 So there was the JFK speech, right?

00:33:26 About going to the moon in the early sixties.

00:33:28 And it was like, you know, Sir Edmund Hillary was asked, why did he climb Everest?

00:33:35 He said it because it was there and the moon is there and the stars are there.

00:33:40 We're going to climb it.

00:33:41 Not because it is easy, but because it is hard.

00:33:44 Right?

00:33:44 Like that.

00:33:45 Something like that.

00:33:46 Yeah.

00:33:46 Yeah.

00:33:46 I'll do that again.

00:33:47 That was fun.

00:33:48 No.

00:33:49 We do these.

00:33:51 We choose to do these things and the others, not because they're easy, but because they're

00:33:55 hard.

00:33:55 No, the joke is, this is the software one.

00:33:57 We do this not because it is easy, but because we thought it would be easy.

00:34:01 Exactly.

00:34:02 Dang it.

00:34:05 Why is it still three months and we're rewriting this section?

00:34:07 It was supposed to take a week.

00:34:09 What a bad idea.

00:34:11 Do this not because it's easy, but because we thought it'd be easy.

00:34:16 Yeah.

00:34:18 Okay.

00:34:19 So David shares with us, there's the old school.am domain for Armenia.am instead of FM.

00:34:27 Should we get, should we retire the FM and go like talk radio AM?

00:34:31 We could put like a phonography type of filter on our voices and make it sound like staticky

00:34:36 and tinny.

00:34:38 Would it be great is to, yeah, do a filter and have like both, have the AM and FM versions

00:34:43 and have it sound like it's going through any speaker.

00:34:47 simulate going through a tunnel and have it get like real staticky and then come back just

00:34:52 periodically.

00:34:52 Right.

00:34:53 Why not?

00:34:53 Yeah.

00:34:54 It filter the high end and low end.

00:34:57 So there's just like the mid range and that's it.

00:34:59 Mm-hmm.

00:34:59 So.

00:35:00 I love it.

00:35:01 I love it.

00:35:02 Because with the AM, you have to have the bad car speakers also.

00:35:06 Oh yeah.

00:35:07 Anyway.

00:35:07 Nice.

00:35:10 Cool.

00:35:11 Well, thanks again for a wonderful episode.

