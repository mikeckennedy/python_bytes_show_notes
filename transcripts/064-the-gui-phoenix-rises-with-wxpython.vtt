
00:00:00.000 --> 00:00:05.600
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.600 --> 00:00:11.280
This is episode 64 recorded February 7th, 2018. I'm Michael Kennedy.


00:00:11.280 --> 00:00:12.160
And I'm Brian Okken.


00:00:12.160 --> 00:00:16.720
And we're excited to be here with you today. We have a ton of good stuff that we've uncovered


00:00:16.720 --> 00:00:20.960
to share. Very exciting. Before we get to that, though, I just want to say thank you to DigitalOcean.


00:00:20.960 --> 00:00:26.800
Check them out at do.co/python. There's some really awesome news from them and I'll share


00:00:26.800 --> 00:00:28.040
share that with you in a little bit.


00:00:28.040 --> 00:00:30.600
But right now, I'm kind of in love with this project


00:00:30.600 --> 00:00:32.000
that you picked right now, Brian.


00:00:32.000 --> 00:00:32.840
Tell me about it.


00:00:32.840 --> 00:00:34.440
- Well, it's WXPython.


00:00:34.440 --> 00:00:35.720
We've heard of this before,


00:00:35.720 --> 00:00:39.320
but when we've been talking about GUI development


00:00:39.320 --> 00:00:41.920
and desktop development lately,


00:00:41.920 --> 00:00:45.280
and the WXPython folks contacted us and said,


00:00:45.280 --> 00:00:47.320
"Hey, we are Python 3,


00:00:47.320 --> 00:00:52.160
"and version 4, code name Phoenix, is alive and usable."


00:00:52.160 --> 00:00:54.760
- That is really cool, because WXPython,


00:00:54.760 --> 00:00:56.220
there had been a really old version,


00:00:56.220 --> 00:00:59.660
And I mean, I think we all can see what Phoenix means


00:00:59.660 --> 00:01:00.860
in terms of a project, right?


00:01:00.860 --> 00:01:04.400
It's sort of reborn in this new modern Python 3 UI.


00:01:04.400 --> 00:01:05.240
Very exciting.


00:01:05.240 --> 00:01:08.140
- The underlying WX toolkit had been,


00:01:08.140 --> 00:01:10.020
it also underwent a change


00:01:10.020 --> 00:01:13.740
and the WX widgets project has been updated.


00:01:13.740 --> 00:01:17.300
And then the WX Python on top of all that has been updated.


00:01:17.300 --> 00:01:20.620
And it's something that I think I've developed


00:01:20.620 --> 00:01:23.540
with years ago and sort of discounted


00:01:23.540 --> 00:01:26.540
because it had an old look, but now it looks nice


00:01:26.540 --> 00:01:27.860
and people should check it out.


00:01:27.860 --> 00:01:31.020
- Yeah, that was one of my two major, major complaints,


00:01:31.020 --> 00:01:33.320
maybe one of three, about the Python GUI stuff.


00:01:33.320 --> 00:01:35.040
And obviously we're still on this kick


00:01:35.040 --> 00:01:37.080
and I think it's a good one actually.


00:01:37.080 --> 00:01:41.640
But the fact that a lot of these UI toolkits


00:01:41.640 --> 00:01:45.520
look like they've jumped in Marty McFly's car


00:01:45.520 --> 00:01:48.040
and like been transported from the early 90s


00:01:48.040 --> 00:01:51.040
into your computer and they got this old fashioned


00:01:51.040 --> 00:01:52.880
sort of look, they just looked out of place, right?


00:01:52.880 --> 00:01:55.480
And so the WX Python stuff looks really modern.


00:01:55.480 --> 00:01:59.280
It looks like it belongs on a lot of the platforms, at least Mac, Windows and Linux that I've


00:01:59.280 --> 00:02:00.280
been playing with lately.


00:02:00.280 --> 00:02:02.820
So I'm really happy to see this coming along.


00:02:02.820 --> 00:02:08.080
The other one, of course, I would love that like visual designer sort of tooling in there.


00:02:08.080 --> 00:02:11.720
But you know, I'm happy with this thing is coming along has been re-released.


00:02:11.720 --> 00:02:12.720
That's awesome.


00:02:12.720 --> 00:02:16.600
On their startup page, there's a there's a like a, you know, after you do all the downloads


00:02:16.600 --> 00:02:20.400
for it, there's a five line application that you can use to try it out.


00:02:20.400 --> 00:02:22.240
And that's pretty slick.


00:02:22.240 --> 00:02:25.240
it's fast to get something up and running.


00:02:25.240 --> 00:02:27.360
I tried it out yesterday, so it's good.


00:02:27.360 --> 00:02:28.480
- Very cool.


00:02:28.480 --> 00:02:31.040
So I have a little question,


00:02:31.040 --> 00:02:33.800
a little tech interview type question for you, Brian.


00:02:33.800 --> 00:02:38.720
Did you know that you can define a Python function


00:02:38.720 --> 00:02:40.760
and just put triple dots after it


00:02:40.760 --> 00:02:41.880
and just kind of say, you know,


00:02:41.880 --> 00:02:43.360
actually I don't want to define it?


00:02:43.360 --> 00:02:44.440
- I did not know that.


00:02:44.440 --> 00:02:46.200
- I did not know that either.


00:02:46.200 --> 00:02:51.200
However, part of my experience of going to PyCascades


00:02:52.160 --> 00:02:56.080
was to meet Lucas who gave this amazing talk from,


00:02:56.080 --> 00:02:57.480
he's from Facebook and Instagram


00:02:57.480 --> 00:03:01.840
about how they're doing gradual typing in Python


00:03:01.840 --> 00:03:03.240
and how they're adding types


00:03:03.240 --> 00:03:06.360
to like the millions of lines of code at Facebook slowly.


00:03:06.360 --> 00:03:07.840
And this whole process they went through,


00:03:07.840 --> 00:03:08.760
it's super interesting.


00:03:08.760 --> 00:03:10.520
I'm having him already recorded,


00:03:10.520 --> 00:03:13.000
having going to have him sort of in real time


00:03:13.000 --> 00:03:16.120
for the way people experience it on Talk Python,


00:03:16.120 --> 00:03:16.940
talking about it.


00:03:16.940 --> 00:03:18.820
And one of the projects that came out of there


00:03:18.820 --> 00:03:21.280
that I thought was really interesting


00:03:21.280 --> 00:03:22.980
is this thing called typeshed.


00:03:22.980 --> 00:03:24.000
Have you heard of typeshed?


00:03:24.000 --> 00:03:24.840
- I have, yeah.


00:03:24.840 --> 00:03:27.160
- Yeah, so typeshed is this place


00:03:27.160 --> 00:03:30.680
that contains the external type annotations,


00:03:30.680 --> 00:03:32.940
basically the signatures for everything


00:03:32.940 --> 00:03:34.200
in the Python standard library.


00:03:34.200 --> 00:03:35.040
- Okay.


00:03:35.040 --> 00:03:36.880
- So you go in there and you'll find functions


00:03:36.880 --> 00:03:40.320
or classes with methods and whatnot.


00:03:40.320 --> 00:03:45.320
And you'll see stuff like def visit self common node colon AST


00:03:45.320 --> 00:03:48.080
this is like from the AST module.


00:03:48.080 --> 00:03:49.760
So it'll tell you the type and it says,


00:03:49.760 --> 00:03:54.760
arrow goes to any, for example, colon, and then just dot, dot, dot, and that's it.


00:03:54.760 --> 00:04:01.760
And this is a way in which you can define these external types in these PYI stubs.


00:04:01.760 --> 00:04:07.760
So it's like a normal Python file that Python can interpret, except for all the methods are empty.


00:04:07.760 --> 00:04:12.760
You know, there's a couple of annotations that talk about, sorry, a couple of peps that talk about the annotations


00:04:12.760 --> 00:04:14.760
and how this is working and so on.


00:04:14.760 --> 00:04:16.760
And these are just the annotations people know.


00:04:16.760 --> 00:04:24.260
But what's pretty interesting is that this is actually what mypy uses, like this get


00:04:24.260 --> 00:04:28.240
repository of what Python looks like in terms of types.


00:04:28.240 --> 00:04:34.740
This is what mypy uses, the static type checker, as well as this is what PyCharm uses to get


00:04:34.740 --> 00:04:36.260
all of its magic.


00:04:36.260 --> 00:04:40.300
So PyCharm is much better than many, many editors about going, "Oh, you know, if you


00:04:40.300 --> 00:04:45.400
call, like, what, right, you call some method on this other thing, it returns this other


00:04:45.400 --> 00:04:49.160
type and you hit dot and you can see all the autocomplete for me like where did that come


00:04:49.160 --> 00:04:51.220
from it came from typeset actually.


00:04:51.220 --> 00:04:52.960
So I thought this was pretty interesting.


00:04:52.960 --> 00:04:58.600
And the other thing that is really cool about this and it doesn't look like people are using


00:04:58.600 --> 00:05:00.200
it this way very much.


00:05:00.200 --> 00:05:05.160
So I'm, I'm putting this out there as a call to everyone who cares about Python three,


00:05:05.160 --> 00:05:11.440
who wants their library to be very rich with inside these various editors and type checkers


00:05:11.440 --> 00:05:15.600
to take a moment and document their packages signatures here.


00:05:15.600 --> 00:05:18.780
So there's a place to put third party packages


00:05:18.780 --> 00:05:22.360
like requests or flask or you know, you name it.


00:05:22.360 --> 00:05:25.160
If you run an open source project


00:05:25.160 --> 00:05:27.200
that has a package that people use,


00:05:27.200 --> 00:05:28.780
you can come over here and put yours in


00:05:28.780 --> 00:05:31.400
and then that will be picked up by all the other things.


00:05:31.400 --> 00:05:33.120
So it's pretty cool.


00:05:33.120 --> 00:05:34.120
- Okay, that's interesting.


00:05:34.120 --> 00:05:36.160
We're not sure how they avoid name collision on that.


00:05:36.160 --> 00:05:38.120
- They basically structure, there's a third party folder


00:05:38.120 --> 00:05:40.320
and then I think it's just the next subfolder


00:05:40.320 --> 00:05:44.440
the name of your package, which is unique on PyPI.


00:05:44.440 --> 00:05:45.440
Okay, yeah, right.


00:05:45.440 --> 00:05:47.080
So it's probably okay.


00:05:47.080 --> 00:05:48.800
I hadn't heard of typeshed.


00:05:48.800 --> 00:05:53.760
I knew that you could annotate your signatures and stuff, but I didn't know that there's


00:05:53.760 --> 00:05:57.160
this one place that's kind of being used as this common source.


00:05:57.160 --> 00:05:58.160
So I thought that was pretty cool.


00:05:58.160 --> 00:06:03.160
Yeah, and I'm curious about, so are these Python stub files, is that the only thing


00:06:03.160 --> 00:06:05.040
that they're used for, is type?


00:06:05.040 --> 00:06:06.040
I don't know.


00:06:06.040 --> 00:06:08.520
I had never heard of them before, but apparently...


00:06:08.520 --> 00:06:09.520
Interesting.


00:06:09.520 --> 00:06:27.940
Yeah, it's this new signature. It reminds me a little bit of what happened a few years ago with TypeScript, where I think it's called definitely typed, I can't remember where there's now this massive Git repository of all these external JavaScript libraries that want to interact with the typed version of JavaScript.


00:06:28.860 --> 00:06:41.860
And so they all have basically like there's this similar concept of just the signature descriptions without the implementation in this one giant Git repository. So this is kind of cool to see it happening in the Python space. Yeah, definitely. All right.


00:06:41.860 --> 00:06:47.860
One of the things I wanted to, I think that Ned Batchelder's coverage tool is super cool.


00:06:47.860 --> 00:06:55.380
The same caveats as normal is don't be too enticed with trying to search for a hundred percent code coverage in your tests


00:06:55.380 --> 00:06:58.280
But it's useful tool in its own otherwise


00:06:58.280 --> 00:07:07.020
anyway, but he coverage 4.5 just came out and he added just one new feature and this new feature is pretty darn cool


00:07:07.020 --> 00:07:09.020
It's the configurator plugins


00:07:09.020 --> 00:07:13.860
Feature which allows you you kind of have to read it a bit and get your head around it


00:07:13.860 --> 00:07:18.920
But the idea is there's a lot of people that have different configurations or different run


00:07:18.920 --> 00:07:21.660
configurations of their code and


00:07:21.660 --> 00:07:26.540
Some of the code is intentionally not supposed to run at certain times


00:07:26.540 --> 00:07:30.140
So it throws up honoring all these different like


00:07:30.140 --> 00:07:36.020
different requests from people to put new features in as this configurator plug-in feature so that you can


00:07:36.020 --> 00:07:40.900
do your own pragmas ahead of time you run a little bit of code before you run the rest of your code and


00:07:42.020 --> 00:07:47.060
You can comment out things as an example for instance on the in the pytest book


00:07:47.060 --> 00:07:49.460
I had an application that used both


00:07:49.460 --> 00:07:54.600
Two different used both tiny DB and Mongo DB as two different options


00:07:54.600 --> 00:08:01.340
So I would want to run my test on the whole thing using tiny and then also the whole thing using Mongo


00:08:01.340 --> 00:08:07.680
But I don't want to there's some of the code that's only for tiny and some of the code is only for Mongo


00:08:07.700 --> 00:08:12.960
So it doesn't make sense to run coverage on that those parts in those configurations.


00:08:12.960 --> 00:08:14.500
So that'd be a great use for that.


00:08:14.500 --> 00:08:15.700
Yeah, that's really cool.


00:08:15.700 --> 00:08:20.020
Because it's really easy to say, okay, we're at 80% coverage, we got to keep going, like,


00:08:20.020 --> 00:08:21.860
how do we get this higher, right?


00:08:21.860 --> 00:08:24.740
But there's some stuff that should just kind of be left alone.


00:08:24.740 --> 00:08:29.940
And this is a nice way to say, right now, you should not consider this bit of code,


00:08:29.940 --> 00:08:33.780
because who knows, maybe it's like some sort of little utility script that you're just


00:08:33.780 --> 00:08:37.060
throwing in, and you don't actually want it to be run as part of your package.


00:08:37.060 --> 00:08:40.720
knows. It's pretty cool. Yeah, so you know what else is pretty cool is the recent


00:08:40.720 --> 00:08:45.880
changes that the folks over at DigitalOcean just made. So they've always


00:08:45.880 --> 00:08:52.400
been the incredible affordable hosting and basic virtual server space. They've


00:08:52.400 --> 00:08:58.240
sort of made places like AWS react in like extreme ways to try to keep up with


00:08:58.240 --> 00:09:01.520
them. So that's pretty cool but they just recently more or less just doubled


00:09:01.520 --> 00:09:06.240
everything that you get for the price. So for like $5 you get a server


00:09:06.240 --> 00:09:09.160
worth a gig of RAM and 25 gigs of SSD.


00:09:09.160 --> 00:09:10.000
It's pretty sweet.


00:09:10.000 --> 00:09:11.520
And even includes a terabyte of transfer,


00:09:11.520 --> 00:09:12.920
which by the way, at AWS rates,


00:09:12.920 --> 00:09:15.680
that's $93 worth of bandwidth.


00:09:15.680 --> 00:09:18.280
$10, two gigs.


00:09:18.280 --> 00:09:20.680
If you pay like 20 bucks, you get four gigs,


00:09:20.680 --> 00:09:23.200
80 gigs of SSD, couple CPUs.


00:09:23.200 --> 00:09:25.160
It's just crazy some of the prices


00:09:25.160 --> 00:09:27.080
that they have now over here.


00:09:27.080 --> 00:09:29.800
So if you're looking to do sort of virtual server stuff


00:09:29.800 --> 00:09:31.400
or things like that,


00:09:31.400 --> 00:09:34.680
definitely check them out at do.co/python.


00:09:34.680 --> 00:09:36.360
they've got some really cool options now.


00:09:36.360 --> 00:09:37.200
- That's great.


00:09:37.200 --> 00:09:38.020
- Yeah, definitely.


00:09:38.020 --> 00:09:39.480
And thank you Digital Edition for supporting the show.


00:09:39.480 --> 00:09:41.720
It helps us keep going.


00:09:41.720 --> 00:09:43.040
So we've already talked about, Brian,


00:09:43.040 --> 00:09:46.360
the fact that neither of us are really into gaming, right?


00:09:46.360 --> 00:09:48.440
I've been playing a little bit of Formula One,


00:09:48.440 --> 00:09:49.560
you know, with like the steering wheel thing.


00:09:49.560 --> 00:09:50.640
That's kind of a fun simulation,


00:09:50.640 --> 00:09:53.800
but generally gaming, not so much with either of us.


00:09:53.800 --> 00:09:56.560
But I have some gaming news that is pretty interesting.


00:09:56.560 --> 00:09:58.680
It doesn't have to do with playing games.


00:09:58.680 --> 00:10:01.440
It has to do with the creation of games and 3D worlds.


00:10:01.440 --> 00:10:03.160
So you may know,


00:10:03.160 --> 00:10:04.760
I'm sure that you know personally,


00:10:04.760 --> 00:10:06.920
but people listening may know that Python


00:10:06.920 --> 00:10:10.520
is actually used quite a bit to automate and manage


00:10:10.520 --> 00:10:14.060
and sort of build the pipeline


00:10:14.060 --> 00:10:15.700
between all these different tools


00:10:15.700 --> 00:10:17.080
and all these different people


00:10:17.080 --> 00:10:20.320
at these massive game and movie companies, right?


00:10:20.320 --> 00:10:21.160
- Yeah, that's pretty cool.


00:10:21.160 --> 00:10:23.920
- Yeah, so if you've got to go from like Maya


00:10:23.920 --> 00:10:25.800
over to some other tool,


00:10:25.800 --> 00:10:28.280
or you've got these hundreds of gigs of files


00:10:28.280 --> 00:10:31.640
and they need to be transformed and processed and whatnot,


00:10:31.640 --> 00:10:34.360
That's a challenge and a lot of people have built


00:10:34.360 --> 00:10:36.160
sort of custom versions of that.


00:10:36.160 --> 00:10:39.300
So the big news here is that Unreal, the Unreal Engine,


00:10:39.300 --> 00:10:42.000
which is one of the most significant


00:10:42.000 --> 00:10:44.240
sort of 3D game engines there is,


00:10:44.240 --> 00:10:46.740
they're now integrating Python deeply


00:10:46.740 --> 00:10:49.120
into its sort of processing pipeline,


00:10:49.120 --> 00:10:50.780
not its necessary execution,


00:10:50.780 --> 00:10:54.280
but they plan to integrate Python


00:10:54.280 --> 00:10:56.640
into the Unreal Engine for data,


00:10:56.640 --> 00:10:58.280
basically for this data pipeline.


00:10:58.280 --> 00:10:59.120
- That's great.


00:10:59.120 --> 00:10:59.940
- Yeah, it's cool, right?


00:10:59.940 --> 00:11:00.880
So this is from Autodesk and they said,


00:11:00.880 --> 00:11:02.920
hey, we're gonna give you a glimpse of what we're doing.


00:11:02.920 --> 00:11:06.240
So maybe somebody's built like a model in 3D Max


00:11:06.240 --> 00:11:11.160
and it's like this super intense, ultra, ultra fine quality.


00:11:11.160 --> 00:11:13.400
You know, every single thing is modeled.


00:11:13.400 --> 00:11:15.320
The example I have in this article we're linking to


00:11:15.320 --> 00:11:17.560
is like, there's a motorcycle


00:11:17.560 --> 00:11:20.320
and the tires on the motorcycle have those little,


00:11:20.320 --> 00:11:21.600
like, you know, those little dots,


00:11:21.600 --> 00:11:23.600
those little sticky pieces of rubber


00:11:23.600 --> 00:11:25.840
that come out on like new tires,


00:11:25.840 --> 00:11:26.960
where they come out of the mold


00:11:26.960 --> 00:11:28.720
and they're still like sticking out.


00:11:28.720 --> 00:11:31.160
So they're like, we don't need that in the game, right?


00:11:31.160 --> 00:11:32.840
This is going to kill the performance


00:11:32.840 --> 00:11:34.960
if we actually put every little bit


00:11:34.960 --> 00:11:37.440
of these like knobby things and stuff


00:11:37.440 --> 00:11:40.140
into the model that ends up in the 3D


00:11:40.140 --> 00:11:41.440
in the Unreal Engine, right?


00:11:41.440 --> 00:11:44.280
So they're basically building this pipeline


00:11:44.280 --> 00:11:46.960
where you can say, in Python,


00:11:46.960 --> 00:11:48.440
why don't we just delete all the objects


00:11:48.440 --> 00:11:51.000
that are probably too small for people to notice anyway,


00:11:51.000 --> 00:11:52.640
and just do that automatically.


00:11:52.640 --> 00:11:54.720
Do level of details models,


00:11:54.720 --> 00:11:56.720
you can like merge objects together.


00:11:56.720 --> 00:11:58.440
you could say actually create a bunch


00:11:58.440 --> 00:12:00.640
of different motorcycles by automatically taking


00:12:00.640 --> 00:12:04.160
the source one and replacing the material that is,


00:12:04.160 --> 00:12:08.280
say, the fenders and the gas can and stuff


00:12:08.280 --> 00:12:09.980
to change it from, say, a light blue


00:12:09.980 --> 00:12:13.160
to a purple, shiny motorcycle.


00:12:13.160 --> 00:12:14.800
And so all of this is automatic.


00:12:14.800 --> 00:12:17.680
So once it's automatic, you can make a change


00:12:17.680 --> 00:12:18.720
at the beginning of the process


00:12:18.720 --> 00:12:20.520
and replicate this entire workflow,


00:12:20.520 --> 00:12:22.800
which is pretty cool, and it's awesome to see


00:12:22.800 --> 00:12:24.000
that Python's the choice for it.


00:12:24.000 --> 00:12:24.840
- Yeah, very cool.


00:12:24.840 --> 00:12:31.500
So just one more example of people using Python in ways that I had no idea existed. Yeah, yeah, pretty cool


00:12:31.500 --> 00:12:33.880
Good job on real. Yeah, good job and real and Autodesk


00:12:33.880 --> 00:12:37.040
And they're gonna have a brand new version of Python to work with pretty soon, aren't they?


00:12:37.040 --> 00:12:44.120
I think we mentioned Python 3 7 last week, but the Python 3 7 0 beta 1 is out and


00:12:44.120 --> 00:12:49.260
Because it's now beta instead of alpha that means the feature sets


00:12:49.260 --> 00:12:52.760
I think I might get this right the feature sets frozen and we're just


00:12:53.480 --> 00:12:56.480
tweaking it, making sure it's all tight and everything and tested.


00:12:56.480 --> 00:12:59.200
But beta means that there's beta testers.


00:12:59.200 --> 00:13:04.360
And I was just thinking, if it's not people like you and me in our community that listen to this,


00:13:04.360 --> 00:13:08.400
who is it? So I think we are, I'm just putting a call to action out there to


00:13:08.400 --> 00:13:11.760
go pick a few of the features that are coming up and


00:13:11.760 --> 00:13:15.960
take test things out, make sure it works in you and report bugs otherwise.


00:13:15.960 --> 00:13:18.240
Yeah, and there's definitely some cool features in there.


00:13:18.240 --> 00:13:20.760
Like we talked about data classes last week,


00:13:20.760 --> 00:13:23.760
that being in there, but there's actually a bunch of changes.


00:13:23.760 --> 00:13:26.760
And, you know, it's one of these things,


00:13:26.760 --> 00:13:30.760
speak now or forever hold your peace, it's going to come out in June.


00:13:30.760 --> 00:13:32.760
So here's your chance to test it.


00:13:32.760 --> 00:13:35.760
I was going to take a look at the breakpoint feature and the data classes


00:13:35.760 --> 00:13:38.760
and maybe a couple of the others and give it a whirl.


00:13:38.760 --> 00:13:42.760
Nice. So do you know if there's easy ways with things like talks and stuff


00:13:42.760 --> 00:13:44.760
to go ahead and run your tests on Python 3.7?


00:13:44.760 --> 00:13:46.760
Yeah, of course.


00:13:46.760 --> 00:13:51.560
you can set up 3.7 as one of the pythons to test everything.


00:13:51.560 --> 00:13:53.560
Yeah, that's one of the ways I'm going to test this.


00:13:53.560 --> 00:13:57.360
I've got to make sure that there's new versions of PyTest as well,


00:13:57.360 --> 00:14:00.360
and I want to make sure that all combinations of Python,


00:14:00.360 --> 00:14:03.360
all recent versions of Python and PyTest


00:14:03.360 --> 00:14:05.660
work with all the demo code I have in my book,


00:14:05.660 --> 00:14:07.960
and doing that manually is just too much work,


00:14:07.960 --> 00:14:09.460
so I'll use Tox for that.


00:14:09.460 --> 00:14:11.560
Yeah, that's a complete nightmare.


00:14:11.560 --> 00:14:12.660
Yeah, tell people really quick,


00:14:12.660 --> 00:14:14.860
I know some people know about Tox, but not everyone.


00:14:14.860 --> 00:14:17.580
Tell people what, like, where does Tox fit in?


00:14:17.580 --> 00:14:18.860
Because I thought you were a PyTest guy.


00:14:18.860 --> 00:14:20.380
What's up with this testing with Tox thing?


00:14:20.380 --> 00:14:26.380
Well, Tox is sort of like a top-level scripter thing,


00:14:26.380 --> 00:14:28.060
and I'm totally going to get it wrong.


00:14:28.060 --> 00:14:33.660
But the way I use it really is to pick multiple configurations to,


00:14:33.660 --> 00:14:37.980
you can have multiple combinations of different libraries together


00:14:37.980 --> 00:14:41.340
or configurations of your system and test them separately.


00:14:41.340 --> 00:14:42.140
Yeah, nice.


00:14:42.140 --> 00:14:50.440
So you could say test on pypi and cpython and multiple versions of either of those in a single test run, right?


00:14:50.440 --> 00:14:55.340
But the system will like configure sort of the interpreter or the runtime for that, right?


00:14:55.340 --> 00:15:00.440
It goes out and by default, you can turn off or on all these features, but by default it takes your,


00:15:00.440 --> 00:15:04.440
like let's say a package that is a Python package,


00:15:04.440 --> 00:15:09.840
and it runs its setup function to create an installable Python wheel, I think,


00:15:09.840 --> 00:15:12.340
and then it creates a virtual environment,


00:15:12.340 --> 00:15:16.240
installs your package and all of its dependencies,


00:15:16.240 --> 00:15:18.940
and then runs the tests on it, and then reports on that.


00:15:18.940 --> 00:15:20.440
And then it does it again for


00:15:20.440 --> 00:15:22.940
however many different configurations you've got set up.


00:15:22.940 --> 00:15:26.540
Alright, so for our final item, the one that I want to cover is


00:15:26.540 --> 00:15:29.640
similar, you were talking about a new release of Python coming out in beta.


00:15:29.640 --> 00:15:32.540
I want to just sort of hit a whole bunch of other things that were released


00:15:32.540 --> 00:15:35.140
that were pretty interesting on a couple levels.


00:15:35.140 --> 00:15:36.340
So first of all,


00:15:36.340 --> 00:15:39.340
I think some people use this web framework, it's called Django.


00:15:39.340 --> 00:15:40.340
What do you think, Brian?


00:15:40.340 --> 00:15:42.340
Yeah, quite a few.


00:15:42.340 --> 00:15:50.340
So they just announced that they had a security release to fix some issues in around authentication


00:15:50.340 --> 00:15:53.340
and basically the login infrastructure in Django.


00:15:53.340 --> 00:15:57.340
So if you're using 2 or 1.11, you may want to check that out.


00:15:57.340 --> 00:16:00.340
Right. So there's been like, you know, here's the testing thing.


00:16:00.340 --> 00:16:03.340
There's been a regression. There was a problem. It was fixed.


00:16:03.340 --> 00:16:06.340
And now it's unfixed. It's fun when problems unfix themselves.


00:16:06.340 --> 00:16:08.340
So the release is with the unfixed one?


00:16:08.340 --> 00:16:13.580
fixed one or this puts the fix back. Okay. And then two more


00:16:13.580 --> 00:16:17.620
around Python three, one is Python three, four, there's a


00:16:17.620 --> 00:16:20.860
security release there. And one is Python three, five, there's


00:16:20.860 --> 00:16:23.580
also a security release there. So respectively, the versions


00:16:23.580 --> 00:16:27.860
are 348 and 355. And there's apparently some problem with


00:16:27.860 --> 00:16:31.620
this internal bit called lib expat, as far as I tell us like


00:16:31.620 --> 00:16:33.820
an XML parsing library, and there's some kind of issue with


00:16:33.820 --> 00:16:37.540
that. That sounds not good. Like people could send you bad XML


00:16:37.540 --> 00:16:43.940
and bad things happen. So be aware and just a reminder to everyone and if anything like this


00:16:43.940 --> 00:16:48.260
happens in Python 2 shortly, there will be no fixes. You're just going to have to live with it


00:16:48.260 --> 00:16:56.100
after it goes end of life. So that's good that they're fixing these. I suspect, I don't know


00:16:56.100 --> 00:17:03.700
when 3.4 is gone. End of life, right? 3.3 I think is now out. Anyway, the final one I said at a lot


00:17:03.700 --> 00:17:08.180
of releases is channels. So these are Django channels are pretty interesting in that they


00:17:08.180 --> 00:17:14.500
add like an asynchronous way to write Django WebSocket and these types of things actually


00:17:14.500 --> 00:17:21.540
had the guy behind this on Python I linked to the interview there. But this is sort of a complete


00:17:21.540 --> 00:17:27.220
rewrite. This is channels to Oh, it's a major rewrite and most notably, Python two, seven,


00:17:28.020 --> 00:17:34.020
even Python 3.4 are no longer supported. They're fully legacy Python, they're out,


00:17:34.020 --> 00:17:38.740
it's 3.5 and above is all this works on. So I suspect some of that might have to do with Django


00:17:38.740 --> 00:17:43.860
2. But also it being this async thing, maybe they use the async and await keywords, and it just


00:17:43.860 --> 00:17:49.940
doesn't work in 3.4 or below. So but yeah, it's all pretty cool bunch of new releases. So if you're


00:17:49.940 --> 00:17:55.860
using these and want to check them out, do. That's it for our news this week, Brian, what items do


00:17:55.860 --> 00:18:00.820
you have to share? Well, I've got a couple exciting things. Yes, you do. I had submitted


00:18:00.820 --> 00:18:06.460
five talks to PyCon and one of them was accepted. Congratulations. That's awesome. It's a talk


00:18:06.460 --> 00:18:12.020
both. I'm going to do it together with Paul Everett from the PyCharm team. So it'll be


00:18:12.020 --> 00:18:16.780
PyCharm and PyTest. And that'll be fun. That's gonna be really, really fun. The two of us


00:18:16.780 --> 00:18:24.340
also are going to do a webinar coming up on the 22nd of February and a similar topic,


00:18:24.340 --> 00:18:25.420
a little bit more advanced.


00:18:25.420 --> 00:18:28.020
So we're gonna dive into how to productively


00:18:28.020 --> 00:18:30.140
and effectively use PyTest within PyCharm.


00:18:30.140 --> 00:18:31.440
- Oh, that is really cool.


00:18:31.440 --> 00:18:33.020
You know what I'm doing right now?


00:18:33.020 --> 00:18:34.780
I'm gonna register.


00:18:34.780 --> 00:18:37.060
After I'm done signing up, that'll be really fun.


00:18:37.060 --> 00:18:40.980
And then all these, of course, get recorded afterwards.


00:18:40.980 --> 00:18:44.340
Right, so it's typically an hour of Q&A, lots of fun.


00:18:44.340 --> 00:18:45.580
But if you can't make it live,


00:18:45.580 --> 00:18:46.820
you know you should still register


00:18:46.820 --> 00:18:48.700
because then you'll get a notice that,


00:18:48.700 --> 00:18:49.720
hey, the recording is out.


00:18:49.720 --> 00:18:51.880
And I suspect we'll let people know


00:18:51.880 --> 00:18:53.360
when your recording is out,


00:18:53.360 --> 00:18:56.640
like maybe this week I might let people know my recording is out?


00:18:56.640 --> 00:19:01.440
I registered for yours and I got a, I didn't watch it, but I got an email saying, "Hey, it's up."


00:19:01.440 --> 00:19:04.240
So I got to go, I started watching it this morning.


00:19:04.240 --> 00:19:08.720
Yeah, that's cool. So I did recently, I did a webcast with the PyCharm guys as well.


00:19:08.720 --> 00:19:12.560
Paul was sort of there as the emcee of the whole experience.


00:19:12.560 --> 00:19:18.240
And what I did in mind was I said, "Let's learn how to play with MongoDB from Python."


00:19:18.240 --> 00:19:24.800
And so let's take PyPI and recreate the data access layer of what PyPI might look like


00:19:24.800 --> 00:19:28.120
in a document database using Mongo and Mongo engine, stuff like that.


00:19:28.120 --> 00:19:29.200
It was lots of fun.


00:19:29.200 --> 00:19:32.060
So you can go check out that recording and we link to it in the show notes.


00:19:32.060 --> 00:19:35.400
And I suspect around February 30th, you might have a similar one.


00:19:35.400 --> 00:19:38.520
Just a small toy project there, recreate PyPI.


00:19:38.520 --> 00:19:40.880
And I'm a little disappointed because I used Faker.


00:19:40.880 --> 00:19:42.480
You know, we've talked about Faker before, right?


00:19:42.480 --> 00:19:43.960
Where you can like create fake data.


00:19:43.960 --> 00:19:44.960
Thing is glorious.


00:19:44.960 --> 00:19:47.520
It needs a few other features, which I'm actually,


00:19:47.520 --> 00:19:50.160
I'm thinking of doing some PRs for it to add them.


00:19:50.160 --> 00:19:55.160
But I created sort of 100,000 fake PyPI packages


00:19:55.160 --> 00:19:58.040
and they have kind of some kind of data.


00:19:58.040 --> 00:20:00.120
So now what I'm working on is a system


00:20:00.120 --> 00:20:03.400
that will let me entirely download every piece of data


00:20:03.400 --> 00:20:06.400
from PyPI and then model it in the database


00:20:06.400 --> 00:20:08.760
so that for other projects, like I'll have this,


00:20:08.760 --> 00:20:11.800
like basically corpus of all of PyPI.


00:20:11.800 --> 00:20:13.400
- Okay, so for the next few weeks,


00:20:13.400 --> 00:20:15.240
if PyPI is slow, it's your fault?


00:20:15.240 --> 00:20:16.960
- Yeah, you can blame me, I'm sorry about that.


00:20:16.960 --> 00:20:18.560
(laughing)


00:20:18.560 --> 00:20:20.920
Exactly, or I go over my bandwidth limit


00:20:20.920 --> 00:20:22.560
or something like that, yeah.


00:20:22.560 --> 00:20:24.760
- It was really interesting so far


00:20:24.760 --> 00:20:26.520
that I've gotten into it, so good job.


00:20:26.520 --> 00:20:27.840
- Yeah, cool, thanks.


00:20:27.840 --> 00:20:30.100
All right, well, that's it for this week.


00:20:30.100 --> 00:20:31.160
Thank you everyone for listening.


00:20:31.160 --> 00:20:33.040
Brian, thank you for sharing this with us.


00:20:33.040 --> 00:20:34.120
- All right, thank you.


00:20:34.120 --> 00:20:34.960
Talk to you next week.


00:20:34.960 --> 00:20:36.520
- Yep, bye.


00:20:36.520 --> 00:20:38.280
Thank you for listening to Python Bytes.


00:20:38.280 --> 00:20:40.760
Follow the show on Twitter via @PythonBytes.


00:20:40.760 --> 00:20:43.960
that's Python Bytes as in B-Y-T-E-S.


00:20:43.960 --> 00:20:47.320
And get the full show notes at pythonbytes.fm.


00:20:47.320 --> 00:20:48.960
If you have a news item you want featured,


00:20:48.960 --> 00:20:51.400
just visit pythonbytes.fm and send it our way.


00:20:51.400 --> 00:20:54.560
We're always on the lookout for sharing something cool.


00:20:54.560 --> 00:20:56.400
On behalf of myself and Brian Aukin,


00:20:56.400 --> 00:20:57.920
this is Michael Kennedy.


00:20:57.920 --> 00:20:59.940
Thank you for listening and sharing this podcast


00:20:59.940 --> 00:21:01.600
with your friends and colleagues.

