WEBVTT

00:00:00.001 --> 00:00:05.240
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.240 --> 00:00:09.960
This is episode 64, recorded February 7th, 2018.

00:00:09.960 --> 00:00:11.260
I'm Michael Kennedy.

00:00:11.260 --> 00:00:12.120
And I'm Brian Okken.

00:00:12.120 --> 00:00:13.880
And we're excited to be here with you today.

00:00:13.880 --> 00:00:17.200
We have a ton of good stuff that we've uncovered to share.

00:00:17.200 --> 00:00:17.780
Very exciting.

00:00:17.780 --> 00:00:21.000
Before we get to that, though, I just want to say thank you to DigitalOcean.

00:00:21.000 --> 00:00:23.900
Check them out at do.co slash Python.

00:00:23.900 --> 00:00:27.960
There's some really awesome news from them, and I'll share that with you in a little bit.

00:00:27.960 --> 00:00:31.880
But right now, I'm kind of in love with this project that you pick right now, Brian.

00:00:31.880 --> 00:00:32.520
Tell me about it.

00:00:32.520 --> 00:00:34.200
Well, it's WXPython.

00:00:34.200 --> 00:00:35.520
We've heard of this before.

00:00:35.520 --> 00:00:41.280
But when we've been talking about GUI development and desktop development lately,

00:00:41.280 --> 00:00:45.260
and the WXPython folks contacted us and said,

00:00:45.260 --> 00:00:51.920
Hey, we are Python 3, and version 4, codename Phoenix, is alive and usable.

00:00:51.920 --> 00:00:56.040
That is really cool because WXPython, there had been a really old version.

00:00:56.040 --> 00:01:00.780
And I think we all can see what Phoenix means in terms of a project, right?

00:01:00.780 --> 00:01:03.680
It's sort of reborn in this new modern Python 3 UI.

00:01:03.680 --> 00:01:04.920
Very exciting.

00:01:04.920 --> 00:01:09.920
The underlying WX toolkit had been, it also underwent a change,

00:01:09.920 --> 00:01:13.500
and the WXWidgets project has been updated.

00:01:13.500 --> 00:01:17.080
And then the WXPython on top of all that has been updated.

00:01:17.420 --> 00:01:21.420
And it's something that I think I've developed with years ago,

00:01:21.420 --> 00:01:24.520
and sort of discounted because it had an old look.

00:01:24.520 --> 00:01:27.740
But now it looks nice, and people should check it out.

00:01:27.740 --> 00:01:31.740
Yeah, that was one of my two major, major complaints, maybe one or three,

00:01:31.740 --> 00:01:33.220
about the Python GUI stuff.

00:01:33.220 --> 00:01:34.960
And obviously, we're still on this kick.

00:01:34.960 --> 00:01:36.280
And I think it's a good one, actually.

00:01:37.100 --> 00:01:45.400
But the fact that a lot of these UI toolkits look like they've jumped in Marty McFly's car

00:01:45.400 --> 00:01:48.880
and, like, been transported from the early 90s into your computer,

00:01:48.880 --> 00:01:51.620
and they got this old-fashioned sort of look.

00:01:51.620 --> 00:01:52.760
They just looked out of place, right?

00:01:52.760 --> 00:01:55.340
And so the WXPython stuff looks really modern,

00:01:55.340 --> 00:01:57.660
and it looks like it belongs on a lot of the platforms,

00:01:57.660 --> 00:02:00.100
at least Mac, Windows, and Linux that I've been playing with lately.

00:02:00.240 --> 00:02:02.720
So I'm really happy to see this coming along.

00:02:02.720 --> 00:02:05.000
The other one, of course, I would love that, like,

00:02:05.000 --> 00:02:07.860
visual designer sort of tooling in there.

00:02:07.860 --> 00:02:10.800
But, you know, I'm happy that this thing is coming along.

00:02:10.800 --> 00:02:11.580
It's been re-released.

00:02:11.580 --> 00:02:12.020
That's awesome.

00:02:12.020 --> 00:02:15.400
On their startup page, there's a, like, a, you know,

00:02:15.400 --> 00:02:17.120
after you do all the downloads for it,

00:02:17.120 --> 00:02:20.000
there's a five-line application that you can use to try it out.

00:02:20.000 --> 00:02:22.000
And that's pretty slick.

00:02:22.000 --> 00:02:24.520
That's fast to get something up and running.

00:02:24.520 --> 00:02:27.260
I tried it out yesterday, so it's good.

00:02:27.260 --> 00:02:27.680
Very cool.

00:02:28.400 --> 00:02:30.680
So I have a little question,

00:02:30.680 --> 00:02:33.720
a little tech interview type question for you, Brian.

00:02:33.720 --> 00:02:38.440
Did you know that you can define a Python function

00:02:38.440 --> 00:02:41.560
and just put triple dots after it and just kind of say,

00:02:41.560 --> 00:02:43.200
you know, actually, I don't want to define it?

00:02:43.200 --> 00:02:44.140
I did not know that.

00:02:44.140 --> 00:02:45.500
I did not know that either.

00:02:45.500 --> 00:02:51.520
However, part of my experience of going to PyCascades

00:02:51.520 --> 00:02:55.540
was to meet Lucas, who gave this amazing talk from,

00:02:55.880 --> 00:02:57.340
he's from Facebook and Instagram,

00:02:57.340 --> 00:03:01.520
about how they're doing gradual typing in Python

00:03:01.520 --> 00:03:03.500
and how they're adding types to, like,

00:03:03.500 --> 00:03:06.180
the millions of lines of code at Facebook slowly.

00:03:06.180 --> 00:03:07.800
And this whole process they went through,

00:03:07.800 --> 00:03:08.640
it's super interesting.

00:03:08.640 --> 00:03:10.180
I'm having him already recorded,

00:03:10.180 --> 00:03:12.960
going to have him sort of in real time

00:03:12.960 --> 00:03:15.360
with the way people experience it on Talk Python,

00:03:15.360 --> 00:03:16.760
talking about it.

00:03:16.760 --> 00:03:18.760
And one of the projects that came out of there

00:03:18.760 --> 00:03:20.340
that I thought was really interesting

00:03:20.340 --> 00:03:22.780
is this thing called TypeShed.

00:03:22.960 --> 00:03:23.860
Have you heard of TypeShed?

00:03:23.860 --> 00:03:24.640
I have, yeah.

00:03:24.640 --> 00:03:27.120
Yeah, so TypeShed is this place

00:03:27.120 --> 00:03:29.900
that contains the external type annotations,

00:03:29.900 --> 00:03:32.880
basically the signatures for everything

00:03:32.880 --> 00:03:34.100
in the Python standard library.

00:03:34.100 --> 00:03:34.520
Okay.

00:03:34.520 --> 00:03:36.560
So you go in there and you'll find functions

00:03:36.560 --> 00:03:39.740
or classes with methods and whatnot.

00:03:40.420 --> 00:03:45.960
And you'll see stuff like def visit self-commonode colon AST.

00:03:45.960 --> 00:03:47.340
This is, like, from the AST module.

00:03:47.340 --> 00:03:49.060
And so it'll tell you the type.

00:03:49.060 --> 00:03:51.760
And it says, you know, arrow goes to any,

00:03:51.760 --> 00:03:53.900
for example, colon, and then just dot, dot, dot.

00:03:53.900 --> 00:03:54.420
And that's it.

00:03:54.420 --> 00:03:57.780
And this is a way in which you can define

00:03:57.780 --> 00:04:01.700
these external types in these PYI stubs.

00:04:02.280 --> 00:04:04.320
So it's like a normal Python file

00:04:04.320 --> 00:04:05.320
that Python can interpret,

00:04:05.320 --> 00:04:07.040
except for all the methods are empty.

00:04:07.040 --> 00:04:09.400
You know, there's a couple of annotations

00:04:09.400 --> 00:04:11.500
that talk about, sorry, a couple of PEPs

00:04:11.500 --> 00:04:12.700
that talk about the annotations

00:04:12.700 --> 00:04:14.340
and how this is working and so on.

00:04:14.340 --> 00:04:16.780
And these are just the annotations people know.

00:04:16.780 --> 00:04:18.260
But what's pretty interesting

00:04:18.260 --> 00:04:22.720
is that this is actually what mypy uses,

00:04:22.720 --> 00:04:27.460
like this get repository of what Python looks like

00:04:27.460 --> 00:04:28.040
in terms of types.

00:04:28.140 --> 00:04:30.800
this is what mypy uses, the static type checker,

00:04:30.800 --> 00:04:34.160
as well as this is what PyCharm uses

00:04:34.160 --> 00:04:35.800
to get all of its magic.

00:04:35.800 --> 00:04:38.680
So PyCharm is much better than many, many editors

00:04:38.680 --> 00:04:42.100
about going, oh, you know, if you call, like, what, right?

00:04:42.100 --> 00:04:44.820
You call some method on this other thing,

00:04:44.820 --> 00:04:46.320
it returns this other type, and you hit dot,

00:04:46.320 --> 00:04:48.200
and you can see all the autocomplete from it.

00:04:48.200 --> 00:04:49.420
Like, where did that come from?

00:04:49.420 --> 00:04:50.560
It came from TypeShed, actually.

00:04:50.560 --> 00:04:50.940
Okay.

00:04:50.940 --> 00:04:51.640
So, I don't know.

00:04:51.640 --> 00:04:52.760
I thought this was pretty interesting.

00:04:52.760 --> 00:04:55.760
And the other thing that is really cool about this,

00:04:55.760 --> 00:04:59.940
and it doesn't look like people are using it this way very much.

00:04:59.940 --> 00:05:03.260
So, I'm putting this out there as a call to everyone

00:05:03.260 --> 00:05:04.540
who cares about Python 3,

00:05:04.540 --> 00:05:08.360
who wants their library to be very rich

00:05:08.360 --> 00:05:10.800
with inside these various editors and type checkers

00:05:10.800 --> 00:05:15.480
to take a moment and document their packages' signatures here.

00:05:15.600 --> 00:05:18.580
So, there's a place to put third-party packages,

00:05:18.580 --> 00:05:21.860
like requests or flask or, you know, you name it.

00:05:21.860 --> 00:05:26.800
If you run an open source project that has a package that people use,

00:05:26.800 --> 00:05:28.680
you can come over here and put yours in,

00:05:28.680 --> 00:05:31.280
and then that will be picked up by all the other things.

00:05:31.280 --> 00:05:32.980
So, it's pretty cool.

00:05:32.980 --> 00:05:33.280
Okay.

00:05:33.280 --> 00:05:33.920
That's interesting.

00:05:33.920 --> 00:05:36.020
We're not sure how they avoid name collision on that.

00:05:36.020 --> 00:05:37.100
They basically structure it.

00:05:37.100 --> 00:05:37.980
There's a third-party folder,

00:05:37.980 --> 00:05:40.260
and then I think it's just the next subfolder

00:05:40.260 --> 00:05:42.800
is the name of your package,

00:05:42.800 --> 00:05:44.380
which is unique on PyPI.

00:05:44.600 --> 00:05:45.360
Okay. Yeah, right.

00:05:45.360 --> 00:05:46.500
So, it's probably okay.

00:05:46.500 --> 00:05:46.980
Okay.

00:05:46.980 --> 00:05:48.260
I hadn't heard of TypeShed.

00:05:48.260 --> 00:05:52.880
I mean, I knew that you could annotate your signatures and stuff,

00:05:52.880 --> 00:05:54.980
but I didn't know that there's this one place

00:05:54.980 --> 00:05:57.040
that's kind of being used as this common source.

00:05:57.040 --> 00:05:58.100
So, I thought that was pretty cool.

00:05:58.100 --> 00:05:59.180
Yeah, and I'm curious about,

00:05:59.180 --> 00:06:02.240
so, are these Python stub files,

00:06:02.240 --> 00:06:04.940
is that the only thing that they're used for, is type?

00:06:04.940 --> 00:06:05.520
I don't know.

00:06:05.520 --> 00:06:06.880
I had never heard of them before,

00:06:06.880 --> 00:06:08.260
but, you know, apparently.

00:06:08.260 --> 00:06:09.320
Okay.

00:06:09.320 --> 00:06:11.180
Yeah, it's this new signature.

00:06:11.360 --> 00:06:15.520
It reminds me a little bit of what happened a few years ago

00:06:15.520 --> 00:06:16.700
with TypeScript,

00:06:16.700 --> 00:06:19.960
where I think it's called definitely typed.

00:06:19.960 --> 00:06:20.480
I can't remember.

00:06:20.480 --> 00:06:22.500
There's now this massive Git repository

00:06:22.500 --> 00:06:24.720
of all these external JavaScript libraries

00:06:24.720 --> 00:06:27.700
that want to interact with the typed version of JavaScript.

00:06:27.700 --> 00:06:30.400
And so, they all have basically,

00:06:30.400 --> 00:06:32.580
like, there's this similar concept

00:06:32.580 --> 00:06:34.580
of just the signature descriptions

00:06:34.580 --> 00:06:35.780
without the implementation

00:06:35.780 --> 00:06:37.740
in this one giant Git repository.

00:06:37.740 --> 00:06:39.280
So, this is kind of cool to see it happening

00:06:39.280 --> 00:06:40.120
in the Python space.

00:06:40.120 --> 00:06:41.020
Yeah, definitely.

00:06:41.020 --> 00:06:41.700
All right.

00:06:41.700 --> 00:06:43.200
One of the things I wanted to,

00:06:43.200 --> 00:06:46.440
I think that Ned Batchelder's coverage tool

00:06:46.440 --> 00:06:47.560
is super cool.

00:06:47.560 --> 00:06:50.260
The same caveats as normal is,

00:06:50.260 --> 00:06:52.840
don't be too enticed with trying to search

00:06:52.840 --> 00:06:55.420
for 100% code coverage in your tests.

00:06:55.420 --> 00:06:58.540
But it's a useful tool in its own otherwise.

00:06:58.540 --> 00:06:59.300
Anyway.

00:06:59.300 --> 00:07:02.760
But he, coverage 4.5 just came out,

00:07:02.760 --> 00:07:04.880
and he added just one new feature.

00:07:05.440 --> 00:07:07.080
And this new feature is pretty darn cool.

00:07:07.080 --> 00:07:10.180
It's the configurator plugins feature,

00:07:10.180 --> 00:07:11.600
which allows you,

00:07:11.600 --> 00:07:13.020
you kind of have to read it a bit

00:07:13.020 --> 00:07:13.920
and get your head around it.

00:07:13.920 --> 00:07:14.980
But the idea is,

00:07:14.980 --> 00:07:16.360
there's a lot of people

00:07:16.360 --> 00:07:17.840
that have different configurations

00:07:17.840 --> 00:07:21.120
or different run configurations of their code.

00:07:21.120 --> 00:07:23.480
And some of the code

00:07:23.480 --> 00:07:25.680
is intentionally not supposed to run

00:07:25.680 --> 00:07:26.720
at certain times.

00:07:26.720 --> 00:07:28.620
So, it throws up,

00:07:28.620 --> 00:07:29.980
honoring all these different,

00:07:29.980 --> 00:07:31.820
like, different requests from people

00:07:31.820 --> 00:07:33.240
to put new features in.

00:07:33.560 --> 00:07:35.500
It has this configurator plugin feature

00:07:35.500 --> 00:07:38.460
so that you can do your own pragmas ahead of time.

00:07:38.460 --> 00:07:39.380
You run a little bit of code

00:07:39.380 --> 00:07:40.740
before you run the rest of your code.

00:07:40.740 --> 00:07:44.160
And you can comment out things.

00:07:44.160 --> 00:07:45.120
As an example,

00:07:45.120 --> 00:07:45.640
for instance,

00:07:45.640 --> 00:07:47.140
in the pytest book,

00:07:47.140 --> 00:07:48.660
I had an application

00:07:48.660 --> 00:07:52.300
that used both TinyDB

00:07:52.300 --> 00:07:53.400
and MongoDB

00:07:53.400 --> 00:07:54.620
as two different options.

00:07:55.020 --> 00:07:56.440
So, I would want to run my test

00:07:56.440 --> 00:07:58.440
on the whole thing using Tiny

00:07:58.440 --> 00:08:01.240
and then also the whole thing using Mongo.

00:08:01.240 --> 00:08:02.960
But I don't want to,

00:08:02.960 --> 00:08:04.080
there's some of the code

00:08:04.080 --> 00:08:05.940
that's only for Tiny

00:08:05.940 --> 00:08:06.800
and some of the code

00:08:06.800 --> 00:08:07.620
that's only for Mongo.

00:08:07.620 --> 00:08:08.940
It doesn't make sense

00:08:08.940 --> 00:08:11.360
to run coverage on those parts

00:08:11.360 --> 00:08:12.480
in those configurations.

00:08:12.480 --> 00:08:14.360
So, that'd be a great use for that.

00:08:14.360 --> 00:08:15.260
Yeah, that's really cool

00:08:15.260 --> 00:08:17.240
because it's really easy to say,

00:08:17.240 --> 00:08:18.840
okay, we're at 80% coverage.

00:08:18.840 --> 00:08:19.740
We've got to keep going.

00:08:19.740 --> 00:08:21.080
Like, how do we get this higher, right?

00:08:21.440 --> 00:08:22.580
But there's some stuff

00:08:22.580 --> 00:08:24.480
that should just kind of be left alone.

00:08:24.480 --> 00:08:25.980
And this is a nice way to say,

00:08:25.980 --> 00:08:26.960
right now,

00:08:26.960 --> 00:08:29.480
you should not consider this bit of code

00:08:29.480 --> 00:08:30.700
because who knows,

00:08:30.700 --> 00:08:32.080
maybe it's like some sort of little

00:08:32.080 --> 00:08:33.240
utility script

00:08:33.240 --> 00:08:34.340
that you're just throwing in

00:08:34.340 --> 00:08:36.200
and you don't actually want it to be run

00:08:36.200 --> 00:08:36.920
as part of your package.

00:08:36.920 --> 00:08:37.300
Who knows?

00:08:37.300 --> 00:08:38.040
It's pretty cool.

00:08:38.040 --> 00:08:39.880
Yeah, so, you know what else is pretty cool

00:08:39.880 --> 00:08:41.200
is the recent changes

00:08:41.200 --> 00:08:43.760
that the folks over at DigitalOcean just made.

00:08:43.760 --> 00:08:46.380
So, they've always been

00:08:46.380 --> 00:08:49.700
the incredible, affordable hosting

00:08:49.700 --> 00:08:52.140
and basic virtual server space.

00:08:52.140 --> 00:08:55.040
They've sort of made places like AWS

00:08:55.040 --> 00:08:56.960
react in like extreme ways

00:08:56.960 --> 00:08:58.460
to try to keep up with them.

00:08:58.460 --> 00:08:59.240
So, that's pretty cool

00:08:59.240 --> 00:09:00.160
but they just recently

00:09:00.160 --> 00:09:01.480
more or less just doubled

00:09:01.480 --> 00:09:03.480
everything that you get for the price.

00:09:03.480 --> 00:09:04.940
So, for like $5,

00:09:04.940 --> 00:09:07.040
you get a server with a gig of RAM

00:09:07.040 --> 00:09:08.500
and 25 gigs of SSD.

00:09:08.500 --> 00:09:09.760
It's pretty sweet

00:09:09.760 --> 00:09:11.380
and even includes a terabyte of transfer

00:09:11.380 --> 00:09:12.000
which, by the way,

00:09:12.000 --> 00:09:12.820
at AWS rates,

00:09:12.820 --> 00:09:14.600
that's $93 worth of bandwidth.

00:09:14.600 --> 00:09:17.640
$10, 2 gigs,

00:09:18.200 --> 00:09:19.120
if you pay like $20,

00:09:19.120 --> 00:09:20.340
you get 4 gigs,

00:09:20.340 --> 00:09:21.680
80 gigs of SSD,

00:09:21.680 --> 00:09:22.800
couple CPUs.

00:09:22.800 --> 00:09:24.160
It's just crazy

00:09:24.160 --> 00:09:24.980
some of the prices

00:09:24.980 --> 00:09:26.300
that they have now over here.

00:09:26.300 --> 00:09:28.400
So, if you're looking to do

00:09:28.400 --> 00:09:29.700
sort of virtual server stuff

00:09:29.700 --> 00:09:30.980
or things like that,

00:09:30.980 --> 00:09:32.360
definitely check them out

00:09:32.360 --> 00:09:34.340
at do.co slash Python.

00:09:34.340 --> 00:09:36.240
They've got some really cool options now.

00:09:36.240 --> 00:09:36.820
That's great.

00:09:36.820 --> 00:09:37.300
Yeah, definitely.

00:09:37.300 --> 00:09:38.520
And thank you, DigitalOcean,

00:09:38.520 --> 00:09:39.400
for supporting the show.

00:09:39.400 --> 00:09:40.920
It helps us keep going.

00:09:40.920 --> 00:09:42.960
So, we've already talked about, Brian,

00:09:42.960 --> 00:09:43.820
the fact that

00:09:43.820 --> 00:09:45.780
neither of us are really into gaming, right?

00:09:46.320 --> 00:09:47.940
I've been playing a little bit of Formula 1,

00:09:47.940 --> 00:09:48.600
you know,

00:09:48.600 --> 00:09:49.500
with like the steering wheel thing.

00:09:49.500 --> 00:09:50.520
That's kind of a fun simulation.

00:09:50.520 --> 00:09:51.500
But generally, gaming,

00:09:51.500 --> 00:09:53.140
not so much with either of us.

00:09:53.140 --> 00:09:54.920
But I have some gaming news

00:09:54.920 --> 00:09:56.400
that is pretty interesting.

00:09:56.400 --> 00:09:58.580
It doesn't have to do with playing games.

00:09:58.580 --> 00:10:00.440
It has to do with the creation of games

00:10:00.440 --> 00:10:01.180
and 3D worlds.

00:10:01.180 --> 00:10:03.020
So, you may know,

00:10:03.020 --> 00:10:04.680
I'm sure that you know personally,

00:10:04.680 --> 00:10:06.240
but people listening may know

00:10:06.240 --> 00:10:07.660
that Python is actually used

00:10:07.660 --> 00:10:09.600
quite a bit to automate

00:10:09.600 --> 00:10:10.420
and manage

00:10:10.420 --> 00:10:13.500
and sort of build the pipeline

00:10:13.500 --> 00:10:15.580
between all these different tools

00:10:15.580 --> 00:10:16.840
and all these different people

00:10:16.840 --> 00:10:18.280
at these massive game

00:10:18.280 --> 00:10:20.060
and movie companies, right?

00:10:20.060 --> 00:10:21.000
Yeah, that's pretty cool.

00:10:21.000 --> 00:10:21.320
Yeah.

00:10:21.320 --> 00:10:23.300
So, if you've got to go from like Maya

00:10:23.300 --> 00:10:25.600
over to some other tool

00:10:25.600 --> 00:10:26.120
or, you know,

00:10:26.120 --> 00:10:28.200
you've got these hundreds of gigs of files

00:10:28.200 --> 00:10:29.300
and they need to be transformed

00:10:29.300 --> 00:10:31.300
and processed and whatnot,

00:10:31.300 --> 00:10:33.240
that's a challenge

00:10:33.240 --> 00:10:34.240
and a lot of people have built

00:10:34.240 --> 00:10:36.080
sort of custom versions of that.

00:10:36.080 --> 00:10:37.320
So, the big news here

00:10:37.320 --> 00:10:38.360
is that Unreal,

00:10:38.360 --> 00:10:39.240
the Unreal Engine,

00:10:39.240 --> 00:10:41.240
which is one of the most significant

00:10:41.240 --> 00:10:43.920
sort of 3D game engines there is,

00:10:43.920 --> 00:10:45.780
they're now integrating Python

00:10:45.780 --> 00:10:48.980
deeply into its sort of processing pipeline,

00:10:48.980 --> 00:10:50.640
not its necessary execution.

00:10:50.640 --> 00:10:53.520
But they plan to integrate Python

00:10:53.520 --> 00:10:55.380
into the Unreal Engine

00:10:55.380 --> 00:10:56.080
for data,

00:10:56.080 --> 00:10:58.040
basically for this data pipeline.

00:10:58.240 --> 00:10:58.800
That's great.

00:10:58.800 --> 00:10:59.540
Yeah, it's cool, right?

00:10:59.540 --> 00:11:00.520
So, this is from Autodesk

00:11:00.520 --> 00:11:00.880
and they said,

00:11:00.880 --> 00:11:01.860
hey, we're going to give you a glimpse

00:11:01.860 --> 00:11:02.480
of what we're doing.

00:11:02.480 --> 00:11:04.460
So, maybe somebody's built

00:11:04.460 --> 00:11:05.880
like a model in 3D Max

00:11:05.880 --> 00:11:07.960
and it's like this super intense,

00:11:07.960 --> 00:11:11.060
ultra, ultra fine quality,

00:11:11.060 --> 00:11:11.320
you know,

00:11:11.320 --> 00:11:13.280
every single thing is modeled.

00:11:13.280 --> 00:11:14.520
The example I have in this article

00:11:14.520 --> 00:11:15.260
we're linking to

00:11:15.260 --> 00:11:16.980
is like there's a motorcycle

00:11:16.980 --> 00:11:19.400
and the tires on the motorcycle

00:11:19.400 --> 00:11:20.220
have those little,

00:11:20.220 --> 00:11:20.720
like, you know,

00:11:20.720 --> 00:11:21.540
those little dots,

00:11:21.540 --> 00:11:23.500
those little sticky pieces of rubber

00:11:23.500 --> 00:11:25.060
that come out on like new tires

00:11:25.060 --> 00:11:26.900
where they come out of the mold

00:11:26.900 --> 00:11:28.160
and they're still like sticking out.

00:11:28.160 --> 00:11:29.300
So, they're like,

00:11:29.300 --> 00:11:31.100
we don't need that in the game, right?

00:11:31.100 --> 00:11:32.640
This is going to kill the performance

00:11:32.640 --> 00:11:34.920
if we actually put every little bit

00:11:34.920 --> 00:11:37.360
of these like knobby things and stuff

00:11:37.360 --> 00:11:40.080
into the model that ends up in the 3D

00:11:40.080 --> 00:11:41.360
in the Unreal Engine, right?

00:11:41.360 --> 00:11:43.960
So, they're basically building this pipeline

00:11:43.960 --> 00:11:45.120
where you can say,

00:11:45.120 --> 00:11:46.460
in Python,

00:11:46.460 --> 00:11:48.320
why don't we just delete all the objects

00:11:48.320 --> 00:11:49.420
that are probably too small

00:11:49.420 --> 00:11:50.580
for people to notice anyway

00:11:50.580 --> 00:11:52.260
and just do that automatically.

00:11:52.580 --> 00:11:54.140
do level of details models.

00:11:54.140 --> 00:11:56.500
You can like merge objects together.

00:11:56.500 --> 00:11:57.240
You could say,

00:11:57.240 --> 00:11:58.420
actually create a bunch

00:11:58.420 --> 00:11:59.240
of different motorcycles

00:11:59.240 --> 00:12:01.280
by automatically taking the source one

00:12:01.280 --> 00:12:03.580
and replacing like the material

00:12:03.580 --> 00:12:05.760
that is say the fenders

00:12:05.760 --> 00:12:08.220
and the gas can and stuff

00:12:08.220 --> 00:12:09.920
to change it from say like a light blue

00:12:09.920 --> 00:12:12.900
to like a purple shiny motorcycle.

00:12:12.900 --> 00:12:14.680
And so, all of this is automatic.

00:12:14.680 --> 00:12:15.960
So, once it's automatic,

00:12:15.960 --> 00:12:16.860
you can, you know,

00:12:16.860 --> 00:12:18.120
make a change at the beginning

00:12:18.120 --> 00:12:18.620
of the process

00:12:18.620 --> 00:12:20.420
and replicate this entire workflow,

00:12:20.560 --> 00:12:21.920
which is pretty cool

00:12:21.920 --> 00:12:22.800
and it's awesome to see

00:12:22.800 --> 00:12:23.940
that Python's the choice for it.

00:12:23.940 --> 00:12:24.620
Yeah, very cool.

00:12:24.620 --> 00:12:26.400
Yeah, so just one more example

00:12:26.400 --> 00:12:27.560
of people using Python

00:12:27.560 --> 00:12:29.560
in ways that I had no idea existed.

00:12:29.560 --> 00:12:30.080
Yeah.

00:12:30.080 --> 00:12:30.880
Neat.

00:12:30.880 --> 00:12:31.560
Yeah, pretty cool.

00:12:31.560 --> 00:12:32.260
Good job, Unreal.

00:12:32.260 --> 00:12:34.000
Yeah, good job, Unreal and Autodesk.

00:12:34.000 --> 00:12:34.900
And they're going to have

00:12:34.900 --> 00:12:36.000
a brand new version of Python

00:12:36.000 --> 00:12:37.100
to work with pretty soon, aren't they?

00:12:37.100 --> 00:12:39.560
I think we mentioned Python 3.7 last week,

00:12:39.560 --> 00:12:43.960
but the Python 3.7.0 beta 1 is out

00:12:43.960 --> 00:12:47.540
and because it's now beta instead of alpha,

00:12:47.540 --> 00:12:49.360
that means the feature sets,

00:12:49.360 --> 00:12:50.760
I think I might get this right,

00:12:50.760 --> 00:12:51.700
the feature sets frozen

00:12:51.700 --> 00:12:54.160
and we're just tweaking it,

00:12:54.160 --> 00:12:55.180
making sure it's all tight

00:12:55.180 --> 00:12:56.140
and everything and tested.

00:12:56.140 --> 00:12:59.200
But beta means that there's beta testers

00:12:59.200 --> 00:13:00.560
and I was just thinking

00:13:00.560 --> 00:13:02.400
if it's not people like you and me

00:13:02.400 --> 00:13:04.160
in our community that listen to this,

00:13:04.160 --> 00:13:04.940
who is it?

00:13:04.940 --> 00:13:05.880
So, I think we had,

00:13:05.880 --> 00:13:07.800
I'm just putting a call to action out there

00:13:07.800 --> 00:13:10.060
to go pick a few of the features

00:13:10.060 --> 00:13:10.880
that are coming up

00:13:10.880 --> 00:13:12.760
and test things out,

00:13:12.760 --> 00:13:14.080
make sure it works in you

00:13:14.080 --> 00:13:15.740
and report bugs otherwise.

00:13:15.740 --> 00:13:16.940
Yeah, and there's definitely

00:13:16.940 --> 00:13:18.160
some cool features in there.

00:13:18.160 --> 00:13:20.480
Like, we talked about data classes last week,

00:13:20.480 --> 00:13:21.720
that being in there,

00:13:21.720 --> 00:13:23.440
but there's actually a bunch of changes

00:13:23.440 --> 00:13:25.380
and, you know,

00:13:25.380 --> 00:13:26.660
it's one of these things,

00:13:26.660 --> 00:13:28.500
speak now or forever hold your peace,

00:13:28.500 --> 00:13:30.120
it's going to come out in June.

00:13:30.120 --> 00:13:32.500
So, here's your chance to test it.

00:13:32.500 --> 00:13:33.420
I was going to take a look

00:13:33.420 --> 00:13:34.680
at the breakpoint feature

00:13:34.680 --> 00:13:35.600
and the data classes

00:13:35.600 --> 00:13:37.060
and maybe a couple of the others

00:13:37.060 --> 00:13:38.860
and give it a whirl.

00:13:38.860 --> 00:13:39.280
Nice.

00:13:39.280 --> 00:13:41.900
So, do you know if there's easy ways

00:13:41.900 --> 00:13:43.280
with things like talks and stuff

00:13:43.280 --> 00:13:44.520
to go ahead and run your tests

00:13:44.520 --> 00:13:45.360
on Python 3.7?

00:13:45.360 --> 00:13:46.340
Yeah, of course.

00:13:46.340 --> 00:13:48.040
Talks you can set up 3.7

00:13:48.040 --> 00:13:49.420
as one of the Pythons

00:13:49.420 --> 00:13:51.360
to test everything.

00:13:51.360 --> 00:13:52.560
Yeah, that's one of the ways

00:13:52.560 --> 00:13:53.520
I'm going to test this.

00:13:53.520 --> 00:13:54.880
I've got to make sure

00:13:54.880 --> 00:13:55.840
that there's new versions

00:13:55.840 --> 00:13:57.360
of pytest as well

00:13:57.360 --> 00:13:58.180
and I want to make sure

00:13:58.180 --> 00:13:59.900
that all combinations of Python,

00:13:59.900 --> 00:14:02.020
all recent versions of Python

00:14:02.020 --> 00:14:03.080
and pytest

00:14:03.080 --> 00:14:04.880
work with all the demo code

00:14:04.880 --> 00:14:05.700
I have in my book

00:14:05.700 --> 00:14:07.160
and doing that manually

00:14:07.160 --> 00:14:08.040
is just too much work.

00:14:08.040 --> 00:14:09.180
So, I'll use talks for that.

00:14:09.180 --> 00:14:10.840
Yeah, that's a complete nightmare.

00:14:10.840 --> 00:14:12.700
Yeah, tell people really quick,

00:14:12.820 --> 00:14:14.120
I know some people know about talks

00:14:14.120 --> 00:14:14.800
but not everyone.

00:14:14.800 --> 00:14:15.720
So, tell people what,

00:14:15.720 --> 00:14:17.600
like, where does talks fit in?

00:14:17.600 --> 00:14:18.280
Because I thought you were

00:14:18.280 --> 00:14:18.960
a pytest guy.

00:14:18.960 --> 00:14:19.580
What's up with this

00:14:19.580 --> 00:14:20.480
testing with talks thing?

00:14:20.480 --> 00:14:23.480
Well, talks is sort of

00:14:23.480 --> 00:14:24.800
like a top-level

00:14:24.800 --> 00:14:26.520
scripter thing

00:14:26.520 --> 00:14:27.060
and I'm totally

00:14:27.060 --> 00:14:27.780
going to get it wrong.

00:14:28.260 --> 00:14:29.640
but the way I use it

00:14:29.640 --> 00:14:31.160
really is to pick

00:14:31.160 --> 00:14:32.560
multiple configurations

00:14:32.560 --> 00:14:35.320
to, you can have

00:14:35.320 --> 00:14:36.220
multiple combinations

00:14:36.220 --> 00:14:37.560
of different libraries together

00:14:37.560 --> 00:14:40.100
or configurations of your system

00:14:40.100 --> 00:14:41.340
and test them separately.

00:14:41.340 --> 00:14:41.960
Yeah, nice.

00:14:41.960 --> 00:14:42.760
So, you could say

00:14:42.760 --> 00:14:43.920
test on PyPy

00:14:43.920 --> 00:14:45.880
and on CPython

00:14:45.880 --> 00:14:47.480
and multiple versions

00:14:47.480 --> 00:14:48.680
of either of those

00:14:48.680 --> 00:14:50.400
in a single test run, right?

00:14:50.400 --> 00:14:51.640
But the system will, like,

00:14:51.640 --> 00:14:53.420
configure sort of the interpreter

00:14:53.420 --> 00:14:55.260
or the runtime for that, right?

00:14:55.380 --> 00:14:56.840
It goes out and by default,

00:14:56.840 --> 00:14:57.740
you can turn off

00:14:57.740 --> 00:14:58.720
or on all these features

00:14:58.720 --> 00:14:59.600
but by default,

00:14:59.600 --> 00:15:00.300
it takes your,

00:15:00.300 --> 00:15:01.340
takes your,

00:15:01.340 --> 00:15:02.340
like, let's say,

00:15:02.340 --> 00:15:03.360
a package that is

00:15:03.360 --> 00:15:04.180
a Python package

00:15:04.180 --> 00:15:05.360
and it runs

00:15:05.360 --> 00:15:06.420
its setup function

00:15:06.420 --> 00:15:07.220
to create

00:15:07.220 --> 00:15:08.340
an installable

00:15:08.340 --> 00:15:09.640
Python wheel, I think.

00:15:09.640 --> 00:15:10.560
And then it

00:15:10.560 --> 00:15:12.080
creates a virtual environment,

00:15:12.080 --> 00:15:14.040
installs your package

00:15:14.040 --> 00:15:15.700
and all of its dependencies

00:15:15.700 --> 00:15:17.940
and then runs the tests on it

00:15:17.940 --> 00:15:18.900
and then reports on that.

00:15:18.900 --> 00:15:19.920
And then it does it again

00:15:19.920 --> 00:15:21.220
for however many

00:15:21.220 --> 00:15:22.120
different configurations

00:15:22.120 --> 00:15:22.920
you've got set up.

00:15:23.040 --> 00:15:24.380
All right, so for our final item,

00:15:24.380 --> 00:15:25.620
the one that I want to cover

00:15:25.620 --> 00:15:27.000
is similar,

00:15:27.000 --> 00:15:27.800
you were talking about

00:15:27.800 --> 00:15:28.680
a new release of Python

00:15:28.680 --> 00:15:29.460
coming out in beta.

00:15:29.460 --> 00:15:30.720
I want to just sort of hit

00:15:30.720 --> 00:15:31.900
a whole bunch of other things

00:15:31.900 --> 00:15:32.500
that were released

00:15:32.500 --> 00:15:33.580
that were pretty interesting

00:15:33.580 --> 00:15:35.060
on a couple levels.

00:15:35.060 --> 00:15:36.060
So, first of all,

00:15:36.060 --> 00:15:37.380
I think some people

00:15:37.380 --> 00:15:38.380
use this web framework.

00:15:38.380 --> 00:15:39.060
It's called Django.

00:15:39.060 --> 00:15:40.040
What do you think, Brian?

00:15:40.040 --> 00:15:41.720
Yeah, quite a few.

00:15:41.720 --> 00:15:41.880
Yeah.

00:15:41.880 --> 00:15:44.220
So, they just announced

00:15:44.220 --> 00:15:46.860
that they had a security release

00:15:46.860 --> 00:15:48.040
to fix some issues

00:15:48.040 --> 00:15:49.940
in around authentication

00:15:49.940 --> 00:15:50.920
and basically

00:15:50.920 --> 00:15:52.740
the login infrastructure

00:15:52.740 --> 00:15:53.440
in Django.

00:15:53.440 --> 00:15:54.200
So, if you're using

00:15:54.200 --> 00:15:55.440
2 or 111,

00:15:55.440 --> 00:15:56.700
you may want to check that out.

00:15:56.700 --> 00:15:57.700
All right,

00:15:57.700 --> 00:15:58.740
so there's been like,

00:15:58.740 --> 00:15:59.540
you know,

00:15:59.540 --> 00:16:00.460
here's the testing thing.

00:16:00.460 --> 00:16:01.620
There's been a regression.

00:16:01.620 --> 00:16:02.500
There was a problem.

00:16:02.500 --> 00:16:03.380
It was fixed

00:16:03.380 --> 00:16:04.480
and now it's unfixed.

00:16:04.480 --> 00:16:05.680
It's fun when problems

00:16:05.680 --> 00:16:06.400
unfix themselves.

00:16:06.400 --> 00:16:07.700
So, the release is

00:16:07.700 --> 00:16:08.900
with the unfixed one?

00:16:08.900 --> 00:16:10.360
This puts the fix back.

00:16:10.360 --> 00:16:11.260
Oh, okay.

00:16:12.300 --> 00:16:13.600
And then two more

00:16:13.600 --> 00:16:14.400
around Python 3.

00:16:14.400 --> 00:16:16.660
One is Python 3.4.

00:16:16.660 --> 00:16:18.740
There's a security release there

00:16:18.740 --> 00:16:20.520
and one is Python 3.5.

00:16:20.520 --> 00:16:22.360
There's also a security release there.

00:16:22.360 --> 00:16:23.120
So, respectively,

00:16:23.120 --> 00:16:24.520
the versions are 3.4.8

00:16:24.520 --> 00:16:25.560
and 3.5.5

00:16:25.560 --> 00:16:27.000
and there's apparently

00:16:27.000 --> 00:16:27.660
some problem

00:16:27.660 --> 00:16:29.100
with this internal bit

00:16:29.100 --> 00:16:30.400
called libxpat.

00:16:30.400 --> 00:16:31.360
As far as I tell,

00:16:31.360 --> 00:16:32.820
it's like an XML parsing library

00:16:32.820 --> 00:16:33.420
and there's some kind

00:16:33.420 --> 00:16:34.060
of issue with that.

00:16:34.060 --> 00:16:35.680
That sounds not good.

00:16:35.680 --> 00:16:36.880
Like, people could send you

00:16:36.880 --> 00:16:37.420
bad XML

00:16:37.420 --> 00:16:38.680
and bad things happen.

00:16:38.680 --> 00:16:40.140
So, be aware.

00:16:40.480 --> 00:16:41.820
And just a reminder

00:16:41.820 --> 00:16:42.280
to everyone

00:16:42.280 --> 00:16:44.060
and if anything like this

00:16:44.060 --> 00:16:45.840
happens in Python 2 shortly,

00:16:45.840 --> 00:16:47.040
there will be no fixes.

00:16:47.040 --> 00:16:47.780
You're just going to have

00:16:47.780 --> 00:16:48.400
to live with it

00:16:48.400 --> 00:16:51.040
after it goes end of life.

00:16:51.040 --> 00:16:53.640
So, it's good

00:16:53.640 --> 00:16:55.020
that they're fixing these.

00:16:55.020 --> 00:16:55.720
I suspect,

00:16:55.720 --> 00:16:56.780
I don't know when 3.4

00:16:56.780 --> 00:16:58.960
is gone end of life, right?

00:16:58.960 --> 00:17:00.420
3.3 I think is now out.

00:17:00.420 --> 00:17:02.920
Anyway, the final one,

00:17:02.920 --> 00:17:04.220
I said I had a lot of releases,

00:17:04.220 --> 00:17:05.120
is channels.

00:17:05.120 --> 00:17:06.720
So, these are Django channels.

00:17:06.720 --> 00:17:07.400
They're pretty interesting

00:17:07.400 --> 00:17:08.620
in that they add

00:17:08.620 --> 00:17:10.580
like an asynchronous way

00:17:10.580 --> 00:17:11.680
to write Django,

00:17:11.680 --> 00:17:12.740
WebSocket,

00:17:12.740 --> 00:17:14.160
and these types of things.

00:17:14.160 --> 00:17:16.240
Actually, I had the guy

00:17:16.240 --> 00:17:17.640
behind this on Talk Python

00:17:17.640 --> 00:17:18.180
and I linked it

00:17:18.180 --> 00:17:18.760
and interviewed there.

00:17:18.760 --> 00:17:21.120
But, this is sort of

00:17:21.120 --> 00:17:22.020
a complete rewrite.

00:17:22.020 --> 00:17:23.120
This is channels 2.0.

00:17:23.120 --> 00:17:24.180
It's a major rewrite.

00:17:24.180 --> 00:17:25.260
And most notably,

00:17:25.260 --> 00:17:27.260
Python 2.7,

00:17:27.260 --> 00:17:29.420
even Python 3.4,

00:17:29.420 --> 00:17:30.820
are no longer supported.

00:17:30.820 --> 00:17:33.460
They're fully legacy Python.

00:17:33.460 --> 00:17:34.100
They're out.

00:17:34.100 --> 00:17:35.160
It's 3.5 and above

00:17:35.160 --> 00:17:35.980
is all this works on.

00:17:36.120 --> 00:17:37.820
So, I suspect some of that

00:17:37.820 --> 00:17:39.000
might have to do with Django 2.

00:17:39.000 --> 00:17:39.920
But, also,

00:17:39.920 --> 00:17:41.660
it being this async thing,

00:17:41.660 --> 00:17:42.920
maybe they use the async

00:17:42.920 --> 00:17:43.600
and await keywords

00:17:43.600 --> 00:17:44.500
and it just doesn't work

00:17:44.500 --> 00:17:46.140
in 3.4 or below.

00:17:46.140 --> 00:17:47.480
But, yeah,

00:17:47.480 --> 00:17:48.300
it's all pretty cool.

00:17:48.300 --> 00:17:49.300
A bunch of new releases.

00:17:49.300 --> 00:17:50.620
So, if you're using these

00:17:50.620 --> 00:17:51.540
and want to check them out,

00:17:51.540 --> 00:17:52.080
do.

00:17:52.080 --> 00:17:54.180
That's it for our news this week.

00:17:54.180 --> 00:17:54.680
Brian,

00:17:54.680 --> 00:17:56.740
what items do you have to share?

00:17:56.740 --> 00:17:57.840
Well, I've got a couple

00:17:57.840 --> 00:17:59.260
exciting things.

00:17:59.260 --> 00:17:59.820
Yes, you do.

00:17:59.820 --> 00:18:00.620
I had submitted

00:18:00.620 --> 00:18:02.220
five talks to PyCon

00:18:02.220 --> 00:18:03.080
and one of them

00:18:03.080 --> 00:18:03.700
was accepted.

00:18:03.700 --> 00:18:04.320
Congratulations!

00:18:04.800 --> 00:18:05.240
That's awesome.

00:18:05.240 --> 00:18:05.480
Yay!

00:18:05.480 --> 00:18:06.540
It's a talk.

00:18:06.540 --> 00:18:07.880
I'm going to do it

00:18:07.880 --> 00:18:09.220
together with Paul Everett

00:18:09.220 --> 00:18:10.980
from the PyCharm team.

00:18:10.980 --> 00:18:12.500
So, it'll be PyCharm

00:18:12.500 --> 00:18:13.080
and pytest

00:18:13.080 --> 00:18:14.620
and that'll be fun.

00:18:14.620 --> 00:18:15.280
That's going to be

00:18:15.280 --> 00:18:16.060
really, really fun.

00:18:16.060 --> 00:18:17.240
The two of us also

00:18:17.240 --> 00:18:18.200
are going to do

00:18:18.200 --> 00:18:19.200
a webinar coming up

00:18:19.200 --> 00:18:20.960
on the 22nd of February

00:18:20.960 --> 00:18:23.920
and a similar topic

00:18:23.920 --> 00:18:25.340
but a little bit more advanced.

00:18:25.340 --> 00:18:26.160
So, we're going to dive

00:18:26.160 --> 00:18:27.960
into how to productively

00:18:27.960 --> 00:18:28.880
and effectively use

00:18:28.880 --> 00:18:30.060
pytest within PyCharm.

00:18:30.060 --> 00:18:31.280
Oh, that is really cool.

00:18:31.280 --> 00:18:31.980
You know what I'm doing

00:18:31.980 --> 00:18:32.320
right now?

00:18:32.800 --> 00:18:33.740
I'm going to register

00:18:33.740 --> 00:18:36.200
after I'm going to sign up.

00:18:36.200 --> 00:18:36.920
That'll be really fun.

00:18:36.920 --> 00:18:38.200
And then all these,

00:18:38.200 --> 00:18:38.620
of course,

00:18:38.620 --> 00:18:40.320
get recorded afterwards.

00:18:40.320 --> 00:18:41.260
Right?

00:18:41.260 --> 00:18:42.080
So, it's typically

00:18:42.080 --> 00:18:43.360
an hour, a Q&A,

00:18:43.360 --> 00:18:44.000
lots of fun.

00:18:44.000 --> 00:18:45.500
But if you can't make it live,

00:18:45.500 --> 00:18:45.840
you know,

00:18:45.840 --> 00:18:46.720
you should still register

00:18:46.720 --> 00:18:48.520
because then you'll get a notice

00:18:48.520 --> 00:18:48.860
that, hey,

00:18:48.860 --> 00:18:49.700
the recording is out.

00:18:49.700 --> 00:18:50.580
And I suspect

00:18:50.580 --> 00:18:51.500
we'll let people know

00:18:51.500 --> 00:18:53.060
when your recording is out.

00:18:53.060 --> 00:18:54.780
Like, maybe this week

00:18:54.780 --> 00:18:55.700
I might let people know

00:18:55.700 --> 00:18:56.620
my recording is out.

00:18:56.740 --> 00:18:58.000
I registered for yours

00:18:58.000 --> 00:18:58.660
and I got a,

00:18:58.660 --> 00:18:59.460
I didn't watch it

00:18:59.460 --> 00:19:00.840
but I got an email saying,

00:19:00.840 --> 00:19:01.440
hey, it's up.

00:19:01.440 --> 00:19:02.540
So, I got to go,

00:19:02.540 --> 00:19:04.200
I started watching it this morning.

00:19:04.200 --> 00:19:04.760
Yeah, that's cool.

00:19:04.760 --> 00:19:05.840
So, I did recently,

00:19:05.840 --> 00:19:07.440
I did a webcast

00:19:07.440 --> 00:19:08.740
with the PyCharm guys as well.

00:19:08.740 --> 00:19:10.600
Paul was sort of there

00:19:10.600 --> 00:19:11.500
as the emcee

00:19:11.500 --> 00:19:12.600
of the whole experience.

00:19:13.140 --> 00:19:15.300
And what I did in mine was

00:19:15.300 --> 00:19:15.800
I said,

00:19:15.800 --> 00:19:16.940
let's learn how to play

00:19:16.940 --> 00:19:18.180
with MongoDB from Python.

00:19:18.180 --> 00:19:19.800
So, let's take PyPI

00:19:19.800 --> 00:19:21.000
and recreate

00:19:21.000 --> 00:19:22.920
the data access layer

00:19:22.920 --> 00:19:24.740
of what PyPI might look like

00:19:24.740 --> 00:19:25.900
in a document database

00:19:25.900 --> 00:19:26.680
using Mongo

00:19:26.680 --> 00:19:27.360
and Mongo Engine

00:19:27.360 --> 00:19:28.000
and stuff like that.

00:19:28.000 --> 00:19:29.000
It was lots of fun.

00:19:29.000 --> 00:19:29.840
So, you can go check out

00:19:29.840 --> 00:19:30.280
that recording

00:19:30.280 --> 00:19:30.920
and we link to it

00:19:30.920 --> 00:19:31.480
in the show notes.

00:19:31.480 --> 00:19:32.560
And I suspect

00:19:32.560 --> 00:19:33.940
around February 30th

00:19:33.940 --> 00:19:35.200
you might have a similar one.

00:19:35.200 --> 00:19:36.860
Just a small toy project there,

00:19:36.860 --> 00:19:38.220
recreate PyPI.

00:19:38.220 --> 00:19:39.460
And I'm a little disappointed

00:19:39.460 --> 00:19:40.600
because I used Faker.

00:19:40.600 --> 00:19:40.980
You know,

00:19:40.980 --> 00:19:42.040
we talked about Faker before,

00:19:42.040 --> 00:19:42.320
right?

00:19:42.400 --> 00:19:43.100
where you can like

00:19:43.100 --> 00:19:43.780
create fake data.

00:19:43.780 --> 00:19:44.760
The thing is glorious.

00:19:44.760 --> 00:19:46.420
It needs a few other features

00:19:46.420 --> 00:19:47.360
which I'm actually,

00:19:47.360 --> 00:19:48.240
I'm thinking of doing

00:19:48.240 --> 00:19:49.020
some PRs for it

00:19:49.020 --> 00:19:49.540
to add them.

00:19:49.540 --> 00:19:51.600
But I created

00:19:51.600 --> 00:19:53.880
sort of 100,000 fake

00:19:53.880 --> 00:19:54.980
PyPI packages

00:19:54.980 --> 00:19:56.220
and they have kind of

00:19:56.220 --> 00:19:57.640
some kind of data.

00:19:57.640 --> 00:19:59.340
So, now what I'm working on

00:19:59.340 --> 00:19:59.980
is a system

00:19:59.980 --> 00:20:00.640
that will let me

00:20:00.640 --> 00:20:02.000
entirely download

00:20:02.000 --> 00:20:03.280
every piece of data

00:20:03.280 --> 00:20:04.040
from PyPI

00:20:04.040 --> 00:20:05.680
and then model it

00:20:05.680 --> 00:20:06.180
in the database

00:20:06.180 --> 00:20:07.900
so that for other projects

00:20:07.900 --> 00:20:08.700
like I'll have this

00:20:08.700 --> 00:20:09.940
like basically corpus

00:20:09.940 --> 00:20:11.500
of all of PyPI.

00:20:11.660 --> 00:20:13.320
Okay, so for the next few weeks

00:20:13.320 --> 00:20:14.480
if PyPI is slow

00:20:14.480 --> 00:20:15.120
it's your fault?

00:20:15.120 --> 00:20:15.860
Yeah, you can blame me.

00:20:15.860 --> 00:20:16.700
I'm sorry about that.

00:20:16.700 --> 00:20:18.860
Exactly.

00:20:18.860 --> 00:20:20.820
Or I go over my bandwidth limit

00:20:20.820 --> 00:20:21.800
or something like that.

00:20:21.800 --> 00:20:22.320
Yeah.

00:20:22.320 --> 00:20:23.520
It was really interesting

00:20:23.520 --> 00:20:24.580
so far

00:20:24.580 --> 00:20:25.680
that I've gotten into it.

00:20:25.680 --> 00:20:26.400
So, good job.

00:20:26.400 --> 00:20:26.780
Yeah, cool.

00:20:26.780 --> 00:20:27.100
Thanks.

00:20:27.100 --> 00:20:28.240
All right, well,

00:20:28.240 --> 00:20:30.000
that's it for this week.

00:20:30.000 --> 00:20:30.580
Thank you everyone

00:20:30.580 --> 00:20:30.980
for listening.

00:20:30.980 --> 00:20:31.940
Brian, thank you

00:20:31.940 --> 00:20:32.900
for sharing this with us.

00:20:32.900 --> 00:20:33.660
All right, thank you.

00:20:33.660 --> 00:20:34.680
Talk to you next week.

00:20:34.680 --> 00:20:35.100
Yep, bye.

00:20:36.300 --> 00:20:37.260
Thank you for listening

00:20:37.260 --> 00:20:38.060
to Python Bytes.

00:20:38.060 --> 00:20:39.220
Follow the show on Twitter

00:20:39.220 --> 00:20:40.620
via at Python Bytes.

00:20:40.620 --> 00:20:41.780
That's Python Bytes

00:20:41.780 --> 00:20:43.520
as in B-Y-T-E-S.

00:20:43.520 --> 00:20:45.320
And get the full show notes

00:20:45.320 --> 00:20:46.960
at pythonbytes.fm.

00:20:46.960 --> 00:20:48.160
If you have a news item

00:20:48.160 --> 00:20:48.720
you want featured,

00:20:48.720 --> 00:20:50.320
just visit pythonbytes.fm

00:20:50.320 --> 00:20:51.280
and send it our way.

00:20:51.280 --> 00:20:52.520
We're always on the lookout

00:20:52.520 --> 00:20:53.980
for sharing something cool.

00:20:53.980 --> 00:20:55.400
On behalf of myself

00:20:55.400 --> 00:20:56.160
and Brian Okken,

00:20:56.160 --> 00:20:57.380
this is Michael Kennedy.

00:20:57.380 --> 00:20:58.680
Thank you for listening

00:20:58.680 --> 00:20:59.740
and sharing this podcast

00:20:59.740 --> 00:21:00.480
with your friends

