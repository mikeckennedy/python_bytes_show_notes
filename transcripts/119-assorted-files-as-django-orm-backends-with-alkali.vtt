
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:10.000
This is episode 119, recorded live from Pi Cascades in Seattle.


00:00:10.000 --> 00:00:12.000
[cheers]


00:00:12.000 --> 00:00:14.000
All right, it's great to be here.


00:00:14.000 --> 00:00:17.000
And this episode is brought to you by Datadog.


00:00:17.000 --> 00:00:18.000
Tell you more about them later.


00:00:18.000 --> 00:00:22.000
Right now, I have a bunch of special guests, none of whom are Brian Okken.


00:00:22.000 --> 00:00:23.000
More about that in just a second.


00:00:23.000 --> 00:00:24.000
But we have Trey Hunter.


00:00:24.000 --> 00:00:25.000
Hello.


00:00:25.000 --> 00:00:26.000
Dan Bader.


00:00:26.000 --> 00:00:27.000
Hey, how's it going?


00:00:27.000 --> 00:00:28.000
Eric Cho.


00:00:28.000 --> 00:00:29.000
Yo.


00:00:29.000 --> 00:00:32.740
conference and we thought why not put something live together for you. Now


00:00:32.740 --> 00:00:37.120
Brian Okken decided to punish his teeth by having a painful root canal and


00:00:37.120 --> 00:00:41.160
couldn't join us in some sort of last-minute emergency and that's really


00:00:41.160 --> 00:00:44.040
unfortunate because he was looking forward to be here. So everybody, Brian we


00:00:44.040 --> 00:00:50.080
miss you. We miss you Brian! Right on. Well let's go ahead and kick it off. I'm gonna do the first


00:00:50.080 --> 00:00:54.120
thing here and have you guys heard of this thing called Dropbox? Yeah a little


00:00:54.120 --> 00:00:57.480
bit. They have something to do with Python. Anyway obviously Guido works at


00:00:57.480 --> 00:01:02.240
Dropbox. It's a huge Python center of the universe there. And what's really


00:01:02.240 --> 00:01:07.360
interesting is they're finally migrating to Python 3 and using some of the tools


00:01:07.360 --> 00:01:12.200
that Guido has personally worked on with like mypy and static typing and all of


00:01:12.200 --> 00:01:17.880
that. So that's our first item. And if you had to guess how many lines of code is


00:01:17.880 --> 00:01:22.480
the Dropbox code that you're working with, you know that little box in your


00:01:22.480 --> 00:01:26.120
menu bar, your taskbar, that's also client-side Python which is interesting


00:01:26.120 --> 00:01:31.080
already, but it's over a million lines of code.


00:01:31.080 --> 00:01:37.160
So they started way back in 2015, a little hack week side project to prove whether or


00:01:37.160 --> 00:01:38.240
not maybe they could do it.


00:01:38.240 --> 00:01:43.040
It turned out it's going to be hard, is what basically they said.


00:01:43.040 --> 00:01:46.760
And officially they started the first half of 2017.


00:01:46.760 --> 00:01:50.240
And the real thing that helped them do this, which I think is interesting, is mypy.


00:01:50.240 --> 00:01:51.240
Have you guys heard of mypy?


00:01:51.240 --> 00:01:52.240
- Yep.


00:01:52.240 --> 00:01:53.240
- Oh yeah.


00:01:53.240 --> 00:01:55.760
is it takes the type annotations or type hints


00:01:55.760 --> 00:01:59.520
and verifies that this function says it takes one of these


00:01:59.520 --> 00:02:01.320
and you're giving it one of the same things,


00:02:01.320 --> 00:02:02.360
like that sort of thing.


00:02:02.360 --> 00:02:03.840
- Did Guido actually, like,


00:02:03.840 --> 00:02:05.520
I don't think he started mypyro,


00:02:05.520 --> 00:02:06.360
like somebody correct me here.


00:02:06.360 --> 00:02:07.180
- I don't think he started it,


00:02:07.180 --> 00:02:08.400
but he definitely works on it.


00:02:08.400 --> 00:02:09.720
- One of the original contributors, I think.


00:02:09.720 --> 00:02:10.960
- Okay, did he start it,


00:02:10.960 --> 00:02:13.560
or like was it started for Dropbox specifically


00:02:13.560 --> 00:02:14.720
or for the Dropbox code base?


00:02:14.720 --> 00:02:15.560
Just curious.


00:02:15.560 --> 00:02:16.380
- Yeah, I don't know either,


00:02:16.380 --> 00:02:18.240
but I know that it was an important thing he's working on.


00:02:18.240 --> 00:02:19.920
- I'm not sure, but I just wanna,


00:02:19.920 --> 00:02:22.680
it seems like Dropbox been migrating away


00:02:22.680 --> 00:02:24.800
from the public clouds for a while,


00:02:24.800 --> 00:02:27.800
and they've been focusing on just getting things right.


00:02:27.800 --> 00:02:29.400
So this is probably one of those things


00:02:29.400 --> 00:02:31.200
where they think for the long-term growth,


00:02:31.200 --> 00:02:33.040
it's going to be better than relying


00:02:33.040 --> 00:02:34.440
on somebody else's infrastructure.


00:02:34.440 --> 00:02:35.600
- Right, absolutely, it's very interesting.


00:02:35.600 --> 00:02:37.600
They're stepping away from some of the cloud hosting.


00:02:37.600 --> 00:02:38.840
Everyone else is running to the cloud.


00:02:38.840 --> 00:02:41.040
They're like, "Ah, well, we can make cloud."


00:02:41.040 --> 00:02:42.040
That's pretty interesting.


00:02:42.040 --> 00:02:44.760
So let me throw this out for you all,


00:02:44.760 --> 00:02:47.720
co-guests and audience members and listeners.


00:02:47.720 --> 00:02:50.400
One of the very first things they say in this article is,


00:02:50.400 --> 00:02:53.000
Well, once we were armed with mypy,


00:02:53.000 --> 00:02:57.080
the first few steps we took was to port our custom fork


00:02:57.080 --> 00:02:58.720
of Python to 3.5.


00:02:58.720 --> 00:02:59.560
- What?


00:02:59.560 --> 00:03:00.380
(laughing)


00:03:00.380 --> 00:03:01.220
- That's big.


00:03:01.220 --> 00:03:02.240
(laughing)


00:03:02.240 --> 00:03:03.080
I'm like, wait, what?


00:03:03.080 --> 00:03:05.240
There's a, they don't run normal Python?


00:03:05.240 --> 00:03:07.540
What kind, they like drop Python?


00:03:07.540 --> 00:03:08.380
What do they call it?


00:03:08.380 --> 00:03:09.200
It's pretty cool.


00:03:09.200 --> 00:03:10.040
- It's pretty cool.


00:03:10.040 --> 00:03:11.840
It cross compiles to Perl.


00:03:11.840 --> 00:03:12.680
- Yeah.


00:03:12.680 --> 00:03:13.500
- And then they--


00:03:13.500 --> 00:03:14.520
- Everyone does it.


00:03:14.520 --> 00:03:16.440
Yeah, so I'll just kind of wrap this up here.


00:03:16.440 --> 00:03:18.680
But basically this article that we're covering


00:03:18.680 --> 00:03:21.000
goes through all the steps of Dropbox moving over.


00:03:21.000 --> 00:03:24.560
And I feel like if people are going to take the Python 3


00:03:24.560 --> 00:03:28.240
as modern Python and other Python as legacy Python


00:03:28.240 --> 00:03:31.280
as a legitimate thing, the guy who created Python


00:03:31.280 --> 00:03:34.520
had better work at a place that uses Python 3, not Python 2.


00:03:34.520 --> 00:03:35.040
- For sure.


00:03:35.040 --> 00:03:37.320
- So I'm super happy to see that's moving along.


00:03:37.320 --> 00:03:39.960
And also that Guido was a pretty big part of it.


00:03:39.960 --> 00:03:40.680
All right, so let's see.


00:03:40.680 --> 00:03:41.520
What's up next here?


00:03:41.520 --> 00:03:42.020
Eric?


00:03:42.020 --> 00:03:44.760
- Basically, I want to talk about what


00:03:44.760 --> 00:03:48.120
I feel was underserved community in Python.


00:03:48.120 --> 00:03:50.160
I come from a network engineering background


00:03:50.160 --> 00:03:53.560
and been focusing on network automation using Python.


00:03:53.560 --> 00:03:55.400
And I think we've gotten to a point


00:03:55.400 --> 00:03:57.400
where we're big enough to be noticeable.


00:03:57.400 --> 00:04:00.560
Like it's actually material for the amount of community.


00:04:00.560 --> 00:04:05.040
I mean, we have new terms such as Net DevOps or NRE,


00:04:05.040 --> 00:04:06.540
not to be subtle differences


00:04:06.540 --> 00:04:08.680
from the site reliability engineering


00:04:08.680 --> 00:04:11.000
for network reliability engineering.


00:04:11.000 --> 00:04:14.080
We have some popular libraries from NetMeco, Napalm,


00:04:14.080 --> 00:04:15.880
who's been on your show before.


00:04:15.880 --> 00:04:18.000
And I can't even pronounce that new library,


00:04:18.000 --> 00:04:21.680
no nerd, I think, and no R, and I will have the link in the show notes.


00:04:21.680 --> 00:04:26.680
Yeah, you know, there's a lot of free resources out there for people to practice on for either


00:04:26.680 --> 00:04:30.520
network engineer wants to learn more about Python or developers who wants to learn more


00:04:30.520 --> 00:04:31.800
about network engineering.


00:04:31.800 --> 00:04:37.360
I think coming of age, I mean, hopefully one day, you know, we're going to have a sub culture


00:04:37.360 --> 00:04:42.480
of Python, just like the data analysis community that for network engineers.


00:04:42.480 --> 00:04:47.640
So that's I want to bring to everybody's attention, you could do it for fun, do it for profit.


00:04:47.640 --> 00:04:49.320
and it's a welcoming community.


00:04:49.320 --> 00:04:51.000
- Yeah, and you linked to a bunch of resources


00:04:51.000 --> 00:04:52.800
in the show notes that people who are into that


00:04:52.800 --> 00:04:55.480
can check out and yeah, Python's a mosaic


00:04:55.480 --> 00:04:57.320
and there's so many people doing different things


00:04:57.320 --> 00:04:58.760
and here's just another part of it, right?


00:04:58.760 --> 00:04:59.600
- Yeah, absolutely.


00:04:59.600 --> 00:05:01.600
I mean, I'm super excited about this


00:05:01.600 --> 00:05:04.100
'cause I think as you mentioned multiple times on your show,


00:05:04.100 --> 00:05:07.040
it's like you get started early or started easily,


00:05:07.040 --> 00:05:09.020
but you don't hit that ceiling.


00:05:09.020 --> 00:05:10.720
I mean, I've been doing this for five years


00:05:10.720 --> 00:05:11.840
and I haven't found that ceiling yet.


00:05:11.840 --> 00:05:12.980
It's a dot to me, so.


00:05:12.980 --> 00:05:14.360
(laughs)


00:05:14.360 --> 00:05:15.200
Yeah.


00:05:15.200 --> 00:05:16.020
- Is that a sign of growth


00:05:16.020 --> 00:05:17.080
that the Python community has seen


00:05:17.080 --> 00:05:20.080
where now it makes sense to have a niche for network


00:05:20.080 --> 00:05:21.240
automation specifically?


00:05:21.240 --> 00:05:23.320
I think people are still trying to figure out


00:05:23.320 --> 00:05:26.520
how this thing is going to go, which is with lots of changes,


00:05:26.520 --> 00:05:28.760
presents more opportunities for people.


00:05:28.760 --> 00:05:31.960
And Python just emerged in this de facto


00:05:31.960 --> 00:05:34.680
and speaks to the versatility and the power of the language.


00:05:34.680 --> 00:05:37.140
I think we're in that phase where we're trying to figure it


00:05:37.140 --> 00:05:40.760
out, and we just have this trending versus nobody


00:05:40.760 --> 00:05:41.700
has the right answer.


00:05:41.700 --> 00:05:43.960
But that means at the same time, that's


00:05:43.960 --> 00:05:45.480
where the opportunity lies.


00:05:45.480 --> 00:05:47.920
you could figure it out and could drive that direction.


00:05:47.920 --> 00:05:51.280
And I think the developer actually has a huge advantage


00:05:51.280 --> 00:05:53.040
that everything is virtualized,


00:05:53.040 --> 00:05:56.020
everything is abstracted away from the physical.


00:05:56.020 --> 00:05:57.760
So that's my thought at the moment.


00:05:57.760 --> 00:05:59.480
You know, you could see that I'm not very clear either.


00:05:59.480 --> 00:06:00.720
- I think it's super interesting that you point out


00:06:00.720 --> 00:06:03.320
how everything's abstracted and sort of cloud programmable.


00:06:03.320 --> 00:06:05.640
That means like Python has a better chance


00:06:05.640 --> 00:06:07.600
in the network space if it's not all hardware


00:06:07.600 --> 00:06:08.880
and boxes and stuff, right?


00:06:08.880 --> 00:06:09.720
- Yeah, for sure.


00:06:09.720 --> 00:06:11.560
I think one of the challenges for network engineers


00:06:11.560 --> 00:06:13.880
such as myself going into the cloud


00:06:13.880 --> 00:06:17.080
is the fact that there's no longer broadcast domain.


00:06:17.080 --> 00:06:19.480
Your NIC is actually physically attached to you.


00:06:19.480 --> 00:06:22.160
So things that we took for granted that were fixed


00:06:22.160 --> 00:06:23.440
is no longer true.


00:06:23.440 --> 00:06:26.400
So you get to have a network NAT gateway


00:06:26.400 --> 00:06:30.400
that's just arbitrarily attached to your virtual subnet,


00:06:30.400 --> 00:06:32.300
which you used to,


00:06:32.300 --> 00:06:34.680
I think if you work in the traditional enterprise,


00:06:34.680 --> 00:06:36.240
the first thing you do when you get a new team


00:06:36.240 --> 00:06:38.820
is you subnet it out, you give it an IP address,


00:06:38.820 --> 00:06:41.760
you subnet, but those are all virtualized nowadays.


00:06:41.760 --> 00:06:44.820
So you still need to understand the basics,


00:06:44.820 --> 00:06:47.420
but that basic used to take years to master.


00:06:47.420 --> 00:06:49.940
Now it's just a matter of reading a doc.


00:06:49.940 --> 00:06:53.180
So yeah, hopefully, you guys, come say hi


00:06:53.180 --> 00:06:56.780
if you see me at Instable Fest, at Cisco DevNet Create,


00:06:56.780 --> 00:07:00.080
at some of the Juniper events, come say hi, let's talk.


00:07:00.080 --> 00:07:02.100
And I think we could make this,


00:07:02.100 --> 00:07:03.980
potentially make a great community out of it.


00:07:03.980 --> 00:07:05.180
- Yeah, put Python on the wire.


00:07:05.180 --> 00:07:06.220
- Yeah, yeah, for sure.


00:07:06.220 --> 00:07:09.500
Buy you a Python beer.


00:07:09.500 --> 00:07:10.320
- Yeah.


00:07:10.320 --> 00:07:12.200
It's funny, Python really is a mosaic.


00:07:12.200 --> 00:07:13.760
I mean, that's, I didn't understand,


00:07:13.760 --> 00:07:15.460
well, I understood a lot of the terms you were using,


00:07:15.460 --> 00:07:17.320
but what they actually mean, I don't know.


00:07:17.320 --> 00:07:18.580
'Cause I don't need to know what they mean.


00:07:18.580 --> 00:07:21.840
And in the space of Python that I kind of am part of,


00:07:21.840 --> 00:07:23.640
this next thing I've got is kind of related


00:07:23.640 --> 00:07:24.800
to the fact that Python's a mosaic.


00:07:24.800 --> 00:07:28.240
It's kind of part of the web side of the mosaic of Python,


00:07:28.240 --> 00:07:32.820
which gets maybe more reputation than it deserves


00:07:32.820 --> 00:07:34.280
in the sense that there's a lot of folks


00:07:34.280 --> 00:07:35.300
using Python for the web,


00:07:35.300 --> 00:07:37.480
but it's not all you can use Python for at all.


00:07:37.480 --> 00:07:39.100
I mean, data science is huge.


00:07:39.100 --> 00:07:43.300
But if you have to process data, and it's not a database,


00:07:43.300 --> 00:07:46.420
and you are someone who's familiar with Django,


00:07:46.420 --> 00:07:49.460
there's a thing called Alkali that Kurt made.


00:07:49.460 --> 00:07:50.660
I can't remember Kurt's last name.


00:07:50.660 --> 00:07:53.620
Remember, Kurt's in the room, and we actually--


00:07:53.620 --> 00:07:54.460
- Kurt Neufeld.


00:07:54.460 --> 00:07:55.300
- Kurt Neufeld.


00:07:55.300 --> 00:07:56.660
So it's funny being at conferences.


00:07:56.660 --> 00:07:59.260
You sometimes just meet the people who end up


00:07:59.260 --> 00:08:00.780
making the things that you're using.


00:08:00.780 --> 00:08:03.460
So Alkali I'm not using, but it looks kind of fun


00:08:03.460 --> 00:08:05.620
because I'm familiar with the Django ORM,


00:08:05.620 --> 00:08:08.500
and Alkali, it's meant to take structured data,


00:08:08.500 --> 00:08:11.400
maybe an RSS feed, maybe a CSV file, maybe JSON data,


00:08:11.400 --> 00:08:14.260
maybe some random homegrown thing that you've got


00:08:14.260 --> 00:08:15.840
on your team or in your company,


00:08:15.840 --> 00:08:18.520
and allow you to use a Django ORM-like syntax


00:08:18.520 --> 00:08:20.480
to query it and also to save it,


00:08:20.480 --> 00:08:22.680
maybe in some other format even.


00:08:22.680 --> 00:08:25.200
So it's as if you're working with a database,


00:08:25.200 --> 00:08:27.440
but you don't actually have a database behind the scenes.


00:08:27.440 --> 00:08:28.880
You've got some structured file.


00:08:28.880 --> 00:08:31.580
So it kind of does that all in memory, which is fun.


00:08:31.580 --> 00:08:34.000
- Right, so maybe you're working with XML


00:08:34.000 --> 00:08:35.920
and you don't want to learn XPath,


00:08:35.920 --> 00:08:37.600
or you don't want to write regular expressions


00:08:37.600 --> 00:08:38.840
against CSV files.


00:08:38.840 --> 00:08:40.520
- Who wants to learn XPath, man?


00:08:40.520 --> 00:08:41.440
- Nobody.


00:08:41.440 --> 00:08:42.680
- Historical question.


00:08:42.680 --> 00:08:43.960
- Hey man, the 90s are calling.


00:08:43.960 --> 00:08:46.280
They want their API back.


00:08:46.280 --> 00:08:47.360
Here's my style sheet.


00:08:47.360 --> 00:08:48.680
- Says nobody ever.


00:08:48.680 --> 00:08:49.880
- Yes, exactly.


00:08:49.880 --> 00:08:52.400
So, I think this is a cool project, Kurt.


00:08:52.400 --> 00:08:54.480
I definitely like that you can point it at


00:08:54.480 --> 00:08:57.360
even like something, an endpoint on an ATP service


00:08:57.360 --> 00:09:00.600
and like turn that into effectively a Django database.


00:09:00.600 --> 00:09:04.040
And I've heard that there's a branch working on indexes


00:09:04.040 --> 00:09:05.280
which will like sort of complete


00:09:05.280 --> 00:09:06.440
the performance side of things.


00:09:06.440 --> 00:09:08.720
- Ooh, that would be really fun.


00:09:08.720 --> 00:09:10.600
Yeah, no pressure, no pressure.


00:09:10.600 --> 00:09:13.180
It's gonna be released tomorrow, I heard.


00:09:13.180 --> 00:09:14.020
I'm just kidding, it's not gonna be released tomorrow.


00:09:14.020 --> 00:09:15.880
- It's a long night for Eric.


00:09:15.880 --> 00:09:16.800
- He's shaking his head.


00:09:16.800 --> 00:09:18.800
- Long flight home, I don't know where he's from.


00:09:18.800 --> 00:09:19.960
- All right, before we move on to the next one,


00:09:19.960 --> 00:09:21.280
let me just tell you about our sponsor,


00:09:21.280 --> 00:09:23.080
which makes all of this happen.


00:09:23.080 --> 00:09:25.520
So this episode's brought to you by Datadog,


00:09:25.520 --> 00:09:27.280
and Datadog, they're really awesome.


00:09:27.280 --> 00:09:31.600
They let you track the performance and errors and requests,


00:09:31.600 --> 00:09:33.440
not just within your Python app,


00:09:33.440 --> 00:09:35.080
but across all of your infrastructure.


00:09:35.080 --> 00:09:37.480
So if you're doing like a Kubernetes thing,


00:09:37.480 --> 00:09:40.560
and you've got a Flask app, and it's talking to Nginx,


00:09:40.560 --> 00:09:43.160
and it's talking to PostgreSQL, you


00:09:43.160 --> 00:09:46.080
can tie all the performance of that entire system together,


00:09:46.080 --> 00:09:49.480
not just profiling your Python code, which is pretty awesome.


00:09:49.480 --> 00:09:52.600
So check them out at pythonbytes.fm/datadog.


00:09:52.600 --> 00:09:54.040
Get a cool free t-shirt.


00:09:54.040 --> 00:09:54.960
You get to try it out.


00:09:54.960 --> 00:09:55.720
It's awesome.


00:09:55.720 --> 00:09:57.920
OK, so the next item, that's Dan.


00:09:57.920 --> 00:09:58.400
Oh, sweet.


00:09:58.400 --> 00:10:00.440
Yeah, so quick update here.


00:10:00.440 --> 00:10:02.760
The CMU, Carnegie Mellon University,


00:10:02.760 --> 00:10:06.200
launched a undergrad degree in artificial intelligence.


00:10:06.200 --> 00:10:09.240
And apparently that is the first AI degree


00:10:09.240 --> 00:10:10.800
offered by a US university.


00:10:10.800 --> 00:10:12.600
And when Mike told me about it,


00:10:12.600 --> 00:10:13.840
I was really surprised because I thought,


00:10:13.840 --> 00:10:16.080
well, AI has kind of been like a big buzzword


00:10:16.080 --> 00:10:18.020
for a while now.


00:10:18.020 --> 00:10:20.120
And why didn't anybody else come up


00:10:20.120 --> 00:10:21.440
with a degree before that?


00:10:21.440 --> 00:10:24.200
But I guess it always takes a little while to do that.


00:10:24.200 --> 00:10:27.440
And I don't really know what goes into that degree


00:10:27.440 --> 00:10:30.080
or kind of how the curriculum really differs


00:10:30.080 --> 00:10:32.720
from let's say like your average computer science degree


00:10:32.720 --> 00:10:34.960
or like a data science curriculum,


00:10:34.960 --> 00:10:38.040
but I just felt it was an interesting development.


00:10:38.040 --> 00:10:40.600
- Yeah, we've had computer science forever.


00:10:40.600 --> 00:10:42.960
Well, first it was like electrical engineering,


00:10:42.960 --> 00:10:44.880
but I work on computers on the software side.


00:10:44.880 --> 00:10:47.520
And eventually I got a real degree like computer science.


00:10:47.520 --> 00:10:48.880
And then we have like software engineering,


00:10:48.880 --> 00:10:51.280
but now I think this is a big landmark,


00:10:51.280 --> 00:10:53.440
like the first artificial intelligence,


00:10:53.440 --> 00:10:55.440
like a bachelor of artificial intelligence.


00:10:55.440 --> 00:10:56.720
Like think of that, that's crazy.


00:10:56.720 --> 00:10:58.520
And one of the things the Dean said is,


00:10:58.520 --> 00:10:59.920
you know, of course we'll do CS stuff,


00:10:59.920 --> 00:11:03.640
But we're also going to focus on things like computer vision,


00:11:03.640 --> 00:11:06.160
language processing, huge databases,


00:11:06.160 --> 00:11:09.720
and how to help humans make better decisions automatically.


00:11:09.720 --> 00:11:10.420
It's pretty cool.


00:11:10.420 --> 00:11:13.800
So I'm waiting for the day where we have an AI,


00:11:13.800 --> 00:11:18.760
get a bachelor's degree in AI, and we can call it a day,


00:11:18.760 --> 00:11:19.720
and we're done.


00:11:19.720 --> 00:11:22.120
Or an AI teaching the bachelor's degree in AI.


00:11:22.120 --> 00:11:22.920
Yeah, even better.


00:11:22.920 --> 00:11:24.280
That would be so sweet.


00:11:24.280 --> 00:11:25.560
My professor's a jerk.


00:11:25.560 --> 00:11:26.060
[LAUGHTER]


00:11:26.060 --> 00:11:27.120
It's written in Fortran.


00:11:27.120 --> 00:11:29.560
[LAUGHTER]


00:11:29.560 --> 00:11:31.680
- Yeah, so do you use Python at all?


00:11:31.680 --> 00:11:32.520
I'm guessing you're learning Python.


00:11:32.520 --> 00:11:33.360
- Oh God, it's gotta be like--


00:11:33.360 --> 00:11:34.400
- It must be, right?


00:11:34.400 --> 00:11:35.240
- It's all Java.


00:11:35.240 --> 00:11:37.240
No, I don't know, it's gotta be Python, right?


00:11:37.240 --> 00:11:38.200
All right, so you all might know


00:11:38.200 --> 00:11:40.360
that maybe I've been kind of on a rant


00:11:40.360 --> 00:11:43.480
about async and await and asynchronous programming lately.


00:11:43.480 --> 00:11:45.240
And the next one,


00:11:45.240 --> 00:11:46.920
have you also heard that I've talked about GUIs?


00:11:46.920 --> 00:11:48.460
Like I've mentioned this twice, I think,


00:11:48.460 --> 00:11:50.640
like that Python should have better GUIs.


00:11:50.640 --> 00:11:52.160
Well, this next one is kind of like


00:11:52.160 --> 00:11:55.400
these things come together, which is awesome.


00:11:55.400 --> 00:11:57.640
So Florian sent this over to me


00:11:57.640 --> 00:12:02.160
and it's PySide 2 and Qt for Python, the Qt framework.


00:12:02.160 --> 00:12:04.200
That has an event loop that, you know,


00:12:04.200 --> 00:12:06.200
a button gets clicked or a timer runs


00:12:06.200 --> 00:12:07.200
or something like that.


00:12:07.200 --> 00:12:09.240
Well, somebody built some layer


00:12:09.240 --> 00:12:12.520
that you can plug that into async and await.


00:12:12.520 --> 00:12:16.160
So you can have like async def button click handler


00:12:16.160 --> 00:12:19.040
that integrates with your other async operations


00:12:19.040 --> 00:12:20.760
happening on your GUI there.


00:12:20.760 --> 00:12:21.720
It's pretty awesome.


00:12:21.720 --> 00:12:23.160
There's some examples on how you do it.


00:12:23.160 --> 00:12:24.240
It's super simple.


00:12:24.240 --> 00:12:27.560
I linked to one about downloading some stuff and whatnot.


00:12:27.560 --> 00:12:29.800
So, yeah, if you're doing anything with Qt


00:12:29.800 --> 00:12:31.960
and you do anything with async, then check this out.


00:12:31.960 --> 00:12:33.760
That's really, really a nice one.


00:12:33.760 --> 00:12:35.440
- So that one, usually, like I know,


00:12:35.440 --> 00:12:36.520
I haven't done Qt in a while,


00:12:36.520 --> 00:12:39.760
but GTK uses kind of an object-oriented event loop there,


00:12:39.760 --> 00:12:40.960
right, where it's classes.


00:12:40.960 --> 00:12:43.080
So it's taking a class-based syntax


00:12:43.080 --> 00:12:45.600
and allowing you to use the new async I/O syntax, right?


00:12:45.600 --> 00:12:48.680
- I think it's mixing the GUI event loop


00:12:48.680 --> 00:12:51.180
and the async I/O event loop together,


00:12:51.180 --> 00:12:53.320
because otherwise I think they would run independently.


00:12:53.320 --> 00:12:55.800
I think you basically can't have those run


00:12:55.800 --> 00:12:57.800
on the same thread or something to that effect, right?


00:12:57.800 --> 00:13:00.480
Like the async event loop would block the GUI loop


00:13:00.480 --> 00:13:01.720
or something to that effect.


00:13:01.720 --> 00:13:02.540
- Cool, all right.


00:13:02.540 --> 00:13:04.840
So the next item we've got on the list here,


00:13:04.840 --> 00:13:07.440
you know guys, we're at Python 3.7 now,


00:13:07.440 --> 00:13:08.720
3.8 is coming out pretty soon.


00:13:08.720 --> 00:13:12.000
So we're kind of running out of like minor number space.


00:13:12.000 --> 00:13:13.840
I guess we could always create more, but whatever.


00:13:13.840 --> 00:13:14.840
That's a good intro.


00:13:14.840 --> 00:13:16.120
(laughing)


00:13:16.120 --> 00:13:17.560
People have started thinking about, you know,


00:13:17.560 --> 00:13:19.680
what's gonna happen with Python 4.0?


00:13:19.680 --> 00:13:21.200
Like what would be some cool features


00:13:21.200 --> 00:13:22.320
that we would really wanna see?


00:13:22.320 --> 00:13:24.600
And so our good buddy, Anthony Shaw,


00:13:24.600 --> 00:13:27.520
wrote a really interesting blog post


00:13:27.520 --> 00:13:31.200
about four things he wants to see in Python 4.0.


00:13:31.200 --> 00:13:33.880
And it's pretty short read,


00:13:33.880 --> 00:13:35.440
but there's some interesting ideas in here.


00:13:35.440 --> 00:13:38.120
So we're just gonna go over those points here.


00:13:38.120 --> 00:13:40.200
And so number one is he would love to see


00:13:40.200 --> 00:13:42.680
just-in-time compilation as a first-class feature.


00:13:42.680 --> 00:13:45.720
So right now, you've got some alternative Python interpreters


00:13:45.720 --> 00:13:47.880
like the Piston project,


00:13:47.880 --> 00:13:50.560
or PyPI, I guess is like the most well-known


00:13:50.560 --> 00:13:53.120
that actually feature just-in-time compilation


00:13:53.120 --> 00:13:55.120
and it could bring a huge speed up compared to


00:13:55.120 --> 00:13:58.080
like the plain like by code interpreter setup


00:13:58.080 --> 00:13:59.480
that CPython uses.


00:13:59.480 --> 00:14:01.660
And so I guess the idea would be,


00:14:01.660 --> 00:14:04.680
is there some way to bring this into core Python?


00:14:04.680 --> 00:14:06.680
And apparently there is,


00:14:06.680 --> 00:14:08.560
and we already have this in some way,


00:14:08.560 --> 00:14:09.840
or at least we have the infrastructure


00:14:09.840 --> 00:14:11.680
to be able to plug in something like that.


00:14:11.680 --> 00:14:12.840
- That one would be really big.


00:14:12.840 --> 00:14:14.120
'Cause I know there are some companies


00:14:14.120 --> 00:14:15.720
that the reason they're able to use Python


00:14:15.720 --> 00:14:17.240
for what they do is PyPy.


00:14:17.240 --> 00:14:19.120
The fact that it really speeds up


00:14:19.120 --> 00:14:20.440
with that just-in-time compilation.


00:14:20.440 --> 00:14:21.800
- Yeah, yeah, I think it's a big one, right?


00:14:21.800 --> 00:14:22.640
Like performance.


00:14:22.640 --> 00:14:24.800
the more people use Python, the more relevant


00:14:24.800 --> 00:14:26.960
the whole performance story becomes for people


00:14:26.960 --> 00:14:29.440
because then it's like, yeah, it has a huge impact


00:14:29.440 --> 00:14:30.560
if you have a small improvement.


00:14:30.560 --> 00:14:31.400
- Yeah, absolutely.


00:14:31.400 --> 00:14:33.160
There's tons of attempts to solve this problem.


00:14:33.160 --> 00:14:35.600
There's Rust Python and there's Grumpy


00:14:35.600 --> 00:14:37.840
and there's all these different attempts on solving it.


00:14:37.840 --> 00:14:40.060
And PyPy, like Trey said, is really awesome,


00:14:40.060 --> 00:14:43.680
but it has this limitation where when it gets


00:14:43.680 --> 00:14:47.400
to the C interop stuff, it can slow down


00:14:47.400 --> 00:14:48.800
or it doesn't necessarily work with all of them,


00:14:48.800 --> 00:14:50.920
so it kind of falls back then.


00:14:50.920 --> 00:14:52.720
And with Pigeon and the work that Brett Cannon


00:14:52.720 --> 00:14:54.560
and those guys did, it's really awesome


00:14:54.560 --> 00:14:56.800
'cause that's a plug-in to the normal CPython,


00:14:56.800 --> 00:14:58.440
so it wouldn't be like an alternative thing.


00:14:58.440 --> 00:15:00.400
So yeah, I would love to see this as well.


00:15:00.400 --> 00:15:01.240
It'd be great.


00:15:01.240 --> 00:15:02.060
- Yeah, great idea.


00:15:02.060 --> 00:15:04.640
All right, item number two is on the wishlist


00:15:04.640 --> 00:15:09.060
is a stable .0, like a stable 4.0 release.


00:15:09.060 --> 00:15:10.000
- Is that a lot to ask?


00:15:10.000 --> 00:15:11.160
- I don't know, man, you tell me.


00:15:11.160 --> 00:15:13.160
(all laughing)


00:15:13.160 --> 00:15:14.000
- I feel like this one,


00:15:14.000 --> 00:15:15.840
this was because of 3.0 history, right?


00:15:15.840 --> 00:15:17.720
That there were lots of breaking changes,


00:15:17.720 --> 00:15:20.040
that the initial was kind of a rewrite


00:15:20.040 --> 00:15:21.240
the language from my understanding,


00:15:21.240 --> 00:15:22.720
although I'm not a core developer, I don't know.


00:15:22.720 --> 00:15:25.160
- The central point of that in the blog post here is that,


00:15:25.160 --> 00:15:26.720
well, you only have one chance


00:15:26.720 --> 00:15:27.860
to make a first impression really.


00:15:27.860 --> 00:15:31.680
And so maybe Python 3 kind of bumbled its way


00:15:31.680 --> 00:15:33.080
into life or whatever.


00:15:33.080 --> 00:15:34.600
I think now we're super happy that we have it,


00:15:34.600 --> 00:15:37.120
but I don't actually really remember the zero release


00:15:37.120 --> 00:15:38.460
or the 0.1 release.


00:15:38.460 --> 00:15:39.520
- I don't know if anyone does.


00:15:39.520 --> 00:15:40.960
- Yeah, it's like, let's not talk about that.


00:15:40.960 --> 00:15:42.360
Let's just move on.


00:15:42.360 --> 00:15:43.540
No, I'm sure it was great.


00:15:43.540 --> 00:15:45.120
All right, static type hinting.


00:15:45.120 --> 00:15:46.920
I think that's a really good idea too.


00:15:46.920 --> 00:15:47.800
I mean, you know, we've got mypy,


00:15:47.800 --> 00:15:49.500
but it's optional right now.


00:15:49.500 --> 00:15:57.020
And it would be kind of interesting to see that integrated into CPython or the core language


00:15:57.020 --> 00:15:59.020
if this is really the path forward.


00:15:59.020 --> 00:16:02.780
And I'm not actually sure what the roadmap says there.


00:16:02.780 --> 00:16:03.980
Yeah, I don't know either.


00:16:03.980 --> 00:16:04.700
It's pretty interesting.


00:16:04.700 --> 00:16:06.780
I think static typing is super valuable.


00:16:06.780 --> 00:16:12.780
I think having it mean something in the language, that would change the zen of Python, wouldn't it?


00:16:12.780 --> 00:16:15.660
I mean, because it's so much about the duck typing and I don't have to worry about it.


00:16:15.660 --> 00:16:17.340
It's like, "Whoa, compilation error.


00:16:17.340 --> 00:16:18.540
We expected a..."


00:16:18.540 --> 00:16:21.300
I runnable of whatever, right?


00:16:21.300 --> 00:16:24.740
Multiple templated thing and yeah, I don't know.


00:16:24.740 --> 00:16:25.700
I don't know about that.


00:16:25.700 --> 00:16:28.380
- We really changed the face of the language, I think.


00:16:28.380 --> 00:16:30.340
- Yeah, I like what he's recommending here.


00:16:30.340 --> 00:16:33.380
I'm not so sure about the required static type hinting.


00:16:33.380 --> 00:16:35.700
Maybe like a mode to run it where you can check it.


00:16:35.700 --> 00:16:36.820
I mean, we have data classes


00:16:36.820 --> 00:16:38.900
which do some validation in a sense.


00:16:38.900 --> 00:16:40.140
- You're wrong, Anthony.


00:16:40.140 --> 00:16:41.580
No, like we're like,


00:16:41.580 --> 00:16:44.100
we're just,


00:16:44.100 --> 00:16:46.300
this is some really interesting thoughts about this


00:16:46.300 --> 00:16:47.820
because you know, what should go into it?


00:16:47.820 --> 00:16:52.820
Because obviously it's a big release, right?


00:16:52.820 --> 00:16:54.400
If you're talking about Python 4.0,


00:16:54.400 --> 00:16:56.400
it better be a really, really noticeable improvement.


00:16:56.400 --> 00:16:59.600
Otherwise people are going to go like, "Oh."


00:16:59.600 --> 00:17:00.980
Which would be nice too.


00:17:00.980 --> 00:17:02.840
If it's just a 4.0 release


00:17:02.840 --> 00:17:04.420
and there's no upgrade hump like we had from two to three,


00:17:04.420 --> 00:17:08.740
that's kind of nice too.


00:17:08.740 --> 00:17:09.760
Paul: Right, well, and he does mention the idea


00:17:09.760 --> 00:17:11.400
of static duck typing,


00:17:11.400 --> 00:17:12.780
putting an iterator in there


00:17:12.780 --> 00:17:13.820
as opposed to a generator-specific type of thing.


00:17:13.820 --> 00:17:15.820
But I don't know how you would really make that


00:17:13.140 --> 00:17:14.900
a truly generic thing.


00:17:14.900 --> 00:17:16.140
- Yeah, well, as long as we don't end up


00:17:16.140 --> 00:17:17.940
with a Python 3 death clock.


00:17:17.940 --> 00:17:18.780
(all laughing)


00:17:18.780 --> 00:17:20.740
It'll be in a pretty good place.


00:17:20.740 --> 00:17:23.180
- Nice, okay, so the next item we have here


00:17:23.180 --> 00:17:25.820
is a GPU story for multiprocessing.


00:17:25.820 --> 00:17:28.700
So I guess the idea is that a lot of workloads


00:17:28.700 --> 00:17:31.320
that people use Python for these days


00:17:31.320 --> 00:17:33.100
are actually running on GPUs.


00:17:33.100 --> 00:17:34.820
You know, a lot of, I guess, like the deep learning stuff


00:17:34.820 --> 00:17:36.300
is all running on GPUs these days.


00:17:36.300 --> 00:17:38.980
And so wouldn't it be cool if Python 4.0


00:17:38.980 --> 00:17:42.300
actually had some facilities to run stuff on the GPU


00:17:42.300 --> 00:17:43.900
for like parallel computations


00:17:43.900 --> 00:17:45.500
and how to build into the language.


00:17:45.500 --> 00:17:46.540
Wouldn't that be sweet?


00:17:46.540 --> 00:17:47.740
It's an interesting idea for sure.


00:17:47.740 --> 00:17:49.060
- Maybe like another decorator,


00:17:49.060 --> 00:17:51.460
like an @GPU method and you just copy it.


00:17:51.460 --> 00:17:52.740
- And we're done.


00:17:52.740 --> 00:17:54.240
Add some type pins and boom.


00:17:54.240 --> 00:17:55.260
Yeah, and the last item here


00:17:55.260 --> 00:17:57.460
on this really interesting list is,


00:17:57.460 --> 00:18:00.460
number five is more community contributions.


00:18:00.460 --> 00:18:03.820
And I think Anthony is saying that he's already seen,


00:18:03.820 --> 00:18:05.180
you know, like a lot more involvement


00:18:05.180 --> 00:18:06.700
from the larger community.


00:18:06.700 --> 00:18:09.220
And now that CPython is hosted on GitHub


00:18:09.220 --> 00:18:12.220
and there's less barriers for people to contribute.


00:18:12.220 --> 00:18:14.320
I guess, to the code.


00:18:14.320 --> 00:18:17.000
And just seeing more growth in that


00:18:17.000 --> 00:18:19.700
and seeing more people involved in the actual development


00:18:19.700 --> 00:18:21.200
of CPython would be pretty sweet.


00:18:21.200 --> 00:18:22.120
I totally agree.


00:18:22.120 --> 00:18:23.120
What do you think, Eric?


00:18:23.120 --> 00:18:24.540
A lot of these features, I haven't


00:18:24.540 --> 00:18:27.480
been coding long enough to have a strong opinion about one


00:18:27.480 --> 00:18:28.440
or the other.


00:18:28.440 --> 00:18:32.080
But I think to me, obviously, optimizing for hardware,


00:18:32.080 --> 00:18:34.200
and who would say no to that?


00:18:34.200 --> 00:18:38.380
But to me, the 4.0 story would be big in terms of this


00:18:38.380 --> 00:18:41.980
would be the first major release without having a BDFL.


00:18:41.980 --> 00:18:46.980
And I guess we'll figure it out by then how 3.8 came about


00:18:46.980 --> 00:18:49.960
and all the peps, but this will be a major release


00:18:49.960 --> 00:18:52.300
where it's determined, I guess, by the committee.


00:18:52.300 --> 00:18:53.460
So it will be kind of interesting


00:18:53.460 --> 00:18:55.620
and just see how that transition going


00:18:55.620 --> 00:18:58.620
and hopefully for the long term in 5.0, 6.0.


00:18:58.620 --> 00:19:01.780
- I feel like even outside of the core developing team,


00:19:01.780 --> 00:19:04.860
Python naturally has had more community involvement


00:19:04.860 --> 00:19:07.060
over the years and it'd be nice to see that with the 4.0


00:19:07.060 --> 00:19:08.380
because I mean, even this podcast,


00:19:08.380 --> 00:19:10.880
like you mentioned DunderPi packages recently


00:19:10.880 --> 00:19:14.000
And that's not a PEP that's actually ready.


00:19:14.000 --> 00:19:16.480
That's something, it may or may not make it into Python.


00:19:16.480 --> 00:19:18.560
That's a discussion that normally happens,


00:19:18.560 --> 00:19:21.200
not behind closed doors, but in an open space


00:19:21.200 --> 00:19:23.200
that no one looks in, which is the core developer


00:19:23.200 --> 00:19:25.080
mailing list, whereas it's on a podcast now.


00:19:25.080 --> 00:19:27.000
- Some random people in Portland dug it up


00:19:27.000 --> 00:19:29.160
and talked about it on the internet and all helped.


00:19:29.160 --> 00:19:30.800
- Getting all the dirt on your Python.


00:19:30.800 --> 00:19:33.360
- Yeah, so that's it for all of our main items.


00:19:33.360 --> 00:19:35.180
Just a couple of quick extra ones from me.


00:19:35.180 --> 00:19:37.640
One, I did an async webcast, which is available.


00:19:37.640 --> 00:19:39.800
So if you want like one hour review


00:19:39.800 --> 00:19:42.200
of what async and await means and why.


00:19:42.200 --> 00:19:45.940
I think now is the time for async in Python


00:19:45.940 --> 00:19:47.300
and you don't have to switch to go.


00:19:47.300 --> 00:19:49.840
It's already awesome, just use it.


00:19:49.840 --> 00:19:50.680
So you can check that out.


00:19:50.680 --> 00:19:51.680
I'll link that in the show notes.


00:19:51.680 --> 00:19:54.740
And then if you happen to be somewhere near Tel Aviv


00:19:54.740 --> 00:19:57.780
or Israel at least, the first week of June,


00:19:57.780 --> 00:20:00.680
they're having PyCon Israel, which is pretty awesome.


00:20:00.680 --> 00:20:04.080
And call for proposals is open just a couple of days ago.


00:20:04.080 --> 00:20:05.680
So yeah, those are my extra items.


00:20:05.680 --> 00:20:06.680
And you guys got anything else?


00:20:06.680 --> 00:20:07.720
- Yeah, quick announcement.


00:20:07.720 --> 00:20:10.640
We're working on a new book for real Python.


00:20:10.640 --> 00:20:12.160
We're going to release three real Python.


00:20:12.160 --> 00:20:13.800
It's called the Python Basics Books.


00:20:13.800 --> 00:20:15.640
It's like a beginner's book for people


00:20:15.640 --> 00:20:17.160
who want to get into Python in the first place.


00:20:17.160 --> 00:20:20.560
And Mike actually wrote the forward for it.


00:20:20.560 --> 00:20:23.620
And it's great, but it also kind of duplicates


00:20:23.620 --> 00:20:25.080
what we had said in the intro.


00:20:25.080 --> 00:20:26.760
So that means we've got to rip out a bunch of stuff


00:20:26.760 --> 00:20:28.640
and then use this forward as a new intro


00:20:28.640 --> 00:20:30.300
because it's so much better than what we had.


00:20:30.300 --> 00:20:31.140
Thank you, Mike.


00:20:31.140 --> 00:20:31.980
- You're welcome.


00:20:31.980 --> 00:20:33.600
- And shameless plug for the book.


00:20:33.600 --> 00:20:34.920
- Thanks for making me work.


00:20:34.920 --> 00:20:37.120
So the only thing I have to share


00:20:37.120 --> 00:20:39.200
is that some things in my world,


00:20:39.200 --> 00:20:42.280
I have a goal for myself to write more


00:20:42.280 --> 00:20:45.360
because writing blog posts takes me so much time.


00:20:45.360 --> 00:20:47.720
And so that's something that I'm just announcing


00:20:47.720 --> 00:20:50.000
publicly here only so that I will commit to it


00:20:50.000 --> 00:20:52.440
over the next quarter or so.


00:20:52.440 --> 00:20:54.080
And there's some kind of big things


00:20:54.080 --> 00:20:55.760
that folks on my mailing list know with Python more,


00:20:55.760 --> 00:20:57.200
so it's gonna be coming up soon.


00:20:57.200 --> 00:20:57.920
- Yeah, sounds great.


00:20:57.920 --> 00:21:00.800
So I guess we gotta close this out with a joke.


00:21:00.800 --> 00:21:02.600
So we got a whole list of jokes here


00:21:02.600 --> 00:21:04.320
and I'll just grab two for you guys


00:21:04.320 --> 00:21:06.840
and let you all see what you think here.


00:21:06.840 --> 00:21:10.860
So why did the angry function exceed its call stack size?


00:21:10.860 --> 00:21:12.660
It got into an argument with itself.


00:21:12.660 --> 00:21:14.740
(audience laughing)


00:21:14.740 --> 00:21:15.580
No, no, so.


00:21:15.580 --> 00:21:17.160
(audience laughing)


00:21:17.160 --> 00:21:18.540
Oh no, oh no, there's more.


00:21:18.540 --> 00:21:20.820
(audience laughing)


00:21:20.820 --> 00:21:24.540
But wait, why did the developer ground their child?


00:21:24.540 --> 00:21:26.640
As in, you can't go out, you're in trouble,


00:21:26.640 --> 00:21:28.080
you stay home for the week.


00:21:28.080 --> 00:21:29.580
They weren't telling the truthy.


00:21:29.580 --> 00:21:32.300
And with that, I think we're gonna close it out


00:21:32.300 --> 00:21:34.740
'cause that's, what are we gonna do with that?


00:21:34.740 --> 00:21:37.240
All right, so Trey, Dan, Eric,


00:21:37.240 --> 00:21:38.080
thank you all for being here. - Thank you.


00:21:38.080 --> 00:21:40.120
- And everybody, thank you so much for coming.


00:21:40.120 --> 00:21:43.120
(audience cheering)


00:21:43.120 --> 00:21:46.200
PyCascades was great.


00:21:46.200 --> 00:21:49.000
Brian, we miss you, and see y'all later.


00:21:49.000 --> 00:21:50.720
Thank you for listening to Python Bytes.


00:21:50.720 --> 00:21:53.180
Follow the show on Twitter via @PythonBytes,


00:21:53.180 --> 00:21:56.240
that's Python Bytes as in B-Y-T-E-S.


00:21:56.240 --> 00:21:59.440
And get the full show notes at PythonBytes.fm.


00:21:59.440 --> 00:22:01.040
If you have a news item you want featured,


00:22:01.040 --> 00:22:03.480
just visit PythonBytes.fm and send it our way.


00:22:03.480 --> 00:22:06.360
we're always on the lookout for sharing something cool.


00:22:06.360 --> 00:22:08.200
On behalf of myself and Brian Okken,


00:22:08.200 --> 00:22:09.520
this is Michael Kennedy.


00:22:09.520 --> 00:22:11.520
Thank you for listening and sharing this podcast


00:22:11.520 --> 00:22:13.160
with your friends and colleagues.

