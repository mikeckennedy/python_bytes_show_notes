00:00:00 Hello and welcome to Python Bytes, Python news and headlines delivered directly to your earbuds.

00:00:06 It's Wednesday, April 12th, 2017, and this is episode 21.

00:00:11 Here, I'm Michael Kennedy.

00:00:13 And I'm Brian Okken.

00:00:14 And we're going to tell you about all the cool things we found this week in the Python

00:00:17 ecosystem.

00:00:18 But before we get to that, Brian, let's say thanks.

00:00:20 Well, thank you, Michael.

00:00:21 Yes, you're welcome.

00:00:22 Thanks to Rollbar, actually.

00:00:23 Oh, yeah, yeah, definitely.

00:00:24 Thank you, Rollbar.

00:00:25 Yeah, thanks.

00:00:26 Thank you, Rollbar.

00:00:27 They're sponsoring this episode again.

00:00:29 And if you want to check out Rollbar, get some special deals.

00:00:32 It's rollbar.com slash Python Bytes.

00:00:33 We'll talk more about them later.

00:00:34 Brian, let's talk about some profiling.

00:00:38 Doug Hellman, he's the guy that did the Python module of the week.

00:00:43 I don't even know when that started for Python 2.

00:00:46 But he has, and I can't remember when he started the third one.

00:00:50 But I don't know if we've mentioned it on the show yet.

00:00:52 But it's a really good resource.

00:00:55 It's P-Y-M-O-T-W dot com Python module of the week.

00:00:59 And he goes through a lot of the standard library and just does a little page on how to use

00:01:06 different bits of the standard library.

00:01:08 And this recently put up profile and p stats.

00:01:12 And it talks about profile and cprofile for basically just for taking, if you have a piece

00:01:19 of your code that you think might be slow, how to profile that and figure it out.

00:01:23 So I wanted to highlight that.

00:01:25 Yeah, I definitely.

00:01:26 I think this is awesome.

00:01:27 You know, Doug, way to go.

00:01:28 Very, very cool.

00:01:29 And keep going with that.

00:01:31 We're going to be checking out, of course, as you roll out new ones.

00:01:34 I definitely want to encourage people to think about profiling.

00:01:37 I've been doing a lot of work recently on certain parts of my web app where performance is somewhat

00:01:44 important and things have changed, right?

00:01:47 So, for example, I switched out the database backend.

00:01:49 And depending on how that was working, like it used to be really fast, became slow in some

00:01:54 situations.

00:01:54 Maybe I needed to restructure the way my data was stored.

00:01:58 Maybe I needed new indexes or whatever.

00:02:01 Even just profiling the web application itself actually can tell you a lot about not just

00:02:06 where your Python is slow, but where the web services you're connecting to are slow or the

00:02:11 databases you're talking to are slow.

00:02:12 Or you can see something like, you made 600 requests to the database during this page load.

00:02:18 You can really bet there's probably some sort of lazy loading problem going on, right?

00:02:23 And so sometimes just a cursory glance at profiling stats will tell you, like, oh, I didn't realize I was

00:02:30 doing that wrong.

00:02:30 And you quickly fix it.

00:02:31 So definitely check that out.

00:02:33 So the built-in profile stuff and C-profile works great for a lot of the stuff I work on, but I'm not

00:02:41 often working on web stuff.

00:02:43 Are those the right tools for something like web applications or are there other things that you

00:02:48 search for?

00:02:49 One of the things that can be challenging about profiling web apps is there's a lot of startup

00:02:54 code that runs.

00:02:55 And that can be, like, computational.

00:02:57 So you can, like, if you try to profile your app as it starts up, it could be swamped with

00:03:02 actual, like, just getting the thing going traffic.

00:03:07 And then you hit a request for a page and it's small enough it doesn't show up.

00:03:10 So maybe you've got to hit it 100 times or, you know, something to get it to happen.

00:03:14 So what I do, I don't know about the other frameworks.

00:03:17 Pretty sure they must have something like this.

00:03:19 But in Pyramid, by default, there's a little red box on the right side in development mode.

00:03:26 And you can click on it.

00:03:27 It'll take you to, it's, like, called the Pyramid Debug Toolbar.

00:03:30 It takes you, you go to the back there.

00:03:31 And one of the options is to turn on profiling per page request.

00:03:35 So you just check a box and then request a page and you can, it'll tell you how many

00:03:39 milliseconds it took.

00:03:40 And if you click on it, it'll give you the output from this just for that page.

00:03:43 Automatically.

00:03:44 So you don't have to do anything.

00:03:45 Yeah, it's super cool.

00:03:46 All right.

00:03:46 Well, thanks.

00:03:47 Yeah, sure.

00:03:48 Speaking of the web.

00:03:49 So we have a new project coming out that I wanted to bring everyone's attention to.

00:03:54 I don't know how old it is.

00:03:56 It's like weeks, maybe months.

00:03:58 I'm not sure.

00:03:59 It's not very old.

00:03:59 By Tom Christie.

00:04:00 So you may know Tom Christie from the Django REST framework.

00:04:04 And he came up with something called API Star.

00:04:07 And this is an alternate REST framework.

00:04:11 Okay.

00:04:12 So Django REST framework's been around for, like, five years.

00:04:14 And it's very popular.

00:04:16 It's well-known.

00:04:17 It's highly used.

00:04:19 But it's also very much wedded with the Python 2 prior web world.

00:04:25 Right?

00:04:26 I mean, it's from five years ago, right?

00:04:28 And it's based on stuff that was, you know, sort of put in a motion before then.

00:04:32 So it's not...

00:04:33 If you want to explore some new and interesting ideas, you can't really do it.

00:04:36 And that's what Tom was saying.

00:04:37 So he actually came up with this thing called API Star.

00:04:41 And it has got some slick features that are really worth looking at.

00:04:46 It's really new.

00:04:47 So I don't know if it's quite ready for primetime.

00:04:49 I just honestly don't know.

00:04:50 I'm not saying it's not.

00:04:51 But the idea is he calls it a smart web API framework designed specifically for Python 3.

00:04:57 And it's super easy to get start.

00:04:58 Just start to just pip install API Star.

00:05:01 And you can say API Star-new and template-minimal or dash-template-minimal.

00:05:05 Right?

00:05:05 That'll get one.

00:05:05 You can either run it or you can run the test straight away.

00:05:07 So I thought you would like that little API Star space test.

00:05:10 That's pretty cool.

00:05:11 Yeah.

00:05:12 And nice interface, too.

00:05:13 It looks really clean.

00:05:15 Yeah.

00:05:15 So here's where the magic comes in.

00:05:17 It's all about the type annotations.

00:05:20 So in Python 3, you can say, like, I could define a function called, like, show query parameters.

00:05:25 And I could have a thing called query parameters.

00:05:27 If I wanted it to be of type HTTP.queryparams, I would say colon HTTP.queryparams.

00:05:34 And that tells Python, not at runtime, but at design time or development time, hey, this thing's supposed to be a query params instance, right?

00:05:43 Yeah.

00:05:43 Okay.

00:05:44 That's cool.

00:05:45 Okay.

00:05:45 So now here, check this out.

00:05:46 If you put a parameter on that API method and you say it is one of those and it's available as part of the request, it will automatically come into your system regardless of what you call it and where you put it.

00:05:57 Oh, nice.

00:05:58 It looks at the type hints, the type parameters.

00:06:00 So the thing you're saying, this thing called query params, you want the query params?

00:06:04 I have one of those in the request.

00:06:06 And similarly, if you return something from there, by default, you return dictionaries like all these web frameworks in Python do.

00:06:14 But you can also use type annotations to say, no, this returns a response and then return something else.

00:06:19 Like actually using the type annotation to control how the processing of the request is done.

00:06:26 Similarly, you can put things in like your URL.

00:06:29 So write like slash slash users slash seven, right?

00:06:34 And normally that would all just come in as a string.

00:06:37 But in this API, you can say like as a function on your REST method, you can say like user ID colon int and it will take that thing and convert it to an int out of the URL and pass it in.

00:06:48 So there's all this really cool stuff around type hinting that I just type annotations.

00:06:51 I really love.

00:06:53 And not only that, it's faster than Sanic.

00:06:55 Okay.

00:06:56 So very, very cool.

00:06:58 Good job, Tom.

00:06:58 Yeah.

00:06:59 And now that I know you said that already and I kind of went past me without me recognizing it.

00:07:05 But the built in testing with pytest.

00:07:07 Yay.

00:07:07 Yay.

00:07:08 It's awesome, right?

00:07:09 Yeah, definitely.

00:07:10 Cool.

00:07:10 Yeah.

00:07:11 So it's a really new framework.

00:07:12 Check it out.

00:07:13 It's already got quite a few stars on GitHub.

00:07:15 But yeah, API star.

00:07:16 There's a link in the notes.

00:07:17 And there's a little example code as well.

00:07:19 All right.

00:07:19 But that's about fast web frameworks.

00:07:22 But sometimes we don't care if things are fast, right?

00:07:23 Yeah.

00:07:24 So actually, we're kicking around the idea of talking about this last week and decided not to.

00:07:28 But we're putting it in now.

00:07:29 It's an article called, Yes, Python is slow and I don't care.

00:07:34 And, you know, actually, I've never really noticed that being slow for what I have it for.

00:07:39 But basically, that's kind of the point of the article is that fast is great.

00:07:46 Having Sanic and API star be super fast.

00:07:50 Of course, that's wonderful.

00:07:51 But there's a lot of Python uses for Python and for other programming that the most expensive resource is not your CPU.

00:07:59 Actually, it's very seldom your CPU anymore.

00:08:02 So therefore, you usually don't really have to care about the speed of Python.

00:08:07 And I'd have to agree.

00:08:09 And a big chunk of this article is you should be optimizing for your most expensive resource.

00:08:15 And that's your people.

00:08:16 Your people are way more expensive than your computer time.

00:08:19 So are bugs.

00:08:20 Yes, and definitely.

00:08:22 And so are bugs.

00:08:23 I know that myself, we have at work, we use Python for testing.

00:08:29 And it's because we can write smaller test code.

00:08:31 And the time our tests run is all in IO time.

00:08:36 It's communicating with instruments.

00:08:37 It's not sitting in our computer.

00:08:40 And so I can have small, elegant tests that I can read well is way more important than how fast Python is.

00:08:48 Yeah.

00:08:48 You want to, you know, you're talking about testing devices and hardware.

00:08:52 Same thing applies to the web, right?

00:08:53 Usually waiting on either a database, a web surface, or a socket somewhere.

00:08:57 And the timing usually doesn't matter, right?

00:09:00 Yeah.

00:09:00 Well, I mean, of course you want it to be fast.

00:09:02 But that's not the slow part isn't the Python.

00:09:05 So actually, I guess that ties in with the other articles we've had so far.

00:09:12 Developing an API quickly and elegantly is going to eliminate mistakes better.

00:09:17 If you can do that with less code, great.

00:09:19 Yeah, absolutely.

00:09:20 Well, and if things are slow, right?

00:09:22 There's always options, right?

00:09:23 You could write it in C.

00:09:24 You could write it in Rust.

00:09:25 You could write it in Cython.

00:09:26 Like, you could take that little bit and do something.

00:09:28 Or just like you started at the beginning, profile it and change your algorithm.

00:09:32 It very well may be that that makes a huge difference.

00:09:35 Yeah.

00:09:36 And it might be that you think it's Python.

00:09:38 But like you said, it might be your database or you're accessing some resource or something.

00:09:43 Figure that out.

00:09:44 And then if it really is Python, which I think there's rare cases where it really is.

00:09:49 But if it is, there's options with Cython and such.

00:09:53 Or taking a look at Intel's offering or PyPy or something.

00:09:58 Yeah, exactly.

00:09:58 I just heard, saw some stuff that PyPy is supposed to be getting quite a bit faster still.

00:10:03 And of course, they got that big grant from Mozilla to make Python 3 work much better.

00:10:06 So all sorts of goodness there.

00:10:08 Yeah, definitely.

00:10:09 Now, before we get to the next item, let me tell you about Rollbar.

00:10:12 You guys probably heard me talk about it before, but I've been using Rollbar for a long time.

00:10:16 And the idea is you basically put a few lines of code into your web application.

00:10:22 And if ever there's an error, it will automatically capture all the information that you need about it

00:10:27 and ship that over to Rollbar and then send you a notification, all sorts of different ways you can get notifications.

00:10:33 And it comes with almost all the context you need to actually solve the problem.

00:10:37 So, for example, it might have the stack trace and the local variables and the URL and all those sorts of things that you might not even have to debug your code.

00:10:46 You can just look at and go, oh, dear, I need to check for this or make sure that's not done or whatever, right?

00:10:51 So if you want more reliable web apps, just be sure to check out rollbar.com slash pythonbytes.

00:10:57 Wonderful.

00:10:57 Wonderful.

00:10:57 Thank you, Rollbar.

00:10:58 And we have Rollbar to thank for why Python Bytes' website is always up.

00:11:03 Yeah, that's right.

00:11:04 Absolutely.

00:11:05 It's integrated in all the sites.

00:11:07 It's beautiful.

00:11:08 So one of the things that I kind of want to take us back to the basics for a minute, okay?

00:11:13 So one of the things that I think people, many people know about, but a lot of people don't, is hashing.

00:11:19 When to use hashing, how to use hashing, and things like that.

00:11:23 So there's a nice article called A Quick Introduction to Hashing by Gerald Nash.

00:11:28 And this is specifically for Python developers.

00:11:31 And has some nice examples of, like, if I want to hash a string, you know, using, say, SHA-256 or something like that for the hash, how do I do that?

00:11:40 What does that look like?

00:11:41 Can we back up a second in what is a hash?

00:11:44 Sure.

00:11:45 So a hash is a little bit like encryption in that you can look at the hash and you basically, it's obfuscated, right?

00:11:53 You don't really know what it is.

00:11:54 But unlike encryption, it doesn't, it can't be reversed.

00:11:56 It can't be unhashed, right?

00:11:58 You might take a 10 megabyte set of data and hash that into 256 characters or something like that, right?

00:12:06 The idea is if you have the same input and you run the hash over and over again, you should get the same output.

00:12:13 Okay.

00:12:14 But even if it varies slightly, you'll get a totally different output.

00:12:18 Not a little bit different, but dramatically, like unrelated sort of type of thing.

00:12:22 And so it's used for verifying messages, verifying like download files are not tampered with.

00:12:27 But most importantly, it's used for passwords, right?

00:12:30 Storing raw passwords in a database, not the best.

00:12:33 So we typically hash them.

00:12:35 But there's all sorts of other interesting uses you can use for hashing.

00:12:38 So like in my websites, I have the static files, JavaScript, CSS, images, et cetera, basically cached like super hard.

00:12:47 So they're cached for a year at least, I think, maybe possibly longer.

00:12:52 So if you go to the site and you like come back later, it's not going to go back and look again.

00:12:57 And so what I do, the technique to make sure that nothing ever shows up stale on the site, right, you don't have to wait a year for it to like come back together, is I put a little hash of the raw files at the end of the URL of every bit of static content that I have.

00:13:11 And so it caches it, but it caches it with the like the fingerprint of it embedded.

00:13:16 So if the file ever changes, it instantly generates a new file and it pulls it out.

00:13:21 So hashing is used for all sorts of good stuff.

00:13:23 Okay.

00:13:23 Yeah.

00:13:24 So anyway, it's a great little article.

00:13:25 I'll show you guys how to do that.

00:13:26 So if you're not, if you're not taking advantage of hashes, they're super easy.

00:13:30 Here's a nice way to see how to do it.

00:13:31 Wonderful.

00:13:32 This is a very fun article.

00:13:34 I forgot to write this person's name, but there's an article called Wedding at Scale, How I Used Twilio, Python, and Google to Automate My Wedding.

00:13:42 I feel like I missed this opportunity when I got married.

00:13:45 Yeah.

00:13:46 And this is just fun.

00:13:47 And actually, the modern person's problem with like how to invite people.

00:13:52 And I love this article.

00:13:56 I'm just, you know, the nerd in me likes it.

00:13:58 There's no way I would have had time to figure this out when I was trying to plan my wedding.

00:14:02 But if you got the time, it's great.

00:14:04 So through all of all the potential guests and their phone numbers into Google Spreadsheet and then used Python and a Python package called G Spread to access Google Spreadsheets and pull that out.

00:14:20 And with Python used Twilio and SMS people and invitation to the wedding.

00:14:25 And then not only that, left URLs for people to get back to him.

00:14:30 I guess there's URLs and there's also like replies to have a set up a Flask app to collect everything of all the replies to that.

00:14:41 And then even goes on to sending out reminder texts and having people select which food option they wanted.

00:14:49 And it's pretty incredible, this story.

00:14:51 Yeah, a real mashup of a bunch of cool technologies.

00:14:53 That's awesome.

00:14:54 Yeah, it's cool.

00:14:55 Nice.

00:14:56 I have another fun one for us for our last item here today.

00:14:59 And I've got to be careful about how I speak about this device because my understanding is speaking of it causes it to do things.

00:15:07 So let's call it the Amazon virtual assistant thing that sits on your desk.

00:15:13 All right?

00:15:13 Okay.

00:15:13 Okay.

00:15:14 So there's a guy who created a framework for creating what are called skills on this assistant.

00:15:21 Right?

00:15:22 So you can teach it to do new things.

00:15:23 And the guy who wrote this article is Neil Stewart.

00:15:27 And what I thought was really interesting was he was like visiting a friend or something like that.

00:15:31 And they had one of these assistants.

00:15:34 And he thought it was really cool.

00:15:36 He's like, I'm ordering one.

00:15:37 But he decided like, I'm going to challenge myself to build a new skill for it before it even arrives.

00:15:43 So as developing for hardware, that's a pretty interesting idea, like to develop for it before it exists, you know, in your hands, right?

00:15:49 Yeah, we do it all the time.

00:15:50 Yeah, right.

00:15:51 So the thing that he came up with is something called VoiceOps.

00:15:53 So he has a bunch of AWS accounts and whatnot.

00:15:56 And he can ask it things like, how's the status of his AWS servers and whatnot.

00:16:01 And he'll tell him how many running and stopped instances there are, what RDS databases are on his account, and things like that.

00:16:08 So that's a pretty fun skill to add to this assistant.

00:16:11 Yeah, I didn't know you could do that, add skills to it.

00:16:14 That's pretty cool.

00:16:15 Yeah, and apparently you can do it in Python, which is even cooler.

00:16:17 So he looked around and saw that there's a few things, but he wasn't really happy with it.

00:16:21 So he decided to create a new framework called Python, the name of the thing.

00:16:26 And it's open source on GitHub.

00:16:27 The article here that we have linked, this one actually has a bunch of cool examples on how to affectionate.

00:16:34 He has a hello world type of thing.

00:16:36 And he also linked to something called Echo Shim.

00:16:39 And Echo Shim allows you to create one of these skills, put it into AWS and run it on their Lambda system on Python,

00:16:48 and then test it in the browser without even having hardware.

00:16:52 Oh, cool.

00:16:53 Yeah, so pretty fun project.

00:16:55 So if people are into that assistant thing in Python, check it out.

00:16:59 I will check it out.

00:17:00 That's neat.

00:17:00 Yeah, I haven't gotten more.

00:17:01 Do you have one of those things?

00:17:02 Any of those, like a Google Home or those types of things?

00:17:06 No, actually that whole concept of like letting some other company just listen to my house.

00:17:11 I don't like the idea.

00:17:12 So anyway.

00:17:14 Yeah, I'm not there yet either.

00:17:15 I, I, I'm not super crazy about privacy and whatnot.

00:17:19 Like, no, I'm not.

00:17:20 Locations on my smartphone and stuff.

00:17:22 But that somehow like crosses a little bit of a line to me.

00:17:25 I don't know.

00:17:26 I'm sure I'll be over it someday.

00:17:27 Plus, I don't really.

00:17:28 Yeah, I don't trust my kids to not just order a bunch of stuff all the time just by talking to it.

00:17:33 Yeah.

00:17:34 Like after what happened the first time I got an iPhone that had Siri on it.

00:17:38 I know what the kids did to that thing.

00:17:41 This is even more accessible to them.

00:17:43 So I'm not sure I want that anywhere near my kids.

00:17:45 Awesome.

00:17:47 So that's it for the week.

00:17:48 Brian, what do you got going on with you personally?

00:17:50 I had an interview with Casey Rosenthal from Netflix on chaos engineering that I finally got edited and out last week on testing code.

00:18:01 So that's out there.

00:18:03 Oh, like chaos monkey, chaos gorilla, all that kind of stuff they do at Netflix.

00:18:06 Yeah.

00:18:06 And basically, we tried to talk about not just what they're doing there, but the concept of taking steady state measurements and doing experiments that might change the steady state on a system as opposed to traditional testing methods.

00:18:22 It's pretty interesting.

00:18:23 Yeah, nice.

00:18:24 Oh, very cool.

00:18:25 I'm definitely going to listen to that.

00:18:26 That's great.

00:18:26 How about you?

00:18:27 So I spent the weekend reworking a bunch of my web stuff around the training course, training courses, training site, and so on.

00:18:34 So I rebuilt a new player because I wanted to surface the closed captioning a little bit better for people, things like that.

00:18:41 So I did a bunch of JavaScript and whatnot.

00:18:44 And the other thing I did is I added full text search to the whole site.

00:18:48 So you go there and you can search like into the videos even, into the text of the videos.

00:18:54 So it's beautiful.

00:18:56 Nice.

00:18:56 This is what I was actually, yeah, this is actually what I was thinking about when we were talking about profiling.

00:19:01 So when I first wrote this, I wrote it like what you might think of as like naively.

00:19:04 I wrote it and it's all backed by like a bunch of text data in MongoDB.

00:19:09 It's not using full text in Mongo.

00:19:10 It's using something else that I've done.

00:19:12 But basically, the backend is Mongo and there's a bunch of data in there, like 10 megs, 20 megs.

00:19:18 I'm not sure exactly how much of text that I wanted to search.

00:19:21 And I ran this.

00:19:22 Oh, this would be nice and fast.

00:19:23 And it was like 600 milliseconds a page, which like is acceptable maybe for other people.

00:19:29 But for me, this is not acceptable.

00:19:30 I'm like, oh, no way.

00:19:32 This is not going to stand.

00:19:33 Like, what is wrong with this?

00:19:34 So I spent a lot of time in the profiler and I've gotten it down to 47 milliseconds.

00:19:39 Oh, okay.

00:19:40 Cool.

00:19:40 So it's more than 10 times faster, right?

00:19:43 That's like 10.5 times faster by using the profiler.

00:19:45 And it was just, you know, this part's slow.

00:19:47 How can I do this differently?

00:19:48 This part's slow.

00:19:49 How can I do this differently?

00:19:50 So just, you know, very neat.

00:19:52 If you want to see the fruits of that profiling, you can click the link at the bottom.

00:19:56 Cool.

00:19:56 Can we get a text search on Python Bytes?

00:20:00 Yes, absolutely.

00:20:02 We're getting full text search on Python Bytes soon.

00:20:04 Okay.

00:20:04 Yes.

00:20:04 I think we need it though.

00:20:05 I mean, we have a bunch of transcripts that we have interesting stuff in.

00:20:08 We've got our pretty solid show notes for this podcast.

00:20:11 I think we need a full text search.

00:20:13 So yeah, we'll be sure to announce it shortly.

00:20:15 Okay, great.

00:20:16 Cool.

00:20:16 I need one more weekend, I guess.

00:20:18 Yeah, like adding work to you on air.

00:20:20 Sorry about that.

00:20:21 That's all right.

00:20:22 It's good.

00:20:22 No, no.

00:20:23 It's on the roadmap.

00:20:23 It's on the roadmap.

00:20:24 All right.

00:20:25 Well, Brian, thanks so much for finding these things and sharing them with everyone.

00:20:28 Thank you.

00:20:28 You bet.

00:20:29 Catch you next time.

00:20:30 Thank you for listening to Python Bytes.

00:20:33 Follow the show on Twitter via at Python Bytes.

00:20:36 That's Python Bytes as in B-Y-T-E-S.

00:20:39 And get the full show notes at pythonbytes.fm.

00:20:42 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:20:47 We're always on the lookout for sharing something cool.

00:20:49 On behalf of myself and Brian Okken, this is Michael Kennedy.

00:20:53 Thank you for listening and sharing this podcast with your friends and colleagues.

