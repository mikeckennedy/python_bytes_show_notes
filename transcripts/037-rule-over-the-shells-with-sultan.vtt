
00:00:00.000 --> 00:00:06.100
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:06.100 --> 00:00:11.000
This is episode 37, recorded July 31st, 2017.


00:00:11.000 --> 00:00:11.900
I'm Michael Kennedy.


00:00:11.900 --> 00:00:12.800
And I'm Brian Okken.


00:00:12.800 --> 00:00:15.100
And we've got a bunch of sweet stuff lined up for you.


00:00:15.100 --> 00:00:18.700
Brian, let's talk about contributing to Python.


00:00:18.700 --> 00:00:22.300
Like, if there's something in CPython itself we want to change,


00:00:22.300 --> 00:00:25.600
and we don't like how it works, maybe we just go change it. It is open source, right?


00:00:25.600 --> 00:00:30.060
Right, it is open source and there is, is and has been a developers guide for a long


00:00:30.060 --> 00:00:32.360
time for CPython.


00:00:32.360 --> 00:00:34.880
But the URL has changed recently.


00:00:34.880 --> 00:00:42.120
I think I saw that recently, but it's at devguide.python.org.


00:00:42.120 --> 00:00:48.720
And I bring it up mostly because the URL changed and I like that URL, but also it is how to


00:00:48.720 --> 00:00:49.880
contribute to Python.


00:00:49.880 --> 00:00:54.280
I was looking over the the initial page where it drops in and


00:00:54.280 --> 00:01:00.400
There's some really cool links in there and one of them is just for everybody


00:01:00.400 --> 00:01:05.400
It's a how to contribute to open source and another one is building welcoming communities


00:01:05.400 --> 00:01:08.600
And those are both that open source guide


00:01:08.600 --> 00:01:15.320
But they're they're pretty good articles. I also liked basically the structure of some of the getting started


00:01:15.320 --> 00:01:19.200
They have a whole bunch of, I think it's a good onboarding thing.


00:01:19.200 --> 00:01:24.120
Even if you're not contributing to going to contribute to CPython, I think it's a nice


00:01:24.120 --> 00:01:29.680
outline of things to include in any large open source project to try to get people onboarded


00:01:29.680 --> 00:01:30.680
fairly quickly.


00:01:30.680 --> 00:01:31.680
Yeah, for sure.


00:01:31.680 --> 00:01:36.480
We've got like, here's how you propose changes to Python itself.


00:01:36.480 --> 00:01:41.240
They've got some nice things that take you through the whole like, get flow style, you


00:01:41.240 --> 00:01:44.880
the lifecycle of a pull request, running and writing tests,


00:01:44.880 --> 00:01:47.040
talking about coverage, there's a lot of good stuff here.


00:01:47.040 --> 00:01:48.640
- Yeah, and talking about the issue tracker,


00:01:48.640 --> 00:01:50.920
and apparently there's an experts index,


00:01:50.920 --> 00:01:54.540
which is kind of native, like who you send issues to,


00:01:54.540 --> 00:01:57.980
and then even things like how to run the tests and stuff.


00:01:57.980 --> 00:01:58.880
So it's nice.


00:01:58.880 --> 00:02:00.480
- Yeah, yeah, very nice.


00:02:00.480 --> 00:02:03.640
Cool, so if you have an idea for CPython,


00:02:03.640 --> 00:02:05.080
the thing is still changing a lot.


00:02:05.080 --> 00:02:08.600
Like we just covered recently the 362 changes,


00:02:08.600 --> 00:02:11.520
And that was pretty extensive for just a little,


00:02:11.520 --> 00:02:13.480
you know, tiny release to,


00:02:13.480 --> 00:02:15.600
like a basically a maintenance release.


00:02:15.600 --> 00:02:18.920
So how would you like to rule over your shell, Brian?


00:02:18.920 --> 00:02:20.440
- Rule over my shell, yeah.


00:02:20.440 --> 00:02:22.580
- In fact, not just ruling over your shell,


00:02:22.580 --> 00:02:24.120
but over many of the shells,


00:02:24.120 --> 00:02:27.240
like even the shells that are in the outer kingdoms.


00:02:27.240 --> 00:02:28.880
So the thing that I want to talk about next


00:02:28.880 --> 00:02:30.720
is called Sultan, and it says,


00:02:30.720 --> 00:02:33.400
"Command and rule over your shell."


00:02:33.400 --> 00:02:36.300
And so basically you can run shell commands


00:02:36.300 --> 00:02:42.180
using this library, this package called sultan in a Pythonic manager.


00:02:42.180 --> 00:02:46.900
So the simplest thing, like let's suppose you want to install tree, so you can type


00:02:46.900 --> 00:02:51.740
tree and you get this cool like ASCII hierarchical view of your files.


00:02:51.740 --> 00:02:56.300
And you would just say, you know, pip install sultan and then you would say create a sultan


00:02:56.300 --> 00:03:01.460
object because a sultan.sudo yum install tree is a string.


00:03:01.460 --> 00:03:07.420
And then say dot run, and it will actually go and it will run that command and pseudo


00:03:07.420 --> 00:03:08.700
on your system.


00:03:08.700 --> 00:03:11.740
Right, that's pretty cool.


00:03:11.740 --> 00:03:18.460
And you can do things like work with aptitude or yum or LS or all the shell commands, right.


00:03:18.460 --> 00:03:23.260
And they also have a way to work with it inside of a with block a context manager so that


00:03:23.260 --> 00:03:29.260
it can clean up with itself, it runs a slightly different command that I'm, I think has some


00:03:29.260 --> 00:03:30.260
sort of better cleanup.


00:03:30.260 --> 00:03:37.060
actually know all the details with yum. So anyway, it's pretty cool. It even works remotely.


00:03:37.060 --> 00:03:44.340
So I could like say sultan.load and give it a hostname and say to do that as sudo and then run


00:03:44.340 --> 00:03:48.500
that remotely on the server. And if there's any errors or whatever, it brings all that information


00:03:48.500 --> 00:03:53.460
back and prints it out for you in the warnings, I think. I think it'd be useful. I think it right


00:03:53.460 --> 00:03:59.940
off the bat, some of the automation stuff that just large projects have, like build scripts and


00:03:59.940 --> 00:04:02.640
and whatever I'd like to have in Python,


00:04:02.640 --> 00:04:04.900
but sometimes I don't really know how to do it


00:04:04.900 --> 00:04:07.620
within Python itself.


00:04:07.620 --> 00:04:09.260
But this is kind of neat.


00:04:09.260 --> 00:04:10.180
I'll have to check this out.


00:04:10.180 --> 00:04:11.780
- Yeah, it's pretty cool.


00:04:11.780 --> 00:04:14.220
I think it's pretty focused on the use case


00:04:14.220 --> 00:04:17.780
that people have, like running stuff over SSH,


00:04:17.780 --> 00:04:19.460
remote servers, a lot of shell stuff.


00:04:19.460 --> 00:04:21.020
But if you find yourself doing that a lot


00:04:21.020 --> 00:04:22.580
and you want to do more of it in Python,


00:04:22.580 --> 00:04:23.860
here's a pretty cool library.


00:04:23.860 --> 00:04:24.700
It's really simple.


00:04:24.700 --> 00:04:25.580
- So what is yum?


00:04:25.580 --> 00:04:27.300
- Yum is a package manager.


00:04:27.300 --> 00:04:28.980
I don't remember which distribution it's for,


00:04:28.980 --> 00:04:32.500
But like Ubuntu has aptitude, you know, like apt-get,


00:04:32.500 --> 00:04:34.980
yum is for some of the other distributions.


00:04:34.980 --> 00:04:36.940
- For some other, okay, got it.


00:04:36.940 --> 00:04:37.780
- Yeah, I don't remember.


00:04:37.780 --> 00:04:39.260
- I probably just haven't run into that yet.


00:04:39.260 --> 00:04:40.660
So, okay. - Yep, it's tasty.


00:04:40.660 --> 00:04:43.140
(laughing)


00:04:43.140 --> 00:04:44.380
- Okay.


00:04:44.380 --> 00:04:46.660
Next, I just wanna talk about a tool


00:04:46.660 --> 00:04:48.460
that helped me a lot recently.


00:04:48.460 --> 00:04:51.580
And I've been working on the book,


00:04:51.580 --> 00:04:53.260
which I'm not working on it anymore


00:04:53.260 --> 00:04:56.260
because it's turned into my editor.


00:04:56.260 --> 00:04:57.220
but the


00:04:57.220 --> 00:04:59.340
i've been using sublime


00:04:59.340 --> 00:05:02.900
to write it and write all the code for it but the uh...


00:05:02.900 --> 00:05:05.660
one of the things i wanted to do was to i got harassed


00:05:05.660 --> 00:05:09.340
by not being uh... pep8 compliant in a couple places


00:05:09.340 --> 00:05:12.300
so i wanted to quickly go through and just check everything


00:05:12.300 --> 00:05:14.460
once of course i can use flake8


00:05:14.460 --> 00:05:15.780
just on the command line


00:05:15.780 --> 00:05:18.940
but once i know that there's a bunch of files with errors


00:05:18.940 --> 00:05:21.860
what's the fastest way to go fix them and for me


00:05:21.860 --> 00:05:25.500
it was a sublime text plugin called flake8 lint


00:05:25.500 --> 00:05:29.980
And I know there's a lot of Sublime Text linters out there,


00:05:29.980 --> 00:05:34.060
but this one did everything I needed it to do just right off


00:05:34.060 --> 00:05:35.700
the bat and was super easy.


00:05:35.700 --> 00:05:38.260
It just installed it and it just worked.


00:05:38.260 --> 00:05:41.660
So highly recommend Flakegate Lint.


00:05:41.660 --> 00:05:46.220
It's got Flakegate, of course, and it's also got PyDoc style


00:05:46.220 --> 00:05:50.220
and some naming conventions, import order, and stuff.


00:05:50.220 --> 00:05:52.180
Yeah, I think having these automated tools


00:05:52.180 --> 00:05:53.660
makes tons of sense, right?


00:05:53.660 --> 00:05:57.400
like your editor should do as much of the work for you


00:05:57.400 --> 00:05:58.100
as possible.


00:05:58.100 --> 00:06:00.620
So definitely a good recommendation there.


00:06:00.620 --> 00:06:02.660
So one example is I would bring up--


00:06:02.660 --> 00:06:05.700
if I knew that there was a directory with a bunch of files


00:06:05.700 --> 00:06:09.300
that had problems, I would bring it up, open up a file.


00:06:09.300 --> 00:06:11.700
And the default-- I didn't ever change it.


00:06:11.700 --> 00:06:14.340
The default is just to check it on Save.


00:06:14.340 --> 00:06:17.580
When I would save the file, it would check everything


00:06:17.580 --> 00:06:21.540
and then also pop up a pop-up window with all the errors.


00:06:21.540 --> 00:06:24.200
So if I could just hit enter, it would take me


00:06:24.200 --> 00:06:26.800
to the very first error and I could just walk


00:06:26.800 --> 00:06:27.640
through all the errors.


00:06:27.640 --> 00:06:28.720
It was great.


00:06:28.720 --> 00:06:33.400
- Nice, and it's not just purely following


00:06:33.400 --> 00:06:34.360
the PEP8 rules.


00:06:34.360 --> 00:06:37.760
For example, it has cyclomatic complexity checking,


00:06:37.760 --> 00:06:38.840
which is pretty sweet.


00:06:38.840 --> 00:06:43.460
So that's like, hey, I've got a highly, highly nested


00:06:43.460 --> 00:06:45.400
500 line method.


00:06:45.400 --> 00:06:46.520
What's wrong with that?


00:06:46.520 --> 00:06:49.360
(laughing)


00:06:49.360 --> 00:06:53.000
only has 20 if blocks, loops, whatever.


00:06:53.000 --> 00:06:54.720
It would complain about that if it goes over 10.


00:06:54.720 --> 00:06:55.560
That's cool.


00:06:55.560 --> 00:06:59.340
All right, so how would you like to travel time


00:06:59.340 --> 00:07:01.740
and be sucked into, say, like a magic wormhole?


00:07:01.740 --> 00:07:03.800
- I'm pretty excited to hear about magic wormhole.


00:07:03.800 --> 00:07:05.420
- Magic wormhole is pretty cool.


00:07:05.420 --> 00:07:07.200
Maybe you guys have heard of this.


00:07:07.200 --> 00:07:09.680
So the problem magic wormhole is trying to solve


00:07:09.680 --> 00:07:13.840
is I wanna get things, be this text, be this a small file,


00:07:13.840 --> 00:07:17.960
be this a huge file, from one computer to the other safely.


00:07:17.960 --> 00:07:22.840
So encrypted in a way that other people can't get to and things like that.


00:07:22.840 --> 00:07:31.080
So magic wormhole is basically a command line thing where you just type wormhole


00:07:31.080 --> 00:07:36.640
and it will come up with like a code that your computer has, right?


00:07:36.640 --> 00:07:39.940
So you say, I want to create a wormhole and send this file and it'll come up with a code.


00:07:39.940 --> 00:07:47.080
If you give that code to someone else, they can run wormhole receive on their command line,


00:07:47.200 --> 00:07:53.380
enter that code and then over an encrypted connection that will automatically connect


00:07:53.380 --> 00:07:56.780
the two computers even if they both have firewalls blocking it.


00:07:56.780 --> 00:08:03.180
There's like some sort of intermediary server that will link them together.


00:08:03.180 --> 00:08:08.660
And it'll just do, from what I understand, an encryption between these two things.


00:08:08.660 --> 00:08:13.080
So if you need to get something and you don't want to put it somewhere public like Dropbox


00:08:13.080 --> 00:08:17.480
or you don't want to put it somewhere that's hard to erase or just hard to actually physically


00:08:17.480 --> 00:08:21.540
transfer like a USB drive, you can wormhole it.


00:08:21.540 --> 00:08:27.140
And there's even a PyCon presentation on this at PyCon 2016.


00:08:27.140 --> 00:08:28.140
So you can check it out.


00:08:28.140 --> 00:08:29.140
What do you think about that, Brian?


00:08:29.140 --> 00:08:30.140
That looks pretty cool.


00:08:30.140 --> 00:08:34.020
I don't think I've got a use for it, but I want to have a use for it.


00:08:34.020 --> 00:08:35.020
I know.


00:08:35.020 --> 00:08:38.580
Well, you know, like suppose you want to get something to some server you're maintaining


00:08:38.580 --> 00:08:44.020
maybe, or say you're on vacation and you want to send something back, you don't want to


00:08:44.020 --> 00:08:45.020
send it over Dropbox.


00:08:45.020 --> 00:08:46.740
I can see some good uses for it.


00:08:46.740 --> 00:08:50.380
They talked about things like here's a way that you might be able to share like SSH keys


00:08:50.380 --> 00:08:53.660
that you don't want to put anywhere, but you got to get them somewhere.


00:08:53.660 --> 00:08:54.660
Things like that.


00:08:54.660 --> 00:08:55.660
Yeah.


00:08:55.660 --> 00:08:56.660
Yeah, it's pretty cool.


00:08:56.660 --> 00:09:00.700
The codes, one of the things I thought was a nice touch was the codes are short and human


00:09:00.700 --> 00:09:01.700
pronounceable.


00:09:01.700 --> 00:09:02.700
Oh, wow.


00:09:02.700 --> 00:09:03.700
Yeah.


00:09:03.700 --> 00:09:04.700
So they had some nice examples.


00:09:04.700 --> 00:09:05.700
Let me see if I can find.


00:09:05.700 --> 00:09:12.180
Like the one that they have an example on the website is 7-crossover-clockwork.


00:09:12.180 --> 00:09:18.380
So pretty long password if you will, but also you can tell it to someone over the phone.


00:09:18.380 --> 00:09:23.740
So the idea is like this is when you have the ability to communicate with a person,


00:09:23.740 --> 00:09:27.300
but your computer and their computer don't necessarily have a way to directly connect.


00:09:27.300 --> 00:09:28.300
Oh great.


00:09:28.300 --> 00:09:32.540
So you don't have to like email them the secret code or something unsecure.


00:09:32.540 --> 00:09:33.540
Yeah.


00:09:33.540 --> 00:09:34.540
I emailed you the ISO.


00:09:34.540 --> 00:09:36.460
- It was only three gigs, I'm sure it'll be fine.


00:09:36.460 --> 00:09:37.300
Thanks for that.


00:09:37.300 --> 00:09:38.980
(laughing)


00:09:38.980 --> 00:09:41.660
And finally, there's actually an API that's part of this.


00:09:41.660 --> 00:09:43.780
So it's not just a command line tool,


00:09:43.780 --> 00:09:47.340
you can actually make wormhole capabilities


00:09:47.340 --> 00:09:50.900
in your own applications by just by importing the library.


00:09:50.900 --> 00:09:52.340
- Okay.


00:09:52.340 --> 00:09:53.540
- Now that sounds even more fun.


00:09:53.540 --> 00:09:55.260
I don't know what to do with it, but it sure sounds fun.


00:09:55.260 --> 00:09:56.500
- It sure does, yeah.


00:09:56.500 --> 00:09:58.900
- So take us back to some fundamentals.


00:09:58.900 --> 00:10:02.420
One of the things that I think we really don't do enough


00:10:02.420 --> 00:10:04.180
with as developers is virtual environments.


00:10:04.180 --> 00:10:04.680
What do you think?


00:10:04.680 --> 00:10:07.360
It's one of those things that I forget that it's


00:10:07.360 --> 00:10:09.540
hard to figure out the first time.


00:10:09.540 --> 00:10:12.620
So virtual environments are something--


00:10:12.620 --> 00:10:15.640
if you're not using virtual environments, you need to be.


00:10:15.640 --> 00:10:18.520
And there's an older tutorial, but this


00:10:18.520 --> 00:10:22.240
is from realpython.com.


00:10:22.240 --> 00:10:25.480
And it's Python Virtual Environments, a primer.


00:10:25.480 --> 00:10:27.800
It covers what they are, why do we need them,


00:10:27.800 --> 00:10:29.620
how do you use them, of course.


00:10:29.620 --> 00:10:31.800
And then it also covers a few extra tools


00:10:31.800 --> 00:10:34.860
that a lot of people use like pyvenv,


00:10:34.860 --> 00:10:37.360
for that came with Python 3.6,


00:10:37.360 --> 00:10:39.960
and virtualenvwrapper.


00:10:39.960 --> 00:10:41.600
I point to it because it's a pretty good,


00:10:41.600 --> 00:10:43.360
this article's a pretty good description


00:10:43.360 --> 00:10:47.280
of really why do we need them and what they are


00:10:47.280 --> 00:10:50.640
for if you're not understanding why you need them,


00:10:50.640 --> 00:10:54.240
this is a good document to talk about it.


00:10:54.240 --> 00:10:55.840
The thing that I ran into recently


00:10:55.840 --> 00:11:00.280
was I was trying to help somebody and install something,


00:11:00.280 --> 00:11:04.220
And it turned out that the problem that they were having


00:11:04.220 --> 00:11:06.120
was they were not using virtual environments.


00:11:06.120 --> 00:11:09.080
And when they would pip install something,


00:11:09.080 --> 00:11:12.420
they weren't able to import it from within the tests.


00:11:12.420 --> 00:11:14.520
And the problem was that their pip


00:11:14.520 --> 00:11:16.420
was pointing to a different Python


00:11:16.420 --> 00:11:19.840
than the pytest was using a different Python.


00:11:19.840 --> 00:11:21.880
So when you pip install something,


00:11:21.880 --> 00:11:24.320
it goes into the virtual environment


00:11:24.320 --> 00:11:28.600
or the site packages for that version of Python,


00:11:28.600 --> 00:11:30.560
not for all of Pythons.


00:11:30.560 --> 00:11:33.560
So he was pip installing it with Python.


00:11:33.560 --> 00:11:38.200
His pip was 2.7, and it goes into 2.7 folder then.


00:11:38.200 --> 00:11:41.040
And for me, that's the main reason why--


00:11:41.040 --> 00:11:42.640
one of the main reasons why I use it


00:11:42.640 --> 00:11:45.200
is because once you use virtual environments,


00:11:45.200 --> 00:11:48.600
your pip and your Python and your pytest and everything


00:11:48.600 --> 00:11:51.680
are all using the same Python, and they don't get confused.


00:11:51.680 --> 00:11:52.400
Yeah, it's great.


00:11:52.400 --> 00:11:56.240
I use it a lot to basically make it very, very clear


00:11:56.240 --> 00:11:59.980
what versions a particular web app of mine is running


00:11:59.980 --> 00:12:03.200
and what I need to deploy and things like that.


00:12:03.200 --> 00:12:06.180
I think your point about it's easy to forget


00:12:06.180 --> 00:12:07.460
why this should ever be hard,


00:12:07.460 --> 00:12:10.660
like it's just second nature for those of us


00:12:10.660 --> 00:12:12.300
who've been doing it a long time.


00:12:12.300 --> 00:12:14.380
But your example is perfect,


00:12:14.380 --> 00:12:16.460
like helping someone out who is somewhat new.


00:12:16.460 --> 00:12:18.300
Like I thought Python was simple.


00:12:18.300 --> 00:12:19.360
Why is this not working?


00:12:19.360 --> 00:12:20.540
What is this?


00:12:20.540 --> 00:12:23.140
That happens all the time.


00:12:23.140 --> 00:12:27.780
And all the extra stuff like virtual envwrapper and Py


00:12:27.780 --> 00:12:30.100
environment and all these extra things,


00:12:30.100 --> 00:12:32.220
those are great for the people that work with them.


00:12:32.220 --> 00:12:35.100
But if you try these out and they don't work for you,


00:12:35.100 --> 00:12:37.340
it might not be your fault. Or maybe it is.


00:12:37.340 --> 00:12:39.860
But I haven't been able to get any of these extra things


00:12:39.860 --> 00:12:40.360
to work.


00:12:40.360 --> 00:12:42.020
I've tried virtual envwrapper.


00:12:42.020 --> 00:12:43.380
It's never worked for me.


00:12:43.380 --> 00:12:45.300
So I don't know what I'm doing wrong.


00:12:45.300 --> 00:12:48.460
But just the straight virtual environments work great.


00:12:48.460 --> 00:12:49.340
So that's what I use.


00:12:49.340 --> 00:12:50.580
- Yeah, that's cool.


00:12:50.580 --> 00:12:53.100
Nice to have a little reference there.


00:12:53.100 --> 00:12:56.380
So last thing I want to touch on is an interesting article


00:12:56.380 --> 00:12:58.220
that actually highlights a couple of projects.


00:12:58.220 --> 00:13:00.340
I think there's four projects it highlights.


00:13:00.340 --> 00:13:01.460
- Okay. - Yeah.


00:13:01.460 --> 00:13:03.780
And the idea is Rust,


00:13:03.780 --> 00:13:05.940
Rust the programming language from Mozilla,


00:13:05.940 --> 00:13:10.940
is a pretty interesting alternative to C, right?


00:13:10.940 --> 00:13:15.700
It's kind of a system level programming language like C is,


00:13:15.700 --> 00:13:20.220
but it has a type system that helps eliminate memory leaks.


00:13:20.220 --> 00:13:21.820
It has proper interfaces.


00:13:21.820 --> 00:13:25.700
It has better type inference, better support for concurrency, better support for first


00:13:25.700 --> 00:13:28.180
class functions, those kinds of things.


00:13:28.180 --> 00:13:32.400
And so compared to C, it's a pretty nice language.


00:13:32.400 --> 00:13:40.580
And so when you think of a lot of the important Python packages, many of their important internal


00:13:40.580 --> 00:13:43.700
low level pieces are written as C extensions, right?


00:13:43.700 --> 00:13:44.700
Yeah.


00:13:44.700 --> 00:13:45.700
Yeah.


00:13:45.700 --> 00:13:49.620
So could those be written in a better language than something like C?


00:13:49.620 --> 00:13:50.740
How about Rust?


00:13:50.740 --> 00:13:57.520
So here's four projects that make it easier to implement what would be the C extensions,


00:13:57.520 --> 00:14:04.320
the native compiled hotspot type of code, but do it in Rust instead of in C.


00:14:04.320 --> 00:14:08.880
So the first one is Rust-CPython.


00:14:08.880 --> 00:14:12.460
So that's an interesting, just describes what it is.


00:14:12.460 --> 00:14:15.920
So it's a set of bindings for Rust for the CPython runtime.


00:14:15.920 --> 00:14:20.880
It allows Rust to connect to CPython using its application binary interface, which is


00:14:20.880 --> 00:14:23.160
a Rust thing.


00:14:23.160 --> 00:14:30.040
And you can run Python programs from Rust or work with Python objects directly, the


00:14:30.040 --> 00:14:33.640
representation to Python objects directly in Rust.


00:14:33.640 --> 00:14:37.440
So this is actually for if you want to, if you're a Rust programmer and you want to hook


00:14:37.440 --> 00:14:40.840
into CPython and control it from the outside.


00:14:40.840 --> 00:14:50.880
There's Py03, which is a way for people to write Rust software with bindings of Python


00:14:50.880 --> 00:14:51.880
in both directions.


00:14:51.880 --> 00:14:59.280
So a Rust program can interface with Python objects in the Python interpreter, and it


00:14:59.280 --> 00:15:05.160
can expose Rust methods to the Python program the same way like a C module does.


00:15:05.160 --> 00:15:07.640
All right, so that's pretty cool.


00:15:07.640 --> 00:15:13.320
Then there's Snake, S-N-A-E-K, which is a kind of early stage project, but it lets developers


00:15:13.320 --> 00:15:18.880
create Rust libraries that are loaded dynamically into Python as needed, and they don't have


00:15:18.880 --> 00:15:23.800
to be statically linked against Python's runtime, which is kind of cool.


00:15:23.800 --> 00:15:30.680
I think it pulls it off using CFFI, which is the C interoperator for PyPI, the alternate


00:15:30.680 --> 00:15:36.680
interpreter JIT compiler for Python, rather than C types.


00:15:36.680 --> 00:15:41.640
If you don't have some old library that is based on C types, like say in C and you want


00:15:41.640 --> 00:15:44.080
to upgrade, then this might be a pretty sweet option.


00:15:44.080 --> 00:15:47.680
Then finally, there's actually a cookie cutter template.


00:15:47.680 --> 00:15:54.520
It says, "The goal of this project is to be able to produce a binary distribution, a wheel,


00:15:54.520 --> 00:15:59.240
which will not require the end user to actually compile Rust code themselves," which everyone


00:15:59.240 --> 00:16:00.560
would appreciate that, right?


00:16:00.560 --> 00:16:04.560
Here's a bunch of cool options if you are like, "I really don't want to write this in


00:16:04.560 --> 00:16:09.240
see but it probably should be written in you know not in Python but in some other


00:16:09.240 --> 00:16:12.640
way like maybe try Rust if you're looking to check that out. That actually


00:16:12.640 --> 00:16:17.680
looks pretty cool. Have you done any Rust yet? No I've it's one of the languages I


00:16:17.680 --> 00:16:23.400
want to learn that I'm kind of intrigued by. I looked at Go a little while ago I'm


00:16:23.400 --> 00:16:27.480
I'm not a huge fan of Go but people sort of compare these a lot so I want to


00:16:27.480 --> 00:16:30.640
check out Rust it's I think it's pretty different than Go. Yeah it's definitely


00:16:30.640 --> 00:16:34.400
something on my to-do list, so check this out.


00:16:34.400 --> 00:16:37.100
- Yeah, do you guys have any uses for Rust


00:16:37.100 --> 00:16:38.640
with all the hardware stuff you're doing?


00:16:38.640 --> 00:16:40.400
- I'm sure we could come up with,


00:16:40.400 --> 00:16:42.760
invent some reason to use Rust.


00:16:42.760 --> 00:16:43.960
- There you go, perfect.


00:16:43.960 --> 00:16:47.600
All right, how about you, any personal news


00:16:47.600 --> 00:16:48.420
here at the end of the show?


00:16:48.420 --> 00:16:50.440
- Just that I'm not writing anymore.


00:16:50.440 --> 00:16:52.120
- Congratulations, that's awesome.


00:16:52.120 --> 00:16:52.960
How's it feel?


00:16:52.960 --> 00:16:54.980
- It feels incredible, yeah.


00:16:54.980 --> 00:16:59.560
To go from I'm writing a book to I wrote a book is great.


00:16:59.560 --> 00:17:01.040
- Yeah, that's cool.


00:17:01.040 --> 00:17:02.600
Was your wife and kids like,


00:17:02.600 --> 00:17:04.720
hey there's some random guy in our house, what's going on?


00:17:04.720 --> 00:17:06.200
Oh wait, no, it's just Brian.


00:17:06.200 --> 00:17:07.240
- It's dad, yeah.


00:17:07.240 --> 00:17:09.080
(laughing)


00:17:09.080 --> 00:17:13.960
No, I've tried to limit the writing to obscene things


00:17:13.960 --> 00:17:16.000
like early in the morning and late at night.


00:17:16.000 --> 00:17:18.120
- Yeah, so punish yourself instead of your family.


00:17:18.120 --> 00:17:19.140
- Yeah, exactly.


00:17:19.140 --> 00:17:21.600
- Cool.


00:17:21.600 --> 00:17:24.360
All right, well I am packing my bags


00:17:24.360 --> 00:17:25.720
and I am going on vacation.


00:17:25.720 --> 00:17:29.280
So either we might be a little bit intermittent


00:17:29.280 --> 00:17:33.080
Or there's some talk that we might have some guest co-hosts


00:17:33.080 --> 00:17:34.220
coming in here.


00:17:34.220 --> 00:17:35.100
- We'll see.


00:17:35.100 --> 00:17:39.000
So if you don't see some podcasts in the next few weeks,


00:17:39.000 --> 00:17:40.420
don't worry, it'll come back.


00:17:40.420 --> 00:17:43.680
But you might see them anyway with some new faces.


00:17:43.680 --> 00:17:44.980
- Yeah, that would be awesome.


00:17:44.980 --> 00:17:46.800
So either way, great chatting with you, Brian.


00:17:46.800 --> 00:17:47.720
Thanks everyone for listening.


00:17:47.720 --> 00:17:48.560
- All right, thanks.


00:17:48.560 --> 00:17:49.400
- Yep, bye.


00:17:49.400 --> 00:17:52.400
Thank you for listening to Python Bytes.


00:17:52.400 --> 00:17:54.920
Follow the show on Twitter via @PythonBytes.


00:17:54.920 --> 00:17:58.100
That's Python Bytes as in B-Y-T-E-S.


00:17:58.100 --> 00:18:01.500
and get the full show notes at pythonbytes.fm.


00:18:01.500 --> 00:18:03.100
If you have a news item you want featured,


00:18:03.100 --> 00:18:05.540
just visit pythonbytes.fm and send it our way.


00:18:05.540 --> 00:18:08.700
We're always on the lookout for sharing something cool.


00:18:08.700 --> 00:18:10.540
On behalf of myself and Brian Okken,


00:18:10.540 --> 00:18:12.060
this is Michael Kennedy.


00:18:12.060 --> 00:18:14.060
Thank you for listening and sharing this podcast


00:18:14.060 --> 00:18:15.700
with your friends and colleagues.

