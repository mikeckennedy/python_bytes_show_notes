
00:00:00.000 --> 00:00:07.040
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 88


00:00:07.040 --> 00:00:13.040
Recorded July 26 2018. I'm Michael Kennedy. I'm Brian. Okay, Brian. How you doing? I'm doing great


00:00:13.040 --> 00:00:18.140
Yeah, it's a ton of good stuff that I think you found this week and I'm looking forward to share what I got as well


00:00:18.140 --> 00:00:21.880
It's never a boring week in the Python world. Is it? No, it isn't. No


00:00:21.880 --> 00:00:27.140
Well, it's definitely not boring if your app has problems and you need to track them down


00:00:27.140 --> 00:00:33.140
So if you're in that space, you might want to check out Datadog over at pythonbytes.fm/datadog.


00:00:33.140 --> 00:00:35.140
I'll tell you more about them later.


00:00:35.140 --> 00:00:38.140
Right now, I want to know about documenting code.


00:00:38.140 --> 00:00:45.140
We do hear a lot about, I think we hear a lot about making sure that your code documentation is good.


00:00:45.140 --> 00:00:51.140
There's the read the docs and make the docs effort, or I guess it's write the docs.


00:00:51.140 --> 00:01:03.360
And there's quite a bit of that and I think a lot of that is focused on the end user user documentation and that's definitely important but there was a there's an article on I think it was unreal yet unreal python.


00:01:03.360 --> 00:01:11.000
Call documenting python code a complete guide it's an article that describes you know really why you should comment and document your code.


00:01:11.000 --> 00:01:17.020
Talks about the differences between comments and doc strings and different separate documentation.


00:01:17.280 --> 00:01:24.660
But one of the things that I want to zoom in on is the code comments and I don't think very many people get really.


00:01:24.660 --> 00:01:32.760
How if they think about their comments they put in their code how effective they can be so i want to zoom in on some of the things that they cover in this article.


00:01:32.760 --> 00:01:38.040
On code comments so come answer those things that start with a pound sign or hash.


00:01:38.220 --> 00:01:41.500
and they're not really part of your runtime,


00:01:41.500 --> 00:01:43.340
you can't get a hold of them at runtime.


00:01:43.340 --> 00:01:45.100
They're intended for you and


00:01:45.100 --> 00:01:48.100
other maintainers and other developers of the code.


00:01:48.100 --> 00:01:50.300
Some of the things that I've used them for,


00:01:50.300 --> 00:01:53.800
but I never really saw anybody point out before,


00:01:53.800 --> 00:01:55.300
is before you even start your code,


00:01:55.300 --> 00:01:58.220
you can use comments to plan what you're going to write.


00:01:58.220 --> 00:02:01.040
You can also, once you've written your code,


00:02:01.040 --> 00:02:05.340
review to make sure the code really matches what you planned to do.


00:02:05.340 --> 00:02:08.500
And then sometimes those kind of comments are best to be,


00:02:08.500 --> 00:02:11.740
if your code is clear enough, just go ahead and delete those when you're done.


00:02:11.740 --> 00:02:13.580
I like that. I end up doing that a lot myself.


00:02:13.580 --> 00:02:15.420
I'm like, okay, I'm not entirely sure how to do this,


00:02:15.420 --> 00:02:17.020
so I'll sketch this out in comments.


00:02:17.020 --> 00:02:19.420
Like, here's the five steps I think I got to do.


00:02:19.420 --> 00:02:20.860
And then I'll just take them one at a time.


00:02:20.860 --> 00:02:23.460
And then I always delete those comments, almost always.


00:02:23.460 --> 00:02:26.660
Yeah, the deleting part is important because if you don't do that,


00:02:26.660 --> 00:02:31.540
and then you get the common pitfall of a code comment that says,


00:02:31.540 --> 00:02:34.860
"Retrieve web page," and then the very next line is one line of code


00:02:34.860 --> 00:02:36.900
that's a request or something and it's obvious.


00:02:36.900 --> 00:02:38.780
So if it's not obvious,


00:02:38.780 --> 00:02:40.900
you're using those to explain intent.


00:02:40.900 --> 00:02:43.120
Don't explain really how it's done,


00:02:43.120 --> 00:02:44.980
but explain why you're doing it.


00:02:44.980 --> 00:02:48.340
Then sometimes you'll have a complicated math algorithm or


00:02:48.340 --> 00:02:51.640
something that's fairly terse if you need to explain that better.


00:02:51.640 --> 00:02:55.280
But we're trying to get as few comments as possible,


00:02:55.280 --> 00:02:59.360
minimizing those because you want to make your code pretty clear to begin with.


00:02:59.360 --> 00:03:01.620
But one of the other things that I think


00:03:01.620 --> 00:03:10.680
I've just started using quite a bit of the to do feature so using code comments to the article mentions to do bug and fix me type sections.


00:03:10.680 --> 00:03:21.540
Hopefully you're not putting too many bugs and fix me is in your code but to do is are I think those are great for because when we're in the middle of coding it's often easy to get caught up in.


00:03:21.540 --> 00:03:25.780
well, I could make it more powerful if I added these other features.


00:03:25.780 --> 00:03:27.900
Just go ahead and write that as a comment.


00:03:27.900 --> 00:03:32.860
You don't really need to fall into the trap of making your code do too much at once.


00:03:32.860 --> 00:03:36.140
And then the article also has some other tips on


00:03:36.140 --> 00:03:39.860
best practices for how to format your code comments and stuff.


00:03:39.860 --> 00:03:44.220
Of course, it goes on and talks about doc strings and how to utilize those.


00:03:44.220 --> 00:03:48.700
Also, using type hints for commenting and documentation,


00:03:48.700 --> 00:03:53.540
and then goes on to do like the larger talks about the larger types of project documentation


00:03:53.540 --> 00:03:55.460
like using Sphinx and make docs.


00:03:55.460 --> 00:03:59.260
Yeah, it's a really great article and it's really in depth.


00:03:59.260 --> 00:04:01.660
I always learn something from the real Python articles.


00:04:01.660 --> 00:04:02.660
It's cool.


00:04:02.660 --> 00:04:07.220
You know, one thing about the to do stuff that I use a lot and I really like is the


00:04:07.220 --> 00:04:08.220
editor integration.


00:04:08.220 --> 00:04:10.500
So I can't speak to the other ones.


00:04:10.500 --> 00:04:13.180
I don't really know how exactly they handle it.


00:04:13.180 --> 00:04:14.180
But it's a in PyCharm.


00:04:14.180 --> 00:04:18.680
If you have hash to do colon, something, there's a special pane where you can say show me all


00:04:18.680 --> 00:04:20.480
all the to-dos in this project.


00:04:20.480 --> 00:04:22.160
And even when you try to commit,


00:04:22.160 --> 00:04:24.760
like, you know, I wanna commit this stuff to GitHub,


00:04:24.760 --> 00:04:27.840
it'll say, warning, there's three to-dos in here.


00:04:27.840 --> 00:04:29.480
Are you sure you wanna commit


00:04:29.480 --> 00:04:30.960
to GitHub with these three to-dos?


00:04:30.960 --> 00:04:33.680
And then I think it actually even remembers those three,


00:04:33.680 --> 00:04:34.960
but if you add another one, it'll say,


00:04:34.960 --> 00:04:37.040
oh, there's like a new to-do you haven't like approved


00:04:37.040 --> 00:04:38.280
to commit, things like that.


00:04:38.280 --> 00:04:39.240
So it's pretty sweet.


00:04:39.240 --> 00:04:41.760
- Yeah, I actually, I stumbled across that feature


00:04:41.760 --> 00:04:43.440
and without knowing it was there,


00:04:43.440 --> 00:04:45.400
and I'm like, oh man, this is great.


00:04:45.400 --> 00:04:46.320
So I like it.


00:04:46.320 --> 00:04:47.160
- Yeah, that's cool.


00:04:47.160 --> 00:04:51.480
colors the comment different if it's a to do comment. So people should definitely do that.


00:04:51.480 --> 00:04:57.160
So we talked a while ago about security vulnerabilities and other types of alerts.


00:04:57.160 --> 00:05:04.280
And we even covered how GitHub has this like dependency thing where you can see the dependencies,


00:05:04.280 --> 00:05:07.400
but it didn't cover Python, which was unfortunate, right?


00:05:07.400 --> 00:05:07.880
Right.


00:05:07.880 --> 00:05:10.360
Well, big news. It now supports Python.


00:05:10.360 --> 00:05:11.560
That was pretty fast.


00:05:11.560 --> 00:05:12.200
That was.


00:05:12.200 --> 00:05:13.240
They got on that pretty quick.


00:05:13.240 --> 00:05:15.280
>> They did. So it's pretty sweet.


00:05:15.280 --> 00:05:19.340
If you go to any GitHub repository and you go to Insights,


00:05:19.340 --> 00:05:20.720
and then there's a bunch of options on


00:05:20.720 --> 00:05:22.340
the left-hand pick dependency graph,


00:05:22.340 --> 00:05:25.180
it'll actually show you all of the files.


00:05:25.180 --> 00:05:29.220
It's either found in a pip file.lock,


00:05:29.220 --> 00:05:32.360
or in a requirements.txt, anywhere in the project.


00:05:32.360 --> 00:05:33.120
>> Wow, that's cool.


00:05:33.120 --> 00:05:35.880
>> It'll list them out and it'll say it's pinned to this version.


00:05:35.880 --> 00:05:37.900
But warning, this version actually has


00:05:37.900 --> 00:05:41.340
a security vulnerability and is fixed by this other release of it.


00:05:41.340 --> 00:05:43.120
So if I'm using, say, Pyramid,


00:05:43.120 --> 00:05:46.340
and there happened to have been a security vulnerability


00:05:46.340 --> 00:05:47.720
in that, it would let me know,


00:05:47.720 --> 00:05:50.460
and it would actually highlight that and give me an alert.


00:05:50.460 --> 00:05:51.440
- Okay, neat.


00:05:51.440 --> 00:05:52.560
- Yeah, it's really cool.


00:05:52.560 --> 00:05:55.780
So it had previously only worked with Ruby and JavaScript,


00:05:55.780 --> 00:05:57.040
but now they just announced it.


00:05:57.040 --> 00:05:58.800
They said for the Ruby and JavaScript people,


00:05:58.800 --> 00:06:01.100
they've identified millions of vulnerabilities


00:06:01.100 --> 00:06:03.720
and prompted many patches, which is pretty cool.


00:06:03.720 --> 00:06:06.200
- Okay, I'm just checking my cards project


00:06:06.200 --> 00:06:07.240
to make sure it's clean.


00:06:07.240 --> 00:06:08.280
Looks like it's good.


00:06:08.280 --> 00:06:09.120
- Yeah, and it's interesting.


00:06:09.120 --> 00:06:14.000
can actually it's like a tree structure that you get to so you can go there and it'll say,


00:06:14.000 --> 00:06:18.160
suppose you're using requests, for example, right, then there's like a little Chevron


00:06:18.160 --> 00:06:23.640
expando thing by requests, and it'll open up and say, well, this depends on six and


00:06:23.640 --> 00:06:25.640
chardet or whatever it depends upon.


00:06:25.640 --> 00:06:30.480
I can't remember the exact dependency of requests, but you can actually expand it out and see


00:06:30.480 --> 00:06:34.880
like the transitive closure or like what your dependencies, dependencies, dependencies depend


00:06:34.880 --> 00:06:39.100
upon and like if there's a vulnerability deep, deep down that you didn't directly install,


00:06:39.100 --> 00:06:41.100
effectively installed. So it's really nice.


00:06:41.100 --> 00:06:43.100
The dependency graph is cool. It


00:06:43.100 --> 00:06:45.100
even has, it'll even


00:06:45.100 --> 00:06:47.100
follow a requirements


00:06:47.100 --> 00:06:49.100
underscore dev. Yeah, it'll get all of them, yeah.


00:06:49.100 --> 00:06:51.100
And then you can also look at dependents.


00:06:51.100 --> 00:06:53.100
So people depending on your project.


00:06:53.100 --> 00:06:55.100
Interesting. Right, right, right.


00:06:55.100 --> 00:06:57.100
So if you've got like a public package,


00:06:57.100 --> 00:06:59.100
you can see what depends upon it.


00:06:59.100 --> 00:07:01.100
I wonder if you go to request, if that breaks


00:07:01.100 --> 00:07:03.100
the UI.


00:07:03.100 --> 00:07:05.100
[laughter]


00:07:05.100 --> 00:07:07.100
Yeah, I'll have to, I'll leave that


00:07:07.100 --> 00:07:10.100
I had to exercise the reader because I don't want my web browser to fail.


00:07:10.100 --> 00:07:11.100
Yeah, exactly.


00:07:11.100 --> 00:07:12.100
Exactly.


00:07:12.100 --> 00:07:17.780
Anyway, so we've seen other services like pyup.io, which I use and still recommend.


00:07:17.780 --> 00:07:23.060
But this is a nice way to just like walk up to a public GitHub repository and say, well,


00:07:23.060 --> 00:07:24.220
what are its dependencies?


00:07:24.220 --> 00:07:25.220
Is it up to date?


00:07:25.220 --> 00:07:27.980
Things like that, without actually using it or registering it.


00:07:27.980 --> 00:07:28.980
It's cool.


00:07:28.980 --> 00:07:29.980
Right.


00:07:29.980 --> 00:07:32.860
So pyup, you would have to have it be on your own and you could do that.


00:07:32.860 --> 00:07:36.780
this is allows you to look at that for any project on GitHub.


00:07:36.780 --> 00:07:41.100
Right, exactly. Does maybe this project have a security vulnerability in its dependency


00:07:41.100 --> 00:07:45.260
or not? If it doesn't, then I'm going to use it. If it does, maybe I'll wait or do a PR or


00:07:45.260 --> 00:07:52.220
something. Yeah. Nice. Well, speaking of dependencies, I depend on pip a lot and virtual environments.


00:07:52.220 --> 00:07:57.260
Yes, all the time. I, I've tried to like super optimize what I do in the command line around


00:07:57.260 --> 00:08:02.380
pip and virtual environments, so much so that I have a single alias that will create a virtual


00:08:02.380 --> 00:08:06.580
environment, make sure pip and setup tools up to date and then activate it all in like


00:08:06.580 --> 00:08:07.580
a couple of characters.


00:08:07.580 --> 00:08:08.580
I love it.


00:08:08.580 --> 00:08:09.580
Yeah, nice.


00:08:09.580 --> 00:08:11.260
So the virtual environments are so useful.


00:08:11.260 --> 00:08:16.780
I was happy to see this article pop up that's called "How Virtual Environment Libraries


00:08:16.780 --> 00:08:18.860
Work in Python."


00:08:18.860 --> 00:08:20.060
And I'm just going to quote it.


00:08:20.060 --> 00:08:23.540
It says, "Have you ever wondered what happens when you activate a virtual environment and


00:08:23.540 --> 00:08:25.540
how it works internally?


00:08:25.540 --> 00:08:30.300
Here's a quick overview of the internals behind popular virtual environments, for example,


00:08:30.300 --> 00:08:34.300
Env, Virtual Env Wrapper, Conda, and pip Env.


00:08:34.300 --> 00:08:38.300
And yeah, it's a really fairly quick look at how


00:08:38.300 --> 00:08:42.300
there's really not much. I didn't know this. So one of the things


00:08:42.300 --> 00:08:46.300
it points out is that there's a, all of these sort of work on a little bit of a hack.


00:08:46.300 --> 00:08:50.300
And these hacks are based on the fact that the Python,


00:08:50.300 --> 00:08:54.300
when the Python interpreter starts, when the interpreter starts, it searches


00:08:54.300 --> 00:08:58.300
it's trying to find the site-specific directory to find all


00:08:58.300 --> 00:09:00.700
the modules it can import and all the packages.


00:09:00.700 --> 00:09:03.700
So the search starts with the parent directory of


00:09:03.700 --> 00:09:07.060
the Python executable location and then continues


00:09:07.060 --> 00:09:09.100
backtracking up the path into


00:09:09.100 --> 00:09:12.140
parent directories until it reaches all the way to the root.


00:09:12.140 --> 00:09:17.060
But it's also looking for a lib directory with os.py in it.


00:09:17.060 --> 00:09:20.060
Apparently, it's looking for that magic module.


00:09:20.060 --> 00:09:21.640
Then if it finds that,


00:09:21.640 --> 00:09:24.500
that's the local site packages directory.


00:09:24.500 --> 00:09:28.660
So the hack is to let it copy the executable somewhere


00:09:28.660 --> 00:09:33.660
and then create a directory with that symbolically linked.


00:09:33.660 --> 00:09:35.140
And then you can have other stuff


00:09:35.140 --> 00:09:36.860
symbolically linked inside too.


00:09:36.860 --> 00:09:39.300
And earlier versions wouldn't symbolically link


00:09:39.300 --> 00:09:42.640
everything in the site packages if you had everything


00:09:42.640 --> 00:09:44.260
or a whole bunch of stuff at least.


00:09:44.260 --> 00:09:45.680
I'm not sure if it's everything.


00:09:45.680 --> 00:09:48.900
In Python 3.3, it came up with a couple of tricks


00:09:48.900 --> 00:09:52.600
with a pyvenv config file that allows you


00:09:52.600 --> 00:09:55.080
to not have to copy the executable completely.


00:09:55.080 --> 00:09:57.400
You can copy, you can have a symbolic link


00:09:57.400 --> 00:09:58.740
to the executable.


00:09:58.740 --> 00:10:01.340
And all of this is how the sausage is made,


00:10:01.340 --> 00:10:04.780
but I found it fairly interesting to figure out


00:10:04.780 --> 00:10:06.880
how all these virtual environment things work.


00:10:06.880 --> 00:10:08.460
- Yeah, I think this is really helpful


00:10:08.460 --> 00:10:11.560
because certainly being effective with Python


00:10:11.560 --> 00:10:14.640
is being effective managing your dependencies and stuff.


00:10:14.640 --> 00:10:16.720
And the way you do that is virtual environments.


00:10:16.720 --> 00:10:19.400
So this is a really good look at how that works.


00:10:19.400 --> 00:10:22.580
- Yeah, and to me, it did seem like after about 3.3,


00:10:22.580 --> 00:10:25.680
that things sort of went faster and now it makes sense


00:10:25.680 --> 00:10:27.980
that it's faster because they're not copying


00:10:27.980 --> 00:10:30.580
the executable into a new location.


00:10:30.580 --> 00:10:33.360
So it's a clean look and I'm with you.


00:10:33.360 --> 00:10:37.600
I've tried a whole bunch of off the shelf helper things


00:10:37.600 --> 00:10:40.920
and it's just my own handful of commands


00:10:40.920 --> 00:10:42.860
that I've come up with that I've just stuck them


00:10:42.860 --> 00:10:47.860
in my little bash config file as little functions


00:10:47.860 --> 00:10:48.840
'cause they don't do much.


00:10:48.840 --> 00:10:50.640
I just needed to create a virtual environment


00:10:50.640 --> 00:10:52.800
and then activate it, and then like you said,


00:10:52.800 --> 00:10:55.320
update pip, and what else do you update?


00:10:55.320 --> 00:10:56.160
- Set up tools.


00:10:56.160 --> 00:10:56.980
- Okay, yeah.


00:10:56.980 --> 00:10:58.400
- It's interesting, there's a lot of things


00:10:58.400 --> 00:10:59.880
that try to help and manage this stuff,


00:10:59.880 --> 00:11:02.880
and they're all pretty good, but in reality,


00:11:02.880 --> 00:11:04.220
I just, like you say, I just want to run


00:11:04.220 --> 00:11:06.200
these three commands and just get rolling


00:11:06.200 --> 00:11:08.400
and just keep it simple, and I could just


00:11:08.400 --> 00:11:11.200
create that as an alias in a, like a bash RC


00:11:11.200 --> 00:11:14.720
or a zsh RC, and separate the three commands


00:11:14.720 --> 00:11:16.320
with a double ampersand, and then boom,


00:11:16.320 --> 00:11:17.480
it's one command, you're good.


00:11:17.480 --> 00:11:19.400
- And for people like us that are doing a lot of,


00:11:19.400 --> 00:11:21.580
like trying out a lot of new things,


00:11:21.580 --> 00:11:23.740
I create a lot of virtual environments.


00:11:23.740 --> 00:11:27.040
I do agree with Kenneth Reitz and the others


00:11:27.040 --> 00:11:29.940
that are promoting pipenv that for,


00:11:29.940 --> 00:11:33.880
because of all of the hashes and security reasons,


00:11:33.880 --> 00:11:35.920
for full application development,


00:11:35.920 --> 00:11:38.420
I think using pipenv is the right thing


00:11:38.420 --> 00:11:42.000
and keeps everybody using the project on the same page.


00:11:42.000 --> 00:11:43.800
But there's plenty of other uses


00:11:43.800 --> 00:11:47.200
for raw virtual environment or VNV that I use.


00:11:47.200 --> 00:11:48.200
Yeah, pretty interesting.


00:11:48.200 --> 00:11:54.880
One final little tidbit of news that I don't think justifies its own place, but pip not


00:11:54.880 --> 00:11:57.760
too long ago went from version 9 to version 10, right?


00:11:57.760 --> 00:11:58.760
Oh, yeah.


00:11:58.760 --> 00:12:00.000
Yeah, I'm glad you brought that up.


00:12:00.000 --> 00:12:01.000
That's big.


00:12:01.000 --> 00:12:03.840
So now in the last week or two, I haven't really been paying attention, but it went


00:12:03.840 --> 00:12:04.840
from 10 to 18.


00:12:04.840 --> 00:12:05.840
Yeah.


00:12:05.840 --> 00:12:06.840
It completely skipped.


00:12:06.840 --> 00:12:10.440
A lot of features.


00:12:10.440 --> 00:12:13.640
It switched from whatever that normal versioning...


00:12:13.640 --> 00:12:14.640
Semantic versioning?


00:12:14.640 --> 00:12:16.880
Semantic versioning to date-based versioning.


00:12:16.880 --> 00:12:19.400
So I don't understand how the date works.


00:12:19.400 --> 00:12:20.360
Maybe it's the year,


00:12:20.360 --> 00:12:22.440
but surely there's more than one release in a year.


00:12:22.440 --> 00:12:23.280
Who knows?


00:12:23.280 --> 00:12:24.200
Anyway, it's pretty cool.


00:12:24.200 --> 00:12:25.640
Maybe it is 2018, but yeah,


00:12:25.640 --> 00:12:27.100
so there's a brand new version of PIP,


00:12:27.100 --> 00:12:28.440
a new versioning scheme there.


00:12:28.440 --> 00:12:29.280
- Yeah, cool.


00:12:29.280 --> 00:12:30.120
- Nice.


00:12:30.120 --> 00:12:31.200
All right, before we get to the next one,


00:12:31.200 --> 00:12:33.960
let me tell you about Datadog, our sponsor.


00:12:33.960 --> 00:12:38.360
So if you have infrastructure and you want to monitor it,


00:12:38.360 --> 00:12:39.840
you want to trace a request,


00:12:39.840 --> 00:12:44.320
say across like your web tier to some microservice series


00:12:44.320 --> 00:12:46.240
of services down at the database,


00:12:46.240 --> 00:12:49.000
and put the logs all together that Datadog provides


00:12:49.000 --> 00:12:51.360
end-to-end visibility for the health and performance


00:12:51.360 --> 00:12:52.440
of your Python apps.


00:12:52.440 --> 00:12:55.440
You can explore metrics, distribute request traces


00:12:55.440 --> 00:12:56.960
and logs, all that in one place.


00:12:56.960 --> 00:12:58.960
And even have a 14-day free trial.


00:12:58.960 --> 00:13:02.320
And if you check them out at pythonbytes.fm/datadog,


00:13:02.320 --> 00:13:05.200
set up a trial, you get a sweet, cute Datadog t-shirt.


00:13:05.200 --> 00:13:06.840
So that makes it worth it right there.


00:13:06.840 --> 00:13:07.680
- Yeah.


00:13:07.680 --> 00:13:08.500
- So anyway, check them out.


00:13:08.500 --> 00:13:10.440
It really helps support the show.


00:13:10.440 --> 00:13:11.760
Brian, have we talked about GUIs?


00:13:11.760 --> 00:13:12.800
(laughing)


00:13:12.800 --> 00:13:15.040
- Yes, I think so, maybe.


00:13:15.040 --> 00:13:15.880
- Maybe.


00:13:15.880 --> 00:13:23.080
So one of the really nice things about having TkEnter built in to Python is it's really


00:13:23.080 --> 00:13:24.080
easy.


00:13:24.080 --> 00:13:26.360
It just comes along, you don't have to do stuff.


00:13:26.360 --> 00:13:32.040
Previously to use something like Qt, or I think the same may be true for WXPython, but


00:13:32.040 --> 00:13:36.560
for Qt, it was a serious pain to get that installed so that you could use it.


00:13:36.560 --> 00:13:42.120
It's like, well, you run this funky package on Ubuntu, you download this installer for


00:13:42.120 --> 00:13:46.360
And then all of a sudden you're like, here's my simple Python file that's going to be your


00:13:46.360 --> 00:13:53.240
app becomes like this weird extra dependency installing problem, right?


00:13:53.240 --> 00:13:58.080
So the Qt company, the people that make Qt, the framework, and then they've taken over


00:13:58.080 --> 00:14:02.200
a PySide to the wrapper and they re-branded it for Qt for Python.


00:14:02.200 --> 00:14:05.080
Well, they've made that much, much easier.


00:14:05.080 --> 00:14:11.480
So now if I have an application and it has like a requirements file or a pip file that


00:14:11.480 --> 00:14:17.840
lock or whatever, pip file that says I depend upon PySide 2, which is the working package


00:14:17.840 --> 00:14:20.500
name for Qt for Python right now.


00:14:20.500 --> 00:14:25.400
If you depend upon that, all you have to do is pip install requirements and you have it


00:14:25.400 --> 00:14:29.600
because it ships as a wheel right off Python.


00:14:29.600 --> 00:14:33.600
If you want to use Qt instead of having like really painful dependencies that people have


00:14:33.600 --> 00:14:37.200
to set up and like a little step, you want to run our app, well, click here to go to


00:14:37.200 --> 00:14:38.460
this page that set up Qt.


00:14:38.460 --> 00:14:40.880
Now you just pip install your requirements.


00:14:40.880 --> 00:14:42.260
Boom, you have Qt, it's nice.


00:14:42.260 --> 00:14:43.220
- That is nice.


00:14:43.220 --> 00:14:44.380
That's a huge thing, actually.


00:14:44.380 --> 00:14:45.740
- I was considering, basically I'm like,


00:14:45.740 --> 00:14:47.060
I'm not using Qt.


00:14:47.060 --> 00:14:50.940
What is required is this separate go find and install Qt


00:14:50.940 --> 00:14:52.420
so you can run my app.


00:14:52.420 --> 00:14:54.140
Like that just means that there's no way


00:14:54.140 --> 00:14:56.620
that that's reasonable for distributing that to people.


00:14:56.620 --> 00:14:59.460
But if all you gotta do is like package the dependencies,


00:14:59.460 --> 00:15:01.620
then presumably you could package it up


00:15:01.620 --> 00:15:04.420
with like PyInstaller at this point, maybe.


00:15:04.420 --> 00:15:05.500
So really nice.


00:15:05.500 --> 00:15:06.460
- Yeah.


00:15:06.460 --> 00:15:11.020
And I want to shout out to all of the people that every time we cover this, contact me


00:15:11.020 --> 00:15:15.820
and tell me that I'm mispronouncing cute as QT.


00:15:15.820 --> 00:15:19.180
This time it was Michael that pronounced it QT instead of cute.


00:15:19.180 --> 00:15:22.500
I think I had it right before, didn't I?


00:15:22.500 --> 00:15:23.500
Oh well.


00:15:23.500 --> 00:15:24.500
Maybe you've infected me.


00:15:24.500 --> 00:15:25.500
No, it's cute for Python.


00:15:25.500 --> 00:15:26.500
Yeah, it's cool.


00:15:26.500 --> 00:15:27.500
Yeah.


00:15:27.500 --> 00:15:28.500
Well, I don't know.


00:15:28.500 --> 00:15:29.500
I think that's official.


00:15:29.500 --> 00:15:30.500
Yeah, yeah.


00:15:30.500 --> 00:15:31.500
I think so too.


00:15:31.500 --> 00:15:34.940
And also for all the people that said, "Yes, you've covered 17 GUI frameworks, but have


00:15:34.940 --> 00:15:37.660
Have you heard of these other two?


00:15:37.660 --> 00:15:42.380
So that's, we're definitely learning a lot about the different frameworks out there.


00:15:42.380 --> 00:15:44.460
So this is one more advance there.


00:15:44.460 --> 00:15:48.620
I don't think people should stop because I still don't, I think this is great, but I


00:15:48.620 --> 00:15:50.060
don't think it's completely solved.


00:15:50.060 --> 00:15:52.380
So people keep trying to solve it with new libraries.


00:15:52.380 --> 00:15:53.380
Go for it.


00:15:53.380 --> 00:15:54.380
Absolutely.


00:15:54.380 --> 00:15:55.380
Absolutely.


00:15:55.380 --> 00:15:56.380
All right.


00:15:56.380 --> 00:15:57.380
What's this next one you got about exceptions here, Brian?


00:15:57.380 --> 00:15:58.380
Okay.


00:15:58.380 --> 00:16:04.260
Well, so exceptions, I think, and I misspelled it, but exceptions are part of Python.


00:16:04.260 --> 00:16:10.480
And even if they're kind of, I think they're handled sort of later when you're learning


00:16:10.480 --> 00:16:14.840
about how to program in Python, you sort of deal with telling people how to use exceptions


00:16:14.840 --> 00:16:15.840
later.


00:16:15.840 --> 00:16:20.240
But you're going to have to deal with them because whether or not you write your own


00:16:20.240 --> 00:16:27.400
exceptions or utilize Rays and try to accept yourself, other, your libraries that you utilize


00:16:27.400 --> 00:16:29.360
are utilizing, they're using it.


00:16:29.360 --> 00:16:33.120
So if you don't want your program to crash, you got to figure out how to do all this.


00:16:33.120 --> 00:16:38.520
So this is not only is it a tutorial on how to use exceptions, it's learning how not to


00:16:38.520 --> 00:16:43.680
handle exceptions because sometimes the right thing to do is not to catch an exception.


00:16:43.680 --> 00:16:48.980
The right thing to do is to pass it, either ignore it completely because it'll pass up


00:16:48.980 --> 00:16:50.720
to a higher level.


00:16:50.720 --> 00:16:55.360
And that's part of one of the things that's in this article, an article called Learning


00:16:55.360 --> 00:16:57.480
Not to Handle Exceptions.


00:16:57.480 --> 00:17:02.000
Talks about not only how to use them, but how to not use them correctly.


00:17:02.000 --> 00:17:06.260
So first it does tell you how to use them correctly, like the try and accept and raise.


00:17:06.260 --> 00:17:07.260
So try and accept are obvious.


00:17:07.260 --> 00:17:11.900
So if you try a bunch of a bit of code, and then you can use an accept clause to catch


00:17:11.900 --> 00:17:17.100
something right off the bat, they tell you, which is I think correct, is usually you don't


00:17:17.100 --> 00:17:18.320
want to accept everything.


00:17:18.320 --> 00:17:22.620
You want to accept a specific exception that you know how to deal with.


00:17:22.620 --> 00:17:26.140
And then everything that you don't know how to deal with, just let it pass you up the


00:17:26.140 --> 00:17:27.140
stack.


00:17:27.140 --> 00:17:30.400
But sometimes even if you catch it, you want to keep raising it.


00:17:30.400 --> 00:17:35.520
So you can, it does talk about re-raising an exception with just raise without any keywords


00:17:35.520 --> 00:17:39.000
out or any exception after it'll just raise the current exception.


00:17:39.000 --> 00:17:43.040
Yeah, I really like that is like you have a try, do your thing, accept.


00:17:43.040 --> 00:17:48.920
And then maybe you want to do some kind of compensating action, like roll back a transaction


00:17:48.920 --> 00:17:52.520
or delete a temporary file, but then you don't really want to handle it.


00:17:52.520 --> 00:17:56.680
You just needed to say, if there's a problem, I got to fix this and then let somebody else


00:17:56.680 --> 00:17:57.680
actually handle it.


00:17:57.680 --> 00:18:03.200
just say raise or you could even use the raise one exception from another exception and chain


00:18:03.200 --> 00:18:04.200
them.


00:18:04.200 --> 00:18:05.200
Yeah.


00:18:05.200 --> 00:18:06.200
It was really nice.


00:18:06.200 --> 00:18:07.740
And then there's other things like finally and else.


00:18:07.740 --> 00:18:12.820
So finally can allow you to run some code whether or not an exception runs.


00:18:12.820 --> 00:18:16.960
And then else lets you run some code only if there are no exceptions.


00:18:16.960 --> 00:18:20.240
And you can use both of them at the same time with the same exception.


00:18:20.240 --> 00:18:21.240
Yeah.


00:18:21.240 --> 00:18:22.240
Both can be utilized.


00:18:22.240 --> 00:18:23.240
Yeah.


00:18:23.240 --> 00:18:27.240
The article goes on and covers dealing with tracebacks, custom exceptions, and then some


00:18:27.240 --> 00:18:31.560
best practices, and then making your exceptions more readable by adding


00:18:31.560 --> 00:18:35.880
arguments and printing things out nicely and stuff. So this is a good.


00:18:35.880 --> 00:18:40.160
Yeah, it's really nice. Great little article. Definitely a nice find there.


00:18:40.160 --> 00:18:45.960
So I thought I put here at the end of our episode today, something that is


00:18:45.960 --> 00:18:50.960
kind of takes a step back and just looks at the overall community, the


00:18:50.960 --> 00:18:56.240
ecosystem, and a bit of an interesting, I don't know, high level view of


00:18:56.240 --> 00:19:00.820
Python. So last week we did our whole special episode on Guido von Rossum


00:19:00.820 --> 00:19:05.480
stepping down right with Brett Cannon, Carol Willing and sort of cover that


00:19:05.480 --> 00:19:10.540
whole news. But another interesting thing that happened that is around that is


00:19:10.540 --> 00:19:16.320
you know sort of speaks to Python's popularity is you know the magazine The


00:19:16.320 --> 00:19:21.140
Economist? Yeah definitely. They did a feature in The Economist on Python and


00:19:21.140 --> 00:19:25.160
Guido von Rossum. That's pretty pretty mainstream and huge. That's pretty


00:19:25.160 --> 00:19:26.400
- Pretty interesting, right?


00:19:26.400 --> 00:19:27.240
- Yeah.


00:19:27.240 --> 00:19:28.480
- So there's an article in The Economist


00:19:28.480 --> 00:19:30.480
called Python Has Brought Computer Programming


00:19:30.480 --> 00:19:33.320
to a Vast New Audience, which is pretty awesome.


00:19:33.320 --> 00:19:37.520
And it covers the meteoric growth of Python,


00:19:37.520 --> 00:19:40.640
how it's becoming so much more popular than many things,


00:19:40.640 --> 00:19:43.240
how, why, and where people are learning Python.


00:19:43.240 --> 00:19:44.880
So I thought that was all quite interesting.


00:19:44.880 --> 00:19:47.500
And then interspersed in there is sort of the history


00:19:47.500 --> 00:19:50.100
of Python with quotes from Guido himself.


00:19:50.100 --> 00:19:51.040
So it's pretty cool.


00:19:51.040 --> 00:19:53.240
- Yeah, this is some nice publicity here.


00:19:53.240 --> 00:19:54.680
- Yeah, not too shabby.


00:19:54.680 --> 00:19:58.720
And it's not a super long read, but it's a pretty nice treatment.


00:19:58.720 --> 00:20:02.480
It talks about some interesting things like some really powerful things that


00:20:02.480 --> 00:20:06.280
people are doing with Python, some interesting ways that people are learning it.


00:20:06.280 --> 00:20:10.240
But it also says, there are some dangers to Python growing so


00:20:10.240 --> 00:20:14.440
fast as a lot of people are coming into the industry, learning just enough,


00:20:14.440 --> 00:20:20.280
grabbing something like TensorFlow, some AI framework, and sort of understanding it.


00:20:20.280 --> 00:20:23.960
And then drawing conclusions from what the machine learning algorithms,


00:20:23.960 --> 00:20:26.280
they sort of understand, tell them,


00:20:26.280 --> 00:20:28.560
and run off with half-baked ideas.


00:20:28.560 --> 00:20:29.960
Thought that was an interesting comment.


00:20:29.960 --> 00:20:32.680
- Yeah, well, I mean, yeah, that is an interesting comment,


00:20:32.680 --> 00:20:34.920
but half-understanding what you're talking about


00:20:34.920 --> 00:20:38.120
and drawing conclusions, we see that every day


00:20:38.120 --> 00:20:41.520
with statistics in newspapers and stuff also.


00:20:41.520 --> 00:20:42.760
- Yeah, absolutely.


00:20:42.760 --> 00:20:45.340
I mean, even in medicine and medical research,


00:20:45.340 --> 00:20:46.440
that stuff is rampant.


00:20:46.440 --> 00:20:49.400
It's a lack of understanding of statistics


00:20:49.400 --> 00:20:50.920
is a problem across the board.


00:20:50.920 --> 00:20:52.040
- I haven't read the article yet.


00:20:52.040 --> 00:20:53.560
I'm excited to read it.


00:20:53.560 --> 00:20:57.600
But the interesting thing is people learning to code


00:20:57.600 --> 00:21:00.500
isn't necessarily because you're going to end up


00:21:00.500 --> 00:21:01.760
being a professional programmer.


00:21:01.760 --> 00:21:04.640
It's often one of the things that helps it grow


00:21:04.640 --> 00:21:07.720
is a lot of people using it as part of their other job,


00:21:07.720 --> 00:21:11.940
like a biologist or somebody else that is just using it


00:21:11.940 --> 00:21:14.840
to help out with some section of their job.


00:21:14.840 --> 00:21:18.860
Or kids, tinkerers just trying to play


00:21:18.860 --> 00:21:20.920
with a Raspberry Pi or something.


00:21:20.920 --> 00:21:22.640
>>Yeah, that's a really good point.


00:21:22.640 --> 00:21:26.160
actually have touched on that a little bit in the article. They say for


00:21:26.160 --> 00:21:30.800
professionals that have long relied upon trawling through spreadsheets, Python is


00:21:30.800 --> 00:21:35.080
especially valuable. And they point out that Citigroup, the American bank, has


00:21:35.080 --> 00:21:40.800
even put together a crash course for Python for its analysts. And the eFinancial


00:21:40.800 --> 00:21:45.520
careers, like a website for financial jobs, found that there's like a


00:21:45.520 --> 00:21:49.720
four-time increase in the request for Python skills in the last three years


00:21:49.720 --> 00:21:52.720
among financial analysts, not programmers.


00:21:52.720 --> 00:21:53.560
- Oh, nice.


00:21:53.560 --> 00:21:55.460
- Yeah, so there's a lot of interesting little tidbits


00:21:55.460 --> 00:21:56.940
of stuff coming out of this article.


00:21:56.940 --> 00:21:57.780
- Yeah, cool.


00:21:57.780 --> 00:21:58.980
- Yeah, definitely worth checking out.


00:21:58.980 --> 00:22:00.340
All right, well, I think that's it.


00:22:00.340 --> 00:22:02.180
That's our six items for the week.


00:22:02.180 --> 00:22:03.420
Brian, you got anything else you want to share


00:22:03.420 --> 00:22:04.900
with everyone while you're here?


00:22:04.900 --> 00:22:07.100
- No, I've been having my head in antiques,


00:22:07.100 --> 00:22:11.340
so if anybody's a listener in the Portland area,


00:22:11.340 --> 00:22:13.580
hit me up and I'll tell you where I'm gonna be selling


00:22:13.580 --> 00:22:18.020
some antiques this Sunday, so completely non-Python job.


00:22:18.020 --> 00:22:22.340
It's kind of nice every now and then to just take a step away, put the keyboard down, and


00:22:22.340 --> 00:22:25.180
do something really different so you can come back more refreshed, right?


00:22:25.180 --> 00:22:26.180
Yeah.


00:22:26.180 --> 00:22:27.180
You got any news?


00:22:27.180 --> 00:22:30.580
No, not this week, although I'm working on something big that I will announce next week.


00:22:30.580 --> 00:22:33.580
So I'm close to having news, but I'm not quite there yet.


00:22:33.580 --> 00:22:34.580
All right.


00:22:34.580 --> 00:22:35.580
Nice.


00:22:35.580 --> 00:22:36.580
I'll bring a little extra news next week.


00:22:36.580 --> 00:22:37.580
All right.


00:22:37.580 --> 00:22:40.180
Well, Brian, thanks for doing this and sharing with everyone, and thank you everyone for


00:22:40.180 --> 00:22:41.180
listening.


00:22:41.180 --> 00:22:42.180
Thanks.


00:22:42.180 --> 00:22:43.180
Bye.


00:22:43.180 --> 00:22:44.180
Yep.


00:22:44.180 --> 00:22:45.180
Thank you for listening to Python Bytes.


00:22:45.180 --> 00:22:47.820
Follow the show on Twitter via @pythonbytes.


00:22:47.820 --> 00:22:54.780
Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news


00:22:54.780 --> 00:22:59.420
item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout


00:22:59.420 --> 00:23:04.780
for sharing something cool. On behalf of myself and Brian Aukin, this is Michael Kennedy. Thank


00:23:04.780 --> 00:23:07.980
you for listening and sharing this podcast with your friends and colleagues.

