WEBVTT

00:00:00.001 --> 00:00:04.980
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.980 --> 00:00:10.160
This is episode 166, recorded January 22nd, 2020.

00:00:10.160 --> 00:00:11.240
I'm Brian Okken.

00:00:11.240 --> 00:00:12.100
And I'm Michael Kennedy.

00:00:12.100 --> 00:00:14.660
And this episode is brought to you by DigitalOcean.

00:00:14.660 --> 00:00:16.300
We'll talk about them more later.

00:00:16.300 --> 00:00:20.200
But do you want to get into quantum stuff or what do you got for us first?

00:00:20.200 --> 00:00:21.200
Yeah, how about that?

00:00:21.200 --> 00:00:25.620
Like, there were many crazy ideas in programming, right?

00:00:25.620 --> 00:00:31.500
Like infrastructure as code or, you know, infrastructure as a service and all the cloud computing things.

00:00:31.500 --> 00:00:38.280
And, you know, there's this really cool quote from William Gibson, the science fiction writer, is that the future is here.

00:00:38.280 --> 00:00:41.640
It's just not evenly distributed, which is pretty cool.

00:00:41.640 --> 00:00:47.800
And I think this thing I'm about to talk about is a little bit about making that way more even.

00:00:47.800 --> 00:00:55.900
So, Amazon, AWS, you know, the bookstore is announcing a quantum computing as a service.

00:00:55.900 --> 00:00:57.940
Okay, we were expecting this to happen.

00:00:57.940 --> 00:00:58.900
Yeah, we were.

00:00:58.900 --> 00:01:03.280
Well, the thing is the quantum computers are so early stage.

00:01:03.280 --> 00:01:04.480
They're so specialized.

00:01:04.480 --> 00:01:09.300
They look more like science projects than they do any sort of computer.

00:01:09.300 --> 00:01:10.820
They're not in square boxes.

00:01:10.820 --> 00:01:14.820
They're usually, like, dangling from the ceiling with, like, all sorts of wires shooting out of them.

00:01:14.820 --> 00:01:17.920
Like, you know, you can't go get a quantum computer.

00:01:17.920 --> 00:01:22.880
But there are quantum computers that can do limited amounts of computing.

00:01:22.880 --> 00:01:28.420
And so, learning to program them is something that might be a good idea, right?

00:01:28.420 --> 00:01:34.820
Like, I have no idea what programming a quantum computer is going to feel like because it's just the conceptions.

00:01:34.820 --> 00:01:37.320
I just haven't formed it fully in my mind.

00:01:37.320 --> 00:01:39.200
Do you have a good sense of what this is going to be like?

00:01:39.200 --> 00:01:39.520
No.

00:01:39.520 --> 00:01:39.840
Well.

00:01:39.840 --> 00:01:41.920
I think we're at the punch card stage still.

00:01:41.920 --> 00:01:43.060
Yeah, yeah, exactly.

00:01:43.060 --> 00:01:51.680
So, this new service called Amazon Bracket from AWS is a fully managed service that allows scientists, researchers, and developers,

00:01:51.680 --> 00:01:59.840
and people just interested in quantum computing to begin experimenting with computers from multiple quantum hardware providers in a single place.

00:01:59.840 --> 00:02:06.840
So, there's a handful of people creating these quantum computers, and they have different capabilities and whatnot.

00:02:06.960 --> 00:02:11.540
So, you can actually select more than one provider for your quantum computer.

00:02:12.540 --> 00:02:15.200
So, we all know about bits, right?

00:02:15.200 --> 00:02:17.780
Bits are 0 and 1, on and off, that sort of thing.

00:02:17.780 --> 00:02:21.400
That's the conception in my mind that it's pretty easy for things to work.

00:02:21.400 --> 00:02:27.260
But quantum computers use a more sophisticated representation known as a qubit or a quantum bit.

00:02:27.260 --> 00:02:30.960
And each qubit exists in a state of 1 or 0.

00:02:31.320 --> 00:02:40.400
But because of its quantum nature, it also, in superpositions of 1 or 0, which means it can simultaneously occupy both states.

00:02:40.400 --> 00:02:51.320
So, it's basically a two-dimensional vector of complex numbers of all these different states, which means it has way more data representation and computing power than just 0 or 1.

00:02:51.900 --> 00:02:53.140
You know, it has, like, near infinite.

00:02:53.140 --> 00:03:00.140
So, this service is built to give people some, basically, hands-on experience programming.

00:03:00.140 --> 00:03:02.860
So, I linked to the Verge article talking about this.

00:03:02.860 --> 00:03:05.320
I also linked to the direct announcement.

00:03:05.320 --> 00:03:09.680
Now, Brian, do you see that code section down there, that little example?

00:03:09.680 --> 00:03:10.300
Yes.

00:03:10.300 --> 00:03:12.340
I have no idea what it's going to print.

00:03:12.480 --> 00:03:13.620
I have no idea what it's going to print either.

00:03:13.620 --> 00:03:19.540
But if not caring what the computational output is, what does that remind you of?

00:03:19.540 --> 00:03:20.440
Python.

00:03:20.440 --> 00:03:21.800
It definitely looks like Python.

00:03:21.800 --> 00:03:29.820
And in the announcement, you can say, in here, you can use a notebook to explore writing in this bracket service, bracket language.

00:03:29.820 --> 00:03:34.800
And, yeah, so I don't know if this is literally Python or is just very, very much like Python.

00:03:34.800 --> 00:03:39.140
But if you're a Python developer, you know, you can get into this pretty easy, easily, I would suspect.

00:03:39.140 --> 00:03:42.300
Yeah, it definitely looks like it's a notebook or something.

00:03:42.500 --> 00:03:50.300
Yeah, so if you want to know how quantum computers work, if you want to play with programming them, you know, check this Amazon bracket thing out.

00:03:50.300 --> 00:03:52.160
I've not checked the pricing.

00:03:52.160 --> 00:03:54.520
It seems like it might not be that cheap.

00:03:54.520 --> 00:03:56.820
But, yeah, it still looks pretty interesting.

00:03:56.820 --> 00:04:03.960
Well, I think they're really trying to make it available to people that, in a researcher-student situation, so it's probably not terrible.

00:04:03.960 --> 00:04:04.820
But I don't know.

00:04:04.820 --> 00:04:05.580
Yeah, yeah.

00:04:05.580 --> 00:04:06.320
Who knows?

00:04:06.320 --> 00:04:07.520
But it's definitely interesting.

00:04:07.940 --> 00:04:15.680
And people who are interested can now go and just fire up a quantum computer in the cloud and, through a Jupyter notebook, play with it, which is pretty awesome.

00:04:15.680 --> 00:04:16.140
Yeah.

00:04:16.140 --> 00:04:19.220
So let's go from quantum to virtual.

00:04:19.220 --> 00:04:22.320
Yes, let's do it.

00:04:22.320 --> 00:04:22.700
Do it.

00:04:22.700 --> 00:04:23.220
Take a step.

00:04:23.220 --> 00:04:23.380
Okay.

00:04:23.380 --> 00:04:24.700
I couldn't resist.

00:04:24.700 --> 00:04:27.420
But, you know, not really that cool.

00:04:27.420 --> 00:04:29.200
But anyway, virtual environments.

00:04:29.200 --> 00:04:29.560
Right.

00:04:29.560 --> 00:04:30.180
With Python.

00:04:30.180 --> 00:04:32.500
I know that both of us use virtual environments.

00:04:32.500 --> 00:04:33.140
All the time.

00:04:33.260 --> 00:04:35.780
I still have coworkers that don't.

00:04:35.780 --> 00:04:38.780
And I know that some people still, I don't know.

00:04:38.780 --> 00:04:42.140
There's a lot of old guides and tutorials on how to use virtual environments.

00:04:42.140 --> 00:04:44.780
And I really didn't know I needed this.

00:04:44.780 --> 00:04:49.380
But Brett Cannon wrote a quick and dirty guide on how to install packages for Python.

00:04:49.380 --> 00:04:54.020
And it is mostly just basically walking people on how to use virtual environments.

00:04:54.760 --> 00:04:56.680
I, of course, already know how to do that.

00:04:56.680 --> 00:05:03.300
But I think it's good to have something like this available to throw to people that aren't using them yet because it's pretty short and simple.

00:05:03.300 --> 00:05:14.860
One of the things I love about the article is it uses the --prompt flag for creating a virtual environment, which will make it so that your prompt variable or your prompt isn't just V and V.

00:05:14.860 --> 00:05:17.500
It's something useful for you to see it.

00:05:17.500 --> 00:05:18.640
Yeah, that is super cool.

00:05:18.640 --> 00:05:21.560
I love that recommendation about the --prompt.

00:05:22.120 --> 00:05:30.280
And in the article, Brett shows you how to have it take the current working directory as a default, right?

00:05:30.280 --> 00:05:33.300
So it'll automatically grab that for you, which is cool.

00:05:33.300 --> 00:05:38.680
I've got a little bash snippet that I use that essentially does that in my environment.

00:05:38.680 --> 00:05:48.980
He hints at that in Python 3.9, there's going to be an improvement that instead of having some code that looks up your current directory name,

00:05:49.720 --> 00:05:56.900
that you can just pass in a dot for the prompt and it will just name it that, which I'm looking forward to that.

00:05:56.900 --> 00:05:57.420
That's cool.

00:05:57.420 --> 00:05:58.340
Yeah, that's really cool.

00:05:58.340 --> 00:06:01.860
Maybe I just want to start running 3.9 beta just for that.

00:06:01.860 --> 00:06:03.100
Maybe.

00:06:03.100 --> 00:06:05.180
Have you started playing with 3.9 yet?

00:06:05.180 --> 00:06:06.080
No, I haven't.

00:06:06.080 --> 00:06:06.540
Oh, okay.

00:06:06.540 --> 00:06:15.480
I'm still actually, I'm still trying to decide what version I want to use because traditionally use Homebrew and something went wrong with Homebrew for Python 3.8.

00:06:15.720 --> 00:06:27.780
So if you try to install Python 3.7 from Homebrew, you still get 3.7, which is frustrating, but I haven't decided that I'm wanting to break away from that just yet.

00:06:27.780 --> 00:06:30.940
But it's starting to get to the point where maybe I'll just go to 3.9.

00:06:30.940 --> 00:06:31.640
I don't know.

00:06:31.640 --> 00:06:35.080
I just still use the installers from the Python.org site.

00:06:35.080 --> 00:06:36.740
Yeah, I'm going to be back there too.

00:06:36.740 --> 00:06:39.220
But yeah, this is cool and it's nice to have this.

00:06:39.220 --> 00:06:40.540
This is real clear and concise.

00:06:40.540 --> 00:06:42.640
And yeah, thanks, Brett.

00:06:43.320 --> 00:06:45.100
So do you know what else is cool?

00:06:45.100 --> 00:06:46.460
DigitalOcean is pretty cool.

00:06:46.460 --> 00:06:47.480
DigitalOcean is awesome.

00:06:47.480 --> 00:06:47.880
Yeah.

00:06:47.880 --> 00:06:50.440
So DigitalOcean is sponsoring this episode.

00:06:50.440 --> 00:06:55.660
They have awesome infrastructure and an awesome product and we use them for our services.

00:06:55.660 --> 00:06:58.520
Do you have a memory intensive workload?

00:06:58.520 --> 00:07:01.820
Something like high performance SQL or NoSQL databases?

00:07:01.820 --> 00:07:05.300
In-memory caches like Redis or Indexes?

00:07:05.300 --> 00:07:07.800
Some kind of large data analysis runtime?

00:07:08.100 --> 00:07:13.320
Well, if so, you need DigitalOcean's new memory optimized droplets, or at least you should check

00:07:13.320 --> 00:07:13.720
them out.

00:07:13.720 --> 00:07:19.420
So check them out by going to pythonbytes.fm/DigitalOcean and get $100 credit.

00:07:19.420 --> 00:07:20.820
And that's back.

00:07:20.820 --> 00:07:22.360
We used to be lower, but now it's $100.

00:07:22.360 --> 00:07:22.760
Yay.

00:07:22.760 --> 00:07:23.180
Yay.

00:07:23.180 --> 00:07:24.120
Well done, DigitalOcean.

00:07:24.120 --> 00:07:25.140
Thanks for supporting the show.

00:07:25.140 --> 00:07:29.460
Sometimes the best thing you can do, Brian, is just say no.

00:07:29.460 --> 00:07:30.000
All right?

00:07:30.000 --> 00:07:33.940
It's easy to say yes to everything, but when you say yes to something, you're actually saying

00:07:33.940 --> 00:07:34.900
no to something else.

00:07:35.060 --> 00:07:35.940
Yeah, I've heard that.

00:07:35.940 --> 00:07:40.240
That's kind of like the whole pointing a finger and you three point back at you and stuff like

00:07:40.240 --> 00:07:40.480
that.

00:07:40.480 --> 00:07:41.300
Yeah, exactly.

00:07:41.300 --> 00:07:45.860
So this next thing I want to talk about is something that made the rounds the last couple of weeks.

00:07:45.860 --> 00:07:46.820
And it's pretty interesting.

00:07:46.820 --> 00:07:51.520
It's an article that sort of lays out a case against the no code movement.

00:07:51.520 --> 00:07:55.620
And it's entitled, Say No to the No Code Movement by Alex Hudson.

00:07:55.620 --> 00:07:57.300
And it's funny.

00:07:57.380 --> 00:07:57.780
I don't know.

00:07:57.780 --> 00:08:03.440
I might be showing my age, my gray bits in my beard or whatever, my goatee.

00:08:03.440 --> 00:08:08.700
But he starts off by talking about 2020 is going to be the year of no code movement where

00:08:08.700 --> 00:08:14.300
you can write business logic and entire applications without having to train the training of a software

00:08:14.300 --> 00:08:14.660
developer.

00:08:14.660 --> 00:08:17.980
I feel like I've heard that before, last century even.

00:08:17.980 --> 00:08:18.480
How about you?

00:08:18.480 --> 00:08:19.440
Well, yeah.

00:08:19.940 --> 00:08:23.280
Are we talking like round trip stuff like UML round trip things?

00:08:23.280 --> 00:08:28.160
Yeah, I was thinking of like Vizio and some of these other sort of business intelligence,

00:08:28.160 --> 00:08:34.840
draggy droppy things that were going to, you know, quickly replace us as software developers.

00:08:34.840 --> 00:08:35.980
And we're just going to be out of a job.

00:08:35.980 --> 00:08:39.680
So you probably shouldn't study that because either outsourcing or there's no code stuff

00:08:39.680 --> 00:08:41.420
is going to like crush our jobs.

00:08:41.560 --> 00:08:42.360
I don't know.

00:08:42.360 --> 00:08:44.880
I feel like software has been pretty good over the last 20 years.

00:08:44.880 --> 00:08:47.380
Yeah, that's weird.

00:08:47.380 --> 00:08:48.200
So yeah.

00:08:48.200 --> 00:08:54.320
So the reason I'm bothering to cover this though is I do think it's interesting that this is

00:08:54.320 --> 00:08:55.160
something of a trend.

00:08:55.160 --> 00:09:01.180
And I think that Alex does a pretty good job of laying out what some of the issues are.

00:09:01.180 --> 00:09:06.520
So it's easy to get sucked into wanting this, but it's also good to maybe know where like,

00:09:06.520 --> 00:09:10.360
hey, this might make sense to try this, this no code idea.

00:09:10.800 --> 00:09:14.060
So examples include like Salesforce, right?

00:09:14.060 --> 00:09:17.220
With Salesforce, you can sort of wire stuff together to make things happen.

00:09:17.220 --> 00:09:20.120
Other examples were Zapier were doing things.

00:09:20.120 --> 00:09:20.460
Yeah.

00:09:20.460 --> 00:09:21.960
Maybe if this, then that.

00:09:21.960 --> 00:09:22.360
Yeah.

00:09:22.360 --> 00:09:23.060
If this, then that.

00:09:23.060 --> 00:09:27.500
I feel like Zapier actually, you know, Alex gave it a pretty good vote.

00:09:27.500 --> 00:09:32.860
And I agree as well because it's not so much about trying to write software with Zapier.

00:09:32.860 --> 00:09:34.860
It's about trying to just do integration.

00:09:34.860 --> 00:09:39.860
I feel like no code integration isn't terrible if something awesome like Zapier can do it.

00:09:40.280 --> 00:09:46.200
But basically the idea is like, look, there's people want to transform business processes

00:09:46.200 --> 00:09:47.860
into the software domain.

00:09:47.860 --> 00:09:52.420
And they might want to do that because change control of like, how do you change your business

00:09:52.420 --> 00:09:54.760
and understand how it works is now a software problem.

00:09:54.760 --> 00:09:59.540
It's easier to innovate on what makes the business distinct because now it's clear.

00:09:59.540 --> 00:10:00.960
You're like, these are the things we do.

00:10:01.080 --> 00:10:04.000
Everyone does this, but this, this is our special sauce right here.

00:10:04.000 --> 00:10:09.780
And there's a cool quote from Satya Nadella that says, every company is a software company

00:10:09.780 --> 00:10:10.360
these days.

00:10:10.660 --> 00:10:23.600
And so there's a lot of pressure to take maybe traditional companies and organizations that don't have a software team or they have a very small software team that's too busy just keeping the lights on to help everyone else with their little issues.

00:10:23.600 --> 00:10:26.940
There's this temptation to say, okay, well, what is our no code story?

00:10:27.140 --> 00:10:30.980
Like how do we get some systems that just like let people write code?

00:10:30.980 --> 00:10:34.460
You know, Excel sort of played that role to a large degree.

00:10:34.460 --> 00:10:38.360
So the article's good for like laying out some of the issues.

00:10:38.600 --> 00:10:46.720
Starts out, well, the first assumption is that writing text, like writing business logic in text forms is something that everybody hates, right?

00:10:46.720 --> 00:10:48.700
Outside of the software development community, right?

00:10:48.700 --> 00:10:57.500
Like if I'm an accountant, I don't want to write text logic because, well, you have to be accurate and things like that, right?

00:10:57.500 --> 00:10:59.880
And if you had boxes, you can drag them together.

00:10:59.880 --> 00:11:00.640
That might be better.

00:11:00.640 --> 00:11:07.320
So it talks about how, you know, there's, it's a simpler abstraction that's really easy to work with.

00:11:07.900 --> 00:11:09.920
Or it's simpler syntax.

00:11:09.920 --> 00:11:16.320
And in both of those cases, you really run into the problem of, well, you can do the simple little thing first.

00:11:16.320 --> 00:11:19.640
Like think of a visual, like a flow chart, right?

00:11:19.640 --> 00:11:21.220
Like if you could just run a flow chart.

00:11:21.220 --> 00:11:24.600
Well, for a really simple problem, that's fine.

00:11:24.600 --> 00:11:29.460
But if you try to solve a real problem, you have a flow chart with like a thousand boxes and lines going everywhere.

00:11:29.460 --> 00:11:31.260
That's not going to help you.

00:11:31.260 --> 00:11:37.200
Another one, another example of the issues you run into is that many of the no code advocates

00:11:37.200 --> 00:11:41.780
are building significant systems by pulling together off the shelf apps and integrating them.

00:11:41.780 --> 00:11:42.840
This is kind of like Zapier.

00:11:42.840 --> 00:11:46.500
But, you know, Zapier, I think, use right is still good.

00:11:46.500 --> 00:11:51.900
But the problem is all the logic becomes implemented as a configuration of all these external systems.

00:11:51.900 --> 00:11:55.140
And you're limited by what they can do and what they can accept and so on.

00:11:55.560 --> 00:11:56.420
So, yeah.

00:11:56.420 --> 00:12:02.880
He said, look, if there was a better way to create software than writing text, most of us would just drop it like a hot rock.

00:12:02.880 --> 00:12:04.260
And we'd be like, yeah, okay, what's next?

00:12:04.260 --> 00:12:04.780
Let's do that.

00:12:04.780 --> 00:12:05.180
All right.

00:12:05.180 --> 00:12:05.920
It would be great.

00:12:05.920 --> 00:12:08.240
It's not that we love typing so much.

00:12:08.240 --> 00:12:08.820
Yeah.

00:12:08.940 --> 00:12:13.200
So, I guess, in conclusion, it's like, where does the no code stuff fail in practice?

00:12:13.200 --> 00:12:15.760
Well, you get like 80% of the way there.

00:12:15.760 --> 00:12:19.360
And then you're like, well, all these edge cases make this so complicated.

00:12:19.360 --> 00:12:26.680
Or you end up with all the little edge cases and details that is like this little graphical whatever is so complicated that it's worse than text.

00:12:26.680 --> 00:12:27.840
You know, things like that.

00:12:28.100 --> 00:12:33.640
But where it might be useful is for a little proof of concept demonstrations and things like that.

00:12:33.640 --> 00:12:37.000
Like, hey, here's the happy path of the main thing we want to do.

00:12:37.000 --> 00:12:42.300
I threw this together with something like Salesforce or some other BI tool or something.

00:12:42.300 --> 00:12:43.320
And look what we got.

00:12:43.320 --> 00:12:43.720
Right.

00:12:43.720 --> 00:12:49.100
Then you could go rewrite that with Python and Matplotlib or, you know, whatever it is you're trying to solve.

00:12:49.100 --> 00:12:53.160
So, I thought this was an interesting take on the whole no code movement.

00:12:53.160 --> 00:13:00.180
And I also thought it was interesting that, like, this is going to be the year of no code when I remember hearing that in the 90s.

00:13:00.180 --> 00:13:00.500
Yeah.

00:13:00.500 --> 00:13:07.780
Actually, my first job at HP was using a visual language for measuring systems.

00:13:07.780 --> 00:13:12.480
And it was, I think we should look at some of the failures of the 90s.

00:13:12.480 --> 00:13:16.140
Because what happened is what's going to happen again.

00:13:16.140 --> 00:13:19.560
Like you said, you have systems that go 80% of the way.

00:13:19.700 --> 00:13:25.240
But the corner cases make it so that you still have to be an expert at this tool to do it.

00:13:25.240 --> 00:13:26.500
So, you still hire programmers.

00:13:26.500 --> 00:13:31.080
But they only are gaining experience with this one tool that they don't even really like.

00:13:31.080 --> 00:13:33.380
And they can't transfer to any other job.

00:13:33.380 --> 00:13:35.240
And that's terrible.

00:13:35.240 --> 00:13:36.080
It's not good.

00:13:36.080 --> 00:13:39.600
Plus, visual stuff is sort of really fun when you get started.

00:13:39.600 --> 00:13:42.140
But you quickly need a wrist brace.

00:13:42.140 --> 00:13:47.020
Working on the mouse all day long is really actually fatiguing to your hands.

00:13:47.760 --> 00:13:48.520
That's a good point.

00:13:48.520 --> 00:13:50.420
I hadn't even thought about that.

00:13:50.420 --> 00:13:51.060
But, oh, yeah.

00:13:51.060 --> 00:13:51.640
For sure.

00:13:51.640 --> 00:13:53.520
It was a program called VEE.

00:13:53.520 --> 00:13:55.940
And I don't think it's even in place anymore.

00:13:55.940 --> 00:13:57.540
It was a visual thing.

00:13:57.540 --> 00:14:01.620
And we used to joke that if you buy the box set, it comes with a wrist brace.

00:14:01.620 --> 00:14:03.980
Yeah, that's not good.

00:14:03.980 --> 00:14:08.360
You know, this next item that you got coming up here, I checked this out.

00:14:08.360 --> 00:14:10.560
And this is some deep stuff here.

00:14:10.560 --> 00:14:11.540
Tell us about it.

00:14:11.600 --> 00:14:14.340
So this isn't really a topic that we normally kind of cover.

00:14:14.340 --> 00:14:19.360
But it's also something that I was pleased and surprised to see come up with at North Bay Python.

00:14:19.360 --> 00:14:21.500
I'm going to highlight Shaw.

00:14:21.500 --> 00:14:25.160
And his full name is Shadeed Wallace-Stepter, I think.

00:14:25.160 --> 00:14:26.880
But he says he goes by Shaw.

00:14:26.880 --> 00:14:28.940
He spoke at North Bay Python.

00:14:29.480 --> 00:14:37.780
And we're linking to an article that is his article but also includes a link to the video of the presentation at North Bay Python.

00:14:37.780 --> 00:14:41.300
And it's called What I Learned Going from Prison to Python.

00:14:42.040 --> 00:14:44.340
And it is Python related.

00:14:44.340 --> 00:14:48.860
But the Python take comes in the end, like the last few minutes.

00:14:48.860 --> 00:14:50.920
It is a 40-minute video.

00:14:50.920 --> 00:14:53.760
But you can even just listen to it because there's no visuals.

00:14:53.760 --> 00:14:58.240
I'm not going to really summarize it too much other than this is an amazing story.

00:14:58.240 --> 00:15:01.480
And people need to listen to it.

00:15:01.480 --> 00:15:09.220
He's talking about how he went from a generational poverty situation to a crime as a teen.

00:15:09.540 --> 00:15:15.700
It's interesting that he talks about one of the reasons why he started doing some crimes.

00:15:15.700 --> 00:15:17.220
It wasn't because he needed to.

00:15:17.220 --> 00:15:20.140
It was because he had zero control over the rest of his life.

00:15:20.140 --> 00:15:24.220
And it made him, it was something that he felt had control over.

00:15:24.220 --> 00:15:29.740
And then that gets him to the point where his best friend, like, dies on his shoulder by being shot.

00:15:29.740 --> 00:15:36.420
And then he ends up in prison and spends 19 years there, 19 years of a 27-year sentence.

00:15:37.000 --> 00:15:45.400
But this fight that he had to do to just to fight against the entire system, trying to keep him in poverty or keep him in prison.

00:15:45.400 --> 00:15:47.920
It is an incredible story for him.

00:15:48.100 --> 00:15:56.460
But I think it also talks about how, regardless of your politics, poverty and the prison system in our country is broken and we need to fix it.

00:15:56.460 --> 00:15:58.140
So that's why I wanted to highlight it.

00:15:58.140 --> 00:15:58.360
Yeah.

00:15:58.360 --> 00:16:09.520
The thing that touched me from this was, I think for the first time, maybe ever, I understood why people would go down some of these paths.

00:16:09.660 --> 00:16:14.780
Because, you know, people make some of these decisions and they're just so clearly a bad idea.

00:16:14.780 --> 00:16:15.920
You know what I mean?

00:16:15.920 --> 00:16:21.940
I'm thinking of, like, drug addicts for hard, hard drugs like heroin or meth.

00:16:22.480 --> 00:16:28.380
Or, you know, people who are burglarizing houses and robbing, play armed robbery and stuff.

00:16:28.380 --> 00:16:31.140
And just think, man, there's got to be a better way.

00:16:31.140 --> 00:16:34.400
But listening to his story, I really understood it.

00:16:34.400 --> 00:16:37.140
And, you know, I didn't get all the way to the end.

00:16:37.140 --> 00:16:42.080
So it's awesome that Python, it sounds like, helped him move beyond that.

00:16:42.140 --> 00:16:44.320
But do you have the last bit of the story?

00:16:44.320 --> 00:16:45.800
Or are you going to give away too much?

00:16:45.800 --> 00:16:47.360
So, no, I don't think it'll give it away.

00:16:47.360 --> 00:16:50.800
I think he ends in a very positive note on talking about the open source community.

00:16:50.800 --> 00:16:58.680
He eventually gets into, he goes from studying law to studying entrepreneurship to meeting Jessica.

00:16:58.680 --> 00:17:00.500
I'm going to get her last name wrong.

00:17:00.500 --> 00:17:01.160
Forgot it.

00:17:01.160 --> 00:17:01.980
Jessica McKellar.

00:17:01.980 --> 00:17:02.660
Yeah, McKellar.

00:17:02.660 --> 00:17:02.860
Yeah.

00:17:02.860 --> 00:17:03.340
Sounds right.

00:17:03.340 --> 00:17:10.940
Although he said he met her in a journalism setting, but she was, like, not very good at journalism or wasn't a journalist or something like that.

00:17:11.040 --> 00:17:12.660
But anyway, she's a great person.

00:17:12.660 --> 00:17:24.980
But one of the things that people face when they come out of a prison system, especially if they came in in a poverty situation, is they've got no skills and no job history or things like that.

00:17:24.980 --> 00:17:26.100
Or they may have no skills.

00:17:26.100 --> 00:17:29.800
And even if they do have skills, who's going to hire them?

00:17:29.800 --> 00:17:34.820
But the open source community is just a everybody's welcome.

00:17:34.820 --> 00:17:41.300
And coding, there's more situations in coding where I don't know either you can do the job.

00:17:41.300 --> 00:17:48.840
And that equality of background of just, it's just about whether you can get stuff done.

00:17:48.840 --> 00:17:50.500
It isn't just about that.

00:17:50.500 --> 00:17:53.560
We also, you have to be able to communicate and all things like that.

00:17:53.660 --> 00:17:58.340
But we don't really care as much about your college pedigree or anything.

00:17:58.340 --> 00:18:00.240
It's either you're a great coder or you're not.

00:18:00.240 --> 00:18:02.720
And that's a cool story.

00:18:02.720 --> 00:18:09.420
And his, even equates the open, he was shocked by the open source community of just working on stuff and giving it away.

00:18:09.420 --> 00:18:09.700
Yeah.

00:18:09.700 --> 00:18:19.920
But apparently there was a program at San Quentin that O'Reilly gave a bunch of laptops there so that people could watch some of the O'Reilly training videos there.

00:18:19.920 --> 00:18:21.660
And that's how he learned Python.

00:18:21.660 --> 00:18:22.700
So that's cool.

00:18:22.700 --> 00:18:23.440
Man, super cool.

00:18:23.440 --> 00:18:26.600
Yeah, I loved his story and it was really different.

00:18:26.600 --> 00:18:30.500
So I'm happy he shared it and happy you covered it.

00:18:30.500 --> 00:18:30.720
Yeah.

00:18:30.720 --> 00:18:32.580
Speaking of covering things, have we covered GUIs?

00:18:32.580 --> 00:18:33.360
I don't think so.

00:18:33.360 --> 00:18:34.560
We should probably cover GUIs.

00:18:34.560 --> 00:18:35.620
We probably should.

00:18:35.620 --> 00:18:42.140
But, you know, what I really like about our listeners and our audience is they really help round us out.

00:18:42.140 --> 00:18:43.080
You know what I mean, Brian?

00:18:43.080 --> 00:18:43.540
Yeah.

00:18:43.540 --> 00:18:45.900
Man, like I'll bring up one thing.

00:18:45.900 --> 00:18:47.360
I'm like, oh, I heard of this one thing.

00:18:47.360 --> 00:18:48.900
Can you guys believe this is a thing?

00:18:48.900 --> 00:18:52.820
And they're like, and here, you know, here's the seven others and here are the trade-offs.

00:18:52.820 --> 00:18:53.900
Did you know about this?

00:18:53.900 --> 00:18:55.960
Yeah, and I can't believe you haven't covered this already.

00:18:55.960 --> 00:18:56.760
Yeah, exactly.

00:18:56.760 --> 00:19:01.700
So I've already got a bunch of stuff on Q that has that sort of take to it.

00:19:02.020 --> 00:19:09.000
But here's one called QUIC, a QT5-based GUI generator for CLIC.

00:19:09.000 --> 00:19:20.600
So CLIC is an argpars-based command line interface tool or framework, I guess, where you can put decorators onto different functions and say,

00:19:20.600 --> 00:19:25.400
these are some of the arguments, these are required, these are not required, these are the types, and so on.

00:19:25.440 --> 00:19:27.500
And it lets you write command line interfaces.

00:19:27.500 --> 00:19:39.420
And so QUIC will take those and naturally understand the message given to CLIC or argparse and then create a GUI out of it.

00:19:39.420 --> 00:19:40.020
No way!

00:19:40.020 --> 00:19:41.020
Yeah, that's pretty cool, right?

00:19:41.020 --> 00:19:49.060
So you don't hardly have to do anything other than throw like a QUIC.run and give it a function or something to that effect, and off it goes.

00:19:49.220 --> 00:19:50.300
Oh, that is cool.

00:19:50.300 --> 00:19:52.140
Yeah, I'm totally going to try this out.

00:19:52.140 --> 00:19:54.340
Yeah, it's not super popular.

00:19:54.340 --> 00:19:58.000
It's got, you know, like 62 stars and four contributors.

00:19:58.000 --> 00:20:00.800
It was changed this month, so that's cool.

00:20:00.800 --> 00:20:02.780
But just the example.

00:20:02.780 --> 00:20:06.380
So it's a little bit old, but I think it's an interesting take and an interesting idea.

00:20:06.380 --> 00:20:11.120
And if it's going to work for people, they can definitely check it out and contribute to it, so on.

00:20:11.220 --> 00:20:13.660
So, yeah, I think this is a nice one.

00:20:13.660 --> 00:20:20.460
It's based or inspired, not based on, inspired by GUI, G-O-O-E-Y, which is also really, really nice.

00:20:20.460 --> 00:20:26.640
But you have to be a little bit more explicit on how it presents the UI for GUI.

00:20:26.640 --> 00:20:30.200
You've got to say, here's a, I want a calendar widget for this thing or whatever.

00:20:30.200 --> 00:20:36.580
But yeah, anyway, it'll even let you still run your standard click-based CLI app the same.

00:20:36.580 --> 00:20:43.660
But then if you throw in a --GUI, it'll turn it into a GUI, even if you just want to change the command line arguments, which is, yeah, it looks pretty nice.

00:20:43.660 --> 00:20:47.420
Yeah, a GUI, it's an interesting function call.

00:20:47.420 --> 00:20:48.200
Yeah, exactly.

00:20:48.200 --> 00:20:53.220
Yeah, so thank you, Ricky Tici, for sending this along and recommending it.

00:20:53.220 --> 00:20:53.720
It's a good one.

00:20:53.720 --> 00:20:54.640
Yeah, thanks.

00:20:54.640 --> 00:20:58.980
Okay, we're not to jokes yet, but I have kind of a funny one coming up.

00:20:58.980 --> 00:21:00.600
So it's interesting.

00:21:00.600 --> 00:21:07.980
So there's a couple articles, I think it's in a series, falsehoods programmers believe about time.

00:21:07.980 --> 00:21:11.320
And wait, what is the title of the blog?

00:21:11.320 --> 00:21:13.980
Infinite Undo.

00:21:13.980 --> 00:21:15.400
Oh, really?

00:21:15.400 --> 00:21:16.060
Yeah, yeah.

00:21:16.060 --> 00:21:17.560
It's all like, it all fits together.

00:21:17.560 --> 00:21:18.060
I love it.

00:21:18.060 --> 00:21:18.720
Sorry, keep going.

00:21:18.720 --> 00:21:20.120
Then there's a second follow on one.

00:21:20.120 --> 00:21:21.260
Must be a VI person.

00:21:21.260 --> 00:21:23.880
More falsehood programmers believe about time.

00:21:23.880 --> 00:21:25.300
Wisdom from the crowd edition.

00:21:25.300 --> 00:21:31.060
So I'm sorry, I can't find your name on the blog, but wrote this article about falsehoods.

00:21:31.060 --> 00:21:35.580
The interesting thing is very few of them have links to tell you why they're false.

00:21:35.580 --> 00:21:38.620
But these are all assumptions that are wrong.

00:21:38.620 --> 00:21:42.360
I mean, it starts with, there's always 24 hours in a day.

00:21:42.360 --> 00:21:46.100
And, you know, there are things that we just sort of know are kind of wrong sometimes.

00:21:46.100 --> 00:21:48.620
Like when we change the time, it's different.

00:21:48.620 --> 00:21:50.800
Months have either 30 or 31.

00:21:50.800 --> 00:21:53.680
A week begins and ends on the same month.

00:21:54.240 --> 00:21:59.060
And I think these are, he's coming from the standpoint that he's debugged and tested code

00:21:59.060 --> 00:22:01.620
that had these weird assumptions in them that broke.

00:22:01.620 --> 00:22:05.360
And then it gets into some stuff that I, I'm going to highlight just a handful, but there's

00:22:05.360 --> 00:22:05.940
a whole bunch.

00:22:05.940 --> 00:22:09.300
A system clock will always be set to the correct local time.

00:22:09.300 --> 00:22:13.480
And if that's not true, well, it'll be set to a time that's not wildly different from the

00:22:13.480 --> 00:22:14.300
correct local time.

00:22:14.300 --> 00:22:19.300
And if that's not true, well, at least it will be, always have a consistent offset in the number

00:22:19.300 --> 00:22:19.840
of seconds.

00:22:19.840 --> 00:22:21.880
And yeah, no, that's not true either.

00:22:22.180 --> 00:22:27.180
I've been bit by this where we had systems under test be not even on the same day.

00:22:27.180 --> 00:22:29.780
It has the following other one.

00:22:29.780 --> 00:22:30.300
Let's see.

00:22:30.300 --> 00:22:32.960
The day before Saturday is always Friday.

00:22:32.960 --> 00:22:36.240
I had to look this one up because I'm like, isn't it?

00:22:36.240 --> 00:22:38.200
Isn't Friday always before Saturday?

00:22:38.200 --> 00:22:38.540
All right.

00:22:38.540 --> 00:22:39.200
What's the deal there?

00:22:40.000 --> 00:22:46.420
Samoa decided to change which part of their, the international time zone they were on so

00:22:46.420 --> 00:22:49.280
that they were the same day as Australia.

00:22:49.280 --> 00:22:54.440
And that gap swapped it like it swapped on Saturday, but it happened in the middle of the week or

00:22:54.440 --> 00:22:54.960
something like that?

00:22:54.960 --> 00:22:55.360
Yeah.

00:22:55.360 --> 00:23:00.640
It happened like Thursday night and then the next second it was Saturday morning.

00:23:01.260 --> 00:23:03.120
So they skipped Friday once.

00:23:03.120 --> 00:23:05.480
That's some serious daylight savings action going on there.

00:23:05.480 --> 00:23:05.840
Okay.

00:23:05.840 --> 00:23:10.540
And then the number 81, the last one on the second one is, I think it's just thrown in as a joke.

00:23:10.540 --> 00:23:14.960
I hope the software will never run on a spaceship that is orbiting a black hole.

00:23:14.960 --> 00:23:18.560
Do we have spaceships that orbit black holes?

00:23:18.560 --> 00:23:19.140
Not yet.

00:23:19.140 --> 00:23:19.440
Yeah.

00:23:19.440 --> 00:23:20.320
Not yet.

00:23:20.380 --> 00:23:21.620
But you're going to have legacy code.

00:23:21.620 --> 00:23:24.600
You're going to have the black hole bug that you got to go back and fix.

00:23:24.600 --> 00:23:25.040
Yeah.

00:23:25.040 --> 00:23:28.540
And then one I didn't highlight was that there's not an end to time.

00:23:28.540 --> 00:23:33.960
Didn't put a link in for this, but did you know that like the end, if you have a 32-bit

00:23:33.960 --> 00:23:37.800
time counter, it's probably going to break in 2038 or something like that?

00:23:37.800 --> 00:23:38.340
Oh, wow.

00:23:38.340 --> 00:23:40.160
Think of all the consulting opportunities.

00:23:40.160 --> 00:23:40.920
I know.

00:23:40.920 --> 00:23:42.460
It's like Y2K all over again.

00:23:42.460 --> 00:23:42.940
Exactly.

00:23:42.940 --> 00:23:44.300
Exactly.

00:23:44.300 --> 00:23:44.800
Yeah.

00:23:44.800 --> 00:23:45.440
That's interesting.

00:23:45.440 --> 00:23:50.140
I mean, real time, obviously, we think doesn't stop and probably won't stop for us.

00:23:50.240 --> 00:23:51.440
But yeah, computer time.

00:23:51.440 --> 00:23:53.640
Computer time is a whole different deal.

00:23:53.640 --> 00:23:53.920
Yeah.

00:23:53.920 --> 00:23:54.240
Yeah.

00:23:54.240 --> 00:23:55.040
This is really interesting.

00:23:55.040 --> 00:24:00.160
And yeah, like you highlighted a few of the 81 and then that doesn't even touch on the

00:24:00.160 --> 00:24:00.920
more falsehoods.

00:24:00.920 --> 00:24:01.600
Pretty cool.

00:24:01.600 --> 00:24:01.940
Yeah.

00:24:01.940 --> 00:24:02.800
Yeah.

00:24:02.800 --> 00:24:05.960
I get a little nervous every time I get anywhere near a time zone.

00:24:05.960 --> 00:24:07.900
So with code.

00:24:07.900 --> 00:24:08.280
Yeah.

00:24:08.280 --> 00:24:13.480
I always use a time zone package or a time package to deal with that for me because I know I'm

00:24:13.480 --> 00:24:14.000
going to get it wrong.

00:24:14.000 --> 00:24:14.300
Yeah.

00:24:14.300 --> 00:24:14.960
Absolutely.

00:24:14.960 --> 00:24:20.100
So I must have forgotten because I feel like last time we, a couple of weeks

00:24:20.100 --> 00:24:22.860
ago, we did cover Remy, which is a GUI framework.

00:24:22.860 --> 00:24:23.840
Yeah.

00:24:23.840 --> 00:24:24.520
Right.

00:24:24.520 --> 00:24:25.080
And so Remy.

00:24:25.080 --> 00:24:25.500
Yeah.

00:24:25.500 --> 00:24:25.940
I remember that.

00:24:25.940 --> 00:24:26.520
You brought that up.

00:24:26.520 --> 00:24:27.360
Remy's cool.

00:24:27.360 --> 00:24:34.780
And it lets you write Python code that then gets turned into something that has an HTML

00:24:34.780 --> 00:24:35.420
representation.

00:24:35.420 --> 00:24:39.600
But then you can hook events from HTML back into your Python code.

00:24:39.600 --> 00:24:39.920
Right.

00:24:39.920 --> 00:24:43.000
It's kind of like Electron JS, but swap out the JS for Python.

00:24:43.000 --> 00:24:43.400
Right.

00:24:43.400 --> 00:24:43.640
Yeah.

00:24:43.640 --> 00:24:47.080
Well, we got a message from the creator, David.

00:24:47.080 --> 00:24:49.760
And he said, hey, thanks so much for covering that.

00:24:49.760 --> 00:24:54.580
You threw out that like, hey, it would be awesome if this wasn't had an editor or something

00:24:54.580 --> 00:24:55.200
like that.

00:24:55.200 --> 00:24:56.620
So yeah.

00:24:56.620 --> 00:24:59.080
If you just look at slash editor in the repo.

00:24:59.320 --> 00:24:59.680
Yeah.

00:24:59.680 --> 00:25:03.300
There's a drag and drop WYSIWYG editor for this UI.

00:25:03.300 --> 00:25:04.120
That's so cool.

00:25:04.120 --> 00:25:05.700
I haven't tried it yet, but it's neat.

00:25:05.700 --> 00:25:05.960
Yeah.

00:25:05.960 --> 00:25:06.640
It looks really cool.

00:25:06.640 --> 00:25:10.020
It's like pretty, pretty much like what you would expect.

00:25:10.020 --> 00:25:14.160
You've got all the widgets you can drag and drop in there and size them and set their

00:25:14.160 --> 00:25:17.000
colors and set all their CSS properties.

00:25:17.000 --> 00:25:23.440
And then also wire up button clicks to existing functions or JavaScript events to existing

00:25:23.440 --> 00:25:24.400
functions, things like that.

00:25:24.400 --> 00:25:27.000
You can totally waste an entire afternoon and look like you're working.

00:25:27.000 --> 00:25:27.640
Yeah, exactly.

00:25:27.640 --> 00:25:28.580
Yeah.

00:25:28.580 --> 00:25:30.700
Here's some of the no code stuff that is good.

00:25:30.700 --> 00:25:35.080
So it's got a little, a little walkthrough example of creating, you know, like a hello

00:25:35.080 --> 00:25:37.400
world button clicker type of GUI app.

00:25:37.400 --> 00:25:40.420
But yeah, it's actually looks pretty killer.

00:25:40.420 --> 00:25:45.960
I don't want to diss people that like actually work in the world of creating really good user

00:25:45.960 --> 00:25:49.900
interfaces that, you know, and that's needed and I applaud them.

00:25:49.900 --> 00:25:54.740
But there's a lot of us nerds that just need some kind of GUI that just sort of works and

00:25:54.740 --> 00:25:55.400
that's good enough.

00:25:55.400 --> 00:25:55.660
Yeah.

00:25:55.660 --> 00:26:03.140
All right, Brian, I've queued up a joke, a visual joke that we'll have to describe through here.

00:26:03.140 --> 00:26:07.640
And because this is about testing, I'm going to let you take it.

00:26:07.640 --> 00:26:09.840
It's really simple, but it's quite funny.

00:26:09.840 --> 00:26:14.980
I actually peeked at this before we're going to link to a Twitter post that somebody did of

00:26:14.980 --> 00:26:18.440
this little video says two unit tests, zero integration tests.

00:26:18.440 --> 00:26:24.380
And I guess I got to say, I'm a huge fan of these like unit test pass integration test

00:26:24.380 --> 00:26:25.080
fail things.

00:26:25.080 --> 00:26:27.580
So send them my way if you find them.

00:26:27.580 --> 00:26:28.760
This one's hilarious.

00:26:28.760 --> 00:26:29.120
Yeah.

00:26:29.120 --> 00:26:30.500
So let me describe a little bit.

00:26:30.500 --> 00:26:31.500
I'll set the stage.

00:26:31.500 --> 00:26:36.360
There's a one of these like super powerful hand dryers and there's a trash can and it's

00:26:36.360 --> 00:26:38.800
not like a trash bin that you move around.

00:26:38.800 --> 00:26:40.880
It's like a fix to the wall, right?

00:26:40.880 --> 00:26:41.240
Yeah.

00:26:41.340 --> 00:26:41.960
Okay, go ahead.

00:26:41.960 --> 00:26:47.000
And then right next to it's a place where you can grab, you know, napkins or your paper

00:26:47.000 --> 00:26:48.840
towels also to dry your hands.

00:26:48.840 --> 00:26:54.900
But they put like a one of those, the hand dryers that blows down and it turns on with motion.

00:26:55.060 --> 00:27:00.880
And as soon as you throw away a paper towel, the dryer blows all the paper towels out of

00:27:00.880 --> 00:27:01.340
the garbage.

00:27:01.340 --> 00:27:03.000
It's super strong.

00:27:03.000 --> 00:27:06.800
Not just the one you tried to put in the garbage, but every paper towel that was previously in

00:27:06.800 --> 00:27:09.420
the garbage is now blasted around.

00:27:09.420 --> 00:27:10.240
Yeah.

00:27:10.240 --> 00:27:10.560
Yeah.

00:27:10.560 --> 00:27:12.460
Two unit tests, zero integration tests.

00:27:13.140 --> 00:27:13.360
Yeah.

00:27:13.360 --> 00:27:17.880
The creative people that like got the garbage liner to stay in there in the first place.

00:27:17.880 --> 00:27:19.920
So anyway, it's hilarious.

00:27:19.920 --> 00:27:20.200
Yeah.

00:27:20.200 --> 00:27:23.680
I got a little rub, a little syrup or something sticky on there to keep that big in place.

00:27:23.680 --> 00:27:24.360
Yeah.

00:27:24.360 --> 00:27:25.460
That's pretty funny.

00:27:25.460 --> 00:27:31.480
This reminds me of a, I was at a company where we switched from actual plants around the office

00:27:31.480 --> 00:27:35.480
to plastic plants, but nobody canceled the watering service.

00:27:35.480 --> 00:27:39.840
And so the watering service just kept going around and watering all the plastic plants

00:27:39.840 --> 00:27:43.020
once a month or once a week or whenever they did that.

00:27:43.020 --> 00:27:44.240
So anyway.

00:27:44.240 --> 00:27:45.120
Yeah.

00:27:45.120 --> 00:27:47.480
That probably didn't turn out well after they filled up.

00:27:47.480 --> 00:27:50.060
I don't know.

00:27:50.060 --> 00:27:50.760
That's awesome.

00:27:50.760 --> 00:27:51.060
It's just weird.

00:27:51.060 --> 00:27:51.960
All right.

00:27:51.960 --> 00:27:52.480
Well, thanks.

00:27:52.480 --> 00:27:53.220
Thanks, Michael.

00:27:53.220 --> 00:27:53.680
You bet.

00:27:53.680 --> 00:27:54.380
Thanks for being here.

00:27:54.380 --> 00:27:55.240
It's always, it's fun.

00:27:55.240 --> 00:27:56.160
Bye everyone.

00:27:56.160 --> 00:27:56.340
Bye.

00:27:56.340 --> 00:27:58.460
Thank you for listening to Python Bytes.

00:27:58.460 --> 00:28:00.920
Follow the show on Twitter at Python Bytes.

00:28:00.920 --> 00:28:03.960
That's Python Bytes as in B-Y-T-E-S.

00:28:04.240 --> 00:28:06.840
And get the full show notes at pythonbytes.fm.

00:28:06.840 --> 00:28:11.900
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:28:11.900 --> 00:28:13.960
We're always on the lookout for sharing something cool.

00:28:13.960 --> 00:28:15.120
This is Brian Okken.

00:28:15.120 --> 00:28:19.220
And on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast

00:28:19.220 --> 00:28:20.440
with your friends and colleagues.

