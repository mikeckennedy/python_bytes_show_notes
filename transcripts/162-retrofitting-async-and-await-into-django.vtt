WEBVTT

00:00:00.001 --> 00:00:04.520
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.520 --> 00:00:11.620
your earbuds. This is episode 162, recorded December 19, 2019. I'm Brian Okken, and today

00:00:11.620 --> 00:00:17.740
I've got guest host Ali Sivji. He's one of the organizers of the Chicago Python Meetup,

00:00:17.740 --> 00:00:23.200
and we met last week when I was there for briefly, and we already started recording this,

00:00:23.200 --> 00:00:28.220
but I forgot to press record. So we're starting over. So thanks, Ali, for hanging in there with

00:00:28.220 --> 00:00:33.800
me. Thanks, Brian. Glad to be here. This episode is brought to you by Datadog. We'll talk more about

00:00:33.800 --> 00:00:40.260
them later. But first, Ali's going to tell us some exciting things about Django. Yeah, so Django 3.0

00:00:40.260 --> 00:00:45.600
just came out in early December. And so I really wanted to find out what was going on. I found a

00:00:45.600 --> 00:00:53.160
talk from DjangoCon 2019 by Andrew Godwin titled Just Add a Wait, Retrofitting Async into Django.

00:00:53.320 --> 00:00:57.460
And Andrew's been the one leading the implementation of asynchronous support into Django.

00:00:57.460 --> 00:01:03.260
And he discussed what the 3.0 release signifies, also went over the implementation roadmap for

00:01:03.260 --> 00:01:08.780
upcoming releases. Okay. Wow, that sounds fascinating. Yeah, he started by giving an overview of the

00:01:08.780 --> 00:01:14.820
async landscape, talked about how synchronous and asynchronous code interact. A key point that he made

00:01:14.820 --> 00:01:19.500
was that when we have asynchronous functions, they're very different than synchronous functions.

00:01:19.500 --> 00:01:25.060
this makes it really difficult to design proper APIs. And one of the difficulties in adding

00:01:25.060 --> 00:01:29.700
asynchronous support to Django is that this project, it's been around for a really long time.

00:01:29.700 --> 00:01:34.240
There are a lot of people familiar with it. And for these new async implementations,

00:01:34.240 --> 00:01:40.060
they wanted to have that same familiar feeling. And so they made a plan to implement async capabilities

00:01:40.060 --> 00:01:46.620
in three phases. And so phase one, that was completed with the Django 3.0 release. And this phase,

00:01:46.620 --> 00:01:51.740
it's really meant to lay a lot of the groundwork for future changes. And so Django now supports

00:01:51.740 --> 00:01:57.860
asynchronous server gateway interface or ASCII. And the ORM, it's also async aware. So if you actually

00:01:57.860 --> 00:02:03.360
call ORM code from async code, it's going to raise an exception to make sure that you're not calling the

00:02:03.360 --> 00:02:08.020
synchronous function from your async code. You don't want to have unexpected behavior there.

00:02:08.020 --> 00:02:13.780
Phase two is going to be tracking with Django 3.1. And they're going to be adding async capabilities

00:02:13.780 --> 00:02:18.980
to the core core parts of the request path. This means we're going to have async views,

00:02:18.980 --> 00:02:25.500
async handlers, and async middleware. And there's already a branch in the Django repository where this

00:02:25.500 --> 00:02:30.080
is mostly working, they just need to add a couple of tests to make sure things are passing with all

00:02:30.080 --> 00:02:30.620
those cases.

00:02:30.620 --> 00:02:32.480
It sounds really well thought out.

00:02:32.480 --> 00:02:36.680
They will put a lot of work into it. And there's a really detailed Django pep, I think it's called a

00:02:36.680 --> 00:02:42.600
depth of all about it. And then finally, with phase three, that's going to make the Django ORM all async.

00:02:42.600 --> 00:02:47.300
And Andrew called this the largest, most difficult and most unbounded part of the project.

00:02:47.300 --> 00:02:52.800
So if we just start thinking about like ORM queries, sometimes they can result in a lot of implicit data

00:02:52.800 --> 00:02:57.180
based lookups if we're not really careful. And this is where a lot of those complexities are going to

00:02:57.180 --> 00:03:01.360
come from. I really enjoyed this talk. I think it went into the right amount of depth while being

00:03:01.360 --> 00:03:06.560
really accessible. And I just want to call out the fantastic diagrams. It really helped improve my

00:03:06.560 --> 00:03:11.480
understanding of Django internals. And if you check the show notes, I'm going to include a link to the

00:03:11.480 --> 00:03:16.800
async project wiki. Andrew needs some help putting these things into Django. He's got a lot of areas

00:03:16.800 --> 00:03:20.820
there. If you have some time, you have the expertise, please go ahead and help him out.

00:03:20.820 --> 00:03:24.660
Yeah, awesome. I like doing calls to action on the show to try to get people involved.

00:03:25.280 --> 00:03:31.260
And I've been just starting Django for like several years now, just dipping my toes in and out every

00:03:31.260 --> 00:03:35.960
once in a while. And I was kind of waiting for this new version to come out. So I'll probably check

00:03:35.960 --> 00:03:42.060
this out first. I like that idea of having, since they're gradually rolling it out, doing error

00:03:42.060 --> 00:03:46.540
messages for if you try to do things that aren't implemented yet. So that's cool.

00:03:46.540 --> 00:03:50.400
Yeah, it's always best to be explicit. So would you say you've been playing around with Django?

00:03:50.400 --> 00:03:59.060
Yeah, okay. Nice segue there. So the next topic, speaking of playing, I don't know how you got into

00:03:59.060 --> 00:04:08.500
programming, but a lot of people get into it with games. And I actually feel bad that I'm in that camp

00:04:08.500 --> 00:04:16.120
also, because I don't know, it's just kind of cliche. But yeah, sure enough, Games by Example is GitHub Repo by

00:04:16.120 --> 00:04:21.040
Al Swigart and other contributors as well. Or I think there's others, but he wants more.

00:04:21.040 --> 00:04:28.100
So the idea is, is these are standard IO games. And that collection, he's got a collection of games

00:04:28.100 --> 00:04:35.180
with the source code to use for example, programming lessons. They're all written in Python 3. And you can

00:04:35.180 --> 00:04:40.360
just clone the repo or just view it and copy and paste if you don't really, even for people that aren't

00:04:40.360 --> 00:04:46.420
used to get stuff. I think it's neat because I, before I even learned any of the concepts of

00:04:46.420 --> 00:04:51.220
programming, I was programming games by copying them out of magazines and typing them into my old

00:04:51.220 --> 00:04:56.460
TRS-80 way back in the Stone Ages. That's awesome. I didn't know what it was doing, but I could modify

00:04:56.460 --> 00:05:01.920
things and sort of interpret it because you can kind of read basic. So there's some cool features of these

00:05:01.920 --> 00:05:06.820
games that actually I would have enjoyed at the time. Some of the neat things is that they're short,

00:05:07.020 --> 00:05:13.360
they're limited it to 256 lines of code, just an arbitrary number. But that's a pretty nice,

00:05:13.360 --> 00:05:20.340
small code size. They're all single file, single source code files with no installers. So you just

00:05:20.340 --> 00:05:25.840
run them with Python. They'll use just the standard library. If they're, they're only using print and

00:05:25.840 --> 00:05:31.180
input for interacting with the user, you know, there's some downsides to that, but there's some

00:05:31.180 --> 00:05:36.760
upsides too, because they're fairly simple. He's tried to make them very well commented and very

00:05:36.760 --> 00:05:42.720
readable. So he, he mentions that they're elegant and efficient is a nice sometimes, but understandable

00:05:42.720 --> 00:05:48.640
and readable is better for, for education purposes. So that's what they're planning on doing. That's

00:05:48.640 --> 00:05:55.820
what his focus is also input validation on everything so that you can't crash Python from typing in

00:05:55.820 --> 00:06:00.820
something weird. This is kind of cool. He made sure that every function has a doc string to describe

00:06:00.820 --> 00:06:05.740
what it is because it really is meant to be teaching people. And I think this is a pretty cool.

00:06:05.740 --> 00:06:09.340
Yeah. Al does a lot of good things about structuring things in a way that everybody

00:06:09.340 --> 00:06:11.500
can understand. Really love all the stuff he does.

00:06:11.700 --> 00:06:16.860
This would be great for people to use in, I think in helping your kid out. I'm going to try to get my,

00:06:16.860 --> 00:06:23.240
my kids running with some of this stuff to just say, Hey, watch, this is how you run it. Now play with it and

00:06:23.240 --> 00:06:30.140
break it. He also included to do list of things he wants to do with the project, but hasn't done yet. And I love

00:06:30.140 --> 00:06:38.840
that because it gives people direction if they want to help out with the project. One of the areas is testing. He wants more tests. So I'd love for people to get involved with that.

00:06:38.840 --> 00:07:07.180
Always got to make the call up for testing. Yeah, definitely. So before we move on, I want to give a shout out to our sponsor. This episode is sponsored by Datadog, a cloud scale monitoring platform that unifies metrics, logs, distributed traces, and more trace requests across service boundaries with flame graphs, correlate traces with logs and metrics, and plot the flow of traffic across multi cloud environments with network performance monitoring.

00:07:07.180 --> 00:07:36.700
Plus Datadog integrates with over 350 technologies like Postgres, Redis and Hadoop. And their tracing client auto instruments, common frameworks and libraries like Django, tornado, flask and asyncio. That's cool. Get started today with a 14 day free trial at pythonbytes.fm/Datadog. Now, speaking of testing, Bulwark has some, I stole your thunder. But the NIST topic has some test related stuff, right?

00:07:36.700 --> 00:07:48.520
Yeah, so Bulwark is an open source library that allows users to easily property test their pandas data frames and makes it easy for data analysts and data scientists to write tests.

00:07:48.700 --> 00:08:01.880
So let's just take a step back. We all know that tests are important. But tests for data, they're just a little bit different. These tests, they're not as deterministic. And they require us to think about testing just a little bit differently.

00:08:02.540 --> 00:08:22.000
So with property tests, what we're able to check that an object has a certain property. And so property tests for data frames include things like validating the shape of a data frame, checking to see if a column is within a given range, verifying that a data frame has no NANDs, and things like that.

00:08:22.000 --> 00:08:33.460
So with Bulwark, you're able to implement these property tests as checks. And each check takes a data frame and some optional arguments. This check will make an assertion about some data frame property.

00:08:34.000 --> 00:08:45.760
If things are good, the check's going to return the original data frame. If the check fails, the assertion error is raised, and you have a little bit more insight into what went wrong. And this is really helpful when you have a large data pipeline.

00:08:46.000 --> 00:08:46.400
That's cool.

00:08:46.400 --> 00:09:12.180
Yeah, it's really, really cool. And so one of the ways that Bulwark lets you implement property tests is also through decorators. And so when you're creating data pipelines, it's really useful to do them as functions. You have some input data, you perform some sort of action, it returns an output. And with Bulwark, what you can do is you can add decorators to your pipeline functions, and validate that the properties of your input data frames meet the conditions that you really want it to have.

00:09:12.180 --> 00:09:39.000
So Bulwark has a lot of pre-built checks already in there. There's one for has certain data types, is this column monotonic, is this within a certain number of standard deviations, and it seems pretty straightforward to add new checks. And instead of stacking decorators for multiple checks, they have a special decorator, a multi-check decorator, which won't fail only on the first. It's actually going to run through them all and tell you all the ways your data either passed or did not pass.

00:09:39.000 --> 00:09:40.940
Oh, that's great. Wow, neat.

00:09:41.040 --> 00:10:00.360
Yeah, you can use Bulwark for implementing unit tests. You can use them in the ETL pipeline, especially on the extract and the load steps. And Bulwark can be used during development. And they also have some options to turn assertion errors into warnings for production. I'm not really too sure how I feel about that. But that functionality is there if you want to use it.

00:10:00.360 --> 00:10:01.040
This is cool.

00:10:01.040 --> 00:10:10.400
This is actually coming out of Chicago Python community member, Zach Rosenberg. He created this and gave a talk about it at Chippy. So just wanted to share it with the rest of our community.

00:10:10.400 --> 00:10:19.760
I think it's great.

00:10:19.760 --> 00:10:41.460
And also, you know, some people like one style over another. This is a little bit different style than Great Expectations. I think it's definitely worth checking out and having more, gosh, more and more of our life is controlled by data pipelines.

00:10:41.460 --> 00:10:54.440
Not necessarily controlled, but influenced by results based on these data pipelines. So having these checks in place to make sure that our data is just as solid as our source code. This is awesome.

00:10:54.580 --> 00:10:59.880
Yeah, it's really good to see all these data scientists and data engineers thinking about testing in a different way.

00:10:59.880 --> 00:11:05.300
Oh, gosh, there's some interesting contributors to this. This is great. Cool.

00:11:05.300 --> 00:11:13.540
I got off on the test side. I could go down that rabbit hole for all day long. But let's pop out and talk about packaging a little bit.

00:11:13.540 --> 00:11:15.660
Packaging? Have you talked about it before?

00:11:16.020 --> 00:11:25.580
Yeah, yeah, actually. So packaging is such a we do cover almost every story packaging related because it is a stumbling block for a lot of people to go forward.

00:11:25.580 --> 00:11:36.240
At some point, you get into the intermediate Python developer and how to share your code is and dealing with virtual environments and stuff is one of those things that you have to run into.

00:11:36.240 --> 00:11:41.300
So I think it's kind of cool. I am not a poetry user, but I might try this new one out.

00:11:41.400 --> 00:11:49.700
So poetry just announced the poetry 1.0.0. They're no longer zero versionings. They've got to 1.0. Awesome.

00:11:49.700 --> 00:11:56.900
The announcement is by Sebastian Eustis and it highlights some of the changes.

00:11:56.900 --> 00:12:07.260
And a good caution right off the bat is they are breaking backwards compatibility with this version because the zero is often we're trying things out.

00:12:07.380 --> 00:12:14.200
And I think it's completely fair to break. It's always fair to break with major versions, but I think this is reasonable.

00:12:14.200 --> 00:12:19.300
So one of the things I think it's this highlights, I want to highlight a few things.

00:12:19.300 --> 00:12:24.200
I think it's very for this version, we can really take poetry seriously.

00:12:24.200 --> 00:12:27.800
I think that they're planning on sticking around and people that like it.

00:12:27.800 --> 00:12:29.460
There's a lot of changes that are good.

00:12:30.000 --> 00:12:32.000
They've added different ways to manage environments.

00:12:32.000 --> 00:12:39.740
So within a project, you can have poetry help you coordinate multiple versions of Python within the same project.

00:12:39.740 --> 00:12:42.800
That's pretty cool. I don't know if it had that before. That's neat.

00:12:42.800 --> 00:12:46.800
One of the things that I want to bring up next is private indices.

00:12:47.540 --> 00:12:56.940
And if you're working with projects within a company, this is very important to be able to have your own private, something like PyPI.

00:12:56.940 --> 00:13:02.520
You can, you know, one of the ways you can do that is you can have your, a private version of something like PyPI.

00:13:02.520 --> 00:13:08.760
But you can also just throw a whole bunch of wheels in a directory and use that as an index as well.

00:13:08.760 --> 00:13:17.020
And so having, there's some improved support, you can have even specified a different index for each dependency if you want.

00:13:17.020 --> 00:13:26.140
But you can also set up a primary and secondary or default and secondary index and have them be non, something other than PyPI if you want.

00:13:26.140 --> 00:13:26.980
So this is cool.

00:13:26.980 --> 00:13:34.140
People using poetry and other tools like this within continuous integration, sometimes it's hard to pass things around.

00:13:34.440 --> 00:13:39.500
And so environmental variables are sometimes, they're ugly, but they're useful within CI.

00:13:39.500 --> 00:13:42.860
And so there's new environmental variable support.

00:13:42.860 --> 00:13:56.260
And then since there's all this new support for different sort of dependencies, the add command has been expanded to allow you to just add dependencies and put them in the right place with the right source and everything.

00:13:56.500 --> 00:14:07.400
The other thing I want to highlight is they've improved some things around publishing to allow you to put API tokens in place instead of having to use text, passwords and users.

00:14:07.400 --> 00:14:09.880
So very cool changes from poetry.

00:14:09.880 --> 00:14:11.780
I applaud their progress.

00:14:11.780 --> 00:14:14.100
Yeah, I haven't checked it out, but I'm going to go check it out.

00:14:14.100 --> 00:14:15.860
Looks like there's been a lot of changes made.

00:14:15.860 --> 00:14:17.960
Pretty excited about the one point of release.

00:14:17.960 --> 00:14:18.660
This is neat.

00:14:18.660 --> 00:14:20.960
You know, people are respect all over the place.

00:14:20.960 --> 00:14:22.780
There's some people that absolutely love poetry.

00:14:22.780 --> 00:14:24.360
There's some people using PipInv.

00:14:24.860 --> 00:14:30.820
I'm a straight just using the built-in VENV and all the tools around that.

00:14:30.820 --> 00:14:33.920
But yeah, whatever floats your boat, I guess.

00:14:33.920 --> 00:14:34.660
Yeah, for sure.

00:14:34.660 --> 00:14:35.760
What do you got for us next?

00:14:35.760 --> 00:14:41.220
So Kubernetes has been a huge part of the DevOps ecosystem in the last two, three years.

00:14:41.220 --> 00:14:49.520
With the rise of containers, Kubernetes is sort of the de facto platform for running and coordinating applications across multiple machines.

00:14:49.840 --> 00:14:54.000
It's not really something I know a lot about, but it's something I want to get to know more about.

00:14:54.000 --> 00:14:56.500
And I just found this awesome link from DigitalOcean.

00:14:56.500 --> 00:15:00.380
They put together a Kubernetes for full stack developers curriculum.

00:15:00.380 --> 00:15:08.220
And what it does is, yeah, it follows all the steps that a new user would have to learn in order to deploy applications to Kubernetes.

00:15:08.440 --> 00:15:13.800
So you start by learning Kubernetes core concepts, like what's a pod, what's a deployment.

00:15:13.800 --> 00:15:17.540
Next, you'll start building modern 12-factor web applications.

00:15:17.540 --> 00:15:21.140
And then you're going to start packaging these applications inside of containers.

00:15:21.140 --> 00:15:24.680
Next, you're going to deploy your containerized applications on Kubernetes.

00:15:25.040 --> 00:15:30.080
And then finally, you're going to learn how to manage all that cluster orchestration and the cluster operations.

00:15:30.080 --> 00:15:33.500
I went through the first link, which was like an introduction to Kubernetes.

00:15:33.500 --> 00:15:36.140
I found the material really easy to understand.

00:15:36.140 --> 00:15:38.180
It's pretty much what you expect from DigitalOcean.

00:15:38.180 --> 00:15:41.500
Like, I learned how to do a lot of my operations work from DigitalOcean.

00:15:41.500 --> 00:15:45.260
And I'm really excited that they have a lot more resources for the community.

00:15:45.560 --> 00:15:50.080
And I'm going to throw a link in the show notes to a talk I gave about introduction to Docker.

00:15:50.080 --> 00:15:55.140
If you're ever learning how to do Docker, I think this is a really good place to get started.

00:15:55.140 --> 00:15:58.940
Yeah, and so just to be clear, Docker and Kubernetes are closely tied, right?

00:15:58.940 --> 00:16:02.320
Docker is the container where you package your applications in.

00:16:02.320 --> 00:16:10.140
And the Kubernetes is the platform that manages all your Dockerized containers across multiple machines.

00:16:10.140 --> 00:16:12.460
So this way, with Docker, you can build your application.

00:16:12.460 --> 00:16:16.240
With Kubernetes, you can deploy it and scale it pretty much infinitely.

00:16:16.240 --> 00:16:16.680
Cool.

00:16:16.680 --> 00:16:19.420
And it wasn't until I'm forgetting the guy's name.

00:16:19.420 --> 00:16:22.080
But I saw a talk a couple years ago about Kubernetes.

00:16:22.080 --> 00:16:27.160
And I didn't realize that this isn't just I mean, yes, it's intended for cloud stuff.

00:16:27.160 --> 00:16:32.960
But you can test the entire Kubernetes setup locally on a laptop even.

00:16:32.960 --> 00:16:34.540
So that's pretty neat.

00:16:34.540 --> 00:16:35.160
Yeah, for sure.

00:16:35.160 --> 00:16:36.160
I'm not lying there.

00:16:36.160 --> 00:16:36.940
Is that true?

00:16:36.940 --> 00:16:38.280
It's like Kube CTL.

00:16:38.280 --> 00:16:43.520
Like you can have like a Kube Lite machine and pretty much do whatever you need to on the cloud locally.

00:16:43.520 --> 00:16:44.340
Okay, cool.

00:16:44.340 --> 00:16:46.360
Definitely good for playing around.

00:16:46.360 --> 00:16:47.580
You don't have to pay for anything.

00:16:47.580 --> 00:16:48.000
Exactly.

00:16:48.000 --> 00:16:48.720
Well, now.

00:16:48.720 --> 00:16:51.780
So the last topic, I want to apologize to people.

00:16:51.780 --> 00:16:54.260
I'm perfectly okay with making mistakes on the show.

00:16:54.440 --> 00:16:59.440
So on episode 159, we were going through a whole bunch of pytest plugins.

00:16:59.440 --> 00:17:02.560
And one of the things we covered was pytest Picked.

00:17:02.560 --> 00:17:06.140
And I incorrectly assumed that it would run.

00:17:06.140 --> 00:17:15.580
There's a quote on the pytest Picked site that says it runs the tests related to unstaged files or the current branch on the current branch according to Git.

00:17:16.160 --> 00:17:21.560
To me, that sounded like it runs the tests related to code that's changed.

00:17:21.560 --> 00:17:23.160
But I was wrong.

00:17:23.160 --> 00:17:24.160
So Michael was right.

00:17:24.160 --> 00:17:24.640
I was wrong.

00:17:24.640 --> 00:17:26.060
It just runs.

00:17:26.060 --> 00:17:30.380
It uses Git to find out which files have changed.

00:17:30.380 --> 00:17:35.760
And if any of those are test files, it runs the tests related to those test files.

00:17:35.760 --> 00:17:36.620
That makes sense.

00:17:36.620 --> 00:17:40.360
And that might be, if you're developing tests, that might be exactly what you want.

00:17:40.360 --> 00:17:43.380
But if you're developing code, you might want something different.

00:17:43.380 --> 00:17:47.620
And the tool I was thinking about was pytest-TestMon.

00:17:47.620 --> 00:17:50.380
And that's a plugin for pytest also.

00:17:50.380 --> 00:17:52.340
And I'm just going to read their blurb.

00:17:52.340 --> 00:17:58.960
So pytest-TestMon is a pytest plugin which selects and executes only tests you need to run.

00:17:58.960 --> 00:18:08.200
It does this by collecting dependencies between test runs and all executed code internally by using coverage, the coverage data,

00:18:08.200 --> 00:18:11.040
and comparing those dependencies against changes.

00:18:11.180 --> 00:18:14.240
So it updates the database on each test execution.

00:18:14.240 --> 00:18:16.680
So it works independently of version control.

00:18:16.680 --> 00:18:19.200
So that's the thing I was thinking about.

00:18:19.200 --> 00:18:26.000
So if you use this coverage to find out what tests are affecting different parts of your code base, very cool.

00:18:26.000 --> 00:18:31.420
So if you're making changes, this sounds like black magic to me that I'm glad somebody else wrote it.

00:18:31.800 --> 00:18:33.340
But it does look pretty neat.

00:18:33.340 --> 00:18:36.480
And I think I am definitely ready to try this again.

00:18:36.480 --> 00:18:37.480
I tried it a while ago.

00:18:37.480 --> 00:18:41.940
And for some reason, I don't even remember what I, what, I don't think I had any beef with it.

00:18:41.940 --> 00:18:43.340
But I just didn't think I needed it.

00:18:43.340 --> 00:18:46.100
But this looks exciting enough to, I'm going to try that again.

00:18:46.100 --> 00:18:50.000
For large test weights, I think this would save you so much time instead of rerunning everything.

00:18:50.320 --> 00:18:53.880
Yeah, I mean, there's other ways to, if you know specifically what you want to rerun.

00:18:53.880 --> 00:18:54.560
Yeah.

00:18:54.560 --> 00:19:03.100
If you've got a whole bunch of different tests and they all run pretty fast, but you, you're not quite sure which ones you should run based on your code changes.

00:19:03.100 --> 00:19:04.180
This is kind of neat.

00:19:04.180 --> 00:19:04.520
Awesome.

00:19:04.760 --> 00:19:06.620
So that's the end of our normal topics.

00:19:06.620 --> 00:19:12.340
We didn't really get to know you a little bit, but here, so you have anything extra you want to tell us what you're up to?

00:19:12.340 --> 00:19:12.720
Sure.

00:19:12.720 --> 00:19:15.720
So one of my favorite things about Python is the community.

00:19:15.720 --> 00:19:23.580
And as the organizer of Chicago Python, it's no surprise that building hyper local communities is like one of my main passions.

00:19:23.580 --> 00:19:26.740
And in Chicago, we have a lot of events for our members.

00:19:26.740 --> 00:19:30.520
We have talk nights, project nights, open source sprints.

00:19:30.520 --> 00:19:37.260
We recently started one to help people with whiteboarding coding interviews, but there's great user groups all over the world.

00:19:37.260 --> 00:19:40.220
And I just want to include a link in the show notes.

00:19:40.220 --> 00:19:45.260
So how your listeners can go out and find a local community they can be a part of.

00:19:45.260 --> 00:19:49.460
And I also want to give a special shout out to all my fellow organizers who are listening to this podcast.

00:19:49.460 --> 00:19:51.480
Thank you for all you do for the community.

00:19:51.480 --> 00:19:51.900
Yeah.

00:19:51.900 --> 00:19:56.500
I mean, I didn't know that the Chicago community was so huge.

00:19:56.500 --> 00:19:59.060
You guys are, did you say 11 organizers?

00:19:59.060 --> 00:20:00.800
Yeah, we have 11 organizers.

00:20:00.800 --> 00:20:03.080
We've been around since like 2003.

00:20:03.080 --> 00:20:06.360
So it's like one of the OG Python user groups.

00:20:06.360 --> 00:20:09.960
And we actually had like Mathplotlib debuted at Chippy.

00:20:09.960 --> 00:20:12.100
So a lot of historical things happening.

00:20:12.100 --> 00:20:13.200
Yeah, it was cool.

00:20:13.200 --> 00:20:18.440
So I was in Chicago last week and I don't know, I posted something on Twitter like Chicago's cold.

00:20:18.440 --> 00:20:25.720
Some people made comments, but Ollie reached out and said, hey, if you're in town and available for a drink or something, we should meet up.

00:20:25.940 --> 00:20:27.740
And so totally impromptu.

00:20:27.740 --> 00:20:29.240
We met and had dinner together.

00:20:29.240 --> 00:20:30.100
It was a blast.

00:20:30.100 --> 00:20:32.180
And yeah, talk about community.

00:20:32.180 --> 00:20:34.060
That's one of the things I love about the community.

00:20:34.060 --> 00:20:40.680
If I'm wherever I'm traveling, I can like try to hit up people in that area and say, hey, I'm in town.

00:20:40.800 --> 00:20:43.900
I only have like three hour window, but is anybody available?

00:20:43.900 --> 00:20:48.480
And usually I can get somebody to come by and we can BS or something.

00:20:48.480 --> 00:20:49.880
And so it's great.

00:20:49.880 --> 00:20:51.760
We have Python friends all around the world.

00:20:51.760 --> 00:20:53.260
You have a note here on PyTennessee?

00:20:53.500 --> 00:20:53.680
Yeah.

00:20:53.680 --> 00:20:56.580
So PyTennessee is going to be happening on March 7th and 8th.

00:20:56.580 --> 00:21:01.740
I'm going to be giving a talk on design patterns and tickets are available at PyTennessee.org.

00:21:01.740 --> 00:21:02.980
It's going to be in Nashville.

00:21:02.980 --> 00:21:04.780
My third year in a row going.

00:21:04.780 --> 00:21:05.520
Can't wait.

00:21:05.520 --> 00:21:08.940
And Brian, I think I saw your name on the talk list as well.

00:21:08.940 --> 00:21:09.600
Oh, yeah.

00:21:09.600 --> 00:21:11.460
I am going to that.

00:21:11.460 --> 00:21:12.980
Awesome.

00:21:13.440 --> 00:21:16.220
I'm like, I don't think I thought I was going to Nashville.

00:21:16.220 --> 00:21:17.780
Oh, yeah, that is in Tennessee.

00:21:17.780 --> 00:21:19.540
Yes, I failed geography.

00:21:19.540 --> 00:21:20.940
So cool.

00:21:20.940 --> 00:21:22.180
I've never been there.

00:21:22.180 --> 00:21:23.500
So it should be fun.

00:21:23.500 --> 00:21:25.380
Yeah, we'll grab some dinner or drink or something.

00:21:25.380 --> 00:21:25.820
It'll be fun.

00:21:25.820 --> 00:21:31.340
So speaking of community and this podcast, I just want to announce that the next Python

00:21:31.340 --> 00:21:38.400
PDX West meetup, the one in Hillsborough, just west of Portland, is happening January 7th.

00:21:38.400 --> 00:21:42.880
And I'm bringing it up because Michael and I thought it'd be fun to just do a live recording

00:21:42.880 --> 00:21:45.600
of Python Bytes with everybody hanging out at the meetup.

00:21:45.600 --> 00:21:49.160
There's also going to be one to two other talks there and we'll have food.

00:21:49.160 --> 00:21:54.060
So if anybody's in the Portland area, the second week in January, swing by.

00:21:54.060 --> 00:21:55.000
Sounds like a lot of fun.

00:21:55.000 --> 00:21:56.840
A couple jokes for us.

00:21:56.840 --> 00:22:01.540
So the first one is sent in from Tyler Madison.

00:22:01.540 --> 00:22:03.680
It's just a short joke.

00:22:03.680 --> 00:22:06.040
So two coroutines walk into a bar.

00:22:06.040 --> 00:22:09.640
Of course, it's a runtime error because bar was never awaited.

00:22:09.640 --> 00:22:12.640
Async jokes.

00:22:12.820 --> 00:22:14.960
I got one for you.

00:22:14.960 --> 00:22:19.460
So how many developers on a message board does it take to screw in a light bulb?

00:22:19.460 --> 00:22:19.980
I don't know.

00:22:19.980 --> 00:22:22.420
So the answer is, why are you trying to do that?

00:22:22.420 --> 00:22:24.160
Yeah.

00:22:24.160 --> 00:22:27.760
For all those people that are just trying to make sure that they're making sure that you're

00:22:27.760 --> 00:22:28.860
doing things their way.

00:22:28.860 --> 00:22:29.880
Yeah, I hate that.

00:22:29.880 --> 00:22:34.760
People like, you know, somebody asks a question and before anybody, it might be a simple answer,

00:22:34.760 --> 00:22:37.240
but somebody will say, yeah, you shouldn't be doing that.

00:22:37.240 --> 00:22:38.160
Don't do that.

00:22:38.160 --> 00:22:38.440
Yeah.

00:22:38.580 --> 00:22:39.380
This was fun.

00:22:39.380 --> 00:22:42.880
Thank you so much for filling in for Michael and co-hosting today.

00:22:42.880 --> 00:22:44.040
Thanks so much for having me, Brian.

00:22:44.420 --> 00:22:46.000
Thank you for listening to Python Bytes.

00:22:46.000 --> 00:22:48.460
Follow the show on Twitter at Python Bytes.

00:22:48.460 --> 00:22:51.500
That's Python Bytes as in B-Y-T-E-S.

00:22:51.500 --> 00:22:54.380
And get the full show notes at pythonbytes.fm.

00:22:54.380 --> 00:22:59.460
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:22:59.460 --> 00:23:01.500
We're always on the lookout for sharing something cool.

00:23:01.500 --> 00:23:02.680
This is Brian Okken.

00:23:02.680 --> 00:23:06.760
And on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast

00:23:06.760 --> 00:23:08.000
with your friends and colleagues.

