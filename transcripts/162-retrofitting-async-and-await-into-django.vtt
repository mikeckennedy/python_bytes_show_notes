
00:00:00.000 --> 00:00:05.280
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.280 --> 00:00:12.560
This is episode 162 recorded December 19, 2019. I'm Brian Okken and today I've got


00:00:12.560 --> 00:00:19.600
guest host Ali Sevgi. He's one of the organizers of the Chicago Python meetup and we met last week


00:00:19.600 --> 00:00:24.000
when I was there for briefly and we already started recording this but I forgot to press


00:00:24.000 --> 00:00:28.800
record so we're starting over. So thanks Ali for hanging in there with me. Thanks Brian,


00:00:28.800 --> 00:00:29.640
- I'm glad to be here.


00:00:29.640 --> 00:00:32.960
- And this episode is brought to you by Datadog.


00:00:32.960 --> 00:00:34.960
We'll talk more about them later,


00:00:34.960 --> 00:00:36.920
but first, Ali's gonna tell us


00:00:36.920 --> 00:00:38.720
some exciting things about Django.


00:00:38.720 --> 00:00:42.600
- Yeah, so Django 3.0 just came out in early December,


00:00:42.600 --> 00:00:45.200
and so I really wanted to find out what was going on.


00:00:45.200 --> 00:00:49.640
I found a talk from DjangoCon 2019 by Andrew Godwin


00:00:49.640 --> 00:00:53.720
titled "Just Add a Wait, Retrofitting Async into Django,"


00:00:53.720 --> 00:00:56.000
and Andrew's been the one leading the implementation


00:00:56.000 --> 00:00:58.120
of asynchronous support into Django,


00:00:58.120 --> 00:01:00.960
And he discussed what the 3.0 release signifies,


00:01:00.960 --> 00:01:03.160
also went over the implementation roadmap


00:01:03.160 --> 00:01:04.440
for upcoming releases.


00:01:04.440 --> 00:01:06.400
- Okay, wow, that sounds fascinating.


00:01:06.400 --> 00:01:08.320
- Yeah, he started by giving an overview


00:01:08.320 --> 00:01:10.080
of the async landscape,


00:01:10.080 --> 00:01:13.560
talked about how synchronous and asynchronous code interact.


00:01:13.560 --> 00:01:15.720
A key point that he made was that


00:01:15.720 --> 00:01:17.700
when we have asynchronous functions,


00:01:17.700 --> 00:01:19.880
they're very different than synchronous functions.


00:01:19.880 --> 00:01:23.240
This makes it really difficult to design proper APIs.


00:01:23.240 --> 00:01:26.000
And one of the difficulties in adding asynchronous support


00:01:26.000 --> 00:01:29.880
to Django is that this project, it's been around for a really long time.


00:01:29.880 --> 00:01:31.880
There are a lot of people familiar with it.


00:01:31.880 --> 00:01:34.520
And for these new async implementations,


00:01:34.520 --> 00:01:37.640
they wanted to have that same familiar feeling.


00:01:37.640 --> 00:01:41.480
And so they made a plan to implement async capabilities in three phases.


00:01:41.480 --> 00:01:45.800
And so phase one, that was completed with the Django 3.0 release.


00:01:45.800 --> 00:01:50.160
And this phase, it's really meant to lay a lot of the groundwork for future changes.


00:01:50.160 --> 00:01:54.800
And so Django now supports asynchronous server gateway interface or ASCII.


00:01:54.800 --> 00:01:57.300
And the ORM, it's also async aware.


00:01:57.300 --> 00:02:00.000
So if you actually call ORM code from async code,


00:02:00.000 --> 00:02:01.600
it's going to raise an exception


00:02:01.600 --> 00:02:04.100
to make sure that you're not calling the synchronous function


00:02:04.100 --> 00:02:05.400
from your async code.


00:02:05.400 --> 00:02:08.200
You don't want to have unexpected behavior there.


00:02:08.200 --> 00:02:11.300
Phase two is going to be tracking with Django 3.1.


00:02:11.300 --> 00:02:14.100
And they're going to be adding async capabilities


00:02:14.100 --> 00:02:17.100
to the core parts of the request path.


00:02:17.100 --> 00:02:19.200
This means we're going to have async views,


00:02:19.200 --> 00:02:22.100
async handlers, and async middleware.


00:02:22.100 --> 00:02:26.100
And there's already a branch in the Django repository where this is mostly working.


00:02:26.100 --> 00:02:30.740
They just need to add a couple of tests to make sure things are passing with all those cases.


00:02:30.740 --> 00:02:32.340
It sounds really well thought out.


00:02:32.340 --> 00:02:35.860
They put a lot of work into it and there's a really detailed Django pep.


00:02:35.860 --> 00:02:38.100
I think it's called a depth of all about it.


00:02:38.100 --> 00:02:42.740
And then finally, with phase three, that's going to make the Django ORM all async.


00:02:42.740 --> 00:02:47.460
And Andrew called this the largest, most difficult and most unbounded part of the project.


00:02:47.460 --> 00:02:50.020
So if we just start thinking about like ORM queries,


00:02:50.020 --> 00:02:55.220
sometimes they can result in a lot of implicit data-based lookups if we're not really careful.


00:02:55.220 --> 00:02:57.860
And this is where a lot of those complexities are going to come from.


00:02:57.860 --> 00:03:01.540
I really enjoyed this talk. I think it went into the right amount of depth while being really


00:03:01.540 --> 00:03:06.260
accessible. And I just want to call out the fantastic diagrams. It really helped improve


00:03:06.260 --> 00:03:10.980
my understanding of Django internals. And if you check the show notes, I'm going to include a link


00:03:10.980 --> 00:03:15.780
to the async project wiki. Andrew needs some help putting these things into Django.


00:03:15.780 --> 00:03:20.780
He's got a lot of areas there. If you have some time, you have the expertise, please go ahead and help him out.


00:03:20.780 --> 00:03:24.780
Yeah, awesome. I like doing calls to action on the show to try to get people involved.


00:03:24.780 --> 00:03:31.780
And I've been just starting Django for like several years now, just dipping my toes in and out every once in a while.


00:03:31.780 --> 00:03:36.780
And I was kind of waiting for this new version to come out. So I'll probably check this out first.


00:03:36.780 --> 00:03:42.540
I like that idea of having, since they're gradually rolling it out, doing error messages


00:03:42.540 --> 00:03:45.900
for if you try to do things that aren't implemented yet.


00:03:45.900 --> 00:03:46.900
So that's cool.


00:03:46.900 --> 00:03:48.240
Yeah, it's always best to be explicit.


00:03:48.240 --> 00:03:51.020
So would you say you've been playing around with Django?


00:03:51.020 --> 00:03:52.740
Yeah, okay.


00:03:52.740 --> 00:03:54.820
Nice, nice segue there.


00:03:54.820 --> 00:04:00.280
So the next topic, speaking of playing, I don't know how you got into programming, but


00:04:00.280 --> 00:04:02.700
a lot of people get into it with games.


00:04:02.700 --> 00:04:07.700
And I actually feel bad that I'm in that camp also,


00:04:07.700 --> 00:04:11.760
because I don't know, it's just kind of cliche.


00:04:11.760 --> 00:04:14.040
But yeah, sure enough, Games by Example


00:04:14.040 --> 00:04:17.400
is a GitHub repo by Al Swigert


00:04:17.400 --> 00:04:18.920
and other contributors as well.


00:04:18.920 --> 00:04:21.400
Or I think there's others, but he wants more.


00:04:21.400 --> 00:04:25.480
So the idea is these are standard I/O games.


00:04:25.480 --> 00:04:29.680
And he's got a collection of games with the source code


00:04:29.680 --> 00:04:32.860
to use for example programming lessons.


00:04:32.860 --> 00:04:34.700
They're all written in Python 3


00:04:34.700 --> 00:04:36.340
and you can just clone the repo


00:04:36.340 --> 00:04:38.260
or just view it and copy and paste


00:04:38.260 --> 00:04:39.300
if you don't really,


00:04:39.300 --> 00:04:42.560
even for people that aren't used to git stuff.


00:04:42.560 --> 00:04:44.460
I think it's neat 'cause I,


00:04:44.460 --> 00:04:46.960
before I even learned any of the concepts of programming,


00:04:46.960 --> 00:04:50.000
I was programming games by copying them out of magazines


00:04:50.000 --> 00:04:52.020
and typing them into my old TRS-80


00:04:52.020 --> 00:04:53.740
way back in the stone ages.


00:04:53.740 --> 00:04:54.560
- That's awesome.


00:04:54.560 --> 00:04:55.380
- I didn't know what it was doing,


00:04:55.380 --> 00:04:58.660
but I could modify things and sort of interpret it


00:04:58.660 --> 00:05:02.380
you can kind of read BASIC. So there's some cool features of these games that


00:05:02.380 --> 00:05:06.220
actually I would have enjoyed at the time. Some of the neat things is that


00:05:06.220 --> 00:05:11.020
they're short. They're limited to 256 lines of code, just an arbitrary number,


00:05:11.020 --> 00:05:17.660
but that's a pretty nice small code size. They're all single file, single source


00:05:17.660 --> 00:05:22.020
code files with no installers, so you just run them with Python. They'll use


00:05:22.020 --> 00:05:26.660
just the standard library if they're only using print and input for


00:05:26.660 --> 00:05:30.380
interacting with the user. You know there's some downsides to that but


00:05:30.380 --> 00:05:34.560
there's some upsides too because they're fairly simple. He's tried to make them


00:05:34.560 --> 00:05:39.820
very well commented and very readable so he mentions that they're elegant and


00:05:39.820 --> 00:05:44.140
efficient is nice sometimes but understandable and readable is better


00:05:44.140 --> 00:05:48.540
for for education purposes so that's what they're planning on doing. That's


00:05:48.540 --> 00:05:54.020
what his focus is. Also input validation on everything so that you can't crash


00:05:54.020 --> 00:05:58.560
Python from typing in something weird. This is kind of cool. He made sure that


00:05:58.560 --> 00:06:02.320
every function has a docstring to describe what it is because it really is


00:06:02.320 --> 00:06:06.640
meant to be teaching people and I think this is a pretty cool. Yeah Al does a lot


00:06:06.640 --> 00:06:10.000
of good things about structuring things in a way that everybody can understand


00:06:10.000 --> 00:06:14.300
really love all the stuff he does. This would be great for people to use in I think


00:06:14.300 --> 00:06:19.240
in helping your kid out. I'm gonna try to get my my kids running with some of the


00:06:19.240 --> 00:06:23.540
stuff to just say hey watch this is how you run it now play with it and yeah


00:06:23.540 --> 00:06:29.300
break it. He also included to-do list of things he wants to do with the project but hasn't done


00:06:29.300 --> 00:06:33.380
yet and I love that because it gives people direction if they want to help out with the


00:06:33.380 --> 00:06:38.340
project. One of the areas is testing, he wants more tests so I'd love for people to get involved


00:06:38.340 --> 00:06:44.180
with that. Always got to make the call up for testing. Yeah definitely. So before we move on


00:06:44.180 --> 00:06:48.820
I want to give a shout out to our sponsor. This episode is sponsored by Datadog,


00:06:48.820 --> 00:06:54.340
a cloud-scale monitoring platform that unifies metrics, logs, distributed traces, and more.


00:06:54.340 --> 00:07:00.420
Trace requests across service boundaries with flame graphs, correlate traces with logs and


00:07:00.420 --> 00:07:06.580
metrics, and plot the flow of traffic across multi-cloud environments with network performance


00:07:06.580 --> 00:07:12.820
monitoring. Plus, Datadog integrates with over 350 technologies like Postgres, Redis, and Hadoop,


00:07:12.820 --> 00:07:17.300
and their tracing client auto-instruments common frameworks and libraries like Django,


00:07:17.300 --> 00:07:27.220
tornado flask and asyncio. That's cool. Get started today with a 14 day free trial at pythonbytes.fm/datadog.


00:07:27.220 --> 00:07:35.460
Now speaking of testing, Bulwark has some, ah I stole your thunder, but then this topic has some


00:07:35.460 --> 00:07:41.540
test related stuff right? Yeah so Bulwark is an open source library that allows users to easily


00:07:41.540 --> 00:07:44.340
property tests their pandas data frames.


00:07:44.340 --> 00:07:46.420
It makes it easy for data analysts


00:07:46.420 --> 00:07:49.100
and data scientists to write tests.


00:07:49.100 --> 00:07:50.820
So let's just take a step back.


00:07:50.820 --> 00:07:52.880
We all know that tests are important,


00:07:52.880 --> 00:07:55.620
but tests for data, they're just a little bit different.


00:07:55.620 --> 00:07:58.380
These tests, they're not as deterministic


00:07:58.380 --> 00:08:00.420
and they require us to think about testing


00:08:00.420 --> 00:08:02.500
just a little bit differently.


00:08:02.500 --> 00:08:04.980
So with property tests, what we can do is


00:08:04.980 --> 00:08:08.720
we're able to check that an object has a certain property.


00:08:08.720 --> 00:08:10.460
And so property tests for data frames


00:08:10.460 --> 00:08:13.780
include things like validating the shape of a data frame,


00:08:13.780 --> 00:08:17.420
checking to see if a column is within a given range,


00:08:17.420 --> 00:08:21.020
verifying that a data frame has no NANDs,


00:08:21.020 --> 00:08:22.260
and things like that.


00:08:22.260 --> 00:08:24.260
So with Bulwark, you're able to implement


00:08:24.260 --> 00:08:26.780
these property tests as checks,


00:08:26.780 --> 00:08:28.500
and each check takes a data frame


00:08:28.500 --> 00:08:30.260
and some optional arguments.


00:08:30.260 --> 00:08:31.700
This check will make an assertion


00:08:31.700 --> 00:08:34.060
about some data frame property.


00:08:34.060 --> 00:08:35.260
If things are good,


00:08:35.260 --> 00:08:37.740
the check's gonna return the original data frame.


00:08:37.740 --> 00:08:40.100
If the check fails, the assertion error is raised,


00:08:40.100 --> 00:08:42.800
and you have a little bit more insight into what went wrong.


00:08:42.800 --> 00:08:45.900
And this is really helpful when you have a large data pipeline.


00:08:45.900 --> 00:08:47.600
- That's cool. - Yeah, it's really cool.


00:08:47.600 --> 00:08:51.000
And so one of the ways that Bulwark lets you implement property tests


00:08:51.000 --> 00:08:53.000
is also through decorators.


00:08:53.000 --> 00:08:55.340
And so when you're creating data pipelines,


00:08:55.340 --> 00:08:57.700
it's really useful to do them as functions.


00:08:57.700 --> 00:09:00.940
You have some input data, you perform some sort of action,


00:09:00.940 --> 00:09:02.340
it returns an output.


00:09:02.340 --> 00:09:05.340
And with Bulwark, what you can do is you can add decorators


00:09:05.340 --> 00:09:06.940
to your pipeline functions


00:09:06.940 --> 00:09:09.900
and validate that the properties of your input data frames


00:09:09.900 --> 00:09:12.240
meet the conditions that you really wanted to have.


00:09:12.240 --> 00:09:15.940
So Bulwark has a lot of pre-built checks already in there.


00:09:15.940 --> 00:09:18.380
There's one for has certain data types.


00:09:18.380 --> 00:09:20.240
Is this column monotonic?


00:09:20.240 --> 00:09:22.880
Is this within a certain number of standard deviations?


00:09:22.880 --> 00:09:25.880
And it seemed pretty straightforward to add new checks.


00:09:25.880 --> 00:09:28.480
And instead of stacking decorators for multiple checks,


00:09:28.480 --> 00:09:31.760
they have a special decorator, a multi-check decorator,


00:09:31.760 --> 00:09:33.960
which won't fail only on the first.


00:09:33.960 --> 00:09:35.500
It's actually going to run through them all


00:09:35.500 --> 00:09:39.060
and tell you all the ways your data either passed or did not pass.


00:09:39.060 --> 00:09:40.900
Oh, that's great. Wow. Neat.


00:09:40.900 --> 00:09:43.560
Yeah, you can use Bulwark for implementing unit tests.


00:09:43.560 --> 00:09:46.200
You can use them in the ETL pipeline,


00:09:46.200 --> 00:09:48.860
especially on the extract and the load steps.


00:09:48.860 --> 00:09:51.360
And Bulwark can be used during development.


00:09:51.360 --> 00:09:54.400
And they also have some options to turn assertion errors


00:09:54.400 --> 00:09:56.060
into warnings for production.


00:09:56.060 --> 00:09:58.260
I'm not really too sure how I feel about that,


00:09:58.260 --> 00:10:00.360
but that functionality is there if you want to use it.


00:10:00.360 --> 00:10:01.100
This is cool.


00:10:01.100 --> 00:10:04.360
This is actually coming out of Chicago Python community member


00:10:04.360 --> 00:10:06.100
Zach Rosenberg.


00:10:06.100 --> 00:10:08.400
He created this and gave a talk about it at Chippy.


00:10:08.400 --> 00:10:10.600
So just wanted to share with the rest of our community.


00:10:10.600 --> 00:10:11.360
I think it's great.


00:10:11.360 --> 00:10:13.360
And I think that there's seeing more and more.


00:10:13.360 --> 00:10:16.760
I did a recent episode of Testing Code where we talked about,


00:10:16.760 --> 00:10:20.160
I talked to one of the people on the Great Expectations project


00:10:20.160 --> 00:10:22.800
that's around testing with data also.


00:10:22.800 --> 00:10:27.400
And, you know, some frameworks are attacking the problem differently.


00:10:27.400 --> 00:10:31.000
And also just some people like one style over another.


00:10:31.000 --> 00:10:33.960
This is a little bit different style than Great Expectations.


00:10:33.960 --> 00:10:37.200
So I think it's definitely worth checking out and having more,


00:10:37.200 --> 00:10:41.640
Gosh, more and more of our life is controlled by data pipelines,


00:10:41.640 --> 00:10:47.000
not necessarily controlled, but influenced by results based on these data pipelines.


00:10:47.000 --> 00:10:53.600
So having these checks in place to make sure that our data is just as solid as our source code.


00:10:53.600 --> 00:10:54.480
This is awesome.


00:10:54.480 --> 00:10:57.960
Yeah, it's really good to see all these data scientists and data engineers


00:10:57.960 --> 00:10:59.960
thinking about testing in a different way.


00:10:59.960 --> 00:11:04.160
Oh, gosh, there's some interesting contributors to this.


00:11:04.160 --> 00:11:05.560
This is great. Cool.


00:11:05.560 --> 00:11:16.760
I got off on the test side I could go down that rabbit hole for all day long but let's pop out and talk about packaging a little bit.


00:11:16.760 --> 00:11:26.100
Yeah actually so packaging such as we do cover almost every story packaging related because it is a stumbling block for a lot of people to go forward at


00:11:26.100 --> 00:11:31.760
at some point you get into the intermediate python developer and how to share your code is


00:11:31.760 --> 00:11:35.040
and dealing with virtual environments and stuff is one of those things


00:11:35.040 --> 00:11:36.460
you have to run into.


00:11:36.460 --> 00:11:39.760
So I think it's kind of cool. I am not a Poetry user,


00:11:39.760 --> 00:11:43.120
but I might try this new one out. So Poetry just announced the


00:11:43.120 --> 00:11:45.320
Poetry 1.0.0.


00:11:45.320 --> 00:11:47.440
They're no longer 0 versionings.


00:11:47.440 --> 00:11:49.940
They've got to 1.0. Awesome.


00:11:49.940 --> 00:11:53.480
The announcement is by Sebastian Eustace


00:11:53.480 --> 00:11:57.720
and it highlights some of the changes and


00:11:57.720 --> 00:12:00.000
a good caution right off the bat is


00:12:00.000 --> 00:12:04.080
they are breaking backwards compatibility with this version because


00:12:04.080 --> 00:12:08.880
the zero-ver is often, we're trying things out and I think it's completely fair


00:12:08.880 --> 00:12:12.720
to break, it's always fair to break with major versions but


00:12:12.720 --> 00:12:14.720
but I think this is reasonable.


00:12:14.720 --> 00:12:17.120
So one of the things I, I think it's


00:12:17.120 --> 00:12:19.920
this highlights, I want to highlight a few things


00:12:19.920 --> 00:12:21.440
I think it's very


00:12:21.440 --> 00:12:25.200
for this version we can really take poetry seriously I think that they're


00:12:25.200 --> 00:12:27.840
planning on sticking around and people that like it


00:12:27.840 --> 00:12:29.840
there's a lot of changes that are good.


00:12:29.840 --> 00:12:32.240
They've added different ways to manage environments.


00:12:32.240 --> 00:12:36.500
So within a project, you can have Poetry help you coordinate


00:12:36.500 --> 00:12:39.780
multiple versions of Python within the same project.


00:12:39.780 --> 00:12:43.120
That's pretty cool. I don't know if it had that before. That's neat.


00:12:43.120 --> 00:12:47.280
One of the things that I want to bring up next is private indices.


00:12:47.280 --> 00:12:51.840
If you're working with projects within a company,


00:12:51.840 --> 00:12:55.820
this is very important to be able to have your own private,


00:12:55.820 --> 00:12:57.960
something like PyPI.


00:12:57.960 --> 00:13:01.840
And one of the ways you can do that is you can have your a private version of something


00:13:01.840 --> 00:13:07.580
like PyPI, but you can also just throw a whole bunch of wheels in a directory and use that


00:13:07.580 --> 00:13:09.280
as an index as well.


00:13:09.280 --> 00:13:15.480
And so having there's some improved support, you can have even specify a different index


00:13:15.480 --> 00:13:17.720
for each dependency if you want.


00:13:17.720 --> 00:13:23.120
But you can also set up a primary and secondary or default and secondary index and have them


00:13:23.120 --> 00:13:26.320
be non something other than PyPI if you want.


00:13:26.320 --> 00:13:27.680
So this is cool.


00:13:27.680 --> 00:13:32.320
using Poetry and other tools like this within continuous integration, sometimes


00:13:32.320 --> 00:13:37.240
it's hard to pass things around and so environmental variables are sometimes


00:13:37.240 --> 00:13:42.000
they're ugly but they're useful within CI and so there's new environmental


00:13:42.000 --> 00:13:47.240
variable support. And then since there's all this new support for different sort


00:13:47.240 --> 00:13:51.680
of dependencies, the add command has been expanded to allow you to just add


00:13:51.680 --> 00:13:55.840
dependencies and put them in the right place with the right source and


00:13:55.840 --> 00:14:00.960
everything. The other thing I want to highlight is they've improved some things around publishing


00:14:00.960 --> 00:14:08.320
to allow you to put API tokens in place instead of having to use text, passwords, and users. So


00:14:08.320 --> 00:14:12.960
very cool changes from Poetry. I applaud their progress. Yeah, I haven't checked it out, but I'm


00:14:12.960 --> 00:14:16.960
going to go check it out. Looks like there's been a lot of changes made. Pretty excited about the


00:14:16.960 --> 00:14:21.600
1.0 release. This is neat. You know, people are respect all over the place. There's some people


00:14:21.600 --> 00:14:27.680
that absolutely love poetry. There's some people using pipenv. I'm a straight just using the built-in


00:14:27.680 --> 00:14:34.640
venv and all the tools around that. But yeah, whatever floats your boat, I guess. Yeah, for sure.


00:14:34.640 --> 00:14:40.240
What do you got for us next? So Kubernetes has been a huge part of the DevOps ecosystem in the last


00:14:40.240 --> 00:14:45.360
two, three years. With the rise of containers, Kubernetes is sort of the de facto platform


00:14:45.360 --> 00:14:50.880
for running and coordinating applications across multiple machines. It's not really something I


00:14:50.880 --> 00:14:55.880
I know a lot about, but it's something I want to get to know more about.


00:14:55.880 --> 00:14:59.180
I just found this awesome link from DigitalOcean.


00:14:59.180 --> 00:15:01.960
They put together a Kubernetes for full stack developers curriculum.


00:15:01.960 --> 00:15:05.780
What it does is it follows all the steps that a new user would have to learn


00:15:05.780 --> 00:15:11.080
in order to deploy applications to Kubernetes.


00:15:11.080 --> 00:15:13.880
You start by learning Kubernetes core concepts like what's a pod,


00:15:13.880 --> 00:15:18.120
what's a deployment.


00:15:18.120 --> 00:15:19.400
Next you'll start building modern 12-factor web applications.


00:15:18.200 --> 00:15:22.200
And then you're going to start packaging these applications inside of containers.


00:15:22.200 --> 00:15:25.200
Next, you're going to deploy your containerized applications on Kubernetes.


00:15:25.200 --> 00:15:30.200
And then finally, you're going to learn how to manage all that cluster orchestration and the cluster operations.


00:15:30.200 --> 00:15:34.200
I went through the first link, which was like an introduction to Kubernetes.


00:15:34.200 --> 00:15:36.200
I found the material really easy to understand.


00:15:36.200 --> 00:15:38.200
It's pretty much what you expect from DigitalOcean.


00:15:38.200 --> 00:15:42.200
I learned how to do a lot of my operations work from DigitalOcean.


00:15:42.200 --> 00:15:46.200
And I'm really excited that they have a lot more resources for the community.


00:15:46.200 --> 00:15:50.740
I'm going to throw a link in the show notes to a talk I gave about introduction to Docker.


00:15:50.740 --> 00:15:55.040
If you're ever learning how to do Docker, I think this is a really good place to get


00:15:55.040 --> 00:15:56.040
started.


00:15:56.040 --> 00:15:57.040
Yeah.


00:15:57.040 --> 00:15:59.280
And so just to be clear, Docker and Kubernetes are closely tied, right?


00:15:59.280 --> 00:16:03.120
Docker is the container where you package your applications in.


00:16:03.120 --> 00:16:09.220
And the Kubernetes is the platform that manages all your Docker eyes, your containers across


00:16:09.220 --> 00:16:10.600
multiple machines.


00:16:10.600 --> 00:16:14.040
So this way with Docker, you can build your application with Kubernetes, you can deploy


00:16:14.040 --> 00:16:16.120
it and scale it pretty much infinitely.


00:16:16.120 --> 00:16:17.120
Cool.


00:16:17.120 --> 00:16:20.760
And it wasn't until I, gosh, I'm forgetting the guy's name, but I saw a talk a couple


00:16:20.760 --> 00:16:22.880
years ago about Kubernetes.


00:16:22.880 --> 00:16:27.760
And I didn't realize that this isn't just, I mean, yes, it's intended for cloud stuff,


00:16:27.760 --> 00:16:33.600
but you can test the entire Kubernetes setup locally on a laptop even.


00:16:33.600 --> 00:16:34.600
So that's pretty neat.


00:16:34.600 --> 00:16:35.600
Yeah, for sure.


00:16:35.600 --> 00:16:36.600
I'm not lying there.


00:16:36.600 --> 00:16:37.600
Is that true?


00:16:37.600 --> 00:16:38.600
It's like a kubectl.


00:16:38.600 --> 00:16:42.440
Like you can have like a kubelet on your machine and pretty much do whatever you need to on


00:16:42.440 --> 00:16:43.440
the cloud locally.


00:16:43.440 --> 00:16:47.440
Okay, cool. Definitely good for playing around. You don't have to pay for anything.


00:16:47.440 --> 00:16:48.440
Exactly.


00:16:48.440 --> 00:16:54.440
Well, now, so the last topic, I want to apologize to people. I'm perfectly okay with making mistakes on the show.


00:16:54.440 --> 00:16:59.440
So on episode 159, we were going through a whole bunch of pytest plugins.


00:16:59.440 --> 00:17:02.440
And one of the things we covered was pytest Picked.


00:17:02.440 --> 00:17:06.440
And I incorrectly assumed that it would run.


00:17:06.440 --> 00:17:15.940
There's a quote on the pytestPict site that says it runs the tests related to unstaged files or the current branch on the current branch according to Git.


00:17:15.940 --> 00:17:21.940
To me that sounded like it runs the tests related to code that's changed.


00:17:21.940 --> 00:17:24.940
But I was wrong. So Michael was right, I was wrong.


00:17:24.940 --> 00:17:35.940
It just runs, it uses Git to find out which files have changed and if any of those are test files, it runs the tests related to those test files.


00:17:35.940 --> 00:17:37.900
That makes sense, and that might be,


00:17:37.900 --> 00:17:39.040
if you're developing tests,


00:17:39.040 --> 00:17:40.860
that might be exactly what you want.


00:17:40.860 --> 00:17:42.380
But if you're developing code,


00:17:42.380 --> 00:17:43.540
you might want something different,


00:17:43.540 --> 00:17:48.340
and the tool I was thinking about was pytest-Testmon,


00:17:48.340 --> 00:17:50.940
and that's a plugin for pytest also,


00:17:50.940 --> 00:17:52.860
and I'm just gonna read their blurb.


00:17:52.860 --> 00:17:55.460
So pytest-Testmon is a pytest plugin


00:17:55.460 --> 00:17:59.460
which selects and executes only tests you need to run.


00:17:59.460 --> 00:18:03.020
It does this by collecting dependencies between test runs


00:18:03.020 --> 00:18:07.220
and all executed code internally by using coverage,


00:18:07.220 --> 00:18:08.820
the coverage data,


00:18:08.820 --> 00:18:11.500
and comparing those dependencies against changes.


00:18:11.500 --> 00:18:14.540
So it updates the database on each test execution,


00:18:14.540 --> 00:18:17.260
so it works independently of version control.


00:18:17.260 --> 00:18:19.280
So that's the thing I was thinking about.


00:18:19.280 --> 00:18:21.500
So if you're using this coverage to find out


00:18:21.500 --> 00:18:25.360
what tests are affecting different parts of your code base,


00:18:25.360 --> 00:18:26.200
very cool.


00:18:26.200 --> 00:18:27.780
So if you're making changes,


00:18:27.780 --> 00:18:29.760
this sounds like black magic to me


00:18:29.760 --> 00:18:31.840
that I'm glad somebody else wrote it,


00:18:31.840 --> 00:18:33.940
But it does look pretty neat.


00:18:33.940 --> 00:18:36.580
And I think I'm definitely ready to try this again.


00:18:36.580 --> 00:18:38.060
I tried it a while ago.


00:18:38.060 --> 00:18:40.400
And for some reason, I don't even remember what I,


00:18:40.400 --> 00:18:42.020
I don't think I had any beef with it,


00:18:42.020 --> 00:18:43.740
but I just didn't think I needed it.


00:18:43.740 --> 00:18:45.320
But this looks exciting enough to,


00:18:45.320 --> 00:18:46.220
I'm gonna try that again.


00:18:46.220 --> 00:18:47.220
- For large test weights,


00:18:47.220 --> 00:18:49.140
I think this would save you so much time


00:18:49.140 --> 00:18:50.380
instead of rerunning everything.


00:18:50.380 --> 00:18:51.740
- Yeah, I mean, there's other ways to,


00:18:51.740 --> 00:18:54.360
if you know specifically what you wanna rerun.


00:18:54.360 --> 00:18:57.540
Yeah, if you've got a whole bunch of different tests


00:18:57.540 --> 00:18:58.900
and they all run pretty fast,


00:18:58.900 --> 00:19:01.860
but you're not quite sure which ones you should run


00:19:01.860 --> 00:19:03.260
based on your code changes.


00:19:03.260 --> 00:19:04.300
This is kind of neat.


00:19:04.300 --> 00:19:05.140
- Awesome.


00:19:05.140 --> 00:19:06.980
- So that's the end of our normal topics.


00:19:06.980 --> 00:19:09.200
We didn't really get to know you a little bit,


00:19:09.200 --> 00:19:11.220
but here, so you have anything extra


00:19:11.220 --> 00:19:12.500
you want to tell us what you're up to?


00:19:12.500 --> 00:19:14.940
- Sure, so one of my favorite things about Python


00:19:14.940 --> 00:19:16.220
is the community.


00:19:16.220 --> 00:19:18.920
And as the organizer of Chicago Python,


00:19:18.920 --> 00:19:21.920
it's no surprise that building hyper-local communities


00:19:21.920 --> 00:19:24.140
is like one of my main passions.


00:19:24.140 --> 00:19:27.220
And in Chicago, we have a lot of events for our members.


00:19:27.220 --> 00:19:30.940
We have talk nights, project nights, open source sprints.


00:19:30.940 --> 00:19:33.060
We recently started one to help people


00:19:33.060 --> 00:19:35.140
with whiteboarding coding interviews,


00:19:35.140 --> 00:19:37.920
but there's great user groups all over the world.


00:19:37.920 --> 00:19:40.300
And I just want to include a link in the show notes


00:19:40.300 --> 00:19:42.640
so how your listeners can go out


00:19:42.640 --> 00:19:45.460
and find a local community they can be a part of.


00:19:45.460 --> 00:19:47.060
And I also want to give a special shout out


00:19:47.060 --> 00:19:50.020
to all my fellow organizers who are listening to this podcast.


00:19:50.020 --> 00:19:51.740
Thank you for all you do for the community.


00:19:51.740 --> 00:19:53.020
- Yeah, I mean, I didn't know


00:19:53.020 --> 00:19:56.600
that the Chicago community was so huge.


00:19:56.600 --> 00:19:59.320
You guys are, did you say 11 organizers?


00:19:59.320 --> 00:20:00.960
- Yeah, we have 11 organizers.


00:20:00.960 --> 00:20:03.720
We've been around since like 2003.


00:20:03.720 --> 00:20:06.840
So it's like one of the OG Python user groups.


00:20:06.840 --> 00:20:10.120
And we actually had like Matplotlib debuted at Chippy.


00:20:10.120 --> 00:20:12.440
So a lot of historical things happening.


00:20:12.440 --> 00:20:13.320
- Yeah, it was cool.


00:20:13.320 --> 00:20:16.200
So I was in Chicago last week and I don't know,


00:20:16.200 --> 00:20:18.980
I posted something on Twitter like Chicago's cold.


00:20:18.980 --> 00:20:21.880
Some people made comments, but Ali reached out and said,


00:20:21.880 --> 00:20:24.460
"Hey, if you're in town and available for a drink


00:20:24.460 --> 00:20:26.180
"or something, we should meet up."


00:20:26.180 --> 00:20:29.380
And so totally impromptu, we met and had dinner together.


00:20:29.380 --> 00:20:30.560
It was a blast.


00:20:30.560 --> 00:20:32.300
And yeah, talk about community.


00:20:32.300 --> 00:20:34.820
That's one of the things I love about the community.


00:20:34.820 --> 00:20:36.320
If I'm wherever I'm traveling,


00:20:36.320 --> 00:20:39.940
I can like try to hit up people in that area and say,


00:20:39.940 --> 00:20:40.780
"Hey, I'm in town.


00:20:40.780 --> 00:20:42.580
"I only have like three hour window,


00:20:42.580 --> 00:20:44.540
"but is anybody available?"


00:20:44.540 --> 00:20:46.900
And usually I can get somebody to come by


00:20:46.900 --> 00:20:48.620
and we can BS or something.


00:20:48.620 --> 00:20:50.020
And so it's great.


00:20:50.020 --> 00:20:52.020
- We have Python friends all around the world.


00:20:52.020 --> 00:20:53.540
- You have a note here on Pi Tennessee?


00:20:53.540 --> 00:20:55.300
- Yeah, so Pi Tennessee is gonna be happening


00:20:55.300 --> 00:20:56.860
on March 7th and 8th.


00:20:56.860 --> 00:20:59.140
I'm gonna be giving a talk on design patterns


00:20:59.140 --> 00:21:02.140
and tickets are available at pietennessee.org.


00:21:02.140 --> 00:21:03.500
It's gonna be in Nashville,


00:21:03.500 --> 00:21:05.820
my third year in a row going, can't wait.


00:21:05.820 --> 00:21:09.220
And Brian, I think I saw your name on the talk list as well.


00:21:09.220 --> 00:21:11.680
- Oh yeah, I am going to that.


00:21:11.680 --> 00:21:12.780
(laughing)


00:21:12.780 --> 00:21:13.700
- Awesome.


00:21:13.700 --> 00:21:15.000
- I'm like, I don't think,


00:21:15.000 --> 00:21:16.460
I thought I was going to Nashville.


00:21:16.460 --> 00:21:18.060
Oh yeah, that is in Tennessee.


00:21:18.060 --> 00:21:20.300
Yes, I failed geography.


00:21:20.300 --> 00:21:21.380
So cool.


00:21:21.380 --> 00:21:23.620
I've never been there, so it should be fun.


00:21:23.620 --> 00:21:25.460
- Yeah, we'll grab some dinner or drink or something.


00:21:25.460 --> 00:21:26.300
That'll be fun.


00:21:26.300 --> 00:21:28.820
- So speaking of community and this podcast,


00:21:28.820 --> 00:21:33.140
I just wanna announce that the next Python PDX West meetup,


00:21:33.140 --> 00:21:36.540
the one in Hillsboro, just west of Portland,


00:21:36.540 --> 00:21:38.460
is happening January 7th.


00:21:38.460 --> 00:21:41.060
And I'm bringing it up because Michael and I


00:21:41.060 --> 00:21:42.980
thought it'd be fun to just do a live recording


00:21:42.980 --> 00:21:46.060
of Python Bytes with everybody hanging out at the meetup.


00:21:46.060 --> 00:21:48.260
There's also gonna be one to two other talks there


00:21:48.260 --> 00:21:49.700
and we'll have food.


00:21:49.700 --> 00:21:51.620
So if anybody's in the Portland area,


00:21:51.620 --> 00:21:54.220
the second week in January swing by.


00:21:54.220 --> 00:21:55.220
- Sounds like a lot of fun.


00:21:55.220 --> 00:21:57.340
- A couple jokes for us.


00:21:57.340 --> 00:22:02.340
So the first one is sent in from Tyler Madison.


00:22:02.340 --> 00:22:04.020
It's just a short joke.


00:22:04.020 --> 00:22:06.820
So two co-routines walk into a bar.


00:22:06.820 --> 00:22:07.940
Of course it's a runtime error


00:22:07.940 --> 00:22:09.780
because bar was never awaited.


00:22:09.780 --> 00:22:11.900
(laughing)


00:22:11.900 --> 00:22:12.880
Async jokes.


00:22:12.880 --> 00:22:15.380
- I got one for you.


00:22:15.380 --> 00:22:17.900
So how many developers on a message board


00:22:17.900 --> 00:22:19.620
does it take to screw in a light bulb?


00:22:19.620 --> 00:22:20.460
- I don't know.


00:22:20.460 --> 00:22:22.460
answer is, why are you trying to do that?


00:22:22.460 --> 00:22:24.060
(laughing)


00:22:24.060 --> 00:22:24.900
- Yeah.


00:22:24.900 --> 00:22:26.620
- For all those people that are just trying to make sure


00:22:26.620 --> 00:22:29.060
that they're making sure that you're doing things their way.


00:22:29.060 --> 00:22:29.980
- Yeah, I hate that.


00:22:29.980 --> 00:22:32.140
When people like, you know, somebody asks a question


00:22:32.140 --> 00:22:34.880
and before anybody, it might be a simple answer,


00:22:34.880 --> 00:22:37.700
but somebody will say, yeah, you shouldn't be doing that.


00:22:37.700 --> 00:22:38.540
Don't do that.


00:22:38.540 --> 00:22:39.360
- Yeah.


00:22:39.360 --> 00:22:40.200
- This was fun.


00:22:40.200 --> 00:22:41.540
Thank you so much for filling in for Michael


00:22:41.540 --> 00:22:42.980
and co-hosting today.


00:22:42.980 --> 00:22:44.500
- Thanks so much for having me, Brian.


00:22:44.500 --> 00:22:46.220
- Thank you for listening to Python Bytes.


00:22:46.220 --> 00:22:48.700
Follow the show on Twitter @pythonbytes.


00:22:48.700 --> 00:22:51.760
That's Python Bytes, as in B-Y-T-E-S.


00:22:51.760 --> 00:22:54.660
And get the full show notes at pythonbytes.fm.


00:22:54.660 --> 00:22:56.860
If you have a news item you want featured,


00:22:56.860 --> 00:22:59.620
just visit pythonbytes.fm and send it our way.


00:22:59.620 --> 00:23:01.740
We're always on the lookout for sharing something cool.


00:23:01.740 --> 00:23:02.820
This is Brian Okken,


00:23:02.820 --> 00:23:04.900
and on behalf of myself and Michael Kennedy,


00:23:04.900 --> 00:23:07.000
thank you for listening and sharing this podcast


00:23:07.000 --> 00:23:08.660
with your friends and colleagues.

