WEBVTT

00:00:00.001 --> 00:00:05.180
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.180 --> 00:00:09.980
This is episode 76, recorded May 3rd, 2018. I'm Michael Kennedy.

00:00:09.980 --> 00:00:10.760
And I'm Brian Okken.

00:00:10.760 --> 00:00:15.720
And this episode is brought to you by Datadog. Check them out at pythonbytes.fm/Datadog.

00:00:15.720 --> 00:00:17.800
They're doing awesome stuff. Tell you more about that later.

00:00:17.800 --> 00:00:21.640
Brian, I think, you know, we're on the eve of PyCon.

00:00:21.640 --> 00:00:26.360
We're literally, in terms of podcast releasing, podcast episodes, this is PyCon Eve.

00:00:26.360 --> 00:00:34.420
And PyCon is a place where people seem to really care more than most developer communities about sort of welcoming newcomers.

00:00:34.420 --> 00:00:37.700
And you've got something that kind of ties into that angle as well, right?

00:00:37.700 --> 00:00:44.840
I ran across this article, and it looks like it's called Unlearning Toxic Behaviors in a Code Review Culture.

00:00:44.840 --> 00:00:53.760
And this is, apparently this came from a talk at AlterConf and then turned into this.

00:00:53.760 --> 00:00:58.340
So there's the slides are available, but there's an article with all of the information.

00:00:58.340 --> 00:01:10.180
And this is something that trying to have good manners and be a good human while also helping each other out in code reviews is sort of an interesting balancing act.

00:01:10.180 --> 00:01:15.140
Because you've got to actually teach people and if you need to teach and everything.

00:01:15.300 --> 00:01:18.840
So anyway, I'm going to jump into some of the ideas around this.

00:01:18.840 --> 00:01:21.660
And it's an interesting idea to go off.

00:01:21.660 --> 00:01:29.780
It's a discussion of some of the unhelpful behaviors that people have seen and then some of the helpful things that you can do.

00:01:29.780 --> 00:01:33.860
So I'm not going to list all of them, but there's a few of them that jumped out at me.

00:01:34.580 --> 00:01:38.260
Like, passing off opinion is fact was the first one.

00:01:38.260 --> 00:01:41.680
And, you know, it's people saying, oh, this should be implemented this way.

00:01:41.680 --> 00:01:44.940
But there isn't really a should often with software.

00:01:44.940 --> 00:01:46.160
Those are opinions.

00:01:46.160 --> 00:01:49.460
And so just make sure you state it like that.

00:01:49.460 --> 00:01:54.820
One of these things, next up is overwhelming with an avalanche of comments.

00:01:55.060 --> 00:02:10.020
So, like, for example, if somebody made the same mistake a whole bunch of times, like, I don't know, there's spaces in the wrong place or some formatting issue or, you know, not using underscores and doing camel case instead, commenting every place.

00:02:10.020 --> 00:02:14.040
I mean, one comment is sufficient to don't put like, yeah, you did it here too.

00:02:14.040 --> 00:02:15.140
Yeah, you did it here too.

00:02:15.140 --> 00:02:16.180
Yeah, you did it here too.

00:02:16.180 --> 00:02:17.660
All over the code review.

00:02:17.660 --> 00:02:20.740
And there's actually just reading through all of these.

00:02:21.040 --> 00:02:27.600
They're good just reminders of how to be helpful instead of being hurtful during a code review.

00:02:27.600 --> 00:02:35.020
And then popped out some of the helpful things that one of the things that popped out at me is collaborate and don't backseat drive.

00:02:35.020 --> 00:02:41.240
And this is one actually that I need to work on because it's hard when I see some code that I think should be another way.

00:02:41.240 --> 00:02:45.540
I don't really want to just tell everybody, tell somebody what's all wrong with it.

00:02:45.540 --> 00:02:50.320
My instinct is to just do it the right way and show them, say, it should have been done like this.

00:02:50.860 --> 00:02:53.620
But that's, you know, that's not the right way to go.

00:02:53.620 --> 00:02:56.240
But anyway, do you have any comments on some of this?

00:02:56.240 --> 00:03:07.500
So one of the things I think that people need to be really careful about is when in some of these code reviews, especially for junior developers, this can be like a really sort of sensitive time emotionally, right?

00:03:07.500 --> 00:03:12.000
You put together some work and like it's one thing to criticize the code.

00:03:12.160 --> 00:03:17.300
But at the same time, it can come across as feeling like criticizing that person or their skill set.

00:03:17.660 --> 00:03:25.800
And, you know, when you're a junior developer, your feeling is like you maybe don't feel like you can keep up with your team because they've been doing it for 10 years and you've been doing it for two.

00:03:25.800 --> 00:03:28.540
And you just feel a little bit like you're always trying to catch up.

00:03:28.540 --> 00:03:28.740
Right.

00:03:28.780 --> 00:03:34.440
And so if somebody comes in just matter of factly says, we're going to throw a bunch of comments on this stuff.

00:03:34.440 --> 00:03:37.500
You should do it the way I've been doing it for 10 years, et cetera, et cetera.

00:03:37.500 --> 00:03:44.920
Like it can I think it can be perceived as a personal attack or attack on your credibility in your newfound career.

00:03:44.920 --> 00:03:49.660
So I just think, you know, being real, real sensitive to that, especially for junior developers.

00:03:49.660 --> 00:03:50.360
Right.

00:03:50.360 --> 00:03:53.700
I mean, I'm sure people who've been doing it for a long time feel that way as well.

00:03:53.700 --> 00:03:57.140
But the longer you do it, the thicker your skin gets.

00:03:57.140 --> 00:04:03.480
And you're just like, you know, the more you're kind of used to having these sort of debates and differences of opinion.

00:04:03.480 --> 00:04:13.380
But, yeah, I would sort of second this and say, you know, be cautious of the junior developers and make it more about learning and bringing them along instead of like, hey, I'm going to show you how to do this because you did it wrong.

00:04:13.380 --> 00:04:20.900
Also depends a lot on personality because I'm when I was a junior developer, I actually was more open for people saying, wow, this sucks.

00:04:20.900 --> 00:04:21.820
You should do it this way.

00:04:21.820 --> 00:04:28.340
And now that I'm I think of myself as an experienced developer, there's still a lot of stuff that I'm learning in new parts.

00:04:28.340 --> 00:04:34.980
And I sometimes will take a comment of like, oh, you should do it this way as like we're talking about.

00:04:34.980 --> 00:04:39.820
I'm a senior developer, you know, but I got to check the ego a little bit.

00:04:39.820 --> 00:04:46.420
And one of the things that helped my team a lot, it shows up on this list, too, is to automate what you can.

00:04:46.420 --> 00:04:55.840
Like, for instance, we use I mean, whatever your standard is, just define that and codify it with PyCode style or FlakeAid or something.

00:04:56.100 --> 00:04:59.120
Our team uses FlakeAid, the FlakeAid defaults.

00:04:59.120 --> 00:05:07.080
We at work, it was helpful for us to increase the the line length and a couple other things that we turned off.

00:05:07.080 --> 00:05:09.500
But agree on that and just automate that.

00:05:09.500 --> 00:05:12.860
And just so sometimes something will come through a code review.

00:05:13.240 --> 00:05:20.000
And just a simple comment of, hey, can you run this through FlakeAid first before we start the review is easier.

00:05:20.000 --> 00:05:25.860
I totally agree with that because people you don't feel personally criticized by a computer.

00:05:25.860 --> 00:05:26.360
Yeah.

00:05:26.360 --> 00:05:26.800
Right.

00:05:26.800 --> 00:05:32.940
It's just like the algorithm, it formats it this way and it checks that the line length is this and the format is that.

00:05:32.940 --> 00:05:34.740
And if it's wrong, then you fix it.

00:05:34.740 --> 00:05:38.880
But it's not like it's, you know, it has an opinion about that.

00:05:38.880 --> 00:05:39.380
Not really.

00:05:39.380 --> 00:05:39.700
Right.

00:05:40.140 --> 00:05:43.000
Maybe someday computers will have opinions like that, but they don't right now.

00:05:43.000 --> 00:05:43.300
Yeah.

00:05:43.300 --> 00:05:51.360
And another thing, sort of adding on what you're saying is with black, I believe, remember black, the formatter that comes in any color you want, long as it's black?

00:05:51.360 --> 00:05:51.640
Yeah.

00:05:51.640 --> 00:05:56.380
That one, I believe, will modify the code, not just suggest fixes.

00:05:56.380 --> 00:06:01.360
So you can say black, reformat this the way we like it and just do that.

00:06:01.360 --> 00:06:04.980
I still haven't tried to hook that up as a commit hook or something like that.

00:06:04.980 --> 00:06:05.340
Exactly.

00:06:05.340 --> 00:06:06.200
That'd be nice.

00:06:06.200 --> 00:06:07.180
I think it's pretty cool.

00:06:07.180 --> 00:06:09.340
Definitely worth thinking about these issues.

00:06:10.120 --> 00:06:21.500
So, Brian, do you remember a few episodes ago that project, that new versioning project that Mahmoud and Mahmoud Hashemi and a few of his friends put together about zero version?

00:06:21.500 --> 00:06:22.580
Was it zero for?

00:06:22.580 --> 00:06:23.420
What was it called?

00:06:23.420 --> 00:06:24.380
I think it was zero for.

00:06:24.380 --> 00:06:25.340
Yeah, I think it was zero for.

00:06:25.460 --> 00:06:31.900
So it was like sort of celebrating in a sarcastic poking fun that maybe you should not be zero version.

00:06:31.900 --> 00:06:37.960
The zero dot whatever version of things like Flask, Pandas, et cetera.

00:06:37.960 --> 00:06:38.320
Right.

00:06:38.380 --> 00:06:43.840
Things that have been around for eight years and are super stable and are still like zero dot one for their version.

00:06:43.840 --> 00:06:58.260
Well, either that article or this episode or that episode covering it somehow may have had some kind of effect because Flask had been on like zero dot something small for eight years.

00:06:58.260 --> 00:07:00.640
And now Flask 1.0 is released.

00:07:00.640 --> 00:07:01.160
How about that?

00:07:01.260 --> 00:07:02.260
I think it's a great thing.

00:07:02.260 --> 00:07:08.420
It was interesting that there were some people that like actually commented of like, why bother if it's already stable?

00:07:08.420 --> 00:07:09.580
I think it's a good.

00:07:09.580 --> 00:07:10.960
I think it absolutely makes sense.

00:07:10.960 --> 00:07:15.400
I mean, I know that there are people out there in the world who see it's been around for a long time.

00:07:15.400 --> 00:07:16.180
It's had many releases.

00:07:16.180 --> 00:07:17.020
Does that mean stable?

00:07:17.020 --> 00:07:21.740
If it's not stable, you put the little beta, the little B on the end of the version or something like that.

00:07:21.740 --> 00:07:32.100
But there's a large portion of the development world that comes to Python from outside of the core ecosystem of Python and sees zero dot one and goes, can't use it.

00:07:32.100 --> 00:07:32.640
Not ready.

00:07:32.640 --> 00:07:33.540
What is this?

00:07:33.540 --> 00:07:33.760
Right.

00:07:33.760 --> 00:07:38.580
And so I think it I think it really makes a lot of sense just changing the version because they got some pressure.

00:07:38.580 --> 00:07:39.680
There's actually a lot of stuff here.

00:07:39.680 --> 00:07:42.840
I'm going to try to go through this quickly because there's actually a lot of stuff here.

00:07:43.180 --> 00:07:48.580
So the CLI is more flexible for creating a flask app.

00:07:48.580 --> 00:07:56.540
And actually, you can do things like, say, it's in development mode or production mode, and that can replace like flask debug settings and environment, stuff like that.

00:07:56.540 --> 00:07:57.080
That's great.

00:07:57.080 --> 00:08:01.240
You can get the environment variables from a dot flask env file.

00:08:01.460 --> 00:08:16.040
So instead of having to export them in your shell when you like launch the shell, like ZSHRC or bash RC, things like that, you can have it just in these files and it'll actually load them as if they're from the environment.

00:08:16.040 --> 00:08:16.700
That's cool.

00:08:16.700 --> 00:08:19.100
Development server is multi-threaded.

00:08:19.360 --> 00:08:28.340
So now you can more properly test concurrent requests during development, which is what you would experience if you were released it to a proper threaded server like micro whiskey.

00:08:28.340 --> 00:08:32.800
Flask EXT, which was deprecated, has been removed.

00:08:32.800 --> 00:08:34.840
Some stuff around forms is pretty nice.

00:08:34.840 --> 00:08:37.700
Better error handling, more finer grained stuff there, more logging.

00:08:38.700 --> 00:08:54.280
For you, the test client gained a JSON argument for posting JSON and a response test object, a get JSON for decoding JSON so you can have like test your JSON methods better, a test CLI runner for testing your app's command line options.

00:08:54.280 --> 00:08:55.420
Pretty cool, right?

00:08:55.420 --> 00:08:56.280
Yeah, very cool.

00:08:56.280 --> 00:08:58.360
So all of this stuff is in Flask 1.0.

00:08:58.360 --> 00:08:58.720
Nice.

00:08:58.720 --> 00:09:01.200
Actually, that very much deserves a bump in the version.

00:09:01.200 --> 00:09:01.540
Right.

00:09:01.540 --> 00:09:03.060
And it's time.

00:09:03.060 --> 00:09:04.940
It's definitely time.

00:09:04.940 --> 00:09:06.620
So well done, Flask team.

00:09:06.620 --> 00:09:07.040
Yeah.

00:09:07.500 --> 00:09:09.480
I'm just getting into some more Flask stuff, too.

00:09:09.480 --> 00:09:10.080
So that's good.

00:09:10.080 --> 00:09:10.700
Yeah, it's pretty fun.

00:09:10.700 --> 00:09:13.060
So have we gotten used to pip?

00:09:13.060 --> 00:09:14.580
Like, I'm not used to it.

00:09:14.580 --> 00:09:20.240
I literally yesterday typed pip install-r requirements.txt a lot because I was rebuilding some servers.

00:09:20.240 --> 00:09:21.180
How about you?

00:09:21.180 --> 00:09:22.060
I understood it.

00:09:22.060 --> 00:09:23.100
I think it's really cool.

00:09:23.100 --> 00:09:28.900
But I had trouble really grokking what problem it was solving that I didn't have yet.

00:09:28.900 --> 00:09:36.800
So I ran across an article that's called Pipenv, a guide to the new Python packaging tool.

00:09:37.300 --> 00:09:45.460
And so since everybody's like, actually, not everybody, but it is being more recommended now to use pipenv where appropriate.

00:09:45.460 --> 00:09:53.680
And so this article actually presented it in a way that I think it made me understand it a lot more.

00:09:54.100 --> 00:10:01.020
For instance, using pipenv, it's like using pipenv virtual environments, but it does a lot of the stuff for you.

00:10:01.020 --> 00:10:07.740
There is some workflow differences that I'm not going to cover here.

00:10:07.740 --> 00:10:15.560
But there's a video up on the site that I think the pipenv readme or the, I don't know, the documents have.

00:10:15.560 --> 00:10:16.440
Like the GitHub page.

00:10:16.440 --> 00:10:16.680
Yeah.

00:10:16.760 --> 00:10:16.960
Yeah.

00:10:16.960 --> 00:10:18.240
It has this little video.

00:10:18.240 --> 00:10:18.880
This is great.

00:10:18.880 --> 00:10:20.120
It shows you the workflow.

00:10:20.120 --> 00:10:22.040
But what problems does it solve?

00:10:22.040 --> 00:10:25.160
So the requirements.txt has an issue.

00:10:25.160 --> 00:10:29.000
And this article talks about the current, without pipenv, what the problems are.

00:10:29.360 --> 00:10:35.420
So requirements.txt is, you can set it up as just, these are the required packages that my application uses.

00:10:35.420 --> 00:10:37.520
But it doesn't really have versions.

00:10:37.520 --> 00:10:40.640
You can put versions in there, but your mileage may vary.

00:10:41.120 --> 00:10:48.300
Now, if your dependencies have dependencies themselves, then those versions, you know, how do you keep track of those?

00:10:48.300 --> 00:10:57.780
So that one of the ways people have done that is use pip freeze, which does both your dependencies and all of the sub dependencies and freezes all of those.

00:10:57.780 --> 00:10:59.840
And you can use that as your requirements file.

00:10:59.840 --> 00:11:02.960
But then you've got to keep track of it.

00:11:02.960 --> 00:11:06.760
So every time one of the sub dependencies updates, you've got to make sure it works.

00:11:06.760 --> 00:11:08.500
And that's just sort of a pain.

00:11:08.500 --> 00:11:15.100
Yeah, I mean, the requirements is supposed to show you what you depend upon, not the transitive closure of what you depend upon, really.

00:11:15.100 --> 00:11:15.800
Right?

00:11:15.800 --> 00:11:17.300
Oh, math words.

00:11:17.300 --> 00:11:22.600
Not all, not your dependencies, dependencies, not the dependencies of your dependencies of your dependencies.

00:11:22.600 --> 00:11:23.080
How's that?

00:11:23.080 --> 00:11:23.680
Okay.

00:11:23.680 --> 00:11:30.620
The gist of it is, in file-wise, there's two files that get generated, pip file and pip file.lock.

00:11:30.620 --> 00:11:35.580
Pip file is the, these are my requirements, kind of, but it also does more than that.

00:11:35.780 --> 00:11:41.620
And then pip file lock is, like, all of the pinned requirements with all the versions.

00:11:41.620 --> 00:11:48.580
And it also includes hashes of the downloads so that you don't have to worry about corrupted installs or anything like that.

00:11:48.580 --> 00:11:50.300
And then it does so much more than that.

00:11:50.300 --> 00:11:59.120
But this discussion really helped me understand why this is useful, especially the subdependency thing is something, yeah, nobody wants to deal with that themselves.

00:11:59.120 --> 00:12:01.140
So let Pip-Enf deal with it for you.

00:12:01.140 --> 00:12:01.740
Man, pretty cool.

00:12:01.740 --> 00:12:07.560
I got to study, I got to get my workflow zen around this new way.

00:12:07.560 --> 00:12:16.880
One of the catches, which is that it's recommended for use for applications and not for packages because your package is used by something else.

00:12:16.880 --> 00:12:18.500
You don't want to pin anything.

00:12:18.740 --> 00:12:22.240
It's the application that should pin things, not packages themselves.

00:12:22.240 --> 00:12:25.960
But you can use it while you're developing packages.

00:12:25.960 --> 00:12:30.300
And if you're really confused on how to set all this up, there's a new cookie cutter for it.

00:12:30.300 --> 00:12:32.220
So we're also going to include a link.

00:12:32.220 --> 00:12:40.020
There's a package somebody did for a generic Python project that uses pipenv.

00:12:40.020 --> 00:12:41.180
There's a cookie cutter for it.

00:12:41.180 --> 00:12:41.400
Nice.

00:12:41.400 --> 00:12:49.200
So basically, if you're going to start a new project, you can run that cookie cutter to generate it with the proper structure using pipfile and pipfile.lock.

00:12:49.200 --> 00:12:54.320
And it's kind of a fun way to just get your hand like, okay, how is this all supposed to work?

00:12:54.320 --> 00:13:02.560
Even if you don't use this for a project to pull down pipenv in a project and play with it and say, oh, yeah, this makes sense.

00:13:02.560 --> 00:13:03.660
I think that's a really cool way.

00:13:03.660 --> 00:13:08.080
It kind of gives you the essence of what you need for the structure, which is always something that's fun to debate.

00:13:08.080 --> 00:13:09.040
And we have a few times.

00:13:10.380 --> 00:13:17.360
So before we get to our next item, which is probably going to surprise people a little bit if they haven't heard of it, I want to tell you about Datadog.

00:13:17.360 --> 00:13:25.500
So Datadog is a monitoring solution that provides deep visibility and tracks issues that you might be running into with distributed applications.

00:13:25.500 --> 00:13:35.040
So if I have an app that has maybe some services like microservices and it calls into the database and other things and it's slow, that can be really hard to figure out where.

00:13:35.240 --> 00:13:45.100
But with Datadog, you can just investigate the bottlenecks in your code, explore graphs and dashboards and really figure out where your app is spending its time across processes.

00:13:45.100 --> 00:13:45.420
Right.

00:13:45.420 --> 00:13:46.640
So not just profiling one thing.

00:13:46.640 --> 00:13:49.840
So visualize your Python performance today.

00:13:49.840 --> 00:13:52.860
Get started with a free trial at Datadog.

00:13:52.980 --> 00:13:59.500
And you'll get a cool shirt, a little T-shirt with a Datadog mascot is the right word I'm looking for.

00:13:59.500 --> 00:14:01.260
A Datadog mascot on there.

00:14:01.260 --> 00:14:04.580
So check it out for yourself at pythonbytes.fm/Datadog.

00:14:05.220 --> 00:14:18.920
So if you're going to think of a company, Brian, that was going to create like one virtual machine, one runtime in Python speak, the equivalent of interpreter to rule them all.

00:14:18.920 --> 00:14:19.920
How about Oracle?

00:14:19.920 --> 00:14:22.440
No, I wouldn't have thought Oracle.

00:14:22.440 --> 00:14:23.760
No, I probably wouldn't either.

00:14:23.760 --> 00:14:28.480
So there's this thing called GraalVM, G-R-A-A-L-VM.

00:14:28.480 --> 00:14:36.580
And it says this is built to run Python code and other code that depends on virtual machines and run it faster.

00:14:36.580 --> 00:14:39.700
So they said, look, we see this problem.

00:14:39.700 --> 00:14:44.420
Like current production virtual machines and, you know, throw the CPython in there with that.

00:14:44.420 --> 00:14:50.680
Provide high performance of only execution of only certain languages or a small set of languages.

00:14:50.680 --> 00:14:52.740
They all repeat a bunch of stuff.

00:14:52.740 --> 00:14:56.760
They all do compilation, memory management, tooling, et cetera.

00:14:56.760 --> 00:14:59.980
So it kind of violates the don't repeat yourself, the dry principle.

00:14:59.980 --> 00:15:04.260
They're heavyweight things usually that take a lot of memory.

00:15:04.260 --> 00:15:08.180
So they're often difficult to embed, especially like JVM, stuff like that.

00:15:08.620 --> 00:15:16.900
So over at Oracle Labs, they started a new project a while ago to create a single VM that would provide high performance execution for all of the languages.

00:15:16.900 --> 00:15:25.620
Benefit being if I have, say, some sort of multilingual environment, like maybe we do Java and Python or something like that.

00:15:25.620 --> 00:15:34.860
If you could put that within the same process and have them directly communicate, they would go dramatically faster than, say, over JSON-based microservice.

00:15:34.860 --> 00:15:36.300
Like if it was literally in memory.

00:15:36.300 --> 00:15:36.640
Yeah.

00:15:36.640 --> 00:15:37.780
That's kind of the idea, right?

00:15:38.220 --> 00:15:49.340
So the goals are basically to create this high performance single VM that can interoperate with zero overhead across these different languages and platforms.

00:15:49.340 --> 00:15:53.080
So you can run all the JVM-based languages, Java, Catlin, and so on.

00:15:53.080 --> 00:15:54.840
JavaScript, including Node.js.

00:15:54.840 --> 00:15:59.280
Anything that you can do LLVM against, so C++ or Rust.

00:15:59.280 --> 00:16:01.140
And Python.

00:16:01.440 --> 00:16:13.140
So imagine you're doing some sort of interop type of thing, and you want to write some of your code in Rust and some of it in Python, and you want to try to get the best performance out of it.

00:16:13.140 --> 00:16:16.940
Maybe putting it together in this thing would be pretty cool.

00:16:17.420 --> 00:16:24.260
So it does, I don't know how much it'll help for Python in its current form, but maybe they'll get something really special.

00:16:24.260 --> 00:16:30.220
But for some of the JIT compiled languages, it will ahead of time compile them to machine instructions and then run them.

00:16:30.220 --> 00:16:34.160
So things like startup time and initial execution is super fast and unpredictable.

00:16:34.380 --> 00:16:38.900
So it would be cool if they could do like PyPy pre-compiled or something like that.

00:16:38.900 --> 00:16:41.200
Just to make sure I get my terminology straight.

00:16:41.200 --> 00:16:44.540
The Grail VM, the VM is a virtual machine.

00:16:44.540 --> 00:16:51.960
I'm used to virtual machines being like an entire desktop on a server or something.

00:16:51.960 --> 00:16:52.860
Is that what this is?

00:16:52.860 --> 00:17:04.380
No, often VMs are like the Java VM or the .NET CLR or things that are sort of managed memory process.

00:17:04.380 --> 00:17:07.520
Okay, it's the thing between my code and my computer.

00:17:07.520 --> 00:17:12.440
Yeah, and it is most commonly used around things that JIT compile.

00:17:12.440 --> 00:17:16.040
Java, JavaScript, .NET, things like that.

00:17:16.040 --> 00:17:18.040
Okay, so two completely different things.

00:17:18.040 --> 00:17:18.400
Two different VMs.

00:17:18.400 --> 00:17:19.980
Both called virtual machines.

00:17:19.980 --> 00:17:21.180
Okay, got it.

00:17:21.180 --> 00:17:29.720
Right now the Python support is experimental, but they're working on one of their main next steps is to make the support for Python better.

00:17:29.720 --> 00:17:33.300
So if this sounds interesting to people, I think, you know, it's early days.

00:17:33.300 --> 00:17:35.360
It's pretty interesting and check it out.

00:17:35.360 --> 00:17:47.060
Actually, I'm like super excited about it because the combination of Python with C++ and Rust and R and other things and Kotlin, it's going to be, I think this is an exciting thing.

00:17:47.060 --> 00:17:47.800
I think it is too.

00:17:47.940 --> 00:17:58.880
And if you can do that with no interop within the same process that, you know, without translating between the layers and some kind of like CFFI layer type of thing, I think that would be really cool.

00:17:58.880 --> 00:17:59.260
Yeah.

00:17:59.260 --> 00:17:59.940
Okay.

00:17:59.940 --> 00:18:00.320
We'll see.

00:18:00.320 --> 00:18:07.640
It's early days, but it could be a pretty neat step in adding one more way to execute Python code.

00:18:07.640 --> 00:18:07.900
Yeah.

00:18:07.900 --> 00:18:08.700
All right.

00:18:08.720 --> 00:18:09.580
What's your next one for us?

00:18:09.580 --> 00:18:21.520
I am like totally in getting ready for PyCon mode and didn't have time to do a testing code episode last week or this week.

00:18:21.760 --> 00:18:23.480
So this is a shameless time.

00:18:23.480 --> 00:18:27.800
I'm going to take my last slot to do some testing related topics.

00:18:27.800 --> 00:18:29.440
But one of them is Flask.

00:18:29.440 --> 00:18:30.700
So we covered Flask already.

00:18:30.700 --> 00:18:32.180
There's a brand new version.

00:18:32.180 --> 00:18:32.920
You can test it.

00:18:32.920 --> 00:18:33.300
Yeah.

00:18:33.560 --> 00:18:39.080
There's an article that came out this week called Testing a Flask Application Using pytest.

00:18:39.080 --> 00:18:43.100
And those are two of my favorite things, Flask and pytest.

00:18:43.100 --> 00:18:46.640
And one of the third favorite thing is my own book.

00:18:46.640 --> 00:18:51.040
And the book that I wrote was part of the inspiration for this article.

00:18:51.040 --> 00:18:52.060
So shameless plug.

00:18:52.600 --> 00:18:54.500
But it's a really nicely written article.

00:18:54.500 --> 00:19:01.300
It's basically if you're writing, if you're working with Flask and you want to try to work with pytest also.

00:19:01.300 --> 00:19:05.280
I mean, I've had questions about this, but I didn't feel qualified to answer yet.

00:19:05.280 --> 00:19:07.180
Now I am because of this article.

00:19:07.180 --> 00:19:13.880
But there's talks about both unit testing and functional testing through the test client that Flask provides.

00:19:13.880 --> 00:19:16.000
But the unit tests don't have to be.

00:19:16.000 --> 00:19:17.320
You can access things directly.

00:19:17.460 --> 00:19:23.200
But the article goes through both a couple examples, a unit test and then a functional test.

00:19:23.200 --> 00:19:33.480
Like, for instance, checking the making sure that a new user works at a unit test level and how to hook that up with pytest and Flask and everything.

00:19:33.480 --> 00:19:36.180
And it's actually really nicely done.

00:19:36.180 --> 00:19:38.600
After you read the article, I don't stop there.

00:19:38.600 --> 00:19:41.780
I go out and look at the project that he's got on.

00:19:42.120 --> 00:19:48.320
I can't remember if it's on GitHub or GitLab, but it's an open source project that you can take a look.

00:19:48.320 --> 00:19:50.740
And it's got other more testing examples.

00:19:50.740 --> 00:19:52.600
And it's really well done.

00:19:52.600 --> 00:19:53.780
So good job.

00:19:53.780 --> 00:19:54.400
I like it.

00:19:54.400 --> 00:19:56.000
Yeah, it looks really, really cool.

00:19:56.000 --> 00:19:58.860
And I see the project structure there again.

00:19:58.860 --> 00:20:00.800
Like, here's how you set it up to do testing.

00:20:00.800 --> 00:20:02.340
So that's very nice.

00:20:02.340 --> 00:20:04.280
And it's cool that your book was an inspiration for it as well.

00:20:04.280 --> 00:20:11.160
Another thing while we're on the testing topic, I wanted to bring up a new pytest plugin that just actually kind of blew me away.

00:20:11.160 --> 00:20:12.760
This is a brilliant idea.

00:20:12.760 --> 00:20:16.040
And I also learned the word stochastic.

00:20:16.040 --> 00:20:20.960
I think I knew it at one point, but stochastic kind of means random and stuff.

00:20:20.960 --> 00:20:29.000
But it comes up because it's in the readme for this project called pytest-CAPRNG.

00:20:30.680 --> 00:20:40.860
So here's the idea is if you've used random, the random module or the numpy random is being used in your code or in your test.

00:20:41.300 --> 00:20:48.460
Running a test, if you run a test and it fails and you try to rerun it and it passes, it might pass because the data is different.

00:20:48.460 --> 00:20:58.380
This new plugin, what it does is before you run each test, it captures the state of the random modules so that the seeds are the same.

00:20:58.700 --> 00:21:02.820
Next time you run it, if you rerun the failure, you'll get the same data again.

00:21:02.820 --> 00:21:04.680
So you'll see the failure again.

00:21:04.680 --> 00:21:10.060
And it's just kind of a small little plugin that is an awesome idea.

00:21:10.060 --> 00:21:11.120
So I wanted to highlight it.

00:21:11.120 --> 00:21:11.700
It's cool.

00:21:11.700 --> 00:21:12.460
Yeah, it's cool.

00:21:12.640 --> 00:21:14.940
I mean, coverage might change based on that value.

00:21:14.940 --> 00:21:17.860
Success or failure might change based on that value.

00:21:17.860 --> 00:21:20.560
So being able to lock it down, make it predictable.

00:21:20.560 --> 00:21:21.020
Yeah.

00:21:21.020 --> 00:21:22.560
But still have it start from something random.

00:21:22.560 --> 00:21:23.100
That's pretty cool.

00:21:23.100 --> 00:21:23.760
I like it.

00:21:23.760 --> 00:21:24.280
All right.

00:21:24.280 --> 00:21:27.760
I did say we were on PyCon Eve, right?

00:21:27.760 --> 00:21:34.280
So the next time we release an episode is going to be at, well, at least it will have been recorded at PyCon.

00:21:34.280 --> 00:21:35.300
We'll see if it happens there.

00:21:35.300 --> 00:21:38.740
Anyway, there's a really nice article by Trey Hunter.

00:21:39.080 --> 00:21:44.940
He was a guest co-host a while ago on how to have a great first PyCon.

00:21:44.940 --> 00:21:52.500
So PyCon is maybe the big, I think it's the US one is the biggest Python conference there is.

00:21:52.500 --> 00:21:53.740
It's certainly quite large.

00:21:53.740 --> 00:21:56.220
And there's a lot of options.

00:21:56.220 --> 00:21:58.200
It's a little bit of a paradox of choice there, right?

00:21:58.200 --> 00:22:00.100
I mean, did you have that experience when you were there, Brian?

00:22:00.100 --> 00:22:00.920
Yeah, definitely.

00:22:00.920 --> 00:22:05.440
And I'm really having that time, that experience again, looking at the schedule.

00:22:05.440 --> 00:22:06.420
I don't know what to go to.

00:22:06.420 --> 00:22:06.840
I know.

00:22:06.840 --> 00:22:08.660
I'm going to solve that by not going to anything.

00:22:08.660 --> 00:22:12.540
Which is part of this conversation.

00:22:12.540 --> 00:22:20.020
So he has a really nice, long, thoughtful write-up about sort of getting the most out of PyCon the first time.

00:22:20.020 --> 00:22:23.580
You know, maybe if you've gone a few times, you can still read this and get something out of it.

00:22:23.580 --> 00:22:32.400
So first of all, he mentions that the talks are typically recorded, available on YouTube within, I don't know, 24 hours?

00:22:32.400 --> 00:22:33.120
Something like that.

00:22:33.120 --> 00:22:34.540
Really surprisingly quickly.

00:22:35.320 --> 00:22:39.100
So you don't feel like you have to attend every talk, right?

00:22:39.100 --> 00:22:43.260
If there's something more interesting going on, don't feel like you're missing out.

00:22:43.260 --> 00:22:43.980
You just watch it later.

00:22:43.980 --> 00:22:48.520
I think one of my number one recommendations, which he touches on, is open spaces.

00:22:48.520 --> 00:22:52.280
Yeah, that's actually something I didn't know about last year that I missed out on.

00:22:52.480 --> 00:22:55.680
So that's a good thing to – what are open spaces?

00:22:55.680 --> 00:22:58.480
There's a big board and there's a bunch of rooms.

00:22:58.480 --> 00:23:00.620
And the rooms will hold like 20 to 50 people.

00:23:00.620 --> 00:23:03.760
And there's probably five to ten of them.

00:23:03.760 --> 00:23:05.760
I'm not sure exactly how many are available.

00:23:06.080 --> 00:23:21.820
And there's parts of the conference where you can just – anybody who wants to have a group conversation about something, they fill out a little three-by-five-inch note, little card, and stick it up on the board and claim an hour in a room.

00:23:22.020 --> 00:23:25.240
And then people just go and attend it like they would any other talk.

00:23:25.240 --> 00:23:28.620
But it's much more high participation because there's not a proper speaker.

00:23:28.620 --> 00:23:32.100
You just have to basically kick off the conversation.

00:23:32.100 --> 00:23:34.240
And then it's just like a group conversation.

00:23:34.240 --> 00:23:41.460
I think that's awesome because that's kind of what you go to PyCon for anyway is to meet with people that have similar interests.

00:23:41.460 --> 00:23:45.280
Not just Python as a whole but specifically.

00:23:45.280 --> 00:23:48.540
What specific parts of Python that you're interested in?

00:23:48.540 --> 00:23:48.980
Right.

00:23:48.980 --> 00:23:53.960
You might have like an IoT open space for people working with MicroPython or something.

00:23:53.960 --> 00:23:54.640
Who knows, right?

00:23:54.640 --> 00:23:57.420
That would be easily something you could put together.

00:23:57.420 --> 00:24:00.120
The other thing is all the talks are recorded.

00:24:00.120 --> 00:24:02.360
Almost none of the open spaces are recorded.

00:24:02.360 --> 00:24:02.640
Yeah.

00:24:02.640 --> 00:24:04.080
So you can't make those up.

00:24:04.080 --> 00:24:06.060
So that's one thing I really like to do.

00:24:06.060 --> 00:24:07.780
And Trey goes into that a little bit.

00:24:07.780 --> 00:24:12.460
He says they're often more niche and maybe something really you want to focus – like you're really focused on.

00:24:12.460 --> 00:24:14.440
It's all about interaction and discussion.

00:24:14.440 --> 00:24:16.200
And they're not recorded.

00:24:16.200 --> 00:24:18.200
So he pretty much has the same thoughts I do.

00:24:18.200 --> 00:24:21.660
He has some tips for like conversation around breakfast, lunch, dinner.

00:24:21.660 --> 00:24:23.140
Talks about the hallway track.

00:24:23.140 --> 00:24:27.520
I'm a big fan of the hallway track partly because the sessions are recorded.

00:24:27.520 --> 00:24:36.220
And partly the reason I go there is to meet people and to make connections and to have these interactions that I don't have outside of that space.

00:24:36.220 --> 00:24:36.460
Right.

00:24:36.720 --> 00:24:41.760
So I find almost always I'm having a great conversation with somebody and they're like, oh, the session is starting.

00:24:41.760 --> 00:24:42.840
They're like, you know what?

00:24:42.840 --> 00:24:43.720
Forget the session.

00:24:43.720 --> 00:24:44.400
I'll watch it on YouTube.

00:24:44.400 --> 00:24:47.560
Let's keep going on whatever it is we're doing because this is awesome, right?

00:24:47.560 --> 00:24:49.680
And I find like I spend the whole conference that way.

00:24:49.680 --> 00:24:50.000
Yeah.

00:24:50.000 --> 00:24:52.620
It would be lame if nobody went to the talks though.

00:24:52.620 --> 00:24:53.220
No, I know.

00:24:53.460 --> 00:24:55.140
I'm going to go to your talk, by the way.

00:24:55.140 --> 00:24:57.300
Okay.

00:24:57.300 --> 00:24:59.520
I guess I think I guess more I'm saying you're right.

00:24:59.520 --> 00:25:03.480
People, not everybody should just skip them all the time because then what would it be?

00:25:03.480 --> 00:25:04.480
It wouldn't really be the same.

00:25:04.480 --> 00:25:06.460
But don't feel bad about it.

00:25:06.460 --> 00:25:06.700
Yeah.

00:25:06.700 --> 00:25:07.040
Yeah.

00:25:07.040 --> 00:25:10.320
Don't every one of them.

00:25:10.320 --> 00:25:10.440
Right.

00:25:10.440 --> 00:25:13.440
People find yourself in a really interesting situation that you're enjoying.

00:25:13.440 --> 00:25:16.160
Just because it's time to go to the talks doesn't mean you have to go to the talks.

00:25:16.160 --> 00:25:16.580
Right.

00:25:16.580 --> 00:25:16.880
Yeah.

00:25:16.880 --> 00:25:21.840
The other thing that I thought was interesting about this was this conversation, this concept

00:25:21.840 --> 00:25:24.280
of a Pac-Man opening in a group.

00:25:24.280 --> 00:25:24.600
Yeah.

00:25:24.600 --> 00:25:25.080
I love that.

00:25:25.080 --> 00:25:25.400
Yeah.

00:25:25.400 --> 00:25:27.160
So the idea is like, you know, think of Pac-Man.

00:25:27.160 --> 00:25:28.200
It's got the little open spot.

00:25:28.200 --> 00:25:31.840
If you're in a group standing around, don't just like create a closed circle because nobody

00:25:31.840 --> 00:25:32.860
can join or anything.

00:25:32.860 --> 00:25:37.860
So always leave a little gap that says, you know, look for people or look for groups that have

00:25:37.860 --> 00:25:41.180
Pac-Man openings and make sure that your group always has a Pac-Man opening.

00:25:41.180 --> 00:25:42.200
So that's pretty cool.

00:25:42.200 --> 00:25:48.380
Some advice for interacting online during PyCon, how to make the most out of networking and it's

00:25:48.380 --> 00:25:49.600
not really a bad thing.

00:25:49.600 --> 00:25:51.140
Things like that.

00:25:51.140 --> 00:25:52.140
And also volunteering.

00:25:52.140 --> 00:25:53.580
There's lightning talks.

00:25:53.580 --> 00:25:54.920
Have you given a lightning talk, Brian?

00:25:54.920 --> 00:25:56.080
Not at PyCon.

00:25:56.080 --> 00:25:56.480
Yeah.

00:25:56.480 --> 00:25:57.180
Neither have I.

00:25:57.180 --> 00:25:57.620
Yeah.

00:25:57.620 --> 00:25:59.620
It's just some general nice things.

00:25:59.620 --> 00:26:01.320
And then finally, one I thought was interesting.

00:26:01.320 --> 00:26:05.980
There was a person who commented on the post saying, if you're on Windows, it's helpful

00:26:05.980 --> 00:26:10.800
to install a virtual machine image of Linux like the current Ubuntu on your laptop because

00:26:10.800 --> 00:26:15.320
you might run into a situation, a talk or a training where something they're talking about

00:26:15.320 --> 00:26:17.600
doesn't work on Windows and you might miss out.

00:26:17.600 --> 00:26:23.280
That's both an opportunity for us to make the Windows experience better, but also maybe

00:26:23.280 --> 00:26:26.940
good advice for the first person, you know, coming with your Surface tablet.

00:26:26.940 --> 00:26:28.880
You might want to come prepared, I guess.

00:26:28.880 --> 00:26:31.160
Or install Anaconda, something like that.

00:26:31.300 --> 00:26:31.480
Yeah.

00:26:31.480 --> 00:26:35.300
So one of the things I wanted to bring up that I didn't know about ahead of time is

00:26:35.300 --> 00:26:41.500
there's certain sections of the day that is recommended that there isn't, there aren't

00:26:41.500 --> 00:26:44.500
any talks scheduled, but what is the other floor called?

00:26:44.500 --> 00:26:45.660
The place where we're at?

00:26:45.660 --> 00:26:46.740
The conference hall or the?

00:26:46.740 --> 00:26:47.320
The expo hall.

00:26:47.320 --> 00:26:48.040
The expo hall.

00:26:48.040 --> 00:26:51.500
But the expo hall is pretty much open all the time.

00:26:51.500 --> 00:26:56.780
So during a talk, if there's somebody that you wanted to meet up, meet or a company you

00:26:56.780 --> 00:27:00.700
wanted to talk to or something that you can't get to them because there's so many people

00:27:00.700 --> 00:27:06.160
during the normal expo times, skipping one of the talks and going during a talk time, there's

00:27:06.160 --> 00:27:10.120
way less people in the expo hall and you might be able to catch up with somebody a lot easier.

00:27:10.120 --> 00:27:11.120
That's great advice.

00:27:11.120 --> 00:27:11.760
Yeah, definitely.

00:27:11.760 --> 00:27:16.140
So I think that leads us really well into our own news.

00:27:16.140 --> 00:27:16.820
What do you think, Brian?

00:27:16.820 --> 00:27:17.200
Yeah.

00:27:17.520 --> 00:27:18.680
So you brought up my talk.

00:27:18.680 --> 00:27:22.400
I do have a talk Friday and I actually forgot the time.

00:27:22.400 --> 00:27:23.480
It's at five something.

00:27:23.480 --> 00:27:28.860
It's to do with testing and you're giving that a co-presenting with Paul Everett, right?

00:27:28.860 --> 00:27:29.160
Yeah.

00:27:29.160 --> 00:27:36.160
Paul Everett and I are going to, so I love pytest, of course, but I also have in this last year

00:27:36.160 --> 00:27:37.460
fallen in love with PyCharm.

00:27:37.460 --> 00:27:39.840
So we're going to do them together.

00:27:39.840 --> 00:27:45.300
We're going to show you how to make, be efficient and effective and speed up your test and development

00:27:45.300 --> 00:27:47.020
time with PyCharm and pytest.

00:27:47.080 --> 00:27:47.560
It'll be fun.

00:27:47.560 --> 00:27:49.040
Your chocolates and my peanut butter.

00:27:49.040 --> 00:27:49.480
Yeah.

00:27:49.480 --> 00:27:51.840
That's awesome.

00:27:51.840 --> 00:27:54.220
And we have a booth.

00:27:54.220 --> 00:27:56.480
You and I and a few others have a booth.

00:27:56.480 --> 00:27:58.780
I forgot the number, but you'll find us.

00:27:58.780 --> 00:27:59.540
It's pretty easy.

00:27:59.540 --> 00:28:00.480
All right?

00:28:00.480 --> 00:28:00.700
Yeah.

00:28:00.700 --> 00:28:01.440
And we have stickers.

00:28:01.440 --> 00:28:01.800
Yeah.

00:28:01.800 --> 00:28:03.200
I just got my stickers this morning.

00:28:03.200 --> 00:28:05.140
So yeah, I'll be ready.

00:28:05.140 --> 00:28:05.420
Yeah.

00:28:05.420 --> 00:28:06.680
It's going to be a lot of fun.

00:28:06.680 --> 00:28:08.080
I'm really looking forward to meeting people.

00:28:08.080 --> 00:28:10.060
So I hope everyone comes to say hello.

00:28:10.060 --> 00:28:10.520
Yeah.

00:28:10.520 --> 00:28:11.080
That should be awesome.

00:28:11.080 --> 00:28:13.060
And then another thing.

00:28:13.060 --> 00:28:14.920
We talked about the open session.

00:28:14.920 --> 00:28:17.880
Are we planning on doing a live Python Bytes recording?

00:28:17.880 --> 00:28:18.740
Why not try?

00:28:18.740 --> 00:28:19.440
Let's do it.

00:28:19.440 --> 00:28:19.640
Yeah.

00:28:19.640 --> 00:28:20.240
Let's give it a try.

00:28:20.560 --> 00:28:24.520
So I think we're going to do an open session live.

00:28:24.520 --> 00:28:28.180
The next Python Bytes is coming to you live from PyCon.

00:28:28.180 --> 00:28:29.620
It probably won't be streamed live.

00:28:29.620 --> 00:28:30.600
Maybe we'll stream it live.

00:28:30.600 --> 00:28:32.500
I don't know if we can get the audio to work for that.

00:28:32.580 --> 00:28:39.060
But we'll do what we can to do a live Python Bytes and then make that the show for next week.

00:28:39.060 --> 00:28:42.380
So if people want to get notified, they want to make sure they don't miss the time.

00:28:42.380 --> 00:28:45.640
Because it's an open session, we can't pre-schedule it.

00:28:45.640 --> 00:28:46.060
Right?

00:28:46.060 --> 00:28:49.640
We have to go find a slot on that wall there.

00:28:49.640 --> 00:28:54.660
So if people just go to pythonbytes.fm at the top menu bar, clip friends of the show and sign up there,

00:28:54.660 --> 00:28:58.940
then I'll send out an email once we have that time figured out that day.

00:28:58.940 --> 00:29:01.200
I'm thinking Saturday would probably be best.

00:29:01.200 --> 00:29:01.860
Yeah, I think so.

00:29:01.860 --> 00:29:02.160
Yeah.

00:29:02.160 --> 00:29:02.420
Okay.

00:29:02.980 --> 00:29:05.180
So sometime on Saturday if we can pull that off.

00:29:05.180 --> 00:29:06.340
So that would be awesome.

00:29:06.340 --> 00:29:08.740
Hopefully as many people can come to that.

00:29:08.740 --> 00:29:09.200
That'd be fun.

00:29:09.200 --> 00:29:11.080
See how the sausage is made.

00:29:11.080 --> 00:29:15.200
Also, I'm just in a couple days leaving for Seattle.

00:29:15.200 --> 00:29:16.820
I'm going to be at Microsoft Build.

00:29:16.820 --> 00:29:17.360
So neat.

00:29:17.360 --> 00:29:18.460
Yeah, that'll be really interesting.

00:29:18.460 --> 00:29:21.780
Hang out with some of the Python folks there.

00:29:21.780 --> 00:29:25.800
If you're at Microsoft Build and you want to come say hi, just shoot me a message on Twitter or something.

00:29:25.800 --> 00:29:27.940
And if we're there together, that'd be great.

00:29:27.940 --> 00:29:31.840
PyGotham, the New York City PyCon, effectively.

00:29:32.060 --> 00:29:34.160
has just opened their call for proposals.

00:29:34.160 --> 00:29:42.020
And PyCon DE, which is held in Karlsruhe, Germany, which is a wonderful part of Germany, very beautiful,

00:29:42.020 --> 00:29:46.920
is also just opening their call for proposals as well.

00:29:47.020 --> 00:29:51.000
And that's running 24th to 26th in October in Germany.

00:29:51.000 --> 00:29:52.920
So a lot of conference stuff.

00:29:52.920 --> 00:29:54.060
It's like conference time.

00:29:54.060 --> 00:29:54.440
Yeah.

00:29:54.440 --> 00:29:54.820
Yeah.

00:29:54.820 --> 00:29:55.780
We have Google I.O.

00:29:55.780 --> 00:29:58.900
We have Microsoft Build and we have PyCon all next week.

00:29:58.900 --> 00:30:01.520
It's like they're fighting for attention.

00:30:02.340 --> 00:30:02.700
Yeah.

00:30:02.700 --> 00:30:04.160
Awesome.

00:30:04.160 --> 00:30:04.500
All right.

00:30:04.500 --> 00:30:05.440
Well, anything else, Brian?

00:30:05.440 --> 00:30:06.520
Have we covered it all?

00:30:06.520 --> 00:30:07.340
Yeah, I think we did.

00:30:07.340 --> 00:30:07.720
All right.

00:30:07.720 --> 00:30:08.220
Well, wonderful.

00:30:08.220 --> 00:30:10.680
Well, I'm looking forward to seeing you at PyCon.

00:30:10.680 --> 00:30:11.140
That'll be fun.

00:30:11.140 --> 00:30:12.260
Yeah, it'll definitely be fun.

00:30:12.260 --> 00:30:12.820
Thanks.

00:30:12.820 --> 00:30:13.080
Yeah.

00:30:13.080 --> 00:30:13.920
All the listeners.

00:30:13.920 --> 00:30:14.160
Yep.

00:30:14.160 --> 00:30:14.560
Talk to you later.

00:30:14.560 --> 00:30:17.180
Thank you for listening to Python Bytes.

00:30:17.180 --> 00:30:19.740
Follow the show on Twitter via at Python Bytes.

00:30:19.740 --> 00:30:22.620
That's Python Bytes as in B-Y-T-E-S.

00:30:22.620 --> 00:30:26.040
And get the full show notes at pythonbytes.fm.

00:30:26.040 --> 00:30:30.400
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:30:30.400 --> 00:30:33.100
We're always on the lookout for sharing something cool.

00:30:33.100 --> 00:30:36.480
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:30:36.480 --> 00:30:40.100
Thank you for listening and sharing this podcast with your friends and colleagues.

