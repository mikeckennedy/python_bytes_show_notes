
00:00:00.000 --> 00:00:06.900
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 76


00:00:06.900 --> 00:00:12.960
Recorded May 3rd 2018. I'm Michael Kennedy and I'm Brian Okken and this episode is brought to you by Datadog


00:00:12.960 --> 00:00:18.400
Check them out at pythonbytes.fm/datadog. They're doing awesome stuff. Tell you more about that later, Brian


00:00:18.400 --> 00:00:25.120
I think you know, we're on the eve of PyCon. We're literally in terms of podcast releasing podcast episodes


00:00:25.120 --> 00:00:27.680
This is PyCon eve and PyCon is a place


00:00:28.320 --> 00:00:32.400
where people seem to really care more than most developer communities about


00:00:32.400 --> 00:00:36.800
sort of welcoming newcomers. And you've got something that kind of ties into that,


00:00:36.800 --> 00:00:41.520
that angle as well, right? I ran across this article, and it looks like it was a, it's called


00:00:41.520 --> 00:00:49.200
unlearning toxic behaviors in a code review culture. And this is, apparently, this came


00:00:49.200 --> 00:00:55.760
from a talk at AlterConf, and then turned into this. So there's the slides are available. But


00:00:55.760 --> 00:01:00.160
this there's an article with all of the information and this is something that


00:01:00.160 --> 00:01:06.560
trying to have good manners and be a good human while also helping each other


00:01:06.560 --> 00:01:11.320
out in code reviews is sort of an interesting balancing act because you've


00:01:11.320 --> 00:01:15.320
you've got to actually teach people and if you need to teach and everything so


00:01:15.320 --> 00:01:19.960
anyway I'm going to jump into some of the ideas around this and it's an


00:01:19.960 --> 00:01:24.640
interesting idea to go off is a discussion of some of the unhelpful


00:01:24.640 --> 00:01:29.720
behaviors that people have seen and then some of the helpful things you can do.


00:01:29.720 --> 00:01:32.800
So one of the, I'm not going to list all of them, but there's a few of them that


00:01:32.800 --> 00:01:38.400
jumped out at me, like passing off opinion as fact was the first one and


00:01:38.400 --> 00:01:43.000
you know as people saying, "Oh this should be implemented this way." But there isn't


00:01:43.000 --> 00:01:48.080
really a should often with software, those are opinions and so just make sure


00:01:48.080 --> 00:01:52.560
you state it like that. One of these things overwhelm, next up is


00:01:52.560 --> 00:01:58.240
overwhelming with an avalanche of comments. So like for example if somebody made the same mistake a


00:01:58.240 --> 00:02:04.160
whole bunch of times like I don't know there's spaces in the wrong place or some formatting issue


00:02:04.160 --> 00:02:10.480
or you know not using underscores and doing camel case instead commenting every place. I mean one


00:02:10.480 --> 00:02:15.440
comment is sufficient to don't put like yeah you did it here too yeah you did it here too yeah you


00:02:15.440 --> 00:02:20.560
did it here too all over the code review. And there's actually just reading through all of these


00:02:21.120 --> 00:02:27.680
they're good just reminders of how to be helpful instead of being hurtful during a code review.


00:02:27.680 --> 00:02:32.240
And then popped out some of the helpful things that one of the things that popped out at me is


00:02:32.240 --> 00:02:37.680
collaborate and don't backseat drive. And this is one actually that I need to work on,


00:02:37.680 --> 00:02:41.120
because it's hard when I see some code that I think should be another way.


00:02:41.120 --> 00:02:46.800
I don't really want to just tell everybody, tell somebody what's all wrong with it. My instinct is


00:02:46.800 --> 00:02:48.860
is to just do it the right way and show them,


00:02:48.860 --> 00:02:50.820
say, it should have been done like this.


00:02:50.820 --> 00:02:53.700
But that's not the right way to go.


00:02:53.700 --> 00:02:56.660
But anyway, you have any comments on some of this?


00:02:56.660 --> 00:02:58.300
- So one of the things I think


00:02:58.300 --> 00:02:59.820
that people need to be really careful about


00:02:59.820 --> 00:03:02.380
is when, in some of these code reviews,


00:03:02.380 --> 00:03:04.380
especially for junior developers,


00:03:04.380 --> 00:03:05.940
this can be like a really sort of


00:03:05.940 --> 00:03:07.820
sensitive time emotionally, right?


00:03:07.820 --> 00:03:10.380
You put together some work and like,


00:03:10.380 --> 00:03:12.100
it's one thing to criticize the code,


00:03:12.100 --> 00:03:13.900
but at the same time, it can come across


00:03:13.900 --> 00:03:16.060
as feeling like criticizing that person


00:03:16.060 --> 00:03:17.820
or their skill set.


00:03:17.820 --> 00:03:19.820
And when you're a junior developer,


00:03:19.820 --> 00:03:21.060
you're feeling is like,


00:03:21.060 --> 00:03:23.000
you maybe don't feel like you can keep up with your team


00:03:23.000 --> 00:03:24.700
because they've been doing it for 10 years


00:03:24.700 --> 00:03:25.940
and you've been doing it for two


00:03:25.940 --> 00:03:27.420
and you just feel a little bit


00:03:27.420 --> 00:03:28.820
like you're always trying to catch up, right?


00:03:28.820 --> 00:03:31.700
And so if somebody comes in just matter-of-factly says,


00:03:31.700 --> 00:03:34.740
we're gonna throw a bunch of comments on this stuff,


00:03:34.740 --> 00:03:36.860
you should do it the way I've been doing it for 10 years,


00:03:36.860 --> 00:03:37.700
et cetera, et cetera,


00:03:37.700 --> 00:03:39.460
like it can,


00:03:39.460 --> 00:03:42.300
I think it can be perceived as a personal attack


00:03:42.300 --> 00:03:45.060
or attack on your credibility in your newfound career.


00:03:45.060 --> 00:03:48.060
So I just think being real sensitive of that,


00:03:48.060 --> 00:03:50.460
especially for junior developers.


00:03:50.460 --> 00:03:52.180
I mean, I'm sure people who've been doing it


00:03:52.180 --> 00:03:53.780
for a long time feel that way as well.


00:03:53.780 --> 00:03:57.220
But the longer you do it, the thicker your skin gets,


00:03:57.220 --> 00:03:58.380
and you're just like, you know,


00:03:58.380 --> 00:04:01.780
the more you're kind of used to having these sort of debates


00:04:01.780 --> 00:04:03.820
and differences of opinion.


00:04:03.820 --> 00:04:06.340
But yeah, I would sort of second this and say,


00:04:06.340 --> 00:04:08.620
be cautious of the junior developers


00:04:08.620 --> 00:04:11.400
and make it more about learning and bringing them along


00:04:11.400 --> 00:04:12.780
instead of like, hey, I'm gonna show you how to do this


00:04:12.780 --> 00:04:13.620
'cause you did it wrong.


00:04:13.620 --> 00:04:17.360
It also depends a lot on personality because when I was a junior developer, I actually


00:04:17.360 --> 00:04:21.040
was more open for people saying, "Oh, this sucks.


00:04:21.040 --> 00:04:22.420
You should do it this way."


00:04:22.420 --> 00:04:27.000
And now that I think of myself as an experienced developer, there's still a lot of stuff that


00:04:27.000 --> 00:04:29.280
I'm learning in new parts.


00:04:29.280 --> 00:04:33.920
And I sometimes will take a comment of like, "Oh, you should do it this way," as like,


00:04:33.920 --> 00:04:35.040
"What are you talking about?


00:04:35.040 --> 00:04:37.840
I'm a senior developer," you know?


00:04:37.840 --> 00:04:40.280
But I got to check the ego a little bit.


00:04:40.280 --> 00:04:45.300
And one of the things that helped my team a lot, it shows up on this list too, is to


00:04:45.300 --> 00:04:47.160
automate what you can.


00:04:47.160 --> 00:04:52.200
Like for instance, we use, I mean, whatever your standard is, just define that and codify


00:04:52.200 --> 00:04:56.520
it with PyCode style or Flake 8 or something.


00:04:56.520 --> 00:04:59.280
Our team uses Flake 8, the Flake 8 defaults.


00:04:59.280 --> 00:05:06.320
We at work, it was helpful for us to increase the line length and a couple other things


00:05:06.320 --> 00:05:07.440
that we turned off.


00:05:07.440 --> 00:05:13.040
agree on that and just automate that and just so sometimes something will come through a code review and


00:05:13.040 --> 00:05:19.920
Just a simple comment of hey, can you run this through flake 8 first before we start the review is easier


00:05:19.920 --> 00:05:21.920
I totally agree with that because people


00:05:21.920 --> 00:05:26.680
You don't feel personally criticized by a computer. Yeah, right


00:05:26.680 --> 00:05:29.720
It's just like the algorithm it formats it this way and it


00:05:29.720 --> 00:05:34.680
Checks that the line length is this and the format is that and if it's wrong, then you fix it


00:05:34.680 --> 00:05:38.840
But it's not like it has an opinion about that.


00:05:38.840 --> 00:05:40.240
Not really, right?


00:05:40.240 --> 00:05:42.100
Maybe someday computers will have opinions like that,


00:05:42.100 --> 00:05:43.320
but they don't right now.


00:05:43.320 --> 00:05:46.300
And another thing, sort of adding on what you're saying is,


00:05:46.300 --> 00:05:48.400
with black, I believe, remember black,


00:05:48.400 --> 00:05:50.800
the formatter that comes in any color you want,


00:05:50.800 --> 00:05:51.680
as long as it's black?


00:05:51.680 --> 00:05:54.480
That one, I believe, will modify the code,


00:05:54.480 --> 00:05:56.820
not just suggest fixes.


00:05:56.820 --> 00:06:00.660
So you can say, black, reformat this the way we like it,


00:06:00.660 --> 00:06:01.500
and just do that.


00:06:01.500 --> 00:06:03.000
- I still haven't tried to hook that up


00:06:03.000 --> 00:06:05.000
as a commit hook or something like that.


00:06:05.000 --> 00:06:06.440
- Exactly, it'd be nice.


00:06:06.440 --> 00:06:07.360
I think it's pretty cool.


00:06:07.360 --> 00:06:10.040
Definitely worth thinking about these issues.


00:06:10.040 --> 00:06:13.000
So, Brian, do you remember a few episodes ago


00:06:13.000 --> 00:06:15.960
that project, that new versioning project


00:06:15.960 --> 00:06:20.120
that Mahmood Hashemi and a few of his friends put together


00:06:20.120 --> 00:06:21.800
about zero version?


00:06:21.800 --> 00:06:22.880
Was it zero-ver?


00:06:22.880 --> 00:06:23.720
What was it called?


00:06:23.720 --> 00:06:24.540
- I think it was zero-ver.


00:06:24.540 --> 00:06:25.400
- Yeah, I think it was zero-ver.


00:06:25.400 --> 00:06:29.480
So it was like sort of celebrating in a sarcastic


00:06:29.480 --> 00:06:32.240
poking fun at maybe you should not be zero version.


00:06:32.240 --> 00:06:36.160
the zero dot whatever version of things like Flask,


00:06:36.160 --> 00:06:38.400
Pandas, et cetera, right?


00:06:38.400 --> 00:06:39.880
Things that have been around for eight years


00:06:39.880 --> 00:06:41.640
and are super stable and are still like


00:06:41.640 --> 00:06:44.680
zero dot one for their version.


00:06:44.680 --> 00:06:49.200
Well, either that article or this episode,


00:06:49.200 --> 00:06:51.520
or that episode covering it somehow


00:06:51.520 --> 00:06:53.200
may have had some kind of effect


00:06:53.200 --> 00:06:54.720
because Flask had been on like


00:06:54.720 --> 00:06:58.560
zero dot something small for eight years


00:06:58.560 --> 00:07:00.760
and now Flask 1.0 is released.


00:07:00.760 --> 00:07:01.600
How about that?


00:07:01.600 --> 00:07:05.440
is a great thing. It was interesting that there were some people that like actually


00:07:05.440 --> 00:07:10.520
commented of like, why bother if it's already stable? I think it's a good, I think it absolutely


00:07:10.520 --> 00:07:14.520
makes sense. I mean, I know that there are people out there in the world who see it's


00:07:14.520 --> 00:07:18.080
been around for a long time. It's had many releases that means stable. If it's not stable,


00:07:18.080 --> 00:07:22.360
you put the little beta, little B on the end of the version or something like that. But


00:07:22.360 --> 00:07:27.480
there's a large portion of the development world that comes to Python from outside of


00:07:27.480 --> 00:07:31.560
the core ecosystem of Python and sees 0.1 and goes,


00:07:31.560 --> 00:07:34.040
can't use it, not ready, what is this, right?


00:07:34.040 --> 00:07:36.520
And so I think it really makes a lot of sense


00:07:36.520 --> 00:07:38.680
just changing the version because they got some pressure.


00:07:38.680 --> 00:07:39.720
There's actually a lot of stuff here.


00:07:39.720 --> 00:07:40.920
I'm gonna try to go through this quickly


00:07:40.920 --> 00:07:43.160
'cause there's actually a lot of stuff here.


00:07:43.160 --> 00:07:46.240
So the CLI is more flexible for creating


00:07:46.240 --> 00:07:49.040
(audio cuts out)


00:07:49.040 --> 00:07:51.000
and actually you can do things like,


00:07:51.000 --> 00:07:53.560
say it's in development mode or production mode


00:07:53.560 --> 00:07:55.660
and that can replace Flask debug settings


00:07:55.660 --> 00:07:56.640
in the environment, stuff like that.


00:07:56.640 --> 00:07:57.200
>> That's great.


00:07:57.200 --> 00:08:01.760
>> You can get the environment variables from a .flask env file.


00:08:01.760 --> 00:08:07.920
So instead of having to export them in your shell when you launch the shell,


00:08:07.920 --> 00:08:13.560
like zshrc or bashrc, things like that, you can have it just in these files.


00:08:13.560 --> 00:08:17.360
And it'll actually load them as if they're from the environment, that's cool.


00:08:17.360 --> 00:08:19.560
Development server is multi-threaded, so


00:08:19.560 --> 00:08:23.880
now you can more properly test concurrent requests during development,


00:08:23.880 --> 00:08:25.320
which is what you would experience


00:08:25.320 --> 00:08:26.880
if you were to release it to a proper


00:08:26.880 --> 00:08:29.400
threaded server like MicroWizKey.


00:08:29.400 --> 00:08:33.040
Flask.ext, which was deprecated, has been removed.


00:08:33.040 --> 00:08:34.940
Some stuff around forms is pretty nice.


00:08:34.940 --> 00:08:37.160
Better error handling, more finer grained stuff there,


00:08:37.160 --> 00:08:38.280
more logging.


00:08:38.280 --> 00:08:42.040
The stump for you, the test client gained a JSON argument


00:08:42.040 --> 00:08:45.400
for posting JSON and the response test object.


00:08:45.400 --> 00:08:47.480
A get JSON for decoding JSON,


00:08:47.480 --> 00:08:50.360
so you can have like test your JSON methods better.


00:08:50.360 --> 00:08:53.280
A test CLI runner for testing your app's


00:08:53.280 --> 00:08:55.000
command line options.


00:08:55.000 --> 00:08:55.840
Pretty cool, right?


00:08:55.840 --> 00:08:56.660
- Yeah, very cool.


00:08:56.660 --> 00:08:58.480
- So all of this stuff is in Flask 1.0.


00:08:58.480 --> 00:09:00.400
- Nice, actually that very much deserves


00:09:00.400 --> 00:09:01.320
a bump in the version.


00:09:01.320 --> 00:09:04.040
- Right, and it's time.


00:09:04.040 --> 00:09:05.020
It's definitely time.


00:09:05.020 --> 00:09:06.840
So well done Flask team.


00:09:06.840 --> 00:09:09.560
- Yeah, I'm just getting into some more Flask stuff too,


00:09:09.560 --> 00:09:10.400
so that's good.


00:09:10.400 --> 00:09:11.400
- Yeah, it's pretty fun.


00:09:11.400 --> 00:09:13.680
So have we gotten used to pip-inf?


00:09:13.680 --> 00:09:14.640
Like I'm not used to it.


00:09:14.640 --> 00:09:18.520
I literally yesterday typed pip install-r requirements.txt


00:09:18.520 --> 00:09:20.880
a lot because I was rebuilding some servers.


00:09:20.880 --> 00:09:21.720
How about you?


00:09:21.720 --> 00:09:22.540
- I understood it.


00:09:22.540 --> 00:09:28.220
really cool, but I had trouble really grokking what problem it was solving that I didn't


00:09:28.220 --> 00:09:29.700
have yet.


00:09:29.700 --> 00:09:37.420
So I ran across an article that's called "Pipenv, a guide to the new Python packaging tool."


00:09:37.420 --> 00:09:43.220
And so since everybody's like, actually not everybody, but it is being more recommended


00:09:43.220 --> 00:09:46.400
now to use Pipenv where appropriate.


00:09:46.400 --> 00:09:52.560
And so this article actually presented it in a way that I think it made it made me understand


00:09:52.560 --> 00:09:54.540
it a little bit a lot more.


00:09:54.540 --> 00:09:59.760
For instance, using pip and it's like using pip and virtual environments, but it does


00:09:59.760 --> 00:10:01.760
a lot of the stuff for you.


00:10:01.760 --> 00:10:07.320
There is some some workflow differences, but other I mean that that I'm not going to cover


00:10:07.320 --> 00:10:13.040
here, but the video there's a video up on the site that I think the pip and read me


00:10:13.040 --> 00:10:15.540
or the, I don't know, the documents.


00:10:15.540 --> 00:10:16.680
>> Like the GitHub page, yeah.


00:10:16.680 --> 00:10:18.240
>> Yeah. It has this little video,


00:10:18.240 --> 00:10:20.420
this is great. It shows you the workflow.


00:10:20.420 --> 00:10:22.120
But what problems does it solve?


00:10:22.120 --> 00:10:25.280
The requirements.txt has an issue,


00:10:25.280 --> 00:10:27.040
and this article talks about the current


00:10:27.040 --> 00:10:29.200
without pipenv what the problems are.


00:10:29.200 --> 00:10:32.320
Requirements.txt, you can set it up as just,


00:10:32.320 --> 00:10:35.760
these are the required packages that my application uses,


00:10:35.760 --> 00:10:37.720
but it doesn't really have versions.


00:10:37.720 --> 00:10:39.040
You can put versions in there,


00:10:39.040 --> 00:10:40.880
but your mileage may vary.


00:10:40.880 --> 00:10:44.120
Now, if your dependencies have dependencies themselves,


00:10:44.120 --> 00:10:48.760
then those versions, how do you keep track of those?


00:10:48.760 --> 00:10:52.060
One of the ways people have done that is use pip freeze,


00:10:52.060 --> 00:10:55.500
which does both your dependencies and all of


00:10:55.500 --> 00:10:57.860
the sub-dependencies and freezes all of those,


00:10:57.860 --> 00:11:00.200
and you can use that as your requirements file.


00:11:00.200 --> 00:11:03.000
But then, you've got to keep track of it.


00:11:03.000 --> 00:11:05.240
So every time one of the sub-dependencies updates,


00:11:05.240 --> 00:11:07.060
you've got to make sure it works,


00:11:07.060 --> 00:11:08.560
and that's just a pain.


00:11:08.560 --> 00:11:10.500
>> Yeah. I mean, the requirements is supposed to show you


00:11:10.500 --> 00:11:15.300
what you depend upon, not the transitive closure of what you depend upon, really.


00:11:15.300 --> 00:11:16.000
Right.


00:11:16.000 --> 00:11:17.400
Oh, math words.


00:11:17.400 --> 00:11:22.700
Not all, not your dependencies, dependencies, dependencies, dependencies.


00:11:22.700 --> 00:11:23.200
How's that?


00:11:23.200 --> 00:11:23.900
Okay.


00:11:23.900 --> 00:11:28.700
The gist of it is in file wise, the pip, there's two files that get generated,


00:11:28.700 --> 00:11:30.700
pip file and pip file dot lock.


00:11:30.700 --> 00:11:35.600
Pip file is the, these are my requirements kind of, but it also does more than that.


00:11:36.000 --> 00:11:41.880
Then pip file lock is like all of the pinned requirements with all the versions.


00:11:41.880 --> 00:11:45.940
It also includes hashes of the downloads so that you don't have to worry about


00:11:45.940 --> 00:11:48.780
corrupted installs or anything like that.


00:11:48.780 --> 00:11:50.320
Then it does so much more than that,


00:11:50.320 --> 00:11:54.440
but this discussion really helped me understand why this is useful,


00:11:54.440 --> 00:11:57.500
especially the sub-dependency thing is something,


00:11:57.500 --> 00:11:59.320
yeah, nobody wants to deal with that themselves.


00:11:59.320 --> 00:12:01.160
So let PIPM deal with it for you.


00:12:01.160 --> 00:12:03.000
>> Yeah, pretty cool. I got to study that.


00:12:03.000 --> 00:12:07.640
I got to get my workflow zen around this new way.


00:12:07.640 --> 00:12:11.960
>> One of the catches, which is that it's recommended for use for


00:12:11.960 --> 00:12:17.440
applications and not for packages because your package is used by something else.


00:12:17.440 --> 00:12:18.680
You don't want to pin anything.


00:12:18.680 --> 00:12:22.360
It's the application that should pin things, not packages themselves.


00:12:22.360 --> 00:12:26.600
But you can use it while you're developing packages.


00:12:26.600 --> 00:12:28.960
And if you're really confused on how to set all this up,


00:12:28.960 --> 00:12:30.360
there's a new cookie cutter for it.


00:12:30.360 --> 00:12:32.240
So we're also going to include a link.


00:12:32.240 --> 00:12:37.240
There's a package somebody did for a generic Python project


00:12:37.240 --> 00:12:41.200
that uses pipenv, there's cookie cutter for it.


00:12:41.200 --> 00:12:42.640
- Nice, so you basically, if you're gonna start


00:12:42.640 --> 00:12:44.600
a new project, you can run that cookie cutter


00:12:44.600 --> 00:12:46.800
to generate it with the proper structure


00:12:46.800 --> 00:12:49.240
using pipfile and pipfile.lock.


00:12:49.240 --> 00:12:51.520
- And it's kind of a fun way to just get your hand,


00:12:51.520 --> 00:12:54.800
like, okay, how's this all supposed to work?


00:12:54.800 --> 00:12:56.560
Even if you don't use this for a project,


00:12:56.560 --> 00:13:00.880
to pull down pipenv and in a project and play with it


00:13:00.880 --> 00:13:02.660
and say, "Oh yeah, this makes sense."


00:13:02.660 --> 00:13:03.700
- I think that's a really cool way.


00:13:03.700 --> 00:13:04.860
It kind of gives you the essence


00:13:04.860 --> 00:13:06.220
of what you need for the structure.


00:13:06.220 --> 00:13:08.140
Which is always something that's fun to debate


00:13:08.140 --> 00:13:09.300
and we have a few times.


00:13:09.300 --> 00:13:10.600
(laughing)


00:13:10.600 --> 00:13:12.320
So before we get to our next item,


00:13:12.320 --> 00:13:15.020
which is probably gonna surprise people a little bit


00:13:15.020 --> 00:13:16.260
if they haven't heard it,


00:13:16.260 --> 00:13:17.460
I want to tell you about Datadog.


00:13:17.460 --> 00:13:19.580
So Datadog is a monitoring solution


00:13:19.580 --> 00:13:23.100
that provides deep visibility and tracks issues


00:13:23.100 --> 00:13:24.300
that you might be running into


00:13:24.300 --> 00:13:25.660
with distributed applications.


00:13:25.660 --> 00:13:28.900
So if I have an app that has maybe some services,


00:13:28.900 --> 00:13:31.220
like microservices and it calls into the database


00:13:31.220 --> 00:13:33.160
and other things and it's slow,


00:13:33.160 --> 00:13:35.180
like that can be really hard to figure out where.


00:13:35.180 --> 00:13:37.740
But with Datadog, you can just investigate


00:13:37.740 --> 00:13:39.380
the bottlenecks in your code,


00:13:39.380 --> 00:13:40.900
explore graphs and dashboards,


00:13:40.900 --> 00:13:43.100
and really figure out where your app is spending


00:13:43.100 --> 00:13:45.460
its time across processes, right?


00:13:45.460 --> 00:13:47.300
So you're not just profiling one thing.


00:13:47.300 --> 00:13:49.900
So visualize your Python performance today,


00:13:49.900 --> 00:13:53.220
get started with a free trial, Datadog,


00:13:53.220 --> 00:13:54.940
and you'll get a cool shirt,


00:13:54.940 --> 00:13:58.540
well, a t-shirt with a Datadog mascot


00:13:58.540 --> 00:13:59.700
is the right word I'm looking for.


00:13:59.700 --> 00:14:01.400
A Datadog mascot on there.


00:14:01.400 --> 00:14:05.300
So check it out for yourself at pythonbytes.fm/datadog.


00:14:05.300 --> 00:14:08.860
So if you're gonna think of a company, Brian,


00:14:08.860 --> 00:14:13.100
that was going to create like one virtual machine,


00:14:13.100 --> 00:14:16.380
one runtime, in Python speak,


00:14:16.380 --> 00:14:19.220
the equivalent of interpreter, to rule them all,


00:14:19.220 --> 00:14:20.300
how about Oracle?


00:14:20.300 --> 00:14:22.620
- No, I wouldn't have thought Oracle.


00:14:22.620 --> 00:14:23.900
- No, I probably wouldn't either.


00:14:23.900 --> 00:14:28.900
So there's this thing called GraalVM, G-R-A-A-L, V-M,


00:14:28.900 --> 00:14:33.240
and it says this is built to run Python code


00:14:33.240 --> 00:14:35.620
and other code that depends on virtual machines


00:14:35.620 --> 00:14:37.040
and run it faster.


00:14:37.040 --> 00:14:39.780
So they said, look, we see this problem.


00:14:39.780 --> 00:14:41.940
Like current production virtual machines,


00:14:41.940 --> 00:14:45.060
and you know, threw CPython in there with that,


00:14:45.060 --> 00:14:48.740
provide high performance of only execution


00:14:48.740 --> 00:14:51.480
of only certain languages or a small set of languages.


00:14:51.480 --> 00:14:52.820
They all repeat a bunch of stuff.


00:14:52.820 --> 00:14:56.980
I'll do compilation, memory management, tooling, et cetera.


00:14:56.980 --> 00:14:59.060
So it kind of violates the don't repeat yourself,


00:14:59.060 --> 00:15:01.140
the DRY principle.


00:15:01.140 --> 00:15:03.260
They're heavyweight things usually


00:15:03.260 --> 00:15:04.380
that take a lot of memory,


00:15:04.380 --> 00:15:06.340
so they're often difficult to embed,


00:15:06.340 --> 00:15:08.640
especially like JVM, stuff like that.


00:15:08.640 --> 00:15:09.700
So over at Oracle Labs,


00:15:09.700 --> 00:15:12.160
they started a new project a while ago


00:15:12.160 --> 00:15:14.420
to create a single VM that would provide


00:15:14.420 --> 00:15:17.380
high-performance execution for all of the languages.


00:15:17.380 --> 00:15:19.820
Benefit being, if I have, say,


00:15:19.820 --> 00:15:22.780
some sort of multilingual environment,


00:15:22.780 --> 00:15:26.180
like maybe we do Java and Python or something like that.


00:15:26.180 --> 00:15:28.900
If you could put that within the same process


00:15:28.900 --> 00:15:30.940
and have them directly communicate,


00:15:30.940 --> 00:15:32.780
they would go dramatically faster


00:15:32.780 --> 00:15:35.080
than say over JSON-based microservice.


00:15:35.080 --> 00:15:36.820
Like if it was literally in memory.


00:15:36.820 --> 00:15:38.420
That's kind of the idea, right?


00:15:38.420 --> 00:15:43.420
So the goals are basically to create this high performance


00:15:43.420 --> 00:15:47.620
single VM that can interoperate with zero overhead


00:15:47.620 --> 00:15:49.500
across these different languages and platforms.


00:15:49.500 --> 00:15:51.620
So you can run all the JVM-based languages,


00:15:51.620 --> 00:15:55.740
Java, Catlin, and so on, JavaScript, including Node.js,


00:15:55.740 --> 00:15:58.100
anything that you can do LLVM against,


00:15:58.100 --> 00:16:01.900
so C++ or Rust, and Python.


00:16:01.900 --> 00:16:06.900
So imagine you're doing some sort of interop type of thing,


00:16:06.900 --> 00:16:10.540
and you want to write some of your code in Rust


00:16:10.540 --> 00:16:11.460
and some of it in Python,


00:16:11.460 --> 00:16:13.220
and you want to try to get the best performance out of it.


00:16:13.220 --> 00:16:16.060
Maybe putting it together in this thing


00:16:16.060 --> 00:16:17.380
would be pretty cool.


00:16:17.380 --> 00:16:21.340
So it does, I don't know how much it'll help for Python,


00:16:21.340 --> 00:16:23.700
in its current form, but maybe they'll get something


00:16:23.700 --> 00:16:27.140
really special, but for some of the JIT compiled languages,


00:16:27.140 --> 00:16:29.580
it will ahead of time compile them to machine instructions


00:16:29.580 --> 00:16:30.500
and then run them.


00:16:30.500 --> 00:16:32.900
So things like startup time and initial execution


00:16:32.900 --> 00:16:34.380
is super fast and predictable.


00:16:34.380 --> 00:16:38.180
So it would be cool if they could do like PiPi pre-compiled


00:16:38.180 --> 00:16:39.060
or something like that.


00:16:39.060 --> 00:16:41.880
- Just to make sure I get my terminology straight,


00:16:41.880 --> 00:16:45.260
the Grail VM, the VM is a virtual machine.


00:16:45.260 --> 00:16:49.740
I'm used to virtual machines being like an entire desktop,


00:16:49.740 --> 00:16:52.100
like on a server or something.


00:16:52.100 --> 00:16:53.020
Is that what this is?


00:16:53.020 --> 00:16:57.300
- No, often VMs are like the Java VM


00:16:57.300 --> 00:16:59.860
or the .NET CLR


00:16:59.860 --> 00:17:04.740
or things that are sort of managed memory process.


00:17:04.740 --> 00:17:07.700
- Okay, it's the thing between my code and my computer.


00:17:07.700 --> 00:17:10.220
- Yeah, and it is most commonly used


00:17:10.220 --> 00:17:12.620
around things that JIT compile.


00:17:12.620 --> 00:17:16.140
Java, JavaScript, .NET, things like that.


00:17:16.140 --> 00:17:17.940
- Okay, so two completely different things.


00:17:17.940 --> 00:17:18.780
- Two different VMs.


00:17:18.780 --> 00:17:20.260
- It's called virtual machines.


00:17:20.260 --> 00:17:21.260
Okay, got it.


00:17:21.260 --> 00:17:24.060
- Right now, the Python support is experimental,


00:17:24.060 --> 00:17:27.660
but they're working on, one of their main next steps


00:17:27.660 --> 00:17:29.860
is to make the support for Python better.


00:17:29.860 --> 00:17:32.020
So if this sounds interesting to people,


00:17:32.020 --> 00:17:33.500
I think, you know, it's early days,


00:17:33.500 --> 00:17:35.500
it's pretty interesting, and check it out.


00:17:35.500 --> 00:17:37.340
- Actually, I'm like super excited about it,


00:17:37.340 --> 00:17:40.900
because the combination of Python with C++ and Rust


00:17:40.900 --> 00:17:44.780
and R and other things, and Kotlin,


00:17:44.780 --> 00:17:47.180
it's gonna be, I think this is an exciting thing.


00:17:47.180 --> 00:17:48.340
- I think it is too, and there's,


00:17:48.340 --> 00:17:50.740
And if you can do that with no interop


00:17:50.740 --> 00:17:52.140
within the same process,


00:17:52.140 --> 00:17:55.680
without translating between the layers


00:17:55.680 --> 00:17:57.980
and some kind of like CFFI layer type of thing,


00:17:57.980 --> 00:17:58.980
I think that would be really cool.


00:17:58.980 --> 00:18:00.100
- Yeah, okay.


00:18:00.100 --> 00:18:00.940
- We'll see.


00:18:00.940 --> 00:18:04.780
It's early days, but it could be a pretty neat step


00:18:04.780 --> 00:18:07.780
in adding one more way to execute Python code.


00:18:07.780 --> 00:18:08.620
- Yeah, neat.


00:18:08.620 --> 00:18:09.700
- All right, what's your next one, Forrest?


00:18:09.700 --> 00:18:14.700
- I am like totally in getting ready for PyCon mode


00:18:15.180 --> 00:18:20.180
and didn't have time to do a testing code episode


00:18:20.180 --> 00:18:22.000
last week or this week.


00:18:22.000 --> 00:18:24.820
So this is a shameless time, I'm gonna take my last slot


00:18:24.820 --> 00:18:28.460
to do some testing related topics.


00:18:28.460 --> 00:18:30.840
But one of them's Flask, so we covered Flask already.


00:18:30.840 --> 00:18:31.680
There's a--


00:18:31.680 --> 00:18:33.020
- Yes, a brand new version, you can test it.


00:18:33.020 --> 00:18:35.980
- Yeah, there's an article that came out this week


00:18:35.980 --> 00:18:39.740
called "Testing a Flask Application Using pytest."


00:18:39.740 --> 00:18:43.660
And those are two of my favorite things, Flask and pytest.


00:18:43.660 --> 00:18:46.780
And one of the third favorite thing is my own book.


00:18:46.780 --> 00:18:50.500
And the book that I wrote was part of the inspiration


00:18:50.500 --> 00:18:52.660
for this article, so shameless plug.


00:18:52.660 --> 00:18:54.580
But it's a really nicely written article.


00:18:54.580 --> 00:18:58.700
It's basically, if you're working with Flask


00:18:58.700 --> 00:19:01.920
and you wanna try to work with pytest also,


00:19:01.920 --> 00:19:03.440
I mean, I've had questions about this,


00:19:03.440 --> 00:19:05.760
but I didn't feel qualified to answer yet.


00:19:05.760 --> 00:19:07.300
Now I am because of this article.


00:19:07.300 --> 00:19:10.100
But there's talks about both unit testing


00:19:10.100 --> 00:19:12.900
and functional testing through the test client


00:19:12.900 --> 00:19:18.340
Flask provides, but the unit tests don't have to be. You can access things directly. But the article


00:19:18.340 --> 00:19:24.180
goes through both a couple examples, a unit test and then a functional test, like for instance


00:19:24.180 --> 00:19:30.900
checking the, making sure that the new user works at a unit test level and how to hook that up with


00:19:30.900 --> 00:19:37.620
pytest and Flask and everything. And it's actually really nicely done. After you read the article,


00:19:37.620 --> 00:19:43.860
I don't stop there. I go out and look at the project that he's got on. I can't remember if it's on GitHub or


00:19:43.860 --> 00:19:50.740
GitLab, but it's an open source project that you can take a look and it's got other more testing examples


00:19:50.740 --> 00:19:55.940
And it's really well done. So good job. I like it. Yeah, it looks really really cool


00:19:55.940 --> 00:20:00.840
And I see the project structure there again, like here's how you set it up to do testing


00:20:00.840 --> 00:20:06.140
So that's very nice. And it's cool. Your book was inspiration for it as well. Another thing while we're on the testing topic


00:20:06.140 --> 00:20:11.260
I wanted to bring up a new pytest plugin that just actually kind of blew me away.


00:20:11.260 --> 00:20:12.860
This is a brilliant idea.


00:20:12.860 --> 00:20:16.220
So, and I also learned the word stochastic.


00:20:16.220 --> 00:20:21.020
I think I knew it at one point, but stochastic is kind of means random and stuff,


00:20:21.020 --> 00:20:26.260
but it comes up because it's in the, in the readme for this project called


00:20:26.260 --> 00:20:30.420
pytest-CAPRNG.


00:20:30.420 --> 00:20:35.820
So the, here's the idea is if you've used random, the random module or


00:20:35.820 --> 00:20:41.420
the NumPy random is being used in your code or in your test.


00:20:41.420 --> 00:20:44.460
Running a test-- if you run a test and it fails,


00:20:44.460 --> 00:20:46.380
and you try to rerun it and it passes,


00:20:46.380 --> 00:20:48.900
it might pass because the data is different.


00:20:48.900 --> 00:20:53.260
This new plugin, what it does is before you run each test,


00:20:53.260 --> 00:20:56.140
it captures the state of the random modules


00:20:56.140 --> 00:20:58.680
so that the seeds are the same.


00:20:58.680 --> 00:21:01.100
Next time you run it, if you rerun the failure,


00:21:01.100 --> 00:21:03.220
you'll get the same data again.


00:21:03.220 --> 00:21:05.260
So you'll see the failure again.


00:21:05.260 --> 00:21:08.880
And it's just kind of a small little plugin


00:21:08.880 --> 00:21:11.400
that is an awesome idea, so I wanted to highlight it.


00:21:11.400 --> 00:21:12.240
It's cool.


00:21:12.240 --> 00:21:13.060
- Yeah, it's cool.


00:21:13.060 --> 00:21:15.280
I mean, coverage might change based on that value.


00:21:15.280 --> 00:21:17.960
Success or failure might change based on that value.


00:21:17.960 --> 00:21:20.840
So being able to lock it down, make it predictable.


00:21:20.840 --> 00:21:21.680
- Yeah.


00:21:21.680 --> 00:21:22.680
- But still have it start from something random,


00:21:22.680 --> 00:21:23.520
that's pretty cool.


00:21:23.520 --> 00:21:24.340
I like it.


00:21:24.340 --> 00:21:26.000
All right, I did say we were on the eve,


00:21:26.000 --> 00:21:27.960
on PyCon eve, right?


00:21:27.960 --> 00:21:31.240
So the next time we release an episode


00:21:31.240 --> 00:21:32.920
is going to be at,


00:21:32.920 --> 00:21:34.400
well, at least it will have been recorded at PyCon.


00:21:34.400 --> 00:21:36.000
We'll see if it happens there.


00:21:36.000 --> 00:21:39.160
Anyway, there's a really nice article by Trey Hunter.


00:21:39.160 --> 00:21:42.560
He was a guest co-host a while ago


00:21:42.560 --> 00:21:45.360
on how to have a great first PyCon.


00:21:45.360 --> 00:21:48.260
So PyCon is maybe the big,


00:21:48.260 --> 00:21:50.720
I think it's the US one is the biggest


00:21:50.720 --> 00:21:52.580
Python conference there is.


00:21:52.580 --> 00:21:54.580
It's certainly quite large.


00:21:54.580 --> 00:21:56.400
And there's a lot of options.


00:21:56.400 --> 00:21:58.280
It's a little bit of a paradox of choice there, right?


00:21:58.280 --> 00:21:59.960
I mean, did you have that experience when you were there,


00:21:59.960 --> 00:22:00.800
Brian?


00:22:00.800 --> 00:22:01.620
- Yeah, definitely.


00:22:01.620 --> 00:22:04.540
I'm really having that time, that experience again,


00:22:04.540 --> 00:22:05.600
looking at the schedule.


00:22:05.600 --> 00:22:06.580
I don't know what to go to.


00:22:06.580 --> 00:22:09.100
- I know, I'm gonna solve that by not going to anything.


00:22:09.100 --> 00:22:11.220
(laughing)


00:22:11.220 --> 00:22:12.760
Which is part of this conversation.


00:22:12.760 --> 00:22:17.180
So, he has a really nice, long, thoughtful write-up


00:22:17.180 --> 00:22:19.380
about sort of getting the most out of PyCon.


00:22:19.380 --> 00:22:21.940
The first time, maybe if you've gone a few times,


00:22:21.940 --> 00:22:24.440
you can still read this and get something out of it.


00:22:24.440 --> 00:22:27.580
So, first of all, he mentions that the talks


00:22:27.580 --> 00:22:31.500
are typically recorded, available on YouTube within,


00:22:31.500 --> 00:22:33.220
I don't know, 24 hours, something like that,


00:22:33.220 --> 00:22:35.240
really surprisingly quickly.


00:22:35.240 --> 00:22:39.200
So you don't feel like you have to attend every talk, right?


00:22:39.200 --> 00:22:42.200
If there's something more interesting going on,


00:22:42.200 --> 00:22:44.400
don't feel like you're missing out, you just watch it later.


00:22:44.400 --> 00:22:46.880
I think one of my number one recommendations,


00:22:46.880 --> 00:22:48.840
which he touches on, is open spaces.


00:22:48.840 --> 00:22:50.800
- Yeah, that's actually something I didn't know about


00:22:50.800 --> 00:22:54.840
last year that I missed out on, so that's a good thing to,


00:22:54.840 --> 00:22:55.960
what are open spaces?


00:22:55.960 --> 00:22:58.600
- There's a big board, and there's a bunch of rooms,


00:22:58.600 --> 00:23:01.200
and the rooms will hold like 20 to 50 people,


00:23:01.200 --> 00:23:03.840
And there's probably five to 10 of them.


00:23:03.840 --> 00:23:06.000
I'm not sure exactly how many are available.


00:23:06.000 --> 00:23:10.240
And there's parts of the conference where you can just--


00:23:10.240 --> 00:23:12.920
anybody who wants to have a group conversation


00:23:12.920 --> 00:23:17.040
about something, they fill out a little three by five inch


00:23:17.040 --> 00:23:20.080
note, little card, and stick it up on the board


00:23:20.080 --> 00:23:22.400
and claim an hour in a room.


00:23:22.400 --> 00:23:24.060
And then people just go and attend it


00:23:24.060 --> 00:23:25.320
like they would any other talk.


00:23:25.320 --> 00:23:27.320
But it's much more high participation,


00:23:27.320 --> 00:23:29.520
because there's not a proper speaker.


00:23:29.520 --> 00:23:32.340
You just have to basically kick off the conversation


00:23:32.340 --> 00:23:34.480
and then it's just like a group conversation.


00:23:34.480 --> 00:23:36.680
- I think that's awesome because that's kind of


00:23:36.680 --> 00:23:38.440
what you go to PyCon for anyway,


00:23:38.440 --> 00:23:41.960
is to meet with people that have similar interests.


00:23:41.960 --> 00:23:45.440
Not just Python as a whole, but specifically.


00:23:45.440 --> 00:23:48.880
What specific parts of Python that you're interested in?


00:23:48.880 --> 00:23:51.600
- Right, you might have like an IoT open space


00:23:51.600 --> 00:23:54.160
for people working with MicroPython.


00:23:54.160 --> 00:23:55.000
Who knows, right?


00:23:55.000 --> 00:23:58.080
That would be easily something you could put together.


00:23:58.080 --> 00:24:00.540
The other thing is, all the talks are recorded,


00:24:00.540 --> 00:24:02.760
almost none of the open spaces are recorded.


00:24:02.760 --> 00:24:04.160
So you can't make those up.


00:24:04.160 --> 00:24:06.600
So that's one thing I really like to do.


00:24:06.600 --> 00:24:07.880
And Trey goes into that a little bit.


00:24:07.880 --> 00:24:09.240
He says they're often more niche


00:24:09.240 --> 00:24:12.880
and maybe something you're really focused on.


00:24:12.880 --> 00:24:15.440
It's all about interaction and discussion


00:24:15.440 --> 00:24:16.360
and they're not recorded.


00:24:16.360 --> 00:24:18.560
So he pretty much has the same thoughts I do.


00:24:18.560 --> 00:24:20.560
He has some tips for conversation


00:24:20.560 --> 00:24:22.040
around breakfast, lunch, dinner.


00:24:22.040 --> 00:24:23.320
Talks about the hallway track.


00:24:23.320 --> 00:24:24.920
I'm a big fan of the hallway track,


00:24:24.920 --> 00:24:28.400
partly because the sessions are recorded,


00:24:28.400 --> 00:24:30.900
and partly the reason I go there is to meet people


00:24:30.900 --> 00:24:33.340
and to make connections and to have these interactions


00:24:33.340 --> 00:24:36.880
that I don't have outside of that space, right?


00:24:36.880 --> 00:24:39.860
So I find almost always I'm having a great conversation


00:24:39.860 --> 00:24:42.240
with somebody and then I go, oh, the session's starting.


00:24:42.240 --> 00:24:43.820
And they're like, you know what, forget the session.


00:24:43.820 --> 00:24:44.700
I'll watch it on YouTube.


00:24:44.700 --> 00:24:46.720
Let's keep going on whatever it is we're doing


00:24:46.720 --> 00:24:47.640
'cause this is awesome, right?


00:24:47.640 --> 00:24:49.820
And I find I spend the whole conference that way.


00:24:49.820 --> 00:24:52.760
- Yeah, it would be lame if nobody went to the talks, though.


00:24:52.760 --> 00:24:53.600
- No, I know.


00:24:53.600 --> 00:24:55.200
- I'm gonna go to your talk, by the way.


00:24:55.200 --> 00:24:57.120
(laughing)


00:24:57.120 --> 00:24:57.960
- Okay.


00:24:57.960 --> 00:25:00.160
- I guess more I'm saying, you're right,


00:25:00.160 --> 00:25:02.360
not everybody should just skip them all the time,


00:25:02.360 --> 00:25:03.560
'cause then what would it be?


00:25:03.560 --> 00:25:05.520
It wouldn't really be the same.


00:25:05.520 --> 00:25:06.840
- Don't feel bad about it, yeah.


00:25:06.840 --> 00:25:10.480
- Yeah, you don't have to skip every one of them.


00:25:10.480 --> 00:25:12.720
If you will find yourself in a really interesting situation


00:25:12.720 --> 00:25:14.840
that you're enjoying, just 'cause it's time to go


00:25:14.840 --> 00:25:17.060
to the talks doesn't mean you have to go to the talks.


00:25:17.060 --> 00:25:18.960
The other thing that I thought was interesting about this


00:25:18.960 --> 00:25:23.360
was this conversation, this concept of a Pac-Man


00:25:23.360 --> 00:25:24.480
opening in a group.


00:25:24.480 --> 00:25:25.320
- Yeah, I love that.


00:25:25.320 --> 00:25:26.560
- Yeah, so the idea is like, you know,


00:25:26.560 --> 00:25:28.480
think of Pac-Man, it's got the little open spot.


00:25:28.480 --> 00:25:29.620
If you're in a group standing around,


00:25:29.620 --> 00:25:31.340
don't just like create a closed circle


00:25:31.340 --> 00:25:32.960
'cause nobody can join or anything.


00:25:32.960 --> 00:25:35.700
So always leave a little gap that says,


00:25:35.700 --> 00:25:37.420
you know, look for people or look for groups


00:25:37.420 --> 00:25:39.120
that have Pac-Man openings and make sure


00:25:39.120 --> 00:25:41.320
that your group always has a Pac-Man opening.


00:25:41.320 --> 00:25:42.440
So that's pretty cool.


00:25:42.440 --> 00:25:46.600
Some advice for interacting online during PyCon,


00:25:46.600 --> 00:25:48.100
how to make the most out of networking


00:25:48.100 --> 00:25:51.160
and it's not really a bad thing, things like that.


00:25:51.160 --> 00:25:53.840
And also volunteering, there's lightning talks.


00:25:53.840 --> 00:25:55.040
Have you given a lightning talk, Brian?


00:25:55.040 --> 00:25:56.280
>>Not at PyCon.


00:25:56.280 --> 00:25:57.480
>>Yeah, neither have I.


00:25:57.480 --> 00:25:59.720
Yeah, it's just some general nice things.


00:25:59.720 --> 00:26:01.440
And then finally, one I thought was interesting,


00:26:01.440 --> 00:26:04.080
there was a person who commented on the post saying,


00:26:04.080 --> 00:26:06.600
"If you're on Windows, it's helpful to install


00:26:06.600 --> 00:26:08.480
"a virtual machine image of Linux,


00:26:08.480 --> 00:26:10.600
"like the current Ubuntu on your laptop,


00:26:10.600 --> 00:26:12.380
"'cause you might run into a situation,


00:26:12.380 --> 00:26:15.320
"a talk or a training where something they're talking about


00:26:15.320 --> 00:26:18.000
"doesn't work on Windows, and you might miss out."


00:26:18.000 --> 00:26:20.920
That's both an opportunity for us to make


00:26:20.920 --> 00:26:23.900
the Windows experience better, but also maybe good advice


00:26:23.900 --> 00:26:25.080
for the first person, you know,


00:26:25.080 --> 00:26:27.360
coming in with your Surface tablet.


00:26:27.360 --> 00:26:29.360
You might wanna come prepared, I guess.


00:26:29.360 --> 00:26:31.320
Or install Anaconda, something like that.


00:26:31.320 --> 00:26:33.440
- Yeah, so one of the things I wanted to bring up


00:26:33.440 --> 00:26:35.840
that I didn't know about ahead of time is


00:26:35.840 --> 00:26:40.200
there's certain sections of the day that is recommended


00:26:40.200 --> 00:26:42.520
that there isn't, or there aren't any talks scheduled,


00:26:42.520 --> 00:26:44.640
but what is the other floor called?


00:26:44.640 --> 00:26:46.840
The place where we're at, the conference hall or the--


00:26:46.840 --> 00:26:48.520
- The expo hall. - The expo hall.


00:26:48.520 --> 00:26:51.640
But the expo hall is pretty much open all the time.


00:26:51.640 --> 00:26:54.400
So during a talk, if there's somebody that you


00:26:54.400 --> 00:26:57.560
wanted to meet up, meet, or a company you wanted to talk to


00:26:57.560 --> 00:26:59.760
or something, that you can't get to 'em


00:26:59.760 --> 00:27:02.940
because there's so many people during the normal expo times,


00:27:02.940 --> 00:27:06.000
skipping one of the talks and going during a talk time,


00:27:06.000 --> 00:27:07.840
there's way less people in the expo hall


00:27:07.840 --> 00:27:09.720
and you might be able to catch up with somebody


00:27:09.720 --> 00:27:10.560
a lot easier.


00:27:10.560 --> 00:27:12.720
- That's great advice, yeah, definitely.


00:27:12.720 --> 00:27:16.320
So I think that leads us really well into our own news.


00:27:16.320 --> 00:27:17.160
What do you think, Brian?


00:27:17.160 --> 00:27:18.740
- Yeah, so you brought up my talk.


00:27:18.740 --> 00:27:22.500
I do have a talk Friday, and I actually forgot the time.


00:27:22.500 --> 00:27:23.660
It's at five something.


00:27:23.660 --> 00:27:26.980
- It's to do with testing, and you're giving that


00:27:26.980 --> 00:27:28.980
co-presenting with Paul Everett, right?


00:27:28.980 --> 00:27:31.260
- Yeah, Paul Everett and I are going to,


00:27:31.260 --> 00:27:34.980
so I love pytest, of course, but I also have,


00:27:34.980 --> 00:27:37.940
in this last year, fallen in love with PyCharm,


00:27:37.940 --> 00:27:40.000
so we're going to do them together.


00:27:40.000 --> 00:27:43.600
We're gonna show you how to be efficient and effective,


00:27:43.600 --> 00:27:45.760
and speed up your test and development time


00:27:45.760 --> 00:27:47.680
with PyCharm and pytest, it'll be fun.


00:27:47.680 --> 00:27:49.320
- Your chocolates and my peanut butter.


00:27:49.320 --> 00:27:51.280
- Yeah. (laughs)


00:27:51.280 --> 00:27:52.360
- That is awesome.


00:27:52.360 --> 00:27:56.000
And we have a booth, you and I and a few others


00:27:56.000 --> 00:27:57.840
have a booth, I forgot the number,


00:27:57.840 --> 00:28:00.560
but you'll find us, it's pretty easy, right?


00:28:00.560 --> 00:28:01.400
- Yeah.


00:28:01.400 --> 00:28:02.220
- And we have stickers.


00:28:02.220 --> 00:28:03.360
- Yeah, I just got my stickers this morning,


00:28:03.360 --> 00:28:05.280
so yeah, I'll be ready.


00:28:05.280 --> 00:28:06.720
- Yeah, it's gonna be a lot of fun.


00:28:06.720 --> 00:28:08.180
I'm really looking forward to meeting people,


00:28:08.180 --> 00:28:10.320
so I hope everyone comes and says hello.


00:28:10.320 --> 00:28:11.160
- Yeah.


00:28:11.160 --> 00:28:11.980
- That should be awesome.


00:28:11.980 --> 00:28:15.440
And then, another thing, we talked about the open session.


00:28:15.440 --> 00:28:18.120
Are we planning on doing a live Python Bytes recording?


00:28:18.120 --> 00:28:18.960
- Why not try?


00:28:18.960 --> 00:28:19.780
Let's do it, yeah.


00:28:19.780 --> 00:28:20.620
- Let's give it a try.


00:28:20.620 --> 00:28:23.940
So I think we're gonna do an open session,


00:28:23.940 --> 00:28:26.400
live, the next Python Bytes is coming to you


00:28:26.400 --> 00:28:28.320
live from PyCon.


00:28:28.320 --> 00:28:29.720
It probably won't be streamed live.


00:28:29.720 --> 00:28:30.700
Maybe we'll stream it live.


00:28:30.700 --> 00:28:32.580
I don't know if we can get the audio to work for that.


00:28:32.580 --> 00:28:36.840
But we'll do what we can to do a live Python Bytes


00:28:36.840 --> 00:28:39.160
and then make that the show for next week.


00:28:39.160 --> 00:28:40.900
So if people wanna get notified,


00:28:40.900 --> 00:28:42.480
they wanna make sure they don't miss the time


00:28:42.480 --> 00:28:44.460
'cause because it's an open session,


00:28:44.460 --> 00:28:46.140
We can't pre-schedule it, right?


00:28:46.140 --> 00:28:50.060
We have to go find a slot on that wall there.


00:28:50.060 --> 00:28:51.980
So people just go to Pythonbytes.fm


00:28:51.980 --> 00:28:54.040
at the top menu bar, click Friends of the Show,


00:28:54.040 --> 00:28:54.880
and sign up there.


00:28:54.880 --> 00:28:57.020
Then I'll send out an email


00:28:57.020 --> 00:28:59.080
once we have that time figured out that day.


00:28:59.080 --> 00:29:01.340
I'm thinking Saturday would probably be best.


00:29:01.340 --> 00:29:02.180
- Yeah, I think so.


00:29:02.180 --> 00:29:03.000
- Yeah, okay.


00:29:03.000 --> 00:29:05.380
So sometime on Saturday if we can pull that off.


00:29:05.380 --> 00:29:06.460
So that would be awesome.


00:29:06.460 --> 00:29:09.740
Hopefully as many people can come to that, that'd be fun.


00:29:09.740 --> 00:29:11.800
See how the sausage is made.


00:29:11.800 --> 00:29:15.400
Also, I'm just in a couple days leaving for Seattle.


00:29:15.400 --> 00:29:17.080
I'm gonna be at Microsoft Build.


00:29:17.080 --> 00:29:17.920
- How neat.


00:29:17.920 --> 00:29:19.520
- Yeah, that'll be really interesting.


00:29:19.520 --> 00:29:21.880
Hang out with some of the Python folks there.


00:29:21.880 --> 00:29:24.240
If you're at Microsoft Build and you wanna come say hi,


00:29:24.240 --> 00:29:25.960
just shoot me a message on Twitter or something


00:29:25.960 --> 00:29:28.760
and if we're there together, it'd be great.


00:29:28.760 --> 00:29:32.320
PyGotham, the New York City PyCon, effectively,


00:29:32.320 --> 00:29:34.960
has just opened their call for proposals.


00:29:34.960 --> 00:29:39.960
And PyCon DE, which is held in Karlsruhe, Germany,


00:29:40.040 --> 00:29:42.600
which is a wonderful part of Germany, very beautiful,


00:29:42.600 --> 00:29:47.040
is also just opening their call for proposals as well,


00:29:47.040 --> 00:29:51.160
and that's running 24th to 26th in October in Germany.


00:29:51.160 --> 00:29:53.000
So, a lot of conference stuff.


00:29:53.000 --> 00:29:54.280
It's like conference time.


00:29:54.280 --> 00:29:55.120
- Yeah.


00:29:55.120 --> 00:29:57.480
- Yeah, we have Google I/O, we have Microsoft Build,


00:29:57.480 --> 00:29:59.760
and we have PyCon all next week.


00:29:59.760 --> 00:30:02.560
It's like they're fighting for attention.


00:30:02.560 --> 00:30:03.920
- Yeah.


00:30:03.920 --> 00:30:05.560
- Awesome, all right, well, anything else, Brian?


00:30:05.560 --> 00:30:06.640
Have we covered it all?


00:30:06.640 --> 00:30:07.480
- Yeah, I think we did.


00:30:07.480 --> 00:30:08.680
- All right, well, wonderful.


00:30:08.680 --> 00:30:11.280
Well I'm looking forward to seeing you at PyCon, that'll be fun.


00:30:11.280 --> 00:30:12.280
Yeah, it'll definitely be fun.


00:30:12.280 --> 00:30:13.280
Thanks.


00:30:13.280 --> 00:30:15.720
Yeah, and all the listeners, yep, talk to you later.


00:30:15.720 --> 00:30:17.560
Thank you for listening to Python Bytes.


00:30:17.560 --> 00:30:23.200
Follow the show on Twitter via @PythonBytes, that's Python Bytes as in B-Y-T-E-S.


00:30:23.200 --> 00:30:26.480
And get the full show notes at PythonBytes.fm.


00:30:26.480 --> 00:30:30.160
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:30:30.160 --> 00:30:31.160
way.


00:30:31.160 --> 00:30:33.680
We're always on the lookout for sharing something cool.


00:30:33.680 --> 00:30:37.160
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:30:37.160 --> 00:30:40.200
Thank you for listening and sharing this podcast with your friends and colleagues.

