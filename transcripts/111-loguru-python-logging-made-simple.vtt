
00:00:00.000 --> 00:00:05.960
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode


00:00:05.960 --> 00:00:09.120
111 recorded January 4th


00:00:09.120 --> 00:00:16.680
2019 I'm Michael Kennedy. I'm Brian. Okay. Hey Ryan. Can you believe it's 2019? Yeah, it's kind of hard to remember to say that


00:00:16.680 --> 00:00:18.480
Yeah, it's gonna take a while


00:00:18.480 --> 00:00:22.320
So before we get into the topics, I just want to say thank you to data dog


00:00:22.320 --> 00:00:27.240
They're sponsoring this episode check them out at Python by set of film slash data dog more about that later


00:00:28.120 --> 00:00:31.360
I never really enjoy the built-in logging in Python.


00:00:31.360 --> 00:00:34.800
It's never seemed like super, super clear to me.


00:00:34.800 --> 00:00:36.840
So I've ended up using other packages,


00:00:36.840 --> 00:00:38.680
something like Logbook or something like that,


00:00:38.680 --> 00:00:40.040
or maybe just a print statement.


00:00:40.040 --> 00:00:44.080
But what you found today, Brian, is pretty sweet, actually.


00:00:44.080 --> 00:00:45.920
Might convince me to stop using Logbook


00:00:45.920 --> 00:00:46.760
and use something else.


00:00:46.760 --> 00:00:48.520
- You know, I was playing with this this morning.


00:00:48.520 --> 00:00:52.160
So what we're talking about is, I think it's LogGuru.


00:00:52.160 --> 00:00:54.760
I think that's how you pronounce it, L-O-G-U-R-U.


00:00:54.760 --> 00:00:57.480
- All right, like Log and Guru smushed together,


00:00:57.480 --> 00:01:03.240
joined by the G. Yeah, or it could be loggeroo. I don't think so. I'm going with loggeroo.


00:01:03.240 --> 00:01:09.840
And the tagline is Python logging made stupidly simple. And I think this is it's like a one


00:01:09.840 --> 00:01:14.800
API function for the most part. So the built in logging for Python, it does a lot. And


00:01:14.800 --> 00:01:20.760
you can have like multiple, multiple logging entry points and multiple logging output points


00:01:20.760 --> 00:01:21.840
and everything.


00:01:21.840 --> 00:01:26.000
And LogGuru kind of took the model of everything


00:01:26.000 --> 00:01:28.560
gets logged to all the places.


00:01:28.560 --> 00:01:31.280
And there's a default place that's standard error.


00:01:31.280 --> 00:01:33.960
And that's better than print mucking up


00:01:33.960 --> 00:01:35.640
your standard output.


00:01:35.640 --> 00:01:38.280
And by default, just a few lines of code,


00:01:38.280 --> 00:01:39.280
and it works just fine.


00:01:39.280 --> 00:01:42.880
You can just say, from LogGuru, import logger,


00:01:42.880 --> 00:01:46.320
and just use the logger and say, like, debug or info


00:01:46.320 --> 00:01:47.440
or whatever.


00:01:47.440 --> 00:01:49.840
But then if you want to do more advanced things,


00:01:49.840 --> 00:01:52.240
like one of the things I had to play with,


00:01:52.240 --> 00:01:54.120
because I couldn't believe it was this easy,


00:01:54.120 --> 00:01:58.120
was file logging and log rotation.


00:01:58.120 --> 00:02:00.360
Let's say you're logging some stuff and you want to be


00:02:00.360 --> 00:02:03.060
able to log it into a file,


00:02:03.060 --> 00:02:05.580
and then at some point,


00:02:05.580 --> 00:02:07.540
make that a new file,


00:02:07.540 --> 00:02:10.920
like a date stamped file or time stamped or something.


00:02:10.920 --> 00:02:13.600
It just has that really easy and then you can give it


00:02:13.600 --> 00:02:18.200
different options for if your file gets to 50 megabytes,


00:02:18.200 --> 00:02:20.040
at that point start a new file.


00:02:20.040 --> 00:02:21.540
And there's even like compression.


00:02:21.540 --> 00:02:23.940
So when you're rolling over to the new one,


00:02:23.940 --> 00:02:25.200
take the old one and zip it,


00:02:25.200 --> 00:02:28.340
or you can time it and just do it a new log every hour


00:02:28.340 --> 00:02:29.480
or a new log every day.


00:02:29.480 --> 00:02:30.980
- I love the zipping aspect.


00:02:30.980 --> 00:02:31.960
That's awesome.


00:02:31.960 --> 00:02:33.000
It just does that automatically,


00:02:33.000 --> 00:02:34.040
or do you have to tell it to?


00:02:34.040 --> 00:02:35.460
- You have to tell it to.


00:02:35.460 --> 00:02:37.560
It's a fairly simple, easy thing.


00:02:37.560 --> 00:02:39.880
And one of the bonuses of this package


00:02:39.880 --> 00:02:43.400
is the readme on GitHub is kind of a tour


00:02:43.400 --> 00:02:44.980
of all the features with examples.


00:02:44.980 --> 00:02:47.120
So it's really easy to pop through


00:02:47.120 --> 00:02:49.240
and see what's going on.


00:02:49.240 --> 00:02:52.200
I mean, I really spent like just a few minutes


00:02:52.200 --> 00:02:53.980
trying it out and I already love it.


00:02:53.980 --> 00:02:58.360
So I think of this as the logging API that fits in my brain


00:02:58.360 --> 00:03:01.000
and I can do things right off the bat.


00:03:01.000 --> 00:03:01.840
It's cool.


00:03:01.840 --> 00:03:02.680
- Yeah, that's super cool.


00:03:02.680 --> 00:03:04.680
Yeah, on one of my websites,


00:03:04.680 --> 00:03:06.960
I had like a bunch of logging happening


00:03:06.960 --> 00:03:08.320
and I went and checked it out,


00:03:08.320 --> 00:03:09.360
checked out the log directory


00:03:09.360 --> 00:03:12.080
and it was like five gigs of text files,


00:03:12.080 --> 00:03:13.680
but they compressed down to like 200 megs


00:03:13.680 --> 00:03:15.600
or something totally manageable.


00:03:15.600 --> 00:03:17.060
So that's pretty awesome.


00:03:17.060 --> 00:03:19.300
that you can have it kind of do that step for you


00:03:19.300 --> 00:03:20.480
in the background.


00:03:20.480 --> 00:03:22.860
Couple of things strike me really as nice here.


00:03:22.860 --> 00:03:25.020
One is the use of color.


00:03:25.020 --> 00:03:26.780
It'll print out like here's the time,


00:03:26.780 --> 00:03:30.240
here's the log level, like info or error or whatever,


00:03:30.240 --> 00:03:31.260
the message and so on.


00:03:31.260 --> 00:03:33.960
And it'll actually show those in different colors


00:03:33.960 --> 00:03:37.420
'cause by default it prints just two logs


00:03:37.420 --> 00:03:38.620
to the terminal, right?


00:03:38.620 --> 00:03:40.060
Standard out or something like that.


00:03:40.060 --> 00:03:41.380
- Yeah, and it looks really nice.


00:03:41.380 --> 00:03:42.540
So I tried it both on,


00:03:42.540 --> 00:03:44.380
just to make sure it was cross compatible


00:03:44.380 --> 00:03:45.220
and stuff like that.


00:03:45.220 --> 00:03:46.740
I tried it both on a Mac


00:03:46.740 --> 00:03:48.580
and on a Windows machine.


00:03:48.580 --> 00:03:52.020
And then I also tried it if I'm logging stuff from


00:03:52.020 --> 00:03:54.140
and running it within PyCharm, how does that look?


00:03:54.140 --> 00:03:56.820
And all of this looks really good still.


00:03:56.820 --> 00:03:57.660
- That's awesome.


00:03:57.660 --> 00:04:01.640
And it also has the ability to wrap functions


00:04:01.640 --> 00:04:03.460
and catch the unhandled errors.


00:04:03.460 --> 00:04:07.460
So the syntax is like logger.catchall or something.


00:04:07.460 --> 00:04:08.740
It's a decorator.


00:04:08.740 --> 00:04:11.500
If there's an error, it'll print a colorized,


00:04:11.500 --> 00:04:13.980
properly indented, formatted traceback.


00:04:13.980 --> 00:04:16.540
- Yeah, and then it has some traceback options too.


00:04:16.540 --> 00:04:18.940
And the traceback options are even pretty cool.


00:04:18.940 --> 00:04:22.780
They blow it up into these little mini graph.


00:04:22.780 --> 00:04:25.940
And you can specify how deep, just the traceback


00:04:25.940 --> 00:04:27.820
for the function that they got hit,


00:04:27.820 --> 00:04:30.380
or its parent, or how many parents.


00:04:30.380 --> 00:04:31.220
It's pretty cool.


00:04:31.220 --> 00:04:34.420
One of the things I like about the honesty of here


00:04:34.420 --> 00:04:36.900
is the last feature is crossed out.


00:04:36.900 --> 00:04:39.600
The last feature says it's 10 times faster


00:04:39.600 --> 00:04:41.380
than built-in logging, and that's crossed out.


00:04:41.380 --> 00:04:44.820
Because clearly, adding all these features isn't free.


00:04:44.820 --> 00:04:47.620
it does cost a little bit of performance.


00:04:47.620 --> 00:04:50.300
But there are plans for some of these,


00:04:50.300 --> 00:04:52.500
some of the things to be critical functions


00:04:52.500 --> 00:04:54.660
to be implemented and see in the future.


00:04:54.660 --> 00:04:56.780
I think it's convenient right away.


00:04:56.780 --> 00:04:58.820
One of the things I was always interested about


00:04:58.820 --> 00:05:02.060
is to how to figure out how to get email notification


00:05:02.060 --> 00:05:06.300
in some cases, like in particular,


00:05:06.300 --> 00:05:10.260
if you had a critical log error in a critical something,


00:05:10.260 --> 00:05:13.140
sending off an email to the right person,


00:05:13.140 --> 00:05:15.380
I wouldn't know how to do that right off the bat,


00:05:15.380 --> 00:05:17.860
but this one apparently works cleanly


00:05:17.860 --> 00:05:21.500
with the notifiers library to be able to send email.


00:05:21.500 --> 00:05:23.340
- Oh yeah, notifiers is nice as well.


00:05:23.340 --> 00:05:24.860
I think we've covered it before.


00:05:24.860 --> 00:05:28.560
One other final thing here is you can actually put color


00:05:28.560 --> 00:05:30.060
into your statements as well.


00:05:30.060 --> 00:05:33.180
So if I wanna have, like they've got a little screencast-y


00:05:33.180 --> 00:05:36.460
GIF thing on the GitHub repo you can just watch.


00:05:36.460 --> 00:05:38.980
Like I said, there's several options available.


00:05:38.980 --> 00:05:41.500
If you want options to be blue, you put bracket blue,


00:05:41.500 --> 00:05:44.340
like HTML tags around it and it colorizes.


00:05:44.340 --> 00:05:46.260
So I think it's really nice for communicating


00:05:46.260 --> 00:05:47.100
back what's going on.


00:05:47.100 --> 00:05:49.140
- Yeah, I'm sure it does a lot of cool features.


00:05:49.140 --> 00:05:51.440
One of the things I like about the API is


00:05:51.440 --> 00:05:53.060
once you've figured out something,


00:05:53.060 --> 00:05:55.180
other people will be able to tell what you're doing


00:05:55.180 --> 00:05:57.260
because it's not confusing to read.


00:05:57.260 --> 00:05:58.660
- Yeah, it's very cool.


00:05:58.660 --> 00:06:01.100
This might be my new favorite logging library.


00:06:01.100 --> 00:06:02.700
Now I have to get over the inertia


00:06:02.700 --> 00:06:05.180
of actually having my other stuff already working


00:06:05.180 --> 00:06:06.100
and wanting to switch to it.


00:06:06.100 --> 00:06:07.300
That's gonna take a while, but this is cool.


00:06:07.300 --> 00:06:08.500
I like it, good find.


00:06:08.500 --> 00:06:13.500
So we had a pretty big episode back in July.


00:06:13.500 --> 00:06:17.260
We had Brett Cannon and Carol Willing on


00:06:17.260 --> 00:06:21.940
to talk about how Guido van Rossum had stepped down


00:06:21.940 --> 00:06:25.780
as the BDFL, the overseer of the Python project,


00:06:25.780 --> 00:06:27.060
still involved as a core developer,


00:06:27.060 --> 00:06:28.940
but not making all the decisions


00:06:28.940 --> 00:06:30.500
and taking all the weight, right?


00:06:30.500 --> 00:06:31.340
Remember that?


00:06:31.340 --> 00:06:32.160
- Yeah.


00:06:32.160 --> 00:06:34.660
- Well, things have more or less been on hold,


00:06:34.660 --> 00:06:38.100
stalled out, until they can somehow come up with


00:06:38.100 --> 00:06:41.580
a group of core developers can come up with a way to govern themselves.


00:06:41.580 --> 00:06:44.700
So for example, Lucas Lange was looking at


00:06:44.700 --> 00:06:49.780
maybe moving the releases of Python from every 18 months to yearly,


00:06:49.780 --> 00:06:51.780
which has a bunch of advantages,


00:06:51.780 --> 00:06:54.100
but that's a change that has to be decided on.


00:06:54.100 --> 00:06:55.740
They had no way to decide things.


00:06:55.740 --> 00:06:59.100
So all sorts of stuff like that had just been put on hold.


00:06:59.100 --> 00:07:04.100
Well, we've covered the different governance models that were being considered.


00:07:04.100 --> 00:07:10.300
The big news this week is Python now has decided that it has a new governance model and they


00:07:10.300 --> 00:07:12.540
have decided on which one it's going to be.


00:07:12.540 --> 00:07:13.540
Yes.


00:07:13.540 --> 00:07:14.540
It's a, yeah.


00:07:14.540 --> 00:07:16.860
Finally, finally things can start going.


00:07:16.860 --> 00:07:18.540
Now don't get too excited.


00:07:18.540 --> 00:07:19.540
Yeah.


00:07:19.540 --> 00:07:20.540
There's a lot of holes left.


00:07:20.540 --> 00:07:21.580
There are a lot of holes.


00:07:21.580 --> 00:07:25.100
So what has been decided is the governance model.


00:07:25.100 --> 00:07:31.300
They still need to decide how the new governance model actually drives Python the project itself.


00:07:31.300 --> 00:07:33.120
So there's like a two step process.


00:07:33.120 --> 00:07:34.320
how we're gonna make decisions,


00:07:34.320 --> 00:07:35.440
and then the first decision is


00:07:35.440 --> 00:07:39.360
how does that new organization manage Python?


00:07:39.360 --> 00:07:40.960
So we're like halfway there, all right?


00:07:40.960 --> 00:07:42.560
I think also there's still elections to be


00:07:42.560 --> 00:07:44.000
who's gonna be part of this thing.


00:07:44.000 --> 00:07:46.240
So let me give you the rundown by way of Brett Cannon.


00:07:46.240 --> 00:07:48.160
So Brett Cannon, also a core developer,


00:07:48.160 --> 00:07:50.080
has been on the show a couple times,


00:07:50.080 --> 00:07:51.920
and it's including the one that I mentioned.


00:07:51.920 --> 00:07:54.720
And so he did a really nice write-up


00:07:54.720 --> 00:07:56.960
of what was the problem, where have we been,


00:07:56.960 --> 00:07:59.440
what were the options, and how did they decide?


00:07:59.440 --> 00:08:01.680
So they had, we'd covered before, like we said,


00:08:01.680 --> 00:08:04.480
that there were seven governance proposals.


00:08:04.480 --> 00:08:08.320
One from like, we'll elect a new dictator, a new BDFL,


00:08:08.320 --> 00:08:11.200
maybe without the FL for life part,


00:08:11.200 --> 00:08:13.560
down to maybe we'll have like a panel


00:08:13.560 --> 00:08:15.000
or something like that.


00:08:15.000 --> 00:08:16.680
So there's some votes,


00:08:16.680 --> 00:08:19.440
the votes were open to all core developers,


00:08:19.440 --> 00:08:23.040
and they decided we're not gonna have other people vote


00:08:23.040 --> 00:08:24.320
who are not core developers,


00:08:24.320 --> 00:08:26.720
because this is about the core developers


00:08:26.720 --> 00:08:27.680
governing themselves,


00:08:27.680 --> 00:08:29.440
and why should other people decide


00:08:29.440 --> 00:08:31.480
how they get governed, basically, right?


00:08:31.480 --> 00:08:33.480
They don't have as much skin in the game.


00:08:33.480 --> 00:08:36.480
So people who are deciding their own fate voted.


00:08:36.480 --> 00:08:43.480
And in the end, the winning one was PEP 8016, which is called the Steering Council.


00:08:43.480 --> 00:08:49.480
So from now on, Python will be driven or controlled or led by a Steering Council,


00:08:49.480 --> 00:08:53.480
which is very similar to what Django's project organization actually looks like.


00:08:53.480 --> 00:09:00.480
Brett said even that some of the language of the PEP here was copied and pasted directly from Django.


00:09:00.480 --> 00:09:06.120
Yeah, so this is a council of five people who will determine how to run the Python project.


00:09:06.120 --> 00:09:12.840
So the only thing that they can't decide, they basically have an absolute power, this


00:09:12.840 --> 00:09:14.680
group of five developers.


00:09:14.680 --> 00:09:19.760
However, the one thing they cannot decide is how the council is elected.


00:09:19.760 --> 00:09:24.760
So they can't go, you know, this council thing in elections, we don't like them, we're going


00:09:24.760 --> 00:09:26.440
to get rid of those, right?


00:09:26.440 --> 00:09:30.200
Other than that, though, they basically have a BDFL like powers, right?


00:09:30.200 --> 00:09:34.520
good it means basically that Python will not project will not be leaderless but


00:09:34.520 --> 00:09:40.240
it doesn't directly solve how to get the design and things like do we change the


00:09:40.240 --> 00:09:45.080
release cycle and things like that cool right yeah right so now we got to figure


00:09:45.080 --> 00:09:48.520
out who the council is yeah so the next step is to elect the council that'll be


00:09:48.520 --> 00:09:54.360
done Monday so three three four days from now three days and that starts on


00:09:54.360 --> 00:09:59.880
Monday and then goes to January 20th and then somewhere around there we'll we'll


00:09:59.880 --> 00:10:04.520
know. Actually, no, that's nominations. The voting starts on Monday, January 21st. So


00:10:04.520 --> 00:10:08.280
sometime in February, we'll know who, which five people are on the steering council.


00:10:08.280 --> 00:10:13.000
- How do you feel about this? I think it's the right, well, not that nobody asked my opinion,


00:10:13.000 --> 00:10:14.520
but this seems reasonable to me.


00:10:14.520 --> 00:10:18.520
- Yeah, I agree. You have a mic. You get a, that's the power of the mic is you get to just


00:10:18.520 --> 00:10:19.400
state your opinion, right?


00:10:19.400 --> 00:10:20.520
- Yeah.


00:10:20.520 --> 00:10:27.880
- No, I think this is totally reasonable. I think there's a couple of things. I thought


00:10:27.880 --> 00:10:29.360
I thought it was really interesting the discussion


00:10:29.360 --> 00:10:32.000
between having an even or an odd number


00:10:32.000 --> 00:10:34.520
of people on the council, right?


00:10:34.520 --> 00:10:37.800
Because this way there's always going to be a majority


00:10:37.800 --> 00:10:39.800
that can never be a deadlock, all right?


00:10:39.800 --> 00:10:42.000
Whereas if they had been even,


00:10:42.000 --> 00:10:43.800
you could have to have like a,


00:10:43.800 --> 00:10:45.540
definitely win over a majority, right?


00:10:45.540 --> 00:10:47.760
If there were six instead of five,


00:10:47.760 --> 00:10:50.480
you always gotta get that little extra vote to go through.


00:10:50.480 --> 00:10:52.080
But yeah, I think it's, you know,


00:10:52.080 --> 00:10:53.760
this seems totally reasonable to me.


00:10:53.760 --> 00:10:55.360
I think there would have been a lot of value


00:10:55.360 --> 00:11:00.360
in finding the next BDFL without the FL part, right?


00:11:00.360 --> 00:11:02.560
The next leader, dictator type.


00:11:02.560 --> 00:11:05.520
I think that kind of might've been my favorite,


00:11:05.520 --> 00:11:10.000
but it's just such a risky proposition.


00:11:10.000 --> 00:11:11.960
Because on one hand, if you get the right person,


00:11:11.960 --> 00:11:14.400
they can just move quick and it could be awesome.


00:11:14.400 --> 00:11:16.560
But if you get somebody who doesn't take it


00:11:16.560 --> 00:11:17.640
in the right direction or a direction


00:11:17.640 --> 00:11:18.760
that you think is the wrong direction,


00:11:18.760 --> 00:11:20.840
like it could really go off the rails.


00:11:20.840 --> 00:11:24.520
So this certainly seems like a safe path forward


00:11:24.520 --> 00:11:27.560
And it's definitely more community driven than it has been in the past.


00:11:27.560 --> 00:11:29.760
Yeah, I don't know if this will slow down.


00:11:29.760 --> 00:11:34.160
So one of the things that Brett brought up is they still haven't figured out really how


00:11:34.160 --> 00:11:39.400
to guide the language itself for language design.


00:11:39.400 --> 00:11:42.600
And so yeah, it'll be interesting to watch how that.


00:11:42.600 --> 00:11:44.020
Yep, and sure will.


00:11:44.020 --> 00:11:48.080
So there's a lot of detail in Brett's article, so you should all go check it out.


00:11:48.080 --> 00:11:53.800
But it looks like things are starting to move again, just that six short months later.


00:11:53.800 --> 00:11:54.640
- Yeah. - Perfect.


00:11:54.640 --> 00:11:56.600
So, one of the things you often have to do


00:11:56.600 --> 00:11:59.520
is work with files and paths and all this kind of stuff.


00:11:59.520 --> 00:12:00.960
And I don't know, you tell me, Brian,


00:12:00.960 --> 00:12:01.800
am I living in a path?


00:12:01.800 --> 00:12:04.840
I still, if I gotta work with files,


00:12:04.840 --> 00:12:07.880
import OS, OS.path, I still probably do that,


00:12:07.880 --> 00:12:09.160
just out of habit.


00:12:09.160 --> 00:12:10.000
Am I doing it wrong?


00:12:10.000 --> 00:12:11.160
- You're doing it wrong.


00:12:11.160 --> 00:12:12.560
At least according to Trey.


00:12:12.560 --> 00:12:14.760
And I agree now.


00:12:14.760 --> 00:12:17.240
I am with Trey, so Trey Hunter wrote a blog post


00:12:17.240 --> 00:12:20.420
called "Why You Should Be Using Pathlib."


00:12:20.420 --> 00:12:23.360
And it's basically just a fairly convincing argument


00:12:23.360 --> 00:12:30.360
talking about some of the different benefits of pathlib over os.path and os and glob and stuff.


00:12:30.360 --> 00:12:35.860
I actually didn't know before reading this, I didn't know that you could do glob-like stuff with the pathlib.


00:12:35.860 --> 00:12:37.360
And recursive globbing.


00:12:37.360 --> 00:12:44.860
Yeah, recursive. I had actually looked for that before because in some shells you can do ** to recursively look for stuff.


00:12:44.860 --> 00:12:51.360
And you can use ** for the glob library or the glob whatever.


00:12:51.360 --> 00:12:55.160
But it's built in, you can do our glob with PathLab.


00:12:55.160 --> 00:12:55.860
It's pretty cool.


00:12:55.860 --> 00:12:56.820
>> That's pretty awesome.


00:12:56.820 --> 00:12:58.700
>> Some of the things that are nice about it,


00:12:58.700 --> 00:13:02.280
he's comparing it to OSPath and OS.Path,


00:13:02.280 --> 00:13:03.540
it's really working.


00:13:03.540 --> 00:13:04.500
It's a string library.


00:13:04.500 --> 00:13:08.140
It's passing and figuring out strings that represent paths.


00:13:08.140 --> 00:13:10.860
But now we have more functional.


00:13:10.860 --> 00:13:13.300
The PathLab uses the path object,


00:13:13.300 --> 00:13:18.060
which is a more functional thing that all of the path method,


00:13:18.060 --> 00:13:20.940
path object methods return path objects.


00:13:20.940 --> 00:13:22.220
So you can chain them together.


00:13:22.220 --> 00:13:24.500
So right, I love the fluent API.


00:13:24.500 --> 00:13:28.180
Like you say path and give it like a directory.


00:13:28.180 --> 00:13:33.220
You can say make dir and all nice options like parents equals true exists.


00:13:33.220 --> 00:13:35.420
Okay, so it'll create like the whole directory chain.


00:13:35.420 --> 00:13:42.140
It won't fail if it already exists like that is like that right there might convince me to like put my OS path away.


00:13:42.140 --> 00:13:42.580
Yeah.


00:13:42.580 --> 00:13:49.020
And also like right off the bat, he shows an example where how do you import OS path and OS?


00:13:49.020 --> 00:13:53.620
Do you import all the little pieces from there


00:13:53.620 --> 00:13:56.540
so that you can have shorter methods?


00:13:56.540 --> 00:13:58.860
Or do you just say OSPath and you have


00:13:58.860 --> 00:14:00.580
to say OSPath everywhere?


00:14:00.580 --> 00:14:03.340
And it makes for kind of unwieldy code.


00:14:03.340 --> 00:14:05.820
I copied some of the examples that he had


00:14:05.820 --> 00:14:07.780
into our show notes.


00:14:07.780 --> 00:14:10.180
It's just really kind of a cool thing.


00:14:10.180 --> 00:14:12.540
One of the things I didn't realize is that,


00:14:12.540 --> 00:14:14.700
like if you're opening a file,


00:14:14.700 --> 00:14:17.780
you can say like with open file name


00:14:17.780 --> 00:14:21.580
as some file object, then you work with it.


00:14:21.580 --> 00:14:23.180
It closes automatically.


00:14:23.180 --> 00:14:26.780
That all works with the Pathlib objects now too.


00:14:26.780 --> 00:14:30.300
So you can use a lot of the other standard library things


00:14:30.300 --> 00:14:31.940
just with Pathlib objects.


00:14:31.940 --> 00:14:33.940
- Right, as long as you're on Python 3.6 or above.


00:14:33.940 --> 00:14:35.180
- Yes. - Yeah.


00:14:35.180 --> 00:14:36.620
Now this is really cool, I like it.


00:14:36.620 --> 00:14:37.460
I definitely like it.


00:14:37.460 --> 00:14:38.280
- Why wouldn't you be?


00:14:38.280 --> 00:14:39.900
- Exactly, why wouldn't you be?


00:14:39.900 --> 00:14:41.360
I would be wrong.


00:14:41.360 --> 00:14:43.420
Not as wrong as using legacy Python, but you know,


00:14:43.420 --> 00:14:44.260
it's okay.


00:14:45.420 --> 00:14:49.900
I do know that some of the Linux distributions lag behind a ways and you know if you haven't


00:14:49.900 --> 00:14:53.460
upgraded that for a while that that could be a reason actually.


00:14:53.460 --> 00:14:55.900
But yeah this definitely something people should be checking out.


00:14:55.900 --> 00:14:58.940
I really like the fluent API the chaining.


00:14:58.940 --> 00:14:59.940
That's cool.


00:14:59.940 --> 00:15:03.620
Right now before we get to the next one Brian let me tell you about our sponsor Datadog.


00:15:03.620 --> 00:15:06.300
They've sponsored many of the episodes and they're a big supporter of the show.


00:15:06.300 --> 00:15:09.660
So we're really happy to have them back this year.


00:15:09.660 --> 00:15:15.020
And they're a cloud scale monitoring platform that brings together metrics logs distributed


00:15:15.020 --> 00:15:16.360
traces all in one place.


00:15:16.360 --> 00:15:18.700
Like one of the big problems you have is, well,


00:15:18.700 --> 00:15:20.500
I made a request to my web server.


00:15:20.500 --> 00:15:22.300
The web server talked to this service.


00:15:22.300 --> 00:15:23.620
The server talked to a database.


00:15:23.620 --> 00:15:25.780
Like those all seem like separate things, right?


00:15:25.780 --> 00:15:28.220
But if you want to track them all together, right,


00:15:28.220 --> 00:15:29.520
you can use Datadog for that.


00:15:29.520 --> 00:15:31.320
So you can trace clients,


00:15:31.320 --> 00:15:34.060
including support for auto-instrumenting,


00:15:34.060 --> 00:15:36.020
like automatically tracking requests


00:15:36.020 --> 00:15:39.100
through things like Django, Flask, Postgres, and others.


00:15:39.100 --> 00:15:42.300
So you get all the tracking across service boundaries,


00:15:42.300 --> 00:15:45.260
which is pretty sweet for troubleshooting slow requests


00:15:45.260 --> 00:15:47.380
and optimizing your Python apps.


00:15:47.380 --> 00:15:49.840
So you can start monitoring your environment


00:15:49.840 --> 00:15:52.540
with a free trial and Datadog will send you


00:15:52.540 --> 00:15:54.480
a cool little Datadog t-shirt.


00:15:54.480 --> 00:15:57.340
Just go to pythonbytes.fm/datadog and get started.


00:15:57.340 --> 00:15:58.180
- Very cool.


00:15:58.180 --> 00:15:59.000
- Yeah, for sure.


00:15:59.000 --> 00:15:59.840
Thank you, Datadog.


00:15:59.840 --> 00:16:03.660
Now, this next one is actually a two-in-one sort of thing


00:16:03.660 --> 00:16:07.260
because there's a new, newish, let's call it newish,


00:16:07.260 --> 00:16:09.900
library for visualizing stuff,


00:16:09.900 --> 00:16:12.040
mostly around data science and notebooks.


00:16:12.040 --> 00:16:14.040
So we've talked about things like,


00:16:14.040 --> 00:16:17.240
people know about matplotlib and seaborn and other stuff,


00:16:17.240 --> 00:16:20.340
but maybe they haven't heard about Altair.


00:16:20.340 --> 00:16:23.520
So Altair comes from Jake Vander Plaats and Brian Granger,


00:16:23.520 --> 00:16:25.720
who are both really big in the data science space.


00:16:25.720 --> 00:16:28.400
And this is a really cool declarative way


00:16:28.400 --> 00:16:30.240
to visualize stuff in Python.


00:16:30.240 --> 00:16:31.080
- Yeah.


00:16:31.080 --> 00:16:32.320
- Have you ever looked at like matplotlib


00:16:32.320 --> 00:16:34.360
and you're like, why do I have to do all these things?


00:16:34.360 --> 00:16:36.200
I just want a line on the screen.


00:16:36.200 --> 00:16:37.600
You know, there's just like so many steps,


00:16:37.600 --> 00:16:41.280
it seems like, well, Altair seems to avoid that.


00:16:41.280 --> 00:16:45.900
So basically it assumes that you're working with some sort of pandas data frame, right?


00:16:45.900 --> 00:16:49.520
So it takes panda stuff and visualizes it really well.


00:16:49.520 --> 00:16:56.340
So for example, if I had a panda data frame called cars, I could say chart of cars, mark


00:16:56.340 --> 00:17:01.280
points and just, you know, X encode X equals horsepower, Y equals miles per gallon, and


00:17:01.280 --> 00:17:02.760
it colors it based on the origin.


00:17:02.760 --> 00:17:05.080
Boom, you get a nice graph, like really declarative.


00:17:05.080 --> 00:17:08.400
You just state what like your axes are and stuff and it does it.


00:17:08.400 --> 00:17:10.120
So that's really, really nice, right?


00:17:10.120 --> 00:17:11.680
You said you were actually using it a little bit.


00:17:11.680 --> 00:17:13.960
- Yeah, I'm actually, we had a project


00:17:13.960 --> 00:17:16.500
for visualizing our test result data.


00:17:16.500 --> 00:17:18.000
And since I knew about this,


00:17:18.000 --> 00:17:20.800
and I get to make like calls like that,


00:17:20.800 --> 00:17:22.880
I said, "Hey, let's try Altair."


00:17:22.880 --> 00:17:27.880
And one of the benefits of it is this data frame model.


00:17:27.880 --> 00:17:31.720
So the people working with it have had to learn data frames.


00:17:31.720 --> 00:17:34.020
And the result is they're like,


00:17:34.020 --> 00:17:36.440
"Hey, wait, actually working with data frames


00:17:36.440 --> 00:17:38.840
"makes this easier because we can do a lot


00:17:38.840 --> 00:17:42.180
manipulations within the data frame model. Yeah that's pretty cool they're


00:17:42.180 --> 00:17:44.600
like wait data frames are kind of awesome we should use them. Yeah


00:17:44.600 --> 00:17:49.560
definitely. Yeah that's really cool. So that's Altair which maybe we should


00:17:49.560 --> 00:17:53.040
spend more time talking about it but the other item I want to talk about is


00:17:53.040 --> 00:17:59.160
Altair recipes from Antonio Piccolboni who actually is the creator of Altair


00:17:59.160 --> 00:18:03.720
recipes. So the idea is you can create some of these charts but not not all the


00:18:03.720 --> 00:18:06.100
kinds of charts that you might want to create


00:18:06.100 --> 00:18:10.480
are easily one-lineable in Altair.


00:18:10.480 --> 00:18:13.980
So what he's done is he's created a bunch of


00:18:13.980 --> 00:18:17.200
helper libraries that will take the data


00:18:17.200 --> 00:18:19.680
in the similar way I described before,


00:18:19.680 --> 00:18:22.240
easily generate the other types of things


00:18:22.240 --> 00:18:25.000
that you might want, like a box plot,


00:18:25.000 --> 00:18:27.000
or histograms, or things like that.


00:18:27.000 --> 00:18:29.020
So there's a whole bunch of different examples


00:18:29.020 --> 00:18:30.880
of different types of things.


00:18:30.880 --> 00:18:34.440
you know, auto-correlation, box plots, heat maps,


00:18:34.440 --> 00:18:36.520
histograms, all kinds of stuff


00:18:36.520 --> 00:18:41.000
that's down to just one line again using his code.


00:18:41.000 --> 00:18:43.000
So pretty cool.


00:18:43.000 --> 00:18:44.160
- Yeah, very nice.


00:18:44.160 --> 00:18:46.220
- Yeah, so basically it's like a wrapper around


00:18:46.220 --> 00:18:49.840
more additional types of graphs.


00:18:49.840 --> 00:18:53.480
And I'm linking to a whole bunch of different examples


00:18:53.480 --> 00:18:56.000
in here, so in the little section on Altair Recipes,


00:18:56.000 --> 00:18:57.400
just click on the examples


00:18:57.400 --> 00:18:58.940
and you can go see all the different graphs


00:18:58.940 --> 00:19:00.320
and whether or not they're helpful.


00:19:00.320 --> 00:19:01.800
Ooh, a layered histogram.


00:19:01.800 --> 00:19:02.680
A layered histogram.


00:19:02.680 --> 00:19:03.380
Isn't that cool?


00:19:03.380 --> 00:19:04.360
That's really cool.


00:19:04.360 --> 00:19:07.080
Yeah, and Antonio says, it's a fully documented, highly


00:19:07.080 --> 00:19:11.880
consistent API, 90% plus test coverage with a maintainability


00:19:11.880 --> 00:19:14.480
grade of A. So very nice stuff.


00:19:14.480 --> 00:19:16.720
Do you know how he computes the maintainability grade?


00:19:16.720 --> 00:19:17.360
Did you see that?


00:19:17.360 --> 00:19:17.920
No, I don't.


00:19:17.920 --> 00:19:19.960
I don't either, but I'm really fascinated to figure out


00:19:19.960 --> 00:19:22.240
what the maintainability grade of my other stuff is.


00:19:22.240 --> 00:19:23.320
Maintainability grade.


00:19:23.320 --> 00:19:24.640
Yeah, we should look into that.


00:19:24.640 --> 00:19:25.920
Yeah, we should definitely look into that.


00:19:25.920 --> 00:19:28.200
Antonio, send us a note about how you computed that.


00:19:28.200 --> 00:19:28.920
That's cool.


00:19:28.920 --> 00:19:31.100
But if you're looking for visualization,


00:19:31.100 --> 00:19:32.480
and especially if you're using Altair,


00:19:32.480 --> 00:19:34.040
check out Altair Recipes.


00:19:34.040 --> 00:19:35.600
It's on GitHub, and it looks pretty cool.


00:19:35.600 --> 00:19:36.440
- Very cool.


00:19:36.440 --> 00:19:37.360
- What do you got next for us?


00:19:37.360 --> 00:19:39.040
More testing, more coverage?


00:19:39.040 --> 00:19:40.760
- Yeah, I've been thinking about testing,


00:19:40.760 --> 00:19:43.320
and I kind of do that a lot.


00:19:43.320 --> 00:19:47.180
A couple of fun pytest plugins that were sent to me,


00:19:47.180 --> 00:19:50.460
and I apologize for not remembering who sent these to me,


00:19:50.460 --> 00:19:51.400
but keep them coming.


00:19:51.400 --> 00:19:53.640
I love trying out new things.


00:19:53.640 --> 00:19:55.960
The first one I want to show is,


00:19:55.960 --> 00:20:00.960
talk about is called pytest-picked, P-I-C-K-E-D.


00:20:00.960 --> 00:20:03.060
And the name confused me at first,


00:20:03.060 --> 00:20:06.180
but after you start using it, it sort of makes sense.


00:20:06.180 --> 00:20:08.960
Here's the idea, is you've got a bunch of,


00:20:08.960 --> 00:20:12.140
you're using GitHub or not necessarily GitHub,


00:20:12.140 --> 00:20:14.360
any Git repo. - Some Git repo, yeah.


00:20:14.360 --> 00:20:17.360
- Yeah, and you're working with a test or something,


00:20:17.360 --> 00:20:20.120
and you really, you know you're gonna wanna try


00:20:20.120 --> 00:20:23.360
to run the tests that you have modified.


00:20:23.360 --> 00:20:25.560
So Git knows this, with Git status,


00:20:25.560 --> 00:20:27.400
you can tell which files are modified.


00:20:27.400 --> 00:20:30.400
So this plugin utilizes git status


00:20:30.400 --> 00:20:33.820
and allows you to run all of the modified test files


00:20:33.820 --> 00:20:36.760
in one test suite without having to like specify them


00:20:36.760 --> 00:20:38.720
or keyword them or anything.


00:20:38.720 --> 00:20:39.560
- That's pretty cool.


00:20:39.560 --> 00:20:41.960
So if I have like a thousand test files,


00:20:41.960 --> 00:20:44.600
that may be a little excessive, but let's just roll with it.


00:20:44.600 --> 00:20:46.560
And I edit three of them


00:20:46.560 --> 00:20:49.840
since the last time I committed to git,


00:20:49.840 --> 00:20:51.420
I can go run this and it'll say,


00:20:51.420 --> 00:20:53.880
well, these are the three changed test files,


00:20:53.880 --> 00:20:56.880
therefore we're going to run just the test in those three files and pytest.


00:20:56.880 --> 00:21:01.600
Yeah, and you can run just those three or you can run those three first and then


00:21:01.600 --> 00:21:02.680
the rest of the suite.


00:21:02.680 --> 00:21:08.000
Ok, that's pretty sweet. You know what I would like, which is a probably a much


00:21:08.000 --> 00:21:12.480
harder problem to solve but would be awesome, is if you could combine code


00:21:12.480 --> 00:21:17.600
coverage along with this and and sort of reverse it. Say like, well these are all


00:21:17.600 --> 00:21:22.120
the source files and the test files that change but the source files that change


00:21:22.120 --> 00:21:26.400
what tests touch some line of code in the source file?


00:21:26.400 --> 00:21:30.400
So what do I need to run to get coverage on the changes that direction?


00:21:30.400 --> 00:21:31.200
That would be awesome.


00:21:31.200 --> 00:21:33.000
I think there is something like that,


00:21:33.000 --> 00:21:36.240
but it was, last time I tried it, it was a little clunky to use,


00:21:36.240 --> 00:21:37.560
but I'll look it up again.


00:21:37.560 --> 00:21:38.400
Yeah, okay, cool.


00:21:38.400 --> 00:21:39.240
But this is really nice.


00:21:39.240 --> 00:21:41.560
I mean, certainly if the mode that you're in is,


00:21:41.560 --> 00:21:44.080
I'm changing a bunch of the tests,


00:21:44.080 --> 00:21:45.920
and I want to just run those, this is awesome.


00:21:45.920 --> 00:21:49.360
Yeah, well, and the mode for a lot of people developing tests


00:21:49.360 --> 00:21:55.560
or maintaining software really all together is either writing new tests.


00:21:55.560 --> 00:21:59.480
When you're in that mode, you're definitely going to be having modified test files.


00:21:59.480 --> 00:22:05.960
Or you're debugging something and you're like throwing some logging in or something like that in a test.


00:22:05.960 --> 00:22:07.960
Yeah, I definitely see a good use for this.


00:22:07.960 --> 00:22:09.720
And you have a twofer, so that's just the one.


00:22:09.720 --> 00:22:13.720
Yeah, so the other one is a kind of a new project, but I thought it was fun.


00:22:13.720 --> 00:22:18.120
It's called pytest Clarity, pytest-Clarity.


00:22:18.120 --> 00:22:21.760
It's just another colorizer, so it makes the diffs.


00:22:21.760 --> 00:22:26.760
So if you have a assert equals comparison that fails,


00:22:26.760 --> 00:22:28.340
the left and right comparison,


00:22:28.340 --> 00:22:30.020
sometimes it's a little hard to read.


00:22:30.020 --> 00:22:35.020
And this one is a colorizer that puts the changes


00:22:35.020 --> 00:22:37.520
from the left and right right on top of each other


00:22:37.520 --> 00:22:39.620
and colorizes them differently.


00:22:39.620 --> 00:22:41.420
So that's nice and helpful.


00:22:41.420 --> 00:22:42.260
- Yeah, that's cool.


00:22:42.260 --> 00:22:43.340
Definitely colors.


00:22:43.340 --> 00:22:44.540
Color's awesome, right?


00:22:44.540 --> 00:22:46.460
It shows you what's different, what's the same.


00:22:46.460 --> 00:22:47.900
It's beautiful, you know, right away.


00:22:47.900 --> 00:22:55.900
Yeah, the one thing, I mean, in conversation with the person writing this, that it defaultly turns on verbose.


00:22:55.900 --> 00:23:01.900
And for small projects, having verbose on, which means that every test file is going to get listed,


00:23:01.900 --> 00:23:05.900
actually every test is going to get listed in the output, that's fine for small projects,


00:23:05.900 --> 00:23:09.900
but when you get into hundreds and thousands of tests, that can be unwieldy.


00:23:09.900 --> 00:23:11.900
Yeah, I can imagine.


00:23:11.900 --> 00:23:16.900
But you can turn that off with a -qq and the clarity still works.


00:23:16.900 --> 00:23:17.900
So cool.


00:23:17.900 --> 00:23:18.900
Okay.


00:23:18.900 --> 00:23:19.900
Yeah.


00:23:19.900 --> 00:23:20.900
Yeah.


00:23:20.900 --> 00:23:21.900
Those are definitely nice testing additions.


00:23:21.900 --> 00:23:22.900
Quite cool.


00:23:22.900 --> 00:23:26.180
So the last one I want to close out with is a little bit of web security.


00:23:26.180 --> 00:23:30.420
And we've talked about web security before on the show on various things like the Django


00:23:30.420 --> 00:23:33.140
Hunter and stuff like that, for example.


00:23:33.140 --> 00:23:35.900
But this one has to do with headers.


00:23:35.900 --> 00:23:43.020
Now did you know that when you have a web app, it obviously exchanges headers and cookies


00:23:43.020 --> 00:23:44.980
and stuff with the clients.


00:23:44.980 --> 00:23:50.320
But there's a whole bunch of things that you should send across probably for to make your


00:23:50.320 --> 00:23:51.920
website more secure.


00:23:51.920 --> 00:23:53.840
Yeah, there's like a handful of them.


00:23:53.840 --> 00:23:58.420
And the OWASP organization has a place that talks about these are the headers you should


00:23:58.420 --> 00:24:04.340
send, for example, about caching certain pages, or if you're setting a cookie that the cookie


00:24:04.340 --> 00:24:07.920
should only be exchanged over a secure connection.


00:24:07.920 --> 00:24:12.900
So imagine you've got like a site, maybe it's a bank, you can log into it.


00:24:12.900 --> 00:24:18.620
If you go to https bank.com or whatever the bank website is, right, it's going to


00:24:18.620 --> 00:24:20.580
set maybe a login cookie.


00:24:20.580 --> 00:24:23.980
But if you open up a browser and you type bank.com and just hit enter, you know, maybe


00:24:23.980 --> 00:24:27.020
that goes over HTTP and then HTTPS.


00:24:27.020 --> 00:24:32.060
But you know, if you don't set the right headers or flags, it could pass that login cookie


00:24:32.060 --> 00:24:36.180
over HTTP the first time before it goes over to HTTPS, things like that.


00:24:36.180 --> 00:24:41.660
So you can say only exchange these cookies over secure connections and things like little


00:24:41.660 --> 00:24:45.180
little details like this, but there's a bunch of them and they're hard to remember.


00:24:45.180 --> 00:24:50.540
One of the guys that was actually listening to talk Python on Flask, where David Lord


00:24:50.540 --> 00:24:56.500
talked about this thing called Flask Tailsman, which is a plugin for Flask that will automatically


00:24:56.500 --> 00:24:57.500
do that kind of stuff.


00:24:57.500 --> 00:25:02.080
It'll just take the response, set those cookies, and not the cookies, the headers that need


00:25:02.080 --> 00:25:03.540
to be set and things like that.


00:25:03.540 --> 00:25:07.020
So it's really nice that Flask has this option.


00:25:07.020 --> 00:25:09.420
He's like, well, but why don't the others?


00:25:09.420 --> 00:25:14.060
security guy, a pen tester, he's like, there should be something like this for all of the


00:25:14.060 --> 00:25:15.060
frameworks.


00:25:15.060 --> 00:25:18.980
So what he did was he created this thing, which I'll tell you the package name, and


00:25:18.980 --> 00:25:21.300
I can't believe that he got it on PyPI.


00:25:21.300 --> 00:25:22.620
The package name is secure.


00:25:22.620 --> 00:25:23.620
Yeah.


00:25:23.620 --> 00:25:26.860
You'd think that would be taken by now.


00:25:26.860 --> 00:25:32.180
But the idea is that secure headers and cookies for the Python web frameworks is pretty cool.


00:25:32.180 --> 00:25:38.540
It supports AIO HTTP, Bottle, CherryPi, Django, Flask, Falcon, Hug, Basinite, Pyramid, Court,


00:25:38.540 --> 00:25:41.180
Responder, Sanic, Starlet, and Tornado.


00:25:41.180 --> 00:25:42.940
And if one of those is not on your list,


00:25:42.940 --> 00:25:45.580
you can actually just sort of feed it the response anyway.


00:25:45.580 --> 00:25:46.420
Isn't that cool?


00:25:46.420 --> 00:25:48.100
- That's actually very cool, wow.


00:25:48.100 --> 00:25:50.500
- So it has built-in integration to those things


00:25:50.500 --> 00:25:53.620
like Pyramid Twins or other types of stuff.


00:25:53.620 --> 00:25:56.140
You can like plug it in so it automatically happens.


00:25:56.140 --> 00:25:58.540
But if you don't have it automatically doing it,


00:25:58.540 --> 00:26:01.780
you can just call the various bits as well.


00:26:01.780 --> 00:26:04.920
So it sends things like strict transport security,


00:26:04.920 --> 00:26:07.700
same origin iframes, cross-site protection,


00:26:07.700 --> 00:26:08.520
all that kind of stuff.


00:26:08.520 --> 00:26:10.120
just does that automatically.


00:26:10.120 --> 00:26:12.960
And you can also create secure cookies.


00:26:12.960 --> 00:26:15.880
So you just go to the secure cookie thing and say,


00:26:15.880 --> 00:26:19.600
I'd like the secure cookie to have this name and this value


00:26:19.600 --> 00:26:21.520
and it'll set that it's over HTTPS only,


00:26:21.520 --> 00:26:24.800
that it's over HTTP rather than JavaScript only,


00:26:24.800 --> 00:26:28.020
things like this, same site origin, same site stuff.


00:26:28.020 --> 00:26:30.440
So all these little details about getting security right


00:26:30.440 --> 00:26:32.520
are wrapped up and then packaged in a way


00:26:32.520 --> 00:26:34.480
you can use it cross framework.


00:26:34.480 --> 00:26:35.440
- Gosh, check that out.


00:26:35.440 --> 00:26:36.600
- Yeah, it's pretty sweet.


00:26:36.600 --> 00:26:39.000
- Did you mention Pyramid tweens?


00:26:39.000 --> 00:26:41.540
Is that a 12 year old using Pyramid or?


00:26:41.540 --> 00:26:44.920
- Well, it's 11 to like early 13 year old.


00:26:44.920 --> 00:26:47.760
No, it's like a layer that you can put in


00:26:47.760 --> 00:26:49.860
between request response.


00:26:49.860 --> 00:26:51.540
And it's like a thing that gets called


00:26:51.540 --> 00:26:53.300
before and after responses, I believe.


00:26:53.300 --> 00:26:55.880
- Okay, apparently not there in your Pyramid class.


00:26:55.880 --> 00:26:56.720
- Yeah, I guess not.


00:26:56.720 --> 00:26:58.580
And I don't think I really talked about it there,


00:26:58.580 --> 00:27:01.320
but you can basically plug it in and say,


00:27:01.320 --> 00:27:04.080
anytime you send a response, call this function.


00:27:04.080 --> 00:27:06.120
And so you can just in that function say,


00:27:06.120 --> 00:27:08.920
upgrade the response to have the secure headers


00:27:08.920 --> 00:27:11.280
in the response without doing it all over the place, right?


00:27:11.280 --> 00:27:12.680
You just plug in this one little bit.


00:27:12.680 --> 00:27:13.520
- Okay, cool.


00:27:13.520 --> 00:27:14.340
- Yeah, it's pretty cool.


00:27:14.340 --> 00:27:17.160
So if you're doing a web map and you care about security,


00:27:17.160 --> 00:27:20.000
you know, this is definitely worth checking out.


00:27:20.000 --> 00:27:22.360
All right, well, that's it for all of our items


00:27:22.360 --> 00:27:23.480
that we're officially covering.


00:27:23.480 --> 00:27:24.680
I have some extras, how about you?


00:27:24.680 --> 00:27:28.520
- I don't actually, other than I've been podcasting away


00:27:28.520 --> 00:27:33.520
and I got like seven episodes of Testing Code in December.


00:27:33.520 --> 00:27:34.340
So--


00:27:34.340 --> 00:27:35.760
- That's awesome, I've been listening to a lot of them.


00:27:35.760 --> 00:27:37.560
You've got some good stuff going on lately.


00:27:37.560 --> 00:27:38.400
- And I'm gonna keep it up.


00:27:38.400 --> 00:27:40.920
I'm not gonna do seven in January, but there should be four.


00:27:40.920 --> 00:27:41.920
- Yeah, awesome.


00:27:41.920 --> 00:27:43.600
I'm really glad to see that coming along.


00:27:43.600 --> 00:27:45.440
So I have, it's good you don't have many


00:27:45.440 --> 00:27:47.320
'cause I have a bunch, so I'll go through them kinda quick.


00:27:47.320 --> 00:27:49.600
But there was this pretty big bug


00:27:49.600 --> 00:27:51.440
that came out about SQLite.


00:27:51.440 --> 00:27:54.000
SQLite is an embedded database that runs in process


00:27:54.000 --> 00:27:57.080
that happens to be shipped and included in Python.


00:27:57.080 --> 00:27:59.200
So that got my attention.


00:27:59.200 --> 00:28:01.460
But it's also included in the browsers


00:28:01.460 --> 00:28:04.400
for like Web SQL stuff that JavaScript can use


00:28:04.400 --> 00:28:07.440
and it can be embedded in like ElectronJS apps


00:28:07.440 --> 00:28:09.240
for the same reason, stuff like that, right?


00:28:09.240 --> 00:28:11.560
So it's really a lot of places.


00:28:11.560 --> 00:28:16.200
Now the problem is, it turns out that there is a bug


00:28:16.200 --> 00:28:20.720
in SQLite that with simple SQL select commands,


00:28:20.720 --> 00:28:23.600
you can do very bad things to anything


00:28:23.600 --> 00:28:25.880
that runs the SQLite that is vulnerable.


00:28:25.880 --> 00:28:28.280
And this was just really recently.


00:28:28.280 --> 00:28:31.360
All right, so it seemed like this could have been


00:28:31.360 --> 00:28:33.040
a really big problem in Python,


00:28:33.040 --> 00:28:36.440
since Python has SQLite, SQLite has this problem.


00:28:36.440 --> 00:28:38.740
And it would have had to been the case


00:28:38.740 --> 00:28:41.180
that there was some SQL injection, right?


00:28:41.180 --> 00:28:45.160
Like you took user input and you fed it to SQLite directly.


00:28:45.160 --> 00:28:47.140
So that's already, there'd have to be kind of a problem


00:28:47.140 --> 00:28:48.340
in your code for this to happen.


00:28:48.340 --> 00:28:51.320
But it turns out, I threw this out on Twitter,


00:28:51.320 --> 00:28:56.320
and some folks came out there and really like,


00:28:56.320 --> 00:28:57.160
you know, a lot of people shared it,


00:28:57.160 --> 00:28:58.500
a lot of people talked about it.


00:28:58.500 --> 00:29:00.080
And somebody said, you know, actually,


00:29:00.080 --> 00:29:04.800
That's an interesting thought, M. Boris on Twitter is like,


00:29:04.800 --> 00:29:07.560
you kind of got me curious that maybe this is a problem


00:29:07.560 --> 00:29:09.960
for Python, let me check.


00:29:09.960 --> 00:29:12.040
So he took the proof of concept exploits


00:29:12.040 --> 00:29:14.720
and ran it against SQLite and Python,


00:29:14.720 --> 00:29:16.600
and it looks like it's not a problem.


00:29:16.600 --> 00:29:17.840
That's pretty good, right?


00:29:17.840 --> 00:29:20.200
So if you hear that there's this big problem with SQLite,


00:29:20.200 --> 00:29:22.040
seems like it's not a problem with Python,


00:29:22.040 --> 00:29:24.520
but that's not for sure, but it seems that way.


00:29:24.520 --> 00:29:28.640
- And also don't take user input and throw it into a query.


00:29:28.640 --> 00:29:30.400
- Yeah, exactly, it's already,


00:29:30.400 --> 00:29:32.800
like in order for this to be a problem for your Python app,


00:29:32.800 --> 00:29:34.200
you already have to have a problem.


00:29:34.200 --> 00:29:35.500
This just makes it worse.


00:29:35.500 --> 00:29:39.200
So if this was gonna be a problem before,


00:29:39.200 --> 00:29:41.180
you should probably deal with that regardless.


00:29:41.180 --> 00:29:42.480
All right, so next one,


00:29:42.480 --> 00:29:44.500
this is a follow-up on our AI in healthcare.


00:29:44.500 --> 00:29:49.500
We talked about AI and the AI analyzing cancerous mammograms


00:29:49.500 --> 00:29:53.040
and helping doctors get much better at that.


00:29:53.040 --> 00:29:55.180
And we were speculating, maybe I was speculating


00:29:55.180 --> 00:29:57.140
that maybe there won't be a need for doctors.


00:29:57.140 --> 00:30:00.260
we'll just upload it to the cloud doctor


00:30:00.260 --> 00:30:01.300
and we get an answer, right?


00:30:01.300 --> 00:30:02.140
Things like that.


00:30:02.140 --> 00:30:03.300
- Hey Google, do I have cancer?


00:30:03.300 --> 00:30:04.860
- Exactly.


00:30:04.860 --> 00:30:07.260
Send us three pictures, I'll tell you.


00:30:07.260 --> 00:30:10.060
Well, this guy named Bradley sent us feedback.


00:30:10.060 --> 00:30:11.700
Says, "Hey, I really found this interesting.


00:30:11.700 --> 00:30:14.940
"I'm a data scientist at the National Oncology Program


00:30:14.940 --> 00:30:17.160
"and I work directly with clinicians


00:30:17.160 --> 00:30:20.180
"and it's my strong opinion that AI cannot take the job


00:30:20.180 --> 00:30:23.340
"from the medical folks, the MDs.


00:30:23.340 --> 00:30:25.600
"However, it will make it way more efficient


00:30:25.600 --> 00:30:27.600
for all the low-hanging fruit.


00:30:27.600 --> 00:30:31.000
Says, you know, look, healthcare is both science and an art,


00:30:31.000 --> 00:30:33.440
and the AI is going to have a really hard time


00:30:33.440 --> 00:30:36.640
on the art side of things, also probably the human interaction


00:30:36.640 --> 00:30:37.240
side of things.


00:30:37.240 --> 00:30:40.960
So really doesn't think that there's a big danger of that.


00:30:40.960 --> 00:30:44.120
Well, I guess time will tell, but he's definitely


00:30:44.120 --> 00:30:46.760
got a lot more to go on than I do.


00:30:46.760 --> 00:30:48.760
He works as a data scientist with these folks.


00:30:48.760 --> 00:30:49.760
So that's cool.


00:30:49.760 --> 00:30:50.880
Got some inside feedback.


00:30:50.880 --> 00:30:53.000
Yeah, that's pretty much what we were speculating anyway.


00:30:53.000 --> 00:30:55.000
I mean, it's not something you can break down


00:30:55.000 --> 00:30:55.760
into an algorithm.


00:30:55.760 --> 00:30:57.000
Yeah, for sure.


00:30:57.000 --> 00:31:00.320
Next item really quick, Python 3.7.2 is out.


00:31:00.320 --> 00:31:04.680
So be sure to get the latest Python 3.7 if you're


00:31:04.680 --> 00:31:05.600
trying to run that.


00:31:05.600 --> 00:31:07.060
And if you're running homebrew, you


00:31:07.060 --> 00:31:09.800
can just do brew update and brew upgrade,


00:31:09.800 --> 00:31:12.200
and you'll have Python 3.7.2, which is pretty awesome.


00:31:12.200 --> 00:31:12.680
Neat.


00:31:12.680 --> 00:31:13.200
Yeah.


00:31:13.200 --> 00:31:16.240
So I'm already running that on my local machine,


00:31:16.240 --> 00:31:17.440
but not yet in production.


00:31:17.440 --> 00:31:20.000
It's not on the right Linux version yet.


00:31:20.000 --> 00:31:22.720
And then finally, I launched a new course, Brian.


00:31:22.720 --> 00:31:23.600
Well, I released it.


00:31:23.600 --> 00:31:24.400
Yeah, I'm excited about this.


00:31:24.400 --> 00:31:27.840
- Yeah, so this is one written by Matt McKay


00:31:27.840 --> 00:31:31.160
of Full Stack Python, and it's Introduction to Ansible.


00:31:31.160 --> 00:31:33.040
So that one's been coming along for a long time,


00:31:33.040 --> 00:31:34.160
and he finally got it out.


00:31:34.160 --> 00:31:36.080
It's really good, and I'm learning a lot


00:31:36.080 --> 00:31:39.480
about all sorts of things, also including Ansible.


00:31:39.480 --> 00:31:40.800
So if you're interested in Ansible,


00:31:40.800 --> 00:31:44.000
check it out over at training.docpython.fm,


00:31:44.000 --> 00:31:45.000
or just click the link.


00:31:45.000 --> 00:31:45.840
- Nice.


00:31:45.840 --> 00:31:47.320
- Did you come with a joke this time?


00:31:47.320 --> 00:31:48.160
- I did not.


00:31:48.160 --> 00:31:49.600
- Do you have a joke for us?


00:31:49.600 --> 00:31:51.280
Well, luckily I found a joke.


00:31:51.280 --> 00:31:53.160
And by found a joke, I mean,


00:31:53.160 --> 00:31:56.080
Yochim sent us a joke, one of our listeners,


00:31:56.080 --> 00:31:58.080
and I'll tell it to you.


00:31:58.080 --> 00:31:58.920
OK.


00:31:58.920 --> 00:32:01.640
OK, so-- hold on, I've got to zoom in.


00:32:01.640 --> 00:32:03.360
Fonts are small, eyes are old.


00:32:03.360 --> 00:32:06.040
So an engineer, a physicist, and a programmer


00:32:06.040 --> 00:32:10.520
were discussing what was the oldest profession of the three.


00:32:10.520 --> 00:32:13.380
Engineers, look, all the matter engineered


00:32:13.380 --> 00:32:17.640
into amazing constructs like stars, galaxies, planets.


00:32:17.640 --> 00:32:19.160
So obviously, engineering.


00:32:19.160 --> 00:32:22.080
The physicist says, before there were planets,


00:32:22.080 --> 00:32:24.520
The matter had to be made from chaos.


00:32:24.520 --> 00:32:27.240
Physics is responsible for all the quarks, gluons,


00:32:27.240 --> 00:32:29.320
photons, and electrons.


00:32:29.320 --> 00:32:31.200
Not to be outdone, the programmer says,


00:32:31.200 --> 00:32:33.360
aha, but where do you think the chaos came from?


00:32:33.360 --> 00:32:34.180
- Yeah, that's good.


00:32:34.180 --> 00:32:35.140
- Yeah, pretty good.


00:32:35.140 --> 00:32:37.820
So, definitely, I'm sure we've all caused


00:32:37.820 --> 00:32:41.600
a little bit of chaos out in the world with our apps.


00:32:41.600 --> 00:32:43.360
That's a good one.


00:32:43.360 --> 00:32:45.360
- Not to like, we should be done now.


00:32:45.360 --> 00:32:47.200
But I just remembered another thing.


00:32:47.200 --> 00:32:50.960
Speaking of chaos, is like, in 2019,


00:32:50.960 --> 00:32:53.160
more and more browsers were saying,


00:32:53.160 --> 00:32:56.120
"Let's just try to have all websites be secure."


00:32:56.120 --> 00:32:59.920
So I got hit by this, and pythontesting.net


00:32:59.920 --> 00:33:02.920
is not, doesn't have SSL on it,


00:33:02.920 --> 00:33:04.760
but it's just warning everybody,


00:33:04.760 --> 00:33:08.000
by the way, like Brian might steal your information.


00:33:08.000 --> 00:33:09.880
I'm not gonna do anything with your information.


00:33:09.880 --> 00:33:12.000
- Let me see, I pull up, oh my goodness,


00:33:12.000 --> 00:33:15.400
I gotta get out of here, man, this is not secure on it.


00:33:15.400 --> 00:33:17.220
- Yeah, what up?


00:33:17.220 --> 00:33:20.640
So I could just buy an SSL certificate or whatever,


00:33:20.640 --> 00:33:23.540
do the free one and jump through that hoop.


00:33:23.540 --> 00:33:26.660
But I felt like it'd be a good time to change it anyway.


00:33:26.660 --> 00:33:32.180
So I'm gonna start the process of turning this into a static site generated site.


00:33:32.180 --> 00:33:33.460
>> You are, okay, awesome.


00:33:33.460 --> 00:33:34.500
Well, that sounds really fun.


00:33:34.500 --> 00:33:38.780
And that'll be, I know some good sites that definitely run that way.


00:33:38.780 --> 00:33:39.740
So that'll be good.


00:33:39.740 --> 00:33:41.900
>> Yeah, okay, that's all I got.


00:33:41.900 --> 00:33:45.060
>> Well, even though it says not secure, I'm still gonna go there, it's okay.


00:33:45.060 --> 00:33:47.220
>> [LAUGH] Okay.


00:33:47.220 --> 00:33:49.580
>> All right, well, great to chat with you as always, Brian.


00:33:49.580 --> 00:33:50.220
>> Yeah, you too.


00:33:50.220 --> 00:33:51.220
Thanks.


00:33:51.220 --> 00:33:52.220
Bye.


00:33:52.220 --> 00:33:53.220
Thank you for listening to Python Bytes.


00:33:53.220 --> 00:33:55.620
Follow the show on Twitter via @PythonBytes.


00:33:55.620 --> 00:33:58.740
That's Python Bytes as in B-Y-T-E-S.


00:33:58.740 --> 00:34:02.040
And get the full show notes at PythonBytes.fm.


00:34:02.040 --> 00:34:05.740
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:34:05.740 --> 00:34:06.740
way.


00:34:06.740 --> 00:34:09.260
We're always on the lookout for sharing something cool.


00:34:09.260 --> 00:34:12.620
On behalf of myself and Brian Auken, this is Michael Kennedy.


00:34:12.620 --> 00:34:15.660
Thank you for listening and sharing this podcast with your friends and colleagues.

