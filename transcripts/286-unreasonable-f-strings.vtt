WEBVTT

00:00:00.001 --> 00:00:05.280
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.280 --> 00:00:10.820
This is episode 286, recorded May 31st, 2022.

00:00:10.820 --> 00:00:11.820
I'm Michael Kennedy.

00:00:11.820 --> 00:00:12.780
And I'm Brian Okken.

00:00:12.780 --> 00:00:15.080
And this episode is brought to you by us.

00:00:15.080 --> 00:00:18.540
If you're looking to learn Python, check out all the courses over at Talk Python Training.

00:00:18.540 --> 00:00:24.080
If you want to get better with testing, check out Brian's pytest book, second edition.

00:00:24.080 --> 00:00:24.720
Yes.

00:00:24.720 --> 00:00:25.380
Yeah.

00:00:25.380 --> 00:00:26.140
Yes, indeed.

00:00:26.140 --> 00:00:26.780
Indeed.

00:00:26.780 --> 00:00:27.400
All right.

00:00:27.400 --> 00:00:29.680
Well, let's jump right into it, Brian.

00:00:29.840 --> 00:00:30.040
Okay.

00:00:30.040 --> 00:00:31.140
Tell me about the GIL.

00:00:31.140 --> 00:00:35.380
I do want to talk about the gill, but I was just realizing that we're at 286.

00:00:35.380 --> 00:00:38.860
I just started watching Big Bang Theory with my youngest kid.

00:00:38.860 --> 00:00:42.220
And there's 279 episodes of them.

00:00:42.220 --> 00:00:45.120
So we have more than it went on forever.

00:00:45.120 --> 00:00:46.580
And we have more episodes than them.

00:00:46.580 --> 00:00:48.720
That's quite the milestone.

00:00:48.720 --> 00:00:50.660
I mean, you divide that by 52.

00:00:50.660 --> 00:00:51.460
That's a lot of years.

00:00:51.460 --> 00:00:52.360
We've been doing this for a while.

00:00:52.360 --> 00:00:52.580
Yeah.

00:00:52.580 --> 00:00:56.000
So Python and the GIL.

00:00:56.000 --> 00:00:57.640
So the GIL is a thing, right?

00:00:57.640 --> 00:00:59.800
It's like something everybody knows about.

00:00:59.800 --> 00:01:02.040
I think people know about, but not too much.

00:01:02.040 --> 00:01:07.680
So, I mean, you kind of, it means we can't do multiprocessing, but we can, but we can't.

00:01:07.680 --> 00:01:08.500
So what is it?

00:01:09.120 --> 00:01:11.420
And so I really like this article.

00:01:11.420 --> 00:01:19.860
So this is an article called the Python GIL past, present, and future, because we have been talking about some of the no GIL options that are coming.

00:01:20.500 --> 00:01:22.120
So this is really nice.

00:01:22.120 --> 00:01:23.340
It's a, who is it?

00:01:23.340 --> 00:01:28.880
Gary, Barry Warsaw and Pavel Polowicz, I think.

00:01:28.880 --> 00:01:33.300
Anyway, really great article on the Backblaze blog.

00:01:33.460 --> 00:01:39.360
And it starts out and goes through sort of what is the gill, why we have it.

00:01:39.360 --> 00:01:45.320
It's a lot around the way in some of the history is around reference counting.

00:01:45.320 --> 00:01:48.340
And maybe you knew that off the top of your head, but I forgot.

00:01:48.340 --> 00:01:55.380
That reference counting is something, that's how we do memory management and all sorts of stuff within Python.

00:01:55.380 --> 00:02:00.160
But to make it an easy implementation, there's this global interpreter lock.

00:02:00.160 --> 00:02:08.320
And that just basically, instead of lock, like other code, you lock individual items, shared memory that you're using.

00:02:08.320 --> 00:02:13.560
We just say the interpreter, let's just lock that and all of the variables that it uses.

00:02:13.560 --> 00:02:18.660
It's not just reference counts, but other things too.

00:02:19.240 --> 00:02:26.560
And this is just, it's a fairly quick read, but enough detail that you really kind of understand what's going on.

00:02:26.560 --> 00:02:36.920
It does talk through, you know, reference counting, talks through that, some of the advantages, why it's really kind of handy to have it around.

00:02:36.920 --> 00:02:41.820
But then attempts to remove it, including, like, I didn't know about this one.

00:02:41.820 --> 00:02:44.600
There was a free threading one in 99.

00:02:44.600 --> 00:02:45.700
From 1999.

00:02:45.700 --> 00:02:48.040
Yeah, that's, I didn't know about that one.

00:02:48.240 --> 00:02:49.780
It actually was successful.

00:02:49.780 --> 00:02:52.240
It just made your Python code really slow.

00:02:52.240 --> 00:02:54.520
So, not good.

00:02:54.520 --> 00:03:00.840
And then Larry Hastings' galectomy, he's had a lot of PyCon talks, or a few PyCon talks around this.

00:03:00.840 --> 00:03:05.360
So, that's an interesting thing to read about.

00:03:05.360 --> 00:03:10.320
There's a little more, there's quite a few interesting bits in there.

00:03:10.320 --> 00:03:14.220
But it never really got back into main Python.

00:03:14.680 --> 00:03:19.820
But we're getting a little closer where, with this no-gil stuff.

00:03:19.820 --> 00:03:23.700
So, there's no-gil stuff going on with Sam Gross.

00:03:23.700 --> 00:03:24.600
From Sam Gross.

00:03:24.600 --> 00:03:24.900
Yeah.

00:03:25.420 --> 00:03:37.420
And then also, we've got Guido and others in Microsoft now working on this problem of speeding it up and everything.

00:03:37.420 --> 00:03:43.920
So, really great discussion if you want to catch up on all the history of the GIL and where it's going.

00:03:44.400 --> 00:03:49.340
And then a little prediction at the end of, we're going to see speed-ups.

00:03:49.340 --> 00:03:52.680
Because of these efforts, we're going to see speed-ups in the next few years.

00:03:52.680 --> 00:03:54.140
It's just going to get faster.

00:03:54.140 --> 00:03:59.980
And then, if we get no-gil, it might be maybe five years from now.

00:03:59.980 --> 00:04:01.200
Yeah.

00:04:01.200 --> 00:04:01.280
Yeah.

00:04:01.280 --> 00:04:02.660
It's pretty exciting.

00:04:02.660 --> 00:04:04.320
There's some very neat work.

00:04:04.560 --> 00:04:07.340
The stuff that Sam Gross is doing is quite interesting.

00:04:07.340 --> 00:04:08.000
Yeah.

00:04:08.000 --> 00:04:12.280
What's really cool is it's not just theory or people playing, right?

00:04:12.280 --> 00:04:16.640
The Python 3.11 is a lot faster than the previous Pythons already.

00:04:16.640 --> 00:04:18.840
And it doesn't even really touch the GIL side of things.

00:04:18.840 --> 00:04:21.480
So, there's actual progress being made.

00:04:21.480 --> 00:04:21.960
Yeah.

00:04:21.960 --> 00:04:24.560
And it's actually, it's pretty exciting.

00:04:24.560 --> 00:04:27.020
Pretty exciting time to be part of Python.

00:04:27.560 --> 00:04:30.320
Like, it's never not been exciting, but, you know.

00:04:30.320 --> 00:04:30.780
Yeah.

00:04:30.780 --> 00:04:32.200
It only gets more exciting.

00:04:32.200 --> 00:04:32.580
How's that?

00:04:32.580 --> 00:04:32.800
Yeah.

00:04:32.800 --> 00:04:34.460
So.

00:04:34.460 --> 00:04:36.220
Hey, let me ask you a meta question.

00:04:36.220 --> 00:04:39.180
So, this is on the Backblaze blog.

00:04:39.180 --> 00:04:45.880
So, Backblaze.com is one of the, I think, better sort of backup my computer somewhere off-site

00:04:45.880 --> 00:04:46.860
sort of things.

00:04:46.860 --> 00:04:47.440
Yeah.

00:04:47.440 --> 00:04:52.020
And the fact that they're blogging about the Python GIL is kind of interesting.

00:04:52.020 --> 00:04:54.340
I wonder if they're a big Python shop and we just didn't know it.

00:04:54.340 --> 00:04:57.420
Well, there's, like, I didn't know.

00:04:57.420 --> 00:04:59.200
It's on their blog.

00:04:59.200 --> 00:05:02.640
But, I mean, we've got Barry Warsaw in there.

00:05:02.640 --> 00:05:04.360
It's written by Barry Warsaw and Powell.

00:05:04.360 --> 00:05:04.760
Yeah.

00:05:04.760 --> 00:05:05.040
So.

00:05:05.040 --> 00:05:10.380
Are they, is he, he's, he says he's currently a senior engineer at LinkedIn.

00:05:10.380 --> 00:05:11.040
So.

00:05:11.040 --> 00:05:11.360
Yeah.

00:05:11.360 --> 00:05:11.560
Yeah.

00:05:11.560 --> 00:05:12.480
I'm not sure.

00:05:12.480 --> 00:05:14.260
Sometimes life's confusing.

00:05:14.260 --> 00:05:14.680
Yeah.

00:05:14.680 --> 00:05:16.740
Not sure how this ended up there.

00:05:16.740 --> 00:05:17.680
But, yeah.

00:05:17.680 --> 00:05:22.920
No, but it's cool to see Backblaze supporting the Python world with some, some dives into the.

00:05:22.920 --> 00:05:23.040
Yeah.

00:05:23.040 --> 00:05:26.460
Maybe somebody from Backblaze can reach out to us and tell us what's going on.

00:05:26.460 --> 00:05:26.760
Yeah.

00:05:26.760 --> 00:05:27.260
That'd be great.

00:05:27.260 --> 00:05:28.620
Also great.

00:05:28.620 --> 00:05:35.900
Wouldn't it be cool, Brian, if we could take our Python program, whether this is a CLI or

00:05:35.900 --> 00:05:39.080
some other app that we need to have for people to run.

00:05:39.200 --> 00:05:42.860
And instead of saying, well, make sure you have this version of Python at least to make

00:05:42.860 --> 00:05:45.740
sure you've set up a virtual environment, you've installed these things, and then you've got

00:05:45.740 --> 00:05:47.860
this in the path, and then you've got this environment variable.

00:05:47.860 --> 00:05:49.920
Now you can try to run our thing I gave you.

00:05:49.920 --> 00:05:50.300
Yeah.

00:05:50.360 --> 00:05:55.460
If you could just give them a single binary that contained all the Python, contained the

00:05:55.460 --> 00:05:59.600
standard library, and you said you run this, and that's your app.

00:05:59.600 --> 00:06:00.980
That's not bad, right?

00:06:00.980 --> 00:06:01.420
Yeah.

00:06:01.420 --> 00:06:05.800
So let me introduce you to PyOxy, the PyOxy Python runner.

00:06:05.940 --> 00:06:14.360
Now, a while ago, we spoke about this thing called PyOxygen, no, PyOxidizer, that's what

00:06:14.360 --> 00:06:15.620
it was, PyOxidizer.

00:06:15.620 --> 00:06:23.500
And this is kind of like an advanced version of Py2.exe, or Py2.app, or PyInstaller.

00:06:23.500 --> 00:06:28.760
But what's really nice is that it bundles the stuff up just sort of all into one thing, and

00:06:28.760 --> 00:06:34.000
it runs out of memory instead of creating like a file structure of the files that you need,

00:06:34.080 --> 00:06:35.940
and then, you know, sort of altering the path.

00:06:35.940 --> 00:06:38.720
So like a copy of Python will run that, and so on.

00:06:38.720 --> 00:06:45.620
So this PyOxy attempts to make the features of PyOxidizer more accessible and simpler for

00:06:45.620 --> 00:06:45.900
people.

00:06:45.900 --> 00:06:46.520
Okay.

00:06:46.520 --> 00:06:47.840
So here's the deal.

00:06:47.840 --> 00:06:51.200
It is an executable program for running Python interpreters.

00:06:51.200 --> 00:06:56.540
So you can just give somebody this one PyOxy file, and they can, instead of saying Python

00:06:56.540 --> 00:06:59.880
this, they can say PyOxy, some Python file, right?

00:06:59.880 --> 00:07:05.220
You can say like run Python or run Python --and give it a file or something along

00:07:05.220 --> 00:07:06.120
those lines, right?

00:07:06.120 --> 00:07:08.940
And it's just a thing you copy around.

00:07:08.940 --> 00:07:12.820
You don't have to worry about installing it or configuring your system or anything like

00:07:12.820 --> 00:07:13.040
that.

00:07:13.040 --> 00:07:17.860
So it's kind of a really easy way to pass around an executable that is Python and the standard

00:07:17.860 --> 00:07:23.560
library without all the overhead or setup of actually installing a Python runtime.

00:07:23.560 --> 00:07:24.200
Okay.

00:07:24.200 --> 00:07:24.760
Wow.

00:07:24.940 --> 00:07:25.180
Okay.

00:07:25.180 --> 00:07:25.560
Yeah.

00:07:25.560 --> 00:07:26.020
Yeah.

00:07:26.020 --> 00:07:27.160
So let me go back up here.

00:07:27.160 --> 00:07:27.720
That's pretty cool.

00:07:27.720 --> 00:07:28.060
That's one.

00:07:28.060 --> 00:07:29.880
It's a single file.

00:07:29.880 --> 00:07:34.500
It's a single file that is a highly portable distribution of CPython.

00:07:34.500 --> 00:07:40.520
So for example, on macOS and Linux, it statically links in a lot of the files that are dependencies

00:07:40.520 --> 00:07:44.640
that you might find, you know, so if you try to run something in Python, it might go like,

00:07:44.640 --> 00:07:49.340
oh, you have to install this other like C library in order for it to work correctly.

00:07:49.340 --> 00:07:54.280
So all those things are also like its dependencies are statically compiled into it, which is pretty

00:07:54.280 --> 00:07:54.520
cool.

00:07:54.520 --> 00:07:58.940
Another thing that's interesting is it gives you a lot more control over the interpreter

00:07:58.940 --> 00:08:00.020
and how it behaves.

00:08:00.020 --> 00:08:04.480
Like you can pass it configuration files and do all sorts of crazy stuff to really tweak

00:08:04.480 --> 00:08:09.000
the behavior of the runtime, the Python runtime that it comes with.

00:08:09.000 --> 00:08:09.440
Yeah.

00:08:09.440 --> 00:08:13.400
And it's just to sort of make PyOxidizer apps more accessible.

00:08:13.900 --> 00:08:14.060
Okay.

00:08:14.060 --> 00:08:20.700
So yeah, so it gives you, it's built with PyOxidizer and basically it gives you its own standalone

00:08:20.700 --> 00:08:20.940
one.

00:08:20.940 --> 00:08:23.180
Like I said, the, it has the whole interpreter.

00:08:23.180 --> 00:08:25.800
It has the stuff statically linked.

00:08:25.800 --> 00:08:27.740
It has the standard library.

00:08:27.740 --> 00:08:31.880
And I think you can link your own libraries into it as well, which is pretty awesome.

00:08:31.880 --> 00:08:34.380
And you could also give it, like I said, more control.

00:08:34.380 --> 00:08:36.780
So you can create a configuration YAML file.

00:08:37.140 --> 00:08:42.240
And when you run it, you can say, I want you to debug allocations, or I want you to, you

00:08:42.240 --> 00:08:47.580
know, run, run this command to initialize the interpreter before it starts to run any code

00:08:47.580 --> 00:08:48.360
and things like that.

00:08:48.360 --> 00:08:52.640
So you can give it this YAML config file and so on.

00:08:52.640 --> 00:08:55.320
So anyway, it's a pretty new project.

00:08:55.320 --> 00:08:58.540
This is from Gregory Sork.

00:08:58.540 --> 00:09:00.780
And he says, it's very young.

00:09:00.780 --> 00:09:03.880
I hacked it together to try to get better exposure for PyOxidizer.

00:09:04.140 --> 00:09:07.940
For people who want to build things that they can distribute more easily and so on.

00:09:07.940 --> 00:09:14.080
And for me, he's talking about, oh, there's some certain circumstances where maybe you want

00:09:14.080 --> 00:09:17.640
to have people run your script so you can send the script and then this thing and so on.

00:09:17.640 --> 00:09:24.040
It's supposed to be sort of on par with zip app, which lets you ship the zipped up thing

00:09:24.040 --> 00:09:25.160
of your app and then run it.

00:09:25.160 --> 00:09:28.320
But the benefit is it already comes with Python.

00:09:28.320 --> 00:09:31.120
Like a lot of these zip, shiv, pecs, et cetera.

00:09:31.340 --> 00:09:34.660
They all require that Python is installed on the system.

00:09:34.660 --> 00:09:36.340
And then you can run that, right?

00:09:36.340 --> 00:09:37.180
With its dependencies.

00:09:37.180 --> 00:09:39.060
But this is like, no, it even comes with Python.

00:09:39.060 --> 00:09:40.760
So all that is pretty good.

00:09:40.760 --> 00:09:46.440
What I would love to see out of this is, could I take this and build some sort of UI framework?

00:09:46.440 --> 00:09:52.900
Here that, I don't know, maybe with PyScript and then get like a UI framework I can ship

00:09:52.900 --> 00:09:55.840
to people and just go download this, double click it.

00:09:55.840 --> 00:09:56.600
There's your app.

00:09:56.600 --> 00:09:57.180
Who knows?

00:09:57.620 --> 00:09:58.020
Yeah.

00:09:58.020 --> 00:10:02.800
But anyway, if you're shipping Python to people, this might be worth checking out.

00:10:02.800 --> 00:10:03.260
Yeah.

00:10:03.260 --> 00:10:03.720
Yeah.

00:10:03.720 --> 00:10:04.300
Neat.

00:10:04.300 --> 00:10:05.100
Yeah.

00:10:05.100 --> 00:10:07.800
Kim out in the audience asked, it looks very handy.

00:10:07.800 --> 00:10:11.800
Does it make cross-platform executable?

00:10:11.800 --> 00:10:16.120
I think you might have to run a build command or something or ship the right binary for each

00:10:16.120 --> 00:10:16.860
platform.

00:10:16.860 --> 00:10:19.400
But it does support macOS, Windows, and Linux.

00:10:19.640 --> 00:10:20.780
So that's pretty cool.

00:10:20.780 --> 00:10:24.160
Now, maybe you covered this and I just missed it.

00:10:24.160 --> 00:10:27.040
What does it, does it deal with my dependencies?

00:10:27.040 --> 00:10:28.700
Like if I have third-party dependencies?

00:10:28.700 --> 00:10:31.400
That's what I'm not 100% sure how to do.

00:10:31.400 --> 00:10:32.440
And I looked through it.

00:10:32.440 --> 00:10:33.120
I was looking for that.

00:10:33.120 --> 00:10:35.620
There's this oxidized importer.

00:10:35.620 --> 00:10:36.380
Okay.

00:10:36.380 --> 00:10:41.340
Which it talks about like this embeds a copy of the Python standard library and it imports

00:10:41.340 --> 00:10:43.540
from memory using the oxidized importer.

00:10:43.540 --> 00:10:46.740
I think that you could use that as well for your own dependencies.

00:10:47.360 --> 00:10:51.740
And I'm pretty sure that's the goal of this pie oxidizer project in the first place.

00:10:51.740 --> 00:10:52.840
So I would think so.

00:10:52.840 --> 00:10:55.520
But nothing from this article was really clear.

00:10:55.520 --> 00:11:00.260
Like, and here's how you bring in requests or HTTPX or whatever you're going to bring along,

00:11:00.260 --> 00:11:00.560
you know?

00:11:00.560 --> 00:11:00.900
Yeah.

00:11:00.900 --> 00:11:01.880
Yeah.

00:11:01.880 --> 00:11:02.300
Okay.

00:11:02.300 --> 00:11:03.540
Or pie test.

00:11:03.540 --> 00:11:08.640
I was actually just thinking if I, you know, run these tests.

00:11:08.640 --> 00:11:11.260
Well, what version are you using?

00:11:11.260 --> 00:11:11.580
Okay.

00:11:11.580 --> 00:11:12.440
Just fine.

00:11:12.440 --> 00:11:16.740
Here, just install this and run this test with this.

00:11:17.100 --> 00:11:17.900
And that would be cool.

00:11:17.900 --> 00:11:17.960
Yeah.

00:11:17.960 --> 00:11:18.540
Exactly.

00:11:18.540 --> 00:11:19.180
Yeah.

00:11:19.180 --> 00:11:23.920
And Alvaro is, you know, when I was talking about UI stuff, he says, what about pie oxy

00:11:23.920 --> 00:11:24.660
plus textual?

00:11:24.660 --> 00:11:25.880
Yeah.

00:11:25.880 --> 00:11:26.960
That'd be pretty neat as well.

00:11:26.960 --> 00:11:27.220
Yeah.

00:11:27.220 --> 00:11:28.320
Just around the corner.

00:11:28.320 --> 00:11:28.900
Yeah.

00:11:28.900 --> 00:11:29.320
Cool.

00:11:29.320 --> 00:11:29.680
All right.

00:11:29.680 --> 00:11:31.740
Well, that's pie oxy.

00:11:31.740 --> 00:11:32.520
People can check it out.

00:11:32.520 --> 00:11:33.240
All right.

00:11:33.640 --> 00:11:39.240
Well, how about regular expressions?

00:11:39.240 --> 00:11:40.000
Do you like those?

00:11:40.000 --> 00:11:44.120
When they work, I love them.

00:11:44.120 --> 00:11:48.520
When they don't, I'm like, what is this madness I've gotten myself into?

00:11:48.520 --> 00:11:48.820
Okay.

00:11:48.820 --> 00:11:53.120
So I was almost afraid to like talk about this, but it's a really awesome article because,

00:11:53.120 --> 00:11:55.520
because sometimes you need regular expressions.

00:11:55.520 --> 00:12:00.980
And, and one of the things there's lots of, I look that I like about this article.

00:12:00.980 --> 00:12:06.180
What I'm talking about is an article called, the unreasonable effectiveness of f-strings

00:12:06.180 --> 00:12:06.940
and verbose.

00:12:07.340 --> 00:12:14.840
so, regular expressions and all languages, including, I think, and including Python have,

00:12:14.840 --> 00:12:18.480
um, have a notion of, verbose mode.

00:12:18.480 --> 00:12:20.880
And I've always been enticed by this.

00:12:20.880 --> 00:12:26.680
The verbose mode idea is that you can like, instead of having this reared, you, you still

00:12:26.680 --> 00:12:32.460
have the hard to read, regular expression stuff, but you can put comment, you can put spaces

00:12:32.460 --> 00:12:33.520
and comments in it.

00:12:33.520 --> 00:12:36.480
And, and then it can be multi-line, right?

00:12:36.480 --> 00:12:36.900
What?

00:12:37.220 --> 00:12:38.000
It can be multi-line.

00:12:38.000 --> 00:12:38.240
Yeah.

00:12:38.240 --> 00:12:42.600
It can be multi-line and you can have a bunch of, comments in there to say, oh, this

00:12:42.600 --> 00:12:48.280
part of the regular expression, what it's doing is this, you know, and then, so it

00:12:48.280 --> 00:12:51.780
makes it little, little snippets of regular expression are easier to read.

00:12:51.780 --> 00:12:53.860
You're like, oh yeah, I can see that it's doing that.

00:12:53.860 --> 00:12:54.220
Great.

00:12:54.220 --> 00:12:57.580
When it's, when you clog it all together, which makes it really hard to read.

00:12:57.580 --> 00:13:04.060
So, and then, and then of course you can build up strings in Python with f-strings

00:13:04.060 --> 00:13:06.240
and do string replacement.

00:13:06.240 --> 00:13:06.980
How awesome.

00:13:07.100 --> 00:13:13.720
So that's what this article is about is really talking about, using, taking some

00:13:13.720 --> 00:13:19.660
of the complicated bits of your regular expression or duplicated bits where you, it shows up several

00:13:19.660 --> 00:13:25.020
times in your regular expression and pulling that out, that string out, and even maybe commenting

00:13:25.020 --> 00:13:25.480
that.

00:13:25.480 --> 00:13:31.720
And then, dropping it in with, f-strings to build up a complex regular expression.

00:13:32.100 --> 00:13:33.100
It's, it's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:33.100
It's brilliant.

00:13:33.100 --> 00:13:34.100
It's brilliant.

00:13:34.100 --> 00:13:39.860
And it also is one of the best explanations I've ever read on, on, on, verbose, regular expressions.

00:13:39.860 --> 00:13:40.860
So it's pretty cool.

00:13:40.860 --> 00:13:40.860
Yeah.

00:13:40.860 --> 00:13:45.860
I never really thought to refactor the pattern so that you have multiple strings.

00:13:45.860 --> 00:13:46.860
Yeah.

00:13:46.860 --> 00:13:47.860
Be like, here's the part that's repeated.

00:13:47.860 --> 00:13:49.860
So we'll have a pattern that that's that thing.

00:13:49.860 --> 00:13:51.860
And then F string it into the other pieces.

00:13:51.860 --> 00:13:52.860
Yeah.

00:13:52.860 --> 00:13:53.860
but it makes perfect sense.

00:13:53.860 --> 00:13:54.860
Of course you should do it.

00:13:54.860 --> 00:13:55.860
Yeah.

00:13:55.860 --> 00:13:57.860
And now, I mean, I don't use it.

00:13:57.860 --> 00:14:02.860
I mean, actually I kind of do, I use regular expressions on a regular basis.

00:14:02.860 --> 00:14:09.740
but, the, but not like every day, but, but it's always something that I

00:14:09.740 --> 00:14:12.740
whenever I put it in there, I'm like, is anybody else going to be able to read this?

00:14:12.740 --> 00:14:17.740
And so I put comments around it, but I've never, I haven't ever really embraced verbose

00:14:17.740 --> 00:14:20.740
mode and I'm definitely going to use this now.

00:14:20.740 --> 00:14:21.740
Yeah, for sure.

00:14:21.740 --> 00:14:26.740
So the other thing real quick is you can have f-strings and you can have raw strings

00:14:26.740 --> 00:14:29.740
and you can have raw f-strings apparently in Python.

00:14:29.740 --> 00:14:33.740
So the prefix is F R triple quote, multi line.

00:14:33.740 --> 00:14:36.740
Like that's, that's some serious string action happening right there, man.

00:14:36.740 --> 00:14:37.740
Yeah.

00:14:37.740 --> 00:14:38.740
raw f-strings.

00:14:38.740 --> 00:14:39.620
Nice.

00:14:39.620 --> 00:14:40.620
Yeah.

00:14:40.620 --> 00:14:41.620
Yeah.

00:14:41.620 --> 00:14:42.620
Yeah.

00:14:42.620 --> 00:14:45.620
And, Neil out in the audience asks you, Brian, do you like your regular expressions?

00:14:45.620 --> 00:14:47.620
Greedy or non greedy?

00:14:47.620 --> 00:14:48.620
Okay.

00:14:48.620 --> 00:14:52.620
I, I, it depends on what you're trying to do.

00:14:52.620 --> 00:14:53.620
So.

00:14:53.620 --> 00:14:54.620
Yeah.

00:14:54.620 --> 00:14:55.620
I don't want mine to be greedy.

00:14:55.620 --> 00:14:57.620
Let's share, share, share kindly.

00:14:57.620 --> 00:14:58.620
All right.

00:14:58.620 --> 00:14:59.620
Are we ready for the next one?

00:14:59.620 --> 00:15:00.620
Yes.

00:15:00.620 --> 00:15:01.620
Cool.

00:15:01.620 --> 00:15:02.620
All right.

00:15:02.620 --> 00:15:05.620
So this one I want to talk about, I'm going to start off from a weird place from a tweet

00:15:05.620 --> 00:15:09.620
that I gave because I can't find anywhere else to talk about it.

00:15:09.620 --> 00:15:12.620
Like this is why this needs talking about.

00:15:12.620 --> 00:15:17.620
So I just want to sort of highlight some really cool stuff for people who are using PyCharm

00:15:17.620 --> 00:15:20.620
and doing open source stuff that involves pull requests.

00:15:20.620 --> 00:15:22.620
And these can be pull requests to your private repo.

00:15:22.620 --> 00:15:25.620
Like one team member gave a PR back to the repo.

00:15:25.620 --> 00:15:27.620
It doesn't have to be open, open source.

00:15:27.620 --> 00:15:28.620
Okay.

00:15:28.620 --> 00:15:31.620
So if you're using PyCharm, check this out.

00:15:31.620 --> 00:15:34.620
Let me pull up this screen.

00:15:34.620 --> 00:15:35.620
Come on.

00:15:35.620 --> 00:15:36.620
Please.

00:15:36.620 --> 00:15:37.620
Oh, I'm not logged in.

00:15:37.620 --> 00:15:38.620
Oh, there we go.

00:15:38.620 --> 00:15:39.620
I thought it might not.

00:15:39.620 --> 00:15:40.620
Let me get the image up.

00:15:40.620 --> 00:15:41.620
Anyway.

00:15:41.620 --> 00:15:42.620
So check this out.

00:15:42.620 --> 00:15:45.620
So people are probably familiar with the get support in PyCharm, you know, VS Code

00:15:45.620 --> 00:15:46.620
PyCharm.

00:15:46.620 --> 00:15:47.620
They all have really good get support.

00:15:47.620 --> 00:15:49.620
You can see your changes.

00:15:49.620 --> 00:15:54.620
A lot of times you have this, sort of over this gray little over overlay that says

00:15:54.620 --> 00:15:57.620
who recently edited a file or a line.

00:15:57.620 --> 00:16:01.620
It's really cool to go back with like get lens turned on for CPython.

00:16:01.620 --> 00:16:03.620
Cause you'll see stuff from like 30 years ago.

00:16:03.620 --> 00:16:06.620
Guido made this commit and here was the commit message.

00:16:06.620 --> 00:16:07.620
You know, you're like, what?

00:16:07.620 --> 00:16:08.620
This is crazy.

00:16:08.620 --> 00:16:08.620
Right.

00:16:08.620 --> 00:16:13.620
But working with PRs is one of the things that doesn't normally seem to fit.

00:16:13.620 --> 00:16:17.620
And so I don't know when this got in there, but not too recently.

00:16:17.620 --> 00:16:19.620
There's a, now a pull request tab.

00:16:19.620 --> 00:16:25.620
So if you open a GitHub repository, if you're logged into GitHub and that GitHub repository has

00:16:25.620 --> 00:16:29.620
a pull request and you open up the section, it gives you a list of all the open.

00:16:29.620 --> 00:16:33.620
And I guess maybe you can toggle it close as well, but all the list of the open pull requests.

00:16:33.620 --> 00:16:33.620
Hmm.

00:16:33.620 --> 00:16:37.620
If you click on one of them, it'll show you all the details of the pull request.

00:16:37.620 --> 00:16:39.620
The whole conversation.

00:16:39.620 --> 00:16:42.620
If you click on that, who's the reviewer, you can change that.

00:16:42.620 --> 00:16:46.620
Who's on a, who's it assigned to whether there's labels, whether it's been merged.

00:16:46.620 --> 00:16:47.620
Wow.

00:16:47.620 --> 00:16:48.620
Wow.

00:16:48.620 --> 00:16:50.620
And then like on the right, you have this whole conversation.

00:16:50.620 --> 00:16:51.620
You can see sort of the flow.

00:16:51.620 --> 00:16:54.620
This person commented this and they made these few more changes.

00:16:54.620 --> 00:16:55.620
Then they commented again here.

00:16:55.620 --> 00:16:57.620
This is all really pretty neat.

00:16:57.620 --> 00:17:02.620
But the thing that is noteworthy, the reason I brought this up is there's a button that says

00:17:02.620 --> 00:17:03.620
check out.

00:17:03.620 --> 00:17:07.620
So instead of trying to create a branch or fork their repo and check in, like you just, I

00:17:07.620 --> 00:17:11.620
don't know where this repo or this PR came from or what branch it was against.

00:17:11.620 --> 00:17:15.620
I just want to check it out and run it locally, run the test against it, see what it looks

00:17:15.620 --> 00:17:16.620
like.

00:17:16.620 --> 00:17:17.620
Yeah.

00:17:17.620 --> 00:17:18.620
Go.

00:17:18.620 --> 00:17:19.620
Isn't that awesome?

00:17:19.620 --> 00:17:20.620
Yeah.

00:17:20.620 --> 00:17:21.620
That is really, really awesome.

00:17:21.620 --> 00:17:22.620
I like it.

00:17:22.620 --> 00:17:23.620
Yeah.

00:17:23.620 --> 00:17:24.620
Cause normally you're juggling a lot.

00:17:24.620 --> 00:17:26.620
Maybe you have CI, continuous integration that tells you like the linting pass, but other

00:17:26.620 --> 00:17:31.620
times you want to actually just get it and run it and play with it and decide, you know,

00:17:31.620 --> 00:17:32.620
did this make the code slower?

00:17:32.620 --> 00:17:33.620
Did it make it faster?

00:17:33.620 --> 00:17:38.620
Do I like how like the result of this feature looks, you know, especially if it's like a UI thing

00:17:38.620 --> 00:17:39.620
or something.

00:17:39.620 --> 00:17:40.620
Right.

00:17:40.620 --> 00:17:42.620
So I think this is, this is super cool.

00:17:42.620 --> 00:17:45.620
And the reason I bring it up is there's like nowhere in the documentation.

00:17:45.620 --> 00:17:50.620
Like if you go over to PyCharm here and you look for pull requests, there's, they don't

00:17:50.620 --> 00:17:51.620
even mention this.

00:17:51.620 --> 00:17:52.620
Right.

00:17:52.620 --> 00:17:53.620
So I don't think people necessarily know about this.

00:17:53.620 --> 00:17:54.620
Like, it seems.

00:17:54.620 --> 00:17:55.620
It's a stealth feature.

00:17:55.620 --> 00:17:56.620
It's a stealth feature.

00:17:56.620 --> 00:18:01.620
It seems totally worth highlighting because dealing with PRs in that way is actually kind

00:18:01.620 --> 00:18:02.620
of janky.

00:18:02.620 --> 00:18:03.620
Right.

00:18:03.620 --> 00:18:07.620
It's like, it takes a little bit of understanding, get maybe more than, and GitHub more than a lot

00:18:07.620 --> 00:18:08.620
of people would off the bat.

00:18:08.620 --> 00:18:11.620
So if you just go click, check out, play with it.

00:18:11.620 --> 00:18:12.620
Nope.

00:18:12.620 --> 00:18:13.620
I don't want it.

00:18:13.620 --> 00:18:14.620
Or yes, I love it.

00:18:14.620 --> 00:18:15.620
That's, I think that's great.

00:18:15.620 --> 00:18:19.620
I would still actually manage the PR and GitHub, but the ability to explore it super quick and

00:18:19.620 --> 00:18:21.620
easy within your project, I think is super cool.

00:18:21.620 --> 00:18:22.620
Yeah.

00:18:22.620 --> 00:18:27.620
And quickly grab the code because I've, I mean, I know in GitHub, you can get it.

00:18:27.620 --> 00:18:29.620
You can clone their branch and.

00:18:29.620 --> 00:18:30.620
Yeah, exactly.

00:18:30.620 --> 00:18:31.620
But it's hard.

00:18:31.620 --> 00:18:32.620
It's like not too easy.

00:18:32.620 --> 00:18:34.620
It's a, it's several clicks at least to find it.

00:18:34.620 --> 00:18:36.620
And so, yeah.

00:18:36.620 --> 00:18:37.620
Right.

00:18:37.620 --> 00:18:40.620
And do you actually want it cloned to your, your account?

00:18:40.620 --> 00:18:41.620
Maybe not.

00:18:41.620 --> 00:18:46.620
I want to check out the code, you know, like, so grab the right commit, hash, shot, whatever.

00:18:46.620 --> 00:18:47.620
Yeah.

00:18:47.620 --> 00:18:50.620
Also really quick while we're on this topic, I just want to give a quick shout out to this.

00:18:50.620 --> 00:18:54.620
So if you go to just the jetbrains.com/pycharm right now across the top, there's this, oh,

00:18:54.620 --> 00:18:57.620
here, there's this cool upcoming webinar.

00:18:57.620 --> 00:19:00.620
10 things, 10 get things you wish you knew in PyCharm.

00:19:00.620 --> 00:19:03.620
Very oddly that, that is me.

00:19:03.620 --> 00:19:08.620
So anyway, if you want to, I'm going to do a webcast next week on June 7th.

00:19:08.620 --> 00:19:09.620
Oh, nice.

00:19:09.620 --> 00:19:12.620
About a whole bunch of get fun things in PyCharm and UI tools and whatnot.

00:19:12.620 --> 00:19:15.620
So if you want to check that out, they definitely can.

00:19:15.620 --> 00:19:16.620
Cool.

00:19:16.620 --> 00:19:17.620
Yeah.

00:19:17.620 --> 00:19:18.620
All right.

00:19:18.620 --> 00:19:19.620
So that's it for my thing though.

00:19:19.620 --> 00:19:21.620
Check out, if you're using PyCharm, use, check out this pull request thing.

00:19:21.620 --> 00:19:23.620
It's even in the free version of PyCharm.

00:19:23.620 --> 00:19:24.620
So it's, it's worth noting.

00:19:24.620 --> 00:19:25.620
Nice.

00:19:25.620 --> 00:19:26.620
Huh.

00:19:26.620 --> 00:19:30.620
Let's see a really, really quick real time follow up.

00:19:30.620 --> 00:19:31.620
Roman Wright.

00:19:31.620 --> 00:19:32.620
Hey Roman.

00:19:32.620 --> 00:19:34.620
Says, yes, it helps you sort out PRs so much.

00:19:34.620 --> 00:19:35.620
I totally agree.

00:19:35.620 --> 00:19:39.620
And then Wolf says, is it available in IntelliJ and does it work with GitLab?

00:19:39.620 --> 00:19:41.620
I don't know if it works with GitLab.

00:19:41.620 --> 00:19:46.620
I'm quite sure it's available IntelliJ in IntelliJ because like PyCharm is just

00:19:46.620 --> 00:19:48.620
basically specialized IntelliJ.

00:19:48.620 --> 00:19:53.620
So I'd, I'd be very surprised if it weren't available in IntelliJ, but I can't say for sure

00:19:53.620 --> 00:19:54.620
in GitLab.

00:19:54.620 --> 00:19:55.620
I don't know if it's a documentation, but I also can't find that.

00:19:55.620 --> 00:19:56.620
So anyway.

00:19:56.620 --> 00:20:01.620
So on the PyCharm side, there's, isn't there supposed to like a new, some UI changes that

00:20:01.620 --> 00:20:03.620
happened recently or, you know?

00:20:03.620 --> 00:20:04.620
Anyway.

00:20:04.620 --> 00:20:05.620
Possibly.

00:20:05.620 --> 00:20:11.620
Oh, one of the things that changed recently that was, I actually kept stumbling into it

00:20:11.620 --> 00:20:14.620
like on the Git stuff is they have little overlays of who made changes when kind of like that

00:20:14.620 --> 00:20:16.620
Git lens from VS Code I described.

00:20:16.620 --> 00:20:17.620
Yeah.

00:20:17.620 --> 00:20:20.620
They started adding that and I kept clicking it by accident, trying to click on the line.

00:20:20.620 --> 00:20:22.620
So that's like, why does it keep popping up a diff?

00:20:22.620 --> 00:20:23.620
Oh, I see.

00:20:23.620 --> 00:20:24.620
Okay.

00:20:24.620 --> 00:20:26.620
So I kind of crashed into it, but yeah.

00:20:26.620 --> 00:20:27.620
Okay.

00:20:27.620 --> 00:20:28.620
Anyway, if you're doing PRs, check this out.

00:20:28.620 --> 00:20:30.620
If you're doing PRs and using PyCharm, check this out.

00:20:30.620 --> 00:20:31.620
It's definitely useful.

00:20:31.620 --> 00:20:32.620
All right.

00:20:32.620 --> 00:20:34.620
Well, so we have no guests.

00:20:34.620 --> 00:20:36.620
So that's our items for today, right?

00:20:36.620 --> 00:20:37.620
It is.

00:20:37.620 --> 00:20:38.620
It is.

00:20:38.620 --> 00:20:41.620
Well, we would be remiss to not have extras though.

00:20:41.620 --> 00:20:42.620
Of course.

00:20:42.620 --> 00:20:43.620
So yeah.

00:20:43.620 --> 00:20:45.620
You want to do the extras first?

00:20:45.620 --> 00:20:46.620
Your extras first?

00:20:46.620 --> 00:20:47.620
Sure.

00:20:47.620 --> 00:20:48.620
I just got one.

00:20:48.620 --> 00:20:52.620
So the, it was a couple of weeks ago.

00:20:52.620 --> 00:21:01.620
We, I think we talked about, about Pandas Tutor switching to Piedide, I think.

00:21:01.620 --> 00:21:02.620
Yep.

00:21:02.620 --> 00:21:08.620
So there's a, there's an article that came out on the Piedide blog that is a panda about

00:21:08.620 --> 00:21:13.620
pandas tutors switching to, or Piedide, Piedide, Piedide.

00:21:13.620 --> 00:21:19.620
and so, one of the reason why I bring it up is because there's some cool stuff

00:21:19.620 --> 00:21:20.620
in here.

00:21:20.620 --> 00:21:24.620
It's a, it's not just, Hey, we did this, but it's also, why did we do it?

00:21:24.620 --> 00:21:29.620
And kind of walking through some of the stuff, how they did a self self-contained pandas tutor

00:21:29.620 --> 00:21:35.620
wheel, you know, dealing with JavaScript and imports and all that sort of stuff.

00:21:35.620 --> 00:21:38.620
And the fine tuning and what work has to go further.

00:21:38.620 --> 00:21:43.620
So other people that are like, Hey, this Piedide actually proof of concept.

00:21:43.620 --> 00:21:44.620
It's starting to look cool.

00:21:44.620 --> 00:21:45.620
I want to do this too.

00:21:45.620 --> 00:21:47.620
This might be a nice thing for people to check out.

00:21:47.620 --> 00:21:49.620
So, yeah, this is super nice.

00:21:49.620 --> 00:21:54.620
And I definitely think the, what are the rough edges and what worked really well?

00:21:54.620 --> 00:21:58.620
Those types of lessons for now are going to be really valuable for people trying to adopt

00:21:58.620 --> 00:21:59.620
this.

00:21:59.620 --> 00:21:59.620
Yeah.

00:21:59.620 --> 00:22:00.620
Well, that's all my extras.

00:22:00.620 --> 00:22:01.620
Awesome.

00:22:01.620 --> 00:22:02.620
All right.

00:22:02.620 --> 00:22:07.620
Well, let's just make it a straight run for Piedide and Piescript right out.

00:22:07.620 --> 00:22:16.620
So last week I did two videos on Piescript, which is based on Piedide as well.

00:22:16.620 --> 00:22:19.620
So first one is a 30 minutes video.

00:22:19.620 --> 00:22:23.620
I sort of hinted that I was working on this, but remember I said it wasn't quite released

00:22:23.620 --> 00:22:23.620
yet, Brian.

00:22:23.620 --> 00:22:24.620
Yeah.

00:22:24.620 --> 00:22:25.620
Last episode.

00:22:25.620 --> 00:22:26.620
So now it's out.

00:22:26.620 --> 00:22:27.620
So now you can check out, I'll link to it.

00:22:27.620 --> 00:22:32.620
You can check out my 30 minute Python, Piescript, WebAssembly, Python web apps running locally,

00:22:32.620 --> 00:22:34.620
which is super fun.

00:22:34.620 --> 00:22:38.620
It's all about not just, you know, let's like take some Python and put it in the browser,

00:22:38.620 --> 00:22:44.620
but how can you use some like Piedash config settings to override where Piescript actually

00:22:44.620 --> 00:22:45.620
comes from.

00:22:45.620 --> 00:22:49.620
So the Piedide, the runtime comes from, so you can like put that locally in your app and then

00:22:49.620 --> 00:22:52.620
download it offline and all sorts of fun stuff there.

00:22:52.620 --> 00:22:53.620
Cool.

00:22:53.620 --> 00:22:57.620
So basically building an offline progressive web app that is like, can be almost a hundred percent

00:22:57.620 --> 00:22:58.620
offline.

00:22:58.620 --> 00:23:01.620
This one calls an API, so it still needs this API.

00:23:01.620 --> 00:23:02.620
Anyway, that was really fun.

00:23:02.620 --> 00:23:06.620
And then the next day after releasing that, it occurred to me, do you know what supports

00:23:06.620 --> 00:23:07.620
progressive web apps?

00:23:07.620 --> 00:23:09.620
iOS and Android.

00:23:09.620 --> 00:23:15.620
So I created a second video called Python iOS web apps with Piescript and offline PWAs.

00:23:15.620 --> 00:23:23.620
And so here is, if you're looking at the screen, there's a, on my iPad, there is a web app that

00:23:23.620 --> 00:23:29.620
runs Piescript talking to a Flask based API over the internet.

00:23:29.620 --> 00:23:34.620
And it is basically, you can go up and basically say, install this as an app on my iPad.

00:23:34.620 --> 00:23:39.620
And when you launch it, that install process already down downloads the WebAssembly and the

00:23:39.620 --> 00:23:43.620
run the standard library and all the WebAssembly stuff that makes it large.

00:23:43.620 --> 00:23:44.620
So you just boom.

00:23:44.620 --> 00:23:49.620
And it opens up within like less than two seconds running Python client side on iOS.

00:23:49.620 --> 00:23:50.620
That is so cool.

00:23:50.620 --> 00:23:52.620
I'm seeing lots of uses for this.

00:23:52.620 --> 00:23:58.620
I mean, people could do like dashboards of pipelines and all sorts of stuff and have them be on tablets

00:23:58.620 --> 00:23:59.620
now.

00:23:59.620 --> 00:24:00.620
So yeah, absolutely.

00:24:00.620 --> 00:24:01.620
Yeah.

00:24:01.620 --> 00:24:05.620
It's, it's, I mean, once you've already made it a progressive web app, it's like a few button clicks,

00:24:05.620 --> 00:24:10.620
like this whole video about this iOS thing with like setting the stage and everything is, it's three minutes.

00:24:10.620 --> 00:24:15.620
So, I mean, it's not a hard process to make it happen, but it's just not obvious.

00:24:15.620 --> 00:24:16.620
And it's really cool that it works that way.

00:24:16.620 --> 00:24:16.620
Cool.

00:24:16.620 --> 00:24:17.620
Yeah.

00:24:17.620 --> 00:24:18.620
All right.

00:24:18.620 --> 00:24:20.620
Well, that's it for my items.

00:24:20.620 --> 00:24:21.620
I do have a joke.

00:24:21.620 --> 00:24:22.620
Nice.

00:24:22.620 --> 00:24:23.620
Nice.

00:24:23.620 --> 00:24:25.620
And I know you might have a joke as well.

00:24:25.620 --> 00:24:25.620
Yeah.

00:24:25.620 --> 00:24:26.620
Awesome.

00:24:26.620 --> 00:24:27.620
Okay.

00:24:27.620 --> 00:24:28.620
I'll go with mine first.

00:24:28.620 --> 00:24:29.620
Cause mine's easy.

00:24:29.620 --> 00:24:32.620
And then I have a bonus joke for you based on your topic that I didn't, didn't see coming.

00:24:32.620 --> 00:24:33.620
Okay.

00:24:33.620 --> 00:24:35.620
So this one comes from Brian skin.

00:24:35.620 --> 00:24:36.620
Thanks, Brian.

00:24:36.620 --> 00:24:41.620
I just sort of pointed out a joke from Seth and it says people are out here just dangerously

00:24:41.620 --> 00:24:43.620
thrown around SQL abstraction layers.

00:24:43.620 --> 00:24:48.620
And if we aren't careful, someone's going to lose an arm and O R M.

00:24:48.620 --> 00:24:49.620
It's pretty good.

00:24:49.620 --> 00:24:50.620
Yeah.

00:24:50.620 --> 00:24:51.620
It's really good.

00:24:51.620 --> 00:24:51.620
Yeah.

00:24:51.620 --> 00:24:52.620
Yeah.

00:24:52.620 --> 00:24:55.620
Actually, if you are careful, you can lose your arm for good.

00:24:55.620 --> 00:24:56.620
Yes.

00:24:56.620 --> 00:24:58.620
And still be, still be all right.

00:24:58.620 --> 00:24:59.620
Yeah.

00:24:59.620 --> 00:25:00.620
All right.

00:25:00.620 --> 00:25:04.620
So here, here's the, here's the real time joke, a followup that, based on your, your,

00:25:04.620 --> 00:25:05.620
um, okay.

00:25:05.620 --> 00:25:06.620
Regex one.

00:25:06.620 --> 00:25:07.620
Ask me why I'm looking like this.

00:25:07.620 --> 00:25:08.620
Why?

00:25:08.620 --> 00:25:11.620
Well, that's just my regular expression.

00:25:11.620 --> 00:25:12.620
It's terrible.

00:25:12.620 --> 00:25:14.620
It's really bad.

00:25:14.620 --> 00:25:15.620
All right.

00:25:15.620 --> 00:25:16.620
I wish I had somebody in my life.

00:25:16.620 --> 00:25:18.620
I could share that with other than you.

00:25:18.620 --> 00:25:19.620
Okay.

00:25:19.620 --> 00:25:20.620
Okay.

00:25:20.620 --> 00:25:21.620
If other people listen to the show, we could share it.

00:25:21.620 --> 00:25:22.620
Okay.

00:25:22.620 --> 00:25:28.620
So, the, there's like all sorts of AI and stuff going into, code editors.

00:25:28.620 --> 00:25:31.620
Now that make them like do all sorts of stuff to help you out.

00:25:31.620 --> 00:25:32.620
Right.

00:25:32.620 --> 00:25:39.620
So, Kermit the frog looking out of, out of rainy window.

00:25:39.620 --> 00:25:44.620
It's when you've barely started writing a line of code and your ID already lets you know about

00:25:44.620 --> 00:25:49.620
three syntax errors, two runtime errors, a grammar mistake, five misdemeanors, contempt of court

00:25:49.620 --> 00:25:50.620
and treason.

00:25:50.620 --> 00:25:54.620
Joe's getting started.

00:25:54.620 --> 00:25:55.620
Why is it so hard?

00:25:55.620 --> 00:25:56.620
I love it.

00:25:56.620 --> 00:25:57.620
That's really good.

00:25:57.620 --> 00:25:58.620
Anyway.

00:25:58.620 --> 00:25:59.620
Yeah.

00:25:59.620 --> 00:26:00.620
I kind of felt that way today.

00:26:00.620 --> 00:26:01.620
I was, I was playing around with some stuff.

00:26:01.620 --> 00:26:02.620
I'm just like, what is good.

00:26:02.620 --> 00:26:03.620
This is over the top.

00:26:03.620 --> 00:26:04.620
This thing.

00:26:04.620 --> 00:26:05.620
Yeah.

00:26:05.620 --> 00:26:06.620
So, but no, good.

00:26:06.620 --> 00:26:10.620
I'm glad the editors can help us out, but sometimes I feel like an idiot.

00:26:10.620 --> 00:26:11.620
So yes.

00:26:11.620 --> 00:26:12.620
Anyway, indeed.

00:26:12.620 --> 00:26:14.620
Well, great being here with you.

00:26:14.620 --> 00:26:15.620
Good being here with you.

00:26:15.620 --> 00:26:16.620
Indeed.

00:26:16.620 --> 00:26:17.620
Thanks everybody for coming.

00:26:17.620 --> 00:26:18.620
Bye everyone.

00:26:18.620 --> 00:26:19.620
Thanks for being here.

00:26:19.620 --> 00:26:20.620
Bye.

00:26:20.620 --> 00:26:21.620
See you next time.

