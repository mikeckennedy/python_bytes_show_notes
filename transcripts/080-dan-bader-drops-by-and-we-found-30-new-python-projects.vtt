
00:00:00.000 --> 00:00:05.760
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.760 --> 00:00:11.200
This is episode 80 recorded May 25th, 2018. I'm Michael Kennedy.


00:00:11.200 --> 00:00:12.080
And I'm Brian Okken.


00:00:12.080 --> 00:00:13.760
And Brian, we have a special guest, don't we?


00:00:13.760 --> 00:00:14.480
Yes.


00:00:14.480 --> 00:00:16.160
Hey, hello, Dan Bader.


00:00:16.160 --> 00:00:21.840
Hey guys, it's me, Dan. Good to be back on the show. And it's always so nice to hear you do


00:00:21.840 --> 00:00:23.680
this intro live, Mike. It's...


00:00:23.680 --> 00:00:24.720
Thank you.


00:00:24.720 --> 00:00:27.760
It's not, it's unreal. It's like, and you sound so smooth. I love it.


00:00:27.760 --> 00:00:33.840
I guess I've done it 80 times now. Maybe 82 or 83 for the few times I screwed up with


00:00:33.840 --> 00:00:38.440
the wrong date. Well, thank you. And it's great to have you. For those of you who don't


00:00:38.440 --> 00:00:44.800
know Dan, Dan's well known from real Python and deviator.org and a bunch of Python goodness.


00:00:44.800 --> 00:00:48.720
Before we get to the show, I want to say thank you to DigitalOcean. So they're sponsoring


00:00:48.720 --> 00:00:53.760
this episode and a number of them are coming up, as well as the actual infrastructure delivering


00:00:53.760 --> 00:01:00.080
all this technology to you. So Python bytes, Fm slash delusion, get $100 credit for new


00:01:00.080 --> 00:01:05.640
users. Pretty awesome. Brian, I feel like there's a few themes that we touch on frequently


00:01:05.640 --> 00:01:06.640
in this podcast.


00:01:06.640 --> 00:01:11.360
Yeah, I guess that we do. And one of them is packaging. So we've talked about packaging


00:01:11.360 --> 00:01:19.920
a few times. And the Python packaging authority has a has their like tutorial on how to package


00:01:19.920 --> 00:01:25.400
Python packages. And it used to be out of date, but now they've recently revamped it


00:01:25.400 --> 00:01:31.480
and rewritten it. And it's very user friendly now. It's a short little walkthrough of how


00:01:31.480 --> 00:01:38.380
to set up a package and push it to both the test server and then to the full Python package


00:01:38.380 --> 00:01:44.360
index, PYPI. Yeah, I got that out. One of the things that's kind of fun to note is that


00:01:44.360 --> 00:01:49.520
I noted is the readme example is in Markdown. And that's cool.


00:01:49.520 --> 00:01:50.860
That's a new feature, right?


00:01:50.860 --> 00:01:54.820
That's one of the things of them switching to warehouse and the big release of the new


00:01:54.820 --> 00:01:55.900
PyPI.org.


00:01:55.900 --> 00:02:00.340
I think I remember the old examples for setup.py.


00:02:00.340 --> 00:02:05.060
They were either too small, they didn't include everything they needed, or they were too big


00:02:05.060 --> 00:02:06.060
and kind of scary.


00:02:06.060 --> 00:02:11.860
And now this is a medium-sized example setup.py that is actually pretty nice.


00:02:11.860 --> 00:02:16.420
I read through it and it looked like the same tool set that I used to push up, so I think


00:02:16.420 --> 00:02:17.420
it's pretty accurate now.


00:02:17.420 --> 00:02:18.420
So that's nice.


00:02:18.420 --> 00:02:19.420
Nice.


00:02:19.420 --> 00:02:22.020
super out of date. You're like, why am I not using this or using that?


00:02:22.020 --> 00:02:26.740
Yeah, because when I learned how to do it the first time, I think I read both the old


00:02:26.740 --> 00:02:31.580
tutorial and then like four or five or six different blog articles on how to do it now,


00:02:31.580 --> 00:02:36.380
how to do it now, because it changed. But now this is all up to date. So it's good.


00:02:36.380 --> 00:02:38.660
Very nice. Dan, do you do much packaging?


00:02:38.660 --> 00:02:42.620
Yes, I run a couple of open source projects. And I always felt like, you know, exactly


00:02:42.620 --> 00:02:47.820
like what you were just saying, Brian, where I had to combine a couple of tutorials just


00:02:47.820 --> 00:02:50.580
to get it to work and it never really felt all that straightforward.


00:02:50.580 --> 00:02:54.720
And so I think this is a pretty nice and pretty minimal write up.


00:02:54.720 --> 00:02:55.320
I like that.


00:02:55.320 --> 00:02:58.260
And I'm surprised that we're, you know, that the recommendation now seems to be


00:02:58.260 --> 00:03:00.120
to use a Markdown based readme files.


00:03:00.120 --> 00:03:04.320
Like I really like Markdown every year warmed up to a restructured text so much.


00:03:04.320 --> 00:03:07.040
And, it's definitely cool that they're supporting that now.


00:03:07.040 --> 00:03:07.600
That's awesome.


00:03:07.600 --> 00:03:10.020
I think restructured text, maybe predated Markdown.


00:03:10.020 --> 00:03:15.960
And it was, you know, it was the thing when the original pipe I was created.


00:03:15.960 --> 00:03:18.960
And then just like that thing was, you know, calcified.


00:03:18.960 --> 00:03:20.840
And I go, let's not touch this.


00:03:20.840 --> 00:03:21.960
Let's just not mess with this.


00:03:21.960 --> 00:03:24.200
Let's just keep it running, right?


00:03:24.200 --> 00:03:26.840
It's really good to see that getting a fresh update.


00:03:26.840 --> 00:03:28.640
Also, Brian, you talk about Twine in here.


00:03:28.640 --> 00:03:29.680
What's the story of Twine?


00:03:29.680 --> 00:03:31.120
- I don't know if there's a story with it.


00:03:31.120 --> 00:03:36.120
That's just the tool you use to push things up to PyPI.


00:03:36.120 --> 00:03:37.240
- Oh, nice.


00:03:37.240 --> 00:03:38.840
I probably used it and didn't realize it


00:03:38.840 --> 00:03:39.880
or forgot that I used it.


00:03:39.880 --> 00:03:40.880
- Maybe there's another way,


00:03:40.880 --> 00:03:42.040
but that's what I've always used.


00:03:42.040 --> 00:03:42.880
- Yeah, cool.


00:03:42.880 --> 00:03:45.480
- Actually, there's a cool project to throw in the mix here.


00:03:45.480 --> 00:03:48.620
It's called flit, F-L-I-T.


00:03:48.620 --> 00:03:51.880
And it's, well, what's a good way to describe it?


00:03:51.880 --> 00:03:53.800
It's sort of a minimal, simple way


00:03:53.800 --> 00:03:56.600
to put Python packages on PyPI.


00:03:56.600 --> 00:03:59.760
So they kind of completely done away with the setup.py.


00:03:59.760 --> 00:04:01.560
Instead you write an init file,


00:04:01.560 --> 00:04:03.400
where you just put in your author name


00:04:03.400 --> 00:04:05.160
and your homepage or whatever.


00:04:05.160 --> 00:04:07.040
And it generates all of that other stuff.


00:04:07.040 --> 00:04:10.080
And it might not be really necessary anymore now,


00:04:10.080 --> 00:04:13.000
if you have like a really sort of short and sweet tutorial,


00:04:13.000 --> 00:04:14.960
like the one that we were just talking about.


00:04:14.960 --> 00:04:18.240
But it is super, super beginner-friendly,


00:04:18.240 --> 00:04:19.400
this flit thing.


00:04:19.400 --> 00:04:20.600
FRANCESC CAMPOY: That's cool.


00:04:20.600 --> 00:04:21.320
MARK MANDEL: Nice.


00:04:21.320 --> 00:04:21.560
It's F-L-I-T?


00:04:21.560 --> 00:04:22.880
DANIEL LEWIS: It's F-L-I-T, yeah.


00:04:22.880 --> 00:04:23.760
MARK MANDEL: Awesome.


00:04:23.760 --> 00:04:26.000
And so that's probably on GitHub, isn't it, Dan?


00:04:26.000 --> 00:04:27.480
DANIEL LEWIS: Yes, it is.


00:04:27.480 --> 00:04:28.520
Nice transition.


00:04:28.520 --> 00:04:30.480
MARK MANDEL: So the next thing you have for us


00:04:30.480 --> 00:04:33.120
is an async library for calling GitHub's API.


00:04:33.120 --> 00:04:34.240
DANIEL LEWIS: Yeah, yeah.


00:04:34.240 --> 00:04:37.240
So I was going to talk about this thing called Gidget Hub,


00:04:37.240 --> 00:04:41.240
which is a Python wrapper around the GitHub API.


00:04:41.240 --> 00:04:43.360
So it basically allows you to talk to GitHub,


00:04:43.360 --> 00:04:47.160
and you can interact with all the different content types


00:04:47.160 --> 00:04:49.240
that GitHub provides or exposes.


00:04:49.240 --> 00:04:51.640
So you can add and modify issues.


00:04:51.640 --> 00:04:53.600
You can create pull requests.


00:04:53.600 --> 00:04:55.640
You can add comments to pull requests.


00:04:55.640 --> 00:04:57.560
You can download all the comments to pull requests


00:04:57.560 --> 00:04:58.720
and all that stuff.


00:04:58.720 --> 00:05:00.320
So the other thing it does,


00:05:00.320 --> 00:05:04.200
it allows you to parse GitHub's webhooks.


00:05:04.200 --> 00:05:07.080
So you can configure GitHub so that every time


00:05:07.080 --> 00:05:09.200
a new pull request or something like that is created,


00:05:09.200 --> 00:05:13.400
it sends, essentially calls an API callback on the web,


00:05:13.400 --> 00:05:15.600
like on some URL that you give it.


00:05:15.600 --> 00:05:18.320
And so what you can use GitHub for


00:05:18.320 --> 00:05:21.800
is a really nice and clean way to write GitHub bots


00:05:21.800 --> 00:05:23.760
with Python, essentially.


00:05:23.760 --> 00:05:26.280
And it's just a really cool library,


00:05:26.280 --> 00:05:28.240
and I think its API is super well designed.


00:05:28.240 --> 00:05:31.720
So we were recently using it on a workshop


00:05:31.720 --> 00:05:34.600
that we did in Vancouver, like Marietta,


00:05:34.600 --> 00:05:36.120
who's a CPython core developer did it,


00:05:36.120 --> 00:05:38.580
and I served TA and was running around helping her.


00:05:38.580 --> 00:05:40.820
And so she wrote a really cool tutorial


00:05:40.820 --> 00:05:42.500
about how to use Git GitHub.


00:05:42.500 --> 00:05:44.460
I think it's just a really nice example


00:05:44.460 --> 00:05:48.220
from modern Python web API library.


00:05:48.220 --> 00:05:49.420
- It looks really great.


00:05:49.420 --> 00:05:51.340
And so you just go over here and you say like,


00:05:51.340 --> 00:05:52.420
I'd like to open a PR.


00:05:52.420 --> 00:05:55.580
So you get some PR data, then you say,


00:05:55.580 --> 00:06:00.580
await GitHub.post, and all your methods are async.


00:06:00.580 --> 00:06:03.340
Yeah, definitely nice and scalable.


00:06:03.340 --> 00:06:06.260
It looks like it's based on AIO HTTP,


00:06:06.260 --> 00:06:11.980
which is a really nice client-side, async-enabled REST


00:06:11.980 --> 00:06:12.660
library.


00:06:12.660 --> 00:06:14.860
What's really, really cool about this Gidget Hub thing


00:06:14.860 --> 00:06:16.780
is that it's actually abstracting away


00:06:16.780 --> 00:06:19.660
from the actual back end, I want to say,


00:06:19.660 --> 00:06:23.380
what the actual library you use to talk to--


00:06:23.380 --> 00:06:27.340
or to handle those web requests, whether incoming or outbound.


00:06:27.340 --> 00:06:31.420
So I just learned that this is referred to as a Sans IO


00:06:31.420 --> 00:06:31.980
library.


00:06:31.980 --> 00:06:34.780
So basically, it's just a protocol implementation


00:06:34.780 --> 00:06:38.580
that doesn't really specify how the I/O is performed.


00:06:38.580 --> 00:06:42.580
So it allows you to plug in different backends,


00:06:42.580 --> 00:06:44.580
different concrete implementations


00:06:44.580 --> 00:06:47.860
that make this thing super reusable.


00:06:47.860 --> 00:06:49.940
Because, well, if there's a new async library,


00:06:49.940 --> 00:06:51.740
flavor of the day kind of thing in a couple of months,


00:06:51.740 --> 00:06:53.340
then, well, you can probably just plug that in


00:06:53.340 --> 00:06:54.420
and work with that.


00:06:54.420 --> 00:06:55.700
So it's kind of nice.


00:06:55.700 --> 00:06:56.700
It's really well at the site level.


00:06:56.700 --> 00:07:00.060
- Yeah, so you can use AIOHCDP, you can use Tornado.


00:07:00.060 --> 00:07:03.500
Yeah, I was, recently we covered it on the show,


00:07:03.500 --> 00:07:07.340
this thing called unsync instead of async, U-N-Sync.


00:07:07.340 --> 00:07:09.580
And it's a different implementation


00:07:09.580 --> 00:07:13.540
with a different thing, a different event loop thing.


00:07:13.540 --> 00:07:14.980
Maybe you could use that here as well.


00:07:14.980 --> 00:07:17.020
That's pretty awesome.


00:07:17.020 --> 00:07:17.860
I like it.


00:07:17.860 --> 00:07:18.680
Nice pick.


00:07:18.680 --> 00:07:19.520
- Nice, yeah.


00:07:19.520 --> 00:07:20.340
It's nice to use.


00:07:20.340 --> 00:07:21.180
Super friendly.


00:07:21.180 --> 00:07:23.140
- Yeah, Brian, do you guys do any GitHub automation?


00:07:23.140 --> 00:07:25.940
You just started with Git at your organization, right?


00:07:25.940 --> 00:07:28.140
- We're doing, we've got a private server


00:07:28.140 --> 00:07:30.740
so we don't go through GitHub for work stuff.


00:07:30.740 --> 00:07:32.180
But I use GitHub all the time.


00:07:32.180 --> 00:07:33.000
- Yeah, of course.


00:07:33.000 --> 00:07:34.840
- Yeah, nice.


00:07:34.840 --> 00:07:36.540
Yeah, I feel like this kind of automation


00:07:36.540 --> 00:07:39.840
is more relevant and useful


00:07:39.840 --> 00:07:41.200
when either you're building an app


00:07:41.200 --> 00:07:43.060
or you have like a big organization


00:07:43.060 --> 00:07:46.280
and you wanna automate your company's interaction


00:07:46.280 --> 00:07:47.640
with GitHub, right?


00:07:47.640 --> 00:07:49.160
Like me as an individual,


00:07:49.160 --> 00:07:51.760
I just don't really see a massive use of this for me


00:07:51.760 --> 00:07:54.440
because I just don't do that much different


00:07:54.440 --> 00:07:56.680
other than what I personally do with GitHub.


00:07:56.680 --> 00:07:58.120
But I think it looks really cool


00:07:58.120 --> 00:07:59.200
and I love the way it works.


00:07:59.200 --> 00:08:01.960
- Some uses where you could often use like Travis


00:08:01.960 --> 00:08:02.800
or something like that.


00:08:02.800 --> 00:08:05.200
Like if you were watching different,


00:08:05.200 --> 00:08:07.420
if your project depended on a bunch of dependencies


00:08:07.420 --> 00:08:10.040
and you wanted to, if they changed,


00:08:10.040 --> 00:08:11.400
pull them in and run your build,


00:08:11.400 --> 00:08:14.360
repackage everything and run some tests against it.


00:08:14.360 --> 00:08:16.280
You could do that locally with something like this.


00:08:16.280 --> 00:08:17.600
- Yeah, that's pretty cool.


00:08:17.600 --> 00:08:19.080
Or you have that one person on your team


00:08:19.080 --> 00:08:20.240
that often breaks the build,


00:08:20.240 --> 00:08:22.920
so you run extra tests when you see them do a check-in.


00:08:22.920 --> 00:08:25.160
(laughing)


00:08:25.160 --> 00:08:27.240
- A harassment bot that just goes in and,


00:08:27.240 --> 00:08:29.280
be careful. - Exactly.


00:08:30.560 --> 00:08:33.080
I think they use it on the CPython.


00:08:33.080 --> 00:08:35.640
They've removed all the source for that to GitHub.


00:08:35.640 --> 00:08:39.120
And I think now they run a couple of bots that,


00:08:39.120 --> 00:08:40.560
I think one of the things they do is,


00:08:40.560 --> 00:08:42.680
so when you contribute to CPython,


00:08:42.680 --> 00:08:44.360
they need you to sign an agreement


00:08:44.360 --> 00:08:46.080
that you're giving up the rights,


00:08:46.080 --> 00:08:47.280
essentially, for your contributions.


00:08:47.280 --> 00:08:49.920
And so I think Marietta actually runs that bot.


00:08:49.920 --> 00:08:50.760
I might be mistaken here,


00:08:50.760 --> 00:08:53.560
but it's a bot that checks if that committer


00:08:53.560 --> 00:08:55.480
or that contributor already has given their permission.


00:08:55.480 --> 00:08:56.860
And if they didn't yet,


00:08:56.860 --> 00:08:58.440
then it's just gonna ask them to do it


00:08:58.440 --> 00:08:59.880
and it sets a flag on the PR.


00:08:59.880 --> 00:09:02.840
So it's super cool that way when you can sort of code up


00:09:02.840 --> 00:09:06.080
a workflow like that, that you never have to worry about


00:09:06.080 --> 00:09:08.540
again in your life because it's 100% automated.


00:09:08.540 --> 00:09:11.000
So I think it's great for that sort of use case.


00:09:11.000 --> 00:09:12.180
- That is a great use case.


00:09:12.180 --> 00:09:13.760
Yeah, that's really, really awesome.


00:09:13.760 --> 00:09:16.080
Okay, so the next one that I wanted to talk about


00:09:16.080 --> 00:09:19.600
actually was recommended to me,


00:09:19.600 --> 00:09:23.180
recommended to me and Brian because of some stuff


00:09:23.180 --> 00:09:24.560
that I had recently been doing.


00:09:24.560 --> 00:09:25.880
I think, you know, we were all at PyCon.


00:09:25.880 --> 00:09:28.160
I think maybe we were all at the same meeting


00:09:28.160 --> 00:09:31.720
or get together and I had just decided like that's it.


00:09:31.720 --> 00:09:35.680
I'm writing a Python systemd daemon


00:09:35.680 --> 00:09:39.240
that will synchronize all of my course data,


00:09:39.240 --> 00:09:42.200
geo, basically across the various servers


00:09:42.200 --> 00:09:43.160
in the different locations.


00:09:43.160 --> 00:09:44.840
So there's like eight or nine places in the world


00:09:44.840 --> 00:09:49.000
that serve up course content based on where you are.


00:09:49.000 --> 00:09:51.240
And so I wrote a service in Python


00:09:51.240 --> 00:09:53.580
that is a systemd service


00:09:53.580 --> 00:09:57.120
that will basically keep all those places in sync.


00:09:57.120 --> 00:09:58.760
nothing too impressive, but it's kind of cool


00:09:58.760 --> 00:09:59.840
you can do that in Python.


00:09:59.840 --> 00:10:03.640
So we got pointed at this thing called PySystemD,


00:10:03.640 --> 00:10:06.240
and this was actually presented at PyCon 2018.


00:10:06.240 --> 00:10:08.280
So there's a whole talk, you can go learn about


00:10:08.280 --> 00:10:10.860
what is systemd, why you care about it, how is it used,


00:10:10.860 --> 00:10:14.800
but the short version is, this PySystemD is an API


00:10:14.800 --> 00:10:19.800
into the systemd whole API part of Linux.


00:10:19.800 --> 00:10:23.460
So you can create things that are daemons,


00:10:23.460 --> 00:10:25.920
you can say like, I would like to have my


00:10:25.920 --> 00:10:29.520
Python web app start, and I want it to start in this way,


00:10:29.520 --> 00:10:33.360
but I want it to not start before my MongoDB server starts.


00:10:33.360 --> 00:10:35.120
I don't want MongoDB to start in that way.


00:10:35.120 --> 00:10:37.440
You can configure these things to all just happen on boot


00:10:37.440 --> 00:10:39.920
or on demand, things like that.


00:10:39.920 --> 00:10:42.440
So I think this is really pretty awesome.


00:10:42.440 --> 00:10:45.680
So if anyone's doing any sort of automation with systemd,


00:10:45.680 --> 00:10:46.880
and they're already using Python,


00:10:46.880 --> 00:10:49.120
here's a really great way to just like,


00:10:49.120 --> 00:10:51.000
you know, import this library and just ask,


00:10:51.000 --> 00:10:53.000
hey, let's load up this unit,


00:10:53.000 --> 00:10:54.640
which is like one of these services,


00:10:54.640 --> 00:10:56.440
and ask, is it running?


00:10:56.440 --> 00:10:58.400
Let's start it, let's create a new one,


00:10:58.400 --> 00:11:00.000
all sorts of stuff, really, really nice.


00:11:00.000 --> 00:11:01.000
- That's cool.


00:11:01.000 --> 00:11:03.560
Yeah, also kind of cool how this was built.


00:11:03.560 --> 00:11:05.520
So this is like based on Cython.


00:11:05.520 --> 00:11:07.720
So it's a wrapper on the C library


00:11:07.720 --> 00:11:09.960
that actually talks to systemd, right?


00:11:09.960 --> 00:11:10.800
- Yeah, I think so.


00:11:10.800 --> 00:11:13.600
And actually I'm gonna cover in the next episode


00:11:13.600 --> 00:11:17.520
this sort of article on using Cython


00:11:17.520 --> 00:11:21.760
as a way for a simple way to wrap C APIs.


00:11:21.760 --> 00:11:23.000
- That's what surprised me.


00:11:23.000 --> 00:11:24.320
- Yeah, I think that's why,


00:11:24.320 --> 00:11:26.100
'cause it doesn't seem like a performance thing, right?


00:11:26.100 --> 00:11:28.480
I think it's like, let's use Cython


00:11:28.480 --> 00:11:31.400
to get a really simple API into the C layer,


00:11:31.400 --> 00:11:34.060
as well as build the integration back into Python.


00:11:34.060 --> 00:11:34.900
So pretty cool.


00:11:34.900 --> 00:11:35.960
- Yeah, nice, I'd love to see that,


00:11:35.960 --> 00:11:38.120
because I'm surprised they're using Cython for that


00:11:38.120 --> 00:11:41.240
and not just C types or CFFI or something like that.


00:11:41.240 --> 00:11:43.440
But I'm sure there's a reason for that.


00:11:43.440 --> 00:11:44.880
- The other thing I wanted to point out about this


00:11:44.880 --> 00:11:49.060
is this was created and presented by Alvaro Lleva,


00:11:49.060 --> 00:11:50.980
sorry if I mispronounced your last name there,


00:11:50.980 --> 00:11:54.200
but he's a production engineer at Instagram.


00:11:54.200 --> 00:11:55.200
and a Facebook.


00:11:55.200 --> 00:11:58.080
And so, you know, they have a few servers to manage


00:11:58.080 --> 00:11:59.760
and this is probably pretty polished


00:11:59.760 --> 00:12:03.440
and comes from a pretty well-informed space


00:12:03.440 --> 00:12:05.180
if it's being used there, right?


00:12:05.180 --> 00:12:06.480
Pretty sweet.


00:12:06.480 --> 00:12:09.160
All right, so before we get to the next one,


00:12:09.160 --> 00:12:11.520
let me tell you guys about DigitalOcean.


00:12:11.520 --> 00:12:16.040
So DigitalOcean is definitely one of the best


00:12:16.040 --> 00:12:19.740
hosting frameworks or places out there.


00:12:19.740 --> 00:12:22.800
You can go up, create a server, super easy,


00:12:22.800 --> 00:12:27.840
create a load balancer, you can create floating APIs that allow you to switch


00:12:27.840 --> 00:12:32.040
between various machines with perceived zero downtime, all sorts of stuff.


00:12:32.040 --> 00:12:36.800
All of our code and our sites, our delivery, all that stuff is running on


00:12:36.800 --> 00:12:41.360
top of it. It has been for a long time and it's been working great. So like I


00:12:41.360 --> 00:12:44.000
said, if you're thinking about running servers and you want to do it


00:12:44.000 --> 00:12:50.040
affordably, high performance, with lots of control, then go to pythonbyte.fm/digitalocean


00:12:50.040 --> 00:12:56.040
Ocean. If you're a new user, you'll get $100 credit and check out what they have.


00:12:56.040 --> 00:13:00.760
Takes about 60 seconds to set up a new server and you'll be SSH'd in and doing all sorts of


00:13:00.760 --> 00:13:05.160
good stuff. Maybe you could even use Pi System D to automate some cool stuff on it afterwards.


00:13:05.160 --> 00:13:10.520
So check them out. It helps support the show and it's definitely a good product worth checking out.


00:13:10.520 --> 00:13:14.440
Speaking of products, Brian, you're excited about one, an update one, right?


00:13:14.440 --> 00:13:19.800
Yeah, I am. I usually for a while I was running the the latest or the last


00:13:19.800 --> 00:13:23.880
2017 release of PyCharm


00:13:23.880 --> 00:13:29.080
But I don't know how recent this was but not too long ago. We had a


00:13:29.080 --> 00:13:33.160
e the early access program build one of


00:13:33.160 --> 00:13:35.800
2018.2


00:13:35.800 --> 00:13:42.300
Is out for PyCharm and the really exciting bit then we got notified by this from the Bruno Oliveira


00:13:42.840 --> 00:13:59.240
Who goes by nick dermis on twitter but it supports a whole bunch of new pictures features and i'm kind of a test kind of not so the things that i'm really excited about you could say you wrote the book on it yeah well you could.


00:13:59.240 --> 00:14:04.860
Because i did anyway the couple of features that i was really waiting for is


00:14:04.880 --> 00:14:10.560
Pytorch being an IDE has a lot of, what do you call that, IntelliSense or something?


00:14:10.560 --> 00:14:12.000
Yeah, autocomplete IntelliSense.


00:14:12.000 --> 00:14:19.760
Autocomplete. That didn't work for fixtures to a test. So if your test was using fixtures and you


00:14:19.760 --> 00:14:24.160
was returning an object or a function or something and you were trying to call that,


00:14:24.160 --> 00:14:30.800
you didn't have all of those cool autocomplete features. Those are now in for fixtures or tests.


00:14:30.800 --> 00:14:56.400
And that's really cool. But the thing that I'm really excited about is parameterization now works seamlessly within PyCharm. So if you've got a test that is parameterized so that you've got like several, or in my case, sometimes dozens of different parameter sets that are run through the same test, you can always run that through, run all of those parameterizations in PyCharm. And that was wonderful.


00:14:56.720 --> 00:15:03.720
if you wanted to rerun one or rerun the failing ones it would just rerun all of them i see a tree like a whole method in the


00:15:03.720 --> 00:15:12.520
decorate a bit that had here's all the variations that was just like a thing that i would just rerun right yeah so now you can run a test and then the left sidebar.


00:15:12.520 --> 00:15:23.000
You can right click on one of them and rerun just one of the parameterizations or you can like for instance if i'd like only one two or three or some of them failed


00:15:23.060 --> 00:15:27.060
when you rerun failures, it only runs the parameterizations that failed.


00:15:27.060 --> 00:15:31.060
And this is a huge time-saver for me, so I'm really excited about it.


00:15:31.060 --> 00:15:34.060
Yeah, that's nice. I use that feature a lot where I just say rerun the failed tests.


00:15:34.060 --> 00:15:39.060
For people that are like really, and may not be too much of an issue for people that are running


00:15:39.060 --> 00:15:44.060
running really quick tests, but a lot of my tests talk to hardware, so they're not really that fast.


00:15:44.060 --> 00:15:48.060
So this will save me like an hour a day, I'm sure.


00:15:48.060 --> 00:15:50.060
That's awesome. Very, very cool.


00:15:50.060 --> 00:15:51.060
Dan, do you use pytest?


00:15:51.060 --> 00:15:52.060
Yeah, I do.


00:15:52.060 --> 00:15:54.580
Yeah, I actually just used it.


00:15:54.580 --> 00:15:57.500
We wrote the backend for realpython.com.


00:15:57.500 --> 00:16:01.020
So we've got pytest powered test integration tests for that.


00:16:01.020 --> 00:16:04.140
And yeah, it's just been a joy to use, especially the parameterization stuff.


00:16:04.140 --> 00:16:06.760
It's just so nice when you can reuse a lot of test code.


00:16:06.760 --> 00:16:08.860
You don't have to copy paste it around so much.


00:16:08.860 --> 00:16:13.580
So Dan, one thing I was going to cover, but you put it in here before I could get to it.


00:16:13.580 --> 00:16:15.060
So you're faster.


00:16:15.060 --> 00:16:19.620
Is basically, why is installing Python 3.6 so hard?


00:16:19.620 --> 00:16:21.940
so sort of confusing, right?


00:16:21.940 --> 00:16:25.260
Like you talked about this workshop that you recently did


00:16:25.260 --> 00:16:26.700
and I've thrown this out on Twitter


00:16:26.700 --> 00:16:27.820
and people sometimes tell me,


00:16:27.820 --> 00:16:29.820
oh, it's not hard, it's super easy, you do this.


00:16:29.820 --> 00:16:32.740
But then if you actually go teach a workshop to beginners,


00:16:32.740 --> 00:16:34.980
you're like, why are those four people over there


00:16:34.980 --> 00:16:35.980
not ready yet?


00:16:35.980 --> 00:16:36.980
Like it's been 10 minutes,


00:16:36.980 --> 00:16:39.060
what could they have possibly been doing?


00:16:39.060 --> 00:16:40.060
And it's because it's like


00:16:40.060 --> 00:16:41.460
there's all these edge cases, right?


00:16:41.460 --> 00:16:44.620
- It's one of these things where in theory, it's easy


00:16:44.620 --> 00:16:46.380
and it's not a problem that you really run into


00:16:46.380 --> 00:16:49.100
when you have a little bit more experience under your belt.


00:16:49.100 --> 00:16:53.020
But for people getting into Python, it is definitely a barrier.


00:16:53.020 --> 00:16:57.260
And we were teaching this workshop, so Mariata was teaching it,


00:16:57.260 --> 00:16:59.780
and I was just running around, kind of, you know, supporting people.


00:16:59.780 --> 00:17:02.660
And for some people, we spent almost like two hours


00:17:02.660 --> 00:17:06.500
to get them to a working Python 3.6 install.


00:17:06.500 --> 00:17:09.860
And, you know, there were some really, like, you hit all of these interesting,


00:17:09.860 --> 00:17:12.300
but obviously kind of frustrating edge cases.


00:17:12.300 --> 00:17:15.260
Like, some people were running, they were running a Windows host,


00:17:15.260 --> 00:17:18.660
and then they were also running the Linux subsystem for Windows.


00:17:18.660 --> 00:17:23.360
So now you can essentially boot up a VM that is integrated into Windows


00:17:23.360 --> 00:17:27.160
and it boots Ubuntu or Debian or some other Linux distribution, I think.


00:17:27.160 --> 00:17:29.060
I think it defaults to Ubuntu, I'm not sure.


00:17:29.060 --> 00:17:30.560
I think it's Ubuntu as well. Yeah, that's nice.


00:17:30.560 --> 00:17:33.360
So basically you have this really tightly integrated Linux environment


00:17:33.360 --> 00:17:37.760
that you can just work from your Windows host environment.


00:17:37.760 --> 00:17:42.960
The problem is that people maybe accidentally installed Python


00:17:42.960 --> 00:17:46.760
in the Linux environment and then try and access it from the Windows environment


00:17:46.760 --> 00:17:48.800
because it's a little bit unclear if you're a beginner


00:17:48.800 --> 00:17:50.120
like what actually the difference is,


00:17:50.120 --> 00:17:52.720
between these two different terminal windows.


00:17:52.720 --> 00:17:54.320
- Right, and you also might open PowerShell,


00:17:54.320 --> 00:17:55.680
which is like a third still.


00:17:55.680 --> 00:17:56.800
- Exactly, things like that,


00:17:56.800 --> 00:17:58.920
and then you have your path set in different ways,


00:17:58.920 --> 00:18:00.960
and other issues were that,


00:18:00.960 --> 00:18:04.120
so the previous long-term release of Ubuntu,


00:18:04.120 --> 00:18:06.240
I think it was 16.04,


00:18:06.240 --> 00:18:08.840
so it doesn't ship with Python 3.6.


00:18:08.840 --> 00:18:11.520
And so for this tutorial, we specifically needed 3.6.


00:18:11.520 --> 00:18:14.080
And so people started Googling


00:18:14.080 --> 00:18:16.640
and just copying a bunch of stuff from Stack Overflow


00:18:16.640 --> 00:18:18.840
to install Python 3.6 on Ubuntu?


00:18:18.840 --> 00:18:21.280
Well, it turns out there's like two different PPAs,


00:18:21.280 --> 00:18:24.840
so like third party packages that you can install this from.


00:18:24.840 --> 00:18:28.680
And one of them is broken or was broken during that time.


00:18:28.680 --> 00:18:30.680
So, you know, people would have Python 3,


00:18:30.680 --> 00:18:33.840
but it had broken SSL and no PIP.


00:18:33.840 --> 00:18:36.160
So it was essentially useless


00:18:36.160 --> 00:18:38.000
for the purposes of this tutorial.


00:18:38.000 --> 00:18:40.600
And it's kind of crazy just into, you know,


00:18:40.600 --> 00:18:42.840
the all of the edge cases you can encounter with this.


00:18:42.840 --> 00:18:45.280
And I think it's really something we need to keep in mind,


00:18:45.280 --> 00:18:46.240
you know, when we're teaching beginners


00:18:46.240 --> 00:18:48.760
or kind of telling people how awesome Python is,


00:18:48.760 --> 00:18:50.880
it can be a pretty jarring experience.


00:18:50.880 --> 00:18:53.120
If you try to set it up and you're just sitting there,


00:18:53.120 --> 00:18:54.680
well, OK, I just wanted to try this.


00:18:54.680 --> 00:18:55.120
It doesn't work.


00:18:55.120 --> 00:18:55.960
MARK MANDEL: For sure.


00:18:55.960 --> 00:18:57.500
Well, so you guys are writing this up


00:18:57.500 --> 00:19:00.080
at realpython.com/installing-python


00:19:00.080 --> 00:19:01.800
as sort of an ongoing guide, right?


00:19:01.800 --> 00:19:04.480
FRANCESC CAMPOY: Yeah, so we decided to do something about it.


00:19:04.480 --> 00:19:07.440
So shout out to John Sturtz and Jim Anderson.


00:19:07.440 --> 00:19:09.840
And we got together and put together


00:19:09.840 --> 00:19:14.040
this sort of the ultimate Python 3 install guide.


00:19:14.040 --> 00:19:16.080
And we're going to keep it maintained.


00:19:16.080 --> 00:19:18.520
And it tells you how to install Python


00:19:18.520 --> 00:19:20.520
in very specific steps in all kinds


00:19:20.520 --> 00:19:23.240
of different configurations, so Linux, macOS,


00:19:23.240 --> 00:19:26.280
different Linux distributions, how to compile it from source.


00:19:26.280 --> 00:19:27.740
And we're just going to add to it


00:19:27.740 --> 00:19:29.320
and improve it based on feedback.


00:19:29.320 --> 00:19:30.960
And hopefully, that's something we


00:19:30.960 --> 00:19:32.520
can just use in the next workshop


00:19:32.520 --> 00:19:33.880
and then tell people what to do.


00:19:33.880 --> 00:19:35.880
I hope that when you refer to Python 2 in there to say,


00:19:35.880 --> 00:19:37.920
oh, don't do Python 2, do Python 3,


00:19:37.920 --> 00:19:39.960
that you call it Legacy Python.


00:19:39.960 --> 00:19:41.880
So just throw that in there.


00:19:41.880 --> 00:19:43.680
I'm still trying to make that a thing.


00:19:43.680 --> 00:19:46.060
I don't think we even mention it in that particular piece.


00:19:46.060 --> 00:19:47.700
This is Python 3 only.


00:19:47.700 --> 00:19:50.620
- And then my Mac is about ready for a format


00:19:50.620 --> 00:19:52.220
because it's time.


00:19:52.220 --> 00:19:54.480
It's been bad.


00:19:54.480 --> 00:19:56.560
So anyway, it's about time for a format.


00:19:56.560 --> 00:19:58.500
What would you, like after going through this whole


00:19:58.500 --> 00:20:01.460
experience, we could do Homebrew, you could do Anaconda,


00:20:01.460 --> 00:20:05.180
you could download the PKG file from Python.org,


00:20:05.180 --> 00:20:06.020
et cetera, et cetera.


00:20:06.020 --> 00:20:08.820
What would you do if you were setting up a new computer?


00:20:08.820 --> 00:20:09.660
- Like on Mac?


00:20:09.660 --> 00:20:10.580
- Yeah, on Mac.


00:20:10.580 --> 00:20:13.360
- Yeah, so I'm a big Homebrew fan


00:20:13.360 --> 00:20:17.200
because it makes upgrading very easy.


00:20:17.200 --> 00:20:21.320
And it's just something that I personally use


00:20:21.320 --> 00:20:22.360
for other purposes as well.


00:20:22.360 --> 00:20:23.920
So one of the things I usually do,


00:20:23.920 --> 00:20:26.640
when I set up a new macOS development environment,


00:20:26.640 --> 00:20:28.420
I upgrade Bash.


00:20:28.420 --> 00:20:30.340
So I use Bash as my preferred shell


00:20:30.340 --> 00:20:34.040
and macOS ships with a super old version of Bash.


00:20:34.040 --> 00:20:36.280
And with Homebrew, it's super easy


00:20:36.280 --> 00:20:38.200
just to get the latest version of Bash.


00:20:38.200 --> 00:20:40.520
And then a bunch of other command line tools that I use.


00:20:40.520 --> 00:20:43.660
And so I just use that to install Python as well.


00:20:43.660 --> 00:20:44.780
So I kind of like that.


00:20:44.780 --> 00:20:47.660
I mean, Python org version, it works as well.


00:20:47.660 --> 00:20:49.340
But if you're gonna use Homebrew anyway,


00:20:49.340 --> 00:20:52.500
which I think you wanna use if you're on a Mac,


00:20:52.500 --> 00:20:54.700
then I would just keep everything in Homebrew.


00:20:54.700 --> 00:20:55.740
- Yeah, that's what I'm thinking as well.


00:20:55.740 --> 00:20:57.340
It makes a lot of sense.


00:20:57.340 --> 00:20:58.180
Awesome.


00:20:58.180 --> 00:20:59.260
- Both on Mac and on Windows,


00:20:59.260 --> 00:21:02.900
I just always just use the Python.org installer.


00:21:02.900 --> 00:21:05.140
- Yeah, that's what I've been doing as well.


00:21:05.140 --> 00:21:07.580
But with Homebrew, you just type upgrade,


00:21:07.580 --> 00:21:09.140
and you can have different versions and stuff.


00:21:09.140 --> 00:21:09.980
I don't know.


00:21:09.980 --> 00:21:12.300
to play with homebrew next time. But anyway, very cool.


00:21:12.300 --> 00:21:16.940
It is also pyenv. So that that's sort of the other you do if you're going to go with homebrew,


00:21:16.940 --> 00:21:21.180
you could just go, you know, brew installed Python three, and you get sort of one,


00:21:21.180 --> 00:21:26.380
the latest version of Python three, or you could install something called pyenv first,


00:21:26.380 --> 00:21:31.660
and then that serve another layer of abstraction on top that allows you to switch between different


00:21:31.660 --> 00:21:36.540
versions of Python, including different versions of Python three. So you can just go, you know,


00:21:36.540 --> 00:21:42.220
I want Python 3.5 for testing and I'm going to run all of my latest stuff on the Python


00:21:42.220 --> 00:21:44.260
3.7 beta version or something like that.


00:21:44.260 --> 00:21:45.260
So that's super nice.


00:21:45.260 --> 00:21:47.060
It's maybe a little bit more advanced.


00:21:47.060 --> 00:21:50.020
So I feel like you're probably there, Mike, but for a complete beginner, I'm not sure


00:21:50.020 --> 00:21:51.020
if I would recommend it.


00:21:51.020 --> 00:21:52.020
Yeah, yeah, yeah.


00:21:52.020 --> 00:21:53.020
Sure.


00:21:53.020 --> 00:21:54.020
Of course.


00:21:54.020 --> 00:21:55.020
I don't think I'm there.


00:21:55.020 --> 00:21:56.020
I've tried it several times and it hasn't worked for me.


00:21:56.020 --> 00:21:57.340
So I don't want to go too much longer on this.


00:21:57.340 --> 00:22:03.980
But what I've started doing on my servers is when I SSH in part of my my shell profile


00:22:03.980 --> 00:22:07.700
automatically configures the main virtual environment


00:22:07.700 --> 00:22:11.040
for whatever that purpose of that server is.


00:22:11.040 --> 00:22:12.780
So when I SSH in, I'm actually running


00:22:12.780 --> 00:22:15.620
just a virtual environments just by default.


00:22:15.620 --> 00:22:17.900
And I was considering doing even that for my Mac


00:22:17.900 --> 00:22:19.100
and just changing the shell back


00:22:19.100 --> 00:22:20.780
so it doesn't do something weird.


00:22:20.780 --> 00:22:22.660
I don't know, I may get myself into trouble with that,


00:22:22.660 --> 00:22:24.460
but it's been working so far.


00:22:24.460 --> 00:22:25.900
All right, so I wanna round this out


00:22:25.900 --> 00:22:27.620
with just a short little list


00:22:27.620 --> 00:22:31.020
of 30 amazing Python projects from 2018.


00:22:31.020 --> 00:22:32.620
So there's this thing called MyBridge.


00:22:32.620 --> 00:22:35.980
And MyBridge is a little bit like a readability


00:22:35.980 --> 00:22:38.740
or a little bit like a flipboard


00:22:38.740 --> 00:22:41.300
where they kind of keep track of different articles,


00:22:41.300 --> 00:22:43.020
but it's more technology focused


00:22:43.020 --> 00:22:45.700
than just say Flipboard or Zite, those types of things.


00:22:45.700 --> 00:22:49.100
And the article starts with the MyBridge AI


00:22:49.100 --> 00:22:52.340
evaluates the quality by considering popularity,


00:22:52.340 --> 00:22:55.300
engagement, recency, and so on.


00:22:55.300 --> 00:22:56.540
So apparently they have this AI,


00:22:56.540 --> 00:22:57.780
which is kind of cool that goes through


00:22:57.780 --> 00:22:59.620
and like looks at human interaction


00:22:59.620 --> 00:23:01.780
with all these articles, these tech articles


00:23:01.780 --> 00:23:03.600
in the Python space and then says,


00:23:03.600 --> 00:23:06.120
here's the articles that our community


00:23:06.120 --> 00:23:08.520
sort of interacted with that they really liked,


00:23:08.520 --> 00:23:10.800
or packages actually in this case.


00:23:10.800 --> 00:23:13.320
So let me just give you a quick rundown on these


00:23:13.320 --> 00:23:16.160
just to kind of give you all some exposure


00:23:16.160 --> 00:23:18.200
and like, oh, hey, I hadn't heard of that package.


00:23:18.200 --> 00:23:19.160
That's pretty cool.


00:23:19.160 --> 00:23:21.360
And then you guys can jump in and give me some thoughts.


00:23:21.360 --> 00:23:25.200
So I'll go from the least popular to the most popular.


00:23:25.200 --> 00:23:29.340
So number 30 is PDF tab extract,


00:23:29.340 --> 00:23:31.440
which is a set of tools for getting tables


00:23:31.440 --> 00:23:33.740
out of PDF documents, which is pretty cool,


00:23:33.740 --> 00:23:36.140
and data mining on scan documents, pretty sweet.


00:23:36.140 --> 00:23:39.020
There's number 28 is Surprise,


00:23:39.020 --> 00:23:42.080
which is a Scikit-learn extension


00:23:42.080 --> 00:23:43.940
for building and analyzing,


00:23:43.940 --> 00:23:46.440
building a recommender system.


00:23:46.440 --> 00:23:48.780
So you can like say, you might also like this,


00:23:48.780 --> 00:23:49.940
which is kind of cool.


00:23:49.940 --> 00:23:51.500
Number 27, we won't do all of them.


00:23:51.500 --> 00:23:54.100
That's why I'm skipping number 29.


00:23:54.100 --> 00:23:58.260
Number 27 is EEL, which is basically a simple


00:23:58.260 --> 00:24:03.780
equivalent of the Python's version of an electron JS system. What do you guys think


00:24:03.780 --> 00:24:07.700
about that? Interesting. How have we not covered that already? I think we might have mentioned it


00:24:07.700 --> 00:24:12.500
because we have been on a I think I think we've covered it but there's two variations and the


00:24:12.500 --> 00:24:17.380
the sort of story that seems to go along with this is like it's a simple library it's not really like


00:24:17.380 --> 00:24:23.140
fully there's my understanding you can build simple apps but not like full-on massive apps


00:24:23.140 --> 00:24:26.340
but if you could build full-on massive apps I'd be all over this that's awesome.


00:24:26.900 --> 00:24:32.620
Number 25 clairvoyant, a Python program that identifies and monitors historical


00:24:32.620 --> 00:24:39.220
cues for short, short term stock movement and stuff. So I don't do really any


00:24:39.220 --> 00:24:42.580
stock trading. I mean, I put my I put money into mutual funds. So I don't


00:24:42.580 --> 00:24:45.940
really care that much about it. But the reason I bring this up is Python


00:24:45.940 --> 00:24:51.060
actually is pretty involved in the whole stock trading automation or real time


00:24:51.060 --> 00:24:54.620
stuff. There's actually a really good documentary called the Wall Street Code


00:24:54.660 --> 00:24:58.340
that goes into all these programmers that are building like AIs and stuff in Python.


00:24:58.340 --> 00:25:00.500
It's pretty cool. So it's free on YouTube.


00:25:00.500 --> 00:25:00.900
Nice.


00:25:00.900 --> 00:25:04.260
Yeah. Brian, are you a fan of Mr. Robot or Dan? Either of you guys?


00:25:04.260 --> 00:25:05.140
Yeah, I was just going to say.


00:25:05.140 --> 00:25:06.260
No?


00:25:06.260 --> 00:25:06.660
No.


00:25:06.660 --> 00:25:07.940
Oh, man. Dan?


00:25:07.940 --> 00:25:09.540
I like it. Yeah. It's a good show.


00:25:09.540 --> 00:25:13.860
I think it went a little weird in episode two, or sorry, season two. But like the first year,


00:25:13.860 --> 00:25:18.900
I was just like blown away. So there's this thing called F Society, which is a hacking tools pack


00:25:18.900 --> 00:25:24.020
for penetration testing in Python, which of course, Python is very big in the cybersecurity space.


00:25:24.020 --> 00:25:31.020
You might, if you want to like check your own stuff, run some of these tools against your things before someone else does.


00:25:31.020 --> 00:25:37.020
We talked about Kenneth Wright's last time and number 18 was Maya, date time for humans, better exceptions.


00:25:37.020 --> 00:25:47.020
I think we covered that as well. 16, API star, a really cool expressive Python 3.5 based API from Tom Christie,


00:25:47.020 --> 00:25:52.020
same guy that does Django rest framework, but this is like the re-envisioned Python 3 version, which is cool.


00:25:52.020 --> 00:25:58.180
cool. MicroPython, very awesome for little projects of spacey industrial strength. Natural


00:25:58.180 --> 00:26:03.200
Language Processor is number six. Number two was PyTorch for machine learning that seems


00:26:03.200 --> 00:26:08.360
to be sort of becoming one of the main machine learning libraries. And number one, Home Assistant


00:26:08.360 --> 00:26:13.020
for open source home automation. Very cool. I keep dreaming of like creating some IoT


00:26:13.020 --> 00:26:17.700
thing with MicroPython and then plugging it into Home Assistant. But I just have to figure


00:26:17.700 --> 00:26:21.460
out what that thing is.


00:26:21.460 --> 00:26:23.500
It's a solution looking for a problem, right?


00:26:23.500 --> 00:26:25.500
Yeah, good, good solution.


00:26:25.500 --> 00:26:26.500
I think.


00:26:26.500 --> 00:26:27.500
Yeah, I think so.


00:26:27.500 --> 00:26:28.760
It's a good solution.


00:26:28.760 --> 00:26:34.020
If I could just find a problem to like, apply it to those that I read off there, those surprising


00:26:34.020 --> 00:26:35.740
any of those like super interesting to you guys.


00:26:35.740 --> 00:26:37.280
I'm a huge fan of micro Python.


00:26:37.280 --> 00:26:40.100
So I just learned a little bit more about it.


00:26:40.100 --> 00:26:45.700
And so it's basically this like super small and lean re implementation of Python three,


00:26:45.700 --> 00:26:49.380
I guess that runs on these super low power,


00:26:49.380 --> 00:26:51.900
low computational power microcontrollers.


00:26:51.900 --> 00:26:55.660
It's just so cool to be running Python on


00:26:55.660 --> 00:26:58.160
tiny machines that have very little RAM,


00:26:58.160 --> 00:27:00.740
and we're talking kilobytes and stuff.


00:27:00.740 --> 00:27:02.060
>> Right, like a $5 chip.


00:27:02.060 --> 00:27:03.260
>> It's just insane that you can program this with Python.


00:27:03.260 --> 00:27:04.660
Yeah, so cool.


00:27:04.660 --> 00:27:06.300
>> Yeah, and you got one of those little in


00:27:06.300 --> 00:27:08.220
your goodie bag at PyCon, right?


00:27:08.220 --> 00:27:11.700
>> I did a video review of that on YouTube,


00:27:11.700 --> 00:27:13.900
and I was just all giddy about it,


00:27:13.900 --> 00:27:14.900
just playing with this thing.


00:27:14.900 --> 00:27:18.340
just plugs into your USB and you can start running Python on this thing.


00:27:18.340 --> 00:27:20.500
That's a really good implementation they did.


00:27:20.500 --> 00:27:21.220
Brian, how about you?


00:27:21.220 --> 00:27:23.340
Yeah, I guess I'd have to second that.


00:27:23.340 --> 00:27:29.300
MicroPython is awesome and a whole bunch of the Adafruit products are able to run it.


00:27:29.300 --> 00:27:32.060
And yeah, it's all fun.


00:27:32.060 --> 00:27:35.260
API Store is something I've been meaning to try still.


00:27:35.260 --> 00:27:39.020
I haven't done any projects with it, but it looks fun.


00:27:39.020 --> 00:27:40.460
Yeah, it definitely looks fun.


00:27:40.460 --> 00:27:40.820
Quite cool.


00:27:40.820 --> 00:27:43.420
All right, there's one final thing I want to cover.


00:27:43.420 --> 00:27:46.140
We had the GDPR stuff come out,


00:27:46.140 --> 00:27:48.980
basically come into effect at the end of last week.


00:27:48.980 --> 00:27:51.980
So just quick point to an article


00:27:51.980 --> 00:27:56.560
from our friend Chris Medina at trix@pass.org/article/gdpr,


00:27:56.560 --> 00:27:58.240
sort of a take for developers.


00:27:58.240 --> 00:28:02.160
And if you haven't got your stuff all in line yet,


00:28:02.160 --> 00:28:04.820
please consider doing so for your own good.


00:28:04.820 --> 00:28:07.820
Pythonbytes.fm is all up and ready.


00:28:07.820 --> 00:28:09.660
So yeah, Dan, you probably had to do the same


00:28:09.660 --> 00:28:11.180
for real Python, right?


00:28:11.180 --> 00:28:12.700
- Yeah, some sleepless nights


00:28:12.700 --> 00:28:15.500
because it's, well, everything's up for interpretation,


00:28:15.500 --> 00:28:17.980
right, so it's kind of hard to, yeah,


00:28:17.980 --> 00:28:19.980
just to put it into concrete terms.


00:28:19.980 --> 00:28:22.220
But I mean, it's just been nuts, you know,


00:28:22.220 --> 00:28:24.700
that now the deadline for that law to go into effect


00:28:24.700 --> 00:28:28.060
is passed, like we've seen some services shut down.


00:28:28.060 --> 00:28:30.660
I think like Instapaper is a service that I really,


00:28:30.660 --> 00:28:32.380
I've been using it for a long time,


00:28:32.380 --> 00:28:34.540
and they just shut down in Europe.


00:28:34.540 --> 00:28:36.460
They say it's temporary, but you know, who knows?


00:28:36.460 --> 00:28:38.460
- Yeah, we'll see, it's temporary until it's not,


00:28:38.460 --> 00:28:40.260
but yeah, hopefully they get that figured out,


00:28:40.260 --> 00:28:42.420
but yeah, I saw that, that was quite the discussion


00:28:42.420 --> 00:28:43.860
on Hacker News.


00:28:43.860 --> 00:28:45.500
The other thing I wanted to bring up,


00:28:45.500 --> 00:28:48.100
which I don't know, this is pretty cool to me.


00:28:48.100 --> 00:28:51.920
I deal with an insane amount of large files


00:28:51.920 --> 00:28:53.500
and I use Dropbox mostly for that.


00:28:53.500 --> 00:28:56.780
Like, to give you a sense, like I have the terabyte plan


00:28:56.780 --> 00:28:58.380
and it's like sometimes gets too full


00:28:58.380 --> 00:29:00.940
and I have to clean up my Dropbox storage.


00:29:00.940 --> 00:29:03.820
But my hard drive doesn't really wanna sync that much stuff.


00:29:03.820 --> 00:29:05.660
Did you guys know that Dropbox released


00:29:05.660 --> 00:29:06.860
this thing called Smart Sync?


00:29:06.860 --> 00:29:08.860
- Yes, and I've been wanting to use it,


00:29:08.860 --> 00:29:11.500
but it installs a kernel module.


00:29:11.500 --> 00:29:15.460
And so I was like, ah, right.


00:29:15.460 --> 00:29:17.820
Cause it's gotta, it's gotta get into the file driver.


00:29:17.820 --> 00:29:18.020
Yeah.


00:29:18.020 --> 00:29:21.260
So if people have this problem, they have Dropbox came out with this thing


00:29:21.260 --> 00:29:25.900
called smart sync that will basically give you and your Explorer and your


00:29:25.900 --> 00:29:27.420
open dialogues and windows or Mac.


00:29:27.420 --> 00:29:30.700
A view, which pretends as if the files are there.


00:29:30.700 --> 00:29:33.860
And as soon as you try to interact with them, even from like the command line,


00:29:33.860 --> 00:29:38.660
they will automatically download if they're not, which is basically lets you


00:29:38.660 --> 00:29:41.820
sync nothing but what you interact with, which is really amazing.


00:29:41.820 --> 00:29:42.820
It sounds super cool.


00:29:42.820 --> 00:29:48.180
Like I have a lot of trust in Dropbox engineering team and like if it works that smoothly, I


00:29:48.180 --> 00:29:49.740
think it's an amazing feature.


00:29:49.740 --> 00:29:52.100
I've sort of been hesitant about enabling it.


00:29:52.100 --> 00:29:56.580
All right, when you enable it, you tell us how it goes.


00:29:56.580 --> 00:29:57.580
I'll probably try it out.


00:29:57.580 --> 00:29:59.700
I'll give you guys a report eventually.


00:29:59.700 --> 00:30:00.700
Cool.


00:30:00.700 --> 00:30:01.700
All right.


00:30:01.700 --> 00:30:02.700
Well, I think that's it.


00:30:02.700 --> 00:30:03.940
Unless Brian or Dan, you have extra stuff to share with everyone?


00:30:03.940 --> 00:30:04.940
Yeah.


00:30:04.940 --> 00:30:05.940
Right on.


00:30:05.940 --> 00:30:06.940
Well.


00:30:06.940 --> 00:30:07.940
I think I'm all good.


00:30:07.940 --> 00:30:13.260
>> Yeah, definitely. Brian, thank you so much. And Dan, thanks for dropping in and adding


00:30:13.260 --> 00:30:16.740
some spice to the mix for our whole podcast here.


00:30:16.740 --> 00:30:17.740
>> Awesome. Thanks, guys.


00:30:17.740 --> 00:30:18.740
>> Yep. Bye, everyone.


00:30:18.740 --> 00:30:19.740
>> Bye.


00:30:19.740 --> 00:30:20.740
>> Bye.


00:30:20.740 --> 00:30:25.100
>> Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes.


00:30:25.100 --> 00:30:31.540
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm. If


00:30:31.540 --> 00:30:35.620
you have a news item you want featured, just visit PythonBytes.fm and send it our way.


00:30:35.620 --> 00:30:38.740
We're always on the lookout for sharing something cool.


00:30:38.740 --> 00:30:41.980
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:30:41.980 --> 00:30:45.220
Thank you for listening and sharing this podcast with your friends and colleagues.

