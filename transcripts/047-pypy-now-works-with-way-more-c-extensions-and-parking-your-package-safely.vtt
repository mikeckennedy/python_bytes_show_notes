
00:00:00.000 --> 00:00:07.140
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 47


00:00:07.140 --> 00:00:09.600
recorded October 11th 2017


00:00:09.600 --> 00:00:15.000
I'm Michael Kennedy and I'm Brian Okken and we got a bunch of cool stuff lined up for you. So hey Brian, how's it going?


00:00:15.000 --> 00:00:18.200
Yeah, it's going really good. Yeah. Yeah, great. Hey before we get to your first item


00:00:18.200 --> 00:00:19.680
I want to say thanks to DigitalOcean


00:00:19.680 --> 00:00:25.080
They've sponsored a bunch of episodes coming up and they're really supporting the show and the thing they want me to tell you about is


00:00:25.360 --> 00:00:30.400
Spaces which is like Amazon s3 but like literally three times better and you get a two-month trial


00:00:30.400 --> 00:00:35.300
So check it out at do dot co slash Python and we'll talk more about that later


00:00:35.300 --> 00:00:42.560
How about fast fast Python Brian? What do you think? I'm excited. So pi pi is fast implementation and


00:00:42.560 --> 00:00:49.360
It's good to see that there's still work coming out and one of the exciting bits of news just recently is


00:00:49.960 --> 00:00:57.120
version 5.9, at least on the the PiPi 2.7 version of this release has


00:00:57.120 --> 00:01:02.520
Pandas and NumPy in it as well, which is super exciting. That's actually a really big deal because


00:01:02.520 --> 00:01:08.060
They had not been supported. That's one of the things that was a challenge with PiPi like it was great


00:01:08.060 --> 00:01:12.800
It was much faster in many many ways. It was like five times faster than regular CPython


00:01:12.800 --> 00:01:15.900
However, it didn't support any of the C extensions


00:01:15.960 --> 00:01:18.660
you couldn't integrate things like NumPy and stuff.


00:01:18.660 --> 00:01:20.920
And so it was like, you get a subset of Python


00:01:20.920 --> 00:01:22.660
that's super fast, but there might be things


00:01:22.660 --> 00:01:23.500
you don't want to do.


00:01:23.500 --> 00:01:25.300
And oh, by the way, a lot of those are computational


00:01:25.300 --> 00:01:26.820
and where people care about when it's fast.


00:01:26.820 --> 00:01:27.660
- Yeah.


00:01:27.660 --> 00:01:28.620
- So it's awesome to see that coming on.


00:01:28.620 --> 00:01:30.680
- So getting NumPy and pandas come on,


00:01:30.680 --> 00:01:33.820
and I'm sure that eventually it'll come on


00:01:33.820 --> 00:01:36.100
on the 3.5 branch as well.


00:01:36.100 --> 00:01:36.940
- Yeah, for sure.


00:01:36.940 --> 00:01:39.660
And you also have notes about Cython as well, right?


00:01:39.660 --> 00:01:43.980
- Yeah, so it includes the part of the help with this


00:01:43.980 --> 00:01:52.780
And what it includes is Cython 0.27.1, which supports a lot more Cython projects on PyPy.


00:01:52.780 --> 00:01:57.540
I'm not sure what the Cython story was before this release, but that's pretty exciting.


00:01:57.540 --> 00:01:58.540
Yeah, that's cool.


00:01:58.540 --> 00:02:03.740
Yeah, I think the biggest news here is that CFFI has been updated.


00:02:03.740 --> 00:02:09.900
And the C API extensions for many, many projects now work with PyPy, whereas previously, they


00:02:09.900 --> 00:02:11.180
did not.


00:02:11.180 --> 00:02:13.300
And so it's not just pandas and NumPy.


00:02:13.300 --> 00:02:17.000
are the headline ones. But there's a bunch of things that previously couldn't work with


00:02:17.000 --> 00:02:20.620
PyPy because of the C extensions. Well, guess what? Now they can. That's pretty awesome.


00:02:20.620 --> 00:02:26.540
Yeah. And then another another bit of news with this release is the optimized JSON parser


00:02:26.540 --> 00:02:31.820
for both memory and speed, which should help for people trying to pull in JSON. So that's


00:02:31.820 --> 00:02:32.820
good.


00:02:32.820 --> 00:02:37.180
Yeah, that's awesome. I think people use JSON every now and then not really sure. All the


00:02:37.180 --> 00:02:41.960
microservices, it's just like the network lights are above those JSON messages. So that's


00:02:41.960 --> 00:02:43.760
That's really cool and that's all pretty straightforward.


00:02:43.760 --> 00:02:47.800
I want to show you some stuff that is not straightforward.


00:02:47.800 --> 00:02:51.640
There's this project on GitHub that has really taken off.


00:02:51.640 --> 00:02:54.080
There's a ton of people contributing to it.


00:02:54.080 --> 00:02:57.280
Let me pull up the main page and see.


00:02:57.280 --> 00:03:01.560
There's 17 contributors who are doing a lot of work on this project.


00:03:01.560 --> 00:03:07.160
It has about 3,600 stars called WTF Python.


00:03:07.160 --> 00:03:13.240
If you've seen the Watt video about JavaScript and Ruby, which is hilarious.


00:03:13.240 --> 00:03:18.440
Python is lucky in that there's not that many weird edge cases, but this repository will


00:03:18.440 --> 00:03:21.920
show you actually there's some weird cases.


00:03:21.920 --> 00:03:22.920
Have you seen this, Brian?


00:03:22.920 --> 00:03:23.920
No, I haven't.


00:03:23.920 --> 00:03:24.920
This is pretty funny.


00:03:24.920 --> 00:03:27.200
Yeah, I pulled out four items, but there's a bunch.


00:03:27.200 --> 00:03:28.200
This is super active on GitHub.


00:03:28.200 --> 00:03:30.120
I'm getting all these notifications from it.


00:03:30.120 --> 00:03:31.120
That's cool.


00:03:31.120 --> 00:03:33.800
One is about skipping lines.


00:03:33.800 --> 00:03:36.760
You say value equals 11, value equals 32.


00:03:36.760 --> 00:03:43.080
is value? It's 11. Huh? What is going on here? There's another one that similar in the same


00:03:43.080 --> 00:03:50.760
section says, quote, e, equal, equal, quote, e, false. Okay. And things like that. And it's,


00:03:50.760 --> 00:03:55.320
it's about encoding and some interesting stuff. So each one of these has like a really simple,


00:03:55.320 --> 00:03:59.400
you know, like three or four lines of code, and then the explanation and the explanation,


00:03:59.400 --> 00:04:04.440
I think is where this gets interesting. So another one is modifying dictionaries, like,


00:04:05.080 --> 00:04:08.600
These are super good ways to trick people like create a dictionary with one item,


00:04:08.600 --> 00:04:14.360
go through for each item in it, delete that item and add a new one, and then print that out. How


00:04:14.360 --> 00:04:19.400
many times did that loop run? Do you think? I have no idea. It's either one or error or something is


00:04:19.400 --> 00:04:24.920
what I would guess, right? But the answer is eight. Exactly eight. Like what? Why? Why is it


00:04:24.920 --> 00:04:32.680
right? Why doesn't it run one infinite, or zero or error like those are the three zero one or


00:04:32.680 --> 00:04:37.080
infinity eight doesn't make any sense. But if you look at the implementation, the dictionaries


00:04:37.080 --> 00:04:41.560
are pre allocated, because you're typically adding stuff, they want to grow and like a doubling sort


00:04:41.560 --> 00:04:47.000
of way, not a, every time you add something, it's got to reallocate and copy around things. And so


00:04:47.000 --> 00:04:52.440
what they do is they pre allocate a certain number of items in this trick, like leverages,


00:04:52.440 --> 00:04:59.000
assigning into those new slots until it runs out. So this is crazy. I'll give you one more example


00:04:59.000 --> 00:05:07.240
is let's go with it is not what it is. So if you say a equals 256, b equals 256, a is b is


00:05:07.240 --> 00:05:16.200
true. However, if you say a is 257, and b is 257, a is b is false. Do you know why? Another crazy


00:05:16.200 --> 00:05:22.600
one. This is insane. And the reason is, I believe the first 126 numbers, maybe negative as well,


00:05:22.600 --> 00:05:28.040
I'm not sure, are pre allocated for performance reasons. And every time you like literally say


00:05:28.040 --> 00:05:33.880
the number seven, like that points to this pre-allocated flywheel pattern type thing.


00:05:33.880 --> 00:05:36.400
But beyond that, these get allocated on demand.


00:05:36.400 --> 00:05:41.160
So you're basically asking, is the pointer to 257 equal to the other pointer 257, and


00:05:41.160 --> 00:05:43.840
there's no longer this tracking between them and they get dropped.


00:05:43.840 --> 00:05:47.240
So there's just, there's tons of this craziness going on here.


00:05:47.240 --> 00:05:48.240
That's pretty fun.


00:05:48.240 --> 00:05:49.840
Yeah, that's nice.


00:05:49.840 --> 00:05:51.120
So I think this is a fun project.


00:05:51.120 --> 00:05:53.000
I really commend the people working on it.


00:05:53.000 --> 00:05:54.000
It's great.


00:05:54.000 --> 00:05:55.160
And I definitely, I want to do something with this later.


00:05:55.160 --> 00:05:57.280
I just haven't figured out quite what the details are yet.


00:05:57.280 --> 00:05:59.120
But there's got to be something fun here.


00:05:59.120 --> 00:06:01.480
So this makes me feel like I should go practice my Python.


00:06:01.480 --> 00:06:04.380
Like maybe I'm not as good as I thought I was because that dictionary thing going eight


00:06:04.380 --> 00:06:07.780
times kind of like took me for a loop for a bit.


00:06:07.780 --> 00:06:12.680
Anything in the WTF Python would be evil to try to bring up at a job interview.


00:06:12.680 --> 00:06:14.920
It'd be very evil.


00:06:14.920 --> 00:06:16.400
But if they answered it, think of that.


00:06:16.400 --> 00:06:18.080
Yeah, that would be good.


00:06:18.080 --> 00:06:19.640
I ran across this.


00:06:19.640 --> 00:06:23.180
It's a recent article called Python Exercises.


00:06:23.180 --> 00:06:24.440
And I've done this before.


00:06:24.440 --> 00:06:31.800
So trying to either brush up on Python skills or trying to find some questions to ask at


00:06:31.800 --> 00:06:35.840
an interview or something, trying to come up with some decent questions.


00:06:35.840 --> 00:06:40.920
And a lot of the questions out there are, they seem to be sort of generic questions


00:06:40.920 --> 00:06:45.140
around like any language and they just happen to be "do it in Python".


00:06:45.140 --> 00:06:50.160
This is a collection of questions that are, some of them are pretty easy to start off


00:06:50.160 --> 00:06:56.560
with like basic syntax stuff but there are some things that check actually just Python and some


00:06:56.560 --> 00:07:03.520
use of the standard library and I think it's a nice collection. It goes through syntax of course


00:07:03.520 --> 00:07:10.800
and then some text processing and OS integration and decorators, generators and you can get in


00:07:10.800 --> 00:07:16.000
into quite a few things but I think it's a nice set. It's not too huge. It's a good one to look


00:07:16.000 --> 00:07:19.120
Yeah, yeah, and they don't seem too trivial.


00:07:19.120 --> 00:07:24.000
They're like, given this set of data, parse it to a CSV file, start the sub-process, things


00:07:24.000 --> 00:07:25.000
like that.


00:07:25.000 --> 00:07:26.000
It's really, it's pretty nice, actually.


00:07:26.000 --> 00:07:30.400
Yeah, and then at the end, the last thing they talk about is testing, which I very much


00:07:30.400 --> 00:07:31.400
appreciate.


00:07:31.400 --> 00:07:37.360
I think it's important to make sure, I've started with trying to do, send out code examples


00:07:37.360 --> 00:07:42.600
to before I bring somebody in for an interview, ask them to solve some coding problem, but


00:07:42.600 --> 00:07:44.640
also to write a test to prove it works.


00:07:44.640 --> 00:07:46.000
I think that's a good thing to add.


00:07:46.000 --> 00:07:46.840
- Absolutely.


00:07:46.840 --> 00:07:47.660
Yeah, that's really cool.


00:07:47.660 --> 00:07:50.040
Great that they include that at the end as well.


00:07:50.040 --> 00:07:51.880
So I've got another thing you should test for.


00:07:51.880 --> 00:07:53.260
Before I tell you about it though,


00:07:53.260 --> 00:07:54.560
I wanna tell you about Spaces.


00:07:54.560 --> 00:07:58.560
So Spaces is DigitalOcean's new service,


00:07:58.560 --> 00:08:01.400
which lets you basically store files on the internet


00:08:01.400 --> 00:08:04.740
and either privately or publicly pass them around, right?


00:08:04.740 --> 00:08:08.760
So kind of like Amazon S3, but much, much more affordable.


00:08:08.760 --> 00:08:10.880
So instead of charging you nine cents per gigabyte,


00:08:10.880 --> 00:08:12.680
they charge you one cent.


00:08:12.680 --> 00:08:14.720
And you can use exactly the same tools.


00:08:14.720 --> 00:08:17.680
So, you know, like I use transmit for my Mac.


00:08:17.680 --> 00:08:20.640
I love that to manage all my stuff in the cloud.


00:08:20.640 --> 00:08:23.200
And when I switched to DigitalOcean Spaces,


00:08:23.200 --> 00:08:24.760
which I did just 'cause I saw the offer,


00:08:24.760 --> 00:08:26.140
I'm like, this is so much better


00:08:26.140 --> 00:08:28.120
before we even talked about this.


00:08:28.120 --> 00:08:29.720
I just pointed my transmit at that


00:08:29.720 --> 00:08:31.120
and it just kept on working.


00:08:31.120 --> 00:08:32.760
Just said, hey, there's an S3 thing over here


00:08:32.760 --> 00:08:33.660
and here's the key.


00:08:33.660 --> 00:08:37.400
So if you are using S3 or some other sort of


00:08:37.400 --> 00:08:41.360
shared cloud storage for files and things like that,


00:08:41.360 --> 00:08:44.360
You definitely should check out DigitalOcean Spaces


00:08:44.360 --> 00:08:47.840
at do.co/python and check it out.


00:08:47.840 --> 00:08:48.800
There's a two month free trial


00:08:48.800 --> 00:08:50.480
and then it's really, really affordable


00:08:50.480 --> 00:08:51.720
and straightforward, I love it.


00:08:51.720 --> 00:08:52.560
- Nice.


00:08:52.560 --> 00:08:53.540
- The audio you're listening to right now


00:08:53.540 --> 00:08:56.320
came straight out of there, so beautiful.


00:08:56.320 --> 00:08:57.240
Have you heard of Pickle?


00:08:57.240 --> 00:08:58.080
- Oh yeah.


00:08:58.080 --> 00:09:02.240
- Not the gherkins, but the built-in way


00:09:02.240 --> 00:09:03.480
to serialize stuff.


00:09:03.480 --> 00:09:05.520
- I don't remember why, but I try to avoid it


00:09:05.520 --> 00:09:07.000
because I've heard there's problems.


00:09:07.000 --> 00:09:08.640
- Yeah, there's two major problems with Pickle.


00:09:08.640 --> 00:09:13.920
One of them is it stores a binary representation of your objects.


00:09:13.920 --> 00:09:19.440
And so if you do things like rename a field, or maybe even reorder stuff, right, if you add a


00:09:19.440 --> 00:09:23.760
field, remove a field, there's all sorts of stuff where like, just the versioning of your classes


00:09:23.760 --> 00:09:30.000
or your data, if that changes, you can no longer properly serialize these things. It's not great.


00:09:30.000 --> 00:09:35.280
So that can be a problem. And that's probably reason enough to use JSON or some other format.


00:09:35.280 --> 00:09:39.720
However, right in the documentation it says, "Warning, the pickle module is not intended


00:09:39.720 --> 00:09:44.480
to be secure against erroneous or maliciously constructed data.


00:09:44.480 --> 00:09:48.080
Never unpickle data received from an untrusted or unauthenticated source."


00:09:48.080 --> 00:09:51.440
Alright, so I think people see this like, "Okay, that looks bad.


00:09:51.440 --> 00:09:52.440
Let's get out of here."


00:09:52.440 --> 00:09:54.920
And they just bail, as they should.


00:09:54.920 --> 00:09:59.480
I think even the versioning stuff alone is already an issue.


00:09:59.480 --> 00:10:02.920
I think there was an issue with somebody caching stuff, and when they were switching from Python


00:10:02.920 --> 00:10:08.960
to Python 3, the in-memory representation of like, date time or some, some part of the


00:10:08.960 --> 00:10:13.380
memory was a different representation and the pickling stuff started to conflict with


00:10:13.380 --> 00:10:14.600
each other.


00:10:14.600 --> 00:10:19.440
Anyway, this article I want to talk about is called exploiting misuse of Python's pickle.


00:10:19.440 --> 00:10:24.200
So if you've ever read that warning, and gone, huh, that sounds bad, I can kind of imagine


00:10:24.200 --> 00:10:25.440
what that might look like.


00:10:25.440 --> 00:10:27.200
I'm going to stay away from it.


00:10:27.200 --> 00:10:31.720
This one shows you exactly how to do bad things.


00:10:31.720 --> 00:10:38.000
And bad things begin with let's create a remote shell and start executing code and maybe even


00:10:38.000 --> 00:10:43.460
let us log in remotely over SSH to this machine by sending a little bit of binary data like


00:10:43.460 --> 00:10:49.160
50 bytes, 100 bytes, something super small over to this machine and then we'll just log


00:10:49.160 --> 00:10:50.160
in and go from there.


00:10:50.160 --> 00:10:51.160
That sounds bad, right?


00:10:51.160 --> 00:10:52.160
Yeah, geez.


00:10:52.160 --> 00:10:55.920
So the idea is when you unpickle something, there's a way, there's a few hooks where you


00:10:55.920 --> 00:10:58.640
you can run arbitrary Python code.


00:10:58.640 --> 00:11:04.600
They say, "Well, let's just use subprocess.popen and create a shell for us."


00:11:04.600 --> 00:11:10.080
You just put that command in your dunder reduce, I think it's called, and then you've got shells,


00:11:10.080 --> 00:11:12.000
and that's bad.


00:11:12.000 --> 00:11:14.520
For those of you out there wondering, "What is this warning about?


00:11:14.520 --> 00:11:16.760
Exactly, why should I be super scared?"


00:11:16.760 --> 00:11:17.760
Here's why.


00:11:17.760 --> 00:11:19.240
Great little example, super approachable.


00:11:19.240 --> 00:11:20.240
>> Yeah, wacky.


00:11:20.240 --> 00:11:21.240
>> Yeah, wacky.


00:11:21.240 --> 00:11:25.400
If I was running a Django website, I probably wouldn't want to use that as my exchange format


00:11:25.400 --> 00:11:26.400
on my services, right?


00:11:26.400 --> 00:11:29.160
No, and there's so many other better formats anyway.


00:11:29.160 --> 00:11:30.160
JSON, JSON.


00:11:30.160 --> 00:11:31.160
JSON, yeah.


00:11:31.160 --> 00:11:32.160
For sure.


00:11:32.160 --> 00:11:33.800
All right, so what do you got next for us?


00:11:33.800 --> 00:11:36.160
I've got a complete beginner's guide to Django.


00:11:36.160 --> 00:11:37.160
Awesome.


00:11:37.160 --> 00:11:42.080
This is a seven-part series, and it looks like six parts are done already, and the seventh


00:11:42.080 --> 00:11:44.880
part is coming up soon.


00:11:44.880 --> 00:11:48.240
And it kind of goes through quite a bit of Django.


00:11:48.240 --> 00:11:52.600
I know there's already a lot of Django tutorials out there, but the interesting thing I think


00:11:52.600 --> 00:11:57.880
that makes this one stand out is it's kind of I has an academic feel to it I


00:11:57.880 --> 00:12:01.720
think and if that's kind of your thing you might like this. Well it has a


00:12:01.720 --> 00:12:06.480
chalkboard, it has a beaker, and it has a Superman flying so these are all good


00:12:06.480 --> 00:12:10.360
signs. Yeah well it has some like comic like drawings in it too and stuff. Yeah


00:12:10.360 --> 00:12:14.160
yeah yeah actually I think this is really nice the graphics are wonderful


00:12:14.160 --> 00:12:19.000
they've got little wireframes to help you design the web pieces some nice


00:12:19.000 --> 00:12:23.140
graphics for file structure. It seems super approachable to me. I kind of got


00:12:23.140 --> 00:12:28.360
lost with some of the UML diagrams and whatnot but it's well written. People


00:12:28.360 --> 00:12:32.600
should check it out if you want to learn Django. So maybe. Yep, absolutely and it's


00:12:32.600 --> 00:12:37.160
based on Python not legacy Python so this is all good as well. Yeah so if


00:12:37.160 --> 00:12:41.760
you're looking to pick up Django that's a good place to do it. All right so do


00:12:41.760 --> 00:12:47.040
you remember when we talked about the malicious packages being uploaded to


00:12:47.040 --> 00:12:48.200
- PyPi? - Yeah.


00:12:48.200 --> 00:12:50.200
- Do you remember what they were targeting?


00:12:50.200 --> 00:12:51.400
Like how were they making those,


00:12:51.400 --> 00:12:52.600
getting people to install them?


00:12:52.600 --> 00:12:54.160
- Well, there were a couple ways.


00:12:54.160 --> 00:12:58.080
There were naming standard library things in PyPI,


00:12:58.080 --> 00:12:59.760
and then also misspellings.


00:12:59.760 --> 00:13:00.600
- Exactly.


00:13:00.600 --> 00:13:05.600
So we have a new GitHub project called PyPI-Parker.


00:13:05.600 --> 00:13:08.720
So this is a cool project by a guy named Matt.


00:13:08.720 --> 00:13:09.560
He sent this over and said,


00:13:09.560 --> 00:13:10.920
"Hey, you should check this out."


00:13:10.920 --> 00:13:12.440
I don't think a lot of people know about it yet,


00:13:12.440 --> 00:13:13.760
but it's really cool.


00:13:13.760 --> 00:13:15.680
So the idea is, you know,


00:13:15.680 --> 00:13:17.640
We had this debate about how do people check


00:13:17.640 --> 00:13:20.760
and how people verify what gets uploaded to PyPI,


00:13:20.760 --> 00:13:22.640
should there be a committee that reviews it,


00:13:22.640 --> 00:13:24.600
and all that sounded really bad.


00:13:24.600 --> 00:13:28.240
So he's created this library that says,


00:13:28.240 --> 00:13:30.960
look, the self-serve ability of people


00:13:30.960 --> 00:13:34.880
to just upload things to PyPI, this is a good thing.


00:13:34.880 --> 00:13:36.200
Let's not get rid of it.


00:13:36.200 --> 00:13:40.040
Let's just try to solve this typo squatting problem.


00:13:40.040 --> 00:13:42.800
So what he's done is he's created this thing


00:13:42.800 --> 00:13:45.300
called the PyPI Parker, and it's an extension


00:13:45.300 --> 00:13:46.300
to distutils.


00:13:46.300 --> 00:13:51.120
It's a separate command that you can run on it.


00:13:51.120 --> 00:13:56.760
If I was like Kenneth Wrights and I create a request, you do this and I could run the


00:13:56.760 --> 00:14:00.500
setup py and give it, I think it's park.


00:14:00.500 --> 00:14:05.740
It will actually generate additional packages that I can upload to PyPI.


00:14:05.740 --> 00:14:09.360
There'll be the various reasonable misspellings of requests.


00:14:09.360 --> 00:14:14.200
When you import them, it'll raise an error, an import error, and says, "No, no, no.


00:14:14.200 --> 00:14:18.640
thing that you pip installed, you misspelled that. Go get the real one over here. So it


00:14:18.640 --> 00:14:23.120
gives them like a help message and all that kind of stuff. So it one blocks the ownership


00:14:23.120 --> 00:14:28.560
or provide it gives the ownership of these misspellings to the original package owner.


00:14:28.560 --> 00:14:33.920
And then for the people trying to accidentally use those, it will give them the warning to


00:14:33.920 --> 00:14:38.280
say you've misspelled this, but here's what you actually should be looking for. I think


00:14:38.280 --> 00:14:39.280
that's great.


00:14:39.280 --> 00:14:40.280
Yeah, that's cool.


00:14:40.280 --> 00:14:43.860
Yeah. So well done, Matt. If you're a package owner, check this out. It might be helpful.


00:14:43.860 --> 00:14:47.880
Since I'm not writing so much anymore, I'm thinking about writing a couple new open source


00:14:47.880 --> 00:14:50.500
projects so I'll probably be in that boat soon.


00:14:50.500 --> 00:14:51.500
Yeah, nice.


00:14:51.500 --> 00:14:54.020
So you should use PyPI Parker and then give us a report.


00:14:54.020 --> 00:14:55.020
Okay.


00:14:55.020 --> 00:14:56.020
Awesome.


00:14:56.020 --> 00:14:57.620
That's our six items for the week so hopefully everyone enjoyed them.


00:14:57.620 --> 00:14:58.620
Brian, what else is going on?


00:14:58.620 --> 00:15:01.140
Well, I'm just getting ready for Halloween actually.


00:15:01.140 --> 00:15:02.140
I know.


00:15:02.140 --> 00:15:03.140
Houses around here are getting scary.


00:15:03.140 --> 00:15:05.620
A lot of creatures and various cobwebs.


00:15:05.620 --> 00:15:08.220
But I have not been as busy as you have lately.


00:15:08.220 --> 00:15:09.220
What have you been up to?


00:15:09.220 --> 00:15:12.300
I have just released a brand new course,


00:15:12.300 --> 00:15:15.900
and you can find it at freemongodbcourse.com,


00:15:15.900 --> 00:15:17.300
and that should give you pretty much


00:15:17.300 --> 00:15:18.480
all you need to know about it.


00:15:18.480 --> 00:15:20.100
So I have this paid course,


00:15:20.100 --> 00:15:21.860
which is like a seven hour super in-depth thing,


00:15:21.860 --> 00:15:23.820
and I wanted to come up with a way for people


00:15:23.820 --> 00:15:27.300
to get started with Python, get started with MongoDB,


00:15:27.300 --> 00:15:29.020
and then if you want to learn more,


00:15:29.020 --> 00:15:31.200
you can take the paid course or things like that.


00:15:31.200 --> 00:15:35.520
So just drop over at freemongodbcourse.com and sign up.


00:15:35.520 --> 00:15:36.860
There's really no strings attached.


00:15:36.860 --> 00:15:37.980
You just have to create an account,


00:15:37.980 --> 00:15:39.980
and then you can go take the class.


00:15:39.980 --> 00:15:41.260
Oh, another thing I wanted to point out,


00:15:41.260 --> 00:15:43.300
this is maybe not worth a whole item,


00:15:43.300 --> 00:15:46.240
and this is not my thing, this is just something I saw,


00:15:46.240 --> 00:15:49.740
is Donald Stuft, who runs PyPI,


00:15:49.740 --> 00:15:51.780
and the website and all that kind of stuff,


00:15:51.780 --> 00:15:53.500
he sent out a tweet that said,


00:15:53.500 --> 00:15:56.260
"Python 3 usage has doubled in the past year


00:15:56.260 --> 00:15:59.620
"according to download stats on PyPI."


00:15:59.620 --> 00:16:00.460
- Oh, that's cool.


00:16:00.460 --> 00:16:02.500
- Yeah, so, legacy Python is definitely


00:16:02.500 --> 00:16:05.140
on the downward trend, even though it's still


00:16:05.140 --> 00:16:07.340
the majority of things that get downloaded.


00:16:07.340 --> 00:16:12.140
Yeah, so way to go, Donald, for putting that out there and nice to see that trend continuing.


00:16:12.140 --> 00:16:13.140
All right.


00:16:13.140 --> 00:16:14.540
Well, thank you everyone for listening.


00:16:14.540 --> 00:16:17.180
Brian, thanks for finding these things and sharing with everyone.


00:16:17.180 --> 00:16:19.620
Yeah, thank you.


00:16:19.620 --> 00:16:21.460
Thank you for listening to Python Bytes.


00:16:21.460 --> 00:16:23.980
Follow the show on Twitter via @pythonbytes.


00:16:23.980 --> 00:16:27.100
That's Python Bytes as in B-Y-T-E-S.


00:16:27.100 --> 00:16:30.380
And get the full show notes at pythonbytes.fm.


00:16:30.380 --> 00:16:34.100
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:16:34.100 --> 00:16:35.100
way.


00:16:35.100 --> 00:16:37.600
the lookout for sharing something cool.


00:16:37.600 --> 00:16:40.880
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:16:40.880 --> 00:16:44.100
Thank you for listening and sharing this podcast with your friends and colleagues.

