WEBVTT

00:00:00.001 --> 00:00:05.260
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.260 --> 00:00:09.800
This is episode 47, recorded October 11th, 2017.

00:00:09.800 --> 00:00:11.160
I'm Michael Kennedy.

00:00:11.160 --> 00:00:12.020
And I'm Brian Okken.

00:00:12.020 --> 00:00:13.800
And we've got a bunch of cool stuff lined up for you.

00:00:13.800 --> 00:00:15.000
So, hey, Brian, how's it going?

00:00:15.000 --> 00:00:15.960
It's going really good.

00:00:15.960 --> 00:00:16.640
Yeah, yeah, great.

00:00:16.640 --> 00:00:19.680
Hey, before we get to your first item, I want to say thanks to DigitalOcean.

00:00:19.680 --> 00:00:21.740
They've sponsored a bunch of episodes coming up.

00:00:21.740 --> 00:00:22.840
They're really supporting the show.

00:00:22.840 --> 00:00:27.300
And the thing they want me to tell you about is Spaces, which is like Amazon S3,

00:00:27.300 --> 00:00:30.500
but like literally three times better and you get a two-month trial.

00:00:30.500 --> 00:00:34.100
So check it out at do.co slash Python.

00:00:34.100 --> 00:00:35.400
And we'll talk more about that later.

00:00:35.400 --> 00:00:37.100
How about Fast?

00:00:37.100 --> 00:00:38.280
Fast Python, Brian.

00:00:38.280 --> 00:00:38.800
What do you think?

00:00:38.800 --> 00:00:39.420
I'm excited.

00:00:39.420 --> 00:00:42.180
So PyPy is fast implementation.

00:00:42.180 --> 00:00:46.360
And it's good to see that there's still work coming out.

00:00:46.360 --> 00:00:51.420
And one of the exciting bits of news just recently is version 5.9,

00:00:51.700 --> 00:00:56.540
at least on the PyPy 2.7 version of this release,

00:00:56.540 --> 00:01:00.960
has Pandas and NumPy in it as well, which is super exciting.

00:01:00.960 --> 00:01:04.660
That's actually a really big deal because they had not been supported.

00:01:04.660 --> 00:01:06.560
That's one of the things that was a challenge with PyPy.

00:01:06.560 --> 00:01:08.140
Like it was great.

00:01:08.140 --> 00:01:08.980
It was much faster.

00:01:08.980 --> 00:01:12.760
In many ways, it was like five times faster than regular CPython.

00:01:13.280 --> 00:01:15.840
However, it didn't support any of the C extensions.

00:01:15.840 --> 00:01:18.580
You couldn't integrate things like NumPy and stuff.

00:01:18.580 --> 00:01:21.600
And so it was like you get a subset of Python that's super fast,

00:01:21.600 --> 00:01:23.340
but there might be things you don't want to do.

00:01:23.340 --> 00:01:25.140
And oh, by the way, a lot of those are computational

00:01:25.140 --> 00:01:26.680
and where people care about when it's fast.

00:01:26.680 --> 00:01:27.060
Yeah.

00:01:27.060 --> 00:01:28.440
So it's awesome to see that coming on.

00:01:28.440 --> 00:01:30.640
So getting NumPy and Pandas come on,

00:01:30.640 --> 00:01:35.960
and I'm sure that eventually it'll come on the 3.5 branch as well.

00:01:35.960 --> 00:01:36.660
Yeah, for sure.

00:01:36.680 --> 00:01:39.340
And you also have notes about Cython as well, right?

00:01:39.340 --> 00:01:39.880
Yeah.

00:01:39.880 --> 00:01:43.700
So it includes the part of the help with this,

00:01:43.700 --> 00:01:47.420
and what it includes is Cython 0.27.1,

00:01:47.420 --> 00:01:52.180
which supports a lot more Cython projects on PyPy.

00:01:52.180 --> 00:01:56.580
I'm not sure what the Cython story was before this release,

00:01:56.580 --> 00:01:57.480
but that's pretty exciting.

00:01:57.480 --> 00:01:58.260
Yeah, that's cool.

00:01:58.260 --> 00:02:02.620
Yeah, I think the biggest news here is that CFFI has been updated

00:02:03.040 --> 00:02:08.320
and the C API extensions for many, many projects now work with PyPy,

00:02:08.320 --> 00:02:10.460
whereas previously they did not.

00:02:10.460 --> 00:02:13.120
And so it's not just Pandas and NumPy.

00:02:13.120 --> 00:02:14.160
Those are the headline ones.

00:02:14.160 --> 00:02:17.380
But there's a bunch of things that previously couldn't work with PyPy

00:02:17.380 --> 00:02:18.220
because of the C extensions.

00:02:18.220 --> 00:02:18.940
Well, guess what?

00:02:18.940 --> 00:02:19.620
Now they can.

00:02:19.620 --> 00:02:20.440
That's pretty awesome.

00:02:20.440 --> 00:02:20.840
Yeah.

00:02:20.840 --> 00:02:26.040
And then another bit of news with this release is the optimized JSON parser

00:02:26.040 --> 00:02:27.820
for both memory and speed,

00:02:27.820 --> 00:02:31.160
which should help for people trying to pull in JSON.

00:02:31.160 --> 00:02:32.380
So that's good.

00:02:32.380 --> 00:02:33.020
Yeah, that's awesome.

00:02:33.020 --> 00:02:35.280
I think people use JSON every now and then.

00:02:35.280 --> 00:02:35.840
Not really sure.

00:02:35.840 --> 00:02:37.860
All the microservices,

00:02:37.860 --> 00:02:40.600
it's just like the network lights are above those JSON messages.

00:02:40.600 --> 00:02:42.420
So that's really cool,

00:02:42.420 --> 00:02:43.460
and that's all pretty straightforward.

00:02:43.460 --> 00:02:47.080
I want to show you some stuff that is not straightforward.

00:02:47.080 --> 00:02:51.520
So there's this project on GitHub that has really taken off.

00:02:51.520 --> 00:02:53.760
There's a ton of people contributing to it.

00:02:53.760 --> 00:02:56.700
So let me pull up the main page and see.

00:02:56.700 --> 00:03:00.740
There's 17 contributors who are doing a lot of work on this project,

00:03:01.000 --> 00:03:05.920
and it has about 3,600 stars called WTF Python.

00:03:06.640 --> 00:03:07.920
So if you've heard of,

00:03:07.920 --> 00:03:11.360
have you seen the Watt video about JavaScript and Ruby,

00:03:11.360 --> 00:03:12.140
which is hilarious?

00:03:12.140 --> 00:03:15.800
You know, Python is lucky in that there's not that many weird edge cases,

00:03:15.800 --> 00:03:18.860
but this repository will show you,

00:03:18.860 --> 00:03:20.260
actually, there's some weird cases.

00:03:20.260 --> 00:03:22.500
So have you seen this, Brian?

00:03:22.620 --> 00:03:23.280
No, I haven't.

00:03:23.280 --> 00:03:24.000
This is pretty funny.

00:03:24.000 --> 00:03:27.080
Yeah, I pulled out four items, but there's a bunch,

00:03:27.080 --> 00:03:28.280
and this is super active on GitHub.

00:03:28.280 --> 00:03:29.720
I'm getting all these notifications from it.

00:03:29.720 --> 00:03:30.060
That's cool.

00:03:30.060 --> 00:03:33.160
Like, one is about skipping lines.

00:03:33.160 --> 00:03:35.360
You say, like, value equals 11.

00:03:35.360 --> 00:03:36.360
Value equals 32.

00:03:36.360 --> 00:03:37.200
What is value?

00:03:37.200 --> 00:03:38.080
It's 11.

00:03:38.080 --> 00:03:38.680
Huh?

00:03:38.680 --> 00:03:40.840
What is going on here?

00:03:40.840 --> 00:03:43.420
There's another one that's similar in the same section.

00:03:43.420 --> 00:03:46.900
It says, quote E, equal, equal, quote E, false.

00:03:47.820 --> 00:03:48.120
Okay.

00:03:48.120 --> 00:03:50.060
And things like that.

00:03:50.060 --> 00:03:53.120
And it's about encoding and some interesting stuff.

00:03:53.120 --> 00:03:55.720
So each one of these has, like, a really simple, you know,

00:03:55.720 --> 00:03:58.500
like, three or four lines of code and then the explanation.

00:03:58.500 --> 00:04:01.360
And the explanation, I think, is where this gets interesting.

00:04:01.360 --> 00:04:04.200
So another one is modifying dictionaries.

00:04:04.200 --> 00:04:07.100
Like, these are super good ways to trick people.

00:04:07.100 --> 00:04:08.620
Like, create a dictionary with one item.

00:04:08.620 --> 00:04:11.340
Go through for each item in it.

00:04:11.340 --> 00:04:13.040
Delete that item and add a new one.

00:04:13.040 --> 00:04:14.160
And then print that out.

00:04:14.160 --> 00:04:15.880
How many times did that loop run, do you think?

00:04:15.880 --> 00:04:16.760
I have no idea.

00:04:16.900 --> 00:04:20.560
It's either one or error or something is what I would guess, right?

00:04:20.560 --> 00:04:21.660
But the answer is eight.

00:04:21.660 --> 00:04:22.960
Exactly eight.

00:04:22.960 --> 00:04:23.920
You're like, what?

00:04:23.920 --> 00:04:25.600
Why does it run eight?

00:04:25.600 --> 00:04:31.140
Why doesn't it run one, infinite, or zero, or error?

00:04:31.140 --> 00:04:32.060
Like, those are the three.

00:04:32.060 --> 00:04:33.080
Zero, one, or infinity.

00:04:33.080 --> 00:04:34.260
Eight doesn't make any sense.

00:04:34.260 --> 00:04:37.800
But if you look at the implementation, the dictionaries are pre-allocated

00:04:37.800 --> 00:04:39.740
because you're typically adding stuff.

00:04:39.740 --> 00:04:41.900
They want to grow in, like, a doubling sort of way.

00:04:41.900 --> 00:04:46.620
Not a every time you add something, it's got to reallocate and copy around things.

00:04:46.780 --> 00:04:49.860
And so what they do is they pre-allocate a certain number of items.

00:04:49.860 --> 00:04:55.380
And this trick, like, leverages assigning into those new slots until it runs out.

00:04:55.380 --> 00:04:57.020
So this is crazy.

00:04:57.020 --> 00:04:58.640
I'll give you one more example.

00:04:58.640 --> 00:05:00.240
Is, let's go with the is.

00:05:00.240 --> 00:05:02.480
Is is not what it is.

00:05:02.940 --> 00:05:07.680
So if you say A equals 256, B equals 256, A is B is true.

00:05:07.680 --> 00:05:14.000
However, if you say A is 257 and B is 257, A is B is false.

00:05:14.000 --> 00:05:14.760
Do you know why?

00:05:14.760 --> 00:05:16.500
It's another crazy one.

00:05:16.500 --> 00:05:17.480
This is insane.

00:05:17.560 --> 00:05:23.140
And the reason is, I believe the first 126 numbers, maybe negative as well, I'm not sure,

00:05:23.140 --> 00:05:25.720
are pre-allocated for performance reasons.

00:05:25.720 --> 00:05:31.100
And every time you, like, literally say the number seven, like, that points to this pre-allocated

00:05:31.100 --> 00:05:33.000
flywheel pattern type thing.

00:05:33.520 --> 00:05:36.000
But beyond that, these get allocated on demand.

00:05:36.000 --> 00:05:40.960
So you're basically asking, is the pointer to 257 equal to the other pointer 257?

00:05:40.960 --> 00:05:43.260
And there's no longer this tracking between them and they get dropped.

00:05:43.260 --> 00:05:47.020
So there's just, there's tons of this craziness going on here.

00:05:47.020 --> 00:05:47.660
That's pretty fun.

00:05:47.660 --> 00:05:48.680
Yeah, that's nice.

00:05:49.520 --> 00:05:50.940
So I think this is a fun project.

00:05:50.940 --> 00:05:52.980
I really commend the people working on it.

00:05:52.980 --> 00:05:53.220
It's great.

00:05:53.220 --> 00:05:55.120
And I definitely, I want to do something with this later.

00:05:55.120 --> 00:05:58.000
I just haven't figured out quite what the details are yet, but there's got to be something

00:05:58.000 --> 00:05:58.400
fun here.

00:05:58.400 --> 00:06:01.280
So this makes me feel like I should go practice my Python.

00:06:01.280 --> 00:06:04.400
Like, maybe I'm not as good as I thought I was because that dictionary thing going eight

00:06:04.400 --> 00:06:07.160
times kind of like took me for a loop for a bit.

00:06:07.160 --> 00:06:12.540
Anything in the WTF Python would be evil to try to bring up at a job interview.

00:06:12.540 --> 00:06:14.340
But it'd be very evil.

00:06:14.340 --> 00:06:14.700
Yeah.

00:06:14.700 --> 00:06:16.260
But if they answered it, think of that.

00:06:16.260 --> 00:06:17.380
Yeah, that'd be good.

00:06:17.760 --> 00:06:22.100
I ran across this, it's a recent article called Python Exercises.

00:06:22.100 --> 00:06:24.300
And I've done this before.

00:06:24.300 --> 00:06:31.500
So as a trying to either brush up on Python skills or trying to do, find some questions to ask

00:06:31.500 --> 00:06:35.320
at an interview or something, trying to come up with some decent questions.

00:06:35.320 --> 00:06:41.280
And a lot of the questions out there are, they seem to be sort of generic questions around

00:06:41.280 --> 00:06:42.560
like any language.

00:06:42.560 --> 00:06:44.420
And they just happen to be do it in Python.

00:06:44.640 --> 00:06:50.240
This is a collection of questions that are, some of them are pretty easy to start off

00:06:50.240 --> 00:06:51.660
with, like basic syntax stuff.

00:06:51.660 --> 00:06:57.820
But they're some things that check actually just Python and some use of the standard library.

00:06:57.820 --> 00:07:00.520
And I think it's a nice collection.

00:07:00.520 --> 00:07:08.840
It goes through syntax, of course, and then some text processing and OS integration and decorators,

00:07:08.840 --> 00:07:09.360
generators.

00:07:09.360 --> 00:07:12.060
And you can get into quite a few things.

00:07:12.060 --> 00:07:14.140
But I think it's a nice set.

00:07:14.140 --> 00:07:15.040
It's not too huge.

00:07:15.040 --> 00:07:16.240
It's a good one to look at.

00:07:16.240 --> 00:07:16.760
Yeah, yeah.

00:07:16.760 --> 00:07:18.620
And they don't seem too trivial.

00:07:18.620 --> 00:07:24.020
They're like, given this set of data, parse it into a CSV file, start the subprocess, things

00:07:24.020 --> 00:07:24.320
like that.

00:07:24.320 --> 00:07:25.600
It's really, it's pretty nice, actually.

00:07:25.600 --> 00:07:25.980
Yeah.

00:07:26.040 --> 00:07:30.800
And then at the end, the last thing they talk about is testing, which I very much appreciate.

00:07:30.800 --> 00:07:33.700
I think it's important to make sure.

00:07:33.700 --> 00:07:39.020
I've started with trying to do, send out code examples to, before I bring somebody in for

00:07:39.020 --> 00:07:44.140
an interview, ask them to solve some coding problem, but also to write a test to prove

00:07:44.140 --> 00:07:44.540
it works.

00:07:44.540 --> 00:07:45.900
And I think that's a good thing to add.

00:07:45.900 --> 00:07:46.320
Absolutely.

00:07:46.320 --> 00:07:47.420
Yeah, that's really cool.

00:07:47.420 --> 00:07:49.480
Great that they include that at the end as well.

00:07:49.820 --> 00:07:51.760
So I've got another thing you should test for.

00:07:51.760 --> 00:07:54.340
Before I tell you about it, though, I want to tell you about Spaces.

00:07:54.340 --> 00:08:01.240
So Spaces is DigitalOcean's new service, which lets you basically store files on the internet

00:08:01.240 --> 00:08:04.620
and either privately or publicly pass them around, right?

00:08:04.620 --> 00:08:08.460
So kind of like Amazon S3, but much, much more affordable.

00:08:08.460 --> 00:08:12.100
So instead of charging you nine cents per gigabyte, they charge you one cent.

00:08:12.100 --> 00:08:14.560
And you can use exactly the same tools.

00:08:14.560 --> 00:08:17.600
So, you know, like I use Transmit for my Mac.

00:08:17.660 --> 00:08:20.140
I love that to manage all my stuff in the cloud.

00:08:20.140 --> 00:08:24.780
And when I switched to DigitalOcean Spaces, which I did just because I saw the offer, I'm

00:08:24.780 --> 00:08:27.440
like, this is so much better before we even talked about this.

00:08:27.440 --> 00:08:31.020
I just pointed my Transmit at that and it just kept on working.

00:08:31.020 --> 00:08:33.460
Just said, hey, there's an S3 thing over here and here's the key.

00:08:33.460 --> 00:08:40.660
So if you are using S3 or some other sort of shared cloud storage for files and things

00:08:40.660 --> 00:08:46.700
like that, you definitely should check out DigitalOcean Spaces at do.co slash Python

00:08:46.700 --> 00:08:47.780
and check it out.

00:08:47.780 --> 00:08:51.000
There's a two month free trial and then it's really, really affordable and straightforward.

00:08:51.000 --> 00:08:51.660
I love it.

00:08:51.660 --> 00:08:52.020
Nice.

00:08:52.020 --> 00:08:54.740
The audio you're listening to right now came straight out of there.

00:08:54.740 --> 00:08:55.460
So beautiful.

00:08:55.460 --> 00:08:57.120
Have you heard of Pickle?

00:08:57.120 --> 00:08:57.540
Oh, yeah.

00:08:57.540 --> 00:09:03.360
Not the gherkins, but the built in a way to serialize stuff.

00:09:03.360 --> 00:09:06.880
I don't remember why, but I try to avoid it because I've heard there's problems.

00:09:06.880 --> 00:09:07.120
Yeah.

00:09:07.120 --> 00:09:08.500
There's two major problems with Pickle.

00:09:08.640 --> 00:09:13.860
One of them is it stores a binary representation of your objects.

00:09:13.860 --> 00:09:18.960
And so if you do things like rename a field or maybe even reorder stuff, right?

00:09:18.960 --> 00:09:22.780
If you add a field, remove a field, there's all sorts of stuff where like just the versioning

00:09:22.780 --> 00:09:28.860
of your classes or your data, if that changes, you can no longer properly serialize these things.

00:09:28.860 --> 00:09:29.700
It's not great.

00:09:29.860 --> 00:09:31.280
So that can be a problem.

00:09:31.280 --> 00:09:34.900
And that's probably reason enough to use JSON or some other format.

00:09:34.900 --> 00:09:37.540
However, right in the documentation, it says,

00:09:37.540 --> 00:09:43.820
warning, the Pickle module is not intended to be secure against erroneous or maliciously constructed data.

00:09:43.820 --> 00:09:48.000
Never unpickle data received from an untrusted or unauthenticated source.

00:09:49.100 --> 00:09:49.240
All right.

00:09:49.240 --> 00:09:51.300
So I think people see this like, okay, that looks bad.

00:09:51.300 --> 00:09:52.180
Let's get out of here.

00:09:52.180 --> 00:09:54.580
And they just bail as they should.

00:09:54.580 --> 00:09:58.480
Like, I think even the versioning stuff alone is already an issue.

00:09:58.480 --> 00:10:01.420
So like, I think there was an issue with somebody caching stuff.

00:10:01.420 --> 00:10:06.160
And when they were switching from Python 2 to Python 3, the in-memory representation of like

00:10:06.160 --> 00:10:11.800
date time or some part of the memory was a different representation and the Pickle and stuff

00:10:11.800 --> 00:10:13.880
started to conflict with each other.

00:10:13.880 --> 00:10:18.880
Anyway, this article I want to talk about is called Exploiting Misuse of Python's Pickle.

00:10:19.300 --> 00:10:23.160
So if you've ever read that warning and gone, huh, that sounds bad.

00:10:23.160 --> 00:10:25.240
I can kind of imagine what that might look like.

00:10:25.240 --> 00:10:26.680
I'm going to stay away from it.

00:10:26.680 --> 00:10:30.940
This one shows you exactly how to do bad things.

00:10:30.940 --> 00:10:37.480
And bad things begin with, let's create a remote shell and start executing code.

00:10:37.480 --> 00:10:43.040
And maybe even let us log in remotely over SSH to this machine by sending a little bit of binary data,

00:10:43.040 --> 00:10:48.480
like 50 bytes, 100 bytes, something super small, over to this machine.

00:10:48.580 --> 00:10:49.860
And then we'll just log in and go from there.

00:10:49.860 --> 00:10:50.840
That sounds bad, right?

00:10:50.840 --> 00:10:51.320
Yeah.

00:10:51.320 --> 00:10:51.920
Jeez.

00:10:51.920 --> 00:10:55.980
So the idea is when you unpickle something, there's a way, there's a few hooks where you

00:10:55.980 --> 00:10:57.860
can run arbitrary Python code.

00:10:57.860 --> 00:11:02.700
And so they say, well, let's just use subprocess.popen and create a shell for us.

00:11:04.120 --> 00:11:07.740
So you just put that command in like your dunder reduce, I think it's called.

00:11:07.740 --> 00:11:10.520
And then you've got shells and that's bad.

00:11:10.520 --> 00:11:14.340
So for those of you out there wondering, what is this warning about?

00:11:14.340 --> 00:11:14.920
Exactly.

00:11:14.920 --> 00:11:16.120
Why should I be super scared?

00:11:16.120 --> 00:11:17.100
Here's why.

00:11:17.100 --> 00:11:18.500
Great little example.

00:11:18.500 --> 00:11:19.220
Super approachable.

00:11:19.220 --> 00:11:19.480
Yeah.

00:11:19.480 --> 00:11:19.940
Wacky.

00:11:19.940 --> 00:11:20.160
Yeah.

00:11:20.160 --> 00:11:20.480
Wacky.

00:11:20.540 --> 00:11:24.380
So if I was running like a Django website, I probably wouldn't want to like use that

00:11:24.380 --> 00:11:26.280
as my exchange format on my services, right?

00:11:26.280 --> 00:11:26.640
No.

00:11:26.640 --> 00:11:28.680
And there's so many other better formats anyway.

00:11:28.680 --> 00:11:29.080
So.

00:11:29.080 --> 00:11:29.960
JSON, JSON.

00:11:29.960 --> 00:11:30.560
JSON.

00:11:30.560 --> 00:11:31.140
Yeah.

00:11:31.140 --> 00:11:31.620
For sure.

00:11:31.620 --> 00:11:32.660
All right.

00:11:32.660 --> 00:11:33.720
So what do you got next for us?

00:11:33.720 --> 00:11:35.920
I've got a complete beginner's guide to Django.

00:11:35.920 --> 00:11:36.320
Awesome.

00:11:36.320 --> 00:11:41.300
This is a seven part series and it looks like six parts are done already.

00:11:41.300 --> 00:11:43.720
And the seventh part is coming up soon.

00:11:43.720 --> 00:11:47.980
And it's, it kind of goes through quite a bit of Django.

00:11:47.980 --> 00:11:52.840
I know there's already a lot of Django tutorials out there, but the interesting thing I think that

00:11:52.840 --> 00:11:58.400
makes this one stand out is it's kind of, it has an academic feel to it, I think.

00:11:58.400 --> 00:12:01.240
And if that's kind of your thing, you might like this.

00:12:01.240 --> 00:12:02.380
Well, it has a chalkboard.

00:12:02.820 --> 00:12:05.300
It has a beaker and it has a Superman flying.

00:12:05.300 --> 00:12:06.900
So these are all good signs.

00:12:06.900 --> 00:12:07.260
Yeah.

00:12:07.260 --> 00:12:10.140
Well, it has some like comic like drawings in it too and stuff.

00:12:10.140 --> 00:12:10.420
Yeah.

00:12:10.420 --> 00:12:10.580
Yeah.

00:12:10.580 --> 00:12:10.740
Yeah.

00:12:10.740 --> 00:12:12.840
Actually, I think this is really nice.

00:12:12.840 --> 00:12:14.120
The graphics are wonderful.

00:12:14.120 --> 00:12:19.640
They've got little, wireframes to help you design the web pieces, some nice graphics

00:12:19.640 --> 00:12:20.660
for file structure.

00:12:20.660 --> 00:12:22.420
It seems super approachable to me.

00:12:22.420 --> 00:12:27.800
I kind of got lost with some of the UML diagrams and whatnot, but, it's well written.

00:12:27.800 --> 00:12:30.320
People should check it out if you're want to learn Django.

00:12:30.320 --> 00:12:31.160
So maybe.

00:12:31.160 --> 00:12:31.600
Yep.

00:12:31.600 --> 00:12:32.120
Absolutely.

00:12:32.260 --> 00:12:34.620
And it's based on Python, not legacy Python.

00:12:34.620 --> 00:12:35.840
So this is all good as well.

00:12:35.840 --> 00:12:36.860
Yeah.

00:12:36.860 --> 00:12:40.440
So if you're looking to, pick up Django, that's a good place to do it.

00:12:40.440 --> 00:12:41.240
All right.

00:12:41.240 --> 00:12:46.080
So do you remember when we talked about the malicious packages being uploaded?

00:12:46.080 --> 00:12:47.060
Yes.

00:12:47.180 --> 00:12:47.480
PyPI?

00:12:47.480 --> 00:12:48.000
Yeah.

00:12:48.000 --> 00:12:50.140
Do you remember what they were targeting?

00:12:50.140 --> 00:12:52.440
Like how were they making those, getting people to install them?

00:12:52.440 --> 00:12:54.100
Well, there were a couple of ways.

00:12:54.100 --> 00:12:59.560
There were naming standard library things in PyPI and then also misspellings.

00:12:59.560 --> 00:13:00.200
Exactly.

00:13:00.200 --> 00:13:05.140
So we have a new GitHub project called PyPI dash Parker.

00:13:05.920 --> 00:13:08.660
So this is a cool project by a guy named Matt.

00:13:08.660 --> 00:13:10.580
And he sent this over and said, Hey, you should check this out.

00:13:10.580 --> 00:13:13.560
I don't think a lot of people know about it yet, but it's, it's really cool.

00:13:13.560 --> 00:13:18.580
So the idea is, you know, we had this debate about how do people check and how people verify

00:13:18.580 --> 00:13:20.580
what gets uploaded to PyPI.

00:13:20.580 --> 00:13:22.620
Should there be like a committee that reviews it?

00:13:22.620 --> 00:13:24.300
And all that sounded really bad.

00:13:24.300 --> 00:13:31.260
And so he's created this library that says, look, the self-serve ability of people to just

00:13:31.260 --> 00:13:33.780
upload things to PyPI.

00:13:33.780 --> 00:13:34.840
This is a good thing.

00:13:34.840 --> 00:13:36.100
Let's not get rid of it.

00:13:36.100 --> 00:13:39.260
Let's just try to solve this typo squatting problem.

00:13:39.260 --> 00:13:45.460
So what he's done is he's created this thing called the PyPI Parker and it's an extension to

00:13:45.460 --> 00:13:46.600
dist utils.

00:13:46.600 --> 00:13:50.500
So it's a separate command that you can run on it.

00:13:50.500 --> 00:13:56.820
So if I was like Kenneth writes and I create a request, you do this and I could run the

00:13:56.820 --> 00:13:59.600
setup PY and give it, I think it's park.

00:13:59.600 --> 00:14:04.620
And it will actually generate additional packages that I can upload to PyPI.

00:14:04.620 --> 00:14:08.980
And there'll be the various reasonable misspellings of requests.

00:14:08.980 --> 00:14:14.080
And when you import them, it'll raise an error, an import error and says, no, no, no.

00:14:14.080 --> 00:14:16.400
This thing that you pip installed, you misspelled that.

00:14:16.400 --> 00:14:17.820
Go get the real one over here.

00:14:18.320 --> 00:14:20.620
So it gives them like a help message and all that kind of stuff.

00:14:20.620 --> 00:14:26.640
So it one blocks the ownership or provide, it gives the ownership of these misspellings to the

00:14:26.640 --> 00:14:27.700
original package owner.

00:14:27.700 --> 00:14:34.280
And then for the people trying to accidentally use those, it will give them the warning to say,

00:14:34.280 --> 00:14:37.820
you've misspelled this, but here's what you actually should be looking for.

00:14:37.820 --> 00:14:38.560
I think that's great.

00:14:38.560 --> 00:14:38.940
Yeah.

00:14:38.940 --> 00:14:39.640
That's cool.

00:14:39.640 --> 00:14:39.860
Yeah.

00:14:40.000 --> 00:14:40.880
So well done, Matt.

00:14:40.880 --> 00:14:42.980
If you're a package owner, check this out.

00:14:42.980 --> 00:14:43.500
It might be helpful.

00:14:43.500 --> 00:14:48.360
Since I'm not writing so much anymore, I'm thinking about writing a couple new open source projects.

00:14:48.360 --> 00:14:50.740
So I'll probably be in that boat soon.

00:14:50.740 --> 00:14:51.100
Yeah.

00:14:51.100 --> 00:14:51.360
Nice.

00:14:51.360 --> 00:14:53.820
So you should use PyPI Parker and then give us a report.

00:14:53.820 --> 00:14:54.180
Okay.

00:14:54.180 --> 00:14:54.540
Awesome.

00:14:54.540 --> 00:14:55.960
That's our six items for the week.

00:14:55.960 --> 00:14:57.540
So hopefully everyone enjoyed them.

00:14:57.540 --> 00:14:58.620
Brian, what else is going on?

00:14:58.620 --> 00:15:00.580
Well, I'm just getting ready for Halloween actually.

00:15:00.580 --> 00:15:01.040
So.

00:15:01.040 --> 00:15:01.460
I know.

00:15:01.460 --> 00:15:02.820
Houses around here getting scary.

00:15:02.820 --> 00:15:05.420
A lot of creatures and various cobwebs.

00:15:05.420 --> 00:15:07.780
But I have not been as busy as you have lately.

00:15:07.780 --> 00:15:08.860
What have you been up to?

00:15:08.860 --> 00:15:15.980
I have just released a brand new course and you can find it at freemongodbcourse.com and

00:15:15.980 --> 00:15:18.140
that should give you pretty much all you need to know about it.

00:15:18.140 --> 00:15:21.820
So I have this paid course, which is like a seven hour, super in-depth thing.

00:15:21.820 --> 00:15:26.260
And I wanted to come up with a way for people to get started with Python, get started with

00:15:26.260 --> 00:15:26.680
MongoDB.

00:15:26.680 --> 00:15:31.120
And then if you want to learn more, you can like take the paid course or things like that.

00:15:31.120 --> 00:15:35.440
So just drop over at freemongodbcourse.com and sign up.

00:15:35.440 --> 00:15:36.720
There's really no strings attached.

00:15:36.720 --> 00:15:39.400
You just have to create an account and then you can go take the class.

00:15:39.400 --> 00:15:42.880
Oh, another thing I wanted to point out, this is maybe not worth a whole item.

00:15:42.880 --> 00:15:44.220
And this is not my thing.

00:15:44.220 --> 00:15:51.280
This is just something I saw is Donald Stuffed, who runs PyPI and the website and all that kind

00:15:51.280 --> 00:15:51.600
of stuff.

00:15:51.600 --> 00:15:57.000
He sent out a tweet that said, Python 3 usage has doubled in the past year according to

00:15:57.000 --> 00:15:59.360
download stats on PyPI.

00:15:59.360 --> 00:16:00.040
Oh, that's cool.

00:16:00.040 --> 00:16:00.280
Yeah.

00:16:00.280 --> 00:16:05.500
So legacy Python is definitely on the downward trend, even though it's still the majority

00:16:05.500 --> 00:16:06.660
of things that get downloaded.

00:16:06.660 --> 00:16:07.460
Yeah.

00:16:07.460 --> 00:16:11.980
So way to go, Donald, for putting that out there and nice to see that trend continuing.

00:16:11.980 --> 00:16:13.020
All right.

00:16:13.020 --> 00:16:14.360
Well, thank you everyone for listening.

00:16:14.360 --> 00:16:17.040
Brian, thanks for finding these things and sharing with everyone.

00:16:17.040 --> 00:16:17.360
Yeah.

00:16:17.360 --> 00:16:17.740
Thank you.

00:16:17.740 --> 00:16:21.080
Thank you for listening to Python Bytes.

00:16:21.080 --> 00:16:23.660
Follow the show on Twitter via at Python Bytes.

00:16:23.660 --> 00:16:26.540
That's Python Bytes as in B-Y-T-E-S.

00:16:26.540 --> 00:16:29.980
And get the full show notes at Pythonbytes.fm.

00:16:29.980 --> 00:16:34.300
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:16:34.300 --> 00:16:37.020
We're always on the lookout for sharing something cool.

00:16:37.020 --> 00:16:40.400
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:16:40.400 --> 00:16:44.020
Thank you for listening and sharing this podcast with your friends and colleagues.

