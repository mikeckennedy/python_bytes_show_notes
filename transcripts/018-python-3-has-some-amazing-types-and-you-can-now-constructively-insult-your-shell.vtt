WEBVTT

00:00:00.001 --> 00:00:05.460
Hello and welcome to Python Bytes, Python news and headlines delivered directly to your earbuds.

00:00:05.460 --> 00:00:07.060
I'm Michael Kennedy.

00:00:07.060 --> 00:00:08.100
And I'm Brian Okken.

00:00:08.100 --> 00:00:13.800
We're here to share the Python news with you and basically share the cool stuff that Brian and I found for the week.

00:00:13.800 --> 00:00:15.740
Brian, you know what I think is cool?

00:00:15.740 --> 00:00:21.920
That I can open up, I can basically go to any Python object or module or even function or whatever and just say,

00:00:21.920 --> 00:00:27.040
tell me what is in you, dir this thing, and out pops all of its capabilities, mostly anyway.

00:00:27.040 --> 00:00:27.760
Yeah, I love that.

00:00:27.760 --> 00:00:30.120
Do you know what REPL stands for?

00:00:30.120 --> 00:00:30.800
REPL?

00:00:30.800 --> 00:00:31.360
REPL.

00:00:31.360 --> 00:00:33.060
Read Val Print Loop.

00:00:33.060 --> 00:00:35.380
Just what you get when you type Python.

00:00:35.380 --> 00:00:35.720
Yeah.

00:00:35.720 --> 00:00:44.120
Like most of the time now, the only time I open that is to try out something little or to actually to use the dir command.

00:00:44.120 --> 00:00:44.820
You know what?

00:00:44.820 --> 00:00:45.720
I do do that as well.

00:00:45.720 --> 00:00:47.800
I'm like, I'm going to open this up and just do a dir here.

00:00:47.800 --> 00:00:48.140
Okay.

00:00:48.140 --> 00:00:49.000
Back to work.

00:00:49.000 --> 00:00:50.020
Yeah, exactly.

00:00:50.020 --> 00:00:52.060
Just to look at the interface for something.

00:00:52.060 --> 00:00:59.280
So I was excited to see a new project from Leica 9M on GitHub called pdir2.

00:00:59.280 --> 00:01:04.320
And when you use it, so it's pdir2 when you're installing it.

00:01:04.320 --> 00:01:05.860
But when you use it, it's just pdir.

00:01:06.520 --> 00:01:08.100
And it's just a replacement.

00:01:08.100 --> 00:01:17.060
And it's cool because it's all colorized and it splits it out and splits it up into one line per item.

00:01:17.060 --> 00:01:23.180
And it pulls the dock string out of each item so that you can see that.

00:01:23.500 --> 00:01:29.440
And for what I'm using it for, when I pull up the REPL, it does what it should do automatically.

00:01:29.440 --> 00:01:30.380
And I like it.

00:01:30.380 --> 00:01:31.160
Yeah, it's cool.

00:01:31.160 --> 00:01:38.120
I mean, it's kind of like if you typed help a thing, but it gives you meaningful stuff even if there's no real help to be had.

00:01:38.120 --> 00:01:40.160
And it'll categorize things like, here are all the classes.

00:01:40.160 --> 00:01:41.040
Here are all the functions.

00:01:41.040 --> 00:01:43.600
Here's the stuff that I have no idea what it is, but it's also there.

00:01:43.600 --> 00:01:44.540
So we'll put it over here.

00:01:44.540 --> 00:01:49.420
And if there's dock strings, it'll put the dock strings there for like, here's the description of each thing.

00:01:49.420 --> 00:01:50.560
It's really nice.

00:01:50.780 --> 00:01:56.680
Yeah, and it does, it like puts all the dunder functions out of the way so those aren't in the middle of everything too.

00:01:56.680 --> 00:01:57.960
Yeah, yeah, those land in the other.

00:01:57.960 --> 00:01:58.380
Yeah.

00:01:58.380 --> 00:02:02.020
Anyway, it's just, it's part of my repertoire now.

00:02:02.020 --> 00:02:03.760
I'm going to, I'm never going to let it go.

00:02:03.760 --> 00:02:12.820
One of the things I would like to ask somebody to do is to help out with the project and convert the README to whatever that other thing is.

00:02:12.820 --> 00:02:13.720
Restructured?

00:02:13.720 --> 00:02:19.780
Yeah, restructured so that it looks good on PyPI because it's in, the README is in Markdown.

00:02:20.000 --> 00:02:22.100
And PyPI still doesn't like Markdown.

00:02:22.100 --> 00:02:25.520
I wonder, did you look at it on PyPI.org?

00:02:25.520 --> 00:02:26.480
No, I haven't.

00:02:26.480 --> 00:02:27.000
No.

00:02:27.000 --> 00:02:29.120
Versus the older one?

00:02:29.120 --> 00:02:30.580
It's worth looking at that one.

00:02:30.580 --> 00:02:32.960
I have no idea what it'll look like there either, but that's the new one.

00:02:32.960 --> 00:02:34.560
Maybe it understands Markdown.

00:02:34.560 --> 00:02:35.140
Who knows?

00:02:35.140 --> 00:02:39.760
I would also like to recommend that people pair this with PtPython.

00:02:39.760 --> 00:02:40.680
Do you know PtPython?

00:02:40.680 --> 00:02:41.280
I don't.

00:02:41.280 --> 00:02:41.800
Oh my God.

00:02:41.800 --> 00:02:42.840
PtPython is awesome.

00:02:42.840 --> 00:02:44.420
Like I don't use the REPL very much.

00:02:44.420 --> 00:02:47.120
Everyone knows I love PyCharm and I kind of live there.

00:02:47.120 --> 00:02:54.100
But when I do go into the REPL, it really annoys me that I need to completely type everything that is there.

00:02:54.100 --> 00:02:56.520
That it doesn't autocomplete.

00:02:56.520 --> 00:03:00.440
Especially when I'm exploring something new, which is like why we said often we go into the REPL.

00:03:00.820 --> 00:03:12.940
Well, PtPython is basically, I think it's a little bit based on Emacs, but it's like a different version of the REPL that has code completion and a little bit of a UI over the terminal.

00:03:12.940 --> 00:03:13.980
It's really nice.

00:03:13.980 --> 00:03:17.260
So these days, if I want Python, I type PtPython.

00:03:17.260 --> 00:03:17.660
Okay.

00:03:17.660 --> 00:03:18.720
Well, I'll have to check that out.

00:03:18.720 --> 00:03:20.620
And just to let people know, I did.

00:03:20.620 --> 00:03:21.340
Okay.

00:03:21.340 --> 00:03:26.320
So I'll take back that request because I looked it up on PyPI.org and it looks great.

00:03:26.320 --> 00:03:28.420
It even has that animated GIF on there.

00:03:28.420 --> 00:03:29.100
Oh, yeah.

00:03:29.160 --> 00:03:31.860
So there's a little animated GIF that shows you how it works, which is quite cool.

00:03:31.860 --> 00:03:33.900
So, yeah, check out this project.

00:03:33.900 --> 00:03:34.940
It's easy to use.

00:03:34.940 --> 00:03:43.580
The one thing to notice is you've got a pip install peter2 versus peter, but then the module's just pdir, right?

00:03:43.580 --> 00:03:47.240
So there's a little bit of a nomenclature funkiness, but it is cool.

00:03:47.240 --> 00:03:48.860
You know what else?

00:03:48.860 --> 00:03:49.580
Go ahead.

00:03:49.580 --> 00:03:52.280
I just want people to remember that.

00:03:52.280 --> 00:03:53.400
And speaking of memory.

00:03:53.400 --> 00:03:55.920
Speaking of memory, absolutely.

00:03:56.680 --> 00:04:00.980
So this has happened to me once in my life.

00:04:00.980 --> 00:04:03.100
I have not used these tools to solve it.

00:04:03.100 --> 00:04:04.000
But here's the deal.

00:04:04.000 --> 00:04:16.360
Like, suppose that you somehow, through probably your fault, but it could have been like a hard drive failure or something, somehow you've lost your source code.

00:04:16.540 --> 00:04:22.260
So there's a guy who was using a source control wrong and wiped away all of his files off of his directory.

00:04:22.260 --> 00:04:25.900
But he still had the program running in memory.

00:04:25.900 --> 00:04:27.260
It was a Python program.

00:04:27.260 --> 00:04:32.080
So he used two really interesting packages that I'd never heard of.

00:04:32.080 --> 00:04:33.000
Had you heard of these?

00:04:33.000 --> 00:04:33.860
No, I haven't.

00:04:33.920 --> 00:04:38.380
One of them is Pyrocyte, like parasite, but for Python, P-Y-R-A-C-E.

00:04:38.380 --> 00:04:42.380
And the other one is un-compile 6.

00:04:42.380 --> 00:04:48.620
Because apparently it's one of the few that supports both Python 2 and Python 3, and multiplication is awesome.

00:04:48.620 --> 00:04:49.880
So un-compile 6.

00:04:50.840 --> 00:04:56.080
So the idea is with Pyrocyte, you can attach to any running Python process.

00:04:56.080 --> 00:05:02.280
And you basically get this REPL, like we were talking about, to just explore its memory, to see what its values are.

00:05:02.280 --> 00:05:05.300
You can even, like, force it to load other scripts and run them.

00:05:05.300 --> 00:05:10.840
You can go to, like, an in-memory, like, singleton object and, like, work with its data.

00:05:10.840 --> 00:05:16.700
All sorts of stuff you can do in real time while it's still running around.

00:05:16.700 --> 00:05:17.540
That's pretty cool.

00:05:17.540 --> 00:05:21.180
So basically what he did is he said, all right, I'm going to hook up to it with Pyrocyte.

00:05:21.180 --> 00:05:26.340
I'm going to force the thing to load un-compile, and I'm going to call un-compile on itself and get my code back.

00:05:26.340 --> 00:05:26.840
Wow.

00:05:26.840 --> 00:05:29.840
But mostly the core.

00:05:29.840 --> 00:05:30.900
It worked.

00:05:30.900 --> 00:05:31.560
Yes, it worked.

00:05:31.560 --> 00:05:33.640
There are people, there's, like, a whole bunch of people.

00:05:33.640 --> 00:05:34.780
It's a, I get a gist.

00:05:34.780 --> 00:05:39.000
At the bottom of the gist, they're like, oh, my God, I just had to try this because I couldn't believe it would work.

00:05:39.000 --> 00:05:39.920
Oh, that's so awesome.

00:05:39.920 --> 00:05:40.940
Yeah, it works.

00:05:40.940 --> 00:05:46.940
I think there's either a video or a little GIF that is just, like, that basically shows you how it works if you go to Pyrocyte.

00:05:46.940 --> 00:05:50.500
Pyrocyte.com, which that's the coolest takeaway for me on this whole one.

00:05:50.500 --> 00:05:51.120
That's awesome.

00:05:51.120 --> 00:05:51.860
Good job.

00:05:51.860 --> 00:05:52.520
Cool.

00:05:52.520 --> 00:05:52.740
Yeah.

00:05:52.740 --> 00:05:54.160
All right.

00:05:54.160 --> 00:05:55.220
You know what I think?

00:05:55.220 --> 00:06:00.300
You and I were on a mission, right, to make sure that Python is modern Python, not legacy Python, right?

00:06:00.300 --> 00:06:00.940
Yes, definitely.

00:06:00.940 --> 00:06:02.260
And I was really surprised.

00:06:02.260 --> 00:06:07.280
They're still adding quite interesting and new data types to Python 3.

00:06:07.380 --> 00:06:11.980
Even stuff that's been around for a little while that I just haven't, like, heard of.

00:06:11.980 --> 00:06:18.000
Because of this show, I've learned about the simple namespace as a, wait, no, that's not it.

00:06:18.000 --> 00:06:20.180
The name tuple class, the capitals.

00:06:20.180 --> 00:06:21.460
But let's get into this.

00:06:21.460 --> 00:06:25.800
There's an article called New Interesting Data Types in Python 3.

00:06:26.280 --> 00:06:29.260
And it just goes through three that I really like.

00:06:29.260 --> 00:06:38.700
And the three types are types.mappingproxytype, types.simple namespace, and typing.namedtuple.

00:06:38.700 --> 00:06:42.860
And the mapping proxy type is, like, really cool.

00:06:42.860 --> 00:06:45.140
It takes, like, something like a dictionary.

00:06:45.140 --> 00:06:48.140
Or it says, I can't think of anything other than dictionary.

00:06:48.140 --> 00:06:50.080
It says it only takes mapping types.

00:06:50.560 --> 00:06:51.440
Yeah, it's really cool.

00:06:51.440 --> 00:06:54.140
But it's, like, a read-only dictionary, basically, right?

00:06:54.140 --> 00:06:54.440
Yeah.

00:06:54.440 --> 00:06:56.880
So you take a normal, like, maybe a normal dictionary.

00:06:56.880 --> 00:07:02.520
And, like, if you had an API or something, you wanted to expose that dictionary through the API,

00:07:02.520 --> 00:07:05.800
you could wrap it in this mapping proxy type and return that.

00:07:05.800 --> 00:07:07.360
And I tried it out.

00:07:07.360 --> 00:07:14.520
And so, for instance, one part of your project could use the mapping proxy type version and read everything.

00:07:14.520 --> 00:07:20.040
And the part of your system that can have, that still has write access, that is synchronized.

00:07:20.040 --> 00:07:20.960
So it isn't a copy.

00:07:20.960 --> 00:07:25.120
You can, when one part writes to it, it gets updated in the other place, too.

00:07:25.120 --> 00:07:27.700
Oh, it's like a view into an existing dictionary, huh?

00:07:27.700 --> 00:07:28.960
Yeah, it's a read-only view.

00:07:28.960 --> 00:07:29.380
Sweet.

00:07:29.380 --> 00:07:30.800
So that's nice.

00:07:30.800 --> 00:07:36.340
And then not too long ago, I started using where I really wanted classes or something.

00:07:36.340 --> 00:07:41.940
And I was using things like tuples or lists where there really should have been something more structured.

00:07:41.940 --> 00:07:45.220
I've been using the lowercase named tuple.

00:07:45.220 --> 00:07:47.640
Right, out of the collections names, out of the collections module, right?

00:07:47.640 --> 00:07:48.700
Yeah, out of collections.

00:07:49.400 --> 00:07:57.680
And there is this thing in types called types.simple namespace that uses a similar sort of functionality.

00:07:57.680 --> 00:08:05.060
You can just, if you define a type to be that type, you can just, the parameters when you instantiate it,

00:08:05.060 --> 00:08:07.820
those just become elements inside the object.

00:08:07.820 --> 00:08:09.240
It's pretty convenient.

00:08:09.440 --> 00:08:09.960
Yeah, that's cool.

00:08:09.960 --> 00:08:11.100
So you can do a little more organization.

00:08:11.100 --> 00:08:15.080
And then, of course, the typing.name tuple class is really nice.

00:08:15.080 --> 00:08:15.980
I hadn't been using it.

00:08:15.980 --> 00:08:17.700
I've always just used collections.name tuple.

00:08:17.700 --> 00:08:19.780
But I think I'm going to be switching.

00:08:19.780 --> 00:08:25.620
Now, one word of caution, I suppose, is a lot of these are, they require pretty modern Python.

00:08:25.620 --> 00:08:29.200
Some of the techniques they show require 3.6.1.

00:08:29.200 --> 00:08:31.120
Like, 3.6.0 is not enough.

00:08:31.120 --> 00:08:35.600
So just be aware that some of these require pretty new versions.

00:08:35.820 --> 00:08:40.520
Yeah, and that's, I guess, it's hard for me to remember because I'm usually trying to stay.

00:08:40.520 --> 00:08:45.820
I don't go into the in-development Python, but I try to use the latest released one.

00:08:45.820 --> 00:08:46.380
I do as well.

00:08:46.380 --> 00:08:47.520
You know where that bites me, though?

00:08:47.520 --> 00:08:49.920
Is on my DigitalOcean servers.

00:08:49.920 --> 00:08:55.480
It's running the version of Ubuntu that only has 3.5.2 or something like that.

00:08:55.800 --> 00:09:00.180
So if it's literally a 3.6 feature, I'll put it in my app and I'll ship it like, oh, it doesn't work.

00:09:00.180 --> 00:09:00.800
What was I thinking?

00:09:00.800 --> 00:09:02.860
Yeah, and I forget that.

00:09:02.860 --> 00:09:09.860
That 3.5 is really, for version 3.x, 3.5 is being used more than 3.6 right now.

00:09:09.860 --> 00:09:11.780
Yeah, just because of the distributions, I think.

00:09:11.780 --> 00:09:15.920
In my mind, that's like the minimum bar for 3.5 stuff is 3.5.

00:09:15.920 --> 00:09:16.880
Yeah, okay.

00:09:16.880 --> 00:09:20.820
But I think these are great things to start adding to your repertoire.

00:09:20.820 --> 00:09:24.220
If you have control over where it's going to run, those are good things.

00:09:24.320 --> 00:09:26.820
Yeah, and some of them come from like Python 3.3 or 3.4.

00:09:26.820 --> 00:09:27.300
They're fine.

00:09:27.300 --> 00:09:29.320
There's just a few techniques there that are brand new.

00:09:29.320 --> 00:09:33.060
And what I like about this, one of the things I like about this article is it's pretty short

00:09:33.060 --> 00:09:37.500
and it gives examples of how to use these pretty concisely.

00:09:37.500 --> 00:09:38.500
So that's good.

00:09:38.500 --> 00:09:39.560
Yeah, very nice, very nice.

00:09:39.560 --> 00:09:45.140
Speaking of how do I use things, wouldn't it be awesome if I could just go to my Bash shell

00:09:45.140 --> 00:09:47.600
and just type, how do I and type a thing?

00:09:47.600 --> 00:09:52.660
Like I'd like to say, maybe I want to know how to print a stack trace or trace back in Python.

00:09:52.660 --> 00:09:56.940
I could say, how do I print stack trace Python and just type that?

00:09:56.940 --> 00:09:57.900
Yeah, that'd be cool.

00:09:57.900 --> 00:09:59.400
It'd be cool if my computer knew that, right?

00:09:59.400 --> 00:10:03.380
Well, it turns out we ran across a project called How Do I?

00:10:03.380 --> 00:10:10.660
And if you install How Do I, if you pip install it, it will give you instant coding and shell answers on the command line.

00:10:11.300 --> 00:10:14.360
So I can say, how do I connect SQLAlchemy?

00:10:14.360 --> 00:10:17.500
And it'll give me the Python code to connect for SQLAlchemy.

00:10:17.500 --> 00:10:20.900
I can say, how do I Python save dictionary?

00:10:20.900 --> 00:10:21.860
That's three words.

00:10:21.860 --> 00:10:28.320
And it'll show me how to use the JSON load s dump functionality right there in the command line.

00:10:28.680 --> 00:10:30.720
Now, sometimes it gives me like a stupid answer.

00:10:30.720 --> 00:10:32.540
Like if you type that, how do I Python save?

00:10:32.540 --> 00:10:35.380
How do I Python load JSON?

00:10:35.380 --> 00:10:37.680
It just shows you JSON, which is stupid.

00:10:37.680 --> 00:10:43.300
But you can do a dash A and it'll give you all the answers it's found on the internet related to that.

00:10:43.300 --> 00:10:45.260
Usually somewhere in that list is something decent.

00:10:45.780 --> 00:10:50.380
It has some sources like Stack Overflow and I don't know where they all come from, but they're all over the place.

00:10:50.380 --> 00:10:51.240
It's cool.

00:10:51.240 --> 00:10:53.200
I can say, how do I debug Python?

00:10:53.200 --> 00:10:54.820
It'll show me the PDB commands.

00:10:54.820 --> 00:10:57.480
I can say, how do I change my path in macOS?

00:10:57.480 --> 00:11:00.040
And it'll show me how to do that, assuming I'm running Bash.

00:11:00.040 --> 00:11:00.720
Things like that.

00:11:00.720 --> 00:11:01.020
Okay.

00:11:01.020 --> 00:11:02.200
I'm going to try that.

00:11:02.200 --> 00:11:02.660
Yeah.

00:11:02.660 --> 00:11:05.160
How do I put a worm on a hook?

00:11:05.160 --> 00:11:06.660
Exactly.

00:11:06.660 --> 00:11:08.400
Yeah, it doesn't work.

00:11:08.400 --> 00:11:10.720
Yeah, it's got to be something technical, I think.

00:11:10.720 --> 00:11:14.840
There's another one that I want to point out that I thought was really funny,

00:11:14.980 --> 00:11:16.020
but actually it's kind of useful.

00:11:16.020 --> 00:11:16.780
Oh, what's that?

00:11:16.780 --> 00:11:17.900
It starts with a command.

00:11:17.900 --> 00:11:20.640
It actually starts with a cartoon.

00:11:20.640 --> 00:11:24.920
And basically the idea is if you type in a command that you think you know on the shell,

00:11:24.920 --> 00:11:30.020
but you get it wrong, you can curse at your shell and it will potentially fix it for you.

00:11:30.020 --> 00:11:30.860
Yeah, I love this.

00:11:30.860 --> 00:11:32.880
So this thing is called the F.

00:11:32.880 --> 00:11:36.060
I'm not going to complete it so we can keep our clean rating in iTunes,

00:11:36.060 --> 00:11:38.140
but the link is in the show notes.

00:11:38.140 --> 00:11:41.780
And basically you type that after you've made a mistake on the shell and it goes,

00:11:41.780 --> 00:11:43.160
oh, you probably meant this.

00:11:43.640 --> 00:11:45.780
Are you trying to do this get checkout branch thing?

00:11:45.780 --> 00:11:46.600
You did a little bit wrong.

00:11:46.600 --> 00:11:47.340
The F.

00:11:47.340 --> 00:11:48.540
Oh, here's the command.

00:11:48.540 --> 00:11:48.840
Enter.

00:11:48.840 --> 00:11:50.440
And it'll just automatically fix it for you.

00:11:50.440 --> 00:11:50.840
It's beautiful.

00:11:50.840 --> 00:11:51.660
Yeah, nice.

00:11:51.660 --> 00:11:55.560
So plus you get a little, yeah, you get to let some frustration out on the thing, right?

00:11:55.560 --> 00:11:56.100
Yeah.

00:11:56.100 --> 00:11:57.560
All right.

00:11:57.560 --> 00:11:58.200
What you got for us?

00:11:58.200 --> 00:11:58.560
What's next?

00:11:58.560 --> 00:11:59.340
Oh, yeah.

00:11:59.340 --> 00:12:00.420
I got to go back to that tab.

00:12:00.420 --> 00:12:04.120
We have a, yeah, we're at a listener.

00:12:04.120 --> 00:12:06.580
So, you know, it just seems like we just did the last episode.

00:12:08.000 --> 00:12:09.120
Just a few days ago.

00:12:09.120 --> 00:12:09.820
How did that work?

00:12:09.820 --> 00:12:14.220
That we had a listener commented on the last episode.

00:12:14.220 --> 00:12:20.540
Last episode, we did mention some feedback from a listener about async speeding up their

00:12:20.540 --> 00:12:21.700
some work.

00:12:21.700 --> 00:12:24.340
And we have another one from a comment this time.

00:12:24.460 --> 00:12:28.160
And this is a project that a listener shared with us.

00:12:28.160 --> 00:12:30.660
And we've got a link in the show notes.

00:12:30.660 --> 00:12:33.060
But it's a project called PyMarsis.

00:12:33.060 --> 00:12:37.480
And I wasn't familiar with eMarsis.

00:12:37.480 --> 00:12:38.640
It doesn't really matter.

00:12:38.640 --> 00:12:41.360
But it's a cloud-based CRM.

00:12:41.360 --> 00:12:42.500
And it's a Python interface.

00:12:42.500 --> 00:12:44.260
But I'll just read this.

00:12:44.260 --> 00:12:45.880
The gist of it is it sped it up.

00:12:45.880 --> 00:12:47.040
And this is from Diego.

00:12:47.040 --> 00:12:47.720
Thanks, Diego.

00:12:47.720 --> 00:12:49.740
Another awesome episode.

00:12:49.740 --> 00:12:50.760
Thanks, Michael and Brian.

00:12:51.160 --> 00:12:54.720
And if you say that we do something awesome, we'll totally put you on the show.

00:12:54.720 --> 00:12:55.400
Okay.

00:12:55.400 --> 00:12:57.580
About async.io being awesome.

00:12:57.580 --> 00:12:58.840
I had my own experience.

00:12:58.840 --> 00:13:05.900
I had to send information to about 100 information about hundreds of thousands of users to a CRM

00:13:05.900 --> 00:13:07.700
through their public API daily.

00:13:07.700 --> 00:13:14.020
And with the synchronous stuff, it would have taken 50 hours a day, which you can't do that.

00:13:14.020 --> 00:13:16.140
And they added async.

00:13:16.140 --> 00:13:18.420
And it went down to 20 minutes.

00:13:18.420 --> 00:13:21.840
So that's 150 times faster, which is awesome.

00:13:21.840 --> 00:13:22.020
Yeah.

00:13:22.020 --> 00:13:23.600
They were using requests before.

00:13:23.600 --> 00:13:28.180
And in order to update their CRM, it took 50 hours per day problem.

00:13:28.180 --> 00:13:35.940
So they switched to the AIo HTTP client stuff that has async and await in 20 minutes.

00:13:35.940 --> 00:13:37.280
In fact, he told us an interesting story.

00:13:37.280 --> 00:13:42.040
He said, the first time I ran it, it opened so many connections that it crashed his Mac.

00:13:42.520 --> 00:13:47.040
And so he actually had to implement a semaphore limiting system, which is pretty cool.

00:13:47.040 --> 00:13:47.320
Yeah.

00:13:47.320 --> 00:13:49.980
And I did like that he added that, that he added the semaphores.

00:13:49.980 --> 00:13:54.780
But the GitHub link that he had put up, I didn't see any semaphore usage in there.

00:13:54.780 --> 00:14:00.220
So I've also, in our show notes, linked another article that talks about using asynchronous I.O.

00:14:00.220 --> 00:14:03.700
with semaphores to limit how many connections you're making.

00:14:03.860 --> 00:14:03.980
Yeah.

00:14:03.980 --> 00:14:05.840
No, thanks, Diego, for putting that up there.

00:14:05.840 --> 00:14:10.520
Anybody who wants to have a comment on the show, you know, you can contact us on Twitter where we're at, Python Bytes.

00:14:10.520 --> 00:14:15.040
But also, every episode has a discuss section at the end.

00:14:15.040 --> 00:14:18.160
So if you want to talk about an episode, share a link or whatever, drop in there.

00:14:18.160 --> 00:14:19.680
So what's the link for this episode?

00:14:19.680 --> 00:14:21.760
Pythonbytes.fm slash 18.

00:14:21.760 --> 00:14:22.360
Yeah, yeah.

00:14:22.360 --> 00:14:22.820
There you go.

00:14:22.820 --> 00:14:23.100
Cool.

00:14:23.200 --> 00:14:25.340
Yeah, it's super, I made it super easy to find.

00:14:25.340 --> 00:14:31.700
And do you know what would be super easy is if somebody would make an easy way for me to do a pyramid installation.

00:14:31.700 --> 00:14:32.220
That's right.

00:14:32.220 --> 00:14:42.440
Because, so the way I made that slash 18 work, and you can still go to like slash episode slash list or whatever, is I use constraints in the routing infrastructure.

00:14:42.440 --> 00:14:52.780
And so one of the things that I've been doing a lot of work with lately is with building pyramid web apps and trying to really help people jumpstart what they're up to, right?

00:14:52.820 --> 00:15:00.120
Like I can go to pyramid and create a web app, and I get basically a web app that runs, and here's the view function, and here's a template.

00:15:00.120 --> 00:15:00.800
Go.

00:15:00.800 --> 00:15:02.580
Go write the web app from scratch.

00:15:02.580 --> 00:15:08.540
And I kind of wanted to help the world not start from scratch, but start from near the end.

00:15:08.540 --> 00:15:10.600
So I've been doing a lot with cookie cutter.

00:15:10.600 --> 00:15:11.460
More on that later.

00:15:11.460 --> 00:15:22.800
But I decided to create a cookie cutter template that is an opinionated cookie cutter template for creating pyramid web apps that have most of what you need pre-built and pre-configured.

00:15:22.800 --> 00:15:28.100
And factored the way you would for a large professional app, not for like a one-file starter thing.

00:15:28.100 --> 00:15:28.840
Yeah, that's great.

00:15:28.840 --> 00:15:33.440
So I created a cookie cutter thing called cookie cutter dash pyramids --talk Python starter.

00:15:33.440 --> 00:15:38.520
And so this came out of my Python for Entrepreneurs course, but you don't have to have anything to do with that to play with this template.

00:15:38.520 --> 00:15:44.460
So what you do is it comes out with like when you just say create the website, it'll create like a shared layout.

00:15:44.460 --> 00:15:47.940
So there's one place where all your general navigation and look and feel goes.

00:15:47.940 --> 00:15:52.180
It has handlers for class management.

00:15:52.620 --> 00:16:04.660
It has like secure user management using things like pass lib and other techniques, bootstrap, logbook, rollbar integration, MailChimp integration, outbound, email integration, power for static file management.

00:16:04.660 --> 00:16:06.580
All just the list goes on and on.

00:16:06.580 --> 00:16:16.880
But it's very much closer to where you need to be for a professional pyramid app to get started, in my opinion, rather than like basically here's one file.

00:16:16.880 --> 00:16:18.240
Now create the whole thing from scratch.

00:16:18.400 --> 00:16:20.320
So if people want to check that out, that's on GitHub.

00:16:20.320 --> 00:16:23.460
You can just cookie cutter space the GitHub URL and you're off to the races.

00:16:23.460 --> 00:16:25.220
It needs a little bit more documentation.

00:16:25.220 --> 00:16:27.660
I'm going to work on that this week, but it's really close.

00:16:27.660 --> 00:16:31.040
But it's a good start and I'm actually pretty excited about it.

00:16:31.040 --> 00:16:38.100
And you've got one, your course is one of the very few that I've seen that really teaches people how to do pyramid as well.

00:16:38.100 --> 00:16:38.660
Yeah, thanks.

00:16:38.660 --> 00:16:41.600
Yeah, it's definitely one of the few ones on pyramid, which is great.

00:16:41.600 --> 00:16:42.760
So here's like one more resource.

00:16:42.760 --> 00:16:46.380
Basically, this is going to be part of the end of that course.

00:16:46.380 --> 00:16:51.720
And, you know, the first time I heard about cookie cutter, I really kind of thought it was a little silly.

00:16:51.720 --> 00:16:56.440
But it's actually turning out to be quite a useful tool for a lot of spaces.

00:16:56.440 --> 00:16:57.400
Yeah, I definitely.

00:16:57.400 --> 00:16:59.300
Yeah, the more I use it, the more I like it.

00:16:59.300 --> 00:17:02.260
So I've definitely been putting some effort into it.

00:17:02.260 --> 00:17:02.560
It's great.

00:17:02.560 --> 00:17:04.460
Well, that's the end of our six.

00:17:04.460 --> 00:17:07.100
So do you have anything to share with us, Michael?

00:17:07.100 --> 00:17:08.060
No, nothing.

00:17:08.060 --> 00:17:10.140
Nothing other than this template thing.

00:17:10.140 --> 00:17:11.620
That's really all I have to share.

00:17:11.620 --> 00:17:12.820
I've been just cranking on my classes.

00:17:12.820 --> 00:17:16.080
I hear that you're probably still writing on your book.

00:17:16.080 --> 00:17:17.620
That's getting close, though, isn't it?

00:17:17.620 --> 00:17:18.460
Yeah, it is.

00:17:18.460 --> 00:17:19.700
It's getting a lot closer.

00:17:19.700 --> 00:17:21.600
And I wish it was closer than it is.

00:17:21.600 --> 00:17:24.160
But I've got a whole bunch of...

00:17:24.160 --> 00:17:27.920
Actually, I'm kind of overwhelmed with both work and with gratitude.

00:17:28.440 --> 00:17:34.040
That I've had a lot of great people, incredible programmers and good writers help me out with

00:17:34.040 --> 00:17:38.020
technical reviews on the first four chapters and a lot of great feedback.

00:17:38.020 --> 00:17:39.740
And now I've got to go rewrite everything.

00:17:39.740 --> 00:17:40.560
Thanks a lot, guys.

00:17:40.560 --> 00:17:42.360
Thanks a lot.

00:17:42.360 --> 00:17:42.920
No, that's awesome.

00:17:42.920 --> 00:17:45.440
Yeah, I'm looking forward to the day where we can announce your book on here.

00:17:45.440 --> 00:17:45.860
That'd be great.

00:17:45.860 --> 00:17:47.240
Any day now with that book, huh?

00:17:47.240 --> 00:17:48.780
No, any...

00:17:48.780 --> 00:17:52.520
Hopefully, the goal still is to have something to sell by PyCon.

00:17:52.520 --> 00:17:52.960
Beautiful.

00:17:53.740 --> 00:17:57.500
All right, well, thanks, Brian, for sharing your news.

00:17:57.500 --> 00:17:58.480
And thank you, everyone, for listening.

00:17:58.480 --> 00:17:59.500
We'll catch you next week.

00:17:59.500 --> 00:18:00.280
All right, thank you.

00:18:00.280 --> 00:18:03.700
Thank you for listening to Python Bytes.

00:18:03.700 --> 00:18:06.280
Follow the show on Twitter via at Python Bytes.

00:18:06.280 --> 00:18:09.160
That's Python Bytes as in B-Y-T-E-S.

00:18:09.160 --> 00:18:12.600
And get the full show notes at pythonbytes.fm.

00:18:12.600 --> 00:18:16.920
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:18:16.920 --> 00:18:19.620
We're always on the lookout for sharing something cool.

00:18:19.620 --> 00:18:23.020
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:18:23.500 --> 00:18:26.620
Thank you for listening and sharing this podcast with your friends and colleagues.

