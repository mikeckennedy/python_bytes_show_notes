
00:00:00.000 --> 00:00:05.700
Hello and welcome to Python Bytes, Python news and headlines delivered directly to your earbuds.


00:00:05.700 --> 00:00:07.200
I'm Michael Kennedy.


00:00:07.200 --> 00:00:08.200
And I'm Brian Okken.


00:00:08.200 --> 00:00:14.000
We're here to share the Python news with you and basically share the cool stuff that Brian and I found for the week.


00:00:14.000 --> 00:00:22.000
Brian, you know what I think is cool that I can open up, I can basically go to any Python object or module or even function or whatever and just say,


00:00:22.000 --> 00:00:23.200
"Tell me what is in you."


00:00:23.200 --> 00:00:27.100
Durr this thing and out pops all of its capabilities, mostly anyway.


00:00:27.100 --> 00:00:30.140
Yeah, I love that. Do you know what our EPL stands for?


00:00:30.140 --> 00:00:30.820
REPL?


00:00:30.820 --> 00:00:34.820
REPL read a vowel print loop. Just the okay, just what you get


00:00:34.820 --> 00:00:35.380
me in type Python.


00:00:35.380 --> 00:00:39.220
Yeah, that like most of the time now, the only time I open that


00:00:39.220 --> 00:00:43.620
is to try out something little or to actually to use the dir


00:00:43.620 --> 00:00:44.220
command.


00:00:44.220 --> 00:00:46.620
You know what, I do do that as well. I'm like, I'm gonna open


00:00:46.620 --> 00:00:49.020
this up and just do a dir here. Okay, back to work.


00:00:49.020 --> 00:00:52.340
Yeah, exactly. Just to look at the interface for something. So


00:00:52.340 --> 00:01:00.100
I was excited to see a new project from Laika9m on GitHub called pdir2.


00:01:00.100 --> 00:01:05.460
When you use it, it's p-d-i-r-2 when you're installing it, but when you use it, it's just


00:01:05.460 --> 00:01:06.460
p-d-i-r.


00:01:06.460 --> 00:01:09.020
It's just a replacement.


00:01:09.020 --> 00:01:16.420
It's cool because it's all colorized and it splits it out and splits it up into one line


00:01:16.420 --> 00:01:23.220
per item and it pulls the the the doc string out of each item so that you can so you can see that


00:01:23.220 --> 00:01:29.700
and it's for what I'm using it for when I pull up the REPL it does what it should do automatically


00:01:29.700 --> 00:01:34.420
and I like it. Yeah it's cool I mean it's kind of like if you typed help a thing but it gives


00:01:34.420 --> 00:01:39.380
you meaningful stuff even if there's no real help to be had and it'll categorize things like here


00:01:39.380 --> 00:01:42.660
are all the classes here are all the functions here's the stuff that I have no idea what it is


00:01:42.660 --> 00:01:47.060
but it's also there so we'll put it over here. And if there's docstrings it'll put the docstrings


00:01:47.060 --> 00:01:50.580
there for like here's the description of each thing. It's really nice.


00:01:50.580 --> 00:01:55.540
Yeah and it does, it like puts all the dunder functions out of the way so those aren't in


00:01:55.540 --> 00:01:58.100
the middle of everything too. Yeah yeah those land in the other.


00:01:58.100 --> 00:02:03.940
Yeah anyway it's just it's part of my repertoire now. I'm gonna, I'm never gonna let it go.


00:02:03.940 --> 00:02:08.660
One of the things I would like to ask somebody to do is to help out with the project and


00:02:08.660 --> 00:02:13.140
convert the readme to whatever that other thing is.


00:02:13.140 --> 00:02:13.860
Restructured?


00:02:13.860 --> 00:02:17.540
Yeah, restructured so that it looks good on PyPI


00:02:17.540 --> 00:02:22.660
because the readme is in Markdown and PyPI still doesn't like Markdown.


00:02:22.660 --> 00:02:25.700
I wonder, did you look at it on pypi.org?


00:02:25.700 --> 00:02:26.660
No, I haven't.


00:02:26.660 --> 00:02:31.860
Versus the older one. It's worth looking at that one. I have no idea what it'll look like there


00:02:31.860 --> 00:02:36.500
either but that's the new one. Maybe it understands Markdown, who knows. I would also like to


00:02:36.500 --> 00:02:41.860
recommend that people pair this with PT Python. Do you know PT Python? I don't. Oh my god,


00:02:41.860 --> 00:02:46.300
PT Python is awesome. Like I don't use the REPL very much. Everyone knows I love PyCharm


00:02:46.300 --> 00:02:50.780
and I kind of live there. But when I do go into the REPL, it really annoys me that I


00:02:50.780 --> 00:02:57.220
need to completely type everything that is there. That it doesn't auto complete, especially


00:02:57.220 --> 00:03:00.620
when I'm exploring something new, which is like why we said often we go into the REPL.


00:03:00.620 --> 00:03:05.880
Well, PT Python is basically, I think it's a little bit based on Emacs, but it's like


00:03:05.880 --> 00:03:12.480
a different version of the rebel that has code completion, and a little bit of a UI


00:03:12.480 --> 00:03:13.480
over the terminal.


00:03:13.480 --> 00:03:14.480
It's really nice.


00:03:14.480 --> 00:03:17.160
So these days, if I want Python, I type PT Python.


00:03:17.160 --> 00:03:19.120
Okay, well, I'll have to check that out.


00:03:19.120 --> 00:03:20.800
And just to let people know I did.


00:03:20.800 --> 00:03:25.760
Okay, so I'll take back that request, because I looked it up on pypi.org.


00:03:25.760 --> 00:03:26.760
And it looks great.


00:03:26.760 --> 00:03:28.480
It even has that animated GIF on there.


00:03:28.480 --> 00:03:29.480
So Oh, yeah.


00:03:29.480 --> 00:03:32.720
little animated gif that shows you how it works which is quite cool. So yeah


00:03:32.720 --> 00:03:36.160
check out this project it's easy to use. The one thing to notice is


00:03:36.160 --> 00:03:42.320
you've got a pip install Peter2 versus Peter but then the modules just


00:03:42.320 --> 00:03:47.160
PDIR right so there's a little bit of a nomenclature funkiness but it is cool.


00:03:47.160 --> 00:03:52.480
You know what else? Go ahead. I just yeah just want people to remember that and


00:03:52.480 --> 00:03:54.340
And speaking of memory.


00:03:54.340 --> 00:03:56.640
Speaking of memory, absolutely.


00:03:56.640 --> 00:04:01.160
So more, this has happened to me once in my life.


00:04:01.160 --> 00:04:03.260
I have not used these tools to solve it.


00:04:03.260 --> 00:04:04.260
But here's the deal.


00:04:04.260 --> 00:04:11.640
Like suppose that you somehow through probably your fault, but it could have been like a


00:04:11.640 --> 00:04:13.440
hard drive failure or something.


00:04:13.440 --> 00:04:16.940
Somehow you've lost your source code.


00:04:16.940 --> 00:04:21.640
So there's a guy who was using a source control wrong and wiped away all of his files off


00:04:21.640 --> 00:04:25.920
of his directory, but he was still had the program running in memory.


00:04:25.920 --> 00:04:27.720
It was a Python program.


00:04:27.720 --> 00:04:32.480
So he used two really interesting packages that I'd never heard of.


00:04:32.480 --> 00:04:33.480
Had you heard of these?


00:04:33.480 --> 00:04:34.480
No, I haven't.


00:04:34.480 --> 00:04:39.600
One of them is Pyricite, like parasite but for Python, P-Y-R-I-C-I-T-E.


00:04:39.600 --> 00:04:46.640
And the other one is uncompile6, because apparently it's one of the few that supports both Python


00:04:46.640 --> 00:04:48.760
2 and Python 3, and multiplication is awesome.


00:04:48.760 --> 00:04:49.760
So uncompile6.


00:04:49.760 --> 00:04:56.620
Alright, so the idea is with Pyricite, you can attach to any running Python process.


00:04:56.620 --> 00:05:01.040
And you basically get this REPL like we were talking about, to just explore its memory


00:05:01.040 --> 00:05:05.780
to see what its values are, you can even like force it to load other scripts and run them.


00:05:05.780 --> 00:05:12.080
You can go to like in memory, like singleton object and like work with its data, all sorts


00:05:12.080 --> 00:05:17.100
of stuff you can do in real time while it's still running around.


00:05:17.100 --> 00:05:18.100
That's pretty cool.


00:05:18.100 --> 00:05:20.940
Basically what he did is he said, "I'm going to hook up to it with Pyricite.


00:05:20.940 --> 00:05:25.420
I'm going to force the thing to load uncompile and I'm going to call uncompile on itself


00:05:25.420 --> 00:05:26.420
and get my code back."


00:05:26.420 --> 00:05:27.420
Wow.


00:05:27.420 --> 00:05:28.420
But mostly the core-


00:05:28.420 --> 00:05:29.420
Does that work?


00:05:29.420 --> 00:05:30.420
It worked.


00:05:30.420 --> 00:05:31.420
Yes, it worked.


00:05:31.420 --> 00:05:35.380
There are people, there's like a whole bunch of people, I get a gist at the bottom of the


00:05:35.380 --> 00:05:38.940
gist, they're like, "Oh my God, I just had to try this because I couldn't believe it


00:05:38.940 --> 00:05:39.940
would work.


00:05:39.940 --> 00:05:40.940
Oh, that's so awesome."


00:05:40.940 --> 00:05:41.940
Yeah, it works.


00:05:41.940 --> 00:05:45.780
I think there's either a video or a little gif that is just like a, that basically shows


00:05:45.780 --> 00:05:50.100
you how it works if you go to pyricite.com, which that's the coolest takeaway for me in


00:05:50.100 --> 00:05:51.100
this whole one.


00:05:51.100 --> 00:05:52.100
That's awesome.


00:05:52.100 --> 00:05:53.100
Good job.


00:05:53.100 --> 00:05:54.100
Cool.


00:05:54.100 --> 00:05:55.100
Yeah.


00:05:55.100 --> 00:05:56.100
All right.


00:05:56.100 --> 00:05:57.100
You know what I think?


00:05:57.100 --> 00:05:58.100
You and I were on a mission, right?


00:05:58.100 --> 00:06:00.540
To make sure that Python is modern Python, not legacy Python, right?


00:06:00.540 --> 00:06:01.540
Yes, definitely.


00:06:01.540 --> 00:06:02.540
And I was really surprised.


00:06:02.540 --> 00:06:07.820
They're still adding quite interesting and new data types to Python 3.


00:06:07.820 --> 00:06:12.800
Even stuff that's been around for a little while that I just haven't heard of, because


00:06:12.800 --> 00:06:17.800
of this show I've learned about the SimpleNamespace as a... wait no that's not


00:06:17.800 --> 00:06:22.000
it... the NamedTuple class with capitals. But let's get into this. There's an


00:06:22.000 --> 00:06:27.480
article called "New Interesting Data Types in Python 3" and it just goes


00:06:27.480 --> 00:06:34.000
through three that I really like. The three types are Types.MappingProxyType,


00:06:34.000 --> 00:06:41.120
Types.SimpleNamespace, and Typing.NamedTuple. And the MappingProxyType


00:06:41.120 --> 00:06:43.120
is like really cool.


00:06:43.120 --> 00:06:46.520
It takes like something like a dictionary or it says,


00:06:46.520 --> 00:06:48.240
I can't think of anything other than dictionary.


00:06:48.240 --> 00:06:50.640
It says it only takes mapping types, but--


00:06:50.640 --> 00:06:51.480
- Yeah, it's really cool,


00:06:51.480 --> 00:06:54.240
but it's like a read only dictionary basically, right?


00:06:54.240 --> 00:06:57.480
- Yeah, so you take a normal, like maybe a normal dictionary


00:06:57.480 --> 00:07:00.080
and like if you had an API or something,


00:07:00.080 --> 00:07:02.760
you wanted to expose that dictionary through the API,


00:07:02.760 --> 00:07:05.020
you could wrap it in this mapping proxy type


00:07:05.020 --> 00:07:06.280
and return that.


00:07:06.280 --> 00:07:08.900
And I tried it out and so for instance,


00:07:08.900 --> 00:07:12.620
One part of your project could use the mapping proxy type


00:07:12.620 --> 00:07:14.980
version and read everything.


00:07:14.980 --> 00:07:18.660
And the part of your system that still has write access,


00:07:18.660 --> 00:07:20.060
that is synchronized.


00:07:20.060 --> 00:07:21.060
So it isn't a copy.


00:07:21.060 --> 00:07:23.180
You can, when one part writes to it,


00:07:23.180 --> 00:07:25.460
it gets updated in the other place too.


00:07:25.460 --> 00:07:27.740
Oh, it's like a view into an existing dictionary.


00:07:27.740 --> 00:07:29.020
Yeah, it's a read-only view.


00:07:29.020 --> 00:07:29.660
Sweet.


00:07:29.660 --> 00:07:31.260
So that's nice.


00:07:31.260 --> 00:07:33.340
And then not too long ago, I started


00:07:33.340 --> 00:07:36.420
using where I really wanted classes or something.


00:07:36.420 --> 00:07:39.260
And I was using things like tuples or lists


00:07:39.260 --> 00:07:42.500
where there really should have been something more structured.


00:07:42.500 --> 00:07:45.300
I've been using the lowercase named tuple.


00:07:45.300 --> 00:07:46.660
Right, out of the collections name,


00:07:46.660 --> 00:07:47.920
the collections module, right?


00:07:47.920 --> 00:07:49.420
Yeah, out of collections.


00:07:49.420 --> 00:07:54.580
And there is this thing called types.simple namespace


00:07:54.580 --> 00:07:58.340
that uses a similar sort of functionality.


00:07:58.340 --> 00:08:01.700
You can just-- if you define a type to be that type,


00:08:01.700 --> 00:08:03.060
you can just--


00:08:03.060 --> 00:08:05.140
the parameters, when you instantiate it,


00:08:05.140 --> 00:08:08.620
those just become elements inside the object.


00:08:08.620 --> 00:08:09.460
It's pretty convenient.


00:08:09.460 --> 00:08:10.280
- Yeah, that's cool.


00:08:10.280 --> 00:08:11.420
So you can do a little more organization.


00:08:11.420 --> 00:08:14.300
And then of course the typing.name tuple class


00:08:14.300 --> 00:08:15.140
is really nice.


00:08:15.140 --> 00:08:16.040
I hadn't been using it.


00:08:16.040 --> 00:08:18.160
I've always just used collections.name tuple.


00:08:18.160 --> 00:08:19.900
But I think I'm going to be switching.


00:08:19.900 --> 00:08:22.420
Now one word of caution I suppose,


00:08:22.420 --> 00:08:23.380
is a lot of these are,


00:08:23.380 --> 00:08:25.780
they require pretty modern Python.


00:08:25.780 --> 00:08:29.480
Some of the techniques they show require 3.6.1.


00:08:29.480 --> 00:08:31.180
Like 3.6.0 is not enough.


00:08:31.180 --> 00:08:34.060
So just be aware that some of these require


00:08:34.060 --> 00:08:39.260
pretty new versions. Yeah, and that's I guess it's hard for me to remember because I'm usually


00:08:39.260 --> 00:08:45.740
trying to stay, I don't go into the in development Python, but I try to use the latest released


00:08:45.740 --> 00:08:50.880
one. I do as well. You know where that bites me though, is on my digital ocean servers.


00:08:50.880 --> 00:08:55.580
It's running the version of Ubuntu that only has three five, two or something like that.


00:08:55.580 --> 00:08:59.260
So if it's literally a three six feature, I'll put it in my app and I'll ship it like


00:08:59.260 --> 00:09:01.260
"Oh, it doesn't work. What was I thinking?"


00:09:01.260 --> 00:09:04.260
Yeah, and I forget that, that 3.5 is really...


00:09:04.260 --> 00:09:10.060
For 3.x, 3.5 is being used more than 3.6 right now.


00:09:10.060 --> 00:09:11.760
Yeah, just because of the distributions, I think.


00:09:11.760 --> 00:09:15.960
In my mind, that's like the minimum bar for 3 stuff is 3.5.


00:09:15.960 --> 00:09:17.060
Yeah, okay.


00:09:17.060 --> 00:09:20.960
But I think these are great things to start adding to your repertoire.


00:09:20.960 --> 00:09:24.460
If you have control over where it's going to run, those are good things.


00:09:24.460 --> 00:09:26.760
Yeah, and some of them come from Python 3.3 or 3.4.


00:09:26.760 --> 00:09:27.760
They're fine.


00:09:27.760 --> 00:09:29.480
There's just a few techniques there that are brand new.


00:09:29.480 --> 00:09:33.120
And what I like about this, one of the things I like about this article is it's pretty short


00:09:33.120 --> 00:09:37.760
and it gives examples of how to use these pretty concisely.


00:09:37.760 --> 00:09:38.760
So that's good.


00:09:38.760 --> 00:09:39.760
Yeah, very nice.


00:09:39.760 --> 00:09:40.760
Very nice.


00:09:40.760 --> 00:09:44.720
Speaking of how do I use things, wouldn't it be awesome if I could just go to my bash


00:09:44.720 --> 00:09:48.240
shell and just type "how do I" and type a thing.


00:09:48.240 --> 00:09:52.320
Like I'd like to say, maybe I want to know how to print a stack trace or trace back in


00:09:52.320 --> 00:09:53.320
Python.


00:09:53.320 --> 00:09:56.240
I could say, "How do I print stack trace Python?"


00:09:56.240 --> 00:09:57.080
and just type that.


00:09:57.080 --> 00:09:57.920
- Yeah, that'd be cool.


00:09:57.920 --> 00:10:00.080
- It'd be cool if my computer knew that, right?


00:10:00.080 --> 00:10:03.440
Well, it turns out we ran across a project called HowDoI,


00:10:03.440 --> 00:10:06.900
and if you install HowDoI, if you pip install it,


00:10:06.900 --> 00:10:09.880
it will give you instant coding and shell answers


00:10:09.880 --> 00:10:11.320
on the command line.


00:10:11.320 --> 00:10:14.680
So I can say, "How do I connect SQLAlchemy?"


00:10:14.680 --> 00:10:16.520
And it'll give me the Python code


00:10:16.520 --> 00:10:18.240
to connect for SQLAlchemy.


00:10:18.240 --> 00:10:21.320
I can say, "How do I Python save dictionary?"


00:10:21.320 --> 00:10:22.360
That's three words.


00:10:22.360 --> 00:10:28.040
And it'll show me how to use the JSON load S dump functionality right there in the command


00:10:28.040 --> 00:10:29.040
line.


00:10:29.040 --> 00:10:30.880
Now, sometimes it gives me like a stupid answer.


00:10:30.880 --> 00:10:33.240
Like if you type that, how do I Python save?


00:10:33.240 --> 00:10:38.980
How do I Python load JSON, it just shows you JSON, which is stupid, but you can do a dash


00:10:38.980 --> 00:10:43.540
a and it'll give you all the answers it's found on the internet related to that.


00:10:43.540 --> 00:10:46.040
Usually somewhere in that list is something decent.


00:10:46.040 --> 00:10:49.600
It has some sources like stack overflow, and I don't know where they all come from, but


00:10:49.600 --> 00:10:50.600
they're all over the place.


00:10:50.600 --> 00:10:51.600
It's cool.


00:10:51.600 --> 00:10:55.040
I can say how do I debug Python, it'll show me the PDB commands.


00:10:55.040 --> 00:10:59.440
I can say how do I change my path in macOS, it'll show me how to do that assuming I'm


00:10:59.440 --> 00:11:00.920
running bash, things like that.


00:11:00.920 --> 00:11:02.520
Okay, I'm going to try it out.


00:11:02.520 --> 00:11:05.840
Yeah, how do I put a worm on a hook?


00:11:05.840 --> 00:11:06.840
Exactly.


00:11:06.840 --> 00:11:08.640
Yeah, it doesn't work.


00:11:08.640 --> 00:11:11.200
Yeah, it's got to be something technical I think.


00:11:11.200 --> 00:11:14.800
So the other, there's another one that I want to point out that I thought was really funny


00:11:14.800 --> 00:11:16.120
but actually it's kind of useful.


00:11:16.120 --> 00:11:17.120
Oh, what's that?


00:11:17.120 --> 00:11:18.960
It starts with a command.


00:11:18.960 --> 00:11:21.240
It starts, it actually starts with a cartoon.


00:11:21.240 --> 00:11:25.440
And basically the idea is if you type in a command that you think you know on the shell,


00:11:25.440 --> 00:11:30.080
but you get it wrong, you can curse at your shell and it will potentially fix it for you.


00:11:30.080 --> 00:11:31.160
Yeah, I love this.


00:11:31.160 --> 00:11:35.400
So this thing is called the F. I'm not going to complete it so we can keep our clean rating


00:11:35.400 --> 00:11:38.340
in iTunes, but the link is in the show notes.


00:11:38.340 --> 00:11:42.160
And basically you type that after you've made a mistake on the shell and it goes, oh, you


00:11:42.160 --> 00:11:43.160
probably meant this.


00:11:43.160 --> 00:11:45.840
Were you trying to do this git checkout branch thing?


00:11:45.840 --> 00:11:46.840
You did a little bit wrong.


00:11:46.840 --> 00:11:47.840
The F?


00:11:47.840 --> 00:11:48.840
Oh, here's the command.


00:11:48.840 --> 00:11:50.420
And it'll just automatically fix it for you.


00:11:50.420 --> 00:11:50.980
It's beautiful.


00:11:50.980 --> 00:11:51.700
Yeah, nice.


00:11:51.700 --> 00:11:53.340
So plus you get a little--


00:11:53.340 --> 00:11:55.300
yeah, you get to let some frustration out on the thing,


00:11:55.300 --> 00:11:55.800
right?


00:11:55.800 --> 00:11:56.940
Yeah.


00:11:56.940 --> 00:11:58.220
All right, what you got for us?


00:11:58.220 --> 00:11:58.740
What's next?


00:11:58.740 --> 00:12:00.840
Oh, yeah, I got to go back to that tab.


00:12:00.840 --> 00:12:04.260
We have a-- yeah, we're at a listener--


00:12:04.260 --> 00:12:08.060
so it just seems like we just did the last episode.


00:12:08.060 --> 00:12:09.180
Just a few days ago.


00:12:09.180 --> 00:12:10.580
How's that work?


00:12:10.580 --> 00:12:14.540
That we had a listener commented on the last episode.


00:12:14.540 --> 00:12:17.420
Last episode, we did mention some feedback


00:12:17.420 --> 00:12:22.060
from a listener about async speeding up their some work.


00:12:22.060 --> 00:12:24.740
And we have another one from a comment this time.


00:12:24.740 --> 00:12:28.700
And this is a project that a listener shared with us.


00:12:28.700 --> 00:12:30.660
And we've got a link in the show notes.


00:12:30.660 --> 00:12:33.740
But it's a project called PyMarsis.


00:12:33.740 --> 00:12:37.820
And I wasn't familiar with eMarsis.


00:12:37.820 --> 00:12:38.860
It doesn't really matter.


00:12:38.860 --> 00:12:41.340
But it's a cloud-based CRM.


00:12:41.340 --> 00:12:43.060
And it's a Python interface.


00:12:43.060 --> 00:12:44.260
But I'll just read this.


00:12:44.260 --> 00:12:45.900
The gist of it is it sped it up.


00:12:45.900 --> 00:12:47.100
And this is from Diego.


00:12:47.100 --> 00:12:50.860
Thanks Diego. Another awesome episode. Thanks Michael and Brian.


00:12:50.860 --> 00:12:54.860
And if you say that we do something awesome, we'll totally put you on the show.


00:12:54.860 --> 00:12:58.860
Okay, about AsyncIO being awesome. I had my own experience.


00:12:58.860 --> 00:13:01.860
I had to send information to about a hundred...


00:13:01.860 --> 00:13:04.860
information about hundreds of thousands of users


00:13:04.860 --> 00:13:07.860
to a CRM through their public API daily.


00:13:07.860 --> 00:13:12.860
And with synchronous stuff, it would have taken 50 hours a day,


00:13:12.860 --> 00:13:16.360
which you can't do that. And they added Async


00:13:16.360 --> 00:13:18.720
And it went down to 20 minutes.


00:13:18.720 --> 00:13:21.680
So that's 150 times faster, which is awesome.


00:13:21.680 --> 00:13:24.520
Yeah, they were using requests before.


00:13:24.520 --> 00:13:28.960
And in order to update their CRM, it took 50 hours per day problem.


00:13:28.960 --> 00:13:35.960
So they switched to the AIO HTTP client stuff that has async and await and 20 minutes.


00:13:35.960 --> 00:13:37.360
In fact, he told us an interesting story.


00:13:37.360 --> 00:13:41.360
He said, the first time I ran it, it like opened so many connections that it crashed


00:13:41.360 --> 00:13:42.740
his Mac.


00:13:42.740 --> 00:13:47.060
And so he actually had to implement a semaphore limiting system, which is pretty cool.


00:13:47.060 --> 00:13:50.180
Yeah, and I did like that he added that, that he added the semaphores.


00:13:50.180 --> 00:13:54.900
But the GitHub link that he put up, I didn't see any semaphore usage in there.


00:13:54.900 --> 00:13:59.740
So I've also in our show notes linked another article that talks about using asynchronous


00:13:59.740 --> 00:14:03.780
I/O with semaphores to limit how many connections you're making.


00:14:03.780 --> 00:14:06.260
Yeah, no, thanks, Diego, for putting that up there.


00:14:06.260 --> 00:14:09.500
Anybody who wants to have a comment on the show, you can contact us on Twitter where


00:14:09.500 --> 00:14:10.660
we're @pythonbytes.


00:14:10.660 --> 00:14:15.220
But also every episode has a discuss section at the end.


00:14:15.220 --> 00:14:17.300
So if you want to talk about an episode, share a link,


00:14:17.300 --> 00:14:18.380
or whatever, drop in there.


00:14:18.380 --> 00:14:19.940
So what's the link for this episode?


00:14:19.940 --> 00:14:21.900
Pythonbytes.fm/18.


00:14:21.900 --> 00:14:22.940
Yeah, yeah, there you go.


00:14:22.940 --> 00:14:23.440
Cool.


00:14:23.440 --> 00:14:25.580
Yeah, I made it super easy to find.


00:14:25.580 --> 00:14:27.860
And do you know what would be super easy,


00:14:27.860 --> 00:14:30.180
is if somebody would make an easy way for me


00:14:30.180 --> 00:14:31.900
to do a pyramid installation.


00:14:31.900 --> 00:14:32.940
That's right.


00:14:32.940 --> 00:14:35.500
So the way I made that /18 work-- and you can still


00:14:35.500 --> 00:14:39.380
go to /episode/list or whatever--


00:14:39.380 --> 00:14:42.660
is I use constraints in the routing infrastructure.


00:14:42.660 --> 00:14:44.180
And so one of the things that I've been doing


00:14:44.180 --> 00:14:48.420
a lot of work with lately is with building pyramid web apps


00:14:48.420 --> 00:14:52.000
and trying to really help people jumpstart


00:14:52.000 --> 00:14:52.860
what they're up to, right?


00:14:52.860 --> 00:14:55.420
Like I can go to pyramid and create a web app


00:14:55.420 --> 00:14:57.500
and I get basically a web app that runs


00:14:57.500 --> 00:15:00.540
and here's the view function and here's a template.


00:15:00.540 --> 00:15:03.180
Go, go write the web app from scratch.


00:15:03.180 --> 00:15:05.540
And I kind of wanted to help the world


00:15:05.540 --> 00:15:09.100
not start from scratch, but start from near the end.


00:15:09.100 --> 00:15:10.820
So I've been doing a lot with cookie cutter,


00:15:10.820 --> 00:15:13.060
more on that later, but I decided to create


00:15:13.060 --> 00:15:16.420
a cookie cutter template that is an opinionated


00:15:16.420 --> 00:15:18.640
cookie cutter template for creating pyramid web apps


00:15:18.640 --> 00:15:21.920
that have most of what you need pre-built


00:15:21.920 --> 00:15:24.180
and pre-configured and factored the way you would


00:15:24.180 --> 00:15:26.240
for a large professional app,


00:15:26.240 --> 00:15:28.340
not for like a one file starter thing.


00:15:28.340 --> 00:15:29.180
- Yeah, that's great.


00:15:29.180 --> 00:15:30.340
- So I created a cookie cutter thing called


00:15:30.340 --> 00:15:33.740
cookie cutter dash pyramids --talk Python starter.


00:15:33.740 --> 00:15:36.580
And so this came out of my Python for entrepreneurs course,


00:15:36.580 --> 00:15:37.840
but you don't have to have anything to do with that


00:15:37.840 --> 00:15:38.680
to play with this template.


00:15:38.680 --> 00:15:42.980
So what you do is it comes out with like, when you just say create the website, it'll


00:15:42.980 --> 00:15:44.540
create like a shared layout.


00:15:44.540 --> 00:15:48.600
So there's one place where all your general navigation and look and feel goes.


00:15:48.600 --> 00:15:53.080
It has handlers for class management.


00:15:53.080 --> 00:15:59.000
It has like secure user management using things like passlib and other techniques, bootstrap,


00:15:59.000 --> 00:16:04.080
logbook, rollbar integration, MailChimp integration, outbound email integration, power for static


00:16:04.080 --> 00:16:06.720
file management, all just the list goes on and on.


00:16:06.720 --> 00:16:12.540
But it's very much closer to where you need to be for a professional pyramid app to get


00:16:12.540 --> 00:16:17.620
started in my opinion, rather than like, basically, here's one file now create the whole thing


00:16:17.620 --> 00:16:18.660
from scratch.


00:16:18.660 --> 00:16:19.820
So people want to check that out.


00:16:19.820 --> 00:16:23.180
That's on GitHub, you can just cookie cutter space the GitHub URL and you're off to the


00:16:23.180 --> 00:16:24.180
races.


00:16:24.180 --> 00:16:25.180
It's a little bit more documentation.


00:16:25.180 --> 00:16:28.060
I'm going to work on that this week, but it's really close.


00:16:28.060 --> 00:16:29.420
But it's a good start.


00:16:29.420 --> 00:16:31.100
I'm actually pretty excited about it.


00:16:31.100 --> 00:16:36.420
And you've got one, your course is one of the very few that I've seen that really teaches


00:16:36.420 --> 00:16:38.180
people how to do Pyramid as well.


00:16:38.180 --> 00:16:39.180
Yeah, thanks.


00:16:39.180 --> 00:16:41.660
Yeah, it's definitely one of the few ones on Pyramid, which is great.


00:16:41.660 --> 00:16:43.180
So here's like one more resource.


00:16:43.180 --> 00:16:46.660
Basically this is going to be part of the end of that course.


00:16:46.660 --> 00:16:50.780
And you know, the first time I heard about Cookie Cutter, I really kind of thought it


00:16:50.780 --> 00:16:55.740
was a little silly, but it's actually turning out to be quite a useful tool for a lot of


00:16:55.740 --> 00:16:56.740
spaces.


00:16:56.740 --> 00:16:59.380
Yeah, I definitely, yeah, the more I use it, the more I like it.


00:16:59.380 --> 00:17:02.380
So I've definitely been putting some effort into it.


00:17:02.380 --> 00:17:03.380
It's great.


00:17:03.380 --> 00:17:04.780
Well, that's the end of our six.


00:17:04.780 --> 00:17:07.340
So do you have anything to share with us, Michael?


00:17:07.340 --> 00:17:08.580
No, nothing.


00:17:08.580 --> 00:17:10.220
Nothing other than this template thing.


00:17:10.220 --> 00:17:11.660
That's really all I have to share.


00:17:11.660 --> 00:17:13.240
I've been just cranking on my classes.


00:17:13.240 --> 00:17:16.540
I hear that you're probably still writing on your book.


00:17:16.540 --> 00:17:18.220
That's getting close, though, isn't it?


00:17:18.220 --> 00:17:18.780
Yeah, it is.


00:17:18.780 --> 00:17:19.900
It's getting a lot closer.


00:17:19.900 --> 00:17:21.660
And I wish it was closer than it is.


00:17:21.660 --> 00:17:24.460
But I've got a whole bunch of-- actually,


00:17:24.460 --> 00:17:28.620
I'm kind of overwhelmed with both work and with gratitude


00:17:28.620 --> 00:17:31.740
that I've had a lot of great people, incredible programmers


00:17:31.740 --> 00:17:35.220
and good writers helped me out with technical reviews


00:17:35.220 --> 00:17:38.300
on the first four chapters and a lot of great feedback.


00:17:38.300 --> 00:17:39.840
And now I got to go rewrite everything.


00:17:39.840 --> 00:17:40.800
Thanks a lot, guys.


00:17:40.800 --> 00:17:42.600
- Thanks a lot.


00:17:42.600 --> 00:17:43.420
No, that's awesome.


00:17:43.420 --> 00:17:44.260
Yeah, I'm looking forward to the day


00:17:44.260 --> 00:17:45.460
where we can announce your book on here.


00:17:45.460 --> 00:17:46.300
That'd be great.


00:17:46.300 --> 00:17:47.900
Any day now with that book, huh?


00:17:47.900 --> 00:17:51.020
- Any, hopefully we, the goal still is


00:17:51.020 --> 00:17:52.700
to have something to sell by PyCon.


00:17:52.700 --> 00:17:53.820
- Beautiful.


00:17:53.820 --> 00:17:57.540
All right, well, thanks, Brian, for sharing your news


00:17:57.540 --> 00:17:58.580
and thank you everyone for listening.


00:17:58.580 --> 00:17:59.740
We'll catch you next week.


00:17:59.740 --> 00:18:00.900
- All right, thank you.


00:18:00.900 --> 00:18:04.100
Thank you for listening to Python Bytes.


00:18:04.100 --> 00:18:09.740
Follow the show on Twitter via @PythonBytes, that's Python Bytes as in B-Y-T-E-S.


00:18:09.740 --> 00:18:13.040
And get the full show notes at PythonBytes.fm.


00:18:13.040 --> 00:18:16.740
If you have a news item you want featured, just visit PythonBytes.fm and send it our


00:18:16.740 --> 00:18:17.740
way.


00:18:17.740 --> 00:18:20.260
We're always on the lookout for sharing something cool.


00:18:20.260 --> 00:18:23.700
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:18:23.700 --> 00:18:26.740
Thank you for listening and sharing this podcast with your friends and colleagues.

