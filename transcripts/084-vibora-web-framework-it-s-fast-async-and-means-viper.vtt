WEBVTT

00:00:00.001 --> 00:00:04.960
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04.960 --> 00:00:09.020
This is episode 84, recorded June 27, 2018.

00:00:09.020 --> 00:00:09.960
I'm Michael Kennedy.

00:00:09.960 --> 00:00:10.860
And I'm Brian Okken.

00:00:10.860 --> 00:00:13.540
And Brian, you brought a special guest along for this one.

00:00:13.540 --> 00:00:16.060
I'm so excited that we have yet another perspective here.

00:00:16.060 --> 00:00:16.500
Yeah.

00:00:16.500 --> 00:00:17.820
Welcome, Nina Zakarenko.

00:00:17.820 --> 00:00:19.300
Hi, it's great to be here.

00:00:19.300 --> 00:00:20.820
Yeah, it's really great to have you on the show.

00:00:20.820 --> 00:00:23.780
And it's going to be fun to have your perspective on all these things.

00:00:23.780 --> 00:00:25.520
So let's get started.

00:00:25.520 --> 00:00:28.660
Before we get into the topics, I just want to say thank you to DigitalOcean.

00:00:29.120 --> 00:00:30.280
DigitalOcean is great.

00:00:30.280 --> 00:00:34.980
If you want to try some of their cloud hosting, just go to pythonbytes.fm/DigitalOcean.

00:00:34.980 --> 00:00:36.900
And for new users, you get $100 credit.

00:00:36.900 --> 00:00:37.920
That's pretty sweet.

00:00:37.920 --> 00:00:41.120
Hey, Brian, we've talked a lot about Python packaging, right?

00:00:41.120 --> 00:00:43.920
We have, and I'm going to talk about it more today.

00:00:43.920 --> 00:00:45.840
We were trying to talk about how to do it right.

00:00:45.840 --> 00:00:47.640
But sometimes it might go wrong, right?

00:00:47.640 --> 00:00:48.640
Yeah.

00:00:48.640 --> 00:00:56.280
So one of the fun things is, well, I've tried to, I'm working on switching packages to use markdown versions of readmes.

00:00:56.440 --> 00:00:59.020
But a lot of them are in restructured text.

00:00:59.020 --> 00:01:04.280
And sometimes, really either any one of them, sometimes you can get the documentation.

00:01:04.280 --> 00:01:06.520
It can be kind of a little mocked up.

00:01:06.520 --> 00:01:08.060
It might look fine on your computer.

00:01:08.060 --> 00:01:14.000
But you push everything up all the way up to PyPI, and it doesn't look good.

00:01:14.000 --> 00:01:15.180
Something's messed up.

00:01:15.180 --> 00:01:22.740
And so somebody wrote a document called, or an article called correcting documentation for a deployed Python package.

00:01:23.380 --> 00:01:25.720
And the answer, there's a couple answers.

00:01:25.720 --> 00:01:29.580
One of them is to try to prevent it first by checking your documentation first.

00:01:29.580 --> 00:01:40.320
And there was a recommendation of a tool called REST View, which is a way to view your long description of your package before you push it up.

00:01:40.320 --> 00:01:50.060
But even after then, if you don't do that, or if it's still messed up, to use post version numbers, which I knew about these things, but I didn't know what they were for.

00:01:50.060 --> 00:01:56.500
So let's say your package is on version 0.3.2, and it's messed up.

00:01:56.620 --> 00:02:00.120
Well, you can't just fix the documentation and push it back up again.

00:02:00.120 --> 00:02:03.700
PyPI doesn't let you push up the same version again.

00:02:03.700 --> 00:02:06.080
Yeah, they're basically immutable once they're published, right?

00:02:06.080 --> 00:02:06.540
Yeah.

00:02:06.540 --> 00:02:13.620
So if you push up 0.3.3 with the fixed documentation, there's like nothing changed.

00:02:13.620 --> 00:02:16.160
Nobody really has to download the new one.

00:02:16.160 --> 00:02:19.360
But that's, I guess, what the post version numbers are.

00:02:19.360 --> 00:02:24.320
So you can say 0.3.2 post 1 and post 2 and post 3.

00:02:25.020 --> 00:02:31.580
And these don't cause people to have to re-download if it's a pip dependency or something like that.

00:02:31.580 --> 00:02:35.360
But it allows you to push up new documentation, and I thought that was cool.

00:02:35.360 --> 00:02:35.940
That's interesting.

00:02:35.940 --> 00:02:43.860
So the post on the end means like if I do a dash U or --upgrade in PIP, it's not going to do anything, but it'll still let you update it?

00:02:43.860 --> 00:02:45.860
Yeah, it still pushes up a new version.

00:02:45.860 --> 00:02:53.780
I don't actually know if it prevents the pip install stuff, but at least in your version, your change log and stuff,

00:02:53.900 --> 00:02:57.780
you can actually, I don't know all the details, but it's a cool trick.

00:02:57.780 --> 00:02:59.200
Yeah, it's definitely a cool trick.

00:02:59.200 --> 00:03:03.380
The other thing I wanted to bring up since I'm talking about packaging is I was pushing up a different,

00:03:03.380 --> 00:03:07.660
going through the release process of pushing up a new package just the other day.

00:03:07.660 --> 00:03:10.000
And I was trying out the test.

00:03:10.000 --> 00:03:13.580
For some reason, I was having trouble with the test PIPI.

00:03:13.580 --> 00:03:17.960
So before you push it to the real one, you can test things out on the test server.

00:03:17.960 --> 00:03:26.120
But for some reason, even though the packaging instructions are really pretty clear, I couldn't get it right.

00:03:26.120 --> 00:03:34.820
So the Python Package Authority has a document called using test PIPI that is a little more detailed, and it helped me, and it was nice.

00:03:34.820 --> 00:03:36.360
So check that out also.

00:03:36.500 --> 00:03:38.520
Yeah, that'll help all the package maintainers out there.

00:03:38.520 --> 00:03:42.340
Nina, do you have any packages you have to maintain or take care of?

00:03:42.340 --> 00:03:43.900
I'm very lucky I don't.

00:03:43.900 --> 00:03:45.300
Yeah.

00:03:45.560 --> 00:03:49.320
I think it's probably a blessing and a curse to have a really popular project.

00:03:49.320 --> 00:03:55.540
You know, you just think of the people who created Django or requests or something like that.

00:03:55.540 --> 00:03:59.540
And on one hand, it's like sort of geek stardom in a sense.

00:03:59.540 --> 00:04:05.480
But on the other, all these people are asking you for changes and maintenance and all kinds of stuff that you're like,

00:04:05.480 --> 00:04:07.080
I've got another life to live.

00:04:07.080 --> 00:04:08.980
You know, this is the only thing I do, right?

00:04:08.980 --> 00:04:10.920
So yeah, maybe it goes both the way.

00:04:10.920 --> 00:04:12.800
It's definitely a blessing and a curse.

00:04:12.800 --> 00:04:13.620
Yeah, for sure.

00:04:14.100 --> 00:04:16.900
So Nina, what's the item that you want to talk about first?

00:04:16.900 --> 00:04:20.340
I want to chat about something that's not particularly new.

00:04:20.340 --> 00:04:24.580
It's been around for a long time, but it's gotten an update in the past year.

00:04:24.580 --> 00:04:29.560
And that's the Flask Mega Tutorial by Miguel Grinberg.

00:04:29.560 --> 00:04:30.840
Have you guys heard of that?

00:04:30.840 --> 00:04:32.220
Yeah, that's a great one.

00:04:32.220 --> 00:04:32.980
You're right.

00:04:32.980 --> 00:04:38.160
He had that around for a while, and he actually did a Kickstarter to revitalize it, which I thought was awesome.

00:04:38.160 --> 00:04:43.480
He has that Kickstarter money to put out a great e-book format of the tutorial as well.

00:04:44.080 --> 00:04:53.640
And for those of you who are listening and don't know about the Flask Mega Tutorial, it's a, I have the page open right now, a 23 chapter Flask tutorial.

00:04:54.040 --> 00:05:03.900
And it's come up for me several times in the past few weeks because I get a lot of questions with, from beginners about how to learn Python, how to really learn Python.

00:05:03.900 --> 00:05:14.220
They maybe have a good grasp on the language, but they're stuck on what to do next, or they want to learn about web apps, and they kind of don't really know where to go.

00:05:14.540 --> 00:05:17.540
And I always point them at the Flask Mega Tutorial.

00:05:17.540 --> 00:05:18.720
Oh, yeah, that's really great.

00:05:18.720 --> 00:05:19.920
It's so comprehensive.

00:05:19.920 --> 00:05:21.080
I mean, you're right.

00:05:21.080 --> 00:05:26.880
It has three chapters on deployment, one for straight virtual machines, one for Heroku, and one for Docker.

00:05:26.880 --> 00:05:29.780
Yeah, Miguel did a great job on this.

00:05:29.780 --> 00:05:35.780
And I feel like, you know, you talked about new users or developers coming in and learning Python.

00:05:36.260 --> 00:05:39.300
There's just so many layers to what you have to do as a developer, right?

00:05:39.300 --> 00:05:41.100
Like, well, I learned Python really well.

00:05:41.100 --> 00:05:42.660
Well, now you have to learn about databases.

00:05:42.660 --> 00:05:43.480
Oh, okay, great.

00:05:43.480 --> 00:05:44.180
I'll go learn about that.

00:05:44.180 --> 00:05:45.220
All right, now I know about databases.

00:05:45.220 --> 00:05:46.260
All right, I want to put it on the web.

00:05:46.260 --> 00:05:46.880
How do I do that?

00:05:46.880 --> 00:05:48.940
Well, you got to go learn about Flask and HTML.

00:05:48.940 --> 00:05:50.020
And okay, great.

00:05:50.020 --> 00:05:50.520
I did all that.

00:05:50.520 --> 00:05:52.220
Like, now how do I get it on the web?

00:05:52.220 --> 00:05:54.540
Like, well, now you got to learn about Linux or whatever, right?

00:05:54.540 --> 00:05:55.880
Just like so many layers.

00:05:55.880 --> 00:05:57.700
And having this is definitely helpful.

00:05:57.700 --> 00:06:01.000
Now you have to figure out how to maintain and deploy the thing.

00:06:01.000 --> 00:06:04.640
Yeah, there's a chapter in this tutorial about databases.

00:06:04.640 --> 00:06:10.300
But there's also one about dates and times, which is super important, and internationalization.

00:06:10.300 --> 00:06:11.420
And then...

00:06:11.420 --> 00:06:17.600
Well, I had one of the questions I had for you about this was I'm looking at a couple of different ones.

00:06:17.600 --> 00:06:25.500
And Miguel does recommend some, as he's going through the different topics, some different Flask extensions.

00:06:25.500 --> 00:06:31.440
And have you found that his recommendations are fairly spot on for what you should be using?

00:06:31.440 --> 00:06:37.700
So I actually did go through this tutorial back in the day when I was learning Flask.

00:06:37.700 --> 00:06:41.620
But it was the version that was four or five years old.

00:06:41.620 --> 00:06:42.520
Okay.

00:06:42.520 --> 00:06:46.440
So I'm not fully up to date with what he recommends now.

00:06:46.440 --> 00:06:48.420
What extensions does he mention?

00:06:48.780 --> 00:06:55.580
Oh, like, for instance, Flask login for dealing with user data or user login stuff.

00:06:55.580 --> 00:07:01.900
And Flask migrate for migrating databases, things like that.

00:07:01.900 --> 00:07:03.680
I haven't used either of those.

00:07:03.680 --> 00:07:04.160
Okay.

00:07:04.160 --> 00:07:04.600
Michael?

00:07:04.600 --> 00:07:06.220
I haven't used a ton of them.

00:07:06.220 --> 00:07:10.080
I know he's doing some interesting stuff with, like, some forms extensions.

00:07:10.440 --> 00:07:12.200
And I've gone through his tutorial somewhat.

00:07:12.200 --> 00:07:13.180
It's really nice.

00:07:13.180 --> 00:07:13.480
Okay.

00:07:13.480 --> 00:07:15.220
But I suppose I mostly write in Pyramid.

00:07:15.220 --> 00:07:16.960
So I haven't been looking too closely.

00:07:16.960 --> 00:07:18.720
But I definitely do a little Flask.

00:07:18.720 --> 00:07:22.200
And, you know, it's good to definitely experience all the frameworks.

00:07:22.200 --> 00:07:23.980
And I have another one for you guys later.

00:07:23.980 --> 00:07:24.960
A pretty awesome one.

00:07:24.960 --> 00:07:26.100
So there'll be more to learn.

00:07:26.100 --> 00:07:27.400
There's always more to learn.

00:07:27.400 --> 00:07:28.180
Yeah.

00:07:28.180 --> 00:07:28.900
Exciting.

00:07:28.900 --> 00:07:29.340
Yeah.

00:07:29.340 --> 00:07:36.100
So one of the things I think is cool about Python is it's not like a full-on compiled language

00:07:36.100 --> 00:07:39.020
that lets you sort of work directly with memory.

00:07:39.020 --> 00:07:42.480
And that means that there's no security vulnerabilities in Python, right?

00:07:42.480 --> 00:07:43.300
There's some.

00:07:43.300 --> 00:07:43.860
There's a few.

00:07:43.860 --> 00:07:44.640
They come up.

00:07:44.640 --> 00:07:45.620
They do.

00:07:45.620 --> 00:07:52.460
So actually, so the thing that I want to talk about is a show by, an article by Anthony Shaw.

00:07:52.460 --> 00:07:56.420
Of course, it wouldn't be a show without mentioning Anthony Shaw doing something or other.

00:07:56.420 --> 00:08:00.260
It's called 10 Common Security Gotchas in Python and How to Avoid Them.

00:08:00.260 --> 00:08:06.520
So he's done some really cool research here and talked about 10 things, maybe more than

00:08:06.520 --> 00:08:13.000
10 things, 10 categories, let's say, of errors you can run into in Python that are super bad,

00:08:13.000 --> 00:08:16.100
can get your company in the headlines in the way you don't want it in the headlines.

00:08:16.100 --> 00:08:18.760
So I'll run through these.

00:08:18.760 --> 00:08:22.820
And you guys let me know if they're familiar or if you've seen examples or anything like

00:08:22.820 --> 00:08:23.040
that.

00:08:23.040 --> 00:08:27.520
So the first one, probably the most common one, is some form of injection attack.

00:08:27.520 --> 00:08:31.660
And when I think about injection attack, I think about Little Bobby Tables.

00:08:31.660 --> 00:08:33.560
Have you seen Little Bobby Tables?

00:08:33.560 --> 00:08:34.320
Absolutely.

00:08:34.320 --> 00:08:35.260
It's a classic.

00:08:35.260 --> 00:08:36.460
Oh, he is a classic.

00:08:36.460 --> 00:08:37.700
He's a troubled student.

00:08:37.700 --> 00:08:42.500
So Little Bobby Tables is like a cartoon, XKCD, about SQL injection attacks.

00:08:42.660 --> 00:08:48.680
But there's also process injection attacks in Python that if you use process, Popen and things

00:08:48.680 --> 00:08:54.340
like that, that you can actually do all sorts of badness by escaping or getting out of the

00:08:54.340 --> 00:08:59.360
various commands and sending multiple commands to the shell, which might also be super bad.

00:08:59.360 --> 00:09:00.600
So there's that.

00:09:00.600 --> 00:09:01.540
Parsing XML.

00:09:01.780 --> 00:09:06.360
There's basically denial of surface attacks you can do by having a self-referential XML

00:09:06.360 --> 00:09:11.480
entity that refers back to itself, that refers to itself, that'll just destroy your memory

00:09:11.480 --> 00:09:12.860
and a couple of things like that.

00:09:12.860 --> 00:09:18.740
But there's also ways to get around firewalls with linking in XML documents.

00:09:18.740 --> 00:09:23.840
So there's some interesting fixes, different libraries you can drop in as replacements that

00:09:23.840 --> 00:09:24.700
get around those attacks.

00:09:24.700 --> 00:09:25.720
Assert.

00:09:25.720 --> 00:09:28.300
So sometimes people might think assert.

00:09:28.300 --> 00:09:33.740
Assert that you are an admin before I run the admin command, things like that.

00:09:33.740 --> 00:09:38.160
But in production, you can turn off the assert statements in Python.

00:09:38.160 --> 00:09:41.460
So that could be, well, your error checking just left, right?

00:09:41.460 --> 00:09:42.080
That'd be bad.

00:09:42.080 --> 00:09:43.300
Timing attack.

00:09:43.300 --> 00:09:47.660
Some really interesting ones that we've sort of touched on a little bit, Brian, previously

00:09:47.660 --> 00:09:52.440
is with polluted site packages or things like that, right?

00:09:52.440 --> 00:10:00.160
Like if I pip install requests and I like switch, I don't know, just misspell it somehow, somebody

00:10:00.160 --> 00:10:02.440
could publish an evil request, right?

00:10:02.440 --> 00:10:04.780
We've covered a few examples of that actually happening on PyPI.

00:10:04.780 --> 00:10:06.000
Let's see.

00:10:06.000 --> 00:10:08.620
Temporary files, yaml.load, pickling.

00:10:08.620 --> 00:10:09.940
Pickling is evil.

00:10:09.940 --> 00:10:12.120
So I don't know.

00:10:12.120 --> 00:10:13.740
Do you guys use pickle for anything?

00:10:13.740 --> 00:10:20.380
No, but it's still surprising to me that it shows up in a lot of tutorials on how to learn Python.

00:10:20.380 --> 00:10:20.740
I know.

00:10:20.740 --> 00:10:24.560
Every time I see it, I'm just like, oh boy, there's got to be, couldn't we just do JSON?

00:10:24.560 --> 00:10:26.560
The short version of the pickle.

00:10:26.560 --> 00:10:27.180
Go ahead, Nina.

00:10:27.180 --> 00:10:31.380
I was going to say, I have not come across any tutorial with pickle in it.

00:10:31.380 --> 00:10:31.660
So.

00:10:31.660 --> 00:10:32.200
That's good.

00:10:32.200 --> 00:10:34.740
I don't know where you get your material, Brian.

00:10:34.740 --> 00:10:37.240
Really old books.

00:10:37.240 --> 00:10:37.600
Yeah.

00:10:37.600 --> 00:10:38.900
It's like, oh, we can just save that.

00:10:38.940 --> 00:10:39.560
We'll just pickle that.

00:10:39.560 --> 00:10:46.060
There's so many things wrong with it, but security is one because there's basically a step where arbitrary code is run on deserialization.

00:10:46.060 --> 00:10:47.120
And that's not amazing.

00:10:47.120 --> 00:10:50.340
And then, of course, patching your runtime and patching your dependencies.

00:10:50.340 --> 00:10:57.480
So these are all just a handful of things to check your code for, to make sure you don't do, to check your infrastructure for, and so on.

00:10:57.480 --> 00:10:57.760
Yeah.

00:10:57.760 --> 00:10:58.940
These were obvious to me.

00:10:58.940 --> 00:11:03.540
I was expecting, like, the obvious one of don't use the eval statement on user data.

00:11:03.540 --> 00:11:06.160
But maybe that's just too obvious.

00:11:06.160 --> 00:11:06.760
Yeah, maybe.

00:11:06.760 --> 00:11:09.120
I mean, that one definitely should be thrown in there, right?

00:11:09.120 --> 00:11:13.220
That's definitely one that's sort of along the same thing as pickles.

00:11:13.220 --> 00:11:15.580
Maybe even worse than pickles, to be honest.

00:11:15.580 --> 00:11:24.060
But, yeah, I think there's a lot of non-obvious things here that people who have been doing Python for a long time, like, I had no idea that YAML files could be evil.

00:11:24.060 --> 00:11:25.200
But they can be really evil.

00:11:25.500 --> 00:11:28.540
And one of the things that I really liked was his fixes are pretty easy.

00:11:28.540 --> 00:11:31.680
Just learn about these, use these fixes, and it's good.

00:11:31.680 --> 00:11:35.760
I didn't know about that you can turn off assert statements in production.

00:11:35.760 --> 00:11:39.380
I tend not to use them in code outside of testing.

00:11:39.380 --> 00:11:41.800
But that was a surprise to me.

00:11:41.800 --> 00:11:43.860
And I've been doing Python for quite a long time.

00:11:43.860 --> 00:11:46.460
It would be bad to go, why is it not checking?

00:11:46.460 --> 00:11:47.660
I know the check is here.

00:11:47.660 --> 00:11:48.840
I could see it in the code.

00:11:48.840 --> 00:11:50.140
Yeah, no, it just doesn't do anything.

00:11:50.140 --> 00:11:55.400
Yeah, so if you're running any Python that is basically exposed to the world,

00:11:55.400 --> 00:11:58.200
in any way, you probably want to skim through Anthony's article.

00:11:58.200 --> 00:11:58.820
It's a good one.

00:11:58.820 --> 00:12:01.440
All right, before we move on, let me tell you all about DigitalOcean.

00:12:01.440 --> 00:12:04.140
So DigitalOcean is a big supporter of the show.

00:12:04.140 --> 00:12:06.740
Our infrastructure runs on DigitalOcean as well.

00:12:06.740 --> 00:12:08.920
So we're both sponsors.

00:12:08.920 --> 00:12:10.900
And we're both happy customers at the same time.

00:12:10.900 --> 00:12:16.580
So you can go from zero to a server up and running in 60 seconds, probably more like 30, 35 seconds.

00:12:16.580 --> 00:12:17.480
It's super easy.

00:12:17.480 --> 00:12:19.680
Just go pick your Linux distribution.

00:12:19.680 --> 00:12:26.100
If you want it pre-installed with something like Mongo or Ghost, you can check a box and it'll just do that.

00:12:26.100 --> 00:12:29.240
Up and running, SSH in, and you're off to the races.

00:12:29.240 --> 00:12:33.280
Really super reliable, super bulletproof, lots of data centers.

00:12:33.280 --> 00:12:34.260
Big fan.

00:12:34.740 --> 00:12:41.060
If you go to pythonbytes.fm/digitalocean, you can get $100 to get started if you're a new user.

00:12:41.060 --> 00:12:44.100
So check them out and tell them thanks for supporting the show.

00:12:44.100 --> 00:12:48.800
Once your server's up and running, go back and read Anthony's article to make sure that it's secure.

00:12:48.800 --> 00:12:51.020
First thing you do is you patch your Python.

00:12:51.020 --> 00:12:51.480
That's right.

00:12:51.480 --> 00:12:57.620
So one thing that I don't use at all that I feel like I probably should learn more about are pre-commit hooks and Git.

00:12:57.620 --> 00:12:58.700
I'm on the same boat.

00:12:58.700 --> 00:13:08.540
I want to try to, we're using some things like linters and other tools like PyLint and FlakeAid, things like that, at work now.

00:13:08.540 --> 00:13:15.800
But I want to make sure that they're, I want to get into a use model where they're just used all the time before it gets committed.

00:13:15.800 --> 00:13:24.720
And so I came across this, I'm not sure who referenced it, but a project called Pre-Commit, which is built in Python, but it's not Python only.

00:13:24.720 --> 00:13:31.580
It's a tool that can start, easily hook up a lot of these Git pre-commit hooks for you.

00:13:31.580 --> 00:13:37.940
So you can run things like Lint or Black or other things before you check in.

00:13:37.940 --> 00:13:41.560
And it's got some nice features for it.

00:13:41.560 --> 00:13:44.500
It's YAML-based, so it's really easy to read the setup.

00:13:44.500 --> 00:13:47.940
It does all the hooking up into Git for you.

00:13:47.940 --> 00:13:54.280
And I'm not sure, I'm guessing everybody individually has to do it once they check out a repo, but I'm not sure about that.

00:13:54.280 --> 00:13:55.480
I'm just getting into this.

00:13:55.480 --> 00:14:04.620
But also, one of the things I wanted to make sure I could do was to every step of my pre-commit, like if I wanted to run Black or PyLint or something, I could test that out.

00:14:04.620 --> 00:14:09.880
And it does, it has the ability to just run each individual hook by itself.

00:14:09.880 --> 00:14:12.620
So this is something fun that I'm looking into.

00:14:12.620 --> 00:14:14.020
Oh, yeah, that looks really fun.

00:14:14.020 --> 00:14:15.480
Pre-commit hooks are awesome.

00:14:15.480 --> 00:14:15.920
Oh, yeah?

00:14:15.920 --> 00:14:16.560
Are you using them?

00:14:16.560 --> 00:14:20.360
Yeah, I actually use them pretty heavily in my last project.

00:14:20.360 --> 00:14:23.520
And they've saved my butt multiple times.

00:14:23.520 --> 00:14:27.620
One of my favorite pre-commit hooks looks for debugger statements.

00:14:27.620 --> 00:14:28.060
Okay.

00:14:28.060 --> 00:14:29.760
Yeah, so if you have a PDB.

00:14:29.760 --> 00:14:31.920
Yeah, like triggering a breakpoint or something like that?

00:14:31.920 --> 00:14:33.300
Yeah, exactly.

00:14:33.660 --> 00:14:34.940
Oh, that's a really smart one.

00:14:34.940 --> 00:14:35.260
Yeah.

00:14:35.260 --> 00:14:38.420
I guess you could do all sorts of checks, right?

00:14:38.420 --> 00:14:44.000
Like check for to-do or, you know, not implemented, all kinds of stuff that the people might put there.

00:14:44.000 --> 00:14:46.100
Like, actually, you probably shouldn't check that in.

00:14:46.480 --> 00:15:00.980
Yeah, and it's nice having kind of global team-wide pre-commit hooks where everyone's on the same page with things like checking for debugger statements, linting, any other sort of, maybe you have a line length rule that you want to follow.

00:15:00.980 --> 00:15:04.400
And then breaking that down and having individual pre-commit hooks.

00:15:04.400 --> 00:15:12.660
So maybe checking for to-do and your initials or whatever scratch code that you tend to put in and don't want to check into the greater project.

00:15:12.940 --> 00:15:17.460
Yeah, I see the real value of the pre-commit hooks being for teamwork.

00:15:17.460 --> 00:15:20.640
Obviously, it's valuable for individuals as well, right?

00:15:20.640 --> 00:15:24.100
Even individuals don't want to ship a web app that has a breakpoint in it.

00:15:24.100 --> 00:15:30.080
But, you know, it seems like the value is amplified when you have a team and you can all agree upon the way it works and that just gets automated.

00:15:30.080 --> 00:15:30.720
Absolutely.

00:15:30.720 --> 00:15:42.400
Yeah, I'm a big proponent of having a code-style document where everyone's on the same page and where if a team is working on a code base, as they commit code,

00:15:42.480 --> 00:15:48.180
it looks like one person is doing it and you can't just point in a chunk and say, oh, Michael wrote that.

00:15:48.180 --> 00:15:49.460
It's got his style in it.

00:15:49.460 --> 00:15:54.740
It's got that weird triple list comprehension with an internal dictionary comprehension.

00:15:54.740 --> 00:15:55.540
We don't do that.

00:15:55.540 --> 00:15:55.800
Right.

00:15:55.800 --> 00:15:56.440
Yeah, yeah.

00:15:56.440 --> 00:15:57.100
No, that's awesome.

00:15:57.100 --> 00:16:02.100
So we have kind of a big piece of news theoretically coming today, right?

00:16:02.100 --> 00:16:03.560
That's right.

00:16:03.560 --> 00:16:06.460
Python 3.7 should be released today.

00:16:06.460 --> 00:16:10.800
So by the time you're listening to this podcast, you'll have it.

00:16:11.080 --> 00:16:12.140
Fingers crossed.

00:16:12.140 --> 00:16:16.900
So if you go check out PEP5.3.7, this is the release schedule for Python 3.7.

00:16:16.900 --> 00:16:24.340
It says expected on the schedule is 3.7.0 finals June 27th, 2018.

00:16:24.340 --> 00:16:25.100
That's today.

00:16:25.100 --> 00:16:30.360
So assuming everything lines up right, you should be able to go and download Python 3.7.

00:16:30.360 --> 00:16:34.380
If not, just pause the show for a day or two and come check again.

00:16:35.160 --> 00:16:35.400
Yeah.

00:16:35.400 --> 00:16:37.680
What are some of the features that you're finding really awesome there?

00:16:37.680 --> 00:16:40.400
So now there's a breakpoint function.

00:16:40.400 --> 00:16:44.840
No more import PDB colon set trace.

00:16:44.840 --> 00:16:47.960
There's just a breakpoint function that you can drop in.

00:16:47.960 --> 00:16:48.620
Yeah, that's cool.

00:16:48.680 --> 00:16:53.360
When I first heard about that, I was like, well, okay, that's nicer, right?

00:16:53.360 --> 00:16:55.300
But how much does it really help?

00:16:55.300 --> 00:17:03.100
And then the more I looked into it, I realized actually the PDB trick is tied to the PDB debugger.

00:17:03.100 --> 00:17:06.520
But there are many other types of debuggers you may want to use in Python.

00:17:06.860 --> 00:17:14.020
And this breakpoint thing lets you configure your environment to, when you say breakpoint, trigger a breakpoint in that debugger, which is kind of cool.

00:17:14.020 --> 00:17:16.620
I personally use and love IPDB.

00:17:16.620 --> 00:17:20.020
It's kind of more interactive version of PDB.

00:17:20.020 --> 00:17:28.960
But the limitation in both that I, maybe there's a way, but I never quite figured it out, was you could only type in one-line statements.

00:17:29.740 --> 00:17:33.540
You could put in semicolons and a few other things, but you were really kind of limited.

00:17:33.540 --> 00:17:37.400
You couldn't paste in functions or anything too complex.

00:17:37.400 --> 00:17:45.200
Now with the new breakpoint function in Python 3.7, you can just open up an IPDB shell and do whatever you want.

00:17:45.200 --> 00:17:46.580
That's so exciting.

00:17:46.580 --> 00:17:48.300
Yeah, that's really awesome.

00:17:48.300 --> 00:17:49.260
I think that's great.

00:17:49.260 --> 00:17:54.340
Certainly makes building better tools that plug in for that in place of PDB.

00:17:54.340 --> 00:17:55.180
That's good.

00:17:55.180 --> 00:17:55.900
Yeah, nice.

00:17:55.900 --> 00:17:57.960
We also have some new board members, right?

00:17:57.960 --> 00:17:58.620
That's right.

00:17:58.620 --> 00:17:58.960
Yeah.

00:17:59.120 --> 00:18:05.720
The PSF board member elections just finished two days ago, and there are now four new board members.

00:18:05.720 --> 00:18:11.940
I have not practiced saying their last names out loud, so if I butcher them, I totally apologize.

00:18:11.940 --> 00:18:15.200
But we have four new members.

00:18:15.200 --> 00:18:21.360
They are Anna Osiewski, Christopher Nugebauer.

00:18:21.360 --> 00:18:24.520
That's going to be my final guess.

00:18:24.520 --> 00:18:26.860
Jeff Triplett, and then Katie McLaughlin.

00:18:26.860 --> 00:18:27.480
Oh, awesome.

00:18:27.720 --> 00:18:30.340
Yeah, it's great to hear some of those folks in there.

00:18:30.340 --> 00:18:31.840
Congratulations, everybody, on that.

00:18:31.840 --> 00:18:40.720
And I know a number of us have voted, and it's great to see the community sort of putting in place these structures to keep it vibrant.

00:18:40.720 --> 00:18:41.500
Yeah, I voted.

00:18:41.500 --> 00:18:45.360
There was a 47% voter turnout for this election.

00:18:45.360 --> 00:18:46.500
That's pretty good, really.

00:18:46.720 --> 00:18:46.960
Yeah.

00:18:46.960 --> 00:18:53.600
I guess we could go for 100%, but 47%, it seems like probably a lot of people don't check their mail, and the announcements just go right by, right?

00:18:53.600 --> 00:18:54.080
Yeah.

00:18:54.080 --> 00:18:56.080
I'm super excited for them.

00:18:56.200 --> 00:18:56.920
Yeah, that's cool.

00:18:56.920 --> 00:18:57.200
Awesome.

00:18:57.200 --> 00:18:57.820
Congratulations.

00:18:57.820 --> 00:19:00.800
And I'm really looking forward to installing Python 3.7.

00:19:00.800 --> 00:19:01.380
That'll be fun.

00:19:01.380 --> 00:19:03.900
So we talked about Flask.

00:19:03.900 --> 00:19:04.900
Flask.

00:19:04.900 --> 00:19:13.660
And one of the big, I feel like one of the big blockades that's going to crack loose and really sort of change things in the Python web space is this async stuff.

00:19:13.660 --> 00:19:17.140
And there have been a couple of attempts at it.

00:19:17.300 --> 00:19:18.480
We've had Sanic.

00:19:18.480 --> 00:19:19.420
We've had Jepronto.

00:19:19.420 --> 00:19:29.480
We've got Court, which is basically Flask directly converted to be async awaitable, which can give it really good performance benefits.

00:19:29.480 --> 00:19:35.820
But there's a new framework that is just going like gangbusters called Vibora, the Vibora web framework.

00:19:35.820 --> 00:19:36.720
Have either of you heard of this?

00:19:36.720 --> 00:19:37.400
I have not.

00:19:37.400 --> 00:19:38.020
No.

00:19:38.020 --> 00:19:38.860
It's shiny new.

00:19:38.860 --> 00:19:47.040
So I went to the GitHub repository, and it's only 14 days old, but it already has 21 contributors and over 2,000 GitHub stars.

00:19:47.040 --> 00:19:47.600
Whoa.

00:19:47.600 --> 00:19:49.160
That's pretty intense, right?

00:19:49.160 --> 00:19:52.580
So it's basically Flask-like, right?

00:19:52.580 --> 00:20:01.400
It's super inspired by Flask, but it's from scratch re-implementation or implementation of something like an asynchronous version of Flask.

00:20:01.400 --> 00:20:08.100
So if you want to create a function that is asynchronous, you just say app.route, you know, decorate it.

00:20:08.100 --> 00:20:12.740
App.route, give it the URL, async def, index, and then return some kind of response.

00:20:13.300 --> 00:20:17.940
So really, really nice to create these, you know, async await enabled functions.

00:20:17.940 --> 00:20:21.760
And that has some interesting performance benefits.

00:20:21.760 --> 00:20:26.440
If you go look at Vibora.io, they have some nice graphs.

00:20:26.640 --> 00:20:31.720
So they've got, like, Flask running around 30,000 requests per second.

00:20:31.720 --> 00:20:33.760
Pyramid running 35.

00:20:33.760 --> 00:20:36.220
Sanic 60.

00:20:36.220 --> 00:20:42.300
Vibora 150,000 requests per second on the same – doing the same processing on the same infrastructure.

00:20:42.300 --> 00:20:48.300
And I suspect the scalability is even better in terms of, like, heavily IO-bound things.

00:20:48.300 --> 00:20:49.380
Like, I talk to a database.

00:20:49.380 --> 00:20:50.660
I talk to a web service.

00:20:50.660 --> 00:20:51.460
Things like that.

00:20:51.460 --> 00:20:52.720
This is really impressive.

00:20:52.980 --> 00:20:53.200
Yeah.

00:20:53.200 --> 00:20:56.740
It looks like it's got WebSec that's built into it also.

00:20:56.740 --> 00:20:57.140
Yeah.

00:20:57.140 --> 00:21:02.620
Because the async stuff, it's super easy for it to do without, you know, blocking and consuming threads and things like that.

00:21:02.620 --> 00:21:03.820
I think this is great.

00:21:03.820 --> 00:21:13.180
It's got a bunch of things that were written from scratch for performance considerations and to make sure that async is first class.

00:21:13.340 --> 00:21:16.940
It's got a bunch of things like schema validation, the template engine, sessions, all sorts of cool stuff.

00:21:16.940 --> 00:21:19.720
It takes advantage of multiple CPU cores.

00:21:19.720 --> 00:21:21.140
It uses UV loop.

00:21:21.140 --> 00:21:23.680
That's the same thing Sanic is based on and other C-speedups.

00:21:23.680 --> 00:21:28.700
It also has a really interesting thing that I haven't seen in a lot of frameworks called virtual hosts.

00:21:28.700 --> 00:21:36.620
So in, like, Flask or Pyramid, I can say the URL is forward slash episode slash 7 to get the episode 7 or whatever.

00:21:37.040 --> 00:21:39.600
But in here, you can actually have different domains.

00:21:39.600 --> 00:21:46.480
So you can have, like, docs.pythonbytes.fm and episodes.pythonbytes.fm within the same web app.

00:21:46.480 --> 00:21:47.020
Interesting.

00:21:47.020 --> 00:21:47.360
Yeah.

00:21:47.360 --> 00:21:48.120
It's interesting, right?

00:21:48.120 --> 00:21:48.920
Pretty funky.

00:21:48.920 --> 00:21:50.800
And deployment's pretty easy.

00:21:50.800 --> 00:21:54.900
It actually comes with its own server because WSGI is part of the problem.

00:21:54.900 --> 00:21:59.880
WSGI, like the foundational server bits in most of these things, is a synchronous interface.

00:21:59.880 --> 00:22:02.200
And so there's no way to squeeze async in between it.

00:22:02.200 --> 00:22:03.220
So it's pretty cool.

00:22:03.220 --> 00:22:06.360
Anyway, the docs need a little help, but it's only 14 days old.

00:22:06.360 --> 00:22:08.080
So I guess we should give them a little slack.

00:22:08.080 --> 00:22:08.440
Yeah.

00:22:08.440 --> 00:22:10.980
I just added a new start to their tally.

00:22:10.980 --> 00:22:11.720
Oh, awesome.

00:22:11.720 --> 00:22:12.680
Yeah.

00:22:12.680 --> 00:22:14.200
They've just got a few more.

00:22:14.200 --> 00:22:15.120
It's cool, though, right?

00:22:15.120 --> 00:22:18.520
I mean, it's very much like Flask, but it's kind of a modernized version.

00:22:18.520 --> 00:22:24.060
I was going to say, I was wondering about the name Vibora, but they explain that on their GitHub page.

00:22:24.060 --> 00:22:26.040
It means Viper in Portuguese.

00:22:26.040 --> 00:22:27.100
Oh, Viper.

00:22:27.100 --> 00:22:27.480
Okay.

00:22:27.480 --> 00:22:29.060
I guess Vipers are fast.

00:22:29.060 --> 00:22:29.560
I don't know.

00:22:29.560 --> 00:22:30.960
I mean, they can strike fast.

00:22:30.960 --> 00:22:32.280
I don't know about their actual motion.

00:22:32.280 --> 00:22:33.740
Vibora.

00:22:33.740 --> 00:22:34.220
Okay, cool.

00:22:34.220 --> 00:22:36.260
And you forgot to mention the best part.

00:22:36.260 --> 00:22:40.380
On their page, the benchmark title has a rocket next to it.

00:22:40.380 --> 00:22:43.680
I'm a fan of anything with rockets.

00:22:43.680 --> 00:22:44.420
I know.

00:22:44.420 --> 00:22:46.560
A testing rocket for sure.

00:22:46.560 --> 00:22:48.160
Nice.

00:22:48.160 --> 00:22:54.820
So people who are doing web stuff, this is a new one to keep your eye on in terms of the shiny new frameworks for Python.

00:22:55.280 --> 00:23:00.440
Oh, another interesting thing is this is a Python, not just a Python 3 only framework.

00:23:00.440 --> 00:23:02.300
It's Python 3.6 or above.

00:23:02.300 --> 00:23:03.940
None of that legacy stuff.

00:23:03.940 --> 00:23:05.320
I'm on board with that.

00:23:05.320 --> 00:23:06.400
Wow.

00:23:06.400 --> 00:23:06.780
That's pretty sweet.

00:23:06.780 --> 00:23:08.080
Yeah, that's bold.

00:23:08.080 --> 00:23:08.480
That's awesome.

00:23:08.480 --> 00:23:09.060
All right.

00:23:09.120 --> 00:23:11.240
Well, that's it for our items this week.

00:23:11.240 --> 00:23:16.840
I did want to give a quick shout out to one other thing because, Brian, we kind of – have we talked about GUIs on the show yet?

00:23:16.840 --> 00:23:17.480
I think so.

00:23:17.480 --> 00:23:18.920
Yeah, a couple times.

00:23:18.920 --> 00:23:20.600
A couple times.

00:23:20.600 --> 00:23:22.180
So we've gone around and around.

00:23:22.180 --> 00:23:29.300
So one of the major things coming for Python GUI space is Qt, the new version, the Qt for Python.

00:23:29.300 --> 00:23:31.000
That's like PySide 2 Reborn.

00:23:31.000 --> 00:23:36.420
So they have a webinar coming up where they're introducing all the features and stuff as it launches.

00:23:36.420 --> 00:23:37.780
I think that's in August.

00:23:37.780 --> 00:23:41.260
And so I put the link to sign up for the webinar if you want.

00:23:41.260 --> 00:23:42.200
Yeah, I'm already signed up.

00:23:42.200 --> 00:23:42.720
Yeah, me too.

00:23:42.720 --> 00:23:43.540
I'll see you there.

00:23:43.540 --> 00:23:44.720
That's awesome.

00:23:45.060 --> 00:23:47.280
Yeah, Nina, you got anything else going on you want to tell people about?

00:23:47.280 --> 00:24:02.900
Yeah, if you are going to be doing the Flask mega tutorial and you're not super happy with your IDE and you haven't checked out VS Code yet, there's a Python extension for VS Code that makes working in Flask really easy.

00:24:02.900 --> 00:24:09.580
And full disclosure, I work for Microsoft, but I also use it and enjoy it.

00:24:09.580 --> 00:24:12.980
So if you want to check it out, I can include a link in the show notes.

00:24:12.980 --> 00:24:13.560
Yeah, sure.

00:24:13.560 --> 00:24:14.080
Drop it in there.

00:24:14.080 --> 00:24:18.280
I use VS Code periodically when I'm working on individual files.

00:24:18.280 --> 00:24:21.480
And I know it does more than that, but I use PyCharm for some stuff.

00:24:21.480 --> 00:24:23.040
And then definitely VS Code.

00:24:23.040 --> 00:24:24.740
And it is getting much better.

00:24:24.740 --> 00:24:28.560
It's getting the auto-completion and all sorts of the linting.

00:24:28.560 --> 00:24:29.420
It's getting quite nice.

00:24:29.420 --> 00:24:35.880
If you think that stuff is nice, we have some really exciting announcements coming up just before EuroPython.

00:24:35.880 --> 00:24:36.880
Okay, awesome.

00:24:36.880 --> 00:24:38.720
You'll have to shoot us a note and we'll talk about them.

00:24:38.720 --> 00:24:41.020
It's something that no one else has.

00:24:41.020 --> 00:24:43.260
And that's about as much as I can say right now.

00:24:43.560 --> 00:24:45.040
Oh, that sounds exciting.

00:24:45.040 --> 00:24:45.680
Interesting.

00:24:45.680 --> 00:24:49.160
I think I can guess what it's going to be, but I won't speculate.

00:24:49.160 --> 00:24:50.180
I'll let you do the announcement.

00:24:50.180 --> 00:24:52.240
Awesome.

00:24:52.240 --> 00:24:53.200
And then anything else?

00:24:53.200 --> 00:24:54.300
That's it for me.

00:24:54.300 --> 00:24:54.840
All right.

00:24:54.840 --> 00:24:55.560
Well, that's a good one.

00:24:55.560 --> 00:24:55.940
Brian, you?

00:24:55.940 --> 00:24:56.420
No.

00:24:56.420 --> 00:24:57.420
It's good.

00:24:57.500 --> 00:24:59.880
Although I do have a, it's a lot out.

00:24:59.880 --> 00:25:03.220
I've got a whole bunch of interviews stacked up.

00:25:03.220 --> 00:25:07.360
I'm finally getting some time to do some editing and pushing out for testing code.

00:25:07.360 --> 00:25:09.160
And Nina's one of the people.

00:25:09.160 --> 00:25:15.180
So I've got an interview with Nina that who knows when it'll come out and maybe in a few weeks.

00:25:15.180 --> 00:25:16.140
Awesome.

00:25:16.320 --> 00:25:16.560
Yeah.

00:25:16.560 --> 00:25:24.580
Maybe if you all email and tweet it at Brian, he can be inspired to chop the audio up a little sooner.

00:25:24.580 --> 00:25:26.020
There you go.

00:25:26.020 --> 00:25:31.240
Or better yet, write a bot that every 30 minutes just tweets at Brian.

00:25:32.200 --> 00:25:32.460
Yeah.

00:25:32.460 --> 00:25:34.220
Sorry.

00:25:34.220 --> 00:25:36.420
Can we call it the pork bot?

00:25:36.420 --> 00:25:40.720
It just tweets the number of days.

00:25:40.720 --> 00:25:41.460
No, just kidding.

00:25:41.460 --> 00:25:42.420
I'm going to stop right now.

00:25:42.420 --> 00:25:44.880
Days since last episode.

00:25:44.880 --> 00:25:46.240
That was what I was thinking.

00:25:46.240 --> 00:25:46.660
That's right.

00:25:46.660 --> 00:25:51.380
I myself, I'm a little bit slow on this week on mine as well.

00:25:51.380 --> 00:25:53.380
So I'm not going to throw stones.

00:25:53.380 --> 00:25:53.900
Okay.

00:25:53.900 --> 00:25:54.400
All right.

00:25:54.400 --> 00:25:56.480
Well, Nina, thank you so much for being on the show.

00:25:56.480 --> 00:25:58.240
It's been a pleasure to talk with you.

00:25:58.240 --> 00:25:59.580
And Brian, thanks as always.

00:25:59.580 --> 00:26:00.000
Thank you.

00:26:00.000 --> 00:26:01.540
Thank you both so much.

00:26:01.540 --> 00:26:01.820
Yeah.

00:26:01.820 --> 00:26:02.100
Bye.

00:26:02.240 --> 00:26:02.560
Bye.

00:26:02.560 --> 00:26:05.780
Thank you for listening to Python Bytes.

00:26:05.780 --> 00:26:08.340
Follow the show on Twitter via at Python Bytes.

00:26:08.340 --> 00:26:11.220
That's Python Bytes as in B-Y-T-E-S.

00:26:11.220 --> 00:26:14.620
And get the full show notes at pythonbytes.fm.

00:26:14.620 --> 00:26:18.980
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:26:18.980 --> 00:26:21.680
We're always on the lookout for sharing something cool.

00:26:21.680 --> 00:26:25.080
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:25.080 --> 00:26:28.700
Thank you for listening and sharing this podcast with your friends and colleagues.

