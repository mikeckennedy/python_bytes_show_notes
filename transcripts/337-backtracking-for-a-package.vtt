WEBVTT

00:00:00.000 --> 00:00:13.560
Hello and welcome to Python bites where we deliver Python news and headlines directly to your earbuds. This is episode 337 recorded May 23 2023 and I am Brian Akin and I'm Michael Kennedy.


00:00:13.560 --> 00:00:24.080
I wanna thank everybody that's watching but anybody that's listening. I encourage you to at least once in a while drop by YouTube and see the upcoming


00:00:24.040 --> 00:00:28.840
list of events at pythonbytes.fm/live to be part of the audience.


00:00:28.840 --> 00:00:33.480
It's usually fun. It's usually Tuesdays at 11 Pacific time.


00:00:33.480 --> 00:00:35.880
Occasionally we switch.


00:00:35.880 --> 00:00:39.960
If you'd like to connect with us, we're all on Fosted On,


00:00:39.960 --> 00:00:43.040
at least the three of us, Michael and I on the show.


00:00:43.040 --> 00:00:45.040
It's mkennedy@fostedon,


00:00:45.040 --> 00:00:48.080
@brianokken, and @pythonbytes.


00:00:48.080 --> 00:00:52.240
And with that, let's jump into our first topic.


00:00:52.240 --> 00:00:54.240
Let's jump into it.


00:00:54.240 --> 00:00:56.240
It's not going to be a Ruff one.


00:00:56.240 --> 00:00:59.800
What is it? The first topic is Ruff,


00:00:59.800 --> 00:01:04.600
which is obviously Charlie Marsh's project.


00:01:04.600 --> 00:01:06.300
It's very successful. People know that.


00:01:06.300 --> 00:01:07.580
It's not exactly Ruff.


00:01:07.580 --> 00:01:09.700
It's a way to use Ruff.


00:01:09.700 --> 00:01:14.840
This one comes to us from John Hagan.


00:01:14.840 --> 00:01:19.960
John runs this project called Python Blueprint.


00:01:19.960 --> 00:01:24.880
So he's been playing around a lot with that project and PyCharm and Ruff,


00:01:24.880 --> 00:01:31.560
and realized that now there's a plug-in for all the JetBrains IDEs,


00:01:31.560 --> 00:01:33.480
most notably PyCharm,


00:01:33.480 --> 00:01:35.200
called just Ruff.


00:01:35.200 --> 00:01:41.000
The idea is that PyCharm has all these little squigglies and warnings,


00:01:41.000 --> 00:01:44.280
and maybe even more importantly, the auto-corrections.


00:01:44.280 --> 00:01:50.280
So it'll do things like if you wanted to replace double quotes


00:01:50.280 --> 00:01:52.480
or single quotes, you can just hit Alt Enter,


00:01:52.480 --> 00:01:55.400
and it'll suggest, hey, why don't we just do that for you?


00:01:55.400 --> 00:01:57.040
Things like that.


00:01:57.040 --> 00:02:00.320
And so this integrates all the Ruff functionality


00:02:00.320 --> 00:02:04.360
into that same basic UI system.


00:02:04.360 --> 00:02:06.800
You get little warnings or errors


00:02:06.800 --> 00:02:09.080
on the screen based on Ruff output.


00:02:09.080 --> 00:02:11.200
So it has inspection and highlighting.


00:02:11.200 --> 00:02:14.100
It can set it up so it runs Ruff on your code


00:02:14.100 --> 00:02:16.740
when you run reformat code or just hit the hotkey,


00:02:16.740 --> 00:02:18.580
Command Alt L, Control Alt L.


00:02:18.580 --> 00:02:21.700
It has the quick fixes that I was just talking about,


00:02:21.700 --> 00:02:23.260
and it will actually run,


00:02:23.260 --> 00:02:26.580
you can run Ruff --fix as an action,


00:02:26.580 --> 00:02:29.700
and you can even run that when a file is saved just automatically.


00:02:29.700 --> 00:02:31.640
If there's stuff wrong with it, just fix it Ruff,


00:02:31.640 --> 00:02:32.820
just do that for me.


00:02:32.820 --> 00:02:35.700
You can configure which version of Ruff is running.


00:02:35.700 --> 00:02:38.280
So basically, the plugin lets you specify,


00:02:38.280 --> 00:02:39.660
do you use a global one,


00:02:39.660 --> 00:02:41.420
maybe managed by pipx,


00:02:41.420 --> 00:02:43.900
do you use a local one in a virtual environment,


00:02:43.900 --> 00:02:46.940
I sort of feel like isolating that to a per project basis


00:02:46.940 --> 00:02:47.780
is the right thing.


00:02:47.780 --> 00:02:49.580
So that's what I'm doing, playing with this.


00:02:49.580 --> 00:02:51.920
And yeah, you can run it as a new process.


00:02:51.920 --> 00:02:55.880
You can specify a config option, like a set YAML.


00:02:55.880 --> 00:02:57.060
I'm not sure what the format that is,


00:02:57.060 --> 00:02:59.460
but whatever the Ruff config file format is


00:02:59.460 --> 00:03:01.040
so that you can say, you know what?


00:03:01.040 --> 00:03:04.240
I don't really care about the line length for this thing.


00:03:04.240 --> 00:03:08.000
So just ignore that and don't ever run that and so on.


00:03:08.000 --> 00:03:11.060
So yeah, you can even run it out of a WSL


00:03:11.060 --> 00:03:12.540
Windows subsystem for Linux.


00:03:12.540 --> 00:03:13.860
And there's some nice screenshots


00:03:13.860 --> 00:03:17.100
as all UI things should have in there.


00:03:17.100 --> 00:03:18.380
You can even see some of the settings


00:03:18.380 --> 00:03:19.500
if you want to try it out.


00:03:19.500 --> 00:03:23.340
So it has 4.8 out of five ratings


00:03:23.340 --> 00:03:25.700
and it looks pretty new, but yeah.


00:03:25.700 --> 00:03:28.100
Anyway, I think it looks like a good option.


00:03:28.100 --> 00:03:30.300
So people can check that out also.


00:03:30.300 --> 00:03:31.140
- That's pretty cool.


00:03:31.140 --> 00:03:32.220
- Yeah, I'm really excited about it.


00:03:32.220 --> 00:03:34.500
I've installed it and gonna give it a try.


00:03:34.500 --> 00:03:36.640
You can go check out the, it's open source, obviously.


00:03:36.640 --> 00:03:41.260
So you can go check out basically the repo for the plugin


00:03:41.260 --> 00:03:46.260
And John sent over to us, and I'm linking to this thing


00:03:46.260 --> 00:03:50.180
where it says you can add additional


00:03:50.180 --> 00:03:54.360
PyCharm specific instructions for both black and Ruff.


00:03:54.360 --> 00:03:56.860
So he's got this section that shows you basically


00:03:56.860 --> 00:04:00.720
how to integrate both black and Ruff at the same time


00:04:00.720 --> 00:04:02.940
as automatic code formatters in PyCharm


00:04:02.940 --> 00:04:04.960
using the file watchers plugin.


00:04:04.960 --> 00:04:07.080
So just follow along with the steps there.


00:04:07.080 --> 00:04:09.340
It even has knock support, but yeah, cool.


00:04:09.340 --> 00:04:11.140
So if that sounds interesting to you,


00:04:11.140 --> 00:04:13.900
So if you want to have kind of auto-Ruff,


00:04:13.900 --> 00:04:16.020
just built into PyCharm and you use PyCharm,


00:04:16.020 --> 00:04:17.020
then check this out.


00:04:17.020 --> 00:04:17.600
It looks cool.


00:04:17.600 --> 00:04:18.140
Thanks, John.


00:04:18.140 --> 00:04:18.940
Yeah, that's nice.


00:04:18.940 --> 00:04:24.620
And Ruff, of course, is written in Rust.


00:04:24.620 --> 00:04:28.780
And I'd like to talk a little bit more about Rust.


00:04:28.780 --> 00:04:31.340
So there was an article I ran across called--


00:04:31.340 --> 00:04:34.020
it's from Koblo's blog.


00:04:34.020 --> 00:04:35.980
Don't know if that's a first name or last name,


00:04:35.980 --> 00:04:38.180
but thanks, Koblo's.


00:04:38.180 --> 00:04:40.060
Writing Python like it's Rust.


00:04:40.060 --> 00:04:45.060
And what I, I haven't written Rust yet,


00:04:45.060 --> 00:04:47.500
but a little bit, anyway.


00:04:47.500 --> 00:04:50.100
The thing I liked about this article was really,


00:04:50.100 --> 00:04:54.220
basically, he's going from Rust back to Python,


00:04:54.220 --> 00:04:56.520
programming in both, and one of the things he misses


00:04:56.520 --> 00:04:59.420
is some of the safety that types give you.


00:04:59.420 --> 00:05:03.580
So he's discovered that he's changing,


00:05:03.580 --> 00:05:08.100
or they're changing how they're using types within Python.


00:05:08.100 --> 00:05:10.040
and I kind of liked some of the suggestions.


00:05:10.040 --> 00:05:11.520
I think these are some of the things


00:05:11.520 --> 00:05:13.580
I didn't even think of before.


00:05:13.580 --> 00:05:17.020
The obvious one, of course, is for function signatures.


00:05:17.020 --> 00:05:20.960
So we really want to, if it's not obvious,


00:05:20.960 --> 00:05:23.200
like there's an example with a find item


00:05:23.200 --> 00:05:26.520
with records in check, but what is that?


00:05:26.520 --> 00:05:28.640
What are those types of those things?


00:05:28.640 --> 00:05:31.600
So it's really helpful to your call,


00:05:31.600 --> 00:05:34.560
the people using your API to specify


00:05:34.560 --> 00:05:36.360
what the parameters look like


00:05:36.360 --> 00:05:37.960
what you expect them to look like.


00:05:37.960 --> 00:05:40.660
And there's so many options within Python now.


00:05:40.660 --> 00:05:44.760
And also that to, you know, return value.


00:05:44.760 --> 00:05:47.400
And here is an example, it's an optional item.


00:05:47.400 --> 00:05:49.500
So I actually hadn't thought about that,


00:05:49.500 --> 00:05:51.700
of like using optional as a return type.


00:05:51.700 --> 00:05:54.760
That's pretty cool, which means you can either,


00:05:54.760 --> 00:05:57.500
and you could probably do like item or none


00:05:57.500 --> 00:06:00.700
to say it can return none or something.


00:06:00.700 --> 00:06:03.200
That's a, it is good to,


00:06:03.200 --> 00:06:06.980
especially if it's possible to return none,


00:06:06.980 --> 00:06:08.840
good to have that in the types.


00:06:08.840 --> 00:06:11.280
So that's the low-hanging fruit.


00:06:11.280 --> 00:06:14.700
That's I think a lot of people have gotten there already.


00:06:14.700 --> 00:06:21.900
The other thing that I found recently is I've got some types that are like tuples or


00:06:21.900 --> 00:06:28.160
dictionaries or specifically a specific kind of dictionary like a string to any or even,


00:06:28.160 --> 00:06:31.940
I use named tuples a lot which are a little bit better than


00:06:31.940 --> 00:06:36.180
just your normal types, but his recommendation is


00:06:36.180 --> 00:06:39.380
to go ahead and use data classes because


00:06:39.380 --> 00:06:42.380
they're more descriptive, even if it's similar information.


00:06:42.380 --> 00:06:45.020
You can write up a little data class and then


00:06:45.020 --> 00:06:47.020
like in the example, instead of


00:06:47.020 --> 00:06:50.220
saying that you're returning a dictionary,


00:06:50.220 --> 00:06:53.020
go ahead and return like a person item,


00:06:53.020 --> 00:06:55.020
specific types.


00:06:55.020 --> 00:06:57.020
And I'm kind of used to that from C++


00:06:57.020 --> 00:06:59.520
of like writing little types because they're more


00:06:59.520 --> 00:07:02.520
They're more descriptive and they're easier to read sometimes.


00:07:02.520 --> 00:07:06.320
So bringing this into Python is kind of a cool idea.


00:07:06.320 --> 00:07:09.980
One of the things I thought was really awesome


00:07:09.980 --> 00:07:15.220
is this idea, there's an example using these packet types.


00:07:15.220 --> 00:07:21.020
And since I work with communications a lot, this really hit home.


00:07:21.020 --> 00:07:27.680
A packet might be either a header or payload or a trailer. This is a Rust example.


00:07:27.680 --> 00:07:31.520
But you can do the same sort of thing within Python to say,


00:07:31.520 --> 00:07:35.840
I can have different data types using data classes


00:07:35.840 --> 00:07:37.600
to specify what kind of information


00:07:37.600 --> 00:07:38.920
you're going to get from these.


00:07:38.920 --> 00:07:40.960
And then you can create a union type


00:07:40.960 --> 00:07:45.640
and have that be a different name, but related to everything.


00:07:45.640 --> 00:07:50.080
And I kind of love this idea of using a union type instead


00:07:50.080 --> 00:07:51.400
of using the ORs.


00:07:51.400 --> 00:07:53.920
I mean, using OR for types is good too,


00:07:53.920 --> 00:07:58.460
but combining that into a union type is pretty slick.


00:07:58.460 --> 00:08:01.160
>> Yeah, that is pretty interesting. I like that.


00:08:01.160 --> 00:08:02.960
Is that if you're going to receive, say,


00:08:02.960 --> 00:08:06.040
a packet off a network and it had first the header bit,


00:08:06.040 --> 00:08:07.080
and then the payload,


00:08:07.080 --> 00:08:08.760
and then the trailer or something like that?


00:08:08.760 --> 00:08:10.920
>> Yeah, or a function that


00:08:10.920 --> 00:08:14.240
takes that can count the bits in there or something like that.


00:08:14.240 --> 00:08:17.920
It can either be a header or payload or a trailer.


00:08:17.920 --> 00:08:20.440
You could do something different with those and


00:08:20.440 --> 00:08:23.000
having a union type is pretty cool.


00:08:23.000 --> 00:08:29.600
Now, within it, and here's an example of how do you deal with that,


00:08:29.600 --> 00:08:31.020
you'd still with inside,


00:08:31.020 --> 00:08:34.760
you'd have to either do pattern matching or if clauses.


00:08:34.760 --> 00:08:38.680
I've been using a lot more pattern matching lately to be able to just,


00:08:38.680 --> 00:08:40.520
this is great for you.


00:08:40.520 --> 00:08:42.080
You take the packet type,


00:08:42.080 --> 00:08:46.840
but then you can match it against either a header or payload or trailer.


00:08:46.840 --> 00:08:48.640
This is a really clean way to have


00:08:48.640 --> 00:08:52.120
union types and then unpack them with the pattern matching.


00:08:52.120 --> 00:08:54.120
It's a pretty cool way to deal with that.


00:08:54.120 --> 00:08:56.120
So, yeah, that is actually pretty clean.


00:08:56.120 --> 00:08:59.120
That's one of the better examples of pattern matching that


00:08:59.120 --> 00:09:01.120
I've seen lately.


00:09:01.120 --> 00:09:04.120
And this is just like a third of the article, but


00:09:04.120 --> 00:09:06.120
the rest of it does talk about different ways to


00:09:06.120 --> 00:09:11.120
basically, we have a lot of these tools within our, within Python now


00:09:11.120 --> 00:09:15.120
to make it more, to utilize data types


00:09:15.120 --> 00:09:19.120
that we're used to in other languages.


00:09:19.120 --> 00:09:21.520
and you can kind of write some really clean looking code


00:09:21.520 --> 00:09:24.080
and easier to read, so it's nice.


00:09:24.080 --> 00:09:26.020
- Yeah, very nice, I like it.


00:09:26.020 --> 00:09:29.380
So Kim out there has a question in the audience.


00:09:29.380 --> 00:09:32.720
Ryan, is there possibly some overlap with writing Python


00:09:32.720 --> 00:09:34.600
after writing a bunch of C as you do,


00:09:34.600 --> 00:09:38.680
as in same way Rust leads to some good ideas in Python?


00:09:38.680 --> 00:09:43.160
- Yeah, well, I mean, this person's writing it


00:09:43.160 --> 00:09:45.840
from the experience of Rust, but I'm looking at it going,


00:09:45.840 --> 00:09:48.180
this is a lot of the C++ stuff that I use.


00:09:48.180 --> 00:09:52.940
So it is, yeah, I'm looking at it.


00:09:52.940 --> 00:09:55.860
We're actually, my team is having a lot more fun


00:09:55.860 --> 00:09:58.360
with Python with the pattern matching statement


00:09:58.360 --> 00:10:01.520
because the, I know it can do a lot more stuff,


00:10:01.520 --> 00:10:04.620
but it really does, even if you're just using it


00:10:04.620 --> 00:10:09.060
to get away from a long list of if clauses


00:10:09.060 --> 00:10:11.340
and make it more like a switch statement,


00:10:11.340 --> 00:10:13.340
it is so much nicer.


00:10:13.340 --> 00:10:16.020
It's one of the little easy bits.


00:10:16.020 --> 00:10:16.900
- That's a good example.


00:10:16.900 --> 00:10:18.820
Yeah, Marco out there says, "Been thRuff a lot of rust,


00:10:18.820 --> 00:10:20.880
"missing mismatch."


00:10:20.880 --> 00:10:22.220
As well.


00:10:22.220 --> 00:10:23.920
All right, shall we move on?


00:10:23.920 --> 00:10:25.920
- Sure.


00:10:25.920 --> 00:10:28.160
- All right, well, go ahead with your first,


00:10:28.160 --> 00:10:29.860
I know you had an announcement as well,


00:10:29.860 --> 00:10:30.920
you wanted to give out.


00:10:30.920 --> 00:10:33.560
- No, I was just wondering, do we wanna,


00:10:33.560 --> 00:10:35.280
today's episode is not bRufft to you


00:10:35.280 --> 00:10:38.320
by an external sponsor, but it's bRufft to you by us.


00:10:38.320 --> 00:10:40.000
- It is bRufft to you by us.


00:10:40.000 --> 00:10:43.920
- And I'd like to hear some of the news from Michael.


00:10:43.920 --> 00:10:46.160
- Well, the big news for me,


00:10:46.160 --> 00:10:50.700
which I have put in as an extra now and then is the mobile apps.


00:10:50.700 --> 00:10:52.820
People go out there, download the mobile apps,


00:10:52.820 --> 00:10:55.820
talkbython.fm/apps, and in there,


00:10:55.820 --> 00:10:58.160
if you create an account or log in with your account,


00:10:58.160 --> 00:11:01.900
at a minimum, you'll find six different courses that are free.


00:11:01.900 --> 00:11:05.740
Just tap on them and you can take those courses right away within the mobile apps.


00:11:05.740 --> 00:11:07.280
If you get this super,


00:11:07.280 --> 00:11:09.880
super quickly, if you're one of the very,


00:11:09.880 --> 00:11:12.040
very prompt listeners,


00:11:12.040 --> 00:11:15.920
there's a chance that our Git course actually is free as well as


00:11:15.920 --> 00:11:18.000
part of a celebration of the mobile app launch,


00:11:18.000 --> 00:11:20.060
but that lasts for about eight hours


00:11:20.060 --> 00:11:20.980
from the time of recording,


00:11:20.980 --> 00:11:23.120
which will be a few less hours from the time


00:11:23.120 --> 00:11:26.520
I actually released this to the general public,


00:11:26.520 --> 00:11:27.360
not in a live stream,


00:11:27.360 --> 00:11:29.360
so you'll have to act fast on that one.


00:11:29.360 --> 00:11:30.920
But do check out the mobile apps


00:11:30.920 --> 00:11:33.240
if you're interested in Python courses.


00:11:33.240 --> 00:11:34.360
They're a great way to take it.


00:11:34.360 --> 00:11:35.240
They have some free ones,


00:11:35.240 --> 00:11:37.320
and they also are the best way to take ones


00:11:37.320 --> 00:11:38.200
that you paid for as well.


00:11:38.200 --> 00:11:40.720
So four months of work,


00:11:40.720 --> 00:11:44.080
finally really, really nice apps that we got out there.


00:11:44.080 --> 00:11:46.300
I'm listening to a couple, watching and listening


00:11:46.300 --> 00:11:48.680
to a couple courses right now.


00:11:48.680 --> 00:11:52.480
Not right now, but in some of my free time.


00:11:52.480 --> 00:11:54.800
I love the mobile app, it's working great.


00:11:54.800 --> 00:11:55.640
- Awesome, thanks.


00:11:55.640 --> 00:11:57.760
And you also have a thing to shout out as well, right?


00:11:57.760 --> 00:12:01.440
- Yeah, I wanted to let people know I wrote a book.


00:12:01.440 --> 00:12:03.720
No, you all know that.


00:12:03.720 --> 00:12:06.520
But the exciting bit, I just got this email this morning.


00:12:06.520 --> 00:12:10.440
So my book, Python Testing with PyTest, second edition.


00:12:10.440 --> 00:12:13.200
I've had a lot of great feedback of saying,


00:12:13.200 --> 00:12:17.240
I didn't, people saying they read the first one


00:12:17.240 --> 00:12:20.160
and it was good, but the second one really nailed,


00:12:20.160 --> 00:12:21.700
they really got some of the concepts in.


00:12:21.700 --> 00:12:23.700
So I'm glad that I wrote the second.


00:12:23.700 --> 00:12:26.680
So the news, I just got this this morning,


00:12:26.680 --> 00:12:28.960
an email from Pragmatic saying


00:12:28.960 --> 00:12:30.420
that there is a sale right now.


00:12:30.420 --> 00:12:32.200
So there's a whole bunch of other books,


00:12:32.200 --> 00:12:34.800
but Python Testing with PyTest is one of them.


00:12:34.800 --> 00:12:39.800
And if you use the coupon code SPRING2023,


00:12:39.800 --> 00:12:42.540
and you can save 50% off of the e-book.


00:12:42.540 --> 00:12:47.540
and that expires June 1st, so don't delay, spring 2023.


00:12:47.540 --> 00:12:49.740
- Awesome, spring into some testing.


00:12:49.740 --> 00:12:54.780
- Well, that's us, how about a new topic?


00:12:54.780 --> 00:12:56.820
- Yeah, thank you everyone for supporting the show


00:12:56.820 --> 00:12:58.140
by supporting our work.


00:12:58.140 --> 00:13:00.060
Let's talk about pip.


00:13:00.060 --> 00:13:02.640
So this is about a month old,


00:13:02.640 --> 00:13:05.580
I've been looking to grab a slot to talk about it,


00:13:05.580 --> 00:13:08.040
but there's been other sort of higher important stuff,


00:13:08.040 --> 00:13:09.140
but I do wanna point this out.


00:13:09.140 --> 00:13:12.580
So Zertex over on Reddit,


00:13:12.580 --> 00:13:14.580
who if you follow over to the GitHub


00:13:14.580 --> 00:13:16.860
and then from GitHub, I think to Twitter,


00:13:16.860 --> 00:13:19.040
maybe named Damien, not entirely clear,


00:13:19.040 --> 00:13:19.880
so I wanna give credit,


00:13:19.880 --> 00:13:22.020
but it's not easy to do,


00:13:22.020 --> 00:13:25.900
says that pip 23 or points out that pip 23.1


00:13:25.900 --> 00:13:29.140
was released with massive improvements to backtracking.


00:13:29.140 --> 00:13:31.300
And backtracking is an algorithm


00:13:31.300 --> 00:13:34.100
that is part of the requirements resolver.


00:13:34.100 --> 00:13:37.780
So if you say, you know, pip install requests,


00:13:37.780 --> 00:13:40.540
Flask and you know, something else.


00:13:40.540 --> 00:13:43.380
Pip has to say, okay, well, we know what those are,


00:13:43.380 --> 00:13:48.060
but both requests and Flask may depend on some library.


00:13:48.060 --> 00:13:48.900
I don't think that's true,


00:13:48.900 --> 00:13:50.740
but I don't think there's an intersection there,


00:13:50.740 --> 00:13:51.940
but you know, follow along.


00:13:51.940 --> 00:13:53.900
If they did, then it's got to figure out,


00:13:53.900 --> 00:13:57.340
well, okay, Flask requires this range of versions


00:13:57.340 --> 00:13:59.100
and request requires that range.


00:13:59.100 --> 00:14:01.580
So let me find a version that will satisfy


00:14:01.580 --> 00:14:03.600
both of those requirements, right?


00:14:03.600 --> 00:14:07.340
And there might be a transitive dependency upon that, right?


00:14:07.340 --> 00:14:10.700
Like that shared, potentially shared library itself


00:14:10.700 --> 00:14:13.220
has another thing that it depends on.


00:14:13.220 --> 00:14:16.780
So the article or not article, Reddit post says,


00:14:16.780 --> 00:14:19.940
for example, let's say you require packages A and B,


00:14:19.940 --> 00:14:21.880
the latest versions of A and B are downloaded,


00:14:21.880 --> 00:14:23.620
Pip checks their requirements,


00:14:23.620 --> 00:14:26.060
and it finds that A depends on C version two,


00:14:26.060 --> 00:14:27.820
but B depends on C version one.


00:14:27.820 --> 00:14:29.100
And so it's got to figure out like,


00:14:29.100 --> 00:14:33.620
well, can I go back and get a older version of A


00:14:33.620 --> 00:14:38.080
that would allow, say, C equals one to work, right?


00:14:38.080 --> 00:14:41.900
So prior to pip 20.3, the default process


00:14:41.900 --> 00:14:44.960
would allow pip to install conflicting requirements


00:14:44.960 --> 00:14:49.000
with a warning saying that this may or may not go well,


00:14:49.000 --> 00:14:51.160
we couldn't find one that was a good fit,


00:14:51.160 --> 00:14:52.880
but that's no longer an option.


00:14:52.880 --> 00:14:54.520
I have very mixed feelings about that.


00:14:54.520 --> 00:14:58.440
I love that it tries to be more strict and correct,


00:14:58.440 --> 00:15:02.720
but at the same time, the alternative or the trade-off is


00:15:02.720 --> 00:15:05.960
we guarantee correctness 100% of the time


00:15:05.960 --> 00:15:07.520
in terms of a version match


00:15:07.520 --> 00:15:09.580
for all the transitive dependencies


00:15:09.580 --> 00:15:11.360
across all the different things.


00:15:11.360 --> 00:15:12.360
And instead of saying,


00:15:12.360 --> 00:15:14.240
we'll install something that doesn't work


00:15:14.240 --> 00:15:17.240
or may not work because there might be some functionality


00:15:17.240 --> 00:15:18.620
that you may or may not interact with


00:15:18.620 --> 00:15:20.660
that is incompatible version-wise,


00:15:20.660 --> 00:15:21.500
we're just gonna say,


00:15:21.500 --> 00:15:23.680
your application cannot run.


00:15:23.680 --> 00:15:24.820
It's impossible for your app


00:15:24.820 --> 00:15:26.280
to use these dependencies and run.


00:15:26.280 --> 00:15:28.720
Personally, I would prefer to say,


00:15:28.720 --> 00:15:30.520
huge warning, this is not a great idea,


00:15:30.520 --> 00:15:32.040
but at least you can take a shot at it


00:15:32.040 --> 00:15:34.880
rather than it's impossible for you to run this application.


00:15:34.880 --> 00:15:37.800
But that's the trade-off pip made,


00:15:37.800 --> 00:15:41.080
and because of that, it has to be even better


00:15:41.080 --> 00:15:45.860
at tracking down these version matches as best it can,


00:15:45.860 --> 00:15:47.960
because the alternative is your application


00:15:47.960 --> 00:15:49.880
cannot be installed and run.


00:15:49.880 --> 00:15:52.820
So there's a lot of interesting history here,


00:15:52.820 --> 00:15:56.420
but it talks about some of the algorithms


00:15:56.420 --> 00:16:00.080
that have been used, and points out that Pip


00:16:00.080 --> 00:16:01.920
now separates out the resolution logic


00:16:01.920 --> 00:16:03.960
to a library called ResolveLib,


00:16:03.960 --> 00:16:06.520
and it was discovered that there was an error,


00:16:06.520 --> 00:16:08.580
logical error, that both for performance


00:16:08.580 --> 00:16:11.240
and for correctness as well,


00:16:11.240 --> 00:16:13.800
better backtracking technique called backjumping


00:16:13.800 --> 00:16:16.200
and an actual error that were fixed


00:16:16.200 --> 00:16:19.360
and implemented in ResolveLib and now come out in 23.1.


00:16:19.360 --> 00:16:22.520
So if you're using PIP, and if you're listening to us,


00:16:22.520 --> 00:16:25.080
there's a real good chance that you are,


00:16:25.080 --> 00:16:28.600
you wanna upgrade your pip to 23.1 or higher.


00:16:28.600 --> 00:16:31.360
I, whenever I install requirements,


00:16:31.360 --> 00:16:35.240
I just have like a multi-step macro or alias.


00:16:35.240 --> 00:16:36.840
The first thing it does is say,


00:16:36.840 --> 00:16:39.640
pip install dash dash upgrade pip.


00:16:39.640 --> 00:16:41.200
Now go try to do the other stuff.


00:16:41.200 --> 00:16:42.800
You know, it's like a concept for me,


00:16:42.800 --> 00:16:44.120
but I know not everyone does that.


00:16:44.120 --> 00:16:46.280
So when you see that little warning that says,


00:16:46.280 --> 00:16:49.200
hey, warning, your pip is out of date.


00:16:49.200 --> 00:16:52.880
If it's less than 23.1, you probably wanna take,


00:16:52.880 --> 00:16:56.520
take the advice and update it this time.


00:16:56.520 --> 00:16:58.480
Yeah, just this morning I got a message.


00:16:58.480 --> 00:17:00.800
Sorry, we cannot install your website


00:17:00.800 --> 00:17:02.800
because some, you know,


00:17:02.800 --> 00:17:05.920
Sentry requires this version of EuroLib 3


00:17:05.920 --> 00:17:09.160
and request requires a different version of EuroLib 3.


00:17:09.160 --> 00:17:11.120
So you can't run your app, goodbye.


00:17:11.120 --> 00:17:12.440
It's like, come on.


00:17:12.440 --> 00:17:16.840
I'm sure that it's not actually using the conflicting.


00:17:16.840 --> 00:17:20.240
And one thing that this does point out here is,


00:17:20.240 --> 00:17:22.720
traditionally, people haven't had to worry about this.


00:17:22.720 --> 00:17:25.360
So they'll, you'll see things like,


00:17:25.360 --> 00:17:28.520
one of the dependencies will say,


00:17:28.520 --> 00:17:34.640
It has to be exactly like 1.2.3 when really what it means is it's got to be lighter than


00:17:34.640 --> 00:17:37.680
1.2, you know, and they've just pinned it overly tight.


00:17:37.680 --> 00:17:38.680
Yeah.


00:17:38.680 --> 00:17:42.840
And you end up with this crash where, you know, for, for sure that it wouldn't actually


00:17:42.840 --> 00:17:45.340
be a problem in your situation.


00:17:45.340 --> 00:17:46.340
Like how do you know?


00:17:46.340 --> 00:17:50.560
Well, because before pip 20.1, it was running, you know, those kinds of things.


00:17:50.560 --> 00:17:54.980
And so there's this little bit of, you know, I know it was great that is trying to be more


00:17:54.980 --> 00:17:59.360
accurate and precise, but sometimes I'd rather have at least an option than none.


00:17:59.360 --> 00:18:02.880
And so, I don't know, it's, there's a whole interesting discussion down here.


00:18:02.880 --> 00:18:04.960
People can check it out in the comments.


00:18:04.960 --> 00:18:08.660
There, it devolves into a debate about Python two to three for a little while,


00:18:08.660 --> 00:18:09.280
which is weird.


00:18:09.280 --> 00:18:10.460
And then just skip that.


00:18:10.460 --> 00:18:12.960
That's not productive reading, but there's some interesting


00:18:12.960 --> 00:18:14.300
conversations going on there.


00:18:14.300 --> 00:18:18.620
And also before we move on really quick, Brian, there is, I think it's


00:18:18.620 --> 00:18:25.200
Damien as I said, points out that there is a PEP 658,


00:18:25.200 --> 00:18:30.480
which is accepted for what version of Python is this?


00:18:30.480 --> 00:18:31.600
I don't know, the 2021.


00:18:31.600 --> 00:18:35.320
So a couple of versions ago that allows the metadata.


00:18:35.320 --> 00:18:38.080
It used to be that pip would actually have to download and install


00:18:38.080 --> 00:18:41.000
a package just to see what the dependencies were.


00:18:41.000 --> 00:18:43.760
Now that's separated out the metadata so you can get


00:18:43.760 --> 00:18:47.900
a very simple small download without trying to do stuff to it to go,


00:18:47.900 --> 00:18:49.980
What does this actually need? This version needs what?


00:18:49.980 --> 00:18:53.900
Right? So there are some improvements that are being bRufft into here, but still, there we have it.


00:18:53.900 --> 00:18:59.820
Yeah, a couple of comments, which I kind of agree with, it'd be from Grant.


00:18:59.820 --> 00:19:05.540
It'd be nice if there was a warn unresolvable or something to keep the old behavior.


00:19:05.540 --> 00:19:07.140
I agree with Grant on that, yeah.


00:19:07.140 --> 00:19:13.700
So I guess this is a reminder to library authors as well,


00:19:13.700 --> 00:19:28.040
that your dependencies you might know that you have a lower limit on some dependency that you need you need version like one point two of this library or above think about it i prefer to have libraries


00:19:28.040 --> 00:19:35.540
in their dependencies the transit transit dependencies in a lower bound and not upper bound version because


00:19:35.500 --> 00:19:38.740
I mean, you don't know what the upper bound is,


00:19:38.740 --> 00:19:40.960
unless you do, unless there really is,


00:19:40.960 --> 00:19:44.400
there was a breaking change and you really know that there's a break.


00:19:44.400 --> 00:19:46.980
>> Right. The thing for me more is about,


00:19:46.980 --> 00:19:49.140
which I agree with you, Brian, and the comments,


00:19:49.140 --> 00:19:54.740
but it's about there might be an absolute 100 percent conflict.


00:19:54.740 --> 00:19:57.380
If this library tries to do,


00:19:57.380 --> 00:19:58.780
so for example, let's say,


00:19:58.780 --> 00:20:01.300
request tries to use Kerberos authentication


00:20:01.300 --> 00:20:03.260
instead of basic authentication.


00:20:03.260 --> 00:20:05.140
In that scenario, this other library


00:20:05.140 --> 00:20:08.360
does something crazy, it crashes unless it's high enough.


00:20:08.360 --> 00:20:10.940
If I'm never using that authentication mechanism,


00:20:10.940 --> 00:20:13.420
I'm never gonna, so like, yes, it is actually


00:20:13.420 --> 00:20:16.160
a break and change, but it's not a break and change for me.


00:20:16.160 --> 00:20:17.000
- Oh yeah.


00:20:17.000 --> 00:20:19.340
- In my use case of the combination of those two things.


00:20:19.340 --> 00:20:21.820
Right, like that's kind of where I've been


00:20:21.820 --> 00:20:22.720
thinking about this.


00:20:22.720 --> 00:20:23.940
- Oh yeah, interesting.


00:20:23.940 --> 00:20:26.140
Yeah, 'cause there's a lot of like,


00:20:26.140 --> 00:20:28.740
a lot of Swiss Army knife libraries out there.


00:20:28.740 --> 00:20:29.580
And you're not using all of them.


00:20:29.580 --> 00:20:31.380
- Right, and you probably, it's very unlikely


00:20:31.380 --> 00:20:33.740
you're hitting 100% surface area of a thing


00:20:33.740 --> 00:20:34.700
in its dependencies, right?


00:20:34.700 --> 00:20:35.540
Exactly.


00:20:35.540 --> 00:20:36.500
- Yeah, interesting.


00:20:36.500 --> 00:20:37.660
- Yep, yeah.


00:20:37.660 --> 00:20:40.460
All right, well, anyway, this is an improvement.


00:20:40.460 --> 00:20:42.460
I feel like we're kind of like debating


00:20:42.460 --> 00:20:44.860
the 20.3 debate at the field.


00:20:44.860 --> 00:20:47.220
This is an improvement on the stuff


00:20:47.220 --> 00:20:48.660
that has already been decided to be done.


00:20:48.660 --> 00:20:51.700
So 23.1 is a good way to go.


00:20:51.700 --> 00:20:52.900
- Yeah, it's good.


00:20:52.900 --> 00:20:58.060
Last item was a kind of a cool tool


00:20:58.060 --> 00:21:00.340
called Markdown Code Runner.


00:21:00.340 --> 00:21:03.620
So this did remind me of a tool


00:21:03.620 --> 00:21:06.720
that I've known before. So Markdown Code Runner


00:21:06.720 --> 00:21:11.660
is a package that automatically executes code blocks within a Markdown file.


00:21:11.660 --> 00:21:16.720
It can include hidden code blocks, so you can have


00:21:16.720 --> 00:21:21.420
the code blocks can be in comments, and so you can't see the Markdown file. It just runs it.


00:21:21.420 --> 00:21:25.120
So it runs the snippet, and then you can have the output show up somewhere.


00:21:25.120 --> 00:21:30.320
So this, in the example, let's run to an example.


00:21:30.320 --> 00:21:33.660
You've got a little code block that says Python,


00:21:33.660 --> 00:21:35.660
but instead of just Python, you say,


00:21:35.660 --> 00:21:37.820
you know, you got your back ticks and then you say,


00:21:37.820 --> 00:21:41.360
Python space markdown-code-runner.


00:21:41.360 --> 00:21:43.660
And then it runs the code in the code block.


00:21:43.660 --> 00:21:46.860
And then it pops it out. You've got another couple comments


00:21:46.860 --> 00:21:48.860
for output start and output end.


00:21:48.860 --> 00:21:51.780
And it'll throw the output in there.


00:21:51.780 --> 00:21:55.520
The kind of the neat thing is it's not just for Python, it's for Bash also.


00:21:55.520 --> 00:21:57.320
So you can run some Bash scripts.


00:21:57.320 --> 00:21:59.320
Like if you want to show a...


00:21:59.320 --> 00:22:05.480
I was thinking if you wanted to show what the directory looked like with the tree command,


00:22:05.480 --> 00:22:11.920
you can go ahead and run tree within a markdown file and run it or other stuff.


00:22:11.920 --> 00:22:16.240
Has several examples that they think would be neat.


00:22:16.240 --> 00:22:23.040
Things like, I don't know, like diagrams or tables or various things that you might want


00:22:23.040 --> 00:22:27.160
to output with Python visualizations, you can use that.


00:22:27.160 --> 00:22:28.160
>> That's really cool.


00:22:28.160 --> 00:22:30.660
It did kind of remind me of cog,


00:22:30.660 --> 00:22:33.320
but the syntax is a little different.


00:22:33.320 --> 00:22:35.320
So cog from Ned Batchelder


00:22:35.320 --> 00:22:37.720
is a similar sort of thing. You throw


00:22:37.720 --> 00:22:41.320
some code in place with some special tags.


00:22:41.320 --> 00:22:43.820
He uses like three bracket tags


00:22:43.820 --> 00:22:46.120
instead of an actual code block.


00:22:46.120 --> 00:22:49.320
So the thing I kind of like about this is


00:22:49.320 --> 00:22:52.020
a lot of times I actually do want to show the code block.


00:22:52.020 --> 00:22:55.120
So you can go ahead and show the code block and then run it.


00:22:55.120 --> 00:22:57.120
So that's neat.


00:22:57.120 --> 00:23:00.400
Some some it's fun. I tried it a little bit.


00:23:00.400 --> 00:23:03.200
There's an example of using rust so you can


00:23:03.200 --> 00:23:07.040
have actually running rust also. I couldn't get the rust example to work,


00:23:07.040 --> 00:23:10.000
but I got the the markdown in the or the


00:23:10.000 --> 00:23:13.120
the Python and the the bash examples to work. So


00:23:13.120 --> 00:23:17.200
actually pretty cool. Within the documentation it also talks about


00:23:17.200 --> 00:23:21.040
running this as a GitLab or yeah,


00:23:21.040 --> 00:23:25.400
GitHub CI snippet.


00:23:25.400 --> 00:23:29.640
That'd be a great place to do it is to just rerun,


00:23:29.640 --> 00:23:32.120
reproduce the code output from


00:23:32.120 --> 00:23:34.740
your readme on the new code. Cool idea.


00:23:34.740 --> 00:23:36.800
>> Yeah. My first thought was,


00:23:36.800 --> 00:23:39.240
I have a code example and it says the output is this,


00:23:39.240 --> 00:23:41.320
rather than trying to maintain those,


00:23:41.320 --> 00:23:42.720
just let it put the output there.


00:23:42.720 --> 00:23:44.520
But it also could be useful for just,


00:23:44.520 --> 00:23:46.640
I have a little Python bit of code that


00:23:46.640 --> 00:23:50.320
generates some other output that is useful.


00:23:50.320 --> 00:23:53.320
like here's the go thRuff and generate a little


00:23:53.320 --> 00:23:55.620
all the topics that it saw in the sub directory


00:23:55.620 --> 00:23:56.460
or something like that.


00:23:56.460 --> 00:23:57.480
- Oh yeah.


00:23:57.480 --> 00:23:59.760
- Yeah, like kind of just a markdown,


00:23:59.760 --> 00:24:01.440
like a macro within a markdown.


00:24:01.440 --> 00:24:03.640
- Generated table of contents or something.


00:24:03.640 --> 00:24:04.640
- Yeah, exactly.


00:24:04.640 --> 00:24:05.480
Something like that.


00:24:05.480 --> 00:24:06.300
- Cool. - Cool.


00:24:06.300 --> 00:24:07.140
That's all of it, right?


00:24:07.140 --> 00:24:08.400
That's all the main topics?


00:24:08.400 --> 00:24:10.560
- That is our main topics, yes.


00:24:10.560 --> 00:24:12.900
- All right, I have a few extras to throw out here.


00:24:12.900 --> 00:24:15.600
Let's jump over there real quick.


00:24:15.600 --> 00:24:19.960
So same person who pointed out the Ruff plugin,


00:24:19.960 --> 00:24:21.960
John Hagen also pointed out,


00:24:21.960 --> 00:24:25.240
I had talked previously about how I wish PIP


00:24:25.240 --> 00:24:29.000
would update itself when I create a virtual environment


00:24:29.000 --> 00:24:29.840
by default.


00:24:29.840 --> 00:24:32.720
So if I say Python 3-M VNV, VNV,


00:24:32.720 --> 00:24:34.480
the very next thing after activating it


00:24:34.480 --> 00:24:36.360
is your pip is out of date.


00:24:36.360 --> 00:24:38.000
I'm like, ah, geez, okay.


00:24:38.000 --> 00:24:41.120
So hence that's partly why my first thing to do


00:24:41.120 --> 00:24:43.640
is always upgrade it is just to not see the warning


00:24:43.640 --> 00:24:45.040
more than anything, honestly.


00:24:45.040 --> 00:24:47.980
But pointed out that since Python 3.9,


00:24:47.980 --> 00:24:51.300
there's an additional option you can pass


00:24:51.300 --> 00:24:55.060
to the virtual environment creation story.


00:24:55.060 --> 00:24:59.420
So instead of just dash mv and v in a directory,


00:24:59.420 --> 00:25:02.940
you can also pass dash dash upgrade depends,


00:25:02.940 --> 00:25:05.700
which will automatically do that upgrade


00:25:05.700 --> 00:25:07.260
of pip and dependencies as well.


00:25:07.260 --> 00:25:09.460
Pip set up tools to the latest version


00:25:09.460 --> 00:25:11.140
as part of creating the virtual environment.


00:25:11.140 --> 00:25:12.020
- Sweet.


00:25:12.020 --> 00:25:15.740
- Yeah, so nothing major, but quite nice, right?


00:25:15.740 --> 00:25:17.120
>> Yeah. I mean, I usually have that as


00:25:17.120 --> 00:25:19.120
a second step within my little macro.


00:25:19.120 --> 00:25:23.560
>> So do I. I was looking to replace that.


00:25:23.560 --> 00:25:25.280
I'm like, you know what? Not quite,


00:25:25.280 --> 00:25:27.920
because I also want to install things like


00:25:27.920 --> 00:25:32.200
pip-tools and a couple of other things that this doesn't include.


00:25:32.200 --> 00:25:34.040
So I'm like, I still would have to write that line,


00:25:34.040 --> 00:25:35.400
so I'll just leave it. But anyway,


00:25:35.400 --> 00:25:38.400
still it's really nice to have --upgradeDepth.


00:25:38.400 --> 00:25:42.640
You want it to have a shiny new virtual environment all the time.


00:25:42.640 --> 00:25:44.280
>> Yeah. One of the things I really love that


00:25:44.280 --> 00:25:49.840
came in a few versions ago is if you do the dash dash prompt and give it a dot,


00:25:49.840 --> 00:25:51.780
it uses the directory name.


00:25:51.780 --> 00:25:53.500
>> Yeah, that's really excellent. It names


00:25:53.500 --> 00:25:56.180
the virtual environment containing directory names.


00:25:56.180 --> 00:25:57.320
So it has the name of


00:25:57.320 --> 00:26:00.480
the virtual environment is the name of your project often, which is great.


00:26:00.480 --> 00:26:01.320
>> Yeah.


00:26:01.320 --> 00:26:04.120
>> All right. More things, more extras.


00:26:04.120 --> 00:26:07.960
One is PyCon South Africa.


00:26:07.960 --> 00:26:11.440
PyCon ZA will be held in Durban.


00:26:11.440 --> 00:26:16.440
And the most important part here is that


00:26:16.440 --> 00:26:19.880
the call for proposals is out.


00:26:19.880 --> 00:26:22.160
And when is the timeframe?


00:26:22.160 --> 00:26:23.480
Kim will have to let us know.


00:26:23.480 --> 00:26:26.080
I know he's out in the audience, but yeah.


00:26:26.080 --> 00:26:26.920
Oh, here we go.


00:26:26.920 --> 00:26:31.240
Talks need to be submitted by August 18th, 2023.


00:26:31.240 --> 00:26:32.720
And it's pretty good.


00:26:32.720 --> 00:26:36.000
I think it's both virtual and in-person.


00:26:36.000 --> 00:26:39.080
So some good options for people to attend


00:26:39.080 --> 00:26:40.720
and down in October.


00:26:40.720 --> 00:26:43.580
And it's pretty convenient for Africa, Europe, much of Asia,


00:26:43.580 --> 00:26:46.240
although less so for you and me, Brian.


00:26:46.240 --> 00:26:48.340
That's all right.


00:26:48.340 --> 00:26:49.800
- That's all right.


00:26:49.800 --> 00:26:50.640
- Yeah, cool.


00:26:50.640 --> 00:26:54.280
So people, if they wanna talk at PyCon South Africa,


00:26:54.280 --> 00:26:57.000
be sure to submit that talk.


00:26:57.000 --> 00:27:02.000
And Kim says that's a soft deadline, but sooner is better.


00:27:02.000 --> 00:27:03.000
- Okay.


00:27:03.000 --> 00:27:03.820
- Generally true.


00:27:03.820 --> 00:27:07.280
- I got a friend that's in the cybersecurity area


00:27:07.280 --> 00:27:09.480
and he's up all night anyway.


00:27:09.480 --> 00:27:10.560
So maybe-- - Yeah, there you go.


00:27:10.560 --> 00:27:11.600
So yeah, you could definitely do it


00:27:11.600 --> 00:27:14.400
if you just live off hours.


00:27:14.400 --> 00:27:15.240
- Yeah.


00:27:15.240 --> 00:27:17.240
- Real quick follow up from something before, Brian,


00:27:17.240 --> 00:27:18.440
and then we'll get to a joke.


00:27:18.440 --> 00:27:20.920
I had put out a call to everyone and say,


00:27:20.920 --> 00:27:22.640
"Help me find some off-road trails


00:27:22.640 --> 00:27:25.360
"for this adventure bike thing that I got into."


00:27:25.360 --> 00:27:26.960
I didn't really get any feedback.


00:27:26.960 --> 00:27:28.280
So I'm gonna instead pay it forward


00:27:28.280 --> 00:27:30.420
to other people out there who might be listening on a ride.


00:27:30.420 --> 00:27:33.900
So some really cool apps on X, off-road,


00:27:33.900 --> 00:27:34.960
you can go thRuff and find,


00:27:34.960 --> 00:27:36.160
you just click a spot on the map


00:27:36.160 --> 00:27:37.000
and it'll show you like,


00:27:37.000 --> 00:27:39.840
here's all the public legal trails for you to go


00:27:39.840 --> 00:27:43.140
tear around on and they're even rated like five out of 10


00:27:43.140 --> 00:27:46.420
or seven out of 10 with pictures and distance and challenges.


00:27:46.420 --> 00:27:48.700
So you can decide upfront whether or not


00:27:48.700 --> 00:27:52.300
you want to go down that path, I suppose.


00:27:52.300 --> 00:27:57.220
There's also a GAIA, G-A-I-A, which is a similar thing.


00:27:57.220 --> 00:27:58.980
And then back country discovery roads,


00:27:58.980 --> 00:28:02.620
which allow you to find like, how do I traverse my state,


00:28:02.620 --> 00:28:07.620
at least in the US or similar things in Europe with a TET.


00:28:07.620 --> 00:28:09.580
How do you say traverse all of Oregon,


00:28:09.580 --> 00:28:11.420
almost 100% off-road thRuff the forest


00:28:11.420 --> 00:28:12.560
and the mountains and the deserts.


00:28:12.560 --> 00:28:15.800
And so there's this app that has all these GPS trails.


00:28:15.800 --> 00:28:18.960
So anyway, I found some cool trails way up in the mountains


00:28:18.960 --> 00:28:21.020
using this app and can recommend it to people.


00:28:21.020 --> 00:28:22.120
- Neat, cool.


00:28:22.120 --> 00:28:23.460
- Yeah, cool.


00:28:23.460 --> 00:28:24.780
All right, a joke.


00:28:24.780 --> 00:28:25.920
You got a joke for us.


00:28:25.920 --> 00:28:28.720
- Yeah, I can't remember where I found this,


00:28:28.720 --> 00:28:33.720
but there's a website called userinyourface.com.


00:28:34.700 --> 00:28:39.700
So instead of user interface, user in your YER face.com.


00:28:39.700 --> 00:28:42.560
So you just have to fill it out.


00:28:42.560 --> 00:28:50.600
- Like an anti-pattern, a whole combination


00:28:50.600 --> 00:28:52.700
of anti-patterns into one UI.


00:28:52.700 --> 00:28:55.660
- Okay, so just start off right off the bat.


00:28:55.660 --> 00:28:57.700
So for people listening, I'm sorry,


00:28:57.700 --> 00:29:00.180
you're gonna have to watch this on the video or something.


00:29:00.180 --> 00:29:01.160
- Or visit the link.


00:29:01.160 --> 00:29:02.260
- Or go visit the link.


00:29:02.260 --> 00:29:05.140
It says, "Hi and welcome to User Interface,


00:29:05.140 --> 00:29:08.980
a challenge exploration of user interactions


00:29:08.980 --> 00:29:10.260
and design patterns.


00:29:10.260 --> 00:29:13.060
To play the game, simply fill in the form


00:29:13.060 --> 00:29:15.300
as fast and accurate as possible


00:29:15.300 --> 00:29:18.420
with a button that says, 'No,' big green button."


00:29:18.420 --> 00:29:21.540
So it says, "Please click, underscore,


00:29:21.540 --> 00:29:24.840
underlined click here to go to the next page


00:29:24.840 --> 00:29:26.460
and the next page is highlighted."


00:29:26.460 --> 00:29:29.260
And the trick is, the only thing that you can click on


00:29:29.260 --> 00:29:31.340
is the here button.


00:29:31.340 --> 00:29:34.000
It's not a button, it's just, that's it.


00:29:34.000 --> 00:29:37.000
Okay, and then it, okay, the site uses cookies.


00:29:37.000 --> 00:29:38.340
Is that a problem for you?


00:29:38.340 --> 00:29:41.020
Yes, and yes, doesn't do anything.


00:29:41.020 --> 00:29:42.400
Okay, no, not really.


00:29:42.400 --> 00:29:43.460
That goes away.


00:29:43.460 --> 00:29:44.940
Can we help?


00:29:44.940 --> 00:29:49.200
There's a help field with no enter.


00:29:49.200 --> 00:29:50.040
Just send the bottom.


00:29:50.040 --> 00:29:53.060
- What are those dreadful chat messages that pops up?


00:29:53.060 --> 00:29:55.000
- Yeah, it's great.


00:29:55.000 --> 00:29:58.240
Choose your password, you click on it,


00:29:58.240 --> 00:30:00.780
And the highlighted choose your path


00:30:00.780 --> 00:30:04.400
or the preview text is already there.


00:30:04.400 --> 00:30:06.300
So if you add your password to it,


00:30:06.300 --> 00:30:08.340
it doesn't delete the old one.


00:30:08.340 --> 00:30:11.000
You gotta like fill that out.


00:30:11.000 --> 00:30:12.600
Oh, you can't tab thRuff anything.


00:30:12.600 --> 00:30:15.360
So you have to click, oh, the email's bad too.


00:30:15.360 --> 00:30:16.540
- Yeah, instead of a placeholder,


00:30:16.540 --> 00:30:18.440
it's just gray, actual gray text.


00:30:18.440 --> 00:30:21.260
- Yeah, but you also can't delete it.


00:30:21.260 --> 00:30:27.680
Domain, oh, this one you have to delete also.


00:30:27.680 --> 00:30:31.680
And oh, there's a hurry up time is ticking.


00:30:31.680 --> 00:30:34.400
A pop-up, one minute before.


00:30:34.400 --> 00:30:36.720
Can I hit the, oh, the X isn't an X,


00:30:36.720 --> 00:30:39.140
it's a maximize button.


00:30:39.140 --> 00:30:42.120
Lock? - The copyrights are closed.


00:30:42.120 --> 00:30:44.260
- Lock, unlock, this doesn't do anything.


00:30:44.260 --> 00:30:46.920
Oh, the close is the copyright, right?


00:30:46.920 --> 00:30:49.260
That isn't obvious.


00:30:49.260 --> 00:30:50.120
Yeah, okay.


00:30:50.120 --> 00:30:52.680
I do not accept these terms, okay.


00:30:52.680 --> 00:30:56.480
Cancel, oh, I'm not, no, I meant okay.


00:30:56.480 --> 00:30:57.920
You sure you want to cancel?


00:30:57.920 --> 00:30:58.760
Cancel, cancel.


00:30:58.760 --> 00:31:00.860
Next.


00:31:00.860 --> 00:31:03.080
Oh, it says already selected.


00:31:03.080 --> 00:31:04.000
I do not accept.


00:31:04.000 --> 00:31:07.920
So you have to uncheck it to accept the terms and conditions.


00:31:07.920 --> 00:31:09.640
What are the terms?


00:31:09.640 --> 00:31:10.480
Yeah, okay.


00:31:10.480 --> 00:31:12.240
- Good luck getting out of that dialogue.


00:31:12.240 --> 00:31:15.080
You got to scroll down to accept them now to get out of it.


00:31:15.080 --> 00:31:16.680
(laughing)


00:31:16.680 --> 00:31:20.000
- Okay, well, we're stuck now 'cause you can't even.


00:31:20.000 --> 00:31:21.320
(laughing)


00:31:21.320 --> 00:31:22.720
This is terrible.


00:31:22.720 --> 00:31:24.640
Anyway, I did get thRuff it.


00:31:24.640 --> 00:31:28.540
The fastest time I have so far is like five minutes.


00:31:28.540 --> 00:31:33.480
- People are gonna speed run the in your face interface.


00:31:33.480 --> 00:31:36.280
- Yeah, I'd love to see a speed run to see how fast


00:31:36.280 --> 00:31:38.680
somebody can really get thRuff it in like a couple minutes.


00:31:38.680 --> 00:31:40.520
Please do a video, I wanna see that.


00:31:40.520 --> 00:31:45.840
- Jeff out in the audience says,


00:31:45.840 --> 00:31:48.120
I worked for the company that made that site.


00:31:48.120 --> 00:31:52.920
- Yeah, so yeah, the company looks like Veerheart.


00:31:52.920 --> 00:31:54.340
So nice.


00:31:54.340 --> 00:31:58.800
- All right, well, that's enough frustration for one day.


00:31:58.800 --> 00:31:59.720
- Indeed.


00:31:59.720 --> 00:32:01.240
- Thanks again for joining us


00:32:01.240 --> 00:32:03.160
and doing another Python Bytes.


00:32:03.160 --> 00:32:05.680
Thank you everybody for watching and listening


00:32:05.680 --> 00:32:09.560
and supporting us thRuff the courses


00:32:09.560 --> 00:32:11.400
and books and everything.


00:32:11.400 --> 00:32:13.800
And Patreon supporters, we still have Patreon supporters.


00:32:13.800 --> 00:32:15.200
Thank you, Patreon supporters.


00:32:15.200 --> 00:32:16.040
- Absolutely.


00:32:16.040 --> 00:32:16.860
- And thanks, Michael.


00:32:16.860 --> 00:32:17.700
- Thanks, Brian.

