WEBVTT

00:00:00.001 --> 00:00:05.080
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.080 --> 00:00:10.820
This is episode 337, recorded May 23rd, 2023.

00:00:10.820 --> 00:00:12.160
And I am Brian Okken.

00:00:12.160 --> 00:00:13.380
And I'm Michael Kennedy.

00:00:13.380 --> 00:00:18.460
I want to thank everybody that's watching, but anybody that's listening,

00:00:18.460 --> 00:00:22.100
I encourage you to at least once in a while drop by YouTube

00:00:22.100 --> 00:00:28.740
and see the upcoming list of events at pythonbytes.fm/live to be part of the audience.

00:00:28.740 --> 00:00:29.800
It's usually fun.

00:00:29.800 --> 00:00:33.340
It's usually Tuesdays at 11 Pacific time.

00:00:33.340 --> 00:00:35.680
Occasionally we switch.

00:00:35.680 --> 00:00:42.860
If you'd like to connect with us, we're all on Fostadon, or at least the three of us, Michael and I on the show.

00:00:42.860 --> 00:00:47.900
It's mkennedy at Fostadon and at Brian Okken and at Python Bytes.

00:00:47.900 --> 00:00:52.040
And with that, let's jump into our first topic.

00:00:52.040 --> 00:00:53.840
Let's jump into it.

00:00:53.840 --> 00:00:56.700
It's not going to be a rough one, is it?

00:00:56.700 --> 00:01:04.300
So the first topic is rough, which is obviously, you know, Charlie Marsh's project.

00:01:04.300 --> 00:01:05.440
It's very successful.

00:01:05.440 --> 00:01:06.240
People know that.

00:01:06.240 --> 00:01:07.500
It's not exactly rough.

00:01:07.500 --> 00:01:09.360
It's a way to use rough.

00:01:09.360 --> 00:01:14.440
And this one comes to us from John Hagen.

00:01:14.820 --> 00:01:19.720
John runs this project called Python Blueprint.

00:01:19.720 --> 00:01:34.840
So he's been playing around a lot with that project and PyCharm and rough and realized that now there's a plugin for all the JetBrains IDEs, most notably PyCharm, called just rough.

00:01:34.840 --> 00:01:43.960
And the idea is that, you know, PyCharm has all these little squigglies and warnings and maybe even more importantly, the auto corrections.

00:01:44.440 --> 00:01:54.980
So it'll do things like if you wanted to replace double quotes or single quotes, you can just hit Alt-Enter and it'll suggest, hey, why don't we just do that for you?

00:01:54.980 --> 00:01:55.340
All right.

00:01:55.340 --> 00:01:56.120
Things like that.

00:01:56.960 --> 00:02:03.880
And so this integrates all the rough functionality into that same basic UI system, right?

00:02:03.880 --> 00:02:09.060
You get little warnings or errors on the screen based on rough output.

00:02:09.060 --> 00:02:10.820
So it has inspection and highlighting.

00:02:11.020 --> 00:02:18.360
It can set it up so it runs rough on your code when you run reformat code or just hit the hot key, Command-Alt-L, Control-Alt-L.

00:02:18.360 --> 00:02:21.480
It has the quick fixes that I was just talking about.

00:02:21.480 --> 00:02:26.300
And it will actually run, you could run rough-fix as an action.

00:02:26.300 --> 00:02:29.440
And you can even run that when a file is saved just automatically.

00:02:29.440 --> 00:02:31.600
Like, hey, if there's stuff wrong with it, just fix it rough.

00:02:31.600 --> 00:02:32.660
Just do that for me.

00:02:32.660 --> 00:02:35.520
You can configure which version of rough is running.

00:02:35.520 --> 00:02:43.660
So basically the plugin lets you specify, do you use a global one, maybe managed by pipx, do you use a local one in a virtual environment?

00:02:43.660 --> 00:02:47.540
I sort of feel like isolating that to a per project basis is the right thing.

00:02:47.540 --> 00:02:49.300
So that's what I'm doing, playing with this.

00:02:49.300 --> 00:02:51.660
And yeah, you can run it as a new process.

00:02:51.660 --> 00:02:55.840
You can specify a config option, like a YAML.

00:02:55.840 --> 00:03:00.980
I'm not sure what the format that is, but whatever the rough config file format is so that you can say, you know what?

00:03:00.980 --> 00:03:03.900
I don't really care about the line length for this thing.

00:03:04.160 --> 00:03:07.900
So just ignore that and don't ever run that and so on.

00:03:07.900 --> 00:03:12.180
So yeah, you can even run it out of a WSL Windows subsystem for Linux.

00:03:12.180 --> 00:03:17.040
And there's some nice screenshots, as all UI things should have in there.

00:03:17.040 --> 00:03:19.280
You can even see some of the settings if you want to try it out.

00:03:19.280 --> 00:03:24.960
So it has 4.8 out of 5 ratings and looks pretty new.

00:03:24.960 --> 00:03:27.780
But yeah, anyway, I think it looks like a good option.

00:03:27.780 --> 00:03:29.580
So people can check that out.

00:03:29.580 --> 00:03:32.060
Also, yeah, I'm really excited about it.

00:03:32.060 --> 00:03:33.900
I've installed it and going to give it a try.

00:03:33.900 --> 00:03:36.540
You can go check out the, it's open source, obviously.

00:03:36.540 --> 00:03:40.660
So you can go check out basically the repo for the plugin.

00:03:41.400 --> 00:03:53.780
And John sent over to us and I'm linking to this thing where it says you can add additional PyCharm specific instructions for both black and rough.

00:03:53.780 --> 00:04:04.600
So he's got this section that shows you basically how to integrate both black and rough at the same time as automatic code formatters and PyCharm using the file watchers plugin.

00:04:04.960 --> 00:04:07.060
So just follow along with the steps there.

00:04:07.060 --> 00:04:08.200
And even has NOC support.

00:04:08.200 --> 00:04:09.260
But yeah, cool.

00:04:09.260 --> 00:04:17.000
So if that sounds interesting to you, if you want to have kind of auto rough just built into PyCharm and you use PyCharm, then check this out.

00:04:17.000 --> 00:04:17.320
It looks cool.

00:04:17.320 --> 00:04:17.800
Thanks, John.

00:04:18.160 --> 00:04:18.840
Yeah, that's nice.

00:04:18.840 --> 00:04:23.780
And rough, of course, is written in Rust.

00:04:24.580 --> 00:04:27.620
And I'd like to talk a little bit more about Rust.

00:04:27.620 --> 00:04:33.720
So there was an article I ran across called, it's from Koblo's blog.

00:04:33.720 --> 00:04:37.000
Don't know who, that's a first name or last name, but thanks, Koblo's.

00:04:37.860 --> 00:04:39.680
Writing Python like it's Rust.

00:04:39.680 --> 00:04:46.600
And what I haven't written Rust yet, but a little bit.

00:04:46.600 --> 00:04:55.000
Anyway, the thing I liked about this article was really basically he's going from Rust back to Python programming in both.

00:04:55.000 --> 00:04:59.140
And one of the things he misses is some of the safety that types give you.

00:04:59.140 --> 00:05:07.880
So he's discovered that he's changing or they're changing how they're using types within Python.

00:05:07.880 --> 00:05:09.900
And I kind of liked some of the suggestions.

00:05:09.900 --> 00:05:13.240
I think these are some of the things I didn't even think of before.

00:05:13.240 --> 00:05:16.720
The obvious one, of course, is for function signatures.

00:05:16.720 --> 00:05:24.440
So we really want to, if it's not obvious, like there's an example with a find item with records and check.

00:05:24.440 --> 00:05:26.060
But what is that?

00:05:26.060 --> 00:05:28.200
What are those types of those things?

00:05:28.580 --> 00:05:37.840
So it's really helpful to your call, the people using your API to specify what the parameters look like or what you expect them to look like.

00:05:37.840 --> 00:05:40.500
And there's so many options within Python now.

00:05:40.500 --> 00:05:44.700
And also that, too, return value.

00:05:44.700 --> 00:05:45.960
And here is an example.

00:05:45.960 --> 00:05:47.360
It's optional item.

00:05:47.360 --> 00:05:51.640
So I actually hadn't thought about that, of like using optional as a return type.

00:05:51.640 --> 00:05:52.380
That's pretty cool.

00:05:52.380 --> 00:05:58.020
Which means you can either, and you could probably do like item or none to say,

00:05:58.020 --> 00:06:00.560
it can return none or something.

00:06:00.560 --> 00:06:06.780
That's a, it is good to, especially if it's something, if it's possible to return none,

00:06:06.780 --> 00:06:08.500
good to have that in the types.

00:06:08.500 --> 00:06:11.060
So that's the low hanging fruit.

00:06:11.060 --> 00:06:14.400
That's, I think a lot of people have gotten there yet already.

00:06:14.400 --> 00:06:25.160
The other thing that I found recently is I've got some types that are like tuples or dictionaries or specifically a specific kind of dictionary,

00:06:25.160 --> 00:06:33.120
like a string to any or even I use name tuples a lot, which are a little bit better than just your normal types.

00:06:33.120 --> 00:06:40.400
But his recommendation is to go ahead and use data classes because they're more descriptive.

00:06:40.600 --> 00:06:44.260
even if it's similar information, you can write up a little data class.

00:06:44.260 --> 00:06:54.920
And then like in the example, instead of saying that you're returning a dictionary, go ahead and return like a person item, specific types.

00:06:54.920 --> 00:07:02.300
And I'm kind of used to that from C++ of like writing little types because they're more, they're more descriptive and they're easier to read sometimes.

00:07:02.800 --> 00:07:06.140
So bringing this into Python is kind of a cool idea.

00:07:06.140 --> 00:07:10.900
The other, one of the things I thought was really awesome is this idea.

00:07:10.900 --> 00:07:15.040
There's an example using the, where he's using like these packet types.

00:07:15.040 --> 00:07:26.000
And since I work with communications a lot, this, this really hit home of you have, you have, you can, a packet might be either a header or payload or a trailer.

00:07:26.000 --> 00:07:38.540
This is a Rust example, but you can do the same sort of thing within Python to say, I can have different data types using data classes to specify what kind of information you're going to get from these.

00:07:38.540 --> 00:07:45.500
And then you can create a union type and have a, have that be a different name, but related to everything.

00:07:45.500 --> 00:07:51.200
And I, I kind of love this idea of using a union type instead of, instead of using the ores.

00:07:51.200 --> 00:07:58.260
I mean, using or for types is good too, but combining that into a union type is pretty slick.

00:07:58.260 --> 00:07:58.800
Yeah.

00:07:58.800 --> 00:07:59.200
Yeah.

00:07:59.200 --> 00:08:00.240
That is pretty interesting.

00:08:00.240 --> 00:08:00.820
I like that.

00:08:00.820 --> 00:08:08.660
It's, so is that if you're going to receive say a packet off a network and it had first the header bit and then the payload and then the trailer or something like that?

00:08:08.660 --> 00:08:09.120
Yeah.

00:08:09.120 --> 00:08:14.060
Or I'm like a function that takes, that can like count the bits in there or something like that.

00:08:14.060 --> 00:08:17.340
And it can either be a header or a payload or a trailer.

00:08:18.060 --> 00:08:22.400
You could do something different with those and having a union type is pretty, pretty cool.

00:08:22.400 --> 00:08:28.720
Now within it, I'm not, and here's an example of what, how do you do with that?

00:08:28.720 --> 00:08:29.460
Deal with that.

00:08:29.460 --> 00:08:34.560
You'd still with inside, you'd have to either do pattern matching or if clauses.

00:08:34.560 --> 00:08:40.700
I've been using a lot more pattern matching lately to be able to just, you know, this is, this is great for you.

00:08:40.700 --> 00:08:46.700
You take the packet type, but then you can match it against either a header or payload or trailer.

00:08:46.700 --> 00:08:51.540
This is a really clean way to have union types and then unpack them with the pattern matching.

00:08:51.540 --> 00:08:54.080
It's a pretty cool way to deal with that.

00:08:54.080 --> 00:08:54.500
So.

00:08:54.500 --> 00:08:56.040
Yeah, that is actually pretty clean.

00:08:56.040 --> 00:09:00.600
That's one of the better examples of pattern matching that I've seen lately.

00:09:00.980 --> 00:09:18.180
And this is just like a third of the article, but the rest of it does talk about different ways to basically, we have a lot of these tools within our within Python now to make it more to utilize data types that we are used to in other languages.

00:09:18.180 --> 00:09:22.260
And you can kind of write some really clean looking code and easier to read.

00:09:22.260 --> 00:09:23.200
So it's nice.

00:09:23.200 --> 00:09:24.900
Yeah, very nice.

00:09:24.900 --> 00:09:25.560
I like it.

00:09:25.560 --> 00:09:28.860
So Kim out there has a question in the audience.

00:09:28.860 --> 00:09:34.440
Ryan, is there possibly some overlap with writing Python after writing a bunch of C as you do?

00:09:34.440 --> 00:09:37.640
As in same way, Rust leads to some good ideas in Python.

00:09:37.640 --> 00:09:38.880
Yeah.

00:09:38.880 --> 00:09:48.160
Well, I mean, that's, this, this is a, this person's writing it from the experience of Rust, but I'm looking at it going, this is a lot of the C++ stuff that I use.

00:09:48.160 --> 00:09:51.980
So it is, yeah, I'm looking at it.

00:09:51.980 --> 00:10:02.440
We're, we're actually, my team is being, is having a lot more fun with Python with the pattern matching statement because the, I know it can do a lot more stuff, but it really does.

00:10:02.440 --> 00:10:12.480
Even if you're just using it to, to get away from a long list of if clauses and make it more like a switch statement, it is so much nicer.

00:10:12.480 --> 00:10:15.320
It's one of the, well, easy bits.

00:10:15.320 --> 00:10:16.720
So that's a good example.

00:10:16.720 --> 00:10:16.800
Cool.

00:10:16.800 --> 00:10:17.020
Yeah.

00:10:17.020 --> 00:10:21.520
Marco out there says, but do a lot of Rust missing mismatch as well.

00:10:21.520 --> 00:10:22.540
All right.

00:10:22.540 --> 00:10:23.760
Shall we move on?

00:10:23.760 --> 00:10:25.120
Sure.

00:10:25.120 --> 00:10:26.120
All right.

00:10:26.120 --> 00:10:26.900
Well, go ahead.

00:10:26.900 --> 00:10:27.720
Go ahead with your first.

00:10:27.720 --> 00:10:29.760
I know you had an announcement as well.

00:10:29.760 --> 00:10:30.640
You wanted to give out.

00:10:30.640 --> 00:10:37.960
No, I was just wondering, do we want to, today's episode is not brought to you by an external sponsor, but it's brought to you by us.

00:10:38.460 --> 00:10:39.740
It is brought to you by us.

00:10:39.740 --> 00:10:43.240
And I'd like to hear some of the news from Michael.

00:10:43.680 --> 00:10:50.280
Well, the big news for me, which I have sort of put in as an extra now and then is the mobile apps.

00:10:50.580 --> 00:10:54.540
So people go out there, download the mobile apps, talkpython.fm/apps.

00:10:54.700 --> 00:11:01.800
And in there, if you create an account or log in with your account, at a minimum, you'll find like six different courses that are free.

00:11:01.800 --> 00:11:05.500
You just tap on them and you can take those courses right away within the mobile apps.

00:11:05.620 --> 00:11:17.940
If you get this super, super quickly, if you're one of the very, very prompt listeners, there's a chance that our Git course actually is free as well as part of a celebration of the mobile app launch.

00:11:17.940 --> 00:11:27.160
But that lasts for about eight hours from the time of recording, which will be a few less hours from the time I actually release this to the general public, not in the live stream.

00:11:27.160 --> 00:11:29.320
So you'll have to act fast on that one.

00:11:29.320 --> 00:11:32.900
But do check out the mobile apps if you're interested in Python courses.

00:11:32.900 --> 00:11:34.300
They're a great way to take it.

00:11:34.300 --> 00:11:38.160
They have some free ones and they also are the best way to take ones that you paid for as well.

00:11:38.160 --> 00:11:40.200
So four months of work.

00:11:40.200 --> 00:11:43.820
Finally, really, really nice apps that we got out there.

00:11:43.820 --> 00:11:48.300
I'm listening to a couple, watching and listening to a couple, a couple of courses right now.

00:11:48.300 --> 00:11:52.340
Not right now, but in some of my free time.

00:11:52.340 --> 00:11:53.740
I love the mobile app.

00:11:53.740 --> 00:11:54.540
It's working great.

00:11:54.540 --> 00:11:55.040
Awesome.

00:11:55.040 --> 00:11:55.360
Thanks.

00:11:55.360 --> 00:11:57.500
And you also have a thing to shout out as well, right?

00:11:57.500 --> 00:11:58.040
Yeah.

00:11:58.040 --> 00:12:00.860
I wanted to let people know I wrote a book.

00:12:00.860 --> 00:12:03.020
No, you all know that.

00:12:03.380 --> 00:12:06.460
But the exciting bit, I just got this email this morning.

00:12:06.460 --> 00:12:09.640
So my book, Python Testing with pytest, second edition.

00:12:10.200 --> 00:12:14.060
I've had a lot of great feedback of saying I didn't.

00:12:14.060 --> 00:12:18.020
People saying they read the first one and it was good.

00:12:18.020 --> 00:12:19.800
But the second one really nailed.

00:12:19.800 --> 00:12:21.620
They really got some of the concepts in.

00:12:21.620 --> 00:12:23.360
So I'm glad that I wrote the second.

00:12:23.360 --> 00:12:30.340
So the news, I just got this morning, an email from Pragmatic saying that there is a sale right now.

00:12:30.460 --> 00:12:34.520
So there's a whole bunch of other books, but Python Testing with pytest is one of them.

00:12:34.520 --> 00:12:42.440
And if you use the coupon code spring 2023, and you can save 50% off of the e-book.

00:12:42.440 --> 00:12:43.280
And that's up.

00:12:43.280 --> 00:12:44.980
That expires June 1st.

00:12:44.980 --> 00:12:45.940
So don't delay.

00:12:45.940 --> 00:12:47.160
Spring 2023.

00:12:47.160 --> 00:12:48.120
Awesome.

00:12:48.120 --> 00:12:49.360
Let's bring you to some testing.

00:12:49.360 --> 00:12:52.620
Well, that's us.

00:12:52.620 --> 00:12:54.580
How about a new topic?

00:12:54.740 --> 00:12:57.700
Yeah, thank you everyone for supporting the show by supporting our work.

00:12:57.700 --> 00:12:59.580
Let's talk about pip.

00:12:59.580 --> 00:13:02.500
So this is about a month old.

00:13:02.500 --> 00:13:07.960
I've been looking to grab a slot to talk about it, but there's been other sort of higher important stuff.

00:13:07.960 --> 00:13:09.060
But I do want to point this out.

00:13:09.060 --> 00:13:17.760
So Zyrtex over on Reddit, who if you follow over to the GitHub and then from GitHub, I think to Twitter, maybe named Damien.

00:13:17.760 --> 00:13:18.920
Not entirely clear.

00:13:18.920 --> 00:13:20.960
So I want to give credit, but it's not easy to do.

00:13:21.980 --> 00:13:28.980
It says that pip 23 or points out that pip 23.1 was released with massive improvements to backtracking.

00:13:28.980 --> 00:13:33.680
And backtracking is an algorithm that is part of the requirements resolver.

00:13:33.680 --> 00:13:40.240
So if you say, you know, pip install requests Flask and, you know, something else.

00:13:40.240 --> 00:13:43.080
PIP has to say, okay, well, we know what those are.

00:13:43.080 --> 00:13:47.800
But both requests and Flask may depend on some library.

00:13:47.800 --> 00:13:50.700
I don't think that's true, but I don't think there's an intersection there.

00:13:50.700 --> 00:13:51.800
But, you know, follow along.

00:13:51.800 --> 00:13:59.020
If they did, then it's got to figure out, well, okay, Flask requires this range of versions and request requires that range.

00:13:59.020 --> 00:14:02.600
So let me find a version that will satisfy both of those requirements.

00:14:02.600 --> 00:14:03.100
Right.

00:14:03.400 --> 00:14:07.260
And there might be a transit of dependency upon that, right?

00:14:07.260 --> 00:14:12.600
Like that, that shared, potentially shared library itself has another thing that it depends on.

00:14:13.080 --> 00:14:19.560
So the article or not article, Reddit post says, you know, for example, let's say you require package A and B.

00:14:19.560 --> 00:14:21.720
The latest versions of A and B are downloaded.

00:14:21.720 --> 00:14:27.720
PIP checks their requirements and it finds that A depends on C version 2, but B depends on C version 1.

00:14:27.840 --> 00:14:37.560
And so it's got to figure out, like, well, can I go back and get an older version of A that would allow, say, C equals 1 to work, right?

00:14:37.720 --> 00:14:48.900
So prior to pip 20.3, the default process would allow pip to install conflicting requirements with a warning saying that this may or may not go well.

00:14:48.900 --> 00:14:49.980
We couldn't find one.

00:14:49.980 --> 00:14:50.940
That was a good fit.

00:14:51.140 --> 00:14:52.520
But that's no longer an option.

00:14:52.520 --> 00:14:54.460
I have very mixed feelings about that.

00:14:54.460 --> 00:14:57.760
I love that it tries to be more strict and correct.

00:14:57.760 --> 00:15:10.940
But at the same time, the alternative or the tradeoff is we guarantee correctness 100% of the time in terms of a version match for all the transitive dependencies across all the different things.

00:15:11.100 --> 00:15:22.760
And instead of saying, well, install something that doesn't work or may not work because there might be some functionality that you may or may not interact with that is incompatible version-wise, we're just going to say your application cannot run.

00:15:22.760 --> 00:15:26.080
It's impossible for your app to use these dependencies and run.

00:15:26.080 --> 00:15:34.520
Personally, I would prefer to say, huge warning, this is not a great idea, but at least you can take a shot at it rather than it's impossible for you to run this application.

00:15:34.520 --> 00:15:37.520
But, you know, that's the tradeoff pip made.

00:15:37.520 --> 00:15:48.960
And because of that, it has to be even better at tracking down these version matches as best it can because the alternative is your application cannot be installed and run.

00:15:48.960 --> 00:16:03.640
So there's a lot of interesting history here, but it talks about some of the algorithms that have been used and points out that pip now separates out the resolution logic into a library called ResolveLib.

00:16:03.640 --> 00:16:19.220
And it was discovered that there was an error, logical error that both for performance and for correctness as well, you know, better backtracking technique called back jumping and an actual error that were fixed and implemented in ResolveLib and now come out in 23.1.

00:16:19.220 --> 00:16:23.880
So if you're using pip and if you're listening to us, there's a real good chance that you are.

00:16:24.760 --> 00:16:27.760
You want to upgrade your pip to 23.1 or higher.

00:16:27.760 --> 00:16:34.940
Whenever I install requirements, I just have like a multi-step macro or alias.

00:16:34.940 --> 00:16:38.900
The first thing it does is say, pip install --upgrade pip.

00:16:38.900 --> 00:16:44.100
Now go try to do the other stuff, you know, just it's like a concept for me, but I know not everyone does that.

00:16:44.200 --> 00:16:48.600
So when you see that little warning that says, hey, warning, your pip is out of date.

00:16:48.600 --> 00:16:55.820
If it's less than 23.1, you probably want to take that advice and update it this time.

00:16:55.820 --> 00:16:56.620
Yeah.

00:16:56.620 --> 00:16:56.660
Yeah.

00:16:56.660 --> 00:16:58.100
Just this morning, I got a message.

00:16:58.100 --> 00:17:08.980
Sorry, we cannot install your website because some, you know, Sentry requires this version of EuroLib 3 and Request requires a different version of EuroLib 3.

00:17:08.980 --> 00:17:10.380
So you can't run your app.

00:17:10.380 --> 00:17:10.900
Goodbye.

00:17:10.900 --> 00:17:12.280
It's like, come on.

00:17:12.280 --> 00:17:16.680
I'm sure that it's not actually using the conflicting.

00:17:16.680 --> 00:17:22.600
And one thing that this does point out here is traditionally people haven't had to worry about this.

00:17:22.600 --> 00:17:31.340
So you'll see things like one of the dependencies will say it has to be exactly like 1.2.3.

00:17:31.340 --> 00:17:37.840
When really what it means is it's got to be lighter than 1.2, you know, and they've just pinned it overly tight.

00:17:38.100 --> 00:17:44.700
And you end up with this crash where, you know, for sure that it wouldn't actually be a problem in your situation.

00:17:44.700 --> 00:17:45.940
Like, how do you know?

00:17:45.940 --> 00:17:50.440
Well, because before pip 20.1, it was running, you know, those kinds of things.

00:17:50.440 --> 00:17:59.380
And so there's this little bit of, you know, I know it's great that it's trying to be more accurate and precise, but sometimes I'd rather have at least an option than none.

00:17:59.380 --> 00:18:02.900
And so, I don't know, there's a whole interesting discussion down here.

00:18:02.900 --> 00:18:04.940
People can check it out in the comments.

00:18:05.160 --> 00:18:09.260
It devolves into a debate about Python 2.3 for a little while, which is weird.

00:18:09.260 --> 00:18:10.460
And then just skip that.

00:18:10.460 --> 00:18:11.760
That's not productive reading.

00:18:11.760 --> 00:18:14.280
But there's some interesting conversations going on there.

00:18:14.280 --> 00:18:27.660
And also, before we move on really quick, Brian, there is, I think it's Damien, as I said, points out that there is a PEP 658, which is accepted.

00:18:28.080 --> 00:18:30.280
Or what version of Python is this?

00:18:30.280 --> 00:18:31.340
I don't know, 2021.

00:18:31.340 --> 00:18:32.880
So a couple versions ago.

00:18:32.880 --> 00:18:34.960
That allows the metadata.

00:18:34.960 --> 00:18:40.780
It used to be that pip would actually have to download and install a package just to see what the dependencies were.

00:18:40.780 --> 00:18:48.860
And now that's separated out the metadata so you can get a very simple, small download without trying to do stuff to it to go, what does this actually need?

00:18:48.860 --> 00:18:49.860
This version needs what?

00:18:49.860 --> 00:18:50.260
Right.

00:18:50.320 --> 00:18:53.820
So there are some improvements that are being brought into here, but still, there we have it.

00:18:53.820 --> 00:18:54.320
Yeah.

00:18:54.320 --> 00:18:57.600
A couple of comments, which I kind of agree with.

00:18:57.600 --> 00:18:59.780
It'd be from Grant.

00:18:59.780 --> 00:19:05.360
It'd be nice if there was a worn unresolvable or something to keep the old behavior.

00:19:05.360 --> 00:19:06.880
I agree with Grant on that, yeah.

00:19:06.880 --> 00:19:21.200
So I guess this is a reminder to library authors as well that your dependencies, you might know that you have a lower limit on some dependency that you need.

00:19:21.200 --> 00:19:24.040
You need version like 1.2 of this library or above.

00:19:24.040 --> 00:19:24.820
Think about it.

00:19:24.820 --> 00:19:39.440
I prefer to have libraries in their dependencies, the transitive dependencies in a lower bound and not upper bound version because, I mean, you don't know what the upper bound is unless you do.

00:19:39.440 --> 00:19:43.880
Unless there really is, there was a breaking change and you really know that there's a break.

00:19:44.540 --> 00:19:45.000
Right.

00:19:45.000 --> 00:19:54.120
The thing for me more is about, which I agree with you, Brian, and the comments, but it's about like there might be an absolute 100% conflict.

00:19:54.120 --> 00:20:03.000
Like if this library tries to do, so for example, let's say like request tries to use Kerberos authentication instead of basic authentication.

00:20:03.000 --> 00:20:06.080
And in that scenario, this other library does something crazy.

00:20:06.080 --> 00:20:08.120
It crashes unless it's high enough.

00:20:08.120 --> 00:20:11.760
If I'm never using that authentication mechanism, I'm never going to.

00:20:11.840 --> 00:20:15.760
So like, yes, it is actually a break and change, but it's not a break and change for me.

00:20:15.760 --> 00:20:16.500
Oh, yeah.

00:20:16.500 --> 00:20:19.500
In my use case of that, the combination of those two things, right?

00:20:19.500 --> 00:20:22.540
Like that's, that's kind of where I've been thinking about this.

00:20:22.540 --> 00:20:23.100
Oh, yeah.

00:20:23.100 --> 00:20:23.560
Interesting.

00:20:23.560 --> 00:20:24.120
Yeah.

00:20:24.120 --> 00:20:29.400
Because there's a lot of like a lot of Swiss Army knife libraries out there and you're not using all of them.

00:20:29.400 --> 00:20:34.640
You probably, it's very unlikely you're hitting 100% surface area of a thing and its dependencies, right?

00:20:34.640 --> 00:20:35.000
Exactly.

00:20:35.000 --> 00:20:35.600
Yeah.

00:20:35.600 --> 00:20:36.180
Interesting.

00:20:36.180 --> 00:20:36.660
Yeah.

00:20:36.660 --> 00:20:37.020
Yeah.

00:20:37.020 --> 00:20:37.820
All right.

00:20:37.820 --> 00:20:39.960
Well, anyway, this is, this is an improvement.

00:20:39.960 --> 00:20:43.920
I feel like we're kind of like debating the 20.3 debate.

00:20:43.920 --> 00:20:48.600
This is an improvement on the stuff that's already been decided to be done.

00:20:48.600 --> 00:20:51.540
So 23.1 is a good way to go.

00:20:51.540 --> 00:20:51.900
Yeah.

00:20:51.900 --> 00:20:52.680
It's good.

00:20:52.680 --> 00:20:59.920
Last item was a kind of a cool tool called Markdown Code Runner.

00:21:00.420 --> 00:21:04.720
So this, this did remind me of a tool that I've known before.

00:21:04.720 --> 00:21:11.580
So the Markdown Code Runner is a package that automatically executes code blocks within a Markdown file.

00:21:11.580 --> 00:21:15.160
It's, it can include hidden code blocks.

00:21:15.160 --> 00:21:18.360
So you can have, the code blocks can be in comments.

00:21:18.360 --> 00:21:20.660
And so you can't see it in the Markdown file.

00:21:20.660 --> 00:21:21.520
It just runs it.

00:21:21.660 --> 00:21:24.980
So it runs the snippet and then you can have the output show up somewhere.

00:21:24.980 --> 00:21:30.020
So this, in the example, let's run to an example.

00:21:30.020 --> 00:21:41.180
You've got a little, a code block that says Python, but instead of just Python, you say, you know, you got your back ticks and then you say Python space Markdown dash code dash runner.

00:21:41.180 --> 00:21:44.900
And then it runs the code in the code block and then it pops it out.

00:21:44.900 --> 00:21:51.660
You've got another couple of comments for output start and output end, and it'll throw the output in there.

00:21:51.660 --> 00:21:53.960
The kind of the neat thing is it's not just for Python.

00:21:53.960 --> 00:21:55.340
It's for bash also.

00:21:55.340 --> 00:21:57.080
So you can run some bash scripts.

00:21:57.080 --> 00:22:11.160
Like if you want to show a, I was thinking if you wanted to show what the, the, the directory looked like with the tree command, you can go ahead and run tree within, within a Markdown file and run it or other stuff.

00:22:11.160 --> 00:22:15.900
Has, has, has several examples that they think would be neat.

00:22:15.900 --> 00:22:25.440
Things like, oh, I don't know, like diagrams or tables or various things that you might want to output with Python visualizations.

00:22:25.440 --> 00:22:26.520
You can use that.

00:22:26.520 --> 00:22:27.920
This is really cool.

00:22:27.920 --> 00:22:28.400
Yeah.

00:22:28.400 --> 00:22:32.860
It did kind of remind me of cog, but the, the syntax is a little different.

00:22:32.860 --> 00:22:37.080
So cog from Ned Batchelder has, is a similar sort of thing.

00:22:37.280 --> 00:22:41.260
You throw, you throw some code in, in place with some special tags.

00:22:41.260 --> 00:22:45.980
He uses like a three bracket tags instead of an actual code block.

00:22:45.980 --> 00:22:51.980
So the thing I kind of like about this is a lot of times I actually do want to show the code block.

00:22:51.980 --> 00:22:55.060
So you can go ahead and show the code block and then run it.

00:22:55.060 --> 00:22:55.860
So that's neat.

00:22:55.860 --> 00:22:59.300
So some, some, it's fun.

00:22:59.300 --> 00:23:00.220
I tried it a little bit.

00:23:00.220 --> 00:23:02.300
There's an example of using rust.

00:23:02.300 --> 00:23:05.400
So you can have actually running rust also.

00:23:05.400 --> 00:23:12.740
I couldn't get the rust example to work, but I got the, the markdown and the, or the, the Python and the, the bash examples to work.

00:23:12.740 --> 00:23:14.620
So actually pretty cool.

00:23:14.620 --> 00:23:24.720
The, within the documentation, it also talks about running this as a Git lab or a, yeah, get, get, get, github, a CI snippet.

00:23:24.720 --> 00:23:33.500
So, and that, that'd be a great place to do it is to just rerun your, rerun, like reproduce the code output from your readme on the new code.

00:23:33.500 --> 00:23:34.580
So kind of a cool idea.

00:23:34.580 --> 00:23:35.060
Yeah.

00:23:35.540 --> 00:23:42.500
My first thought was, Oh, I have a code example and it says the output is this, like rather than trying to maintain those, just let it put the output there.

00:23:42.500 --> 00:23:50.200
But it's also could be useful for just, I have a little Python bit of code that generates some other output that is, is useful, right?

00:23:50.200 --> 00:23:56.640
Like here's the go through and generate a little, all the topics that it saw in the subjectry or something like that.

00:23:56.640 --> 00:23:57.120
Yeah.

00:23:57.120 --> 00:23:57.660
Yeah.

00:23:57.660 --> 00:24:01.160
Like kind of a, just a markdown, like a macro within a markdown.

00:24:01.160 --> 00:24:02.960
Generate a table of contents or something.

00:24:02.960 --> 00:24:04.240
Yeah, exactly.

00:24:04.240 --> 00:24:05.180
Something like that.

00:24:05.180 --> 00:24:05.480
Cool.

00:24:05.480 --> 00:24:05.840
Cool.

00:24:05.840 --> 00:24:06.860
That's all of it, right?

00:24:06.860 --> 00:24:08.200
That's all the main topics.

00:24:08.200 --> 00:24:09.680
That is our main topics.

00:24:09.680 --> 00:24:10.020
Yes.

00:24:10.020 --> 00:24:10.740
All right.

00:24:10.740 --> 00:24:12.780
I have a few extras to throw out here.

00:24:12.780 --> 00:24:15.100
Let's jump over there real quick.

00:24:15.100 --> 00:24:29.480
So same person who pointed out the rough plugin, John Hagan also pointed out, you know, I had talked previously about how I wish pip would update itself when I create a virtual environment by default.

00:24:29.480 --> 00:24:30.480
So if I say Python 3.0.

00:24:30.480 --> 00:24:30.860
So if I say Python 3.0.

00:24:30.860 --> 00:24:31.440
So if I say Python 3.0.m.

00:24:31.440 --> 00:24:36.000
V and V and V, the very next thing after activating it is your pip is out of date.

00:24:36.000 --> 00:24:37.080
My God, geez.

00:24:37.080 --> 00:24:37.440
Okay.

00:24:37.940 --> 00:24:44.740
So hence, that's partly why my first thing to do is always upgraded is just to not see the warning more than anything, honestly.

00:24:44.740 --> 00:24:45.740
But pointing out that since Python 3.0.m.

00:24:45.740 --> 00:24:54.940
But pointing out that since Python 3.9, there's an additional option you can pass to the virtual environment creation story.

00:24:54.940 --> 00:25:07.100
So instead of just dash M, V, and V and V directory, you can also pass --upgrade depends, which will automatically do that upgrade of pip and dependencies as well.

00:25:07.100 --> 00:25:10.820
Pip setup tools to the latest version as part of creating the virtual environment.

00:25:10.820 --> 00:25:12.300
Yeah.

00:25:12.300 --> 00:25:15.360
So nothing major, but quite nice, right?

00:25:15.360 --> 00:25:15.960
Yeah.

00:25:15.960 --> 00:25:19.060
I mean, I usually have that as a second step within my little macro.

00:25:19.060 --> 00:25:19.560
So do I.

00:25:20.220 --> 00:25:21.220
So do I.

00:25:21.220 --> 00:25:23.540
And I was looking to replace that.

00:25:23.540 --> 00:25:24.320
And I'm like, you know what?

00:25:24.320 --> 00:25:25.260
Not quite.

00:25:25.260 --> 00:25:32.180
Because I also want to install things like pip-tools and a couple other things that this doesn't include.

00:25:32.180 --> 00:25:34.020
So I'm like, I still would have to write that line.

00:25:34.020 --> 00:25:34.700
So I'll just leave it.

00:25:34.700 --> 00:25:38.220
But anyway, still, it's really nice to have --upgrade depths.

00:25:38.220 --> 00:25:42.460
You want it to have a shiny new virtual environment all the time.

00:25:42.460 --> 00:25:42.980
Yeah.

00:25:42.980 --> 00:25:49.680
And one of the things I really love that came in like a few versions ago is the if you do the --prompt and give it a dot.

00:25:49.680 --> 00:25:51.420
It uses the directory name.

00:25:51.420 --> 00:25:52.960
Yeah, that's really excellent.

00:25:52.960 --> 00:25:56.120
It names the virtual environment containing directory names.

00:25:56.120 --> 00:26:00.420
So it has like the name of the virtual environment is the name of your project often, which is great.

00:26:00.420 --> 00:26:01.060
Yep.

00:26:01.060 --> 00:26:02.080
All right.

00:26:02.080 --> 00:26:03.400
More things, more extras.

00:26:03.400 --> 00:26:07.720
One is PyCon South Africa.

00:26:07.720 --> 00:26:10.700
PyCon ZA will be held in Durban.

00:26:10.700 --> 00:26:18.960
And the most important part here is that the call for proposals is out.

00:26:18.960 --> 00:26:21.860
And when is the time frame?

00:26:21.860 --> 00:26:23.320
Kim will have to let us know.

00:26:23.320 --> 00:26:24.600
I know he's out in the audience.

00:26:24.600 --> 00:26:25.480
But yeah.

00:26:25.480 --> 00:26:26.600
Oh, here we go.

00:26:26.860 --> 00:26:30.540
Talks need to be submitted by August 18th, 2023.

00:26:30.540 --> 00:26:32.600
And it's pretty good.

00:26:32.600 --> 00:26:35.340
I think it's both virtual and in person.

00:26:35.340 --> 00:26:39.960
So some good options for people to attend and down in October.

00:26:40.380 --> 00:26:45.980
And it's pretty convenient for Africa, Europe, much of Asia, although less so for, you know, you and me, Brian.

00:26:45.980 --> 00:26:47.940
That's all right.

00:26:47.940 --> 00:26:48.820
That's all right.

00:26:48.820 --> 00:26:50.140
Yeah, cool.

00:26:50.140 --> 00:26:56.180
So people, if they want to talk at PyCon South Africa, be sure to submit that talk.

00:26:57.340 --> 00:27:01.580
And Kim says that's a soft deadline, but sooner is better.

00:27:01.580 --> 00:27:02.380
Okay.

00:27:02.380 --> 00:27:03.500
Generally true.

00:27:03.500 --> 00:27:08.560
I got a friend that's in the cybersecurity area, and he's up all night anyway.

00:27:08.560 --> 00:27:10.240
Yeah, there you go.

00:27:10.240 --> 00:27:14.020
Yeah, you could definitely do it if you just live off hours.

00:27:14.020 --> 00:27:14.560
Yeah.

00:27:14.560 --> 00:27:18.280
Real quick follow-up from something before, Brian, and then we'll get to a joke.

00:27:18.280 --> 00:27:24.960
I had put out a call to everyone and say, help me find some off-road trails for this adventure bike thing that I got into.

00:27:24.960 --> 00:27:26.720
I didn't really get any feedback.

00:27:26.980 --> 00:27:30.320
So I'm going to instead pay it forward to other people out there who might be listening to my ride.

00:27:30.320 --> 00:27:33.780
So some really cool apps on X off-road.

00:27:33.780 --> 00:27:40.660
You can go through and find, you just click a spot on the map, and it'll show you, like, here's all the public legal trails for you to go tear around on.

00:27:40.660 --> 00:27:46.280
And they're even rated, like, 5 out of 10 or 7 out of 10 with pictures and distance and challenges.

00:27:46.280 --> 00:27:51.440
So you can decide up front whether or not you want to go down that path, I suppose.

00:27:52.240 --> 00:27:57.160
There's also GAIA, G-A-I-A, which is a similar thing.

00:27:57.160 --> 00:28:07.000
And then backcountry discovery roads, which allow you to find, like, how do I traverse my state, at least in the U.S., or similar things in Europe with the Tet.

00:28:07.000 --> 00:28:12.500
How do you, say, traverse all of Oregon, almost 100% off-road through the forest and the mountains and the deserts?

00:28:12.500 --> 00:28:15.580
And so there's this app that has all these, like, GPS trails.

00:28:15.840 --> 00:28:20.760
So anyway, I found some cool trails way up in the mountains using this app and can recommend it to people.

00:28:20.760 --> 00:28:21.400
Neat.

00:28:21.400 --> 00:28:21.900
Cool.

00:28:21.900 --> 00:28:22.260
Yeah.

00:28:22.260 --> 00:28:23.100
Cool.

00:28:23.100 --> 00:28:23.660
All right.

00:28:23.660 --> 00:28:24.560
A joke.

00:28:24.560 --> 00:28:25.620
You got a joke for us.

00:28:25.620 --> 00:28:26.180
Yeah.

00:28:26.180 --> 00:28:34.520
I can't remember where I found this, but there's a website called userinyourface.com.

00:28:34.520 --> 00:28:40.380
So instead of user interface, userinyourface.com.

00:28:40.380 --> 00:28:42.540
So you just have to fill it out.

00:28:42.540 --> 00:28:44.120
So...

00:28:44.120 --> 00:28:52.320
It's like an anti-pattern, a whole combination of anti-patterns into one UI.

00:28:52.320 --> 00:28:52.920
Okay.

00:28:52.920 --> 00:28:55.560
So just start off right off the bat.

00:28:55.560 --> 00:28:59.620
So for people listening, I'm sorry, you're going to have to watch this on the video or something.

00:28:59.620 --> 00:29:00.880
Or visit the link.

00:29:00.880 --> 00:29:02.120
Or go visit the link.

00:29:02.120 --> 00:29:09.940
It says, Hi, and welcome to User Interface, a challenge exploration of user interactions and design patterns.

00:29:09.940 --> 00:29:16.620
To play the game, simply fill in the form as fast and accurate as possible with a button that says, No.

00:29:16.620 --> 00:29:17.760
Big green button.

00:29:17.760 --> 00:29:24.760
So it says, Please click, underline, score, underlined click here to go to the next page.

00:29:24.760 --> 00:29:26.060
And the next page is highlighted.

00:29:26.060 --> 00:29:31.040
And the trick is, the only thing that you can click on is the here button.

00:29:31.040 --> 00:29:32.100
It's not a button.

00:29:32.100 --> 00:29:33.260
It's just, that's it.

00:29:33.260 --> 00:29:34.220
Okay.

00:29:34.220 --> 00:29:35.320
And then it...

00:29:35.320 --> 00:29:35.440
Okay.

00:29:35.440 --> 00:29:36.840
The site uses cookies.

00:29:36.840 --> 00:29:38.000
Is that a problem for you?

00:29:38.000 --> 00:29:38.800
Yes.

00:29:38.800 --> 00:29:40.700
Yes doesn't do anything.

00:29:40.700 --> 00:29:41.260
Okay.

00:29:41.260 --> 00:29:42.040
No, not really.

00:29:42.040 --> 00:29:43.100
That goes away.

00:29:43.100 --> 00:29:44.160
Can we help?

00:29:44.160 --> 00:29:48.860
There's a help field with no enter.

00:29:48.860 --> 00:29:49.800
Just send the bottom.

00:29:49.800 --> 00:29:52.500
One of those dreadful chat messages that pops up.

00:29:52.820 --> 00:29:54.680
Yeah, it's great.

00:29:54.680 --> 00:29:57.340
Choose your password.

00:29:57.340 --> 00:29:58.160
You click on it.

00:29:58.160 --> 00:30:00.700
And the highlighted choose your...

00:30:00.700 --> 00:30:04.300
Or the preview text is already there.

00:30:04.300 --> 00:30:08.040
So if you add your password to it, it doesn't delete the old one.

00:30:08.040 --> 00:30:10.660
You got to like fill that out.

00:30:10.660 --> 00:30:12.460
Oh, you can't tab through anything.

00:30:12.460 --> 00:30:13.460
So you have to click.

00:30:13.460 --> 00:30:15.120
Oh, the email's bad too.

00:30:15.120 --> 00:30:15.500
Yeah.

00:30:15.500 --> 00:30:18.200
Instead of a placeholder, it's just gray, actual gray text.

00:30:18.400 --> 00:30:21.260
Yeah, but you also can't delete it.

00:30:21.260 --> 00:30:24.320
Domain.

00:30:24.320 --> 00:30:27.200
Oh, this one you have to delete also.

00:30:27.200 --> 00:30:30.620
And oh, there's a hurry up.

00:30:30.620 --> 00:30:31.320
Time is ticking.

00:30:31.320 --> 00:30:32.360
A pop-up.

00:30:32.360 --> 00:30:32.980
One minute.

00:30:32.980 --> 00:30:33.380
A four.

00:30:33.380 --> 00:30:35.320
Can I hit the...

00:30:35.320 --> 00:30:36.660
Oh, the X isn't an X.

00:30:36.660 --> 00:30:38.860
It's a maximize button.

00:30:38.860 --> 00:30:40.900
Lock?

00:30:40.900 --> 00:30:41.600
The copyright's a close.

00:30:41.600 --> 00:30:42.700
Lock, unlock.

00:30:42.700 --> 00:30:43.820
This doesn't do anything.

00:30:43.820 --> 00:30:46.020
Oh, the close is the copyright.

00:30:46.020 --> 00:30:46.560
Right.

00:30:46.560 --> 00:30:48.180
That isn't obvious.

00:30:48.920 --> 00:30:49.760
Yeah, okay.

00:30:49.760 --> 00:30:51.940
I do not accept these terms.

00:30:51.940 --> 00:30:52.320
Okay.

00:30:52.320 --> 00:30:53.080
Cancel.

00:30:53.080 --> 00:30:54.820
Oh, I'm not...

00:30:54.820 --> 00:30:55.720
No, I meant okay.

00:30:55.720 --> 00:30:57.540
Are you sure you want to cancel?

00:30:57.540 --> 00:30:58.720
Cancel to cancel.

00:30:58.720 --> 00:31:00.320
Next.

00:31:00.320 --> 00:31:02.920
Oh, it says already selected.

00:31:02.920 --> 00:31:03.820
I do not accept.

00:31:03.820 --> 00:31:07.260
So you have to uncheck it to accept the terms and conditions.

00:31:07.260 --> 00:31:08.660
What are the terms?

00:31:08.660 --> 00:31:10.120
Yeah, okay.

00:31:10.120 --> 00:31:11.440
Good luck getting out of that dialogue.

00:31:11.440 --> 00:31:14.540
You got to scroll down to accept them now to get out of it.

00:31:14.540 --> 00:31:18.040
Okay, well, we're stuck now.

00:31:18.040 --> 00:31:19.940
Because you can't even...

00:31:19.940 --> 00:31:21.980
Okay, this is terrible.

00:31:21.980 --> 00:31:24.520
Anyway, I did get through it.

00:31:24.520 --> 00:31:28.220
The fastest time I have so far is like five minutes.

00:31:28.220 --> 00:31:32.500
People are going to speed run the in-your-face interface.

00:31:32.500 --> 00:31:33.780
Yeah.

00:31:33.780 --> 00:31:36.160
I'd love to see a speed run to see how fast...

00:31:36.160 --> 00:31:39.480
If somebody can really get through it in like a couple minutes, please do a video.

00:31:39.480 --> 00:31:40.320
I want to see that.

00:31:40.780 --> 00:31:41.180
So...

00:31:41.180 --> 00:31:47.840
Jeff out in the audience says, I worked for the company that made that site.

00:31:47.840 --> 00:31:49.880
Yeah.

00:31:49.880 --> 00:31:52.600
So, yeah, the company looks like Veerheart.

00:31:52.600 --> 00:31:53.560
So, nice.

00:31:53.560 --> 00:31:53.980
Yeah.

00:31:54.240 --> 00:31:54.620
All right.

00:31:54.620 --> 00:31:58.040
Well, that's enough frustration for one day.

00:31:58.040 --> 00:31:59.020
Indeed.

00:31:59.020 --> 00:32:03.020
Thanks again for joining us and doing another Python Bytes.

00:32:03.020 --> 00:32:10.800
Thank you, everybody, for watching and listening and supporting us through the courses and books and everything.

00:32:10.800 --> 00:32:12.460
And Patreon supporters.

00:32:12.460 --> 00:32:13.680
We still have Patreon supporters.

00:32:13.680 --> 00:32:14.780
Thank you, Patreon supporters.

00:32:14.780 --> 00:32:15.580
Absolutely.

00:32:15.580 --> 00:32:16.600
And thanks, Michael.

00:32:16.600 --> 00:32:17.040
Thanks, Brian.

