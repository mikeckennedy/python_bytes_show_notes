
00:00:00.000 --> 00:00:04.700
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:04.700 --> 00:00:09.700
This is episode 138, recorded July 3rd, 2019. I'm Michael Kennedy.


00:00:09.700 --> 00:00:10.500
And I'm Brian Aiken.


00:00:10.500 --> 00:00:12.500
And this episode is brought to you by DigitalOcean.


00:00:12.500 --> 00:00:15.700
Check them out at pythonbytes.fm/digitalocean.


00:00:15.700 --> 00:00:17.600
More on that later. Brian, how are you doing?


00:00:17.600 --> 00:00:19.600
I'm good. Been recording a lot.


00:00:19.600 --> 00:00:22.600
Yeah, recording a lot and trying to survive a work move, huh?


00:00:22.600 --> 00:00:25.500
Yeah, I'm not looking forward to half an hour drive.


00:00:25.500 --> 00:00:28.500
- Yeah, a work move is like when you get to move


00:00:28.500 --> 00:00:29.540
and your commute changes,


00:00:29.540 --> 00:00:31.140
but you don't get any say in it, right?


00:00:31.140 --> 00:00:32.860
- Yeah, yeah, exactly.


00:00:32.860 --> 00:00:33.840
- Yeah, I don't know if people know,


00:00:33.840 --> 00:00:36.340
but traffic in Portland and in the Northwest,


00:00:36.340 --> 00:00:37.180
it's rough, man.


00:00:37.180 --> 00:00:38.700
- Yeah, but I mean, I lucked out.


00:00:38.700 --> 00:00:42.020
So for like nine years, I had a 10-minute commute.


00:00:42.020 --> 00:00:43.860
And I know a lot of people have worse commutes.


00:00:43.860 --> 00:00:45.220
- Yeah, my commute is really rough.


00:00:45.220 --> 00:00:47.820
My studio area is like above my garage,


00:00:47.820 --> 00:00:49.620
and the garage is detached.


00:00:49.620 --> 00:00:50.740
So I go across the sidewalk,


00:00:50.740 --> 00:00:52.740
and periodically there's like a squirrel or something


00:00:52.740 --> 00:00:54.060
that'll startle me a little bit.


00:00:54.060 --> 00:00:56.100
And that's like a rough commute for me.


00:00:56.100 --> 00:00:56.940
- Yeah, yeah.


00:00:56.940 --> 00:00:57.780
- I'm just kidding.


00:00:57.780 --> 00:01:00.300
No one should feel sorry for me in that regard.


00:01:00.300 --> 00:01:01.120
- That's awesome.


00:01:01.120 --> 00:01:03.220
- Nice, all right, well, speaking of keeping everything


00:01:03.220 --> 00:01:06.420
like legit and keeping surprises out of it,


00:01:06.420 --> 00:01:07.860
that's probably where we should start, huh?


00:01:07.860 --> 00:01:10.020
- Sure, you wanna jump into the first item?


00:01:10.020 --> 00:01:11.460
- Yeah, yeah, Flakegate, let's do it.


00:01:11.460 --> 00:01:13.700
- Okay, I use Flakegate all the time.


00:01:13.700 --> 00:01:15.580
I actually put it on almost every project


00:01:15.580 --> 00:01:18.540
to make sure that I'm just not doing something stupid.


00:01:18.540 --> 00:01:20.780
So it does a whole bunch of different,


00:01:20.780 --> 00:01:22.460
I think we've talked about it before.


00:01:22.460 --> 00:01:24.440
But one of the things that I came across,


00:01:24.440 --> 00:01:27.340
this was submitted by Florian Dollitz, I think,


00:01:27.340 --> 00:01:30.880
is Flake 8 Comprehensions, which is a plugin for Flake 8.


00:01:30.880 --> 00:01:34.440
You just install that also, and it'll run automatically.


00:01:34.440 --> 00:01:36.080
People are used to list comprehensions,


00:01:36.080 --> 00:01:37.560
but there's a whole bunch of other things


00:01:37.560 --> 00:01:40.640
like dictionary comprehensions and things like that.


00:01:40.640 --> 00:01:43.040
- Set comprehensions, yeah, generator expressions,


00:01:43.040 --> 00:01:44.120
all these things, right?


00:01:44.120 --> 00:01:46.480
- Yeah, there might be some old code that works fine,


00:01:46.480 --> 00:01:49.520
but maybe it would be easier to read if it was changed.


00:01:49.520 --> 00:01:52.940
So this is just some static analysis for your code


00:01:52.940 --> 00:01:56.700
to check different things to make your code look nicer.


00:01:56.700 --> 00:01:57.260
Awesome.


00:01:57.260 --> 00:02:00.080
Like some of the warnings are unnecessary generator.


00:02:00.080 --> 00:02:02.460
Rewrite that as a list comprehension,


00:02:02.460 --> 00:02:04.060
or unnecessary list comprehension.


00:02:04.060 --> 00:02:05.780
Rewrite it as a dictionary comprehension.


00:02:05.780 --> 00:02:08.860
And interesting stuff along those lines.


00:02:08.860 --> 00:02:10.060
So yeah, that's pretty cool.


00:02:10.060 --> 00:02:12.100
I'm going to hook it into all my projects.


00:02:12.100 --> 00:02:15.180
I haven't tried it yet to see if it's helping me at all yet,


00:02:15.180 --> 00:02:17.660
but it looks like a fun thing to add.


00:02:17.660 --> 00:02:19.500
Yeah, there's some nice little cleanups here.


00:02:19.500 --> 00:02:26.980
And I'm just kind of always amazed at how similar the comprehensions are, but how different


00:02:26.980 --> 00:02:32.180
the resulting outcome of them are, especially with list comprehensions, square brackets,


00:02:32.180 --> 00:02:34.580
and generator expressions, parentheses.


00:02:34.580 --> 00:02:39.020
One is like this lazily evaluated generator expression that can be used once, the other


00:02:39.020 --> 00:02:40.020
is a list, right?


00:02:40.020 --> 00:02:43.980
But it's like, you just round the edges a little bit on the symbol, and that's it.


00:02:43.980 --> 00:02:44.980
Yeah.


00:02:44.980 --> 00:02:47.820
And I always forget that set comprehensions are a thing.


00:02:47.820 --> 00:02:48.820
Nice, nice.


00:02:48.820 --> 00:02:49.660
These are great.


00:02:49.660 --> 00:02:52.660
I feel like these are in the category of Pythonic code


00:02:52.660 --> 00:02:54.380
that a lot of folks don't know about,


00:02:54.380 --> 00:02:56.100
don't use, and so on, right?


00:02:56.100 --> 00:02:57.740
They're like, "Well, in C++,


00:02:57.740 --> 00:02:59.460
"what I would do is I would write a for loop."


00:02:59.460 --> 00:03:02.620
And so they have four in loops in Python,


00:03:02.620 --> 00:03:03.460
so I write that.


00:03:03.460 --> 00:03:05.140
It's like, actually, we have these comprehensions too.


00:03:05.140 --> 00:03:06.140
You don't need that.


00:03:06.140 --> 00:03:06.980
So pretty cool.


00:03:06.980 --> 00:03:11.860
- Anytime I can move code reviews out of personal opinions


00:03:11.860 --> 00:03:13.820
and into a static analysis tool,


00:03:13.820 --> 00:03:15.960
it just makes the team smoother.


00:03:15.960 --> 00:03:16.800
- Yeah, absolutely.


00:03:16.800 --> 00:03:18.540
I think it's really interesting psychologically


00:03:18.540 --> 00:03:21.980
that people, developers respond differently to criticism


00:03:21.980 --> 00:03:24.060
from a robot than they do from a human.


00:03:24.060 --> 00:03:26.780
- Yeah, I mean, it's like a compiler warning or something


00:03:26.780 --> 00:03:27.620
at that point.


00:03:27.620 --> 00:03:29.700
- Exactly, so well, CI says you gotta do it,


00:03:29.700 --> 00:03:31.420
so we all agreed that this is how it's gonna be,


00:03:31.420 --> 00:03:33.260
so we do it, rather than like, well,


00:03:33.260 --> 00:03:35.540
that's the guy that's always picky


00:03:35.540 --> 00:03:39.260
and always says to rewrite my code and it's not Pythonic.


00:03:39.260 --> 00:03:40.940
I don't wanna invite him to lunch anymore.


00:03:40.940 --> 00:03:43.440
- It's like somebody will pick up the torch


00:03:43.440 --> 00:03:46.100
and be the one person that's always telling other people


00:03:46.100 --> 00:03:48.380
that they need to change their code


00:03:48.380 --> 00:03:50.460
because of style and that just gets old.


00:03:50.460 --> 00:03:51.980
So yeah, let the computer do it.


00:03:51.980 --> 00:03:52.820
- Exactly.


00:03:52.820 --> 00:03:54.260
And it's more consistent anyway,


00:03:54.260 --> 00:03:59.260
no matter how anal the person is, the computer is more so.


00:03:59.260 --> 00:04:03.140
So this next item here is something


00:04:03.140 --> 00:04:04.540
that is near and dear to my heart.


00:04:04.540 --> 00:04:08.020
We've covered it before when it first came onto the scene,


00:04:08.020 --> 00:04:10.900
but it's now really ready to go.


00:04:10.900 --> 00:04:13.940
Now I wanna just set the stage here that I think,


00:04:13.940 --> 00:04:15.580
you know, we've talked about this before,


00:04:15.580 --> 00:04:16.400
I can't remember where,


00:04:16.400 --> 00:04:17.840
but we've spoken about it before,


00:04:17.840 --> 00:04:22.340
that basically, Python's growth is incredible.


00:04:22.340 --> 00:04:23.500
We've talked about that a bunch.


00:04:23.500 --> 00:04:26.300
It's fast becoming one of the most popular languages,


00:04:26.300 --> 00:04:29.180
but there's really three areas in my assessment


00:04:29.180 --> 00:04:33.620
where Python could be, it's weak,


00:04:33.620 --> 00:04:34.860
or it could be dethroned,


00:04:34.860 --> 00:04:37.820
or it could, in the words of Russell Keith McGee,


00:04:37.820 --> 00:04:40.580
actually be an existential threat


00:04:40.580 --> 00:04:42.300
to the longevity of Python.


00:04:42.300 --> 00:04:47.300
And those are a proper way to build mobile applications


00:04:47.420 --> 00:04:48.740
with Python.


00:04:48.740 --> 00:04:50.860
I know we have Kivy, and we have some stuff


00:04:50.860 --> 00:04:53.440
from WrestleStuff as well, all right?


00:04:53.440 --> 00:04:56.820
But those are like, sort of, well, we'll get it working.


00:04:56.820 --> 00:04:57.880
It's kind of proof of concept.


00:04:57.880 --> 00:05:00.320
It's not like a visual designer, drag and drop.


00:05:00.320 --> 00:05:02.160
Here's how you push this button to publish the app.


00:05:02.160 --> 00:05:05.080
So, right, like, there's not really a proper way


00:05:05.080 --> 00:05:06.760
to build mobile apps for Python.


00:05:06.760 --> 00:05:08.320
That's existential threat one.


00:05:08.320 --> 00:05:11.000
Number two is, I would like something


00:05:11.000 --> 00:05:13.100
like the Slack app in Python.


00:05:13.100 --> 00:05:15.300
Build that.


00:05:15.300 --> 00:05:16.480
Yeah, good luck with that, right?


00:05:16.480 --> 00:05:17.900
Like, probably not.


00:05:17.900 --> 00:05:20.180
So there are ways to do stuff like that,


00:05:20.180 --> 00:05:22.640
but it's always either like some kind of kludge,


00:05:22.640 --> 00:05:24.740
or it's, yeah, you can build it,


00:05:24.740 --> 00:05:26.900
but it's gonna look like from 1994.


00:05:26.900 --> 00:05:27.780
Nobody wants that.


00:05:27.780 --> 00:05:29.100
- I mean, Qt's pretty good.


00:05:29.100 --> 00:05:30.620
- Qt is pretty good, yeah, Qt's pretty good.


00:05:30.620 --> 00:05:32.060
I'm thinking, you know, TK Enter.


00:05:32.060 --> 00:05:34.140
It's like, it's definitely showing its age, right?


00:05:34.140 --> 00:05:34.980
For example.


00:05:34.980 --> 00:05:36.260
So, yeah, those are great.


00:05:36.260 --> 00:05:37.620
And so, like, GUI is probably


00:05:37.620 --> 00:05:39.700
the least existential threat of these,


00:05:39.700 --> 00:05:42.940
but it's very closely tied to this last one,


00:05:42.940 --> 00:05:46.740
which is sharing your application with end users.


00:05:46.740 --> 00:05:48.300
Somebody who doesn't care whether or not


00:05:48.300 --> 00:05:49.700
your program is written in Python,


00:05:49.700 --> 00:05:51.940
they would just want to run your program.


00:05:51.940 --> 00:05:52.780
How does that happen?


00:05:52.780 --> 00:05:53.860
- Oh yeah.


00:05:53.860 --> 00:05:55.060
- Yeah, that's a problem.


00:05:55.060 --> 00:05:56.500
And you know what was really interesting was,


00:05:56.500 --> 00:05:58.420
there's a while ago I talked about


00:05:58.420 --> 00:06:00.700
Gita Van Rossum being interviewed on,


00:06:00.700 --> 00:06:04.020
I think it was the AI, the MIT's AI podcast.


00:06:04.020 --> 00:06:05.340
It was a super interesting interview


00:06:05.340 --> 00:06:07.500
and a lot of great stuff that he said.


00:06:07.500 --> 00:06:10.420
I think they talked about it there with him.


00:06:10.420 --> 00:06:11.240
If it wasn't there,


00:06:11.240 --> 00:06:12.720
was him being interviewed somewhere else.


00:06:12.720 --> 00:06:14.680
And basically, they said,


00:06:14.680 --> 00:06:16.880
well, how do you feel about this deployment story?


00:06:16.880 --> 00:06:18.240
Doesn't it seem like a weakness?


00:06:18.240 --> 00:06:20.680
And Guido's thought was, well,


00:06:20.680 --> 00:06:23.480
you can really use a lot of the Linux package managers


00:06:23.480 --> 00:06:25.640
to solve a lot of these problems.


00:06:25.640 --> 00:06:28.840
Like if I want Python there, I can apt install Python 3.


00:06:28.840 --> 00:06:33.760
If I need to get pip, I can apt install Python 3-pip,


00:06:33.760 --> 00:06:34.600
and so on.


00:06:34.600 --> 00:06:38.160
And it was very clear, like his whole thinking about


00:06:39.020 --> 00:06:42.700
what getting an application to a user meant


00:06:42.700 --> 00:06:45.440
was getting it properly set up on a server


00:06:45.440 --> 00:06:47.940
or like a developer gets the tool set up


00:06:47.940 --> 00:06:50.680
on their Linux dev machine, which is all well and good.


00:06:50.680 --> 00:06:54.760
But the most important thing is how do I give an icon thing


00:06:54.760 --> 00:06:56.580
to a person on a Mac or on Windows


00:06:56.580 --> 00:06:59.540
they can double click and then their thing runs?


00:06:59.540 --> 00:07:00.380
You know what I mean?


00:07:00.380 --> 00:07:01.200
- Yeah, sure.


00:07:01.200 --> 00:07:02.040
- Sure, I mean, for all the people


00:07:02.040 --> 00:07:03.760
that need a dev tool on Linux,


00:07:03.760 --> 00:07:07.540
there are a hundred more, a hundred times more


00:07:07.540 --> 00:07:10.420
who need an application as an end user.


00:07:10.420 --> 00:07:11.260
You know what I mean?


00:07:11.260 --> 00:07:12.300
- Okay. - Yeah?


00:07:12.300 --> 00:07:14.180
So if we wanna get, if I wanna get something,


00:07:14.180 --> 00:07:16.620
like say if I've created some data science tooling


00:07:16.620 --> 00:07:19.060
and I wanna give that to my team,


00:07:19.060 --> 00:07:22.740
I would like to say, here's like a DMG or an MSI installer.


00:07:22.740 --> 00:07:24.680
You double click it and then you run.


00:07:24.680 --> 00:07:26.660
I don't care what version of Python you got set up


00:07:26.660 --> 00:07:28.140
or anything like that, right?


00:07:28.140 --> 00:07:29.500
So I think that's the third problem,


00:07:29.500 --> 00:07:32.620
is like how do we get like end applications users?


00:07:32.620 --> 00:07:34.940
And the reason I think it's partly,


00:07:34.940 --> 00:07:36.100
it's kind of this chicken and egg problem.


00:07:36.100 --> 00:07:40.540
I feel like partly the reason it's not got a lot of attention in the Python space is


00:07:40.540 --> 00:07:42.280
because it's so bad.


00:07:42.280 --> 00:07:46.580
It's like so nearly impossible that people just generally don't do it.


00:07:46.580 --> 00:07:50.300
So there's like not a lot of demand for people creating those types of applications to get


00:07:50.300 --> 00:07:52.620
them out because it's like, why would you use Python for that?


00:07:52.620 --> 00:07:55.020
It's like doesn't even make sense, right?


00:07:55.020 --> 00:07:59.740
There's PI installer, but it's also good, but it has some limitations.


00:07:59.740 --> 00:08:04.380
And so the thing I want to cover again is PI oxidizer.


00:08:04.380 --> 00:08:07.060
And the reason is, it's now officially released.


00:08:07.060 --> 00:08:09.540
It has its first release.


00:08:09.540 --> 00:08:15.060
And I had been watching the GitHub repository, as you can say, go watch this repository.


00:08:15.060 --> 00:08:17.420
And my email just blew up.


00:08:17.420 --> 00:08:23.580
I just go and was constantly cleaning up pull requests, issues, all this kind of stuff.


00:08:23.580 --> 00:08:26.800
People were just going crazy on the repository.


00:08:26.800 --> 00:08:28.980
It's just got a ton of traction.


00:08:28.980 --> 00:08:30.220
So that's out.


00:08:30.220 --> 00:08:32.100
And I just want to highlight some of the stuff.


00:08:32.100 --> 00:08:35.780
The guy who created it, Gregory, created it,


00:08:35.780 --> 00:08:37.660
and he's done some awesome stuff.


00:08:37.660 --> 00:08:40.540
He wrote a really nice article, which I'm linking to here,


00:08:40.540 --> 00:08:43.340
and it covers a lot of the reasons why you would want it.


00:08:43.340 --> 00:08:47.740
So at PyCon 2019, like I said, Russell Keith-Magee


00:08:47.740 --> 00:08:50.820
said basically this distribution problem


00:08:50.820 --> 00:08:55.820
is like a potential black swan event for Python, right?


00:08:55.820 --> 00:08:58.700
- I still don't know what that means, but sure.


00:08:58.700 --> 00:09:01.500
- An unseen, super negative thing


00:09:01.500 --> 00:09:05.620
coming out of the blue that's going to dramatically disrupt it somehow.


00:09:05.620 --> 00:09:09.180
I don't know if I would call it that, but I definitely think that distribution


00:09:09.180 --> 00:09:13.160
is like a reason people would not be using Python first term.


00:09:13.160 --> 00:09:15.600
I don't know if I see it as like this negative sense, but I definitely


00:09:15.600 --> 00:09:17.640
see it as a, it could be so much more.


00:09:17.640 --> 00:09:18.260
Right.


00:09:18.260 --> 00:09:18.460
Yeah.


00:09:18.460 --> 00:09:20.340
I mean, Python is so great everywhere else.


00:09:20.340 --> 00:09:21.840
It'd be cool if it was great there too.


00:09:21.840 --> 00:09:22.360
Exactly.


00:09:22.360 --> 00:09:23.220
Why is it not good there?


00:09:23.220 --> 00:09:26.740
Gregory said, basically I'm going to create this project called PyOxidizer


00:09:26.740 --> 00:09:30.940
and it uses Rust to bundle up your Python code


00:09:30.940 --> 00:09:32.660
into an executable application.


00:09:32.660 --> 00:09:36.460
A .app thing on Mac, a .exe on Windows,


00:09:36.460 --> 00:09:40.620
and a statically linked binary executable on Linux.


00:09:40.620 --> 00:09:42.820
So it works on all the different platforms.


00:09:42.820 --> 00:09:45.860
And what's cool is it takes all the dependencies you have.


00:09:45.860 --> 00:09:48.500
So if you depend on, say, pandas or whatever,


00:09:48.500 --> 00:09:49.340
it'll bundle that up.


00:09:49.340 --> 00:09:51.740
It bundles the version of Python


00:09:51.740 --> 00:09:53.260
that you build it against.


00:09:53.260 --> 00:09:55.060
So you're guaranteed you'll have 3.7


00:09:55.060 --> 00:09:56.820
no matter what system you put it on,


00:09:56.820 --> 00:09:58.700
if you build it against 3.7.


00:09:58.700 --> 00:10:01.100
What's really interesting is the way it works


00:10:01.100 --> 00:10:03.720
is it builds a single executable,


00:10:03.720 --> 00:10:06.180
and then your Python code is loaded


00:10:06.180 --> 00:10:08.340
from bytecode in memory.


00:10:08.340 --> 00:10:09.180
- Oh, wow.


00:10:09.180 --> 00:10:11.860
- Right, so it actually creates your Python files,


00:10:11.860 --> 00:10:16.660
it creates PYC files, so pre-computed PYC bytecode,


00:10:16.660 --> 00:10:18.420
and then loads that out of memory.


00:10:18.420 --> 00:10:23.420
So it actually runs faster than if you ran the code.


00:10:23.580 --> 00:10:27.560
It starts faster than if you ran the code in regular Python.


00:10:27.560 --> 00:10:29.260
Some tools care about starting fast.


00:10:29.260 --> 00:10:30.260
Some don't.


00:10:30.260 --> 00:10:32.820
Like a website doesn't really care about starting fast.


00:10:32.820 --> 00:10:33.900
But a command line thing--


00:10:33.900 --> 00:10:35.060
If you're going to write an editor,


00:10:35.060 --> 00:10:36.380
you want it to just pop open.


00:10:36.380 --> 00:10:36.980
Exactly.


00:10:36.980 --> 00:10:41.180
So the other problem with the other ways in which this was done


00:10:41.180 --> 00:10:44.100
was they would basically zip up your Python code


00:10:44.100 --> 00:10:46.060
and maybe unzip it and then try to run it


00:10:46.060 --> 00:10:47.860
from their in-memory thing.


00:10:47.860 --> 00:10:50.660
So you also kind of leaks your source code a little bit, right?


00:10:50.660 --> 00:10:51.380
Yeah, I guess so.


00:10:51.380 --> 00:10:53.740
So if this is embedded as a binary,


00:10:53.740 --> 00:10:57.440
it's less obvious for people to go poking around


00:10:57.440 --> 00:10:58.940
that this is Python code that they


00:10:58.940 --> 00:11:01.180
can go read and mess with.


00:11:01.180 --> 00:11:03.500
Technically, I know it still could be messed with.


00:11:03.500 --> 00:11:06.140
But it's not like, well, here's the directory of Python files.


00:11:06.140 --> 00:11:08.620
What is this doing in my applications root?


00:11:08.620 --> 00:11:09.620
You know what I mean?


00:11:09.620 --> 00:11:10.700
Let's go play with those.


00:11:10.700 --> 00:11:13.380
So there's just a lot of interesting things here.


00:11:13.380 --> 00:11:16.740
The article that Gregory put out announcing it is pretty broad,


00:11:16.740 --> 00:11:18.260
and it's really compelling.


00:11:18.260 --> 00:11:20.340
So it seems like this project is really taking off.


00:11:20.340 --> 00:11:23.460
I definitely think it would change the landscape


00:11:23.460 --> 00:11:26.600
if we had something like this legitimately working


00:11:26.600 --> 00:11:28.860
well across the board on all the OSs.


00:11:28.860 --> 00:11:30.060
I think it would actually drive people


00:11:30.060 --> 00:11:31.540
to build more GUI-based apps


00:11:31.540 --> 00:11:34.660
because there would be a much more clear path


00:11:34.660 --> 00:11:37.820
on how to get those applications to end users,


00:11:37.820 --> 00:11:40.940
not just developers and developer tools and servers.


00:11:40.940 --> 00:11:41.780
- Yeah. - Cool.


00:11:41.780 --> 00:11:44.300
Well, anyway, PyOxidizer, it seems to be catching fire


00:11:44.300 --> 00:11:45.140
and that's pretty awesome.


00:11:45.140 --> 00:11:45.960
- Yeah, it is cool, I like it.


00:11:45.960 --> 00:11:46.860
- All right, what you got?


00:11:46.860 --> 00:11:47.700
What's the next one?


00:11:47.700 --> 00:11:49.500
- Well, speaking of sharing code,


00:11:49.500 --> 00:11:53.380
One of the things that people do is not with end users,


00:11:53.380 --> 00:11:57.060
but with just other developers, is to take a script.


00:11:57.060 --> 00:11:58.620
You've got like just a--


00:11:58.620 --> 00:12:02.180
you created a script, a little module or something.


00:12:02.180 --> 00:12:03.620
And it works on your machine.


00:12:03.620 --> 00:12:05.220
You want to share it with other people.


00:12:05.220 --> 00:12:07.260
Even that, there's a little bit of a barrier


00:12:07.260 --> 00:12:11.980
between writing a simple script and packaging it up properly


00:12:11.980 --> 00:12:13.140
and getting that running.


00:12:13.140 --> 00:12:16.500
So it's one of the things I'm actually working on a write up,


00:12:16.500 --> 00:12:18.260
trying to do a write up of all that,


00:12:18.260 --> 00:12:21.260
with experimenting using it with using flit


00:12:21.260 --> 00:12:23.660
and pytest and tox and coverage


00:12:23.660 --> 00:12:27.280
to make sure it's well tested and structured well


00:12:27.280 --> 00:12:28.220
and all of that.


00:12:28.220 --> 00:12:29.060
- That's cool.


00:12:29.060 --> 00:12:31.100
Because you were before you were sort of a fan


00:12:31.100 --> 00:12:33.780
of creating a source directory for your packages


00:12:33.780 --> 00:12:36.180
and but that went into trouble with like flit, right?


00:12:36.180 --> 00:12:37.380
Or some flit or tox.


00:12:37.380 --> 00:12:38.820
- That's the thing with coverage,


00:12:38.820 --> 00:12:40.260
you wanna be able to,


00:12:40.260 --> 00:12:41.420
I wanna be able to test


00:12:41.420 --> 00:12:43.940
so running against the installed version,


00:12:43.940 --> 00:12:45.260
not the local version.


00:12:45.260 --> 00:12:47.740
So I wanna do all the packaging,


00:12:47.740 --> 00:12:49.440
install it into an environment,


00:12:49.440 --> 00:12:51.400
and then run the test against that.


00:12:51.400 --> 00:12:53.700
And that was hard to do.


00:12:53.700 --> 00:12:55.080
I thought it was hard to do,


00:12:55.080 --> 00:12:57.000
and a lot of people were recommending


00:12:57.000 --> 00:12:59.640
using an intermediate source directory


00:12:59.640 --> 00:13:03.600
to hide the local code from talks and from,


00:13:03.600 --> 00:13:04.640
well, not really from talks,


00:13:04.640 --> 00:13:06.160
but from coverage and pytest


00:13:06.160 --> 00:13:09.680
so that you were really loading the installed one.


00:13:09.680 --> 00:13:11.280
I didn't know there was a thing here,


00:13:11.280 --> 00:13:14.000
and I'm highlighting a feature of talks


00:13:14.000 --> 00:13:16.680
that's called Changedr, and it's really simple.


00:13:16.680 --> 00:13:20.240
You just put this in your test environment lines in tox,


00:13:20.240 --> 00:13:21.760
in your tox any file,


00:13:21.760 --> 00:13:25.600
and just say change the directory to like my test directory.


00:13:25.600 --> 00:13:26.900
And then voila,


00:13:26.900 --> 00:13:29.880
you can't see the top level source code anymore.


00:13:29.880 --> 00:13:30.720
- Oh, that's cool.


00:13:30.720 --> 00:13:31.560
- Problem solved.


00:13:31.560 --> 00:13:34.200
So I've got a longer explanation.


00:13:34.200 --> 00:13:36.080
I'm going to talk about this on,


00:13:36.080 --> 00:13:38.400
or I have on episode 80 of testing code,


00:13:38.400 --> 00:13:40.680
which will be out by the time this is out.


00:13:40.680 --> 00:13:44.240
But I was amused because I'm walking through an example


00:13:44.240 --> 00:13:46.400
and I'm trying all these things to make sure they work.


00:13:46.400 --> 00:13:49.920
And the example project I built was a markdown converter


00:13:49.920 --> 00:13:51.640
using regular expressions.


00:13:51.640 --> 00:13:53.080
And I thought this was really funny


00:13:53.080 --> 00:13:55.100
because of the news that came out recently


00:13:55.100 --> 00:13:59.920
that Cloudflare went down because of a regular expression.


00:13:59.920 --> 00:14:01.720
- A single regular expression.


00:14:01.720 --> 00:14:03.760
And Cloudflare is like the intermediary


00:14:03.760 --> 00:14:06.400
to so many applications out there.


00:14:06.400 --> 00:14:07.440
It's, that's bad.


00:14:07.440 --> 00:14:09.080
- Big chunk of the internet not working


00:14:09.080 --> 00:14:13.640
because Cloudflare was pegged on one regular expression.


00:14:13.640 --> 00:14:14.680
I don't even know how to do that.


00:14:14.680 --> 00:14:16.300
I don't know how to make a regular expression


00:14:16.300 --> 00:14:18.340
that I do simple regular expressions.


00:14:18.340 --> 00:14:20.220
So I don't know how to do something


00:14:20.220 --> 00:14:23.020
that's quadratic in nature.


00:14:23.020 --> 00:14:23.860
But I thought it was funny.


00:14:23.860 --> 00:14:26.220
- Mine tell me they're not working right away,


00:14:26.220 --> 00:14:28.180
but they say that too frequently.


00:14:28.180 --> 00:14:29.020
- Yeah.


00:14:29.020 --> 00:14:31.220
- Like why is this not finding the match?


00:14:31.220 --> 00:14:32.100
- Since I thought that was,


00:14:32.100 --> 00:14:33.500
I was using regular expressions


00:14:33.500 --> 00:14:35.900
and I thought it was somebody funny that somebody else


00:14:35.900 --> 00:14:37.760
reminded me of that Mel Brooks quote


00:14:37.760 --> 00:14:40.580
that it's tragedy when it happens to me,


00:14:40.580 --> 00:14:42.160
it's comedy when it happens to you.


00:14:42.160 --> 00:14:44.180
So I'm laughing at Cloudflare,


00:14:44.180 --> 00:14:46.180
but I wouldn't be laughing if I was working there.


00:14:46.180 --> 00:14:49.580
- Yeah, if your pager was going off at three in the morning,


00:14:49.580 --> 00:14:52.900
the humor would be entirely sucked out of that situation.


00:14:52.900 --> 00:14:53.860
Yeah, that's rough.


00:14:53.860 --> 00:14:54.900
Before we get on to the next one,


00:14:54.900 --> 00:14:56.520
let me just tell you all about DigitalOcean.


00:14:56.520 --> 00:14:58.380
I try to highlight one of the features


00:14:58.380 --> 00:14:59.460
of what they've got going on.


00:14:59.460 --> 00:15:01.660
Like I said, many times our infrastructure


00:15:01.660 --> 00:15:04.420
runs on DigitalOcean and they do a great job.


00:15:04.420 --> 00:15:07.680
So one of the things you might not want to deal with


00:15:07.680 --> 00:15:09.820
is setting up a Postgres server, backing it up,


00:15:09.820 --> 00:15:12.540
setting up the right scaling infrastructure and all that.


00:15:12.540 --> 00:15:14.700
So DigitalOcean has this great feature


00:15:14.700 --> 00:15:18.380
where you can get a managed Postgres database as a service,


00:15:18.380 --> 00:15:20.940
which solves a whole bunch of problems like figuring out


00:15:20.940 --> 00:15:23.900
what the optimal database infrastructure footprint is


00:15:23.900 --> 00:15:26.540
or scaling it as your app grows


00:15:26.540 --> 00:15:30.420
or creating highly available and failover infrastructure,


00:15:30.420 --> 00:15:31.940
all that kind of stuff you want,


00:15:31.940 --> 00:15:34.200
but you don't want to deal with it


00:15:34.200 --> 00:15:36.060
or deal with like when the pager goes off


00:15:36.060 --> 00:15:37.600
'cause it stopped replicating


00:15:37.600 --> 00:15:39.380
or it wouldn't scale or whatever,


00:15:39.380 --> 00:15:41.900
just go to DigitalOcean and check the box


00:15:41.900 --> 00:15:44.140
to get your managed Postgres database


00:15:44.140 --> 00:15:45.280
and let them deal with it all.


00:15:45.280 --> 00:15:48.340
So that's really nice, runs right there in that data center.


00:15:48.340 --> 00:15:49.980
So if you're all good, check them out


00:15:49.980 --> 00:15:52.140
at pythonbytes.fm/digitalocean.


00:15:52.140 --> 00:15:55.260
They're big supporters of the show and highly recommended.


00:15:55.260 --> 00:15:56.580
All right, so this next one, Brian,


00:15:56.580 --> 00:15:59.660
I think has some pretty interesting possibilities.


00:15:59.660 --> 00:16:02.420
It maybe ties back to my item that I spoke about before,


00:16:02.420 --> 00:16:04.140
creating like a new type of apps


00:16:04.140 --> 00:16:05.540
or opportunities for more apps.


00:16:05.540 --> 00:16:07.020
Now, it used to be,


00:16:07.020 --> 00:16:09.740
if you wanted to have some kind of communication,


00:16:09.740 --> 00:16:12.140
you'd have to go install like weird plugins


00:16:12.140 --> 00:16:15.260
into your browser so you could do, I don't know,


00:16:15.260 --> 00:16:18.860
some kind of real-time chat or video communication.


00:16:18.860 --> 00:16:21.140
But recently, these things have just been working


00:16:21.140 --> 00:16:22.280
all on their own, right?


00:16:22.280 --> 00:16:24.540
Things like Zencastr and whatnot.


00:16:24.540 --> 00:16:26.740
Now it could just do live communication in the browser,


00:16:26.740 --> 00:16:29.820
and that's because of WebRTC and ORTC.


00:16:29.820 --> 00:16:34.100
The Web Real-Time Communication is an open project


00:16:34.100 --> 00:16:35.900
that provides browsers and mobile apps


00:16:35.900 --> 00:16:40.020
real-time communication, and then the Open ORTC one


00:16:40.020 --> 00:16:44.740
is basically a similar style of communication.


00:16:44.740 --> 00:16:48.620
The item I want to talk about is this implementation for Python


00:16:48.620 --> 00:16:53.460
that uses async I/O so you can write Python applications that


00:16:53.460 --> 00:16:56.660
then communicate with other things like browsers


00:16:56.660 --> 00:16:59.820
or mobile apps and whatnot that use WebRTC.


00:16:59.820 --> 00:17:02.500
Yeah, so it's called AIO RTC.


00:17:02.500 --> 00:17:06.980
AIO is for async I/O and RTC, well, for the protocol.


00:17:06.980 --> 00:17:08.060
So it's pretty cool.


00:17:08.060 --> 00:17:11.380
It follows pretty close to the JavaScript counterpart,


00:17:11.380 --> 00:17:12.980
which is how you would do it in the web.


00:17:12.980 --> 00:17:14.860
But it uses a lot of Pythonic constructs


00:17:14.860 --> 00:17:18.700
like the popular JavaScript ones use promises.


00:17:18.700 --> 00:17:22.620
So this AIO RTC uses coroutines, which is cool.


00:17:22.620 --> 00:17:26.500
And events are emitted using the Py event emitter,


00:17:26.500 --> 00:17:27.940
which is all good.


00:17:27.940 --> 00:17:29.780
The main ones, like the main ones


00:17:29.780 --> 00:17:31.660
if you want to explore these communication protocols


00:17:31.660 --> 00:17:33.260
are all baked into the browsers


00:17:33.260 --> 00:17:34.860
and they come in native code.


00:17:34.860 --> 00:17:36.100
But if you want to explore


00:17:36.100 --> 00:17:38.260
like a more understandable version,


00:17:38.260 --> 00:17:39.380
a more hackable version.


00:17:39.380 --> 00:17:41.260
This one is all just in Python,


00:17:41.260 --> 00:17:44.200
which is pretty cool for understanding how it works.


00:17:44.200 --> 00:17:45.820
They also talk about some of the kind of apps


00:17:45.820 --> 00:17:46.820
you could build, right?


00:17:46.820 --> 00:17:49.300
So like you can create some new things


00:17:49.300 --> 00:17:50.860
in the Python ecosystem.


00:17:50.860 --> 00:17:54.100
For example, you could build a server handling


00:17:54.100 --> 00:17:55.980
both signaling and data channels


00:17:55.980 --> 00:17:58.680
and apply like computer vision to the video frames


00:17:58.680 --> 00:18:01.420
using OpenCV like in real time or something cool like that.


00:18:01.420 --> 00:18:02.260
- Oh, that'd be neat.


00:18:02.260 --> 00:18:05.260
- Yeah, so people doing fun stuff with video communications.


00:18:05.260 --> 00:18:09.260
if you want to write a Python application that can participate in that,


00:18:09.260 --> 00:18:13.260
and you want it to be nice and modern using async and await and asyncIO,


00:18:13.260 --> 00:18:15.260
well, this is a pretty cool AIO RTC.


00:18:15.260 --> 00:18:16.260
Yeah, neat.


00:18:16.260 --> 00:18:19.260
Speaking of communications, you got another one, right?


00:18:19.260 --> 00:18:22.260
This was a listener's suggestion, and I can't remember who submitted it,


00:18:22.260 --> 00:18:26.260
but I think it's, and they even have the, it's called a prize,


00:18:26.260 --> 00:18:28.260
I think that's how you pronounce it, is that right?


00:18:28.260 --> 00:18:29.260
A prize, yes.


00:18:29.260 --> 00:18:33.260
To inform or to tell someone, to make one aware of something.


00:18:33.260 --> 00:18:35.180
- You've apprised me of the situation.


00:18:35.180 --> 00:18:37.220
Really, yes, okay, carry on, sorry.


00:18:37.220 --> 00:18:38.780
(laughing)


00:18:38.780 --> 00:18:41.280
- So, Apprise is for push notifications,


00:18:41.280 --> 00:18:44.060
and their tagline was push notifications


00:18:44.060 --> 00:18:46.320
that work on just about every platform.


00:18:46.320 --> 00:18:48.660
It's kind of a shim layer to put between your app


00:18:48.660 --> 00:18:51.020
and multiple notification services.


00:18:51.020 --> 00:18:55.580
So, it sends notifications to things like Telegram.


00:18:55.580 --> 00:18:57.500
They say Telegram Pushbullet,


00:18:57.500 --> 00:18:59.020
never heard of either of those.


00:18:59.020 --> 00:19:01.660
Slack and Twitter, yes, I have heard of those.


00:19:01.660 --> 00:19:05.180
but also things like Discord, Gitter, Mailgun,


00:19:05.180 --> 00:19:07.860
Mattermost, Microsoft Teams,


00:19:07.860 --> 00:19:11.260
even sending SMSs through Twilio or Nexmo,


00:19:11.260 --> 00:19:15.180
that's supported, email notifications supported for that.


00:19:15.180 --> 00:19:17.740
Some things that you'd want to just email people,


00:19:17.740 --> 00:19:19.300
but if your server's on fire,


00:19:19.300 --> 00:19:21.860
you might want to send an SMS to somebody.


00:19:21.860 --> 00:19:22.700
- Yeah, this is cool.


00:19:22.700 --> 00:19:23.540
It's really cool.


00:19:23.540 --> 00:19:24.380
- It looks pretty neat.


00:19:24.380 --> 00:19:25.860
The API looks nice.


00:19:25.860 --> 00:19:27.940
It looks like it'd be pleasant to work with.


00:19:27.940 --> 00:19:30.020
So I think this is a good one to highlight.


00:19:30.020 --> 00:19:30.860
It looks neat.


00:19:30.860 --> 00:19:34.860
One of the stuff that stood out to me is Growl and Windows Notifications.


00:19:34.860 --> 00:19:36.180
Do you know what Growl is?


00:19:36.180 --> 00:19:40.540
So Growl is, I don't know if this is the way it still works in macOS, but you know the


00:19:40.540 --> 00:19:43.740
little toast notifications that come up in the top right in macOS?


00:19:43.740 --> 00:19:44.740
Oh yeah, yeah.


00:19:44.740 --> 00:19:45.740
Yeah, Growl does that.


00:19:45.740 --> 00:19:46.740
Oh, okay.


00:19:46.740 --> 00:19:47.740
But you might have to have a little daemon installed.


00:19:47.740 --> 00:19:51.220
I can't remember if it natively talks to Mac.


00:19:51.220 --> 00:19:52.220
I don't think so.


00:19:52.220 --> 00:19:55.140
I think Growl is like before that was built into the OS.


00:19:55.140 --> 00:19:58.220
But basically it does that and then Windows Notifications like similarly.


00:19:58.220 --> 00:19:59.920
But instead of being in the top right, they're in the bottom right.


00:19:59.920 --> 00:20:01.460
so they're not at all the same thing.


00:20:01.460 --> 00:20:03.240
- And it also supposedly supports matrix,


00:20:03.240 --> 00:20:05.840
so I don't know if that texts Keanu Reeves or--


00:20:05.840 --> 00:20:07.180
- Yeah, exactly, yeah.


00:20:07.180 --> 00:20:09.240
(laughing)


00:20:09.240 --> 00:20:10.960
I know Kung Fu.


00:20:10.960 --> 00:20:11.800
Okay, sorry.


00:20:11.800 --> 00:20:13.960
(laughing)


00:20:13.960 --> 00:20:14.840
Yeah, no, this is really cool.


00:20:14.840 --> 00:20:16.560
If you gotta communicate with Gitter,


00:20:16.560 --> 00:20:18.680
if this, then that, all those different things,


00:20:18.680 --> 00:20:22.040
you know, Cisco teams, Microsoft teams, all those,


00:20:22.040 --> 00:20:24.960
rather than integrate with all of their APIs,


00:20:24.960 --> 00:20:27.420
or Twilio or whatever, just like bring this in


00:20:27.420 --> 00:20:29.800
as like a facade over all that, it's great.


00:20:29.800 --> 00:20:33.400
So this last thing I want to talk about is a new web framework.


00:20:33.400 --> 00:20:37.440
And I feel like the web in Python is getting really interesting.


00:20:37.440 --> 00:20:44.280
And also a little more hard to choose the right thing to do because it used to be Django


00:20:44.280 --> 00:20:48.560
flask, there's pyramid also I like pyramid and there's, there's a few others that was


00:20:48.560 --> 00:20:50.960
cherry pie, but it's not used that much anymore.


00:20:50.960 --> 00:20:52.880
So I guess I'll choose between those three, right?


00:20:52.880 --> 00:20:54.520
Like that was kind of like the end of the thought.


00:20:54.520 --> 00:20:57.520
But now there's like 100s like, little things, right?


00:20:57.520 --> 00:21:01.120
There's Black Sheep that we talked about, there's Mace Knight, and there's Gepronto,


00:21:01.120 --> 00:21:03.820
and there's, well, there's WebSANA as well.


00:21:03.820 --> 00:21:09.040
So WebSANA is a new framework, and I think it's super interesting because it kind of


00:21:09.040 --> 00:21:18.060
brings some more beginner friendliness or CMS friendliness to some of the micro framework


00:21:18.060 --> 00:21:19.120
story.


00:21:19.120 --> 00:21:23.960
So we've got another way you might break up the web framework thinking process as well


00:21:23.960 --> 00:21:26.000
I want an app that's kind of like,


00:21:26.000 --> 00:21:27.480
I've got to work the way it works,


00:21:27.480 --> 00:21:31.280
but I can slot in these big blocks and have stuff.


00:21:31.280 --> 00:21:34.240
I want Django so I can have an admin back end


00:21:34.240 --> 00:21:37.160
where I just have an Excel-like view of my database


00:21:37.160 --> 00:21:39.720
if I want that, for example.


00:21:39.720 --> 00:21:42.560
But if you want to not work the way Django works,


00:21:42.560 --> 00:21:43.280
well, too bad.


00:21:43.280 --> 00:21:44.520
You work the way Django works.


00:21:44.520 --> 00:21:46.000
That's how you use Django, right?


00:21:46.000 --> 00:21:47.760
On the other hand, you could use Flask or Pyramid


00:21:47.760 --> 00:21:49.340
where it's kind of like, well, here's


00:21:49.340 --> 00:21:50.960
how you process a request.


00:21:50.960 --> 00:21:53.560
Whatever else you do, that's on you.


00:21:53.560 --> 00:21:54.880
It's up to you.


00:21:54.880 --> 00:21:57.800
So a lot of people kind of like that more fine grained stuff.


00:21:57.800 --> 00:22:00.000
Like, well, I think I'll use SQLAlchemy here,


00:22:00.000 --> 00:22:02.120
and I'm going to use this for managing passwords,


00:22:02.120 --> 00:22:04.360
and here's how I do my users, and email, and all that.


00:22:04.360 --> 00:22:06.160
You get to choose all those little bits,


00:22:06.160 --> 00:22:07.720
but then you've got to choose all the bits


00:22:07.720 --> 00:22:08.920
and build with it, and so on.


00:22:08.920 --> 00:22:10.760
So this WebSona framework is built


00:22:10.760 --> 00:22:16.040
on Pyramid, SQLAlchemy, and obviously Python 3.


00:22:16.040 --> 00:22:17.660
But it adds a lot of the features


00:22:17.660 --> 00:22:22.800
people might choose Django 4, but in a super modern and cool


00:22:22.800 --> 00:22:23.300
way.


00:22:23.300 --> 00:22:24.860
So I really, really like it.


00:22:24.860 --> 00:22:27.360
Their description is, "WebSond is a full snack


00:22:27.360 --> 00:22:30.180
by the web framework for building web services and back


00:22:30.180 --> 00:22:33.980
offices with admin interfaces and user sign-up processes."


00:22:33.980 --> 00:22:34.540
That's good.


00:22:34.540 --> 00:22:36.580
Yeah, so they say, well, when should you use it?


00:22:36.580 --> 00:22:39.140
Well, it's focused on internet-facing sites


00:22:39.140 --> 00:22:41.500
when you have a public or private sign-up process


00:22:41.500 --> 00:22:43.260
and an admin interface.


00:22:43.260 --> 00:22:46.620
And the sweet spot includes custom business portals,


00:22:46.620 --> 00:22:48.180
software as a service products, which


00:22:48.180 --> 00:22:51.020
are too specialized for off-the-shelf solutions,


00:22:51.020 --> 00:22:55.020
read WordPress, Squarespace, like all these things.


00:22:55.020 --> 00:22:56.040
You're like, oh, you could use that.


00:22:56.040 --> 00:22:57.760
Well, for like 80%, you could use that.


00:22:57.760 --> 00:22:58.680
Then what?


00:22:58.680 --> 00:22:59.540
Then where do you go, right?


00:22:59.540 --> 00:23:01.820
So WebSonic can now be a place that you might go for that.


00:23:01.820 --> 00:23:02.660
- Oh, cool.


00:23:02.660 --> 00:23:03.860
This might be take off, yeah.


00:23:03.860 --> 00:23:04.800
- I think it really could.


00:23:04.800 --> 00:23:06.480
And so they talk about,


00:23:06.480 --> 00:23:09.740
they're focused on like core business logic.


00:23:09.740 --> 00:23:11.580
So you can, you know, they build all,


00:23:11.580 --> 00:23:12.540
have all the building blocks.


00:23:12.540 --> 00:23:15.700
Like you want to sign up with Google with your Gmail.


00:23:15.700 --> 00:23:17.540
Yeah, you just like put that in there and it just,


00:23:17.540 --> 00:23:20.660
now you can sign up for your app with Gmail.


00:23:20.660 --> 00:23:23.060
It's nice, you can get started real easy, lots of docs.


00:23:23.060 --> 00:23:24.340
Yeah, it's just all about being productive.


00:23:24.340 --> 00:23:26.140
So they have a whole bunch of infrastructure built up


00:23:26.140 --> 00:23:28.400
and you just kind of fill in the pieces.


00:23:28.400 --> 00:23:33.340
It's a little more Django-esque than raw Pyramid is,


00:23:33.340 --> 00:23:36.380
but it's kind of nice that you have this blended option.


00:23:36.380 --> 00:23:38.220
So I think it looks really promising.


00:23:38.220 --> 00:23:40.320
They have a lot of cool things


00:23:40.320 --> 00:23:44.840
like asynchronous task processing and other stuff like that


00:23:44.840 --> 00:23:47.860
that really makes it feel pretty modern and cool.


00:23:47.860 --> 00:23:48.940
- Yeah, definitely.


00:23:48.940 --> 00:23:51.620
- And it looks like it's tested using pytest also.


00:23:51.620 --> 00:23:53.180
- Yeah, it's tested using pytest.


00:23:53.180 --> 00:23:56.400
It's deployed using Ansible.


00:23:56.400 --> 00:23:58.100
Let's see, there's a couple other things.


00:23:58.100 --> 00:23:59.460
Yeah, that is super cool.


00:23:59.460 --> 00:24:02.260
It automatically comes with the top OWASP,


00:24:02.260 --> 00:24:04.740
top 10 security vulnerabilities,


00:24:04.740 --> 00:24:06.060
limit, like restricted.


00:24:06.060 --> 00:24:08.260
So they figure out what are the top 10 reasons


00:24:08.260 --> 00:24:09.700
websites have security problems,


00:24:09.700 --> 00:24:12.460
and they built into the infrastructure by default


00:24:12.460 --> 00:24:15.700
to block all those, like cross-site scripting and whatnot.


00:24:15.700 --> 00:24:16.900
They have asynchrony built in,


00:24:16.900 --> 00:24:20.660
And it even has a IPython notebook shell.


00:24:20.660 --> 00:24:24.980
So instead of just having a grid view of admin stuff


00:24:24.980 --> 00:24:26.500
I can type in, they're like, oh, well,


00:24:26.500 --> 00:24:29.580
if you need to do admin tasks, log in and just fire up


00:24:29.580 --> 00:24:32.220
Jupyter on the back end and just start--


00:24:32.220 --> 00:24:33.580
manage it that way.


00:24:33.580 --> 00:24:34.720
So that's like, all right.


00:24:34.720 --> 00:24:37.860
So it's like a web shell to your server.


00:24:37.860 --> 00:24:39.420
Keep that super locked down.


00:24:39.420 --> 00:24:40.780
But still pretty awesome.


00:24:40.780 --> 00:24:43.060
So there's a bunch of really interesting ideas here


00:24:43.060 --> 00:24:44.860
that I think are quite cool.


00:24:44.860 --> 00:24:46.460
-The documentation is pretty thorough.


00:24:46.460 --> 00:24:49.180
It even includes like, okay, once you get this stuff working,


00:24:49.180 --> 00:24:50.580
how do you deploy it somewhere?


00:24:50.580 --> 00:24:51.500
- Yeah, exactly.


00:24:51.500 --> 00:24:54.560
This is quite new, but it also looks really promising to me


00:24:54.560 --> 00:24:55.900
and I hope it takes off,


00:24:55.900 --> 00:24:58.420
'cause I feel like this is like a really nice modern take


00:24:58.420 --> 00:25:02.620
on what a modern Python web app framework should look like.


00:25:02.620 --> 00:25:03.460
- Yeah, cool.


00:25:03.460 --> 00:25:06.180
- All right, well, that's it for our main topics, Brian.


00:25:06.180 --> 00:25:08.380
You got something you wanna share with us?


00:25:08.380 --> 00:25:09.460
Just quickly at the end?


00:25:09.460 --> 00:25:12.860
- Yeah, I was gonna mention, so we mentioned my move.


00:25:12.860 --> 00:25:15.900
The move at work has caused my schedule


00:25:15.900 --> 00:25:19.380
to be crazy and I don't know when to interview people.


00:25:19.380 --> 00:25:21.340
If you've been paying attention to Test & Code,


00:25:21.340 --> 00:25:24.380
the episodes have been kind of solo episodes lately


00:25:24.380 --> 00:25:26.660
because I don't have to schedule myself.


00:25:26.660 --> 00:25:28.860
It's just whenever I can do it.


00:25:28.860 --> 00:25:31.260
Later on in July, things should settle down.


00:25:31.260 --> 00:25:33.420
So if I've bugged you to do an interview


00:25:33.420 --> 00:25:36.340
or you've asked me and I haven't gotten back to you,


00:25:36.340 --> 00:25:38.340
get back to me again and we'll schedule that.


00:25:38.340 --> 00:25:39.460
So that should go on.


00:25:39.460 --> 00:25:40.280
- Yeah, right on.


00:25:40.280 --> 00:25:41.420
You're doing a great job with Test & Code.


00:25:41.420 --> 00:25:43.100
There's a lot of stuff been coming out,


00:25:43.100 --> 00:25:45.940
nice and steady and a lot of good shows there.


00:25:45.940 --> 00:25:46.940
- All right, thanks.


00:25:46.940 --> 00:25:47.780
How about you?


00:25:47.780 --> 00:25:49.620
- Well, I just released another course


00:25:49.620 --> 00:25:51.380
that I've been working on for a couple of months,


00:25:51.380 --> 00:25:53.460
on and off, and it's called


00:25:53.460 --> 00:25:55.140
Building Data-Driven Web Applications


00:25:55.140 --> 00:25:56.700
with Flask and SQLAlchemy,


00:25:56.700 --> 00:25:58.300
Speaking in Microframeworks.


00:25:58.300 --> 00:26:00.540
So I had a similar course on Pyramid,


00:26:00.540 --> 00:26:01.380
and a lot of people said,


00:26:01.380 --> 00:26:03.100
hey, Pyramid's awesome,


00:26:03.100 --> 00:26:05.420
but we really need to know Flask,


00:26:05.420 --> 00:26:06.780
'cause that's what we use our company,


00:26:06.780 --> 00:26:08.780
or that's what I'm trying to understand


00:26:08.780 --> 00:26:09.960
for a job or whatever.


00:26:09.960 --> 00:26:11.100
So I'm like, all right, well let me go


00:26:11.100 --> 00:26:13.300
build the Flask version of this course.


00:26:13.300 --> 00:26:16.580
So basically the idea is we spend about 10 hours


00:26:16.580 --> 00:26:19.940
recreating pypi.org from the ground up


00:26:19.940 --> 00:26:21.340
with Flask and SQLAlchemy.


00:26:21.340 --> 00:26:22.420
- Oh, that's cool.


00:26:22.420 --> 00:26:24.180
Yeah, I'm gonna have to check that out too.


00:26:24.180 --> 00:26:25.020
- Yeah, absolutely.


00:26:25.020 --> 00:26:26.060
So people can check that out.


00:26:26.060 --> 00:26:26.900
Links are in the show notes


00:26:26.900 --> 00:26:28.780
or just training.talkbythumb.fm.


00:26:28.780 --> 00:26:31.900
That's the latest course and no time to rest.


00:26:31.900 --> 00:26:33.060
Since we're done recording here,


00:26:33.060 --> 00:26:34.260
it's time to start the next,


00:26:34.260 --> 00:26:36.260
continue on the next one I'm working on.


00:26:36.260 --> 00:26:37.660
So I'm really excited to have this out.


00:26:37.660 --> 00:26:39.300
I think a lot of people will appreciate it


00:26:39.300 --> 00:26:40.660
and it was really fun to write


00:26:40.660 --> 00:26:42.740
because you gotta explore a lot of these ideas


00:26:42.740 --> 00:26:43.900
we were just kinda just talking about.


00:26:43.900 --> 00:26:46.140
- Yeah, I'll be hopefully working on a course here


00:26:46.140 --> 00:26:46.980
pretty soon too.


00:26:46.980 --> 00:26:48.420
- I'm very excited about that, yeah.


00:26:48.420 --> 00:26:50.080
I'm not really sure we're ready to share


00:26:50.080 --> 00:26:52.900
what the topic is yet, but it's gonna be in high demand


00:26:52.900 --> 00:26:53.740
and very popular.


00:26:53.740 --> 00:26:55.180
- Yeah, I'm looking forward to it.


00:26:55.180 --> 00:26:57.460
Yeah, complete secret, nobody'll know what it is


00:26:57.460 --> 00:26:58.280
until it shows up.


00:26:58.280 --> 00:27:00.380
- Yeah, computer vision and IoT probably,


00:27:00.380 --> 00:27:01.620
but I'm not gonna...


00:27:01.620 --> 00:27:04.620
(laughing)


00:27:04.620 --> 00:27:06.580
- Yeah, maybe, yeah, sure.


00:27:06.580 --> 00:27:08.220
- Or something else, probably.


00:27:08.220 --> 00:27:11.780
So speaking of jokes and sarcasm,


00:27:11.780 --> 00:27:13.360
a SQL query goes into a bar,


00:27:13.360 --> 00:27:15.100
walks up to two tables and asks,


00:27:15.100 --> 00:27:15.940
"Can I join you?"


00:27:15.940 --> 00:27:18.260
(laughing)


00:27:18.260 --> 00:27:19.100
- I really like that.


00:27:19.100 --> 00:27:21.620
- Yeah, it's pretty bad, but--


00:27:21.620 --> 00:27:22.460
- That's good.


00:27:22.460 --> 00:27:23.280
- It's a good one.


00:27:23.280 --> 00:27:24.980
- Yeah, so I don't have a joke,


00:27:24.980 --> 00:27:29.140
but I saw this on Twitter and I cracked up.


00:27:29.140 --> 00:27:30.340
- I did watch this, yes.


00:27:30.340 --> 00:27:34.340
- The reset procedure from GE light bulbs, it's so funny.


00:27:34.340 --> 00:27:37.180
- These are smart, in quotes, smart light bulbs.


00:27:37.180 --> 00:27:38.020
- Yeah.


00:27:38.020 --> 00:27:41.580
like paired them to your device, but then you lost your phone


00:27:41.580 --> 00:27:44.340
or you gave the light bulbs to your friend,


00:27:44.340 --> 00:27:47.060
you're like, well, how do I reset my light bulb?


00:27:47.060 --> 00:27:47.900
Right?


00:27:47.900 --> 00:27:49.380
- Yeah, 'cause you can't just like turn it off


00:27:49.380 --> 00:27:51.900
and turn it on 'cause that's what light bulbs do.


00:27:51.900 --> 00:27:54.180
So you have to do something else.


00:27:54.180 --> 00:27:56.580
And this procedure that they've got is hilarious.


00:27:56.580 --> 00:27:59.040
And it's like, turn it off for five seconds,


00:27:59.040 --> 00:28:01.940
then on for eight seconds, then off for two seconds,


00:28:01.940 --> 00:28:03.420
then on for eight seconds.


00:28:03.420 --> 00:28:05.540
And if you go through this like five times.


00:28:05.540 --> 00:28:07.180
- It goes on and on because like,


00:28:07.180 --> 00:28:09.460
What if somebody accidentally turns it off for five seconds,


00:28:09.460 --> 00:28:11.060
on for two seconds, on for eight seconds,


00:28:11.060 --> 00:28:12.480
and off for eight seconds,


00:28:12.480 --> 00:28:15.220
but didn't mean to reset their revolve?


00:28:15.220 --> 00:28:17.060
You gotta do like three more rounds of that.


00:28:17.060 --> 00:28:18.140
It's insane, yeah.


00:28:18.140 --> 00:28:18.980
- Yeah.


00:28:18.980 --> 00:28:21.220
- Yeah, we'll link to the video for that.


00:28:21.220 --> 00:28:23.460
- At the end, it's like, if that didn't work,


00:28:23.460 --> 00:28:25.280
maybe it's an old firmware version.


00:28:25.280 --> 00:28:27.640
Try this other, even worse procedure.


00:28:27.640 --> 00:28:31.620
Awesome user interface experience.


00:28:31.620 --> 00:28:32.460
- I love it.


00:28:32.460 --> 00:28:34.660
What do you do when like the only interface you have


00:28:34.660 --> 00:28:36.420
is like power on, power off?


00:28:36.420 --> 00:28:41.040
apparently is it yeah but the register like noted that you could put a hole in


00:28:41.040 --> 00:28:45.720
it and people could poke it with a like clothespin or whatever oh you mean like


00:28:45.720 --> 00:28:50.360
my router and like all these other normal pieces of technology yeah a reset


00:28:50.360 --> 00:28:55.360
button exactly yeah maybe they don't want people poking metal things into


00:28:55.360 --> 00:28:59.960
bulbs because it's like too close to poke it right to the socket because


00:28:59.960 --> 00:29:04.960
people are always poking metal into light sockets. Yeah.


00:29:04.960 --> 00:29:09.280
Exactly, exactly. All right, well, yeah, people can go check this out and it's


00:29:09.280 --> 00:29:11.720
intended to be serious but it's actually kind of funny.


00:29:11.720 --> 00:29:15.160
Yep, all right. Well, thanks a lot, Michael. You bet. Thanks for being here. See ya. Bye.


00:29:15.160 --> 00:29:19.240
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes.


00:29:19.240 --> 00:29:24.240
That's Python Bytes as in B-Y-T-E-S. And get the full show notes at


00:29:24.240 --> 00:29:28.040
pythonbytes.fm. If you have a news item you want featured, just visit


00:29:28.040 --> 00:29:32.760
pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool.


00:29:32.760 --> 00:29:36.920
On behalf of myself and Brian Auchin, this is Michael Kennedy. Thank you for listening


00:29:36.920 --> 00:29:39.320
and sharing this podcast with your friends and colleagues.

