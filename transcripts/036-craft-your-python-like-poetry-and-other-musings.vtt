
00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:06.000 --> 00:00:13.680
This is episode 36, recorded July 26, 2017. I'm Michael Kennedy.


00:00:13.680 --> 00:00:14.720
And I'm Brian Okken.


00:00:14.720 --> 00:00:19.440
And we got some great stuff lined up for you. Very cool news in the Python space. Before we get to it,


00:00:19.440 --> 00:00:23.360
just want to say Rollbar is sponsoring this episode. They've got a really great offer for


00:00:23.360 --> 00:00:28.240
you at pythonbytes.fm/rollbar. Tell you more about that later. Right now, Brian,


00:00:28.240 --> 00:00:31.440
I would like you to tell me some poetry. Read me something beautiful.


00:00:31.440 --> 00:00:39.200
- So it's poetry hour at Python Bytes. No, I started at a community college and then I


00:00:39.200 --> 00:00:44.320
switched to a University of Oregon to start the computer science program. And one of the first


00:00:44.320 --> 00:00:50.560
classes I was in, before we got into like actually the technical stuff, my professor said, "You need


00:00:50.560 --> 00:00:57.120
to think about your code like poetry. It should be pretty to look at." And it's kind of stuck with me.


00:00:57.120 --> 00:00:58.720
I like that lesson.


00:00:58.720 --> 00:01:05.600
This article, there's an article by Trey Hunter and it's called "Craft your Python like poetry."


00:01:05.600 --> 00:01:06.920
Just some decent advice.


00:01:06.920 --> 00:01:11.100
Your code shouldn't really look like prose from a novel.


00:01:11.100 --> 00:01:16.160
It should look more like poetry and it's not just pretty for pretty's sake.


00:01:16.160 --> 00:01:20.320
It's more readable when it's visually appealing, I think.


00:01:20.320 --> 00:01:25.280
And he brings up line length is important, although shorter is more readable.


00:01:25.280 --> 00:01:30.940
But man, he recommends 55 character line lengths and that's pretty short.


00:01:30.940 --> 00:01:34.940
I think there's a real tension in this one, although I do agree that line length matters


00:01:34.940 --> 00:01:39.820
and I prefer to have shorter is better in some ways.


00:01:39.820 --> 00:01:46.760
However, one of the real tensions I find here is another good practice is to have descriptive


00:01:46.760 --> 00:01:51.860
variable names and sometimes that means longer than x, y and z for your variable names.


00:01:51.860 --> 00:01:54.140
And if you start doing expressions involving those,


00:01:54.140 --> 00:01:56.100
like this times that past this, that


00:01:56.100 --> 00:01:58.860
can get huge really quickly just by virtue


00:01:58.860 --> 00:02:02.060
of putting long function names alongside long variable names.


00:02:02.060 --> 00:02:03.140
Yeah.


00:02:03.140 --> 00:02:04.300
There is some tension there.


00:02:04.300 --> 00:02:08.860
And also, in working with data and tables and stuff,


00:02:08.860 --> 00:02:12.540
I do find tables that look like tables instead


00:02:12.540 --> 00:02:15.860
of looking crammed all the way to the left-hand side


00:02:15.860 --> 00:02:18.620
are more visually readable.


00:02:18.620 --> 00:02:21.540
Anyway, getting over the line length thing,


00:02:21.540 --> 00:02:27.900
He does have a lot of good comments about like when you do have to continue a line to make it shorter like do a line break


00:02:27.900 --> 00:02:36.300
Where you do it is makes a big difference and yet he has some examples to make making a line break or broken


00:02:36.300 --> 00:02:45.360
Comprehensions and more readable and function call parameters and then one of the things I think maybe this is a functional programming thing


00:02:45.360 --> 00:02:48.420
But chained function calls. I probably just don't do that very much


00:02:48.820 --> 00:02:52.860
But the dot alignment he noted looks pretty nice


00:02:52.860 --> 00:02:58.940
The last one that I saw which I kind of do anyway, I didn't realize that some people don't do this is is


00:02:58.940 --> 00:03:05.540
Dictionary literals, so if you set up a dictionary that's kind of like an enum list


00:03:05.540 --> 00:03:07.300
it's a


00:03:07.300 --> 00:03:13.980
Basically just a predefined dictionary literal having one element per line makes it a lot more readable


00:03:13.980 --> 00:03:16.640
But then there's you know, there's always trade-offs


00:03:16.640 --> 00:03:18.820
There's a if you've got a really large one


00:03:18.820 --> 00:03:27.340
There's vertical vertical length is important as well and having a super long program might not be as easy to read as a shorter


00:03:27.340 --> 00:03:32.580
One I don't know. Yeah, I'm with you on that. Let me throw in one more that I don't think it's covered here


00:03:32.580 --> 00:03:34.580
maybe I just missed it is


00:03:34.580 --> 00:03:36.940
function function length


00:03:36.940 --> 00:03:44.540
Right, just the idea of breaking your program into little tiny bits a little small reasonable easily understandable pieces


00:03:44.540 --> 00:03:49.580
you know, kind of like a haiku I guess rather than a long flowing poem. Right


00:03:49.580 --> 00:03:53.100
and also I guess on that it doesn't tell you doesn't talk about white space too


00:03:53.100 --> 00:03:58.280
much but there's a white space even within within a function breaking up the


00:03:58.280 --> 00:04:03.140
different parts of when you're working with setting up the data versus other


00:04:03.140 --> 00:04:08.060
things to break it up by white space similar to how long poems break their


00:04:08.060 --> 00:04:12.540
break are broken into little stanzas or something. Yeah you know thinking about


00:04:12.540 --> 00:04:17.820
this, one of the things that strikes me is the way that your code looks and breaking it down like


00:04:17.820 --> 00:04:23.740
this and kind of thinking about it this way, it's a big sign of sort of professional developer versus


00:04:23.740 --> 00:04:27.900
somebody just learning somebody just poking around is not really a developer like professional


00:04:27.900 --> 00:04:33.660
developers code looks like these types of things. It's clearly structured beyond just what the


00:04:33.660 --> 00:04:39.500
language requires. And a lot of times people are new, they just kind of mush it all together. So


00:04:39.500 --> 00:04:44.000
If you're looking to come across better with your code, I guess, think about that as well.


00:04:44.000 --> 00:04:45.000
Yeah. Okay.


00:04:45.000 --> 00:04:53.000
Yeah. So I want to bring something, bring everyone's attention to this thing called Fedora Python Classroom Lab.


00:04:53.000 --> 00:04:58.000
Okay. So the idea is Fedora, it's a Linux distribution, really nice one.


00:04:58.000 --> 00:05:07.000
And what they've built is basically Python and data science, Python-based data science in a box.


00:05:07.000 --> 00:05:09.520
So, or rather in an ISO.


00:05:09.520 --> 00:05:16.520
What you can do is you can get just the ISO DVD image of this Fedora Python classroom.


00:05:16.520 --> 00:05:20.320
You can mount it and literally just boot straight to this thing.


00:05:20.320 --> 00:05:24.720
It fires up Fedora and you can log in without even installing it.


00:05:24.720 --> 00:05:32.080
Log in, you have access to NumPy, SciPy, IPython, Matplotlib, requests, all the various most


00:05:32.080 --> 00:05:33.760
common packages.


00:05:33.760 --> 00:05:35.620
And it's just up and ready to go.


00:05:35.620 --> 00:05:36.800
So that's really sweet.


00:05:36.800 --> 00:05:45.780
You have the GUI GNOME based version or you have a Docker or Vagrant, no UI variant.


00:05:45.780 --> 00:05:48.660
All sorts of stuff is just set up and ready to go.


00:05:48.660 --> 00:05:53.740
If you're going to teach Python and you're thinking of maybe using Linux to do it anyway,


00:05:53.740 --> 00:05:57.060
here's a really nice thing you can hand out to the students and just say, "Boot from this


00:05:57.060 --> 00:06:02.540
CD or this DVD or this image or create a virtual machine based off of it and you're ready to


00:06:02.540 --> 00:06:03.540
roll."


00:06:03.540 --> 00:06:04.540
That's cool.


00:06:04.540 --> 00:06:09.340
a thing I downloaded inside Fedora and we logged into for Fedora and like wait where's all this


00:06:09.340 --> 00:06:16.140
stuff oh it's actually its own copy of Fedora so this is its own like Linux plus pre-configured


00:06:16.140 --> 00:06:22.380
Python stuff. Wow yeah that's uh pretty cool right yeah everything including talks in there nice yeah


00:06:22.380 --> 00:06:28.460
it's already multiple versions of Python everything so you have uh some less than amazing news for


00:06:28.460 --> 00:06:33.820
what's up next so we previously talked about this really cool concept uh called kite which it would


00:06:33.820 --> 00:06:40.460
take your code and it would take a lot of stuff you would do as a developer on your system and it


00:06:40.460 --> 00:06:46.300
would add smart, right? It would add auto-completion even where there wasn't and these types of things.


00:06:46.300 --> 00:06:51.980
But there it turns out there was a few drawbacks just conceptually around it but there's also a


00:06:51.980 --> 00:06:58.220
bit of a toss-up about actually their behavior. What's up with this? Yeah, so I was, especially


00:06:58.220 --> 00:07:03.780
because we had covered it. My reluctance to this product to start with was that


00:07:03.780 --> 00:07:09.080
they would, it's all cloud-based stuff, so they would send your code in order to


00:07:09.080 --> 00:07:14.100
give you hints and stuff. It would send your code to their company and then


00:07:14.100 --> 00:07:17.660
and you just kind of have to trust that they're not going to do anything evil with it.


00:07:17.660 --> 00:07:21.800
Yeah, I was a little reluctant at that as well. Like if when I was


00:07:21.800 --> 00:07:25.220
playing with it, I put it on a section you can say this subset of your hard


00:07:25.220 --> 00:07:28.920
drive it can like interact with and I gave it a section where I didn't have


00:07:28.920 --> 00:07:33.320
like things that had you know API keys and stuff it was just like me playing


00:07:33.320 --> 00:07:36.320
around but still it is a bit of a hesitation but that's not really what


00:07:36.320 --> 00:07:40.040
we're talking about is it? No what we're talking about there's a article that


00:07:40.040 --> 00:07:45.440
came out on I'd never seen this site before the outline.com which is an


00:07:45.440 --> 00:07:50.120
article called how a VC funded company is undermining the open source community


00:07:50.120 --> 00:07:57.620
and it's about some underhanded, or at least some accusations of underhanded tactics by Kite


00:07:57.620 --> 00:08:04.620
so the story is it's about two add-ons to Atom, the text editor Atom


00:08:04.620 --> 00:08:13.120
and one of them is Minimap, which is supposedly downloaded over 3.5 million times so it's well used


00:08:13.120 --> 00:08:19.620
and it's developed by one person, and I'm guessing Minimap is similar to the map feature in Sublime or something


00:08:19.620 --> 00:08:24.620
But the one developer, Abe33, was hired by Kite,


00:08:24.620 --> 00:08:27.300
and then after being hired by Kite,


00:08:27.300 --> 00:08:32.980
inserted a-- or updated the plugin with a Kite promotion


00:08:32.980 --> 00:08:33.500
feature.


00:08:33.500 --> 00:08:35.940
That was actually the Git commit log


00:08:35.940 --> 00:08:38.940
was added Kite promotion feature or something like this, right?


00:08:38.940 --> 00:08:39.820
Yeah.


00:08:39.820 --> 00:08:44.540
And the feature was to insert web links or links back


00:08:44.540 --> 00:08:47.580
to articles on the Kite website related


00:08:47.580 --> 00:08:52.580
to the content of a user's code.


00:08:52.580 --> 00:08:57.140
So read the code, figure out which article would be relevant, and put links.


00:08:57.140 --> 00:09:02.300
I'm guessing the links go in the mini-map and not actually inserted in your code, hopefully.


00:09:02.300 --> 00:09:07.460
But the users were rightfully kind of ticked about this and said, "This isn't a feature,


00:09:07.460 --> 00:09:08.860
this is just blatant advertising."


00:09:08.860 --> 00:09:10.740
Well, I think there's two levels here.


00:09:10.740 --> 00:09:18.980
On one hand, the person who added that feature was the creator of the product.


00:09:18.980 --> 00:09:19.980
That's not great.


00:09:19.980 --> 00:09:25.060
If some other random person had come along and inserted this promo stuff into someone


00:09:25.060 --> 00:09:28.860
else's open source project, that would have been flat out terrible.


00:09:28.860 --> 00:09:36.260
This is, let's say, a little shady, I would say, in the spectrum in my mind.


00:09:36.260 --> 00:09:40.180
There's no point, well, there's very small points where this is actually going to benefit


00:09:40.180 --> 00:09:42.980
the users other than the one user who is kite.


00:09:42.980 --> 00:09:43.980
Yeah.


00:09:43.980 --> 00:09:49.500
Now if it was possibly suggesting, like lots of different articles from different, like


00:09:49.500 --> 00:09:52.300
different websites, it still would be weird.


00:09:52.300 --> 00:09:56.660
It's a completely unrelated thing, feature of it.


00:09:56.660 --> 00:09:57.660
I don't know.


00:09:57.660 --> 00:09:58.660
Yeah.


00:09:58.660 --> 00:10:05.340
The next one is, I had to look it up, but it's another atom add on, which is a autocomplete


00:10:05.340 --> 00:10:10.460
Python so that definitely relates to Python but it it didn't insert


00:10:10.460 --> 00:10:15.820
advertising but what it did do was it had the autocomplete was done using a


00:10:15.820 --> 00:10:22.340
local engine on the user's computer called Jedi and it got switched at one


00:10:22.340 --> 00:10:28.420
point to default to the kite engine which is a cloud-based engine so it


00:10:28.420 --> 00:10:34.140
would send all your code to kite kind of if somebody updated that plug-in wouldn't


00:10:34.140 --> 00:10:36.860
I don't think they would know that that was going on.


00:10:36.860 --> 00:10:38.580
>> Yeah. How would you even know?


00:10:38.580 --> 00:10:40.460
Look, the autocomplete is still working.


00:10:40.460 --> 00:10:44.740
Oh, wait. It's because my code is no longer on my machine. How strange.


00:10:44.740 --> 00:10:47.040
>> Apparently, this wasn't done by,


00:10:47.040 --> 00:10:49.160
I'm not sure who put that feature in,


00:10:49.160 --> 00:10:55.120
but the article suggests that instead of a purchase of the or a hire by Kite,


00:10:55.120 --> 00:11:00.120
it was just a bunch of Kite people were working on the plugin also and added this.


00:11:00.120 --> 00:11:06.440
Again, a lot of users weren't exactly supportive of that change and it is a bit weird.


00:11:06.440 --> 00:11:11.560
And basically that's I think the point of this article is to point out that we've got


00:11:11.560 --> 00:11:18.360
a lot of open source projects that are used by a lot of people, like a whole lot of people,


00:11:18.360 --> 00:11:27.160
and it only takes maybe one person, a core person, to be corrupted or influenced to basically


00:11:27.160 --> 00:11:32.580
make the package benefit a single company instead of the rest of the world, which it's


00:11:32.580 --> 00:11:34.420
problematic and interesting.


00:11:34.420 --> 00:11:41.480
So, yeah, it's definitely raises some interesting moral issues around open source.


00:11:41.480 --> 00:11:46.280
And what does it mean to make these types of changes when there's 3 million people already


00:11:46.280 --> 00:11:50.480
using your product, especially if those changes are invisible, if that means like privacy


00:11:50.480 --> 00:11:56.160
changes like your code is now going and being analyzed outside of your control rather than


00:11:56.160 --> 00:11:58.080
when you thought it wasn't, things like that.


00:11:58.080 --> 00:11:59.760
Like that autocomplete thing, what


00:11:59.760 --> 00:12:03.640
I guess I would have expected as an open source user is,


00:12:03.640 --> 00:12:07.640
I don't care really if a company has open source projects


00:12:07.640 --> 00:12:11.600
that they're maintaining that benefit their company.


00:12:11.600 --> 00:12:12.720
We're kind of used to that.


00:12:12.720 --> 00:12:14.560
And that's not terrible.


00:12:14.560 --> 00:12:16.680
But it's very out in the open.


00:12:16.680 --> 00:12:21.000
So I kind of would have expected them to fork that project


00:12:21.000 --> 00:12:24.100
and have a different autocomplete project that


00:12:24.100 --> 00:12:27.600
would go to the kite instead of using Jedi. That would have made more sense to me.


00:12:27.600 --> 00:12:30.800
Right, then you opt in. Yeah, if you opt into it you get better auto-complete. You


00:12:30.800 --> 00:12:36.400
might make that trade-off, right? Yeah, but anyway. Yeah, anyway. All right, well


00:12:36.400 --> 00:12:39.580
there it is. Everyone else, everyone could read it for themselves. It's a pretty


00:12:39.580 --> 00:12:45.600
interesting article there. So something I am much more comfortable with using on


00:12:45.600 --> 00:12:50.200
my projects is Rollbar. So you guys probably heard us talk about Rollbar


00:12:50.200 --> 00:12:56.280
before. It's super easy to integrate into your system. You just pip install rollbar and plug in


00:12:56.280 --> 00:13:00.680
your account key and you're basically ready to go. The idea is it will look at your code, especially


00:13:00.680 --> 00:13:05.240
your web apps while it's running. And if there are any errors, it will capture all the details about


00:13:05.240 --> 00:13:10.360
the errors, send it up to the cloud, send you notifications like to Slack, or you can get like


00:13:10.360 --> 00:13:15.680
emails and things like that. And usually don't even have to debug your code, you can just log in,


00:13:15.680 --> 00:13:22.960
see all the variables passed, the whole call stack, things like that, and just go and fix


00:13:22.960 --> 00:13:23.960
it.


00:13:23.960 --> 00:13:28.160
Half the time, it's really important to be notified right away when an error is happening


00:13:28.160 --> 00:13:32.400
rather than letting it go on for hours and finally somebody will vaguely send you a message


00:13:32.400 --> 00:13:34.880
like this button doesn't work anymore.


00:13:34.880 --> 00:13:36.640
What do you mean it doesn't work?


00:13:36.640 --> 00:13:39.240
Pip install rollbar and you'll be ready to roll.


00:13:39.240 --> 00:13:45.840
Check them out at pythonbytes.fm/rollbar and use it on pythonbytes.fm and other sites.


00:13:45.840 --> 00:13:46.840
It's great.


00:13:46.840 --> 00:13:47.840
Thanks, Rollbar.


00:13:47.840 --> 00:13:48.840
>> Thank you, Rollbar.


00:13:48.840 --> 00:13:52.560
>> You know, the news has been, journalism in general has been more interesting in the


00:13:52.560 --> 00:13:58.960
last six months, I would say, than it traditionally has.


00:13:58.960 --> 00:14:05.140
The thing that I want to talk about is, let's say, maybe a specialized screen scraping type


00:14:05.140 --> 00:14:07.280
of library called Newspaper.


00:14:07.280 --> 00:14:08.280
This is a Python package.


00:14:08.280 --> 00:14:11.640
PIP install newspaper type of thing.


00:14:11.640 --> 00:14:19.180
And the idea is you can point this at a URL for say like CNN or MSNBC or New York Times


00:14:19.180 --> 00:14:20.940
or something like that.


00:14:20.940 --> 00:14:26.160
And it will give you very detailed information that you might care about for news articles.


00:14:26.160 --> 00:14:27.240
Have you heard about this Brian?


00:14:27.240 --> 00:14:28.240
I haven't.


00:14:28.240 --> 00:14:29.380
Yeah, this is really slick.


00:14:29.380 --> 00:14:33.420
So you create I'll just give you like a little sense of the code because there's just a few


00:14:33.420 --> 00:14:34.940
steps like wow, that's sweet.


00:14:34.940 --> 00:14:40.900
So you create this article object and you pass it the URL to like some news item.


00:14:40.900 --> 00:14:43.460
You can download it and it'll just give you the content.


00:14:43.460 --> 00:14:45.620
You can parse it.


00:14:45.620 --> 00:14:48.660
And then you can ask it things like, who were the authors?


00:14:48.660 --> 00:14:53.220
And it will just give you a list that are just the names of the authors that already


00:14:53.220 --> 00:14:54.220
discovered.


00:14:54.220 --> 00:14:58.260
You can ask it when it was published, you can do NLP natural language processing on


00:14:58.260 --> 00:15:00.820
it just that's a function call that.


00:15:00.820 --> 00:15:02.620
And then you can ask what are the keywords?


00:15:02.620 --> 00:15:04.480
Give me the summary of this article.


00:15:04.480 --> 00:15:08.240
is the cover image of this article? All sorts of stuff like that. This is really


00:15:08.240 --> 00:15:12.880
cool if you work with like a news type data. Yeah, this is great. Isn't that cool? I mean if


00:15:12.880 --> 00:15:16.800
you... Yeah, especially if you, I guess you tie it to other ways you're gonna get


00:15:16.800 --> 00:15:21.840
different news articles to be able to parse some of this as a kind of little


00:15:21.840 --> 00:15:25.480
service. It'd be cool. Yeah, and I don't remember where you pointed to to get


00:15:25.480 --> 00:15:30.480
started, but you can also say what are all of the articles on this news site


00:15:30.480 --> 00:15:34.000
and then go ask these questions about each article and things like that. So


00:15:34.000 --> 00:15:35.360
So it's pretty slick.


00:15:35.360 --> 00:15:36.200
- I like it.


00:15:36.200 --> 00:15:37.400
- Yeah, it's a little bit of that import


00:15:37.400 --> 00:15:39.360
anti-gravity type thing, right?


00:15:39.360 --> 00:15:40.520
- Definitely.


00:15:40.520 --> 00:15:42.840
- I typed a few lines and it's rolling.


00:15:42.840 --> 00:15:44.120
Speaking of that, that might be--


00:15:44.120 --> 00:15:47.640
- But before we move on, the code example you talked about,


00:15:47.640 --> 00:15:49.880
you put it up on our show notes,


00:15:49.880 --> 00:15:52.200
and it really is just like 17 lines of code.


00:15:52.200 --> 00:15:53.840
It's pretty short, so.


00:15:53.840 --> 00:15:56.000
- Yeah, and like half of that is like showing you


00:15:56.000 --> 00:15:57.560
what's printed out, yeah.


00:15:57.560 --> 00:15:58.400
- Yeah.


00:15:58.400 --> 00:15:59.880
- Or maybe not half, but some of that.


00:15:59.880 --> 00:16:03.480
So this sort of really, this ability to grab these packages


00:16:03.480 --> 00:16:06.100
do amazing stuff in a few lines of code.


00:16:06.100 --> 00:16:07.100
Maybe that's why Python's popular.


00:16:07.100 --> 00:16:08.100
What do you think?


00:16:08.100 --> 00:16:09.340
Yeah, I think so.


00:16:09.340 --> 00:16:16.180
And we've gotten, there's an article from IEEE Spectrum called the top programming languages


00:16:16.180 --> 00:16:17.760
of 2017.


00:16:17.760 --> 00:16:19.980
And big surprise, we're number one.


00:16:19.980 --> 00:16:20.980
Yay.


00:16:20.980 --> 00:16:21.980
We're number one.


00:16:21.980 --> 00:16:22.980
Woohoo.


00:16:22.980 --> 00:16:23.980
Yeah, it's really cool.


00:16:23.980 --> 00:16:26.460
And it's number one in a lot of interesting ways.


00:16:26.460 --> 00:16:31.440
There's actually five measures, four of which mean anything to me.


00:16:31.440 --> 00:16:40.600
measure is the IEEE spectrum rate ranking. One is trending, one is jobs, and one is open.


00:16:40.600 --> 00:16:45.540
You can go over this like an interactive thing. The IEEE spectrum rating is all around. Trending


00:16:45.540 --> 00:16:52.040
is languages that are growing rapidly. Jobs are languages that are in demand by employers.


00:16:52.040 --> 00:16:57.600
Open is popular on open source hubs. You can also dig into it by embedded devices and things


00:16:57.600 --> 00:16:58.600
like that.


00:16:58.600 --> 00:16:59.880
This is an interactive thing.


00:16:59.880 --> 00:17:02.960
You can even customize your ranking


00:17:02.960 --> 00:17:06.120
for what's important for you, which is kind of fun.


00:17:06.120 --> 00:17:09.160
Right, like I care about enterprise development and jobs


00:17:09.160 --> 00:17:10.120
or something like this.


00:17:10.120 --> 00:17:11.400
And you can narrow that down.


00:17:11.400 --> 00:17:12.580
It's definitely interactive.


00:17:12.580 --> 00:17:14.560
So let me give you the numbers, Brian.


00:17:14.560 --> 00:17:17.920
So for trending, number one is Python.


00:17:17.920 --> 00:17:21.240
Close behind is C and C++, and then Java.


00:17:21.240 --> 00:17:23.280
And Swift is there as well.


00:17:23.280 --> 00:17:26.360
And then for jobs, actually Python is number three,


00:17:26.360 --> 00:17:29.360
but just like by 0.7%.


00:17:29.360 --> 00:17:31.240
So it goes Java, C, and then Python.


00:17:31.240 --> 00:17:34.280
And then for openness, Python is way back on top.


00:17:34.280 --> 00:17:35.880
And then custom, whatever that means.


00:17:35.880 --> 00:17:37.080
You gotta, that's make your own.


00:17:37.080 --> 00:17:38.000
- Yeah.


00:17:38.000 --> 00:17:39.400
Yeah, and my comment,


00:17:39.400 --> 00:17:42.160
I think that the reason why there's more Java jobs


00:17:42.160 --> 00:17:44.280
is because there's a whole bunch of Java programmers


00:17:44.280 --> 00:17:45.560
shifting to Python.


00:17:45.560 --> 00:17:48.640
- Right, like there used to be a lot of Cobalt jobs.


00:17:48.640 --> 00:17:50.200
But now Cobalt's growing,


00:17:50.200 --> 00:17:52.480
it's 'cause people gotta keep that stuff going.


00:17:52.480 --> 00:17:54.000
- Cobalt's still on the list.


00:17:54.000 --> 00:17:56.160
Wow, it's 24th in jobs.


00:17:56.160 --> 00:17:58.500
Yeah, man, that puppy's hanging in there.


00:17:58.500 --> 00:18:00.300
- Huh, poor people.


00:18:00.300 --> 00:18:01.140
- Yeah.


00:18:01.140 --> 00:18:02.620
- But assembly is like 11th.


00:18:02.620 --> 00:18:04.220
Wow, okay.


00:18:04.220 --> 00:18:05.060
Anyway.


00:18:05.060 --> 00:18:05.880
- Interesting.


00:18:05.880 --> 00:18:09.700
Yeah, so there's all these different measures and rankings


00:18:09.700 --> 00:18:11.700
and they all take different things into account.


00:18:11.700 --> 00:18:14.180
So you gotta take that with a bit of a grain of salt.


00:18:14.180 --> 00:18:17.820
But the one trend that seems to appear across all of these


00:18:17.820 --> 00:18:19.340
is Python is very high in the list


00:18:19.340 --> 00:18:21.940
and is growing more popular higher up on the list.


00:18:21.940 --> 00:18:24.580
So that's great thing for betting your career,


00:18:24.580 --> 00:18:27.880
your next bit of career and your energy on focusing on Python,


00:18:27.880 --> 00:18:28.380
I think.


00:18:28.380 --> 00:18:28.880
Yep.


00:18:28.880 --> 00:18:32.620
And also, IEEE is respected by a lot of people.


00:18:32.620 --> 00:18:36.260
But they also, right here, openly show you


00:18:36.260 --> 00:18:38.500
what they used for their methodology of how


00:18:38.500 --> 00:18:39.300
they rank things.


00:18:39.300 --> 00:18:44.500
And it's nothing surprising, combination of Stack Overflow


00:18:44.500 --> 00:18:48.160
and Trends and Twitter, and including articles


00:18:48.160 --> 00:18:50.460
in their IEEE Explore digital library.


00:18:50.460 --> 00:18:52.560
So that's not surprising.


00:18:52.560 --> 00:18:54.760
but it's cool that they just show you what all those are.


00:18:54.760 --> 00:18:56.520
- Right, so when they say it's popular in jobs,


00:18:56.520 --> 00:18:58.980
that means 'cause they're crawling Stack Overflow jobs,


00:18:58.980 --> 00:19:01.240
probably Career Builder, Dice, those types.


00:19:01.240 --> 00:19:03.440
- Yeah, I didn't know Dice was still around.


00:19:03.440 --> 00:19:07.240
But no offense to all the Dice people out there.


00:19:07.240 --> 00:19:08.760
- MySpace is still around.


00:19:08.760 --> 00:19:09.600
- MySpace.


00:19:09.600 --> 00:19:13.320
- AOL is still around, okay.


00:19:13.320 --> 00:19:16.280
So, last thing I wanna share with you guys


00:19:16.280 --> 00:19:20.200
is recently the SciPy 2017 conference


00:19:20.200 --> 00:19:23.040
happened in Seattle here in the US.


00:19:23.040 --> 00:19:28.920
And like many of these conferences, the videos and tutorials were recorded, put on YouTube,


00:19:28.920 --> 00:19:30.760
and you can go check them out.


00:19:30.760 --> 00:19:34.280
So there's a ton of tutorials if you want to get into data science.


00:19:34.280 --> 00:19:38.760
The keynote was something I haven't had a chance to watch it yet, but it sounds really


00:19:38.760 --> 00:19:41.380
interesting coding for science and innovation.


00:19:41.380 --> 00:19:42.680
Like who wouldn't want to do that?


00:19:42.680 --> 00:19:43.680
That sounds awesome.


00:19:43.680 --> 00:19:47.680
Yeah, then we've got dash, which we've talked about, you've talked about for a new framework


00:19:47.680 --> 00:19:51.840
for building user interface and technical computing stuff.


00:19:51.840 --> 00:19:54.840
And then similar spelling, totally different thing,


00:19:54.840 --> 00:19:59.680
is Dask for like parallelized processing data pipelines.


00:19:59.680 --> 00:20:02.320
We've got Scientific Analysis at Scale,


00:20:02.320 --> 00:20:05.560
a comparison of five systems with Jake VanderPlas.


00:20:05.560 --> 00:20:08.280
And Academic Open Source, which I


00:20:08.280 --> 00:20:11.040
think is pretty cool for groups, people in that area.


00:20:11.040 --> 00:20:12.840
So tons and tons of videos.


00:20:12.840 --> 00:20:15.280
These are just a few I grabbed to give you guys a flavor of what's


00:20:15.280 --> 00:20:15.720
out there.


00:20:15.720 --> 00:20:17.120
Yeah, that was in Seattle.


00:20:17.120 --> 00:20:18.080
- Man, I wish I would have gone.


00:20:18.080 --> 00:20:20.000
- Yeah, I know, I was planning on going,


00:20:20.000 --> 00:20:21.880
but I couldn't quite make it.


00:20:21.880 --> 00:20:23.000
- Yeah, I'm glad-- - A little too hectic


00:20:23.000 --> 00:20:23.840
at the time.


00:20:23.840 --> 00:20:24.680
- I'm glad the videos are out there.


00:20:24.680 --> 00:20:25.880
I'll have to check some of those out.


00:20:25.880 --> 00:20:27.680
- Yep, and I think I just got a notice


00:20:27.680 --> 00:20:30.600
that PyCon Canada call for proposals


00:20:30.600 --> 00:20:32.600
opened today or yesterday.


00:20:32.600 --> 00:20:34.480
So, speaking of conferences,


00:20:34.480 --> 00:20:37.120
if you want to speak at the other major,


00:20:37.120 --> 00:20:39.960
major Python conference in North America,


00:20:39.960 --> 00:20:41.560
it's time to submit the proposals.


00:20:41.560 --> 00:20:43.160
- Do you know which Canada it is?


00:20:43.160 --> 00:20:45.080
The left Canada or the right Canada?


00:20:45.080 --> 00:20:47.080
- I think it's the right Canada.


00:20:47.080 --> 00:20:48.080
It's in Montreal.


00:20:48.080 --> 00:20:48.920
- Okay.


00:20:48.920 --> 00:20:51.160
(laughing)


00:20:51.160 --> 00:20:54.880
- All right, well that's it for our news, Brian.


00:20:54.880 --> 00:20:56.400
Anything else you want to share with everyone?


00:20:56.400 --> 00:21:00.680
- I am closingly done, almost done with the book.


00:21:00.680 --> 00:21:03.260
I wanted to try to get it done last night at midnight,


00:21:03.260 --> 00:21:05.120
but I've got a few hours left,


00:21:05.120 --> 00:21:09.340
but I'm super excited to get the Python testing book out


00:21:09.340 --> 00:21:10.520
to everybody.


00:21:10.520 --> 00:21:12.840
- Yeah, and that's been a big success.


00:21:12.840 --> 00:21:15.120
People are responding well to it, so congratulations.


00:21:15.120 --> 00:21:15.960
- Thanks.


00:21:15.960 --> 00:21:16.780
How about you?


00:21:16.780 --> 00:21:19.220
Nothing too new, just cranking along.


00:21:19.220 --> 00:21:21.820
Yeah, a bunch of stuff's going on.


00:21:21.820 --> 00:21:25.860
Enjoying summer, enjoying working on Python stuff, but nothing specific.


00:21:25.860 --> 00:21:28.220
Speaking of summer, you've got a vacation coming up.


00:21:28.220 --> 00:21:29.220
I do.


00:21:29.220 --> 00:21:33.660
I have a semi-work travel vacation, more vacation-ish stuff.


00:21:33.660 --> 00:21:35.740
I'm going to be out for four weeks.


00:21:35.740 --> 00:21:37.860
Probably not next week, but the week after.


00:21:37.860 --> 00:21:41.300
We're going to see what we can do about lining up some guest co-hosts.


00:21:41.300 --> 00:21:42.780
Keep the show rolling.


00:21:42.780 --> 00:21:45.620
No concrete details there.


00:21:45.620 --> 00:21:46.620
There may be.


00:21:46.620 --> 00:21:50.860
Yeah, at the very least, we'll have one more episode and there may be a gap, but we're


00:21:50.860 --> 00:21:52.220
going to try to not have a gap.


00:21:52.220 --> 00:21:53.580
We're going to try not to have a gap.


00:21:53.580 --> 00:21:54.580
That's right.


00:21:54.580 --> 00:21:59.140
Well, we'll see what we can do about recording either on the road or, or wrangling some people


00:21:59.140 --> 00:22:01.780
into being a co host.


00:22:01.780 --> 00:22:02.780
So we'll see.


00:22:02.780 --> 00:22:04.180
We'll keep it rolling as best we can.


00:22:04.180 --> 00:22:05.180
All right.


00:22:05.180 --> 00:22:06.180
All right.


00:22:06.180 --> 00:22:07.180
Well, thanks, Brian.


00:22:07.180 --> 00:22:08.180
Thanks, everyone for listening.


00:22:08.180 --> 00:22:09.180
Yep.


00:22:09.180 --> 00:22:10.180
Bye.


00:22:10.180 --> 00:22:11.180
Thank you for listening to Python Bytes.


00:22:11.180 --> 00:22:13.900
Follow the show on Twitter via @PythonBytes.


00:22:13.900 --> 00:22:20.780
Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm. If you have a news


00:22:20.780 --> 00:22:25.500
item you want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout


00:22:25.500 --> 00:22:30.860
for sharing something cool. On behalf of myself and Brian Aukin, this is Michael Kennedy. Thank


00:22:30.860 --> 00:22:33.980
you for listening and sharing this podcast with your friends and colleagues.

