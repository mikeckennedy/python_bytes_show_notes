WEBVTT

00:00:00.001 --> 00:00:05.920
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.920 --> 00:00:13.720
This is episode 36, recorded July 26, 2017. I'm Michael Kennedy.

00:00:13.720 --> 00:00:14.680
And I'm Brian Okken.

00:00:14.680 --> 00:00:18.640
And we got some great stuff lined up for you. Very cool news in the Python space.

00:00:18.640 --> 00:00:22.060
Before we get to it, just want to say Rollbar is sponsoring this episode.

00:00:22.060 --> 00:00:25.840
They've got a really great offer for you at pythonbytes.fm/rollbar.

00:00:25.840 --> 00:00:30.200
I'll tell you more about that later. Right now, Brian, I would like you to tell me some poetry.

00:00:30.200 --> 00:00:31.460
Read me something beautiful.

00:00:31.460 --> 00:00:35.160
So it's poetry hour at Python Bytes. No.

00:00:35.160 --> 00:00:43.500
I started at a community college and then I switched to a university of Oregon to start the computer science program.

00:00:43.500 --> 00:00:49.160
And one of the first classes I was in, before we got into like actually the technical stuff,

00:00:49.160 --> 00:00:52.980
my professor said, you need to think about your code like poetry.

00:00:52.980 --> 00:00:54.800
It should be pretty to look at.

00:00:55.380 --> 00:00:57.000
And it's kind of stuck with me.

00:00:57.000 --> 00:00:58.260
I like that lesson.

00:00:58.260 --> 00:01:01.160
This article, there's an article by Trey Hunter.

00:01:01.160 --> 00:01:04.760
And it's called Craft Your Python Like Poetry.

00:01:04.760 --> 00:01:06.480
Just some decent advice.

00:01:06.480 --> 00:01:10.920
Your code shouldn't really look like prose from a novel.

00:01:10.920 --> 00:01:12.440
It should look more like poetry.

00:01:12.440 --> 00:01:15.920
And it's not just pretty for pretty's sake.

00:01:15.920 --> 00:01:19.540
It's more readable when it's visually appealing, I think.

00:01:19.820 --> 00:01:22.960
And he brings up line length is important.

00:01:22.960 --> 00:01:25.020
Although shorter is more readable.

00:01:25.020 --> 00:01:28.980
But man, he recommends 55 character line lengths.

00:01:28.980 --> 00:01:30.880
And that's pretty short.

00:01:30.880 --> 00:01:33.000
I think there's a real tension in this one.

00:01:33.000 --> 00:01:34.980
Although I do agree that line length matters.

00:01:34.980 --> 00:01:38.600
And I prefer to have shorter is better in some ways.

00:01:39.680 --> 00:01:47.540
However, one of the real tensions I find here is another good practice is to have descriptive variable names.

00:01:47.540 --> 00:01:51.860
And sometimes that means longer than X, Y, and Z for your variable names.

00:01:51.900 --> 00:02:02.020
And if you start doing expressions involving those like this times that past this, that can get them huge really quickly just by virtue of putting long function names alongside long variable names.

00:02:02.020 --> 00:02:02.300
Yeah.

00:02:02.300 --> 00:02:04.240
There is some tension there.

00:02:04.240 --> 00:02:18.420
And also, in working with data and tables and stuff, I do find tables that look like tables instead of looking crammed all the way to the left-hand side are more visually readable.

00:02:18.700 --> 00:02:31.320
Anyway, getting over the line length thing, he does have a lot of good comments about when you do have to continue a line to make it shorter, like do a line break, where you do it makes a big difference.

00:02:31.320 --> 00:02:33.380
And he has some examples to make.

00:02:33.380 --> 00:02:41.000
Making line break or broken comprehensions and more readable and function call parameters.

00:02:41.840 --> 00:02:48.720
And then one of the things, maybe this is a functional programming thing, but chained function calls, I probably just don't do that very much.

00:02:48.720 --> 00:02:53.040
But the dot alignment, he noted, looks pretty nice.

00:02:53.040 --> 00:03:00.800
The last one that I saw, which I kind of do anyway, I didn't realize that some people don't do this, is dictionary literals.

00:03:00.800 --> 00:03:10.040
So if you set up a dictionary that's kind of like an enum list, it's basically just a predefined dictionary literal.

00:03:10.040 --> 00:03:14.080
Having one element per line makes it a lot more readable.

00:03:14.080 --> 00:03:16.700
But then there's, you know, there's always trade-offs.

00:03:16.700 --> 00:03:20.240
There's a, if you've got a really large one, there's vertical.

00:03:20.240 --> 00:03:22.820
Vertical length is important as well.

00:03:22.820 --> 00:03:27.620
And having a super long program might not be as easy to read as a shorter one.

00:03:27.620 --> 00:03:28.040
I don't know.

00:03:28.140 --> 00:03:29.260
Yeah, I'm with you on that.

00:03:29.260 --> 00:03:32.620
Let me throw in one more that I don't think is covered in here.

00:03:32.620 --> 00:03:33.580
Maybe I just missed it.

00:03:33.580 --> 00:03:37.520
Is function length, right?

00:03:37.520 --> 00:03:40.860
Just the idea of breaking your program into little tiny bits.

00:03:40.860 --> 00:03:44.520
Little small, reasonable, easily understandable pieces.

00:03:44.520 --> 00:03:49.180
You know, kind of like a haiku, I guess, rather than a long, flowing poem.

00:03:49.180 --> 00:03:49.660
Right.

00:03:49.660 --> 00:03:53.340
And also, I guess on that, it doesn't talk about white space too much.

00:03:53.340 --> 00:04:05.000
But there's a white space, even within a function, breaking up the different parts of when you're working with setting up the data versus other things to break it up by white space.

00:04:05.140 --> 00:04:11.280
Similar to how long poems are broken into little stanzas or something.

00:04:11.280 --> 00:04:11.600
Yeah.

00:04:11.600 --> 00:04:11.620
Yeah.

00:04:11.620 --> 00:04:19.500
You know, thinking about this, one of the things that strikes me is the way that your code looks and breaking it down like this and kind of thinking about it this way.

00:04:20.500 --> 00:04:27.160
It's a big sign of sort of professional developer versus somebody just learning, somebody just poking around who's not really a developer.

00:04:27.160 --> 00:04:31.120
Like professional developer's code looks like these types of things.

00:04:31.120 --> 00:04:34.620
It's clearly structured beyond just what the language requires.

00:04:34.620 --> 00:04:36.840
And a lot of times people are new.

00:04:36.840 --> 00:04:38.720
They just kind of mush it all together.

00:04:38.720 --> 00:04:44.020
So if you're looking to come across better with your code, I guess, think about that as well.

00:04:44.020 --> 00:04:44.260
Yeah.

00:04:44.260 --> 00:04:45.060
Okay.

00:04:45.060 --> 00:04:45.420
Yeah.

00:04:45.420 --> 00:04:52.760
So I want to bring everyone's attention to this thing called Fedora Python Classroom Lab.

00:04:52.760 --> 00:04:53.440
Okay.

00:04:53.440 --> 00:04:57.540
So the idea is Fedora, it's a Linux distribution, really nice one.

00:04:57.540 --> 00:05:06.420
And what they've built is basically Python and data science, Python-based data science in a box.

00:05:06.420 --> 00:05:09.060
So, or rather in an ISO.

00:05:09.060 --> 00:05:16.380
What you can do is you can get just the ISO DVD image of this Fedora Python Classroom.

00:05:16.380 --> 00:05:20.160
You can mount it and literally just boot straight to this thing.

00:05:20.160 --> 00:05:24.100
It fires up Fedora and you can log in without even installing it.

00:05:24.100 --> 00:05:24.920
Log in.

00:05:24.920 --> 00:05:33.140
You have access to NumPy, SciPy, IPython, Matplotlib, requests, all the various most common packages.

00:05:33.440 --> 00:05:35.260
And it's just up and ready to go.

00:05:35.260 --> 00:05:36.700
So that's really sweet.

00:05:36.700 --> 00:05:44.200
You have the GUI, GNOME-based version or you have a Docker or Vagrant, no UI variant.

00:05:44.200 --> 00:05:48.540
So all sorts of stuff is just set up and ready to go.

00:05:48.540 --> 00:05:52.960
So if you're going to teach Python and you're thinking of maybe using Linux to do it anyway,

00:05:52.960 --> 00:05:56.220
here's a really nice thing you can hand out to the students and just say,

00:05:56.220 --> 00:06:02.800
boot from this DVD or this image or create a virtual machine based off of it and you're ready to roll.

00:06:02.920 --> 00:06:03.360
Oh, that's cool.

00:06:03.360 --> 00:06:03.600
Yeah.

00:06:03.600 --> 00:06:08.340
I originally thought this was a thing I downloaded inside Fedora and logged into Fedora.

00:06:08.340 --> 00:06:09.640
I'm like, wait, where's all this stuff?

00:06:09.640 --> 00:06:12.300
Oh, it's actually its own copy of Fedora.

00:06:12.300 --> 00:06:17.060
So this is its own Linux plus pre-configured Python stuff.

00:06:17.060 --> 00:06:17.380
Wow.

00:06:17.380 --> 00:06:19.180
Yeah, that's pretty cool, right?

00:06:19.180 --> 00:06:19.660
Yeah, everything.

00:06:19.660 --> 00:06:19.960
Yeah.

00:06:19.960 --> 00:06:21.180
Including talks in there.

00:06:21.180 --> 00:06:21.780
Nice.

00:06:21.780 --> 00:06:22.260
Yeah.

00:06:22.260 --> 00:06:23.240
It's already rolled.

00:06:23.240 --> 00:06:25.000
Multiple versions of Python, everything.

00:06:25.000 --> 00:06:29.120
So you have some less than amazing news for what's up next.

00:06:29.340 --> 00:06:34.760
So we previously talked about this really cool concept called Kite, which it would take your code

00:06:34.760 --> 00:06:40.960
and it would take a lot of stuff you would do as a developer on your system and it would

00:06:40.960 --> 00:06:42.560
add smart, right?

00:06:42.560 --> 00:06:46.400
It would add auto-completion even where there wasn't and these types of things.

00:06:46.400 --> 00:06:50.220
But it turns out there was a few drawbacks just conceptually around it.

00:06:50.280 --> 00:06:55.180
But there's also a bit of a toss-up about actually their behavior.

00:06:55.180 --> 00:06:55.820
What's up with this?

00:06:55.820 --> 00:06:56.080
Yeah.

00:06:56.080 --> 00:07:02.640
So I was, especially because we had covered it, my reluctance to this product to start

00:07:02.640 --> 00:07:05.940
with was that they would, it's all cloud-based stuff.

00:07:05.940 --> 00:07:10.460
So they would send your code in order to give you hints and stuff.

00:07:10.460 --> 00:07:13.080
It would send your code to their company.

00:07:13.540 --> 00:07:17.520
And then, and you just kind of have to trust that they're not going to do anything evil

00:07:17.520 --> 00:07:17.900
with it.

00:07:17.900 --> 00:07:18.080
Yeah.

00:07:18.080 --> 00:07:20.320
I was a little reluctant at that as well.

00:07:20.320 --> 00:07:24.800
Like if, when I was playing with it, I put it on a section and you can say this subset

00:07:24.800 --> 00:07:27.020
of your hard drive, it can like interact with.

00:07:27.020 --> 00:07:32.160
And I gave it a section where I didn't have like things that had, you know, API keys and

00:07:32.160 --> 00:07:32.340
stuff.

00:07:32.340 --> 00:07:35.820
It was just like me playing around, but still it is a bit of a hesitation, but that's not

00:07:35.820 --> 00:07:37.100
really what we're talking about, is it?

00:07:37.100 --> 00:07:37.460
No.

00:07:37.460 --> 00:07:42.740
What we're talking about, there's a article that came out on, I'd never seen this site before

00:07:42.740 --> 00:07:49.240
the outline.com, which is a article called how a VC funded company is undermining the open

00:07:49.240 --> 00:07:50.120
source community.

00:07:50.120 --> 00:07:56.760
And it's, it's about some underhanded or at least some accusations of underhanded tactics

00:07:56.760 --> 00:07:57.620
by kite.

00:07:57.620 --> 00:08:04.620
So here's the story is it's about two add ons to Adam, the text editor, Adam.

00:08:04.620 --> 00:08:11.780
And one of them is a mini map, which is I'm supposedly downloaded over three and a half million

00:08:11.780 --> 00:08:12.120
times.

00:08:12.120 --> 00:08:15.240
So it's well used and it's developed by one person.

00:08:15.240 --> 00:08:19.500
And I'm guessing mini map is similar to the, like the map feature and sublime or something.

00:08:19.500 --> 00:08:24.240
But the one developer, Abe 33 was hired by kite.

00:08:24.240 --> 00:08:32.840
And then after being hired by kite inserted a, or updated the plugin with, with a kite promotion

00:08:32.840 --> 00:08:33.400
feature.

00:08:33.600 --> 00:08:37.600
That was actually the get law, the get commit log was added kite promotion

00:08:37.600 --> 00:08:38.840
feature or something like this, right?

00:08:38.840 --> 00:08:39.320
Yeah.

00:08:39.320 --> 00:08:47.400
And the feature was to insert web links or links back to articles on the kite website related

00:08:47.400 --> 00:08:52.120
to the content of a user's code.

00:08:52.120 --> 00:08:57.100
So read the code, figure out which article would be relevant and put links.

00:08:57.100 --> 00:09:01.540
I'm guessing the links go in the mini map and not actually inserted in your code, hopefully.

00:09:01.920 --> 00:09:07.260
But the users were rightfully kind of ticked about this and said, this isn't a feature.

00:09:07.260 --> 00:09:08.720
This is just blatant advertising.

00:09:08.720 --> 00:09:10.600
Well, I think there's two levels here.

00:09:10.760 --> 00:09:17.580
On one hand, the person who added that feature was the creator of the product, right?

00:09:17.580 --> 00:09:19.680
So that's not great.

00:09:19.680 --> 00:09:25.560
If, if some other random person had come along and inserted this promo stuff into someone else's

00:09:25.560 --> 00:09:27.840
open source project, that would have been flat out terrible.

00:09:27.840 --> 00:09:34.420
This is, let's say a little shady, I would say in, in the spectrum, in my mind, this is

00:09:34.420 --> 00:09:37.120
like, it's not, there's, there's no point.

00:09:37.120 --> 00:09:41.080
Well, there's very small points where this is actually going to benefit the users other

00:09:41.080 --> 00:09:42.780
than the one user who is kite.

00:09:42.780 --> 00:09:43.140
Yeah.

00:09:43.140 --> 00:09:49.440
Now, if it was possibly suggesting like lots of different articles from different, like

00:09:49.440 --> 00:09:51.720
different websites, it still would be weird.

00:09:51.720 --> 00:09:56.360
It's a, it's a completely unrelated thing feature of it.

00:09:56.360 --> 00:09:57.100
I don't know.

00:09:57.100 --> 00:09:57.540
Yeah.

00:09:57.540 --> 00:10:03.360
The, the next one is a, it's, I had to look it up, but it's another Adam add-on,

00:10:03.360 --> 00:10:05.760
which is a autocomplete Python.

00:10:06.480 --> 00:10:11.680
So that definitely relates to Python, but it, it didn't insert advertising, but what

00:10:11.680 --> 00:10:18.280
it did do was it had the autocomplete was done using a local engine on the user's computer

00:10:18.280 --> 00:10:19.120
called Jedi.

00:10:19.120 --> 00:10:27.060
And it got switched at one point to default to the kite engine, which is a cloud-based

00:10:27.060 --> 00:10:27.460
engine.

00:10:27.700 --> 00:10:31.060
So it would send all your code to kite.

00:10:31.060 --> 00:10:35.520
Kind of, if somebody updated that plugin, wouldn't they would, I don't think they would

00:10:35.520 --> 00:10:36.820
know that that was going on.

00:10:36.820 --> 00:10:37.040
Yeah.

00:10:37.040 --> 00:10:38.140
How would you even know?

00:10:38.140 --> 00:10:38.400
Right.

00:10:38.400 --> 00:10:40.400
I mean, look, the autocomplete still working.

00:10:40.400 --> 00:10:40.920
Oh, wait.

00:10:40.920 --> 00:10:43.760
It's because my code's no longer on my machine.

00:10:43.760 --> 00:10:44.600
How strange.

00:10:44.780 --> 00:10:50.300
And apparently this wasn't done by, I'm not sure who put that feature in, but the article

00:10:50.300 --> 00:10:57.060
suggests that instead of a purchase of the, or a hire by kite, it was just a bunch of kite

00:10:57.060 --> 00:10:59.680
people were working on the plugin also and added this.

00:10:59.680 --> 00:11:04.200
Again, users aren't, a lot of users weren't exactly supportive of that change.

00:11:04.200 --> 00:11:05.460
And it is a bit weird.

00:11:05.460 --> 00:11:11.600
And basically that's, I think the point of this article is to point out that we've got

00:11:11.600 --> 00:11:16.880
a lot of, a lot of open source projects that are used by a lot of people, like a whole lot

00:11:16.880 --> 00:11:17.300
of people.

00:11:17.300 --> 00:11:27.060
And it only takes maybe one person, a core person to be corrupted or influenced to basically

00:11:27.060 --> 00:11:32.440
make the package benefit a single company instead of the rest of the world, which yeah, it's

00:11:32.440 --> 00:11:34.360
problematic and interesting.

00:11:34.360 --> 00:11:41.240
Yeah, it's definitely raises some interesting moral issues around open source.

00:11:41.240 --> 00:11:46.280
And what does it mean to make these types of changes when there's 3 million people already

00:11:46.280 --> 00:11:50.860
using your product, especially if those changes are invisible, if that means like privacy changes,

00:11:50.860 --> 00:11:56.800
like your code is now going and being analyzed outside of your control rather than when you thought

00:11:56.800 --> 00:11:57.760
it wasn't, things like that.

00:11:57.760 --> 00:11:59.380
Yeah, like that autocomplete thing.

00:11:59.380 --> 00:12:04.760
What I guess I would have expected as an open source user is I don't care really if

00:12:04.760 --> 00:12:10.700
a company has a, has a open source projects that, that they're maintaining that benefit their

00:12:10.700 --> 00:12:11.140
company.

00:12:11.140 --> 00:12:16.220
We're kind of used to that and, and that's not terrible, but it's very out in the open.

00:12:16.440 --> 00:12:22.620
So I would kind of would have expected them to like fork that project and have a different

00:12:22.620 --> 00:12:25.980
autocomplete project that would go to the kite instead of using Jedi.

00:12:25.980 --> 00:12:27.660
That would have made more sense to me.

00:12:27.660 --> 00:12:27.880
Right.

00:12:27.880 --> 00:12:28.600
Then you opt in.

00:12:28.600 --> 00:12:28.860
Yeah.

00:12:28.860 --> 00:12:30.640
If you opt into it, you get better autocomplete.

00:12:30.640 --> 00:12:31.840
You might make that trade off.

00:12:31.840 --> 00:12:32.180
Right.

00:12:32.360 --> 00:12:32.640
Yeah.

00:12:32.640 --> 00:12:34.540
But anyway.

00:12:34.540 --> 00:12:34.980
Yeah.

00:12:34.980 --> 00:12:35.380
Anyway.

00:12:35.380 --> 00:12:36.260
All right.

00:12:36.260 --> 00:12:37.020
Well, there it is.

00:12:37.020 --> 00:12:39.160
Everyone else, everyone can read it for themselves.

00:12:39.160 --> 00:12:40.840
It's a pretty interesting article there.

00:12:40.840 --> 00:12:47.520
So something I am much more comfortable with using on my projects is rollbar.

00:12:47.520 --> 00:12:50.540
So you guys probably heard us talk about rollbar before.

00:12:50.540 --> 00:12:53.440
It's super easy to integrate into your system.

00:12:53.540 --> 00:12:58.280
You just pip install rollbar and plug in your account key and you're basically ready to go.

00:12:58.280 --> 00:13:01.860
The idea is it will look at your code, especially your web apps while it's running.

00:13:01.860 --> 00:13:06.800
And if there are any errors, it will capture all the details about the errors, send it up

00:13:06.800 --> 00:13:11.380
to the cloud, send you notifications like the Slack, or you can get like emails and things

00:13:11.380 --> 00:13:11.800
like that.

00:13:11.800 --> 00:13:14.760
And usually don't even have to debug your code.

00:13:14.760 --> 00:13:20.220
You can just log in, see all the variables passed, the whole call, you know, call stack,

00:13:20.220 --> 00:13:23.060
things like that, and just go and fix it.

00:13:23.060 --> 00:13:28.160
So half the time, it's really important to be notified right away when an error is happening

00:13:28.160 --> 00:13:30.000
rather than letting it go on for hours.

00:13:30.000 --> 00:13:33.900
And finally, somebody will vaguely send you a message like this button doesn't work anymore.

00:13:33.900 --> 00:13:35.720
What do you mean it doesn't work?

00:13:35.720 --> 00:13:39.060
So pip install rollbar and you'll be ready to roll.

00:13:39.060 --> 00:13:45.760
Check them out at pythonbytes.fm/rollbar and use it on pythonbytes.fm and other sites.

00:13:45.760 --> 00:13:46.100
It's great.

00:13:46.100 --> 00:13:46.980
So thanks, rollbar.

00:13:46.980 --> 00:13:47.680
Thank you, rollbar.

00:13:47.680 --> 00:13:53.000
You know, the news has been, journalism in general has been more interesting in the last,

00:13:53.000 --> 00:13:56.080
six months, I would say, than it traditionally has.

00:13:56.080 --> 00:13:57.520
Yes.

00:13:57.520 --> 00:14:04.040
And the thing that I want to talk about is like, let's say it may be a specialized screen

00:14:04.040 --> 00:14:06.940
scraping type of library called newspaper.

00:14:06.940 --> 00:14:10.300
So this is a Python package, pip install newspaper type of thing.

00:14:11.160 --> 00:14:19.500
And the idea is you can point this at a URL for say like CNN or MSNBC or New York Times or something

00:14:19.500 --> 00:14:20.100
like that.

00:14:20.100 --> 00:14:26.140
And it will give you very detailed information that you might care about for news articles.

00:14:26.140 --> 00:14:27.100
Have you heard about this, Brian?

00:14:27.100 --> 00:14:27.780
I haven't.

00:14:27.840 --> 00:14:29.240
Yeah, this is really slick.

00:14:29.240 --> 00:14:33.480
So you create, I'll just give you like a little sense of the code because there's just a few

00:14:33.480 --> 00:14:33.760
steps.

00:14:33.760 --> 00:14:34.560
You're like, wow, that's sweet.

00:14:34.560 --> 00:14:40.060
So you create this article object and you pass it, the URL to like some news item.

00:14:40.060 --> 00:14:43.100
You can download it and it'll just give you the content.

00:14:43.100 --> 00:14:44.580
You can parse it.

00:14:45.240 --> 00:14:48.500
And then you can ask it things like, who were the authors?

00:14:48.500 --> 00:14:53.520
And it will just give you a list that are just the names of the authors that already discovered.

00:14:53.520 --> 00:14:55.600
You can ask it when it was published.

00:14:55.600 --> 00:14:58.440
You can do NLP, natural language processing on it.

00:14:58.440 --> 00:14:59.440
Just that's a function.

00:14:59.440 --> 00:14:59.900
Call that.

00:14:59.900 --> 00:15:02.260
And then you can ask, what are the keywords?

00:15:02.260 --> 00:15:04.160
Give me the summary of this article.

00:15:04.160 --> 00:15:06.360
What is the cover image of this article?

00:15:06.360 --> 00:15:07.560
All sorts of stuff like that.

00:15:07.560 --> 00:15:10.580
This is really cool if you work with like a news type data.

00:15:10.580 --> 00:15:12.120
Yeah, this is great.

00:15:12.120 --> 00:15:12.560
Isn't that cool?

00:15:12.560 --> 00:15:16.540
I mean, if you, yeah, especially if you, I guess you tie it to other ways, you're going

00:15:16.540 --> 00:15:22.380
to get different news articles to be able to parse some of this as a kind of little service.

00:15:22.380 --> 00:15:23.300
It'd be cool.

00:15:23.300 --> 00:15:23.560
Yeah.

00:15:23.560 --> 00:15:27.800
And I don't remember where you pointed to to get started, but you can also say, what are

00:15:27.800 --> 00:15:30.540
all of the articles on this new site?

00:15:30.540 --> 00:15:33.740
And then go ask these questions about each article and things like that.

00:15:33.740 --> 00:15:35.300
So it's, it's, it's pretty slick.

00:15:35.300 --> 00:15:35.720
I like it.

00:15:35.720 --> 00:15:35.920
Yeah.

00:15:35.920 --> 00:15:38.540
It's a little bit of that import anti-gravity type thing.

00:15:38.540 --> 00:15:38.880
That's right.

00:15:38.880 --> 00:15:39.700
Definitely.

00:15:39.700 --> 00:15:42.360
I typed a few lines and it's rolling.

00:15:42.360 --> 00:15:43.980
And speaking of that, that might be.

00:15:43.980 --> 00:15:48.300
But before we move on, the code example you talked about, you, you put it

00:15:48.300 --> 00:15:52.000
up on our show notes and it really is just like 17 lines of code.

00:15:52.000 --> 00:15:53.360
It's pretty short.

00:15:53.360 --> 00:15:53.700
So.

00:15:53.700 --> 00:15:54.000
Yeah.

00:15:54.000 --> 00:15:56.700
And like half of that is like showing you what's printed out.

00:15:56.700 --> 00:15:56.940
Yeah.

00:15:56.940 --> 00:15:57.700
Yeah.

00:15:57.700 --> 00:15:59.120
Maybe not half, but some of that.

00:15:59.120 --> 00:16:04.500
So this sort of really, this, this ability to grab these packages and do amazing stuff

00:16:04.500 --> 00:16:05.580
in a few lines of code.

00:16:05.580 --> 00:16:07.180
Maybe that's why Python's popular.

00:16:07.180 --> 00:16:07.640
What do you think?

00:16:07.740 --> 00:16:07.980
Yeah.

00:16:07.980 --> 00:16:08.840
I think so.

00:16:08.840 --> 00:16:15.680
And, we've gotten, there's an article from I triple E spectrum called the top programming

00:16:15.680 --> 00:16:17.000
languages of 2017.

00:16:17.000 --> 00:16:18.800
And big surprise.

00:16:18.800 --> 00:16:19.700
We're number one.

00:16:19.700 --> 00:16:20.460
Yay.

00:16:20.460 --> 00:16:21.280
We're number one.

00:16:21.280 --> 00:16:21.460
Woo.

00:16:21.860 --> 00:16:22.180
Yeah.

00:16:22.180 --> 00:16:23.880
It's, it's really cool.

00:16:23.880 --> 00:16:26.300
And it's number one in a lot of interesting ways.

00:16:26.300 --> 00:16:29.720
There's actually five measures for which mean anything to me.

00:16:29.720 --> 00:16:34.280
One, one measure is the I triple E spectrum rate, ranking.

00:16:34.280 --> 00:16:36.040
One is trending.

00:16:36.040 --> 00:16:38.460
One is jobs and one is open.

00:16:38.460 --> 00:16:42.200
And so it's kind of, you can go over to this like an interactive thing.

00:16:42.200 --> 00:16:44.960
The I triple E spectrum rating is all around.

00:16:44.960 --> 00:16:47.560
Trending is languages that are growing rapidly.

00:16:48.420 --> 00:16:54.360
Jobs are languages that are in demand by employers and open is popular on open source hubs.

00:16:54.360 --> 00:16:54.920
Yeah.

00:16:54.920 --> 00:16:58.080
You can also dig into it by embedded devices and things like that.

00:16:58.080 --> 00:16:59.860
And it even, this is an interactive thing.

00:16:59.860 --> 00:17:05.660
You can even like customize your ranking if to, for what's important for you, which is kind

00:17:05.660 --> 00:17:06.000
of fun.

00:17:06.000 --> 00:17:06.300
Right.

00:17:06.300 --> 00:17:10.080
Like I care about enterprise development and jobs or something like this.

00:17:10.080 --> 00:17:11.380
And you can like narrow that down.

00:17:11.380 --> 00:17:12.220
It's definitely interactive.

00:17:12.220 --> 00:17:14.480
So let me give you the, let me give you the numbers, Brian.

00:17:14.620 --> 00:17:20.300
So for trending, number one is Python close behind a C and C++ and then Java.

00:17:20.300 --> 00:17:22.480
So, and Swift is there as well.

00:17:22.480 --> 00:17:28.640
And then for jobs, actually Python is number three, but just like by 0.7%.

00:17:28.640 --> 00:17:31.060
So it goes Java C and then Python.

00:17:31.060 --> 00:17:35.840
And then for openness, Python is way back on top and then custom that, whatever that means.

00:17:35.840 --> 00:17:37.000
You gotta let's make your own.

00:17:37.000 --> 00:17:37.260
Yeah.

00:17:37.820 --> 00:17:38.220
Yeah.

00:17:38.220 --> 00:17:42.860
And I, my comment, I think that the reason why there's more Java jobs is because there's

00:17:42.860 --> 00:17:45.180
a whole bunch of Java programmers shifting to Python.

00:17:45.180 --> 00:17:45.820
Right.

00:17:45.820 --> 00:17:50.100
Like there used to be a lot of COBOL jobs, but not COBOL's growing.

00:17:50.100 --> 00:17:51.980
It's because people got to keep that stuff going.

00:17:51.980 --> 00:17:53.760
It's COBOL's still on the list.

00:17:53.760 --> 00:17:54.260
Wow.

00:17:54.260 --> 00:17:55.940
It's 24th in jobs.

00:17:55.940 --> 00:17:57.060
Yeah, man.

00:17:57.060 --> 00:17:58.240
That puppy's hanging in there.

00:17:58.240 --> 00:18:00.140
Oh, poor people.

00:18:00.140 --> 00:18:00.480
Yeah.

00:18:00.480 --> 00:18:02.380
But assembly is like 11th.

00:18:02.380 --> 00:18:02.860
Wow.

00:18:02.860 --> 00:18:03.560
Okay.

00:18:03.560 --> 00:18:04.440
Anyway.

00:18:04.440 --> 00:18:04.960
Interesting.

00:18:05.440 --> 00:18:05.660
Yeah.

00:18:05.660 --> 00:18:10.020
So there's all these different, all these different measures and rankings and they all

00:18:10.020 --> 00:18:11.480
take different things into account.

00:18:11.480 --> 00:18:14.040
So you got to take that with a bit of a grain of salt.

00:18:14.040 --> 00:18:19.240
But the one trend that seems to appear across all of these is Python is very high on the list

00:18:19.240 --> 00:18:21.840
and is growing more popular or higher up on the list.

00:18:21.840 --> 00:18:27.380
So that's a great thing for betting your career, your next bit of career and your energy on focusing

00:18:27.380 --> 00:18:28.040
on Python, I think.

00:18:28.040 --> 00:18:28.240
Yep.

00:18:28.240 --> 00:18:34.780
And also, I, I, I, E is respected by a lot of people, but they also right here open,

00:18:35.060 --> 00:18:39.240
openly show you what, what they used for their methodology of how they rank things.

00:18:39.240 --> 00:18:45.660
And, and it's a, it's not nothing surprising combination of Stack Overflow and trans and

00:18:45.660 --> 00:18:50.320
Twitter and, and including articles in their IEEE explore digital library.

00:18:50.320 --> 00:18:54.560
So that's a nice, not surprising, but it's cool that they just show you what all those

00:18:54.560 --> 00:18:54.700
are.

00:18:54.700 --> 00:18:54.880
Right.

00:18:54.880 --> 00:18:58.380
So when they say it's popular in jobs, that means cause they're crawling Stack Overflow

00:18:58.380 --> 00:19:01.140
jobs, probably career builder dice, those types.

00:19:01.220 --> 00:19:01.420
Yeah.

00:19:01.420 --> 00:19:05.540
I didn't know dice was still around, but no offense to all the dice.

00:19:05.540 --> 00:19:08.460
My space is still around.

00:19:08.460 --> 00:19:09.320
My space.

00:19:09.320 --> 00:19:12.420
AOL is still around.

00:19:12.420 --> 00:19:12.680
Okay.

00:19:13.200 --> 00:19:20.540
So last thing I want to share with you guys is recently the SciPy 2017 conference happened

00:19:20.540 --> 00:19:26.700
in Seattle here in the U S and like many of these conferences, the videos and tutorials were

00:19:26.700 --> 00:19:29.960
recorded, put on YouTube and you can go check them out.

00:19:30.380 --> 00:19:32.280
So there's a ton of tutorials.

00:19:32.280 --> 00:19:38.000
If you want to get into data science, the keynote was something I haven't had a chance to watch

00:19:38.000 --> 00:19:39.220
it yet, but it sounds really interesting.

00:19:39.220 --> 00:19:41.080
Coding for science and innovation.

00:19:41.080 --> 00:19:42.400
Like who wouldn't want to do that?

00:19:42.400 --> 00:19:43.220
That sounds awesome.

00:19:43.220 --> 00:19:43.620
Yeah.

00:19:43.620 --> 00:19:45.860
Then we've got dash, which we've talked about.

00:19:45.860 --> 00:19:51.160
You've talked about before a new framework for building yours, a user interface and technical

00:19:51.160 --> 00:19:51.780
computing stuff.

00:19:51.780 --> 00:19:58.420
And then a similar spelling, totally different thing is DASC for like parallelized processing

00:19:58.420 --> 00:19:59.320
data pipelines.

00:19:59.320 --> 00:20:07.280
We've got scientific analysis at scale, a comparison of five systems with Jake Vanderplass and academic

00:20:07.280 --> 00:20:10.980
open source, which I think is pretty cool for groups, people in that area.

00:20:10.980 --> 00:20:12.600
So tons and tons of videos.

00:20:12.600 --> 00:20:15.560
These are just a few I grabbed to give you guys a flavor of what's out there.

00:20:15.560 --> 00:20:15.880
Yeah.

00:20:15.880 --> 00:20:16.700
That was in Seattle.

00:20:16.700 --> 00:20:17.240
Yeah.

00:20:17.240 --> 00:20:17.940
I wish I would have gone.

00:20:17.940 --> 00:20:18.260
Yeah.

00:20:18.260 --> 00:20:21.680
I know I was planning on going, but I couldn't quite make it.

00:20:21.680 --> 00:20:22.000
Yeah.

00:20:22.000 --> 00:20:23.340
I'm glad that you hectic at the time.

00:20:23.340 --> 00:20:24.620
I'm glad the videos are out there.

00:20:24.620 --> 00:20:25.820
I'll have to check some of those out.

00:20:25.820 --> 00:20:26.020
Yep.

00:20:26.020 --> 00:20:32.180
And I think I just got a notice that PyCon Canada call for proposals opened today or yesterday.

00:20:32.180 --> 00:20:38.220
So speaking of conferences, if you want to speak at the other major, major Python conference

00:20:38.220 --> 00:20:41.360
in North America, it's time to submit the proposals.

00:20:41.360 --> 00:20:42.940
Do you know which Canada it is?

00:20:42.940 --> 00:20:44.760
The left Canada or the right Canada?

00:20:44.760 --> 00:20:46.820
I think it's the right Canada.

00:20:46.820 --> 00:20:47.840
It's in Montreal.

00:20:47.840 --> 00:20:48.120
Okay.

00:20:48.120 --> 00:20:49.640
Yeah.

00:20:49.640 --> 00:20:50.060
Yeah.

00:20:50.060 --> 00:20:50.160
Yeah.

00:20:50.160 --> 00:20:53.000
All right.

00:20:53.000 --> 00:20:54.120
Well, that's it for our news, Brian.

00:20:54.120 --> 00:20:56.280
Anything else you want to share with everyone?

00:20:56.280 --> 00:21:00.600
I am closingly done, almost done with the book.

00:21:00.600 --> 00:21:05.300
I wanted to try to get it done last night at midnight, but I've got a few hours left, but

00:21:05.300 --> 00:21:09.880
I'm super excited to get the Python testing book out to everybody.

00:21:09.880 --> 00:21:10.680
Yeah.

00:21:10.680 --> 00:21:12.740
And that's been a big success.

00:21:12.740 --> 00:21:14.060
People are responding well to it.

00:21:14.060 --> 00:21:14.740
So congratulations.

00:21:14.740 --> 00:21:15.440
Thanks.

00:21:15.440 --> 00:21:15.800
Yeah.

00:21:15.800 --> 00:21:16.300
How about you?

00:21:16.440 --> 00:21:17.240
Nothing too new.

00:21:17.240 --> 00:21:18.980
Just cranking along.

00:21:18.980 --> 00:21:19.680
Yeah.

00:21:19.680 --> 00:21:21.220
Bunch of stuff's going on.

00:21:21.220 --> 00:21:22.200
Enjoying summer.

00:21:22.200 --> 00:21:25.200
Enjoying working on Python stuff, but nothing specific.

00:21:25.200 --> 00:21:28.200
Speaking of summer, you've got a vacation coming up.

00:21:28.200 --> 00:21:28.680
I do.

00:21:28.680 --> 00:21:33.580
I have a semi-work travel vacation, more vacation-ish stuff.

00:21:33.620 --> 00:21:37.260
So I'm going to be out for four weeks, probably not next week, but the week after.

00:21:37.260 --> 00:21:41.200
So we're going to see what we can do about lining up some guest co-hosts.

00:21:41.200 --> 00:21:41.940
Keep the show rolling.

00:21:41.940 --> 00:21:46.240
No concrete details there, but there may be.

00:21:46.240 --> 00:21:47.080
Yeah.

00:21:47.080 --> 00:21:51.100
At the very least, we'll have one more episode and there may be a gap, but we're going to

00:21:51.100 --> 00:21:52.080
try to not have a gap.

00:21:52.080 --> 00:21:53.420
We're going to try not to have a gap.

00:21:53.420 --> 00:21:53.840
That's right.

00:21:53.980 --> 00:21:59.160
We'll see what we can do about recording either on the road or wrangling some people

00:21:59.160 --> 00:22:01.500
into being a co-host.

00:22:01.500 --> 00:22:02.480
So we'll see.

00:22:02.480 --> 00:22:04.040
We'll keep it rolling as best we can.

00:22:04.040 --> 00:22:04.460
All right.

00:22:04.460 --> 00:22:04.900
All right.

00:22:04.900 --> 00:22:05.460
Well, thanks, Brian.

00:22:05.460 --> 00:22:05.620
Thank you.

00:22:05.620 --> 00:22:06.600
Thanks, everyone, for listening.

00:22:06.600 --> 00:22:07.080
Yep.

00:22:07.080 --> 00:22:07.840
Bye.

00:22:07.840 --> 00:22:11.000
Thank you for listening to Python Bytes.

00:22:11.000 --> 00:22:13.560
Follow the show on Twitter via at Python Bytes.

00:22:13.560 --> 00:22:16.440
That's Python Bytes as in B-Y-T-E-S.

00:22:16.440 --> 00:22:19.840
And get the full show notes at pythonbytes.fm.

00:22:19.980 --> 00:22:24.200
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:22:24.200 --> 00:22:26.920
We're always on the lookout for sharing something cool.

00:22:26.920 --> 00:22:30.300
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:22:30.300 --> 00:22:33.920
Thank you for listening and sharing this podcast with your friends and colleagues.

