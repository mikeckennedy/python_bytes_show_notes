
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:11.000
This is episode 291, recorded July 6, 2022, and I'm Brian Otkin.


00:00:11.000 --> 00:00:12.000
Hey, I'm Michael Kennedy.


00:00:12.000 --> 00:00:14.000
Good to see you, Michael. It's been a while.


00:00:14.000 --> 00:00:17.000
Yeah, good to see Brian as well. Fun as always.


00:00:17.000 --> 00:00:22.000
There's just a never-ending flow of fun stuff to talk about. I know we've got good stuff to share today, as always.


00:00:22.000 --> 00:00:24.000
Yes, we do. Why don't you kick us off?


00:00:24.000 --> 00:00:28.320
licensing, something everybody's super psyched about.


00:00:28.320 --> 00:00:31.680
But I think you will find this project interesting.


00:00:31.680 --> 00:00:34.280
And I don't know how you'll receive it,


00:00:34.280 --> 00:00:36.140
but I was like, wait a minute, what?


00:00:36.140 --> 00:00:36.980
This is odd.


00:00:36.980 --> 00:00:40.400
So this project comes to us from Tom Nighthof.


00:00:40.400 --> 00:00:41.400
And he sent this in and said,


00:00:41.400 --> 00:00:45.520
you know, it occurred to me that we have licenses


00:00:45.520 --> 00:00:46.360
for things like PyTest.


00:00:46.360 --> 00:00:51.200
So I could go search for PyTest and over on GitHub,


00:00:51.200 --> 00:00:53.560
or my programming lens, over on GitHub,


00:00:53.560 --> 00:00:54.680
I could check this out.


00:00:54.680 --> 00:00:56.040
And what is the license?


00:00:56.040 --> 00:00:58.000
Well, it looks like the license is MIT.


00:00:58.000 --> 00:00:59.320
So if I want to use PyTest,


00:00:59.320 --> 00:01:02.040
I'm buying into the MIT license, right?


00:01:02.040 --> 00:01:03.480
- Yeah, kinda.


00:01:03.480 --> 00:01:04.880
- Sometimes.


00:01:04.880 --> 00:01:05.720
- Only if you ship with it.


00:01:05.720 --> 00:01:06.720
- So it's gonna be PyTest.


00:01:06.720 --> 00:01:07.560
That's true.


00:01:07.560 --> 00:01:09.260
But you know, there are libraries like request


00:01:09.260 --> 00:01:11.120
or whatever that you might, you know, ship, right?


00:01:11.120 --> 00:01:13.680
So I'll just put PyTest in here to see what we get.


00:01:13.680 --> 00:01:16.480
So this project is called Python Project Insight,


00:01:16.480 --> 00:01:20.900
and it only has about 5,300 packages parsed in so far.


00:01:20.900 --> 00:01:24.040
But the idea is you can say load the dependencies


00:01:24.040 --> 00:01:26.380
and it'll show you the licenses.


00:01:26.380 --> 00:01:29.540
So for example, for PyTest we have the MIT license,


00:01:29.540 --> 00:01:33.060
but PyTest depends upon packaging and import lib metadata


00:01:33.060 --> 00:01:37.100
and Colorama and PyParsing and Adders and typing extensions.


00:01:37.100 --> 00:01:39.500
Well, packaging has the Apache license,


00:01:39.500 --> 00:01:41.740
Colorama has the BST license,


00:01:41.740 --> 00:01:45.720
Adders has MIT license, so does PyTest,


00:01:45.720 --> 00:01:47.360
and then the Python Software Foundation


00:01:47.360 --> 00:01:48.820
has typing extensions.


00:01:48.820 --> 00:01:50.620
So I don't know, what do you think of that?


00:01:50.620 --> 00:01:54.380
- It is interesting and I don't know what to do with it.


00:01:54.380 --> 00:01:55.220
- I don't either.


00:01:55.220 --> 00:01:57.820
I'm like, wait a minute, I have to kind of,


00:01:57.820 --> 00:02:00.340
sorta consider the transit of closure


00:02:00.340 --> 00:02:03.100
of the dependencies for their licenses.


00:02:03.100 --> 00:02:05.620
And I had never really, I'm sure people are there.


00:02:05.620 --> 00:02:08.060
Well, of course, Michael, of course, that's how it works.


00:02:08.060 --> 00:02:09.620
But for me, I like, I hadn't really thought about it.


00:02:09.620 --> 00:02:12.060
I look at the project or the library and has this license.


00:02:12.060 --> 00:02:14.140
Like another one could be, you know,


00:02:14.140 --> 00:02:15.900
that you would build on before,


00:02:15.900 --> 00:02:17.420
more likely would be like requests.


00:02:17.420 --> 00:02:19.780
So if we load the dependencies for requests,


00:02:19.780 --> 00:02:22.720
You have Apache, BSC, MIT, and Mozilla


00:02:22.720 --> 00:02:24.460
split across that one project.


00:02:24.460 --> 00:02:28.180
So yeah, I just think this is pretty wild.


00:02:28.180 --> 00:02:29.900
Tom pointed out that TensorFlow


00:02:29.900 --> 00:02:32.340
was one of the more wild ones.


00:02:32.340 --> 00:02:33.700
If you load up TensorFlow,


00:02:33.700 --> 00:02:36.700
there's just lots of different licenses here.


00:02:36.700 --> 00:02:39.620
Like, sample the GitHub licensing options, basically.


00:02:39.620 --> 00:02:42.540
- So if I was shipping a commercial project,


00:02:42.540 --> 00:02:44.980
a commercial product with Python


00:02:44.980 --> 00:02:46.860
that used a whole bunch of dependencies,


00:02:46.860 --> 00:02:49.480
I do know that this transitive closure stuff,


00:02:49.480 --> 00:02:51.660
the stuff that I'm actually shipping with,


00:02:51.660 --> 00:02:54.860
I really am supposed to list those


00:02:54.860 --> 00:02:57.660
and have those licenses listed in somewhere.


00:02:57.660 --> 00:02:59.460
- Right, in a sense, because you are shipping


00:02:59.460 --> 00:03:01.740
the dependencies of a thing


00:03:01.740 --> 00:03:03.300
in order for that thing to work, right?


00:03:03.300 --> 00:03:06.380
- Yeah, so you're at least saying,


00:03:06.380 --> 00:03:09.540
I'm using this, it's here, and here's the license for it.


00:03:09.540 --> 00:03:10.660
I think that's the case.


00:03:10.660 --> 00:03:12.580
I'm not a lawyer, of course.


00:03:12.580 --> 00:03:14.620
But the-- - Neither am I.


00:03:14.620 --> 00:03:15.820
- There's a whole bunch of these tools,


00:03:15.820 --> 00:03:19.180
like PyTest, for instance, that we use that we don't ship.


00:03:19.180 --> 00:03:21.460
those are a different story.


00:03:21.460 --> 00:03:23.820
And that's kind of a different license thing.


00:03:23.820 --> 00:03:25.580
But I don't know about the packages.


00:03:25.580 --> 00:03:27.780
Are these, like the packages that,


00:03:27.780 --> 00:03:30.040
these are shipping, they're there,


00:03:30.040 --> 00:03:31.340
they're not really being sold,


00:03:31.340 --> 00:03:33.860
but do you have to list the licenses


00:03:33.860 --> 00:03:35.300
of the things that you're depending on?


00:03:35.300 --> 00:03:36.380
I don't know.


00:03:36.380 --> 00:03:37.320
- I don't know either.


00:03:37.320 --> 00:03:40.400
I think maybe in sometimes it doesn't matter.


00:03:40.400 --> 00:03:44.420
But if it was GPL rather than LGPL, right, for example,


00:03:44.420 --> 00:03:46.300
that might be something you care about.


00:03:46.300 --> 00:03:48.220
You know, I don't know.


00:03:48.220 --> 00:03:50.800
I would love to hear people who really understand this super well,


00:03:50.800 --> 00:03:55.060
if they could maybe tweet at us or comment on the YouTube stream or something like that


00:03:55.060 --> 00:03:56.840
about exactly what that means,


00:03:56.840 --> 00:04:00.780
but I do think it's pretty interesting information.


00:04:00.780 --> 00:04:02.800
Mostly this shows the licenses,


00:04:02.800 --> 00:04:05.560
but it also shows the total size of installing


00:04:05.560 --> 00:04:07.900
the project and what libraries it depends upon.


00:04:07.900 --> 00:04:09.600
So you can poke around with that as well.


00:04:09.600 --> 00:04:11.980
>> That's actually pretty useful and


00:04:11.980 --> 00:04:14.940
interesting information as well that you don't really think about is,


00:04:14.940 --> 00:04:19.500
How big of a download do I get if I put all these things together?


00:04:19.500 --> 00:04:20.400
So yeah.


00:04:20.400 --> 00:04:22.100
>> Yeah, and you can pile them up.


00:04:22.100 --> 00:04:23.800
So you can say I'm using TensorFlow,


00:04:23.800 --> 00:04:26.860
I'm using SKLearn,


00:04:26.860 --> 00:04:29.540
I'm using requests, whatever.


00:04:29.540 --> 00:04:31.740
Then you can say like, okay, for those three,


00:04:31.740 --> 00:04:33.740
tell me about what the story is.


00:04:33.740 --> 00:04:34.480
You know what I mean?


00:04:34.480 --> 00:04:34.860
>> Yeah.


00:04:34.860 --> 00:04:36.540
>> Then it gets a little more interesting still.


00:04:36.540 --> 00:04:38.660
I guess maybe that's not quite right.


00:04:38.660 --> 00:04:40.540
But that just comes with SciPy.


00:04:40.540 --> 00:04:42.540
But anyway, yeah, something like that, right?


00:04:42.540 --> 00:04:42.860
>> Yeah.


00:04:42.860 --> 00:04:44.900
>> Yeah, neat. So anyway, thanks Tom for sending that in,


00:04:44.900 --> 00:04:46.140
and share it with us.


00:04:46.140 --> 00:04:49.420
- Well, I think I'll switch gears a little bit


00:04:49.420 --> 00:04:51.560
and talk about data classes.


00:04:51.560 --> 00:04:53.660
So I actually really like data classes.


00:04:53.660 --> 00:04:56.700
Have you used data classes much, Mike, Michael?


00:04:56.700 --> 00:05:00.740
- Some, they definitely have some very neat properties.


00:05:00.740 --> 00:05:03.300
I find myself, kind of when I'm on the edge


00:05:03.300 --> 00:05:05.880
of using a data class, I'm like, maybe Pydantic,


00:05:05.880 --> 00:05:08.420
but Frozen is a cool option you can add.


00:05:08.420 --> 00:05:12.340
Slots, Slots makes so many things awesome


00:05:12.340 --> 00:05:16.000
in terms of lower memory usage, faster attribute access,


00:05:16.000 --> 00:05:16.840
all kinds of things.


00:05:16.840 --> 00:05:19.300
And if it's just slots equal true on the class definition,


00:05:19.300 --> 00:05:20.440
that's kind of nice.


00:05:20.440 --> 00:05:21.460
- Yeah, it is.


00:05:21.460 --> 00:05:24.620
So Trey Hunter is a Python trainer,


00:05:24.620 --> 00:05:27.700
and he came up with this cool tool


00:05:27.700 --> 00:05:31.200
on his Python Marshalls site called the Undata Class.


00:05:31.200 --> 00:05:33.700
And it's actually also a library that he released,


00:05:33.700 --> 00:05:35.820
a little tool that's Undata Class.


00:05:35.820 --> 00:05:39.100
And the idea is, he was thinking,


00:05:39.100 --> 00:05:41.060
what would be the equivalent of a data class


00:05:41.060 --> 00:05:42.660
If you didn't write a data class,


00:05:42.660 --> 00:05:45.140
if you wanted to have the same sort of functionality,


00:05:45.140 --> 00:05:46.740
what would you do in a normal class?


00:05:46.740 --> 00:05:48.660
So he's got this cool tool down,


00:05:48.660 --> 00:05:52.260
and the example shows, yeah, it shows here slots,


00:05:52.260 --> 00:05:55.460
just a point with XYZ, all floats,


00:05:55.460 --> 00:05:58.700
and also shows frozen sets and slots,


00:05:58.700 --> 00:06:00.440
but I'm gonna turn those off.


00:06:00.440 --> 00:06:02.240
And you just change the class,


00:06:02.240 --> 00:06:03.700
and it changes the output in it.


00:06:03.700 --> 00:06:07.700
Like, he like prints out what an equivalent class would be


00:06:07.700 --> 00:06:11.820
if you didn't use data classes.


00:06:11.820 --> 00:06:12.940
So actually I'm not,


00:06:12.940 --> 00:06:15.280
and I tried to make sure I understood all of this.


00:06:15.280 --> 00:06:17.580
So one of the things that it's kind of neat


00:06:17.580 --> 00:06:20.000
that it just, it's part of a learning tool that he's got


00:06:20.000 --> 00:06:23.700
that it shows you, you know, what you get with data classes,


00:06:23.700 --> 00:06:25.340
but there's not a lot of description around


00:06:25.340 --> 00:06:26.460
like what all this means.


00:06:26.460 --> 00:06:28.520
So this is sort of a fun thing


00:06:28.520 --> 00:06:30.220
to help you look up stuff, I guess.


00:06:30.220 --> 00:06:32.700
So right off the bat, if we just have X, Y, and Z,


00:06:32.700 --> 00:06:35.860
you have a dunder and net that takes X, Y, and Z


00:06:35.860 --> 00:06:38.580
as input values and assigns them.


00:06:38.580 --> 00:06:41.100
And it comes with a nice wrapper class


00:06:41.100 --> 00:06:45.900
and then an EQ, a Dunder EQ, which is for equality.


00:06:45.900 --> 00:06:47.920
And one of the things I knew I wanted to look up


00:06:47.920 --> 00:06:51.700
was to make sure I understood is what it does is it says


00:06:51.700 --> 00:06:54.580
if the other thing, if I'm getting compared


00:06:54.580 --> 00:06:57.640
to something else, if that other thing is also my same type


00:06:57.640 --> 00:07:00.980
in this point, in this case point,


00:07:00.980 --> 00:07:03.780
then you can do the equality comparison.


00:07:03.780 --> 00:07:06.180
Otherwise, the rays are not implemented.


00:07:06.180 --> 00:07:09.820
And that's just kind of a convention because Python,


00:07:09.820 --> 00:07:13.820
and then what happens is Python will try to call EQ


00:07:13.820 --> 00:07:17.200
on the other thing, like reverse the order and stuff,


00:07:17.200 --> 00:07:19.140
because it's kind of how Python works.


00:07:19.140 --> 00:07:21.140
But it's one of those hidden sort of things


00:07:21.140 --> 00:07:22.540
is you need to kind of know that.


00:07:22.540 --> 00:07:25.620
If you don't know what to do in an EQ class


00:07:25.620 --> 00:07:28.780
or an EQ function, rays not implemented,


00:07:28.780 --> 00:07:30.480
and then Python goes from there.


00:07:31.340 --> 00:07:36.340
And then resetting though, if you give it slots,


00:07:36.340 --> 00:07:39.560
all the slots does is add slots to it.


00:07:39.560 --> 00:07:41.600
And that's it, which is kind of cool.


00:07:41.600 --> 00:07:43.500
And what slots does, yeah.


00:07:43.500 --> 00:07:44.860
And what slots does is it makes it


00:07:44.860 --> 00:07:46.540
so that you can't add later.


00:07:46.540 --> 00:07:51.540
So if you can't add a W attribute later to your point,


00:07:51.540 --> 00:07:56.200
but then if you do frozen, it does a whole bunch of stuff.


00:07:56.200 --> 00:07:57.880
Oh, you get a whole bunch more Dunder methods,


00:07:57.880 --> 00:08:01.880
But mostly, these are just raising exceptions


00:08:01.880 --> 00:08:05.160
so that if you try to change it, it raises the exception.


00:08:05.160 --> 00:08:06.880
So anyway, this is kind of cool.


00:08:06.880 --> 00:08:08.800
- Yeah, do you see the Dunder init,


00:08:08.800 --> 00:08:12.000
the constructor implementation when you add frozen?


00:08:12.000 --> 00:08:13.880
It doesn't say self.x. - Oh, it does change.


00:08:13.880 --> 00:08:17.480
- It calls setAdder like behind the scenes


00:08:17.480 --> 00:08:20.040
and then it implements setAdder and delAdder


00:08:20.040 --> 00:08:22.880
and raises exceptions if you try to mess with it.


00:08:22.880 --> 00:08:23.720
Pretty wild.


00:08:23.720 --> 00:08:24.540
- That's cool.


00:08:25.520 --> 00:08:29.360
We're also going to link to a couple of articles


00:08:29.360 --> 00:08:31.920
that Trey wrote about.


00:08:31.920 --> 00:08:34.440
He wrote about this, about how he wrote this.


00:08:34.440 --> 00:08:37.680
And one of the things I'm bringing this up partly


00:08:37.680 --> 00:08:40.160
because I like data classes, and it's kind of cool


00:08:40.160 --> 00:08:41.720
for people to learn what they are.


00:08:41.720 --> 00:08:45.480
But in his developing this, he says he came up


00:08:45.480 --> 00:08:49.600
with having a great use case for the match case,


00:08:49.600 --> 00:08:53.640
new match case blocks in Python using Sentinel objects,


00:08:53.640 --> 00:08:55.160
which I'm not sure what he's talking about there.


00:08:55.160 --> 00:08:57.160
So I'll just take that, look at that.


00:08:57.160 --> 00:08:59.920
Using TextWrapDedent, which I love,


00:08:59.920 --> 00:09:02.800
and it's nice to see somebody else using that.


00:09:02.800 --> 00:09:05.640
Slice, and then an AST, so he's using AST in here.


00:09:05.640 --> 00:09:08.760
So it's kind of a cool, fun example of using that.


00:09:08.760 --> 00:09:09.600
Anyway.


00:09:09.600 --> 00:09:10.960
- Cool, a lot of cool stuff in there.


00:09:10.960 --> 00:09:13.520
Go back to the first one, the first tab you got there.


00:09:13.520 --> 00:09:14.340
- Yeah.


00:09:14.340 --> 00:09:16.200
- One of the things I appreciate from this example


00:09:16.200 --> 00:09:18.520
is you just say class point, X colon float,


00:09:18.520 --> 00:09:20.160
Y colon float, Z colon float.


00:09:20.160 --> 00:09:21.000
- Yeah.


00:09:21.000 --> 00:09:21.900
- Put the data class attribute on it.


00:09:21.900 --> 00:09:23.220
Look how much it's doing for you, right?


00:09:23.220 --> 00:09:25.900
Like it's not just the typed values,


00:09:25.900 --> 00:09:29.300
but it's protecting the read/write ability,


00:09:29.300 --> 00:09:32.460
making it read-only, it's getting a wrapper definition,


00:09:32.460 --> 00:09:35.640
it's getting a hashability equality,


00:09:35.640 --> 00:09:37.660
not quality effectively by,


00:09:37.660 --> 00:09:38.740
all right, there's a lot of cool things


00:09:38.740 --> 00:09:39.820
that's adding for you there.


00:09:39.820 --> 00:09:40.660
- Yeah, and he's--


00:09:40.660 --> 00:09:42.420
- You can appreciate the data class.


00:09:42.420 --> 00:09:44.500
- He's suggesting doing other stuff


00:09:44.500 --> 00:09:49.300
like using keyword only and fields,


00:09:49.300 --> 00:09:51.980
different fields to see if you can change how it works.


00:09:51.980 --> 00:09:54.540
But yeah, I'll have to play with this more.


00:09:54.540 --> 00:09:58.260
And a reminder to everybody that is like,


00:09:58.260 --> 00:10:00.860
data classes are almost enough, but you need more.


00:10:00.860 --> 00:10:02.180
We'll also look at adders,


00:10:02.180 --> 00:10:05.060
because adders is a kind of a super set of data classes.


00:10:05.060 --> 00:10:06.540
- Right, yeah, fantastic.


00:10:06.540 --> 00:10:07.780
That's great, cool.


00:10:07.780 --> 00:10:09.460
All right, Brian, the next one I got here,


00:10:09.460 --> 00:10:10.980
this one's for you, okay?


00:10:10.980 --> 00:10:11.820
- All right.


00:10:11.820 --> 00:10:13.500
- All right, so let's go back.


00:10:13.500 --> 00:10:17.220
We'll take a two-step process to approach this.


00:10:17.220 --> 00:10:20.740
Did you ever use links, L-Y-N-X?


00:10:20.740 --> 00:10:22.880
- Yeah, like a long, long time ago.


00:10:22.880 --> 00:10:26.080
- I remember SSH, I know, I think I telnet it


00:10:26.080 --> 00:10:30.100
into the mainframes back at the university


00:10:30.100 --> 00:10:31.700
and I'd run ly and x.


00:10:31.700 --> 00:10:34.120
This predated the graphical web.


00:10:34.120 --> 00:10:35.780
I mean, it's insane, right?


00:10:35.780 --> 00:10:39.220
So, but it's a browser that is pure text in the terminal.


00:10:39.220 --> 00:10:41.080
Today we have all these fancy browsers,


00:10:41.080 --> 00:10:42.460
but one of the things you had a lot of


00:10:42.460 --> 00:10:43.660
was like keyboard shortcuts


00:10:43.660 --> 00:10:46.300
and other types of things you could do, right?


00:10:46.300 --> 00:10:47.140
- Yeah.


00:10:47.140 --> 00:10:48.820
- Well, now that it's 30 years later,


00:10:48.820 --> 00:10:50.620
what if we could go back to a time,


00:10:50.620 --> 00:10:51.660
a little bit like that.


00:10:51.660 --> 00:10:54.700
So I wanna introduce you to the Qt Browser,


00:10:54.700 --> 00:10:57.820
Q-U-T-E Browser, okay?


00:10:57.820 --> 00:10:58.660
- Okay.


00:10:58.660 --> 00:10:59.480
- So what is this?


00:10:59.480 --> 00:11:02.040
The Qt Browser is also like kind of


00:11:02.040 --> 00:11:04.220
in need of a homepage refresh,


00:11:04.220 --> 00:11:07.900
but it's a keyboard focused browser with a minimal GUI.


00:11:07.900 --> 00:11:10.900
And what's interesting is it's built with Python, okay?


00:11:10.900 --> 00:11:13.860
So it's a full web browser built with Python,


00:11:13.860 --> 00:11:17.260
and it's kind of like a Vimper


00:11:17.260 --> 00:11:19.060
or one of these other ones that lets you do


00:11:19.060 --> 00:11:21.580
Vim like control and behavior of it.


00:11:21.580 --> 00:11:24.200
A little bit like, a little bit like links,


00:11:24.200 --> 00:11:27.400
but it's actual, actually Chrome more or less,


00:11:27.400 --> 00:11:29.040
at least the Chrome runtime.


00:11:29.040 --> 00:11:31.180
So this one was sent in,


00:11:31.180 --> 00:11:32.420
I'm gonna make sure I give him credit


00:11:32.420 --> 00:11:33.440
for giving the shout out.


00:11:33.440 --> 00:11:35.940
This was sent in to us by Martin Boris,


00:11:35.940 --> 00:11:38.060
and it's pretty neat.


00:11:38.060 --> 00:11:38.980
So it's a browser.


00:11:38.980 --> 00:11:42.740
Let me switch up my screen share just for you for a sec.


00:11:42.740 --> 00:11:46.100
Stop, and then I'm gonna add the Qt browser.


00:11:46.100 --> 00:11:46.940
Ready?


00:11:46.940 --> 00:11:47.780
Where is it?


00:11:47.780 --> 00:11:48.600
There, all right.


00:11:48.600 --> 00:11:50.320
So look at this bad boy.


00:11:50.320 --> 00:11:52.000
So this is the browser.


00:11:52.000 --> 00:11:53.200
And how do I go to places?


00:11:53.200 --> 00:11:56.640
Well, I can click on things, like here's a link I can click on.


00:11:56.640 --> 00:11:59.520
But if I want to go somewhere, I press O,


00:11:59.520 --> 00:12:01.240
and it pulls up a place I can open.


00:12:01.240 --> 00:12:01.760
Look at this.


00:12:01.760 --> 00:12:02.600
I got my history.


00:12:02.600 --> 00:12:03.680
>> Oh, that's pretty cool.


00:12:03.680 --> 00:12:07.200
>> I want to go to Talk Python.


00:12:07.200 --> 00:12:09.360
If I want to do a command, I hit colon.


00:12:09.360 --> 00:12:10.640
And here's all my commands.


00:12:10.640 --> 00:12:15.240
I have my tab, and I give focus and control and so on.


00:12:15.240 --> 00:12:18.440
Over here, I just type F. So if I want to--


00:12:18.440 --> 00:12:20.080
If I want to navigate, for example,


00:12:20.080 --> 00:12:21.440
I'm here on the Talk Python page.


00:12:21.440 --> 00:12:22.740
What if I want to go to courses,


00:12:22.740 --> 00:12:24.400
I type F and then everything,


00:12:24.400 --> 00:12:26.520
see how everything gets a letter above it?


00:12:26.520 --> 00:12:27.240
>> That's pretty great.


00:12:27.240 --> 00:12:27.600
>> Yeah.


00:12:27.600 --> 00:12:29.640
>> L, D, D, G. If I want to go to D,


00:12:29.640 --> 00:12:31.000
I just press D and then we're off on


00:12:31.000 --> 00:12:33.960
the Talk Python Training site and so on.


00:12:33.960 --> 00:12:35.520
So I could open,


00:12:35.520 --> 00:12:37.080
or I could say open,


00:12:37.080 --> 00:12:38.920
and I can search for PyTest,


00:12:38.920 --> 00:12:41.080
and I'll pull up my tests and so on.


00:12:41.080 --> 00:12:42.760
I can do a new tab.


00:12:42.760 --> 00:12:44.680
I got to remember how to do that.


00:12:44.680 --> 00:12:46.720
Yeah, I'll say tab clone.


00:12:46.720 --> 00:12:48.320
I come over here. I know there's


00:12:48.320 --> 00:12:50.120
a bunch of good commands that I'm not following,


00:12:50.120 --> 00:12:53.000
like very much like if I was actually using Vim.


00:12:53.000 --> 00:12:54.960
If I could search for PyTest book,


00:12:54.960 --> 00:12:56.700
I could come over here like that,


00:12:56.700 --> 00:13:00.560
and I can hit, is it Control or Windows Control?


00:13:00.560 --> 00:13:01.560
>> That's a good book.


00:13:01.560 --> 00:13:03.840
>> I heard that's a good book. I can cycle through my tabs,


00:13:03.840 --> 00:13:05.960
see how minimal my tabs are and stuff there.


00:13:05.960 --> 00:13:06.400
>> Yeah.


00:13:06.400 --> 00:13:08.200
>> On the bottom, it's got all these little commands.


00:13:08.200 --> 00:13:11.320
Anyway, I can type colon Q, boom, we're out.


00:13:11.320 --> 00:13:12.120
>> Nice.


00:13:12.120 --> 00:13:14.160
>> What do you think of this? Yeah, what do you think of that?


00:13:14.160 --> 00:13:15.920
>> I actually love the Qt Browser.


00:13:15.920 --> 00:13:17.480
I haven't used it much,


00:13:17.480 --> 00:13:23.620
But I definitely know about it because the Florian Bruin who started Browser,


00:13:23.620 --> 00:13:26.880
he's a PyTest core contributor


00:13:26.880 --> 00:13:30.600
and also one of the technical reviewers for the PyTest book.


00:13:30.600 --> 00:13:31.920
So really cool guy.


00:13:31.920 --> 00:13:34.160
But I love the idea of being able to just use


00:13:34.160 --> 00:13:37.020
a browser with a keyboard and not have to touch the mouse at all.


00:13:37.020 --> 00:13:39.840
That's next level.


00:13:39.840 --> 00:13:40.620
>> It's pretty neat.


00:13:40.620 --> 00:13:41.520
>> Yeah.


00:13:41.520 --> 00:13:42.920
>> Yeah. Let's see.


00:13:42.920 --> 00:13:44.920
Out in the audience, Kim VanWijk, hey Kim,


00:13:44.920 --> 00:13:48.280
says, "I resign myself to using a mouse more than I want to.


00:13:48.280 --> 00:13:49.880
Qt Browser may be the way to go."


00:13:49.880 --> 00:13:51.120
Thanks for the tip, awesome.


00:13:51.120 --> 00:13:51.680
>> Yeah.


00:13:51.680 --> 00:13:54.080
>> Alvaro says, "Are those VS Code shortcuts?


00:13:54.080 --> 00:13:57.600
I suppose only if you have the Vim binding set in VS Code."


00:13:57.600 --> 00:13:59.480
But then I sort of yes.


00:13:59.480 --> 00:14:02.600
>> Well, of course you do. Why wouldn't you?


00:14:02.600 --> 00:14:04.920
>> Are you a monster?


00:14:04.920 --> 00:14:08.400
>> Can you even do Emacs bindings?


00:14:08.400 --> 00:14:11.760
>> I don't know. You could do non-Vim bindings.


00:14:11.760 --> 00:14:12.680
>> Yeah, right.


00:14:12.680 --> 00:14:15.160
But then people would look down on you, right, Brian?


00:14:15.160 --> 00:14:15.720
>> But-


00:14:15.720 --> 00:14:18.720
>> I don't do Vim stuff in my- I know that you probably do though.


00:14:18.720 --> 00:14:21.360
>> Yeah, I use Vim everywhere,


00:14:21.360 --> 00:14:24.320
especially in VS Code. So nice.


00:14:24.320 --> 00:14:26.880
But I think people should check it out.


00:14:26.880 --> 00:14:30.840
It's a cool project and also it helped push forward some of the,


00:14:30.840 --> 00:14:33.920
some high test things.


00:14:33.920 --> 00:14:35.960
We got some new features because of this.


00:14:35.960 --> 00:14:39.760
>> Yeah, that's great. I installed it with Homebrew.


00:14:39.760 --> 00:14:40.960
So that was easy to install.


00:14:40.960 --> 00:14:42.860
we can install it with apt on Linux.


00:14:42.860 --> 00:14:44.100
I'm not sure about Windows,


00:14:44.100 --> 00:14:46.600
but they've got a quick start guide so you can follow along to


00:14:46.600 --> 00:14:49.160
see what you might want to do.


00:14:49.160 --> 00:14:50.880
It's not super obvious.


00:14:50.880 --> 00:14:55.560
>> No, that cheat sheet is a bit of an eye chart.


00:14:55.560 --> 00:14:57.840
>> It's a bit of an eye chart.


00:14:57.840 --> 00:14:59.760
I suspect you can zoom it.


00:14:59.760 --> 00:15:01.560
It's still small.


00:15:01.560 --> 00:15:03.040
It's still small.


00:15:03.040 --> 00:15:06.620
But yeah, I do like the navigation,


00:15:06.620 --> 00:15:09.680
pressing F and then just a letter to navigate instead of


00:15:09.680 --> 00:15:11.280
using your mouse to follow the links.


00:15:11.280 --> 00:15:12.040
That's pretty cool.


00:15:12.040 --> 00:15:15.400
>> Do you remember those templates that people used to have


00:15:15.400 --> 00:15:21.400
back in the day for like in Office tools where they would overlay?


00:15:21.400 --> 00:15:23.840
>> It was actually an overlay on your keyboard?


00:15:23.840 --> 00:15:26.840
>> Yeah, it would go over the function keys


00:15:26.840 --> 00:15:30.560
so you can remember which functions did what during what application.


00:15:30.560 --> 00:15:32.200
If you switch to Word, you put a different,


00:15:32.200 --> 00:15:33.980
or probably WordPerfect at the time,


00:15:33.980 --> 00:15:36.200
you put a different template over it.


00:15:36.200 --> 00:15:38.320
>> Yeah. I'm going to use Lotus 1, 2, 3,


00:15:38.320 --> 00:15:40.200
give me the function key over.


00:15:40.200 --> 00:15:43.080
>> Yeah. I'm just showing.


00:15:43.080 --> 00:15:44.200
>> I totally like that. It is.


00:15:44.200 --> 00:15:47.200
>> Showing how old I am. Let's talk about something new.


00:15:47.200 --> 00:15:48.800
>> I'm sure they still teach that in college.


00:15:48.800 --> 00:15:53.160
>> Yeah. Although in college, I had to teach.


00:15:53.160 --> 00:15:58.600
I was a TA for a computers 101 class during grad school,


00:15:58.600 --> 00:16:01.100
and links was one of the things we had to teach.


00:16:01.100 --> 00:16:03.080
I was like, nobody's going to use this.


00:16:03.080 --> 00:16:03.520
>> Really?


00:16:03.520 --> 00:16:05.240
>> Yeah. But it was part of the curriculum.


00:16:05.240 --> 00:16:05.760
>> Incredible.


00:16:05.760 --> 00:16:06.440
>> Yeah.


00:16:06.440 --> 00:16:07.440
>> That's awesome.


00:16:07.440 --> 00:16:11.120
Anyway, so let's switch to something new like async.


00:16:11.120 --> 00:16:16.320
So I think we've talked about court probably several times.


00:16:16.320 --> 00:16:20.640
Court is like Flask, but it's async.


00:16:20.640 --> 00:16:26.520
It actually supports the Flask API,


00:16:26.520 --> 00:16:29.480
or I think, and looks the same,


00:16:29.480 --> 00:16:31.680
but it's async instead. But there's a problem.


00:16:31.680 --> 00:16:32.880
>> It's super close.


00:16:32.880 --> 00:16:35.360
You can basically, everywhere you have the word Flask,


00:16:35.360 --> 00:16:37.320
if you replace it with the word court,


00:16:37.320 --> 00:16:38.560
it more or less works.


00:16:38.560 --> 00:16:41.800
So like lower case F flask,


00:16:41.800 --> 00:16:43.080
you import lower case court.


00:16:43.080 --> 00:16:45.160
If you create an object capital F flask,


00:16:45.160 --> 00:16:47.800
you use capital court and then it lets you do async basically.


00:16:47.800 --> 00:16:51.200
>> Cool. But there's ecosystem around both of them now.


00:16:51.200 --> 00:16:54.000
So there are extensions to flask,


00:16:54.000 --> 00:16:55.680
some of them work on court.


00:16:55.680 --> 00:16:57.120
There's extensions to court.


00:16:57.120 --> 00:16:59.640
I don't know if any of those work on flask,


00:16:59.640 --> 00:17:02.280
but the people behind both of


00:17:02.280 --> 00:17:05.240
them are supportive of the whole thing.


00:17:05.240 --> 00:17:08.720
And so Port is actually now part of the Pallets project


00:17:08.720 --> 00:17:11.040
was is the big news.


00:17:11.040 --> 00:17:16.040
And Pallets is the project that includes Flask


00:17:16.040 --> 00:17:19.120
and a whole bunch of other stuff.


00:17:19.120 --> 00:17:23.840
But it because of this, it will help maybe the maintainers


00:17:23.840 --> 00:17:27.000
kind of work together a little bit better and smoother


00:17:27.000 --> 00:17:28.540
to iron this out.


00:17:28.540 --> 00:17:30.240
So the big difference of course,


00:17:30.240 --> 00:17:35.240
is that Flask has a whiskey server behind it,


00:17:35.240 --> 00:17:36.520
server is the right word,


00:17:36.520 --> 00:17:41.720
and Cort is ASCII, so asynchronous.


00:17:41.720 --> 00:17:45.400
So this is cool.


00:17:45.400 --> 00:17:48.280
Well, why do we care a little bit is that


00:17:48.280 --> 00:17:50.980
it used to be that really you had to do async.


00:17:50.980 --> 00:17:52.840
If you wanted async, you had to do Cort.


00:17:52.840 --> 00:17:55.080
But now Flask, as a Flask 2.0,


00:17:55.080 --> 00:17:59.640
you do have some async capabilities,


00:17:59.640 --> 00:18:03.160
but it's still using a single threaded server.


00:18:03.160 --> 00:18:05.200
So there are some limitations.


00:18:05.200 --> 00:18:08.440
So kind of interesting to read about this.


00:18:08.440 --> 00:18:12.760
There is a async and await page on the Flask website


00:18:12.760 --> 00:18:16.020
that talks about really what the trade-offs are,


00:18:16.020 --> 00:18:18.160
what the performance and the background tasks


00:18:18.160 --> 00:18:22.760
and how to do that without shifting to court,


00:18:22.760 --> 00:18:24.960
but then also talks about at some point,


00:18:24.960 --> 00:18:27.280
you might wanna just switch to court instead.


00:18:29.080 --> 00:18:34.080
Along this line is, I was thinking about this partly


00:18:34.080 --> 00:18:37.080
while I was looking at this other article


00:18:37.080 --> 00:18:39.520
from Steve Pate that called,


00:18:39.520 --> 00:18:43.160
"Should you use async on your next Python web application?"


00:18:43.160 --> 00:18:45.360
Which I was, I wanted to bring this up


00:18:45.360 --> 00:18:48.160
'cause I was curious about what your take on it was.


00:18:48.160 --> 00:18:50.760
The first part is it's a really nice history.


00:18:50.760 --> 00:18:53.160
It talks about the history of web server interfaces


00:18:53.160 --> 00:18:57.880
with Python, with the timelines and, and Whiskey and Ascii.


00:18:58.760 --> 00:19:03.480
and then how AsyncIO came into play


00:19:03.480 --> 00:19:08.480
and how uvicorn is popular and unicorn,


00:19:08.480 --> 00:19:12.000
I don't know how to say that.


00:19:12.000 --> 00:19:13.280
- I'm pretty sure it's G-unicorn


00:19:13.280 --> 00:19:16.000
'cause it's short for green unicorn.


00:19:16.000 --> 00:19:16.840
- Okay. - So the last bit


00:19:16.840 --> 00:19:18.160
should still be pronounced unicorn,


00:19:18.160 --> 00:19:19.320
so I'm gonna go with G.


00:19:19.320 --> 00:19:21.000
- Okay, and then there's Hypercorn,


00:19:21.000 --> 00:19:25.800
which is the asynchronous web server that's similar.


00:19:25.800 --> 00:19:27.520
Anyway, so it talks about this,


00:19:27.520 --> 00:19:29.360
But then at the end, the conclusion,


00:19:29.360 --> 00:19:31.160
it talks about all the different frameworks.


00:19:31.160 --> 00:19:33.280
In the conclusion is,


00:19:33.280 --> 00:19:36.280
most people don't need async on their web server.


00:19:36.280 --> 00:19:41.280
And I was curious what your reaction to this conclusion is.


00:19:41.280 --> 00:19:45.440
- I have some thoughts, but let me pull up some first.


00:19:45.440 --> 00:19:47.160
Okay, so here's my thought.


00:19:47.160 --> 00:19:48.000
It depends.


00:19:48.000 --> 00:19:51.520
It depends on how far you need to push it towards the edge.


00:19:51.520 --> 00:19:56.520
I was surprised how far you can get without async


00:19:56.600 --> 00:19:57.840
in terms of concurrency.


00:19:57.840 --> 00:19:58.680
- Okay.


00:19:58.680 --> 00:20:01.080
- So I recently did an in-person class,


00:20:01.080 --> 00:20:05.720
imagine that, over Zoom, but live in person.


00:20:05.720 --> 00:20:07.080
I actually have some more to say about that,


00:20:07.080 --> 00:20:07.920
it's kind of related.


00:20:07.920 --> 00:20:10.280
But anyway, I just did a course with some folks


00:20:10.280 --> 00:20:12.000
who are doing FastAPI, and they said,


00:20:12.000 --> 00:20:15.120
"Look, this async stuff that we're doing


00:20:15.120 --> 00:20:18.120
"adds some complexity to the way that we gotta write code.


00:20:18.120 --> 00:20:19.920
"We're not sure whether or not there's a trade-off."


00:20:19.920 --> 00:20:22.320
So what we did is we actually ended up writing


00:20:22.320 --> 00:20:28.800
a fast API app with using the sync and the async version of SQL alchemy,


00:20:28.800 --> 00:20:33.080
and then using a sync and an async version of fast API endpoints.


00:20:33.080 --> 00:20:33.840
>> Okay.


00:20:33.840 --> 00:20:36.760
>> With the database that we had as the back-end,


00:20:36.760 --> 00:20:39.840
and the database was not the limiting factor because it


00:20:39.840 --> 00:20:43.800
was at 10 percent CPU while this was happening, it was just chilling.


00:20:43.800 --> 00:20:44.240
>> Yeah.


00:20:44.240 --> 00:20:47.680
>> But with a real database Postgres as the back-end,


00:20:47.680 --> 00:20:50.760
what we found was we could do,


00:20:50.760 --> 00:20:51.880
I can remember this right.


00:20:51.880 --> 00:20:55.960
Oh boy, I'll give you, I can certainly give you the relative bit.


00:20:55.960 --> 00:20:58.200
So with the synchronous version,


00:20:58.200 --> 00:21:00.680
we got way more scalability than we thought.


00:21:00.680 --> 00:21:06.040
So it was like 75% performance of the async version.


00:21:06.040 --> 00:21:09.160
So that seems way higher because the database,


00:21:09.160 --> 00:21:11.960
like most of the things we were doing just waiting on the database.


00:21:11.960 --> 00:21:15.720
But because we are running in gunicorn with uvicorn workers,


00:21:15.720 --> 00:21:17.800
I was really just in gunicorn with threads,


00:21:17.800 --> 00:21:19.800
you know, Python doesn't do threading well,


00:21:19.800 --> 00:21:22.880
except when it's listening on a network socket


00:21:22.880 --> 00:21:25.440
or doing a few other things that will release the gill.


00:21:25.440 --> 00:21:26.280
And guess what?


00:21:26.280 --> 00:21:27.100
When you're talking to database,


00:21:27.100 --> 00:21:27.940
you're listening to network socket.


00:21:27.940 --> 00:21:28.940
So there's all these points


00:21:28.940 --> 00:21:31.040
that naturally free up the threading.


00:21:31.040 --> 00:21:31.880
- Interesting.


00:21:31.880 --> 00:21:34.440
- And actually got us like 75% of the way there,


00:21:34.440 --> 00:21:38.400
but we still got 25 to 30% more performance


00:21:38.400 --> 00:21:39.960
out of the async version.


00:21:39.960 --> 00:21:43.680
And it was like, I think it was five worker processes


00:21:43.680 --> 00:21:44.940
running on my eight core machine,


00:21:44.940 --> 00:21:48.480
talking to Postgres and we were getting some like,


00:21:48.480 --> 00:21:54.800
you know, like 2000 requests per second versus 1500 a second, or maybe it was 1000, 1500,


00:21:54.800 --> 00:21:59.440
something like that was a lot of requests per second. But we did get more performance


00:21:59.440 --> 00:22:05.400
out of the async version. So my depends is like that last 25. Are you like that close


00:22:05.400 --> 00:22:10.920
to your performance, I would say 95% of the web apps are not maxed, right? They're not


00:22:10.920 --> 00:22:15.320
maxed out with like multiple servers trying to deal with it. All right, 95% of servers


00:22:15.320 --> 00:22:19.720
are doing important work, but they're probably still have a lot of capacity left.


00:22:19.720 --> 00:22:23.880
So it's like, it depends on like, do you need that last 25% or does it not really matter?


00:22:23.880 --> 00:22:26.120
- Yeah. Yeah. And also like...


00:22:26.120 --> 00:22:27.080
- Those are my thoughts.


00:22:27.080 --> 00:22:33.080
- What's the load like on your typical, I mean, what are your levels anyway, right? So


00:22:33.080 --> 00:22:37.480
if you already have that, like for instance, if you already have an application running,


00:22:37.480 --> 00:22:42.840
you can measure it and see what your load is looking like and how many people you have.


00:22:42.840 --> 00:22:47.400
And then if you if you think, oh, I might I might increase my what if we double,


00:22:47.400 --> 00:22:52.200
then you can kind of guess what your load is going to look like if you double and stuff.


00:22:52.200 --> 00:22:53.160
So interesting.


00:22:53.160 --> 00:22:58.760
Yeah, one of the I recommend people check out this locus thing because it's so easy to say


00:22:58.760 --> 00:23:03.000
a typical user clicks on the page between five and 15 seconds.


00:23:03.000 --> 00:23:07.560
They might go log in some of the time they might go hit the home page that might hit the about.


00:23:07.560 --> 00:23:10.600
And then you can say, I would like to see how many users I can take.


00:23:10.600 --> 00:23:12.800
And if you're 10x what you need,


00:23:12.800 --> 00:23:14.500
you know, it doesn't matter whether you use async or not,


00:23:14.500 --> 00:23:16.640
but there is a performance benefit.


00:23:16.640 --> 00:23:19.140
It's just not as massive as it might sound.


00:23:19.140 --> 00:23:22.380
The other bit that I want to like point out is the


00:23:22.380 --> 00:23:25.580
the one statement that like


00:23:25.580 --> 00:23:27.980
depends on what you're using also.


00:23:27.980 --> 00:23:31.320
Like I can't find the bit here, but it


00:23:31.320 --> 00:23:33.820
he was talking about how


00:23:33.820 --> 00:23:35.420
one application he had, he was thinking about,


00:23:35.420 --> 00:23:37.420
oh, I might do async,


00:23:37.420 --> 00:23:39.600
except for he was using a payment gateway


00:23:39.600 --> 00:23:41.440
that didn't have an async version.


00:23:41.440 --> 00:23:44.240
So he had to use a synchronous for that.


00:23:44.240 --> 00:23:48.120
And since it's synchronous somewhere, you kind of have,


00:23:48.120 --> 00:23:49.640
is this true, if it's synchronous somewhere,


00:23:49.640 --> 00:23:50.880
you have to be synchronous everywhere


00:23:50.880 --> 00:23:52.400
or is that not really true?


00:23:52.400 --> 00:23:53.240
Do you know?


00:23:53.240 --> 00:23:56.240
- Sorry, say that if it's async, it's async everywhere


00:23:56.240 --> 00:23:58.040
or sync, it's sync everywhere.


00:23:58.040 --> 00:23:59.720
- Either one, is either one of those true?


00:23:59.720 --> 00:24:02.640
If I, like if I have a, if I've got an application


00:24:02.640 --> 00:24:06.320
and I do need to hit a gateway that's synchronous,


00:24:06.320 --> 00:24:08.600
do I need to, if I isolate it,


00:24:08.600 --> 00:24:12.140
I guess I can probably do asynchronous and hide it that way.


00:24:12.140 --> 00:24:15.800
>> You just don't get as good a scalability there,


00:24:15.800 --> 00:24:18.580
and you block up the processing if you do the sync.


00:24:18.580 --> 00:24:20.200
For the async one,


00:24:20.200 --> 00:24:22.960
you can do a wrapper where you say,


00:24:22.960 --> 00:24:24.320
we're going to do some async work,


00:24:24.320 --> 00:24:26.200
but I'm just going to call that and block because


00:24:26.200 --> 00:24:29.120
all the other stuff above it doesn't want to deal with being async.


00:24:29.120 --> 00:24:29.480
>> Yeah.


00:24:29.480 --> 00:24:32.680
>> So it's easier to go from sync to async,


00:24:32.680 --> 00:24:34.320
to have part of it be async.


00:24:34.320 --> 00:24:36.840
The other way around is a little more tricky,


00:24:36.840 --> 00:24:37.760
you can mess it up a bit.


00:24:37.760 --> 00:24:41.560
>> Okay, cool. Nice, interesting conversation. Thanks a lot.


00:24:41.560 --> 00:24:43.240
>> Absolutely, it sure is.


00:24:43.240 --> 00:24:45.000
Is that it? Is that all of our items?


00:24:45.000 --> 00:24:47.320
>> Are we? I think.


00:24:47.320 --> 00:24:48.880
Is that all of our items? I guess so.


00:24:48.880 --> 00:24:51.000
>> Yeah. You got any extras for us?


00:24:51.000 --> 00:24:52.320
>> I don't.


00:24:52.320 --> 00:24:54.000
>> Okay. I have some.


00:24:54.000 --> 00:24:55.760
Let me pull them up here.


00:24:55.760 --> 00:24:57.680
Locust, look, let me tell you about it. Now, it's great.


00:24:57.680 --> 00:24:59.840
Now, I have three things I want to tell people about.


00:24:59.840 --> 00:25:03.880
Number one is I did a talk at Python Web Conference,


00:25:03.880 --> 00:25:06.640
the HTML and Flask one that I've done in some other places,


00:25:06.640 --> 00:25:12.200
but that was a fun talk like a 45 minute flask plus HTMX goodness there.


00:25:12.200 --> 00:25:19.280
So that video along with all the other Python webconf 2022 talks are now on YouTube.


00:25:19.280 --> 00:25:20.400
So people can check that out.


00:25:20.400 --> 00:25:20.800
>> Cool.


00:25:20.800 --> 00:25:25.200
>> Did you know that the Python web conference had five days,


00:25:25.200 --> 00:25:28.240
and I think it was like four or five tracks all day.


00:25:28.240 --> 00:25:29.480
So there are a ton of videos.


00:25:29.480 --> 00:25:32.160
There's like 150 videos or something on there.


00:25:32.160 --> 00:25:33.880
I mean, look at this scroll bar here.


00:25:33.880 --> 00:25:37.320
It's probably going to like page as I get to the bottom too.


00:25:37.320 --> 00:25:39.400
Yep. Look at that.


00:25:39.400 --> 00:25:41.600
There's a lot of talks that people can come


00:25:41.600 --> 00:25:43.760
check out if they're interested in that.


00:25:43.760 --> 00:25:44.040
>> That's pretty cool.


00:25:44.040 --> 00:25:46.120
>> One of them being HTMX that I did.


00:25:46.120 --> 00:25:47.840
>> Yeah. I want to watch your talk.


00:25:47.840 --> 00:25:49.280
You've given that a couple of times, haven't you?


00:25:49.280 --> 00:25:51.760
>> Yeah. I've gave it a couple of times.


00:25:51.760 --> 00:25:53.960
Basically, the way it worked is like when I was working on


00:25:53.960 --> 00:25:55.760
that course and really playing with those ideas,


00:25:55.760 --> 00:25:57.440
I submitted to a bunch of conferences,


00:25:57.440 --> 00:26:01.240
and those conferences were either a year out or they were like a month out or something.


00:26:01.240 --> 00:26:03.360
That's how that ended up so spread out.


00:26:03.360 --> 00:26:06.800
The other one is I mentioned the browser that was fun,


00:26:06.800 --> 00:26:08.960
but how about the Browser-a-saurus?


00:26:08.960 --> 00:26:09.400
>> Okay.


00:26:09.400 --> 00:26:11.040
>> A Mac OS only tool,


00:26:11.040 --> 00:26:13.640
but there's probably something like it for the others.


00:26:13.640 --> 00:26:17.560
So here's the thing. Suppose I'm in Typeora,


00:26:17.560 --> 00:26:19.280
which is a markdown editor,


00:26:19.280 --> 00:26:22.520
or I'm in PowerPoint and it's got a link and I click it.


00:26:22.520 --> 00:26:25.280
By default, it opens in the default browser.


00:26:25.280 --> 00:26:26.560
But depending on what you're doing,


00:26:26.560 --> 00:26:28.080
you might want it to be like,


00:26:28.080 --> 00:26:30.920
oh, sometimes I wanted to open in Vivaldi,


00:26:30.920 --> 00:26:32.760
but other times I wanted to open in,


00:26:32.760 --> 00:26:35.760
like say the cute browser or Orion or some odd thing like that.


00:26:35.760 --> 00:26:36.060
Right?


00:26:36.060 --> 00:26:40.960
So the idea with this thing is that you click a link and when it opens up,


00:26:40.960 --> 00:26:44.320
instead of opening in the default browser, the browser, a source is the


00:26:44.320 --> 00:26:49.680
default, and then you have, keyboard shortcuts like F for Firefox, E for


00:26:49.680 --> 00:26:53.360
edge S for Safari, and you say, well, which one do you want to open in right


00:26:53.360 --> 00:26:53.600
now?


00:26:53.600 --> 00:26:57.140
And it basically just delegates to the different browsers you register it with.


00:26:57.140 --> 00:26:59.400
So you hit T for tour or F for Firefox.


00:26:59.400 --> 00:27:00.880
When you click a link, that's kind of cool.


00:27:00.880 --> 00:27:01.040
Right?


00:27:01.040 --> 00:27:02.000
That is pretty cool.


00:27:02.000 --> 00:27:02.480
Yeah.


00:27:02.680 --> 00:27:05.880
I haven't been convinced that I would use that or not,


00:27:05.880 --> 00:27:07.680
but I do appreciate it.


00:27:07.680 --> 00:27:10.560
And I feel like maybe someone sent that in,


00:27:10.560 --> 00:27:12.120
and if they did, I really appreciate it.


00:27:12.120 --> 00:27:14.360
But yeah, I don't have any notes of who sent it in.


00:27:14.360 --> 00:27:15.700
So anyway, that's pretty cool.


00:27:15.700 --> 00:27:17.680
If you find yourself, you know,


00:27:17.680 --> 00:27:19.840
copy link, going to different browsers a lot,


00:27:19.840 --> 00:27:22.320
and you're on Mac, I know that's like a small,


00:27:22.320 --> 00:27:24.640
a rapidly decreasing Venn diagram.


00:27:24.640 --> 00:27:25.620
But if you're in that space,


00:27:25.620 --> 00:27:26.920
this might be a cool option for you.


00:27:26.920 --> 00:27:27.760
- Yeah.


00:27:27.760 --> 00:27:29.600
- What is it written with anyway?


00:27:29.600 --> 00:27:30.580
TypeScript mostly.


00:27:30.580 --> 00:27:32.540
>> Okay. Speaking of browsers,


00:27:32.540 --> 00:27:33.940
I just found this because I was like,


00:27:33.940 --> 00:27:36.980
is links dead? Can I use something like links now?


00:27:36.980 --> 00:27:39.660
There's a browser called Browse,


00:27:39.660 --> 00:27:41.580
which is a text-based browser.


00:27:41.580 --> 00:27:42.980
That's still a thing.


00:27:42.980 --> 00:27:44.860
Cool. I had to try this out.


00:27:44.860 --> 00:27:48.120
>> My gosh. I love it that it has text,


00:27:48.120 --> 00:27:50.420
but it's like 8-bit pixelated.


00:27:50.420 --> 00:27:51.660
>> Yeah, it takes the images.


00:27:51.660 --> 00:27:53.500
>> I mean, it has pictures, but it takes


00:27:53.500 --> 00:27:55.700
the images and makes them look like what you would get.


00:27:55.700 --> 00:27:58.060
>> Yeah. I'll have to give this a try.


00:27:58.060 --> 00:27:59.860
>> Yeah. You've run it in Docker.


00:27:59.860 --> 00:28:03.400
>> Of course you do. All right. Pretty cool.


00:28:03.400 --> 00:28:07.700
One more before we get to our joke.


00:28:07.700 --> 00:28:08.060
>> Okay.


00:28:08.060 --> 00:28:11.620
>> The other one is I talked about doing a live class.


00:28:11.620 --> 00:28:15.140
I actually have an announcement for a live class that I'm doing.


00:28:15.140 --> 00:28:16.800
Obviously, people know I have a bunch of


00:28:16.800 --> 00:28:19.220
online courses and of course I'm going to keep,


00:28:19.220 --> 00:28:20.760
I'm already working on the next one of those,


00:28:20.760 --> 00:28:22.140
and we've got a bunch coming there.


00:28:22.140 --> 00:28:25.380
But I want to try some experiments,


00:28:25.380 --> 00:28:30.380
something where people can attend a class in person


00:28:30.380 --> 00:28:31.860
with other people, right?


00:28:31.860 --> 00:28:34.900
If they sort of help each other along,


00:28:34.900 --> 00:28:36.540
and I've tried this before, this cohort thing,


00:28:36.540 --> 00:28:38.580
but I think I've got a better platform,


00:28:38.580 --> 00:28:39.400
a better way to do it.


00:28:39.400 --> 00:28:42.460
So over at, this link I'm gonna put in the show notes,


00:28:42.460 --> 00:28:45.060
I'm doing a fast API in MongoDB.


00:28:45.060 --> 00:28:49.100
So basically fast API, Pydantic, Beanie, and MongoDB course


00:28:49.100 --> 00:28:52.380
that is going to be a four day, six day course


00:28:52.380 --> 00:28:56.880
over two weeks and it has a couple hours a day and.


00:28:56.880 --> 00:28:57.680
>> Oh, wow.


00:28:57.680 --> 00:29:00.640
>> You'd have a bunch of people there working together on some fun stuff and I'll


00:29:00.640 --> 00:29:04.980
be live teaching every session so it's going to be like


00:29:04.980 --> 00:29:10.260
a live course as if you were attending it in person just remotely because it's 2022,


00:29:10.260 --> 00:29:15.140
and I guess it's not post-COVID all the way.


00:29:15.140 --> 00:29:17.940
But anyway, it's got a really cool set of topics that we cover.


00:29:17.940 --> 00:29:19.060
It talks about async,


00:29:19.060 --> 00:29:23.020
It talks about Mongo, Beanie, Pydandic, FastAPI, of course.


00:29:23.020 --> 00:29:25.180
We even use Locust at the end to test it out.


00:29:25.180 --> 00:29:27.460
- I think this would be fun.


00:29:27.460 --> 00:29:28.540
This looks great.


00:29:28.540 --> 00:29:29.540
Cool.


00:29:29.540 --> 00:29:30.380
- Yeah, awesome.


00:29:30.380 --> 00:29:31.260
I think it'll be fun too.


00:29:31.260 --> 00:29:34.020
I think it'll be neat to have this experience with people.


00:29:34.020 --> 00:29:35.180
And I've tried this before,


00:29:35.180 --> 00:29:37.140
but all my prior attempts were,


00:29:37.140 --> 00:29:38.040
they were good, I think,


00:29:38.040 --> 00:29:39.780
but they were like, "Oh, take the online course,


00:29:39.780 --> 00:29:41.580
"and then we'll do like a community type thing."


00:29:41.580 --> 00:29:43.980
This is like a live course that I'm just teaching


00:29:43.980 --> 00:29:45.740
one-off for that group of people that sign up.


00:29:45.740 --> 00:29:47.020
So we'll see how that goes.


00:29:47.020 --> 00:29:48.460
If it goes really well, people love it,


00:29:48.460 --> 00:29:49.300
then I'll do more of these.


00:29:49.300 --> 00:29:50.780
If not, then maybe less of them.


00:29:50.780 --> 00:29:51.780
I don't know, we'll see how it goes,


00:29:51.780 --> 00:29:55.460
but this is happening August 8th to 19th.


00:29:55.460 --> 00:29:56.780
So it has a real date,


00:29:56.780 --> 00:29:59.660
'cause it has a real live aspect to it.


00:29:59.660 --> 00:30:00.500
- Nice, cool.


00:30:00.500 --> 00:30:03.820
- All right, and Mario on the i says,


00:30:03.820 --> 00:30:05.100
"That's my stack right there."


00:30:05.100 --> 00:30:06.680
Oh yeah, that's a good stack, right?


00:30:06.680 --> 00:30:09.860
There's some really good stuff to talk about there.


00:30:09.860 --> 00:30:12.300
I've been using Beanie and FastAPI for stuff,


00:30:12.300 --> 00:30:13.260
and obviously Mongo.


00:30:13.260 --> 00:30:17.460
- Yeah, speaking of courses, one question out there,


00:30:17.460 --> 00:30:19.180
How's the PyTest course going?


00:30:19.180 --> 00:30:23.160
It is going, it's creeping forward,


00:30:23.160 --> 00:30:25.520
but life has gotten in the way.


00:30:25.520 --> 00:30:30.260
- Yeah, it's awesome that you're working on that.


00:30:30.260 --> 00:30:31.700
Takes a while to create a course, doesn't it?


00:30:31.700 --> 00:30:32.700
- Longer than I thought.


00:30:32.700 --> 00:30:34.300
I'm like, man, I already wrote the book.


00:30:34.300 --> 00:30:36.700
I can totally pop a course out in a couple days.


00:30:36.700 --> 00:30:38.180
(laughing)


00:30:38.180 --> 00:30:39.020
- Yes, of course.


00:30:39.020 --> 00:30:41.040
Would you say that as a junior developer,


00:30:41.040 --> 00:30:42.780
you might think about this differently


00:30:42.780 --> 00:30:45.100
than after somebody's been doing it for a while?


00:30:45.100 --> 00:30:48.080
>> Yeah, this cracked me up.


00:30:48.080 --> 00:30:49.840
I can't remember who shared this.


00:30:49.840 --> 00:30:51.000
>> It's a great joke you got here.


00:30:51.000 --> 00:30:53.160
>> Somebody shared on Twitter, sorry.


00:30:53.160 --> 00:30:57.080
I don't know who. In a job interview,


00:30:57.080 --> 00:31:00.140
you've got somebody gets asked,


00:31:00.140 --> 00:31:02.560
where do you see yourself in five years?


00:31:02.560 --> 00:31:06.040
The junior developer in this interview question,


00:31:06.040 --> 00:31:09.600
shows a picture of the black hoodie with


00:31:09.600 --> 00:31:12.240
multiple screens and light up keyboard.


00:31:12.240 --> 00:31:13.440
I'm in hacker zone.


00:31:13.440 --> 00:31:15.720
of screens, just totally coding.


00:31:15.720 --> 00:31:16.220
Yeah.


00:31:16.220 --> 00:31:18.920
>> Senior developer, where do you see yourself in five years?


00:31:18.920 --> 00:31:20.520
On a farm.


00:31:20.520 --> 00:31:23.760
>> Pumpkin farming with cows and apples.


00:31:23.760 --> 00:31:27.040
You know what, I'm about done. I love it.


00:31:27.040 --> 00:31:30.280
>> Yeah. My personal thoughts are, why not both?


00:31:30.280 --> 00:31:34.520
This is just a view of the inside his office and then outside.


00:31:34.520 --> 00:31:36.140
Working from home, man.


00:31:36.140 --> 00:31:37.560
>> That's right, working from home.


00:31:37.560 --> 00:31:38.080
>> Yeah.


00:31:38.080 --> 00:31:41.240
>> All right. I have maybe the one that preceded that,


00:31:41.240 --> 00:31:45.200
the one that or maybe is in between these two that might precipitate the second.


00:31:45.200 --> 00:31:45.760
>> Okay.


00:31:45.760 --> 00:31:48.480
>> All right. So this is a tweet from Programming Humor.


00:31:48.480 --> 00:31:50.620
It's a strange language that JS.


00:31:50.620 --> 00:31:52.640
JavaScript is such a strange language.


00:31:52.640 --> 00:31:53.920
Nobody can understand it,


00:31:53.920 --> 00:31:55.460
but if they manage to,


00:31:55.460 --> 00:31:58.240
then they create their own framework.


00:31:58.240 --> 00:32:03.580
Everyone's got their JavaScript front-end framework or something like that.


00:32:03.580 --> 00:32:06.720
>> Yeah. You know you've made it when


00:32:06.720 --> 00:32:10.060
the framework you've invented starts showing up on job requirements.


00:32:10.060 --> 00:32:13.500
That's right. With four years experience.


00:32:13.500 --> 00:32:15.020
Or until it's years old.


00:32:15.020 --> 00:32:15.580
Exactly.


00:32:15.580 --> 00:32:20.380
Well, good episode, Michael. Thanks for showing up again.


00:32:20.380 --> 00:32:21.900
You bet. Fun as always.


00:32:21.900 --> 00:32:22.540
Thanks, everybody.


00:32:22.540 --> 00:32:26.140
In the slack and everything. Bye.

