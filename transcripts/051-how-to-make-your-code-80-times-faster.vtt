
00:00:00.000 --> 00:00:06.000
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:06.000 --> 00:00:11.000
This is episode 51, recorded November 7th, 2017.


00:00:11.000 --> 00:00:12.000
I'm Michael Kennedy.


00:00:12.000 --> 00:00:13.000
And I'm Brian Okken.


00:00:13.000 --> 00:00:17.000
And we got a bunch of awesome Python news lined up for you as always.


00:00:17.000 --> 00:00:20.000
Before we get to that, though, let's just say thank you to Datadog.


00:00:20.000 --> 00:00:21.000
Yeah, thanks Datadog.


00:00:21.000 --> 00:00:23.000
Yeah, Datadog is sponsoring this episode.


00:00:23.000 --> 00:00:28.000
They've got some really cool sort of whole platform monitoring tools.


00:00:28.000 --> 00:00:29.680
a t-shirt if you do their little tutorial.


00:00:29.680 --> 00:00:31.840
So we'll talk more about that in a minute.


00:00:31.840 --> 00:00:33.720
But now I'd like to explore


00:00:33.720 --> 00:00:35.400
the United States with some data science.


00:00:35.400 --> 00:00:37.720
>> Yeah. So I ran across


00:00:37.720 --> 00:00:39.080
this article called Exploring


00:00:39.080 --> 00:00:42.160
United States Policing Data with Python.


00:00:42.160 --> 00:00:46.920
Since that's actually probably a hot topic


00:00:46.920 --> 00:00:49.560
and a lot of parsing some of that data,


00:00:49.560 --> 00:00:52.040
I thought this would be a fun thing to walk through.


00:00:52.040 --> 00:00:55.480
So I walked through about half of the paper.


00:00:55.480 --> 00:01:04.360
Anyway, but it's a it's it goes through using Jupiter and I Python and all of those fun tools like pandas and numpy


00:01:04.360 --> 00:01:12.140
To grab some publicly available data. It's in a CSV file. That's zipped and you can just


00:01:12.140 --> 00:01:18.720
import that directly and or read it directly with the appropriate tools with a Jupyter notebook and


00:01:18.720 --> 00:01:24.960
Ask some questions like the race of people that get pulled over more often and things like that


00:01:24.960 --> 00:01:28.560
that. It's I know it's a very political topic. I don't really


00:01:28.560 --> 00:01:31.440
want to get into that part of it. It is interesting, but it's


00:01:31.440 --> 00:01:35.440
mostly I think it's a very, it's a very riveting example for


00:01:35.440 --> 00:01:38.840
walking through why it's important for more and more


00:01:38.840 --> 00:01:42.520
people to be able to examine public data and be able to


00:01:42.520 --> 00:01:44.040
figure out what what's going on.


00:01:44.040 --> 00:01:46.120
Yeah, I think it's really interesting that you bring this


00:01:46.120 --> 00:01:50.340
up this example of working with public data, like there's a ton


00:01:50.340 --> 00:01:54.160
of data that we could be asking and answering questions about


00:01:54.160 --> 00:01:56.040
and this policing data is an example.


00:01:56.040 --> 00:01:59.780
Was it fun for you to play data scientists and play with


00:01:59.780 --> 00:02:02.140
Jupyter and Matplotlib and stuff like that?


00:02:02.140 --> 00:02:03.360
>> Yeah, it really was.


00:02:03.360 --> 00:02:06.080
One of the things I really actually enjoyed was


00:02:06.080 --> 00:02:08.680
that the example goes through pretty quickly


00:02:08.680 --> 00:02:12.120
because it doesn't stop to tell you exactly what all the code does.


00:02:12.120 --> 00:02:15.920
It just has the code snippet that you just plop into


00:02:15.920 --> 00:02:21.840
a Jupyter cell and hit "Shift+Enter",


00:02:21.840 --> 00:02:24.320
and it just runs it and plots things.


00:02:24.320 --> 00:02:26.800
And I know I can look that stuff up later.


00:02:26.800 --> 00:02:29.440
There were a few gotchas that I ran into


00:02:29.440 --> 00:02:31.080
that I'll put in the show notes.


00:02:31.080 --> 00:02:34.080
Since this was my first time playing with Jupyter,


00:02:34.080 --> 00:02:36.240
I didn't really know that you had to hit Shift + Enter,


00:02:36.240 --> 00:02:38.320
but I remember hearing that from somebody else


00:02:38.320 --> 00:02:39.400
to get it to run.


00:02:39.400 --> 00:02:42.080
- Yeah, it's kind of its own world, but it's really nice.


00:02:42.080 --> 00:02:44.800
- Yeah, but the example really does start with


00:02:44.800 --> 00:02:46.840
just from the beginning, if you've never run it before,


00:02:46.840 --> 00:02:48.200
you can walk through some of this.


00:02:48.200 --> 00:02:49.240
It's pretty cool.


00:02:49.240 --> 00:02:51.020
- There's some really interesting stuff you can do


00:02:51.020 --> 00:02:53.320
with police data and data science.


00:02:53.320 --> 00:02:55.820
I don't remember exactly the details.


00:02:55.820 --> 00:02:58.340
So just take this as kind of a general idea,


00:02:58.340 --> 00:03:00.740
but I think partially derivative,


00:03:00.740 --> 00:03:02.680
they had someone on talking about


00:03:02.680 --> 00:03:04.220
analyzing this kind of stuff.


00:03:04.220 --> 00:03:05.860
And it was something like,


00:03:05.860 --> 00:03:08.140
when there was some kind of complaint


00:03:08.140 --> 00:03:11.100
or episode of violence involving police,


00:03:11.100 --> 00:03:12.620
it was pretty frequent,


00:03:12.620 --> 00:03:13.620
like that the person,


00:03:13.620 --> 00:03:15.220
the policeman involved in that violence


00:03:15.220 --> 00:03:18.140
had previously somehow just come off


00:03:18.140 --> 00:03:19.500
of some other horrible thing.


00:03:19.500 --> 00:03:23.960
like policemen who went to like check on a tech


00:03:23.960 --> 00:03:26.560
to deal with a suicide and then pulled somebody over


00:03:26.560 --> 00:03:29.960
who was non-compliant was much more likely


00:03:29.960 --> 00:03:32.240
to have a violent interaction with that person


00:03:32.240 --> 00:03:33.580
at the traffic stop.


00:03:33.580 --> 00:03:35.700
So you can do things like say,


00:03:35.700 --> 00:03:38.160
well, let's change our policy so that people


00:03:38.160 --> 00:03:40.920
who just had some traumatic event get the rest of the day off


00:03:40.920 --> 00:03:42.760
so they can process that, right?


00:03:42.760 --> 00:03:45.600
I mean, these are really powerful and important things.


00:03:45.600 --> 00:03:48.000
- One of the things I wanna caution people for


00:03:48.000 --> 00:03:53.840
is I like I'm a I'm clearly an amateur data scientist because I just did this one thing


00:03:53.840 --> 00:03:57.560
And just follow the tutorial, but now you have that title


00:03:57.560 --> 00:04:00.960
Yeah, no, but but there is


00:04:00.960 --> 00:04:08.960
Be careful when you're drawing when you draw conclusions and plot things and show charts suddenly. It looks more legitimate and


00:04:08.960 --> 00:04:14.400
Yes, there's there's good information you can find but there's also you got to be careful as well


00:04:14.400 --> 00:04:17.060
So at the beginning in this article for instance


00:04:17.640 --> 00:04:25.000
Not all the data is filled in for all a police stops. So you have to deal with like fields that are empty


00:04:25.000 --> 00:04:26.040
What do you do with that?


00:04:26.040 --> 00:04:29.880
And this article deals with it by just throwing them away


00:04:29.880 --> 00:04:35.440
Like throwing away a bunch of it picks one field and says well I can fill that one in


00:04:35.440 --> 00:04:41.280
But the rest of them rest of the rows if there if there if there's any empties just throw them away


00:04:41.280 --> 00:04:45.740
I don't think that that's valid and I think there's a probably a better solution


00:04:45.740 --> 00:04:48.640
But I think that if you're going to publish something,


00:04:48.640 --> 00:04:51.800
you should discuss what you did to clean up the data also.


00:04:51.800 --> 00:04:53.740
>> One of the things we've talked a lot about


00:04:53.740 --> 00:04:55.900
here on the show is performance.


00:04:55.900 --> 00:04:58.780
Sometimes that performance comes in terms of


00:04:58.780 --> 00:05:00.940
asynchronous programming when you're waiting


00:05:00.940 --> 00:05:02.600
on the network and things like that,


00:05:02.600 --> 00:05:06.820
or other times maybe looking at things like PyPy.


00:05:06.820 --> 00:05:09.100
Most people know there's all these different


00:05:09.100 --> 00:05:11.460
implementations and runtimes for Python.


00:05:11.460 --> 00:05:13.060
But if you're a new listener,


00:05:13.060 --> 00:05:14.140
maybe new to Python,


00:05:14.140 --> 00:05:18.220
We have CPython, is what most people mean when they talk about Python.


00:05:18.220 --> 00:05:23.860
We also have a JIT, just-in-time compiler version of Python called PyPy.


00:05:23.860 --> 00:05:27.020
We have IronPython, we have Jython, we have Cython.


00:05:27.020 --> 00:05:28.660
There's all these different variations.


00:05:28.660 --> 00:05:32.820
So one of the ones that promises to take basic working Python code


00:05:32.820 --> 00:05:35.060
and make it a lot faster is PyPy.


00:05:35.060 --> 00:05:38.340
So you'll hear people talk about, "Hey, you could make your code


00:05:38.340 --> 00:05:43.100
five times faster with PyPy under, you know, a whole bunch of constraints."


00:05:43.100 --> 00:05:45.780
So the thing I want to talk about this time on this show


00:05:45.780 --> 00:05:49.860
is how somebody went and took their code for IoT stuff


00:05:49.860 --> 00:05:51.820
and made it 80 times faster with PyPy.


00:05:51.820 --> 00:05:53.820
- Yeah, that's incredible, 80 times, wow.


00:05:53.820 --> 00:05:55.500
- Yeah, and I don't think they even really


00:05:55.500 --> 00:05:56.460
changed the code much.


00:05:56.460 --> 00:05:58.460
They did change one little bit of an inner loop,


00:05:58.460 --> 00:05:59.700
but that was about it.


00:05:59.700 --> 00:06:01.080
All right, so here's the deal.


00:06:01.080 --> 00:06:05.140
This person was working on evolutionary algorithms,


00:06:05.140 --> 00:06:07.420
which they were trying to create basically


00:06:07.420 --> 00:06:10.100
a self-learning adjusting algorithm


00:06:10.100 --> 00:06:12.780
that could evolve a logic to control a quadcopter.


00:06:12.780 --> 00:06:13.620
- Oh, nice.


00:06:13.620 --> 00:06:15.260
- Right, like one of these drone things.


00:06:15.260 --> 00:06:16.740
It was a simulated one, but you know,


00:06:16.740 --> 00:06:19.780
it could be hooked to a real one, it doesn't really matter.


00:06:19.780 --> 00:06:23.780
And in order to drive the quadcopter,


00:06:23.780 --> 00:06:27.100
this object had to basically run a certain operation


00:06:27.100 --> 00:06:28.900
every, you know, so often.


00:06:28.900 --> 00:06:30.720
And the so often is like 100 times a second,


00:06:30.720 --> 00:06:32.380
so quite often.


00:06:32.380 --> 00:06:34.680
And they would input this NumPy array,


00:06:34.680 --> 00:06:35.980
they would do some processing on it,


00:06:35.980 --> 00:06:38.040
and output another one, like how much thrust


00:06:38.040 --> 00:06:39.740
goes to each motor and things like that.


00:06:39.740 --> 00:06:41.660
So this is happening 100 times a second,


00:06:41.660 --> 00:06:44.180
and they ran it with CPython,


00:06:44.180 --> 00:06:45.960
and their test that they ran, not just once,


00:06:45.960 --> 00:06:47.500
but a whole bunch of operations,


00:06:47.500 --> 00:06:49.580
it took about six seconds.


00:06:49.580 --> 00:06:51.460
And they said, "Okay, well, let's try PyPy."


00:06:51.460 --> 00:06:54.700
I heard using PyPy makes it faster.


00:06:54.700 --> 00:06:58.020
So they just, instead of typing Python space my program,


00:06:58.020 --> 00:07:00.100
they type PyPy space my program,


00:07:00.100 --> 00:07:02.300
and it turns out it was, wait for it,


00:07:02.300 --> 00:07:03.540
five and a half times slower.


00:07:03.540 --> 00:07:04.380
- Oh no.


00:07:04.380 --> 00:07:06.220
Yeah, that's not faster.


00:07:06.220 --> 00:07:08.780
- Exactly, it's like, "Oh, who sold me this bill of goods?


00:07:08.780 --> 00:07:10.860
"Man, I thought this was supposed to be faster."


00:07:10.860 --> 00:07:14.840
So it turns out that the integration with NumPy,


00:07:14.840 --> 00:07:16.620
which is what they're using,


00:07:16.620 --> 00:07:21.300
actually some of the C interop stuff is quite a bit slower.


00:07:21.300 --> 00:07:25.820
So they actually use this PyPy implementation of NumPy.


00:07:25.820 --> 00:07:28.860
It's called NumPyPy instead of NumPy.


00:07:28.860 --> 00:07:30.240
And that worked, that made it faster.


00:07:30.240 --> 00:07:31.780
So now it was two times faster


00:07:31.780 --> 00:07:34.260
just by switching out the imports in the library.


00:07:34.260 --> 00:07:35.380
So that's pretty good.


00:07:35.380 --> 00:07:39.500
I said, but you know, we actually think we could do better.


00:07:39.500 --> 00:07:42.020
And so what they did is they started profiling it,


00:07:42.020 --> 00:07:43.300
and they looked at where it was slow and said,


00:07:43.300 --> 00:07:44.420
you know, this thing, actually,


00:07:44.420 --> 00:07:47.220
we could just rewrite this algorithm just a tiny bit


00:07:47.220 --> 00:07:49.740
so it's more friendly to the JIT compiler.


00:07:49.740 --> 00:07:52.220
And they got it to go 80 times faster


00:07:52.220 --> 00:07:54.980
than the original CPython plus NumPy version.


00:07:54.980 --> 00:07:55.820
- Oh, that's nice.


00:07:55.820 --> 00:07:56.640
- That's awesome, right?


00:07:56.640 --> 00:07:58.100
And that was even 35 times faster


00:07:58.100 --> 00:08:00.900
than the native PyPy plus NumPy version.


00:08:00.900 --> 00:08:03.100
So I think that's a really interesting lesson.


00:08:03.100 --> 00:08:05.300
- Yeah, nice use of profiler, too.


00:08:05.300 --> 00:08:06.900
- Yeah, exactly, that's the point I was gonna make,


00:08:06.900 --> 00:08:09.220
is like, yeah, it's one thing to throw PyPy


00:08:09.220 --> 00:08:10.460
or some other technology at it,


00:08:10.460 --> 00:08:14.060
but it's not always just gonna be like this silver bullet


00:08:14.060 --> 00:08:15.740
that solves your problem, right?


00:08:15.740 --> 00:08:19.420
But PyPy plus a little intelligent problem solving,


00:08:19.420 --> 00:08:21.100
that made a huge difference for these guys.


00:08:21.100 --> 00:08:24.280
- Yeah, so I mean, you said this was a simulation?


00:08:24.280 --> 00:08:25.940
- Yeah, they're doing it as a simulation.


00:08:25.940 --> 00:08:27.860
- Okay, I wonder if you can run,


00:08:27.860 --> 00:08:30.180
I don't know whether or not you can run PyPy


00:08:30.180 --> 00:08:33.940
on a little tiny quadcopter controller.


00:08:33.940 --> 00:08:36.180
- I guess it depends on your definition of tiny.


00:08:36.180 --> 00:08:38.860
Like if it's Raspberry Pi,


00:08:38.860 --> 00:08:40.180
I think you probably could.


00:08:40.180 --> 00:08:44.100
If it's Adafruit-sized, maybe that might be too small.


00:08:44.100 --> 00:08:44.940
I actually don't know.


00:08:44.940 --> 00:08:45.780
- Okay, cool.


00:08:45.780 --> 00:08:46.600
- Yeah.


00:08:46.600 --> 00:08:49.740
So the next one is an interesting one I saw go by


00:08:49.740 --> 00:08:51.500
and I saw that you picked here as well.


00:08:51.500 --> 00:08:54.940
It has to do with the longevity of open source projects.


00:08:54.940 --> 00:08:57.940
- Yeah, this is actually a Wired article


00:08:57.940 --> 00:09:00.980
called "Giving Open Source Projects Life


00:09:00.980 --> 00:09:02.980
After a Developer's Death."


00:09:02.980 --> 00:09:06.940
And I hadn't really thought about that too much before,


00:09:06.940 --> 00:09:09.420
But there is, I mean, we've got more and more


00:09:09.420 --> 00:09:10.860
as the article goes on,


00:09:10.860 --> 00:09:14.020
we've got more and more critical projects


00:09:14.020 --> 00:09:17.380
using open source projects.


00:09:17.380 --> 00:09:19.480
And there's a lot of them


00:09:19.480 --> 00:09:21.660
that don't have that many maintainers


00:09:21.660 --> 00:09:24.220
or sometimes just a handful or one.


00:09:24.220 --> 00:09:26.900
So really, how do you deal with that?


00:09:26.900 --> 00:09:29.900
So that part of the article is just talking about


00:09:29.900 --> 00:09:31.300
this as a problem,


00:09:31.300 --> 00:09:36.300
but then also there's possibly some solutions


00:09:36.700 --> 00:09:40.100
And I was just wondering if we had any solutions.


00:09:40.100 --> 00:09:44.300
I also had some terrible puns I was gonna try to throw in.


00:09:44.300 --> 00:09:48.060
What to do after you hit your corporeal segfault


00:09:48.060 --> 00:09:50.900
and raise an end of life exception.


00:09:50.900 --> 00:09:54.180
- Yeah, it's definitely something that people,


00:09:54.180 --> 00:09:55.500
I guess, really wanna think of.


00:09:55.500 --> 00:09:57.420
I mean, if you're in business,


00:09:57.420 --> 00:09:58.820
they do talk about the like,


00:09:58.820 --> 00:10:02.340
what if so-and-so gets hit by a bus, right?


00:10:02.340 --> 00:10:04.500
Will that kill the business?


00:10:04.500 --> 00:10:08.060
Well, if this open source project is used by many businesses,


00:10:08.060 --> 00:10:12.020
it could be that that actually kills a lot of projects, a lot of companies.


00:10:12.020 --> 00:10:12.540
Yeah.


00:10:12.540 --> 00:10:16.180
So I didn't know this was out there that apparently there's a place called


00:10:16.180 --> 00:10:21.780
libraries.io that has a bus factor evaluator for different libraries.


00:10:21.780 --> 00:10:26.100
So you can plug in a library that you depend on and look up its bus factor.


00:10:26.100 --> 00:10:31.620
So how many of the core developers would have to be on a bus that got


00:10:31.620 --> 00:10:34.380
hit before the project went away?


00:10:34.380 --> 00:10:41.380
But one of the things that it did bring up, which I looked up some of the Python stuff,


00:10:41.380 --> 00:10:45.380
and some of them are core things that even though there's a handful of maintainers,


00:10:45.380 --> 00:10:48.380
I think it would get picked up anyway because it's part of the standard library.


00:10:48.380 --> 00:10:54.380
But there's definitely others that are of concern, and one person points out that


00:10:54.380 --> 00:11:01.380
perhaps we could build some more things into GitHub or PyPI or other places


00:11:01.380 --> 00:11:04.620
other places to have maybe errors put in place.


00:11:04.620 --> 00:11:09.060
So you could say, you know, if I don't check in for like six months,


00:11:09.060 --> 00:11:12.380
then transfer ownership to these people or something.


00:11:12.380 --> 00:11:13.860
>> Oh, that's a pretty cool idea.


00:11:13.860 --> 00:11:16.620
Almost like an escrow for open source.


00:11:16.620 --> 00:11:18.980
>> Yeah, like I mean, if you get a big investment account,


00:11:18.980 --> 00:11:21.940
you got a list who gets it if something happens to you.


00:11:21.940 --> 00:11:24.820
So maybe something ought to be like that for open source projects.


00:11:24.820 --> 00:11:28.580
>> It sounds like projects somebody could create and integrate with GitHub.


00:11:28.580 --> 00:11:29.740
>> Yeah, maybe.


00:11:29.740 --> 00:11:34.380
One of the other solutions that I have seen


00:11:34.380 --> 00:11:38.460
is like the pytest community for a lot of the plugins.


00:11:38.460 --> 00:11:39.660
Try to encourage people to,


00:11:39.660 --> 00:11:42.620
once you get quite a few users of your plugin,


00:11:42.620 --> 00:11:47.340
to push it over to a development group on GitHub,


00:11:47.340 --> 00:11:50.240
and then anybody on the group can maintain it if necessary.


00:11:50.240 --> 00:11:51.540
- Yeah, that makes a lot of sense.


00:11:51.540 --> 00:11:53.900
I mean, you could always fork the repo


00:11:53.900 --> 00:11:55.320
and just say, "The real one is here,"


00:11:55.320 --> 00:11:57.360
but I can just see a lot of skirmishes around,


00:11:57.360 --> 00:11:58.940
like, "No, your fork is not real.


00:11:58.940 --> 00:12:00.220
- Well, my fork is really like, you know,


00:12:00.220 --> 00:12:01.900
people could fight over ownership, right?


00:12:01.900 --> 00:12:05.580
- Yeah, and that's doable on GitHub,


00:12:05.580 --> 00:12:08.300
but you can't really do that on PyPI that I know of.


00:12:08.300 --> 00:12:11.580
I don't know how to get transfer ownership on PyPI.


00:12:11.580 --> 00:12:13.500
- Yeah, I think you gotta contact them directly


00:12:13.500 --> 00:12:15.420
and just lobby your case, right?


00:12:15.420 --> 00:12:16.780
Just didn't sound like a great


00:12:16.780 --> 00:12:18.780
long-term widespread solution.


00:12:18.780 --> 00:12:20.900
- I don't have that problem currently


00:12:20.900 --> 00:12:23.820
of having any super popular packages, but you know.


00:12:23.820 --> 00:12:25.300
- Yep, that's cool.


00:12:25.300 --> 00:12:26.580
Definitely worth thinking about.


00:12:26.580 --> 00:12:28.860
Yeah, so before we get to the next topic,


00:12:28.860 --> 00:12:30.860
Let me tell you about Datadog, right?


00:12:30.860 --> 00:12:32.900
So performance in bottlenecks,


00:12:32.900 --> 00:12:35.660
these don't just exist in just your application code, right?


00:12:35.660 --> 00:12:36.940
Like just 'cause your code is slow,


00:12:36.940 --> 00:12:38.940
well, you could be waiting on the database.


00:12:38.940 --> 00:12:40.020
The database could be waiting


00:12:40.020 --> 00:12:43.200
on some Linux internal behavior, who knows, right?


00:12:43.200 --> 00:12:45.820
So these are layers upon layers upon layers


00:12:45.820 --> 00:12:48.020
across systems that we really build our apps with.


00:12:48.020 --> 00:12:50.120
And Datadog lets you view all of those


00:12:50.120 --> 00:12:52.440
as like one whole thing.


00:12:52.440 --> 00:12:55.460
So let's say you have a Python web app running on Flask.


00:12:55.460 --> 00:12:56.380
It's built on Mongo,


00:12:56.380 --> 00:12:58.620
hosted on a scaled out set of Ubuntu servers


00:12:58.620 --> 00:13:00.340
running Nginx and microWSGI,


00:13:00.340 --> 00:13:03.340
Datadog will let you view and monitor all those things


00:13:03.340 --> 00:13:04.580
in one system.


00:13:04.580 --> 00:13:06.380
So that is really, really super awesome.


00:13:06.380 --> 00:13:07.540
And the more you scale out


00:13:07.540 --> 00:13:09.960
and the more diverse your system gets,


00:13:09.960 --> 00:13:11.980
the better Datadog can help you.


00:13:11.980 --> 00:13:13.420
They got a getting started tutorial.


00:13:13.420 --> 00:13:14.300
Just take a few moments.


00:13:14.300 --> 00:13:15.300
And if you finish it,


00:13:15.300 --> 00:13:17.260
they'll send you a sweet Datadog t-shirt.


00:13:17.260 --> 00:13:19.940
So check that out at pythonbytes.fm/datadog


00:13:19.940 --> 00:13:21.180
and see what you've been missing.


00:13:21.180 --> 00:13:22.100
- I still have to do that.


00:13:22.100 --> 00:13:22.980
I need that t-shirt.


00:13:22.980 --> 00:13:24.660
- Yeah, we've got to get our t-shirt.


00:13:24.660 --> 00:13:27.140
So maybe this is the wrong season


00:13:27.140 --> 00:13:29.760
here in the Northern Hemisphere.


00:13:29.760 --> 00:13:31.800
Maybe this is gonna resonate a little more


00:13:31.800 --> 00:13:33.100
with our Australian friends.


00:13:33.100 --> 00:13:35.000
But this next project I wanna talk about


00:13:35.000 --> 00:13:38.920
is a solar powered, internet connected lawn sprinkler.


00:13:38.920 --> 00:13:39.760
- Oh, nice.


00:13:39.760 --> 00:13:42.080
- Yeah, so Lenin, one of our listeners,


00:13:42.080 --> 00:13:43.420
friends of the show sent this in, said,


00:13:43.420 --> 00:13:45.400
"Hey, I've created this really cool project


00:13:45.400 --> 00:13:46.560
"and I'd like to share it with everyone."


00:13:46.560 --> 00:13:48.700
And I thought, yeah, this is actually a really neat example.


00:13:48.700 --> 00:13:50.960
So I thought we'd throw it in here.


00:13:50.960 --> 00:13:53.920
And the idea is he went and got this little tiny


00:13:53.920 --> 00:13:56.880
Adafruit Feather Huzzah board.


00:13:56.880 --> 00:14:00.480
And this is like a little tiny microchip type thing,


00:14:00.480 --> 00:14:02.600
but it has a wifi, so that's important.


00:14:02.600 --> 00:14:05.080
You can plug it in somewhere and talk to it.


00:14:05.080 --> 00:14:07.380
And it works with MicroPython.


00:14:07.380 --> 00:14:10.520
So MicroPython is the Python


00:14:10.520 --> 00:14:11.880
that works in the smallest devices.


00:14:11.880 --> 00:14:13.320
Like you said, the PyPy before,


00:14:13.320 --> 00:14:15.780
I'm not sure if you can get PyPy to run on this one,


00:14:15.780 --> 00:14:17.720
but MicroPython is so super level.


00:14:17.720 --> 00:14:20.000
It's basically is the operating system.


00:14:20.000 --> 00:14:22.200
Your app is basically the operating system.


00:14:22.200 --> 00:14:24.040
Yeah, so you can take like a Lambda function


00:14:24.040 --> 00:14:26.480
and connect it right to a hardware interrupt directly.


00:14:26.480 --> 00:14:28.480
Like that's how low level, that's insane, right?


00:14:28.480 --> 00:14:30.160
- Oh, that's nice, yeah.


00:14:30.160 --> 00:14:31.000
- Right?


00:14:31.000 --> 00:14:33.520
And he combines a couple of other interesting things.


00:14:33.520 --> 00:14:35.040
He combines Home Assistant,


00:14:35.040 --> 00:14:38.720
which is the biggest home automation project in Python,


00:14:38.720 --> 00:14:41.880
like a really cool app that integrates tons and tons


00:14:41.880 --> 00:14:45.200
of different IoT and smart home things.


00:14:45.200 --> 00:14:47.640
And he gives a really nice list of like,


00:14:47.640 --> 00:14:50.120
here's every single piece of hardware I used.


00:14:50.120 --> 00:14:51.880
Here's the solar board that I used.


00:14:51.880 --> 00:14:55.440
Here's the container for the feather Haza board.


00:14:55.440 --> 00:14:57.200
And it's just a really nice example


00:14:57.200 --> 00:15:00.040
of a small, compact IoT project.


00:15:00.040 --> 00:15:02.040
- Yeah, and useful and not creepy.


00:15:02.040 --> 00:15:02.880
I like it.


00:15:02.880 --> 00:15:03.880
- Yeah, exactly.


00:15:03.880 --> 00:15:06.040
The more we seem to go back and forth


00:15:06.040 --> 00:15:07.040
on these little IoT things,


00:15:07.040 --> 00:15:08.340
I really wanna create one of these


00:15:08.340 --> 00:15:09.400
that goes on my front door


00:15:09.400 --> 00:15:11.020
that uses machine learning to determine


00:15:11.020 --> 00:15:12.660
what type of person is on my front door


00:15:12.660 --> 00:15:13.600
when they ring the doorbell.


00:15:13.600 --> 00:15:14.800
- Yeah, or a dinosaur.


00:15:14.800 --> 00:15:16.240
- Yeah, or a dinosaur, that's right.


00:15:16.240 --> 00:15:18.520
Yeah, and also I had put a link in here


00:15:18.520 --> 00:15:21.640
to Talk Python episode 108,


00:15:21.640 --> 00:15:23.620
where I actually had the guys from Adafruit come on


00:15:23.620 --> 00:15:25.580
and talk about a whole bunch of these different projects.


00:15:25.580 --> 00:15:27.260
But yeah, nice job, London.


00:15:27.260 --> 00:15:28.300
This is a cool one.


00:15:28.300 --> 00:15:30.580
- Yeah, and shout out to Adafruit too


00:15:30.580 --> 00:15:32.020
for doing all sorts of cool stuff


00:15:32.020 --> 00:15:33.060
with hardware and software.


00:15:33.060 --> 00:15:33.940
I like that.


00:15:33.940 --> 00:15:36.380
- Yeah, they have a big educational aspect to them.


00:15:36.380 --> 00:15:37.880
Not just education education,


00:15:37.880 --> 00:15:40.620
but teaching people who want to learn about IoT.


00:15:40.620 --> 00:15:42.200
I'm definitely planning on playing


00:15:42.200 --> 00:15:44.660
with some of these little devices in MicroPython.


00:15:44.660 --> 00:15:46.380
It just seems really fun.


00:15:46.380 --> 00:15:49.060
- Okay, so I am going to be perfectly honest


00:15:49.060 --> 00:15:49.900
with this last one.


00:15:49.900 --> 00:15:56.480
I had a, my last thing I was going to talk about was going to be another packaging story,


00:15:56.480 --> 00:15:58.540
but I kind of went down a rabbit hole.


00:15:58.540 --> 00:16:02.280
So instead of getting into that, that's my homework for next week.


00:16:02.280 --> 00:16:05.460
So I've already set up what I'm going to talk about next week.


00:16:05.460 --> 00:16:09.800
But the, what I want to highlight is some, some books that came out.


00:16:09.800 --> 00:16:12.300
So we had some new Python books that came out recently.


00:16:12.300 --> 00:16:14.020
It's a big week for Python books.


00:16:14.020 --> 00:16:15.020
Yeah.


00:16:15.020 --> 00:16:23.180
Python tricks from Dan Bader that came out and Matt Harrison's illustrated guide to Python 3 and


00:16:23.180 --> 00:16:27.940
I have just actually just I'm gonna read at least peruse both of these


00:16:27.940 --> 00:16:31.660
I've just started Python tricks and I like the format. It's cool and


00:16:31.660 --> 00:16:36.780
and then I'm gonna take a read for Python Matt Harrison's book and I


00:16:36.780 --> 00:16:43.740
The cover is awesome and I want to try to get actually I want to have that around my office so that other people can


00:16:43.820 --> 00:16:46.220
can look up Python 3 stuff pretty easy.


00:16:46.220 --> 00:16:47.900
- That seems really nice, I looked through it as well,


00:16:47.900 --> 00:16:51.580
and the illustrated aspect is cool on Matt's.


00:16:51.580 --> 00:16:54.260
So yeah, congrats both to Dan and Matt on this, this is cool.


00:16:54.260 --> 00:16:57.820
- Yeah, and then the last thing is that I was on Twitter,


00:16:57.820 --> 00:17:00.900
I was talking with a handful of people, authors.


00:17:00.900 --> 00:17:02.740
There are some Python books out there


00:17:02.740 --> 00:17:07.740
that really could use some Amazon review love,


00:17:07.740 --> 00:17:10.260
so I'm gonna drop a link to my book


00:17:10.260 --> 00:17:13.940
and Harry Percival's Test Driven Development,


00:17:13.940 --> 00:17:15.020
which has been out for a while,


00:17:15.020 --> 00:17:17.420
but it's only got six reviews.


00:17:17.420 --> 00:17:19.140
And I know a lot of people have read this stuff.


00:17:19.140 --> 00:17:19.980
And then also--


00:17:19.980 --> 00:17:21.980
- Yeah, Harry's book is really great.


00:17:21.980 --> 00:17:23.700
Obey the Testing Goat and all that stuff.


00:17:23.700 --> 00:17:27.800
- And then also the Greenfield's Two Scoops of Django.


00:17:27.800 --> 00:17:29.700
I know a lot of people have started Django


00:17:29.700 --> 00:17:32.980
or gotten a lot better at it using this.


00:17:32.980 --> 00:17:35.740
So go out and show some Amazon love to these people.


00:17:35.740 --> 00:17:36.580
- Yeah, definitely.


00:17:36.580 --> 00:17:39.220
I think it really helps if you've read a book


00:17:39.220 --> 00:17:42.180
to write a review, if you've taken a class,


00:17:42.180 --> 00:17:43.180
give a review, right?


00:17:43.180 --> 00:17:44.980
Like these things actually make a big difference.


00:17:44.980 --> 00:17:46.140
- Yeah, it really does.


00:17:46.140 --> 00:17:49.700
And we're all trying to do things the right way


00:17:49.700 --> 00:17:51.340
and trying to support the community, so.


00:17:51.340 --> 00:17:52.180
- Yep. - That's cool.


00:17:52.180 --> 00:17:53.180
- Awesome.


00:17:53.180 --> 00:17:55.780
Well, the last one I wanna talk about is,


00:17:55.780 --> 00:17:58.380
sort of harkens back to the first one that you did,


00:17:58.380 --> 00:18:01.740
the data science space and the Anaconda distribution.


00:18:01.740 --> 00:18:04.380
So you probably know Anaconda distribution


00:18:04.380 --> 00:18:08.120
is an alternate distribution for Python.


00:18:08.120 --> 00:18:12.380
It's basically CPython, but instead of just being a standalone CPython


00:18:12.380 --> 00:18:16.680
where you pip install stuff, it comes packaged with most of the machine learning,


00:18:16.680 --> 00:18:22.560
data science, and popular libraries you already need pre-compiled for your machine.


00:18:22.560 --> 00:18:27.760
So if you want to use some weird package that requires like a Fortran compiler or something,


00:18:27.760 --> 00:18:29.920
you can just, you know, install it.


00:18:29.920 --> 00:18:34.240
Either it's come with Anaconda or you conda install it,


00:18:34.240 --> 00:18:36.520
and it actually downloads to the binary version.


00:18:36.520 --> 00:18:40.440
so there's no worries about it not installing correctly.


00:18:40.440 --> 00:18:45.440
>> Yeah, there's also both paid and free distributions,


00:18:45.440 --> 00:18:47.920
but even the free one is one of


00:18:47.920 --> 00:18:51.280
the few multiple package distributions


00:18:51.280 --> 00:18:55.320
that is completely legitimate to do within a company,


00:18:55.320 --> 00:18:58.360
as long as you're not reselling that itself.


00:18:58.360 --> 00:19:00.520
>> Yeah, that's awesome. So the news about


00:19:00.520 --> 00:19:04.160
Amaconda distribution is version 5 is released.


00:19:04.160 --> 00:19:07.200
So they have a hundred packages have been updated or added.


00:19:07.200 --> 00:19:11.440
They have JupyterLab, alpha preview included, updated MKL.


00:19:11.440 --> 00:19:12.280
- Nice.


00:19:12.280 --> 00:19:15.200
- That's the Intel high performance compiled stuff.


00:19:15.200 --> 00:19:19.040
So it used the Intel sort of low level speed ups


00:19:19.040 --> 00:19:22.280
for the machine learning and computational stuff.


00:19:22.280 --> 00:19:24.440
New compilers for Mac OS and Linux.


00:19:24.440 --> 00:19:25.440
So what is that?


00:19:25.440 --> 00:19:27.740
That's Clang and GCC respectively.


00:19:27.740 --> 00:19:30.720
But what's important here is they flipped the flags


00:19:30.720 --> 00:19:32.920
on the compile steps for all of these things


00:19:32.920 --> 00:19:37.920
to use the most newest and compatible flags for security.


00:19:37.920 --> 00:19:41.640
So the stuff that gets compiled out of here


00:19:41.640 --> 00:19:44.640
is less likely to suffer from things like


00:19:44.640 --> 00:19:47.620
buffer overflow sort of attacks and stuff.


00:19:47.620 --> 00:19:48.500
So that's really cool.


00:19:48.500 --> 00:19:50.920
The compilers are now a little safer for you.


00:19:50.920 --> 00:19:54.040
They've got updated conda forge and some other things.


00:19:54.040 --> 00:19:55.760
They're creating another channel that has to do


00:19:55.760 --> 00:19:58.000
with this new compiler thing I talked about and so on.


00:19:58.000 --> 00:19:58.820
So pretty cool.


00:19:58.820 --> 00:20:01.400
- I still have on my to-do list to go check out JupyterLab.


00:20:01.400 --> 00:20:02.640
Have you done any of that?


00:20:02.640 --> 00:20:04.240
- I have not checked out JupyterLab.


00:20:04.240 --> 00:20:05.320
- Okay, it looks fun.


00:20:05.320 --> 00:20:06.740
- Yeah, it definitely does.


00:20:06.740 --> 00:20:09.080
There's a lot of cool stuff happening with Jupyter


00:20:09.080 --> 00:20:11.340
and like social coding and stuff these days.


00:20:11.340 --> 00:20:12.220
It's exciting.


00:20:12.220 --> 00:20:14.440
Well, that's it for my news this week, Brian.


00:20:14.440 --> 00:20:16.040
Anything else you wanna add?


00:20:16.040 --> 00:20:19.520
- I did find out last week that the Python testing


00:20:19.520 --> 00:20:23.400
with pytest is available on, what is that thing?


00:20:23.400 --> 00:20:24.240
- Safari Books Online?


00:20:24.240 --> 00:20:27.000
- Yeah, the Safari Online, it's now there, so.


00:20:27.000 --> 00:20:28.880
- That's awesome, like tons of people have that


00:20:28.880 --> 00:20:31.560
as just available to them as part of their company, right?


00:20:31.560 --> 00:20:34.000
So people can now get your book that way.


00:20:34.000 --> 00:20:35.340
- I don't think I do.


00:20:35.340 --> 00:20:37.540
I'm gonna check it out.


00:20:37.540 --> 00:20:38.580
Yeah, people can check it out.


00:20:38.580 --> 00:20:40.260
I have no idea how, if any of that money


00:20:40.260 --> 00:20:41.340
comes back to me with that,


00:20:41.340 --> 00:20:43.340
but I'm glad that a lot of people can read it.


00:20:43.340 --> 00:20:44.740
- I think one of the things that's great


00:20:44.740 --> 00:20:46.340
about creating something like a book


00:20:46.340 --> 00:20:49.840
or a course or whatever, even a podcast per se,


00:20:49.840 --> 00:20:52.020
is that people just use it and enjoy it, right?


00:20:52.020 --> 00:20:53.340
You put a lot of energy into creating it


00:20:53.340 --> 00:20:56.540
and if it just sat there digitally silent,


00:20:56.540 --> 00:20:57.380
that would be sad.


00:20:57.380 --> 00:20:58.820
- Yeah, yeah, it would be.


00:20:58.820 --> 00:21:01.260
- So cool, yeah, I'm glad it's out there


00:21:01.260 --> 00:21:02.920
and yet another channel for people.


00:21:02.920 --> 00:21:04.180
All right, well, Brian, thanks again--


00:21:04.180 --> 00:21:05.020
- Thank you.


00:21:05.020 --> 00:21:07.380
- For everything this week, and talk to you all later.


00:21:07.380 --> 00:21:08.640
- All right, bye.


00:21:08.640 --> 00:21:10.380
- Thank you for listening to Python Bytes.


00:21:10.380 --> 00:21:12.880
Follow the show on Twitter via @PythonBytes,


00:21:12.880 --> 00:21:16.060
that's Python Bytes as in B-Y-T-E-S,


00:21:16.060 --> 00:21:19.440
and get the full show notes at pythonbytes.fm.


00:21:19.440 --> 00:21:21.060
If you have a news item you want featured,


00:21:21.060 --> 00:21:23.500
just visit pythonbytes.fm and send it our way.


00:21:23.500 --> 00:21:26.660
We're always on the lookout for sharing something cool.


00:21:26.660 --> 00:21:28.520
On behalf of myself and Brian Aukin,


00:21:28.520 --> 00:21:30.040
this is Michael Kennedy.


00:21:30.040 --> 00:21:32.080
Thank you for listening and sharing this podcast


00:21:32.080 --> 00:21:33.720
with your friends and colleagues.

