WEBVTT

00:00:00.001 --> 00:00:05.500
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.500 --> 00:00:10.680
This is episode 51, recorded November 7th, 2017.

00:00:10.680 --> 00:00:11.760
I'm Michael Kennedy.

00:00:11.760 --> 00:00:12.540
And I'm Brian Okken.

00:00:12.540 --> 00:00:16.620
And we got a bunch of awesome Python news lined up for you, as always.

00:00:16.620 --> 00:00:19.800
Before we get to that, though, let's just say thank you to Datadog.

00:00:19.800 --> 00:00:20.780
Yeah, thanks, Datadog.

00:00:20.780 --> 00:00:22.720
Yeah, Datadog is sponsoring this episode.

00:00:22.720 --> 00:00:27.580
They've got some really cool sort of whole platform monitoring tools.

00:00:27.580 --> 00:00:29.640
And you get a t-shirt if you do their little tutorials.

00:00:29.920 --> 00:00:31.620
So we'll talk more about that in a minute.

00:00:31.620 --> 00:00:35.380
But now I'd like to explore the United States with some data science.

00:00:35.380 --> 00:00:41.480
Yeah, so I ran across this article called Exploring United States Policing Data with Python.

00:00:41.480 --> 00:00:49.180
And since that's actually kind of probably a hot topic in a lot of parsing some of that data,

00:00:49.180 --> 00:00:52.040
I thought this would be a fun thing to walk through.

00:00:52.040 --> 00:00:55.260
So I walked through about half of the paper.

00:00:55.260 --> 00:01:07.700
Anyway, but it goes through using Jupyter and IPython and all of those fun tools like Pandas and NumPy to grab some publicly available data.

00:01:08.360 --> 00:01:09.760
It's in a CSV file that's zipped.

00:01:09.760 --> 00:01:25.580
And you can just import that directly or read it directly with the appropriate tools with a Jupyter notebook and ask some questions like the race of people that get pulled over more often and things like that.

00:01:25.740 --> 00:01:28.020
I know it's a very political topic.

00:01:28.020 --> 00:01:29.780
I don't really want to get into that part of it.

00:01:29.780 --> 00:01:30.500
It is interesting.

00:01:30.500 --> 00:01:44.000
But mostly I think it's a very riveting example for walking through why it's important for more and more people to be able to examine public data and be able to figure out what's going on.

00:01:44.400 --> 00:01:48.960
Yeah, I think it's really interesting that you bring this up, this example of working with public data.

00:01:48.960 --> 00:01:54.400
Like there's a ton of data that we could be asking and answering questions about, right?

00:01:54.400 --> 00:01:55.640
This policing data is an example.

00:01:55.640 --> 00:02:02.020
Was it fun for you to like play data scientists and play with Jupyter and Matplotlib and stuff like that?

00:02:02.200 --> 00:02:03.200
Yeah, it really was.

00:02:03.200 --> 00:02:12.080
And one of the things I really actually enjoyed was that the example goes through pretty quickly because it doesn't stop to tell you exactly what all the code does.

00:02:12.080 --> 00:02:23.800
It just has the code snippet that you just plop into a Jupyter cell and hit shift enter and it just runs it and plots things.

00:02:23.800 --> 00:02:26.340
And I know I can look that stuff up later.

00:02:26.340 --> 00:02:30.600
There were a few gotchas that I ran into that I'll put in the show notes.

00:02:30.600 --> 00:02:39.040
Since this was my first time playing with Jupyter, I didn't really know that you had to hit shift enter, but I remember hearing that from somebody else to get it to run.

00:02:39.040 --> 00:02:41.820
Yeah, it's kind of its own world, but it's really nice.

00:02:41.820 --> 00:02:45.640
Yeah, but the example really does start with just from the beginning.

00:02:45.640 --> 00:02:48.100
If you've never run it before, you can walk through some of this.

00:02:48.100 --> 00:02:48.780
It's pretty cool.

00:02:48.780 --> 00:02:53.200
There's some really interesting stuff you can do with police data and data science.

00:02:53.200 --> 00:02:58.220
I don't remember exactly the details, so just take this as kind of a general idea.

00:02:58.220 --> 00:03:04.120
But I think partially derivative, they had someone on talking about analyzing this kind of stuff.

00:03:04.120 --> 00:03:12.420
And it was something like when there was some kind of complaint or episode of violence involving police, it was pretty frequent.

00:03:12.420 --> 00:03:19.420
And it was like that the policeman involved in that violence had previously somehow just come off of some other horrible thing.

00:03:19.420 --> 00:03:33.480
Like policemen who went to like check on a tech to deal with a suicide and then pulled somebody over who was, you know, noncompliant was much more likely to have a violent interaction with that person at the traffic stop.

00:03:33.480 --> 00:03:42.260
So you can do things like say, well, let's change our policy so that people who just had some traumatic event get the rest of the day off so they can process that.

00:03:42.260 --> 00:03:42.660
Right.

00:03:42.660 --> 00:03:45.080
I mean, these are really powerful and important things.

00:03:45.080 --> 00:03:56.300
One of the things I want to caution people for is, is I like I'm a I'm clearly an amateur data scientist because I just did this one thing and just followed a tutorial.

00:03:56.560 --> 00:03:57.520
But now you have that title.

00:03:57.520 --> 00:04:01.100
Yeah, no, but but there is.

00:04:01.100 --> 00:04:06.920
Be careful when you're drawing when you draw conclusions and plot things and show charts.

00:04:06.920 --> 00:04:08.620
Suddenly it looks more legitimate.

00:04:08.620 --> 00:04:14.460
And yes, there's there's good information you can find, but there's also you got to be careful as well.

00:04:14.460 --> 00:04:21.540
So at the beginning in this article, for instance, not all the data is filled in for all police stops.

00:04:21.900 --> 00:04:25.020
So you have to deal with like fields that are empty.

00:04:25.020 --> 00:04:26.220
What do you do with that?

00:04:26.220 --> 00:04:35.580
And this article deals with it by just throwing them away, like throwing away a bunch of it picks one field and says, well, I can fill that one in.

00:04:35.580 --> 00:04:41.480
But the rest of them, rest of the rows, if there if there if there's any empties, just throw them away.

00:04:41.480 --> 00:04:43.240
I don't think that that's valid.

00:04:43.240 --> 00:04:45.740
And I think there's a probably a better solution.

00:04:45.740 --> 00:04:51.520
But but I think that if you're going to publish something, you should discuss what you what you did to clean up the data also.

00:04:51.520 --> 00:04:55.840
One of the things we've talked a lot about here on the show is performance.

00:04:55.840 --> 00:05:02.460
Sometimes that performance comes in terms of asynchronous programming when you're waiting on the network and things like that.

00:05:02.460 --> 00:05:06.200
Or other times, maybe looking at things like PyPy.

00:05:06.200 --> 00:05:11.180
So most people know there's all these different implementations and runtimes for Python.

00:05:11.180 --> 00:05:18.120
But if you're a new listener, maybe new to Python, we have CPython is what most people mean when they talk about Python.

00:05:18.120 --> 00:05:23.820
We also have a JIT just in time compiler version of Python called PyPy.

00:05:23.820 --> 00:05:24.800
We have IronPython.

00:05:24.800 --> 00:05:25.620
We have Jitthon.

00:05:25.620 --> 00:05:27.020
We have Cython.

00:05:27.020 --> 00:05:28.420
There's all these different variations.

00:05:28.420 --> 00:05:34.940
So one of the ones that promises to take basic working Python code and make it a lot faster is PyPy.

00:05:35.600 --> 00:05:42.960
So you'll hear people talk about, hey, you could make your code five times faster with PyPy under, you know, a whole bunch of constraints.

00:05:42.960 --> 00:05:51.700
So the show, the thing I want to talk about this time on this show is how somebody went and took their code for IoT stuff and made it 80 times faster with PyPy.

00:05:51.700 --> 00:05:52.660
Yeah, that's incredible.

00:05:52.660 --> 00:05:53.380
80 times.

00:05:53.380 --> 00:05:53.880
Yeah.

00:05:53.880 --> 00:05:56.380
And I don't think they even really changed the code much.

00:05:56.380 --> 00:05:59.300
They did change one little bit of an inner loop, but that was about it.

00:05:59.660 --> 00:05:59.960
All right.

00:05:59.960 --> 00:06:01.000
So here's the deal.

00:06:01.000 --> 00:06:12.700
This person was working on evolutionary algorithms, which they were trying to create basically a self-learning adjusting algorithm that could evolve a logic to control a quadcopter.

00:06:12.700 --> 00:06:13.120
Oh, nice.

00:06:13.120 --> 00:06:13.760
Right?

00:06:13.760 --> 00:06:15.160
Like one of these drone things.

00:06:15.160 --> 00:06:18.460
It was a simulated one, but, you know, it could be hooked to a real one.

00:06:18.460 --> 00:06:19.060
It didn't really matter.

00:06:19.600 --> 00:06:28.780
And in order to drive the quadcopter, this object had to basically run a certain operation every, you know, so often.

00:06:28.780 --> 00:06:30.660
And the so often is like 100 times a second.

00:06:30.660 --> 00:06:31.500
So quite often.

00:06:31.500 --> 00:06:34.580
And they would input this numpy array.

00:06:34.580 --> 00:06:39.680
They would do some processing on it and output another one, like how much thrust goes to each motor and things like that.

00:06:39.680 --> 00:06:41.440
So this is happening 100 times a second.

00:06:41.440 --> 00:06:43.960
And they ran it with CPython.

00:06:43.960 --> 00:06:48.900
And their test that they ran, not just once, but a whole bunch of operations, it took about six seconds.

00:06:49.540 --> 00:06:51.340
And they said, okay, well, let's try PyPy.

00:06:51.340 --> 00:06:54.040
I heard making, you know, using PyPy makes it faster.

00:06:54.040 --> 00:06:59.580
So they just sort of typing Python space my program, they type PyPy space my program.

00:06:59.580 --> 00:07:03.440
And it turns out it was, wait for it, five and a half times slower.

00:07:03.440 --> 00:07:03.700
Oh, no.

00:07:03.700 --> 00:07:05.420
That's not faster.

00:07:05.420 --> 00:07:06.500
Exactly.

00:07:06.500 --> 00:07:09.020
It's like, oh, who sold me this bill of goods, man?

00:07:09.020 --> 00:07:10.360
I thought this was supposed to be faster.

00:07:10.360 --> 00:07:19.520
So it turns out that the integration with numpy, which is what they're using, actually some of the C interops,

00:07:19.520 --> 00:07:21.140
stuff is quite a bit slower.

00:07:21.140 --> 00:07:25.540
So they actually use this PyPy implementation of numpy.

00:07:25.540 --> 00:07:28.040
It's called numpypy instead of numpy.

00:07:28.040 --> 00:07:29.500
And that worked.

00:07:29.500 --> 00:07:30.160
That made it faster.

00:07:30.160 --> 00:07:34.160
So now it was two times faster just by switching out the imports in the library.

00:07:34.160 --> 00:07:34.860
So that's pretty good.

00:07:35.380 --> 00:07:38.720
I said, but you know, we actually think we could do better.

00:07:38.720 --> 00:07:46.920
And so what they did is they started profiling it and they looked at where it was slow and said, you know, this thing, actually, we could just rewrite this algorithm just a tiny bit.

00:07:47.000 --> 00:07:49.100
So it's more friendly to the JIT compiler.

00:07:49.520 --> 00:07:54.740
And they got it to go 80 times faster than the original CPython plus numpy version.

00:07:54.740 --> 00:07:55.700
No, that's nice.

00:07:55.700 --> 00:07:56.220
That's awesome, right?

00:07:56.220 --> 00:08:00.720
And that was even 35 times faster than the native PyPy plus numpypy version.

00:08:00.720 --> 00:08:03.000
So I think that's a really interesting lesson.

00:08:03.000 --> 00:08:03.220
Yeah.

00:08:03.220 --> 00:08:05.220
Nice use of profiler, too.

00:08:05.360 --> 00:08:05.840
Yeah, exactly.

00:08:05.840 --> 00:08:10.420
That's the point I was going to make is like, yeah, it's one thing to throw PyPy or some other technology at it.

00:08:10.420 --> 00:08:14.980
But it's not always just going to be like this silver bullet that solves your problem, right?

00:08:14.980 --> 00:08:20.920
But PyPy plus a little intelligent problem solving, like that made a huge difference for these guys.

00:08:20.920 --> 00:08:21.320
Yeah.

00:08:21.320 --> 00:08:23.740
So, I mean, you said this was a simulation?

00:08:23.740 --> 00:08:25.480
Yeah, they're doing it as a simulation.

00:08:25.480 --> 00:08:26.180
Okay.

00:08:26.180 --> 00:08:33.780
I wonder if you can run, I don't know whether or not you can run PyPy on a little tiny quadcopter controller.

00:08:33.920 --> 00:08:36.080
I guess it depends on your definition of tiny.

00:08:36.080 --> 00:08:39.760
Like if it's raspberry pie, I think you probably could.

00:08:39.760 --> 00:08:44.080
If it's eight of fruit size, maybe that might be too small.

00:08:44.080 --> 00:08:44.740
I actually don't know.

00:08:44.740 --> 00:08:45.640
Okay, cool.

00:08:45.640 --> 00:08:45.880
Yeah.

00:08:45.880 --> 00:08:51.460
So the next one is an interesting one I saw go by and I saw that you picked here as well.

00:08:51.460 --> 00:08:54.680
It has to do with the longevity of open source projects.

00:08:54.680 --> 00:08:55.240
Yeah.

00:08:55.240 --> 00:09:02.420
This is actually a Wired article called Giving Open Source Projects Life After a Developer's Death.

00:09:02.960 --> 00:09:06.400
And I hadn't really thought about that too much before.

00:09:06.400 --> 00:09:16.980
But there is, I mean, we've got more and more, as the article goes on, we've got more and more critical projects using open source projects.

00:09:17.400 --> 00:09:23.600
And there's a lot of them that don't have that many maintainers or sometimes just a handful or one.

00:09:23.600 --> 00:09:26.860
So really, how do you deal with that?

00:09:26.860 --> 00:09:30.800
So part of the article is just talking about this as a problem.

00:09:31.060 --> 00:09:35.920
But then also there's possibly some solutions.

00:09:35.920 --> 00:09:39.900
And I was just wondering if we had any solutions.

00:09:39.900 --> 00:09:44.100
I also had some terrible puns I was going to try to throw in.

00:09:44.100 --> 00:09:49.820
What to do after you hit your corporeal seg fault and raise an end of life exception.

00:09:50.960 --> 00:09:55.480
Yeah, it's definitely something that people, I guess, really want to think of.

00:09:55.480 --> 00:10:01.380
I mean, if you're in a business, they do talk about the, like, what if so-and-so gets hit by a bus?

00:10:01.380 --> 00:10:02.260
Right?

00:10:02.260 --> 00:10:03.660
Will that kill the business?

00:10:03.660 --> 00:10:11.900
Well, if this open source project is used by many businesses, it could be that that actually kills a lot of projects, a lot of companies.

00:10:11.900 --> 00:10:13.860
Yeah, so I didn't know this was out there.

00:10:13.860 --> 00:10:21.660
Apparently, there's a place called libraries.io that has a bus factor evaluator for different libraries.

00:10:21.660 --> 00:10:26.020
So you can plug in a library that you depend on and look up its bus factor.

00:10:26.020 --> 00:10:27.400
Oh, really?

00:10:27.400 --> 00:10:34.320
Yeah, how many of the core developers would have to be on a bus that got hit before the project went away.

00:10:35.920 --> 00:10:48.460
But one of the things that it did bring up, which I looked up some of the Python stuff, and some of them are core things that even though there's a handful of maintainers, I think it would get picked up anyway because it's part of the standard library.

00:10:48.460 --> 00:10:52.100
But there's definitely others that are of concern.

00:10:52.100 --> 00:11:04.560
And one person points out that perhaps we could build some more things into, like, GitHub or PyPI or other places to have maybe errors put in place.

00:11:04.680 --> 00:11:12.040
So you could say, you know, if I don't check in for like six months, then transfer ownership to these people or something.

00:11:12.040 --> 00:11:13.640
Oh, that's a pretty cool idea.

00:11:13.640 --> 00:11:16.020
Almost like an escrow for open source.

00:11:16.020 --> 00:11:21.820
Yeah, like, I mean, if you get a big investment account, you got to list who gets it if something happens to you.

00:11:21.820 --> 00:11:24.660
So maybe something ought to be like that for open source projects.

00:11:24.660 --> 00:11:27.700
That sounds like projects somebody could create and integrate with GitHub.

00:11:27.700 --> 00:11:29.160
Yeah, maybe.

00:11:29.160 --> 00:11:37.400
One of the other solutions that I have seen is, like, the pytest community for a lot of the plugins.

00:11:37.400 --> 00:11:47.040
Try to encourage people to, once you get quite a few users of your plugin, to push it over to a development group on GitHub.

00:11:47.040 --> 00:11:50.000
And then anybody on the group can maintain it if necessary.

00:11:50.240 --> 00:11:51.460
Yeah, that makes a lot of sense.

00:11:51.460 --> 00:11:55.260
I mean, you could always, like, fork the repo and just say, the real one is here.

00:11:55.260 --> 00:11:58.960
But I can just see a lot of skirmishes around, like, no, your fork is not real.

00:11:58.960 --> 00:11:59.780
My fork is real.

00:11:59.780 --> 00:12:01.620
Like, you know, people could fight over ownership, right?

00:12:01.880 --> 00:12:08.300
Yeah, and that's doable on GitHub, but you can't really do that on PyPI that I know of.

00:12:08.300 --> 00:12:11.180
I don't know how to get transfer ownership on PyPI.

00:12:11.180 --> 00:12:15.000
Yeah, I think you got to contact them directly and just lobby your case, right?

00:12:15.000 --> 00:12:18.460
Which doesn't sound like a great long-term, widespread solution.

00:12:18.460 --> 00:12:23.820
I don't have that problem currently of having any super popular packages, but, you know.

00:12:23.820 --> 00:12:24.840
Yeah, that's cool.

00:12:24.840 --> 00:12:26.400
Definitely worth thinking about.

00:12:26.620 --> 00:12:30.780
Yeah, so before we get to the next topic, let me tell you about Datadog, right?

00:12:30.780 --> 00:12:35.600
So performance and bottlenecks, these don't just exist in just your application code, right?

00:12:35.600 --> 00:12:38.360
Like, just because your code is slow, well, you could be waiting on the database.

00:12:38.360 --> 00:12:42.420
The database could be waiting on some Linux internal behavior.

00:12:42.420 --> 00:12:43.140
Who knows, right?

00:12:43.140 --> 00:12:47.960
So these are layers upon layers upon layers across systems that we really build our apps with.

00:12:47.960 --> 00:12:51.640
And Datadog lets you view all of those as, like, one whole thing.

00:12:51.640 --> 00:12:55.320
So let's say you have a Python web app running on Flask.

00:12:55.420 --> 00:12:59.620
It's built on Mongo, hosted on a scaled-out set of Ubuntu servers, running Nginx and Michael

00:12:59.620 --> 00:12:59.960
Whiskey.

00:12:59.960 --> 00:13:03.300
Datadog will let you, like, view and monitor all those things.

00:13:03.300 --> 00:13:04.540
It's like one system.

00:13:04.540 --> 00:13:06.220
So that is really, really super awesome.

00:13:06.220 --> 00:13:11.560
And the more you scale out and the more diverse your system gets, the better Datadog can help

00:13:11.560 --> 00:13:11.720
you.

00:13:11.720 --> 00:13:13.280
They got a getting started tutorial.

00:13:13.280 --> 00:13:14.200
Just take a few moments.

00:13:14.200 --> 00:13:17.000
And if you finish it, they'll send you a sweet Datadog t-shirt.

00:13:17.000 --> 00:13:21.020
So check that out at pythonbytes.fm/Datadog and see what you've been missing.

00:13:21.020 --> 00:13:22.040
I still have to do that.

00:13:22.040 --> 00:13:22.820
I need that t-shirt.

00:13:22.820 --> 00:13:24.120
Yeah, we got to get our t-shirt.

00:13:24.720 --> 00:13:28.840
So maybe this is the wrong season here in the Northern Hemisphere.

00:13:28.840 --> 00:13:33.040
Maybe this is going to resonate a little more with our Australian friends.

00:13:33.040 --> 00:13:38.720
But this next project I want to talk about is a solar-powered, internet-connected lawn sprinkler.

00:13:38.720 --> 00:13:39.300
Oh, nice.

00:13:39.300 --> 00:13:39.740
Yeah.

00:13:40.020 --> 00:13:44.020
So Lennon, one of our listeners, friends of the show, sent this in and said, hey, I created

00:13:44.020 --> 00:13:45.000
this really cool project.

00:13:45.000 --> 00:13:46.440
And I'd like to share it with everyone.

00:13:46.440 --> 00:13:48.600
I thought, yeah, this is actually a really neat example.

00:13:48.600 --> 00:13:50.360
So I thought we'd throw it in here.

00:13:50.920 --> 00:13:56.080
And the idea is he went and got this little tiny Adafruit feather huzzah board.

00:13:56.080 --> 00:14:00.380
And this is like a little tiny microchip type thing.

00:14:00.380 --> 00:14:01.580
But it has Wi-Fi.

00:14:01.580 --> 00:14:02.340
So that's important.

00:14:02.340 --> 00:14:04.560
You can plug it in somewhere and talk to it.

00:14:05.040 --> 00:14:07.000
And it works with MicroPython.

00:14:07.000 --> 00:14:11.760
So MicroPython is the Python that works in the smallest devices.

00:14:11.760 --> 00:14:13.240
Like you said, the PyPy before.

00:14:13.240 --> 00:14:15.220
I'm not sure if you can get PyPy to run on this one.

00:14:15.220 --> 00:14:17.660
But MicroPython is so super level.

00:14:17.660 --> 00:14:19.580
It basically is the operating system.

00:14:19.580 --> 00:14:21.600
Your app is basically the operating system.

00:14:21.600 --> 00:14:22.360
Yeah.

00:14:22.380 --> 00:14:26.380
So you can take like a Lambda function and connect it right to a hardware interrupt directly.

00:14:26.380 --> 00:14:27.320
Like that's how low level.

00:14:27.320 --> 00:14:28.380
That's insane, right?

00:14:28.380 --> 00:14:29.700
Oh, that's nice.

00:14:29.700 --> 00:14:30.100
Yeah.

00:14:30.100 --> 00:14:30.380
Right?

00:14:30.380 --> 00:14:33.440
And he combines a couple of other interesting things.

00:14:33.440 --> 00:14:38.520
He combines Home Assistant, which is the biggest home automation project in Python.

00:14:38.520 --> 00:14:44.340
Like a really cool app that integrates tons and tons of different IoT and smart home things.

00:14:44.340 --> 00:14:50.080
And he gives a really nice list of like, here's every single piece of hardware I used.

00:14:50.080 --> 00:14:51.840
Here's the solar board that I used.

00:14:51.920 --> 00:14:54.640
Here's the container for the feather huzzah board.

00:14:54.640 --> 00:15:00.520
And it's just a really nice example of a small, compact IoT project.

00:15:00.520 --> 00:15:00.520
Yeah.

00:15:00.520 --> 00:15:01.800
And useful and not creepy.

00:15:01.800 --> 00:15:02.460
I like it.

00:15:02.460 --> 00:15:03.260
Yeah, exactly.

00:15:03.260 --> 00:15:06.960
The more we seem to go back and forth on these little IoT things.

00:15:06.960 --> 00:15:10.360
I really want to create one of these that goes on my front door that uses machine learning

00:15:10.360 --> 00:15:13.500
to determine what type of person is on my front door when they ring the doorbell.

00:15:13.500 --> 00:15:13.800
Yeah.

00:15:13.800 --> 00:15:14.460
Or a dinosaur.

00:15:14.460 --> 00:15:14.940
Yeah.

00:15:14.940 --> 00:15:15.380
Or a dinosaur.

00:15:15.380 --> 00:15:15.780
That's right.

00:15:15.780 --> 00:15:16.380
Yeah.

00:15:16.380 --> 00:15:21.460
And also I had to put a link in here to Talk Python episode 108

00:15:21.460 --> 00:15:24.780
where I actually had the guys from Adafruit come on and talk about a whole bunch of these

00:15:24.780 --> 00:15:25.520
different projects.

00:15:25.520 --> 00:15:27.160
But yeah, nice job, London.

00:15:27.160 --> 00:15:28.100
This is a cool one.

00:15:28.100 --> 00:15:28.460
Yeah.

00:15:28.460 --> 00:15:32.880
And shout out to Adafruit too for doing all sorts of cool stuff with hardware and software.

00:15:32.880 --> 00:15:33.520
I like that.

00:15:33.520 --> 00:15:34.080
Yeah.

00:15:34.120 --> 00:15:36.020
They have a big educational aspect to them.

00:15:36.020 --> 00:15:40.080
Not just education, education, but teaching people who want to learn about IoT.

00:15:40.080 --> 00:15:44.520
I'm definitely planning on playing with some of these little devices in MicroPython.

00:15:44.520 --> 00:15:45.820
It just seems really fun.

00:15:45.820 --> 00:15:46.640
Okay.

00:15:46.640 --> 00:15:49.840
So I am going to be perfectly honest with this last one.

00:15:49.840 --> 00:15:50.840
I had a...

00:15:50.840 --> 00:15:56.660
My last thing I was going to talk about was going to be another packaging story, but I

00:15:56.660 --> 00:15:57.980
kind of went down a rabbit hole.

00:15:57.980 --> 00:16:02.060
So instead of getting into that, that's my homework for next week.

00:16:02.060 --> 00:16:04.820
So I've already set up what I'm going to talk about next week.

00:16:04.820 --> 00:16:09.680
But what I want to highlight is some books that came out.

00:16:09.680 --> 00:16:12.080
So we had some new Python books that came out recently.

00:16:12.080 --> 00:16:13.500
It's a big week for Python books.

00:16:14.140 --> 00:16:18.260
Yeah, we've got Python Tricks from Dan Bader.

00:16:18.260 --> 00:16:19.820
That came out.

00:16:19.820 --> 00:16:22.940
And Matt Harrison's Illustrated Guide to Python 3.

00:16:22.940 --> 00:16:25.340
And I have just...

00:16:25.340 --> 00:16:28.120
Actually, I'm going to read, at least peruse both of these.

00:16:28.120 --> 00:16:30.860
I've just started Python Tricks, and I like the format.

00:16:30.860 --> 00:16:31.500
It's cool.

00:16:31.500 --> 00:16:36.440
And then I'm going to take a read for Matt Harrison's book.

00:16:36.440 --> 00:16:39.820
And the cover is awesome.

00:16:39.820 --> 00:16:40.800
And I want to try to get...

00:16:40.800 --> 00:16:43.740
Actually, I want to have that around my office so that other people can...

00:16:43.740 --> 00:16:45.980
Can look up Python 3 stuff pretty easy.

00:16:45.980 --> 00:16:47.060
That seems really nice.

00:16:47.060 --> 00:16:47.820
I looked through it as well.

00:16:47.820 --> 00:16:51.400
And the illustrated aspect is cool on Matt's.

00:16:51.400 --> 00:16:53.660
So yeah, congrats both to Dan and Matt on this.

00:16:53.660 --> 00:16:54.060
This is cool.

00:16:54.060 --> 00:16:54.440
Yeah.

00:16:54.440 --> 00:16:57.340
And then the last thing is that I was on Twitter.

00:16:57.340 --> 00:16:57.820
We were...

00:16:57.820 --> 00:17:00.560
I was talking with a handful of people, authors.

00:17:00.560 --> 00:17:07.340
There are some Python books out there that really could use some Amazon review love.

00:17:07.560 --> 00:17:15.920
So I'm going to drop a link to my book and Harry Percival's Test Driven Development, which has been out for a while, but it's still...

00:17:15.920 --> 00:17:17.060
It's only got six reviews.

00:17:17.060 --> 00:17:19.100
And I know a lot of people have read this stuff.

00:17:19.100 --> 00:17:19.980
And then also...

00:17:19.980 --> 00:17:20.160
Yeah.

00:17:20.160 --> 00:17:21.500
Harry's book is really great.

00:17:21.500 --> 00:17:23.640
Obey the Testing Goat and all that stuff.

00:17:23.640 --> 00:17:26.860
And then also the Greenfields, Two Scoops of Django.

00:17:27.520 --> 00:17:32.880
I know a lot of people have started Django or gotten a lot better at it using this.

00:17:32.880 --> 00:17:35.720
So go out and show some Amazon love to these people.

00:17:35.720 --> 00:17:36.200
Yeah, definitely.

00:17:36.200 --> 00:17:40.140
I think it really helps if you've read a book to write a review.

00:17:40.140 --> 00:17:43.120
If you've taken a class, give a review, right?

00:17:43.120 --> 00:17:44.940
Like these things actually make a big difference.

00:17:44.940 --> 00:17:45.600
Yeah, it really does.

00:17:45.600 --> 00:17:50.940
And we're all trying to do things the right way and trying to support the community.

00:17:50.940 --> 00:17:51.340
So...

00:17:51.340 --> 00:17:51.500
Yep.

00:17:51.500 --> 00:17:52.120
It's cool.

00:17:52.120 --> 00:17:52.300
Awesome.

00:17:52.880 --> 00:17:55.760
Well, the last one I want to talk about is...

00:17:55.760 --> 00:18:00.980
Sort of harkens back to the first one that you did, the data science space and the Anaconda

00:18:00.980 --> 00:18:01.540
distribution.

00:18:01.540 --> 00:18:07.960
So you probably know Anaconda distribution is an alternate distribution for Python.

00:18:07.960 --> 00:18:09.520
It's basically CPython.

00:18:09.520 --> 00:18:14.400
But instead of just being a standalone CPython where you pip install stuff, it comes packaged

00:18:14.400 --> 00:18:21.060
with most of the machine learning, data science, and popular libraries you already need pre-compiled

00:18:21.060 --> 00:18:22.400
for your machine.

00:18:22.780 --> 00:18:27.640
So if you want to use some weird package that requires like a Fortran compiler or something,

00:18:27.640 --> 00:18:29.760
you can just, you know, install it.

00:18:29.760 --> 00:18:35.940
Either it's come with Anaconda or you can't install it and it actually downloads the binary

00:18:35.940 --> 00:18:36.380
version.

00:18:36.380 --> 00:18:40.300
So there's no worries about it, you know, not installing correctly.

00:18:40.300 --> 00:18:42.960
Yeah, there's also the free distribution.

00:18:42.960 --> 00:18:45.020
There's both paid and free distributions.

00:18:45.680 --> 00:18:53.260
But even the free one is one of the few multiple package distributions that is completely legitimate

00:18:53.260 --> 00:18:58.040
to do within a company as long as you're not reselling that itself.

00:18:58.040 --> 00:18:59.280
Oh yeah, that's awesome.

00:18:59.280 --> 00:19:04.040
So the news about Anaconda distribution is version 5 is released.

00:19:04.280 --> 00:19:07.100
So they have 100 packages have been updated or added.

00:19:07.100 --> 00:19:11.360
They have JupyterLab, Alpha Preview included, updated MKL.

00:19:11.360 --> 00:19:11.720
Nice.

00:19:12.120 --> 00:19:15.160
That's the Intel high performance compiled stuff.

00:19:15.160 --> 00:19:20.960
So it used the Intel sort of low level speed ups for the machine learning and computational

00:19:20.960 --> 00:19:21.360
stuff.

00:19:21.360 --> 00:19:24.200
New compilers for macOS and Linux.

00:19:24.200 --> 00:19:25.380
So what is that?

00:19:25.380 --> 00:19:27.580
That's Clang and GCC respectively.

00:19:27.780 --> 00:19:32.300
But what's important here is they flipped the flags on the compile steps for all of these

00:19:32.300 --> 00:19:39.300
things to use the most newest and compatible flags for security.

00:19:39.300 --> 00:19:44.860
So the stuff that gets compiled out of here is less likely to suffer from things like buffer

00:19:44.860 --> 00:19:47.080
overflow sort of attacks and stuff.

00:19:47.080 --> 00:19:48.440
So that's really cool.

00:19:48.440 --> 00:19:50.240
The compilers are now a little safer for you.

00:19:50.240 --> 00:19:54.000
They've got updated Condoforge and some other things.

00:19:54.000 --> 00:19:57.360
They're creating another channel that has to do with this new compiler thing I talked about

00:19:57.360 --> 00:19:57.920
and so on.

00:19:57.920 --> 00:19:58.600
So pretty cool.

00:19:58.600 --> 00:20:01.280
I still have on my to-do list to go check out JupyterLab.

00:20:01.280 --> 00:20:02.580
Have you done any of that?

00:20:02.580 --> 00:20:04.040
I have not checked out JupyterLab.

00:20:04.040 --> 00:20:04.440
Okay.

00:20:04.440 --> 00:20:05.300
It looks fun.

00:20:05.300 --> 00:20:06.040
Yeah, it definitely does.

00:20:06.040 --> 00:20:10.400
There's a lot of cool stuff happening with Jupyter and like social coding and stuff these

00:20:10.400 --> 00:20:10.660
days.

00:20:10.660 --> 00:20:11.720
It's exciting.

00:20:11.720 --> 00:20:14.060
Well, that's it for my news this week, Brian.

00:20:14.060 --> 00:20:15.180
Anything else you want to add?

00:20:15.180 --> 00:20:22.620
I did find out last week that the Python testing with pytest is available on, what is that

00:20:22.620 --> 00:20:22.900
thing?

00:20:22.900 --> 00:20:24.200
Safari Books Online?

00:20:24.200 --> 00:20:25.260
Yeah, Safari Online.

00:20:25.260 --> 00:20:26.300
It's now there.

00:20:26.820 --> 00:20:27.460
That's awesome.

00:20:27.460 --> 00:20:31.280
Tons of people have that as just available to them as part of their company, right?

00:20:31.280 --> 00:20:33.780
So people can now get your book that way.

00:20:33.780 --> 00:20:35.100
I don't think I do.

00:20:35.100 --> 00:20:37.120
I'm going to check it out.

00:20:37.120 --> 00:20:38.500
Yeah, people can check it out.

00:20:38.500 --> 00:20:42.460
I have no idea how if any of that money comes back to me with that, but I'm glad that a lot

00:20:42.460 --> 00:20:43.260
of people can read it.

00:20:43.380 --> 00:20:47.340
I think one of the things that's great about creating something like a book or a course

00:20:47.340 --> 00:20:51.980
or whatever, even a podcast per se, is that people just use it and enjoy it, right?

00:20:51.980 --> 00:20:53.340
You put a lot of energy to creating it.

00:20:53.340 --> 00:20:57.120
And if it just sat there like digitally silent, that would be sad.

00:20:57.340 --> 00:20:58.740
Yeah, it would be.

00:20:58.740 --> 00:20:59.340
So cool.

00:20:59.340 --> 00:21:02.600
Yeah, I'm glad it's out there and yet another channel for people.

00:21:02.600 --> 00:21:03.160
All right.

00:21:03.160 --> 00:21:04.080
Well, Brian, thanks again.

00:21:04.080 --> 00:21:04.420
Thank you.

00:21:04.580 --> 00:21:07.060
for everything this week and talk to you all later.

00:21:07.060 --> 00:21:07.580
All right.

00:21:07.580 --> 00:21:07.760
Bye.

00:21:07.760 --> 00:21:10.220
Thank you for listening to Python Bytes.

00:21:10.220 --> 00:21:12.780
Follow the show on Twitter via at Python Bytes.

00:21:12.780 --> 00:21:15.660
That's Python Bytes as in B-Y-T-E-S.

00:21:15.660 --> 00:21:19.080
And get the full show notes at pythonbytes.fm.

00:21:19.080 --> 00:21:23.440
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:21:23.440 --> 00:21:26.140
We're always on the lookout for sharing something cool.

00:21:26.140 --> 00:21:29.520
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:29.520 --> 00:21:33.160
Thank you for listening and sharing this podcast with your friends and colleagues.

