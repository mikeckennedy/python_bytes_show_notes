00:00:00 Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is episode 279 recorded on lucky April 13th 2022 I'm Michael Kennedy and I'm Brian Okken and I'm Brian skin Hello Brian's great to have you. Hello. Singular Michael Great brands think alike. That's right. That's the same Brian Skin, welcome. It's great to have you here. You've you are now completing the trifecta of podcasts. I understand. Yes indeed I was on a panel for talk Python and an episode of testing code a little while back and Excited to be here for a Python bites Yes, you've been a big contributor in terms of sending topics our way So it's only fitting that you're here tell people real quick about yourself before we jump in the topics. Sure I'm a chemical engineer by training. I am NOT actually a software dev by day I have a PhD in chemical engineering.

00:00:57 I've been working for the last 10 years or so at a company here in Dayton, Ohio, Faraday Technology, working on electrochemical process R&D.

00:01:04 So there's a lot of science there, some programming, mostly for data analysis, things like that.

00:01:11 But I also have done quite a bit of Python on the side in documentation area and various things like that.

00:01:18 So, cool.

00:01:20 - Chemical engineering is pretty awesome.

00:01:21 And it's great to have someone here who's not a straight software developer.

00:01:24 We get a lot of myopic views, and I think you'll have some interesting perspectives.

00:01:30 >> Hope so.

00:01:31 >> Yeah, I hope so as well, I'm sure.

00:01:33 Now, before we kick this off, I want to say this episode is brought to you by Datadog.

00:01:37 Check them out at pythonbytes.fm/datadog.

00:01:40 We'll talk more about them later.

00:01:42 Right now, Brian, maybe we could talk about f-strings. What do you think?

00:01:45 >> Yeah. I mean, I love f-strings.

00:01:47 Use them all the time, but I really thought it was cool.

00:01:51 There were a couple of new resources that I kind of wish I had had earlier.

00:01:56 This one, a couple, they're new.

00:01:57 So we've got from Florian Bruin, and he's, he's, was hugely helpful to, to getting, doing the code review, or book review and code review and all that stuff on the pytest book.

00:02:10 So I definitely want to shout out to him for, thank him for doing that.

00:02:15 But, so he generated this, this Python f-strings, it's called fstrings.help.

00:02:21 And it's just like, it's a Jupyter Notebook looking thing.

00:02:25 I think he created it with Jupyter Notebook, but it just quickly goes through all of the formatting stuff of f-strings.

00:02:33 And there's a little bit of explanation, but it just sort of exactly shows you, you know, what the syntax is and what the output is really concisely.

00:02:43 This is a nice run through of the F string features.

00:02:47 - Yeah, that's cool.

00:02:48 It looks like if you were trying to either learn Python strings or trying to help someone learn Python strings, you could just send them this and go, here, scan this, you'll be good to go.

00:02:57 >> What I like about it is just the terse-ness as well.

00:03:00 This is a decent reference to bookmark for looking things up.

00:03:05 The other thing I wanted to point out was an article called, Python F-strings are more powerful than you might think.

00:03:11 That's exactly the gist of it.

00:03:13 It's more discussion.

00:03:16 It does tell you what they are, but it kind of assumes you already know.

00:03:22 But so some really cool things like date and time formatting, using it for debugging with variable names, we've talked about that on the show, making advantage, taking advantage of string representations.

00:03:36 There's even embedded, I didn't know you could put f-strings inside of f-strings.

00:03:42 So there's part nested f-strings, they call it.

00:03:46 So interesting stuff.

00:03:48 >> Yes.

00:03:50 >> So, yes.

00:03:51 >> Nested f-strings, I had no idea.

00:03:53 >> I didn't either.

00:03:54 >> I've totally done that before.

00:03:56 >> Really?

00:03:57 >> Yeah, templating one thing to then template into another thing.

00:04:00 Absolutely. It's super helpful.

00:04:01 >> Okay. Nice.

00:04:03 >> Very cool.

00:04:03 >> So, yeah.

00:04:04 >> Yeah, it's easy to forget that you can apply the standard, I guess, string.format type of operators like colon, point three F or colon comma to put digit grouping.

00:04:17 But in f-strings, right?

00:04:18 Because it's, I don't know, it feels more like you're working with a variable than you are with a format character.

00:04:23 >> Short examples like this of, here's a cool thing you can do with even a well-established basic feature like that can really help people go, "Oh, hey, that's just what I need," and run with it.

00:04:33 >> Yeah. Very nice.

00:04:36 This is great, Brian. I love it.

00:04:37 Now, are we ready to move on?

00:04:40 >> Yeah, definitely.

00:04:41 >> Cool. I want to blow your mind with this thing here.

00:04:45 You've probably heard about Bloomberg Terminals.

00:04:49 If you're in an investment space, like if you work at a hedge fund or an investment company, especially in Manhattan, you'll sit down and you'll see like these six monitor crazy setups that would make gamers jealous.

00:05:04 Around them, you have to look at what is going on here.

00:05:08 One of the tools they use a lot, it's a thing called the Bloomberg terminal that lets them look at all kinds of different visualizations and real-time instant updating things around the stock market and whatnot.

00:05:19 That is a commercial project that, best I can tell, I mean, there's probably discounts or whatever, but it costs around $2,000 per user per month, which is a non-trivial amount of--

00:05:32 >> That's a ton!

00:05:33 >> Cost, right?

00:05:35 - I mean, no wonder we're all getting like little percentages of money sucked out of our 401k retirements 'cause all of those people are like paying that much money to like manage our accounts.

00:05:46 Yeah, it's exactly.

00:05:48 So I want to introduce you all to OpenBB at OpenBB.co.

00:05:53 This is the equivalent thing, but several interesting aspects.

00:05:59 One, it's open source.

00:06:00 Two, it's free.

00:06:02 - That's cheaper.

00:06:03 - Cheaper.

00:06:04 It's not necessarily the most important thing, but it also gives you access to all sorts of tools that we know and love from Python, especially on the data science side.

00:06:14 So this open BB thing is this terminal type thing you can install.

00:06:19 It's really got this sort of weird blend of like CLI.

00:06:23 I know Will McGugan would be super impressed with all of its like terminal UI, it's two aspects, but then it also pops open interactive windows that are like graphs and all those kinds of things.

00:06:34 I'll pull up some examples in a minute.

00:06:37 So you get access, it's not just that it's free, but you get access to all the Python data science stack.

00:06:43 And it is itself created in Python.

00:06:45 So pretty cool.

00:06:47 It's pretty popular, it's got 11,000 GitHub stars.

00:06:51 And what you do is you show up at this terminal, and there's even an interactive live version, you can have dark mode or not dark mode turned on on the website, I mean, I love it.

00:07:01 This is really a polished thing, you can type things like stocks, if you could spell stocks, you could type stocks.

00:07:07 And it'll come up with all these ways that you could explore them.

00:07:10 As you could type BA and it'll come and give you these things and eventually if you get to the right spot, it doesn't happen on the website, but it'll pop up these extra windows that then like let you explore things with graphs and so on.

00:07:22 So very, very cool.

00:07:25 Let's pull up some of the terminal things here and look at the features.

00:07:32 Here are the features.

00:07:33 So you can install it through its own installer.

00:07:37 You can install it through Anaconda, or you can run a Docker image of it to get it to run.

00:07:42 So it's sort of summary is Python-based integrated environment for investing research that leverages state-of-the-art data science tools and machine learning technology.

00:07:52 Then navigate through over 500 different views and functionality.

00:07:57 So here's some of the pictures that we can look at if you go to the product terminal and just scroll down, you can have these really cool graphs of like significant events happening along here and extra information.

00:08:11 You can look at basically an Excel view.

00:08:14 You can look at 3D volatility sections.

00:08:17 You can look at sentiment analysis here.

00:08:21 The Bitcoin rainbow chart.

00:08:24 I don't know how to read rainbow charts, But isn't this an amazing view for something that runs in the terminal?

00:08:31 >> This is great.

00:08:33 >> That's astonishing.

00:08:34 >> Yeah, it really is pretty astonishing.

00:08:37 The things just keep coming.

00:08:39 So if you just keep scrolling through this, there's stuff to wait to understand how is the economy doing, apply AI predictions to GDP, and all sorts of wild stuff.

00:08:50 So it's this really crazy blend of Terminal 2e plus pop open a bunch of data science explorations.

00:08:57 And then being Python, I'm sure you can explore it yourself.

00:09:01 I looked at the requirements file.

00:09:03 It's like maxed on requirements in there, let me tell you.

00:09:07 But I think it's based on Tornado, as far as I can tell.

00:09:12 So, and...

00:09:14 - Yeah. - Go ahead.

00:09:15 - Will points out it also uses Rich.

00:09:18 - Yeah, well, it uses Rich.

00:09:20 Very cool, thanks.

00:09:21 - And tested with pytest.

00:09:22 Oh my goodness, yeah, so that's awesome.

00:09:25 Anyway, I am super impressed with this.

00:09:27 It's an open source project based on Python for democratizing a lot of these things.

00:09:33 And if that wasn't enough, I think here's one more sort of side story that I think is interesting.

00:09:39 So I'm sure you two have seen you go, it's not as common as it used to be, but you go to some open source project or some application and it says buy us a coffee, help make that next feature happen.

00:09:51 This one has a different banner at the top instead of coffee.

00:09:54 It says, "We've just landed our $8.5 million seed funding round, and we're about ready to get started." I mean, that's some kind of crushing it for open source, isn't it?

00:10:03 >> Yeah.

00:10:04 >> Definitely.

00:10:04 >> That's a lot of coffee.

00:10:06 >> That's all. They're going to be so jittery.

00:10:10 >> Just like the stock prices.

00:10:13 >> Exactly. Look, so much fluctuation.

00:10:15 Oh, no, no, that's just me. It's actually very still.

00:10:17 >> Maybe that's why stocks go up and down so rapidly.

00:10:21 - Too many traders and too much coffee.

00:10:23 - Yeah, that's probably actually true.

00:10:25 Anyway, I think this is a really cool Python application.

00:10:28 It looks well done and it looks pretty modern.

00:10:31 And yeah, it just looks like a neat way to apply some data science to investing.

00:10:35 - Do you have a sense of the learning curve?

00:10:37 Like, is it mainly pointed at, you know, directed at investment professionals or is there an on-ramp for casual use?

00:10:43 - If you look at their description, it does seem to be focused on casual, sort of a casual use case here.

00:10:52 Let me see, it says a terminal built by the community, Chez Partes, da da da, where did I see this?

00:10:59 Somewhere, I can't remember where I ran across it, but they do talk about sort of like individual investors getting access to the tools that the companies, the people at the big banks and hedge funds would have.

00:11:12 So it does sort of seem to be aimed at that.

00:11:15 My experience is it's pretty easy to use.

00:11:17 I don't know it's easy to understand the output, right?

00:11:19 That's more of us investing economics problem though.

00:11:23 - That's a perpetual problem, yeah.

00:11:25 - Yeah, indeed.

00:11:27 All right, well, people can check this out if it sounds interesting to them.

00:11:31 Right, Skin, what you got for us?

00:11:32 - So my first item is PyProject.toml and PEP621 for project metadata in PyProject.toml coming to setup tools.

00:11:43 So people in Python land are gonna be pretty well familiar PyProject.toml at this point. Originally it was the PEP 517 and PEP 518 that created it and started the basics there. And then you had Black doing project configuration in there.

00:12:01 And it's kind of been slowly snowballing over the past few years. And one of the big pushes of PEP 621, you know, who's who of Python packaging authors here, was trying to standardize project metadata and also standardize it in a way that the metadata could be specified statically because that, you know, for things to get uploaded to PyPI, if you want to have information about dependencies or various other things like that, if you have the metadata specified statically, it's much easier to get to. You can trust it more. And so, the The PEP, it's defining how to put project metadata in PyProject.toml, how to tell the build tools like build or flit what is a static defined declaratively in the metadata and what's dynamic that is going to be provided dynamically later on.

00:12:56 And a number of tools had implemented PyProject.toml support.

00:13:01 Things like flit, hatch, PDM.

00:13:03 Not poetry yet, though they're discussing it, but setup tools was still missing it.

00:13:09 It's been an issue on the setup tools GitHub tracker for a while, and with a lot of discussion there about what it would take to bring it in.

00:13:17 One of the big appeals of moving to this for setup tools specifically, there's been the move to try to bring static metadata in the setup.cfg, but there's some, in that discussion, some problems with the INI format because it's not structured. It doesn't have good complex data type support.

00:13:38 >> Right. Nesting and embedded things don't work.

00:13:41 >> Yeah. INI has no sense of an array. So, if you had a setup.cfg with an array in it, setup tools actually had to take that as a string representation of an array and then it by executing it basically instead of the toml where it actually knows it as a an array in a table. But in any event, Anderson Brattle Harry has just within the last month or so I think it was finished an experimental implementation of PEP 621 in setup tools. There was a discuss thread seeking feedback from the community, try it out, report bugs. I tried it on one of my projects and it mostly worked. I actually turned up a bug that Anderson fixed super quickly where I do dynamic long description, which turns into the readme for the PyPI page.

00:14:35 >> Right. Do you mean you read it out of a text file or something?

00:14:38 >> So what I have is I've got documentation links in my readme that point into the main branch. But when I do a build to PyPI to do a release, I want it to point to an archival version of the docs on read the docs. And so I dynamically do a replace on the docs branch for those links.

00:14:56 >> Well, aren't you a special butterfly?

00:15:00 >> I have complicated needs. I'm sorry. But, you know, so I have that set up and it broke and I reported it and he fixed it. So as far as I can tell, you know, it may be experimental and it probably will change, especially some of the issues around specifying dynamic metadata.

00:15:22 But it's at least working reasonably. And so, check it out. If you're using setup tools, take a look at switching over to that. He made a tool that can convert setup.cfg to pyproject.toml. The project is ini2toml. And there's some others. You can check the show notes. I've got a number of things listed there.

00:15:47 Yeah, very cool. I suspect that ini2toml might be more generally useful, actually.

00:15:52 I think that's why he titled it that way instead of, you know, setup.cfg to toml or whatever.

00:15:58 Right.

00:15:59 So, hmm.

00:16:00 Cool. Yeah, this is great. More progress on the pyproject.toml stuff.

00:16:04 Definitely.

00:16:05 Very cool. Now, before we move on, let me tell you all about our sponsor this week, Datadog.

00:16:11 They've been supporting the show for a really, really long time.

00:16:13 Datadog is great.

00:16:15 They have a real-time monitoring platform that unifies metrics, traces, and logs into one integrated system.

00:16:22 Their APM empowers developers and teams to identify anomalies and resolve issues and improve application performance.

00:16:30 So you can begin collecting stack traces and visualizing them as flame graphs and organizing them into profile types such as CPU or IO types of reports.

00:16:40 Teams can search for specific profiles and correlate them into distributed traces and identify slow or underperforming code for later analysis and optimization.

00:16:49 And with Datadog's APM Live Search, you can perform searches across the full stream of ingest traces of your app over the last 15 minutes.

00:16:58 Like, I need to figure out what the database is doing and the API and the front end and all those things.

00:17:04 So try them for free with a 14-day free trial and Datadog will send you a free t-shirt.

00:17:10 So just check them out and support the show by visiting pythonbytes.fm/datadog or just click the link in your podcast player show notes to get started.

00:17:18 - Nice.

00:17:19 - Indeed.

00:17:20 All right.

00:17:21 Ryan, what do you got next?

00:17:23 - I've got Git.

00:17:24 So this isn't necessarily Python only related, but I use Git a lot and I didn't know you could do auto-correct with Git.

00:17:33 This is Wayland Walker, I think he's submitted other things to us on the show.

00:17:40 But he wrote this article called Configure Git to autocorrect your fat fingers or just your sloppy typing.

00:17:49 Let's say you do git checkout dev, but you spell checkout C-H-E-K-O-U-T and misspell it.

00:17:58 Well, Git will tell you that you did it wrong It guesses what you meant and tells you, says a similar command is this.

00:18:08 But there's a configuration option that I didn't know about called help.autocorrect that you can set a timeout, and it just automatically runs the command it thinks you want it.

00:18:19 I'm playing with it and so far it hasn't got anything wrong.

00:18:25 I've set it to one second also, but you can set it to things like 10 seconds or I don't know.

00:18:30 why you'd want to have it.

00:18:31 - Did you mean RM-RF?

00:18:33 (laughing)

00:18:34 Applying.

00:18:36 - Just get commands, it's not everything.

00:18:38 - Formatting hard drive.

00:18:41 - So get reset-hard.

00:18:42 (laughing)

00:18:43 - Oh yeah, that one actually would be kind of destructive.

00:18:47 - That would be bad.

00:18:48 - But I, so I realized that I added this to my workflow, but I realized that I hadn't really talked about my workflow at all on my blog.

00:18:56 So I went ahead and just showed the things that I do normally for a quick change.

00:19:02 I usually check out main, do a poll, then create a branch with checkout-b.

00:19:08 And then I usually do commit-a-m with a message.

00:19:13 I wanna talk about that one a little bit, the -a, and then also push because I want that to be faster.

00:19:23 So the -a, what that does is, that's the push.

00:19:29 Anyway, I got these backwards.

00:19:31 Anyway, the -a will just say, instead of having to stage a file or add them, so normally you have to add your changes and then you commit them.

00:19:42 But I just wanna, usually just wanna commit everything that I've changed or delete it also.

00:19:48 If I delete something, I want that to change.

00:19:50 So the -a does that.

00:19:52 I just learned about that recently.

00:19:53 - Oh, interesting.

00:19:54 So you can basically skip the git add dot or something equivalent to that the get add file names.

00:19:59 >> Right. The add.

00:20:00 is a little dangerous because it'll add the unstaged stuff too.

00:20:04 If you have temporary files or just play, you get a test file or a goofy file that you're just playing out with.

00:20:11 I don't want to add that stuff.

00:20:12 I intentionally add things that I want.

00:20:16 I mean, add, what's the other one?

00:20:19 Uncommitted things, I don't usually want to add that.

00:20:23 The -a is nice that it doesn't do that.

00:20:26 Then the last thing that I did was there's another configuration change of global push.default current.

00:20:36 Weird, but what this does is that there's a bunch of values for that.

00:20:42 I'm going to have a link to the other show notes, and the documentation about all the different values in the show notes.

00:20:50 But I like current because what that says is the branch name I'm using now, just make that the one online or upstream.

00:21:00 If you don't do that, it says, "Oh, there's no upstream named this branch, and you have to do this." I'm like, "Okay." You can do it with push.

00:21:08 You can do a -u in push to make it automatically do that, but it's just verbose and I always wanted to do that.

00:21:14 Anyway, that's my new Git workflow for simple stuff.

00:21:19 >> I love it. Very nice.

00:21:20 >> Yeah. I really like that current.

00:21:23 Having to do all that extra typing even with auto complete is just annoying.

00:21:27 Yeah.

00:21:29 Brian S. it sounds like you use Git a lot.

00:21:32 What's your view of source control from a chemical engineer perspective?

00:21:37 In that ecosystem, in that environment, how do people view this kind of stuff?

00:21:41 They don't.

00:21:43 Basically, anyone who's familiar with With the development, you know, much development probably uses it some actually, there's a 3d physics modeling multi physics modeling tool console that just added a Source control like feature into it So it's it's starting the data reproduced ability and the the history tracking is starting to become more of a thing But yeah, it's it's very often the you know v2 v3 20 20 20 v3 v5 final final final Yeah. So I mean, you know, I have, you know, I have blog posts churning about strategies for version control on data analysis code because of the reproducibility and needing to track environments precisely for reproducibility at a point in the past. And, you know, tagging commits for, you know, just like, oh, this, you know, basically every time I run the code, I need to know what the state of it was and the tooling is not that great for doing that.

00:22:50 At least I haven't found much.

00:22:52 So it's still evolving, I think.

00:22:54 >> Indeed.

00:22:55 Okay, cool.

00:22:56 Alvaro points out at work they have a project with 6,000 lines in an INI final that INI to TML might be just what they need.

00:23:04 That sounds like a lot.

00:23:08 >> It definitely have to -- you have to proof them afterwards because, you know, there may maybe some stuff that doesn't translate cleanly, but yeah.

00:23:15 - Yeah, we need a TML to INI, and if you can round trip it and it's the same, then you're good to go.

00:23:19 (laughing)

00:23:22 - Yeah, I don't know if that'll work.

00:23:24 (laughing)

00:23:26 - Keep your sanity, yeah.

00:23:27 All right, this next one's a quick one for me, but it'll be useful for people who are working with JSON web tokens.

00:23:33 So JSON web tokens are a thing that you can exchange with maybe a distributed login system.

00:23:41 So instead of using like an API key that you just pass around all the time, you could say, I'm going to either share a certificate or somehow log into some other system and I'll get back this token that I can share on to other places to communicate who I am, communicate what roles or permissions I should be granted and so on.

00:23:59 So if you work in that world, you work in a world of dealing with cryptographic signatures and picky algorithms and stuff like that.

00:24:08 So I just wanted to give a shout out to JWT.io.

00:24:12 So this is a place that allows you to decode, verify, and debug JWTs.

00:24:18 It's pretty cool.

00:24:18 So you come down here and what you do is you put in some encoded token and you say which algorithm of the encryption algorithms are using.

00:24:28 And then what pops out is the separated JSON result that says here's the header.

00:24:33 It says what algorithm and what type it is, what version of JWT and so on.

00:24:38 and then what the actual data was, like this person is a subscriber, their name is John Doe.

00:24:43 Didn't scroll it 'cause it doesn't seem to work.

00:24:46 And then here's like the signature and whether or not the signature was verified and stuff like that.

00:24:51 So I think that's pretty cool.

00:24:53 You can hit share JWT and it'll just copy that and it's sitting along.

00:24:59 But anyway, I think if you're working with this stuff, this might be pretty handy.

00:25:02 And while you're at it, there's somewhere in here, the libraries, you can say see the JWT libraries.

00:25:09 And let me make that smaller-ish.

00:25:12 So the way it shows it's a little bit weird, it has the technology and then a whole bunch of checklists.

00:25:18 And if you way go down to the bottom, you can see the actual package name.

00:25:21 So like there's a bunch of .NET ones here, don't care about those, but the Python ones are down here and says who's created them, right?

00:25:29 Like CMO Source or Michael Davis.

00:25:32 And then this one's called Python Jose JW crypto or pi JW.

00:25:37 And it shows you which algorithms are supported and how it works and so on.

00:25:42 So I think this is pretty cool if you're gonna work with these things.

00:25:46 What do you all think?

00:25:48 - I don't have a lot of expertise with authentication and tokens of this sort.

00:25:51 How is this different from something like Macaroons where it's more like a advanced cookie?

00:25:57 Is this separate from the browser or?

00:25:59 - This is done in several ways.

00:26:02 I think so you can go like to a federated identity provider.

00:26:07 So something like Auth0 or Microsoft Azure Active Directory or something like that.

00:26:14 Or you can have your own identity provider from like identity servers, like one of these implementations.

00:26:20 And basically it allows you to do single sign on and federated sign on across different platforms without just taking and using straight cookies.

00:26:29 - Okay.

00:26:30 both for APIs and for other types of apps. You can do it within an app or with an API.

00:26:35 So like if I call an API, if I log in with me and I call an API and I want to communicate onto my identity, onto the APIs that API is calling, you know, it's like those kinds of sort of more complicated scenarios. Yeah. Gotcha. Yeah. Yeah. Anyway, JWT.io, check it out. What do you got, Brian, again? >> Okay. For my second item, I'm going to appreciate the opportunity, Michael and Brian Okken, to do a little bit of self-promotion.

00:27:07 I have a new project I'm calling Jupyter TempVars. So, one of the really powerful things about, you know, Jupyter notebooks are great. You can do a whole lot with them. They're obviously being used everywhere, data science, scientific analysis.

00:27:23 And one of the features of at least the Python kernel of Jupyter is that you have a global namespace that you work in.

00:27:29 And this really adds to the power of it in some ways because everything you do in the notebook flows from one cell to another.

00:27:36 You don't have to worry about shuttling things back and forth.

00:27:39 But as has come up countless times here and elsewhere, you have namespace contamination problems where you accidentally assign something in one cell and then you fuck on yourself because either, you know, you use something and have a typo and accidentally use something from another cell or, you know, something's lingering on and you have the same variable name in multiple cells and all of a sudden your analysis, you know, behaves funny or it's not reproducible or you, you know, you close down for the day and start back up and the whole worksheet blows up.

00:28:07 And so what I've put together is a, it's a notebook extension for Jupyter.

00:28:13 It's based upon another library of mine, TempVars, which I need to freshen a bit.

00:28:18 But this is a front-end extension for Jupyter.

00:28:21 And so what the underlying library does is you import, from tempvars, you import the capital tempvars context manager.

00:28:31 Then I'll just define a variable here.

00:28:33 And then in this cell, I've got, as a context manager, tempvars, and I declare to it, all right, anything, this syntax says anything that starts with T underscore is gonna be treated as a temporary variable.

00:28:45 And so when I run this, The first line checks to see if T_A is in the namespace, and it's not because it's inside the temporary variables context.

00:28:56 Then I assign it, and indeed, it assigns.

00:28:59 And then when I pop out the back end, the previous value, five, is now restored to it.

00:29:04 So what this does is it makes sure that you don't have contamination coming into the cell, and anything you do in here is reverted to the prior state out the back end.

00:29:14 - Oh, that's cool.

00:29:15 Yeah, so that's using the underlying library.

00:29:17 But what I did, it's like, you know, okay, fine, it works, but you have to have this whole thing that you type out and it's cumbersome.

00:29:23 So what the Jupyter plugin, the Jupyter extension does is it lets you, you can turn on this toolbar for tags for each cell, and then if you define, go away.

00:29:34 Then if you define a tag with this syntax, you can also do a temp_vars_end, but here temp_vars_start_t_, now this variable will automatically be treated as a temporary variable.

00:29:45 it's no longer in the namespace when you execute the cell.

00:29:48 And what it's doing behind the scenes is it's actually taking the code, patching the execute functionality for the cell, and wrapping it in a TempVars context manager behind the scenes, so that anything you use in here, T_, is a temporary variable. You don't have to worry about it getting contamination from the rest of the namespace.

00:30:07 And then just like the other, it --

00:30:09 - So there, yeah. - Yeah.

00:30:11 So, it's brand new. 0.1 is out on PyPI. The readme is in order to satisfy the audience here, I have animated GIFs.

00:30:22 >> Are those screenshots on a UI tool? I love it.

00:30:26 >> Yeah. Animated to boot. So, readme has the user's instructions. It's on PyPI. Just a pip install, Jupyter temp vars. And then I have a shortcut script to actually install the extension into your Jupyter environment. I have a number of features that could be added to it, different things that the underlying library could have added to it. But I'd really love it if anybody who is intrigued would try it out, find and report bugs, suggest features that you want. Because, you know, it's a small thing, but it can be a big problem.

00:30:58 And if this could be at least a partial or substantial solution for people, that would be awesome.

00:31:02 Yeah. Yeah, nice work. This looks great.

00:31:05 Those are good.

00:31:06 Yeah. The, the problem of having variables shared across those things when you didn't intend them to be so tricky in so many ways. I mean, Jupyter's are like go to Jupyter cells are like go to statements with no traceability.

00:31:21 Right. Cause it's, you could run them down, then you could go back and run the one in the middle again. And then you could go run another, like, you need to have, except for just a little in and out numbering. Like you have no idea the order they ran.

00:31:32 Yeah. Notebook hygiene is really tricky. And yeah.

00:31:35 Right now I'm going to feel like I cut you off.

00:31:38 We can say something.

00:31:39 Oh, just he commented that to satisfy us, he's got or the entire Python community has got animated GIFs.

00:31:46 But to be fair, I, it's not just technical books and read me.

00:31:50 So I don't use cookbooks that don't have pictures either.

00:31:53 So, yeah, it sounds good.

00:31:56 I do read novels that don't have pictures, but so it's not everything.

00:32:00 I really hate there was the pictures in your head.

00:32:03 - I really hate the graphical novels that don't have pictures.

00:32:05 - Yeah. Those are the worst.

00:32:08 - Those are the worst. All right. Real-time follow-up.

00:32:11 Brandon Brainer, former co-host here, says, "This is talking about going back to YJWT over something like cookies." So imagine having something like auto zero when you log, maybe off zero, when you log in, it gives you back this JWT, which has a timeout. The front end has this.

00:32:30 it can send it to your API.

00:32:32 And then also it has the signature that verifies it wasn't tampered with.

00:32:36 And you can verify the sender because you can decrypt it and stuff like that.

00:32:41 - Okay, better chain of custody.

00:32:43 - All that tricky cryptography stuff.

00:32:47 Speaking of other things, extra things, you guys got some extras we should cover?

00:32:53 - I have a few, actually, some quick ones.

00:32:55 - Alright, bring it on.

00:32:57 - So we've got, issues are finally live. So they're there. Python issues are now on GitHub.

00:33:04 >> We didn't jinx it this time. >> It really is there. So enough said.

00:33:09 I was, you know, I've used lorem ipsum before. I think everybody doing front end stuff has.

00:33:15 But I didn't know there's a cool page like loremipsum.com that has some, a translation So you can read what it means, at least a 1,500, 1914 translation.

00:33:30 So it's sort of an interesting read.

00:33:33 I won't get into it here, but it's worth a read if you're curious.

00:33:36 And then one of the things we do sometimes at the end is funny stuff.

00:33:40 And one of the things we've covered is various O'Reilly covers.

00:33:46 So I found this Dev2 O'Reilly cover generator.

00:33:51 I didn't know where it was. Somebody had. Oh, nice. And you could just make up your own. So I made one up, pass it around last night. so it's kind of a fun thing. yeah, I put, I pulled that from the show notes and pass it on to my friends that they have run with it.

00:34:06 They're delighted. 100% test coverage. You need to test with no asserts. At least CI is happy.

00:34:12 So anyway, this is awesome. How about you got any extras?

00:34:18 I have a few.

00:34:19 Now, your mention made me add a third one.

00:34:23 Or another one rather.

00:34:25 Let's go here.

00:34:26 So, Hipster Ipsum.

00:34:30 If you just need a little more pizazz in that lorem ipsum, you don't want people asking questions.

00:34:37 This is a hipsteripsum@hipsum.co.

00:34:41 This is a generator.

00:34:42 You can give it your flavor.

00:34:43 So, you can go over here and say like How many paragraphs? We only need two paragraphs.

00:34:49 And hipster neat or you can do it with a shot of Latin.

00:34:53 And it starts out with, I'm baby, gentrified, tumbler, butcher, cronut, succulents, poor loco, subway, towel, food truck, letterpress, tote bag, tofu.

00:35:05 - Doesn't flow quite the same as the Latin, but it works. - Yeah, exactly.

00:35:09 You got the fashion X and all that. So anyway, that one's kind of fun.

00:35:13 Firstly, quick shout out, worked with Christos Meskis from the Microsoft Identity Team, speaking of JWTs, and he and I just put together a course, Secure APIs with FastAPI in the Microsoft Identity Platform.

00:35:27 So people can check that out if they wanna do JWT and other types of federated identity with FastAPI.

00:35:33 That's a lot of fun course we just launched yesterday.

00:35:36 - Nice, excellent, cool.

00:35:38 - Yeah, and thanks.

00:35:39 And then a quick shout out, Seth sent over this thing called Python Virtual ENV for Windows sorta-ish.

00:35:45 (Seth laughs)

00:35:47 And it's this idea to bring some of the Pi ENV virtual environment features to Windows.

00:35:54 I haven't really played with this, but trying, I guess some of the features there for the virtual environments don't work on Windows, but his sorta plugin script does.

00:36:04 You can check that out, which I think will be helpful for some people, for the Windows people.

00:36:10 And that's it for my items.

00:36:12 Brian Skin, do you got anything you want to share as well?

00:36:14 - Yep, I've got a few quick ones.

00:36:16 First of all, as many probably know, Eva stepped down, Jalessa stepped down as the executive director of the PSF.

00:36:26 I believe it was at the end of last year.

00:36:28 PSF has found their new executive director, Deb Nicholson.

00:36:31 So, woo!

00:36:32 Congratulations to all there.

00:36:34 - Yeah, congratulations.

00:36:37 Yeah, so more generally, the PSF is been hiring lately.

00:36:42 Last year, there was the packaging project manager, Shamika Mohanan, there's the--

00:36:47 - And the developer in residence.

00:36:48 - Absolutely.

00:36:50 They also, there was a posting for an infrastructure engineer to assist with the facilities that, the link now 404s, so maybe they've made their hire, I don't know, but the posting was there and now it's not.

00:37:02 And then actually in the steering council notes released for March, there is beginnings of discussion about hiring a second developer in residence, which would be terrific. So yeah, it seems like it's been a big success. So getting someone to help Lucas out would be really great. Definitely. Two more quick things. One, PyOhio, the regional Ohio conference, the call for proposals is open. It's going to be a fully virtual conference again this year. So anybody who is interested, submit, submit, submit.

00:37:34 >> Nice. >> And then one interesting tidbit relevant to, we have to talk about Pydantic at least once, I think, right? Along with Anthony Shaw and Will McGugan. This was a couple of days ago. Samuel Colvin of Pydantic fame posted this somewhat cryptic tweet here showing over a tenfold increase in speed for some sort of of Pydantic features here. So I don't believe the this is actually drop yet. This is all I know. But this looks pretty exciting.

00:38:07 The magical Pydantic core is coming.

00:38:10 Yes.

00:38:11 Cool. I have no idea what it is, but very exciting.

00:38:14 But I want one.

00:38:16 Maybe it's the Pydantic pony.

00:38:21 the pedantic unicorn. Now that's great. All right, I got no more extras, but I have some jokes. Yay. Bring on. All right. I think this first one might be from you, Brian skin. Is that right? Yeah, I can't. You want to tell us this joke here? Yeah, so it's a it's a riff off of the various elements of a business enterprise trying to bring a product to a customer that's what they actually want. You know, with the tree and the swing and the armchair swing and the swing with no ropes and that. This one is more cat directed. And the left panel says product features. And it shows this really nice multi-level cat tower with beds and scratching posts. And, you know, very attractive. And on the right, it says user needs. And it has a cat peeking up out of a cardboard box.

00:39:10 Exactly. Slightly over designed, would you say?

00:39:15 of it. And I think there was somebody responded that there's a tweet lower down saying, this is exactly my life. I have an untouched, you know, cat tree in the corner and all the cat sits in is the box. So this is also true for children. A lot of times the box is the best part. Definitely. All right. I brought two more for us just because they're both, they're all short and I thought this would be fun. So here's one that says, junior developer, how did you find the bug so fast? And it has the senior developer who is this sort of lion meme. I was there when it was written.

00:39:47 Line which in the wardrobe reference there, I think.

00:39:51 I think so. All right. And then this one really, I really appreciate this one. So there's two sort of time lapse Google search pages with text overlaid on it. And it says 831 C++ Hello World, 833 alternatives to C++. And of course, it's complete with the top std colon colon c out less than less than hello world less than less than standard out colon colon end out, you know, the formal C++ style like s print out or whatever. Yeah. Hello, C++. Hello, world.

00:40:29 alternatives to C++.

00:40:31 I'll just leave it with that, you guys.

00:40:33 I had one semester of C++ in college and I don't miss the compiler errors at all.

00:40:38 No.

00:40:39 Yeah, C++ is some wild stuff.

00:40:41 That's half my life.

00:40:42 I used to work in it somewhat.

00:40:43 I did a couple of years of professional C++ and it was okay, but a lot of craziness.

00:40:49 Yeah, you don't have to use the crazy parts, though.

00:40:51 So, at least in the embedded world, we use it's C++, but but we just selectively use the cool features.

00:41:00 Mostly it looks like C.

00:41:02 Yeah, I think C++ is getting a big update as well, isn't it?

00:41:07 I think there's there's regular updates.

00:41:09 There's so many new things coming on.

00:41:11 It was fairly stagnant for like decades.

00:41:16 And then, but in the last 10 years, there's been a lot of new changes.

00:41:19 I feel like I've read people griping that they're making C++ too much like Python or something.

00:41:25 adding I don't know exactly what that means, but, but, you know, we propose taking away the semi-colons.

00:41:31 What too much, too much.

00:41:35 I could definitely get rid of the curly brackets.

00:41:37 so yeah, yeah, yeah.

00:41:39 There's a lot of parentheses when you don't really need them.

00:41:41 So yeah.

00:41:42 All right.

00:41:43 Well, Brian Auken, thank you as always.

00:41:45 And Brian skin.

00:41:46 Thanks for being here.

00:41:47 Thanks.

00:41:48 Thanks for having me.

00:41:49 You bet.

00:41:50 Bye everyone.

