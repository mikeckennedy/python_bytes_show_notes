
00:00:00.000 --> 00:00:03.920
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly


00:00:03.920 --> 00:00:12.000
to your earbuds. This is episode 266, recorded January 12th, 2022. I'm Michael Kennedy.


00:00:12.000 --> 00:00:13.280
And I'm Brian Okken.


00:00:13.280 --> 00:00:19.120
So great to be here again. And we had this whole survey about having guests, Brian.


00:00:19.120 --> 00:00:21.680
And this week, we don't have a guest. It's just you and me, which I think is cool.


00:00:21.680 --> 00:00:23.120
>> That's all right. It's good.


00:00:23.120 --> 00:00:26.320
>> Yeah. People out there listening, if they really want to be a guest,


00:00:26.320 --> 00:00:27.980
they can shoot us a message.


00:00:27.980 --> 00:00:30.980
For now, we've got so much cool things,


00:00:30.980 --> 00:00:32.660
so many cool things to speak about.


00:00:32.660 --> 00:00:37.220
We're going to need like a glossary or an FAQ or I mean, something.


00:00:37.220 --> 00:00:39.580
>> Yes. Well, actually,


00:00:39.580 --> 00:00:42.620
I don't know how I missed this for so long,


00:00:42.620 --> 00:00:45.980
but there was a tweet by, who was it?


00:00:45.980 --> 00:00:48.940
Trey Hunter had a tweet that it mentioned


00:00:48.940 --> 00:00:51.500
and actually referred to the glossary and I'm like,


00:00:51.500 --> 00:00:53.340
"What? We have a glossary?


00:00:53.340 --> 00:00:55.020
I never checked it out before."


00:00:55.020 --> 00:00:58.140
So on the Python.org website,


00:00:58.140 --> 00:01:01.700
there at docs.python.org, there's a glossary.


00:01:01.700 --> 00:01:03.700
And it's actually pretty cool.


00:01:03.700 --> 00:01:04.980
There's a whole bunch of stuff.


00:01:04.980 --> 00:01:10.380
Like if you forget what abstract base classes are, it's there.


00:01:10.380 --> 00:01:13.620
So there's Python stuff, there's programming stuff.


00:01:13.620 --> 00:01:16.780
>> It even defines what the three arrows mean.


00:01:16.780 --> 00:01:20.340
>> Yeah, like the three arrows, that's the first one.


00:01:20.340 --> 00:01:22.180
Default Python prompt.


00:01:22.180 --> 00:01:23.420
But also the dot, dot, dot.


00:01:23.420 --> 00:01:24.220
What is that?


00:01:24.220 --> 00:01:27.080
the ellipses and two to three.


00:01:27.080 --> 00:01:29.520
So this threw me off once when I first started,


00:01:29.520 --> 00:01:31.400
I was like, what's this two to three thing?


00:01:31.400 --> 00:01:32.720
Is this a third party package?


00:01:32.720 --> 00:01:35.440
And it was, it wasn't obvious to me that it was built in.


00:01:35.440 --> 00:01:37.360
So that's kind of neat,


00:01:37.360 --> 00:01:38.800
but it shouldn't be an issue anymore


00:01:38.800 --> 00:01:41.280
because everybody's on Python three now, right?


00:01:41.280 --> 00:01:44.280
So anyway, so the glossary,


00:01:44.280 --> 00:01:47.060
I just, just, just a shout out that this is here.


00:01:47.060 --> 00:01:48.060
It's fun.


00:01:48.060 --> 00:01:49.520
So check it out.


00:01:49.520 --> 00:01:51.040
The other thing that this,


00:01:51.040 --> 00:01:54.500
It refers to the other documentation in Python a lot.


00:01:54.500 --> 00:01:59.180
And one of the things it refers to sometimes is the FAQ.


00:01:59.180 --> 00:02:01.280
And also, didn't know that was there.


00:02:01.280 --> 00:02:02.480
- We have an FAQ.


00:02:02.480 --> 00:02:03.460
- Yeah.


00:02:03.460 --> 00:02:05.280
And it's split into a whole bunch of stuff


00:02:05.280 --> 00:02:07.140
like general Python and programming


00:02:07.140 --> 00:02:10.120
and history and design and stuff.


00:02:10.120 --> 00:02:13.680
And I ran across it because one of the things I looked up


00:02:13.680 --> 00:02:17.200
when I followed from the glossary was this question


00:02:17.200 --> 00:02:20.920
of what's the difference between arguments and parameters.


00:02:20.920 --> 00:02:23.260
It's something that I've always messed up,


00:02:23.260 --> 00:02:25.120
and now I think I have it.


00:02:25.120 --> 00:02:27.280
Parameters are the names of


00:02:27.280 --> 00:02:30.240
things that appear in the function definition,


00:02:30.240 --> 00:02:33.180
and the arguments are the values that get passed in.


00:02:33.180 --> 00:02:35.440
Neat. Don't know why I didn't-


00:02:35.440 --> 00:02:36.920
>> Sometimes people use them interchangeably,


00:02:36.920 --> 00:02:41.560
but they talk about different ways of working with that data.


00:02:41.560 --> 00:02:46.720
>> Yeah, but let's say you're either new to Python or new to programming.


00:02:46.720 --> 00:02:48.520
Some of these perusals,


00:02:48.520 --> 00:02:50.520
some of these are great things.


00:02:50.520 --> 00:02:54.480
Why did my changing list y also change list x?


00:02:54.480 --> 00:02:57.160
Well, this will help you understand why there's


00:02:57.160 --> 00:03:01.640
the naming system in Python and stuff like that.


00:03:01.640 --> 00:03:02.760
It's pretty great.


00:03:02.760 --> 00:03:04.960
>> Yeah. It talks about references and all sorts of stuff.


00:03:04.960 --> 00:03:07.600
Yeah, quite cool. I didn't know that we had it,


00:03:07.600 --> 00:03:09.500
but yeah, that's cool.


00:03:09.500 --> 00:03:10.740
>> You did know it was there?


00:03:10.740 --> 00:03:11.880
>> No, I did not know it was there.


00:03:11.880 --> 00:03:12.240
That's great.


00:03:12.240 --> 00:03:12.600
>> Okay.


00:03:12.600 --> 00:03:13.080
>> Yeah.


00:03:13.080 --> 00:03:15.360
>> I mean, I didn't know anything about it.


00:03:15.360 --> 00:03:17.360
So I want to talk about something else.


00:03:17.360 --> 00:03:19.240
I want to talk about any IO.


00:03:19.240 --> 00:03:21.320
As I'm sure you and a lot of listeners know,


00:03:21.320 --> 00:03:24.640
I'm a big fan of asyncio and async in a wait.


00:03:24.640 --> 00:03:26.720
I think it really unlocks a lot of potential


00:03:26.720 --> 00:03:28.520
when you're waiting on things.


00:03:28.520 --> 00:03:30.200
There's been a lot of analysis saying,


00:03:30.200 --> 00:03:32.360
oh, I did this computational thing


00:03:32.360 --> 00:03:33.960
and it didn't make it any faster, it made it slower.


00:03:33.960 --> 00:03:36.160
It's like, yeah, 'cause it only scales waiting


00:03:36.160 --> 00:03:37.200
and you're not waiting.


00:03:37.200 --> 00:03:39.920
So when you're talking about waiting,


00:03:39.920 --> 00:03:42.880
it usually has to do with IO with external systems, right?


00:03:42.880 --> 00:03:44.120
I'm waiting on the file system,


00:03:44.120 --> 00:03:46.440
I'm waiting on the database, I'm waiting on whatever.


00:03:46.440 --> 00:03:49.320
So there's this cool library called Any.io.


00:03:49.320 --> 00:03:53.360
So I indirectly learned about this from Sebastian Ramirez


00:03:53.360 --> 00:03:58.160
from FastAPI, because he talks about this thing


00:03:58.160 --> 00:04:00.640
called Asyncr, which extends a few things


00:04:00.640 --> 00:04:02.960
that are ultimately probably gonna make it back to Any.io.


00:04:02.960 --> 00:04:06.200
So Any.io is an asynchronous networking


00:04:06.200 --> 00:04:09.400
and concurrency library that works on top of


00:04:09.400 --> 00:04:12.440
either Async.io, which is the one we all know and love,


00:04:12.440 --> 00:04:15.200
or Trio, which is similar to AsyncIO,


00:04:15.200 --> 00:04:18.000
but it has a larger,


00:04:18.000 --> 00:04:20.560
it has more of an understanding of dependencies


00:04:20.560 --> 00:04:23.520
between tasks and things.


00:04:23.520 --> 00:04:25.660
How you can say, I'm gonna create a set of work


00:04:25.660 --> 00:04:27.040
that is made up of these tasks,


00:04:27.040 --> 00:04:29.680
and this task is actually a child of that other task.


00:04:29.680 --> 00:04:32.660
So if I cancel the top level one, cancel its children,


00:04:32.660 --> 00:04:33.900
it's a little bit more complicated,


00:04:33.900 --> 00:04:37.420
but it solves this structured concurrency story


00:04:37.420 --> 00:04:38.920
that people sometimes need.


00:04:38.920 --> 00:04:41.280
So you can use this to get some libraries


00:04:41.280 --> 00:04:46.160
that will do nice things with stuff you might wait on.


00:04:46.160 --> 00:04:49.080
So some of the features include there's task groups.


00:04:49.080 --> 00:04:50.560
That's the thing I was describing


00:04:50.560 --> 00:04:53.160
with parent-child relationship type of things.


00:04:53.160 --> 00:04:57.800
With Trio, it has high-level networking, TCP, UDP,


00:04:57.800 --> 00:05:00.800
an API for byte streams and object streams,


00:05:00.800 --> 00:05:03.360
inter-task synchronization and communication,


00:05:03.360 --> 00:05:06.360
like locks and conditions and events and semaphores,


00:05:06.360 --> 00:05:09.080
worker threads, sub-processes, all kinds of stuff.


00:05:09.080 --> 00:05:11.760
So go over and you can sort of see


00:05:11.760 --> 00:05:13.840
some real simple ways for it to run.


00:05:13.840 --> 00:05:17.280
So one of the things that's sometimes not entirely obvious


00:05:17.280 --> 00:05:19.440
is how do you run something on asyncio


00:05:19.440 --> 00:05:22.560
because you've got to make sure


00:05:22.560 --> 00:05:25.740
you've got an asyncio event loop running.


00:05:25.740 --> 00:05:28.120
And if there's already one, you should call get loop.


00:05:28.120 --> 00:05:30.560
But if it's not one, you should create one and so on.


00:05:30.560 --> 00:05:32.800
So this is just, you know, I have an async method


00:05:32.800 --> 00:05:36.520
which can be a task and just say, you know, trio.run


00:05:36.520 --> 00:05:39.640
or you can run and just say the backend is trio,


00:05:39.640 --> 00:05:40.480
which is pretty cool.


00:05:40.480 --> 00:05:42.080
So all sorts of cool stuff like that.


00:05:42.080 --> 00:05:44.480
And it just sort of simplifies working


00:05:44.480 --> 00:05:46.220
with these different things.


00:05:46.220 --> 00:05:48.800
If we go and look at the sockets example,


00:05:48.800 --> 00:05:52.280
you can just say await async with await,


00:05:52.280 --> 00:05:54.360
woo, connect TCP,


00:05:54.360 --> 00:05:56.900
and that's allow you to do like await receive,


00:05:56.900 --> 00:05:58.960
await send, and so on.


00:05:58.960 --> 00:06:01.360
So some nice libraries that come out of any IO


00:06:01.360 --> 00:06:03.960
for doing TCP, UDP, all that kind of stuff.


00:06:03.960 --> 00:06:05.600
You know, the things you would wait on.


00:06:05.600 --> 00:06:10.480
>> Yeah. So if you know you're going to use AsyncIO,


00:06:10.480 --> 00:06:12.440
would this buy you anything?


00:06:12.440 --> 00:06:16.360
>> I think that it has those additional higher level libraries for


00:06:16.360 --> 00:06:20.600
talking to TCP and byte streams and stuff like that,


00:06:20.600 --> 00:06:22.320
and also the subprocess.


00:06:22.320 --> 00:06:22.920
>> Yeah.


00:06:22.920 --> 00:06:26.320
>> I think it does have some utility stuff on top of it.


00:06:26.320 --> 00:06:28.160
But it's pretty cool. You can say a wait,


00:06:28.160 --> 00:06:30.600
run subprocess, which is pretty cool.


00:06:30.600 --> 00:06:32.720
>> That's actually really cool.


00:06:32.720 --> 00:06:34.280
>> I've not seen this one before,


00:06:34.280 --> 00:06:35.680
And that one kind of makes me excited now.


00:06:35.680 --> 00:06:36.980
Yeah, that's cool.


00:06:36.980 --> 00:06:37.620
Nice.


00:06:37.620 --> 00:06:38.000
Cool.


00:06:38.000 --> 00:06:40.640
So not a whole lot more to say about it than that, but if those are the


00:06:40.640 --> 00:06:43.080
types of things you're doing, then, you know, come check it out.


00:06:43.080 --> 00:06:43.720
It's a cool library.


00:06:43.720 --> 00:06:45.140
Do you know what else is cool?


00:06:45.140 --> 00:06:46.360
I do not tell me about it.


00:06:46.360 --> 00:06:49.160
Oh, I thought we were doing something else.


00:06:49.160 --> 00:06:50.860
Wait.


00:06:50.860 --> 00:06:51.780
Oh yes, we do.


00:06:51.780 --> 00:06:54.660
I've got one more thing to talk about before we move on because we have


00:06:54.660 --> 00:06:56.980
a, a different number of things.


00:06:56.980 --> 00:06:57.760
I'm not sure where we're sliding.


00:06:57.760 --> 00:06:58.480
I'll slide it in here.


00:06:58.480 --> 00:07:03.480
So what else is cool is that this episode is brought to you by Datadog.


00:07:03.720 --> 00:07:05.320
Thank you Datadog for supporting the show.


00:07:05.320 --> 00:07:07.400
They've been big supporters of Python Bytes


00:07:07.400 --> 00:07:08.440
for a really long time.


00:07:08.440 --> 00:07:09.800
So that's fantastic. - Really appreciate it.


00:07:09.800 --> 00:07:11.680
Plus really great t-shirts.


00:07:11.680 --> 00:07:13.880
- Exactly, they've got cool t-shirts.


00:07:13.880 --> 00:07:16.080
I mean, I definitely wanna get one of those.


00:07:16.080 --> 00:07:18.520
So Datadog does a lot of things.


00:07:18.520 --> 00:07:20.520
One of their things they're focusing on now


00:07:20.520 --> 00:07:21.920
is real-time monitoring.


00:07:21.920 --> 00:07:23.480
So they have a real-time monitoring platform


00:07:23.480 --> 00:07:26.280
that unifies metrics, traces, logs


00:07:26.280 --> 00:07:28.560
into one tightly integrated platform.


00:07:28.560 --> 00:07:32.560
Their APM empowers developers to identify anomalies,


00:07:32.560 --> 00:07:35.400
resolve issues and improve application performance.


00:07:35.400 --> 00:07:37.780
You just finished the Talk Python episode


00:07:37.780 --> 00:07:39.020
talking about running production


00:07:39.020 --> 00:07:40.780
and everyone there on the panel was like,


00:07:40.780 --> 00:07:43.980
you need to make sure you're monitoring in production


00:07:43.980 --> 00:07:46.640
for things that change in your performance profile


00:07:46.640 --> 00:07:48.660
because you get too much data


00:07:48.660 --> 00:07:50.580
as your infrastructure changes,


00:07:50.580 --> 00:07:53.040
as the way your app is being used changed.


00:07:53.040 --> 00:07:56.060
It could hit these scenarios and run into problems


00:07:56.060 --> 00:07:57.960
that you would just never see in testing.


00:07:57.960 --> 00:08:00.700
So if you had Datadog APM, you would have caught it.


00:08:00.700 --> 00:08:02.940
So you can begin collecting stack traces,


00:08:02.940 --> 00:08:05.020
visualize them as flame graphs,


00:08:05.020 --> 00:08:06.980
organize them into profile types,


00:08:06.980 --> 00:08:09.220
such as these are the CPU metrics,


00:08:09.220 --> 00:08:10.740
these are IO and so on.


00:08:10.740 --> 00:08:12.940
Teams can search for specific profiles,


00:08:12.940 --> 00:08:14.960
correlate them with distributed traces


00:08:14.960 --> 00:08:16.220
if you're doing microservices


00:08:16.220 --> 00:08:18.620
and identify slower underperforming code


00:08:18.620 --> 00:08:20.740
for analysis and optimization.


00:08:20.740 --> 00:08:23.000
Plus with Datadog's APM Live Search,


00:08:23.000 --> 00:08:25.020
you can perform searches across the full stream


00:08:25.020 --> 00:08:27.940
of ingest traces generated by your app


00:08:27.940 --> 00:08:29.440
over the last 15 minutes.


00:08:29.440 --> 00:08:33.880
So try Datadog APM for free with a 14 day trial.


00:08:33.880 --> 00:08:37.040
And if you do, you get that t-shirt that Brian mentioned.


00:08:37.040 --> 00:08:39.480
So just go to pythonbytes.fm/datadog


00:08:39.480 --> 00:08:42.120
or click the link in your podcast player show notes


00:08:42.120 --> 00:08:43.200
or in this chapter.


00:08:43.200 --> 00:08:45.160
Remember we talked about chapters and links.


00:08:45.160 --> 00:08:46.640
I'll have this have a chapter as well.


00:08:46.640 --> 00:08:49.440
So thank you Datadog for supporting the show.


00:08:49.440 --> 00:08:52.040
Now let's talk about your next item, Brian.


00:08:52.040 --> 00:08:56.000
- Yeah, I think it's Vax, Vex, Vex?


00:08:56.000 --> 00:08:56.840
I don't know. - Vex?


00:08:56.840 --> 00:08:59.160
- Vex? - Oh.


00:08:59.160 --> 00:09:01.760
>> People are gaining traction for the idea of putting


00:09:01.760 --> 00:09:05.720
a pronunciation on a GitHub repo for projects that are not obvious.


00:09:05.720 --> 00:09:06.120
>> Yeah.


00:09:06.120 --> 00:09:08.600
>> I saw this on Twitter. Let's do it. Let's make it happen.


00:09:08.600 --> 00:09:11.120
>> This was suggested by Glenn Ferguson.


00:09:11.120 --> 00:09:16.120
This is a library that's a high-performance Python library


00:09:16.120 --> 00:09:19.680
for lazy out-of-core data frames.


00:09:19.680 --> 00:09:21.720
I don't know what out-of-core is.


00:09:21.720 --> 00:09:24.680
I looked it up in a glossary.


00:09:24.680 --> 00:09:27.920
>> After the FAQ.


00:09:27.920 --> 00:09:31.480
>> Yeah. Out of core typically refers to


00:09:31.480 --> 00:09:35.420
processing data that is too large to fit in the computer's memory.


00:09:35.420 --> 00:09:37.240
That's what this is.


00:09:37.240 --> 00:09:39.420
For data processing, often,


00:09:39.420 --> 00:09:41.560
you're trying to do some analysis,


00:09:41.560 --> 00:09:45.380
do some statistics, maybe explore the data a little bit,


00:09:45.380 --> 00:09:47.560
but you don't want to read it because they're


00:09:47.560 --> 00:09:51.800
huge datasets and you've got maybe a limited computer.


00:09:51.800 --> 00:09:55.320
That's what this is set up to do.


00:09:55.320 --> 00:09:57.440
The main features of it,


00:09:57.440 --> 00:09:59.280
So you've got like big data sets.


00:09:59.280 --> 00:10:02.720
It also has, it has statistics like mean and sum


00:10:02.720 --> 00:10:05.000
and count and standard deviation, et cetera.


00:10:05.000 --> 00:10:07.480
But it also has some visualizations that are sped up


00:10:07.480 --> 00:10:10.320
from how they've sped things up


00:10:10.320 --> 00:10:11.680
and not kept things in memory.


00:10:11.680 --> 00:10:16.000
And they're using memory mapping and some tricks inside


00:10:16.000 --> 00:10:19.280
to try to avoid any memory copies


00:10:19.280 --> 00:10:23.140
and try to do it as lazy as computation as possible.


00:10:23.140 --> 00:10:24.720
And this is actually pretty impressive.


00:10:24.720 --> 00:10:29.720
I was watching some of the demos.


00:10:29.720 --> 00:10:33.280
So there's a SciPy 2019 video


00:10:33.280 --> 00:10:38.040
where it's the person that started this library,


00:10:38.040 --> 00:10:39.520
which is now a company also,


00:10:39.520 --> 00:10:41.800
but does a demo of this.


00:10:41.800 --> 00:10:44.960
And it's really impressive how fast things are.


00:10:44.960 --> 00:10:46.440
He's pulling things up.


00:10:46.440 --> 00:10:47.640
Because of the memory mapping,


00:10:47.640 --> 00:10:51.360
you can even have multiple, you know, multiple,


00:10:51.360 --> 00:10:53.960
Jupyter notebooks.


00:10:53.960 --> 00:10:55.800
Yeah, that's it, multiple Jupyter notebooks


00:10:55.800 --> 00:10:57.800
looking at the same huge dataset


00:10:57.800 --> 00:10:59.080
and it doesn't slow things down


00:10:59.080 --> 00:11:02.000
even when things are working on it, it's pretty neat.


00:11:02.000 --> 00:11:05.840
So I definitely think this is worth checking out.


00:11:05.840 --> 00:11:08.000
One of the things on the README that I like


00:11:08.000 --> 00:11:09.320
is the key features.


00:11:09.320 --> 00:11:11.840
So it's a instant opening of huge data files


00:11:11.840 --> 00:11:14.080
because it's memory mapping the data file.


00:11:14.080 --> 00:11:15.020
It actually doesn't read,


00:11:15.020 --> 00:11:17.800
it doesn't do any reads when you read it.


00:11:17.800 --> 00:11:19.800
But when you pull some data out,


00:11:19.800 --> 00:11:22.200
it does lazy reads, jumps ahead


00:11:22.200 --> 00:11:23.880
and it's pretty impressive.


00:11:23.880 --> 00:11:26.600
So this also has an expression system


00:11:26.600 --> 00:11:29.980
so that it's kind of a, there is a little bit of a,


00:11:29.980 --> 00:11:32.200
so you can lazy transforms of data.


00:11:32.200 --> 00:11:33.240
So that's neat.


00:11:33.240 --> 00:11:35.440
Out of core data frames, like we said,


00:11:35.440 --> 00:11:37.680
fast group by an aggregations,


00:11:37.680 --> 00:11:41.120
a whole bunch of the fast and efficient joins


00:11:41.120 --> 00:11:41.940
are interesting.


00:11:41.940 --> 00:11:44.440
I was watching, looking at another comparison


00:11:44.440 --> 00:11:49.200
of pandas and Dask and other things versus Vax.


00:11:49.200 --> 00:11:52.920
and the joins of huge tables


00:11:52.920 --> 00:11:55.600
are pretty fast and seamless here,


00:11:55.600 --> 00:11:58.440
and those will blow up some projects.


00:11:58.440 --> 00:12:02.480
So yeah, this is, yes, it is similar to Dask.


00:12:02.480 --> 00:12:06.280
Somebody asked, "Lazy like Dask?"


00:12:06.280 --> 00:12:07.860
Yes, but--


00:12:07.860 --> 00:12:08.860
- That's a good thing.


00:12:08.860 --> 00:12:09.700
- Yeah.


00:12:09.700 --> 00:12:11.600
Oops.


00:12:11.600 --> 00:12:15.240
But it, yeah, a bunch of fun things.


00:12:15.240 --> 00:12:18.840
It's good to have, it isn't the same as Dask,


00:12:18.840 --> 00:12:22.840
it's worth checking out to see if maybe this one might be a good fit for you.


00:12:22.840 --> 00:12:23.600
Yeah, it's cool.


00:12:23.600 --> 00:12:26.120
It's the lazy that makes the magic, right?


00:12:26.120 --> 00:12:27.560
You don't have to load it all from disk.


00:12:27.560 --> 00:12:28.680
You can distribute it.


00:12:28.680 --> 00:12:32.920
There's all kinds of interesting things in the a billion sample


00:12:32.920 --> 00:12:35.280
per row operations per second.


00:12:35.280 --> 00:12:37.040
That sounds that sounds pretty good.


00:12:37.040 --> 00:12:39.840
Yeah, it's watching the demo.


00:12:39.840 --> 00:12:44.840
It's incredible how fast he's popping up things and and loading, even


00:12:45.120 --> 00:12:49.600
even to be able to visualize things by pulling out samples out of the set.


00:12:49.600 --> 00:12:50.720
>> Wait a minute, Brian.


00:12:50.720 --> 00:12:52.760
I heard people told me that Python was slow,


00:12:52.760 --> 00:12:54.800
so it didn't make sense to do this kind of stuff with it.


00:12:54.800 --> 00:12:56.480
What's going on here?


00:12:56.480 --> 00:12:59.980
>> No, no, no. Python's fast.


00:12:59.980 --> 00:13:02.080
>> I know. Pick the right libraries.


00:13:02.080 --> 00:13:04.440
All right. One of the things that is


00:13:04.440 --> 00:13:07.460
definitely well-known in the Python world is Django.


00:13:07.460 --> 00:13:09.240
I've even had people tell me,


00:13:09.240 --> 00:13:13.400
I came to become a Django developer and so I had to learn Python,


00:13:13.400 --> 00:13:15.400
which is a really interesting perspective.


00:13:15.400 --> 00:13:16.900
So I want to talk about the


00:13:16.900 --> 00:13:20.800
Django developer survey results for the 2021 survey


00:13:20.800 --> 00:13:22.000
because that just recently happened.


00:13:22.000 --> 00:13:24.900
So I'll highlight a couple of things that are interesting over here.


00:13:24.900 --> 00:13:26.000
One of the questions was,


00:13:26.000 --> 00:13:28.000
what is the main reason you use Django?


00:13:28.000 --> 00:13:30.500
Is it both for work, personal or for work?


00:13:30.500 --> 00:13:33.400
Only 15% said just for work.


00:13:33.400 --> 00:13:35.800
Does that seem like a lower number than you expect?


00:13:35.800 --> 00:13:36.400
Yeah.


00:13:36.400 --> 00:13:37.800
Yeah, I thought more people would just like,


00:13:37.800 --> 00:13:40.100
they'd go to work and do Django and they'd go home and they'd,


00:13:40.100 --> 00:13:41.800
I don't know, watch Game of Thrones or something.


00:13:41.800 --> 00:13:45.120
But Django developers love it and they, you know,


00:13:45.120 --> 00:13:46.800
they use it a lot for all sorts of things.


00:13:46.800 --> 00:13:51.200
So by far the biggest group here, 66% is for using it


00:13:51.200 --> 00:13:52.040
for both.


00:13:52.040 --> 00:13:53.800
So that stood out to me.


00:13:53.800 --> 00:13:56.320
Another one that's interesting is how many people


00:13:56.320 --> 00:13:58.000
are on the latest version.


00:13:58.000 --> 00:14:00.520
So web apps often sort of get stuck in the past


00:14:00.520 --> 00:14:01.740
'cause once you get them up and running,


00:14:01.740 --> 00:14:02.960
like people don't wanna touch it.


00:14:02.960 --> 00:14:06.800
But 75% of the people are using the 3.2,


00:14:06.800 --> 00:14:08.800
which at the time of asking, I believe,


00:14:08.800 --> 00:14:10.080
was the latest version.


00:14:10.080 --> 00:14:12.440
- Okay, I'm like, I thought we were up to four now.


00:14:12.440 --> 00:14:13.280
What's going on there?


00:14:13.280 --> 00:14:14.380
- Four is in beta.


00:14:14.380 --> 00:14:15.340
I'm not 100% sure.


00:14:15.340 --> 00:14:16.380
I don't think it's totally released.


00:14:16.380 --> 00:14:18.960
But yeah, this is still, remember it's from 2021.


00:14:18.960 --> 00:14:20.160
- Okay. - 2021.


00:14:20.160 --> 00:14:22.660
And then also Django has this concept


00:14:22.660 --> 00:14:24.860
of the latest stable release


00:14:24.860 --> 00:14:26.960
and then a long-term support release.


00:14:26.960 --> 00:14:29.420
So if you go to just the latest stable release


00:14:29.420 --> 00:14:32.140
and it's not LTS, you may have to upgrade sooner


00:14:32.140 --> 00:14:34.300
if you want security fixes and so on.


00:14:34.300 --> 00:14:36.940
And yet 71% of the people use the latest stable release


00:14:36.940 --> 00:14:39.060
because they're upgrading frequently, I'm guessing.


00:14:39.060 --> 00:14:41.980
And then 27% are on the latest LTS


00:14:41.980 --> 00:14:44.940
and 2% are just like, how do I upgrade this again?


00:14:44.940 --> 00:14:46.380
I don't know.


00:14:46.380 --> 00:14:47.940
But that's pretty interesting.


00:14:47.940 --> 00:14:49.900
And then the next question was how often?


00:14:49.900 --> 00:14:53.780
So 44% of the people upgrade every stable release,


00:14:53.780 --> 00:14:56.700
other people less so and it kind of breaks down.


00:14:56.700 --> 00:14:59.340
5%, I use an unsupported version of Django.


00:14:59.340 --> 00:15:00.540
I'm okay with that.


00:15:00.540 --> 00:15:05.300
Databases for people doing Django is a very strong bias


00:15:05.300 --> 00:15:07.180
to use a relational database


00:15:07.180 --> 00:15:09.260
because much of the magic of Django


00:15:09.260 --> 00:15:11.100
depends upon the Django models, right?


00:15:11.100 --> 00:15:13.100
Like the admin section is driven by that


00:15:13.100 --> 00:15:15.300
and so many things, and those are all relational.


00:15:15.300 --> 00:15:18.260
So with that in mind, the most common database,


00:15:18.260 --> 00:15:21.700
77% of the time is Postgres SQL, which is cool.


00:15:21.700 --> 00:15:24.940
And then, does number two there surprise you, Brian?


00:15:24.940 --> 00:15:26.540
- No, not really, SQLite.


00:15:26.540 --> 00:15:27.800
- SQLite, yeah.


00:15:27.800 --> 00:15:31.380
If you got very simple deployment stories,


00:15:31.380 --> 00:15:33.700
you're just gonna put it on one server,


00:15:33.700 --> 00:15:36.380
not much data, you just wanna need something relational,


00:15:36.380 --> 00:15:39.380
SQLite. Well, a lot of internal tools and stuff too. Exactly.


00:15:39.380 --> 00:15:42.380
I mean, you wouldn't run like a major tech company


00:15:42.380 --> 00:15:45.380
on SQLite, get away with it, without


00:15:45.380 --> 00:15:48.380
scars and tears, but you know, for simple


00:15:48.380 --> 00:15:51.380
internal apps, that might just be what you need. You're going to make some SQLite


00:15:51.380 --> 00:15:54.380
enemies by saying that, but. But if you had 100,000


00:15:54.380 --> 00:15:57.380
users concurrently using SQLite, that


00:15:57.380 --> 00:16:00.380
might be bad. Oh, somebody else said possibly


00:16:00.380 --> 00:16:03.380
because SQLite is the default setting, so.


00:16:03.380 --> 00:16:05.700
Yeah, certainly that that is that's a big push.


00:16:05.700 --> 00:16:09.780
The other one is, do you do caching?


00:16:09.780 --> 00:16:14.980
So caching is another layer between the database and your web app where you get


00:16:14.980 --> 00:16:18.780
the database stuff back and then you stash it in the memory somewhere so that


00:16:18.780 --> 00:16:20.820
you don't have to do queries again.


00:16:20.820 --> 00:16:23.780
So they said, do you do you do that?


00:16:23.780 --> 00:16:24.860
And if so, what do you use?


00:16:24.860 --> 00:16:28.700
47% Redis, 43% I don't do that.


00:16:28.700 --> 00:16:32.260
And then the only other really notable thing is memcached.


00:16:32.260 --> 00:16:35.260
So interesting there.


00:16:35.260 --> 00:16:37.660
And I guess people, if they're really interested,


00:16:37.660 --> 00:16:39.540
they come through and look, there's a lot of,


00:16:39.540 --> 00:16:41.260
I don't wanna go through it 'cause there's so many details,


00:16:41.260 --> 00:16:43.160
but it's like, what are your favorite components?


00:16:43.160 --> 00:16:45.100
Like models or admins or auth,


00:16:45.100 --> 00:16:49.020
or what contrib apps do you find most useful?


00:16:49.020 --> 00:16:50.980
Like humanized or whatever.


00:16:50.980 --> 00:16:53.060
So pretty interesting.


00:16:53.060 --> 00:16:55.500
No surprise, people are using Django templates,


00:16:55.500 --> 00:16:57.540
not Jinja as their main templates.


00:16:57.540 --> 00:17:01.500
And then look, it's a race between pytest and UnitTest


00:17:01.500 --> 00:17:04.100
as the top two most common frameworks.


00:17:04.100 --> 00:17:07.700
- With pytest above Unitest, that's pretty cool.


00:17:07.700 --> 00:17:10.060
Especially since Unitest is the default.


00:17:10.060 --> 00:17:11.420
- Yeah, yeah, absolutely.


00:17:11.420 --> 00:17:14.300
Let's see, I'll just wrap it up with some front-end stuff.


00:17:14.300 --> 00:17:16.900
What JavaScript front-end frameworks do you most use?


00:17:16.900 --> 00:17:19.420
jQuery, number one.


00:17:19.420 --> 00:17:21.420
And I don't mean that with a negative way.


00:17:21.420 --> 00:17:23.620
Like sometimes you just got some simple problems


00:17:23.620 --> 00:17:26.540
and you don't need a whole CLI to build a spot


00:17:26.540 --> 00:17:28.960
to like, you know, focus the text box.


00:17:28.960 --> 00:17:31.740
All right, React is tied at 37% as well.


00:17:31.740 --> 00:17:33.020
And then Vue and then Angular.


00:17:33.020 --> 00:17:35.180
And then wow, HTMX made the list.


00:17:35.180 --> 00:17:36.020
Look at this.


00:17:36.020 --> 00:17:37.180
- That's pretty cool, actually.


00:17:37.180 --> 00:17:39.620
- That's brand new shininess getting in there.


00:17:39.620 --> 00:17:40.460
That's pretty cool.


00:17:40.460 --> 00:17:41.720
- 5% but still.


00:17:41.720 --> 00:17:45.020
- Yeah, and then CSS, we got Bootstrap way out front


00:17:45.020 --> 00:17:47.260
and then Tailwind and then pure CSS.


00:17:47.260 --> 00:17:49.980
All right, so that's the survey results.


00:17:49.980 --> 00:17:50.860
Pretty interesting.


00:17:50.860 --> 00:17:51.980
- Nice.


00:17:51.980 --> 00:17:53.580
- All right, what do you got next for us?


00:17:53.580 --> 00:17:56.820
- Next, we've got more extras.


00:17:56.820 --> 00:17:58.340
- We got extras, okay.


00:17:58.340 --> 00:18:01.380
- Yes, extra, extra, extra, extra, extra, extra.


00:18:01.380 --> 00:18:03.180
So I've got so many extras,


00:18:03.180 --> 00:18:05.980
I decided to make it one of my topics.


00:18:05.980 --> 00:18:09.280
Brian, got anything else before I go on another rant?


00:18:09.280 --> 00:18:12.120
- No, I'm just ready to listen to all these extras.


00:18:12.120 --> 00:18:13.500
- All right, I got a bunch of good stuff.


00:18:13.500 --> 00:18:17.940
So don't let the bad guys into your web apps.


00:18:17.940 --> 00:18:21.660
Django just had secured releases for 4.01,


00:18:21.660 --> 00:18:25.660
sorry, 4.01, 3.2, and 2.6.6.


00:18:25.660 --> 00:18:27.700
Oh, does that mean 4.0 is out?


00:18:27.700 --> 00:18:29.620
- Yeah, nobody's using it.


00:18:29.620 --> 00:18:31.300
- Yeah, well, they didn't use it in the past


00:18:31.300 --> 00:18:32.140
when I was an app.


00:18:32.140 --> 00:18:36.420
Paul Everett and I teamed up to create a course


00:18:36.420 --> 00:18:38.700
over at Talk Python called Static Sites


00:18:38.700 --> 00:18:40.740
with Sphinx and Markdown.


00:18:40.740 --> 00:18:43.000
So this course is free, everyone can go take it.


00:18:43.000 --> 00:18:44.780
All you gotta do is have an account and go here


00:18:44.780 --> 00:18:47.140
and it teaches you how to do Markdown and Sphinx


00:18:47.140 --> 00:18:48.680
and generate static sites.


00:18:48.680 --> 00:18:52.580
There's a cool little demo app that we build over here


00:18:52.580 --> 00:18:54.620
that you can go and do search and look around


00:18:54.620 --> 00:18:56.340
and see how you like, you document your code


00:18:56.340 --> 00:18:57.180
and do all kinds of stuff.


00:18:57.180 --> 00:19:01.740
It's nothing too complicated, but sort of neat to see how to use Markdown with


00:19:01.740 --> 00:19:04.940
Sphinx, because typically Sphinx is about restructured text.


00:19:04.940 --> 00:19:06.900
So check out the course over there.


00:19:06.900 --> 00:19:08.140
I'll put that in the show notes.


00:19:08.140 --> 00:19:11.340
I'm going to definitely check that out because I've got a project that I wanted


00:19:11.340 --> 00:19:13.820
to use Sphinx for, but I was a little intimidated.


00:19:13.820 --> 00:19:14.540
So cool.


00:19:14.540 --> 00:19:15.060
Yeah.


00:19:15.060 --> 00:19:16.580
Paul does a great job with it.


00:19:16.580 --> 00:19:19.380
So, and it's only an hour and 25 minutes or something.


00:19:19.380 --> 00:19:21.140
So it's, it's not a huge investment in time.


00:19:21.140 --> 00:19:25.980
Something that's bothered me basically ever since USB-C, what is this?


00:19:25.980 --> 00:19:31.380
four years or something is I need more ports on my computer and I want them to


00:19:31.380 --> 00:19:35.180
be a BC ports because I have USB things these days because I want them to go


00:19:35.180 --> 00:19:38.300
into the ports that I already have until Thunderbolt four.


00:19:38.300 --> 00:19:43.580
You've not been able to get a dock that has more than one USB C or Thunderbolt


00:19:43.580 --> 00:19:49.380
port, which is super weird to me, but recently they've come out with Thunderbolt


00:19:49.380 --> 00:19:54.260
four and I just got this thing called the CalDigit Thunderbolt four USB four


00:19:54.260 --> 00:19:58.580
Element Hub. Oh man, this thing is fantastic, right? I'm talking to you on my computer here


00:19:58.580 --> 00:20:06.020
and I have my 4k monitor, my 1080p camera, my microphone, my stream deck, the lights,


00:20:06.020 --> 00:20:10.420
keyboard, mouse, trackpad, like seven different things, including the monitor plugged in with


00:20:10.420 --> 00:20:16.660
one cable through this thing. That's really pretty cool. And so sweet. So basically it has


00:20:17.460 --> 00:20:23.460
On the front, it has three USB-C Thunderbolt 4 and a power in.


00:20:23.460 --> 00:20:26.660
And then on the side, it has the Thunderbolt that goes to the computer


00:20:26.660 --> 00:20:31.140
and then also four USB, high-speed USB-A, but the good ones.


00:20:31.140 --> 00:20:36.980
So really, really cool if you need to expand out your new-ish computer.


00:20:36.980 --> 00:20:38.740
What are you using to plug into the monitor then?


00:20:38.740 --> 00:20:43.380
I have a Thunderbolt 2 DisplayPort adapter.


00:20:43.380 --> 00:20:45.300
And so that way, if I come with my new MacBook,


00:20:45.300 --> 00:20:49.300
I can just unplug one thing from my mini, click it over and then boom, I'm ready to go.


00:20:49.300 --> 00:20:50.580
Everything's configured.


00:20:50.580 --> 00:20:51.780
I'm going to get one of these then.


00:20:51.780 --> 00:20:53.540
Yeah, they're not super cheap.


00:20:53.540 --> 00:20:57.540
They've been out for about four or five months, but they've been sold out.


00:20:57.540 --> 00:21:01.860
Supply chains, you know, what time of what's going on with supply chains, everything.


00:21:01.860 --> 00:21:03.460
But they finally came out there on Amazon.


00:21:03.460 --> 00:21:04.980
So I linked to it over on Amazon.


00:21:04.980 --> 00:21:09.700
Also linked to this video that by Doc Rock talking about like, what the heck is this thing?


00:21:09.700 --> 00:21:11.460
And why is it different?


00:21:11.460 --> 00:21:18.020
All right. I also tweeted about how we use the stream deck to do our live stream, which was fun.


00:21:18.020 --> 00:21:23.540
So I shared a bunch of pictures of that, like how we like put the website. So it says how it's


00:21:23.540 --> 00:21:28.980
streaming, how we tweet automatically, how we do the sharing and all that kind of stuff. I'm now


00:21:28.980 --> 00:21:33.460
going to be working on how to use that thing for software development. Like how do you use it for


00:21:33.460 --> 00:21:38.660
Jupyter notebooks? So every button on the stream deck, which is 14, three buttons, basically,


00:21:38.660 --> 00:21:42.740
Like how, what are the 14 Jupyter operations you'd like to have?


00:21:42.740 --> 00:21:44.260
Like run all cells could be a button.


00:21:44.260 --> 00:21:46.340
Or, you know, format with black could be a button.


00:21:46.340 --> 00:21:47.220
All sorts of stuff.


00:21:47.220 --> 00:21:48.180
So very cool.


00:21:48.180 --> 00:21:50.020
Oh, you just have a black button.


00:21:50.020 --> 00:21:51.540
Like with no logo.


00:21:51.540 --> 00:21:54.180
Yes, yes, that should absolutely be black as well.


00:21:54.180 --> 00:21:56.100
So anyway, people are interested in that.


00:21:56.100 --> 00:21:56.580
That's there.


00:21:56.580 --> 00:22:00.660
I did a talk at PyBay quite a while ago.


00:22:00.660 --> 00:22:02.020
Now the talk is out.


00:22:02.020 --> 00:22:06.020
Carson was kind enough to retweet that and pointed out that,


00:22:06.020 --> 00:22:07.380
hey, the talk is actually out.


00:22:07.380 --> 00:22:12.260
So I'm linking to my PyBay talk, which was an in-person talk at a conference.


00:22:12.260 --> 00:22:12.900
Imagine that.


00:22:12.900 --> 00:22:13.340
Wow.


00:22:13.340 --> 00:22:15.780
Um, and San Francisco, that was really fun.


00:22:15.780 --> 00:22:16.660
People can check that out.


00:22:16.660 --> 00:22:22.140
Speaking of conferences, we are a media sponsor of Python web conference.


00:22:22.140 --> 00:22:24.540
And so, you can definitely check that out.


00:22:24.540 --> 00:22:26.980
This is one of the, honestly, becoming one of the bigger online


00:22:26.980 --> 00:22:28.620
conferences, it's five days.


00:22:28.620 --> 00:22:29.300
All day.


00:22:29.300 --> 00:22:31.180
You know, a lot of these online conferences are like, well,


00:22:31.180 --> 00:22:32.260
half day, a little thing here.


00:22:32.260 --> 00:22:35.780
So a lot of tracks, a lot of things going on with the Python web conference.


00:22:35.820 --> 00:22:37.360
I'm also speaking there as well.


00:22:37.360 --> 00:22:38.280
Are you speaking there?


00:22:38.280 --> 00:22:38.900
>> No.


00:22:38.900 --> 00:22:41.500
>> I'm off to get you high testing something up there.


00:22:41.500 --> 00:22:43.780
>> Well, I should probably do some web stuff.


00:22:43.780 --> 00:22:44.980
>> Yeah, absolutely.


00:22:44.980 --> 00:22:48.540
Absolutely. There's a code that you can use.


00:22:48.540 --> 00:22:50.720
It's in the show notes,


00:22:50.720 --> 00:22:53.980
Python bytes at PWC2022,


00:22:53.980 --> 00:22:55.480
and I'll give you 15 percent off.


00:22:55.480 --> 00:22:57.620
Also, in our neighborhood,


00:22:57.620 --> 00:22:59.180
sort of because it's virtual,


00:22:59.180 --> 00:23:00.380
does that still have meaning?


00:23:00.380 --> 00:23:02.660
We have PyCascades coming up,


00:23:02.660 --> 00:23:05.900
And PI cascades is February 5th and 6th.


00:23:05.900 --> 00:23:07.400
So that's going to be remote.


00:23:07.400 --> 00:23:10.600
So it's not really local until things settle down.


00:23:10.600 --> 00:23:11.780
So people, wherever it can take it.


00:23:11.780 --> 00:23:13.280
Well, it's in our time zone.


00:23:13.280 --> 00:23:14.260
So it's good.


00:23:14.260 --> 00:23:14.780
That's true.


00:23:14.780 --> 00:23:15.960
Time zone still matters.


00:23:15.960 --> 00:23:17.280
It absolutely still matters.


00:23:17.280 --> 00:23:17.860
All right.


00:23:17.860 --> 00:23:20.420
That's it for all of, all of my extras.


00:23:20.420 --> 00:23:23.480
And then we have Patrick out in the audience pointing out PyCon


00:23:23.480 --> 00:23:25.680
Italy is also happening in June.


00:23:25.680 --> 00:23:26.880
So that's fantastic.


00:23:26.880 --> 00:23:27.380
Yeah.


00:23:27.380 --> 00:23:29.620
Oh, awesome.


00:23:29.980 --> 00:23:37.420
So before we get to the joke, I wanted to like ask you this brain teaser that like my daughter brought on the spot.


00:23:37.420 --> 00:23:40.300
So she yeah, I'm totally putting you on the spot.


00:23:40.300 --> 00:23:42.580
So she came home.


00:23:42.580 --> 00:23:43.460
I don't know.


00:23:43.460 --> 00:23:44.660
She's she's in junior high.


00:23:44.660 --> 00:23:46.060
She came home.


00:23:46.060 --> 00:23:47.620
She said, we have this cool brain teaser.


00:23:47.620 --> 00:23:49.860
Just want to ask you, just tell me what you think.


00:23:49.860 --> 00:23:51.820
So it's it's a math problem.


00:23:51.820 --> 00:23:53.420
So I'm going to go out.


00:23:53.420 --> 00:23:55.700
I'm going to buy a baseball bat and a baseball.


00:23:55.860 --> 00:24:00.420
The total for the both the baseball bat and the baseball or $1.10.


00:24:00.420 --> 00:24:01.540
It's pretty cheap.


00:24:01.540 --> 00:24:05.460
Yeah, the difference is the baseball.


00:24:05.460 --> 00:24:09.620
Uhm, the baseball bat is $1 more than the baseball.


00:24:09.620 --> 00:24:11.300
So how much is the baseball?


00:24:11.300 --> 00:24:12.500
So I'm not going to.


00:24:12.500 --> 00:24:16.420
You don't have to answer it right now, but it tripped me up for a little bit.


00:24:16.420 --> 00:24:17.780
I'm like, why is this difficult?


00:24:17.780 --> 00:24:23.540
It turns out it's like 5 cents because of 5 cents plus $1.05 is $1.10.


00:24:23.540 --> 00:24:24.820
But my brain went.


00:24:24.820 --> 00:24:25.620
It's $1.


00:24:25.620 --> 00:24:26.620
It's a dollar and a dollar.


00:24:26.620 --> 00:24:27.420
That's all my dad.


00:24:27.420 --> 00:24:27.720
Yeah.


00:24:27.720 --> 00:24:28.120
Yeah.


00:24:28.120 --> 00:24:29.720
But that's the 90 cent difference.


00:24:29.720 --> 00:24:33.020
I don't know why this is difficult, but it's a fun brain teaser to ask people.


00:24:33.020 --> 00:24:34.820
And be funny.


00:24:34.820 --> 00:24:35.820
Very cool.


00:24:35.820 --> 00:24:37.520
Well, you know what else is funny?


00:24:37.520 --> 00:24:44.820
That feeling of joy that we get as software developers, but is mixed in with


00:24:44.820 --> 00:24:49.620
I kind of remember myself screaming at my computer yesterday, like out loud


00:24:49.620 --> 00:24:51.820
because something was so frustrating.


00:24:51.820 --> 00:24:54.720
I was just like, how is it possible that this is not working?


00:24:54.720 --> 00:24:56.220
Like what is going on?


00:24:56.220 --> 00:24:57.220
It wasn't actually about programming.


00:24:57.220 --> 00:24:58.480
It was with some app or something.


00:24:58.480 --> 00:25:00.320
It was, it's always something else.


00:25:00.320 --> 00:25:00.820
Yeah.


00:25:00.820 --> 00:25:01.480
Yes.


00:25:01.480 --> 00:25:06.180
Sometimes it's my fault, but anyway, so the joke is expressing that feeling.


00:25:06.180 --> 00:25:08.820
And it's the sticker says, I hate programming.


00:25:08.820 --> 00:25:10.120
I hate programming.


00:25:10.120 --> 00:25:11.420
I hate programming.


00:25:11.420 --> 00:25:11.920
It works.


00:25:11.920 --> 00:25:13.020
I love programming.


00:25:13.020 --> 00:25:13.780
This is amazing.


00:25:13.780 --> 00:25:16.280
Look, it's like, it's like childbirth.


00:25:16.280 --> 00:25:18.320
Like you forget all the horror and pain.


00:25:18.320 --> 00:25:19.720
Like, oh, look at my amazing app.


00:25:19.720 --> 00:25:23.320
Like, do you remember like you cried for two days because like you couldn't get it


00:25:23.320 --> 00:25:26.100
to query the database right in production.


00:25:26.100 --> 00:25:26.540
>> Yeah.


00:25:26.540 --> 00:25:29.080
>> You love it because now it works.


00:25:29.080 --> 00:25:31.720
>> I love this. I was there this morning.


00:25:31.720 --> 00:25:35.120
I was fighting Jenkins of trying to create


00:25:35.120 --> 00:25:40.200
a Jenkins job with four repos and different branches.


00:25:40.200 --> 00:25:43.600
I hate Jenkins.


00:25:43.600 --> 00:25:45.960
>> If it works or when it works.


00:25:45.960 --> 00:25:47.280
>> When it works, I'm like, "Sweet,


00:25:47.280 --> 00:25:48.920
I am the smartest person in the world.


00:25:48.920 --> 00:25:50.160
I'm ready to do this all the time."


00:25:50.160 --> 00:25:51.420
>> Fantastic. All right.


00:25:51.420 --> 00:25:53.040
>> Well, it never ends.


00:25:53.040 --> 00:25:56.540
It never ends. We've been doing this a long time and we still have these feelings, don't we?


00:25:56.540 --> 00:26:01.660
>> Yeah. So thanks a lot, Michael, for another great show.


00:26:01.660 --> 00:26:03.660
>> Yeah, you as well. It's always fun.


00:26:03.660 --> 00:26:06.660
Thank you everyone for listening. Catch you all later.


00:26:06.660 --> 00:26:09.320
>> Thanks for listening to Python Bytes.


00:26:09.320 --> 00:26:12.200
Follow the show on Twitter via @pythonbytes.


00:26:12.200 --> 00:26:15.500
That's Python Bytes as in B-Y-T-E-S.


00:26:15.500 --> 00:26:18.660
Get the full show notes over at pythonbytes.fm.


00:26:18.660 --> 00:26:20.840
If you have a news item we should cover,


00:26:20.840 --> 00:26:25.160
just visit Python by set of them and click Submit in the nav bar. We're always on the lookout for


00:26:25.160 --> 00:26:29.720
sharing something cool. If you want to join us for the live recording, just visit the website


00:26:29.720 --> 00:26:35.400
and click live stream to get notified of when our next episode goes live. That's usually happening


00:26:35.400 --> 00:26:41.720
at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Okken. This is


00:26:41.720 --> 00:26:46.360
Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

