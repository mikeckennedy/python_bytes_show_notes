WEBVTT

00:00:00.001 --> 00:00:04.180
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.180 --> 00:00:11.760
your earbuds. This is episode 266, recorded January 12th, 2022. I'm Michael Kennedy.

00:00:11.760 --> 00:00:12.960
And I'm Brian Okken.

00:00:12.960 --> 00:00:19.760
So great to be here again. And we had this whole survey about having guests, Brian. And this week,

00:00:19.760 --> 00:00:21.780
we don't have a guest, it's just you and me, which I think is cool.

00:00:21.780 --> 00:00:22.700
That's all right.

00:00:22.700 --> 00:00:27.820
Yeah. People out there listening, if they really want to be a guest, they can shoot us a message.

00:00:27.820 --> 00:00:32.440
For now, we've got so much cool things, so many cool things to speak about.

00:00:32.440 --> 00:00:36.800
We're going to need like a glossary or an FAQ or I mean, something.

00:00:36.800 --> 00:00:45.080
Yeah. Well, actually, I don't know how I missed this for so long, but there was a tweet by,

00:00:45.080 --> 00:00:50.980
who was it? Trey Hunter had a tweet that it mentioned and actually referred to the glossary.

00:00:50.980 --> 00:00:54.740
And I'm like, what? We have a glossary? I never checked it out before.

00:00:55.600 --> 00:01:01.560
On the python.org website, there at docs.python.org, there's a glossary.

00:01:01.560 --> 00:01:04.960
And it's actually pretty cool. There's a whole bunch of stuff.

00:01:04.960 --> 00:01:09.820
Like if you forget what abstract base classes are, it's there.

00:01:09.820 --> 00:01:13.400
So there's Python stuff, there's programming stuff.

00:01:13.400 --> 00:01:16.460
It even defines what the three arrows mean.

00:01:17.120 --> 00:01:23.400
Yeah. Like the three arrows, that's the first one. Default Python prompted, but also the dot, dot, dot.

00:01:23.400 --> 00:01:26.980
What is that? The ellipses. And two to three.

00:01:26.980 --> 00:01:31.140
See, this threw me off once when I first started. I was like, what's this two to three thing?

00:01:31.140 --> 00:01:35.400
Is this a third party package? And it wasn't obvious to me that it was built in.

00:01:35.500 --> 00:01:41.160
So that's kind of neat. But it shouldn't be an issue anymore because everybody's on Python 3 now, right?

00:01:41.160 --> 00:01:48.820
So anyway, so the glossary, just a shout out that this is here. It's fun. So check it out.

00:01:48.820 --> 00:01:54.300
The other thing that this refers to the other documentation in Python a lot.

00:01:55.840 --> 00:02:01.100
And one of the things it refers to sometimes is the FAQ. And also didn't know that was there.

00:02:01.100 --> 00:02:02.140
We have an FAQ.

00:02:02.140 --> 00:02:09.780
Yeah. And it's split into a whole bunch of stuff like general Python and programming and history and design and stuff.

00:02:09.780 --> 00:02:20.240
And I ran across it because one of the things I looked up when I followed from the glossary was this question of what's the difference between arguments and parameters?

00:02:20.960 --> 00:02:24.880
And it's something that I've always messed up. And now I think I have it.

00:02:24.880 --> 00:02:30.020
Parameters are the names of things that appear in the function definition.

00:02:30.020 --> 00:02:33.040
And the arguments are the values that get passed in.

00:02:33.040 --> 00:02:33.620
Neat.

00:02:33.620 --> 00:02:35.280
Don't know why.

00:02:35.280 --> 00:02:41.340
Sometimes people use them interchangeably, but they kind of talk about different ways of working with that data.

00:02:41.340 --> 00:02:46.000
Yeah. But like, let's say you're new, either new to Python or new to programming.

00:02:46.000 --> 00:02:50.020
Some of these perusals, some of these are great things.

00:02:50.020 --> 00:02:54.440
Like, why did my changing list Y also change list X?

00:02:54.440 --> 00:03:01.320
Well, this will help you understand why there's the naming system in Python and stuff like that.

00:03:01.320 --> 00:03:02.600
So it's pretty great.

00:03:02.600 --> 00:03:04.900
Yeah. It talks about references and all sorts of stuff.

00:03:04.900 --> 00:03:05.780
Yeah. Quite cool.

00:03:05.780 --> 00:03:09.280
I like it. I didn't know that we had it, but yeah, that's cool.

00:03:09.280 --> 00:03:10.520
You did know it was there?

00:03:10.520 --> 00:03:12.180
No, I did not know it was there. That's great.

00:03:12.180 --> 00:03:12.880
Okay. Yeah.

00:03:12.880 --> 00:03:14.740
I mean, I didn't know anything about it.

00:03:15.680 --> 00:03:17.300
So I want to talk about something else.

00:03:17.300 --> 00:03:18.660
I want to talk about any IO.

00:03:19.260 --> 00:03:24.440
As I'm sure you and a lot of listeners know, I'm a big fan of asyncio and async and await.

00:03:24.440 --> 00:03:28.440
I think it really unlocks a lot of potential when you're waiting on things.

00:03:28.440 --> 00:03:33.320
There's been a lot of analysis saying, oh, I did this computational thing and it didn't make it any faster.

00:03:33.320 --> 00:03:33.920
It made it slower.

00:03:33.920 --> 00:03:36.800
It's like, yeah, because it only scales waiting and you're not waiting.

00:03:37.340 --> 00:03:42.820
So when you're talking about waiting, it usually has to do with IO with external systems, right?

00:03:42.820 --> 00:03:44.040
I'm waiting on the file system.

00:03:44.040 --> 00:03:45.100
I'm waiting on the database.

00:03:45.100 --> 00:03:45.940
I'm waiting on whatever.

00:03:45.940 --> 00:03:49.180
So there's this cool library called any IO.

00:03:49.180 --> 00:04:02.860
So I indirectly learned about this from Sebastian Ramirez from FastAPI because he talked about this thing called asyncr, which extends a few things that are ultimately probably going to make it back to any IO.

00:04:03.020 --> 00:04:23.460
So any IO is an asynchronous networking and concurrency library that works on top of either asyncio, which is the one we all know and love, or Trio, which is similar to asyncio, but it has a larger, it has more of an understanding of dependencies between tasks and things.

00:04:23.460 --> 00:04:26.940
How you can say, I'm going to create a set of work that is made up of these tasks.

00:04:26.940 --> 00:04:29.640
And this task is actually a child of that other task.

00:04:29.640 --> 00:04:38.540
So if I cancel the top level one, cancel its children, it's a little bit more complicated, but it solves this structured concurrency story that people sometimes need.

00:04:38.540 --> 00:04:46.040
So you can use this to get some libraries that will do nice things with stuff you might wait on, right?

00:04:46.040 --> 00:04:48.720
So some of the features include there's task groups.

00:04:48.720 --> 00:04:52.820
That's the thing I was describing with parent-child relationship type of things.

00:04:52.820 --> 00:05:09.020
With Trio, it has high-level networking, TCP, UDP, an API for byte streams and object streams, intertask synchronization and communication, like locks and conditions and events and semaphores, worker threads, subprocesses, all kinds of stuff.

00:05:09.160 --> 00:05:13.720
So go over and you can sort of see some real simple ways for it to run.

00:05:13.720 --> 00:05:19.060
So one of the things that's sometimes not entirely obvious is how do you run something on asyncio?

00:05:19.340 --> 00:05:25.300
Because you've got to make sure you've got an asyncio event loop running.

00:05:25.300 --> 00:05:28.020
And if there's already one, you should call get loop.

00:05:28.020 --> 00:05:29.880
But if it's not one, you should create one.

00:05:29.880 --> 00:05:30.540
And so on.

00:05:30.540 --> 00:05:35.780
So this is just, you know, I have an async method, which can be a task and just say, you know, trio.run.

00:05:35.780 --> 00:05:40.300
Or you can run and just say the backend is trio, which is pretty cool.

00:05:40.300 --> 00:05:42.040
So all sorts of cool stuff like that.

00:05:42.080 --> 00:05:46.160
And it just sort of simplifies working with these different things.

00:05:46.160 --> 00:05:54.020
If we go and look at the sockets example, you can just say await async with await connect TCP.

00:05:54.020 --> 00:05:58.660
And that's allow you to do like await receive, await send, and so on.

00:05:58.660 --> 00:06:03.700
So some nice libraries that come out of any IO for doing TCP, UDP, all that kind of stuff.

00:06:03.700 --> 00:06:05.280
You know, the things you would wait on.

00:06:05.280 --> 00:06:05.820
Yeah.

00:06:05.820 --> 00:06:11.880
So if you know you're going to use asyncio, would this buy you anything?

00:06:12.460 --> 00:06:20.560
I think that it has those additional higher level libraries for like talking to TCP and byte streams and stuff like that.

00:06:20.560 --> 00:06:21.860
And also the subprocess.

00:06:21.860 --> 00:06:22.700
Yeah.

00:06:22.700 --> 00:06:26.180
So I think it does have like some utility stuff on top of it.

00:06:26.180 --> 00:06:26.980
But it's pretty cool.

00:06:26.980 --> 00:06:30.380
You can say like await run subprocess, which is pretty cool.

00:06:30.380 --> 00:06:32.320
That's actually, that's really cool.

00:06:32.320 --> 00:06:34.240
I've not seen this one before.

00:06:34.240 --> 00:06:35.680
And that one kind of makes me excited now.

00:06:35.680 --> 00:06:36.160
Yeah.

00:06:36.160 --> 00:06:36.920
That's cool.

00:06:36.920 --> 00:06:37.540
Nice.

00:06:37.540 --> 00:06:37.940
Cool.

00:06:37.940 --> 00:06:39.520
So not a whole lot more to say about it than that.

00:06:39.580 --> 00:06:43.080
But if those are the types of things you're doing, then, you know, come check it out.

00:06:43.080 --> 00:06:43.680
It's a cool library.

00:06:43.680 --> 00:06:45.060
Do you know what else is cool?

00:06:45.060 --> 00:06:45.860
I do not.

00:06:45.860 --> 00:06:46.700
Tell me about it.

00:06:46.700 --> 00:06:49.180
Oh, I thought we were doing something else.

00:06:49.180 --> 00:06:50.800
Wait.

00:06:50.800 --> 00:06:51.360
Oh, yes.

00:06:51.360 --> 00:06:51.800
We do.

00:06:51.800 --> 00:06:56.240
I've got one more thing to talk about before we move on because we have a different number

00:06:56.240 --> 00:06:56.960
of things.

00:06:56.960 --> 00:06:57.740
I'm not sure where we're sliding.

00:06:57.740 --> 00:06:58.420
I'll slide it in here.

00:06:58.820 --> 00:07:03.360
So what else is cool is that this episode is brought to you by Datadog.

00:07:03.360 --> 00:07:05.260
Thank you, Datadog, for supporting the show.

00:07:05.260 --> 00:07:08.360
They've been big supporters of Python Bytes for a really long time.

00:07:08.360 --> 00:07:09.400
So that's fantastic.

00:07:09.400 --> 00:07:11.340
Plus, really great t-shirts.

00:07:11.340 --> 00:07:12.160
Exactly.

00:07:12.160 --> 00:07:13.640
They've got cool t-shirts.

00:07:13.640 --> 00:07:15.720
I mean, I definitely want to get one of those.

00:07:15.720 --> 00:07:18.380
So Datadog does a lot of things.

00:07:18.380 --> 00:07:21.760
One of their things they're focusing on now is real-time monitoring.

00:07:21.760 --> 00:07:26.740
So they have a real-time monitoring platform that unifies metrics, traces, logs into one

00:07:26.740 --> 00:07:28.100
tightly integrated platform.

00:07:28.100 --> 00:07:34.440
Their APM empowers developers to identify anomalies, resolve issues, and improve application

00:07:34.440 --> 00:07:34.980
performance.

00:07:34.980 --> 00:07:38.800
We just finished the Talk Python episode talking about running production.

00:07:38.800 --> 00:07:42.860
And everyone there on the panel was like, you need to make sure you're monitoring in

00:07:42.860 --> 00:07:47.860
production for things that change in your performance profile because you get too much

00:07:47.860 --> 00:07:50.160
data as your infrastructure changes.

00:07:50.420 --> 00:07:52.100
That's the way your app is being used changed.

00:07:52.100 --> 00:07:57.660
It could hit these scenarios and run into problems that you would just never see in testing.

00:07:57.660 --> 00:08:00.480
So if you had Datadog APM, you would have caught it.

00:08:00.480 --> 00:08:06.560
So you can begin collecting stack traces, visualize them as flame graphs, organize them into profile

00:08:06.560 --> 00:08:10.400
types, such as these are the CPU metrics, Ether, IO, and so on.

00:08:10.400 --> 00:08:15.980
Teams can search for specific profiles, correlate them with distributed traces if you're doing microservices,

00:08:15.980 --> 00:08:20.280
and identify slower underperforming code for analysis and optimization.

00:08:20.280 --> 00:08:25.180
Plus, with Datadog's APM live search, you can perform searches across the full stream of

00:08:25.180 --> 00:08:29.020
ingest traces generated by your app over the last 15 minutes.

00:08:29.020 --> 00:08:33.400
So try Datadog APM for free with a 14-day trial.

00:08:33.400 --> 00:08:36.660
And if you do, you get that t-shirt that Brian mentioned.

00:08:36.660 --> 00:08:41.460
So just go to pythonbytes.fm/Datadog or click the link in your podcast player show

00:08:41.460 --> 00:08:43.020
notes or in this chapter.

00:08:43.020 --> 00:08:44.740
Remember, we talked about chapters and links.

00:08:44.740 --> 00:08:46.320
I'll have this have a chapter as well.

00:08:46.320 --> 00:08:49.020
So thank you, Datadog, for supporting the show.

00:08:49.020 --> 00:08:51.660
Now, let's talk about your next item, Brian.

00:08:51.660 --> 00:08:55.820
Yeah, I think it's Vax, Vax, Vax.

00:08:55.820 --> 00:08:56.360
I don't know.

00:08:56.360 --> 00:08:56.580
Vax?

00:08:56.580 --> 00:08:57.400
Vax.

00:08:57.400 --> 00:08:58.080
Oh.

00:08:59.180 --> 00:09:03.440
There's people are gaining traction for the idea of putting a pronunciation on a GitHub

00:09:03.440 --> 00:09:05.460
repo for projects that are not obvious.

00:09:05.460 --> 00:09:06.080
Yeah.

00:09:06.080 --> 00:09:06.840
I saw this on Twitter.

00:09:06.840 --> 00:09:07.440
Let's do it.

00:09:07.440 --> 00:09:08.040
Let's make it happen.

00:09:08.040 --> 00:09:10.700
So this was suggested by Glenn Ferguson.

00:09:10.700 --> 00:09:18.980
This is a library that's a high-performance Python library for lazy out-of-core data frames.

00:09:18.980 --> 00:09:19.760
Hmm.

00:09:19.760 --> 00:09:21.220
I don't know what out-of-core is.

00:09:21.220 --> 00:09:23.600
So I looked it up in a glossary.

00:09:23.600 --> 00:09:27.720
After the FAQ.

00:09:28.080 --> 00:09:28.320
Yeah.

00:09:28.320 --> 00:09:34.540
Out-of-core typically refers to processing data that is too large to fit in the computer's

00:09:34.540 --> 00:09:34.880
memory.

00:09:34.880 --> 00:09:36.720
So yeah, that's what this is.

00:09:36.720 --> 00:09:43.680
So for data processing, often you're trying to do some analysis, do some statistics, maybe

00:09:43.680 --> 00:09:45.240
explore the data a little bit.

00:09:45.240 --> 00:09:50.320
But you don't want to read it because they're huge data sets and you've got like maybe a limited

00:09:50.320 --> 00:09:50.780
computer.

00:09:50.780 --> 00:09:54.960
And so that's what this is set up to do.

00:09:55.480 --> 00:09:57.420
The main features of it.

00:09:57.420 --> 00:09:59.240
So you've got like big data sets.

00:09:59.240 --> 00:10:04.620
It also has statistics like mean and sum and count and standard deviation, et cetera.

00:10:04.620 --> 00:10:10.760
But it also has some visualizations that are sped up from how they've sped things up and not

00:10:10.760 --> 00:10:11.600
kept things in memory.

00:10:11.600 --> 00:10:19.660
And they're using memory mapping and some tricks inside to try to avoid any memory copies and try

00:10:19.660 --> 00:10:22.080
to do it as lazy as computation as possible.

00:10:22.080 --> 00:10:24.600
And this is actually pretty impressive.

00:10:24.600 --> 00:10:29.820
I was watching some of this, some of the demos.

00:10:30.020 --> 00:10:39.020
So there's a scipy 2019 video where it's the person that started this library, which is now a company

00:10:39.020 --> 00:10:41.720
also, but does a demo of this.

00:10:41.720 --> 00:10:44.880
And it's really impressive how fast things are.

00:10:44.880 --> 00:10:46.200
He's pulling things up.

00:10:46.200 --> 00:10:53.740
Because of the memory mapping, you can even have multiple, you know, multiple Jupyter Notebooks.

00:10:53.960 --> 00:10:54.540
Yeah, that's it.

00:10:54.540 --> 00:10:57.440
Multiple Jupyter Notebooks looking at the same huge data set.

00:10:57.440 --> 00:11:00.380
And it doesn't slow things down even when things are working on it.

00:11:00.380 --> 00:11:01.060
It's pretty neat.

00:11:01.060 --> 00:11:05.720
So I definitely think this is worth checking out.

00:11:05.720 --> 00:11:09.040
One of the things on the ReadMe that I like is the key features.

00:11:09.040 --> 00:11:14.000
So it's an instant opening of huge data files because it's memory mapping the data file.

00:11:14.000 --> 00:11:14.940
It actually doesn't read.

00:11:14.940 --> 00:11:17.140
It doesn't do any reads when you read it.

00:11:17.540 --> 00:11:22.100
But when you pull some data out, it does lazy reads, jumps ahead.

00:11:22.100 --> 00:11:23.400
And it's pretty impressive.

00:11:23.400 --> 00:11:30.160
So that also has an expression system so that it's kind of, there is a little bit of a, so

00:11:30.160 --> 00:11:31.880
lazy transforms of data.

00:11:31.880 --> 00:11:33.040
So that's neat.

00:11:33.040 --> 00:11:38.620
Out of core data frames, like we said, fast group buy and aggregations, a whole bunch of

00:11:38.620 --> 00:11:41.660
the fast and efficient joins are interesting.

00:11:41.660 --> 00:11:48.060
I was watching, looking at another comparison of pandas and Dask and other things versus

00:11:48.060 --> 00:11:48.740
Vax.

00:11:48.740 --> 00:11:55.460
And it, the joins of huge tables are pretty fast and seamless with here.

00:11:55.460 --> 00:11:58.260
And those will blow up some projects.

00:11:58.260 --> 00:12:02.400
So yeah, this is, yes, it is similar to Dask.

00:12:02.400 --> 00:12:06.220
Somebody asked, lazy, lazy like Dask.

00:12:06.220 --> 00:12:06.560
Yes.

00:12:06.560 --> 00:12:08.500
But that's a good thing.

00:12:08.500 --> 00:12:09.040
Yeah.

00:12:09.040 --> 00:12:10.920
Oops.

00:12:11.600 --> 00:12:15.140
But it, yeah, a bunch of fun things.

00:12:15.140 --> 00:12:18.760
It's good to have, it isn't the same as Dask.

00:12:18.760 --> 00:12:22.860
So it's worth checking out to see if maybe this one might be a good fit for you.

00:12:22.860 --> 00:12:23.560
Yeah, it's cool.

00:12:23.560 --> 00:12:26.060
It's the lazy that makes the magic, right?

00:12:26.060 --> 00:12:27.480
You don't have to load it all from disk.

00:12:27.480 --> 00:12:28.680
You can distribute it.

00:12:28.680 --> 00:12:30.220
There's all kinds of interesting things.

00:12:30.220 --> 00:12:35.240
In the a billion sample per row operations per second.

00:12:35.240 --> 00:12:37.040
That sounds, that sounds pretty good.

00:12:37.040 --> 00:12:37.560
Yeah.

00:12:37.560 --> 00:12:39.780
It's watching the demo.

00:12:39.780 --> 00:12:41.540
It's incredible how fast he's.

00:12:41.540 --> 00:12:44.380
He's popping up things and loading.

00:12:44.380 --> 00:12:49.580
Even to be able to visualize things by pulling out samples out of the set.

00:12:49.580 --> 00:12:50.700
Wait a minute, Brian.

00:12:50.700 --> 00:12:54.800
I heard people told me that Python was slow, so it didn't make sense to do this kind of stuff with it.

00:12:54.800 --> 00:12:55.500
What's going on here?

00:12:57.500 --> 00:12:58.760
No, no, no, no.

00:12:58.760 --> 00:12:59.800
Python's fast.

00:12:59.800 --> 00:13:00.360
I know.

00:13:00.360 --> 00:13:01.860
Pick the right libraries.

00:13:01.860 --> 00:13:02.600
All right.

00:13:03.240 --> 00:13:07.040
One of the things that is definitely well known in the Python world is Django.

00:13:07.040 --> 00:13:15.120
I've even had people tell me I came to become a Django developer and so I had to learn Python, which is a really interesting perspective.

00:13:15.120 --> 00:13:15.740
Yeah.

00:13:15.740 --> 00:13:21.920
I want to talk about the Django developer survey results for the 2021 survey because that just recently happened.

00:13:21.920 --> 00:13:24.840
So I'll highlight a couple of things that are interesting over here.

00:13:25.000 --> 00:13:27.620
One of the questions was, what is the main reason you use Django?

00:13:27.620 --> 00:13:30.420
Is it both for work, personal, or for work?

00:13:30.660 --> 00:13:33.200
Only 15% said just for work.

00:13:33.200 --> 00:13:35.540
Does that seem like a lower number than you expect?

00:13:35.540 --> 00:13:36.180
Yeah.

00:13:36.180 --> 00:13:36.760
Yeah.

00:13:36.760 --> 00:13:41.620
I thought more people were just like, they'd go to work and do Django and they'd go home and they'd, I don't know, watch Game of Thrones or something.

00:13:41.620 --> 00:13:46.700
But Django developers love it and they use it a lot for all sorts of things.

00:13:46.700 --> 00:13:51.580
So by far, the biggest group here, 66% is for using it for both.

00:13:51.580 --> 00:13:53.400
So that stood out to me.

00:13:53.400 --> 00:13:57.520
Another one that's interesting is how many people are on the latest version.

00:13:58.020 --> 00:14:02.680
So web apps often sort of get stuck in the past because once you get them up and running, like people don't want to touch it.

00:14:02.680 --> 00:14:09.780
But 75% of the people are using the 3.2, which at the time of asking, I believe, was the latest version.

00:14:09.780 --> 00:14:10.400
Okay.

00:14:10.400 --> 00:14:12.320
I'm like, I thought we were up to four now.

00:14:12.320 --> 00:14:13.120
What's going on there?

00:14:13.120 --> 00:14:14.100
I think four is in beta.

00:14:14.100 --> 00:14:15.180
I'm not 100% sure.

00:14:15.180 --> 00:14:16.260
I don't think it's totally released.

00:14:16.260 --> 00:14:18.420
But yeah, this is still, remember, it's from 2021.

00:14:18.420 --> 00:14:19.120
Okay.

00:14:19.120 --> 00:14:19.480
2021.

00:14:19.480 --> 00:14:26.740
And then also Django has this concept of the latest stable release and then a long-term support release.

00:14:26.740 --> 00:14:33.960
So if you go to just the latest stable release and it's not LTS, you may have to upgrade sooner if you want security fixes and so on.

00:14:33.960 --> 00:14:38.580
And yet 71% of the people use the latest stable release because they're upgrading frequently, I'm guessing.

00:14:38.580 --> 00:14:44.780
And then 27% are on the latest LTS and 2% are just like, how do I upgrade this again?

00:14:44.780 --> 00:14:45.360
I don't know.

00:14:45.360 --> 00:14:47.440
But that's pretty interesting.

00:14:47.440 --> 00:14:49.760
And then the next question was how often.

00:14:49.880 --> 00:14:53.280
So 44% of the people upgrade every stable release.

00:14:53.280 --> 00:14:55.060
Other people less so.

00:14:55.060 --> 00:14:55.960
And it kind of breaks down.

00:14:55.960 --> 00:14:57.100
5%.

00:14:57.100 --> 00:14:58.980
I use an unsupported version of Django.

00:14:58.980 --> 00:14:59.980
I'm okay with that.

00:14:59.980 --> 00:15:11.020
Databases for people doing Django is a very strong bias to use a relational database because much of the magic of Django depends upon the Django models, right?

00:15:11.020 --> 00:15:13.760
Like the admin section is driven by that and so many things.

00:15:13.760 --> 00:15:14.880
And those are all relational.

00:15:14.880 --> 00:15:21.300
So with that in mind, the most common database, 77% of the time is Postgres SQL, which is cool.

00:15:21.300 --> 00:15:24.500
And then does number two there surprise you, Brian?

00:15:24.500 --> 00:15:25.540
No, not really.

00:15:25.540 --> 00:15:26.060
SQLite.

00:15:26.060 --> 00:15:26.680
Awesome.

00:15:26.680 --> 00:15:27.360
Yeah.

00:15:27.580 --> 00:15:34.460
If you got very simple deployment stories, you're just going to put it on one server, not much data.

00:15:34.460 --> 00:15:36.780
You just want to need something relational, SQLite.

00:15:36.780 --> 00:15:38.800
Well, a lot of internal tools and stuff too.

00:15:38.800 --> 00:15:39.120
Exactly.

00:15:39.120 --> 00:15:43.500
I mean, you wouldn't run like a major tech company on SQLite.

00:15:43.500 --> 00:15:46.460
Get away with it without scars and tears.

00:15:46.460 --> 00:15:49.900
But, you know, for simple internal apps, that might just be what you need.

00:15:49.900 --> 00:15:52.180
You're going to make some SQLite enemies by saying that.

00:15:52.680 --> 00:15:57.800
But if you had 100,000 users concurrently using SQLite, that might be bad.

00:15:57.800 --> 00:16:02.700
Oh, somebody else said possibly because SQLite is the default setting.

00:16:02.700 --> 00:16:03.560
Yeah.

00:16:03.560 --> 00:16:05.600
Certainly, that's a big push.

00:16:05.600 --> 00:16:09.600
The other one is, do you do caching?

00:16:09.600 --> 00:16:16.000
So caching is another layer between the database and your web app where you get the database stuff back

00:16:16.000 --> 00:16:20.720
and then you stash it into memory somewhere so that you don't have to do queries again.

00:16:21.560 --> 00:16:23.700
So they said, do you do that?

00:16:23.700 --> 00:16:24.840
And if so, what do you use?

00:16:24.840 --> 00:16:26.520
47% Redis.

00:16:26.520 --> 00:16:28.660
43% I don't do that.

00:16:28.660 --> 00:16:31.980
And then the only other really notable thing is memcached.

00:16:31.980 --> 00:16:34.860
So interesting there.

00:16:34.860 --> 00:16:38.620
And I guess people, if they're really interested, they come through and look.

00:16:38.620 --> 00:16:41.160
There's a lot of, I don't want to go through it because there's so many details,

00:16:41.160 --> 00:16:43.060
but it's like, what are your favorite components?

00:16:43.060 --> 00:16:48.940
Like models or admins or auth or what contrib apps do you find most useful?

00:16:48.940 --> 00:16:50.520
Like humanize or whatever.

00:16:50.680 --> 00:16:52.100
So pretty interesting.

00:16:52.100 --> 00:16:53.640
No surprise.

00:16:53.640 --> 00:16:57.100
People are using Django templates, not Jinja as their main templates.

00:16:57.100 --> 00:17:03.780
And then look, it's a race between pytest and UnitTest as the top two most common frameworks.

00:17:03.780 --> 00:17:07.500
With pytest above UnitTest, that's pretty cool.

00:17:07.500 --> 00:17:09.600
Especially since UnitTest is the default.

00:17:09.600 --> 00:17:10.220
Yeah.

00:17:10.220 --> 00:17:10.940
Yeah, absolutely.

00:17:10.940 --> 00:17:11.800
Let's see.

00:17:11.800 --> 00:17:13.800
I'll just wrap it up with some front-end stuff.

00:17:14.440 --> 00:17:16.780
What JavaScript front-end frameworks do you most use?

00:17:16.780 --> 00:17:17.680
jQuery.

00:17:17.680 --> 00:17:18.860
Number one.

00:17:18.860 --> 00:17:21.400
And I don't mean that with a negative way.

00:17:21.400 --> 00:17:28.580
Like sometimes you just got some simple problems and you don't need a whole CLI to build a spot to like, you know, focus the text box.

00:17:28.580 --> 00:17:29.200
All right.

00:17:29.200 --> 00:17:31.660
React is tied at 37% as well.

00:17:31.660 --> 00:17:32.880
And then Vue and then Angular.

00:17:33.080 --> 00:17:35.120
And then, wow, HTMX made the list.

00:17:35.120 --> 00:17:35.760
Look at this.

00:17:35.760 --> 00:17:37.160
That's pretty cool, actually.

00:17:37.160 --> 00:17:39.600
That's brand new shininess getting in there.

00:17:39.600 --> 00:17:40.120
That's pretty cool.

00:17:40.120 --> 00:17:41.360
5%, but still.

00:17:41.360 --> 00:17:41.880
Yeah.

00:17:42.200 --> 00:17:46.700
And then CSS, we got Bootstrap way out front and then Tailwind and then Pure CSS.

00:17:46.700 --> 00:17:47.440
All right.

00:17:47.440 --> 00:17:49.520
So that's the survey results.

00:17:49.520 --> 00:17:50.440
Pretty interesting.

00:17:50.440 --> 00:17:51.160
Nice.

00:17:51.160 --> 00:17:52.100
All right.

00:17:52.100 --> 00:17:52.840
What do you got next for us?

00:17:52.840 --> 00:17:56.300
Next, we've got more extras.

00:17:56.300 --> 00:17:57.420
We've got our extras.

00:17:57.420 --> 00:17:57.740
Okay.

00:17:57.740 --> 00:17:58.580
Yes.

00:17:58.580 --> 00:18:01.060
Extra, extra, extra, extra, extra, extra.

00:18:01.060 --> 00:18:03.080
So I've got so many extras.

00:18:03.080 --> 00:18:05.460
I decided to make it one of my topics.

00:18:05.460 --> 00:18:09.060
Brian, got anything else before I go on another rant?

00:18:09.060 --> 00:18:11.640
No, I'm just ready to listen to all these extras.

00:18:12.080 --> 00:18:12.240
All right.

00:18:12.240 --> 00:18:13.120
I got a bunch of good stuff.

00:18:13.120 --> 00:18:17.860
So don't let the bad guys into your web apps.

00:18:17.860 --> 00:18:21.020
Django just had secured your releases for 4.01.

00:18:21.020 --> 00:18:21.780
Sorry.

00:18:21.780 --> 00:18:23.040
4.01.

00:18:23.040 --> 00:18:25.440
3.2 and 2.66.

00:18:25.440 --> 00:18:27.220
Oh, does that mean 4.0 is out?

00:18:27.220 --> 00:18:27.880
Yeah.

00:18:27.880 --> 00:18:28.520
It does look well.

00:18:28.520 --> 00:18:29.420
Nobody's using it.

00:18:29.420 --> 00:18:29.860
Yeah.

00:18:29.860 --> 00:18:31.860
Well, they didn't use it in the past when it wasn't out.

00:18:31.860 --> 00:18:40.260
Paul Everett and I teamed up to create a course over at Talk Python called Static Sites with Sphinx and Markdown.

00:18:40.260 --> 00:18:41.880
So this course is free.

00:18:41.960 --> 00:18:42.940
Everyone can go take it.

00:18:42.940 --> 00:18:44.140
All you got to do is have an account.

00:18:44.140 --> 00:18:48.300
You can go here and it teaches you how to do Markdown and Sphinx and generate static sites.

00:18:48.300 --> 00:18:57.120
There's a cool little demo app that we build over here that you can go and do search and look around and see how you document your code and do all kinds of stuff.

00:18:57.220 --> 00:19:04.800
It's nothing too complicated, but sort of neat to see how to use Markdown with Sphinx because typically Sphinx is about restructured text.

00:19:04.800 --> 00:19:06.880
So check out the course over there.

00:19:06.880 --> 00:19:07.980
I'll put that in the show notes.

00:19:08.460 --> 00:19:13.680
I'm going to definitely check that out because I've got a project that I wanted to use Sphinx for, but I was a little intimidated.

00:19:13.680 --> 00:19:14.480
Cool.

00:19:14.480 --> 00:19:14.760
Yeah.

00:19:15.220 --> 00:19:16.580
Paul does a great job with it.

00:19:16.580 --> 00:19:19.300
So, and it's only an hour and 25 minutes or something.

00:19:19.300 --> 00:19:21.120
So it's not a huge investment in time.

00:19:21.120 --> 00:19:30.360
Something that's bothered me basically ever since USB-C, what is this, four years or something, is I need more ports on my computer.

00:19:30.860 --> 00:19:36.440
And I want them to be USB ports because I have USB things these days because I want them to go into the ports that I already have.

00:19:36.440 --> 00:19:46.100
Until Thunderbolt 4, you've not been able to get a dock that has more than one USB-C or Thunderbolt port, which is super weird to me.

00:19:46.100 --> 00:19:54.940
But recently they've come out with Thunderbolt 4 and I just got this thing called the CalDigit Thunderbolt 4 USB 4 Element Hub.

00:19:54.940 --> 00:19:56.620
Oh man, this thing is fantastic.

00:19:56.620 --> 00:20:11.540
Brian, I'm talking to you on my computer here and I have my 4K monitor, my 1080p camera, my microphone, my stream deck, the lights, keyboard, mouse, track, like seven different things, including the monitor, plugged in with one cable through this thing.

00:20:11.540 --> 00:20:13.060
That's really pretty cool.

00:20:13.060 --> 00:20:13.940
And so sweet.

00:20:13.940 --> 00:20:23.240
So basically it has on the front, it has three USB-C Thunderbolt 4 and a power in.

00:20:23.660 --> 00:20:30.860
And then on the side, it has the Thunderbolt that goes to the computer and then also four USB, high speed USB-A, but the good ones.

00:20:30.860 --> 00:20:36.760
So really, really cool if you need to expand out your new-ish computer.

00:20:36.760 --> 00:20:38.820
What are you using to plug into the monitor then?

00:20:38.820 --> 00:20:43.280
I have a Thunderbolt 2 DisplayPort adapter.

00:20:43.280 --> 00:20:49.200
And so that way, if I come with my new MacBook, I can just unplug one thing from my mini, click it over, and then boom, I'm ready to go.

00:20:49.200 --> 00:20:50.260
Everything's configured.

00:20:50.260 --> 00:20:51.760
I'm going to get one of these then.

00:20:51.760 --> 00:20:53.240
Yeah, they're not super cheap.

00:20:53.240 --> 00:20:58.320
They've been out for about four or five months, but they've been sold out supply chains.

00:20:58.320 --> 00:21:01.920
You know, what time of, what's going on with supply chains and everything.

00:21:01.920 --> 00:21:02.940
But they finally came out.

00:21:02.940 --> 00:21:03.500
They're on Amazon.

00:21:03.500 --> 00:21:04.760
So I linked to it over on Amazon.

00:21:04.760 --> 00:21:11.280
I also linked to this video by Doc Rock talking about like what the heck is this thing and why is it different?

00:21:11.280 --> 00:21:11.840
All right.

00:21:11.840 --> 00:21:17.740
I also tweeted about how we use the stream deck to do our live stream, which was fun.

00:21:17.740 --> 00:21:22.540
So I shared a bunch of pictures of that, like how we like put the website.

00:21:22.540 --> 00:21:28.100
So it says how it's streaming, how we tweet automatically, how we do the sharing and all that kind of stuff.

00:21:28.100 --> 00:21:32.180
I'm now going to be working on how to use that thing for software development.

00:21:32.180 --> 00:21:34.300
Like how do you use it for Jupyter Notebooks?

00:21:34.300 --> 00:21:38.360
So every button on the stream deck, which is 14 free buttons, basically.

00:21:38.360 --> 00:21:42.760
Like how, what are the 14 Jupyter operations you'd like to have?

00:21:42.760 --> 00:21:46.240
Like run all cells could be a button or, you know, format with black could be a button.

00:21:46.240 --> 00:21:47.140
All sorts of stuff.

00:21:47.140 --> 00:21:47.980
So very cool.

00:21:47.980 --> 00:21:51.280
Oh, you can just have a black button with no logo.

00:21:51.280 --> 00:21:51.940
Yes.

00:21:51.940 --> 00:21:52.440
Yes.

00:21:52.440 --> 00:21:54.180
That should absolutely be black as well.

00:21:54.180 --> 00:21:56.140
So anyway, people are interested in that.

00:21:56.140 --> 00:21:56.620
That's there.

00:21:57.260 --> 00:22:00.180
I did a talk at PyBay quite a while ago.

00:22:00.180 --> 00:22:02.080
Now the talk is out.

00:22:02.080 --> 00:22:07.400
Carson was kind enough to retweet that and pointed out that, hey, the talk is actually out.

00:22:07.400 --> 00:22:12.220
So I'm linking to my PyBay talk, which was an in-person talk at a conference.

00:22:12.220 --> 00:22:12.920
Imagine that.

00:22:12.920 --> 00:22:13.380
Wow.

00:22:13.380 --> 00:22:15.700
In San Francisco, that was really fun.

00:22:15.700 --> 00:22:16.660
People can check that out.

00:22:17.160 --> 00:22:22.080
Speaking of conferences, we are a media sponsor of Python Web Conference.

00:22:22.080 --> 00:22:24.540
And so you can definitely check that out.

00:22:24.540 --> 00:22:27.400
This is one of the, honestly, becoming one of the bigger online conferences.

00:22:27.400 --> 00:22:29.340
It's five days all day.

00:22:29.340 --> 00:22:32.240
You know, a lot of these online conferences are like, oh, half day, a little thing here.

00:22:32.240 --> 00:22:35.540
So a lot of tracks, a lot of things going on with the Python Web Conference.

00:22:35.540 --> 00:22:37.340
I'm also speaking there as well.

00:22:37.340 --> 00:22:37.980
Are you speaking there?

00:22:37.980 --> 00:22:38.540
No.

00:22:38.540 --> 00:22:41.340
I'm going to have to get you pytesting something up there.

00:22:41.340 --> 00:22:43.640
Well, I should probably do some web stuff.

00:22:43.640 --> 00:22:44.440
Yeah, absolutely.

00:22:44.440 --> 00:22:44.520
Absolutely.

00:22:46.040 --> 00:22:48.540
And so there's a code that you can use.

00:22:48.540 --> 00:22:53.760
It's in the show notes, Python Bytes at PwC2022.

00:22:53.760 --> 00:22:55.260
And I'll give you 15% off.

00:22:55.260 --> 00:23:00.020
Also, in our neighborhood, sort of, because it's virtual, does that still have meaning?

00:23:00.020 --> 00:23:02.660
We have PyCascades coming up.

00:23:02.660 --> 00:23:05.940
And PyCascades is February 5th and 6th.

00:23:05.940 --> 00:23:07.340
So that's going to be remote.

00:23:07.340 --> 00:23:10.560
So it's not really local until things settle down.

00:23:10.560 --> 00:23:11.820
So people, wherever, can take it.

00:23:11.820 --> 00:23:13.160
Well, it's in our time zone.

00:23:13.160 --> 00:23:14.220
So it's good.

00:23:14.220 --> 00:23:14.760
That's true.

00:23:14.760 --> 00:23:15.880
Time zone still matters.

00:23:15.880 --> 00:23:17.180
It absolutely still matters.

00:23:17.180 --> 00:23:17.860
All right.

00:23:17.860 --> 00:23:20.280
That's it for all of my extras.

00:23:20.280 --> 00:23:25.580
And we have Patrick out in the audience pointing out PyCon Italy is also happening in June.

00:23:25.580 --> 00:23:26.800
So that's fantastic.

00:23:26.800 --> 00:23:27.360
Yeah.

00:23:27.360 --> 00:23:29.520
Awesome.

00:23:29.520 --> 00:23:36.680
So before we get to the joke, I wanted to ask you this brain teaser that my daughter brought up.

00:23:36.680 --> 00:23:37.280
I'm on the spot.

00:23:37.760 --> 00:23:40.220
So she, yeah, I'm totally putting you on the spot.

00:23:40.220 --> 00:23:42.520
So she came home.

00:23:42.520 --> 00:23:43.460
I don't know.

00:23:43.460 --> 00:23:44.620
She's in junior high.

00:23:44.620 --> 00:23:46.040
She came home.

00:23:46.040 --> 00:23:47.440
She said, we have this cool brain teaser.

00:23:47.440 --> 00:23:49.800
I just want to ask you, just tell me what you think.

00:23:49.800 --> 00:23:51.700
So it's a math problem.

00:23:52.100 --> 00:23:53.380
So I'm going to go out.

00:23:53.380 --> 00:23:55.440
I'm going to buy a baseball bat and a baseball.

00:23:55.440 --> 00:24:00.220
The total for both the baseball bat and the baseball are $1.10.

00:24:00.220 --> 00:24:01.360
It's pretty cheap.

00:24:01.360 --> 00:24:01.800
Yeah.

00:24:02.200 --> 00:24:09.340
The difference is the baseball bat is $1 more than the baseball.

00:24:09.340 --> 00:24:10.860
So how much is the baseball?

00:24:10.860 --> 00:24:13.980
So I'm not going to, you don't have to answer it right now.

00:24:13.980 --> 00:24:16.480
But it tripped me up for a little bit.

00:24:16.480 --> 00:24:17.640
I'm like, why is this difficult?

00:24:17.640 --> 00:24:23.340
It turns out it's like $0.05 because $0.05 plus $1.05 is $1.10.

00:24:23.340 --> 00:24:25.500
But my brain went, it's $1.

00:24:25.500 --> 00:24:26.980
It's $1 and $0.10.

00:24:26.980 --> 00:24:27.420
That's what mine said.

00:24:27.420 --> 00:24:27.680
Yeah.

00:24:27.680 --> 00:24:28.080
Yeah.

00:24:28.080 --> 00:24:29.660
But that's a $0.90 difference.

00:24:29.660 --> 00:24:33.020
I don't know why this is difficult, but it's a fun brain teaser to ask people.

00:24:33.020 --> 00:24:33.800
Indeed.

00:24:33.800 --> 00:24:34.800
Ha, funny.

00:24:34.800 --> 00:24:35.800
Very cool.

00:24:35.800 --> 00:24:37.520
Well, you know what else is funny?

00:24:37.520 --> 00:24:42.160
That feeling of joy that we get as software developers.

00:24:42.160 --> 00:24:42.820
Yeah.

00:24:42.820 --> 00:24:49.260
But it's mixed in with, I kind of remember myself screaming at my computer yesterday, like out

00:24:49.260 --> 00:24:51.840
loud, because something was so frustrating.

00:24:51.840 --> 00:24:54.720
I was just like, how is it possible that this is not working?

00:24:54.720 --> 00:24:55.960
Like, what is going on?

00:24:55.960 --> 00:24:57.220
It wasn't actually about programming.

00:24:57.220 --> 00:24:58.440
It was with some app or something.

00:24:58.440 --> 00:25:00.320
It's always something else.

00:25:00.320 --> 00:25:00.600
Yeah.

00:25:00.600 --> 00:25:01.160
Yes.

00:25:01.160 --> 00:25:02.480
Sometimes it's my fault.

00:25:02.480 --> 00:25:05.880
But anyway, so the joke is expressing that feeling.

00:25:05.880 --> 00:25:08.360
And it's the sticker says, I hate programming.

00:25:08.360 --> 00:25:09.760
I hate programming.

00:25:09.760 --> 00:25:11.020
I hate programming.

00:25:11.020 --> 00:25:11.880
It works.

00:25:11.880 --> 00:25:12.940
I love programming.

00:25:12.940 --> 00:25:13.760
This is amazing.

00:25:13.760 --> 00:25:14.520
Look at it.

00:25:14.520 --> 00:25:16.260
It's like, it's like childbirth.

00:25:16.260 --> 00:25:18.340
Like you forget all the horror and pain.

00:25:18.340 --> 00:25:19.780
Like, oh, look at my amazing app.

00:25:19.840 --> 00:25:24.120
Like, do you remember that you cried for two days because like you couldn't get it to query

00:25:24.120 --> 00:25:25.760
the database right in production.

00:25:25.760 --> 00:25:26.460
Yeah.

00:25:26.460 --> 00:25:27.340
And you love, right.

00:25:27.340 --> 00:25:28.820
But you love it because now it works.

00:25:28.820 --> 00:25:29.960
I love this.

00:25:29.960 --> 00:25:31.640
I was there this morning.

00:25:31.820 --> 00:25:39.480
I was like fighting Jenkins of trying to create a Jenkins job with four repos and different

00:25:39.480 --> 00:25:39.900
branches.

00:25:39.900 --> 00:25:46.700
And I just like, I hate Jenkins, but if it works or when it works, when it works, I'm

00:25:46.700 --> 00:25:47.220
like, sweet.

00:25:47.220 --> 00:25:48.720
I am the smartest person in the world.

00:25:48.720 --> 00:25:50.180
I'm ready to do this all the time.

00:25:50.180 --> 00:25:50.740
Fantastic.

00:25:50.740 --> 00:25:51.380
All right.

00:25:51.440 --> 00:25:53.000
Well, it never ends.

00:25:53.000 --> 00:25:53.740
It never ends.

00:25:53.740 --> 00:25:56.400
We've been doing this a long time and we still have these feelings, don't we?

00:25:56.400 --> 00:25:56.900
Yeah.

00:25:56.900 --> 00:25:58.920
So, well, yeah.

00:25:58.920 --> 00:26:01.480
So thanks a lot, Michael, for another great show.

00:26:01.480 --> 00:26:02.000
Yeah.

00:26:02.000 --> 00:26:02.700
You as well.

00:26:02.700 --> 00:26:03.580
It's always fun.

00:26:03.580 --> 00:26:04.620
Thank you everyone for listening.

00:26:04.620 --> 00:26:05.560
Catch you all later.

00:26:05.560 --> 00:26:09.120
Thanks for listening to Python Bytes.

00:26:09.120 --> 00:26:11.920
Follow the show on Twitter via at Python Bytes.

00:26:11.920 --> 00:26:15.120
That's Python Bytes as in B-Y-T-E-S.

00:26:15.120 --> 00:26:18.300
Get the full show notes over at Pythonbytes.fm.

00:26:18.620 --> 00:26:23.520
If you have a news item we should cover, just visit Pythonbytes.fm and click submit in the

00:26:23.520 --> 00:26:23.940
nav bar.

00:26:23.940 --> 00:26:26.080
We're always on the lookout for sharing something cool.

00:26:26.080 --> 00:26:30.940
If you want to join us for the live recording, just visit the website and click live stream

00:26:30.940 --> 00:26:33.840
to get notified of when our next episode goes live.

00:26:33.840 --> 00:26:38.420
That's usually happening at noon Pacific on Wednesdays over at YouTube.

00:26:38.420 --> 00:26:42.360
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:26:42.360 --> 00:26:46.080
Thank you for listening and sharing this podcast with your friends and colleagues.

