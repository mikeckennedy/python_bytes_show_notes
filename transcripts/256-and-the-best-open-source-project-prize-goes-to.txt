00:00:00 - Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 256, or as Anthony Shaw likes to put it, two to the eighth, recorded October 27th, 2021.

00:00:12 Again, unless you're Anthony, which is probably like a totally different day in the future 'cause he's in Australia.

00:00:16 I'm Michael Kennedy.

00:00:17 - And I'm Brian Akin.

00:00:19 - And I'm Anthony Shaw, hello.

00:00:20 - Hey, hey, Anthony.

00:00:22 How is the 28th?

00:00:24 Is the next day gonna be good or things are okay?

00:00:26 - Yeah, it's pretty sunny today, it's nice.

00:00:28 - Yeah, right on.

00:00:29 - Okay, so the world hangs together for one more day.

00:00:32 Fantastic.

00:00:33 You've been here before.

00:00:34 You've been on Talk Python a bunch of times, friend of the show, all sorts of stuff.

00:00:38 So I'm sure many people know you, but just tell people a bit about yourself.

00:00:41 You're doing more techie things these days.

00:00:44 You're a little closer to the code, maybe?

00:00:47 - Yeah, so earlier this year, I started working at Microsoft and worked with Nina Zakharenko on Python inside Microsoft.

00:00:55 And yeah, a lot of what I'm doing at the moment It's just running around, breaking things, sometimes on purpose.

00:01:02 Yeah, just saying how we can improve our experience and working with VS code and Azure and a whole bunch of other stuff.

00:01:08 So yeah, it's been a while since the last episode was episode 100, I think.

00:01:13 Wow, you're hitting the big numbers.

00:01:15 So yeah, this two to the eighth is a significant milestone, I think.

00:01:20 It is.

00:01:21 It's pretty cool.

00:01:22 Yeah, awesome.

00:01:23 Well, we're happy to have you here.

00:01:24 Thanks for being here.

00:01:25 Also, something to do with a puppy I've seen on Twitter.

00:01:26 Oh yeah, I got a puppy as well.

00:01:29 He's not a golden something.

00:01:31 He's a border collie, but he's kind of golden colored and he's not in the room at the moment.

00:01:39 He's not allowed in here while I'm recording.

00:01:40 I thought it would be a bit chaotic.

00:01:44 My puppy sometimes is here, but it's very bizarre the way that puppies socialize around COVID instead of us being gone and then we come home.

00:01:52 She now knows and understands the expressions I make to end a Zoom call.

00:01:57 So she'll sit quietly for an hour and as soon as I say goodbye on Zoom, she's like, "We're ready to go.

00:02:00 Let's go." It's super bizarre, but yeah, that's the world we live.

00:02:04 So enjoy the new puppy.

00:02:05 Brian, you want to kick us off with our first topic here?

00:02:09 - Lucas Lange, he's, what is he again?

00:02:11 The developer in residence?

00:02:12 - Yes.

00:02:13 - For Python.

00:02:14 Anyway, he wrote an article called, "Where Does All the Effort Go?

00:02:18 Looking at Python Core Developer Activity." And I kind of really like this article.

00:02:25 Not only talks about really what's going on with developers and who's doing what.

00:02:31 To start off with, he talked about how he got this data.

00:02:34 So this is also sort of a data processing, sort of information scraping sort of article.

00:02:42 He's looking at the GitHub repository data for CPython, of course, and specifically pull request data. So there's a discussion about he's even using Dataset, which is nice. We've covered that on the show. And even lists the SQL queries that he has to try to get some of this data.

00:03:03 So some of the neat data that he's got. Oh, also since Git, the data is from the time when CPython moved to GitHub. So that's February 10, 2017. And he mentions that it's up through October 9th is is when he pulled the data.

00:03:20 So, but all the information is there so you could grab it yourself if you want.

00:03:25 Even the little scripts he's got for modifying some of the data.

00:03:29 But so some of the interesting things, the top parts of CPython that are modified, it's probably not that surprising that ciaval.c is involved in 259 merge requests.

00:03:42 It's the top merged file.

00:03:45 - ciaval.c, yeah.

00:03:47 That's where the bytecode processor is.

00:03:50 So yeah, that's where all, that's the center point or the tunnel everything flows through.

00:03:55 Does that make sense?

00:03:56 - Yeah, and then goes on and looks at which contributors merged, have merged.

00:04:02 And this is an interesting thing or had been involved in PRs.

00:04:07 It lists the top, he lists the top 50 people but it includes some bots, which is interesting.

00:04:14 - I was gonna ask that.

00:04:15 I was thought BetaViz is probably gonna be up there or Mrs. LinkedIn.

00:04:18 - Yeah. - Both bots, by the way.

00:04:21 - So this is a, I'd actually love to talk to, or either me or Michael or somebody, talk to one of the, or Python people, to talk about the different bots that are used and why they're used.

00:04:32 'Cause that's an interesting thing, of large projects using bots to help out with some of the work. - Yeah, that is interesting.

00:04:38 - And anyway, the non-bots, there's a couple of people that stand out, Victor Stinner and Serhii Sorkaka, so I apologize for messing up your name, but that's, they're really up there.

00:04:54 So that's pretty interesting that they're involved a lot.

00:04:57 And then there's a description here, a nice note that Lucas writes, "Clearly it pays to be a bot or a release manager since that's naturally causes you to make a lot of commits.

00:05:08 Victor and Serhii are neither of these things and still generate an amazing activity.

00:05:13 Kudos.

00:05:14 And also it's not a competition, but it's still interesting to see who makes all these recent changes.

00:05:20 By the way, this, that top PR thing was only since the beginning of January, 2020.

00:05:25 So taking a look at the more recent stuff.

00:05:27 And then one of the things that's interesting in looking at who contributed where, I didn't know this.

00:05:34 There's an experts index.

00:05:36 So that was linked.

00:05:39 Ooh, it's asleep.

00:05:41 An experts index that is part of the Python developers guide.

00:05:45 I didn't know this was here.

00:05:46 It's a kind of lists parts, some parts of the system, but there's blanks.

00:05:51 And so there's, so Lucas also, or listed to the script and pulled out the top five contributors to each file, which is kind of an amazing list of all of the different, of, you know, the top five people for every file within CPython.

00:06:11 So if this is kind of neat, because if you're going to do a PR or you're working on a fix or something and you're a little confused by some of the code, one of these people might be able to help you out.

00:06:21 So this is kind of a neat list.

00:06:23 So there's a, at the bottom of the article also, it talks about some of the, some of the takeaways from this.

00:06:30 Don't have this right off the top of my head.

00:06:34 Merging, how long it takes to merge a PR.

00:06:37 So it's hard to draw information from this data because it's all over the map.

00:06:43 The standard deviations are pretty large.

00:06:45 But if a core developer merges their own PR, it takes on average about seven days to get through the process, give or take 42 days.

00:06:53 And then core developer authoring a PR, which is merged by somebody else, it takes longer, about 20 days, give or take 78.

00:07:02 And then community author, it's up to 20 days, give or take 80.

00:07:06 But I mean, I work on commercial projects that are not really that much faster than this.

00:07:11 So it's not too bad.

00:07:14 What do you think of this article?

00:07:15 - Yeah, Anthony, what do you think of this?

00:07:17 You spent a lot of time inside the CPython code.

00:07:19 I mean, you did write a book, "CPython Internals," which people can check out, right?

00:07:23 - Yeah, I did write a book about CPython source code.

00:07:26 So it's interesting.

00:07:28 First of all, I'm super excited about Lukasz being the new developer in residence.

00:07:32 I think he's got the right approach and he's already made really promising progress, I think, in terms of trying to make the community contribution process a bit slicker.

00:07:46 Yeah, that's that at the bottom.

00:07:48 Like, just watching the GitHub repository, core developers working on the repository and making changes and stuff, from the outside, looks fairly seamless.

00:07:58 My own personal experience has been, sometimes it's quite, like, If your PR gets responded to within the first week, then it'd probably get merged pretty quickly.

00:08:09 And then if it doesn't, then it just kind of ends up in the pile.

00:08:13 And I've had ones in there for like three years.

00:08:17 - Right, the average was seven, but it could go out at like another 40 days.

00:08:21 And it's probably like really quick or really far.

00:08:24 - Well, that metric is how long they take to get merged, which I guess requires that they are merged.

00:08:30 - Oh yeah.

00:08:32 I mean, there's basically just like loads of people contributing stuff.

00:08:37 And there aren't enough people with enough time to sift through it all.

00:08:42 And it just makes it really tricky.

00:08:43 And the project needs to continue marching forward.

00:08:46 And there's people who are dedicated to working on the core developers.

00:08:50 But you know, some of the community contributions are really valuable.

00:08:54 I think that's what's promising to me is that Lukasz is kind of looking at that and not just taking this role on as I'm going to be 100% core developer.

00:09:06 Because yeah, there's already lots of other people on the team who are making some amazing contributions.

00:09:12 You know, Pablo has been working on the new Pasa and now he's working on this like stacklist changes in 3.11.

00:09:20 Yeah, there's so many things going on at the moment in CPython.

00:09:24 So it's really encouraging to see.

00:09:26 Yeah, it's super encouraging.

00:09:27 I think Lukasz is doing a good job sort of smoothing out the edges to just make it easier for everyone to go faster, which I think a lot of times in teams, you know, not specifically here, but in general, there's these people who are kind of, oh, that's the person you can ask to make the CI work again when you break it.

00:09:43 This is the person you asked, like, you just set up a new machine and remembers how to do that.

00:09:46 And like, you don't necessarily get direct credit for doing that work, but without them, it's just way harder.

00:09:52 And I feel like he's doing that for CPython behind the scenes.

00:09:55 - Yeah, the experts index is really helpful if you want to get involved in bug triaging.

00:09:59 So that's something that people are open to help with.

00:10:03 If you go on bugs.python.org and you want to help to triage bugs, often what you have to do is kind of look at it, make sure that the person who's reported it is filled in all enough information, and then basically add people on the experts index to something called the nosy list, which is like a CC list basically on the bug.

00:10:22 And then, yeah, it's just kind of directing it to the right people.

00:10:25 Once you've done that for a while, then you kind of get given like a triage flag in your user.

00:10:31 And then if you've been doing that for even longer, then you could be promoted up to a core developer.

00:10:35 And there's a few people who've gone through that, that route over the last couple of years.

00:10:39 - All right, Anthony, while you're talking, I got two things to share out of the audience.

00:10:43 Dimitri Figal, hey Dimitri, great to see you here.

00:10:45 Dimitri says, thanks for inviting Anthony.

00:10:48 He's someone I look up to, very nice.

00:10:49 - Thanks Dimitri, good to see you.

00:10:51 - Yeah, and Waylon, who was recently on Talk Python.

00:10:53 Hey Waylon, says what a great lineup here.

00:10:55 also kind of for you and also Henry Schreiner.

00:10:58 Hey, Henry, also recently on DocPython.

00:11:00 Says both PRs I've been involved with to CPython got in in about a day, I believe, which that's pretty amazing.

00:11:07 - That's pretty good, yeah.

00:11:08 - That's great.

00:11:09 - Yeah, so before we move off from this one, Brian, this is a good pick.

00:11:13 One thing I just wanna point out as well is all of these cool stats and these graphs and everything we're seeing here apply to CPython because it's on GitHub, right?

00:11:20 - Yes.

00:11:21 - But you can run the same code and run dataset from Simon Willison against it.

00:11:25 but against a different repo, I would imagine, right?

00:11:28 - Oh, yeah.

00:11:28 - Yeah, so if you run a project, you could probably do a similar analysis for your project.

00:11:33 - That's a good idea.

00:11:34 - Yeah, all right.

00:11:35 Speaking of good ideas, and it's interesting that Henry's out in the audience, 'cause I feel like we might have been responsible for this article.

00:11:43 Clearly we did not write it.

00:11:44 We may have triggered, is what I'm saying.

00:11:46 Mostly me, in not the positive way, right?

00:11:49 So this is a cool article by Paul Gansel, who is also over on Talk Python, talking about the mysteries of date time and stuff.

00:11:57 There's all sorts of cool things.

00:11:58 He maintains the dateutil package and setup tools projects and so on over on episode 271.

00:12:05 So he wrote an article, said why you shouldn't invoke setup.py directly.

00:12:10 And the reason I think I might have somehow had something to do this is Henry was on talking about CI build wheel and all the proper ways to build packages.

00:12:18 I said, oh, you can run setup Python, setup py space, you know, wheel or bdest or something.

00:12:23 and they're like, no, no, no, you could, but please don't do that.

00:12:26 And then here we have this article like two days later.

00:12:27 So I don't know if that was part of that conversation, but it's a really good article talking about the state of building Python packages.

00:12:36 And it says, you know, look for a long time, set up tools and distutils were the only game in town when it came to creating Python packages, right?

00:12:44 So you could do something like invoke Python setup, bdist, sdist, wheel, and so on.

00:12:49 Wait, I see.

00:12:50 So Paul is actually in the audience, real time, fantastic.

00:12:53 Hey, Paul, says, I think I did it because Matthew Fiker asked for it on Twitter and I got sniped.

00:12:58 Yeah, perfect.

00:12:58 OK, good.

00:12:59 So I'm-- just a coincidence.

00:13:00 Fantastic.

00:13:01 But yeah, so the reason this is extra interesting to me-- and thank you, Paul, for writing it-- is I was still doing this Python setup UI various commands.

00:13:11 And I was talking to Henry.

00:13:12 He's like, no, you shouldn't do that.

00:13:14 You should do it this other way.

00:13:15 I'm like, what?

00:13:15 He said, well, OK, well, how should I do this?

00:13:17 Oh, you should use build, the build package.

00:13:20 What is this build package you speak of?

00:13:22 You know, so we've talked about pyproject.toml a bunch of times.

00:13:26 We've talked about things like flit and stuff that will use it, right?

00:13:30 This all comes from pep 517.

00:13:33 And there is a package called build.

00:13:35 You can pip install build.

00:13:37 And then you do things like Python-M for module, run build.

00:13:41 And you can say, I want an estus, I want a wheel and things like that.

00:13:45 And this acts as a front end to things like set up tools to the various backends that do building or pilot.

00:13:54 - Split.

00:13:55 - Split, yeah.

00:13:55 All these different things that understand it, right?

00:13:57 So it says, "All direct invocations," Paul says, "All direct invocations of setup.py are effectively deprecated in favor of purpose-built standard-based CLI tools like pip, build, and tox." So this is quite a long article.

00:14:12 There's a lot to go through.

00:14:14 It has some interesting history.

00:14:16 So in the early days, there wasn't even distutils.

00:14:18 And then in Python 2, distutils got added and then set of tools came along.

00:14:23 And then there were, there's, you know, while they work, there's still problems.

00:14:26 Like for example, you might have dependencies that you have to install to run the setup, but the way you install stuff and figure out what you depend upon is by running the setup.

00:14:38 So what do you do?

00:14:39 So an example of that would be Cython, right?

00:14:40 So for, and you might have to import Cython and then the invocation of calling setup, you tell it how to Scythonize the PYX files, right?

00:14:49 But that's obviously not gonna work because you're gonna have to have Scython installed, but how do you express that?

00:14:56 You know, it's like this chicken and egg problem, right?

00:14:58 So let me pull up my notes here.

00:15:01 Yeah, so basically one of the big questions was why am I not seeing deprecation warnings?

00:15:06 Let me go down a little further.

00:15:07 Yeah, so if I'm not supposed to do this, why isn't screaming from the top of its terminal, Stop, stop, stop, why are you doing this, right?

00:15:16 So there's a lot of commands that still have indirect uses of the distutils and stuff.

00:15:22 So it's a little tricky to deprecate it, but basically you should consider it deprecated.

00:15:27 You know, at the end of the day, it's better to replace your set of commands with tools like build instead of set up pysdist or bdistwheel or tox and nox instead of set up pytest and other commands backed by projects intended to support that.

00:15:42 - Yeah, that sound good to you guys?

00:15:44 Where were you on this?

00:15:45 - Brian, you go.

00:15:47 - Well, I don't use--

00:15:49 - Have opinions.

00:15:50 - I mean, I kind of indirectly use build, but I basically just use flit.

00:15:53 So I'm not writing things with C extensions, so pure Python stuff, I just do a flit build or whatever, it works fine.

00:16:02 - Yeah, so that's kind of, I mean, that's using the pyproject.toml stuff, right?

00:16:06 - Yeah. - Yeah, Anthony?

00:16:08 - I kind of, if I'm starting a project now, then I use pyproject.toml and the project doesn't have a setup.py.

00:16:14 There were some reasons why I had to add one in the past, but that's mostly fixed now.

00:16:19 So I'm either using flit or something similar like poetry.

00:16:23 Yeah, and I've worked on projects years and years ago where the setup.py was like, just ended up just being a script to run ad hoc commands.

00:16:32 Like there was a test, setup.py test, and then there's like, and lint, and...

00:16:37 (laughs)

00:16:38 - Yeah, what does that have to do with installing software, right?

00:16:41 Why is that?

00:16:42 Yeah, nothing.

00:16:43 It was just like, yeah, it just ended up being an entry point to do things.

00:16:48 And one happens to be installed, but there's a bunch of other stuff you might randomly do.

00:16:52 Yeah, and it's fine that it's being deprecated, but it just, you know, CPython still does that.

00:16:56 Like the setup.py and CPython is still used in that way and called and invoked directly in the source code.

00:17:04 This is so, yeah, it's good that it'll be deprecated, but I don't think the tooling is quite ready yet.

00:17:10 He's not really saying to get rid of setup.py, just don't use it, don't run it directly.

00:17:15 - Yeah, find something better.

00:17:17 - Pip should do that.

00:17:18 Pip should do the discovery for you, the pip 517, and run the correct steps for you.

00:17:27 - Yeah, absolutely.

00:17:28 So a couple of comments out in the live stream is that while recommending build, it's nearly impossible to Google to find it.

00:17:35 And Ray says, "I love and hate the name.

00:17:38 So authoritative, so un-Googleable, and a bit hard to use in conversation, but yeah, yeah, for sure.

00:17:44 So I think if you want to take away from this conversation, right at the top, there's a TLDR section that Paul put in.

00:17:49 Click on the summary, takes you down to a summary, and you can go to a table, and it says, "I was about to type this.

00:17:55 "What should I do instead?

00:17:56 "I was about to type setup.py sdist.

00:18:00 "What should you type?

00:18:01 "Python -m build," having build installed.

00:18:04 Or if I was gonna type setup.py bdist wheel, I should type Python-M build --wheel or something like that.

00:18:11 Setup.py test, oh, maybe PyTest or Tox or Knox.

00:18:14 We covered Knox recently with Preston, which was really fun, I believe, episode.

00:18:18 Setup.py install, no, that's pip install.

00:18:21 Python setup py develop, no, that's pip install -e.

00:18:25 And then as well as upload, it goes back to Twine.

00:18:28 So yeah, anyway, I think this is the most actionable bit here.

00:18:32 - Yeah, it's good.

00:18:33 - Yeah, indeed.

00:18:34 All right, well, Anthony, let's talk about keeping an eye on things.

00:18:38 - Yeah, so I wanted to highlight a project which has been in the works for a while, but they've just recently finalized the specification.

00:18:47 So this is called OpenTelemetry.

00:18:49 It's a part of the Cloud Native Computing Foundation, the CNCF, and it's a cross-language event tracing, performance tracing, logging, sampling framework for applications, in particular for distributed applications.

00:19:07 So if you've got an application which is spread across multiple microservices and you wanna trace things or monitor performance or whatever across all of the stack.

00:19:18 - It's a super hard problem, right?

00:19:19 Maybe you've got a Docker container running this thing, that Docker container calls some other service on a different Docker container and maybe the logs are even transient.

00:19:27 What are you gonna do to know if something went wrong?

00:19:30 - Yeah, exactly.

00:19:31 And if you've got an application that's spread across, well, if it's built into multiple microservices, then, and one of those services has a fault, it's really hard to know where that fault came from.

00:19:41 So like, if it just says error, blah, blah, blah, blah, you're like, okay, so what triggered that error?

00:19:47 And which requests from a user at the front end, or like, how did the error happen in the first place?

00:19:53 And how can I fix it?

00:19:54 And also like identifying, I guess, tracking performance across your application and looking at that.

00:20:00 So there's been attempts at doing this in the past, open tracing and open census were the two kind of projects beforehand.

00:20:08 So this new project, OpenTelemetry, is a merger of open tracing and open census.

00:20:14 There's engineers from some big companies working on this, including Microsoft, Amazon, Splunk, Google, Elastic, New Relic, and a whole bunch of others as well, including actually full-time engineers from some of those companies working on this.

00:20:30 So yeah, I've been working with an engineer at Microsoft who works full-time on this project.

00:20:36 He works on, actually there's a few people who work full-time on this, but the person who works full-time just on the Python components to this.

00:20:43 So the Python SDK basically allows you to instrument lots of different frameworks.

00:20:48 So you can basically drop it into Flask or Django or Starlet so if you're using fast API, and you can sort of instantly get capture of what requests are going into the application, when there's been a crash, like where that exception's gone, all the logging information.

00:21:08 You can look at performance records and stuff.

00:21:09 I've been sharing some examples of where I've wrapped it around a fast API app, and then I can see like performance of what's the average request time for each of these parts of the application, and where is that time spent, even down to like--

00:21:24 - Can you say like this is the data layer section, and this is the business logic and here's the simulation or whatever.

00:21:30 - Exactly, so I can kind of see like, almost like a cool stack, but across the actual components of the app.

00:21:36 So here's where it came into fast API.

00:21:38 Here's where it went into database.

00:21:41 Like here's how long the query took.

00:21:42 Here's how long the ORM took to remodel it.

00:21:45 Here's how long Ginger took to build the template.

00:21:48 Like, so you can kind of see a breakdown of all the different components and how things are being pulled together.

00:21:54 So there's two parts of OpenTelemetry, well, there's actually more than two parts.

00:21:59 I am actually really appreciative of, even though there are lots of engineers from big companies, this hasn't been over-engineered yet.

00:22:09 And I'm really hoping it doesn't.

00:22:10 - Is there a factory-factory method in here?

00:22:12 - Yeah, exactly.

00:22:13 Especially 'cause it's like so generic.

00:22:16 There's a real danger of it being just over-engineered.

00:22:19 So if you go on the website and go to registry and then pick Python on the right-hand side, you'll see the kind of different extensions you can get.

00:22:26 So instrumentation is basically like, this is the thing I want to monitor.

00:22:30 And it could be like ASCII or async Postgres, for example, database, Celery, Django, Elasticsearch, Flask, like there's a stack of app stacks that you can just drop it into and it will give you all the tracing information.

00:22:47 And then there's these things called exporters, which is basically like once it's got the information, can send it to somewhere like Datadog or New Relic or Azure and AWS, obviously, and Google monitoring as well.

00:23:02 And yeah, actually, I just worked on recently, if you just want to hack around with it, there's an exporter for Rich that just basically prints it on the console so you can see everything that's happening.

00:23:14 In color probably, yeah.

00:23:15 Yeah, yeah, yeah.

00:23:16 So it's all kind of color coded.

00:23:18 It's really nice, actually.

00:23:20 So yeah, I'm really excited about this.

00:23:21 I've been mostly trying it with fast API, as there aren't really many frameworks for setting up like decent monitoring and tracing and fast API applications.

00:23:33 And yeah, I think it's really promising.

00:23:34 So I suggest you check it out.

00:23:37 And if you see a framework that needs support or something, then, you know, this is all open source, and they're all accepting contributions as well.

00:23:46 And it's fairly straightforward to add support.

00:23:48 - Yeah, it's got Postgres, MySQL, MongoDB, Pyramid, Redis, all sorts of good stuff in here.

00:23:54 Another thing maybe worth pointing out here is because this crosses languages, right?

00:24:00 There's a Python one, but there's also a .NET one, there's a Swift one, and so on, which means there might be scenarios where I've got like, say, a mobile app written in Swift, and then I've got the backend written in Python and FastAPI or something, and you wanna put those together.

00:24:15 Like, because it goes across those languages, Theoretically, that's a thing that could happen.

00:24:19 - Absolutely, yeah, and you can pull that all together and it would give a request a trace ID.

00:24:25 So when a request comes into the front end, a trace ID could carry across the different stacks as well, which is pretty cool.

00:24:33 - Yeah, yeah, very cool.

00:24:34 This is neat.

00:24:35 Awesome, thanks for covering it.

00:24:37 Now, before we move on, Brian, we have a sponsor for this episode.

00:24:40 That's cool, huh? - Yay, yeah.

00:24:41 - Yay, thanks to Shortcut.

00:24:44 Shortcut, formerly known as Clubhouse.

00:24:46 So they're a really cool project management tool.

00:24:49 And they asked the question, have you ever really been happy with project management?

00:24:52 You know, how's your JIRA or whatever, right?

00:24:57 How much are you loving it?

00:24:58 So they basically say most are either way too simple for growing engineering teams to manage everything or too complex and just throw in the kitchen sink and you don't wanna work with it.

00:25:09 You gotta constantly tweak it to make it work for you.

00:25:11 So Shortcut, who used to be known as GoBounce, is different.

00:25:14 They try to be simple.

00:25:15 project management built specifically for software teams.

00:25:18 It's fast, intuitive, flexible, many other nice positive adjectives.

00:25:21 So some of the highlights are team-based workflows, individual teams can use shortcuts, default workflows, or customize them to match the way they work.

00:25:30 Also organizational-wide goals and roadmaps.

00:25:33 So these workflows automatically get tied into larger goals and feed into like a bigger system outside the team.

00:25:39 Good source control integration, GitHub, GitLab, Bitbucket, all those types of things.

00:25:44 One thing that I really love is the web app has hotkeys.

00:25:48 So it's keyboard friendly, just like HR and VS code, whatever, right?

00:25:53 I don't know why more web apps don't have hotkeys.

00:25:55 It's not particularly hard, but they do, which is great.

00:25:57 Iteration planning, so you can set your priorities and let Shortcut run the schedule.

00:26:01 You get nice little burndown charts and so on.

00:26:02 So check them out at shortcut.com/pythonbytes, shortcut.com/pythonbytes, because you shouldn't have to project manage your project management.

00:26:11 That does not sound fun.

00:26:12 So let them do it, it's their job.

00:26:13 Now, before we move off to the next topic, Robert Robinson on the audience, Hey, Robert, this open telemetry sounds interesting.

00:26:20 Wants to try it out.

00:26:21 I, I do as well.

00:26:23 I feel like this is the kind of stuff that you just keep putting off integrating into your system.

00:26:27 And then once you finally, finally do, you're like, Oh, look how awesome this is.

00:26:30 We can see what's going on.

00:26:31 And it's actually, did you know this part was crashing?

00:26:33 No, I didn't know that.

00:26:34 Nobody looked at the log and it was just eaten.

00:26:36 Even the exception, right?

00:26:38 Yeah.

00:26:38 Tricky, tricky.

00:26:39 All right, Brian, you got the next one.

00:26:41 So Python's got a few built-ins.

00:26:45 Not a ton, but quite a few.

00:26:48 So there's an article from Tushar Sadwani called "Understanding All of Python Through Its Built-ins." And he's got a pretty ambitious goal here to understand everything.

00:27:03 But I actually really enjoyed even the first part of it.

00:27:07 So I started reading it.

00:27:09 I've been, especially giving it a shot.

00:27:12 I got a shout out to him.

00:27:13 He's been fairly involved on Twitter, answering questions and being involved in conversations.

00:27:19 So that's a good way to get noticed.

00:27:22 But there's a, starts off talking about scope.

00:27:26 So what is built-ins are not just things that Python has built in, but there's also, it has a relevance to the scoping rules.

00:27:34 And he called it the LEGB scoping rules.

00:27:37 So it's when Python, if Python sees a symbol, first it looks in the local scope, then the enclosing scope and the global scope, and then the built-in.

00:27:49 And built-ins really are just anything that's in the built-in package.

00:27:52 So, and that, actually that discussion, it's a really pretty good discussion and it helped, it's good for especially newbies to understand, but even advanced beginners sometimes don't quite understand what's going on here.

00:28:05 - Yeah, Brian and Anthony, you both come from C style languages historically, right?

00:28:10 Or at least you've spent a lot of time there, right?

00:28:12 Brian, do a lot of C++, Anthony, I know you've done some C# and stuff.

00:28:15 Did the scoping story of Python confuse you and kind of leave you a little uncertain in the beginning?

00:28:21 - Yes, definitely.

00:28:22 Especially coming from C++ where it's very well-defined and different. - If it's in the curly braces, it's alive, afterwards it's gone, right?

00:28:29 Like, wait a minute, that's not the story at all.

00:28:32 - Right, and also you've got so many nested curly braces it could be anywhere and it's not really, it seems like, actually we just don't do that too much in Python, but Anthony probably know better than me.

00:28:43 If I've gotten like multiple nested curly braces, we don't have curly braces, but multiple nested indentations, does the scope sort of look in outer and outer and outer ones, is that what non-local means?

00:28:59 as a non-local keyword, which is like a whole other thing.

00:29:03 (laughing)

00:29:04 - That's a completely different thing.

00:29:05 Okay.

00:29:06 - I think I've ever used it.

00:29:07 - Closure, variable capture, basically, yeah.

00:29:10 - Yeah.

00:29:11 - Yeah.

00:29:12 - But the difference in global really freaked me out because really we were pounded into our heads everywhere is to never use global variables.

00:29:19 - Yeah.

00:29:20 - But global's different.

00:29:21 The global namespace is not a global variable.

00:29:23 It's more like a module level.

00:29:27 - Yeah, yeah, or like a static variable in a class maybe would be what other people might call it.

00:29:33 - Yeah, it's not a dangerous thing in Python.

00:29:36 - Yeah, so I didn't mean to derail you that much, but I think it's interesting to think about the built-in scope, the global scope, these different scopes, because it's such a different world from the intuition you get coming from all the C languages.

00:29:46 - Yeah, also just sort of just really enjoyed looking at the language through the scope of built-ins.

00:29:50 It's an interesting take on it.

00:29:52 I will pull out a few things that he mentions, and one is all the constants.

00:29:59 I guess I'd never counted them before, but there's five.

00:30:01 There's five constants in Python.

00:30:03 True, false, none, ellipsis, and not implemented.

00:30:08 I do like ellipsis.

00:30:09 We talked about that the other day, or I guess one or two weeks ago, using dot, dot, dot instead of pass.

00:30:15 - Are you gonna start doing that?

00:30:17 - I've already started doing that.

00:30:18 - Have you? I'm all about it.

00:30:19 I think I'm up for it as well.

00:30:20 - I don't, I guess I don't think I've ever used not implemented or even looked for it, but interesting discussion.

00:30:28 Also just liked, I liked looking around.

00:30:30 So here's a section on compile exec and eval.

00:30:33 It's not an alphabetical listing of everything.

00:30:35 It's a more grouping them together.

00:30:38 It's quite a big article, but I would suggest people just like skim through the list 'cause it's got a good table of contents at the top and you can just sort of skim through what he's talking about and pick a couple and go read about it.

00:30:52 You'll probably learn something.

00:30:53 So anyway, a good shout out to Tushar for writing this.

00:30:57 - Yeah, this looks super handy.

00:30:58 - Yeah, some of the built-ins are super handy.

00:31:01 I often have a Python REPL open just to do things that would otherwise be annoying to do on a calculator, like converting hex integers and vice versa.

00:31:11 There's a hex built-in, which is really helpful actually for doing this stuff. - Yeah.

00:31:15 I use hex a lot because I'm often looking at data elements in a packet or something like that and trying to convert those.

00:31:26 - Yeah, very nice, nice one.

00:31:28 Before we move on, Anthony, how do you feel about dot, dot, dot?

00:31:31 - They should have called it yada, yada, yada.

00:31:33 (laughing)

00:31:35 - Yeah. - I think that would be--

00:31:36 - It's way better than ellipses, come on.

00:31:38 - Yeah, I use it for type stubs and that's it.

00:31:41 So-- - Yeah.

00:31:43 There's times when you use pass, right?

00:31:44 And I feel like, you know what, dot, dot, dot kind of says, I kind of know, I'm not ready for that stuff here yet.

00:31:49 - I think we should start calling, instead of ellipses, we should call it dun dun dun.

00:31:54 (both laughing)

00:31:56 - Exactly.

00:31:57 All right, how about we hand out some awards?

00:32:00 - Okay.

00:32:00 - Best open source software of 2021.

00:32:03 Now, who gets to vote on this?

00:32:05 Who gets to say, well, InvoWorld in this example.

00:32:07 So this is according to InvoWorld, but there may be other rules, but I found this to be pretty interesting, actually.

00:32:12 I heard about it, learned about it, because Sebastian Ramirez from FastAPI said, "Yay, we've been voted one of the best open source projects." So this is called the InfoWorld Bossy 2021 Awards.

00:32:23 But what I thought was interesting is going through here, there was 30 different projects that won awards.

00:32:28 I'm like, "Oh, that's interesting.

00:32:29 "Oh, I didn't know about that.

00:32:30 "Oh, check this out, yeah." So I wanted to touch on a couple.

00:32:33 So there's some things that may or may not be interesting to you like Svelte, which is a JavaScript front end, like Vue or React, that's not interesting to me.

00:32:42 But Minikube, Minikube is pretty interesting.

00:32:45 Minikube is a way to run like a baby Kubernetes cluster right on your computer.

00:32:50 Just say Minikube start and guess what?

00:32:53 You've got a cool little cluster running.

00:32:54 So that might be really helpful for Python people.

00:32:57 Let's see, Pixie, gonna zoom back a little here.

00:33:00 Number five is FastAPI.

00:33:02 Now we're all fans of FastAPI.

00:33:05 I think it's really awesome that it won and worth maybe just giving a quick shout out to how they described it as Django and Flask have been leading the Python web frameworks for years.

00:33:13 Fast API now deserves to be mentioned in the same breath.

00:33:16 I agree.

00:33:17 Calls out the main features, which are it's truly modern Python web framework written from the ground up using type hinting, async and high-speed components by default.

00:33:26 That's true.

00:33:27 And I also really liked that they pointed out that while its name indicates it's primarily for APIs, it's also really good at writing more conventional websites with like Jinja templates or even Chameleon templates.

00:33:39 So way to go.

00:33:40 Anthony, you wanna add it or Brian wanna add anything?

00:33:42 - Well, I just think that I think you're partly to thank for people considering FastAPI for not just APIs because you've been beating that drum a little bit as well.

00:33:51 - Yeah, thanks a bunch.

00:33:52 I even created some decorators that make it real easy to render templates as response values and stuff.

00:33:57 Yeah, it's fun.

00:33:58 Anthony?

00:33:59 - Yeah, I tried out the chameleon thing.

00:34:00 (laughing)

00:34:01 The one you wrote, actually.

00:34:03 Yeah, 'cause I'm working on this FastAPI course with you at the moment.

00:34:06 - Yeah, that's gonna be fun.

00:34:08 - So yeah, I'm a big fan of FastAPI.

00:34:10 I think it's brilliant and testament to Sebastian really, 'cause he really kind of builds on something which is quite complicated, but he makes it seem so effortless.

00:34:20 And just working with fast API, like the documentation is excellent.

00:34:25 The framework itself is just, is really logical.

00:34:28 And, you know, it's really easy to use.

00:34:30 There, in terms of like the, I've been keeping an eye on the popularity of the different frameworks and stuff over the last few years.

00:34:39 And Django and Flask are kind of neck and neck and have been for a while.

00:34:43 And fast API now is the third most popular according to the metrics that I've seen.

00:34:48 Yeah, out of nowhere to third most popular.

00:34:50 Yeah.

00:34:51 Yeah.

00:34:52 And I know JetBrains are doing the new, the latest PSF developer survey.

00:34:57 So yeah, we'll see kind of what happens in this year's number.

00:35:01 But I'd imagine fast API would still be the third most popular.

00:35:05 So yeah, it's pretty brilliant.

00:35:07 So yeah, I think it's a good solid pick.

00:35:10 In terms of writing like full apps with it at the moment, like there's still a lot you have to do for templating.

00:35:16 Like you pretty much have to like build in a whole bunch of other templating stuff and picking an ORM at the moment isn't easy, but there are some brilliant ones to have a play with.

00:35:27 - Yeah, there's a couple interesting ones.

00:35:28 - I wanna give a shout out to.

00:35:30 - Yeah, that give like similar even integrating with Pydantic, which is sort of the natural exchange of fast API.

00:35:36 So you want to give a shout out to Tortoise you say?

00:35:38 - Yeah, that's my favorite so far.

00:35:40 I've used, tried out six different ones so far.

00:35:42 (laughing)

00:35:43 - Yeah.

00:35:44 - And Tortoise I think is my favorite at the moment, so.

00:35:47 - Right on.

00:35:48 Well, maybe next year we'll be talking about the award for SQL Model, which is built on top of Identity plus SQL Alchemy by Sebastian as well.

00:35:56 So who knows?

00:35:56 A lot of good ones out there.

00:35:58 It's good to see a lot of the excitement and new ideas coming along there.

00:36:01 All right, what else we got?

00:36:02 Crystal, don't care.

00:36:04 Windows Terminal I think is actually pretty interesting.

00:36:06 Windows has traditionally been not on par with its terminal experience.

00:36:10 And I think, you know, the Windows Terminal, PowerShell 7, Oh My Posh, all these things come together, NerdFonts, to make it quite an amazing place to be actually.

00:36:19 - Windows Terminal is an open source project?

00:36:22 - It didn't start out that way, but now it is.

00:36:24 - Oh, okay.

00:36:25 - Yeah, yeah.

00:36:25 So that's a good one.

00:36:26 OBS Studio, if you're doing video stuff, that's amazing.

00:36:30 There's a bunch of stuff in here that may apply to people that you can all check out that are interesting, but I don't want to cover them.

00:36:36 Dask though, Dask is a big data science one, scale computation like pandas operations and what not across cores, across clusters, across compute that's larger than the RAM you have by streaming it off disk and all sorts of interesting stuff.

00:36:52 I have no idea why my browser is jumping up and down.

00:36:55 We'll have to ignore that.

00:36:56 I'm not in control of it, I'm sorry.

00:36:57 - It seems like-

00:36:58 (laughs)

00:36:59 - You know what, I'll tell you why this is happening.

00:37:01 I'm looking up and I see I'm not running my VPN which would block ads.

00:37:05 And so there's some kind of ad off the screen that's just running, and if I turn on my VPN, we'd be good.

00:37:11 All right, Blazing SQL is another great one.

00:37:13 Rapids from NVIDIA.

00:37:15 And I feel like there's one more I wanna give a shout out to.

00:37:17 Hugging Face, I don't know anything about that.

00:37:18 Now that was it.

00:37:19 So just going through that list, I thought it called out a lot of neat projects in addition to just FastAPI.

00:37:24 - Yeah, cool.

00:37:25 - Yeah, any of those jump out at you guys either that I've just screened by?

00:37:29 - Lots of stacks that I don't use.

00:37:32 - Yeah, same.

00:37:33 - Yeah.

00:37:34 - There was a bunch of ML stuff though, which I don't use, but I think would be relevant to people who are listening maybe.

00:37:40 - Well, we're not to extras yet, Michael.

00:37:41 - No, no, I know, I just closed it 'cause the jumping was driving me insane.

00:37:44 - Ah, okay.

00:37:45 - All right, Anthony, you got the last main one, right?

00:37:49 - All right, yeah, so I think Lukasz is taking up like half of this episode.

00:37:53 (both laughing)

00:37:55 So we're gonna get back to Lukasz's blog and evolve the discussion that was started last week on this-- - Very interesting discussion, Yeah, I'm, to put it mildly, I'm excited about this.

00:38:06 I think if this happens, it's probably going to be the biggest thing to happen in CPython in the last five years, in my opinion.

00:38:14 And this being the Gil removal.

00:38:16 This be the Gil removal.

00:38:17 But not the Gilectomy.

00:38:18 Not the Gilectomy.

00:38:19 Not exactly.

00:38:20 Yeah, so, no Gil or let's just go with no Gil.

00:38:27 Yeah, no Gil.

00:38:28 So almost seemingly out of nowhere, Sam Gross, who works at Facebook, basically submitted to the core developers this research paper and a working branch of a GIL-less Python.

00:38:46 And just quickly recap, I guess, on what that means.

00:38:49 This article is pretty heavy in technical detail and the stuff that's being discussed and the article, again, is pretty complicated. And I actually didn't understand a lot of it.

00:38:59 And I've written a book on the Python compiler. So if you read this and it's confusing, don't worry.

00:39:05 So the gil is basically the global interpreter lock. And it exists as a way of making Python thread safe when it comes to keeping reference counts of specific objects. So if you create a Python object, for example, there's a counter of how many things are referencing it, because you don't want to just destroy an object. And then, like, you're working through a list of objects, for example, but then one of the items in the list just disappears, has been deallocated.

00:39:39 Because everything is a pointer in Python. Like, that pointer just goes nowhere. Or actually, There's a magic pointer that Python uses when it deallocates objects, which I know from a very painful experience. So you don't want that to happen. And if you've got multiple threads kind of working with the same objects all at once, you don't want them to... It's incredibly hard to keep track of what's happening. Threading is great because you can have multiple threads working on a computer and the operating system can do the scheduling of which threads run on which cores and than which CPUs, et cetera.

00:40:16 So in theory, like it's a way of making your Python applications a lot faster if you write them to be multi-threaded, but Python's basically built in this lock, which says, okay, in the evaluation loop in CEVAL, don't let anyone else run a instruction whilst this thread is running the instruction.

00:40:36 - Yeah.

00:40:37 - With the exception of IOVAL tasks.

00:40:38 - Yeah, and it seems like this is a thing to control threading, and really it's just a thing to protect memory management, but it has this huge blocking effect for threading, right?

00:40:48 - Yeah, so it's the thing to basically make the reference counter thread safe.

00:40:52 - Without locking, so it's fast.

00:40:55 - Without locking, yeah.

00:40:56 So you don't have to wait to add an income.

00:40:59 So to give you an idea, like if you run the GC by hand, you'll just see how many tens of thousands of objects are just created like all the time in Python applications.

00:41:10 So what Sam had put together, I say seemingly out of nowhere, but if you go through the article and what he proposed, he's actually been working on this almost full time for two years, which is astonishing.

00:41:23 And it's a real feat of engineering, to be honest.

00:41:27 So kind of what he's proposed is a way of removing the gill so that there's essentially like almost two ways of keeping references into objects.

00:41:39 And one of them is specific to the local thread.

00:41:44 And then there's also another reference count, which is for other threads.

00:41:48 So why is that important?

00:41:50 Well, let's say for example, you've got a Python dictionary with values in it, and then you have multiple threads all working on the same dictionary.

00:41:59 Like that's a complicated problem to solve.

00:42:01 Like how do you make sure that the keys, like the references to the keys or the values don't disappear?

00:42:09 And he does actually go into detail about how that's been handled.

00:42:12 And also objects like Python dictionaries are not thread safe at the moment either.

00:42:17 So, you know, if you have two threads working on a dictionary, adding values, for example, to a dictionary, do you have to lock the hash table?

00:42:26 Anyone who's worked with multi-threading in low level languages knows that like the complexities of doing it.

00:42:35 So what he's proposing is that, Well, in his prototype, he basically replaced the Python memory allocator with another one called Mimalloc, which is a sort of thread-safe memory allocator.

00:42:51 It's actually a Microsoft project, but I think it could have been any other thread-safe memory allocator.

00:42:58 Writing memory allocators is very involved for them to be performant and efficient.

00:43:06 And then basically objects get tied to the thread that created them.

00:43:10 And then there's a non-atomic local reference count with the owner thread.

00:43:15 And then there's basically a separate mechanism for what would be slower, basically reference counting from other threads.

00:43:21 So single threaded performance is equivalent with this proposal.

00:43:27 But when you're, there's still a performance impact of multiple threads working on the same object, which is to be expected.

00:43:34 Yeah, there's always a little overhead for that.

00:43:36 Yeah, but to give you an idea, in his note, he implemented a few common problems as a multi-threaded implementation.

00:43:45 And he said, if you give it 20 threads, it runs 19.84 times faster than it would in just regular CPython.

00:43:54 So for certain types of problems, this can have enormous impact in performance, but it is really complicated.

00:44:03 And that's why I think it's an interesting discussion to see, okay, how do we get from this is a cool idea to this actually being released and being used by, you know, millions of people and I don't know, Python's like running on like a satellites in space and stuff like, how do we go from a fork that someone's been hacking around with to something that's like production ready?

00:44:27 And this is kind of what the article goes into.

00:44:30 So like, you know, how would this work?

00:44:33 Would it be a feature flag?

00:44:36 which version would we target?

00:44:37 And so at the moment it's targeting 3.9 alpha three, actually, so it wasn't even the release of 3.9.

00:44:45 So he needs to do some work to update that to the latest version of 3.9, which is 3.9.7.

00:44:50 And then I think the target release, if the core developers agreed to kind of like explore this, if that was 3.11, or I don't think anyone wants to touch the Python 4 topic.

00:45:04 But 11 is like a year away.

00:45:08 Is that even possible or would it most likely be a couple of years out?

00:45:12 Yeah, it seems pretty soon to me.

00:45:13 And I like sub-interpreters, for example, is like an experimental feature.

00:45:18 I think the issue with this is that it's the volume of changes is so broad that it's quite hard to kind of like have it in as a feature toggle.

00:45:27 So like sub-interpreters was in as like a hidden package that you can use and it's experimental.

00:45:34 Because this is like changing everything.

00:45:36 Yeah, well, everything, but like, it's a pretty wide sweeping change.

00:45:42 And changing the memory allocator is a massive change.

00:45:45 So question is more, how can we introduce this softly, I think, and have it either as a feature flag?

00:45:54 And what would this break?

00:45:55 And the main thing is that C extensions haven't really had to worry about thread safety, because the GIL kind of handles that for them.

00:46:03 So C extensions essentially would need to, if they use the mechanisms that are here, that's fine.

00:46:09 But C extensions often have other objects which they haven't used the reference count for.

00:46:16 So they've basically kind of like allocated their own objects and variables and stuff like that, that would not be thread safe.

00:46:23 And they just not have had these kind of collision issues in the past.

00:46:27 So introducing this would then potentially break some C extensions.

00:46:31 So how could that be introduced gently?

00:46:34 I think what was interesting in the article is there's a mention of NumPy and NumPy has actually done a lot of its own work already on basically kind of making it thread safe and more scalable.

00:46:49 But one of the tricky ones is PyBind11 is called out in here as being anyone who's using PyBind 11 potentially might have to do some refactoring to support this if it was supported.

00:47:03 And then in closing, Lukasz, who wrote this review of posts, said, you know, the team had been really impressed with Sam's work and invited him to join CPython project as a core developer, and he's interested in Lukasz is going to mentor him.

00:47:18 So I think that's brilliant.

00:47:20 Oh, yeah, that's brilliant.

00:47:21 to come up with this over like even two years is like a really short amount of time for a problem that people have been trying to solve for well over a decade.

00:47:32 So yeah, very exciting.

00:47:33 Yeah, this is great.

00:47:34 I think we have a record number of core developers in the audience right now.

00:47:39 Yeah.

00:47:40 So some great comments from Steve Dower.

00:47:42 Hey, Steve.

00:47:43 The big thing needed here is a path forward for native extensions.

00:47:46 they could all need rewriting or else importing them could re-enable the GIL.

00:47:51 That discussion is happening now, it's very early.

00:47:53 And Henry Schreiner also has similar comments that they're considering that, but yeah.

00:47:58 And Henry also says, "We would be up for refactoring PyBind 11 if needed," I believe is also in this.

00:48:05 But this is exciting.

00:48:06 There's a lot of stuff coming here.

00:48:09 I think another thing in addition to the no-GIL is I got the sense that Sam had added several other optimizations that were independently worth adding to Python?

00:48:18 - Yeah. One of the things I know that there's a lot of tension around whether or not to do 4.0, but if it ends up being that all of the extensions need possibly tweaked, then that might be, then it's an API change, and I think a shift to 4.0 might not be terrible.

00:48:38 - It might be the right number, yeah. Well, we should just go to Python 5.0, So no one's worried about four and we'll skip the whole conversation. It'll be fine We're doing angular.js We'll just like and make a big fuss about going from one to two and then just just over something on like version 10 Oh, yeah, we'll just just go crazy. Yeah. Yeah, and that's fantastic I'm actually having you know been Rossum and Mark Shannon, I believe On on Monday on talk Python to talk about like performance in the future and stuff And I'm sure we'll talk about this stuff a little bit. Yeah, so it should be a lot of fun - This was Guido's suggestion when I asked internally if anyone wanted to share anything, this is what he sent over, so.

00:49:14 - Okay, fantastic, yeah, so I'll try to take that up with him again, all right.

00:49:17 Well, Brian, does that bring us to our extras?

00:49:20 - We are at extras, do you have any extras?

00:49:22 - Yeah, no, you go first, tell us about PyCon.

00:49:24 - Well, the call for proposals is open for US PyCon, I'm pretty excited about that.

00:49:30 I already wrote down like six ideas of things I might wanna talk about.

00:49:34 So, and of course, there's no guarantee, No matter who you are, there's no guarantee that you're gonna get in, but it's fun.

00:49:40 It's fun to come up with proposals anyway, and it's fun, I'm definitely going, so I'm pretty excited about that.

00:49:47 And anybody else gonna propose?

00:49:49 Anthony, you gonna try to talk there?

00:49:51 - Yeah, I've been thinking about that while I'm gonna put forward.

00:49:54 I wanna put together a talk on performance anti-patterns.

00:49:58 - Oh, that'd be fun.

00:50:00 - And then propose that for next year, yeah.

00:50:02 - Because of your name?

00:50:03 Like, anti-patterns?

00:50:05 (laughing)

00:50:07 - Also--

00:50:08 - We're not off to X section yet, Brian.

00:50:09 (laughing)

00:50:11 - If anybody doesn't know, I wrote a book and then I rewrote it and I'm finished with it actually.

00:50:19 So it's not out yet, but I'm pretty excited that I'm finished.

00:50:23 All the betas, there's beta seven out, has all chapters in it.

00:50:26 So if you're waiting for it to be done, it's done.

00:50:30 It's not in print form yet.

00:50:31 That's gonna happen in January or February.

00:50:33 So I'm pretty excited to get that done.

00:50:35 - I'm hoping for my copy at PyCon, Brian.

00:50:37 (laughing)

00:50:38 I'm pretty sure I paid for the last one as well.

00:50:40 I actually, I paid you in cash.

00:50:42 So I'm gonna give you a copy of my book.

00:50:44 - I'll bring, I'll bring at least--

00:50:45 - Maybe we can do a swap. - Swap, yeah.

00:50:48 That'd be great.

00:50:48 - Yeah, Anthony, I got your book over there.

00:50:50 I'm not sure what I can trade it for though.

00:50:52 (laughing)

00:50:53 No, that's awesome.

00:50:54 Congratulations, Brian.

00:50:55 - Thanks.

00:50:56 - Anthony, you got any extras you wanna share?

00:50:58 - Yeah, I'll be shipping fairly soon.

00:51:02 the JIT compiler that I've been working called Pigeon.

00:51:04 And I'll be going version one in two weeks.

00:51:09 So it's a Python 3.10 JIT compiler.

00:51:14 It's a, you basically just drop it into CPython and turn it on and then run your code and it just JIT compiles it in the background.

00:51:22 And in some cases makes it a lot faster and in other cases makes no difference.

00:51:26 (laughs)

00:51:28 But yeah, some of the benchmarks I've been doing like floating point math and integer math makes a massive difference.

00:51:37 So yeah, like 60%.

00:51:39 - Like the scientific side of thing, right?

00:51:41 - Yeah, so stuff that you would otherwise think, oh, I'm gonna redo this in Cython or something, like you don't have to add all the extra stuff.

00:51:50 You just kind of turn it on and yeah, the nBody benchmarks now 60% faster than standard CPython.

00:51:57 - That's great.

00:51:58 - And yeah, some of the other benchmarks like, well, 60% upwards.

00:52:01 - That's super cool.

00:52:02 So this work with Sam and the Nogill, does that throw a spinner in the works or is it a--

00:52:10 - It would make my life quite hard for a few weeks if it gets merged.

00:52:14 Yeah, so yeah, that could be interesting.

00:52:18 And I'm also working on a secret project, but I'll share that in a few weeks.

00:52:23 Yeah, Pigeon does, there's a comment in the chat, Pigeon does use Scikit-build, which I did want to call that out when we were talking about setup.py earlier, 'cause yeah, so Pidgin is all C++, and it uses CMake, which generates Makefiles.

00:52:41 So yeah, and it uses scikit-build, which is a CMake extension, I guess, around Python extension modules.

00:52:51 So that's how it kind of compiles.

00:52:52 It's really cool.

00:52:53 Big fan of scikit-build.

00:52:54 - Yeah, and I recommended using build earlier.

00:52:57 Henry on our episode together mentioned that if you have external non-Python code, like C code or Fortran or whatever, then instead of build scikit-build would be a good option to build the binary bits for that.

00:53:08 This is the other question I wanted to ask and Steve Dower beat me to it.

00:53:13 He states it as an assertion.

00:53:15 I was gonna ask you the question.

00:53:16 I bet once Pigeon ships, you'll get people interested in helping add optimization.

00:53:20 Yeah, so it's one thing to JIT compile.

00:53:22 It's another to just then straight up run it versus go, oh, we can inline this method.

00:53:26 and I see we can do this and then like, we could actually reuse this field because it's not used below and early free all that kind of stuff.

00:53:33 Where's the optimization of that one?

00:53:35 Yeah, I've got it like on the documentation page as a optimization section and I've kind of written up a lot of the optimizations and how they work, assertions that they make and compromises and stuff like that.

00:53:47 So yeah, if you're interested, there's this info on there.

00:53:50 But yeah, I'd love love more help on this.

00:53:53 The learning curve on the project is quite steep, but I'm trying to make it easier.

00:53:57 I mean, it is a compiler, so like, yeah.

00:54:02 And I just added ARM support as well.

00:54:03 So M1, Apple M1, and I tested Linux ARM 64 and in theory, Windows ARM, but I don't have access to any machines to test the Windows one.

00:54:16 And I could only test the Apple one remotely.

00:54:18 - If you need a periodic test, you can reach out.

00:54:20 I got a Windows 11 running on ARM.

00:54:23 - Oh, really?

00:54:24 Okay. - Yeah.

00:54:24 - Yeah, maybe I'll take you up on that.

00:54:25 - I know, very cool.

00:54:26 All right, I have a couple throughout there as well.

00:54:29 Python Software Foundation on Twitter, the PSF announces, "We're happy to announce "the Python Developer Survey 2021.

00:54:36 "Take part in it." This is the one that is then hosted and then the data analysis is done by JetBrains, but not influenced by JetBrains.

00:54:43 So I'll link to that in the show notes.

00:54:45 Be sure to get out there and take that.

00:54:47 Henry, out in the audience, I have something as well.

00:54:49 The feature for what you said the other day on Twitter.

00:54:52 I said, "After Python's bytes mentioned on yesterday's show, "I asked for a new feature and it's already in PipX.

00:55:00 "PipX run pypi command line wheels." And it basically, this is added to pypi command line.

00:55:08 And it'll tell you all sorts of cool stuff like the details of the wheel.

00:55:11 So you could run PipX, basically run pypi dash command dash line wheels, NumPy, however you run that, and it'll tell you like for NumPy on Mac OS 10 Universal, does it have a signature, is there a binary distribution, what versions are updated, supported, how old is it, how big is it?

00:55:29 Same thing for Linux architecture, ARM on Windows and so on, so on.

00:55:34 So you get like just this cool graph using Ridge of like tables of tables telling you about the status of wheels on different platforms straight out of PyPI, which I thought was cool.

00:55:44 - Nice.

00:55:45 - Yeah, so that's pretty good.

00:55:46 So Henry, thanks for making that happen.

00:55:48 Also on the last episode out on the YouTube, not live comments, we got a message from, I wanna make sure I get the attribution, from Bahram and said, we talked about, what is it?

00:56:00 - T-Bump.

00:56:01 - T-Bump, that was it, T-Bump for bumping the versions.

00:56:03 He said, "Oh, that's cool, I use bump to version," which is another option to do some similar types of things.

00:56:09 Could work with or without source control, all kinds of stuff, so fun one to check out.

00:56:14 And Brian, you sound really good this time.

00:56:18 Like last time I thought maybe a bee had gotten into your microphone.

00:56:21 What was the story of that?

00:56:23 - It's a long story.

00:56:24 Basically I had to throw a mic.

00:56:27 So I had a bad mic and a bad cable, but I have a new XLR cable.

00:56:30 - It's tough when the two things that are connected together are both broken at the same time.

00:56:35 - The buzzing I think was definitely my cable.

00:56:37 I think there was a feedback thing going on.

00:56:39 - You getting an SMS?

00:56:42 But then I was examining everything in my audio chain and I just got rid of the stuff that wasn't working.

00:56:50 - Yeah, you sound great.

00:56:51 New mics, even better than before.

00:56:53 So like a Phoenix, you're back.

00:56:55 - Nice image too.

00:56:57 - Yeah, and then have you got your Mac Pro yet?

00:57:00 - No, I just bought a Mac a couple years ago.

00:57:02 I'm not gonna buy another one right now.

00:57:04 - Anthony, are you using one of these to test your own version? - I don't know.

00:57:07 I don't have a spare $4,000.

00:57:09 - Yeah, it's not as bad as that.

00:57:10 - For another laptop.

00:57:12 And also, I was like, I don't really need a laptop 'cause I never leave the house, so like.

00:57:17 - Yeah, that is a big problem.

00:57:19 I mean, I am so loving my Mac mini and my 4K monitor that I'm just like, I don't wanna leave, I don't wanna leave.

00:57:24 All right, well, that's it for the extras.

00:57:26 I think it's time for a joke.

00:57:28 Maybe Robert's got the first one out there.

00:57:30 Can't complain about Brian, it's all about the hair.

00:57:32 You gotta see the livestream for that one.

00:57:34 But yeah, I agree with that.

00:57:35 - Next Halloween, I wanna go as Cousin It, so I got a ways to go.

00:57:39 Anthony, are you up for doing this joke?

00:57:41 Yeah, yeah, I got it on the, it's got on my screen.

00:57:45 Oh, you got it on yours?

00:57:46 Yeah, yeah, I'll do yours.

00:57:47 All right.

00:57:48 Okay, okay.

00:57:49 So I got it.

00:57:50 It's a picture.

00:57:51 So I'll have to describe it.

00:57:52 I couldn't stop laughing at this when I saw it.

00:57:54 So this is Frodo explaining to Gollum.

00:57:58 And there's Gollum sitting at a computer looking quite confused, looking at a picture of the ring.

00:58:03 And it says, "Buy now, one ETH." And as in Ethereum, right?

00:58:08 Yeah, yeah.

00:58:09 And Friar is basically trying to convince Gollum to buy an NFT of the ring instead of actually having the ring.

00:58:16 And underneath...

00:58:17 My precious, my digital precious.

00:58:19 So underneath it says, so you can't own the precious physically, but you can pay to have your name listed as its owner in an online distributed database.

00:58:29 It's only what is that like 400 US dollars, 500 Australian, something like that.

00:58:36 I know that's a lot for a listing.

00:58:38 I don't own any NFTs yet, nor have I sold any.

00:58:42 - I don't plan to either.

00:58:44 - Man, I feel like we're totally missing it.

00:58:46 We're missing an opportunity to brand some of our former episodes.

00:58:51 Maybe like, I could just take screenshots of Brian laughing at different times out of the live stream and then like turn it into a stream of NFTs that we'll retire upon.

00:59:00 - Oh yeah, let's do that.

00:59:02 Yeah.

00:59:04 - Oh, fantastic.

00:59:06 All right, oh, that was a good one.

00:59:07 Thanks, Anthony.

00:59:08 And thanks for being here on this big episode 256.

00:59:13 - Yeah, I feel like we've maybe gone slightly over this.

00:59:15 This is not really a Python bite this week.

00:59:17 It's more of a Python lunch, I think.

00:59:19 - Sandwich, eating some chips.

00:59:22 - Yeah, it's a proper meal, a Python dinner.

00:59:23 But it was a good one.

00:59:24 We talked about a lot of stuff.

00:59:25 And a bunch of great people in the audience gave us really good inside information on where things are going.

00:59:30 So thank you for being here.

00:59:31 - Yeah, so thanks everyone.

00:59:32 - Hello to everyone in the audience.

00:59:33 - Yeah, thanks, Brian.

00:59:34 Yeah, all right.

00:59:34 Bye, y'all.

