
00:00:00.000 --> 00:00:05.360
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds.


00:00:05.360 --> 00:00:12.160
This is episode 165 recorded January 16th, 2020. I'm Michael Kennedy.


00:00:12.160 --> 00:00:13.120
And I'm Brian Okken.


00:00:13.120 --> 00:00:17.360
And this episode is brought to you by DigitalOcean. They're a great supporter of the show.


00:00:17.360 --> 00:00:23.360
Check them out at pythonbytes.fm/digitalocean. Get $100 credit for new users. More on that later.


00:00:23.360 --> 00:00:27.680
Brian, we've got a lot of stuff to get through and I want to just let's start iterating through it, man.


00:00:27.680 --> 00:00:32.640
Okay, let's iterate through it. Also, I can't believe that it's halfway through January, whatever.


00:00:32.640 --> 00:00:38.960
Okay, so first off, let's talk here about iterators, iterators, generators, and coroutines.


00:00:38.960 --> 00:00:45.200
So I'm linking to an article that's pretty much what it's called by Mark McDonald. And when I


00:00:45.200 --> 00:00:50.720
googled this relationship between coroutines and generators, apparently everybody else knows this


00:00:50.720 --> 00:00:56.560
is a thing, but I missed out somehow. But this article is a really good introduction to all of


00:00:56.560 --> 00:00:59.060
of this concept and how they all work together.


00:00:59.060 --> 00:01:03.160
So it start, well, okay, I've got to start out with a beef.


00:01:03.160 --> 00:01:04.900
It starts out with like talking,


00:01:04.900 --> 00:01:06.540
trying to do a gentle introduction


00:01:06.540 --> 00:01:09.540
to the iterator protocol with like the


00:01:09.540 --> 00:01:12.220
dunder iter and dunder next.


00:01:12.220 --> 00:01:14.300
I just want people to stop doing that.


00:01:14.300 --> 00:01:16.340
Okay, muscle through it, but skip that part.


00:01:16.340 --> 00:01:17.780
It should be an appendix, I think,


00:01:17.780 --> 00:01:20.360
because people don't do that anymore.


00:01:20.360 --> 00:01:22.980
Okay, next, it goes, talks about generators,


00:01:22.980 --> 00:01:26.260
which are the same thing as this iterator protocol


00:01:26.260 --> 00:01:28.940
sort of, but using the yield function.


00:01:28.940 --> 00:01:31.700
I know there's differences, but this is how I do it.


00:01:31.700 --> 00:01:33.420
I use yield for generators.


00:01:33.420 --> 00:01:35.460
- It's so beautiful because you take the code


00:01:35.460 --> 00:01:37.220
that's not generator style,


00:01:37.220 --> 00:01:39.220
and then you just throw in yield


00:01:39.220 --> 00:01:42.220
instead of like list append or set.add


00:01:42.220 --> 00:01:44.460
or whatever you're gonna do to gather up the results.


00:01:44.460 --> 00:01:46.540
Just replace that with yield, boom, you're done.


00:01:46.540 --> 00:01:48.140
It's usually less code.


00:01:48.140 --> 00:01:49.340
I love it, it's great.


00:01:49.340 --> 00:01:50.180
I'm a big fan.


00:01:50.180 --> 00:01:52.460
- Like for instance, you just do throw things into a loop


00:01:52.460 --> 00:01:55.460
and put yield in there or yield the things you have,


00:01:55.460 --> 00:01:56.300
whatever it works.


00:01:56.300 --> 00:01:58.380
Unbound generators, it talks about,


00:01:58.380 --> 00:02:01.200
which means don't convert these to lists


00:02:01.200 --> 00:02:02.360
because they don't stop.


00:02:02.360 --> 00:02:04.660
So there are, it is possible to write a for loop


00:02:04.660 --> 00:02:06.880
that doesn't stop and therefore there's a way


00:02:06.880 --> 00:02:09.300
to do a generator that doesn't stop.


00:02:09.300 --> 00:02:10.140
So.


00:02:10.140 --> 00:02:11.660
- Right, if you're working on an infinite series,


00:02:11.660 --> 00:02:14.260
some kind of series that you use a generator for it,


00:02:14.260 --> 00:02:15.100
it might not stop.


00:02:15.100 --> 00:02:17.100
- Yeah, I mean, there's legitimate reasons to do this


00:02:17.100 --> 00:02:19.180
or maybe it does have an end,


00:02:19.180 --> 00:02:21.460
but it doesn't fit in memory and stuff like that.


00:02:21.460 --> 00:02:22.620
So beware.


00:02:22.620 --> 00:02:24.260
Generator expressions, you know,


00:02:24.260 --> 00:02:26.100
for some reason I just forget about.


00:02:26.100 --> 00:02:28.220
They're like list comprehensions,


00:02:28.220 --> 00:02:30.980
but you put parentheses instead of brackets


00:02:30.980 --> 00:02:33.460
and then it's a generator expression.


00:02:33.460 --> 00:02:34.280
- They're smooth, right?


00:02:34.280 --> 00:02:36.020
I mean, they don't have those sharp edges


00:02:36.020 --> 00:02:37.660
of those square braces.


00:02:37.660 --> 00:02:40.140
- Smooth, oh wow, that was bad.


00:02:40.140 --> 00:02:43.020
Okay, the reason why I highlighted this article


00:02:43.020 --> 00:02:45.260
really isn't for this stuff so far.


00:02:45.260 --> 00:02:47.300
It's a couple things.


00:02:47.300 --> 00:02:50.080
It talks about that generators can use other generators


00:02:50.080 --> 00:02:53.560
or nesting generators with a yield from,


00:02:53.560 --> 00:02:56.600
And this is cool, I didn't know this was a thing.


00:02:56.600 --> 00:02:59.000
So that you can have, so let's say bar and baz


00:02:59.000 --> 00:03:03.360
are generators, you can define a new function foo


00:03:03.360 --> 00:03:05.840
that yields from each of these,


00:03:05.840 --> 00:03:08.880
and it just goes through one and then when it's exhausted,


00:03:08.880 --> 00:03:10.260
it goes through the other.


00:03:10.260 --> 00:03:12.000
Really slick, did you know this was a thing?


00:03:12.000 --> 00:03:15.780
- Yeah, this was added after the yield keyboard was added.


00:03:15.780 --> 00:03:17.540
So yield was there for a while,


00:03:17.540 --> 00:03:19.120
and then what you would have to do before


00:03:19.120 --> 00:03:22.260
if you wanted one of these, you'd have to write a for loop


00:03:22.260 --> 00:03:25.140
that goes through every item in the sub generator


00:03:25.140 --> 00:03:26.420
and then just yield that out.


00:03:26.420 --> 00:03:28.420
But now you can just say yield from that thing.


00:03:28.420 --> 00:03:30.100
It's been a few versions that it came in.


00:03:30.100 --> 00:03:31.620
I can't remember exactly when,


00:03:31.620 --> 00:03:33.220
but yeah, it's a bit of a new feature.


00:03:33.220 --> 00:03:36.140
Maybe three, five, maybe three, four, I can't remember.


00:03:36.140 --> 00:03:37.580
But yeah, this is great.


00:03:37.580 --> 00:03:40.220
The place that I've used this most


00:03:40.220 --> 00:03:42.860
is recursive generators, right?


00:03:42.860 --> 00:03:44.420
You're writing a generator


00:03:44.420 --> 00:03:46.300
and it's going through some data structure,


00:03:46.300 --> 00:03:47.900
but then you get to the point where you're like,


00:03:47.900 --> 00:03:49.100
well, I need to call it again,


00:03:49.100 --> 00:03:51.420
but with a different node in a tree or something like that.


00:03:51.420 --> 00:03:53.100
Instead of having to loop over that to yield,


00:03:53.100 --> 00:03:55.460
you just say yield from, basically, the recursive call.


00:03:55.460 --> 00:03:56.300
It's beautiful.


00:03:56.300 --> 00:03:59.540
- Oh, yield from with a recursive call, nice.


00:03:59.540 --> 00:04:00.700
That hurts my head thinking about it.


00:04:00.700 --> 00:04:03.020
- Yeah, man, think about, you know how painful it was


00:04:03.020 --> 00:04:06.600
to learn recursion and how funky it is to learn


00:04:06.600 --> 00:04:07.780
about generators?


00:04:07.780 --> 00:04:10.580
You like mash them together and then the brain explodes.


00:04:10.580 --> 00:04:11.420
Yeah, it's great.


00:04:11.420 --> 00:04:13.740
- Okay, the article goes on and talks about the relationship


00:04:13.740 --> 00:04:17.220
between coroutines and generators because yield,


00:04:17.220 --> 00:04:20.260
you usually just has, it's just a thing that it ends up


00:04:20.260 --> 00:04:23.100
returning a value out of your function.


00:04:23.100 --> 00:04:26.840
But you can equal or do an assignment,


00:04:26.840 --> 00:04:29.580
a variable assignment from a yield,


00:04:29.580 --> 00:04:32.320
and that's one of the syntax things


00:04:32.320 --> 00:04:34.180
that works with coroutines.


00:04:34.180 --> 00:04:36.920
And I got to admit, I got lost at this point.


00:04:36.920 --> 00:04:39.860
So this is kind of a call to action to everybody.


00:04:39.860 --> 00:04:42.100
I'd really like to have a coroutine tutorial


00:04:42.100 --> 00:04:44.140
that could show me how to use coroutines


00:04:44.140 --> 00:04:47.200
for stuff that I really actually might use


00:04:47.200 --> 00:04:50.560
that isn't async related and can we skip


00:04:50.560 --> 00:04:52.520
the iterator protocol?


00:04:52.520 --> 00:04:54.280
- Or make it an appendix, like you said.


00:04:54.280 --> 00:04:55.840
- Yeah, do you use coroutines?


00:04:55.840 --> 00:04:57.920
I mean, they look neat, I just don't know how to use them.


00:04:57.920 --> 00:05:00.480
- I use generators all the time,


00:05:00.480 --> 00:05:04.040
and I use async methods which ultimately


00:05:04.040 --> 00:05:06.680
are fancy wrappers around coroutines,


00:05:06.680 --> 00:05:10.440
but I don't use coroutines directly, not knowingly anyway.


00:05:10.440 --> 00:05:12.840
- Okay, cool, I'll have to play with it a little bit.


00:05:12.840 --> 00:05:15.960
- Yeah, nice, something that I use a lot is requests.


00:05:15.960 --> 00:05:17.680
You probably use requests a lot as well.


00:05:17.680 --> 00:05:19.120
- Yeah, lots of people do.


00:05:19.120 --> 00:05:21.580
- Yeah, and requests is one of these things,


00:05:21.580 --> 00:05:25.020
you know, last time you spoke about PyPI stats,


00:05:25.020 --> 00:05:27.240
was it pypistats.org or something like that?


00:05:27.240 --> 00:05:29.760
And requests was certainly right near the top.


00:05:29.760 --> 00:05:32.200
It was not number one on the list of things being used,


00:05:32.200 --> 00:05:33.020
but it was near the top,


00:05:33.020 --> 00:05:37.840
and which that means it can't take too much change, right?


00:05:37.840 --> 00:05:40.080
There can't be too many features or changes made to it.


00:05:40.080 --> 00:05:41.860
So it would be nice to have something


00:05:41.860 --> 00:05:44.320
that makes working with requests nicer,


00:05:44.320 --> 00:05:45.600
that can change more quickly.


00:05:45.600 --> 00:05:47.560
So there's this thing that I came across


00:05:47.560 --> 00:05:49.840
called Request Toolbelt.


00:05:49.840 --> 00:05:52.000
Yeah, so Request Toolbelt is a, well,


00:05:52.000 --> 00:05:54.400
toolbelt of useful classes and functions


00:05:54.400 --> 00:05:57.880
to make working with requests easier.


00:05:57.880 --> 00:06:00.300
And it really does, at the moment, four things.


00:06:00.300 --> 00:06:01.840
But I think if people are out there


00:06:01.840 --> 00:06:04.240
and they're like, I always have to do this with requests,


00:06:04.240 --> 00:06:05.360
it's like these five lines,


00:06:05.360 --> 00:06:07.440
I gotta make sure I remember to do this right,


00:06:07.440 --> 00:06:09.880
it would be awesome to just extend this.


00:06:09.880 --> 00:06:13.280
So this is a small project by someone I can't remember.


00:06:13.280 --> 00:06:16.280
I don't think it says like really a meaningful name on it.


00:06:16.280 --> 00:06:17.880
Yeah, now it's just under requests actually.


00:06:17.880 --> 00:06:19.380
This is not the small project I think, you know,


00:06:19.380 --> 00:06:21.980
but I think it would be cool to like take those ideas


00:06:21.980 --> 00:06:24.680
if you see patterns that you're doing with the request library


00:06:24.680 --> 00:06:25.880
and fold them in here.


00:06:25.880 --> 00:06:28.480
So let me give you the rundown on the four things it does.


00:06:28.480 --> 00:06:33.280
First of all, if you're going to do multi-port form data encoding,


00:06:33.280 --> 00:06:35.880
like I have an image file


00:06:35.880 --> 00:06:38.880
and I want to upload it to the server, to the API.


00:06:38.880 --> 00:06:40.780
That's annoying, right?


00:06:40.780 --> 00:06:42.180
It's not super easy.


00:06:42.180 --> 00:06:45.700
But with this thing, it's really easy to go and just basically say,


00:06:45.700 --> 00:06:48.700
"Here's a file stream. That is field two."


00:06:48.700 --> 00:06:50.700
It's, you know, whatever it is, right?


00:06:50.700 --> 00:06:53.700
It's binary image data or it's text.


00:06:53.700 --> 00:06:58.200
And then you just say, "Here's my data, this multi-part form and encoder."


00:06:58.200 --> 00:07:01.700
And boom, it's just uploading files and doing all the stuff it has to do.


00:07:01.700 --> 00:07:03.200
That's incredible. Just a few lines of code.


00:07:03.200 --> 00:07:04.200
Yeah, it's really, really nice.


00:07:04.200 --> 00:07:07.200
And you don't have to think about like, "How do I do multi-part encoding again?"


00:07:07.200 --> 00:07:09.200
Just give it a file stream. You're good.


00:07:09.200 --> 00:07:11.920
The next one is the user agent constructor.


00:07:11.920 --> 00:07:15.180
So you have to set a header user dash agent, but then like, how do you


00:07:15.180 --> 00:07:16.480
construct that in a meaningful way?


00:07:16.480 --> 00:07:18.440
There's a class that takes or a method.


00:07:18.440 --> 00:07:23.080
It's just a method, take some arguments and it will generate the string that is


00:07:23.080 --> 00:07:28.960
a, I guess, compliance user agent for like your API app or whatever.


00:07:28.960 --> 00:07:29.680
So that's cool.


00:07:29.680 --> 00:07:30.640
User agent constructor.


00:07:30.640 --> 00:07:35.880
Sometimes you have to, when you're working with other systems, conform


00:07:35.880 --> 00:07:38.200
to certain SSL protocols, right?


00:07:38.200 --> 00:07:43.600
We have TLS version 1, 1.2, we have 2, I think, coming along.


00:07:43.600 --> 00:07:47.400
But there's different versions of TLS, which is the foundation of SSL, right?


00:07:47.400 --> 00:07:51.200
So they have an SSL adapter that lets you explicitly set,


00:07:51.200 --> 00:07:55.800
I want to use TLS 1.2 or 1.0 or something like that if you need to.


00:07:55.800 --> 00:07:57.000
Oh, wow. Okay.


00:07:57.000 --> 00:07:57.500
That's cool.


00:07:57.500 --> 00:08:01.400
And then one thing that you can do with requests is you can create a session


00:08:01.400 --> 00:08:03.800
and then it'll start talking over it.


00:08:03.800 --> 00:08:05.500
It probably reuses the connection.


00:08:05.500 --> 00:08:07.200
I'm not entirely sure of all the things it does.


00:08:07.200 --> 00:08:11.200
But one of the things the session does is it'll remember cookies and things like that.


00:08:11.200 --> 00:08:16.200
Well, maybe you want to make a series of requests using a request session


00:08:16.200 --> 00:08:21.200
that doesn't actually carry the cookies from time from request 1 to 2 to 3 and so on.


00:08:21.200 --> 00:08:26.200
So one of the classes in here is a forgetful cookie jar.


00:08:26.200 --> 00:08:32.200
So if you set the request session cookies container to the forgetful cookie jar,


00:08:32.200 --> 00:08:35.000
it will, well, it implements the protocol,


00:08:35.000 --> 00:08:37.740
but it always forgets its cookies, obviously.


00:08:37.740 --> 00:08:39.720
So it's a cool way to like clear out,


00:08:39.720 --> 00:08:41.080
still use sessions, but clear out


00:08:41.080 --> 00:08:42.760
cookie persistence across calls.


00:08:42.760 --> 00:08:45.340
- Is there a reason to use sessions without cookies?


00:08:45.340 --> 00:08:48.440
- Well, some websites behave differently


00:08:48.440 --> 00:08:50.600
if they think they've already seen you,


00:08:50.600 --> 00:08:51.800
or things like that, right? - Yeah, right.


00:08:51.800 --> 00:08:54.940
- Right, like maybe I want to test the login function,


00:08:54.940 --> 00:08:57.080
both working and not working,


00:08:57.080 --> 00:08:59.360
and then I want to try it of, I forgot my password,


00:08:59.360 --> 00:09:01.620
but I don't want it to know


00:09:01.620 --> 00:09:03.940
that I've already actually logged in in that sequence.


00:09:03.940 --> 00:09:06.340
Or something like-- it could be some series


00:09:06.340 --> 00:09:08.060
that you're testing for or playing with.


00:09:08.060 --> 00:09:08.560
OK.


00:09:08.560 --> 00:09:12.100
So if you've got to log in, your session login is still valid.


00:09:12.100 --> 00:09:13.340
But you have to go--


00:09:13.340 --> 00:09:17.060
Yeah, or maybe you're going to a place like some sort of paywalled ad


00:09:17.060 --> 00:09:17.860
place.


00:09:17.860 --> 00:09:19.980
And it's like, well, you can come here three times.


00:09:19.980 --> 00:09:22.260
But if you come here more than three times this month,


00:09:22.260 --> 00:09:23.540
we're going to show you the paywall.


00:09:23.540 --> 00:09:24.060
You know what I mean?


00:09:24.060 --> 00:09:26.340
You're like, well, you're using cookies for that.


00:09:26.340 --> 00:09:28.100
And my cookie jar is forgetful.


00:09:28.100 --> 00:09:28.980
I don't know.


00:09:28.980 --> 00:09:30.640
I don't personally have a reason for it.


00:09:30.640 --> 00:09:33.980
- I can imagine reasons that people might use that


00:09:33.980 --> 00:09:35.200
for automation and whatnot.


00:09:35.200 --> 00:09:37.240
- I predict that we will hear other people


00:09:37.240 --> 00:09:39.440
telling us the reasons now.


00:09:39.440 --> 00:09:40.480
- Yeah, absolutely.


00:09:40.480 --> 00:09:41.320
They definitely might.


00:09:41.320 --> 00:09:44.720
So people can visit pythonbyte.fm/165


00:09:44.720 --> 00:09:46.760
and down at the bottom, they can tell us why


00:09:46.760 --> 00:09:47.580
why they're doing it.


00:09:47.580 --> 00:09:48.420
It's a cool comment section.


00:09:48.420 --> 00:09:49.360
All right, speaking of cool,


00:09:49.360 --> 00:09:50.640
let me tell you about DigitalOcean.


00:09:50.640 --> 00:09:52.580
They're doing all sorts of good stuff.


00:09:52.580 --> 00:09:55.600
They're offering $100 credit for new users.


00:09:55.600 --> 00:09:57.860
So it was 50, it's back to 100, yay.


00:09:57.860 --> 00:09:58.700
That's great.


00:09:58.700 --> 00:10:03.860
And we, all of our infrastructure and stuff runs on DigitalOcean and it's been just perfect


00:10:03.860 --> 00:10:04.860
for years.


00:10:04.860 --> 00:10:05.860
So that's great.


00:10:05.860 --> 00:10:10.920
One of the things they recently released is memory heavy workload droplets.


00:10:10.920 --> 00:10:12.700
So memory focused droplets.


00:10:12.700 --> 00:10:17.020
So you can get up to eight gigs of RAM for each dedicated CPU.


00:10:17.020 --> 00:10:24.780
And it goes from two CPUs all the way up to, is that 32, 256 gigs of RAM available on your


00:10:24.780 --> 00:10:27.540
VM, which is kind of ridiculous if you really need that.


00:10:27.540 --> 00:10:29.540
but maybe you've got a workload that does.


00:10:29.540 --> 00:10:31.540
So it's really good for high memory apps


00:10:31.540 --> 00:10:34.540
like high performance SQL or NoSQL databases


00:10:34.540 --> 00:10:36.540
and memory caches like Redis,


00:10:36.540 --> 00:10:39.540
maybe some data analysis of lots of data, stuff like that.


00:10:39.540 --> 00:10:42.540
So check them out at pythonbytes.fm/digitalocean,


00:10:42.540 --> 00:10:45.540
get $100 credit from the users and support the show.


00:10:45.540 --> 00:10:47.540
Speaking of data science, what do you got, Brian? What's next?


00:10:47.540 --> 00:10:50.540
Yeah, speaking of data science, Pandas is used by lots of folks.


00:10:50.540 --> 00:10:55.540
Not just data science, but I know the data analysis people use Pandas quite a bit.


00:10:55.540 --> 00:11:02.540
And in episode 162, you weren't with us for that, but we covered a project called Bullwork.


00:11:02.540 --> 00:11:06.540
Yeah, I listened into that episode as well, and you and Ollie did a great job, that was fun.


00:11:06.540 --> 00:11:12.540
And we had a listener's suggestion about another package called Pandas Validation,


00:11:12.540 --> 00:11:16.540
and then I was just looking around to see if there's other projects.


00:11:16.540 --> 00:11:18.540
One of the others I found was Pandera.


00:11:18.540 --> 00:11:23.540
So I'll try to briefly talk about these, but Pandas Validation,


00:11:23.540 --> 00:11:26.540
Lance tells us that it lets you create a template


00:11:26.540 --> 00:11:29.440
for your data frame, how it should look,


00:11:29.440 --> 00:11:32.300
and then it validates your entire data frame


00:11:32.300 --> 00:11:33.180
against the template.


00:11:33.180 --> 00:11:35.740
So if you have a data frame with the first column


00:11:35.740 --> 00:11:38.300
being string and second column being dates


00:11:38.300 --> 00:11:41.740
and then an address, and you can use a mixture


00:11:41.740 --> 00:11:43.900
of built-in validate types to ensure


00:11:43.900 --> 00:11:45.380
that your data conforms to that.


00:11:45.380 --> 00:11:46.740
So that looks pretty cool.


00:11:46.740 --> 00:11:47.800
- Yeah, this is really nice.


00:11:47.800 --> 00:11:50.340
It's a little bit like, tiny bit like JSON schema


00:11:50.340 --> 00:11:51.180
or something.


00:11:51.180 --> 00:11:53.400
So you've got these pandas data frames or time series


00:11:53.400 --> 00:11:55.400
that it's just full of whatever,


00:11:55.400 --> 00:11:57.320
and then you can throw on top of it,


00:11:57.320 --> 00:11:59.480
cool validation and just it's all at once


00:11:59.480 --> 00:12:00.720
against the whole collection, right?


00:12:00.720 --> 00:12:04.760
- Yeah, and then Pandera is I think a similar sort of project


00:12:04.760 --> 00:12:07.540
that lets you set up types and properties


00:12:07.540 --> 00:12:09.920
for different columns of a data frame


00:12:09.920 --> 00:12:12.800
and perform validation to make sure


00:12:12.800 --> 00:12:15.440
sort of a schema validation sort of thing also.


00:12:15.440 --> 00:12:17.640
So they're all kind of solving a similar problem,


00:12:17.640 --> 00:12:21.240
but I was looking at it and the API and how you use it


00:12:21.240 --> 00:12:23.880
between Bulwark, Pandas Validation, and Pandera


00:12:23.880 --> 00:12:25.000
are all very different.


00:12:25.000 --> 00:12:25.840
- Yeah, they are.


00:12:25.840 --> 00:12:28.840
- I'd really like to hear if there is a common approach


00:12:28.840 --> 00:12:31.780
or if Pandas Validation, DataFrame Validation


00:12:31.780 --> 00:12:34.320
is just not something that's catching on yet


00:12:34.320 --> 00:12:36.260
or what people are using.


00:12:36.260 --> 00:12:37.100
I'd love to hear that.


00:12:37.100 --> 00:12:39.640
- Yeah, and I just noticed at the bottom of Pandera,


00:12:39.640 --> 00:12:41.960
they have other data validation libraries


00:12:41.960 --> 00:12:45.220
and others Panda-specific ones like Opulent Pandas


00:12:45.220 --> 00:12:47.240
and Panda Schema and Pandas Validator


00:12:47.240 --> 00:12:48.580
and Table Enforcer and so on.


00:12:48.580 --> 00:12:50.200
So apparently this is like a whole hole


00:12:50.200 --> 00:12:52.880
you can go down into that I was not even aware of.


00:12:52.880 --> 00:12:55.440
But I got to say the Pandera API,


00:12:55.440 --> 00:12:58.960
where you basically define a column, a data type,


00:12:58.960 --> 00:13:02.160
and then a lambda function that you give it


00:13:02.160 --> 00:13:04.280
that does the validation, that's super cool.


00:13:04.280 --> 00:13:05.120
I love that.


00:13:05.120 --> 00:13:06.040
- Yeah, it looks pretty clean.


00:13:06.040 --> 00:13:07.800
- Yeah, it looks incredibly flexible


00:13:07.800 --> 00:13:10.000
without getting like out of control.


00:13:10.000 --> 00:13:10.920
Speaking of out of control,


00:13:10.920 --> 00:13:13.360
you know what's a little bit out of control?


00:13:13.360 --> 00:13:14.600
GUIs for Python.


00:13:14.600 --> 00:13:16.800
Yeah, they're a little bit.


00:13:16.800 --> 00:13:18.040
And this way I don't mean,


00:13:18.040 --> 00:13:19.560
I'm not actually this time complaining


00:13:19.560 --> 00:13:21.960
about their absence or something like that.


00:13:21.960 --> 00:13:26.960
But one of the best libraries for building GUIs in Python


00:13:26.960 --> 00:13:31.120
has got to be Qt, right?


00:13:31.120 --> 00:13:32.560
Pranavski? - Yeah.


00:13:32.560 --> 00:13:36.240
- And I was inspired at the Python meetup


00:13:36.240 --> 00:13:39.000
that you're running out in West Portland


00:13:39.000 --> 00:13:41.040
when we saw Augie Moore give a presentation


00:13:41.040 --> 00:13:43.840
on how he used FBS, FMAN build system,


00:13:43.840 --> 00:13:48.280
plus PyInstaller, plus Qt to build,


00:13:48.280 --> 00:13:51.320
you know, nice packaged apps that are GUI apps


00:13:51.320 --> 00:13:52.380
that he could distribute around.


00:13:52.380 --> 00:13:53.340
And that was really cool.


00:13:53.340 --> 00:13:55.560
So one of the things though that drives me crazy


00:13:55.560 --> 00:13:59.060
is like we've got PyCute 5, we've got PySide 2,


00:13:59.060 --> 00:14:02.660
PyCute 4, we have PySide, we have Python 4 Qt,


00:14:02.660 --> 00:14:05.540
we have all these different things, right?


00:14:05.540 --> 00:14:07.540
I think Python 4 Qt might be the next version


00:14:07.540 --> 00:14:10.100
of PyCute 5 and so on.


00:14:10.100 --> 00:14:11.340
And I just don't know where to start, right?


00:14:11.340 --> 00:14:13.260
I'm looking at this going, oh my goodness,


00:14:13.260 --> 00:14:15.740
like you see different examples doing different things.


00:14:15.740 --> 00:14:20.740
And so I ran across something called QtPy, Q-T-P-Y, QtPy.


00:14:20.740 --> 00:14:23.060
- Yeah, or QtPy.


00:14:23.060 --> 00:14:27.020
- I wanted to say QtPy, but I don't know, QtPy.


00:14:27.020 --> 00:14:30.500
QtPy, so QtPy, no, QtPy,


00:14:30.500 --> 00:14:33.620
actually, one of the things about a lot of these libraries


00:14:33.620 --> 00:14:35.620
is they're like really cool little proof of concepts,


00:14:35.620 --> 00:14:39.900
but in practice, how real are they,


00:14:39.900 --> 00:14:42.020
how supported are they, and so on.


00:14:42.020 --> 00:14:44.860
One thing that seems real and supported is Anaconda,


00:14:44.860 --> 00:14:48.460
the Anaconda distribution, and with that comes the Spyder IDE,


00:14:48.460 --> 00:14:53.580
like the whole Anaconda continuum data science IDE thing, right?


00:14:53.580 --> 00:14:59.420
And this QtPy is the foundation of what they're doing to write that.


00:14:59.420 --> 00:15:01.380
- Okay. - At least it's in their GitHub repo.


00:15:01.380 --> 00:15:05.700
So it provides a uniform layer to support all those different libraries


00:15:05.700 --> 00:15:09.420
that I complained about with a single uniform API.


00:15:09.420 --> 00:15:11.820
So it's like an adaptive layer on top of all those things,


00:15:11.820 --> 00:15:14.740
and it figures out what version you're actually running against.


00:15:14.740 --> 00:15:17.220
and then it just adapts, so you write a code once,


00:15:17.220 --> 00:15:18.860
and then you can run it in all these different ways,


00:15:18.860 --> 00:15:20.300
or you can see these different examples.


00:15:20.300 --> 00:15:21.300
- Yeah, it's nice.


00:15:21.300 --> 00:15:22.140
- Yeah, it's cool, right?


00:15:22.140 --> 00:15:24.020
So this is created by the Spyder development team,


00:15:24.020 --> 00:15:25.580
and there's not a whole lot to it.


00:15:25.580 --> 00:15:28.980
Basically, it's like, well, here's a simpler way


00:15:28.980 --> 00:15:30.500
to work with these different libraries,


00:15:30.500 --> 00:15:32.420
because maybe you want a different license,


00:15:32.420 --> 00:15:36.620
or you want to go from PyQt 4 to PyQt 5,


00:15:36.620 --> 00:15:37.660
or something like that,


00:15:37.660 --> 00:15:39.500
'cause there's all these different examples


00:15:39.500 --> 00:15:40.940
built with all these different libraries,


00:15:40.940 --> 00:15:42.380
and they're not exactly compatible.


00:15:42.380 --> 00:15:43.740
So, quite cool, I think.


00:15:43.740 --> 00:15:46.740
- Yeah, and also during the presentation at the meetup,


00:15:46.740 --> 00:15:50.540
the Ogi mentioned that just he uses that


00:15:50.540 --> 00:15:53.900
and then if there's a problem with one of these packages,


00:15:53.900 --> 00:15:57.420
just uninstall it and install one of the other ones


00:15:57.420 --> 00:15:59.620
and you don't have to change your code at all.


00:15:59.620 --> 00:16:00.440
- Yeah, it's cool.


00:16:00.440 --> 00:16:01.420
- That's how this one works.


00:16:01.420 --> 00:16:02.940
One of the other things I thought was neat


00:16:02.940 --> 00:16:04.940
is at the bottom of the readme,


00:16:04.940 --> 00:16:07.180
they've got sponsors, like, you know,


00:16:07.180 --> 00:16:10.220
different sponsors at the bottom and become a sponsor.


00:16:10.220 --> 00:16:12.940
I have not seen an open source project do that before.


00:16:12.940 --> 00:16:13.940
- That's an interesting idea.


00:16:13.940 --> 00:16:15.860
- Yeah, it is definitely an interesting idea.


00:16:15.860 --> 00:16:17.180
I haven't seen that either.


00:16:17.180 --> 00:16:20.140
- Yeah, so maybe I'll try that on my little


00:16:20.140 --> 00:16:21.420
open source project.


00:16:21.420 --> 00:16:23.900
- Well, they also have the GitHub sponsor at the top.


00:16:23.900 --> 00:16:25.180
Are you using the GitHub sponsor?


00:16:25.180 --> 00:16:26.020
- No.


00:16:26.020 --> 00:16:27.020
- That's something people can turn on.


00:16:27.020 --> 00:16:28.780
I think that's really cool that GitHub did that,


00:16:28.780 --> 00:16:31.660
that people can now sponsor projects through GitHub


00:16:31.660 --> 00:16:35.820
instead of negotiating some deal separately with everyone.


00:16:35.820 --> 00:16:37.900
- Yeah, I wonder if they're tied together.


00:16:37.900 --> 00:16:38.900
I'll have to look into it.


00:16:38.900 --> 00:16:39.740
Anyway.


00:16:39.740 --> 00:16:41.020
- Yeah, yeah, check it out.


00:16:41.020 --> 00:16:42.740
All right, so yeah, what's next?


00:16:42.740 --> 00:16:45.820
- Well, I wanna shed some light on spreadsheets.


00:16:45.820 --> 00:16:47.960
(laughing)


00:16:47.960 --> 00:16:49.820
- They can be a dark place if you get sucked down


00:16:49.820 --> 00:16:52.060
into VBA or too far down there.


00:16:52.060 --> 00:16:55.140
- Yeah, so actually we got an email from Victor Kiss.


00:16:55.140 --> 00:16:57.740
I think it's Victor Kiss, K-I-S.


00:16:57.740 --> 00:17:01.980
He said he's got his very first open source project,


00:17:01.980 --> 00:17:03.620
but it looks darn cool.


00:17:03.620 --> 00:17:08.620
It's called PyLite XL, and it's an XLS spreadsheet thing


00:17:08.620 --> 00:17:12.060
that you can read and write spreadsheets with it.


00:17:12.060 --> 00:17:14.860
So it's a lightweight, zero-dependency,


00:17:14.860 --> 00:17:17.660
minimal functionality read/writer.


00:17:17.660 --> 00:17:19.920
It has, other than the standard library,


00:17:19.920 --> 00:17:21.940
there's no outside dependencies,


00:17:21.940 --> 00:17:26.940
and you can read and write modern XLSX and XLSM files,


00:17:26.940 --> 00:17:29.240
and with a very simple interface


00:17:29.240 --> 00:17:32.600
for getting access to the different sheets inside there,


00:17:32.600 --> 00:17:34.820
and rows and columns and stuff.


00:17:34.820 --> 00:17:36.660
Actually, it looks pretty cool.


00:17:36.660 --> 00:17:37.780
- Yeah, it looks totally useful


00:17:37.780 --> 00:17:40.540
if all you gotta do is get in there and get the data.


00:17:40.540 --> 00:17:43.220
I don't know if it does things like lets you change,


00:17:43.220 --> 00:17:45.900
say, conditional formatting or other weirdness,


00:17:45.900 --> 00:17:49.380
but definitely if you just want to open up an Excel worksheet,


00:17:49.380 --> 00:17:53.740
not a CSV, but a full-on XLS, and get it


00:17:53.740 --> 00:17:56.180
the data or the rows or whatever it is you're after,


00:17:56.180 --> 00:17:57.180
it's quite neat.


00:17:57.180 --> 00:17:59.180
If you go to the link that you're linking to


00:17:59.180 --> 00:18:01.820
and just scroll down a bit, there's a little animated GIF.


00:18:01.820 --> 00:18:03.940
And I think it tells you pretty much all you need to know.


00:18:03.940 --> 00:18:05.580
You just watch it for a second, and it's


00:18:05.580 --> 00:18:08.140
like, here's the few steps to go work with this Excel file.


00:18:08.140 --> 00:18:08.660
It's cool.


00:18:08.660 --> 00:18:10.860
He's already got documentation up with the API,


00:18:10.860 --> 00:18:13.220
but I found the most, on the docs,


00:18:13.220 --> 00:18:16.420
the best way also to get up to speed really quick


00:18:16.420 --> 00:18:19.460
is to look at his, he's got a handful of examples


00:18:19.460 --> 00:18:20.780
for how to do different things,


00:18:20.780 --> 00:18:22.620
and it's like, oh my gosh, I could just,


00:18:22.620 --> 00:18:25.980
if I needed to read Excel from Python,


00:18:25.980 --> 00:18:28.740
I could get started in a few minutes with this.


00:18:28.740 --> 00:18:32.060
- Yeah, that's very cool.


00:18:32.060 --> 00:18:35.140
Yep, and no dependencies, that's kind of nice as well.


00:18:35.140 --> 00:18:37.540
- I never really thought about why that would be important,


00:18:37.540 --> 00:18:42.500
but he lists one of the reasons is that if you were going to a few things,


00:18:42.500 --> 00:18:46.980
if you're going to compile it into another installer or something using PyInstaller,


00:18:46.980 --> 00:18:52.500
not having any DLL or other dependencies makes this easier.


00:18:52.500 --> 00:18:56.900
Then he even says that the library is just like a few source files.


00:18:56.900 --> 00:18:59.220
So if you don't even want to install this as a package,


00:18:59.220 --> 00:19:02.420
if you just want to copy this stuff into your own source,


00:19:02.420 --> 00:19:03.780
that that's an option.


00:19:03.780 --> 00:19:07.220
>> Right. Yeah, just vendor it and then you don't have dependencies either.


00:19:07.220 --> 00:19:09.660
Yeah, you know, getting updates, but you know.


00:19:09.660 --> 00:19:11.660
Yeah, wow. It's a trade-off.


00:19:11.660 --> 00:19:15.140
I'm going to tell you about this other thing.


00:19:15.140 --> 00:19:17.140
At first, it might not sound very exciting,


00:19:17.140 --> 00:19:19.140
but I'm actually pretty excited about it.


00:19:19.140 --> 00:19:21.980
I think this is quite cool. It's a clever little library.


00:19:21.980 --> 00:19:25.940
And this suggestion comes to us from Aiden Price.


00:19:25.940 --> 00:19:28.940
And he told us about some project he's working on


00:19:28.940 --> 00:19:31.580
using something called Python-Ranges.


00:19:31.580 --> 00:19:32.580
Okay.


00:19:32.580 --> 00:19:35.580
So we have range, like the built-in range.


00:19:35.580 --> 00:19:42.020
You can say start equals whatever, end equals whatever, and it goes from the start, integer-wise,


00:19:42.020 --> 00:19:45.140
up to, but not including the upper bound.


00:19:45.140 --> 00:19:49.060
But you can't use that range in more meaningful ways.


00:19:49.060 --> 00:19:55.980
So for example, if I had a range of 0 to 100, I can't easily ask, "Is x in there?"


00:19:55.980 --> 00:19:57.820
If x is a number.


00:19:57.820 --> 00:20:01.900
Or if I have two ranges and I want to intersect them, how do I do that?


00:20:01.900 --> 00:20:06.500
But this library takes that kind of basic idea, sort of like series,


00:20:06.500 --> 00:20:08.340
but with a lot of set operations.


00:20:08.340 --> 00:20:10.380
You can ask for the intersection of ranges.


00:20:10.380 --> 00:20:14.580
You can ask for whether or not they're mutually exclusive, things like that.


00:20:14.580 --> 00:20:17.020
So all the set operations you can do on it.


00:20:17.020 --> 00:20:21.500
But then it also extends that so you can have a range set,


00:20:21.500 --> 00:20:26.140
which is a bunch of different ranges, or even a range dictionary.


00:20:26.140 --> 00:20:27.940
So why would you care about that?


00:20:27.940 --> 00:20:29.780
So what you could do with a range dictionary


00:20:29.780 --> 00:20:32.820
you can use ranges as keys.


00:20:32.820 --> 00:20:34.140
So if the example they give--


00:20:34.140 --> 00:20:35.340
- It's crazy.


00:20:35.340 --> 00:20:37.900
- I know, but here's the example they give.


00:20:37.900 --> 00:20:40.900
It's probably abusing the concept of a dictionary,


00:20:40.900 --> 00:20:41.820
but it's really useful.


00:20:41.820 --> 00:20:44.380
So if you had an if statement that said,


00:20:44.380 --> 00:20:46.660
if, they use tax or something like that.


00:20:46.660 --> 00:20:49.540
Let's just say, if your income is zero to 10,000,


00:20:49.540 --> 00:20:50.900
you're in bracket A.


00:20:50.900 --> 00:20:55.220
If you're in 10,001 to 20,000, you're in bracket B.


00:20:55.220 --> 00:20:58.500
And so on, you had like a huge if, else if, else if, else if


00:20:58.500 --> 00:20:59.620
to test for that condition.


00:20:59.620 --> 00:21:03.380
you can create a range dictionary where the key is a range,


00:21:03.380 --> 00:21:07.040
zero to 10,000, 10,001 to 20,000 and so on,


00:21:07.040 --> 00:21:09.940
and then some information about it is the value.


00:21:09.940 --> 00:21:13.860
And then you could just take a number like 37,215


00:21:13.860 --> 00:21:15.260
and get it from the dictionary,


00:21:15.260 --> 00:21:17.540
say I want to get that from the dictionary


00:21:17.540 --> 00:21:18.900
and it'll return.


00:21:18.900 --> 00:21:21.800
So it'll basically do the test,


00:21:21.800 --> 00:21:24.400
like is this item in this range


00:21:24.400 --> 00:21:27.100
as part of the key match of a dictionary?


00:21:27.100 --> 00:21:28.820
- That's brilliant, that's cool.


00:21:28.820 --> 00:21:29.860
Isn't that cool?


00:21:29.860 --> 00:21:32.300
It's got to be abusing the idea of the dictionary, really.


00:21:32.300 --> 00:21:33.660
But it's pretty cool.


00:21:33.660 --> 00:21:37.180
Yeah, so it's almost like a switch statement in a sense.


00:21:37.180 --> 00:21:39.020
Like you could take those things and those


00:21:39.020 --> 00:21:41.820
that if else and replace it with this just flat statement


00:21:41.820 --> 00:21:44.540
of these ranges, and then it'll do the comparison


00:21:44.540 --> 00:21:45.860
kind of in the data structure.


00:21:45.860 --> 00:21:47.060
Yeah.


00:21:47.060 --> 00:21:48.180
Sweet.


00:21:48.180 --> 00:21:51.220
So there's a bunch of stuff that you can do with these ideas.


00:21:51.220 --> 00:21:52.620
They got some good examples.


00:21:52.620 --> 00:21:54.580
But that little example I gave you, I think,


00:21:54.580 --> 00:21:57.340
is probably the simplest one to tell you about,


00:21:57.340 --> 00:22:00.540
Because it gives you a good sense of why you might actually use this.


00:22:00.540 --> 00:22:03.300
A lot of times you look for these blocks or these ranges,


00:22:03.300 --> 00:22:07.660
and it's really cool to be able to test in here.


00:22:07.660 --> 00:22:10.260
You could even do really interesting stuff.


00:22:10.260 --> 00:22:14.060
I want to know, is this thing in any of these five ranges?


00:22:14.060 --> 00:22:17.620
You could just create one of these range sets or these range dictionaries


00:22:17.620 --> 00:22:20.380
and just ask, is this number in this set?


00:22:20.380 --> 00:22:23.660
If it is, it's in one of the five ranges that are in there.


00:22:23.660 --> 00:22:25.780
There's really cool ways to layer these together.


00:22:25.780 --> 00:22:27.780
- Yeah, and especially if you've got that all over the place.


00:22:27.780 --> 00:22:30.900
Like for instance, I'm thinking hardware stuff.


00:22:30.900 --> 00:22:32.060
- Yeah, it's gotta be in there,


00:22:32.060 --> 00:22:34.420
a bunch of numbers and frequencies and whatnot, right?


00:22:34.420 --> 00:22:36.820
- Right, so if I've got different power levels,


00:22:36.820 --> 00:22:38.940
for instance, they'll have different attenuators


00:22:38.940 --> 00:22:41.020
that'll kick in at different power levels,


00:22:41.020 --> 00:22:43.100
but I don't want those power level numbers


00:22:43.100 --> 00:22:45.180
to be hard-coded all over my code.


00:22:45.180 --> 00:22:49.060
So having some central place where I put those in place


00:22:49.060 --> 00:22:50.900
so that I can just throw in a number


00:22:50.900 --> 00:22:52.280
and it gets based on that,


00:22:52.280 --> 00:22:54.020
I know what the attenuation is or something,


00:22:54.020 --> 00:22:55.100
that'd be great.


00:22:55.100 --> 00:22:56.180
- That's cool. - Yeah, that's cool.


00:22:56.180 --> 00:23:00.100
It also occurs to me this might be useful for testing, right?


00:23:00.100 --> 00:23:02.280
Because then your assert statement


00:23:02.280 --> 00:23:04.180
could have a little bit of ambiguity, right?


00:23:04.180 --> 00:23:06.340
If there's like, well, as long as it's in this range,


00:23:06.340 --> 00:23:08.080
it's okay, but if it's not, then it's not.


00:23:08.080 --> 00:23:10.380
And so maybe that's also an interesting way


00:23:10.380 --> 00:23:11.420
to simplify testing.


00:23:11.420 --> 00:23:13.060
- Yeah, yeah, okay, cool.


00:23:13.060 --> 00:23:15.500
- Cool, well, anyway, I think that's a much more


00:23:15.500 --> 00:23:17.580
interesting project than it just sort of sounds like.


00:23:17.580 --> 00:23:19.900
It's like, well, Python has range built in, whatever.


00:23:19.900 --> 00:23:21.220
But no, this is cool, yeah.


00:23:21.220 --> 00:23:22.040
- Yeah, I like it. - Yeah, that's it


00:23:22.040 --> 00:23:22.880
for our main items.


00:23:22.880 --> 00:23:24.340
What else do you want to tell folks about?


00:23:24.340 --> 00:23:26.940
Well, I spent some time last night,


00:23:26.940 --> 00:23:28.620
I think I brought this up, I don't know,


00:23:28.620 --> 00:23:30.400
last time or the time before,


00:23:30.400 --> 00:23:34.500
that I have a few open source projects, not many,


00:23:34.500 --> 00:23:37.000
but one of them was lacking some work


00:23:37.000 --> 00:23:39.260
'cause it had a bunch of like support requests


00:23:39.260 --> 00:23:41.180
or whatever you call them, issues.


00:23:41.180 --> 00:23:43.820
So pytest check, I went in last night,


00:23:43.820 --> 00:23:45.180
I went and cleaned all those up


00:23:45.180 --> 00:23:47.680
and solved a couple of minor problems.


00:23:47.680 --> 00:23:50.440
But one of the things that I ran into


00:23:50.440 --> 00:23:52.140
that was interesting and I don't,


00:23:52.140 --> 00:23:54.140
I mean, I just kind of wanted to highlight it,


00:23:54.140 --> 00:23:56.180
is plugin for pytest.


00:23:56.180 --> 00:23:58.360
There are other plugins for pytest.


00:23:58.360 --> 00:24:00.920
Some of them don't work together very well


00:24:00.920 --> 00:24:04.440
because of all the, the way they abuse and use pytest,


00:24:04.440 --> 00:24:06.720
I'm definitely abusing pytest hook functions


00:24:06.720 --> 00:24:08.000
with pytest check.


00:24:08.000 --> 00:24:10.920
Intentionally, what it does is it allows you


00:24:10.920 --> 00:24:13.860
to check certain things within your test,


00:24:13.860 --> 00:24:17.880
but not fail right away so that you can continue on.


00:24:17.880 --> 00:24:19.680
And then if any of the checks fail,


00:24:19.680 --> 00:24:22.200
it actually fails the entire test


00:24:22.200 --> 00:24:23.760
and tells you all of the failures.


00:24:23.760 --> 00:24:26.600
- It fails them at the end, not as it hits the first one, right?


00:24:26.600 --> 00:24:31.360
- Yes, but to get away with that, the only way I could figure out is to hook into the


00:24:31.360 --> 00:24:36.680
report function, which happens much later after the test completes.


00:24:36.680 --> 00:24:42.240
Well, so there's a whole bunch of other plugins that allow you to rerun tests if they fail.


00:24:42.240 --> 00:24:47.300
There's rerun failures, there's flaky, there's retry, and there's a handful of others.


00:24:47.300 --> 00:24:52.120
Most of them are not compatible with pytest check because of the way, at the time that


00:24:52.120 --> 00:24:54.520
that they're checking to see if something fails


00:24:54.520 --> 00:24:55.800
and the time I'm checking.


00:24:55.800 --> 00:24:57.840
So I guess I just want to point out


00:24:57.840 --> 00:24:59.480
that if you want that to happen,


00:24:59.480 --> 00:25:02.360
rerun failures works, flaky and retry don't.


00:25:02.360 --> 00:25:03.200
- Nice.


00:25:03.200 --> 00:25:04.440
Oh, that's really cool.


00:25:04.440 --> 00:25:08.400
I wonder if you could like monkey patch flaky or retry


00:25:08.400 --> 00:25:10.560
to like force it to check later or something like that.


00:25:10.560 --> 00:25:12.840
- Maybe, but also I actually commented


00:25:12.840 --> 00:25:16.000
in the defect report that it doesn't work with flaky.


00:25:16.000 --> 00:25:18.160
And I said, well, I think it should try.


00:25:18.160 --> 00:25:20.600
And I had a comment from somebody that said,


00:25:20.600 --> 00:25:23.080
you're just gonna kill yourself off if you think


00:25:23.080 --> 00:25:24.860
that you're gonna try to make it compatible


00:25:24.860 --> 00:25:26.520
with all the plugins out there.


00:25:26.520 --> 00:25:28.740
So as long as there is a workaround,


00:25:28.740 --> 00:25:31.760
it's fine to say, if you need this to work


00:25:31.760 --> 00:25:33.940
with something like this, use this other plugin


00:25:33.940 --> 00:25:35.320
and not my problem.


00:25:35.320 --> 00:25:36.160
- Yeah.


00:25:36.160 --> 00:25:39.060
- It seems cold, but open source is a side project.


00:25:39.060 --> 00:25:39.960
- Yeah, absolutely.


00:25:39.960 --> 00:25:42.000
Cool, well, I've got a couple short ones here.


00:25:42.000 --> 00:25:45.680
Jeremy Schendel sent in just a quick message


00:25:45.680 --> 00:25:47.920
that Pandas is now 1.0.


00:25:47.920 --> 00:25:51.260
It had been living on the zero-ver branch for a long time,


00:25:51.260 --> 00:25:54.260
but it has migrated over to semantic versioning,


00:25:54.260 --> 00:25:56.000
and it has a couple of new cool features.


00:25:56.000 --> 00:25:58.280
So we were already speaking about pandas earlier.


00:25:58.280 --> 00:26:00.120
If you're using pandas or whatever,


00:26:00.120 --> 00:26:02.200
hey, pandas 1.0 is out, that's a big deal.


00:26:02.200 --> 00:26:04.800
Probably also means a lot for the stability of the API.


00:26:04.800 --> 00:26:05.640
- Yeah, it's good.


00:26:05.640 --> 00:26:08.560
- For the PyCharm fans out there, myself included,


00:26:08.560 --> 00:26:09.920
friend of the show, Anthony Shaw,


00:26:09.920 --> 00:26:14.040
has created a PyCharm plugin called Python Security,


00:26:14.040 --> 00:26:15.200
so we'll link to that.


00:26:15.200 --> 00:26:17.680
And basically what it does is it goes through


00:26:17.680 --> 00:26:19.980
Much like when you're working with PyCharm,


00:26:19.980 --> 00:26:21.320
it automatically tells you,


00:26:21.320 --> 00:26:23.160
oh, you're doing a type mismatch,


00:26:23.160 --> 00:26:25.520
you're passing an int and it expects a string,


00:26:25.520 --> 00:26:27.520
or you're calling this function


00:26:27.520 --> 00:26:29.320
and it takes two arguments but you're giving it three.


00:26:29.320 --> 00:26:31.520
It does all that check-in in real time.


00:26:31.520 --> 00:26:32.800
This one is for security,


00:26:32.800 --> 00:26:35.720
so it checks for unsafe loading the YAML files,


00:26:35.720 --> 00:26:38.080
remote code execution in Flask,


00:26:38.080 --> 00:26:40.920
man in the middle with a request for HTTPS,


00:26:40.920 --> 00:26:44.080
and debug configs in Flask and Django.


00:26:44.080 --> 00:26:45.200
So that's kind of cool.


00:26:45.200 --> 00:26:46.040
You want that?


00:26:46.040 --> 00:26:46.880
Get that and install it.


00:26:46.880 --> 00:26:47.720
- Nice.


00:26:47.720 --> 00:26:49.740
- Yeah, and then finally, I have my Python


00:26:49.740 --> 00:26:52.180
for Decision Makers course that sort of talks about


00:26:52.180 --> 00:26:54.000
how to, whether or not you should,


00:26:54.000 --> 00:26:58.160
and how to position adopting Python at your organization.


00:26:58.160 --> 00:27:00.200
So I did a webcast on that, and that's already passed.


00:27:00.200 --> 00:27:03.000
That went really well, but the recording of it is out.


00:27:03.000 --> 00:27:05.560
So I'll link to the recording if people want to sign up.


00:27:05.560 --> 00:27:07.700
You gotta like register for the thing,


00:27:07.700 --> 00:27:09.000
but then you just watch the recording.


00:27:09.000 --> 00:27:10.120
- Oh, I'll have to check that out.


00:27:10.120 --> 00:27:10.960
Nice.


00:27:10.960 --> 00:27:11.840
- Yeah, yeah, it was fun, a lot of fun.


00:27:11.840 --> 00:27:13.680
A lot of good conversations there.


00:27:13.680 --> 00:27:15.480
All right, I don't know about this joke,


00:27:15.480 --> 00:27:16.480
but I'm gonna do it anyway.


00:27:16.480 --> 00:27:17.320
You ready? - Yeah.


00:27:17.320 --> 00:27:20.360
- You've heard about optimists and pessimists


00:27:20.360 --> 00:27:21.720
and a glass, right?


00:27:21.720 --> 00:27:24.400
A glass is either half full or half empty,


00:27:24.400 --> 00:27:27.000
depending on which side of that divide you land on, right?


00:27:27.000 --> 00:27:27.840
- Yep.


00:27:27.840 --> 00:27:30.020
- Well, there's a third angle here.


00:27:30.020 --> 00:27:32.880
And for the engineer,


00:27:32.880 --> 00:27:35.240
you don't see the glass as half full or half empty.


00:27:35.240 --> 00:27:37.400
No, the glass is twice as large as it needs to be.


00:27:37.400 --> 00:27:38.420
- Exactly.


00:27:38.420 --> 00:27:42.480
- It's all about capacity planning, come on.


00:27:42.480 --> 00:27:44.940
- Yeah, okay, so I don't have a joke,


00:27:44.940 --> 00:27:47.900
but I came up with a little bit of a brain teaser this morning.


00:27:47.900 --> 00:27:48.940
>> Okay, nice.


00:27:48.940 --> 00:27:52.180
>> So, yeah, when is 90 greater than 100?


00:27:52.180 --> 00:27:54.260
>> When is 90 greater than 100?


00:27:54.260 --> 00:27:57.300
>> Yeah. Well, there's a couple of places.


00:27:57.300 --> 00:27:59.580
One, which I was informed on Twitter,


00:27:59.580 --> 00:28:01.940
is when you're comparing a string literals.


00:28:01.940 --> 00:28:03.780
>> True. Yeah, yeah. You're going to say,


00:28:03.780 --> 00:28:07.140
quote, 90 less than, quote, 100. It's false. Yeah, okay.


00:28:07.140 --> 00:28:09.460
>> The other one is microwave times.


00:28:09.460 --> 00:28:11.540
So, 100.


00:28:11.540 --> 00:28:13.780
>> Nice.


00:28:13.780 --> 00:28:14.780
Anyway, that's it.


00:28:14.780 --> 00:28:15.780
All right.


00:28:15.780 --> 00:28:18.660
Well, you've left people with something to think about.


00:28:18.660 --> 00:28:20.060
And yeah, thanks for being here.


00:28:20.060 --> 00:28:21.060
Thanks.


00:28:21.060 --> 00:28:22.060
Bye.


00:28:22.060 --> 00:28:23.060
Yeah.


00:28:23.060 --> 00:28:24.060
Bye.


00:28:24.060 --> 00:28:25.060
Thank you for listening to Python Bytes.


00:28:25.060 --> 00:28:26.060
Follow the show on Twitter via @PythonBytes.


00:28:26.060 --> 00:28:29.020
That's Python Bytes as in B-Y-T-E-S.


00:28:29.020 --> 00:28:32.140
And get the full show notes at PythonBytes.FM.


00:28:32.140 --> 00:28:35.860
If you have a news item you want featured, just visit PythonBytes.FM and send it our


00:28:35.860 --> 00:28:36.860
way.


00:28:36.860 --> 00:28:39.060
We're always on the lookout for sharing something cool.


00:28:39.060 --> 00:28:42.340
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:28:42.340 --> 00:28:45.420
Thank you for listening and sharing this podcast with your friends and colleagues.

