
00:00:00.000 --> 00:00:08.240
Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. It's episode 85 recorded on July 3rd


00:00:08.240 --> 00:00:12.980
2018 I'm Michael Kennedy and I'm Brian Huckin. Hey Brian. How you doing? I am doing great today


00:00:12.980 --> 00:00:16.080
I know it's another day in paradise here in the Pacific Northwest in there


00:00:16.080 --> 00:00:22.260
Yeah, as long as you're not driving because it's the 3rd of July that can be problematic. We do have our traffic issues


00:00:22.260 --> 00:00:27.440
Don't we? Yeah. Yeah. Well, yeah before we get to items. I want to say thank you to digital ocean


00:00:27.440 --> 00:00:30.000
And they've been supporting the show in a major way.


00:00:30.000 --> 00:00:34.000
And so, you know, like I've said, our stuff runs on DigitalOcean, which is really great.


00:00:34.000 --> 00:00:40.480
You want yours to run on it, you go to pythonbytes.fm/digitalocean, get $100 free credit for new users.


00:00:40.480 --> 00:00:46.400
I find myself, Brian, more and more loving the concept of limited use of type hints in


00:00:46.400 --> 00:00:47.400
just the right places.


00:00:47.400 --> 00:00:49.400
I was just typing that 15 minutes ago.


00:00:49.400 --> 00:00:50.400
Were you?


00:00:50.400 --> 00:00:51.400
Yeah.


00:00:51.400 --> 00:00:52.400
Yeah.


00:00:52.400 --> 00:00:53.400
Yeah, that's nice.


00:00:53.400 --> 00:00:54.880
And the more I use them, the more I'm warming to them.


00:00:54.880 --> 00:01:00.480
And there's a couple resources that came by just recently that I really enjoyed.


00:01:00.480 --> 00:01:07.540
So there's an article called "The State of Type hints in Python" and this is a fairly


00:01:07.540 --> 00:01:13.900
thorough article but it pretty much like, okay now it's 2018, what is it like to use


00:01:13.900 --> 00:01:15.660
type hints now?


00:01:15.660 --> 00:01:22.780
And especially, and I, okay, the article talks about if you want to use type hints in 2.7


00:01:22.780 --> 00:01:25.580
prior to 3.6 sort of stuff.


00:01:25.580 --> 00:01:30.340
And that's doable, but I still think


00:01:30.340 --> 00:01:34.980
that you get the best experience if you're using Python 3,


00:01:34.980 --> 00:01:37.100
and especially Python 3.6.


00:01:37.100 --> 00:01:42.020
'Cause you can use commented type annotations in 2.7,


00:01:42.020 --> 00:01:44.740
I believe, because they're just comments.


00:01:44.740 --> 00:01:47.900
But adding the little arrows for the types


00:01:47.900 --> 00:01:49.320
and the colons and everything,


00:01:49.320 --> 00:01:50.980
it's more concise and it looks better.


00:01:50.980 --> 00:01:56.020
And I, my personal feeling is, unless you really are trying to convert a large codebase,


00:01:56.020 --> 00:02:00.780
which I know some people are, I would switch to three first and then add type hints if


00:02:00.780 --> 00:02:02.940
it was me, if you have that option.


00:02:02.940 --> 00:02:03.940
Yeah.


00:02:03.940 --> 00:02:07.720
And three six is even better than three five because you can put types on variables.


00:02:07.720 --> 00:02:11.740
You can, although I find my I'm not really doing that when I'm using type hints.


00:02:11.740 --> 00:02:15.220
I'm just mostly doing it for interface to document interfaces.


00:02:15.220 --> 00:02:21.620
You know where I end up doing that is where there are core functions that I can't control.


00:02:21.620 --> 00:02:27.520
So I need to call a function and I know it returns something rich that I know what the


00:02:27.520 --> 00:02:32.540
type is and I would like to be able to get better editor experiences, better autocomplete,


00:02:32.540 --> 00:02:36.580
but it's a package function, not something I've created.


00:02:36.580 --> 00:02:42.220
So then you can say this variable is a, you know, SQLAlchemy session, for example.


00:02:42.220 --> 00:02:46.420
And then it's like, oh, I see now you've got add and delete and all this stuff.


00:02:46.420 --> 00:02:47.420
And it's amazing, right?


00:02:47.420 --> 00:02:48.420
Yeah.


00:02:48.420 --> 00:02:52.820
And you know, one of the things I like about the article and I agree with is the main point


00:02:52.820 --> 00:02:57.620
of a good reason to use type ints isn't, I mean, it is good to be able to catch all the


00:02:57.620 --> 00:03:02.460
bugs, catch more bugs and incompatibilities, but it does, there's a lot of reasons why


00:03:02.460 --> 00:03:08.500
it makes your code more maintainable and more readable because there's, you just have that


00:03:08.500 --> 00:03:13.460
option to be able to document it right there to say, "Hey, this is the type that this function


00:03:13.460 --> 00:03:14.460
needs."


00:03:14.460 --> 00:03:16.300
There's so many things.


00:03:16.300 --> 00:03:20.180
The article walks through a few of them, like refactoring is easier, helping when you come


00:03:20.180 --> 00:03:23.780
back and read it later, it makes it more obvious.


00:03:23.780 --> 00:03:28.100
When you're writing, yes, there are some great polymorphic functions that can take multiple


00:03:28.100 --> 00:03:31.500
types of type, multiple types.


00:03:31.500 --> 00:03:33.860
Most of the code I write really does expect one type.


00:03:33.860 --> 00:03:38.460
it expects a list or maybe the most generic thing is it expects an iterable.


00:03:38.460 --> 00:03:42.500
And I actually still not sure how to write that in the type shed stuff.


00:03:42.500 --> 00:03:46.380
I'm sure there's a way, but yeah, this article does talk about things like unions.


00:03:46.380 --> 00:03:51.380
I ran my pie on my, on some of my code and I realized that I had,


00:03:51.380 --> 00:03:57.060
some uninitial, some default values set to none, which I wanted to be okay.


00:03:57.060 --> 00:04:01.060
But if they're not none, they're strings or they're integers or something.


00:04:01.520 --> 00:04:05.120
And the type system allows you to add a union type


00:04:05.120 --> 00:04:08.880
so you can say, well, it's either none or it's a string.


00:04:08.880 --> 00:04:11.000
And it's pretty interesting,


00:04:11.000 --> 00:04:13.280
but this article talks about a lot of stuff


00:04:13.280 --> 00:04:15.280
that I really had forgotten about actually


00:04:15.280 --> 00:04:18.240
is like interface stub files.


00:04:18.240 --> 00:04:20.640
And I haven't worked with those at all yet.


00:04:20.640 --> 00:04:22.760
And I know that the TypeShed is around


00:04:22.760 --> 00:04:26.200
that has these interface stub files


00:04:26.200 --> 00:04:28.000
for the standard library


00:04:28.000 --> 00:04:29.720
and a bunch of other popular libraries,


00:04:29.720 --> 00:04:32.160
but I haven't really used it yet.


00:04:32.160 --> 00:04:35.640
So, or maybe I have, but I just don't know about it.


00:04:35.640 --> 00:04:37.240
But I don't know, this is good.


00:04:37.240 --> 00:04:39.200
- Yeah, you have an interesting quote in here


00:04:39.200 --> 00:04:41.240
that type hints should be used


00:04:41.240 --> 00:04:43.200
whenever unit tests are worth writing.


00:04:43.200 --> 00:04:44.400
What's the backstory on that?


00:04:44.400 --> 00:04:46.640
- It's just one of the, in the conclusion of the article,


00:04:46.640 --> 00:04:47.720
it talked about that.


00:04:47.720 --> 00:04:50.040
It said, okay, all of this information,


00:04:50.040 --> 00:04:51.240
but when should you use it?


00:04:51.240 --> 00:04:54.560
I mean, if you're gonna just write a little utility function


00:04:54.560 --> 00:04:57.040
for, I don't know, for your own use or something,


00:04:57.040 --> 00:04:58.320
do you need type hints then?


00:04:58.320 --> 00:05:01.280
And they just came up with this rule of thumb


00:05:01.280 --> 00:05:03.800
is if you're gonna, I quoted it just as is.


00:05:03.800 --> 00:05:04.740
It says unit test.


00:05:04.740 --> 00:05:07.940
I personally would just say automated tests.


00:05:07.940 --> 00:05:10.440
If the code you're writing is worth having automated tests,


00:05:10.440 --> 00:05:12.760
it's worth putting, trying to think about


00:05:12.760 --> 00:05:14.320
where you're gonna put type.


00:05:14.320 --> 00:05:16.760
The other thing I wanted to add was I was listening to,


00:05:16.760 --> 00:05:18.720
I got about halfway through it so far,


00:05:18.720 --> 00:05:22.260
but there's a recent seminar that Guido presented


00:05:22.260 --> 00:05:26.220
at Stanford called Optional Static Typing for Python.


00:05:26.220 --> 00:05:28.860
And in part of that, it talks about MyPi,


00:05:28.860 --> 00:05:30.660
but it talks about some of the beginnings of this,


00:05:30.660 --> 00:05:32.440
of like where this came from,


00:05:32.440 --> 00:05:35.640
and how it came to be what it is now.


00:05:35.640 --> 00:05:38.460
And so for, and how are we dealing with it now?


00:05:38.460 --> 00:05:40.540
So it's about an hour and a half, though,


00:05:40.540 --> 00:05:42.740
so it's a chunk of time to watch, but--


00:05:42.740 --> 00:05:43.580
- It's a commitment.


00:05:43.580 --> 00:05:44.620
Yeah, but it sounds interesting.


00:05:44.620 --> 00:05:47.020
- Yeah, but I think I recommend even like


00:05:47.020 --> 00:05:49.180
the first 20 minutes for some of the backstory


00:05:49.180 --> 00:05:50.100
is interesting.


00:05:50.100 --> 00:05:52.300
- Okay, yeah, that's really cool.


00:05:52.300 --> 00:05:54.700
I'm definitely a fan of it, and I'm glad you're bringing it up.


00:05:54.700 --> 00:05:55.740
There's some nice stuff in there.


00:05:55.740 --> 00:06:00.540
So I have no idea how to transition from type hints to MongoDB.


00:06:00.540 --> 00:06:02.840
So I guess that's a reasonable transition.


00:06:02.840 --> 00:06:03.340
That's it.


00:06:03.340 --> 00:06:06.340
So I've actually found a pretty interesting thing on MongoDB.


00:06:06.340 --> 00:06:08.340
People know that I'm a fan, of course.


00:06:08.340 --> 00:06:13.340
And one of the big decision points, I think, when you're trying to decide,


00:06:13.340 --> 00:06:16.540
do I go with Django or do I go with one of these smaller web frameworks


00:06:16.540 --> 00:06:20.540
like Pyramid Flask, you know, many of the other micro frameworks,


00:06:20.540 --> 00:06:23.640
is the micro frameworks, you can pick the little pieces.


00:06:23.640 --> 00:06:26.700
I want SQL can be here, and maybe this part's gonna be Mongo


00:06:26.700 --> 00:06:29.840
and this part's gonna be this other aspect


00:06:29.840 --> 00:06:31.520
that I would like to bring into this framework


00:06:31.520 --> 00:06:32.840
for authentication or something.


00:06:32.840 --> 00:06:34.520
Whereas Django is more like,


00:06:34.520 --> 00:06:38.120
here are your big building blocks, click them together.


00:06:38.120 --> 00:06:41.160
And a big challenge there can be like the Django ORM


00:06:41.160 --> 00:06:43.400
and the admin stuff, it's all tied into that.


00:06:43.400 --> 00:06:45.900
And well, if you don't wanna use that,


00:06:45.900 --> 00:06:47.120
then you're kind of out of luck.


00:06:47.120 --> 00:06:48.600
There's a lot of challenges


00:06:48.600 --> 00:06:50.600
of sort of bringing your own thing.


00:06:50.600 --> 00:06:51.800
You lose some of the value, at least,


00:06:51.800 --> 00:06:53.240
out of Django, traditionally.


00:06:53.240 --> 00:06:56.800
So the Django ORM, it depends on a,


00:06:56.800 --> 00:06:59.160
not a particular SQL database,


00:06:59.160 --> 00:07:01.560
but it does assume a SQL database, is that correct?


00:07:01.560 --> 00:07:03.760
- Yeah, I believe so, I believe that's right.


00:07:03.760 --> 00:07:07.280
And things like the Django admin section,


00:07:07.280 --> 00:07:08.840
which is really valuable to some people,


00:07:08.840 --> 00:07:10.800
depends upon the Django ORM, right?


00:07:10.800 --> 00:07:12.720
So like there's these layers of stuff,


00:07:12.720 --> 00:07:15.540
and so if you pull out the bottom brick, there's problems.


00:07:15.540 --> 00:07:19.000
But I, actually this guy named Robin sent me a heads up


00:07:19.000 --> 00:07:22.260
about this thing on Twitter that I had never heard of,


00:07:22.260 --> 00:07:26.420
but it's pretty awesome, called Django MongoDB Connector.


00:07:26.420 --> 00:07:27.260
- Cool.


00:07:27.260 --> 00:07:31.340
- Yeah, so the idea is you continue to use the Django ORM


00:07:31.340 --> 00:07:32.940
just like you normally would,


00:07:32.940 --> 00:07:37.080
except it's now had its backend swapped out to be MongoDB.


00:07:37.080 --> 00:07:39.380
And that's pretty awesome.


00:07:39.380 --> 00:07:41.460
And at first you're like, okay, well,


00:07:41.460 --> 00:07:43.620
how much value am I gonna get in that, right?


00:07:43.620 --> 00:07:46.260
Like if I give up, if I continue to use


00:07:46.260 --> 00:07:48.620
what is effectively a relational ORM,


00:07:48.620 --> 00:07:51.400
like you can't use the hierarchical documents, right?


00:07:51.400 --> 00:07:53.520
But what they've done, a little bit like Mongo engine,


00:07:53.520 --> 00:07:56.960
is the parameters that go into your query


00:07:56.960 --> 00:07:59.060
can be more interesting, right?


00:07:59.060 --> 00:08:01.240
So you would say, like imagine if you had a blog,


00:08:01.240 --> 00:08:03.880
you say blog.objects.filter,


00:08:03.880 --> 00:08:06.520
and you would pass like name equals something


00:08:06.520 --> 00:08:09.280
in traditional relational stuff.


00:08:09.280 --> 00:08:13.240
But in Mongo, you might want to traverse


00:08:13.240 --> 00:08:18.040
like into a blog object and then go find the name


00:08:18.040 --> 00:08:20.600
and then find that the name is contained in a set.


00:08:20.600 --> 00:08:23.320
And so you just pass different arguments


00:08:23.320 --> 00:08:25.320
to the filter parameter and boom,


00:08:25.320 --> 00:08:27.600
it becomes Mongo, Oracle enabled.


00:08:27.600 --> 00:08:28.440
It's beautiful.


00:08:28.440 --> 00:08:29.920
- Wow, that's actually pretty cool.


00:08:29.920 --> 00:08:30.740
- Isn't that cool?


00:08:30.740 --> 00:08:31.580
It's so simple.


00:08:31.580 --> 00:08:32.680
Yeah, and it says you can also use it


00:08:32.680 --> 00:08:35.760
to connect third party apps like Django REST Framework


00:08:35.760 --> 00:08:37.760
and ViewFlow and other stuff,


00:08:37.760 --> 00:08:40.620
which heavily depend upon these Django models.


00:08:40.620 --> 00:08:42.480
They can now super easily be integrated


00:08:42.480 --> 00:08:43.320
with MongoDB as well.


00:08:43.320 --> 00:08:44.760
- And it has a hilarious name.


00:08:44.760 --> 00:08:46.640
- Yeah, what is his name?


00:08:46.640 --> 00:08:47.480
- Django.


00:08:47.480 --> 00:08:49.840
- Django, yeah, or something like Django.


00:08:49.840 --> 00:08:51.700
- The app, the official Django app


00:08:51.700 --> 00:08:53.600
you put in the settings file is Django.


00:08:53.600 --> 00:08:54.580
- That's great.


00:08:54.580 --> 00:08:57.180
Yeah, 'cause for, I get it, Django, Mongo.


00:08:57.180 --> 00:09:00.380
- Django, Mongo, smushed together, yeah, exactly.


00:09:00.380 --> 00:09:03.780
Another thing that's interesting is this is a Python 3.6


00:09:03.780 --> 00:09:06.620
or higher only, and Mongo 3.4 or higher,


00:09:06.620 --> 00:09:08.500
which is like, I don't know, a year,


00:09:08.500 --> 00:09:09.820
year and a half old, something like that,


00:09:09.820 --> 00:09:11.620
so it's not quite so new.


00:09:11.620 --> 00:09:14.820
But Python 3.6 is really quite new for this store.


00:09:14.820 --> 00:09:17.900
- Yeah, but I mean, it just also seems like something


00:09:17.900 --> 00:09:19.260
you would start a project with.


00:09:19.260 --> 00:09:21.780
you probably wouldn't like rip apart an old project.


00:09:21.780 --> 00:09:22.620
- Probably not.


00:09:22.620 --> 00:09:26.300
I mean, you may have an app you're trying to make better


00:09:26.300 --> 00:09:27.620
and migrate, but yeah,


00:09:27.620 --> 00:09:30.140
I would think you probably wouldn't really.


00:09:30.140 --> 00:09:31.060
Yeah, I'd throw that more in there,


00:09:31.060 --> 00:09:33.580
just like it even has like a pretty high requirement


00:09:33.580 --> 00:09:35.980
for MongoDB, just so if somebody's got like an older


00:09:35.980 --> 00:09:37.580
or something or other, you can't just jam it in there.


00:09:37.580 --> 00:09:39.860
You gotta make sure you got the new goodness.


00:09:39.860 --> 00:09:44.860
- Okay, so I was actually, so this is not sort of related.


00:09:44.860 --> 00:09:46.620
I was talking to somebody about Mongo before


00:09:46.620 --> 00:09:49.860
and they asked me about migrations from,


00:09:49.860 --> 00:09:51.680
if you're gonna change the databases.


00:09:51.680 --> 00:09:53.540
Does Mongo have that sort of concept?


00:09:53.540 --> 00:09:55.100
- It does have that concept.


00:09:55.100 --> 00:09:57.480
You do it a lot less often.


00:09:57.480 --> 00:09:59.780
Much of the time at what your migration is,


00:09:59.780 --> 00:10:02.820
is something like I'm adding an additional column here.


00:10:02.820 --> 00:10:05.180
I'm adding another table there, right?


00:10:05.180 --> 00:10:07.540
Like it's not that common that you're say,


00:10:07.540 --> 00:10:10.180
deleting a column or you're renaming a column.


00:10:10.180 --> 00:10:12.000
It happens, but it's way less often


00:10:12.000 --> 00:10:14.020
than new column, new table.


00:10:14.020 --> 00:10:17.220
And in MongoDB, new column or new table is automatic.


00:10:17.220 --> 00:10:18.060
You don't do anything.


00:10:18.060 --> 00:10:20.720
It just adapts, right, as you use it.


00:10:20.720 --> 00:10:22.820
So you don't actually run any scripts or migrations


00:10:22.820 --> 00:10:25.220
to do the common transformations.


00:10:25.220 --> 00:10:28.500
But if you're going to say, like, delete a column


00:10:28.500 --> 00:10:30.900
or reorganize your data, you would do the same thing


00:10:30.900 --> 00:10:32.540
and you would run a script against it.


00:10:32.540 --> 00:10:35.220
I don't think there's something like a limbic


00:10:35.220 --> 00:10:36.980
where there's like a framework for migrations,


00:10:36.980 --> 00:10:39.180
but the concept of like a migration with a script


00:10:39.180 --> 00:10:41.140
definitely exists, but it's not very common.


00:10:41.140 --> 00:10:42.740
- All right, and I brought this up hopefully


00:10:42.740 --> 00:10:44.260
because if we're wrong about this,


00:10:44.260 --> 00:10:47.180
somebody can get a hold of us and tell us.


00:10:47.180 --> 00:10:48.820
- Yeah, if there's some cool framework for doing that,


00:10:48.820 --> 00:10:49.780
let us know.


00:10:49.780 --> 00:10:50.980
- Yeah.


00:10:50.980 --> 00:10:51.980
- Awesome.


00:10:51.980 --> 00:10:54.840
So what's this deal with Python idioms


00:10:54.840 --> 00:10:55.680
you got going on here?


00:10:55.680 --> 00:10:57.500
- This was a tiny little article,


00:10:57.500 --> 00:10:59.100
which, you know, sometimes I like that,


00:10:59.100 --> 00:11:00.420
just a small article of like,


00:11:00.420 --> 00:11:02.380
hey, I learned this thing and it's helpful,


00:11:02.380 --> 00:11:05.740
and here's a small blog post about it.


00:11:05.740 --> 00:11:09.300
And this was Amir Rachnam.


00:11:09.300 --> 00:11:11.380
Why do I try to pronounce people's names?


00:11:11.380 --> 00:11:13.140
Anyway, multi-lined strings.


00:11:13.140 --> 00:11:16.580
So the idiom he's talking about is multi-lined strings.


00:11:16.580 --> 00:11:19.980
So if I've got, and we know this is like a triple quote,


00:11:19.980 --> 00:11:21.340
you can have strings.


00:11:21.340 --> 00:11:23.740
Strings can be multiple lines if you use triple quote.


00:11:23.740 --> 00:11:27.500
And we usually see these with doc strings,


00:11:27.500 --> 00:11:30.220
but it can be really anywhere you're gonna use a string.


00:11:30.220 --> 00:11:33.500
But if you're using it like in the middle of a function,


00:11:33.500 --> 00:11:38.500
it's awkward because it either, you have to,


00:11:38.500 --> 00:11:41.220
everything but the first line has to be,


00:11:41.220 --> 00:11:43.900
is like over on the left side of your page,


00:11:43.900 --> 00:11:45.860
and it's not indented the right place.


00:11:45.860 --> 00:11:47.500
And if you do indent it over,


00:11:47.500 --> 00:11:50.900
it's including all of those spaces in your string.


00:11:50.900 --> 00:11:53.780
But the way to get around it is to use


00:11:53.780 --> 00:11:56.420
a standard library function,


00:11:56.420 --> 00:11:58.620
the module or the package is Textwrap


00:11:58.620 --> 00:12:00.180
and the function is ddent.


00:12:00.180 --> 00:12:02.540
So it's Textwrap.ddent,


00:12:02.540 --> 00:12:06.900
and that will strip out what it does is it takes,


00:12:06.900 --> 00:12:09.820
looks at all of the lines of the multi-line string


00:12:09.820 --> 00:12:12.480
and takes the common spacing at the beginning of it


00:12:12.480 --> 00:12:14.260
and just rips that off.


00:12:14.260 --> 00:12:16.440
So it's just automatic.


00:12:16.440 --> 00:12:19.680
And I was actually, I use this enough with,


00:12:19.680 --> 00:12:22.820
actually I use it, you know, generating tools


00:12:22.820 --> 00:12:23.820
and generating other things.


00:12:23.820 --> 00:12:25.740
And I can't think of a good example right now


00:12:25.740 --> 00:12:27.900
where I've used it, but I have used it enough times


00:12:27.900 --> 00:12:30.420
and I've looked this up that I want people to know about it.


00:12:30.420 --> 00:12:31.540
It's an easy trick.


00:12:31.540 --> 00:12:33.080
So it's good.


00:12:33.080 --> 00:12:33.920
- Oh, I love it.


00:12:33.920 --> 00:12:34.740
I didn't know about it.


00:12:34.740 --> 00:12:35.580
Thank you.


00:12:35.580 --> 00:12:36.420
This is cool.


00:12:36.420 --> 00:12:38.780
So I've definitely had multi-line text strings


00:12:38.780 --> 00:12:43.340
I've got some big formatted piece of text and I'm like, all right, I, instead of trying


00:12:43.340 --> 00:12:47.020
to break this apart and turn it into something I can store in code, if I just, you know,


00:12:47.020 --> 00:12:49.820
triple quote it and put it in here, it's going to be golden.


00:12:49.820 --> 00:12:54.980
But you do get that weird, you've got to like, indent it to the left outside of your function


00:12:54.980 --> 00:12:56.480
and it's all bizarro.


00:12:56.480 --> 00:12:59.660
So this lets you can keep your code looking really nice.


00:12:59.660 --> 00:13:03.500
And it obviously puts the string to like visually into the block that it belongs in.


00:13:03.500 --> 00:13:04.500
It's really nice.


00:13:04.500 --> 00:13:05.500
I love it.


00:13:05.500 --> 00:13:12.180
I've tried to punt and define a global variable or at least a file global variable so that


00:13:12.180 --> 00:13:13.180
I can get around it.


00:13:13.180 --> 00:13:14.180
But this is cleaner and it's good.


00:13:14.180 --> 00:13:15.180
It's a good thing.


00:13:15.180 --> 00:13:16.180
Yeah, I love it.


00:13:16.180 --> 00:13:17.180
That's awesome.


00:13:17.180 --> 00:13:20.060
Other good things include DigitalOcean.


00:13:20.060 --> 00:13:25.540
So definitely want to tell people about DigitalOcean because they're sponsoring the show in addition


00:13:25.540 --> 00:13:28.020
to just us being happy customers there.


00:13:28.020 --> 00:13:32.180
So you can go from zero to a customized server in 60 seconds.


00:13:32.180 --> 00:13:33.900
I've talked about how we've done cool stuff


00:13:33.900 --> 00:13:37.000
with virtual machines, how they've got spaces,


00:13:37.000 --> 00:13:38.540
how they've got other various things


00:13:38.540 --> 00:13:40.860
that are pretty awesome, like the one-click containers


00:13:40.860 --> 00:13:42.140
for like machine learning.


00:13:42.140 --> 00:13:43.540
One thing I haven't talked about yet


00:13:43.540 --> 00:13:45.820
is container distributions.


00:13:45.820 --> 00:13:49.700
So if you wanna set up your own like Docker container,


00:13:49.700 --> 00:13:52.460
you can go click over there and create a core OS


00:13:52.460 --> 00:13:55.500
or Fedora Atomic server, even a Rancher OS,


00:13:55.500 --> 00:13:57.860
which I've never used, but it's got a cool icon.


00:13:57.860 --> 00:13:59.380
And you can just fire one of those up


00:13:59.380 --> 00:14:02.600
and it's like all ready to go to be your container host


00:14:02.600 --> 00:14:05.740
for all sorts of cool Docker stuff and Kubernetes.


00:14:05.740 --> 00:14:07.920
So definitely check them out


00:14:07.920 --> 00:14:10.140
over at pythonbytes.fm/digitalocean.


00:14:10.140 --> 00:14:12.900
Get a $300 credit to play around with those kinds of things.


00:14:12.900 --> 00:14:14.300
- That's actually pretty cool.


00:14:14.300 --> 00:14:15.140
I like it.


00:14:15.140 --> 00:14:15.960
- Yeah, I like it too.


00:14:15.960 --> 00:14:18.260
- And I had a DigitalOcean accident the other day.


00:14:18.260 --> 00:14:19.100
- Oh no, what happened?


00:14:19.100 --> 00:14:22.780
- Well, I wore my favorite DigitalOcean t-shirt to work


00:14:22.780 --> 00:14:24.300
and I spilled coffee on it,


00:14:24.300 --> 00:14:26.340
but luckily it was a gray shirt


00:14:26.340 --> 00:14:29.220
and it didn't show up as a stain, so it's all good.


00:14:29.220 --> 00:14:32.460
- It's pretty fail safe, unless you're painting.


00:14:32.460 --> 00:14:35.060
So how do you feel about your design skills, Brian?


00:14:35.060 --> 00:14:38.840
Like, are you a fan of shuffling around CSS


00:14:38.840 --> 00:14:40.400
and HTML and that kind of stuff?


00:14:40.400 --> 00:14:42.700
- No, CSS is definitely those things


00:14:42.700 --> 00:14:44.900
where I either rely on a framework


00:14:44.900 --> 00:14:47.220
or I try to hire somebody.


00:14:47.220 --> 00:14:48.180
- Nice.


00:14:48.180 --> 00:14:50.680
So something that you might be able to use


00:14:50.680 --> 00:14:52.300
if you're using Flask,


00:14:52.300 --> 00:14:54.280
and I know you've played around Flask recently,


00:14:54.280 --> 00:14:56.900
is this thing called Flaskerizer.


00:14:56.900 --> 00:14:58.060
Flaskerizer.


00:14:58.060 --> 00:15:03.420
I don't know what the name stands for, I guess to make flask ish or something.


00:15:03.420 --> 00:15:08.020
But the idea is you can go to one of these places that has bootstrap themes.


00:15:08.020 --> 00:15:09.020
So bootstrap is nice.


00:15:09.020 --> 00:15:12.540
Obviously, it's a design front end CSS front end design framework.


00:15:12.540 --> 00:15:13.620
Pretty well known.


00:15:13.620 --> 00:15:17.540
But what's really awesome about it are the themes like people make these pre made themes


00:15:17.540 --> 00:15:23.260
and for like 10 bucks or even free a lot of times you can get like incredible web designs


00:15:23.260 --> 00:15:27.340
and you just drop them in right you just put in your logic into the bits where it where


00:15:27.340 --> 00:15:28.180
There it goes.


00:15:28.180 --> 00:15:29.660
So this Flaskerizer thing is,


00:15:29.660 --> 00:15:32.540
what you can do is you can download the themes


00:15:32.540 --> 00:15:34.620
from certain locations that have a known format,


00:15:34.620 --> 00:15:37.020
and it will convert the bootstrap,


00:15:37.020 --> 00:15:39.700
the static bootstrap theme into a Flask app.


00:15:39.700 --> 00:15:40.700
- Oh, that's cool.


00:15:40.700 --> 00:15:41.540
- Yes.


00:15:41.540 --> 00:15:42.380
(laughing)


00:15:42.380 --> 00:15:44.060
Isn't that sweet?


00:15:44.060 --> 00:15:45.980
So instead of worrying about how it all goes together,


00:15:45.980 --> 00:15:48.260
you just go, you know, command line, boom.


00:15:48.260 --> 00:15:50.840
Now I've got like a dynamic running bootstrap theme


00:15:50.840 --> 00:15:51.680
in Flask.


00:15:51.680 --> 00:15:52.500
- I like it.


00:15:52.500 --> 00:15:55.260
- Yeah, so there's a couple of sites that they work with.


00:15:55.260 --> 00:15:57.140
I don't know how general this is,


00:15:57.140 --> 00:16:01.940
I don't know how common bootstrap themes are, but I think it's pretty cool.


00:16:01.940 --> 00:16:06.740
And of course, if you open up the website and you look around, you can tell that it's


00:16:06.740 --> 00:16:07.880
a proper design.


00:16:07.880 --> 00:16:13.580
This is the GitHub repo because they go from just plain white, like no design, no logo


00:16:13.580 --> 00:16:17.740
to clearly a designer with a black turtleneck.


00:16:17.740 --> 00:16:21.420
Yeah, he's definitely a designer.


00:16:21.420 --> 00:16:22.420
Yeah, definitely.


00:16:22.420 --> 00:16:23.420
Dark black glasses too.


00:16:23.420 --> 00:16:24.420
And a beard.


00:16:24.420 --> 00:16:25.420
Yeah, exactly.


00:16:25.420 --> 00:16:26.420
Oh, he's all good.


00:16:26.420 --> 00:16:28.460
You got all the boxes checked.


00:16:28.460 --> 00:16:29.300
Very nice.


00:16:29.300 --> 00:16:32.460
So if you want to do a Flask site


00:16:32.460 --> 00:16:35.100
and you want a design to go pick a theme


00:16:35.100 --> 00:16:36.540
and just start working with that design,


00:16:36.540 --> 00:16:37.460
check out FlaskRiser.


00:16:37.460 --> 00:16:38.940
It could get you up and running really quick.


00:16:38.940 --> 00:16:39.780
- Wow, interesting.


00:16:39.780 --> 00:16:41.180
I was reading down this.


00:16:41.180 --> 00:16:43.580
This is one of the few applications I've ever seen


00:16:43.580 --> 00:16:47.380
or the frameworks that uses Nose 2 as its testing.


00:16:47.380 --> 00:16:48.220
- Oh, nice.


00:16:48.220 --> 00:16:49.220
What's the story of Nose 2?


00:16:49.220 --> 00:16:50.420
I only know about Nose.


00:16:50.420 --> 00:16:52.620
- Well, so Nose was sort of kind of abandoned,


00:16:52.620 --> 00:16:55.700
but Nose 2 was a, well, I'll offend anybody


00:16:55.700 --> 00:16:57.340
that's still working on Nose.


00:16:57.340 --> 00:17:00.880
But Nose 2 was kind of trying to reboot it


00:17:00.880 --> 00:17:03.400
and redo a lot of the,


00:17:03.400 --> 00:17:05.480
make a backward compatibility break


00:17:05.480 --> 00:17:07.440
so it doesn't do some of the things


00:17:07.440 --> 00:17:10.920
but it does other neat things and clean up the code base.


00:17:10.920 --> 00:17:13.920
But still, it started kind of running,


00:17:13.920 --> 00:17:16.160
getting some steam at the same time pytest


00:17:16.160 --> 00:17:18.360
was sort of getting a lot of steam.


00:17:18.360 --> 00:17:21.920
So I think that there's not a lot of projects that use it,


00:17:21.920 --> 00:17:23.420
but I mean, it's still reasonable.


00:17:23.420 --> 00:17:27.820
It's just since there's not that many people working on it,


00:17:27.820 --> 00:17:30.580
getting fixes and stuff is sometimes an issue.


00:17:30.580 --> 00:17:31.420
- Yeah, nice.


00:17:31.420 --> 00:17:33.620
Okay, well, very interesting, very interesting.


00:17:33.620 --> 00:17:35.140
So are you learning Python now?


00:17:35.140 --> 00:17:36.500
Is this your next project?


00:17:36.500 --> 00:17:37.820
(laughing)


00:17:37.820 --> 00:17:40.420
- No, but I thought this was fun


00:17:40.420 --> 00:17:43.100
because I encourage every youth I meet,


00:17:43.100 --> 00:17:46.460
and actually everybody I meet, to learn Python.


00:17:46.460 --> 00:17:48.500
And I always tell them--


00:17:48.500 --> 00:17:49.340
- Good advice, good advice.


00:17:49.340 --> 00:17:51.700
- Yeah, I tell them the reason isn't


00:17:51.700 --> 00:17:53.740
so that you can become a programmer.


00:17:53.740 --> 00:17:57.180
It's so that you can, like, it's a power boost


00:17:57.180 --> 00:17:59.420
to what are the other skills you have.


00:17:59.420 --> 00:18:01.940
So if you're a biology student, also learn Python


00:18:01.940 --> 00:18:05.140
'cause now you're a biology student that knows Python.


00:18:05.140 --> 00:18:07.420
- You're now the favorite person in the lab


00:18:07.420 --> 00:18:08.980
that can actually solve the problem


00:18:08.980 --> 00:18:11.220
with the data that they got in Excel or something, right?


00:18:11.220 --> 00:18:12.300
- Yeah, and it doesn't matter.


00:18:12.300 --> 00:18:13.660
It's science or non-science.


00:18:13.660 --> 00:18:16.820
If you're an artist that also knows how to code,


00:18:16.820 --> 00:18:18.060
it's just gonna help.


00:18:18.060 --> 00:18:19.740
There's no downside.


00:18:19.740 --> 00:18:22.940
And so a lot of times with code, people kind of have,


00:18:22.940 --> 00:18:24.980
they start writing code and it's precious to them


00:18:24.980 --> 00:18:26.180
and they don't want to throw it away


00:18:26.180 --> 00:18:27.900
'cause they worked really hard on it.


00:18:27.900 --> 00:18:30.060
And so I wanted to highlight this article


00:18:30.060 --> 00:18:31.540
because of its advice.


00:18:31.540 --> 00:18:34.540
This is, I think it's a real Python,


00:18:34.540 --> 00:18:36.220
yeah, it's a real Python article.


00:18:36.220 --> 00:18:39.860
And it's called Learn Python the Methodical Way.


00:18:39.860 --> 00:18:41.500
And I'm just gonna read the steps.


00:18:41.500 --> 00:18:44.340
The steps are make your way through a tutorial


00:18:44.340 --> 00:18:46.980
or a chapter from what you're learning,


00:18:46.980 --> 00:18:51.420
a book or something that teaches you some discrete four to six step skill.


00:18:51.420 --> 00:18:54.260
You're going to work through it while you're reading it.


00:18:54.260 --> 00:18:58.660
Now, write down the steps as distinctly and generically as possible.


00:18:58.660 --> 00:19:04.140
Put the tutorial and chapter and its solutions away and build your project


00:19:04.140 --> 00:19:09.540
from scratch and peek at the solution and the steps only when you get stuck.


00:19:09.540 --> 00:19:15.340
Now erase the whole whole thing and do it again and then go back completely,


00:19:15.380 --> 00:19:18.120
put it away, and then erase everything and do it again


00:19:18.120 --> 00:19:20.020
like a day or two later.


00:19:20.020 --> 00:19:23.120
And this sort of erasing and redoing it,


00:19:23.120 --> 00:19:25.980
I think at least a couple times is good for people


00:19:25.980 --> 00:19:29.060
because it gets rid of that preciousness


00:19:29.060 --> 00:19:32.060
because the second time you do something,


00:19:32.060 --> 00:19:33.320
it's always faster.


00:19:33.320 --> 00:19:34.940
Anyway, I just thought this was neat advice,


00:19:34.940 --> 00:19:35.780
so I thought I'd share it.


00:19:35.780 --> 00:19:37.840
- I like it, it's pretty interesting.


00:19:37.840 --> 00:19:40.980
I definitely feel like when you're new,


00:19:40.980 --> 00:19:43.120
you feel like I put a lot of effort into that,


00:19:43.120 --> 00:19:45.400
And so there's no way I'm throwing that away.


00:19:45.400 --> 00:19:47.600
But the really valuable lesson is,


00:19:47.600 --> 00:19:51.800
actually the second time, it's probably better.


00:19:51.800 --> 00:19:53.140
And the third time, you're like,


00:19:53.140 --> 00:19:57.680
whoa, this is really a much improved version of what I did.


00:19:57.680 --> 00:20:00.040
And it takes less and less time, of course, right?


00:20:00.040 --> 00:20:02.160
- Yeah, and also you end up,


00:20:02.160 --> 00:20:04.920
it's easier to throw away the cruft.


00:20:04.920 --> 00:20:08.040
And if it's just something you spend an hour working on,


00:20:08.040 --> 00:20:09.780
even if you had to redo the entire thing,


00:20:09.780 --> 00:20:11.280
it's only a wasted hour,


00:20:11.280 --> 00:20:15.080
and you realize that you can really do it again pretty fast.


00:20:15.080 --> 00:20:19.120
And so the one part I kind of disagree about is,


00:20:19.120 --> 00:20:21.880
I never code without resources anymore.


00:20:21.880 --> 00:20:25.220
But I wouldn't say try to do it just for memory,


00:20:25.220 --> 00:20:27.680
but try to use the normal resources


00:20:27.680 --> 00:20:28.560
that you would otherwise,


00:20:28.560 --> 00:20:30.920
like Google or Stack Overflow or whatever.


00:20:30.920 --> 00:20:31.740
>>Right, exactly.


00:20:31.740 --> 00:20:33.400
>>To look up things.


00:20:33.400 --> 00:20:35.640
I think it's silly to try to memorize


00:20:35.640 --> 00:20:37.700
like the order of parameters to a function.


00:20:37.700 --> 00:20:40.360
That's what code completion's for and stuff like that.


00:20:40.360 --> 00:20:43.400
- Exactly, that's why we have typins, isn't it?


00:20:43.400 --> 00:20:45.680
Yeah, so I totally agree.


00:20:45.680 --> 00:20:49.960
I don't think these completely abstract,


00:20:49.960 --> 00:20:52.240
in isolation sorts of things make sense.


00:20:52.240 --> 00:20:54.400
But maybe the idea is don't just keep following


00:20:54.400 --> 00:20:58.200
the steps three times, but try to recreate it


00:20:58.200 --> 00:21:01.200
from your mind, and to me, recreating it is totally fine.


00:21:01.200 --> 00:21:03.360
I go, "Ah, but how do I actually insert that thing?


00:21:03.360 --> 00:21:05.400
"What is the function I call it?"


00:21:05.400 --> 00:21:07.120
That is a totally reasonable Google search.


00:21:07.120 --> 00:21:08.320
- Yeah, definitely.


00:21:08.320 --> 00:21:09.160
- Awesome.


00:21:09.160 --> 00:21:14.480
So we've talked about debuggers before we talked about the breakpoint thing last time.


00:21:14.480 --> 00:21:21.320
One of the areas where doing proper debugging, and by proper I mean visual debugging, not


00:21:21.320 --> 00:21:26.200
not command line to me like visual debugging, we see all the state of the system and everything


00:21:26.200 --> 00:21:28.960
that can be really tricky in Jupyter notebooks, right?


00:21:28.960 --> 00:21:32.760
Because you don't like attach to them, they're running in the notebook in your web browser,


00:21:32.760 --> 00:21:33.760
right?


00:21:33.760 --> 00:21:34.760
Yeah, I've never tried.


00:21:34.760 --> 00:21:35.760
Yeah.


00:21:35.760 --> 00:21:36.760
So you can use PDB.


00:21:36.760 --> 00:21:37.760
But that's like a command line thing.


00:21:37.760 --> 00:21:39.960
It just happens to be the command line is a Jupyter cell.


00:21:39.960 --> 00:21:42.260
That's not the same, I don't think.


00:21:42.260 --> 00:21:45.560
However, there's this thing called Pixie Debugger.


00:21:45.560 --> 00:21:49.100
So the idea is you include this Pixie Debugger


00:21:49.100 --> 00:21:50.460
into your Jupyter Notebook,


00:21:50.460 --> 00:21:52.560
and then it becomes a visual debugger


00:21:52.560 --> 00:21:55.000
for each cell that you're working in.


00:21:55.000 --> 00:21:56.700
It's pretty cool, and they have a really nice video,


00:21:56.700 --> 00:21:58.060
and they've got some nice screenshots


00:21:58.060 --> 00:21:59.560
of the thing I linked to.


00:21:59.560 --> 00:22:01.560
And so it has one of those,


00:22:01.560 --> 00:22:02.640
I don't know what the right word is,


00:22:02.640 --> 00:22:04.500
like a magic command for Jupyter


00:22:04.500 --> 00:22:06.800
that escapes out of Python and speaks to Jupyter,


00:22:06.800 --> 00:22:08.840
like the percent percent.


00:22:08.840 --> 00:22:13.360
And you can just say percent percent debug this function or debug this cell.


00:22:13.360 --> 00:22:17.240
And then boom, it just drops into a thing where you can like step over, step into view


00:22:17.240 --> 00:22:21.400
all the the states of all the variables that you can set little breakpoints.


00:22:21.400 --> 00:22:26.480
And there's like a little command prompt rebel underneath when it's paused.


00:22:26.480 --> 00:22:30.160
And you can just ask it questions like type in a variable and I'll show you the value


00:22:30.160 --> 00:22:32.680
or even change the value of variable things like that.


00:22:32.680 --> 00:22:33.680
Oh, nice.


00:22:33.680 --> 00:22:34.680
Yeah, this is neat.


00:22:34.680 --> 00:22:37.020
So if you're working in Jupyter, this is really cool.


00:22:37.020 --> 00:22:41.440
And it's interesting because it comes from the video


00:22:41.440 --> 00:22:44.800
that the guy did, David Tayab.


00:22:44.800 --> 00:22:48.460
It was at the Watson Data Platform.


00:22:48.460 --> 00:22:51.800
Like so a Jupyter Notebook hosted on IBM Watson,


00:22:51.800 --> 00:22:52.960
which was pretty interesting.


00:22:52.960 --> 00:22:53.800
- Oh yeah.


00:22:53.800 --> 00:22:55.300
- So I didn't even know that was a thing,


00:22:55.300 --> 00:22:57.600
but apparently the IBM Watson Data Platform


00:22:57.600 --> 00:22:59.560
is another one of these hosted notebooks.


00:22:59.560 --> 00:23:01.560
And the reason I bring that up is he's like,


00:23:01.560 --> 00:23:02.960
well, we needed a really good way


00:23:02.960 --> 00:23:06.400
to debug these things called, what are they called?


00:23:06.400 --> 00:23:08.760
Pixie apps, I believe.


00:23:08.760 --> 00:23:13.760
And a Pixie app is like a GUI interactive thing


00:23:13.760 --> 00:23:15.160
that you can put in a notebook


00:23:15.160 --> 00:23:16.360
that's kind of like a web app,


00:23:16.360 --> 00:23:19.200
but kind of like a desktop app, but in a notebook.


00:23:19.200 --> 00:23:20.480
It's kind of funky.


00:23:20.480 --> 00:23:23.000
So I don't know, maybe I'll cover the Pixie apps as well,


00:23:23.000 --> 00:23:24.640
but that's also kind of an interesting thing.


00:23:24.640 --> 00:23:27.280
It's kind of like flask running inside of a notebook.


00:23:27.280 --> 00:23:28.480
It's bizarre, but cool.


00:23:28.480 --> 00:23:29.320
- Yeah, neat.


00:23:29.320 --> 00:23:32.400
- Yeah, so anyway, anyone out there doing notebooks


00:23:32.400 --> 00:23:35.120
to wishing for a visual debugger,


00:23:35.120 --> 00:23:37.000
check out the video that I linked to at the end.


00:23:37.000 --> 00:23:38.080
It's only like two or three minutes


00:23:38.080 --> 00:23:40.440
and you'll know whether or not this is for you.


00:23:40.440 --> 00:23:41.280
Looks cool to me though.


00:23:41.280 --> 00:23:43.800
- Yeah, and having debugger tools available


00:23:43.800 --> 00:23:45.920
in any, wherever you're working is good.


00:23:45.920 --> 00:23:47.480
- Yeah, I know.


00:23:47.480 --> 00:23:48.960
I always feel like I don't need a debugger


00:23:48.960 --> 00:23:50.920
until I'm like, "Geez, I really wanted a debugger for this."


00:23:50.920 --> 00:23:52.240
This is just not. (laughs)


00:23:52.240 --> 00:23:54.160
- Until you really need a debugger, yeah.


00:23:54.160 --> 00:23:55.040
- Exactly, exactly.


00:23:55.040 --> 00:23:56.720
It's not that often, but when I do need it,


00:23:56.720 --> 00:23:59.280
I'm like, "Oh my gosh, I'm so happy this is here."


00:23:59.280 --> 00:24:00.200
Awesome, all right, well, Brian,


00:24:00.200 --> 00:24:01.520
thanks to you for sharing everything.


00:24:01.520 --> 00:24:04.000
Anything else you want to give a shout out to while we're talking?


00:24:04.000 --> 00:24:05.000
No, not today.


00:24:05.000 --> 00:24:06.000
Yeah, not me either.


00:24:06.000 --> 00:24:08.640
So well, have a happy 4th of July.


00:24:08.640 --> 00:24:11.320
It is probably exactly that day when this comes out.


00:24:11.320 --> 00:24:12.320
Oh, you too.


00:24:12.320 --> 00:24:13.320
Thanks.


00:24:13.320 --> 00:24:14.320
Yeah, thanks.


00:24:14.320 --> 00:24:15.320
Yeah.


00:24:15.320 --> 00:24:16.320
Bye, everyone.


00:24:16.320 --> 00:24:17.320
Thank you for listening to Python Bytes.


00:24:17.320 --> 00:24:19.720
Follow the show on Twitter via @pythonbytes.


00:24:19.720 --> 00:24:22.840
That's Python Bytes as in B-Y-T-E-S.


00:24:22.840 --> 00:24:26.120
And get the full show notes at pythonbytes.fm.


00:24:26.120 --> 00:24:29.840
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:24:29.840 --> 00:24:30.840
way.


00:24:30.840 --> 00:24:33.340
the lookout for sharing something cool.


00:24:33.340 --> 00:24:36.800
On behalf of myself and Brian Aukin, this is Michael Kennedy.


00:24:36.800 --> 00:24:39.840
Thank you for listening and sharing this podcast with your friends and colleagues.

