WEBVTT

00:00:00.001 --> 00:00:04.440
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.440 --> 00:00:10.920
your earbuds. This is episode 204, recorded October 14th, 2020. I'm Brian Okken. I'm Michael

00:00:10.920 --> 00:00:15.680
Kennedy. And we have a couple of guests, Will Vincent and Carlton Gibson. Hello. Hello. Hey,

00:00:15.680 --> 00:00:19.040
guys. Happy to have you here. No, thanks for having us on. It's really quite exciting.

00:00:19.040 --> 00:00:23.100
Before we move on to the first topic, people may already know you. You guys are Django famous,

00:00:23.100 --> 00:00:28.360
I hear. Tell people about your podcast real quick. Yeah, so I'm the Django fellow,

00:00:28.600 --> 00:00:34.940
help maintain a framework there. And with Will, we run a Django chat podcast. So and Will does some

00:00:34.940 --> 00:00:37.540
other things. What do you do, Will? Yeah, well, when we started the podcast,

00:00:37.540 --> 00:00:42.920
I was just a book author, but I'm a Django Software Foundation board member now. So I have a hand in

00:00:42.920 --> 00:00:48.580
coordinating with Carlton in an official capacity. But mainly I teach Django through books and

00:00:48.580 --> 00:00:53.560
learndjango.com website. Oh, and I have a Django news newsletter as well. So I keep piling things on.

00:00:53.560 --> 00:00:56.820
We don't have two podcasts like both of you, but maybe we'll get there.

00:00:56.820 --> 00:00:58.380
We haven't got time for two podcasts.

00:00:58.380 --> 00:01:01.860
You start with one and then you just get another one. That's how it goes, you guys.

00:01:01.860 --> 00:01:02.760
Okay. Like children.

00:01:02.760 --> 00:01:05.420
Brian's going to start a third one, I heard. I'm going to start a Rima for him.

00:01:05.420 --> 00:01:06.780
I'm going to start a third.

00:01:06.780 --> 00:01:07.680
Yeah. Oh, yeah. Why not?

00:01:07.680 --> 00:01:11.040
I just should jump to four. I mean, binary, right?

00:01:11.040 --> 00:01:15.660
Exactly. Hey, Brian, we talked about Jupyter a bunch the last couple of times. Like,

00:01:15.660 --> 00:01:17.460
don't let us down. Like, keep it rolling.

00:01:17.460 --> 00:01:21.760
It's a great thing to provide a tool for people. And then we get a whole bunch of people calling

00:01:21.760 --> 00:01:25.700
or getting ahold of us and saying, Hey, there's, there's more stuff you should know about. And

00:01:25.700 --> 00:01:31.640
this is the case this time. So Marco Gorelli, I think his last name is sent us a, also I have

00:01:31.640 --> 00:01:36.000
to say, he said he was a long time listener and he's a Patreon supporter. So thank you,

00:01:36.000 --> 00:01:37.280
Marco, for being a Patreon supporter.

00:01:37.280 --> 00:01:37.920
Thank you, Marco.

00:01:37.920 --> 00:01:38.700
Very cool.

00:01:38.700 --> 00:01:45.040
So he said, you guys should know about MBQA. So MBQA is quality assurance for Jupyter notebooks.

00:01:45.040 --> 00:01:50.480
So it also can run black. So you can, one of the things, if you just want to run it like a black

00:01:50.480 --> 00:01:57.100
thing to run black, one of the benefits of using it to run black is that you can run it on an entire

00:01:57.100 --> 00:02:02.940
directory, not just a single notebook, but a whole directory full. There's some modifications with its,

00:02:02.940 --> 00:02:08.580
its use of black so that it keeps diffs fairly minimal for the diff set. And then there's,

00:02:08.580 --> 00:02:13.540
black will take off trailing semicolons because in Python, they don't really mean anything

00:02:13.540 --> 00:02:18.860
and they look ugly, but in Jupyter notebooks, apparently they mean something they mean to

00:02:18.860 --> 00:02:26.220
suppress the output of the notebook or suppress output. So that's the black version or the MBQA

00:02:26.220 --> 00:02:32.160
version of black will turn that, but leave those in place. And also supposedly supports a standard

00:02:32.160 --> 00:02:38.460
magic commands and magics are kind of a big part of Jupyter thing. So another thing I want

00:02:38.460 --> 00:02:43.960
to mention, it doesn't just run black. You can also use MBQA to run ISORT and MyPie and

00:02:43.960 --> 00:02:49.620
FlakeAid and Pylent and even PiUpgrade and Doctest. So that's pretty neat.

00:02:49.620 --> 00:02:54.620
Yeah, this is really cool. I think it brings so much of that code formatting, code analysis,

00:02:54.620 --> 00:02:59.020
cleanup to notebooks, which I think have been really lacking.

00:02:59.020 --> 00:03:02.580
Yeah, some of the standard practices that a lot of people are using now,

00:03:02.740 --> 00:03:09.260
as well as the configurations all in a pyproject.toml file. And you can hook it up with pre-commit so

00:03:09.260 --> 00:03:12.960
that you can have all these things running when you check stuff in, whatever.

00:03:12.960 --> 00:03:16.560
Yeah. And you can even run it against a whole directory, not just one notebook, which is sweet.

00:03:16.560 --> 00:03:18.520
I'm definitely going to check this out. It looks really fun.

00:03:18.520 --> 00:03:25.160
Now, one thing I wanted to mention, I checked out the source code for it and it's 100% covered and

00:03:25.160 --> 00:03:27.840
covered by pytest, of course. So nice.

00:03:27.840 --> 00:03:28.740
Nice.

00:03:28.740 --> 00:03:29.520
Little chip.

00:03:29.520 --> 00:03:30.920
Will Carlton, what do you guys think about this?

00:03:30.920 --> 00:03:36.680
Well, I was thinking I use all those tools, but I don't use them in the notebook format. I have to

00:03:36.680 --> 00:03:42.100
say I sort of potter with notebooks, but I'm not a big user there. So it sounds super, but I recommend

00:03:42.100 --> 00:03:42.600
all of those.

00:03:42.600 --> 00:03:43.380
Yeah, absolutely.

00:03:43.380 --> 00:03:47.080
Ditto. And I would, whenever I think of Jupyter notebooks, I'm always reminded of, I think the

00:03:47.080 --> 00:03:50.540
finest tech talk I've ever seen is, I don't, was it I hate notebooks?

00:03:50.540 --> 00:03:52.600
Yeah, by Joel Bruce.

00:03:53.240 --> 00:03:57.760
Yeah, Joel Bruce, which is, but I mean, he's not just slamming out the whole time, but it's

00:03:57.760 --> 00:04:03.260
a very educated talk. And I think that's a high bar for sort of complimenting and pointing

00:04:03.260 --> 00:04:07.000
out issues on a framework or on a project that can be improved.

00:04:07.000 --> 00:04:13.160
Yeah. Well, I think that actually a lot of the complaints are starting to get addressed with

00:04:13.160 --> 00:04:17.820
things like this, right? It's starting to get a little bit better. There's also some other

00:04:17.820 --> 00:04:25.000
cool ones called JupyterLab-LSP for language server protocol or provider or something like

00:04:25.000 --> 00:04:28.480
that, which also does a bunch of things that make it a little bit better. So yeah, it's

00:04:28.480 --> 00:04:29.160
getting there. It's pretty cool.

00:04:29.160 --> 00:04:33.220
Just one thing, the ultimate for general web developers is if you could take a Jupyter notebook

00:04:33.220 --> 00:04:37.600
and just snap your fingers and have it be a Django site, you know, you can't quite do that.

00:04:37.700 --> 00:04:42.340
But if I take off my technical head and just what would change things, like I'm surrounded

00:04:42.340 --> 00:04:47.700
by a lot of scientists that turned a Jupyter thing into a website with standard crud, I feel

00:04:47.700 --> 00:04:50.500
like it's possible one day, but we're not quite there.

00:04:50.660 --> 00:04:53.560
That would be really fantastic. And we're going to hear like five ways we could do it that

00:04:53.560 --> 00:04:58.680
we didn't know about from listeners, which is great. The one thing I would really love

00:04:58.680 --> 00:05:02.080
to see in Jupyter notebook and maybe someone out there knows about it is I would like to

00:05:02.080 --> 00:05:07.800
see collapsible sections. So I've got like a report and it's got like some markdown and

00:05:07.800 --> 00:05:12.480
then some code and then a graph it's generated and then some more like maybe a picture and

00:05:12.480 --> 00:05:16.640
then some more markdown. And the code in there is really awesome to have. But if you're

00:05:16.640 --> 00:05:20.420
going through it as a report, you don't necessarily want to see the code unless you want to like

00:05:20.420 --> 00:05:24.100
dig into it. So it'd be great if you could say these column or these cells are collapsed.

00:05:24.100 --> 00:05:26.340
I really would love to see that, but I don't know about that yet.

00:05:26.340 --> 00:05:30.140
That's opposite direction of what you're looking for. That's making the notebook more of an

00:05:30.140 --> 00:05:36.300
article, less of a website. All right. So the next thing I want to cover is the PSF yearly

00:05:36.300 --> 00:05:39.860
survey. Have you guys taken your yearly survey for 2020?

00:05:39.860 --> 00:05:42.240
I've done it, sir. I've done it. I already got my homework.

00:05:42.240 --> 00:05:43.860
Well done, Carlton. Well done.

00:05:43.860 --> 00:05:47.700
I have not, but I've done it past years and I will. And we actually in the Django world,

00:05:47.700 --> 00:05:51.780
we're inspired. We had our own survey this year, the first time in five years, because

00:05:51.780 --> 00:05:56.380
I don't think Python does as well, but Django doesn't track anything. So we actually don't know.

00:05:56.380 --> 00:05:57.760
No installs or usage.

00:05:57.760 --> 00:05:58.680
Right. Okay.

00:05:58.680 --> 00:06:01.080
And that's obviously helpful to fellows and technical team.

00:06:01.080 --> 00:06:06.260
Of course. And I think basically the extent to which they track that is the analytics that come

00:06:06.260 --> 00:06:11.000
out of PIP. Like pip was run on this operating system. This package was installed this many

00:06:11.000 --> 00:06:14.900
times. It was this version of Python that did it. Beyond that, I don't think there's much

00:06:14.900 --> 00:06:17.880
tracking in the Python world either. The broader, broader.

00:06:17.880 --> 00:06:22.540
We have PIPI, but that's not completely accurate in terms of popularity.

00:06:22.540 --> 00:06:27.620
All the Docker rebuild stuff that's happening all the time, like that counts, but it's not legit

00:06:27.620 --> 00:06:32.600
and so on. So yeah, for sure. So if you haven't taken the PSF survey, I put a link in here. It takes

00:06:32.600 --> 00:06:37.780
about 10 minutes. You should go do it. This is the fourth time they're doing this developer

00:06:37.780 --> 00:06:43.980
survey and it's the major, a major, the major, I'm not sure, a major source for sure about the current

00:06:43.980 --> 00:06:49.540
state of the Python community. So what editors do people use? What web frameworks are people using?

00:06:49.540 --> 00:06:55.360
Are you a data scientist or are you a web developer, et cetera, et cetera? Are you just getting into Python?

00:06:55.360 --> 00:07:03.180
And if you haven't seen the analysis of this before, I linked to the 2019 results, which were put

00:07:03.180 --> 00:07:08.980
together by JetBrains and they did a really nice job of like making a compelling story to be told out

00:07:08.980 --> 00:07:13.240
of it, right? Yeah, no, it's really nicely done and presented. You're like, oh, wow. Yeah, it's super.

00:07:13.240 --> 00:07:17.540
That's why, you know, it's worth putting into because it's the production value at the end is great.

00:07:17.600 --> 00:07:22.480
And so it's a valuable resource. I felt bad for a second that we didn't have that on Django, but

00:07:22.480 --> 00:07:27.160
instead I just, we're not JetBrains. Yeah, we're not JetBrains. That is the gold standard. I was like,

00:07:27.160 --> 00:07:31.320
oh, it'd be nice to have that. And then I was like, or I could just make it a Google form.

00:07:31.320 --> 00:07:35.420
Well, you guys should reach out to the JetBrains team and see if they want to partner up.

00:07:35.420 --> 00:07:38.680
Yeah. Well, they've probably got the resource in place. You know, they've got the infrastructure.

00:07:38.680 --> 00:07:43.440
So maybe now have they always done prizes? I don't remember that they have,

00:07:43.440 --> 00:07:45.520
but they have them now, right? Yeah. So that's cool.

00:07:45.720 --> 00:07:50.580
Yeah. So they announced that a hundred winners, completely random. If you've completed the

00:07:50.580 --> 00:07:55.520
survey, we'll receive the amazing Python surprise gift pack, which I have no idea what it is because

00:07:55.520 --> 00:07:59.560
that would ruin the surprise. I saw some good Python socks on Twitter today. I hope it's got Python

00:07:59.560 --> 00:08:04.240
socks in it. Oh my God. I love socks. Like that's half the reason I go to conferences. Let's be honest.

00:08:04.240 --> 00:08:08.460
Got my Twitter socks. I got all my different socks. I got my MongoDB socks.

00:08:08.460 --> 00:08:12.180
I've used to go just for t-shirts, but now I kind of like the socks more.

00:08:12.180 --> 00:08:15.140
I do too. We've added a official Django merchandise store,

00:08:15.380 --> 00:08:18.140
and there's some items on there and that's been helpful with the virtual conferences,

00:08:18.140 --> 00:08:22.140
but we don't have socks. So the, you know, there's a lot of inspiration we can take for

00:08:22.140 --> 00:08:24.840
having better official gear out there.

00:08:24.840 --> 00:08:26.320
Absolutely. Get your sock game on.

00:08:26.320 --> 00:08:29.800
Yeah. And then stickers, right? It goes t-shirts, stock, socks, stickers,

00:08:29.800 --> 00:08:32.160
I think in the hierarchy of swag.

00:08:32.160 --> 00:08:33.140
That's right. That's right.

00:08:33.140 --> 00:08:36.700
Okay. I have to up my game. I'm just giving out stickers usually.

00:08:36.700 --> 00:08:38.580
I'm an enamel pin man myself.

00:08:38.860 --> 00:08:40.020
Oh, enamel pins.

00:08:40.020 --> 00:08:40.580
Oh yeah.

00:08:40.580 --> 00:08:48.120
I should mention JetBrains, which is doing that. That survey is a big sponsor of Django. We do a

00:08:48.120 --> 00:08:53.600
couple of week long thing every year and they're a major corporate sponsor of Django. So shout out to

00:08:53.600 --> 00:08:53.980
JetBrains.

00:08:53.980 --> 00:08:55.140
Very nice. Yeah. Very nice.

00:08:55.140 --> 00:08:59.540
And one of the things I'm really excited about is we have a new sponsor and it's another podcast.

00:08:59.620 --> 00:09:03.520
Yeah. So that's pretty cool. So this episode is brought to you by tech meme,

00:09:03.520 --> 00:09:09.160
right? Home podcast for more than two years and nearly 700 episodes. That's amazing.

00:09:09.160 --> 00:09:14.860
The tech meme right home has been a Silicon Valley favorite tech news podcast. The tech

00:09:14.860 --> 00:09:21.460
meme right home is a daily podcast, only 15 to 20 minutes long. And every day by 5 PM Eastern,

00:09:21.460 --> 00:09:26.500
it's all the latest tech news, but it's more than just headlines. You could get a robot to

00:09:26.500 --> 00:09:32.020
read you headlines, but the tech meme right home is all the context around the latest news of the day.

00:09:32.020 --> 00:09:36.220
It's all the top stories, the top posts, the tweets and conversations of those stories,

00:09:36.220 --> 00:09:43.000
as well as behind the scenes analysis. It's like a TLDR as a service. The folks at tech meme are

00:09:43.000 --> 00:09:49.120
online all day reading everything so they can catch everything up for you. Search your podcast app right

00:09:49.120 --> 00:09:54.960
now for right home and subscribe to the tech meme right home podcast, or just visit pythonbytes.fm

00:09:54.960 --> 00:10:00.260
slash ride to subscribe. Yeah, it's like Python bytes, but just for general tech. Every day,

00:10:00.260 --> 00:10:05.240
though, these guys don't mess around. That's incredible. Yes. All of us who are podcasting,

00:10:05.240 --> 00:10:09.140
we're like, Oh my gosh, that's insane. Yeah, we all wince a little bit hearing 700

00:10:09.140 --> 00:10:13.000
promised by 5 PM. Sounds like a burnout algorithm.

00:10:13.000 --> 00:10:18.880
It's well done. But yeah, cool. Thank you guys for sponsoring the show. Will, what's your item?

00:10:19.000 --> 00:10:25.620
Oh, so my item is from prototype to production in Django. So this is a common thing where you get a

00:10:25.620 --> 00:10:30.900
little familiar with Django and you say, well, what's the there's this big chasm basically from

00:10:30.900 --> 00:10:34.980
building a CRUD app locally and deploying it properly without being hackable.

00:10:34.980 --> 00:10:39.180
What do I do? I run it as a root. I leave the debug setting on what else do I do?

00:10:39.260 --> 00:10:45.760
That's important. Yeah. Well, it's sort of like you don't know what you don't know. And then the

00:10:45.760 --> 00:10:48.780
older you get, the more scared you get because you've seen it all go bad. But when you're starting

00:10:48.780 --> 00:10:51.800
out, you're like, what could go wrong? Yeah. But as soon as it works, it works.

00:10:51.800 --> 00:10:57.240
Yeah. So specific to Django, I think like most web frameworks, it has to, it focuses on local

00:10:57.240 --> 00:11:01.740
production. So when you run, you run a start project command and it creates some scaffolding for you.

00:11:01.880 --> 00:11:07.440
And then specifically, it has a settings.py file. That's kind of the global config. And that's set

00:11:07.440 --> 00:11:12.880
for local development. So works great locally. But if you just dump it into production, you're going to

00:11:12.880 --> 00:11:18.180
be wildly insecure and easily hacked. And so it's a quick list of things you want to change. And Carlton,

00:11:18.180 --> 00:11:23.800
please jump in here as the Django fellow if I missed something. But debug is a setting that is you want to

00:11:23.800 --> 00:11:28.920
switch to false that provides very nice error message. But it also has a roadmap to hacking your

00:11:28.920 --> 00:11:33.580
site if it's left on. Right. These are in settings.py generally. In settings.py. So it's all about

00:11:33.580 --> 00:11:38.220
settings.py. Basically, there's a secret key that Django that is 50 character long string randomly

00:11:38.220 --> 00:11:42.560
generated. You want that to be secret because it uses a hash throughout Django. And of course,

00:11:42.560 --> 00:11:48.160
what happens is you do one git commit and then it's out there. So you need to change that or really put

00:11:48.160 --> 00:11:52.940
it into an environment variable, which I'll get to in a sec. Are you familiar with shgit? No, I'm not.

00:11:52.940 --> 00:12:02.300
shgit. So this is super scary. This is a, oh my gosh, it's live right now. I can't believe it.

00:12:02.300 --> 00:12:08.760
So I think it's at shgit.com. But there's also the open source version that you can get. You can see

00:12:08.760 --> 00:12:14.120
it on GitHub. Let me just read you this title just to like point out how seriously this should be taken.

00:12:14.120 --> 00:12:19.180
Shgit finds committed secrets and sensitive files across GitHub, GIST, GitLab, Bitbucket,

00:12:19.240 --> 00:12:25.400
and your local repos in real time. It does this by subscribing to the like commit stream on GitHub

00:12:25.400 --> 00:12:31.460
and instantly post the secrets like AWS secret keys and stuff. You can see if you go there like,

00:12:31.460 --> 00:12:36.660
yeah, I see six for Django right now. And it's all just got two more. Yeah, I just got two more,

00:12:36.660 --> 00:12:42.880
three more, five. I just got five more. I mean, it is insane. If you think my repo is not so popular,

00:12:42.880 --> 00:12:45.540
it will be fine. It may not be so fine.

00:12:45.680 --> 00:12:49.420
But this is the thing with security, right? Is that it doesn't matter how small you are,

00:12:49.420 --> 00:12:53.520
because the people who are attacking you, they're using automated scripts. So they're checking every

00:12:53.520 --> 00:12:58.360
port on every addressable server with every known weakness. It's not if you'll be hacked, it's when.

00:12:58.360 --> 00:13:02.140
Now setting the stage how frightening this is. Carry on why we shouldn't put that in.

00:13:02.140 --> 00:13:09.020
Well, I think it just reinforces that the settings up PY file is where most of the action is in Django.

00:13:09.340 --> 00:13:13.060
And you want to be careful with it. I mean, I remember GitHub back in the day,

00:13:13.060 --> 00:13:17.520
you could just global search for AWS keys and stripe and everything. Now, at least you can't

00:13:17.520 --> 00:13:21.320
global search for that stuff. And they'll even ping you. So for me, like I have some secret,

00:13:21.320 --> 00:13:25.640
I have some projects in my books that are on GitHub. And there's a secret key there. And they

00:13:25.640 --> 00:13:29.860
bug me all the time saying, Hey, you have a secret key exposed. I'm like, Yeah, I know I do. I don't,

00:13:29.860 --> 00:13:34.200
it doesn't matter. So it's gotten better. But yeah, it's still all out there. So secret key,

00:13:34.200 --> 00:13:38.480
keep that secret. Allowed host is probably the last big one. These are the hosts that can come in.

00:13:38.480 --> 00:13:45.560
Django will prompt you to change that. So if you're using Heroku, and it's myapp.heroku.com,

00:13:45.560 --> 00:13:50.880
you want to set that host to be only that host, not all hosts can come in. Database is the next one.

00:13:50.880 --> 00:13:55.620
So by default, Django has a SQLite database, file based really easy to use.

00:13:55.620 --> 00:13:58.020
Fantastic for production, large scale, Facebook uses it.

00:13:58.020 --> 00:13:58.920
You know, it can be.

00:13:58.920 --> 00:13:59.780
No, I just do.

00:14:00.160 --> 00:14:04.320
If your workload is read only. So say you're running a content site, and it's just you editing

00:14:04.320 --> 00:14:09.300
it. SQLite will go all the way with you. But as soon as there are more than one editor in it.

00:14:09.300 --> 00:14:11.380
It's incredibly fast. It's in memory, right?

00:14:11.380 --> 00:14:15.720
Yeah, you can have it in memory, we can have it on the file. But on read only workloads, it will go,

00:14:15.720 --> 00:14:17.020
you know, right out there.

00:14:17.020 --> 00:14:20.900
Sorry, I meant in process, in process, not in memory, but it's not like a separate server, right?

00:14:20.900 --> 00:14:24.600
Exactly. It's just a file next to all your other files. And it can it can hold,

00:14:24.600 --> 00:14:29.500
you know, terabytes of data without a problem. But as soon as you've got multiple users logging in at the

00:14:29.500 --> 00:14:33.900
same time, or that kind of thing, then you need, you know, something like Postgres or MySQL can

00:14:33.900 --> 00:14:35.160
handle that kind of concurrency.

00:14:35.160 --> 00:14:41.220
Yeah, so you probably want to .gitignore your SQLite file. But also, you definitely want to use

00:14:41.220 --> 00:14:47.580
whatever using in production locally. So Postgres, MySQL, MariaDB, and Oracle are the supported

00:14:47.580 --> 00:14:53.000
databases. What else almost done here, you configure your static and media files. So static would be

00:14:53.000 --> 00:14:57.880
images, JavaScript, media refers to anything that's user uploaded, you definitely want to be careful

00:14:57.880 --> 00:15:02.900
whenever you have anything from users can't trust them, you want to use Django forms, you probably

00:15:02.900 --> 00:15:08.800
want to use bleach to sanitize and you want to have that on a CDN, not on your server. Two more to finish

00:15:08.800 --> 00:15:15.140
up. So the admin Django has a famous admin that's very powerful, which is at slash admin, you should

00:15:15.140 --> 00:15:20.480
change that away from dot admin, because to Carlton's point, there are bots searching for Django sites at

00:15:20.480 --> 00:15:25.640
slash admin, and they will come in and hack away at your site. There are a number of fun technical things

00:15:25.640 --> 00:15:30.860
you can do to honeypot it or this and that, but you should just change it away from dash admin.

00:15:31.060 --> 00:15:36.400
I'm tempted to know there's a very famous Django site that still has slash admin, but I won't mention it

00:15:36.400 --> 00:15:42.980
publicly. Carlton and I both use it though, for our work. And then the last thing is user registration. Django

00:15:42.980 --> 00:15:49.020
comes with login, logout, reset, but it doesn't have a signup. So you can roll your own or most people would use a

00:15:49.020 --> 00:15:55.620
third party package called Django all off that's fantastic that has social support. So Django has very robust third party

00:15:55.620 --> 00:16:00.840
ecosystem that over time, the most popular ones, or the strongest ones are rolled into Django. But there's also

00:16:00.840 --> 00:16:06.360
separation because it's too much for Django to maintain. Django all off is not is a third party package, but

00:16:06.360 --> 00:16:11.960
it's, in my view, effectively part of Django for most people. So those are the big ones are the key things

00:16:11.960 --> 00:16:16.140
I mentioned there environment variables, it used to be with the settings file that back five years ago,

00:16:16.140 --> 00:16:20.160
you'd have multiple settings files, you have a base settings file. Carlton still doing that?

00:16:20.160 --> 00:16:24.600
I still have multiple settings files go with those files. I mean, you have environment variables too,

00:16:24.600 --> 00:16:26.280
but multiple settings files for the win.

00:16:26.280 --> 00:16:29.120
He's a Django fellow, he doesn't know what he's talking about. You need to use environment variables

00:16:29.120 --> 00:16:33.720
for this, because then you have one settings file and you load it into, you know, local staging or

00:16:33.720 --> 00:16:35.160
production. I've much easier.

00:16:35.160 --> 00:16:35.740
Spaces.

00:16:35.740 --> 00:16:36.280
But it works for Carlton.

00:16:36.280 --> 00:16:36.560
Spaces.

00:16:36.560 --> 00:16:39.940
And there's a number of third party packages that will help you with that. I like environs,

00:16:39.940 --> 00:16:45.140
which will be linked there, which also has DJ database URL, which is a nice feature on environment

00:16:45.140 --> 00:16:49.920
variables for databases. It just means you have single settings file, and you switch

00:16:49.920 --> 00:16:54.860
with environment variables. There's also Django has a handy deployment checklist, which I think a lot

00:16:54.860 --> 00:16:59.300
of people don't know about. We have a link to that you can run Python check --deploy.

00:16:59.300 --> 00:17:04.920
And it will check that all the things I mentioned, plus a number of HTTPS things are actually

00:17:04.920 --> 00:17:09.860
configured properly. So you don't want to deploy your site. If you don't pass most of those,

00:17:09.860 --> 00:17:14.520
if not all those. Yeah. And that's, you know, there's testing, logging, performance security,

00:17:14.520 --> 00:17:18.400
you can go on and on and on. I wrote a whole book Django for professionals on this. But those are the

00:17:18.400 --> 00:17:23.180
highlights. And there's a check, there's a good doc on the Django docs for deployment checklist,

00:17:23.180 --> 00:17:26.340
which, you know, you should open that every time you review.

00:17:26.340 --> 00:17:31.080
Yeah, the hard thing is, there's like a couple of must haves, like the ones I listed there. And then

00:17:31.080 --> 00:17:36.200
there's a lot of, it depends, nice to haves. And that's where it's harder to make generalizations.

00:17:36.420 --> 00:17:42.300
This stuff is so rewarding when you get it right to see your site up and running, you know, 99% plus

00:17:42.300 --> 00:17:48.580
uptime and people using it. So fantastic, highly responsive. But soon as you see like something go

00:17:48.580 --> 00:17:54.940
wrong, it just your heart sinks. And so most of those things are because like you both have hinted

00:17:54.940 --> 00:17:58.400
out there's some kind of bot that's looking for some vulnerability and like a known thing.

00:17:58.400 --> 00:18:02.280
And just make sure you don't put those known things in front of the internet.

00:18:02.280 --> 00:18:07.160
Yeah. And I should say, actually, there used to be a site called Pony Checkup that has,

00:18:07.160 --> 00:18:11.400
that you could put in your URL and would automatically just test a lot of this for you.

00:18:11.400 --> 00:18:15.960
It's actually someone has taken that over from the original maintainer. So it's now DJ Checkup

00:18:15.960 --> 00:18:21.940
slash Pony. So you can type in your URL and check. That's kind of a good way if you're a beginner,

00:18:21.940 --> 00:18:26.420
if you're not sure. There's nothing like going to a webpage and seeing security issues in your site

00:18:26.420 --> 00:18:28.520
or others to kind of scare you into doing something.

00:18:28.520 --> 00:18:33.280
Yeah. Yeah, for sure. Awesome. Well, I'm glad you covered that. And Carlton,

00:18:33.280 --> 00:18:35.060
it sounds like the one that you got is a bit of a...

00:18:35.060 --> 00:18:36.200
Similar topic, actually.

00:18:36.200 --> 00:18:37.080
Similar, yeah.

00:18:37.080 --> 00:18:40.000
So I've been thinking about, but I think it must be Django chat. Every week we,

00:18:40.000 --> 00:18:44.620
it seems, we have a guest on and we end up talking about deployment and it's massively complicated.

00:18:44.620 --> 00:18:49.720
And Will's just gone through a whole list of things and that's only the tip of the iceberg kind of thing.

00:18:50.180 --> 00:18:54.180
And the thing that I got thinking about was that there is this deployment gap. So I imagine someone

00:18:54.180 --> 00:18:58.560
finishing the Django tutorial, finishing the REST framework tutorial, or finishing Will's Django

00:18:58.560 --> 00:19:03.760
for beginners book. And then how on earth do they get their app online? And it's like, you know,

00:19:03.760 --> 00:19:08.860
unless you're going to dedicate a week or two weeks full-time researching and trying and following

00:19:08.860 --> 00:19:14.800
tutorials online, it's like this chasm. We can't do it. And so platforms as a service like Aroko or

00:19:14.800 --> 00:19:19.980
App Service or App Engine or DigitalOcean have got their new one. They look like a great starting point because they're

00:19:19.980 --> 00:19:24.760
kind of easy. But in a way, for me, they're a kind of cul-de-sac. You go into them, you get to the end, and then you

00:19:24.760 --> 00:19:29.880
kind of have to go back out again when you want to do something more advanced. But then on the other hand, you've got this

00:19:29.880 --> 00:19:34.700
do-it-yourself option of provisioning servers and setting up firewalls and virtual private clouds.

00:19:34.920 --> 00:19:41.980
It's just way too much. It's scary, right? And then you read some blog posts and it's saying, well, you've got to do it

00:19:41.980 --> 00:19:47.920
with microservices or you've got to do it with this container orchestration platform. And no, no, no, it's too

00:19:47.920 --> 00:19:52.940
much for me. So I've been thinking about this and trying to come up with a story of my own for it,

00:19:52.940 --> 00:19:57.140
and which I'm launching next year. It's going to be called Butter, and it's going to be a little tool that just

00:19:57.140 --> 00:20:02.420
wraps it up and tries to take some of the fuss out of deployment. So that's not ready to go yet,

00:20:02.420 --> 00:20:06.720
but I wanted to mention it because it ties into what Will was talking about. And you can sign up

00:20:06.720 --> 00:20:12.020
for early updates on btn.dev, button.dev, btn.dev. So that's my topic.

00:20:12.020 --> 00:20:18.360
That's a great topic. I think I personally struggled through this, right? I started out trying to run my

00:20:18.360 --> 00:20:25.180
websites in Python on some pass place that was very simple and easy to get started, but there's just,

00:20:25.180 --> 00:20:30.020
there's a ton of downtime and things weren't working the way that I was really exact, you know, hoping.

00:20:30.020 --> 00:20:35.260
And I ended up having to do a lot of things anyway. And so I finally bit the ball and figured

00:20:35.260 --> 00:20:40.320
out how do you run micro WSGI safely? How do you keep these things up? How do you do zero downtime

00:20:40.320 --> 00:20:42.640
deployment? How do you do continuous? So there's just so many.

00:20:42.640 --> 00:20:47.040
And how do you keep updated, right? How is it? So, okay, you get it set up and it's fine. But then

00:20:47.040 --> 00:20:51.100
six months later, there's a security patch, which you don't quite know how to apply without bringing

00:20:51.100 --> 00:20:55.340
your whole site down and rebuilding your server. It's like, how do you deal with those problems?

00:20:55.340 --> 00:21:00.680
They're not something you can learn quickly or easily. Yeah, absolutely. Brian, you got to deploy

00:21:00.680 --> 00:21:07.440
things? I have before. And that's why I don't anymore. I mean, yeah, last time we talked about

00:21:07.440 --> 00:21:12.460
DigitalOcean's new pass service and you're like, I'm all about this. Like, yeah, yeah. Like for instance,

00:21:12.460 --> 00:21:19.000
for me. So you did your own like Python bytes and talk Python, you did those applications, right?

00:21:19.000 --> 00:21:23.660
Talk Python, Talk Python Training and like 10 other like little APIs and stuff that I'm running all

00:21:23.660 --> 00:21:29.660
those. Yeah, right. So I've done I mean, I've built websites before, like in the way past like decades

00:21:29.660 --> 00:21:36.520
ago. And then when I wanted to do a podcast, I did a Python. The testing code started out as a,

00:21:36.520 --> 00:21:42.140
as just part of my blog. And it was like on WordPress or something like that. Now I will go with a

00:21:42.140 --> 00:21:48.460
fireside thing. And I don't, I mean, fireside is a good service, but it's not, I mean, it's not ideal.

00:21:48.460 --> 00:21:53.180
It doesn't, it isn't perfect, but I don't have to think about it. What I want to do is podcasting.

00:21:53.180 --> 00:21:58.240
I don't want to maintain a website. So there's a lot of things where we do need to build these custom

00:21:58.240 --> 00:22:03.660
websites. And I'm glad that there's some attention given to this because yes, I can learn how to do a

00:22:03.660 --> 00:22:09.660
Jenga website, but going from there to a live site is horrifying. So yeah.

00:22:10.440 --> 00:22:16.520
I literally just spent an hour this morning, maybe hour and a half before like up to 10 minutes before

00:22:16.520 --> 00:22:24.100
we started recording, deploying my first FastAPI endpoint through G unicorn, UV a core and behind

00:22:24.100 --> 00:22:28.000
engine X and all that stuff. And a lot of it was the same, but that's the first time I've done it with

00:22:28.000 --> 00:22:32.500
UV a corn and the settings are a little bit different than say micro WSGI. So I can run it with some basic

00:22:32.500 --> 00:22:37.400
stuff. And I'm, I kind of lived in that world of like, I got a, what is the config key to make sure,

00:22:37.400 --> 00:22:41.720
or the config settings that make sure that it runs as a different user, not root again in this server.

00:22:41.720 --> 00:22:45.320
And just like, you just go through all these things and having that like really automated would be

00:22:45.320 --> 00:22:45.520
great.

00:22:45.520 --> 00:22:50.020
Oh yeah. I mean the other day, my site went down for half an hour and it turned out to be the DNS in

00:22:50.020 --> 00:22:55.640
the end, but I never thought the DNS would go down. How often does that happen? So I log into the server

00:22:55.640 --> 00:23:00.040
and I'm checking the application server. That's fine. So I checked the local engine X instance. That's

00:23:00.040 --> 00:23:04.620
fine. I checked the load balance. So that's fine. And I'm like, it is, it's the DNS. And then by the time I've

00:23:04.620 --> 00:23:07.340
worked this out, the DNS comes back up and the site's back up and it's, ah,

00:23:07.340 --> 00:23:12.360
and what I want to do is put all that fully automated, you know? So I just run the diagnostics

00:23:12.360 --> 00:23:16.200
and it goes green, green, green, green, green, red. Ah, there's the problem. Okay, fine.

00:23:16.200 --> 00:23:18.660
That's awesome. Let me know when you got that. I'm excited.

00:23:18.660 --> 00:23:20.220
21 btn.dev.

00:23:20.220 --> 00:23:21.300
Okay, cool.

00:23:21.420 --> 00:23:25.200
Yeah. Well, and Carlton, I think your cul-de-sac analogy, which I haven't heard you say before,

00:23:25.200 --> 00:23:26.120
that's exactly right.

00:23:26.120 --> 00:23:26.580
Yeah.

00:23:26.700 --> 00:23:30.640
Because it sounds, you're like, oh, this will solve my problems. And then you learn

00:23:30.640 --> 00:23:33.900
everything and then you kind of come back with a different problem. I mean, part of the problem

00:23:33.900 --> 00:23:39.340
with doing server stuff, I think is that it's, it feels good to an engineering mind, right? It feels

00:23:39.340 --> 00:23:44.780
good to be like, you know, drive manual and tweak things, but then you've lost weeks of time and

00:23:44.780 --> 00:23:49.700
your app looks the same. And, you know, so there is a danger there in terms of, I feel like you kind

00:23:49.700 --> 00:23:53.560
of need to do it once or twice and then be like, okay, okay. I'll just have, like, I'll just have

00:23:53.560 --> 00:23:55.920
Carlton handle it for me. Like I trust him more than.

00:23:55.920 --> 00:24:01.460
This is the via media, right? This is between the sort of the platform and service, which perhaps

00:24:01.460 --> 00:24:06.020
doesn't cover all your need cases. And then the over-engineered, you know, I'm using container

00:24:06.020 --> 00:24:10.060
orchestration for a Microsoft thing and I've only got one server and a thousand hits a month, right?

00:24:10.060 --> 00:24:13.620
It's, you know, there's a middle way between that.

00:24:13.620 --> 00:24:18.840
AWS will never be bothered to make it friendly to small people because they don't care. I mean,

00:24:18.840 --> 00:24:22.940
they have this, you know, big clients. So yeah. Yeah. Yeah. Very cool.

00:24:22.940 --> 00:24:27.980
I also like the cul-de-sac thing. So you think it's an on-ramp, but it's really a cul-de-sac.

00:24:27.980 --> 00:24:31.300
Yeah. You're just in an infinite loop of...

00:24:31.300 --> 00:24:35.740
But that's the thing, especially somebody who's in that deployment gap scenario that I talked about,

00:24:35.740 --> 00:24:39.060
they go down the platform and service route because that's the only thing they can do. But

00:24:39.060 --> 00:24:42.900
at the end, they're like trapped there. And I want to do more, but I've got to go all the way back

00:24:42.900 --> 00:24:48.120
down here to learn this other stuff, which is so hard and so scary and so overwhelming.

00:24:48.120 --> 00:24:52.500
Yeah. Well, I want to talk about something that's easy and well, it's sort of easy. It's

00:24:52.500 --> 00:24:55.140
contributing to other people's open source projects.

00:24:55.140 --> 00:24:56.300
That's not easy.

00:24:56.300 --> 00:24:59.780
You're just petting Carlton's beer.

00:24:59.780 --> 00:25:02.660
No, I'm really excited about this topic.

00:25:02.660 --> 00:25:08.360
So I ran across a thing called all contributors. And actually, we talked about NBQA before.

00:25:08.820 --> 00:25:14.040
And that's where I got this idea because they use this tool called or the service called all

00:25:14.040 --> 00:25:20.200
contributors. And it's sort of a service, but also just a spec. So I'm just going to read it. It says

00:25:20.200 --> 00:25:25.920
this all contributors is a specification for recognizing contributors to an open source project

00:25:25.920 --> 00:25:29.880
in a way that rewards each and every contribution, not just code.

00:25:30.140 --> 00:25:37.180
The basic idea is to use the project read me to recognize the contributors of members of a project

00:25:37.180 --> 00:25:42.140
community. The idea is like, there's a lot more stuff going on than just code. There's things like

00:25:42.140 --> 00:25:47.820
documentation, design, writing examples, doing maintenance, writing plugins for things, doing

00:25:47.820 --> 00:25:52.860
podcasts, giving talks and all that stuff. And it'd be cool to recognize all these people.

00:25:53.360 --> 00:25:58.580
So they've got this spec for kind of how to do that. But then there's even more. There's a cool

00:25:58.580 --> 00:26:00.700
emoji key, which I love this.

00:26:00.700 --> 00:26:02.880
I love the emoji key part. It's so friendly.

00:26:02.880 --> 00:26:10.180
Yeah. So it has recommended emojis to use for your contributors list that includes things like a

00:26:10.180 --> 00:26:16.380
little laptop computer for code, a little thing for documentation, design, examples, all the sort of

00:26:16.380 --> 00:26:20.440
things you'd want with like fairly good. You don't have to think them up. They thought them up for you.

00:26:20.780 --> 00:26:25.540
So it's nice. Yeah. They also have like this bot that you can attach to your GitHub repo.

00:26:25.540 --> 00:26:30.060
So you can just add comments into somebody's pull request or something to say, hey,

00:26:30.060 --> 00:26:35.360
all contributors, please add this person to the contributors list or something. And it just does

00:26:35.360 --> 00:26:35.860
it. So.

00:26:35.860 --> 00:26:37.060
Okay. That's super cool.

00:26:37.060 --> 00:26:40.800
We're looking into that with Django. A few weeks ago, I've been reading, I was reading,

00:26:40.800 --> 00:26:44.880
Will was reading, other people were reading the working in public book. I, for the life of me,

00:26:44.880 --> 00:26:46.520
I can't remember the author's name this moment, but.

00:26:46.520 --> 00:26:47.840
It's Nina, I think.

00:26:47.840 --> 00:26:48.200
Okay.

00:26:48.200 --> 00:26:48.960
Eggbar.

00:26:49.120 --> 00:26:53.440
But it mentions this all contributors thing. And one thing we've got with Django, we've got a

00:26:53.440 --> 00:26:58.560
massive contributor base, but we kind of only historically recognized that the sort of 30 or

00:26:58.560 --> 00:27:02.980
so people that were in Django core. And then over the course of the last couple of years,

00:27:02.980 --> 00:27:07.140
we've kind of tried to restructure the governance and we've managed to do all of that. And now we're

00:27:07.140 --> 00:27:10.900
in the position where we want to try and recognize all the other people that we translate the docs

00:27:10.900 --> 00:27:16.280
into however many languages that that translation team gets virtually no recognition. Let's recognize

00:27:16.280 --> 00:27:20.600
them. There's yes, there's code commits, but there's also all the people that help triage

00:27:20.600 --> 00:27:25.280
and review the tickets and review the pull requests. And, you know, those people need recognition.

00:27:25.280 --> 00:27:29.640
There's the people who organize all the Django cons. Those people need recognition. We really want to

00:27:29.640 --> 00:27:35.320
try and show that like Django isn't just, you know, I committed to Django Django. It's the whole ecosystem.

00:27:35.320 --> 00:27:38.220
So I think this all contributors thing is great tool.

00:27:38.300 --> 00:27:42.900
You said you're reading the working in public book by, would you recommend it? Is it good?

00:27:42.900 --> 00:28:12.880
Yeah, it was amazing book. Like just the first few chapters, it's just like describing Django to a T. It's like, oh yeah, this is the challenge we face every single day. Like a couple of years ago at Django con in San Diego, I gave a talk about your web framework needs you. And I put up a graph of contributors. And in the first chapter, it's this exact same graph. I mean, it's got different numbers and it's for a different repo, but it's the same power law shape. It's the same problem. It's like, this isn't just Django. It's every open source project out there. It's got the same issues. And it's the same time.

00:28:12.880 --> 00:28:26.800
Do you grow in on yourself and get smaller and more enclosed? Or do you open out to the community and welcome contributions and find a way of doing that? And if you can, you can survive and flourish. And if you can't, well, you'll weather and die.

00:28:26.800 --> 00:28:42.320
Yeah. I mean, I literally took screenshots of the book because I was like, Carlton, you should read this. He's like, and he's like, okay, okay. It's exactly my thing. And this all contributors is so relevant because the most Carlton mentioned at Django, we're changing around what Django core refers to. And I literally have a,

00:28:42.860 --> 00:28:50.200
huge spreadsheet with all the various people we're trying to categorize that this would fit in perfectly for. So I'm going to potentially use this.

00:28:50.200 --> 00:28:52.240
And it has a GitHub bot, which is fantastic.

00:28:52.240 --> 00:28:56.700
Yeah. What can be done manually and you know, five minutes can be automated in an hour. So that's right.

00:28:56.700 --> 00:29:00.600
Well, Michael, what are you going to finish this up with?

00:29:00.860 --> 00:29:29.320
Well, you know, I want to keep us on the move. Don't sit still, you know, rolling stone gathers, no moss sort of thing. So pandas is a super popular library in data science, right? And there's a bunch of visualizations. One way to work with geospatial data is with geo pandas, which is cool. So there's a library called moving pandas. And the idea is if you give locations plus time, you can map all sorts of interesting things.

00:29:29.320 --> 00:29:36.880
things and analyze all sorts of interesting things. It's cool, right? And this project, as it should, has a bunch of animated GIFs.

00:29:36.880 --> 00:29:53.660
So yeah, that's what we need to tell exactly what it's about, right? Get in there. So it provides trajectory data structures and functions for analysis and visualization. It started out as this QGIS plugin, but they decided it made more sense to just be its own thing. So it's its own thing.

00:29:54.440 --> 00:30:03.780
Basically, it takes a geo pandas geo data frames with timestamp points, and it converts them into moving pandas trajectory collections.

00:30:04.000 --> 00:30:17.960
And you know, properties such as speed and direction, you can turn continuous observations into trips, like, I was here for a really long time, and then I went to the store, and I was there for a while, and then I came back, right? That kind of stuff, I think.

00:30:18.400 --> 00:30:28.120
It'll aggregate them into flow maps. So instead of, I went exactly from here to here, you can say, here are the nodes where I spend time and the paths I take between them.

00:30:28.120 --> 00:30:40.980
Almost like graph theory type of stuff. And work with it is super straightforward. So you can just go create a pandas data frame, pass up a geometry, and a time, and you convert it to a geo data frame.

00:30:40.980 --> 00:30:46.160
And then you just say, give me the trajectory, and you can plot it. And that's it. Like, incredibly simple.

00:30:46.160 --> 00:30:51.280
That sounds super. Their website's really good as well. I was just clicking on it to see the animated GIFs and whatnot.

00:30:51.280 --> 00:30:59.160
Well, it seems like that would overlap with... So, I mean, Django is a big framework. There's a whole geo Django area, which Carlton and I have discussed.

00:30:59.160 --> 00:31:05.020
I mean, that and the ORM are the two parts of Django. I kind of don't really know, to be honest.

00:31:05.020 --> 00:31:07.760
But they're very powerful, and people use them, so...

00:31:07.760 --> 00:31:19.000
Cool. You can also get, like, graphs of kind of derived data. So, like, speed over time, rather than just position. You can get these other analysis in there.

00:31:19.000 --> 00:31:29.760
And, you know, I can see lots of interesting places. You know, I had Kane Replical on Talk Python to talk about how they're using Python on the race teams for simulations and stuff.

00:31:29.760 --> 00:31:37.980
And, like, those types of analysis, this seems so perfect. Go spend a day on the track, collect a bunch of data, throw into these types of things, and look at the curves and whatnot.

00:31:37.980 --> 00:31:43.040
Yeah, and Pandas is almost like the kind of data transfer format now. I mean, you know...

00:31:43.040 --> 00:31:43.920
Yeah, absolutely.

00:31:43.920 --> 00:31:46.580
So, to be able to integrate there sounds super useful.

00:31:46.580 --> 00:31:47.460
Yeah, that's cool.

00:31:47.460 --> 00:31:47.820
Awesome.

00:31:47.820 --> 00:31:51.380
All right, well, that's the last item. Brian, you got any extra stuff you want to share with people?

00:31:51.380 --> 00:31:53.580
No, just working and plugging along.

00:31:53.580 --> 00:31:53.820
Yeah.

00:31:53.880 --> 00:31:54.280
How about you?

00:31:54.280 --> 00:32:02.400
I do have a few things. First of all, I was talking to Hugo Bowne-Anderson from Coiled, and he asked,

00:32:02.400 --> 00:32:08.380
hey, when is the transcript from our recent show going to be out? I'm like, eh, I don't really have transcripts at the moment.

00:32:08.380 --> 00:32:14.340
The company I was working with to generate them stopped generating, stopped doing that kind of stuff, and I haven't figured out what to do.

00:32:14.340 --> 00:32:18.400
He's like, oh, you should check out otter.ai. I'm like, yeah, but isn't that, like, for your phone?

00:32:18.400 --> 00:32:20.140
And, like, you're going to have conversations. It's cool.

00:32:20.300 --> 00:32:28.920
But what I realized is I can upload files to that, our old episodes. It'll convert it to mostly correct transcripts.

00:32:28.920 --> 00:32:32.740
Like, pretty good, actually. You know, it'll get, like, AWS, right, and things like that.

00:32:32.740 --> 00:32:37.760
And then just wrote, yeah, I just wrote some automation to turn that into transcripts.

00:32:37.760 --> 00:32:44.540
So, I added, like, half a year worth of transcripts back, which means that feeds our search engine, so search should be better as well, and stuff like that.

00:32:44.540 --> 00:32:52.780
Yeah, I think it's the top one. I think Wes Boss was also asking something, and I was tweeting with him saying, yeah, otter, I think, when I checked, is by far the best one.

00:32:52.780 --> 00:32:59.180
It's not really designed for transcripts. It's designed, I think, for, like, meetings and groups, but it works. We've been using it for a year.

00:32:59.180 --> 00:33:02.420
Yeah, that's awesome. And you guys like it? It's been good?

00:33:02.540 --> 00:33:10.960
Yeah, as you say, it's, I mean, it's the most accurate out there, and usually it gets almost everything. You can kind of have custom things, like AWS, if it gets it wrong.

00:33:10.960 --> 00:33:18.540
And, yeah, I mean, usually I run it through and give it a quick scan. Maybe there's a couple things to switch, but, yeah, it's a no-brainer.

00:33:18.540 --> 00:33:23.700
Yeah, it's got, like, a nice editor that, like, plays and highlights the words if you were actually going to stop and edit them.

00:33:23.700 --> 00:33:33.120
I also have automation, like, for my courses, I have automation through AWS Elastic Transcribe, or just Transcribe, whatever it's called, to generate those and then hand them off to people.

00:33:33.120 --> 00:33:38.120
But otter's looking nice. I'm not sure if I'd switch the courses over. But, anyway, maybe we have a bunch of transcripts, Brian.

00:33:38.320 --> 00:33:49.600
Yeah, so I've never really done, I started doing testing code transcripts, but I was actually just paying somebody to do them, and it was getting expensive. So, yeah, let's check this out, too.

00:33:49.600 --> 00:33:50.360
Yeah, it's worth checking out.

00:33:50.360 --> 00:33:53.520
It's the SEO that really matters, I think. That's, like, the killer feature.

00:33:53.520 --> 00:34:00.120
Yes, exactly. That's why I first created them, and I thought, okay, I'll make them searchable so people can also get some value out of it.

00:34:00.120 --> 00:34:08.200
But my original reason for doing it was, like, instead of having three paragraphs of content for an hour conversation, let's have the real conversation.

00:34:08.200 --> 00:34:08.460
Right?

00:34:08.460 --> 00:34:08.700
Yeah.

00:34:08.700 --> 00:34:17.460
But then, you know, someone will find that, and that will be useful. And, you know, they'll be like, ah, this is, you know, even if it's badly transcribed, this is roughly what I'm looking for, I'll listen to the episode.

00:34:17.460 --> 00:34:22.680
Right, right. Yeah, let me listen, here's the timestamp, and they can get some value out of it. So, hopefully, yeah, that's the idea.

00:34:22.680 --> 00:34:23.040
Nice.

00:34:23.040 --> 00:34:27.720
All right. Also, I'd switch from Google to try to live in DuckDuckGo land, just using DuckDuckGo.

00:34:27.720 --> 00:34:28.720
Oh, join us, yeah.

00:34:28.720 --> 00:34:30.660
Yeah, are you guys doing it? Are you liking it?

00:34:30.660 --> 00:34:32.900
I've been there for three years exclusively.

00:34:32.900 --> 00:34:37.860
Oh, God, I'm still on Google, but I did install a pie hole this week, so, you know.

00:34:38.420 --> 00:34:39.180
Oh, yeah, yeah, yeah.

00:34:39.180 --> 00:34:41.100
Swings and roundabouts.

00:34:41.100 --> 00:34:44.260
Carlton's like, I see your DuckDuckGo usage, and I got to...

00:34:44.260 --> 00:34:45.440
I'll raise you a pie hole.

00:34:45.440 --> 00:34:47.020
This is what I have to deal with, guys.

00:34:47.020 --> 00:34:55.580
So far, I'm liking it. I mean, I've been using Firefox with all sorts of privacy stuff for a long time, but I figured just one more thing.

00:34:55.580 --> 00:35:01.900
And I just want to point out, if you're trying to be, like, slightly less connected to Google, they have Google Takeout, or you just want to back up, right?

00:35:01.900 --> 00:35:07.440
If you use Google Drive and you sync your Google stuff, it'll give you just a link to the spreadsheet or whatever on Google.

00:35:07.440 --> 00:35:13.540
Well, excuse me, if you use Google Takeout, it'll actually convert, like, say, your spreadsheets to Excel, so you actually have them.

00:35:13.540 --> 00:35:15.240
Anyway, so that's part of that.

00:35:15.240 --> 00:35:19.840
And, like I said, I got to deploy my first FastAPI app today, basically.

00:35:19.840 --> 00:35:21.980
And I'm just... I'm really enjoying it.

00:35:21.980 --> 00:35:24.720
I feel like it's bringing in a lot of these ideas.

00:35:24.720 --> 00:35:27.600
I'm hoping maybe you guys can just comment super quick on this.

00:35:27.600 --> 00:35:33.960
It brings in so many of these new ideas into the web space, like the async and await stuff feels super natural.

00:35:33.960 --> 00:35:36.480
You don't have to do anything to make it work.

00:35:36.480 --> 00:35:39.220
The type annotations mean things.

00:35:39.220 --> 00:35:43.160
I just feel like there's a lot of interesting sort of modern Python stuff coming together here.

00:35:43.160 --> 00:35:44.860
Like, what's your Django perspective?

00:35:44.860 --> 00:35:50.660
Well, so FastAPI is built on top of Starlet, which is by Tom Christie, who's Django REST framework creator.

00:35:50.660 --> 00:35:54.700
So from the async side, that's what we're trying to build into Django now.

00:35:54.700 --> 00:35:58.740
And we have async views in 3.1, and, you know, we're working on the ORM next.

00:35:58.740 --> 00:36:00.080
And then from there, it will spread out.

00:36:00.080 --> 00:36:02.660
So there's a PR came in this week about the cache layer.

00:36:02.660 --> 00:36:07.720
So there'll be async, third-party async cache backends for Django soonish.

00:36:07.720 --> 00:36:13.040
An async, fully async framework like Starlet, it's always going to be out there.

00:36:13.260 --> 00:36:14.860
You know, it's going to be ahead of where Django is.

00:36:14.860 --> 00:36:20.460
But we'll wrap it up and give it that nice Django feel where you define your class-based views and all these things.

00:36:20.460 --> 00:36:22.140
We're not there yet, but that's what we're aiming for.

00:36:22.140 --> 00:36:31.140
Then the other thing that FastAPI brings out, which is quite exciting, is Pydantic, which is the type hinting used for the serializers and for the validation.

00:36:31.140 --> 00:36:32.740
That's kind of really cool.

00:36:32.740 --> 00:36:35.540
And at the moment, we don't have a story there with Django.

00:36:35.540 --> 00:36:36.500
We've got Django Forms.

00:36:36.500 --> 00:36:38.880
We've got REST framework serializers doing the same kind of thing.

00:36:38.880 --> 00:36:41.580
But we've got our eye on that, and we'll see how it goes.

00:36:41.740 --> 00:36:43.520
I know you guys are definitely thinking about these things.

00:36:43.520 --> 00:36:44.180
It's very exciting.

00:36:44.180 --> 00:36:44.520
Yeah.

00:36:44.520 --> 00:36:56.980
I mean, but what's really nice about the current, particularly the ASGII world, where all the kind of ASGII is the standard, is there's an amount of interoperability in that you can kind of nest your ASGII apps inside each other and wrap window bears around them.

00:36:56.980 --> 00:36:58.340
And it's just another ASGII app.

00:36:58.340 --> 00:37:00.640
And so, actually, there's a lot of interop things.

00:37:00.640 --> 00:37:04.160
So it's a really rich and fertile time for Django web frameworks.

00:37:04.160 --> 00:37:04.740
Yeah, awesome.

00:37:04.740 --> 00:37:05.960
I don't have anything to add, Carlton.

00:37:05.960 --> 00:37:06.880
I defer to Carlton.

00:37:06.880 --> 00:37:14.280
Other than it's sort of wild that, you know, I mean, from Tom, we've known about Starlette that FastAPI is better known than Starlet.

00:37:14.280 --> 00:37:16.100
It's a little strange to me, but it makes sense.

00:37:16.100 --> 00:37:20.680
Because Tom's been busy rebuilding everything in async the last couple of years, kind of on the side.

00:37:20.680 --> 00:37:23.440
Well, the thing also, the thing is that people touch FastAPI.

00:37:23.440 --> 00:37:25.280
They just live on top of it.

00:37:25.280 --> 00:37:28.440
Like, they live on the shoulders of Starlet, but they touch FastAPI, right?

00:37:28.440 --> 00:37:28.540
Yeah.

00:37:28.580 --> 00:37:29.020
No, exactly.

00:37:29.020 --> 00:37:29.380
Yeah.

00:37:29.380 --> 00:37:29.580
Yeah.

00:37:29.580 --> 00:37:29.900
Yeah.

00:37:29.900 --> 00:37:34.000
All right, Brian, I put in two jokes that we can offer up today.

00:37:34.000 --> 00:37:37.660
Let's shout out to some of the stuff that Will and Carlton are doing, though, first.

00:37:37.660 --> 00:37:38.640
Yeah, yeah, absolutely.

00:37:38.640 --> 00:37:39.220
Okay.

00:37:39.220 --> 00:37:42.360
Well, we just, I'd say, listen to Django Chat, which is at DjangoChat.com.

00:37:42.360 --> 00:37:43.100
That's our podcast.

00:37:43.100 --> 00:37:44.540
It's fortnightly now.

00:37:44.540 --> 00:37:46.860
That's a fancy British word there for you.

00:37:46.860 --> 00:37:50.000
Check out Will's tutorials and books at LearnDjango.com.

00:37:50.000 --> 00:37:54.000
And then, yeah, sign up for the early updates on Button, which is at BTN.dev.

00:37:54.000 --> 00:37:54.580
Just did.

00:37:54.580 --> 00:37:54.980
Super.

00:37:54.980 --> 00:37:55.600
Welcome aboard.

00:37:55.600 --> 00:37:57.280
You'll be subscriber number three, I think.

00:37:57.280 --> 00:38:03.660
Well, actually, I had to tell Carlton, I was like, get up a page before we go on the podcast,

00:38:03.660 --> 00:38:05.580
because he's been telling me about Button for a year.

00:38:05.580 --> 00:38:07.680
Yeah, it looks good.

00:38:07.680 --> 00:38:09.960
Well, it looks like a sign up form right now.

00:38:09.960 --> 00:38:11.600
Well, yeah, that's what it is right now.

00:38:11.600 --> 00:38:13.420
But yeah, 2021, it's coming.

00:38:13.420 --> 00:38:13.840
Nice.

00:38:13.840 --> 00:38:14.420
Yeah, great.

00:38:14.420 --> 00:38:15.480
Okay, now a joke.

00:38:15.480 --> 00:38:16.080
Thank you.

00:38:16.080 --> 00:38:18.260
Thank you for getting us back on track, Brian.

00:38:18.260 --> 00:38:21.960
So you've heard about give a person a fish versus teach them to fish.

00:38:21.960 --> 00:38:23.460
There's a programmer version.

00:38:23.460 --> 00:38:24.060
Did you know that?

00:38:24.060 --> 00:38:24.480
No.

00:38:24.480 --> 00:38:24.840
Yeah.

00:38:24.840 --> 00:38:27.860
If you give a person a program, you can frustrate them for a day.

00:38:27.860 --> 00:38:30.480
But if you teach them to program, you can frustrate them for a lifetime.

00:38:30.480 --> 00:38:30.920
Yeah.

00:38:30.920 --> 00:38:33.460
Yes, definitely.

00:38:33.460 --> 00:38:34.940
Unless what, Brian?

00:38:34.940 --> 00:38:37.180
Unless you teach them to test at the same time.

00:38:37.180 --> 00:38:38.220
Ah, very good.

00:38:38.220 --> 00:38:39.860
Exactly.

00:38:40.400 --> 00:38:46.380
And speaking of FastAPI, here's a joke that I just saw that's relevant.

00:38:46.380 --> 00:38:51.360
That's sort of similar to one put out by Sebastian Ramirez from FastAPI.

00:38:51.360 --> 00:38:57.640
So somebody just failed a job interview and the verdict was delivered like this.

00:38:57.640 --> 00:38:58.080
I'm sorry.

00:38:58.080 --> 00:39:03.000
We're looking for someone aged 22 to 26 with 30 years of experience with Flask or Janko.

00:39:03.000 --> 00:39:03.920
Yay.

00:39:04.700 --> 00:39:08.000
Well, didn't he tweet about someone was looking for five years of FastAPI?

00:39:08.000 --> 00:39:10.040
And he was like, even I don't have that.

00:39:10.040 --> 00:39:17.480
He's like, well, as the creator of FastAPI, I would not qualify you for your job having done only 1.5 years of it.

00:39:17.480 --> 00:39:17.720
Yeah.

00:39:17.720 --> 00:39:18.120
Yeah.

00:39:18.120 --> 00:39:20.640
Well, I don't think people realize that it's so new.

00:39:20.640 --> 00:39:25.860
I mean, it's kind of taken over very quickly, but it hasn't been around for very long.

00:39:25.860 --> 00:39:26.180
Yeah.

00:39:26.180 --> 00:39:26.980
Yeah.

00:39:26.980 --> 00:39:27.600
It's pretty interesting.

00:39:27.600 --> 00:39:28.020
Anyway.

00:39:28.020 --> 00:39:28.360
All right, guys.

00:39:28.360 --> 00:39:29.100
Yeah.

00:39:29.100 --> 00:39:30.740
Thanks for joining us.

00:39:30.740 --> 00:39:31.080
Yeah.

00:39:31.080 --> 00:39:31.720
No, thank you.

00:39:31.720 --> 00:39:32.660
It's been a really cool chat.

00:39:32.660 --> 00:39:33.460
I really enjoyed it.

00:39:33.460 --> 00:39:33.640
Yeah.

00:39:33.640 --> 00:39:34.260
Thanks for having us.

00:39:34.260 --> 00:39:35.300
Yeah, it's been fun to have you here, Carlton.

00:39:35.300 --> 00:39:36.220
Well, all right.

00:39:36.220 --> 00:39:36.780
Bye.

00:39:36.780 --> 00:39:37.080
Okay.

00:39:37.080 --> 00:39:37.660
Bye-bye.

00:39:37.660 --> 00:39:37.920
Bye-bye.

00:39:37.920 --> 00:39:39.720
Thank you for listening to Python Bytes.

00:39:39.720 --> 00:39:42.180
Follow the show on Twitter at Python Bytes.

00:39:42.180 --> 00:39:45.220
That's Python Bytes as in B-Y-T-E-S.

00:39:45.220 --> 00:39:48.100
And get the full show notes at Pythonbytes.fm.

00:39:48.100 --> 00:39:53.180
If you have a news item you want featured, just visit Pythonbytes.fm and send it our way.

00:39:53.180 --> 00:39:55.220
We're always on the lookout for sharing something cool.

00:39:55.480 --> 00:39:59.420
This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening

00:39:59.420 --> 00:40:01.660
and sharing this podcast with your friends and colleagues.

