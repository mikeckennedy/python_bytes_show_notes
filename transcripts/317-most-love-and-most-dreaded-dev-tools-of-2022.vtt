
00:00:00.000 --> 00:00:02.480
>> Hello and welcome to Python Bytes where we deliver


00:00:02.480 --> 00:00:05.160
Python news and headlines directly to your earbuds.


00:00:05.160 --> 00:00:07.520
This is Episode 317,


00:00:07.520 --> 00:00:11.200
recorded January 3rd, 2023, and I am Brian Okken.


00:00:11.200 --> 00:00:12.440
>> Hello, I'm Michael Kennedy.


00:00:12.440 --> 00:00:15.040
>> Welcome to 2023. How exciting.


00:00:15.040 --> 00:00:16.280
>> It is very exciting.


00:00:16.280 --> 00:00:17.760
It's a lot like 2022,


00:00:17.760 --> 00:00:20.320
but I think maybe a little more optimism. We'll see.


00:00:20.320 --> 00:00:24.400
>> Yeah, but I've had one extra shower since 2022.


00:00:24.400 --> 00:00:25.680
Do you remember 2022?


00:00:25.680 --> 00:00:27.040
Just feels like a few days ago.


00:00:27.040 --> 00:00:29.400
>> Honestly, it really flew by.


00:00:29.400 --> 00:00:29.900
Yeah.


00:00:29.900 --> 00:00:32.940
I mean, we, we, we stayed inside for like two years and then like, Hey, well, look,


00:00:32.940 --> 00:00:33.720
we get to go outside.


00:00:33.720 --> 00:00:36.440
Oh, time flies when you're not just stuck inside.


00:00:36.440 --> 00:00:38.620
I even actually rode a bicycle the other day.


00:00:38.620 --> 00:00:41.700
Um, and then Oregon said we're going to rain for two weeks.


00:00:41.700 --> 00:00:43.200
So of course, of course it did.


00:00:43.200 --> 00:00:43.880
Yeah.


00:00:43.880 --> 00:00:45.120
Um, well, let's kick it off.


00:00:45.120 --> 00:00:46.320
What do you got for us first?


00:00:46.320 --> 00:00:47.100
All right.


00:00:47.100 --> 00:00:52.620
Let's talk about the stack overflow, 2022 developer survey.


00:00:52.620 --> 00:00:57.140
Now this is one of the better surveys that gives you a pulse


00:00:57.140 --> 00:00:58.880
on the developer community.


00:00:59.060 --> 00:01:01.780
It's, you know, we do the PSF survey every year.


00:01:01.780 --> 00:01:03.380
And that one I think is really well done.


00:01:03.380 --> 00:01:06.540
This one's interesting because it's not just Python, obviously.


00:01:06.540 --> 00:01:09.020
It's all of Stack Overflow people.


00:01:09.020 --> 00:01:09.500
>> Yeah.


00:01:09.500 --> 00:01:11.820
>> And it's really, really long.


00:01:11.820 --> 00:01:12.980
Notice the scroll bar.


00:01:12.980 --> 00:01:16.420
So I'm going to try to go through these


00:01:16.420 --> 00:01:19.660
and just hit on some of the high points for us.


00:01:19.660 --> 00:01:22.860
All right. So they did that as well for us at the top here.


00:01:22.860 --> 00:01:25.860
They kind of summarize some little things you can call out in the jump to other sections.


00:01:25.860 --> 00:01:30.500
saying learning to code online increased by 10% year over year.


00:01:30.500 --> 00:01:35.660
However, respondents older than 45 years are most likely to have learned from books,


00:01:35.660 --> 00:01:42.340
whereas the youngins, they're more likely to use some kind of online course


00:01:42.340 --> 00:01:45.700
or YouTube video or something along those lines.


00:01:45.700 --> 00:01:46.940
Does that surprise you?


00:01:46.940 --> 00:01:47.740
>> No.


00:01:47.740 --> 00:01:50.580
>> Yeah, me either. So last year,


00:01:50.580 --> 00:01:55.820
they said we saw Git rise as a fundamental tool of software development.


00:01:55.820 --> 00:01:59.040
So like if you are a software developer, you basically just need to know Git.


00:01:59.040 --> 00:02:02.920
Surprisingly this year, they said that's Docker this year increasing


00:02:02.920 --> 00:02:06.560
from 55% usage to 69% usage.


00:02:06.560 --> 00:02:12.080
I kind of feel like the hype and the heyday of Docker was actually a couple


00:02:12.080 --> 00:02:16.040
of years ago and I hear a little bit less, maybe it's just less hype, but it's


00:02:16.040 --> 00:02:17.480
just more like, yeah, we're just using it.


00:02:17.480 --> 00:02:21.200
But I don't know that that was surprising and interesting to me.


00:02:21.200 --> 00:02:24.260
I'm using it more in places where I didn't use to.


00:02:24.480 --> 00:02:29.180
- Like what? - Build chains for just to keep them consistent.


00:02:29.180 --> 00:02:31.980
We're just, and it isn't even a cloud thing.


00:02:31.980 --> 00:02:36.680
It's just having, being able to have a consistent build system


00:02:36.680 --> 00:02:38.480
no matter what machine you're on.


00:02:38.480 --> 00:02:40.180
- Yeah, that makes a lot of sense.


00:02:40.180 --> 00:02:43.180
- CI systems are utilizing Docker more.


00:02:43.180 --> 00:02:48.480
- Sure. I've heard of even people using Docker to manage and employ.


00:02:48.480 --> 00:02:50.080
Is that how you would phrase it?


00:02:50.080 --> 00:02:53.840
little apps to Raspberry Pis for like home automation


00:02:53.840 --> 00:02:54.680
and stuff.


00:02:54.680 --> 00:02:55.520
- Really, sure they're--


00:02:55.520 --> 00:02:56.340
(laughing)


00:02:56.340 --> 00:02:57.180
- I'm sure there would be more of that


00:02:57.180 --> 00:02:58.720
if you could actually get a Raspberry Pi,


00:02:58.720 --> 00:03:00.600
but you know, this is more of a theoretical.


00:03:00.600 --> 00:03:02.600
Those who already have the Raspberry Pi.


00:03:02.600 --> 00:03:05.960
The most, one of my favorite sections of this


00:03:05.960 --> 00:03:09.640
is the most loved, most dreaded, and most wanted.


00:03:09.640 --> 00:03:10.480
- Yeah.


00:03:10.480 --> 00:03:12.480
- Because it really tells you, you know,


00:03:12.480 --> 00:03:15.200
how do people feel about how things are now,


00:03:15.200 --> 00:03:17.600
and how do they feel about where they're going, right?


00:03:17.600 --> 00:03:22.400
What would they do if they were unencumbered by their boss saying,


00:03:22.400 --> 00:03:25.240
"Nope, we're using this particular database," or,


00:03:25.240 --> 00:03:28.260
"Nope, it's all Angular and you're on the team that does Angular,


00:03:28.260 --> 00:03:30.600
so I don't care what you want, you're doing Angular."


00:03:30.600 --> 00:03:35.760
So Rust is on its seventh year as the most loved language.


00:03:35.760 --> 00:03:38.560
>> Seven years? Is it even seven years old?


00:03:38.560 --> 00:03:40.940
>> I know. That's my thought as well.


00:03:40.940 --> 00:03:41.280
>> Okay.


00:03:41.280 --> 00:03:45.340
>> Eighty-seven percent of developers say they want to continue using it.


00:03:45.340 --> 00:03:48.580
Wow. I mean, yeah, anyway, that's pretty interesting.


00:03:48.580 --> 00:03:52.780
But it also Python and Rust are basically


00:03:52.780 --> 00:03:57.440
exactly tied as the most wanted programming language. That's cool.


00:03:57.440 --> 00:03:58.320
>> I can see that.


00:03:58.320 --> 00:04:01.020
>> Yeah, absolutely. Phoenix.


00:04:01.020 --> 00:04:03.860
Phoenix is some web framework I've never heard of,


00:04:03.860 --> 00:04:05.580
that is apparently the most popular.


00:04:05.580 --> 00:04:10.180
AngularJS, it continues into its third year of being the most dreaded.


00:04:10.180 --> 00:04:12.140
All right, what else? Go ahead.


00:04:12.140 --> 00:04:14.140
Oh, just react.


00:04:14.140 --> 00:04:16.640
Yeah, is most wanted, but who knows?


00:04:16.640 --> 00:04:17.640
Yeah, exactly.


00:04:17.640 --> 00:04:23.140
So some of these questions and some of these phrasings and analyses are super, super good,


00:04:23.140 --> 00:04:24.940
and others are really bad.


00:04:24.940 --> 00:04:26.940
So I'll try to highlight some of these.


00:04:26.940 --> 00:04:28.740
So let me jump down here.


00:04:28.740 --> 00:04:31.240
Well, I don't really care about the education stuff.


00:04:31.240 --> 00:04:34.540
I mean, it tells you education profile.


00:04:34.540 --> 00:04:40.040
It tells you things like, yeah, there's an insane number of guys versus women.


00:04:40.040 --> 00:04:44.840
>> No, that's fine. I just thought it was funny that you said I don't care about education.


00:04:44.840 --> 00:04:49.480
>> Teacher, leave the kids alone.


00:04:49.480 --> 00:04:52.440
All right. It's fine,


00:04:52.440 --> 00:04:54.960
but people can check it out if they care about it.


00:04:54.960 --> 00:04:56.960
There's stuff about the demographics,


00:04:56.960 --> 00:04:58.320
like age and gender.


00:04:58.320 --> 00:04:59.480
That is pretty interesting.


00:04:59.480 --> 00:05:01.480
I wish some of these numbers were better.


00:05:01.480 --> 00:05:03.720
>> Yeah. That's embarrassing.


00:05:03.720 --> 00:05:05.080
>> Yeah, it totally is.


00:05:05.080 --> 00:05:08.240
But that's also not news.


00:05:08.240 --> 00:05:11.720
Yeah, some of the most popular technologies here.


00:05:11.720 --> 00:05:13.040
Now, I know Brian,


00:05:13.040 --> 00:05:15.040
I might just be getting older and grumpy,


00:05:15.040 --> 00:05:16.160
but when I look at this,


00:05:16.160 --> 00:05:18.280
there's like it's almost all these responses


00:05:18.280 --> 00:05:20.200
are broken into two segments,


00:05:20.200 --> 00:05:23.600
professional developers and learning to code people.


00:05:23.600 --> 00:05:26.480
The default is to take all those together,


00:05:26.480 --> 00:05:28.280
and I guess that's the biggest picture,


00:05:28.280 --> 00:05:29.480
but I don't know.


00:05:29.480 --> 00:05:31.080
When I ever look at this, I'm just like,


00:05:31.080 --> 00:05:32.520
professional developers, tell me about this.


00:05:32.520 --> 00:05:33.520
>> Yeah.


00:05:33.520 --> 00:05:36.200
>> If you're on your third week of


00:05:36.200 --> 00:05:39.320
a coding tutorial and that tutorial says use this,


00:05:39.320 --> 00:05:43.640
like how much does that really speak to the state of the community?


00:05:43.640 --> 00:05:44.440
I don't think it's-


00:05:44.440 --> 00:05:45.480
>> Agreed.


00:05:45.480 --> 00:05:46.920
>> So I'm checking.


00:05:46.920 --> 00:05:48.140
When I think about these,


00:05:48.140 --> 00:05:49.760
I'm just going to check professional developer and


00:05:49.760 --> 00:05:51.800
if you want the same numbers, you can do so as well.


00:05:51.800 --> 00:05:54.920
So where are we? We are on programming languages,


00:05:54.920 --> 00:05:56.600
scripting and markup.


00:05:56.600 --> 00:05:59.900
JavaScript is definitely the most popular here.


00:05:59.900 --> 00:06:01.960
This is one of those areas where I don't,


00:06:01.960 --> 00:06:03.980
I think you need to phrase it a little bit different.


00:06:03.980 --> 00:06:06.060
Let's see what the question exactly is.


00:06:06.060 --> 00:06:11.980
Which programming languages have you done extensive development work in over the year,


00:06:11.980 --> 00:06:16.220
over the last year? Okay. I don't know how quite how to solve this problem,


00:06:16.220 --> 00:06:19.020
but there's a ton of Python people who did JavaScript work.


00:06:19.020 --> 00:06:19.660
Yeah.


00:06:19.660 --> 00:06:25.740
There is a ton of C++ people who did SQL, right? There's also Python people who did SQL.


00:06:25.740 --> 00:06:32.620
So SQL ranks above Python, but there's very few people whose job it is as a developer


00:06:32.620 --> 00:06:36.980
to write SQL and not use something else.


00:06:36.980 --> 00:06:40.300
>> That's weird to have SQL even in there.


00:06:40.300 --> 00:06:45.980
>> Yeah, I know. Well, HTML and CSS is a little bit weirder as well.


00:06:45.980 --> 00:06:47.420
I feel like it should say,


00:06:47.420 --> 00:06:52.700
what is your primary programming language or something like that.


00:06:52.700 --> 00:06:55.940
>> It's like favorite movie.


00:06:55.940 --> 00:06:58.420
What's your favorite movie but not Princess Bride?


00:06:58.420 --> 00:07:00.100
Other than that, what's your favorite movie?


00:07:00.100 --> 00:07:01.940
>> Yes, exactly.


00:07:01.940 --> 00:07:04.500
So like there's people who do Node.js and JavaScript,


00:07:04.500 --> 00:07:07.140
and that is what I think this top bar


00:07:07.140 --> 00:07:08.820
where JavaScript is should represent.


00:07:08.820 --> 00:07:12.500
But it's that plus everyone else, right, aggregated.


00:07:12.500 --> 00:07:14.340
So I don't know, these are a little bit weird,


00:07:14.340 --> 00:07:15.180
but I'll just go to the top.


00:07:15.180 --> 00:07:16.020
- Yeah, back end.


00:07:16.020 --> 00:07:19.240
So like unless you're primarily just a front end developer,


00:07:19.240 --> 00:07:20.900
what back end languages?


00:07:20.900 --> 00:07:22.860
- Right, right, or maybe you're using Node on the back end,


00:07:22.860 --> 00:07:24.300
but then other than that.


00:07:24.300 --> 00:07:26.500
So JavaScript, number one.


00:07:26.500 --> 00:07:29.460
HTML, top programming language, okay.


00:07:29.460 --> 00:07:31.980
SQL, third most, and then Python, and then TypeScript.


00:07:31.980 --> 00:07:34.520
So, you know, like a bunch of interesting ones.


00:07:34.520 --> 00:07:37.860
And then you've got your VM,


00:07:37.860 --> 00:07:42.900
garbage collected JavaScript, Java and C# back there.


00:07:42.900 --> 00:07:45.460
And then it starts to fall off pretty quick after that.


00:07:45.460 --> 00:07:46.780
Down at the very bottom,


00:07:46.780 --> 00:07:48.980
let's see the very bottom one is Crystal.


00:07:48.980 --> 00:07:52.080
Okay, and APL, oh my gosh, APL.


00:07:52.080 --> 00:07:54.100
APL is something.


00:07:54.100 --> 00:07:56.780
All right, another one that's worth talking about


00:07:56.780 --> 00:07:58.220
is databases.


00:07:58.220 --> 00:08:02.460
So we've got Postgres, MySQL, SQLite, SQL Server,


00:08:02.460 --> 00:08:04.880
MongoDB as the top five.


00:08:04.880 --> 00:08:09.000
So it's pretty clear that Postgres has the momentum.


00:08:09.000 --> 00:08:12.460
Like MySQL was higher and now Postgres is passing it,


00:08:12.460 --> 00:08:15.280
but that's kind of going up here.


00:08:15.280 --> 00:08:17.080
So this is which environments


00:08:17.080 --> 00:08:19.000
have you done extensive work in?


00:08:19.000 --> 00:08:20.920
We'll also see that in like beloved


00:08:20.920 --> 00:08:22.920
versus dreaded section.


00:08:22.920 --> 00:08:23.760
- Yeah.


00:08:23.760 --> 00:08:24.580
(laughing)


00:08:24.580 --> 00:08:25.460
- And by the way, on the audience,


00:08:25.460 --> 00:08:27.280
Marco says, "I've already aged myself


00:08:27.280 --> 00:08:29.280
with that Pink Floyd reference, indeed.


00:08:29.280 --> 00:08:34.000
All right, so cloud platforms, AWS.


00:08:34.000 --> 00:08:35.240
I don't want to surprise you that AWS


00:08:35.240 --> 00:08:37.560
has over half of the entire market.


00:08:37.560 --> 00:08:38.800
>>No. >>No.


00:08:38.800 --> 00:08:41.800
>>But only, it's only a smidge over half, it's 55, so.


00:08:41.800 --> 00:08:43.320
>>Yeah, exactly.


00:08:43.320 --> 00:08:45.820
Web technologies, here's another one.


00:08:45.820 --> 00:08:49.680
This one's kind of okay, but for example,


00:08:49.680 --> 00:08:54.120
they've got Node.js, but they don't have Python, right?


00:08:54.120 --> 00:08:56.920
So I don't know, it's a little bit funky.


00:08:56.920 --> 00:09:00.440
Like they've Node and Express and Express runs on Node,


00:09:00.440 --> 00:09:03.460
whereas they have Flask and Django,


00:09:03.460 --> 00:09:06.580
but they don't have the thing that Django and Flask run on.


00:09:06.580 --> 00:09:07.900
I just, I don't know. Anyway,


00:09:07.900 --> 00:09:09.940
it's a little bit of a challenging one,


00:09:09.940 --> 00:09:12.720
but Node and React are quite high up there.


00:09:12.720 --> 00:09:14.780
Look at this artifact,


00:09:14.780 --> 00:09:19.120
this living fossil right here, Brian. What's number three?


00:09:19.120 --> 00:09:20.020
>> jQuery.


00:09:20.020 --> 00:09:21.700
>> jQuery, you know it.


00:09:21.700 --> 00:09:25.060
Dollar document ready, let's go. All right.


00:09:25.060 --> 00:09:27.060
- I learned jQuery a long time ago.


00:09:27.060 --> 00:09:28.940
- Yeah, I still use a little bit of jQuery


00:09:28.940 --> 00:09:30.460
if there's some site that's already using it.


00:09:30.460 --> 00:09:33.220
I'm like, yeah, whatever, I'm just gonna put one handler


00:09:33.220 --> 00:09:34.500
in here and not worry about it.


00:09:34.500 --> 00:09:35.940
- FastAPI's on the list.


00:09:35.940 --> 00:09:38.180
- Yeah, FastAPI's on the list.


00:09:38.180 --> 00:09:41.420
Django and Flask are 14.6%, both.


00:09:41.420 --> 00:09:44.620
FastAPI is 6% and going up.


00:09:44.620 --> 00:09:47.100
FastAPI just actually had a Ruby on Rails,


00:09:47.100 --> 00:09:48.340
which is pretty interesting.


00:09:48.340 --> 00:09:52.740
- Wait, so Phoenix is down at 2%, 2.13%,


00:09:52.740 --> 00:09:54.500
but I thought it was like--


00:09:54.500 --> 00:09:56.120
>> It's the most loved.


00:09:56.120 --> 00:09:56.600
>> Okay.


00:09:56.600 --> 00:09:59.000
>> It's the most wanted. I looked at it,


00:09:59.000 --> 00:10:00.220
I'm not sure I agree with that,


00:10:00.220 --> 00:10:06.060
but it's a web framework built on the Elixir language.


00:10:06.060 --> 00:10:08.880
So there you have it. We'll see.


00:10:08.880 --> 00:10:13.080
So yeah, another one here that's worth pointing out,


00:10:13.080 --> 00:10:14.460
I'm not going to go over too many more.


00:10:14.460 --> 00:10:15.960
Other frameworks and libraries.


00:10:15.960 --> 00:10:20.480
This one is pretty weird in terms of the partition.


00:10:20.480 --> 00:10:21.780
This is what I had in mind when I'm like,


00:10:21.780 --> 00:10:23.560
there's something really weird about this.


00:10:23.560 --> 00:10:26.280
>> So .NET and NumPy in the same bucket.


00:10:26.280 --> 00:10:30.340
>> Exactly. So .NET is the equivalent of Python.


00:10:30.340 --> 00:10:32.900
It's the equivalent of C++.


00:10:32.900 --> 00:10:34.840
It's the equivalent of Ruby.


00:10:34.840 --> 00:10:37.000
It's like a huge and broad.


00:10:37.000 --> 00:10:39.280
It's the thing that all the other stuff in


00:10:39.280 --> 00:10:43.520
that ecosystem runs on, ASP.NET or whatever.


00:10:43.520 --> 00:10:45.640
So they say, what other language do you work with?


00:10:45.640 --> 00:10:47.240
Do you work with other libraries?


00:10:47.240 --> 00:10:49.560
Do you work with .NET or do you work with NumPy?


00:10:49.560 --> 00:10:50.760
Or do you work with Panda?


00:10:50.760 --> 00:10:52.120
There's no Python here,


00:10:52.120 --> 00:10:55.480
and there's no go and there's no no, I don't know.


00:10:55.480 --> 00:11:00.240
Like it just it's I feel like this just fully is like out of place here.


00:11:00.240 --> 00:11:04.560
So if you just go past that the top two are NumPy and Pandas,


00:11:04.560 --> 00:11:07.920
which by quite a good margin and then Spring for Java,


00:11:07.920 --> 00:11:11.400
React, Native for mobile with JavaScript,


00:11:11.400 --> 00:11:15.960
Flutter and but then back to a bunch of Python libraries.


00:11:15.960 --> 00:11:17.640
>> Yeah, like Concern, PyTorch.


00:11:17.640 --> 00:11:19.920
>> Yeah. So Python actually ranks


00:11:19.920 --> 00:11:21.940
pretty high in the other frameworks and libraries.


00:11:21.940 --> 00:11:22.900
you might be using.


00:11:22.900 --> 00:11:26.060
All right, let's just, let's jump to the loved, dreaded,


00:11:26.060 --> 00:11:28.600
wanted section, and then that's probably enough.


00:11:28.600 --> 00:11:29.900
People can check out the rest.


00:11:29.900 --> 00:11:33.020
All right, so they've got this sort of, you know,


00:11:33.020 --> 00:11:37.500
like what is driving the market greed versus fear


00:11:37.500 --> 00:11:38.700
type of thing.


00:11:38.700 --> 00:11:41.300
And so they put each technology up and it's got a,


00:11:41.300 --> 00:11:44.020
how much love versus how much hate does this technology


00:11:44.020 --> 00:11:46.940
get in a single bar, which is the graphics here


00:11:46.940 --> 00:11:48.540
are pretty nice.


00:11:48.540 --> 00:11:51.280
So rust, 86% love.


00:11:51.280 --> 00:11:53.560
So people who use Rust really like Rust,


00:11:53.560 --> 00:11:56.020
and they don't strongly dislike it.


00:11:56.020 --> 00:11:58.060
It's probably a self-selecting group, right?


00:11:58.060 --> 00:12:01.820
If you took JavaScript people and told them they had to do Rust,


00:12:01.820 --> 00:12:04.580
they might not like it, but Rust people seem to really like Rust.


00:12:04.580 --> 00:12:07.280
Elixir, I've never done anything with Elixir,


00:12:07.280 --> 00:12:09.640
but it's also really high.


00:12:09.640 --> 00:12:13.760
Clojure TypeScript and Python is there about two-thirds loved,


00:12:13.760 --> 00:12:17.160
one-third dreaded, I suppose, or not loved.


00:12:17.160 --> 00:12:18.720
You can see it goes down from there.


00:12:18.720 --> 00:12:22.080
>> Yeah, I want to talk to those 32 percent of the people and say,


00:12:22.080 --> 00:12:23.640
what is it that you don't like?


00:12:23.640 --> 00:12:25.020
>> Well, I agree.


00:12:25.020 --> 00:12:27.340
I feel like there's a lot of people who end up,


00:12:27.340 --> 00:12:31.460
for example, if you look at just the third that says they don't like it,


00:12:31.460 --> 00:12:34.480
that's 11 times as many people using Elixir,


00:12:34.480 --> 00:12:37.960
and that's two times as all the people using Rust.


00:12:37.960 --> 00:12:41.440
So I think it's a little bit a scale thing.


00:12:41.440 --> 00:12:44.520
There's a bunch of people who were working in one technology,


00:12:44.520 --> 00:12:46.020
and then they were told you're going to do Python,


00:12:46.020 --> 00:12:48.040
and some of them wanted that change,


00:12:48.040 --> 00:12:49.200
and some of them probably are like,


00:12:49.200 --> 00:12:52.020
but I like C++ or I like whatever I'm doing


00:12:52.020 --> 00:12:54.400
and they're unhappy to be in that situation.


00:12:54.400 --> 00:12:56.840
So I imagine there's some of that going on here.


00:12:56.840 --> 00:12:57.120
>> Yeah.


00:12:57.120 --> 00:12:59.200
>> There's less people being moved into


00:12:59.200 --> 00:13:01.760
Elixir projects unless they really want to,


00:13:01.760 --> 00:13:02.760
because it's a pretty small group.


00:13:02.760 --> 00:13:04.320
Anyway, there's that.


00:13:04.320 --> 00:13:06.420
Then if you switch to the wanted though,


00:13:06.420 --> 00:13:09.600
Python and Rust tie for number one in most wanted,


00:13:09.600 --> 00:13:12.380
along with TypeScript is showing very notable there.


00:13:12.380 --> 00:13:13.520
>> Yeah, nice.


00:13:13.520 --> 00:13:17.120
>> Yeah. Last one, we'll say databases, I suppose.


00:13:17.120 --> 00:13:20.440
Postgres, most loved, least dreaded.


00:13:20.440 --> 00:13:23.520
Redis, again, one of the things like,


00:13:23.520 --> 00:13:25.520
does this really belong on this list?


00:13:25.520 --> 00:13:26.640
Redis is cool.


00:13:26.640 --> 00:13:28.880
It's mostly for caching and message queues,


00:13:28.880 --> 00:13:31.280
not really as a standalone independent database.


00:13:31.280 --> 00:13:33.920
So can it really be the most wanted database?


00:13:33.920 --> 00:13:36.720
Technically, I know can make it work that way,


00:13:36.720 --> 00:13:37.960
but it's not really built for it.


00:13:37.960 --> 00:13:39.080
So I don't know.


00:13:39.080 --> 00:13:40.240
Anyway, Redis is number two,


00:13:40.240 --> 00:13:41.320
whether it belongs there or not.


00:13:41.320 --> 00:13:43.880
And then MongoDB and SQLite and so on.


00:13:43.880 --> 00:13:46.280
In terms of wanted, Postgres and Mongo.


00:13:46.280 --> 00:13:46.780
>> Nice.


00:13:46.780 --> 00:13:48.500
>> Not too much of a change.


00:13:48.500 --> 00:13:50.360
I think that's pretty much it.


00:13:50.360 --> 00:13:51.760
I'll give just a quick shout out to


00:13:51.760 --> 00:13:54.400
some graphics that are down here that people can play with.


00:13:54.400 --> 00:13:56.640
If you really want to go explore,


00:13:56.640 --> 00:13:59.840
Brian, check this out. Which one is this?


00:13:59.840 --> 00:14:02.120
This database one is probably fair.


00:14:02.120 --> 00:14:03.880
There's this giant,


00:14:03.880 --> 00:14:05.360
I don't know what section is this.


00:14:05.360 --> 00:14:10.120
It is work with versus want to work with.


00:14:10.120 --> 00:14:13.480
It has this wheel.


00:14:13.480 --> 00:14:15.240
As you move around the wheel,


00:14:15.240 --> 00:14:19.560
It'll show you, for example, 5,000 people who worked with Postgres


00:14:19.560 --> 00:14:21.080
want to work with SQLite.


00:14:21.080 --> 00:14:24.800
8,000 people who work with MongoDB want to stay with it.


00:14:24.800 --> 00:14:29.600
Whereas 7,000 people who work with MySQL want to move to MongoDB.


00:14:29.600 --> 00:14:32.120
And similarly, there's like,


00:14:32.120 --> 00:14:34.960
it shows you all these interesting trends and flows


00:14:34.960 --> 00:14:36.960
from this technology to that technology.


00:14:36.960 --> 00:14:40.480
Like if you go up here to the language one, you go to pros,


00:14:40.480 --> 00:14:43.400
and you click on C#, it's pretty interesting because like,


00:14:43.400 --> 00:14:46.000
The C# people, they want to go to TypeScript


00:14:46.000 --> 00:14:47.840
or Python or JavaScript or HTML,


00:14:47.840 --> 00:14:49.640
but they don't want to go to Java.


00:14:49.640 --> 00:14:51.560
Like, there's no arc over to Java, right?


00:14:51.560 --> 00:14:53.640
Because these are basically the same technology


00:14:53.640 --> 00:14:54.800
with slight different trade-offs.


00:14:54.800 --> 00:14:55.840
So if you wanted to be in Java,


00:14:55.840 --> 00:14:57.440
you would just be in Java, I feel like.


00:14:57.440 --> 00:15:00.400
Which you can sort of check out these flows and stuff.


00:15:00.400 --> 00:15:02.880
So anyway, I think that's more than enough on this survey,


00:15:02.880 --> 00:15:04.160
but people should go check it out.


00:15:04.160 --> 00:15:07.840
There's a lot of data here and a lot of things to learn.


00:15:07.840 --> 00:15:10.640
- So does that say HypeScript?


00:15:10.640 --> 00:15:12.200
- It doesn't fit on the screen, that's all.


00:15:12.200 --> 00:15:12.720
>> Okay.


00:15:12.720 --> 00:15:16.860
>> It's HypeScript. Yeah, there's just YPE script,


00:15:16.860 --> 00:15:19.700
TypeScript with, it's just scaling.


00:15:19.700 --> 00:15:21.620
>> Nice. Okay.


00:15:21.620 --> 00:15:23.080
>> Before we move on real quick,


00:15:23.080 --> 00:15:24.460
John out in the audience says,


00:15:24.460 --> 00:15:25.620
"It's interesting that MySQL and


00:15:25.620 --> 00:15:27.820
MariaDB are perceived so differently."


00:15:27.820 --> 00:15:29.300
Yeah, that is true.


00:15:29.300 --> 00:15:33.580
>> Yeah, I don't know much. I think that MySQL has


00:15:33.580 --> 00:15:36.480
a problem that people used it a long time ago,


00:15:36.480 --> 00:15:37.780
and maybe it's different now,


00:15:37.780 --> 00:15:39.460
but that's what I'm basing it.


00:15:39.460 --> 00:15:43.620
My experience with MySQL is like all over 10 years ago.


00:15:43.620 --> 00:15:45.340
>> Yeah, same. All right.


00:15:45.340 --> 00:15:46.540
What you got for us next?


00:15:46.540 --> 00:15:50.420
>> Well, I wanted to talk about Pepy.


00:15:50.420 --> 00:15:53.660
It's a pepy.tech.


00:15:53.660 --> 00:16:00.740
I found out about this from the person that wrote it, Petru Reres.


00:16:00.740 --> 00:16:03.860
We've talked about something similar.


00:16:03.860 --> 00:16:06.500
What we've talked about before is


00:16:06.500 --> 00:16:10.540
is pypi-downloadstats or pypistats.org.


00:16:10.540 --> 00:16:12.540
And so I was like, well, what's different?


00:16:12.540 --> 00:16:16.500
So Pepe does download stats for packages.


00:16:16.500 --> 00:16:20.460
So what we're showing here is the stats for pytest.


00:16:20.460 --> 00:16:23.820
And what the pypi-stats does


00:16:23.820 --> 00:16:27.700
is it shows you a breakdown of, like, you've got the overall packages,


00:16:27.700 --> 00:16:33.100
but then you can also look at downloads per Python 2 versus 3,


00:16:33.100 --> 00:16:37.420
and then major and minor versions of Python.


00:16:37.420 --> 00:16:39.620
That's interesting.


00:16:39.620 --> 00:16:40.580
>> Okay.


00:16:40.580 --> 00:16:42.820
>> But actually now,


00:16:42.820 --> 00:16:47.180
after we're so much far past the two versus three split,


00:16:47.180 --> 00:16:49.660
I'm not even supporting two anymore.


00:16:49.660 --> 00:16:53.180
What I like is Pepe doesn't do that.


00:16:53.180 --> 00:16:56.180
Pepe is the same stats or same for pytest.


00:16:56.180 --> 00:16:59.700
What it's looking at is it grabs the top handful.


00:16:59.700 --> 00:17:01.340
Let's do the default.


00:17:01.340 --> 00:17:03.780
I have it all customized right now.


00:17:03.780 --> 00:17:06.220
So let's drop those off.


00:17:06.220 --> 00:17:12.100
By default, it shows us the last few versions of pytest


00:17:12.100 --> 00:17:17.340
plus all of the downloads for the last major one.


00:17:17.340 --> 00:17:19.660
So all the 7x downloads.


00:17:19.660 --> 00:17:22.420
And so the numbers are a little different


00:17:22.420 --> 00:17:23.820
because we're not showing everything.


00:17:23.820 --> 00:17:26.500
So right off the bat, I kind of like that


00:17:26.500 --> 00:17:28.660
I'm just caring about the last few versions.


00:17:28.660 --> 00:17:29.960
That's kind of nice.


00:17:29.960 --> 00:17:31.840
It also has a daily, weekly,


00:17:31.840 --> 00:17:38.880
monthly chart so that you can see trends going on, which is nice.


00:17:38.880 --> 00:17:42.480
I didn't realize at first is that you


00:17:42.480 --> 00:17:46.720
can select different statistics.


00:17:46.720 --> 00:17:49.560
If I wanted to see everything on all versions,


00:17:49.560 --> 00:17:52.040
I can just go ahead and type a star there.


00:17:52.040 --> 00:17:53.560
I think that works.


00:17:53.560 --> 00:17:54.080
>> Yeah.


00:17:54.080 --> 00:17:54.640
>> There you go.


00:17:54.640 --> 00:17:57.040
>> Then it does all of the downloads.


00:17:57.040 --> 00:17:59.000
Then also when I just dropped that,


00:17:59.000 --> 00:18:04.160
I don't know if you noticed, but it shows all the different download stats already.


00:18:04.160 --> 00:18:08.640
So you can get a glimpse of what you're going to find right off the bat.


00:18:08.640 --> 00:18:11.240
Now, going down through the chart,


00:18:11.240 --> 00:18:16.880
we've got both a chart and a table for when they grab the data.


00:18:16.880 --> 00:18:19.100
This split up of,


00:18:19.100 --> 00:18:20.720
I'm not looking at Python version,


00:18:20.720 --> 00:18:23.840
I'm looking at version for the package that I care about,


00:18:23.840 --> 00:18:26.360
or possibly my package.


00:18:26.360 --> 00:18:29.680
So I did this recently for pytest check,


00:18:29.680 --> 00:18:31.680
and I was thinking about it for pytest


00:18:31.680 --> 00:18:33.760
of like which version should I support?


00:18:33.760 --> 00:18:37.040
And clearly like most, like tons of people


00:18:37.040 --> 00:18:38.320
have switched up to,


00:18:38.320 --> 00:18:40.380
most people have switched to 7x already.


00:18:40.380 --> 00:18:43.880
So yeah, I think it's perfectly fair game


00:18:43.880 --> 00:18:48.100
to not support 6x pytest anymore, so why not?


00:18:48.100 --> 00:18:51.500
Anyway, so just a different take on download stats,


00:18:51.500 --> 00:18:53.600
plus it includes some cool badges


00:18:53.600 --> 00:18:56.800
that if you want to grab your, like, add this to your,


00:18:56.800 --> 00:18:59.900
to your repo to say how many downloads per week or per month.


00:18:59.900 --> 00:19:01.100
Kind of neat.


00:19:01.100 --> 00:19:03.700
>> Yeah, that's really cool.


00:19:03.700 --> 00:19:06.100
If you, you know, if you're open,


00:19:06.100 --> 00:19:08.100
if you're maintaining some open source package,


00:19:08.100 --> 00:19:10.500
you know, like, and it depends on something like this,


00:19:10.500 --> 00:19:12.000
like pytest, you just,


00:19:12.000 --> 00:19:14.600
you can quickly look at that and make a call like,


00:19:14.600 --> 00:19:18.900
well, how, how important is it for me to support this old version?


00:19:18.900 --> 00:19:22.100
Or how ready am I to move to the new thing?


00:19:22.100 --> 00:19:26.420
adopt this feature that won't allow older versions of Python


00:19:26.420 --> 00:19:28.180
or whatever it is you're looking at, right?


00:19:28.180 --> 00:19:29.300
Like, should we add types?


00:19:29.300 --> 00:19:31.980
Well, that might not work on, like, where is it?


00:19:31.980 --> 00:19:33.260
3.3 and before?


00:19:33.260 --> 00:19:34.180
Well, that's probably fine.


00:19:34.180 --> 00:19:36.180
- Well, like, on pytest-check,


00:19:36.180 --> 00:19:38.160
I've got a feature that I'm gonna deprecate,


00:19:38.160 --> 00:19:41.300
and it's only been in since, like, the last version.


00:19:41.300 --> 00:19:45.340
I just didn't think through the API enough, I think.


00:19:45.340 --> 00:19:46.780
But, so I wanted to take a look,


00:19:46.780 --> 00:19:48.660
how many people are using the most recent version,


00:19:48.660 --> 00:19:51.740
and actually, so most of the people are,


00:19:51.740 --> 00:19:53.740
Quite a few people are using the most recent version.


00:19:53.740 --> 00:19:58.740
But it isn't most, it's if I do a total of every version,


00:19:58.740 --> 00:20:02.740
it's definitely not most people using the most recent one,


00:20:02.740 --> 00:20:04.060
but I don't know.


00:20:04.060 --> 00:20:05.540
And of those, I have no idea


00:20:05.540 --> 00:20:07.180
if they're using the feature or not.


00:20:07.180 --> 00:20:09.820
Anyway, interesting to take a look on it.


00:20:09.820 --> 00:20:10.940
And I appreciate it.


00:20:10.940 --> 00:20:13.580
And it's an open-source project as well.


00:20:13.580 --> 00:20:17.900
And some of these graphs have been updated by a contributor.


00:20:17.900 --> 00:20:20.020
So it's kind of nice to have it


00:20:20.020 --> 00:20:21.980
while live and well on open source.


00:20:21.980 --> 00:20:23.580
- Peppy, peppy.tech.


00:20:23.580 --> 00:20:24.420
- Yeah. - Very nice.


00:20:24.420 --> 00:20:25.460
Good find, I like it.


00:20:25.460 --> 00:20:28.300
All right, off to our sponsor for the week.


00:20:28.300 --> 00:20:33.060
- Yes, thank you Microsoft for sponsoring this episode.


00:20:33.060 --> 00:20:34.420
This episode is brought to you by


00:20:34.420 --> 00:20:37.100
Microsoft for Startups Founders Hub.


00:20:37.100 --> 00:20:39.780
Starting a business is hard, but by some estimates,


00:20:39.780 --> 00:20:42.260
over 90% of startups will go out of business


00:20:42.260 --> 00:20:43.820
in the first year, ouch.


00:20:43.820 --> 00:20:45.660
With this in mind, Microsoft for Startups


00:20:45.660 --> 00:20:48.740
set out to understand what startups need to be successful


00:20:48.740 --> 00:20:52.200
and create a digital platform to help overcome those challenges,


00:20:52.200 --> 00:20:55.360
and Startups Founders Hub was born.


00:20:55.360 --> 00:20:58.640
Microsoft for Startups Founders Hub provides all founders at


00:20:58.640 --> 00:21:02.480
any stage with free resources to help solve startup challenges.


00:21:02.480 --> 00:21:04.940
The platform provides technology benefits,


00:21:04.940 --> 00:21:08.300
access to expert guidance and skilling resources,


00:21:08.300 --> 00:21:11.260
mentorship, and network connections, and much more.


00:21:11.260 --> 00:21:12.800
Unlike others in the industry,


00:21:12.800 --> 00:21:15.380
Microsoft for Startups Founders Hub does not


00:21:15.380 --> 00:21:18.300
require startups to be investor-backed or


00:21:18.300 --> 00:21:20.300
third-party validated to participate.


00:21:20.300 --> 00:21:22.840
It is truly open to all. What do you get?


00:21:22.840 --> 00:21:25.960
You can speed up development with free access to GitHub


00:21:25.960 --> 00:21:28.020
and the Microsoft Cloud with


00:21:28.020 --> 00:21:30.300
the ability to unlock credits over time.


00:21:30.300 --> 00:21:32.900
To help with your startup and to help innovate,


00:21:32.900 --> 00:21:34.380
Founders Hub is partnering with


00:21:34.380 --> 00:21:36.540
innovative companies like OpenAI,


00:21:36.540 --> 00:21:38.660
a global leader in AI research and


00:21:38.660 --> 00:21:41.780
development to provide exclusive benefits and discounts.


00:21:41.780 --> 00:21:43.600
Through Founders Hub, becoming


00:21:43.600 --> 00:21:45.740
a founder is no longer about who you know.


00:21:45.740 --> 00:21:48.620
You'll have access to their mentorship network,


00:21:48.620 --> 00:21:51.120
giving you access to a pool of hundreds of mentors


00:21:51.120 --> 00:21:52.920
across a range of disciplines,


00:21:52.920 --> 00:21:55.060
across areas like idea validation,


00:21:55.060 --> 00:21:57.020
fundraising, management, and coaching,


00:21:57.020 --> 00:22:00.660
sales and marketing, as well as specific technical stress points.


00:22:00.660 --> 00:22:03.820
You'll be able to book a one-on-one meeting with the mentors,


00:22:03.820 --> 00:22:08.000
many of whom are former founders themselves.


00:22:08.000 --> 00:22:10.020
Make your ideas a reality today with


00:22:10.020 --> 00:22:11.580
the critical support you'll get from


00:22:11.580 --> 00:22:13.940
Microsoft for Startups Founders Hub.


00:22:13.940 --> 00:22:19.300
To join the program, visit pythonbytes.fm/foundershub2022,


00:22:19.300 --> 00:22:21.500
or click the link in your show notes.


00:22:21.500 --> 00:22:23.660
>> Indeed. Thank you, Microsoft for Startups.


00:22:23.660 --> 00:22:26.900
Let's move over here.


00:22:26.900 --> 00:22:32.000
This next one comes to us from several folks recommended it.


00:22:32.000 --> 00:22:34.580
To be honest, I'm not sure if I would cover it if there


00:22:34.580 --> 00:22:35.700
wasn't a bunch of people said, "Hey,


00:22:35.700 --> 00:22:37.380
you should cover this. This is really interesting."


00:22:37.380 --> 00:22:39.500
I'll take their lead and say,


00:22:39.500 --> 00:22:40.940
"This does look pretty interesting."


00:22:40.940 --> 00:22:46.620
So Jeff Hutchins and Abdul Aziz Al-Khwassim sent this in.


00:22:46.620 --> 00:22:48.180
Thank you both for sending it in.


00:22:48.180 --> 00:22:50.660
And this is the Codon Python compiler.


00:22:50.660 --> 00:22:52.300
Have you heard about this, Brian?


00:22:52.300 --> 00:22:55.180
Just from people submitting it.


00:22:55.180 --> 00:23:00.460
Yeah, and people talk about Python performance all the time.


00:23:00.460 --> 00:23:03.540
Sometimes I would say most of the time it doesn't really matter to you.


00:23:03.540 --> 00:23:07.580
Most of the time you're spending way more time waiting on a network, waiting on an API


00:23:07.580 --> 00:23:09.220
call, waiting on a database.


00:23:09.220 --> 00:23:13.540
But sometimes it really does matter and you need your code to go faster, right?


00:23:13.540 --> 00:23:21.940
So, you know, traditional options have included things like Numba or Cython or even PyPy,


00:23:21.940 --> 00:23:26.020
P-Y-P-Y for the JIT compiled version of Python.


00:23:26.020 --> 00:23:32.240
So here's one more thing to put into that category of options called Codon from Exaloop.


00:23:32.240 --> 00:23:38.660
And it's a high performance, zero overhead extensible Python compiler using LLVM.


00:23:38.660 --> 00:23:44.640
LLVM is, you know, the compilers that it's used all the time, of course, for a bunch


00:23:44.640 --> 00:23:49.860
of different things. And they claim that it is on the order of 10 to 100 times or more


00:23:49.860 --> 00:23:55.580
faster than regular Python for single core performance. And because it really compiles


00:23:55.580 --> 00:24:01.180
to some native code, let's say also, by the way, sometimes better than C++ in terms of


00:24:01.180 --> 00:24:06.900
performance, but it also because it compiles to some native representation, it doesn't


00:24:06.900 --> 00:24:09.540
involved with the gills so you also get better scaling.


00:24:09.540 --> 00:24:11.000
It comes out of this,


00:24:11.000 --> 00:24:15.640
I think genetics project called SEC, bioinformatics rather,


00:24:15.640 --> 00:24:18.460
which is this language for bioinformatics.


00:24:18.460 --> 00:24:20.480
I think what they've decided is like,


00:24:20.480 --> 00:24:24.020
let's just go and just do straight Python.


00:24:24.020 --> 00:24:26.880
If you go to xloop.io,


00:24:26.880 --> 00:24:30.540
they've got a couple of selling points here.


00:24:30.540 --> 00:24:32.700
Performance SE is a Python.


00:24:32.700 --> 00:24:36.860
It adopts Python syntax and is fully interoperable with Python.


00:24:36.860 --> 00:24:40.860
and they've got this little flow graphic type thing.


00:24:40.860 --> 00:24:42.460
Shows your Python code, and if you look,


00:24:42.460 --> 00:24:44.020
it's not even type annotated,


00:24:44.020 --> 00:24:45.180
which kind of surprised me, Brian.


00:24:45.180 --> 00:24:47.740
I figured they would at least require you to add


00:24:47.740 --> 00:24:49.300
Python type ints.


00:24:49.300 --> 00:24:50.140
But no.


00:24:50.140 --> 00:24:52.620
It says you take Python syntax and semantics,


00:24:52.620 --> 00:24:53.780
and you feed it in.


00:24:53.780 --> 00:24:56.460
It builds up an abstract syntax tree.


00:24:56.460 --> 00:24:59.580
It does some kind of type inference


00:24:59.580 --> 00:25:01.700
to figure out what the types are, like ints.


00:25:01.700 --> 00:25:03.500
Comes up with an intermediate representation,


00:25:03.500 --> 00:25:10.700
And then applies a bunch of JIT style optimizations and domain specific optimizations and outcomes.


00:25:10.700 --> 00:25:14.100
Pretty interesting native code, as I said, but also, where does this show?


00:25:14.100 --> 00:25:16.880
I guess it doesn't have a better picture because it's cut off here.


00:25:16.880 --> 00:25:21.460
Outcomes native code, but also web assembly and GPU targeted code.


00:25:21.460 --> 00:25:22.700
So think about that.


00:25:22.700 --> 00:25:23.780
You want to write some code?


00:25:23.780 --> 00:25:26.420
Say this Python code does matrix stuff.


00:25:26.420 --> 00:25:31.460
I want it to run on my NVIDIA GPU, you know, dash dash GPU or whatever the thing you do


00:25:31.460 --> 00:25:32.900
to make it come out with that.


00:25:32.900 --> 00:25:34.140
That's pretty, pretty wild.


00:25:34.140 --> 00:25:36.140
Or put it on the web with WebAssembly.


00:25:36.140 --> 00:25:38.300
- It sounds great.


00:25:38.300 --> 00:25:39.300
- It does sound great.


00:25:39.300 --> 00:25:41.100
So they've got some examples.


00:25:41.100 --> 00:25:44.540
It says we're gonna have a list of fruits,


00:25:44.540 --> 00:25:46.740
just three strings, banana, apple, and lime,


00:25:46.740 --> 00:25:48.500
and some prices in a dictionary.


00:25:48.500 --> 00:25:50.660
Banana has a price, apple has a price.


00:25:50.660 --> 00:25:53.940
And it says we're gonna write standard for fruit in fruits,


00:25:53.940 --> 00:25:56.300
F string print out the price of the fruit,


00:25:56.300 --> 00:25:58.660
and then it's gonna put a bunch of stuff in the cart


00:25:58.660 --> 00:26:01.400
by doing list multiplication and addition,


00:26:01.400 --> 00:26:02.660
like you would expect.


00:26:02.660 --> 00:26:05.100
call the sum with a comprehension and print it out,


00:26:05.100 --> 00:26:06.460
and then boom, no problem,


00:26:06.460 --> 00:26:08.740
compile that to native code if you want.


00:26:08.740 --> 00:26:09.340
>> Okay.


00:26:09.340 --> 00:26:12.620
>> It's as if you know Python, there's nothing to learn.


00:26:12.620 --> 00:26:16.380
>> The question is, which Python?


00:26:16.380 --> 00:26:17.580
It says Python syntax,


00:26:17.580 --> 00:26:19.660
but which Python syntax?


00:26:19.660 --> 00:26:22.660
Is it 310, 3.9, 3.11?


00:26:22.660 --> 00:26:27.580
>> It's not clear other than 3.6 or above because of the f-strings.


00:26:27.580 --> 00:26:30.420
The only giveaway I see here.


00:26:30.420 --> 00:26:33.560
>> Possibly lots of people are fine with


00:26:33.560 --> 00:26:36.660
not exactly knowing which version of the syntax?


00:26:36.660 --> 00:26:38.120
>> Yeah. I didn't say.


00:26:38.120 --> 00:26:39.320
I mean, maybe if you go into the docs,


00:26:39.320 --> 00:26:40.320
it'll exactly say right,


00:26:40.320 --> 00:26:42.080
but not in the little landing page.


00:26:42.080 --> 00:26:43.680
It was initially dissolved to solve


00:26:43.680 --> 00:26:46.120
computing challenges in genomics,


00:26:46.120 --> 00:26:47.760
which is so focused on.


00:26:47.760 --> 00:26:51.120
Also, it's got a bunch of stuff focused on finance


00:26:51.120 --> 00:26:54.840
and GPUs for CUDA programming,


00:26:54.840 --> 00:26:56.920
as well as WebAssembly, which is pretty dope.


00:26:56.920 --> 00:26:57.240
>> Yeah.


00:26:57.240 --> 00:26:58.880
>> Also, if you scroll down a little bit,


00:26:58.880 --> 00:27:00.000
There's a little video,


00:27:00.000 --> 00:27:01.340
I'll hit "Tell it to go."


00:27:01.340 --> 00:27:03.220
There's a video, I'll tell it to stop, I don't know,


00:27:03.220 --> 00:27:09.580
where they show it running as a kernel in Jupyter Notebooks.


00:27:09.580 --> 00:27:09.980
>> Oh, wow.


00:27:09.980 --> 00:27:15.000
>> Just doing standard Python stuff with mass intensive things,


00:27:15.000 --> 00:27:16.740
and then pulling in Matplotlib


00:27:16.740 --> 00:27:20.220
and showing the various things you get with Matplotlib.


00:27:20.220 --> 00:27:23.140
Yeah, it looks pretty good. What do you think?


00:27:23.140 --> 00:27:24.580
>> I think even if it,


00:27:24.580 --> 00:27:27.200
I'd like to know what version of Python it's compatible with,


00:27:27.200 --> 00:27:29.480
But other than that, it looks fun.


00:27:29.480 --> 00:27:32.360
>> It looks really good. It's on GitHub.


00:27:32.360 --> 00:27:36.240
It is technically at least source open.


00:27:36.240 --> 00:27:37.360
What is the license here?


00:27:37.360 --> 00:27:40.120
The license is a business source license.


00:27:40.120 --> 00:27:42.120
What the heck is a business source license?


00:27:42.120 --> 00:27:44.480
From MariaDB Corp.


00:27:44.480 --> 00:27:46.120
Yeah, I'm going to have to figure out what


00:27:46.120 --> 00:27:47.160
the business source license is.


00:27:47.160 --> 00:27:49.120
I don't know how I'm going to do it.


00:27:49.120 --> 00:27:51.960
>> You can read the source, but I don't know.


00:27:51.960 --> 00:27:54.440
>> That's why I said, is it source open or is it not?


00:27:54.440 --> 00:27:55.520
>> Yeah.


00:27:55.520 --> 00:27:57.440
So all this stuff is good.


00:27:57.440 --> 00:28:00.160
And the reason I'm hesitant to recommend it,


00:28:00.160 --> 00:28:02.440
but I think these benefits are really big


00:28:02.440 --> 00:28:05.040
and people can use it, then great.


00:28:05.040 --> 00:28:06.600
You go a little further, it says,


00:28:06.600 --> 00:28:09.680
ExaLoop and you, this is free for non-production use.


00:28:09.680 --> 00:28:12.080
If you wanna use it for things that are commercial,


00:28:12.080 --> 00:28:14.080
then do you know what it costs?


00:28:14.080 --> 00:28:15.640
- Don't know, contact us.


00:28:15.640 --> 00:28:16.680
- I don't know either.


00:28:16.680 --> 00:28:18.880
If you gotta ask, it's too much for you.


00:28:18.880 --> 00:28:19.720
(laughing)


00:28:19.720 --> 00:28:21.360
Let's just put it there.


00:28:21.360 --> 00:28:22.640
- That's what my dad always said,


00:28:22.640 --> 00:28:25.280
if you gotta ask, you can't afford it.


00:28:25.280 --> 00:28:29.340
- Exactly, which I don't know, I'm not against them


00:28:29.340 --> 00:28:31.340
charging for it, I understand that this is probably


00:28:31.340 --> 00:28:33.100
an insane amount of work to put together,


00:28:33.100 --> 00:28:36.100
and if that's their model, that's their prerogative,


00:28:36.100 --> 00:28:38.380
and it's fine, I don't think everything has to be


00:28:38.380 --> 00:28:40.420
given away free, there's tons of work that goes


00:28:40.420 --> 00:28:43.060
into a lot of stuff, and sometimes charging for it


00:28:43.060 --> 00:28:46.060
is the right answer, but just tell people what it costs.


00:28:46.060 --> 00:28:47.820
You know, don't make 'em email you,


00:28:47.820 --> 00:28:49.500
that is really not good.


00:28:49.500 --> 00:28:53.020
- Well, so Robert mentioned, Robert Robinson,


00:28:53.020 --> 00:28:55.540
Maybe it's a sliding scale and it's like,


00:28:55.540 --> 00:28:58.580
it depends on who's asking, you know,


00:28:58.580 --> 00:29:02.020
Microsoft calls up and asks, it's a different price than.


00:29:02.020 --> 00:29:03.220
- I'm sure it is a different price.


00:29:03.220 --> 00:29:05.220
And I'm sure that's, oh, do you want to run that


00:29:05.220 --> 00:29:06.900
on all of Azure?


00:29:06.900 --> 00:29:08.780
Well, here's the price, but you know,


00:29:08.780 --> 00:29:10.740
put some common cases in there.


00:29:10.740 --> 00:29:13.140
And are you a data scientist and you want to use it


00:29:13.140 --> 00:29:14.300
for an API?


00:29:14.300 --> 00:29:15.240
Here's what it costs.


00:29:15.240 --> 00:29:17.340
Are you trying to host it as a server?


00:29:17.340 --> 00:29:19.300
Well, here, like, then maybe need to, like,


00:29:19.300 --> 00:29:21.500
there should be at least a little bit of a,


00:29:21.500 --> 00:29:25.140
here's the realm of where you start, right?


00:29:25.140 --> 00:29:27.580
A lot of things have, you know, here's the base price,


00:29:27.580 --> 00:29:30.260
here's the pro price, here's the enterprise price,


00:29:30.260 --> 00:29:33.140
and here's the contact us if that doesn't fit you, right?


00:29:33.140 --> 00:29:35.860
But to say it costs money and we won't tell you


00:29:35.860 --> 00:29:39.380
what it costs, I don't know, it just sounds not great.


00:29:39.380 --> 00:29:42.900
- And I hope people, so the free non-production,


00:29:42.900 --> 00:29:46.460
non-commercial versus commercial, that's still a fuzzy line


00:29:46.460 --> 00:29:49.900
and I wish there was more detail whenever anybody does that


00:29:49.900 --> 00:29:52.660
because I've been in situations a lot


00:29:52.660 --> 00:29:55.660
where I'm just some dude writing a script in a company


00:29:55.660 --> 00:29:56.640
and the company's big,


00:29:56.640 --> 00:29:58.980
but I just wanna get this thing to work


00:29:58.980 --> 00:30:02.160
and it's just a small piece of my build chain or something.


00:30:02.160 --> 00:30:05.440
I'm not gonna get okayed to do a corporate license


00:30:05.440 --> 00:30:08.960
for something just to save me five minutes a day.


00:30:08.960 --> 00:30:09.800
Yeah.


00:30:09.800 --> 00:30:11.140
- And maybe you're not selling it, right?


00:30:11.140 --> 00:30:11.980
- Yeah.


00:30:11.980 --> 00:30:12.800
- For example.


00:30:12.800 --> 00:30:13.900
- Yeah, that's another thing.


00:30:13.900 --> 00:30:15.780
Is it part of the thing I'm selling


00:30:15.780 --> 00:30:18.820
or is it just part of my work to get something else done?


00:30:19.860 --> 00:30:23.380
>> Indeed. So anyway, pluses and minuses,


00:30:23.380 --> 00:30:25.920
but it's an interesting contribution


00:30:25.920 --> 00:30:27.720
and thanks folks for sending that in.


00:30:27.720 --> 00:30:28.380
>> Definitely.


00:30:28.380 --> 00:30:28.920
>> Indeed.


00:30:28.920 --> 00:30:31.720
>> Well, so I want to talk about type hints a little bit.


00:30:31.720 --> 00:30:34.480
I've been thinking about type hints a lot and ran across


00:30:34.480 --> 00:30:40.160
this article called Eight Levels of Using Type Hints in Python.


00:30:40.160 --> 00:30:42.880
It's from Yang Cho.


00:30:42.880 --> 00:30:45.040
First off, I love the graphic.


00:30:45.040 --> 00:30:46.800
This is an unsplash graphic,


00:30:46.800 --> 00:30:49.480
but I'm a fan of it.


00:30:49.480 --> 00:30:53.480
It looks like posters, like movie,


00:30:53.480 --> 00:30:56.880
or like band posters or something like that on something,


00:30:56.880 --> 00:30:58.880
and then half of them are peeled off.


00:30:58.880 --> 00:31:01.200
So cool image.


00:31:01.200 --> 00:31:04.040
Anyway, complete side note.


00:31:04.040 --> 00:31:08.360
I was attracted to this because this eight stage,


00:31:08.360 --> 00:31:11.960
I thought of it as like eight stages of using type hints,


00:31:11.960 --> 00:31:15.080
because that's how I started using type hints,


00:31:15.080 --> 00:31:17.640
and it almost got the order the same.


00:31:17.640 --> 00:31:19.520
So let's go through these orders.


00:31:19.520 --> 00:31:21.320
So the first one is...


00:31:21.320 --> 00:31:23.320
Did I skip over it?


00:31:23.320 --> 00:31:26.920
The first was type hints for basic data types.


00:31:26.920 --> 00:31:29.920
So basically, and like, you kind of do this


00:31:29.920 --> 00:31:32.320
if you're using data classes at all.


00:31:32.320 --> 00:31:35.520
You just say, "Well, I've got my age as an int,


00:31:35.520 --> 00:31:37.640
and it defaults to 29."


00:31:37.640 --> 00:31:40.920
Just to kind of tell people what you're thinking about.


00:31:40.920 --> 00:31:45.520
And while you're, you know, my hosts are a tuple,


00:31:45.520 --> 00:31:48.800
and they default to an empty tuple or something.


00:31:48.800 --> 00:31:51.720
So this is pretty much how I started as well,


00:31:51.720 --> 00:31:55.400
and I started mostly because I started using data classes,


00:31:55.400 --> 00:32:00.920
and this is what they look like when you're declaring the contents of a data class.


00:32:00.920 --> 00:32:04.000
And then, so where do you go from there?


00:32:04.000 --> 00:32:10.000
The next stage is defining a constant using final type.


00:32:10.000 --> 00:32:13.000
Actually, I've never used this. Have you ever used final?


00:32:13.000 --> 00:32:15.040
>> I've wanted to use it,


00:32:15.040 --> 00:32:20.840
but it's so not exactly enforced type of thing.


00:32:20.840 --> 00:32:23.400
>> Right. Python doesn't enforce it.


00:32:23.400 --> 00:32:26.520
>> I would love to have a constant in Python,


00:32:26.520 --> 00:32:29.320
but doing it through typing means the only time it's going to be


00:32:29.320 --> 00:32:32.360
validated or checked is if I run mypy or something,


00:32:32.360 --> 00:32:34.360
and most of the time I'm not.


00:32:34.360 --> 00:32:36.840
It's like, well, okay, whatever.


00:32:36.840 --> 00:32:40.480
>> Yeah. I'm actually increasing the amount of times I'm using


00:32:40.480 --> 00:32:44.040
mypy or other type checking things.


00:32:44.040 --> 00:32:46.480
But yeah, I wouldn't have put this number two,


00:32:46.480 --> 00:32:48.600
but minor gripe. It's a cool feature.


00:32:48.600 --> 00:32:52.160
>> It is a cool feature though. Yeah. I don't knock it's existence.


00:32:52.160 --> 00:32:55.120
I just wish it was more supported in the language.


00:32:55.120 --> 00:33:01.160
>> Yeah. The third is adding multiple type hints to one variable.


00:33:01.160 --> 00:33:03.960
It shows here a couple of different ways,


00:33:03.960 --> 00:33:09.520
the union of an int and a float or the bar of int and float.


00:33:09.520 --> 00:33:13.420
The number one way I use this, I mean,


00:33:13.420 --> 00:33:14.960
I use things like this also,


00:33:14.960 --> 00:33:16.360
like it could be an int or a float,


00:33:16.360 --> 00:33:21.180
but I mostly use it for int or none,


00:33:21.180 --> 00:33:25.020
or something or none because I've got a default value of none.


00:33:25.020 --> 00:33:28.720
I wish there was another way to do it.


00:33:28.720 --> 00:33:31.480
I don't know, it's convenient anyway,


00:33:31.480 --> 00:33:34.380
but let's say I've got a parameter to a function,


00:33:34.380 --> 00:33:37.840
and internally I assign it,


00:33:37.840 --> 00:33:40.600
It defaults to none if nobody passes anything in.


00:33:40.600 --> 00:33:44.320
But I also don't really want somebody to pass none in, you know?


00:33:44.320 --> 00:33:48.720
So I wish there was a, like, the default is none,


00:33:48.720 --> 00:33:51.840
but users can't pass in none or something like that.


00:33:51.840 --> 00:33:52.960
Yeah.


00:33:52.960 --> 00:33:55.720
But anyway, it works. And in the end,


00:33:55.720 --> 00:33:59.800
it helps with testing anyway to be able to pass in all the types.


00:33:59.800 --> 00:34:04.120
But so, yeah, and I've totally switched to the bar thing.


00:34:04.120 --> 00:34:06.960
I think it was 3.10 that added that. Do you remember?


00:34:06.960 --> 00:34:08.820
I think it was 310.


00:34:08.820 --> 00:34:09.540
>> I think it was 310.


00:34:09.540 --> 00:34:10.740
>> It says right here.


00:34:10.740 --> 00:34:11.420
>> It says there.


00:34:11.420 --> 00:34:13.100
>> Anything I'm writing,


00:34:13.100 --> 00:34:17.340
I support 310 and above because I like the bar.


00:34:17.340 --> 00:34:20.300
The next thing is using general type ints,


00:34:20.300 --> 00:34:24.300
which also I think now we're starting to


00:34:24.300 --> 00:34:26.260
increase the stage of understanding


00:34:26.260 --> 00:34:28.540
of how type ints can help you.


00:34:28.540 --> 00:34:30.580
The notion like in the example,


00:34:30.580 --> 00:34:36.140
they use iterable from typing import iterable.


00:34:36.140 --> 00:34:39.840
So you say that I'm accepting something like numbers,


00:34:39.840 --> 00:34:41.620
and it takes an iterable.


00:34:41.620 --> 00:34:44.080
I love this use.


00:34:44.080 --> 00:34:46.800
It takes a little bit more of advanced use,


00:34:46.800 --> 00:34:49.300
so you get a little more comfortable with type hints.


00:34:49.300 --> 00:34:50.880
To be able to say,


00:34:50.880 --> 00:34:53.860
I'm going to do iteration like for in and nums.


00:34:53.860 --> 00:34:55.140
Doesn't really matter what it is,


00:34:55.140 --> 00:34:58.020
if it's a list or a tuple or something else,


00:34:58.020 --> 00:35:01.780
as long as I can iterate over it, it's good.


00:35:01.780 --> 00:35:04.220
The other thing is probably,


00:35:04.220 --> 00:35:07.180
I'm not sure why they didn't put is optional,


00:35:07.180 --> 00:35:09.500
but along the same is iterable.


00:35:09.500 --> 00:35:12.320
I'm going to often say it's iterable,


00:35:12.320 --> 00:35:16.740
but the type inside is an int or something like that.


00:35:16.740 --> 00:35:17.980
But anyway.


00:35:17.980 --> 00:35:18.500
>> Right.


00:35:18.500 --> 00:35:19.660
>> The fifth one is.


00:35:19.660 --> 00:35:21.180
>> Bracket int or something like that.


00:35:21.180 --> 00:35:21.540
>> Yeah.


00:35:21.540 --> 00:35:23.820
>> Or bracket strings, what you get out.


00:35:23.820 --> 00:35:26.460
>> The fifth is type ints for functions,


00:35:26.460 --> 00:35:28.620
and I probably would have put this as number two,


00:35:28.620 --> 00:35:31.740
because I started using this right away.


00:35:32.060 --> 00:35:37.100
to say, because that's one of the things that's hard


00:35:37.100 --> 00:35:39.980
when I came to Python from C++


00:35:39.980 --> 00:35:43.860
is knowing, like, where do I put the return value?


00:35:43.860 --> 00:35:48.900
Like, the return type is, you know, maybe it's multiple return types,


00:35:48.900 --> 00:35:50.500
which I don't really want it to be,


00:35:50.500 --> 00:35:53.860
but it's nice to be able to see what the return type is


00:35:53.860 --> 00:35:56.860
and type ints add that with type ints for functions.


00:35:56.860 --> 00:36:01.060
Or you read a function, you know, like, I want to call that, but what do I do?


00:36:01.060 --> 00:36:06.060
I have to read the function and try to understand it or can I just read the definition?


00:36:06.060 --> 00:36:08.660
I think this is one of the main uses.


00:36:08.660 --> 00:36:15.360
And it's also nice to be able to see right there with a union type is not a possibility.


00:36:15.360 --> 00:36:20.060
Do I have to deal with nothing coming back as something is possible.


00:36:20.060 --> 00:36:24.460
Number six is alias for type hints and I kind of love this.


00:36:24.460 --> 00:36:28.260
I haven't been using this much, but I'm going to start using it more.


00:36:28.260 --> 00:36:34.340
Especially it says in Python 3.10, so before Python 3.10 you had to do


00:36:34.340 --> 00:36:38.900
like from typing import type alias and have this weird syntax thing around it.


00:36:38.900 --> 00:36:44.140
But it's not really that weird. But after 3.10


00:36:44.140 --> 00:36:48.620
you just sort of declare a thing. It says like post type. Post type is a dict


00:36:48.620 --> 00:36:51.060
that goes from int to string. That's great.


00:36:51.060 --> 00:36:54.340
And then you can use that as a type int in other places.


00:36:54.340 --> 00:36:57.380
That's interesting. That's news to me. Yeah, that's really interesting.


00:36:57.380 --> 00:37:01.580
So definitely, I'll definitely start using that. So I'm glad I read the article for that.


00:37:01.580 --> 00:37:04.880
Type hints for class, for a class itself,


00:37:04.880 --> 00:37:09.020
which I'm not sure why it was titled this, but basically it's the self type.


00:37:09.020 --> 00:37:12.480
And this is very helpful if you have a class,


00:37:12.480 --> 00:37:16.420
a class that has objects that refer to other objects of the same type.


00:37:16.420 --> 00:37:20.780
I don't know how you did that before then. I guess I wasn't caring about it.


00:37:20.780 --> 00:37:23.980
But you had to, there was a hack where you put it


00:37:23.980 --> 00:37:28.700
into quotes. So the example from this article is a class called ListNode,


00:37:28.700 --> 00:37:32.300
and it's going to be past the previous node, right? So what is the type of that?


00:37:32.300 --> 00:37:37.300
Well, it should be a ListNode. Python is in the process of building up the ListNode class,


00:37:37.300 --> 00:37:41.380
so it doesn't yet know what it is, but you're trying to define a function that has that.


00:37:41.380 --> 00:37:44.780
So there's this weird patch 22 thing, pick and egg thing.


00:37:44.780 --> 00:37:48.580
So what you put is you would put ListNode in quotes. That's the old version.


00:37:48.580 --> 00:37:53.900
And of course it was just a string, but then it's like, well, but it's a string that says that, so


00:37:53.900 --> 00:37:56.740
we're going to just guess that that's what you want. It was weird.


00:37:56.740 --> 00:38:02.100
>> Okay. Well, the eighth and final one is to provide literals for variables.


00:38:02.100 --> 00:38:04.500
I haven't done this, but it's nice also,


00:38:04.500 --> 00:38:06.000
and I didn't know you could do this.


00:38:06.000 --> 00:38:08.180
Just to say, in the example,


00:38:08.180 --> 00:38:11.040
it's from typing import literal,


00:38:11.040 --> 00:38:14.700
and then you define a weekend that's


00:38:14.700 --> 00:38:19.300
a literal that can only be the strings Saturday or Sunday.


00:38:19.300 --> 00:38:21.460
This isn't an enumeration,


00:38:21.460 --> 00:38:26.340
it's just saying that it can only have these particular values.


00:38:26.340 --> 00:38:29.500
I think I got that right. I don't think it has to be an enumeration.


00:38:29.500 --> 00:38:31.100
>> No.


00:38:31.100 --> 00:38:34.380
>> The example says, well,


00:38:34.380 --> 00:38:37.620
if you assign that variable to Monday,


00:38:37.620 --> 00:38:39.820
your type checkers are going to complain


00:38:39.820 --> 00:38:42.740
because you didn't assign the one of the known ones.


00:38:42.740 --> 00:38:46.700
I probably would use this in conjunction with enums,


00:38:46.700 --> 00:38:49.340
or maybe I don't have to with enums, I don't know.


00:38:49.340 --> 00:38:53.740
But there's a lot of stuff that is passed around that's kind of like an enum,


00:38:53.740 --> 00:38:57.740
but it's passed around as just a handful of strings that it can only be one of these strings.


00:38:57.740 --> 00:38:59.780
>> Yeah. Be nice for this to support it.


00:38:59.780 --> 00:39:03.840
Henry on the audience points out that x colon final equals true,


00:39:03.840 --> 00:39:06.560
also maps to one of these literal checks.


00:39:06.560 --> 00:39:09.140
So is literal of true rather than just a bool.


00:39:09.140 --> 00:39:11.700
So the type checker can make sure it's always true,


00:39:11.700 --> 00:39:12.920
not true or false.


00:39:12.920 --> 00:39:15.740
So there's an interesting tie together of those as well.


00:39:15.740 --> 00:39:18.700
Robert points out that it sounds like a case of the Mondays.


00:39:18.700 --> 00:39:20.660
- Oh dear.


00:39:20.660 --> 00:39:23.540
And Henry mentions that last time I checked,


00:39:23.540 --> 00:39:25.180
self was not supported by mypy,


00:39:25.180 --> 00:39:27.420
but so we'll have to check on that.


00:39:27.420 --> 00:39:29.620
Anybody from mypy listening,


00:39:29.620 --> 00:39:30.440
- Let us know.


00:39:30.440 --> 00:39:31.460
- Let us know.


00:39:31.460 --> 00:39:33.500
Well, that's it for this.


00:39:33.500 --> 00:39:35.380
I just thought it was a good,


00:39:35.380 --> 00:39:38.220
and I do think this is a good idea


00:39:38.220 --> 00:39:41.660
is to not try to jump in the deep end of type hints.


00:39:41.660 --> 00:39:45.140
Try some of the simple stuff first


00:39:45.140 --> 00:39:48.260
and then you get to caring about it.


00:39:48.260 --> 00:39:51.000
- Yeah, that was a good little discussion around it.


00:39:51.000 --> 00:39:51.840
That was fun.


00:39:51.840 --> 00:39:52.660
- Yeah.


00:39:52.660 --> 00:39:53.500
- All right, got any extras for us


00:39:53.500 --> 00:39:54.680
you want to throw out there?


00:39:54.680 --> 00:39:56.960
- The only extra I wanted to bring up


00:39:56.960 --> 00:39:59.340
is the Test and Code hasn't had an episode


00:39:59.340 --> 00:40:02.600
since like October or something, and it's not dead.


00:40:02.600 --> 00:40:06.000
I just kind of wanted to take the holiday off


00:40:06.000 --> 00:40:09.500
without telling anybody, and it's coming back.


00:40:09.500 --> 00:40:12.240
So sometime in January, there'll be a Test and Code episode.


00:40:12.240 --> 00:40:13.760
- Oh, excellent, looking forward to it.


00:40:13.760 --> 00:40:14.920
All right, I have a few extras,


00:40:14.920 --> 00:40:17.480
and one leads to another, which leads to another,


00:40:17.480 --> 00:40:19.520
as is the nature of all these things.


00:40:19.520 --> 00:40:22.560
So I ran across a couple of articles,


00:40:22.560 --> 00:40:23.560
let me start that way,


00:40:23.560 --> 00:40:25.500
that sort of talked about RSS


00:40:25.500 --> 00:40:27.640
and how RSS is actually kind of important


00:40:27.640 --> 00:40:30.080
as a foundation of the independent web


00:40:30.080 --> 00:40:33.100
in ways maybe bigger than I really realized.


00:40:33.100 --> 00:40:34.920
So there's this one called "Back to RSS"


00:40:34.920 --> 00:40:36.800
and I'll just read a little excerpt from each of them.


00:40:36.800 --> 00:40:40.040
It says, "It's 2023 or 1999 or whatever.


00:40:40.040 --> 00:40:41.720
"Personal sites are back, blogs are back,


00:40:41.720 --> 00:40:44.120
"RSS is back, and owning your data is becoming real,"


00:40:44.120 --> 00:40:46.160
which is kind of a cool thing.


00:40:46.160 --> 00:40:50.360
And then also there's this one the same day on the Verge


00:40:50.360 --> 00:40:52.160
called Bring Back Personal Blogging.


00:40:52.160 --> 00:40:54.960
And yeah, anyway, so I ended up writing


00:40:54.960 --> 00:40:58.760
a Welcome Back RSS article that kind of riffed on those ideas


00:40:58.760 --> 00:41:01.080
and talked about some more, talked about Reader,


00:41:01.080 --> 00:41:03.080
which I talked about before and stuff.


00:41:03.080 --> 00:41:06.880
So yeah, anyway, people can go check out that article


00:41:06.880 --> 00:41:07.720
and it's interesting.


00:41:07.720 --> 00:41:10.240
And as part of the conversation,


00:41:10.240 --> 00:41:14.160
I learned about Reader, as in reader.readthedocs.io,


00:41:14.160 --> 00:41:17.400
which is a Python feed reader library.


00:41:17.400 --> 00:41:22.940
So it does things like let you subscribe with Python to RSS and Adam and JSON feeds,


00:41:22.940 --> 00:41:25.140
mark articles as read and important,


00:41:25.140 --> 00:41:28.040
filter them, get stats, do all of it.


00:41:28.040 --> 00:41:32.800
Basically, if you wanted the logical internals of an RSS reader,


00:41:32.800 --> 00:41:34.980
here's a Python library to do that, which is cool.


00:41:34.980 --> 00:41:37.640
>> Now, what we need to do is have a listener take


00:41:37.640 --> 00:41:41.080
reader and put a textual front end on it.


00:41:41.080 --> 00:41:43.960
>> Yes, actually, that's a pretty interesting idea.


00:41:43.960 --> 00:41:44.980
>> That'd be cool.


00:41:44.980 --> 00:41:49.220
>> This guy over here built a thing called Kustos,


00:41:49.220 --> 00:41:52.580
which is basically like Instapaper,


00:41:52.580 --> 00:41:55.900
self-hosted Python web app built on Reader.


00:41:55.900 --> 00:41:57.380
So people can check that out.


00:41:57.380 --> 00:41:59.620
Then Readwise looks really interesting.


00:41:59.620 --> 00:42:01.120
Are you familiar with Readwise?


00:42:01.120 --> 00:42:01.780
>> No.


00:42:01.780 --> 00:42:04.780
>> So it's like an RSS reader,


00:42:04.780 --> 00:42:07.380
but it also lets you take notes,


00:42:07.380 --> 00:42:09.260
mark stuff as read for later,


00:42:09.260 --> 00:42:10.980
even if it doesn't have an RSS feed,


00:42:10.980 --> 00:42:13.420
and highlight your research as you're


00:42:13.420 --> 00:42:15.080
to go in through it and save it.


00:42:15.080 --> 00:42:17.000
So think how good that would be for people that say,


00:42:17.000 --> 00:42:19.200
dude, podcaster, you gotta remember a bunch of stuff


00:42:19.200 --> 00:42:20.280
about an article.


00:42:20.280 --> 00:42:22.160
Pull that thing back up and it's got your highlights


00:42:22.160 --> 00:42:23.000
and your notes on it.


00:42:23.000 --> 00:42:24.980
- Oh, I'm liking this.


00:42:24.980 --> 00:42:26.120
I'm gonna have to check it out.


00:42:26.120 --> 00:42:27.280
- Yeah, that's looking pretty good.


00:42:27.280 --> 00:42:30.080
So anyway, all that stuff came from this little article


00:42:30.080 --> 00:42:31.400
that I wrote, people can check that out.


00:42:31.400 --> 00:42:32.240
- Nice.


00:42:32.240 --> 00:42:33.440
- Another very important thing,


00:42:33.440 --> 00:42:38.440
there's this Mastodon account called Year Progress,


00:42:38.440 --> 00:42:41.200
and it just goes along and every day,


00:42:41.200 --> 00:42:45.000
it just posts a progress bar for how far we are


00:42:45.000 --> 00:42:47.060
in the daily progress.


00:42:47.060 --> 00:42:50.260
So it's like a little ASCII, you know,


00:42:50.260 --> 00:42:54.220
TQ, DM style progress bar of the year.


00:42:54.220 --> 00:42:56.900
And it's just notable that we just had


00:42:56.900 --> 00:42:59.100
100% progress for the year.


00:42:59.100 --> 00:43:02.860
Now that we're done, it's reset to zero, but it was 100%.


00:43:02.860 --> 00:43:04.820
- Actually, it looks like it doesn't actually do it


00:43:04.820 --> 00:43:07.220
every day, but it does it when it goes to a new percentage,


00:43:07.220 --> 00:43:09.740
so it's every few days, or two or three days, right?


00:43:09.740 --> 00:43:11.020
- Yeah, yeah, it looks like it.


00:43:11.020 --> 00:43:12.560
which I guess is probably good.


00:43:12.560 --> 00:43:14.580
I mean, thank you for not doing,


00:43:14.580 --> 00:43:18.680
like saving 3.6, 2.6 posts, something like that.


00:43:18.680 --> 00:43:20.500
All right.


00:43:20.500 --> 00:43:22.420
- And don't just watch it, wait for it.


00:43:22.420 --> 00:43:26.420
- It's not that exciting, it doesn't actually drop in.


00:43:26.420 --> 00:43:30.300
It has no decimal point, so it's not,


00:43:30.300 --> 00:43:31.900
it's gotta work in big ASCII blocks,


00:43:31.900 --> 00:43:32.860
so it does what it does.


00:43:32.860 --> 00:43:35.600
All right, this is something that people


00:43:35.600 --> 00:43:39.340
might wanna keep an eye out who had automated build running


00:43:39.340 --> 00:43:42.740
over the winter break and also use PyTorch.


00:43:42.740 --> 00:43:44.860
So one of the thoughts I had,


00:43:44.860 --> 00:43:47.980
I was just kicking back, we're hanging around.


00:43:47.980 --> 00:43:51.180
I'm like, "I'm going to work on some of these little weird projects.


00:43:51.180 --> 00:43:53.260
I'd like the login page on


00:43:53.260 --> 00:43:55.680
Talk Python Training just be a little smoother and cleaner.


00:43:55.680 --> 00:43:56.980
Maybe I'll just go play with that.


00:43:56.980 --> 00:43:58.460
I'm not really going to do real work,


00:43:58.460 --> 00:44:00.660
but it'd be fun to do some web design and just


00:44:00.660 --> 00:44:03.020
no pressure redesign that a little bit."


00:44:03.020 --> 00:44:07.020
I thought, "But I'm going to be careful about adding new libraries,


00:44:07.020 --> 00:44:11.420
updating existing ones like pip-tools, style, update them.


00:44:11.420 --> 00:44:13.220
Because is anybody watching?


00:44:13.220 --> 00:44:14.780
If something bad got in there,


00:44:14.780 --> 00:44:17.100
would anybody know or they all on break?


00:44:17.100 --> 00:44:21.020
Well, it turns out my paranoid side was on to something.


00:44:21.020 --> 00:44:22.460
Luckily, not anything I was using,


00:44:22.460 --> 00:44:23.980
but PyTorch discloses


00:44:23.980 --> 00:44:27.540
malicious dependency chain compromise over the holidays.


00:44:27.540 --> 00:44:29.340
This is bad.


00:44:29.340 --> 00:44:33.660
If you pip installed somehow the PyTorch stuff,


00:44:33.660 --> 00:44:35.700
I don't know the exact how it links together,


00:44:35.700 --> 00:44:38.380
but it says PyTorch has identified a malicious dependency


00:44:38.380 --> 00:44:42.700
with the same name as the frameworks Torch Triton library.


00:44:42.700 --> 00:44:44.740
So that was like somehow shipped


00:44:44.740 --> 00:44:48.100
or directly linked in PyTorch in a way


00:44:48.100 --> 00:44:50.840
that I don't fully understand 'cause I don't use it.


00:44:50.840 --> 00:44:54.220
But what happened is on Merry, Merry Christmas,


00:44:54.220 --> 00:45:00.260
on December 25th, users who installed PyTorch nightly


00:45:00.260 --> 00:45:02.260
should ensure their systems are not compromised


00:45:02.260 --> 00:45:03.820
because this Triton torch,


00:45:03.820 --> 00:45:07.540
what they did is somebody put a malicious version on PyPI


00:45:07.540 --> 00:45:09.820
and when PyTorch was getting set up,


00:45:09.820 --> 00:45:11.340
instead of picking its own version,


00:45:11.340 --> 00:45:15.740
it preferred the PyPI version, which was a virus.


00:45:15.740 --> 00:45:17.780
So anyway, people can check that out.


00:45:17.780 --> 00:45:19.280
It's sub-ideal.


00:45:19.280 --> 00:45:21.220
Since the PyPI index takes precedence,


00:45:21.220 --> 00:45:24.260
this malicious package was being installed


00:45:24.260 --> 00:45:26.640
instead of the version from the official repository.


00:45:26.640 --> 00:45:30.380
This enables somebody to register a package to do bad things.


00:45:30.380 --> 00:45:31.800
Anyway, people can read all about that,


00:45:31.800 --> 00:45:34.740
But if you have PyTorch and you pip installed it


00:45:34.740 --> 00:45:36.420
over the point of break, read that.


00:45:36.420 --> 00:45:38.820
- Yeah, plus kudos for them for coming up


00:45:38.820 --> 00:45:41.540
with a great domain name, bleepingcomputer.com.


00:45:41.540 --> 00:45:42.900
- Yes, I know, bleepingcomputer.


00:45:42.900 --> 00:45:45.340
There's a lot of good articles on bleepingcomputer.


00:45:45.340 --> 00:45:46.580
It's in my RSS feed.


00:45:46.580 --> 00:45:49.860
All right, well, that's all I got for extras.


00:45:49.860 --> 00:45:50.820
How about a joke?


00:45:50.820 --> 00:45:51.840
- Yeah, that sounds great.


00:45:51.840 --> 00:45:53.620
- So first of all, let me,


00:45:53.620 --> 00:45:56.700
I don't wanna kill the punchline before we set the stage.


00:45:56.700 --> 00:45:58.620
Okay, so I pulled up just the picture.


00:45:58.620 --> 00:46:01.060
Can you tell people what this is on the screen, Brian?


00:46:01.060 --> 00:46:02.360
You remember these things?


00:46:02.360 --> 00:46:04.560
- Well, remember, they're still there.


00:46:04.560 --> 00:46:07.920
- Not on my laptop, not on my Mac mini.


00:46:07.920 --> 00:46:11.040
- Okay, it's on the back of like a computer or something,


00:46:11.040 --> 00:46:13.160
a desktop computer.


00:46:13.160 --> 00:46:15.820
Next to the power cord, there's a toggle switch


00:46:15.820 --> 00:46:19.000
with a on and off, it's on and off toggle switch.


00:46:19.000 --> 00:46:21.600
- Right, it's like a physical power button


00:46:21.600 --> 00:46:24.680
directly on the power supply on a desktop computer, right?


00:46:24.680 --> 00:46:25.520
- Yep.


00:46:25.520 --> 00:46:27.480
- Yeah, and Robert got it exactly right.


00:46:27.480 --> 00:46:28.800
So here is the joke.


00:46:28.800 --> 00:46:30.840
they finally made a switch to exit VIM.


00:46:30.840 --> 00:46:33.440
(laughing)


00:46:33.440 --> 00:46:36.440
And they've highlighted that physical power button


00:46:36.440 --> 00:46:38.760
on the back of the power supply.


00:46:38.760 --> 00:46:39.600
- Nice.


00:46:39.600 --> 00:46:44.200
- You're a VIM lover, so I won't rub it in too much,


00:46:44.200 --> 00:46:46.680
but that's a pretty effective way to exit VIM.


00:46:46.680 --> 00:46:49.320
- VIM runs in a window, so just close the window.


00:46:49.320 --> 00:46:56.040
Funny thing about power switches,


00:46:56.040 --> 00:46:58.040
So I used to work with a lot of,


00:46:58.040 --> 00:47:00.440
so I work with embedded systems


00:47:00.440 --> 00:47:03.360
and some of them run Windows embedded.


00:47:03.360 --> 00:47:07.160
And embedded systems are supposed to be able


00:47:07.160 --> 00:47:10.280
to toggle the power off, just like from the power supply.


00:47:10.280 --> 00:47:13.920
And now normal Windows, you're not supposed to do that


00:47:13.920 --> 00:47:17.520
because you wanna let it shut down gracefully


00:47:17.520 --> 00:47:19.600
and if the disk is moving at the time,


00:47:19.600 --> 00:47:21.300
and there's even with Windows embedded,


00:47:21.300 --> 00:47:24.560
there's some issues or any embedded operating system,


00:47:24.560 --> 00:47:28.040
There are a possibility you could do some damage to the disk


00:47:28.040 --> 00:47:31.260
if you power off at exactly the right time.


00:47:31.260 --> 00:47:33.120
But there's supposed to be safeguards in place


00:47:33.120 --> 00:47:34.480
to take care of it.


00:47:34.480 --> 00:47:37.400
So I'm just in the habit of using these things all the time,


00:47:37.400 --> 00:47:39.920
of like toggle off and on.


00:47:39.920 --> 00:47:42.640
And if we get like a new batch of people in


00:47:42.640 --> 00:47:46.520
that are mostly from DevOps or from non-embedded worlds,


00:47:46.520 --> 00:47:48.480
they're like, "What are you doing?"


00:47:48.480 --> 00:47:49.380
- You're gonna break it?


00:47:49.380 --> 00:47:50.360
- Yeah, you're gonna break it.


00:47:50.360 --> 00:47:52.640
Like, no, these are good.


00:47:52.640 --> 00:47:53.480
- Yeah.


00:47:53.480 --> 00:47:54.320
(laughing)


00:47:54.320 --> 00:47:56.800
Yeah, my little circuit Python thing.


00:47:56.800 --> 00:47:57.940
It doesn't have a power switch.


00:47:57.940 --> 00:47:59.840
You just disconnect it from power.


00:47:59.840 --> 00:48:00.660
If you want it off.


00:48:00.660 --> 00:48:02.420
That's how it works.


00:48:02.420 --> 00:48:14.960
Well, and one of the reasons, now I'm going in the weeds, but one of the reasons for the, the, the, the need for the ability to just power off is because a lot of times instruments are in a huge rack and you don't go through and power off each individual instrument.


00:48:14.960 --> 00:48:16.220
You just turn the rack off.


00:48:16.220 --> 00:48:17.240
Um, so.


00:48:17.240 --> 00:48:17.760
Wow.


00:48:17.760 --> 00:48:18.300
Interesting.


00:48:18.300 --> 00:48:18.820
Cool.


00:48:18.820 --> 00:48:21.860
Well, it's good to be back in 2023.


00:48:21.860 --> 00:48:23.800
Yeah, it is good to be back.


00:48:23.840 --> 00:48:28.640
So welcome back and, thanks everybody for tuning in.


00:48:28.640 --> 00:48:29.200
Yeah.


00:48:29.200 --> 00:48:29.520
You bet.


00:48:29.520 --> 00:48:30.200
Bye.

