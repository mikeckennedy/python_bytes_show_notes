
00:00:00.000 --> 00:00:05.000
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:05.000 --> 00:00:10.700
This is episode 278, recorded April 6th, 2022.


00:00:10.700 --> 00:00:11.900
I'm Michael Kennedy.


00:00:11.900 --> 00:00:13.200
And I'm Brian Aiken.


00:00:13.200 --> 00:00:14.700
And I'm Vucile Mbogo.


00:00:14.700 --> 00:00:17.300
Welcome, Vucile. It's really great to have you here.


00:00:17.300 --> 00:00:22.200
You know, I'm really excited and I feel honored to be here. So thanks for the opportunity.


00:00:22.200 --> 00:00:24.900
Yeah, it's going to be great to share some Python news with you.


00:00:24.900 --> 00:00:28.500
Now, before we jump into all those things, tell us a bit about yourself.


00:00:28.500 --> 00:00:30.500
What do you do? What are you into?


00:00:30.500 --> 00:00:34.300
Firstly, I'd like to say I'm still relatively early on in my career,


00:00:34.300 --> 00:00:36.500
and I'm from Zimbabwe.


00:00:36.500 --> 00:00:39.600
And we have a small but growing Python community here.


00:00:39.600 --> 00:00:43.500
And for a long time, I didn't have any community.


00:00:43.500 --> 00:00:46.260
So podcasts like your Talk Python podcast


00:00:46.260 --> 00:00:49.700
was the only way I got to connect with community members.


00:00:49.700 --> 00:00:51.500
So it's really great to be here.


00:00:51.500 --> 00:00:56.000
But on the question about me, I'm a software developer.


00:00:56.060 --> 00:01:00.500
I work in the back end, I work for a company called ideation.ai.


00:01:00.500 --> 00:01:05.660
It's a health tech startup that's building information systems that help clinicians


00:01:05.660 --> 00:01:09.660
manage patients and hospitals better.


00:01:09.660 --> 00:01:15.820
So I work mostly on APIs and microservices using Python, Django, Postgres mostly.


00:01:15.820 --> 00:01:17.660
That sounds like a really fun project.


00:01:17.660 --> 00:01:22.700
And we know that healthcare needs help in automation and modernization.


00:01:22.700 --> 00:01:24.420
So thanks. That's awesome.


00:01:24.420 --> 00:01:25.540
Yeah, very cool.


00:01:25.540 --> 00:01:27.380
All right, Brian, should we kick it off?


00:01:27.380 --> 00:01:28.100
Yeah, sure.


00:01:28.100 --> 00:01:30.180
When you talk about getting drunk or what is this?


00:01:30.180 --> 00:01:31.300
Getting dunked.


00:01:31.300 --> 00:01:32.740
Oh, sorry. I must have misread that.


00:01:32.740 --> 00:01:38.500
So this was just announced a few days ago from Darren Burns.


00:01:38.500 --> 00:01:45.060
He's the engineer that's helping William, is it Will?


00:01:45.060 --> 00:01:48.420
Will, with the rich and everything.


00:01:48.420 --> 00:01:50.340
The rich empire.


00:01:50.340 --> 00:01:55.140
Yeah. So this is just really cool because I often want to do...


00:01:55.140 --> 00:01:57.380
The dunk, he released dunk.


00:01:57.380 --> 00:02:02.380
So dunk is a prettier get diff tool.


00:02:02.380 --> 00:02:08.100
And it uses rich and it's just a command line tool


00:02:08.100 --> 00:02:09.780
and it's beautiful.


00:02:09.780 --> 00:02:13.900
So you just install it and then you do a get diff


00:02:13.900 --> 00:02:16.940
on something, it could be one file or it could be,


00:02:16.940 --> 00:02:18.400
it's usually a commit, right?


00:02:18.400 --> 00:02:22.020
So you do a diff of whatever you have now or other stuff.


00:02:22.020 --> 00:02:24.560
and it just instead of doing the weird,


00:02:24.560 --> 00:02:26.760
like the hard to read command line.


00:02:26.760 --> 00:02:27.840
>> The plus minus plus.


00:02:27.840 --> 00:02:28.400
>> Yeah.


00:02:28.400 --> 00:02:29.360
>> Yeah, that thing.


00:02:29.360 --> 00:02:33.200
>> It's got these nice colors with


00:02:33.200 --> 00:02:35.160
rich of what was added,


00:02:35.160 --> 00:02:36.540
what was green for added,


00:02:36.540 --> 00:02:38.240
red for taken out,


00:02:38.240 --> 00:02:40.440
and the line numbers.


00:02:40.440 --> 00:02:43.480
It's beautiful. It's still a work in progress,


00:02:43.480 --> 00:02:45.880
but I'm using it already. It's just great.


00:02:45.880 --> 00:02:47.940
>> This is fantastic. When I first looked at this,


00:02:47.940 --> 00:02:51.360
I thought it was like a GUI window that was showing,


00:02:51.360 --> 00:02:52.800
but no, that's just the terminal.


00:02:52.800 --> 00:02:55.520
>> Yeah. It's pretty cool.


00:02:55.520 --> 00:02:58.720
>> It's something you'd expect in a text editor, right?


00:02:58.720 --> 00:03:00.200
>> Yeah, definitely.


00:03:00.200 --> 00:03:03.280
Some text editors have something that like this nice,


00:03:03.280 --> 00:03:05.840
but just on the command line, it's super cool.


00:03:05.840 --> 00:03:08.240
One of my first questions with it was,


00:03:08.240 --> 00:03:10.120
sometimes I have a lot of diff stuff,


00:03:10.120 --> 00:03:11.840
so does this have a pager?


00:03:11.840 --> 00:03:14.000
The answer from Darren was,


00:03:14.000 --> 00:03:15.920
it does not have a pager,


00:03:15.920 --> 00:03:20.320
but you can use less-R.


00:03:20.320 --> 00:03:22.900
I don't know what the R does, but anyway.


00:03:22.900 --> 00:03:27.140
If you pipe get diff to dunk and then pipe it to less-r,


00:03:27.140 --> 00:03:29.020
you've got a diff with a pager.


00:03:29.020 --> 00:03:31.820
That works for me. I'll just alias that to something.


00:03:31.820 --> 00:03:33.580
>> Yeah, that's really cool.


00:03:33.580 --> 00:03:36.740
>> Anyway, pretty quick, pretty short topic.


00:03:36.740 --> 00:03:39.980
But for people that are looking at get diffs a lot,


00:03:39.980 --> 00:03:42.240
this is a super handy thing to look at.


00:03:42.240 --> 00:03:44.700
>> Yeah, this is neat. I usually do a lot of my diffs in


00:03:44.700 --> 00:03:47.680
PyCharm and it actually looks real similar to that UI.


00:03:47.680 --> 00:03:49.100
Ussile, what about you?


00:03:49.100 --> 00:03:51.320
How do you see your diffs?


00:03:51.320 --> 00:03:54.640
- Yeah, I do most of my coding in Visual Studio Code


00:03:54.640 --> 00:03:57.700
and I use the Visual Studio GIF viewer for that.


00:03:57.700 --> 00:04:00.180
Same, it's pretty similar to this.


00:04:00.180 --> 00:04:02.240
- Nice, yeah, this looks great, I think.


00:04:02.240 --> 00:04:03.080
Very nice.


00:04:03.080 --> 00:04:04.040
- The good job, Joe.


00:04:04.040 --> 00:04:05.520
- Yeah, very nice one.


00:04:05.520 --> 00:04:07.480
How about we start with some memes?


00:04:07.480 --> 00:04:11.560
So we all heard about Log4J


00:04:11.560 --> 00:04:15.920
and my favorite one was the take on the XKCD


00:04:15.920 --> 00:04:17.320
about little Bobby Tables,


00:04:17.320 --> 00:04:20.720
the little little little Jindy we call it


00:04:20.720 --> 00:04:23.120
or something like that, I can't remember.


00:04:23.120 --> 00:04:25.080
But you know, all the jokes aside,


00:04:25.080 --> 00:04:26.680
like, you know, here's Homer Simpson,


00:04:26.680 --> 00:04:30.240
zero days without log4j CVE.


00:04:30.240 --> 00:04:32.560
Maybe the best one was that,


00:04:32.560 --> 00:04:34.440
this guy right here, this guy,


00:04:34.440 --> 00:04:36.400
he looks like he's probably about 75 or retiring,


00:04:36.400 --> 00:04:40.920
says, "Upgrading log4j three times wasn't that stressful,"


00:04:40.920 --> 00:04:42.700
says Dave, 28 years old.


00:04:45.100 --> 00:04:48.200
But in all seriousness, like, is there a log for pi?


00:04:48.200 --> 00:04:49.920
Like, is this something that we should consider?


00:04:49.920 --> 00:04:52.600
And my first thought was, yeah, no, we're good.


00:04:52.600 --> 00:04:54.400
Like, we don't have this stupid, like,


00:04:54.400 --> 00:04:57.520
remote method invocation where you can inject, like,


00:04:57.520 --> 00:05:02.520
a function call as a string inside of your log message.


00:05:02.520 --> 00:05:03.440
- Oh, no.


00:05:03.440 --> 00:05:06.960
- But here's Ari Bovenberg, who wrote an article that says,


00:05:06.960 --> 00:05:08.940
yeah, it's not anywhere near as severe as that,


00:05:08.940 --> 00:05:11.460
but there are some things you should consider.


00:05:11.460 --> 00:05:13.440
And so, for your consideration,


00:05:13.440 --> 00:05:14.960
I present this article and some ideas.


00:05:14.960 --> 00:05:17.680
So it says, look, here's the basics of logging.


00:05:17.680 --> 00:05:19.720
And this is using Python's built-in logger.


00:05:19.720 --> 00:05:23.600
I'm a fan of Logbook and Loguru


00:05:23.600 --> 00:05:25.640
and the sort of higher level, nicer things.


00:05:25.640 --> 00:05:27.720
But nonetheless, here's the basics, right?


00:05:27.720 --> 00:05:32.040
So you can log, like say, logger.info or trace or whatever,


00:05:32.040 --> 00:05:33.080
and then put out a message like,


00:05:33.080 --> 00:05:35.320
"Hello world," there's no injection there.


00:05:35.320 --> 00:05:36.680
You can also do this thing,


00:05:36.680 --> 00:05:39.680
which is really the crux of the problem across the board,


00:05:39.680 --> 00:05:42.440
is you can say, here's a formatted string


00:05:42.440 --> 00:05:45.040
and the data that formats it.


00:05:45.040 --> 00:05:47.960
So you can put in, the problem with log4j was


00:05:47.960 --> 00:05:50.720
even if the string was fully evaluated


00:05:50.720 --> 00:05:53.000
as user input or something,


00:05:53.000 --> 00:05:55.120
you take some user input and you fully validate it,


00:05:55.120 --> 00:05:58.320
it still could have, it'll still get like reinterpreted


00:05:58.320 --> 00:06:00.200
for these remote, like trying to find,


00:06:00.200 --> 00:06:01.560
you know, what machine am I running on?


00:06:01.560 --> 00:06:02.720
Or am I production or debug?


00:06:02.720 --> 00:06:04.760
Like, let me go call this function and find out


00:06:04.760 --> 00:06:06.540
or just call it to hack you.


00:06:06.540 --> 00:06:09.300
But, so the Python version doesn't have that,


00:06:09.300 --> 00:06:11.320
but you can do this like format string


00:06:11.320 --> 00:06:13.120
and pass this context variable thing,


00:06:13.120 --> 00:06:15.300
like pass a data structure in.


00:06:15.300 --> 00:06:19.880
And in that case, some bad stuff can actually happen here.


00:06:19.880 --> 00:06:20.720
Right?


00:06:20.720 --> 00:06:21.540
So that's fine.


00:06:21.540 --> 00:06:24.320
So what about, what if I wrote my,


00:06:24.320 --> 00:06:27.120
as my name instead of, or my message, instead of hello,


00:06:27.120 --> 00:06:30.320
I wrote hello, quote, backslash,


00:06:30.320 --> 00:06:34.120
and info main user, Alice commented something else.


00:06:34.120 --> 00:06:35.840
And you would, you pass that over.


00:06:35.840 --> 00:06:38.080
And what you would end up with is a log message


00:06:38.080 --> 00:06:40.480
that was supposed to be one line that ends up like two.


00:06:40.480 --> 00:06:43.200
So that could cause some confusion, right?


00:06:43.200 --> 00:06:44.880
That might be problematic.


00:06:44.880 --> 00:06:46.900
It's not gonna result you in being hacked.


00:06:46.900 --> 00:06:50.000
But there's more like denial of service type of thing.


00:06:50.000 --> 00:06:51.240
So like one thing you could say is,


00:06:51.240 --> 00:06:53.880
well, just don't use backslash n, like take those out.


00:06:53.880 --> 00:06:57.360
But there are all sorts of freaky Unicode ways


00:06:57.360 --> 00:07:00.680
to like restructure similar meanings and stuff.


00:07:00.680 --> 00:07:03.440
So another one has to do with formatting.


00:07:03.440 --> 00:07:06.160
So if you're logging in some information


00:07:06.160 --> 00:07:09.880
and it's just a regular F string, that's probably fine.


00:07:09.880 --> 00:07:12.180
But if what you're logging into the F string,


00:07:12.180 --> 00:07:14.700
you can later get evaluated again,


00:07:14.700 --> 00:07:17.520
passing this like data structure,


00:07:17.520 --> 00:07:20.660
asking the logger to fill out the format string.


00:07:20.660 --> 00:07:22.380
Then you can pass interesting stuff.


00:07:22.380 --> 00:07:24.900
One of the more interesting ones was,


00:07:24.900 --> 00:07:26.320
you could say percent,


00:07:26.320 --> 00:07:30.860
parenthesis, variable name, close parenthesis,


00:07:30.860 --> 00:07:33.780
9999999999s.


00:07:33.780 --> 00:07:35.880
And what that'll do is it'll pad the username


00:07:35.880 --> 00:07:37.460
with a gigabyte of white space


00:07:37.460 --> 00:07:39.460
and then try to have you write it to the log file.


00:07:39.460 --> 00:07:40.660
[laughter]


00:07:40.660 --> 00:07:42.660
>> Okay.


00:07:42.660 --> 00:07:44.660
>> So that's bad, right?


00:07:44.660 --> 00:07:46.260
>> Right, yeah.


00:07:46.260 --> 00:07:48.560
>> You could also do things if you knew the data structure


00:07:48.560 --> 00:07:51.760
that was being passed in to fill out the log string,


00:07:51.760 --> 00:07:56.360
you could sort of try to reach out and get variable names out of it


00:07:56.360 --> 00:07:58.660
by putting a formatted string in there.


00:07:58.660 --> 00:08:02.560
And if you marry that with the huge piece of text,


00:08:02.560 --> 00:08:05.060
that'll make the login really slow.


00:08:05.060 --> 00:08:07.060
So you could put in like different things


00:08:07.060 --> 00:08:10.900
And if you see, oh, this message actually makes the request really slow.


00:08:10.900 --> 00:08:15.340
You could infer that maybe that data is actually in the variable being passed


00:08:15.340 --> 00:08:18.700
over, so then you could try to get it to write it to a file if you have say file


00:08:18.700 --> 00:08:20.340
access, but not other types of access.


00:08:20.340 --> 00:08:20.740
Anyway.


00:08:20.740 --> 00:08:21.860
So there's a bunch of things.


00:08:21.860 --> 00:08:27.220
So basically the long story short is don't mix like F string formatting along


00:08:27.220 --> 00:08:29.060
with passing more data to the log file.


00:08:29.060 --> 00:08:32.740
Kind of one or the other, because the logger knows how to look for some of


00:08:32.740 --> 00:08:36.420
these things in when it takes the data and puts it in the format, but it doesn't


00:08:36.420 --> 00:08:38.460
do that for the original string.


00:08:38.460 --> 00:08:40.100
So, careful about mix and match.


00:08:40.100 --> 00:08:42.380
Final thing, there's actually,


00:08:42.380 --> 00:08:44.020
and it's been included in a pep,


00:08:44.020 --> 00:08:46.700
and there's a discussion on discuss.python.org,


00:08:46.700 --> 00:08:48.420
and there's actually a pretty interesting discussion


00:08:48.420 --> 00:08:49.500
with a bunch of core devs there.


00:08:49.500 --> 00:08:52.240
So you can see, that's maybe a better follow up there.


00:08:52.240 --> 00:08:54.180
But pretty interesting.


00:08:54.180 --> 00:08:56.060
There's no log for py,


00:08:56.060 --> 00:08:59.260
but there doesn't mean you can just completely go crazy


00:08:59.260 --> 00:09:01.580
with unverified user input.


00:09:01.580 --> 00:09:03.420
- You should trust your users though.


00:09:03.420 --> 00:09:04.260
- I know.


00:09:05.700 --> 00:09:08.220
Why not? They're so friendly and considerate.


00:09:08.220 --> 00:09:09.540
- Yeah, why not?


00:09:09.540 --> 00:09:10.540
- The real ones are.


00:09:10.540 --> 00:09:14.620
- You know, when this log4j vulnerability came out


00:09:14.620 --> 00:09:17.700
and I realized that it wasn't really a big problem in Python,


00:09:17.700 --> 00:09:19.020
I didn't pay any attention to it.


00:09:19.020 --> 00:09:21.100
And now I'm actually shocked


00:09:21.100 --> 00:09:24.040
that you could do a denial of service attack using that.


00:09:24.040 --> 00:09:24.880
- Yeah, exactly.


00:09:24.880 --> 00:09:27.040
I think that's what it basically becomes is,


00:09:27.040 --> 00:09:28.080
there's two aspects.


00:09:28.080 --> 00:09:30.220
One is you can sort of crush the server


00:09:30.220 --> 00:09:32.140
by having it write so much data.


00:09:32.140 --> 00:09:34.500
The other that they pointed out here was,


00:09:34.500 --> 00:09:40.160
If your goal is to try to obscure regular hacking, if you could wreck the log


00:09:40.160 --> 00:09:45.060
file with so much data that it's really difficult for people to parse the log


00:09:45.060 --> 00:09:47.860
file, you might be able to hide yourself a little bit better for longer.


00:09:47.860 --> 00:09:49.740
So anyway, there's some interesting stuff there.


00:09:49.740 --> 00:09:50.220
All right.


00:09:50.220 --> 00:09:51.140
We see they over to you.


00:09:51.140 --> 00:09:52.060
Yep.


00:09:52.060 --> 00:09:52.820
Thanks.


00:09:52.820 --> 00:09:58.760
If you're building a software as a service platform in Python and Django,


00:09:58.760 --> 00:10:02.240
there are a few things to think about, you know, like the architecture you're


00:10:02.240 --> 00:10:05.080
what type of database you're going to use,


00:10:05.080 --> 00:10:07.580
whether you use a single database or multiple databases,


00:10:07.580 --> 00:10:08.980
and all these things.


00:10:08.980 --> 00:10:11.240
So while I was getting ready for this call,


00:10:11.240 --> 00:10:12.620
I found this book.


00:10:12.620 --> 00:10:16.240
It's called "Building Multi-Tenant Applications with Django."


00:10:16.240 --> 00:10:18.920
And it's by an author that you've actually covered on the show.


00:10:18.920 --> 00:10:22.040
It's a company, I think, called Agilent.


00:10:22.040 --> 00:10:23.920
So this book is free, it's open source.


00:10:23.920 --> 00:10:26.320
Anyone's free to read it, download it.


00:10:26.320 --> 00:10:28.480
And it goes through the different approaches


00:10:28.480 --> 00:10:30.740
that you'd have to follow.


00:10:30.820 --> 00:10:33.820
I mean, the different architecture designs that you should consider


00:10:33.820 --> 00:10:36.980
when building software as a service or multi-tenant applications.


00:10:36.980 --> 00:10:40.180
And so one of the things they cover here is


00:10:40.180 --> 00:10:43.720
email where you're using queries to isolate the data.


00:10:43.720 --> 00:10:46.180
Something like Postgres emails can do that.


00:10:46.180 --> 00:10:48.360
This book goes over the different approaches


00:10:48.360 --> 00:10:51.420
you can use to build multi-tenancy apps, right?


00:10:51.420 --> 00:10:54.280
And then it also covers some third-party packages


00:10:54.280 --> 00:10:59.160
that you can install that help do a lot of the boilerplate code for you.


00:10:59.220 --> 00:11:04.220
That's really nice. Because I've considered this, it'd be so great if you're doing some sort of software as a service


00:11:04.220 --> 00:11:08.720
type thing where you have people log in and you want like that group just to see all their


00:11:08.720 --> 00:11:14.820
all their data and all their records and stuff. But it's so scary because if you just forget the where clause on just one


00:11:14.820 --> 00:11:20.220
on just one, they get everybody's data, which is really bad, right? And so


00:11:20.220 --> 00:11:21.420
this is really cool.


00:11:21.420 --> 00:11:22.920
Yeah, this is.


00:11:22.920 --> 00:11:24.720
So the book covers things like


00:11:24.720 --> 00:11:27.720
using HTTP headers or


00:11:27.720 --> 00:11:36.040
subdomains and in the request to identify different tenants, and how you do that, how you capture that using middleware Django.


00:11:36.040 --> 00:11:53.320
That's cool. So some of the middleware is Django multi tenant, Django tenant schemas, or Django DB multi tenant, not a ton of variation in the name there, but it's still pretty cool, right? And some of them use schemas, and some of them use isolated databases, right?


00:11:53.440 --> 00:11:54.440
Yeah.


00:11:54.440 --> 00:11:55.440
Nice.


00:11:55.440 --> 00:12:01.240
So it will all depend on what your tolerance for cost is and database management.


00:12:01.240 --> 00:12:04.640
So if you don't mind having a database for each client, you could do that.


00:12:04.640 --> 00:12:08.440
And then you'd have to do migrations on each database, wherever you make updates to the


00:12:08.440 --> 00:12:09.440
application.


00:12:09.440 --> 00:12:12.960
Or if you just want to have a single shared database, you can do that and isolate using


00:12:12.960 --> 00:12:13.960
schemas.


00:12:13.960 --> 00:12:14.960
Yeah.


00:12:14.960 --> 00:12:17.480
I hadn't thought about having to migrate every separate database.


00:12:17.480 --> 00:12:19.360
But yeah, that's a ton of work.


00:12:19.360 --> 00:12:21.760
The deployment all of a sudden looks really rough, doesn't it?


00:12:21.760 --> 00:12:22.760
Yeah.


00:12:22.760 --> 00:12:23.920
- True isolation there.


00:12:23.920 --> 00:12:24.760
- Yeah, exactly.


00:12:24.760 --> 00:12:27.240
There's no way you're gonna make a mistake there.


00:12:27.240 --> 00:12:28.480
Do you guys do anything like this


00:12:28.480 --> 00:12:30.560
with your healthcare products?


00:12:30.560 --> 00:12:32.300
- Yeah, we use one of these approaches.


00:12:32.300 --> 00:12:35.080
I can't tell you which one, but we use,


00:12:35.080 --> 00:12:39.120
our software is a software, what do you call it?


00:12:39.120 --> 00:12:40.300
Software as a service.


00:12:40.300 --> 00:12:42.400
We have a number of clients.


00:12:42.400 --> 00:12:44.680
They need to have a central login,


00:12:44.680 --> 00:12:47.080
like the single application that they can all log in


00:12:47.080 --> 00:12:48.260
and view only their data.


00:12:48.260 --> 00:12:50.640
And we can't have information from one client


00:12:50.640 --> 00:12:51.940
leaking over into another.


00:12:51.940 --> 00:12:52.860
- Yeah, cool.


00:12:52.860 --> 00:12:53.740
All right, well, really neat.


00:12:53.740 --> 00:12:56.860
I'm sure that'll be super valuable to people indeed.


00:12:56.860 --> 00:12:57.700
- Yeah.


00:12:57.700 --> 00:12:59.620
- Now, Brian, before we move on,


00:12:59.620 --> 00:13:01.220
how about I tell you about our sponsor?


00:13:01.220 --> 00:13:02.820
Once again, Microsoft is here,


00:13:02.820 --> 00:13:04.980
so let's hear from them before we carry on.


00:13:04.980 --> 00:13:07.100
This episode of Python Bytes is brought to you


00:13:07.100 --> 00:13:10.020
by Microsoft for Startups Founders Hub.


00:13:10.020 --> 00:13:11.740
Starting a business is hard.


00:13:11.740 --> 00:13:14.260
By some estimates, over 90% of startups


00:13:14.260 --> 00:13:16.780
will go out of business in just their first year.


00:13:16.780 --> 00:13:18.740
With that in mind, Microsoft for Startups


00:13:18.740 --> 00:13:22.160
set out to understand what startups need to be successful


00:13:22.160 --> 00:13:23.940
and to create a digital platform


00:13:23.940 --> 00:13:25.940
to help them overcome those challenges.


00:13:25.940 --> 00:13:28.560
Microsoft for Startups Founders Hub was born.


00:13:28.560 --> 00:13:31.500
Founders Hub provides all founders at any stage


00:13:31.500 --> 00:13:35.340
with free resources to solve their startup challenges.


00:13:35.340 --> 00:13:37.780
The platform provides technology benefits,


00:13:37.780 --> 00:13:40.660
access to expert guidance and skilled resources,


00:13:40.660 --> 00:13:43.660
mentorship and networking connections, and much more.


00:13:43.660 --> 00:13:45.140
Unlike others in the industry,


00:13:45.140 --> 00:13:47.340
Microsoft for Startups Founders Hub


00:13:47.340 --> 00:13:50.260
doesn't require startups to be investor-backed


00:13:50.260 --> 00:13:52.900
or third-party validated to participate.


00:13:52.900 --> 00:13:55.380
Founders Hub is truly open to all.


00:13:55.380 --> 00:13:56.920
So what do you get if you join them?


00:13:56.920 --> 00:13:59.020
You speed up your development with free access


00:13:59.020 --> 00:14:01.900
to GitHub and Microsoft Cloud computing resources


00:14:01.900 --> 00:14:05.140
and the ability to unlock more credits over time.


00:14:05.140 --> 00:14:06.380
To help your startup innovate,


00:14:06.380 --> 00:14:08.780
Founders Hub is partnering with innovative companies


00:14:08.780 --> 00:14:12.260
like OpenAI, a global leader in AI research and development


00:14:12.260 --> 00:14:14.900
to provide exclusive benefits and discounts.


00:14:14.900 --> 00:14:17.180
Through Microsoft for Startups Founders Hub,


00:14:17.180 --> 00:14:19.940
Becoming a founder is no longer about who you know.


00:14:19.940 --> 00:14:21.740
You'll have access to their mentorship network,


00:14:21.740 --> 00:14:23.820
giving you a pool of hundreds of mentors


00:14:23.820 --> 00:14:26.460
across a range of disciplines and areas


00:14:26.460 --> 00:14:28.880
like idea validation, fundraising,


00:14:28.880 --> 00:14:31.000
management and coaching, sales and marketing,


00:14:31.000 --> 00:14:33.540
as well as specific technical stress points.


00:14:33.540 --> 00:14:35.180
You'll be able to book a one-on-one meeting


00:14:35.180 --> 00:14:36.020
with the mentors,


00:14:36.020 --> 00:14:38.720
many of whom are former founders themselves.


00:14:38.720 --> 00:14:40.320
Make your idea a reality today


00:14:40.320 --> 00:14:43.660
with the critical support you'll get from Founders Hub.


00:14:43.660 --> 00:14:44.620
To join the program,


00:14:44.620 --> 00:14:47.780
just visit pythonbytes.fm/foundershub,


00:14:47.780 --> 00:14:49.940
all one word, the link's in your show notes.


00:14:49.940 --> 00:14:52.260
Thank you to Microsoft for supporting the show.


00:14:52.260 --> 00:14:56.180
This is a topic that has been very interesting to me,


00:14:56.180 --> 00:14:59.540
sort of this memory story around Python lists.


00:14:59.540 --> 00:15:00.380
- Yeah.


00:15:00.380 --> 00:15:02.660
- And I'm looking forward to this one you got to share.


00:15:02.660 --> 00:15:04.700
- So I was interested, this is,


00:15:04.700 --> 00:15:06.420
we're gonna present an article called


00:15:06.420 --> 00:15:10.940
Preallocated Lists in Python by Redouan Delawar, I think.


00:15:10.940 --> 00:15:14.260
Anyway, I've thought about this before,


00:15:14.260 --> 00:15:16.220
because one of the things that happens


00:15:16.220 --> 00:15:18.260
with when you allocate a list in Python,


00:15:18.260 --> 00:15:21.020
if it's empty, it's not really empty.


00:15:21.020 --> 00:15:22.460
There's some data there already.


00:15:22.460 --> 00:15:24.620
And one of the first things the article talks about


00:15:24.620 --> 00:15:27.620
is this data structure that a C struct


00:15:27.620 --> 00:15:31.840
that Python uses to store basically the info about the list.


00:15:31.840 --> 00:15:33.780
But it's still space, but it's, you know,


00:15:33.780 --> 00:15:35.980
it's still, it's empty supposedly.


00:15:35.980 --> 00:15:39.040
And then when you, and normally you kind of just append


00:15:39.040 --> 00:15:42.320
to it, so you, or one way to add things to a list


00:15:42.320 --> 00:15:45.600
is to just append one thing after another.


00:15:45.600 --> 00:15:48.920
And what Python does, it's kind of a neat algorithm,


00:15:48.920 --> 00:15:51.080
is it allocates more than it needs.


00:15:51.080 --> 00:15:55.400
So if you add like five things or six things or something


00:15:55.400 --> 00:15:57.000
and there's not enough space,


00:15:57.000 --> 00:16:00.000
it'll, and I don't remember the real algorithm,


00:16:00.000 --> 00:16:02.100
but it chunks a bigger portion.


00:16:02.100 --> 00:16:03.960
And then if you run out of space again,


00:16:03.960 --> 00:16:06.520
you get more space added to it.


00:16:06.520 --> 00:16:07.920
- Right, 'cause the last thing you wanna do


00:16:07.920 --> 00:16:11.600
is reallocate one byte at a time


00:16:11.600 --> 00:16:14.200
and copy the whole list as you're adding a thousand items,


00:16:14.200 --> 00:16:15.560
that would be super bad.


00:16:15.560 --> 00:16:18.760
- Right, so this article talks about three different ways.


00:16:18.760 --> 00:16:20.060
Like let's say if you know,


00:16:20.060 --> 00:16:23.240
you know you're gonna have 10,000 elements in a list.


00:16:23.240 --> 00:16:26.000
And in this example, it's just counting,


00:16:26.000 --> 00:16:30.360
you know, zero through, you know, 9,999,


00:16:30.360 --> 00:16:32.640
and filling it into the list.


00:16:32.640 --> 00:16:36.920
But there's, that's, I think that that's irrelevant.


00:16:36.920 --> 00:16:39.800
It's the same sort of work for each kind of list,


00:16:39.800 --> 00:16:41.040
but it takes three kinds.


00:16:41.040 --> 00:16:44.960
Well, the first kind is starting with an empty list and just appending every time.


00:16:44.960 --> 00:16:49.200
And that seems like it would be slow, but it's actually not that bad.


00:16:49.200 --> 00:16:51.120
The other two ways are to preallocate.


00:16:51.120 --> 00:16:53.040
And I'm like, how would you preallocate?


00:16:53.040 --> 00:17:03.600
But his technique was to take like none and assign your list none times 10,000.


00:17:03.600 --> 00:17:06.640
So you got a 10,000 element list of nones.


00:17:06.640 --> 00:17:07.440
That's fine.


00:17:07.440 --> 00:17:08.560
And then...


00:17:08.560 --> 00:17:10.960
>> Long as it's not a valid value, you're fine.


00:17:10.960 --> 00:17:19.060
Yeah, and then the other the third way was to take.


00:17:19.060 --> 00:17:32.380
Let's see where is it is to do a list comprehension and do and just assign your list the list comprehension and then put a for loop for I in range 10,000 in the middle of it.


00:17:32.380 --> 00:17:38.060
And in this case, if you weren't really just counting to a 10,000


00:17:38.060 --> 00:17:42.580
and doing something else, it would be a similar sort of thing if you'd have a for loop to fill this in.


00:17:42.580 --> 00:17:46.820
And I actually had no guesses as to what would be fastest.


00:17:46.820 --> 00:17:52.620
So the final say when he was doing timing on this


00:17:52.620 --> 00:17:56.820
was that the append method actually was the slowest,


00:17:56.820 --> 00:17:59.580
but not terrible. It's pretty efficient.


00:17:59.580 --> 00:18:10.580
And the pre allocate method it shaved so we had 499 microseconds on his machine and then 321 on the pre allocate.


00:18:10.580 --> 00:18:18.540
So that's not even half as I mean it's not an order of magnitude but it is faster and the list comprehension was 225.


00:18:18.540 --> 00:18:29.140
So that was about half it was about twice as fast as the append was to use the list comprehension and list comprehension is actually the most readable of the three I think so.


00:18:29.140 --> 00:18:42.640
It's just sort of a, I guess, it's an interesting article to look at like how to discuss like how this allocating and allocating extra memory happens with append.


00:18:42.640 --> 00:18:51.540
But it also is interesting that the preallocate, it seems like that would be the fast, one of the faster ones and it's not. So interesting.


00:18:51.540 --> 00:18:56.620
I wonder if I don't think the list has this.


00:18:56.620 --> 00:18:58.100
I know in other languages it does.


00:18:58.100 --> 00:19:00.060
When you create the list empty,


00:19:00.060 --> 00:19:03.100
you can say I would like to initialize you with this capacity.


00:19:03.100 --> 00:19:03.780
>> Yeah.


00:19:03.780 --> 00:19:06.060
>> Right? If it was like a built-in way to say when you


00:19:06.060 --> 00:19:09.900
allocate your inner C level array pointers,


00:19:09.900 --> 00:19:11.580
make it this big to start with,


00:19:11.580 --> 00:19:14.860
but still fill into it before you start your growing algorithm.


00:19:14.860 --> 00:19:15.340
>> Yeah.


00:19:15.340 --> 00:19:16.500
>> Maybe that'd be a cool PEP for


00:19:16.500 --> 00:19:18.020
some of the containers if it's not there.


00:19:18.020 --> 00:19:20.300
But yeah, I think it's natural that


00:19:20.300 --> 00:19:21.940
the list comprehension is fastest.


00:19:21.940 --> 00:19:23.820
And also it means you don't end up


00:19:23.820 --> 00:19:26.620
with a weird programming model where you have a list,


00:19:26.620 --> 00:19:27.820
it's length is one thing,


00:19:27.820 --> 00:19:29.540
but that's not what you should actually work with.


00:19:29.540 --> 00:19:31.440
I think that's probably not worth it


00:19:31.440 --> 00:19:33.140
except for extreme cases.


00:19:33.140 --> 00:19:36.640
- A couple of things that I found interesting about this


00:19:36.640 --> 00:19:38.500
that I'd like to pursue a little further


00:19:38.500 --> 00:19:40.260
is it didn't talk about memory space.


00:19:40.260 --> 00:19:42.380
So one of the benefits of pre-allocating


00:19:42.380 --> 00:19:44.380
is you're not allocating more than you need,


00:19:44.380 --> 00:19:46.460
but I don't know if you're not allocating.


00:19:46.460 --> 00:19:49.420
I don't know what the Python algorithm is.


00:19:49.420 --> 00:19:55.820
But the, so I'd like to see this with space.


00:19:55.820 --> 00:19:58.620
So how much memory is being used by the three methods?


00:19:58.620 --> 00:20:02.020
The other thing that would be interesting to see is to throw


00:20:02.020 --> 00:20:06.180
NumPy in the mix because I know NumPy has some more efficient.


00:20:06.180 --> 00:20:09.060
I mean, it's a completely different beast, but still.


00:20:09.060 --> 00:20:10.580
>> You work at homogeneous data,


00:20:10.580 --> 00:20:12.260
that's numbers or something or strings.


00:20:12.260 --> 00:20:13.900
Yeah. What do you think about this?


00:20:13.900 --> 00:20:16.300
Do you have to worry about these little details?


00:20:16.300 --> 00:20:19.020
Are you guys under heavy performance pressure?


00:20:19.020 --> 00:20:21.420
No, not right now, at least.


00:20:21.420 --> 00:20:24.260
I've never had to think about C-level things.


00:20:24.260 --> 00:20:29.260
And I'm actually taken aback that so much goes into allocating stuff to a list,


00:20:29.260 --> 00:20:33.820
because in Python, allocating stuff to a list is just create a list and put stuff in there.


00:20:33.820 --> 00:20:36.460
So this is eye-opening to me.


00:20:36.460 --> 00:20:41.020
Yeah, it's pretty cool. It's not like C where you have to pre-allocate it and then fill it out


00:20:41.020 --> 00:20:43.020
or something funky like that.


00:20:43.020 --> 00:20:47.260
So Will McGugan is saying, "I think the list comprehension will pre-allocate


00:20:47.260 --> 00:20:50.900
because the range object has a dunder length int method


00:20:50.900 --> 00:20:52.420
that reports its size.


00:20:52.420 --> 00:20:55.980
And so I think maybe the time saving we're getting


00:20:55.980 --> 00:20:59.060
is that we're not filling it in with nuns to begin with,


00:20:59.060 --> 00:21:02.260
but actually filling it in with the data we want.


00:21:02.260 --> 00:21:03.180
- Okay, yeah, good to know.


00:21:03.180 --> 00:21:04.140
Thank you, Will.


00:21:04.140 --> 00:21:07.420
I've more than once had a, not argument,


00:21:07.420 --> 00:21:10.300
but a disagreement where somebody said,


00:21:10.300 --> 00:21:12.380
"But you need to show me because,"


00:21:12.380 --> 00:21:14.900
and it's, "Oh, you have a for loop


00:21:14.900 --> 00:21:16.420
"and you just append to the list."


00:21:16.420 --> 00:21:17.800
That's the same as the list comprehension.


00:21:17.800 --> 00:21:19.240
They're doing the same thing.


00:21:19.240 --> 00:21:21.920
The outcome, the final result is the same,


00:21:21.920 --> 00:21:24.720
but the information that Python has to work with


00:21:24.720 --> 00:21:26.660
is more, much like, we'll say here,


00:21:26.660 --> 00:21:28.480
it can take all the information it has to work with


00:21:28.480 --> 00:21:30.840
and say, oh look, it's going to be this long as we loop,


00:21:30.840 --> 00:21:32.480
and you're gonna just add stuff to the list,


00:21:32.480 --> 00:21:33.960
not use it in other interesting ways.


00:21:33.960 --> 00:21:36.680
So just go and jam on it, right?


00:21:36.680 --> 00:21:37.920
- Yeah. - Yeah.


00:21:37.920 --> 00:21:41.820
All right, speaking of working with some data,


00:21:41.820 --> 00:21:44.840
let me tell you about this cool project called Mockaroo.


00:21:44.840 --> 00:21:46.020
You guys familiar with this?


00:21:46.020 --> 00:21:46.980
- No. - No?


00:21:46.980 --> 00:21:47.820
- No.


00:21:47.820 --> 00:21:48.640
- So here's the story.


00:21:48.640 --> 00:21:51.540
Imagine you needed some data


00:21:51.540 --> 00:21:53.780
and you want this for testing


00:21:53.780 --> 00:21:56.460
or this could be testing like unit testing.


00:21:56.460 --> 00:21:58.180
This could be development.


00:21:58.180 --> 00:22:00.980
Like one of the big problems with UI apps


00:22:00.980 --> 00:22:05.460
is having something to display just so that it fills it out.


00:22:05.460 --> 00:22:07.260
If I'm gonna like fill out a webpage


00:22:07.260 --> 00:22:10.460
and I say I wanna work on the CSS of this table


00:22:10.460 --> 00:22:12.260
or the CSS of this list,


00:22:12.260 --> 00:22:13.900
if there's nothing in the list,


00:22:13.900 --> 00:22:15.020
what are you gonna do, right?


00:22:15.020 --> 00:22:18.160
So you want to have some realistic data to work with.


00:22:18.160 --> 00:22:19.700
So this mockery is this free thing


00:22:19.700 --> 00:22:22.200
that has all these different types of data


00:22:22.200 --> 00:22:23.200
that you can work with.


00:22:23.200 --> 00:22:24.460
So I can come over here and just say,


00:22:24.460 --> 00:22:28.240
I want some data and I want it in a CSV format


00:22:28.240 --> 00:22:33.240
or SQL table or Firebase or Excel or XML,


00:22:33.240 --> 00:22:36.100
or my favorite probably is JSON.


00:22:36.100 --> 00:22:37.020
And then you can say, all right,


00:22:37.020 --> 00:22:38.060
well, I'm gonna have an ID here.


00:22:38.060 --> 00:22:39.380
We have like a customer table.


00:22:39.380 --> 00:22:41.200
So ID, first name, last name,


00:22:41.200 --> 00:22:42.820
but it has also things like gender.


00:22:42.820 --> 00:22:45.340
And one of the types you can pick is gender.


00:22:45.340 --> 00:22:48.020
So it has all these well-known data types.


00:22:48.020 --> 00:22:49.940
So if I go and type in, I want a gender,


00:22:49.940 --> 00:22:52.120
not only will it say male, female or something,


00:22:52.120 --> 00:22:53.820
it gives you like a list.


00:22:53.820 --> 00:22:56.940
So I can have gender written out as female, male,


00:22:56.940 --> 00:22:57.780
or non-binary.


00:22:57.780 --> 00:23:01.620
I could have gender abbreviated as M or F or just binary.


00:23:01.620 --> 00:23:03.420
So you can have like lots of control.


00:23:03.420 --> 00:23:06.300
So if I wanted to like, you say auto or car,


00:23:06.300 --> 00:23:07.140
what do I got to type?


00:23:07.140 --> 00:23:07.960
I got a car.


00:23:07.960 --> 00:23:12.220
You can do like car makes, models, registration numbers,


00:23:12.220 --> 00:23:13.020
all of these things.


00:23:13.020 --> 00:23:15.980
So you can say this one is a gender abbreviated


00:23:15.980 --> 00:23:17.220
and like you fill it out.


00:23:17.220 --> 00:23:20.620
Then you can just say, generate me this data


00:23:20.620 --> 00:23:22.260
exactly like you want and then download it


00:23:22.260 --> 00:23:23.200
in whatever format.


00:23:23.200 --> 00:23:26.120
Like I said, CSV, SQL, insert statements,


00:23:26.120 --> 00:23:29.020
JSON, Excel, isn't that cool?


00:23:29.020 --> 00:23:29.980
- That is pretty cool.


00:23:29.980 --> 00:23:31.340
- So I've used this more than once.


00:23:31.340 --> 00:23:34.820
- I can see a use case for this already.


00:23:34.820 --> 00:23:36.000
- Awesome, yeah, right?


00:23:36.000 --> 00:23:37.740
- Yeah, yeah.


00:23:37.740 --> 00:23:39.940
I kind of liked the first option


00:23:39.940 --> 00:23:42.540
when you're selecting the gender type,


00:23:42.540 --> 00:23:46.020
having it be animal names, that'd be fun.


00:23:46.020 --> 00:23:48.500
- Yeah, I mean, there's all these,


00:23:48.500 --> 00:23:49.860
there's all these, that's crazy.


00:23:49.860 --> 00:23:51.520
There's all these different data formats.


00:23:51.520 --> 00:23:56.100
So you've got like cars, what else we got here?


00:23:56.100 --> 00:24:00.060
Credit cards, GUIDs, ISBNs for books,


00:24:00.060 --> 00:24:03.060
numbers on a normal distribution, passwords.


00:24:03.060 --> 00:24:05.380
- Even MongoDB object IDs, that's cool.


00:24:05.380 --> 00:24:06.580
- Oh, that is pretty cool, yeah.


00:24:06.580 --> 00:24:09.420
- Yeah, so you have e-commerce stuff,


00:24:09.420 --> 00:24:14.420
money, stock market symbols, locations, healthcare.


00:24:14.420 --> 00:24:16.260
We'll see how they have at that.


00:24:16.260 --> 00:24:19.460
You got your drug companies, your NHS numbers


00:24:19.460 --> 00:24:20.980
and all those different things.


00:24:20.980 --> 00:24:22.220
Oh, it's 'cause I'm searching for car.


00:24:22.220 --> 00:24:24.020
Why is car keep showing up?


00:24:24.020 --> 00:24:25.500
- Animal common names, yeah.


00:24:25.500 --> 00:24:29.100
- Yes, you could have a wombat or a jungle kangaroo.


00:24:29.100 --> 00:24:30.980
I mean, these are all so fun, right?


00:24:30.980 --> 00:24:31.820
- Yeah.


00:24:31.820 --> 00:24:33.020
- So these are all super neat.


00:24:33.020 --> 00:24:34.860
You can get up to like a thousand rows for free


00:24:34.860 --> 00:24:35.860
and then I think you have to pay


00:24:35.860 --> 00:24:37.060
if you need more than that.


00:24:37.060 --> 00:24:40.020
And then a follow on, I believe this is from the same company,


00:24:40.020 --> 00:24:42.300
full disclosure, these guys sponsored TalkBython,


00:24:42.300 --> 00:24:44.620
but I wanted to talk about this even before.


00:24:44.620 --> 00:24:48.460
So they have this thing, the service called Tonic,


00:24:48.460 --> 00:24:52.420
that you can then point at your production database


00:24:52.420 --> 00:24:55.100
and it'll do things like generate me something


00:24:55.100 --> 00:24:57.180
that looks exactly like production data,


00:24:57.180 --> 00:25:00.100
but doesn't have any personally identifiable information


00:25:00.100 --> 00:25:02.500
so that I can give it to the developers


00:25:02.500 --> 00:25:05.540
to test with real looking data, with real variations


00:25:05.540 --> 00:25:08.660
from our clients, but is sort of safe.


00:25:08.660 --> 00:25:10.900
Like if they lose their laptop or whatever,


00:25:10.900 --> 00:25:12.060
or they just leave it open,


00:25:12.060 --> 00:25:13.580
it's not going to destroy something, right?


00:25:13.580 --> 00:25:14.900
>> Yeah, that's pretty cool.


00:25:14.900 --> 00:25:18.900
>> Yeah. So you basically connect it to your database,


00:25:18.900 --> 00:25:23.380
and then it will go along and create data that looks


00:25:23.380 --> 00:25:27.460
more like what you actually have instead of just this mockery data.


00:25:27.460 --> 00:25:30.300
So pretty neat. Anyway, if you need to do some testing,


00:25:30.300 --> 00:25:31.980
you need to generate big data,


00:25:31.980 --> 00:25:33.860
not just for like pytest testing,


00:25:33.860 --> 00:25:37.240
but also UI development and just something to work with.


00:25:37.240 --> 00:25:38.480
These are both good options.


00:25:38.480 --> 00:25:39.320
- Very cool.


00:25:39.320 --> 00:25:40.240
- Yeah, cool, cool.


00:25:40.240 --> 00:25:43.080
Sam out in the audience says, "This is fantastic."


00:25:43.080 --> 00:25:43.920
I agree.


00:25:43.920 --> 00:25:45.540
And Will says, "Yeah, super useful.


00:25:45.540 --> 00:25:48.800
"I could see even using this for testing development


00:25:48.800 --> 00:25:50.420
"of rich and textual out there."


00:25:50.420 --> 00:25:51.720
So very cool.


00:25:51.720 --> 00:25:54.080
All right, Vusile, off to you, last one.


00:25:54.080 --> 00:25:56.680
- All right, so this is a fun project


00:25:56.680 --> 00:25:59.320
that a good friend of mine, Daniele Procida, made.


00:25:59.320 --> 00:26:01.560
He's demoed it at a couple of conferences.


00:26:01.560 --> 00:26:04.200
It's called the BrachioGraph.


00:26:04.200 --> 00:26:07.320
The goal for this project is to make a pen plotter


00:26:07.320 --> 00:26:09.860
powered by Python and make it as cheap as possible


00:26:09.860 --> 00:26:12.660
using common things you can find in the house.


00:26:12.660 --> 00:26:14.820
So it's a plotter.


00:26:14.820 --> 00:26:17.320
It uses a Raspberry Pi, an ice cream stick,


00:26:17.320 --> 00:26:20.520
and a clothespin to draw, and a pencil, of course.


00:26:20.520 --> 00:26:27.060
So it's got Python code that turns an image into,


00:26:27.060 --> 00:26:29.060
I think it's called a raster.


00:26:29.060 --> 00:26:34.060
It rasterizes an image into points, coordinates on a piece of paper.


00:26:34.060 --> 00:26:35.060
I could have used this yesterday.


00:26:35.060 --> 00:26:36.060
Oh my gosh, this is great.


00:26:36.060 --> 00:26:37.060
Yeah.


00:26:37.060 --> 00:26:42.900
So I don't know if I can play video here, but it looks pretty cool when it's actually


00:26:42.900 --> 00:26:45.060
printing out or plotting out an image.


00:26:45.060 --> 00:26:47.140
Let me see if I can get it to work here.


00:26:47.140 --> 00:26:54.740
But it has a motor that then does everything and it can draw very basic images.


00:26:54.740 --> 00:26:57.940
It's a fun project that you can work on it.


00:26:57.940 --> 00:27:03.060
And it costs, I mean, the setup for this costs less than 50 US dollars.


00:27:03.060 --> 00:27:05.300
And it's a pretty, pretty fun project.


00:27:05.300 --> 00:27:07.700
Oh, I would have gotten an A in art class if I had this.


00:27:07.700 --> 00:27:10.740
No, I love it.


00:27:10.740 --> 00:27:11.540
This is really neat.


00:27:11.540 --> 00:27:14.820
People should definitely play the video and watch it because it's fascinating.


00:27:14.820 --> 00:27:15.780
Yeah, yeah, yeah.


00:27:15.780 --> 00:27:21.460
The website has all like a how-to guides and documentation on how to build this.


00:27:21.460 --> 00:27:26.100
what things you need, sources to the software and everything.


00:27:26.100 --> 00:27:30.500
And it's also an open source project that anyone can contribute to if you're interested.


00:27:30.500 --> 00:27:35.940
This is really neat. One of the things I like about simple things like this is they're great


00:27:35.940 --> 00:27:40.740
projects to start kids with because it's very real and physical.


00:27:40.740 --> 00:27:44.340
Yeah, I was thinking this would be awesome in a teaching scenario as well.


00:27:44.340 --> 00:27:49.860
Cool. All right, this is a great one. I love it. Very neat to do with Python and stuff.


00:27:49.860 --> 00:27:52.220
All right. Well, I think that's it for our main items.


00:27:52.220 --> 00:27:54.420
Brian, do you got anything you'd like to share?


00:27:54.420 --> 00:27:58.100
>> We covered last week that


00:27:58.100 --> 00:28:01.420
the Python issues were migrating to GitHub and it


00:28:01.420 --> 00:28:04.940
might be on April Fool's Day and it was not.


00:28:04.940 --> 00:28:07.980
So next plan looks like April 8th.


00:28:07.980 --> 00:28:09.380
Next, one more week.


00:28:09.380 --> 00:28:12.020
>> If we keep talking about it, it's never going to happen.


00:28:12.020 --> 00:28:14.300
>> Like a watch pot sort of a thing?


00:28:14.300 --> 00:28:15.420
>> Exactly. Yes.


00:28:15.420 --> 00:28:18.460
>> Well, I'm waiting for it to happen. I want it to happen.


00:28:18.460 --> 00:28:22.060
I know that the transformation will be completed that point right.


00:28:22.060 --> 00:28:28.860
So next week we won't cover it at all unless it's already happened but if it's delayed again we won't cover it again until that.


00:28:28.860 --> 00:28:31.260
Exactly we're not getting roped into this three times.


00:28:31.260 --> 00:28:31.760
Okay.


00:28:31.760 --> 00:28:34.060
We see anything else you want to give a shout out to.


00:28:34.060 --> 00:28:45.860
Yeah yeah just one thing is a project that I found recently it's a cold thunder client it's an alternative video code extension and it's lightweight you download it and.


00:28:45.860 --> 00:28:47.700
- Oh, nice. - Scroll it and listen a second.


00:28:47.700 --> 00:28:50.500
And you can get started sending requests.


00:28:50.500 --> 00:28:52.900
And it has lists set up then, Postman.


00:28:52.900 --> 00:28:54.580
- Right. - It doesn't need any...


00:28:54.580 --> 00:28:56.740
It's like, it's easy to install.


00:28:56.740 --> 00:28:58.900
Yeah, so if you were testing APIs, like


00:28:58.900 --> 00:29:01.460
constructed JSON thing, put this header in, you want to call it.


00:29:01.460 --> 00:29:04.180
Yeah, ThunderClient for VS Code. Very nice.


00:29:04.180 --> 00:29:05.620
- Yeah. - Thunder, Thunder.


00:29:05.620 --> 00:29:07.300
If you're using VS Code.


00:29:07.300 --> 00:29:08.420
[laughing]


00:29:08.420 --> 00:29:09.380
- Nice. - Exactly, yeah.


00:29:09.380 --> 00:29:12.340
You'd go, you'd just switch tabs, you know,


00:29:12.340 --> 00:29:13.620
instead of switching applications.


00:29:13.620 --> 00:29:16.320
So that shaves a few micros like exactly.


00:29:16.320 --> 00:29:17.820
That's cool.


00:29:17.820 --> 00:29:18.720
I love it.


00:29:18.720 --> 00:29:19.200
All right.


00:29:19.200 --> 00:29:19.520
Nice.


00:29:19.520 --> 00:29:22.440
I've got just a one thing I believe today.


00:29:22.440 --> 00:29:23.160
This is really short.


00:29:23.160 --> 00:29:28.160
I've spoken about ngrok at ngrok.com before, but how it's really cool for exposing.


00:29:28.160 --> 00:29:32.560
If you're like wanting to expose an API to the outside world that you're


00:29:32.560 --> 00:29:34.160
developing, or you'd need to debug it.


00:29:34.160 --> 00:29:35.960
I've used this for like webhooks.


00:29:35.960 --> 00:29:40.160
So this company, when I need to integrate with their webhook, so I need them to


00:29:40.160 --> 00:29:41.600
call this, but it's not working.


00:29:41.600 --> 00:29:44.020
and so I want like a breakpoint on my machine,


00:29:44.020 --> 00:29:46.100
but how do they get to my machine?


00:29:46.100 --> 00:29:48.900
Just run ngrok and it'll tunnel it right through


00:29:48.900 --> 00:29:51.500
the firewalls using SSH reverse tunnels.


00:29:51.500 --> 00:29:52.340
That's all good.


00:29:52.340 --> 00:29:55.680
What I discovered working on yet another integration project


00:29:55.680 --> 00:29:59.980
was that there's actually this super rich inspector


00:29:59.980 --> 00:30:01.740
that I think people haven't noticed in there.


00:30:01.740 --> 00:30:03.060
If you fire up an ngrok thing


00:30:03.060 --> 00:30:05.220
and then you go to look host 4040,


00:30:05.220 --> 00:30:06.500
every request comes through.


00:30:06.500 --> 00:30:10.120
You can see the summary, the HTTP headers,


00:30:10.120 --> 00:30:14.360
the cookies, the response, the status codes, the duration, all that.


00:30:14.360 --> 00:30:18.300
If you're using ngrok for that sort of use case, be sure to check out this


00:30:18.300 --> 00:30:23.360
like live web view that lets you dive into, it's almost like the dev tools,


00:30:23.360 --> 00:30:27.240
the network tab of the dev tools, but for just people coming in rather


00:30:27.240 --> 00:30:29.200
than you consuming stuff, so it's pretty cool.


00:30:29.200 --> 00:30:29.880
That's neat.


00:30:29.880 --> 00:30:32.360
Are you guys ready for a joke?


00:30:32.360 --> 00:30:33.160
Yes.


00:30:33.160 --> 00:30:34.840
Shall we finish it off?


00:30:34.840 --> 00:30:35.760
Finish out with a joke.


00:30:37.260 --> 00:30:44.060
You may have heard recently that the Microsoft source code for Bing was got by the Lazarus group.


00:30:44.060 --> 00:30:49.900
And people thought this was some folks in like Brazil or somewhere in South America.


00:30:49.900 --> 00:30:52.300
It turns out it was a bunch of British teenagers.


00:30:52.300 --> 00:30:57.180
One of them had like 14 million dollars in Bitcoin, whatever.


00:30:57.180 --> 00:31:02.460
So they had gotten a hold of some of the Windows and Bing source code, I believe it was.


00:31:02.460 --> 00:31:06.140
And they were like, "Oh my gosh, is this going to reveal a bunch of zero days?"


00:31:06.140 --> 00:31:07.980
because people can go through the source code.


00:31:07.980 --> 00:31:10.140
Well, we don't do that much Windows,


00:31:10.140 --> 00:31:11.820
at least on the server in Python.


00:31:11.820 --> 00:31:13.100
There's some, but not as much.


00:31:13.100 --> 00:31:14.940
But we use a lot of Linux, right?


00:31:14.940 --> 00:31:17.020
For all the Talk Python, PythonBytes stuff,


00:31:17.020 --> 00:31:19.500
we've got like a fleet of eight Linux servers.


00:31:19.500 --> 00:31:21.820
Now, Brian, when I saw this headline,


00:31:21.820 --> 00:31:24.460
I really began to worry that maybe


00:31:24.460 --> 00:31:25.980
some vulnerabilities to be discovered


00:31:25.980 --> 00:31:28.620
or some kind of problem would happen here.


00:31:28.620 --> 00:31:30.460
So the headline is,


00:31:30.460 --> 00:31:33.660
Linus Torvalds confirms the Lapsus breach


00:31:33.660 --> 00:31:37.900
after hackers publish the Linux kernel source code to the internet.


00:31:37.900 --> 00:31:40.060
Okay.


00:31:40.060 --> 00:31:45.340
In a blog post on Tuesday, published hours after the Lapsus


00:31:45.340 --> 00:31:49.340
posted a torrent file containing partial source code from the Linux kernel,


00:31:49.340 --> 00:31:53.900
the geek man himself revealed that his branch was cloned by the hacking group,


00:31:53.900 --> 00:31:58.300
granting attackers unlimited power too. The article stops there.


00:31:58.300 --> 00:32:00.780
Oh, man.


00:32:00.780 --> 00:32:01.980
How many times do you have to read?


00:32:01.980 --> 00:32:07.980
Exactly. I think being open source, it's probably okay.


00:32:07.980 --> 00:32:09.980
Yeah.


00:32:09.980 --> 00:32:11.980
Yeah.


00:32:11.980 --> 00:32:13.980
Oh no, it's published the source.


00:32:13.980 --> 00:32:15.980
They published the source to Linux.


00:32:15.980 --> 00:32:17.980
What are we going to do?


00:32:17.980 --> 00:32:19.980
Always us.


00:32:19.980 --> 00:32:21.980
The programming humor just never stops.


00:32:21.980 --> 00:32:23.980
I love it.


00:32:23.980 --> 00:32:25.980
So they published the Bing source code?


00:32:25.980 --> 00:32:27.980
I think they got some of the Bing source code.


00:32:27.980 --> 00:32:29.980
Maybe Cortana.


00:32:29.980 --> 00:32:31.220
I can't remember exactly what it was,


00:32:31.220 --> 00:32:32.800
but it was some of these services,


00:32:32.800 --> 00:32:34.880
and I think the Windows source code as well.


00:32:34.880 --> 00:32:37.380
- I was surprised, so I don't pay too much attention


00:32:37.380 --> 00:32:39.000
to the blog traffic stuff,


00:32:39.000 --> 00:32:40.560
but I was looking the other day


00:32:40.560 --> 00:32:42.820
after I'd put up a bunch of the transcripts


00:32:42.820 --> 00:32:46.700
for testing code, I was curious how much was getting hit,


00:32:46.700 --> 00:32:51.420
and for pythontest.com, I'm getting more traffic


00:32:51.420 --> 00:32:53.820
from Bing than from Google, which is--


00:32:53.820 --> 00:32:55.620
- How interesting. - Interesting.


00:32:55.620 --> 00:32:58.220
- All of a sudden, Bing's pretty awesome, isn't it?


00:32:58.220 --> 00:32:59.060
(laughing)


00:32:59.060 --> 00:33:03.020
- Sure, well it's got nice pictures, I'll tell you that.


00:33:03.020 --> 00:33:04.020
It's got nice background pictures.


00:33:04.020 --> 00:33:07.180
- It does, actually in terms of beauty, it's really nice.


00:33:07.180 --> 00:33:10.860
And you know, I end up using DuckDuckGo.


00:33:10.860 --> 00:33:12.860
So when I'm using DuckDuckGo,


00:33:12.860 --> 00:33:14.820
I know they've got a ton of different sources,


00:33:14.820 --> 00:33:16.460
but one of the sources they use for data,


00:33:16.460 --> 00:33:17.500
I believe is also Bing.


00:33:17.500 --> 00:33:19.580
And yeah, it's all right.


00:33:19.580 --> 00:33:20.420
- It's all right.


00:33:20.420 --> 00:33:21.260
- It's all right.


00:33:21.260 --> 00:33:22.620
(laughing)


00:33:22.620 --> 00:33:25.940
Well, Vuceli, it was really great to have you here with us.


00:33:25.940 --> 00:33:27.040
And Brian. - Definitely.


00:33:27.040 --> 00:33:28.020
Yeah, the pleasure was mine.


00:33:28.020 --> 00:33:30.660
It's great to have a chat with you as always.


00:33:30.660 --> 00:33:31.500
>> All right.


00:33:31.500 --> 00:33:32.060
>> Bye everyone.


00:33:32.060 --> 00:33:34.540
>> Talk to you next week. Bye. Cheers.

