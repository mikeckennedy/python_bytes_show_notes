WEBVTT

00:00:00.001 --> 00:00:04.660
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to

00:00:04.660 --> 00:00:10.560
your earbuds. This is episode 160, recorded December 4th, 2019. I'm Michael Kennedy.

00:00:10.560 --> 00:00:11.360
And I'm Brian Okken.

00:00:11.360 --> 00:00:15.040
And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm

00:00:15.040 --> 00:00:21.000
slash DigitalOcean. $50 credit for new users. Let's start with a topic that we've covered

00:00:21.000 --> 00:00:24.020
quite a bit, Brian. Type hints. Or do you call them type annotations?

00:00:24.020 --> 00:00:27.040
I usually call them type hints.

00:00:27.040 --> 00:00:30.720
Yeah, I go back and forth. And the article you're going to mention actually says you can call

00:00:30.720 --> 00:00:34.820
them both. But yeah, it's kind of funky that they don't have like a definitive name. Maybe they do.

00:00:34.820 --> 00:00:37.020
And I just don't have certainty around it.

00:00:37.020 --> 00:00:41.000
Yeah, one of them's wrong. And whatever the one I'm using is probably the wrong one.

00:00:41.000 --> 00:00:45.660
So we have covered it a lot. And there's a lot of tools that we've talked about, like mypy and

00:00:45.660 --> 00:00:50.500
others. So hopefully we've convinced everybody that they should at least do a little bit of type

00:00:50.500 --> 00:00:56.880
hinting. If you're in that boat, then this article is perfect for you. Al Swigert wrote an article

00:00:56.880 --> 00:01:01.560
called Type Hints for Busy Python Programmers. And that's everybody, right? I mean...

00:01:01.560 --> 00:01:02.400
We're all busy.

00:01:02.400 --> 00:01:07.480
We're all busy. I really like the article. It's a kind of a... When I first went to it,

00:01:07.480 --> 00:01:11.820
I was a little shocked because there's a lot of words there. But it reads like a conversation.

00:01:11.820 --> 00:01:17.940
It's a conversational thing as if it's a programmer talking to an expert. So that sort of tone of,

00:01:17.940 --> 00:01:22.900
I think I should do this, but what do I do? And so he just sort of walks through a whole bunch

00:01:22.900 --> 00:01:29.780
of questions with it. He covers using mypy and typing as the two modules you need and how to use

00:01:29.780 --> 00:01:35.460
those. And there are other tools, but really most people are using mypy. And that's what... That's

00:01:35.460 --> 00:01:40.100
Al's saying that. I don't know if most people are using mypy or some of the other tools.

00:01:40.100 --> 00:01:45.740
We don't... I don't think there's any way to gain statistics on that. But I think mypy is a good way

00:01:45.740 --> 00:01:52.900
to start. And a reminder that using types doesn't affect runtime. You have to run a tool like mypy

00:01:52.900 --> 00:02:00.000
to get it to work. And so I don't think he covers this, but I think that people should hook running

00:02:00.000 --> 00:02:08.000
mypy into their talks system or into their continuous integration pipeline to make sure that these are

00:02:08.000 --> 00:02:08.960
met.

00:02:08.960 --> 00:02:10.540
Yeah. Everything's hanging together. Yeah.

00:02:10.740 --> 00:02:16.000
Yeah. There isn't any compiler to catch you. So one of the things I liked about it is it gets you

00:02:16.000 --> 00:02:21.820
started and it covers some of the basics. But there's... As I've started running it, started using

00:02:21.820 --> 00:02:28.060
type hints, the exact things that I've run into, Al covers. For instance, you've got a function that

00:02:28.060 --> 00:02:33.820
takes an integer, but it also could be none or the default is none or it's optional or something.

00:02:34.080 --> 00:02:39.980
How do you deal with that? There is stuff built in the type int system for unions. So you can say

00:02:39.980 --> 00:02:46.120
it's either an int or none and there's optional parameters. And then a shout out to stuff that

00:02:46.120 --> 00:02:50.500
if you kind of get into it and you might... Like if you're passing callables or sequences around,

00:02:50.500 --> 00:02:57.100
yes, there are ways to type that. And so I think this is actually just a really great quick read and

00:02:57.100 --> 00:02:58.960
it'll get you started pretty fast.

00:02:59.160 --> 00:03:03.760
Yeah. I really like it. I love the conversational style. It seems super approachable and it's kind

00:03:03.760 --> 00:03:08.780
of from the skeptics perspective. It seems a little bit like, oh, I want to do this, but what about...

00:03:08.780 --> 00:03:13.140
I don't know if I'm sure about this. Why can I do this? And yeah, it seems like a lot of fun. I'm

00:03:13.140 --> 00:03:19.240
definitely a fan of type hints these days, not for the MyPi reasons. I understand that makes sense for

00:03:19.240 --> 00:03:25.740
very large projects. But for me, like the editors are just so much better if you can just give them

00:03:25.740 --> 00:03:32.200
these little hints here and there. I'll give you an example. Like for the database for Python Bytes,

00:03:32.200 --> 00:03:37.680
we are talking to MongoDB with Mongo Engine. And the way you specify it is much like SQLAlchemy

00:03:37.680 --> 00:03:45.660
or even maybe more so like Django ORM where you say this column is a Mongo Engine column of type such

00:03:45.660 --> 00:03:50.480
and such. Well, the type editor, the editors think the type is like a column, but it's not a column.

00:03:50.480 --> 00:03:54.560
It's probably a date time or it's a string or it's a list or it's anything, but what do they think

00:03:54.560 --> 00:04:00.220
it is? And so you can use type hints to say this column is an integer and it's equal to one of these

00:04:00.220 --> 00:04:04.420
column things. Oh, okay. That'll tell all the editors when I hit dot on this, don't tell me it's

00:04:04.420 --> 00:04:07.920
one of these column things. I don't want to know that. I want to know what its value is because

00:04:07.920 --> 00:04:11.700
that's what I program against when I run it. So there's just all these different angles that make

00:04:11.700 --> 00:04:14.720
it super valuable. I'll have to take a look at how you're using that. That's pretty cool.

00:04:14.720 --> 00:04:19.920
Yeah, for sure. Speaking of cool, another thing that we have beaten to death, but is very tough

00:04:19.920 --> 00:04:25.080
and leathery and has not died is the ability to create an application out of Python code,

00:04:25.080 --> 00:04:25.860
right?

00:04:25.860 --> 00:04:26.280
Yes.

00:04:26.280 --> 00:04:32.360
Well, I stumbled across this thing. I don't believe it is new, but it actually is interesting

00:04:32.360 --> 00:04:40.580
on layers. There are layers of interest here called auto-py-2-exe. Auto-py-exe.

00:04:40.580 --> 00:04:40.860
Okay.

00:04:40.860 --> 00:04:47.580
Okay. So this is a GUI and it's built with eel. First of all, it's a GUI Python thing built

00:04:47.580 --> 00:04:48.580
with eel. Remember eel?

00:04:48.580 --> 00:04:49.860
I know. Remind me.

00:04:49.860 --> 00:04:53.180
Yeah. It lives in the ocean. Some of them are electrical. You shouldn't touch them. No

00:04:53.180 --> 00:04:58.760
wait, hold on. It's a library for making electron-like HTML and JavaScript GUI apps with Python.

00:04:58.760 --> 00:05:02.000
Oh, okay. It says electric snake. Got it.

00:05:02.000 --> 00:05:07.100
Yeah. Electron. Yeah, exactly. So it's very much like that. I think it's for kind of simplistic

00:05:07.100 --> 00:05:12.520
ones, but it certainly works for this app, which is pretty cool. So here's a Python app built in eel.

00:05:12.520 --> 00:05:18.260
That's cool. And it's kind of meta in the sense that it is, its job is to make other Python

00:05:18.260 --> 00:05:20.220
applications out of native Python code.

00:05:20.220 --> 00:05:21.300
Okay. Interesting.

00:05:21.300 --> 00:05:26.960
Okay. Yeah. So what it does is basically is this is automation over top py installer. And you might

00:05:26.960 --> 00:05:30.160
think, okay, well, I could just, you know, pass the command line arguments and just do that.

00:05:30.160 --> 00:05:36.140
But there's something really nice about having a GUI say, here's the icon. I just put the icon

00:05:36.140 --> 00:05:41.460
into the app. And here's the, the name I want for the title and such and such. And, you know,

00:05:41.460 --> 00:05:47.040
here are the additional binary files or additional resource files I want bundled and shipped with my

00:05:47.040 --> 00:05:51.660
application. We're using this JSON file and we're using this, I don't know, this image that we're

00:05:51.660 --> 00:05:56.220
going to embed somewhere. Just include those. And like, so there's all sorts of settings in this

00:05:56.220 --> 00:06:00.860
auto py.dxe where you can just pick all that stuff out and you don't really have to be an expert at

00:06:00.860 --> 00:06:05.100
all with py installer, but you can build pretty nice stuff. Like there's a checkbox. Do you want just a loose

00:06:05.100 --> 00:06:10.040
set of files or do you want it bundled into a single .exe that I can just give and it'll contain

00:06:10.040 --> 00:06:14.380
Python and the dependencies and all that? Okay. This does sound neat. Yeah. It's pretty neat, right?

00:06:14.380 --> 00:06:19.560
Yeah. And so really people want to, if this sounds interesting to you and you want to find out,

00:06:19.560 --> 00:06:23.880
Hey, is this cool? Is this interesting? There's a three minute YouTube video. You can just check that

00:06:23.880 --> 00:06:27.560
out. Okay, cool. So I put the link to the three minute video at the end. People can click on that,

00:06:27.560 --> 00:06:31.520
watch it. And then within three minutes, you'll decide whether or not this is useful for you. But

00:06:31.520 --> 00:06:36.240
some of the conversation I saw people saying, yeah, I know it just automates PyInstaller and

00:06:36.240 --> 00:06:39.880
that's cool. But there were things I couldn't get to work with PyInstaller, but doing it here,

00:06:39.880 --> 00:06:44.060
it worked fine. So I feel like there's a lot of value in this. Yeah. Nice. Yeah. Speaking of value,

00:06:44.060 --> 00:06:49.340
DigitalOcean, they are adding a lot of value to all the hosted things of the world, including our stuff

00:06:49.340 --> 00:06:54.600
that's hosted there across all the different sites and whatever. I believe we're doing like 15 terabytes

00:06:54.600 --> 00:07:00.240
of traffic a month through DigitalOcean. That is not messing around. That's a lot. So been rock solid.

00:07:00.240 --> 00:07:05.160
The other thing that they have that they're just launching is the Kubernetes, the container, their own

00:07:05.160 --> 00:07:11.520
container registry for things like their Kubernetes service. So we've got like Docker hub and places

00:07:11.520 --> 00:07:16.680
that you can put your containers, but that's on the public internet and things like that. It'd be nice

00:07:16.680 --> 00:07:21.060
to have a private little one for your private code that you want to make sure doesn't somehow leak with,

00:07:21.260 --> 00:07:26.140
you know, making it public or private on accident or whatever. So you can use their DigitalOcean

00:07:26.140 --> 00:07:31.380
container registry and have nice private container definitions, which is pretty cool, among other things.

00:07:31.380 --> 00:07:37.780
So check them out at pythonbytes.fm/DigitalOcean. Like I said, $50 credit for new users to get started

00:07:37.780 --> 00:07:41.760
and play around with this. Speaking of playing around, I've never played with Sphinx. Oh, you never have?

00:07:41.760 --> 00:07:46.740
I haven't. I've had no reason to do it, but it seems something like something that's useful. Maybe you should learn about it.

00:07:46.740 --> 00:07:51.060
Yeah. So one of the things like, so I have, what I've wanted to use Sphinx for,

00:07:51.060 --> 00:07:57.360
so Sphinx can be used for building up documentation and makes like a documentation website based on

00:07:57.360 --> 00:08:01.880
either REST or Markdown or not the REST in that. Restructured text. Restructured text.

00:08:01.880 --> 00:08:06.440
Yeah. Thanks a lot, programming world, for having two things that could be abbreviated REST.

00:08:06.620 --> 00:08:13.700
In the C++ land, there was some auto-documentation tools to where you can take, and I know other

00:08:13.700 --> 00:08:18.560
programming languages have this too, where you can take information about the structure of a program

00:08:18.560 --> 00:08:25.820
and automatically generate some web documentation about how to use it and what the parameters are

00:08:25.820 --> 00:08:30.200
for different functions and stuff like that. So you can do that with Sphinx, and that's the thing

00:08:30.200 --> 00:08:35.640
I've been wanting to do, and I've tried several times and failed. And it's usually because,

00:08:35.640 --> 00:08:40.840
probably on my part, but the tutorials get me part of the way, and then, you know, they reference a

00:08:40.840 --> 00:08:45.480
bunch of documentation and stuff, and I don't want to become a Sphinx expert. I want, that's kind of

00:08:45.480 --> 00:08:51.000
the point of this. I want to be able to just point it at my code and go, go do it. And like, for instance,

00:08:51.000 --> 00:08:57.080
pulling out, so what does a function do? What do different tests do? I'd like that to be embedded

00:08:57.080 --> 00:09:02.080
in the doc string so that when I'm coding, I can make sure that that's correct, and then that's just

00:09:02.080 --> 00:09:08.060
automatically generated. So what I'm highlighting today is an article called How to Document Python

00:09:08.060 --> 00:09:16.820
Code with Sphinx. It's a short tutorial by Mosh Zadka. That's a cool name. And so, walks through,

00:09:16.820 --> 00:09:23.060
it has a little example of a little module with the doc string, and then the small example of how to set

00:09:23.060 --> 00:09:29.300
up your index.rst. And I like Markdown better, but this is so short, I'd probably just use the

00:09:29.300 --> 00:09:34.280
restructured text version. Points out that you need a few extensions. You need Autodoc, Napoleon,

00:09:34.280 --> 00:09:40.260
and ViewCode. And then it gives you, just gives you the conf.py file you need to make this work.

00:09:40.260 --> 00:09:45.260
And then how do you generate this stuff? Well, there's this long, weird command. It's not that

00:09:45.260 --> 00:09:50.780
weird, but I don't want to memorize it. So this tutorial also shows you how to set up a tox.any

00:09:50.780 --> 00:09:57.900
file with this Sphinx built in. So you can just say tox and your docs get rebuilt. So I like this

00:09:57.900 --> 00:10:01.980
tutorial, and I'm going to give it a shot. Yeah, it's a really cool thing, and automatically

00:10:01.980 --> 00:10:05.760
generating your documentation. Not terrible at all. Of course, it doesn't cover, like,

00:10:05.760 --> 00:10:09.860
okay, well, now that you've generated it, it's a bunch of web pages and stuff. Where do you put

00:10:09.860 --> 00:10:15.500
that? But for internal documentation within a team, you got your own way to do it, whether you're

00:10:15.500 --> 00:10:21.040
pushing it into a, like a small web server, or just leaving it with your code, or whatever. So

00:10:21.040 --> 00:10:24.760
leave that to the user. Yeah, or put it on DigitalOcean, or not DigitalOcean,

00:10:24.760 --> 00:10:30.000
GitHub Pages, right? Yeah. That's one thing you do. You put it on Netlify. A lot of options for just

00:10:30.000 --> 00:10:33.900
hosting HTML. Yeah, or throw it into a GitHub cluster,

00:10:33.900 --> 00:10:39.820
or a Kubernetes cluster. Maybe not. That's right. So, you know, something that's always

00:10:39.820 --> 00:10:48.040
amused me is the association of Python ecosystem and language with snakes. Because that's not the

00:10:48.040 --> 00:10:52.600
origin, right? That's not what Python is named after. It's named after Monty Python. All these

00:10:52.600 --> 00:10:57.320
apps and stuff should have, like, medieval knight type of names, but they don't. So I'm going to tell

00:10:57.320 --> 00:11:05.400
you about one that is called Snake. Snake? Snake? S-N-E-K. Snake? Don't quite know the right

00:11:05.400 --> 00:11:10.700
accent to put on it to pull it off, but Snake? It's pretty awesome. So it's a PowerShell module

00:11:10.700 --> 00:11:18.360
for integrating standard CPython, which is Python code, and various packages with PowerShell. So if

00:11:18.360 --> 00:11:23.140
you're doing anything on Windows, any sort of automation or advanced shell stuff, you're probably

00:11:23.140 --> 00:11:29.720
using PowerShell. Although the regular terminal is getting better as well. And, you know, the story of

00:11:29.720 --> 00:11:35.380
Python on Windows has always had a little caveat, or maybe a little star, like, yeah, you always do this,

00:11:35.380 --> 00:11:39.440
except for on Windows, you type this other thing. And it's slowly getting better, right? Steve Dower's

00:11:39.440 --> 00:11:44.700
done a lot of work to improve that. Yeah. With, say, the Python installer that comes off the Windows 10

00:11:44.700 --> 00:11:51.660
store has Python 3 as a command, not just Python and so on. But here's one more thing that you can do to

00:11:51.660 --> 00:11:57.760
make working on Windows with Python better. If you do anything with PowerShell, you can write scripts

00:11:57.760 --> 00:12:04.100
now that have sections of those scripts or libraries for PowerShell written in Python. And it uses this

00:12:04.100 --> 00:12:14.200
library called Python for .NET, which is a new modern way to share the entire last library of .NET and all

00:12:14.200 --> 00:12:20.480
the objects you might create there with Python code. And similarly, say, this Python thing returns some

00:12:20.480 --> 00:12:25.640
funky .NET type that can be converted so, like, it looks normal to the rest of the PowerShell land,

00:12:25.640 --> 00:12:31.260
which is generally .NET stuff. So if you're doing stuff with PowerShell, check this out. It's pretty

00:12:31.260 --> 00:12:35.500
cool. The syntax is funky, but, you know, it's PowerShell syntax. So there you have it.

00:12:35.500 --> 00:12:41.960
Yeah. Well, okay. So I think that people can't be blamed for doing the snake thing because our logo

00:12:41.960 --> 00:12:47.560
is two snakes. I know. I think that that is absolutely true. I think it should be like maybe

00:12:47.560 --> 00:12:52.480
some cheese. Yeah, exactly. Or maybe a shield. Yeah, I don't know. Whatever. I don't mind having it

00:12:52.480 --> 00:12:55.580
being snake. The snake is cool. And there's the, you know, the Python snake. It's just funny.

00:12:55.580 --> 00:13:00.680
That's not actually the name. No. Killer Rabbit would be nice. Yes. The Killer Rabbit would be

00:13:00.680 --> 00:13:05.280
fantastic. If you just got an exception and that appeared as an emoji, that would be beautiful.

00:13:05.280 --> 00:13:10.280
Yeah. Or maybe a failed test in pytest, right? You could write a plugin. It unleashes the killer,

00:13:10.280 --> 00:13:16.200
the killer rabbit and all that. All right, we're going down a bit of a hole. So maybe get us out and

00:13:16.200 --> 00:13:22.860
talk, get us back to the databases. Okay. So databases. Since in Python world, one of the things we like to do

00:13:22.860 --> 00:13:29.080
is use Pandas because Pandas makes dealing with data like so much easier with data frames and stuff.

00:13:29.080 --> 00:13:35.540
And also one of the things with databases that we can use is SQLAlchemy if it's a SQL based database.

00:13:35.540 --> 00:13:42.120
And most of them are. So you can just take Pandas and put it together with SQLAlchemy and put it

00:13:42.120 --> 00:13:48.360
together with your database and just slurp your entire data tables into Pandas data frames and then

00:13:48.360 --> 00:13:52.980
manipulate them there. So you're good to go, right? Right. Unless you have like five gigs of data,

00:13:52.980 --> 00:13:58.300
then you're good to swap and be very slow. Yeah. Or if terabytes of data, that'd be bad. Yeah.

00:13:58.300 --> 00:14:05.800
Very bad. So all hope is not lost because I'm going to guess Arena Trong wrote this article called

00:14:05.800 --> 00:14:11.360
How to Use Pandas to Access Databases. And it's really great. One of the recommendations she uses

00:14:11.360 --> 00:14:16.780
is don't be afraid of the command line for SQL because you can play around with queries and look

00:14:16.780 --> 00:14:23.320
to see how big the shape of your data is to start with, which is a good thing. But then goes on to

00:14:23.320 --> 00:14:30.200
tips on how to put this together correctly. And I'm just going to read out the highlights, but

00:14:30.200 --> 00:14:35.480
there's examples of all these. So I think it's great to have a look. Don't grab a whole table limit

00:14:35.480 --> 00:14:40.120
to just the fields that you care about that you're going to actually use. Tables often have a lot of

00:14:40.120 --> 00:14:45.340
columns that you don't need. So don't grab everything. Limit the number of records. You can either use the

00:14:45.340 --> 00:14:50.760
limit field to say, I only want to grab like a thousand elements or something. You can also combine

00:14:50.760 --> 00:14:56.600
that with just the number of fields, but also you can also pick out, say, I know I'm going to already

00:14:56.600 --> 00:15:02.280
throw away all the rows that don't have a particular value in this one field. So you can

00:15:02.280 --> 00:15:07.800
limit that in your query. One of the things you'll often run into with SQL databases, of course, is to

00:15:07.800 --> 00:15:13.880
need the need to use joins. And the quick recommendation there is let the database do that.

00:15:13.880 --> 00:15:19.960
Put it in your query. Don't do the join within Pandas because you can do it with Pandas and SQL

00:15:19.960 --> 00:15:23.000
coming together, but don't. It's going to be slower.

00:15:23.720 --> 00:15:28.680
Right. Load it on a memory and have the data table merge it. That seems probably not like the

00:15:28.680 --> 00:15:29.400
best way to do it.

00:15:29.400 --> 00:15:29.720
Right.

00:15:29.720 --> 00:15:32.100
Databases are pretty good at joining stuff.

00:15:32.100 --> 00:15:36.680
Yeah. And I mean, if you find, of course, it didn't talk about this, but if you find you're doing

00:15:36.680 --> 00:15:41.980
that a lot, you can kind of restructure some of your queries within. I think you can build that in,

00:15:41.980 --> 00:15:46.500
like make a join be faster. I don't know. I'm not a database person, so.

00:15:46.500 --> 00:15:50.180
You could put indexes. You could write a store procedure and call that. There's a couple options.

00:15:50.320 --> 00:15:57.040
Okay. Ask Michael how to do it. Anyway, maybe not. So a lot of this is we're caring about memory. So

00:15:57.040 --> 00:16:01.000
how do you figure it out? Like how much memory you're going to use? And I didn't know you do this,

00:16:01.000 --> 00:16:07.540
but there's, she has a tip of using query called memory, memory underscore usage, and then summing it.

00:16:07.540 --> 00:16:13.520
This is, I don't know what the field comes back, but you can do a query and grab the memory, but you do

00:16:13.520 --> 00:16:18.700
like a small query, like just a hundred, a hundred rows or something, and then take that. And then you

00:16:18.700 --> 00:16:24.120
can use that to estimate the, the total size. If when you're going to read out like a thousand or

00:16:24.120 --> 00:16:30.320
2000 or something. And then the last one, I'm actually didn't quite follow, but I think I kind

00:16:30.320 --> 00:16:37.320
of followed. The tip is to talk that the types get converted, like integer types get converted to like

00:16:37.320 --> 00:16:43.480
64 bit types. I think, and you don't really need that for a lot of stuff. So there's a,

00:16:43.480 --> 00:16:48.180
I'm calling this out because it's definitely a, for the user read this if you need it, but

00:16:48.180 --> 00:16:55.760
there's a little bit on using chunking to, and then combining that with specifying what types,

00:16:55.760 --> 00:17:01.000
pandas types to use so that you get smaller data footprints.

00:17:01.000 --> 00:17:05.660
Yeah. Yeah. So for example, maybe one of the columns in the data frame that just the way it

00:17:05.660 --> 00:17:11.920
came back from the database is a 64 bit type integer and you know, everything can actually fit into an

00:17:11.920 --> 00:17:18.420
untyped and unsigned 16 bit integer. Well, that'll save you. It'll be a quarter of the size of the data

00:17:18.420 --> 00:17:22.900
if you'd make that conversion. Right. So got a million of them, a quarter of the size of a million,

00:17:22.900 --> 00:17:24.000
it's possibly meaningful.

00:17:24.000 --> 00:17:28.980
Yeah. I mean, a lot of stuff that like, for instance, a lot of stuff I'm, one of the tables I deal with has,

00:17:28.980 --> 00:17:37.320
has a number numbers for the different specifying, which kind of a result we're looking at, for

00:17:37.320 --> 00:17:43.160
instance. And it's, they each have like a number code. There's only like six. So the number can be

00:17:43.160 --> 00:17:48.820
one through six. I don't need 64 bits to store that. So yeah, for sure. So it's good. Do you use a

00:17:48.820 --> 00:17:51.960
pandas with SQLAlchemy and any of our doing it?

00:17:51.960 --> 00:17:57.340
Not really. I, there's a few times I've been thinking I should probably try to do some BI,

00:17:57.640 --> 00:18:03.280
like graphing type stuff, maybe about popularity of episodes or things like that, you know, figure

00:18:03.280 --> 00:18:06.500
out what day I should release our podcast on, but I haven't done anything. So no.

00:18:06.500 --> 00:18:08.660
Okay. But you do use a SQLAlchemy though, right?

00:18:08.660 --> 00:18:12.620
Some, but not for the main site because that's MongoDB.

00:18:12.620 --> 00:18:13.460
Oh, right.

00:18:13.460 --> 00:18:16.400
I'm using something equivalent, like we're using Mongo Engine, which is super equivalent.

00:18:16.400 --> 00:18:16.720
Okay.

00:18:16.720 --> 00:18:17.000
Yeah.

00:18:17.000 --> 00:18:17.780
Nice.

00:18:17.980 --> 00:18:22.280
So yeah, I suspect there's probably some interesting MongoDB integration with pandas

00:18:22.280 --> 00:18:26.240
that I just don't know about, but I don't know any equivalent of there. Well, this next

00:18:26.240 --> 00:18:31.420
one I'm going to cover is very similar to what you talked about. It talks about how do I basically

00:18:31.420 --> 00:18:37.180
efficiently work with data from this one source databases? And how do I not just select star

00:18:37.180 --> 00:18:43.400
from all the tables into pandas and work on it? Another problem you might have is you might

00:18:43.400 --> 00:18:50.080
have JSON data. JSON is sweet, but one thing JSON is not very obviously good at is streaming

00:18:50.080 --> 00:18:56.680
data, right? Because how do you know where the closing curly braces? Maybe you've got some

00:18:56.680 --> 00:19:01.600
key and then it's got an array of stuff. And the closing bit of that array is not until, you

00:19:01.600 --> 00:19:07.460
know, maybe 500 megabytes down the file. That's a problem potentially, right? So if you load

00:19:07.460 --> 00:19:13.360
it with, if you just load up a, you know, import JSON and do a JSON load, give it a file pointer,

00:19:13.360 --> 00:19:18.520
it's just going to hoover that all up and jam into it in one giant dictionary and spit it out.

00:19:18.520 --> 00:19:23.540
But if it's huge, obviously what you want to do is iterate over it and process it item by

00:19:23.540 --> 00:19:27.160
item. Yeah. I mean, that's what you would do for a regular file if you could take it line

00:19:27.160 --> 00:19:31.580
by line, but because it's this formatted thing, it's much harder. And something I ran

00:19:31.580 --> 00:19:37.260
across last time, time before we were talking about some other project and it said, oh,

00:19:37.260 --> 00:19:42.060
this project uses iJSON. I'm like, wait a minute, what is iJSON? That's interesting.

00:19:42.060 --> 00:19:49.880
Yeah. Yeah. So iJSON is an iterative JSON parser with the standard Python iterator interface. So

00:19:49.880 --> 00:19:57.360
what you can do is basically point it at a file stream, some like search expression kind of in

00:19:57.360 --> 00:20:02.700
the JSON document, and then it will stream those back to you generator style one at a time.

00:20:02.700 --> 00:20:03.660
That's so cool.

00:20:03.660 --> 00:20:09.260
Yeah. So there's a little example I put in the show notes. It says, imagine we've got some object

00:20:09.260 --> 00:20:15.040
called earth in our JSON document. It has a bunch of continents and within each continent, it lists

00:20:15.040 --> 00:20:20.940
out say cities and states and so on. If that was huge, probably it's not, but if it were, you would

00:20:20.940 --> 00:20:25.600
want to iterate over it. So you just go to the iJSON and go, give me the items of this from this file

00:20:25.600 --> 00:20:32.620
for earth.europe.item. And item is just a way to say, stop there. And then what you do is just say

00:20:32.620 --> 00:20:38.180
for thing in, you know, whatever came back from that load that you did and you just iterate over

00:20:38.180 --> 00:20:38.940
it in a for in loop.

00:20:38.940 --> 00:20:39.760
That's really neat.

00:20:39.760 --> 00:20:40.120
Yeah.

00:20:40.120 --> 00:20:46.400
And it's doing, like I was looking at the website, there's an example with grabbing it from like a

00:20:46.400 --> 00:20:50.820
URL because that's, you might be getting it from an API endpoint.

00:20:50.980 --> 00:20:51.140
Yeah.

00:20:51.140 --> 00:20:55.420
So I'm guessing that it's not grabbing everything from the endpoint at first.

00:20:55.420 --> 00:21:01.540
It probably depends on how the endpoint is set up or even maybe how the object that's

00:21:01.540 --> 00:21:05.060
querying it back. So I think they're using URL lib or something like that there.

00:21:05.060 --> 00:21:05.420
Okay.

00:21:05.420 --> 00:21:10.240
If you would set that up to do streaming, then you pass the stream over to iJSON, then it would

00:21:10.240 --> 00:21:14.400
probably stream it from the server and never keep it all in memory at once anyway. That'd be cool.

00:21:14.400 --> 00:21:15.120
Yeah, that'd be cool.

00:21:15.120 --> 00:21:17.400
Yeah. But there's probably several layers you got to set that up as.

00:21:17.500 --> 00:21:23.340
I'm using generators and iterators more and more because this lazy, doing lazy work is

00:21:23.340 --> 00:21:26.080
awesome. It speeds things up quite a bit sometimes.

00:21:26.080 --> 00:21:30.600
It's so awesome. And you basically no longer have a memory issue, no matter how much data

00:21:30.600 --> 00:21:34.060
you have. You might still have a time issue, but you're not going to run out of memory, right?

00:21:34.060 --> 00:21:37.240
You're just going to blast through it one at a time instead of blasting through them all

00:21:37.240 --> 00:21:37.920
and then working on them.

00:21:37.920 --> 00:21:39.680
Oh, nice. I got to check this out. Cool.

00:21:39.680 --> 00:21:43.700
Yeah. So people, if you have large JSON, bring out the iJSON.

00:21:43.700 --> 00:21:44.640
Bring out the iJSON.

00:21:44.640 --> 00:21:45.100
Yep.

00:21:45.280 --> 00:21:50.720
For sure. All right. Well, that's it for all of our main items, Brian. I have, for some reason,

00:21:50.720 --> 00:21:55.020
it's like a crazy news week and I actually decided to not throw a bunch of stuff in here,

00:21:55.020 --> 00:21:59.880
but to save it till next time because I just don't want to overwhelm everyone. But yeah,

00:21:59.880 --> 00:22:01.260
I've got a bunch of stuff to talk about. How about you?

00:22:01.260 --> 00:22:06.940
I am just kind of in a lull after Thanksgiving.

00:22:06.940 --> 00:22:08.180
Still in the turkey coma?

00:22:08.180 --> 00:22:12.540
Turkey coma. Yeah. My head's spinning. There's a lot of stuff coming up in the next couple of

00:22:12.540 --> 00:22:15.200
months and I'm pretty excited about it.

00:22:15.200 --> 00:22:19.280
That's awesome. Yeah. I'm trying to juggle between getting over that holiday break,

00:22:19.280 --> 00:22:23.680
doing all the Black Friday stuff at Talk Python training, and then getting ready for vacation.

00:22:23.680 --> 00:22:27.860
It's a lot. But in that little gap where I'm really still paying attention, there's a bunch

00:22:27.860 --> 00:22:34.700
of stuff that I ran across this week. So first of all, let's start with this. Django 3 was released.

00:22:34.900 --> 00:22:38.980
Oh, sweet. Yeah. So that's pretty cool. And Django 3, there's a couple of things that are

00:22:38.980 --> 00:22:45.360
important about it. One is it has official support for MariaDB, which is pretty cool. The other one is

00:22:45.360 --> 00:22:48.740
that it begins the journey to the async world.

00:22:48.740 --> 00:22:49.760
Dun, dun, dun.

00:22:49.760 --> 00:22:52.560
Dun, dun. We'll cross over to the ASGI world.

00:22:52.560 --> 00:22:57.660
Yeah. So things like async and await are now making their way to Django.

00:22:58.080 --> 00:23:02.700
I saw some messages from some of the developers there saying that this is not like the full story.

00:23:02.700 --> 00:23:07.340
This is the first steps. So we've got a long ways to go, but it's first steps, right? It's great to

00:23:07.340 --> 00:23:13.680
see them moving that way so that you get super high scalability if you need it. Most people actually

00:23:13.680 --> 00:23:19.440
don't need it. But if you do, it's cool to say the answer is not, well, now you move to go or node.

00:23:19.680 --> 00:23:22.900
It's you put the async keyword in front of your view method and you're good again.

00:23:22.900 --> 00:23:28.440
Yeah. I'm excited to watch this. And actually the Django 3 release, I had dipped my toes in Django

00:23:28.440 --> 00:23:34.540
before and I wanted to sort of wait until I knew the 3 was coming. So I was sort of waiting for this

00:23:34.540 --> 00:23:39.960
to be official before I started up again. So now I got no excuse. I can get started again.

00:23:39.960 --> 00:23:44.780
Yeah. That's awesome. Speaking of excuses running out, the death clock does toll, doesn't it?

00:23:44.780 --> 00:23:45.600
Yeah.

00:23:45.600 --> 00:23:51.560
Pretty soon the death clock is going to toll for Python 2.7 or 2 in general and in particular

00:23:51.560 --> 00:23:56.660
2.7. And as part of that, Python 2 will be removed from Homebrew.

00:23:56.660 --> 00:23:57.580
Wow. That's big.

00:23:57.580 --> 00:24:00.500
Yeah. That's pretty. It's just another sign that, you know, you probably shouldn't be using

00:24:00.500 --> 00:24:05.640
this. It used to be installable. Homebrew install Python at 2 or 2 or whatever the keyword was.

00:24:05.640 --> 00:24:11.660
Yeah. That doesn't work. Not yet. Very soon that's going to stop working. So that's cool.

00:24:12.580 --> 00:24:16.840
Big news, although I'm not really sure what spin to put on it, so I'll just give you the

00:24:16.840 --> 00:24:21.720
news, is Guido is stepping down from the steering council. And this came to us from Vincent Polio.

00:24:21.720 --> 00:24:25.360
Great. It's a thing. I don't really know how to spin it other than that.

00:24:25.360 --> 00:24:29.720
Well, yeah. I mean, basically, from what I got out of doing a little bit of reading is

00:24:29.720 --> 00:24:35.500
there were new elections to re-elect people to the steering council. And Guido didn't put his

00:24:35.500 --> 00:24:39.160
name in the hat. And people said, he didn't put his name in the hat. Here, let me put it in a

00:24:39.160 --> 00:24:42.740
forum. And then there was a conversation that followed. Like, you know, a lot of people are

00:24:42.740 --> 00:24:47.180
enjoying being part of the steering council. I've been on that part of Python for a long

00:24:47.180 --> 00:24:52.160
time. And it's not, it's just not fun for me right now. And I've earned some fun in the

00:24:52.160 --> 00:24:56.760
programming world. So I want to work on projects and not politics and all that kind of stuff.

00:24:56.760 --> 00:25:00.920
So I'm going to let someone else take it. And he also said, the reason I'm comfortable doing

00:25:00.920 --> 00:25:06.020
this is it's in good hands. The people already, the other council members there are great.

00:25:06.160 --> 00:25:09.620
So y'all don't need me. I'm still going to be around and working on stuff, but I just

00:25:09.620 --> 00:25:12.680
don't want to be on the steering council. So anyway, thanks for sending that over. That's

00:25:12.680 --> 00:25:16.100
big news, but that's about all I got to say. There wasn't a whole lot written about it really.

00:25:16.100 --> 00:25:25.060
GitHub is freezing open source for hundreds of thousands of years to preserve it for humanity.

00:25:25.060 --> 00:25:25.800
That's pretty awesome.

00:25:25.800 --> 00:25:29.380
Yeah. So the GitHub archive program, I watched this video.

00:25:29.380 --> 00:25:31.780
It's well done, right? It's like a polished little video.

00:25:31.780 --> 00:25:37.720
Yeah. So I don't know what to make of it other than it's a thing. They're going to put a whole

00:25:37.720 --> 00:25:43.340
bunch, all the, as a, like they've already put a bunch of stuff in there, but I guess next

00:25:43.340 --> 00:25:47.860
spring they're going to, or when next summer or something, they're going to go up and take

00:25:47.860 --> 00:25:53.780
all open source code on GitHub and digitize it into these film, these weird.

00:25:53.780 --> 00:25:55.080
Microfish code.

00:25:55.080 --> 00:25:55.560
Yeah.

00:25:55.560 --> 00:25:58.020
Digital microfish or something that'll last for very long.

00:25:58.020 --> 00:26:01.540
Yeah. It's supposed to last a thousand years or something like that. And they're going to put

00:26:01.540 --> 00:26:05.000
it in like some cave in, on an Island somewhere.

00:26:05.000 --> 00:26:07.380
Greenland, Iceland, some, one of those two, I can't remember.

00:26:07.380 --> 00:26:09.220
Right. So why?

00:26:09.220 --> 00:26:13.740
To preserve it. I don't know. I'm pretty excited. I have over a hundred public repos that are going

00:26:13.740 --> 00:26:16.740
to be up there though. That's going to be awesome. I'm excited for them to get cold and.

00:26:16.900 --> 00:26:23.520
Yeah. If, all of, so if civilization collapses, we're counting on future civilizations

00:26:23.520 --> 00:26:29.600
to be able to find this cave and figure out some technology to read these microfiche things.

00:26:29.600 --> 00:26:33.860
Wow. Those ancient creatures wrote in a very weird symbol form.

00:26:33.860 --> 00:26:37.040
Yeah. Okay. Well, good luck future selves.

00:26:37.040 --> 00:26:40.940
Yeah. Yeah. Good luck future selves. Hopefully they got, some, some hints, but anyway,

00:26:40.940 --> 00:26:46.400
that's pretty cool. And the last thing I had talked about this Python for decision makers course,

00:26:46.400 --> 00:26:53.000
that I'm working on. And basically it's a high level of why Python, when keys it, what it's good

00:26:53.000 --> 00:26:57.920
for, what it's not good for. I'm also going to do a live webcast that people can check out after the

00:26:57.920 --> 00:27:03.400
winter break. So mid January, I'm doing just a free webcast. People can sign up and come ask questions

00:27:03.400 --> 00:27:07.240
and we can just share our thoughts on, you know, whether Python makes sense for whatever they're

00:27:07.240 --> 00:27:11.900
doing. So people can check that out, click the link and register for free. Cool. That's a lot of stuff,

00:27:11.900 --> 00:27:15.580
man. It is. I think we should wrap it up with a joke though. Yeah, let's do that.

00:27:15.900 --> 00:27:18.020
This is our tradition now. All right, you go first.

00:27:18.020 --> 00:27:24.680
Okay. So, okay. Web developer walks into a restaurant. He immediately leaves in disgust

00:27:24.680 --> 00:27:27.000
as the restaurant is laid out in tables.

00:27:27.000 --> 00:27:33.040
Oh, must've been a no SQL web developer. Does it want that relational stuff in there?

00:27:33.040 --> 00:27:38.500
Yeah, that's pretty funny. That comes from a joke API that Sinjitsu sent over. And so appreciate

00:27:38.500 --> 00:27:42.440
that. And this next one as well is from there, but I kind of like it. So I'm going to cover it.

00:27:42.560 --> 00:27:46.560
So last time when we were talking about pint, you talked about using prefixes and suffixes

00:27:46.560 --> 00:27:51.120
for variable names. Like if I'm going to have something in meters, I'd use an underscore M

00:27:51.120 --> 00:27:57.860
potentially or centimeters underscore CM, whatever convention you use. So what is the best prefix

00:27:57.860 --> 00:27:59.180
for global variables?

00:27:59.340 --> 00:28:00.660
I'm not sure. What? Maybe G?

00:28:00.660 --> 00:28:06.340
That would be that. G. G underscore something like that. If it's global. Or hash.

00:28:06.340 --> 00:28:11.280
Like you shouldn't have global variables. So let's just comment those babies.

00:28:11.280 --> 00:28:12.120
Comment those out.

00:28:12.120 --> 00:28:15.280
Pretty sweet. Yeah. Thanks, Sinjitsu, for sending those in. Those are funny.

00:28:15.280 --> 00:28:15.600
Yep.

00:28:15.640 --> 00:28:17.100
All right, Brian. Well, thanks as always.

00:28:17.100 --> 00:28:18.080
Thank you. Bye.

00:28:18.080 --> 00:28:18.740
Yep. Bye.

00:28:18.740 --> 00:28:23.600
Thank you for listening to Python Bytes. Follow the show on Twitter via at Python Bytes. That's

00:28:23.600 --> 00:28:30.180
Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news

00:28:30.180 --> 00:28:34.740
item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout

00:28:34.740 --> 00:28:39.300
for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy.

00:28:39.300 --> 00:28:42.740
Thank you for listening and sharing this podcast with your friends and colleagues.

