
00:00:00.000 --> 00:00:06.300
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.


00:00:06.300 --> 00:00:12.600
It's Tuesday, May 30th, 2017, and this is episode 28 of Python Bytes.


00:00:12.600 --> 00:00:13.900
And I'm Michael Kennedy.


00:00:13.900 --> 00:00:14.900
And I'm Brian Okken.


00:00:14.900 --> 00:00:17.400
Brian, can you believe that we've done 28 episodes already?


00:00:17.400 --> 00:00:22.100
No, I can't. I was telling somebody about the show recently and I said, "Oh, we've only done like,


00:00:22.100 --> 00:00:24.300
oh my gosh, we've done like 27 episodes already."


00:00:24.300 --> 00:00:27.600
Yeah, we've done over half a year in the history of Python podcasts.


00:00:27.600 --> 00:00:32.080
I think over half a year's worth, over 20 episodes, makes it like one of the longest


00:00:32.080 --> 00:00:34.280
running podcasts of all time, actually.


00:00:34.280 --> 00:00:38.640
A lot of the other ones, they sort of cut it out early 20s, things like that.


00:00:38.640 --> 00:00:39.640
>> Yeah, that's true.


00:00:39.640 --> 00:00:43.780
>> Yeah, I mean, Talk Python and Podcasting.net, they've been going for a while, but still.


00:00:43.780 --> 00:00:49.400
One of the primary rules that, or documents or enhancements that tells us how we should


00:00:49.400 --> 00:00:51.240
write our code is PEP 8, right?


00:00:51.240 --> 00:00:56.520
>> Yeah, definitely everybody that's really into Python knows about PEP 8.


00:00:56.520 --> 00:01:01.960
But sometimes when you mention, "Hey, you should follow Pep8" to somebody new, it's


00:01:01.960 --> 00:01:05.080
not really that easy to get them up to speed.


00:01:05.080 --> 00:01:06.880
You know, it's not that hard to read.


00:01:06.880 --> 00:01:12.640
But I didn't know about this thing called Pep8.org, and so I just stumbled across this


00:01:12.640 --> 00:01:13.640
recently.


00:01:13.640 --> 00:01:21.040
And it's from Kenneth Reitz, and it's just an easy to use... it is just Pep8, the style


00:01:21.040 --> 00:01:22.120
guide.


00:01:22.120 --> 00:01:26.040
It's a nice webpage with... it's styled nicely.


00:01:26.040 --> 00:01:29.400
It's got red for bad examples and green for good examples.


00:01:29.400 --> 00:01:31.480
And it's got a nice index on the left


00:01:31.480 --> 00:01:32.320
that you can click through.


00:01:32.320 --> 00:01:33.160
- Yeah, it's definitely, yeah,


00:01:33.160 --> 00:01:35.280
it's a really nice and navigable thing.


00:01:35.280 --> 00:01:37.520
And you're right, like the green do this,


00:01:37.520 --> 00:01:39.220
red don't do that.


00:01:39.220 --> 00:01:43.200
And, you know, even little touches like the code samples


00:01:43.200 --> 00:01:45.040
that demonstrate good and bad,


00:01:45.040 --> 00:01:46.200
just basically any of the code samples


00:01:46.200 --> 00:01:49.680
that demonstrate anything are color-coded,


00:01:49.680 --> 00:01:51.560
which is like surprisingly delightful.


00:01:51.560 --> 00:01:55.000
- Yeah, and I also like, because of those index there,


00:01:55.000 --> 00:01:57.760
They're all anchors in the webpage.


00:01:57.760 --> 00:01:59.560
So you can take one of those


00:01:59.560 --> 00:02:03.920
and if you wanna mention a particular guideline to somebody,


00:02:03.920 --> 00:02:06.240
maybe a coworker that's not following it,


00:02:06.240 --> 00:02:07.840
you can email them that link and say,


00:02:07.840 --> 00:02:08.840
hey, could you read this?


00:02:08.840 --> 00:02:12.080
- Exactly, yeah, put that in your issue response.


00:02:12.080 --> 00:02:14.000
Like, I'm willing to take your PR,


00:02:14.000 --> 00:02:16.000
but hold on, you gotta fix this first.


00:02:16.000 --> 00:02:19.160
- Yeah, but one of the things that I always wanna mention


00:02:19.160 --> 00:02:23.160
when I talk about Pep8 is don't be a Pep8 bully.


00:02:23.160 --> 00:02:26.840
the first line of Pep8 talks about hobgoblins


00:02:26.840 --> 00:02:28.280
or something like that.


00:02:28.280 --> 00:02:31.640
And basically-- - Yes, blindly following rules


00:02:31.640 --> 00:02:33.960
is the hobgoblins of little minds


00:02:33.960 --> 00:02:35.460
or something to this effect, yeah?


00:02:35.460 --> 00:02:38.600
- Yeah, so somebody might have a decent reason


00:02:38.600 --> 00:02:42.680
for not following Pep8, so tread carefully


00:02:42.680 --> 00:02:44.840
when you try to get somebody to follow it.


00:02:44.840 --> 00:02:47.200
If you haven't stumbled across Pep8 before,


00:02:47.200 --> 00:02:50.060
which is kind of hard to think that's possible


00:02:50.060 --> 00:02:52.040
if you're listening to this podcast,


00:02:52.040 --> 00:02:55.040
It does describe itself as being the style guide


00:02:55.040 --> 00:02:58.960
for the standard library for Python and for,


00:02:58.960 --> 00:03:01.300
but it's a lot more than that.


00:03:01.300 --> 00:03:04.280
Most open source Python projects follow it


00:03:04.280 --> 00:03:05.560
to some degree, don't you think?


00:03:05.560 --> 00:03:07.160
- Right, yeah, and you can set up linters


00:03:07.160 --> 00:03:10.000
that will like mention violations.


00:03:10.000 --> 00:03:13.060
So for example, I think cookie cutter,


00:03:13.060 --> 00:03:16.520
if you do a PR to back to them


00:03:16.520 --> 00:03:21.520
and you do something like say write an 81 character line,


00:03:21.520 --> 00:03:23.160
it will fail the automated build and say,


00:03:23.160 --> 00:03:26.080
we're not going to accept it because it fails


00:03:26.080 --> 00:03:27.360
the flake eight or something to this effect.


00:03:27.360 --> 00:03:28.280
- Right, okay.


00:03:28.280 --> 00:03:30.160
- Yeah, I suspect everyone,


00:03:30.160 --> 00:03:31.880
pretty much everyone's heard of PEP 8,


00:03:31.880 --> 00:03:34.160
but I'm not sure everyone has actually taken the time


00:03:34.160 --> 00:03:35.960
to read through PEP 8.


00:03:35.960 --> 00:03:37.640
And I think that this thing is more readable,


00:03:37.640 --> 00:03:39.780
so it's probably, if you're in that group,


00:03:39.780 --> 00:03:41.200
then go check it out, pep8.org.


00:03:41.200 --> 00:03:43.200
- Okay, so what's next?


00:03:43.200 --> 00:03:45.360
- I want to talk about asynchronous stuff.


00:03:45.360 --> 00:03:46.180
Is it surprising?


00:03:46.180 --> 00:03:47.680
I always talk about asynchronous stuff.


00:03:47.680 --> 00:03:49.080
(laughing)


00:03:49.080 --> 00:03:55.120
So there's this new project called TOKIO.


00:03:55.120 --> 00:04:00.360
And at the heart of AsyncIO and Async and Await stuff are these things called Async


00:04:00.360 --> 00:04:03.360
event loops and whatnot.


00:04:03.360 --> 00:04:05.520
And this is one of those.


00:04:05.520 --> 00:04:10.840
We've previously spoken about Sanic and some of these faster web frameworks and their magic


00:04:10.840 --> 00:04:14.320
was that they run on top of this thing called UV loop.


00:04:14.320 --> 00:04:19.720
And UV loop is I think implemented in C and is an alternate implementation of this internal


00:04:19.720 --> 00:04:21.640
asyncio loop.


00:04:21.640 --> 00:04:27.000
While tcoy is a similar concept but implemented in Rust.


00:04:27.000 --> 00:04:33.520
So Rust is a compiled low level language such as, you know, like C. I mean, you can debate


00:04:33.520 --> 00:04:34.520
with this low level.


00:04:34.520 --> 00:04:35.600
I feel like it is.


00:04:35.600 --> 00:04:36.880
It's closer to the metal anyway.


00:04:36.880 --> 00:04:42.360
It's a compiled language and it's supposed to be a little better for threading, a little


00:04:42.360 --> 00:04:44.960
better for memory management and safety.


00:04:44.960 --> 00:04:49.280
So it's a little bit of a safer, more modern, low-level way to implement this.


00:04:49.280 --> 00:04:54.120
I just thought it was kind of an interesting example that you could go check out and say


00:04:54.120 --> 00:04:57.400
like, "Here's integration of Python with Rust."


00:04:57.400 --> 00:04:58.400
Okay.


00:04:58.400 --> 00:05:00.400
So it's a Python thing?


00:05:00.400 --> 00:05:04.200
Yeah, so you use it from Python, but instead of having like a C extension, you have a Rust


00:05:04.200 --> 00:05:05.200
extension.


00:05:05.200 --> 00:05:06.200
Oh, okay.


00:05:06.200 --> 00:05:07.200
That makes sense.


00:05:07.200 --> 00:05:08.200
Took me a while to catch up.


00:05:08.200 --> 00:05:09.200
Yeah, yeah, yeah.


00:05:09.200 --> 00:05:14.640
event loop is like written in C when you're looking at a UV loop, here it's


00:05:14.640 --> 00:05:18.400
written in Rust. And so here's like an interesting internal bit but you


00:05:18.400 --> 00:05:22.640
basically plug it into your Python code and then you can you know work with the


00:05:22.640 --> 00:05:26.800
async event loop like you normally would. Okay and I'm guessing it might be


00:05:26.800 --> 00:05:30.880
pronounced Tokyo but just guessing. Tokyo yeah yeah okay Tokyo you're probably


00:05:30.880 --> 00:05:38.760
right. You're probably right about that. So yeah cool and the project's still


00:05:38.760 --> 00:05:43.960
super early stage development. So if you're into Rust or you want to play with Rust and you would


00:05:43.960 --> 00:05:47.240
like a lot of people asking me like, "Hey, I want to do something open source. Is there an


00:05:47.240 --> 00:05:51.800
approachable small project?" This thing's pretty early days and so it's probably not too complicated


00:05:51.800 --> 00:05:55.400
to jump in and play around with if people are looking for some project to get involved with.


00:05:55.400 --> 00:05:56.120
Well, that's great.


00:05:56.120 --> 00:05:59.480
Yeah, absolutely. Tell me about some boilerplate.


00:05:59.480 --> 00:06:04.200
Well, this is, I've got another project that is fairly early. I guess I was just assuming


00:06:04.200 --> 00:06:09.640
it's fairly early in the project, but I stumbled across... stumbled... I'm saying that a lot today.


00:06:09.640 --> 00:06:15.960
I came across this a website called Python Boilerplate. It's python-boilerplate.com


00:06:15.960 --> 00:06:23.880
and it's addictively fun, at least right at first. I wouldn't try it on a phone. Actually,


00:06:23.880 --> 00:06:28.920
I haven't tried it on a phone, but it's it's got a a whole bunch of push buttons and stuff,


00:06:28.920 --> 00:06:32.920
and you can say which sort of boilerplate you want to have it spit out.


00:06:32.920 --> 00:06:36.920
And you can select Python 2 even, or Python 3.


00:06:36.920 --> 00:06:39.920
Luckily, it does default to Python 3.


00:06:39.920 --> 00:06:42.920
And you can say whether or not you want an executable,


00:06:42.920 --> 00:06:45.920
whether it's an executable script,


00:06:45.920 --> 00:06:48.920
and whether or not you want arg parse stuff in there,


00:06:48.920 --> 00:06:51.920
which actually, somebody that wants to add arg parse stuff,


00:06:51.920 --> 00:06:55.920
it's kind of nice to have some built-in boilerplate of examples.


00:06:55.920 --> 00:06:59.300
- Yeah, so it's a little bit like what Cookie Cutter does


00:06:59.300 --> 00:07:00.900
for large projects where you can say,


00:07:00.900 --> 00:07:03.900
I wanna generate kind of a starter code,


00:07:03.900 --> 00:07:06.700
a starter skeleton, but it's more like that,


00:07:06.700 --> 00:07:10.420
but for command line apps, CLI apps, right?


00:07:10.420 --> 00:07:11.980
- Yeah, smaller little projects.


00:07:11.980 --> 00:07:15.460
And it even like puts together a preliminary,


00:07:15.460 --> 00:07:18.820
like for instance, if you add Flask or pytest,


00:07:18.820 --> 00:07:22.540
for instance, it'll add your requirements.txt to it.


00:07:22.540 --> 00:07:25.280
So it's a similar vein as Cookie Cutter,


00:07:25.280 --> 00:07:28.540
but a little more interactive and it's fun.


00:07:28.540 --> 00:07:29.380
- Yeah, no, I like it.


00:07:29.380 --> 00:07:30.920
People should check that out.


00:07:30.920 --> 00:07:32.560
So that one's fun.


00:07:32.560 --> 00:07:34.520
We recently went to PyCon, it was awesome, right?


00:07:34.520 --> 00:07:35.680
- It was very awesome, yeah.


00:07:35.680 --> 00:07:38.340
- Hopefully this year people will take us seriously


00:07:38.340 --> 00:07:40.240
when we say get your tickets before it sells out.


00:07:40.240 --> 00:07:41.080
'Cause...


00:07:41.080 --> 00:07:44.080
Anyway, one of the things that's really cool


00:07:44.080 --> 00:07:47.880
that I really liked from PyCon was the presentation


00:07:47.880 --> 00:07:51.120
that Instagram, the folks from Instagram did.


00:07:51.120 --> 00:07:53.480
And luckily this is all on YouTube,


00:07:53.480 --> 00:07:54.880
so people can check it out.


00:07:54.880 --> 00:07:57.880
So Instagram, they're probably not the biggest,


00:07:57.880 --> 00:08:01.480
but they're one of the biggest by traffic number of users


00:08:01.480 --> 00:08:04.760
or whatnot, consumers or users of Python


00:08:04.760 --> 00:08:06.840
for their web apps and their backend services.


00:08:06.840 --> 00:08:09.200
Like they seriously use Python,


00:08:09.200 --> 00:08:12.080
they use Django and many, many places.


00:08:12.080 --> 00:08:16.400
And they had found themselves in a bit of a situation,


00:08:16.400 --> 00:08:20.280
like many, many of our listeners probably find themselves,


00:08:20.280 --> 00:08:23.960
but into a degree that is way, way higher, right?


00:08:23.960 --> 00:08:27.180
So they've got hundreds of millions of users,


00:08:27.180 --> 00:08:30.440
many, many, who knows how many thousand lines of Python,


00:08:30.440 --> 00:08:33.800
and they were stuck on Python 2.7 and Django,


00:08:33.800 --> 00:08:38.800
I think they said 1.3, which is years out of date.


00:08:38.800 --> 00:08:40.640
It's quite out of date.


00:08:40.640 --> 00:08:42.480
Like the current one is 1.8.


00:08:42.480 --> 00:08:44.840
The one people are working on is 2.


00:08:44.840 --> 00:08:46.360
The big news about Django 2


00:08:46.360 --> 00:08:49.560
is it's only gonna support Python 3, right?


00:08:49.560 --> 00:08:51.800
That was the big news there.


00:08:51.800 --> 00:08:56.800
And so they said, "We somehow need to get onto Python 3."


00:08:56.800 --> 00:09:00.320
A lot of companies say, "We have this huge bit of code,


00:09:00.320 --> 00:09:03.000
and so, well, I'll throw my hands up in the air,


00:09:03.000 --> 00:09:04.800
we just couldn't possibly switch.


00:09:04.800 --> 00:09:07.160
It's just too much work, it's too much risk."


00:09:07.160 --> 00:09:10.880
If you watch this presentation,


00:09:10.880 --> 00:09:12.960
there's almost no way you can look at this and go,


00:09:12.960 --> 00:09:15.200
"Oh, there's no way we can switch to Python 3


00:09:15.200 --> 00:09:16.920
after you see what they went through."


00:09:16.920 --> 00:09:18.400
So it's really intense.


00:09:18.400 --> 00:09:21.360
So for example, they don't believe in branches.


00:09:21.360 --> 00:09:22.900
in their Git repo.


00:09:22.900 --> 00:09:23.940
- Wow, I must have missed that.


00:09:23.940 --> 00:09:24.780
That's interesting.


00:09:24.780 --> 00:09:26.000
- Yeah, it's interesting, right?


00:09:26.000 --> 00:09:28.400
Because I think to some degree rightly feel


00:09:28.400 --> 00:09:32.060
that the farther you are away from master


00:09:32.060 --> 00:09:35.160
or yeah, from master, what they're calling it,


00:09:35.160 --> 00:09:38.400
the more it's gonna be hard to integrate that back in


00:09:38.400 --> 00:09:39.540
and the more you could introduce trouble


00:09:39.540 --> 00:09:40.860
by merging that back in.


00:09:40.860 --> 00:09:43.720
So what they do is they use feature switches.


00:09:43.720 --> 00:09:45.480
So if you're working on a new feature,


00:09:45.480 --> 00:09:46.880
there's a config on your dev server


00:09:46.880 --> 00:09:48.400
that says enable this feature,


00:09:48.400 --> 00:09:51.200
but in production, it might be turned off.


00:09:51.200 --> 00:09:58.380
So they're shipping, they said they check-in to the master branch quite often,


00:09:58.380 --> 00:10:02.560
like many times a day, and within an hour of that check-in, it's pushed to production,


00:10:02.560 --> 00:10:04.900
even when the features are not done, right?


00:10:04.900 --> 00:10:10.820
So now they have this huge, huge branch of Python code where lots of the libraries


00:10:10.820 --> 00:10:14.980
and modules and stuff are shared across different services and different servers.


00:10:14.980 --> 00:10:17.900
It runs on our old version of Django and Python 2.7, and they're like, "All right,


00:10:17.900 --> 00:10:22.420
What we're going to do is we're going to upgrade to Python 3, and we're not going to branch.


00:10:22.420 --> 00:10:27.220
We're going to keep shipping on this main branch and convert it to Python 3.


00:10:27.220 --> 00:10:28.940
We're going to upgrade like years worth of Django.


00:10:28.940 --> 00:10:33.900
I'm going to keep shipping on Python to production and so on.


00:10:33.900 --> 00:10:38.460
The process that they went through and the little steps that they took, and even for


00:10:38.460 --> 00:10:46.140
you, the testing procedures they went through to make this work was really, really interesting.


00:10:46.140 --> 00:10:50.020
Basically I'll give you guys the summary if you want to watch the video it's highly recommended


00:10:50.020 --> 00:10:55.420
but it's really a concrete roadmap for every large project every large company there was


00:10:55.420 --> 00:10:58.280
lots of users and traffic to switch.


00:10:58.280 --> 00:11:03.740
So they said they got between 12 and 40 percent performance improvement depending on where


00:11:03.740 --> 00:11:10.060
you look and like say the web tier versus the async queue tier and so on and I think


00:11:10.060 --> 00:11:14.300
like 30 percent better memory usage so just like straight across the board everything


00:11:14.300 --> 00:11:18.660
was better, and they haven't even started using the asyncio stuff.


00:11:18.660 --> 00:11:22.840
And they're super happy now that they can switch to a new version of Django.


00:11:22.840 --> 00:11:27.940
Something cool comes out in terms of performance, say like Python 3.7, some function call becomes


00:11:27.940 --> 00:11:29.700
much faster, they just get that.


00:11:29.700 --> 00:11:31.740
They don't have to like, oh, well, that'd be nice, right?


00:11:31.740 --> 00:11:36.060
They basically, so they get to be part of the forefront of Python once again, and they're


00:11:36.060 --> 00:11:37.060
happy about it.


00:11:37.060 --> 00:11:41.300
So then didn't they like start converting their code base so that it could run on Python


00:11:41.300 --> 00:11:45.140
3 but they were still deploying on Python 2.7.


00:11:45.140 --> 00:11:47.020
Yes, yes exactly.


00:11:47.020 --> 00:11:52.280
And then eventually one of the steps they made was we're going to make all the developers


00:11:52.280 --> 00:11:57.520
run and develop on Python 3 but still deploy to Python 2.


00:11:57.520 --> 00:12:03.320
And so that was one of the main like checks and balances was the developers will start


00:12:03.320 --> 00:12:06.260
hitting these bugs locally, will never push it out.


00:12:06.260 --> 00:12:10.260
And then they didn't push it out to production fully then, they push it out to just Facebook


00:12:10.260 --> 00:12:15.780
employees and then they pushed it out to 0.1% of their users to see how that worked.


00:12:15.780 --> 00:12:19.300
And then finally they started, they switched to like 20% and then like they pushed it all


00:12:19.300 --> 00:12:20.540
the way out, something like that.


00:12:20.540 --> 00:12:21.540
Yeah.


00:12:21.540 --> 00:12:22.540
So it was really interesting rollout.


00:12:22.540 --> 00:12:26.780
And on their testing, they had like, at first there was a bunch of tests that just couldn't


00:12:26.780 --> 00:12:27.780
be fixed.


00:12:27.780 --> 00:12:33.340
And so they set up a like, these are the tests that are included in the automated build.


00:12:33.340 --> 00:12:36.820
And slowly as they migrated tests, they added them to the also include this so they would


00:12:36.820 --> 00:12:40.020
not regress back to be broken.


00:12:40.020 --> 00:12:41.700
And they kind of chopped their way through that.


00:12:41.700 --> 00:12:45.180
And then eventually they said, okay, the default is new tests all have to pass on Python 3.


00:12:45.180 --> 00:12:48.660
And the old ones are going to go into this exclude list until we get the failing ones


00:12:48.660 --> 00:12:49.660
to zero.


00:12:49.660 --> 00:12:50.980
And I really liked the presentation.


00:12:50.980 --> 00:12:54.780
And I liked how they talked about actually a lot of the points that they went through.


00:12:54.780 --> 00:12:59.640
And it's a lot, I think the example is a good example for any project.


00:12:59.640 --> 00:13:05.060
But the, I also really liked the, just the reality that it's not trivial.


00:13:05.060 --> 00:13:06.500
Yeah, no, it wasn't trivial.


00:13:06.500 --> 00:13:09.420
It was like six months or four months or something huge.


00:13:09.420 --> 00:13:11.340
But very doable and while in production.


00:13:11.340 --> 00:13:12.340
That's pretty cool.


00:13:12.340 --> 00:13:14.140
Yeah, and they also kept shipping new features, right?


00:13:14.140 --> 00:13:15.140
That was one of their requirements.


00:13:15.140 --> 00:13:16.140
Right.


00:13:16.140 --> 00:13:18.020
So they shipped a bunch of new features at the same time.


00:13:18.020 --> 00:13:21.140
I bet they use at least one underscore in their code when they did that.


00:13:21.140 --> 00:13:23.100
Probably several underscores, yeah.


00:13:23.100 --> 00:13:28.660
We've featured Dan Bader on the show a lot, but this is a pretty cool article.


00:13:28.660 --> 00:13:31.140
The meaning of underscores in Python.


00:13:31.140 --> 00:13:32.140
And again-


00:13:32.140 --> 00:13:34.780
I think this falls into the realm of like what you said with PEP 8, right?


00:13:34.780 --> 00:13:38.180
Like a lot of people are seeing these, but maybe they haven't really looked specifically


00:13:38.180 --> 00:13:39.180
at what it's about, right?


00:13:39.180 --> 00:13:44.860
Yeah, and also he goes through pretty much all the different meanings, but one of the things that I,


00:13:44.860 --> 00:13:50.220
it took me a while to understand is that when people say dunder, they mean something with two


00:13:50.220 --> 00:13:56.540
underscores on both ends. Shortened of double underscore. So, it's a good list. He talks about


00:13:56.540 --> 00:14:04.300
the leading underscore meaning that it's sort of by convention private for, or internal use only.


00:14:04.860 --> 00:14:10.860
But, and I added a note in our show notes that that doesn't apply to named tuple.


00:14:10.860 --> 00:14:15.220
Named tuple has its functions starting with leading underscore, but you can still use


00:14:15.220 --> 00:14:16.220
them.


00:14:16.220 --> 00:14:17.220
That's what they're for.


00:14:17.220 --> 00:14:18.220
Yeah, nice.


00:14:18.220 --> 00:14:19.220
Nice.


00:14:19.220 --> 00:14:22.340
Yeah, I was just pairing with somebody today and said, what is class underscore mean?


00:14:22.340 --> 00:14:24.100
Like, why is the underscore there?


00:14:24.100 --> 00:14:25.100
Oh, yeah, right.


00:14:25.100 --> 00:14:32.380
So if that's the trailing underscore, it's because somebody doesn't want to collide with


00:14:32.380 --> 00:14:34.220
a Python keyword or something.


00:14:34.220 --> 00:14:36.980
- Yeah, exactly, like, it's class, so class_.


00:14:36.980 --> 00:14:39.340
- Yeah, and I do like, I actually like that convention


00:14:39.340 --> 00:14:42.860
a lot better than having, like, my class,


00:14:42.860 --> 00:14:44.980
or this class, or something like that.


00:14:44.980 --> 00:14:45.820
- I know, that really bugs me.


00:14:45.820 --> 00:14:48.340
- Yeah, and one of the things that a lot of people don't,


00:14:48.340 --> 00:14:50.420
that I was surprised by when I first learned about it,


00:14:50.420 --> 00:14:52.340
is a single_by itself.


00:14:52.340 --> 00:14:53.540
- Yes, that's one of my favorites.


00:14:53.540 --> 00:14:55.580
- Yeah, and that's a I don't care variable


00:14:55.580 --> 00:14:58.380
that you can, like, if you have to assign a variable,


00:14:58.380 --> 00:15:01.300
something to a variable, but you're not gonna use it anymore


00:15:01.300 --> 00:15:03.740
or use it at all, that's a decent one.


00:15:03.740 --> 00:15:05.900
And the warning, you don't get a warning for that


00:15:05.900 --> 00:15:08.920
if it's something assigned and never used.


00:15:08.920 --> 00:15:10.420
- Exactly, it's meant to not be used.


00:15:10.420 --> 00:15:12.860
Yeah, yeah, I mean, the couple of places I see that,


00:15:12.860 --> 00:15:14.620
like a tuple unpacking,


00:15:14.620 --> 00:15:16.660
when you don't care about all the values,


00:15:16.660 --> 00:15:17.760
it's kind of good.


00:15:17.760 --> 00:15:21.420
If you say, I just wanna do a loop from one to 10,


00:15:21.420 --> 00:15:22.600
but I don't care about the number,


00:15:22.600 --> 00:15:23.700
I just wanna do it 10 times,


00:15:23.700 --> 00:15:25.940
you could say four underscore in range,


00:15:25.940 --> 00:15:28.620
you know, zero, 10, whatever, things like that.


00:15:28.620 --> 00:15:29.700
- That's a good use for that.


00:15:29.700 --> 00:15:30.540
- Yeah, yeah.


00:15:30.540 --> 00:15:31.820
The other place that I really like this


00:15:31.820 --> 00:15:33.340
is where I have function signatures


00:15:33.340 --> 00:15:36.480
I have to match, but I don't care about the variables.


00:15:36.480 --> 00:15:38.500
So for example, in the web methods,


00:15:38.500 --> 00:15:41.380
a lot of them take request as a parameter.


00:15:41.380 --> 00:15:43.260
And if you don't put the request parameter there,


00:15:43.260 --> 00:15:45.540
like the framework will fail to like try to pass it


00:15:45.540 --> 00:15:47.580
and won't like match and it'll crash and all that.


00:15:47.580 --> 00:15:50.180
But I don't care about calling the request variable


00:15:50.180 --> 00:15:51.020
or working with it.


00:15:51.020 --> 00:15:53.380
So you'll get like a flake eight violation


00:15:53.380 --> 00:15:54.420
you're not using it.


00:15:54.420 --> 00:15:55.300
So underscore.


00:15:55.300 --> 00:15:58.100
- In that case, can you use it multiple times?


00:15:58.100 --> 00:16:00.220
Like can you have multiple parameter names


00:16:00.220 --> 00:16:01.220
that are underscore?


00:16:01.220 --> 00:16:02.060
- I think so, yeah.


00:16:02.060 --> 00:16:05.340
you just like blast away the previous value stored in underscore.


00:16:05.340 --> 00:16:07.460
But if you're really using it as like, I don't care.


00:16:07.460 --> 00:16:08.460
Cool.


00:16:08.460 --> 00:16:09.460
Okay.


00:16:09.460 --> 00:16:10.460
Yeah, absolutely.


00:16:10.460 --> 00:16:12.300
So the underscore is definitely good.


00:16:12.300 --> 00:16:14.340
If you're not familiar with that, check out Dan's article.


00:16:14.340 --> 00:16:15.940
It's a good one.


00:16:15.940 --> 00:16:19.260
So let's close this out with a little bit of a look towards the future.


00:16:19.260 --> 00:16:20.260
Okay.


00:16:20.260 --> 00:16:24.840
And we talked about recently, the Stack Overflow tools, trends tool.


00:16:24.840 --> 00:16:28.700
And when Stack Overflow released it, one of the things that they featured right up in


00:16:28.700 --> 00:16:33.100
the front was like language popularity for a few languages including Python.


00:16:33.100 --> 00:16:34.100
It looks pretty good, right?


00:16:34.100 --> 00:16:35.100
Yeah.


00:16:35.100 --> 00:16:36.100
Yeah.


00:16:36.100 --> 00:16:37.100
So I want to come back.


00:16:37.100 --> 00:16:41.540
There's a guy who wrote a Medium post that actually dug into this quite a bit and played


00:16:41.540 --> 00:16:46.060
around with it and said, "The future is looking bright for Python."


00:16:46.060 --> 00:16:50.140
And basically took that tool and did a little better analysis with it than we did.


00:16:50.140 --> 00:16:55.940
And there's one chart that they put up as a standard chart at Stack Overflow since we


00:16:55.940 --> 00:16:59.680
we covered it called the most popular languages trend chart.


00:16:59.680 --> 00:17:01.940
And that's got like 15 languages or something still.


00:17:01.940 --> 00:17:03.280
It's really completely overwhelming.


00:17:03.280 --> 00:17:06.660
But if you hover over the language names, it highlights them and dims the others.


00:17:06.660 --> 00:17:07.660
You can actually see it.


00:17:07.660 --> 00:17:08.660
Okay, cool.


00:17:08.660 --> 00:17:12.660
What's really interesting is if you go through that chart, and you hover over the languages,


00:17:12.660 --> 00:17:17.260
there are only like two languages that have upward trends.


00:17:17.260 --> 00:17:24.860
And recently, and which one is the most steeply upward has the most positive derivative, probably


00:17:24.860 --> 00:17:25.860
Python.


00:17:25.860 --> 00:17:31.020
It's of course it does actually by quite a quite a large margin and there's also a trend


00:17:31.020 --> 00:17:35.160
chart on there for Python 2 versus Python 3.


00:17:35.160 --> 00:17:37.740
And last year Python 3 overtook Python 2.


00:17:37.740 --> 00:17:38.740
Oh nice.


00:17:38.740 --> 00:17:42.600
So just a little the same same kind of ideas with this trends but just digging in a little


00:17:42.600 --> 00:17:44.220
more detail and it's kind of interesting.


00:17:44.220 --> 00:17:48.140
I thought it'd be fun to tie that together with the Instagram story so you can go back


00:17:48.140 --> 00:17:54.380
to your company your boss whatever and go into life 2020 for Python 2.


00:17:54.380 --> 00:17:56.380
is no longer supporting Python 2.


00:17:56.380 --> 00:17:58.380
Look, Python 3 is growing here.


00:17:58.380 --> 00:18:00.380
Just like all the good stuff, right?


00:18:00.380 --> 00:18:02.380
I'll bring it all together to help get a little more


00:18:02.380 --> 00:18:05.380
Python versus legacy Python in the world.


00:18:05.380 --> 00:18:07.380
Yeah, and I definitely don't hear...


00:18:07.380 --> 00:18:10.380
A couple years ago, we still heard people


00:18:10.380 --> 00:18:13.380
coming up with good reasons to stay on 2.7.


00:18:13.380 --> 00:18:16.380
I don't hear anybody talking about that anymore.


00:18:16.380 --> 00:18:21.380
Nope. Definitely, we've crossed over some sort of boundary, for sure.


00:18:21.380 --> 00:18:27.220
Hopefully also in the future, it'll bring us at least another half year of Python Bytes.


00:18:27.220 --> 00:18:30.140
I'm pretty sure we can at least get another half year of this.


00:18:30.140 --> 00:18:31.140
Yeah.


00:18:31.140 --> 00:18:32.140
So, it's fun.


00:18:32.140 --> 00:18:33.540
That's all of our topics.


00:18:33.540 --> 00:18:35.140
Any news for us, Michael?


00:18:35.140 --> 00:18:36.140
No real news for me.


00:18:36.140 --> 00:18:40.260
I'm just recording podcasts like crazy trying to get ahead for the summer.


00:18:40.260 --> 00:18:43.980
So I have, like I was just telling you in the opening of the show before, hit record,


00:18:43.980 --> 00:18:49.740
like eight episodes of Talk Python to Me I'm recording over the next six, seven days.


00:18:49.740 --> 00:18:52.580
So there's going to be a whole bunch of good stuff lining up,


00:18:52.580 --> 00:18:53.860
and I'm excited about what's coming.


00:18:53.860 --> 00:18:54.400
How about you?


00:18:54.400 --> 00:18:57.220
I'm kicking off some more recording also.


00:18:57.220 --> 00:19:00.620
Definitely the book is still going strong,


00:19:00.620 --> 00:19:03.260
and doing a lot of work on that.


00:19:03.260 --> 00:19:05.460
But I recorded an interview this morning,


00:19:05.460 --> 00:19:07.300
and I'll have at least a couple coming out


00:19:07.300 --> 00:19:08.340
in the next couple weeks.


00:19:08.340 --> 00:19:10.460
So test and code is not dead.


00:19:10.460 --> 00:19:11.580
It will come back.


00:19:11.580 --> 00:19:12.500
What was the topic?


00:19:12.500 --> 00:19:13.700
What did you record on today?


00:19:13.700 --> 00:19:17.580
Actually, I recorded somebody that does mobile testing.


00:19:17.580 --> 00:19:21.380
So mobile application and mobile and responsive web page testing.


00:19:21.380 --> 00:19:27.380
And it's a company that offers a service that has, like, you can like rent a


00:19:27.380 --> 00:19:27.880
device.


00:19:27.880 --> 00:19:33.120
Like, so somebody like tells you that that your, your website or your, your web


00:19:33.120 --> 00:19:36.620
application or something doesn't work on this particular device.


00:19:36.620 --> 00:19:38.360
You don't have to go out and buy it.


00:19:38.360 --> 00:19:38.820
Yeah.


00:19:38.820 --> 00:19:41.540
Android Oreo, whatever, right?


00:19:41.540 --> 00:19:41.800
Yeah.


00:19:41.800 --> 00:19:42.540
It's on this.


00:19:42.540 --> 00:19:42.840
Yeah.


00:19:42.840 --> 00:19:47.020
You can just, you can go and rent it for like a, I don't know, I think, I think


00:19:47.020 --> 00:19:49.460
their prices are like 10 cents a minute or something like that.


00:19:49.460 --> 00:19:52.240
But you can, I have no idea what their prices are actually.


00:19:52.240 --> 00:19:56.020
I can't remember, but, but it's a, it's a commercial product, but I, I want to,


00:19:56.020 --> 00:19:59.020
I want to make sure that testing code isn't just about open source stuff.


00:19:59.020 --> 00:20:02.220
It's also companies that are helping out that area.


00:20:02.220 --> 00:20:03.420
So it was good.


00:20:03.420 --> 00:20:03.680
Yeah.


00:20:03.680 --> 00:20:05.300
It's cool to cover the whole, whole spectrum.


00:20:05.300 --> 00:20:07.940
And can you imagine what their data center must be like with a


00:20:07.940 --> 00:20:09.060
thousand different phones?


00:20:09.060 --> 00:20:10.700
Yeah.


00:20:10.700 --> 00:20:15.580
And I, and I also asked him silly things like, okay, so I operate my phone with my


00:20:15.580 --> 00:20:19.420
finger do you have somebody are you paying somebody to move their finger or


00:20:19.420 --> 00:20:25.220
something and they said no they've got that all figured out automated so perfect


00:20:25.220 --> 00:20:29.260
perfect all right well Brian thanks for sharing the news this week and meeting


00:20:29.260 --> 00:20:32.740
with me and as always you know yeah thank you talk to you later you bet bye


00:20:32.740 --> 00:20:36.300
bye everyone thank you for listening to Python bites


00:20:36.300 --> 00:20:41.700
follow the show on Twitter via at Python bites that's Python bites as in B Y T E S


00:20:41.700 --> 00:20:45.700
And get the full show notes at pythonbytes.fm.


00:20:45.700 --> 00:20:49.380
If you have a news item you want featured, just visit pythonbytes.fm and send it our


00:20:49.380 --> 00:20:50.380
way.


00:20:50.380 --> 00:20:52.900
We're always on the lookout for sharing something cool.


00:20:52.900 --> 00:20:56.140
On behalf of myself and Brian Okken, this is Michael Kennedy.


00:20:56.140 --> 00:20:59.380
Thank you for listening and sharing this podcast with your friends and colleagues.

