WEBVTT

00:00:00.640 --> 00:00:04.760
This is Python Bytes, Python headlines and news delivered directly to your earbuds.

00:00:04.760 --> 00:00:09.400
It's episode seven, recorded Wednesday, January 4th, 2017.

00:00:09.400 --> 00:00:10.740
Hey, Brian.

00:00:10.740 --> 00:00:12.600
Hey, happy new year.

00:00:12.600 --> 00:00:13.760
Yeah, happy new year.

00:00:13.760 --> 00:00:15.960
It's great to be back together.

00:00:15.960 --> 00:00:20.760
We've gone three weeks without discussing cool things that came out in the Python community,

00:00:20.760 --> 00:00:23.420
and I think it's time to get back together.

00:00:23.420 --> 00:00:24.960
The Python news must flow.

00:00:24.960 --> 00:00:27.060
It must, and plus I missed this.

00:00:27.060 --> 00:00:27.660
This is fun.

00:00:27.660 --> 00:00:29.180
Yeah, it's definitely, definitely fun.

00:00:29.180 --> 00:00:33.020
And so, like many of our episodes, this one is sponsored by Rollbar.

00:00:33.020 --> 00:00:36.020
They help you take the pain out of errors, so thank you, Rollbar.

00:00:36.020 --> 00:00:38.060
We'll have more to say about them throughout the show.

00:00:38.060 --> 00:00:41.360
So, Brian, you had a little warning.

00:00:41.360 --> 00:00:43.040
You wanted to just get it out of the way?

00:00:43.040 --> 00:00:48.180
Yeah, I've got, there's some, a couple, I want to try to list some of the names of the articles,

00:00:48.180 --> 00:00:52.400
of the people that wrote the articles that we are reading and talking about in this episode,

00:00:52.400 --> 00:00:56.880
and some of them have names that I am most definitely going to mispronounce.

00:00:56.880 --> 00:00:58.960
I hope you don't take offense at it.

00:00:58.960 --> 00:01:04.720
I have a last name that everybody mispronounces, so I understand.

00:01:04.720 --> 00:01:06.080
You're used to it?

00:01:06.080 --> 00:01:06.700
Yeah.

00:01:06.700 --> 00:01:11.400
I get Oaken and, mostly Oaken is what I get, but.

00:01:11.400 --> 00:01:12.840
But you're not a tree.

00:01:12.840 --> 00:01:13.480
Yeah.

00:01:14.680 --> 00:01:19.580
Hey, so before we get to the first episode, the first news item, I actually want to do

00:01:19.580 --> 00:01:19.700
something.

00:01:19.700 --> 00:01:20.580
I'm going to open up my terminal.

00:01:20.580 --> 00:01:22.180
I'm going to type, type something, okay?

00:01:22.180 --> 00:01:24.840
I'm going to type Python 3-V.

00:01:24.840 --> 00:01:26.920
Do you know what it says?

00:01:26.920 --> 00:01:29.060
Not Python 3.5.2.

00:01:29.060 --> 00:01:29.800
Not anymore.

00:01:29.800 --> 00:01:30.260
No.

00:01:30.260 --> 00:01:31.700
It says Python 3.6.

00:01:31.700 --> 00:01:32.460
That's right.

00:01:32.460 --> 00:01:33.220
Python 3.6.

00:01:33.320 --> 00:01:34.320
Yeah.

00:01:34.320 --> 00:01:42.880
So Python 3.6 was announced on December 23rd, and it's now Python 3.6.0 is our official

00:01:42.880 --> 00:01:45.360
latest release, and this is really exciting.

00:01:46.200 --> 00:01:51.600
I've already started using some of the new features in my writing.

00:01:51.600 --> 00:01:55.380
I'm definitely taking advantage of the f-strings.

00:01:55.380 --> 00:01:57.540
I don't know how you would call those.

00:01:57.540 --> 00:01:57.840
Yeah.

00:01:57.840 --> 00:02:02.740
I think the other languages call it string interpolation, but it's the F character that indicates

00:02:02.740 --> 00:02:03.020
it.

00:02:03.020 --> 00:02:03.600
Yeah.

00:02:03.600 --> 00:02:06.140
Swift and C# call it string interpolation.

00:02:06.140 --> 00:02:08.320
I'm going to call them the F in strings.

00:02:08.320 --> 00:02:09.680
I love it.

00:02:10.780 --> 00:02:15.420
But in celebration of this, I know we've already talked about 3.6, but I've got links

00:02:15.420 --> 00:02:21.000
to the, in our show notes for the announcement and the what's new article from docspython.org.

00:02:21.000 --> 00:02:23.620
But there's also a couple other articles that are cool.

00:02:23.620 --> 00:02:30.460
There's a Python 3.6 is packed with goodness article from Sirdar Yigalap.

00:02:30.460 --> 00:02:32.200
No, I got that one wrong.

00:02:32.200 --> 00:02:39.000
That's on InfoWorld, but it's a list of things that he thinks is cool in 3.6, including Async

00:02:39.000 --> 00:02:42.940
await and use the use of that more.

00:02:42.940 --> 00:02:45.560
The improvements of memory and speed.

00:02:45.560 --> 00:02:48.100
And I, I'm really excited about that.

00:02:48.100 --> 00:02:54.280
And some, something that I didn't know about is some of the improved API support so that

00:02:54.280 --> 00:02:57.040
tracers and debuggers and stuff can hook into Python easier.

00:02:57.040 --> 00:02:57.640
Yeah.

00:02:57.640 --> 00:02:58.980
It's definitely packed with goodness.

00:02:58.980 --> 00:03:00.360
I think that's, that's great.

00:03:00.360 --> 00:03:03.900
Another article that you pointed out was adopt Python 3.

00:03:03.900 --> 00:03:06.440
I really liked that one as well.

00:03:06.440 --> 00:03:09.900
And I'll let you go to some of the stats and say the name as well, the author.

00:03:09.900 --> 00:03:10.420
Yeah.

00:03:10.420 --> 00:03:16.000
So this is the meet on medium and I'm going to try this one because it's a cool name.

00:03:16.000 --> 00:03:17.780
Dibya Chakravarti.

00:03:17.780 --> 00:03:18.800
I don't know.

00:03:18.800 --> 00:03:19.960
Cool name.

00:03:19.960 --> 00:03:21.660
But yeah.

00:03:21.740 --> 00:03:26.700
So there, this other adopt Python 3 article talk, I thought it was interesting.

00:03:26.700 --> 00:03:34.440
So there's a, I have heard of a couple of, sites called the wall of superpowers, and

00:03:34.440 --> 00:03:42.580
Python 3 readiness that are two, two pages that list, most popular Python packages and

00:03:42.580 --> 00:03:44.720
how much of them are Python 3 ready.

00:03:44.720 --> 00:03:51.500
And I, the numbers are higher than I expected actually 187 out of 200 on one of them and 341

00:03:51.500 --> 00:03:53.580
out of 360 on the other.

00:03:53.580 --> 00:03:59.280
And I think this is important because a lot of people, tried to switch to Python 3 a long

00:03:59.280 --> 00:03:59.820
time ago.

00:03:59.820 --> 00:04:05.000
And one of their favorite packages wasn't supported, but I, they, it probably is now.

00:04:05.000 --> 00:04:06.860
So, check those out.

00:04:06.860 --> 00:04:14.160
And then this, person also, wrote up an IPython notebook and had some statistics,

00:04:14.160 --> 00:04:17.820
um, to pull out, not just the most popular, but everything.

00:04:17.820 --> 00:04:24.840
He pulled everything on PyPy that was, listed as stable and had at least one release

00:04:24.840 --> 00:04:25.780
in 2016.

00:04:26.180 --> 00:04:29.180
That was 6,000 packages of those.

00:04:29.180 --> 00:04:35.500
So there must be a lot of like packages on PyPy that are not, or PyPI that are not, updated

00:04:35.500 --> 00:04:36.140
very often.

00:04:36.140 --> 00:04:43.360
But, yeah, I really like it when the statistics do some basic filtering, like nobody cares whether

00:04:43.360 --> 00:04:48.400
that package that almost no one's using hasn't been updated for 10 years supports Python 2 or

00:04:48.400 --> 00:04:49.160
Python 3.

00:04:49.160 --> 00:04:49.720
Yeah.

00:04:49.720 --> 00:04:50.440
Yeah.

00:04:50.440 --> 00:04:50.660
Yeah.

00:04:50.660 --> 00:04:56.280
But of the, of, of the, what he calls stable and active, I was interesting.

00:04:56.280 --> 00:05:00.280
There's 14% of those don't even cover, Python 2.

00:05:00.280 --> 00:05:07.900
They're Python 3 only packages and, 28%, which is higher than I would hope, but 28%

00:05:07.900 --> 00:05:09.020
are Python 2 only.

00:05:09.020 --> 00:05:15.280
Um, but the author estimates that a lot of those could easily be switched if they're really important

00:05:15.280 --> 00:05:15.780
to you.

00:05:15.780 --> 00:05:21.500
And, but the, he does list out, he has a list of all the ones that he calls sticky,

00:05:21.500 --> 00:05:25.040
the one 25% of the, of 28.

00:05:25.040 --> 00:05:25.980
So I don't know.

00:05:25.980 --> 00:05:28.180
I'm not, that's not very many.

00:05:28.180 --> 00:05:29.960
14, 7% total.

00:05:29.960 --> 00:05:30.420
Yeah.

00:05:30.420 --> 00:05:31.380
Math on the fly.

00:05:31.480 --> 00:05:37.140
Uh, anyway, of, those sticky packages that may be a problem for you, but I, you know,

00:05:37.140 --> 00:05:40.500
I, I had a, I was in one of those camps a year ago.

00:05:40.500 --> 00:05:45.680
I tried to switch our testing to Python 3 and there was a package that I needed that wasn't

00:05:45.680 --> 00:05:47.440
switched and it is now.

00:05:47.440 --> 00:05:49.260
So I don't have that excuse anymore.

00:05:49.260 --> 00:05:49.940
Yeah.

00:05:49.940 --> 00:05:50.660
That's really great.

00:05:50.660 --> 00:05:51.920
I love the wall of superpowers.

00:05:51.920 --> 00:05:56.720
This article is really, interesting and I think it makes a, it's a good argument and

00:05:56.720 --> 00:05:58.680
it's data driven, which is cool.

00:05:58.780 --> 00:06:01.780
In fact, like you said, you can get the IPython notebook for it.

00:06:01.780 --> 00:06:08.860
My final thought on Python moving from legacy Python to Python 3.6, the new Python is you

00:06:08.860 --> 00:06:12.640
get a lot of benefit in this release just by installing and running on it.

00:06:12.640 --> 00:06:15.480
If you don't touch your code at all, cause there's a lot of memory and performance speed

00:06:15.480 --> 00:06:15.640
up.

00:06:15.640 --> 00:06:16.520
So that's really cool.

00:06:16.520 --> 00:06:17.300
Yeah.

00:06:17.300 --> 00:06:24.060
Um, and it's the, instead of walls of, and the wall of superpowers, maybe we could look

00:06:24.060 --> 00:06:25.220
at maybe roads and bridges.

00:06:25.220 --> 00:06:26.420
Yeah.

00:06:26.660 --> 00:06:28.740
There's walls, there's roads and there's bridges.

00:06:28.740 --> 00:06:31.700
And, you know, I, I don't know how it is in the rest of the world.

00:06:31.700 --> 00:06:36.180
I know in Germany, it's not quite this way, but in the U S we tend to neglect our physical

00:06:36.180 --> 00:06:37.900
infrastructure, right?

00:06:37.900 --> 00:06:42.220
Like I had to swerve the other day cause there's a huge pothole on the road and so on.

00:06:42.220 --> 00:06:47.880
And you know, it's a, it's a problem, but I think the real problem for us these days is

00:06:47.880 --> 00:06:49.520
actual digital infrastructure.

00:06:49.740 --> 00:06:52.520
So there's a really great article, not an article.

00:06:52.520 --> 00:06:54.680
It's more like a report or even a book.

00:06:54.680 --> 00:06:59.700
It's like 150 pages called roads and bridges, the unseen labor behind our digital infrastructure.

00:06:59.700 --> 00:07:02.060
It's written by Nadia egg ball.

00:07:02.060 --> 00:07:03.820
And she did a really good job.

00:07:03.820 --> 00:07:05.900
It's, it's a new relatively new report.

00:07:05.900 --> 00:07:06.700
It came out in July.

00:07:07.160 --> 00:07:13.440
It's basically talks about open source and mostly open source infrastructure, not open

00:07:13.440 --> 00:07:14.340
source projects.

00:07:14.340 --> 00:07:22.660
So not, not necessarily things like Django, but more things like PI PI and PIP, right?

00:07:22.660 --> 00:07:28.000
The underlying foundation, things like, open SSL that everybody builds on top of.

00:07:28.220 --> 00:07:32.680
And it turns out there's actually a really big problem across the board.

00:07:32.680 --> 00:07:36.600
Like if you think physical infrastructure is neglected, you should see the digital infrastructure.

00:07:36.600 --> 00:07:37.800
All right.

00:07:37.800 --> 00:07:42.340
So I actually did a whole session with this, some of the folks from the Python community,

00:07:42.340 --> 00:07:47.840
Eric Holther from read the docs, Donald stuff from PI PI on talk Python in episode 84.

00:07:47.840 --> 00:07:49.560
And we talked about this a little bit.

00:07:49.560 --> 00:07:55.380
Basically this, this report goes through and outlines all the challenges that they see for

00:07:55.380 --> 00:08:00.960
supporting things like PI PI, supporting things like open SSL.

00:08:00.960 --> 00:08:07.460
And they said that until heart bleed, you know, heart bleed was that really serious bug that

00:08:07.460 --> 00:08:12.560
you could sort of send a bunch of requests to a server running open SSL that was vulnerable.

00:08:12.560 --> 00:08:17.100
And you could actually get it to leak, information, unencrypted information back out.

00:08:17.100 --> 00:08:21.580
So it's still, until then it was like, that thing was just barely coming along.

00:08:21.580 --> 00:08:23.200
Like there's almost nobody that worked on it.

00:08:23.200 --> 00:08:28.880
There's like one guy or a couple of guys that very, very short term were able to work on

00:08:28.880 --> 00:08:29.000
it.

00:08:29.000 --> 00:08:33.880
And two thirds of all the web servers use that for their communication.

00:08:33.880 --> 00:08:35.380
And think about that.

00:08:35.380 --> 00:08:39.260
Another example, they talked about Ruby gems, the website done by volunteers.

00:08:39.260 --> 00:08:41.500
Somebody had found some kind of vulnerability in it.

00:08:41.580 --> 00:08:45.560
And the, the people who had supported it, they're like, all right, we'll fix this on the weekend.

00:08:45.560 --> 00:08:46.640
Cause we have jobs.

00:08:46.640 --> 00:08:48.040
We can't work on this infrastructure.

00:08:48.040 --> 00:08:50.600
And like, I mean, that's like pip to Ruby, right?

00:08:50.600 --> 00:08:51.340
It's really important.

00:08:51.340 --> 00:08:56.180
And it turned out it got hacked and taken down before the weekend.

00:08:56.180 --> 00:09:01.300
And so people had to like schedule vacation days so they could get, get it back running.

00:09:01.760 --> 00:09:04.420
One more example is PyPI itself.

00:09:04.420 --> 00:09:07.540
And, you know, Donald stuffed works on that.

00:09:07.540 --> 00:09:09.500
He was employed by HP.

00:09:09.500 --> 00:09:15.260
HP went through a bunch of layoffs and not even really knowingly, I think took out his position.

00:09:15.260 --> 00:09:17.640
Now there's Donald's doing that in spare time.

00:09:17.640 --> 00:09:19.360
Who else supports PyPI?

00:09:19.360 --> 00:09:25.800
They do 400 terabytes of traffic a month and it costs almost $40,000 to keep pip running.

00:09:25.800 --> 00:09:28.180
So you can say pip install a thing.

00:09:28.180 --> 00:09:30.320
That's like $40,000 worth of infrastructure.

00:09:30.320 --> 00:09:34.320
And there's only a few baskets that are supporting that thing.

00:09:34.320 --> 00:09:35.500
It's, it's, it's quite precarious.

00:09:35.500 --> 00:09:39.540
So I wanted to bring up roads and bridges, the unseen labor behind our digital infrastructure.

00:09:39.540 --> 00:09:45.520
This report, I think people who care about this will find this very well written, very interesting and lots of neat stories.

00:09:45.520 --> 00:09:46.940
Well, even if they're depressing.

00:09:46.940 --> 00:09:48.640
Yeah.

00:09:49.060 --> 00:09:50.020
It is interesting.

00:09:50.020 --> 00:09:51.640
Thanks for bringing that up.

00:09:51.640 --> 00:09:52.400
Yeah, absolutely.

00:09:52.400 --> 00:09:56.240
I threw a bunch of, a bunch of little excerpts that I got from, from the article.

00:09:56.240 --> 00:09:58.720
People can flip through and see if they're interested in that.

00:09:58.720 --> 00:10:01.520
Speaking of, things that we take for granted.

00:10:01.520 --> 00:10:06.140
I know that a lot of, there's some libraries out there that people use all the time.

00:10:06.140 --> 00:10:11.500
And if a library is used by a lot of people, making changes to it can be a little scary.

00:10:11.500 --> 00:10:18.760
RC2 of, matplotlib 2.0.0 came out in December and Thomas Caswell

00:10:18.760 --> 00:10:23.420
is, I don't know if he's the only person supporting it, but he's one of the main developers.

00:10:23.940 --> 00:10:32.820
And, he was telling me that there's, it's been, one of the changes in this is, some of the changes in the default style.

00:10:32.820 --> 00:10:43.620
So the default, if you just, if you're not styling your plots, specifically, and you're just going with whatever matplotlib, comes up with those are going to change.

00:10:43.780 --> 00:10:47.940
And, that took 10 years in the making apparently, to change that.

00:10:47.940 --> 00:10:50.700
So this, this library has been around for a while anyway.

00:10:50.700 --> 00:10:52.500
So he would love to have feedback.

00:10:52.500 --> 00:10:57.920
So we've got a list of, in our show notes, there's a list of, changes.

00:10:58.300 --> 00:11:00.120
There's a list of releases, list of changes.

00:11:00.120 --> 00:11:04.200
And, 2.0.0 is coming out, soon ish.

00:11:04.200 --> 00:11:12.240
Uh, he's not sure when, but he'd like to have people try it out and see if any of the default styles or, what do they, what they think of them?

00:11:12.240 --> 00:11:12.840
He wants feedback.

00:11:12.840 --> 00:11:23.500
So, well, I have a little feedback for them that one of the posts you, linked to in the show notes is, is basically a set of pictures, old version, new version with default styling almost universally.

00:11:23.500 --> 00:11:24.600
They look better to me.

00:11:24.600 --> 00:11:25.600
They look more modern.

00:11:25.600 --> 00:11:29.940
Um, they don't look like here's a cheap unstyled sort of thing.

00:11:29.940 --> 00:11:30.780
I'm just going to drop in.

00:11:30.780 --> 00:11:33.920
They actually look like something that you'd be really excited to share.

00:11:33.920 --> 00:11:34.280
Right.

00:11:34.280 --> 00:11:35.880
So thumbs up for me.

00:11:35.880 --> 00:11:37.040
Yeah, I thought so too.

00:11:37.040 --> 00:11:42.720
And I thought, I, I would, I didn't even think about how hard it would be to, to change something under.

00:11:42.720 --> 00:11:45.340
You know, change the rug out of a lot of people.

00:11:45.340 --> 00:11:49.740
And, you know, a lot of people don't follow him or follow, Python.

00:11:49.740 --> 00:11:52.720
So I'm glad we're bringing this up to try to get people to go check it out.

00:11:52.720 --> 00:11:53.700
Yeah, I totally agree.

00:11:53.700 --> 00:11:55.440
So it's, it's easy to look through it.

00:11:55.440 --> 00:11:58.960
If you care about Matt Plotlib, get out there and give them some feedback while you can.

00:11:58.960 --> 00:12:01.500
Hey, before we move on, let me tell you about Rollbar.

00:12:01.500 --> 00:12:03.120
Oh, please tell me about Rollbar.

00:12:03.120 --> 00:12:08.820
I recently sent out an email, like a newsletter email to a bunch of people taking some of my courses.

00:12:09.440 --> 00:12:12.760
And it turned out that I had typed in a URL incorrectly.

00:12:12.760 --> 00:12:16.140
Like, so it was like, click here to launch this, this video.

00:12:16.140 --> 00:12:19.200
It was like player slash lecture slash one, two, three, four.

00:12:19.200 --> 00:12:23.200
Well, some like non-numerical number or a letter got in there.

00:12:23.200 --> 00:12:26.560
My web app was trying to parse that as an integer.

00:12:27.080 --> 00:12:29.660
And so I hit send on this email to like thousands of people.

00:12:29.660 --> 00:12:35.800
And then all of a sudden my phone starts going beep, beep, beep, beep, beep, crash, crash, crash, error in your website.

00:12:35.800 --> 00:12:37.240
And I'm like, what the heck is this?

00:12:37.240 --> 00:12:39.400
I pull it up and like, I immediately see what's going on.

00:12:39.400 --> 00:12:40.180
I see the stack trace.

00:12:40.180 --> 00:12:45.360
I open up my, my, open up PyCharm, quickly change it, do a push to deploy.

00:12:45.360 --> 00:12:49.660
And within five minutes of sending the email, nobody ever sent me a message.

00:12:49.660 --> 00:12:51.100
I found the error and fixed it.

00:12:51.100 --> 00:12:53.120
And the rest of the people that opened the email didn't crash.

00:12:53.460 --> 00:12:54.320
And that was from Rollbar.

00:12:54.320 --> 00:13:00.760
And if, if you, if you guys want that same type of behavior, that same type of safety net, you can get it at rollbar.com slash Python bytes.

00:13:00.760 --> 00:13:01.780
That's awesome.

00:13:01.780 --> 00:13:05.680
I wonder how long you would have figured out on their own without that.

00:13:05.680 --> 00:13:08.480
I would have never known until somebody complained.

00:13:08.480 --> 00:13:10.700
Like, so it was, it was really good.

00:13:10.700 --> 00:13:13.980
I felt bad about it, but it was good that at least I got it fixed right away.

00:13:13.980 --> 00:13:14.240
Yeah.

00:13:14.240 --> 00:13:14.520
Awesome.

00:13:14.520 --> 00:13:19.760
One of the things I'm a huge fan of is MongoDB and document databases.

00:13:20.040 --> 00:13:28.000
I really think document databases are like this perfect sweet spot between performance, maintainability, ease of use, and relational integrity.

00:13:28.000 --> 00:13:30.840
There's a really great article I want to point out.

00:13:30.840 --> 00:13:42.360
If you're interested in MongoDB or document databases in general and Python and you want to get started, the guys over at RealPython, Michael Herman, wrote an article called Introduction to MongoDB and Python.

00:13:42.900 --> 00:13:45.300
They talk about what's the difference between SQL and NoSQL.

00:13:45.300 --> 00:13:51.320
They talk about the primary way to talk to the database through PyMongo, like inserting and querying data.

00:13:51.320 --> 00:13:53.340
And they also talk about this thing called Mongo Engine.

00:13:53.340 --> 00:13:55.560
Mongo Engine is like the SQLAlchemy.

00:13:55.560 --> 00:14:01.840
You create classes, you put in constraints and defaults, and then you map those classes to documents in your database.

00:14:01.840 --> 00:14:02.820
Yeah.

00:14:02.820 --> 00:14:03.820
I'm really excited about this.

00:14:03.820 --> 00:14:06.440
I'm trying to use PyMongo on one of my projects.

00:14:06.440 --> 00:14:07.760
So this is good.

00:14:08.040 --> 00:14:08.740
Yeah, it's definitely good.

00:14:08.740 --> 00:14:10.320
PyMongo is pretty sweet.

00:14:10.320 --> 00:14:12.400
MongoDB is easy to set up and use.

00:14:12.400 --> 00:14:13.100
It's open source.

00:14:13.100 --> 00:14:14.040
So that's all good.

00:14:14.040 --> 00:14:18.320
I actually did a one and a half hour presentation at this conference in London called Software Architect.

00:14:18.320 --> 00:14:19.920
And they recorded it and put it up.

00:14:19.920 --> 00:14:21.780
And it was basically the same stuff.

00:14:21.780 --> 00:14:27.020
So I put a link in the show notes as well to this thing I call Applied NoSQL with MongoDB and Python.

00:14:27.340 --> 00:14:31.820
So if people want a video version of mostly the same topics, they can check that out as well.

00:14:31.820 --> 00:14:36.580
And actually from you, I learned about TinyDB, I think, on one of your podcasts.

00:14:36.580 --> 00:14:37.340
Oh, yeah.

00:14:37.340 --> 00:14:38.140
TinyDB is awesome.

00:14:38.140 --> 00:14:38.460
Yeah.

00:14:38.460 --> 00:14:39.380
So that was neat too.

00:14:39.380 --> 00:14:39.780
Yeah.

00:14:39.780 --> 00:14:40.700
Also Document Database.

00:14:40.700 --> 00:14:43.480
You know, I love things that are for humans.

00:14:43.480 --> 00:14:44.600
Yeah.

00:14:44.600 --> 00:14:49.620
Next up, we've got an article introducing Maya, Date Times for Humans.

00:14:49.620 --> 00:14:53.520
And most of the for humans stuff comes from Kenneth Reitz.

00:14:53.520 --> 00:14:56.000
Do you know how to pronounce his name?

00:14:56.000 --> 00:14:57.520
I've been saying Reitz.

00:14:57.520 --> 00:14:58.860
I think that's right.

00:14:58.860 --> 00:15:00.080
If that was like a German reading.

00:15:00.080 --> 00:15:01.480
But if it's Reitz, I'm sorry, Kenneth.

00:15:01.480 --> 00:15:04.320
So, Kenneth, if you're listening, please let us know.

00:15:04.320 --> 00:15:09.480
Or I could, I guess, look at any talk that he's given and try to get that.

00:15:09.480 --> 00:15:10.540
But anyway.

00:15:11.620 --> 00:15:20.280
But the date times seem like something that's just easy until you actually try to do something that's not.

00:15:20.280 --> 00:15:26.000
It quickly goes from easy to deal with to hard to deal with very fast.

00:15:26.000 --> 00:15:38.960
And so I'm excited that Kenneth has taken this on and tried to come up with his own library for dealing with date times and date time math and parsing dates and human readable stuff.

00:15:38.960 --> 00:15:40.560
It just sounds exciting.

00:15:40.740 --> 00:15:42.340
And I'm going to give it a try.

00:15:42.340 --> 00:15:43.100
Yeah.

00:15:43.100 --> 00:15:47.020
He has Request, which is the most popular Python package ever.

00:15:47.020 --> 00:15:49.920
Downloaded 7 million times a month, which is insane.

00:15:49.920 --> 00:15:53.800
He has Records, which is like just write SQL for humans sort of thing.

00:15:53.800 --> 00:15:54.820
And now dates.

00:15:54.820 --> 00:15:55.840
Very, very cool stuff.

00:15:55.840 --> 00:15:56.440
Nice work, Kenneth.

00:15:56.440 --> 00:15:57.460
Yeah, definitely.

00:15:57.460 --> 00:16:05.240
And another package that I'm interested in that's coming up is an alternative to Flask or something Flask-like.

00:16:05.240 --> 00:16:10.120
There are more and more reasons to move away from legacy Python to Python.

00:16:10.320 --> 00:16:13.520
Especially Python 3.5 above because of the cool concurrency stuff.

00:16:13.520 --> 00:16:21.500
One of the things that people talk about when they talk about Node.js, which I'm not a huge fan of Node.js, but it does have its benefits.

00:16:21.500 --> 00:16:25.520
It's sort of asynchronous from the start programming model.

00:16:25.920 --> 00:16:33.220
Now, that's been traditionally hard in Python because the WSGI API doesn't really support it super well.

00:16:33.540 --> 00:16:35.680
Frameworks like Flask and Pyramid.

00:16:36.680 --> 00:16:40.960
You can't just write async methods that all of a sudden become async, right?

00:16:40.960 --> 00:16:41.840
There's like too much.

00:16:41.840 --> 00:16:45.180
There's too much in the built-in stack that doesn't understand async.

00:16:45.180 --> 00:16:47.200
This guy, I don't know what his real name is.

00:16:47.200 --> 00:16:48.480
I can just know him as Channel Cat.

00:16:48.980 --> 00:16:54.720
Created this thing called Sanic, which is called a Python 3.5 or higher web server written to go fast.

00:16:54.720 --> 00:16:56.600
It's based on the API of Flask.

00:16:56.600 --> 00:17:02.500
It leverages the async and await functionality of Python 3.5, which I think is really, really cool.

00:17:02.500 --> 00:17:07.820
It also uses the UV loop, which is a really fast asynchronous IO loop for Python 3.

00:17:08.140 --> 00:17:08.800
It's really cool.

00:17:08.800 --> 00:17:17.380
So if I want to create some kind of method, like a view action method sort of thing, just like Flask, I'll say app.route and give it like a URL, so like slash.

00:17:17.380 --> 00:17:21.460
But instead of saying def some method, you say async def some method.

00:17:21.460 --> 00:17:23.700
And you can await throughout your method.

00:17:23.700 --> 00:17:33.840
And all the cool benefits of letting the threads go on to do other work while you're waiting on databases, web services, files, things like that, just happen magically.

00:17:33.840 --> 00:17:36.260
So you can get really good performance numbers.

00:17:36.260 --> 00:17:36.880
Wow.

00:17:36.880 --> 00:17:37.520
Neat.

00:17:37.660 --> 00:17:38.840
Yeah, so it's pretty cool.

00:17:38.840 --> 00:17:44.540
And the fact that it's a Flask, more or less like the Flask API, means you don't have to like start from scratch and learn a totally new thing.

00:17:44.540 --> 00:17:47.560
They actually have some performance numbers compared to other things.

00:17:47.560 --> 00:17:51.800
And they don't have Pyramid in here, which is too bad because Pyramid flies on Python 3.

00:17:51.800 --> 00:18:00.380
But when you think of asynchronous programming in Python, Python web frameworks, typically you would probably come up first with Tornado.

00:18:00.380 --> 00:18:03.260
And they have some tests they did.

00:18:03.340 --> 00:18:11.280
They said, okay, Tornado did like 2,000 requests per second with a 44 second millisecond latency response time, basically.

00:18:11.280 --> 00:18:12.960
I said, okay, well, what about Flask?

00:18:12.960 --> 00:18:14.160
Well, Flask did twice as good.

00:18:14.160 --> 00:18:17.620
So like 5,000 requests a second, 20 millisecond response time.

00:18:17.620 --> 00:18:19.860
Almost double good in both directions.

00:18:20.520 --> 00:18:28.560
The Sanic thing using Python 3 and the UV loop is 33,000 requests per second with a three millisecond response time.

00:18:28.560 --> 00:18:28.960
Wow.

00:18:28.960 --> 00:18:29.580
That's incredible.

00:18:29.580 --> 00:18:31.000
Yeah.

00:18:31.560 --> 00:18:33.320
See, Python's better than legacy Python.

00:18:33.320 --> 00:18:35.340
Yeah, Python, definitely.

00:18:35.340 --> 00:18:37.200
That's really cool.

00:18:37.200 --> 00:18:40.280
So Python 3.5, the async await is a cool programming model.

00:18:40.280 --> 00:18:44.040
And to have this nice web framework to plug in there, this thing's going to go places.

00:18:44.040 --> 00:18:45.560
We're going to be talking about it for a while, I bet.

00:18:45.560 --> 00:18:46.840
Yeah, definitely.

00:18:46.840 --> 00:18:53.320
At some point, I need to talk with you about trying to figure out if I were going to start up a new application.

00:18:54.120 --> 00:18:56.980
Would I care about asynchronous stuff right away?

00:18:56.980 --> 00:18:58.900
Yeah, that's a good question, right?

00:18:58.900 --> 00:19:00.040
Like how much do you really care?

00:19:00.040 --> 00:19:07.500
Because I mean, let's say on the Talk Python website, I think I have 10 processes farmed out to handle the request.

00:19:07.500 --> 00:19:10.440
So like, you know, let's just go with Flask.

00:19:10.440 --> 00:19:14.180
If I were running Flask, 5,000 requests a second, that's 50,000 requests a second.

00:19:14.180 --> 00:19:18.340
That's like a pretty insane amount that I'm going to have to hit before I care, right?

00:19:18.340 --> 00:19:21.160
But still, there are people who care and having that built in.

00:19:21.160 --> 00:19:21.760
That's pretty cool.

00:19:21.760 --> 00:19:22.440
Yeah, definitely.

00:19:22.540 --> 00:19:24.780
I can't believe we're wrapped it up.

00:19:24.780 --> 00:19:26.080
We've got all these done already.

00:19:26.080 --> 00:19:27.200
I know, I know.

00:19:27.200 --> 00:19:29.420
I think we've got a bunch of cool topics.

00:19:29.420 --> 00:19:30.560
I love SanEc.

00:19:30.560 --> 00:19:33.220
I love that Python 3.6 is out.

00:19:33.220 --> 00:19:36.040
And I'm happy to be back and sharing it with everybody.

00:19:36.040 --> 00:19:38.780
It was a nice break, but it's even nicer to be back.

00:19:38.780 --> 00:19:41.580
Yeah, do you have any extra news you want to share with us?

00:19:41.580 --> 00:19:44.380
No, I just stepped away from the computer.

00:19:44.380 --> 00:19:49.640
I went to California, put my toes in the sand, and just kind of forgot about things for a while.

00:19:49.640 --> 00:19:54.060
And came back refreshed and excited to keep doing what I'm doing.

00:19:54.060 --> 00:19:54.620
How about you?

00:19:54.620 --> 00:19:55.880
You're still working on your book, right?

00:19:55.880 --> 00:19:57.640
Definitely, and I've ramped up the schedule.

00:19:57.640 --> 00:19:59.900
So I spent the Christmas break at the keyboard.

00:20:00.700 --> 00:20:06.660
And I've got, I think, about halfway done with the rough draft approximately.

00:20:06.660 --> 00:20:16.740
But going through the first level editor, I'm still shooting for a beta, at least a beta release by PyCon.

00:20:18.780 --> 00:20:24.180
My goal of getting a physical copy by PyCon seems actually insane right now.

00:20:24.180 --> 00:20:26.820
So, but that's what I'm up to.

00:20:26.820 --> 00:20:27.200
You can do it.

00:20:27.200 --> 00:20:28.240
We're all rooting for you, Brian.

00:20:28.240 --> 00:20:28.740
You can do it.

00:20:28.740 --> 00:20:31.820
And a whole bunch of test and code episodes coming up.

00:20:31.820 --> 00:20:35.980
I've got one interview recorded and about four interviews scheduled.

00:20:35.980 --> 00:20:37.820
So these will keep going.

00:20:37.820 --> 00:20:38.700
I have not quit.

00:20:38.700 --> 00:20:39.300
All right.

00:20:39.300 --> 00:20:39.620
Awesome.

00:20:39.620 --> 00:20:40.600
Glad to hear those are coming.

00:20:40.600 --> 00:20:40.980
Yeah.

00:20:40.980 --> 00:20:41.660
All right.

00:20:41.660 --> 00:20:43.160
Well, thanks a lot for talking to me today.

00:20:43.160 --> 00:20:43.920
Yeah, it's been great.

00:20:44.020 --> 00:20:45.260
Thanks for sharing the news with me.

00:20:45.260 --> 00:20:46.300
And we'll see you later.

00:20:46.300 --> 00:20:46.620
Thanks.

00:20:46.620 --> 00:20:49.420
Thank you for listening to Python Bytes.

00:20:49.420 --> 00:20:51.980
Follow the show on Twitter via at Python Bytes.

00:20:51.980 --> 00:20:54.860
That's Python Bytes as in B-Y-T-E-S.

00:20:54.860 --> 00:20:58.260
And get the full show notes at pythonbytes.fm.

00:20:58.260 --> 00:21:02.620
If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:21:02.620 --> 00:21:05.340
We're always on the lookout for sharing something cool.

00:21:05.340 --> 00:21:08.720
On behalf of myself and Brian Okken, this is Michael Kennedy.

00:21:08.720 --> 00:21:12.360
Thank you for listening and sharing this podcast with your friends and colleagues.

