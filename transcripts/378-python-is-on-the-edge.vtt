WEBVTT

00:00:00.000 --> 00:00:02.480
>> Hello and welcome to Python Bytes,

00:00:02.480 --> 00:00:06.800
where we deliver Python news and headlines directly to your earbuds.

00:00:06.800 --> 00:00:08.780
This is episode 378,

00:00:08.780 --> 00:00:12.920
recorded April 9th, 2024.

00:00:12.920 --> 00:00:14.120
I'm Michael Kennedy.

00:00:14.120 --> 00:00:15.320
>> I'm Brian Aukin.

00:00:15.320 --> 00:00:18.680
>> You can follow us over on Mastodon.

00:00:18.680 --> 00:00:20.960
We're all on Fossodon, @brianaukin,

00:00:20.960 --> 00:00:22.800
@mkennedy, and @pythonbytes.

00:00:22.800 --> 00:00:23.880
We'd love to talk to you over there.

00:00:23.880 --> 00:00:26.040
We're also on X Twitter,

00:00:26.040 --> 00:00:27.560
if you want to be there as well,

00:00:27.560 --> 00:00:30.760
but we probably spend a little more time on Mastodon these days.

00:00:30.760 --> 00:00:33.600
Support the show by supporting our work.

00:00:33.600 --> 00:00:36.640
We have obviously a bunch of courses that Talk Python Training,

00:00:36.640 --> 00:00:38.400
Brian's complete pytest course,

00:00:38.400 --> 00:00:39.840
and the Patreon as well.

00:00:39.840 --> 00:00:41.440
Be part of the live show if you wish.

00:00:41.440 --> 00:00:42.960
You can see the video version.

00:00:42.960 --> 00:00:44.160
Absolutely not required,

00:00:44.160 --> 00:00:47.320
but always awesome to have people in the audience to give it

00:00:47.320 --> 00:00:50.320
a little bit more of multiple perspectives.

00:00:50.320 --> 00:00:52.520
We'll get some of that coming on in a second.

00:00:52.520 --> 00:00:55.480
You can check that out at pythonbytes.fm/live,

00:00:55.480 --> 00:00:58.920
usually Tuesdays at 10 AM.

00:00:58.920 --> 00:01:00.400
That's specific time.

00:01:00.400 --> 00:01:05.920
Finally, if you want an artisanal handcrafted digest of what we talk about,

00:01:05.920 --> 00:01:07.880
sent you an e-mail form,

00:01:07.880 --> 00:01:09.120
even if you don't listen,

00:01:09.120 --> 00:01:12.200
well, head over to the website pythonbytes.fm,

00:01:12.200 --> 00:01:15.560
click "Newsletter" right in the middle and enter your e-mail address.

00:01:15.560 --> 00:01:18.400
We will not share it or do other nefarious things.

00:01:18.400 --> 00:01:22.480
We just want to be able to contact you and have a chat if you wish.

00:01:22.480 --> 00:01:26.920
Well, Brian will be sending out something cool to everyone this week as usual.

00:01:26.920 --> 00:01:30.360
Brian, do you have health news or something you got to share?

00:01:30.360 --> 00:01:31.640
What's going on here, man?

00:01:31.640 --> 00:01:35.000
>> Well, I've found a pacemaker.

00:01:35.000 --> 00:01:35.880
>> Okay.

00:01:35.880 --> 00:01:37.480
>> My ticker is doing good.

00:01:37.480 --> 00:01:39.040
No problems with that.

00:01:39.040 --> 00:01:43.160
But you can control your heart with Python.

00:01:43.160 --> 00:01:44.040
>> Okay.

00:01:44.040 --> 00:01:46.840
>> Actually, you can't control your heart yet.

00:01:46.840 --> 00:01:49.160
Actually, I don't know if you can.

00:01:49.160 --> 00:01:55.720
But I ran across a project from Brandon Rohr called Pacemaker.

00:01:55.720 --> 00:01:58.040
What this does, it's not controlling your heart,

00:01:58.040 --> 00:02:02.520
it's controlling time per iteration loop.

00:02:02.520 --> 00:02:06.520
I don't know if this has anything to do with UV or not,

00:02:06.520 --> 00:02:09.200
but one of the things that UV has brought us is

00:02:09.200 --> 00:02:12.800
really fast installing of lots of packages if you have a lot.

00:02:12.800 --> 00:02:17.880
Why not? This is a small package.

00:02:17.880 --> 00:02:22.400
This is in Brandon's own words on the read me.

00:02:22.400 --> 00:02:24.280
I think I saw this here.

00:02:24.280 --> 00:02:31.640
It is essentially, it's a glorified snippet.

00:02:31.640 --> 00:02:35.560
Instead of a snippet, he wrote a package, which I love this.

00:02:35.560 --> 00:02:37.320
I'm taking a look at it.

00:02:37.320 --> 00:02:38.520
It's a small package.

00:02:38.520 --> 00:02:41.520
Good example though for how to do a package.

00:02:41.520 --> 00:02:44.560
If you take a look at the pyproject.toml,

00:02:44.560 --> 00:02:45.880
it's pretty concise.

00:02:45.880 --> 00:02:48.440
It's using setup tools, which is fine.

00:02:48.440 --> 00:02:52.000
But it shows you how easy it is to put a package together,

00:02:52.000 --> 00:02:53.960
which is pretty fun.

00:02:53.960 --> 00:02:56.720
Also with the code, I was taking a look at the code.

00:02:56.720 --> 00:03:02.240
What this does is not terribly earth shattering,

00:03:02.240 --> 00:03:04.320
but it just sticks around.

00:03:04.320 --> 00:03:05.720
You tell it that you want to,

00:03:05.720 --> 00:03:07.840
it's like a metronome thing.

00:03:07.840 --> 00:03:10.500
You've got some code that you want to run,

00:03:10.500 --> 00:03:12.360
and here's an example.

00:03:12.360 --> 00:03:15.440
You just say pacemaker beat,

00:03:15.440 --> 00:03:17.280
and it waits.

00:03:17.280 --> 00:03:20.240
It's a busy wait or it does a sleep or something like that.

00:03:20.240 --> 00:03:24.600
Yeah, sleep. But it sleeps and then comes back alive,

00:03:24.600 --> 00:03:26.160
does its thing, and then goes back.

00:03:26.160 --> 00:03:27.480
You can have it be,

00:03:27.480 --> 00:03:28.800
like in this example,

00:03:28.800 --> 00:03:32.000
like does a beat for 100 times.

00:03:32.000 --> 00:03:35.600
This is important in a lot of different types of code,

00:03:35.600 --> 00:03:37.920
a lot of monitoring code, a lot of other things.

00:03:37.920 --> 00:03:41.240
Busy waits aren't necessarily always the greatest,

00:03:41.240 --> 00:03:43.240
but in a lot of cases, it works great.

00:03:43.240 --> 00:03:45.200
The thing that I wanted to point out about this,

00:03:45.200 --> 00:03:46.560
there's a few things that I love about

00:03:46.560 --> 00:03:48.440
this project or just wanted to point out.

00:03:48.440 --> 00:03:51.560
Really great documentation even for a small project.

00:03:51.560 --> 00:03:54.760
Also, I had forgot about time monotonic.

00:03:54.760 --> 00:04:00.400
This is using time monotonic when it does the time comparisons.

00:04:00.400 --> 00:04:02.640
There's a couple of times of timestamps,

00:04:02.640 --> 00:04:05.200
types of timestamps, and monotonic,

00:04:05.200 --> 00:04:07.040
and then there's a monotonic nanoseconds.

00:04:07.040 --> 00:04:09.160
If you really want to do really tight loops,

00:04:09.160 --> 00:04:11.080
you could modify it for that.

00:04:11.080 --> 00:04:14.320
The thing that monotonic does is it makes

00:04:14.320 --> 00:04:16.440
sure that all time deltas are positive.

00:04:16.440 --> 00:04:19.800
Even if something happens,

00:04:19.800 --> 00:04:25.240
like you change your system clock between timestamps,

00:04:25.240 --> 00:04:29.320
it'll still do it correctly so that it is monotonically.

00:04:29.320 --> 00:04:31.000
>> That's interesting.

00:04:31.000 --> 00:04:33.120
>> Another thing could be,

00:04:33.120 --> 00:04:34.920
even you don't change it,

00:04:34.920 --> 00:04:37.400
but we all have our clocks set to auto.

00:04:37.400 --> 00:04:37.720
>> Yeah.

00:04:37.720 --> 00:04:40.800
>> Adjust, and it could come online and auto adjust or something.

00:04:40.800 --> 00:04:43.360
>> Yeah. That would be weird if suddenly,

00:04:43.360 --> 00:04:48.960
especially with this project where one of the things it does,

00:04:48.960 --> 00:04:50.360
and he warns about this,

00:04:50.360 --> 00:04:54.440
is, sleeps aren't exact science.

00:04:54.440 --> 00:04:58.320
This isn't a real-time, especially on non-real-time operating systems,

00:04:58.320 --> 00:05:01.360
but I don't think Python is even a real-time thing.

00:05:01.360 --> 00:05:04.520
It's an approximation for how long it's going to sleep,

00:05:04.520 --> 00:05:06.000
but it tries to correct it.

00:05:06.000 --> 00:05:08.280
If you slept too long,

00:05:08.280 --> 00:05:11.540
it tries to do more events so that on average,

00:05:11.540 --> 00:05:16.940
you get the average amount of times you're running be correct.

00:05:16.940 --> 00:05:19.400
It's a cool library, check it out.

00:05:19.400 --> 00:05:22.120
A couple of things I wanted to point out about it.

00:05:22.120 --> 00:05:24.520
One is the cool use of monotonic.

00:05:24.520 --> 00:05:27.480
The other one is a good read-me documentation,

00:05:27.480 --> 00:05:28.680
even for a small thing.

00:05:28.680 --> 00:05:31.680
But there's no tests.

00:05:31.680 --> 00:05:33.280
Brandon, come on.

00:05:33.280 --> 00:05:37.840
Anyway, actually, there's a couple of things around this.

00:05:37.840 --> 00:05:40.520
I don't think that people should stop from

00:05:40.520 --> 00:05:43.460
putting a code online just because they don't have tests yet.

00:05:43.460 --> 00:05:46.240
It might be that somebody could contribute and add tests.

00:05:46.240 --> 00:05:48.600
It also might be that for you,

00:05:48.600 --> 00:05:50.240
if you're using this all the time,

00:05:50.240 --> 00:05:52.080
if Brandon uses this all the time,

00:05:52.080 --> 00:05:55.760
the tests are covered by the calling code.

00:05:55.760 --> 00:05:58.040
You're using this and you're covering it.

00:05:58.040 --> 00:06:01.120
I guess I want to point out to everybody,

00:06:01.120 --> 00:06:03.480
for any library you're using,

00:06:03.480 --> 00:06:05.560
you probably should have tests that cover

00:06:05.560 --> 00:06:08.000
the part of the library that you depend on,

00:06:08.000 --> 00:06:09.720
even if they do have tests.

00:06:09.720 --> 00:06:12.200
This one doesn't, so buyer beware.

00:06:12.200 --> 00:06:13.520
But even if they do,

00:06:13.520 --> 00:06:15.280
you probably should make sure that it is

00:06:15.280 --> 00:06:17.880
really working the way you think it's working.

00:06:17.880 --> 00:06:21.640
>> Sometimes it's just hard to have meaningful tests.

00:06:21.640 --> 00:06:25.840
A while ago, I released that Umami Python event library,

00:06:25.840 --> 00:06:27.560
for the analytics tracking.

00:06:27.560 --> 00:06:30.720
All it does is serialize

00:06:30.720 --> 00:06:34.240
the messages that come to it from the Umami API.

00:06:34.240 --> 00:06:37.680
I can test what my perception of the API is.

00:06:37.680 --> 00:06:43.360
But the real danger is that that API changes in some way or another.

00:06:43.360 --> 00:06:47.400
It's just 90 percent of the fragility is outside of,

00:06:47.400 --> 00:06:48.560
if you mock out all that stuff,

00:06:48.560 --> 00:06:50.880
then well, you're just testing your view,

00:06:50.880 --> 00:06:53.320
which hopefully is already mostly encoded.

00:06:53.320 --> 00:06:54.680
It's not completely useless,

00:06:54.680 --> 00:06:57.960
but there's certain things that are just tricky to get.

00:06:57.960 --> 00:07:02.600
>> Right. Testing isn't necessarily always automated testing.

00:07:02.600 --> 00:07:04.920
It could be that you're using it,

00:07:04.920 --> 00:07:07.320
the Umami API that you're using,

00:07:07.320 --> 00:07:10.920
it's you're using it so you'll know when it breaks.

00:07:10.920 --> 00:07:17.520
Other things are like your use of it will break or the calling code.

00:07:17.520 --> 00:07:19.440
I don't think that people should,

00:07:19.440 --> 00:07:20.840
especially with the internal stuff,

00:07:20.840 --> 00:07:22.920
maybe on PyPI, maybe we should have a little bit,

00:07:22.920 --> 00:07:25.640
things eventually should have tests probably.

00:07:25.640 --> 00:07:29.000
But for internal projects where you're sharing code,

00:07:29.000 --> 00:07:32.480
it's better to package and share code than to not share code.

00:07:32.480 --> 00:07:35.000
If writing testers is what's stopping you

00:07:35.000 --> 00:07:37.440
from putting it in a central repository,

00:07:37.440 --> 00:07:38.840
don't let that stop you.

00:07:38.840 --> 00:07:41.400
It's better than just, I mean, we have snippets.

00:07:41.400 --> 00:07:42.880
Like he said, it's a glorified snippet,

00:07:42.880 --> 00:07:44.560
so why not package it?

00:07:44.560 --> 00:07:46.880
>> Yeah. Very nice. I like the monotonic.

00:07:46.880 --> 00:07:48.080
That's news to me.

00:07:48.080 --> 00:07:49.760
I hadn't paid attention to that before.

00:07:49.760 --> 00:07:53.920
>> Yeah. It's cool. I want to try the nanosecond monotonic.

00:07:53.920 --> 00:07:57.040
>> Other stuff that people might want to pay attention to,

00:07:57.040 --> 00:08:02.720
and this is not to drum up a bunch of fear and concern so much.

00:08:02.720 --> 00:08:04.720
It's not huge news in that regard to people.

00:08:04.720 --> 00:08:08.840
But it's more to just put out there what the PyPA,

00:08:08.840 --> 00:08:11.760
the Python Packaging Authority folks to deal with.

00:08:11.760 --> 00:08:13.360
Kind of say a thanks.

00:08:13.360 --> 00:08:15.600
The news comes to us from Bleeping Computer,

00:08:15.600 --> 00:08:16.920
which usually does pretty good news,

00:08:16.920 --> 00:08:20.080
but this article is pretty vacuous of information.

00:08:20.080 --> 00:08:21.680
But the title says a lot.

00:08:21.680 --> 00:08:27.240
PyPI suspends new user registrations to block malware campaign.

00:08:27.240 --> 00:08:29.480
There's some interesting things in here.

00:08:29.480 --> 00:08:32.560
It basically says, look, when was this?

00:08:32.560 --> 00:08:35.920
This is March 28th, a little bit, a couple of weeks ago.

00:08:35.920 --> 00:08:38.680
PyPI temporarily suspended user registration in the creation of

00:08:38.680 --> 00:08:42.720
new projects to deal with ongoing malware campaign.

00:08:42.720 --> 00:08:46.760
Then it proceeds to tell you what PyPI is basically.

00:08:46.760 --> 00:08:49.480
Then it says, look, there were some problems.

00:08:49.480 --> 00:08:50.760
People are uploading bad stuff,

00:08:50.760 --> 00:08:53.880
but it doesn't tell you, for example, what projects.

00:08:53.880 --> 00:08:56.280
What did the malware do?

00:08:56.280 --> 00:09:01.360
If you jump over to the status.python.org,

00:09:01.360 --> 00:09:04.480
actually that tells you about the status of Python infrastructure,

00:09:04.480 --> 00:09:07.680
which is cool. It says same deal.

00:09:07.680 --> 00:09:09.400
This is the official reporting.

00:09:09.400 --> 00:09:12.200
Did it say how long the event went for?

00:09:12.200 --> 00:09:14.520
No, just that it was a thing.

00:09:14.520 --> 00:09:16.080
I guess if I did math,

00:09:16.080 --> 00:09:17.600
that would be 10 hours,

00:09:17.600 --> 00:09:19.400
about 10 hours, 30 minutes.

00:09:19.400 --> 00:09:23.600
That's a ways. This is the real article you want to read.

00:09:23.600 --> 00:09:25.880
It is over on Medium PyPI is under

00:09:25.880 --> 00:09:27.920
attack project creation and user registration.

00:09:27.920 --> 00:09:30.880
It's been adhered to the details by Yehuda Gelb.

00:09:30.880 --> 00:09:32.600
I hate to link to Medium.

00:09:32.600 --> 00:09:35.320
I hate Medium. I think it's a crummy place.

00:09:35.320 --> 00:09:37.000
I don't know, it just seems gross,

00:09:37.000 --> 00:09:38.480
but they have really good details.

00:09:38.480 --> 00:09:42.360
Basically, this was a typo squatting attack.

00:09:42.360 --> 00:09:46.080
What's interesting, it was a multi-stage attack,

00:09:46.080 --> 00:09:47.840
stealing all sorts of things,

00:09:47.840 --> 00:09:49.720
crypto wallets, obviously.

00:09:49.720 --> 00:09:53.080
But real sketchy is browser cookies.

00:09:53.080 --> 00:09:56.680
You're logged into your bank for a session that's good for 20 minutes.

00:09:56.680 --> 00:09:58.560
If they could grab that and log in as you,

00:09:58.560 --> 00:10:03.280
that might be less good or log into your e-mail and reset stuff and so on.

00:10:03.280 --> 00:10:08.600
What happened is there was a bunch of packages in here somewhere.

00:10:08.600 --> 00:10:09.800
There's the package list.

00:10:09.800 --> 00:10:15.520
You can see these are all about capturing people who, one,

00:10:15.520 --> 00:10:18.760
misspelled things but also just didn't quite understand.

00:10:18.760 --> 00:10:22.200
For example, one of the packages is requirements.txt,

00:10:22.200 --> 00:10:25.480
requirements.txt without the dot or requirements.

00:10:25.480 --> 00:10:27.800
If you say pip install requirements,

00:10:27.800 --> 00:10:32.560
without the dash r or the dot txt, you're getting this.

00:10:32.560 --> 00:10:33.880
There's a bunch of others,

00:10:33.880 --> 00:10:36.280
TensorFlow and Selenium.

00:10:36.280 --> 00:10:40.160
They're all over the requirements business, so it's just everywhere.

00:10:40.160 --> 00:10:45.640
The deal was basically each one of these had a malicious setup.py,

00:10:45.640 --> 00:10:48.640
which is why I think it's interesting to look at.

00:10:48.640 --> 00:10:51.760
Inside the malicious setup.py,

00:10:51.760 --> 00:10:55.880
it encrypted using the cryptography.fairnet library,

00:10:55.880 --> 00:10:58.160
which just listed as a dependency, I imagine.

00:10:58.160 --> 00:11:04.560
It then decrypts some URL that it very lightly.

00:11:04.560 --> 00:11:06.840
It's funny, it's like using little analytics.

00:11:06.840 --> 00:11:11.600
It'll passes the query string of which one hacked me before you get going.

00:11:11.600 --> 00:11:14.680
They download some thing that installs and runs and

00:11:14.680 --> 00:11:17.840
basically installs a backdoor ongoing thing.

00:11:17.840 --> 00:11:19.640
So even if you pip uninstall this,

00:11:19.640 --> 00:11:22.320
there's this thing running that just monitors your system,

00:11:22.320 --> 00:11:24.640
which is not ideal to be honest.

00:11:24.640 --> 00:11:26.280
>> That's not what you want.

00:11:26.280 --> 00:11:28.680
>> No, one does not want this.

00:11:28.680 --> 00:11:30.760
Henry out in the audience says,

00:11:30.760 --> 00:11:32.280
"In addition to all the stuff I said,

00:11:32.280 --> 00:11:35.200
that actually blocked all uploads for a few hours and

00:11:35.200 --> 00:11:38.320
couldn't upload build 1.2.1.

00:11:38.320 --> 00:11:42.200
What a hassle. This is why we can't have nice things. Come on now."

00:11:42.200 --> 00:11:46.440
>> Yeah. I guess there's a lesson here to make sure that

00:11:46.440 --> 00:11:50.000
you're careful when you pip install something because

00:11:50.000 --> 00:11:51.800
even if you catch it and you're like,

00:11:51.800 --> 00:11:54.280
"Oh, that's not what I meant," you may have already done damage.

00:11:54.280 --> 00:11:56.360
Isn't there a way, I don't remember off the top of my head,

00:11:56.360 --> 00:11:58.200
to say pip install but don't run,

00:11:58.200 --> 00:12:00.800
only use wheels, don't allow anything to run?

00:12:00.800 --> 00:12:01.760
>> I don't know.

00:12:01.760 --> 00:12:03.400
>> I'm not sure. I feel like there was.

00:12:03.400 --> 00:12:06.720
Probably some of the audience is going, "Yes, yes, of course.

00:12:06.720 --> 00:12:07.960
How do you not know this?"

00:12:07.960 --> 00:12:10.360
But that doesn't mean this is not going to happen.

00:12:10.360 --> 00:12:14.280
It just means you have to use the code as opposed to

00:12:14.280 --> 00:12:18.680
just the act of installing it or sneaking it into a requirements file somehow.

00:12:18.680 --> 00:12:21.520
Yes, and I knew Henry would come through and say,

00:12:21.520 --> 00:12:24.040
"--only-binary." Indeed, that's it.

00:12:24.040 --> 00:12:27.360
>> Well, they were on top of it.

00:12:27.360 --> 00:12:31.360
The fact that this was completely dealt with within 12 hours is pretty awesome.

00:12:31.360 --> 00:12:33.440
The fact that it has to happen, not so much.

00:12:33.440 --> 00:12:34.280
>> Yeah.

00:12:34.280 --> 00:12:36.240
>> Over to you, Brian.

00:12:36.240 --> 00:12:45.520
>> I guess the world has changed a little bit with UV and other rustified things.

00:12:45.520 --> 00:12:52.160
We have an updated blog post from Hennick,

00:12:52.160 --> 00:13:00.000
Python Project Local Virtual Env Management Redux.

00:13:00.000 --> 00:13:06.320
He's just really talking about all of the tools that he uses around virtual environments.

00:13:06.320 --> 00:13:11.160
I just enjoyed it because it matches my own use quite a bit.

00:13:11.160 --> 00:13:14.760
Some caveats in here that says this is what works for me.

00:13:14.760 --> 00:13:17.480
I'm not necessarily saying you have to use this, of course.

00:13:17.480 --> 00:13:24.440
But it's a good list of how dealing with virtual environments.

00:13:24.440 --> 00:13:26.760
The major thing that happened is UV,

00:13:26.760 --> 00:13:29.480
and it's changed a lot of how we deal with it,

00:13:29.480 --> 00:13:31.760
but it makes things a lot faster.

00:13:31.760 --> 00:13:35.400
Some of the things I thought I want to revisit in here,

00:13:35.400 --> 00:13:37.360
so it's pretty great.

00:13:37.360 --> 00:13:43.280
He's using .venv in each project directory.

00:13:43.280 --> 00:13:44.640
It's close to what I use.

00:13:44.640 --> 00:13:48.760
I use the venv, I just don't use the dot.

00:13:48.760 --> 00:13:50.560
>> I do as well, Brian.

00:13:50.560 --> 00:13:55.360
I know the dot means it's not really important, put it to the side.

00:13:55.360 --> 00:13:58.120
But I love to be able to open up a project in

00:13:58.120 --> 00:14:00.400
Finder or Explorer and look at it and go,

00:14:00.400 --> 00:14:02.320
"All right, this one has a virtual environment.

00:14:02.320 --> 00:14:04.600
This one doesn't, I need to make one."

00:14:04.600 --> 00:14:07.640
I don't want to have to keep like show hidden files,

00:14:07.640 --> 00:14:09.880
hide hidden files over and over.

00:14:09.880 --> 00:14:11.720
While I appreciate the dot,

00:14:11.720 --> 00:14:13.000
I'm 100 percent with you.

00:14:13.000 --> 00:14:18.960
>> Yeah. Direnv, I think I want to revisit this.

00:14:18.960 --> 00:14:21.240
I've tried it a while ago, but I haven't tried it lately.

00:14:21.240 --> 00:14:29.760
Is a way to have an envrc file or .envrc file in your directory,

00:14:29.760 --> 00:14:35.160
and that gets run when you CD into it or something.

00:14:35.160 --> 00:14:39.040
Anyway, I think this is cool stuff, but I don't use it.

00:14:39.040 --> 00:14:40.160
Do you use this, Michael?

00:14:40.160 --> 00:14:43.600
>> No. I love the idea of it, and in practice,

00:14:43.600 --> 00:14:46.920
I just haven't done it now.

00:14:46.920 --> 00:14:49.760
>> There's some cool tricks in here that he's using that

00:14:49.760 --> 00:14:52.680
I want to get back to trying it again.

00:14:52.680 --> 00:14:56.520
I guess thanks, Sanik, for bringing this up so I can take a look again.

00:14:56.520 --> 00:14:59.360
Using Astral's UV over Rai,

00:14:59.360 --> 00:15:01.000
I never went to Rai,

00:15:01.000 --> 00:15:04.160
but it looks like he switched from Rai to UV.

00:15:04.160 --> 00:15:07.480
Python installations, now switch to both,

00:15:07.480 --> 00:15:10.280
just always using python.org downloads

00:15:10.280 --> 00:15:13.280
because they're now universal builds mostly,

00:15:13.280 --> 00:15:15.280
and it just works.

00:15:15.280 --> 00:15:18.880
That's what I've been using also for installing Python.

00:15:18.880 --> 00:15:21.800
Dead snakes for Linux, of course.

00:15:21.800 --> 00:15:24.480
Then there's a mention of Python build

00:15:24.480 --> 00:15:27.680
standalone for various other projects that are needed.

00:15:27.680 --> 00:15:32.880
That's neat. A discussion about unpinned versus pinned packages,

00:15:32.880 --> 00:15:39.360
and then also using a.python version default within a directory.

00:15:39.360 --> 00:15:43.680
The tie-in back to Durenv is cool,

00:15:43.680 --> 00:15:46.880
is he's got some tricks in here.

00:15:46.880 --> 00:15:50.360
If you drop in a.python version default,

00:15:50.360 --> 00:15:57.000
it tells you what version to use by default in a directory,

00:15:57.000 --> 00:15:58.240
and then you check it in so that

00:15:58.240 --> 00:16:00.680
the development environment can be recreated easily,

00:16:00.680 --> 00:16:04.560
and he's got some in VRC that's part of Durenv.

00:16:04.560 --> 00:16:06.680
That is a little snippet that will

00:16:06.680 --> 00:16:09.240
activate it based on which Python you're using,

00:16:09.240 --> 00:16:13.480
using UV, which is a neat little trick to use

00:16:13.480 --> 00:16:18.200
Durenv and Python versions and UV altogether.

00:16:18.200 --> 00:16:20.240
I'll definitely have to try that.

00:16:20.240 --> 00:16:21.320
That's a neat trick.

00:16:21.320 --> 00:16:22.640
>> That's neat.

00:16:22.640 --> 00:16:27.600
>> Using all of this as well helps with GitHub Actions.

00:16:27.600 --> 00:16:30.800
He's describing how to do that as

00:16:30.800 --> 00:16:34.560
input to the setup Python GitHub Action,

00:16:34.560 --> 00:16:36.720
which is, I didn't know you could do this.

00:16:36.720 --> 00:16:40.240
You can say the Python version file and you can just give it

00:16:40.240 --> 00:16:42.000
that Python version default so

00:16:42.000 --> 00:16:44.600
the GitHub Actions uses the right default version.

00:16:44.600 --> 00:16:47.480
This is cool trick. He's got

00:16:47.480 --> 00:16:51.240
some tricks on how to use it with the fish shell.

00:16:51.240 --> 00:16:52.600
I don't use fish,

00:16:52.600 --> 00:16:55.280
but for those fish users, that'd be great.

00:16:55.280 --> 00:16:58.880
The other part that I really enjoyed

00:16:58.880 --> 00:17:01.240
seeing is because of all of this,

00:17:01.240 --> 00:17:03.080
in which version and stuff,

00:17:03.080 --> 00:17:08.280
you can use, he's using the requires Python and PyProjectToml,

00:17:08.280 --> 00:17:10.440
which I'm using for everything now.

00:17:10.440 --> 00:17:13.520
But he has a way,

00:17:13.520 --> 00:17:17.000
a little sed snippet to parse that out of

00:17:17.000 --> 00:17:22.560
the PyProject.toml and pass it into using the GitHub Actions,

00:17:22.560 --> 00:17:25.600
the animal file to pass it to a Docker build.

00:17:25.600 --> 00:17:30.240
But it's grabbing this version of Python so you could use it for

00:17:30.240 --> 00:17:37.560
other things within your GitHub Action or something else,

00:17:37.560 --> 00:17:41.000
or other tool if you needed to pass what Python version to use.

00:17:41.000 --> 00:17:43.720
That's some pretty clever things in here,

00:17:43.720 --> 00:17:45.840
that I, something old,

00:17:45.840 --> 00:17:47.720
something new, some neat tricks.

00:17:47.720 --> 00:17:49.360
>> Yeah, very interesting.

00:17:49.360 --> 00:17:51.000
A lot of stuff to explore.

00:17:51.000 --> 00:17:54.720
Interesting comments in the audience about liking and disliking,

00:17:54.720 --> 00:17:56.520
all the magic, the auto magic.

00:17:56.520 --> 00:17:58.520
>> Well, and it's also another example of,

00:17:58.520 --> 00:18:00.400
I like these posts,

00:18:00.400 --> 00:18:02.560
even for different people just to see,

00:18:02.560 --> 00:18:03.560
this is how I work,

00:18:03.560 --> 00:18:05.280
this is the workflow I use.

00:18:05.280 --> 00:18:08.080
Not necessarily just focusing on one tool,

00:18:08.080 --> 00:18:11.080
but I use all these things together and this is how they work together.

00:18:11.080 --> 00:18:12.440
It's fun to read.

00:18:12.440 --> 00:18:13.960
>> Yeah, absolutely.

00:18:13.960 --> 00:18:15.800
Even if you don't adopt it, it's cool to just see

00:18:15.800 --> 00:18:17.520
the tools and the things you can do.

00:18:17.520 --> 00:18:18.000
>> Yeah.

00:18:18.000 --> 00:18:20.600
>> All right. On to the next one.

00:18:20.600 --> 00:18:23.760
This one is super exciting.

00:18:23.760 --> 00:18:30.000
We need to talk for just a second about Cloudflare and Edge Workers.

00:18:30.000 --> 00:18:32.600
Now, this is just a Cloudflare thing,

00:18:32.600 --> 00:18:37.720
but I think it's sufficiently interesting that it's worth calling out.

00:18:37.720 --> 00:18:41.640
CDNs like Cloudflare, like bunny.net,

00:18:41.640 --> 00:18:43.800
the one that we use and stuff like that,

00:18:43.800 --> 00:18:46.160
have a bunch of what are called POPs,

00:18:46.160 --> 00:18:47.600
points of presence.

00:18:47.600 --> 00:18:49.720
Traditionally, these have been,

00:18:49.720 --> 00:18:52.520
how do I get my files really close to you so they

00:18:52.520 --> 00:18:55.640
feel immediate no matter where you are in the world?

00:18:55.640 --> 00:18:59.040
For example, I don't know about Cloudflare's details like their stats,

00:18:59.040 --> 00:19:00.840
but I know bunny.net has something like

00:19:00.840 --> 00:19:04.640
115 servers that are points of presence throughout the world.

00:19:04.640 --> 00:19:07.960
So if you visit the Python by itself website,

00:19:07.960 --> 00:19:11.080
all the static content like images and CSS and stuff

00:19:11.080 --> 00:19:14.440
are delivered from one of those POPs right by you.

00:19:14.440 --> 00:19:14.960
>> Yeah.

00:19:14.960 --> 00:19:18.400
>> Obviously, the MP3s as well.

00:19:18.400 --> 00:19:23.920
Now, those things have started to have programmable models where in

00:19:23.920 --> 00:19:28.360
addition to just having the content of say a static file near you,

00:19:28.360 --> 00:19:32.040
they'll have some of the logic of the application near you.

00:19:32.040 --> 00:19:34.920
So if you've got like a React front-end that talks to APIs,

00:19:34.920 --> 00:19:38.080
maybe it's only talking just down the street to the point of presence,

00:19:38.080 --> 00:19:41.360
not halfway around the world to New York where our server lives.

00:19:41.360 --> 00:19:44.240
This has traditionally been JavaScript.

00:19:44.240 --> 00:19:47.280
So with that set as the stage,

00:19:47.280 --> 00:19:49.440
Cloudflare has these things called,

00:19:49.440 --> 00:19:51.560
I think they call them web workers.

00:19:51.560 --> 00:19:54.000
Yeah, something like that. We'll see in just a second.

00:19:54.000 --> 00:19:57.360
Those have been traditionally done in JavaScript.

00:19:57.360 --> 00:20:00.000
So there's a whole infrastructure about

00:20:00.000 --> 00:20:01.760
distributed databases and things like that,

00:20:01.760 --> 00:20:04.120
that these workers can work with. It's pretty interesting.

00:20:04.120 --> 00:20:07.480
But the news is Cloudflare announces,

00:20:07.480 --> 00:20:12.320
they're bringing Python to these workers with Pyodide and WebAssembly.

00:20:12.320 --> 00:20:15.320
So now you can start to program these edge devices,

00:20:15.320 --> 00:20:20.120
these points of present things like right near each other with first-class Python support,

00:20:20.120 --> 00:20:25.360
based on all the work of Pyodide and WebAssembly and all those things.

00:20:25.360 --> 00:20:26.280
Isn't that excellent?

00:20:26.280 --> 00:20:27.280
>> It is excellent.

00:20:27.280 --> 00:20:30.760
>> This is a big announcement. I got the Omnivore page pulled up,

00:20:30.760 --> 00:20:33.720
and the read time is 16 minutes.

00:20:33.720 --> 00:20:34.880
We're not going to go through all that.

00:20:34.880 --> 00:20:37.600
So let me just pull out some highlights here.

00:20:37.600 --> 00:20:40.040
So one of the things that's really made this possible,

00:20:40.040 --> 00:20:42.880
made interesting is they've put a huge amount of effort into

00:20:42.880 --> 00:20:47.280
optimizing the runtime for JavaScript to make it work well.

00:20:47.280 --> 00:20:51.240
It's Pyodide's integration with JavaScript for

00:20:51.240 --> 00:20:58.120
that runtime performance implementation side to make this work really well.

00:20:58.120 --> 00:21:02.400
So it says, "Beyond just compile to WebAssembly."

00:21:02.400 --> 00:21:06.680
Each worker is what's called a V8 isolate.

00:21:06.680 --> 00:21:09.040
So it's like a container,

00:21:09.040 --> 00:21:13.720
but just less, just an isolated version of the V8 runtime,

00:21:13.720 --> 00:21:17.480
which is the Chrome's JavaScript engine that also runs WebAssembly.

00:21:17.480 --> 00:21:20.600
So it says, "It's not just as easy as copying over

00:21:20.600 --> 00:21:22.440
the WebAssembly stuff and running it because they have

00:21:22.440 --> 00:21:25.320
thousands of these things running on one server.

00:21:25.320 --> 00:21:29.080
If each one had to do full-on startup for WebAssembly,

00:21:29.080 --> 00:21:30.640
full-on startup for Pyodide,

00:21:30.640 --> 00:21:34.240
which is six megs and takes some delay to get going and so on,

00:21:34.240 --> 00:21:36.560
it wouldn't be practical.

00:21:36.560 --> 00:21:40.360
So they've done all this work to memory snapshot

00:21:40.360 --> 00:21:44.880
an almost running pip installed setup version of this,

00:21:44.880 --> 00:21:47.520
and then deliver it to you upon request.

00:21:47.520 --> 00:21:50.000
So there's a lot of shared memory or shared processing.

00:21:50.000 --> 00:21:51.240
Here's how you write it, Ryan.

00:21:51.240 --> 00:21:53.720
From JavaScript, import response,

00:21:53.720 --> 00:21:55.080
async def on fetch,

00:21:55.080 --> 00:21:58.280
then do your Python and return some response.

00:21:58.280 --> 00:21:59.280
>> Cool.

00:21:59.280 --> 00:22:04.000
>> Let's see. There's a cool graph that compares what's VMs versus containers,

00:22:04.000 --> 00:22:06.800
versus these isolate things.

00:22:06.800 --> 00:22:10.440
Like I said, it's a lot more put together.

00:22:10.440 --> 00:22:13.640
One of the things that's pretty interesting here is it has

00:22:13.640 --> 00:22:17.600
support for FastAPI and LingChain.

00:22:17.600 --> 00:22:19.720
So there's a bunch, like I said,

00:22:19.720 --> 00:22:23.720
this is really long, but let's look at the FastAPI version here.

00:22:23.720 --> 00:22:25.480
There's a whole example,

00:22:25.480 --> 00:22:27.400
I'll point people at, of code,

00:22:27.400 --> 00:22:30.520
Python worker examples, and Cloudflare's GitHub repo.

00:22:30.520 --> 00:22:32.840
So if you go to the FastAPI one here,

00:22:32.840 --> 00:22:34.520
and you go to the source,

00:22:34.520 --> 00:22:35.840
and you pull up the worker,

00:22:35.840 --> 00:22:37.800
and you hide the symbol so we can all see.

00:22:37.800 --> 00:22:38.880
Basically, check this out.

00:22:38.880 --> 00:22:44.440
So this is Python code running effectively in a node style like thing,

00:22:44.440 --> 00:22:47.760
in WebAssembly on the edge of one of these workers.

00:22:47.760 --> 00:22:49.680
Here's what you write. From FastAPI,

00:22:49.680 --> 00:22:53.240
import FastAPI and request from Pydantic import base model,

00:22:53.240 --> 00:22:55.800
use app equals FastAPI, app.get.

00:22:55.800 --> 00:22:58.240
Here's your document you return.

00:22:58.240 --> 00:23:00.240
Here's your async function that you write,

00:23:00.240 --> 00:23:01.720
you can go do async things.

00:23:01.720 --> 00:23:04.120
Here's your Pydantic model with Python types.

00:23:04.120 --> 00:23:05.600
What do you think? Here's your post,

00:23:05.600 --> 00:23:06.840
your puts, your gets.

00:23:06.840 --> 00:23:08.200
>> This is pretty cool.

00:23:08.200 --> 00:23:11.240
>> Yeah, and they've got some database thing that it

00:23:11.240 --> 00:23:14.400
integrates with so you can have persistent data and so on.

00:23:14.400 --> 00:23:17.000
But like I said, I don't do a ton with these things,

00:23:17.000 --> 00:23:19.640
but I might start paying attention if I can do it in Python.

00:23:19.640 --> 00:23:21.120
>> Yeah, definitely. Yeah.

00:23:21.120 --> 00:23:24.560
Yeah, back in my day, a V8 isolate was just carrots.

00:23:24.560 --> 00:23:27.120
>> Exactly. It's the part that

00:23:27.120 --> 00:23:30.120
sinks to the bottom and then you take it out, right?

00:23:30.120 --> 00:23:35.400
>> No. If people use Cloudflare already and those are workers,

00:23:35.400 --> 00:23:36.840
this is super interesting.

00:23:36.840 --> 00:23:39.440
If you just want to see some cool unique uses,

00:23:39.440 --> 00:23:41.000
and I guess in a way,

00:23:41.000 --> 00:23:43.080
one of the real first production uses of

00:23:43.080 --> 00:23:46.280
PyOdied and Python in WebAssembly.

00:23:46.280 --> 00:23:46.840
>> Yeah.

00:23:46.840 --> 00:23:47.440
>> Check this out.

00:23:47.440 --> 00:23:48.200
>> Definitely.

00:23:48.200 --> 00:23:50.880
>> All right. That's all of our main topics, right?

00:23:50.880 --> 00:23:52.040
>> That is.

00:23:52.040 --> 00:23:54.240
>> All right. How extra are you feeling today?

00:23:54.240 --> 00:23:56.120
>> I have zero extras.

00:23:56.120 --> 00:23:57.000
>> Zero?

00:23:57.000 --> 00:23:59.000
>> Zero extras. Just a better job later.

00:23:59.000 --> 00:24:00.560
>> All right. Well, I got a couple.

00:24:00.560 --> 00:24:02.040
I'll go through quickly here for us.

00:24:02.040 --> 00:24:05.600
First of all, Brian Skin sent both of us a message and said,

00:24:05.600 --> 00:24:08.840
"Look, there's a decent chance the podcast audience

00:24:08.840 --> 00:24:10.080
has already filled you in on this.

00:24:10.080 --> 00:24:12.720
But last week since I talked about LPython and

00:24:12.720 --> 00:24:17.160
the related projects are spearheaded by Andre Sertic."

00:24:17.160 --> 00:24:19.840
Brian, you are, Brian Skin,

00:24:19.840 --> 00:24:23.600
you are the podcast audience who has filled us in. Thank you.

00:24:23.600 --> 00:24:28.160
Actually, Brian did a whole hour-long interview with him on it.

00:24:28.160 --> 00:24:30.840
So if people want to check out LPython further,

00:24:30.840 --> 00:24:33.560
which we talked about before, check that out. That's pretty cool.

00:24:33.560 --> 00:24:35.640
Next, I really like this idea.

00:24:35.640 --> 00:24:38.360
We talked about JustPath last time.

00:24:38.360 --> 00:24:39.400
>> Yeah.

00:24:39.400 --> 00:24:42.200
>> How it helped you diagnose your path,

00:24:42.200 --> 00:24:44.560
like duplicates, missing directories, all that kind of stuff.

00:24:44.560 --> 00:24:46.960
Listen to last week if you want the whole details.

00:24:46.960 --> 00:24:49.720
But the guy behind it said,

00:24:49.720 --> 00:24:51.600
"Hey, that was really awesome. You covered it.

00:24:51.600 --> 00:24:53.120
I'm going to create a badge,

00:24:53.120 --> 00:24:56.440
a Python bytes GitHub badge for the project."

00:24:56.440 --> 00:24:57.480
What do you think about that, Brian?

00:24:57.480 --> 00:24:59.240
>> I think that's really cool.

00:24:59.240 --> 00:25:04.000
>> I do too. So I'm going to try to set it up so that there's

00:25:04.000 --> 00:25:07.840
an automatic GitHub badge that people can put on their readme,

00:25:07.840 --> 00:25:10.200
if their project was featured in Python bytes,

00:25:10.200 --> 00:25:11.440
and I'll put that at the top,

00:25:11.440 --> 00:25:13.280
put the code you can get for that or something at

00:25:13.280 --> 00:25:15.000
the top of the show on the episode page.

00:25:15.000 --> 00:25:17.120
It's not there yet, but eventually,

00:25:17.120 --> 00:25:20.200
you should be able to get a cool little badge like this that says,

00:25:20.200 --> 00:25:23.000
"My project was featured on the podcast on this episode,"

00:25:23.000 --> 00:25:24.880
and here's a link to it all within one badge.

00:25:24.880 --> 00:25:30.080
>> The badge has the number shows what episode it was on.

00:25:30.080 --> 00:25:33.520
>> Yeah, exactly. Instead of saying Python 3.12,

00:25:33.520 --> 00:25:35.880
it says Python bytes and the episode number. It's excellent.

00:25:35.880 --> 00:25:38.240
>> Yeah, that's pretty cool.

00:25:38.240 --> 00:25:43.680
>> Thanks for that. I am as well. Let's see what else.

00:25:43.680 --> 00:25:48.080
Brian, we have a brand new server going strong now. Did you see?

00:25:48.080 --> 00:25:50.760
>> I did. That's pretty exciting. Was that a lot of work?

00:25:50.760 --> 00:25:54.200
>> Yes. It was a lot of stress, not a lot of work.

00:25:54.200 --> 00:25:57.040
So I decided it's time to upgrade the server,

00:25:57.040 --> 00:25:58.160
get some more RAM.

00:25:58.160 --> 00:25:59.520
More CPUs is always nice,

00:25:59.520 --> 00:26:02.400
but I couldn't reasonably get more RAM without more CPU,

00:26:02.400 --> 00:26:03.560
so I'll just take them.

00:26:03.560 --> 00:26:09.680
So we had some downtime for about 20 minutes actually last night.

00:26:09.680 --> 00:26:11.160
So if you ran into that,

00:26:11.160 --> 00:26:13.800
I apologize. That took out everything because this

00:26:13.800 --> 00:26:16.440
was not one of the Docker pieces out of the Docker.

00:26:16.440 --> 00:26:18.880
This was the host of all the Docker clusters.

00:26:18.880 --> 00:26:20.640
So it was gone.

00:26:20.640 --> 00:26:24.280
I couldn't even reasonably put up a word down page

00:26:24.280 --> 00:26:26.160
because it was the host thing that was down,

00:26:26.160 --> 00:26:27.800
not part of the site.

00:26:27.800 --> 00:26:33.400
Anyway, now, I don't know where the reply went.

00:26:33.400 --> 00:26:35.760
If I'm not logged in, it doesn't show me.

00:26:35.760 --> 00:26:40.240
But we now have a sweet machine running along just like before.

00:26:40.240 --> 00:26:41.760
So that worked out pretty well.

00:26:41.760 --> 00:26:43.560
Before that, I was so happy, Brian.

00:26:43.560 --> 00:26:50.080
We had for the last 30 days running a 99.98 percent global uptime.

00:26:50.080 --> 00:26:51.000
That was awesome.

00:26:51.000 --> 00:26:52.400
>> That is pretty great.

00:26:52.400 --> 00:26:56.360
>> I know turning off the server for 20 minutes.

00:26:56.360 --> 00:27:00.000
With 20 gigs of database records,

00:27:00.000 --> 00:27:03.160
it takes a while to copy that from one VM to another.

00:27:03.160 --> 00:27:05.320
So that's what took so long.

00:27:05.320 --> 00:27:06.720
>> It's only three nines though.

00:27:06.720 --> 00:27:08.360
You need to work on that.

00:27:08.360 --> 00:27:11.600
>> Well, it's three nines and then an eight on the end.

00:27:11.600 --> 00:27:13.560
It's almost four nines. It's so close.

00:27:13.560 --> 00:27:15.520
I'm going to try to make it better now.

00:27:15.520 --> 00:27:19.680
But it went down to I think 99.94 percent,

00:27:19.680 --> 00:27:22.000
which I think is still pretty darn good

00:27:22.000 --> 00:27:25.000
for some random dude in Oregon running a server.

00:27:25.000 --> 00:27:26.440
>> That's pretty awesome.

00:27:26.440 --> 00:27:28.920
Python test went down last week

00:27:28.920 --> 00:27:31.880
for 12 hours or something like that.

00:27:31.880 --> 00:27:34.320
>> Oh, no. Was that something that had nothing to do with you,

00:27:34.320 --> 00:27:35.680
just the host of it or something?

00:27:35.680 --> 00:27:37.400
>> It had something to do with me,

00:27:37.400 --> 00:27:39.600
but it was a DNS thing.

00:27:39.600 --> 00:27:47.120
The DNS glitch, it was an accounting thing on my part.

00:27:47.880 --> 00:27:50.240
When it got repaired,

00:27:50.240 --> 00:27:52.160
they didn't repair all the DNS records.

00:27:52.160 --> 00:27:54.520
So I had to go recreate all the DNS records.

00:27:54.520 --> 00:27:55.320
>> What a hassle.

00:27:55.320 --> 00:27:55.680
>> Yeah.

00:27:55.680 --> 00:27:57.920
>> Yeah, it's a huge hassle. All right.

00:27:57.920 --> 00:27:58.640
>> Cool.

00:27:58.640 --> 00:28:01.360
>> But before we go on for a joke,

00:28:01.360 --> 00:28:02.680
Henry out there on his points,

00:28:02.680 --> 00:28:04.160
what about rich and textual?

00:28:04.160 --> 00:28:07.160
They'll just be overrun with these badges.

00:28:07.160 --> 00:28:08.480
>> Yeah.

00:28:08.480 --> 00:28:11.080
>> These Python bytes badges.

00:28:11.080 --> 00:28:14.800
>> We'll have to do an infinity symbol for those projects.

00:28:14.800 --> 00:28:21.520
>> Exactly. Maybe some sequence like this 100 dot dot dot 400.

00:28:21.520 --> 00:28:22.040
>> Yeah.

00:28:22.040 --> 00:28:22.640
>> Something like that.

00:28:22.640 --> 00:28:25.040
>> Also, backing up a little bit,

00:28:25.040 --> 00:28:30.840
the Edge workers from Andrew Bayer,

00:28:30.840 --> 00:28:33.560
Pyedide works in Web Workers now too,

00:28:33.560 --> 00:28:35.480
which is totally different thing, but also cool.

00:28:35.480 --> 00:28:36.040
That is very cool.

00:28:36.040 --> 00:28:38.000
>> Awesome. Okay, that is very cool. Thanks, Andrew.

00:28:38.000 --> 00:28:40.080
I think Web Workers are basically like

00:28:40.080 --> 00:28:42.680
background threads on your web app,

00:28:42.680 --> 00:28:46.200
which I think there used to be troubles with that as well.

00:28:46.200 --> 00:28:47.960
All right. This one,

00:28:47.960 --> 00:28:49.880
I thought of you when I got this joke, right?

00:28:49.880 --> 00:28:50.560
>> Okay.

00:28:50.560 --> 00:28:53.360
>> This makes us a little AI,

00:28:53.360 --> 00:28:54.960
a little bit of C++,

00:28:54.960 --> 00:28:56.600
the graphic is crummy,

00:28:56.600 --> 00:28:58.600
so it's hard to read. But Gemini,

00:28:58.600 --> 00:29:02.360
the Google AI, this person says,

00:29:02.360 --> 00:29:06.600
Gemini is apparently told your Google account age,

00:29:06.600 --> 00:29:10.800
and will answer questions with the appropriate caution.

00:29:10.800 --> 00:29:12.640
If you're like a minor,

00:29:12.640 --> 00:29:16.160
you're like 12-year-old kid with a Gmail account,

00:29:16.160 --> 00:29:19.040
you don't want this thing to just tell you all the secrets of life,

00:29:19.040 --> 00:29:22.320
like, "Hey kid, Santa Claus is fake."

00:29:22.320 --> 00:29:23.920
No. All right.

00:29:23.920 --> 00:29:25.160
But here it is, in fact,

00:29:25.160 --> 00:29:26.040
talking about something else.

00:29:26.040 --> 00:29:29.120
It says, "Here is Gemini refusing to help someone with

00:29:29.120 --> 00:29:32.000
C++ because they're under 18

00:29:32.000 --> 00:29:36.200
and advanced C++ is a danger to a young mind."

00:29:36.200 --> 00:29:37.640
Are you ready?

00:29:37.640 --> 00:29:38.600
>> Yeah.

00:29:38.600 --> 00:29:39.960
>> The person just says,

00:29:39.960 --> 00:29:43.680
"I have a function inline bool is key down standard namespace,

00:29:43.680 --> 00:29:48.240
same as template of key auto dot dot dot keys."

00:29:48.240 --> 00:29:50.440
It's pretty intense code, right?

00:29:50.440 --> 00:29:52.560
It says, Gemini says,

00:29:52.560 --> 00:29:55.560
"I'd be glad to help you with that C++ code conversion,

00:29:55.560 --> 00:29:58.160
but I'll need to refrain from providing

00:29:58.160 --> 00:30:01.440
code examples or solutions that directly involve concepts.

00:30:01.440 --> 00:30:02.600
As you're under 18,

00:30:02.600 --> 00:30:06.040
concepts are an advanced feature of C++ that introduce

00:30:06.040 --> 00:30:10.160
potential risks and I want to prioritize your safety.

00:30:10.160 --> 00:30:12.520
Here are some alternative approaches you could consider

00:30:12.520 --> 00:30:14.640
depending on your specific requirements,

00:30:14.640 --> 00:30:17.840
traditional variadic templates and so on."

00:30:17.840 --> 00:30:20.240
>> Because you're under age,

00:30:20.240 --> 00:30:24.400
I'm going to focus on traditional variadic templates?

00:30:24.400 --> 00:30:29.000
>> You're good. What do you think?

00:30:29.000 --> 00:30:30.080
Is that a good one or what?

00:30:30.080 --> 00:30:32.760
>> Yeah, that'll scare them away from C++.

00:30:32.760 --> 00:30:34.280
>> I'll go back to Python.

00:30:34.280 --> 00:30:35.800
>> Yeah, nice.

00:30:35.800 --> 00:30:36.680
>> All right.

00:30:36.680 --> 00:30:39.760
>> Okay. I've got a quick baseball joke.

00:30:39.760 --> 00:30:44.240
So we're just deep into baseball season now.

00:30:44.240 --> 00:30:48.240
If you take a trip to see a baseball game, what is that called?

00:30:48.240 --> 00:30:50.480
It's an inning outing.

00:30:50.480 --> 00:30:53.720
>> An inning outing. I love it.

00:30:53.720 --> 00:30:54.200
>> That joke.

00:30:54.200 --> 00:30:57.520
>> I love it. Yeah, we have no baseball.

00:30:57.520 --> 00:31:00.200
We've got to dive to all of our professional sports,

00:31:00.200 --> 00:31:02.280
besides soccer and basketball.

00:31:02.280 --> 00:31:05.360
>> So it's been a while. It's been a while since I've been to a game.

00:31:05.360 --> 00:31:07.120
>> It's been a long time since I've been to a game.

00:31:07.120 --> 00:31:09.760
>> It's been a long time since I've been on an inning outing.

00:31:09.760 --> 00:31:13.520
>> An inning outing. Yeah, and yet I still find T-shirts.

00:31:13.520 --> 00:31:15.560
You can get T-shirts other places.

00:31:15.560 --> 00:31:17.880
>> Yeah. T-shirts, they persist for sure.

00:31:17.880 --> 00:31:19.280
That and conference T-shirts.

00:31:19.280 --> 00:31:20.160
>> Yeah.

00:31:20.160 --> 00:31:22.320
>> All right. Well, thanks as always.

00:31:22.320 --> 00:31:22.720
>> Thank you.

00:31:22.720 --> 00:31:23.040
>> See you later.

