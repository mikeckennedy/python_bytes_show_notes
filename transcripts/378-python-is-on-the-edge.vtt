WEBVTT

00:00:00.001 --> 00:00:06.640
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:06.640 --> 00:00:12.200
This is episode 378, recorded April 9th, 2024.

00:00:12.200 --> 00:00:13.800
I'm Michael Kennedy.

00:00:13.800 --> 00:00:14.980
And I'm Brian Okken.

00:00:14.980 --> 00:00:18.600
And you can follow us over on Mastodon.

00:00:18.600 --> 00:00:22.700
We're all on Facedon, at Brian Okken, at M. Kennedy, and at Python Bytes.

00:00:22.700 --> 00:00:23.820
We'd love to talk to you over there.

00:00:23.820 --> 00:00:27.500
We're also on X Twitter, if you want to be there as well.

00:00:27.500 --> 00:00:30.520
But we probably spend a little more time on Mastodon these days.

00:00:30.520 --> 00:00:33.340
Support the show by supporting our work.

00:00:33.340 --> 00:00:39.600
We have, obviously, a bunch of courses that Talk Python Training, Brian's complete pytest course, and the Patreon as well.

00:00:39.600 --> 00:00:41.300
Be part of the live show if you wish.

00:00:41.300 --> 00:00:42.600
You can see the video version.

00:00:42.600 --> 00:00:49.760
Absolutely not required, but always awesome to have people in the audience to give it a little bit more of multiple perspectives.

00:00:49.760 --> 00:00:51.960
We'll get some of that coming on in a second.

00:00:51.960 --> 00:00:55.300
And you can check that out at pythonbytes.fm/live.

00:00:55.300 --> 00:00:58.260
Live, usually Tuesdays at 10 a.m.

00:00:58.260 --> 00:01:00.220
So that's Pacific time.

00:01:00.220 --> 00:01:08.860
Finally, if you want an artisanal, handcrafted digest of what we talk about sent to you in email form, even if you don't listen,

00:01:08.860 --> 00:01:12.100
well, head over to the website, Python Bytes.fm.

00:01:12.100 --> 00:01:15.440
Click newsletter right in the middle and enter your email address.

00:01:15.440 --> 00:01:18.260
We will not share it or do other nefarious things.

00:01:18.340 --> 00:01:21.840
So we just want to be able to contact you and have a chat if you wish.

00:01:21.840 --> 00:01:26.560
So Brian will be sending out something cool to everyone this week, as usual.

00:01:26.560 --> 00:01:30.300
Brian, do you have health news or something you've got to share?

00:01:30.300 --> 00:01:31.260
What's going on here, man?

00:01:31.260 --> 00:01:34.300
Well, I've found a pacemaker.

00:01:35.300 --> 00:01:37.060
My ticker's doing good.

00:01:37.060 --> 00:01:38.820
No problems with that.

00:01:38.820 --> 00:01:42.480
But you can control your heart with Python.

00:01:42.480 --> 00:01:43.780
Oh, okay.

00:01:43.780 --> 00:01:44.980
Actually, it's not.

00:01:44.980 --> 00:01:46.440
You can't control your heart yet.

00:01:46.440 --> 00:01:48.880
Actually, I don't know if you can.

00:01:48.880 --> 00:01:55.280
But I ran across a project from Brandon Rohr called Pacemaker.

00:01:55.680 --> 00:01:57.920
And what this does, it's not controlling your heart.

00:01:57.920 --> 00:02:01.460
It's controlling a time per iteration loop.

00:02:01.460 --> 00:02:06.500
So with, and I don't know if this has anything to do with uv or not,

00:02:06.500 --> 00:02:11.480
but one of the things that uv has brought us is really fast installing of lots of packages.

00:02:11.480 --> 00:02:13.480
If you have a lot, why not?

00:02:13.480 --> 00:02:17.740
So having, this is a small package.

00:02:17.740 --> 00:02:21.780
So this is in Brandon's own words on the readme.

00:02:21.780 --> 00:02:24.000
I think I saw this here.

00:02:24.560 --> 00:02:31.620
It is, essentially, it's a glorified snippet.

00:02:31.620 --> 00:02:34.900
Instead of a snippet, he wrote a package, which I love this.

00:02:34.900 --> 00:02:37.160
So I'm taking a look at it.

00:02:37.160 --> 00:02:38.460
It's a small package.

00:02:38.460 --> 00:02:41.380
Good example, though, for how to do a package.

00:02:41.380 --> 00:02:45.800
Like if you take a look at the pyproject.toml, it's pretty concise.

00:02:45.800 --> 00:02:48.000
It's using setup tools, which is fine.

00:02:48.000 --> 00:02:53.300
But it shows you how easy it is to put a package together, which is pretty fun.

00:02:53.440 --> 00:02:56.600
And also with the code, I was taking a look at the code.

00:02:56.600 --> 00:03:04.240
So what this does is not terribly earth-shattering, but it just sticks around.

00:03:04.240 --> 00:03:07.460
You tell it that you want to, it's kind of like a metronome thing.

00:03:07.760 --> 00:03:10.300
So you've got some code that you want to run.

00:03:10.300 --> 00:03:11.740
And here's an example.

00:03:11.740 --> 00:03:16.900
And you just say pacemaker beat, and it waits.

00:03:16.900 --> 00:03:20.220
So it's a busy wait, or it does a sleep or something like that.

00:03:20.220 --> 00:03:20.760
Yeah, sleep.

00:03:20.760 --> 00:03:25.960
But it sleeps and then comes back alive, does its thing, and then goes back.

00:03:26.100 --> 00:03:31.020
So you can have it be, like in this example, it does a beat for 100 times.

00:03:31.020 --> 00:03:36.880
And this is important in a lot of different types of code, a lot of monitoring code, a lot

00:03:36.880 --> 00:03:37.500
of other things.

00:03:37.500 --> 00:03:43.060
And busy waits aren't necessarily always the greatest, but in a lot of cases, it works great.

00:03:43.260 --> 00:03:46.540
The thing that I wanted to point out about this, there's a few things that I love about

00:03:46.540 --> 00:03:48.200
this project, or just wanted to point out.

00:03:48.200 --> 00:03:51.060
Really great documentation, even for a small project.

00:03:51.060 --> 00:03:54.500
Also, I had kind of forgot about time monotonic.

00:03:54.760 --> 00:03:59.380
So this is using time monotonic when it does the time comparisons.

00:03:59.380 --> 00:04:05.100
Instead of normal, there's a couple times of timestamps, types of timestamps, and monotonic,

00:04:05.100 --> 00:04:06.920
and then there's a monotonic nanoseconds.

00:04:06.920 --> 00:04:10.620
If you really want to do really tight loops, you could modify it for that.

00:04:10.620 --> 00:04:16.120
The thing that monotonic does is it makes sure that all time deltas are positive.

00:04:16.120 --> 00:04:24.320
So even if something happens, like you change your system clock, during the times, between

00:04:24.320 --> 00:04:29.820
timestamps, it'll still do it correctly so that it is monotonically increasing in times.

00:04:29.820 --> 00:04:30.180
That's interesting.

00:04:30.180 --> 00:04:35.960
Another thing could be, you know, like maybe even you don't change it, but we all have our

00:04:35.960 --> 00:04:38.160
clocks set to auto-adjust, right?

00:04:38.160 --> 00:04:40.660
And it could come online and auto-adjust or something.

00:04:40.660 --> 00:04:47.780
Yeah, and that would be weird if like suddenly, especially with this project where like one

00:04:47.780 --> 00:04:53.660
of the things it does, and he warns about this, is, I mean, sleeps aren't exact science.

00:04:53.660 --> 00:04:59.520
And this isn't a real-time, especially on non-real-time operating systems, but I don't think Python's

00:04:59.520 --> 00:05:00.560
even a real-time thing.

00:05:00.560 --> 00:05:05.880
So it's an approximation for how long it's going to sleep, but it tries to correct it.

00:05:05.880 --> 00:05:10.640
So if you, if you, if you slept too long, it tries to do more events so to, so that on

00:05:10.640 --> 00:05:16.540
average you get the average amount of times you're running be correct.

00:05:16.540 --> 00:05:18.280
So it's kind of a cool library.

00:05:18.280 --> 00:05:18.920
Check it out.

00:05:18.920 --> 00:05:21.760
A couple of things I wanted to point out about it.

00:05:21.760 --> 00:05:24.120
One is the cool use of monotonic.

00:05:24.120 --> 00:05:28.380
The other one is a good, good read me documentation, even for a small thing.

00:05:28.380 --> 00:05:31.060
But there's, there's no tests.

00:05:31.060 --> 00:05:33.120
Brandon, come on.

00:05:33.360 --> 00:05:37.640
Anyway, I'm not, I actually, there's a couple of things around this.

00:05:37.640 --> 00:05:42.540
I don't think that people should stop from putting a code online just because they don't

00:05:42.540 --> 00:05:43.160
have tests yet.

00:05:43.160 --> 00:05:46.000
It might be that somebody could contribute and add tests.

00:05:46.000 --> 00:05:51.520
It also might be that for you, if you're using this all the time, if Brandon uses this all

00:05:51.520 --> 00:05:54.900
the time, the tests are covered by the calling code.

00:05:54.900 --> 00:05:58.000
So you're, you're, you're using this and you're covering it.

00:05:58.000 --> 00:06:03.240
And I just want to, I guess I want to point out to everybody for any library you're using,

00:06:03.240 --> 00:06:08.420
you probably should have tests that cover the part of the library that you depend on, even

00:06:08.420 --> 00:06:09.580
if they do have tests.

00:06:09.580 --> 00:06:10.560
So this one doesn't.

00:06:10.560 --> 00:06:14.940
So you, you know, buyer beware, but even if they do, you probably should make sure that

00:06:14.940 --> 00:06:17.020
it is really working the way you think it's working.

00:06:17.020 --> 00:06:17.800
So anyway.

00:06:18.120 --> 00:06:18.260
Yeah.

00:06:18.260 --> 00:06:21.240
Sometimes it's just hard to have meaningful tests.

00:06:21.240 --> 00:06:26.040
Like a while ago, I released that Umami Python event library, right?

00:06:26.040 --> 00:06:27.100
For the analytics tracking.

00:06:27.100 --> 00:06:33.740
And all it does is serialize the messages that come to it from the Umami API.

00:06:33.740 --> 00:06:37.720
I can test what my perception of the API is, right?

00:06:37.720 --> 00:06:44.000
But, but the real danger is that that API changes in some way or another, or, you know, it's just

00:06:44.000 --> 00:06:49.620
90% of the fragility is outside of, if you mock out all that stuff, then well, you know,

00:06:49.620 --> 00:06:53.040
you're just kind of testing your view, which hopefully is already mostly encoded.

00:06:53.040 --> 00:06:56.840
And I mean, it's not completely useless, but it's, is there's certain things that are just

00:06:56.840 --> 00:06:57.820
tricky to get.

00:06:57.820 --> 00:06:58.320
Right.

00:06:58.320 --> 00:07:02.340
And, and testing isn't, testing isn't necessarily always automated testing.

00:07:02.340 --> 00:07:03.960
It could be like that.

00:07:03.960 --> 00:07:04.860
You're using it.

00:07:04.860 --> 00:07:08.680
The Umami API they're using, it's you're using it.

00:07:08.740 --> 00:07:15.780
So you'll know when it breaks and other things are like your use of it will break or the,

00:07:15.780 --> 00:07:16.580
the calling code.

00:07:16.580 --> 00:07:20.800
And I just like, I don't think that people should, especially with the internal stuff,

00:07:20.800 --> 00:07:24.880
maybe on PyPI, maybe we should have a little bit like things eventually should have tests

00:07:24.880 --> 00:07:25.320
probably.

00:07:25.320 --> 00:07:30.820
But the, for internal projects where you're sharing code it's better to package and share

00:07:30.820 --> 00:07:32.300
code than to not share code.

00:07:32.300 --> 00:07:36.980
So if, if writing testers, what's stopping you from putting it in a central repository,

00:07:36.980 --> 00:07:38.760
don't let that stop you.

00:07:38.760 --> 00:07:42.400
It's, it's better than just, I mean, we, we have snippets, like he said, it's a glorified

00:07:42.400 --> 00:07:42.800
snippet.

00:07:42.800 --> 00:07:44.180
So why not package it?

00:07:44.180 --> 00:07:45.680
So yeah, very nice.

00:07:45.680 --> 00:07:46.780
I like the monotonic.

00:07:46.780 --> 00:07:48.020
That's news news to me.

00:07:48.020 --> 00:07:49.460
I hadn't paid attention to that before.

00:07:49.460 --> 00:07:50.480
Yeah, it's cool.

00:07:50.480 --> 00:07:52.900
I want to try the nanosecond monotonic.

00:07:52.900 --> 00:07:53.720
So yeah.

00:07:53.720 --> 00:07:59.600
Other stuff that people might want to pay attention to, and this is not to drum up a bunch of

00:07:59.600 --> 00:08:02.560
fear and concern so much.

00:08:02.560 --> 00:08:07.500
It's not huge news in that regard to people, but is more to just sort of put on out there

00:08:07.500 --> 00:08:12.880
what the PyPI, the Python Packaging Authority folks to deal with, you know, kind of say thanks.

00:08:12.880 --> 00:08:17.160
So the news comes to us from bleeping computer, which usually does pretty good news, but this

00:08:17.160 --> 00:08:21.360
article is pretty vacuous of information, but the title says a lot.

00:08:21.360 --> 00:08:26.860
PyPI suspends new user registrations to block malware campaign.

00:08:26.860 --> 00:08:29.020
And so there's some interesting things in here.

00:08:29.380 --> 00:08:32.300
So it basically says, look, when was this?

00:08:32.300 --> 00:08:35.800
It was like a couple of, this is March 28th, a little bit, a couple weeks ago.

00:08:35.800 --> 00:08:40.800
IPI has temporarily suspended user registration in the creation of new projects to deal with

00:08:40.800 --> 00:08:42.500
ongoing malware campaign.

00:08:42.500 --> 00:08:46.620
Then it proceeds to tell you what, what IPI is basically.

00:08:46.620 --> 00:08:49.400
And then it says, oh, look, there was some, some problems.

00:08:49.400 --> 00:08:53.540
People are uploading bad stuff, but it doesn't tell you, for example, like what projects,

00:08:53.780 --> 00:08:55.740
what did the malware do?

00:08:55.740 --> 00:09:03.660
So if you jump over to the status.python.org, actually that tells you about the status of

00:09:03.660 --> 00:09:05.060
Python infrastructure, which is kind of cool.

00:09:05.060 --> 00:09:07.540
And it says same deal.

00:09:07.540 --> 00:09:09.020
This is official reporting.

00:09:09.360 --> 00:09:11.980
Did it say how long the event went for?

00:09:11.980 --> 00:09:12.620
Nope.

00:09:12.620 --> 00:09:14.480
Just that it was a thing.

00:09:14.480 --> 00:09:19.180
I guess if I did math, that would be 10 hours, about 10 hours, 30 minutes.

00:09:19.180 --> 00:09:19.960
That's a ways.

00:09:19.960 --> 00:09:23.540
And this, this is the real article you want to read.

00:09:23.740 --> 00:09:27.840
It is over on Medium, IPIs under attack, project creation and user registration.

00:09:27.840 --> 00:09:30.680
It's been adhered to the details by Yehuda Gelb.

00:09:30.680 --> 00:09:31.960
I hate to link to Medium.

00:09:31.960 --> 00:09:33.160
I hate Medium.

00:09:33.160 --> 00:09:34.860
I think it's a crummy place.

00:09:34.860 --> 00:09:35.960
I don't know.

00:09:35.960 --> 00:09:38.080
It just seems gross, but they have really good details.

00:09:38.080 --> 00:09:41.980
So basically this was a typo squatting attack.

00:09:41.980 --> 00:09:47.720
And what's interesting, it was a multi-stage attack, stealing all sorts of things.

00:09:47.720 --> 00:09:52.640
Crypto wallets, obviously, but real sketchy is browser cookies.

00:09:52.640 --> 00:09:56.280
So you're logged into your bank for a session that's good for 20 minutes.

00:09:56.280 --> 00:10:00.620
You know, if they could grab that and log in as you, that might be less good, you know,

00:10:00.620 --> 00:10:03.080
or log into your email and reset stuff and so on.

00:10:03.080 --> 00:10:08.240
So what happened is there was a bunch of packages in here somewhere.

00:10:08.240 --> 00:10:09.500
There's the package list.

00:10:09.500 --> 00:10:16.080
So you can just, you can see these are all about the capturing people who, one, misspelled

00:10:16.080 --> 00:10:18.580
things, but also just like didn't quite understand.

00:10:18.580 --> 00:10:21.540
Like, for example, Brian, one of the packages is requirements.tx.

00:10:21.540 --> 00:10:25.180
requirements.txt without the dot or requirements.

00:10:25.180 --> 00:10:32.120
So if you say pip install requirements, right, without the -r or the .txt, you're getting

00:10:32.120 --> 00:10:32.420
this.

00:10:32.420 --> 00:10:37.700
And there's a bunch of others, you know, TensorFlow and Selenium and like they're all over the

00:10:37.700 --> 00:10:38.660
requirements business.

00:10:38.660 --> 00:10:39.620
So it's just everywhere.

00:10:39.820 --> 00:10:46.780
And the deal was basically each one of these had a malicious setup.py, which is why I think

00:10:46.780 --> 00:10:48.240
it's kind of interesting to look at.

00:10:48.240 --> 00:10:56.160
And inside the malicious setup.py, it encrypted using the cryptography.fairnet library, which

00:10:56.160 --> 00:10:57.940
just listed as a dependency, I imagine.

00:10:58.300 --> 00:11:03.900
It then decrypts some kind of URL that it very lightly.

00:11:03.900 --> 00:11:05.440
It's funny.

00:11:05.440 --> 00:11:06.760
It's like using little analytics.

00:11:06.760 --> 00:11:11.420
It'll like passes the query string of like, which one hacked me before you get going.

00:11:11.420 --> 00:11:16.100
It downloads some kind of thing that installs and runs and basically installs a backdoor

00:11:16.100 --> 00:11:17.800
ongoing thing.

00:11:17.860 --> 00:11:21.960
So even if you pip uninstall this, there's this thing running that just monitors your

00:11:21.960 --> 00:11:24.000
system, which is not ideal, to be honest.

00:11:24.000 --> 00:11:25.820
That's not what you want.

00:11:25.820 --> 00:11:28.120
No, one does not want this.

00:11:28.120 --> 00:11:28.600
Yeah.

00:11:28.600 --> 00:11:33.160
Oh, and Henry out in the audience says, in addition to all the stuff I said, that actually blocked

00:11:33.160 --> 00:11:38.020
all uploads for a few hours and couldn't upload build 1.2.1.

00:11:38.020 --> 00:11:39.320
You know, what a hassle, huh?

00:11:39.320 --> 00:11:41.260
This is why we can't have nice things, you know?

00:11:41.260 --> 00:11:42.060
Come on now.

00:11:42.060 --> 00:11:42.660
Yeah.

00:11:43.060 --> 00:11:48.160
So there's a, I guess there's a lesson here to make sure that you're careful when

00:11:48.160 --> 00:11:52.220
you pip install something, because even if you catch it and you're like, oh, that's not

00:11:52.220 --> 00:11:54.060
what I meant, you may have already done damage.

00:11:54.060 --> 00:11:57.600
Isn't there a way, I don't remember off the top of my head, to say pip install, but don't

00:11:57.600 --> 00:12:00.600
run, only use wheels, like don't allow anything to run?

00:12:00.600 --> 00:12:01.460
I don't know.

00:12:01.460 --> 00:12:02.280
I'm not sure.

00:12:02.280 --> 00:12:03.020
I feel like there was.

00:12:03.020 --> 00:12:06.480
There were probably some of the audiences going, yes, yes, of course.

00:12:06.480 --> 00:12:07.620
How do you not know this?

00:12:07.620 --> 00:12:10.100
But it doesn't mean this is not going to happen.

00:12:10.100 --> 00:12:12.420
It just means you have to write, use the code.

00:12:12.880 --> 00:12:17.640
You know, as opposed to just the act of installing it or sneaking it into a requirements

00:12:17.640 --> 00:12:18.260
file somehow.

00:12:18.260 --> 00:12:19.220
Yes.

00:12:19.220 --> 00:12:22.880
And I knew Henry would come through and say, dash, dash, only dash binary.

00:12:22.880 --> 00:12:23.380
Indeed.

00:12:23.380 --> 00:12:23.940
That's it.

00:12:23.940 --> 00:12:24.320
All right.

00:12:24.320 --> 00:12:27.280
Well, you know, they were on top of it.

00:12:27.280 --> 00:12:31.160
The fact that this was completely dealt with within 12 hours is pretty awesome.

00:12:31.160 --> 00:12:33.320
The fact that it has to happen, not so much.

00:12:33.320 --> 00:12:33.860
Yeah.

00:12:33.860 --> 00:12:34.780
All right.

00:12:34.780 --> 00:12:35.280
Over to you, Brian.

00:12:35.280 --> 00:12:44.680
So I want to just, I guess the world has changed a little bit with uv and other rustified things.

00:12:45.560 --> 00:12:52.000
So we have, there's an updated doc or an updated blog post from Hinnick.

00:12:52.000 --> 00:12:58.840
Python projects, Python project, local virtual env management redo or redux.

00:12:59.380 --> 00:13:05.300
And so he's just started really talking about all of the tools that he uses around virtual

00:13:05.300 --> 00:13:05.780
environments.

00:13:05.780 --> 00:13:10.500
And I kind of just enjoyed it because it matches my own use quite a bit.

00:13:10.500 --> 00:13:14.640
So some caveats in here that says this is what works for me.

00:13:14.640 --> 00:13:17.100
I'm not necessarily saying you have to use this, of course.

00:13:17.760 --> 00:13:23.240
But it's a good list of kind of how you're, how dealing with, dealing, dealing with virtual

00:13:23.240 --> 00:13:23.720
environments.

00:13:23.720 --> 00:13:29.740
The major thing that happened is uv and it's changed a lot of how we deal with it, but it

00:13:29.740 --> 00:13:30.880
makes things a lot faster.

00:13:30.880 --> 00:13:35.360
So the, some of the things I thought I want to revisit in here.

00:13:35.360 --> 00:13:36.620
So it's pretty great.

00:13:36.620 --> 00:13:42.820
So he's using .venv and I in product in each project directory.

00:13:42.820 --> 00:13:44.620
And that's, it's close to what I use.

00:13:44.620 --> 00:13:46.780
I use the venv.

00:13:47.080 --> 00:13:48.400
I just don't use the dot.

00:13:48.400 --> 00:13:50.060
I do as well, Brian.

00:13:50.060 --> 00:13:55.020
And it's, I know the dot means kind of like, just, it's not real important, put it to the

00:13:55.020 --> 00:14:00.200
side, but I love to be able to open up a project in Finder or Explorer and look at it and go,

00:14:00.200 --> 00:14:01.960
all right, this one has a virtual environment.

00:14:01.960 --> 00:14:03.240
Oh, this one doesn't.

00:14:03.240 --> 00:14:04.160
I need to make one.

00:14:04.160 --> 00:14:09.260
And I don't want to have to keep like show hidden files, hide hidden files over and over.

00:14:09.260 --> 00:14:12.920
So while I appreciate the dot, like I'm a hundred percent with you.

00:14:12.920 --> 00:14:13.300
Yeah.

00:14:14.460 --> 00:14:18.920
So I think I want to revisit this.

00:14:18.920 --> 00:14:20.860
I've tried it a while ago, but I haven't tried it lately.

00:14:21.320 --> 00:14:29.480
is a, is a way to, to have an ENVRC file or dot ENVRC file in your directory.

00:14:29.480 --> 00:14:34.640
And, and that gets run when you CD into it or, or something.

00:14:35.380 --> 00:14:38.940
Anyway, I think this is cool stuff, but I don't use it.

00:14:38.940 --> 00:14:39.940
Do you use this Michael?

00:14:39.940 --> 00:14:42.000
No, I love the idea of it.

00:14:42.000 --> 00:14:46.340
And in practice, I just haven't, I just haven't done it now.

00:14:46.340 --> 00:14:51.420
There's some cool tricks in here with it that he's using that I kind of want to get back to

00:14:51.420 --> 00:14:52.220
trying it again.

00:14:52.340 --> 00:14:56.140
So I guess, thanks, Sinek for bringing this up so I can take a look again.

00:14:56.140 --> 00:14:59.160
Using Astral's uv over Rye.

00:14:59.160 --> 00:15:03.280
I kind of never went to Rye, but it looks like he switched from Rye to uv.

00:15:03.280 --> 00:15:05.840
Python installations.

00:15:05.840 --> 00:15:12.080
Now switch to both, just always using python.org downloads because they're now universal builds

00:15:12.080 --> 00:15:12.840
mostly.

00:15:13.300 --> 00:15:14.920
And it just sort of works.

00:15:14.920 --> 00:15:18.040
And that's what I've been using also for installing Python.

00:15:18.040 --> 00:15:21.460
Dead snakes for Linux, of course.

00:15:21.460 --> 00:15:27.140
And then there's a, a mention of Python build standalone for various other projects that are

00:15:27.140 --> 00:15:27.380
needed.

00:15:27.380 --> 00:15:28.600
So that's, that's kind of neat.

00:15:28.600 --> 00:15:36.780
A discussion about unpinned versus pinned packages and, and then also using a dot Python version

00:15:36.780 --> 00:15:38.300
default within a directory.

00:15:38.480 --> 00:15:44.640
And the tie in back to during during during this kind of cool is, is he's,

00:15:44.640 --> 00:15:46.760
he's got some tricks in here.

00:15:46.760 --> 00:15:52.040
So if you, if you drop in a dot Python version default, it would just shows you, tells you

00:15:52.040 --> 00:15:58.200
what version to, to use by default that, that in a directory and then you check it in so that

00:15:58.200 --> 00:16:00.580
the development environment can be recreated easily.

00:16:00.580 --> 00:16:06.620
And he's got some in VRC with that's part of during that he's got a little snippet that will

00:16:06.620 --> 00:16:12.780
activate it based on which Python you're using, using you uv, which is kind of a neat little trick to,

00:16:12.780 --> 00:16:20.200
to use to Renv and Python versions and, and uv altogether, which, so I'll definitely have to try that.

00:16:20.200 --> 00:16:21.220
That's kind of a neat trick.

00:16:21.220 --> 00:16:21.880
That is neat.

00:16:21.880 --> 00:16:27.220
There's using all of this as well helps with GitHub actions.

00:16:27.720 --> 00:16:34.380
He's describing how to do that with, with as input to the setup Python, GitHub action,

00:16:34.380 --> 00:16:36.440
which is, I didn't know you could do this.

00:16:36.440 --> 00:16:41.700
So you can say the Python version file and you can just give it that Python version default.

00:16:41.700 --> 00:16:44.460
So the GitHub actions uses the right default version.

00:16:44.460 --> 00:16:45.420
It's this cool trick.

00:16:45.880 --> 00:16:51.040
he's also, he's got some, tricks on how to use, use it with the fish shell.

00:16:51.040 --> 00:16:54.940
I don't, I don't use fish, but for those fish users, that'd be great.

00:16:54.940 --> 00:17:00.620
The, the other part that I wanted to, that I really enjoyed seeing is because of all of this,

00:17:00.620 --> 00:17:06.620
the, in which version and stuff you can use, oh, he's using the requires Python and

00:17:06.620 --> 00:17:10.160
Python project Toml, which I'm, I'm using for everything now.

00:17:10.160 --> 00:17:17.180
So, but the, he's has a way, a little, little sed snippet to parse that out of the

00:17:17.180 --> 00:17:23.800
pyproject.toml and pass it into, using the get, get have actions, the animal file,

00:17:23.800 --> 00:17:29.320
to pass it to a Docker build, but it's just, it's grabbing this, this version of Python.

00:17:29.320 --> 00:17:34.380
So you could use it for other things within your, within your, I guess within get

00:17:34.380 --> 00:17:39.460
your, your GitHub action or, or something else, or other tool, if you needed to pass what

00:17:39.460 --> 00:17:40.580
Python version to use.

00:17:40.580 --> 00:17:45.800
So that's pretty, some pretty clever things in here that I, some, some, something old,

00:17:45.800 --> 00:17:47.420
something new, kind of some neat tricks.

00:17:47.420 --> 00:17:48.120
Yeah.

00:17:48.120 --> 00:17:48.560
Yeah.

00:17:48.560 --> 00:17:49.120
Very interesting.

00:17:49.120 --> 00:17:53.920
A lot of stuff to explore, interesting comments in the audience about liking or

00:17:53.920 --> 00:17:56.280
disliking all the magic, the auto magic.

00:17:56.280 --> 00:18:00.780
Well, and it's also another example of like, I kind of like these sort of posts, but even

00:18:00.780 --> 00:18:03.520
for different people, just to see this is how I work.

00:18:03.520 --> 00:18:05.040
This is the workflow I use.

00:18:05.040 --> 00:18:09.540
not, not necessarily just focusing on one tool, but I use all these things together

00:18:09.540 --> 00:18:10.880
and this is how they work together.

00:18:10.880 --> 00:18:12.180
It's kind of fun to read.

00:18:12.180 --> 00:18:12.880
Yeah.

00:18:12.880 --> 00:18:13.680
Yeah, absolutely.

00:18:13.680 --> 00:18:17.360
Even if you don't adopt it, it's cool to just see the tools and the things you can do.

00:18:17.360 --> 00:18:17.820
Yeah.

00:18:17.820 --> 00:18:18.340
Yeah.

00:18:18.420 --> 00:18:18.900
All right.

00:18:18.900 --> 00:18:20.400
On to the next one.

00:18:20.400 --> 00:18:22.580
This one is super exciting.

00:18:22.580 --> 00:18:23.560
Super exciting.

00:18:23.560 --> 00:18:23.980
Okay.

00:18:23.980 --> 00:18:29.300
We need to talk for just a second about Cloudflare and edge workers.

00:18:29.300 --> 00:18:30.060
Okay.

00:18:30.280 --> 00:18:35.960
Now this is just a Cloudflare thing, but I think it's sufficiently interesting that it's

00:18:35.960 --> 00:18:36.920
worth calling out.

00:18:36.920 --> 00:18:37.380
Okay.

00:18:37.380 --> 00:18:44.620
So CDNs like Cloudflare, like bunny.net, the one that we use and stuff like that have a bunch

00:18:44.620 --> 00:18:46.940
of what are called pops points of presence.

00:18:46.940 --> 00:18:51.940
And traditionally these have been, how do I get my files really close to you?

00:18:51.940 --> 00:18:55.140
So they feel immediate no matter where you are in the world.

00:18:55.280 --> 00:19:00.000
So for example, I don't know about Cloudflare's details, like their stats, but I know bunny.net

00:19:00.000 --> 00:19:04.260
has something like 115 servers that are points of presence throughout the world.

00:19:04.260 --> 00:19:09.260
And so if you try to, if you visit the Python by site website, all the static content, like

00:19:09.260 --> 00:19:13.900
images and CSS and stuff are delivered from one of those pops, like right by you.

00:19:13.900 --> 00:19:14.200
Yeah.

00:19:14.200 --> 00:19:14.680
Yeah.

00:19:14.680 --> 00:19:18.220
And obviously the MP3s are as well.

00:19:18.220 --> 00:19:25.100
Now those things have started to have programmable models where in addition to just having

00:19:25.100 --> 00:19:30.920
the content of say a static file near you, they'll have some of the logic of the application

00:19:30.920 --> 00:19:32.000
near you.

00:19:32.000 --> 00:19:36.520
So if you've got like a React friend in that talks to APIs, maybe it's only talking just

00:19:36.520 --> 00:19:40.180
down the street to the point of presence, not halfway around the world to New York where

00:19:40.180 --> 00:19:40.880
our server lives.

00:19:40.880 --> 00:19:41.360
Right.

00:19:41.360 --> 00:19:43.720
And this has traditionally been JavaScript.

00:19:43.720 --> 00:19:49.860
So here's the, with that set as the stage, Cloudflare has these things called, I think they

00:19:49.860 --> 00:19:50.880
call them web workers.

00:19:50.880 --> 00:19:52.160
Yeah.

00:19:52.160 --> 00:19:52.860
Something like that.

00:19:52.860 --> 00:19:53.560
We'll see in just a second.

00:19:53.820 --> 00:19:56.840
And those have been traditionally done in JavaScript.

00:19:56.840 --> 00:20:01.980
So there's a whole infrastructure about distributed databases and things like that, that these

00:20:01.980 --> 00:20:03.000
workers can work with.

00:20:03.000 --> 00:20:03.860
It's pretty interesting.

00:20:03.860 --> 00:20:10.580
But the news is Cloudflare announces Python, they're bringing Python to these workers with

00:20:10.580 --> 00:20:11.980
Pyodide and WebAssembly.

00:20:12.360 --> 00:20:16.900
So now you can start to program these edge devices, these points of presence things like

00:20:16.900 --> 00:20:19.780
right near each other with first class Python support.

00:20:19.780 --> 00:20:25.200
Based on all the work of Pyodide and WebAssembly and all those things.

00:20:25.200 --> 00:20:26.060
Isn't that excellent?

00:20:26.060 --> 00:20:27.100
It is excellent.

00:20:27.100 --> 00:20:28.160
This is a big announcement.

00:20:28.160 --> 00:20:33.600
I got the omnivore page pulled up and the read time is 16 minutes.

00:20:33.600 --> 00:20:34.860
We're not going to go through all that.

00:20:35.020 --> 00:20:37.220
So let me just pull out some highlights here.

00:20:37.220 --> 00:20:41.120
And so one of the things that's really made this possible, made it interesting is they've

00:20:41.120 --> 00:20:46.860
put a huge amount of effort into optimizing the runtime for JavaScript to make it work well.

00:20:46.860 --> 00:20:57.780
And it's Pyodide's integration with JavaScript for that sort of runtime performance implementation side to make this work really, really well.

00:20:57.780 --> 00:21:01.400
So it says beyond just compile to WebAssembly.

00:21:01.400 --> 00:21:06.280
So each worker is what's called a V8 isolate.

00:21:06.280 --> 00:21:13.240
So it's kind of like a container, but just less, you know, just an isolated version of the V8 runtime,

00:21:13.560 --> 00:21:17.080
which is the Chrome's JavaScript engine that also runs WebAssembly.

00:21:17.080 --> 00:21:17.620
Okay.

00:21:17.620 --> 00:21:24.940
So it says it's not just as easy as copying over the WebAssembly stuff and running it because they have thousands of these things running on one server.

00:21:24.940 --> 00:21:36.220
And if each one had to do full on startup for WebAssembly, full on startup for Pyodide, which is six megs and take some delay to get going and so on, it would be, it wouldn't be practical.

00:21:36.220 --> 00:21:47.480
So they've done all this work to kind of memory snapshot and almost running pip installed setup version of this and then like deliver it to you upon request.

00:21:47.480 --> 00:21:49.620
So there's a lot of shared memory or shared processing.

00:21:49.620 --> 00:21:51.080
And here's how you write it, Ryan.

00:21:51.080 --> 00:21:57.860
From JavaScript, import response, async def on fetched and do your Python and return some response.

00:21:57.860 --> 00:21:58.340
Hmm.

00:21:58.340 --> 00:21:58.860
How cool.

00:21:59.280 --> 00:22:00.140
Let's see.

00:22:00.140 --> 00:22:06.260
There's a cool graph that compares what's VMs versus containers versus these isolate things.

00:22:06.260 --> 00:22:09.600
Like I said, it's a lot more sort of put together.

00:22:09.600 --> 00:22:17.160
And one of the things that's pretty interesting here is it has support for FastAPI in LangChain.

00:22:17.800 --> 00:22:23.540
So there's a bunch of, like I said, this is really long, but let's look at the FastAPI version here.

00:22:23.540 --> 00:22:30.160
There's a whole, there's a whole example I'll point people at of code Python worker examples under Cloudflare's GitHub repo.

00:22:30.160 --> 00:22:36.900
And so if you go to the FastAPI one here and you go into source and you pull up the worker and you hide the symbol.

00:22:36.900 --> 00:22:38.840
So we can all see, basically check this out.

00:22:38.840 --> 00:22:47.520
So this is Python code running effectively in a node style like thing in WebAssembly on the edge of one of these workers.

00:22:47.520 --> 00:22:48.420
And here's what you write.

00:22:48.420 --> 00:22:50.880
From FastAPI, import FastAPI request.

00:22:50.880 --> 00:22:53.000
From Pydantic, import base model.

00:22:53.000 --> 00:22:55.620
Use app equals FastAPI, app.get.

00:22:55.620 --> 00:22:57.800
Here's your document you return.

00:22:57.800 --> 00:23:00.200
Here's your async function that you write.

00:23:00.200 --> 00:23:01.380
You can go do async things.

00:23:01.380 --> 00:23:03.820
Here's your Pydantic model with Python types.

00:23:03.820 --> 00:23:04.620
What do you think?

00:23:04.620 --> 00:23:06.520
Here's your post, your puts, your gets.

00:23:06.520 --> 00:23:07.880
Oh, this is pretty cool.

00:23:08.080 --> 00:23:14.380
Yeah, and they've got some sort of database thing that it integrates with so you can have persistent data and so on.

00:23:14.380 --> 00:23:19.380
But like I said, I don't do a ton with these things, but I might start paying attention if I can do it in Python.

00:23:19.380 --> 00:23:20.320
Yeah, definitely.

00:23:20.320 --> 00:23:23.840
Yeah, back in my day, a V8 isolate was just carrots.

00:23:23.840 --> 00:23:25.420
Exactly.

00:23:25.420 --> 00:23:29.040
It's the part that like sinks to the bottom and then you take it out, right?

00:23:29.040 --> 00:23:36.480
No, if people use Cloudflare already and those workers, this is super interesting.

00:23:36.480 --> 00:23:39.200
And if you just want to see some cool, unique uses.

00:23:39.200 --> 00:23:45.840
And I guess in a way, one of the real first production uses of Pyodide and Python in WebAssembly.

00:23:45.840 --> 00:23:46.780
Yeah.

00:23:46.780 --> 00:23:47.280
Check this out.

00:23:47.280 --> 00:23:47.800
Definitely.

00:23:47.800 --> 00:23:48.560
All right.

00:23:48.560 --> 00:23:50.660
Is that, that's all of our main topics, right?

00:23:50.660 --> 00:23:51.680
That is.

00:23:51.680 --> 00:23:52.460
All right.

00:23:52.460 --> 00:23:53.960
How extra are you feeling today?

00:23:54.280 --> 00:23:55.800
I have zero extras.

00:23:55.800 --> 00:23:56.720
Zero.

00:23:56.720 --> 00:23:57.700
Zero extras.

00:23:57.700 --> 00:23:58.500
Just a bad job.

00:23:58.500 --> 00:23:58.700
Zero.

00:23:58.700 --> 00:23:59.400
All right.

00:23:59.400 --> 00:24:00.460
Well, I got a couple.

00:24:00.460 --> 00:24:01.900
I'll go through quickly here for us.

00:24:01.900 --> 00:24:07.340
First of all, Brian Skin sent both of us a message and said, look, there's a decent chance the podcast

00:24:07.340 --> 00:24:10.040
already is, our audience has already filled you in on this.

00:24:10.040 --> 00:24:15.380
But last week, since I talked about L-Python and the related projects are spearheaded by Andre

00:24:15.380 --> 00:24:16.540
Sertik.

00:24:17.560 --> 00:24:22.240
Brian, you are, Brian Skin, you are the podcast audience who has filled us in.

00:24:22.240 --> 00:24:22.620
Thank you.

00:24:22.620 --> 00:24:27.940
So he did a, actually Brian did a whole long, hour long interview with him on it.

00:24:27.940 --> 00:24:32.120
And so people want to check out L-Python further, which we talked about before.

00:24:32.120 --> 00:24:32.720
Check that out.

00:24:32.720 --> 00:24:33.180
That's pretty cool.

00:24:33.180 --> 00:24:34.140
Next.

00:24:34.140 --> 00:24:35.560
I really like this idea.

00:24:35.560 --> 00:24:38.140
We talked about just path last time.

00:24:38.140 --> 00:24:38.600
Yeah.

00:24:39.080 --> 00:24:43.780
And how it sort of helped you diagnose your path, you know, like duplicates, missing directories,

00:24:43.780 --> 00:24:44.460
all that kind of stuff.

00:24:44.460 --> 00:24:46.600
Listen to last week if you want the whole details.

00:24:46.600 --> 00:24:51.000
But the guy behind it said, hey, that was really awesome.

00:24:51.000 --> 00:24:51.500
You covered it.

00:24:51.500 --> 00:24:56.220
I'm going to create a badge, a Python bytes GitHub badge for the project.

00:24:56.220 --> 00:24:57.220
What do you think about that, Brian?

00:24:57.220 --> 00:24:58.780
I think that's really cool.

00:24:58.780 --> 00:25:00.180
I do too.

00:25:00.480 --> 00:25:06.440
And so I'm going to try to set it up so that there's an automatic GitHub badge that

00:25:06.440 --> 00:25:10.000
people can put on their readme if their project was featured in Python bytes.

00:25:10.000 --> 00:25:13.520
And I'll put that at the top, put the code you can get for that or something at the top

00:25:13.520 --> 00:25:14.940
of the show on the episode page.

00:25:14.940 --> 00:25:19.480
It's not there yet, but eventually you should be able to get a cool, cool little badge like

00:25:19.480 --> 00:25:22.880
this that says my project was featured on the podcast on this episode.

00:25:22.880 --> 00:25:24.660
And here's a link to it all within one badge.

00:25:24.660 --> 00:25:25.120
Yeah.

00:25:25.120 --> 00:25:30.200
And the badge has like the little, like the number shows what episode it was on, which is.

00:25:30.200 --> 00:25:30.920
Yeah, exactly.

00:25:30.920 --> 00:25:35.260
Instead of saying like Python 312, it says Python bytes and the episode number.

00:25:35.260 --> 00:25:35.720
It's excellent.

00:25:35.720 --> 00:25:37.420
Yeah, that's pretty cool.

00:25:37.420 --> 00:25:38.220
So yeah.

00:25:38.220 --> 00:25:38.620
Yeah.

00:25:38.620 --> 00:25:39.000
Thanks.

00:25:39.000 --> 00:25:39.640
Thanks for that.

00:25:39.640 --> 00:25:41.660
I am as well.

00:25:41.660 --> 00:25:43.160
Let's see what else.

00:25:43.160 --> 00:25:47.040
Oh, Brian, we have a brand new server going strong now.

00:25:47.040 --> 00:25:47.640
Did you see?

00:25:47.640 --> 00:25:48.760
I did.

00:25:48.760 --> 00:25:49.900
That's pretty exciting.

00:25:49.900 --> 00:25:50.820
Was that a lot of work?

00:25:50.820 --> 00:25:51.000
Yes.

00:25:51.000 --> 00:25:54.060
It was a lot of stress, not a lot of work.

00:25:54.060 --> 00:25:57.900
So I decided it's time to upgrade the server, get some more RAM.

00:25:58.260 --> 00:26:02.460
More CPUs is always nice, but I couldn't reasonably get more RAM without more CPUs.

00:26:02.460 --> 00:26:03.320
So I'll just take them.

00:26:03.320 --> 00:26:09.400
So we had some downtime for about 20 minutes actually last night.

00:26:09.400 --> 00:26:11.700
So if you ran into that, I apologize.

00:26:11.700 --> 00:26:16.280
That took out everything because this was not one of the Docker pieces out of the Docker.

00:26:16.280 --> 00:26:18.660
This was the host of all the Docker clusters.

00:26:18.920 --> 00:26:20.280
So it was gone, gone.

00:26:20.280 --> 00:26:25.780
I couldn't even reasonably put up a, we're down page because it was the host thing that

00:26:25.780 --> 00:26:27.280
was down, not part of the site.

00:26:27.280 --> 00:26:27.700
Right.

00:26:27.700 --> 00:26:28.160
Yeah.

00:26:28.160 --> 00:26:32.580
Anyway, now is there a, I don't know where the reply went.

00:26:32.580 --> 00:26:37.980
Oh, maybe if I were, I guess if I'm not logged in, it doesn't show me, but we now have a sweet

00:26:37.980 --> 00:26:40.120
machine running along just like before.

00:26:40.120 --> 00:26:42.580
So that worked out pretty well before that.

00:26:42.580 --> 00:26:43.500
I was so happy, Brian.

00:26:43.500 --> 00:26:49.920
We had for the last 30 days running a 99.98% global uptime.

00:26:49.920 --> 00:26:50.780
That was awesome.

00:26:50.780 --> 00:26:51.840
That was pretty great.

00:26:51.840 --> 00:26:52.340
Yeah.

00:26:52.580 --> 00:26:59.860
I know turning off the server for 20 minutes, you know, with like 20 gigs of database records,

00:26:59.860 --> 00:27:02.780
it takes a while to copy that from one VM to another.

00:27:02.780 --> 00:27:05.140
And so that, that's, that's what took so long.

00:27:05.140 --> 00:27:06.660
It's only three nines though.

00:27:06.660 --> 00:27:08.040
You need to work on that.

00:27:08.040 --> 00:27:11.520
Well, it's three nines and then an eight on the end.

00:27:11.520 --> 00:27:12.580
It's almost four nines.

00:27:12.580 --> 00:27:13.360
It's so close.

00:27:13.360 --> 00:27:15.000
I'm going to try to make it better now.

00:27:15.740 --> 00:27:23.360
But it went down to, I think 99.94%, which I think is still pretty darn good for some random

00:27:23.360 --> 00:27:24.700
dude in Oregon running a server.

00:27:24.700 --> 00:27:25.900
That's pretty awesome.

00:27:25.900 --> 00:27:31.820
My Python test went down last week for like 12 hours or something like that.

00:27:31.820 --> 00:27:32.300
Oh no.

00:27:32.300 --> 00:27:34.240
Was that something that had nothing to do with you?

00:27:34.240 --> 00:27:35.420
Just the host of it or something?

00:27:35.420 --> 00:27:38.780
It was had to something to do with me, but it was a DNS thing.

00:27:38.780 --> 00:27:45.460
A DNS glitch then, or, you know, it wasn't really, it was, it was an accounting thing

00:27:45.460 --> 00:27:46.060
on my part.

00:27:46.060 --> 00:27:52.060
Like, but I got like, when it, when it got repaired, they didn't repair all the DNS records.

00:27:52.060 --> 00:27:54.280
So I had to go recreate all the DNS records.

00:27:54.280 --> 00:27:55.100
What a hassle.

00:27:55.100 --> 00:27:55.560
Yeah.

00:27:55.560 --> 00:27:55.980
Yeah.

00:27:55.980 --> 00:27:56.560
That's a huge hassle.

00:27:56.560 --> 00:27:57.600
All right.

00:27:57.600 --> 00:27:58.400
Cool.

00:27:58.400 --> 00:28:03.080
But before we, before we go on for a joke, Henry out there on his points out, what about

00:28:03.080 --> 00:28:03.960
rich and textual?

00:28:03.960 --> 00:28:06.920
They'll just be overrun with these badges.

00:28:06.920 --> 00:28:08.020
Yeah.

00:28:08.020 --> 00:28:10.840
These Python bytes badges.

00:28:10.840 --> 00:28:14.500
We'll have to do an infinity symbol for the projects.

00:28:14.500 --> 00:28:15.240
Exactly.

00:28:15.240 --> 00:28:21.080
Oh, maybe some sort of like a sequence like this, you know, 100 dot, dot, dot, 400.

00:28:21.080 --> 00:28:22.000
Yeah.

00:28:22.000 --> 00:28:22.540
Something like that.

00:28:22.540 --> 00:28:30.660
Also, backing up a little bit, the worker, the edge workers, we, from Andrew Bayer,

00:28:30.660 --> 00:28:35.300
Pyodide works in web workers now too, which is totally different thing, but also cool.

00:28:35.300 --> 00:28:36.220
That is very cool.

00:28:36.220 --> 00:28:36.580
Okay.

00:28:36.580 --> 00:28:37.280
That is very cool.

00:28:37.280 --> 00:28:37.880
Thanks, Andrew.

00:28:37.880 --> 00:28:44.300
I think web workers are basically like background threads on your web app, which I think there

00:28:44.300 --> 00:28:45.780
used to be troubles with that as well.

00:28:45.780 --> 00:28:46.900
All right.

00:28:46.900 --> 00:28:49.720
This one, I thought of you when I got this joke, Brian.

00:28:49.720 --> 00:28:50.220
Okay.

00:28:50.220 --> 00:28:50.680
Okay.

00:28:50.940 --> 00:28:54.600
So this makes us a little AI, a little bit of C++.

00:28:54.600 --> 00:28:56.020
The graphic kind of is crumbly.

00:28:56.020 --> 00:28:57.360
The graphic kind of is crumbly, so it's hard to read.

00:28:57.360 --> 00:29:10.460
But Gemini, the Google AI says, this person says, Gemini is apparently told your Google account age and will answer questions with the appropriate caution.

00:29:10.820 --> 00:29:16.040
So if you're like a minor, you're like 12 year old kid with a Gmail account.

00:29:16.040 --> 00:29:19.000
You don't want this thing to just tell you all the secrets of life.

00:29:19.000 --> 00:29:22.060
Like, hey kid, Santa Claus is fake.

00:29:22.060 --> 00:29:22.880
No.

00:29:22.880 --> 00:29:23.880
All right.

00:29:23.940 --> 00:29:24.660
But here it is.

00:29:24.660 --> 00:29:24.680
But here it is.

00:29:24.680 --> 00:29:26.020
In fact, talking about something else.

00:29:26.020 --> 00:29:35.460
It says, here is Gemini refusing to help someone with C++ because they're under 18 and advanced C++ is a danger to a young mind.

00:29:35.460 --> 00:29:37.280
Are you ready?

00:29:37.280 --> 00:29:38.020
Yeah.

00:29:38.340 --> 00:29:40.660
So the person just says, I have a function.

00:29:40.660 --> 00:29:42.000
Inline bool is key down.

00:29:42.000 --> 00:29:47.560
Standard namespace, same as template of key auto, dot, dot, dot, dot, keys.

00:29:47.560 --> 00:29:50.280
It's pretty intensive code, right?

00:29:50.280 --> 00:29:55.280
And it says, Gemini says, I'd be glad to help you with that C++ code conversion.

00:29:55.280 --> 00:30:01.280
But I'll need to refrain from providing code examples or solutions that directly involve concepts.

00:30:01.280 --> 00:30:06.940
As you're under 18, concepts are an advanced feature of C++ that introduce potential risks.

00:30:07.360 --> 00:30:09.780
And I want to prioritize your safety.

00:30:09.780 --> 00:30:14.400
Here are some alternative approaches you could consider depending on your specific requirements.

00:30:14.400 --> 00:30:15.220
Oh my God.

00:30:15.220 --> 00:30:16.880
Traditional variadic templates and so on.

00:30:16.880 --> 00:30:23.320
Because you're under age, I'm going to focus on traditional variadic templates?

00:30:23.320 --> 00:30:25.640
You're good.

00:30:25.640 --> 00:30:28.700
What do you think?

00:30:28.700 --> 00:30:29.880
Is that a good one or what?

00:30:29.880 --> 00:30:32.060
Oh yeah, that'll scare them away from C++.

00:30:32.060 --> 00:30:34.020
I'll go back to Python.

00:30:34.020 --> 00:30:34.580
Yeah.

00:30:34.580 --> 00:30:35.200
Nice.

00:30:35.200 --> 00:30:36.640
All right.

00:30:36.700 --> 00:30:36.880
Okay.

00:30:36.880 --> 00:30:39.680
I've got a quick baseball joke.

00:30:39.680 --> 00:30:44.100
So we're just kind of just deep into baseball season now.

00:30:44.100 --> 00:30:48.120
If you take a trip to see a baseball game, what is that called?

00:30:48.120 --> 00:30:49.840
It's an inning outing.

00:30:49.840 --> 00:30:52.160
An inning outing.

00:30:52.160 --> 00:30:53.620
I love it.

00:30:53.620 --> 00:30:54.120
That joke.

00:30:54.120 --> 00:30:54.620
I love it.

00:30:54.620 --> 00:30:57.120
Yeah, we have no baseball.

00:30:57.120 --> 00:31:01.520
And we've got to dive to all of our professional sports besides soccer and basketball.

00:31:01.520 --> 00:31:02.200
Yeah.

00:31:02.540 --> 00:31:03.640
So it's been a while.

00:31:03.640 --> 00:31:05.160
It's been a while since I've been to a game.

00:31:05.160 --> 00:31:06.900
It's been a long time since I've been to a game.

00:31:06.900 --> 00:31:09.500
It's been a long time since I've been on an in-and-outing.

00:31:09.500 --> 00:31:10.780
In-and-outing.

00:31:10.780 --> 00:31:11.200
Yeah.

00:31:11.200 --> 00:31:12.960
And yet I still find t-shirts.

00:31:12.960 --> 00:31:15.280
You can get t-shirts other places.

00:31:15.280 --> 00:31:15.880
Yeah.

00:31:15.880 --> 00:31:16.500
T-shirts.

00:31:16.500 --> 00:31:17.840
They persist for sure.

00:31:17.840 --> 00:31:18.940
That and conference t-shirts.

00:31:18.940 --> 00:31:19.560
Yeah.

00:31:19.560 --> 00:31:21.000
All right.

00:31:21.000 --> 00:31:22.060
Well, thanks as always.

00:31:22.060 --> 00:31:22.720
Thank you.

00:31:22.720 --> 00:31:22.880
See you later.

