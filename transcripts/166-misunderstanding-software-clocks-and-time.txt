00:00:00 Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:04 This is episode 166, recorded January 22nd, 2020.

00:00:10 I'm Brian Okken.

00:00:11 And I'm Michael Kennedy.

00:00:12 And this episode is brought to you by DigitalOcean.

00:00:14 We'll talk about them more later.

00:00:16 But do you want to get into quantum stuff or what do you got for us first?

00:00:20 Yeah, how about that?

00:00:21 Like, there were many crazy ideas in programming, right?

00:00:25 Like infrastructure as code or, you know, infrastructure as a service and all the cloud computing things.

00:00:31 And, you know, there's this really cool quote from William Gibson, the science fiction writer, is that the future is here.

00:00:38 It's just not evenly distributed, which is pretty cool.

00:00:41 And I think this thing I'm about to talk about is a little bit about making that way more even.

00:00:47 So, Amazon, AWS, you know, the bookstore is announcing a quantum computing as a service.

00:00:55 Okay, we were expecting this to happen.

00:00:57 Yeah, we were.

00:00:58 Well, the thing is the quantum computers are so early stage.

00:01:03 They're so specialized.

00:01:04 They look more like science projects than they do any sort of computer.

00:01:09 They're not in square boxes.

00:01:10 They're usually, like, dangling from the ceiling with, like, all sorts of wires shooting out of them.

00:01:14 Like, you know, you can't go get a quantum computer.

00:01:17 But there are quantum computers that can do limited amounts of computing.

00:01:22 And so, learning to program them is something that might be a good idea, right?

00:01:28 Like, I have no idea what programming a quantum computer is going to feel like because it's just the conceptions.

00:01:34 I just haven't formed it fully in my mind.

00:01:37 Do you have a good sense of what this is going to be like?

00:01:39 No.

00:01:39 Well.

00:01:39 I think we're at the punch card stage still.

00:01:41 Yeah, yeah, exactly.

00:01:43 So, this new service called Amazon Bracket from AWS is a fully managed service that allows scientists, researchers, and developers,

00:01:51 and people just interested in quantum computing to begin experimenting with computers from multiple quantum hardware providers in a single place.

00:01:59 So, there's a handful of people creating these quantum computers, and they have different capabilities and whatnot.

00:02:06 So, you can actually select more than one provider for your quantum computer.

00:02:12 So, we all know about bits, right?

00:02:15 Bits are 0 and 1, on and off, that sort of thing.

00:02:17 That's the conception in my mind that it's pretty easy for things to work.

00:02:21 But quantum computers use a more sophisticated representation known as a qubit or a quantum bit.

00:02:27 And each qubit exists in a state of 1 or 0.

00:02:31 But because of its quantum nature, it also, in superpositions of 1 or 0, which means it can simultaneously occupy both states.

00:02:40 So, it's basically a two-dimensional vector of complex numbers of all these different states, which means it has way more data representation and computing power than just 0 or 1.

00:02:51 You know, it has, like, near infinite.

00:02:53 So, this service is built to give people some, basically, hands-on experience programming.

00:03:00 So, I linked to the Verge article talking about this.

00:03:02 I also linked to the direct announcement.

00:03:05 Now, Brian, do you see that code section down there, that little example?

00:03:09 Yes.

00:03:10 I have no idea what it's going to print.

00:03:12 I have no idea what it's going to print either.

00:03:13 But if not caring what the computational output is, what does that remind you of?

00:03:19 Python.

00:03:20 It definitely looks like Python.

00:03:21 And in the announcement, you can say, in here, you can use a notebook to explore writing in this bracket service, bracket language.

00:03:29 And, yeah, so I don't know if this is literally Python or is just very, very much like Python.

00:03:34 But if you're a Python developer, you know, you can get into this pretty easy, easily, I would suspect.

00:03:39 Yeah, it definitely looks like it's a notebook or something.

00:03:42 Yeah, so if you want to know how quantum computers work, if you want to play with programming them, you know, check this Amazon bracket thing out.

00:03:50 I've not checked the pricing.

00:03:52 It seems like it might not be that cheap.

00:03:54 But, yeah, it still looks pretty interesting.

00:03:56 Well, I think they're really trying to make it available to people that, in a researcher-student situation, so it's probably not terrible.

00:04:03 But I don't know.

00:04:04 Yeah, yeah.

00:04:05 Who knows?

00:04:06 But it's definitely interesting.

00:04:07 And people who are interested can now go and just fire up a quantum computer in the cloud and, through a Jupyter notebook, play with it, which is pretty awesome.

00:04:15 Yeah.

00:04:16 So let's go from quantum to virtual.

00:04:19 Yes, let's do it.

00:04:22 Do it.

00:04:22 Take a step.

00:04:23 Okay.

00:04:23 I couldn't resist.

00:04:24 But, you know, not really that cool.

00:04:27 But anyway, virtual environments.

00:04:29 Right.

00:04:29 With Python.

00:04:30 I know that both of us use virtual environments.

00:04:32 All the time.

00:04:33 I still have coworkers that don't.

00:04:35 And I know that some people still, I don't know.

00:04:38 There's a lot of old guides and tutorials on how to use virtual environments.

00:04:42 And I really didn't know I needed this.

00:04:44 But Brett Cannon wrote a quick and dirty guide on how to install packages for Python.

00:04:49 And it is mostly just basically walking people on how to use virtual environments.

00:04:54 I, of course, already know how to do that.

00:04:56 But I think it's good to have something like this available to throw to people that aren't using them yet because it's pretty short and simple.

00:05:03 One of the things I love about the article is it uses the --prompt flag for creating a virtual environment, which will make it so that your prompt variable or your prompt isn't just V and V.

00:05:14 It's something useful for you to see it.

00:05:17 Yeah, that is super cool.

00:05:18 I love that recommendation about the --prompt.

00:05:22 And in the article, Brett shows you how to have it take the current working directory as a default, right?

00:05:30 So it'll automatically grab that for you, which is cool.

00:05:33 I've got a little bash snippet that I use that essentially does that in my environment.

00:05:38 He hints at that in Python 3.9, there's going to be an improvement that instead of having some code that looks up your current directory name,

00:05:49 that you can just pass in a dot for the prompt and it will just name it that, which I'm looking forward to that.

00:05:56 That's cool.

00:05:57 Yeah, that's really cool.

00:05:58 Maybe I just want to start running 3.9 beta just for that.

00:06:01 Maybe.

00:06:03 Have you started playing with 3.9 yet?

00:06:05 No, I haven't.

00:06:06 Oh, okay.

00:06:06 I'm still actually, I'm still trying to decide what version I want to use because traditionally use Homebrew and something went wrong with Homebrew for Python 3.8.

00:06:15 So if you try to install Python 3.7 from Homebrew, you still get 3.7, which is frustrating, but I haven't decided that I'm wanting to break away from that just yet.

00:06:27 But it's starting to get to the point where maybe I'll just go to 3.9.

00:06:30 I don't know.

00:06:31 I just still use the installers from the Python.org site.

00:06:35 Yeah, I'm going to be back there too.

00:06:36 But yeah, this is cool and it's nice to have this.

00:06:39 This is real clear and concise.

00:06:40 And yeah, thanks, Brett.

00:06:43 So do you know what else is cool?

00:06:45 DigitalOcean is pretty cool.

00:06:46 DigitalOcean is awesome.

00:06:47 Yeah.

00:06:47 So DigitalOcean is sponsoring this episode.

00:06:50 They have awesome infrastructure and an awesome product and we use them for our services.

00:06:55 Do you have a memory intensive workload?

00:06:58 Something like high performance SQL or NoSQL databases?

00:07:01 In-memory caches like Redis or Indexes?

00:07:05 Some kind of large data analysis runtime?

00:07:08 Well, if so, you need DigitalOcean's new memory optimized droplets, or at least you should check

00:07:13 them out.

00:07:13 So check them out by going to pythonbytes.fm/DigitalOcean and get $100 credit.

00:07:19 And that's back.

00:07:20 We used to be lower, but now it's $100.

00:07:22 Yay.

00:07:22 Yay.

00:07:23 Well done, DigitalOcean.

00:07:24 Thanks for supporting the show.

00:07:25 Sometimes the best thing you can do, Brian, is just say no.

00:07:29 All right?

00:07:30 It's easy to say yes to everything, but when you say yes to something, you're actually saying

00:07:33 no to something else.

00:07:35 Yeah, I've heard that.

00:07:35 That's kind of like the whole pointing a finger and you three point back at you and stuff like

00:07:40 that.

00:07:40 Yeah, exactly.

00:07:41 So this next thing I want to talk about is something that made the rounds the last couple of weeks.

00:07:45 And it's pretty interesting.

00:07:46 It's an article that sort of lays out a case against the no code movement.

00:07:51 And it's entitled, Say No to the No Code Movement by Alex Hudson.

00:07:55 And it's funny.

00:07:57 I don't know.

00:07:57 I might be showing my age, my gray bits in my beard or whatever, my goatee.

00:08:03 But he starts off by talking about 2020 is going to be the year of no code movement where

00:08:08 you can write business logic and entire applications without having to train the training of a software

00:08:14 developer.

00:08:14 I feel like I've heard that before, last century even.

00:08:17 How about you?

00:08:18 Well, yeah.

00:08:19 Are we talking like round trip stuff like UML round trip things?

00:08:23 Yeah, I was thinking of like Vizio and some of these other sort of business intelligence,

00:08:28 draggy droppy things that were going to, you know, quickly replace us as software developers.

00:08:34 And we're just going to be out of a job.

00:08:35 So you probably shouldn't study that because either outsourcing or there's no code stuff

00:08:39 is going to like crush our jobs.

00:08:41 I don't know.

00:08:42 I feel like software has been pretty good over the last 20 years.

00:08:44 Yeah, that's weird.

00:08:47 So yeah.

00:08:48 So the reason I'm bothering to cover this though is I do think it's interesting that this is

00:08:54 something of a trend.

00:08:55 And I think that Alex does a pretty good job of laying out what some of the issues are.

00:09:01 So it's easy to get sucked into wanting this, but it's also good to maybe know where like,

00:09:06 hey, this might make sense to try this, this no code idea.

00:09:10 So examples include like Salesforce, right?

00:09:14 With Salesforce, you can sort of wire stuff together to make things happen.

00:09:17 Other examples were Zapier were doing things.

00:09:20 Yeah.

00:09:20 Maybe if this, then that.

00:09:21 Yeah.

00:09:22 If this, then that.

00:09:23 I feel like Zapier actually, you know, Alex gave it a pretty good vote.

00:09:27 And I agree as well because it's not so much about trying to write software with Zapier.

00:09:32 It's about trying to just do integration.

00:09:34 I feel like no code integration isn't terrible if something awesome like Zapier can do it.

00:09:40 But basically the idea is like, look, there's people want to transform business processes

00:09:46 into the software domain.

00:09:47 And they might want to do that because change control of like, how do you change your business

00:09:52 and understand how it works is now a software problem.

00:09:54 It's easier to innovate on what makes the business distinct because now it's clear.

00:09:59 You're like, these are the things we do.

00:10:01 Everyone does this, but this, this is our special sauce right here.

00:10:04 And there's a cool quote from Satya Nadella that says, every company is a software company

00:10:09 these days.

00:10:10 And so there's a lot of pressure to take maybe traditional companies and organizations that don't have a software team or they have a very small software team that's too busy just keeping the lights on to help everyone else with their little issues.

00:10:23 There's this temptation to say, okay, well, what is our no code story?

00:10:27 Like how do we get some systems that just like let people write code?

00:10:30 You know, Excel sort of played that role to a large degree.

00:10:34 So the article's good for like laying out some of the issues.

00:10:38 Starts out, well, the first assumption is that writing text, like writing business logic in text forms is something that everybody hates, right?

00:10:46 Outside of the software development community, right?

00:10:48 Like if I'm an accountant, I don't want to write text logic because, well, you have to be accurate and things like that, right?

00:10:57 And if you had boxes, you can drag them together.

00:10:59 That might be better.

00:11:00 So it talks about how, you know, there's, it's a simpler abstraction that's really easy to work with.

00:11:07 Or it's simpler syntax.

00:11:09 And in both of those cases, you really run into the problem of, well, you can do the simple little thing first.

00:11:16 Like think of a visual, like a flow chart, right?

00:11:19 Like if you could just run a flow chart.

00:11:21 Well, for a really simple problem, that's fine.

00:11:24 But if you try to solve a real problem, you have a flow chart with like a thousand boxes and lines going everywhere.

00:11:29 That's not going to help you.

00:11:31 Another one, another example of the issues you run into is that many of the no code advocates

00:11:37 are building significant systems by pulling together off the shelf apps and integrating them.

00:11:41 This is kind of like Zapier.

00:11:42 But, you know, Zapier, I think, use right is still good.

00:11:46 But the problem is all the logic becomes implemented as a configuration of all these external systems.

00:11:51 And you're limited by what they can do and what they can accept and so on.

00:11:55 So, yeah.

00:11:56 He said, look, if there was a better way to create software than writing text, most of us would just drop it like a hot rock.

00:12:02 And we'd be like, yeah, okay, what's next?

00:12:04 Let's do that.

00:12:04 All right.

00:12:05 It would be great.

00:12:05 It's not that we love typing so much.

00:12:08 Yeah.

00:12:08 So, I guess, in conclusion, it's like, where does the no code stuff fail in practice?

00:12:13 Well, you get like 80% of the way there.

00:12:15 And then you're like, well, all these edge cases make this so complicated.

00:12:19 Or you end up with all the little edge cases and details that is like this little graphical whatever is so complicated that it's worse than text.

00:12:26 You know, things like that.

00:12:28 But where it might be useful is for a little proof of concept demonstrations and things like that.

00:12:33 Like, hey, here's the happy path of the main thing we want to do.

00:12:37 I threw this together with something like Salesforce or some other BI tool or something.

00:12:42 And look what we got.

00:12:43 Right.

00:12:43 Then you could go rewrite that with Python and Matplotlib or, you know, whatever it is you're trying to solve.

00:12:49 So, I thought this was an interesting take on the whole no code movement.

00:12:53 And I also thought it was interesting that, like, this is going to be the year of no code when I remember hearing that in the 90s.

00:13:00 Yeah.

00:13:00 Actually, my first job at HP was using a visual language for measuring systems.

00:13:07 And it was, I think we should look at some of the failures of the 90s.

00:13:12 Because what happened is what's going to happen again.

00:13:16 Like you said, you have systems that go 80% of the way.

00:13:19 But the corner cases make it so that you still have to be an expert at this tool to do it.

00:13:25 So, you still hire programmers.

00:13:26 But they only are gaining experience with this one tool that they don't even really like.

00:13:31 And they can't transfer to any other job.

00:13:33 And that's terrible.

00:13:35 It's not good.

00:13:36 Plus, visual stuff is sort of really fun when you get started.

00:13:39 But you quickly need a wrist brace.

00:13:42 Working on the mouse all day long is really actually fatiguing to your hands.

00:13:47 That's a good point.

00:13:48 I hadn't even thought about that.

00:13:50 But, oh, yeah.

00:13:51 For sure.

00:13:51 It was a program called VEE.

00:13:53 And I don't think it's even in place anymore.

00:13:55 It was a visual thing.

00:13:57 And we used to joke that if you buy the box set, it comes with a wrist brace.

00:14:01 Yeah, that's not good.

00:14:03 You know, this next item that you got coming up here, I checked this out.

00:14:08 And this is some deep stuff here.

00:14:10 Tell us about it.

00:14:11 So this isn't really a topic that we normally kind of cover.

00:14:14 But it's also something that I was pleased and surprised to see come up with at North Bay Python.

00:14:19 I'm going to highlight Shaw.

00:14:21 And his full name is Shadeed Wallace-Stepter, I think.

00:14:25 But he says he goes by Shaw.

00:14:26 He spoke at North Bay Python.

00:14:29 And we're linking to an article that is his article but also includes a link to the video of the presentation at North Bay Python.

00:14:37 And it's called What I Learned Going from Prison to Python.

00:14:42 And it is Python related.

00:14:44 But the Python take comes in the end, like the last few minutes.

00:14:48 It is a 40-minute video.

00:14:50 But you can even just listen to it because there's no visuals.

00:14:53 I'm not going to really summarize it too much other than this is an amazing story.

00:14:58 And people need to listen to it.

00:15:01 He's talking about how he went from a generational poverty situation to a crime as a teen.

00:15:09 It's interesting that he talks about one of the reasons why he started doing some crimes.

00:15:15 It wasn't because he needed to.

00:15:17 It was because he had zero control over the rest of his life.

00:15:20 And it made him, it was something that he felt had control over.

00:15:24 And then that gets him to the point where his best friend, like, dies on his shoulder by being shot.

00:15:29 And then he ends up in prison and spends 19 years there, 19 years of a 27-year sentence.

00:15:37 But this fight that he had to do to just to fight against the entire system, trying to keep him in poverty or keep him in prison.

00:15:45 It is an incredible story for him.

00:15:48 But I think it also talks about how, regardless of your politics, poverty and the prison system in our country is broken and we need to fix it.

00:15:56 So that's why I wanted to highlight it.

00:15:58 Yeah.

00:15:58 The thing that touched me from this was, I think for the first time, maybe ever, I understood why people would go down some of these paths.

00:16:09 Because, you know, people make some of these decisions and they're just so clearly a bad idea.

00:16:14 You know what I mean?

00:16:15 I'm thinking of, like, drug addicts for hard, hard drugs like heroin or meth.

00:16:22 Or, you know, people who are burglarizing houses and robbing, play armed robbery and stuff.

00:16:28 And just think, man, there's got to be a better way.

00:16:31 But listening to his story, I really understood it.

00:16:34 And, you know, I didn't get all the way to the end.

00:16:37 So it's awesome that Python, it sounds like, helped him move beyond that.

00:16:42 But do you have the last bit of the story?

00:16:44 Or are you going to give away too much?

00:16:45 So, no, I don't think it'll give it away.

00:16:47 I think he ends in a very positive note on talking about the open source community.

00:16:50 He eventually gets into, he goes from studying law to studying entrepreneurship to meeting Jessica.

00:16:58 I'm going to get her last name wrong.

00:17:00 Forgot it.

00:17:01 Jessica McKellar.

00:17:01 Yeah, McKellar.

00:17:02 Yeah.

00:17:02 Sounds right.

00:17:03 Although he said he met her in a journalism setting, but she was, like, not very good at journalism or wasn't a journalist or something like that.

00:17:11 But anyway, she's a great person.

00:17:12 But one of the things that people face when they come out of a prison system, especially if they came in in a poverty situation, is they've got no skills and no job history or things like that.

00:17:24 Or they may have no skills.

00:17:26 And even if they do have skills, who's going to hire them?

00:17:29 But the open source community is just a everybody's welcome.

00:17:34 And coding, there's more situations in coding where I don't know either you can do the job.

00:17:41 And that equality of background of just, it's just about whether you can get stuff done.

00:17:48 It isn't just about that.

00:17:50 We also, you have to be able to communicate and all things like that.

00:17:53 But we don't really care as much about your college pedigree or anything.

00:17:58 It's either you're a great coder or you're not.

00:18:00 And that's a cool story.

00:18:02 And his, even equates the open, he was shocked by the open source community of just working on stuff and giving it away.

00:18:09 Yeah.

00:18:09 But apparently there was a program at San Quentin that O'Reilly gave a bunch of laptops there so that people could watch some of the O'Reilly training videos there.

00:18:19 And that's how he learned Python.

00:18:21 So that's cool.

00:18:22 Man, super cool.

00:18:23 Yeah, I loved his story and it was really different.

00:18:26 So I'm happy he shared it and happy you covered it.

00:18:30 Yeah.

00:18:30 Speaking of covering things, have we covered GUIs?

00:18:32 I don't think so.

00:18:33 We should probably cover GUIs.

00:18:34 We probably should.

00:18:35 But, you know, what I really like about our listeners and our audience is they really help round us out.

00:18:42 You know what I mean, Brian?

00:18:43 Yeah.

00:18:43 Man, like I'll bring up one thing.

00:18:45 I'm like, oh, I heard of this one thing.

00:18:47 Can you guys believe this is a thing?

00:18:48 And they're like, and here, you know, here's the seven others and here are the trade-offs.

00:18:52 Did you know about this?

00:18:53 Yeah, and I can't believe you haven't covered this already.

00:18:55 Yeah, exactly.

00:18:56 So I've already got a bunch of stuff on Q that has that sort of take to it.

00:19:02 But here's one called QUIC, a QT5-based GUI generator for CLIC.

00:19:09 So CLIC is an argpars-based command line interface tool or framework, I guess, where you can put decorators onto different functions and say,

00:19:20 these are some of the arguments, these are required, these are not required, these are the types, and so on.

00:19:25 And it lets you write command line interfaces.

00:19:27 And so QUIC will take those and naturally understand the message given to CLIC or argpars and then create a GUI out of it.

00:19:39 No way!

00:19:40 Yeah, that's pretty cool, right?

00:19:41 So you don't hardly have to do anything other than throw like a QUIC.run and give it a function or something to that effect, and off it goes.

00:19:49 Oh, that is cool.

00:19:50 Yeah, I'm totally going to try this out.

00:19:52 Yeah, it's not super popular.

00:19:54 It's got, you know, like 62 stars and four contributors.

00:19:58 It was changed this month, so that's cool.

00:20:00 But just the example.

00:20:02 So it's a little bit old, but I think it's an interesting take and an interesting idea.

00:20:06 And if it's going to work for people, they can definitely check it out and contribute to it, so on.

00:20:11 So, yeah, I think this is a nice one.

00:20:13 It's based or inspired, not based on, inspired by GUI, G-O-O-E-Y, which is also really, really nice.

00:20:20 But you have to be a little bit more explicit on how it presents the UI for GUI.

00:20:26 You've got to say, here's a, I want a calendar widget for this thing or whatever.

00:20:30 But yeah, anyway, it'll even let you still run your standard click-based CLI app the same.

00:20:36 But then if you throw in a --GUI, it'll turn it into a GUI, even if you just want to change the command line arguments, which is, yeah, it looks pretty nice.

00:20:43 Yeah, a GUI, it's an interesting function call.

00:20:47 Yeah, exactly.

00:20:48 Yeah, so thank you, Ricky Tici, for sending this along and recommending it.

00:20:53 It's a good one.

00:20:53 Yeah, thanks.

00:20:54 Okay, we're not to jokes yet, but I have kind of a funny one coming up.

00:20:58 So it's interesting.

00:21:00 So there's a couple articles, I think it's in a series, falsehoods programmers believe about time.

00:21:07 And wait, what is the title of the blog?

00:21:11 Infinite Undo.

00:21:13 Oh, really?

00:21:15 Yeah, yeah.

00:21:16 It's all like, it all fits together.

00:21:17 I love it.

00:21:18 Sorry, keep going.

00:21:18 Then there's a second follow on one.

00:21:20 Must be a VI person.

00:21:21 More falsehood programmers believe about time.

00:21:23 Wisdom from the crowd edition.

00:21:25 So I'm sorry, I can't find your name on the blog, but wrote this article about falsehoods.

00:21:31 The interesting thing is very few of them have links to tell you why they're false.

00:21:35 But these are all assumptions that are wrong.

00:21:38 I mean, it starts with, there's always 24 hours in a day.

00:21:42 And, you know, there are things that we just sort of know are kind of wrong sometimes.

00:21:46 Like when we change the time, it's different.

00:21:48 Months have either 30 or 31.

00:21:50 A week begins and ends on the same month.

00:21:54 And I think these are, he's coming from the standpoint that he's debugged and tested code

00:21:59 that had these weird assumptions in them that broke.

00:22:01 And then it gets into some stuff that I, I'm going to highlight just a handful, but there's

00:22:05 a whole bunch.

00:22:05 A system clock will always be set to the correct local time.

00:22:09 And if that's not true, well, it'll be set to a time that's not wildly different from the

00:22:13 correct local time.

00:22:14 And if that's not true, well, at least it will be, always have a consistent offset in the number

00:22:19 of seconds.

00:22:19 And yeah, no, that's not true either.

00:22:22 I've been bit by this where we had systems under test be not even on the same day.

00:22:27 It has the following other one.

00:22:29 Let's see.

00:22:30 The day before Saturday is always Friday.

00:22:32 I had to look this one up because I'm like, isn't it?

00:22:36 Isn't Friday always before Saturday?

00:22:38 All right.

00:22:38 What's the deal there?

00:22:40 Samoa decided to change which part of their, the international time zone they were on so

00:22:46 that they were the same day as Australia.

00:22:49 And that gap swapped it like it swapped on Saturday, but it happened in the middle of the week or

00:22:54 something like that?

00:22:54 Yeah.

00:22:55 It happened like Thursday night and then the next second it was Saturday morning.

00:23:01 So they skipped Friday once.

00:23:03 That's some serious daylight savings action going on there.

00:23:05 Okay.

00:23:05 And then the number 81, the last one on the second one is, I think it's just thrown in as a joke.

00:23:10 I hope the software will never run on a spaceship that is orbiting a black hole.

00:23:14 Do we have spaceships that orbit black holes?

00:23:18 Not yet.

00:23:19 Yeah.

00:23:19 Not yet.

00:23:20 But you're going to have legacy code.

00:23:21 You're going to have the black hole bug that you got to go back and fix.

00:23:24 Yeah.

00:23:25 And then one I didn't highlight was that there's not an end to time.

00:23:28 Didn't put a link in for this, but did you know that like the end, if you have a 32-bit

00:23:33 time counter, it's probably going to break in 2038 or something like that?

00:23:37 Oh, wow.

00:23:38 Think of all the consulting opportunities.

00:23:40 I know.

00:23:40 It's like Y2K all over again.

00:23:42 Exactly.

00:23:42 Exactly.

00:23:44 Yeah.

00:23:44 That's interesting.

00:23:45 I mean, real time, obviously, we think doesn't stop and probably won't stop for us.

00:23:50 But yeah, computer time.

00:23:51 Computer time is a whole different deal.

00:23:53 Yeah.

00:23:53 Yeah.

00:23:54 This is really interesting.

00:23:55 And yeah, like you highlighted a few of the 81 and then that doesn't even touch on the

00:24:00 more falsehoods.

00:24:00 Pretty cool.

00:24:01 Yeah.

00:24:01 Yeah.

00:24:02 I get a little nervous every time I get anywhere near a time zone.

00:24:05 So with code.

00:24:07 Yeah.

00:24:08 I always use a time zone package or a time package to deal with that for me because I know I'm

00:24:13 going to get it wrong.

00:24:14 Yeah.

00:24:14 Absolutely.

00:24:14 So I must have forgotten because I feel like last time we, a couple of weeks

00:24:20 ago, we did cover Remy, which is a GUI framework.

00:24:22 Yeah.

00:24:23 Right.

00:24:24 And so Remy.

00:24:25 Yeah.

00:24:25 I remember that.

00:24:25 You brought that up.

00:24:26 Remy's cool.

00:24:27 And it lets you write Python code that then gets turned into something that has an HTML

00:24:34 representation.

00:24:35 But then you can hook events from HTML back into your Python code.

00:24:39 Right.

00:24:39 It's kind of like Electron JS, but swap out the JS for Python.

00:24:43 Right.

00:24:43 Yeah.

00:24:43 Well, we got a message from the creator, David.

00:24:47 And he said, hey, thanks so much for covering that.

00:24:49 You threw out that like, hey, it would be awesome if this wasn't had an editor or something

00:24:54 like that.

00:24:55 So yeah.

00:24:56 If you just look at slash editor in the repo.

00:24:59 Yeah.

00:24:59 There's a drag and drop WYSIWYG editor for this UI.

00:25:03 That's so cool.

00:25:04 I haven't tried it yet, but it's neat.

00:25:05 Yeah.

00:25:05 It looks really cool.

00:25:06 It's like pretty, pretty much like what you would expect.

00:25:10 You've got all the widgets you can drag and drop in there and size them and set their

00:25:14 colors and set all their CSS properties.

00:25:17 And then also wire up button clicks to existing functions or JavaScript events to existing

00:25:23 functions, things like that.

00:25:24 You can totally waste an entire afternoon and look like you're working.

00:25:27 Yeah, exactly.

00:25:27 Yeah.

00:25:28 Here's some of the no code stuff that is good.

00:25:30 So it's got a little, a little walkthrough example of creating, you know, like a hello

00:25:35 world button clicker type of GUI app.

00:25:37 But yeah, it's actually looks pretty killer.

00:25:40 I don't want to diss people that like actually work in the world of creating really good user

00:25:45 interfaces that, you know, and that's needed and I applaud them.

00:25:49 But there's a lot of us nerds that just need some kind of GUI that just sort of works and

00:25:54 that's good enough.

00:25:55 Yeah.

00:25:55 All right, Brian, I've queued up a joke, a visual joke that we'll have to describe through here.

00:26:03 And because this is about testing, I'm going to let you take it.

00:26:07 It's really simple, but it's quite funny.

00:26:09 I actually peeked at this before we're going to link to a Twitter post that somebody did of

00:26:14 this little video says two unit tests, zero integration tests.

00:26:18 And I guess I got to say, I'm a huge fan of these like unit test pass integration test

00:26:24 fail things.

00:26:25 So send them my way if you find them.

00:26:27 This one's hilarious.

00:26:28 Yeah.

00:26:29 So let me describe a little bit.

00:26:30 I'll set the stage.

00:26:31 There's a one of these like super powerful hand dryers and there's a trash can and it's

00:26:36 not like a trash bin that you move around.

00:26:38 It's like a fix to the wall, right?

00:26:40 Yeah.

00:26:41 Okay, go ahead.

00:26:41 And then right next to it's a place where you can grab, you know, napkins or your paper

00:26:47 towels also to dry your hands.

00:26:48 But they put like a one of those, the hand dryers that blows down and it turns on with motion.

00:26:55 And as soon as you throw away a paper towel, the dryer blows all the paper towels out of

00:27:00 the garbage.

00:27:01 It's super strong.

00:27:03 Not just the one you tried to put in the garbage, but every paper towel that was previously in

00:27:06 the garbage is now blasted around.

00:27:09 Yeah.

00:27:10 Yeah.

00:27:10 Two unit tests, zero integration tests.

00:27:13 Yeah.

00:27:13 The creative people that like got the garbage liner to stay in there in the first place.

00:27:17 So anyway, it's hilarious.

00:27:19 Yeah.

00:27:20 I got a little rub, a little syrup or something sticky on there to keep that big in place.

00:27:23 Yeah.

00:27:24 That's pretty funny.

00:27:25 This reminds me of a, I was at a company where we switched from actual plants around the office

00:27:31 to plastic plants, but nobody canceled the watering service.

00:27:35 And so the watering service just kept going around and watering all the plastic plants

00:27:39 once a month or once a week or whenever they did that.

00:27:43 So anyway.

00:27:44 Yeah.

00:27:45 That probably didn't turn out well after they filled up.

00:27:47 I don't know.

00:27:50 That's awesome.

00:27:50 It's just weird.

00:27:51 All right.

00:27:51 Well, thanks.

00:27:52 Thanks, Michael.

00:27:53 You bet.

00:27:53 Thanks for being here.

00:27:54 It's always, it's fun.

00:27:55 Bye everyone.

00:27:56 Bye.

00:27:56 Thank you for listening to Python Bytes.

00:27:58 Follow the show on Twitter at Python Bytes.

00:28:00 That's Python Bytes as in B-Y-T-E-S.

00:28:04 And get the full show notes at pythonbytes.fm.

00:28:06 If you have a news item you want featured, just visit pythonbytes.fm and send it our way.

00:28:11 We're always on the lookout for sharing something cool.

00:28:13 This is Brian Okken.

00:28:15 And on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast

00:28:19 with your friends and colleagues.

