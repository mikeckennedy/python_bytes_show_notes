WEBVTT

00:00:00.001 --> 00:00:05.240
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:05.240 --> 00:00:10.160
This is episode 391, recorded July 9, 2024.

00:00:10.160 --> 00:00:11.840
And I am Brian Ock.

00:00:11.840 --> 00:00:13.160
And I am Michael Kennedy.

00:00:13.160 --> 00:00:18.160
This episode is sponsored by Code Comments, an original podcast from Red Hat.

00:00:18.160 --> 00:00:20.240
Listen to their segment later in the show.

00:00:20.240 --> 00:00:24.160
You can connect with us on Mastodon, of course.

00:00:24.160 --> 00:00:25.880
The links are in the show notes.

00:00:25.880 --> 00:00:29.820
We're all on Fosstodon, but you can get to us from any Mastodon.

00:00:29.820 --> 00:00:33.960
You can also join us if you're listening to it later.

00:00:33.960 --> 00:00:40.220
You can join us live by going to pythonbytes.fm/live, be a part of the audience.

00:00:40.220 --> 00:00:44.340
Or if you just want to see the show later, it's all there.

00:00:44.340 --> 00:00:50.220
It's usually 10 a.m. Pacific time on Tuesdays, but sometimes it changes.

00:00:50.220 --> 00:00:53.560
But if you go to that live thing, it'll tell you when the next one is.

00:00:53.560 --> 00:01:00.520
And finally, I'd really like to thank a lot of the people that have subscribed to the mailing list, the newsletter.

00:01:00.520 --> 00:01:04.420
If you go to our pythonbytes.fm, there's a newsletter link.

00:01:04.420 --> 00:01:08.580
And we'll send you all of the links of the stuff we cover every week.

00:01:08.580 --> 00:01:10.220
And we'll just send it to your inbox.

00:01:10.220 --> 00:01:13.600
So even if you miss an episode, you won't miss any of the goodness.

00:01:13.600 --> 00:01:16.980
So speaking of goodness, what do you got for us, Michael?

00:01:16.980 --> 00:01:27.000
Well, you know how we all love PyPI and the ability to go and just pip install a thing and make it, make our apps be so much more.

00:01:27.000 --> 00:01:27.240
Right.

00:01:27.240 --> 00:01:31.980
Programming in Python becomes like Lego block clicking together, not algorithm class.

00:01:31.980 --> 00:01:32.640
Yeah.

00:01:32.640 --> 00:01:33.240
You know what I mean?

00:01:33.240 --> 00:01:34.160
Which is amazing.

00:01:34.160 --> 00:01:34.740
It's amazing.

00:01:34.740 --> 00:01:39.780
However, there are issues that you run into if you use third party packages.

00:01:39.940 --> 00:01:43.740
Not the least of which is you now probably should have a virtual environment.

00:01:43.740 --> 00:01:46.840
You definitely require some pip install commands.

00:01:46.840 --> 00:01:49.460
Just stuff all along those lines, right?

00:01:49.460 --> 00:01:52.900
Just the management of setup before you can even run your app.

00:01:52.900 --> 00:01:55.220
Plus then any potential changes.

00:01:55.220 --> 00:02:00.020
If people don't pin their versions, then you're at the whims of what potentially can happen there.

00:02:00.120 --> 00:02:06.180
So what some people do is something called vendoring or vendorizing dependencies.

00:02:06.180 --> 00:02:13.000
So for example, if I depend on some functionality from requests, I don't know if that's a super good example, but let's say it is.

00:02:13.000 --> 00:02:18.260
I could just download the source code of requests, stick it into my code and use it.

00:02:18.260 --> 00:02:24.180
It's not probably not a great example because it itself has a bunch of dependencies, but stuff that's kind of like pure Python, no other dependencies.

00:02:24.460 --> 00:02:32.960
You could have it as a third party package, or you could just stick the code of that somewhere to your app and refer to it as a relative import within your app.

00:02:32.960 --> 00:02:33.200
Right.

00:02:33.200 --> 00:02:33.640
Yeah.

00:02:33.640 --> 00:02:39.940
Then people just pip install your package, pip x install your package, or even just get a script and run it or a set of scripts.

00:02:39.940 --> 00:02:47.060
So there's this project from M Williamson called Python vendorize that I want to talk about.

00:02:47.360 --> 00:02:52.100
So it'll vendorize packages from PyPI, as I just described, right?

00:02:52.100 --> 00:02:55.500
So it allows you pure Python dependencies to be vendorized.

00:02:55.500 --> 00:03:05.520
That is, it'll copy that into your project best use for small pure Python dependencies to avoid version conflicts with other packages, require different versions and so on.

00:03:05.520 --> 00:03:20.020
So what you do is you set up a vendorize.toml file and in there, you basically set up, what is your module where, what sub section of your module do you want it to go into what sub module and then what.

00:03:20.020 --> 00:03:21.360
PyPI packages you want.

00:03:21.360 --> 00:03:23.760
So example here is like a hello package.

00:03:23.920 --> 00:03:28.480
So they create a dunder, just not an underscore vendor folder.

00:03:28.480 --> 00:03:30.420
And then they say the packages are six.

00:03:30.420 --> 00:03:42.820
And once you run it, it'll create that underscore vendor folder and it'll put the six dist info, the dunder and nit pie, the six up high, all the stuff it needs to basically have that there.

00:03:42.820 --> 00:03:49.000
So then in your app, you can say from dot underscore vendor import six rather than having an external dependency.

00:03:49.000 --> 00:03:49.660
What do you think?

00:03:49.660 --> 00:03:51.480
kind of neat.

00:03:51.480 --> 00:03:52.780
How do you keep up?

00:03:52.940 --> 00:03:54.140
Yeah, I've got questions.

00:03:54.140 --> 00:03:57.500
Like how do you keep up with, updates and things like that?

00:03:57.500 --> 00:04:01.460
Well, I believe that you just run a command line.

00:04:01.460 --> 00:04:02.780
right.

00:04:02.780 --> 00:04:08.280
Just run Python vendor eyes in the directory and I don't know if it'll read download it, but it will create it.

00:04:08.280 --> 00:04:10.760
So, you know, worst case, delete the folder, run it again.

00:04:10.760 --> 00:04:11.260
Yeah.

00:04:11.260 --> 00:04:11.660
Yeah.

00:04:11.660 --> 00:04:12.700
And then that'll update it.

00:04:12.700 --> 00:04:15.800
So the whole point of this is like, you want less change than normal.

00:04:15.800 --> 00:04:16.220
Yeah.

00:04:16.220 --> 00:04:20.200
You want to like kind of freeze it in a place and things like six that don't really change.

00:04:20.200 --> 00:04:22.220
I mean, or have gotten kicked out of the.

00:04:22.220 --> 00:04:23.940
standard library.

00:04:23.940 --> 00:04:24.860
Yeah, exactly.

00:04:24.860 --> 00:04:25.460
Yeah, exactly.

00:04:25.460 --> 00:04:27.200
A lot of stuff that's really super stable.

00:04:27.200 --> 00:04:29.060
and pretty small, right?

00:04:29.060 --> 00:04:36.080
You don't want to, because if, if you do something that's got a bunch of dependencies, you've then got to start doing their dependencies and then it gets really wonky.

00:04:36.080 --> 00:04:36.620
Right?

00:04:36.840 --> 00:04:37.060
Yeah.

00:04:37.060 --> 00:04:37.060
Yeah.

00:04:37.060 --> 00:04:38.060
For small things.

00:04:38.060 --> 00:04:39.020
Yeah, actually.

00:04:39.020 --> 00:04:40.240
it's pretty cool.

00:04:40.240 --> 00:04:41.040
yeah.

00:04:41.040 --> 00:04:41.440
Neat.

00:04:41.440 --> 00:04:41.860
Neat.

00:04:41.860 --> 00:04:43.040
Well, that's what I got for you.

00:04:43.040 --> 00:04:45.120
The first one, I got a bunch of other stuff, as you can see.

00:04:45.120 --> 00:04:47.060
No, I like it.

00:04:47.060 --> 00:04:54.800
there's, there's projects that I've, open source that it really wasn't intended for somebody to actually use as a dependency.

00:04:54.980 --> 00:05:05.980
It's like an exam, some example code that happens to be pip installable, but, but somebody would probably take it and just copy it and run from there and using something like vendorize would work.

00:05:06.340 --> 00:05:07.280
Yeah, for sure.

00:05:07.280 --> 00:05:07.700
Cool.

00:05:07.700 --> 00:05:13.080
I would like to talk about something not as strong as this, but weaker.

00:05:13.080 --> 00:05:17.740
some weak, so weak, so some weak references.

00:05:17.740 --> 00:05:26.100
so this is a, article from Martin Heinz, a guide to Python's weak references using weak ref modules.

00:05:26.100 --> 00:05:29.640
So weak ref is a, built in standard library module.

00:05:29.640 --> 00:05:33.000
And, I actually have never played with it.

00:05:33.000 --> 00:05:39.000
And I kind of knew that Python must have weak references, but I just didn't really explore it before now.

00:05:39.000 --> 00:05:42.000
And this is a great introduction to just talk about what they are.

00:05:42.000 --> 00:05:50.640
So if, I mean, we, the term weak reference might be new to somebody that's, that's like, I don't know, maybe new to you.

00:05:50.640 --> 00:06:01.860
it's a, it's a term that we talk about in, in like C++ and other things a lot, because of the, using, and I use it a lot in C++, but, using strong references and weak references.

00:06:02.240 --> 00:06:05.000
Python also has strong references and weak references.

00:06:05.000 --> 00:06:08.020
A strong reference is just sort of a copy of something.

00:06:08.020 --> 00:06:14.640
but a weak references is a way to point to something else, but not, not muck up the garbage collection.

00:06:14.640 --> 00:06:16.480
So this is a great article.

00:06:16.480 --> 00:06:32.860
It talks about, starts out with, talking about, sorry, starts out talking about garbage, dark garbage collection and how, how weak references are used with garbage, how garbage collection and weak references and strong references affect that.

00:06:32.860 --> 00:06:33.680
So why do we care?

00:06:33.880 --> 00:06:39.020
Well, it is used in things like log, the logging module for instance.

00:06:39.020 --> 00:06:44.220
so you have named, this is a cool example cause you have, you have named, logging modules.

00:06:44.220 --> 00:06:45.960
oh, where was it?

00:06:45.960 --> 00:06:46.940
This is an example.

00:06:46.940 --> 00:06:55.280
Anyway, some named modules that, you, you, you named a logging module or a named logger.

00:06:55.360 --> 00:06:55.720
Sorry.

00:06:55.720 --> 00:06:57.340
it's been a rough weekend.

00:06:57.340 --> 00:07:02.560
And, and then like, if you want another one of the same name, it might be there.

00:07:02.560 --> 00:07:03.040
It might not.

00:07:03.040 --> 00:07:09.600
So it's a caching sort of thing that how logging uses it, but there's also ways to use it as a, like for trees.

00:07:09.600 --> 00:07:16.360
If you're building a data structure, where you might want, bi-directional, links between objects.

00:07:16.360 --> 00:07:20.760
one of the objects, it shouldn't be really hard links in both directions.

00:07:20.920 --> 00:07:30.180
So one of those links should be, a weak reference, like the link between a parent and a child and a tree, structure would be good like that.

00:07:30.180 --> 00:07:42.280
Or other things like he talks about, he talked about using an observer, building an observer pattern from the design pattern book, using weak references, just some really cool stuff.

00:07:42.280 --> 00:07:42.800
I don't know.

00:07:42.800 --> 00:07:44.480
I don't build a lot of data structures.

00:07:44.480 --> 00:07:46.940
Like there's enough data structures in Python already.

00:07:46.940 --> 00:07:57.720
But if, especially if you're in a, in a CS class or you have, some special needs for data structure, weak references are built in and they might help you a lot.

00:07:57.720 --> 00:07:58.100
So.

00:07:58.100 --> 00:07:58.860
Yeah.

00:07:58.860 --> 00:07:59.560
And they're pretty interesting.

00:07:59.560 --> 00:08:05.980
The only chance, only time I've really played with them is for the Python memory course that I created at talk Python to like understand.

00:08:05.980 --> 00:08:08.860
Cause you want to look at stuff and see, we did this, it's alive.

00:08:08.860 --> 00:08:09.340
We did this.

00:08:09.340 --> 00:08:12.140
Now it's garbage collected or now it's reference count deleted.

00:08:12.140 --> 00:08:17.380
but if you have a, a pointer to it, then obviously it's never going away.

00:08:17.380 --> 00:08:20.340
So weak references allow you to ask questions like that.

00:08:20.340 --> 00:08:22.760
Like, I think you can do interesting stuff with caching too.

00:08:22.760 --> 00:08:31.440
For example, like if you've got a cache and you've handed out an instance of the object and it's still alive and people are still using it, the parts of the app are still using it.

00:08:31.440 --> 00:08:33.060
You can have a weak reference to it.

00:08:33.060 --> 00:08:37.980
And if someone else asks for you, like you can upgrade the weak reference to a strong reference, right.

00:08:37.980 --> 00:08:39.720
And hand that out again without recreating it.

00:08:39.720 --> 00:08:43.960
But if no one's using it, it'll get cleaned up because a weak reference won't keep it around.

00:08:43.960 --> 00:08:48.040
So it's like sort of a self-managing cache type of structure could be fun to make too.

00:08:48.040 --> 00:08:48.500
Yeah.

00:08:48.500 --> 00:08:53.140
But that said, I was thinking just like you, I don't usually make data structures these days.

00:08:53.140 --> 00:08:55.220
Python's pretty much got something for you.

00:08:55.220 --> 00:08:55.620
Right.

00:08:55.620 --> 00:09:01.220
But, you know, people are building, well, there's some third-party library data structures I use too.

00:09:01.220 --> 00:09:02.760
And they probably use weak references.

00:09:02.760 --> 00:09:05.180
And I just haven't poked into there to find out.

00:09:05.180 --> 00:09:05.900
Yeah, exactly.

00:09:05.900 --> 00:09:08.080
Let someone else do cool stuff with it for us.

00:09:08.080 --> 00:09:17.860
But I love the idea of the, like the logging module that uses named items, doing something like a cache named item thing.

00:09:17.860 --> 00:09:18.440
Yeah.

00:09:18.440 --> 00:09:19.240
Very cool.

00:09:19.240 --> 00:09:20.320
Do you know what else is cool?

00:09:20.320 --> 00:09:22.180
Code comments from Red Hat.

00:09:22.180 --> 00:09:22.900
Yeah.

00:09:23.240 --> 00:09:27.440
This episode is brought to you by Code Comments, an original podcast from Red Hat.

00:09:27.440 --> 00:09:35.240
You know, when you're working on a project and you leave behind a small comment in the code, maybe you're hoping to help others learn what isn't clear at first.

00:09:35.240 --> 00:09:41.200
Sometimes that code comment tells a story of a challenging journey to the current state of the project.

00:09:41.200 --> 00:09:49.400
Code Comments, the podcast, features technologists who've been through tough tech transitions and they share how their teams survived that journey.

00:09:49.400 --> 00:09:53.720
The host, Jamie Parker, is a Red Hatter and an experienced engineer.

00:09:53.720 --> 00:10:01.760
In each episode, Jamie recounts the stories of technologists from across the industry who've been on a journey implementing new technologies.

00:10:01.960 --> 00:10:06.220
I recently listened to an episode about DevOps from the folks at Worldwide Technology.

00:10:06.220 --> 00:10:12.540
The hardest challenge turned out to be getting buy-in on the new tech stack rather than using that tech stack directly.

00:10:12.540 --> 00:10:14.640
It's a message that we can all relate to.

00:10:14.640 --> 00:10:18.080
And I'm sure you can take some hard-won lessons back to your own team.

00:10:18.080 --> 00:10:19.640
Give Code Comments a lesson.

00:10:20.020 --> 00:10:26.200
Search for Code Comments in your podcast player or just use our link, pythonbytes.fm/code dash comments.

00:10:26.200 --> 00:10:28.440
The link is in your podcast player's show notes.

00:10:28.440 --> 00:10:30.680
Thank you to Code Comments for supporting the show.

00:10:30.680 --> 00:10:34.160
This one is Make Time Speak from Preycin.

00:10:34.160 --> 00:10:40.120
Preycin's been on the show before, a friend of the show and also a former co-guest, co-host.

00:10:40.260 --> 00:10:46.020
And the idea is it's a little bit of a human-friendly way to refer to time.

00:10:46.020 --> 00:10:56.720
You might know about things like, I think it's Arrow, that has a humanized thing that says, you know, five minutes from now or in ten minutes or just now.

00:10:56.720 --> 00:10:57.660
Those kinds of things.

00:10:57.660 --> 00:11:03.540
But the way this one works is it talks in sort of colloquial way of saying the time.

00:11:03.540 --> 00:11:14.660
So you create a clock object and you give it a language to use, like English, German, Swahili, I think, all those things, Dutch.

00:11:14.660 --> 00:11:19.080
And then you can ask it, you know, what is 11 colon 15?

00:11:19.080 --> 00:11:21.880
It'll say quarter past 11 or a bunch of different times.

00:11:21.880 --> 00:11:23.300
What is 729?

00:11:23.300 --> 00:11:27.360
And well, it says that in Swahili, which I can't get that.

00:11:27.360 --> 00:11:28.240
I'm not going to get that right.

00:11:28.380 --> 00:11:31.960
But it'll convert time into spoken expressions in multiple languages.

00:11:31.960 --> 00:11:33.180
Super easy to use.

00:11:33.180 --> 00:11:33.860
Pure Python.

00:11:33.860 --> 00:11:35.620
So you could vendorize it, I guess.

00:11:35.620 --> 00:11:37.280
And so on.

00:11:37.280 --> 00:11:37.920
Even as plugins.

00:11:37.920 --> 00:11:42.140
So super easy to use if people want to check that out and play with it.

00:11:42.140 --> 00:11:43.040
This is pretty fun.

00:11:43.040 --> 00:11:43.440
Yeah.

00:11:43.440 --> 00:11:43.840
I like it.

00:11:43.840 --> 00:11:44.580
Very simple.

00:11:44.580 --> 00:11:51.640
But if you've got a use case like that, you have a date time and you wanted to say it in a more human version, well, here you go.

00:11:51.640 --> 00:11:52.320
All right.

00:11:52.320 --> 00:11:52.680
Nice.

00:11:52.680 --> 00:11:53.140
Yeah.

00:11:53.140 --> 00:11:57.240
I am going to cover a topic that I get asked all the time.

00:11:57.240 --> 00:12:03.620
So I talk about testing a lot and machine learning and AI is kind of a big thing now.

00:12:03.620 --> 00:12:07.540
So I get questions like, how do I test machine learning projects?

00:12:07.540 --> 00:12:09.120
And I got an answer.

00:12:09.120 --> 00:12:09.920
I have no idea.

00:12:09.920 --> 00:12:12.800
So I'm excited that somebody made an attempt at this.

00:12:12.800 --> 00:12:17.640
Here is a article called How Should You Test Your Machine Learning Project?

00:12:17.640 --> 00:12:20.420
The Beginner's Guide by Francois Porcher.

00:12:20.420 --> 00:12:24.000
So and it's published in the Towards Data Science blog.

00:12:24.000 --> 00:12:26.880
Anyway, kind of a cool intro.

00:12:27.160 --> 00:12:30.220
talked about some of the simple stuff.

00:12:30.220 --> 00:12:34.380
I mean, there is like, how do you test machine learning?

00:12:34.380 --> 00:12:35.040
It's complex.

00:12:35.040 --> 00:12:39.440
But there are there's a lot of pieces that are pretty straightforward to test.

00:12:39.440 --> 00:12:41.620
So cool introduction.

00:12:41.620 --> 00:12:42.560
Had a project.

00:12:42.560 --> 00:12:48.460
This article also includes a repository that you can play with directly, which is nice.

00:12:48.540 --> 00:12:50.920
You just follow along with the code.

00:12:50.920 --> 00:12:53.800
So this is doing what is it doing?

00:12:53.800 --> 00:13:04.500
It's essentials of testing with a machine learning pipeline focusing on fine tuning BERT for text classification on an IMDB data set.

00:13:04.600 --> 00:13:06.660
So that's just what he's using.

00:13:06.660 --> 00:13:11.240
He's using pytest and pytest Cove, which are awesome things to start with.

00:13:11.660 --> 00:13:21.860
And so it kind of goes through some of the easy stuff right away is starting with some of the simple things like has a clean text function.

00:13:22.040 --> 00:13:29.140
So a function within within the source that takes a string and makes it all lowercase and strips it.

00:13:29.260 --> 00:13:30.560
But it might do other things, too.

00:13:30.560 --> 00:13:32.800
But these are these are great examples.

00:13:32.800 --> 00:13:37.600
You've in a lot of machine learning stuff, you've got a lot of little helper functions along the way.

00:13:37.600 --> 00:13:41.040
May as well go test those and it'll get in the habit of writing tests, too.

00:13:41.040 --> 00:13:49.080
And this in this case is just giving giving some examples of of some random text input and what the clean output should look like.

00:13:49.080 --> 00:13:54.900
And these are your expectations of like if I pop pop this data into this function, what should the output look like?

00:13:54.900 --> 00:13:56.120
So it's a great way to get started.

00:13:56.520 --> 00:14:00.960
I personally would have put this in a parameterized, but I guess we're trying to teach people slowly.

00:14:00.960 --> 00:14:03.360
These are really three test cases.

00:14:03.360 --> 00:14:07.080
They could be three test functions, but it works.

00:14:07.080 --> 00:14:16.640
And so I'm referring to a test function that does a test for capital letter stripping and removing extra spaces.

00:14:16.640 --> 00:14:20.620
And what how how it should handle the empty string.

00:14:20.620 --> 00:14:22.160
And this is actually a good point.

00:14:22.680 --> 00:14:27.520
One of the things they test with interviews a lot is the edge cases for testing.

00:14:27.520 --> 00:14:36.160
So like with what test examples are like derivative small cases that you wouldn't possibly think about.

00:14:36.160 --> 00:14:37.700
And it's important to test those, too.

00:14:37.700 --> 00:14:38.280
Like what is it?

00:14:38.280 --> 00:14:41.280
What is an empty string get cleaned as or good?

00:14:41.380 --> 00:14:41.980
A good thing.

00:14:41.980 --> 00:14:48.000
Like if I already had the word spaces in lowercase, how would that end up showing up in the output?

00:14:48.000 --> 00:14:48.800
Things like that.

00:14:48.800 --> 00:14:50.700
So good start.

00:14:50.700 --> 00:14:53.240
And then jumps up to higher level things.

00:14:53.240 --> 00:14:57.740
He talks about a larger chunk of the script.

00:14:57.940 --> 00:15:06.440
So he's got a tokenized text, tokenized text function that uses a lot of sub pieces, uses the tokenizer with certain input.

00:15:06.440 --> 00:15:08.620
And how you test that?

00:15:08.620 --> 00:15:18.780
Well, this is a great example of just figuring out really some examples, some example input and what how you would expect it to be tokenized on the output.

00:15:18.780 --> 00:15:22.180
Looking at the length and the shape of the result.

00:15:22.180 --> 00:15:28.940
And then, you know, making sure that that not all values or I don't know what this would be.

00:15:28.940 --> 00:15:33.060
Oh, he's making sure that all values are torched by torched tensors.

00:15:33.060 --> 00:15:34.620
I don't even really know what that means.

00:15:34.620 --> 00:15:38.380
But, you know, thinking about what the output should be.

00:15:38.440 --> 00:15:43.940
If even if you don't know the specifics, you can have some way to describe how it should sort of look.

00:15:43.940 --> 00:15:49.340
And these are good enough tests or they possibly are good tests to have anyway.

00:15:49.340 --> 00:15:59.360
So I think this is a good, good starting point to to start a discussion on your team for how to how to add testing to a machine learning project.

00:15:59.360 --> 00:16:00.160
Yeah, it's interesting.

00:16:00.160 --> 00:16:02.460
I really would have no idea how to test machine learning.

00:16:02.460 --> 00:16:04.700
It seems like black box type stuff.

00:16:04.700 --> 00:16:08.340
So, yeah, this is a lot more to work with than I would have come up with, I think.

00:16:08.540 --> 00:16:12.580
Yeah, just getting started, taking a chunk out of it and then where to go from there.

00:16:12.580 --> 00:16:19.600
So after you kind of have a sense of some of the easy stuff, some of the middle level stuff of testing examples and shapes and whatnot.

00:16:19.600 --> 00:16:21.280
What's left?

00:16:21.280 --> 00:16:32.360
Well, that's where a quick introduction to how code coverage works and looking at what other what what the rest of your code is doing and that maybe you want to add tests to.

00:16:32.360 --> 00:16:36.860
Or maybe those are the things that you manually test or something.

00:16:36.860 --> 00:16:37.660
So anyway.

00:16:37.660 --> 00:16:38.140
Yeah.

00:16:38.140 --> 00:16:38.700
Excellent.

00:16:38.700 --> 00:16:39.340
Sounds good.

00:16:39.340 --> 00:16:41.040
Well, those are our items.

00:16:41.040 --> 00:16:43.800
Do you have any extras for us this week?

00:16:43.800 --> 00:16:45.500
I am out of extras.

00:16:45.500 --> 00:16:46.180
Clean out.

00:16:46.180 --> 00:16:47.720
Well, I'll tell where I'll make up for it for you.

00:16:47.720 --> 00:16:48.200
Okay.

00:16:48.200 --> 00:16:51.080
So wonderful news from Authy.

00:16:51.080 --> 00:16:57.460
You know, Authy, the 2FA password thing that you can get for multi-factor authentication.

00:16:58.020 --> 00:17:07.160
Super nice because, you know, so many of the devices are locked to or some of the apps are locked to one platform like Google, a Google authenticator.

00:17:07.160 --> 00:17:10.100
You lose your phone or you have to reformat it or something.

00:17:10.340 --> 00:17:10.780
Sorry.

00:17:10.780 --> 00:17:10.780
Sorry.

00:17:10.780 --> 00:17:11.360
Good luck.

00:17:11.360 --> 00:17:11.680
Now.

00:17:11.680 --> 00:17:14.460
You know, there's no sinking things like that.

00:17:14.460 --> 00:17:16.980
But with Authy, you have an account.

00:17:16.980 --> 00:17:19.020
It syncs it across your different devices.

00:17:19.020 --> 00:17:21.580
One device can authenticate another.

00:17:21.580 --> 00:17:22.680
If you want to add a new one.

00:17:22.680 --> 00:17:32.680
It's really nice except now Authy is urging users to stay alert after 33 million phone numbers were leaked.

00:17:32.680 --> 00:17:33.400
How?

00:17:33.400 --> 00:17:47.400
Well, there's an authenticated API endpoint, but apparently it would return an error that would indicate whether the phone number that you passed in to try to authenticate with was valid or invalid.

00:17:47.400 --> 00:17:50.760
Like, sorry, that phone number doesn't exist or sorry, wrong password.

00:17:50.760 --> 00:17:51.420
Something like that.

00:17:51.420 --> 00:17:52.200
I think is the deal.

00:17:52.420 --> 00:17:52.580
Okay.

00:17:52.580 --> 00:18:01.660
And so somebody just hammered it with, you know, every phone number combination they could think of and recorded the results when it said that phone number exists.

00:18:01.660 --> 00:18:03.820
And we know that Authy has it.

00:18:03.820 --> 00:18:06.000
And then we know that you have 2FA and all of these things.

00:18:06.000 --> 00:18:10.820
And so from what I could tell, no real information about people was stolen.

00:18:10.820 --> 00:18:21.420
But given that they know you have 2FA and they know that you have, that this is your phone number, they can start sending you all sorts of spoof things, social engineering type things.

00:18:21.420 --> 00:18:21.680
Right.

00:18:22.160 --> 00:18:22.580
Yeah.

00:18:22.580 --> 00:18:22.580
Yeah.

00:18:22.580 --> 00:18:22.580
Yeah.

00:18:22.580 --> 00:18:26.780
Well, and Authy recently canceled their desktop apps.

00:18:26.780 --> 00:18:31.000
You know, Authy being a Twilio, the parent company, canceled their desktop apps.

00:18:31.000 --> 00:18:38.680
It just seems like it's really in a kind of a state of disrepair and lack of love and a lack of confidence in Michael at this point.

00:18:38.680 --> 00:18:44.980
So I went through the super fun experience of resetting about 30 different 2FA logins.

00:18:44.980 --> 00:18:46.600
And boy, oh boy.

00:18:46.600 --> 00:18:47.620
I learned some things, Brian.

00:18:48.400 --> 00:18:52.740
I've learned that some companies make it super easy to reset.

00:18:52.740 --> 00:18:56.940
Because my thought was, look, if this is, you know, what else potentially has happened?

00:18:56.940 --> 00:19:03.520
I'm going to revoke all of my 2FA logins and set new secret keys that will generate new passwords.

00:19:03.660 --> 00:19:08.880
So even if they were able to get a hold of everything in my account, that stuff doesn't work anymore effectively.

00:19:08.880 --> 00:19:09.180
Right.

00:19:09.180 --> 00:19:10.180
That was my plan.

00:19:10.180 --> 00:19:13.540
And it took like six hours or something, five hours.

00:19:13.540 --> 00:19:18.800
You go to different places and you'll see some of them will let you, some have an awesome button.

00:19:19.160 --> 00:19:21.560
Reset 2FA here's a QR code you scan.

00:19:21.560 --> 00:19:21.940
Boom.

00:19:21.940 --> 00:19:22.580
You're good to go.

00:19:22.580 --> 00:19:27.020
Others say, your Google authenticators is enabled.

00:19:27.020 --> 00:19:28.420
Like what?

00:19:28.420 --> 00:19:30.760
I don't have a Google authenticator.

00:19:30.760 --> 00:19:38.540
There's like 50 apps that are 2FA apps, T-Mobile and like 10 of the other ones say, use your Google authenticator here.

00:19:38.540 --> 00:19:39.940
Like, no, it is not.

00:19:39.940 --> 00:19:43.480
It's like, use your internet explorer six here.

00:19:43.480 --> 00:19:44.660
Like, no, there are other browsers.

00:19:44.660 --> 00:19:48.040
Please don't just say use your Google authenticator.

00:19:48.040 --> 00:19:48.300
Right.

00:19:48.560 --> 00:19:51.500
But you could just go, yep, this is my Google authenticator.

00:19:51.500 --> 00:19:55.680
It's called something else and it doesn't come from Google, but sure enough, I'm going to set this up.

00:19:55.680 --> 00:19:55.920
Right.

00:19:55.920 --> 00:20:04.480
And like Christopher out in the, in the audience here, that is my next recommendation is well, if not Authy, what?

00:20:04.480 --> 00:20:06.420
Because Google authenticators garbage.

00:20:06.420 --> 00:20:11.080
Like I said, you, if you, your phone gets messed up, you've lost all logins forever.

00:20:11.080 --> 00:20:11.880
There's not a sink.

00:20:11.880 --> 00:20:15.820
At least last time I use it, there's no way to sink it or export it or any of that stuff.

00:20:15.820 --> 00:20:15.960
Right.

00:20:15.960 --> 00:20:16.680
That's bad news.

00:20:16.680 --> 00:20:18.160
So Bitwarden.

00:20:18.160 --> 00:20:19.200
Bitwarden is awesome.

00:20:19.200 --> 00:20:20.780
This is a premium feature.

00:20:20.780 --> 00:20:26.320
So you have to have the premium version of Bitwarden, which is $10 a year or 80 cents a month or something.

00:20:26.320 --> 00:20:27.040
I'm like, yeah, fine.

00:20:27.040 --> 00:20:28.200
That's, that seems fair.

00:20:28.200 --> 00:20:29.140
But Bitwarden is cool.

00:20:29.140 --> 00:20:30.860
It's open source, multi-platform.

00:20:30.860 --> 00:20:37.460
you just scan, scan stuff or enter the code and that they give you for the 2FA and off it goes.

00:20:37.540 --> 00:20:43.000
And because it has a browser plugin, you can just click on your name when it says type in your 2FA code.

00:20:43.000 --> 00:20:43.780
You don't have to go pull it up.

00:20:43.780 --> 00:20:46.200
You just click the button and boom, it auto fills it, which is great.

00:20:46.200 --> 00:20:54.860
I don't put it in my one password because I'm just not ready to say my 2FA logins and my passwords are all stored behind one single platform.

00:20:54.860 --> 00:20:58.480
Because then your 2FA is kind of toast if somebody breaks into that.

00:20:58.480 --> 00:21:02.300
So Bitwarden for 2FA, one password for logins for me at the moment.

00:21:02.300 --> 00:21:02.900
What do you think?

00:21:03.220 --> 00:21:07.720
Well, I'm using, maybe I shouldn't tell people, but yeah, I'm using Authy.

00:21:07.720 --> 00:21:11.680
So are they, they're still supporting it on like, aren't they?

00:21:11.680 --> 00:21:16.520
they're not supporting it on, they used to have a desktop app.

00:21:16.520 --> 00:21:17.620
They don't have that anymore.

00:21:17.620 --> 00:21:20.760
They have a iPad and an iOS and Android app.

00:21:20.760 --> 00:21:29.420
Since you have an Apple Silicon one, you can run the iPad version on your Mac, just like a desktop app.

00:21:29.660 --> 00:21:33.860
So it's kind of feels the same, except for it doesn't have like, like the keyboards behave weirdly and stuff.

00:21:33.860 --> 00:21:34.060
Right.

00:21:34.060 --> 00:21:35.560
Cause it doesn't expect you to have a keyboard.

00:21:35.560 --> 00:21:40.900
Maybe you're using it a lot more than I am, but it doesn't bother me to run, run it on my phone.

00:21:40.900 --> 00:21:42.140
But yeah.

00:21:42.140 --> 00:21:47.000
Well, I mean, it doesn't bother me either, but I've got, there's like a bunch of different apps that I have.

00:21:47.000 --> 00:21:52.060
For example, the credit card front end system for talk Python courses.

00:21:52.060 --> 00:21:53.620
It has a remember me button.

00:21:53.620 --> 00:21:55.700
It never remembers me.

00:21:55.700 --> 00:21:56.720
Never.

00:21:56.720 --> 00:21:57.920
It has a 2FA.

00:21:58.080 --> 00:21:59.740
It never remembers the 2FA.

00:21:59.740 --> 00:22:04.880
So even if I say, remember me 20 minutes later, I'm putting in the password and the 2FA.

00:22:04.880 --> 00:22:06.900
And then 20 minutes later, I'm putting the password in the job.

00:22:06.900 --> 00:22:09.660
I'm like, ah, so there's like a few places like that.

00:22:09.660 --> 00:22:12.060
They're just constantly asked for the 2FA.

00:22:12.060 --> 00:22:13.960
digital issues a little bit like that.

00:22:13.960 --> 00:22:19.620
Like if, you, every single time you're putting in the 2FA, there's not like a trust this device sort of thing.

00:22:19.740 --> 00:22:23.500
And so I ended up, I'm probably in used to be in offing now in bit warden.

00:22:23.500 --> 00:22:26.400
I'm probably not like five times a day, at least every day.

00:22:26.580 --> 00:22:32.760
So anyway, so one final thing before I move off of this, after all of this, they said, I don't know how this helps.

00:22:32.760 --> 00:22:41.280
It doesn't seem like it should help, but somehow they said, as part of our recommendation to users, it's very important that you upgrade to the latest version of Authy.

00:22:41.520 --> 00:22:47.580
Why that because the endpoint hands, I don't understand, but, anyway, it says you must.

00:22:47.580 --> 00:22:52.500
And then if you go and look at the upgrade, all that says for the, it says you must get version 26.1.0.

00:22:52.500 --> 00:22:53.700
What does it say here?

00:22:53.700 --> 00:23:00.000
Bug fixes, not, this is an important security update and you need to update because we're trying to protect your privacy.

00:23:00.000 --> 00:23:03.060
They're hiding behind bug fixes and it's disgraceful, right?

00:23:03.060 --> 00:23:03.780
This is bad.

00:23:03.780 --> 00:23:06.540
So all these things taken together, I'm like, you know what?

00:23:06.540 --> 00:23:07.680
It may be safe.

00:23:07.680 --> 00:23:08.860
It may be not, but I'm out.

00:23:09.020 --> 00:23:12.020
Like this is not where my, my important things live.

00:23:12.020 --> 00:23:12.360
So.

00:23:12.360 --> 00:23:12.960
Okay.

00:23:12.960 --> 00:23:13.860
Yeah.

00:23:13.860 --> 00:23:20.260
And OFAC also out there says, Hey, if you're okay with recommending paid services, which I am one password is what I migrated away to from Authy.

00:23:20.260 --> 00:23:20.720
Yeah.

00:23:20.720 --> 00:23:21.940
One password is awesome.

00:23:21.940 --> 00:23:24.360
But like I said, I have my logins at one password.

00:23:24.360 --> 00:23:25.820
So I put my two FA and bit word.

00:23:25.820 --> 00:23:26.380
All right.

00:23:26.380 --> 00:23:26.840
Woo.

00:23:26.840 --> 00:23:27.760
That was a long extra.

00:23:27.760 --> 00:23:28.700
That should just been a thing, right?

00:23:28.700 --> 00:23:29.160
Extra.

00:23:29.160 --> 00:23:38.480
Remember a while ago, I did this article unsolicited advice for Mozilla and Firefox, like your AI, your, your good citizen AI project.

00:23:38.480 --> 00:23:40.400
Probably won't save Mozilla.

00:23:40.400 --> 00:23:41.860
It probably needs more than that.

00:23:41.860 --> 00:23:43.700
And it won't really probably help Firefox either.

00:23:43.700 --> 00:23:47.660
So let's do some things that help them because I'm in principle, a fan of them.

00:23:47.660 --> 00:23:52.800
Well, I said, one of the things that my main recommendation was like a privacy focused Google docs.

00:23:52.800 --> 00:24:00.540
Well, they didn't do it, but, proton, the Proton Mail people just came up with a, like a Google docs equivalent, but with end to end encryption.

00:24:00.540 --> 00:24:06.760
And no AI training and no AI training and, you know, all the kinds of things you would like about your data without the negatives.

00:24:07.200 --> 00:24:12.620
So if you have proton, there's, there's now collaborative docs with it, which is kind of cool.

00:24:12.620 --> 00:24:14.300
And it looks pretty, I think it looks pretty nice.

00:24:14.300 --> 00:24:15.880
So just want to give that a shout out.

00:24:15.880 --> 00:24:23.720
Does it, do you know if, I probably don't want to ask, does our Google docs open to scanning for AI?

00:24:23.840 --> 00:24:39.440
Do you know, I believe that the freeware versions are the free versions, but the business ones, maybe not, you know, I think your business workspace stuff is not open to that, but like your, your personal Gmail is open to like scanning for ads and stuff.

00:24:39.440 --> 00:24:43.140
Whereas the business one is that's, so that's the price you pay.

00:24:43.140 --> 00:24:47.820
Last thing, is the code in a castle thing I'm doing in October 5th.

00:24:47.820 --> 00:24:50.640
The early bird discount closes tomorrow.

00:24:50.640 --> 00:24:52.020
If you listen to this, right.

00:24:52.060 --> 00:24:54.940
When it comes out, so if you're interested, please check it out.

00:24:54.940 --> 00:24:59.380
it'd be super awesome to spend a week hanging out in Tuscany, doing all sorts of things together.

00:24:59.380 --> 00:25:01.560
And yeah, that's, that's, it's for my extras, Brian.

00:25:01.560 --> 00:25:03.580
That's a lot of extras, Tony.

00:25:03.580 --> 00:25:04.780
I mean, Michael.

00:25:04.780 --> 00:25:05.180
Yeah.

00:25:05.180 --> 00:25:07.180
All right.

00:25:07.180 --> 00:25:07.700
All right.

00:25:07.700 --> 00:25:08.660
Shall we have a joke?

00:25:08.660 --> 00:25:09.300
Yeah.

00:25:09.300 --> 00:25:11.400
This joke I called, I lied.

00:25:11.400 --> 00:25:14.320
And it's a, it's like a cartoon.

00:25:14.320 --> 00:25:18.060
It's a woman behind a esoteric programming sort of thing.

00:25:18.060 --> 00:25:19.120
She's got a gun.

00:25:19.120 --> 00:25:20.640
It says, I lied.

00:25:20.740 --> 00:25:22.540
I don't have Netflix, take off your shoes.

00:25:22.540 --> 00:25:23.500
We're going to learn rust.

00:25:23.500 --> 00:25:27.860
And I just thought about like this, all this like rust energy.

00:25:27.860 --> 00:25:29.320
Like we're converting that to the rest.

00:25:29.320 --> 00:25:30.580
We're rewriting that in rust.

00:25:30.580 --> 00:25:32.260
It's just like, you're doing rust.

00:25:32.260 --> 00:25:33.340
That's what the world's doing.

00:25:33.340 --> 00:25:34.360
Sit down.

00:25:34.820 --> 00:25:37.240
So she invited someone over to like watch Netflix.

00:25:37.240 --> 00:25:38.280
Like I lied.

00:25:38.280 --> 00:25:38.920
I don't know Netflix.

00:25:38.920 --> 00:25:39.960
Take off your shoes.

00:25:39.960 --> 00:25:40.700
We're going to learn rust.

00:25:41.940 --> 00:25:43.920
I thought it would catch the zeitgeist.

00:25:43.920 --> 00:25:44.640
Well, right.

00:25:44.640 --> 00:25:45.400
It's bizarre, man.

00:25:45.400 --> 00:25:47.460
It's amazing.

00:25:47.460 --> 00:25:49.040
Okay.

00:25:49.040 --> 00:25:53.820
And I'll, I'll, I'll maybe I'll put that is the chapter art for this one.

00:25:53.820 --> 00:25:55.660
Cause the picture, the eyes are amazing.

00:25:55.660 --> 00:25:56.440
The desperation.

00:25:56.440 --> 00:25:57.520
That's pretty good.

00:25:57.520 --> 00:25:58.000
Yeah.

00:25:58.000 --> 00:25:58.420
Yeah.

00:25:58.420 --> 00:25:58.660
Yeah.

00:25:58.660 --> 00:25:58.920
Yeah.

00:25:58.920 --> 00:25:59.000
Yeah.

00:25:59.000 --> 00:25:59.100
Yeah.

00:25:59.100 --> 00:25:59.160
Yeah.

00:25:59.160 --> 00:26:01.620
I've resisted.

00:26:01.620 --> 00:26:02.980
I've resisted rust so far.

00:26:02.980 --> 00:26:07.660
I mean, I'm, I'm, I'm happy that things are getting faster and whatnot, but I haven't

00:26:07.660 --> 00:26:08.180
learned it yet.

00:26:08.180 --> 00:26:08.560
We'll see.

00:26:08.560 --> 00:26:09.440
Same.

00:26:09.440 --> 00:26:10.080
All right.

00:26:10.080 --> 00:26:11.000
Well, cool.

00:26:11.000 --> 00:26:11.940
Nice episode.

00:26:11.940 --> 00:26:13.960
Thanks for joining today.

00:26:13.960 --> 00:26:14.620
You bet.

00:26:14.620 --> 00:26:15.580
Fun as always.

